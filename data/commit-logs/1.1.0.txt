From 18b2d8750a0caeb1586365f9f0756626f8de082f Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Tue, 1 Mar 2005 15:33:55 +0000
Subject: [PATCH 001/124] Updated tz data to version 2005f.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@733 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/java/org/joda/time/tz/src/Readme.txt  |   2 +-
 JodaTime/src/java/org/joda/time/tz/src/asia   | 154 ++++++++----------
 .../src/java/org/joda/time/tz/src/australasia |  13 +-
 JodaTime/src/java/org/joda/time/tz/src/europe |  31 +++-
 .../java/org/joda/time/tz/src/northamerica    |   4 +-
 .../java/org/joda/time/tz/src/southamerica    |   4 +-
 6 files changed, 116 insertions(+), 92 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
index f072bc35e..315ec18ef 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
+++ b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
@@ -1,2 +1,2 @@
 The data files in this directory were obtained from the public tz database,
-http://www.twinsun.com/tz/tz-link.htm, version 2005c.
+http://www.twinsun.com/tz/tz-link.htm, version 2005f.
diff --git a/JodaTime/src/java/org/joda/time/tz/src/asia b/JodaTime/src/java/org/joda/time/tz/src/asia
index 0d1439d1b..4be50b0aa 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/asia
+++ b/JodaTime/src/java/org/joda/time/tz/src/asia
@@ -1,4 +1,4 @@
-# @(#)asia	7.78
+# @(#)asia	7.80
 
 # This data is by no means authoritative; if you think you know better,
 # go ahead and edit the file (and please send any changes to
@@ -107,7 +107,7 @@ Zone	Asia/Baku	3:19:24 -	LMT	1924 May  2
 			3:00	-	BAKT	1957 Mar    # Baku Time
 			4:00 RussiaAsia BAK%sT	1991 Mar 31 2:00s
 			3:00	1:00	BAKST	1991 Aug 30 # independence
-			3:00 RussiaAsia	AZ%sT	1992 Sep lastSun 2:00s
+			3:00 RussiaAsia	AZ%sT	1992 Sep lastSat 23:00
 			4:00	-	AZT	1996 # Azerbaijan time
 			4:00	EUAsia	AZ%sT	1997
 			4:00	Azer	AZ%sT
@@ -337,7 +337,7 @@ Link	Asia/Nicosia	Europe/Nicosia
 # President Eduard Shevardnadze decreed Wednesday.
 #
 # From the BBC via Joseph S. Myers (2004-06-27):
-#  	
+#
 # Georgia moved closer to Western Europe on Sunday...  The former Soviet
 # republic has changed its time zone back to that of Moscow.  As a result it
 # is now just four hours ahead of Greenwich Mean Time, rather than five hours
@@ -639,7 +639,8 @@ Rule	Zion	1988	only	-	Apr	 9	0:00	1:00	D
 Rule	Zion	1988	only	-	Sep	 3	0:00	0	S
 
 # From Ephraim Silverberg <ephraim@cs.huji.ac.il>
-# (1997-03-04, 1998-03-16, 1998-12-28, 2000-01-17, 2000-07-25, and 2004-12-22):
+# (1997-03-04, 1998-03-16, 1998-12-28, 2000-01-17, 2000-07-25, 2004-12-22,
+# and 2005-02-17):
 
 # According to the Office of the Secretary General of the Ministry of
 # Interior, there is NO set rule for Daylight-Savings/Standard time changes.
@@ -735,91 +736,74 @@ Rule	Zion	2003	only	-	Oct	 3	1:00	0	S
 Rule	Zion	2004	only	-	Apr	 7	1:00	1:00	D
 Rule	Zion	2004	only	-	Sep	22	1:00	0	S
 
-# Yesterday, the Knesset Interior Committee passed a proposed (originally
-# in March 2004) change to the Time Setting Law that would make the dates
-# for DST from 2005 and beyond so that DST starts on the night _after_ the
-# first night of the Passover holiday at midnight until midnight of the
-# Saturday night _before_ the fast of Yom Kippur.
+# The proposed law agreed upon by the Knesset Interior Committee on
+# 2005-02-14 is that, for 2005 and beyond, DST starts at 02:00 the
+# last Friday before April 2nd (i.e. the last Friday in March or April
+# 1st itself if it falls on a Friday) and ends at 02:00 on the Saturday
+# night _before_ the fast of Yom Kippur.
+#
+# Those who can read Hebrew can view the announcement at:
 #
-# Those who can read Hebrew can view the proposal at:
+#	ftp://ftp.cs.huji.ac.il/pub/tz/announcements/2005+beyond.ps
+
+# From Paul Eggert (2005-02-22):
+# I used Ephraim Silverberg's dst-israel.el program
+# <ftp://ftp.cs.huji.ac.il/pub/tz/software/dst-israel.el> (2005-02-20)
+# along with Ed Reingold's cal-hebrew in GNU Emacs 21.4,
+# to generate the transitions in this list.
+# (I replaced "lastFri" with "Fri>=26" by hand.)
+# The spring transitions below all correspond to the following Rule:
 #
-#	ftp://ftp.cs.huji.ac.il/pub/tz/announcements/2005+.ps
+# Rule	Zion	2005	max	-	Mar	Fri>=26	2:00	1:00	D
 #
-# The proposal still has to be passed by the Knesset (three readings) for
-# it to become law....
+# but older zic implementations (e.g., Solaris 8) do not support
+# "Fri>=26" to mean April 1 in years like 2005, so for now we list the
+# springtime transitions explicitly.
 
-# From Paul Eggert (2004-12-22):
-# For now, guess that the rules proposed on 2004-12-20 will be adopted.
-# This is quite possibly wrong, but it is more likely than no DST at all.
-# I used Ed Reingold's cal-hebrew in GNU Emacs 21.3, along with code
-# written by Ephraim Silverberg, to generate this list.
-# Rule	NAME    FROM    TO      TYPE    IN      ON      AT      SAVE    LETTER/S
-Rule	Zion	2005	only	-	Apr	25	0:00	1:00	D
-Rule	Zion	2005	only	-	Oct	 9	0:00	0	S
-Rule	Zion	2006	only	-	Apr	14	0:00	1:00	D
-Rule	Zion	2006	only	-	Oct	 1	0:00	0	S
-Rule	Zion	2007	only	-	Apr	 4	0:00	1:00	D
-Rule	Zion	2007	only	-	Sep	16	0:00	0	S
-Rule	Zion	2008	only	-	Apr	21	0:00	1:00	D
-Rule	Zion	2008	only	-	Oct	 5	0:00	0	S
-Rule	Zion	2009	only	-	Apr	10	0:00	1:00	D
-Rule	Zion	2009	only	-	Sep	27	0:00	0	S
-Rule	Zion	2010	only	-	Mar	31	0:00	1:00	D
-Rule	Zion	2010	only	-	Sep	12	0:00	0	S
-Rule	Zion	2011	only	-	Apr	20	0:00	1:00	D
-Rule	Zion	2011	only	-	Oct	 2	0:00	0	S
-Rule	Zion	2012	only	-	Apr	 8	0:00	1:00	D
-Rule	Zion	2012	only	-	Sep	23	0:00	0	S
-Rule	Zion	2013	only	-	Mar	27	0:00	1:00	D
-Rule	Zion	2013	only	-	Sep	 8	0:00	0	S
-Rule	Zion	2014	only	-	Apr	16	0:00	1:00	D
-Rule	Zion	2014	only	-	Sep	28	0:00	0	S
-Rule	Zion	2015	only	-	Apr	 5	0:00	1:00	D
-Rule	Zion	2015	only	-	Sep	20	0:00	0	S
-Rule	Zion	2016	only	-	Apr	24	0:00	1:00	D
-Rule	Zion	2016	only	-	Oct	 9	0:00	0	S
-Rule	Zion	2017	only	-	Apr	12	0:00	1:00	D
-Rule	Zion	2017	only	-	Sep	24	0:00	0	S
-Rule	Zion	2018	only	-	Apr	 1	0:00	1:00	D
-Rule	Zion	2018	only	-	Sep	16	0:00	0	S
-Rule	Zion	2019	only	-	Apr	21	0:00	1:00	D
-Rule	Zion	2019	only	-	Oct	 6	0:00	0	S
-Rule	Zion	2020	only	-	Apr	10	0:00	1:00	D
-Rule	Zion	2020	only	-	Sep	27	0:00	0	S
-Rule	Zion	2021	only	-	Mar	29	0:00	1:00	D
-Rule	Zion	2021	only	-	Sep	12	0:00	0	S
-Rule	Zion	2022	only	-	Apr	17	0:00	1:00	D
-Rule	Zion	2022	only	-	Oct	 2	0:00	0	S
-Rule	Zion	2023	only	-	Apr	 7	0:00	1:00	D
-Rule	Zion	2023	only	-	Sep	24	0:00	0	S
-Rule	Zion	2024	only	-	Apr	24	0:00	1:00	D
-Rule	Zion	2024	only	-	Oct	 6	0:00	0	S
-Rule	Zion	2025	only	-	Apr	14	0:00	1:00	D
-Rule	Zion	2025	only	-	Sep	28	0:00	0	S
-Rule	Zion	2026	only	-	Apr	 3	0:00	1:00	D
-Rule	Zion	2026	only	-	Sep	20	0:00	0	S
-Rule	Zion	2027	only	-	Apr	23	0:00	1:00	D
-Rule	Zion	2027	only	-	Oct	10	0:00	0	S
-Rule	Zion	2028	only	-	Apr	12	0:00	1:00	D
-Rule	Zion	2028	only	-	Sep	24	0:00	0	S
-Rule	Zion	2029	only	-	Apr	 1	0:00	1:00	D
-Rule	Zion	2029	only	-	Sep	16	0:00	0	S
-Rule	Zion	2030	only	-	Apr	19	0:00	1:00	D
-Rule	Zion	2030	only	-	Oct	 6	0:00	0	S
-Rule	Zion	2031	only	-	Apr	 9	0:00	1:00	D
-Rule	Zion	2031	only	-	Sep	21	0:00	0	S
-Rule	Zion	2032	only	-	Mar	28	0:00	1:00	D
-Rule	Zion	2032	only	-	Sep	12	0:00	0	S
-Rule	Zion	2033	only	-	Apr	15	0:00	1:00	D
-Rule	Zion	2033	only	-	Oct	 2	0:00	0	S
-Rule	Zion	2034	only	-	Apr	 5	0:00	1:00	D
-Rule	Zion	2034	only	-	Sep	17	0:00	0	S
-Rule	Zion	2035	only	-	Apr	25	0:00	1:00	D
-Rule	Zion	2035	only	-	Oct	 7	0:00	0	S
-Rule	Zion	2036	only	-	Apr	13	0:00	1:00	D
-Rule	Zion	2036	only	-	Sep	28	0:00	0	S
-Rule	Zion	2037	only	-	Apr	 1	0:00	1:00	D
-Rule	Zion	2037	only	-	Sep	13	0:00	0	S
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Zion	2005	only	-	Apr	 1	2:00	1:00	D
+Rule	Zion	2005	only	-	Oct	 9	2:00	0	S
+Rule	Zion	2006	2010	-	Mar	Fri>=26	2:00	1:00	D
+Rule	Zion	2006	only	-	Oct	 1	2:00	0	S
+Rule	Zion	2007	only	-	Sep	16	2:00	0	S
+Rule	Zion	2008	only	-	Oct	 5	2:00	0	S
+Rule	Zion	2009	only	-	Sep	27	2:00	0	S
+Rule	Zion	2010	only	-	Sep	12	2:00	0	S
+Rule	Zion	2011	only	-	Apr	 1	2:00	1:00	D
+Rule	Zion	2011	only	-	Oct	 2	2:00	0	S
+Rule	Zion	2012	2015	-	Mar	Fri>=26	2:00	1:00	D
+Rule	Zion	2012	only	-	Sep	23	2:00	0	S
+Rule	Zion	2013	only	-	Sep	 8	2:00	0	S
+Rule	Zion	2014	only	-	Sep	28	2:00	0	S
+Rule	Zion	2015	only	-	Sep	20	2:00	0	S
+Rule	Zion	2016	only	-	Apr	 1	2:00	1:00	D
+Rule	Zion	2016	only	-	Oct	 9	2:00	0	S
+Rule	Zion	2017	2021	-	Mar	Fri>=26	2:00	1:00	D
+Rule	Zion	2017	only	-	Sep	24	2:00	0	S
+Rule	Zion	2018	only	-	Sep	16	2:00	0	S
+Rule	Zion	2019	only	-	Oct	 6	2:00	0	S
+Rule	Zion	2020	only	-	Sep	27	2:00	0	S
+Rule	Zion	2021	only	-	Sep	12	2:00	0	S
+Rule	Zion	2022	only	-	Apr	 1	2:00	1:00	D
+Rule	Zion	2022	only	-	Oct	 2	2:00	0	S
+Rule	Zion	2023	2032	-	Mar	Fri>=26	2:00	1:00	D
+Rule	Zion	2023	only	-	Sep	24	2:00	0	S
+Rule	Zion	2024	only	-	Oct	 6	2:00	0	S
+Rule	Zion	2025	only	-	Sep	28	2:00	0	S
+Rule	Zion	2026	only	-	Sep	20	2:00	0	S
+Rule	Zion	2027	only	-	Oct	10	2:00	0	S
+Rule	Zion	2028	only	-	Sep	24	2:00	0	S
+Rule	Zion	2029	only	-	Sep	16	2:00	0	S
+Rule	Zion	2030	only	-	Oct	 6	2:00	0	S
+Rule	Zion	2031	only	-	Sep	21	2:00	0	S
+Rule	Zion	2032	only	-	Sep	12	2:00	0	S
+Rule	Zion	2033	only	-	Apr	 1	2:00	1:00	D
+Rule	Zion	2033	only	-	Oct	 2	2:00	0	S
+Rule	Zion	2034	2037	-	Mar	Fri>=26	2:00	1:00	D
+Rule	Zion	2034	only	-	Sep	17	2:00	0	S
+Rule	Zion	2035	only	-	Oct	 7	2:00	0	S
+Rule	Zion	2036	only	-	Sep	28	2:00	0	S
+Rule	Zion	2037	only	-	Sep	13	2:00	0	S
 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Asia/Jerusalem	2:20:56 -	LMT	1880
diff --git a/JodaTime/src/java/org/joda/time/tz/src/australasia b/JodaTime/src/java/org/joda/time/tz/src/australasia
index f265eece9..4696d0b2e 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/australasia
+++ b/JodaTime/src/java/org/joda/time/tz/src/australasia
@@ -1,4 +1,4 @@
-# @(#)australasia	7.69
+# @(#)australasia	7.70
 # This file also includes Pacific islands.
 
 # Notes are at the end of this file
@@ -434,6 +434,17 @@ Zone Pacific/Johnston	-10:00	-	HST
 # uninhabited
 
 # Midway
+#
+# From Mark Brader (2005-01-23):
+# [Fallacies and Fantasies of Air Transport History, by R.E.G. Davies,
+# published 1994 by Paladwr Press, McLean, VA, USA; ISBN 0-9626483-5-3]
+# reproduced a Pan American Airways timeables from 1936, for their weekly
+# "Orient Express" flights between San Francisco and Manila, and connecting
+# flights to Chicago and the US East Coast.  As it uses some time zone
+# designations that I've never seen before:....
+# Fri. 6:30A Lv. HONOLOLU (Pearl Harbor), H.I.   H.L.T. Ar. 5:30P Sun.
+#  "   3:00P Ar. MIDWAY ISLAND . . . . . . . . . M.L.T. Lv. 6:00A  "
+#
 Zone Pacific/Midway	-11:49:28 -	LMT	1901
 			-11:00	-	NST	1956 Jun  3
 			-11:00	1:00	NDT	1956 Sep  2
diff --git a/JodaTime/src/java/org/joda/time/tz/src/europe b/JodaTime/src/java/org/joda/time/tz/src/europe
index a4ff15ae0..f7fd57e9e 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/europe
+++ b/JodaTime/src/java/org/joda/time/tz/src/europe
@@ -1,4 +1,4 @@
-# @(#)europe	7.91
+# @(#)europe	7.92
 
 # This data is by no means authoritative; if you think you know better,
 # go ahead and edit the file (and please send any changes to
@@ -255,6 +255,35 @@
 #   "Timeball on the ballast office is down.  Dunsink time."
 #   -- James Joyce, Ulysses
 
+# From Joseph S. Myers (2005-01-26):
+# Irish laws are available online at www.irishstatutebook.ie.  These include 
+# various relating to legal time, for example:
+# 
+# ZZA13Y1923.html ZZA12Y1924.html ZZA8Y1925.html ZZSIV20PG1267.html
+# 
+# ZZSI71Y1947.html ZZSI128Y1948.html ZZSI23Y1949.html ZZSI41Y1950.html
+# ZZSI27Y1951.html ZZSI73Y1952.html
+# 
+# ZZSI11Y1961.html ZZSI232Y1961.html ZZSI182Y1962.html
+# ZZSI167Y1963.html ZZSI257Y1964.html ZZSI198Y1967.html
+# ZZA23Y1968.html ZZA17Y1971.html
+# 
+# ZZSI67Y1981.html ZZSI212Y1982.html ZZSI45Y1986.html
+# ZZSI264Y1988.html ZZSI52Y1990.html ZZSI371Y1992.html
+# ZZSI395Y1994.html ZZSI484Y1997.html ZZSI506Y2001.html
+#
+# [These are all relative to the root, e.g., the first is
+# <http://www.irishstatutebook.ie/ZZA13Y1923.html>.]
+# 
+# (These are those I found, but there could be more.  In any case these 
+# should allow various updates to the comments in the europe file to cover 
+# the laws applicable in Ireland.)
+# 
+# (Note that the time in the Republic of Ireland since 1968 has been defined 
+# in terms of standard time being GMT+1 with a period of winter time when it 
+# is GMT, rather than standard time being GMT with a period of summer time 
+# being GMT+1.)
+
 # From Paul Eggert (1999-03-28):
 # Clive Feather (<news:859845706.26043.0@office.demon.net>, 1997-03-31)
 # reports that Folkestone (Cheriton) Shuttle Terminal uses Concession Time
diff --git a/JodaTime/src/java/org/joda/time/tz/src/northamerica b/JodaTime/src/java/org/joda/time/tz/src/northamerica
index 950b46af7..3d89e968d 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/northamerica
+++ b/JodaTime/src/java/org/joda/time/tz/src/northamerica
@@ -1,4 +1,4 @@
-# @(#)northamerica	7.71
+# @(#)northamerica	7.72
 # also includes Central America and the Caribbean
 
 # This data is by no means authoritative; if you think you know better,
@@ -445,7 +445,7 @@ Link America/Denver America/Shiprock
 # Lemhi, Lincoln, Madison, Minidoka, Oneida, Owyhee, Payette, Power,
 # Teton, Twin Falls, Valley, Washington counties) and eastern Oregon
 # switched four weeks late in 1974.
-# 
+#
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone America/Boise	-7:44:49 -	LMT	1883 Nov 18 12:00
 			-8:00	US	P%sT	1923 May 13 2:00
diff --git a/JodaTime/src/java/org/joda/time/tz/src/southamerica b/JodaTime/src/java/org/joda/time/tz/src/southamerica
index bc93e1126..c5bd51695 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/southamerica
+++ b/JodaTime/src/java/org/joda/time/tz/src/southamerica
@@ -1,4 +1,4 @@
-# @(#)southamerica	7.57
+# @(#)southamerica	7.58
 
 # This data is by no means authoritative; if you think you know better,
 # go ahead and edit the file (and please send any changes to
@@ -964,7 +964,7 @@ Zone America/Asuncion	-3:50:40 -	LMT	1890
 #
 # <a href="news:xrGmb.39935$gA1.13896113@news4.srv.hcvlny.cv.net">
 # From Evelyn C. Leeper via Mark Brader (2003-10-26):</a>
-# When we were in Peru in 1985-1986, they apparently switched over 
+# When we were in Peru in 1985-1986, they apparently switched over
 # sometime between December 29 and January 3 while we were on the Amazon.
 #
 # From Paul Eggert (2003-11-02):

From 8e7ec5eeb1efc102766038c0622420f0ca774270 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Thu, 3 Mar 2005 22:53:33 +0000
Subject: [PATCH 002/124] Add more tests

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@734 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/test/org/joda/time/format/TestDateTimeFormat.java   | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java b/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java
index 69b656d90..daeafc9ce 100644
--- a/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java
+++ b/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java
@@ -558,4 +558,10 @@ public void testFormat_invalid() {
         } catch (IllegalArgumentException ex) {}
     }
 
+    public void testFormat_samples() {
+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);
+        DateTimeFormatter f = DateTimeFormat.forPattern("yyyy-MM-dd HH.mm.ss");
+        assertEquals("2004-06-09 10.20.30", f.print(dt));
+    }
+
 }

From ce5cb6026c654f0ec928dfb2d9761bea2216e2df Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Thu, 3 Mar 2005 22:54:56 +0000
Subject: [PATCH 003/124] Add withPivotYear

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@735 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/ToDo.txt | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/JodaTime/ToDo.txt b/JodaTime/ToDo.txt
index 1155f2505..3f84371bd 100644
--- a/JodaTime/ToDo.txt
+++ b/JodaTime/ToDo.txt
@@ -3,6 +3,9 @@ JodaTime ToDo list
 
 For 1.1
 -------
+- DateTimeFormatter.withPivotYear(year)
+    to provide more control of 2 digit year formatting
+
 The TODO list for 1.1 has not been set yet, however I would hope that
 at least some of the items below will be included.
 

From 4db6cb0fc688b11f32b52651a683560d92640d80 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 5 Mar 2005 17:21:12 +0000
Subject: [PATCH 004/124] Move zone info load to ZoneInfoProvider (allows
 ZoneInfoCompiler to be dropped from jar)

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@736 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../org/joda/time/tz/ZoneInfoCompiler.java    |  23 ----
 .../org/joda/time/tz/ZoneInfoProvider.java    | 109 ++++++++++++++----
 2 files changed, 84 insertions(+), 48 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java b/JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java
index cd1b61a29..d03404d43 100644
--- a/JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java
+++ b/JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java
@@ -16,7 +16,6 @@
 package org.joda.time.tz;
 
 import java.io.BufferedReader;
-import java.io.DataInputStream;
 import java.io.DataOutputStream;
 import java.io.File;
 import java.io.FileInputStream;
@@ -189,28 +188,6 @@ static void writeZoneInfoMap(DataOutputStream dout, Map zimap) throws IOExceptio
         }
     }
 
-    /**
-     * @param zimap gets filled with string id to string id mappings
-     */
-    static void readZoneInfoMap(DataInputStream din, Map zimap) throws IOException {
-        // Read the string pool.
-        int size = din.readUnsignedShort();
-        String[] pool = new String[size];
-        for (int i=0; i<size; i++) {
-            pool[i] = din.readUTF().intern();
-        }
-
-        // Read the mappings.
-        size = din.readUnsignedShort();
-        for (int i=0; i<size; i++) {
-            try {
-                zimap.put(pool[din.readUnsignedShort()], pool[din.readUnsignedShort()]);
-            } catch (ArrayIndexOutOfBoundsException e) {
-                throw new IOException("Corrupt zone info map");
-            }
-        }
-    }
-
     static int parseYear(String str, int def) {
         str = str.toLowerCase();
         if (str.equals("minimum") || str.equals("min")) {
diff --git a/JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java b/JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java
index 291d4a614..c486d5b1d 100644
--- a/JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java
+++ b/JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java
@@ -38,26 +38,14 @@
  * @since 1.0
  */
 public class ZoneInfoProvider implements Provider {
-    private static Map loadZoneInfoMap(InputStream in) throws IOException {
-        Map map = new TreeMap(String.CASE_INSENSITIVE_ORDER);
-        DataInputStream din = new DataInputStream(in);
-        try {
-            ZoneInfoCompiler.readZoneInfoMap(din, map);
-        } finally {
-            try {
-                din.close();
-            } catch (IOException e) {
-            }
-        }
-        map.put("UTC", new SoftReference(DateTimeZone.UTC));
-        return map;
-    }
 
+    /** The directory where the files are held. */
     private final File iFileDir;
+    /** The resource path. */
     private final String iResourcePath;
+    /** The class loader to use. */
     private final ClassLoader iLoader;
-
-    // Maps ids to strings or SoftReferences to DateTimeZones.
+    /** Maps ids to strings or SoftReferences to DateTimeZones. */
     private final Map iZoneInfoMap;
 
     /**
@@ -135,10 +123,14 @@ private ZoneInfoProvider(String resourcePath,
         iZoneInfoMap = loadZoneInfoMap(openResource("ZoneInfoMap"));
     }
 
+    //-----------------------------------------------------------------------
     /**
      * If an error is thrown while loading zone data, uncaughtException is
      * called to log the error and null is returned for this and all future
      * requests.
+     * 
+     * @param id  the id to load
+     * @return the loaded zone
      */
     public synchronized DateTimeZone getZone(String id) {
         if (id == null) {
@@ -168,19 +160,32 @@ public synchronized DateTimeZone getZone(String id) {
         return getZone((String)obj);
     }
 
+    /**
+     * Gets a list of all the available zone ids.
+     * 
+     * @return the zone ids
+     */
     public synchronized Set getAvailableIDs() {
         return Collections.unmodifiableSet(iZoneInfoMap.keySet());
     }
 
     /**
-     * Called if an exception is thrown from getZone while loading zone
-     * data.
+     * Called if an exception is thrown from getZone while loading zone data.
+     * 
+     * @param ex  the exception
      */
-    protected void uncaughtException(Exception e) {
+    protected void uncaughtException(Exception ex) {
         Thread t = Thread.currentThread();
-        t.getThreadGroup().uncaughtException(t, e);
+        t.getThreadGroup().uncaughtException(t, ex);
     }
 
+    /**
+     * Opens a resource from file or classpath.
+     * 
+     * @param name  the name to open
+     * @return the input stream
+     * @throws IOException if an error occurs
+     */
     private InputStream openResource(String name) throws IOException {
         InputStream in;
         if (iFileDir != null) {
@@ -193,17 +198,23 @@ private InputStream openResource(String name) throws IOException {
                 in = ClassLoader.getSystemResourceAsStream(path);
             }
             if (in == null) {
-                StringBuffer buf = new StringBuffer(40);
-                buf.append("Resource not found: \"");
-                buf.append(path);
-                buf.append("\" ClassLoader: ");
-                buf.append(iLoader != null ? iLoader.toString() : "system");
+                StringBuffer buf = new StringBuffer(40)
+                    .append("Resource not found: \"")
+                    .append(path)
+                    .append("\" ClassLoader: ")
+                    .append(iLoader != null ? iLoader.toString() : "system");
                 throw new IOException(buf.toString());
             }
         }
         return in;
     }
 
+    /**
+     * Loads the time zone data for one id.
+     * 
+     * @param id  the id to load
+     * @return the zone
+     */
     private DateTimeZone loadZoneData(String id) {
         InputStream in = null;
         try {
@@ -224,4 +235,52 @@ private DateTimeZone loadZoneData(String id) {
             }
         }
     }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Loads the zone info map.
+     * 
+     * @param in  the input stream
+     * @return the map
+     */
+    private static Map loadZoneInfoMap(InputStream in) throws IOException {
+        Map map = new TreeMap(String.CASE_INSENSITIVE_ORDER);
+        DataInputStream din = new DataInputStream(in);
+        try {
+            readZoneInfoMap(din, map);
+        } finally {
+            try {
+                din.close();
+            } catch (IOException e) {
+            }
+        }
+        map.put("UTC", new SoftReference(DateTimeZone.UTC));
+        return map;
+    }
+
+    /**
+     * Reads the zone info map from file.
+     * 
+     * @param din  the input stream
+     * @param zimap  gets filled with string id to string id mappings
+     */
+    private static void readZoneInfoMap(DataInputStream din, Map zimap) throws IOException {
+        // Read the string pool.
+        int size = din.readUnsignedShort();
+        String[] pool = new String[size];
+        for (int i=0; i<size; i++) {
+            pool[i] = din.readUTF().intern();
+        }
+
+        // Read the mappings.
+        size = din.readUnsignedShort();
+        for (int i=0; i<size; i++) {
+            try {
+                zimap.put(pool[din.readUnsignedShort()], pool[din.readUnsignedShort()]);
+            } catch (ArrayIndexOutOfBoundsException e) {
+                throw new IOException("Corrupt zone info map");
+            }
+        }
+    }
+
 }

From e97bb78797a379a6d0dcdacd37dd87f07677f738 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 5 Mar 2005 18:27:00 +0000
Subject: [PATCH 005/124] Add DateTimeFormatter.withPivotYear to handle pattern
 pivot control from Fredrik Borgh

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@737 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../joda/time/format/DateTimeFormatter.java   | 76 ++++++++++++++++---
 .../time/format/DateTimeFormatterBuilder.java | 11 ++-
 .../time/format/DateTimeParserBucket.java     | 55 ++++++++++++--
 .../joda/time/format/TestDateTimeFormat.java  | 26 +++++++
 4 files changed, 152 insertions(+), 16 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java b/JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java
index e43f2fe8a..2065684e9 100644
--- a/JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java
+++ b/JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java
@@ -70,6 +70,7 @@
  * 
  * @author Brian S O'Neill
  * @author Stephen Colebourne
+ * @author Fredrik Borgh
  * @since 1.0
  */
 public class DateTimeFormatter {
@@ -86,6 +87,8 @@
     private final Chronology iChrono;
     /** The zone to use as an override. */
     private final DateTimeZone iZone;
+    /* The pivot year to use for two-digit year parsing. */
+    private final Integer iPivotYear;
 
     /**
      * Creates a new formatter, however you will normally use the factory
@@ -103,6 +106,7 @@ public DateTimeFormatter(
         iOffsetParsed = false;
         iChrono = null;
         iZone = null;
+        iPivotYear = null;
     }
 
     /**
@@ -111,7 +115,8 @@ public DateTimeFormatter(
     private DateTimeFormatter(
             DateTimePrinter printer, DateTimeParser parser,
             Locale locale, boolean offsetParsed,
-            Chronology chrono, DateTimeZone zone) {
+            Chronology chrono, DateTimeZone zone,
+            Integer pivotYear) {
         super();
         iPrinter = printer;
         iParser = parser;
@@ -119,6 +124,7 @@ private DateTimeFormatter(
         iOffsetParsed = offsetParsed;
         iChrono = chrono;
         iZone = zone;
+        iPivotYear = pivotYear;
     }
 
     //-----------------------------------------------------------------------
@@ -173,7 +179,8 @@ public DateTimeFormatter withLocale(Locale locale) {
         if (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {
             return this;
         }
-        return new DateTimeFormatter(iPrinter, iParser, locale, iOffsetParsed, iChrono, iZone);
+        return new DateTimeFormatter(iPrinter, iParser, locale,
+                iOffsetParsed, iChrono, iZone, iPivotYear);
     }
 
     /**
@@ -204,7 +211,8 @@ public DateTimeFormatter withOffsetParsed() {
         if (iOffsetParsed == true) {
             return this;
         }
-        return new DateTimeFormatter(iPrinter, iParser, iLocale, true, iChrono, null);
+        return new DateTimeFormatter(iPrinter, iParser, iLocale,
+                true, iChrono, null, iPivotYear);
     }
 
     /**
@@ -238,7 +246,8 @@ public DateTimeFormatter withChronology(Chronology chrono) {
         if (iChrono == chrono) {
             return this;
         }
-        return new DateTimeFormatter(iPrinter, iParser, iLocale, iOffsetParsed, chrono, iZone);
+        return new DateTimeFormatter(iPrinter, iParser, iLocale,
+                iOffsetParsed, chrono, iZone, iPivotYear);
     }
 
     /**
@@ -271,7 +280,8 @@ public DateTimeFormatter withZone(DateTimeZone zone) {
         if (iZone == zone) {
             return this;
         }
-        return new DateTimeFormatter(iPrinter, iParser, iLocale, false, iChrono, zone);
+        return new DateTimeFormatter(iPrinter, iParser, iLocale,
+                false, iChrono, zone, iPivotYear);
     }
 
     /**
@@ -283,6 +293,54 @@ public DateTimeZone getZone() {
         return iZone;
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Returns a new formatter that will use the specified pivot year for two
+     * digit year parsing in preference to that stored in the parser.
+     * <p>
+     * This setting is useful for changing the pivot year of formats built
+     * using a pattern - {@link DateTimeFormat#forPattern(String)}.
+     * <p>
+     * When parsing, this pivot year is used. Null means no-override.
+     * There is no effect when printing.
+     * <p>
+     * The pivot year enables a two digit year to be converted to a four
+     * digit year. The pivot represents the year in the middle of the
+     * supported range of years. Thus the full range of years that will
+     * be built is <code>(pivot - 50) .. (pivot + 49)</code>.
+     *
+     * <pre>
+     * pivot   supported range   00 is   20 is   40 is   60 is   80 is
+     * ---------------------------------------------------------------
+     * 1950      1900..1999      1900    1920    1940    1960    1980
+     * 1975      1925..2024      2000    2020    1940    1960    1980
+     * 2000      1950..2049      2000    2020    2040    1960    1980
+     * 2025      1975..2074      2000    2020    2040    2060    1980
+     * 2050      2000..2099      2000    2020    2040    2060    2080
+     * </pre>
+     *
+     * @param pivotYear  the pivot year to use as an override when parsing
+     * @return the new formatter
+     * @since 1.1
+     */
+    public DateTimeFormatter withPivotYear(Integer pivotYear) {
+        if (iPivotYear == pivotYear || (iPivotYear != null && iPivotYear.equals(pivotYear))) {
+            return this;
+        }
+        return new DateTimeFormatter(iPrinter, iParser, iLocale,
+                iOffsetParsed, iChrono, iZone, pivotYear);
+    }
+
+    /**
+     * Gets the pivot year to use as an override.
+     *
+     * @return the pivot year to use as an override
+     * @since 1.1
+     */
+    public Integer getPivotYear() {
+      return iPivotYear;
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Prints a ReadableInstant, using the chronology supplied by the instant.
@@ -498,7 +556,7 @@ public int parseInto(ReadWritableInstant instant, String text, int position) {
         long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
         chrono = selectChronology(chrono);
         
-        DateTimeParserBucket bucket = new DateTimeParserBucket(instantLocal, chrono, iLocale);
+        DateTimeParserBucket bucket = new DateTimeParserBucket(instantLocal, chrono, iLocale, iPivotYear);
         int newPos = iParser.parseInto(bucket, text, position);
         instant.setMillis(bucket.computeMillis());
         if (iOffsetParsed && bucket.getZone() == null) {
@@ -526,7 +584,7 @@ public long parseMillis(String text) {
         checkParser();
         
         Chronology chrono = selectChronology(iChrono);
-        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale);
+        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear);
         int newPos = iParser.parseInto(bucket, text, 0);
         if (newPos >= 0) {
             if (newPos >= text.length()) {
@@ -559,7 +617,7 @@ public DateTime parseDateTime(String text) {
         checkParser();
         
         Chronology chrono = selectChronology(null);
-        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale);
+        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear);
         int newPos = iParser.parseInto(bucket, text, 0);
         if (newPos >= 0) {
             if (newPos >= text.length()) {
@@ -598,7 +656,7 @@ public MutableDateTime parseMutableDateTime(String text) {
         checkParser();
         
         Chronology chrono = selectChronology(null);
-        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale);
+        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear);
         int newPos = iParser.parseInto(bucket, text, 0);
         if (newPos >= 0) {
             if (newPos >= text.length()) {
diff --git a/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java b/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java
index 52d1cfde3..825f4db1f 100644
--- a/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java
+++ b/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java
@@ -57,6 +57,7 @@
  *
  * @author Brian S O'Neill
  * @author Stephen Colebourne
+ * @author Fredrik Borgh
  * @since 1.0
  * @see DateTimeFormat
  * @see ISODateTimeFormat
@@ -1289,7 +1290,9 @@ public void printTo(Writer out, ReadablePartial partial, Locale locale) throws I
     static class TwoDigitYear
             implements DateTimePrinter, DateTimeParser {
 
+        /** The field to print/parse. */
         private final DateTimeFieldType iType;
+        /** The pivot year. */
         private final int iPivot;
 
         TwoDigitYear(DateTimeFieldType type, int pivot) {
@@ -1303,6 +1306,12 @@ public int estimateParsedLength() {
         }
 
         public int parseInto(DateTimeParserBucket bucket, String text, int position) {
+            int pivot = iPivot;
+            // If the bucket pivot year is non-null, use that when parsing
+            if (bucket.getPivotYear() != null) {
+                pivot = bucket.getPivotYear().intValue();
+            }
+
             int limit = Math.min(2, text.length() - position);
             if (limit < 2) {
                 return ~position;
@@ -1320,7 +1329,7 @@ public int parseInto(DateTimeParserBucket bucket, String text, int position) {
             }
             year = ((year << 3) + (year << 1)) + c - '0';
 
-            int low = iPivot - 50;
+            int low = pivot - 50;
 
             int t;
             if (low >= 0) {
diff --git a/JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java b/JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java
index e6ed01647..353b3f18c 100644
--- a/JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java
+++ b/JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java
@@ -46,6 +46,7 @@
  * DateTimeParserBucket is mutable and not thread-safe.
  *
  * @author Brian S O'Neill
+ * @author Fredrik Borgh
  * @since 1.0
  */
 public class DateTimeParserBucket {
@@ -59,27 +60,43 @@
     private int iOffset;
     /** The locale to use for parsing. */
     private Locale iLocale;
-    
-    SavedField[] iSavedFields = new SavedField[8];
-    int iSavedFieldsCount;
-    boolean iSavedFieldsShared;
+    /** Used for parsing two-digit years. */
+    private Integer iPivotYear;
+
+    private SavedField[] iSavedFields = new SavedField[8];
+    private int iSavedFieldsCount;
+    private boolean iSavedFieldsShared;
     
     private Object iSavedState;
-    
+
     /**
      * Constucts a bucket.
      * 
-     * @param instantLocal the initial millis from 1970-01-01T00:00:00, local time
+     * @param instantLocal  the initial millis from 1970-01-01T00:00:00, local time
      * @param chrono  the chronology to use
      * @param locale  the locale to use
      */
     public DateTimeParserBucket(long instantLocal, Chronology chrono, Locale locale) {
+        this(instantLocal, chrono, locale, null);
+    }
+
+    /**
+     * Constucts a bucket, with the option of specifying the pivot year for
+     * two-digit year parsing.
+     *
+     * @param instantLocal  the initial millis from 1970-01-01T00:00:00, local time
+     * @param chrono  the chronology to use
+     * @param locale  the locale to use
+     * @param pivotYear  the pivot year to use when parsing two-digit years
+     */
+    public DateTimeParserBucket(long instantLocal, Chronology chrono, Locale locale, Integer pivotYear) {
         super();
         chrono = DateTimeUtils.getChronology(chrono);
         iMillis = instantLocal;
         iChrono = chrono.withUTC();
         iLocale = (locale == null ? Locale.getDefault() : locale);
         setZone(chrono.getZone());
+        iPivotYear = pivotYear;
     }
 
     //-----------------------------------------------------------------------
@@ -140,6 +157,32 @@ public void setOffset(int offset) {
         iZone = null;
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Returns the pivot year used for parsing two-digit years.
+     * <p>
+     * If null is returned, this indicates default behaviour
+     *
+     * @return Integer value of the pivot year, null if not set
+     * @since 1.1
+     */
+    public Integer getPivotYear() {
+        return iPivotYear;
+    }
+
+    /**
+     * Sets the pivot year to use when parsing two digit years.
+     * <p>
+     * If the value is set to null, this will indicate that default
+     * behaviour should be used.
+     *
+     * @param pivotYear  the pivot year to use
+     * @since 1.1
+     */
+    public void setPivotYear(Integer pivotYear) {
+        iPivotYear = pivotYear;
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Saves a datetime field value.
diff --git a/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java b/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java
index daeafc9ce..f7dc68123 100644
--- a/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java
+++ b/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java
@@ -30,6 +30,7 @@
  * This class is a Junit unit test for DateTime Formating.
  *
  * @author Stephen Colebourne
+ * @author Fredrik Borgh
  */
 public class TestDateTimeFormat extends TestCase {
 
@@ -147,6 +148,15 @@ public void testFormat_yearOfEra_twoDigit() {
         
         expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC);
         assertEquals(expect, f.parseDateTime("21"));
+
+        /* Added tests for pivot year setting */
+        f = f.withPivotYear(new Integer(2050));
+        expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC);
+        assertEquals(expect, f.parseDateTime("00"));
+
+        expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC);
+        assertEquals(expect, f.parseDateTime("99"));
+
     }
 
     //-----------------------------------------------------------------------
@@ -184,6 +194,14 @@ public void testFormat_year_twoDigit() {
         
         expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC);
         assertEquals(expect, f.parseDateTime("21"));
+
+        /* Added tests for pivot year setting */
+        f = f.withPivotYear(new Integer(2050));
+        expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC);
+        assertEquals(expect, f.parseDateTime("00"));
+
+        expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC);
+        assertEquals(expect, f.parseDateTime("99"));
     }
 
     public void testFormat_year_long() {
@@ -235,6 +253,14 @@ public void testFormat_weekyearOfEra_twoDigit() {
         
         expect = new DateTime(2021, 1, 4, 0, 0, 0, 0, UTC);
         assertEquals(expect, f.parseDateTime("21"));
+
+        /* Added tests for pivot year setting */
+        f = f.withPivotYear(new Integer(2050));
+        expect = new DateTime(2000, 1, 3, 0, 0, 0, 0, DateTimeZone.UTC);
+        assertEquals(expect, f.parseDateTime("00"));
+
+        expect = new DateTime(2098, 12, 29, 0, 0, 0, 0, DateTimeZone.UTC);
+        assertEquals(expect, f.parseDateTime("99"));
     }
 
     //-----------------------------------------------------------------------

From 32c128f504142f648cb73bb03ac14d8750d75532 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 5 Mar 2005 18:34:05 +0000
Subject: [PATCH 006/124] Add DateTimeFormatter.withPivotYear to handle pattern
 pivot control from Fredrik Borgh

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@738 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt | 33 ++++++++++++++++-----------------
 JodaTime/project.xml       |  3 +++
 2 files changed, 19 insertions(+), 17 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index d161e88fc..c94eb437a 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -1,11 +1,10 @@
-Joda-Time version 1.0
+Joda-Time version 1.1
 ---------------------
 
 Joda-Time is a date and time handling library that seeks to replace the JDK
 Date and Calendar classes.
 
-This is the first full release of Joda-Time.
-There have been numerous beta releases over an extended period of time.
+This is the second full release of Joda-Time.
 
 We recommend JDK 1.3 or later, and have performed no testing on earlier JDKs.
 
@@ -15,28 +14,28 @@ The intent is to make the code available to the Java community with the minimum
 of restrictions. If the license cause you problems please contact the mailing list.
 
 
-Incompatible changes since 0.99
--------------------------------
-Deprecated methods removed.
-See http://joda-time.sourceforge.net/upgradeto099.html for 0.98 to 0.99 changes
+Incompatible changes since 1.0
+------------------------------
+None - source and binary compatible.
 
 
-Deprecations since 0.99
------------------------
+Deprecations since 1.0
+----------------------
 None
-See http://joda-time.sourceforge.net/upgradeto099.html for 0.98 to 0.99 changes
 
 
-Bug fixes since 0.99
---------------------
+Bug fixes since 1.0
+-------------------
 None
-See http://joda-time.sourceforge.net/upgradeto099.html for 0.98 to 0.99 changes
 
 
-Enhancements since 0.99
------------------------
-None
-See http://joda-time.sourceforge.net/upgradeto099.html for 0.98 to 0.99 changes
+Enhancements since 1.0
+----------------------
+- DateTimeFormatter
+  Method withPivotYear added to allow the two digit pivot year to be controlled.
+  This is most useful after creating a format from a string pattern.
+
+- DateTimeZone classes updated to latest data from the Olsen time zone database
 
 
 Feedback
diff --git a/JodaTime/project.xml b/JodaTime/project.xml
index 078e492e3..e8fc41568 100644
--- a/JodaTime/project.xml
+++ b/JodaTime/project.xml
@@ -99,6 +99,9 @@
   <contributors>
     <contributor>
       <name>Guy Allard</name>
+    </contributor>Fredrik Borgh
+    <contributor>
+      <name>Fredrik Borgh</name>
     </contributor>
     <contributor>
       <name>Sean Geoghegan</name>

From db44731d34d82d85da5c4995cf06b0d94842286e Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 8 Mar 2005 23:39:48 +0000
Subject: [PATCH 007/124] Remove tzcompiler from jar

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@739 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/build.xml | 22 ++++++++++++++++++----
 1 file changed, 18 insertions(+), 4 deletions(-)

diff --git a/JodaTime/build.xml b/JodaTime/build.xml
index deed41b2a..7df83258f 100644
--- a/JodaTime/build.xml
+++ b/JodaTime/build.xml
@@ -57,6 +57,8 @@
   <property name="build.tests"             value="${build}/tests"/>
   <property name="build.docs"              value="${build}/docs"/>
   <property name="build.dist"              value="${build}/dist"/>
+  <property name="build.jarname.full"      value="${build}/${component.name}-${component.version}.jar"/>
+  <property name="build.jarname.tzcompiler" value="${build}/${component.name}-tzcompiler-${component.version}.jar"/>
   <property name="build.fullname"          value="${build}/${component.fullname}"/>
   <property name="build.dist.fullname"     value="${build.dist}/${component.fullname}"/>
 
@@ -269,9 +271,18 @@
              tofile="${build.classes}/META-INF/LICENSE.txt"/>
     <copy      file="NOTICE.txt"
              tofile="${build.classes}/META-INF/NOTICE.txt"/>
-    <jar    jarfile="${build.fullname}.jar"
+    <jar    jarfile="${build.jarname.full}"
             basedir="${build.classes}"
-           manifest="${build.conf}/MANIFEST.MF"/>
+           manifest="${build.conf}/MANIFEST.MF">
+      <exclude name="**/ZoneInfoCompiler*" />
+    </jar>
+    <jar    jarfile="${build.jarname.tzcompiler}"
+            basedir="${build.classes}"
+           manifest="${build.conf}/MANIFEST.MF">
+      <include name="**/LICENSE.txt" />
+      <include name="**/NOTICE.txt" />
+      <include name="**/ZoneInfoCompiler*" />
+    </jar>
   </target>
 
 <!-- ====================================================================== -->
@@ -285,7 +296,7 @@
     <copy      file="LICENSE.txt" todir="${build.dist.fullname}"/>
     <copy      file="NOTICE.txt" todir="${build.dist.fullname}"/>
     <copy      file="RELEASE-NOTES.txt" todir="${build.dist.fullname}"/>
-    <copy      file="${build.fullname}.jar"
+    <copy      file="${build.jarname.full}"
               todir="${build.dist.fullname}"/>
     <copy     todir="${build.dist.fullname}">
       <fileset  dir="${build}" includes="docs/**/*.*"/>
@@ -299,6 +310,8 @@
 	
 	<!-- source -->
 	<delete     dir="${build.dist.fullname}/docs"/>
+    <copy      file="${build.jarname.tzcompiler}"
+              todir="${build.dist.fullname}"/>
     <copy     todir="${build.dist.fullname}">
       <fileset  dir="." includes="${source}/**/*" excludes="CVS/**/*"/>
     </copy>
@@ -351,7 +364,8 @@
     <junit printsummary="yes" haltonfailure="yes">
       <formatter type="plain" usefile="false" />
       <classpath>
-        <pathelement location="${build.fullname}.jar"/>
+        <pathelement location="${build.jarname.full}"/>
+        <pathelement location="${build.jarname.tzcompiler}"/>
         <pathelement location="${build.tests}"/>
         <pathelement location="${junit.jar}"/>
         <pathelement path="${java.class.path}"/>

From 8fed005304c5cbe64887073b0f17884706beddc8 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 8 Mar 2005 23:41:02 +0000
Subject: [PATCH 008/124] ROLLBACK to put tzcompiler in jar

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@740 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/build.xml | 22 ++++------------------
 1 file changed, 4 insertions(+), 18 deletions(-)

diff --git a/JodaTime/build.xml b/JodaTime/build.xml
index 7df83258f..deed41b2a 100644
--- a/JodaTime/build.xml
+++ b/JodaTime/build.xml
@@ -57,8 +57,6 @@
   <property name="build.tests"             value="${build}/tests"/>
   <property name="build.docs"              value="${build}/docs"/>
   <property name="build.dist"              value="${build}/dist"/>
-  <property name="build.jarname.full"      value="${build}/${component.name}-${component.version}.jar"/>
-  <property name="build.jarname.tzcompiler" value="${build}/${component.name}-tzcompiler-${component.version}.jar"/>
   <property name="build.fullname"          value="${build}/${component.fullname}"/>
   <property name="build.dist.fullname"     value="${build.dist}/${component.fullname}"/>
 
@@ -271,18 +269,9 @@
              tofile="${build.classes}/META-INF/LICENSE.txt"/>
     <copy      file="NOTICE.txt"
              tofile="${build.classes}/META-INF/NOTICE.txt"/>
-    <jar    jarfile="${build.jarname.full}"
+    <jar    jarfile="${build.fullname}.jar"
             basedir="${build.classes}"
-           manifest="${build.conf}/MANIFEST.MF">
-      <exclude name="**/ZoneInfoCompiler*" />
-    </jar>
-    <jar    jarfile="${build.jarname.tzcompiler}"
-            basedir="${build.classes}"
-           manifest="${build.conf}/MANIFEST.MF">
-      <include name="**/LICENSE.txt" />
-      <include name="**/NOTICE.txt" />
-      <include name="**/ZoneInfoCompiler*" />
-    </jar>
+           manifest="${build.conf}/MANIFEST.MF"/>
   </target>
 
 <!-- ====================================================================== -->
@@ -296,7 +285,7 @@
     <copy      file="LICENSE.txt" todir="${build.dist.fullname}"/>
     <copy      file="NOTICE.txt" todir="${build.dist.fullname}"/>
     <copy      file="RELEASE-NOTES.txt" todir="${build.dist.fullname}"/>
-    <copy      file="${build.jarname.full}"
+    <copy      file="${build.fullname}.jar"
               todir="${build.dist.fullname}"/>
     <copy     todir="${build.dist.fullname}">
       <fileset  dir="${build}" includes="docs/**/*.*"/>
@@ -310,8 +299,6 @@
 	
 	<!-- source -->
 	<delete     dir="${build.dist.fullname}/docs"/>
-    <copy      file="${build.jarname.tzcompiler}"
-              todir="${build.dist.fullname}"/>
     <copy     todir="${build.dist.fullname}">
       <fileset  dir="." includes="${source}/**/*" excludes="CVS/**/*"/>
     </copy>
@@ -364,8 +351,7 @@
     <junit printsummary="yes" haltonfailure="yes">
       <formatter type="plain" usefile="false" />
       <classpath>
-        <pathelement location="${build.jarname.full}"/>
-        <pathelement location="${build.jarname.tzcompiler}"/>
+        <pathelement location="${build.fullname}.jar"/>
         <pathelement location="${build.tests}"/>
         <pathelement location="${junit.jar}"/>
         <pathelement path="${java.class.path}"/>

From f0d58dda18bdacf80ebaf286fb14efb6e0762426 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 8 Mar 2005 23:59:21 +0000
Subject: [PATCH 009/124] Create project

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@741 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/.cvsignore           |   3 +
 JodaTimeContrib/LICENSE.txt          | 202 +++++++++++++++++
 JodaTimeContrib/NOTICE.txt           |   5 +
 JodaTimeContrib/RELEASE-NOTES.txt    |  20 ++
 JodaTimeContrib/build.xml            | 323 +++++++++++++++++++++++++++
 JodaTimeContrib/checkstyle.xml       |  81 +++++++
 JodaTimeContrib/maven.xml            |   5 +
 JodaTimeContrib/project.properties   |  13 ++
 JodaTimeContrib/project.xml          | 124 ++++++++++
 JodaTimeContrib/src/conf/MANIFEST.MF |   7 +
 10 files changed, 783 insertions(+)
 create mode 100644 JodaTimeContrib/.cvsignore
 create mode 100644 JodaTimeContrib/LICENSE.txt
 create mode 100644 JodaTimeContrib/NOTICE.txt
 create mode 100644 JodaTimeContrib/RELEASE-NOTES.txt
 create mode 100644 JodaTimeContrib/build.xml
 create mode 100644 JodaTimeContrib/checkstyle.xml
 create mode 100644 JodaTimeContrib/maven.xml
 create mode 100644 JodaTimeContrib/project.properties
 create mode 100644 JodaTimeContrib/project.xml
 create mode 100644 JodaTimeContrib/src/conf/MANIFEST.MF

diff --git a/JodaTimeContrib/.cvsignore b/JodaTimeContrib/.cvsignore
new file mode 100644
index 000000000..fbee38f08
--- /dev/null
+++ b/JodaTimeContrib/.cvsignore
@@ -0,0 +1,3 @@
+bin
+.classpath
+.project
diff --git a/JodaTimeContrib/LICENSE.txt b/JodaTimeContrib/LICENSE.txt
new file mode 100644
index 000000000..d64569567
--- /dev/null
+++ b/JodaTimeContrib/LICENSE.txt
@@ -0,0 +1,202 @@
+
+                                 Apache License
+                           Version 2.0, January 2004
+                        http://www.apache.org/licenses/
+
+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+   1. Definitions.
+
+      "License" shall mean the terms and conditions for use, reproduction,
+      and distribution as defined by Sections 1 through 9 of this document.
+
+      "Licensor" shall mean the copyright owner or entity authorized by
+      the copyright owner that is granting the License.
+
+      "Legal Entity" shall mean the union of the acting entity and all
+      other entities that control, are controlled by, or are under common
+      control with that entity. For the purposes of this definition,
+      "control" means (i) the power, direct or indirect, to cause the
+      direction or management of such entity, whether by contract or
+      otherwise, or (ii) ownership of fifty percent (50%) or more of the
+      outstanding shares, or (iii) beneficial ownership of such entity.
+
+      "You" (or "Your") shall mean an individual or Legal Entity
+      exercising permissions granted by this License.
+
+      "Source" form shall mean the preferred form for making modifications,
+      including but not limited to software source code, documentation
+      source, and configuration files.
+
+      "Object" form shall mean any form resulting from mechanical
+      transformation or translation of a Source form, including but
+      not limited to compiled object code, generated documentation,
+      and conversions to other media types.
+
+      "Work" shall mean the work of authorship, whether in Source or
+      Object form, made available under the License, as indicated by a
+      copyright notice that is included in or attached to the work
+      (an example is provided in the Appendix below).
+
+      "Derivative Works" shall mean any work, whether in Source or Object
+      form, that is based on (or derived from) the Work and for which the
+      editorial revisions, annotations, elaborations, or other modifications
+      represent, as a whole, an original work of authorship. For the purposes
+      of this License, Derivative Works shall not include works that remain
+      separable from, or merely link (or bind by name) to the interfaces of,
+      the Work and Derivative Works thereof.
+
+      "Contribution" shall mean any work of authorship, including
+      the original version of the Work and any modifications or additions
+      to that Work or Derivative Works thereof, that is intentionally
+      submitted to Licensor for inclusion in the Work by the copyright owner
+      or by an individual or Legal Entity authorized to submit on behalf of
+      the copyright owner. For the purposes of this definition, "submitted"
+      means any form of electronic, verbal, or written communication sent
+      to the Licensor or its representatives, including but not limited to
+      communication on electronic mailing lists, source code control systems,
+      and issue tracking systems that are managed by, or on behalf of, the
+      Licensor for the purpose of discussing and improving the Work, but
+      excluding communication that is conspicuously marked or otherwise
+      designated in writing by the copyright owner as "Not a Contribution."
+
+      "Contributor" shall mean Licensor and any individual or Legal Entity
+      on behalf of whom a Contribution has been received by Licensor and
+      subsequently incorporated within the Work.
+
+   2. Grant of Copyright License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      copyright license to reproduce, prepare Derivative Works of,
+      publicly display, publicly perform, sublicense, and distribute the
+      Work and such Derivative Works in Source or Object form.
+
+   3. Grant of Patent License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      (except as stated in this section) patent license to make, have made,
+      use, offer to sell, sell, import, and otherwise transfer the Work,
+      where such license applies only to those patent claims licensable
+      by such Contributor that are necessarily infringed by their
+      Contribution(s) alone or by combination of their Contribution(s)
+      with the Work to which such Contribution(s) was submitted. If You
+      institute patent litigation against any entity (including a
+      cross-claim or counterclaim in a lawsuit) alleging that the Work
+      or a Contribution incorporated within the Work constitutes direct
+      or contributory patent infringement, then any patent licenses
+      granted to You under this License for that Work shall terminate
+      as of the date such litigation is filed.
+
+   4. Redistribution. You may reproduce and distribute copies of the
+      Work or Derivative Works thereof in any medium, with or without
+      modifications, and in Source or Object form, provided that You
+      meet the following conditions:
+
+      (a) You must give any other recipients of the Work or
+          Derivative Works a copy of this License; and
+
+      (b) You must cause any modified files to carry prominent notices
+          stating that You changed the files; and
+
+      (c) You must retain, in the Source form of any Derivative Works
+          that You distribute, all copyright, patent, trademark, and
+          attribution notices from the Source form of the Work,
+          excluding those notices that do not pertain to any part of
+          the Derivative Works; and
+
+      (d) If the Work includes a "NOTICE" text file as part of its
+          distribution, then any Derivative Works that You distribute must
+          include a readable copy of the attribution notices contained
+          within such NOTICE file, excluding those notices that do not
+          pertain to any part of the Derivative Works, in at least one
+          of the following places: within a NOTICE text file distributed
+          as part of the Derivative Works; within the Source form or
+          documentation, if provided along with the Derivative Works; or,
+          within a display generated by the Derivative Works, if and
+          wherever such third-party notices normally appear. The contents
+          of the NOTICE file are for informational purposes only and
+          do not modify the License. You may add Your own attribution
+          notices within Derivative Works that You distribute, alongside
+          or as an addendum to the NOTICE text from the Work, provided
+          that such additional attribution notices cannot be construed
+          as modifying the License.
+
+      You may add Your own copyright statement to Your modifications and
+      may provide additional or different license terms and conditions
+      for use, reproduction, or distribution of Your modifications, or
+      for any such Derivative Works as a whole, provided Your use,
+      reproduction, and distribution of the Work otherwise complies with
+      the conditions stated in this License.
+
+   5. Submission of Contributions. Unless You explicitly state otherwise,
+      any Contribution intentionally submitted for inclusion in the Work
+      by You to the Licensor shall be under the terms and conditions of
+      this License, without any additional terms or conditions.
+      Notwithstanding the above, nothing herein shall supersede or modify
+      the terms of any separate license agreement you may have executed
+      with Licensor regarding such Contributions.
+
+   6. Trademarks. This License does not grant permission to use the trade
+      names, trademarks, service marks, or product names of the Licensor,
+      except as required for reasonable and customary use in describing the
+      origin of the Work and reproducing the content of the NOTICE file.
+
+   7. Disclaimer of Warranty. Unless required by applicable law or
+      agreed to in writing, Licensor provides the Work (and each
+      Contributor provides its Contributions) on an "AS IS" BASIS,
+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+      implied, including, without limitation, any warranties or conditions
+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
+      PARTICULAR PURPOSE. You are solely responsible for determining the
+      appropriateness of using or redistributing the Work and assume any
+      risks associated with Your exercise of permissions under this License.
+
+   8. Limitation of Liability. In no event and under no legal theory,
+      whether in tort (including negligence), contract, or otherwise,
+      unless required by applicable law (such as deliberate and grossly
+      negligent acts) or agreed to in writing, shall any Contributor be
+      liable to You for damages, including any direct, indirect, special,
+      incidental, or consequential damages of any character arising as a
+      result of this License or out of the use or inability to use the
+      Work (including but not limited to damages for loss of goodwill,
+      work stoppage, computer failure or malfunction, or any and all
+      other commercial damages or losses), even if such Contributor
+      has been advised of the possibility of such damages.
+
+   9. Accepting Warranty or Additional Liability. While redistributing
+      the Work or Derivative Works thereof, You may choose to offer,
+      and charge a fee for, acceptance of support, warranty, indemnity,
+      or other liability obligations and/or rights consistent with this
+      License. However, in accepting such obligations, You may act only
+      on Your own behalf and on Your sole responsibility, not on behalf
+      of any other Contributor, and only if You agree to indemnify,
+      defend, and hold each Contributor harmless for any liability
+      incurred by, or claims asserted against, such Contributor by reason
+      of your accepting any such warranty or additional liability.
+
+   END OF TERMS AND CONDITIONS
+
+   APPENDIX: How to apply the Apache License to your work.
+
+      To apply the Apache License to your work, attach the following
+      boilerplate notice, with the fields enclosed by brackets "[]"
+      replaced with your own identifying information. (Don't include
+      the brackets!)  The text should be enclosed in the appropriate
+      comment syntax for the file format. We also recommend that a
+      file or class name and description of purpose be included on the
+      same "printed page" as the copyright notice for easier
+      identification within third-party archives.
+
+   Copyright [yyyy] [name of copyright owner]
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
diff --git a/JodaTimeContrib/NOTICE.txt b/JodaTimeContrib/NOTICE.txt
new file mode 100644
index 000000000..dffbcf31c
--- /dev/null
+++ b/JodaTimeContrib/NOTICE.txt
@@ -0,0 +1,5 @@
+=============================================================================
+= NOTICE file corresponding to section 4d of the Apache License Version 2.0 =
+=============================================================================
+This product includes software developed by
+Joda.org (http://www.joda.org/).
diff --git a/JodaTimeContrib/RELEASE-NOTES.txt b/JodaTimeContrib/RELEASE-NOTES.txt
new file mode 100644
index 000000000..cae89f541
--- /dev/null
+++ b/JodaTimeContrib/RELEASE-NOTES.txt
@@ -0,0 +1,20 @@
+Joda-Time Contrib version 1.0
+-----------------------------
+
+User contributions that are not part of the main joda-time jar file.
+
+Each of these contributions is licensed using the Apache License v2.0.
+However, some of these files link to LGPL licensed software.
+It is your resposibility to use the joda-time-contrib jar correctly
+according to the terms of the LGPL license (read section 6).
+
+Please note that this code is not supported in the same way as the main
+Joda-Time code. As such it is possible that methods and classes may come
+and go over time without warning - you have been warned!
+
+
+Feedback
+--------
+All feedback is welcomed at joda-interest@lists.sourceforge.net.
+
+The Joda team
diff --git a/JodaTimeContrib/build.xml b/JodaTimeContrib/build.xml
new file mode 100644
index 000000000..7777d34a0
--- /dev/null
+++ b/JodaTimeContrib/build.xml
@@ -0,0 +1,323 @@
+<project name="joda-time-contrib" default="jar" basedir=".">
+
+<!-- Joda-time ANT script -->
+<!-- Based on scripts from Apache Jakarta Commons and elsewhere -->
+
+<!-- This is the recommended way to build Joda-Time. -->
+<!-- Maven is only intended for building the website. -->
+
+<!-- This ant file will download junit-3.8.1.jar to the lib subdirectory -->
+<!-- automatically if it does not find it there already. To change this -->
+<!-- behaviour, override the junit.jar property in build.properties. -->
+
+<!-- ========== Properties ================================================ -->
+
+  <property file="build.properties"/>
+
+<!-- ========== Component Declarations ==================================== -->
+
+
+  <!-- The name of this component -->
+  <property name="component.name"          value="joda-time-contrib"/>
+
+  <!-- The primary package name of this component -->
+  <property name="component.package"       value="org.joda.time.contrib"/>
+
+  <!-- The title of this component -->
+  <property name="component.title"         value="Joda date and time contributions"/>
+
+  <!-- The current version number of this component -->
+  <property name="component.version"       value="1.0"/>
+
+  <!-- The current version number of this component -->
+  <property name="component.fullname"      value="${component.name}-${component.version}"/>
+  
+  <!-- The directory of source files -->
+  <property name="xdocs"                   value="xdocs"/>
+
+  <!-- Dependencies -->
+  <property name="lib"                     value="lib"/>
+  <property name="junit.jar"               value="${lib}/junit-3.8.1.jar"/>
+
+  <!-- The directory of source files -->
+  <property name="source"                  value="src"/>
+  <property name="source.home"             value="${source}/java"/>
+  <property name="conf.home"               value="${source}/conf"/>
+  <property name="test.home"               value="${source}/test"/>
+
+  <!-- The base directory for example sources -->
+  <property name="example.home"            value="src/example"/>
+
+  <!-- The base directory for compilation targets -->
+  <property name="build"                   value="build"/>
+  <property name="build.conf"              value="${build}/conf"/>
+  <property name="build.classes"           value="${build}/classes"/>
+  <property name="build.tz"                value="${build.classes}/org/joda/time/tz/data"/>
+  <property name="build.tests"             value="${build}/tests"/>
+  <property name="build.docs"              value="${build}/docs"/>
+  <property name="build.dist"              value="${build}/dist"/>
+  <property name="build.jarname.full"      value="${build}/${component.name}-${component.version}.jar"/>
+  <property name="build.fullname"          value="${build}/${component.fullname}"/>
+  <property name="build.dist.fullname"     value="${build.dist}/${component.fullname}"/>
+
+
+<!-- ========== Compiler Defaults ========================================= -->
+
+  <!-- Should Java compilations set the 'debug' compiler option? -->
+  <property name="compile.debug"           value="true"/>
+
+  <!-- Should Java compilations set the 'deprecation' compiler option? -->
+  <property name="compile.deprecation"     value="true"/>
+
+  <!-- Should Java compilations set the 'optimize' compiler option? -->
+  <property name="compile.optimize"        value="true"/>
+
+  <!-- Construct compile classpath -->
+  <path id="compile.classpath">
+    <pathelement location="${build.classes}"/>
+  </path>
+
+
+<!-- ========== Test Execution Defaults =================================== -->
+
+  <!-- Construct unit test classpath -->
+  <path id="test.classpath">
+    <pathelement location="${build.classes}"/>
+    <pathelement location="${build.tests}"/>
+    <pathelement location="${junit.jar}"/>
+  </path>
+
+  <!-- Should all tests fail if one does? -->
+  <property name="test.failonerror"        value="true"/>
+
+  <!-- The test runner to execute -->
+  <property name="test.runner"             value="junit.textui.TestRunner"/>
+
+
+<!-- ====================================================================== -->
+<!-- ========== Executable Targets ======================================== -->
+<!-- ====================================================================== -->
+
+  <target name="clean"
+          description="Clean build and distribution directories">
+    <delete dir="${build}"/>
+  </target>
+
+<!-- ====================================================================== -->
+
+  <target name="init"
+          description="Initialize and evaluate conditionals">
+    <echo message="-------- ${component.name} ${component.version} --------"/>
+    <filter token="name"                  value="${component.name}"/>
+    <filter token="package"               value="${component.package}"/>
+    <filter token="version"               value="${component.version}"/>
+    <available property="junit.ant" classname="junit.framework.Test"/>
+    <available property="junit.present" file="${junit.jar}"/>
+  </target>
+
+<!-- ====================================================================== -->
+
+  <target name="getjunit" unless="junit.present">
+    <echo message="Getting junit from http://www.ibiblio.org/maven/junit"/>
+    <setproxy />
+    <mkdir dir="${lib}"/>
+    <get dest="${junit.jar}" usetimestamp="true" ignoreerrors="true" src="http://www.ibiblio.org/maven/junit/jars/junit-3.8.1.jar" />
+  </target>
+
+<!-- ====================================================================== -->
+
+  <target name="installjunit" unless="junit.ant">
+    <echo message="Installing junit in ${ant.home}/lib"/>
+  	<copy file="${junit.jar}" todir="${ant.home}/lib" />
+    <echo message="***************************************************************"/>
+    <echo message="*  A copy of junit has been installed in your ant directory   *"/>
+    <echo message="*                                                             *"/>
+    <echo message="* You will need to restart the ant build to pickup the change *"/>
+    <echo message="***************************************************************"/>
+  	<fail message="Please restart ant"/>
+  </target>
+
+<!-- ====================================================================== -->
+
+  <target name="prepare" depends="init,getjunit,installjunit"
+          description="Prepare build directory">
+    <mkdir dir="${build}"/>
+    <mkdir dir="${build.classes}"/>
+    <mkdir dir="${build.conf}"/>
+  </target>
+
+<!-- ====================================================================== -->
+
+  <target name="static" depends="prepare"
+          description="Copy static files to build directory">
+    <tstamp/>
+    <copy todir="${build.conf}" filtering="on">
+      <fileset dir="${conf.home}" includes="*.MF"/>
+    </copy>
+  </target>
+
+<!-- ====================================================================== -->
+
+  <target name="compile" depends="static" description="Compile shareable components">
+    <javac  srcdir="${source.home}"
+           destdir="${build.classes}"
+             debug="${compile.debug}"
+       deprecation="${compile.deprecation}"
+          optimize="${compile.optimize}">
+      <classpath refid="compile.classpath"/>
+    </javac>
+  </target>
+
+<!-- ====================================================================== -->
+
+  <target name="compile.tests" depends="compile"
+          description="Compile unit test cases">
+    <mkdir dir="${build.tests}"/>
+    <javac  srcdir="${test.home}"
+           destdir="${build.tests}"
+             debug="${compile.debug}"
+       deprecation="${compile.deprecation}"
+          optimize="${compile.optimize}">
+      <classpath refid="test.classpath"/>
+    </javac>
+    <copy    todir="${build.tests}" filtering="on">
+      <fileset dir="${test.home}" excludes="**/*.java"/>
+    </copy>
+  </target>
+
+<!-- ====================================================================== -->
+
+  <target name="all" depends="clean,compile"
+          description="Clean and compile all components"/>
+
+<!-- ====================================================================== -->
+
+  <target name="javadoc" depends="compile"
+          description="Create component Javadoc documentation">
+    <mkdir      dir="${build.docs}"/>
+    <javadoc sourcepath="${source.home}"
+                destdir="${build.docs}"
+           packagenames="org.joda.time.contrib.*"
+                 author="true"
+                private="false"
+                package="false"
+                version="true"
+                    use="yes"
+             splitindex="yes"
+               doctitle="&lt;h1&gt;${component.title}&lt;/h1&gt;"
+            windowtitle="${component.title} (Version ${component.version})"
+                 bottom="Copyright (c) 2001-2005 - Joda.org">
+      <classpath refid="compile.classpath"/>
+    </javadoc>
+  </target>
+
+<!-- ====================================================================== -->
+
+  <target name="jar" depends="compile"
+          description="Create jar">
+    <mkdir      dir="${build.classes}/META-INF"/>
+    <copy      file="LICENSE.txt"
+             tofile="${build.classes}/META-INF/LICENSE.txt"/>
+    <copy      file="NOTICE.txt"
+             tofile="${build.classes}/META-INF/NOTICE.txt"/>
+    <jar    jarfile="${build.jarname.full}"
+            basedir="${build.classes}"
+           manifest="${build.conf}/MANIFEST.MF">
+    </jar>
+  </target>
+
+<!-- ====================================================================== -->
+
+  <target name="dist" depends="compile,jar,test.jar,javadoc"
+          description="Create binary distribution">
+    <delete     dir="${build.dist.fullname}"/>
+    <mkdir      dir="${build.dist.fullname}"/>
+    
+	<!-- binary -->
+    <copy      file="LICENSE.txt" todir="${build.dist.fullname}"/>
+    <copy      file="NOTICE.txt" todir="${build.dist.fullname}"/>
+    <copy      file="RELEASE-NOTES.txt" todir="${build.dist.fullname}"/>
+    <copy      file="${build.jarname.full}"
+              todir="${build.dist.fullname}"/>
+    <copy     todir="${build.dist.fullname}">
+      <fileset  dir="${build}" includes="docs/**/*.*"/>
+    </copy>
+    
+	<tar   destfile="${build.fullname}.tar" basedir="${build.dist}"/>
+	<gzip   zipfile="${build.fullname}.tar.gz" src="${build.fullname}.tar"/>
+	<delete    file="${build.fullname}.tar"/>
+	<fixcrlf srcdir="${build.dist}" eol="crlf" includes="**/*.txt"/>
+	<zip   destfile="${build.fullname}.zip" basedir="${build.dist}"/>
+	
+	<!-- source -->
+	<delete     dir="${build.dist.fullname}/docs"/>
+    <copy      file="${build.jarname.tzcompiler}"
+              todir="${build.dist.fullname}"/>
+    <copy     todir="${build.dist.fullname}">
+      <fileset  dir="." includes="${source}/**/*" excludes="CVS/**/*"/>
+    </copy>
+    <copy     todir="${build.dist.fullname}">
+      <fileset  dir="." includes="${xdocs}/**/*" excludes="CVS/**/*"/>
+    </copy>
+	<delete     dir="${build.dist.fullname}/src/tzdata"/>
+    <copy      file="build.xml" todir="${build.dist.fullname}"/>
+    <copy      file="maven.xml" todir="${build.dist.fullname}"/>
+    <copy      file="project.xml" todir="${build.dist.fullname}"/>
+    <copy      file="project.properties" todir="${build.dist.fullname}"/>
+    <copy      file="checkstyle.xml" todir="${build.dist.fullname}"/>
+    <copy      file="ToDo.txt" todir="${build.dist.fullname}"/>
+	
+	<tar   destfile="${build.fullname}-src.tar" basedir="${build.dist}"/>
+	<gzip   zipfile="${build.fullname}-src.tar.gz" src="${build.fullname}-src.tar"/>
+	<delete    file="${build.fullname}-src.tar"/>
+	<fixcrlf srcdir="${build.dist}" eol="crlf" includes="**/*.txt"/>
+	<zip   destfile="${build.fullname}-src.zip" basedir="${build.dist}"/>
+  </target>
+
+<!-- ====================================================================== -->
+
+  <target name="test"  depends="compile.tests, test.time"
+          description="Run all unit test cases">
+  </target>
+
+  <target name="test.time" depends="compile.tests">
+    <echo message="Running time tests ..."/>
+    <junit printsummary="yes" haltonfailure="yes">
+      <formatter type="plain" usefile="false" />
+      <classpath>
+        <pathelement location="${build.classes}"/>
+        <pathelement location="${build.tests}"/>
+        <pathelement location="${build.tz}"/>
+        <pathelement path="${java.class.path}"/>
+      </classpath>
+
+      <batchtest fork="yes">
+        <fileset dir="${test.home}">
+          <include name="**/TestAll.java"/>
+        </fileset>
+      </batchtest>
+    </junit>
+  </target>
+
+  <!-- don't depend on jar, so we can test jar built on another JDK version -->
+  <target name="test.jar" depends="compile.tests">
+    <echo message="Running time tests from jar ..."/>
+    <junit printsummary="yes" haltonfailure="yes">
+      <formatter type="plain" usefile="false" />
+      <classpath>
+        <pathelement location="${build.jarname.full}"/>
+        <pathelement location="${build.jarname.tzcompiler}"/>
+        <pathelement location="${build.tests}"/>
+        <pathelement location="${junit.jar}"/>
+        <pathelement path="${java.class.path}"/>
+      </classpath>
+
+      <batchtest fork="yes">
+        <fileset dir="${test.home}">
+          <include name="**/TestAll.java"/>
+        </fileset>
+      </batchtest>
+    </junit>
+  </target>
+
+</project>
diff --git a/JodaTimeContrib/checkstyle.xml b/JodaTimeContrib/checkstyle.xml
new file mode 100644
index 000000000..0f1c60d63
--- /dev/null
+++ b/JodaTimeContrib/checkstyle.xml
@@ -0,0 +1,81 @@
+<?xml version="1.0"?>
+
+<!DOCTYPE module PUBLIC
+    "-//Puppy Crawl//DTD Check Configuration 1.1//EN"
+    "http://www.puppycrawl.com/dtds/configuration_1_1.dtd">
+
+<!-- customization of default Checkstyle behavior -->
+<module name="Checker">
+  <property name="localeLanguage" value="en"/>
+  <!--module name="PackageHtml"/-->
+  <module name="TreeWalker">
+    <module name="MemberName">
+      <property name="format" value="^i[A-Z][a-zA-Z0-9]*$"/>
+    </module>
+    <module name="LocalVariableName">
+      <property name="format" value="^ex[0-9]*$"/>
+      <property name="tokens" value="PARAMETER_DEF"/>
+    </module>
+    <module name="AvoidStarImport"/>
+    <module name="RedundantImport"/>
+    <module name="UnusedImports"/>
+    
+    <module name="TabCharacter"/>
+    <module name="NeedBraces"/>
+    <!--module name="TypecastParenPad"/-->
+    <module name="WhitespaceAfter"/>
+    <module name="WhitespaceAround"/>
+    <module name="ModifierOrder"/>
+    <module name="RedundantModifier"/>
+    
+    <module name="EmptyBlock"/>
+    <module name="LeftCurly"/>
+    <module name="NeedBraces"/>
+    <module name="RightCurly"/>
+    <!--module name="AvoidNestedBlocks">
+      <property name="allowInSwitchCase" value="true"/>
+    </module-->
+    
+    <!--module name="ArrayTrailingComma"/-->
+    <!--module name="CovariantEquals"/-->
+    <module name="DoubleCheckedLocking"/>
+    <module name="EmptyStatement"/>
+    <module name="EqualsHashCode"/>
+    <!--module name="HiddenField">
+      <property name="ignoreConstructorParameter" value="true"/>
+      <property name="ignoreSetter" value="true"/>
+    </module-->
+    <module name="IllegalInstantiation">
+      <property name="classes" value="java.lang.Boolean"/>
+    </module>
+    <!--module name="SuperClone"/-->
+    <!--module name="ExplicitInitialization"/-->
+              
+    <module name="GenericIllegalRegexp">
+      <property name="format" value="System\.out\.println"/>
+    </module>
+    <module name="GenericIllegalRegexp">
+      <property name="format" value="System\.err\.println"/>
+    </module>
+    <module name="TodoComment"/>
+    <module name="UpperEll"/>
+    <module name="ArrayTypeStyle"/>
+    <module name="Indentation"/>
+          
+    <module name="RedundantThrows">
+      <property name="allowUnchecked" value="true"/>
+    </module>
+    <module name="LineLength">
+      <property name="max" value="120"/>
+    </module>
+    <module name="JavadocVariable">
+      <property name="excludeScope" value="private"/>
+    </module>
+    <module name="JavadocMethod">
+      <property name="excludeScope" value="private"/>
+      <property name="allowUndeclaredRTE" value="true"/>
+    </module>
+ </module>
+</module>
+                        
+
diff --git a/JodaTimeContrib/maven.xml b/JodaTimeContrib/maven.xml
new file mode 100644
index 000000000..f901eca83
--- /dev/null
+++ b/JodaTimeContrib/maven.xml
@@ -0,0 +1,5 @@
+<project default="java:jar"
+  xmlns:j="jelly:core"
+  xmlns:ant="jelly:ant">
+
+</project>
diff --git a/JodaTimeContrib/project.properties b/JodaTimeContrib/project.properties
new file mode 100644
index 000000000..3ed694952
--- /dev/null
+++ b/JodaTimeContrib/project.properties
@@ -0,0 +1,13 @@
+#show data on the breadcrumbs line
+maven.xdoc.date = navigation-bottom
+maven.xdoc.date.format = yyyy-MM-dd
+# maven.xdoc.version = ${pom.currentVersion}
+
+maven.checkstyle.properties=checkstyle.xml
+maven.junit.fork=true
+maven.xdoc.poweredby.image=maven-feather.png
+maven.javadoc.links=http://java.sun.com/products/j2se/1.4/docs/api, http://joda-time.sourceforge.net/api-release
+maven.javadoc.public=true
+maven.javadoc.package=false
+maven.javadoc.private=false
+
diff --git a/JodaTimeContrib/project.xml b/JodaTimeContrib/project.xml
new file mode 100644
index 000000000..978f6ae58
--- /dev/null
+++ b/JodaTimeContrib/project.xml
@@ -0,0 +1,124 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- You are strongly recommended to use ant for compiling and building -->
+<!-- We only use and test maven for website construction -->
+
+<project>
+  <pomVersion>3</pomVersion>
+  <id>joda-time-contrib</id>
+  <name>Joda time</name>
+  <groupId>joda-time</groupId>
+  <currentVersion>1.0</currentVersion>
+  <organization>
+    <name>Joda.org</name>
+    <url>http://www.joda.org</url>
+    <logo>/images/joda.png</logo>
+  </organization>
+  <inceptionYear>2002</inceptionYear>
+  <package>org.joda.time.contrib</package>
+  <logo>/images/jodatime.png</logo>
+
+  <description>
+    User contributions to Joda-Time
+  </description>
+  <shortDescription>Joda time contrib</shortDescription>
+  <url>http://joda-time.sourceforge.net</url>
+  
+  <issueTrackingUrl>http://sourceforge.net/tracker/?atid=617889&amp;group_id=97367&amp;func=browse</issueTrackingUrl>
+  
+  <siteAddress>shell.sourceforge.net</siteAddress>
+  <siteDirectory>/home/groups/j/jo/joda-time/htdocs/contrib/</siteDirectory>
+  <distributionDirectory>home/groups/j/jo/joda-time/htdocs/repository</distributionDirectory>
+  
+  <repository>
+    <connection>scm:cvs:pserver:anonymous@cvs.sourceforge.net:/cvsroot/joda-time:JodaTimeContrib</connection>
+    <url>http://cvs.sourceforge.net/viewcvs.py/joda-time/JodaTimeContrib/</url>
+  </repository>
+
+  <mailingLists>
+    <mailingList>
+      <name>Joda Interest list</name>
+      <subscribe>http://sourceforge.net/mail/?group_id=47291</subscribe>
+      <unsubscribe>http://sourceforge.net/mail/?group_id=47291</unsubscribe>
+      <archive>http://sourceforge.net/mailarchive/forum.php?forum_id=8530</archive>
+    </mailingList>
+  </mailingLists>
+
+  <developers>
+    <developer>
+      <name>Stephen Colebourne</name>
+      <id>scolebourne</id>
+      <email>scolebourne@joda.org</email>
+      <organization>SITA ATS Ltd</organization>
+      <roles>
+        <role>Project Lead</role>
+      </roles>
+    </developer>
+    <developer>
+      <name>Brian S O'Neill</name>
+      <id>broneill</id>
+      <email>broneill@users.sourceforge.net</email>
+      <organization></organization>
+      <roles>
+        <role>Senior Developer</role>
+      </roles>
+    </developer>
+  </developers>
+  
+<!--  <contributors>
+    <contributor>
+      <name>Guy Allard</name>
+    </contributor>Fredrik Borgh
+    <contributor>
+      <name>Fredrik Borgh</name>
+    </contributor>
+    <contributor>
+      <name>Sean Geoghegan</name>
+    </contributor>
+    <contributor>
+      <name>Ashish Katyal</name>
+    </contributor>
+    <contributor>
+      <name>Al Major</name>
+    </contributor>
+    <contributor>
+      <name>Kandarp Shah</name>
+    </contributor>
+  </contributors>-->
+
+  <dependencies>
+    <dependency>
+      <groupId>joda-time</groupId>
+      <artifactId>joda-time</artifactId>
+      <version>1.0</version>
+    </dependency>
+  </dependencies>
+
+  <build>
+    <sourceDirectory>src/java</sourceDirectory>
+    <unitTestSourceDirectory>src/test</unitTestSourceDirectory>
+    <unitTest>
+      <includes>
+        <include>org/joda/time/contrib/**/TestAll.java</include>
+      </includes>
+    </unitTest>
+  </build>
+
+  <reports>
+     <report>maven-changelog-plugin</report>
+     <report>maven-changes-plugin</report>
+     <report>maven-checkstyle-plugin</report>
+     <!-- <report>maven-clover-plugin</report> -->
+     <report>maven-jcoverage-plugin</report>
+     <report>maven-developer-activity-plugin</report>
+     <report>maven-file-activity-plugin</report>
+     <report>maven-javadoc-plugin</report>
+     <!-- <report>maven-jellydoc-plugin</report> -->
+     <report>maven-junit-report-plugin</report>
+     <report>maven-jxr-plugin</report>
+     <report>maven-license-plugin</report>
+     <!--report>maven-linkcheck-plugin</report-->
+     <!--report>maven-statcvs-plugin</report-->
+     <!--report>maven-tasklist-plugin</report-->
+  </reports>
+
+</project>
diff --git a/JodaTimeContrib/src/conf/MANIFEST.MF b/JodaTimeContrib/src/conf/MANIFEST.MF
new file mode 100644
index 000000000..909581412
--- /dev/null
+++ b/JodaTimeContrib/src/conf/MANIFEST.MF
@@ -0,0 +1,7 @@
+Extension-Name: @name@
+Specification-Title: Joda Time Contrib
+Specification-Vendor: Joda.org
+Specification-Version: 1.0
+Implementation-Vendor: Joda.org
+Implementation-Title: org.joda.time.contrib
+Implementation-Version: @version@

From fd0687af5f29e0c94e3eb829e46669c6904469c2 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Mon, 14 Mar 2005 15:37:31 +0000
Subject: [PATCH 010/124] Updated to version 2005g.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@742 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/tz/src/Readme.txt   |  2 +-
 JodaTime/src/java/org/joda/time/tz/src/southamerica | 10 +++++++---
 2 files changed, 8 insertions(+), 4 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
index 315ec18ef..17bfee69d 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
+++ b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
@@ -1,2 +1,2 @@
 The data files in this directory were obtained from the public tz database,
-http://www.twinsun.com/tz/tz-link.htm, version 2005f.
+http://www.twinsun.com/tz/tz-link.htm, version 2005g.
diff --git a/JodaTime/src/java/org/joda/time/tz/src/southamerica b/JodaTime/src/java/org/joda/time/tz/src/southamerica
index c5bd51695..adf7d62b0 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/southamerica
+++ b/JodaTime/src/java/org/joda/time/tz/src/southamerica
@@ -1,4 +1,4 @@
-# @(#)southamerica	7.58
+# @(#)southamerica	7.59
 
 # This data is by no means authoritative; if you think you know better,
 # go ahead and edit the file (and please send any changes to
@@ -1063,8 +1063,12 @@ Rule	Uruguay	1993	only	-	Feb	28	 0:00	0	-
 # From Eduardo Cota (2004-09-20):
 # The uruguayan government has decreed a change in the local time....
 # http://www.presidencia.gub.uy/decretos/2004091502.htm
-Rule	Uruguay	2004	only	-	Sep	Sun>=15	 0:00	1:00	S
-Rule	Uruguay	2005	only	-	Mar	Sun>=8	 0:00	0	-
+Rule	Uruguay	2004	only	-	Sep	19	 0:00	1:00	S
+# From Steffen Thorsen (2005-03-11):
+# Uruguay's DST was scheduled to end on Sunday, 2005-03-13, but in order to
+# save energy ... it was postponed two weeks....
+# http://www.presidencia.gub.uy/_Web/noticias/2005/03/2005031005.htm
+Rule	Uruguay	2005	only	-	Mar	27	 2:00	0	-
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone America/Montevideo	-3:44:44 -	LMT	1898 Jun 28
 			-3:44:44 -	MMT	1920 May  1	# Montevideo MT

From 3879051a2b477343ba154a382b2bd3690eeb9583 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 19 Mar 2005 10:33:04 +0000
Subject: [PATCH 011/124] Update website now release is a month old

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@743 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/index.xml | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/JodaTime/xdocs/index.xml b/JodaTime/xdocs/index.xml
index 18262637c..958ae99b5 100644
--- a/JodaTime/xdocs/index.xml
+++ b/JodaTime/xdocs/index.xml
@@ -35,6 +35,8 @@ public boolean isBirthdayInLeapYear(<b>YearMonthDay</b> dateOfBirth) {
   return dateOfBirth.year().isLeap();
 }
 </source>
+Version 1.0 was released on 2005-02-22 -
+<a href="http://sourceforge.net/project/showfiles.php?group_id=97367">Download now</a>
 </p>
 </section>
 

From eb7232765562e92e3d976e1464f0647fbaf7334c Mon Sep 17 00:00:00 2001
From: Mario Ivankovits <mario@ops.co.at>
Date: Sun, 20 Mar 2005 17:29:49 +0000
Subject: [PATCH 012/124] initial version usertype for hibernate3 to persist
 datetime

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@744 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../contrib/hibernate/PersistentDateTime.java | 124 ++++++++++++++++++
 1 file changed, 124 insertions(+)
 create mode 100644 JodaTimeContrib/src/java/org/joda/time/contrib/hibernate/PersistentDateTime.java

diff --git a/JodaTimeContrib/src/java/org/joda/time/contrib/hibernate/PersistentDateTime.java b/JodaTimeContrib/src/java/org/joda/time/contrib/hibernate/PersistentDateTime.java
new file mode 100644
index 000000000..ce630895a
--- /dev/null
+++ b/JodaTimeContrib/src/java/org/joda/time/contrib/hibernate/PersistentDateTime.java
@@ -0,0 +1,124 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.contrib.hibernate;
+
+import org.hibernate.Hibernate;
+import org.hibernate.HibernateException;
+import org.hibernate.usertype.UserType;
+import org.joda.time.DateTime;
+
+import java.io.Serializable;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Types;
+
+/**
+ * Persist {@link org.joda.time.DateTime} via hibernate
+ *
+ * @author Mario Ivankovits (mario@ops.co.at)
+ */
+public class PersistentDateTime implements UserType
+{
+    private static final int[] SQL_TYPES = new int[]
+    {
+        Types.TIMESTAMP,
+    };
+
+    public int[] sqlTypes()
+    {
+        return SQL_TYPES;
+    }
+
+    public Class returnedClass()
+    {
+        return DateTime.class;
+    }
+
+    public boolean equals(Object x, Object y) throws HibernateException
+    {
+        if (x == y)
+        {
+            return true;
+        }
+        if (x == null || y == null)
+        {
+            return false;
+        }
+        DateTime dtx = (DateTime) x;
+        DateTime dty = (DateTime) y;
+
+        return dtx.equals(dty);
+    }
+
+    public int hashCode(Object object) throws HibernateException
+    {
+        return object.hashCode();
+    }
+
+    public Object nullSafeGet(ResultSet resultSet, String[] strings, Object object) throws HibernateException, SQLException
+    {
+        Object timestamp = Hibernate.TIMESTAMP.nullSafeGet(resultSet, strings[0]);
+        if (timestamp == null)
+        {
+            return null;
+        }
+
+        return new DateTime(timestamp);
+    }
+
+    public void nullSafeSet(PreparedStatement preparedStatement, Object value, int index) throws HibernateException, SQLException
+    {
+        if (value == null)
+        {
+            Hibernate.TIMESTAMP.nullSafeSet(preparedStatement, null, index);
+        }
+        else
+        {
+            Hibernate.TIMESTAMP.nullSafeSet(preparedStatement, ((DateTime) value).toDate(), index);
+        }
+    }
+
+    public Object deepCopy(Object value) throws HibernateException
+    {
+        if (value == null)
+        {
+            return null;
+        }
+
+        return new DateTime(value);
+    }
+
+    public boolean isMutable()
+    {
+        return false;
+    }
+
+    public Serializable disassemble(Object value) throws HibernateException
+    {
+        return (Serializable) value;
+    }
+
+    public Object assemble(Serializable cached, Object value) throws HibernateException
+    {
+        return cached;
+    }
+
+    public Object replace(Object original, Object target, Object owner) throws HibernateException
+    {
+        return original;
+    }
+}

From b52ac16e90e099dd33efdb967a3dc09f8a16a822 Mon Sep 17 00:00:00 2001
From: Mario Ivankovits <mario@ops.co.at>
Date: Sun, 20 Mar 2005 17:35:04 +0000
Subject: [PATCH 013/124] added hibernate3.0rc1 as dependency

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@745 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/project.xml | 16 ++++++++++++----
 1 file changed, 12 insertions(+), 4 deletions(-)

diff --git a/JodaTimeContrib/project.xml b/JodaTimeContrib/project.xml
index 978f6ae58..783e4fdb9 100644
--- a/JodaTimeContrib/project.xml
+++ b/JodaTimeContrib/project.xml
@@ -22,13 +22,13 @@
   </description>
   <shortDescription>Joda time contrib</shortDescription>
   <url>http://joda-time.sourceforge.net</url>
-  
+
   <issueTrackingUrl>http://sourceforge.net/tracker/?atid=617889&amp;group_id=97367&amp;func=browse</issueTrackingUrl>
-  
+
   <siteAddress>shell.sourceforge.net</siteAddress>
   <siteDirectory>/home/groups/j/jo/joda-time/htdocs/contrib/</siteDirectory>
   <distributionDirectory>home/groups/j/jo/joda-time/htdocs/repository</distributionDirectory>
-  
+
   <repository>
     <connection>scm:cvs:pserver:anonymous@cvs.sourceforge.net:/cvsroot/joda-time:JodaTimeContrib</connection>
     <url>http://cvs.sourceforge.net/viewcvs.py/joda-time/JodaTimeContrib/</url>
@@ -63,7 +63,7 @@
       </roles>
     </developer>
   </developers>
-  
+
 <!--  <contributors>
     <contributor>
       <name>Guy Allard</name>
@@ -93,6 +93,14 @@
     </dependency>
   </dependencies>
 
+  <dependencies>
+    <dependency>
+      <groupId>hibernate</groupId>
+      <artifactId>hibernate</artifactId>
+      <version>3.0rc1</version>
+    </dependency>
+  </dependencies>
+
   <build>
     <sourceDirectory>src/java</sourceDirectory>
     <unitTestSourceDirectory>src/test</unitTestSourceDirectory>

From 5311dfbc16820ac9494debf99d8ba0202fc2109e Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Mon, 4 Apr 2005 15:54:11 +0000
Subject: [PATCH 014/124] Updated to version 2005h.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@746 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/java/org/joda/time/tz/src/Readme.txt  |  2 +-
 .../src/java/org/joda/time/tz/src/antarctica  | 33 ++++++++++---------
 JodaTime/src/java/org/joda/time/tz/src/asia   | 30 +++++++++++++----
 .../src/java/org/joda/time/tz/src/australasia | 20 ++++++++---
 .../src/java/org/joda/time/tz/src/etcetera    |  7 ++--
 5 files changed, 60 insertions(+), 32 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
index 17bfee69d..235b63094 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
+++ b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
@@ -1,2 +1,2 @@
 The data files in this directory were obtained from the public tz database,
-http://www.twinsun.com/tz/tz-link.htm, version 2005g.
+http://www.twinsun.com/tz/tz-link.htm, version 2005h.
diff --git a/JodaTime/src/java/org/joda/time/tz/src/antarctica b/JodaTime/src/java/org/joda/time/tz/src/antarctica
index 8f7b6cb46..30d0fe759 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/antarctica
+++ b/JodaTime/src/java/org/joda/time/tz/src/antarctica
@@ -1,4 +1,4 @@
-# @(#)antarctica	7.23
+# @(#)antarctica	7.24
 
 # From Paul Eggert (1999-11-15):
 # To keep things manageable, we list only locations occupied year-round; see
@@ -90,19 +90,19 @@ Zone Antarctica/Mawson	0	-	zzz	1954 Feb 13
 # </a>
 
 # Brazil - year-round base
-# Ferraz, King George Island, since 1983/4
+# Comandante Ferraz, King George Island, -6205+05824, since 1983/4
 
 # Chile - year-round bases and towns
 # Escudero, South Shetland Is, -621157-0585735, since 1994
-# Frei, King George Island, -6214-05848, since 1969-03-07
-# O'Higgins, Antarctic Peninsula, -6319-05704, since 1948-02
-# Prat, -6230-05941
-# Villa Las Estrellas (a town), King George Island, since 1984-04-09
+# Presidente Eduadro Frei, King George Island, -6214-05848, since 1969-03-07
+# General Bernardo O'Higgins, Antarctic Peninsula, -6319-05704, since 1948-02
+# Capitan Arturo Prat, -6230-05941
+# Villa Las Estrellas (a town), around the Frei base, since 1984-04-09
 # These locations have always used Santiago time; use TZ='America/Santiago'.
 
 # China - year-round bases
-# Great Wall, King George Island, since 1985-02-20
-# Zhongshan, Larsemann Hills, Prydz Bay, since 1989-02-26
+# Great Wall, King George Island, -6213-05858, since 1985-02-20
+# Zhongshan, Larsemann Hills, Prydz Bay, -6922+07623, since 1989-02-26
 
 # France - year-round bases
 #
@@ -145,14 +145,14 @@ Zone Antarctica/DumontDUrville 0 -	zzz	1947
 
 
 # Germany - year-round base
-# Georg von Neumayer
+# Georg von Neumayer, -7039-00815
 
 # India - year-round base
-# Dakshin Gangotri
+# Dakshin Gangotri, -7005+01200
 
 # Japan - year-round bases
-# Dome Fuji
-# Syowa
+# Dome Fuji, -7719+03942
+# Syowa, -690022+0393524
 #
 # From Hideyuki Suzuki (1999-02-06):
 # In all Japanese stations, +0300 is used as the standard time.  [See]
@@ -171,7 +171,7 @@ Zone Antarctica/Syowa	0	-	zzz	1957 Jan 29
 # </a>
 
 # S Korea - year-round base
-# King Sejong, King George Island, since 1988
+# King Sejong, King George Island, -6213-05847, since 1988
 
 # New Zealand - claims
 # Balleny Islands (never inhabited)
@@ -202,7 +202,8 @@ Rule	NZAQ	1990	max	-	Mar	Sun>=15	2:00s	0	S
 # Russia - year-round bases
 # Bellingshausen, King George Island, -621159-0585337, since 1968-02-22
 # Mirny, Davis coast, -6633+09301, since 1956-02
-# Molodezhnaya, Alasheyev Bay, year-round from 1962-02 to 1999-07-01
+# Molodezhnaya, Alasheyev Bay, -6740+04551,
+#	year-round from 1962-02 to 1999-07-01
 # Novolazarevskaya, Queen Maud Land, -7046+01150,
 #	year-round from 1960/61 to 1992
 
@@ -234,8 +235,8 @@ Zone Antarctica/Vostok	0	-	zzz	1957 Dec 16
 			6:00	-	VOST	# Vostok time
 
 # S Africa - year-round bases
-# Marion Island
-# Sanae
+# Marion Island, -4653+03752
+# Sanae, -7141-00250
 
 # UK
 #
diff --git a/JodaTime/src/java/org/joda/time/tz/src/asia b/JodaTime/src/java/org/joda/time/tz/src/asia
index 4be50b0aa..d4a842a27 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/asia
+++ b/JodaTime/src/java/org/joda/time/tz/src/asia
@@ -1,4 +1,4 @@
-# @(#)asia	7.80
+# @(#)asia	7.81
 
 # This data is by no means authoritative; if you think you know better,
 # go ahead and edit the file (and please send any changes to
@@ -137,8 +137,12 @@ Zone	Asia/Thimphu	5:58:36 -	LMT	1947 Aug 15 # or Thimbu
 # British Indian Ocean Territory
 # Whitman and the 1995 CIA time zone map say 5:00, but the
 # 1997 and later maps say 6:00.  Assume the switch occurred in 1996.
+# We have no information as to when standard time was introduced;
+# assume it occurred in 1907, the same year as Mauritius (which
+# then contained the Chagos Archipelago).
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Indian/Chagos	5:00	-	IOT	1996 # BIOT Time
+Zone	Indian/Chagos	4:49:40	-	LMT	1907
+			5:00	-	IOT	1996 # BIOT Time
 			6:00	-	IOT
 
 # Brunei
@@ -923,6 +927,13 @@ Zone	Asia/Amman	2:23:44 -	LMT	1931
 # - Qyzylorda switched from +5:00 to +6:00 on 1992-01-19 02:00.
 # - Oral switched from +5:00 to +4:00 in spring 1989.
 #
+# <a href="http://www.kazsociety.org.uk/news/2005/03/30.htm">
+# From Kazakhstan Embassy's News Bulletin #11 (2005-03-21):
+# </a>
+# The Government of Kazakhstan passed a resolution March 15 abolishing
+# daylight saving time citing lack of economic benefits and health
+# complications coupled with a decrease in productivity.
+#
 #
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 #
@@ -931,7 +942,8 @@ Zone	Asia/Almaty	5:07:48 -	LMT	1924 May  2 # or Alma-Ata
 			5:00	-	ALMT	1930 Jun 21 # Alma-Ata Time
 			6:00 RussiaAsia ALM%sT	1991
 			6:00	-	ALMT	1992
-			6:00 RussiaAsia	ALM%sT
+			6:00 RussiaAsia	ALM%sT	2005 Mar 15
+			6:00	-	ALMT
 # Qyzylorda (aka Kyzylorda, Kizilorda, Kzyl-Orda, etc.)
 Zone	Asia/Qyzylorda	4:21:52 -	LMT	1924 May  2
 			4:00	-	KIZT	1930 Jun 21 # Kizilorda Time
@@ -941,7 +953,8 @@ Zone	Asia/Qyzylorda	4:21:52 -	LMT	1924 May  2
 			5:00 RussiaAsia	KIZ%sT	1991
 			5:00	-	KIZT	1991 Dec 16 # independence
 			5:00	-	QYZT	1992 Jan 19 2:00
-			6:00 RussiaAsia	QYZ%sT
+			6:00 RussiaAsia	QYZ%sT	2005 Mar 15
+			6:00	-	QYZT
 # Aqtobe (aka Aktobe, formerly Akt'ubinsk)
 Zone	Asia/Aqtobe	3:48:40	-	LMT	1924 May  2
 			4:00	-	AKTT	1930 Jun 21 # Aktyubinsk Time
@@ -950,7 +963,8 @@ Zone	Asia/Aqtobe	3:48:40	-	LMT	1924 May  2
 			6:00	-	AKTT	1982 Apr  1
 			5:00 RussiaAsia	AKT%sT	1991
 			5:00	-	AKTT	1991 Dec 16 # independence
-			5:00 RussiaAsia	AQT%sT	# Aqtobe Time
+			5:00 RussiaAsia	AQT%sT	2005 Mar 15 # Aqtobe Time
+			5:00	-	AQTT
 # Mangghystau
 # Aqtau was not founded until 1963, but it represents an inhabited region,
 # so include time stamps before 1963.
@@ -962,7 +976,8 @@ Zone	Asia/Aqtau	3:21:04	-	LMT	1924 May  2
 			5:00 RussiaAsia	SHE%sT	1991
 			5:00	-	SHET	1991 Dec 16 # independence
 			5:00 RussiaAsia	AQT%sT	1995 Mar lastSun 2:00 # Aqtau Time
-			4:00 RussiaAsia	AQT%sT
+			4:00 RussiaAsia	AQT%sT	2005 Mar 15
+			4:00	-	AQTT
 # West Kazakhstan
 Zone	Asia/Oral	3:25:24	-	LMT	1924 May  2 # or Ural'sk
 			4:00	-	URAT	1930 Jun 21 # Ural'sk time
@@ -972,7 +987,8 @@ Zone	Asia/Oral	3:25:24	-	LMT	1924 May  2 # or Ural'sk
 			5:00 RussiaAsia	URA%sT	1989 Mar 26 2:00
 			4:00 RussiaAsia	URA%sT	1991
 			4:00	-	URAT	1991 Dec 16 # independence
-			4:00 RussiaAsia	ORA%sT	# Oral Time
+			4:00 RussiaAsia	ORA%sT	2005 Mar 15 # Oral Time
+			4:00	-	ORAT
 
 # Kyrgyzstan (Kirgizstan)
 # Transitions through 1991 are from Shanks.
diff --git a/JodaTime/src/java/org/joda/time/tz/src/australasia b/JodaTime/src/java/org/joda/time/tz/src/australasia
index 4696d0b2e..3aae52c78 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/australasia
+++ b/JodaTime/src/java/org/joda/time/tz/src/australasia
@@ -1,4 +1,4 @@
-# @(#)australasia	7.70
+# @(#)australasia	7.71
 # This file also includes Pacific islands.
 
 # Notes are at the end of this file
@@ -199,9 +199,11 @@ Zone Pacific/Rarotonga	-10:39:04 -	LMT	1901		# Avarua
 			-10:00	Cook	CK%sT
 
 # Cocos
-# From USNO (1989):
+# These islands were ruled by the Ross family from about 1830 to 1978.
+# We don't know when standard time was introduced; for now, we guess 1900.
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Indian/Cocos	6:30	-	CCT	# Cocos Islands Time
+Zone	Indian/Cocos	6:27:40	-	LMT	1900
+			6:30	-	CCT	# Cocos Islands Time
 
 # Fiji
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
@@ -381,11 +383,11 @@ Zone Pacific/Pago_Pago	 12:37:12 -	LMT	1879 Jul  5
 			-11:00	-	BST	1983 Nov 30	# B=Bering
 			-11:00	-	SST			# S=Samoa
 
-# W Samoa
+# Samoa
 Zone Pacific/Apia	 12:33:04 -	LMT	1879 Jul  5
 			-11:26:56 -	LMT	1911
 			-11:30	-	SAMT	1950		# Samoa Time
-			-11:00	-	WST			# W Samoa Time
+			-11:00	-	WST			# Samoa Time
 
 # Solomon Is
 # excludes Bougainville, for which see Papua New Guinea
@@ -1347,3 +1349,11 @@ Zone	Pacific/Wallis	12:15:20 -	LMT	1901
 # places as late as fourteen hours later than UTC.  And, since the IDL is not
 # an international standard, there are some places on the high seas where the
 # correct date is ambiguous.
+
+# From Paul Eggert, using references suggested by Oscar van Vlijmen
+# (2005-03-20):
+#
+# The American Practical Navigator (2002)
+# <http://pollux.nss.nima.mil/pubs/pubs_j_apn_sections.html?rid=187>
+# talks only about the 180-degree meridian with respect to ships in
+# international waters; it ignores the international date line.
diff --git a/JodaTime/src/java/org/joda/time/tz/src/etcetera b/JodaTime/src/java/org/joda/time/tz/src/etcetera
index 3b0448583..9eb5a7442 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/etcetera
+++ b/JodaTime/src/java/org/joda/time/tz/src/etcetera
@@ -1,10 +1,11 @@
-# @(#)etcetera	7.11
+# @(#)etcetera	7.12
 
 # These entries are mostly present for historical reasons, so that
 # people in areas not otherwise covered by the tz files could "zic -l"
 # to a time zone that was right for their area.  These days, the
-# tz files cover almost all the inhabited world, so there's little
-# need now for the entries that are not on UTC.
+# tz files cover almost all the inhabited world, and the only practical
+# need now for the entries that are not on UTC are for ships at sea
+# that cannot use POSIX TZ settings.
 
 Zone	Etc/GMT		0	-	GMT
 Zone	Etc/UTC		0	-	UTC

From d8053cc9e6549a3403dd578a84c73f806a85cb44 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 16 Apr 2005 15:58:05 +0000
Subject: [PATCH 015/124] Add Period constructors for ReadablePartials Add
 PeriodType constants that exclude time

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@747 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |   8 ++
 JodaTime/src/java/org/joda/time/Period.java   |  35 +++++
 .../src/java/org/joda/time/PeriodType.java    |  82 +++++++++++
 .../java/org/joda/time/base/BasePeriod.java   |  32 +++++
 .../test/org/joda/time/TestPeriodType.java    |  53 +++++++
 .../joda/time/TestPeriod_Constructors.java    | 134 ++++++++++++++++++
 6 files changed, 344 insertions(+)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index c94eb437a..7ec8c69ec 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -31,6 +31,14 @@ None
 
 Enhancements since 1.0
 ----------------------
+- Period
+  Added constructors to create a Period from two ReadablePartials, such as
+  YearMonthDay or TimeOfDay
+
+- PeriodType
+  Added three new period types - YearMonthDay, YearWeekDay and YearDay
+  These complement the existing ones but exclude the time fields.
+
 - DateTimeFormatter
   Method withPivotYear added to allow the two digit pivot year to be controlled.
   This is most useful after creating a format from a string pattern.
diff --git a/JodaTime/src/java/org/joda/time/Period.java b/JodaTime/src/java/org/joda/time/Period.java
index 311f9f005..f030f35e6 100644
--- a/JodaTime/src/java/org/joda/time/Period.java
+++ b/JodaTime/src/java/org/joda/time/Period.java
@@ -162,6 +162,8 @@ public Period() {
 
     /**
      * Create a period from a set of field values using the standard set of fields.
+     * Note that the parameters specify the time fields hours, minutes,
+     * seconds and millis, not the date fields.
      *
      * @param hours  amount of hours in this period
      * @param minutes  amount of minutes in this period
@@ -372,6 +374,39 @@ public Period(ReadableInstant startInstant, ReadableInstant endInstant, PeriodTy
         super(startInstant, endInstant, type);
     }
 
+    /**
+     * Creates a period from two partially specified times.
+     * The two partials must contain the same fields, thus you can
+     * specify two YearMonthDay objects, or two TimeOfDay objects,
+     * but not one of each.
+     * As these are Partial objects, time zones have no effect on
+     * the result.
+     *
+     * @param start  the start of the period, must not be null
+     * @param end  the end of the period, must not be null
+     * @throws IllegalArgumentException if the partials are null or invalid
+     */
+    public Period(ReadablePartial start, ReadablePartial end) {
+        super(start, end, null);
+    }
+
+    /**
+     * Creates a period from the given duration and end point.
+     * The two partials must contain the same fields, thus you can
+     * specify two YearMonthDay objects, or two TimeOfDay objects,
+     * but not one of each.
+     * As these are Partial objects, time zones have no effect on
+     * the result.
+     *
+     * @param start  the start of the period, must not be null
+     * @param end  the end of the period, must not be null
+     * @param type  which set of fields this period supports, null means standard
+     * @throws IllegalArgumentException if the partials are null or invalid
+     */
+    public Period(ReadablePartial start, ReadablePartial end, PeriodType type) {
+        super(start, end, type);
+    }
+
     /**
      * Creates a period from the given start point and the duration.
      *
diff --git a/JodaTime/src/java/org/joda/time/PeriodType.java b/JodaTime/src/java/org/joda/time/PeriodType.java
index ec9c155b2..a6a584d37 100644
--- a/JodaTime/src/java/org/joda/time/PeriodType.java
+++ b/JodaTime/src/java/org/joda/time/PeriodType.java
@@ -27,8 +27,11 @@
  * <ul>
  * <li>Standard - years, months, weeks, days, hours, minutes, seconds, millis
  * <li>YearMonthDayTime - years, months, days, hours, minutes, seconds, millis
+ * <li>YearMonthDay - years, months, days
  * <li>YearWeekDayTime - years, weeks, days, hours, minutes, seconds, millis
+ * <li>YearWeekDay - years, weeks, days
  * <li>YearDayTime - years, days, hours, minutes, seconds, millis
+ * <li>YearDay - years, days, hours
  * <li>DayTime - days, hours, minutes, seconds, millis
  * <li>Time - hours, minutes, seconds, millis
  * <li>plus one for each single type
@@ -56,8 +59,11 @@
     
     private static PeriodType cStandard;
     private static PeriodType cYMDTime;
+    private static PeriodType cYMD;
     private static PeriodType cYWDTime;
+    private static PeriodType cYWD;
     private static PeriodType cYDTime;
+    private static PeriodType cYD;
     private static PeriodType cDTime;
     private static PeriodType cTime;
     
@@ -135,6 +141,32 @@ public static PeriodType yearMonthDayTime() {
         return type;
     }
 
+    /**
+     * Gets a type that defines the year, month and day fields.
+     * <ul>
+     * <li>years
+     * <li>months
+     * <li>days
+     * </ul>
+     *
+     * @return the period type
+     */
+    public static PeriodType yearMonthDay() {
+        PeriodType type = cYMD;
+        if (type == null) {
+            type = new PeriodType(
+                "YearMonthDay",
+                new DurationFieldType[] {
+                    DurationFieldType.years(), DurationFieldType.months(),
+                    DurationFieldType.days(),
+                },
+                new int[] { 0, 1, -1, 2, -1, -1, -1, -1, }
+            );
+            cYMD = type;
+        }
+        return type;
+    }
+
     /**
      * Gets a type that defines all standard fields except months.
      * <ul>
@@ -167,6 +199,32 @@ public static PeriodType yearWeekDayTime() {
         return type;
     }
 
+    /**
+     * Gets a type that defines year, week and day fields.
+     * <ul>
+     * <li>years
+     * <li>weeks
+     * <li>days
+     * </ul>
+     *
+     * @return the period type
+     */
+    public static PeriodType yearWeekDay() {
+        PeriodType type = cYWD;
+        if (type == null) {
+            type = new PeriodType(
+                "YearWeekDay",
+                new DurationFieldType[] {
+                    DurationFieldType.years(),
+                    DurationFieldType.weeks(), DurationFieldType.days(),
+                },
+                new int[] { 0, -1, 1, 2, -1, -1, -1, -1, }
+            );
+            cYWD = type;
+        }
+        return type;
+    }
+
     /**
      * Gets a type that defines all standard fields except months and weeks.
      * <ul>
@@ -197,6 +255,30 @@ public static PeriodType yearDayTime() {
         return type;
     }
 
+    /**
+     * Gets a type that defines the year and day fields.
+     * <ul>
+     * <li>years
+     * <li>days
+     * </ul>
+     *
+     * @return the period type
+     */
+    public static PeriodType yearDay() {
+        PeriodType type = cYD;
+        if (type == null) {
+            type = new PeriodType(
+                "YearDay",
+                new DurationFieldType[] {
+                    DurationFieldType.years(), DurationFieldType.days(),
+                },
+                new int[] { 0, -1, -1, 1, -1, -1, -1, -1, }
+            );
+            cYD = type;
+        }
+        return type;
+    }
+
     /**
      * Gets a type that defines all standard fields from days downwards.
      * <ul>
diff --git a/JodaTime/src/java/org/joda/time/base/BasePeriod.java b/JodaTime/src/java/org/joda/time/base/BasePeriod.java
index 48973784b..66a06e7fb 100644
--- a/JodaTime/src/java/org/joda/time/base/BasePeriod.java
+++ b/JodaTime/src/java/org/joda/time/base/BasePeriod.java
@@ -26,6 +26,7 @@
 import org.joda.time.ReadWritablePeriod;
 import org.joda.time.ReadableDuration;
 import org.joda.time.ReadableInstant;
+import org.joda.time.ReadablePartial;
 import org.joda.time.ReadablePeriod;
 import org.joda.time.convert.ConverterManager;
 import org.joda.time.convert.PeriodConverter;
@@ -123,6 +124,37 @@ protected BasePeriod(ReadableInstant startInstant, ReadableInstant endInstant, P
         }
     }
 
+    /**
+     * Creates a period from the given duration and end point.
+     * The two partials must contain the same fields, thus you can
+     * specify two YearMonthDay objects, or two TimeOfDay objects,
+     * but not one of each.
+     * As these are Partial objects, time zones have no effect on
+     * the result.
+     *
+     * @param start  the start of the period, must not be null
+     * @param end  the end of the period, must not be null
+     * @param type  which set of fields this period supports, null means standard
+     * @throws IllegalArgumentException if the partials are null or invalid
+     */
+    protected BasePeriod(ReadablePartial start, ReadablePartial end, PeriodType type) {
+        super();
+        if (start == null || end == null) {
+            throw new IllegalArgumentException("ReadablePartial objects must not be null");
+        }
+        if (start.size() != end.size()) {
+            throw new IllegalArgumentException("ReadablePartial objects must have the same set of fields");
+        }
+        for (int i = 0, isize = start.size(); i < isize; i++) {
+            if (start.getFieldType(i) != end.getFieldType(i)) {
+                throw new IllegalArgumentException("ReadablePartial objects must have the same set of fields");
+            }
+        }
+        iType = checkPeriodType(type);
+        Chronology chrono = DateTimeUtils.getChronology(start.getChronology()).withUTC();
+        iValues = chrono.get(this, chrono.set(start, 0L), chrono.set(end, 0L));
+    }
+
     /**
      * Creates a period from the given start point and duration.
      *
diff --git a/JodaTime/src/test/org/joda/time/TestPeriodType.java b/JodaTime/src/test/org/joda/time/TestPeriodType.java
index 7f28ec98a..a817e0dec 100644
--- a/JodaTime/src/test/org/joda/time/TestPeriodType.java
+++ b/JodaTime/src/test/org/joda/time/TestPeriodType.java
@@ -181,6 +181,24 @@ public void testYearMonthDayTime() throws Exception {
         assertSameAfterSerialization(type);
     }
 
+    //-----------------------------------------------------------------------
+    public void testYearMonthDay() throws Exception {
+        PeriodType type = PeriodType.yearMonthDay();
+        assertEquals(3, type.size());
+        assertEquals(DurationFieldType.years(), type.getFieldType(0));
+        assertEquals(DurationFieldType.months(), type.getFieldType(1));
+        assertEquals(DurationFieldType.days(), type.getFieldType(2));
+        assertEquals("YearMonthDay", type.getName());
+        assertEquals("PeriodType[YearMonthDay]", type.toString());
+        assertEquals(true, type.equals(type));
+        assertEquals(true, type == PeriodType.yearMonthDay());
+        assertEquals(false, type.equals(PeriodType.millis()));
+        assertEquals(true, type.hashCode() == type.hashCode());
+        assertEquals(true, type.hashCode() == PeriodType.yearMonthDay().hashCode());
+        assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());
+        assertSameAfterSerialization(type);
+    }
+
     //-----------------------------------------------------------------------
     public void testYearWeekDayTime() throws Exception {
         PeriodType type = PeriodType.yearWeekDayTime();
@@ -203,6 +221,24 @@ public void testYearWeekDayTime() throws Exception {
         assertSameAfterSerialization(type);
     }
 
+    //-----------------------------------------------------------------------
+    public void testYearWeekDay() throws Exception {
+        PeriodType type = PeriodType.yearWeekDay();
+        assertEquals(3, type.size());
+        assertEquals(DurationFieldType.years(), type.getFieldType(0));
+        assertEquals(DurationFieldType.weeks(), type.getFieldType(1));
+        assertEquals(DurationFieldType.days(), type.getFieldType(2));
+        assertEquals("YearWeekDay", type.getName());
+        assertEquals("PeriodType[YearWeekDay]", type.toString());
+        assertEquals(true, type.equals(type));
+        assertEquals(true, type == PeriodType.yearWeekDay());
+        assertEquals(false, type.equals(PeriodType.millis()));
+        assertEquals(true, type.hashCode() == type.hashCode());
+        assertEquals(true, type.hashCode() == PeriodType.yearWeekDay().hashCode());
+        assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());
+        assertSameAfterSerialization(type);
+    }
+
     //-----------------------------------------------------------------------
     public void testYearDayTime() throws Exception {
         PeriodType type = PeriodType.yearDayTime();
@@ -224,6 +260,23 @@ public void testYearDayTime() throws Exception {
         assertSameAfterSerialization(type);
     }
 
+    //-----------------------------------------------------------------------
+    public void testYearDay() throws Exception {
+        PeriodType type = PeriodType.yearDay();
+        assertEquals(2, type.size());
+        assertEquals(DurationFieldType.years(), type.getFieldType(0));
+        assertEquals(DurationFieldType.days(), type.getFieldType(1));
+        assertEquals("YearDay", type.getName());
+        assertEquals("PeriodType[YearDay]", type.toString());
+        assertEquals(true, type.equals(type));
+        assertEquals(true, type == PeriodType.yearDay());
+        assertEquals(false, type.equals(PeriodType.millis()));
+        assertEquals(true, type.hashCode() == type.hashCode());
+        assertEquals(true, type.hashCode() == PeriodType.yearDay().hashCode());
+        assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());
+        assertSameAfterSerialization(type);
+    }
+
     //-----------------------------------------------------------------------
     public void testDayTime() throws Exception {
         PeriodType type = PeriodType.dayTime();
diff --git a/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java b/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java
index 11720ea02..d8662367e 100644
--- a/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java
+++ b/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java
@@ -730,6 +730,140 @@ public void testConstructor_RI_RI_PeriodType5() throws Throwable {
         assertEquals(0, test.getMillis());
     }
 
+    //-----------------------------------------------------------------------
+    public void testConstructor_RP_RP1() throws Throwable {
+        YearMonthDay dt1 = new YearMonthDay(2004, 6, 9);
+        YearMonthDay dt2 = new YearMonthDay(2005, 7, 10);
+        Period test = new Period(dt1, dt2);
+        assertEquals(PeriodType.standard(), test.getPeriodType());
+        assertEquals(1, test.getYears());
+        assertEquals(1, test.getMonths());
+        assertEquals(0, test.getWeeks());
+        assertEquals(1, test.getDays());
+        assertEquals(0, test.getHours());
+        assertEquals(0, test.getMinutes());
+        assertEquals(0, test.getSeconds());
+        assertEquals(0, test.getMillis());
+    }
+
+    public void testConstructor_RP_RP2() throws Throwable {
+        YearMonthDay dt1 = new YearMonthDay(2004, 6, 9);
+        YearMonthDay dt2 = new YearMonthDay(2005, 5, 17);
+        Period test = new Period(dt1, dt2);
+        assertEquals(PeriodType.standard(), test.getPeriodType());
+        assertEquals(0, test.getYears());
+        assertEquals(11, test.getMonths());
+        assertEquals(1, test.getWeeks());
+        assertEquals(1, test.getDays());
+        assertEquals(0, test.getHours());
+        assertEquals(0, test.getMinutes());
+        assertEquals(0, test.getSeconds());
+        assertEquals(0, test.getMillis());
+    }
+
+    public void testConstructor_RP_RP3() throws Throwable {
+        YearMonthDay dt1 = null;
+        YearMonthDay dt2 = new YearMonthDay(2005, 7, 17);
+        try {
+            new Period(dt1, dt2);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testConstructor_RP_RP4() throws Throwable {
+        YearMonthDay dt1 = new YearMonthDay(2005, 7, 17);
+        YearMonthDay dt2 = null;
+        try {
+            new Period(dt1, dt2);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testConstructor_RP_RP5() throws Throwable {
+        YearMonthDay dt1 = null;
+        YearMonthDay dt2 = null;
+        try {
+            new Period(dt1, dt2);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testConstructor_RP_RP6() throws Throwable {
+        YearMonthDay dt1 = new YearMonthDay(2005, 7, 17);
+        TimeOfDay dt2 = new TimeOfDay(10, 20, 30, 40);
+        try {
+            new Period(dt1, dt2);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
+    public void testConstructor_RP_RP_PeriodType1() throws Throwable {
+        YearMonthDay dt1 = new YearMonthDay(2004, 6, 9);
+        YearMonthDay dt2 = new YearMonthDay(2005, 7, 10);
+        Period test = new Period(dt1, dt2, PeriodType.standard());
+        assertEquals(PeriodType.standard(), test.getPeriodType());
+        assertEquals(1, test.getYears());
+        assertEquals(1, test.getMonths());
+        assertEquals(0, test.getWeeks());
+        assertEquals(1, test.getDays());
+        assertEquals(0, test.getHours());
+        assertEquals(0, test.getMinutes());
+        assertEquals(0, test.getSeconds());
+        assertEquals(0, test.getMillis());
+    }
+
+    public void testConstructor_RP_RP_PeriodType2() throws Throwable {
+        YearMonthDay dt1 = new YearMonthDay(2004, 6, 9);
+        YearMonthDay dt2 = new YearMonthDay(2005, 5, 17);
+        Period test = new Period(dt1, dt2, PeriodType.yearMonthDay());
+        assertEquals(PeriodType.yearMonthDay(), test.getPeriodType());
+        assertEquals(0, test.getYears());
+        assertEquals(11, test.getMonths());
+        assertEquals(0, test.getWeeks());
+        assertEquals(8, test.getDays());
+        assertEquals(0, test.getHours());
+        assertEquals(0, test.getMinutes());
+        assertEquals(0, test.getSeconds());
+        assertEquals(0, test.getMillis());
+    }
+
+    public void testConstructor_RP_RP_PeriodType3() throws Throwable {
+        YearMonthDay dt1 = null;
+        YearMonthDay dt2 = new YearMonthDay(2005, 7, 17);
+        try {
+            new Period(dt1, dt2, PeriodType.standard());
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testConstructor_RP_RP_PeriodType4() throws Throwable {
+        YearMonthDay dt1 = new YearMonthDay(2005, 7, 17);
+        YearMonthDay dt2 = null;
+        try {
+            new Period(dt1, dt2);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testConstructor_RP_RP_PeriodType5() throws Throwable {
+        YearMonthDay dt1 = null;
+        YearMonthDay dt2 = null;
+        try {
+            new Period(dt1, dt2, PeriodType.standard());
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testConstructor_RP_RP_PeriodType6() throws Throwable {
+        YearMonthDay dt1 = new YearMonthDay(2005, 7, 17);
+        TimeOfDay dt2 = new TimeOfDay(10, 20, 30, 40);
+        try {
+            new Period(dt1, dt2, PeriodType.standard());
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
     //-----------------------------------------------------------------------
     public void testConstructor_RI_RD1() throws Throwable {
         DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);

From 260472337ce9d54d76074a4d400241813b4676d2 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 16 Apr 2005 16:44:35 +0000
Subject: [PATCH 016/124] Make YearMonthDay and TimeOfDay implement Comparable

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@748 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |   4 +
 .../src/java/org/joda/time/TimeOfDay.java     |  52 +++++++++
 .../src/java/org/joda/time/YearMonthDay.java  |  52 +++++++++
 .../java/org/joda/time/base/BasePartial.java  |  42 ++++++-
 .../org/joda/time/TestTimeOfDay_Basics.java   | 109 +++++++++++++++++-
 .../joda/time/TestYearMonthDay_Basics.java    | 109 +++++++++++++++++-
 6 files changed, 363 insertions(+), 5 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 7ec8c69ec..aed7911a3 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -31,6 +31,10 @@ None
 
 Enhancements since 1.0
 ----------------------
+- YearMonthDay/TimeOfDay
+  Enabled comparisons using Comparable interface
+  Added compareTo/isEqual/isAfter/isBefore methods
+
 - Period
   Added constructors to create a Period from two ReadablePartials, such as
   YearMonthDay or TimeOfDay
diff --git a/JodaTime/src/java/org/joda/time/TimeOfDay.java b/JodaTime/src/java/org/joda/time/TimeOfDay.java
index 05caf8535..72772d142 100644
--- a/JodaTime/src/java/org/joda/time/TimeOfDay.java
+++ b/JodaTime/src/java/org/joda/time/TimeOfDay.java
@@ -648,6 +648,58 @@ public Property millisOfSecond() {
         return new Property(this, MILLIS_OF_SECOND);
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Is this TimeOfDay later than the specified TimeOfDay.
+     * <p>
+     * You may not pass null into this method. This is because you need
+     * a time zone to accurately determine the current time.
+     *
+     * @param time  a time to check against, null means now
+     * @return true if this time is after the time passed in
+     * @throws IllegalArgumentException if the specified TimeOfDay is null
+     */
+    public boolean isAfter(TimeOfDay time) {
+        if (time == null) {
+            throw new IllegalArgumentException("TimeOfDay cannot be null");
+        }
+        return super.compareTo(time) > 0;
+    }
+
+    /**
+     * Is this TimeOfDay earlier than the specified TimeOfDay.
+     * <p>
+     * You may not pass null into this method. This is because you need
+     * a time zone to accurately determine the current time.
+     *
+     * @param time  a time to check against, null means now
+     * @return true if this time is before the time passed in
+     * @throws IllegalArgumentException if the specified TimeOfDay is null
+     */
+    public boolean isBefore(TimeOfDay time) {
+        if (time == null) {
+            throw new IllegalArgumentException("TimeOfDay cannot be null");
+        }
+        return super.compareTo(time) < 0;
+    }
+
+    /**
+     * Is this TimeOfDay the same as the specified TimeOfDay.
+     * <p>
+     * You may not pass null into this method. This is because you need
+     * a time zone to accurately determine the current time.
+     *
+     * @param time  a time to check against, null means now
+     * @return true if this time is the same as the time passed in
+     * @throws IllegalArgumentException if the specified TimeOfDay is null
+     */
+    public boolean isEqual(TimeOfDay time) {
+        if (time == null) {
+            throw new IllegalArgumentException("TimeOfDay cannot be null");
+        }
+        return super.compareTo(time) == 0;
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Output the time in the ISO8601 format THH:mm:ss.SSS.
diff --git a/JodaTime/src/java/org/joda/time/YearMonthDay.java b/JodaTime/src/java/org/joda/time/YearMonthDay.java
index 072598b27..3f0d6e610 100644
--- a/JodaTime/src/java/org/joda/time/YearMonthDay.java
+++ b/JodaTime/src/java/org/joda/time/YearMonthDay.java
@@ -627,6 +627,58 @@ public Property dayOfMonth() {
         return new Property(this, DAY_OF_MONTH);
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Is this YearMonthDay later than the specified YearMonthDay.
+     * <p>
+     * You may not pass null into this method. This is because you need
+     * a time zone to accurately determine the current date.
+     *
+     * @param date  an date to check against, null means now
+     * @return true if this date is after the date passed in
+     * @throws IllegalArgumentException if the specified YearMonthDay is null
+     */
+    public boolean isAfter(YearMonthDay date) {
+        if (date == null) {
+            throw new IllegalArgumentException("YearMonthDay cannot be null");
+        }
+        return super.compareTo(date) > 0;
+    }
+
+    /**
+     * Is this YearMonthDay earlier than the specified YearMonthDay.
+     * <p>
+     * You may not pass null into this method. This is because you need
+     * a time zone to accurately determine the current date.
+     *
+     * @param date  an date to check against, null means now
+     * @return true if this date is before the date passed in
+     * @throws IllegalArgumentException if the specified YearMonthDay is null
+     */
+    public boolean isBefore(YearMonthDay date) {
+        if (date == null) {
+            throw new IllegalArgumentException("YearMonthDay cannot be null");
+        }
+        return super.compareTo(date) < 0;
+    }
+
+    /**
+     * Is this YearMonthDay the same as the specified YearMonthDay.
+     * <p>
+     * You may not pass null into this method. This is because you need
+     * a time zone to accurately determine the current date.
+     *
+     * @param date  an date to check against, null means now
+     * @return true if this date is the same as the date passed in
+     * @throws IllegalArgumentException if the specified YearMonthDay is null
+     */
+    public boolean isEqual(YearMonthDay date) {
+        if (date == null) {
+            throw new IllegalArgumentException("YearMonthDay cannot be null");
+        }
+        return super.compareTo(date) == 0;
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Output the date in the ISO8601 format YYYY-MM-DD.
diff --git a/JodaTime/src/java/org/joda/time/base/BasePartial.java b/JodaTime/src/java/org/joda/time/base/BasePartial.java
index 53e61e114..2ad680b73 100644
--- a/JodaTime/src/java/org/joda/time/base/BasePartial.java
+++ b/JodaTime/src/java/org/joda/time/base/BasePartial.java
@@ -41,7 +41,7 @@
  */
 public abstract class BasePartial
         extends AbstractPartial
-        implements ReadablePartial, Serializable {
+        implements ReadablePartial, Comparable, Serializable {
 
     /** Serialization version */
     private static final long serialVersionUID = 2353678632973660L;
@@ -244,6 +244,46 @@ protected void setValues(int[] values) {
         iValues = values;
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Compares this ReadablePartial with another returning an integer
+     * indicating the order.
+     * <p>
+     * The specified object must be a ReadablePartial whose field types
+     * match those of this partial. Normally that means that the partials
+     * must be the same class.
+     *
+     * @param partial  an object to check against
+     * @return negative if this is less, zero if equal, positive if greater
+     * @throws ClassCastException if the partial is the wrong class
+     *  or if it has field types that don't match
+     * @throws NullPointerException if the partial is null
+     */
+    public int compareTo(Object partial) {
+        if (this == partial) {
+            return 0;
+        }
+        ReadablePartial other = (ReadablePartial) partial;
+        if (size() != other.size()) {
+            throw new ClassCastException("ReadablePartial objects must have matching field types");
+        }
+        for (int i = 0, isize = size(); i < isize; i++) {
+            if (getFieldType(i) != other.getFieldType(i)) {
+                throw new ClassCastException("ReadablePartial objects must have matching field types");
+            }
+        }
+        // fields are ordered largest first
+        for (int i = 0, isize = size(); i < isize; i++) {
+            if (getValue(i) > other.getValue(i)) {
+                return 1;
+            }
+            if (getValue(i) < other.getValue(i)) {
+                return -1;
+            }
+        }
+        return 0;
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Output the date using the specified format pattern.
diff --git a/JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java b/JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java
index 7aa0212a0..f74eb9a2e 100644
--- a/JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java
@@ -20,13 +20,15 @@
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
 import java.util.Arrays;
+import java.util.Date;
 import java.util.Locale;
 
-import org.joda.time.chrono.BuddhistChronology;
-
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
 
+import org.joda.time.chrono.BuddhistChronology;
+import org.joda.time.chrono.GregorianChronology;
+
 /**
  * This class is a Junit unit test for TimeOfDay.
  *
@@ -240,6 +242,109 @@ public Chronology getChronology() {
         }
     }
 
+    //-----------------------------------------------------------------------
+    public void testCompareTo() {
+        TimeOfDay test1 = new TimeOfDay(10, 20, 30, 40);
+        TimeOfDay test1a = new TimeOfDay(10, 20, 30, 40);
+        assertEquals(0, test1.compareTo(test1a));
+        assertEquals(0, test1a.compareTo(test1));
+        assertEquals(0, test1.compareTo(test1));
+        assertEquals(0, test1a.compareTo(test1a));
+        
+        TimeOfDay test2 = new TimeOfDay(10, 20, 35, 40);
+        assertEquals(-1, test1.compareTo(test2));
+        assertEquals(+1, test2.compareTo(test1));
+        
+        TimeOfDay test3 = new TimeOfDay(10, 20, 35, 40, GregorianChronology.getInstanceUTC());
+        assertEquals(-1, test1.compareTo(test3));
+        assertEquals(+1, test3.compareTo(test1));
+        assertEquals(0, test3.compareTo(test2));
+        
+        assertEquals(+1, test2.compareTo(new MockInstant()));
+        assertEquals(0, test1.compareTo(new MockInstant()));
+        
+        try {
+            test1.compareTo(null);
+            fail();
+        } catch (NullPointerException ex) {}
+        try {
+            test1.compareTo(new Date());
+            fail();
+        } catch (ClassCastException ex) {}
+    }
+    
+    //-----------------------------------------------------------------------
+    public void testIsEqual_TOD() {
+        TimeOfDay test1 = new TimeOfDay(10, 20, 30, 40);
+        TimeOfDay test1a = new TimeOfDay(10, 20, 30, 40);
+        assertEquals(true, test1.isEqual(test1a));
+        assertEquals(true, test1a.isEqual(test1));
+        assertEquals(true, test1.isEqual(test1));
+        assertEquals(true, test1a.isEqual(test1a));
+        
+        TimeOfDay test2 = new TimeOfDay(10, 20, 35, 40);
+        assertEquals(false, test1.isEqual(test2));
+        assertEquals(false, test2.isEqual(test1));
+        
+        TimeOfDay test3 = new TimeOfDay(10, 20, 35, 40, GregorianChronology.getInstanceUTC());
+        assertEquals(false, test1.isEqual(test3));
+        assertEquals(false, test3.isEqual(test1));
+        assertEquals(true, test3.isEqual(test2));
+        
+        try {
+            new TimeOfDay(10, 20, 35, 40).isEqual(null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+    
+    //-----------------------------------------------------------------------
+    public void testIsBefore_TOD() {
+        TimeOfDay test1 = new TimeOfDay(10, 20, 30, 40);
+        TimeOfDay test1a = new TimeOfDay(10, 20, 30, 40);
+        assertEquals(false, test1.isBefore(test1a));
+        assertEquals(false, test1a.isBefore(test1));
+        assertEquals(false, test1.isBefore(test1));
+        assertEquals(false, test1a.isBefore(test1a));
+        
+        TimeOfDay test2 = new TimeOfDay(10, 20, 35, 40);
+        assertEquals(true, test1.isBefore(test2));
+        assertEquals(false, test2.isBefore(test1));
+        
+        TimeOfDay test3 = new TimeOfDay(10, 20, 35, 40, GregorianChronology.getInstanceUTC());
+        assertEquals(true, test1.isBefore(test3));
+        assertEquals(false, test3.isBefore(test1));
+        assertEquals(false, test3.isBefore(test2));
+        
+        try {
+            new TimeOfDay(10, 20, 35, 40).isBefore(null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+    
+    //-----------------------------------------------------------------------
+    public void testIsAfter_TOD() {
+        TimeOfDay test1 = new TimeOfDay(10, 20, 30, 40);
+        TimeOfDay test1a = new TimeOfDay(10, 20, 30, 40);
+        assertEquals(false, test1.isAfter(test1a));
+        assertEquals(false, test1a.isAfter(test1));
+        assertEquals(false, test1.isAfter(test1));
+        assertEquals(false, test1a.isAfter(test1a));
+        
+        TimeOfDay test2 = new TimeOfDay(10, 20, 35, 40);
+        assertEquals(false, test1.isAfter(test2));
+        assertEquals(true, test2.isAfter(test1));
+        
+        TimeOfDay test3 = new TimeOfDay(10, 20, 35, 40, GregorianChronology.getInstanceUTC());
+        assertEquals(false, test1.isAfter(test3));
+        assertEquals(true, test3.isAfter(test1));
+        assertEquals(false, test3.isAfter(test2));
+        
+        try {
+            new TimeOfDay(10, 20, 35, 40).isAfter(null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+    
     //-----------------------------------------------------------------------
     public void testWithChronologyRetainFields_Chrono() {
         TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS);
diff --git a/JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java b/JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java
index 327a3f3c3..a53bf59f0 100644
--- a/JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java
@@ -20,13 +20,15 @@
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
 import java.util.Arrays;
+import java.util.Date;
 import java.util.Locale;
 
-import org.joda.time.chrono.BuddhistChronology;
-
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
 
+import org.joda.time.chrono.BuddhistChronology;
+import org.joda.time.chrono.GregorianChronology;
+
 /**
  * This class is a Junit unit test for YearMonthDay.
  *
@@ -225,6 +227,109 @@ public Chronology getChronology() {
         }
     }
 
+    //-----------------------------------------------------------------------
+    public void testCompareTo() {
+        YearMonthDay test1 = new YearMonthDay(2005, 6, 2);
+        YearMonthDay test1a = new YearMonthDay(2005, 6, 2);
+        assertEquals(0, test1.compareTo(test1a));
+        assertEquals(0, test1a.compareTo(test1));
+        assertEquals(0, test1.compareTo(test1));
+        assertEquals(0, test1a.compareTo(test1a));
+        
+        YearMonthDay test2 = new YearMonthDay(2005, 7, 2);
+        assertEquals(-1, test1.compareTo(test2));
+        assertEquals(+1, test2.compareTo(test1));
+        
+        YearMonthDay test3 = new YearMonthDay(2005, 7, 2, GregorianChronology.getInstanceUTC());
+        assertEquals(-1, test1.compareTo(test3));
+        assertEquals(+1, test3.compareTo(test1));
+        assertEquals(0, test3.compareTo(test2));
+        
+        assertEquals(+1, test2.compareTo(new MockInstant()));
+        assertEquals(0, new YearMonthDay(1970, 6, 9).compareTo(new MockInstant()));
+        
+        try {
+            test1.compareTo(null);
+            fail();
+        } catch (NullPointerException ex) {}
+        try {
+            test1.compareTo(new Date());
+            fail();
+        } catch (ClassCastException ex) {}
+    }
+    
+    //-----------------------------------------------------------------------
+    public void testIsEqual_YMD() {
+        YearMonthDay test1 = new YearMonthDay(2005, 6, 2);
+        YearMonthDay test1a = new YearMonthDay(2005, 6, 2);
+        assertEquals(true, test1.isEqual(test1a));
+        assertEquals(true, test1a.isEqual(test1));
+        assertEquals(true, test1.isEqual(test1));
+        assertEquals(true, test1a.isEqual(test1a));
+        
+        YearMonthDay test2 = new YearMonthDay(2005, 7, 2);
+        assertEquals(false, test1.isEqual(test2));
+        assertEquals(false, test2.isEqual(test1));
+        
+        YearMonthDay test3 = new YearMonthDay(2005, 7, 2, GregorianChronology.getInstanceUTC());
+        assertEquals(false, test1.isEqual(test3));
+        assertEquals(false, test3.isEqual(test1));
+        assertEquals(true, test3.isEqual(test2));
+        
+        try {
+            new YearMonthDay(2005, 7, 2).isEqual(null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+    
+    //-----------------------------------------------------------------------
+    public void testIsBefore_YMD() {
+        YearMonthDay test1 = new YearMonthDay(2005, 6, 2);
+        YearMonthDay test1a = new YearMonthDay(2005, 6, 2);
+        assertEquals(false, test1.isBefore(test1a));
+        assertEquals(false, test1a.isBefore(test1));
+        assertEquals(false, test1.isBefore(test1));
+        assertEquals(false, test1a.isBefore(test1a));
+        
+        YearMonthDay test2 = new YearMonthDay(2005, 7, 2);
+        assertEquals(true, test1.isBefore(test2));
+        assertEquals(false, test2.isBefore(test1));
+        
+        YearMonthDay test3 = new YearMonthDay(2005, 7, 2, GregorianChronology.getInstanceUTC());
+        assertEquals(true, test1.isBefore(test3));
+        assertEquals(false, test3.isBefore(test1));
+        assertEquals(false, test3.isBefore(test2));
+        
+        try {
+            new YearMonthDay(2005, 7, 2).isBefore(null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+    
+    //-----------------------------------------------------------------------
+    public void testIsAfter_YMD() {
+        YearMonthDay test1 = new YearMonthDay(2005, 6, 2);
+        YearMonthDay test1a = new YearMonthDay(2005, 6, 2);
+        assertEquals(false, test1.isAfter(test1a));
+        assertEquals(false, test1a.isAfter(test1));
+        assertEquals(false, test1.isAfter(test1));
+        assertEquals(false, test1a.isAfter(test1a));
+        
+        YearMonthDay test2 = new YearMonthDay(2005, 7, 2);
+        assertEquals(false, test1.isAfter(test2));
+        assertEquals(true, test2.isAfter(test1));
+        
+        YearMonthDay test3 = new YearMonthDay(2005, 7, 2, GregorianChronology.getInstanceUTC());
+        assertEquals(false, test1.isAfter(test3));
+        assertEquals(true, test3.isAfter(test1));
+        assertEquals(false, test3.isAfter(test2));
+        
+        try {
+            new YearMonthDay(2005, 7, 2).isAfter(null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+    
     //-----------------------------------------------------------------------
     public void testWithChronologyRetainFields_Chrono() {
         YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS);

From ea0057c0bea0c69644511ec24c385d44daf6eac8 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 17 Apr 2005 10:15:56 +0000
Subject: [PATCH 017/124] Add time zone constructor to obtain accurate current
 time

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@749 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  4 +
 .../src/java/org/joda/time/TimeOfDay.java     | 15 ++++
 .../src/java/org/joda/time/YearMonthDay.java  | 19 ++++-
 .../joda/time/TestTimeOfDay_Constructors.java | 78 ++++++++++++++-----
 .../time/TestYearMonthDay_Constructors.java   | 38 ++++++++-
 5 files changed, 132 insertions(+), 22 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index aed7911a3..294696de5 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -34,6 +34,10 @@ Enhancements since 1.0
 - YearMonthDay/TimeOfDay
   Enabled comparisons using Comparable interface
   Added compareTo/isEqual/isAfter/isBefore methods
+  
+- YearMonthDay/TimeOfDay
+  Extra time zone constructor
+  Allows current date and time to be accurately obtained
 
 - Period
   Added constructors to create a Period from two ReadablePartials, such as
diff --git a/JodaTime/src/java/org/joda/time/TimeOfDay.java b/JodaTime/src/java/org/joda/time/TimeOfDay.java
index 72772d142..7f22c4d97 100644
--- a/JodaTime/src/java/org/joda/time/TimeOfDay.java
+++ b/JodaTime/src/java/org/joda/time/TimeOfDay.java
@@ -127,6 +127,21 @@ public TimeOfDay() {
         super();
     }
 
+    /**
+     * Constructs a TimeOfDay with the current time, using ISOChronology in
+     * the specified zone to extract the fields.
+     * <p>
+     * The constructor uses the specified time zone to obtain the current time.
+     * Once the constructor is complete, all further calculations
+     * are performed without reference to a timezone (by switching to UTC).
+     * 
+     * @param zone  the zone to use, null means default zone
+     * @since 1.1
+     */
+    public TimeOfDay(DateTimeZone zone) {
+        super(Chronology.getISO(zone));
+    }
+
     /**
      * Constructs a TimeOfDay with the current time, using the specified chronology
      * and zone to extract the fields.
diff --git a/JodaTime/src/java/org/joda/time/YearMonthDay.java b/JodaTime/src/java/org/joda/time/YearMonthDay.java
index 3f0d6e610..693e693d7 100644
--- a/JodaTime/src/java/org/joda/time/YearMonthDay.java
+++ b/JodaTime/src/java/org/joda/time/YearMonthDay.java
@@ -75,7 +75,7 @@
     // Constructors
     //-----------------------------------------------------------------------
     /**
-     * Constructs a YearMonthDay with the current time, using ISOChronology in
+     * Constructs a YearMonthDay with the current date, using ISOChronology in
      * the default zone to extract the fields.
      * <p>
      * The constructor uses the default time zone, resulting in the local time
@@ -87,7 +87,22 @@ public YearMonthDay() {
     }
 
     /**
-     * Constructs a YearMonthDay with the current time, using the specified chronology
+     * Constructs a YearMonthDay with the current date, using ISOChronology in
+     * the specified zone to extract the fields.
+     * <p>
+     * The constructor uses the specified time zone to obtain the current date.
+     * Once the constructor is complete, all further calculations
+     * are performed without reference to a timezone (by switching to UTC).
+     * 
+     * @param zone  the zone to use, null means default zone
+     * @since 1.1
+     */
+    public YearMonthDay(DateTimeZone zone) {
+        super(Chronology.getISO(zone));
+    }
+
+    /**
+     * Constructs a YearMonthDay with the current date, using the specified chronology
      * and zone to extract the fields.
      * <p>
      * The constructor uses the time zone of the chronology specified.
diff --git a/JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java b/JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java
index 86225de2e..a763ac090 100644
--- a/JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java
+++ b/JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java
@@ -32,6 +32,7 @@
 
     private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
     private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
+    private static final ISOChronology ISO_UTC = ISOChronology.getInstanceUTC();
     private static final int OFFSET = 1;
     
     private long TEST_TIME_NOW =
@@ -85,7 +86,7 @@ protected void tearDown() throws Exception {
      */
     public void testConstantMidnight() throws Throwable {
         TimeOfDay test = TimeOfDay.MIDNIGHT;
-        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());
+        assertEquals(ISO_UTC, test.getChronology());
         assertEquals(0, test.getHourOfDay());
         assertEquals(0, test.getMinuteOfHour());
         assertEquals(0, test.getSecondOfMinute());
@@ -98,7 +99,7 @@ public void testConstantMidnight() throws Throwable {
      */
     public void testFactoryMillisOfDay_long1() throws Throwable {
         TimeOfDay test = TimeOfDay.fromMillisOfDay(TEST_TIME1);
-        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());
+        assertEquals(ISO_UTC, test.getChronology());
         assertEquals(1, test.getHourOfDay());
         assertEquals(2, test.getMinuteOfHour());
         assertEquals(3, test.getSecondOfMinute());
@@ -122,7 +123,7 @@ public void testFactoryMillisOfDay_long1_Chronology() throws Throwable {
      */
     public void testFactoryMillisOfDay_long_nullChronology() throws Throwable {
         TimeOfDay test = TimeOfDay.fromMillisOfDay(TEST_TIME1, null);
-        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());
+        assertEquals(ISO_UTC, test.getChronology());
         assertEquals(1, test.getHourOfDay());
         assertEquals(2, test.getMinuteOfHour());
         assertEquals(3, test.getSecondOfMinute());
@@ -135,13 +136,52 @@ public void testFactoryMillisOfDay_long_nullChronology() throws Throwable {
      */
     public void testConstructor() throws Throwable {
         TimeOfDay test = new TimeOfDay();
-        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());
+        assertEquals(ISO_UTC, test.getChronology());
         assertEquals(10 + OFFSET, test.getHourOfDay());
         assertEquals(20, test.getMinuteOfHour());
         assertEquals(30, test.getSecondOfMinute());
         assertEquals(40, test.getMillisOfSecond());
     }
 
+    /**
+     * Test constructor (DateTimeZone)
+     */
+    public void testConstructor_DateTimeZone() throws Throwable {
+        DateTime dt = new DateTime(2005, 6, 8, 23, 59, 30, 40, LONDON);
+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());
+        // 23:59 in London is 00:59 the following day in Paris
+        
+        TimeOfDay test = new TimeOfDay(LONDON);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(23, test.getHourOfDay());
+        assertEquals(59, test.getMinuteOfHour());
+        assertEquals(30, test.getSecondOfMinute());
+        assertEquals(40, test.getMillisOfSecond());
+        
+        test = new TimeOfDay(PARIS);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(0, test.getHourOfDay());
+        assertEquals(59, test.getMinuteOfHour());
+        assertEquals(30, test.getSecondOfMinute());
+        assertEquals(40, test.getMillisOfSecond());
+    }
+
+    /**
+     * Test constructor (DateTimeZone=null)
+     */
+    public void testConstructor_nullDateTimeZone() throws Throwable {
+        DateTime dt = new DateTime(2005, 6, 8, 23, 59, 30, 40, LONDON);
+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());
+        // 23:59 in London is 00:59 the following day in Paris
+        
+        TimeOfDay test = new TimeOfDay((DateTimeZone) null);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(23, test.getHourOfDay());
+        assertEquals(59, test.getMinuteOfHour());
+        assertEquals(30, test.getSecondOfMinute());
+        assertEquals(40, test.getMillisOfSecond());
+    }
+
     /**
      * Test constructor (Chronology)
      */
@@ -159,7 +199,7 @@ public void testConstructor_Chronology() throws Throwable {
      */
     public void testConstructor_nullChronology() throws Throwable {
         TimeOfDay test = new TimeOfDay((Chronology) null);
-        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());
+        assertEquals(ISO_UTC, test.getChronology());
         assertEquals(10 + OFFSET, test.getHourOfDay());
         assertEquals(20, test.getMinuteOfHour());
         assertEquals(30, test.getSecondOfMinute());
@@ -172,7 +212,7 @@ public void testConstructor_nullChronology() throws Throwable {
      */
     public void testConstructor_long1() throws Throwable {
         TimeOfDay test = new TimeOfDay(TEST_TIME1);
-        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());
+        assertEquals(ISO_UTC, test.getChronology());
         assertEquals(1 + OFFSET, test.getHourOfDay());
         assertEquals(2, test.getMinuteOfHour());
         assertEquals(3, test.getSecondOfMinute());
@@ -184,7 +224,7 @@ public void testConstructor_long1() throws Throwable {
      */
     public void testConstructor_long2() throws Throwable {
         TimeOfDay test = new TimeOfDay(TEST_TIME2);
-        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());
+        assertEquals(ISO_UTC, test.getChronology());
         assertEquals(5 + OFFSET, test.getHourOfDay());
         assertEquals(6, test.getMinuteOfHour());
         assertEquals(7, test.getSecondOfMinute());
@@ -220,7 +260,7 @@ public void testConstructor_long2_Chronology() throws Throwable {
      */
     public void testConstructor_long_nullChronology() throws Throwable {
         TimeOfDay test = new TimeOfDay(TEST_TIME1, null);
-        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());
+        assertEquals(ISO_UTC, test.getChronology());
         assertEquals(1 + OFFSET, test.getHourOfDay());
         assertEquals(2, test.getMinuteOfHour());
         assertEquals(3, test.getSecondOfMinute());
@@ -234,7 +274,7 @@ public void testConstructor_long_nullChronology() throws Throwable {
     public void testConstructor_Object() throws Throwable {
         Date date = new Date(TEST_TIME1);
         TimeOfDay test = new TimeOfDay(date);
-        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());
+        assertEquals(ISO_UTC, test.getChronology());
         assertEquals(1 + OFFSET, test.getHourOfDay());
         assertEquals(2, test.getMinuteOfHour());
         assertEquals(3, test.getSecondOfMinute());
@@ -245,8 +285,8 @@ public void testConstructor_Object() throws Throwable {
      * Test constructor (Object=null)
      */
     public void testConstructor_nullObject() throws Throwable {
-        TimeOfDay test = new TimeOfDay(null);
-        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());
+        TimeOfDay test = new TimeOfDay((Object) null);
+        assertEquals(ISO_UTC, test.getChronology());
         assertEquals(10 + OFFSET, test.getHourOfDay());
         assertEquals(20, test.getMinuteOfHour());
         assertEquals(30, test.getSecondOfMinute());
@@ -298,7 +338,7 @@ public void testConstructor_nullObject_Chronology() throws Throwable {
     public void testConstructor_Object_nullChronology() throws Throwable {
         Date date = new Date(TEST_TIME1);
         TimeOfDay test = new TimeOfDay(date, null);
-        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());
+        assertEquals(ISO_UTC, test.getChronology());
         assertEquals(1 + OFFSET, test.getHourOfDay());
         assertEquals(2, test.getMinuteOfHour());
         assertEquals(3, test.getSecondOfMinute());
@@ -310,7 +350,7 @@ public void testConstructor_Object_nullChronology() throws Throwable {
      */
     public void testConstructor_nullObject_nullChronology() throws Throwable {
         TimeOfDay test = new TimeOfDay((Object) null, null);
-        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());
+        assertEquals(ISO_UTC, test.getChronology());
         assertEquals(10 + OFFSET, test.getHourOfDay());
         assertEquals(20, test.getMinuteOfHour());
         assertEquals(30, test.getSecondOfMinute());
@@ -323,7 +363,7 @@ public void testConstructor_nullObject_nullChronology() throws Throwable {
      */
     public void testConstructor_int_int() throws Throwable {
         TimeOfDay test = new TimeOfDay(10, 20);
-        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());
+        assertEquals(ISO_UTC, test.getChronology());
         assertEquals(10, test.getHourOfDay());
         assertEquals(20, test.getMinuteOfHour());
         assertEquals(0, test.getSecondOfMinute());
@@ -379,7 +419,7 @@ public void testConstructor_int_int_Chronology() throws Throwable {
      */
     public void testConstructor_int_int_nullChronology() throws Throwable {
         TimeOfDay test = new TimeOfDay(10, 20, null);
-        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());
+        assertEquals(ISO_UTC, test.getChronology());
         assertEquals(10, test.getHourOfDay());
         assertEquals(20, test.getMinuteOfHour());
         assertEquals(0, test.getSecondOfMinute());
@@ -391,7 +431,7 @@ public void testConstructor_int_int_nullChronology() throws Throwable {
      */
     public void testConstructor_int_int_int() throws Throwable {
         TimeOfDay test = new TimeOfDay(10, 20, 30);
-        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());
+        assertEquals(ISO_UTC, test.getChronology());
         assertEquals(10, test.getHourOfDay());
         assertEquals(20, test.getMinuteOfHour());
         assertEquals(30, test.getSecondOfMinute());
@@ -463,7 +503,7 @@ public void testConstructor_int_int_int_Chronology() throws Throwable {
      */
     public void testConstructor_int_int_int_nullChronology() throws Throwable {
         TimeOfDay test = new TimeOfDay(10, 20, 30, null);
-        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());
+        assertEquals(ISO_UTC, test.getChronology());
         assertEquals(10, test.getHourOfDay());
         assertEquals(20, test.getMinuteOfHour());
         assertEquals(30, test.getSecondOfMinute());
@@ -475,7 +515,7 @@ public void testConstructor_int_int_int_nullChronology() throws Throwable {
      */
     public void testConstructor_int_int_int_int() throws Throwable {
         TimeOfDay test = new TimeOfDay(10, 20, 30, 40);
-        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());
+        assertEquals(ISO_UTC, test.getChronology());
         assertEquals(10, test.getHourOfDay());
         assertEquals(20, test.getMinuteOfHour());
         assertEquals(30, test.getSecondOfMinute());
@@ -563,7 +603,7 @@ public void testConstructor_int_int_int_int_Chronology() throws Throwable {
      */
     public void testConstructor_int_int_int_int_nullChronology() throws Throwable {
         TimeOfDay test = new TimeOfDay(10, 20, 30, 40, null);
-        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());
+        assertEquals(ISO_UTC, test.getChronology());
         assertEquals(10, test.getHourOfDay());
         assertEquals(20, test.getMinuteOfHour());
         assertEquals(30, test.getSecondOfMinute());
diff --git a/JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java b/JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java
index 535ffc945..22cf5c34e 100644
--- a/JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java
+++ b/JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java
@@ -86,6 +86,42 @@ public void testConstructor() throws Throwable {
         assertEquals(9, test.getDayOfMonth());
     }
 
+    /**
+     * Test constructor (DateTimeZone)
+     */
+    public void testConstructor_DateTimeZone() throws Throwable {
+        DateTime dt = new DateTime(2005, 6, 8, 23, 59, 0, 0, LONDON);
+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());
+        // 23:59 in London is 00:59 the following day in Paris
+        
+        YearMonthDay test = new YearMonthDay(LONDON);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(2005, test.getYear());
+        assertEquals(6, test.getMonthOfYear());
+        assertEquals(8, test.getDayOfMonth());
+        
+        test = new YearMonthDay(PARIS);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(2005, test.getYear());
+        assertEquals(6, test.getMonthOfYear());
+        assertEquals(9, test.getDayOfMonth());
+    }
+
+    /**
+     * Test constructor (DateTimeZone=null)
+     */
+    public void testConstructor_nullDateTimeZone() throws Throwable {
+        DateTime dt = new DateTime(2005, 6, 8, 23, 59, 0, 0, LONDON);
+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());
+        // 23:59 in London is 00:59 the following day in Paris
+        
+        YearMonthDay test = new YearMonthDay((DateTimeZone) null);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(2005, test.getYear());
+        assertEquals(6, test.getMonthOfYear());
+        assertEquals(8, test.getDayOfMonth());
+    }
+
     /**
      * Test constructor (Chronology)
      */
@@ -181,7 +217,7 @@ public void testConstructor_Object() throws Throwable {
      * Test constructor (Object=null)
      */
     public void testConstructor_nullObject() throws Throwable {
-        YearMonthDay test = new YearMonthDay(null);
+        YearMonthDay test = new YearMonthDay((Object) null);
         assertEquals(ISO_UTC, test.getChronology());
         assertEquals(1970, test.getYear());
         assertEquals(6, test.getMonthOfYear());

From 66a8d06f1a039de49b9ca5ebaebcf3459e83a642 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Sun, 17 Apr 2005 17:27:27 +0000
Subject: [PATCH 018/124] Bug fix for parsing two digit year pattern with more
 or less than two digits.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@750 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |   9 +-
 .../org/joda/time/format/DateTimeFormat.java  |   4 +-
 .../time/format/DateTimeFormatterBuilder.java | 129 +++++++++--
 .../joda/time/format/TestDateTimeFormat.java  | 207 +++++++++++++++++-
 4 files changed, 327 insertions(+), 22 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 294696de5..8d48a9951 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -26,8 +26,10 @@ None
 
 Bug fixes since 1.0
 -------------------
-None
-
+- DateTimeFormat
+  Parsing of two digit year by DateTimeFormat supports parsing of more or less
+  than two digits, for compatibility with java.text.SimpleDateFormat. If not
+  two digits or if sign character is present, then year is parsed as absolute.
 
 Enhancements since 1.0
 ----------------------
@@ -51,6 +53,9 @@ Enhancements since 1.0
   Method withPivotYear added to allow the two digit pivot year to be controlled.
   This is most useful after creating a format from a string pattern.
 
+- DateTimeFormatter
+  Added lenient parse option to appendTwoDigitYear and appendTwoDigitWeekyear.
+
 - DateTimeZone classes updated to latest data from the Olsen time zone database
 
 
diff --git a/JodaTime/src/java/org/joda/time/format/DateTimeFormat.java b/JodaTime/src/java/org/joda/time/format/DateTimeFormat.java
index 2d70714c4..6f48f466a 100644
--- a/JodaTime/src/java/org/joda/time/format/DateTimeFormat.java
+++ b/JodaTime/src/java/org/joda/time/format/DateTimeFormat.java
@@ -398,12 +398,12 @@ private static void parsePatternTo(DateTimeFormatterBuilder builder, String patt
                     DateTimeFieldType type;
                     switch (c) {
                     case 'x':
-                        builder.appendTwoDigitWeekyear(new DateTime().getWeekyear() - 30);
+                        builder.appendTwoDigitWeekyear(new DateTime().getWeekyear() - 30, true);
                         break;
                     case 'y':
                     case 'Y':
                     default:
-                        builder.appendTwoDigitYear(new DateTime().getYear() - 30);
+                        builder.appendTwoDigitYear(new DateTime().getYear() - 30, true);
                         break;
                     }
                 } else {
diff --git a/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java b/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java
index 825f4db1f..652523bbc 100644
--- a/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java
+++ b/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java
@@ -718,7 +718,24 @@ public DateTimeFormatterBuilder appendYear(int minDigits, int maxDigits) {
      * @return this DateTimeFormatterBuilder
      */
     public DateTimeFormatterBuilder appendTwoDigitYear(int pivot) {
-        return append0(new TwoDigitYear(DateTimeFieldType.year(), pivot));
+        return appendTwoDigitYear(pivot, false);
+    }
+
+    /**
+     * Instructs the printer to emit a numeric year field which always prints
+     * two digits. A pivot year is used during parsing to determine the range
+     * of supported years as <code>(pivot - 50) .. (pivot + 49)</code>. If
+     * parse is instructed to be lenient and the digit count is not two, it is
+     * treated as an absolute year. With lenient parsing, specifying a positive
+     * or negative sign before the year also makes it absolute.
+     *
+     * @param pivot  pivot year to use when parsing
+     * @param lenientParse  when true, if digit count is not two, it is treated
+     * as an absolute year
+     * @return this DateTimeFormatterBuilder
+     */
+    public DateTimeFormatterBuilder appendTwoDigitYear(int pivot, boolean lenientParse) {
+        return append0(new TwoDigitYear(DateTimeFieldType.year(), pivot, lenientParse));
     }
 
     /**
@@ -740,7 +757,24 @@ public DateTimeFormatterBuilder appendTwoDigitYear(int pivot) {
      * @return this DateTimeFormatterBuilder
      */
     public DateTimeFormatterBuilder appendTwoDigitWeekyear(int pivot) {
-        return append0(new TwoDigitYear(DateTimeFieldType.weekyear(), pivot));
+        return appendTwoDigitWeekyear(pivot, false);
+    }
+
+    /**
+     * Instructs the printer to emit a numeric weekyear field which always prints
+     * two digits. A pivot year is used during parsing to determine the range
+     * of supported years as <code>(pivot - 50) .. (pivot + 49)</code>. If
+     * parse is instructed to be lenient and the digit count is not two, it is
+     * treated as an absolute weekyear. With lenient parsing, specifying a positive
+     * or negative sign before the weekyear also makes it absolute.
+     *
+     * @param pivot  pivot weekyear to use when parsing
+     * @param lenientParse  when true, if digit count is not two, it is treated
+     * as an absolute weekyear
+     * @return this DateTimeFormatterBuilder
+     */
+    public DateTimeFormatterBuilder appendTwoDigitWeekyear(int pivot, boolean lenientParse) {
+        return append0(new TwoDigitYear(DateTimeFieldType.weekyear(), pivot, lenientParse));
     }
 
     /**
@@ -1141,14 +1175,17 @@ public int parseInto(DateTimeParserBucket bucket, String text, int position) {
             if (length >= 9) {
                 // Since value may exceed integer limits, use stock parser
                 // which checks for this.
-                value = Integer.parseInt
-                    (text.substring(position, position += length));
+                value = Integer.parseInt(text.substring(position, position += length));
             } else {
                 int i = position;
                 if (negative) {
                     i++;
                 }
-                value = text.charAt(i++) - '0';
+                try {
+                    value = text.charAt(i++) - '0';
+                } catch (StringIndexOutOfBoundsException e) {
+                    return ~position;
+                }
                 position += length;
                 while (i < position) {
                     value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';
@@ -1294,27 +1331,83 @@ public void printTo(Writer out, ReadablePartial partial, Locale locale) throws I
         private final DateTimeFieldType iType;
         /** The pivot year. */
         private final int iPivot;
+        private final boolean iLenientParse;
 
-        TwoDigitYear(DateTimeFieldType type, int pivot) {
+        TwoDigitYear(DateTimeFieldType type, int pivot, boolean lenientParse) {
             super();
             iType = type;
             iPivot = pivot;
+            iLenientParse = lenientParse;
         }
 
         public int estimateParsedLength() {
-            return 2;
+            return iLenientParse ? 4 : 2;
         }
 
         public int parseInto(DateTimeParserBucket bucket, String text, int position) {
-            int pivot = iPivot;
-            // If the bucket pivot year is non-null, use that when parsing
-            if (bucket.getPivotYear() != null) {
-                pivot = bucket.getPivotYear().intValue();
-            }
+            int limit = text.length() - position;
 
-            int limit = Math.min(2, text.length() - position);
-            if (limit < 2) {
-                return ~position;
+            if (!iLenientParse) {
+                limit = Math.min(2, limit);
+                if (limit < 2) {
+                    return ~position;
+                }
+            } else {
+                boolean hasSignChar = false;
+                boolean negative = false;
+                int length = 0;
+                while (length < limit) {
+                    char c = text.charAt(position + length);
+                    if (length == 0 && (c == '-' || c == '+')) {
+                        hasSignChar = true;
+                        negative = c == '-';
+                        if (negative) {
+                            length++;
+                        } else {
+                            // Skip the '+' for parseInt to succeed.
+                            position++;
+                            limit--;
+                        }
+                        continue;
+                    }
+                    if (c < '0' || c > '9') {
+                        break;
+                    }
+                    length++;
+                }
+                
+                if (length == 0) {
+                    return ~position;
+                }
+
+                if (hasSignChar || length != 2) {
+                    int value;
+                    if (length >= 9) {
+                        // Since value may exceed integer limits, use stock
+                        // parser which checks for this.
+                        value = Integer.parseInt(text.substring(position, position += length));
+                    } else {
+                        int i = position;
+                        if (negative) {
+                            i++;
+                        }
+                        try {
+                            value = text.charAt(i++) - '0';
+                        } catch (StringIndexOutOfBoundsException e) {
+                            return ~position;
+                        }
+                        position += length;
+                        while (i < position) {
+                            value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';
+                        }
+                        if (negative) {
+                            value = -value;
+                        }
+                    }
+                    
+                    bucket.saveField(iType, value);
+                    return position;
+                }
             }
 
             int year;
@@ -1329,6 +1422,12 @@ public int parseInto(DateTimeParserBucket bucket, String text, int position) {
             }
             year = ((year << 3) + (year << 1)) + c - '0';
 
+            int pivot = iPivot;
+            // If the bucket pivot year is non-null, use that when parsing
+            if (bucket.getPivotYear() != null) {
+                pivot = bucket.getPivotYear().intValue();
+            }
+
             int low = pivot - 50;
 
             int t;
diff --git a/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java b/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java
index f7dc68123..d25a6e8a1 100644
--- a/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java
+++ b/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java
@@ -149,7 +149,18 @@ public void testFormat_yearOfEra_twoDigit() {
         expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC);
         assertEquals(expect, f.parseDateTime("21"));
 
-        /* Added tests for pivot year setting */
+        // Added tests to ensure single sign digit parse fails properly
+        try {
+            f.parseDateTime("-");
+            fail();
+        } catch (IllegalArgumentException e) { }
+
+        try {
+            f.parseDateTime("+");
+            fail();
+        } catch (IllegalArgumentException e) { }
+
+        // Added tests for pivot year setting
         f = f.withPivotYear(new Integer(2050));
         expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC);
         assertEquals(expect, f.parseDateTime("00"));
@@ -157,6 +168,13 @@ public void testFormat_yearOfEra_twoDigit() {
         expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC);
         assertEquals(expect, f.parseDateTime("99"));
 
+        // Added tests to ensure two digit parsing is lenient for DateTimeFormat
+        f = DateTimeFormat.forPattern("YY").withLocale(Locale.UK);
+        f = f.withZone(UTC);
+        f.parseDateTime("5");
+        f.parseDateTime("005");
+        f.parseDateTime("+50");
+        f.parseDateTime("-50");
     }
 
     //-----------------------------------------------------------------------
@@ -173,6 +191,17 @@ public void testFormat_year() {
         
         dt = new DateTime(-123, 6, 9, 10, 20, 30, 40, UTC);
         assertEquals(dt.toString(), "-123", f.print(dt));
+
+        // Added tests to ensure single sign digit parse fails properly
+        try {
+            f.parseDateTime("-");
+            fail();
+        } catch (IllegalArgumentException e) { }
+
+        try {
+            f.parseDateTime("+");
+            fail();
+        } catch (IllegalArgumentException e) { }
     }
 
     public void testFormat_year_twoDigit() {
@@ -195,13 +224,99 @@ public void testFormat_year_twoDigit() {
         expect = new DateTime(2021, 1, 1, 0, 0, 0, 0, UTC);
         assertEquals(expect, f.parseDateTime("21"));
 
-        /* Added tests for pivot year setting */
+        // Added tests to ensure single sign digit parse fails properly
+        try {
+            f.parseDateTime("-");
+            fail();
+        } catch (IllegalArgumentException e) { }
+
+        try {
+            f.parseDateTime("+");
+            fail();
+        } catch (IllegalArgumentException e) { }
+
+        // Added tests for pivot year setting
         f = f.withPivotYear(new Integer(2050));
         expect = new DateTime(2000, 1, 1, 0, 0, 0, 0, UTC);
         assertEquals(expect, f.parseDateTime("00"));
 
         expect = new DateTime(2099, 1, 1, 0, 0, 0, 0, UTC);
         assertEquals(expect, f.parseDateTime("99"));
+
+        // Added tests to ensure two digit parsing is strict by default for
+        // DateTimeFormatterBuilder
+        f = new DateTimeFormatterBuilder().appendTwoDigitYear(2000).toFormatter();
+        f = f.withZone(UTC);
+        try {
+            f.parseDateTime("5");
+            fail();
+        } catch (IllegalArgumentException e) { }
+        try {
+            f.parseDateTime("005");
+            fail();
+        } catch (IllegalArgumentException e) { }
+        try {
+            f.parseDateTime("+50");
+            fail();
+        } catch (IllegalArgumentException e) { }
+        try {
+            f.parseDateTime("-50");
+            fail();
+        } catch (IllegalArgumentException e) { }
+
+        // Added tests to ensure two digit parsing is lenient for DateTimeFormat
+        f = DateTimeFormat.forPattern("yy").withLocale(Locale.UK);
+        f = f.withZone(UTC);
+        f.parseDateTime("5");
+        f.parseDateTime("005");
+        f.parseDateTime("+50");
+        f.parseDateTime("-50");
+
+        // Added tests for lenient two digit parsing
+        f = new DateTimeFormatterBuilder().appendTwoDigitYear(2000, true).toFormatter();
+        f = f.withZone(UTC);
+        expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC);
+        assertEquals(expect, f.parseDateTime("04"));
+
+        expect = new DateTime(4, 1, 1, 0, 0, 0, 0, UTC);
+        assertEquals(expect, f.parseDateTime("+04"));
+
+        expect = new DateTime(-4, 1, 1, 0, 0, 0, 0, UTC);
+        assertEquals(expect, f.parseDateTime("-04"));
+
+        expect = new DateTime(4, 1, 1, 0, 0, 0, 0, UTC);
+        assertEquals(expect, f.parseDateTime("4"));
+
+        expect = new DateTime(-4, 1, 1, 0, 0, 0, 0, UTC);
+        assertEquals(expect, f.parseDateTime("-4"));
+
+        expect = new DateTime(4, 1, 1, 0, 0, 0, 0, UTC);
+        assertEquals(expect, f.parseDateTime("004"));
+
+        expect = new DateTime(4, 1, 1, 0, 0, 0, 0, UTC);
+        assertEquals(expect, f.parseDateTime("+004"));
+
+        expect = new DateTime(-4, 1, 1, 0, 0, 0, 0, UTC);
+        assertEquals(expect, f.parseDateTime("-004"));
+
+        expect = new DateTime(3004, 1, 1, 0, 0, 0, 0, UTC);
+        assertEquals(expect, f.parseDateTime("3004"));
+
+        expect = new DateTime(3004, 1, 1, 0, 0, 0, 0, UTC);
+        assertEquals(expect, f.parseDateTime("+3004"));
+
+        expect = new DateTime(-3004, 1, 1, 0, 0, 0, 0, UTC);
+        assertEquals(expect, f.parseDateTime("-3004"));
+
+        try {
+            f.parseDateTime("-");
+            fail();
+        } catch (IllegalArgumentException e) { }
+
+        try {
+            f.parseDateTime("+");
+            fail();
+        } catch (IllegalArgumentException e) { }
     }
 
     public void testFormat_year_long() {
@@ -254,13 +369,99 @@ public void testFormat_weekyearOfEra_twoDigit() {
         expect = new DateTime(2021, 1, 4, 0, 0, 0, 0, UTC);
         assertEquals(expect, f.parseDateTime("21"));
 
-        /* Added tests for pivot year setting */
+        // Added tests to ensure single sign digit parse fails properly
+        try {
+            f.parseDateTime("-");
+            fail();
+        } catch (IllegalArgumentException e) { }
+
+        try {
+            f.parseDateTime("+");
+            fail();
+        } catch (IllegalArgumentException e) { }
+
+        // Added tests for pivot year setting
         f = f.withPivotYear(new Integer(2050));
         expect = new DateTime(2000, 1, 3, 0, 0, 0, 0, DateTimeZone.UTC);
         assertEquals(expect, f.parseDateTime("00"));
 
         expect = new DateTime(2098, 12, 29, 0, 0, 0, 0, DateTimeZone.UTC);
         assertEquals(expect, f.parseDateTime("99"));
+
+        // Added tests to ensure two digit parsing is strict by default for
+        // DateTimeFormatterBuilder
+        f = new DateTimeFormatterBuilder().appendTwoDigitWeekyear(2000).toFormatter();
+        f = f.withZone(UTC);
+        try {
+            f.parseDateTime("5");
+            fail();
+        } catch (IllegalArgumentException e) { }
+        try {
+            f.parseDateTime("005");
+            fail();
+        } catch (IllegalArgumentException e) { }
+        try {
+            f.parseDateTime("+50");
+            fail();
+        } catch (IllegalArgumentException e) { }
+        try {
+            f.parseDateTime("-50");
+            fail();
+        } catch (IllegalArgumentException e) { }
+
+        // Added tests to ensure two digit parsing is lenient for DateTimeFormat
+        f = DateTimeFormat.forPattern("xx").withLocale(Locale.UK);
+        f = f.withZone(UTC);
+        f.parseDateTime("5");
+        f.parseDateTime("005");
+        f.parseDateTime("+50");
+        f.parseDateTime("-50");
+
+        // Added tests for lenient two digit parsing
+        f = new DateTimeFormatterBuilder().appendTwoDigitWeekyear(2000, true).toFormatter();
+        f = f.withZone(UTC);
+        expect = new DateTime(2003, 12, 29, 0, 0, 0, 0, UTC);
+        assertEquals(expect, f.parseDateTime("04"));
+
+        expect = new DateTime(3, 12, 29, 0, 0, 0, 0, UTC);
+        assertEquals(expect, f.parseDateTime("+04"));
+
+        expect = new DateTime(-4, 1, 1, 0, 0, 0, 0, UTC);
+        assertEquals(expect, f.parseDateTime("-04"));
+
+        expect = new DateTime(3, 12, 29, 0, 0, 0, 0, UTC);
+        assertEquals(expect, f.parseDateTime("4"));
+
+        expect = new DateTime(-4, 1, 1, 0, 0, 0, 0, UTC);
+        assertEquals(expect, f.parseDateTime("-4"));
+
+        expect = new DateTime(3, 12, 29, 0, 0, 0, 0, UTC);
+        assertEquals(expect, f.parseDateTime("004"));
+
+        expect = new DateTime(3, 12, 29, 0, 0, 0, 0, UTC);
+        assertEquals(expect, f.parseDateTime("+004"));
+
+        expect = new DateTime(-4, 1, 1, 0, 0, 0, 0, UTC);
+        assertEquals(expect, f.parseDateTime("-004"));
+
+        expect = new DateTime(3004, 1, 2, 0, 0, 0, 0, UTC);
+        assertEquals(expect, f.parseDateTime("3004"));
+
+        expect = new DateTime(3004, 1, 2, 0, 0, 0, 0, UTC);
+        assertEquals(expect, f.parseDateTime("+3004"));
+
+        expect = new DateTime(-3004, 1, 4, 0, 0, 0, 0, UTC);
+        assertEquals(expect, f.parseDateTime("-3004"));
+
+        try {
+            f.parseDateTime("-");
+            fail();
+        } catch (IllegalArgumentException e) { }
+
+        try {
+            f.parseDateTime("+");
+            fail();
+        } catch (IllegalArgumentException e) { }
     }
 
     //-----------------------------------------------------------------------

From f66634b7e488aa12a970709edfecc47e81637eae Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Sun, 17 Apr 2005 17:33:40 +0000
Subject: [PATCH 019/124] Added since tag.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@751 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/java/org/joda/time/format/DateTimeFormatterBuilder.java | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java b/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java
index 652523bbc..05db63a37 100644
--- a/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java
+++ b/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java
@@ -733,6 +733,7 @@ public DateTimeFormatterBuilder appendTwoDigitYear(int pivot) {
      * @param lenientParse  when true, if digit count is not two, it is treated
      * as an absolute year
      * @return this DateTimeFormatterBuilder
+     * @since 1.1
      */
     public DateTimeFormatterBuilder appendTwoDigitYear(int pivot, boolean lenientParse) {
         return append0(new TwoDigitYear(DateTimeFieldType.year(), pivot, lenientParse));
@@ -772,6 +773,7 @@ public DateTimeFormatterBuilder appendTwoDigitWeekyear(int pivot) {
      * @param lenientParse  when true, if digit count is not two, it is treated
      * as an absolute weekyear
      * @return this DateTimeFormatterBuilder
+     * @since 1.1
      */
     public DateTimeFormatterBuilder appendTwoDigitWeekyear(int pivot, boolean lenientParse) {
         return append0(new TwoDigitYear(DateTimeFieldType.weekyear(), pivot, lenientParse));

From b7c1594f3758b3e5b6f9672407a9d06638aadd03 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Mon, 18 Apr 2005 05:37:23 +0000
Subject: [PATCH 020/124] Two digit year parse can only be lenient if it is not
 followed by another numeric token

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@752 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../org/joda/time/format/DateTimeFormat.java  | 19 +++++-
 .../joda/time/format/TestDateTimeFormat.java  | 58 ++++++++++++-------
 2 files changed, 55 insertions(+), 22 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/format/DateTimeFormat.java b/JodaTime/src/java/org/joda/time/format/DateTimeFormat.java
index 6f48f466a..56490e9a1 100644
--- a/JodaTime/src/java/org/joda/time/format/DateTimeFormat.java
+++ b/JodaTime/src/java/org/joda/time/format/DateTimeFormat.java
@@ -394,16 +394,31 @@ private static void parsePatternTo(DateTimeFormatterBuilder builder, String patt
             case 'y': // year (number)
             case 'Y': // year of era (number)
                 if (tokenLen == 2) {
+                    boolean lenientParse = true;
+
+                    // Peek ahead to next token.
+                    if (i + 1 < length) {
+                        indexRef[0]++;
+                        if (isNumericToken(parseToken(pattern, indexRef))) {
+                            // If next token is a number, cannot support
+                            // lenient parse, because it will consume digits
+                            // that it should not.
+                            lenientParse = false;
+                        }
+                        indexRef[0]--;
+                    }
+
                     // Use pivots which are compatible with SimpleDateFormat.
                     DateTimeFieldType type;
                     switch (c) {
                     case 'x':
-                        builder.appendTwoDigitWeekyear(new DateTime().getWeekyear() - 30, true);
+                        builder.appendTwoDigitWeekyear
+                            (new DateTime().getWeekyear() - 30, lenientParse);
                         break;
                     case 'y':
                     case 'Y':
                     default:
-                        builder.appendTwoDigitYear(new DateTime().getYear() - 30, true);
+                        builder.appendTwoDigitYear(new DateTime().getYear() - 30, lenientParse);
                         break;
                     }
                 } else {
diff --git a/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java b/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java
index d25a6e8a1..d0b9cdf7c 100644
--- a/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java
+++ b/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java
@@ -153,12 +153,12 @@ public void testFormat_yearOfEra_twoDigit() {
         try {
             f.parseDateTime("-");
             fail();
-        } catch (IllegalArgumentException e) { }
+        } catch (IllegalArgumentException ex) {}
 
         try {
             f.parseDateTime("+");
             fail();
-        } catch (IllegalArgumentException e) { }
+        } catch (IllegalArgumentException ex) {}
 
         // Added tests for pivot year setting
         f = f.withPivotYear(new Integer(2050));
@@ -196,12 +196,12 @@ public void testFormat_year() {
         try {
             f.parseDateTime("-");
             fail();
-        } catch (IllegalArgumentException e) { }
+        } catch (IllegalArgumentException ex) {}
 
         try {
             f.parseDateTime("+");
             fail();
-        } catch (IllegalArgumentException e) { }
+        } catch (IllegalArgumentException ex) {}
     }
 
     public void testFormat_year_twoDigit() {
@@ -228,12 +228,12 @@ public void testFormat_year_twoDigit() {
         try {
             f.parseDateTime("-");
             fail();
-        } catch (IllegalArgumentException e) { }
+        } catch (IllegalArgumentException ex) {}
 
         try {
             f.parseDateTime("+");
             fail();
-        } catch (IllegalArgumentException e) { }
+        } catch (IllegalArgumentException ex) {}
 
         // Added tests for pivot year setting
         f = f.withPivotYear(new Integer(2050));
@@ -250,19 +250,19 @@ public void testFormat_year_twoDigit() {
         try {
             f.parseDateTime("5");
             fail();
-        } catch (IllegalArgumentException e) { }
+        } catch (IllegalArgumentException ex) {}
         try {
             f.parseDateTime("005");
             fail();
-        } catch (IllegalArgumentException e) { }
+        } catch (IllegalArgumentException ex) {}
         try {
             f.parseDateTime("+50");
             fail();
-        } catch (IllegalArgumentException e) { }
+        } catch (IllegalArgumentException ex) {}
         try {
             f.parseDateTime("-50");
             fail();
-        } catch (IllegalArgumentException e) { }
+        } catch (IllegalArgumentException ex) {}
 
         // Added tests to ensure two digit parsing is lenient for DateTimeFormat
         f = DateTimeFormat.forPattern("yy").withLocale(Locale.UK);
@@ -311,12 +311,12 @@ public void testFormat_year_twoDigit() {
         try {
             f.parseDateTime("-");
             fail();
-        } catch (IllegalArgumentException e) { }
+        } catch (IllegalArgumentException ex) {}
 
         try {
             f.parseDateTime("+");
             fail();
-        } catch (IllegalArgumentException e) { }
+        } catch (IllegalArgumentException ex) {}
     }
 
     public void testFormat_year_long() {
@@ -373,12 +373,12 @@ public void testFormat_weekyearOfEra_twoDigit() {
         try {
             f.parseDateTime("-");
             fail();
-        } catch (IllegalArgumentException e) { }
+        } catch (IllegalArgumentException ex) {}
 
         try {
             f.parseDateTime("+");
             fail();
-        } catch (IllegalArgumentException e) { }
+        } catch (IllegalArgumentException ex) {}
 
         // Added tests for pivot year setting
         f = f.withPivotYear(new Integer(2050));
@@ -395,19 +395,19 @@ public void testFormat_weekyearOfEra_twoDigit() {
         try {
             f.parseDateTime("5");
             fail();
-        } catch (IllegalArgumentException e) { }
+        } catch (IllegalArgumentException ex) {}
         try {
             f.parseDateTime("005");
             fail();
-        } catch (IllegalArgumentException e) { }
+        } catch (IllegalArgumentException ex) {}
         try {
             f.parseDateTime("+50");
             fail();
-        } catch (IllegalArgumentException e) { }
+        } catch (IllegalArgumentException ex) {}
         try {
             f.parseDateTime("-50");
             fail();
-        } catch (IllegalArgumentException e) { }
+        } catch (IllegalArgumentException ex) {}
 
         // Added tests to ensure two digit parsing is lenient for DateTimeFormat
         f = DateTimeFormat.forPattern("xx").withLocale(Locale.UK);
@@ -456,12 +456,12 @@ public void testFormat_weekyearOfEra_twoDigit() {
         try {
             f.parseDateTime("-");
             fail();
-        } catch (IllegalArgumentException e) { }
+        } catch (IllegalArgumentException ex) {}
 
         try {
             f.parseDateTime("+");
             fail();
-        } catch (IllegalArgumentException e) { }
+        } catch (IllegalArgumentException ex) {}
     }
 
     //-----------------------------------------------------------------------
@@ -791,4 +791,22 @@ public void testFormat_samples() {
         assertEquals("2004-06-09 10.20.30", f.print(dt));
     }
 
+    public void testFormat_shortBasicParse() {
+        // Tests special two digit parse to make sure it properly switches
+        // between lenient and strict parsing.
+
+        DateTime dt = new DateTime(2004, 3, 9, 0, 0, 0, 0);
+
+        DateTimeFormatter f = DateTimeFormat.forPattern("yyMMdd");
+        assertEquals(dt, f.parseDateTime("040309"));
+        try {
+            assertEquals(dt, f.parseDateTime("20040309"));
+            fail();
+        } catch (IllegalArgumentException ex) {}
+
+        f = DateTimeFormat.forPattern("yy/MM/dd");
+        assertEquals(dt, f.parseDateTime("04/03/09"));
+        assertEquals(dt, f.parseDateTime("2004/03/09"));
+    }
+
 }

From 001f56b4c4e8c10598fd5968c316731cd9910b2f Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Wed, 20 Apr 2005 15:04:20 +0000
Subject: [PATCH 021/124] Added more @since tags

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@753 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/Period.java                    | 2 ++
 JodaTime/src/java/org/joda/time/PeriodType.java                | 3 +++
 JodaTime/src/java/org/joda/time/TimeOfDay.java                 | 3 +++
 JodaTime/src/java/org/joda/time/YearMonthDay.java              | 3 +++
 JodaTime/src/java/org/joda/time/base/BasePartial.java          | 1 +
 JodaTime/src/java/org/joda/time/base/BasePeriod.java           | 1 +
 .../src/java/org/joda/time/format/DateTimeParserBucket.java    | 1 +
 7 files changed, 14 insertions(+)

diff --git a/JodaTime/src/java/org/joda/time/Period.java b/JodaTime/src/java/org/joda/time/Period.java
index f030f35e6..5ea1cea5a 100644
--- a/JodaTime/src/java/org/joda/time/Period.java
+++ b/JodaTime/src/java/org/joda/time/Period.java
@@ -385,6 +385,7 @@ public Period(ReadableInstant startInstant, ReadableInstant endInstant, PeriodTy
      * @param start  the start of the period, must not be null
      * @param end  the end of the period, must not be null
      * @throws IllegalArgumentException if the partials are null or invalid
+     * @since 1.1
      */
     public Period(ReadablePartial start, ReadablePartial end) {
         super(start, end, null);
@@ -402,6 +403,7 @@ public Period(ReadablePartial start, ReadablePartial end) {
      * @param end  the end of the period, must not be null
      * @param type  which set of fields this period supports, null means standard
      * @throws IllegalArgumentException if the partials are null or invalid
+     * @since 1.1
      */
     public Period(ReadablePartial start, ReadablePartial end, PeriodType type) {
         super(start, end, type);
diff --git a/JodaTime/src/java/org/joda/time/PeriodType.java b/JodaTime/src/java/org/joda/time/PeriodType.java
index a6a584d37..94deefd68 100644
--- a/JodaTime/src/java/org/joda/time/PeriodType.java
+++ b/JodaTime/src/java/org/joda/time/PeriodType.java
@@ -150,6 +150,7 @@ public static PeriodType yearMonthDayTime() {
      * </ul>
      *
      * @return the period type
+     * @since 1.1
      */
     public static PeriodType yearMonthDay() {
         PeriodType type = cYMD;
@@ -208,6 +209,7 @@ public static PeriodType yearWeekDayTime() {
      * </ul>
      *
      * @return the period type
+     * @since 1.1
      */
     public static PeriodType yearWeekDay() {
         PeriodType type = cYWD;
@@ -263,6 +265,7 @@ public static PeriodType yearDayTime() {
      * </ul>
      *
      * @return the period type
+     * @since 1.1
      */
     public static PeriodType yearDay() {
         PeriodType type = cYD;
diff --git a/JodaTime/src/java/org/joda/time/TimeOfDay.java b/JodaTime/src/java/org/joda/time/TimeOfDay.java
index 7f22c4d97..b4c013ca3 100644
--- a/JodaTime/src/java/org/joda/time/TimeOfDay.java
+++ b/JodaTime/src/java/org/joda/time/TimeOfDay.java
@@ -673,6 +673,7 @@ public Property millisOfSecond() {
      * @param time  a time to check against, null means now
      * @return true if this time is after the time passed in
      * @throws IllegalArgumentException if the specified TimeOfDay is null
+     * @since 1.1
      */
     public boolean isAfter(TimeOfDay time) {
         if (time == null) {
@@ -690,6 +691,7 @@ public boolean isAfter(TimeOfDay time) {
      * @param time  a time to check against, null means now
      * @return true if this time is before the time passed in
      * @throws IllegalArgumentException if the specified TimeOfDay is null
+     * @since 1.1
      */
     public boolean isBefore(TimeOfDay time) {
         if (time == null) {
@@ -707,6 +709,7 @@ public boolean isBefore(TimeOfDay time) {
      * @param time  a time to check against, null means now
      * @return true if this time is the same as the time passed in
      * @throws IllegalArgumentException if the specified TimeOfDay is null
+     * @since 1.1
      */
     public boolean isEqual(TimeOfDay time) {
         if (time == null) {
diff --git a/JodaTime/src/java/org/joda/time/YearMonthDay.java b/JodaTime/src/java/org/joda/time/YearMonthDay.java
index 693e693d7..f7160bef0 100644
--- a/JodaTime/src/java/org/joda/time/YearMonthDay.java
+++ b/JodaTime/src/java/org/joda/time/YearMonthDay.java
@@ -652,6 +652,7 @@ public Property dayOfMonth() {
      * @param date  an date to check against, null means now
      * @return true if this date is after the date passed in
      * @throws IllegalArgumentException if the specified YearMonthDay is null
+     * @since 1.1
      */
     public boolean isAfter(YearMonthDay date) {
         if (date == null) {
@@ -669,6 +670,7 @@ public boolean isAfter(YearMonthDay date) {
      * @param date  an date to check against, null means now
      * @return true if this date is before the date passed in
      * @throws IllegalArgumentException if the specified YearMonthDay is null
+     * @since 1.1
      */
     public boolean isBefore(YearMonthDay date) {
         if (date == null) {
@@ -686,6 +688,7 @@ public boolean isBefore(YearMonthDay date) {
      * @param date  an date to check against, null means now
      * @return true if this date is the same as the date passed in
      * @throws IllegalArgumentException if the specified YearMonthDay is null
+     * @since 1.1
      */
     public boolean isEqual(YearMonthDay date) {
         if (date == null) {
diff --git a/JodaTime/src/java/org/joda/time/base/BasePartial.java b/JodaTime/src/java/org/joda/time/base/BasePartial.java
index 2ad680b73..9e3e8ef8a 100644
--- a/JodaTime/src/java/org/joda/time/base/BasePartial.java
+++ b/JodaTime/src/java/org/joda/time/base/BasePartial.java
@@ -258,6 +258,7 @@ protected void setValues(int[] values) {
      * @throws ClassCastException if the partial is the wrong class
      *  or if it has field types that don't match
      * @throws NullPointerException if the partial is null
+     * @since 1.1
      */
     public int compareTo(Object partial) {
         if (this == partial) {
diff --git a/JodaTime/src/java/org/joda/time/base/BasePeriod.java b/JodaTime/src/java/org/joda/time/base/BasePeriod.java
index 66a06e7fb..c1c46c038 100644
--- a/JodaTime/src/java/org/joda/time/base/BasePeriod.java
+++ b/JodaTime/src/java/org/joda/time/base/BasePeriod.java
@@ -136,6 +136,7 @@ protected BasePeriod(ReadableInstant startInstant, ReadableInstant endInstant, P
      * @param end  the end of the period, must not be null
      * @param type  which set of fields this period supports, null means standard
      * @throws IllegalArgumentException if the partials are null or invalid
+     * @since 1.1
      */
     protected BasePeriod(ReadablePartial start, ReadablePartial end, PeriodType type) {
         super();
diff --git a/JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java b/JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java
index 353b3f18c..0ff3c3f61 100644
--- a/JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java
+++ b/JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java
@@ -88,6 +88,7 @@ public DateTimeParserBucket(long instantLocal, Chronology chrono, Locale locale)
      * @param chrono  the chronology to use
      * @param locale  the locale to use
      * @param pivotYear  the pivot year to use when parsing two-digit years
+     * @since 1.1
      */
     public DateTimeParserBucket(long instantLocal, Chronology chrono, Locale locale, Integer pivotYear) {
         super();

From a862dbce7878c5d11329621b910eaf4b275d603c Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Fri, 22 Apr 2005 06:15:39 +0000
Subject: [PATCH 022/124] Updated to version 2005i.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@754 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/java/org/joda/time/tz/src/Readme.txt  |  2 +-
 JodaTime/src/java/org/joda/time/tz/src/africa |  4 +-
 JodaTime/src/java/org/joda/time/tz/src/asia   | 41 ++++++---
 .../java/org/joda/time/tz/src/northamerica    | 88 ++++++++++++++-----
 4 files changed, 100 insertions(+), 35 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
index 235b63094..143f1075a 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
+++ b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
@@ -1,2 +1,2 @@
 The data files in this directory were obtained from the public tz database,
-http://www.twinsun.com/tz/tz-link.htm, version 2005h.
+http://www.twinsun.com/tz/tz-link.htm, version 2005i.
diff --git a/JodaTime/src/java/org/joda/time/tz/src/africa b/JodaTime/src/java/org/joda/time/tz/src/africa
index 6b80af68e..7069102b3 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/africa
+++ b/JodaTime/src/java/org/joda/time/tz/src/africa
@@ -1,4 +1,4 @@
-# @(#)africa	7.36
+# @(#)africa	7.37
 
 # This data is by no means authoritative; if you think you know better,
 # go ahead and edit the file (and please send any changes to
@@ -317,7 +317,7 @@ Rule	Libya	1985	only	-	Apr	 6	0:00	1:00	S
 Rule	Libya	1986	only	-	Apr	 4	0:00	1:00	S
 Rule	Libya	1986	only	-	Oct	 3	0:00	0	-
 Rule	Libya	1987	1989	-	Apr	 1	0:00	1:00	S
-Rule	Libya	1987	1990	-	Oct	 1	0:00	0	-
+Rule	Libya	1987	1989	-	Oct	 1	0:00	0	-
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Africa/Tripoli	0:52:44 -	LMT	1920
 			1:00	Libya	CE%sT	1959
diff --git a/JodaTime/src/java/org/joda/time/tz/src/asia b/JodaTime/src/java/org/joda/time/tz/src/asia
index d4a842a27..0282bd58f 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/asia
+++ b/JodaTime/src/java/org/joda/time/tz/src/asia
@@ -1,4 +1,4 @@
-# @(#)asia	7.81
+# @(#)asia	7.82
 
 # This data is by no means authoritative; if you think you know better,
 # go ahead and edit the file (and please send any changes to
@@ -476,12 +476,33 @@ Zone Asia/Jayapura	9:22:48 -	LMT	1932 Nov
 # Thursday night of Shahrivar, but I can't give exact dates....
 # I have also changed the abbreviations to what is considered correct
 # here in Iran, IRST for regular time and IRDT for daylight saving time.
-
-# From Paul Eggert (2003-03-15)
+#
+# From Roozbeh Pournader (2005-04-05):
+# The text of the Iranian law, in effect since 1925, clearly mentions
+# that the true solar year is the measure, and there is no arithmetic
+# leap year calculation involved.  There has never been any serious
+# plan to change that law....
+#
+# From Paul Eggert (2005-04-05):
 # Go with Shanks before September 1991, and with Pournader thereafter.
-# I used Ed Reingold's cal-persia in GNU Emacs 21.2 to check Persian dates.
-# The Persian calendar is based on the sun, and dates after around 2050
-# are approximate; stop after 2037 when 32-bit time_t's overflow.
+# I used Ed Reingold's cal-persia in GNU Emacs 21.2 to check Persian dates,
+# stopping after 2037 when 32-bit time_t's overflow.
+# That cal-persia used Birashk's approximation, which disagrees with the solar
+# calendar predictions for the year 2025, so I corrected those dates by hand.
+#
+# From Oscar van Vlijmen (2005-03-30), writing about future
+# discrepancies between cal-persia and the Iranian calendar:
+# For 2091 solar-longitude-after yields 2091-03-20 08:40:07.7 UT for
+# the vernal equinox and that gets so close to 12:00 some local
+# Iranian time that the definition of the correct location needs to be
+# known exactly, amongst other factors.  2157 is even closer:
+# 2157-03-20 08:37:15.5 UT.  But the Gregorian year 2025 should give
+# no interpretation problem whatsoever.  By the way, another instant
+# in the near future where there will be a discrepancy between
+# arithmetical and astronomical Iranian calendars will be in 2058:
+# vernal equinox on 2058-03-20 09:03:05.9 UT.  The Java version of
+# Reingold's/Dershowitz' calculator gives correctly the Gregorian date
+# 2058-03-21 for 1 Farvardin 1437 (astronomical).
 #
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Iran	1978	1980	-	Mar	21	0:00	1:00	D
@@ -519,10 +540,10 @@ Rule	Iran	2020	only	-	Mar	21	0:00	1:00	D
 Rule	Iran	2020	only	-	Sep	21	0:00	0	S
 Rule	Iran	2021	2023	-	Mar	22	0:00	1:00	D
 Rule	Iran	2021	2023	-	Sep	22	0:00	0	S
-Rule	Iran	2024	2025	-	Mar	21	0:00	1:00	D
-Rule	Iran	2024	2025	-	Sep	21	0:00	0	S
-Rule	Iran	2026	2027	-	Mar	22	0:00	1:00	D
-Rule	Iran	2026	2027	-	Sep	22	0:00	0	S
+Rule	Iran	2024	only	-	Mar	21	0:00	1:00	D
+Rule	Iran	2024	only	-	Sep	21	0:00	0	S
+Rule	Iran	2025	2027	-	Mar	22	0:00	1:00	D
+Rule	Iran	2025	2027	-	Sep	22	0:00	0	S
 Rule	Iran	2028	2029	-	Mar	21	0:00	1:00	D
 Rule	Iran	2028	2029	-	Sep	21	0:00	0	S
 Rule	Iran	2030	2031	-	Mar	22	0:00	1:00	D
diff --git a/JodaTime/src/java/org/joda/time/tz/src/northamerica b/JodaTime/src/java/org/joda/time/tz/src/northamerica
index 3d89e968d..93389c3e1 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/northamerica
+++ b/JodaTime/src/java/org/joda/time/tz/src/northamerica
@@ -1,11 +1,11 @@
-# @(#)northamerica	7.72
+# @(#)northamerica	7.74
 # also includes Central America and the Caribbean
 
 # This data is by no means authoritative; if you think you know better,
 # go ahead and edit the file (and please send any changes to
 # tz@elsie.nci.nih.gov for general use in the future).
 
-# From Paul Eggert <eggert@twinsun.com> (1999-03-22):
+# From Paul Eggert (1999-03-22):
 # A reliable and entertaining source about time zones is
 # Derek Howse, Greenwich time and longitude, Philip Wilson Publishers (1997).
 
@@ -24,12 +24,16 @@
 # His proposal was adopted by the railroads on 1883-11-18 at 12:00,
 # and the most of the country soon followed suit.
 
-# From Paul Eggert <eggert@twinsun.com> (1995-12-19):
+# From Paul Eggert (2005-04-16):
+# That 1883 transition occurred at 12:00 new time, not at 12:00 old time.
+# See p 46 of David Prerau, Seize the daylight, Thunder's Mouth Press (2005).
+
+# From Paul Eggert (1995-12-19):
 # A good source for time zone historical data in the US is
 # Thomas G. Shanks, The American Atlas (5th edition),
 # San Diego: ACS Publications, Inc. (1991).
 # Make sure you have the errata sheet; the book is somewhat useless without it.
-# It is the source for the US and Puerto Rico entries below.
+# It is the source for most of the pre-1991 US and Puerto Rico entries below.
 
 # From Paul Eggert (2001-03-06):
 # Daylight Saving Time was first suggested as a joke by Benjamin Franklin
@@ -48,7 +52,8 @@
 #	to push people into bed earlier, and get them up earlier, to make
 #	them healthy, wealthy and wise in spite of themselves.
 #
-#	-- Robertson Davies, The Diary of Samuel Marchbanks (1947), XIX, Sunday
+#	-- Robertson Davies, The diary of Samuel Marchbanks,
+#	   Clarke, Irwin (1947), XIX, Sunday
 #
 # For more about the first ten years of DST in the United States, see
 # Robert Garland's <a href="http://www.clpgh.org/exhibit/dst.html">
@@ -222,7 +227,7 @@ Rule	NYC	1921	1966	-	Apr	lastSun	2:00	1:00	D
 Rule	NYC	1921	1954	-	Sep	lastSun	2:00	0	S
 Rule	NYC	1955	1966	-	Oct	lastSun	2:00	0	S
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/New_York	-4:56:02 -	LMT	1883 Nov 18 12:00
+Zone America/New_York	-4:56:02 -	LMT	1883 Nov 18 12:03:58
 			-5:00	US	E%sT	1920
 			-5:00	NYC	E%sT	1942
 			-5:00	US	E%sT	1946
@@ -248,7 +253,7 @@ Rule	Chicago	1922	1966	-	Apr	lastSun	2:00	1:00	D
 Rule	Chicago	1922	1954	-	Sep	lastSun	2:00	0	S
 Rule	Chicago	1955	1966	-	Oct	lastSun	2:00	0	S
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Chicago	-5:50:36 -	LMT	1883 Nov 18 12:00
+Zone America/Chicago	-5:50:36 -	LMT	1883 Nov 18 12:09:24
 			-6:00	US	C%sT	1920
 			-6:00	Chicago	C%sT	1936 Mar  1 2:00
 			-5:00	-	EST	1936 Nov 15 2:00
@@ -257,7 +262,7 @@ Zone America/Chicago	-5:50:36 -	LMT	1883 Nov 18 12:00
 			-6:00	Chicago	C%sT	1967
 			-6:00	US	C%sT
 # Oliver County, ND switched from mountain to central time on 1992-10-25.
-Zone America/North_Dakota/Center -6:45:12 - LMT	1883 Nov 18 12:00
+Zone America/North_Dakota/Center -6:45:12 - LMT	1883 Nov 18 12:14:48
 			-7:00	US	M%sT	1992 Oct 25 02:00
 			-6:00	US	C%sT
 
@@ -276,7 +281,7 @@ Rule	Denver	1921	only	-	May	22	2:00	0	S
 Rule	Denver	1965	1966	-	Apr	lastSun	2:00	1:00	D
 Rule	Denver	1965	1966	-	Oct	lastSun	2:00	0	S
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Denver	-6:59:56 -	LMT	1883 Nov 18 12:00
+Zone America/Denver	-6:59:56 -	LMT	1883 Nov 18 12:00:04
 			-7:00	US	M%sT	1920
 			-7:00	Denver	M%sT	1942
 			-7:00	US	M%sT	1946
@@ -296,7 +301,7 @@ Rule	CA	1950	1966	-	Apr	lastSun	2:00	1:00	D
 Rule	CA	1950	1961	-	Sep	lastSun	2:00	0	S
 Rule	CA	1962	1966	-	Oct	lastSun	2:00	0	S
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Los_Angeles -7:52:58 -	LMT	1883 Nov 18 12:00
+Zone America/Los_Angeles -7:52:58 -	LMT	1883 Nov 18 12:07:02
 			-8:00	US	P%sT	1946
 			-8:00	CA	P%sT	1967
 			-8:00	US	P%sT
@@ -423,7 +428,7 @@ Zone Pacific/Honolulu	-10:31:26 -	LMT	1900 Jan  1 12:00
 # Shanks says the 1944 experiment came to an end on 1944-03-17.
 # Go with the Arizona State Library instead.
 
-Zone America/Phoenix	-7:28:18 -	LMT	1883 Nov 18 12:00
+Zone America/Phoenix	-7:28:18 -	LMT	1883 Nov 18 11:31:42
 			-7:00	US	M%sT	1944 Jan  1 00:01
 			-7:00	-	MST	1944 Apr  1 00:01
 			-7:00	US	M%sT	1944 Oct  1 00:01
@@ -447,7 +452,7 @@ Link America/Denver America/Shiprock
 # switched four weeks late in 1974.
 #
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Boise	-7:44:49 -	LMT	1883 Nov 18 12:00
+Zone America/Boise	-7:44:49 -	LMT	1883 Nov 18 12:15:11
 			-8:00	US	P%sT	1923 May 13 2:00
 			-7:00	US	M%sT	1974
 			-7:00	-	MST	1974 Feb  3 2:00
@@ -491,7 +496,7 @@ Rule Indianapolis 1941	only	-	Jun	22	2:00	1:00	D
 Rule Indianapolis 1941	1954	-	Sep	lastSun	2:00	0	S
 Rule Indianapolis 1946	1954	-	Apr	lastSun	2:00	1:00	D
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Indianapolis -5:44:38 - LMT 1883 Nov 18 12:00
+Zone America/Indianapolis -5:44:38 - LMT 1883 Nov 18 12:15:22
 			-6:00	US	C%sT	1920
 			-6:00 Indianapolis C%sT	1942
 			-6:00	US	C%sT	1946
@@ -511,7 +516,7 @@ Rule	Marengo	1951	only	-	Sep	lastSun	2:00	0	S
 Rule	Marengo	1954	1960	-	Apr	lastSun	2:00	1:00	D
 Rule	Marengo	1954	1960	-	Sep	lastSun	2:00	0	S
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Indiana/Marengo -5:45:23 -	LMT	1883 Nov 18 12:00
+Zone America/Indiana/Marengo -5:45:23 -	LMT	1883 Nov 18 12:14:37
 			-6:00	US	C%sT	1951
 			-6:00	Marengo	C%sT	1961 Apr 30 2:00
 			-5:00	-	EST	1969
@@ -532,7 +537,7 @@ Rule	Starke	1955	1956	-	Oct	lastSun	2:00	0	S
 Rule	Starke	1957	1958	-	Sep	lastSun	2:00	0	S
 Rule	Starke	1959	1961	-	Oct	lastSun	2:00	0	S
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Indiana/Knox -5:46:30 -	LMT	1883 Nov 18 12:00
+Zone America/Indiana/Knox -5:46:30 -	LMT	1883 Nov 18 12:13:30
 			-6:00	US	C%sT	1947
 			-6:00	Starke	C%sT	1962 Apr 29 2:00
 			-5:00	-	EST	1963 Oct 27 2:00
@@ -541,7 +546,7 @@ Zone America/Indiana/Knox -5:46:30 -	LMT	1883 Nov 18 12:00
 #
 # Switzerland County, Indiana, last observed DST in 1972.
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Indiana/Vevay -5:40:16 -	LMT	1883 Nov 18 12:00
+Zone America/Indiana/Vevay -5:40:16 -	LMT	1883 Nov 18 12:19:44
 			-6:00	US	C%sT	1954 Apr 25 2:00
 			-5:00	-	EST	1969
 			-5:00	US	E%sT	1973
@@ -558,7 +563,7 @@ Rule Louisville	1946	only	-	Jun	2	2:00	0	S
 Rule Louisville	1950	1955	-	Sep	lastSun	2:00	0	S
 Rule Louisville	1956	1960	-	Oct	lastSun	2:00	0	S
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Louisville	-5:43:02 -	LMT	1883 Nov 18 12:00
+Zone America/Louisville	-5:43:02 -	LMT	1883 Nov 18 12:16:58
 			-6:00	US	C%sT	1921
 			-6:00 Louisville C%sT	1942
 			-6:00	US	C%sT	1946
@@ -595,7 +600,7 @@ Link America/Louisville America/Kentucky/Louisville
 # Federal Register 65, 160 (2000-08-17), page 50154-50158.
 # </a>
 #
-Zone America/Kentucky/Monticello -5:39:24 - LMT	1883 Nov 18 12:00
+Zone America/Kentucky/Monticello -5:39:24 - LMT	1883 Nov 18 12:20:36
 			-6:00	US	C%sT	1946
 			-6:00	-	CST	1968
 			-6:00	US	C%sT	2000 Oct 29  2:00
@@ -704,7 +709,7 @@ Link	Pacific/Honolulu	HST
 ################################################################################
 
 
-# From Paul Eggert <eggert@twinsun.com> (1999-10-29):
+# From Paul Eggert (1999-10-29):
 # A good source for time zone historical data outside the US is
 # Thomas G. Shanks, The International Atlas (5th edition),
 # San Diego: ACS Publications, Inc. (1999).
@@ -761,7 +766,7 @@ Link	Pacific/Honolulu	HST
 #	T: de Terre-Neuve
 #	Y: du Yukon		Yukon
 #
-# From Paul Eggert <eggert@twinsun.com> (1994-11-22):
+# From Paul Eggert (1994-11-22):
 # Alas, this sort of thing must be handled by localization software.
 
 # Unless otherwise specified, the data for Canada are all from Shanks.
@@ -1427,7 +1432,7 @@ Zone America/Dawson	-9:17:40 -	LMT	1900 Aug 20
 # Shanks reports that Baja was at -8:00 in 1922/1923.
 # Shanks says the 1930 transition in Baja was 1930-11-16.
 # Shanks reports no DST during summer 1931.
-# Shanks reports a transition at 1032-03-30 23:00, not 1932-04-01.
+# Shanks reports a transition at 1932-03-30 23:00, not 1932-04-01.
 # Shanks does not report transitions for Baja in 1945 or 1948.
 # Shanks reports southern Mexico transitions on 1981-12-01, not 12-23.
 # Shanks says Quintana Roo switched to -6:00 on 1982-12-02, and to -5:00
@@ -1873,6 +1878,26 @@ Zone America/Guatemala	-6:02:04 -	LMT	1918 Oct 5
 			-6:00	Guat	C%sT
 
 # Haiti
+# From Gwillim Law (2005-04-15):
+# Risto O. Nykanen wrote me that Haiti is now on DST.
+# I searched for confirmation, and I found a
+# <a href="http://www.haitianconsulate.org/time.doc"> press release
+# on the Web page of the Haitian Consulate in Chicago (2005-03-31),
+# </a>.  Translated from French, it says:
+#
+#  "The Prime Minister's Communication Office notifies the public in general
+#   and the press in particular that, following a decision of the Interior
+#   Ministry and the Territorial Collectivities [I suppose that means the
+#   provinces], Haiti will move to Eastern Daylight Time in the night from next
+#   Saturday the 2nd to Sunday the 3rd.
+#
+#  "Consequently, the Prime Minister's Communication Office wishes to inform
+#   the population that the country's clocks will be set forward one hour
+#   starting at midnight.  This provision will hold until the last Saturday in
+#   October 2005.
+#
+#  "Port-au-Prince, March 31, 2005"
+
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Haiti	1983	only	-	May	8	0:00	1:00	D
 Rule	Haiti	1984	1987	-	Apr	lastSun	0:00	1:00	D
@@ -1880,6 +1905,8 @@ Rule	Haiti	1983	1987	-	Oct	lastSun	0:00	0	S
 # Shanks says AT is 2:00, but IATA SSIM (1991/1997) says 1:00s.  Go with IATA.
 Rule	Haiti	1988	1997	-	Apr	Sun>=1	1:00s	1:00	D
 Rule	Haiti	1988	1997	-	Oct	lastSun	1:00s	0	S
+Rule	Haiti	2005	only	-	Apr	Sun>=1	0:00	1:00	D
+Rule	Haiti	2005	only	-	Oct	lastSun	0:00	0	S
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone America/Port-au-Prince -4:49:20 -	LMT	1890
 			-4:49	-	PPMT	1917 Jan 24 12:00 # P-a-P MT
@@ -1931,11 +1958,28 @@ Zone America/Montserrat	-4:08:52 -	LMT	1911 Jul 1 0:01   # Olveston
 # Nicaragua seems to be back at -6:00 but I have not been able to find when
 # they changed from -5:00.
 #
+# From Steffen Thorsen (2005-04-12):
+# I've got reports from 8 different people that Nicaragua just started
+# DST on Sunday 2005-04-10, in order to save energy because of
+# expensive petroleum.  The exact end date for DST is not yet
+# announced, only "September" but some sites also say "mid-September".
+# Some background information is available on the President's official site:
+# http://www.presidencia.gob.ni/Presidencia/Files_index/Secretaria/Notas%20de%20Prensa/Presidente/2005/ABRIL/Gobierno-de-nicaragua-adelanta-hora-oficial-06abril.htm
+# The Decree, no 23-2005 is available here:
+# http://www.presidencia.gob.ni/buscador_gaceta/BD/DECRETOS/2005/Decreto%2023-2005%20Se%20adelanta%20en%20una%20hora%20en%20todo%20el%20territorio%20nacional%20apartir%20de%20las%2024horas%20del%2009%20de%20Abril.pdf
+#
+# From Paul Eggert (2005-04-12):
+# The decree doesn't say anything about daylight saving, but for now let's
+# assume that it is daylight saving and that they'll switch back on the
+# 2nd Sunday in September.
+#
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Nic	1979	1980	-	Mar	Sun>=16	0:00	1:00	D
 Rule	Nic	1979	1980	-	Jun	Mon>=23	0:00	0	S
 Rule	Nic	1992	only	-	Jan	1	4:00	1:00	D
 Rule	Nic	1992	only	-	Sep	24	0:00	0	S
+Rule	Nic	2005	only	-	Apr	10	0:00	1:00	D
+Rule	Nic	2005	only	-	Sep	11	0:00	0	S
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	America/Managua	-5:45:08 -	LMT	1890
 			-5:45:12 -	MMT	1934 Jun 23 # Managua Mean Time?
@@ -1943,7 +1987,7 @@ Zone	America/Managua	-5:45:08 -	LMT	1890
 			-5:00	-	EST	1975 Feb 16
 			-6:00	Nic	C%sT	1993 Jan 1 4:00
 			-5:00	-	EST	1998 Dec
-			-6:00	-	CST
+			-6:00	Nic	C%sT
 
 # Panama
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]

From 4eb99ddc4bc3c79dc8c19282d66d2d9fb3a9911b Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Fri, 29 Apr 2005 05:08:23 +0000
Subject: [PATCH 023/124] Clarification on joda's up-to-date timezones.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@755 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/index.xml | 8 +++++---
 1 file changed, 5 insertions(+), 3 deletions(-)

diff --git a/JodaTime/xdocs/index.xml b/JodaTime/xdocs/index.xml
index 958ae99b5..b0a3471a7 100644
--- a/JodaTime/xdocs/index.xml
+++ b/JodaTime/xdocs/index.xml
@@ -59,10 +59,12 @@ Joda-Time supports multiple calendar systems via a pluggable system based on the
 functionality that is required for date-time calculations. It already provides
 out-of-the-box features, such as support for oddball date formats, which are difficult
 to replicate with the JDK.</li>
+
 <li><b>Up-to-date Time Zone calculations</b>. The timezone implementation is based on
-the public <a href="http://www.twinsun.com/tz/tz-link.htm">tz database</a>. As these files are updated (several times a year),
-Joda-Time incorporates the changes. The user always has up-to-date timezone
-computations.</li>
+the public <a href="http://www.twinsun.com/tz/tz-link.htm">tz database</a>, which is
+updated several times a year. New Joda-Time releases incorporate all changes
+made to this database. Should the changes be needed earlier, manually updating
+and building Joda-Time is easy.</li>
 <li><b>Calendar support</b>. The library currently provides 6 calendar systems. More
 will be added in the future.</li>
 <li><b>Easy interoperability</b>. The library internally uses a millisecond instant

From 15e0a37efcf967aaf58ffd0706545794a82eb7c6 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 8 May 2005 16:08:32 +0000
Subject: [PATCH 024/124] Added overlap() method to Interval

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@756 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  3 ++
 JodaTime/src/java/org/joda/time/Interval.java | 21 ++++++++
 .../org/joda/time/TestInterval_Basics.java    | 51 +++++++++++++++++++
 3 files changed, 75 insertions(+)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 8d48a9951..d875818e7 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -56,6 +56,9 @@ Enhancements since 1.0
 - DateTimeFormatter
   Added lenient parse option to appendTwoDigitYear and appendTwoDigitWeekyear.
 
+- Interval
+  Added overlap method that returns the actual overlap between two intervals.
+
 - DateTimeZone classes updated to latest data from the Olsen time zone database
 
 
diff --git a/JodaTime/src/java/org/joda/time/Interval.java b/JodaTime/src/java/org/joda/time/Interval.java
index a2c8c597b..56cf41f05 100644
--- a/JodaTime/src/java/org/joda/time/Interval.java
+++ b/JodaTime/src/java/org/joda/time/Interval.java
@@ -174,6 +174,27 @@ public Interval toInterval() {
         return this;
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the interval where the this interval and that specified overlap.
+     * 
+     * @param interval  the interval to examine, null means now
+     * @return the overlap interval, null if no overlap
+     * @since 1.1
+     */
+    public Interval overlap(ReadableInterval interval) {
+        if (interval == null) {
+            long now = DateTimeUtils.currentTimeMillis();
+            interval = new Interval(now, now);
+        }
+        if (overlaps(interval) == false) {
+            return null;
+        }
+        long start = Math.max(getStartMillis(), interval.getStartMillis());
+        long end = Math.min(getEndMillis(), interval.getEndMillis());
+        return new Interval(start, end);
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Creates a new interval with the same start and end, but a different chronology.
diff --git a/JodaTime/src/test/org/joda/time/TestInterval_Basics.java b/JodaTime/src/test/org/joda/time/TestInterval_Basics.java
index bd87a7f2d..8dd9d6e69 100644
--- a/JodaTime/src/test/org/joda/time/TestInterval_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestInterval_Basics.java
@@ -272,6 +272,57 @@ public void testOverlaps_RInterval() {
         assertEquals(true, test.overlaps((ReadableInterval) null));
     }
 
+    //-----------------------------------------------------------------------
+    public void testOverlap_RInterval() {
+        Interval test = new Interval(TEST_TIME1, TEST_TIME2);
+        
+        assertEquals(
+                new Interval(TEST_TIME1, TEST_TIME2),
+                test.overlap(new Interval(TEST_TIME1, TEST_TIME2)));
+        assertEquals(
+                new Interval(TEST_TIME1, TEST_TIME2),
+                test.overlap(new Interval(TEST_TIME1 - 1, TEST_TIME2)));
+        assertEquals(
+                new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2),
+                test.overlap(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2)));
+        assertEquals(
+                null,
+                test.overlap(new Interval(TEST_TIME2, TEST_TIME2)));
+        assertEquals(
+                new Interval(TEST_TIME2 - 1, TEST_TIME2),
+                test.overlap(new Interval(TEST_TIME2 - 1, TEST_TIME2)));
+        
+        assertEquals(
+                new Interval(TEST_TIME1, TEST_TIME2),
+                test.overlap(new Interval(TEST_TIME1, TEST_TIME2 + 1)));
+        assertEquals(
+                new Interval(TEST_TIME1, TEST_TIME2),
+                test.overlap(new Interval(TEST_TIME1 - 1, TEST_TIME2 + 1)));
+        assertEquals(
+                new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2),
+                test.overlap(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2 + 1)));
+        assertEquals(
+                null,
+                test.overlap(new Interval(TEST_TIME2, TEST_TIME2 + 1)));
+        assertEquals(
+                new Interval(TEST_TIME2 - 1, TEST_TIME2),
+                test.overlap(new Interval(TEST_TIME2 - 1, TEST_TIME2 + 1)));
+        
+        assertEquals(
+                null,
+                test.overlap(new Interval(TEST_TIME1 - 1, TEST_TIME1 - 1)));
+        assertEquals(
+                null,
+                test.overlap(new Interval(TEST_TIME1 - 1, TEST_TIME1)));
+        assertEquals(
+                new Interval(TEST_TIME1, TEST_TIME1 + 1),
+                test.overlap(new Interval(TEST_TIME1 - 1, TEST_TIME1 + 1)));
+        
+        assertEquals(
+                new Interval(TEST_TIME_NOW, TEST_TIME_NOW),
+                test.overlap((ReadableInterval) null));
+    }
+
     //-----------------------------------------------------------------------
     public void testIsBefore_long() {
         Interval test = new Interval(TEST_TIME1, TEST_TIME2);

From db354e68baf9b519d45a67b8da8ac647572ee89f Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 8 May 2005 16:13:47 +0000
Subject: [PATCH 025/124] Added overlap() method to Interval

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@757 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/project.xml                          | 3 +++
 JodaTime/src/java/org/joda/time/Interval.java | 1 +
 2 files changed, 4 insertions(+)

diff --git a/JodaTime/project.xml b/JodaTime/project.xml
index e8fc41568..b416a2671 100644
--- a/JodaTime/project.xml
+++ b/JodaTime/project.xml
@@ -112,6 +112,9 @@
     <contributor>
       <name>Al Major</name>
     </contributor>
+    <contributor>
+      <name>Julen Parra</name>
+    </contributor>
     <contributor>
       <name>Kandarp Shah</name>
     </contributor>
diff --git a/JodaTime/src/java/org/joda/time/Interval.java b/JodaTime/src/java/org/joda/time/Interval.java
index 56cf41f05..bc6c173ce 100644
--- a/JodaTime/src/java/org/joda/time/Interval.java
+++ b/JodaTime/src/java/org/joda/time/Interval.java
@@ -41,6 +41,7 @@
  * @author Brian S O'Neill
  * @author Sean Geoghegan
  * @author Stephen Colebourne
+ * @author Julen Parra
  * @since 1.0
  */
 public final class Interval

From 31c2ff5b6bbe590d6d34f41c22291a2f4f667127 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Sun, 8 May 2005 16:35:41 +0000
Subject: [PATCH 026/124] minor comment fix

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@758 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/Interval.java | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/JodaTime/src/java/org/joda/time/Interval.java b/JodaTime/src/java/org/joda/time/Interval.java
index bc6c173ce..c69eaba81 100644
--- a/JodaTime/src/java/org/joda/time/Interval.java
+++ b/JodaTime/src/java/org/joda/time/Interval.java
@@ -177,7 +177,7 @@ public Interval toInterval() {
 
     //-----------------------------------------------------------------------
     /**
-     * Gets the interval where the this interval and that specified overlap.
+     * Gets the interval where this interval and that specified overlap.
      * 
      * @param interval  the interval to examine, null means now
      * @return the overlap interval, null if no overlap

From be463c22371f9571ea0553959d62460e2daed59b Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Sun, 8 May 2005 23:55:52 +0000
Subject: [PATCH 027/124] Comment parsing bug disabled DST for Europe/Athens
 after 1980.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@759 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                               | 3 +++
 JodaTime/project.xml                                     | 3 +++
 JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java | 3 ++-
 JodaTime/src/test/org/joda/time/TestDateTimeZone.java    | 8 ++++++++
 4 files changed, 16 insertions(+), 1 deletion(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index d875818e7..7ab01a220 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -31,6 +31,9 @@ Bug fixes since 1.0
   than two digits, for compatibility with java.text.SimpleDateFormat. If not
   two digits or if sign character is present, then year is parsed as absolute.
 
+- ZoneInfoCompiler
+  Comment parsing bug disabled DST for Europe/Athens after 1980.
+
 Enhancements since 1.0
 ----------------------
 - YearMonthDay/TimeOfDay
diff --git a/JodaTime/project.xml b/JodaTime/project.xml
index b416a2671..fa99c9ee8 100644
--- a/JodaTime/project.xml
+++ b/JodaTime/project.xml
@@ -109,6 +109,9 @@
     <contributor>
       <name>Ashish Katyal</name>
     </contributor>
+    <contributor>
+      <name>Kostas Maistrelis</name>
+    </contributor>
     <contributor>
       <name>Al Major</name>
     </contributor>
diff --git a/JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java b/JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java
index d03404d43..031ef3318 100644
--- a/JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java
+++ b/JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java
@@ -438,7 +438,8 @@ public void parseDataFile(BufferedReader in) throws IOException {
         Zone zone = null;
         String line;
         while ((line = in.readLine()) != null) {
-            if (line.length() == 0 || line.charAt(0) == '#') {
+            String trimmed = line.trim();
+            if (trimmed.length() == 0 || trimmed.charAt(0) == '#') {
                 continue;
             }
 
diff --git a/JodaTime/src/test/org/joda/time/TestDateTimeZone.java b/JodaTime/src/test/org/joda/time/TestDateTimeZone.java
index 92d0d844c..23ce65597 100644
--- a/JodaTime/src/test/org/joda/time/TestDateTimeZone.java
+++ b/JodaTime/src/test/org/joda/time/TestDateTimeZone.java
@@ -791,4 +791,12 @@ public void testSerialization2() throws Exception {
         assertSame(zone, result);
     }
 
+    public void testCommentParse() throws Exception {
+        // A bug in ZoneInfoCompiler's handling of comments broke Europe/Athens
+        // after 1980. This test is included to make sure it doesn't break again.
+
+        DateTimeZone zone = DateTimeZone.forID("Europe/Athens");
+        DateTime dt = new DateTime(2005, 5, 5, 20, 10, 15, 0, zone);
+        assertEquals(1115313015000L, dt.getMillis());
+    }
 }

From 28982faf799e6a7d06bf443327ea312d95716776 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 9 May 2005 22:12:17 +0000
Subject: [PATCH 028/124] Add serialization tests

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@760 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/test/org/joda/time/TestAll.java  |   2 +
 .../test/org/joda/time/TestSerialization.java | 267 ++++++++++++++++++
 2 files changed, 269 insertions(+)
 create mode 100644 JodaTime/src/test/org/joda/time/TestSerialization.java

diff --git a/JodaTime/src/test/org/joda/time/TestAll.java b/JodaTime/src/test/org/joda/time/TestAll.java
index 69badd3eb..267f00337 100644
--- a/JodaTime/src/test/org/joda/time/TestAll.java
+++ b/JodaTime/src/test/org/joda/time/TestAll.java
@@ -89,6 +89,8 @@ public static Test suite() {
         suite.addTest(TestDateTimeZone.suite());
         suite.addTest(TestPeriodType.suite());
 //        suite.addTest(TestParseISO.suite());
+        
+        suite.addTest(TestSerialization.suite());
         return suite;
     }
 
diff --git a/JodaTime/src/test/org/joda/time/TestSerialization.java b/JodaTime/src/test/org/joda/time/TestSerialization.java
new file mode 100644
index 000000000..5ef605e9c
--- /dev/null
+++ b/JodaTime/src/test/org/joda/time/TestSerialization.java
@@ -0,0 +1,267 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time;
+
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.FileInputStream;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+import java.io.Serializable;
+import java.util.Locale;
+import java.util.TimeZone;
+
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+import org.joda.time.chrono.CopticChronology;
+import org.joda.time.chrono.GJChronology;
+import org.joda.time.chrono.ISOChronology;
+
+/**
+ * This class is a Junit unit test for serialization.
+ *
+ * @author Stephen Colebourne
+ */
+public class TestSerialization extends TestCase {
+    // Test in 2002/03 as time zones are more well known
+    // (before the late 90's they were all over the place)
+
+    private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
+    private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
+    private static final DateTimeZone TOKYO = DateTimeZone.forID("Asia/Tokyo");
+    
+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 
+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 
+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
+                     366 + 365;
+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 
+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 
+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
+                     366 + 365 + 365;
+    
+    // 2002-06-09
+    private long TEST_TIME_NOW =
+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
+            
+    // 2002-04-05
+    private long TEST_TIME1 =
+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY
+            + 12L * DateTimeConstants.MILLIS_PER_HOUR
+            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;
+        
+    // 2003-05-06
+    private long TEST_TIME2 =
+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
+            + 14L * DateTimeConstants.MILLIS_PER_HOUR
+            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;
+        
+    private DateTimeZone originalDateTimeZone = null;
+    private TimeZone originalTimeZone = null;
+    private Locale originalLocale = null;
+
+    public static void main(String[] args) {
+        junit.textui.TestRunner.run(suite());
+    }
+
+    public static TestSuite suite() {
+        return new TestSuite(TestSerialization.class);
+    }
+
+    public TestSerialization(String name) {
+        super(name);
+    }
+
+    protected void setUp() throws Exception {
+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
+        originalDateTimeZone = DateTimeZone.getDefault();
+        originalTimeZone = TimeZone.getDefault();
+        originalLocale = Locale.getDefault();
+        DateTimeZone.setDefault(LONDON);
+        TimeZone.setDefault(TimeZone.getTimeZone("Europe/London"));
+        Locale.setDefault(Locale.UK);
+    }
+
+    protected void tearDown() throws Exception {
+        DateTimeUtils.setCurrentMillisSystem();
+        DateTimeZone.setDefault(originalDateTimeZone);
+        TimeZone.setDefault(originalTimeZone);
+        Locale.setDefault(originalLocale);
+        originalDateTimeZone = null;
+        originalTimeZone = null;
+        originalLocale = null;
+    }
+
+    //-----------------------------------------------------------------------
+    public void testTest() {
+        assertEquals("2002-06-09T00:00:00.000Z", new Instant(TEST_TIME_NOW).toString());
+        assertEquals("2002-04-05T12:24:00.000Z", new Instant(TEST_TIME1).toString());
+        assertEquals("2003-05-06T14:28:00.000Z", new Instant(TEST_TIME2).toString());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testSerializedInstant() throws Exception {
+        Instant test = new Instant();
+        loadAndCompare(test, "Instant.dat");
+        inlineCompare(test);
+    }
+
+    public void testSerializedDateTime() throws Exception {
+        DateTime test = new DateTime();
+        loadAndCompare(test, "DateTime.dat");
+        inlineCompare(test);
+    }
+
+    public void testSerializedMutableDateTime() throws Exception {
+        MutableDateTime test = new MutableDateTime();
+        loadAndCompare(test, "MutableDateTime.dat");
+        inlineCompare(test);
+    }
+
+    public void testSerializedDateMidnight() throws Exception {
+        DateMidnight test = new DateMidnight();
+        loadAndCompare(test, "DateMidnight.dat");
+        inlineCompare(test);
+    }
+
+    public void testSerializedYearMonthDay() throws Exception {
+        YearMonthDay test = new YearMonthDay();
+        loadAndCompare(test, "YearMonthDay.dat");
+        inlineCompare(test);
+    }
+
+    public void testSerializedTimeOfDay() throws Exception {
+        TimeOfDay test = new TimeOfDay();
+        loadAndCompare(test, "TimeOfDay.dat");
+        inlineCompare(test);
+    }
+
+    public void testSerializedDateTimeZoneUTC() throws Exception {
+        DateTimeZone test = DateTimeZone.UTC;
+        loadAndCompare(test, "DateTimeZoneUTC.dat");
+        inlineCompare(test);
+    }
+
+    public void testSerializedDateTimeZone() throws Exception {
+        DateTimeZone test = PARIS;
+        loadAndCompare(test, "DateTimeZone.dat");
+        inlineCompare(test);
+    }
+
+    public void testSerializedCopticChronology() throws Exception {
+        CopticChronology test = CopticChronology.getInstance(LONDON);
+        loadAndCompare(test, "CopticChronology.dat");
+        inlineCompare(test);
+    }
+
+    public void testSerializedISOChronology() throws Exception {
+        ISOChronology test = ISOChronology.getInstance(PARIS);
+        loadAndCompare(test, "ISOChronology.dat");
+        inlineCompare(test);
+    }
+
+    public void testSerializedGJChronology() throws Exception {
+        GJChronology test = GJChronology.getInstance(TOKYO);
+        loadAndCompare(test, "GJChronology.dat");
+        inlineCompare(test);
+    }
+
+    private void loadAndCompare(Serializable test, String filename) throws Exception {
+        FileInputStream fis = new FileInputStream("src/testdata/" + filename);
+        ObjectInputStream ois = new ObjectInputStream(fis);
+        Object obj = ois.readObject();
+        ois.close();
+        assertEquals(test, obj);
+    }
+
+    public void inlineCompare(Serializable test) throws Exception {
+        ByteArrayOutputStream baos = new ByteArrayOutputStream();
+        ObjectOutputStream oos = new ObjectOutputStream(baos);
+        oos.writeObject(test);
+        oos.close();
+        
+        ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
+        ObjectInputStream ois = new ObjectInputStream(bais);
+        Object obj = ois.readObject();
+        ois.close();
+        
+        assertEquals(test, obj);
+    }
+
+//    //-----------------------------------------------------------------------
+//    public void testStoreSerializedInstant() throws Exception {
+//        Instant test = new Instant();
+//        store(test, "Instant.dat");
+//    }
+//
+//    public void testStoreSerializedDateTime() throws Exception {
+//        DateTime test = new DateTime();
+//        store(test, "DateTime.dat");
+//    }
+//
+//    public void testStoreSerializedMutableDateTime() throws Exception {
+//        MutableDateTime test = new MutableDateTime();
+//        store(test, "MutableDateTime.dat");
+//    }
+//
+//    public void testStoreSerializedDateMidnight() throws Exception {
+//        DateMidnight test = new DateMidnight();
+//        store(test, "DateMidnight.dat");
+//    }
+//
+//    public void testStoreSerializedYearMonthDay() throws Exception {
+//        YearMonthDay test = new YearMonthDay();
+//        store(test, "YearMonthDay.dat");
+//    }
+//
+//    public void testStoreSerializedTimeOfDay() throws Exception {
+//        TimeOfDay test = new TimeOfDay();
+//        store(test, "TimeOfDay.dat");
+//    }
+//
+//    public void testStoreSerializedDateTimeZoneUTC() throws Exception {
+//        DateTimeZone test = DateTimeZone.UTC;
+//        store(test, "DateTimeZoneUTC.dat");
+//    }
+//
+//    public void testStoreSerializedDateTimeZone() throws Exception {
+//        DateTimeZone test = PARIS;
+//        store(test, "DateTimeZone.dat");
+//    }
+//
+//    public void testStoreSerializedCopticChronology() throws Exception {
+//        CopticChronology test = CopticChronology.getInstance(LONDON);
+//        store(test, "CopticChronology.dat");
+//    }
+//
+//    public void testStoreSerializedISOChronology() throws Exception {
+//        ISOChronology test = ISOChronology.getInstance(PARIS);
+//        store(test, "ISOChronology.dat");
+//    }
+//
+//    public void testStoreSerializedGJChronology() throws Exception {
+//        GJChronology test = GJChronology.getInstance(TOKYO);
+//        store(test, "GJChronology.dat");
+//    }
+//
+//    private void store(Serializable test, String filename) throws Exception {
+//        FileOutputStream fos = new FileOutputStream("src/testdata/" + filename);
+//        ObjectOutputStream oos = new ObjectOutputStream(fos);
+//        oos.writeObject(test);
+//        oos.close();
+//    }
+//
+}

From 28ceb46c14c70ab2d30f6bfb466eaba27dbfc798 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 9 May 2005 22:19:45 +0000
Subject: [PATCH 029/124] Add serialized files from v1.0 for testing

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@761 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/testdata/CopticChronology.dat | Bin 0 -> 701 bytes
 JodaTime/src/testdata/DateMidnight.dat     | Bin 0 -> 277 bytes
 JodaTime/src/testdata/DateTime.dat         | Bin 0 -> 273 bytes
 JodaTime/src/testdata/DateTimeZone.dat     | Bin 0 -> 69 bytes
 JodaTime/src/testdata/DateTimeZoneUTC.dat  | Bin 0 -> 60 bytes
 JodaTime/src/testdata/GJChronology.dat     | Bin 0 -> 947 bytes
 JodaTime/src/testdata/ISOChronology.dat    | Bin 0 -> 126 bytes
 JodaTime/src/testdata/Instant.dat          | Bin 0 -> 60 bytes
 JodaTime/src/testdata/MutableDateTime.dat  | Bin 0 -> 350 bytes
 JodaTime/src/testdata/TimeOfDay.dat        | Bin 0 -> 299 bytes
 JodaTime/src/testdata/YearMonthDay.dat     | Bin 0 -> 298 bytes
 11 files changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 JodaTime/src/testdata/CopticChronology.dat
 create mode 100644 JodaTime/src/testdata/DateMidnight.dat
 create mode 100644 JodaTime/src/testdata/DateTime.dat
 create mode 100644 JodaTime/src/testdata/DateTimeZone.dat
 create mode 100644 JodaTime/src/testdata/DateTimeZoneUTC.dat
 create mode 100644 JodaTime/src/testdata/GJChronology.dat
 create mode 100644 JodaTime/src/testdata/ISOChronology.dat
 create mode 100644 JodaTime/src/testdata/Instant.dat
 create mode 100644 JodaTime/src/testdata/MutableDateTime.dat
 create mode 100644 JodaTime/src/testdata/TimeOfDay.dat
 create mode 100644 JodaTime/src/testdata/YearMonthDay.dat

diff --git a/JodaTime/src/testdata/CopticChronology.dat b/JodaTime/src/testdata/CopticChronology.dat
new file mode 100644
index 0000000000000000000000000000000000000000..bff31020689676281334ccb3bb51a452b6067143
GIT binary patch
literal 701
zcmZ`$&npB`9RHfNwrnCIN$mk8X{KD)h4mxbXt(?-a(J`zT5rtE8#9lcEy-EAI_w3j
zoXCOVe{gW+;2>wUQc4c%y=5D;dwKQh^ZR@D0%6aE0qSODgX&0T#KLlB&80S#6VzcO
zlc;=5n$4g0E)GXtBYP5nUyn16JUpEYIPTla{?U~Zlb~S+I>;=sCs5v-v8RaZu_cVx
zxzb=w_c71ImS$o-5Gx*DJQS~QJ|vJ-2ovGOphx9&MTA#GcqM?xRcIn<<RXhfyK0~<
zq?pLgDk;st85ZZxeKnnhZlF@wJLpZ9nsw3I;am0B<SbMBchcAJ<!ve7wkt>*umh4O
zUZ_h~iA7l8X)rxMRC+fmMWaNeIqX&-47&f-oj?rF^WMB{lq@*T4^Y@ee_J~a05pmM
zU4IKy1#U)t-B@|#<BIFX{(>|<i7a-hqRZuvr_`!^!V@MT!tZLD#1j#M5+Xv#cgp3v
z<Ic}}5Z{*X6g<Q~{i>{(v44(jYNtv=VSA+KIV4ukwL;6}rb`{HsMOY}?N`ct0T?s)
A-T(jq

literal 0
HcmV?d00001

diff --git a/JodaTime/src/testdata/DateMidnight.dat b/JodaTime/src/testdata/DateMidnight.dat
new file mode 100644
index 0000000000000000000000000000000000000000..fd781eca55615ec64fbafa0c8c425f997145d5eb
GIT binary patch
literal 277
zcmZ4UmVvdnh(Rj9C|xfrKP6GGBr`Wv&n2-W)i*OGFEc%(gn^;YLO;&Ih>3xrqKH8r
zRbf(MajKpZkO1ij0c!pK|K~&hSiQwe3`|}O?3uoqIXRidJ`CKM&KX7ddHFf{>6Il6
zQa(Ua^g-6?gRIj>$XQnuFfcH@3;Z&*0q81qRLhdVM(BA4`y(`{1ecU1tvn%^R%jle
z&J1*70Z<>BBVlff%Fjy$t6!$iIIG4;>M>Y-IX?rhYiUt_L8`t_eqKs`UPT1}xawhG

literal 0
HcmV?d00001

diff --git a/JodaTime/src/testdata/DateTime.dat b/JodaTime/src/testdata/DateTime.dat
new file mode 100644
index 0000000000000000000000000000000000000000..7417fdcacd601958a18db2c1d932e73690ddeb95
GIT binary patch
literal 273
zcmZ4UmVvdnh(RpBC|xfrKP6GGBr`Wv&n2-WH3Z1mVN;Qk6@B+769Yp<5raIcqNK#)
zR6Qpk0aN|||Idg1v3iS{7?`{m*fV`Ib8<3^eHgeioimE^^YU}@(<@6Dq<ny;=!2}%
z2U(?$kh88RU|?W)7o^?70CbT$s%6PwBlJ9j{Sg{ef=f!1R-O<{D>M&KX9ha40H_bm
rkubMK<>#e>)i2X$oK<5a^%$(aoS%W$wX`U|AXVQdKQAReuc86~#${my

literal 0
HcmV?d00001

diff --git a/JodaTime/src/testdata/DateTimeZone.dat b/JodaTime/src/testdata/DateTimeZone.dat
new file mode 100644
index 0000000000000000000000000000000000000000..40947f60f563f4a435da4d62bf5edac0c106ac3b
GIT binary patch
literal 69
zcmZ4UmVvdnh(SKTC|xfrKP6GGBr`Wv&n2-WH3Z0r%Fjzx2`(v3TBgr9tHwy`F*5^0
XML{_q1CMKIQGP+Hen4VTW^n}oQ9T#h

literal 0
HcmV?d00001

diff --git a/JodaTime/src/testdata/DateTimeZoneUTC.dat b/JodaTime/src/testdata/DateTimeZoneUTC.dat
new file mode 100644
index 0000000000000000000000000000000000000000..1483dce0835078a931fa79bbb50f76cac5b38c92
GIT binary patch
literal 60
zcmZ4UmVvdnh(SKTC|xfrKP6GGBr`Wv&n2-WH3Z0r%Fjzx2`(v3TBgr9tHwy`F*5^0
OML{_$19NDIa|Hm1Y!ns%

literal 0
HcmV?d00001

diff --git a/JodaTime/src/testdata/GJChronology.dat b/JodaTime/src/testdata/GJChronology.dat
new file mode 100644
index 0000000000000000000000000000000000000000..9838c6080afca6d6ba6f8d85e1e59d13721365ef
GIT binary patch
literal 947
zcmZ{iPiPZC6vkh-jY17=Y$JuD6tPt+xC`~zQ*AJ0*<itfQcsg+h?8t))|uIwfK*Q&
zM8T6t5h^)&kbnmTJ$WpGD7|<PJk_g(ioNty=cP%LF6(7>;l1~LzxSuP4GAUTtdJ$U
zEQ-X|tV-?WJ5q3AXWjYMk1tB~pUu2Ym(EXHkZ@s$&4*g7P?=}G&y)*EmL)+ZlteSZ
zJs9r9b6jb{wT3azI5_Cwpo7y6%zBV!SxHMmGQzuV8ZJc&4v?IfT%&Q4xuG8sxDYQ8
zO`NSsxES00oKmz}@M*D&)mVS~qw(S6o&}Z%33inzs$o20)J->J$Jhdqq^e=WE0Y!C
z_=K07>xD91*64gL)){rXDr=9QpI+D*ELs4y!0c)=wq{B2UeZ5_cVBkusfSo}7gk|F
z;R``1Vf1zj#YPmnjq>c<t@V_e_FEnR&~JREVtu0Xd-VOx=1k)^!OH*DU_ZULB>!$d
zef8d%u%Isoqb$#OhSXJ#Ut?0~o0L`#kb}UG3>cF5{luKY?uj=~R>vwEovw!uB~Be}
zrhR^wKY!ZX7<&2DfVgnnfZ#RPg8lv7t-WFsI$whUS020o9AO%t5qwgHY~rYFhG@EI
z&Ks98c|(VV*G}Ks{h9G!{kXe(Nf?|{j5v#;QWv!lMUpt|mfE3iy4M!1G16oE4^ik$
A!vFvP

literal 0
HcmV?d00001

diff --git a/JodaTime/src/testdata/ISOChronology.dat b/JodaTime/src/testdata/ISOChronology.dat
new file mode 100644
index 0000000000000000000000000000000000000000..e7fa471afb29b91658c0295599cf04f75aaf29c6
GIT binary patch
literal 126
zcmZ4UmVvdnh(SHSC|xfrKP6GGBr`WvFFB(qKQCX;GuYo5%*x46uT%*xDNR~=LNKk+
zJV2e9fuW)Rs81eMpG#s%Y6#GPsQkQCu=-{CjI(Ntq#lFSm-8|3xRw^>7o_S3Bo<{B
HS5yE15mPJo

literal 0
HcmV?d00001

diff --git a/JodaTime/src/testdata/Instant.dat b/JodaTime/src/testdata/Instant.dat
new file mode 100644
index 0000000000000000000000000000000000000000..55b27987c91342286b0a5a3de9f53e2283d8624b
GIT binary patch
literal 60
zcmZ4UmVvdnh(R>JC|xfrKP6GGBr`Wv&oi&MBr&f<_r$&n$N1))Wny6TVqnko&CJQk
QEUqYEU|@I`q}{>*0HnqhR{#J2

literal 0
HcmV?d00001

diff --git a/JodaTime/src/testdata/MutableDateTime.dat b/JodaTime/src/testdata/MutableDateTime.dat
new file mode 100644
index 0000000000000000000000000000000000000000..975a9db1b0e5cc3d452b5e03ccad20edfacb9195
GIT binary patch
literal 350
zcmZ4UmVvdnh(R{LC|xfrKP6GGBr`Wv&$qNBF)1h2C9xzm1jtvP)==}gjwzjqfytAB
zH!~=|G%qDHFWomkCDn(456*YXOwCCtVUYC!8m132Odn*JKFk!bv~@)hgFLEbNr}a&
zdQLzBrtts&pAY?G^%euI^I~An^v%r4$t?C^;Ldc;D9X>v&&f}(EMbsBvjrh%T~WZm
z!0;|eyM+PhGj&wUlEFskc?SC<G^hlZlqRh_A(&QZ9-z+5z)(>D)Q9FsnA@WA^HRa;
mm+3Rksxgv!3|3#x&%o<iT9jXqs_&DZmy(}XQ2}%ULjeFEk9rXR

literal 0
HcmV?d00001

diff --git a/JodaTime/src/testdata/TimeOfDay.dat b/JodaTime/src/testdata/TimeOfDay.dat
new file mode 100644
index 0000000000000000000000000000000000000000..9977a17a37d32eed11137aa8b137eaf83e814567
GIT binary patch
literal 299
zcmZ4UmVvdnh(SERC|xfrKP6GGBr`WvF9b;Vr@16n8s#{zk%&3l!o<K(QN$pJswye5
zI91OHNCYGnm1HL7FmS}IXu4V&!^FVk!@!;CoKcjYm!FfLURlB*<pb2J53)cXWPv_H
z&N`ZbJu@sZr!=*=gn=pAv!Vd#9CcKSlEEhFc?SC<^r-}wlqRh_A(&QZ9-z()bRI~b
zJgPpI#FA8ySEBOsQo-t%=`+r%F_L-=R$tD_z#JOlTv1V41hUw7SAtsEt4&KmUM*l?
MU|<1aMj(a*01szhumAu6

literal 0
HcmV?d00001

diff --git a/JodaTime/src/testdata/YearMonthDay.dat b/JodaTime/src/testdata/YearMonthDay.dat
new file mode 100644
index 0000000000000000000000000000000000000000..b85ab93adc705f3a46b0d01f0972ddc544863512
GIT binary patch
literal 298
zcmZ4UmVvdnh(Rj9C|xfrKP6GGBr`WvFETZ;$TvT)B*P`Kl7Z=J%-t#(V<rZMiXsL%
zRE0^2#i@EuKq4Tqs3bEnhk+wzMbp*N7$ycL9|rDB=ZvEKy!@Q}^vV(jDIcI#eUKgc
zAUpICa@Nrd?3rPSIi;z^B@9f_o)rZ^7pbFKlngdW&okH`p-&~aq%>*e3Bj~N^8j^b
zpz}cb<WcpxB$lLx0IiG4&r1cXU#8DEtHwy`F<5;$D+6<Ah;v0nX%Wa`-(3l6Wv@0Z
U1$niAfq?<2hW!$dW&>hQ0Hh&da{vGU

literal 0
HcmV?d00001


From 08b416a222dbd9379961b9f887002e2df59571e2 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 14 May 2005 03:45:00 +0000
Subject: [PATCH 030/124] Add getAsString() to property classes

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@762 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  4 ++
 .../field/AbstractPartialFieldProperty.java   | 71 +++++++++++++++----
 .../AbstractReadableInstantFieldProperty.java | 69 ++++++++++++++----
 .../time/TestDateMidnight_Properties.java     |  2 +
 .../joda/time/TestDateTime_Properties.java    | 18 +++++
 .../joda/time/TestTimeOfDay_Properties.java   |  4 ++
 .../time/TestYearMonthDay_Properties.java     |  3 +
 7 files changed, 142 insertions(+), 29 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 7ab01a220..bc8167b51 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -44,6 +44,10 @@ Enhancements since 1.0
   Extra time zone constructor
   Allows current date and time to be accurately obtained
 
+- DateTime/DateMidnight/MutableDateTime/YearMonthDay/TimeOfDay Property
+  Added new method to property class - getAsString()
+  Gets the value as a string, not using text values like 'Monday' or 'January'
+
 - Period
   Added constructors to create a Period from two ReadablePartials, such as
   YearMonthDay or TimeOfDay
diff --git a/JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java b/JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java
index adb430e4a..3f5222fea 100644
--- a/JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java
+++ b/JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java
@@ -78,52 +78,93 @@ public String getName() {
 
     //-----------------------------------------------------------------------
     /**
-     * Gets a value from the partial instant.
+     * Gets the value of this property from the instant.
+     * <p>
+     * For example, the following two lines of code are equivalent:
+     * <pre>
+     * partial.getDayOfMonth();
+     * partial.dayOfMonth().get();
+     * </pre>
      * 
      * @return the current value
      */
     public abstract int get();
 
     /**
-     * Gets a text value from the partial instant.
+     * Gets the value of this property from the instant as a string.
+     * <p>
+     * This method returns the value converted to a <code>String</code>
+     * using <code>Integer.toString</code>. This method does NOT return
+     * textual descriptions such as 'Monday' or 'January'.
+     * See {@link #getAsText()} and {@link #getAsShortText()} for those.
+     * 
+     * @return the current value
+     * @see DateTimeField#get
+     */
+    public String getAsString() {
+        return Integer.toString(get());
+    }
+
+    /**
+     * Gets the textual value of this property from the instant as a
+     * string in the default locale.
+     * <p>
+     * This method returns the value converted to a <code>String</code>
+     * returning the appropriate textual description wherever possible.
+     * Thus, a day of week of 1 would return 'Monday' in English.
      * 
-     * @param locale  optional locale to use for selecting a text symbol
      * @return the current text value
      * @see DateTimeField#getAsText
      */
-    public String getAsText(Locale locale) {
-        return getField().getAsText(getReadablePartial(), get(), locale);
+    public final String getAsText() {
+        return getAsText(null);
     }
 
     /**
-     * Gets a text value from the partial instant.
+     * Gets the textual value of this property from the instant as a
+     * string in the specified locale.
+     * <p>
+     * This method returns the value converted to a <code>String</code>
+     * returning the appropriate textual description wherever possible.
+     * Thus, a day of week of 1 would return 'Monday' in English.
      * 
+     * @param locale  locale to use for selecting a text symbol, null means default
      * @return the current text value
      * @see DateTimeField#getAsText
      */
-    public String getAsText() {
-        return getAsText(null);
+    public String getAsText(Locale locale) {
+        return getField().getAsText(getReadablePartial(), get(), locale);
     }
 
     /**
-     * Gets a short text value from the partial instant.
+     * Gets the short textual value of this property from the instant as a
+     * string in the default locale.
+     * <p>
+     * This method returns the value converted to a <code>String</code>
+     * returning the appropriate textual description wherever possible.
+     * Thus, a day of week of 1 would return 'Mon' in English.
      * 
-     * @param locale  optional locale to use for selecting a text symbol
      * @return the current text value
      * @see DateTimeField#getAsShortText
      */
-    public String getAsShortText(Locale locale) {
-        return getField().getAsShortText(getReadablePartial(), get(), locale);
+    public final String getAsShortText() {
+        return getAsShortText(null);
     }
 
     /**
-     * Gets a short text value from the partial instant.
+     * Gets the short textual value of this property from the instant as a
+     * string in the specified locale.
+     * <p>
+     * This method returns the value converted to a <code>String</code>
+     * returning the appropriate textual description wherever possible.
+     * Thus, a day of week of 1 would return 'Mon' in English.
      * 
+     * @param locale  locale to use for selecting a text symbol, null means default
      * @return the current text value
      * @see DateTimeField#getAsShortText
      */
-    public String getAsShortText() {
-        return getAsShortText(null);
+    public String getAsShortText(Locale locale) {
+        return getField().getAsShortText(getReadablePartial(), get(), locale);
     }
 
     //-----------------------------------------------------------------------
diff --git a/JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java b/JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java
index 801fd87a4..579237317 100644
--- a/JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java
+++ b/JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java
@@ -87,7 +87,13 @@ public String getName() {
 
     //-----------------------------------------------------------------------
     /**
-     * Gets a value from the instant.
+     * Gets the value of this property from the instant.
+     * <p>
+     * For example, the following two lines of code are equivalent:
+     * <pre>
+     * datetime.getDayOfMonth();
+     * datetime.dayOfMonth().get();
+     * </pre>
      * 
      * @return the current value
      * @see DateTimeField#get
@@ -97,18 +103,27 @@ public int get() {
     }
 
     /**
-     * Gets a text value from the instant.
+     * Gets the value of this property from the instant as a string.
+     * <p>
+     * This method returns the value converted to a <code>String</code>
+     * using <code>Integer.toString</code>. This method does NOT return
+     * textual descriptions such as 'Monday' or 'January'.
+     * See {@link #getAsText()} and {@link #getAsShortText()} for those.
      * 
-     * @param locale  optional locale to use for selecting a text symbol
-     * @return the current text value
-     * @see DateTimeField#getAsText
+     * @return the current value
+     * @see DateTimeField#get
      */
-    public String getAsText(Locale locale) {
-        return getField().getAsText(getMillis(), locale);
+    public String getAsString() {
+        return Integer.toString(get());
     }
 
     /**
-     * Gets a text value from the instant.
+     * Gets the textual value of this property from the instant as a
+     * string in the default locale.
+     * <p>
+     * This method returns the value converted to a <code>String</code>
+     * returning the appropriate textual description wherever possible.
+     * Thus, a day of week of 1 would return 'Monday' in English.
      * 
      * @return the current text value
      * @see DateTimeField#getAsText
@@ -118,18 +133,28 @@ public final String getAsText() {
     }
 
     /**
-     * Gets a short text value from the instant.
+     * Gets the textual value of this property from the instant as a
+     * string in the specified locale.
+     * <p>
+     * This method returns the value converted to a <code>String</code>
+     * returning the appropriate textual description wherever possible.
+     * Thus, a day of week of 1 would return 'Monday' in English.
      * 
-     * @param locale  optional locale to use for selecting a text symbol
+     * @param locale  locale to use for selecting a text symbol, null means default
      * @return the current text value
-     * @see DateTimeField#getAsShortText
+     * @see DateTimeField#getAsText
      */
-    public String getAsShortText(Locale locale) {
-        return getField().getAsShortText(getMillis(), locale);
+    public String getAsText(Locale locale) {
+        return getField().getAsText(getMillis(), locale);
     }
 
     /**
-     * Gets a short text value from the instant.
+     * Gets the short textual value of this property from the instant as a
+     * string in the default locale.
+     * <p>
+     * This method returns the value converted to a <code>String</code>
+     * returning the appropriate textual description wherever possible.
+     * Thus, a day of week of 1 would return 'Mon' in English.
      * 
      * @return the current text value
      * @see DateTimeField#getAsShortText
@@ -138,6 +163,22 @@ public final String getAsShortText() {
         return getAsShortText(null);
     }
 
+    /**
+     * Gets the short textual value of this property from the instant as a
+     * string in the specified locale.
+     * <p>
+     * This method returns the value converted to a <code>String</code>
+     * returning the appropriate textual description wherever possible.
+     * Thus, a day of week of 1 would return 'Mon' in English.
+     * 
+     * @param locale  locale to use for selecting a text symbol, null means default
+     * @return the current text value
+     * @see DateTimeField#getAsShortText
+     */
+    public String getAsShortText(Locale locale) {
+        return getField().getAsShortText(getMillis(), locale);
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Returns the difference between this field property instant and the one
diff --git a/JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java b/JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java
index 43c7af2a7..e6267d27d 100644
--- a/JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java
+++ b/JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java
@@ -216,6 +216,7 @@ public void testPropertyGetMonthOfYear() {
         assertEquals("Property[monthOfYear]", test.monthOfYear().toString());
         assertSame(test, test.monthOfYear().getDateMidnight());
         assertEquals(6, test.monthOfYear().get());
+        assertEquals("6", test.monthOfYear().getAsString());
         assertEquals("June", test.monthOfYear().getAsText());
         assertEquals("juin", test.monthOfYear().getAsText(Locale.FRENCH));
         assertEquals("Jun", test.monthOfYear().getAsShortText());
@@ -433,6 +434,7 @@ public void testPropertyGetDayOfWeek() {
         assertEquals("Property[dayOfWeek]", test.dayOfWeek().toString());
         assertSame(test, test.dayOfWeek().getDateMidnight());
         assertEquals(3, test.dayOfWeek().get());
+        assertEquals("3", test.dayOfWeek().getAsString());
         assertEquals("Wednesday", test.dayOfWeek().getAsText());
         assertEquals("mercredi", test.dayOfWeek().getAsText(Locale.FRENCH));
         assertEquals("Wed", test.dayOfWeek().getAsShortText());
diff --git a/JodaTime/src/test/org/joda/time/TestDateTime_Properties.java b/JodaTime/src/test/org/joda/time/TestDateTime_Properties.java
index 62e85d90c..e331dec64 100644
--- a/JodaTime/src/test/org/joda/time/TestDateTime_Properties.java
+++ b/JodaTime/src/test/org/joda/time/TestDateTime_Properties.java
@@ -102,6 +102,7 @@ public void testPropertyGetEra() {
         assertEquals("Property[era]", test.era().toString());
         assertSame(test, test.era().getDateTime());
         assertEquals(1, test.era().get());
+        assertEquals("1", test.era().getAsString());
         assertEquals("AD", test.era().getAsText());
         assertEquals("ap. J.-C.", test.era().getAsText(Locale.FRENCH));
         assertEquals("AD", test.era().getAsShortText());
@@ -122,6 +123,7 @@ public void testPropertyGetYearOfEra() {
         assertEquals("Property[yearOfEra]", test.yearOfEra().toString());
         assertSame(test, test.yearOfEra().getDateTime());
         assertEquals(2004, test.yearOfEra().get());
+        assertEquals("2004", test.yearOfEra().getAsString());
         assertEquals("2004", test.yearOfEra().getAsText());
         assertEquals("2004", test.yearOfEra().getAsText(Locale.FRENCH));
         assertEquals("2004", test.yearOfEra().getAsShortText());
@@ -140,6 +142,7 @@ public void testPropertyGetCenturyOfEra() {
         assertEquals("Property[centuryOfEra]", test.centuryOfEra().toString());
         assertSame(test, test.centuryOfEra().getDateTime());
         assertEquals(20, test.centuryOfEra().get());
+        assertEquals("20", test.centuryOfEra().getAsString());
         assertEquals("20", test.centuryOfEra().getAsText());
         assertEquals("20", test.centuryOfEra().getAsText(Locale.FRENCH));
         assertEquals("20", test.centuryOfEra().getAsShortText());
@@ -158,6 +161,7 @@ public void testPropertyGetYearOfCentury() {
         assertEquals("Property[yearOfCentury]", test.yearOfCentury().toString());
         assertSame(test, test.yearOfCentury().getDateTime());
         assertEquals(4, test.yearOfCentury().get());
+        assertEquals("4", test.yearOfCentury().getAsString());
         assertEquals("4", test.yearOfCentury().getAsText());
         assertEquals("4", test.yearOfCentury().getAsText(Locale.FRENCH));
         assertEquals("4", test.yearOfCentury().getAsShortText());
@@ -176,6 +180,7 @@ public void testPropertyGetWeekyear() {
         assertEquals("Property[weekyear]", test.weekyear().toString());
         assertSame(test, test.weekyear().getDateTime());
         assertEquals(2004, test.weekyear().get());
+        assertEquals("2004", test.weekyear().getAsString());
         assertEquals("2004", test.weekyear().getAsText());
         assertEquals("2004", test.weekyear().getAsText(Locale.FRENCH));
         assertEquals("2004", test.weekyear().getAsShortText());
@@ -194,6 +199,7 @@ public void testPropertyGetYear() {
         assertEquals("Property[year]", test.year().toString());
         assertSame(test, test.year().getDateTime());
         assertEquals(2004, test.year().get());
+        assertEquals("2004", test.year().getAsString());
         assertEquals("2004", test.year().getAsText());
         assertEquals("2004", test.year().getAsText(Locale.FRENCH));
         assertEquals("2004", test.year().getAsShortText());
@@ -325,6 +331,7 @@ public void testPropertyGetMonthOfYear() {
         assertEquals("Property[monthOfYear]", test.monthOfYear().toString());
         assertSame(test, test.monthOfYear().getDateTime());
         assertEquals(6, test.monthOfYear().get());
+        assertEquals("6", test.monthOfYear().getAsString());
         assertEquals("June", test.monthOfYear().getAsText());
         assertEquals("juin", test.monthOfYear().getAsText(Locale.FRENCH));
         assertEquals("Jun", test.monthOfYear().getAsShortText());
@@ -493,6 +500,7 @@ public void testPropertyGetDayOfMonth() {
         assertEquals("Property[dayOfMonth]", test.dayOfMonth().toString());
         assertSame(test, test.dayOfMonth().getDateTime());
         assertEquals(9, test.dayOfMonth().get());
+        assertEquals("9", test.dayOfMonth().getAsString());
         assertEquals("9", test.dayOfMonth().getAsText());
         assertEquals("9", test.dayOfMonth().getAsText(Locale.FRENCH));
         assertEquals("9", test.dayOfMonth().getAsShortText());
@@ -641,6 +649,7 @@ public void testPropertyGetDayOfYear() {
         assertEquals("Property[dayOfYear]", test.dayOfYear().toString());
         assertSame(test, test.dayOfYear().getDateTime());
         assertEquals(161, test.dayOfYear().get());
+        assertEquals("161", test.dayOfYear().getAsString());
         assertEquals("161", test.dayOfYear().getAsText());
         assertEquals("161", test.dayOfYear().getAsText(Locale.FRENCH));
         assertEquals("161", test.dayOfYear().getAsShortText());
@@ -787,6 +796,7 @@ public void testPropertyGetWeekOfWeekyear() {
         assertEquals("Property[weekOfWeekyear]", test.weekOfWeekyear().toString());
         assertSame(test, test.weekOfWeekyear().getDateTime());
         assertEquals(24, test.weekOfWeekyear().get());
+        assertEquals("24", test.weekOfWeekyear().getAsString());
         assertEquals("24", test.weekOfWeekyear().getAsText());
         assertEquals("24", test.weekOfWeekyear().getAsText(Locale.FRENCH));
         assertEquals("24", test.weekOfWeekyear().getAsShortText());
@@ -899,6 +909,7 @@ public void testPropertyGetDayOfWeek() {
         assertEquals("Property[dayOfWeek]", test.dayOfWeek().toString());
         assertSame(test, test.dayOfWeek().getDateTime());
         assertEquals(3, test.dayOfWeek().get());
+        assertEquals("3", test.dayOfWeek().getAsString());
         assertEquals("Wednesday", test.dayOfWeek().getAsText());
         assertEquals("mercredi", test.dayOfWeek().getAsText(Locale.FRENCH));
         assertEquals("Wed", test.dayOfWeek().getAsShortText());
@@ -1033,6 +1044,7 @@ public void testPropertyGetHourOfDay() {
         assertEquals("Property[hourOfDay]", test.hourOfDay().toString());
         assertSame(test, test.hourOfDay().getDateTime());
         assertEquals(13, test.hourOfDay().get());
+        assertEquals("13", test.hourOfDay().getAsString());
         assertEquals("13", test.hourOfDay().getAsText());
         assertEquals("13", test.hourOfDay().getAsText(Locale.FRENCH));
         assertEquals("13", test.hourOfDay().getAsShortText());
@@ -1127,6 +1139,7 @@ public void testPropertyGetMinuteOfHour() {
         assertEquals("Property[minuteOfHour]", test.minuteOfHour().toString());
         assertSame(test, test.minuteOfHour().getDateTime());
         assertEquals(23, test.minuteOfHour().get());
+        assertEquals("23", test.minuteOfHour().getAsString());
         assertEquals("23", test.minuteOfHour().getAsText());
         assertEquals("23", test.minuteOfHour().getAsText(Locale.FRENCH));
         assertEquals("23", test.minuteOfHour().getAsShortText());
@@ -1145,6 +1158,7 @@ public void testPropertyGetMinuteOfDay() {
         assertEquals("Property[minuteOfDay]", test.minuteOfDay().toString());
         assertSame(test, test.minuteOfDay().getDateTime());
         assertEquals(803, test.minuteOfDay().get());
+        assertEquals("803", test.minuteOfDay().getAsString());
         assertEquals("803", test.minuteOfDay().getAsText());
         assertEquals("803", test.minuteOfDay().getAsText(Locale.FRENCH));
         assertEquals("803", test.minuteOfDay().getAsShortText());
@@ -1163,6 +1177,7 @@ public void testPropertyGetSecondOfMinute() {
         assertEquals("Property[secondOfMinute]", test.secondOfMinute().toString());
         assertSame(test, test.secondOfMinute().getDateTime());
         assertEquals(43, test.secondOfMinute().get());
+        assertEquals("43", test.secondOfMinute().getAsString());
         assertEquals("43", test.secondOfMinute().getAsText());
         assertEquals("43", test.secondOfMinute().getAsText(Locale.FRENCH));
         assertEquals("43", test.secondOfMinute().getAsShortText());
@@ -1181,6 +1196,7 @@ public void testPropertyGetSecondOfDay() {
         assertEquals("Property[secondOfDay]", test.secondOfDay().toString());
         assertSame(test, test.secondOfDay().getDateTime());
         assertEquals(48223, test.secondOfDay().get());
+        assertEquals("48223", test.secondOfDay().getAsString());
         assertEquals("48223", test.secondOfDay().getAsText());
         assertEquals("48223", test.secondOfDay().getAsText(Locale.FRENCH));
         assertEquals("48223", test.secondOfDay().getAsShortText());
@@ -1199,6 +1215,7 @@ public void testPropertyGetMillisOfSecond() {
         assertEquals("Property[millisOfSecond]", test.millisOfSecond().toString());
         assertSame(test, test.millisOfSecond().getDateTime());
         assertEquals(53, test.millisOfSecond().get());
+        assertEquals("53", test.millisOfSecond().getAsString());
         assertEquals("53", test.millisOfSecond().getAsText());
         assertEquals("53", test.millisOfSecond().getAsText(Locale.FRENCH));
         assertEquals("53", test.millisOfSecond().getAsShortText());
@@ -1217,6 +1234,7 @@ public void testPropertyGetMillisOfDay() {
         assertEquals("Property[millisOfDay]", test.millisOfDay().toString());
         assertSame(test, test.millisOfDay().getDateTime());
         assertEquals(48223053, test.millisOfDay().get());
+        assertEquals("48223053", test.millisOfDay().getAsString());
         assertEquals("48223053", test.millisOfDay().getAsText());
         assertEquals("48223053", test.millisOfDay().getAsText(Locale.FRENCH));
         assertEquals("48223053", test.millisOfDay().getAsShortText());
diff --git a/JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java b/JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java
index 471cc6f68..4d44a02b8 100644
--- a/JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java
+++ b/JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java
@@ -84,6 +84,7 @@ public void testPropertyGetHour() {
         assertSame(test, test.hourOfDay().getReadablePartial());
         assertSame(test, test.hourOfDay().getTimeOfDay());
         assertEquals(10, test.hourOfDay().get());
+        assertEquals("10", test.hourOfDay().getAsString());
         assertEquals("10", test.hourOfDay().getAsText());
         assertEquals("10", test.hourOfDay().getAsText(Locale.FRENCH));
         assertEquals("10", test.hourOfDay().getAsShortText());
@@ -222,6 +223,7 @@ public void testPropertyGetMinute() {
         assertSame(test, test.minuteOfHour().getReadablePartial());
         assertSame(test, test.minuteOfHour().getTimeOfDay());
         assertEquals(20, test.minuteOfHour().get());
+        assertEquals("20", test.minuteOfHour().getAsString());
         assertEquals("20", test.minuteOfHour().getAsText());
         assertEquals("20", test.minuteOfHour().getAsText(Locale.FRENCH));
         assertEquals("20", test.minuteOfHour().getAsShortText());
@@ -393,6 +395,7 @@ public void testPropertyGetSecond() {
         assertSame(test, test.secondOfMinute().getReadablePartial());
         assertSame(test, test.secondOfMinute().getTimeOfDay());
         assertEquals(30, test.secondOfMinute().get());
+        assertEquals("30", test.secondOfMinute().getAsString());
         assertEquals("30", test.secondOfMinute().getAsText());
         assertEquals("30", test.secondOfMinute().getAsText(Locale.FRENCH));
         assertEquals("30", test.secondOfMinute().getAsShortText());
@@ -558,6 +561,7 @@ public void testPropertyGetMilli() {
         assertSame(test, test.millisOfSecond().getReadablePartial());
         assertSame(test, test.millisOfSecond().getTimeOfDay());
         assertEquals(40, test.millisOfSecond().get());
+        assertEquals("40", test.millisOfSecond().getAsString());
         assertEquals("40", test.millisOfSecond().getAsText());
         assertEquals("40", test.millisOfSecond().getAsText(Locale.FRENCH));
         assertEquals("40", test.millisOfSecond().getAsShortText());
diff --git a/JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java b/JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java
index bc460f313..a77db27f9 100644
--- a/JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java
+++ b/JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java
@@ -77,6 +77,7 @@ public void testPropertyGetYear() {
         assertSame(test, test.year().getReadablePartial());
         assertSame(test, test.year().getYearMonthDay());
         assertEquals(1972, test.year().get());
+        assertEquals("1972", test.year().getAsString());
         assertEquals("1972", test.year().getAsText());
         assertEquals("1972", test.year().getAsText(Locale.FRENCH));
         assertEquals("1972", test.year().getAsShortText());
@@ -187,6 +188,7 @@ public void testPropertyGetMonth() {
         assertSame(test, test.monthOfYear().getReadablePartial());
         assertSame(test, test.monthOfYear().getYearMonthDay());
         assertEquals(6, test.monthOfYear().get());
+        assertEquals("6", test.monthOfYear().getAsString());
         assertEquals("June", test.monthOfYear().getAsText());
         assertEquals("juin", test.monthOfYear().getAsText(Locale.FRENCH));
         assertEquals("Jun", test.monthOfYear().getAsShortText());
@@ -331,6 +333,7 @@ public void testPropertyGetDay() {
         assertSame(test, test.dayOfMonth().getReadablePartial());
         assertSame(test, test.dayOfMonth().getYearMonthDay());
         assertEquals(9, test.dayOfMonth().get());
+        assertEquals("9", test.dayOfMonth().getAsString());
         assertEquals("9", test.dayOfMonth().getAsText());
         assertEquals("9", test.dayOfMonth().getAsText(Locale.FRENCH));
         assertEquals("9", test.dayOfMonth().getAsShortText());

From 158c9d2f00a9b95a8d6c46eb112a35273b70fc12 Mon Sep 17 00:00:00 2001
From: Mario Ivankovits <mario@ops.co.at>
Date: Tue, 17 May 2005 20:32:21 +0000
Subject: [PATCH 031/124] Additional persister which stores the timezone in an
 extra column test cases

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@763 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/README.txt                    |  17 +++
 JodaTimeContrib/project.xml                   |  60 +++++++-
 .../hibernate/PersistentDateTimeTZ.java       | 132 ++++++++++++++++++
 .../joda/time/contrib/hibernate/Event.java    |  38 +++++
 .../joda/time/contrib/hibernate/EventTZ.java  |  38 +++++
 .../hibernate/TestPersistentDateTime.java     | 126 +++++++++++++++++
 .../joda/time/contrib/hibernate/event.hbm.xml |  16 +++
 .../time/contrib/hibernate/eventTZ.hbm.xml    |  19 +++
 8 files changed, 444 insertions(+), 2 deletions(-)
 create mode 100644 JodaTimeContrib/README.txt
 create mode 100644 JodaTimeContrib/src/java/org/joda/time/contrib/hibernate/PersistentDateTimeTZ.java
 create mode 100644 JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/Event.java
 create mode 100644 JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/EventTZ.java
 create mode 100644 JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/TestPersistentDateTime.java
 create mode 100644 JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/event.hbm.xml
 create mode 100644 JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/eventTZ.hbm.xml

diff --git a/JodaTimeContrib/README.txt b/JodaTimeContrib/README.txt
new file mode 100644
index 000000000..e91d92485
--- /dev/null
+++ b/JodaTimeContrib/README.txt
@@ -0,0 +1,17 @@
+
+Additional setup for test cases
+-------------------------------
+
+Joda uses maven for the build process. Maven tries to download all dependencies from ibiblio.
+Some of them are not hosted due to their licensing.
+
+Thus you have to download them and put them in your local maven repository.
+e.g. on Linux YOUR_HOME/.maven/respository
+
+
+Java Transaction API:
+
+http://java.sun.com/products/jta
+
+# mkdir ~/.maven/repository/jta/jars
+# cp jta-1_0_1B-classes.zip ~/.maven/repository/jta/jars
\ No newline at end of file
diff --git a/JodaTimeContrib/project.xml b/JodaTimeContrib/project.xml
index 783e4fdb9..0aa97ddf3 100644
--- a/JodaTimeContrib/project.xml
+++ b/JodaTimeContrib/project.xml
@@ -97,7 +97,63 @@
     <dependency>
       <groupId>hibernate</groupId>
       <artifactId>hibernate</artifactId>
-      <version>3.0rc1</version>
+      <version>3.0.1</version>
+    </dependency>
+  </dependencies>
+
+  <dependencies>
+    <dependency>
+      <groupId>commons-logging</groupId>
+      <artifactId>commons-logging-api</artifactId>
+      <version>1.0.4</version>
+    </dependency>
+  </dependencies>
+
+  <dependencies>
+    <dependency>
+      <groupId>commons-collections</groupId>
+      <artifactId>commons-collections</artifactId>
+      <version>3.1</version>
+    </dependency>
+  </dependencies>
+
+  <dependencies>
+    <dependency>
+      <groupId>hsqldb</groupId>
+      <artifactId>hsqldb</artifactId>
+      <version>1.7.3.3</version>
+    </dependency>
+  </dependencies>
+
+  <dependencies>
+    <dependency>
+      <groupId>ehcache</groupId>
+      <artifactId>ehcache</artifactId>
+      <version>1.1</version>
+    </dependency>
+  </dependencies>
+
+  <dependencies>
+    <dependency>
+      <groupId>dom4j</groupId>
+      <artifactId>dom4j</artifactId>
+      <version>1.6</version>
+    </dependency>
+  </dependencies>
+
+  <dependencies>
+    <dependency>
+      <groupId>cglib</groupId>
+      <artifactId>cglib</artifactId>
+      <version>full-2.0.2</version>
+    </dependency>
+  </dependencies>
+
+  <dependencies>
+    <dependency>
+      <groupId>jta</groupId>
+      <artifactId>jta</artifactId>
+      <jar>jta-1_0_1B-classes.zip</jar>
     </dependency>
   </dependencies>
 
@@ -106,7 +162,7 @@
     <unitTestSourceDirectory>src/test</unitTestSourceDirectory>
     <unitTest>
       <includes>
-        <include>org/joda/time/contrib/**/TestAll.java</include>
+        <include>org/joda/time/contrib/**/Test*.java</include>
       </includes>
     </unitTest>
   </build>
diff --git a/JodaTimeContrib/src/java/org/joda/time/contrib/hibernate/PersistentDateTimeTZ.java b/JodaTimeContrib/src/java/org/joda/time/contrib/hibernate/PersistentDateTimeTZ.java
new file mode 100644
index 000000000..20262545f
--- /dev/null
+++ b/JodaTimeContrib/src/java/org/joda/time/contrib/hibernate/PersistentDateTimeTZ.java
@@ -0,0 +1,132 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.contrib.hibernate;
+
+import org.hibernate.Hibernate;
+import org.hibernate.HibernateException;
+import org.hibernate.usertype.UserType;
+import org.joda.time.DateTime;
+import org.joda.time.DateTimeZone;
+
+import java.io.Serializable;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Types;
+
+/**
+ * Persist {@link org.joda.time.DateTime} via hibernate.<br />
+ * The timezone will be stored in an extra column
+ *
+ * @author Mario Ivankovits (mario@ops.co.at)
+ */
+public class PersistentDateTimeTZ implements UserType
+{
+    private static final int[] SQL_TYPES = new int[]
+    {
+        Types.TIMESTAMP,
+        Types.VARCHAR,
+    };
+
+    public int[] sqlTypes()
+    {
+        return SQL_TYPES;
+    }
+
+    public Class returnedClass()
+    {
+        return DateTime.class;
+    }
+
+    public boolean equals(Object x, Object y) throws HibernateException
+    {
+        if (x == y)
+        {
+            return true;
+        }
+        if (x == null || y == null)
+        {
+            return false;
+        }
+        DateTime dtx = (DateTime) x;
+        DateTime dty = (DateTime) y;
+
+        return dtx.equals(dty);
+    }
+
+    public int hashCode(Object object) throws HibernateException
+    {
+        return object.hashCode();
+    }
+
+    public Object nullSafeGet(ResultSet resultSet, String[] strings, Object object) throws HibernateException, SQLException
+    {
+        Object timestamp = Hibernate.TIMESTAMP.nullSafeGet(resultSet, strings[0]);
+        Object timezone = Hibernate.STRING.nullSafeGet(resultSet, strings[1]);
+        if (timestamp == null || timezone == null)
+        {
+            return null;
+        }
+
+        return new DateTime(timestamp, DateTimeZone.forID(timezone.toString()));
+    }
+
+    public void nullSafeSet(PreparedStatement preparedStatement, Object value, int index) throws HibernateException, SQLException
+    {
+        if (value == null)
+        {
+            Hibernate.TIMESTAMP.nullSafeSet(preparedStatement, null, index);
+            Hibernate.STRING.nullSafeSet(preparedStatement, null, index+1);
+        }
+        else
+        {
+            DateTime dt = (DateTime) value;
+
+            Hibernate.TIMESTAMP.nullSafeSet(preparedStatement, dt.toDate(), index);
+            Hibernate.STRING.nullSafeSet(preparedStatement, dt.getZone().getID(), index+1);
+        }
+    }
+
+    public Object deepCopy(Object value) throws HibernateException
+    {
+        if (value == null)
+        {
+            return null;
+        }
+
+        return new DateTime(value);
+    }
+
+    public boolean isMutable()
+    {
+        return false;
+    }
+
+    public Serializable disassemble(Object value) throws HibernateException
+    {
+        return (Serializable) value;
+    }
+
+    public Object assemble(Serializable cached, Object value) throws HibernateException
+    {
+        return cached;
+    }
+
+    public Object replace(Object original, Object target, Object owner) throws HibernateException
+    {
+        return original;
+    }
+}
diff --git a/JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/Event.java b/JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/Event.java
new file mode 100644
index 000000000..166f0644d
--- /dev/null
+++ b/JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/Event.java
@@ -0,0 +1,38 @@
+package org.joda.time.contrib.hibernate;
+
+import org.joda.time.DateTime;
+
+import java.io.Serializable;
+
+/**
+ * PO to be stored using hibernate
+ */
+public class Event implements Serializable
+{
+    private int id;
+    private DateTime dateTime;
+
+    public Event()
+    {
+    }
+
+    public int getId()
+    {
+        return id;
+    }
+
+    public void setId(int id)
+    {
+        this.id = id;
+    }
+
+    public DateTime getDateTime()
+    {
+        return dateTime;
+    }
+
+    public void setDateTime(DateTime dateTime)
+    {
+        this.dateTime = dateTime;
+    }
+}
diff --git a/JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/EventTZ.java b/JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/EventTZ.java
new file mode 100644
index 000000000..b3095095a
--- /dev/null
+++ b/JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/EventTZ.java
@@ -0,0 +1,38 @@
+package org.joda.time.contrib.hibernate;
+
+import org.joda.time.DateTime;
+
+import java.io.Serializable;
+
+/**
+ * PO to be stored using hibernate
+ */
+public class EventTZ implements Serializable
+{
+    private int id;
+    private DateTime dateTime;
+
+    public EventTZ()
+    {
+    }
+
+    public int getId()
+    {
+        return id;
+    }
+
+    public void setId(int id)
+    {
+        this.id = id;
+    }
+
+    public DateTime getDateTime()
+    {
+        return dateTime;
+    }
+
+    public void setDateTime(DateTime dateTime)
+    {
+        this.dateTime = dateTime;
+    }
+}
diff --git a/JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/TestPersistentDateTime.java b/JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/TestPersistentDateTime.java
new file mode 100644
index 000000000..44eac2304
--- /dev/null
+++ b/JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/TestPersistentDateTime.java
@@ -0,0 +1,126 @@
+package org.joda.time.contrib.hibernate;
+
+import junit.framework.TestCase;
+import org.hibernate.Session;
+import org.hibernate.SessionFactory;
+import org.hibernate.cfg.Configuration;
+import org.hibernate.dialect.HSQLDialect;
+import org.hibernate.tool.hbm2ddl.SchemaUpdate;
+import org.joda.time.DateTime;
+import org.joda.time.DateTimeZone;
+
+import java.io.File;
+import java.sql.SQLException;
+
+public class TestPersistentDateTime extends TestCase
+{
+    private SessionFactory factory;
+
+    private DateTime writeReadTimes[] = new DateTime[]
+    {
+        new DateTime(2004, 2, 25, 17, 3, 45, 760),
+        new DateTime(1980, 3, 11,  2, 3, 45,   0, DateTimeZone.forOffsetHours(2))
+    };
+
+    public void testSimpleStore() throws SQLException
+    {
+        SessionFactory factory = getSessionFactory();
+
+        Session session = factory.openSession();
+
+        for (int i = 0; i<writeReadTimes.length; i++)
+        {
+            DateTime writeReadTime = writeReadTimes[i];
+
+            Event event = new Event();
+            event.setId(i);
+            event.setDateTime(writeReadTime);
+
+            session.save(event);
+        }
+
+        session.flush();
+        session.connection().commit();
+        session.close();
+
+        for (int i = 0; i<writeReadTimes.length; i++)
+        {
+            DateTime writeReadTime = writeReadTimes[i];
+
+            session = factory.openSession();
+            Event eventReread = (Event) session.get(Event.class, new Integer(i));
+
+            assertNotNull("get failed - event#'" + i + "'not found", eventReread);
+            assertNotNull("get failed - returned null", eventReread.getDateTime());
+
+            // we loose the timezone, so we have to normalize both to offset=0
+            assertEquals("get failed - returned different time",
+                writeReadTime.toDateTime(DateTimeZone.forOffsetHours(0)),
+                eventReread.getDateTime().toDateTime(DateTimeZone.forOffsetHours(0)));
+
+            session.close();
+        }
+    }
+
+    public void testStoreWithTimezone() throws SQLException
+    {
+        SessionFactory factory = getSessionFactory();
+
+        Session session = factory.openSession();
+
+        for (int i = 0; i<writeReadTimes.length; i++)
+        {
+            DateTime writeReadTime = writeReadTimes[i];
+
+            EventTZ event = new EventTZ();
+            event.setId(i);
+            event.setDateTime(writeReadTime);
+
+            session.save(event);
+        }
+
+        session.flush();
+        session.connection().commit();
+        session.close();
+
+        for (int i = 0; i<writeReadTimes.length; i++)
+        {
+            DateTime writeReadTime = writeReadTimes[i];
+
+            session = factory.openSession();
+            EventTZ eventReread = (EventTZ) session.get(EventTZ.class, new Integer(i));
+
+            assertNotNull("get failed - event#'" + i + "'not found", eventReread);
+            assertNotNull("get failed - returned null", eventReread.getDateTime());
+
+            assertEquals("get failed - returned different time",
+                writeReadTime, eventReread.getDateTime());
+
+            session.close();
+        }
+    }
+
+    private SessionFactory getSessionFactory()
+    {
+        if (this.factory == null)
+        {
+            Configuration cfg = new Configuration();
+
+            cfg.addFile(new File("src/test/org/joda/time/contrib/hibernate/event.hbm.xml"));
+            cfg.addFile(new File("src/test/org/joda/time/contrib/hibernate/eventTZ.hbm.xml"));
+
+            cfg.setProperty("hibernate.connection.driver_class", "org.hsqldb.jdbcDriver");
+            cfg.setProperty("hibernate.connection.url", "jdbc:hsqldb:mem:hbmtest");
+            cfg.setProperty("hibernate.dialect", HSQLDialect.class.getName());
+
+            cfg.setProperty("hibernate.show_sql", "true");
+            SessionFactory factory = cfg.buildSessionFactory();
+
+            SchemaUpdate update = new SchemaUpdate(cfg);
+            update.execute(false, true);
+
+            this.factory = factory;
+        }
+        return factory;
+    }
+}
diff --git a/JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/event.hbm.xml b/JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/event.hbm.xml
new file mode 100644
index 000000000..31995a77d
--- /dev/null
+++ b/JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/event.hbm.xml
@@ -0,0 +1,16 @@
+<?xml version="1.0"?>
+<!DOCTYPE hibernate-mapping PUBLIC
+        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
+        "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
+
+<hibernate-mapping package="org.joda.time.contrib.hibernate">
+
+        <class name="Event">
+
+                <id name="id" />
+
+                <property type="org.joda.time.contrib.hibernate.PersistentDateTime" name="dateTime"/>
+
+        </class>
+
+</hibernate-mapping>
diff --git a/JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/eventTZ.hbm.xml b/JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/eventTZ.hbm.xml
new file mode 100644
index 000000000..60eec9e44
--- /dev/null
+++ b/JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/eventTZ.hbm.xml
@@ -0,0 +1,19 @@
+<?xml version="1.0"?>
+<!DOCTYPE hibernate-mapping PUBLIC
+        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
+        "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
+
+<hibernate-mapping package="org.joda.time.contrib.hibernate">
+
+        <class name="EventTZ">
+
+                <id name="id" />
+
+                <property type="org.joda.time.contrib.hibernate.PersistentDateTimeTZ" name="dateTime">
+                    <column name="dateTimeTime"/>
+                    <column name="dateTimeTZ"/>
+                </property>
+
+        </class>
+
+</hibernate-mapping>

From 7c694392843de542cac5718a3331a2cb39d60869 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Sat, 28 May 2005 16:10:38 +0000
Subject: [PATCH 032/124] Minor comment fix.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@764 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/DateTime.java | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/DateTime.java b/JodaTime/src/java/org/joda/time/DateTime.java
index 24e696753..62f0989c9 100644
--- a/JodaTime/src/java/org/joda/time/DateTime.java
+++ b/JodaTime/src/java/org/joda/time/DateTime.java
@@ -372,7 +372,7 @@ public DateTime withChronology(Chronology newChronology) {
      * from this method with Europe/Paris would be 13:30.
      * <p>
      * The returned object will be a new instance of the same implementation type.
-     * This method changes alters the time zone, and does not change the
+     * This method changes the time zone, and does not change the
      * millisecond instant, with the effect that the field values usually change.
      * The returned object will be either be a new instance or <code>this</code>.
      *
@@ -393,7 +393,7 @@ public DateTime withZone(DateTimeZone newZone) {
      * the result from this method with Europe/Paris would be 12:30 (ie. 11:30Z).
      * <p>
      * The returned object will be a new instance of the same implementation type.
-     * This method alters the time zone and the millisecond instant to keep
+     * This method changes the time zone and the millisecond instant to keep
      * the field values the same.
      * The returned object will be either be a new instance or <code>this</code>.
      *

From 225ca55301809ebd8869cf4e7bcf11cee2a84c06 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Mon, 30 May 2005 18:01:39 +0000
Subject: [PATCH 033/124] Range duration field of dayOfMonth was not consistent
 with monthOfYear. This bug manifested itself when adding/subtracting periods
 to partials.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@765 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  4 ++++
 .../org/joda/time/chrono/GJChronology.java    | 23 ++++++++++++++-----
 .../joda/time/chrono/TestGJChronology.java    | 14 +++++++++++
 3 files changed, 35 insertions(+), 6 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index bc8167b51..128655c1d 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -34,6 +34,10 @@ Bug fixes since 1.0
 - ZoneInfoCompiler
   Comment parsing bug disabled DST for Europe/Athens after 1980.
 
+- GJChronology
+  Range duration field of dayOfMonth was not consistent with monthOfYear. This
+  bug manifested itself when adding/subtracting periods to partials.
+
 Enhancements since 1.0
 ----------------------
 - YearMonthDay/TimeOfDay
diff --git a/JodaTime/src/java/org/joda/time/chrono/GJChronology.java b/JodaTime/src/java/org/joda/time/chrono/GJChronology.java
index d6afd9915..1ec240895 100644
--- a/JodaTime/src/java/org/joda/time/chrono/GJChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/GJChronology.java
@@ -478,7 +478,6 @@ protected void assemble(Fields fields) {
         // These fields just require basic cutover support.
         {
             fields.era = new CutoverField(julian.era(), fields.era, iCutoverMillis);
-            fields.dayOfMonth = new CutoverField(julian.dayOfMonth(), fields.dayOfMonth, iCutoverMillis);
         }
 
         // DayOfYear and weekOfWeekyear require special handling since cutover
@@ -524,6 +523,15 @@ protected void assemble(Fields fields) {
                 julian.weekyearOfCentury(), fields.weekyearOfCentury, fields.weekyears, iCutoverMillis);
             fields.weekyears = fields.weekyear.getDurationField();
         }
+
+        // These fields require basic cutover support, except they must link to
+        // imprecise durations.
+        {
+            CutoverField cf = new CutoverField
+                (julian.dayOfMonth(), fields.dayOfMonth, iCutoverMillis);
+            cf.iRangeDurationField = fields.months;
+            fields.dayOfMonth = cf;
+        }
     }
 
     long julianToGregorianByYear(long instant) {
@@ -556,6 +564,7 @@ long gregorianToJulianByWeekyear(long instant) {
         final boolean iConvertByWeekyear;
 
         protected DurationField iDurationField;
+        protected DurationField iRangeDurationField;
 
         /**
          * @param julianField field from the chronology used before the cutover instant
@@ -582,6 +591,12 @@ long gregorianToJulianByWeekyear(long instant) {
             // Although average length of Julian and Gregorian years differ,
             // use the Gregorian duration field because it is more accurate.
             iDurationField = gregorianField.getDurationField();
+
+            DurationField rangeField = gregorianField.getRangeDurationField();
+            if (rangeField == null) {
+                rangeField = julianField.getRangeDurationField();
+            }
+            iRangeDurationField = rangeField;
         }
 
         public boolean isLenient() {
@@ -687,11 +702,7 @@ public DurationField getDurationField() {
         }
 
         public DurationField getRangeDurationField() {
-            DurationField rangeField = iGregorianField.getRangeDurationField();
-            if (rangeField == null) {
-                rangeField = iJulianField.getRangeDurationField();
-            }
-            return rangeField;
+            return iRangeDurationField;
         }
 
         public boolean isLeap(long instant) {
diff --git a/JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java b/JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java
index 697b77bff..2f39d2262 100644
--- a/JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java
+++ b/JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java
@@ -28,6 +28,8 @@
 import org.joda.time.DurationField;
 import org.joda.time.DurationFieldType;
 import org.joda.time.Instant;
+import org.joda.time.Period;
+import org.joda.time.YearMonthDay;
 
 /**
  * This class is a Junit unit test for GJChronology.
@@ -407,6 +409,18 @@ public void testCutoverAddDays() {
         testAdd("1582-10-15", DurationFieldType.days(), 10, "1582-10-25");
     }
 
+    public void testSubtractDays() {
+        // This is a test for a bug in version 1.0. The dayOfMonth range
+        // duration field did not match the monthOfYear duration field. This
+        // caused an exception to be thrown when subtracting days.
+        DateTime dt = new DateTime
+            (1112306400000L, GJChronology.getInstance(DateTimeZone.forID("Europe/Berlin")));
+        YearMonthDay ymd = dt.toYearMonthDay();
+        while (ymd.toDateTimeAtMidnight().getDayOfWeek() != DateTimeConstants.MONDAY) { 
+            ymd = ymd.minus(Period.days(1));
+        }
+    }
+
     private void testAdd(String start, DurationFieldType type, int amt, String end) {
         DateTime dtStart = new DateTime(start, GJChronology.getInstance(DateTimeZone.UTC));
         DateTime dtEnd = new DateTime(end, GJChronology.getInstance(DateTimeZone.UTC));

From e9a0d0df22a9b3d06940daa76f6accb5e63b2df9 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Mon, 30 May 2005 18:20:37 +0000
Subject: [PATCH 034/124] Added IllegalFieldValueException class.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@766 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |   5 +
 JodaTime/ToDo.txt                             |   2 -
 .../joda/time/IllegalFieldValueException.java | 231 ++++++++++++
 .../org/joda/time/chrono/BaseChronology.java  |  21 +-
 .../joda/time/chrono/BaseGJChronology.java    |  17 +-
 .../joda/time/chrono/CopticChronology.java    |   7 +-
 .../time/chrono/CopticEraDateTimeField.java   |   3 +-
 .../org/joda/time/chrono/GJChronology.java    |   9 +-
 .../org/joda/time/chrono/GJLocaleSymbols.java |  11 +-
 .../joda/time/chrono/JulianChronology.java    |   5 +-
 .../chrono/ThaiBuddhistEraDateTimeField.java  |   3 +-
 .../org/joda/time/chrono/ZonedChronology.java |   5 +-
 .../joda/time/field/BaseDateTimeField.java    |   3 +-
 .../java/org/joda/time/field/FieldUtils.java  |  49 +--
 .../joda/time/field/SkipDateTimeField.java    |   5 +-
 JodaTime/src/test/org/joda/time/TestAll.java  |   5 +-
 .../time/TestIllegalFieldValueException.java  | 334 ++++++++++++++++++
 17 files changed, 655 insertions(+), 60 deletions(-)
 create mode 100644 JodaTime/src/java/org/joda/time/IllegalFieldValueException.java
 create mode 100644 JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 128655c1d..145ecea76 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -70,6 +70,11 @@ Enhancements since 1.0
 - Interval
   Added overlap method that returns the actual overlap between two intervals.
 
+- IllegalFieldValueException
+  Added new exception subclass of IllegalArgumentException to capture more
+  context when a field is set to an illegal value. This can be helpful in
+  interactive applications.
+
 - DateTimeZone classes updated to latest data from the Olsen time zone database
 
 
diff --git a/JodaTime/ToDo.txt b/JodaTime/ToDo.txt
index 3f84371bd..8c734cce9 100644
--- a/JodaTime/ToDo.txt
+++ b/JodaTime/ToDo.txt
@@ -3,8 +3,6 @@ JodaTime ToDo list
 
 For 1.1
 -------
-- DateTimeFormatter.withPivotYear(year)
-    to provide more control of 2 digit year formatting
 
 The TODO list for 1.1 has not been set yet, however I would hope that
 at least some of the items below will be included.
diff --git a/JodaTime/src/java/org/joda/time/IllegalFieldValueException.java b/JodaTime/src/java/org/joda/time/IllegalFieldValueException.java
new file mode 100644
index 000000000..488182a61
--- /dev/null
+++ b/JodaTime/src/java/org/joda/time/IllegalFieldValueException.java
@@ -0,0 +1,231 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time;
+
+/**
+ * Exception thrown when attempting to set a field outisde its supported range.
+ *
+ * @author Brian S O'Neill
+ * @since 1.1
+ */
+public class IllegalFieldValueException extends IllegalArgumentException {
+    private static String createMessage(String fieldName, Number value,
+                                        Number lowerBound, Number upperBound) {
+        StringBuffer buf = new StringBuffer()
+            .append("Value ").append(value).append(" for ").append(fieldName).append(' ');
+
+        if (lowerBound == null) {
+            if (upperBound == null) {
+                buf.append("is not supported");
+            } else {
+                buf.append("must not be larger than ").append(upperBound);
+            }
+        } else if (upperBound == null) {
+            buf.append("must not be smaller than ").append(lowerBound);
+        } else {
+            buf.append("must be in the range [")
+                .append(lowerBound)
+                .append(',')
+                .append(upperBound)
+                .append(']');
+        }
+
+        return buf.toString();
+    }
+
+    private static String createMessage(String fieldName, String value) {
+        StringBuffer buf = new StringBuffer().append("Value ");
+
+        if (value == null) {
+            buf.append("null");
+        } else {
+            buf.append('"');
+            buf.append(value);
+            buf.append('"');
+        }
+
+        buf.append(" for ").append(fieldName).append(' ').append("is not supported");
+        
+        return buf.toString();
+    }
+    
+    private final DateTimeFieldType iDateTimeFieldType;
+    private final DurationFieldType iDurationFieldType;
+    private final String iFieldName;
+    private final Number iNumberValue;
+    private final String iStringValue;
+    private final Number iLowerBound;
+    private final Number iUpperBound;
+
+    /**
+     * @param fieldType type of field being set
+     * @param value illegal value being set
+     * @param lowerBound lower legal field value, or null if not applicable
+     * @param upperBound upper legal field value, or null if not applicable
+     */
+    public IllegalFieldValueException(DateTimeFieldType fieldType,
+                                      Number value, Number lowerBound, Number upperBound) {
+        super(createMessage(fieldType.getName(), value, lowerBound, upperBound));
+        iDateTimeFieldType = fieldType;
+        iDurationFieldType = null;
+        iFieldName = fieldType.getName();
+        iNumberValue = value;
+        iStringValue = null;
+        iLowerBound = lowerBound;
+        iUpperBound = upperBound;
+    }
+
+    /**
+     * @param fieldType type of field being set
+     * @param value illegal value being set
+     * @param lowerBound lower legal field value, or null if not applicable
+     * @param upperBound upper legal field value, or null if not applicable
+     */
+    public IllegalFieldValueException(DurationFieldType fieldType,
+                                      Number value, Number lowerBound, Number upperBound) {
+        super(createMessage(fieldType.getName(), value, lowerBound, upperBound));
+        iDateTimeFieldType = null;
+        iDurationFieldType = fieldType;
+        iFieldName = fieldType.getName();
+        iNumberValue = value;
+        iStringValue = null;
+        iLowerBound = lowerBound;
+        iUpperBound = upperBound;
+    }
+
+    /**
+     * @param fieldName name of field being set
+     * @param value illegal value being set
+     * @param lowerBound lower legal field value, or null if not applicable
+     * @param upperBound upper legal field value, or null if not applicable
+     */
+    public IllegalFieldValueException(String fieldName,
+                                      Number value, Number lowerBound, Number upperBound) {
+        super(createMessage(fieldName, value, lowerBound, upperBound));
+        iDateTimeFieldType = null;
+        iDurationFieldType = null;
+        iFieldName = fieldName;
+        iNumberValue = value;
+        iStringValue = null;
+        iLowerBound = lowerBound;
+        iUpperBound = upperBound;
+    }
+
+    /**
+     * @param fieldType type of field being set
+     * @param value illegal value being set
+     */
+    public IllegalFieldValueException(DateTimeFieldType fieldType, String value) {
+        super(createMessage(fieldType.getName(), value));
+        iDateTimeFieldType = fieldType;
+        iDurationFieldType = null;
+        iFieldName = fieldType.getName();
+        iStringValue = value;
+        iNumberValue = null;
+        iLowerBound = null;
+        iUpperBound = null;
+    }
+
+    /**
+     * @param fieldType type of field being set
+     * @param value illegal value being set
+     */
+    public IllegalFieldValueException(DurationFieldType fieldType, String value) {
+        super(createMessage(fieldType.getName(), value));
+        iDateTimeFieldType = null;
+        iDurationFieldType = fieldType;
+        iFieldName = fieldType.getName();
+        iStringValue = value;
+        iNumberValue = null;
+        iLowerBound = null;
+        iUpperBound = null;
+    }
+
+    /**
+     * @param fieldName name of field being set
+     * @param value illegal value being set
+     */
+    public IllegalFieldValueException(String fieldName, String value) {
+        super(createMessage(fieldName, value));
+        iDateTimeFieldType = null;
+        iDurationFieldType = null;
+        iFieldName = fieldName;
+        iStringValue = value;
+        iNumberValue = null;
+        iLowerBound = null;
+        iUpperBound = null;
+    }
+
+    /**
+     * Returns the DateTimeFieldType whose value was invalid, or null if not applicable.
+     */
+    public DateTimeFieldType getDateTimeFieldType() {
+        return iDateTimeFieldType;
+    }
+
+    /**
+     * Returns the DurationFieldType whose value was invalid, or null if not applicable.
+     */
+    public DurationFieldType getDurationFieldType() {
+        return iDurationFieldType;
+    }
+
+    /**
+     * Returns the name of the field whose value was invalid.
+     */
+    public String getFieldName() {
+        return iFieldName;
+    }
+
+    /**
+     * Returns the illegal integer value assigned to the field, or null if not applicable.
+     */
+    public Number getIllegalNumberValue() {
+        return iNumberValue;
+    }
+
+    /**
+     * Returns the illegal string value assigned to the field, or null if not applicable.
+     */
+    public String getIllegalStringValue() {
+        return iStringValue;
+    }
+
+    /**
+     * Returns the illegal value assigned to the field as a non-null string.
+     */
+    public String getIllegalValueAsString() {
+        String value = iStringValue;
+        if (value == null) {
+            value = String.valueOf(iNumberValue);
+        }
+        return value;
+    }
+
+    /**
+     * Returns the lower bound of the legal value range, or null if not applicable.
+     */
+    public Number getLowerBound() {
+        return iLowerBound;
+    }
+
+    /**
+     * Returns the upper bound of the legal value range, or null if not applicable.
+     */
+    public Number getUpperBound() {
+        return iUpperBound;
+    }
+}
diff --git a/JodaTime/src/java/org/joda/time/chrono/BaseChronology.java b/JodaTime/src/java/org/joda/time/chrono/BaseChronology.java
index 9783042b2..ac43706df 100644
--- a/JodaTime/src/java/org/joda/time/chrono/BaseChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/BaseChronology.java
@@ -23,6 +23,7 @@
 import org.joda.time.DateTimeZone;
 import org.joda.time.DurationField;
 import org.joda.time.DurationFieldType;
+import org.joda.time.IllegalFieldValueException;
 import org.joda.time.ReadablePartial;
 import org.joda.time.ReadablePeriod;
 import org.joda.time.field.FieldUtils;
@@ -184,12 +185,14 @@ public void validate(ReadablePartial partial, int[] values) {
             int value = values[i];
             DateTimeField field = partial.getField(i);
             if (value < field.getMinimumValue()) {
-                throw new IllegalArgumentException("Value " + value +
-                        " for " + field.getName() + " is less than minimum");
+                throw new IllegalFieldValueException
+                    (field.getType(), new Integer(value),
+                     new Integer(field.getMinimumValue()), null);
             }
             if (value > field.getMaximumValue()) {
-                throw new IllegalArgumentException("Value " + value +
-                        " for " + field.getName() + " is greater than maximum");
+                throw new IllegalFieldValueException
+                    (field.getType(), new Integer(value),
+                     null, new Integer(field.getMaximumValue()));
             }
         }
         // check values in specific range, catching really odd cases like 30th Feb
@@ -197,12 +200,14 @@ public void validate(ReadablePartial partial, int[] values) {
             int value = values[i];
             DateTimeField field = partial.getField(i);
             if (value < field.getMinimumValue(partial, values)) {
-                throw new IllegalArgumentException("Value " + value +
-                        " for " + field.getName() + " is less than minimum");
+                throw new IllegalFieldValueException
+                    (field.getType(), new Integer(value),
+                     new Integer(field.getMinimumValue(partial, values)), null);
             }
             if (value > field.getMaximumValue(partial, values)) {
-                throw new IllegalArgumentException("Value " + value +
-                        " for " + field.getName() + " is greater than maximum");
+                throw new IllegalFieldValueException
+                    (field.getType(), new Integer(value),
+                     null, new Integer(field.getMaximumValue(partial, values)));
             }
         }
     }
diff --git a/JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java b/JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java
index 1d1ef11b9..ff8ce122c 100644
--- a/JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java
@@ -211,7 +211,8 @@ public final long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
             return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);
         }
 
-        FieldUtils.verifyValueBounds("millisOfDay", millisOfDay, 0, DateTimeConstants.MILLIS_PER_DAY);
+        FieldUtils.verifyValueBounds
+            (DateTimeFieldType.millisOfDay(), millisOfDay, 0, DateTimeConstants.MILLIS_PER_DAY);
         return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;
     }
 
@@ -226,10 +227,10 @@ public final long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                                           hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         }
 
-        FieldUtils.verifyValueBounds("hourOfDay", hourOfDay, 0, 23);
-        FieldUtils.verifyValueBounds("minuteOfHour", minuteOfHour, 0, 59);
-        FieldUtils.verifyValueBounds("secondOfMinute", secondOfMinute, 0, 59);
-        FieldUtils.verifyValueBounds("millisOfSecond", millisOfSecond, 0, 999);
+        FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);
+        FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);
+        FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);
+        FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);
 
         return getDateMidnightMillis(year, monthOfYear, dayOfMonth)
             + hourOfDay * DateTimeConstants.MILLIS_PER_HOUR
@@ -727,12 +728,12 @@ final int getMillisOfDay(long instant) {
     long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth)
         throws IllegalArgumentException
     {
-        FieldUtils.verifyValueBounds("year", year, getMinYear(), getMaxYear());
-        FieldUtils.verifyValueBounds("monthOfYear", monthOfYear, 1, 12);
+        FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());
+        FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, 12);
 
         boolean isLeap = isLeapYear(year);
 
-        FieldUtils.verifyValueBounds("dayOfMonth", dayOfMonth, 1,
+        FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1,
                                      (isLeap ? MAX_DAYS_PER_MONTH_ARRAY : MIN_DAYS_PER_MONTH_ARRAY)
                                      [monthOfYear - 1]);
 
diff --git a/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java b/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java
index a79b5a9e8..bf3eb332c 100644
--- a/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java
@@ -21,6 +21,7 @@
 import org.joda.time.Chronology;
 import org.joda.time.DateTime;
 import org.joda.time.DateTimeConstants;
+import org.joda.time.DateTimeFieldType;
 import org.joda.time.DateTimeZone;
 import org.joda.time.DurationField;
 import org.joda.time.DurationFieldType;
@@ -203,11 +204,11 @@ public Chronology withZone(DateTimeZone zone) {
     long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth)
         throws IllegalArgumentException
     {
-        FieldUtils.verifyValueBounds("year", year, getMinYear(), getMaxYear());
-        FieldUtils.verifyValueBounds("monthOfYear", monthOfYear, 1, 13);
+        FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());
+        FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, 13);
 
         int dayLimit = (monthOfYear != 13) ? 30 : (isLeapYear(year) ? 6 : 5);
-        FieldUtils.verifyValueBounds("dayOfMonth", dayOfMonth, 1, dayLimit);
+        FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, dayLimit);
 
         long instant = getYearMillis(year);
 
diff --git a/JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java b/JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java
index 1fa6db19e..a52d77d19 100644
--- a/JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java
+++ b/JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java
@@ -21,6 +21,7 @@
 import org.joda.time.DateTimeFieldType;
 import org.joda.time.DurationField;
 import org.joda.time.DurationFieldType;
+import org.joda.time.IllegalFieldValueException;
 import org.joda.time.field.BaseDateTimeField;
 import org.joda.time.field.FieldUtils;
 import org.joda.time.field.UnsupportedDurationField;
@@ -88,7 +89,7 @@ public long set(long instant, int era) {
      */
     public long set(long instant, String text, Locale locale) {
         if ("AM".equals(text) == false) {
-            throw new IllegalArgumentException("Invalid era text: " + text);
+            throw new IllegalFieldValueException(DateTimeFieldType.era(), text);
         }
         return instant;
     }
diff --git a/JodaTime/src/java/org/joda/time/chrono/GJChronology.java b/JodaTime/src/java/org/joda/time/chrono/GJChronology.java
index 1ec240895..411a4c689 100644
--- a/JodaTime/src/java/org/joda/time/chrono/GJChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/GJChronology.java
@@ -25,6 +25,7 @@
 import org.joda.time.DateTimeUtils;
 import org.joda.time.DateTimeZone;
 import org.joda.time.DurationField;
+import org.joda.time.IllegalFieldValueException;
 import org.joda.time.Instant;
 import org.joda.time.ReadableInstant;
 import org.joda.time.field.BaseDateTimeField;
@@ -653,8 +654,8 @@ public long set(long instant, int value) {
                     }
                     // Verify that new value stuck.
                     if (get(instant) != value) {
-                        throw new IllegalArgumentException
-                            ("Illegal value for " + iGregorianField.getName() + ": " + value);
+                        throw new IllegalFieldValueException
+                            (iGregorianField.getType(), new Integer(value), null, null);
                     }
                 }
             } else {
@@ -666,8 +667,8 @@ public long set(long instant, int value) {
                     }
                     // Verify that new value stuck.
                     if (get(instant) != value) {
-                        throw new IllegalArgumentException
-                            ("Illegal value for " + iJulianField.getName() + ": " + value);
+                       throw new IllegalFieldValueException
+                            (iJulianField.getType(), new Integer(value), null, null);
                     }
                 }
             }
diff --git a/JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java b/JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java
index f039c98d5..b36ec32ed 100644
--- a/JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java
+++ b/JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java
@@ -20,6 +20,9 @@
 import java.util.WeakHashMap;
 import java.util.Locale;
 
+import org.joda.time.DateTimeFieldType;
+import org.joda.time.IllegalFieldValueException;
+
 /**
  * Utility class used by a few of the GJDateTimeFields.
  *
@@ -131,7 +134,7 @@ public int eraTextToValue(String text) {
                 return i;
             }
         }
-        throw new IllegalArgumentException("Illegal era text: " + text);
+        throw new IllegalFieldValueException(DateTimeFieldType.era(), text);
     }
 
     public int getEraMaxTextLength() {
@@ -167,7 +170,7 @@ public int monthOfYearTextToValue(String text) {
         } catch (NumberFormatException ex) {
             // ignore
         }
-        throw new IllegalArgumentException("Illegal monthOfYear text: " + text);
+        throw new IllegalFieldValueException(DateTimeFieldType.monthOfYear(), text);
     }
 
     public int getMonthMaxTextLength() {
@@ -207,7 +210,7 @@ public int dayOfWeekTextToValue(String text) {
         } catch (NumberFormatException ex) {
             // ignore
         }
-        throw new IllegalArgumentException("Illegal dayOfWeek text: " + text);
+        throw new IllegalFieldValueException(DateTimeFieldType.dayOfWeek(), text);
     }
 
     public int getDayOfWeekMaxTextLength() {
@@ -229,7 +232,7 @@ public int halfdayTextToValue(String text) {
                 return i;
             }
         }
-        throw new IllegalArgumentException("Illegal halfday text: " + text);
+        throw new IllegalFieldValueException(DateTimeFieldType.halfdayOfDay(), text);
     }
 
     public int getHalfdayMaxTextLength() {
diff --git a/JodaTime/src/java/org/joda/time/chrono/JulianChronology.java b/JodaTime/src/java/org/joda/time/chrono/JulianChronology.java
index de2dafddb..a6390b4fd 100644
--- a/JodaTime/src/java/org/joda/time/chrono/JulianChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/JulianChronology.java
@@ -20,7 +20,9 @@
 
 import org.joda.time.Chronology;
 import org.joda.time.DateTimeConstants;
+import org.joda.time.DateTimeFieldType;
 import org.joda.time.DateTimeZone;
+import org.joda.time.IllegalFieldValueException;
 import org.joda.time.field.SkipDateTimeField;
 
 /**
@@ -69,7 +71,8 @@
     static int adjustYearForSet(int year) {
         if (year <= 0) {
             if (year == 0) {
-                throw new IllegalArgumentException("Invalid year: " + year);
+                throw new IllegalFieldValueException
+                    (DateTimeFieldType.year(), new Integer(year), null, null);
             }
             year++;
         }
diff --git a/JodaTime/src/java/org/joda/time/chrono/ThaiBuddhistEraDateTimeField.java b/JodaTime/src/java/org/joda/time/chrono/ThaiBuddhistEraDateTimeField.java
index 7a36e24bf..ddf524277 100644
--- a/JodaTime/src/java/org/joda/time/chrono/ThaiBuddhistEraDateTimeField.java
+++ b/JodaTime/src/java/org/joda/time/chrono/ThaiBuddhistEraDateTimeField.java
@@ -21,6 +21,7 @@
 import org.joda.time.DateTimeFieldType;
 import org.joda.time.DurationField;
 import org.joda.time.DurationFieldType;
+import org.joda.time.IllegalFieldValueException;
 import org.joda.time.field.BaseDateTimeField;
 import org.joda.time.field.FieldUtils;
 import org.joda.time.field.UnsupportedDurationField;
@@ -89,7 +90,7 @@ public long set(long instant, int era) {
      */
     public long set(long instant, String text, Locale locale) {
         if ("BE".equals(text) == false) {
-            throw new IllegalArgumentException("Invalid era text: " + text);
+            throw new IllegalFieldValueException(DateTimeFieldType.era(), text);
         }
         return instant;
     }
diff --git a/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java b/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java
index 13b6738d9..cd54dea30 100644
--- a/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java
@@ -23,6 +23,7 @@
 import org.joda.time.DateTimeField;
 import org.joda.time.DateTimeZone;
 import org.joda.time.DurationField;
+import org.joda.time.IllegalFieldValueException;
 import org.joda.time.field.BaseDateTimeField;
 import org.joda.time.field.BaseDurationField;
 
@@ -375,8 +376,8 @@ public long set(long instant, int value) {
 
             if (offset != offsetFromLocal) {
                 if (get(instant) != value) {
-                    throw new IllegalArgumentException
-                        ("Illegal value for " + iField.getName() + ": " + value);
+                    throw new IllegalFieldValueException
+                        (iField.getType(), new Integer(value), null, null);
                 }
             }
 
diff --git a/JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java b/JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java
index b67f48ec1..3a4df3362 100644
--- a/JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java
+++ b/JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java
@@ -20,6 +20,7 @@
 import org.joda.time.DateTimeField;
 import org.joda.time.DateTimeFieldType;
 import org.joda.time.DurationField;
+import org.joda.time.IllegalFieldValueException;
 import org.joda.time.ReadablePartial;
 
 /**
@@ -666,7 +667,7 @@ protected int convertText(String text, Locale locale) {
         try {
             return Integer.parseInt(text);
         } catch (NumberFormatException ex) {
-            throw new IllegalArgumentException("Invalid " + getName() + " text: " + text);
+            throw new IllegalFieldValueException(getType(), text);
         }
     }
 
diff --git a/JodaTime/src/java/org/joda/time/field/FieldUtils.java b/JodaTime/src/java/org/joda/time/field/FieldUtils.java
index 97303305f..4b0d0d3b4 100644
--- a/JodaTime/src/java/org/joda/time/field/FieldUtils.java
+++ b/JodaTime/src/java/org/joda/time/field/FieldUtils.java
@@ -16,6 +16,8 @@
 package org.joda.time.field;
 
 import org.joda.time.DateTimeField;
+import org.joda.time.DateTimeFieldType;
+import org.joda.time.IllegalFieldValueException;
 
 /**
  * General utilities that don't fit elsewhere.
@@ -134,21 +136,14 @@ public static int safeMultiplyToInt(long val1, long val2) {
      * @param value  the value to check
      * @param lowerBound  the lower bound allowed for value
      * @param upperBound  the upper bound allowed for value
-     * @throws IllegalArgumentException if value is not in the specified bounds
+     * @throws IllegalFieldValueException if value is not in the specified bounds
      */
     public static void verifyValueBounds(DateTimeField field, 
                                          int value, int lowerBound, int upperBound) {
         if ((value < lowerBound) || (value > upperBound)) {
-            throw new IllegalArgumentException(
-                "Value "
-                    + value
-                    + " for "
-                    + field.getName()
-                    + " must be in the range ["
-                    + lowerBound
-                    + ','
-                    + upperBound
-                    + ']');
+            throw new IllegalFieldValueException
+                (field.getType(), new Integer(value),
+                 new Integer(lowerBound), new Integer(upperBound));
         }
     }
 
@@ -158,21 +153,31 @@ public static void verifyValueBounds(DateTimeField field,
      * @param value  the value to check
      * @param lowerBound  the lower bound allowed for value
      * @param upperBound  the upper bound allowed for value
-     * @throws IllegalArgumentException if value is not in the specified bounds
+     * @throws IllegalFieldValueException if value is not in the specified bounds
+     */
+    public static void verifyValueBounds(DateTimeFieldType fieldType, 
+                                         int value, int lowerBound, int upperBound) {
+        if ((value < lowerBound) || (value > upperBound)) {
+            throw new IllegalFieldValueException
+                (fieldType, new Integer(value),
+                 new Integer(lowerBound), new Integer(upperBound));
+        }
+    }
+
+    /**
+     * Verify that input values are within specified bounds.
+     * 
+     * @param value  the value to check
+     * @param lowerBound  the lower bound allowed for value
+     * @param upperBound  the upper bound allowed for value
+     * @throws IllegalFieldValueException if value is not in the specified bounds
      */
     public static void verifyValueBounds(String fieldName,
                                          int value, int lowerBound, int upperBound) {
         if ((value < lowerBound) || (value > upperBound)) {
-            throw new IllegalArgumentException(
-                "Value "
-                    + value
-                    + " for "
-                    + fieldName
-                    + " must be in the range ["
-                    + lowerBound
-                    + ','
-                    + upperBound
-                    + ']');
+            throw new IllegalFieldValueException
+                (fieldName, new Integer(value),
+                 new Integer(lowerBound), new Integer(upperBound));
         }
     }
 
diff --git a/JodaTime/src/java/org/joda/time/field/SkipDateTimeField.java b/JodaTime/src/java/org/joda/time/field/SkipDateTimeField.java
index 42522b9d4..49aa8fd05 100644
--- a/JodaTime/src/java/org/joda/time/field/SkipDateTimeField.java
+++ b/JodaTime/src/java/org/joda/time/field/SkipDateTimeField.java
@@ -17,6 +17,8 @@
 
 import org.joda.time.Chronology;
 import org.joda.time.DateTimeField;
+import org.joda.time.DateTimeFieldType;
+import org.joda.time.IllegalFieldValueException;
 
 /**
  * Wraps another field such that a certain value is skipped.
@@ -86,7 +88,8 @@ public long set(long millis, int value) {
         FieldUtils.verifyValueBounds(this, value, iMinValue, getMaximumValue());
         if (value <= iSkip) {
             if (value == iSkip) {
-                throw new IllegalArgumentException("Invalid year: " + value);
+                throw new IllegalFieldValueException
+                    (DateTimeFieldType.year(), new Integer(value), null, null);
             }
             value++;
         }
diff --git a/JodaTime/src/test/org/joda/time/TestAll.java b/JodaTime/src/test/org/joda/time/TestAll.java
index 267f00337..ebc3496d4 100644
--- a/JodaTime/src/test/org/joda/time/TestAll.java
+++ b/JodaTime/src/test/org/joda/time/TestAll.java
@@ -89,8 +89,9 @@ public static Test suite() {
         suite.addTest(TestDateTimeZone.suite());
         suite.addTest(TestPeriodType.suite());
 //        suite.addTest(TestParseISO.suite());
-        
-        suite.addTest(TestSerialization.suite());
+
+        suite.addTest(TestIllegalFieldValueException.suite());
+
         return suite;
     }
 
diff --git a/JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java b/JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java
new file mode 100644
index 000000000..5b95317e3
--- /dev/null
+++ b/JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java
@@ -0,0 +1,334 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time;
+
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+import org.joda.time.field.FieldUtils;
+import org.joda.time.field.SkipDateTimeField;
+
+/**
+ * Tests IllegalFieldValueException by triggering it from other methods.
+ *
+ * @author Brian S O'Neill
+ */
+public class TestIllegalFieldValueException extends TestCase {
+    public static void main(String[] args) {
+        junit.textui.TestRunner.run(suite());
+    }
+
+    public static TestSuite suite() {
+        return new TestSuite(TestIllegalFieldValueException.class);
+    }
+
+    public TestIllegalFieldValueException(String name) {
+        super(name);
+    }
+
+    public void testVerifyValueBounds() {
+        try {
+            FieldUtils.verifyValueBounds(Chronology.getISO().monthOfYear(), -5, 1, 31);
+            fail();
+        } catch (IllegalFieldValueException e) {
+            assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType());
+            assertEquals(null, e.getDurationFieldType());
+            assertEquals("monthOfYear", e.getFieldName());
+            assertEquals(new Integer(-5), e.getIllegalNumberValue());
+            assertEquals(null, e.getIllegalStringValue());
+            assertEquals("-5", e.getIllegalValueAsString());
+            assertEquals(new Integer(1), e.getLowerBound());
+            assertEquals(new Integer(31), e.getUpperBound());
+        }
+
+        try {
+            FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), 27, 0, 23);
+            fail();
+        } catch (IllegalFieldValueException e) {
+            assertEquals(DateTimeFieldType.hourOfDay(), e.getDateTimeFieldType());
+            assertEquals(null, e.getDurationFieldType());
+            assertEquals("hourOfDay", e.getFieldName());
+            assertEquals(new Integer(27), e.getIllegalNumberValue());
+            assertEquals(null, e.getIllegalStringValue());
+            assertEquals("27", e.getIllegalValueAsString());
+            assertEquals(new Integer(0), e.getLowerBound());
+            assertEquals(new Integer(23), e.getUpperBound());
+        }
+
+        try {
+            FieldUtils.verifyValueBounds("foo", 1, 2, 3);
+            fail();
+        } catch (IllegalFieldValueException e) {
+            assertEquals(null, e.getDateTimeFieldType());
+            assertEquals(null, e.getDurationFieldType());
+            assertEquals("foo", e.getFieldName());
+            assertEquals(new Integer(1), e.getIllegalNumberValue());
+            assertEquals(null, e.getIllegalStringValue());
+            assertEquals("1", e.getIllegalValueAsString());
+            assertEquals(new Integer(2), e.getLowerBound());
+            assertEquals(new Integer(3), e.getUpperBound());
+        }
+    }
+
+    public void testSkipDateTimeField() {
+        DateTimeField field = new SkipDateTimeField
+            (Chronology.getISOUTC(), Chronology.getISOUTC().year(), 1970);
+        try {
+            field.set(0, 1970);
+            fail();
+        } catch (IllegalFieldValueException e) {
+            assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType());
+            assertEquals(null, e.getDurationFieldType());
+            assertEquals("year", e.getFieldName());
+            assertEquals(new Integer(1970), e.getIllegalNumberValue());
+            assertEquals(null, e.getIllegalStringValue());
+            assertEquals("1970", e.getIllegalValueAsString());
+            assertEquals(null, e.getLowerBound());
+            assertEquals(null, e.getUpperBound());
+        }
+    }
+
+    public void testSetText() {
+        try {
+            Chronology.getISOUTC().year().set(0, null, java.util.Locale.US);
+            fail();
+        } catch (IllegalFieldValueException e) {
+            assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType());
+            assertEquals(null, e.getDurationFieldType());
+            assertEquals("year", e.getFieldName());
+            assertEquals(null, e.getIllegalNumberValue());
+            assertEquals(null, e.getIllegalStringValue());
+            assertEquals("null", e.getIllegalValueAsString());
+            assertEquals(null, e.getLowerBound());
+            assertEquals(null, e.getUpperBound());
+        }
+
+        try {
+            Chronology.getISOUTC().year().set(0, "nineteen seventy", java.util.Locale.US);
+            fail();
+        } catch (IllegalFieldValueException e) {
+            assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType());
+            assertEquals(null, e.getDurationFieldType());
+            assertEquals("year", e.getFieldName());
+            assertEquals(null, e.getIllegalNumberValue());
+            assertEquals("nineteen seventy", e.getIllegalStringValue());
+            assertEquals("nineteen seventy", e.getIllegalValueAsString());
+            assertEquals(null, e.getLowerBound());
+            assertEquals(null, e.getUpperBound());
+        }
+
+        try {
+            Chronology.getISOUTC().era().set(0, "long ago", java.util.Locale.US);
+            fail();
+        } catch (IllegalFieldValueException e) {
+            assertEquals(DateTimeFieldType.era(), e.getDateTimeFieldType());
+            assertEquals(null, e.getDurationFieldType());
+            assertEquals("era", e.getFieldName());
+            assertEquals(null, e.getIllegalNumberValue());
+            assertEquals("long ago", e.getIllegalStringValue());
+            assertEquals("long ago", e.getIllegalValueAsString());
+            assertEquals(null, e.getLowerBound());
+            assertEquals(null, e.getUpperBound());
+        }
+
+        try {
+            Chronology.getISOUTC().monthOfYear().set(0, "spring", java.util.Locale.US);
+            fail();
+        } catch (IllegalFieldValueException e) {
+            assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType());
+            assertEquals(null, e.getDurationFieldType());
+            assertEquals("monthOfYear", e.getFieldName());
+            assertEquals(null, e.getIllegalNumberValue());
+            assertEquals("spring", e.getIllegalStringValue());
+            assertEquals("spring", e.getIllegalValueAsString());
+            assertEquals(null, e.getLowerBound());
+            assertEquals(null, e.getUpperBound());
+        }
+
+        try {
+            Chronology.getISOUTC().dayOfWeek().set(0, "yesterday", java.util.Locale.US);
+            fail();
+        } catch (IllegalFieldValueException e) {
+            assertEquals(DateTimeFieldType.dayOfWeek(), e.getDateTimeFieldType());
+            assertEquals(null, e.getDurationFieldType());
+            assertEquals("dayOfWeek", e.getFieldName());
+            assertEquals(null, e.getIllegalNumberValue());
+            assertEquals("yesterday", e.getIllegalStringValue());
+            assertEquals("yesterday", e.getIllegalValueAsString());
+            assertEquals(null, e.getLowerBound());
+            assertEquals(null, e.getUpperBound());
+        }
+
+        try {
+            Chronology.getISOUTC().halfdayOfDay().set(0, "morning", java.util.Locale.US);
+            fail();
+        } catch (IllegalFieldValueException e) {
+            assertEquals(DateTimeFieldType.halfdayOfDay(), e.getDateTimeFieldType());
+            assertEquals(null, e.getDurationFieldType());
+            assertEquals("halfdayOfDay", e.getFieldName());
+            assertEquals(null, e.getIllegalNumberValue());
+            assertEquals("morning", e.getIllegalStringValue());
+            assertEquals("morning", e.getIllegalValueAsString());
+            assertEquals(null, e.getLowerBound());
+            assertEquals(null, e.getUpperBound());
+        }
+    }
+
+    public void testZoneTransition() {
+        DateTime dt = new DateTime
+            (2005, 4, 3, 1, 0, 0, 0, DateTimeZone.forID("America/Los_Angeles"));
+        try {
+            dt.hourOfDay().setCopy(2);
+            fail();
+        } catch (IllegalFieldValueException e) {
+            assertEquals(DateTimeFieldType.hourOfDay(), e.getDateTimeFieldType());
+            assertEquals(null, e.getDurationFieldType());
+            assertEquals("hourOfDay", e.getFieldName());
+            assertEquals(new Integer(2), e.getIllegalNumberValue());
+            assertEquals(null, e.getIllegalStringValue());
+            assertEquals("2", e.getIllegalValueAsString());
+            assertEquals(null, e.getLowerBound());
+            assertEquals(null, e.getUpperBound());
+        }
+    }
+
+    public void testJulianYearZero() {
+        DateTime dt = new DateTime(Chronology.getJulianUTC());
+        try {
+            dt.year().setCopy(0);
+            fail();
+        } catch (IllegalFieldValueException e) {
+            assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType());
+            assertEquals(null, e.getDurationFieldType());
+            assertEquals("year", e.getFieldName());
+            assertEquals(new Integer(0), e.getIllegalNumberValue());
+            assertEquals(null, e.getIllegalStringValue());
+            assertEquals("0", e.getIllegalValueAsString());
+            assertEquals(null, e.getLowerBound());
+            assertEquals(null, e.getUpperBound());
+        }
+    }
+
+    public void testGJCutover() {
+        DateTime dt = new DateTime("1582-10-04", Chronology.getGJUTC());
+        try {
+            dt.dayOfMonth().setCopy(5);
+            fail();
+        } catch (IllegalFieldValueException e) {
+            assertEquals(DateTimeFieldType.dayOfMonth(), e.getDateTimeFieldType());
+            assertEquals(null, e.getDurationFieldType());
+            assertEquals("dayOfMonth", e.getFieldName());
+            assertEquals(new Integer(5), e.getIllegalNumberValue());
+            assertEquals(null, e.getIllegalStringValue());
+            assertEquals("5", e.getIllegalValueAsString());
+            assertEquals(null, e.getLowerBound());
+            assertEquals(null, e.getUpperBound());
+        }
+
+        dt = new DateTime("1582-10-15", Chronology.getGJUTC());
+        try {
+            dt.dayOfMonth().setCopy(14);
+            fail();
+        } catch (IllegalFieldValueException e) {
+            assertEquals(DateTimeFieldType.dayOfMonth(), e.getDateTimeFieldType());
+            assertEquals(null, e.getDurationFieldType());
+            assertEquals("dayOfMonth", e.getFieldName());
+            assertEquals(new Integer(14), e.getIllegalNumberValue());
+            assertEquals(null, e.getIllegalStringValue());
+            assertEquals("14", e.getIllegalValueAsString());
+            assertEquals(null, e.getLowerBound());
+            assertEquals(null, e.getUpperBound());
+        }
+    }
+
+    public void testReadablePartialValidate() {
+        try {
+            new YearMonthDay(1970, -5, 1);
+            fail();
+        } catch (IllegalFieldValueException e) {
+            assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType());
+            assertEquals(null, e.getDurationFieldType());
+            assertEquals("monthOfYear", e.getFieldName());
+            assertEquals(new Integer(-5), e.getIllegalNumberValue());
+            assertEquals(null, e.getIllegalStringValue());
+            assertEquals("-5", e.getIllegalValueAsString());
+            assertEquals(new Integer(1), e.getLowerBound());
+            assertEquals(null, e.getUpperBound());
+        }
+
+        try {
+            new YearMonthDay(1970, 500, 1);
+            fail();
+        } catch (IllegalFieldValueException e) {
+            assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType());
+            assertEquals(null, e.getDurationFieldType());
+            assertEquals("monthOfYear", e.getFieldName());
+            assertEquals(new Integer(500), e.getIllegalNumberValue());
+            assertEquals(null, e.getIllegalStringValue());
+            assertEquals("500", e.getIllegalValueAsString());
+            assertEquals(null, e.getLowerBound());
+            assertEquals(new Integer(12), e.getUpperBound());
+        }
+
+        try {
+            new YearMonthDay(1970, 2, 30);
+            fail();
+        } catch (IllegalFieldValueException e) {
+            assertEquals(DateTimeFieldType.dayOfMonth(), e.getDateTimeFieldType());
+            assertEquals(null, e.getDurationFieldType());
+            assertEquals("dayOfMonth", e.getFieldName());
+            assertEquals(new Integer(30), e.getIllegalNumberValue());
+            assertEquals(null, e.getIllegalStringValue());
+            assertEquals("30", e.getIllegalValueAsString());
+            assertEquals(null, e.getLowerBound());
+            assertEquals(new Integer(28), e.getUpperBound());
+        }
+    }
+
+    // Test extra constructors not currently called by anything
+    public void testOtherConstructors() {
+        IllegalFieldValueException e = new IllegalFieldValueException
+            (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));
+        assertEquals(null, e.getDateTimeFieldType());
+        assertEquals(DurationFieldType.days(), e.getDurationFieldType());
+        assertEquals("days", e.getFieldName());
+        assertEquals(new Integer(1), e.getIllegalNumberValue());
+        assertEquals(null, e.getIllegalStringValue());
+        assertEquals("1", e.getIllegalValueAsString());
+        assertEquals(new Integer(2), e.getLowerBound());
+        assertEquals(new Integer(3), e.getUpperBound());
+
+        e = new IllegalFieldValueException(DurationFieldType.months(), "five");
+        assertEquals(null, e.getDateTimeFieldType());
+        assertEquals(DurationFieldType.months(), e.getDurationFieldType());
+        assertEquals("months", e.getFieldName());
+        assertEquals(null, e.getIllegalNumberValue());
+        assertEquals("five", e.getIllegalStringValue());
+        assertEquals("five", e.getIllegalValueAsString());
+        assertEquals(null, e.getLowerBound());
+        assertEquals(null, e.getUpperBound());
+
+        e = new IllegalFieldValueException("months", "five");
+        assertEquals(null, e.getDateTimeFieldType());
+        assertEquals(null, e.getDurationFieldType());
+        assertEquals("months", e.getFieldName());
+        assertEquals(null, e.getIllegalNumberValue());
+        assertEquals("five", e.getIllegalStringValue());
+        assertEquals("five", e.getIllegalValueAsString());
+        assertEquals(null, e.getLowerBound());
+        assertEquals(null, e.getUpperBound());
+    }
+}

From b5e3897c34bc23ccf840dbe5066ce3369afb0a0b Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Tue, 31 May 2005 07:05:00 +0000
Subject: [PATCH 035/124] Comment typo

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@767 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/IllegalFieldValueException.java | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/JodaTime/src/java/org/joda/time/IllegalFieldValueException.java b/JodaTime/src/java/org/joda/time/IllegalFieldValueException.java
index 488182a61..a88d6ec41 100644
--- a/JodaTime/src/java/org/joda/time/IllegalFieldValueException.java
+++ b/JodaTime/src/java/org/joda/time/IllegalFieldValueException.java
@@ -16,7 +16,7 @@
 package org.joda.time;
 
 /**
- * Exception thrown when attempting to set a field outisde its supported range.
+ * Exception thrown when attempting to set a field outside its supported range.
  *
  * @author Brian S O'Neill
  * @since 1.1

From bfe653adbe565b4e21b27d2bf5f1003c235bd60f Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Thu, 2 Jun 2005 05:43:55 +0000
Subject: [PATCH 036/124] Fixed parsing date where format includes era.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@768 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                       |  4 ++++
 .../time/field/UnsupportedDurationField.java     |  1 -
 .../joda/time/format/DateTimeParserBucket.java   |  9 +++++----
 .../org/joda/time/format/TestDateTimeFormat.java | 16 ++++++++++++++++
 4 files changed, 25 insertions(+), 5 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 145ecea76..345830f11 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -38,6 +38,10 @@ Bug fixes since 1.0
   Range duration field of dayOfMonth was not consistent with monthOfYear. This
   bug manifested itself when adding/subtracting periods to partials.
 
+- DateTimeParserBucket
+  Fixed parsing date where format includes era. Era must be set and rounded
+  before any other fields.
+
 Enhancements since 1.0
 ----------------------
 - YearMonthDay/TimeOfDay
diff --git a/JodaTime/src/java/org/joda/time/field/UnsupportedDurationField.java b/JodaTime/src/java/org/joda/time/field/UnsupportedDurationField.java
index 22b8ffe83..16c6cf5e9 100644
--- a/JodaTime/src/java/org/joda/time/field/UnsupportedDurationField.java
+++ b/JodaTime/src/java/org/joda/time/field/UnsupportedDurationField.java
@@ -38,7 +38,6 @@
 
     /**
      * Gets an instance of UnsupportedDurationField for a specific named field.
-     * Names should be plural, such as 'years' or 'hours'.
      * The returned instance is cached.
      * 
      * @param type  the type to obtain
diff --git a/JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java b/JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java
index 0ff3c3f61..12b2cb947 100644
--- a/JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java
+++ b/JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java
@@ -23,6 +23,7 @@
 import org.joda.time.DateTimeFieldType;
 import org.joda.time.DateTimeUtils;
 import org.joda.time.DateTimeZone;
+import org.joda.time.DurationField;
 
 /**
  * DateTimeParserBucket is an advanced class, intended mainly for parser
@@ -425,14 +426,14 @@ public int compareTo(Object obj) {
                 (iField.getDurationField(), other.getDurationField());
         }
         
-        private int compareReverse(Comparable a, Comparable b) {
-            if (a == null) {
-                if (b == null) {
+        private int compareReverse(DurationField a, DurationField b) {
+            if (a == null || !a.isSupported()) {
+                if (b == null || !b.isSupported()) {
                     return 0;
                 }
                 return -1;
             }
-            if (b == null) {
+            if (b == null || !b.isSupported()) {
                 return 1;
             }
             return -a.compareTo(b);
diff --git a/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java b/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java
index d0b9cdf7c..44c683e53 100644
--- a/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java
+++ b/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java
@@ -21,6 +21,7 @@
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
 
+import org.joda.time.Chronology;
 import org.joda.time.DateTime;
 import org.joda.time.DateTimeConstants;
 import org.joda.time.DateTimeUtils;
@@ -177,6 +178,21 @@ public void testFormat_yearOfEra_twoDigit() {
         f.parseDateTime("-50");
     }
 
+    public void testFormat_yearOfEraParse() {
+        Chronology chrono = Chronology.getGJ();
+
+        DateTimeFormatter f = DateTimeFormat
+            .forPattern("YYYY-MM GG")
+            .withChronology(chrono)
+            .withLocale(Locale.UK);
+
+        DateTime dt = new DateTime(2005, 10, 1, 0, 0, 0, 0, chrono);
+        assertEquals(dt, f.parseDateTime("2005-10 AD"));
+
+        dt = new DateTime(-2005, 10, 1, 0, 0, 0, 0, chrono);
+        assertEquals(dt, f.parseDateTime("2005-10 BC"));
+    }        
+
     //-----------------------------------------------------------------------
     public void testFormat_year() {
         DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);

From c29a7af95fa3d84033c28190529d9867dd0dcb3a Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Thu, 2 Jun 2005 06:53:35 +0000
Subject: [PATCH 037/124] Supports parsing "CE" and "BCE" as era if locale
 language is English.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@769 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  3 +
 .../org/joda/time/chrono/GJLocaleSymbols.java | 98 +++++++++++--------
 .../joda/time/format/TestDateTimeFormat.java  |  4 +-
 3 files changed, 61 insertions(+), 44 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 345830f11..23dc75409 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -79,6 +79,9 @@ Enhancements since 1.0
   context when a field is set to an illegal value. This can be helpful in
   interactive applications.
 
+- GJLocaleSymbols
+  Supports parsing "CE" and "BCE" as era if locale language is English.
+
 - DateTimeZone classes updated to latest data from the Olsen time zone database
 
 
diff --git a/JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java b/JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java
index b36ec32ed..3c32fc63f 100644
--- a/JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java
+++ b/JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java
@@ -19,6 +19,7 @@
 import java.text.DateFormatSymbols;
 import java.util.WeakHashMap;
 import java.util.Locale;
+import java.util.TreeMap;
 
 import org.joda.time.DateTimeFieldType;
 import org.joda.time.IllegalFieldValueException;
@@ -69,6 +70,21 @@ public static GJLocaleSymbols forLocale(Locale locale) {
         return a;
     }
 
+    private static void addSymbols(TreeMap map, String[] symbols, Integer[] integers) {
+        for (int i=symbols.length; --i>=0; ) {
+            String symbol = symbols[i];
+            if (symbol != null) {
+                map.put(symbol, integers[i]);
+            }
+        }
+    }
+
+    private static void addNumerals(TreeMap map, int start, int end, Integer[] integers) {
+        for (int i=start; i<=end; i++) {
+            map.put(String.valueOf(i).intern(), integers[i]);
+        }
+    }
+
     private static int maxLength(String[] a) {
         int max = 0;
         for (int i=a.length; --i>=0; ) {
@@ -92,6 +108,11 @@ private static int maxLength(String[] a) {
     private final String[] iShortMonths;
     private final String[] iHalfday;
 
+    // These map Strings to Integers.
+    private final TreeMap iParseEras;
+    private final TreeMap iParseDaysOfWeek;
+    private final TreeMap iParseMonths;
+
     private final int iMaxEraLength;
     private final int iMaxDayOfWeekLength;
     private final int iMaxShortDayOfWeekLength;
@@ -115,6 +136,31 @@ private GJLocaleSymbols(Locale locale) {
         iShortMonths = realignMonths(dfs.getShortMonths());
         iHalfday = dfs.getAmPmStrings();
 
+        Integer[] integers = new Integer[13];
+        for (int i=0; i<13; i++) {
+            integers[i] = new Integer(i);
+        }
+
+        iParseEras = new TreeMap(String.CASE_INSENSITIVE_ORDER);
+        addSymbols(iParseEras, iEras, integers);
+        if ("en".equals(locale.getLanguage())) {
+            // Include support for parsing "BCE" and "CE" if the language is
+            // English. At some point Joda-Time will need an independent set of
+            // localized symbols and not depend on java.text.DateFormatSymbols.
+            iParseEras.put("BCE", integers[0]);
+            iParseEras.put("CE", integers[1]);
+        }
+
+        iParseDaysOfWeek = new TreeMap(String.CASE_INSENSITIVE_ORDER);
+        addSymbols(iParseDaysOfWeek, iDaysOfWeek, integers);
+        addSymbols(iParseDaysOfWeek, iShortDaysOfWeek, integers);
+        addNumerals(iParseDaysOfWeek, 1, 7, integers);
+
+        iParseMonths = new TreeMap(String.CASE_INSENSITIVE_ORDER);
+        addSymbols(iParseMonths, iMonths, integers);
+        addSymbols(iParseMonths, iShortMonths, integers);
+        addNumerals(iParseMonths, 1, 12, integers);
+
         iMaxEraLength = maxLength(iEras);
         iMaxDayOfWeekLength = maxLength(iDaysOfWeek);
         iMaxShortDayOfWeekLength = maxLength(iShortDaysOfWeek);
@@ -128,11 +174,9 @@ public String eraValueToText(int value) {
     }
 
     public int eraTextToValue(String text) {
-        String[] eras = iEras;
-        for (int i=eras.length; --i>=0; ) {
-            if (eras[i].equalsIgnoreCase(text)) {
-                return i;
-            }
+        Integer era = (Integer) iParseEras.get(text);
+        if (era != null) {
+            return era.intValue();
         }
         throw new IllegalFieldValueException(DateTimeFieldType.era(), text);
     }
@@ -150,25 +194,9 @@ public String monthOfYearValueToShortText(int value) {
     }
 
     public int monthOfYearTextToValue(String text) {
-        String[] months = iMonths;
-        for (int i=months.length; --i>=1; ) {
-            if (months[i].equalsIgnoreCase(text)) {
-                return i;
-            }
-        }
-        months = iShortMonths;
-        for (int i=months.length; --i>=1; ) {
-            if (months[i].equalsIgnoreCase(text)) {
-                return i;
-            }
-        }
-        try {
-            int month = Integer.parseInt(text);
-            if (month >= 1 && month <= 12) {
-                return month;
-            }
-        } catch (NumberFormatException ex) {
-            // ignore
+        Integer month = (Integer) iParseMonths.get(text);
+        if (month != null) {
+            return month.intValue();
         }
         throw new IllegalFieldValueException(DateTimeFieldType.monthOfYear(), text);
     }
@@ -190,25 +218,9 @@ public String dayOfWeekValueToShortText(int value) {
     }
 
     public int dayOfWeekTextToValue(String text) {
-        String[] daysOfWeek = iDaysOfWeek;
-        for (int i=daysOfWeek.length; --i>=1; ) {
-            if (daysOfWeek[i].equalsIgnoreCase(text)) {
-                return i;
-            }
-        }
-        daysOfWeek = iShortDaysOfWeek;
-        for (int i=daysOfWeek.length; --i>=1; ) {
-            if (daysOfWeek[i].equalsIgnoreCase(text)) {
-                return i;
-            }
-        }
-        try {
-            int day = Integer.parseInt(text);
-            if (day >= 1 && day <= 7) {
-                return day;
-            }
-        } catch (NumberFormatException ex) {
-            // ignore
+        Integer day = (Integer) iParseDaysOfWeek.get(text);
+        if (day != null) {
+            return day.intValue();
         }
         throw new IllegalFieldValueException(DateTimeFieldType.dayOfWeek(), text);
     }
diff --git a/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java b/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java
index 44c683e53..ec9925d48 100644
--- a/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java
+++ b/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java
@@ -179,7 +179,7 @@ public void testFormat_yearOfEra_twoDigit() {
     }
 
     public void testFormat_yearOfEraParse() {
-        Chronology chrono = Chronology.getGJ();
+        Chronology chrono = Chronology.getGJUTC();
 
         DateTimeFormatter f = DateTimeFormat
             .forPattern("YYYY-MM GG")
@@ -188,9 +188,11 @@ public void testFormat_yearOfEraParse() {
 
         DateTime dt = new DateTime(2005, 10, 1, 0, 0, 0, 0, chrono);
         assertEquals(dt, f.parseDateTime("2005-10 AD"));
+        assertEquals(dt, f.parseDateTime("2005-10 CE"));
 
         dt = new DateTime(-2005, 10, 1, 0, 0, 0, 0, chrono);
         assertEquals(dt, f.parseDateTime("2005-10 BC"));
+        assertEquals(dt, f.parseDateTime("2005-10 BCE"));
     }        
 
     //-----------------------------------------------------------------------

From 6ad3ae36ac61c9f72218ea4d8b3e68df5f70cb5a Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Tue, 7 Jun 2005 02:09:35 +0000
Subject: [PATCH 038/124] Comment fix.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@770 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/format/DateTimeFormat.java | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/JodaTime/src/java/org/joda/time/format/DateTimeFormat.java b/JodaTime/src/java/org/joda/time/format/DateTimeFormat.java
index 56490e9a1..3b5effae8 100644
--- a/JodaTime/src/java/org/joda/time/format/DateTimeFormat.java
+++ b/JodaTime/src/java/org/joda/time/format/DateTimeFormat.java
@@ -47,7 +47,7 @@
  * For example, to use a patterm:
  * <pre>
  * DateTime dt = new DateTime();
- * DateTimeFormatter fmt = DateTimeFormat.getInstance().forPattern("MMMM, yyyy");
+ * DateTimeFormatter fmt = DateTimeFormat.forPattern("MMMM, yyyy");
  * String str = fmt.print(dt);
  * </pre>
  *

From 7914f022c0793062131082bc0330196aca32ced0 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 7 Jun 2005 22:37:32 +0000
Subject: [PATCH 039/124] Add Joda-Time OpenOffice presentation (created with
 v1.1.4)

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@771 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/presentation/JodaTime.sxi | Bin 0 -> 12525 bytes
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 JodaTimeContrib/presentation/JodaTime.sxi

diff --git a/JodaTimeContrib/presentation/JodaTime.sxi b/JodaTimeContrib/presentation/JodaTime.sxi
new file mode 100644
index 0000000000000000000000000000000000000000..d7872ad0aca8881d213d107452c18950fed9d7b8
GIT binary patch
literal 12525
zcmb7r1y~$Ow>AU_B)Gc=XBgZixCM6$IyemOP6z}I4#7RRhTv|&-QC^Y@<VpB-|jx&
zz0dt?p6agZde7-or)p-ZPQNWL4F!z>@tm|PyP40H=hTUx%Fh|@DO;IYfgD_IK>9W|
zmS%?f4rX9$pp&%`gT13QgNv0VgPE0$9mw8Z{vS$wjTL=mpM;+?;3><S89F#V!GKJR
z|45vF);PJCScExQ*w`6ttW7@2%Zeku#(VuFhbSo_qWE-vHUtjt#nVyRie~=lgefT^
zsO*w#c=Pk802F(RpNhk<6a>WkY$zfIbz|cv0EDEdtVoHFp5Gsa!9A&X?%i|C?*#u;
zFa%pWfUF&!dvc&N;51hgwK$|i^2Pp+lLd`pw>xUo>dJQidU1WWoXY7|b|@EFL<r3w
zc=))x!fgV~7^2Z{yt#2JnG5lGyqQ`m6OqeCmL4AZN5KpE3rzX959eoNErJmpXEgS5
zuX7b>NLDrbbFGiEk1rl8#%b?8Zsi0TYiqcge_mWd87we->)}b#Sn;V5{9#}Xk+yxg
zcUKs(^;MoW9{jPR5p@D#^P+bn<PQE#v#y9Usf%3g{fa##=K2`|PZ@lkK(QO=@b>M|
z`b4yl0Nlr;UeL=@{pcxWx>zX<FQ5p=b?dZ-uI_kHA?!Mhx>k~!1nrt^Z>4BhP2IuD
z$n0#xiyq#RC6MI7h^bMid1mg6_4mG?Ud}2_MvD+sRlHo|p6VL9+F^xtE9t@w7ct8a
zLp`8vRANm?*vyckTKhVK(U%d8pcu&=0m^$#&;4TTrmsw>CIhlhIh@Wv`<5<yj8?Z@
z^knbWoXj0ucDd3Z)Rwj}vf|bYiWTB@pohJCl+;&MANiK(n-B_n<70P97zhcK`&9+)
zU_I^e4L`_R{1l9hobEm=T#16|aN@&lNF7C3%-X@H7<5G7_O=FFel^RiZqc#qV)#sb
zdp1XWS7~Ge3izR<yZ~>{gIslaNCkGbPl>gJvStf_GJkelCI|4wEl*B#=6^_uNoVxI
zHu2VV+_=j;CB3X+K+}~vWe{j73FC8Tll1K-auMB>-wqre$s&_CL-Iel8p1qL`aDrT
zZY%qm!TyJ`pyD?=uS~jz18I^y1v3$=#Zr)czs?@|?4Cbk-So+dd3-C0i<A`I<l8s}
z4jKzQMCt*O?_c8Zfh;mv3WXqa9i0$ar`k1Do{;sAA-(#lAtf=3FgvTmz7=KY!#+vu
z8WS0hmYsC=IX*1#rcHU{VZF9=_|5RWG~~@uGYy;txUs>BVHq&Rk&&d>Rrlu7W%lTa
zVtnMn@P@8OfEa`wQ7pjqkLCe9o{F9}2oh=q3nRk9L1nrmK_WMq39bUr+P0Izj3F|-
zQf;V+zD)yB!w~6$SqM3NqXtihPA!^~DRNmg3>xWTc0wI{Oix{sQvKJ0D{-s%6LzQs
zcg3&YYv>~3VMFR%hfWv6i$oEVKGCna*tbblTy9nY3cBd462;iitrA;C4>CXY329Ay
zHOT}--!|%utGGwwQ|%Ml-mFVY4mt(p7rmlikSQp>*YdEI-|Cm=0XJd_T*2}hJw|NN
zpHrU<n=nVg{Me&%l;&G~5kD!Z-(tC1%cAm;wXCJhVF$gO3WzJpp4(2~t`=aZnyQ2<
zRvHCBb{Z!(;Qv9xTZzEBWk#P?iklNws7j9i{b%mNfD|~(1&z9DjImMIRF?_2F?rLq
zrtC%wtD|y8t049rSOWqtsWC@&;5-gyzHAqu1cl<p96L7e1sAW7brF9vm>3xh^Px<?
z9u&RpS1jk=*PlLn&j;_sbHF!Lde32E+!_O>WsNUw;>2C7(ld-j(W<M^@qoXiapK65
ze%B{{A+wkg&pT+~pCO#e%*$BYuFWm<0WGzEcYxJDVJ=D8ria{?Os)o<8|hW{YwV5V
zdx@+*X^N(M2gU0%??;Ph<9hfqXAUAC6vLN7X+Gfn*=4ejFOm2uIDtDEOV=UG7KAyt
z*I%2^_|0*zQ7~aX(>hATyS`ysSbd!qV`Brmh$W-;E?ERLQ+m|vwU<5v-tY2SA0VQ?
z>#i@?<uTn%;$a4I@v2{HJyiv4I;R$6Jt;7k#y4a>ORJE__XBjfj%`aJBVO|29h<gf
zJr|Y;m-9DZT;g5?eA~?|b_>)9kAA#93Il9tI*!cp+{xtFjOr%^Z%~`9ReL+>)NWNT
zp;E9lfnyvzmfz}&Cyy(SDe_~>niI30@npWK%%qgk{vf##o8*-VPiPz==Z$8Y;2{?g
z+7s$0v{J7TbOjq4{aLOYAQ7Xe)k1Z01#t&?($SSZGdx_oz(1yIWCa_cfg{3^qLX;#
zaTeu5X_7atFIOp-kShv(A-5~5yUG;1`kFTltQlPz>5iWnS1=h`O`{owJqQi`eQlKL
z5J?TM_?oBc4YEiI1<h=1tR+fNoxwKq5G7H$bc0N0Dy!(~{1-CB9=)9uI$A{RG?ye^
zRJWpfmj|K}Zv%FQg)zuaxA3L7S1Bv+sG^Q&fjOq_=DWQaMXrnFLmP>ZN&5GyYT-+>
zacl8l#jho}O}XWE5aM(0#+Y$X1<gYQNgZ{#*_=wkmUM}VnK|jiNZbs$gPEuM6t6AV
zw2TK#Rl~8z(Qr~GF|^p$Y8I0X3eBtV+6WVeQIDqB;_d0!ZR1#~RIET+6Jv=5_=uI?
zS}>Ma3<qsgiofUK7g{HLQyHMRI<p+s-T)n_$U=YXf>2dL)N@>VS=JkSz8R*d<_Q7W
ze<I}@sFMcvq;wjmx4_U~_FjvpntbhR7|dYv7RAZxjntsEfb34C6`Q<a4g~&CI7y}z
zD?U`vEG>D(yP~kR9bCH~rV7D6?0o011XlYuNr{<<M3b>lc2Jp8JIj%aLily=313N~
zE-@mA2Ej;mE$hk?*$g$lBx(;4W8Kb5mwOqE;wlEa+{?JmvK0xT-%r)ELB&SGbBF+W
zgfM<3ylNu;%HIE|Y~S#rzB&TmY%e9$6fhAqS%o^#8sr5PX8i%u5uxNnH$T6hEU&R}
zLOKGmMuj;nm@N3QaA>PY3}L299Ez24`fNlYe$1?zF7|uy=bKmcq?cWKVELRN2DoV#
z`Of=7Gg_flowR`Puv;7i<3JSbkya9nEoK^_Wj6nA1UMY~IdOJhTfJ7s?~tE*81jQj
zMB@qMVGGbhYTsIp6DDCI9p`>La{kC;j_14{%(I(clT~6XUQ)A0!1E!EH@jRsby}E4
z^e8Z;M-;pAHT!|nD*<+B4F%n|k2o*qNa~~WBZCSgL|7XL4NL}8`y^4Zc?Pd*X%^ft
zH)?EdgHk>RElQV7i0eoZ+<~w|?DScvBrc-}Pr9l{KD%iDG?<Dy(@ZJ5YLqdZU@Pm#
zRA*Q81qnm-5%_=*sJ6PRx?<c%)6&`@Pt>=`FX3>gx6!$Lv*G$l_zbOlgeyi6$!)DK
z>YK#te(dx%4B>cf<6+?+1Mk1?B3(+}L`IE(<@KibO|GvIyTA`MlO<|j0>%!G!ru5B
zqFP}aM@NuMNud%^HU!^7qIvB_ihG^LhS5hz!1dPkSoW7y9O7QInGG-1us5K3zD{9+
z$a5=(Yu>$AGo)%IWIr`EU5}(Y<&+gA>c(?j=gx5yceQ+>D<AEO!HO``{H3`QGL7Ty
ze8()akYJ62;M;{%vfOR>o1xEsp+>A>{o3hpW@)&*FlETq()@=7%#t1XWRIWKV}@We
z7`CZIsq5i&&Noh>A|h~?VVMCu{P;rG1$grB+>Z?^I^PWoYMmQejo5$N9#9Th9LM5=
z4e>&CTea4Ghvv18J`piJQu(^p^l_(0Ml|M8hJ&Ppb&(J4ntEMcxJbQ|aE(XlT&8&2
zUgf-4S#-%wU$hi+igjq9mN0&(DD(aGMRCjzcBCZSise~2H*R6VHXZi!O7rNCJ06zh
zG>7uryq5msqc3UH{KsY4B&-fx*Oy)U!7Y<bUHn^iA_c;Mwa{EuYx-bq5r(yukq;(v
zWnY<*dgAjNt>%xGOC(S!q~}i_8-7BlVq~au{?JL+_;`7OXxQ1Ig9bfDVSO&Gc<;<C
zX3*sI`9pSR>!)e*-p-K)Zv9fKOXNWqX<8xO><d?$_3rwlNm~l{59|8EQPm&c)C!?h
zMg>bo(c;DIqsMqSxJE5|78w&A5k^&oighN($`yJt2Cat%3c|0PrfBfy1_Mol7bdan
zp>{uJ(B3|L(G&QvMcQEA9!K_}O(M|gn}SK`q}xC@fw6v4()bJ#!zR@m?G+y})N1}g
zAxy?fvw6UZxk)rH&uBc(;)Ka%)tI;oUoR;yOIy+zxrgSRO2DmFY13qHJ{OB~MZ4kZ
z-jB6W;f^no_`dkeLR6~|;a}Ic4<h>T4?87{(o-9_$a2Vfe8;h^V(NWNru|8~d~|pi
zUr<Vqn?)lTBKd}#jteeQTN=s#Y`k`RqiK#=9Ee!K)iy@WBNx-yS|08$Fr|=XN#p?0
z1D0d)#xp)bc(tV|Ec5Pqg@%N{ubDFW4orH|h0X!@#j>6+ZpgQ7<DLGO^LWRcZ&y{X
z^R{7maUO%%n<(4{*uLrT>#=RB;k@s9fJ_HL=dGbRLKq9JvF^(C+#3rVH|ydb!m7Xp
zn|O>pz>*@P-Cjx9pvHe4<Bs%Sg<VYcKiwk!$@4L7&tmTJEaGQhttZla^mUV5ljlo0
zvIh@sCF0LXeIAY4b=gRWU4?;#mz32VJ{<SwaOHt9)19Wy$PrHdt-jngIS~tsSXzQl
z%iLgo6jXfxKtw^L@~S191-UW4QX*L14d^s^9L7dQ+fK1u27{mx&Mk;E#aQ$LMcbn+
zRorjb9)^9^E;_zz7SDo;_0&Iug)7*m658h^McnwC`pVC7!@*X_Ps_W*uO71Ix1+HE
z+YQ|Tp;cllQt=*bD_*>BUb;X%j?9rUPegAWZD#Md5=@UA9ZL%`7gid1kwWGwwmoV_
zA<x$jZ++a_*U2U(u-=VsKhw^8`<)qemR~z`b5SRBR<ItY+|(EDQo@Qz8J`=eEl$)U
zvQRMD{jHAcDdfT`b(6>TW5Cb?@=TD+TQKU$Ja$u1`39>$!dZ8B;l)PvHO@IGOH~*0
zvlbrlmMnRCAU}L#(jg2HapQ(kh17_#+-4w`)s?&q-)%`E{&^l;g8^^we9iso%Gu45
za%Nl_4XlIW&*0?@MLPl;)I|sHSZF_z(i3#T5B|E>pUPb2Z!?4St%q;kaGJEApaPW&
z6u#oWT+hAZNQdv~sP-I!&TwfF;*kF|ZpH`c@YvoiyklA*b!-`U<->b7s^1?1=amzl
zB-`-0axE^^l{7z-@Vh6s_4jFbYNzvHd8B;wK*j1ooEe284T9F}Ad_lQxOq!&1s2VB
z%j%?i6+&&Y(Tp7VFCw98dbwyr>+N22?0jYn7`b!^e7olB*~WLW)0SnPqX_&mk*T5d
zl8jPEIu|x}3|5j<H@KkSJ5uKq35u>Wgj-&pNOn9lcIjYzQp&pTAqbj2aWj(V!d{ct
zO?1V88!R^HCFr(_pky-Gb5<pNfU~}g^Uf+(He6T%I>)+_&NvQ=&C`z+BV~Uj$YsbU
zH~yrwwaVOvir*2gORM24CT8O(V&71GaNf(pvlAmH26*&RxR%{>IxeW`^Lx5n*_Noj
z4)zo3N;Z!H$R<jv>qshDI00C`^P5GMa+<4|h|@WW9GV^6ucY>qm<ouWCS<M)d%xfR
z@PAAS0)oM|)px!b*NG>m3;Nfhhirao2<ty6S7+RA0!6AS_P;6=VbXP)m*-FO2L`R{
zb+}LmBa8H*p^B~%tLOrd)HrQya!N^f;+(K2YvH-SD-9kBx!F-EnK<`uaVoi@d~?D%
z<r-3!iZ^+{L0z?r#v!&V=p9)i*6Dk7Q}Q~!7e07-US#Q0VQ<qxu`E-{&eRfNnQoW&
z<FMDa@Oh%yp-pucnI3*$BZKw)2m(P;h)6&6SA^usK=zkOU|sxzh(MIgAA+S7%hZ!G
z){A8~H*;=IwLz!L2`;q~^>BOI&?%UVCfKBWfb^SDS4iEw5SzuTgg%1Fu`Q|%G(f2o
zLz2!UdL})G==qe~@e(=TroukfNZv4N+L7?wVS85ab}}NAIpKVTQ1T!Zrt{JQeQ5ka
z%T-?u!FTl{3x)W+YM<9cn{!;t%xSCy7oVhwR*=1jFh}}c(vsIo0!89*>>#!%LA-5R
z;UX{(p^}e*9k@~S4eV6|L+TqAWeS5YOwntbm1D7J;wfCyulkKAw3!x>@xSk_=X0%H
zp6}=9%BFqUnh~-8#KdN|G<WXB`7WFot-i@iZOcK{t9QpkNUqD|!qxm+g6eueIJ4RN
zvCn2vh&ZV6_0s%))|5!1m?r(FA8h@hpy$0o%r(Nv?>96>{LKR(=UA+x=AnFbkA`Bi
z;i0LbOVvLRkNzZGhi!;0O|W3$NQ=I`dUxJTR4BK`aYxE9g?_b10FhF_sSBI_CAFZY
zKnZgTYp#80aGXc;tksFwrI#r!xYm7>A8lxh)BP<cS<WK_B<j5%vWPn58IqY$+FUFd
zcZBMjV974%veCx&FAW0N0QBq?n?p&PJV_&)K{T^U8L>*cYWdU!CG6%<u>IyWJsxhW
zDs#%0x@n0LTXKd*H6Ep1E+xBDBjy=zBU<N*p)bo`cbJ==(pX@_g$Q~Fve5#7wnE>5
zs8jM!8HemCS27coJdeQ{ElIf>?FpK+vtw0;&XWhol-BrJr5R+!dWW9qV<qF1XjutD
zt$n??HYzR4Yfng1t^gEJsq4@U$s(lCx)!M;wj(2Q{R)0*eZpO^p@y9gfhhNI#F*oB
zW}YadK>>sv%YxIEZ_j{K@crx@MEd2u&2qWsf*`aSi%=E9o8AyCY?ZimgT9`ym&YS>
zCh3z!#@UlC?W7QkA(Dqd1-%aMTX9ay?9ZWyn16Oh-ODE~@BNs$b@tp8)ey#@yk36e
zAz*-AB@S{)oUtY-l(cL?3pmz%;7Bp$G5HDL8*x&hnjLKS=BXsUX=7>O^Yb50`b0Ns
zJ%6Tm#DjLsNo^F63d@?Q=cTjCs2#*Ix7n&gWI)dGULc_+H?ZRep>J-2QR<Y}kknrD
zNVc=}<5NWA@C7>t)TWHrv?&j8$Koxat`T8$`>kg3oSS4?P~!n^N#HOE$3lsmpRhTa
zr0t~TqL%)il$fPXflA46bGpWDsla<3&xX5$%l7yshC#1^dUQfgyD7;cd$GeE$)adl
zyxJr5+NG=VyX9urGcoeZhZiE1nw((>(7{>l@3JyqIBjG<M13|Q<9X9#(wlAg8Jo$?
z56i=4>Pq4&dl=borQYrae+jlt(09c@L=V-pi-<`ZEe1Z%Oofc7jP|fSaV?$S_TvTv
zDWN4_I;t)G%f{1zLD@E64Yd?A2jJwl{yH7=Nav^hG1Zc#aexQ0`YVqe2!6Sr#PZUx
zaOkcZ;zLiN-N-kP5dU)=^f}OK@8D_)vi~y-8kN<9+H^-_#5Ku*LUKNpni`gps1r!;
z=FH8@hk98KP4S5^9qw)M4&M!;$8qb?7M1NJF$Nlm>BG<{emQ!96bTC*9bI#gl*`$}
zRLc?H8s~|G%MyoU)>3<hur^S8@k&78AzS8dsrjKjNx<v+`f(>MLg2E;V1?^?kYbR#
zMZbVzCnO?zac#>P+1q_-&%(d88!nI-H&%9aL+^NHM>yi=BMHN9tKmz3V(*=++k2<F
zq`HUiVA?}Of{#B4j~b3jM_KFe5#V?O*5%3(+HsDTJZ&NC>*7)sBu+8BWi0Y(1jRx(
z-46$--_+t~$pF|WAi|_?VSaq&ND6DhWtOsMPeOb=+0j2n{{$6tayoI<28=x~Qj7Yy
zrx(8FCMzHO+U=7;a*JMi46ejLEUiBK%b`Bz!J5l77S|Na;Jw%(YCA`y1-@N^x+omh
zZw14H4#zAG6+a*DKkxA)nS*6tG2bLlhwO4~z47F-eXRswakbt7FUj-NXm#~mY_sY&
z3t{-=Jg8JBdM?rz;frBsaaur8m?53K3Oz|fxTLDH*)}GGzf`N~f>$D-e1H4G1Gme$
zS9F7qT6;9FuYO2!U$Nfr(HF%aK+z;e>UdCmFg|tU&L^I!OHv`UBZ~vWD(6KFkqw?A
ztloC6K9{d)#3xo6a`(%&GtU9|VYEVodmND+cm#qJ6z4)5;4*4NYII4fHEgcJbyBal
z$>#Bc11H`dYEsJn>^X%2JuGSxMG-&)HDLuOH=ZsDWgai*tz;Xl-+X92M5nGzk=>;*
zL9|RWEc)u<OnZ{^I-LYmK}G1|@bZD)k?$+3FOqYraVPkV#AAyoA=st|@Xj-9R`3`u
z{GqthidCn{*}zX(IH9bve8+_i`YC#d9ud;)vwj~EZ?aGDK4^XBnWP3^nP5b&1LfXB
z#Q*f;Xl#y#2xuq=rX`PANE571+aKOB<<QBC5KVV`{>1Ghx{5hf_;iK;wWDGu*_WO8
zofRVat6oG6f8j}eJSbqAKr9~`1<`AYEM$vrdxazP*U^hx!~P(|c*Z{UNbF4n8jKh!
z$ri4)lqjwl>?p>1`D2aAoYOrNb1}wcIa3%ZT7CMguf_m!8W6)Cz_7F`n!yoIGw;nO
zloY$vkXMy&5N}3k4Vg6q`@8gS&G5GesREWElB3xpnEW<qBwJCK7un0>+hV3(;Go(V
zl*bLSzz4*lze^N(g>$VpXIh!-H_|6Pf!mUY<%q`+yx<k$N=l&gu4xz_Wy$`AU|oh$
zL%S{$XB>uRAm@F^kYgB+hHD0Ye}h`a668<W#_bn3uNcte<+MGy><=lhl>`zbKf8A&
zkKM59!m9S<Fj#KXGNhPEWxWhh_ES2rI9cf&j31S~`I;~I)9?)2<-J?R=9(yNOae#O
zqTRQ-*VScX>{Mn_FSuUc5hfZ;8Ko$;_bcZ(a4|`4D~gz{ht@Q}uUmO!Aee1$RT_7d
z6I7?n)FbJOZrWjOOzV{xx#q#w4{O)VD;+X+xt5S}K813pm3fUZvmD<rUGm|%8)daM
ztV@Nyjws)T6FL{Y8FT3$TuxwA=epF}W8AqRaJl=avnCw#M#o@rdCg=W{&34;shh_8
zg+-uAFzhKq*vHwcho28uOQ0rOcXp2#Ll-*~3Fyrutn`{Sd<G}0>EUBocItq2y$_a-
zW1Bc+ZdhvJ`7HW;kQef%NOFA*hw7Z^g_zzh3D>#S3su*b8LM(&&HEAkRjoSDvDFA<
zbZ?ijHaR4W$1cL9bH<Ycd}ohJ;m&5OZWFw~9|Co<LwOD%E+u&IN3AVJk91C>Vex*(
zE}8iRucehER_Sj_tTMKzvOo(2-(dPR42oV#$?ayaPI&{Oh^o}cVRfiRvV81^-meZ+
ze%LP8zorv;`SzVXY~JTY6B-->^M0JA5UvzLdmASdcl*_*<g`wJu3<Q2Teb1sl;ex6
zu)=6#Do`2~u_ySIe45=V;Qee!OZf>1+B9;7cGabNIvM_l8u_xt`vacPCH;G(HD{dW
z_G`kfBSx>l6P{4u>U*HdWd#Eahh;tHd^&HE38>B(m<*QxF1(^j_<CuFeg*+Jcc^lL
zJY-m<obPB98wauvRiM-nj0g!>>o+!;GDNjIk#-WCa^ewCPfx-Whp#{a#e7`bRjAwU
zvZR?VFIgyewkh$qCrsX3)`s2U=A3G+MH+Op2@hPO3)OaGIL^e!A>*wsF1Vhief7Cm
z6-B<+^*x3QhTuTH8?Rbw0nDA<T!^=2hZE9CpDdL-4GGznd@(c*#ol#xb?GMLED=}F
ziK$n1`gvWOg8zNNmj%tjf%zK}S`sNGfdGRB_SxxZD%)jXA+8=@g{Dj)wX&f|5#GB(
zI_N%&>MEhyNvAwb&+-K-WQDDiadQ7el7qzF0}@@K%NF|udU8QJowrEpa2*S0{*w-_
zk>3e-$;k!4icwwiQDhXZ2#fCim?%=tB4~2TbDmRcCKEtaVto?|15TM8)&Lw|!e}+~
zH@k)1vhTGZ4?aPW!mlAxb!MPg`scw-j6KxTa=Y?<^vsT8KMXD{4$V@oyJWK!&xcrX
zg7JduQ$*evrHmz=NbH`Fu4*Ht<HU^XXd6*gc@q!#$s?C}{>4`z9_e5-Lx;OcI?!on
zn1OIMM;OdYSeJx^F`|-nh0hB8^M{)k=VNIP3Y+jS0OCMWVYky}d-zs$@4VJX4f&XM
zn%61C3-{0*w!G>r^|;wMeu*>%X~#h#Pner<bmy~dphFW^wmoA>BKcMyGbIXP8p6!}
z%#`K#g=x1bcI?mC8dRmxX9Qp?3xJk{;=PosCf1ZO<<EM-q_~sfOc{omiL8Ow>=D82
zrFg3E=XS^R2a)WZ5-Qu12{-o{O#->RfeDqarem1+tRJjiyf{ei6o9c~DKvM`BJh|H
zUt;LrW5)y{oDG)eKP|(V^UA_bjpIwGN)i2yr<%}W)|$N^@|a$HMfA@V$M&{Uxjw2E
zUbZ`*a@ijuf+BL=M;7r`!-GnJe+UB;KoAD~q~r*PK<e<WOu~A6dv1a^^~p;P*4xS4
zHe`tnLvE&+Z$VIDgR0^+wS>_GlCWSkH?%>tX&qrh!5w{0%FSb!vS)iFny0L8<p50;
z6K}X;F{KpYq}6M7mEE$;iblo!oD{7zw1Vjx*J8zkHEPFck$fktC8BiYLXmu)db4jl
zeiS^m;;OsboKoMCs4w80G%sI%v{2f)=A<QLQ`lL@am~?^-(BaFBIHomJ;&)A2T(h@
z5#-2zp>}i%1?^(RaPx#K=E=mE<8`a&mAox12(JoCWj`B%H_c4nCMF7{3aJx~y=6Eh
z_0dIL>a;B#ZbkmGaHR(K;)HGE+SOJ3W-JVK4DUgv`K(B8KjR)i<|)5#${H6o^Mk|F
zAPD@Gpv#YI)M~7W9(m5Z>>`q{sSNLZXM6hM2hA@DH%3*}j2cms^G!t={4B**8SD6J
znsll(A#_{%*>ZtnV!R2$3*4U!imA>nG3b&{5-+$(LISqnuwS*jzt1lH3g<IFVic(T
zZh01hf<_`^_x{8r%L`S%PpH$PtojR#4^YR_$RazLq}upiOQk}iz_(dT`gFZ@RnS1r
ze5L8gKTv`IBcGU9v11N+lFHk$$N_&qP+P3?9v)2&NP3it(MlseO&_Zk>Ymeq`e_Wu
z)vU3lULg+uz;b*{$GOf|rnGea>kx8k$gr`jLHs21`!Sju>Jou~G6D1T)QZC-!(N`g
zou$1+m`R~bVf2uCOsET8Ws6HB4!r1!+e1wC4KPZ>Cgx&A&o>1^7ei6r!*KdwRQE>t
zXt?HqtE$=1p|!)~ef<zViy`;h?-k<#RQw4KCCA@+J}eNn9U|#F2bLuTdCyVF*9lJt
zrU*4zbzfN#wK2>Dlz!OE^l$%C6x$gGab||zX!w{En8K^P>I%^-@7k;gnD-I;__V)8
z+9sv+LJV*bWs?bDENHDJ&|V>HriwIYnox{97=B&5fPiHbB(G$TyI)?!qEqbe8pPWi
zU#Upxz!Y7R5|g++qgJP3XTm&i$_{*Su^F*0u4-n=&B;c!sh*Y?{ZOQyX9Ciq$<2@G
zO~ifw7C13K{hFI*Hm6EeU-!JA;vtz^D+YL{YD*_04|jvB{3W`y6E_`=r6p~wKqsOi
zFS4uPH07f{)=OI+``#*5y`d9@sGgWYn~O-BLD9>_rYpWJX&?pPzT5JZT1|I}LC3PX
z;qiwyHL+1OiCEUjVe8ng3@Ik71spkxD#iS0dU)+vUaXMds-HNV1^DiTcKgMu2C@_S
zgU(`N0p%PRuSA2F>k_M6a{8P~QX4@T#<H52d+qPx(UTAW4de1@I6ORx=iBM#Iw-BP
zFxVw>;_bBXhBW<xdp}4Qc}M&lwTKhP2q$G0*x`$`F5fv~S6i!AFt|($u)VBrPjofy
z#NHB|P~Cr%q_bM&Pj8XX@F4KKulk4tRZfBk0WqHRL~Z#8@x@ko&O{daiTLuAf3ask
z4*Ji#Dqex71BnyJ&i;u%!$-!%z(_^{vNi-8nOU3gk*O$)0XWG7_+RsqipU8oYsia|
zfQ^mK3_;vRU_(c%CxQy#iG-t1BCjI!PEweJ3;+bm*?_F&eqk8Eb|yfeh_VRDA9ayG
zMM$1*0tAZ6l97=8p^U-E!HA5X_rGd>vd-F``;R6*GE)Z!8*U&F{B(~$MW64%{6y9P
z{!u3*`9r|P(#+c8FTAs}GlMhBFMF7{xVV77T7N^04FAH}INDkMLKztXL6)HB{yi~+
z7?^;+vCp0T3;o}$cn16iKhuw%H2h*F{jWlQ2a^4E@IQv+FXue#=jVMsa+`pxL3a8M
zU_1VQy8Ow#Obo0f)M{qdEX*{#z<+^xNdW+MRyHd(W@;fvGfN|GPEKZ48UWx=t!CC{
z4rcn607E;_FWpKGARAMVHHk3T5@Y~&w6g~Nsqx>yKaBb%_B4|KM*0pQ{-=Rq1u!uI
zm^qc1S-6>*xmlV2l>R4<*T|6jf4kw|nxCP+b+Z8&*#V3kzjU*6v$634e>Xm(EcLBT
z9Q92={2*(9iqfyPzb^e@EXe4ouhu32Ls!G67z01YpSJz$@;|Xgj!!;+>L9<oGP495
zhYSnzlj>hC{w?+w;txSbdypN#2xM$#4KgD61+><;0`ZYaS{s8&n8<*C`u%@}G5_CS
zEdMtc>tC?HzQp#=v((<f%<vBj!3O3aLkEB%*wNbI={JGtm&BjnFz)9*@bmtz{iWj9
z<^MUBgYX>70XaPT`;Tajrk4FICx+LOZmXMd8n+&aB*%|84xvoNdD{MFNlmY`a44!f
zdh7^q_pYXKqI^>1@j=`?7f?--OU@1s+4f9o#6%vYr%-1;jBdrO=8idj`2z$(3l<=A
z$HJ}Nz)4*-Z|9G7jy%k?mi$!gO%4f!w+X@KJ^?<}f*@9_t9Ol=$|{aE9S#Xqg-nM9
z=H0u>lUFHKS};M%6FAhEAVhWh4_Q?ub|ZpPc-kepx^(cQaq$JcK7o9vta}%Abxmrc
zNXSGPS96yN7!#S%*;Z?-t3oo1)?XO7kbKZSiJ$@*d97-8ELpgz4&fK@cI!S>C@izY
zf?=C*!F%Qlyf7tbz7OiSvFA*p{9jjKTSrtyrBu_l4w^sv^z#<khSFCnvjaQLUjbiX
zN)@`<dF33o-=jGo4~ZgO&S;pOmv*3r&|gPadIM#p+r8U5bc}+REE@!P)VWlM0fis9
zuOWHrwK;oJ3$u}NuyhH@n8M$gi1)v>VT8`XOcKpXpyan(O%N=IAiTykBob3L8;HbS
zX1>-L+%5_KzU>zX(>kChG%{+y^ojQz)y|gKHh%amk>vdxIfisL&fsAgppJk@Dq(wz
zp8TaWwKIK=sn~lQ525iBn{-!HO-a_pX`7YI_DCMzfXyEXgze<~84}B=XR4oO-HzXy
zGU-f~jB^%Fg@hZYNq1r7oQ(+69lO+DQ@0$+&5=Os(f}@&*Y4{Q=*g!^U~YA?cbM*o
zcuGSun~>P_zW6M7QyRX2eP=>6hh5%KzVv};v$QU0_4-8h0k`3}Bu$$UNjmT8Z&wf5
ziFLnYd8TE+cmy+XS}2Xn&Z(5$b}U8lwMSq8V@RF&zB{}CTsx_vhlfx)5XJEXaZY4K
zoOrN<90^G*VX2JTJr2I>%Q6l&J)SLrxEZBP<|_^K$I$$U7rwP3O|P(q-~uyz?xnD_
zEZ;Moi}*;AH`RBcZ>ie^fYV{$?E_*Bm%Bnf2P8_0wU#}2r%lHOdUKW6Q>PAYBb-2N
zNiBWFMjR$;Jp%y)7XvmD>0DM??EI5~jx^hxrJu78a5Upez8iSsf8gJgU}TVETjEZr
zcvC%OOrt<JZ8zW4%4xk3+Kv$AL7U5DnvAp_2j5#G{5Jk`wWmox@o4Dsna?uq+R9j_
z(&AoKc<cg6%W9dy#x3Q#WXC0)inLYjx#}3i84}v|H7Y0x4ksHksr5WJUP&<t9a&eX
zAWye|d{8_5-uuf1122M8@Isho)}*rVXLd|6#8HSGtTGLzSESP$aEeGJECLMt-HwLv
z9X#fm(d#bYOqluvA3_ZJMG^kIbPtzsAvvEQ^hiQ~wl5~Ia<X2KwSCv2oJhG^mDIYj
zhl1>w#_N^&@0kGRO8Wh2{@f`T2)ig$rlnrVnMCq*W`^;@H8q+zt?7dy4}FJ~rFRnR
zC=l+^8_QTpIdT%y;L7*dqW(TZ2}%G6Exdqntc)T>KioH<Zg#^fqCvnXg0S?keRo{P
z_&kD9{^d7smbW&>g(tTOM9VLJL^VlwNRMdTKpMp(hf990iFZL!<QJeI(D)Whjzn6_
z_k%p>8_Va59eVvTJ>nP(39Lvm?|r;h;ieypx~uIF*`+M~q+d=IjO%pEnt1%u5yUFB
z-w7?nZzx9X;0N}Q8*tRoDy6^EW8xr1@}=?NdwV`??p^4L03SVHi=ozqH`^iyy&9Xk
z$Xm=FLfJ?213JWpgUtJ}{AiJ|Q3>Dw_JCvTTj-;C`jpy3_~jhYSaec=%<RL7T;*bA
z|JSso^TJ$QO(hnND=QhTcgvQX$7A4mgl3VCxfWJ^H`6+aUBY?Z99R!LfZjk>1fOr;
z2Gxn1-SfV64|^ApKWt6kr!J>ika6LkXhaMdT4)<ob*+J380M}GSFPV!<YrqLGV|RT
z)Y-hUYirzC{3eIIR=Ji&RSDi?ySKmR@`}$|PD9C+hHbNg+xCRNlP*=?PSL_qzIvSc
zy7|yqdGRZ@-(jb%G6@3#5kmWW4f@|W&X`aC2Qs3{f&fWbF`$*cwV5%<{ukT1I9kD?
zjS;1L>58Vp9bA%P>0p4Fi}Z4CSJ-pf(6p3oI5&f<)9bD?aQCAh+~!8q+TqpDEeXm>
zPo)q-N7?U`z7iivde*HnWMW&m-H{CvWQZvvLL5>bisCXA#NyXocr823A1-g0uu({I
z<KAh;aZ}AWVXl&C1(jwDR-(o)k?2YM@Pj`-w$J4N&7UN+e4GhK)fxiJ-RCie+EAa8
z*pkK8<@z8vKM;2-n_}94X&^yX#rB<#lQk>>4qD`mU&q4^dbl_pW9RCSidJP_z_~;R
zSu2a0$~fYFALRl!;)$&^V<Mlh;SH>foQ3d`SVuQyx{!yN4Q+SZCw}?<(eq5-%Xx$Q
z(8A8So4sTA@%^V6@5HRRSE+ovJHY2PzKoS510f^?geBCoe<5FBK>W`f`6nm;E&XQ9
z|6A(cr1<}ch&~nnzbNv*RsSCHzdz`CrnUbkEj|_hMsokR;NN#L&(DGWlQy5G&VQZ?
z{g!)ff9BEud!O?kIezk|cLtu;F3-E3-%`KL{QI1JUa9;iRZ#tN-SThAzmLZAoc>R0
cdwRd%zs_)ZX_%MKFxaQhx2J(513uUOAEgSs2LJ#7

literal 0
HcmV?d00001


From e646a4796eb2208b73293cefa5afcd001be0af22 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 7 Jun 2005 22:46:38 +0000
Subject: [PATCH 040/124] Javadoc fix

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@772 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/ReadablePartial.java | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/JodaTime/src/java/org/joda/time/ReadablePartial.java b/JodaTime/src/java/org/joda/time/ReadablePartial.java
index b8c431e15..d8aba3133 100644
--- a/JodaTime/src/java/org/joda/time/ReadablePartial.java
+++ b/JodaTime/src/java/org/joda/time/ReadablePartial.java
@@ -25,7 +25,7 @@
  * not include a time zone.
  * <p>
  * A <code>ReadablePartial</code> can be converted to a <code>ReadableInstant</code>
- * using one of the <code>resolve</code> methods. These work by providing a full base
+ * using the <code>toDateTime</code> method. This works by providing a full base
  * instant that can be used to 'fill in the gaps' and specify a time zone.
  *
  * @author Stephen Colebourne

From 04c3867fed222e874ce5174d28da5504e18e970f Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 7 Jun 2005 22:57:56 +0000
Subject: [PATCH 041/124] Reinstate serialisation test

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@773 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/test/org/joda/time/TestAll.java | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/JodaTime/src/test/org/joda/time/TestAll.java b/JodaTime/src/test/org/joda/time/TestAll.java
index ebc3496d4..140c95341 100644
--- a/JodaTime/src/test/org/joda/time/TestAll.java
+++ b/JodaTime/src/test/org/joda/time/TestAll.java
@@ -89,9 +89,9 @@ public static Test suite() {
         suite.addTest(TestDateTimeZone.suite());
         suite.addTest(TestPeriodType.suite());
 //        suite.addTest(TestParseISO.suite());
-
+        
+        suite.addTest(TestSerialization.suite());
         suite.addTest(TestIllegalFieldValueException.suite());
-
         return suite;
     }
 

From fb030b32c9fb884e382f58a2a08fc0ed3ae129eb Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 7 Jun 2005 23:02:08 +0000
Subject: [PATCH 042/124] Add methods to simplify common addition and
 subtraction of periods

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@774 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/java/org/joda/time/DateMidnight.java  | 229 +++++++++-
 JodaTime/src/java/org/joda/time/DateTime.java | 420 +++++++++++++++++-
 .../src/java/org/joda/time/DurationField.java |  28 ++
 .../src/java/org/joda/time/TimeOfDay.java     | 194 +++++++-
 .../src/java/org/joda/time/YearMonthDay.java  | 152 ++++++-
 .../java/org/joda/time/field/FieldUtils.java  |  23 +-
 6 files changed, 976 insertions(+), 70 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/DateMidnight.java b/JodaTime/src/java/org/joda/time/DateMidnight.java
index 27418327e..7446e47bd 100644
--- a/JodaTime/src/java/org/joda/time/DateMidnight.java
+++ b/JodaTime/src/java/org/joda/time/DateMidnight.java
@@ -387,11 +387,12 @@ public DateMidnight withField(DateTimeFieldType fieldType, int value) {
      * Gets a copy of this datetime with the value of the specified field increased.
      * <p>
      * If the addition is zero or the field is null, then <code>this</code> is returned.
+     * <p>
      * These three lines are equivalent:
      * <pre>
-     * DateTime added = dt.withFieldAdded(DateTimeFieldType.dayOfMonth(), 6);
-     * DateTime added = dt.dayOfMonth().addToCopy(6);
-     * DateTime added = dt.property(DateTimeFieldType.dayOfMonth()).addToCopy(6);
+     * DateMidnight added = dt.withFieldAdded(DateTimeFieldType.year(), 6);
+     * DateMidnight added = dt.plusYears(6);
+     * DateMidnight added = dt.year().addToCopy(6);
      * </pre>
      * 
      * @param fieldType  the field type to add to, not null
@@ -452,10 +453,10 @@ public DateMidnight withDurationAdded(ReadableDuration durationToAdd, int scalar
      * <p>
      * If the addition is zero, then <code>this</code> is returned.
      * <p>
-     * To add or subtract on a single field use the properties, for example:
-     * <pre>
-     * DateTime added = dt.dayOfMonth().addToCopy(6);
-     * </pre>
+     * This method is typically used to add multiple copies of complex
+     * period instances. Adding one field is best achieved using methods
+     * like {@link #withFieldAdded(DurationFieldType, int)}
+     * or {@link #plusYears(int)}.
      * 
      * @param period  the period to add to this one, null means zero
      * @param scalar  the amount of times to add, such as -1 to subtract once
@@ -476,7 +477,7 @@ public DateMidnight withPeriodAdded(ReadablePeriod period, int scalar) {
      * <p>
      * If the amount is zero or null, then <code>this</code> is returned.
      * 
-     * @param duration  the duration to add to this one
+     * @param duration  the duration, in millis, to add to this one
      * @return a copy of this datetime with the duration added
      * @throws ArithmeticException if the new datetime exceeds the capacity of a long
      */
@@ -502,11 +503,9 @@ public DateMidnight plus(ReadableDuration duration) {
      * <p>
      * If the amount is zero or null, then <code>this</code> is returned.
      * <p>
-     * The following two lines are identical in effect:
-     * <pre>
-     * DateTime added = dt.hourOfDay().addToCopy(6);
-     * DateTime added = dt.plus(Period.hours(6));
-     * </pre>
+     * This method is typically used to add complex period instances.
+     * Adding one field is best achieved using methods
+     * like {@link #plusYears(int)}.
      * 
      * @param period  the duration to add to this one, null means zero
      * @return a copy of this datetime with the period added
@@ -516,13 +515,110 @@ public DateMidnight plus(ReadablePeriod period) {
         return withPeriodAdded(period, 1);
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Returns a new datetime plus the specified number of years.
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * DateMidnight added = dt.plusYears(6);
+     * DateMidnight added = dt.plus(Period.years(6));
+     * DateMidnight added = dt.withFieldAdded(DurationFieldType.years(), 6);
+     * </pre>
+     *
+     * @param years  the amount of years to add, may be negative
+     * @return the new datetime plus the increased years
+     * @since 1.1
+     */
+    public DateMidnight plusYears(int years) {
+        if (years == 0) {
+            return this;
+        }
+        long instant = getChronology().years().add(getMillis(), years);
+        return withMillis(instant);
+    }
+
+    /**
+     * Returns a new datetime plus the specified number of months.
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * DateMidnight added = dt.plusMonths(6);
+     * DateMidnight added = dt.plus(Period.months(6));
+     * DateMidnight added = dt.withFieldAdded(DurationFieldType.months(), 6);
+     * </pre>
+     *
+     * @param months  the amount of months to add, may be negative
+     * @return the new datetime plus the increased months
+     * @since 1.1
+     */
+    public DateMidnight plusMonths(int months) {
+        if (months == 0) {
+            return this;
+        }
+        long instant = getChronology().months().add(getMillis(), months);
+        return withMillis(instant);
+    }
+
+    /**
+     * Returns a new datetime plus the specified number of weeks.
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * DateMidnight added = dt.plusWeeks(6);
+     * DateMidnight added = dt.plus(Period.weeks(6));
+     * DateMidnight added = dt.withFieldAdded(DurationFieldType.weeks(), 6);
+     * </pre>
+     *
+     * @param weeks  the amount of weeks to add, may be negative
+     * @return the new datetime plus the increased weeks
+     * @since 1.1
+     */
+    public DateMidnight plusWeeks(int weeks) {
+        if (weeks == 0) {
+            return this;
+        }
+        long instant = getChronology().weeks().add(getMillis(), weeks);
+        return withMillis(instant);
+    }
+
+    /**
+     * Returns a new datetime plus the specified number of days.
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * DateMidnight added = dt.plusDays(6);
+     * DateMidnight added = dt.plus(Period.days(6));
+     * DateMidnight added = dt.withFieldAdded(DurationFieldType.days(), 6);
+     * </pre>
+     *
+     * @param days  the amount of days to add, may be negative
+     * @return the new datetime plus the increased days
+     * @since 1.1
+     */
+    public DateMidnight plusDays(int days) {
+        if (days == 0) {
+            return this;
+        }
+        long instant = getChronology().days().add(getMillis(), days);
+        return withMillis(instant);
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Gets a copy of this datetime with the specified duration take away.
      * <p>
      * If the amount is zero or null, then <code>this</code> is returned.
      * 
-     * @param duration  the duration to reduce this instant by
+     * @param duration  the duration, in millis, to reduce this instant by
      * @return a copy of this datetime with the duration taken away
      * @throws ArithmeticException if the new datetime exceeds the capacity of a long
      */
@@ -548,11 +644,9 @@ public DateMidnight minus(ReadableDuration duration) {
      * <p>
      * If the amount is zero or null, then <code>this</code> is returned.
      * <p>
-     * The following two lines are identical in effect:
-     * <pre>
-     * DateTime added = dt.hourOfDay().addToCopy(-6);
-     * DateTime added = dt.minus(Period.hours(6));
-     * </pre>
+     * This method is typically used to subtract complex period instances.
+     * Subtracting one field is best achieved using methods
+     * like {@link #minusYears(int)}.
      * 
      * @param period  the period to reduce this instant by
      * @return a copy of this datetime with the period taken away
@@ -562,6 +656,103 @@ public DateMidnight minus(ReadablePeriod period) {
         return withPeriodAdded(period, -1);
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Returns a new datetime minus the specified number of years.
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * DateTime subtracted = dt.minusYears(6);
+     * DateTime subtracted = dt.minus(Period.years(6));
+     * DateTime subtracted = dt.withFieldAdded(DurationFieldType.years(), -6);
+     * </pre>
+     *
+     * @param years  the amount of years to subtract, may be negative
+     * @return the new datetime minus the increased years
+     * @since 1.1
+     */
+    public DateMidnight minusYears(int years) {
+        if (years == 0) {
+            return this;
+        }
+        long instant = getChronology().years().subtract(getMillis(), years);
+        return withMillis(instant);
+    }
+
+    /**
+     * Returns a new datetime minus the specified number of months.
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * DateMidnight subtracted = dt.minusMonths(6);
+     * DateMidnight subtracted = dt.minus(Period.months(6));
+     * DateMidnight subtracted = dt.withFieldAdded(DurationFieldType.months(), -6);
+     * </pre>
+     *
+     * @param months  the amount of months to subtract, may be negative
+     * @return the new datetime minus the increased months
+     * @since 1.1
+     */
+    public DateMidnight minusMonths(int months) {
+        if (months == 0) {
+            return this;
+        }
+        long instant = getChronology().months().subtract(getMillis(), months);
+        return withMillis(instant);
+    }
+
+    /**
+     * Returns a new datetime minus the specified number of weeks.
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * DateMidnight subtracted = dt.minusWeeks(6);
+     * DateMidnight subtracted = dt.minus(Period.weeks(6));
+     * DateMidnight subtracted = dt.withFieldAdded(DurationFieldType.weeks(), -6);
+     * </pre>
+     *
+     * @param weeks  the amount of weeks to subtract, may be negative
+     * @return the new datetime minus the increased weeks
+     * @since 1.1
+     */
+    public DateMidnight minusWeeks(int weeks) {
+        if (weeks == 0) {
+            return this;
+        }
+        long instant = getChronology().weeks().subtract(getMillis(), weeks);
+        return withMillis(instant);
+    }
+
+    /**
+     * Returns a new datetime minus the specified number of days.
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * DateMidnight subtracted = dt.minusDays(6);
+     * DateMidnight subtracted = dt.minus(Period.days(6));
+     * DateMidnight subtracted = dt.withFieldAdded(DurationFieldType.days(), -6);
+     * </pre>
+     *
+     * @param days  the amount of days to subtract, may be negative
+     * @return the new datetime minus the increased days
+     * @since 1.1
+     */
+    public DateMidnight minusDays(int days) {
+        if (days == 0) {
+            return this;
+        }
+        long instant = getChronology().days().subtract(getMillis(), days);
+        return withMillis(instant);
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Gets the property object for the specified type, which contains many useful methods.
diff --git a/JodaTime/src/java/org/joda/time/DateTime.java b/JodaTime/src/java/org/joda/time/DateTime.java
index 62f0989c9..e4a16209c 100644
--- a/JodaTime/src/java/org/joda/time/DateTime.java
+++ b/JodaTime/src/java/org/joda/time/DateTime.java
@@ -519,9 +519,9 @@ public DateTime withField(DateTimeFieldType fieldType, int value) {
      * <p>
      * These three lines are equivalent:
      * <pre>
-     * DateTime added = dt.withField(DateTimeFieldType.dayOfMonth(), 6);
-     * DateTime added = dt.dayOfMonth().addToCopy(6);
-     * DateTime added = dt.property(DateTimeFieldType.dayOfMonth()).addToCopy(6);
+     * DateTime added = dt.withFieldAdded(DurationFieldType.years(), 6);
+     * DateTime added = dt.plusYears(6);
+     * DateTime added = dt.plus(Period.years(6));
      * </pre>
      * 
      * @param fieldType  the field type to add to, not null
@@ -582,10 +582,10 @@ public DateTime withDurationAdded(ReadableDuration durationToAdd, int scalar) {
      * <p>
      * If the addition is zero, then <code>this</code> is returned.
      * <p>
-     * To add or subtract on a single field use the properties, for example:
-     * <pre>
-     * DateTime added = dt.hourOfDay().addToCopy(6);
-     * </pre>
+     * This method is typically used to add multiple copies of complex
+     * period instances. Adding one field is best achieved using methods
+     * like {@link #withFieldAdded(DurationFieldType, int)}
+     * or {@link #plusYears(int)}.
      * 
      * @param period  the period to add to this one, null means zero
      * @param scalar  the amount of times to add, such as -1 to subtract once
@@ -606,7 +606,7 @@ public DateTime withPeriodAdded(ReadablePeriod period, int scalar) {
      * <p>
      * If the amount is zero or null, then <code>this</code> is returned.
      * 
-     * @param duration  the duration to add to this one
+     * @param duration  the duration, in millis, to add to this one
      * @return a copy of this datetime with the duration added
      * @throws ArithmeticException if the new datetime exceeds the capacity of a long
      */
@@ -632,11 +632,9 @@ public DateTime plus(ReadableDuration duration) {
      * <p>
      * If the amount is zero or null, then <code>this</code> is returned.
      * <p>
-     * The following two lines are identical in effect:
-     * <pre>
-     * DateTime added = dt.hourOfDay().addToCopy(6);
-     * DateTime added = dt.plus(Period.hours(6));
-     * </pre>
+     * This method is typically used to add complex period instances.
+     * Adding one field is best achieved using methods
+     * like {@link #plusYears(int)}.
      * 
      * @param period  the duration to add to this one, null means zero
      * @return a copy of this datetime with the period added
@@ -646,13 +644,206 @@ public DateTime plus(ReadablePeriod period) {
         return withPeriodAdded(period, 1);
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Returns a new datetime plus the specified number of years.
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * DateTime added = dt.plusYears(6);
+     * DateTime added = dt.plus(Period.years(6));
+     * DateTime added = dt.withFieldAdded(DurationFieldType.years(), 6);
+     * </pre>
+     *
+     * @param years  the amount of years to add, may be negative
+     * @return the new datetime plus the increased years
+     * @since 1.1
+     */
+    public DateTime plusYears(int years) {
+        if (years == 0) {
+            return this;
+        }
+        long instant = getChronology().years().add(getMillis(), years);
+        return withMillis(instant);
+    }
+
+    /**
+     * Returns a new datetime plus the specified number of months.
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * DateTime added = dt.plusMonths(6);
+     * DateTime added = dt.plus(Period.months(6));
+     * DateTime added = dt.withFieldAdded(DurationFieldType.months(), 6);
+     * </pre>
+     *
+     * @param months  the amount of months to add, may be negative
+     * @return the new datetime plus the increased months
+     * @since 1.1
+     */
+    public DateTime plusMonths(int months) {
+        if (months == 0) {
+            return this;
+        }
+        long instant = getChronology().months().add(getMillis(), months);
+        return withMillis(instant);
+    }
+
+    /**
+     * Returns a new datetime plus the specified number of weeks.
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * DateTime added = dt.plusWeeks(6);
+     * DateTime added = dt.plus(Period.weeks(6));
+     * DateTime added = dt.withFieldAdded(DurationFieldType.weeks(), 6);
+     * </pre>
+     *
+     * @param weeks  the amount of weeks to add, may be negative
+     * @return the new datetime plus the increased weeks
+     * @since 1.1
+     */
+    public DateTime plusWeeks(int weeks) {
+        if (weeks == 0) {
+            return this;
+        }
+        long instant = getChronology().weeks().add(getMillis(), weeks);
+        return withMillis(instant);
+    }
+
+    /**
+     * Returns a new datetime plus the specified number of days.
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * DateTime added = dt.plusDays(6);
+     * DateTime added = dt.plus(Period.days(6));
+     * DateTime added = dt.withFieldAdded(DurationFieldType.days(), 6);
+     * </pre>
+     *
+     * @param days  the amount of days to add, may be negative
+     * @return the new datetime plus the increased days
+     * @since 1.1
+     */
+    public DateTime plusDays(int days) {
+        if (days == 0) {
+            return this;
+        }
+        long instant = getChronology().days().add(getMillis(), days);
+        return withMillis(instant);
+    }
+
+    /**
+     * Returns a new datetime plus the specified number of hours.
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * DateTime added = dt.plusHours(6);
+     * DateTime added = dt.plus(Period.hours(6));
+     * DateTime added = dt.withFieldAdded(DurationFieldType.hours(), 6);
+     * </pre>
+     *
+     * @param hours  the amount of hours to add, may be negative
+     * @return the new datetime plus the increased hours
+     * @since 1.1
+     */
+    public DateTime plusHours(int hours) {
+        if (hours == 0) {
+            return this;
+        }
+        long instant = getChronology().hours().add(getMillis(), hours);
+        return withMillis(instant);
+    }
+
+    /**
+     * Returns a new datetime plus the specified number of minutes.
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * DateTime added = dt.plusMinutes(6);
+     * DateTime added = dt.plus(Period.minutes(6));
+     * DateTime added = dt.withFieldAdded(DurationFieldType.minutes(), 6);
+     * </pre>
+     *
+     * @param minutes  the amount of minutes to add, may be negative
+     * @return the new datetime plus the increased minutes
+     * @since 1.1
+     */
+    public DateTime plusMinutes(int minutes) {
+        if (minutes == 0) {
+            return this;
+        }
+        long instant = getChronology().minutes().add(getMillis(), minutes);
+        return withMillis(instant);
+    }
+
+    /**
+     * Returns a new datetime plus the specified number of seconds.
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * DateTime added = dt.plusSeconds(6);
+     * DateTime added = dt.plus(Period.seconds(6));
+     * DateTime added = dt.withFieldAdded(DurationFieldType.seconds(), 6);
+     * </pre>
+     *
+     * @param seconds  the amount of seconds to add, may be negative
+     * @return the new datetime plus the increased seconds
+     * @since 1.1
+     */
+    public DateTime plusSeconds(int seconds) {
+        if (seconds == 0) {
+            return this;
+        }
+        long instant = getChronology().seconds().add(getMillis(), seconds);
+        return withMillis(instant);
+    }
+
+    /**
+     * Returns a new datetime plus the specified number of millis.
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * DateTime added = dt.plusMillis(6);
+     * DateTime added = dt.plus(Period.millis(6));
+     * DateTime added = dt.withFieldAdded(DurationFieldType.millis(), 6);
+     * </pre>
+     *
+     * @param millis  the amount of millis to add, may be negative
+     * @return the new datetime plus the increased millis
+     * @since 1.1
+     */
+    public DateTime plusMillis(int millis) {
+        if (millis == 0) {
+            return this;
+        }
+        long instant = getChronology().millis().add(getMillis(), millis);
+        return withMillis(instant);
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Gets a copy of this datetime with the specified duration take away.
      * <p>
      * If the amount is zero or null, then <code>this</code> is returned.
      * 
-     * @param duration  the duration to reduce this instant by
+     * @param duration  the duration, in millis, to reduce this instant by
      * @return a copy of this datetime with the duration taken away
      * @throws ArithmeticException if the new datetime exceeds the capacity of a long
      */
@@ -678,11 +869,9 @@ public DateTime minus(ReadableDuration duration) {
      * <p>
      * If the amount is zero or null, then <code>this</code> is returned.
      * <p>
-     * The following two lines are identical in effect:
-     * <pre>
-     * DateTime added = dt.hourOfDay().addToCopy(-6);
-     * DateTime added = dt.minus(Period.hours(6));
-     * </pre>
+     * This method is typically used to subtract complex period instances.
+     * Subtracting one field is best achieved using methods
+     * like {@link #minusYears(int)}.
      * 
      * @param period  the period to reduce this instant by
      * @return a copy of this datetime with the period taken away
@@ -692,6 +881,199 @@ public DateTime minus(ReadablePeriod period) {
         return withPeriodAdded(period, -1);
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Returns a new datetime minus the specified number of years.
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * DateTime subtracted = dt.minusYears(6);
+     * DateTime subtracted = dt.minus(Period.years(6));
+     * DateTime subtracted = dt.withFieldAdded(DurationFieldType.years(), -6);
+     * </pre>
+     *
+     * @param years  the amount of years to subtract, may be negative
+     * @return the new datetime minus the increased years
+     * @since 1.1
+     */
+    public DateTime minusYears(int years) {
+        if (years == 0) {
+            return this;
+        }
+        long instant = getChronology().years().subtract(getMillis(), years);
+        return withMillis(instant);
+    }
+
+    /**
+     * Returns a new datetime minus the specified number of months.
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * DateTime subtracted = dt.minusMonths(6);
+     * DateTime subtracted = dt.minus(Period.months(6));
+     * DateTime subtracted = dt.withFieldAdded(DurationFieldType.months(), -6);
+     * </pre>
+     *
+     * @param months  the amount of months to subtract, may be negative
+     * @return the new datetime minus the increased months
+     * @since 1.1
+     */
+    public DateTime minusMonths(int months) {
+        if (months == 0) {
+            return this;
+        }
+        long instant = getChronology().months().subtract(getMillis(), months);
+        return withMillis(instant);
+    }
+
+    /**
+     * Returns a new datetime minus the specified number of weeks.
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * DateTime subtracted = dt.minusWeeks(6);
+     * DateTime subtracted = dt.minus(Period.weeks(6));
+     * DateTime subtracted = dt.withFieldAdded(DurationFieldType.weeks(), -6);
+     * </pre>
+     *
+     * @param weeks  the amount of weeks to subtract, may be negative
+     * @return the new datetime minus the increased weeks
+     * @since 1.1
+     */
+    public DateTime minusWeeks(int weeks) {
+        if (weeks == 0) {
+            return this;
+        }
+        long instant = getChronology().weeks().subtract(getMillis(), weeks);
+        return withMillis(instant);
+    }
+
+    /**
+     * Returns a new datetime minus the specified number of days.
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * DateTime subtracted = dt.minusDays(6);
+     * DateTime subtracted = dt.minus(Period.days(6));
+     * DateTime subtracted = dt.withFieldAdded(DurationFieldType.days(), -6);
+     * </pre>
+     *
+     * @param days  the amount of days to subtract, may be negative
+     * @return the new datetime minus the increased days
+     * @since 1.1
+     */
+    public DateTime minusDays(int days) {
+        if (days == 0) {
+            return this;
+        }
+        long instant = getChronology().days().subtract(getMillis(), days);
+        return withMillis(instant);
+    }
+
+    /**
+     * Returns a new datetime minus the specified number of hours.
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * DateTime subtracted = dt.minusHours(6);
+     * DateTime subtracted = dt.minus(Period.hours(6));
+     * DateTime subtracted = dt.withFieldAdded(DurationFieldType.hours(), -6);
+     * </pre>
+     *
+     * @param hours  the amount of hours to subtract, may be negative
+     * @return the new datetime minus the increased hours
+     * @since 1.1
+     */
+    public DateTime minusHours(int hours) {
+        if (hours == 0) {
+            return this;
+        }
+        long instant = getChronology().hours().subtract(getMillis(), hours);
+        return withMillis(instant);
+    }
+
+    /**
+     * Returns a new datetime minus the specified number of minutes.
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * DateTime subtracted = dt.minusMinutes(6);
+     * DateTime subtracted = dt.minus(Period.minutes(6));
+     * DateTime subtracted = dt.withFieldAdded(DurationFieldType.minutes(), -6);
+     * </pre>
+     *
+     * @param minutes  the amount of minutes to subtract, may be negative
+     * @return the new datetime minus the increased minutes
+     * @since 1.1
+     */
+    public DateTime minusMinutes(int minutes) {
+        if (minutes == 0) {
+            return this;
+        }
+        long instant = getChronology().minutes().subtract(getMillis(), minutes);
+        return withMillis(instant);
+    }
+
+    /**
+     * Returns a new datetime minus the specified number of seconds.
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * DateTime subtracted = dt.minusSeconds(6);
+     * DateTime subtracted = dt.minus(Period.seconds(6));
+     * DateTime subtracted = dt.withFieldAdded(DurationFieldType.seconds(), -6);
+     * </pre>
+     *
+     * @param seconds  the amount of seconds to subtract, may be negative
+     * @return the new datetime minus the increased seconds
+     * @since 1.1
+     */
+    public DateTime minusSeconds(int seconds) {
+        if (seconds == 0) {
+            return this;
+        }
+        long instant = getChronology().seconds().subtract(getMillis(), seconds);
+        return withMillis(instant);
+    }
+
+    /**
+     * Returns a new datetime minus the specified number of millis.
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * DateTime subtracted = dt.minusMillis(6);
+     * DateTime subtracted = dt.minus(Period.millis(6));
+     * DateTime subtracted = dt.withFieldAdded(DurationFieldType.millis(), -6);
+     * </pre>
+     *
+     * @param millis  the amount of millis to subtract, may be negative
+     * @return the new datetime minus the increased millis
+     * @since 1.1
+     */
+    public DateTime minusMillis(int millis) {
+        if (millis == 0) {
+            return this;
+        }
+        long instant = getChronology().millis().subtract(getMillis(), millis);
+        return withMillis(instant);
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Gets the property object for the specified type, which contains many useful methods.
diff --git a/JodaTime/src/java/org/joda/time/DurationField.java b/JodaTime/src/java/org/joda/time/DurationField.java
index 23e966150..dad64260f 100644
--- a/JodaTime/src/java/org/joda/time/DurationField.java
+++ b/JodaTime/src/java/org/joda/time/DurationField.java
@@ -197,6 +197,34 @@
      */
     public abstract long add(long instant, long value);
 
+    /**
+     * Subtracts a duration value (which may be negative) from the instant.
+     * 
+     * @param instant  the milliseconds from 1970-01-01T00:00:00Z to subtract from
+     * @param value  the value to subtract, in the units of the field
+     * @return the updated milliseconds
+     */
+    public long subtract(long instant, int value) {
+        if (value == Integer.MIN_VALUE) {
+            return subtract(instant, (long) value);
+        }
+        return add(instant, -value);
+    }
+
+    /**
+     * Subtracts a duration value (which may be negative) from the instant.
+     * 
+     * @param instant  the milliseconds from 1970-01-01T00:00:00Z to subtract from
+     * @param value  the value to subtract, in the units of the field
+     * @return the updated milliseconds
+     */
+    public long subtract(long instant, long value) {
+        if (value == Long.MIN_VALUE) {
+            throw new ArithmeticException("Long.MIN_VALUE cannot be negated");
+        }
+        return add(instant, -value);
+    }
+
     /**
      * Computes the difference between two instants, as measured in the units
      * of this field. Any fractional units are dropped from the result. Calling
diff --git a/JodaTime/src/java/org/joda/time/TimeOfDay.java b/JodaTime/src/java/org/joda/time/TimeOfDay.java
index b4c013ca3..e5bc48bcd 100644
--- a/JodaTime/src/java/org/joda/time/TimeOfDay.java
+++ b/JodaTime/src/java/org/joda/time/TimeOfDay.java
@@ -455,9 +455,9 @@ public TimeOfDay withField(DateTimeFieldType fieldType, int value) {
      * <p>
      * These three lines are equivalent:
      * <pre>
-     * TimeOfDay added = tod.withFieldAdded(DateTimeFieldType.minuteOfHour(), 6);
+     * TimeOfDay added = tod.withFieldAdded(DurationFieldType.minutes(), 6);
+     * TimeOfDay added = tod.plusMinutes(6);
      * TimeOfDay added = tod.minuteOfHour().addToCopy(6);
-     * TimeOfDay added = tod.property(DateTimeFieldType.minuteOfHour()).addToCopy(6);
      * </pre>
      * 
      * @param fieldType  the field type to add to, not null
@@ -483,8 +483,10 @@ public TimeOfDay withFieldAdded(DurationFieldType fieldType, int amount) {
      * If the addition is zero, then <code>this</code> is returned.
      * Fields in the period that aren't present in the partial are ignored.
      * <p>
-     * To add or subtract on a single field see
-     * {@link #withFieldAdded(DurationFieldType, int)}.
+     * This method is typically used to add multiple copies of complex
+     * period instances. Adding one field is best achieved using methods
+     * like {@link #withFieldAdded(DurationFieldType, int)}
+     * or {@link #plusHours(int)}.
      * 
      * @param period  the period to add to this one, null means zero
      * @param scalar  the amount of times to add, such as -1 to subtract once
@@ -507,17 +509,16 @@ public TimeOfDay withPeriodAdded(ReadablePeriod period, int scalar) {
         return new TimeOfDay(this, newValues);
     }
 
+    //-----------------------------------------------------------------------
     /**
      * Gets a copy of this instance with the specified period added,
      * wrapping to what would be a new day if required.
      * <p>
      * If the amount is zero or null, then <code>this</code> is returned.
      * <p>
-     * The following two lines are identical in effect:
-     * <pre>
-     * TimeOfDay added = tod.minuteOfHour().addToCopy(6);
-     * TimeOfDay added = tod.plus(Period.days(6));
-     * </pre>
+     * This method is typically used to add complex period instances.
+     * Adding one field is best achieved using methods
+     * like {@link #plusHours(int)}.
      * 
      * @param period  the duration to add to this one, null means zero
      * @return a copy of this instance with the period added
@@ -527,27 +528,188 @@ public TimeOfDay plus(ReadablePeriod period) {
         return withPeriodAdded(period, 1);
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Returns a new time plus the specified number of hours.
+     * <p>
+     * This time instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * TimeOfDay added = dt.plusHours(6);
+     * TimeOfDay added = dt.plus(Period.hours(6));
+     * TimeOfDay added = dt.withFieldAdded(DurationFieldType.hours(), 6);
+     * </pre>
+     *
+     * @param hours  the amount of hours to add, may be negative
+     * @return the new time plus the increased hours
+     * @since 1.1
+     */
+    public TimeOfDay plusHours(int hours) {
+        return withFieldAdded(DurationFieldType.hours(), hours);
+    }
+
+    /**
+     * Returns a new time plus the specified number of minutes.
+     * <p>
+     * This time instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * TimeOfDay added = dt.plusMinutes(6);
+     * TimeOfDay added = dt.plus(Period.minutes(6));
+     * TimeOfDay added = dt.withFieldAdded(DurationFieldType.minutes(), 6);
+     * </pre>
+     *
+     * @param minutes  the amount of minutes to add, may be negative
+     * @return the new time plus the increased minutes
+     * @since 1.1
+     */
+    public TimeOfDay plusMinutes(int minutes) {
+        return withFieldAdded(DurationFieldType.minutes(), minutes);
+    }
+
+    /**
+     * Returns a new time plus the specified number of seconds.
+     * <p>
+     * This time instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * TimeOfDay added = dt.plusSeconds(6);
+     * TimeOfDay added = dt.plus(Period.seconds(6));
+     * TimeOfDay added = dt.withFieldAdded(DurationFieldType.seconds(), 6);
+     * </pre>
+     *
+     * @param seconds  the amount of seconds to add, may be negative
+     * @return the new time plus the increased seconds
+     * @since 1.1
+     */
+    public TimeOfDay plusSeconds(int seconds) {
+        return withFieldAdded(DurationFieldType.seconds(), seconds);
+    }
+
+    /**
+     * Returns a new time plus the specified number of millis.
+     * <p>
+     * This time instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * TimeOfDay added = dt.plusMillis(6);
+     * TimeOfDay added = dt.plus(Period.millis(6));
+     * TimeOfDay added = dt.withFieldAdded(DurationFieldType.millis(), 6);
+     * </pre>
+     *
+     * @param millis  the amount of millis to add, may be negative
+     * @return the new time plus the increased millis
+     * @since 1.1
+     */
+    public TimeOfDay plusMillis(int millis) {
+        return withFieldAdded(DurationFieldType.millis(), millis);
+    }
+
+    //-----------------------------------------------------------------------
     /**
      * Gets a copy of this instance with the specified period take away,
      * wrapping to what would be a new day if required.
      * <p>
      * If the amount is zero or null, then <code>this</code> is returned.
      * <p>
-     * The following lines are identical in effect:
-     * <pre>
-     * TimeOfDay added = tod.minuteOfHour().addToCopy(-6);
-     * TimeOfDay added = tod.minus(Period.days(6));
-     * TimeOfDay added = tod.plus(Period.days(-6));
-     * </pre>
+     * This method is typically used to subtract complex period instances.
+     * Subtracting one field is best achieved using methods
+     * like {@link #minusHours(int)}.
      * 
      * @param period  the period to reduce this instant by
      * @return a copy of this instance with the period taken away
-     * @throws ArithmeticException if the new datetime exceeds the capacity of a long
+     * @throws ArithmeticException if the new time exceeds capacity
      */
     public TimeOfDay minus(ReadablePeriod period) {
         return withPeriodAdded(period, -1);
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Returns a new time minus the specified number of hours.
+     * <p>
+     * This time instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * TimeOfDay subtracted = dt.minusHours(6);
+     * TimeOfDay subtracted = dt.minus(Period.hours(6));
+     * TimeOfDay subtracted = dt.withFieldAdded(DurationFieldType.hours(), -6);
+     * </pre>
+     *
+     * @param hours  the amount of hours to subtract, may be negative
+     * @return the new time minus the increased hours
+     * @since 1.1
+     */
+    public TimeOfDay minusHours(int hours) {
+        return withFieldAdded(DurationFieldType.hours(), FieldUtils.safeNegate(hours));
+    }
+
+    /**
+     * Returns a new time minus the specified number of minutes.
+     * <p>
+     * This time instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * TimeOfDay subtracted = dt.minusMinutes(6);
+     * TimeOfDay subtracted = dt.minus(Period.minutes(6));
+     * TimeOfDay subtracted = dt.withFieldAdded(DurationFieldType.minutes(), -6);
+     * </pre>
+     *
+     * @param minutes  the amount of minutes to subtract, may be negative
+     * @return the new time minus the increased minutes
+     * @since 1.1
+     */
+    public TimeOfDay minusMinutes(int minutes) {
+        return withFieldAdded(DurationFieldType.minutes(), FieldUtils.safeNegate(minutes));
+    }
+
+    /**
+     * Returns a new time minus the specified number of seconds.
+     * <p>
+     * This time instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * TimeOfDay subtracted = dt.minusSeconds(6);
+     * TimeOfDay subtracted = dt.minus(Period.seconds(6));
+     * TimeOfDay subtracted = dt.withFieldAdded(DurationFieldType.seconds(), -6);
+     * </pre>
+     *
+     * @param seconds  the amount of seconds to subtract, may be negative
+     * @return the new time minus the increased seconds
+     * @since 1.1
+     */
+    public TimeOfDay minusSeconds(int seconds) {
+        return withFieldAdded(DurationFieldType.seconds(), FieldUtils.safeNegate(seconds));
+    }
+
+    /**
+     * Returns a new time minus the specified number of millis.
+     * <p>
+     * This time instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * TimeOfDay subtracted = dt.minusMillis(6);
+     * TimeOfDay subtracted = dt.minus(Period.millis(6));
+     * TimeOfDay subtracted = dt.withFieldAdded(DurationFieldType.millis(), -6);
+     * </pre>
+     *
+     * @param millis  the amount of millis to subtract, may be negative
+     * @return the new time minus the increased millis
+     * @since 1.1
+     */
+    public TimeOfDay minusMillis(int millis) {
+        return withFieldAdded(DurationFieldType.millis(), FieldUtils.safeNegate(millis));
+    }
+
+    //-----------------------------------------------------------------------
     /**
      * Gets the property object for the specified type, which contains many useful methods.
      *
diff --git a/JodaTime/src/java/org/joda/time/YearMonthDay.java b/JodaTime/src/java/org/joda/time/YearMonthDay.java
index f7160bef0..75374e9ee 100644
--- a/JodaTime/src/java/org/joda/time/YearMonthDay.java
+++ b/JodaTime/src/java/org/joda/time/YearMonthDay.java
@@ -346,9 +346,9 @@ public YearMonthDay withField(DateTimeFieldType fieldType, int value) {
      * <p>
      * These three lines are equivalent:
      * <pre>
-     * YearMonthDay added = ymd.withFieldAdded(DateTimeFieldType.dayOfMonth(), 6);
+     * YearMonthDay added = ymd.withFieldAdded(DurationFieldType.days(), 6);
+     * YearMonthDay added = ymd.plusDays(6);
      * YearMonthDay added = ymd.dayOfMonth().addToCopy(6);
-     * YearMonthDay added = ymd.property(DateTimeFieldType.dayOfMonth()).addToCopy(6);
      * </pre>
      * 
      * @param fieldType  the field type to add to, not null
@@ -373,8 +373,10 @@ public YearMonthDay withFieldAdded(DurationFieldType fieldType, int amount) {
      * If the addition is zero, then <code>this</code> is returned.
      * Fields in the period that aren't present in the partial are ignored.
      * <p>
-     * To add or subtract on a single field see
-     * {@link #withFieldAdded(DurationFieldType, int)}.
+     * This method is typically used to add multiple copies of complex
+     * period instances. Adding one field is best achieved using methods
+     * like {@link #withFieldAdded(DurationFieldType, int)}
+     * or {@link #plusYears(int)}.
      * 
      * @param period  the period to add to this one, null means zero
      * @param scalar  the amount of times to add, such as -1 to subtract once
@@ -397,16 +399,15 @@ public YearMonthDay withPeriodAdded(ReadablePeriod period, int scalar) {
         return new YearMonthDay(this, newValues);
     }
 
+    //-----------------------------------------------------------------------
     /**
      * Gets a copy of this instance with the specified period added.
      * <p>
      * If the amount is zero or null, then <code>this</code> is returned.
      * <p>
-     * The following two lines are identical in effect:
-     * <pre>
-     * YearMonthDay added = ymd.dayOfMonth().addToCopy(6);
-     * YearMonthDay added = ymd.plus(Period.days(6));
-     * </pre>
+     * This method is typically used to add complex period instances.
+     * Adding one field is best achieved using methods
+     * like {@link #plusYears(int)}.
      * 
      * @param period  the duration to add to this one, null means zero
      * @return a copy of this instance with the period added
@@ -416,17 +417,76 @@ public YearMonthDay plus(ReadablePeriod period) {
         return withPeriodAdded(period, 1);
     }
 
+    //-----------------------------------------------------------------------
     /**
-     * Gets a copy of this instance with the specified period take away.
+     * Returns a new date plus the specified number of years.
      * <p>
-     * If the amount is zero or null, then <code>this</code> is returned.
+     * This date instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * YearMonthDay added = dt.plusYears(6);
+     * YearMonthDay added = dt.plus(Period.years(6));
+     * YearMonthDay added = dt.withFieldAdded(DurationFieldType.years(), 6);
+     * </pre>
+     *
+     * @param years  the amount of years to add, may be negative
+     * @return the new date plus the increased years
+     * @since 1.1
+     */
+    public YearMonthDay plusYears(int years) {
+        return withFieldAdded(DurationFieldType.years(), years);
+    }
+
+    /**
+     * Returns a new date plus the specified number of months.
      * <p>
-     * The following lines are identical in effect:
+     * This date instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
      * <pre>
-     * YearMonthDay added = ymd.dayOfMonth().addToCopy(-6);
-     * YearMonthDay added = ymd.minus(Period.days(6));
-     * YearMonthDay added = ymd.plus(Period.days(-6));
+     * YearMonthDay added = dt.plusMonths(6);
+     * YearMonthDay added = dt.plus(Period.months(6));
+     * YearMonthDay added = dt.withFieldAdded(DurationFieldType.months(), 6);
      * </pre>
+     *
+     * @param months  the amount of months to add, may be negative
+     * @return the new date plus the increased months
+     * @since 1.1
+     */
+    public YearMonthDay plusMonths(int months) {
+        return withFieldAdded(DurationFieldType.months(), months);
+    }
+
+    /**
+     * Returns a new date plus the specified number of days.
+     * <p>
+     * This date instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * YearMonthDay added = dt.plusDays(6);
+     * YearMonthDay added = dt.plus(Period.days(6));
+     * YearMonthDay added = dt.withFieldAdded(DurationFieldType.days(), 6);
+     * </pre>
+     *
+     * @param days  the amount of days to add, may be negative
+     * @return the new date plus the increased days
+     * @since 1.1
+     */
+    public YearMonthDay plusDays(int days) {
+        return withFieldAdded(DurationFieldType.days(), days);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets a copy of this instance with the specified period take away.
+     * <p>
+     * If the amount is zero or null, then <code>this</code> is returned.
+     * <p>
+     * This method is typically used to subtract complex period instances.
+     * Subtracting one field is best achieved using methods
+     * like {@link #minusYears(int)}.
      * 
      * @param period  the period to reduce this instant by
      * @return a copy of this instance with the period taken away
@@ -436,6 +496,68 @@ public YearMonthDay minus(ReadablePeriod period) {
         return withPeriodAdded(period, -1);
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Returns a new datetime minus the specified number of years.
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * YearMonthDay subtracted = dt.minusYears(6);
+     * YearMonthDay subtracted = dt.minus(Period.years(6));
+     * YearMonthDay subtracted = dt.withFieldAdded(DurationFieldType.years(), -6);
+     * </pre>
+     *
+     * @param years  the amount of years to subtract, may be negative
+     * @return the new datetime minus the increased years
+     * @since 1.1
+     */
+    public YearMonthDay minusYears(int years) {
+        return withFieldAdded(DurationFieldType.years(), FieldUtils.safeNegate(years));
+    }
+
+    /**
+     * Returns a new datetime minus the specified number of months.
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * YearMonthDay subtracted = dt.minusMonths(6);
+     * YearMonthDay subtracted = dt.minus(Period.months(6));
+     * YearMonthDay subtracted = dt.withFieldAdded(DurationFieldType.months(), -6);
+     * </pre>
+     *
+     * @param months  the amount of months to subtract, may be negative
+     * @return the new datetime minus the increased months
+     * @since 1.1
+     */
+    public YearMonthDay minusMonths(int months) {
+        return withFieldAdded(DurationFieldType.months(), FieldUtils.safeNegate(months));
+    }
+
+    /**
+     * Returns a new datetime minus the specified number of days.
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * YearMonthDay subtracted = dt.minusDays(6);
+     * YearMonthDay subtracted = dt.minus(Period.days(6));
+     * YearMonthDay subtracted = dt.withFieldAdded(DurationFieldType.days(), -6);
+     * </pre>
+     *
+     * @param days  the amount of days to subtract, may be negative
+     * @return the new datetime minus the increased days
+     * @since 1.1
+     */
+    public YearMonthDay minusDays(int days) {
+        return withFieldAdded(DurationFieldType.days(), FieldUtils.safeNegate(days));
+    }
+
+    //-----------------------------------------------------------------------
     /**
      * Gets the property object for the specified type, which contains many useful methods.
      *
diff --git a/JodaTime/src/java/org/joda/time/field/FieldUtils.java b/JodaTime/src/java/org/joda/time/field/FieldUtils.java
index 4b0d0d3b4..4dedd3e73 100644
--- a/JodaTime/src/java/org/joda/time/field/FieldUtils.java
+++ b/JodaTime/src/java/org/joda/time/field/FieldUtils.java
@@ -37,12 +37,27 @@ private FieldUtils() {
     }
     
     //------------------------------------------------------------------------
+    /**
+     * Negates the input throwing an exception if it can't negate it.
+     * 
+     * @param value  the value to negate
+     * @return the negated value
+     * @throws ArithmeticException if the value is Integer.MIN_VALUE
+     */
+    public static int safeNegate(int value) {
+        if (value == Integer.MIN_VALUE) {
+            throw new ArithmeticException("Integer.MIN_VALUE cannoy be negated");
+        }
+        return -value;
+    }
+    
     /**
      * Add two values throwing an exception if overflow occurs.
      * 
      * @param val1  the first value
      * @param val2  the second value
      * @return the new total
+     * @throws ArithmeticException if the value is too big or too small
      */
     public static int safeAdd(int val1, int val2) {
         long total = ((long) val1) + ((long) val2);
@@ -58,6 +73,7 @@ public static int safeAdd(int val1, int val2) {
      * @param val1  the first value
      * @param val2  the second value
      * @return the new total
+     * @throws ArithmeticException if the value is too big or too small
      */
     public static long safeAdd(long val1, long val2) {
         long total = val1 + val2;
@@ -76,6 +92,7 @@ public static long safeAdd(long val1, long val2) {
      * @param val1  the first value, to be taken away from
      * @param val2  the second value, the amount to take away
      * @return the new total
+     * @throws ArithmeticException if the value is too big or too small
      */
     public static long safeSubtract(long val1, long val2) {
         if (val2 == Long.MIN_VALUE) {
@@ -93,6 +110,7 @@ public static long safeSubtract(long val1, long val2) {
      * @param val1  the first value
      * @param val2  the second value
      * @return the new total
+     * @throws ArithmeticException if the value is too big or too small
      */
     public static long safeMultiply(long val1, long val2) {
         if (val1 == 0  || val2 == 0) {
@@ -110,6 +128,7 @@ public static long safeMultiply(long val1, long val2) {
      * 
      * @param value  the value
      * @return the value as an int
+     * @throws ArithmeticException if the value is too big or too small
      */
     public static int safeToInt(long value) {
         if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {
@@ -124,12 +143,14 @@ public static int safeToInt(long value) {
      * @param val1  the first value
      * @param val2  the second value
      * @return the new total
+     * @throws ArithmeticException if the value is too big or too small
      */
     public static int safeMultiplyToInt(long val1, long val2) {
         long val = FieldUtils.safeMultiply(val1, val2);
         return FieldUtils.safeToInt(val);
     }
-    
+
+    //-----------------------------------------------------------------------
     /**
      * Verify that input values are within specified bounds.
      * 

From a942f135836f756b207759eeb96cf9c0e88e8248 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 7 Jun 2005 23:03:01 +0000
Subject: [PATCH 043/124] Add methods to simplify formatting a datetime

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@775 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../org/joda/time/base/AbstractInstant.java   | 15 +++++++++++++
 .../org/joda/time/base/AbstractPartial.java   | 22 ++++++++++++++++---
 2 files changed, 34 insertions(+), 3 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/base/AbstractInstant.java b/JodaTime/src/java/org/joda/time/base/AbstractInstant.java
index 10995ecec..e060dcc9d 100644
--- a/JodaTime/src/java/org/joda/time/base/AbstractInstant.java
+++ b/JodaTime/src/java/org/joda/time/base/AbstractInstant.java
@@ -27,6 +27,7 @@
 import org.joda.time.MutableDateTime;
 import org.joda.time.ReadableInstant;
 import org.joda.time.chrono.ISOChronology;
+import org.joda.time.format.DateTimeFormatter;
 import org.joda.time.format.ISODateTimeFormat;
 
 /**
@@ -420,4 +421,18 @@ public String toString() {
         return ISODateTimeFormat.dateTime().print(this);
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Uses the specified formatter to convert this partial to a String.
+     *
+     * @param formatter  the formatter to use, null means use <code>toString()</code>.
+     * @return the formatted string
+     */
+    public String toString(DateTimeFormatter formatter) {
+        if (formatter == null) {
+            return toString();
+        }
+        return formatter.print(this);
+    }
+
 }
diff --git a/JodaTime/src/java/org/joda/time/base/AbstractPartial.java b/JodaTime/src/java/org/joda/time/base/AbstractPartial.java
index 2cfa6e44c..c3a632825 100644
--- a/JodaTime/src/java/org/joda/time/base/AbstractPartial.java
+++ b/JodaTime/src/java/org/joda/time/base/AbstractPartial.java
@@ -23,6 +23,7 @@
 import org.joda.time.DurationFieldType;
 import org.joda.time.ReadableInstant;
 import org.joda.time.ReadablePartial;
+import org.joda.time.format.DateTimeFormatter;
 
 /**
  * AbstractPartial provides a standard base implementation of most methods
@@ -31,9 +32,10 @@
  * Calculations on are performed using a {@link Chronology}.
  * This chronology is set to be in the UTC time zone for all calculations.
  * <p>
- * The methods on this class uses {@link ReadablePartial#size()},
- * {@link ReadablePartial#getField(int)} and {@link ReadablePartial#getValue(int)}
- * to calculate their results. Subclasses may have a better implementation.
+ * The methods on this class use {@link ReadablePartial#size()},
+ * {@link AbstractPartial#getField(int, Chronology)} and
+ * {@link ReadablePartial#getValue(int)} to calculate their results.
+ * Subclasses may have a better implementation.
  * <p>
  * AbstractPartial allows subclasses may be mutable and not thread-safe.
  *
@@ -282,4 +284,18 @@ public int hashCode() {
         return total;
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Uses the specified formatter to convert this partial to a String.
+     *
+     * @param formatter  the formatter to use, null means use <code>toString()</code>.
+     * @return the formatted string
+     */
+    public String toString(DateTimeFormatter formatter) {
+        if (formatter == null) {
+            return toString();
+        }
+        return formatter.print(this);
+    }
+
 }

From 6872249f5cc1eb2afbd4c161ba29428fbd0b1372 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 7 Jun 2005 23:04:22 +0000
Subject: [PATCH 044/124] Test add methods to simplify common addition and
 subtraction of periods Test add method to simplify formatting a datetime

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@776 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../joda/time/TestDateMidnight_Basics.java    |  90 ++++++++-
 .../org/joda/time/TestDateTime_Basics.java    | 172 +++++++++++++++++-
 .../joda/time/TestMutableDateTime_Basics.java |  10 +-
 .../org/joda/time/TestTimeOfDay_Basics.java   |  93 +++++++++-
 .../joda/time/TestYearMonthDay_Basics.java    |  73 +++++++-
 5 files changed, 432 insertions(+), 6 deletions(-)

diff --git a/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java b/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java
index fb40a0e50..c70de158d 100644
--- a/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java
@@ -34,6 +34,8 @@
 import org.joda.time.chrono.ISOChronology;
 import org.joda.time.field.UnsupportedDateTimeField;
 import org.joda.time.field.UnsupportedDurationField;
+import org.joda.time.format.DateTimeFormat;
+import org.joda.time.format.DateTimeFormatter;
 
 /**
  * This class is a Junit unit test for DateMidnight.
@@ -406,7 +408,7 @@ public void testToString() {
     public void testToString_String() {
         DateMidnight test = new DateMidnight(TEST_TIME_NOW_UTC);
         assertEquals("2002 00", test.toString("yyyy HH"));
-        assertEquals("2002-06-09T00:00:00.000+01:00", test.toString(null));
+        assertEquals("2002-06-09T00:00:00.000+01:00", test.toString((String) null));
     }
 
     public void testToString_String_String() {
@@ -418,6 +420,12 @@ public void testToString_String_String() {
         assertEquals("2002-06-09T00:00:00.000+01:00", test.toString(null, null));
     }
 
+    public void testToString_DTFormatter() {
+        DateMidnight test = new DateMidnight(TEST_TIME_NOW_UTC);
+        assertEquals("2002 00", test.toString(DateTimeFormat.forPattern("yyyy HH")));
+        assertEquals("2002-06-09T00:00:00.000+01:00", test.toString((DateTimeFormatter) null));
+    }
+
     //-----------------------------------------------------------------------
     public void testToInstant() {
         DateMidnight test = new DateMidnight(TEST_TIME1_UTC);
@@ -821,6 +829,46 @@ public void testPlus_RP() {
         assertSame(test, result);
     }
 
+    public void testPlusYears_int() {
+        DateMidnight test = new DateMidnight(2002, 5, 3, BuddhistChronology.getInstance());
+        DateMidnight result = test.plusYears(1);
+        DateMidnight expected = new DateMidnight(2003, 5, 3, BuddhistChronology.getInstance());
+        assertEquals(expected, result);
+        
+        result = test.plusYears(0);
+        assertSame(test, result);
+    }
+
+    public void testPlusMonths_int() {
+        DateMidnight test = new DateMidnight(2002, 5, 3, BuddhistChronology.getInstance());
+        DateMidnight result = test.plusMonths(1);
+        DateMidnight expected = new DateMidnight(2002, 6, 3, BuddhistChronology.getInstance());
+        assertEquals(expected, result);
+        
+        result = test.plusMonths(0);
+        assertSame(test, result);
+    }
+
+    public void testPlusWeeks_int() {
+        DateMidnight test = new DateMidnight(2002, 5, 3, BuddhistChronology.getInstance());
+        DateMidnight result = test.plusWeeks(1);
+        DateMidnight expected = new DateMidnight(2002, 5, 10, BuddhistChronology.getInstance());
+        assertEquals(expected, result);
+        
+        result = test.plusWeeks(0);
+        assertSame(test, result);
+    }
+
+    public void testPlusDays_int() {
+        DateMidnight test = new DateMidnight(2002, 5, 3, BuddhistChronology.getInstance());
+        DateMidnight result = test.plusDays(1);
+        DateMidnight expected = new DateMidnight(2002, 5, 4, BuddhistChronology.getInstance());
+        assertEquals(expected, result);
+        
+        result = test.plusDays(0);
+        assertSame(test, result);
+    }
+
     //-----------------------------------------------------------------------    
     public void testMinus_long() {
         DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BuddhistChronology.getInstance());
@@ -849,6 +897,46 @@ public void testMinus_RP() {
         assertSame(test, result);
     }
 
+    public void testMinusYears_int() {
+        DateMidnight test = new DateMidnight(2002, 5, 3, BuddhistChronology.getInstance());
+        DateMidnight result = test.minusYears(1);
+        DateMidnight expected = new DateMidnight(2001, 5, 3, BuddhistChronology.getInstance());
+        assertEquals(expected, result);
+        
+        result = test.minusYears(0);
+        assertSame(test, result);
+    }
+
+    public void testMinusMonths_int() {
+        DateMidnight test = new DateMidnight(2002, 5, 3, BuddhistChronology.getInstance());
+        DateMidnight result = test.minusMonths(1);
+        DateMidnight expected = new DateMidnight(2002, 4, 3, BuddhistChronology.getInstance());
+        assertEquals(expected, result);
+        
+        result = test.minusMonths(0);
+        assertSame(test, result);
+    }
+
+    public void testMinusWeeks_int() {
+        DateMidnight test = new DateMidnight(2002, 5, 3, BuddhistChronology.getInstance());
+        DateMidnight result = test.minusWeeks(1);
+        DateMidnight expected = new DateMidnight(2002, 4, 26, BuddhistChronology.getInstance());
+        assertEquals(expected, result);
+        
+        result = test.minusWeeks(0);
+        assertSame(test, result);
+    }
+
+    public void testMinusDays_int() {
+        DateMidnight test = new DateMidnight(2002, 5, 3, BuddhistChronology.getInstance());
+        DateMidnight result = test.minusDays(1);
+        DateMidnight expected = new DateMidnight(2002, 5, 2, BuddhistChronology.getInstance());
+        assertEquals(expected, result);
+        
+        result = test.minusDays(0);
+        assertSame(test, result);
+    }
+
     //-----------------------------------------------------------------------
     public void testProperty() {
         DateMidnight test = new DateMidnight();
diff --git a/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java b/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java
index 500d89f7e..8f19c8267 100644
--- a/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java
@@ -35,6 +35,8 @@
 import org.joda.time.chrono.ISOChronology;
 import org.joda.time.field.UnsupportedDateTimeField;
 import org.joda.time.field.UnsupportedDurationField;
+import org.joda.time.format.DateTimeFormat;
+import org.joda.time.format.DateTimeFormatter;
 
 /**
  * This class is a Junit unit test for DateTime.
@@ -461,7 +463,7 @@ public void testToString() {
     public void testToString_String() {
         DateTime test = new DateTime(TEST_TIME_NOW);
         assertEquals("2002 01", test.toString("yyyy HH"));
-        assertEquals("2002-06-09T01:00:00.000+01:00", test.toString(null));
+        assertEquals("2002-06-09T01:00:00.000+01:00", test.toString((String) null));
     }
 
     public void testToString_String_Locale() {
@@ -473,6 +475,12 @@ public void testToString_String_Locale() {
         assertEquals("2002-06-09T01:00:00.000+01:00", test.toString(null, null));
     }
 
+    public void testToString_DTFormatter() {
+        DateMidnight test = new DateMidnight(TEST_TIME_NOW);
+        assertEquals("2002 00", test.toString(DateTimeFormat.forPattern("yyyy HH")));
+        assertEquals("2002-06-09T00:00:00.000+01:00", test.toString((DateTimeFormatter) null));
+    }
+
     //-----------------------------------------------------------------------
     public void testToInstant() {
         DateTime test = new DateTime(TEST_TIME1);
@@ -924,7 +932,87 @@ public void testPlus_RP() {
         result = test.plus((ReadablePeriod) null);
         assertSame(test, result);
     }
-    
+
+    public void testPlusYears_int() {
+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());
+        DateTime result = test.plusYears(1);
+        DateTime expected = new DateTime(2003, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());
+        assertEquals(expected, result);
+        
+        result = test.plusYears(0);
+        assertSame(test, result);
+    }
+
+    public void testPlusMonths_int() {
+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());
+        DateTime result = test.plusMonths(1);
+        DateTime expected = new DateTime(2002, 6, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());
+        assertEquals(expected, result);
+        
+        result = test.plusMonths(0);
+        assertSame(test, result);
+    }
+
+    public void testPlusWeeks_int() {
+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());
+        DateTime result = test.plusWeeks(1);
+        DateTime expected = new DateTime(2002, 5, 10, 1, 2, 3, 4, BuddhistChronology.getInstance());
+        assertEquals(expected, result);
+        
+        result = test.plusWeeks(0);
+        assertSame(test, result);
+    }
+
+    public void testPlusDays_int() {
+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());
+        DateTime result = test.plusDays(1);
+        DateTime expected = new DateTime(2002, 5, 4, 1, 2, 3, 4, BuddhistChronology.getInstance());
+        assertEquals(expected, result);
+        
+        result = test.plusDays(0);
+        assertSame(test, result);
+    }
+
+    public void testPlusHours_int() {
+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());
+        DateTime result = test.plusHours(1);
+        DateTime expected = new DateTime(2002, 5, 3, 2, 2, 3, 4, BuddhistChronology.getInstance());
+        assertEquals(expected, result);
+        
+        result = test.plusHours(0);
+        assertSame(test, result);
+    }
+
+    public void testPlusMinutes_int() {
+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());
+        DateTime result = test.plusMinutes(1);
+        DateTime expected = new DateTime(2002, 5, 3, 1, 3, 3, 4, BuddhistChronology.getInstance());
+        assertEquals(expected, result);
+        
+        result = test.plusMinutes(0);
+        assertSame(test, result);
+    }
+
+    public void testPlusSeconds_int() {
+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());
+        DateTime result = test.plusSeconds(1);
+        DateTime expected = new DateTime(2002, 5, 3, 1, 2, 4, 4, BuddhistChronology.getInstance());
+        assertEquals(expected, result);
+        
+        result = test.plusSeconds(0);
+        assertSame(test, result);
+    }
+
+    public void testPlusMillis_int() {
+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());
+        DateTime result = test.plusMillis(1);
+        DateTime expected = new DateTime(2002, 5, 3, 1, 2, 3, 5, BuddhistChronology.getInstance());
+        assertEquals(expected, result);
+        
+        result = test.plusMillis(0);
+        assertSame(test, result);
+    }
+
     //-----------------------------------------------------------------------    
     public void testMinus_long() {
         DateTime test = new DateTime(TEST_TIME1, BuddhistChronology.getInstance());
@@ -953,6 +1041,86 @@ public void testMinus_RP() {
         assertSame(test, result);
     }
 
+    public void testMinusYears_int() {
+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());
+        DateTime result = test.minusYears(1);
+        DateTime expected = new DateTime(2001, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());
+        assertEquals(expected, result);
+        
+        result = test.minusYears(0);
+        assertSame(test, result);
+    }
+
+    public void testMinusMonths_int() {
+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());
+        DateTime result = test.minusMonths(1);
+        DateTime expected = new DateTime(2002, 4, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());
+        assertEquals(expected, result);
+        
+        result = test.minusMonths(0);
+        assertSame(test, result);
+    }
+
+    public void testMinusWeeks_int() {
+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());
+        DateTime result = test.minusWeeks(1);
+        DateTime expected = new DateTime(2002, 4, 26, 1, 2, 3, 4, BuddhistChronology.getInstance());
+        assertEquals(expected, result);
+        
+        result = test.minusWeeks(0);
+        assertSame(test, result);
+    }
+
+    public void testMinusDays_int() {
+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());
+        DateTime result = test.minusDays(1);
+        DateTime expected = new DateTime(2002, 5, 2, 1, 2, 3, 4, BuddhistChronology.getInstance());
+        assertEquals(expected, result);
+        
+        result = test.minusDays(0);
+        assertSame(test, result);
+    }
+
+    public void testMinusHours_int() {
+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());
+        DateTime result = test.minusHours(1);
+        DateTime expected = new DateTime(2002, 5, 3, 0, 2, 3, 4, BuddhistChronology.getInstance());
+        assertEquals(expected, result);
+        
+        result = test.minusHours(0);
+        assertSame(test, result);
+    }
+
+    public void testMinusMinutes_int() {
+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());
+        DateTime result = test.minusMinutes(1);
+        DateTime expected = new DateTime(2002, 5, 3, 1, 1, 3, 4, BuddhistChronology.getInstance());
+        assertEquals(expected, result);
+        
+        result = test.minusMinutes(0);
+        assertSame(test, result);
+    }
+
+    public void testMinusSeconds_int() {
+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());
+        DateTime result = test.minusSeconds(1);
+        DateTime expected = new DateTime(2002, 5, 3, 1, 2, 2, 4, BuddhistChronology.getInstance());
+        assertEquals(expected, result);
+        
+        result = test.minusSeconds(0);
+        assertSame(test, result);
+    }
+
+    public void testMinusMillis_int() {
+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());
+        DateTime result = test.minusMillis(1);
+        DateTime expected = new DateTime(2002, 5, 3, 1, 2, 3, 3, BuddhistChronology.getInstance());
+        assertEquals(expected, result);
+        
+        result = test.minusMillis(0);
+        assertSame(test, result);
+    }
+
     //-----------------------------------------------------------------------
     public void testProperty() {
         DateTime test = new DateTime();
diff --git a/JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java b/JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java
index 3b73bb4b5..3a8313869 100644
--- a/JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java
@@ -32,6 +32,8 @@
 import org.joda.time.chrono.BaseChronology;
 import org.joda.time.chrono.GregorianChronology;
 import org.joda.time.chrono.ISOChronology;
+import org.joda.time.format.DateTimeFormat;
+import org.joda.time.format.DateTimeFormatter;
 
 /**
  * This class is a JUnit test for MutableDateTime.
@@ -409,7 +411,7 @@ public void testToString() {
     public void testToString_String() {
         MutableDateTime test = new MutableDateTime(TEST_TIME_NOW);
         assertEquals("2002 01", test.toString("yyyy HH"));
-        assertEquals("2002-06-09T01:00:00.000+01:00", test.toString(null));
+        assertEquals("2002-06-09T01:00:00.000+01:00", test.toString((String) null));
     }
 
     public void testToString_String_String() {
@@ -421,6 +423,12 @@ public void testToString_String_String() {
         assertEquals("2002-06-09T01:00:00.000+01:00", test.toString(null, null));
     }
 
+    public void testToString_DTFormatter() {
+        DateMidnight test = new DateMidnight(TEST_TIME_NOW);
+        assertEquals("2002 00", test.toString(DateTimeFormat.forPattern("yyyy HH")));
+        assertEquals("2002-06-09T00:00:00.000+01:00", test.toString((DateTimeFormatter) null));
+    }
+
     //-----------------------------------------------------------------------
     public void testToInstant() {
         MutableDateTime test = new MutableDateTime(TEST_TIME1);
diff --git a/JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java b/JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java
index f74eb9a2e..433c65384 100644
--- a/JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java
@@ -28,6 +28,8 @@
 
 import org.joda.time.chrono.BuddhistChronology;
 import org.joda.time.chrono.GregorianChronology;
+import org.joda.time.format.DateTimeFormat;
+import org.joda.time.format.DateTimeFormatter;
 
 /**
  * This class is a Junit unit test for TimeOfDay.
@@ -484,6 +486,7 @@ public void testWithFieldAdded8() {
         assertEquals(new TimeOfDay(23, 0, 0, 0), result);
     }
 
+    //-----------------------------------------------------------------------
     public void testPlus_RP() {
         TimeOfDay test = new TimeOfDay(10, 20, 30, 40, BuddhistChronology.getInstance());
         TimeOfDay result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8));
@@ -494,6 +497,47 @@ public void testPlus_RP() {
         assertSame(test, result);
     }
 
+    public void testPlusHours_int() {
+        TimeOfDay test = new TimeOfDay(1, 2, 3, 4, BuddhistChronology.getInstance());
+        TimeOfDay result = test.plusHours(1);
+        TimeOfDay expected = new TimeOfDay(2, 2, 3, 4, BuddhistChronology.getInstance());
+        assertEquals(expected, result);
+        
+        result = test.plusHours(0);
+        assertSame(test, result);
+    }
+
+    public void testPlusMinutes_int() {
+        TimeOfDay test = new TimeOfDay(1, 2, 3, 4, BuddhistChronology.getInstance());
+        TimeOfDay result = test.plusMinutes(1);
+        TimeOfDay expected = new TimeOfDay(1, 3, 3, 4, BuddhistChronology.getInstance());
+        assertEquals(expected, result);
+        
+        result = test.plusMinutes(0);
+        assertSame(test, result);
+    }
+
+    public void testPlusSeconds_int() {
+        TimeOfDay test = new TimeOfDay(1, 2, 3, 4, BuddhistChronology.getInstance());
+        TimeOfDay result = test.plusSeconds(1);
+        TimeOfDay expected = new TimeOfDay(1, 2, 4, 4, BuddhistChronology.getInstance());
+        assertEquals(expected, result);
+        
+        result = test.plusSeconds(0);
+        assertSame(test, result);
+    }
+
+    public void testPlusMillis_int() {
+        TimeOfDay test = new TimeOfDay(1, 2, 3, 4, BuddhistChronology.getInstance());
+        TimeOfDay result = test.plusMillis(1);
+        TimeOfDay expected = new TimeOfDay(1, 2, 3, 5, BuddhistChronology.getInstance());
+        assertEquals(expected, result);
+        
+        result = test.plusMillis(0);
+        assertSame(test, result);
+    }
+
+    //-----------------------------------------------------------------------
     public void testMinus_RP() {
         TimeOfDay test = new TimeOfDay(10, 20, 30, 40, BuddhistChronology.getInstance());
         TimeOfDay result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1));
@@ -504,6 +548,46 @@ public void testMinus_RP() {
         assertSame(test, result);
     }
 
+    public void testMinusHours_int() {
+        TimeOfDay test = new TimeOfDay(1, 2, 3, 4, BuddhistChronology.getInstance());
+        TimeOfDay result = test.minusHours(1);
+        TimeOfDay expected = new TimeOfDay(0, 2, 3, 4, BuddhistChronology.getInstance());
+        assertEquals(expected, result);
+        
+        result = test.minusHours(0);
+        assertSame(test, result);
+    }
+
+    public void testMinusMinutes_int() {
+        TimeOfDay test = new TimeOfDay(1, 2, 3, 4, BuddhistChronology.getInstance());
+        TimeOfDay result = test.minusMinutes(1);
+        TimeOfDay expected = new TimeOfDay(1, 1, 3, 4, BuddhistChronology.getInstance());
+        assertEquals(expected, result);
+        
+        result = test.minusMinutes(0);
+        assertSame(test, result);
+    }
+
+    public void testMinusSeconds_int() {
+        TimeOfDay test = new TimeOfDay(1, 2, 3, 4, BuddhistChronology.getInstance());
+        TimeOfDay result = test.minusSeconds(1);
+        TimeOfDay expected = new TimeOfDay(1, 2, 2, 4, BuddhistChronology.getInstance());
+        assertEquals(expected, result);
+        
+        result = test.minusSeconds(0);
+        assertSame(test, result);
+    }
+
+    public void testMinusMillis_int() {
+        TimeOfDay test = new TimeOfDay(1, 2, 3, 4, BuddhistChronology.getInstance());
+        TimeOfDay result = test.minusMillis(1);
+        TimeOfDay expected = new TimeOfDay(1, 2, 3, 3, BuddhistChronology.getInstance());
+        assertEquals(expected, result);
+        
+        result = test.minusMillis(0);
+        assertSame(test, result);
+    }
+
     //-----------------------------------------------------------------------
     public void testToDateTimeToday() {
         TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); // PARIS irrelevant
@@ -772,7 +856,7 @@ public void testToString() {
     public void testToString_String() {
         TimeOfDay test = new TimeOfDay(10, 20, 30, 40);
         assertEquals("\ufffd\ufffd\ufffd\ufffd 10", test.toString("yyyy HH"));
-        assertEquals("T10:20:30.040", test.toString(null));
+        assertEquals("T10:20:30.040", test.toString((String) null));
     }
 
     //-----------------------------------------------------------------------
@@ -784,6 +868,13 @@ public void testToString_String_Locale() {
         assertEquals("T10:20:30.040", test.toString(null, null));
     }
 
+    //-----------------------------------------------------------------------
+    public void testToString_DTFormatter() {
+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);
+        assertEquals("\ufffd\ufffd\ufffd\ufffd 10", test.toString(DateTimeFormat.forPattern("yyyy HH")));
+        assertEquals("T10:20:30.040", test.toString((DateTimeFormatter) null));
+    }
+
     //-----------------------------------------------------------------------
     private void check(TimeOfDay test, int hour, int min, int sec, int milli) {
         assertEquals(hour, test.getHourOfDay());
diff --git a/JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java b/JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java
index a53bf59f0..212a5c58b 100644
--- a/JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java
@@ -28,6 +28,8 @@
 
 import org.joda.time.chrono.BuddhistChronology;
 import org.joda.time.chrono.GregorianChronology;
+import org.joda.time.format.DateTimeFormat;
+import org.joda.time.format.DateTimeFormatter;
 
 /**
  * This class is a Junit unit test for YearMonthDay.
@@ -426,6 +428,7 @@ public void testWithFieldAdded5() {
         } catch (IllegalArgumentException ex) {}
     }
 
+    //-----------------------------------------------------------------------
     public void testPlus_RP() {
         YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance());
         YearMonthDay result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8));
@@ -436,6 +439,37 @@ public void testPlus_RP() {
         assertSame(test, result);
     }
 
+    public void testPlusYears_int() {
+        YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance());
+        YearMonthDay result = test.plusYears(1);
+        YearMonthDay expected = new YearMonthDay(2003, 5, 3, BuddhistChronology.getInstance());
+        assertEquals(expected, result);
+        
+        result = test.plusYears(0);
+        assertSame(test, result);
+    }
+
+    public void testPlusMonths_int() {
+        YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance());
+        YearMonthDay result = test.plusMonths(1);
+        YearMonthDay expected = new YearMonthDay(2002, 6, 3, BuddhistChronology.getInstance());
+        assertEquals(expected, result);
+        
+        result = test.plusMonths(0);
+        assertSame(test, result);
+    }
+
+    public void testPlusDays_int() {
+        YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance());
+        YearMonthDay result = test.plusDays(1);
+        YearMonthDay expected = new YearMonthDay(2002, 5, 4, BuddhistChronology.getInstance());
+        assertEquals(expected, result);
+        
+        result = test.plusDays(0);
+        assertSame(test, result);
+    }
+
+    //-----------------------------------------------------------------------
     public void testMinus_RP() {
         YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance());
         YearMonthDay result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1));
@@ -446,6 +480,36 @@ public void testMinus_RP() {
         assertSame(test, result);
     }
 
+    public void testMinusYears_int() {
+        YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance());
+        YearMonthDay result = test.minusYears(1);
+        YearMonthDay expected = new YearMonthDay(2001, 5, 3, BuddhistChronology.getInstance());
+        assertEquals(expected, result);
+        
+        result = test.minusYears(0);
+        assertSame(test, result);
+    }
+
+    public void testMinusMonths_int() {
+        YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance());
+        YearMonthDay result = test.minusMonths(1);
+        YearMonthDay expected = new YearMonthDay(2002, 4, 3, BuddhistChronology.getInstance());
+        assertEquals(expected, result);
+        
+        result = test.minusMonths(0);
+        assertSame(test, result);
+    }
+
+    public void testMinusDays_int() {
+        YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance());
+        YearMonthDay result = test.minusDays(1);
+        YearMonthDay expected = new YearMonthDay(2002, 5, 2, BuddhistChronology.getInstance());
+        assertEquals(expected, result);
+        
+        result = test.minusDays(0);
+        assertSame(test, result);
+    }
+
     //-----------------------------------------------------------------------
     public void testToDateTimeAtMidnight() {
         YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS);
@@ -703,7 +767,7 @@ public void testToString() {
     public void testToString_String() {
         YearMonthDay test = new YearMonthDay(2002, 6, 9);
         assertEquals("2002 \ufffd\ufffd", test.toString("yyyy HH"));
-        assertEquals("2002-06-09", test.toString(null));
+        assertEquals("2002-06-09", test.toString((String) null));
     }
 
     //-----------------------------------------------------------------------
@@ -716,6 +780,13 @@ public void testToString_String_Locale() {
         assertEquals("2002-06-09", test.toString(null, null));
     }
 
+    //-----------------------------------------------------------------------
+    public void testToString_DTFormatter() {
+        YearMonthDay test = new YearMonthDay(2002, 6, 9);
+        assertEquals("2002 \ufffd\ufffd", test.toString(DateTimeFormat.forPattern("yyyy HH")));
+        assertEquals("2002-06-09", test.toString((DateTimeFormatter) null));
+    }
+
     //-----------------------------------------------------------------------
     private void check(YearMonthDay test, int hour, int min, int sec) {
         assertEquals(hour, test.getYear());

From d1e9ca7f7b27f98dc250a8469177c284e7390f36 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 7 Jun 2005 23:09:57 +0000
Subject: [PATCH 045/124] Add methods to simplify common addition and
 subtraction of periods Add method to simplify formatting a datetime

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@777 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt | 10 +++++++++-
 1 file changed, 9 insertions(+), 1 deletion(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 23dc75409..1ea968d6a 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -44,10 +44,18 @@ Bug fixes since 1.0
 
 Enhancements since 1.0
 ----------------------
+- DateTime/DateMidnight/MutableDateTime/YearMonthDay/TimeOfDay
+  Added convenience plusXxx() and minusXxx() methods to add/subtract a period
+  For example, dt.plus(Period.days(6)) can now be replaced by dt.plusDays(6)
+
+- DateTime/DateMidnight/MutableDateTime/YearMonthDay/TimeOfDay
+  Added convenience toString() method that takes a DateTimeFormatter
+  For example, dt.toString(DateTimeFormat.shortDateTime())
+
 - YearMonthDay/TimeOfDay
   Enabled comparisons using Comparable interface
   Added compareTo/isEqual/isAfter/isBefore methods
-  
+
 - YearMonthDay/TimeOfDay
   Extra time zone constructor
   Allows current date and time to be accurately obtained

From 84617fb61cc9a81b10aa0918740325ae6c0a3765 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Wed, 8 Jun 2005 16:15:21 +0000
Subject: [PATCH 046/124] Added @since tags

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@778 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/DurationField.java        | 2 ++
 JodaTime/src/java/org/joda/time/base/AbstractInstant.java | 1 +
 JodaTime/src/java/org/joda/time/base/AbstractPartial.java | 1 +
 JodaTime/src/java/org/joda/time/field/FieldUtils.java     | 1 +
 4 files changed, 5 insertions(+)

diff --git a/JodaTime/src/java/org/joda/time/DurationField.java b/JodaTime/src/java/org/joda/time/DurationField.java
index dad64260f..314f1920b 100644
--- a/JodaTime/src/java/org/joda/time/DurationField.java
+++ b/JodaTime/src/java/org/joda/time/DurationField.java
@@ -203,6 +203,7 @@
      * @param instant  the milliseconds from 1970-01-01T00:00:00Z to subtract from
      * @param value  the value to subtract, in the units of the field
      * @return the updated milliseconds
+     * @since 1.1
      */
     public long subtract(long instant, int value) {
         if (value == Integer.MIN_VALUE) {
@@ -217,6 +218,7 @@ public long subtract(long instant, int value) {
      * @param instant  the milliseconds from 1970-01-01T00:00:00Z to subtract from
      * @param value  the value to subtract, in the units of the field
      * @return the updated milliseconds
+     * @since 1.1
      */
     public long subtract(long instant, long value) {
         if (value == Long.MIN_VALUE) {
diff --git a/JodaTime/src/java/org/joda/time/base/AbstractInstant.java b/JodaTime/src/java/org/joda/time/base/AbstractInstant.java
index e060dcc9d..80ee37c95 100644
--- a/JodaTime/src/java/org/joda/time/base/AbstractInstant.java
+++ b/JodaTime/src/java/org/joda/time/base/AbstractInstant.java
@@ -427,6 +427,7 @@ public String toString() {
      *
      * @param formatter  the formatter to use, null means use <code>toString()</code>.
      * @return the formatted string
+     * @since 1.1
      */
     public String toString(DateTimeFormatter formatter) {
         if (formatter == null) {
diff --git a/JodaTime/src/java/org/joda/time/base/AbstractPartial.java b/JodaTime/src/java/org/joda/time/base/AbstractPartial.java
index c3a632825..e9d68e50d 100644
--- a/JodaTime/src/java/org/joda/time/base/AbstractPartial.java
+++ b/JodaTime/src/java/org/joda/time/base/AbstractPartial.java
@@ -290,6 +290,7 @@ public int hashCode() {
      *
      * @param formatter  the formatter to use, null means use <code>toString()</code>.
      * @return the formatted string
+     * @since 1.1
      */
     public String toString(DateTimeFormatter formatter) {
         if (formatter == null) {
diff --git a/JodaTime/src/java/org/joda/time/field/FieldUtils.java b/JodaTime/src/java/org/joda/time/field/FieldUtils.java
index 4dedd3e73..67565b68e 100644
--- a/JodaTime/src/java/org/joda/time/field/FieldUtils.java
+++ b/JodaTime/src/java/org/joda/time/field/FieldUtils.java
@@ -43,6 +43,7 @@ private FieldUtils() {
      * @param value  the value to negate
      * @return the negated value
      * @throws ArithmeticException if the value is Integer.MIN_VALUE
+     * @since 1.1
      */
     public static int safeNegate(int value) {
         if (value == Integer.MIN_VALUE) {

From 7b7cb44562d5942add1f093111e84a5836780de4 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 8 Jun 2005 22:57:03 +0000
Subject: [PATCH 047/124] Refactor chronology classes to avoid dupication in
 code

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@779 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../joda/time/chrono/BaseGJChronology.java    | 297 +++++++-----------
 ...java => BasicDayOfMonthDateTimeField.java} |  23 +-
 ...Field.java => BasicYearDateTimeField.java} |  63 ++--
 .../joda/time/chrono/CommonGJChronology.java  | 211 +++++++++++++
 .../joda/time/chrono/CopticChronology.java    |  96 +++++-
 .../chrono/CopticDayOfMonthDateTimeField.java | 111 -------
 .../joda/time/chrono/GJYearDateTimeField.java | 198 ------------
 .../joda/time/chrono/GregorianChronology.java |   2 +-
 .../joda/time/chrono/JulianChronology.java    |   2 +-
 9 files changed, 442 insertions(+), 561 deletions(-)
 rename JodaTime/src/java/org/joda/time/chrono/{GJDayOfMonthDateTimeField.java => BasicDayOfMonthDateTimeField.java} (81%)
 rename JodaTime/src/java/org/joda/time/chrono/{CopticYearDateTimeField.java => BasicYearDateTimeField.java} (70%)
 create mode 100644 JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java
 delete mode 100644 JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java
 delete mode 100644 JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java

diff --git a/JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java b/JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java
index ff8ce122c..3a0bb54f8 100644
--- a/JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java
@@ -53,21 +53,6 @@
 
     static final long MILLIS_1970_TO_2000 = 946684800000L;
 
-    // These arrays are NOT public. We trust ourselves not to alter the array.
-    // They use zero-based array indexes so the that valid range of months is
-    // automatically checked.
-
-    private static final int[] MIN_DAYS_PER_MONTH_ARRAY = {
-        31,28,31,30,31,30,31,31,30,31,30,31
-    };
-
-    private static final int[] MAX_DAYS_PER_MONTH_ARRAY = {
-        31,29,31,30,31,30,31,31,30,31,30,31
-    };
-
-    private static final long[] MIN_TOTAL_MILLIS_BY_MONTH_ARRAY;
-    private static final long[] MAX_TOTAL_MILLIS_BY_MONTH_ARRAY;
-
     private static final DurationField cMillisField;
     private static final DurationField cSecondsField;
     private static final DurationField cMinutesField;
@@ -89,23 +74,6 @@
     private static final DateTimeField cHalfdayOfDayField;
 
     static {
-        MIN_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];
-        MAX_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];
-
-        long minSum = 0;
-        long maxSum = 0;
-        for (int i=0; i<12; i++) {
-            long millis = MIN_DAYS_PER_MONTH_ARRAY[i]
-                * (long)DateTimeConstants.MILLIS_PER_DAY;
-            minSum += millis;
-            MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[i] = minSum;
-
-            millis = MAX_DAYS_PER_MONTH_ARRAY[i]
-                * (long)DateTimeConstants.MILLIS_PER_DAY;
-            maxSum += millis;
-            MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[i] = maxSum;
-        }
-
         cMillisField = MillisDurationField.INSTANCE;
         cSecondsField = new PreciseDurationField
             (DurationFieldType.seconds(), DateTimeConstants.MILLIS_PER_SECOND);
@@ -202,10 +170,9 @@ public DateTimeZone getZone() {
         return DateTimeZone.UTC;
     }
 
-    public final long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
-                                        int millisOfDay)
-        throws IllegalArgumentException
-    {
+    public long getDateTimeMillis(
+            int year, int monthOfYear, int dayOfMonth, int millisOfDay)
+            throws IllegalArgumentException {
         Chronology base;
         if ((base = getBase()) != null) {
             return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);
@@ -216,11 +183,10 @@ public final long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
         return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;
     }
 
-    public final long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
-                                        int hourOfDay, int minuteOfHour,
-                                        int secondOfMinute, int millisOfSecond)
-        throws IllegalArgumentException
-    {
+    public long getDateTimeMillis(
+            int year, int monthOfYear, int dayOfMonth,
+            int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond)
+            throws IllegalArgumentException {
         Chronology base;
         if ((base = getBase()) != null) {
             return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,
@@ -239,7 +205,7 @@ public final long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
             + millisOfSecond;
     }
 
-    public final int getMinimumDaysInFirstWeek() {
+    public int getMinimumDaysInFirstWeek() {
         return iMinDaysInFirstWeek;
     }
 
@@ -298,7 +264,7 @@ protected void assemble(Fields fields) {
         // Now create fields that have unique behavior for Gregorian and Julian
         // chronologies.
 
-        fields.year = new GJYearDateTimeField(this);
+        fields.year = new BasicYearDateTimeField(this);
         fields.yearOfEra = new GJYearOfEraDateTimeField(fields.year, this);
 
         // Define one-based centuryOfEra and yearOfCentury.
@@ -314,7 +280,7 @@ protected void assemble(Fields fields) {
 
         fields.era = new GJEraDateTimeField(this);
         fields.dayOfWeek = new GJDayOfWeekDateTimeField(this, fields.days);
-        fields.dayOfMonth = new GJDayOfMonthDateTimeField(this, fields.days);
+        fields.dayOfMonth = new BasicDayOfMonthDateTimeField(this, fields.days);
         fields.dayOfYear = new GJDayOfYearDateTimeField(this, fields.days);
         fields.monthOfYear = new GJMonthOfYearDateTimeField(this);
         fields.weekyear = new GJWeekyearDateTimeField(this);
@@ -339,46 +305,16 @@ protected void assemble(Fields fields) {
      * @param year The year to use.
      * @return 366 if a leap year, otherwise 365.
      */
-    final int getDaysInYear(int year) {
+    int getDaysInYear(int year) {
         return isLeapYear(year) ? 366 : 365;
     }
 
-    final int getDaysInYearMonth(int year, int month) {
-        if (isLeapYear(year)) {
-            return MAX_DAYS_PER_MONTH_ARRAY[month - 1];
-        } else {
-            return MIN_DAYS_PER_MONTH_ARRAY[month - 1];
-        }
-    }
-
-    /**
-     * Gets the maximum days in the specified month.
-     * 
-     * @param month  the month
-     * @return the max days
-     */
-    final int getDaysInMonthMax(int month) {
-        return MAX_DAYS_PER_MONTH_ARRAY[month - 1];
-    }
-
-    /**
-     * Returns the total number of milliseconds elapsed in the year, by the end
-     * of the month.
-     */
-    final long getTotalMillisByYearMonth(int year, int month) {
-        if (isLeapYear(year)) {
-            return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];
-        } else {
-            return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];
-        }
-    }
-
     /**
      * Get the number of weeks in the year.
      * @param year  the year to use.
      * @return number of weeks in the year.
      */
-    final int getWeeksInYear(int year) {
+    int getWeeksInYear(int year) {
         long firstWeekMillis1 = getFirstWeekOfYearMillis(year);
         long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);
         return (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);
@@ -389,7 +325,7 @@ final int getWeeksInYear(int year) {
      * @param year  the year to use.
      * @return millis
      */
-    final long getFirstWeekOfYearMillis(int year) {
+    long getFirstWeekOfYearMillis(int year) {
         long jan1millis = getYearMillis(year);
         int jan1dayOfWeek = getDayOfWeek(jan1millis);
         
@@ -410,9 +346,8 @@ final long getFirstWeekOfYearMillis(int year) {
      * @param year The year to use.
      * @return millis from 1970-01-01T00:00:00Z
      */
-    final long getYearMillis(int year) {
+    long getYearMillis(int year) {
         return getYearInfo(year).iFirstDayMillis;
-        //return calculateFirstDayOfYearMillis(year);
     }
 
     /**
@@ -422,7 +357,7 @@ final long getYearMillis(int year) {
      * @param month The month to use
      * @return millis from 1970-01-01T00:00:00Z
      */
-    final long getYearMonthMillis(int year, int month) {
+    long getYearMonthMillis(int year, int month) {
         long millis = getYearMillis(year);
         // month
         if (month > 1) {
@@ -439,7 +374,7 @@ final long getYearMonthMillis(int year, int month) {
      * @param dayOfMonth The day of the month to use
      * @return millis from 1970-01-01T00:00:00Z
      */
-    final long getYearMonthDayMillis(int year, int month, int dayOfMonth) {
+    long getYearMonthDayMillis(int year, int month, int dayOfMonth) {
         long millis = getYearMillis(year);
         // month
         if (month > 1) {
@@ -452,7 +387,7 @@ final long getYearMonthDayMillis(int year, int month, int dayOfMonth) {
     /**
      * @param instant millis from 1970-01-01T00:00:00Z
      */
-    final int getYear(long instant) {
+    int getYear(long instant) {
         // Get an initial estimate of the year, and the millis value that
         // represents the start of that year. Then verify estimate and fix if
         // necessary.
@@ -506,7 +441,7 @@ final int getYear(long instant) {
         return year;
     }
 
-    private final int getYearOverflow(long instant) {
+    private int getYearOverflow(long instant) {
         if (instant > 0) {
             int year = getMaxYear();
             long yearStartMillis = getYearMillis(year);
@@ -535,40 +470,10 @@ private final int getYearOverflow(long instant) {
         }
     }
 
-    /**
-     * @param instant millis from 1970-01-01T00:00:00Z
-     */
-    final long setYear(long instant, int year) {
-        int thisYear = getYear(instant);
-        int dayOfYear = getDayOfYear(instant, thisYear);
-        int millisOfDay = getMillisOfDay(instant);
-
-        if (dayOfYear > (31 + 28)) { // after Feb 28
-            if (isLeapYear(thisYear)) {
-                // Current date is Feb 29 or later.
-                if (!isLeapYear(year)) {
-                    // Moving to a non-leap year, Feb 29 does not exist.
-                    dayOfYear--;
-                }
-            } else {
-                // Current date is Mar 01 or later.
-                if (isLeapYear(year)) {
-                    // Moving to a leap year, account for Feb 29.
-                    dayOfYear++;
-                }
-            }
-        }
-
-        instant = getYearMonthDayMillis(year, 1, dayOfYear);
-        instant += millisOfDay;
-
-        return instant;
-    }
-
     /**
      * @param millis from 1970-01-01T00:00:00Z
      */
-    final int getMonthOfYear(long millis) {
+    int getMonthOfYear(long millis) {
         return getMonthOfYear(millis, getYear(millis));
     }
 
@@ -576,42 +481,12 @@ final int getMonthOfYear(long millis) {
      * @param millis from 1970-01-01T00:00:00Z
      * @param year precalculated year of millis
      */
-    final int getMonthOfYear(long millis, int year) {
-        // Perform a binary search to get the month. To make it go even faster,
-        // compare using ints instead of longs. The number of milliseconds per
-        // year exceeds the limit of a 32-bit int's capacity, so divide by
-        // 1024. No precision is lost (except time of day) since the number of
-        // milliseconds per day contains 1024 as a factor. After the division,
-        // the instant isn't measured in milliseconds, but in units of
-        // (128/125)seconds.
-
-        int i = (int)((millis - getYearMillis(year)) >> 10);
-
-        // There are 86400000 milliseconds per day, but divided by 1024 is
-        // 84375. There are 84375 (128/125)seconds per day.
-
-        return
-            (isLeapYear(year))
-            ? ((i < 182 * 84375)
-               ? ((i < 91 * 84375)
-                  ? ((i < 31 * 84375) ? 1 : (i < 60 * 84375) ? 2 : 3)
-                  : ((i < 121 * 84375) ? 4 : (i < 152 * 84375) ? 5 : 6))
-               : ((i < 274 * 84375)
-                  ? ((i < 213 * 84375) ? 7 : (i < 244 * 84375) ? 8 : 9)
-                  : ((i < 305 * 84375) ? 10 : (i < 335 * 84375) ? 11 : 12)))
-            : ((i < 181 * 84375)
-               ? ((i < 90 * 84375)
-                  ? ((i < 31 * 84375) ? 1 : (i < 59 * 84375) ? 2 : 3)
-                  : ((i < 120 * 84375) ? 4 : (i < 151 * 84375) ? 5 : 6))
-               : ((i < 273 * 84375)
-                  ? ((i < 212 * 84375) ? 7 : (i < 243 * 84375) ? 8 : 9)
-                  : ((i < 304 * 84375) ? 10 : (i < 334 * 84375) ? 11 : 12)));
-    }
+    abstract int getMonthOfYear(long millis, int year);
 
     /**
      * @param millis from 1970-01-01T00:00:00Z
      */
-    final int getDayOfMonth(long millis) {
+    int getDayOfMonth(long millis) {
         int year = getYear(millis);
         int month = getMonthOfYear(millis, year);
         return getDayOfMonth(millis, year, month);
@@ -621,7 +496,7 @@ final int getDayOfMonth(long millis) {
      * @param millis from 1970-01-01T00:00:00Z
      * @param year precalculated year of millis
      */
-    final int getDayOfMonth(long millis, int year) {
+    int getDayOfMonth(long millis, int year) {
         int month = getMonthOfYear(millis, year);
         return getDayOfMonth(millis, year, month);
     }
@@ -631,7 +506,7 @@ final int getDayOfMonth(long millis, int year) {
      * @param year precalculated year of millis
      * @param month precalculated month of millis
      */
-    final int getDayOfMonth(long millis, int year, int month) {
+    int getDayOfMonth(long millis, int year, int month) {
         long dateMillis = getYearMillis(year);
         if (month > 1) {
             dateMillis += getTotalMillisByYearMonth(year, month - 1);
@@ -642,7 +517,7 @@ final int getDayOfMonth(long millis, int year, int month) {
     /**
      * @param instant millis from 1970-01-01T00:00:00Z
      */
-    final int getDayOfYear(long instant) {
+    int getDayOfYear(long instant) {
         return getDayOfYear(instant, getYear(instant));
     }
 
@@ -650,7 +525,7 @@ final int getDayOfYear(long instant) {
      * @param instant millis from 1970-01-01T00:00:00Z
      * @param year precalculated year of millis
      */
-    final int getDayOfYear(long instant, int year) {
+    int getDayOfYear(long instant, int year) {
         long yearStart = getYearMillis(year);
         return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;
     }
@@ -658,7 +533,7 @@ final int getDayOfYear(long instant, int year) {
     /**
      * @param instant millis from 1970-01-01T00:00:00Z
      */
-    final int getWeekyear(long instant) {
+    int getWeekyear(long instant) {
         int year = getYear(instant);
         int week = getWeekOfWeekyear(instant, year);
         if (week == 1) {
@@ -673,7 +548,7 @@ final int getWeekyear(long instant) {
     /**
      * @param instant millis from 1970-01-01T00:00:00Z
      */
-    final int getWeekOfWeekyear(long instant) {
+    int getWeekOfWeekyear(long instant) {
         return getWeekOfWeekyear(instant, getYear(instant));
     }
 
@@ -681,7 +556,7 @@ final int getWeekOfWeekyear(long instant) {
      * @param instant millis from 1970-01-01T00:00:00Z
      * @param year precalculated year of millis
      */
-    final int getWeekOfWeekyear(long instant, int year) {
+    int getWeekOfWeekyear(long instant, int year) {
         long firstWeekMillis1 = getFirstWeekOfYearMillis(year);
         if (instant < firstWeekMillis1) {
             return getWeeksInYear(year - 1);
@@ -696,7 +571,7 @@ final int getWeekOfWeekyear(long instant, int year) {
     /**
      * @param instant millis from 1970-01-01T00:00:00Z
      */
-    final int getDayOfWeek(long instant) {
+    int getDayOfWeek(long instant) {
         // 1970-01-01 is day of week 4, Thursday.
 
         long daysSince19700101;
@@ -716,7 +591,7 @@ final int getDayOfWeek(long instant) {
     /**
      * @param instant millis from 1970-01-01T00:00:00Z
      */
-    final int getMillisOfDay(long instant) {
+    int getMillisOfDay(long instant) {
         if (instant >= 0) {
             return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);
         } else {
@@ -725,34 +600,94 @@ final int getMillisOfDay(long instant) {
         }
     }
 
-    long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth)
-        throws IllegalArgumentException
-    {
-        FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());
-        FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, 12);
+    /**
+     * Gets the maximum number of days in any month.
+     * 
+     * @return 31
+     */
+    int getDaysInMonthMax() {
+        return 31;
+    }
+
+    /**
+     * Gets the maximum number of days in the month specified by the instant.
+     * 
+     * @param instant  millis from 1970-01-01T00:00:00Z
+     * @return the maximum number of days in the month
+     */
+    int getDaysInMonthMax(long instant) {
+        int thisYear = getYear(instant);
+        int thisMonth = getMonthOfYear(instant, thisYear);
+        return getDaysInYearMonth(thisYear, thisMonth);
+    }
 
-        boolean isLeap = isLeapYear(year);
+    /**
+     * Gets the maximum number of days in the month specified by the instant.
+     * The value represents what the user is trying to set, and can be
+     * used to optimise this method.
+     * 
+     * @param instant  millis from 1970-01-01T00:00:00Z
+     * @param value  the value being set
+     * @return the maximum number of days in the month
+     */
+    int getDaysInMonthMaxForSet(long instant, int value) {
+        return getDaysInMonthMax(instant);
+    }
 
-        FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1,
-                                     (isLeap ? MAX_DAYS_PER_MONTH_ARRAY : MIN_DAYS_PER_MONTH_ARRAY)
-                                     [monthOfYear - 1]);
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the milliseconds for a date at midnight.
+     * 
+     * @param year  the year
+     * @param monthOfYear  the month
+     * @param dayOfMonth  the day
+     * @return the milliseconds
+     */
+    abstract long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth);
 
-        long instant = getYearMillis(year);
+    /**
+     * Gets the difference between the two instants in years.
+     * 
+     * @param minuendInstant  the first instant
+     * @param subtrahendInstant  the second instant
+     * @return the difference
+     */
+    abstract long getYearDifference(long minuendInstant, long subtrahendInstant);
 
-        if (monthOfYear > 1) {
-            instant += 
-                (isLeap ? MAX_TOTAL_MILLIS_BY_MONTH_ARRAY : MIN_TOTAL_MILLIS_BY_MONTH_ARRAY)
-                [monthOfYear - 2];
-        }
+    /**
+     * Is the specified year a leap year?
+     * 
+     * @param year  the year to test
+     * @return true if leap
+     */
+    abstract boolean isLeapYear(int year);
 
-        if (dayOfMonth != 1) {
-            instant += (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;
-        }
+    /**
+     * Gets the number of days in the specified month and year.
+     * 
+     * @param year  the year
+     * @param month  the month
+     * @return the number of days
+     */
+    abstract int getDaysInYearMonth(int year, int month);
 
-        return instant;
-    }
+    /**
+     * Gets the maximum days in the specified month.
+     * 
+     * @param month  the month
+     * @return the max days
+     */
+    abstract int getDaysInMonthMax(int month);
 
-    abstract boolean isLeapYear(int year);
+    /**
+     * Gets the total number of millis elapsed in this year at the end
+     * of the specified month.
+     * 
+     * @param year  the year
+     * @param month  the month
+     * @return the elapsed millis
+     */
+    abstract long getTotalMillisByYearMonth(int year, int month);
 
     abstract long calculateFirstDayOfYearMillis(int year);
 
@@ -775,6 +710,16 @@ long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth)
      */
     abstract long getApproxMillisAtEpoch();
 
+    /**
+     * Sets the year from an instant and year.
+     * 
+     * @param instant  millis from 1970-01-01T00:00:00Z
+     * @param year  the year to set
+     * @return the updated millis
+     */
+    abstract long setYear(long instant, int year);
+
+    //-----------------------------------------------------------------------
     // Although accessed by multiple threads, this method doesn't need to be synchronized.
     private YearInfo getYearInfo(int year) {
         YearInfo[] cache = iYearInfoCache;
diff --git a/JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java b/JodaTime/src/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java
similarity index 81%
rename from JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java
rename to JodaTime/src/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java
index 2b4791b19..85e9100fa 100644
--- a/JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java
+++ b/JodaTime/src/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java
@@ -28,7 +28,7 @@
  * @author Brian S O'Neill
  * @since 1.0
  */
-final class GJDayOfMonthDateTimeField extends PreciseDurationDateTimeField {
+final class BasicDayOfMonthDateTimeField extends PreciseDurationDateTimeField {
 
     private static final long serialVersionUID = -4677223814028011723L;
 
@@ -37,17 +37,12 @@
     /**
      * Restricted constructor.
      */
-    GJDayOfMonthDateTimeField(BaseGJChronology chronology, DurationField days) {
+    BasicDayOfMonthDateTimeField(BaseGJChronology chronology, DurationField days) {
         super(DateTimeFieldType.dayOfMonth(), days);
         iChronology = chronology;
     }
 
-    /**
-     * Get the day of the month component of the specified time instant.
-     * 
-     * @param instant  the time instant in millis to query.
-     * @return the day of the month extracted from the input.
-     */
+    //-----------------------------------------------------------------------
     public int get(long instant) {
         return iChronology.getDayOfMonth(instant);
     }
@@ -61,13 +56,11 @@ public int getMinimumValue() {
     }
 
     public int getMaximumValue() {
-        return 31;
+        return iChronology.getDaysInMonthMax();
     }
 
     public int getMaximumValue(long instant) {
-        int thisYear = iChronology.getYear(instant);
-        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);
-        return iChronology.getDaysInYearMonth(thisYear, thisMonth);
+        return iChronology.getDaysInMonthMax(instant);
     }
 
     public int getMaximumValue(ReadablePartial partial) {
@@ -79,7 +72,7 @@ public int getMaximumValue(ReadablePartial partial) {
             }
             return iChronology.getDaysInMonthMax(month);
         }
-        return 31;
+        return getMaximumValue();
     }
 
     public int getMaximumValue(ReadablePartial partial, int[] values) {
@@ -96,11 +89,11 @@ public int getMaximumValue(ReadablePartial partial, int[] values) {
                 return iChronology.getDaysInMonthMax(month);
             }
         }
-        return 31;
+        return getMaximumValue();
     }
 
     protected int getMaximumValueForSet(long instant, int value) {
-        return value > 28 ? getMaximumValue(instant) : 28;
+        return iChronology.getDaysInMonthMaxForSet(instant, value);
     }
 
     /**
diff --git a/JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java b/JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java
similarity index 70%
rename from JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java
rename to JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java
index 8569d9e1e..496c48298 100644
--- a/JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java
+++ b/JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java
@@ -21,20 +21,27 @@
 import org.joda.time.field.ImpreciseDateTimeField;
 
 /**
+ * A year field suitable for many calendars.
  *
+ * @author Guy Allard
+ * @author Stephen Colebourne
  * @author Brian S O'Neill
  * @since 1.0
  */
-final class CopticYearDateTimeField extends ImpreciseDateTimeField {
+class BasicYearDateTimeField extends ImpreciseDateTimeField {
 
-    private static final long serialVersionUID = 8990199361773280783L;
+    /** Serialization version. */
+    private static final long serialVersionUID = -98628754872287L;
 
-    private final BaseGJChronology iChronology;
+    /** The underlying basic chronology. */
+    protected final BaseGJChronology iChronology;
 
     /**
-     * Restricted constructor
+     * Restricted constructor.
+     * 
+     * @param chronology  the chronology this field belogs to
      */
-    CopticYearDateTimeField(BaseGJChronology chronology) {
+    BasicYearDateTimeField(BaseGJChronology chronology) {
         super(DateTimeFieldType.year(), chronology.getAverageMillisPerYear());
         iChronology = chronology;
     }
@@ -51,7 +58,9 @@ public long add(long instant, int years) {
         if (years == 0) {
             return instant;
         }
-        return set(instant, get(instant) + years);
+        int thisYear = get(instant);
+        int newYear = FieldUtils.safeAdd(thisYear, years);
+        return set(instant, newYear);
     }
 
     public long add(long instant, long years) {
@@ -69,47 +78,17 @@ public long addWrapField(long instant, int years) {
         return set(instant, wrappedYear);
     }
 
-    public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {
-        if (minuendInstant < subtrahendInstant) {
-            return -getDifference(subtrahendInstant, minuendInstant);
-        }
-
-        int minuendYear = get(minuendInstant);
-        int subtrahendYear = get(subtrahendInstant);
-
-        // Inlined remainder method to avoid duplicate calls to get.
-        long minuendRem = minuendInstant - iChronology.getYearMillis(minuendYear);
-        long subtrahendRem = subtrahendInstant - iChronology.getYearMillis(subtrahendYear);
-
-        int difference = minuendYear - subtrahendYear;
-        if (minuendRem < subtrahendRem) {
-            difference--;
-        }
-        return difference;
-    }
-
     public long set(long instant, int year) {
         FieldUtils.verifyValueBounds
             (this, year, iChronology.getMinYear(), iChronology.getMaxYear());
+        return iChronology.setYear(instant, year);
+    }
 
-		BaseGJChronology chrono = iChronology;
-
-        int thisYear = chrono.getYear(instant);
-        int dayOfYear = chrono.getDayOfYear(instant, thisYear);
-        int millisOfDay = chrono.getMillisOfDay(instant);
-
-        if (dayOfYear > 365) {
-			// Current year is leap, and day is leap.
-			if (!chrono.isLeapYear(year)) {
-				// Moving to a non-leap year, leap day doesn't exist.
-				dayOfYear--;
-			}
+    public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {
+        if (minuendInstant < subtrahendInstant) {
+            return -iChronology.getYearDifference(subtrahendInstant, minuendInstant);
         }
-
-        instant = chrono.getYearMonthDayMillis(year, 1, dayOfYear);
-        instant += millisOfDay;
-
-        return instant;
+        return iChronology.getYearDifference(minuendInstant, subtrahendInstant);
     }
 
     public DurationField getRangeDurationField() {
diff --git a/JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java b/JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java
new file mode 100644
index 000000000..677eaf27c
--- /dev/null
+++ b/JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java
@@ -0,0 +1,211 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.chrono;
+
+import org.joda.time.Chronology;
+import org.joda.time.DateTimeConstants;
+import org.joda.time.DateTimeFieldType;
+import org.joda.time.field.FieldUtils;
+
+/**
+ * Abstract Chronology for implementing chronologies based on Gregorian/Julian formulae.
+ * Most of the utility methods required by subclasses are package-private,
+ * reflecting the intention that they be defined in the same package.
+ * <p>
+ * CommonGJChronology is thread-safe and immutable, and all subclasses must
+ * be as well.
+ *
+ * @author Stephen Colebourne
+ * @author Brian S O'Neill
+ * @author Guy Allard
+ * @since 1.0
+ */
+public abstract class CommonGJChronology extends BaseGJChronology {
+
+    /** Serialization lock */
+    private static final long serialVersionUID = 538276888268L;
+
+    // These arrays are NOT public. We trust ourselves not to alter the array.
+    // They use zero-based array indexes so the that valid range of months is
+    // automatically checked.
+    private static final int[] MIN_DAYS_PER_MONTH_ARRAY = {
+        31,28,31,30,31,30,31,31,30,31,30,31
+    };
+    private static final int[] MAX_DAYS_PER_MONTH_ARRAY = {
+        31,29,31,30,31,30,31,31,30,31,30,31
+    };
+    private static final long[] MIN_TOTAL_MILLIS_BY_MONTH_ARRAY;
+    private static final long[] MAX_TOTAL_MILLIS_BY_MONTH_ARRAY;
+    private static final long FEB_29 = (31L + 29 - 1) * DateTimeConstants.MILLIS_PER_DAY;
+
+    static {
+        MIN_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];
+        MAX_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];
+
+        long minSum = 0;
+        long maxSum = 0;
+        for (int i=0; i<12; i++) {
+            long millis = MIN_DAYS_PER_MONTH_ARRAY[i]
+                * (long)DateTimeConstants.MILLIS_PER_DAY;
+            minSum += millis;
+            MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[i] = minSum;
+
+            millis = MAX_DAYS_PER_MONTH_ARRAY[i]
+                * (long)DateTimeConstants.MILLIS_PER_DAY;
+            maxSum += millis;
+            MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[i] = maxSum;
+        }
+    }
+
+    /**
+     * Constructor.
+     */
+    CommonGJChronology(Chronology base, Object param, int minDaysInFirstWeek) {
+        super(base, param, minDaysInFirstWeek);
+    }
+
+    //-----------------------------------------------------------------------
+    int getMonthOfYear(long millis, int year) {
+        // Perform a binary search to get the month. To make it go even faster,
+        // compare using ints instead of longs. The number of milliseconds per
+        // year exceeds the limit of a 32-bit int's capacity, so divide by
+        // 1024. No precision is lost (except time of day) since the number of
+        // milliseconds per day contains 1024 as a factor. After the division,
+        // the instant isn't measured in milliseconds, but in units of
+        // (128/125)seconds.
+
+        int i = (int)((millis - getYearMillis(year)) >> 10);
+
+        // There are 86400000 milliseconds per day, but divided by 1024 is
+        // 84375. There are 84375 (128/125)seconds per day.
+
+        return
+            (isLeapYear(year))
+            ? ((i < 182 * 84375)
+               ? ((i < 91 * 84375)
+                  ? ((i < 31 * 84375) ? 1 : (i < 60 * 84375) ? 2 : 3)
+                  : ((i < 121 * 84375) ? 4 : (i < 152 * 84375) ? 5 : 6))
+               : ((i < 274 * 84375)
+                  ? ((i < 213 * 84375) ? 7 : (i < 244 * 84375) ? 8 : 9)
+                  : ((i < 305 * 84375) ? 10 : (i < 335 * 84375) ? 11 : 12)))
+            : ((i < 181 * 84375)
+               ? ((i < 90 * 84375)
+                  ? ((i < 31 * 84375) ? 1 : (i < 59 * 84375) ? 2 : 3)
+                  : ((i < 120 * 84375) ? 4 : (i < 151 * 84375) ? 5 : 6))
+               : ((i < 273 * 84375)
+                  ? ((i < 212 * 84375) ? 7 : (i < 243 * 84375) ? 8 : 9)
+                  : ((i < 304 * 84375) ? 10 : (i < 334 * 84375) ? 11 : 12)));
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the number of days in the specified month and year.
+     * 
+     * @param year  the year
+     * @param month  the month
+     * @return the number of days
+     */
+    int getDaysInYearMonth(int year, int month) {
+        if (isLeapYear(year)) {
+            return MAX_DAYS_PER_MONTH_ARRAY[month - 1];
+        } else {
+            return MIN_DAYS_PER_MONTH_ARRAY[month - 1];
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    int getDaysInMonthMax(int month) {
+        return MAX_DAYS_PER_MONTH_ARRAY[month - 1];
+    }
+
+    //-----------------------------------------------------------------------
+    int getDaysInMonthMaxForSet(long instant, int value) {
+        return (value > 28 ? getDaysInMonthMax(instant) : 28);
+    }
+
+    //-----------------------------------------------------------------------
+    long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {
+        FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());
+        FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, 12);
+        FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));
+        return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);
+    }
+
+    //-----------------------------------------------------------------------
+    long getTotalMillisByYearMonth(int year, int month) {
+        if (isLeapYear(year)) {
+            return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];
+        } else {
+            return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    long getYearDifference(long minuendInstant, long subtrahendInstant) {
+        int minuendYear = getYear(minuendInstant);
+        int subtrahendYear = getYear(subtrahendInstant);
+    
+        // Inlined remainder method to avoid duplicate calls to get.
+        long minuendRem = minuendInstant - getYearMillis(minuendYear);
+        long subtrahendRem = subtrahendInstant - getYearMillis(subtrahendYear);
+    
+        // Balance leap year differences on remainders.
+        if (subtrahendRem >= FEB_29) {
+            if (isLeapYear(subtrahendYear)) {
+                if (!isLeapYear(minuendYear)) {
+                    subtrahendRem -= DateTimeConstants.MILLIS_PER_DAY;
+                }
+            } else if (minuendRem >= FEB_29 && isLeapYear(minuendYear)) {
+                minuendRem -= DateTimeConstants.MILLIS_PER_DAY;
+            }
+        }
+    
+        int difference = minuendYear - subtrahendYear;
+        if (minuendRem < subtrahendRem) {
+            difference--;
+        }
+        return difference;
+    }
+
+    //-----------------------------------------------------------------------
+    long setYear(long instant, int year) {
+        int thisYear = getYear(instant);
+        int dayOfYear = getDayOfYear(instant, thisYear);
+        int millisOfDay = getMillisOfDay(instant);
+
+        if (dayOfYear > (31 + 28)) { // after Feb 28
+            if (isLeapYear(thisYear)) {
+                // Current date is Feb 29 or later.
+                if (!isLeapYear(year)) {
+                    // Moving to a non-leap year, Feb 29 does not exist.
+                    dayOfYear--;
+                }
+            } else {
+                // Current date is Mar 01 or later.
+                if (isLeapYear(year)) {
+                    // Moving to a leap year, account for Feb 29.
+                    dayOfYear++;
+                }
+            }
+        }
+
+        instant = getYearMonthDayMillis(year, 1, dayOfYear);
+        instant += millisOfDay;
+
+        return instant;
+    }
+
+}
diff --git a/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java b/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java
index bf3eb332c..fbdc592d4 100644
--- a/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java
@@ -201,32 +201,88 @@ public Chronology withZone(DateTimeZone zone) {
         return getInstance(zone);
     }
 
-    long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth)
-        throws IllegalArgumentException
-    {
-        FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());
-        FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, 13);
-
-        int dayLimit = (monthOfYear != 13) ? 30 : (isLeapYear(year) ? 6 : 5);
-        FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, dayLimit);
+    //-----------------------------------------------------------------------
+    long setYear(long instant, int year) {
+        // optimsed implementation of set, due to 30 day months
+        int thisYear = getYear(instant);
+        int dayOfYear = getDayOfYear(instant, thisYear);
+        int millisOfDay = getMillisOfDay(instant);
+
+        if (dayOfYear > 365) {
+            // Current year is leap, and day is leap.
+            if (!isLeapYear(year)) {
+                // Moving to a non-leap year, leap day doesn't exist.
+                dayOfYear--;
+            }
+        }
 
-        long instant = getYearMillis(year);
+        instant = getYearMonthDayMillis(year, 1, dayOfYear);
+        instant += millisOfDay;
+        return instant;
+    }
 
-        if (monthOfYear > 1) {
-            instant += (monthOfYear - 1) * 30L * DateTimeConstants.MILLIS_PER_DAY;
+    //-----------------------------------------------------------------------
+    long getYearDifference(long minuendInstant, long subtrahendInstant) {
+        // optimsed implementation of getDifference, due to 30 day months
+        int minuendYear = getYear(minuendInstant);
+        int subtrahendYear = getYear(subtrahendInstant);
+
+        // Inlined remainder method to avoid duplicate calls to get.
+        long minuendRem = minuendInstant - getYearMillis(minuendYear);
+        long subtrahendRem = subtrahendInstant - getYearMillis(subtrahendYear);
+
+        int difference = minuendYear - subtrahendYear;
+        if (minuendRem < subtrahendRem) {
+            difference--;
         }
+        return difference;
+    }
 
-        if (dayOfMonth != 1) {
-            instant += (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;
-        }
+    //-----------------------------------------------------------------------
+    long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {
+        FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());
+        FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, 13);
+        FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));
+        return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);
+    }
 
-        return instant;
+    //-----------------------------------------------------------------------
+    long getTotalMillisByYearMonth(int year, int month) {
+        return (month * 30L * DateTimeConstants.MILLIS_PER_DAY);
+    }
+
+    //-----------------------------------------------------------------------
+    int getDayOfMonth(long millis) {
+        // optimised for 30 day months
+        return (getDayOfYear(millis) - 1) % 30 + 1;
     }
 
+    //-----------------------------------------------------------------------
     boolean isLeapYear(int year) {
         return (year & 3) == 3;
     }
 
+    //-----------------------------------------------------------------------
+    int getDaysInYearMonth(int year, int month) {
+        return (month != 13) ? 30 : (isLeapYear(year) ? 6 : 5);
+    }
+
+    //-----------------------------------------------------------------------
+    int getDaysInMonthMax() {
+        return 30;
+    }
+
+    //-----------------------------------------------------------------------
+    int getDaysInMonthMax(int month) {
+        return (month != 13 ? 30 : 6);
+    }
+
+    //-----------------------------------------------------------------------
+    int getMonthOfYear(long millis, int year) {
+        return ((int) ((millis - getYearMillis(year)) / 30)) + 1;
+    }
+    
+    //-----------------------------------------------------------------------
     long calculateFirstDayOfYearMillis(int year) {
         // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.
         // Calculate relative to the nearest leap year and account for the
@@ -254,33 +310,39 @@ long calculateFirstDayOfYearMillis(int year) {
         return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;
     }
 
+    //-----------------------------------------------------------------------
     int getMinYear() {
         // The lowest year that can be fully supported.
         return -292269337;
     }
 
+    //-----------------------------------------------------------------------
     int getMaxYear() {
         // The highest year that can be fully supported.
         return 292271022;
     }
 
+    //-----------------------------------------------------------------------
     long getAverageMillisPerYear() {
         return MILLIS_PER_YEAR;
     }
 
+    //-----------------------------------------------------------------------
     long getAverageMillisPerMonth() {
         return MILLIS_PER_MONTH;
     }
 
+    //-----------------------------------------------------------------------
     long getApproxMillisAtEpoch() {
         return 1686L * MILLIS_PER_YEAR + 112L * DateTimeConstants.MILLIS_PER_DAY;
     }
 
+    //-----------------------------------------------------------------------
     protected void assemble(Fields fields) {
         if (getBase() == null) {
             super.assemble(fields);
 
-            fields.year = new CopticYearDateTimeField(this);
+            fields.year = new BasicYearDateTimeField(this);
             fields.years = fields.year.getDurationField();
 
             // Coptic, like Julian, has no year zero.
@@ -290,7 +352,7 @@ protected void assemble(Fields fields) {
             fields.era = CopticEraDateTimeField.INSTANCE;
             fields.months = cMonthsField;
             fields.monthOfYear = new CopticMonthOfYearDateTimeField(this, cMonthsField);
-            fields.dayOfMonth = new CopticDayOfMonthDateTimeField(this, fields.days);
+            fields.dayOfMonth = new BasicDayOfMonthDateTimeField(this, fields.days);
         }
     }
 
diff --git a/JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java b/JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java
deleted file mode 100644
index 49d7789cc..000000000
--- a/JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java
+++ /dev/null
@@ -1,111 +0,0 @@
-/*
- *  Copyright 2001-2005 Stephen Colebourne
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.joda.time.chrono;
-
-import org.joda.time.DateTimeFieldType;
-import org.joda.time.DurationField;
-import org.joda.time.ReadablePartial;
-import org.joda.time.field.PreciseDurationDateTimeField;
-
-/**
- * Provides time calculations for the day of the month component of time.
- *
- * @author Brian S O'Neill
- * @since 1.0
- */
-final class CopticDayOfMonthDateTimeField extends PreciseDurationDateTimeField {
-
-    private static final long serialVersionUID = -5441610762799659434L;
-
-    private final BaseGJChronology iChronology;
-
-    /**
-     * Restricted constructor.
-     */
-    CopticDayOfMonthDateTimeField(BaseGJChronology chronology, DurationField days) {
-        super(DateTimeFieldType.dayOfMonth(), days);
-        iChronology = chronology;
-    }
-
-    public int get(long instant) {
-        return (iChronology.getDayOfYear(instant) - 1) % 30 + 1;
-    }
-
-    public DurationField getRangeDurationField() {
-        return iChronology.months();
-    }
-
-    public int getMinimumValue() {
-        return 1;
-    }
-
-    public int getMaximumValue() {
-        return 30;
-    }
-
-    public int getMaximumValue(long instant) {
-		if (((iChronology.getDayOfYear(instant) - 1) / 30) < 12) {
-			return 30;
-		}
-		return iChronology.isLeapYear(iChronology.getYear(instant)) ? 6 : 5;
-    }
-
-    public int getMaximumValue(ReadablePartial partial) {
-        if (partial.isSupported(DateTimeFieldType.monthOfYear())) {
-            // find month
-            int month = partial.get(DateTimeFieldType.monthOfYear());
-            if (month <= 12) {
-                return 30;
-            }
-            // 13th month, so check year
-            if (partial.isSupported(DateTimeFieldType.year())) {
-                int year = partial.get(DateTimeFieldType.year());
-                return iChronology.isLeapYear(year) ? 6 : 5;
-            }
-            return 6;
-        }
-        return 30;
-    }
-
-    public int getMaximumValue(ReadablePartial partial, int[] values) {
-        int size = partial.size();
-        for (int i = 0; i < size; i++) {
-            // find month
-            if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {
-                int month = values[i];
-                if (month <= 12) {
-                    return 30;
-                }
-                // 13th month, so check year
-                for (int j = 0; j < size; j++) {
-                    if (partial.getFieldType(j) == DateTimeFieldType.year()) {
-                        int year = values[j];
-                        return iChronology.isLeapYear(year) ? 6 : 5;
-                    }
-                }
-                return 6;
-            }
-        }
-        return 30;
-    }
-
-    /**
-     * Serialization singleton
-     */
-    private Object readResolve() {
-        return iChronology.dayOfMonth();
-    }
-}
diff --git a/JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java b/JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java
deleted file mode 100644
index 1147cd550..000000000
--- a/JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java
+++ /dev/null
@@ -1,198 +0,0 @@
-/*
- *  Copyright 2001-2005 Stephen Colebourne
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.joda.time.chrono;
-
-import org.joda.time.DateTimeConstants;
-import org.joda.time.DateTimeFieldType;
-import org.joda.time.DurationField;
-import org.joda.time.field.FieldUtils;
-import org.joda.time.field.ImpreciseDateTimeField;
-
-/**
- * Provides time calculations for the year component of time.
- *
- * @author Guy Allard
- * @author Stephen Colebourne
- * @author Brian S O'Neill
- * @since 1.0
- */
-final class GJYearDateTimeField extends ImpreciseDateTimeField {
-
-    private static final long serialVersionUID = -679076949530018869L;
-
-    private static final long FEB_29 = (31L + 29 - 1) * DateTimeConstants.MILLIS_PER_DAY;
-
-    private final BaseGJChronology iChronology;
-
-    /**
-     * Restricted constructor
-     */
-    GJYearDateTimeField(BaseGJChronology chronology) {
-        super(DateTimeFieldType.year(), chronology.getAverageMillisPerYear());
-        iChronology = chronology;
-    }
-
-    public boolean isLenient() {
-        return false;
-    }
-
-    /**
-     * Get the Year component of the specified time instant.
-     * 
-     * @param instant  the time instant in millis to query.
-     * @return the year extracted from the input.
-     */
-    public int get(long instant) {
-        return iChronology.getYear(instant);
-    }
-
-    /**
-     * Add the specified year to the specified time instant.
-     * The amount added may be negative.
-     * 
-     * @param instant  the time instant in millis to update.
-     * @param years  the years to add (can be negative).
-     * @return the updated time instant.
-     */
-    public long add(long instant, int years) {
-        if (years == 0) {
-            return instant;
-        }
-        int thisYear = get(instant);
-        int newYear = thisYear + years;
-        return set(instant, newYear);
-    }
-
-    public long add(long instant, long years) {
-        return add(instant, FieldUtils.safeToInt(years));
-    }
-
-    /**
-     * Add to the Year component of the specified time instant
-     * wrapping around within that component if necessary.
-     * 
-     * @param instant  the time instant in millis to update.
-     * @param years  the years to add (can be negative).
-     * @return the updated time instant.
-     */
-    public long addWrapField(long instant, int years) {
-        if (years == 0) {
-            return instant;
-        }
-        // Return newly calculated millis value
-        int thisYear = iChronology.getYear(instant);
-        int wrappedYear = FieldUtils.getWrappedValue
-            (thisYear, years, iChronology.getMinYear(), iChronology.getMaxYear());
-        return set(instant, wrappedYear);
-    }
-
-    public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {
-        if (minuendInstant < subtrahendInstant) {
-            return -getDifference(subtrahendInstant, minuendInstant);
-        }
-
-        int minuendYear = get(minuendInstant);
-        int subtrahendYear = get(subtrahendInstant);
-
-        // Inlined remainder method to avoid duplicate calls to get.
-        long minuendRem = minuendInstant - iChronology.getYearMillis(minuendYear);
-        long subtrahendRem = subtrahendInstant - iChronology.getYearMillis(subtrahendYear);
-
-        // Balance leap year differences on remainders.
-        if (subtrahendRem >= FEB_29) {
-            if (iChronology.isLeapYear(subtrahendYear)) {
-                if (!iChronology.isLeapYear(minuendYear)) {
-                    subtrahendRem -= DateTimeConstants.MILLIS_PER_DAY;
-                }
-            } else if (minuendRem >= FEB_29 && iChronology.isLeapYear(minuendYear)) {
-                minuendRem -= DateTimeConstants.MILLIS_PER_DAY;
-            }
-        }
-
-        int difference = minuendYear - subtrahendYear;
-        if (minuendRem < subtrahendRem) {
-            difference--;
-        }
-        return difference;
-    }
-
-    /**
-     * Set the Year component of the specified time instant.
-     * 
-     * @param instant  the time instant in millis to update.
-     * @param year  the year (-292269055,292278994) to update the time to.
-     * @return the updated time instant.
-     * @throws IllegalArgumentException  if year is invalid.
-     */
-    public long set(long instant, int year) {
-        FieldUtils.verifyValueBounds
-            (this, year, iChronology.getMinYear(), iChronology.getMaxYear());
-        return iChronology.setYear(instant, year);
-    }
-
-    public DurationField getRangeDurationField() {
-        return null;
-    }
-
-    public boolean isLeap(long instant) {
-        return iChronology.isLeapYear(get(instant));
-    }
-
-    public int getLeapAmount(long instant) {
-        if (iChronology.isLeapYear(get(instant))) {
-            return 1;
-        } else {
-            return 0;
-        }
-    }
-
-    public DurationField getLeapDurationField() {
-        return iChronology.days();
-    }
-
-    public int getMinimumValue() {
-        return iChronology.getMinYear();
-    }
-
-    public int getMaximumValue() {
-        return iChronology.getMaxYear();
-    }
-
-    public long roundFloor(long instant) {
-        return iChronology.getYearMillis(get(instant));
-    }
-
-    public long roundCeiling(long instant) {
-        int year = get(instant);
-        long yearStartMillis = iChronology.getYearMillis(year);
-        if (instant != yearStartMillis) {
-            // Bump up to start of next year.
-            instant = iChronology.getYearMillis(year + 1);
-        }
-        return instant;
-    }
-
-    public long remainder(long instant) {
-        return instant - roundFloor(instant);
-    }
-
-    /**
-     * Serialization singleton
-     */
-    private Object readResolve() {
-        return iChronology.year();
-    }
-}
diff --git a/JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java b/JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java
index 64eeb168a..43cd71bad 100644
--- a/JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java
@@ -42,7 +42,7 @@
  * @author Brian S O'Neill
  * @since 1.0
  */
-public final class GregorianChronology extends BaseGJChronology {
+public final class GregorianChronology extends CommonGJChronology {
 
     /** Serialization lock */
     private static final long serialVersionUID = -861407383323710522L;
diff --git a/JodaTime/src/java/org/joda/time/chrono/JulianChronology.java b/JodaTime/src/java/org/joda/time/chrono/JulianChronology.java
index a6390b4fd..988e0ee51 100644
--- a/JodaTime/src/java/org/joda/time/chrono/JulianChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/JulianChronology.java
@@ -47,7 +47,7 @@
  * @author Stephen Colebourne
  * @since 1.0
  */
-public final class JulianChronology extends BaseGJChronology {
+public final class JulianChronology extends CommonGJChronology {
 
     /** Serialization lock */
     private static final long serialVersionUID = -8731039522547897247L;

From eeb00cdaeb0211895be980f408656fd285856fd9 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Thu, 9 Jun 2005 05:42:59 +0000
Subject: [PATCH 048/124] Removed solar87, solar88, and solar89 time zones.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@780 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/build.xml                            |   3 -
 JodaTime/maven.xml                            |   3 -
 .../src/java/org/joda/time/tz/src/solar87     | 388 -----------------
 .../src/java/org/joda/time/tz/src/solar88     | 388 -----------------
 .../src/java/org/joda/time/tz/src/solar89     | 393 ------------------
 JodaTime/xdocs/timezones.xml                  |   5 +-
 6 files changed, 1 insertion(+), 1179 deletions(-)
 delete mode 100644 JodaTime/src/java/org/joda/time/tz/src/solar87
 delete mode 100644 JodaTime/src/java/org/joda/time/tz/src/solar88
 delete mode 100644 JodaTime/src/java/org/joda/time/tz/src/solar89

diff --git a/JodaTime/build.xml b/JodaTime/build.xml
index deed41b2a..2fa3b9636 100644
--- a/JodaTime/build.xml
+++ b/JodaTime/build.xml
@@ -206,9 +206,6 @@
       <arg value="etcetera" />
       <arg value="backward" />
       <arg value="systemv" />
-      <arg value="solar87" />
-      <arg value="solar88" />
-      <arg value="solar89" />
     </java>
   </target>
   
diff --git a/JodaTime/maven.xml b/JodaTime/maven.xml
index f6fb36190..c8f2a9031 100644
--- a/JodaTime/maven.xml
+++ b/JodaTime/maven.xml
@@ -25,9 +25,6 @@
       <arg value="etcetera" />
       <arg value="backward" />
       <arg value="systemv" />
-      <arg value="solar87" />
-      <arg value="solar88" />
-      <arg value="solar89" />
     </ant:java>
   </postGoal>
   
diff --git a/JodaTime/src/java/org/joda/time/tz/src/solar87 b/JodaTime/src/java/org/joda/time/tz/src/solar87
deleted file mode 100644
index 657753fa0..000000000
--- a/JodaTime/src/java/org/joda/time/tz/src/solar87
+++ /dev/null
@@ -1,388 +0,0 @@
-# @(#)solar87	7.3
-
-# So much for footnotes about Saudi Arabia.
-# Apparent noon times below are for Riyadh; your mileage will vary.
-# Times were computed using formulas in the U.S. Naval Observatory's
-# Almanac for Computers 1987; the formulas "will give EqT to an accuracy of
-# [plus or minus two] seconds during the current year."
-#
-# Rounding to the nearest five seconds results in fewer than
-# 256 different "time types"--a limit that's faced because time types are
-# stored on disk as unsigned chars.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	sol87	1987	only	-	Jan	1	12:03:20s -0:03:20 -
-Rule	sol87	1987	only	-	Jan	2	12:03:50s -0:03:50 -
-Rule	sol87	1987	only	-	Jan	3	12:04:15s -0:04:15 -
-Rule	sol87	1987	only	-	Jan	4	12:04:45s -0:04:45 -
-Rule	sol87	1987	only	-	Jan	5	12:05:10s -0:05:10 -
-Rule	sol87	1987	only	-	Jan	6	12:05:40s -0:05:40 -
-Rule	sol87	1987	only	-	Jan	7	12:06:05s -0:06:05 -
-Rule	sol87	1987	only	-	Jan	8	12:06:30s -0:06:30 -
-Rule	sol87	1987	only	-	Jan	9	12:06:55s -0:06:55 -
-Rule	sol87	1987	only	-	Jan	10	12:07:20s -0:07:20 -
-Rule	sol87	1987	only	-	Jan	11	12:07:45s -0:07:45 -
-Rule	sol87	1987	only	-	Jan	12	12:08:10s -0:08:10 -
-Rule	sol87	1987	only	-	Jan	13	12:08:30s -0:08:30 -
-Rule	sol87	1987	only	-	Jan	14	12:08:55s -0:08:55 -
-Rule	sol87	1987	only	-	Jan	15	12:09:15s -0:09:15 -
-Rule	sol87	1987	only	-	Jan	16	12:09:35s -0:09:35 -
-Rule	sol87	1987	only	-	Jan	17	12:09:55s -0:09:55 -
-Rule	sol87	1987	only	-	Jan	18	12:10:15s -0:10:15 -
-Rule	sol87	1987	only	-	Jan	19	12:10:35s -0:10:35 -
-Rule	sol87	1987	only	-	Jan	20	12:10:55s -0:10:55 -
-Rule	sol87	1987	only	-	Jan	21	12:11:10s -0:11:10 -
-Rule	sol87	1987	only	-	Jan	22	12:11:30s -0:11:30 -
-Rule	sol87	1987	only	-	Jan	23	12:11:45s -0:11:45 -
-Rule	sol87	1987	only	-	Jan	24	12:12:00s -0:12:00 -
-Rule	sol87	1987	only	-	Jan	25	12:12:15s -0:12:15 -
-Rule	sol87	1987	only	-	Jan	26	12:12:30s -0:12:30 -
-Rule	sol87	1987	only	-	Jan	27	12:12:40s -0:12:40 -
-Rule	sol87	1987	only	-	Jan	28	12:12:55s -0:12:55 -
-Rule	sol87	1987	only	-	Jan	29	12:13:05s -0:13:05 -
-Rule	sol87	1987	only	-	Jan	30	12:13:15s -0:13:15 -
-Rule	sol87	1987	only	-	Jan	31	12:13:25s -0:13:25 -
-Rule	sol87	1987	only	-	Feb	1	12:13:35s -0:13:35 -
-Rule	sol87	1987	only	-	Feb	2	12:13:40s -0:13:40 -
-Rule	sol87	1987	only	-	Feb	3	12:13:50s -0:13:50 -
-Rule	sol87	1987	only	-	Feb	4	12:13:55s -0:13:55 -
-Rule	sol87	1987	only	-	Feb	5	12:14:00s -0:14:00 -
-Rule	sol87	1987	only	-	Feb	6	12:14:05s -0:14:05 -
-Rule	sol87	1987	only	-	Feb	7	12:14:10s -0:14:10 -
-Rule	sol87	1987	only	-	Feb	8	12:14:10s -0:14:10 -
-Rule	sol87	1987	only	-	Feb	9	12:14:15s -0:14:15 -
-Rule	sol87	1987	only	-	Feb	10	12:14:15s -0:14:15 -
-Rule	sol87	1987	only	-	Feb	11	12:14:15s -0:14:15 -
-Rule	sol87	1987	only	-	Feb	12	12:14:15s -0:14:15 -
-Rule	sol87	1987	only	-	Feb	13	12:14:15s -0:14:15 -
-Rule	sol87	1987	only	-	Feb	14	12:14:15s -0:14:15 -
-Rule	sol87	1987	only	-	Feb	15	12:14:10s -0:14:10 -
-Rule	sol87	1987	only	-	Feb	16	12:14:10s -0:14:10 -
-Rule	sol87	1987	only	-	Feb	17	12:14:05s -0:14:05 -
-Rule	sol87	1987	only	-	Feb	18	12:14:00s -0:14:00 -
-Rule	sol87	1987	only	-	Feb	19	12:13:55s -0:13:55 -
-Rule	sol87	1987	only	-	Feb	20	12:13:50s -0:13:50 -
-Rule	sol87	1987	only	-	Feb	21	12:13:45s -0:13:45 -
-Rule	sol87	1987	only	-	Feb	22	12:13:35s -0:13:35 -
-Rule	sol87	1987	only	-	Feb	23	12:13:30s -0:13:30 -
-Rule	sol87	1987	only	-	Feb	24	12:13:20s -0:13:20 -
-Rule	sol87	1987	only	-	Feb	25	12:13:10s -0:13:10 -
-Rule	sol87	1987	only	-	Feb	26	12:13:00s -0:13:00 -
-Rule	sol87	1987	only	-	Feb	27	12:12:50s -0:12:50 -
-Rule	sol87	1987	only	-	Feb	28	12:12:40s -0:12:40 -
-Rule	sol87	1987	only	-	Mar	1	12:12:30s -0:12:30 -
-Rule	sol87	1987	only	-	Mar	2	12:12:20s -0:12:20 -
-Rule	sol87	1987	only	-	Mar	3	12:12:05s -0:12:05 -
-Rule	sol87	1987	only	-	Mar	4	12:11:55s -0:11:55 -
-Rule	sol87	1987	only	-	Mar	5	12:11:40s -0:11:40 -
-Rule	sol87	1987	only	-	Mar	6	12:11:25s -0:11:25 -
-Rule	sol87	1987	only	-	Mar	7	12:11:15s -0:11:15 -
-Rule	sol87	1987	only	-	Mar	8	12:11:00s -0:11:00 -
-Rule	sol87	1987	only	-	Mar	9	12:10:45s -0:10:45 -
-Rule	sol87	1987	only	-	Mar	10	12:10:30s -0:10:30 -
-Rule	sol87	1987	only	-	Mar	11	12:10:15s -0:10:15 -
-Rule	sol87	1987	only	-	Mar	12	12:09:55s -0:09:55 -
-Rule	sol87	1987	only	-	Mar	13	12:09:40s -0:09:40 -
-Rule	sol87	1987	only	-	Mar	14	12:09:25s -0:09:25 -
-Rule	sol87	1987	only	-	Mar	15	12:09:10s -0:09:10 -
-Rule	sol87	1987	only	-	Mar	16	12:08:50s -0:08:50 -
-Rule	sol87	1987	only	-	Mar	17	12:08:35s -0:08:35 -
-Rule	sol87	1987	only	-	Mar	18	12:08:15s -0:08:15 -
-Rule	sol87	1987	only	-	Mar	19	12:08:00s -0:08:00 -
-Rule	sol87	1987	only	-	Mar	20	12:07:40s -0:07:40 -
-Rule	sol87	1987	only	-	Mar	21	12:07:25s -0:07:25 -
-Rule	sol87	1987	only	-	Mar	22	12:07:05s -0:07:05 -
-Rule	sol87	1987	only	-	Mar	23	12:06:50s -0:06:50 -
-Rule	sol87	1987	only	-	Mar	24	12:06:30s -0:06:30 -
-Rule	sol87	1987	only	-	Mar	25	12:06:10s -0:06:10 -
-Rule	sol87	1987	only	-	Mar	26	12:05:55s -0:05:55 -
-Rule	sol87	1987	only	-	Mar	27	12:05:35s -0:05:35 -
-Rule	sol87	1987	only	-	Mar	28	12:05:15s -0:05:15 -
-Rule	sol87	1987	only	-	Mar	29	12:05:00s -0:05:00 -
-Rule	sol87	1987	only	-	Mar	30	12:04:40s -0:04:40 -
-Rule	sol87	1987	only	-	Mar	31	12:04:25s -0:04:25 -
-Rule	sol87	1987	only	-	Apr	1	12:04:05s -0:04:05 -
-Rule	sol87	1987	only	-	Apr	2	12:03:45s -0:03:45 -
-Rule	sol87	1987	only	-	Apr	3	12:03:30s -0:03:30 -
-Rule	sol87	1987	only	-	Apr	4	12:03:10s -0:03:10 -
-Rule	sol87	1987	only	-	Apr	5	12:02:55s -0:02:55 -
-Rule	sol87	1987	only	-	Apr	6	12:02:35s -0:02:35 -
-Rule	sol87	1987	only	-	Apr	7	12:02:20s -0:02:20 -
-Rule	sol87	1987	only	-	Apr	8	12:02:05s -0:02:05 -
-Rule	sol87	1987	only	-	Apr	9	12:01:45s -0:01:45 -
-Rule	sol87	1987	only	-	Apr	10	12:01:30s -0:01:30 -
-Rule	sol87	1987	only	-	Apr	11	12:01:15s -0:01:15 -
-Rule	sol87	1987	only	-	Apr	12	12:00:55s -0:00:55 -
-Rule	sol87	1987	only	-	Apr	13	12:00:40s -0:00:40 -
-Rule	sol87	1987	only	-	Apr	14	12:00:25s -0:00:25 -
-Rule	sol87	1987	only	-	Apr	15	12:00:10s -0:00:10 -
-Rule	sol87	1987	only	-	Apr	16	11:59:55s 0:00:05 -
-Rule	sol87	1987	only	-	Apr	17	11:59:45s 0:00:15 -
-Rule	sol87	1987	only	-	Apr	18	11:59:30s 0:00:30 -
-Rule	sol87	1987	only	-	Apr	19	11:59:15s 0:00:45 -
-Rule	sol87	1987	only	-	Apr	20	11:59:05s 0:00:55 -
-Rule	sol87	1987	only	-	Apr	21	11:58:50s 0:01:10 -
-Rule	sol87	1987	only	-	Apr	22	11:58:40s 0:01:20 -
-Rule	sol87	1987	only	-	Apr	23	11:58:25s 0:01:35 -
-Rule	sol87	1987	only	-	Apr	24	11:58:15s 0:01:45 -
-Rule	sol87	1987	only	-	Apr	25	11:58:05s 0:01:55 -
-Rule	sol87	1987	only	-	Apr	26	11:57:55s 0:02:05 -
-Rule	sol87	1987	only	-	Apr	27	11:57:45s 0:02:15 -
-Rule	sol87	1987	only	-	Apr	28	11:57:35s 0:02:25 -
-Rule	sol87	1987	only	-	Apr	29	11:57:25s 0:02:35 -
-Rule	sol87	1987	only	-	Apr	30	11:57:15s 0:02:45 -
-Rule	sol87	1987	only	-	May	1	11:57:10s 0:02:50 -
-Rule	sol87	1987	only	-	May	2	11:57:00s 0:03:00 -
-Rule	sol87	1987	only	-	May	3	11:56:55s 0:03:05 -
-Rule	sol87	1987	only	-	May	4	11:56:50s 0:03:10 -
-Rule	sol87	1987	only	-	May	5	11:56:45s 0:03:15 -
-Rule	sol87	1987	only	-	May	6	11:56:40s 0:03:20 -
-Rule	sol87	1987	only	-	May	7	11:56:35s 0:03:25 -
-Rule	sol87	1987	only	-	May	8	11:56:30s 0:03:30 -
-Rule	sol87	1987	only	-	May	9	11:56:25s 0:03:35 -
-Rule	sol87	1987	only	-	May	10	11:56:25s 0:03:35 -
-Rule	sol87	1987	only	-	May	11	11:56:20s 0:03:40 -
-Rule	sol87	1987	only	-	May	12	11:56:20s 0:03:40 -
-Rule	sol87	1987	only	-	May	13	11:56:20s 0:03:40 -
-Rule	sol87	1987	only	-	May	14	11:56:20s 0:03:40 -
-Rule	sol87	1987	only	-	May	15	11:56:20s 0:03:40 -
-Rule	sol87	1987	only	-	May	16	11:56:20s 0:03:40 -
-Rule	sol87	1987	only	-	May	17	11:56:20s 0:03:40 -
-Rule	sol87	1987	only	-	May	18	11:56:20s 0:03:40 -
-Rule	sol87	1987	only	-	May	19	11:56:25s 0:03:35 -
-Rule	sol87	1987	only	-	May	20	11:56:25s 0:03:35 -
-Rule	sol87	1987	only	-	May	21	11:56:30s 0:03:30 -
-Rule	sol87	1987	only	-	May	22	11:56:35s 0:03:25 -
-Rule	sol87	1987	only	-	May	23	11:56:40s 0:03:20 -
-Rule	sol87	1987	only	-	May	24	11:56:45s 0:03:15 -
-Rule	sol87	1987	only	-	May	25	11:56:50s 0:03:10 -
-Rule	sol87	1987	only	-	May	26	11:56:55s 0:03:05 -
-Rule	sol87	1987	only	-	May	27	11:57:00s 0:03:00 -
-Rule	sol87	1987	only	-	May	28	11:57:10s 0:02:50 -
-Rule	sol87	1987	only	-	May	29	11:57:15s 0:02:45 -
-Rule	sol87	1987	only	-	May	30	11:57:25s 0:02:35 -
-Rule	sol87	1987	only	-	May	31	11:57:30s 0:02:30 -
-Rule	sol87	1987	only	-	Jun	1	11:57:40s 0:02:20 -
-Rule	sol87	1987	only	-	Jun	2	11:57:50s 0:02:10 -
-Rule	sol87	1987	only	-	Jun	3	11:58:00s 0:02:00 -
-Rule	sol87	1987	only	-	Jun	4	11:58:10s 0:01:50 -
-Rule	sol87	1987	only	-	Jun	5	11:58:20s 0:01:40 -
-Rule	sol87	1987	only	-	Jun	6	11:58:30s 0:01:30 -
-Rule	sol87	1987	only	-	Jun	7	11:58:40s 0:01:20 -
-Rule	sol87	1987	only	-	Jun	8	11:58:50s 0:01:10 -
-Rule	sol87	1987	only	-	Jun	9	11:59:05s 0:00:55 -
-Rule	sol87	1987	only	-	Jun	10	11:59:15s 0:00:45 -
-Rule	sol87	1987	only	-	Jun	11	11:59:30s 0:00:30 -
-Rule	sol87	1987	only	-	Jun	12	11:59:40s 0:00:20 -
-Rule	sol87	1987	only	-	Jun	13	11:59:50s 0:00:10 -
-Rule	sol87	1987	only	-	Jun	14	12:00:05s -0:00:05 -
-Rule	sol87	1987	only	-	Jun	15	12:00:15s -0:00:15 -
-Rule	sol87	1987	only	-	Jun	16	12:00:30s -0:00:30 -
-Rule	sol87	1987	only	-	Jun	17	12:00:45s -0:00:45 -
-Rule	sol87	1987	only	-	Jun	18	12:00:55s -0:00:55 -
-Rule	sol87	1987	only	-	Jun	19	12:01:10s -0:01:10 -
-Rule	sol87	1987	only	-	Jun	20	12:01:20s -0:01:20 -
-Rule	sol87	1987	only	-	Jun	21	12:01:35s -0:01:35 -
-Rule	sol87	1987	only	-	Jun	22	12:01:50s -0:01:50 -
-Rule	sol87	1987	only	-	Jun	23	12:02:00s -0:02:00 -
-Rule	sol87	1987	only	-	Jun	24	12:02:15s -0:02:15 -
-Rule	sol87	1987	only	-	Jun	25	12:02:25s -0:02:25 -
-Rule	sol87	1987	only	-	Jun	26	12:02:40s -0:02:40 -
-Rule	sol87	1987	only	-	Jun	27	12:02:50s -0:02:50 -
-Rule	sol87	1987	only	-	Jun	28	12:03:05s -0:03:05 -
-Rule	sol87	1987	only	-	Jun	29	12:03:15s -0:03:15 -
-Rule	sol87	1987	only	-	Jun	30	12:03:30s -0:03:30 -
-Rule	sol87	1987	only	-	Jul	1	12:03:40s -0:03:40 -
-Rule	sol87	1987	only	-	Jul	2	12:03:50s -0:03:50 -
-Rule	sol87	1987	only	-	Jul	3	12:04:05s -0:04:05 -
-Rule	sol87	1987	only	-	Jul	4	12:04:15s -0:04:15 -
-Rule	sol87	1987	only	-	Jul	5	12:04:25s -0:04:25 -
-Rule	sol87	1987	only	-	Jul	6	12:04:35s -0:04:35 -
-Rule	sol87	1987	only	-	Jul	7	12:04:45s -0:04:45 -
-Rule	sol87	1987	only	-	Jul	8	12:04:55s -0:04:55 -
-Rule	sol87	1987	only	-	Jul	9	12:05:05s -0:05:05 -
-Rule	sol87	1987	only	-	Jul	10	12:05:15s -0:05:15 -
-Rule	sol87	1987	only	-	Jul	11	12:05:20s -0:05:20 -
-Rule	sol87	1987	only	-	Jul	12	12:05:30s -0:05:30 -
-Rule	sol87	1987	only	-	Jul	13	12:05:40s -0:05:40 -
-Rule	sol87	1987	only	-	Jul	14	12:05:45s -0:05:45 -
-Rule	sol87	1987	only	-	Jul	15	12:05:50s -0:05:50 -
-Rule	sol87	1987	only	-	Jul	16	12:06:00s -0:06:00 -
-Rule	sol87	1987	only	-	Jul	17	12:06:05s -0:06:05 -
-Rule	sol87	1987	only	-	Jul	18	12:06:10s -0:06:10 -
-Rule	sol87	1987	only	-	Jul	19	12:06:15s -0:06:15 -
-Rule	sol87	1987	only	-	Jul	20	12:06:15s -0:06:15 -
-Rule	sol87	1987	only	-	Jul	21	12:06:20s -0:06:20 -
-Rule	sol87	1987	only	-	Jul	22	12:06:25s -0:06:25 -
-Rule	sol87	1987	only	-	Jul	23	12:06:25s -0:06:25 -
-Rule	sol87	1987	only	-	Jul	24	12:06:25s -0:06:25 -
-Rule	sol87	1987	only	-	Jul	25	12:06:30s -0:06:30 -
-Rule	sol87	1987	only	-	Jul	26	12:06:30s -0:06:30 -
-Rule	sol87	1987	only	-	Jul	27	12:06:30s -0:06:30 -
-Rule	sol87	1987	only	-	Jul	28	12:06:30s -0:06:30 -
-Rule	sol87	1987	only	-	Jul	29	12:06:25s -0:06:25 -
-Rule	sol87	1987	only	-	Jul	30	12:06:25s -0:06:25 -
-Rule	sol87	1987	only	-	Jul	31	12:06:25s -0:06:25 -
-Rule	sol87	1987	only	-	Aug	1	12:06:20s -0:06:20 -
-Rule	sol87	1987	only	-	Aug	2	12:06:15s -0:06:15 -
-Rule	sol87	1987	only	-	Aug	3	12:06:10s -0:06:10 -
-Rule	sol87	1987	only	-	Aug	4	12:06:05s -0:06:05 -
-Rule	sol87	1987	only	-	Aug	5	12:06:00s -0:06:00 -
-Rule	sol87	1987	only	-	Aug	6	12:05:55s -0:05:55 -
-Rule	sol87	1987	only	-	Aug	7	12:05:50s -0:05:50 -
-Rule	sol87	1987	only	-	Aug	8	12:05:40s -0:05:40 -
-Rule	sol87	1987	only	-	Aug	9	12:05:35s -0:05:35 -
-Rule	sol87	1987	only	-	Aug	10	12:05:25s -0:05:25 -
-Rule	sol87	1987	only	-	Aug	11	12:05:15s -0:05:15 -
-Rule	sol87	1987	only	-	Aug	12	12:05:05s -0:05:05 -
-Rule	sol87	1987	only	-	Aug	13	12:04:55s -0:04:55 -
-Rule	sol87	1987	only	-	Aug	14	12:04:45s -0:04:45 -
-Rule	sol87	1987	only	-	Aug	15	12:04:35s -0:04:35 -
-Rule	sol87	1987	only	-	Aug	16	12:04:25s -0:04:25 -
-Rule	sol87	1987	only	-	Aug	17	12:04:10s -0:04:10 -
-Rule	sol87	1987	only	-	Aug	18	12:04:00s -0:04:00 -
-Rule	sol87	1987	only	-	Aug	19	12:03:45s -0:03:45 -
-Rule	sol87	1987	only	-	Aug	20	12:03:30s -0:03:30 -
-Rule	sol87	1987	only	-	Aug	21	12:03:15s -0:03:15 -
-Rule	sol87	1987	only	-	Aug	22	12:03:00s -0:03:00 -
-Rule	sol87	1987	only	-	Aug	23	12:02:45s -0:02:45 -
-Rule	sol87	1987	only	-	Aug	24	12:02:30s -0:02:30 -
-Rule	sol87	1987	only	-	Aug	25	12:02:15s -0:02:15 -
-Rule	sol87	1987	only	-	Aug	26	12:02:00s -0:02:00 -
-Rule	sol87	1987	only	-	Aug	27	12:01:40s -0:01:40 -
-Rule	sol87	1987	only	-	Aug	28	12:01:25s -0:01:25 -
-Rule	sol87	1987	only	-	Aug	29	12:01:05s -0:01:05 -
-Rule	sol87	1987	only	-	Aug	30	12:00:50s -0:00:50 -
-Rule	sol87	1987	only	-	Aug	31	12:00:30s -0:00:30 -
-Rule	sol87	1987	only	-	Sep	1	12:00:10s -0:00:10 -
-Rule	sol87	1987	only	-	Sep	2	11:59:50s 0:00:10 -
-Rule	sol87	1987	only	-	Sep	3	11:59:35s 0:00:25 -
-Rule	sol87	1987	only	-	Sep	4	11:59:15s 0:00:45 -
-Rule	sol87	1987	only	-	Sep	5	11:58:55s 0:01:05 -
-Rule	sol87	1987	only	-	Sep	6	11:58:35s 0:01:25 -
-Rule	sol87	1987	only	-	Sep	7	11:58:15s 0:01:45 -
-Rule	sol87	1987	only	-	Sep	8	11:57:55s 0:02:05 -
-Rule	sol87	1987	only	-	Sep	9	11:57:30s 0:02:30 -
-Rule	sol87	1987	only	-	Sep	10	11:57:10s 0:02:50 -
-Rule	sol87	1987	only	-	Sep	11	11:56:50s 0:03:10 -
-Rule	sol87	1987	only	-	Sep	12	11:56:30s 0:03:30 -
-Rule	sol87	1987	only	-	Sep	13	11:56:10s 0:03:50 -
-Rule	sol87	1987	only	-	Sep	14	11:55:45s 0:04:15 -
-Rule	sol87	1987	only	-	Sep	15	11:55:25s 0:04:35 -
-Rule	sol87	1987	only	-	Sep	16	11:55:05s 0:04:55 -
-Rule	sol87	1987	only	-	Sep	17	11:54:45s 0:05:15 -
-Rule	sol87	1987	only	-	Sep	18	11:54:20s 0:05:40 -
-Rule	sol87	1987	only	-	Sep	19	11:54:00s 0:06:00 -
-Rule	sol87	1987	only	-	Sep	20	11:53:40s 0:06:20 -
-Rule	sol87	1987	only	-	Sep	21	11:53:15s 0:06:45 -
-Rule	sol87	1987	only	-	Sep	22	11:52:55s 0:07:05 -
-Rule	sol87	1987	only	-	Sep	23	11:52:35s 0:07:25 -
-Rule	sol87	1987	only	-	Sep	24	11:52:15s 0:07:45 -
-Rule	sol87	1987	only	-	Sep	25	11:51:55s 0:08:05 -
-Rule	sol87	1987	only	-	Sep	26	11:51:35s 0:08:25 -
-Rule	sol87	1987	only	-	Sep	27	11:51:10s 0:08:50 -
-Rule	sol87	1987	only	-	Sep	28	11:50:50s 0:09:10 -
-Rule	sol87	1987	only	-	Sep	29	11:50:30s 0:09:30 -
-Rule	sol87	1987	only	-	Sep	30	11:50:10s 0:09:50 -
-Rule	sol87	1987	only	-	Oct	1	11:49:50s 0:10:10 -
-Rule	sol87	1987	only	-	Oct	2	11:49:35s 0:10:25 -
-Rule	sol87	1987	only	-	Oct	3	11:49:15s 0:10:45 -
-Rule	sol87	1987	only	-	Oct	4	11:48:55s 0:11:05 -
-Rule	sol87	1987	only	-	Oct	5	11:48:35s 0:11:25 -
-Rule	sol87	1987	only	-	Oct	6	11:48:20s 0:11:40 -
-Rule	sol87	1987	only	-	Oct	7	11:48:00s 0:12:00 -
-Rule	sol87	1987	only	-	Oct	8	11:47:45s 0:12:15 -
-Rule	sol87	1987	only	-	Oct	9	11:47:25s 0:12:35 -
-Rule	sol87	1987	only	-	Oct	10	11:47:10s 0:12:50 -
-Rule	sol87	1987	only	-	Oct	11	11:46:55s 0:13:05 -
-Rule	sol87	1987	only	-	Oct	12	11:46:40s 0:13:20 -
-Rule	sol87	1987	only	-	Oct	13	11:46:25s 0:13:35 -
-Rule	sol87	1987	only	-	Oct	14	11:46:10s 0:13:50 -
-Rule	sol87	1987	only	-	Oct	15	11:45:55s 0:14:05 -
-Rule	sol87	1987	only	-	Oct	16	11:45:45s 0:14:15 -
-Rule	sol87	1987	only	-	Oct	17	11:45:30s 0:14:30 -
-Rule	sol87	1987	only	-	Oct	18	11:45:20s 0:14:40 -
-Rule	sol87	1987	only	-	Oct	19	11:45:05s 0:14:55 -
-Rule	sol87	1987	only	-	Oct	20	11:44:55s 0:15:05 -
-Rule	sol87	1987	only	-	Oct	21	11:44:45s 0:15:15 -
-Rule	sol87	1987	only	-	Oct	22	11:44:35s 0:15:25 -
-Rule	sol87	1987	only	-	Oct	23	11:44:25s 0:15:35 -
-Rule	sol87	1987	only	-	Oct	24	11:44:20s 0:15:40 -
-Rule	sol87	1987	only	-	Oct	25	11:44:10s 0:15:50 -
-Rule	sol87	1987	only	-	Oct	26	11:44:05s 0:15:55 -
-Rule	sol87	1987	only	-	Oct	27	11:43:55s 0:16:05 -
-Rule	sol87	1987	only	-	Oct	28	11:43:50s 0:16:10 -
-Rule	sol87	1987	only	-	Oct	29	11:43:45s 0:16:15 -
-Rule	sol87	1987	only	-	Oct	30	11:43:45s 0:16:15 -
-Rule	sol87	1987	only	-	Oct	31	11:43:40s 0:16:20 -
-Rule	sol87	1987	only	-	Nov	1	11:43:40s 0:16:20 -
-Rule	sol87	1987	only	-	Nov	2	11:43:35s 0:16:25 -
-Rule	sol87	1987	only	-	Nov	3	11:43:35s 0:16:25 -
-Rule	sol87	1987	only	-	Nov	4	11:43:35s 0:16:25 -
-Rule	sol87	1987	only	-	Nov	5	11:43:35s 0:16:25 -
-Rule	sol87	1987	only	-	Nov	6	11:43:40s 0:16:20 -
-Rule	sol87	1987	only	-	Nov	7	11:43:40s 0:16:20 -
-Rule	sol87	1987	only	-	Nov	8	11:43:45s 0:16:15 -
-Rule	sol87	1987	only	-	Nov	9	11:43:50s 0:16:10 -
-Rule	sol87	1987	only	-	Nov	10	11:43:55s 0:16:05 -
-Rule	sol87	1987	only	-	Nov	11	11:44:00s 0:16:00 -
-Rule	sol87	1987	only	-	Nov	12	11:44:05s 0:15:55 -
-Rule	sol87	1987	only	-	Nov	13	11:44:15s 0:15:45 -
-Rule	sol87	1987	only	-	Nov	14	11:44:20s 0:15:40 -
-Rule	sol87	1987	only	-	Nov	15	11:44:30s 0:15:30 -
-Rule	sol87	1987	only	-	Nov	16	11:44:40s 0:15:20 -
-Rule	sol87	1987	only	-	Nov	17	11:44:50s 0:15:10 -
-Rule	sol87	1987	only	-	Nov	18	11:45:05s 0:14:55 -
-Rule	sol87	1987	only	-	Nov	19	11:45:15s 0:14:45 -
-Rule	sol87	1987	only	-	Nov	20	11:45:30s 0:14:30 -
-Rule	sol87	1987	only	-	Nov	21	11:45:45s 0:14:15 -
-Rule	sol87	1987	only	-	Nov	22	11:46:00s 0:14:00 -
-Rule	sol87	1987	only	-	Nov	23	11:46:15s 0:13:45 -
-Rule	sol87	1987	only	-	Nov	24	11:46:30s 0:13:30 -
-Rule	sol87	1987	only	-	Nov	25	11:46:50s 0:13:10 -
-Rule	sol87	1987	only	-	Nov	26	11:47:10s 0:12:50 -
-Rule	sol87	1987	only	-	Nov	27	11:47:25s 0:12:35 -
-Rule	sol87	1987	only	-	Nov	28	11:47:45s 0:12:15 -
-Rule	sol87	1987	only	-	Nov	29	11:48:05s 0:11:55 -
-Rule	sol87	1987	only	-	Nov	30	11:48:30s 0:11:30 -
-Rule	sol87	1987	only	-	Dec	1	11:48:50s 0:11:10 -
-Rule	sol87	1987	only	-	Dec	2	11:49:10s 0:10:50 -
-Rule	sol87	1987	only	-	Dec	3	11:49:35s 0:10:25 -
-Rule	sol87	1987	only	-	Dec	4	11:50:00s 0:10:00 -
-Rule	sol87	1987	only	-	Dec	5	11:50:25s 0:09:35 -
-Rule	sol87	1987	only	-	Dec	6	11:50:50s 0:09:10 -
-Rule	sol87	1987	only	-	Dec	7	11:51:15s 0:08:45 -
-Rule	sol87	1987	only	-	Dec	8	11:51:40s 0:08:20 -
-Rule	sol87	1987	only	-	Dec	9	11:52:05s 0:07:55 -
-Rule	sol87	1987	only	-	Dec	10	11:52:30s 0:07:30 -
-Rule	sol87	1987	only	-	Dec	11	11:53:00s 0:07:00 -
-Rule	sol87	1987	only	-	Dec	12	11:53:25s 0:06:35 -
-Rule	sol87	1987	only	-	Dec	13	11:53:55s 0:06:05 -
-Rule	sol87	1987	only	-	Dec	14	11:54:25s 0:05:35 -
-Rule	sol87	1987	only	-	Dec	15	11:54:50s 0:05:10 -
-Rule	sol87	1987	only	-	Dec	16	11:55:20s 0:04:40 -
-Rule	sol87	1987	only	-	Dec	17	11:55:50s 0:04:10 -
-Rule	sol87	1987	only	-	Dec	18	11:56:20s 0:03:40 -
-Rule	sol87	1987	only	-	Dec	19	11:56:50s 0:03:10 -
-Rule	sol87	1987	only	-	Dec	20	11:57:20s 0:02:40 -
-Rule	sol87	1987	only	-	Dec	21	11:57:50s 0:02:10 -
-Rule	sol87	1987	only	-	Dec	22	11:58:20s 0:01:40 -
-Rule	sol87	1987	only	-	Dec	23	11:58:50s 0:01:10 -
-Rule	sol87	1987	only	-	Dec	24	11:59:20s 0:00:40 -
-Rule	sol87	1987	only	-	Dec	25	11:59:50s 0:00:10 -
-Rule	sol87	1987	only	-	Dec	26	12:00:20s -0:00:20 -
-Rule	sol87	1987	only	-	Dec	27	12:00:45s -0:00:45 -
-Rule	sol87	1987	only	-	Dec	28	12:01:15s -0:01:15 -
-Rule	sol87	1987	only	-	Dec	29	12:01:45s -0:01:45 -
-Rule	sol87	1987	only	-	Dec	30	12:02:15s -0:02:15 -
-Rule	sol87	1987	only	-	Dec	31	12:02:45s -0:02:45 -
-
-# Riyadh is at about 46 degrees 46 minutes East:  3 hrs, 7 mins, 4 secs
-# Before and after 1987, we'll operate on local mean solar time.
-
-# Zone	NAME		GMTOFF	RULES/SAVE	FORMAT	[UNTIL]
-Zone	Asia/Riyadh87	3:07:04	-		??	1987
-			3:07:04	sol87		??	1988
-			3:07:04	-		??
-# For backward compatibility...
-Link	Asia/Riyadh87	Mideast/Riyadh87
diff --git a/JodaTime/src/java/org/joda/time/tz/src/solar88 b/JodaTime/src/java/org/joda/time/tz/src/solar88
deleted file mode 100644
index 22836e918..000000000
--- a/JodaTime/src/java/org/joda/time/tz/src/solar88
+++ /dev/null
@@ -1,388 +0,0 @@
-# @(#)solar88	7.3
-
-# Apparent noon times below are for Riyadh; they're a bit off for other places.
-# Times were computed using formulas in the U.S. Naval Observatory's
-# Almanac for Computers 1988; the formulas "will give EqT to an accuracy of
-# [plus or minus two] seconds during the current year."
-#
-# Rounding to the nearest five seconds results in fewer than
-# 256 different "time types"--a limit that's faced because time types are
-# stored on disk as unsigned chars.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	sol88	1988	only	-	Jan	1	12:03:15s -0:03:15 -
-Rule	sol88	1988	only	-	Jan	2	12:03:40s -0:03:40 -
-Rule	sol88	1988	only	-	Jan	3	12:04:10s -0:04:10 -
-Rule	sol88	1988	only	-	Jan	4	12:04:40s -0:04:40 -
-Rule	sol88	1988	only	-	Jan	5	12:05:05s -0:05:05 -
-Rule	sol88	1988	only	-	Jan	6	12:05:30s -0:05:30 -
-Rule	sol88	1988	only	-	Jan	7	12:06:00s -0:06:00 -
-Rule	sol88	1988	only	-	Jan	8	12:06:25s -0:06:25 -
-Rule	sol88	1988	only	-	Jan	9	12:06:50s -0:06:50 -
-Rule	sol88	1988	only	-	Jan	10	12:07:15s -0:07:15 -
-Rule	sol88	1988	only	-	Jan	11	12:07:40s -0:07:40 -
-Rule	sol88	1988	only	-	Jan	12	12:08:05s -0:08:05 -
-Rule	sol88	1988	only	-	Jan	13	12:08:25s -0:08:25 -
-Rule	sol88	1988	only	-	Jan	14	12:08:50s -0:08:50 -
-Rule	sol88	1988	only	-	Jan	15	12:09:10s -0:09:10 -
-Rule	sol88	1988	only	-	Jan	16	12:09:30s -0:09:30 -
-Rule	sol88	1988	only	-	Jan	17	12:09:50s -0:09:50 -
-Rule	sol88	1988	only	-	Jan	18	12:10:10s -0:10:10 -
-Rule	sol88	1988	only	-	Jan	19	12:10:30s -0:10:30 -
-Rule	sol88	1988	only	-	Jan	20	12:10:50s -0:10:50 -
-Rule	sol88	1988	only	-	Jan	21	12:11:05s -0:11:05 -
-Rule	sol88	1988	only	-	Jan	22	12:11:25s -0:11:25 -
-Rule	sol88	1988	only	-	Jan	23	12:11:40s -0:11:40 -
-Rule	sol88	1988	only	-	Jan	24	12:11:55s -0:11:55 -
-Rule	sol88	1988	only	-	Jan	25	12:12:10s -0:12:10 -
-Rule	sol88	1988	only	-	Jan	26	12:12:25s -0:12:25 -
-Rule	sol88	1988	only	-	Jan	27	12:12:40s -0:12:40 -
-Rule	sol88	1988	only	-	Jan	28	12:12:50s -0:12:50 -
-Rule	sol88	1988	only	-	Jan	29	12:13:00s -0:13:00 -
-Rule	sol88	1988	only	-	Jan	30	12:13:10s -0:13:10 -
-Rule	sol88	1988	only	-	Jan	31	12:13:20s -0:13:20 -
-Rule	sol88	1988	only	-	Feb	1	12:13:30s -0:13:30 -
-Rule	sol88	1988	only	-	Feb	2	12:13:40s -0:13:40 -
-Rule	sol88	1988	only	-	Feb	3	12:13:45s -0:13:45 -
-Rule	sol88	1988	only	-	Feb	4	12:13:55s -0:13:55 -
-Rule	sol88	1988	only	-	Feb	5	12:14:00s -0:14:00 -
-Rule	sol88	1988	only	-	Feb	6	12:14:05s -0:14:05 -
-Rule	sol88	1988	only	-	Feb	7	12:14:10s -0:14:10 -
-Rule	sol88	1988	only	-	Feb	8	12:14:10s -0:14:10 -
-Rule	sol88	1988	only	-	Feb	9	12:14:15s -0:14:15 -
-Rule	sol88	1988	only	-	Feb	10	12:14:15s -0:14:15 -
-Rule	sol88	1988	only	-	Feb	11	12:14:15s -0:14:15 -
-Rule	sol88	1988	only	-	Feb	12	12:14:15s -0:14:15 -
-Rule	sol88	1988	only	-	Feb	13	12:14:15s -0:14:15 -
-Rule	sol88	1988	only	-	Feb	14	12:14:15s -0:14:15 -
-Rule	sol88	1988	only	-	Feb	15	12:14:10s -0:14:10 -
-Rule	sol88	1988	only	-	Feb	16	12:14:10s -0:14:10 -
-Rule	sol88	1988	only	-	Feb	17	12:14:05s -0:14:05 -
-Rule	sol88	1988	only	-	Feb	18	12:14:00s -0:14:00 -
-Rule	sol88	1988	only	-	Feb	19	12:13:55s -0:13:55 -
-Rule	sol88	1988	only	-	Feb	20	12:13:50s -0:13:50 -
-Rule	sol88	1988	only	-	Feb	21	12:13:45s -0:13:45 -
-Rule	sol88	1988	only	-	Feb	22	12:13:40s -0:13:40 -
-Rule	sol88	1988	only	-	Feb	23	12:13:30s -0:13:30 -
-Rule	sol88	1988	only	-	Feb	24	12:13:20s -0:13:20 -
-Rule	sol88	1988	only	-	Feb	25	12:13:15s -0:13:15 -
-Rule	sol88	1988	only	-	Feb	26	12:13:05s -0:13:05 -
-Rule	sol88	1988	only	-	Feb	27	12:12:55s -0:12:55 -
-Rule	sol88	1988	only	-	Feb	28	12:12:45s -0:12:45 -
-Rule	sol88	1988	only	-	Feb	29	12:12:30s -0:12:30 -
-Rule	sol88	1988	only	-	Mar	1	12:12:20s -0:12:20 -
-Rule	sol88	1988	only	-	Mar	2	12:12:10s -0:12:10 -
-Rule	sol88	1988	only	-	Mar	3	12:11:55s -0:11:55 -
-Rule	sol88	1988	only	-	Mar	4	12:11:45s -0:11:45 -
-Rule	sol88	1988	only	-	Mar	5	12:11:30s -0:11:30 -
-Rule	sol88	1988	only	-	Mar	6	12:11:15s -0:11:15 -
-Rule	sol88	1988	only	-	Mar	7	12:11:00s -0:11:00 -
-Rule	sol88	1988	only	-	Mar	8	12:10:45s -0:10:45 -
-Rule	sol88	1988	only	-	Mar	9	12:10:30s -0:10:30 -
-Rule	sol88	1988	only	-	Mar	10	12:10:15s -0:10:15 -
-Rule	sol88	1988	only	-	Mar	11	12:10:00s -0:10:00 -
-Rule	sol88	1988	only	-	Mar	12	12:09:45s -0:09:45 -
-Rule	sol88	1988	only	-	Mar	13	12:09:30s -0:09:30 -
-Rule	sol88	1988	only	-	Mar	14	12:09:10s -0:09:10 -
-Rule	sol88	1988	only	-	Mar	15	12:08:55s -0:08:55 -
-Rule	sol88	1988	only	-	Mar	16	12:08:40s -0:08:40 -
-Rule	sol88	1988	only	-	Mar	17	12:08:20s -0:08:20 -
-Rule	sol88	1988	only	-	Mar	18	12:08:05s -0:08:05 -
-Rule	sol88	1988	only	-	Mar	19	12:07:45s -0:07:45 -
-Rule	sol88	1988	only	-	Mar	20	12:07:30s -0:07:30 -
-Rule	sol88	1988	only	-	Mar	21	12:07:10s -0:07:10 -
-Rule	sol88	1988	only	-	Mar	22	12:06:50s -0:06:50 -
-Rule	sol88	1988	only	-	Mar	23	12:06:35s -0:06:35 -
-Rule	sol88	1988	only	-	Mar	24	12:06:15s -0:06:15 -
-Rule	sol88	1988	only	-	Mar	25	12:06:00s -0:06:00 -
-Rule	sol88	1988	only	-	Mar	26	12:05:40s -0:05:40 -
-Rule	sol88	1988	only	-	Mar	27	12:05:20s -0:05:20 -
-Rule	sol88	1988	only	-	Mar	28	12:05:05s -0:05:05 -
-Rule	sol88	1988	only	-	Mar	29	12:04:45s -0:04:45 -
-Rule	sol88	1988	only	-	Mar	30	12:04:25s -0:04:25 -
-Rule	sol88	1988	only	-	Mar	31	12:04:10s -0:04:10 -
-Rule	sol88	1988	only	-	Apr	1	12:03:50s -0:03:50 -
-Rule	sol88	1988	only	-	Apr	2	12:03:35s -0:03:35 -
-Rule	sol88	1988	only	-	Apr	3	12:03:15s -0:03:15 -
-Rule	sol88	1988	only	-	Apr	4	12:03:00s -0:03:00 -
-Rule	sol88	1988	only	-	Apr	5	12:02:40s -0:02:40 -
-Rule	sol88	1988	only	-	Apr	6	12:02:25s -0:02:25 -
-Rule	sol88	1988	only	-	Apr	7	12:02:05s -0:02:05 -
-Rule	sol88	1988	only	-	Apr	8	12:01:50s -0:01:50 -
-Rule	sol88	1988	only	-	Apr	9	12:01:35s -0:01:35 -
-Rule	sol88	1988	only	-	Apr	10	12:01:15s -0:01:15 -
-Rule	sol88	1988	only	-	Apr	11	12:01:00s -0:01:00 -
-Rule	sol88	1988	only	-	Apr	12	12:00:45s -0:00:45 -
-Rule	sol88	1988	only	-	Apr	13	12:00:30s -0:00:30 -
-Rule	sol88	1988	only	-	Apr	14	12:00:15s -0:00:15 -
-Rule	sol88	1988	only	-	Apr	15	12:00:00s 0:00:00 -
-Rule	sol88	1988	only	-	Apr	16	11:59:45s 0:00:15 -
-Rule	sol88	1988	only	-	Apr	17	11:59:30s 0:00:30 -
-Rule	sol88	1988	only	-	Apr	18	11:59:20s 0:00:40 -
-Rule	sol88	1988	only	-	Apr	19	11:59:05s 0:00:55 -
-Rule	sol88	1988	only	-	Apr	20	11:58:55s 0:01:05 -
-Rule	sol88	1988	only	-	Apr	21	11:58:40s 0:01:20 -
-Rule	sol88	1988	only	-	Apr	22	11:58:30s 0:01:30 -
-Rule	sol88	1988	only	-	Apr	23	11:58:15s 0:01:45 -
-Rule	sol88	1988	only	-	Apr	24	11:58:05s 0:01:55 -
-Rule	sol88	1988	only	-	Apr	25	11:57:55s 0:02:05 -
-Rule	sol88	1988	only	-	Apr	26	11:57:45s 0:02:15 -
-Rule	sol88	1988	only	-	Apr	27	11:57:35s 0:02:25 -
-Rule	sol88	1988	only	-	Apr	28	11:57:30s 0:02:30 -
-Rule	sol88	1988	only	-	Apr	29	11:57:20s 0:02:40 -
-Rule	sol88	1988	only	-	Apr	30	11:57:10s 0:02:50 -
-Rule	sol88	1988	only	-	May	1	11:57:05s 0:02:55 -
-Rule	sol88	1988	only	-	May	2	11:56:55s 0:03:05 -
-Rule	sol88	1988	only	-	May	3	11:56:50s 0:03:10 -
-Rule	sol88	1988	only	-	May	4	11:56:45s 0:03:15 -
-Rule	sol88	1988	only	-	May	5	11:56:40s 0:03:20 -
-Rule	sol88	1988	only	-	May	6	11:56:35s 0:03:25 -
-Rule	sol88	1988	only	-	May	7	11:56:30s 0:03:30 -
-Rule	sol88	1988	only	-	May	8	11:56:25s 0:03:35 -
-Rule	sol88	1988	only	-	May	9	11:56:25s 0:03:35 -
-Rule	sol88	1988	only	-	May	10	11:56:20s 0:03:40 -
-Rule	sol88	1988	only	-	May	11	11:56:20s 0:03:40 -
-Rule	sol88	1988	only	-	May	12	11:56:20s 0:03:40 -
-Rule	sol88	1988	only	-	May	13	11:56:20s 0:03:40 -
-Rule	sol88	1988	only	-	May	14	11:56:20s 0:03:40 -
-Rule	sol88	1988	only	-	May	15	11:56:20s 0:03:40 -
-Rule	sol88	1988	only	-	May	16	11:56:20s 0:03:40 -
-Rule	sol88	1988	only	-	May	17	11:56:20s 0:03:40 -
-Rule	sol88	1988	only	-	May	18	11:56:25s 0:03:35 -
-Rule	sol88	1988	only	-	May	19	11:56:25s 0:03:35 -
-Rule	sol88	1988	only	-	May	20	11:56:30s 0:03:30 -
-Rule	sol88	1988	only	-	May	21	11:56:35s 0:03:25 -
-Rule	sol88	1988	only	-	May	22	11:56:40s 0:03:20 -
-Rule	sol88	1988	only	-	May	23	11:56:45s 0:03:15 -
-Rule	sol88	1988	only	-	May	24	11:56:50s 0:03:10 -
-Rule	sol88	1988	only	-	May	25	11:56:55s 0:03:05 -
-Rule	sol88	1988	only	-	May	26	11:57:00s 0:03:00 -
-Rule	sol88	1988	only	-	May	27	11:57:05s 0:02:55 -
-Rule	sol88	1988	only	-	May	28	11:57:15s 0:02:45 -
-Rule	sol88	1988	only	-	May	29	11:57:20s 0:02:40 -
-Rule	sol88	1988	only	-	May	30	11:57:30s 0:02:30 -
-Rule	sol88	1988	only	-	May	31	11:57:40s 0:02:20 -
-Rule	sol88	1988	only	-	Jun	1	11:57:50s 0:02:10 -
-Rule	sol88	1988	only	-	Jun	2	11:57:55s 0:02:05 -
-Rule	sol88	1988	only	-	Jun	3	11:58:05s 0:01:55 -
-Rule	sol88	1988	only	-	Jun	4	11:58:15s 0:01:45 -
-Rule	sol88	1988	only	-	Jun	5	11:58:30s 0:01:30 -
-Rule	sol88	1988	only	-	Jun	6	11:58:40s 0:01:20 -
-Rule	sol88	1988	only	-	Jun	7	11:58:50s 0:01:10 -
-Rule	sol88	1988	only	-	Jun	8	11:59:00s 0:01:00 -
-Rule	sol88	1988	only	-	Jun	9	11:59:15s 0:00:45 -
-Rule	sol88	1988	only	-	Jun	10	11:59:25s 0:00:35 -
-Rule	sol88	1988	only	-	Jun	11	11:59:35s 0:00:25 -
-Rule	sol88	1988	only	-	Jun	12	11:59:50s 0:00:10 -
-Rule	sol88	1988	only	-	Jun	13	12:00:00s 0:00:00 -
-Rule	sol88	1988	only	-	Jun	14	12:00:15s -0:00:15 -
-Rule	sol88	1988	only	-	Jun	15	12:00:25s -0:00:25 -
-Rule	sol88	1988	only	-	Jun	16	12:00:40s -0:00:40 -
-Rule	sol88	1988	only	-	Jun	17	12:00:55s -0:00:55 -
-Rule	sol88	1988	only	-	Jun	18	12:01:05s -0:01:05 -
-Rule	sol88	1988	only	-	Jun	19	12:01:20s -0:01:20 -
-Rule	sol88	1988	only	-	Jun	20	12:01:30s -0:01:30 -
-Rule	sol88	1988	only	-	Jun	21	12:01:45s -0:01:45 -
-Rule	sol88	1988	only	-	Jun	22	12:02:00s -0:02:00 -
-Rule	sol88	1988	only	-	Jun	23	12:02:10s -0:02:10 -
-Rule	sol88	1988	only	-	Jun	24	12:02:25s -0:02:25 -
-Rule	sol88	1988	only	-	Jun	25	12:02:35s -0:02:35 -
-Rule	sol88	1988	only	-	Jun	26	12:02:50s -0:02:50 -
-Rule	sol88	1988	only	-	Jun	27	12:03:00s -0:03:00 -
-Rule	sol88	1988	only	-	Jun	28	12:03:15s -0:03:15 -
-Rule	sol88	1988	only	-	Jun	29	12:03:25s -0:03:25 -
-Rule	sol88	1988	only	-	Jun	30	12:03:40s -0:03:40 -
-Rule	sol88	1988	only	-	Jul	1	12:03:50s -0:03:50 -
-Rule	sol88	1988	only	-	Jul	2	12:04:00s -0:04:00 -
-Rule	sol88	1988	only	-	Jul	3	12:04:10s -0:04:10 -
-Rule	sol88	1988	only	-	Jul	4	12:04:25s -0:04:25 -
-Rule	sol88	1988	only	-	Jul	5	12:04:35s -0:04:35 -
-Rule	sol88	1988	only	-	Jul	6	12:04:45s -0:04:45 -
-Rule	sol88	1988	only	-	Jul	7	12:04:55s -0:04:55 -
-Rule	sol88	1988	only	-	Jul	8	12:05:05s -0:05:05 -
-Rule	sol88	1988	only	-	Jul	9	12:05:10s -0:05:10 -
-Rule	sol88	1988	only	-	Jul	10	12:05:20s -0:05:20 -
-Rule	sol88	1988	only	-	Jul	11	12:05:30s -0:05:30 -
-Rule	sol88	1988	only	-	Jul	12	12:05:35s -0:05:35 -
-Rule	sol88	1988	only	-	Jul	13	12:05:45s -0:05:45 -
-Rule	sol88	1988	only	-	Jul	14	12:05:50s -0:05:50 -
-Rule	sol88	1988	only	-	Jul	15	12:05:55s -0:05:55 -
-Rule	sol88	1988	only	-	Jul	16	12:06:00s -0:06:00 -
-Rule	sol88	1988	only	-	Jul	17	12:06:05s -0:06:05 -
-Rule	sol88	1988	only	-	Jul	18	12:06:10s -0:06:10 -
-Rule	sol88	1988	only	-	Jul	19	12:06:15s -0:06:15 -
-Rule	sol88	1988	only	-	Jul	20	12:06:20s -0:06:20 -
-Rule	sol88	1988	only	-	Jul	21	12:06:25s -0:06:25 -
-Rule	sol88	1988	only	-	Jul	22	12:06:25s -0:06:25 -
-Rule	sol88	1988	only	-	Jul	23	12:06:25s -0:06:25 -
-Rule	sol88	1988	only	-	Jul	24	12:06:30s -0:06:30 -
-Rule	sol88	1988	only	-	Jul	25	12:06:30s -0:06:30 -
-Rule	sol88	1988	only	-	Jul	26	12:06:30s -0:06:30 -
-Rule	sol88	1988	only	-	Jul	27	12:06:30s -0:06:30 -
-Rule	sol88	1988	only	-	Jul	28	12:06:30s -0:06:30 -
-Rule	sol88	1988	only	-	Jul	29	12:06:25s -0:06:25 -
-Rule	sol88	1988	only	-	Jul	30	12:06:25s -0:06:25 -
-Rule	sol88	1988	only	-	Jul	31	12:06:20s -0:06:20 -
-Rule	sol88	1988	only	-	Aug	1	12:06:15s -0:06:15 -
-Rule	sol88	1988	only	-	Aug	2	12:06:15s -0:06:15 -
-Rule	sol88	1988	only	-	Aug	3	12:06:10s -0:06:10 -
-Rule	sol88	1988	only	-	Aug	4	12:06:05s -0:06:05 -
-Rule	sol88	1988	only	-	Aug	5	12:05:55s -0:05:55 -
-Rule	sol88	1988	only	-	Aug	6	12:05:50s -0:05:50 -
-Rule	sol88	1988	only	-	Aug	7	12:05:45s -0:05:45 -
-Rule	sol88	1988	only	-	Aug	8	12:05:35s -0:05:35 -
-Rule	sol88	1988	only	-	Aug	9	12:05:25s -0:05:25 -
-Rule	sol88	1988	only	-	Aug	10	12:05:20s -0:05:20 -
-Rule	sol88	1988	only	-	Aug	11	12:05:10s -0:05:10 -
-Rule	sol88	1988	only	-	Aug	12	12:05:00s -0:05:00 -
-Rule	sol88	1988	only	-	Aug	13	12:04:50s -0:04:50 -
-Rule	sol88	1988	only	-	Aug	14	12:04:35s -0:04:35 -
-Rule	sol88	1988	only	-	Aug	15	12:04:25s -0:04:25 -
-Rule	sol88	1988	only	-	Aug	16	12:04:15s -0:04:15 -
-Rule	sol88	1988	only	-	Aug	17	12:04:00s -0:04:00 -
-Rule	sol88	1988	only	-	Aug	18	12:03:50s -0:03:50 -
-Rule	sol88	1988	only	-	Aug	19	12:03:35s -0:03:35 -
-Rule	sol88	1988	only	-	Aug	20	12:03:20s -0:03:20 -
-Rule	sol88	1988	only	-	Aug	21	12:03:05s -0:03:05 -
-Rule	sol88	1988	only	-	Aug	22	12:02:50s -0:02:50 -
-Rule	sol88	1988	only	-	Aug	23	12:02:35s -0:02:35 -
-Rule	sol88	1988	only	-	Aug	24	12:02:20s -0:02:20 -
-Rule	sol88	1988	only	-	Aug	25	12:02:00s -0:02:00 -
-Rule	sol88	1988	only	-	Aug	26	12:01:45s -0:01:45 -
-Rule	sol88	1988	only	-	Aug	27	12:01:30s -0:01:30 -
-Rule	sol88	1988	only	-	Aug	28	12:01:10s -0:01:10 -
-Rule	sol88	1988	only	-	Aug	29	12:00:50s -0:00:50 -
-Rule	sol88	1988	only	-	Aug	30	12:00:35s -0:00:35 -
-Rule	sol88	1988	only	-	Aug	31	12:00:15s -0:00:15 -
-Rule	sol88	1988	only	-	Sep	1	11:59:55s 0:00:05 -
-Rule	sol88	1988	only	-	Sep	2	11:59:35s 0:00:25 -
-Rule	sol88	1988	only	-	Sep	3	11:59:20s 0:00:40 -
-Rule	sol88	1988	only	-	Sep	4	11:59:00s 0:01:00 -
-Rule	sol88	1988	only	-	Sep	5	11:58:40s 0:01:20 -
-Rule	sol88	1988	only	-	Sep	6	11:58:20s 0:01:40 -
-Rule	sol88	1988	only	-	Sep	7	11:58:00s 0:02:00 -
-Rule	sol88	1988	only	-	Sep	8	11:57:35s 0:02:25 -
-Rule	sol88	1988	only	-	Sep	9	11:57:15s 0:02:45 -
-Rule	sol88	1988	only	-	Sep	10	11:56:55s 0:03:05 -
-Rule	sol88	1988	only	-	Sep	11	11:56:35s 0:03:25 -
-Rule	sol88	1988	only	-	Sep	12	11:56:15s 0:03:45 -
-Rule	sol88	1988	only	-	Sep	13	11:55:50s 0:04:10 -
-Rule	sol88	1988	only	-	Sep	14	11:55:30s 0:04:30 -
-Rule	sol88	1988	only	-	Sep	15	11:55:10s 0:04:50 -
-Rule	sol88	1988	only	-	Sep	16	11:54:50s 0:05:10 -
-Rule	sol88	1988	only	-	Sep	17	11:54:25s 0:05:35 -
-Rule	sol88	1988	only	-	Sep	18	11:54:05s 0:05:55 -
-Rule	sol88	1988	only	-	Sep	19	11:53:45s 0:06:15 -
-Rule	sol88	1988	only	-	Sep	20	11:53:25s 0:06:35 -
-Rule	sol88	1988	only	-	Sep	21	11:53:00s 0:07:00 -
-Rule	sol88	1988	only	-	Sep	22	11:52:40s 0:07:20 -
-Rule	sol88	1988	only	-	Sep	23	11:52:20s 0:07:40 -
-Rule	sol88	1988	only	-	Sep	24	11:52:00s 0:08:00 -
-Rule	sol88	1988	only	-	Sep	25	11:51:40s 0:08:20 -
-Rule	sol88	1988	only	-	Sep	26	11:51:15s 0:08:45 -
-Rule	sol88	1988	only	-	Sep	27	11:50:55s 0:09:05 -
-Rule	sol88	1988	only	-	Sep	28	11:50:35s 0:09:25 -
-Rule	sol88	1988	only	-	Sep	29	11:50:15s 0:09:45 -
-Rule	sol88	1988	only	-	Sep	30	11:49:55s 0:10:05 -
-Rule	sol88	1988	only	-	Oct	1	11:49:35s 0:10:25 -
-Rule	sol88	1988	only	-	Oct	2	11:49:20s 0:10:40 -
-Rule	sol88	1988	only	-	Oct	3	11:49:00s 0:11:00 -
-Rule	sol88	1988	only	-	Oct	4	11:48:40s 0:11:20 -
-Rule	sol88	1988	only	-	Oct	5	11:48:25s 0:11:35 -
-Rule	sol88	1988	only	-	Oct	6	11:48:05s 0:11:55 -
-Rule	sol88	1988	only	-	Oct	7	11:47:50s 0:12:10 -
-Rule	sol88	1988	only	-	Oct	8	11:47:30s 0:12:30 -
-Rule	sol88	1988	only	-	Oct	9	11:47:15s 0:12:45 -
-Rule	sol88	1988	only	-	Oct	10	11:47:00s 0:13:00 -
-Rule	sol88	1988	only	-	Oct	11	11:46:45s 0:13:15 -
-Rule	sol88	1988	only	-	Oct	12	11:46:30s 0:13:30 -
-Rule	sol88	1988	only	-	Oct	13	11:46:15s 0:13:45 -
-Rule	sol88	1988	only	-	Oct	14	11:46:00s 0:14:00 -
-Rule	sol88	1988	only	-	Oct	15	11:45:45s 0:14:15 -
-Rule	sol88	1988	only	-	Oct	16	11:45:35s 0:14:25 -
-Rule	sol88	1988	only	-	Oct	17	11:45:20s 0:14:40 -
-Rule	sol88	1988	only	-	Oct	18	11:45:10s 0:14:50 -
-Rule	sol88	1988	only	-	Oct	19	11:45:00s 0:15:00 -
-Rule	sol88	1988	only	-	Oct	20	11:44:45s 0:15:15 -
-Rule	sol88	1988	only	-	Oct	21	11:44:40s 0:15:20 -
-Rule	sol88	1988	only	-	Oct	22	11:44:30s 0:15:30 -
-Rule	sol88	1988	only	-	Oct	23	11:44:20s 0:15:40 -
-Rule	sol88	1988	only	-	Oct	24	11:44:10s 0:15:50 -
-Rule	sol88	1988	only	-	Oct	25	11:44:05s 0:15:55 -
-Rule	sol88	1988	only	-	Oct	26	11:44:00s 0:16:00 -
-Rule	sol88	1988	only	-	Oct	27	11:43:55s 0:16:05 -
-Rule	sol88	1988	only	-	Oct	28	11:43:50s 0:16:10 -
-Rule	sol88	1988	only	-	Oct	29	11:43:45s 0:16:15 -
-Rule	sol88	1988	only	-	Oct	30	11:43:40s 0:16:20 -
-Rule	sol88	1988	only	-	Oct	31	11:43:40s 0:16:20 -
-Rule	sol88	1988	only	-	Nov	1	11:43:35s 0:16:25 -
-Rule	sol88	1988	only	-	Nov	2	11:43:35s 0:16:25 -
-Rule	sol88	1988	only	-	Nov	3	11:43:35s 0:16:25 -
-Rule	sol88	1988	only	-	Nov	4	11:43:35s 0:16:25 -
-Rule	sol88	1988	only	-	Nov	5	11:43:40s 0:16:20 -
-Rule	sol88	1988	only	-	Nov	6	11:43:40s 0:16:20 -
-Rule	sol88	1988	only	-	Nov	7	11:43:45s 0:16:15 -
-Rule	sol88	1988	only	-	Nov	8	11:43:45s 0:16:15 -
-Rule	sol88	1988	only	-	Nov	9	11:43:50s 0:16:10 -
-Rule	sol88	1988	only	-	Nov	10	11:44:00s 0:16:00 -
-Rule	sol88	1988	only	-	Nov	11	11:44:05s 0:15:55 -
-Rule	sol88	1988	only	-	Nov	12	11:44:10s 0:15:50 -
-Rule	sol88	1988	only	-	Nov	13	11:44:20s 0:15:40 -
-Rule	sol88	1988	only	-	Nov	14	11:44:30s 0:15:30 -
-Rule	sol88	1988	only	-	Nov	15	11:44:40s 0:15:20 -
-Rule	sol88	1988	only	-	Nov	16	11:44:50s 0:15:10 -
-Rule	sol88	1988	only	-	Nov	17	11:45:00s 0:15:00 -
-Rule	sol88	1988	only	-	Nov	18	11:45:15s 0:14:45 -
-Rule	sol88	1988	only	-	Nov	19	11:45:25s 0:14:35 -
-Rule	sol88	1988	only	-	Nov	20	11:45:40s 0:14:20 -
-Rule	sol88	1988	only	-	Nov	21	11:45:55s 0:14:05 -
-Rule	sol88	1988	only	-	Nov	22	11:46:10s 0:13:50 -
-Rule	sol88	1988	only	-	Nov	23	11:46:30s 0:13:30 -
-Rule	sol88	1988	only	-	Nov	24	11:46:45s 0:13:15 -
-Rule	sol88	1988	only	-	Nov	25	11:47:05s 0:12:55 -
-Rule	sol88	1988	only	-	Nov	26	11:47:20s 0:12:40 -
-Rule	sol88	1988	only	-	Nov	27	11:47:40s 0:12:20 -
-Rule	sol88	1988	only	-	Nov	28	11:48:00s 0:12:00 -
-Rule	sol88	1988	only	-	Nov	29	11:48:25s 0:11:35 -
-Rule	sol88	1988	only	-	Nov	30	11:48:45s 0:11:15 -
-Rule	sol88	1988	only	-	Dec	1	11:49:05s 0:10:55 -
-Rule	sol88	1988	only	-	Dec	2	11:49:30s 0:10:30 -
-Rule	sol88	1988	only	-	Dec	3	11:49:55s 0:10:05 -
-Rule	sol88	1988	only	-	Dec	4	11:50:15s 0:09:45 -
-Rule	sol88	1988	only	-	Dec	5	11:50:40s 0:09:20 -
-Rule	sol88	1988	only	-	Dec	6	11:51:05s 0:08:55 -
-Rule	sol88	1988	only	-	Dec	7	11:51:35s 0:08:25 -
-Rule	sol88	1988	only	-	Dec	8	11:52:00s 0:08:00 -
-Rule	sol88	1988	only	-	Dec	9	11:52:25s 0:07:35 -
-Rule	sol88	1988	only	-	Dec	10	11:52:55s 0:07:05 -
-Rule	sol88	1988	only	-	Dec	11	11:53:20s 0:06:40 -
-Rule	sol88	1988	only	-	Dec	12	11:53:50s 0:06:10 -
-Rule	sol88	1988	only	-	Dec	13	11:54:15s 0:05:45 -
-Rule	sol88	1988	only	-	Dec	14	11:54:45s 0:05:15 -
-Rule	sol88	1988	only	-	Dec	15	11:55:15s 0:04:45 -
-Rule	sol88	1988	only	-	Dec	16	11:55:45s 0:04:15 -
-Rule	sol88	1988	only	-	Dec	17	11:56:15s 0:03:45 -
-Rule	sol88	1988	only	-	Dec	18	11:56:40s 0:03:20 -
-Rule	sol88	1988	only	-	Dec	19	11:57:10s 0:02:50 -
-Rule	sol88	1988	only	-	Dec	20	11:57:40s 0:02:20 -
-Rule	sol88	1988	only	-	Dec	21	11:58:10s 0:01:50 -
-Rule	sol88	1988	only	-	Dec	22	11:58:40s 0:01:20 -
-Rule	sol88	1988	only	-	Dec	23	11:59:10s 0:00:50 -
-Rule	sol88	1988	only	-	Dec	24	11:59:40s 0:00:20 -
-Rule	sol88	1988	only	-	Dec	25	12:00:10s -0:00:10 -
-Rule	sol88	1988	only	-	Dec	26	12:00:40s -0:00:40 -
-Rule	sol88	1988	only	-	Dec	27	12:01:10s -0:01:10 -
-Rule	sol88	1988	only	-	Dec	28	12:01:40s -0:01:40 -
-Rule	sol88	1988	only	-	Dec	29	12:02:10s -0:02:10 -
-Rule	sol88	1988	only	-	Dec	30	12:02:35s -0:02:35 -
-Rule	sol88	1988	only	-	Dec	31	12:03:05s -0:03:05 -
-
-# Riyadh is at about 46 degrees 46 minutes East:  3 hrs, 7 mins, 4 secs
-# Before and after 1988, we'll operate on local mean solar time.
-
-# Zone	NAME		GMTOFF	RULES/SAVE	FORMAT	[UNTIL]
-Zone	Asia/Riyadh88	3:07:04	-		??	1988
-			3:07:04	sol88		??	1989
-			3:07:04	-		??
-# For backward compatibility...
-Link	Asia/Riyadh88	Mideast/Riyadh88
diff --git a/JodaTime/src/java/org/joda/time/tz/src/solar89 b/JodaTime/src/java/org/joda/time/tz/src/solar89
deleted file mode 100644
index 34d79a5c3..000000000
--- a/JodaTime/src/java/org/joda/time/tz/src/solar89
+++ /dev/null
@@ -1,393 +0,0 @@
-# @(#)solar89	7.4
-
-# Apparent noon times below are for Riyadh; they're a bit off for other places.
-# Times were computed using a formula provided by the U. S. Naval Observatory:
-#	eqt = -105.8 * sin(l) + 596.2 * sin(2 * l) + 4.4 * sin(3 * l)
-#		-12.7 * sin(4 * l) - 429.0 * cos(l) - 2.1 * cos (2 * l)
-#		+ 19.3 * cos(3 * l);
-# where l is the "mean longitude of the Sun" given by
-#	l = 279.642 degrees + 0.985647 * d
-# and d is the interval in days from January 0, 0 hours Universal Time
-# (equaling the day of the year plus the fraction of a day from zero hours).
-# The accuracy of the formula is plus or minus three seconds.
-#
-# Rounding to the nearest five seconds results in fewer than
-# 256 different "time types"--a limit that's faced because time types are
-# stored on disk as unsigned chars.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	sol89	1989	only	-	Jan	1	12:03:35s -0:03:35 -
-Rule	sol89	1989	only	-	Jan	2	12:04:05s -0:04:05 -
-Rule	sol89	1989	only	-	Jan	3	12:04:30s -0:04:30 -
-Rule	sol89	1989	only	-	Jan	4	12:05:00s -0:05:00 -
-Rule	sol89	1989	only	-	Jan	5	12:05:25s -0:05:25 -
-Rule	sol89	1989	only	-	Jan	6	12:05:50s -0:05:50 -
-Rule	sol89	1989	only	-	Jan	7	12:06:15s -0:06:15 -
-Rule	sol89	1989	only	-	Jan	8	12:06:45s -0:06:45 -
-Rule	sol89	1989	only	-	Jan	9	12:07:10s -0:07:10 -
-Rule	sol89	1989	only	-	Jan	10	12:07:35s -0:07:35 -
-Rule	sol89	1989	only	-	Jan	11	12:07:55s -0:07:55 -
-Rule	sol89	1989	only	-	Jan	12	12:08:20s -0:08:20 -
-Rule	sol89	1989	only	-	Jan	13	12:08:45s -0:08:45 -
-Rule	sol89	1989	only	-	Jan	14	12:09:05s -0:09:05 -
-Rule	sol89	1989	only	-	Jan	15	12:09:25s -0:09:25 -
-Rule	sol89	1989	only	-	Jan	16	12:09:45s -0:09:45 -
-Rule	sol89	1989	only	-	Jan	17	12:10:05s -0:10:05 -
-Rule	sol89	1989	only	-	Jan	18	12:10:25s -0:10:25 -
-Rule	sol89	1989	only	-	Jan	19	12:10:45s -0:10:45 -
-Rule	sol89	1989	only	-	Jan	20	12:11:05s -0:11:05 -
-Rule	sol89	1989	only	-	Jan	21	12:11:20s -0:11:20 -
-Rule	sol89	1989	only	-	Jan	22	12:11:35s -0:11:35 -
-Rule	sol89	1989	only	-	Jan	23	12:11:55s -0:11:55 -
-Rule	sol89	1989	only	-	Jan	24	12:12:10s -0:12:10 -
-Rule	sol89	1989	only	-	Jan	25	12:12:20s -0:12:20 -
-Rule	sol89	1989	only	-	Jan	26	12:12:35s -0:12:35 -
-Rule	sol89	1989	only	-	Jan	27	12:12:50s -0:12:50 -
-Rule	sol89	1989	only	-	Jan	28	12:13:00s -0:13:00 -
-Rule	sol89	1989	only	-	Jan	29	12:13:10s -0:13:10 -
-Rule	sol89	1989	only	-	Jan	30	12:13:20s -0:13:20 -
-Rule	sol89	1989	only	-	Jan	31	12:13:30s -0:13:30 -
-Rule	sol89	1989	only	-	Feb	1	12:13:40s -0:13:40 -
-Rule	sol89	1989	only	-	Feb	2	12:13:45s -0:13:45 -
-Rule	sol89	1989	only	-	Feb	3	12:13:55s -0:13:55 -
-Rule	sol89	1989	only	-	Feb	4	12:14:00s -0:14:00 -
-Rule	sol89	1989	only	-	Feb	5	12:14:05s -0:14:05 -
-Rule	sol89	1989	only	-	Feb	6	12:14:10s -0:14:10 -
-Rule	sol89	1989	only	-	Feb	7	12:14:10s -0:14:10 -
-Rule	sol89	1989	only	-	Feb	8	12:14:15s -0:14:15 -
-Rule	sol89	1989	only	-	Feb	9	12:14:15s -0:14:15 -
-Rule	sol89	1989	only	-	Feb	10	12:14:20s -0:14:20 -
-Rule	sol89	1989	only	-	Feb	11	12:14:20s -0:14:20 -
-Rule	sol89	1989	only	-	Feb	12	12:14:20s -0:14:20 -
-Rule	sol89	1989	only	-	Feb	13	12:14:15s -0:14:15 -
-Rule	sol89	1989	only	-	Feb	14	12:14:15s -0:14:15 -
-Rule	sol89	1989	only	-	Feb	15	12:14:10s -0:14:10 -
-Rule	sol89	1989	only	-	Feb	16	12:14:10s -0:14:10 -
-Rule	sol89	1989	only	-	Feb	17	12:14:05s -0:14:05 -
-Rule	sol89	1989	only	-	Feb	18	12:14:00s -0:14:00 -
-Rule	sol89	1989	only	-	Feb	19	12:13:55s -0:13:55 -
-Rule	sol89	1989	only	-	Feb	20	12:13:50s -0:13:50 -
-Rule	sol89	1989	only	-	Feb	21	12:13:40s -0:13:40 -
-Rule	sol89	1989	only	-	Feb	22	12:13:35s -0:13:35 -
-Rule	sol89	1989	only	-	Feb	23	12:13:25s -0:13:25 -
-Rule	sol89	1989	only	-	Feb	24	12:13:15s -0:13:15 -
-Rule	sol89	1989	only	-	Feb	25	12:13:05s -0:13:05 -
-Rule	sol89	1989	only	-	Feb	26	12:12:55s -0:12:55 -
-Rule	sol89	1989	only	-	Feb	27	12:12:45s -0:12:45 -
-Rule	sol89	1989	only	-	Feb	28	12:12:35s -0:12:35 -
-Rule	sol89	1989	only	-	Mar	1	12:12:25s -0:12:25 -
-Rule	sol89	1989	only	-	Mar	2	12:12:10s -0:12:10 -
-Rule	sol89	1989	only	-	Mar	3	12:12:00s -0:12:00 -
-Rule	sol89	1989	only	-	Mar	4	12:11:45s -0:11:45 -
-Rule	sol89	1989	only	-	Mar	5	12:11:35s -0:11:35 -
-Rule	sol89	1989	only	-	Mar	6	12:11:20s -0:11:20 -
-Rule	sol89	1989	only	-	Mar	7	12:11:05s -0:11:05 -
-Rule	sol89	1989	only	-	Mar	8	12:10:50s -0:10:50 -
-Rule	sol89	1989	only	-	Mar	9	12:10:35s -0:10:35 -
-Rule	sol89	1989	only	-	Mar	10	12:10:20s -0:10:20 -
-Rule	sol89	1989	only	-	Mar	11	12:10:05s -0:10:05 -
-Rule	sol89	1989	only	-	Mar	12	12:09:50s -0:09:50 -
-Rule	sol89	1989	only	-	Mar	13	12:09:30s -0:09:30 -
-Rule	sol89	1989	only	-	Mar	14	12:09:15s -0:09:15 -
-Rule	sol89	1989	only	-	Mar	15	12:09:00s -0:09:00 -
-Rule	sol89	1989	only	-	Mar	16	12:08:40s -0:08:40 -
-Rule	sol89	1989	only	-	Mar	17	12:08:25s -0:08:25 -
-Rule	sol89	1989	only	-	Mar	18	12:08:05s -0:08:05 -
-Rule	sol89	1989	only	-	Mar	19	12:07:50s -0:07:50 -
-Rule	sol89	1989	only	-	Mar	20	12:07:30s -0:07:30 -
-Rule	sol89	1989	only	-	Mar	21	12:07:15s -0:07:15 -
-Rule	sol89	1989	only	-	Mar	22	12:06:55s -0:06:55 -
-Rule	sol89	1989	only	-	Mar	23	12:06:35s -0:06:35 -
-Rule	sol89	1989	only	-	Mar	24	12:06:20s -0:06:20 -
-Rule	sol89	1989	only	-	Mar	25	12:06:00s -0:06:00 -
-Rule	sol89	1989	only	-	Mar	26	12:05:40s -0:05:40 -
-Rule	sol89	1989	only	-	Mar	27	12:05:25s -0:05:25 -
-Rule	sol89	1989	only	-	Mar	28	12:05:05s -0:05:05 -
-Rule	sol89	1989	only	-	Mar	29	12:04:50s -0:04:50 -
-Rule	sol89	1989	only	-	Mar	30	12:04:30s -0:04:30 -
-Rule	sol89	1989	only	-	Mar	31	12:04:10s -0:04:10 -
-Rule	sol89	1989	only	-	Apr	1	12:03:55s -0:03:55 -
-Rule	sol89	1989	only	-	Apr	2	12:03:35s -0:03:35 -
-Rule	sol89	1989	only	-	Apr	3	12:03:20s -0:03:20 -
-Rule	sol89	1989	only	-	Apr	4	12:03:00s -0:03:00 -
-Rule	sol89	1989	only	-	Apr	5	12:02:45s -0:02:45 -
-Rule	sol89	1989	only	-	Apr	6	12:02:25s -0:02:25 -
-Rule	sol89	1989	only	-	Apr	7	12:02:10s -0:02:10 -
-Rule	sol89	1989	only	-	Apr	8	12:01:50s -0:01:50 -
-Rule	sol89	1989	only	-	Apr	9	12:01:35s -0:01:35 -
-Rule	sol89	1989	only	-	Apr	10	12:01:20s -0:01:20 -
-Rule	sol89	1989	only	-	Apr	11	12:01:05s -0:01:05 -
-Rule	sol89	1989	only	-	Apr	12	12:00:50s -0:00:50 -
-Rule	sol89	1989	only	-	Apr	13	12:00:35s -0:00:35 -
-Rule	sol89	1989	only	-	Apr	14	12:00:20s -0:00:20 -
-Rule	sol89	1989	only	-	Apr	15	12:00:05s -0:00:05 -
-Rule	sol89	1989	only	-	Apr	16	11:59:50s 0:00:10 -
-Rule	sol89	1989	only	-	Apr	17	11:59:35s 0:00:25 -
-Rule	sol89	1989	only	-	Apr	18	11:59:20s 0:00:40 -
-Rule	sol89	1989	only	-	Apr	19	11:59:10s 0:00:50 -
-Rule	sol89	1989	only	-	Apr	20	11:58:55s 0:01:05 -
-Rule	sol89	1989	only	-	Apr	21	11:58:45s 0:01:15 -
-Rule	sol89	1989	only	-	Apr	22	11:58:30s 0:01:30 -
-Rule	sol89	1989	only	-	Apr	23	11:58:20s 0:01:40 -
-Rule	sol89	1989	only	-	Apr	24	11:58:10s 0:01:50 -
-Rule	sol89	1989	only	-	Apr	25	11:58:00s 0:02:00 -
-Rule	sol89	1989	only	-	Apr	26	11:57:50s 0:02:10 -
-Rule	sol89	1989	only	-	Apr	27	11:57:40s 0:02:20 -
-Rule	sol89	1989	only	-	Apr	28	11:57:30s 0:02:30 -
-Rule	sol89	1989	only	-	Apr	29	11:57:20s 0:02:40 -
-Rule	sol89	1989	only	-	Apr	30	11:57:15s 0:02:45 -
-Rule	sol89	1989	only	-	May	1	11:57:05s 0:02:55 -
-Rule	sol89	1989	only	-	May	2	11:57:00s 0:03:00 -
-Rule	sol89	1989	only	-	May	3	11:56:50s 0:03:10 -
-Rule	sol89	1989	only	-	May	4	11:56:45s 0:03:15 -
-Rule	sol89	1989	only	-	May	5	11:56:40s 0:03:20 -
-Rule	sol89	1989	only	-	May	6	11:56:35s 0:03:25 -
-Rule	sol89	1989	only	-	May	7	11:56:30s 0:03:30 -
-Rule	sol89	1989	only	-	May	8	11:56:30s 0:03:30 -
-Rule	sol89	1989	only	-	May	9	11:56:25s 0:03:35 -
-Rule	sol89	1989	only	-	May	10	11:56:25s 0:03:35 -
-Rule	sol89	1989	only	-	May	11	11:56:20s 0:03:40 -
-Rule	sol89	1989	only	-	May	12	11:56:20s 0:03:40 -
-Rule	sol89	1989	only	-	May	13	11:56:20s 0:03:40 -
-Rule	sol89	1989	only	-	May	14	11:56:20s 0:03:40 -
-Rule	sol89	1989	only	-	May	15	11:56:20s 0:03:40 -
-Rule	sol89	1989	only	-	May	16	11:56:20s 0:03:40 -
-Rule	sol89	1989	only	-	May	17	11:56:20s 0:03:40 -
-Rule	sol89	1989	only	-	May	18	11:56:25s 0:03:35 -
-Rule	sol89	1989	only	-	May	19	11:56:25s 0:03:35 -
-Rule	sol89	1989	only	-	May	20	11:56:30s 0:03:30 -
-Rule	sol89	1989	only	-	May	21	11:56:35s 0:03:25 -
-Rule	sol89	1989	only	-	May	22	11:56:35s 0:03:25 -
-Rule	sol89	1989	only	-	May	23	11:56:40s 0:03:20 -
-Rule	sol89	1989	only	-	May	24	11:56:45s 0:03:15 -
-Rule	sol89	1989	only	-	May	25	11:56:55s 0:03:05 -
-Rule	sol89	1989	only	-	May	26	11:57:00s 0:03:00 -
-Rule	sol89	1989	only	-	May	27	11:57:05s 0:02:55 -
-Rule	sol89	1989	only	-	May	28	11:57:15s 0:02:45 -
-Rule	sol89	1989	only	-	May	29	11:57:20s 0:02:40 -
-Rule	sol89	1989	only	-	May	30	11:57:30s 0:02:30 -
-Rule	sol89	1989	only	-	May	31	11:57:35s 0:02:25 -
-Rule	sol89	1989	only	-	Jun	1	11:57:45s 0:02:15 -
-Rule	sol89	1989	only	-	Jun	2	11:57:55s 0:02:05 -
-Rule	sol89	1989	only	-	Jun	3	11:58:05s 0:01:55 -
-Rule	sol89	1989	only	-	Jun	4	11:58:15s 0:01:45 -
-Rule	sol89	1989	only	-	Jun	5	11:58:25s 0:01:35 -
-Rule	sol89	1989	only	-	Jun	6	11:58:35s 0:01:25 -
-Rule	sol89	1989	only	-	Jun	7	11:58:45s 0:01:15 -
-Rule	sol89	1989	only	-	Jun	8	11:59:00s 0:01:00 -
-Rule	sol89	1989	only	-	Jun	9	11:59:10s 0:00:50 -
-Rule	sol89	1989	only	-	Jun	10	11:59:20s 0:00:40 -
-Rule	sol89	1989	only	-	Jun	11	11:59:35s 0:00:25 -
-Rule	sol89	1989	only	-	Jun	12	11:59:45s 0:00:15 -
-Rule	sol89	1989	only	-	Jun	13	12:00:00s 0:00:00 -
-Rule	sol89	1989	only	-	Jun	14	12:00:10s -0:00:10 -
-Rule	sol89	1989	only	-	Jun	15	12:00:25s -0:00:25 -
-Rule	sol89	1989	only	-	Jun	16	12:00:35s -0:00:35 -
-Rule	sol89	1989	only	-	Jun	17	12:00:50s -0:00:50 -
-Rule	sol89	1989	only	-	Jun	18	12:01:05s -0:01:05 -
-Rule	sol89	1989	only	-	Jun	19	12:01:15s -0:01:15 -
-Rule	sol89	1989	only	-	Jun	20	12:01:30s -0:01:30 -
-Rule	sol89	1989	only	-	Jun	21	12:01:40s -0:01:40 -
-Rule	sol89	1989	only	-	Jun	22	12:01:55s -0:01:55 -
-Rule	sol89	1989	only	-	Jun	23	12:02:10s -0:02:10 -
-Rule	sol89	1989	only	-	Jun	24	12:02:20s -0:02:20 -
-Rule	sol89	1989	only	-	Jun	25	12:02:35s -0:02:35 -
-Rule	sol89	1989	only	-	Jun	26	12:02:45s -0:02:45 -
-Rule	sol89	1989	only	-	Jun	27	12:03:00s -0:03:00 -
-Rule	sol89	1989	only	-	Jun	28	12:03:10s -0:03:10 -
-Rule	sol89	1989	only	-	Jun	29	12:03:25s -0:03:25 -
-Rule	sol89	1989	only	-	Jun	30	12:03:35s -0:03:35 -
-Rule	sol89	1989	only	-	Jul	1	12:03:45s -0:03:45 -
-Rule	sol89	1989	only	-	Jul	2	12:04:00s -0:04:00 -
-Rule	sol89	1989	only	-	Jul	3	12:04:10s -0:04:10 -
-Rule	sol89	1989	only	-	Jul	4	12:04:20s -0:04:20 -
-Rule	sol89	1989	only	-	Jul	5	12:04:30s -0:04:30 -
-Rule	sol89	1989	only	-	Jul	6	12:04:40s -0:04:40 -
-Rule	sol89	1989	only	-	Jul	7	12:04:50s -0:04:50 -
-Rule	sol89	1989	only	-	Jul	8	12:05:00s -0:05:00 -
-Rule	sol89	1989	only	-	Jul	9	12:05:10s -0:05:10 -
-Rule	sol89	1989	only	-	Jul	10	12:05:20s -0:05:20 -
-Rule	sol89	1989	only	-	Jul	11	12:05:25s -0:05:25 -
-Rule	sol89	1989	only	-	Jul	12	12:05:35s -0:05:35 -
-Rule	sol89	1989	only	-	Jul	13	12:05:40s -0:05:40 -
-Rule	sol89	1989	only	-	Jul	14	12:05:50s -0:05:50 -
-Rule	sol89	1989	only	-	Jul	15	12:05:55s -0:05:55 -
-Rule	sol89	1989	only	-	Jul	16	12:06:00s -0:06:00 -
-Rule	sol89	1989	only	-	Jul	17	12:06:05s -0:06:05 -
-Rule	sol89	1989	only	-	Jul	18	12:06:10s -0:06:10 -
-Rule	sol89	1989	only	-	Jul	19	12:06:15s -0:06:15 -
-Rule	sol89	1989	only	-	Jul	20	12:06:20s -0:06:20 -
-Rule	sol89	1989	only	-	Jul	21	12:06:20s -0:06:20 -
-Rule	sol89	1989	only	-	Jul	22	12:06:25s -0:06:25 -
-Rule	sol89	1989	only	-	Jul	23	12:06:25s -0:06:25 -
-Rule	sol89	1989	only	-	Jul	24	12:06:30s -0:06:30 -
-Rule	sol89	1989	only	-	Jul	25	12:06:30s -0:06:30 -
-Rule	sol89	1989	only	-	Jul	26	12:06:30s -0:06:30 -
-Rule	sol89	1989	only	-	Jul	27	12:06:30s -0:06:30 -
-Rule	sol89	1989	only	-	Jul	28	12:06:30s -0:06:30 -
-Rule	sol89	1989	only	-	Jul	29	12:06:25s -0:06:25 -
-Rule	sol89	1989	only	-	Jul	30	12:06:25s -0:06:25 -
-Rule	sol89	1989	only	-	Jul	31	12:06:20s -0:06:20 -
-Rule	sol89	1989	only	-	Aug	1	12:06:20s -0:06:20 -
-Rule	sol89	1989	only	-	Aug	2	12:06:15s -0:06:15 -
-Rule	sol89	1989	only	-	Aug	3	12:06:10s -0:06:10 -
-Rule	sol89	1989	only	-	Aug	4	12:06:05s -0:06:05 -
-Rule	sol89	1989	only	-	Aug	5	12:06:00s -0:06:00 -
-Rule	sol89	1989	only	-	Aug	6	12:05:50s -0:05:50 -
-Rule	sol89	1989	only	-	Aug	7	12:05:45s -0:05:45 -
-Rule	sol89	1989	only	-	Aug	8	12:05:35s -0:05:35 -
-Rule	sol89	1989	only	-	Aug	9	12:05:30s -0:05:30 -
-Rule	sol89	1989	only	-	Aug	10	12:05:20s -0:05:20 -
-Rule	sol89	1989	only	-	Aug	11	12:05:10s -0:05:10 -
-Rule	sol89	1989	only	-	Aug	12	12:05:00s -0:05:00 -
-Rule	sol89	1989	only	-	Aug	13	12:04:50s -0:04:50 -
-Rule	sol89	1989	only	-	Aug	14	12:04:40s -0:04:40 -
-Rule	sol89	1989	only	-	Aug	15	12:04:30s -0:04:30 -
-Rule	sol89	1989	only	-	Aug	16	12:04:15s -0:04:15 -
-Rule	sol89	1989	only	-	Aug	17	12:04:05s -0:04:05 -
-Rule	sol89	1989	only	-	Aug	18	12:03:50s -0:03:50 -
-Rule	sol89	1989	only	-	Aug	19	12:03:35s -0:03:35 -
-Rule	sol89	1989	only	-	Aug	20	12:03:25s -0:03:25 -
-Rule	sol89	1989	only	-	Aug	21	12:03:10s -0:03:10 -
-Rule	sol89	1989	only	-	Aug	22	12:02:55s -0:02:55 -
-Rule	sol89	1989	only	-	Aug	23	12:02:40s -0:02:40 -
-Rule	sol89	1989	only	-	Aug	24	12:02:20s -0:02:20 -
-Rule	sol89	1989	only	-	Aug	25	12:02:05s -0:02:05 -
-Rule	sol89	1989	only	-	Aug	26	12:01:50s -0:01:50 -
-Rule	sol89	1989	only	-	Aug	27	12:01:30s -0:01:30 -
-Rule	sol89	1989	only	-	Aug	28	12:01:15s -0:01:15 -
-Rule	sol89	1989	only	-	Aug	29	12:00:55s -0:00:55 -
-Rule	sol89	1989	only	-	Aug	30	12:00:40s -0:00:40 -
-Rule	sol89	1989	only	-	Aug	31	12:00:20s -0:00:20 -
-Rule	sol89	1989	only	-	Sep	1	12:00:00s 0:00:00 -
-Rule	sol89	1989	only	-	Sep	2	11:59:45s 0:00:15 -
-Rule	sol89	1989	only	-	Sep	3	11:59:25s 0:00:35 -
-Rule	sol89	1989	only	-	Sep	4	11:59:05s 0:00:55 -
-Rule	sol89	1989	only	-	Sep	5	11:58:45s 0:01:15 -
-Rule	sol89	1989	only	-	Sep	6	11:58:25s 0:01:35 -
-Rule	sol89	1989	only	-	Sep	7	11:58:05s 0:01:55 -
-Rule	sol89	1989	only	-	Sep	8	11:57:45s 0:02:15 -
-Rule	sol89	1989	only	-	Sep	9	11:57:20s 0:02:40 -
-Rule	sol89	1989	only	-	Sep	10	11:57:00s 0:03:00 -
-Rule	sol89	1989	only	-	Sep	11	11:56:40s 0:03:20 -
-Rule	sol89	1989	only	-	Sep	12	11:56:20s 0:03:40 -
-Rule	sol89	1989	only	-	Sep	13	11:56:00s 0:04:00 -
-Rule	sol89	1989	only	-	Sep	14	11:55:35s 0:04:25 -
-Rule	sol89	1989	only	-	Sep	15	11:55:15s 0:04:45 -
-Rule	sol89	1989	only	-	Sep	16	11:54:55s 0:05:05 -
-Rule	sol89	1989	only	-	Sep	17	11:54:35s 0:05:25 -
-Rule	sol89	1989	only	-	Sep	18	11:54:10s 0:05:50 -
-Rule	sol89	1989	only	-	Sep	19	11:53:50s 0:06:10 -
-Rule	sol89	1989	only	-	Sep	20	11:53:30s 0:06:30 -
-Rule	sol89	1989	only	-	Sep	21	11:53:10s 0:06:50 -
-Rule	sol89	1989	only	-	Sep	22	11:52:45s 0:07:15 -
-Rule	sol89	1989	only	-	Sep	23	11:52:25s 0:07:35 -
-Rule	sol89	1989	only	-	Sep	24	11:52:05s 0:07:55 -
-Rule	sol89	1989	only	-	Sep	25	11:51:45s 0:08:15 -
-Rule	sol89	1989	only	-	Sep	26	11:51:25s 0:08:35 -
-Rule	sol89	1989	only	-	Sep	27	11:51:05s 0:08:55 -
-Rule	sol89	1989	only	-	Sep	28	11:50:40s 0:09:20 -
-Rule	sol89	1989	only	-	Sep	29	11:50:20s 0:09:40 -
-Rule	sol89	1989	only	-	Sep	30	11:50:00s 0:10:00 -
-Rule	sol89	1989	only	-	Oct	1	11:49:45s 0:10:15 -
-Rule	sol89	1989	only	-	Oct	2	11:49:25s 0:10:35 -
-Rule	sol89	1989	only	-	Oct	3	11:49:05s 0:10:55 -
-Rule	sol89	1989	only	-	Oct	4	11:48:45s 0:11:15 -
-Rule	sol89	1989	only	-	Oct	5	11:48:30s 0:11:30 -
-Rule	sol89	1989	only	-	Oct	6	11:48:10s 0:11:50 -
-Rule	sol89	1989	only	-	Oct	7	11:47:50s 0:12:10 -
-Rule	sol89	1989	only	-	Oct	8	11:47:35s 0:12:25 -
-Rule	sol89	1989	only	-	Oct	9	11:47:20s 0:12:40 -
-Rule	sol89	1989	only	-	Oct	10	11:47:00s 0:13:00 -
-Rule	sol89	1989	only	-	Oct	11	11:46:45s 0:13:15 -
-Rule	sol89	1989	only	-	Oct	12	11:46:30s 0:13:30 -
-Rule	sol89	1989	only	-	Oct	13	11:46:15s 0:13:45 -
-Rule	sol89	1989	only	-	Oct	14	11:46:00s 0:14:00 -
-Rule	sol89	1989	only	-	Oct	15	11:45:50s 0:14:10 -
-Rule	sol89	1989	only	-	Oct	16	11:45:35s 0:14:25 -
-Rule	sol89	1989	only	-	Oct	17	11:45:20s 0:14:40 -
-Rule	sol89	1989	only	-	Oct	18	11:45:10s 0:14:50 -
-Rule	sol89	1989	only	-	Oct	19	11:45:00s 0:15:00 -
-Rule	sol89	1989	only	-	Oct	20	11:44:50s 0:15:10 -
-Rule	sol89	1989	only	-	Oct	21	11:44:40s 0:15:20 -
-Rule	sol89	1989	only	-	Oct	22	11:44:30s 0:15:30 -
-Rule	sol89	1989	only	-	Oct	23	11:44:20s 0:15:40 -
-Rule	sol89	1989	only	-	Oct	24	11:44:10s 0:15:50 -
-Rule	sol89	1989	only	-	Oct	25	11:44:05s 0:15:55 -
-Rule	sol89	1989	only	-	Oct	26	11:44:00s 0:16:00 -
-Rule	sol89	1989	only	-	Oct	27	11:43:50s 0:16:10 -
-Rule	sol89	1989	only	-	Oct	28	11:43:45s 0:16:15 -
-Rule	sol89	1989	only	-	Oct	29	11:43:40s 0:16:20 -
-Rule	sol89	1989	only	-	Oct	30	11:43:40s 0:16:20 -
-Rule	sol89	1989	only	-	Oct	31	11:43:35s 0:16:25 -
-Rule	sol89	1989	only	-	Nov	1	11:43:35s 0:16:25 -
-Rule	sol89	1989	only	-	Nov	2	11:43:35s 0:16:25 -
-Rule	sol89	1989	only	-	Nov	3	11:43:30s 0:16:30 -
-Rule	sol89	1989	only	-	Nov	4	11:43:35s 0:16:25 -
-Rule	sol89	1989	only	-	Nov	5	11:43:35s 0:16:25 -
-Rule	sol89	1989	only	-	Nov	6	11:43:35s 0:16:25 -
-Rule	sol89	1989	only	-	Nov	7	11:43:40s 0:16:20 -
-Rule	sol89	1989	only	-	Nov	8	11:43:45s 0:16:15 -
-Rule	sol89	1989	only	-	Nov	9	11:43:50s 0:16:10 -
-Rule	sol89	1989	only	-	Nov	10	11:43:55s 0:16:05 -
-Rule	sol89	1989	only	-	Nov	11	11:44:00s 0:16:00 -
-Rule	sol89	1989	only	-	Nov	12	11:44:05s 0:15:55 -
-Rule	sol89	1989	only	-	Nov	13	11:44:15s 0:15:45 -
-Rule	sol89	1989	only	-	Nov	14	11:44:25s 0:15:35 -
-Rule	sol89	1989	only	-	Nov	15	11:44:35s 0:15:25 -
-Rule	sol89	1989	only	-	Nov	16	11:44:45s 0:15:15 -
-Rule	sol89	1989	only	-	Nov	17	11:44:55s 0:15:05 -
-Rule	sol89	1989	only	-	Nov	18	11:45:10s 0:14:50 -
-Rule	sol89	1989	only	-	Nov	19	11:45:20s 0:14:40 -
-Rule	sol89	1989	only	-	Nov	20	11:45:35s 0:14:25 -
-Rule	sol89	1989	only	-	Nov	21	11:45:50s 0:14:10 -
-Rule	sol89	1989	only	-	Nov	22	11:46:05s 0:13:55 -
-Rule	sol89	1989	only	-	Nov	23	11:46:25s 0:13:35 -
-Rule	sol89	1989	only	-	Nov	24	11:46:40s 0:13:20 -
-Rule	sol89	1989	only	-	Nov	25	11:47:00s 0:13:00 -
-Rule	sol89	1989	only	-	Nov	26	11:47:20s 0:12:40 -
-Rule	sol89	1989	only	-	Nov	27	11:47:35s 0:12:25 -
-Rule	sol89	1989	only	-	Nov	28	11:47:55s 0:12:05 -
-Rule	sol89	1989	only	-	Nov	29	11:48:20s 0:11:40 -
-Rule	sol89	1989	only	-	Nov	30	11:48:40s 0:11:20 -
-Rule	sol89	1989	only	-	Dec	1	11:49:00s 0:11:00 -
-Rule	sol89	1989	only	-	Dec	2	11:49:25s 0:10:35 -
-Rule	sol89	1989	only	-	Dec	3	11:49:50s 0:10:10 -
-Rule	sol89	1989	only	-	Dec	4	11:50:15s 0:09:45 -
-Rule	sol89	1989	only	-	Dec	5	11:50:35s 0:09:25 -
-Rule	sol89	1989	only	-	Dec	6	11:51:00s 0:09:00 -
-Rule	sol89	1989	only	-	Dec	7	11:51:30s 0:08:30 -
-Rule	sol89	1989	only	-	Dec	8	11:51:55s 0:08:05 -
-Rule	sol89	1989	only	-	Dec	9	11:52:20s 0:07:40 -
-Rule	sol89	1989	only	-	Dec	10	11:52:50s 0:07:10 -
-Rule	sol89	1989	only	-	Dec	11	11:53:15s 0:06:45 -
-Rule	sol89	1989	only	-	Dec	12	11:53:45s 0:06:15 -
-Rule	sol89	1989	only	-	Dec	13	11:54:10s 0:05:50 -
-Rule	sol89	1989	only	-	Dec	14	11:54:40s 0:05:20 -
-Rule	sol89	1989	only	-	Dec	15	11:55:10s 0:04:50 -
-Rule	sol89	1989	only	-	Dec	16	11:55:40s 0:04:20 -
-Rule	sol89	1989	only	-	Dec	17	11:56:05s 0:03:55 -
-Rule	sol89	1989	only	-	Dec	18	11:56:35s 0:03:25 -
-Rule	sol89	1989	only	-	Dec	19	11:57:05s 0:02:55 -
-Rule	sol89	1989	only	-	Dec	20	11:57:35s 0:02:25 -
-Rule	sol89	1989	only	-	Dec	21	11:58:05s 0:01:55 -
-Rule	sol89	1989	only	-	Dec	22	11:58:35s 0:01:25 -
-Rule	sol89	1989	only	-	Dec	23	11:59:05s 0:00:55 -
-Rule	sol89	1989	only	-	Dec	24	11:59:35s 0:00:25 -
-Rule	sol89	1989	only	-	Dec	25	12:00:05s -0:00:05 -
-Rule	sol89	1989	only	-	Dec	26	12:00:35s -0:00:35 -
-Rule	sol89	1989	only	-	Dec	27	12:01:05s -0:01:05 -
-Rule	sol89	1989	only	-	Dec	28	12:01:35s -0:01:35 -
-Rule	sol89	1989	only	-	Dec	29	12:02:00s -0:02:00 -
-Rule	sol89	1989	only	-	Dec	30	12:02:30s -0:02:30 -
-Rule	sol89	1989	only	-	Dec	31	12:03:00s -0:03:00 -
-
-# Riyadh is at about 46 degrees 46 minutes East:  3 hrs, 7 mins, 4 secs
-# Before and after 1989, we'll operate on local mean solar time.
-
-# Zone	NAME		GMTOFF	RULES/SAVE	FORMAT	[UNTIL]
-Zone	Asia/Riyadh89	3:07:04	-		??	1989
-			3:07:04	sol89		??	1990
-			3:07:04	-		??
-# For backward compatibility...
-Link	Asia/Riyadh89	Mideast/Riyadh89
diff --git a/JodaTime/xdocs/timezones.xml b/JodaTime/xdocs/timezones.xml
index 0c471328c..9ca47c1f9 100644
--- a/JodaTime/xdocs/timezones.xml
+++ b/JodaTime/xdocs/timezones.xml
@@ -13,7 +13,7 @@
 <p>
 Time zone data is provided by the public <a href="http://www.twinsun.com/tz/tz-link.htm">tz</a>
 database, otherwise known as the Olson database. The following table shows all the time zones
-supported by Joda-Time, using version 2004g of the tz database. This table can be rebuilt
+supported by Joda-Time, using version 2005i of the tz database. This table can be rebuilt
 by running <code>org.joda.example.time.TimeZoneTable</code>.
 </p>
 <p>
@@ -303,9 +303,6 @@ by running <code>org.joda.example.time.TimeZoneTable</code>.
 <tr><td align="left" valign="top">+03:00</td><td align="left" valign="top">Indian/Antananarivo</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+03:00</td><td align="left" valign="top">Indian/Comoro</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+03:00</td><td align="left" valign="top">Indian/Mayotte</td><td align="left" valign="top"></td></tr>
-<tr><td align="left" valign="top">+03:07:04</td><td align="left" valign="top">Asia/Riyadh87</td><td align="left" valign="top">Mideast/Riyadh87</td></tr>
-<tr><td align="left" valign="top">+03:07:04</td><td align="left" valign="top">Asia/Riyadh88</td><td align="left" valign="top">Mideast/Riyadh88</td></tr>
-<tr><td align="left" valign="top">+03:07:04</td><td align="left" valign="top">Asia/Riyadh89</td><td align="left" valign="top">Mideast/Riyadh89</td></tr>
 <tr><td align="left" valign="top">+03:30</td><td align="left" valign="top">Asia/Tehran</td><td align="left" valign="top">Iran</td></tr>
 <tr><td align="left" valign="top">+04:00</td><td align="left" valign="top">Asia/Aqtau</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+04:00</td><td align="left" valign="top">Asia/Baku</td><td align="left" valign="top"></td></tr>

From 356cd0e1ce58b9f9e5aecd5b131a12754bb22877 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Thu, 9 Jun 2005 16:03:29 +0000
Subject: [PATCH 049/124] Fixed bug in parsing periods that had fields which
 always printed zeros.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@781 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  4 +++
 .../time/format/PeriodFormatterBuilder.java   |  6 ++--
 .../time/format/TestPeriodFormatParsing.java  | 36 +++++++++++++++++++
 3 files changed, 43 insertions(+), 3 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 1ea968d6a..f9b279360 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -42,6 +42,10 @@ Bug fixes since 1.0
   Fixed parsing date where format includes era. Era must be set and rounded
   before any other fields.
 
+- PeriodFormatterBuilder
+  Formatters that had fields which required a zero to be printed were not being
+  parsed.
+
 Enhancements since 1.0
 ----------------------
 - DateTime/DateMidnight/MutableDateTime/YearMonthDay/TimeOfDay
diff --git a/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java b/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java
index 5d24d389c..1a0c4dad1 100644
--- a/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java
+++ b/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java
@@ -532,7 +532,7 @@ public PeriodFormatterBuilder appendSuffix(String text) {
      * @see #appendPrefix
      */
     public PeriodFormatterBuilder appendSuffix(String singularText,
-                                                 String pluralText) {
+                                               String pluralText) {
         if (singularText == null || pluralText == null) {
             throw new IllegalArgumentException();
         }
@@ -1169,7 +1169,7 @@ public int parseInto(
             } else {
                 limit = Math.min(iMaxParsedDigits, text.length() - position);
             }
-            
+
             // validate input number
             int length = 0;
             int fractPos = -1;
@@ -1212,7 +1212,7 @@ public int parseInto(
                 return ~position;
             }
 
-            if (position + length != suffixPos) {
+            if (suffixPos >= 0 && position + length != suffixPos) {
                 // If there are additional non-digit characters before the
                 // suffix is reached, then assume that the suffix found belongs
                 // to a field not yet reached. Return original position so that
diff --git a/JodaTime/src/test/org/joda/time/format/TestPeriodFormatParsing.java b/JodaTime/src/test/org/joda/time/format/TestPeriodFormatParsing.java
index 8d0bde2e2..1ef2e18f7 100644
--- a/JodaTime/src/test/org/joda/time/format/TestPeriodFormatParsing.java
+++ b/JodaTime/src/test/org/joda/time/format/TestPeriodFormatParsing.java
@@ -95,4 +95,40 @@ public void testParseStandard1() {
         assertEquals(new Period(6, 3, 0, 2, 0, 0, 0, 0), p);
     }
 
+    public void testParseCustom1() {
+        PeriodFormatter formatter = new PeriodFormatterBuilder()
+            .printZeroAlways()
+            .appendHours()
+            .appendSuffix(":")
+            .minimumPrintedDigits(2)
+            .appendMinutes()
+            .toFormatter();
+
+        Period p;
+
+        p = new Period(47, 55, 0, 0);
+        assertEquals("47:55", formatter.print(p));
+        assertEquals(p, formatter.parsePeriod("47:55"));
+        assertEquals(p, formatter.parsePeriod("047:055"));
+
+        p = new Period(7, 5, 0, 0);
+        assertEquals("7:05", formatter.print(p));
+        assertEquals(p, formatter.parsePeriod("7:05"));
+        assertEquals(p, formatter.parsePeriod("7:5"));
+        assertEquals(p, formatter.parsePeriod("07:05"));
+
+        p = new Period(0, 5, 0, 0);
+        assertEquals("0:05", formatter.print(p));
+        assertEquals(p, formatter.parsePeriod("0:05"));
+        assertEquals(p, formatter.parsePeriod("0:5"));
+        assertEquals(p, formatter.parsePeriod("00:005"));
+        assertEquals(p, formatter.parsePeriod("0:005"));
+
+        p = new Period(0, 0, 0, 0);
+        assertEquals("0:00", formatter.print(p));
+        assertEquals(p, formatter.parsePeriod("0:00"));
+        assertEquals(p, formatter.parsePeriod("0:0"));
+        assertEquals(p, formatter.parsePeriod("00:00"));
+    }
+
 }

From 226795703795b4e4031ca3cd76ca304d23916976 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 10 Jun 2005 23:18:01 +0000
Subject: [PATCH 050/124] Fix serialization of DateTime/DateMidnight property
 classes

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@782 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/java/org/joda/time/DateMidnight.java  |  26 ++-
 JodaTime/src/java/org/joda/time/DateTime.java |  24 ++-
 .../java/org/joda/time/MutableDateTime.java   |  24 ++-
 .../test/org/joda/time/TestSerialization.java | 194 +++++++++++++++---
 JodaTime/src/testdata/BuddhistChronology.dat  | Bin 0 -> 1265 bytes
 JodaTime/src/testdata/DateTimeFieldType.dat   | Bin 0 -> 182 bytes
 JodaTime/src/testdata/DateTimeProperty.dat    | Bin 0 -> 645 bytes
 .../src/testdata/DelegatedDurationField.dat   | Bin 0 -> 447 bytes
 JodaTime/src/testdata/DurationFieldType.dat   | Bin 0 -> 175 bytes
 JodaTime/src/testdata/GregorianChronology.dat | Bin 0 -> 446 bytes
 JodaTime/src/testdata/JulianChronology.dat    | Bin 0 -> 443 bytes
 JodaTime/src/testdata/MillisDurationField.dat | Bin 0 -> 60 bytes
 JodaTime/src/testdata/PeriodType.dat          | Bin 0 -> 473 bytes
 JodaTime/src/testdata/TimeOfDayProperty.dat   | Bin 0 -> 407 bytes
 .../src/testdata/UnsupportedDateTimeField.dat | Bin 0 -> 584 bytes
 .../src/testdata/UnsupportedDurationField.dat | Bin 0 -> 277 bytes
 .../src/testdata/YearMonthDayProperty.dat     | Bin 0 -> 415 bytes
 17 files changed, 233 insertions(+), 35 deletions(-)
 create mode 100644 JodaTime/src/testdata/BuddhistChronology.dat
 create mode 100644 JodaTime/src/testdata/DateTimeFieldType.dat
 create mode 100644 JodaTime/src/testdata/DateTimeProperty.dat
 create mode 100644 JodaTime/src/testdata/DelegatedDurationField.dat
 create mode 100644 JodaTime/src/testdata/DurationFieldType.dat
 create mode 100644 JodaTime/src/testdata/GregorianChronology.dat
 create mode 100644 JodaTime/src/testdata/JulianChronology.dat
 create mode 100644 JodaTime/src/testdata/MillisDurationField.dat
 create mode 100644 JodaTime/src/testdata/PeriodType.dat
 create mode 100644 JodaTime/src/testdata/TimeOfDayProperty.dat
 create mode 100644 JodaTime/src/testdata/UnsupportedDateTimeField.dat
 create mode 100644 JodaTime/src/testdata/UnsupportedDurationField.dat
 create mode 100644 JodaTime/src/testdata/YearMonthDayProperty.dat

diff --git a/JodaTime/src/java/org/joda/time/DateMidnight.java b/JodaTime/src/java/org/joda/time/DateMidnight.java
index 7446e47bd..81c330632 100644
--- a/JodaTime/src/java/org/joda/time/DateMidnight.java
+++ b/JodaTime/src/java/org/joda/time/DateMidnight.java
@@ -15,6 +15,9 @@
  */
 package org.joda.time;
 
+import java.io.IOException;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
 import java.io.Serializable;
 import java.util.Locale;
 
@@ -933,10 +936,10 @@ public Property dayOfWeek() {
         private static final long serialVersionUID = 257629620L;
         
         /** The instant this property is working against */
-        private final DateMidnight iInstant;
+        private DateMidnight iInstant;
         /** The field this property is working against */
-        private final DateTimeField iField;
-
+        private DateTimeField iField;
+        
         /**
          * Constructor.
          * 
@@ -949,6 +952,23 @@ public Property dayOfWeek() {
             iField = field;
         }
 
+        /**
+         * Writes the property in a safe serialization format.
+         */
+        private void writeObject(ObjectOutputStream oos) throws IOException {
+            oos.writeObject(iInstant);
+            oos.writeObject(iField.getType());
+        }
+
+        /**
+         * Reads the property from a safe serialization format.
+         */
+        private void readObject(ObjectInputStream oos) throws IOException, ClassNotFoundException {
+            iInstant = (DateMidnight) oos.readObject();
+            DateTimeFieldType type = (DateTimeFieldType) oos.readObject();
+            iField = type.getField(iInstant.getChronology());
+        }
+
         //-----------------------------------------------------------------------
         /**
          * Gets the field being used.
diff --git a/JodaTime/src/java/org/joda/time/DateTime.java b/JodaTime/src/java/org/joda/time/DateTime.java
index e4a16209c..5faa1ec0e 100644
--- a/JodaTime/src/java/org/joda/time/DateTime.java
+++ b/JodaTime/src/java/org/joda/time/DateTime.java
@@ -15,6 +15,9 @@
  */
 package org.joda.time;
 
+import java.io.IOException;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
 import java.io.Serializable;
 import java.util.Locale;
 
@@ -1323,9 +1326,9 @@ public Property millisOfSecond() {
         private static final long serialVersionUID = -6983323811635733510L;
         
         /** The instant this property is working against */
-        private final DateTime iInstant;
+        private DateTime iInstant;
         /** The field this property is working against */
-        private final DateTimeField iField;
+        private DateTimeField iField;
         
         /**
          * Constructor.
@@ -1339,6 +1342,23 @@ public Property millisOfSecond() {
             iField = field;
         }
         
+        /**
+         * Writes the property in a safe serialization format.
+         */
+        private void writeObject(ObjectOutputStream oos) throws IOException {
+            oos.writeObject(iInstant);
+            oos.writeObject(iField.getType());
+        }
+
+        /**
+         * Reads the property from a safe serialization format.
+         */
+        private void readObject(ObjectInputStream oos) throws IOException, ClassNotFoundException {
+            iInstant = (DateTime) oos.readObject();
+            DateTimeFieldType type = (DateTimeFieldType) oos.readObject();
+            iField = type.getField(iInstant.getChronology());
+        }
+
         //-----------------------------------------------------------------------
         /**
          * Gets the field being used.
diff --git a/JodaTime/src/java/org/joda/time/MutableDateTime.java b/JodaTime/src/java/org/joda/time/MutableDateTime.java
index d573c5860..9114ffc95 100644
--- a/JodaTime/src/java/org/joda/time/MutableDateTime.java
+++ b/JodaTime/src/java/org/joda/time/MutableDateTime.java
@@ -15,6 +15,9 @@
  */
 package org.joda.time;
 
+import java.io.IOException;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
 import java.io.Serializable;
 import java.util.Locale;
 
@@ -1152,9 +1155,9 @@ public String toString() {
         private static final long serialVersionUID = -4481126543819298617L;
         
         /** The instant this property is working against */
-        private final MutableDateTime iInstant;
+        private MutableDateTime iInstant;
         /** The field this property is working against */
-        private final DateTimeField iField;
+        private DateTimeField iField;
         
         /**
          * Constructor.
@@ -1168,6 +1171,23 @@ public String toString() {
             iField = field;
         }
         
+        /**
+         * Writes the property in a safe serialization format.
+         */
+        private void writeObject(ObjectOutputStream oos) throws IOException {
+            oos.writeObject(iInstant);
+            oos.writeObject(iField.getType());
+        }
+
+        /**
+         * Reads the property from a safe serialization format.
+         */
+        private void readObject(ObjectInputStream oos) throws IOException, ClassNotFoundException {
+            iInstant = (MutableDateTime) oos.readObject();
+            DateTimeFieldType type = (DateTimeFieldType) oos.readObject();
+            iField = type.getField(iInstant.getChronology());
+        }
+
         //-----------------------------------------------------------------------
         /**
          * Gets the field being used.
diff --git a/JodaTime/src/test/org/joda/time/TestSerialization.java b/JodaTime/src/test/org/joda/time/TestSerialization.java
index 5ef605e9c..f3bd768b0 100644
--- a/JodaTime/src/test/org/joda/time/TestSerialization.java
+++ b/JodaTime/src/test/org/joda/time/TestSerialization.java
@@ -27,9 +27,16 @@
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
 
+import org.joda.time.chrono.BuddhistChronology;
 import org.joda.time.chrono.CopticChronology;
 import org.joda.time.chrono.GJChronology;
+import org.joda.time.chrono.GregorianChronology;
 import org.joda.time.chrono.ISOChronology;
+import org.joda.time.chrono.JulianChronology;
+import org.joda.time.field.DelegatedDurationField;
+import org.joda.time.field.MillisDurationField;
+import org.joda.time.field.UnsupportedDateTimeField;
+import org.joda.time.field.UnsupportedDurationField;
 
 /**
  * This class is a Junit unit test for serialization.
@@ -68,7 +75,14 @@
             (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
             + 14L * DateTimeConstants.MILLIS_PER_HOUR
             + 28L * DateTimeConstants.MILLIS_PER_MINUTE;
-        
+
+    private static class MockDelegatedDurationField extends DelegatedDurationField implements Serializable {
+        private static final long serialVersionUID = 1878496002811998493L;        
+        public MockDelegatedDurationField() {
+            super(MillisDurationField.INSTANCE);
+        }
+    }
+
     private DateTimeZone originalDateTimeZone = null;
     private TimeZone originalTimeZone = null;
     private Locale originalLocale = null;
@@ -115,79 +129,127 @@ public void testTest() {
     //-----------------------------------------------------------------------
     public void testSerializedInstant() throws Exception {
         Instant test = new Instant();
-        loadAndCompare(test, "Instant.dat");
-        inlineCompare(test);
+        loadAndCompare(test, "Instant.dat", false);
+        inlineCompare(test, false);
     }
 
     public void testSerializedDateTime() throws Exception {
         DateTime test = new DateTime();
-        loadAndCompare(test, "DateTime.dat");
-        inlineCompare(test);
+        loadAndCompare(test, "DateTime.dat", false);
+        inlineCompare(test, false);
+    }
+
+    public void testSerializedDateTimeProperty() throws Exception {
+        DateTime.Property test = new DateTime().hourOfDay();
+        loadAndCompare(test, "DateTimeProperty.dat", false);
+        inlineCompare(test, false);
     }
 
     public void testSerializedMutableDateTime() throws Exception {
         MutableDateTime test = new MutableDateTime();
-        loadAndCompare(test, "MutableDateTime.dat");
-        inlineCompare(test);
+        loadAndCompare(test, "MutableDateTime.dat", false);
+        inlineCompare(test, false);
     }
 
     public void testSerializedDateMidnight() throws Exception {
         DateMidnight test = new DateMidnight();
-        loadAndCompare(test, "DateMidnight.dat");
-        inlineCompare(test);
+        loadAndCompare(test, "DateMidnight.dat", false);
+        inlineCompare(test, false);
     }
 
     public void testSerializedYearMonthDay() throws Exception {
         YearMonthDay test = new YearMonthDay();
-        loadAndCompare(test, "YearMonthDay.dat");
-        inlineCompare(test);
+        loadAndCompare(test, "YearMonthDay.dat", false);
+        inlineCompare(test, false);
     }
 
     public void testSerializedTimeOfDay() throws Exception {
         TimeOfDay test = new TimeOfDay();
-        loadAndCompare(test, "TimeOfDay.dat");
-        inlineCompare(test);
+        loadAndCompare(test, "TimeOfDay.dat", false);
+        inlineCompare(test, false);
     }
 
     public void testSerializedDateTimeZoneUTC() throws Exception {
         DateTimeZone test = DateTimeZone.UTC;
-        loadAndCompare(test, "DateTimeZoneUTC.dat");
-        inlineCompare(test);
+        loadAndCompare(test, "DateTimeZoneUTC.dat", true);
+        inlineCompare(test, true);
     }
 
     public void testSerializedDateTimeZone() throws Exception {
         DateTimeZone test = PARIS;
-        loadAndCompare(test, "DateTimeZone.dat");
-        inlineCompare(test);
+        loadAndCompare(test, "DateTimeZone.dat", true);
+        inlineCompare(test, true);
     }
 
     public void testSerializedCopticChronology() throws Exception {
         CopticChronology test = CopticChronology.getInstance(LONDON);
-        loadAndCompare(test, "CopticChronology.dat");
-        inlineCompare(test);
+        loadAndCompare(test, "CopticChronology.dat", true);
+        inlineCompare(test, true);
     }
 
     public void testSerializedISOChronology() throws Exception {
         ISOChronology test = ISOChronology.getInstance(PARIS);
-        loadAndCompare(test, "ISOChronology.dat");
-        inlineCompare(test);
+        loadAndCompare(test, "ISOChronology.dat", true);
+        inlineCompare(test, true);
     }
 
     public void testSerializedGJChronology() throws Exception {
         GJChronology test = GJChronology.getInstance(TOKYO);
-        loadAndCompare(test, "GJChronology.dat");
-        inlineCompare(test);
+        loadAndCompare(test, "GJChronology.dat", true);
+        inlineCompare(test, true);
+    }
+
+    public void testSerializedGregorianChronology() throws Exception {
+        GregorianChronology test = GregorianChronology.getInstance(PARIS);
+        loadAndCompare(test, "GregorianChronology.dat", true);
+        inlineCompare(test, true);
+    }
+
+    public void testSerializedJulianChronology() throws Exception {
+        JulianChronology test = JulianChronology.getInstance(PARIS);
+        loadAndCompare(test, "JulianChronology.dat", true);
+        inlineCompare(test, true);
+    }
+
+    public void testSerializedBuddhistChronology() throws Exception {
+        BuddhistChronology test = BuddhistChronology.getInstance(PARIS);
+        loadAndCompare(test, "BuddhistChronology.dat", true);
+        inlineCompare(test, true);
+    }
+
+    public void testSerializedPeriodType() throws Exception {
+        PeriodType test = PeriodType.dayTime();
+        loadAndCompare(test, "PeriodType.dat", false);
+        inlineCompare(test, false);
     }
 
-    private void loadAndCompare(Serializable test, String filename) throws Exception {
+    public void testSerializedDateTimeFieldType() throws Exception {
+        DateTimeFieldType test = DateTimeFieldType.clockhourOfDay();
+        loadAndCompare(test, "DateTimeFieldType.dat", true);
+        inlineCompare(test, true);
+    }
+
+    public void testSerializedUnsupportedDateTimeField() throws Exception {
+        UnsupportedDateTimeField test = UnsupportedDateTimeField.getInstance(
+                DateTimeFieldType.year(),
+                UnsupportedDurationField.getInstance(DurationFieldType.years()));
+        loadAndCompare(test, "UnsupportedDateTimeField.dat", true);
+        inlineCompare(test, true);
+    }
+
+    private void loadAndCompare(Serializable test, String filename, boolean same) throws Exception {
         FileInputStream fis = new FileInputStream("src/testdata/" + filename);
         ObjectInputStream ois = new ObjectInputStream(fis);
         Object obj = ois.readObject();
         ois.close();
-        assertEquals(test, obj);
+        if (same) {
+            assertSame(test, obj);
+        } else {
+            assertEquals(test, obj);
+        }
     }
 
-    public void inlineCompare(Serializable test) throws Exception {
+    public void inlineCompare(Serializable test, boolean same) throws Exception {
         ByteArrayOutputStream baos = new ByteArrayOutputStream();
         ObjectOutputStream oos = new ObjectOutputStream(baos);
         oos.writeObject(test);
@@ -198,7 +260,11 @@ public void inlineCompare(Serializable test) throws Exception {
         Object obj = ois.readObject();
         ois.close();
         
-        assertEquals(test, obj);
+        if (same) {
+            assertSame(test, obj);
+        } else {
+            assertEquals(test, obj);
+        }
     }
 
 //    //-----------------------------------------------------------------------
@@ -227,11 +293,21 @@ public void inlineCompare(Serializable test) throws Exception {
 //        store(test, "YearMonthDay.dat");
 //    }
 //
+//    public void testStoreSerializedYearMonthDayProperty() throws Exception {
+//        YearMonthDay.Property test = new YearMonthDay().monthOfYear();
+//        store(test, "YearMonthDayProperty.dat");
+//    }
+//
 //    public void testStoreSerializedTimeOfDay() throws Exception {
 //        TimeOfDay test = new TimeOfDay();
 //        store(test, "TimeOfDay.dat");
 //    }
 //
+//    public void testStoreSerializedTimeOfDayProperty() throws Exception {
+//        TimeOfDay.Property test = new TimeOfDay().hourOfDay();
+//        store(test, "TimeOfDayProperty.dat");
+//    }
+//
 //    public void testStoreSerializedDateTimeZoneUTC() throws Exception {
 //        DateTimeZone test = DateTimeZone.UTC;
 //        store(test, "DateTimeZoneUTC.dat");
@@ -257,10 +333,72 @@ public void inlineCompare(Serializable test) throws Exception {
 //        store(test, "GJChronology.dat");
 //    }
 //
+//    public void testStoreSerializedGregorianChronology() throws Exception {
+//        GregorianChronology test = GregorianChronology.getInstance(PARIS);
+//        store(test, "GregorianChronology.dat");
+//    }
+//
+//    public void testStoreSerializedJulianChronology() throws Exception {
+//        JulianChronology test = JulianChronology.getInstance(PARIS);
+//        store(test, "JulianChronology.dat");
+//    }
+//
+//    public void testStoreSerializedBuddhistChronology() throws Exception {
+//        BuddhistChronology test = BuddhistChronology.getInstance(PARIS);
+//        store(test, "BuddhistChronology.dat");
+//    }
+//
+//    public void testStoreSerializedPeriodType() throws Exception {
+//        PeriodType test = PeriodType.dayTime();
+//        store(test, "PeriodType.dat");
+//    }
+//
+//    public void testStoreSerializedDateTimeFieldType() throws Exception {
+//        DateTimeFieldType test = DateTimeFieldType.clockhourOfDay();
+//        store(test, "DateTimeFieldType.dat");
+//    }
+//
+//    public void testStoreSerializedUnsupportedDateTimeField() throws Exception {
+//        UnsupportedDateTimeField test = UnsupportedDateTimeField.getInstance(
+//                DateTimeFieldType.year(),
+//                UnsupportedDurationField.getInstance(DurationFieldType.years()));
+//        store(test, "UnsupportedDateTimeField.dat");
+//    }
+//
+//    public void testStoreSerializedDurationFieldType() throws Exception {
+//        DurationFieldType test = DurationFieldType.MINUTES_TYPE;
+//        store(test, "DurationFieldType.dat");
+//    }
+//
+//    public void testStoreSerializedMillisDurationField() throws Exception {
+//        MillisDurationField test = (MillisDurationField) MillisDurationField.INSTANCE;
+//        store(test, "MillisDurationField.dat");
+//    }
+//
+//    public void testStoreSerializedDelegatedDurationField() throws Exception {
+//        DelegatedDurationField test = new MockDelegatedDurationField();
+//        store(test, "DelegatedDurationField.dat");
+//    }
+//
+//    public void testStoreSerializedUnsupportedDurationField() throws Exception {
+//        UnsupportedDurationField test = UnsupportedDurationField.getInstance(DurationFieldType.eras());
+//        store(test, "UnsupportedDurationField.dat");
+//    }
+//
+    // format changed (properly defined) in v1.1
+//    public void testStoreSerializedDateTimeProperty() throws Exception {
+//        DateTime.Property test = new DateTime().hourOfDay();
+//        store(test, "DateTimeProperty.dat");
+//    }
+//
 //    private void store(Serializable test, String filename) throws Exception {
 //        FileOutputStream fos = new FileOutputStream("src/testdata/" + filename);
 //        ObjectOutputStream oos = new ObjectOutputStream(fos);
-//        oos.writeObject(test);
+//        try {
+//            oos.writeObject(test);
+//        } finally {
+//            oos.close();
+//        }
 //        oos.close();
 //    }
 //
diff --git a/JodaTime/src/testdata/BuddhistChronology.dat b/JodaTime/src/testdata/BuddhistChronology.dat
new file mode 100644
index 0000000000000000000000000000000000000000..f2cddb037b98df30b454de5c0be354710801f360
GIT binary patch
literal 1265
zcmZ`(Pe>F|82?<`Bv;Hd|F9SmnWoST*wHTOnz)Q8R1`{wx6WgI>+H<*=8f(`Sf>tA
z&?!U$!=OVfbSThMhYl7*<)uTA2kX!!!Ab(VZ0{R)opqQl-!Q!I`~80J_kG_hY(doF
z&~5RwlCgB62$rSF)HJtDOBrx=eVRF9(EBy4bpGR;*X@5dhJHl=avaWtR$Xu$noSv0
z_sf=-o_}6mS>265M1v?BAPyA}*JQbhq$-lCetN$KhuJvcBrBj%%aB>38pKSiW2p?C
z68)0-R46mz`Y4NcAGVKg*XpR%mUrw7t<hMPRa`J5^nCC3pNyw8#x!e=axX<dTR?Au
z2zprxmuh3|ifxw?Z@@g%<S<q_7(r5>45c1U`eMHnMin~I)f0he66)EYE38?{N10(T
zCkb_InAi!I6TvJ~gQMm15z`UG6arcU+DZpf+Hp3_Y1-n9m_D0;-ax^W*J3p!S7IDv
zN!JJfbcX{36Z=a}{LlUg%d8xfpV1fZw(||Qv1h)8wYJNlY0{en1t&o%O~Qi@*OnTb
z9>Z%f08~q_PltLP)OF|6iS@qaA7pQk!)tJyDtp9#Z{2_VQtgO9)d)1PQD!Dc-Wf43
zGVX}0l+Nr)wr#28kW>=B9w8R*#Gc)oZ=G2y-@17pqWR!uN^L#+_SO1Y{iF9%ND^wK
z5S)^nT`cZ=-PH?F{z@5e?$!dJk#P)d7+R#Vj)Sn}NycV$UJ`EVsamyovoHRw8dqno
z9_of%ZrN0oJ1L1=glR;(J-mJ7cqK8C<4Favja%3fPQ7|Qr)MTN<O_ihOF&;rHbTK}
ml!X?HyPIRzl_zpbeFJa}{Sim*2zs*ey=%O%fWJp<0q_rsioiMm

literal 0
HcmV?d00001

diff --git a/JodaTime/src/testdata/DateTimeFieldType.dat b/JodaTime/src/testdata/DateTimeFieldType.dat
new file mode 100644
index 0000000000000000000000000000000000000000..253cc65564431a2581e19c4c4e1d4f23afaf9459
GIT binary patch
literal 182
zcmZ4UmVvdnh`}<yC|xfrKP6GGBr`Wv&n2-WH3Z0T%S_El38^edRS7Oh%u7iuO2Lr%
z|Nq-J<@Vq<CI&_)298YsqLj?M#GHyE26+NT{{Mf|_BKn66i}lN18b&VVs2^)gOE>F
oVp*boPGVlVesD=qW?s5=ML`JzUvf@<a&|_3X_0@LOJbz}0A>C|0ssI2

literal 0
HcmV?d00001

diff --git a/JodaTime/src/testdata/DateTimeProperty.dat b/JodaTime/src/testdata/DateTimeProperty.dat
new file mode 100644
index 0000000000000000000000000000000000000000..0dc01e52c9ea60300c54fa33b3bfc8614a7ede4c
GIT binary patch
literal 645
zcmZ4UmVvdnh(SKTC|xfrKP6GGBr`Wv&n2-WH3Y~|2`I`hNG&R<oG)hoPyEg8U(5_l
zJ`8M`Zkee$DJ2ZDK0s~yAZ_{}ZTc{6U}<X~298Y6yyB9?ypj?I2^>nTD~cE_P%Tdb
z8LsD;R9sS&m|PN+nwXN9l#>cI32ZdXRnpPM&rW>)Qp?1^P*DK%g&3+qFz4*BsYuC+
zzWWoT48yBQiN&dUPCx>t`v3o*5B+2H7Bew0c`>kO`ex?jWET4{aA!Ja6y@jT=j5kX
zmM}=6c?Th9T~WZm!0;|eyM+PhB6U<3C4-I7^9=S!Xiy0*DNR~=LNKk+JV2cp>JuFC
z5tW~p3Rb^NpK(@=k<??b`f`2-Ue{7kOzHdN=cVN5Ra5}2wnViW<~?u#hEx`S%t_2k
zNi0gikoo`r+c)L*;5H@(Mkin#`WK~S<|XD}1|1fSH*IgT)JOp}`Y^C&`X%P3mM{qU
lWF?j*>gOcprRxWm6lLb61B0l9fiok&w8%frC9zVl0sx)8>4yLS

literal 0
HcmV?d00001

diff --git a/JodaTime/src/testdata/DelegatedDurationField.dat b/JodaTime/src/testdata/DelegatedDurationField.dat
new file mode 100644
index 0000000000000000000000000000000000000000..4fb6bdeb89983b9c1c362ac47dd2663f7b04cdfa
GIT binary patch
literal 447
zcmZ4UmVvdnh`}nqC|xfrKP6GGBr`WvFC?|NBsjGwGchN#DzPLpKTpLsKRMeaH77Ma
zu_QIcrL+hv>Xw<BlOiQ}NHc%tMp-5XhKeEvEmVWjKq~aGYuq%a&gfe^+iNBUCLad2
zOt4`k46;5z6ZAn&(FZw2AH^<f9|qRUkjjG85(Y(l>Oe}YD++)fQ^)2W-^`qx%wiOi
zRqnO!nBDkQ9OMg-K1)=6C~85bs|1%M=A|SSp@s!WhJisQ%s%SbWhMqjCkBp8|Du%4
zyu=(}(8v=ol7WH!$EhQ4%Yhm}-t<e%1$tA+Co8cmQ9ma!FI_*lq$o2l9q6wT2DV(V
G7kB_6U!dOr

literal 0
HcmV?d00001

diff --git a/JodaTime/src/testdata/DurationFieldType.dat b/JodaTime/src/testdata/DurationFieldType.dat
new file mode 100644
index 0000000000000000000000000000000000000000..3829a0b0f7148aba3d82debc1b93d9ed2d5a48c8
GIT binary patch
literal 175
zcmZ4UmVvdnh`}<yC|xfrKP6GGBr`Wv&!w~|u_QA;&n+`GCncn^AXO!}Brz`~u_y&Y
zhJisQ%s%SbWhMqjCkBp8|Du%4yu_S}A_jQ^Mlvw4|2TEzZ8=b*4+CqaUt(@*34@SN
iR$^JAeokUux_)p;QD$Dcbwxo51AA^}UTH~cF&6-pnmxw=

literal 0
HcmV?d00001

diff --git a/JodaTime/src/testdata/GregorianChronology.dat b/JodaTime/src/testdata/GregorianChronology.dat
new file mode 100644
index 0000000000000000000000000000000000000000..9cc7a13b10cca2aeeef66216d5ed69630fbb2358
GIT binary patch
literal 446
zcmZ4UmVvdnh(RO2C|xfrKP6GGBr`WvFFB(qKQCX;y(l$3zbG>?&l$|m$xpBR!o8}e
zPCWY<69Yp<5rZmLZBB{BsqS6~Jw>12_Ac0>FVDol=*b|Q>6@A7l2}>nndg>SR9q6C
znwkwX3A+Ovi;GiplX6m15QZ(9zy9W;?K^%lF);Zsux5hnDq)cF0Xjq<<bHjS`}GmZ
zt$i5SG6NEe5_3x!gnY6R%M$f-67$ma{gbj%lS{0DHY?-w1HzP9UDIR&K5(Ugd|dzx
zE)}eLqVn^QUHXxA^XU(j0u3Ndg$#8JOvNCQp`d_)fq?~Rh&-wxE{P?nAwb82Oi>9g
lDNS0Y&p4~bNa`^&$kK8?1|HYaqWpqXeV}hLiz~pU0042ipA-N9

literal 0
HcmV?d00001

diff --git a/JodaTime/src/testdata/JulianChronology.dat b/JodaTime/src/testdata/JulianChronology.dat
new file mode 100644
index 0000000000000000000000000000000000000000..795c8d712c2ba6bf1ffae3926ab1a5267bb6dd4d
GIT binary patch
literal 443
zcmZ4UmVvdnh(R^KC|xfrKP6GGBr`WvFFB(qKQCX;t28GwG0z#y$;nTzY`ZFZ!D!K&
zL?#A?3S4@e5{pyay%2heKELf<uti^<iGk6RK{(SlGtVWlve+}vEwiY&Bs?`W8)%XS
zR@)tmi&Jxxa#B+ehAo=E{^p|XJAN`TF!?aBW`gW0VUY3xYS#xjULWLmeS~sr9|pF}
zfW)H2+!6*MpRB~PME#t^ymWp4q^#8B5^JE%%2;g%nTs%GR@XF{fDc?LAYT^%!%79K
zo~ZmhWS4$q-F*5(r9cBnQz1hg15+`GWGE<LU|?VY8X}Ksh)ZHgY6#HrAX8L=OG=ZL
h=`+r%F_L=B46?MGkAcUvv?#wIRUhb^%;E~LDFF61o<slu

literal 0
HcmV?d00001

diff --git a/JodaTime/src/testdata/MillisDurationField.dat b/JodaTime/src/testdata/MillisDurationField.dat
new file mode 100644
index 0000000000000000000000000000000000000000..403dc10afa87dcca85ccf8f16d2ad0c1e2dc6eab
GIT binary patch
literal 60
zcmZ4UmVvdnh(SHSC|xfrKP6GGBr`WvFD)}QCq>UUGbbmr*rl{6u_QA;&kZD|a<6sA
N?8dL+ObiSa1purx7U2K@

literal 0
HcmV?d00001

diff --git a/JodaTime/src/testdata/PeriodType.dat b/JodaTime/src/testdata/PeriodType.dat
new file mode 100644
index 0000000000000000000000000000000000000000..b1e4a793833a10e6db4c49ef37e6ac3a5ad1780a
GIT binary patch
literal 473
zcmZ4UmVvdnh(RL1C|xfrKP6GGBr`WvFCeujGe0GyvLID{0$ahVO{RQI49w9C9GRYZ
zDVfQs#U%_((VjjGteJj^xv3=#LOxlEWr_MZiFxVz!6ikRdFj^C3~ZSo{XnHk(LO-a
z^+BfVgG|?VDJ@DY$;{7l%S_DyTVh>NP+9~s(sx&aTG^{jOPLrLDhe1F7&!hT0U#d)
z7=ail&%g}CEF}!=E{T;PKvRJRKrBM?2Bt;+JWW=AYvY??7J&S2iRyO@O)9}9iFqlB
zMJX6E3=A@1_EFC+Gchna0RzXsC?zv5F{h%4L7sq-3=Hf)P91q$4%7$>#X^QU2BwOF
z5(bu(#L8m!Vi2FJgn>09zqF{B6UJrF&CDw;NiF7r3lyg&=jWvqbHfDKax-&sGK+Zt
DHr|}*

literal 0
HcmV?d00001

diff --git a/JodaTime/src/testdata/TimeOfDayProperty.dat b/JodaTime/src/testdata/TimeOfDayProperty.dat
new file mode 100644
index 0000000000000000000000000000000000000000..14d1da508ed33216834dce109dce14bcd0766fc9
GIT binary patch
literal 407
zcmZ4UmVvdnh(RI0C|xfrKP6GGBr`WvF9b;Vr@16nsst3}7o--IRQhh*@wSk8-ApD1
zCQk<LOt;L`oD|Qzl++3z2ChuF@)8C~AD~J4Ad~b#Ch5batSbr_fB<NhI1amva-7#l
z#GGwmVqmB!Vvs{sm6TYVs^<hG0uqZ#G81zcIAT^bT`i3Py2l6T9_Ngr{Ji{}{PfBa
z1}QWrAmps08Q3$!5_3vZi%S@oqCG1LfX-1zwI~^ElAdR<KSG~Ma7k&>$`gWVh2{b3
z%s}UX^vR>@b4e^o1$j0qKQ9%mewjYwtQsS!$6)p4tPISdA<h*Qr9~i%eRn0OmA%@u
R6y#M<u&@9zBPe)a001H0gj)ar

literal 0
HcmV?d00001

diff --git a/JodaTime/src/testdata/UnsupportedDateTimeField.dat b/JodaTime/src/testdata/UnsupportedDateTimeField.dat
new file mode 100644
index 0000000000000000000000000000000000000000..ebe69b09955061f1c38fde3750abe4f5757aafd6
GIT binary patch
literal 584
zcmZ4UmVvdnh(Ra6C|xfrKP6GGBr`WvFD)}QCq*wbueh|JAit<2HN_>dBsBym;|7v=
zs&?z*><gI}nHZRS82B<>N{bRpGV}AmawQD1K0vedL1yWL%+g1Zw)SCQ%?zn5NG)Md
zL|2Dw1xSf?MFBA`L$-Z+pxC93`3;wu7#Q(bgscN$ktJ#npg0?(N+q}?F)t;tC<Q}?
zfk7tBKI$3BRwo9IO#h;k%)G>$iXsMi0!A`0u>Ux9<ZU_BxqgYcz;F@r$x19s)Xz!G
zOV<xBDay=C2L?n518Ze!Vo@;*FhtNDiXLtVhoZ~;|Nrfqa(i$aL5E^$ylH!zrA7+L
Rp@j@}44fc`v49-L3IL9&)3X2o

literal 0
HcmV?d00001

diff --git a/JodaTime/src/testdata/UnsupportedDurationField.dat b/JodaTime/src/testdata/UnsupportedDurationField.dat
new file mode 100644
index 0000000000000000000000000000000000000000..0600d04f39361e1a186b50c6b8cf2afb9f751137
GIT binary patch
literal 277
zcmZ4UmVvdnh(Ra6C|xfrKP6GGBr`WvFD)}QCq*wbueh|JAit<2HN~a0D6u3nKhF&$
zu{==hQpfy;%S;T6J`AjxA(aKGB@Bu_KqK@)M(Bf#&_~e$Qes_E0JO*w)gla4D#0a*
zc`1oSs5XN1Gcd@6*+)GC+3Li=k?CKQl9`v7Q&GeqPryh92KFDPj=U|0I@d2T7wB9e
fpRB~PME#t^ymbBGlA_GKbfEi67+6w^5{nrD5xHYQ

literal 0
HcmV?d00001

diff --git a/JodaTime/src/testdata/YearMonthDayProperty.dat b/JodaTime/src/testdata/YearMonthDayProperty.dat
new file mode 100644
index 0000000000000000000000000000000000000000..45a49dfe9bc603ea59adbd29d1133cea6e9fd3a8
GIT binary patch
literal 415
zcmZ4UmVvdnh(S5OC|xfrKP6GGBr`WvFETZ;$TvT)B*P`KQYD}$zaX`!q|(3U|DHXq
z`LCH6m^>M{Gu<*%b5cC>Qc^2?7<e<0b(Ap3_yEn*2brf2GEW~_*1DpAfq{V$XsHx#
zOBtB1#@wxvF=k?5s3>BPLsgiRSe&Zo1SA3yi%K#Ra~L>cRy18LjR88$2k0>8jH3L!
z{G9ys$`S@CG>0JMtfLv&Gs6;dN>htV7?`3xD++)vQb)BY8ElfCXRtp)pGt5^Y0}CQ
zf@y{30qV>^=YjOeqv~@>EJ+Ok`a3E=FBPnQnLgvJ8Y8L4VD;s!49uY+&J`7<MIeiP
acO|Hmz1p-C<W*3}0M)Qx0@7?i%n1PF28!eW

literal 0
HcmV?d00001


From 809f8db5502f3f1e31505073130d8710868709ac Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 10 Jun 2005 23:30:40 +0000
Subject: [PATCH 051/124] Fix serialization of DateTime/DateMidnight property
 classes

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@783 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt | 14 +++++++++++++-
 1 file changed, 13 insertions(+), 1 deletion(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index f9b279360..3e1b2952f 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -16,7 +16,13 @@ of restrictions. If the license cause you problems please contact the mailing li
 
 Incompatible changes since 1.0
 ------------------------------
-None - source and binary compatible.
+Binary compatible - Yes
+Source compatible - Yes
+Serialization compatible - 95%
+  - DateTime.Property, DateMidnight.Property and MutableDateTime.Property
+   serialization formats have changed to fix a bug.
+   Please note that this only affects the property classes, and not DateTime etc.
+   It is unlikely that you serialized one of these classes
 
 
 Deprecations since 1.0
@@ -46,6 +52,12 @@ Bug fixes since 1.0
   Formatters that had fields which required a zero to be printed were not being
   parsed.
 
+- DateTime.Property, DateMidnight.Property and MutableDateTime.Property
+  Could previously only be serialized in UTC.
+  The serialization format has been changed to be simpler and more reliable.
+  Unfortunately, this was an incompatible change to the serialization format.
+
+
 Enhancements since 1.0
 ----------------------
 - DateTime/DateMidnight/MutableDateTime/YearMonthDay/TimeOfDay

From 7b3fa279fba0a2645b4ff7065d84f9bf00f9ebe6 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Sat, 11 Jun 2005 17:35:03 +0000
Subject: [PATCH 052/124] Fixed number parser leniency bug with respect to sign
 characters.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@784 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                            |  2 ++
 .../joda/time/format/DateTimeFormatterBuilder.java    |  8 ++++++++
 .../org/joda/time/format/PeriodFormatterBuilder.java  | 11 ++++++++++-
 3 files changed, 20 insertions(+), 1 deletion(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 3e1b2952f..95d2415f2 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -57,6 +57,8 @@ Bug fixes since 1.0
   The serialization format has been changed to be simpler and more reliable.
   Unfortunately, this was an incompatible change to the serialization format.
 
+- DateTimeFormatterBuilder/PeriodFormatterBuilder
+  Number parser would accept multiple sign characters as valid.
 
 Enhancements since 1.0
 ----------------------
diff --git a/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java b/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java
index 05db63a37..1bd65cb04 100644
--- a/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java
+++ b/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java
@@ -1153,6 +1153,14 @@ public int parseInto(DateTimeParserBucket bucket, String text, int position) {
                 char c = text.charAt(position + length);
                 if (length == 0 && (c == '-' || c == '+') && iSigned) {
                     negative = c == '-';
+
+                    // Next character must be a digit.
+                    if (length + 1 >= limit || 
+                        (c = text.charAt(position + length + 1)) < '0' || c > '9')
+                    {
+                        break;
+                    }
+
                     if (negative) {
                         length++;
                     } else {
diff --git a/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java b/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java
index 1a0c4dad1..a1377497a 100644
--- a/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java
+++ b/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java
@@ -1178,7 +1178,16 @@ public int parseInto(
                 char c = text.charAt(position + length);
                 // leading sign
                 if (length == 0 && (c == '-' || c == '+') && !iRejectSignedValues) {
-                    if (c == '-') {
+                    boolean negative = c == '-';
+
+                    // Next character must be a digit.
+                    if (length + 1 >= limit || 
+                        (c = text.charAt(position + length + 1)) < '0' || c > '9')
+                    {
+                        break;
+                    }
+
+                    if (negative) {
                         length++;
                     } else {
                         // Skip the '+' for parseInt to succeed.

From e924d16dac209d4f2652f10db5f7b33554993b9e Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 12 Jun 2005 23:20:15 +0000
Subject: [PATCH 053/124] Fix test to work reliably as part of larger test
 suite

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@785 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/test/org/joda/time/TestSerialization.java | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/JodaTime/src/test/org/joda/time/TestSerialization.java b/JodaTime/src/test/org/joda/time/TestSerialization.java
index f3bd768b0..f3e072131 100644
--- a/JodaTime/src/test/org/joda/time/TestSerialization.java
+++ b/JodaTime/src/test/org/joda/time/TestSerialization.java
@@ -176,7 +176,9 @@ public void testSerializedDateTimeZoneUTC() throws Exception {
     }
 
     public void testSerializedDateTimeZone() throws Exception {
-        DateTimeZone test = PARIS;
+        // have to re-get the zone, as TestDateTimeZone may have
+        // changed the cache, or a SoftReference may have got cleared
+        DateTimeZone test = DateTimeZone.forID("Europe/Paris");
         loadAndCompare(test, "DateTimeZone.dat", true);
         inlineCompare(test, true);
     }

From f9f79f084f61e17aa8f76c64076d4f197acf44a3 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 12 Jun 2005 23:20:59 +0000
Subject: [PATCH 054/124] Specify dat files to be used as part of testing

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@786 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/project.xml | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/JodaTime/project.xml b/JodaTime/project.xml
index fa99c9ee8..0e2513132 100644
--- a/JodaTime/project.xml
+++ b/JodaTime/project.xml
@@ -130,6 +130,14 @@
     <sourceDirectory>src/java</sourceDirectory>
     <unitTestSourceDirectory>src/test</unitTestSourceDirectory>
     <unitTest>
+      <resources>
+        <resource>
+          <directory>${basedir}/src/testdata</directory>
+          <includes>
+            <include>*.dat</include>
+          </includes>
+        </resource>
+      </resources>
       <includes>
         <include>org/joda/time/**/TestAll.java</include>
       </includes>

From 61c64930304b87d4aa81dca05aba09591b3b2d52 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 12 Jun 2005 23:47:59 +0000
Subject: [PATCH 055/124] Fix bug in withChronologyRetainFields because no
 validation occurred

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@787 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                           |  9 ++++++++-
 JodaTime/src/java/org/joda/time/TimeOfDay.java       | 10 +++++++---
 JodaTime/src/java/org/joda/time/YearMonthDay.java    | 12 ++++++++----
 .../test/org/joda/time/TestYearMonthDay_Basics.java  | 10 ++++++++++
 4 files changed, 33 insertions(+), 8 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 95d2415f2..ff3d1882d 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -18,7 +18,7 @@ Incompatible changes since 1.0
 ------------------------------
 Binary compatible - Yes
 Source compatible - Yes
-Serialization compatible - 95%
+Serialization compatible - Yes, except:
   - DateTime.Property, DateMidnight.Property and MutableDateTime.Property
    serialization formats have changed to fix a bug.
    Please note that this only affects the property classes, and not DateTime etc.
@@ -60,6 +60,13 @@ Bug fixes since 1.0
 - DateTimeFormatterBuilder/PeriodFormatterBuilder
   Number parser would accept multiple sign characters as valid.
 
+- YearMonthDay/TimeOfDay.withChronologyRetainFields
+  Previously, switching chronology did not validate the fields, so you could
+  end up with an object in an invalid state, such as a YearMonthDay where
+  dayOfMonth=31 with Coptic.
+  This method can now throw an IllegalArgumentException
+
+
 Enhancements since 1.0
 ----------------------
 - DateTime/DateMidnight/MutableDateTime/YearMonthDay/TimeOfDay
diff --git a/JodaTime/src/java/org/joda/time/TimeOfDay.java b/JodaTime/src/java/org/joda/time/TimeOfDay.java
index e5bc48bcd..96fc279c1 100644
--- a/JodaTime/src/java/org/joda/time/TimeOfDay.java
+++ b/JodaTime/src/java/org/joda/time/TimeOfDay.java
@@ -408,6 +408,7 @@ public DateTimeFieldType getFieldType(int index) {
      *
      * @param newChronology  the new chronology, null means ISO
      * @return a copy of this datetime with a different chronology
+     * @throws IllegalArgumentException if the values are invalid for the new chronology
      */
     public TimeOfDay withChronologyRetainFields(Chronology newChronology) {
         newChronology = DateTimeUtils.getChronology(newChronology);
@@ -415,7 +416,9 @@ public TimeOfDay withChronologyRetainFields(Chronology newChronology) {
         if (newChronology == getChronology()) {
             return this;
         } else {
-            return new TimeOfDay(this, newChronology);
+            TimeOfDay newTimeOfDay = new TimeOfDay(this, newChronology);
+            newChronology.validate(newTimeOfDay, getValues());
+            return newTimeOfDay;
         }
     }
 
@@ -711,9 +714,10 @@ public TimeOfDay minusMillis(int millis) {
 
     //-----------------------------------------------------------------------
     /**
-     * Gets the property object for the specified type, which contains many useful methods.
+     * Gets the property object for the specified type, which contains
+     * many useful methods.
      *
-     * @param type  the field type to get the chronology for
+     * @param type  the field type to get the property for
      * @return the property object
      * @throws IllegalArgumentException if the field is null or unsupported
      */
diff --git a/JodaTime/src/java/org/joda/time/YearMonthDay.java b/JodaTime/src/java/org/joda/time/YearMonthDay.java
index 75374e9ee..5e423cc93 100644
--- a/JodaTime/src/java/org/joda/time/YearMonthDay.java
+++ b/JodaTime/src/java/org/joda/time/YearMonthDay.java
@@ -295,11 +295,12 @@ public DateTimeFieldType getFieldType(int index) {
      * This method retains the values of the fields, thus the result will
      * typically refer to a different instant.
      * <p>
-     * The time zone of the specified chronology is ignored, as TimeOfDay
+     * The time zone of the specified chronology is ignored, as YearMonthDay
      * operates without a time zone.
      *
      * @param newChronology  the new chronology, null means ISO
      * @return a copy of this datetime with a different chronology
+     * @throws IllegalArgumentException if the values are invalid for the new chronology
      */
     public YearMonthDay withChronologyRetainFields(Chronology newChronology) {
         newChronology = DateTimeUtils.getChronology(newChronology);
@@ -307,7 +308,9 @@ public YearMonthDay withChronologyRetainFields(Chronology newChronology) {
         if (newChronology == getChronology()) {
             return this;
         } else {
-            return new YearMonthDay(this, newChronology);
+            YearMonthDay newYearMonthDay = new YearMonthDay(this, newChronology);
+            newChronology.validate(newYearMonthDay, getValues());
+            return newYearMonthDay;
         }
     }
 
@@ -559,9 +562,10 @@ public YearMonthDay minusDays(int days) {
 
     //-----------------------------------------------------------------------
     /**
-     * Gets the property object for the specified type, which contains many useful methods.
+     * Gets the property object for the specified type, which contains
+     * many useful methods.
      *
-     * @param type  the field type to get the chronology for
+     * @param type  the field type to get the property for
      * @return the property object
      * @throws IllegalArgumentException if the field is null or unsupported
      */
diff --git a/JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java b/JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java
index 212a5c58b..22ae60cab 100644
--- a/JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java
@@ -357,6 +357,16 @@ public void testWithChronologyRetainFields_nullChrono() {
         assertEquals(ISO_UTC, test.getChronology());
     }
 
+    public void testWithChronologyRetainFields_invalidInNewChrono() {
+        YearMonthDay base = new YearMonthDay(2005, 1, 31, ISO_UTC);
+        try {
+            base.withChronologyRetainFields(COPTIC_UTC);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expected
+        }
+    }
+
     //-----------------------------------------------------------------------
     public void testWithField1() {
         YearMonthDay test = new YearMonthDay(2004, 6, 9);

From 4092deb533e1b77bec990fd4a7b77c7f244fde04 Mon Sep 17 00:00:00 2001
From: Mario Ivankovits <mario@ops.co.at>
Date: Wed, 15 Jun 2005 14:26:21 +0000
Subject: [PATCH 056/124] Allow easier usage from within other (custom)
 usertypes

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@788 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/project.xml                   |  2 +-
 .../contrib/hibernate/PersistentDateTime.java | 69 ++++++++++++-------
 .../hibernate/PersistentDateTimeTZ.java       |  4 +-
 3 files changed, 50 insertions(+), 25 deletions(-)

diff --git a/JodaTimeContrib/project.xml b/JodaTimeContrib/project.xml
index 0aa97ddf3..1b3c59280 100644
--- a/JodaTimeContrib/project.xml
+++ b/JodaTimeContrib/project.xml
@@ -97,7 +97,7 @@
     <dependency>
       <groupId>hibernate</groupId>
       <artifactId>hibernate</artifactId>
-      <version>3.0.1</version>
+      <version>3.0.5</version>
     </dependency>
   </dependencies>
 
diff --git a/JodaTimeContrib/src/java/org/joda/time/contrib/hibernate/PersistentDateTime.java b/JodaTimeContrib/src/java/org/joda/time/contrib/hibernate/PersistentDateTime.java
index ce630895a..f7dba416d 100644
--- a/JodaTimeContrib/src/java/org/joda/time/contrib/hibernate/PersistentDateTime.java
+++ b/JodaTimeContrib/src/java/org/joda/time/contrib/hibernate/PersistentDateTime.java
@@ -17,7 +17,7 @@
 
 import org.hibernate.Hibernate;
 import org.hibernate.HibernateException;
-import org.hibernate.usertype.UserType;
+import org.hibernate.usertype.EnhancedUserType;
 import org.joda.time.DateTime;
 
 import java.io.Serializable;
@@ -31,9 +31,11 @@
  *
  * @author Mario Ivankovits (mario@ops.co.at)
  */
-public class PersistentDateTime implements UserType
+public class PersistentDateTime implements EnhancedUserType
 {
-    private static final int[] SQL_TYPES = new int[]
+	public final static PersistentDateTime INSTANCE = new PersistentDateTime();
+
+	private static final int[] SQL_TYPES = new int[]
     {
         Types.TIMESTAMP,
     };
@@ -71,26 +73,32 @@ public int hashCode(Object object) throws HibernateException
 
     public Object nullSafeGet(ResultSet resultSet, String[] strings, Object object) throws HibernateException, SQLException
     {
-        Object timestamp = Hibernate.TIMESTAMP.nullSafeGet(resultSet, strings[0]);
-        if (timestamp == null)
-        {
-            return null;
-        }
-
-        return new DateTime(timestamp);
-    }
-
-    public void nullSafeSet(PreparedStatement preparedStatement, Object value, int index) throws HibernateException, SQLException
-    {
-        if (value == null)
-        {
-            Hibernate.TIMESTAMP.nullSafeSet(preparedStatement, null, index);
-        }
-        else
-        {
-            Hibernate.TIMESTAMP.nullSafeSet(preparedStatement, ((DateTime) value).toDate(), index);
-        }
-    }
+		return nullSafeGet(resultSet, strings[0]);
+
+	}
+
+	public Object nullSafeGet(ResultSet resultSet, String string) throws SQLException
+	{
+		Object timestamp = Hibernate.TIMESTAMP.nullSafeGet(resultSet, string);
+		if (timestamp == null)
+		{
+			return null;
+		}
+
+		return new DateTime(timestamp);
+	}
+
+	public void nullSafeSet(PreparedStatement preparedStatement, Object value, int index) throws HibernateException, SQLException
+	{
+		if (value == null)
+		{
+			Hibernate.TIMESTAMP.nullSafeSet(preparedStatement, null, index);
+		}
+		else
+		{
+			Hibernate.TIMESTAMP.nullSafeSet(preparedStatement, ((DateTime) value).toDate(), index);
+		}
+	}
 
     public Object deepCopy(Object value) throws HibernateException
     {
@@ -121,4 +129,19 @@ public Object replace(Object original, Object target, Object owner) throws Hiber
     {
         return original;
     }
+
+	public String objectToSQLString(Object object)
+	{
+		throw new UnsupportedOperationException();
+	}
+
+	public String toXMLString(Object object)
+	{
+		return object.toString();
+	}
+
+	public Object fromXMLString(String string)
+	{
+		return new DateTime(string);
+	}
 }
diff --git a/JodaTimeContrib/src/java/org/joda/time/contrib/hibernate/PersistentDateTimeTZ.java b/JodaTimeContrib/src/java/org/joda/time/contrib/hibernate/PersistentDateTimeTZ.java
index 20262545f..e8ec0352f 100644
--- a/JodaTimeContrib/src/java/org/joda/time/contrib/hibernate/PersistentDateTimeTZ.java
+++ b/JodaTimeContrib/src/java/org/joda/time/contrib/hibernate/PersistentDateTimeTZ.java
@@ -35,7 +35,9 @@
  */
 public class PersistentDateTimeTZ implements UserType
 {
-    private static final int[] SQL_TYPES = new int[]
+	public final static PersistentDateTimeTZ INSTANCE = new PersistentDateTimeTZ();
+
+	private static final int[] SQL_TYPES = new int[]
     {
         Types.TIMESTAMP,
         Types.VARCHAR,

From ec648df5e91ab0cd0738a8a3556948afea85f62f Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Thu, 16 Jun 2005 10:55:05 +0000
Subject: [PATCH 057/124] Comment fix.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@789 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/DateMidnight.java | 5 +----
 1 file changed, 1 insertion(+), 4 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/DateMidnight.java b/JodaTime/src/java/org/joda/time/DateMidnight.java
index 81c330632..ad64bb9ef 100644
--- a/JodaTime/src/java/org/joda/time/DateMidnight.java
+++ b/JodaTime/src/java/org/joda/time/DateMidnight.java
@@ -265,10 +265,7 @@ public DateMidnight(int year, int monthOfYear, int dayOfMonth, Chronology chrono
     }
 
     /**
-     * Rounds the specified instant as required by the subclass.
-     * This method must not access instance variables.
-     * <p>
-     * This implementation performs no rounding and returns the instant.
+     * Rounds the specified instant to midnight.
      *
      * @param instant  the milliseconds from 1970-01-01T00:00:00Z to round
      * @param chronology  the chronology to use, not null

From 365e92cfbc7f9d390638b701b7a4198c34aac182 Mon Sep 17 00:00:00 2001
From: Mario Ivankovits <mario@ops.co.at>
Date: Fri, 17 Jun 2005 07:50:13 +0000
Subject: [PATCH 058/124] Persist: YearMonthDay

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@790 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../hibernate/PersistentYearMonthDay.java     | 147 ++++++++++++++++++
 .../contrib/hibernate/HibernateTestCase.java  |  37 +++++
 .../joda/time/contrib/hibernate/Schedule.java |  39 +++++
 .../hibernate/TestPersistentDateTime.java     |  37 +----
 .../hibernate/TestPersistentYearMonthDay.java |  60 +++++++
 .../time/contrib/hibernate/schedule.hbm.xml   |  16 ++
 6 files changed, 306 insertions(+), 30 deletions(-)
 create mode 100644 JodaTimeContrib/src/java/org/joda/time/contrib/hibernate/PersistentYearMonthDay.java
 create mode 100644 JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/HibernateTestCase.java
 create mode 100644 JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/Schedule.java
 create mode 100644 JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/TestPersistentYearMonthDay.java
 create mode 100644 JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/schedule.hbm.xml

diff --git a/JodaTimeContrib/src/java/org/joda/time/contrib/hibernate/PersistentYearMonthDay.java b/JodaTimeContrib/src/java/org/joda/time/contrib/hibernate/PersistentYearMonthDay.java
new file mode 100644
index 000000000..b3918bb42
--- /dev/null
+++ b/JodaTimeContrib/src/java/org/joda/time/contrib/hibernate/PersistentYearMonthDay.java
@@ -0,0 +1,147 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.contrib.hibernate;
+
+import org.hibernate.Hibernate;
+import org.hibernate.HibernateException;
+import org.hibernate.usertype.EnhancedUserType;
+import org.joda.time.YearMonthDay;
+
+import java.io.Serializable;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Types;
+
+/**
+ * Persist {@link org.joda.time.YearMonthDay} via hibernate
+ *
+ * @author Mario Ivankovits (mario@ops.co.at)
+ */
+public class PersistentYearMonthDay implements EnhancedUserType
+{
+	public final static PersistentYearMonthDay INSTANCE = new PersistentYearMonthDay();
+
+	private static final int[] SQL_TYPES = new int[]
+    {
+        Types.DATE,
+    };
+
+    public int[] sqlTypes()
+    {
+        return SQL_TYPES;
+    }
+
+    public Class returnedClass()
+    {
+        return YearMonthDay.class;
+    }
+
+    public boolean equals(Object x, Object y) throws HibernateException
+    {
+        if (x == y)
+        {
+            return true;
+        }
+        if (x == null || y == null)
+        {
+            return false;
+        }
+        YearMonthDay dtx = (YearMonthDay) x;
+        YearMonthDay dty = (YearMonthDay) y;
+
+        return dtx.equals(dty);
+    }
+
+    public int hashCode(Object object) throws HibernateException
+    {
+        return object.hashCode();
+    }
+
+    public Object nullSafeGet(ResultSet resultSet, String[] strings, Object object) throws HibernateException, SQLException
+    {
+		return nullSafeGet(resultSet, strings[0]);
+
+	}
+
+	public Object nullSafeGet(ResultSet resultSet, String string) throws SQLException
+	{
+		Object date = Hibernate.DATE.nullSafeGet(resultSet, string);
+		if (date == null)
+		{
+			return null;
+		}
+
+		return new YearMonthDay(date);
+	}
+
+	public void nullSafeSet(PreparedStatement preparedStatement, Object value, int index) throws HibernateException, SQLException
+	{
+		if (value == null)
+		{
+			Hibernate.DATE.nullSafeSet(preparedStatement, null, index);
+		}
+		else
+		{
+			Hibernate.DATE.nullSafeSet(preparedStatement, ((YearMonthDay) value).toDateMidnight().toDate(), index);
+		}
+	}
+
+    public Object deepCopy(Object value) throws HibernateException
+    {
+        if (value == null)
+        {
+            return null;
+        }
+
+        return new YearMonthDay(value);
+    }
+
+    public boolean isMutable()
+    {
+        return false;
+    }
+
+    public Serializable disassemble(Object value) throws HibernateException
+    {
+        return (Serializable) value;
+    }
+
+    public Object assemble(Serializable cached, Object value) throws HibernateException
+    {
+        return cached;
+    }
+
+    public Object replace(Object original, Object target, Object owner) throws HibernateException
+    {
+        return original;
+    }
+
+	public String objectToSQLString(Object object)
+	{
+		throw new UnsupportedOperationException();
+	}
+
+	public String toXMLString(Object object)
+	{
+		return object.toString();
+	}
+
+	public Object fromXMLString(String string)
+	{
+		return new YearMonthDay(string);
+	}
+}
diff --git a/JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/HibernateTestCase.java b/JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/HibernateTestCase.java
new file mode 100644
index 000000000..a0da2be8e
--- /dev/null
+++ b/JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/HibernateTestCase.java
@@ -0,0 +1,37 @@
+package org.joda.time.contrib.hibernate;
+
+import junit.framework.TestCase;
+import org.hibernate.SessionFactory;
+import org.hibernate.cfg.Configuration;
+import org.hibernate.dialect.HSQLDialect;
+import org.hibernate.tool.hbm2ddl.SchemaUpdate;
+
+public abstract class HibernateTestCase extends TestCase
+{
+	private SessionFactory factory;
+
+	protected SessionFactory getSessionFactory()
+	{
+		if (this.factory == null)
+		{
+			Configuration cfg = new Configuration();
+
+			setupConfiguration(cfg);
+
+			cfg.setProperty("hibernate.connection.driver_class", "org.hsqldb.jdbcDriver");
+			cfg.setProperty("hibernate.connection.url", "jdbc:hsqldb:mem:hbmtest");
+			cfg.setProperty("hibernate.dialect", HSQLDialect.class.getName());
+
+			cfg.setProperty("hibernate.show_sql", "true");
+			SessionFactory factory = cfg.buildSessionFactory();
+
+			SchemaUpdate update = new SchemaUpdate(cfg);
+			update.execute(true, true);
+
+			this.factory = factory;
+		}
+		return factory;
+	}
+
+	protected abstract void setupConfiguration(Configuration cfg);
+}
diff --git a/JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/Schedule.java b/JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/Schedule.java
new file mode 100644
index 000000000..b20bd4738
--- /dev/null
+++ b/JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/Schedule.java
@@ -0,0 +1,39 @@
+package org.joda.time.contrib.hibernate;
+
+import org.joda.time.DateTime;
+import org.joda.time.YearMonthDay;
+
+import java.io.Serializable;
+
+/**
+ * PO to be stored using hibernate
+ */
+public class Schedule implements Serializable
+{
+    private int id;
+    private YearMonthDay startDate;
+
+    public Schedule()
+    {
+    }
+
+    public int getId()
+    {
+        return id;
+    }
+
+    public void setId(int id)
+    {
+        this.id = id;
+    }
+
+	public YearMonthDay getStartDate()
+	{
+		return startDate;
+	}
+
+	public void setStartDate(YearMonthDay startDate)
+	{
+		this.startDate = startDate;
+	}
+}
diff --git a/JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/TestPersistentDateTime.java b/JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/TestPersistentDateTime.java
index 44eac2304..3a3b9b5f9 100644
--- a/JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/TestPersistentDateTime.java
+++ b/JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/TestPersistentDateTime.java
@@ -1,22 +1,17 @@
 package org.joda.time.contrib.hibernate;
 
-import junit.framework.TestCase;
 import org.hibernate.Session;
 import org.hibernate.SessionFactory;
 import org.hibernate.cfg.Configuration;
-import org.hibernate.dialect.HSQLDialect;
-import org.hibernate.tool.hbm2ddl.SchemaUpdate;
 import org.joda.time.DateTime;
 import org.joda.time.DateTimeZone;
 
 import java.io.File;
 import java.sql.SQLException;
 
-public class TestPersistentDateTime extends TestCase
+public class TestPersistentDateTime extends HibernateTestCase
 {
-    private SessionFactory factory;
-
-    private DateTime writeReadTimes[] = new DateTime[]
+    private DateTime[] writeReadTimes = new DateTime[]
     {
         new DateTime(2004, 2, 25, 17, 3, 45, 760),
         new DateTime(1980, 3, 11,  2, 3, 45,   0, DateTimeZone.forOffsetHours(2))
@@ -100,27 +95,9 @@ public void testStoreWithTimezone() throws SQLException
         }
     }
 
-    private SessionFactory getSessionFactory()
-    {
-        if (this.factory == null)
-        {
-            Configuration cfg = new Configuration();
-
-            cfg.addFile(new File("src/test/org/joda/time/contrib/hibernate/event.hbm.xml"));
-            cfg.addFile(new File("src/test/org/joda/time/contrib/hibernate/eventTZ.hbm.xml"));
-
-            cfg.setProperty("hibernate.connection.driver_class", "org.hsqldb.jdbcDriver");
-            cfg.setProperty("hibernate.connection.url", "jdbc:hsqldb:mem:hbmtest");
-            cfg.setProperty("hibernate.dialect", HSQLDialect.class.getName());
-
-            cfg.setProperty("hibernate.show_sql", "true");
-            SessionFactory factory = cfg.buildSessionFactory();
-
-            SchemaUpdate update = new SchemaUpdate(cfg);
-            update.execute(false, true);
-
-            this.factory = factory;
-        }
-        return factory;
-    }
+	protected void setupConfiguration(Configuration cfg)
+	{
+		cfg.addFile(new File("src/test/org/joda/time/contrib/hibernate/event.hbm.xml"));
+		cfg.addFile(new File("src/test/org/joda/time/contrib/hibernate/eventTZ.hbm.xml"));
+	}
 }
diff --git a/JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/TestPersistentYearMonthDay.java b/JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/TestPersistentYearMonthDay.java
new file mode 100644
index 000000000..7d8f5ec70
--- /dev/null
+++ b/JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/TestPersistentYearMonthDay.java
@@ -0,0 +1,60 @@
+package org.joda.time.contrib.hibernate;
+
+import org.hibernate.Session;
+import org.hibernate.SessionFactory;
+import org.hibernate.cfg.Configuration;
+import org.joda.time.YearMonthDay;
+
+import java.io.File;
+import java.sql.SQLException;
+
+public class TestPersistentYearMonthDay extends HibernateTestCase
+{
+    private YearMonthDay[] writeReadTimes = new YearMonthDay[]
+    {
+        new YearMonthDay(2004, 2, 25),
+        new YearMonthDay(1980, 3, 11)
+    };
+
+    public void testSimpleStore() throws SQLException
+    {
+        SessionFactory factory = getSessionFactory();
+
+        Session session = factory.openSession();
+
+        for (int i = 0; i<writeReadTimes.length; i++)
+        {
+            YearMonthDay writeReadTime = writeReadTimes[i];
+
+            Schedule event = new Schedule();
+            event.setId(i);
+            event.setStartDate(writeReadTime);
+
+            session.save(event);
+        }
+
+        session.flush();
+        session.connection().commit();
+        session.close();
+
+        for (int i = 0; i<writeReadTimes.length; i++)
+        {
+            YearMonthDay writeReadTime = writeReadTimes[i];
+
+            session = factory.openSession();
+            Schedule eventReread = (Schedule) session.get(Schedule.class, new Integer(i));
+
+            assertNotNull("get failed - event#'" + i + "'not found", eventReread);
+            assertNotNull("get failed - returned null", eventReread.getStartDate());
+
+            assertEquals("get failed - returned different date", writeReadTime, eventReread.getStartDate());
+
+            session.close();
+        }
+    }
+
+	protected void setupConfiguration(Configuration cfg)
+	{
+		cfg.addFile(new File("src/test/org/joda/time/contrib/hibernate/schedule.hbm.xml"));
+	}
+}
diff --git a/JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/schedule.hbm.xml b/JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/schedule.hbm.xml
new file mode 100644
index 000000000..455964b7a
--- /dev/null
+++ b/JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/schedule.hbm.xml
@@ -0,0 +1,16 @@
+<?xml version="1.0"?>
+<!DOCTYPE hibernate-mapping PUBLIC
+        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
+        "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
+
+<hibernate-mapping package="org.joda.time.contrib.hibernate">
+
+        <class name="Schedule">
+
+                <id name="id" />
+
+                <property type="org.joda.time.contrib.hibernate.PersistentYearMonthDay" name="startDate"/>
+
+        </class>
+
+</hibernate-mapping>

From a498adb4a3d6b355cd7e653e55b179acfbf3f4f9 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Mon, 20 Jun 2005 04:48:21 +0000
Subject: [PATCH 059/124] Overflowed calculations involving year throw
 ArithmeticException rather than produce a bogus result.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@791 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  2 +
 .../joda/time/chrono/BaseGJChronology.java    | 60 +++------------
 .../joda/time/chrono/CopticChronology.java    | 22 +++++-
 .../joda/time/chrono/GregorianChronology.java | 53 +++++++------
 .../joda/time/chrono/JulianChronology.java    | 25 ++++--
 .../joda/time/chrono/TestISOChronology.java   | 76 +++++++++++++++++++
 6 files changed, 155 insertions(+), 83 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index ff3d1882d..7a0b670af 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -66,6 +66,8 @@ Bug fixes since 1.0
   dayOfMonth=31 with Coptic.
   This method can now throw an IllegalArgumentException
 
+- Overflowed calculations involving year throw ArithmeticException rather than
+  produce a bogus result.
 
 Enhancements since 1.0
 ----------------------
diff --git a/JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java b/JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java
index 3a0bb54f8..0e52fd95a 100644
--- a/JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java
@@ -51,8 +51,6 @@
     /** Serialization lock */
     private static final long serialVersionUID = 8283225332206808863L;
 
-    static final long MILLIS_1970_TO_2000 = 946684800000L;
-
     private static final DurationField cMillisField;
     private static final DurationField cSecondsField;
     private static final DurationField cMinutesField;
@@ -399,20 +397,22 @@ int getYear(long instant) {
         }
         int year = (int) (i2 / unitMillis);
 
-        long yearStart = getYearMillis(year);
+        long yearStart;
+        try {
+            yearStart = getYearMillis(year);
+        } catch (ArithmeticException e) {
+            if (instant > 0) {
+                throw new ArithmeticException("Instant too large: " + instant);
+            } else {
+                throw new ArithmeticException("Instant too small: " + instant);
+            }
+        }
+
         long diff = instant - yearStart;
 
         if (diff < 0) {
-            if (diff < -DateTimeConstants.MILLIS_PER_DAY * 2L) {
-                // Too much error, assume operation overflowed.
-                return getYearOverflow(instant);
-            }
             year--;
         } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {
-            if (diff >= DateTimeConstants.MILLIS_PER_DAY * 367L) {
-                // Too much error, assume operation overflowed.
-                return getYearOverflow(instant);
-            }
             // One year may need to be added to fix estimate.
             long oneYear;
             if (isLeapYear(year)) {
@@ -423,15 +423,6 @@ int getYear(long instant) {
 
             yearStart += oneYear;
 
-            if ((yearStart ^ instant) < 0) {
-                // Sign mismatch, operation may have overflowed.
-                if ((yearStart <  0 && (yearStart - oneYear) >= 0) ||
-                    (yearStart >= 0 && (yearStart - oneYear) <  0)   ) {
-                    // It overflowed.
-                    return getYearOverflow(instant);
-                }
-            }
-
             if (yearStart <= instant) {
                 // Didn't go too far, so actually add one year.
                 year++;
@@ -441,35 +432,6 @@ int getYear(long instant) {
         return year;
     }
 
-    private int getYearOverflow(long instant) {
-        if (instant > 0) {
-            int year = getMaxYear();
-            long yearStartMillis = getYearMillis(year);
-            if (isLeapYear(year)) {
-                yearStartMillis += DateTimeConstants.MILLIS_PER_DAY * 366L;
-            } else {
-                yearStartMillis += DateTimeConstants.MILLIS_PER_DAY * 365L;
-            }
-            long yearEndMillis = yearStartMillis - 1;
-
-            if (instant <= yearEndMillis) {
-                return year;
-            }
-
-            throw new IllegalArgumentException
-                ("Instant too large: " + instant + " > " + yearEndMillis);
-        } else {
-            int year = getMinYear();
-            long yearStartMillis = getYearMillis(year);
-            if (instant >= yearStartMillis) {
-                return year;
-            }
-
-            throw new IllegalArgumentException
-                ("Instant too small: " + instant + " < " + yearStartMillis);
-        }
-    }
-
     /**
      * @param millis from 1970-01-01T00:00:00Z
      */
diff --git a/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java b/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java
index fbdc592d4..36ecaae96 100644
--- a/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java
@@ -69,6 +69,15 @@
     private static final long MILLIS_PER_MONTH =
         (long) (365.25 * DateTimeConstants.MILLIS_PER_DAY / 12);
 
+    // The lowest year that can be fully supported.
+    private static final int MIN_YEAR = -292269337;
+
+    // The highest year that can be fully supported. Although
+    // calculateFirstDayOfYearMillis can go higher without overflowing, the
+    // getYear method overflows when it adds the approximate millis at the
+    // epoch.
+    private static final int MAX_YEAR = 292271022;
+
     private static final DurationField cMonthsField;
 
     /** Singleton instance of a UTC CopticChronology */
@@ -284,6 +293,13 @@ int getMonthOfYear(long millis, int year) {
     
     //-----------------------------------------------------------------------
     long calculateFirstDayOfYearMillis(int year) {
+        if (year > MAX_YEAR) {
+            throw new ArithmeticException("Year is too large: " + year + " > " + MAX_YEAR);
+        }
+        if (year < MIN_YEAR) {
+            throw new ArithmeticException("Year is too small: " + year + " < " + MIN_YEAR);
+        }
+
         // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.
         // Calculate relative to the nearest leap year and account for the
         // difference later.
@@ -312,14 +328,12 @@ long calculateFirstDayOfYearMillis(int year) {
 
     //-----------------------------------------------------------------------
     int getMinYear() {
-        // The lowest year that can be fully supported.
-        return -292269337;
+        return MIN_YEAR;
     }
 
     //-----------------------------------------------------------------------
     int getMaxYear() {
-        // The highest year that can be fully supported.
-        return 292271022;
+        return MAX_YEAR;
     }
 
     //-----------------------------------------------------------------------
diff --git a/JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java b/JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java
index 43cd71bad..c8956da99 100644
--- a/JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java
@@ -53,6 +53,17 @@
     private static final long MILLIS_PER_MONTH =
         (long) (365.2425 * DateTimeConstants.MILLIS_PER_DAY / 12);
 
+    private static final int DAYS_0000_TO_1970 = 719527;
+
+    // The lowest year that can be fully supported.
+    private static final int MIN_YEAR = -292275054;
+
+    // The highest year that can be fully supported. Although
+    // calculateFirstDayOfYearMillis can operate on years up to 292278994
+    // without overflowing, the getYear method overflows when it adds the
+    // approximate millis at the epoch.
+    private static final int MAX_YEAR = 292277023;
+
     /** Singleton instance of a UTC GregorianChronology */
     private static final GregorianChronology INSTANCE_UTC;
 
@@ -186,44 +197,38 @@ boolean isLeapYear(int year) {
     }
 
     long calculateFirstDayOfYearMillis(int year) {
-        // Calculate relative to 2000 as that is on a 400 year boundary
-        // and that makes the sum easier
-        int relativeYear = year - 2000;
+        if (year > MAX_YEAR) {
+            throw new ArithmeticException("Year is too large: " + year + " > " + MAX_YEAR);
+        }
+        if (year < MIN_YEAR) {
+            throw new ArithmeticException("Year is too small: " + year + " < " + MIN_YEAR);
+        }
+
         // Initial value is just temporary.
-        int leapYears = relativeYear / 100;
-        if (relativeYear <= 0) {
+        int leapYears = year / 100;
+        if (year < 0) {
             // Add 3 before shifting right since /4 and >>2 behave differently
             // on negative numbers. When the expression is written as
-            // (relativeYear / 4) - (relativeYear / 100) + (relativeYear / 400),
+            // (year / 4) - (year / 100) + (year / 400),
             // it works for both positive and negative values, except this optimization
             // eliminates two divisions.
-            leapYears = ((relativeYear + 3) >> 2) - leapYears + ((leapYears + 3) >> 2);
+            leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;
         } else {
-            leapYears = (relativeYear >> 2) - leapYears + (leapYears >> 2);
-            // For post 2000 an adjustment is needed as jan1st is before leap day
-            if (!isLeapYear(year)) {
-                leapYears++;
+            leapYears = (year >> 2) - leapYears + (leapYears >> 2);
+            if (isLeapYear(year)) {
+                leapYears--;
             }
         }
-        
-        long millis = (relativeYear * 365L + leapYears)
-            * (long)DateTimeConstants.MILLIS_PER_DAY;
-        
-        // Previous line was reduced from this to eliminate a multiplication.
-        // millis = ((relativeYear - leapYears) * 365L + leapYears * 366) * MILLIS_PER_DAY;
-        // (x - y)*c + y*(c + 1) => x*c - y*c + y*c + y => x*c + y
-        
-        return millis + MILLIS_1970_TO_2000;
+
+        return (year * 365L + (leapYears - DAYS_0000_TO_1970)) * DateTimeConstants.MILLIS_PER_DAY;
     }
 
     int getMinYear() {
-        // The lowest year that can be fully supported.
-        return -292275054;
+        return MIN_YEAR;
     }
 
     int getMaxYear() {
-        // The highest year that can be fully supported.
-        return 292277023;
+        return MAX_YEAR;
     }
 
     long getAverageMillisPerYear() {
diff --git a/JodaTime/src/java/org/joda/time/chrono/JulianChronology.java b/JodaTime/src/java/org/joda/time/chrono/JulianChronology.java
index 988e0ee51..4ca81769a 100644
--- a/JodaTime/src/java/org/joda/time/chrono/JulianChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/JulianChronology.java
@@ -58,6 +58,15 @@
     private static final long MILLIS_PER_MONTH =
         (long) (365.25 * DateTimeConstants.MILLIS_PER_DAY / 12);
 
+    // The lowest year that can be fully supported.
+    private static final int MIN_YEAR = -292269054;
+
+    // The highest year that can be fully supported. Although
+    // calculateFirstDayOfYearMillis can go higher without overflowing, the
+    // getYear method overflows when it adds the approximate millis at the
+    // epoch.
+    private static final int MAX_YEAR = 292271022;
+
     /** Singleton instance of a UTC JulianChronology */
     private static final JulianChronology INSTANCE_UTC;
 
@@ -202,6 +211,13 @@ boolean isLeapYear(int year) {
     }
 
     long calculateFirstDayOfYearMillis(int year) {
+        if (year > MAX_YEAR) {
+            throw new ArithmeticException("Year is too large: " + year + " > " + MAX_YEAR);
+        }
+        if (year < MIN_YEAR) {
+            throw new ArithmeticException("Year is too small: " + year + " < " + MIN_YEAR);
+        }
+
         // Java epoch is 1970-01-01 Gregorian which is 1969-12-19 Julian.
         // Calculate relative to the nearest leap year and account for the
         // difference later.
@@ -220,8 +236,7 @@ long calculateFirstDayOfYearMillis(int year) {
             }
         }
         
-        long millis = (relativeYear * 365L + leapYears)
-            * (long)DateTimeConstants.MILLIS_PER_DAY;
+        long millis = (relativeYear * 365L + leapYears) * (long)DateTimeConstants.MILLIS_PER_DAY;
 
         // Adjust to account for difference between 1968-01-01 and 1969-12-19.
 
@@ -229,13 +244,11 @@ long calculateFirstDayOfYearMillis(int year) {
     }
 
     int getMinYear() {
-        // The lowest year that can be fully supported.
-        return -292269054;
+        return MIN_YEAR;
     }
 
     int getMaxYear() {
-        // The highest year that can be fully supported.
-        return 292271022;
+        return MAX_YEAR;
     }
 
     long getAverageMillisPerYear() {
diff --git a/JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java b/JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java
index 04599037a..348196c64 100644
--- a/JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java
+++ b/JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java
@@ -21,9 +21,11 @@
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
 
+import org.joda.time.DateTime;
 import org.joda.time.DateTimeConstants;
 import org.joda.time.DateTimeUtils;
 import org.joda.time.DateTimeZone;
+import org.joda.time.IllegalFieldValueException;
 
 /**
  * This class is a Junit unit test for ISOChronology.
@@ -237,4 +239,78 @@ public void testTimeFields() {
         assertEquals(true, ISOChronology.getInstance().millisOfSecond().isSupported());
     }
 
+    public void testMaxYear() {
+        final ISOChronology chrono = ISOChronology.getInstanceUTC();
+        final int maxYear = chrono.year().getMaximumValue();
+
+        DateTime start = new DateTime(maxYear, 1, 1, 0, 0, 0, 0, chrono);
+        DateTime end = new DateTime(maxYear, 12, 31, 23, 59, 59, 999, chrono);
+        assertTrue(start.getMillis() > 0);
+        assertTrue(end.getMillis() > start.getMillis());
+        assertEquals(maxYear, start.getYear());
+        assertEquals(maxYear, end.getYear());
+        long delta = end.getMillis() - start.getMillis();
+        long expectedDelta = 
+            (start.year().isLeap() ? 366L : 365L) * DateTimeConstants.MILLIS_PER_DAY - 1;
+        assertEquals(expectedDelta, delta);
+
+        assertEquals(start, new DateTime(maxYear + "-01-01T00:00:00.000Z", chrono));
+        assertEquals(end, new DateTime(maxYear + "-12-31T23:59:59.999Z", chrono));
+
+        try {
+            start.plusYears(1);
+            fail();
+        } catch (IllegalFieldValueException e) {
+        }
+
+        try {
+            end.plusYears(1);
+            fail();
+        } catch (IllegalFieldValueException e) {
+        }
+
+        try {
+            chrono.year().get(Long.MAX_VALUE);
+            fail();
+        } catch (ArithmeticException e) {
+        }
+    }
+
+    public void testMinYear() {
+        final ISOChronology chrono = ISOChronology.getInstanceUTC();
+        final int minYear = chrono.year().getMinimumValue();
+
+        DateTime start = new DateTime(minYear, 1, 1, 0, 0, 0, 0, chrono);
+        DateTime end = new DateTime(minYear, 12, 31, 23, 59, 59, 999, chrono);
+        assertTrue(start.getMillis() < 0);
+        assertTrue(end.getMillis() > start.getMillis());
+        assertEquals(minYear, start.getYear());
+        assertEquals(minYear, end.getYear());
+        long delta = end.getMillis() - start.getMillis();
+        long expectedDelta = 
+            (start.year().isLeap() ? 366L : 365L) * DateTimeConstants.MILLIS_PER_DAY - 1;
+        assertEquals(expectedDelta, delta);
+
+        assertEquals(start, new DateTime(minYear + "-01-01T00:00:00.000Z", chrono));
+        assertEquals(end, new DateTime(minYear + "-12-31T23:59:59.999Z", chrono));
+
+        try {
+            start.minusYears(1);
+            fail();
+        } catch (IllegalFieldValueException e) {
+        }
+
+        try {
+            end.minusYears(1);
+            fail();
+        } catch (IllegalFieldValueException e) {
+        }
+
+        try {
+            chrono.year().get(Long.MIN_VALUE);
+            fail();
+        } catch (ArithmeticException e) {
+        }
+    }
+
 }

From bb9ba444fdb0b52cd9f86d1cca950350e02f759b Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Sun, 26 Jun 2005 13:54:57 +0000
Subject: [PATCH 060/124] Minor typo.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@792 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/field.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/JodaTime/xdocs/field.xml b/JodaTime/xdocs/field.xml
index 47e6eb90a..3c3feb593 100644
--- a/JodaTime/xdocs/field.xml
+++ b/JodaTime/xdocs/field.xml
@@ -466,7 +466,7 @@ For ISO this represents a straight split of a textual ISO8601 year.
 <subsection name="YearOfEra">
 <p>
 The year as generally known (always positive).
-Both the GJ and ISO chronologies return 1 for 1BC/BCE, 2 for 2BC/CBE etc.
+Both the GJ and ISO chronologies return 1 for 1BC/BCE, 2 for 2BC/BCE etc.
 In other words there is no year zero and no negative value for this field.
 </p>
 </subsection>

From c2915308a21b26508d16410c51c73dbd5d3eeba4 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 26 Jun 2005 18:08:28 +0000
Subject: [PATCH 061/124] Attempt to boost Google results for 'ISO 8601' and
 'ISO8601 java'

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@793 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/cal_iso.xml | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/JodaTime/xdocs/cal_iso.xml b/JodaTime/xdocs/cal_iso.xml
index 44c63b906..3bdb14331 100644
--- a/JodaTime/xdocs/cal_iso.xml
+++ b/JodaTime/xdocs/cal_iso.xml
@@ -9,9 +9,9 @@
 
  <body>
 
-<section name="ISO8601 calendar system">
+<section name="ISO8601 Java calendar system">
 <p>
-The ISO8601 calendar system is the default implementation within Joda-Time.
+The ISO 8601 calendar system is the default implementation within Joda-Time.
 The standard formalises the <a href="cal_gregorian.html">Gregorian</a> calendar
 system used by the modern business world.
 </p>

From 94b1ea2c3d4f2ec7edf87a5985e9408ddd7c66ef Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 26 Jun 2005 18:13:24 +0000
Subject: [PATCH 062/124] Fix bug in
 DateTimeFormatterBuilder.canBuildFormatter() where it always returned false

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@794 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                               | 7 ++++++-
 .../org/joda/time/format/DateTimeFormatterBuilder.java   | 9 +--------
 2 files changed, 7 insertions(+), 9 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 7a0b670af..16f23e385 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -66,9 +66,14 @@ Bug fixes since 1.0
   dayOfMonth=31 with Coptic.
   This method can now throw an IllegalArgumentException
 
-- Overflowed calculations involving year throw ArithmeticException rather than
+- Chronologies
+  Overflowed calculations involving year throw ArithmeticException rather than
   produce a bogus result.
 
+- DateTimeFormatterBuilder.canBuildFormatter()
+  Previously this method always returned false.
+
+
 Enhancements since 1.0
 ----------------------
 - DateTime/DateMidnight/MutableDateTime/YearMonthDay/TimeOfDay
diff --git a/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java b/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java
index 1bd65cb04..c46283581 100644
--- a/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java
+++ b/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java
@@ -993,14 +993,7 @@ private boolean isParser(Object f) {
     }
 
     private boolean isFormatter(Object f) {
-        if (f instanceof DateTimeFormatter) {
-            if (f instanceof Composite) {
-                return ((Composite)f).isPrinter()
-                    || ((Composite)f).isParser();
-            }
-            return true;
-        }
-        return false;
+        return (isPrinter(f) || isParser(f));
     }
 
     static void appendUnknownString(StringBuffer buf, int len) {

From 17eb41943b7289bb9607e0f840076b61a3e3c707 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 26 Jun 2005 23:02:36 +0000
Subject: [PATCH 063/124] Add ISODateTimeFormat.forFields to get a suitable
 format for a subset of datetime fields

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@795 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../joda/time/format/ISODateTimeFormat.java   |  399 ++++++
 .../test/org/joda/time/format/TestAll.java    |    1 +
 .../format/TestISODateTimeFormat_Fields.java  | 1106 +++++++++++++++++
 3 files changed, 1506 insertions(+)
 create mode 100644 JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat_Fields.java

diff --git a/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java b/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java
index 1b40b61c4..82ae0558d 100644
--- a/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java
+++ b/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java
@@ -15,6 +15,10 @@
  */
 package org.joda.time.format;
 
+import java.util.Collection;
+
+import org.joda.time.DateTimeFieldType;
+
 /**
  * Factory that creates instances of DateTimeFormatter for the ISO8601 standard.
  * <p>
@@ -34,6 +38,14 @@
  * String str = fmt.print(dt);
  * </pre>
  * <p>
+ * It is important to understand that these formatters are not linked to
+ * the <code>ISOChronology</code>. These formatters may be used with any
+ * chronology, however there may be certain side effects with more unusual
+ * chronologies. For example, the ISO formatters rely on dayOfWeek being
+ * single digit, dayOfMonth being two digit and dayOfYear being three digit.
+ * A chronology with a ten day week would thus cause issues. However, in
+ * general, it is safe to use these formatters with other chronologies.
+ * <p>
  * ISODateTimeFormat is thread-safe and immutable, and the formatters it
  * returns are as well.
  *
@@ -119,6 +131,393 @@
     private ISODateTimeFormat() {
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Returns a formatter that outputs only those fields specified.
+     * <p>
+     * This method examines the fields provided and returns an ISO-style
+     * formatter that best fits. This can be useful for outputting
+     * less-common ISO styles, such as YearMonth (YYYY-MM) or MonthDay (--MM-DD).
+     * <p>
+     * The list provided may have overlapping fields, such as dayOfWeek and
+     * dayOfMonth. In this case, the style is chosen based on the following
+     * list, thus in the example, the calendar style is chosen as dayOfMonth
+     * is higher in priority than dayOfWeek:
+     * <ul>
+     * <li>monthOfYear - calendar date style
+     * <li>dayOfYear - ordinal date style
+     * <li>weekOfWeekYear - week date style
+     * <li>dayOfMonth - calendar date style
+     * <li>dayOfWeek - week date style
+     * <li>year
+     * <li>weekyear
+     * </ul>
+     * The supported formats are:
+     * <pre>
+     * Extended      Basic       Fields
+     * 2005-03-25    20050325    year/monthOfYear/dayOfMonth
+     * 2005-03       2005-03     year/monthOfYear
+     * 2005--25      2005--25    year/dayOfMonth *
+     * 2005          2005        year
+     * --03-25       --0325      monthOfYear/dayOfMonth
+     * --03          --03        monthOfYear
+     * ---03         ---03       dayOfMonth
+     * 2005-084      2005084     year/dayOfYear
+     * -084          -084        dayOfYear
+     * 2005-W12-5    2005W125    weekyear/weekOfWeekyear/dayOfWeek
+     * 2005-W-5      2005W-5     weekyear/dayOfWeek *
+     * 2005-W12      2005W12     weekyear/weekOfWeekyear
+     * -W12-5        -W125       weekOfWeekyear/dayOfWeek
+     * -W12          -W12        weekOfWeekyear
+     * -W-5          -W-5        dayOfWeek
+     * 10:20:30.040  102030.040  hour/minute/second/milli
+     * 10:20:30      102030      hour/minute/second
+     * 10:20         1020        hour/minute
+     * 10            10          hour
+     * -20:30.040    -2030.040   minute/second/milli
+     * -20:30        -2030       minute/second
+     * -20           -20         minute
+     * --30.040      --30.040    second/milli
+     * --30          --30        second
+     * ---.040       ---.040     milli *
+     * 10-30.040     10-30.040   hour/second/milli *
+     * 10:20-.040    1020-.040   hour/minute/milli *
+     * 10-30         10-30       hour/second *
+     * 10--.040      10--.040    hour/milli *
+     * -20-.040      -20-.040    minute/milli *
+     *   plus datetime formats like {date}T{time}
+     * </pre>
+     * * indiates that this is not an official ISO format and can be excluded
+     * by passing in <code>strictISO</code> as <code>true</code>.
+     *
+     * @param fields  the fields to get a formatter for, not null,
+     *  updated by the method call, which removes those fields built in the formatter
+     * @param extended  true to use the extended format (with separators)
+     * @param strictISO  true to stick exactly to ISO8601, false to include additional formats
+     * @return a suitable formatter
+     * @throws IllegalArgumentException if there is no format for the fields
+     * @since 1.1
+     */
+    public static DateTimeFormatter forFields(
+        Collection fields,
+        boolean extended,
+        boolean strictISO) {
+        
+        if (fields == null || fields.size() == 0) {
+            throw new IllegalArgumentException("The fields must not be null or empty");
+        }
+        int inputSize = fields.size();
+        boolean reducedPrec = false;
+        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();
+        // date
+        if (fields.contains(DateTimeFieldType.monthOfYear())) {
+            reducedPrec = dateByMonth(bld, fields, extended, strictISO);
+        } else if (fields.contains(DateTimeFieldType.dayOfYear())) {
+            reducedPrec = dateByOrdinal(bld, fields, extended, strictISO);
+        } else if (fields.contains(DateTimeFieldType.weekOfWeekyear())) {
+            reducedPrec = dateByWeek(bld, fields, extended, strictISO);
+        } else if (fields.contains(DateTimeFieldType.dayOfMonth())) {
+            reducedPrec = dateByMonth(bld, fields, extended, strictISO);
+        } else if (fields.contains(DateTimeFieldType.dayOfWeek())) {
+            reducedPrec = dateByWeek(bld, fields, extended, strictISO);
+        } else if (fields.remove(DateTimeFieldType.year())) {
+            bld.append(yearElement());
+            reducedPrec = true;
+        } else if (fields.remove(DateTimeFieldType.weekyear())) {
+            bld.append(weekyearElement());
+            reducedPrec = true;
+        }
+        boolean datePresent = (fields.size() < inputSize);
+        
+        // time
+        time(bld, fields, extended, strictISO, reducedPrec, datePresent);
+        
+        // result
+        if (bld.canBuildFormatter() == false) {
+            throw new IllegalArgumentException("No valid format for fields: " + fields);
+        }
+        return bld.toFormatter();
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Creates a date using the calendar date format.
+     * Specification reference: 5.2.1.
+     *
+     * @param bld  the builder
+     * @param fields  the fields
+     * @param extended  true to use extended format
+     * @param strictISO  true to only allow ISO formats
+     * @return true if reduced precision
+     * @since 1.1
+     */
+    private static boolean dateByMonth(
+        DateTimeFormatterBuilder bld,
+        Collection fields,
+        boolean extended,
+        boolean strictISO) {
+        
+        boolean reducedPrec = false;
+        if (fields.remove(DateTimeFieldType.year())) {
+            bld.append(yearElement());
+            if (fields.remove(DateTimeFieldType.monthOfYear())) {
+                if (fields.remove(DateTimeFieldType.dayOfMonth())) {
+                    // YYYY-MM-DD/YYYYMMDD
+                    appendSeparator(bld, extended);
+                    bld.appendMonthOfYear(2);
+                    appendSeparator(bld, extended);
+                    bld.appendDayOfMonth(2);
+                } else {
+                    // YYYY-MM/YYYY-MM
+                    bld.appendLiteral('-');
+                    bld.appendMonthOfYear(2);
+                    reducedPrec = true;
+                }
+            } else {
+                if (fields.remove(DateTimeFieldType.dayOfMonth())) {
+                    // YYYY--DD/YYYY--DD (non-iso)
+                    checkNotStrictISO(fields, strictISO);
+                    bld.appendLiteral('-');
+                    bld.appendLiteral('-');
+                    bld.appendDayOfMonth(2);
+                } else {
+                    // YYYY/YYYY
+                    reducedPrec = true;
+                }
+            }
+            
+        } else if (fields.remove(DateTimeFieldType.monthOfYear())) {
+            bld.appendLiteral('-');
+            bld.appendLiteral('-');
+            bld.appendMonthOfYear(2);
+            if (fields.remove(DateTimeFieldType.dayOfMonth())) {
+                // --MM-DD/--MMDD
+                appendSeparator(bld, extended);
+                bld.appendDayOfMonth(2);
+            } else {
+                // --MM/--MM
+                reducedPrec = true;
+            }
+        } else if (fields.remove(DateTimeFieldType.dayOfMonth())) {
+            // ---DD/---DD
+            bld.appendLiteral('-');
+            bld.appendLiteral('-');
+            bld.appendLiteral('-');
+            bld.appendDayOfMonth(2);
+        }
+        return reducedPrec;
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Creates a date using the ordinal date format.
+     * Specification reference: 5.2.2.
+     *
+     * @param bld  the builder
+     * @param fields  the fields
+     * @param extended  true to use extended format
+     * @param strictISO  true to only allow ISO formats
+     * @since 1.1
+     */
+    private static boolean dateByOrdinal(
+        DateTimeFormatterBuilder bld,
+        Collection fields,
+        boolean extended,
+        boolean strictISO) {
+        
+        boolean reducedPrec = false;
+        if (fields.remove(DateTimeFieldType.year())) {
+            bld.append(yearElement());
+            if (fields.remove(DateTimeFieldType.dayOfYear())) {
+                // YYYY-DDD/YYYYDDD
+                appendSeparator(bld, extended);
+                bld.appendDayOfYear(3);
+            } else {
+                // YYYY/YYYY
+                reducedPrec = true;
+            }
+            
+        } else if (fields.remove(DateTimeFieldType.dayOfYear())) {
+            // -DDD/-DDD
+            bld.appendLiteral('-');
+            bld.appendDayOfYear(3);
+        }
+        return reducedPrec;
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Creates a date using the calendar date format.
+     * Specification reference: 5.2.3.
+     *
+     * @param bld  the builder
+     * @param fields  the fields
+     * @param extended  true to use extended format
+     * @param strictISO  true to only allow ISO formats
+     * @since 1.1
+     */
+    private static boolean dateByWeek(
+        DateTimeFormatterBuilder bld,
+        Collection fields,
+        boolean extended,
+        boolean strictISO) {
+        
+        boolean reducedPrec = false;
+        if (fields.remove(DateTimeFieldType.weekyear())) {
+            bld.append(weekyearElement());
+            if (fields.remove(DateTimeFieldType.weekOfWeekyear())) {
+                appendSeparator(bld, extended);
+                bld.appendLiteral('W');
+                bld.appendWeekOfWeekyear(2);
+                if (fields.remove(DateTimeFieldType.dayOfWeek())) {
+                    // YYYY-WWW-D/YYYYWWWD
+                    appendSeparator(bld, extended);
+                    bld.appendDayOfWeek(1);
+                } else {
+                    // YYYY-WWW/YYYY-WWW
+                    reducedPrec = true;
+                }
+            } else {
+                if (fields.remove(DateTimeFieldType.dayOfWeek())) {
+                    // YYYY-W-D/YYYYW-D (non-iso)
+                    checkNotStrictISO(fields, strictISO);
+                    appendSeparator(bld, extended);
+                    bld.appendLiteral('W');
+                    bld.appendLiteral('-');
+                    bld.appendDayOfWeek(1);
+                } else {
+                    // YYYY/YYYY
+                    reducedPrec = true;
+                }
+            }
+            
+        } else if (fields.remove(DateTimeFieldType.weekOfWeekyear())) {
+            bld.appendLiteral('-');
+            bld.appendLiteral('W');
+            bld.appendWeekOfWeekyear(2);
+            if (fields.remove(DateTimeFieldType.dayOfWeek())) {
+                // -WWW-D/-WWWD
+                appendSeparator(bld, extended);
+                bld.appendDayOfWeek(1);
+            } else {
+                // -WWW/-WWW
+                reducedPrec = true;
+            }
+        } else if (fields.remove(DateTimeFieldType.dayOfWeek())) {
+            // -W-D/-W-D
+            bld.appendLiteral('-');
+            bld.appendLiteral('W');
+            bld.appendLiteral('-');
+            bld.appendDayOfWeek(1);
+        }
+        return reducedPrec;
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Adds the time fields to the builder.
+     * Specification reference: 5.3.1.
+     * 
+     * @param bld  the builder
+     * @param fields  the fields
+     * @param extended  whether to use the extended format
+     * @param strictISO  whether to be strict
+     * @param reducedPrec  whether the date was reduced precision
+     * @param datePresent  whether there was a date
+     * @since 1.1
+     */
+    private static void time(
+        DateTimeFormatterBuilder bld,
+        Collection fields,
+        boolean extended,
+        boolean strictISO,
+        boolean reducedPrec,
+        boolean datePresent) {
+        
+        boolean hour = fields.remove(DateTimeFieldType.hourOfDay());
+        boolean minute = fields.remove(DateTimeFieldType.minuteOfHour());
+        boolean second = fields.remove(DateTimeFieldType.secondOfMinute());
+        boolean milli = fields.remove(DateTimeFieldType.millisOfSecond());
+        if (!hour && !minute && !second && !milli) {
+            return;
+        }
+        if (hour || minute || second || milli) {
+            if (strictISO && reducedPrec) {
+                throw new IllegalArgumentException("No valid ISO8601 format for fields because Date was reduced precision: " + fields);
+            }
+            if (datePresent) {
+                bld.appendLiteral('T');
+            }
+        }
+        if (hour && minute && second || (hour && !second && !milli)) {
+            // OK - HMSm/HMS/HM/H - valid in combination with date
+        } else {
+            if (strictISO && datePresent) {
+                throw new IllegalArgumentException("No valid ISO8601 format for fields because Time was truncated: " + fields);
+            }
+            if (!hour && (minute && second || (minute && !milli) || second)) {
+                // OK - MSm/MS/M/Sm/S - valid ISO formats
+            } else {
+                if (strictISO) {
+                    throw new IllegalArgumentException("No valid ISO8601 format for fields: " + fields);
+                }
+            }
+        }
+        if (hour) {
+            bld.appendHourOfDay(2);
+        } else if (minute || second || milli) {
+            bld.appendLiteral('-');
+        }
+        if (extended && hour && minute) {
+            bld.appendLiteral(':');
+        }
+        if (minute) {
+            bld.appendMinuteOfHour(2);
+        } else if (second || milli) {
+            bld.appendLiteral('-');
+        }
+        if (extended && minute && second) {
+            bld.appendLiteral(':');
+        }
+        if (second) {
+            bld.appendSecondOfMinute(2);
+        } else if (milli) {
+            bld.appendLiteral('-');
+        }
+        if (milli) {
+            bld.appendLiteral('.');
+            bld.appendMillisOfSecond(3);
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Checks that the iso only flag is not set, throwing an exception if it is.
+     * 
+     * @param fields  the fields
+     * @param strictISO  true if only ISO formats allowed
+     * @since 1.1
+     */
+    private static void checkNotStrictISO(Collection fields, boolean strictISO) {
+        if (strictISO) {
+            throw new IllegalArgumentException("No valid ISO8601 format for fields: " + fields);
+        }
+    }
+
+    /**
+     * Appends the separator if necessary.
+     *
+     * @param bld  the builder
+     * @param extended  whether to append the separator
+     * @param sep  the separator
+     * @since 1.1
+     */
+    private static void appendSeparator(DateTimeFormatterBuilder bld, boolean extended) {
+        if (extended) {
+            bld.appendLiteral('-');
+        }
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Returns a generic ISO date parser. It accepts formats described by
diff --git a/JodaTime/src/test/org/joda/time/format/TestAll.java b/JodaTime/src/test/org/joda/time/format/TestAll.java
index 4311a66b7..60c0c4e46 100644
--- a/JodaTime/src/test/org/joda/time/format/TestAll.java
+++ b/JodaTime/src/test/org/joda/time/format/TestAll.java
@@ -39,6 +39,7 @@ public static Test suite() {
         suite.addTest(TestDateTimeFormat.suite());
         suite.addTest(TestDateTimeFormatStyle.suite());
         suite.addTest(TestISODateTimeFormat.suite());
+        suite.addTest(TestISODateTimeFormat_Fields.suite());
         
         suite.addTest(TestPeriodFormatter.suite());
         suite.addTest(TestISOPeriodFormat.suite());
diff --git a/JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat_Fields.java b/JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat_Fields.java
new file mode 100644
index 000000000..5e0fd9ad3
--- /dev/null
+++ b/JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat_Fields.java
@@ -0,0 +1,1106 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.format;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.List;
+
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+import org.joda.time.DateTimeFieldType;
+import org.joda.time.Partial;
+
+/**
+ * This class is a Junit unit test for ISODateTimeFormat.
+ *
+ * @author Stephen Colebourne
+ */
+public class TestISODateTimeFormat_Fields extends TestCase {
+
+    public static void main(String[] args) {
+        junit.textui.TestRunner.run(suite());
+    }
+
+    public static TestSuite suite() {
+        return new TestSuite(TestISODateTimeFormat_Fields.class);
+    }
+
+    public TestISODateTimeFormat_Fields(String name) {
+        super(name);
+    }
+
+    protected void setUp() throws Exception {
+    }
+
+    protected void tearDown() throws Exception {
+    }
+
+    //-----------------------------------------------------------------------
+    public void testForFields_null() {
+        try {
+            ISODateTimeFormat.forFields((Collection) null, true, true);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
+    public void testForFields_empty() {
+        try {
+            ISODateTimeFormat.forFields(new ArrayList(), true, true);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
+    //-----------------------------------------------------------------------
+    //-----------------------------------------------------------------------
+    public void testForFields_calBased_YMD() {
+        DateTimeFieldType[] fields = new DateTimeFieldType[] {
+                DateTimeFieldType.year(),
+                DateTimeFieldType.monthOfYear(),
+                DateTimeFieldType.dayOfMonth(),
+        };
+        int[] values = new int[] {2005, 6, 25};
+        List types = new ArrayList(Arrays.asList(fields));
+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);
+        assertEquals("2005-06-25", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, true, false);
+        assertEquals("2005-06-25", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, true);
+        assertEquals("20050625", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, false);
+        assertEquals("20050625", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testForFields_calBased_Y() {
+        DateTimeFieldType[] fields = new DateTimeFieldType[] {
+                DateTimeFieldType.year(),
+        };
+        int[] values = new int[] {2005};
+        List types = new ArrayList(Arrays.asList(fields));
+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);
+        assertEquals("2005", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, true, false);
+        assertEquals("2005", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, true);
+        assertEquals("2005", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, false);
+        assertEquals("2005", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testForFields_calBased_M() {
+        DateTimeFieldType[] fields = new DateTimeFieldType[] {
+                DateTimeFieldType.monthOfYear(),
+        };
+        int[] values = new int[] {6};
+        List types = new ArrayList(Arrays.asList(fields));
+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);
+        assertEquals("--06", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, true, false);
+        assertEquals("--06", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, true);
+        assertEquals("--06", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, false);
+        assertEquals("--06", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testForFields_calBased_D() {
+        DateTimeFieldType[] fields = new DateTimeFieldType[] {
+                DateTimeFieldType.dayOfMonth(),
+        };
+        int[] values = new int[] {25};
+        List types = new ArrayList(Arrays.asList(fields));
+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);
+        assertEquals("---25", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, true, false);
+        assertEquals("---25", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, true);
+        assertEquals("---25", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, false);
+        assertEquals("---25", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testForFields_calBased_YM() {
+        DateTimeFieldType[] fields = new DateTimeFieldType[] {
+                DateTimeFieldType.year(),
+                DateTimeFieldType.monthOfYear(),
+        };
+        int[] values = new int[] {2005, 6};
+        List types = new ArrayList(Arrays.asList(fields));
+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);
+        assertEquals("2005-06", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, true, false);
+        assertEquals("2005-06", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, true);
+        assertEquals("2005-06", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, false);
+        assertEquals("2005-06", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testForFields_calBased_MD() {
+        DateTimeFieldType[] fields = new DateTimeFieldType[] {
+                DateTimeFieldType.monthOfYear(),
+                DateTimeFieldType.dayOfMonth(),
+        };
+        int[] values = new int[] {6, 25};
+        List types = new ArrayList(Arrays.asList(fields));
+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);
+        assertEquals("--06-25", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, true, false);
+        assertEquals("--06-25", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, true);
+        assertEquals("--0625", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, false);
+        assertEquals("--0625", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testForFields_calBased_YD() {
+        DateTimeFieldType[] fields = new DateTimeFieldType[] {
+                DateTimeFieldType.year(),
+                DateTimeFieldType.dayOfMonth(),
+        };
+        int[] values = new int[] {2005, 25};
+        List types = new ArrayList(Arrays.asList(fields));
+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false);
+        assertEquals("2005--25", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, false);
+        assertEquals("2005--25", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        try {
+            ISODateTimeFormat.forFields(types, true, true);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        
+        types = new ArrayList(Arrays.asList(fields));
+        try {
+            ISODateTimeFormat.forFields(types, false, true);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
+    //-----------------------------------------------------------------------
+    //-----------------------------------------------------------------------
+    public void testForFields_weekBased_YWD() {
+        DateTimeFieldType[] fields = new DateTimeFieldType[] {
+                DateTimeFieldType.weekyear(),
+                DateTimeFieldType.weekOfWeekyear(),
+                DateTimeFieldType.dayOfWeek(),
+        };
+        int[] values = new int[] {2005, 8, 5};
+        List types = new ArrayList(Arrays.asList(fields));
+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);
+        assertEquals("2005-W08-5", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, true, false);
+        assertEquals("2005-W08-5", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, true);
+        assertEquals("2005W085", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, false);
+        assertEquals("2005W085", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testForFields_weekBased_Y() {
+        DateTimeFieldType[] fields = new DateTimeFieldType[] {
+                DateTimeFieldType.weekyear(),
+        };
+        int[] values = new int[] {2005};
+        List types = new ArrayList(Arrays.asList(fields));
+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);
+        assertEquals("2005", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, true, false);
+        assertEquals("2005", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, true);
+        assertEquals("2005", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, false);
+        assertEquals("2005", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testForFields_weekBased_W() {
+        DateTimeFieldType[] fields = new DateTimeFieldType[] {
+                DateTimeFieldType.weekOfWeekyear(),
+        };
+        int[] values = new int[] {8};
+        List types = new ArrayList(Arrays.asList(fields));
+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);
+        assertEquals("-W08", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, true, false);
+        assertEquals("-W08", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, true);
+        assertEquals("-W08", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, false);
+        assertEquals("-W08", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testForFields_weekBased_D() {
+        DateTimeFieldType[] fields = new DateTimeFieldType[] {
+                DateTimeFieldType.dayOfWeek(),
+        };
+        int[] values = new int[] {5};
+        List types = new ArrayList(Arrays.asList(fields));
+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);
+        assertEquals("-W-5", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, true, false);
+        assertEquals("-W-5", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, true);
+        assertEquals("-W-5", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, false);
+        assertEquals("-W-5", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testForFields_weekBased_YW() {
+        DateTimeFieldType[] fields = new DateTimeFieldType[] {
+                DateTimeFieldType.weekyear(),
+                DateTimeFieldType.weekOfWeekyear(),
+        };
+        int[] values = new int[] {2005, 8};
+        List types = new ArrayList(Arrays.asList(fields));
+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);
+        assertEquals("2005-W08", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, true, false);
+        assertEquals("2005-W08", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, true);
+        assertEquals("2005W08", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, false);
+        assertEquals("2005W08", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testForFields_weekBased_WD() {
+        DateTimeFieldType[] fields = new DateTimeFieldType[] {
+                DateTimeFieldType.weekOfWeekyear(),
+                DateTimeFieldType.dayOfWeek(),
+        };
+        int[] values = new int[] {8, 5};
+        List types = new ArrayList(Arrays.asList(fields));
+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);
+        assertEquals("-W08-5", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, true, false);
+        assertEquals("-W08-5", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, true);
+        assertEquals("-W085", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, false);
+        assertEquals("-W085", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testForFields_weekBased_YD() {
+        DateTimeFieldType[] fields = new DateTimeFieldType[] {
+                DateTimeFieldType.weekyear(),
+                DateTimeFieldType.dayOfWeek(),
+        };
+        int[] values = new int[] {2005, 5};
+        List types = new ArrayList(Arrays.asList(fields));
+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false);
+        assertEquals("2005-W-5", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, false);
+        assertEquals("2005W-5", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        try {
+            ISODateTimeFormat.forFields(types, true, true);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        
+        types = new ArrayList(Arrays.asList(fields));
+        try {
+            ISODateTimeFormat.forFields(types, false, true);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
+    //-----------------------------------------------------------------------
+    //-----------------------------------------------------------------------
+    public void testForFields_ordinalBased_YD() {
+        DateTimeFieldType[] fields = new DateTimeFieldType[] {
+                DateTimeFieldType.year(),
+                DateTimeFieldType.dayOfYear(),
+        };
+        int[] values = new int[] {2005, 177};
+        List types = new ArrayList(Arrays.asList(fields));
+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);
+        assertEquals("2005-177", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, true, false);
+        assertEquals("2005-177", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, true);
+        assertEquals("2005177", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, false);
+        assertEquals("2005177", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testForFields_ordinalBased_Y() {
+        DateTimeFieldType[] fields = new DateTimeFieldType[] {
+                DateTimeFieldType.year(),
+        };
+        int[] values = new int[] {2005};
+        List types = new ArrayList(Arrays.asList(fields));
+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);
+        assertEquals("2005", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, true, false);
+        assertEquals("2005", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, true);
+        assertEquals("2005", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, false);
+        assertEquals("2005", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testForFields_ordinalBased_D() {
+        DateTimeFieldType[] fields = new DateTimeFieldType[] {
+                DateTimeFieldType.dayOfYear(),
+        };
+        int[] values = new int[] {177};
+        List types = new ArrayList(Arrays.asList(fields));
+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);
+        assertEquals("-177", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, true, false);
+        assertEquals("-177", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, true);
+        assertEquals("-177", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, false);
+        assertEquals("-177", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+    }
+
+    //-----------------------------------------------------------------------
+    //-----------------------------------------------------------------------
+    //-----------------------------------------------------------------------
+    public void testForFields_time_HMSm() {
+        DateTimeFieldType[] fields = new DateTimeFieldType[] {
+                DateTimeFieldType.hourOfDay(),
+                DateTimeFieldType.minuteOfHour(),
+                DateTimeFieldType.secondOfMinute(),
+                DateTimeFieldType.millisOfSecond(),
+        };
+        int[] values = new int[] {10, 20, 30, 40};
+        List types = new ArrayList(Arrays.asList(fields));
+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);
+        assertEquals("10:20:30.040", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, true, false);
+        assertEquals("10:20:30.040", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, true);
+        assertEquals("102030.040", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, false);
+        assertEquals("102030.040", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testForFields_time_HMS() {
+        DateTimeFieldType[] fields = new DateTimeFieldType[] {
+                DateTimeFieldType.hourOfDay(),
+                DateTimeFieldType.minuteOfHour(),
+                DateTimeFieldType.secondOfMinute(),
+        };
+        int[] values = new int[] {10, 20, 30};
+        List types = new ArrayList(Arrays.asList(fields));
+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);
+        assertEquals("10:20:30", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, true, false);
+        assertEquals("10:20:30", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, true);
+        assertEquals("102030", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, false);
+        assertEquals("102030", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testForFields_time_HM() {
+        DateTimeFieldType[] fields = new DateTimeFieldType[] {
+                DateTimeFieldType.hourOfDay(),
+                DateTimeFieldType.minuteOfHour(),
+        };
+        int[] values = new int[] {10, 20};
+        List types = new ArrayList(Arrays.asList(fields));
+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);
+        assertEquals("10:20", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, true, false);
+        assertEquals("10:20", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, true);
+        assertEquals("1020", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, false);
+        assertEquals("1020", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testForFields_time_H() {
+        DateTimeFieldType[] fields = new DateTimeFieldType[] {
+                DateTimeFieldType.hourOfDay(),
+        };
+        int[] values = new int[] {10};
+        List types = new ArrayList(Arrays.asList(fields));
+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);
+        assertEquals("10", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, true, false);
+        assertEquals("10", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, true);
+        assertEquals("10", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, false);
+        assertEquals("10", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testForFields_time_MSm() {
+        DateTimeFieldType[] fields = new DateTimeFieldType[] {
+                DateTimeFieldType.minuteOfHour(),
+                DateTimeFieldType.secondOfMinute(),
+                DateTimeFieldType.millisOfSecond(),
+        };
+        int[] values = new int[] {20, 30, 40};
+        List types = new ArrayList(Arrays.asList(fields));
+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);
+        assertEquals("-20:30.040", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, true, false);
+        assertEquals("-20:30.040", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, true);
+        assertEquals("-2030.040", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, false);
+        assertEquals("-2030.040", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testForFields_time_MS() {
+        DateTimeFieldType[] fields = new DateTimeFieldType[] {
+                DateTimeFieldType.minuteOfHour(),
+                DateTimeFieldType.secondOfMinute(),
+        };
+        int[] values = new int[] {20, 30};
+        List types = new ArrayList(Arrays.asList(fields));
+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);
+        assertEquals("-20:30", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, true, false);
+        assertEquals("-20:30", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, true);
+        assertEquals("-2030", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, false);
+        assertEquals("-2030", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testForFields_time_M() {
+        DateTimeFieldType[] fields = new DateTimeFieldType[] {
+                DateTimeFieldType.minuteOfHour(),
+        };
+        int[] values = new int[] {20};
+        List types = new ArrayList(Arrays.asList(fields));
+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);
+        assertEquals("-20", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, true, false);
+        assertEquals("-20", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, true);
+        assertEquals("-20", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, false);
+        assertEquals("-20", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testForFields_time_Sm() {
+        DateTimeFieldType[] fields = new DateTimeFieldType[] {
+                DateTimeFieldType.secondOfMinute(),
+                DateTimeFieldType.millisOfSecond(),
+        };
+        int[] values = new int[] {30, 40};
+        List types = new ArrayList(Arrays.asList(fields));
+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);
+        assertEquals("--30.040", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, true, false);
+        assertEquals("--30.040", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, true);
+        assertEquals("--30.040", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, false);
+        assertEquals("--30.040", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testForFields_time_S() {
+        DateTimeFieldType[] fields = new DateTimeFieldType[] {
+                DateTimeFieldType.secondOfMinute(),
+        };
+        int[] values = new int[] {30};
+        List types = new ArrayList(Arrays.asList(fields));
+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);
+        assertEquals("--30", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, true, false);
+        assertEquals("--30", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, true);
+        assertEquals("--30", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, false);
+        assertEquals("--30", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testForFields_time_m() {
+        DateTimeFieldType[] fields = new DateTimeFieldType[] {
+                DateTimeFieldType.millisOfSecond(),
+        };
+        int[] values = new int[] {40};
+        List types = new ArrayList(Arrays.asList(fields));
+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false);
+        assertEquals("---.040", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, false);
+        assertEquals("---.040", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        try {
+            ISODateTimeFormat.forFields(types, true, true);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        
+        types = new ArrayList(Arrays.asList(fields));
+        try {
+            ISODateTimeFormat.forFields(types, false, true);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
+    public void testForFields_time_Hm() {
+        DateTimeFieldType[] fields = new DateTimeFieldType[] {
+                DateTimeFieldType.hourOfDay(),
+                DateTimeFieldType.millisOfSecond(),
+        };
+        int[] values = new int[] {10, 40};
+        List types = new ArrayList(Arrays.asList(fields));
+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false);
+        assertEquals("10--.040", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, false);
+        assertEquals("10--.040", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        try {
+            ISODateTimeFormat.forFields(types, true, true);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        
+        types = new ArrayList(Arrays.asList(fields));
+        try {
+            ISODateTimeFormat.forFields(types, false, true);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
+    public void testForFields_time_HS() {
+        DateTimeFieldType[] fields = new DateTimeFieldType[] {
+                DateTimeFieldType.hourOfDay(),
+                DateTimeFieldType.secondOfMinute(),
+        };
+        int[] values = new int[] {10, 30};
+        List types = new ArrayList(Arrays.asList(fields));
+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false);
+        assertEquals("10-30", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, false);
+        assertEquals("10-30", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        try {
+            ISODateTimeFormat.forFields(types, true, true);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        
+        types = new ArrayList(Arrays.asList(fields));
+        try {
+            ISODateTimeFormat.forFields(types, false, true);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
+    public void testForFields_time_Mm() {
+        DateTimeFieldType[] fields = new DateTimeFieldType[] {
+                DateTimeFieldType.minuteOfHour(),
+                DateTimeFieldType.millisOfSecond(),
+        };
+        int[] values = new int[] {20, 40};
+        List types = new ArrayList(Arrays.asList(fields));
+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false);
+        assertEquals("-20-.040", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, false);
+        assertEquals("-20-.040", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        try {
+            ISODateTimeFormat.forFields(types, true, true);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        
+        types = new ArrayList(Arrays.asList(fields));
+        try {
+            ISODateTimeFormat.forFields(types, false, true);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
+    public void testForFields_time_HSm() {
+        DateTimeFieldType[] fields = new DateTimeFieldType[] {
+                DateTimeFieldType.hourOfDay(),
+                DateTimeFieldType.secondOfMinute(),
+                DateTimeFieldType.millisOfSecond(),
+        };
+        int[] values = new int[] {10, 30, 40};
+        List types = new ArrayList(Arrays.asList(fields));
+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false);
+        assertEquals("10-30.040", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, false);
+        assertEquals("10-30.040", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        try {
+            ISODateTimeFormat.forFields(types, true, true);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        
+        types = new ArrayList(Arrays.asList(fields));
+        try {
+            ISODateTimeFormat.forFields(types, false, true);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
+    public void testForFields_time_HMm() {
+        DateTimeFieldType[] fields = new DateTimeFieldType[] {
+                DateTimeFieldType.hourOfDay(),
+                DateTimeFieldType.minuteOfHour(),
+                DateTimeFieldType.millisOfSecond(),
+        };
+        int[] values = new int[] {10, 20, 40};
+        List types = new ArrayList(Arrays.asList(fields));
+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false);
+        assertEquals("10:20-.040", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, false);
+        assertEquals("1020-.040", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        try {
+            ISODateTimeFormat.forFields(types, true, true);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        
+        types = new ArrayList(Arrays.asList(fields));
+        try {
+            ISODateTimeFormat.forFields(types, false, true);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
+    //-----------------------------------------------------------------------
+    //-----------------------------------------------------------------------
+    public void testForFields_datetime_YMDH() {
+        DateTimeFieldType[] fields = new DateTimeFieldType[] {
+                DateTimeFieldType.year(),
+                DateTimeFieldType.monthOfYear(),
+                DateTimeFieldType.dayOfMonth(),
+                DateTimeFieldType.hourOfDay(),
+        };
+        int[] values = new int[] {2005, 6, 25, 12};
+        List types = new ArrayList(Arrays.asList(fields));
+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);
+        assertEquals("2005-06-25T12", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, true, false);
+        assertEquals("2005-06-25T12", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, true);
+        assertEquals("20050625T12", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, false);
+        assertEquals("20050625T12", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testForFields_datetime_DH() {
+        DateTimeFieldType[] fields = new DateTimeFieldType[] {
+                DateTimeFieldType.dayOfMonth(),
+                DateTimeFieldType.hourOfDay(),
+        };
+        int[] values = new int[] {25, 12};
+        List types = new ArrayList(Arrays.asList(fields));
+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);
+        assertEquals("---25T12", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, true, false);
+        assertEquals("---25T12", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, true);
+        assertEquals("---25T12", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, false);
+        assertEquals("---25T12", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testForFields_datetime_YH() {
+        DateTimeFieldType[] fields = new DateTimeFieldType[] {
+                DateTimeFieldType.year(),
+                DateTimeFieldType.hourOfDay(),
+        };
+        int[] values = new int[] {2005, 12};
+        List types = new ArrayList(Arrays.asList(fields));
+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false);
+        assertEquals("2005T12", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, false);
+        assertEquals("2005T12", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        try {
+            ISODateTimeFormat.forFields(types, true, true);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        
+        types = new ArrayList(Arrays.asList(fields));
+        try {
+            ISODateTimeFormat.forFields(types, false, true);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
+    public void testForFields_datetime_DM() {
+        DateTimeFieldType[] fields = new DateTimeFieldType[] {
+                DateTimeFieldType.dayOfMonth(),
+                DateTimeFieldType.minuteOfHour(),
+        };
+        int[] values = new int[] {25, 20};
+        List types = new ArrayList(Arrays.asList(fields));
+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false);
+        assertEquals("---25T-20", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        f = ISODateTimeFormat.forFields(types, false, false);
+        assertEquals("---25T-20", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = new ArrayList(Arrays.asList(fields));
+        try {
+            ISODateTimeFormat.forFields(types, true, true);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        
+        types = new ArrayList(Arrays.asList(fields));
+        try {
+            ISODateTimeFormat.forFields(types, false, true);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+}

From b86efe73e72ece8e5ceeed48d05228aa1725c9ad Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 26 Jun 2005 23:29:36 +0000
Subject: [PATCH 064/124] Add Partial, new immutable implementation of
 ReadablePartial

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@796 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |   10 +
 JodaTime/src/java/org/joda/time/Partial.java  | 1006 +++++++++++++++++
 JodaTime/src/test/org/joda/time/TestAll.java  |    4 +
 .../org/joda/time/TestPartial_Basics.java     |  906 +++++++++++++++
 .../joda/time/TestPartial_Constructors.java   |  459 ++++++++
 .../org/joda/time/TestPartial_Properties.java |  402 +++++++
 6 files changed, 2787 insertions(+)
 create mode 100644 JodaTime/src/java/org/joda/time/Partial.java
 create mode 100644 JodaTime/src/test/org/joda/time/TestPartial_Basics.java
 create mode 100644 JodaTime/src/test/org/joda/time/TestPartial_Constructors.java
 create mode 100644 JodaTime/src/test/org/joda/time/TestPartial_Properties.java

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 16f23e385..3bf6df451 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -76,6 +76,12 @@ Bug fixes since 1.0
 
 Enhancements since 1.0
 ----------------------
+- Partial
+  New immutable implementation of ReadablePartial.
+  This implementation is flexible as to the fields that it stores.
+  Thus, if you want a partial holding just a year and monthOfYear (perhaps
+  for a credit card expiry date), then this class can be used.
+
 - DateTime/DateMidnight/MutableDateTime/YearMonthDay/TimeOfDay
   Added convenience plusXxx() and minusXxx() methods to add/subtract a period
   For example, dt.plus(Period.days(6)) can now be replaced by dt.plusDays(6)
@@ -122,6 +128,10 @@ Enhancements since 1.0
 - GJLocaleSymbols
   Supports parsing "CE" and "BCE" as era if locale language is English.
 
+- ISODateTimeFormat
+  New method, forFields(), which gets an ISO format for a set of fields.
+  This is useful for more unusual formats such as DayHour.
+
 - DateTimeZone classes updated to latest data from the Olsen time zone database
 
 
diff --git a/JodaTime/src/java/org/joda/time/Partial.java b/JodaTime/src/java/org/joda/time/Partial.java
new file mode 100644
index 000000000..c9b1ae518
--- /dev/null
+++ b/JodaTime/src/java/org/joda/time/Partial.java
@@ -0,0 +1,1006 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time;
+
+import java.io.Serializable;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Locale;
+
+import org.joda.time.base.AbstractPartial;
+import org.joda.time.field.AbstractPartialFieldProperty;
+import org.joda.time.field.FieldUtils;
+import org.joda.time.format.DateTimeFormat;
+import org.joda.time.format.DateTimeFormatter;
+import org.joda.time.format.ISODateTimeFormat;
+
+/**
+ * Partial is an immutable partial datetime where the fields supported
+ * are defined by the constructor.
+ * <p>
+ * Calculations on Partial are performed using a {@link Chronology}.
+ * This chronology is set to be in the UTC time zone for all calculations.
+ * <p>
+ * Each individual field can be queried in two ways:
+ * <ul>
+ * <li><code>get(DateTimeFieldType.monthOfYear())</code>
+ * <li><code>property(DateTimeFieldType.monthOfYear()).get()</code>
+ * </ul>
+ * The second technique also provides access to other useful methods on the
+ * field:
+ * <ul>
+ * <li>numeric value - <code>monthOfYear().get()</code>
+ * <li>text value - <code>monthOfYear().getAsText()</code>
+ * <li>short text value - <code>monthOfYear().getAsShortText()</code>
+ * <li>maximum/minimum values - <code>monthOfYear().getMaximumValue()</code>
+ * <li>add/subtract - <code>monthOfYear().addToCopy()</code>
+ * <li>set - <code>monthOfYear().setCopy()</code>
+ * </ul>
+ * <p>
+ * Partial is thread-safe and immutable, provided that the Chronology is as well.
+ * All standard Chronology classes supplied are thread-safe and immutable.
+ *
+ * @author Stephen Colebourne
+ * @since 1.1
+ */
+public final class Partial
+        extends AbstractPartial
+        implements ReadablePartial, Serializable {
+
+    /** Serialization version */
+    private static final long serialVersionUID = 12324121189002L;
+
+    /** The chronology in use. */
+    private final Chronology iChronology;
+    /** The set of field types. */
+    private final DateTimeFieldType[] iTypes;
+    /** The values of each field in this partial. */
+    private final int[] iValues;
+    /** The formatter to use, [0] may miss some fields, [1] doesn't miss any fields. */
+    private transient DateTimeFormatter[] iFormatter;
+
+    // Constructors
+    //-----------------------------------------------------------------------
+    /**
+     * Constructs a Partial with no fields or values, which can be considered
+     * to represent any date.
+     * <p>
+     * This is most useful when constructing partials, for example:
+     * <pre>
+     * Partial p = new Partial()
+     *     .with(DateTimeFieldType.dayOfWeek(), 5)
+     *     .with(DateTimeFieldType.hourOfDay(), 12)
+     *     .with(DateTimeFieldType.minuteOfHour(), 20);
+     * </pre>
+     * Note that, although this is a clean way to write code, it is fairly
+     * inefficient internally.
+     * <p>
+     * The constructor uses the default ISO chronology.
+     */
+    public Partial() {
+        this((Chronology) null);
+    }
+
+    /**
+     * Constructs a Partial with no fields or values, which can be considered
+     * to represent any date.
+     * <p>
+     * This is most useful when constructing partials, for example:
+     * <pre>
+     * Partial p = new Partial(chrono)
+     *     .with(DateTimeFieldType.dayOfWeek(), 5)
+     *     .with(DateTimeFieldType.hourOfDay(), 12)
+     *     .with(DateTimeFieldType.minuteOfHour(), 20);
+     * </pre>
+     * Note that, although this is a clean way to write code, it is fairly
+     * inefficient internally.
+     *
+     * @param chronology  the chronology, null means ISO
+     */
+    public Partial(Chronology chrono) {
+        super();
+        iChronology = DateTimeUtils.getChronology(chrono).withUTC();
+        iTypes = new DateTimeFieldType[0];
+        iValues = new int[0];
+    }
+
+    /**
+     * Constructs a Partial with the specified field and value.
+     * <p>
+     * The constructor uses the default ISO chronology.
+     * 
+     * @param type  the single type to create the partial from, not null
+     * @param value  the value to store
+     * @throws IllegalArgumentException if the type or value is invalid
+     */
+    public Partial(DateTimeFieldType type, int value) {
+        this(type, value, null);
+    }
+
+    /**
+     * Constructs a Partial with the specified field and value.
+     * <p>
+     * The constructor uses the specified chronology.
+     * 
+     * @param type  the single type to create the partial from, not null
+     * @param value  the value to store
+     * @param chronology  the chronology, null means ISO
+     * @throws IllegalArgumentException if the type or value is invalid
+     */
+    public Partial(DateTimeFieldType type, int value, Chronology chronology) {
+        super();
+        chronology = DateTimeUtils.getChronology(chronology).withUTC();
+        iChronology = chronology;
+        if (type == null) {
+            throw new IllegalArgumentException("The field type must not be null");
+        }
+        iTypes = new DateTimeFieldType[] {type};
+        iValues = new int[] {value};
+        chronology.validate(this, iValues);
+    }
+
+    /**
+     * Constructs a Partial with the specified fields and values.
+     * The fields must be specified in the order largest to smallest.
+     * <p>
+     * The constructor uses the specified chronology.
+     * 
+     * @param types  the types to create the partial from, not null
+     * @param values  the values to store, not null
+     * @throws IllegalArgumentException if the types or values are invalid
+     */
+    public Partial(DateTimeFieldType[] types, int[] values) {
+        this(types, values, null);
+    }
+
+    /**
+     * Constructs a Partial with the specified fields and values.
+     * The fields must be specified in the order largest to smallest.
+     * <p>
+     * The constructor uses the specified chronology.
+     * 
+     * @param types  the types to create the partial from, not null
+     * @param values  the values to store, not null
+     * @param chronology  the chronology, null means ISO
+     * @throws IllegalArgumentException if the types or values are invalid
+     */
+    public Partial(DateTimeFieldType[] types, int[] values, Chronology chronology) {
+        super();
+        chronology = DateTimeUtils.getChronology(chronology).withUTC();
+        iChronology = chronology;
+        if (types == null) {
+            throw new IllegalArgumentException("Types array must not be null");
+        }
+        if (values == null) {
+            throw new IllegalArgumentException("Values array must not be null");
+        }
+        if (values.length != types.length) {
+            throw new IllegalArgumentException("Values array must be the same length as the types array");
+        }
+        if (types.length == 0) {
+            iTypes = types;
+            iValues = values;
+            return;
+        }
+        for (int i = 0; i < types.length; i++) {
+            if (types[i] == null) {
+                throw new IllegalArgumentException("Types array must not contain null: index " + i);
+            }
+        }
+        DurationField lastUnitField = null;
+        for (int i = 0; i < types.length; i++) {
+            DateTimeFieldType loopType = types[i];
+            DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
+            if (i > 0) {
+                int compare = lastUnitField.compareTo(loopUnitField);
+                if (compare < 0 || (compare != 0 && loopUnitField.isSupported() == false)) {
+                    throw new IllegalArgumentException("Types array must be in order largest-smallest: " +
+                            types[i - 1].getName() + " < " + loopType.getName());
+                } else if (compare == 0) {
+                    if (types[i - 1].getRangeDurationType() == null) {
+                        if (loopType.getRangeDurationType() == null) {
+                            throw new IllegalArgumentException("Types array must not contain duplicate: " + loopType.getName());
+                        }
+                    } else {
+                        if (loopType.getRangeDurationType() == null) {
+                            throw new IllegalArgumentException("Types array must be in order largest-smallest: " +
+                                    types[i - 1].getName() + " < " + loopType.getName());
+                        }
+                        DurationField lastRangeField = types[i - 1].getRangeDurationType().getField(iChronology);
+                        DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);
+                        if (lastRangeField.compareTo(loopRangeField) < 0) {
+                            throw new IllegalArgumentException("Types array must be in order largest-smallest: " +
+                                    types[i - 1].getName() + " < " + loopType.getName());
+                        }
+                        if (lastRangeField.compareTo(loopRangeField) == 0) {
+                            throw new IllegalArgumentException("Types array must not contain duplicate: " + loopType.getName());
+                        }
+                    }
+                }
+            }
+            lastUnitField = loopUnitField;
+        }
+        
+        iTypes = (DateTimeFieldType[]) types.clone();
+        chronology.validate(this, values);
+        iValues = (int[]) values.clone();
+    }
+
+    /**
+     * Constructs a Partial by copying all the fields and types from
+     * another partial.
+     * <p>
+     * This is most useful when copying from a YearMonthDay or TimeOfDay.
+     */
+    public Partial(ReadablePartial partial) {
+        super();
+        if (partial == null) {
+            throw new IllegalArgumentException("The partial must not be null");
+        }
+        iChronology = DateTimeUtils.getChronology(partial.getChronology()).withUTC();
+        iTypes = new DateTimeFieldType[partial.size()];
+        iValues = new int[partial.size()];
+        for (int i = 0; i < partial.size(); i++) {
+            iTypes[i] = partial.getFieldType(i);
+            iValues[i] = partial.getValue(i);
+        }
+    }
+
+    /**
+     * Constructs a Partial with the specified values.
+     * This constructor assigns and performs no validation.
+     * 
+     * @param partial  the partial to copy
+     * @param values  the values to store
+     * @throws IllegalArgumentException if the types or values are invalid
+     */
+    Partial(Partial partial, int[] values) {
+        super();
+        iChronology = partial.iChronology;
+        iTypes = partial.iTypes;
+        iValues = values;
+    }
+
+    /**
+     * Constructs a Partial with the specified chronology, fields and values.
+     * This constructor assigns and performs no validation.
+     * 
+     * @param chronology  the chronology
+     * @param types  the types to create the partial from
+     * @param values  the values to store
+     * @throws IllegalArgumentException if the types or values are invalid
+     */
+    Partial(Chronology chronology, DateTimeFieldType[] types, int[] values) {
+        super();
+        iChronology = chronology;
+        iTypes = types;
+        iValues = values;
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the number of fields in this partial.
+     * 
+     * @return the field count
+     */
+    public int size() {
+        return iTypes.length;
+    }
+
+    /**
+     * Gets the chronology of the partial which is never null.
+     * <p>
+     * The {@link Chronology} is the calculation engine behind the partial and
+     * provides conversion and validation of the fields in a particular calendar system.
+     * 
+     * @return the chronology, never null
+     */
+    public Chronology getChronology() {
+        return iChronology;
+    }
+
+    /**
+     * Gets the field for a specific index in the chronology specified.
+     * 
+     * @param index  the index to retrieve
+     * @param chrono  the chronology to use
+     * @return the field
+     * @throws IndexOutOfBoundsException if the index is invalid
+     */
+    protected DateTimeField getField(int index, Chronology chrono) {
+        return iTypes[index].getField(chrono);
+    }
+
+    /**
+     * Gets the field type at the specified index.
+     *
+     * @param index  the index to retrieve
+     * @return the field at the specified index
+     * @throws IndexOutOfBoundsException if the index is invalid
+     */
+    public DateTimeFieldType getFieldType(int index) {
+        return iTypes[index];
+    }
+
+    /**
+     * Gets an array of the field type of each of the fields that
+     * this partial supports.
+     * <p>
+     * The fields are returned largest to smallest.
+     *
+     * @return the array of field types (cloned), largest to smallest
+     */
+    public DateTimeFieldType[] getFieldTypes() {
+        return (DateTimeFieldType[]) iTypes.clone();
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the value of the field at the specifed index.
+     * 
+     * @param index  the index
+     * @return the value
+     * @throws IndexOutOfBoundsException if the index is invalid
+     */
+    public int getValue(int index) {
+        return iValues[index];
+    }
+
+    /**
+     * Gets an array of the value of each of the fields that
+     * this partial supports.
+     * <p>
+     * The fields are returned largest to smallest.
+     * Each value corresponds to the same array index as <code>getFieldTypes()</code>
+     *
+     * @return the current values of each field (cloned), largest to smallest
+     */
+    public int[] getValues() {
+        return (int[]) iValues.clone();
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Creates a new Partial instance with the specified chronology.
+     * This instance is immutable and unaffected by this method call.
+     * <p>
+     * This method retains the values of the fields, thus the result will
+     * typically refer to a different instant.
+     * <p>
+     * The time zone of the specified chronology is ignored, as Partial
+     * operates without a time zone.
+     *
+     * @param newChronology  the new chronology, null means ISO
+     * @return a copy of this datetime with a different chronology
+     * @throws IllegalArgumentException if the values are invalid for the new chronology
+     */
+    public Partial withChronologyRetainFields(Chronology newChronology) {
+        newChronology = DateTimeUtils.getChronology(newChronology);
+        newChronology = newChronology.withUTC();
+        if (newChronology == getChronology()) {
+            return this;
+        } else {
+            Partial newPartial = new Partial(newChronology, iTypes, iValues);
+            newChronology.validate(newPartial, iValues);
+            return newPartial;
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets a copy of this date with the specified field set to a new value.
+     * <p>
+     * If this partial did not previously support the field, the new one will.
+     * Contrast this behaviour with {@link #withField(DateTimeFieldType, int)}.
+     * <p>
+     * For example, if the field type is <code>dayOfMonth</code> then the day
+     * would be changed/added in the returned instance.
+     *
+     * @param fieldType  the field type to set, not null
+     * @param value  the value to set
+     * @return a copy of this instance with the field set
+     * @throws IllegalArgumentException if the value is null or invalid
+     */
+    public Partial with(DateTimeFieldType fieldType, int value) {
+        if (fieldType == null) {
+            throw new IllegalArgumentException("The field type must not be null");
+        }
+        int index = indexOf(fieldType);
+        if (index == -1) {
+            DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];
+            int[] newValues = new int[newTypes.length];
+            
+            // find correct insertion point to keep largest-smallest order
+            int i = 0;
+            DurationField unitField = fieldType.getDurationType().getField(iChronology);
+            if (unitField.isSupported()) {
+                for (; i < iTypes.length; i++) {
+                    DateTimeFieldType loopType = iTypes[i];
+                    DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
+                    if (loopUnitField.isSupported()) {
+                        int compare = unitField.compareTo(loopUnitField);
+                        if (compare > 0) {
+                            break;
+                        } else if (compare == 0) {
+                            DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);
+                            DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);
+                            if (rangeField.compareTo(loopRangeField) > 0) {
+                                break;
+                            }
+                        }
+                    }
+                }
+            }
+            System.arraycopy(iTypes, 0, newTypes, 0, i);
+            System.arraycopy(iValues, 0, newValues, 0, i);
+            newTypes[i] = fieldType;
+            newValues[i] = value;
+            System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);
+            System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);
+            
+            Partial newPartial = new Partial(iChronology, newTypes, newValues);
+            iChronology.validate(newPartial, newValues);
+            return newPartial;
+        }
+        if (value == getValue(index)) {
+            return this;
+        }
+        int[] newValues = getValues();
+        newValues = getField(index).set(this, index, newValues, value);
+        return new Partial(this, newValues);
+    }
+
+    /**
+     * Gets a copy of this date with the specified field removed.
+     * <p>
+     * If this partial did not previously support the field, no error occurs.
+     *
+     * @param fieldType  the field type to remove, may be null
+     * @return a copy of this instance with the field removed
+     */
+    public Partial without(DateTimeFieldType fieldType) {
+        int index = indexOf(fieldType);
+        if (index != -1) {
+            DateTimeFieldType[] newTypes = new DateTimeFieldType[size() - 1];
+            int[] newValues = new int[size() - 1];
+            System.arraycopy(iTypes, 0, newTypes, 0, index);
+            System.arraycopy(iTypes, index + 1, newTypes, index, newTypes.length - index);
+            System.arraycopy(iValues, 0, newValues, 0, index);
+            System.arraycopy(iValues, index + 1, newValues, index, newValues.length - index);
+            Partial newPartial = new Partial(iChronology, newTypes, newValues);
+            iChronology.validate(newPartial, newValues);
+            return newPartial;
+        }
+        return this;
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets a copy of this Partial with the specified field set to a new value.
+     * <p>
+     * If this partial does not support the field, an exception is thrown.
+     * Contrast this behaviour with {@link #with(DateTimeFieldType, int)}.
+     * <p>
+     * For example, if the field type is <code>dayOfMonth</code> then the day
+     * would be changed in the returned instance if supported.
+     *
+     * @param fieldType  the field type to set, not null
+     * @param value  the value to set
+     * @return a copy of this instance with the field set
+     * @throws IllegalArgumentException if the value is null or invalid
+     */
+    public Partial withField(DateTimeFieldType fieldType, int value) {
+        int index = indexOfSupported(fieldType);
+        if (value == getValue(index)) {
+            return this;
+        }
+        int[] newValues = getValues();
+        newValues = getField(index).set(this, index, newValues, value);
+        return new Partial(this, newValues);
+    }
+
+    /**
+     * Gets a copy of this Partial with the value of the specified field increased.
+     * If this partial does not support the field, an exception is thrown.
+     * <p>
+     * If the addition is zero, then <code>this</code> is returned.
+     * The addition will overflow into larger fields (eg. minute to hour).
+     * However, it will not wrap around if the top maximum is reached.
+     *
+     * @param fieldType  the field type to add to, not null
+     * @param amount  the amount to add
+     * @return a copy of this instance with the field updated
+     * @throws IllegalArgumentException if the value is null or invalid
+     * @throws ArithmeticException if the new datetime exceeds the capacity
+     */
+    public Partial withFieldAdded(DurationFieldType fieldType, int amount) {
+        int index = indexOfSupported(fieldType);
+        if (amount == 0) {
+            return this;
+        }
+        int[] newValues = getValues();
+        newValues = getField(index).add(this, index, newValues, amount);
+        return new Partial(this, newValues);
+    }
+
+    /**
+     * Gets a copy of this Partial with the value of the specified field increased.
+     * If this partial does not support the field, an exception is thrown.
+     * <p>
+     * If the addition is zero, then <code>this</code> is returned.
+     * The addition will overflow into larger fields (eg. minute to hour).
+     * If the maximum is reached, the addition will wra.
+     *
+     * @param fieldType  the field type to add to, not null
+     * @param amount  the amount to add
+     * @return a copy of this instance with the field updated
+     * @throws IllegalArgumentException if the value is null or invalid
+     * @throws ArithmeticException if the new datetime exceeds the capacity
+     */
+    public Partial withFieldAddWrapped(DurationFieldType fieldType, int amount) {
+        int index = indexOfSupported(fieldType);
+        if (amount == 0) {
+            return this;
+        }
+        int[] newValues = getValues();
+        newValues = getField(index).addWrapPartial(this, index, newValues, amount);
+        return new Partial(this, newValues);
+    }
+
+    /**
+     * Gets a copy of this Partial with the specified period added.
+     * <p>
+     * If the addition is zero, then <code>this</code> is returned.
+     * Fields in the period that aren't present in the partial are ignored.
+     * <p>
+     * This method is typically used to add multiple copies of complex
+     * period instances. Adding one field is best achieved using the method
+     * {@link #withFieldAdded(DurationFieldType, int)}.
+     * 
+     * @param period  the period to add to this one, null means zero
+     * @param scalar  the amount of times to add, such as -1 to subtract once
+     * @return a copy of this instance with the period added
+     * @throws ArithmeticException if the new datetime exceeds the capacity
+     */
+    public Partial withPeriodAdded(ReadablePeriod period, int scalar) {
+        if (period == null || scalar == 0) {
+            return this;
+        }
+        int[] newValues = getValues();
+        for (int i = 0; i < period.size(); i++) {
+            DurationFieldType fieldType = period.getFieldType(i);
+            int index = indexOf(fieldType);
+            if (index >= 0) {
+                newValues = getField(index).add(this, index, newValues,
+                        FieldUtils.safeMultiplyToInt(period.getValue(i), scalar));
+            }
+        }
+        return new Partial(this, newValues);
+    }
+
+    /**
+     * Gets a copy of this instance with the specified period added.
+     * <p>
+     * If the amount is zero or null, then <code>this</code> is returned.
+     *
+     * @param period  the duration to add to this one, null means zero
+     * @return a copy of this instance with the period added
+     * @throws ArithmeticException if the new datetime exceeds the capacity of a long
+     */
+    public Partial plus(ReadablePeriod period) {
+        return withPeriodAdded(period, 1);
+    }
+
+    /**
+     * Gets a copy of this instance with the specified period take away.
+     * <p>
+     * If the amount is zero or null, then <code>this</code> is returned.
+     *
+     * @param period  the period to reduce this instant by
+     * @return a copy of this instance with the period taken away
+     * @throws ArithmeticException if the new datetime exceeds the capacity of a long
+     */
+    public Partial minus(ReadablePeriod period) {
+        return withPeriodAdded(period, -1);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the property object for the specified type, which contains
+     * many useful methods for getting and manipulating the partial.
+     * <p>
+     * See also {@link ReadablePartial#get(DateTimeFieldType)}.
+     *
+     * @param type  the field type to get the property for, not null
+     * @return the property object
+     * @throws IllegalArgumentException if the field is null or unsupported
+     */
+    public Property property(DateTimeFieldType type) {
+        return new Property(this, indexOfSupported(type));
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Compares this ReadablePartial with another returning an integer
+     * indicating the order.
+     * <p>
+     * The specified object must be a ReadablePartial whose field types
+     * match those of this partial. Normally that means that the partials
+     * must be the same class.
+     *
+     * @param partial  an object to check against
+     * @return negative if this is less, zero if equal, positive if greater
+     * @throws ClassCastException if the partial is the wrong class
+     *  or if it has field types that don't match
+     * @throws NullPointerException if the partial is null
+     */
+    public int compareTo(Object partial) {
+        if (this == partial) {
+            return 0;
+        }
+        ReadablePartial other = (ReadablePartial) partial;
+        if (size() != other.size()) {
+            throw new ClassCastException("ReadablePartial objects must have matching field types");
+        }
+        for (int i = 0, isize = size(); i < isize; i++) {
+            if (getFieldType(i) != other.getFieldType(i)) {
+                throw new ClassCastException("ReadablePartial objects must have matching field types");
+            }
+        }
+        // fields are ordered largest first
+        for (int i = 0, isize = size(); i < isize; i++) {
+            if (getValue(i) > other.getValue(i)) {
+                return 1;
+            }
+            if (getValue(i) < other.getValue(i)) {
+                return -1;
+            }
+        }
+        return 0;
+    }
+
+    /**
+     * Is this partial later than the specified partial.
+     * <p>
+     * You may not pass null into this method. This is because you need
+     * a time zone to accurately determine the current date.
+     *
+     * @param date  an date to check against, null means now
+     * @return true if this date is after the date passed in
+     * @throws IllegalArgumentException if the specified YearMonthDay is null
+     */
+    public boolean isAfter(Partial date) {
+        if (date == null) {
+            throw new IllegalArgumentException("Partial cannot be null");
+        }
+        return compareTo(date) > 0;
+    }
+
+    /**
+     * Is this partial earlier than the specified partial.
+     * <p>
+     * You may not pass null into this method. This is because you need
+     * a time zone to accurately determine the current date.
+     *
+     * @param date  an date to check against, null means now
+     * @return true if this date is before the date passed in
+     * @throws IllegalArgumentException if the specified YearMonthDay is null
+     */
+    public boolean isBefore(Partial date) {
+        if (date == null) {
+            throw new IllegalArgumentException("Partial cannot be null");
+        }
+        return compareTo(date) < 0;
+    }
+
+    /**
+     * Is this partial the same as the specified partial.
+     * <p>
+     * You may not pass null into this method. This is because you need
+     * a time zone to accurately determine the current date.
+     *
+     * @param date  an date to check against, null means now
+     * @return true if this date is the same as the date passed in
+     * @throws IllegalArgumentException if the specified YearMonthDay is null
+     */
+    public boolean isEqual(Partial date) {
+        if (date == null) {
+            throw new IllegalArgumentException("Partial cannot be null");
+        }
+        return compareTo(date) == 0;
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets a formatter suitable for the fields in this partial.
+     * <p>
+     * If there is no appropriate ISO format, null is returned.
+     * This method may return a formatter that does not display all the
+     * fields of the partial. This might occur when you have overlapping
+     * fields, such as dayOfWeek and dayOfMonth.
+     *
+     * @return a formatter suitable for the fields in this partial, null
+     *  if none is suitable
+     */
+    public DateTimeFormatter getFormatter() {
+        DateTimeFormatter[] f = iFormatter;
+        if (f == null) {
+            if (size() == 0) {
+                return null;
+            }
+            f = new DateTimeFormatter[2];
+            try {
+                List list = new ArrayList(Arrays.asList(iTypes));
+                f[0] = ISODateTimeFormat.forFields(list, true, false);
+                if (list.size() == 0) {
+                    f[1] = f[0];
+                }
+            } catch (IllegalArgumentException ex) {
+                // ignore
+            }
+            iFormatter = f;
+        }
+        return f[0];
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Output the date in an appropriate ISO8601 format.
+     * <p>
+     * This method will output the partial in one of two ways.
+     * If {@link #getFormatter()}
+     * 
+     * If there is no appropriate ISO format a dump of the fields is output
+     * via {@link #toStringList()}. An appropr
+     * 
+     * @return ISO8601 formatted string
+     */
+    public String toString() {
+        DateTimeFormatter[] f = iFormatter;
+        if (f == null) {
+            getFormatter();
+            f = iFormatter;
+            if (f == null) {
+                return toStringList();
+            }
+        }
+        DateTimeFormatter f1 = f[1];
+        if (f1 == null) {
+            return toStringList();
+        }
+        return f1.print(this);
+    }
+
+    /**
+     * Gets a string version of the partial that lists all the fields.
+     * <p>
+     * This method exists to provide a better debugging toString than
+     * the standard toString. This method lists all the fields and their
+     * values in a style similar to the collections framework.
+     *
+     * @return a toString format that lists all the fields
+     */
+    public String toStringList() {
+        int size = size();
+        StringBuffer buf = new StringBuffer(20 * size);
+        buf.append('[');
+        for (int i = 0; i < size; i++) {
+            if (i > 0) {
+                buf.append(',').append(' ');
+            }
+            buf.append(iTypes[i].getName());
+            buf.append('=');
+            buf.append(iValues[i]);
+        }
+        buf.append(']');
+        return buf.toString();
+    }
+
+    /**
+     * Output the date using the specified format pattern.
+     * Unsupported fields will appear as special unicode characters.
+     *
+     * @param pattern  the pattern specification, null means use <code>toString</code>
+     * @see org.joda.time.format.DateTimeFormat
+     */
+    public String toString(String pattern) {
+        if (pattern == null) {
+            return toString();
+        }
+        return DateTimeFormat.forPattern(pattern).print(this);
+    }
+
+    /**
+     * Output the date using the specified format pattern.
+     * Unsupported fields will appear as special unicode characters.
+     *
+     * @param pattern  the pattern specification, null means use <code>toString</code>
+     * @param locale  Locale to use, null means default
+     * @see org.joda.time.format.DateTimeFormat
+     */
+    public String toString(String pattern, Locale locale) {
+        if (pattern == null) {
+            return toString();
+        }
+        return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * The property class for <code>YearMonthDay</code>.
+     * <p>
+     * This class binds a <code>YearMonthDay</code> to a <code>DateTimeField</code>.
+     * 
+     * @author Stephen Colebourne
+     * @since 1.0
+     */
+    public static class Property extends AbstractPartialFieldProperty implements Serializable {
+
+        /** Serialization version */
+        private static final long serialVersionUID = 53278362873888L;
+
+        /** The partial */
+        private final Partial iPartial;
+        /** The field index */
+        private final int iFieldIndex;
+
+        /**
+         * Constructs a property.
+         * 
+         * @param partial  the partial instance
+         * @param fieldIndex  the index in the partial
+         */
+        Property(Partial partial, int fieldIndex) {
+            super();
+            iPartial = partial;
+            iFieldIndex = fieldIndex;
+        }
+
+        /**
+         * Gets the field that this property uses.
+         * 
+         * @return the field
+         */
+        public DateTimeField getField() {
+            return iPartial.getField(iFieldIndex);
+        }
+
+        /**
+         * Gets the partial that this property belongs to.
+         * 
+         * @return the partial
+         */
+        protected ReadablePartial getReadablePartial() {
+            return iPartial;
+        }
+
+        /**
+         * Gets the partial that this property belongs to.
+         * 
+         * @return the partial
+         */
+        public Partial getPartial() {
+            return iPartial;
+        }
+
+        /**
+         * Gets the value of this field.
+         * 
+         * @return the field value
+         */
+        public int get() {
+            return iPartial.getValue(iFieldIndex);
+        }
+
+        //-----------------------------------------------------------------------
+        /**
+         * Adds to the value of this field in a copy of this Partial.
+         * <p>
+         * The value will be added to this field. If the value is too large to be
+         * added solely to this field then it will affect larger fields.
+         * Smaller fields are unaffected.
+         * <p>
+         * If the result would be too large, beyond the maximum year, then an
+         * IllegalArgumentException is thrown.
+         * <p>
+         * The Partial attached to this property is unchanged by this call.
+         * Instead, a new instance is returned.
+         * 
+         * @param valueToAdd  the value to add to the field in the copy
+         * @return a copy of the Partial with the field value changed
+         * @throws IllegalArgumentException if the value isn't valid
+         */
+        public Partial addToCopy(int valueToAdd) {
+            int[] newValues = iPartial.getValues();
+            newValues = getField().add(iPartial, iFieldIndex, newValues, valueToAdd);
+            return new Partial(iPartial, newValues);
+        }
+
+        /**
+         * Adds to the value of this field in a copy of this Partial wrapping
+         * within this field if the maximum value is reached.
+         * <p>
+         * The value will be added to this field. If the value is too large to be
+         * added solely to this field then it wraps within this field.
+         * Other fields are unaffected.
+         * <p>
+         * For example,
+         * <code>2004-12-20</code> addWrapField one month returns <code>2004-01-20</code>.
+         * <p>
+         * The Partial attached to this property is unchanged by this call.
+         * Instead, a new instance is returned.
+         * 
+         * @param valueToAdd  the value to add to the field in the copy
+         * @return a copy of the Partial with the field value changed
+         * @throws IllegalArgumentException if the value isn't valid
+         */
+        public Partial addWrapFieldToCopy(int valueToAdd) {
+            int[] newValues = iPartial.getValues();
+            newValues = getField().addWrapField(iPartial, iFieldIndex, newValues, valueToAdd);
+            return new Partial(iPartial, newValues);
+        }
+
+        //-----------------------------------------------------------------------
+        /**
+         * Sets this field in a copy of the Partial.
+         * <p>
+         * The Partial attached to this property is unchanged by this call.
+         * Instead, a new instance is returned.
+         * 
+         * @param value  the value to set the field in the copy to
+         * @return a copy of the Partial with the field value changed
+         * @throws IllegalArgumentException if the value isn't valid
+         */
+        public Partial setCopy(int value) {
+            int[] newValues = iPartial.getValues();
+            newValues = getField().set(iPartial, iFieldIndex, newValues, value);
+            return new Partial(iPartial, newValues);
+        }
+
+        /**
+         * Sets this field in a copy of the Partial to a parsed text value.
+         * <p>
+         * The Partial attached to this property is unchanged by this call.
+         * Instead, a new instance is returned.
+         * 
+         * @param text  the text value to set
+         * @param locale  optional locale to use for selecting a text symbol
+         * @return a copy of the Partial with the field value changed
+         * @throws IllegalArgumentException if the text value isn't valid
+         */
+        public Partial setCopy(String text, Locale locale) {
+            int[] newValues = iPartial.getValues();
+            newValues = getField().set(iPartial, iFieldIndex, newValues, text, locale);
+            return new Partial(iPartial, newValues);
+        }
+
+        /**
+         * Sets this field in a copy of the Partial to a parsed text value.
+         * <p>
+         * The Partial attached to this property is unchanged by this call.
+         * Instead, a new instance is returned.
+         * 
+         * @param text  the text value to set
+         * @return a copy of the Partial with the field value changed
+         * @throws IllegalArgumentException if the text value isn't valid
+         */
+        public Partial setCopy(String text) {
+            return setCopy(text, null);
+        }
+    }
+
+}
diff --git a/JodaTime/src/test/org/joda/time/TestAll.java b/JodaTime/src/test/org/joda/time/TestAll.java
index 140c95341..3fa4c3e53 100644
--- a/JodaTime/src/test/org/joda/time/TestAll.java
+++ b/JodaTime/src/test/org/joda/time/TestAll.java
@@ -80,6 +80,10 @@ public static Test suite() {
         suite.addTest(TestYearMonthDay_Constructors.suite());
         suite.addTest(TestYearMonthDay_Properties.suite());
         
+        suite.addTest(TestPartial_Basics.suite());
+        suite.addTest(TestPartial_Constructors.suite());
+        suite.addTest(TestPartial_Properties.suite());
+        
         suite.addTest(TestAbstractPartial.suite());
         suite.addTest(TestBasePartial.suite());
         
diff --git a/JodaTime/src/test/org/joda/time/TestPartial_Basics.java b/JodaTime/src/test/org/joda/time/TestPartial_Basics.java
new file mode 100644
index 000000000..c024ca3dd
--- /dev/null
+++ b/JodaTime/src/test/org/joda/time/TestPartial_Basics.java
@@ -0,0 +1,906 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time;
+
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+import java.util.Arrays;
+import java.util.Date;
+import java.util.Locale;
+
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+import org.joda.time.format.DateTimeFormat;
+import org.joda.time.format.DateTimeFormatter;
+
+/**
+ * This class is a Junit unit test for Partial.
+ *
+ * @author Stephen Colebourne
+ */
+public class TestPartial_Basics extends TestCase {
+
+    private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
+    private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
+    private static final DateTimeZone TOKYO = DateTimeZone.forID("Asia/Tokyo");
+    private static final int OFFSET = 1;
+    private static final Chronology COPTIC_PARIS = Chronology.getCoptic(PARIS);
+    private static final Chronology COPTIC_LONDON = Chronology.getCoptic(LONDON);
+    private static final Chronology COPTIC_TOKYO = Chronology.getCoptic(TOKYO);
+    private static final Chronology COPTIC_UTC = Chronology.getCopticUTC();
+    private static final Chronology ISO_PARIS = Chronology.getISO(PARIS);
+    private static final Chronology ISO_LONDON = Chronology.getISO(LONDON);
+    private static final Chronology ISO_TOKYO = Chronology.getISO(TOKYO);
+    private static final Chronology ISO_UTC = Chronology.getISOUTC();
+    private static final Chronology BUDDHIST_PARIS = Chronology.getBuddhist(PARIS);
+    private static final Chronology BUDDHIST_LONDON = Chronology.getBuddhist(LONDON);
+    private static final Chronology BUDDHIST_TOKYO = Chronology.getBuddhist(TOKYO);
+    private static final Chronology BUDDHIST_UTC = Chronology.getBuddhistUTC();
+    
+    private long TEST_TIME_NOW =
+            10L * DateTimeConstants.MILLIS_PER_HOUR
+            + 20L * DateTimeConstants.MILLIS_PER_MINUTE
+            + 30L * DateTimeConstants.MILLIS_PER_SECOND
+            + 40L;
+            
+    private long TEST_TIME1 =
+        1L * DateTimeConstants.MILLIS_PER_HOUR
+        + 2L * DateTimeConstants.MILLIS_PER_MINUTE
+        + 3L * DateTimeConstants.MILLIS_PER_SECOND
+        + 4L;
+        
+    private long TEST_TIME2 =
+        1L * DateTimeConstants.MILLIS_PER_DAY
+        + 5L * DateTimeConstants.MILLIS_PER_HOUR
+        + 6L * DateTimeConstants.MILLIS_PER_MINUTE
+        + 7L * DateTimeConstants.MILLIS_PER_SECOND
+        + 8L;
+        
+    private DateTimeZone zone = null;
+
+    public static void main(String[] args) {
+        junit.textui.TestRunner.run(suite());
+    }
+
+    public static TestSuite suite() {
+        return new TestSuite(TestPartial_Basics.class);
+    }
+
+    public TestPartial_Basics(String name) {
+        super(name);
+    }
+
+    protected void setUp() throws Exception {
+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
+        zone = DateTimeZone.getDefault();
+        DateTimeZone.setDefault(LONDON);
+    }
+
+    protected void tearDown() throws Exception {
+        DateTimeUtils.setCurrentMillisSystem();
+        DateTimeZone.setDefault(zone);
+        zone = null;
+    }
+
+    //-----------------------------------------------------------------------
+    public void testGet() {
+        Partial test = createHourMinPartial();
+        assertEquals(10, test.get(DateTimeFieldType.hourOfDay()));
+        assertEquals(20, test.get(DateTimeFieldType.minuteOfHour()));
+        try {
+            test.get(null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            test.get(DateTimeFieldType.secondOfMinute());
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testSize() {
+        Partial test = createHourMinPartial();
+        assertEquals(2, test.size());
+    }
+
+    public void testGetFieldType() {
+        Partial test = createHourMinPartial();
+        assertSame(DateTimeFieldType.hourOfDay(), test.getFieldType(0));
+        assertSame(DateTimeFieldType.minuteOfHour(), test.getFieldType(1));
+        try {
+            test.getFieldType(-1);
+        } catch (IndexOutOfBoundsException ex) {}
+        try {
+            test.getFieldType(2);
+        } catch (IndexOutOfBoundsException ex) {}
+    }
+
+    public void testGetFieldTypes() {
+        Partial test = createHourMinPartial();
+        DateTimeFieldType[] fields = test.getFieldTypes();
+        assertEquals(2, fields.length);
+        assertSame(DateTimeFieldType.hourOfDay(), fields[0]);
+        assertSame(DateTimeFieldType.minuteOfHour(), fields[1]);
+        assertNotSame(test.getFieldTypes(), test.getFieldTypes());
+    }
+
+    public void testGetField() {
+        Partial test = createHourMinPartial(COPTIC_PARIS);
+        assertSame(Chronology.getCopticUTC().hourOfDay(), test.getField(0));
+        assertSame(Chronology.getCopticUTC().minuteOfHour(), test.getField(1));
+        try {
+            test.getField(-1);
+        } catch (IndexOutOfBoundsException ex) {}
+        try {
+            test.getField(5);
+        } catch (IndexOutOfBoundsException ex) {}
+    }
+
+    public void testGetFields() {
+        Partial test = createHourMinPartial(COPTIC_PARIS);
+        DateTimeField[] fields = test.getFields();
+        assertEquals(2, fields.length);
+        assertSame(Chronology.getCopticUTC().hourOfDay(), fields[0]);
+        assertSame(Chronology.getCopticUTC().minuteOfHour(), fields[1]);
+        assertNotSame(test.getFields(), test.getFields());
+    }
+
+    public void testGetValue() {
+        Partial test = createHourMinPartial(COPTIC_PARIS);
+        assertEquals(10, test.getValue(0));
+        assertEquals(20, test.getValue(1));
+        try {
+            test.getValue(-1);
+        } catch (IndexOutOfBoundsException ex) {}
+        try {
+            test.getValue(2);
+        } catch (IndexOutOfBoundsException ex) {}
+    }
+
+    public void testGetValues() {
+        Partial test = createHourMinPartial(COPTIC_PARIS);
+        int[] values = test.getValues();
+        assertEquals(2, values.length);
+        assertEquals(10, values[0]);
+        assertEquals(20, values[1]);
+        assertNotSame(test.getValues(), test.getValues());
+    }
+
+    public void testIsSupported() {
+        Partial test = createHourMinPartial(COPTIC_PARIS);
+        assertEquals(true, test.isSupported(DateTimeFieldType.hourOfDay()));
+        assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfHour()));
+        assertEquals(false, test.isSupported(DateTimeFieldType.secondOfMinute()));
+        assertEquals(false, test.isSupported(DateTimeFieldType.millisOfSecond()));
+        assertEquals(false, test.isSupported(DateTimeFieldType.dayOfMonth()));
+    }
+
+    public void testEqualsHashCode() {
+        Partial test1 = createHourMinPartial(COPTIC_PARIS);
+        Partial test2 = createHourMinPartial(COPTIC_PARIS);
+        assertEquals(true, test1.equals(test2));
+        assertEquals(true, test2.equals(test1));
+        assertEquals(true, test1.equals(test1));
+        assertEquals(true, test2.equals(test2));
+        assertEquals(true, test1.hashCode() == test2.hashCode());
+        assertEquals(true, test1.hashCode() == test1.hashCode());
+        assertEquals(true, test2.hashCode() == test2.hashCode());
+        
+        Partial test3 = createHourMinPartial2(COPTIC_PARIS);
+        assertEquals(false, test1.equals(test3));
+        assertEquals(false, test2.equals(test3));
+        assertEquals(false, test3.equals(test1));
+        assertEquals(false, test3.equals(test2));
+        assertEquals(false, test1.hashCode() == test3.hashCode());
+        assertEquals(false, test2.hashCode() == test3.hashCode());
+        
+        assertEquals(false, test1.equals("Hello"));
+        assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE));
+        assertEquals(new TimeOfDay(10, 20, 30, 40), createTODPartial(ISO_UTC));
+    }
+
+    //-----------------------------------------------------------------------
+    public void testCompareTo() {
+        Partial test1 = createHourMinPartial();
+        Partial test1a = createHourMinPartial();
+        assertEquals(0, test1.compareTo(test1a));
+        assertEquals(0, test1a.compareTo(test1));
+        assertEquals(0, test1.compareTo(test1));
+        assertEquals(0, test1a.compareTo(test1a));
+        
+        Partial test2 = createHourMinPartial2(ISO_UTC);
+        assertEquals(-1, test1.compareTo(test2));
+        assertEquals(+1, test2.compareTo(test1));
+        
+        Partial test3 = createHourMinPartial2(COPTIC_UTC);
+        assertEquals(-1, test1.compareTo(test3));
+        assertEquals(+1, test3.compareTo(test1));
+        assertEquals(0, test3.compareTo(test2));
+        
+        assertEquals(0, new TimeOfDay(10, 20, 30, 40).compareTo(createTODPartial(ISO_UTC)));
+        
+        try {
+            test1.compareTo(null);
+            fail();
+        } catch (NullPointerException ex) {}
+        try {
+            test1.compareTo(new Date());
+            fail();
+        } catch (ClassCastException ex) {}
+        try {
+            test1.compareTo(new YearMonthDay());
+            fail();
+        } catch (ClassCastException ex) {}
+        try {
+            createTODPartial(ISO_UTC).without(DateTimeFieldType.hourOfDay()).compareTo(new YearMonthDay());
+            fail();
+        } catch (ClassCastException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
+    public void testIsEqual_TOD() {
+        Partial test1 = createHourMinPartial();
+        Partial test1a = createHourMinPartial();
+        assertEquals(true, test1.isEqual(test1a));
+        assertEquals(true, test1a.isEqual(test1));
+        assertEquals(true, test1.isEqual(test1));
+        assertEquals(true, test1a.isEqual(test1a));
+        
+        Partial test2 = createHourMinPartial2(ISO_UTC);
+        assertEquals(false, test1.isEqual(test2));
+        assertEquals(false, test2.isEqual(test1));
+        
+        Partial test3 = createHourMinPartial2(COPTIC_UTC);
+        assertEquals(false, test1.isEqual(test3));
+        assertEquals(false, test3.isEqual(test1));
+        assertEquals(true, test3.isEqual(test2));
+        
+        try {
+            createHourMinPartial().isEqual(null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+    
+    //-----------------------------------------------------------------------
+    public void testIsBefore_TOD() {
+        Partial test1 = createHourMinPartial();
+        Partial test1a = createHourMinPartial();
+        assertEquals(false, test1.isBefore(test1a));
+        assertEquals(false, test1a.isBefore(test1));
+        assertEquals(false, test1.isBefore(test1));
+        assertEquals(false, test1a.isBefore(test1a));
+        
+        Partial test2 = createHourMinPartial2(ISO_UTC);
+        assertEquals(true, test1.isBefore(test2));
+        assertEquals(false, test2.isBefore(test1));
+        
+        Partial test3 = createHourMinPartial2(COPTIC_UTC);
+        assertEquals(true, test1.isBefore(test3));
+        assertEquals(false, test3.isBefore(test1));
+        assertEquals(false, test3.isBefore(test2));
+        
+        try {
+            createHourMinPartial().isBefore(null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+    
+    //-----------------------------------------------------------------------
+    public void testIsAfter_TOD() {
+        Partial test1 = createHourMinPartial();
+        Partial test1a = createHourMinPartial();
+        assertEquals(false, test1.isAfter(test1a));
+        assertEquals(false, test1a.isAfter(test1));
+        assertEquals(false, test1.isAfter(test1));
+        assertEquals(false, test1a.isAfter(test1a));
+        
+        Partial test2 = createHourMinPartial2(ISO_UTC);
+        assertEquals(false, test1.isAfter(test2));
+        assertEquals(true, test2.isAfter(test1));
+        
+        Partial test3 = createHourMinPartial2(COPTIC_UTC);
+        assertEquals(false, test1.isAfter(test3));
+        assertEquals(true, test3.isAfter(test1));
+        assertEquals(false, test3.isAfter(test2));
+        
+        try {
+            createHourMinPartial().isAfter(null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+    
+    //-----------------------------------------------------------------------
+    public void testWithChronologyRetainFields_Chrono() {
+        Partial base = createHourMinPartial(COPTIC_PARIS);
+        Partial test = base.withChronologyRetainFields(BUDDHIST_TOKYO);
+        check(base, 10, 20);
+        assertEquals(COPTIC_UTC, base.getChronology());
+        check(test, 10, 20);
+        assertEquals(BUDDHIST_UTC, test.getChronology());
+    }
+
+    public void testWithChronologyRetainFields_sameChrono() {
+        Partial base = createHourMinPartial(COPTIC_PARIS);
+        Partial test = base.withChronologyRetainFields(COPTIC_TOKYO);
+        assertSame(base, test);
+    }
+
+    public void testWithChronologyRetainFields_nullChrono() {
+        Partial base = createHourMinPartial(COPTIC_PARIS);
+        Partial test = base.withChronologyRetainFields(null);
+        check(base, 10, 20);
+        assertEquals(COPTIC_UTC, base.getChronology());
+        check(test, 10, 20);
+        assertEquals(ISO_UTC, test.getChronology());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testWith1() {
+        Partial test = createHourMinPartial();
+        Partial result = test.with(DateTimeFieldType.hourOfDay(), 15);
+        check(test, 10, 20);
+        check(result, 15, 20);
+    }
+
+    public void testWith2() {
+        Partial test = createHourMinPartial();
+        try {
+            test.with(null, 6);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        check(test, 10, 20);
+    }
+
+    public void testWith3a() {
+        Partial test = createHourMinPartial();
+        Partial result = test.with(DateTimeFieldType.secondOfMinute(), 15);
+        check(test, 10, 20);
+        assertEquals(3, result.size());
+        assertEquals(true, result.isSupported(DateTimeFieldType.hourOfDay()));
+        assertEquals(true, result.isSupported(DateTimeFieldType.minuteOfHour()));
+        assertEquals(true, result.isSupported(DateTimeFieldType.secondOfMinute()));
+        assertEquals(DateTimeFieldType.hourOfDay(), result.getFieldType(0));
+        assertEquals(DateTimeFieldType.minuteOfHour(), result.getFieldType(1));
+        assertEquals(DateTimeFieldType.secondOfMinute(), result.getFieldType(2));
+        assertEquals(10, result.get(DateTimeFieldType.hourOfDay()));
+        assertEquals(20, result.get(DateTimeFieldType.minuteOfHour()));
+        assertEquals(15, result.get(DateTimeFieldType.secondOfMinute()));
+    }
+
+    public void testWith3b() {
+        Partial test = createHourMinPartial();
+        Partial result = test.with(DateTimeFieldType.minuteOfDay(), 15);
+        check(test, 10, 20);
+        assertEquals(3, result.size());
+        assertEquals(true, result.isSupported(DateTimeFieldType.hourOfDay()));
+        assertEquals(true, result.isSupported(DateTimeFieldType.minuteOfDay()));
+        assertEquals(true, result.isSupported(DateTimeFieldType.minuteOfHour()));
+        assertEquals(DateTimeFieldType.hourOfDay(), result.getFieldType(0));
+        assertEquals(DateTimeFieldType.minuteOfDay(), result.getFieldType(1));
+        assertEquals(DateTimeFieldType.minuteOfHour(), result.getFieldType(2));
+        assertEquals(10, result.get(DateTimeFieldType.hourOfDay()));
+        assertEquals(20, result.get(DateTimeFieldType.minuteOfHour()));
+        assertEquals(15, result.get(DateTimeFieldType.minuteOfDay()));
+    }
+
+    public void testWith3c() {
+        Partial test = createHourMinPartial();
+        Partial result = test.with(DateTimeFieldType.dayOfMonth(), 15);
+        check(test, 10, 20);
+        assertEquals(3, result.size());
+        assertEquals(true, result.isSupported(DateTimeFieldType.dayOfMonth()));
+        assertEquals(true, result.isSupported(DateTimeFieldType.hourOfDay()));
+        assertEquals(true, result.isSupported(DateTimeFieldType.minuteOfHour()));
+        assertEquals(DateTimeFieldType.dayOfMonth(), result.getFieldType(0));
+        assertEquals(DateTimeFieldType.hourOfDay(), result.getFieldType(1));
+        assertEquals(DateTimeFieldType.minuteOfHour(), result.getFieldType(2));
+        assertEquals(10, result.get(DateTimeFieldType.hourOfDay()));
+        assertEquals(20, result.get(DateTimeFieldType.minuteOfHour()));
+        assertEquals(15, result.get(DateTimeFieldType.dayOfMonth()));
+    }
+
+    public void testWith3d() {
+        Partial test = new Partial(DateTimeFieldType.year(), 2005);
+        Partial result = test.with(DateTimeFieldType.monthOfYear(), 6);
+        assertEquals(2, result.size());
+        assertEquals(2005, result.get(DateTimeFieldType.year()));
+        assertEquals(6, result.get(DateTimeFieldType.monthOfYear()));
+    }        
+
+    public void testWith3e() {
+        Partial test = new Partial(DateTimeFieldType.era(), 1);
+        Partial result = test.with(DateTimeFieldType.halfdayOfDay(), 0);
+        assertEquals(2, result.size());
+        assertEquals(1, result.get(DateTimeFieldType.era()));
+        assertEquals(0, result.get(DateTimeFieldType.halfdayOfDay()));
+        assertEquals(0, result.indexOf(DateTimeFieldType.era()));
+        assertEquals(1, result.indexOf(DateTimeFieldType.halfdayOfDay()));
+    }        
+
+    public void testWith3f() {
+        Partial test = new Partial(DateTimeFieldType.halfdayOfDay(), 0);
+        Partial result = test.with(DateTimeFieldType.era(), 1);
+        assertEquals(2, result.size());
+        assertEquals(1, result.get(DateTimeFieldType.era()));
+        assertEquals(0, result.get(DateTimeFieldType.halfdayOfDay()));
+        assertEquals(0, result.indexOf(DateTimeFieldType.era()));
+        assertEquals(1, result.indexOf(DateTimeFieldType.halfdayOfDay()));
+    }        
+
+    public void testWith4() {
+        Partial test = createHourMinPartial();
+        Partial result = test.with(DateTimeFieldType.hourOfDay(), 10);
+        assertSame(test, result);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testWithout1() {
+        Partial test = createHourMinPartial();
+        Partial result = test.without(DateTimeFieldType.year());
+        check(test, 10, 20);
+        check(result, 10, 20);
+    }
+
+    public void testWithout2() {
+        Partial test = createHourMinPartial();
+        Partial result = test.without((DateTimeFieldType) null);
+        check(test, 10, 20);
+        check(result, 10, 20);
+    }
+
+    public void testWithout3() {
+        Partial test = createHourMinPartial();
+        Partial result = test.without(DateTimeFieldType.hourOfDay());
+        check(test, 10, 20);
+        assertEquals(1, result.size());
+        assertEquals(false, result.isSupported(DateTimeFieldType.hourOfDay()));
+        assertEquals(true, result.isSupported(DateTimeFieldType.minuteOfHour()));
+        assertEquals(DateTimeFieldType.minuteOfHour(), result.getFieldType(0));
+    }
+
+    public void testWithout4() {
+        Partial test = createHourMinPartial();
+        Partial result = test.without(DateTimeFieldType.minuteOfHour());
+        check(test, 10, 20);
+        assertEquals(1, result.size());
+        assertEquals(true, result.isSupported(DateTimeFieldType.hourOfDay()));
+        assertEquals(false, result.isSupported(DateTimeFieldType.minuteOfHour()));
+        assertEquals(DateTimeFieldType.hourOfDay(), result.getFieldType(0));
+    }
+
+    public void testWithout5() {
+        Partial test = new Partial(DateTimeFieldType.hourOfDay(), 12);
+        Partial result = test.without(DateTimeFieldType.hourOfDay());
+        assertEquals(0, result.size());
+        assertEquals(false, result.isSupported(DateTimeFieldType.hourOfDay()));
+    }
+
+    //-----------------------------------------------------------------------
+    public void testWithField1() {
+        Partial test = createHourMinPartial();
+        Partial result = test.withField(DateTimeFieldType.hourOfDay(), 15);
+        check(test, 10, 20);
+        check(result, 15, 20);
+    }
+
+    public void testWithField2() {
+        Partial test = createHourMinPartial();
+        try {
+            test.withField(null, 6);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        check(test, 10, 20);
+    }
+
+    public void testWithField3() {
+        Partial test = createHourMinPartial();
+        try {
+            test.withField(DateTimeFieldType.dayOfMonth(), 6);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        check(test, 10, 20);
+    }
+
+    public void testWithField4() {
+        Partial test = createHourMinPartial();
+        Partial result = test.withField(DateTimeFieldType.hourOfDay(), 10);
+        assertSame(test, result);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testWithFieldAdded1() {
+        Partial test = createHourMinPartial();
+        Partial result = test.withFieldAdded(DurationFieldType.hours(), 6);
+        
+        assertEquals(createHourMinPartial(), test);
+        check(test, 10, 20);
+        check(result, 16, 20);
+    }
+
+    public void testWithFieldAdded2() {
+        Partial test = createHourMinPartial();
+        try {
+            test.withFieldAdded(null, 0);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        check(test, 10, 20);
+    }
+
+    public void testWithFieldAdded3() {
+        Partial test = createHourMinPartial();
+        try {
+            test.withFieldAdded(null, 6);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        check(test, 10, 20);
+    }
+
+    public void testWithFieldAdded4() {
+        Partial test = createHourMinPartial();
+        Partial result = test.withFieldAdded(DurationFieldType.hours(), 0);
+        assertSame(test, result);
+    }
+
+    public void testWithFieldAdded5() {
+        Partial test = createHourMinPartial();
+        try {
+            test.withFieldAdded(DurationFieldType.days(), 6);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        check(test, 10, 20);
+    }
+
+    public void testWithFieldAdded6() {
+        Partial test = createHourMinPartial();
+        try {
+            test.withFieldAdded(DurationFieldType.hours(), 16);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expected
+        }
+        check(test, 10, 20);
+    }
+
+    public void testWithFieldAdded7() {
+        Partial test = createHourMinPartial(23, 59, ISO_UTC);
+        try {
+            test.withFieldAdded(DurationFieldType.minutes(), 1);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expected
+        }
+        check(test, 23, 59);
+        
+        test = createHourMinPartial(23, 59, ISO_UTC);
+        try {
+            test.withFieldAdded(DurationFieldType.hours(), 1);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expected
+        }
+        check(test, 23, 59);
+    }
+
+    public void testWithFieldAdded8() {
+        Partial test = createHourMinPartial(0, 0, ISO_UTC);
+        try {
+            test.withFieldAdded(DurationFieldType.minutes(), -1);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expected
+        }
+        check(test, 0, 0);
+        
+        test = createHourMinPartial(0, 0, ISO_UTC);
+        try {
+            test.withFieldAdded(DurationFieldType.hours(), -1);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expected
+        }
+        check(test, 0, 0);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testWithFieldAddWrapped1() {
+        Partial test = createHourMinPartial();
+        Partial result = test.withFieldAddWrapped(DurationFieldType.hours(), 6);
+        
+        assertEquals(createHourMinPartial(), test);
+        check(test, 10, 20);
+        check(result, 16, 20);
+    }
+
+    public void testWithFieldAddWrapped2() {
+        Partial test = createHourMinPartial();
+        try {
+            test.withFieldAddWrapped(null, 0);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        check(test, 10, 20);
+    }
+
+    public void testWithFieldAddWrapped3() {
+        Partial test = createHourMinPartial();
+        try {
+            test.withFieldAddWrapped(null, 6);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        check(test, 10, 20);
+    }
+
+    public void testWithFieldAddWrapped4() {
+        Partial test = createHourMinPartial();
+        Partial result = test.withFieldAddWrapped(DurationFieldType.hours(), 0);
+        assertSame(test, result);
+    }
+
+    public void testWithFieldAddWrapped5() {
+        Partial test = createHourMinPartial();
+        try {
+            test.withFieldAddWrapped(DurationFieldType.days(), 6);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        check(test, 10, 20);
+    }
+
+    public void testWithFieldAddWrapped6() {
+        Partial test = createHourMinPartial();
+        Partial result = test.withFieldAddWrapped(DurationFieldType.hours(), 16);
+        
+        assertEquals(createHourMinPartial(), test);
+        check(test, 10, 20);
+        check(result, 2, 20);
+    }
+
+    public void testWithFieldAddWrapped7() {
+        Partial test = createHourMinPartial(23, 59, ISO_UTC);
+        Partial result = test.withFieldAddWrapped(DurationFieldType.minutes(), 1);
+        check(test, 23, 59);
+        check(result, 0, 0);
+        
+        test = createHourMinPartial(23, 59, ISO_UTC);
+        result = test.withFieldAddWrapped(DurationFieldType.hours(), 1);
+        check(test, 23, 59);
+        check(result, 0, 59);
+    }
+
+    public void testWithFieldAddWrapped8() {
+        Partial test = createHourMinPartial(0, 0, ISO_UTC);
+        Partial result = test.withFieldAddWrapped(DurationFieldType.minutes(), -1);
+        check(test, 0, 0);
+        check(result, 23, 59);
+        
+        test = createHourMinPartial(0, 0, ISO_UTC);
+        result = test.withFieldAddWrapped(DurationFieldType.hours(), -1);
+        check(test, 0, 0);
+        check(result, 23, 0);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testPlus_RP() {
+        Partial test = createHourMinPartial(BUDDHIST_LONDON);
+        Partial result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8));
+        check(test, 10, 20);
+        check(result, 15, 26);
+        
+        result = test.plus((ReadablePeriod) null);
+        assertSame(test, result);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testMinus_RP() {
+        Partial test = createHourMinPartial(BUDDHIST_LONDON);
+        Partial result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1));
+        check(test, 10, 20);
+        check(result, 9, 19);
+        
+        result = test.minus((ReadablePeriod) null);
+        assertSame(test, result);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToDateTime_RI() {
+        Partial base = createHourMinPartial(COPTIC_PARIS);
+        DateTime dt = new DateTime(0L); // LONDON zone
+        assertEquals("1970-01-01T01:00:00.000+01:00", dt.toString());
+        
+        DateTime test = base.toDateTime(dt);
+        check(base, 10, 20);
+        assertEquals("1970-01-01T01:00:00.000+01:00", dt.toString());
+        assertEquals("1970-01-01T10:20:00.000+01:00", test.toString());
+    }
+
+    public void testToDateTime_nullRI() {
+        Partial base = createHourMinPartial(1, 2, ISO_UTC);
+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME2);
+        
+        DateTime test = base.toDateTime((ReadableInstant) null);
+        check(base, 1, 2);
+        assertEquals("1970-01-02T01:02:07.008+01:00", test.toString());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testProperty() {
+        Partial test = createHourMinPartial();
+        assertNotNull(test.property(DateTimeFieldType.hourOfDay()));
+        assertNotNull(test.property(DateTimeFieldType.minuteOfHour()));
+        try {
+            test.property(DateTimeFieldType.secondOfDay());
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            test.property(null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
+    public void testSerialization() throws Exception {
+        Partial test = createHourMinPartial(COPTIC_PARIS);
+        
+        ByteArrayOutputStream baos = new ByteArrayOutputStream();
+        ObjectOutputStream oos = new ObjectOutputStream(baos);
+        oos.writeObject(test);
+        byte[] bytes = baos.toByteArray();
+        oos.close();
+        
+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
+        ObjectInputStream ois = new ObjectInputStream(bais);
+        Partial result = (Partial) ois.readObject();
+        ois.close();
+        
+        assertEquals(test, result);
+        assertTrue(Arrays.equals(test.getValues(), result.getValues()));
+        assertTrue(Arrays.equals(test.getFields(), result.getFields()));
+        assertEquals(test.getChronology(), result.getChronology());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testGetFormatter1() {
+        Partial test = new Partial(DateTimeFieldType.year(), 2005);
+        assertEquals("2005", test.getFormatter().print(test));
+        
+        test = test.with(DateTimeFieldType.monthOfYear(), 6);
+        assertEquals("2005-06", test.getFormatter().print(test));
+        
+        test = test.with(DateTimeFieldType.dayOfMonth(), 25);
+        assertEquals("2005-06-25", test.getFormatter().print(test));
+        
+        test = test.without(DateTimeFieldType.monthOfYear());
+        assertEquals("2005--25", test.getFormatter().print(test));
+    }
+
+    public void testGetFormatter2() {
+        Partial test = new Partial();
+        assertEquals(null, test.getFormatter());
+        
+        test = test.with(DateTimeFieldType.era(), 1);
+        assertEquals(null, test.getFormatter());
+        
+        test = test.with(DateTimeFieldType.halfdayOfDay(), 0);
+        assertEquals(null, test.getFormatter());
+    }
+
+    public void testGetFormatter3() {
+        Partial test = new Partial(DateTimeFieldType.dayOfWeek(), 5);
+        assertEquals("-W-5", test.getFormatter().print(test));
+        
+        // contrast with testToString5
+        test = test.with(DateTimeFieldType.dayOfMonth(), 13);
+        assertEquals("---13", test.getFormatter().print(test));
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToString1() {
+        Partial test = createHourMinPartial();
+        assertEquals("10:20", test.toString());
+    }
+
+    public void testToString2() {
+        Partial test = new Partial();
+        assertEquals("[]", test.toString());
+    }
+
+    public void testToString3() {
+        Partial test = new Partial(DateTimeFieldType.year(), 2005);
+        assertEquals("2005", test.toString());
+        
+        test = test.with(DateTimeFieldType.monthOfYear(), 6);
+        assertEquals("2005-06", test.toString());
+        
+        test = test.with(DateTimeFieldType.dayOfMonth(), 25);
+        assertEquals("2005-06-25", test.toString());
+        
+        test = test.without(DateTimeFieldType.monthOfYear());
+        assertEquals("2005--25", test.toString());
+    }
+
+    public void testToString4() {
+        Partial test = new Partial(DateTimeFieldType.dayOfWeek(), 5);
+        assertEquals("-W-5", test.toString());
+        
+        test = test.with(DateTimeFieldType.dayOfMonth(), 13);
+        assertEquals("[dayOfMonth=13, dayOfWeek=5]", test.toString());
+    }
+
+    public void testToString5() {
+        Partial test = new Partial(DateTimeFieldType.era(), 1);
+        assertEquals("[era=1]", test.toString());
+        
+        test = test.with(DateTimeFieldType.halfdayOfDay(), 0);
+        assertEquals("[era=1, halfdayOfDay=0]", test.toString());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToString_String() {
+        Partial test = createHourMinPartial();
+        assertEquals("\ufffd\ufffd\ufffd\ufffd 10", test.toString("yyyy HH"));
+        assertEquals("10:20", test.toString((String) null));
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToString_String_Locale() {
+        Partial test = createHourMinPartial();
+        assertEquals("10 20", test.toString("H m", Locale.ENGLISH));
+        assertEquals("10:20", test.toString(null, Locale.ENGLISH));
+        assertEquals("10 20", test.toString("H m", null));
+        assertEquals("10:20", test.toString(null, null));
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToString_DTFormatter() {
+        Partial test = createHourMinPartial();
+        assertEquals("\ufffd\ufffd\ufffd\ufffd 10", test.toString(DateTimeFormat.forPattern("yyyy HH")));
+        assertEquals("10:20", test.toString((DateTimeFormatter) null));
+    }
+
+    //-----------------------------------------------------------------------
+    private Partial createHourMinPartial() {
+        return createHourMinPartial(ISO_UTC);
+    }
+
+    private Partial createHourMinPartial(Chronology chrono) {
+        return createHourMinPartial(10, 20, chrono);
+    }
+
+    private Partial createHourMinPartial2(Chronology chrono) {
+        return createHourMinPartial(15, 20, chrono);
+    }
+
+    private Partial createHourMinPartial(int hour, int min, Chronology chrono) {
+        return new Partial(
+            new DateTimeFieldType[] {DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour()},
+            new int[] {hour, min},
+            chrono);
+    }
+
+    private Partial createTODPartial(Chronology chrono) {
+        return new Partial(
+            new DateTimeFieldType[] {
+                    DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour(),
+                    DateTimeFieldType.secondOfMinute(), DateTimeFieldType.millisOfSecond()},
+            new int[] {10, 20, 30, 40},
+            chrono);
+    }
+
+    private void check(Partial test, int hour, int min) {
+        assertEquals(test.toString(), hour, test.get(DateTimeFieldType.hourOfDay()));
+        assertEquals(test.toString(), min, test.get(DateTimeFieldType.minuteOfHour()));
+    }
+}
diff --git a/JodaTime/src/test/org/joda/time/TestPartial_Constructors.java b/JodaTime/src/test/org/joda/time/TestPartial_Constructors.java
new file mode 100644
index 000000000..7502f63d4
--- /dev/null
+++ b/JodaTime/src/test/org/joda/time/TestPartial_Constructors.java
@@ -0,0 +1,459 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time;
+
+import java.util.Arrays;
+
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+import org.joda.time.chrono.GregorianChronology;
+import org.joda.time.chrono.ISOChronology;
+
+/**
+ * This class is a Junit unit test for Partial.
+ *
+ * @author Stephen Colebourne
+ */
+public class TestPartial_Constructors extends TestCase {
+
+    private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
+    private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
+    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
+    private static final Chronology GREGORIAN_PARIS = GregorianChronology.getInstance(PARIS);
+    private static final Chronology GREGORIAN_UTC = GregorianChronology.getInstanceUTC();
+    private static final int OFFSET = 1;
+    
+    private long TEST_TIME_NOW =
+            10L * DateTimeConstants.MILLIS_PER_HOUR
+            + 20L * DateTimeConstants.MILLIS_PER_MINUTE
+            + 30L * DateTimeConstants.MILLIS_PER_SECOND
+            + 40L;
+            
+    private long TEST_TIME1 =
+        1L * DateTimeConstants.MILLIS_PER_HOUR
+        + 2L * DateTimeConstants.MILLIS_PER_MINUTE
+        + 3L * DateTimeConstants.MILLIS_PER_SECOND
+        + 4L;
+        
+    private long TEST_TIME2 =
+        1L * DateTimeConstants.MILLIS_PER_DAY
+        + 5L * DateTimeConstants.MILLIS_PER_HOUR
+        + 6L * DateTimeConstants.MILLIS_PER_MINUTE
+        + 7L * DateTimeConstants.MILLIS_PER_SECOND
+        + 8L;
+        
+    private DateTimeZone zone = null;
+
+    public static void main(String[] args) {
+        junit.textui.TestRunner.run(suite());
+    }
+
+    public static TestSuite suite() {
+        return new TestSuite(TestPartial_Constructors.class);
+    }
+
+    public TestPartial_Constructors(String name) {
+        super(name);
+    }
+
+    protected void setUp() throws Exception {
+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
+        zone = DateTimeZone.getDefault();
+        DateTimeZone.setDefault(LONDON);
+    }
+
+    protected void tearDown() throws Exception {
+        DateTimeUtils.setCurrentMillisSystem();
+        DateTimeZone.setDefault(zone);
+        zone = null;
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Test constructor
+     */
+    public void testConstructor() throws Throwable {
+        Partial test = new Partial();
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(0, test.size());
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Test constructor
+     */
+    public void testConstructor_Chrono() throws Throwable {
+        Partial test = new Partial((Chronology) null);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(0, test.size());
+        
+        test = new Partial(GREGORIAN_PARIS);
+        assertEquals(GREGORIAN_UTC, test.getChronology());
+        assertEquals(0, test.size());
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Test constructor
+     */
+    public void testConstructor_Type_int() throws Throwable {
+        Partial test = new Partial(DateTimeFieldType.dayOfYear(), 4);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1, test.size());
+        assertEquals(4, test.getValue(0));
+        assertEquals(4, test.get(DateTimeFieldType.dayOfYear()));
+        assertEquals(true, test.isSupported(DateTimeFieldType.dayOfYear()));
+    }
+
+    /**
+     * Test constructor
+     */
+    public void testConstructorEx1_Type_int() throws Throwable {
+        try {
+            new Partial(null, 4);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            assertMessageContains(ex, "must not be null");
+        }
+    }
+
+    /**
+     * Test constructor
+     */
+    public void testConstructorEx2_Type_int() throws Throwable {
+        try {
+            new Partial(DateTimeFieldType.dayOfYear(), 0);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expected
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Test constructor
+     */
+    public void testConstructor_Type_int_Chrono() throws Throwable {
+        Partial test = new Partial(DateTimeFieldType.dayOfYear(), 4, GREGORIAN_PARIS);
+        assertEquals(GREGORIAN_UTC, test.getChronology());
+        assertEquals(1, test.size());
+        assertEquals(4, test.getValue(0));
+        assertEquals(4, test.get(DateTimeFieldType.dayOfYear()));
+        assertEquals(true, test.isSupported(DateTimeFieldType.dayOfYear()));
+    }
+
+    /**
+     * Test constructor
+     */
+    public void testConstructorEx_Type_int_Chrono() throws Throwable {
+        try {
+            new Partial(null, 4, ISO_UTC);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            assertMessageContains(ex, "must not be null");
+        }
+    }
+
+    /**
+     * Test constructor
+     */
+    public void testConstructorEx2_Type_int_Chrono() throws Throwable {
+        try {
+            new Partial(DateTimeFieldType.dayOfYear(), 0, ISO_UTC);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expected
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Test constructor
+     */
+    public void testConstructor_TypeArray_intArray() throws Throwable {
+        DateTimeFieldType[] types = new DateTimeFieldType[] {
+            DateTimeFieldType.year(),
+            DateTimeFieldType.dayOfYear()
+        };
+        int[] values = new int[] {2005, 33};
+        Partial test = new Partial(types, values);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(2, test.size());
+        assertEquals(2005, test.getValue(0));
+        assertEquals(2005, test.get(DateTimeFieldType.year()));
+        assertEquals(true, test.isSupported(DateTimeFieldType.year()));
+        assertEquals(33, test.getValue(1));
+        assertEquals(33, test.get(DateTimeFieldType.dayOfYear()));
+        assertEquals(true, test.isSupported(DateTimeFieldType.dayOfYear()));
+        assertEquals(true, Arrays.equals(test.getFieldTypes(), types));
+        assertEquals(true, Arrays.equals(test.getValues(), values));
+    }
+
+    /**
+     * Test constructor
+     */
+    public void testConstructor2_TypeArray_intArray() throws Throwable {
+        DateTimeFieldType[] types = new DateTimeFieldType[0];
+        int[] values = new int[0];
+        Partial test = new Partial(types, values);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(0, test.size());
+    }
+
+    /**
+     * Test constructor
+     */
+    public void testConstructorEx1_TypeArray_intArray() throws Throwable {
+        try {
+            new Partial((DateTimeFieldType[]) null, new int[] {1});
+            fail();
+        } catch (IllegalArgumentException ex) {
+            assertMessageContains(ex, "must not be null");
+        }
+    }
+
+    /**
+     * Test constructor
+     */
+    public void testConstructorEx3_TypeArray_intArray() throws Throwable {
+        try {
+            new Partial(new DateTimeFieldType[] {DateTimeFieldType.dayOfYear()}, null);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            assertMessageContains(ex, "must not be null");
+        }
+    }
+
+    /**
+     * Test constructor
+     */
+    public void testConstructorEx5_TypeArray_intArray() throws Throwable {
+        try {
+            new Partial(new DateTimeFieldType[] {DateTimeFieldType.dayOfYear()}, new int[2]);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            assertMessageContains(ex, "same length");
+        }
+    }
+
+    /**
+     * Test constructor
+     */
+    public void testConstructorEx6_TypeArray_intArray() throws Throwable {
+        try {
+            new Partial(new DateTimeFieldType[] {null, DateTimeFieldType.dayOfYear()}, new int[2]);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            assertMessageContains(ex, "contain null");
+        }
+        try {
+            new Partial(new DateTimeFieldType[] {DateTimeFieldType.dayOfYear(), null}, new int[2]);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            assertMessageContains(ex, "contain null");
+        }
+    }
+
+    /**
+     * Test constructor
+     */
+    public void testConstructorEx7_TypeArray_intArray() throws Throwable {
+        int[] values = new int[] {1, 1, 1};
+        DateTimeFieldType[] types = new DateTimeFieldType[] {
+            DateTimeFieldType.dayOfMonth(), DateTimeFieldType.year(), DateTimeFieldType.monthOfYear() };
+        try {
+            new Partial(types, values);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            assertMessageContains(ex, "must be in order", "largest-smallest");
+        }
+        
+        types = new DateTimeFieldType[] {
+            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear() };
+        try {
+            new Partial(types, values);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            assertMessageContains(ex, "must be in order", "largest-smallest");
+        }
+        
+        types = new DateTimeFieldType[] {
+            DateTimeFieldType.year(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear() };
+        try {
+            new Partial(types, values);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            assertMessageContains(ex, "must be in order", "largest-smallest");
+        }
+        
+        types = new DateTimeFieldType[] {
+            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.era() };
+        try {
+            new Partial(types, values);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            assertMessageContains(ex, "must be in order", "largest-smallest");
+        }
+        
+        types = new DateTimeFieldType[] {
+            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfYear() };
+        try {
+            new Partial(types, values);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            assertMessageContains(ex, "must be in order", "largest-smallest");
+        }
+        
+        types = new DateTimeFieldType[] {
+            DateTimeFieldType.yearOfEra(), DateTimeFieldType.year(), DateTimeFieldType.dayOfYear() };
+        try {
+            new Partial(types, values);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            assertMessageContains(ex, "must be in order", "largest-smallest");
+        }
+    }
+
+    /**
+     * Test constructor
+     */
+    public void testConstructorEx8_TypeArray_intArray() throws Throwable {
+        int[] values = new int[] {1, 1, 1};
+        DateTimeFieldType[] types = new DateTimeFieldType[] {
+            DateTimeFieldType.era(), DateTimeFieldType.year(), DateTimeFieldType.year() };
+        try {
+            new Partial(types, values);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            assertMessageContains(ex, "must not", "duplicate");
+        }
+        
+        types = new DateTimeFieldType[] {
+            DateTimeFieldType.era(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear() };
+        try {
+            new Partial(types, values);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            assertMessageContains(ex, "must not", "duplicate");
+        }
+        
+        types = new DateTimeFieldType[] {
+            DateTimeFieldType.dayOfYear(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfMonth() };
+        try {
+            new Partial(types, values);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            assertMessageContains(ex, "must not", "duplicate");
+        }
+    }
+
+    /**
+     * Test constructor
+     */
+    public void testConstructorEx9_TypeArray_intArray() throws Throwable {
+        int[] values = new int[] {3, 0};
+        DateTimeFieldType[] types = new DateTimeFieldType[] {
+            DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfWeek()};
+        try {
+            new Partial(types, values);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expected
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Test constructor
+     */
+    public void testConstructor_TypeArray_intArray_Chrono() throws Throwable {
+        DateTimeFieldType[] types = new DateTimeFieldType[] {
+            DateTimeFieldType.year(),
+            DateTimeFieldType.dayOfYear()
+        };
+        int[] values = new int[] {2005, 33};
+        Partial test = new Partial(types, values, GREGORIAN_PARIS);
+        assertEquals(GREGORIAN_UTC, test.getChronology());
+        assertEquals(2, test.size());
+        assertEquals(2005, test.getValue(0));
+        assertEquals(2005, test.get(DateTimeFieldType.year()));
+        assertEquals(true, test.isSupported(DateTimeFieldType.year()));
+        assertEquals(33, test.getValue(1));
+        assertEquals(33, test.get(DateTimeFieldType.dayOfYear()));
+        assertEquals(true, test.isSupported(DateTimeFieldType.dayOfYear()));
+        assertEquals(true, Arrays.equals(test.getFieldTypes(), types));
+        assertEquals(true, Arrays.equals(test.getValues(), values));
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Test constructor
+     */
+    public void testConstructor_Partial() throws Throwable {
+        YearMonthDay ymd = new YearMonthDay(2005, 6, 25, GREGORIAN_PARIS);
+        Partial test = new Partial(ymd);
+        assertEquals(GREGORIAN_UTC, test.getChronology());
+        assertEquals(3, test.size());
+        assertEquals(2005, test.getValue(0));
+        assertEquals(2005, test.get(DateTimeFieldType.year()));
+        assertEquals(true, test.isSupported(DateTimeFieldType.year()));
+        assertEquals(6, test.getValue(1));
+        assertEquals(6, test.get(DateTimeFieldType.monthOfYear()));
+        assertEquals(true, test.isSupported(DateTimeFieldType.monthOfYear()));
+        assertEquals(25, test.getValue(2));
+        assertEquals(25, test.get(DateTimeFieldType.dayOfMonth()));
+        assertEquals(true, test.isSupported(DateTimeFieldType.dayOfMonth()));
+    }
+
+    /**
+     * Test constructor
+     */
+    public void testConstructorEx_Partial() throws Throwable {
+        try {
+            new Partial((ReadablePartial) null);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            assertMessageContains(ex, "must not be null");
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Checks if the exception message is valid.
+     * 
+     * @param ex  the exception to check
+     * @param str  the string to check
+     */
+    private void assertMessageContains(Exception ex, String str) {
+        assertEquals(ex.getMessage() + ": " + str, true, ex.getMessage().indexOf(str) >= 0);
+    }
+
+    /**
+     * Checks if the exception message is valid.
+     * 
+     * @param ex  the exception to check
+     * @param str1  the string to check
+     * @param str2  the string to check
+     */
+    private void assertMessageContains(Exception ex, String str1, String str2) {
+        assertEquals(ex.getMessage() + ": " + str1 + "/" + str2, true,
+            ex.getMessage().indexOf(str1) >= 0 &&
+            ex.getMessage().indexOf(str2) >= 0 &&
+            ex.getMessage().indexOf(str1) < ex.getMessage().indexOf(str2));
+    }
+
+}
diff --git a/JodaTime/src/test/org/joda/time/TestPartial_Properties.java b/JodaTime/src/test/org/joda/time/TestPartial_Properties.java
new file mode 100644
index 000000000..283ab06e8
--- /dev/null
+++ b/JodaTime/src/test/org/joda/time/TestPartial_Properties.java
@@ -0,0 +1,402 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time;
+
+import java.util.Locale;
+
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+/**
+ * This class is a Junit unit test for Partial.
+ *
+ * @author Stephen Colebourne
+ */
+public class TestPartial_Properties extends TestCase {
+
+    private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
+    private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
+    
+    private DateTimeZone zone = null;
+    private static final DateTimeFieldType[] TYPES = new DateTimeFieldType[] {
+        DateTimeFieldType.hourOfDay(),
+        DateTimeFieldType.minuteOfHour(),
+        DateTimeFieldType.secondOfMinute(),
+        DateTimeFieldType.millisOfSecond()
+    };
+    private static final int[] VALUES = new int[] {10, 20, 30, 40};
+    private static final int[] VALUES1 = new int[] {1, 2, 3, 4};
+    private static final int[] VALUES2 = new int[] {5, 6, 7, 8};
+
+//    private long TEST_TIME_NOW =
+//        10L * DateTimeConstants.MILLIS_PER_HOUR
+//        + 20L * DateTimeConstants.MILLIS_PER_MINUTE
+//        + 30L * DateTimeConstants.MILLIS_PER_SECOND
+//        + 40L;
+//        
+    private long TEST_TIME1 =
+        1L * DateTimeConstants.MILLIS_PER_HOUR
+        + 2L * DateTimeConstants.MILLIS_PER_MINUTE
+        + 3L * DateTimeConstants.MILLIS_PER_SECOND
+        + 4L;
+    private long TEST_TIME2 =
+        1L * DateTimeConstants.MILLIS_PER_DAY
+        + 5L * DateTimeConstants.MILLIS_PER_HOUR
+        + 6L * DateTimeConstants.MILLIS_PER_MINUTE
+        + 7L * DateTimeConstants.MILLIS_PER_SECOND
+        + 8L;
+
+    public static void main(String[] args) {
+        junit.textui.TestRunner.run(suite());
+    }
+
+    public static TestSuite suite() {
+        return new TestSuite(TestPartial_Properties.class);
+    }
+
+    public TestPartial_Properties(String name) {
+        super(name);
+    }
+
+    protected void setUp() throws Exception {
+        zone = DateTimeZone.getDefault();
+        DateTimeZone.setDefault(DateTimeZone.UTC);
+    }
+
+    protected void tearDown() throws Exception {
+        DateTimeZone.setDefault(zone);
+        zone = null;
+    }
+
+    //-----------------------------------------------------------------------
+    public void testPropertyGetHour() {
+        Partial test = new Partial(TYPES, VALUES);
+        assertSame(test.getChronology().hourOfDay(), test.property(DateTimeFieldType.hourOfDay()).getField());
+        assertEquals("hourOfDay", test.property(DateTimeFieldType.hourOfDay()).getName());
+        assertEquals("Property[hourOfDay]", test.property(DateTimeFieldType.hourOfDay()).toString());
+        assertSame(test, test.property(DateTimeFieldType.hourOfDay()).getReadablePartial());
+        assertSame(test, test.property(DateTimeFieldType.hourOfDay()).getPartial());
+        assertEquals(10, test.property(DateTimeFieldType.hourOfDay()).get());
+        assertEquals("10", test.property(DateTimeFieldType.hourOfDay()).getAsString());
+        assertEquals("10", test.property(DateTimeFieldType.hourOfDay()).getAsText());
+        assertEquals("10", test.property(DateTimeFieldType.hourOfDay()).getAsText(Locale.FRENCH));
+        assertEquals("10", test.property(DateTimeFieldType.hourOfDay()).getAsShortText());
+        assertEquals("10", test.property(DateTimeFieldType.hourOfDay()).getAsShortText(Locale.FRENCH));
+        assertEquals(test.getChronology().hours(), test.property(DateTimeFieldType.hourOfDay()).getDurationField());
+        assertEquals(test.getChronology().days(), test.property(DateTimeFieldType.hourOfDay()).getRangeDurationField());
+        assertEquals(2, test.property(DateTimeFieldType.hourOfDay()).getMaximumTextLength(null));
+        assertEquals(2, test.property(DateTimeFieldType.hourOfDay()).getMaximumShortTextLength(null));
+    }
+
+    public void testPropertyGetMaxMinValuesHour() {
+        Partial test = new Partial(TYPES, VALUES);
+        assertEquals(0, test.property(DateTimeFieldType.hourOfDay()).getMinimumValue());
+        assertEquals(0, test.property(DateTimeFieldType.hourOfDay()).getMinimumValueOverall());
+        assertEquals(23, test.property(DateTimeFieldType.hourOfDay()).getMaximumValue());
+        assertEquals(23, test.property(DateTimeFieldType.hourOfDay()).getMaximumValueOverall());
+    }
+
+//    public void testPropertyAddHour() {
+//        Partial test = new Partial(TYPES, VALUES);
+//        Partial copy = test.property(DateTimeFieldType.hourOfDay()).addToCopy(9);
+//        check(test, 10, 20, 30, 40);
+//        check(copy, 19, 20, 30, 40);
+//        
+//        copy = test.property(DateTimeFieldType.hourOfDay()).addToCopy(0);
+//        check(copy, 10, 20, 30, 40);
+//        
+//        copy = test.property(DateTimeFieldType.hourOfDay()).addToCopy(13);
+//        check(copy, 23, 20, 30, 40);
+//        
+//        copy = test.property(DateTimeFieldType.hourOfDay()).addToCopy(14);
+//        check(copy, 0, 20, 30, 40);
+//        
+//        copy = test.property(DateTimeFieldType.hourOfDay()).addToCopy(-10);
+//        check(copy, 0, 20, 30, 40);
+//        
+//        copy = test.property(DateTimeFieldType.hourOfDay()).addToCopy(-11);
+//        check(copy, 23, 20, 30, 40);
+//    }
+//
+    public void testPropertyAddHour() {
+        Partial test = new Partial(TYPES, VALUES);
+        Partial copy = test.property(DateTimeFieldType.hourOfDay()).addToCopy(9);
+        check(test, 10, 20, 30, 40);
+        check(copy, 19, 20, 30, 40);
+        
+        copy = test.property(DateTimeFieldType.hourOfDay()).addToCopy(0);
+        check(copy, 10, 20, 30, 40);
+        
+        copy = test.property(DateTimeFieldType.hourOfDay()).addToCopy(13);
+        check(copy, 23, 20, 30, 40);
+        
+        try {
+            test.property(DateTimeFieldType.hourOfDay()).addToCopy(14);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        check(test, 10, 20, 30, 40);
+        
+        copy = test.property(DateTimeFieldType.hourOfDay()).addToCopy(-10);
+        check(copy, 0, 20, 30, 40);
+        
+        try {
+            test.property(DateTimeFieldType.hourOfDay()).addToCopy(-11);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        check(test, 10, 20, 30, 40);
+    }
+
+    public void testPropertyAddWrapFieldHour() {
+        Partial test = new Partial(TYPES, VALUES);
+        Partial copy = test.property(DateTimeFieldType.hourOfDay()).addWrapFieldToCopy(9);
+        check(test, 10, 20, 30, 40);
+        check(copy, 19, 20, 30, 40);
+        
+        copy = test.property(DateTimeFieldType.hourOfDay()).addWrapFieldToCopy(0);
+        check(copy, 10, 20, 30, 40);
+        
+        copy = test.property(DateTimeFieldType.hourOfDay()).addWrapFieldToCopy(18);
+        check(copy, 4, 20, 30, 40);
+        
+        copy = test.property(DateTimeFieldType.hourOfDay()).addWrapFieldToCopy(-15);
+        check(copy, 19, 20, 30, 40);
+    }
+
+    public void testPropertySetHour() {
+        Partial test = new Partial(TYPES, VALUES);
+        Partial copy = test.property(DateTimeFieldType.hourOfDay()).setCopy(12);
+        check(test, 10, 20, 30, 40);
+        check(copy, 12, 20, 30, 40);
+        
+        try {
+            test.property(DateTimeFieldType.hourOfDay()).setCopy(24);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            test.property(DateTimeFieldType.hourOfDay()).setCopy(-1);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testPropertySetTextHour() {
+        Partial test = new Partial(TYPES, VALUES);
+        Partial copy = test.property(DateTimeFieldType.hourOfDay()).setCopy("12");
+        check(test, 10, 20, 30, 40);
+        check(copy, 12, 20, 30, 40);
+    }
+
+    public void testPropertyCompareToHour() {
+        Partial test1 = new Partial(TYPES, VALUES1);
+        Partial test2 = new Partial(TYPES, VALUES2);
+        assertEquals(true, test1.property(DateTimeFieldType.hourOfDay()).compareTo(test2) < 0);
+        assertEquals(true, test2.property(DateTimeFieldType.hourOfDay()).compareTo(test1) > 0);
+        assertEquals(true, test1.property(DateTimeFieldType.hourOfDay()).compareTo(test1) == 0);
+        try {
+            test1.property(DateTimeFieldType.hourOfDay()).compareTo((ReadablePartial) null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        
+        DateTime dt1 = new DateTime(TEST_TIME1);
+        DateTime dt2 = new DateTime(TEST_TIME2);
+        assertEquals(true, test1.property(DateTimeFieldType.hourOfDay()).compareTo(dt2) < 0);
+        assertEquals(true, test2.property(DateTimeFieldType.hourOfDay()).compareTo(dt1) > 0);
+        assertEquals(true, test1.property(DateTimeFieldType.hourOfDay()).compareTo(dt1) == 0);
+        try {
+            test1.property(DateTimeFieldType.hourOfDay()).compareTo((ReadableInstant) null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
+    public void testPropertyGetMinute() {
+        Partial test = new Partial(TYPES, VALUES);
+        assertSame(test.getChronology().minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour()).getField());
+        assertEquals("minuteOfHour", test.property(DateTimeFieldType.minuteOfHour()).getName());
+        assertEquals("Property[minuteOfHour]", test.property(DateTimeFieldType.minuteOfHour()).toString());
+        assertSame(test, test.property(DateTimeFieldType.minuteOfHour()).getReadablePartial());
+        assertSame(test, test.property(DateTimeFieldType.minuteOfHour()).getPartial());
+        assertEquals(20, test.property(DateTimeFieldType.minuteOfHour()).get());
+        assertEquals("20", test.property(DateTimeFieldType.minuteOfHour()).getAsString());
+        assertEquals("20", test.property(DateTimeFieldType.minuteOfHour()).getAsText());
+        assertEquals("20", test.property(DateTimeFieldType.minuteOfHour()).getAsText(Locale.FRENCH));
+        assertEquals("20", test.property(DateTimeFieldType.minuteOfHour()).getAsShortText());
+        assertEquals("20", test.property(DateTimeFieldType.minuteOfHour()).getAsShortText(Locale.FRENCH));
+        assertEquals(test.getChronology().minutes(), test.property(DateTimeFieldType.minuteOfHour()).getDurationField());
+        assertEquals(test.getChronology().hours(), test.property(DateTimeFieldType.minuteOfHour()).getRangeDurationField());
+        assertEquals(2, test.property(DateTimeFieldType.minuteOfHour()).getMaximumTextLength(null));
+        assertEquals(2, test.property(DateTimeFieldType.minuteOfHour()).getMaximumShortTextLength(null));
+    }
+
+    public void testPropertyGetMaxMinValuesMinute() {
+        Partial test = new Partial(TYPES, VALUES);
+        assertEquals(0, test.property(DateTimeFieldType.minuteOfHour()).getMinimumValue());
+        assertEquals(0, test.property(DateTimeFieldType.minuteOfHour()).getMinimumValueOverall());
+        assertEquals(59, test.property(DateTimeFieldType.minuteOfHour()).getMaximumValue());
+        assertEquals(59, test.property(DateTimeFieldType.minuteOfHour()).getMaximumValueOverall());
+    }
+
+//    public void testPropertyAddMinute() {
+//        Partial test = new Partial(TYPES, VALUES);
+//        Partial copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(9);
+//        check(test, 10, 20, 30, 40);
+//        check(copy, 10, 29, 30, 40);
+//        
+//        copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(39);
+//        check(copy, 10, 59, 30, 40);
+//        
+//        copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(40);
+//        check(copy, 11, 0, 30, 40);
+//        
+//        copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(1 * 60 + 45);
+//        check(copy, 12, 5, 30, 40);
+//        
+//        copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(13 * 60 + 39);
+//        check(copy, 23, 59, 30, 40);
+//        
+//        copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(13 * 60 + 40);
+//        check(copy, 0, 0, 30, 40);
+//        
+//        copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-9);
+//        check(copy, 10, 11, 30, 40);
+//        
+//        copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-19);
+//        check(copy, 10, 1, 30, 40);
+//        
+//        copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-20);
+//        check(copy, 10, 0, 30, 40);
+//        
+//        copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-21);
+//        check(copy, 9, 59, 30, 40);
+//        
+//        copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-(10 * 60 + 20));
+//        check(copy, 0, 0, 30, 40);
+//        
+//        copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-(10 * 60 + 21));
+//        check(copy, 23, 59, 30, 40);
+//    }
+
+    public void testPropertyAddMinute() {
+        Partial test = new Partial(TYPES, VALUES);
+        Partial copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(9);
+        check(test, 10, 20, 30, 40);
+        check(copy, 10, 29, 30, 40);
+        
+        copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(39);
+        check(copy, 10, 59, 30, 40);
+        
+        copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(40);
+        check(copy, 11, 0, 30, 40);
+        
+        copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(1 * 60 + 45);
+        check(copy, 12, 5, 30, 40);
+        
+        copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(13 * 60 + 39);
+        check(copy, 23, 59, 30, 40);
+        
+        try {
+            test.property(DateTimeFieldType.minuteOfHour()).addToCopy(13 * 60 + 40);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        check(test, 10, 20, 30, 40);
+        
+        copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-9);
+        check(copy, 10, 11, 30, 40);
+        
+        copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-19);
+        check(copy, 10, 1, 30, 40);
+        
+        copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-20);
+        check(copy, 10, 0, 30, 40);
+        
+        copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-21);
+        check(copy, 9, 59, 30, 40);
+        
+        copy = test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-(10 * 60 + 20));
+        check(copy, 0, 0, 30, 40);
+        
+        try {
+            test.property(DateTimeFieldType.minuteOfHour()).addToCopy(-(10 * 60 + 21));
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        check(test, 10, 20, 30, 40);
+    }
+
+    public void testPropertyAddWrapFieldMinute() {
+        Partial test = new Partial(TYPES, VALUES);
+        Partial copy = test.property(DateTimeFieldType.minuteOfHour()).addWrapFieldToCopy(9);
+        check(test, 10, 20, 30, 40);
+        check(copy, 10, 29, 30, 40);
+        
+        copy = test.property(DateTimeFieldType.minuteOfHour()).addWrapFieldToCopy(49);
+        check(copy, 10, 9, 30, 40);
+        
+        copy = test.property(DateTimeFieldType.minuteOfHour()).addWrapFieldToCopy(-47);
+        check(copy, 10, 33, 30, 40);
+    }
+
+    public void testPropertySetMinute() {
+        Partial test = new Partial(TYPES, VALUES);
+        Partial copy = test.property(DateTimeFieldType.minuteOfHour()).setCopy(12);
+        check(test, 10, 20, 30, 40);
+        check(copy, 10, 12, 30, 40);
+        
+        try {
+            test.property(DateTimeFieldType.minuteOfHour()).setCopy(60);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            test.property(DateTimeFieldType.minuteOfHour()).setCopy(-1);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testPropertySetTextMinute() {
+        Partial test = new Partial(TYPES, VALUES);
+        Partial copy = test.property(DateTimeFieldType.minuteOfHour()).setCopy("12");
+        check(test, 10, 20, 30, 40);
+        check(copy, 10, 12, 30, 40);
+    }
+
+    public void testPropertyCompareToMinute() {
+        Partial test1 = new Partial(TYPES, VALUES1);
+        Partial test2 = new Partial(TYPES, VALUES2);
+        assertEquals(true, test1.property(DateTimeFieldType.minuteOfHour()).compareTo(test2) < 0);
+        assertEquals(true, test2.property(DateTimeFieldType.minuteOfHour()).compareTo(test1) > 0);
+        assertEquals(true, test1.property(DateTimeFieldType.minuteOfHour()).compareTo(test1) == 0);
+        try {
+            test1.property(DateTimeFieldType.minuteOfHour()).compareTo((ReadablePartial) null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        
+        DateTime dt1 = new DateTime(TEST_TIME1);
+        DateTime dt2 = new DateTime(TEST_TIME2);
+        assertEquals(true, test1.property(DateTimeFieldType.minuteOfHour()).compareTo(dt2) < 0);
+        assertEquals(true, test2.property(DateTimeFieldType.minuteOfHour()).compareTo(dt1) > 0);
+        assertEquals(true, test1.property(DateTimeFieldType.minuteOfHour()).compareTo(dt1) == 0);
+        try {
+            test1.property(DateTimeFieldType.minuteOfHour()).compareTo((ReadableInstant) null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
+    private void check(Partial test, int hour, int min, int sec, int milli) {
+        assertEquals(hour, test.get(DateTimeFieldType.hourOfDay()));
+        assertEquals(min, test.get(DateTimeFieldType.minuteOfHour()));
+        assertEquals(sec, test.get(DateTimeFieldType.secondOfMinute()));
+        assertEquals(milli, test.get(DateTimeFieldType.millisOfSecond()));
+    }
+}

From d5b286c424973c151857c22c1f3b6ae041fd9095 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 26 Jun 2005 23:31:32 +0000
Subject: [PATCH 065/124] Add to ignores

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@797 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/.cvsignore | 1 +
 1 file changed, 1 insertion(+)

diff --git a/JodaTime/.cvsignore b/JodaTime/.cvsignore
index 2c21fd7b0..a0341bd49 100644
--- a/JodaTime/.cvsignore
+++ b/JodaTime/.cvsignore
@@ -9,3 +9,4 @@ jcoverage.ser
 build
 junit*.properties
 lib
+.dj*

From 60254016834083e30788bc0ea150c5b32f3af3fe Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 26 Jun 2005 23:32:30 +0000
Subject: [PATCH 066/124] Fix since tag

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@798 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/Partial.java | 1 -
 1 file changed, 1 deletion(-)

diff --git a/JodaTime/src/java/org/joda/time/Partial.java b/JodaTime/src/java/org/joda/time/Partial.java
index c9b1ae518..9abf02ad8 100644
--- a/JodaTime/src/java/org/joda/time/Partial.java
+++ b/JodaTime/src/java/org/joda/time/Partial.java
@@ -846,7 +846,6 @@ public String toString(String pattern, Locale locale) {
      * This class binds a <code>YearMonthDay</code> to a <code>DateTimeField</code>.
      * 
      * @author Stephen Colebourne
-     * @since 1.0
      */
     public static class Property extends AbstractPartialFieldProperty implements Serializable {
 

From 130676f765d636563f24c1d28718808072cea612 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 27 Jun 2005 00:13:12 +0000
Subject: [PATCH 067/124] Improve test coverage

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@799 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../org/joda/time/format/DateTimeFormat.java  |   2 +-
 .../joda/time/format/ISODateTimeFormat.java   |   3 +-
 .../org/joda/time/format/ISOPeriodFormat.java |   3 +-
 .../org/joda/time/format/PeriodFormat.java    |   4 +-
 .../joda/time/TestYearMonthDay_Basics.java    |  12 ++
 .../test/org/joda/time/format/TestAll.java    |   2 +
 .../joda/time/format/TestDateTimeFormat.java  |   8 ++
 .../format/TestDateTimeFormatterBuilder.java  | 125 ++++++++++++++++++
 .../time/format/TestISODateTimeFormat.java    |   8 ++
 .../joda/time/format/TestISOPeriodFormat.java |  10 +-
 .../joda/time/format/TestPeriodFormat.java    | 106 +++++++++++++++
 11 files changed, 278 insertions(+), 5 deletions(-)
 create mode 100644 JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java
 create mode 100644 JodaTime/src/test/org/joda/time/format/TestPeriodFormat.java

diff --git a/JodaTime/src/java/org/joda/time/format/DateTimeFormat.java b/JodaTime/src/java/org/joda/time/format/DateTimeFormat.java
index 3b5effae8..1712a5886 100644
--- a/JodaTime/src/java/org/joda/time/format/DateTimeFormat.java
+++ b/JodaTime/src/java/org/joda/time/format/DateTimeFormat.java
@@ -355,7 +355,7 @@ static void appendPatternTo(DateTimeFormatterBuilder builder, String pattern) {
     /**
      * Constructor.
      */
-    private DateTimeFormat() {
+    protected DateTimeFormat() {
         super();
     }
 
diff --git a/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java b/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java
index 82ae0558d..8ff95f49a 100644
--- a/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java
+++ b/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java
@@ -128,7 +128,8 @@
      * 
      * @param chrono  the chronology to use, must not be null
      */
-    private ISODateTimeFormat() {
+    protected ISODateTimeFormat() {
+        super();
     }
 
     //-----------------------------------------------------------------------
diff --git a/JodaTime/src/java/org/joda/time/format/ISOPeriodFormat.java b/JodaTime/src/java/org/joda/time/format/ISOPeriodFormat.java
index 99b037d0a..09d0de1d9 100644
--- a/JodaTime/src/java/org/joda/time/format/ISOPeriodFormat.java
+++ b/JodaTime/src/java/org/joda/time/format/ISOPeriodFormat.java
@@ -46,7 +46,8 @@
     /**
      * Constructor.
      */
-    private ISOPeriodFormat() {
+    protected ISOPeriodFormat() {
+        super();
     }
 
     //-----------------------------------------------------------------------
diff --git a/JodaTime/src/java/org/joda/time/format/PeriodFormat.java b/JodaTime/src/java/org/joda/time/format/PeriodFormat.java
index 61bc198b1..a27bcb487 100644
--- a/JodaTime/src/java/org/joda/time/format/PeriodFormat.java
+++ b/JodaTime/src/java/org/joda/time/format/PeriodFormat.java
@@ -38,9 +38,11 @@
     /**
      * Constructor.
      */
-    private PeriodFormat() {
+    protected PeriodFormat() {
+        super();
     }
 
+    //-----------------------------------------------------------------------
     /**
      * Gets the default PeriodFormatter.
      * <p>
diff --git a/JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java b/JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java
index 22ae60cab..c009ed4d9 100644
--- a/JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java
@@ -258,6 +258,18 @@ public void testCompareTo() {
             test1.compareTo(new Date());
             fail();
         } catch (ClassCastException ex) {}
+        try {
+            test1.compareTo(new TimeOfDay());
+            fail();
+        } catch (ClassCastException ex) {}
+        Partial partial = new Partial()
+            .with(DateTimeFieldType.centuryOfEra(), 1)
+            .with(DateTimeFieldType.halfdayOfDay(), 0)
+            .with(DateTimeFieldType.dayOfMonth(), 9);
+        try {
+            new YearMonthDay(1970, 6, 9).compareTo(partial);
+            fail();
+        } catch (ClassCastException ex) {}
     }
     
     //-----------------------------------------------------------------------
diff --git a/JodaTime/src/test/org/joda/time/format/TestAll.java b/JodaTime/src/test/org/joda/time/format/TestAll.java
index 60c0c4e46..b63f878ed 100644
--- a/JodaTime/src/test/org/joda/time/format/TestAll.java
+++ b/JodaTime/src/test/org/joda/time/format/TestAll.java
@@ -40,8 +40,10 @@ public static Test suite() {
         suite.addTest(TestDateTimeFormatStyle.suite());
         suite.addTest(TestISODateTimeFormat.suite());
         suite.addTest(TestISODateTimeFormat_Fields.suite());
+        suite.addTest(TestDateTimeFormatterBuilder.suite());
         
         suite.addTest(TestPeriodFormatter.suite());
+        suite.addTest(TestPeriodFormat.suite());
         suite.addTest(TestISOPeriodFormat.suite());
         suite.addTest(TestISOPeriodFormatParsing.suite());
         suite.addTest(TestPeriodFormatParsing.suite());
diff --git a/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java b/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java
index ec9925d48..682fe1e2e 100644
--- a/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java
+++ b/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java
@@ -85,6 +85,14 @@ protected void tearDown() throws Exception {
         originalLocale = null;
     }
 
+    //-----------------------------------------------------------------------
+    public void testSubclassableConstructor() {
+        DateTimeFormat f = new DateTimeFormat() {
+            // test constructor is protected
+        };
+        assertNotNull(f);
+    }
+
     //-----------------------------------------------------------------------
     public void testFormat_era() {
         DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);
diff --git a/JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java b/JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java
new file mode 100644
index 000000000..4ef01d404
--- /dev/null
+++ b/JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java
@@ -0,0 +1,125 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.format;
+
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+/**
+ * This class is a Junit unit test for DateTimeFormatterBuilder.
+ *
+ * @author Stephen Colebourne
+ */
+public class TestDateTimeFormatterBuilder extends TestCase {
+
+    public static void main(String[] args) {
+        junit.textui.TestRunner.run(suite());
+    }
+
+    public static TestSuite suite() {
+        return new TestSuite(TestDateTimeFormatterBuilder.class);
+    }
+
+    public TestDateTimeFormatterBuilder(String name) {
+        super(name);
+    }
+
+    protected void setUp() throws Exception {
+    }
+
+    protected void tearDown() throws Exception {
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_toFormatter() {
+        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();
+        try {
+            bld.toFormatter();
+            fail();
+        } catch (UnsupportedOperationException ex) {}
+        bld.appendLiteral('X');
+        assertNotNull(bld.toFormatter());
+    }
+
+    public void test_toPrinter() {
+        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();
+        try {
+            bld.toPrinter();
+            fail();
+        } catch (UnsupportedOperationException ex) {}
+        bld.appendLiteral('X');
+        assertNotNull(bld.toPrinter());
+    }
+
+    public void test_toParser() {
+        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();
+        try {
+            bld.toParser();
+            fail();
+        } catch (UnsupportedOperationException ex) {}
+        bld.appendLiteral('X');
+        assertNotNull(bld.toParser());
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_canBuildFormatter() {
+        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();
+        assertEquals(false, bld.canBuildFormatter());
+        bld.appendLiteral('X');
+        assertEquals(true, bld.canBuildFormatter());
+    }
+
+    public void test_canBuildPrinter() {
+        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();
+        assertEquals(false, bld.canBuildPrinter());
+        bld.appendLiteral('X');
+        assertEquals(true, bld.canBuildPrinter());
+    }
+
+    public void test_canBuildParser() {
+        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();
+        assertEquals(false, bld.canBuildParser());
+        bld.appendLiteral('X');
+        assertEquals(true, bld.canBuildParser());
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_append_Formatter() {
+        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();
+        bld.appendLiteral('Y');
+        DateTimeFormatter f = bld.toFormatter();
+        
+        DateTimeFormatterBuilder bld2 = new DateTimeFormatterBuilder();
+        bld2.appendLiteral('X');
+        bld2.append(f);
+        bld2.appendLiteral('Z');
+        assertEquals("XYZ", bld2.toFormatter().print(0L));
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_append_Printer() {
+        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();
+        bld.appendLiteral('Y');
+        DateTimePrinter p = bld.toPrinter();
+        
+        DateTimeFormatterBuilder bld2 = new DateTimeFormatterBuilder();
+        bld2.appendLiteral('X');
+        bld2.append(p);
+        bld2.appendLiteral('Z');
+        assertEquals("XYZ", bld2.toFormatter().print(0L));
+    }
+
+}
diff --git a/JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java b/JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java
index 0375a4f8a..1092887dd 100644
--- a/JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java
+++ b/JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java
@@ -82,6 +82,14 @@ protected void tearDown() throws Exception {
         originalLocale = null;
     }
 
+    //-----------------------------------------------------------------------
+    public void testSubclassableConstructor() {
+        ISODateTimeFormat f = new ISODateTimeFormat() {
+            // test constructor is protected
+        };
+        assertNotNull(f);
+    }
+
     //-----------------------------------------------------------------------
     public void testFormat_date() {
         DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);
diff --git a/JodaTime/src/test/org/joda/time/format/TestISOPeriodFormat.java b/JodaTime/src/test/org/joda/time/format/TestISOPeriodFormat.java
index 204cd22b0..ff5e392f1 100644
--- a/JodaTime/src/test/org/joda/time/format/TestISOPeriodFormat.java
+++ b/JodaTime/src/test/org/joda/time/format/TestISOPeriodFormat.java
@@ -28,7 +28,7 @@
 import org.joda.time.PeriodType;
 
 /**
- * This class is a Junit unit test for PeriodFormatterBuilder.
+ * This class is a Junit unit test for ISOPeriodFormat.
  *
  * @author Stephen Colebourne
  */
@@ -89,6 +89,14 @@ protected void tearDown() throws Exception {
         originalLocale = null;
     }
 
+    //-----------------------------------------------------------------------
+    public void testSubclassableConstructor() {
+        ISOPeriodFormat f = new ISOPeriodFormat() {
+            // test constructor is protected
+        };
+        assertNotNull(f);
+    }
+
     //-----------------------------------------------------------------------
     public void testFormatStandard() {
         Period p = new Period(1, 2, 3, 4, 5, 6 ,7, 8);
diff --git a/JodaTime/src/test/org/joda/time/format/TestPeriodFormat.java b/JodaTime/src/test/org/joda/time/format/TestPeriodFormat.java
new file mode 100644
index 000000000..f5325613d
--- /dev/null
+++ b/JodaTime/src/test/org/joda/time/format/TestPeriodFormat.java
@@ -0,0 +1,106 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.format;
+
+import java.util.Locale;
+import java.util.TimeZone;
+
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+import org.joda.time.DateTimeConstants;
+import org.joda.time.DateTimeUtils;
+import org.joda.time.DateTimeZone;
+import org.joda.time.Period;
+import org.joda.time.PeriodType;
+
+/**
+ * This class is a Junit unit test for PeriodFormat.
+ *
+ * @author Stephen Colebourne
+ */
+public class TestPeriodFormat extends TestCase {
+    
+    private static final Period PERIOD = new Period(1, 2, 3, 4, 5, 6, 7, 8);
+    private static final Period EMPTY_PERIOD = new Period(0, 0, 0, 0, 0, 0, 0, 0);
+    private static final Period YEAR_DAY_PERIOD = new Period(1, 0, 0, 4, 5, 6, 7, 8, PeriodType.yearDayTime());
+    private static final Period EMPTY_YEAR_DAY_PERIOD = new Period(0, 0, 0, 0, 0, 0, 0, 0, PeriodType.yearDayTime());
+    private static final Period TIME_PERIOD = new Period(0, 0, 0, 0, 5, 6, 7, 8);
+    private static final Period DATE_PERIOD = new Period(1, 2, 3, 4, 0, 0, 0, 0);
+
+    private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
+    private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
+    private static final DateTimeZone TOKYO = DateTimeZone.forID("Asia/Tokyo");
+
+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 
+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 
+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
+                     366 + 365;
+    // 2002-06-09
+    private long TEST_TIME_NOW =
+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
+
+    private DateTimeZone originalDateTimeZone = null;
+    private TimeZone originalTimeZone = null;
+    private Locale originalLocale = null;
+
+    public static void main(String[] args) {
+        junit.textui.TestRunner.run(suite());
+    }
+
+    public static TestSuite suite() {
+        return new TestSuite(TestPeriodFormat.class);
+    }
+
+    public TestPeriodFormat(String name) {
+        super(name);
+    }
+
+    protected void setUp() throws Exception {
+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
+        originalDateTimeZone = DateTimeZone.getDefault();
+        originalTimeZone = TimeZone.getDefault();
+        originalLocale = Locale.getDefault();
+        DateTimeZone.setDefault(LONDON);
+        TimeZone.setDefault(TimeZone.getTimeZone("Europe/London"));
+        Locale.setDefault(Locale.UK);
+    }
+
+    protected void tearDown() throws Exception {
+        DateTimeUtils.setCurrentMillisSystem();
+        DateTimeZone.setDefault(originalDateTimeZone);
+        TimeZone.setDefault(originalTimeZone);
+        Locale.setDefault(originalLocale);
+        originalDateTimeZone = null;
+        originalTimeZone = null;
+        originalLocale = null;
+    }
+
+    //-----------------------------------------------------------------------
+    public void testSubclassableConstructor() {
+        PeriodFormat f = new PeriodFormat() {
+            // test constructor is protected
+        };
+        assertNotNull(f);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testFormatStandard() {
+        Period p = new Period(0, 0, 0, 1, 5, 6 ,7, 8);
+        assertEquals("1 day, 5 hours, 6 minutes, 7 seconds and 8 milliseconds", PeriodFormat.getDefault().print(p));
+    }
+
+}

From 21d77672ea8891011a687d75f49c226443699551 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Mon, 27 Jun 2005 15:51:40 +0000
Subject: [PATCH 068/124] Fix javadoc tags

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@800 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/Partial.java                  | 2 +-
 JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java | 2 --
 2 files changed, 1 insertion(+), 3 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/Partial.java b/JodaTime/src/java/org/joda/time/Partial.java
index 9abf02ad8..e166a3f64 100644
--- a/JodaTime/src/java/org/joda/time/Partial.java
+++ b/JodaTime/src/java/org/joda/time/Partial.java
@@ -109,7 +109,7 @@ public Partial() {
      * Note that, although this is a clean way to write code, it is fairly
      * inefficient internally.
      *
-     * @param chronology  the chronology, null means ISO
+     * @param chrono  the chronology, null means ISO
      */
     public Partial(Chronology chrono) {
         super();
diff --git a/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java b/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java
index 8ff95f49a..150c442ed 100644
--- a/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java
+++ b/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java
@@ -125,8 +125,6 @@
 
     /**
      * Restricted constructor.
-     * 
-     * @param chrono  the chronology to use, must not be null
      */
     protected ISODateTimeFormat() {
         super();

From b89ac405b302e2246692c5a9b04c577b0d6e4c67 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 27 Jun 2005 22:49:17 +0000
Subject: [PATCH 069/124] Add test and comment about TimeOfDay string
 constructor

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@801 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/TimeOfDay.java   |  4 ++++
 .../joda/time/TestTimeOfDay_Constructors.java    | 16 ++++++++++++++++
 2 files changed, 20 insertions(+)

diff --git a/JodaTime/src/java/org/joda/time/TimeOfDay.java b/JodaTime/src/java/org/joda/time/TimeOfDay.java
index 96fc279c1..720943938 100644
--- a/JodaTime/src/java/org/joda/time/TimeOfDay.java
+++ b/JodaTime/src/java/org/joda/time/TimeOfDay.java
@@ -192,6 +192,8 @@ public TimeOfDay(long instant, Chronology chronology) {
      * {@link org.joda.time.convert.ConverterManager ConverterManager} and
      * include ReadableInstant, String, Calendar and Date.
      * <p>
+     * The string format must begin with a 'T' to be recognised, such as 'T10:20'.
+     * <p>
      * The chronology used will be derived from the object, defaulting to ISO.
      *
      * @param instant  the datetime object, null means now
@@ -209,6 +211,8 @@ public TimeOfDay(Object instant) {
      * {@link org.joda.time.convert.ConverterManager ConverterManager} and
      * include ReadableInstant, String, Calendar and Date.
      * <p>
+     * The string format must begin with a 'T' to be recognised, such as 'T10:20'.
+     * <p>
      * The constructor uses the time zone of the chronology specified.
      * Once the constructor is complete, all further calculations are performed
      * without reference to a timezone (by switching to UTC).
diff --git a/JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java b/JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java
index a763ac090..d1efd023e 100644
--- a/JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java
+++ b/JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java
@@ -320,6 +320,22 @@ public void testConstructor_Object_Chronology() throws Throwable {
         assertEquals(4, test.getMillisOfSecond());
     }
 
+    /**
+     * Test constructor (Object, Chronology)
+     */
+    public void testConstructor2_Object_Chronology() throws Throwable {
+        TimeOfDay test = new TimeOfDay("T10:20");
+        assertEquals(10, test.getHourOfDay());
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(0, test.getSecondOfMinute());
+        assertEquals(0, test.getMillisOfSecond());
+        
+        try {
+            new TimeOfDay("T1020");
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
     /**
      * Test constructor (Object=null, Chronology)
      */

From 21b0b48a4fba78b951dee7086975907ce5c6f62a Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 27 Jun 2005 23:14:53 +0000
Subject: [PATCH 070/124] Add ordinal date formats to ISODateFormat

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@802 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |   3 +
 .../joda/time/format/ISODateTimeFormat.java   | 114 ++++++++++++++++++
 .../time/format/TestISODateTimeFormat.java    |  66 ++++++++++
 3 files changed, 183 insertions(+)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 3bf6df451..8aef00b15 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -132,6 +132,9 @@ Enhancements since 1.0
   New method, forFields(), which gets an ISO format for a set of fields.
   This is useful for more unusual formats such as DayHour.
 
+- ISODateTimeFormat
+  New methods to output ordinal style dates, such as 2005-161.
+
 - DateTimeZone classes updated to latest data from the Olsen time zone database
 
 
diff --git a/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java b/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java
index 150c442ed..e077b7a40 100644
--- a/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java
+++ b/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java
@@ -105,6 +105,10 @@
         wdt, // week date time
         wdtx, // week date time no millis
 
+        od,  // ordinal date (same as yd)
+        odt, // ordinal date time
+        odtx, // ordinal date time no millis
+
         bd,  // basic date
         bt,  // basic time
         btx,  // basic time no millis
@@ -113,6 +117,10 @@
         bdt, // basic date time
         bdtx, // basic date time no millis
 
+        bod,  // basic ordinal date
+        bodt, // basic ordinal date time
+        bodtx, // basic ordinal date time no millis
+
         bwd,  // basic week date
         bwdt, // basic week date time
         bwdtx, // basic week date time no millis
@@ -833,6 +841,59 @@ public static DateTimeFormatter dateTimeNoMillis() {
         return dtx;
     }
 
+    /**
+     * Returns a formatter for a full ordinal date, using a four
+     * digit year and three digit dayOfYear (yyyy-DDD).
+     * 
+     * @return a formatter for yyyy-DDD
+     * @since 1.1
+     */
+    public static DateTimeFormatter ordinalDate() {
+        if (od == null) {
+            od = new DateTimeFormatterBuilder()
+                .append(yearElement())
+                .append(dayOfYearElement())
+                .toFormatter();
+        }
+        return od;
+    }
+
+    /**
+     * Returns a formatter for a full ordinal date and time, using a four
+     * digit year and three digit dayOfYear (yyyy-DDD'T'HH:mm:ss.SSSZ).
+     * The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero.
+     * 
+     * @return a formatter for yyyy-DDD'T'HH:mm:ss.SSSZ
+     * @since 1.1
+     */
+    public static DateTimeFormatter ordinalDateTime() {
+        if (odt == null) {
+            odt = new DateTimeFormatterBuilder()
+                .append(ordinalDate())
+                .append(tTime())
+                .toFormatter();
+        }
+        return odt;
+    }
+
+    /**
+     * Returns a formatter for a full ordinal date and time without millis,
+     * using a four digit year and three digit dayOfYear (yyyy-DDD'T'HH:mm:ssZ).
+     * The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero.
+     * 
+     * @return a formatter for yyyy-DDD'T'HH:mm:ssZ
+     * @since 1.1
+     */
+    public static DateTimeFormatter ordinalDateTimeNoMillis() {
+        if (odtx == null) {
+            odtx = new DateTimeFormatterBuilder()
+                .append(ordinalDate())
+                .append(tTimeNoMillis())
+                .toFormatter();
+        }
+        return odtx;
+    }
+
     /**
      * Returns a formatter for a full date as four digit weekyear, two digit
      * week of weekyear, and one digit day of week (xxxx-'W'ww-e).
@@ -1006,6 +1067,59 @@ public static DateTimeFormatter basicDateTimeNoMillis() {
         return bdtx;
     }
 
+    /**
+     * Returns a formatter for a full ordinal date, using a four
+     * digit year and three digit dayOfYear (yyyyDDD).
+     * 
+     * @return a formatter for yyyyDDD
+     * @since 1.1
+     */
+    public static DateTimeFormatter basicOrdinalDate() {
+        if (bod == null) {
+            bod = new DateTimeFormatterBuilder()
+                .appendYear(4, 4)
+                .appendDayOfYear(3)
+                .toFormatter();
+        }
+        return bod;
+    }
+
+    /**
+     * Returns a formatter for a full ordinal date and time, using a four
+     * digit year and three digit dayOfYear (yyyyDDD'T'HHmmss.SSSZ).
+     * The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero.
+     * 
+     * @return a formatter for yyyyDDD'T'HHmmss.SSSZ
+     * @since 1.1
+     */
+    public static DateTimeFormatter basicOrdinalDateTime() {
+        if (bodt == null) {
+            bodt = new DateTimeFormatterBuilder()
+                .append(basicOrdinalDate())
+                .append(basicTTime())
+                .toFormatter();
+        }
+        return bodt;
+    }
+
+    /**
+     * Returns a formatter for a full ordinal date and time without millis,
+     * using a four digit year and three digit dayOfYear (yyyyDDD'T'HHmmssZ).
+     * The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero.
+     * 
+     * @return a formatter for yyyyDDD'T'HHmmssZ
+     * @since 1.1
+     */
+    public static DateTimeFormatter basicOrdinalDateTimeNoMillis() {
+        if (bodtx == null) {
+            bodtx = new DateTimeFormatterBuilder()
+                .append(basicOrdinalDate())
+                .append(basicTTimeNoMillis())
+                .toFormatter();
+        }
+        return bodtx;
+    }
+
     /**
      * Returns a basic formatter for a full date as four digit weekyear, two
      * digit week of weekyear, and one digit day of week (xxxx'W'wwe).
diff --git a/JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java b/JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java
index 1092887dd..99602fb85 100644
--- a/JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java
+++ b/JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java
@@ -180,6 +180,39 @@ public void testFormat_dateTimeNoMillis() {
         assertEquals("2004-06-09T12:20:30+02:00", ISODateTimeFormat.dateTimeNoMillis().print(dt));
     }
 
+    public void testFormat_ordinalDate() {
+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);
+        assertEquals("2004-161", ISODateTimeFormat.ordinalDate().print(dt));
+        
+        dt = dt.withZone(LONDON);
+        assertEquals("2004-161", ISODateTimeFormat.ordinalDate().print(dt));
+        
+        dt = dt.withZone(PARIS);
+        assertEquals("2004-161", ISODateTimeFormat.ordinalDate().print(dt));
+    }
+
+    public void testFormat_ordinalDateTime() {
+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);
+        assertEquals("2004-161T10:20:30.040Z", ISODateTimeFormat.ordinalDateTime().print(dt));
+        
+        dt = dt.withZone(LONDON);
+        assertEquals("2004-161T11:20:30.040+01:00", ISODateTimeFormat.ordinalDateTime().print(dt));
+        
+        dt = dt.withZone(PARIS);
+        assertEquals("2004-161T12:20:30.040+02:00", ISODateTimeFormat.ordinalDateTime().print(dt));
+    }
+
+    public void testFormat_ordinalDateTimeNoMillis() {
+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);
+        assertEquals("2004-161T10:20:30Z", ISODateTimeFormat.ordinalDateTimeNoMillis().print(dt));
+        
+        dt = dt.withZone(LONDON);
+        assertEquals("2004-161T11:20:30+01:00", ISODateTimeFormat.ordinalDateTimeNoMillis().print(dt));
+        
+        dt = dt.withZone(PARIS);
+        assertEquals("2004-161T12:20:30+02:00", ISODateTimeFormat.ordinalDateTimeNoMillis().print(dt));
+    }
+
     public void testFormat_weekDate() {
         DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);
         assertEquals("2004-W24-3", ISODateTimeFormat.weekDate().print(dt));
@@ -291,6 +324,39 @@ public void testFormat_basicDateTimeNoMillis() {
         assertEquals("20040609T122030+0200", ISODateTimeFormat.basicDateTimeNoMillis().print(dt));
     }
 
+    public void testFormat_basicOrdinalDate() {
+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);
+        assertEquals("2004161", ISODateTimeFormat.basicOrdinalDate().print(dt));
+        
+        dt = dt.withZone(LONDON);
+        assertEquals("2004161", ISODateTimeFormat.basicOrdinalDate().print(dt));
+        
+        dt = dt.withZone(PARIS);
+        assertEquals("2004161", ISODateTimeFormat.basicOrdinalDate().print(dt));
+    }
+
+    public void testFormat_basicOrdinalDateTime() {
+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);
+        assertEquals("2004161T102030.040Z", ISODateTimeFormat.basicOrdinalDateTime().print(dt));
+        
+        dt = dt.withZone(LONDON);
+        assertEquals("2004161T112030.040+0100", ISODateTimeFormat.basicOrdinalDateTime().print(dt));
+        
+        dt = dt.withZone(PARIS);
+        assertEquals("2004161T122030.040+0200", ISODateTimeFormat.basicOrdinalDateTime().print(dt));
+    }
+
+    public void testFormat_basicOrdinalDateTimeNoMillis() {
+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);
+        assertEquals("2004161T102030Z", ISODateTimeFormat.basicOrdinalDateTimeNoMillis().print(dt));
+        
+        dt = dt.withZone(LONDON);
+        assertEquals("2004161T112030+0100", ISODateTimeFormat.basicOrdinalDateTimeNoMillis().print(dt));
+        
+        dt = dt.withZone(PARIS);
+        assertEquals("2004161T122030+0200", ISODateTimeFormat.basicOrdinalDateTimeNoMillis().print(dt));
+    }
+
     public void testFormat_basicWeekDate() {
         DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);
         assertEquals("2004W243", ISODateTimeFormat.basicWeekDate().print(dt));

From 3937d82f6670e5a30b2809b13cb6d05a7e606037 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 5 Jul 2005 22:47:34 +0000
Subject: [PATCH 071/124] Add PeriodType.forFields to get a PeriodType for any
 set of fields

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@803 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/java/org/joda/time/PeriodType.java    |  93 +++++++++++
 .../test/org/joda/time/TestPeriodType.java    | 149 ++++++++++++++++++
 2 files changed, 242 insertions(+)

diff --git a/JodaTime/src/java/org/joda/time/PeriodType.java b/JodaTime/src/java/org/joda/time/PeriodType.java
index 94deefd68..d2c6c593a 100644
--- a/JodaTime/src/java/org/joda/time/PeriodType.java
+++ b/JodaTime/src/java/org/joda/time/PeriodType.java
@@ -16,7 +16,11 @@
 package org.joda.time;
 
 import java.io.Serializable;
+import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
 
 import org.joda.time.field.FieldUtils;
 
@@ -48,6 +52,9 @@
     /** Serialization version */
     private static final long serialVersionUID = 2274324892792009998L;
 
+    /** Cache of all the known types. */
+    private static final Map cTypes = new HashMap(32);
+
     static int YEAR_INDEX = 0;
     static int MONTH_INDEX = 1;
     static int WEEK_INDEX = 2;
@@ -482,6 +489,92 @@ public static PeriodType millis() {
         return type;
     }
 
+    /**
+     * Gets a period type that contains the duration types of the array.
+     * <p>
+     * Only the 8 standard duration field types are supported.
+     *
+     * @param types  the types to include in the array.
+     * @return the period type
+     */
+    public static synchronized PeriodType forFields(DurationFieldType[] types) {
+        if (types == null || types.length == 0) {
+            throw new IllegalArgumentException("Types array must not be null or empty");
+        }
+        for (int i = 0; i < types.length; i++) {
+            if (types[i] == null) {
+                throw new IllegalArgumentException("Types array must not contain null");
+            }
+        }
+        Map cache = cTypes;
+        if (cTypes.isEmpty()) {
+            cache.put(standard(), standard());
+            cache.put(yearMonthDayTime(), yearMonthDayTime());
+            cache.put(yearMonthDay(), yearMonthDay());
+            cache.put(yearWeekDayTime(), yearWeekDayTime());
+            cache.put(yearWeekDay(), yearWeekDay());
+            cache.put(yearDayTime(), yearDayTime());
+            cache.put(yearDay(), yearDay());
+            cache.put(dayTime(), dayTime());
+            cache.put(time(), time());
+            cache.put(years(), years());
+            cache.put(months(), months());
+            cache.put(weeks(), weeks());
+            cache.put(days(), days());
+            cache.put(hours(), hours());
+            cache.put(minutes(), minutes());
+            cache.put(seconds(), seconds());
+            cache.put(millis(), millis());
+        }
+        PeriodType inPartType = new PeriodType(null, types, null);
+        Object cached = cache.get(inPartType);
+        if (cached instanceof PeriodType) {
+            return (PeriodType) cached;
+        }
+        if (cached != null) {
+            throw new IllegalArgumentException("PeriodType does not support fields: " + cached);
+        }
+        PeriodType type = standard();
+        List list = new ArrayList(Arrays.asList(types));
+        if (list.remove(DurationFieldType.years()) == false) {
+            type = type.withYearsRemoved();
+        }
+        if (list.remove(DurationFieldType.months()) == false) {
+            type = type.withMonthsRemoved();
+        }
+        if (list.remove(DurationFieldType.weeks()) == false) {
+            type = type.withWeeksRemoved();
+        }
+        if (list.remove(DurationFieldType.days()) == false) {
+            type = type.withDaysRemoved();
+        }
+        if (list.remove(DurationFieldType.hours()) == false) {
+            type = type.withHoursRemoved();
+        }
+        if (list.remove(DurationFieldType.minutes()) == false) {
+            type = type.withMinutesRemoved();
+        }
+        if (list.remove(DurationFieldType.seconds()) == false) {
+            type = type.withSecondsRemoved();
+        }
+        if (list.remove(DurationFieldType.millis()) == false) {
+            type = type.withMillisRemoved();
+        }
+        if (list.size() > 0) {
+            cache.put(inPartType, list);
+            throw new IllegalArgumentException("PeriodType does not support fields: " + list);
+        }
+        // recheck cache in case initial array order was wrong
+        PeriodType checkPartType = new PeriodType(null, type.iTypes, null);
+        PeriodType checkedType = (PeriodType) cache.get(checkPartType);
+        if (checkedType != null) {
+            cache.put(inPartType, checkedType);
+            return checkedType;
+        }
+        cache.put(inPartType, type);
+        return type;
+    }
+
     //-----------------------------------------------------------------------    
     /** The name of the type */
     private final String iName;
diff --git a/JodaTime/src/test/org/joda/time/TestPeriodType.java b/JodaTime/src/test/org/joda/time/TestPeriodType.java
index a817e0dec..f1e4e4142 100644
--- a/JodaTime/src/test/org/joda/time/TestPeriodType.java
+++ b/JodaTime/src/test/org/joda/time/TestPeriodType.java
@@ -444,6 +444,155 @@ public void testMillis() throws Exception {
         assertSameAfterSerialization(type);
     }
 
+    //-----------------------------------------------------------------------
+    public void testForFields1() throws Exception {
+        PeriodType type = PeriodType.forFields(new DurationFieldType[] {
+            DurationFieldType.years(),
+        });
+        assertSame(PeriodType.years(), type);
+        type = PeriodType.forFields(new DurationFieldType[] {
+            DurationFieldType.months(),
+        });
+        assertSame(PeriodType.months(), type);
+        type = PeriodType.forFields(new DurationFieldType[] {
+                DurationFieldType.weeks(),
+        });
+        assertSame(PeriodType.weeks(), type);
+        type = PeriodType.forFields(new DurationFieldType[] {
+                DurationFieldType.days(),
+        });
+        assertSame(PeriodType.days(), type);
+        type = PeriodType.forFields(new DurationFieldType[] {
+                DurationFieldType.hours(),
+        });
+        assertSame(PeriodType.hours(), type);
+        type = PeriodType.forFields(new DurationFieldType[] {
+                DurationFieldType.minutes(),
+        });
+        assertSame(PeriodType.minutes(), type);
+        type = PeriodType.forFields(new DurationFieldType[] {
+                DurationFieldType.seconds(),
+        });
+        assertSame(PeriodType.seconds(), type);
+        type = PeriodType.forFields(new DurationFieldType[] {
+                DurationFieldType.millis(),
+        });
+        assertSame(PeriodType.millis(), type);
+    }
+
+    public void testForFields2() throws Exception {
+        DurationFieldType[] types = new DurationFieldType[] {
+            DurationFieldType.years(),
+            DurationFieldType.hours(),
+        };
+        PeriodType type = PeriodType.forFields(types);
+        assertEquals(2, type.size());
+        assertEquals(DurationFieldType.years(), type.getFieldType(0));
+        assertEquals(DurationFieldType.hours(), type.getFieldType(1));
+        assertEquals("StandardNoMonthsNoWeeksNoDaysNoMinutesNoSecondsNoMillis", type.getName());
+        assertEquals("PeriodType[StandardNoMonthsNoWeeksNoDaysNoMinutesNoSecondsNoMillis]", type.toString());
+        assertEquals(true, type.equals(type));
+        assertEquals(true, type == PeriodType.forFields(types));
+        assertEquals(false, type.equals(PeriodType.millis()));
+        assertEquals(true, type.hashCode() == type.hashCode());
+        assertEquals(true, type.hashCode() == PeriodType.forFields(types).hashCode());
+        assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());
+        assertSameAfterSerialization(type);
+    }
+
+    public void testForFields3() throws Exception {
+        DurationFieldType[] types = new DurationFieldType[] {
+            DurationFieldType.months(),
+            DurationFieldType.weeks(),
+        };
+        PeriodType type = PeriodType.forFields(types);
+        assertEquals(2, type.size());
+        assertEquals(DurationFieldType.months(), type.getFieldType(0));
+        assertEquals(DurationFieldType.weeks(), type.getFieldType(1));
+        assertEquals("StandardNoYearsNoDaysNoHoursNoMinutesNoSecondsNoMillis", type.getName());
+        assertEquals("PeriodType[StandardNoYearsNoDaysNoHoursNoMinutesNoSecondsNoMillis]", type.toString());
+        assertEquals(true, type.equals(type));
+        assertEquals(true, type == PeriodType.forFields(types));
+        assertEquals(false, type.equals(PeriodType.millis()));
+        assertEquals(true, type.hashCode() == type.hashCode());
+        assertEquals(true, type.hashCode() == PeriodType.forFields(types).hashCode());
+        assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());
+        assertSameAfterSerialization(type);
+    }
+
+    public void testForFields4() throws Exception {
+        DurationFieldType[] types = new DurationFieldType[] {
+            DurationFieldType.weeks(),
+            DurationFieldType.months(),
+        };
+        DurationFieldType[] types2 = new DurationFieldType[] {
+            DurationFieldType.months(),
+            DurationFieldType.weeks(),
+        };
+        PeriodType type = PeriodType.forFields(types);
+        PeriodType type2 = PeriodType.forFields(types2);
+        assertEquals(true, type == type2);
+    }
+
+    public void testForFields5() throws Exception {
+        DurationFieldType[] types = new DurationFieldType[] {
+            DurationFieldType.centuries(),
+            DurationFieldType.months(),
+        };
+        try {
+            PeriodType.forFields(types);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expected
+        }
+        try {
+            PeriodType.forFields(types);  // repeated for test coverage of cache
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expected
+        }
+    }
+
+    public void testForFields6() throws Exception {
+        DurationFieldType[] types = null;
+        try {
+            PeriodType.forFields(types);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expected
+        }
+        
+        types = new DurationFieldType[0];
+        try {
+            PeriodType.forFields(types);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expected
+        }
+        
+        types = new DurationFieldType[] {
+            null,
+            DurationFieldType.months(),
+        };
+        try {
+            PeriodType.forFields(types);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expected
+        }
+        
+        types = new DurationFieldType[] {
+            DurationFieldType.months(),
+            null,
+        };
+        try {
+            PeriodType.forFields(types);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expected
+        }
+    }
+
     //-----------------------------------------------------------------------
     public void testMaskYears() throws Exception {
         PeriodType type = PeriodType.standard().withYearsRemoved();

From cb16c512c40aa8cf81f72ebff45786a7d2e493ec Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 5 Jul 2005 22:48:22 +0000
Subject: [PATCH 072/124] Add Period.fieldDifference factory method to
 calculate periods in a different way

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@804 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/Period.java   |  52 +++++-
 .../joda/time/TestPeriod_Constructors.java    | 170 ++++++++++++++++++
 2 files changed, 221 insertions(+), 1 deletion(-)

diff --git a/JodaTime/src/java/org/joda/time/Period.java b/JodaTime/src/java/org/joda/time/Period.java
index 5ea1cea5a..8ddf7d55d 100644
--- a/JodaTime/src/java/org/joda/time/Period.java
+++ b/JodaTime/src/java/org/joda/time/Period.java
@@ -137,6 +137,56 @@ public static Period millis(int millis) {
         return new Period(new int[] {0, 0, 0, 0, 0, 0, 0, millis}, PeriodType.standard());
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Creates a period from two partially specified times, calculating
+     * by field difference.
+     * <p>
+     * The two partials must contain the same fields, thus you can
+     * specify two YearMonthDay objects, or two TimeOfDay objects,
+     * but not one of each. Also, the partial may not contain overlapping
+     * fields, such as dayOfWeek and dayOfMonth.
+     * <p>
+     * Calculation by field difference works by extracting the difference
+     * one field at a time and not wrapping into other fields.
+     * Thus 2005-06-09/2007-04-12 will yield P1Y-2M3D.
+     * <p>
+     * For example, you have an event that always runs from the 27th of
+     * each month to the 2nd of the next month. If you calculate this
+     * period using a standard constructor, then you will get between
+     * P3D and P6D depending on the month. If you use this method, then
+     * you will get P1M-25D. This field-difference based period can
+     * be successfully applied to each month of the year to obtain the
+     * correct end date for a given start date.
+     *
+     * @param start  the start of the period, must not be null
+     * @param end  the end of the period, must not be null
+     * @param type  which set of fields this period supports, null means standard
+     * @throws IllegalArgumentException if the partials are null or invalid
+     * @since 1.1
+     */
+    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {
+        if (start == null || end == null) {
+            throw new IllegalArgumentException("ReadablePartial objects must not be null");
+        }
+        if (start.size() != end.size()) {
+            throw new IllegalArgumentException("ReadablePartial objects must have the same set of fields");
+        }
+        DurationFieldType[] types = new DurationFieldType[start.size()];
+        int[] values = new int[start.size()];
+        for (int i = 0, isize = start.size(); i < isize; i++) {
+            if (start.getFieldType(i) != end.getFieldType(i)) {
+                throw new IllegalArgumentException("ReadablePartial objects must have the same set of fields");
+            }
+            types[i] = start.getFieldType(i).getDurationType();
+            if (i > 0 && types[i - 1] == types[i]) {
+                throw new IllegalArgumentException("ReadablePartial objects must not have overlapping fields");
+            }
+            values[i] = end.getValue(i) - start.getValue(i);
+        }
+        return new Period(values, PeriodType.forFields(types));
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Creates a new empty period with the standard set of fields.
@@ -392,7 +442,7 @@ public Period(ReadablePartial start, ReadablePartial end) {
     }
 
     /**
-     * Creates a period from the given duration and end point.
+     * Creates a period from two partially specified times.
      * The two partials must contain the same fields, thus you can
      * specify two YearMonthDay objects, or two TimeOfDay objects,
      * but not one of each.
diff --git a/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java b/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java
index d8662367e..f04d29cb3 100644
--- a/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java
+++ b/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java
@@ -1105,4 +1105,174 @@ public void testConstructor_Object_PeriodType4() throws Throwable {
         assertEquals(4, test.getMillis());
     }
 
+    //-----------------------------------------------------------------------
+    public void testFactoryYears() throws Throwable {
+        Period test = Period.years(6);
+        assertEquals(PeriodType.standard(), test.getPeriodType());
+        assertEquals(6, test.getYears());
+        assertEquals(0, test.getMonths());
+        assertEquals(0, test.getWeeks());
+        assertEquals(0, test.getDays());
+        assertEquals(0, test.getHours());
+        assertEquals(0, test.getMinutes());
+        assertEquals(0, test.getSeconds());
+        assertEquals(0, test.getMillis());
+    }
+
+    public void testFactoryMonths() throws Throwable {
+        Period test = Period.months(6);
+        assertEquals(PeriodType.standard(), test.getPeriodType());
+        assertEquals(0, test.getYears());
+        assertEquals(6, test.getMonths());
+        assertEquals(0, test.getWeeks());
+        assertEquals(0, test.getDays());
+        assertEquals(0, test.getHours());
+        assertEquals(0, test.getMinutes());
+        assertEquals(0, test.getSeconds());
+        assertEquals(0, test.getMillis());
+    }
+
+    public void testFactoryWeeks() throws Throwable {
+        Period test = Period.weeks(6);
+        assertEquals(PeriodType.standard(), test.getPeriodType());
+        assertEquals(0, test.getYears());
+        assertEquals(0, test.getMonths());
+        assertEquals(6, test.getWeeks());
+        assertEquals(0, test.getDays());
+        assertEquals(0, test.getHours());
+        assertEquals(0, test.getMinutes());
+        assertEquals(0, test.getSeconds());
+        assertEquals(0, test.getMillis());
+    }
+
+    public void testFactoryDays() throws Throwable {
+        Period test = Period.days(6);
+        assertEquals(PeriodType.standard(), test.getPeriodType());
+        assertEquals(0, test.getYears());
+        assertEquals(0, test.getMonths());
+        assertEquals(0, test.getWeeks());
+        assertEquals(6, test.getDays());
+        assertEquals(0, test.getHours());
+        assertEquals(0, test.getMinutes());
+        assertEquals(0, test.getSeconds());
+        assertEquals(0, test.getMillis());
+    }
+
+    public void testFactoryHours() throws Throwable {
+        Period test = Period.hours(6);
+        assertEquals(PeriodType.standard(), test.getPeriodType());
+        assertEquals(0, test.getYears());
+        assertEquals(0, test.getMonths());
+        assertEquals(0, test.getWeeks());
+        assertEquals(0, test.getDays());
+        assertEquals(6, test.getHours());
+        assertEquals(0, test.getMinutes());
+        assertEquals(0, test.getSeconds());
+        assertEquals(0, test.getMillis());
+    }
+
+    public void testFactoryMinutes() throws Throwable {
+        Period test = Period.minutes(6);
+        assertEquals(PeriodType.standard(), test.getPeriodType());
+        assertEquals(0, test.getYears());
+        assertEquals(0, test.getMonths());
+        assertEquals(0, test.getWeeks());
+        assertEquals(0, test.getDays());
+        assertEquals(0, test.getHours());
+        assertEquals(6, test.getMinutes());
+        assertEquals(0, test.getSeconds());
+        assertEquals(0, test.getMillis());
+    }
+
+    public void testFactorySeconds() throws Throwable {
+        Period test = Period.seconds(6);
+        assertEquals(PeriodType.standard(), test.getPeriodType());
+        assertEquals(0, test.getYears());
+        assertEquals(0, test.getMonths());
+        assertEquals(0, test.getWeeks());
+        assertEquals(0, test.getDays());
+        assertEquals(0, test.getHours());
+        assertEquals(0, test.getMinutes());
+        assertEquals(6, test.getSeconds());
+        assertEquals(0, test.getMillis());
+    }
+
+    public void testFactoryMillis() throws Throwable {
+        Period test = Period.millis(6);
+        assertEquals(PeriodType.standard(), test.getPeriodType());
+        assertEquals(0, test.getYears());
+        assertEquals(0, test.getMonths());
+        assertEquals(0, test.getWeeks());
+        assertEquals(0, test.getDays());
+        assertEquals(0, test.getHours());
+        assertEquals(0, test.getMinutes());
+        assertEquals(0, test.getSeconds());
+        assertEquals(6, test.getMillis());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testFactoryFieldDifference1() throws Throwable {
+        YearMonthDay start = new YearMonthDay(2005, 4, 9);
+        YearMonthDay end = new YearMonthDay(2004, 6, 7);
+        Period test = Period.fieldDifference(start, end);
+        assertEquals(PeriodType.yearMonthDay(), test.getPeriodType());
+        assertEquals(-1, test.getYears());
+        assertEquals(2, test.getMonths());
+        assertEquals(0, test.getWeeks());
+        assertEquals(-2, test.getDays());
+        assertEquals(0, test.getHours());
+        assertEquals(0, test.getMinutes());
+        assertEquals(0, test.getSeconds());
+        assertEquals(0, test.getMillis());
+    }
+
+    public void testFactoryFieldDifference2() throws Throwable {
+        YearMonthDay ymd = new YearMonthDay(2005, 4, 9);
+        try {
+            Period.fieldDifference(ymd, (ReadablePartial) null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            Period.fieldDifference((ReadablePartial) null, ymd);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testFactoryFieldDifference3() throws Throwable {
+        YearMonthDay start = new YearMonthDay(2005, 4, 9);
+        TimeOfDay endTime = new TimeOfDay(12, 30, 40, 0);
+        try {
+            Period.fieldDifference(start, endTime);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testFactoryFieldDifference4() throws Throwable {
+        YearMonthDay start = new YearMonthDay(2005, 4, 9);
+        DateTimeFieldType[] types = new DateTimeFieldType[] {
+            DateTimeFieldType.year(),
+            DateTimeFieldType.monthOfYear(),
+            DateTimeFieldType.dayOfWeek(),
+        };
+        Partial end = new Partial(types, new int[] {1, 2, 3});
+        try {
+            Period.fieldDifference(start, end);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testFactoryFieldDifference5() throws Throwable {
+        YearMonthDay start = new YearMonthDay(2005, 4, 9);
+        DateTimeFieldType[] types = new DateTimeFieldType[] {
+            DateTimeFieldType.year(),
+            DateTimeFieldType.dayOfMonth(),
+            DateTimeFieldType.dayOfWeek(),
+        };
+        Partial end = new Partial(types, new int[] {1, 2, 3});
+        try {
+            Period.fieldDifference(start, end);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
 }

From 80f4c35bab8b463215f96f7b9d4565d5191cc2b8 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 5 Jul 2005 22:49:15 +0000
Subject: [PATCH 073/124] Add since tag

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@805 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/PeriodType.java | 1 +
 1 file changed, 1 insertion(+)

diff --git a/JodaTime/src/java/org/joda/time/PeriodType.java b/JodaTime/src/java/org/joda/time/PeriodType.java
index d2c6c593a..32123f61d 100644
--- a/JodaTime/src/java/org/joda/time/PeriodType.java
+++ b/JodaTime/src/java/org/joda/time/PeriodType.java
@@ -496,6 +496,7 @@ public static PeriodType millis() {
      *
      * @param types  the types to include in the array.
      * @return the period type
+     * @since 1.1
      */
     public static synchronized PeriodType forFields(DurationFieldType[] types) {
         if (types == null || types.length == 0) {

From 9f9a57b773f39eb2a03ffe585d2966e6b14c40ae Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 6 Jul 2005 22:07:16 +0000
Subject: [PATCH 074/124] Add Period.fieldDifference factory method to
 calculate periods in a different way

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@806 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 8aef00b15..80767f09e 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -106,6 +106,14 @@ Enhancements since 1.0
   Added constructors to create a Period from two ReadablePartials, such as
   YearMonthDay or TimeOfDay
 
+- Period
+  Added factory to create a Period from two ReadablePartials using an
+  alternative, field-based, calculation
+
+- PeriodType
+  Added factory method forFields() to allow a PeriodType to be obtained
+  from any set of DurationFieldType objects
+
 - PeriodType
   Added three new period types - YearMonthDay, YearWeekDay and YearDay
   These complement the existing ones but exclude the time fields.

From de40083588f7570cc635b3eb647d4600297221e0 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 13 Jul 2005 23:12:38 +0000
Subject: [PATCH 075/124] Emphasise most important fixed bug

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@807 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt | 7 ++++---
 1 file changed, 4 insertions(+), 3 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 80767f09e..a77d4d233 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -32,14 +32,15 @@ None
 
 Bug fixes since 1.0
 -------------------
+- Date and Time (ZoneInfoCompiler)
+  Greek summer time was incorrect due to a comment parsing bug.
+  This disabled DST (summer time) for Europe/Athens after 1980.
+
 - DateTimeFormat
   Parsing of two digit year by DateTimeFormat supports parsing of more or less
   than two digits, for compatibility with java.text.SimpleDateFormat. If not
   two digits or if sign character is present, then year is parsed as absolute.
 
-- ZoneInfoCompiler
-  Comment parsing bug disabled DST for Europe/Athens after 1980.
-
 - GJChronology
   Range duration field of dayOfMonth was not consistent with monthOfYear. This
   bug manifested itself when adding/subtracting periods to partials.

From b83fb175ebcab3a7176c49fb7c97d4863a4049a2 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 13 Jul 2005 23:13:14 +0000
Subject: [PATCH 076/124] Add isMatch() method to Partial

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@808 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/ToDo.txt                             |   8 +-
 JodaTime/src/java/org/joda/time/Partial.java  |  49 +++++--
 JodaTime/src/test/org/joda/time/TestAll.java  |   1 +
 .../test/org/joda/time/TestPartial_Match.java | 133 ++++++++++++++++++
 4 files changed, 179 insertions(+), 12 deletions(-)
 create mode 100644 JodaTime/src/test/org/joda/time/TestPartial_Match.java

diff --git a/JodaTime/ToDo.txt b/JodaTime/ToDo.txt
index 8c734cce9..97260449c 100644
--- a/JodaTime/ToDo.txt
+++ b/JodaTime/ToDo.txt
@@ -24,10 +24,10 @@ Ideas longer term
 - DateTimeField.setNext(instant, value, howManyNext)
     Allows questions like what is the date next Tuesday
 
-- Partial
-    A full implementation of partial, where any field may be present,
-    and any field may be substituted for. Thus you might define DayOfWeek=Friday
-    and DayOfMonth=13, and then resolve to find the next date.
+- Partial matching
+    Add code to allow full matching of partials. Thus you might define
+    DayOfWeek=Friday and DayOfMonth=13, and then resolve to find the
+    next matching Friday the 13th.
 
 - DateHourMinute/DateHourMinuteSecond
     More instant variations
diff --git a/JodaTime/src/java/org/joda/time/Partial.java b/JodaTime/src/java/org/joda/time/Partial.java
index e166a3f64..391cdb2e6 100644
--- a/JodaTime/src/java/org/joda/time/Partial.java
+++ b/JodaTime/src/java/org/joda/time/Partial.java
@@ -29,8 +29,16 @@
 import org.joda.time.format.ISODateTimeFormat;
 
 /**
- * Partial is an immutable partial datetime where the fields supported
- * are defined by the constructor.
+ * Partial is an immutable partial datetime supporting any set of datetime fields.
+ * <p>
+ * A Partial instance can be used to hold any combination of fields.
+ * The instance does not contain a time zone, so any datetime is local.
+ * <p>
+ * A Partial can be matched against an instant using {@link #isMatch(ReadableInstant)}.
+ * This method compares each field on this partial with those of the instant
+ * and determines if the partial matches the instant.
+ * Given this definition, an empty Partial instance represents any datetime
+ * and always matches.
  * <p>
  * Calculations on Partial are performed using a {@link Chronology}.
  * This chronology is set to be in the UTC time zone for all calculations.
@@ -681,9 +689,10 @@ public int compareTo(Object partial) {
      *
      * @param date  an date to check against, null means now
      * @return true if this date is after the date passed in
-     * @throws IllegalArgumentException if the specified YearMonthDay is null
+     * @throws IllegalArgumentException if the specified partial is null
+     * @throws ClassCastException if the partial has field types that don't match
      */
-    public boolean isAfter(Partial date) {
+    public boolean isAfter(ReadablePartial date) {
         if (date == null) {
             throw new IllegalArgumentException("Partial cannot be null");
         }
@@ -698,9 +707,10 @@ public boolean isAfter(Partial date) {
      *
      * @param date  an date to check against, null means now
      * @return true if this date is before the date passed in
-     * @throws IllegalArgumentException if the specified YearMonthDay is null
+     * @throws IllegalArgumentException if the specified partial is null
+     * @throws ClassCastException if the partial has field types that don't match
      */
-    public boolean isBefore(Partial date) {
+    public boolean isBefore(ReadablePartial date) {
         if (date == null) {
             throw new IllegalArgumentException("Partial cannot be null");
         }
@@ -715,15 +725,38 @@ public boolean isBefore(Partial date) {
      *
      * @param date  an date to check against, null means now
      * @return true if this date is the same as the date passed in
-     * @throws IllegalArgumentException if the specified YearMonthDay is null
+     * @throws IllegalArgumentException if the specified partial is null
+     * @throws ClassCastException if the partial has field types that don't match
      */
-    public boolean isEqual(Partial date) {
+    public boolean isEqual(ReadablePartial date) {
         if (date == null) {
             throw new IllegalArgumentException("Partial cannot be null");
         }
         return compareTo(date) == 0;
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Does this partial match the specified instant.
+     * <p>
+     * A match occurs when all the fields of this partial are the same as the
+     * corresponding fields on the specified instant.
+     *
+     * @param instant  an instant to check against, null means now in default zone
+     * @return true if this partial matches the specified instant
+     */
+    public boolean isMatch(ReadableInstant instant) {
+        long millis = DateTimeUtils.getInstantMillis(instant);
+        Chronology chrono = DateTimeUtils.getInstantChronology(instant);
+        for (int i = 0; i < iTypes.length; i++) {
+            int value = iTypes[i].getField(chrono).get(millis);
+            if (value != iValues[i]) {
+                return false;
+            }
+        }
+        return true;
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Gets a formatter suitable for the fields in this partial.
diff --git a/JodaTime/src/test/org/joda/time/TestAll.java b/JodaTime/src/test/org/joda/time/TestAll.java
index 3fa4c3e53..00710632b 100644
--- a/JodaTime/src/test/org/joda/time/TestAll.java
+++ b/JodaTime/src/test/org/joda/time/TestAll.java
@@ -83,6 +83,7 @@ public static Test suite() {
         suite.addTest(TestPartial_Basics.suite());
         suite.addTest(TestPartial_Constructors.suite());
         suite.addTest(TestPartial_Properties.suite());
+        suite.addTest(TestPartial_Match.suite());
         
         suite.addTest(TestAbstractPartial.suite());
         suite.addTest(TestBasePartial.suite());
diff --git a/JodaTime/src/test/org/joda/time/TestPartial_Match.java b/JodaTime/src/test/org/joda/time/TestPartial_Match.java
new file mode 100644
index 000000000..f48f8e420
--- /dev/null
+++ b/JodaTime/src/test/org/joda/time/TestPartial_Match.java
@@ -0,0 +1,133 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time;
+
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+/**
+ * This class is a Junit unit test for Partial.
+ *
+ * @author Stephen Colebourne
+ */
+public class TestPartial_Match extends TestCase {
+
+    private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
+    private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
+    private static final DateTimeZone TOKYO = DateTimeZone.forID("Asia/Tokyo");
+    private static final int OFFSET = 1;
+    private static final Chronology COPTIC_PARIS = Chronology.getCoptic(PARIS);
+    private static final Chronology COPTIC_LONDON = Chronology.getCoptic(LONDON);
+    private static final Chronology COPTIC_TOKYO = Chronology.getCoptic(TOKYO);
+    private static final Chronology COPTIC_UTC = Chronology.getCopticUTC();
+    private static final Chronology ISO_PARIS = Chronology.getISO(PARIS);
+    private static final Chronology ISO_LONDON = Chronology.getISO(LONDON);
+    private static final Chronology ISO_TOKYO = Chronology.getISO(TOKYO);
+    private static final Chronology ISO_UTC = Chronology.getISOUTC();
+    private static final Chronology BUDDHIST_PARIS = Chronology.getBuddhist(PARIS);
+    private static final Chronology BUDDHIST_LONDON = Chronology.getBuddhist(LONDON);
+    private static final Chronology BUDDHIST_TOKYO = Chronology.getBuddhist(TOKYO);
+    private static final Chronology BUDDHIST_UTC = Chronology.getBuddhistUTC();
+    
+    private long TEST_TIME_NOW =
+            10L * DateTimeConstants.MILLIS_PER_HOUR
+            + 20L * DateTimeConstants.MILLIS_PER_MINUTE
+            + 30L * DateTimeConstants.MILLIS_PER_SECOND
+            + 40L;
+            
+    private long TEST_TIME1 =
+        1L * DateTimeConstants.MILLIS_PER_HOUR
+        + 2L * DateTimeConstants.MILLIS_PER_MINUTE
+        + 3L * DateTimeConstants.MILLIS_PER_SECOND
+        + 4L;
+        
+    private long TEST_TIME2 =
+        1L * DateTimeConstants.MILLIS_PER_DAY
+        + 5L * DateTimeConstants.MILLIS_PER_HOUR
+        + 6L * DateTimeConstants.MILLIS_PER_MINUTE
+        + 7L * DateTimeConstants.MILLIS_PER_SECOND
+        + 8L;
+        
+    private DateTimeZone zone = null;
+
+    public static void main(String[] args) {
+        junit.textui.TestRunner.run(suite());
+    }
+
+    public static TestSuite suite() {
+        return new TestSuite(TestPartial_Match.class);
+    }
+
+    public TestPartial_Match(String name) {
+        super(name);
+    }
+
+    protected void setUp() throws Exception {
+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
+        zone = DateTimeZone.getDefault();
+        DateTimeZone.setDefault(LONDON);
+    }
+
+    protected void tearDown() throws Exception {
+        DateTimeUtils.setCurrentMillisSystem();
+        DateTimeZone.setDefault(zone);
+        zone = null;
+    }
+
+    //-----------------------------------------------------------------------
+    public void testIsMatch() {
+        // Year=2005, Month=7 (July), DayOfWeek=2 (Tuesday)
+        Partial test = createYMDwPartial(ISO_UTC, 2005, 7, 2);
+        DateTime instant = new DateTime(2005, 7, 5, 0, 0, 0, 0);
+        assertEquals(true, test.isMatch(instant));
+        
+        instant = new DateTime(2005, 7, 4, 0, 0, 0, 0);
+        assertEquals(false, test.isMatch(instant));
+        
+        instant = new DateTime(2005, 7, 6, 0, 0, 0, 0);
+        assertEquals(false, test.isMatch(instant));
+        
+        instant = new DateTime(2005, 7, 12, 0, 0, 0, 0);
+        assertEquals(true, test.isMatch(instant));
+        
+        instant = new DateTime(2005, 7, 19, 0, 0, 0, 0);
+        assertEquals(true, test.isMatch(instant));
+        
+        instant = new DateTime(2005, 7, 26, 0, 0, 0, 0);
+        assertEquals(true, test.isMatch(instant));
+        
+        instant = new DateTime(2005, 8, 2, 0, 0, 0, 0);
+        assertEquals(false, test.isMatch(instant));
+        
+        instant = new DateTime(2006, 7, 5, 0, 0, 0, 0);
+        assertEquals(false, test.isMatch(instant));
+        
+        instant = new DateTime(2005, 6, 5, 0, 0, 0, 0);
+        assertEquals(false, test.isMatch(instant));
+    }
+
+    //-----------------------------------------------------------------------
+    private Partial createYMDwPartial(Chronology chrono, int year, int month, int dow) {
+        return new Partial(
+            new DateTimeFieldType[] {
+                    DateTimeFieldType.year(),
+                    DateTimeFieldType.monthOfYear(),
+                    DateTimeFieldType.dayOfWeek()},
+            new int[] {year, month, dow},
+            chrono);
+    }
+
+}

From 392e9b25bbd48071e1c99de24b8e8c916c4e9665 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 13 Jul 2005 23:38:33 +0000
Subject: [PATCH 077/124] Increase test coverage

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@809 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/test/org/joda/time/TestAll.java  |  1 +
 .../org/joda/time/TestDateTimeFieldType.java  | 32 +++++++++-
 .../test/org/joda/time/TestDurationField.java | 62 +++++++++++++++++++
 .../org/joda/time/TestDurationFieldType.java  | 29 ++++++++-
 4 files changed, 118 insertions(+), 6 deletions(-)
 create mode 100644 JodaTime/src/test/org/joda/time/TestDurationField.java

diff --git a/JodaTime/src/test/org/joda/time/TestAll.java b/JodaTime/src/test/org/joda/time/TestAll.java
index 00710632b..c87269298 100644
--- a/JodaTime/src/test/org/joda/time/TestAll.java
+++ b/JodaTime/src/test/org/joda/time/TestAll.java
@@ -94,6 +94,7 @@ public static Test suite() {
         suite.addTest(TestDateTimeZone.suite());
         suite.addTest(TestPeriodType.suite());
 //        suite.addTest(TestParseISO.suite());
+        suite.addTest(TestDurationField.suite());
         
         suite.addTest(TestSerialization.suite());
         suite.addTest(TestIllegalFieldValueException.suite());
diff --git a/JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java b/JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java
index f692cf3c7..ab469f97b 100644
--- a/JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java
+++ b/JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java
@@ -19,6 +19,7 @@
 import java.io.ByteArrayOutputStream;
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
+import java.lang.reflect.Constructor;
 
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
@@ -279,8 +280,34 @@ public void test_millisOfSecond() throws Exception {
         assertSerialization(DateTimeFieldType.millisOfSecond());
     }
 
+    public void test_other() throws Exception {
+        assertEquals(1, DateTimeFieldType.class.getDeclaredClasses().length);
+        Class cls = DateTimeFieldType.class.getDeclaredClasses()[0];
+        assertEquals(1, cls.getDeclaredConstructors().length);
+        Constructor con = cls.getDeclaredConstructors()[0];
+        Object[] params = new Object[] {
+            "other", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};
+        DateTimeFieldType type = (DateTimeFieldType) con.newInstance(params);
+        
+        assertEquals("other", type.getName());
+        assertSame(DurationFieldType.hours(), type.getDurationType());
+        assertSame(DurationFieldType.months(), type.getRangeDurationType());
+        try {
+            type.getField(Chronology.getCopticUTC());
+            fail();
+        } catch (InternalError ex) {}
+        DateTimeFieldType result = doSerialization(type);
+        assertEquals(type.getName(), result.getName());
+        assertNotSame(type, result);
+    }
+
     //-----------------------------------------------------------------------
-    public void assertSerialization(DateTimeFieldType type) throws Exception {
+    private void assertSerialization(DateTimeFieldType type) throws Exception {
+        DateTimeFieldType result = doSerialization(type);
+        assertSame(type, result);
+    }
+
+    private DateTimeFieldType doSerialization(DateTimeFieldType type) throws Exception {
         ByteArrayOutputStream baos = new ByteArrayOutputStream();
         ObjectOutputStream oos = new ObjectOutputStream(baos);
         oos.writeObject(type);
@@ -291,8 +318,7 @@ public void assertSerialization(DateTimeFieldType type) throws Exception {
         ObjectInputStream ois = new ObjectInputStream(bais);
         DateTimeFieldType result = (DateTimeFieldType) ois.readObject();
         ois.close();
-        
-        assertSame(type, result);
+        return result;
     }
 
 }
diff --git a/JodaTime/src/test/org/joda/time/TestDurationField.java b/JodaTime/src/test/org/joda/time/TestDurationField.java
new file mode 100644
index 000000000..d5c3ed2a7
--- /dev/null
+++ b/JodaTime/src/test/org/joda/time/TestDurationField.java
@@ -0,0 +1,62 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time;
+
+import org.joda.time.chrono.ISOChronology;
+
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+/**
+ * This class is a Junit unit test for DurationField.
+ *
+ * @author Stephen Colebourne
+ */
+public class TestDurationField extends TestCase {
+
+    public static void main(String[] args) {
+        junit.textui.TestRunner.run(suite());
+    }
+
+    public static TestSuite suite() {
+        return new TestSuite(TestDurationField.class);
+    }
+
+    public TestDurationField(String name) {
+        super(name);
+    }
+
+    protected void setUp() throws Exception {
+    }
+
+    protected void tearDown() throws Exception {
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_subtract() throws Exception {
+        DurationField fld = ISOChronology.getInstanceUTC().millis();
+        assertEquals(900, fld.subtract(1000L, 100));
+        assertEquals(900L, fld.subtract(1000L, 100L));
+        assertEquals((1000L - Integer.MAX_VALUE), fld.subtract(1000L, Integer.MAX_VALUE));
+        assertEquals((1000L - Integer.MIN_VALUE), fld.subtract(1000L, Integer.MIN_VALUE));
+        assertEquals((1000L - Long.MAX_VALUE), fld.subtract(1000L, Long.MAX_VALUE));
+        try {
+            fld.subtract(-1000L, Long.MIN_VALUE);
+            fail();
+        } catch (ArithmeticException ex) {}
+    }
+
+}
diff --git a/JodaTime/src/test/org/joda/time/TestDurationFieldType.java b/JodaTime/src/test/org/joda/time/TestDurationFieldType.java
index 204f5b4ac..7ca1271ef 100644
--- a/JodaTime/src/test/org/joda/time/TestDurationFieldType.java
+++ b/JodaTime/src/test/org/joda/time/TestDurationFieldType.java
@@ -19,6 +19,7 @@
 import java.io.ByteArrayOutputStream;
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
+import java.lang.reflect.Constructor;
 
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
@@ -145,8 +146,31 @@ public void test_millis() throws Exception {
         assertSerialization(DurationFieldType.millis());
     }
 
+    public void test_other() throws Exception {
+        assertEquals(1, DurationFieldType.class.getDeclaredClasses().length);
+        Class cls = DurationFieldType.class.getDeclaredClasses()[0];
+        assertEquals(1, cls.getDeclaredConstructors().length);
+        Constructor con = cls.getDeclaredConstructors()[0];
+        Object[] params = new Object[] {"other", new Byte((byte) 128)};
+        DurationFieldType type = (DurationFieldType) con.newInstance(params);
+        
+        assertEquals("other", type.getName());
+        try {
+            type.getField(Chronology.getCopticUTC());
+            fail();
+        } catch (InternalError ex) {}
+        DurationFieldType result = doSerialization(type);
+        assertEquals(type.getName(), result.getName());
+        assertNotSame(type, result);
+    }
+
     //-----------------------------------------------------------------------
-    public void assertSerialization(DurationFieldType type) throws Exception {
+    private void assertSerialization(DurationFieldType type) throws Exception {
+        DurationFieldType result = doSerialization(type);
+        assertSame(type, result);
+    }
+
+    private DurationFieldType doSerialization(DurationFieldType type) throws Exception {
         ByteArrayOutputStream baos = new ByteArrayOutputStream();
         ObjectOutputStream oos = new ObjectOutputStream(baos);
         oos.writeObject(type);
@@ -157,8 +181,7 @@ public void assertSerialization(DurationFieldType type) throws Exception {
         ObjectInputStream ois = new ObjectInputStream(bais);
         DurationFieldType result = (DurationFieldType) ois.readObject();
         ois.close();
-        
-        assertSame(type, result);
+        return result;
     }
 
 }

From 51dd1cdf3eae64959e9b128266b1ab48da28389f Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 13 Jul 2005 23:45:57 +0000
Subject: [PATCH 078/124] Increase test coverage

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@810 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../test/org/joda/time/TestSerialization.java |  23 ++++++++++++++++++
 .../src/testdata/DateMidnightProperty.dat     | Bin 0 -> 659 bytes
 .../src/testdata/MutableDateTimeProperty.dat  | Bin 0 -> 709 bytes
 3 files changed, 23 insertions(+)
 create mode 100644 JodaTime/src/testdata/DateMidnightProperty.dat
 create mode 100644 JodaTime/src/testdata/MutableDateTimeProperty.dat

diff --git a/JodaTime/src/test/org/joda/time/TestSerialization.java b/JodaTime/src/test/org/joda/time/TestSerialization.java
index f3e072131..4c788a683 100644
--- a/JodaTime/src/test/org/joda/time/TestSerialization.java
+++ b/JodaTime/src/test/org/joda/time/TestSerialization.java
@@ -18,6 +18,7 @@
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.FileInputStream;
+import java.io.FileOutputStream;
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
 import java.io.Serializable;
@@ -151,12 +152,24 @@ public void testSerializedMutableDateTime() throws Exception {
         inlineCompare(test, false);
     }
 
+    public void testSerializedMutableDateTimeProperty() throws Exception {
+        MutableDateTime.Property test = new MutableDateTime().hourOfDay();
+        loadAndCompare(test, "MutableDateTimeProperty.dat", false);
+        inlineCompare(test, false);
+    }
+
     public void testSerializedDateMidnight() throws Exception {
         DateMidnight test = new DateMidnight();
         loadAndCompare(test, "DateMidnight.dat", false);
         inlineCompare(test, false);
     }
 
+    public void testSerializedDateMidnightProperty() throws Exception {
+        DateMidnight.Property test = new DateMidnight().monthOfYear();
+        loadAndCompare(test, "DateMidnightProperty.dat", false);
+        inlineCompare(test, false);
+    }
+
     public void testSerializedYearMonthDay() throws Exception {
         YearMonthDay test = new YearMonthDay();
         loadAndCompare(test, "YearMonthDay.dat", false);
@@ -393,6 +406,16 @@ public void inlineCompare(Serializable test, boolean same) throws Exception {
 //        store(test, "DateTimeProperty.dat");
 //    }
 //
+//    public void testStoreSerializedMutableDateTimeProperty() throws Exception {
+//        MutableDateTime.Property test = new MutableDateTime().hourOfDay();
+//        store(test, "MutableDateTimeProperty.dat");
+//    }
+//
+//    public void testStoreSerializedDateMidnightProperty() throws Exception {
+//        DateMidnight.Property test = new DateMidnight().monthOfYear();
+//        store(test, "DateMidnightProperty.dat");
+//    }
+
 //    private void store(Serializable test, String filename) throws Exception {
 //        FileOutputStream fos = new FileOutputStream("src/testdata/" + filename);
 //        ObjectOutputStream oos = new ObjectOutputStream(fos);
diff --git a/JodaTime/src/testdata/DateMidnightProperty.dat b/JodaTime/src/testdata/DateMidnightProperty.dat
new file mode 100644
index 0000000000000000000000000000000000000000..e897b2bc0de458c427f965ace7a91e4da13fa2e5
GIT binary patch
literal 659
zcmZuuJxjwt7=BHy6-0`T)#6~GTLN`ZDT3AyP@<{UMMdFiuIZKZu3oO1LIo$?++17*
zL2&d(^e>2$2yVJ4f>XQ%LydaFaqvE$@7=yY+~F|JxTV&ZiBv)ASY1E@uM(3It12=@
z&Kj7D7RZy_N#Dgl(V>ql5p0_R(z>K-K2`Innor%7k6@hFp`R>MM<6N$jQ#@+UGgr6
zsc49bZ=lYV9l_DQ*ucm{WgCC11@d9Ck)4U>&fEL30^l}en^aWjXB&X?DQ#~y=R-M+
zMS*4HV6`Bxu!QG*J{r5~l>*8NB*-eUZQ|%KK<2BQQD!r%B_Q>yR(F<n8**o_>+csQ
zGF3KewjW5S%O#^r$dp90eA5}K984CovF|p&LWbG48N~tqTI;!N=Tc7r{wN89i%tK>
zG@VhCQP-8$(^2bCB3R;PtKsV)Y9em_nRwpE$M{+4RDqs?{7ZwIgd+Rz>i!|#&ph<D
pQ<A7doUEZb7BH;W&>_-nL@li(IH8tYk${0ZqoQh5wlLxe_Y0uK>UjVF

literal 0
HcmV?d00001

diff --git a/JodaTime/src/testdata/MutableDateTimeProperty.dat b/JodaTime/src/testdata/MutableDateTimeProperty.dat
new file mode 100644
index 0000000000000000000000000000000000000000..2af6af6cfc580457b035ee7d0d99b8053f212173
GIT binary patch
literal 709
zcmZuuy-UMD6n~B1h>E&Z#6f8XApsp!ii4j}No{GJ6o;$1#w+ozUM`wK6%o<@z`<1z
z1^)>r-5f=nL~zqZ5uEBJ7$wo=!Q;K($NRm@7ih9MBp5f<GBc1W$Ocw3jzC2V&mw`B
zWIvSStb)0yUftd$_IuB-8$i*anamSx83OusiPk){=ApF!=8sc4w30Nn1)@U0Kx8!{
zlyW(Yhpm)64Rxw$3y#)A9wWnZ_D$$31m^lyMxSrq-gguLw<2%q4--YClE-_sw_U|l
zKuJRf$uox<gqj&<U>!PtdS77^b|EIM4TKqs$j0ilEWyF``sZVIRXvrQ3(!I`#IlI3
zLpzyS=ZrFonN<PtNCdyLlv@FS*ZlASNc+jK*qTqFrVH6$z)(Rr#fzKn(&kt$+3<aK
z#AM)YnNjTTpJ}m^+DQD#-{0<njycEsuBJ0;FzUL}0(kLFg!Ka+Kaizr#Un%1K-~B<
zsn<U~29FAd3dE-6^RrwAi>$x-{R6z8d}yr2B~XVZvWPaYfF8Y!wvc8aYH9_+<&R`e
Q0@~J@!?UGXRPA=Z0Ly^=!T<mO

literal 0
HcmV?d00001


From f9177fe2cb23f11b54894b28f0a885fba9256d80 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 18 Jul 2005 23:20:52 +0000
Subject: [PATCH 079/124] Hibernate support moved to independent subproject of
 contrib

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@811 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/README.txt                    |  23 +-
 JodaTimeContrib/RELEASE-NOTES.txt             |  20 --
 JodaTimeContrib/hibernate/LICENSE.txt         | 202 ++++++++++++++++++
 JodaTimeContrib/hibernate/NOTICE.txt          |   5 +
 JodaTimeContrib/hibernate/README.txt          |  22 ++
 JodaTimeContrib/hibernate/RELEASE-NOTES.txt   |  26 +++
 JodaTimeContrib/{ => hibernate}/build.xml     |   6 +-
 .../{ => hibernate}/checkstyle.xml            |   0
 .../{ => hibernate}/project.properties        |   0
 JodaTimeContrib/{ => hibernate}/project.xml   |  61 ++----
 .../hibernate/src/conf/MANIFEST.MF            |   7 +
 .../contrib/hibernate/PersistentDateTime.java |   0
 .../hibernate/PersistentDateTimeTZ.java       |   0
 .../hibernate/PersistentYearMonthDay.java     |   0
 .../joda/time/contrib/hibernate/Event.java    |   0
 .../joda/time/contrib/hibernate/EventTZ.java  |   0
 .../contrib/hibernate/HibernateTestCase.java  |   0
 .../joda/time/contrib/hibernate/Schedule.java |   0
 .../hibernate/TestPersistentDateTime.java     |   0
 .../hibernate/TestPersistentYearMonthDay.java |   0
 .../joda/time/contrib/hibernate/event.hbm.xml |   0
 .../time/contrib/hibernate/eventTZ.hbm.xml    |   0
 .../time/contrib/hibernate/schedule.hbm.xml   |   0
 JodaTimeContrib/maven.xml                     |   5 -
 JodaTimeContrib/src/conf/MANIFEST.MF          |   7 -
 25 files changed, 288 insertions(+), 96 deletions(-)
 delete mode 100644 JodaTimeContrib/RELEASE-NOTES.txt
 create mode 100644 JodaTimeContrib/hibernate/LICENSE.txt
 create mode 100644 JodaTimeContrib/hibernate/NOTICE.txt
 create mode 100644 JodaTimeContrib/hibernate/README.txt
 create mode 100644 JodaTimeContrib/hibernate/RELEASE-NOTES.txt
 rename JodaTimeContrib/{ => hibernate}/build.xml (98%)
 rename JodaTimeContrib/{ => hibernate}/checkstyle.xml (100%)
 rename JodaTimeContrib/{ => hibernate}/project.properties (100%)
 rename JodaTimeContrib/{ => hibernate}/project.xml (74%)
 create mode 100644 JodaTimeContrib/hibernate/src/conf/MANIFEST.MF
 rename JodaTimeContrib/{ => hibernate}/src/java/org/joda/time/contrib/hibernate/PersistentDateTime.java (100%)
 rename JodaTimeContrib/{ => hibernate}/src/java/org/joda/time/contrib/hibernate/PersistentDateTimeTZ.java (100%)
 rename JodaTimeContrib/{ => hibernate}/src/java/org/joda/time/contrib/hibernate/PersistentYearMonthDay.java (100%)
 rename JodaTimeContrib/{ => hibernate}/src/test/org/joda/time/contrib/hibernate/Event.java (100%)
 rename JodaTimeContrib/{ => hibernate}/src/test/org/joda/time/contrib/hibernate/EventTZ.java (100%)
 rename JodaTimeContrib/{ => hibernate}/src/test/org/joda/time/contrib/hibernate/HibernateTestCase.java (100%)
 rename JodaTimeContrib/{ => hibernate}/src/test/org/joda/time/contrib/hibernate/Schedule.java (100%)
 rename JodaTimeContrib/{ => hibernate}/src/test/org/joda/time/contrib/hibernate/TestPersistentDateTime.java (100%)
 rename JodaTimeContrib/{ => hibernate}/src/test/org/joda/time/contrib/hibernate/TestPersistentYearMonthDay.java (100%)
 rename JodaTimeContrib/{ => hibernate}/src/test/org/joda/time/contrib/hibernate/event.hbm.xml (100%)
 rename JodaTimeContrib/{ => hibernate}/src/test/org/joda/time/contrib/hibernate/eventTZ.hbm.xml (100%)
 rename JodaTimeContrib/{ => hibernate}/src/test/org/joda/time/contrib/hibernate/schedule.hbm.xml (100%)
 delete mode 100644 JodaTimeContrib/maven.xml
 delete mode 100644 JodaTimeContrib/src/conf/MANIFEST.MF

diff --git a/JodaTimeContrib/README.txt b/JodaTimeContrib/README.txt
index e91d92485..6456c9dee 100644
--- a/JodaTimeContrib/README.txt
+++ b/JodaTimeContrib/README.txt
@@ -1,17 +1,14 @@
 
-Additional setup for test cases
--------------------------------
+Joda-Time Contributions area
+============================
+Joda-Time is a date and time library that vastly improves on the JDK.
 
-Joda uses maven for the build process. Maven tries to download all dependencies from ibiblio.
-Some of them are not hosted due to their licensing.
+The Joda-Time contributions area hosts additional code that may be of
+use when working with the main Joda-Time library.
+Each of these contributions is licensed using the Apache License v2.0.
 
-Thus you have to download them and put them in your local maven repository.
-e.g. on Linux YOUR_HOME/.maven/respository
+Please note that this code is not supported in the same way as the main
+Joda-Time code. As such it is possible that methods and classes may come
+and go over time without warning - you have been warned!
 
-
-Java Transaction API:
-
-http://java.sun.com/products/jta
-
-# mkdir ~/.maven/repository/jta/jars
-# cp jta-1_0_1B-classes.zip ~/.maven/repository/jta/jars
\ No newline at end of file
+See the README in each subproject for more details.
diff --git a/JodaTimeContrib/RELEASE-NOTES.txt b/JodaTimeContrib/RELEASE-NOTES.txt
deleted file mode 100644
index cae89f541..000000000
--- a/JodaTimeContrib/RELEASE-NOTES.txt
+++ /dev/null
@@ -1,20 +0,0 @@
-Joda-Time Contrib version 1.0
------------------------------
-
-User contributions that are not part of the main joda-time jar file.
-
-Each of these contributions is licensed using the Apache License v2.0.
-However, some of these files link to LGPL licensed software.
-It is your resposibility to use the joda-time-contrib jar correctly
-according to the terms of the LGPL license (read section 6).
-
-Please note that this code is not supported in the same way as the main
-Joda-Time code. As such it is possible that methods and classes may come
-and go over time without warning - you have been warned!
-
-
-Feedback
---------
-All feedback is welcomed at joda-interest@lists.sourceforge.net.
-
-The Joda team
diff --git a/JodaTimeContrib/hibernate/LICENSE.txt b/JodaTimeContrib/hibernate/LICENSE.txt
new file mode 100644
index 000000000..d64569567
--- /dev/null
+++ b/JodaTimeContrib/hibernate/LICENSE.txt
@@ -0,0 +1,202 @@
+
+                                 Apache License
+                           Version 2.0, January 2004
+                        http://www.apache.org/licenses/
+
+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+   1. Definitions.
+
+      "License" shall mean the terms and conditions for use, reproduction,
+      and distribution as defined by Sections 1 through 9 of this document.
+
+      "Licensor" shall mean the copyright owner or entity authorized by
+      the copyright owner that is granting the License.
+
+      "Legal Entity" shall mean the union of the acting entity and all
+      other entities that control, are controlled by, or are under common
+      control with that entity. For the purposes of this definition,
+      "control" means (i) the power, direct or indirect, to cause the
+      direction or management of such entity, whether by contract or
+      otherwise, or (ii) ownership of fifty percent (50%) or more of the
+      outstanding shares, or (iii) beneficial ownership of such entity.
+
+      "You" (or "Your") shall mean an individual or Legal Entity
+      exercising permissions granted by this License.
+
+      "Source" form shall mean the preferred form for making modifications,
+      including but not limited to software source code, documentation
+      source, and configuration files.
+
+      "Object" form shall mean any form resulting from mechanical
+      transformation or translation of a Source form, including but
+      not limited to compiled object code, generated documentation,
+      and conversions to other media types.
+
+      "Work" shall mean the work of authorship, whether in Source or
+      Object form, made available under the License, as indicated by a
+      copyright notice that is included in or attached to the work
+      (an example is provided in the Appendix below).
+
+      "Derivative Works" shall mean any work, whether in Source or Object
+      form, that is based on (or derived from) the Work and for which the
+      editorial revisions, annotations, elaborations, or other modifications
+      represent, as a whole, an original work of authorship. For the purposes
+      of this License, Derivative Works shall not include works that remain
+      separable from, or merely link (or bind by name) to the interfaces of,
+      the Work and Derivative Works thereof.
+
+      "Contribution" shall mean any work of authorship, including
+      the original version of the Work and any modifications or additions
+      to that Work or Derivative Works thereof, that is intentionally
+      submitted to Licensor for inclusion in the Work by the copyright owner
+      or by an individual or Legal Entity authorized to submit on behalf of
+      the copyright owner. For the purposes of this definition, "submitted"
+      means any form of electronic, verbal, or written communication sent
+      to the Licensor or its representatives, including but not limited to
+      communication on electronic mailing lists, source code control systems,
+      and issue tracking systems that are managed by, or on behalf of, the
+      Licensor for the purpose of discussing and improving the Work, but
+      excluding communication that is conspicuously marked or otherwise
+      designated in writing by the copyright owner as "Not a Contribution."
+
+      "Contributor" shall mean Licensor and any individual or Legal Entity
+      on behalf of whom a Contribution has been received by Licensor and
+      subsequently incorporated within the Work.
+
+   2. Grant of Copyright License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      copyright license to reproduce, prepare Derivative Works of,
+      publicly display, publicly perform, sublicense, and distribute the
+      Work and such Derivative Works in Source or Object form.
+
+   3. Grant of Patent License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      (except as stated in this section) patent license to make, have made,
+      use, offer to sell, sell, import, and otherwise transfer the Work,
+      where such license applies only to those patent claims licensable
+      by such Contributor that are necessarily infringed by their
+      Contribution(s) alone or by combination of their Contribution(s)
+      with the Work to which such Contribution(s) was submitted. If You
+      institute patent litigation against any entity (including a
+      cross-claim or counterclaim in a lawsuit) alleging that the Work
+      or a Contribution incorporated within the Work constitutes direct
+      or contributory patent infringement, then any patent licenses
+      granted to You under this License for that Work shall terminate
+      as of the date such litigation is filed.
+
+   4. Redistribution. You may reproduce and distribute copies of the
+      Work or Derivative Works thereof in any medium, with or without
+      modifications, and in Source or Object form, provided that You
+      meet the following conditions:
+
+      (a) You must give any other recipients of the Work or
+          Derivative Works a copy of this License; and
+
+      (b) You must cause any modified files to carry prominent notices
+          stating that You changed the files; and
+
+      (c) You must retain, in the Source form of any Derivative Works
+          that You distribute, all copyright, patent, trademark, and
+          attribution notices from the Source form of the Work,
+          excluding those notices that do not pertain to any part of
+          the Derivative Works; and
+
+      (d) If the Work includes a "NOTICE" text file as part of its
+          distribution, then any Derivative Works that You distribute must
+          include a readable copy of the attribution notices contained
+          within such NOTICE file, excluding those notices that do not
+          pertain to any part of the Derivative Works, in at least one
+          of the following places: within a NOTICE text file distributed
+          as part of the Derivative Works; within the Source form or
+          documentation, if provided along with the Derivative Works; or,
+          within a display generated by the Derivative Works, if and
+          wherever such third-party notices normally appear. The contents
+          of the NOTICE file are for informational purposes only and
+          do not modify the License. You may add Your own attribution
+          notices within Derivative Works that You distribute, alongside
+          or as an addendum to the NOTICE text from the Work, provided
+          that such additional attribution notices cannot be construed
+          as modifying the License.
+
+      You may add Your own copyright statement to Your modifications and
+      may provide additional or different license terms and conditions
+      for use, reproduction, or distribution of Your modifications, or
+      for any such Derivative Works as a whole, provided Your use,
+      reproduction, and distribution of the Work otherwise complies with
+      the conditions stated in this License.
+
+   5. Submission of Contributions. Unless You explicitly state otherwise,
+      any Contribution intentionally submitted for inclusion in the Work
+      by You to the Licensor shall be under the terms and conditions of
+      this License, without any additional terms or conditions.
+      Notwithstanding the above, nothing herein shall supersede or modify
+      the terms of any separate license agreement you may have executed
+      with Licensor regarding such Contributions.
+
+   6. Trademarks. This License does not grant permission to use the trade
+      names, trademarks, service marks, or product names of the Licensor,
+      except as required for reasonable and customary use in describing the
+      origin of the Work and reproducing the content of the NOTICE file.
+
+   7. Disclaimer of Warranty. Unless required by applicable law or
+      agreed to in writing, Licensor provides the Work (and each
+      Contributor provides its Contributions) on an "AS IS" BASIS,
+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+      implied, including, without limitation, any warranties or conditions
+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
+      PARTICULAR PURPOSE. You are solely responsible for determining the
+      appropriateness of using or redistributing the Work and assume any
+      risks associated with Your exercise of permissions under this License.
+
+   8. Limitation of Liability. In no event and under no legal theory,
+      whether in tort (including negligence), contract, or otherwise,
+      unless required by applicable law (such as deliberate and grossly
+      negligent acts) or agreed to in writing, shall any Contributor be
+      liable to You for damages, including any direct, indirect, special,
+      incidental, or consequential damages of any character arising as a
+      result of this License or out of the use or inability to use the
+      Work (including but not limited to damages for loss of goodwill,
+      work stoppage, computer failure or malfunction, or any and all
+      other commercial damages or losses), even if such Contributor
+      has been advised of the possibility of such damages.
+
+   9. Accepting Warranty or Additional Liability. While redistributing
+      the Work or Derivative Works thereof, You may choose to offer,
+      and charge a fee for, acceptance of support, warranty, indemnity,
+      or other liability obligations and/or rights consistent with this
+      License. However, in accepting such obligations, You may act only
+      on Your own behalf and on Your sole responsibility, not on behalf
+      of any other Contributor, and only if You agree to indemnify,
+      defend, and hold each Contributor harmless for any liability
+      incurred by, or claims asserted against, such Contributor by reason
+      of your accepting any such warranty or additional liability.
+
+   END OF TERMS AND CONDITIONS
+
+   APPENDIX: How to apply the Apache License to your work.
+
+      To apply the Apache License to your work, attach the following
+      boilerplate notice, with the fields enclosed by brackets "[]"
+      replaced with your own identifying information. (Don't include
+      the brackets!)  The text should be enclosed in the appropriate
+      comment syntax for the file format. We also recommend that a
+      file or class name and description of purpose be included on the
+      same "printed page" as the copyright notice for easier
+      identification within third-party archives.
+
+   Copyright [yyyy] [name of copyright owner]
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
diff --git a/JodaTimeContrib/hibernate/NOTICE.txt b/JodaTimeContrib/hibernate/NOTICE.txt
new file mode 100644
index 000000000..dffbcf31c
--- /dev/null
+++ b/JodaTimeContrib/hibernate/NOTICE.txt
@@ -0,0 +1,5 @@
+=============================================================================
+= NOTICE file corresponding to section 4d of the Apache License Version 2.0 =
+=============================================================================
+This product includes software developed by
+Joda.org (http://www.joda.org/).
diff --git a/JodaTimeContrib/hibernate/README.txt b/JodaTimeContrib/hibernate/README.txt
new file mode 100644
index 000000000..cc1e21894
--- /dev/null
+++ b/JodaTimeContrib/hibernate/README.txt
@@ -0,0 +1,22 @@
+
+Joda-Time Contributions area - Hibernate support
+================================================
+Joda-Time is a date and time library that vastly improves on the JDK.
+This release provides additional support for Hibernate database persistence.
+See http://www.hibernate.org/ for more details on Hibernate.
+
+Additional setup for test cases
+-------------------------------
+Joda-Time supports the use of maven for the build process.
+Maven tries to download all dependencies from ibiblio.
+Some of them are not hosted due to their licensing.
+
+Thus you have to download them and put them in your local maven repository.
+eg. on Linux, YOUR_HOME/.maven/respository
+eg. on Windows, Documents and Settings/YOUR_USER/.maven/respository
+
+For the hibernate code, you need the Java Transaction API:
+http://java.sun.com/products/jta
+
+# mkdir ~/.maven/repository/jta/jars
+# cp jta-1_0_1B-classes.zip ~/.maven/repository/jta/jars
diff --git a/JodaTimeContrib/hibernate/RELEASE-NOTES.txt b/JodaTimeContrib/hibernate/RELEASE-NOTES.txt
new file mode 100644
index 000000000..02ccdd57d
--- /dev/null
+++ b/JodaTimeContrib/hibernate/RELEASE-NOTES.txt
@@ -0,0 +1,26 @@
+
+Joda-Time Contributions area - Hibernate support  v0.1
+======================================================
+Joda-Time is a date and time library that vastly improves on the JDK.
+This release provides additional support for Hibernate database persistence.
+See http://www.hibernate.org/ for more details on Hibernate.
+
+This library is a user contribution by Mario Ivankovits, thank you.
+
+The Joda-Time contributions area hosts additional code that may be of
+use when working with the main Joda-Time library.
+Each of these contributions is licensed using the Apache License v2.0.
+However, Hibernate is LGPL licensed software.
+It is your resposibility to use the joda-time-hibernate jar correctly
+in your own application according to the terms of the LGPL license.
+
+Please note that this code is not supported in the same way as the main
+Joda-Time code. As such it is possible that methods and classes may come
+and go over time without warning - you have been warned!
+
+
+Feedback
+--------
+All feedback is welcomed at joda-interest@lists.sourceforge.net.
+
+The Joda team
diff --git a/JodaTimeContrib/build.xml b/JodaTimeContrib/hibernate/build.xml
similarity index 98%
rename from JodaTimeContrib/build.xml
rename to JodaTimeContrib/hibernate/build.xml
index 7777d34a0..952338c60 100644
--- a/JodaTimeContrib/build.xml
+++ b/JodaTimeContrib/hibernate/build.xml
@@ -18,16 +18,16 @@
 
 
   <!-- The name of this component -->
-  <property name="component.name"          value="joda-time-contrib"/>
+  <property name="component.name"          value="joda-time-hibernate"/>
 
   <!-- The primary package name of this component -->
   <property name="component.package"       value="org.joda.time.contrib"/>
 
   <!-- The title of this component -->
-  <property name="component.title"         value="Joda date and time contributions"/>
+  <property name="component.title"         value="Joda date and time hibernate contribution"/>
 
   <!-- The current version number of this component -->
-  <property name="component.version"       value="1.0"/>
+  <property name="component.version"       value="0.1"/>
 
   <!-- The current version number of this component -->
   <property name="component.fullname"      value="${component.name}-${component.version}"/>
diff --git a/JodaTimeContrib/checkstyle.xml b/JodaTimeContrib/hibernate/checkstyle.xml
similarity index 100%
rename from JodaTimeContrib/checkstyle.xml
rename to JodaTimeContrib/hibernate/checkstyle.xml
diff --git a/JodaTimeContrib/project.properties b/JodaTimeContrib/hibernate/project.properties
similarity index 100%
rename from JodaTimeContrib/project.properties
rename to JodaTimeContrib/hibernate/project.properties
diff --git a/JodaTimeContrib/project.xml b/JodaTimeContrib/hibernate/project.xml
similarity index 74%
rename from JodaTimeContrib/project.xml
rename to JodaTimeContrib/hibernate/project.xml
index 1b3c59280..bf332b41b 100644
--- a/JodaTimeContrib/project.xml
+++ b/JodaTimeContrib/hibernate/project.xml
@@ -2,10 +2,10 @@
 <!-- You are strongly recommended to use ant for compiling and building -->
 <!-- We only use and test maven for website construction -->
 
-<project>
+<maven:project xmlns:maven="http://maven.apache.org/maven-v3_0_0.xsd">
   <pomVersion>3</pomVersion>
-  <id>joda-time-contrib</id>
-  <name>Joda time</name>
+  <id>joda-time-hibernate</id>
+  <name>Joda time Hibernate support</name>
   <groupId>joda-time</groupId>
   <currentVersion>1.0</currentVersion>
   <organization>
@@ -14,24 +14,24 @@
     <logo>/images/joda.png</logo>
   </organization>
   <inceptionYear>2002</inceptionYear>
-  <package>org.joda.time.contrib</package>
+  <package>org.joda.time.contrib.hibernate</package>
   <logo>/images/jodatime.png</logo>
 
   <description>
-    User contributions to Joda-Time
+    Contribution to Joda-Time that adds Hibernate support
   </description>
-  <shortDescription>Joda time contrib</shortDescription>
+  <shortDescription>Joda time Hibernate support</shortDescription>
   <url>http://joda-time.sourceforge.net</url>
 
   <issueTrackingUrl>http://sourceforge.net/tracker/?atid=617889&amp;group_id=97367&amp;func=browse</issueTrackingUrl>
 
   <siteAddress>shell.sourceforge.net</siteAddress>
-  <siteDirectory>/home/groups/j/jo/joda-time/htdocs/contrib/</siteDirectory>
+  <siteDirectory>/home/groups/j/jo/joda-time/htdocs/contrib/hibernate</siteDirectory>
   <distributionDirectory>home/groups/j/jo/joda-time/htdocs/repository</distributionDirectory>
 
   <repository>
-    <connection>scm:cvs:pserver:anonymous@cvs.sourceforge.net:/cvsroot/joda-time:JodaTimeContrib</connection>
-    <url>http://cvs.sourceforge.net/viewcvs.py/joda-time/JodaTimeContrib/</url>
+    <connection>scm:cvs:pserver:anonymous@cvs.sourceforge.net:/cvsroot/joda-time:JodaTimeContrib/hibernate</connection>
+    <url>http://cvs.sourceforge.net/viewcvs.py/joda-time/JodaTimeContrib/hibernate/</url>
   </repository>
 
   <mailingLists>
@@ -45,46 +45,11 @@
 
   <developers>
     <developer>
-      <name>Stephen Colebourne</name>
-      <id>scolebourne</id>
-      <email>scolebourne@joda.org</email>
-      <organization>SITA ATS Ltd</organization>
-      <roles>
-        <role>Project Lead</role>
-      </roles>
-    </developer>
-    <developer>
-      <name>Brian S O'Neill</name>
-      <id>broneill</id>
-      <email>broneill@users.sourceforge.net</email>
-      <organization></organization>
-      <roles>
-        <role>Senior Developer</role>
-      </roles>
+      <name>Mario Ivankovits</name>
+      <id>imario</id>
     </developer>
   </developers>
 
-<!--  <contributors>
-    <contributor>
-      <name>Guy Allard</name>
-    </contributor>Fredrik Borgh
-    <contributor>
-      <name>Fredrik Borgh</name>
-    </contributor>
-    <contributor>
-      <name>Sean Geoghegan</name>
-    </contributor>
-    <contributor>
-      <name>Ashish Katyal</name>
-    </contributor>
-    <contributor>
-      <name>Al Major</name>
-    </contributor>
-    <contributor>
-      <name>Kandarp Shah</name>
-    </contributor>
-  </contributors>-->
-
   <dependencies>
     <dependency>
       <groupId>joda-time</groupId>
@@ -162,7 +127,7 @@
     <unitTestSourceDirectory>src/test</unitTestSourceDirectory>
     <unitTest>
       <includes>
-        <include>org/joda/time/contrib/**/Test*.java</include>
+        <include>org/joda/time/contrib/hibernate/**/Test*.java</include>
       </includes>
     </unitTest>
   </build>
@@ -185,4 +150,4 @@
      <!--report>maven-tasklist-plugin</report-->
   </reports>
 
-</project>
+</maven:project>
diff --git a/JodaTimeContrib/hibernate/src/conf/MANIFEST.MF b/JodaTimeContrib/hibernate/src/conf/MANIFEST.MF
new file mode 100644
index 000000000..043b4d7ce
--- /dev/null
+++ b/JodaTimeContrib/hibernate/src/conf/MANIFEST.MF
@@ -0,0 +1,7 @@
+Extension-Name: @name@
+Specification-Title: Joda Time Hibernate support
+Specification-Vendor: Joda.org
+Specification-Version: 0.1
+Implementation-Vendor: Joda.org
+Implementation-Title: org.joda.time.contrib.hibernate
+Implementation-Version: @version@
diff --git a/JodaTimeContrib/src/java/org/joda/time/contrib/hibernate/PersistentDateTime.java b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentDateTime.java
similarity index 100%
rename from JodaTimeContrib/src/java/org/joda/time/contrib/hibernate/PersistentDateTime.java
rename to JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentDateTime.java
diff --git a/JodaTimeContrib/src/java/org/joda/time/contrib/hibernate/PersistentDateTimeTZ.java b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentDateTimeTZ.java
similarity index 100%
rename from JodaTimeContrib/src/java/org/joda/time/contrib/hibernate/PersistentDateTimeTZ.java
rename to JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentDateTimeTZ.java
diff --git a/JodaTimeContrib/src/java/org/joda/time/contrib/hibernate/PersistentYearMonthDay.java b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentYearMonthDay.java
similarity index 100%
rename from JodaTimeContrib/src/java/org/joda/time/contrib/hibernate/PersistentYearMonthDay.java
rename to JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentYearMonthDay.java
diff --git a/JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/Event.java b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/Event.java
similarity index 100%
rename from JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/Event.java
rename to JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/Event.java
diff --git a/JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/EventTZ.java b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/EventTZ.java
similarity index 100%
rename from JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/EventTZ.java
rename to JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/EventTZ.java
diff --git a/JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/HibernateTestCase.java b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/HibernateTestCase.java
similarity index 100%
rename from JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/HibernateTestCase.java
rename to JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/HibernateTestCase.java
diff --git a/JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/Schedule.java b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/Schedule.java
similarity index 100%
rename from JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/Schedule.java
rename to JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/Schedule.java
diff --git a/JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/TestPersistentDateTime.java b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentDateTime.java
similarity index 100%
rename from JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/TestPersistentDateTime.java
rename to JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentDateTime.java
diff --git a/JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/TestPersistentYearMonthDay.java b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentYearMonthDay.java
similarity index 100%
rename from JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/TestPersistentYearMonthDay.java
rename to JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentYearMonthDay.java
diff --git a/JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/event.hbm.xml b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/event.hbm.xml
similarity index 100%
rename from JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/event.hbm.xml
rename to JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/event.hbm.xml
diff --git a/JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/eventTZ.hbm.xml b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/eventTZ.hbm.xml
similarity index 100%
rename from JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/eventTZ.hbm.xml
rename to JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/eventTZ.hbm.xml
diff --git a/JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/schedule.hbm.xml b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/schedule.hbm.xml
similarity index 100%
rename from JodaTimeContrib/src/test/org/joda/time/contrib/hibernate/schedule.hbm.xml
rename to JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/schedule.hbm.xml
diff --git a/JodaTimeContrib/maven.xml b/JodaTimeContrib/maven.xml
deleted file mode 100644
index f901eca83..000000000
--- a/JodaTimeContrib/maven.xml
+++ /dev/null
@@ -1,5 +0,0 @@
-<project default="java:jar"
-  xmlns:j="jelly:core"
-  xmlns:ant="jelly:ant">
-
-</project>
diff --git a/JodaTimeContrib/src/conf/MANIFEST.MF b/JodaTimeContrib/src/conf/MANIFEST.MF
deleted file mode 100644
index 909581412..000000000
--- a/JodaTimeContrib/src/conf/MANIFEST.MF
+++ /dev/null
@@ -1,7 +0,0 @@
-Extension-Name: @name@
-Specification-Title: Joda Time Contrib
-Specification-Vendor: Joda.org
-Specification-Version: 1.0
-Implementation-Vendor: Joda.org
-Implementation-Title: org.joda.time.contrib
-Implementation-Version: @version@

From c29aace378b319598f1c1bd1e009cf5f7e72ea75 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 18 Jul 2005 23:36:33 +0000
Subject: [PATCH 080/124] Add URL to download JTA from

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@812 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/hibernate/project.xml | 1 +
 1 file changed, 1 insertion(+)

diff --git a/JodaTimeContrib/hibernate/project.xml b/JodaTimeContrib/hibernate/project.xml
index bf332b41b..35e67a0e4 100644
--- a/JodaTimeContrib/hibernate/project.xml
+++ b/JodaTimeContrib/hibernate/project.xml
@@ -118,6 +118,7 @@
     <dependency>
       <groupId>jta</groupId>
       <artifactId>jta</artifactId>
+      <url>http://java.sun.com/products/jta</url>
       <jar>jta-1_0_1B-classes.zip</jar>
     </dependency>
   </dependencies>

From 8297e3c51f77f12f5bfd161721e6dc2cf48bba66 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 18 Jul 2005 23:36:49 +0000
Subject: [PATCH 081/124] Ignore generated folders

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@813 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/hibernate/.cvsignore | 2 ++
 1 file changed, 2 insertions(+)
 create mode 100644 JodaTimeContrib/hibernate/.cvsignore

diff --git a/JodaTimeContrib/hibernate/.cvsignore b/JodaTimeContrib/hibernate/.cvsignore
new file mode 100644
index 000000000..d567ba01e
--- /dev/null
+++ b/JodaTimeContrib/hibernate/.cvsignore
@@ -0,0 +1,2 @@
+bin
+target

From e69fc76167fab106ffd3c6d20512cbe1d0f9ee19 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 18 Jul 2005 23:37:18 +0000
Subject: [PATCH 082/124] Add Eclipse project files

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@814 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/hibernate/.classpath | 32 ++++++++++++++++++++++++++++
 JodaTimeContrib/hibernate/.project   | 18 ++++++++++++++++
 2 files changed, 50 insertions(+)
 create mode 100644 JodaTimeContrib/hibernate/.classpath
 create mode 100644 JodaTimeContrib/hibernate/.project

diff --git a/JodaTimeContrib/hibernate/.classpath b/JodaTimeContrib/hibernate/.classpath
new file mode 100644
index 000000000..b29791e64
--- /dev/null
+++ b/JodaTimeContrib/hibernate/.classpath
@@ -0,0 +1,32 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<classpath>
+  <classpathentry excluding="" kind="src" path="src/java">
+  </classpathentry>
+  <classpathentry output="target/test-classes" kind="src" path="src/test">
+  </classpathentry>
+  <classpathentry kind="var" path="MAVEN_REPO/junit/jars/junit-3.8.1.jar">
+  </classpathentry>
+  <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER">
+  </classpathentry>
+  <classpathentry kind="var" path="MAVEN_REPO/joda-time/jars/joda-time-1.0.jar">
+  </classpathentry>
+  <classpathentry kind="var" path="MAVEN_REPO/hibernate/jars/hibernate-3.0.5.jar">
+  </classpathentry>
+  <classpathentry kind="var" path="MAVEN_REPO/commons-logging/jars/commons-logging-api-1.0.4.jar">
+  </classpathentry>
+  <classpathentry kind="var" path="MAVEN_REPO/commons-collections/jars/commons-collections-3.1.jar">
+  </classpathentry>
+  <classpathentry kind="var" path="MAVEN_REPO/hsqldb/jars/hsqldb-1.7.3.3.jar">
+  </classpathentry>
+  <classpathentry kind="var" path="MAVEN_REPO/ehcache/jars/ehcache-1.1.jar">
+  </classpathentry>
+  <classpathentry kind="var" path="MAVEN_REPO/dom4j/jars/dom4j-1.6.jar">
+  </classpathentry>
+  <classpathentry kind="var" path="MAVEN_REPO/cglib/jars/cglib-full-2.0.2.jar">
+  </classpathentry>
+  <classpathentry kind="var" path="MAVEN_REPO/jta/jars/jta-1_0_1B-classes.zip">
+  </classpathentry>
+  <classpathentry kind="output" path="target/classes">
+  </classpathentry>
+</classpath>
\ No newline at end of file
diff --git a/JodaTimeContrib/hibernate/.project b/JodaTimeContrib/hibernate/.project
new file mode 100644
index 000000000..acd8cc8f9
--- /dev/null
+++ b/JodaTimeContrib/hibernate/.project
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<projectDescription>
+  <name>joda-time-hibernate</name>
+  <comment>Contribution to Joda-Time that adds Hibernate support</comment>
+  <projects>
+  </projects>
+  <buildSpec>
+    <buildCommand>
+      <name>org.eclipse.jdt.core.javabuilder</name>
+      <arguments>
+      </arguments>
+    </buildCommand>
+  </buildSpec>
+  <natures>
+    <nature>org.eclipse.jdt.core.javanature</nature>
+  </natures>
+</projectDescription>
\ No newline at end of file

From 8f4fd92e17a3342de558131d05de545ee30e7dec Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 18 Jul 2005 23:38:04 +0000
Subject: [PATCH 083/124] Organize imports

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@815 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/test/org/joda/time/contrib/hibernate/Schedule.java       | 1 -
 1 file changed, 1 deletion(-)

diff --git a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/Schedule.java b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/Schedule.java
index b20bd4738..c346f3776 100644
--- a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/Schedule.java
+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/Schedule.java
@@ -1,6 +1,5 @@
 package org.joda.time.contrib.hibernate;
 
-import org.joda.time.DateTime;
 import org.joda.time.YearMonthDay;
 
 import java.io.Serializable;

From e6c48ccee937f2898c77cf0bbb8e2fa0adde0c73 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 19 Jul 2005 00:15:39 +0000
Subject: [PATCH 084/124] Initialize website with style and images

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@816 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../hibernate/xdocs/images/joda.png           | Bin 0 -> 2919 bytes
 .../hibernate/xdocs/images/jodatime.png       | Bin 0 -> 2850 bytes
 .../hibernate/xdocs/navigation.xml            |  60 +++++++++
 .../xdocs/stylesheets/maven-theme.css         | 119 ++++++++++++++++++
 4 files changed, 179 insertions(+)
 create mode 100644 JodaTimeContrib/hibernate/xdocs/images/joda.png
 create mode 100644 JodaTimeContrib/hibernate/xdocs/images/jodatime.png
 create mode 100644 JodaTimeContrib/hibernate/xdocs/navigation.xml
 create mode 100644 JodaTimeContrib/hibernate/xdocs/stylesheets/maven-theme.css

diff --git a/JodaTimeContrib/hibernate/xdocs/images/joda.png b/JodaTimeContrib/hibernate/xdocs/images/joda.png
new file mode 100644
index 0000000000000000000000000000000000000000..435df26a39732551d2f7ed9b1fdf288be1c83875
GIT binary patch
literal 2919
zcmY*bc{EgSAHT9>C)v0BESbp~S(CBGl$e?^_B~6ojwNKGWSNNUMkJ&mhRl>=EM>`7
zw&BN^Y$4f83=+Nf?T`1I_n!0I=bn4c{XEZozMtibLs(nzaEfyR0KfycG`j}QVc>wU
z9|P|ue%BJgi6g|);lD4L{tg?3&VRv&<Kgft=Eterg8UphIyI<i0N`SSn;D~`iq;(h
zt&rmqaY478CQY0sFSAysyvuRKb8CC3E1D8gl&uN|0<L~w7;mSh;`{CMyf15?_PMm@
zev$O4Gq6zXT!PpL?{n*rgh-9p#P4OVI2kQDc_X{@BUsVG*O+LrAHje6<CZt6%X)2L
z8)0{r^ai5`pu#vanIuU3j*Z0kI&&+U-#^a-UhyNf9aEqZDxEnGg+2Q&a-H=qPb?q}
zx0mHik$r6(9SfaRXPTqQ!+x<OVM*8>gY)N|RP*g@ZEu__R6M^2V~;&6|M-)S2L9Mx
zz?feiZs@?}teW3@okU-cq+H-<H=w=$W87J0{J(XS&kU%hZES30E80xI4fVocvbsE>
zxqT}uD<l%Bv(t=?x`-(@#Qyq-*W{BnnEkn5QBiT6SF&JJjOtlm1dD5Z{W>Bb;A4Px
zSfg{rHHWKL>%*1?($dnpM18a$(<dhfiq8|qS6f`wjQJH56mIWsU^g0<AnEk=)|efC
zCnt&Y`J3alDr#!Metw856dVqxM6T<{?y0BG-!+>3@KB;VU21iGy({#0mxx;pk?8U!
z$OVa{c6PF4bXOCJwr6rb4q6D`9T~Z%n$HE$XteqHdDP+d_BK7ZO+}E?ckl&?gz@u(
zNb({Va5$U`CGtm<fqvjrQ^fxMz5tE|&<^@MF*cUiqZ2$`Q&ZC!`nBCl6pcpzOQ%y_
zzAr^olF4C*zjnwxP7MJLrlzJc{6<#QV~%cae1Nm64!G@^R&0u}h=`r5Yx>u{PdYQ5
zU0uV+GcQ%_?CjXU4$lE8W@T=7_PrZ;{^XJlb~j6q==(a;QC{KUf@iUY;Kv670s@GW
z>GRjBat4>E`#B`(jHRJcQ$G#Sq!TQed3mP=aF9^&<iCaJ3ah`RP;Pf5@%$9aD=eIx
znCL;|ee&UAImVlupxfKq+nsT0_u#O&xcJA9AC+Jkab~jh_Gx>5`ahuud!dZJTqXb4
zF)=aX0J_c<`)hl-zP`S;w)UZfPMNpvZN}PIwVkhz4=_7YaasJ~hxJHiqdRw69f{g_
zt6Q7X*rnoI5DL_p5=m@po7vp`x&NEbaL+v?1W`9$je4Qt)BqUC3!D{y$d=$?*b$&j
zuWLK{b+FmS43rGc)O%S32XB7=9^&OSPx9^u++$;#D=HQl>-23`d3cP0^gWsB+nX)r
z78x6#8_Ca}bp~k1?Tp#^ak3Z}>4vt?g@|$|ef{bq**zTowae>ZZDWd(N##gvPfzD<
zo5@(&oTAtv5br$efv3&QvF`3N0=U?{xnz(_z@vhKC=k<KJ*9`4nc3-0ka^w^Hqy`U
z+Zv5LgWa9#>0$R|J9f9JNx$=RE0%(;E*_jr6;Ug*?DMRTT$?Z!Tl*1ZU96udtf8m3
zPql$n94G_w^75mjqeIC}(LYZYmK(`TkbU`VVOm-d-)D_SS2+%9#{66E95#)wvc`|Q
z-VR)!d~F#6^z`&Vl$1>M84QLa5e<lniG}J)0tggpdlYGNl?hdaIwQz=(H_*7gM$O*
z)+SgO*Vq0+@GSk}jnOKkU9Gc2S|HykLrF<VmUtm0bo1}6{{DP5Lei)HetL7XCaJBi
zPEC}1<oxqz&rr6uS7BJg5^I8Km|$vGZf-6r+eoIeveJGct@|SnHyg7z+S;1e%Yr~4
zlo$5)!U<G8P0jg8%J8BJ6bhH&AL?Z>?(FU^=NR%hCvJOYERjp(ocO~oPlsn7(iz>J
z^-%`Wz#~ifoEmnM(vYqPLI6K+GKdwZEg@vj6yH7HyNFrwg$RP4Q<*le+k*S#Q~r(w
zNF!;>%QsdEm2xjFGnnG-m7n_?NN4mfaweMOToFwg?v>3<nIi*3las&pmr8bbcad69
zC^XX&WCJshKA)yGz`>i`Vc+%kt?o(>4_iXe8;J@9!ICG?qz;dg!Q?&=;-nCFhbXN*
zz(9bf@bTlYu&|12H-ds{`xhObN*MEx<_~2bYZ>!@{p;`!3iRH~dCH}0A-a+|jVK<>
zSx!e{Lt~>@?+XM3G{0AlL~BC%HCgElo!e*mCjzt;ng*A`^ozIAb>lb5Gz7kXu?+d-
zn5hGAvRrmALQjyh^ktG!*1}Ay)rB&U0aBu(AaYF0lPwKEU6lJ9!CBSfo~m1Gkw7(p
zkX+B*(a{0%wY+jgD77m<+v#-nKPnqDZ8jw;@GKv)SSHl(oVXw)41-CRz7Vs}lll91
z>_u6FQ(wM(xvqgnonZwiQ?=CPZ$u;#>E-1GyqgQj%F2SweU&()r6rVmLE6T~hHq@)
z=YA7~BGRyM!dr-wRi8?D{(RJ5Ys-v?zIjf(V@@4-Mj*&#@N*_cM@ReBRiR$Mj`o-<
zP6I<!YB{=EQBjd;Hc`aYo^+i9sBs{(ty9k5+TiBqMl1{r41nTJo!b&l_4fDY1oBi}
zE?qgA>qsVRs<h3(baf}D|6VgQ8TTSE7>tk4>6J2cb)8#VdQWzCwuqYR+RBPaQG2_|
zMQ6`T9iCu1`IcaXfg<ar4A@cB>c1)gJ6l5B(f(4VoP{u&ky+F4S&yJIRVZs|X|Wh1
zgu&REUfq%13T`{h%gakzF_#^tY_`%zMn;B)9^vu0JPU|mLqkJZz}n>No2;y?Dax6a
z({X<eLBW(5L}Nfd573qvLps<Yktg*}naK`|xW&$e>+`Ugy0}Og^QXYQT~22&gDzaT
zwKMM47Wc>S(lf)OJug(R4;dttgoMOkksf&V2@Iapu1V0*z&Mgy?He3?LkkEu27d#0
zQW2q)<N*fGW9`7nmmbU!i+8(b-ZM65U^8<sBUaJby=IDW+rt*yC*$j9!Kgr2=gP)y
z^(ywniP<-WLm%AAAxTL|B_<|T=Jqc>Fq0MJROdFm>Fn$ryT7%#pJUF|h&^EF@i501
z6%~Ol*y(Ifvy?9zUv-OFR`|ev>~4JDpm22!b-AXpvH<I$rlL|@Q1G;kStj<+;jWTh
z?ezd9oY~0e==C@BWvjaJ1DbEiaF_^hG8uIGj$}SxZ|~t;P+?&9mTNN2;(eb~5sBsx
z>YN+5z*u!L0@u>e*N>Tf$Mk_?U@qiAYHHOut_yNGYhhwy;&E^*PLj7n9dE^0%y(n#
z?5NZz3*%R-mcd*J3=9PGc`n4h3Kc|eAXZkUG;yiBYv3p8bS-h7zN05#(fj)P!1jUG
z&kSI(SQQnO^73*H4vueZ%b3QE>6X<<3dg;kzCM#=K6sWRk<p&WmC|^F`aF={z`=5F
zc=)Pdpr)p#5U05e|Jz%e()u|InEgVno8R;j2A3$<gN92L;?mMj@OUsBpddIDTDnO#
zlKDRSKB2VqAHdSeN*Mwv2<vA{Fm7>$85n$A#E{8kkhH;5O}Y8`#{tj!y`_>kRaI4=
zaJ&;ulwVo6f7~rjik)SIO0}zVbwMEFKPw1wf+a2Gk<YYz<+%RBwz{C$mlDb?7_KiR
zbbS${CsZ7$?GzEA1-Ogmfjh}sSZlSJT|970yMO;aD2i=Y4|P#j?2c`s$qAfU+C{mh
zke^Y_FJ7F<;X3;RwsZH7&LjEgrGa9w^m-B9q0KK}hP38?u`fE5Fq1t&nL6s=gZ<v7
z+Q`Yt38%7lyxiN{D=RCrbB$gkzL_q2vLN=iyF8-&e|s4RJf;x@X*Ewdz$O`hn_HXJ
Inz-Nl59h<Bq5uE@

literal 0
HcmV?d00001

diff --git a/JodaTimeContrib/hibernate/xdocs/images/jodatime.png b/JodaTimeContrib/hibernate/xdocs/images/jodatime.png
new file mode 100644
index 0000000000000000000000000000000000000000..4d5d609868c392a2871e8f15100f4ba54b7e92b6
GIT binary patch
literal 2850
zcmai$c{Ei28^^DVeMuoZ6GADZX}&_k*dh$3F_xskSY|?&2rZUx$d)V_YZwwqizRC)
z2GJN|EJNZuA|~rlWc%Ik@9*C^zkAN}JolV?&b^<{b6?N<{YkJzT@vD#<_7>k$imzN
z4b}uO)OZhp*_0ba2Mb?-xl=G$IsO|qCpt&K8=hMh)}}l|f?^`V0uC{)PXU1cgM|qa
z6PCZ^>|`Z+O$Kq!FXzjbL*gefr_U%sAI3z9NSJh{nAG}<48sy*e3UO|3V2MqTe)b!
zx@eLqE>JTI7jmbht&$qi)(&$1^ph9n<6?x9brZK*lh}8(v#?eFcpsF~V#9a(gQvo2
z;r;7Rk;!F*>FBG64kq}*rp4s_CMEt~_&Uhs>xK}0e0TxF^irc@$q$%_h=|_a-lA)^
zw(axmNCPh?Cnp;l8cl0P=H}NX`q&unzTwJ!uG%E1MLKPsy}c{0j%{H4+6nvhQ|dsy
zsj10Kc`jM%+?D~)R@cXm9}R|^uSfN<x^P<UAs#U4OQBg~zHmvY{_G<O3DtYYr)8{F
zh7=aRYPNg&?YF%l(q9Y@V>Z~omL{yNtpPwjwcf3RTSe5rI505KGV3%4psb>@U!S8J
zl}9{>W|>uBoKGLysCoVRFp<e*UU6~xj5qQV<EOlIs)4$h9Nm&jE`?(&>#D1(!G%44
z-t7wyZk#MFE&bj{;^F2NR;{nC&CJSb4QF%zyM1&89zoIitl?{KZyy=ihOMLo>Vp>o
zaeutp)791Wo6SimG-^Aen~D6J;?Bjxb9lb({+@KADygsgk(@vQnEp0%b)6a*7@#Cc
z6e8{s;d!3g<7L));H#-#>YAEuA*`$qxK%dW(%PEZ-`}-%lZeZsV(slim|ZEYtq35>
zTsilgcR$%QY0P*2XhVcyv4*FYm-gPu)cd~PUVZ@qQT|v6GC)UGgCrv>s~@sBytqhg
zhB~}*Nk~cAWV4yzBjIiuO%o3P)gH~MR@vW=>Vf50adC0Exw#<_2ncdo=Ml5PRxR`L
zv+(e6m5fi%X4!1E+wSx<F8+bv#JdEF`&-ABh)v?GSR`d{=eIXC_r$RzH=cX<?p;Bn
zb#-+U6BA3(CrN$Z19bG|ZB9Lr*AIIvHG<a`7Z*=cUSKjgn?KL9J++<u{g<bwi)wtM
zsis<WNL0orSmgfQ7--y$RJUvwjn}VVUz%kw7-v1YpfQF}5nf1Wa7#^%X!^nSyaL8b
z0CFf@dC+-gEzHx?Q{zM-i4<SEjffuC%cPfDWH_GAGFLWY9qwM++6s#{Z1<`$RXpOJ
zXhN3IbS>iD`MnZ<4*~=<y5R5Jxg#MiexWZEKSE6qRRw#qK`YSv-IXHqd-?0cTMr&a
zE*gziON^O~6_8LIe<XjAF*WrHT@ku6Ma5uB1_xl)c9^g*osE~*nz7H&?;{WP_xE<x
z;`8%mN$CeOO-P8>iY->>k%I0m^D1mx#O5gt4dG2AsK{hX_?0Sb;l(@0(oz)+g!3vf
zrwj}Xeqc^L@$>UrT3Y&1%Vcj;sZ`+%DGooi#KeaWqx#Fs%a@n^YsP)+oHrx(rrzHv
zE~L2IW3gXgRimuIb?3JG??2#*2n??pAt51<3gOYYHD<SWe?Ca3<?Y+`RId^OgIMR~
z>4|i9cPCqZIw*tJc+<@I6cBeMw{NdZ`N8uDxo~L^wAO*faJJXjUDim|fauYq>kC7w
zV*>A84T9&ah9}*$m23s{BllaXs)QKLp-cRNf)Dy)Y4Z{i5(;{uzBpVIxm?}h)#tpw
zR>1G8Wbmbf_$@3g2?6a|$=%E|*P3d{<QOTbjyDe;JZNapsTogZHhjPh_`txqvMEHw
zLTYDxV7WujZ6;1+<>cf%e!RLPXVTNtW5{Ru3_VNh?Twk>Mv4SAwiFk0062Kw%#hyg
zWkaQl7Ym>dHLtg}^AZRI@c(fF?UC`!(K@8);?hKY56arwGs|&mYAP))EhHoah|0=3
z21J>aAZ?VClyW#!t+H_vvK?BLbjILd;LOKZ5WY*P@`O5P!H(?LQ9l+J8TB^{3$7@p
zjS-9w%3+rv@m4ujalW@^0bn-hLbY9ZoMKDlfxI+H<62WVTg9EsI+Hsd8t@_oTS;HI
z1*X2fr0`oxMI73af;|avZ08aF*ntt&=Jdo4oSn_}ZG<{dMgV0ff|`3?I)yvS+oLO4
z>S9FgppUP=KlgRb69%a>WL+g4d{CoHd~vp}kgA}tuu;dW>eco2nD2*^C_&lDSNtwt
zzKnXRUoq%IE-5M0504?2RLbh^o;b=!q<{IM9lnm=$RMl1ZWtLE0l??0v1TRFDBc2;
zH>sn&y}c=fHI24Jq5404vaqyFdh}?jAy8?U+nOr|YD<rbDx-XhHBsDNo#6y<zkZJ2
z7<sw99fztrE1h!c2|rMTu0TZY|6Ex)4E$JH+S^zVRelf`XQZUBpAY2?OUxvZx;s0e
z<F2iDx0k=_`KYR@asuY*__vN?rW^o~NK8*ppT3eu4gI}*tyxwcad&KRkOKtfWlM|f
zHSR$x6Uo2)CpTH6OZiA7(%=Grq!=F`pRG)8nK(aJi|-fM*MR{;JF(Pm8L(p=;HnZ*
zQ@gd2%NC-eqd}0o@pznM=;oq*Z3?-{<<t{Yj`p*6?~VZhbDwiEGc(7=9EIbD==8ea
zc~nC}iu8H@EH`C~xcK-Er^w~W#tXr7J$UWhvIz#GztG?&$v86d;Gh~`Gt+Njhq-Y>
zUB4ahh@TB=WOk?C4j<bWJ?+}E^=Fd>vmPBD)(>07t<QdfAj|2Cpy<n_nB`c#17-B*
z&!00w1;mW}{L`eqiHQjg0Gy;3<>k1yjy|@aFMb&sI@0*&&6~Qqy88P1wzkN<Kb!oq
zMrvXs!^4IMqzEY3tL5G`<1%1dTJJSe+zCWtFOBA)CWfutWYpbQ_23o_-~-(+iBj!N
zlYfS;7+Sb&X-OxZSJqM&Agy+gr%7k^*FVMzfb{3(<;BOvf$s6-^0T(KgSs1|(^-Z?
zFh;a&XHcA|DoSVf2h4x6AwB)5%8)M{6tkXJ%Q3vXyggJZomltqC7nppye^z%2Pw9F
zxI8<}+UxRxX*j+C>=B@pNXD&g--VqqQA|TU-$6<IT+REPmzc;ui_hBm%)7R>Hjq<T
zn3@mDxUz+?LOzJ$#XG->t~ScGIvCH-&7sBYot!GLl|tN{ac&$O96^nD2g#<Oyx_Gj
z$o7Nh0ApigaOQXCs4`*2YwPRaCM+#2`)D+8`97oK)t)q^<HwJu%3oYuUgieOmD4vi
zHezB9HE41I(|eiFhnzgZ5C{YYhksnWprPT<s3nY#kArIR;JnSvo0@+h>&Bg(op?MR
z0J6V1$R5q6{I$_uj2Bj4KX=xT0ekBxXnfoog%UQk1Kq8vs>-?Q7yx=z*CV;Sr%zi6
zLn_U$$-I(#CG@Y8le_EREelZb%mx$19GyUN2L&=nr_%=pR@a!9k|_TyEy;<Bo^$&M
ziC=+B3W5R^a9hzL=+DN2FMJ2&ewAQi0{LSIl5*9-VRUpfo*9P0VBFmmlPE+2A)3q7
z*7k8tbZGX}Jgtxe@P*6V>kBZC^57{@Q?I}z?uQnQvh4Vz<>XQnYwPPft_*zp_RYUY
zS5J?{Vj0}u<po3%OpY8m@-M+Ef?HC4`de35cMW8I$6os1!8H-w7I<}6;7zqmuJI&B
R4?N!j7N#hZS4Oy){{UxZaMAz(

literal 0
HcmV?d00001

diff --git a/JodaTimeContrib/hibernate/xdocs/navigation.xml b/JodaTimeContrib/hibernate/xdocs/navigation.xml
new file mode 100644
index 000000000..5fa670478
--- /dev/null
+++ b/JodaTimeContrib/hibernate/xdocs/navigation.xml
@@ -0,0 +1,60 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+
+<project name="Joda Time">
+
+  <title>Joda Time</title>
+  <organizationLogo href="">Joda.org</organizationLogo>
+
+  <body>
+<!--    <menu name="Joda Time">
+      <item name="Overview" href="/index.html"/>
+      <item name="Quick start guide" href="/quickstart.html"/>
+      <item name="Users guide" href="/userguide.html"/>
+      <item name="FAQ" href="/faq.html"/>
+      <item name="Javadoc (Release)" href="/api-release/index.html"/>
+      <item name="License" href="/license.html"/>
+      <item name="Download" href="http://sourceforge.net/project/showfiles.php?group_id=97367"/>
+    </menu>
+    
+    <menu name="Key concepts">
+      <item name="Instant" href="/key_instant.html"/>
+      <item name="Partial" href="/key_partial.html"/>
+      <item name="Interval" href="/key_interval.html"/>
+      <item name="Duration" href="/key_duration.html"/>
+      <item name="Period" href="/key_period.html"/>
+      <item name="Chronology" href="/key_chronology.html"/>
+    </menu>
+    
+    <menu name="Chronologies">
+      <item name="ISO8601" href="/cal_iso.html"/>
+      <item name="Buddhist" href="/cal_buddhist.html"/>
+      <item name="Coptic" href="/cal_coptic.html"/>
+      <item name="Gregorian" href="/cal_gregorian.html"/>
+      <item name="GregorianJulian" href="/cal_gj.html"/>
+      <item name="Julian" href="/cal_julian.html"/>
+    </menu>
+    
+    <menu name="Development">
+      <item name="Sourceforge" href="http://sourceforge.net/projects/joda-time/"/>
+      <item name="Test results" href="/junit-report.html"/>
+      <item name="Test coverage" href="/jcoverage/index.html"/>
+      <item name="Mailing lists" href="/mail-lists.html"/>
+      <item name="Tasks" href="/tasks.html"/>
+      <item name="CVS" href="http://cvs.sourceforge.net/viewcvs.py/joda-time/JodaTime/"/>
+      <item name="Javadoc (CVS)" href="/apidocs/index.html"/>
+    </menu>
+-->    
+    <menu name="Joda">
+      <item name="Joda home" href="http://joda.sourceforge.net"/>
+      <item name="Time" href="http://joda-time.sourceforge.net/index.html"/>
+      <item name="Beans" href="http://joda.sourceforge.net/beans.html"/>
+      <item name="Primitives" href="http://joda-primitives.sourceforge.net/index.html"/>
+    </menu>
+    
+    <footer>
+      <a href="http://sourceforge.net">
+        <img src="http://sourceforge.net/sflogo.php?group_id=97367&amp;type=2" width="125" height="37" border="0" alt="SourceForge.net Logo" />
+      </a>
+    </footer>
+  </body>
+</project>
diff --git a/JodaTimeContrib/hibernate/xdocs/stylesheets/maven-theme.css b/JodaTimeContrib/hibernate/xdocs/stylesheets/maven-theme.css
new file mode 100644
index 000000000..d2a9decd1
--- /dev/null
+++ b/JodaTimeContrib/hibernate/xdocs/stylesheets/maven-theme.css
@@ -0,0 +1,119 @@
+body, td, select, input, li{
+  font-family: Helvetica, Arial, sans-serif;
+  font-size: 13px;
+  background-color: #fff;
+}
+a {
+  text-decoration: none;
+}
+a:link {
+  color:#009;
+}
+a:visited  {
+  color:#009;
+}
+a:active, a:hover {
+  text-decoration: underline;
+}
+a.externalLink, a.externalLink:link, a.externalLink:visited, a.externalLink:active, a.externalLink:hover {
+  background: url(../images/external.png) right center no-repeat;
+  padding-right: 15px;
+}
+a.newWindow, a.newWindow:link, a.newWindow:visited, a.newWindow:active, a.newWindow:hover {
+  background: url(../images/newwindow.png) right center no-repeat;
+  padding-right: 18px;
+}
+h2 {
+  font-family: Verdana, Helvetica, Arial, sans-serif;
+  padding: 4px 4px 4px 6px;
+  border: 1px solid #999;
+  color: #006;
+  background-color: #eef;
+  font-weight:bold;
+  font-size: 16px;
+  margin-top: 4px;
+  margin-bottom: 6px;
+}
+h3 {
+  padding: 4px 4px 4px 6px;
+  border: 1px solid #aaa;
+  color: #006;
+  background-color: #eee;
+  font-weight: normal;
+  font-size: 14px;
+  margin-top: 4px;
+  margin-bottom: 6px;
+}
+p, ul {
+  font-size: 13px;
+  margin-top: 4px;
+  margin-bottom: 6px;
+}
+#banner {
+  background-color: #eef;
+}
+#organizationLogo img, #projectLogo img {
+  border: 1px solid #999;
+}
+#breadcrumbs {
+  border-top: 1px solid #aaa;
+  border-bottom: 1px solid #aaa;
+  background-color: #ccc;
+}
+#leftColumn {
+  margin: 8px 0 8px 4px;
+  border: 1px solid #999;
+  background-color: #eef;
+}
+#navcolumn {
+  padding: 6px 4px 0 6px;
+}
+#navcolumn h5 {
+  font-size: 12px;
+  border-bottom: 1px solid #aaaaaa;
+  padding-top: 2px;
+  font-weight: normal;
+}
+#navcolumn li {
+  font-size: 12px;
+  padding-left: 12px;
+  background-color: #eef;
+}
+#navcolumn a:active, #navcolumn a:hover {
+  text-decoration: none;
+}
+#lastPublished {
+  font-size: 10px;
+}
+table.bodyTable th {
+  color: white;
+  background-color: #bbb;
+  text-align: left;
+  font-weight: bold;
+  font-size: 13px;
+}
+
+table.bodyTable th, table.bodyTable td {
+  font-size: 13px;
+}
+
+table.bodyTable tr.a {
+  background-color: #ddd;
+}
+
+table.bodyTable tr.b {
+  background-color: #eee;
+}
+
+.source {
+  border: 1px solid #999;
+  padding: 8px;
+  margin: 6px;
+}
+#footer {
+  background-color: #eef;
+  border-top: 1px solid #999;
+}
+body {
+  padding-bottom: 0px;
+}

From 37603e6df04709e2d27a1178c1a69599f9a6d97e Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 19 Jul 2005 00:16:17 +0000
Subject: [PATCH 085/124] Maven generated ant file

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@817 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/hibernate/build.xml | 600 ++++++++++++++--------------
 1 file changed, 295 insertions(+), 305 deletions(-)

diff --git a/JodaTimeContrib/hibernate/build.xml b/JodaTimeContrib/hibernate/build.xml
index 952338c60..29135b2dc 100644
--- a/JodaTimeContrib/hibernate/build.xml
+++ b/JodaTimeContrib/hibernate/build.xml
@@ -1,323 +1,313 @@
-<project name="joda-time-contrib" default="jar" basedir=".">
-
-<!-- Joda-time ANT script -->
-<!-- Based on scripts from Apache Jakarta Commons and elsewhere -->
-
-<!-- This is the recommended way to build Joda-Time. -->
-<!-- Maven is only intended for building the website. -->
-
-<!-- This ant file will download junit-3.8.1.jar to the lib subdirectory -->
-<!-- automatically if it does not find it there already. To change this -->
-<!-- behaviour, override the junit.jar property in build.properties. -->
-
-<!-- ========== Properties ================================================ -->
-
-  <property file="build.properties"/>
-
-<!-- ========== Component Declarations ==================================== -->
-
-
-  <!-- The name of this component -->
-  <property name="component.name"          value="joda-time-hibernate"/>
-
-  <!-- The primary package name of this component -->
-  <property name="component.package"       value="org.joda.time.contrib"/>
-
-  <!-- The title of this component -->
-  <property name="component.title"         value="Joda date and time hibernate contribution"/>
-
-  <!-- The current version number of this component -->
-  <property name="component.version"       value="0.1"/>
-
-  <!-- The current version number of this component -->
-  <property name="component.fullname"      value="${component.name}-${component.version}"/>
-  
-  <!-- The directory of source files -->
-  <property name="xdocs"                   value="xdocs"/>
-
-  <!-- Dependencies -->
-  <property name="lib"                     value="lib"/>
-  <property name="junit.jar"               value="${lib}/junit-3.8.1.jar"/>
-
-  <!-- The directory of source files -->
-  <property name="source"                  value="src"/>
-  <property name="source.home"             value="${source}/java"/>
-  <property name="conf.home"               value="${source}/conf"/>
-  <property name="test.home"               value="${source}/test"/>
-
-  <!-- The base directory for example sources -->
-  <property name="example.home"            value="src/example"/>
-
-  <!-- The base directory for compilation targets -->
-  <property name="build"                   value="build"/>
-  <property name="build.conf"              value="${build}/conf"/>
-  <property name="build.classes"           value="${build}/classes"/>
-  <property name="build.tz"                value="${build.classes}/org/joda/time/tz/data"/>
-  <property name="build.tests"             value="${build}/tests"/>
-  <property name="build.docs"              value="${build}/docs"/>
-  <property name="build.dist"              value="${build}/dist"/>
-  <property name="build.jarname.full"      value="${build}/${component.name}-${component.version}.jar"/>
-  <property name="build.fullname"          value="${build}/${component.fullname}"/>
-  <property name="build.dist.fullname"     value="${build.dist}/${component.fullname}"/>
-
-
-<!-- ========== Compiler Defaults ========================================= -->
-
-  <!-- Should Java compilations set the 'debug' compiler option? -->
-  <property name="compile.debug"           value="true"/>
-
-  <!-- Should Java compilations set the 'deprecation' compiler option? -->
-  <property name="compile.deprecation"     value="true"/>
-
-  <!-- Should Java compilations set the 'optimize' compiler option? -->
-  <property name="compile.optimize"        value="true"/>
-
-  <!-- Construct compile classpath -->
-  <path id="compile.classpath">
-    <pathelement location="${build.classes}"/>
-  </path>
-
-
-<!-- ========== Test Execution Defaults =================================== -->
-
-  <!-- Construct unit test classpath -->
-  <path id="test.classpath">
-    <pathelement location="${build.classes}"/>
-    <pathelement location="${build.tests}"/>
-    <pathelement location="${junit.jar}"/>
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--build.xml generated by maven from project.xml version 1.0
+  on date July 19 2005, time 0051-->
+
+<project default="jar" name="joda-time-hibernate" basedir=".">
+  <!--Load local and user build preferences-->
+
+  <property file="build.properties">
+  </property>
+  <property file="${user.home}/build.properties">
+  </property>
+  <!--Build properties-->
+
+  <property name="defaulttargetdir" value="${basedir}/target">
+  </property>
+  <property name="libdir" value="${user.home}/.maven/repository">
+  </property>
+  <property name="classesdir" value="${basedir}/target/classes">
+  </property>
+  <property name="testclassesdir" value="${basedir}/target/test-classes">
+  </property>
+  <property name="testreportdir" value="${basedir}/target/test-reports">
+  </property>
+  <property name="distdir" value="${basedir}/dist">
+  </property>
+  <property name="javadocdir" value="${basedir}/dist/docs/api">
+  </property>
+  <property name="final.name" value="joda-time-hibernate-1.0">
+  </property>
+  <property name="proxy.host" value="">
+  </property>
+  <property name="proxy.port" value="">
+  </property>
+  <property name="proxy.username" value="">
+  </property>
+  <property name="proxy.password" value="">
+  </property>
+  <path id="build.classpath">
+    <pathelement location="${libdir}/joda-time/jars/joda-time-1.0.jar">
+    </pathelement>
+    <pathelement location="${libdir}/hibernate/jars/hibernate-3.0.5.jar">
+    </pathelement>
+    <pathelement location="${libdir}/commons-logging/jars/commons-logging-api-1.0.4.jar">
+    </pathelement>
+    <pathelement location="${libdir}/commons-collections/jars/commons-collections-3.1.jar">
+    </pathelement>
+    <pathelement location="${libdir}/hsqldb/jars/hsqldb-1.7.3.3.jar">
+    </pathelement>
+    <pathelement location="${libdir}/ehcache/jars/ehcache-1.1.jar">
+    </pathelement>
+    <pathelement location="${libdir}/dom4j/jars/dom4j-1.6.jar">
+    </pathelement>
+    <pathelement location="${libdir}/cglib/jars/cglib-full-2.0.2.jar">
+    </pathelement>
+    <pathelement location="${libdir}/jta/jars/jta-1_0_1B-classes.zip">
+    </pathelement>
   </path>
-
-  <!-- Should all tests fail if one does? -->
-  <property name="test.failonerror"        value="true"/>
-
-  <!-- The test runner to execute -->
-  <property name="test.runner"             value="junit.textui.TestRunner"/>
-
-
-<!-- ====================================================================== -->
-<!-- ========== Executable Targets ======================================== -->
-<!-- ====================================================================== -->
-
-  <target name="clean"
-          description="Clean build and distribution directories">
-    <delete dir="${build}"/>
-  </target>
-
-<!-- ====================================================================== -->
-
-  <target name="init"
-          description="Initialize and evaluate conditionals">
-    <echo message="-------- ${component.name} ${component.version} --------"/>
-    <filter token="name"                  value="${component.name}"/>
-    <filter token="package"               value="${component.package}"/>
-    <filter token="version"               value="${component.version}"/>
-    <available property="junit.ant" classname="junit.framework.Test"/>
-    <available property="junit.present" file="${junit.jar}"/>
-  </target>
-
-<!-- ====================================================================== -->
-
-  <target name="getjunit" unless="junit.present">
-    <echo message="Getting junit from http://www.ibiblio.org/maven/junit"/>
-    <setproxy />
-    <mkdir dir="${lib}"/>
-    <get dest="${junit.jar}" usetimestamp="true" ignoreerrors="true" src="http://www.ibiblio.org/maven/junit/jars/junit-3.8.1.jar" />
-  </target>
-
-<!-- ====================================================================== -->
-
-  <target name="installjunit" unless="junit.ant">
-    <echo message="Installing junit in ${ant.home}/lib"/>
-  	<copy file="${junit.jar}" todir="${ant.home}/lib" />
-    <echo message="***************************************************************"/>
-    <echo message="*  A copy of junit has been installed in your ant directory   *"/>
-    <echo message="*                                                             *"/>
-    <echo message="* You will need to restart the ant build to pickup the change *"/>
-    <echo message="***************************************************************"/>
-  	<fail message="Please restart ant"/>
+  <target name="init" description="o Initializes some properties">
+    <mkdir dir="${libdir}">
+    </mkdir>
+    <condition property="noget">
+      <equals arg2="only" arg1="${build.sysclasspath}">
+      </equals>
+    </condition>
+    <!--Test if JUNIT is present in ANT classpath-->
+
+    <available property="Junit.present" classname="junit.framework.Test">
+    </available>
+    <!--Test if user defined a proxy-->
+
+    <condition property="useProxy">
+      <and>
+        <isset property="proxy.host">
+        </isset>
+        <not>
+          <equals trim="true" arg2="" arg1="${proxy.host}">
+          </equals>
+        </not>
+      </and>
+    </condition>
   </target>
-
-<!-- ====================================================================== -->
-
-  <target name="prepare" depends="init,getjunit,installjunit"
-          description="Prepare build directory">
-    <mkdir dir="${build}"/>
-    <mkdir dir="${build.classes}"/>
-    <mkdir dir="${build.conf}"/>
-  </target>
-
-<!-- ====================================================================== -->
-
-  <target name="static" depends="prepare"
-          description="Copy static files to build directory">
-    <tstamp/>
-    <copy todir="${build.conf}" filtering="on">
-      <fileset dir="${conf.home}" includes="*.MF"/>
-    </copy>
-  </target>
-
-<!-- ====================================================================== -->
-
-  <target name="compile" depends="static" description="Compile shareable components">
-    <javac  srcdir="${source.home}"
-           destdir="${build.classes}"
-             debug="${compile.debug}"
-       deprecation="${compile.deprecation}"
-          optimize="${compile.optimize}">
-      <classpath refid="compile.classpath"/>
-    </javac>
-  </target>
-
-<!-- ====================================================================== -->
-
-  <target name="compile.tests" depends="compile"
-          description="Compile unit test cases">
-    <mkdir dir="${build.tests}"/>
-    <javac  srcdir="${test.home}"
-           destdir="${build.tests}"
-             debug="${compile.debug}"
-       deprecation="${compile.deprecation}"
-          optimize="${compile.optimize}">
-      <classpath refid="test.classpath"/>
+  <target name="compile" description="o Compile the code" depends="get-deps">
+    <mkdir dir="${classesdir}">
+    </mkdir>
+    <javac destdir="${classesdir}" deprecation="true" debug="true" optimize="false" excludes="**/package.html">
+      <src>
+        <pathelement location="${basedir}/src/java">
+        </pathelement>
+      </src>
+      <classpath refid="build.classpath">
+      </classpath>
     </javac>
-    <copy    todir="${build.tests}" filtering="on">
-      <fileset dir="${test.home}" excludes="**/*.java"/>
-    </copy>
-  </target>
-
-<!-- ====================================================================== -->
-
-  <target name="all" depends="clean,compile"
-          description="Clean and compile all components"/>
-
-<!-- ====================================================================== -->
-
-  <target name="javadoc" depends="compile"
-          description="Create component Javadoc documentation">
-    <mkdir      dir="${build.docs}"/>
-    <javadoc sourcepath="${source.home}"
-                destdir="${build.docs}"
-           packagenames="org.joda.time.contrib.*"
-                 author="true"
-                private="false"
-                package="false"
-                version="true"
-                    use="yes"
-             splitindex="yes"
-               doctitle="&lt;h1&gt;${component.title}&lt;/h1&gt;"
-            windowtitle="${component.title} (Version ${component.version})"
-                 bottom="Copyright (c) 2001-2005 - Joda.org">
-      <classpath refid="compile.classpath"/>
-    </javadoc>
   </target>
-
-<!-- ====================================================================== -->
-
-  <target name="jar" depends="compile"
-          description="Create jar">
-    <mkdir      dir="${build.classes}/META-INF"/>
-    <copy      file="LICENSE.txt"
-             tofile="${build.classes}/META-INF/LICENSE.txt"/>
-    <copy      file="NOTICE.txt"
-             tofile="${build.classes}/META-INF/NOTICE.txt"/>
-    <jar    jarfile="${build.jarname.full}"
-            basedir="${build.classes}"
-           manifest="${build.conf}/MANIFEST.MF">
+  <target name="jar" description="o Create the jar" depends="compile,test">
+    <jar jarfile="${defaulttargetdir}/${final.name}.jar" excludes="**/package.html" basedir="${classesdir}">
     </jar>
   </target>
-
-<!-- ====================================================================== -->
-
-  <target name="dist" depends="compile,jar,test.jar,javadoc"
-          description="Create binary distribution">
-    <delete     dir="${build.dist.fullname}"/>
-    <mkdir      dir="${build.dist.fullname}"/>
-    
-	<!-- binary -->
-    <copy      file="LICENSE.txt" todir="${build.dist.fullname}"/>
-    <copy      file="NOTICE.txt" todir="${build.dist.fullname}"/>
-    <copy      file="RELEASE-NOTES.txt" todir="${build.dist.fullname}"/>
-    <copy      file="${build.jarname.full}"
-              todir="${build.dist.fullname}"/>
-    <copy     todir="${build.dist.fullname}">
-      <fileset  dir="${build}" includes="docs/**/*.*"/>
-    </copy>
-    
-	<tar   destfile="${build.fullname}.tar" basedir="${build.dist}"/>
-	<gzip   zipfile="${build.fullname}.tar.gz" src="${build.fullname}.tar"/>
-	<delete    file="${build.fullname}.tar"/>
-	<fixcrlf srcdir="${build.dist}" eol="crlf" includes="**/*.txt"/>
-	<zip   destfile="${build.fullname}.zip" basedir="${build.dist}"/>
-	
-	<!-- source -->
-	<delete     dir="${build.dist.fullname}/docs"/>
-    <copy      file="${build.jarname.tzcompiler}"
-              todir="${build.dist.fullname}"/>
-    <copy     todir="${build.dist.fullname}">
-      <fileset  dir="." includes="${source}/**/*" excludes="CVS/**/*"/>
-    </copy>
-    <copy     todir="${build.dist.fullname}">
-      <fileset  dir="." includes="${xdocs}/**/*" excludes="CVS/**/*"/>
+  <target name="clean" description="o Clean up the generated directories">
+    <delete dir="${defaulttargetdir}">
+    </delete>
+    <delete dir="${distdir}">
+    </delete>
+  </target>
+  <target name="dist" description="o Create a distribution" depends="jar, javadoc">
+    <mkdir dir="dist">
+    </mkdir>
+    <copy todir="dist">
+      <fileset dir="${defaulttargetdir}" includes="*.jar">
+      </fileset>
+      <fileset dir="${basedir}" includes="LICENSE*, README*">
+      </fileset>
     </copy>
-	<delete     dir="${build.dist.fullname}/src/tzdata"/>
-    <copy      file="build.xml" todir="${build.dist.fullname}"/>
-    <copy      file="maven.xml" todir="${build.dist.fullname}"/>
-    <copy      file="project.xml" todir="${build.dist.fullname}"/>
-    <copy      file="project.properties" todir="${build.dist.fullname}"/>
-    <copy      file="checkstyle.xml" todir="${build.dist.fullname}"/>
-    <copy      file="ToDo.txt" todir="${build.dist.fullname}"/>
-	
-	<tar   destfile="${build.fullname}-src.tar" basedir="${build.dist}"/>
-	<gzip   zipfile="${build.fullname}-src.tar.gz" src="${build.fullname}-src.tar"/>
-	<delete    file="${build.fullname}-src.tar"/>
-	<fixcrlf srcdir="${build.dist}" eol="crlf" includes="**/*.txt"/>
-	<zip   destfile="${build.fullname}-src.zip" basedir="${build.dist}"/>
   </target>
-
-<!-- ====================================================================== -->
-
-  <target name="test"  depends="compile.tests, test.time"
-          description="Run all unit test cases">
+  <target name="test" description="o Run the test cases" if="test.failure" depends="internal-test">
+    <fail message="There were test failures.">
+    </fail>
   </target>
-
-  <target name="test.time" depends="compile.tests">
-    <echo message="Running time tests ..."/>
-    <junit printsummary="yes" haltonfailure="yes">
-      <formatter type="plain" usefile="false" />
+  <target name="internal-test" if="Junit.present" depends="junit-present,compile-tests">
+    <mkdir dir="${testreportdir}">
+    </mkdir>
+    <junit dir="${basedir}" failureproperty="test.failure" printSummary="yes" fork="true" haltonerror="true">
+      <sysproperty key="basedir" value=".">
+      </sysproperty>
+      <formatter type="xml">
+      </formatter>
+      <formatter usefile="false" type="plain">
+      </formatter>
       <classpath>
-        <pathelement location="${build.classes}"/>
-        <pathelement location="${build.tests}"/>
-        <pathelement location="${build.tz}"/>
-        <pathelement path="${java.class.path}"/>
+        <path refid="build.classpath">
+        </path>
+        <pathelement path="${testclassesdir}">
+        </pathelement>
+        <pathelement path="${classesdir}">
+        </pathelement>
       </classpath>
-
-      <batchtest fork="yes">
-        <fileset dir="${test.home}">
-          <include name="**/TestAll.java"/>
+      <batchtest todir="${testreportdir}">
+        <fileset dir="${basedir}/src/test">
+          <include name="org/joda/time/contrib/hibernate/**/Test*.java">
+          </include>
         </fileset>
       </batchtest>
     </junit>
   </target>
-
-  <!-- don't depend on jar, so we can test jar built on another JDK version -->
-  <target name="test.jar" depends="compile.tests">
-    <echo message="Running time tests from jar ..."/>
-    <junit printsummary="yes" haltonfailure="yes">
-      <formatter type="plain" usefile="false" />
+  <target name="junit-present" unless="Junit.present" depends="init">
+    <echo>================================= WARNING ================================</echo>
+    <echo>Junit isn't present in your ${ANT_HOME}/lib directory. Tests not executed.</echo>
+    <echo>==========================================================================</echo>
+  </target>
+  <target name="compile-tests" if="Junit.present" depends="junit-present,compile">
+    <mkdir dir="${testclassesdir}">
+    </mkdir>
+    <javac destdir="${testclassesdir}" deprecation="true" debug="true" optimize="false" excludes="**/package.html">
+      <src>
+        <pathelement location="${basedir}/src/test">
+        </pathelement>
+      </src>
       <classpath>
-        <pathelement location="${build.jarname.full}"/>
-        <pathelement location="${build.jarname.tzcompiler}"/>
-        <pathelement location="${build.tests}"/>
-        <pathelement location="${junit.jar}"/>
-        <pathelement path="${java.class.path}"/>
+        <path refid="build.classpath">
+        </path>
+        <pathelement path="${classesdir}">
+        </pathelement>
       </classpath>
-
-      <batchtest fork="yes">
-        <fileset dir="${test.home}">
-          <include name="**/TestAll.java"/>
-        </fileset>
-      </batchtest>
-    </junit>
+    </javac>
   </target>
-
-</project>
+  <target name="javadoc" description="o Generate javadoc" depends="get-deps">
+    <mkdir dir="${javadocdir}">
+    </mkdir>
+    <tstamp>
+      <format pattern="2002-yyyy" property="year">
+      </format>
+    </tstamp>
+    <property name="copyright" value="Copyright &amp;copy;  Joda.org. All Rights Reserved.">
+    </property>
+    <property name="title" value="Joda time Hibernate support 1.0 API">
+    </property>
+    <javadoc use="true" private="true" destdir="${javadocdir}" author="true" version="true" sourcepath="${basedir}/src/java" packagenames="org.joda.time.contrib.hibernate.*">
+      <classpath>
+        <path refid="build.classpath">
+        </path>
+      </classpath>
+    </javadoc>
+  </target>
+  <target name="get-dep-joda-time.jar" description="o Download the dependency : joda-time.jar" unless="joda-time.jar" depends="init,setProxy,noProxy,get-custom-dep-joda-time.jar">
+    <mkdir dir="${libdir}/joda-time/jars/">
+    </mkdir>
+    <get dest="${libdir}/joda-time/jars/joda-time-1.0.jar" usetimestamp="true" ignoreerrors="true" src="http://www.ibiblio.org/maven/joda-time/jars/joda-time-1.0.jar">
+    </get>
+  </target>
+  <target name="get-custom-dep-joda-time.jar" if="joda-time.jar" depends="init,setProxy,noProxy">
+    <mkdir dir="${libdir}/joda-time/jars/">
+    </mkdir>
+    <get dest="${libdir}/joda-time/jars/joda-time-1.0.jar" usetimestamp="true" ignoreerrors="true" src="${joda-time.jar}">
+    </get>
+  </target>
+  <target name="get-dep-hibernate.jar" description="o Download the dependency : hibernate.jar" unless="hibernate.jar" depends="init,setProxy,noProxy,get-custom-dep-hibernate.jar">
+    <mkdir dir="${libdir}/hibernate/jars/">
+    </mkdir>
+    <get dest="${libdir}/hibernate/jars/hibernate-3.0.5.jar" usetimestamp="true" ignoreerrors="true" src="http://www.ibiblio.org/maven/hibernate/jars/hibernate-3.0.5.jar">
+    </get>
+  </target>
+  <target name="get-custom-dep-hibernate.jar" if="hibernate.jar" depends="init,setProxy,noProxy">
+    <mkdir dir="${libdir}/hibernate/jars/">
+    </mkdir>
+    <get dest="${libdir}/hibernate/jars/hibernate-3.0.5.jar" usetimestamp="true" ignoreerrors="true" src="${hibernate.jar}">
+    </get>
+  </target>
+  <target name="get-dep-commons-logging-api.jar" description="o Download the dependency : commons-logging-api.jar" unless="commons-logging-api.jar" depends="init,setProxy,noProxy,get-custom-dep-commons-logging-api.jar">
+    <mkdir dir="${libdir}/commons-logging/jars/">
+    </mkdir>
+    <get dest="${libdir}/commons-logging/jars/commons-logging-api-1.0.4.jar" usetimestamp="true" ignoreerrors="true" src="http://www.ibiblio.org/maven/commons-logging/jars/commons-logging-api-1.0.4.jar">
+    </get>
+  </target>
+  <target name="get-custom-dep-commons-logging-api.jar" if="commons-logging-api.jar" depends="init,setProxy,noProxy">
+    <mkdir dir="${libdir}/commons-logging/jars/">
+    </mkdir>
+    <get dest="${libdir}/commons-logging/jars/commons-logging-api-1.0.4.jar" usetimestamp="true" ignoreerrors="true" src="${commons-logging-api.jar}">
+    </get>
+  </target>
+  <target name="get-dep-commons-collections.jar" description="o Download the dependency : commons-collections.jar" unless="commons-collections.jar" depends="init,setProxy,noProxy,get-custom-dep-commons-collections.jar">
+    <mkdir dir="${libdir}/commons-collections/jars/">
+    </mkdir>
+    <get dest="${libdir}/commons-collections/jars/commons-collections-3.1.jar" usetimestamp="true" ignoreerrors="true" src="http://www.ibiblio.org/maven/commons-collections/jars/commons-collections-3.1.jar">
+    </get>
+  </target>
+  <target name="get-custom-dep-commons-collections.jar" if="commons-collections.jar" depends="init,setProxy,noProxy">
+    <mkdir dir="${libdir}/commons-collections/jars/">
+    </mkdir>
+    <get dest="${libdir}/commons-collections/jars/commons-collections-3.1.jar" usetimestamp="true" ignoreerrors="true" src="${commons-collections.jar}">
+    </get>
+  </target>
+  <target name="get-dep-hsqldb.jar" description="o Download the dependency : hsqldb.jar" unless="hsqldb.jar" depends="init,setProxy,noProxy,get-custom-dep-hsqldb.jar">
+    <mkdir dir="${libdir}/hsqldb/jars/">
+    </mkdir>
+    <get dest="${libdir}/hsqldb/jars/hsqldb-1.7.3.3.jar" usetimestamp="true" ignoreerrors="true" src="http://www.ibiblio.org/maven/hsqldb/jars/hsqldb-1.7.3.3.jar">
+    </get>
+  </target>
+  <target name="get-custom-dep-hsqldb.jar" if="hsqldb.jar" depends="init,setProxy,noProxy">
+    <mkdir dir="${libdir}/hsqldb/jars/">
+    </mkdir>
+    <get dest="${libdir}/hsqldb/jars/hsqldb-1.7.3.3.jar" usetimestamp="true" ignoreerrors="true" src="${hsqldb.jar}">
+    </get>
+  </target>
+  <target name="get-dep-ehcache.jar" description="o Download the dependency : ehcache.jar" unless="ehcache.jar" depends="init,setProxy,noProxy,get-custom-dep-ehcache.jar">
+    <mkdir dir="${libdir}/ehcache/jars/">
+    </mkdir>
+    <get dest="${libdir}/ehcache/jars/ehcache-1.1.jar" usetimestamp="true" ignoreerrors="true" src="http://www.ibiblio.org/maven/ehcache/jars/ehcache-1.1.jar">
+    </get>
+  </target>
+  <target name="get-custom-dep-ehcache.jar" if="ehcache.jar" depends="init,setProxy,noProxy">
+    <mkdir dir="${libdir}/ehcache/jars/">
+    </mkdir>
+    <get dest="${libdir}/ehcache/jars/ehcache-1.1.jar" usetimestamp="true" ignoreerrors="true" src="${ehcache.jar}">
+    </get>
+  </target>
+  <target name="get-dep-dom4j.jar" description="o Download the dependency : dom4j.jar" unless="dom4j.jar" depends="init,setProxy,noProxy,get-custom-dep-dom4j.jar">
+    <mkdir dir="${libdir}/dom4j/jars/">
+    </mkdir>
+    <get dest="${libdir}/dom4j/jars/dom4j-1.6.jar" usetimestamp="true" ignoreerrors="true" src="http://www.ibiblio.org/maven/dom4j/jars/dom4j-1.6.jar">
+    </get>
+  </target>
+  <target name="get-custom-dep-dom4j.jar" if="dom4j.jar" depends="init,setProxy,noProxy">
+    <mkdir dir="${libdir}/dom4j/jars/">
+    </mkdir>
+    <get dest="${libdir}/dom4j/jars/dom4j-1.6.jar" usetimestamp="true" ignoreerrors="true" src="${dom4j.jar}">
+    </get>
+  </target>
+  <target name="get-dep-cglib.jar" description="o Download the dependency : cglib.jar" unless="cglib.jar" depends="init,setProxy,noProxy,get-custom-dep-cglib.jar">
+    <mkdir dir="${libdir}/cglib/jars/">
+    </mkdir>
+    <get dest="${libdir}/cglib/jars/cglib-full-2.0.2.jar" usetimestamp="true" ignoreerrors="true" src="http://www.ibiblio.org/maven/cglib/jars/cglib-full-2.0.2.jar">
+    </get>
+  </target>
+  <target name="get-custom-dep-cglib.jar" if="cglib.jar" depends="init,setProxy,noProxy">
+    <mkdir dir="${libdir}/cglib/jars/">
+    </mkdir>
+    <get dest="${libdir}/cglib/jars/cglib-full-2.0.2.jar" usetimestamp="true" ignoreerrors="true" src="${cglib.jar}">
+    </get>
+  </target>
+  <target name="get-dep-jta.jar" description="o Download the dependency : jta.jar" unless="jta.jar" depends="init,setProxy,noProxy,get-custom-dep-jta.jar">
+    <mkdir dir="${libdir}/jta/jars/">
+    </mkdir>
+    <get dest="${libdir}/jta/jars/jta-1_0_1B-classes.zip" usetimestamp="true" ignoreerrors="true" src="http://www.ibiblio.org/maven/jta/jars/jta-1_0_1B-classes.zip">
+    </get>
+  </target>
+  <target name="get-custom-dep-jta.jar" if="jta.jar" depends="init,setProxy,noProxy">
+    <mkdir dir="${libdir}/jta/jars/">
+    </mkdir>
+    <get dest="${libdir}/jta/jars/jta-1_0_1B-classes.zip" usetimestamp="true" ignoreerrors="true" src="${jta.jar}">
+    </get>
+  </target>
+  <target name="get-deps" unless="noget" depends="get-dep-joda-time.jar,get-dep-hibernate.jar,get-dep-commons-logging-api.jar,get-dep-commons-collections.jar,get-dep-hsqldb.jar,get-dep-ehcache.jar,get-dep-dom4j.jar,get-dep-cglib.jar,get-dep-jta.jar">
+  </target>
+  <target name="setProxy" if="useProxy" depends="init">
+    <!--Proxy settings works only with a JDK 1.2 and higher.-->
+
+    <echo>Proxy used :</echo>
+    <echo>Proxy host [${proxy.host}]</echo>
+    <echo>Proxy port [${proxy.port}]</echo>
+    <echo>Proxy user [${proxy.username}]</echo>
+    <setproxy proxyuser="${proxy.username}" proxyport="${proxy.port}" proxypassword="${proxy.password}" proxyhost="${proxy.host}">
+    </setproxy>
+  </target>
+  <target name="noProxy" unless="useProxy" depends="init">
+    <echo>Proxy not used.</echo>
+  </target>
+  <target name="install-maven">
+    <get dest="${user.home}/maven-install-latest.jar" usetimestamp="true" src="${repo}/maven/maven-install-latest.jar">
+    </get>
+    <unjar dest="${maven.home}" src="${user.home}/maven-install-latest.jar">
+    </unjar>
+  </target>
+</project>
\ No newline at end of file

From 3932b491845e357d3dbe78aa6354debebe1e75a7 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 19 Jul 2005 00:16:37 +0000
Subject: [PATCH 086/124] Include NOTICE.txt in jar file

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@818 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/hibernate/project.xml | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/JodaTimeContrib/hibernate/project.xml b/JodaTimeContrib/hibernate/project.xml
index 35e67a0e4..d7bd8129f 100644
--- a/JodaTimeContrib/hibernate/project.xml
+++ b/JodaTimeContrib/hibernate/project.xml
@@ -131,6 +131,14 @@
         <include>org/joda/time/contrib/hibernate/**/Test*.java</include>
       </includes>
     </unitTest>
+    <resources>
+      <resource>
+        <targetPath>meta-inf</targetPath>
+        <includes>
+          <include>NOTICE.txt</include>
+        </includes>
+      </resource>
+    </resources>
   </build>
 
   <reports>

From 59b30b992ea25f0106faf1d9cbbdab9313724eb1 Mon Sep 17 00:00:00 2001
From: Jim Newsham <jim.newsham@gmail.com>
Date: Tue, 19 Jul 2005 00:59:46 +0000
Subject: [PATCH 087/124] initial commit of joda jsp tags

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@819 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/jsptags/LICENSE.txt           | 201 ++++++
 JodaTimeContrib/jsptags/NOTICE.txt            |   7 +
 JodaTimeContrib/jsptags/README.txt            |  96 +++
 JodaTimeContrib/jsptags/build.xml             |  49 ++
 JodaTimeContrib/jsptags/src/conf/joda.tld     | 231 ++++++
 .../contrib/jsptag/DateTimeZoneSupport.java   | 134 ++++
 .../time/contrib/jsptag/DateTimeZoneTag.java  |  35 +
 .../time/contrib/jsptag/FormatSupport.java    | 147 ++++
 .../joda/time/contrib/jsptag/FormatTag.java   |  82 +++
 .../jsptag/JodaTagLibraryValidator.java       | 444 ++++++++++++
 .../contrib/jsptag/ParseDateTimeSupport.java  | 155 ++++
 .../time/contrib/jsptag/ParseDateTimeTag.java |  81 +++
 .../joda/time/contrib/jsptag/Resources.java   | 127 ++++
 .../time/contrib/jsptag/Resources.properties  | 304 ++++++++
 .../contrib/jsptag/Resources_ja.properties    | 297 ++++++++
 .../jsptag/SetDateTimeZoneSupport.java        |  90 +++
 .../contrib/jsptag/SetDateTimeZoneTag.java    |  35 +
 .../org/joda/time/contrib/jsptag/Util.java    | 662 ++++++++++++++++++
 18 files changed, 3177 insertions(+)
 create mode 100644 JodaTimeContrib/jsptags/LICENSE.txt
 create mode 100644 JodaTimeContrib/jsptags/NOTICE.txt
 create mode 100644 JodaTimeContrib/jsptags/README.txt
 create mode 100644 JodaTimeContrib/jsptags/build.xml
 create mode 100644 JodaTimeContrib/jsptags/src/conf/joda.tld
 create mode 100644 JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/DateTimeZoneSupport.java
 create mode 100644 JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/DateTimeZoneTag.java
 create mode 100644 JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/FormatSupport.java
 create mode 100644 JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/FormatTag.java
 create mode 100644 JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/JodaTagLibraryValidator.java
 create mode 100644 JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/ParseDateTimeSupport.java
 create mode 100644 JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/ParseDateTimeTag.java
 create mode 100644 JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/Resources.java
 create mode 100644 JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/Resources.properties
 create mode 100644 JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/Resources_ja.properties
 create mode 100644 JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/SetDateTimeZoneSupport.java
 create mode 100644 JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/SetDateTimeZoneTag.java
 create mode 100644 JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/Util.java

diff --git a/JodaTimeContrib/jsptags/LICENSE.txt b/JodaTimeContrib/jsptags/LICENSE.txt
new file mode 100644
index 000000000..f49a4e16e
--- /dev/null
+++ b/JodaTimeContrib/jsptags/LICENSE.txt
@@ -0,0 +1,201 @@
+                                 Apache License
+                           Version 2.0, January 2004
+                        http://www.apache.org/licenses/
+
+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+   1. Definitions.
+
+      "License" shall mean the terms and conditions for use, reproduction,
+      and distribution as defined by Sections 1 through 9 of this document.
+
+      "Licensor" shall mean the copyright owner or entity authorized by
+      the copyright owner that is granting the License.
+
+      "Legal Entity" shall mean the union of the acting entity and all
+      other entities that control, are controlled by, or are under common
+      control with that entity. For the purposes of this definition,
+      "control" means (i) the power, direct or indirect, to cause the
+      direction or management of such entity, whether by contract or
+      otherwise, or (ii) ownership of fifty percent (50%) or more of the
+      outstanding shares, or (iii) beneficial ownership of such entity.
+
+      "You" (or "Your") shall mean an individual or Legal Entity
+      exercising permissions granted by this License.
+
+      "Source" form shall mean the preferred form for making modifications,
+      including but not limited to software source code, documentation
+      source, and configuration files.
+
+      "Object" form shall mean any form resulting from mechanical
+      transformation or translation of a Source form, including but
+      not limited to compiled object code, generated documentation,
+      and conversions to other media types.
+
+      "Work" shall mean the work of authorship, whether in Source or
+      Object form, made available under the License, as indicated by a
+      copyright notice that is included in or attached to the work
+      (an example is provided in the Appendix below).
+
+      "Derivative Works" shall mean any work, whether in Source or Object
+      form, that is based on (or derived from) the Work and for which the
+      editorial revisions, annotations, elaborations, or other modifications
+      represent, as a whole, an original work of authorship. For the purposes
+      of this License, Derivative Works shall not include works that remain
+      separable from, or merely link (or bind by name) to the interfaces of,
+      the Work and Derivative Works thereof.
+
+      "Contribution" shall mean any work of authorship, including
+      the original version of the Work and any modifications or additions
+      to that Work or Derivative Works thereof, that is intentionally
+      submitted to Licensor for inclusion in the Work by the copyright owner
+      or by an individual or Legal Entity authorized to submit on behalf of
+      the copyright owner. For the purposes of this definition, "submitted"
+      means any form of electronic, verbal, or written communication sent
+      to the Licensor or its representatives, including but not limited to
+      communication on electronic mailing lists, source code control systems,
+      and issue tracking systems that are managed by, or on behalf of, the
+      Licensor for the purpose of discussing and improving the Work, but
+      excluding communication that is conspicuously marked or otherwise
+      designated in writing by the copyright owner as "Not a Contribution."
+
+      "Contributor" shall mean Licensor and any individual or Legal Entity
+      on behalf of whom a Contribution has been received by Licensor and
+      subsequently incorporated within the Work.
+
+   2. Grant of Copyright License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      copyright license to reproduce, prepare Derivative Works of,
+      publicly display, publicly perform, sublicense, and distribute the
+      Work and such Derivative Works in Source or Object form.
+
+   3. Grant of Patent License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      (except as stated in this section) patent license to make, have made,
+      use, offer to sell, sell, import, and otherwise transfer the Work,
+      where such license applies only to those patent claims licensable
+      by such Contributor that are necessarily infringed by their
+      Contribution(s) alone or by combination of their Contribution(s)
+      with the Work to which such Contribution(s) was submitted. If You
+      institute patent litigation against any entity (including a
+      cross-claim or counterclaim in a lawsuit) alleging that the Work
+      or a Contribution incorporated within the Work constitutes direct
+      or contributory patent infringement, then any patent licenses
+      granted to You under this License for that Work shall terminate
+      as of the date such litigation is filed.
+
+   4. Redistribution. You may reproduce and distribute copies of the
+      Work or Derivative Works thereof in any medium, with or without
+      modifications, and in Source or Object form, provided that You
+      meet the following conditions:
+
+      (a) You must give any other recipients of the Work or
+          Derivative Works a copy of this License; and
+
+      (b) You must cause any modified files to carry prominent notices
+          stating that You changed the files; and
+
+      (c) You must retain, in the Source form of any Derivative Works
+          that You distribute, all copyright, patent, trademark, and
+          attribution notices from the Source form of the Work,
+          excluding those notices that do not pertain to any part of
+          the Derivative Works; and
+
+      (d) If the Work includes a "NOTICE" text file as part of its
+          distribution, then any Derivative Works that You distribute must
+          include a readable copy of the attribution notices contained
+          within such NOTICE file, excluding those notices that do not
+          pertain to any part of the Derivative Works, in at least one
+          of the following places: within a NOTICE text file distributed
+          as part of the Derivative Works; within the Source form or
+          documentation, if provided along with the Derivative Works; or,
+          within a display generated by the Derivative Works, if and
+          wherever such third-party notices normally appear. The contents
+          of the NOTICE file are for informational purposes only and
+          do not modify the License. You may add Your own attribution
+          notices within Derivative Works that You distribute, alongside
+          or as an addendum to the NOTICE text from the Work, provided
+          that such additional attribution notices cannot be construed
+          as modifying the License.
+
+      You may add Your own copyright statement to Your modifications and
+      may provide additional or different license terms and conditions
+      for use, reproduction, or distribution of Your modifications, or
+      for any such Derivative Works as a whole, provided Your use,
+      reproduction, and distribution of the Work otherwise complies with
+      the conditions stated in this License.
+
+   5. Submission of Contributions. Unless You explicitly state otherwise,
+      any Contribution intentionally submitted for inclusion in the Work
+      by You to the Licensor shall be under the terms and conditions of
+      this License, without any additional terms or conditions.
+      Notwithstanding the above, nothing herein shall supersede or modify
+      the terms of any separate license agreement you may have executed
+      with Licensor regarding such Contributions.
+
+   6. Trademarks. This License does not grant permission to use the trade
+      names, trademarks, service marks, or product names of the Licensor,
+      except as required for reasonable and customary use in describing the
+      origin of the Work and reproducing the content of the NOTICE file.
+
+   7. Disclaimer of Warranty. Unless required by applicable law or
+      agreed to in writing, Licensor provides the Work (and each
+      Contributor provides its Contributions) on an "AS IS" BASIS,
+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+      implied, including, without limitation, any warranties or conditions
+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
+      PARTICULAR PURPOSE. You are solely responsible for determining the
+      appropriateness of using or redistributing the Work and assume any
+      risks associated with Your exercise of permissions under this License.
+
+   8. Limitation of Liability. In no event and under no legal theory,
+      whether in tort (including negligence), contract, or otherwise,
+      unless required by applicable law (such as deliberate and grossly
+      negligent acts) or agreed to in writing, shall any Contributor be
+      liable to You for damages, including any direct, indirect, special,
+      incidental, or consequential damages of any character arising as a
+      result of this License or out of the use or inability to use the
+      Work (including but not limited to damages for loss of goodwill,
+      work stoppage, computer failure or malfunction, or any and all
+      other commercial damages or losses), even if such Contributor
+      has been advised of the possibility of such damages.
+
+   9. Accepting Warranty or Additional Liability. While redistributing
+      the Work or Derivative Works thereof, You may choose to offer,
+      and charge a fee for, acceptance of support, warranty, indemnity,
+      or other liability obligations and/or rights consistent with this
+      License. However, in accepting such obligations, You may act only
+      on Your own behalf and on Your sole responsibility, not on behalf
+      of any other Contributor, and only if You agree to indemnify,
+      defend, and hold each Contributor harmless for any liability
+      incurred by, or claims asserted against, such Contributor by reason
+      of your accepting any such warranty or additional liability.
+
+   END OF TERMS AND CONDITIONS
+
+   APPENDIX: How to apply the Apache License to your work.
+
+      To apply the Apache License to your work, attach the following
+      boilerplate notice, with the fields enclosed by brackets "[]"
+      replaced with your own identifying information. (Don't include
+      the brackets!)  The text should be enclosed in the appropriate
+      comment syntax for the file format. We also recommend that a
+      file or class name and description of purpose be included on the
+      same "printed page" as the copyright notice for easier
+      identification within third-party archives.
+
+   Copyright [yyyy] [name of copyright owner]
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
\ No newline at end of file
diff --git a/JodaTimeContrib/jsptags/NOTICE.txt b/JodaTimeContrib/jsptags/NOTICE.txt
new file mode 100644
index 000000000..052aaf0fc
--- /dev/null
+++ b/JodaTimeContrib/jsptags/NOTICE.txt
@@ -0,0 +1,7 @@
+=============================================================================
+= NOTICE file corresponding to section 4d of the Apache License Version 2.0 =
+=============================================================================
+This product includes software developed by
+The Apache Software Foundation (http://www.apache.org/).
+This product includes software developed by
+Joda.org (http://www.joda.org/).
diff --git a/JodaTimeContrib/jsptags/README.txt b/JodaTimeContrib/jsptags/README.txt
new file mode 100644
index 000000000..b88da2c4d
--- /dev/null
+++ b/JodaTimeContrib/jsptags/README.txt
@@ -0,0 +1,96 @@
+Joda Time Tag Library
+---------------------
+
+About
+-----
+
+The Joda Time Tag Library is a custom tag library for formatting and parsing Joda dates in jsp pages.  This library works very similarly to the date-related tags in the jstl fmt library, so please refer to the documentation for that standard if you still have questions after reading this document.
+
+Unlike the fmt tags which work with java.util.Date and java.util.TimeZone objects, the Joda tags work with Joda DateTime, ReadableInstant, ReadablePartial, and DateTimeZone objects.  
+
+Build
+-----
+
+Build-time dependencies are Joda 1.0, the Servlet 2.4 API, the
+JSP 2.0 API, and JSTL 1.1 API.  Place these jars in the lib directory, then run "ant".
+
+Setup
+-----
+
+You'll need a servlet container which supports Servlet 2.4, JSP 2.0, JSTL 1.1.  Copy the joda-time-1.0.jar and joda-time-tags.jar to the WEB-INF/lib directory of your web application.  Declare the library as follows in your jsp pages:
+
+<%@taglib prefix="joda" uri="http://www.joda.org/joda/time/tags"%>
+
+Tags
+----
+
+FORMAT.  
+
+Example: 
+  <% pageContext.setAttribute("now", new org.joda.time.DateTime()); %>
+  <joda:format value="${now}" style="SM"/>
+
+Formats ReadableInstant (including DateTime) and ReadablePartial (including YearMonthDay and TimeOfDay) objects.  The var and scope attributes can be used to set the value of a variable instead of printing the result.  The time zone may be specified using an attribute, en enclosing <joda:dateTimeZone/> tag,  preceding <joda:timeZone/> tag, or via the "org.joda.time.dateTimeZone" scoped variable.
+
+Attributes:
+
+value (required).  Must be a ReadableInstant or ReadablePartial.
+var.  The scoped variable to set.
+scope.  The scope of the variable to set.
+locale.  The locale to use for formatting.
+style.  The style to use for formatting (see Joda format documentation for recognized style strings)
+pattern.  The pattern to use for formatting (see Joda format documentation for recognized pattern strings)
+dateTimeZone.  The time zone to use for formatting.
+
+
+PARSEDATETIME.
+
+Example: 
+  <joda:parseDateTime var="parsed" pattern="yy/M/d" value="05/11/19"/>
+  <joda:format value="${parsed}" style="L-"/>
+
+Parses a string into a DateTime object.  The var and scope attributes can be used to set the value of a variable instead of printing the result.  The time zone may be specified using an attribute, en enclosing <joda:dateTimeZone/> tag,  preceding <joda:timeZone/> tag, or via the "org.joda.time.dateTimeZone" scoped variable.
+
+Attributes:
+
+value (required; unless value is nested within tag).  Must be a string which can be parsed into a DateTime according to the parsing options specified.
+var.  The scoped variable to set.
+scope.  The scope of the variable to set.
+locale.  The locale to use for parsing.
+style.  The style to use for parsing (see Joda format documentation for recognized style strings)
+pattern.  The pattern to use for parsing (see Joda format documentation for recognized pattern strings)
+dateTimeZone.  The time zone to use for formatting.
+
+
+DATETIMEZONE.
+
+Example:
+  <% pageContext.setAttribute("now", new DateTime()); %>
+  <% pageContext.setAttribute("bkk", DateTimeZone.forID("Asia/Bangkok")); %>
+  <joda:dateTimeZone value="${bkk}">
+    <joda:format value="${datetime}"/>
+  </joda:dateTimeZone>
+
+Provides a default time zone to all <joda:format/> tags which are nested within it.  The <joda:format/> tag may override this value with an explicit dateTimeZone attribute.
+
+Attributes:
+
+value (required).  The default time zone for nested <joda:format/> tags to use.
+
+
+SETDATETIMEZONE.
+
+Example.
+  <% pageContext.setAttribute("now", new DateTime()); %>
+  <% pageContext.setAttribute("bkk", DateTimeZone.forID("Asia/Bangkok")); %>
+  <joda:dateTimeZone value="${bkk}"/>
+  <joda:format value="${datetime}"/>
+
+Sets the time zone object in the given scoped variable.  If var is not specified, it will be stored in a scoped variable called "org.joda.time.dateTimeZone".  The <joda:format/> tag will default to using a time zone stored under this name if it does not have a dateTimeZone attribute and is not nested within a <joda:dateTimeZone/> tag.
+
+Attributes:
+
+value (required).  The time zone to set.
+var.  The scoped variable to set.
+scope.  The scope of the variable to set.
+
diff --git a/JodaTimeContrib/jsptags/build.xml b/JodaTimeContrib/jsptags/build.xml
new file mode 100644
index 000000000..b1815ea5d
--- /dev/null
+++ b/JodaTimeContrib/jsptags/build.xml
@@ -0,0 +1,49 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<project name='jodatime-tags' default='dist'>
+ <property name="jodatime-tags.version" value="0.1"/>
+ <property name="build.dir" value="build"/>
+ <property name="lib.dir" value="lib"/>
+
+ <path id='compile-classpath'>
+  <fileset dir='${lib.dir}'>
+   <include name='*.jar'/>
+  </fileset>
+ </path>
+
+ <target name='compile'>
+  <mkdir dir='${build.dir}'/>
+  <javac srcdir='src/java' destdir='${build.dir}' 
+    classpathref='compile-classpath' debug='true'/>
+ </target>
+
+ <target name='clean'>
+  <delete dir='${build.dir}'/>
+ </target>
+
+ <target name='dist' depends='compile'>
+  <copy todir="${build.dir}">
+   <fileset dir="src/java">
+    <include name="**/*.properties"/>
+   </fileset>
+  </copy>
+
+  <mkdir dir='${build.dir}/META-INF'/>
+  <copy todir="${build.dir}/META-INF">
+   <fileset dir="src/conf">
+    <include name="*.tld"/>
+   </fileset>
+  </copy>
+
+  <jar jarfile="joda-time-tags.jar">
+   <fileset dir="${build.dir}"/>
+   <manifest>
+    <attribute name="Implementation-Title" value="Joda Time Tags"/>
+    <attribute name="Implementation-Version" value="${jodatime-tags.version}"/>
+   </manifest>         
+  </jar>        
+ </target>
+
+</project>
+    
+
diff --git a/JodaTimeContrib/jsptags/src/conf/joda.tld b/JodaTimeContrib/jsptags/src/conf/joda.tld
new file mode 100644
index 000000000..e3ccda6db
--- /dev/null
+++ b/JodaTimeContrib/jsptags/src/conf/joda.tld
@@ -0,0 +1,231 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<taglib xmlns="http://java.sun.com/xml/ns/j2ee"
+    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+    xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd"
+    version="2.0">
+    
+  <description>Joda Time Tag Library</description>
+  <display-name>Joda Time</display-name>
+  <tlib-version>1.1</tlib-version>
+  <short-name>joda</short-name>
+  <uri>http://www.joda.org/joda/time/tags</uri>
+
+  <validator>
+    <description>
+        Provides core validation features for JSTL tags.
+    </description>
+    <validator-class>
+        org.joda.time.contrib.jsptag.JodaTagLibraryValidator
+    </validator-class>
+  </validator>
+
+  <tag>
+    <description>
+        Specifies the time zone for any time formatting or parsing actions
+        nested in its body
+    </description>
+    <name>dateTimeZone</name>
+    <tag-class>org.joda.time.contrib.jsptag.DateTimeZoneTag</tag-class>
+    <body-content>JSP</body-content>
+    <attribute>
+        <description>
+The time zone. A String value is interpreted as
+a time zone ID. This may be one of the time zone
+IDs supported by the Joda. See
+org.joda.time.DateTimeZone for more information on
+supported time zone formats.
+        </description>
+        <name>value</name>
+        <required>true</required>
+        <rtexprvalue>true</rtexprvalue>
+    </attribute>
+  </tag>
+
+  <tag>
+    <description>
+        Stores the given time zone in the time zone configuration variable
+    </description>
+    <name>setDateTimeZone</name>
+    <tag-class>org.joda.time.contrib.jsptag.SetDateTimeZoneTag</tag-class>
+    <body-content>empty</body-content>
+    <attribute>
+        <description>
+The time zone. A String value is interpreted as
+a time zone ID. This may be one of the time zone
+IDs supported by the Joda. See
+org.joda.time.DateTimeZone for more information on
+supported time zone formats.
+        </description>
+        <name>value</name>
+        <required>true</required>
+        <rtexprvalue>true</rtexprvalue>
+    </attribute>
+    <attribute>
+        <description>
+Name of the exported scoped variable which
+stores the time zone of type
+java.util.DateTimeZone.
+        </description>
+        <name>var</name>
+        <required>false</required>
+        <rtexprvalue>false</rtexprvalue>
+    </attribute>
+    <attribute>
+        <description>
+Scope of var or the time zone configuration
+variable.
+        </description>
+        <name>scope</name>
+        <required>false</required>
+        <rtexprvalue>false</rtexprvalue>
+    </attribute>
+  </tag>
+
+  <tag>
+    <description>
+        Formats a Joda instant or partial using the supplied style or pattern
+    </description>
+    <name>format</name>
+    <tag-class>org.joda.time.contrib.jsptag.FormatTag</tag-class>
+    <body-content>empty</body-content>
+    <attribute>
+        <description>
+ReadableInstant or ReadablePartial to be formatted.
+        </description>
+        <name>value</name>
+        <required>true</required>
+        <rtexprvalue>true</rtexprvalue>
+    </attribute>
+    <attribute>
+        <description>
+Formatting style to apply.  See 
+org.joda.time.format.DateTimeFormat#forStyle()
+for more information on supported styles.
+        </description>
+        <name>style</name>
+        <required>false</required>
+        <rtexprvalue>true</rtexprvalue>
+    </attribute>
+    <attribute>
+        <description>
+Formatting pattern to apply.  See 
+org.joda.time.format.DateTimeFormat#forPattern()
+for more information on supported patterns.
+        </description>
+        <name>pattern</name>
+        <required>false</required>
+        <rtexprvalue>true</rtexprvalue>
+    </attribute>
+    <attribute>
+        <description>
+Time zone in which to represent the formatted
+time.
+        </description>
+        <name>dateTimeZone</name>
+        <required>false</required>
+        <rtexprvalue>true</rtexprvalue>
+    </attribute>
+    <attribute>
+        <description>
+Name of the exported scoped variable which
+stores the formatted result as a String.
+        </description>
+        <name>var</name>
+        <required>false</required>
+        <rtexprvalue>false</rtexprvalue>
+    </attribute>
+    <attribute>
+        <description>
+Scope of var.
+        </description>
+        <name>scope</name>
+        <required>false</required>
+        <rtexprvalue>false</rtexprvalue>
+    </attribute>
+    <attribute>
+        <description>
+Locale whose predefined formatting styles
+for dates and times are to be used for
+formatting.
+        </description>
+        <name>locale</name>
+        <required>false</required>
+        <rtexprvalue>true</rtexprvalue>
+    </attribute>
+  </tag>
+
+  <tag>
+    <description>
+        Parses the string representation of a date/time
+    </description>
+    <name>parseDateTime</name>
+    <tag-class>org.joda.time.contrib.jsptag.ParseDateTimeTag</tag-class>
+    <body-content>JSP</body-content>
+    <attribute>
+        <description>
+Date/time to be parsed.
+        </description>
+        <name>value</name>
+        <required>true</required>
+        <rtexprvalue>true</rtexprvalue>
+    </attribute>
+    <attribute>
+        <description>
+Formatting style to use.  See 
+org.joda.time.format.DateTimeFormat#forStyle()
+for more information on supported styles.
+        </description>
+        <name>style</name>
+        <required>false</required>
+        <rtexprvalue>true</rtexprvalue>
+    </attribute>
+    <attribute>
+        <description>
+Formatting pattern to use.  See 
+org.joda.time.format.DateTimeFormat#forPattern()
+for more information on supported patterns.
+        </description>
+        <name>pattern</name>
+        <required>false</required>
+        <rtexprvalue>true</rtexprvalue>
+    </attribute>
+    <attribute>
+        <description>
+Time zone in which to parse the date/time.
+        </description>
+        <name>dateTimeZone</name>
+        <required>false</required>
+        <rtexprvalue>true</rtexprvalue>
+    </attribute>
+    <attribute>
+        <description>
+Locale whose predefined formatting styles
+for dates and times are to be used to
+parse.
+        </description>
+        <name>locale</name>
+        <required>false</required>
+        <rtexprvalue>true</rtexprvalue>
+    </attribute>
+    <attribute>
+        <description>
+Name of the exported scoped variable in
+which the parsing result (of type
+org.joda.time.DateTime) is stored.
+        </description>
+        <name>var</name>
+        <required>false</required>
+        <rtexprvalue>false</rtexprvalue>
+    </attribute>
+    <attribute>
+        <description>
+Scope of var.
+        </description>
+        <name>scope</name>
+        <required>false</required>
+        <rtexprvalue>false</rtexprvalue>
+    </attribute>
+  </tag>
+
+</taglib>
diff --git a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/DateTimeZoneSupport.java b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/DateTimeZoneSupport.java
new file mode 100644
index 000000000..520e48d15
--- /dev/null
+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/DateTimeZoneSupport.java
@@ -0,0 +1,134 @@
+/*
+ * Copyright 1999-2004 The Apache Software Foundation.
+ * Modifications, Copyright 2005 Joda.org
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */ 
+
+package org.joda.time.contrib.jsptag;
+
+import org.joda.time.DateTimeZone;
+import java.io.IOException;
+import javax.servlet.jsp.JspException;
+import javax.servlet.jsp.JspTagException;
+import javax.servlet.jsp.PageContext;
+import javax.servlet.jsp.jstl.core.Config;
+import javax.servlet.jsp.tagext.BodyTagSupport;
+import javax.servlet.jsp.tagext.Tag;
+
+/**
+ * Support for tag handlers for &lt;timeZone&gt;.
+ * @author Jan Luehe
+ * @author Jim Newsham
+ */
+public abstract class DateTimeZoneSupport extends BodyTagSupport {
+  public static final String FMT_TIME_ZONE = "org.joda.time.dateTimeZone";
+
+  protected Object value;                      // 'value' attribute
+  private DateTimeZone dateTimeZone;
+
+  public DateTimeZoneSupport() {
+    super();
+    init();
+  }
+
+  private void init() {
+    value = null;
+  }
+
+  public DateTimeZone getDateTimeZone() {
+    return dateTimeZone;
+  }
+
+
+  public int doStartTag() throws JspException {
+    if (value == null) {
+      dateTimeZone = DateTimeZone.UTC;
+    } 
+    else if (value instanceof String) {
+      try {
+        dateTimeZone = DateTimeZone.forID((String) value);
+      }
+      catch(IllegalArgumentException iae) {
+        dateTimeZone = DateTimeZone.UTC;
+      }
+    }
+    else {
+      dateTimeZone = (DateTimeZone) value;
+    }
+    return EVAL_BODY_BUFFERED;
+  }
+
+  public int doEndTag() throws JspException {
+    try {
+      pageContext.getOut().print(bodyContent.getString());
+    } 
+    catch (IOException ioe) {
+      throw new JspTagException(ioe.toString(), ioe);
+    }
+    return EVAL_PAGE;
+  }
+
+  // Releases any resources we may have (or inherit)
+  public void release() {
+    init();
+  }
+
+  /*
+  * Determines and returns the time zone to be used by the given action.
+  *
+  * <p> If the given action is nested inside a &lt;dateTimeZone&gt; action,
+  * the time zone is taken from the enclosing &lt;dateTimeZone&gt; action.
+  *
+  * <p> Otherwise, the time zone configuration setting
+  * <tt>org.joda.time.FMT_TIME_ZONE</tt> is used.
+  *
+  * @param pageContext the page containing the action for which the
+  * time zone needs to be determined
+  * @param fromTag the action for which the time zone needs to be
+  * determined
+  *
+  * @return the time zone, or <tt>null</tt> if the given action is not 
+  * nested inside a &lt;dateTimeZone&gt; action and no time zone configuration
+  * setting exists
+  */
+  static DateTimeZone getDateTimeZone(PageContext pc, Tag fromTag) {
+    DateTimeZone tz = null;
+
+    Tag t = findAncestorWithClass(fromTag, DateTimeZoneSupport.class);
+    if (t != null) {
+      // use time zone from parent <timeZone> tag
+      DateTimeZoneSupport parent = (DateTimeZoneSupport) t;
+      tz = parent.getDateTimeZone();
+    } 
+    else {
+      // get time zone from configuration setting
+      Object obj = Config.find(pc, FMT_TIME_ZONE);
+      if (obj != null) {
+        if (obj instanceof DateTimeZone) {
+          tz = (DateTimeZone) obj;
+        } 
+        else {
+          try {
+            tz = DateTimeZone.forID((String) obj);
+          }
+          catch(IllegalArgumentException iae) {
+            tz = DateTimeZone.UTC;
+          }
+        }
+      }
+    }
+    
+    return tz;
+  }
+}
diff --git a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/DateTimeZoneTag.java b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/DateTimeZoneTag.java
new file mode 100644
index 000000000..9a096bb45
--- /dev/null
+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/DateTimeZoneTag.java
@@ -0,0 +1,35 @@
+/*
+ * Copyright 1999-2004 The Apache Software Foundation.
+ * Modifications, Copyright 2005 Joda.org
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */ 
+
+package org.joda.time.contrib.jsptag;
+
+import javax.servlet.jsp.JspTagException;
+
+/**
+ * <p>A handler for &lt;dateTimeZone&gt.
+ * @author Jan Luehe
+ * @author Jim Newsham
+ */
+
+public class DateTimeZoneTag extends DateTimeZoneSupport {
+
+  // for tag attribute
+  public void setValue(Object value) throws JspTagException {
+    this.value = value;
+  }
+  
+}
diff --git a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/FormatSupport.java b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/FormatSupport.java
new file mode 100644
index 000000000..1537ff9db
--- /dev/null
+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/FormatSupport.java
@@ -0,0 +1,147 @@
+/*
+ * Copyright 1999-2004 The Apache Software Foundation.
+ * Modifications, Copyright 2005 Joda.org
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */ 
+
+package org.joda.time.contrib.jsptag;
+
+import org.joda.time.DateTimeZone;
+import org.joda.time.ReadableInstant;
+import org.joda.time.ReadablePartial;
+import org.joda.time.format.DateTimeFormat;
+import org.joda.time.format.DateTimeFormatter;
+import java.io.IOException;
+import java.text.DateFormat;
+import java.util.Locale;
+import javax.servlet.jsp.JspException;
+import javax.servlet.jsp.JspTagException;
+import javax.servlet.jsp.PageContext;
+import javax.servlet.jsp.tagext.TagSupport;
+
+/**
+ * Support for tag handlers for &lt;formatDate&gt;, the date and time
+ * formatting tag in JSTL 1.0.
+ * @author Jan Luehe
+ * @author Jim Newsham
+ */
+
+public abstract class FormatSupport extends TagSupport {
+
+  protected Object value;                      // 'value' attribute
+  protected String pattern;                    // 'pattern' attribute
+  protected String style;                      // 'style' attribute
+  protected DateTimeZone dateTimeZone;         // 'dateTimeZone' attribute
+  protected Locale locale;                     // 'locale' attribute
+
+  private String var;                          // 'var' attribute
+  private int scope;                           // 'scope' attribute
+
+
+  public FormatSupport() {
+    super();
+    init();
+  }
+
+  private void init() {
+    var = null;
+    value = null;
+    pattern = null;
+    style = null;
+    dateTimeZone = null;
+    locale = null;
+    scope = PageContext.PAGE_SCOPE;
+  }
+
+  public void setVar(String var) {
+    this.var = var;
+  }
+
+  public void setScope(String scope) {
+    this.scope = Util.getScope(scope);
+  }
+
+  /*
+   * Formats the given instant or partial.
+   */
+  public int doEndTag() throws JspException {
+    if (value == null) {
+      if (var != null) {
+        pageContext.removeAttribute(var, scope);
+      }
+      return EVAL_PAGE;
+    }
+
+    // Create formatter
+    DateTimeFormatter formatter;
+    if (pattern != null) {
+      formatter = DateTimeFormat.forPattern(pattern);
+    }
+    else if (style != null) {
+      formatter = DateTimeFormat.forStyle(style);
+    }
+    else {
+      // use a medium date (no time) style by default; same as jstl
+      formatter = DateTimeFormat.mediumDate();
+    }
+
+    // set formatter locale
+    Locale locale = this.locale;
+    if (locale == null) {
+      locale = Util.getFormattingLocale(pageContext, this, true,
+        DateFormat.getAvailableLocales());
+    }
+    if (locale != null) {
+      formatter = formatter.withLocale(locale);
+    }
+
+    // set formatter timezone
+    DateTimeZone tz = this.dateTimeZone;
+    if (tz == null) {
+      tz = DateTimeZoneSupport.getDateTimeZone(pageContext, this);
+    }
+    if (tz != null) {
+      formatter = formatter.withZone(tz);
+    }
+
+    // format value
+    String formatted;
+    if (value instanceof ReadableInstant) {
+      formatted = formatter.print((ReadableInstant) value);
+    }
+    else {
+      formatted = formatter.print((ReadablePartial) value);
+    }
+
+    if (var != null) {
+      pageContext.setAttribute(var, formatted, scope);	
+    } 
+    else {
+      try {
+        pageContext.getOut().print(formatted);
+      } 
+      catch (IOException ioe) {
+        throw new JspTagException(ioe.toString(), ioe);
+      }
+    }
+
+    return EVAL_PAGE;
+  }
+
+  // Releases any resources we may have (or inherit)
+  public void release() {
+    init();
+  }
+
+}
diff --git a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/FormatTag.java b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/FormatTag.java
new file mode 100644
index 000000000..9067b43f2
--- /dev/null
+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/FormatTag.java
@@ -0,0 +1,82 @@
+/*
+ * Copyright 1999-2004 The Apache Software Foundation.
+ * Modifications, Copyright 2005 Joda.org
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */ 
+
+package org.joda.time.contrib.jsptag;
+
+import org.joda.time.DateTime;
+import org.joda.time.DateTimeZone;
+import java.util.Locale;
+import javax.servlet.jsp.JspTagException;
+
+/**
+ * <p>A handler for &lt;format&gt; that supports rtexprvalue-based
+ * attributes.</p>
+ * @author Jan Luehe
+ * @author Jim Newsham
+ */
+public class FormatTag extends FormatSupport {
+
+  // 'value' attribute
+  public void setValue(Object value) throws JspTagException {
+    this.value = value;
+  }
+
+  // 'style' attribute
+  public void setStyle(String style) throws JspTagException {
+    this.style = style;
+  }
+
+  // 'pattern' attribute
+  public void setPattern(String pattern) throws JspTagException {
+    this.pattern = pattern;
+  }
+
+  // 'dateTimeZone' attribute
+  public void setDateTimeZone(Object dtz) throws JspTagException {
+    if (dtz == null || dtz instanceof String && 
+      ((String) dtz).length() == 0) {
+      this.dateTimeZone = null;
+    }
+    else if (dtz instanceof DateTimeZone) {
+      this.dateTimeZone = (DateTimeZone) dtz;
+    }
+    else {
+      try {
+        String s = (String) dtz;
+        this.dateTimeZone = DateTimeZone.forID((String) dtz);
+      }
+      catch(IllegalArgumentException iae) {
+        this.dateTimeZone = DateTimeZone.UTC;
+      }
+    }
+  }
+
+  // 'locale' attribute
+  public void setLocale(Object loc) throws JspTagException {
+    if (loc == null || 
+      (loc instanceof String && ((String) loc).length() == 0)) {
+      this.locale = null;
+    }
+    else if (loc instanceof Locale) {
+      this.locale = (Locale) loc;
+    } 
+    else {
+      this.locale = Util.parseLocale((String) loc);
+    }
+  }
+
+}
diff --git a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/JodaTagLibraryValidator.java b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/JodaTagLibraryValidator.java
new file mode 100644
index 000000000..2fea40ee8
--- /dev/null
+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/JodaTagLibraryValidator.java
@@ -0,0 +1,444 @@
+/*
+ * Copyright 1999-2004 The Apache Software Foundation.
+ * Modifications, Copyright 2005 Joda.org
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */ 
+
+package org.joda.time.contrib.jsptag;
+
+import java.util.Set;
+import java.io.IOException;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.NoSuchElementException;
+import java.util.Set;
+import java.util.StringTokenizer;
+import java.util.Vector;
+import javax.servlet.jsp.JspException;
+import javax.servlet.jsp.tagext.PageData;
+import javax.servlet.jsp.tagext.TagData;
+import javax.servlet.jsp.tagext.TagLibraryValidator;
+import javax.servlet.jsp.tagext.ValidationMessage;
+import javax.xml.parsers.ParserConfigurationException;
+import javax.xml.parsers.SAXParser;
+import javax.xml.parsers.SAXParserFactory;
+import org.xml.sax.Attributes;
+import org.xml.sax.SAXException;
+import org.xml.sax.helpers.DefaultHandler;
+
+//import org.apache.taglibs.standard.lang.support.ExpressionEvaluator;
+//import org.apache.taglibs.standard.lang.support.ExpressionEvaluatorManager;
+
+/**
+ * <p>A SAX-based TagLibraryValidator for the Joda tags.  Currently implements 
+ * the following checks:</p>
+ * 
+ * <ul>
+ *   <li>Tag bodies that must either be empty or non-empty given
+ *      particular attributes.</li>
+ *   <li>Expression syntax validation (NOTE: this has been disabled; per my
+ *       understanding, it shouldn't be needed in JSP 2.0+ containers; see 
+ *       notes in source code for more information).
+ * </ul>
+ * 
+ * @author Shawn Bayern
+ * @author Jan Luehe
+ * @author Jim Newsham
+ */
+public class JodaTagLibraryValidator extends TagLibraryValidator {
+  
+  /*
+   * Expression syntax validation has been disabled since when I ported this 
+   * code over from Jakarta Taglib, I wanted to reduce dependencies.  As I
+   * understand it, JSP 2.0 containers take over the responsibility of handling
+   * EL code (both in attribute tags, and externally), so this shouldn't be a
+   * problem unless you're using something old.  If you want to restore this
+   * validation, you must uncomment the various lines in this source, include
+   * the Jakarta Taglib's standard.jar library at build and runtime, and 
+   * (I believe, but don't know specifically) make a legacy-style tld which 
+   * describes which attributes should be validated.  Have a look at fmt.tld, 
+   * fmt-1.0.tld, fmt-1.0-rt.tld in standard.jar for an example of this.
+   */
+   
+
+  //*********************************************************************
+  // Implementation Overview
+
+  /*
+  * We essentially just run the page through a SAX parser, handling
+  * the callbacks that interest us.  We collapse <jsp:text> elements
+  * into the text they contain, since this simplifies processing
+  * somewhat.  Even a quick glance at the implementation shows its
+  * necessary, tree-oriented nature:  multiple Stacks, an understanding
+  * of 'depth', and so on all are important as we recover necessary
+  * state upon each callback.  This TLV demonstrates various techniques,
+  * from the general "how do I use a SAX parser for a TLV?" to
+  * "how do I read my init parameters and then validate?"  But also,
+  * the specific SAX methodology was kept as general as possible to
+  * allow for experimentation and flexibility.
+  */
+
+
+  //*********************************************************************
+  // Constants
+
+  // tag names
+  private static final String SET_DATETIMEZONE = "setDateTimeZone";
+  private static final String PARSE_DATETIME = "parseDateTime";
+  private static final String JSP_TEXT = "jsp:text";
+
+  // attribute names
+  private static final String VALUE = "value";
+
+  // parameter names
+  //private final String EXP_ATT_PARAM = "expressionAttributes";
+
+  // attributes
+  private static final String VAR = "var";
+  private static final String SCOPE = "scope";  
+
+  //scopes
+  private static final String PAGE_SCOPE = "page";        
+  private static final String REQUEST_SCOPE = "request";  
+  private static final String SESSION_SCOPE = "session";  
+  private static final String APPLICATION_SCOPE = "application";
+
+  // Relevant URIs
+  private final String JSP = "http://java.sun.com/JSP/Page"; 
+
+
+  //*********************************************************************
+  // Validation and configuration state (protected)
+
+  private String uri;		// our taglib's uri (as passed by JSP container on XML View)
+  private String prefix;	// our taglib's prefix
+  private Vector messageVector;	// temporary error messages
+  private Map config;		// configuration (Map of Sets)
+  private boolean failed;	// have we failed >0 times?
+  private String lastElementId;	// the last element we've seen
+
+  //*********************************************************************
+  // Constructor and lifecycle management
+
+  public JodaTagLibraryValidator() {
+    init();
+  }
+
+  private void init() {
+    messageVector = null;
+    prefix = null;
+    config = null;
+  }
+
+  public void release() {
+    super.release();
+    init();
+  }
+
+
+  public synchronized ValidationMessage[] validate(String prefix, String uri, 
+    PageData page) {
+    try {
+      this.uri = uri;
+      // initialize
+      messageVector = new Vector();
+
+      // save the prefix
+      this.prefix = prefix;
+
+      // parse parameters if necessary
+      /*
+      try {
+        if (config == null) {
+          configure((String) getInitParameters().get(EXP_ATT_PARAM));
+        }
+      } 
+      catch (NoSuchElementException ex) {
+        // parsing error
+        return vmFromString(Resources.getMessage("TLV_PARAMETER_ERROR",
+          EXP_ATT_PARAM));
+      }
+      */
+
+      DefaultHandler h = new Handler();
+
+      // parse the page
+      SAXParserFactory f = SAXParserFactory.newInstance();
+      f.setValidating(false);
+      f.setNamespaceAware(true);
+      SAXParser p = f.newSAXParser();
+      p.parse(page.getInputStream(), h);
+
+      if (messageVector.size() == 0) {
+        return null;
+      }
+      else {
+        return vmFromVector(messageVector);
+      }
+    } 
+    catch (SAXException ex) {
+      return vmFromString(ex.toString());
+    } 
+    catch (ParserConfigurationException ex) {
+      return vmFromString(ex.toString());
+    } 
+    catch (IOException ex) {
+      return vmFromString(ex.toString());
+    }
+  }
+
+  /*
+  // delegate validation to the appropriate expression language
+  private String validateExpression(String elem, String att, String expr) {
+    // let's just use the cache kept by the ExpressionEvaluatorManager
+    ExpressionEvaluator current;
+    try {
+      current = ExpressionEvaluatorManager.getEvaluatorByName(
+        ExpressionEvaluatorManager.EVALUATOR_CLASS);
+    } 
+    catch (JspException ex) {
+      // (using JspException here feels ugly, but it's what EEM uses)
+      return ex.getMessage();
+    }
+    String response = current.validate(att, expr);
+    return (response == null) 
+      ? null : "tag = '" + elem + "' / attribute = '" + att + "': " + response;
+  }
+   */
+
+  // utility methods to help us match elements in our tagset
+  private boolean isTag(String tagUri, String tagLn, String matchUri,
+    String matchLn) {
+    if (tagUri == null || tagLn == null || matchUri == null || 
+      matchLn == null) {
+      return false;
+    }
+    // match beginning of URI since some suffix *_rt tags can
+    // be nested in EL enabled tags as defined by the spec
+    if (tagUri.length() > matchUri.length()) {
+      return (tagUri.startsWith(matchUri) && tagLn.equals(matchLn));
+    } 
+    else {
+      return (matchUri.startsWith(tagUri) && tagLn.equals(matchLn));
+    }
+  }
+
+  private boolean isJspTag(String tagUri, String tagLn, String target) {
+    return isTag(tagUri, tagLn, JSP, target);
+  }
+
+  private boolean isJodaTag(String tagUri, String tagLn, String target) {
+    return isTag(tagUri, tagLn, this.uri, target);
+  }
+
+  // utility method to determine if an attribute exists
+  private boolean hasAttribute(Attributes a, String att) {
+    return (a.getValue(att) != null);
+  }
+
+  /*
+  * method to assist with failure [ as if it's not easy enough
+  * already :-) ]
+  */
+  private void fail(String message) {
+    failed = true;
+    messageVector.add(new ValidationMessage(lastElementId, message));
+  }
+
+  // returns true if the given attribute name is specified, false otherwise
+  private boolean isSpecified(TagData data, String attributeName) {
+    return (data.getAttribute(attributeName) != null);
+  }
+
+  // returns true if the 'scope' attribute is valid
+  protected boolean hasNoInvalidScope(Attributes a) {
+    String scope = a.getValue(SCOPE);
+    if ((scope != null) && !scope.equals(PAGE_SCOPE) &&
+      !scope.equals(REQUEST_SCOPE) && !scope.equals(SESSION_SCOPE) &&
+      !scope.equals(APPLICATION_SCOPE)) {
+      return false;
+    }
+    return true;
+  }
+
+  // returns true if the 'var' attribute is empty
+  protected boolean hasEmptyVar(Attributes a) {
+    return "".equals(a.getValue(VAR));
+  }
+
+  // returns true if the 'scope' attribute is present without 'var'
+  protected boolean hasDanglingScope(Attributes a) {
+    return (a.getValue(SCOPE) != null && a.getValue(VAR) == null);
+  }
+
+  // retrieves the local part of a QName
+  protected String getLocalPart(String qname) {
+    int colon = qname.indexOf(":");
+    return (colon == -1) ? qname : qname.substring(colon + 1);
+  }
+
+  // parses our configuration parameter for element:attribute pairs
+  /*
+  private void configure(String info) {
+    // construct our configuration map
+    config = new HashMap();
+
+    // leave the map empty if we have nothing to configure
+    if (info == null) {
+      return;
+    }
+
+    // separate parameter into space-separated tokens and store them
+    StringTokenizer st = new StringTokenizer(info);
+    while (st.hasMoreTokens()) {
+      String pair = st.nextToken();
+      StringTokenizer pairTokens = new StringTokenizer(pair, ":");
+      String element = pairTokens.nextToken();
+      String attribute = pairTokens.nextToken();
+      Object atts = config.get(element);
+      if (atts == null) {
+        atts = new HashSet();
+        config.put(element, atts);
+      }
+      ((Set) atts).add(attribute);
+    }
+  }
+  */
+
+  // constructs a ValidationMessage[] from a single String and no ID
+  private static ValidationMessage[] vmFromString(String message) {
+    return new ValidationMessage[] { new ValidationMessage(null, message) };
+  }
+
+  // constructs a ValidationMessage[] from a ValidationMessage Vector
+  private static ValidationMessage[] vmFromVector(Vector v) {
+    ValidationMessage[] vm = new ValidationMessage[v.size()];
+    for (int i = 0; i < vm.length; i++) {
+      vm[i] = (ValidationMessage) v.get(i);
+    }
+    return vm;
+  }
+
+  /**
+   * SAX event handler.
+   */
+  private class Handler extends DefaultHandler {
+    // parser state
+    private int depth = 0;
+    private String lastElementName = null;
+    private boolean bodyNecessary = false;
+    private boolean bodyIllegal = false;
+
+    // process under the existing context (state), then modify it
+    public void startElement(String ns, String ln, String qn, Attributes a) {
+      // substitute our own parsed 'ln' if it's not provided
+      if (ln == null) {
+        ln = getLocalPart(qn);
+      }
+
+      // for simplicity, we can ignore <jsp:text> for our purposes
+      // (don't bother distinguishing between it and its characters)
+      if (qn.equals(JSP_TEXT)) {
+        return;
+      }
+
+      // check body-related constraint
+      if (bodyIllegal) {
+        fail(Resources.getMessage("TLV_ILLEGAL_BODY", lastElementName));
+      }
+
+      // validate expression syntax if we need to
+      /*
+      Set expAtts;
+      if (qn.startsWith(prefix + ":") && (expAtts = (Set) config.get(ln)) != null) {
+        for (int i = 0; i < a.getLength(); i++) {
+          String attName = a.getLocalName(i);
+          if (expAtts.contains(attName)) {
+            String vMsg = validateExpression(ln, attName, a.getValue(i));
+            if (vMsg != null) {
+              fail(vMsg);
+            }
+          }
+        }
+      }
+      */
+
+      // validate attributes
+      if (qn.startsWith(prefix + ":") && !hasNoInvalidScope(a)) {
+        fail(Resources.getMessage("TLV_INVALID_ATTRIBUTE", SCOPE, qn, 
+          a.getValue(SCOPE)));
+      }
+      if (qn.startsWith(prefix + ":") && hasEmptyVar(a)) {
+        fail(Resources.getMessage("TLV_EMPTY_VAR", qn));
+      }
+      if (qn.startsWith(prefix + ":") && !isJodaTag(ns, ln, SET_DATETIMEZONE) &&
+        hasDanglingScope(a)) {
+        fail(Resources.getMessage("TLV_DANGLING_SCOPE", qn));
+      }
+
+      // now, modify state
+
+      // set up a check against illegal attribute/body combinations
+      bodyIllegal = false;
+      bodyNecessary = false;
+      if (isJodaTag(ns, ln,  PARSE_DATETIME)) {
+        if (hasAttribute(a, VALUE)) {
+          bodyIllegal = true;
+        }
+        else {
+          bodyNecessary = true;
+        }
+      } 
+
+      // record the most recent tag (for error reporting)
+      lastElementName = qn;
+      lastElementId = a.getValue(JSP, "id");
+
+      // we're a new element, so increase depth
+      depth++;
+    }
+
+    public void characters(char[] ch, int start, int length) {
+      bodyNecessary = false;		// body is no longer necessary!
+
+      // ignore strings that are just whitespace
+      String s = new String(ch, start, length).trim();
+      if (s.equals("")) {
+        return;
+      }
+
+      // check and update body-related constraints
+      if (bodyIllegal) {
+        fail(Resources.getMessage("TLV_ILLEGAL_BODY", lastElementName));
+      }
+    }
+
+    public void endElement(String ns, String ln, String qn) {
+      // consistently, we ignore JSP_TEXT
+      if (qn.equals(JSP_TEXT)) {
+        return;
+      }
+
+      // handle body-related invariant
+      if (bodyNecessary) {
+        fail(Resources.getMessage("TLV_MISSING_BODY", lastElementName));
+      }
+      bodyIllegal = false;	// reset: we've left the tag
+
+      // update our depth
+      depth--;
+    }
+  }
+}
diff --git a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/ParseDateTimeSupport.java b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/ParseDateTimeSupport.java
new file mode 100644
index 000000000..140829a97
--- /dev/null
+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/ParseDateTimeSupport.java
@@ -0,0 +1,155 @@
+/*
+ * Copyright 1999-2004 The Apache Software Foundation.
+ * Modifications, Copyright 2005 Joda.org
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */ 
+
+package org.joda.time.contrib.jsptag;
+
+import org.joda.time.DateTime;
+import org.joda.time.DateTimeZone;
+import org.joda.time.format.DateTimeFormat;
+import org.joda.time.format.DateTimeFormatter;
+import java.io.IOException;
+import java.text.DateFormat;
+import java.util.Locale;
+import javax.servlet.jsp.JspException;
+import javax.servlet.jsp.JspTagException;
+import javax.servlet.jsp.PageContext;
+import javax.servlet.jsp.tagext.BodyTagSupport;
+
+/**
+ * Support for tag handlers for &lt;parseDate&gt;, the date and time
+ * parsing tag in JSTL 1.0.
+ * @author Jan Luehe
+ * @author Jim Newsham
+ */
+public abstract class ParseDateTimeSupport extends BodyTagSupport {
+
+  protected String value;                      // 'value' attribute
+  protected boolean valueSpecified;	       // status
+  protected String pattern;                    // 'pattern' attribute
+  protected String style;                      // 'style' attribute
+  protected DateTimeZone dateTimeZone;         // 'dateTimeZone' attribute
+  protected Locale locale;                     // 'locale' attribute
+
+  private String var;                          // 'var' attribute
+  private int scope;                           // 'scope' attribute
+
+  public ParseDateTimeSupport() {
+    super();
+    init();
+  }
+
+  private void init() {
+    value = null;
+    valueSpecified = false;
+    pattern = null;
+    style = null;
+    dateTimeZone = null;
+    locale = null;
+    scope = PageContext.PAGE_SCOPE;
+  }
+
+  public void setVar(String var) {
+    this.var = var;
+  }
+
+  public void setScope(String scope) {
+    this.scope = Util.getScope(scope);
+  }
+
+  public int doEndTag() throws JspException {
+    String input = null;
+
+    // determine the input by...
+    if (valueSpecified) {
+      // ... reading 'value' attribute
+      input = value;
+    } 
+    else {
+      // ... retrieving and trimming our body
+      if (bodyContent != null && bodyContent.getString() != null)
+      input = bodyContent.getString().trim();
+    }
+
+    if ((input == null) || input.equals("")) {
+      if (var != null) {
+        pageContext.removeAttribute(var, scope);
+      }
+      return EVAL_PAGE;
+    }
+
+    // Create formatter
+    DateTimeFormatter formatter;
+    if (pattern != null) {
+      formatter = DateTimeFormat.forPattern(pattern);
+    }
+    else if (style != null) {
+      formatter = DateTimeFormat.forStyle(style);
+    }
+    else {
+      formatter = DateTimeFormat.fullDateTime();
+    }
+
+    // set formatter locale
+    Locale locale = this.locale;
+    if (locale == null) {
+      locale = Util.getFormattingLocale(pageContext, this, true,
+        DateFormat.getAvailableLocales());
+    }
+    if (locale != null) {
+      formatter = formatter.withLocale(locale);
+    }
+
+    // set formatter timezone
+    DateTimeZone tz = this.dateTimeZone;
+    if (tz == null) {
+      tz = DateTimeZoneSupport.getDateTimeZone(pageContext, this);
+    }
+    if (tz != null) {
+      formatter = formatter.withZone(tz);
+    }
+
+    // Parse date
+    DateTime parsed = null;
+    try {
+      parsed = formatter.parseDateTime(input);
+    } 
+    catch (IllegalArgumentException iae) {
+      throw new JspException(Resources.getMessage("PARSE_DATE_PARSE_ERROR", 
+        input), iae);
+    }
+
+    if (var != null) {
+      pageContext.setAttribute(var, parsed, scope);	
+    }
+    else {
+      try {
+        pageContext.getOut().print(parsed);
+      } 
+      catch (IOException ioe) {
+        throw new JspTagException(ioe.toString(), ioe);
+      }
+    }
+
+    return EVAL_PAGE;
+  }
+
+  // Releases any resources we may have (or inherit)
+  public void release() {
+    init();
+  }
+
+}
diff --git a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/ParseDateTimeTag.java b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/ParseDateTimeTag.java
new file mode 100644
index 000000000..e08857f33
--- /dev/null
+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/ParseDateTimeTag.java
@@ -0,0 +1,81 @@
+/*
+ * Copyright 1999-2004 The Apache Software Foundation.
+ * Modifications, Copyright 2005 Joda.org
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */ 
+
+package org.joda.time.contrib.jsptag;
+
+import org.joda.time.DateTimeZone;
+import java.util.Locale;
+import javax.servlet.jsp.JspTagException;
+
+/**
+ * <p>A handler for &lt;parseDate&gt; that supports rtexprvalue-based
+ * attributes.</p>
+ * @author Jan Luehe
+ * @author Jim Newsham
+ */
+
+public class ParseDateTimeTag extends ParseDateTimeSupport {
+
+  // 'value' attribute
+  public void setValue(String value) throws JspTagException {
+    this.value = value;
+    this.valueSpecified = true;
+  }
+
+  // 'style' attribute
+  public void setStyle(String style) throws JspTagException {
+    this.style = style;
+  }
+
+  // 'pattern' attribute
+  public void setPattern(String pattern) throws JspTagException {
+    this.pattern = pattern;
+  }
+
+  // 'dateTimeZone' attribute
+  public void setDateTimeZone(Object dtz) throws JspTagException {
+    if (dtz == null || dtz instanceof String && ((String) dtz).length() == 0) {
+      this.dateTimeZone = null;
+    }
+    else if (dtz instanceof DateTimeZone) {
+      this.dateTimeZone = (DateTimeZone) dtz;
+    }
+    else {
+      try {
+        String s = (String) dtz;
+        this.dateTimeZone = DateTimeZone.forID((String) dtz);
+      }
+      catch(IllegalArgumentException iae) {
+        this.dateTimeZone = DateTimeZone.UTC;
+      }
+    }
+  }
+
+  // 'locale' attribute
+  public void setLocale(Object loc) throws JspTagException {
+    if (loc == null || 
+      (loc instanceof String && ((String) loc).length() == 0)) {
+      this.locale = null;
+    }
+    else if (loc instanceof Locale) {
+      this.locale = (Locale) loc;
+    } 
+    else {
+      locale = Util.parseLocale((String) loc);
+    }
+  }
+}
diff --git a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/Resources.java b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/Resources.java
new file mode 100644
index 000000000..953ece324
--- /dev/null
+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/Resources.java
@@ -0,0 +1,127 @@
+/*
+ * Copyright 1999-2004 The Apache Software Foundation.
+ * Modifications, Copyright 2005 Joda.org
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */ 
+
+package org.joda.time.contrib.jsptag;
+
+import java.text.MessageFormat;
+import java.util.MissingResourceException;
+import java.util.ResourceBundle;
+
+/**
+ * <p>Provides locale-neutral access to string resources.  Only the
+ * documentation and code are in English. :-)
+ *
+ * <p>The major goal, aside from globalization, is convenience.
+ * Access to resources with no parameters is made in the form:</p>
+ * <pre>
+ *     Resources.getMessage(MESSAGE_NAME);
+ * </pre>
+ *
+ * <p>Access to resources with one parameter works like</p>
+ * <pre>
+ *     Resources.getMessage(MESSAGE_NAME, arg1);
+ * </pre>
+ *
+ * <p>... and so on.</p>
+ *
+ * @author Shawn Bayern
+ */
+public class Resources {
+
+    //*********************************************************************
+    // Static data
+
+    /** The location of our resources. */
+    private static final String RESOURCE_LOCATION
+	= "org.joda.time.contrib.jsptag.Resources";
+
+    /** Our class-wide ResourceBundle. */
+    private static ResourceBundle rb =
+	ResourceBundle.getBundle(RESOURCE_LOCATION);
+
+
+    //*********************************************************************
+    // Public static methods
+
+    /** Retrieves a message with no arguments. */
+    public static String getMessage(String name)
+	    throws MissingResourceException {
+	return rb.getString(name);
+    }
+
+    /** Retrieves a message with arbitrarily many arguments. */
+    public static String getMessage(String name, Object[] a)
+	    throws MissingResourceException {
+	String res = rb.getString(name);
+	return MessageFormat.format(res, a);
+    }
+
+    /** Retrieves a message with one argument. */
+    public static String getMessage(String name, Object a1)
+	    throws MissingResourceException {
+	return getMessage(name, new Object[] { a1 });
+    }
+
+    /** Retrieves a message with two arguments. */
+    public static String getMessage(String name, Object a1, Object a2)
+	    throws MissingResourceException {
+	return getMessage(name, new Object[] { a1, a2 });
+    }
+
+    /** Retrieves a message with three arguments. */
+    public static String getMessage(String name,
+				    Object a1,
+				    Object a2,
+				    Object a3)
+	    throws MissingResourceException {
+	return getMessage(name, new Object[] { a1, a2, a3 });
+    }
+
+    /** Retrieves a message with four arguments. */
+    public static String getMessage(String name,
+			 	    Object a1,
+				    Object a2,
+				    Object a3,
+				    Object a4)
+	    throws MissingResourceException {
+	return getMessage(name, new Object[] { a1, a2, a3, a4 });
+    }
+
+    /** Retrieves a message with five arguments. */
+    public static String getMessage(String name,
+				    Object a1,
+				    Object a2,
+				    Object a3,
+				    Object a4,
+				    Object a5)
+	    throws MissingResourceException {
+	return getMessage(name, new Object[] { a1, a2, a3, a4, a5 });
+    }
+
+    /** Retrieves a message with six arguments. */
+    public static String getMessage(String name,
+				    Object a1,
+				    Object a2,
+				    Object a3,
+				    Object a4,
+				    Object a5,
+				    Object a6)
+	    throws MissingResourceException {
+	return getMessage(name, new Object[] { a1, a2, a3, a4, a5, a6 });
+    }
+
+}
diff --git a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/Resources.properties b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/Resources.properties
new file mode 100644
index 000000000..2bee78168
--- /dev/null
+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/Resources.properties
@@ -0,0 +1,304 @@
+#########################################################################
+# Conventions:
+# - For error messages from particular tags, the resource should
+#     - (a) have a name beginning with TAGNAME_
+#     - (b) contain the name of the tag within the message
+# - Generic tag messages -- i.e., those used in more than one tag --
+#   should begin with TAG_
+# - Errors for TagLibraryValidators should begin with TLV_
+#########################################################################
+
+
+#########################################################################
+# Generic tag error messages
+#########################################################################
+
+TAG_NULL_ATTRIBUTE=\
+    The "{0}" attribute illegally evaluated to "null" or "" in &lt;{1}&gt;
+
+#########################################################################
+# Specific tag error messages
+#########################################################################
+
+# CORE
+
+CHOOSE_EXCLUSIVITY=\
+    Only one (or is it two?) &lt;choose&gt; subtag may evaluate its body
+
+EXPR_BAD_VALUE=\
+    In &lt;expr&gt;, attribute value="{0}" didn't evaluate successfully, \
+    but there was no "default" attribute and no non-whitespace content \
+    for the tag.
+
+FOREACH_STEP_NO_RESULTSET=\
+    Step cannot be > 1 when iterating over a ResultSet with &lt;forEach&gt;
+
+FOREACH_BAD_ITEMS=\
+    Don't know how to iterate over supplied "items" in &lt;forEach&gt;
+
+IMPORT_BAD_RELATIVE=\
+    In URL tags, when the "context" attribute is specified, \
+    values of both "context" and "url" must start with "/".
+
+IMPORT_REL_WITHOUT_HTTP=\
+    Relative &lt;import&gt; from non-HTTP request not allowed
+    
+IMPORT_REL_WITHOUT_DISPATCHER=\
+    Unable to get RequestDispatcher for Context: "{0}" and URL: "{1}". \
+    Verify values and/or enable cross context access.
+
+IMPORT_IO=\
+    I/O error in &lt;import&gt; occurred reading "{0}"
+
+IMPORT_ILLEGAL_STREAM=\
+    Unexpected internal error during &lt;import&gt: \
+    Target servlet called getWriter(), then getOutputStream()
+
+IMPORT_ILLEGAL_WRITER=\
+    Unexpected internal error during &lt;import&gt: \
+    Target servlet called getOutputStream(), then getWriter()
+
+#IMPORT_ILLEGAL_GETSTRING=\
+#    Unexpected internal error during &lt;import&gt: \
+#    Target servlet called neither getOutputStream() nor getWriter()
+
+PARAM_OUTSIDE_PARENT=\
+    &lt;param&gt; outside &lt;import&gt; or &lt;urlEncode&gt;
+
+PARAM_ENCODE_BOOLEAN=\
+    In &lt;param&gt;, "encode" must be "true" or "false".  Got "{0}" instead.
+
+SET_BAD_SCOPE=\
+    Invalid "scope" attribute for &lt;set&gt;:  "{0}"
+
+SET_INVALID_PROPERTY=\
+    Invalid property in &lt;set&gt;:  "{0}"
+
+SET_INVALID_TARGET=\
+    Attempt to set the property of an invalid object in &lt;set&gt;.
+
+SET_NO_VALUE=\
+    Need either non-whitespace body or "value" attribute in &lt;set&gt;
+
+URLENCODE_NO_VALUE=\
+    Need either non-whitespace body or "value" attribute in &lt;urlEncode&gt;
+
+WHEN_OUTSIDE_CHOOSE=\
+    Illegal use of &lt;when&gt;-style tag without &lt;choose&gt; as its \
+    direct parent
+
+# I18N
+
+LOCALE_NO_LANGUAGE=\
+    Missing language component in 'value' attribute in &lt;setLocale&gt; 
+
+LOCALE_EMPTY_COUNTRY=\
+    Empty country component in 'value' attribute in &lt;setLocale&gt;
+
+PARAM_OUTSIDE_MESSAGE=\
+    &lt;param&gt; outside &lt;message&gt;
+
+MESSAGE_NO_KEY=\
+    &lt;message&gt; needs 'key' attribute or non-whitespace body
+
+FORMAT_NUMBER_INVALID_TYPE=\
+    In &lt;formatNumber&gt;, invalid 'type' attribute: "{0}"
+
+FORMAT_NUMBER_NO_VALUE=\
+    &lt;formatNumber&gt; needs 'value' attribute or non-whitespace body
+
+FORMAT_NUMBER_PARSE_ERROR=\
+    In &lt;formatNumber&gt;, 'value' attribute can not be parsed into java.lang.Number: "{0}"
+
+FORMAT_NUMBER_CURRENCY_ERROR=\
+    In &lt;formatNumber&gt;, unable to set currency
+
+PARSE_NUMBER_INVALID_TYPE=\
+    In &lt;parseNumber&gt;, invalid 'type' attribute: "{0}"
+
+PARSE_NUMBER_NO_VALUE=\
+    &lt;parseNumber&gt; needs 'value' attribute or non-whitespace body
+
+PARSE_NUMBER_NO_PARSE_LOCALE=\
+    In &lt;parseNumber&gt;, a parse locale can not be established
+
+PARSE_NUMBER_PARSE_ERROR=\
+    In &lt;parseNumber&gt;, 'value' attribute can not be parsed: "{0}"
+
+FORMAT_DATE_INVALID_TYPE=\
+    In &lt;formatDate&gt;, invalid 'type' attribute: "{0}"
+
+FORMAT_DATE_BAD_TIMEZONE=\
+    In &lt;formatDate&gt;, 'timeZone' must be an instance of java.lang.String or java.util.TimeZone
+
+FORMAT_DATE_INVALID_DATE_STYLE=\
+    In &lt;formatDate&gt;, invalid 'dateStyle' attribute: "{0}"
+
+FORMAT_DATE_INVALID_TIME_STYLE=\
+    In &lt;formatDate&gt;, invalid 'timeStyle' attribute: "{0}"
+
+PARSE_DATE_INVALID_TYPE=\
+    In &lt;parseDate&gt;, invalid 'type' attribute: "{0}"
+
+PARSE_DATE_BAD_TIMEZONE=\
+    In &lt;parseDate&gt;, 'timeZone' must be an instance of java.lang.String or java.util.TimeZone
+
+PARSE_DATE_INVALID_DATE_STYLE=\
+    In &lt;parseDate&gt;, invalid 'dateStyle' attribute: "{0}"
+
+PARSE_DATE_INVALID_TIME_STYLE=\
+    In &lt;parseDate&gt;, invalid 'timeStyle' attribute: "{0}"
+
+PARSE_DATE_NO_VALUE=\
+    &lt;parseDate&gt; needs 'value' attribute or non-whitespace body
+
+PARSE_DATE_PARSE_ERROR=\
+    In &lt;parseDate&gt;, 'value' attribute can not be parsed: "{0}"
+
+PARSE_DATE_NO_PARSE_LOCALE=\
+    In &lt;parseDate&gt;, a parse locale can not be established
+
+# SQL
+
+DRIVER_INVALID_CLASS=\
+    In &lt;driver&gt;, invalid driver class name: "{0}"
+
+DATASOURCE_INVALID=\
+    Unable to get connection, DataSource invalid: "{0}"
+ 
+JDBC_PARAM_COUNT=\
+    Invalid number of JDBC parameters specified.
+
+PARAM_BAD_VALUE=\
+    Invalid or out of bounds value specified in parameter.
+ 
+TRANSACTION_NO_SUPPORT=\
+    In &lt;transaction&gt;, datasource does not support transactions
+
+TRANSACTION_COMMIT_ERROR=\
+    In &lt;transaction&gt;, error committing transaction: "{0}"
+
+TRANSACTION_INVALID_ISOLATION=\
+    In &lt;transaction&gt;, invalid transaction isolation
+
+NOT_SUPPORTED=\
+    Not supported
+
+ERROR_GET_CONNECTION=\
+    Error getting connection: "{0}"
+
+ERROR_NESTED_DATASOURCE=\
+    It is illegal to specify a DataSource when nested within a &lt;transaction&gt;
+
+SQL_PARAM_OUTSIDE_PARENT=\
+    &lt;param&gt; or &lt;dateParam&gt; must be subtag of SQLExecutionTag actions like &lt;query&gt; or &lt;update&gt;
+
+SQL_NO_STATEMENT=\
+    No SQL statement specified
+
+SQL_PROCESS_ERROR=\
+    Error processing SQL: "{0}"
+
+SQL_DATASOURCE_INVALID_TYPE=\
+    'dataSource' is neither a String nor a javax.sql.DataSource
+
+SQL_DATASOURCE_NULL=\
+    'dataSource' is null
+
+SQL_MAXROWS_PARSE_ERROR=\
+    Error parsing 'javax.servlet.jsp.jstl.sql.maxRows' configuration setting: "{0}"
+
+SQL_MAXROWS_INVALID=\
+    'javax.servlet.jsp.jstl.sql.maxRows' configuration setting neither an Integer nor a String
+
+SQL_DATE_PARAM_INVALID_TYPE=\
+    In &lt;dateParam&gt;, invalid 'type' attribute: "{0}"
+
+# XML
+
+FOREACH_NOT_NODESET=\
+    &lt;forEach&gt; can't iterate over XPath expressions that don't return a node-set
+
+PARAM_NO_VALUE=\
+    &lt;param&gt; needs 'value' attribute or non-whitespace body
+
+PARAM_OUTSIDE_TRANSFORM=\
+    &lt;param&gt; outside &lt;transform&gt;
+
+PARSE_INVALID_SOURCE=\
+    Unrecognized object supplied as 'xml' attribute to &lt;parse&gt;
+
+PARSE_NO_SAXTRANSFORMER=\
+    Filter supplied to &lt;parse&gt;, but default TransformerFactory \
+    does not support SAX.
+
+TRANSFORM_NO_TRANSFORMER=\
+    &lt;transform&gt; was not passed an XSLT stylesheet
+
+TRANSFORM_SOURCE_INVALID_LIST=\
+    &lt;transform&gt; encountered an invalid java.util.List while processing 'xml' attribute.  This error is typically caused if you pass a node-set with more than one node to &lt;transform&gt;'s 'xml' attribute.
+
+TRANSFORM_SOURCE_UNRECOGNIZED=\
+    &lt;transform&gt; encountered an unknown type while processing 'xml' attribute
+
+TRANSFORM_XSLT_UNRECOGNIZED=\
+    &lt;transform&gt; encountered an unknown type while processing 'xslt' attribute
+
+UNABLE_TO_RESOLVE_ENTITY=\
+    Could not resolve entity reference: "{0}"
+
+#########################################################################
+# JSTL core TLV messages
+#########################################################################
+
+# Parameters 
+
+TLV_PARAMETER_ERROR=\
+    Invalid value for "{0}" validator parameter in TLD
+
+# Generic errors
+
+TLV_ILLEGAL_BODY=\
+    Encountered illegal body of tag "{0}" tag, given its attributes.
+
+TLV_MISSING_BODY=\
+    A body is necessary inside the "{0}" tag, given its attributes.
+
+TLV_ILLEGAL_CHILD_TAG=\
+    Illegal child tag in "{0}:{1}" tag: "{2}" tag
+
+TLV_ILLEGAL_TEXT_BODY=\
+    Illegal text inside "{0}:{1}" tag: "{2}...".
+
+TLV_INVALID_ATTRIBUTE=\
+    Invalid "{0}" attribute in "{1}" tag: "{2}"
+
+TLV_ILLEGAL_ORPHAN=\
+    Invalid use of "{0}" tag outside legitimate parent tag
+
+TLV_PARENT_WITHOUT_SUBTAG=\
+    Illegal "{0}" without child "{1}" tag
+
+# Errors customized to particular tags (sort of)  :-)
+
+TLV_ILLEGAL_ORDER=\
+    Illegal "{0}" after "{1}:{2}" tag in "{1}:{3}" tag.
+
+TLV_ILLEGAL_PARAM=\
+    Illegal "{0}:{1}" tag within "{0}:{2} {3}='...'" tag
+
+TLV_DANGLING_SCOPE=\
+    Illegal 'scope' attribute without 'var' in "{0}" tag.
+
+TLV_EMPTY_VAR=\
+    Empty 'var' attribute in "{0}" tag.
+
+SET_NO_SETTER_METHOD=No setter method in &lt;set&gt; for property "{0}"
+
+IMPORT_ABS_ERROR=Problem accessing the absolute URL "{0}". {1}
+
+XPATH_ERROR_EVALUATING_EXPR=Error evaluating XPath expression "{0}": {1}
+
+XPATH_ILLEGAL_ARG_EVALUATING_EXPR=Illegal argument evaluating XPath expression "{0}": {1}
+
+XPATH_ERROR_XOBJECT=Error accessing data in XObject: {0}
diff --git a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/Resources_ja.properties b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/Resources_ja.properties
new file mode 100644
index 000000000..8452ff888
--- /dev/null
+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/Resources_ja.properties
@@ -0,0 +1,297 @@
+#########################################################################
+# Conventions:
+# - For error messages from particular tags, the resource should
+#     - (a) have a name beginning with TAGNAME_
+#     - (b) contain the name of the tag within the message
+# - Generic tag messages -- i.e., those used in more than one tag --
+#   should begin with TAG_
+# - Errors for TagLibraryValidators should begin with TLV_
+#########################################################################
+
+
+#########################################################################
+# Generic tag error messages
+#########################################################################
+
+TAG_NULL_ATTRIBUTE=\
+    &lt;{1}&gt; \u5185\u306b\u3042\u308b "{0}" \u5c5e\u6027\u304c "null" \u3082\u3057\u304f\u306f "" \u3067\u3042\u308b\u3068\u4e0d\u6b63\u306b\u8a55\u4fa1\u3057\u307e\u3057\u305f\u3002
+
+#########################################################################
+# Specific tag error messages
+#########################################################################
+
+# CORE
+
+CHOOSE_EXCLUSIVITY=\
+    \uff11\u3064\u3057\u304b\u5b58\u5728\u306a\u3044 &lt;choose&gt; \u306e\u4e0b\u4f4d\u30bf\u30b0\u306f\u30dc\u30c7\u30a3\u306e\u4e2d\u8eab\u3092\u305d\u306e\u307e\u307e\u8a55\u4fa1\u3057\u307e\u3059
+
+EXPR_BAD_VALUE=\
+    &lt;expr&gt; \u5185\u3067\u3001\u5c5e\u6027\u5024="{0}" \u304c\u6b63\u3057\u304f\u8a55\u4fa1\u3055\u308c\u305a\u3001"default" \u5c5e\u6027\u3084\u30db\u30ef\u30a4\u30c8\u30b9\u30da\u30fc\u30b9\u306e\u306a\u3044\u30b3\u30f3\u30c6\u30f3\u30c4\u304c\u30bf\u30b0\u306e\u4e2d\u306b\u5b58\u5728\u3057\u307e\u305b\u3093
+
+FOREACH_STEP_NO_RESULTSET=\
+    &lt;forEach&gt; \u3067 ResultSet \u3092\u53cd\u5fa9\u51e6\u7406\u3057\u3088\u3046\u3068\u3057\u305f\u3068\u3053\u308d\u3001step \u306e\u5024\u3092 1 \u3088\u308a\u5927\u304d\u304f\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093
+
+FOREACH_BAD_ITEMS=\
+    &lt;forEach&gt; \u5185\u3067\u4f9b\u7d66\u3055\u308c\u305f "items" \u3092\u53cd\u5fa9\u51e6\u7406\u3059\u308b\u65b9\u6cd5\u304c\u4e0d\u660e\u3067\u3059
+
+IMPORT_BAD_RELATIVE=\
+    URL \u30bf\u30b0\u3067 "context" \u5c5e\u6027\u3092\u6307\u5b9a\u3059\u308b\u969b\u3001"context" \u304a\u3088\u3073 "url" \u306e\u4e21\u65b9\u306e\u5024\u306f "/" \u3067\u59cb\u307e\u3063\u3066\u3044\u306a\u3044\u3068\u3044\u3051\u307e\u305b\u3093
+
+IMPORT_REL_WITHOUT_HTTP=\
+    \u975e HTTP \u8981\u6c42\u3067\u306f\u3001URL\u3092\u76f8\u5bfe\u6307\u5b9a\u3059\u308b &lt;import&gt; \u3092\u8a31\u53ef\u3057\u3066\u3044\u307e\u305b\u3093
+
+IMPORT_REL_WITHOUT_DISPATCHER=\
+    Context: "{0}" \u304a\u3088\u3073 URL: "{1}" \u306b\u5bfe\u3057\u3066 RequestDispatcher \u3092\u53d6\u5f97\u3067\u304d\u307e\u305b\u3093\u3002\u6307\u5b9a\u3057\u305f\u5024\u3092\u78ba\u8a8d\u3059\u308b\u304b\u3001\u3082\u3057\u304f\u306f\u3001Context \u3092\u76f8\u4e92\u7684\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u304f\u3060\u3055\u3044
+
+IMPORT_IO=\
+    &lt;import&gt; \u3067\u3001"{0}" \u3092\u8aad\u307f\u8fbc\u307f\u4e2d\u306b\u5165\u51fa\u529b\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f
+
+IMPORT_ILLEGAL_STREAM=\
+    &lt;import&gt \u5185\u3067\u4e88\u671f\u305b\u306c\u5185\u90e8\u30a8\u30e9\u30fc: \u5bfe\u8c61\u3068\u306a\u3063\u305f Servlet \u3067 getWriter() \u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3073\u51fa\u3055\u308c\u3066\u3044\u308b\u306e\u306b getOutputStream() \u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u305d\u3046\u3068\u3057\u307e\u3057\u305f
+
+IMPORT_ILLEGAL_WRITER=\
+    &lt;import&gt \u5185\u3067\u4e88\u671f\u305b\u306c\u5185\u90e8\u30a8\u30e9\u30fc: \u5bfe\u8c61\u3068\u306a\u3063\u305f Servlet \u3067 getOutputStream() \u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3073\u51fa\u3055\u308c\u3066\u3044\u308b\u306e\u306b getWriter() \u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u305d\u3046\u3068\u3057\u307e\u3057\u305f
+
+#IMPORT_ILLEGAL_GETSTRING=\
+#    Unexpected internal error during &lt;import&gt: \
+#    Target servlet called neither getOutputStream() nor getWriter()
+
+PARAM_OUTSIDE_PARENT=\
+    &lt;import&gt; \u3082\u3057\u304f\u306f &lt;urlEncode&gt; \u306e\u5916\u5074\u306b &lt;param&gt; \u304c\u3042\u308a\u307e\u3059
+
+PARAM_ENCODE_BOOLEAN=\
+    &lt;param&gt; \u3067\u306f\u3001"encode" \u306f "true" \u3082\u3057\u304f\u306f "false" \u3067\u306a\u3044\u3068\u3044\u3051\u307e\u305b\u3093\u3002\u4ee3\u308f\u308a\u306b "{0}" \u3092\u53d6\u5f97\u3057\u307e\u3057\u305f
+
+SET_BAD_SCOPE=\
+    &lt;set&gt; \u306b\u5bfe\u3057\u3001\u7121\u52b9\u306a "scope" \u5c5e\u6027\u3067\u3059:  "{0}"
+
+SET_INVALID_PROPERTY=\
+    &lt;set&gt; \u306b\u5bfe\u3057\u3001\u7121\u52b9\u306a\u30d7\u30ed\u30d1\u30c6\u30a3\u3067\u3059:  "{0}"
+
+SET_INVALID_TARGET=\
+    &lt;set&gt; \u306b\u5bfe\u3057\u3001\u7121\u52b9\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u30bb\u30c3\u30c8\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u307e\u3059
+
+SET_NO_VALUE=\
+    &lt;set&gt; \u3067\u306f\u3001\u30db\u30ef\u30a4\u30c8\u30b9\u30da\u30fc\u30b9\u306e\u306a\u3044\u30dc\u30c7\u30a3\u3082\u3057\u304f\u306f "value" \u5c5e\u6027\u304c\u5fc5\u8981\u3067\u3059
+
+URLENCODE_NO_VALUE=\
+    &lt;urlEncode&gt; \u3067\u306f\u3001\u30db\u30ef\u30a4\u30c8\u30b9\u30da\u30fc\u30b9\u306e\u306a\u3044\u30dc\u30c7\u30a3\u3082\u3057\u304f\u306f "value" \u5c5e\u6027\u304c\u5fc5\u8981\u3067\u3059
+
+WHEN_OUTSIDE_CHOOSE=\
+    \u76f4\u8fd1\u306e\u89aa\u30bf\u30b0\u3067\u3042\u308b &lt;choose&gt; \u3092\u30bb\u30c3\u30c8\u305b\u305a\u306b &lt;when&gt; \u30b9\u30bf\u30a4\u30eb\u30fb\u30bf\u30b0\u3092\u4f7f\u3046\u3053\u3068\u306f\u6b63\u3057\u304f\u3042\u308a\u307e\u305b\u3093
+
+# I18N
+
+LOCALE_NO_LANGUAGE=\
+    &lt;setLocale&gt; \u3067\u3001'value' \u5c5e\u6027\u306b\u6307\u5b9a\u3057\u305f\u8a00\u8a9e\u30b3\u30fc\u30c9\u304c\u307e\u3061\u304c\u3063\u3066\u3044\u307e\u3059
+
+LOCALE_EMPTY_COUNTRY=\
+    &lt;setLocale&gt; \u3067\u3001'value' \u5c5e\u6027\u306b\u6307\u5b9a\u3057\u305f\u56fd\u30b3\u30fc\u30c9\u304c\u5b58\u5728\u3057\u307e\u305b\u3093
+
+PARAM_OUTSIDE_MESSAGE=\
+    &lt;message&gt; \u306e\u5916\u5074\u306b &lt;param&gt; \u304c\u3042\u308a\u307e\u3059
+
+MESSAGE_NO_KEY=\
+    &lt;message&gt; \u3067\u306f 'key' \u5c5e\u6027\u3082\u3057\u304f\u306f\u30db\u30ef\u30a4\u30c8\u30b9\u30da\u30fc\u30b9\u306e\u306a\u3044\u30dc\u30c7\u30a3\u304c\u5fc5\u8981\u3067\u3059
+
+FORMAT_NUMBER_INVALID_TYPE=\
+    &lt;formatNumber&gt; \u3067\u3001\u7121\u52b9\u306a 'type' \u5c5e\u6027\u3067\u3059: "{0}"
+
+FORMAT_NUMBER_NO_VALUE=\
+    &lt;formatNumber&gt; \u3067\u306f 'value' \u5c5e\u6027\u3082\u3057\u304f\u306f\u30db\u30ef\u30a4\u30c8\u30b9\u30da\u30fc\u30b9\u306e\u306a\u3044\u30dc\u30c7\u30a3\u304c\u5fc5\u8981\u3067\u3059
+
+FORMAT_NUMBER_PARSE_ERROR=\
+    &lt;formatNumber&gt; \u5185\u306b\u3042\u308b\u3001'value' \u5c5e\u6027\u3092 java.lang.Number \u578b\u3067\u89e3\u6790\u3067\u304d\u307e\u305b\u3093: "{0}"
+
+FORMAT_NUMBER_CURRENCY_ERROR=\
+    &lt;formatNumber&gt; \u3067\u3001\u901a\u8ca8\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u30bb\u30c3\u30c8\u3067\u304d\u307e\u305b\u3093
+
+PARSE_NUMBER_INVALID_TYPE=\
+    &lt;parseNumber&gt; \u3067\u3001\u7121\u52b9\u306a 'type' \u5c5e\u6027\u3067\u3059: "{0}"
+
+PARSE_NUMBER_NO_VALUE=\
+    &lt;parseNumber&gt; \u3067\u306f 'value' \u5c5e\u6027\u3082\u3057\u304f\u306f\u30db\u30ef\u30a4\u30c8\u30b9\u30da\u30fc\u30b9\u306e\u306a\u3044\u30dc\u30c7\u30a3\u304c\u5fc5\u8981\u3067\u3059
+
+PARSE_NUMBER_NO_PARSE_LOCALE=\
+    &lt;parseNumber&gt; \u5185\u3067\u3001\u89e3\u6790\u3055\u308c\u305f\u30ed\u30b1\u30fc\u30eb\u3092\u78ba\u5b9a\u3067\u304d\u307e\u305b\u3093
+
+PARSE_NUMBER_PARSE_ERROR=\
+    &lt;parseNumber&gt; \u5185\u306b\u3042\u308b\u3001'value' \u5c5e\u6027\u3092\u89e3\u6790\u3067\u304d\u307e\u305b\u3093: "{0}"
+
+FORMAT_DATE_INVALID_TYPE=\
+    &lt;formatDate&gt; \u3067\u3001\u7121\u52b9\u306a 'type' \u5c5e\u6027\u3067\u3059: "{0}"
+
+FORMAT_DATE_BAD_TIMEZONE=\
+    &lt;formatDate&gt; \u3067\u306f\u3001'timeZone' \u306f java.lang.String \u578b\u3082\u3057\u304f\u306f java.util.TimeZone \u578b\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u306a\u3044\u3068\u3044\u3051\u307e\u305b\u3093
+
+FORMAT_DATE_INVALID_DATE_STYLE=\
+    &lt;formatDate&gt; \u3067\u3001\u7121\u52b9\u306a 'dateStyle' \u5c5e\u6027\u3067\u3059: "{0}"
+
+FORMAT_DATE_INVALID_TIME_STYLE=\
+    &lt;formatDate&gt; \u3067\u3001\u7121\u52b9\u306a 'timeStyle' \u5c5e\u6027\u3067\u3059: "{0}"
+
+PARSE_DATE_INVALID_TYPE=\
+    &lt;parseDate&gt; \u3067\u3001\u7121\u52b9\u306a 'type' \u5c5e\u6027\u3067\u3059: "{0}"
+
+PARSE_DATE_BAD_TIMEZONE=\
+    &lt;parseDate&gt; \u5185\u306b\u3042\u308b\u3001'timeZone' \u306f java.lang.String \u578b\u3082\u3057\u304f\u306f java.util.TimeZone \u578b\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u306a\u3044\u3068\u3044\u3051\u307e\u305b\u3093
+
+PARSE_DATE_INVALID_DATE_STYLE=\
+    &lt;parseDate&gt; \u3067\u3001\u7121\u52b9\u306a 'dateStyle' \u5c5e\u6027\u3067\u3059: "{0}"
+
+PARSE_DATE_INVALID_TIME_STYLE=\
+    &lt;parseDate&gt; \u3067\u3001\u7121\u52b9\u306a 'timeStyle' \u5c5e\u6027\u3067\u3059: "{0}"
+
+PARSE_DATE_NO_VALUE=\
+    &lt;parseDate&gt; \u3067\u306f 'value' \u5c5e\u6027\u3082\u3057\u304f\u306f\u30db\u30ef\u30a4\u30c8\u30b9\u30da\u30fc\u30b9\u306e\u306a\u3044\u30dc\u30c7\u30a3\u304c\u5fc5\u8981\u3067\u3059
+
+PARSE_DATE_PARSE_ERROR=\
+    &lt;parseDate&gt; \u5185\u306b\u3042\u308b\u3001'value' \u5c5e\u6027\u3092\u89e3\u6790\u3067\u304d\u307e\u305b\u3093: "{0}"
+
+PARSE_DATE_NO_PARSE_LOCALE=\
+    &lt;parseDate&gt; \u5185\u3067\u3001\u89e3\u6790\u3055\u308c\u305f\u30ed\u30b1\u30fc\u30eb\u3092\u78ba\u5b9a\u3067\u304d\u307e\u305b\u3093
+
+# SQL
+
+DRIVER_INVALID_CLASS=\
+    &lt;driver&gt; \u3067\u3001\u7121\u52b9\u306a\u30c9\u30e9\u30a4\u30d0\u30fb\u30af\u30e9\u30b9\u540d\u3092\u6307\u5b9a\u3057\u307e\u3057\u305f: "{0}"
+
+DATASOURCE_INVALID=\
+    DataSource \u304c\u7121\u52b9\u3067\u3042\u308b\u305f\u3081\u3001Connection \u3092\u53d6\u5f97\u3067\u304d\u307e\u305b\u3093: "{0}"
+
+JDBC_PARAM_COUNT=\
+    \u6307\u5b9a\u3057\u305f JDBC \u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u6570\u304c\u7121\u52b9\u3067\u3059
+
+PARAM_BAD_VALUE=\
+    \u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u6307\u5b9a\u3057\u305f\u5024\u304c\u7121\u52b9\u3067\u3042\u308b\u304b\u7bc4\u56f2\u5916\u3067\u3059
+
+TRANSACTION_NO_SUPPORT=\
+    &lt;transaction&gt; \u5185\u306b\u3042\u308b\u3001DataSource \u306f\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u305b\u3093
+
+TRANSACTION_COMMIT_ERROR=\
+    &lt;transaction&gt; \u306b\u304a\u3044\u3066\u3001\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u306e\u30b3\u30df\u30c3\u30c8\u6642\u306b\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f: "{0}"
+
+TRANSACTION_INVALID_ISOLATION=\
+    &lt;transaction&gt; \u306b\u304a\u3044\u3066\u3001\u7121\u52b9\u306a\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u906e\u65ad\u30ec\u30d9\u30eb\u3092\u6307\u5b9a\u3057\u307e\u3057\u305f
+
+NOT_SUPPORTED=\
+    \u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u305b\u3093
+
+ERROR_GET_CONNECTION=\
+    Connection \u306e\u53d6\u5f97\u6642\u306b\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f: "{0}"
+
+ERROR_NESTED_DATASOURCE=\
+    &lt;transaction&gt; \u306e\u4e2d\u3067\u5165\u308c\u5b50\u3068\u306a\u3063\u305f\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u306f\u4e0d\u6b63\u3067\u3059
+
+SQL_PARAM_OUTSIDE_PARENT=\
+    &lt;param&gt; \u307e\u305f\u306f &lt;dateParam&gt; \u306f &lt;query&gt; \u3082\u3057\u304f\u306f &lt;update&gt; \u306e\u3088\u3046\u306b SQLExecutionTag \u547d\u4ee4\u306e\u4e0b\u4f4d\u30bf\u30b0\u3067\u306a\u3051\u308c\u3070\u3044\u3051\u307e\u305b\u3093
+
+SQL_NO_STATEMENT=\
+    SQL \u30b9\u30c6\u30fc\u30c8\u30e1\u30f3\u30c8\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u307e\u305b\u3093
+
+SQL_PROCESS_ERROR=\
+    SQL \u306e\u51e6\u7406\u6642\u306b\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f: "{0}"
+
+SQL_DATASOURCE_INVALID_TYPE=\
+    'dataSource' \u304c String \u578b \u3067\u3082 javax.sql.DataSource \u578b\u306e\u3069\u3061\u3089\u3067\u3082\u3042\u308a\u307e\u305b\u3093
+
+SQL_DATASOURCE_NULL=\
+    'dataSource' \u304c null \u3067\u3059
+
+SQL_MAXROWS_PARSE_ERROR=\
+    'javax.servlet.jsp.jstl.sql.maxRows' \u306e\u74b0\u5883\u8a2d\u5b9a\u3067\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f: "{0}"
+
+SQL_MAXROWS_INVALID=\
+    'javax.servlet.jsp.jstl.sql.maxRows' \u3067\u74b0\u5883\u8a2d\u5b9a\u3057\u305f\u5024\u306f Integer \u578b \u3067\u3082 String \u578b\u306e\u3069\u3061\u3089\u3067\u3082\u3042\u308a\u307e\u305b\u3093
+
+SQL_DATE_PARAM_INVALID_TYPE=\
+    &lt;dateParam&gt; \u3067\u3001\u7121\u52b9\u306a 'type' \u5c5e\u6027\u3067\u3059: "{0}"
+
+# XML
+
+FOREACH_NOT_NODESET=\
+    \u30ce\u30fc\u30c9\u30bb\u30c3\u30c8\u306e\u8fd4\u3055\u308c\u306a\u3044 XPath \u8868\u73fe\u306b\u5bfe\u3057 &lt;forEach&gt; \u306f\u53cd\u5fa9\u51e6\u7406\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093
+
+PARAM_NO_VALUE=\
+    &lt;param&gt; \u3067\u306f 'value' \u5c5e\u6027\u3082\u3057\u304f\u306f\u30db\u30ef\u30a4\u30c8\u30b9\u30da\u30fc\u30b9\u306e\u306a\u3044\u30dc\u30c7\u30a3\u304c\u5fc5\u8981\u3067\u3059
+
+PARAM_OUTSIDE_TRANSFORM=\
+    &lt;transform&gt; \u306e\u5916\u5074\u306b &lt;param&gt; \u304c\u3042\u308a\u307e\u3059
+
+PARSE_INVALID_SOURCE=\
+    &lt;parse&gt; \u306b\u5bfe\u3057 'xml' \u5c5e\u6027\u3068\u3057\u3066\u4f9b\u7d66\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8a8d\u8b58\u3067\u304d\u307e\u305b\u3093
+
+PARSE_NO_SAXTRANSFORMER=\
+    &lt;parse&gt; \u306b\u5bfe\u3057\u30d5\u30a3\u30eb\u30bf\u30fc\u304c\u4f9b\u7d66\u3055\u308c\u307e\u3057\u305f\u304c\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306e TransformerFactory \u304c SAX \u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u305b\u3093
+
+TRANSFORM_NO_TRANSFORMER=\
+    &lt;transform&gt; \u306b\u5bfe\u3057 XSLT \u30b9\u30bf\u30a4\u30eb\u30b7\u30fc\u30c8\u304c\u901a\u308a\u307e\u305b\u3093
+
+TRANSFORM_SOURCE_INVALID_LIST=\
+    &lt;transform&gt; \u5185\u3067 'xml' \u5c5e\u6027\u306e\u51e6\u7406\u4e2d\u306b\u7121\u52b9\u306a java.util.List \u3068\u906d\u9047\u3057\u307e\u3057\u305f\u3002\u3053\u308c\u306f\u3001&lt;transform&gt; \u5185\u306e 'xml' \u5c5e\u6027\u306b\u5bfe\u3057\u3066 1 \u4ee5\u4e0a\u306e\u30ce\u30fc\u30c9\u3067\u69cb\u6210\u3055\u308c\u308b\u30ce\u30fc\u30c9\u30bb\u30c3\u30c8\u3092\u901a\u3055\u306a\u3044\u5834\u5408\u306b\u767a\u751f\u3059\u308b\u5178\u578b\u7684\u306a\u30a8\u30e9\u30fc\u3067\u3059
+
+TRANSFORM_SOURCE_UNRECOGNIZED=\
+    &lt;transform&gt; \u5185\u3067 'xml' \u5c5e\u6027\u306e\u51e6\u7406\u4e2d\u306b\u672a\u77e5\u306e\u578b\u3068\u906d\u9047\u3057\u307e\u3057\u305f
+
+TRANSFORM_XSLT_UNRECOGNIZED=\
+    &lt;transform&gt; \u5185\u3067 'xslt' \u5c5e\u6027\u306e\u51e6\u7406\u4e2d\u306b\u672a\u77e5\u306e\u578b\u3068\u906d\u9047\u3057\u307e\u3057\u305f
+
+UNABLE_TO_RESOLVE_ENTITY=\
+    \u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u53c2\u7167\u3092\u89e3\u6c7a\u3067\u304d\u307e\u305b\u3093: "{0}"
+
+#########################################################################
+# JSTL core TLV messages
+#########################################################################
+
+# Parameters
+
+TLV_PARAMETER_ERROR=\
+    TLD \u306b\u3088\u308b\u3068 "{0}" \u6709\u52b9\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u5bfe\u5fdc\u3059\u308b\u5024\u304c\u7121\u52b9\u3067\u3059
+
+# Generic errors
+
+TLV_ILLEGAL_BODY=\
+    \u5c5e\u6027\u3092\u6307\u5b9a\u3057\u307e\u3057\u305f\u304c\u3001"{0}" \u30bf\u30b0\u3067\u4e0d\u6b63\u306a\u30dc\u30c7\u30a3\u306b\u906d\u9047\u3057\u307e\u3057\u305f
+
+TLV_MISSING_BODY=\
+    \u5c5e\u6027\u3092\u6307\u5b9a\u3057\u307e\u3057\u305f\u304c\u3001\u30dc\u30c7\u30a3\u306f "{0}" \u30bf\u30b0\u306e\u4e2d\u306b\u5fc5\u8981\u3067\u3059
+
+TLV_ILLEGAL_CHILD_TAG=\
+    "{0}:{1}" \u30bf\u30b0\u306b\u4e0d\u6b63\u306a\u4e0b\u4f4d\u30bf\u30b0\u304c\u3042\u308a\u307e\u3059: "{2}" \u30bf\u30b0
+
+TLV_ILLEGAL_TEXT_BODY=\
+    "{0}:{1}" \u30bf\u30b0\u306e\u4e2d\u306b\u4e0d\u6b63\u306a\u30c6\u30ad\u30b9\u30c8\u304c\u3042\u308a\u307e\u3059: "{2}...".
+
+TLV_INVALID_ATTRIBUTE=\
+    "{1}" \u306b\u7121\u52b9\u306a "{0}" \u5c5e\u6027\u304c\u3042\u308a\u307e\u3059: "{2}"
+
+TLV_ILLEGAL_ORPHAN=\
+    \u9069\u5207\u306a\u89aa\u30bf\u30b0\u306e\u5916\u5074\u306b\u3042\u308b "{0}" \u30bf\u30b0\u306e\u4f7f\u3044\u65b9\u306f\u6b63\u3057\u304f\u3042\u308a\u307e\u305b\u3093
+
+TLV_PARENT_WITHOUT_SUBTAG=\
+    \u4e0b\u4f4d\u3067\u3042\u308b "{1}" \u30bf\u30b0\u306e\u306a\u3044 "{0}" \u306f\u6b63\u3057\u304f\u3042\u308a\u307e\u305b\u3093
+
+# Errors customized to particular tags (sort of)  :-)
+
+TLV_ILLEGAL_ORDER=\
+    "{1}:{3}" \u30bf\u30b0\u3067\u306f\u3001"{1}:{2}" \u30bf\u30b0\u306e\u5f8c\u306b\u3042\u308b "{0}" \u306f\u6b63\u3057\u304f\u3042\u308a\u307e\u305b\u3093
+
+TLV_ILLEGAL_PARAM=\
+    "{0}:{2} {3}='...'" \u30bf\u30b0\u306e\u4e2d\u306b\u3042\u308b "{0}:{1}" \u30bf\u30b0\u306f\u6b63\u3057\u304f\u3042\u308a\u307e\u305b\u3093
+
+TLV_DANGLING_SCOPE=\
+    "{0}" \u30bf\u30b0\u3067 'var' \u304c\u5b58\u5728\u3057\u306a\u3044\u306e\u306b 'scope' \u5c5e\u6027\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u306f\u6b63\u3057\u304f\u3042\u308a\u307e\u305b\u3093
+
+TLV_EMPTY_VAR=\
+    "{0}" \u30bf\u30b0\u3067 'var' \u5c5e\u6027\u304c\u7a7a\u3067\u3059
+
+SET_NO_SETTER_METHOD=\
+    &lt;set&gt; \u306b\u304a\u3044\u3066\u3001\u30d7\u30ed\u30d1\u30c6\u30a3 "{0}" \u306b\u5bfe\u5fdc\u3059\u308b setter \u30e1\u30bd\u30c3\u30c9\u304c\u5b58\u5728\u3057\u307e\u305b\u3093
+
+IMPORT_ABS_ERROR=Problem accessing the absolute URL "{0}". {1}
+
+XPATH_ERROR_EVALUATING_EXPR=Error evaluating XPath expression "{0}": {1}
+
+XPATH_ILLEGAL_ARG_EVALUATING_EXPR=Illegal argument evaluating XPath expression "{0}": {1}
+
+XPATH_ERROR_XOBJECT=Error accessing data in XObject: {0}
diff --git a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/SetDateTimeZoneSupport.java b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/SetDateTimeZoneSupport.java
new file mode 100644
index 000000000..5cedb8b17
--- /dev/null
+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/SetDateTimeZoneSupport.java
@@ -0,0 +1,90 @@
+/*
+ * Copyright 1999-2004 The Apache Software Foundation.
+ * Modifications, Copyright 2005 Joda.org
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */ 
+
+package org.joda.time.contrib.jsptag;
+
+import org.joda.time.DateTimeZone;
+import javax.servlet.jsp.JspException;
+import javax.servlet.jsp.PageContext;
+import javax.servlet.jsp.jstl.core.Config;
+import javax.servlet.jsp.tagext.TagSupport;
+
+/**
+ * Support for tag handlers for &lt;setDateTimeZone&gt;.
+ * @author Jan Luehe
+ * @author Jim Newsham
+ */
+public abstract class SetDateTimeZoneSupport extends TagSupport {
+
+  protected Object value;                      // 'value' attribute
+  private int scope;                           // 'scope' attribute
+  private String var;                          // 'var' attribute
+
+  public SetDateTimeZoneSupport() {
+    super();
+    init();
+  }
+
+  // resets local state
+  private void init() {
+    value = null;
+    var = null;
+    scope = PageContext.PAGE_SCOPE;
+  }
+
+  public void setScope(String scope) {
+    this.scope = Util.getScope(scope);
+  }
+
+  public void setVar(String var) {
+    this.var = var;
+  }
+
+  public int doEndTag() throws JspException {
+    DateTimeZone dateTimeZone = null;
+    if (value == null) {
+      dateTimeZone = DateTimeZone.UTC;
+    }
+    else if (value instanceof String) {
+      try {
+        dateTimeZone = DateTimeZone.forID((String) value);
+      }
+      catch(IllegalArgumentException iae) {
+        dateTimeZone = DateTimeZone.UTC;
+      }
+    } 
+    else {
+      dateTimeZone = (DateTimeZone) value;
+    }
+
+    if (var != null) {
+      pageContext.setAttribute(var, dateTimeZone, scope);
+    } 
+    else {
+      Config.set(pageContext, DateTimeZoneSupport.FMT_TIME_ZONE, 
+      dateTimeZone, scope);
+    }
+
+    return EVAL_PAGE;
+  }
+
+  // Releases any resources we may have (or inherit)
+  public void release() {
+    init();
+  }
+  
+}
diff --git a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/SetDateTimeZoneTag.java b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/SetDateTimeZoneTag.java
new file mode 100644
index 000000000..608166f2c
--- /dev/null
+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/SetDateTimeZoneTag.java
@@ -0,0 +1,35 @@
+/*
+ * Copyright 1999-2004 The Apache Software Foundation.
+ * Modifications, Copyright 2005 Joda.org
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */ 
+
+package org.joda.time.contrib.jsptag;
+
+import javax.servlet.jsp.JspTagException;
+
+/**
+ * <p>A handler for &lt;setDateTimeZone&gt; that supports rtexprvalue-based
+ * attributes.</p>
+ * @author Jan Luehe
+ * @author Jim Newsham
+ */
+public class SetDateTimeZoneTag extends SetDateTimeZoneSupport {
+
+  // for tag attribute
+  public void setValue(Object value) throws JspTagException {
+    this.value = value;
+  }
+
+}
diff --git a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/Util.java b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/Util.java
new file mode 100644
index 000000000..251869b82
--- /dev/null
+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/Util.java
@@ -0,0 +1,662 @@
+/*
+ * Copyright 1999-2004 The Apache Software Foundation.
+ * Modifications, Copyright 2005 Joda.org
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */ 
+
+package org.joda.time.contrib.jsptag;
+
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.io.OutputStreamWriter;
+import java.text.DateFormat;
+import java.text.NumberFormat;
+import java.util.Enumeration;
+import java.util.Locale;
+import java.util.MissingResourceException;
+import java.util.ResourceBundle;
+import java.util.Vector;
+import javax.servlet.ServletResponse;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.jsp.JspException;
+import javax.servlet.jsp.PageContext;
+import javax.servlet.jsp.jstl.core.Config;
+import javax.servlet.jsp.jstl.fmt.LocalizationContext;
+import javax.servlet.jsp.tagext.Tag;
+
+/**
+ * <p>Utilities in support of tag-handler classes.</p>
+ * @author Jan Luehe
+ * @author Jim Newsham
+ */
+public class Util {
+
+  private static final String REQUEST = "request";   
+  private static final String SESSION = "session";   
+  private static final String APPLICATION = "application"; 
+  private static final char HYPHEN = '-';
+  private static final char UNDERSCORE = '_';
+
+  private static final Locale EMPTY_LOCALE = new Locale("", "");
+
+  static final String REQUEST_CHAR_SET =
+    "javax.servlet.jsp.jstl.fmt.request.charset";
+  
+  /*
+  * Converts the given string description of a scope to the corresponding
+  * PageContext constant.
+  *
+  * The validity of the given scope has already been checked by the
+  * appropriate TLV.
+  *
+  * @param scope String description of scope
+  *
+  * @return PageContext constant corresponding to given scope description
+  */
+  public static int getScope(String scope) {
+    int ret = PageContext.PAGE_SCOPE; // default
+
+    if (REQUEST.equalsIgnoreCase(scope))
+      ret = PageContext.REQUEST_SCOPE;
+    else if (SESSION.equalsIgnoreCase(scope))
+      ret = PageContext.SESSION_SCOPE;
+    else if (APPLICATION.equalsIgnoreCase(scope))
+      ret = PageContext.APPLICATION_SCOPE;
+
+    return ret;
+  }
+
+  /**
+  * HttpServletRequest.getLocales() returns the server's default locale 
+  * if the request did not specify a preferred language.
+  * We do not want this behavior, because it prevents us from using
+  * the fallback locale. 
+  * We therefore need to return an empty Enumeration if no preferred 
+  * locale has been specified. This way, the logic for the fallback 
+  * locale will be able to kick in.
+  */
+  public static Enumeration getRequestLocales(HttpServletRequest request) {        
+    Enumeration values = request.getHeaders("accept-language");
+    if (values.hasMoreElements()) {
+      // At least one "accept-language". Simply return
+      // the enumeration returned by request.getLocales().
+      // System.out.println("At least one accept-language");
+      return request.getLocales();
+    } 
+    else {
+      // No header for "accept-language". Simply return
+      // the empty enumeration.
+      // System.out.println("No accept-language");
+      return values;
+    }
+  }
+
+  /**
+  * See parseLocale(String, String) for details.
+  */
+  public static Locale parseLocale(String locale) {
+    return parseLocale(locale, null);
+  }
+
+  /**
+  * Parses the given locale string into its language and (optionally)
+  * country components, and returns the corresponding
+  * <tt>java.util.Locale</tt> object.
+  *
+  * If the given locale string is null or empty, the runtime's default
+  * locale is returned.
+  *
+  * @param locale the locale string to parse
+  * @param variant the variant
+  *
+  * @return <tt>java.util.Locale</tt> object corresponding to the given
+  * locale string, or the runtime's default locale if the locale string is
+  * null or empty
+  *
+  * @throws IllegalArgumentException if the given locale does not have a
+  * language component or has an empty country component
+  */
+  public static Locale parseLocale(String locale, String variant) {
+    Locale ret = null;
+    String language = locale;
+    String country = null;
+    int index = -1;
+
+    if (((index = locale.indexOf(HYPHEN)) > -1)
+      || ((index = locale.indexOf(UNDERSCORE)) > -1)) {
+      language = locale.substring(0, index);
+      country = locale.substring(index+1);
+    }
+
+    if ((language == null) || (language.length() == 0)) {
+      throw new IllegalArgumentException(
+      Resources.getMessage("LOCALE_NO_LANGUAGE"));
+    }
+
+    if (country == null) {
+      if (variant != null)
+        ret = new Locale(language, "", variant);
+      else
+        ret = new Locale(language, "");
+    } 
+    else if (country.length() > 0) {
+      if (variant != null)
+        ret = new Locale(language, country, variant);
+      else
+        ret = new Locale(language, country);
+    } 
+    else {
+      throw new IllegalArgumentException(
+      Resources.getMessage("LOCALE_EMPTY_COUNTRY"));
+    }
+
+    return ret;
+  }
+
+
+  /*
+  * Stores the given locale in the response object of the given page
+  * context, and stores the locale's associated charset in the
+  * javax.servlet.jsp.jstl.fmt.request.charset session attribute, which
+  * may be used by the <requestEncoding> action in a page invoked by a
+  * form included in the response to set the request charset to the same as
+  * the response charset (this makes it possible for the container to
+  * decode the form parameter values properly, since browsers typically
+  * encode form field values using the response's charset).
+  *
+  * @param pageContext the page context whose response object is assigned
+  * the given locale
+  * @param locale the response locale
+  */
+  static void setResponseLocale(PageContext pc, Locale locale) {
+    // set response locale
+    ServletResponse response = pc.getResponse();
+    response.setLocale(locale);
+
+    // get response character encoding and store it in session attribute
+    if (pc.getSession() != null) {
+      try {
+        pc.setAttribute(REQUEST_CHAR_SET, response.getCharacterEncoding(),
+          PageContext.SESSION_SCOPE);
+      } 
+      catch (IllegalStateException ex) { 
+        // invalidated session ignored
+      }
+    }
+  }
+
+  /*
+  * Returns the formatting locale to use with the given formatting action
+  * in the given page.
+  *
+  * @param pc The page context containing the formatting action
+  * @param fromTag The formatting action
+  * @param format <tt>true</tt> if the formatting action is of type
+  * <formatXXX> (as opposed to <parseXXX>), and <tt>false</tt> otherwise
+  * (if set to <tt>true</tt>, the formatting locale that is returned by
+  * this method is used to set the response locale).
+  *
+  * @param avail the array of available locales
+  *
+  * @return the formatting locale to use
+  */
+  static Locale getFormattingLocale(PageContext pc, Tag fromTag, 
+    boolean format, Locale[] avail) {
+
+    LocalizationContext locCtxt = null;
+
+    /*
+    // Get formatting locale from enclosing <fmt:bundle>
+    Tag parent = findAncestorWithClass(fromTag, BundleSupport.class);
+    if (parent != null) {
+    /*
+    * use locale from localization context established by parent
+    * <fmt:bundle> action, unless that locale is null
+    * /
+    locCtxt = ((BundleSupport) parent).getLocalizationContext();
+    if (locCtxt.getLocale() != null) {
+    if (format) {
+    setResponseLocale(pc, locCtxt.getLocale());
+    }
+    return locCtxt.getLocale();
+    }
+    }
+    */
+
+    // Use locale from default I18N localization context, unless it is null
+    if ((locCtxt = getLocalizationContext(pc)) != null) {
+      if (locCtxt.getLocale() != null) {
+        if (format) {
+          setResponseLocale(pc, locCtxt.getLocale());
+        }
+        return locCtxt.getLocale();
+      }
+    }
+
+    /*
+    * Establish formatting locale by comparing the preferred locales
+    * (in order of preference) against the available formatting
+    * locales, and determining the best matching locale.
+    */
+    Locale match = null;
+    Locale pref = getLocale(pc, Config.FMT_LOCALE);
+    if (pref != null) {
+      // Preferred locale is application-based
+      match = findFormattingMatch(pref, avail);
+    } 
+    else {
+      // Preferred locales are browser-based 
+      match = findFormattingMatch(pc, avail);
+    }
+    if (match == null) {
+      //Use fallback locale.
+      pref = getLocale(pc, Config.FMT_FALLBACK_LOCALE);
+      if (pref != null) {
+        match = findFormattingMatch(pref, avail);
+      }
+    }
+    if (format && (match != null)) {
+      setResponseLocale(pc, match);
+    }
+
+    return match;
+  }
+
+  /**
+  * Setup the available formatting locales that will be used
+  * by getFormattingLocale(PageContext).
+  */
+  static Locale[] availableFormattingLocales;
+  static {
+    Locale[] dateLocales = DateFormat.getAvailableLocales();
+    Locale[] numberLocales = NumberFormat.getAvailableLocales();
+    Vector vec = new Vector(dateLocales.length);
+    for (int i=0; i<dateLocales.length; i++) {
+      for (int j=0; j<numberLocales.length; j++) {
+        if (dateLocales[i].equals(numberLocales[j])) {
+          vec.add(dateLocales[i]);
+          break;
+        }
+      }
+    }
+    availableFormattingLocales = new Locale[vec.size()];
+    availableFormattingLocales = (Locale[])vec.toArray(availableFormattingLocales);
+    /*
+    for (int i=0; i<availableFormattingLocales.length; i++) {
+    System.out.println("AvailableLocale[" + i + "] " + availableFormattingLocales[i]);
+    }
+    */
+  }
+
+  /*
+  * Returns the formatting locale to use when <fmt:message> is used
+  * with a locale-less localization context.
+  *
+  * @param pc The page context containing the formatting action
+  * @return the formatting locale to use
+  */
+  static Locale getFormattingLocale(PageContext pc) {
+    /*
+    * Establish formatting locale by comparing the preferred locales
+    * (in order of preference) against the available formatting
+    * locales, and determining the best matching locale.
+    */
+    Locale match = null;
+    Locale pref = getLocale(pc, Config.FMT_LOCALE);
+    if (pref != null) {
+      // Preferred locale is application-based
+      match = findFormattingMatch(pref, availableFormattingLocales);
+    }
+    else {
+      // Preferred locales are browser-based 
+      match = findFormattingMatch(pc, availableFormattingLocales);
+    }
+    if (match == null) {
+      //Use fallback locale.
+      pref = getLocale(pc, Config.FMT_FALLBACK_LOCALE);
+      if (pref != null) {
+        match = findFormattingMatch(pref, availableFormattingLocales);
+      }
+    }
+    if (match != null) {
+      setResponseLocale(pc, match);
+    }
+
+    return match;
+  }
+
+  /*
+  * Returns the locale specified by the named scoped attribute or context
+  * configuration parameter.
+  *
+  * <p> The named scoped attribute is searched in the page, request,
+  * session (if valid), and application scope(s) (in this order). If no such
+  * attribute exists in any of the scopes, the locale is taken from the
+  * named context configuration parameter.
+  *
+  * @param pageContext the page in which to search for the named scoped
+  * attribute or context configuration parameter
+  * @param name the name of the scoped attribute or context configuration
+  * parameter
+  *
+  * @return the locale specified by the named scoped attribute or context
+  * configuration parameter, or <tt>null</tt> if no scoped attribute or
+  * configuration parameter with the given name exists
+  */
+  static Locale getLocale(PageContext pageContext, String name) {
+    Locale loc = null;
+
+    Object obj = Config.find(pageContext, name);
+    if (obj != null) {
+      if (obj instanceof Locale) {
+        loc = (Locale) obj;
+      }
+      else {
+        loc = parseLocale((String) obj);
+      }
+    }
+
+    return loc;
+  }
+
+
+  //*********************************************************************
+  // Private utility methods
+
+  /*
+  * Determines the client's preferred locales from the request, and compares
+  * each of the locales (in order of preference) against the available
+  * locales in order to determine the best matching locale.
+  *
+  * @param pageContext Page containing the formatting action
+  * @param avail Available formatting locales
+  *
+  * @return Best matching locale, or <tt>null</tt> if no match was found
+  */
+  private static Locale findFormattingMatch(PageContext pageContext,
+    Locale[] avail) {
+    Locale match = null;
+    for (Enumeration enum_ = 
+      Util.getRequestLocales((HttpServletRequest)pageContext.getRequest());
+      enum_.hasMoreElements(); ) {
+      Locale locale = (Locale)enum_.nextElement();
+      match = findFormattingMatch(locale, avail);
+      if (match != null) {
+        break;
+      }
+    }
+
+    return match;
+  }
+
+  /*
+  * Returns the best match between the given preferred locale and the
+  * given available locales.
+  *
+  * The best match is given as the first available locale that exactly
+  * matches the given preferred locale ("exact match"). If no exact match
+  * exists, the best match is given to an available locale that meets
+  * the following criteria (in order of priority):
+  *  - available locale's variant is empty and exact match for both
+  *    language and country
+  *  - available locale's variant and country are empty, and exact match 
+  *    for language.
+  *
+  * @param pref the preferred locale
+  * @param avail the available formatting locales
+  *
+  * @return Available locale that best matches the given preferred locale,
+  * or <tt>null</tt> if no match exists
+  */
+  private static Locale findFormattingMatch(Locale pref, Locale[] avail) {
+    Locale match = null;
+    boolean langAndCountryMatch = false;
+    for (int i=0; i<avail.length; i++) {
+      if (pref.equals(avail[i])) {
+        // Exact match
+        match = avail[i];
+        break;
+      } 
+      else if (!"".equals(pref.getVariant()) &&
+        "".equals(avail[i].getVariant()) &&
+        pref.getLanguage().equals(avail[i].getLanguage()) &&
+        pref.getCountry().equals(avail[i].getCountry())) {
+        // Language and country match; different variant
+        match = avail[i];
+        langAndCountryMatch = true;
+      } 
+      else if (!langAndCountryMatch &&
+        pref.getLanguage().equals(avail[i].getLanguage()) &&
+        ("".equals(avail[i].getCountry()))) {
+        // Language match
+        if (match == null) {
+          match = avail[i];
+        }
+      }
+    }
+    return match;
+  }
+
+  /**
+  * Gets the default I18N localization context.
+  *
+  * @param pc Page in which to look up the default I18N localization context
+  */    
+  public static LocalizationContext getLocalizationContext(PageContext pc) {
+    LocalizationContext locCtxt = null;
+
+    Object obj = Config.find(pc, Config.FMT_LOCALIZATION_CONTEXT);
+    if (obj == null) {
+      return null;
+    }
+
+    if (obj instanceof LocalizationContext) {
+      locCtxt = (LocalizationContext) obj;
+    } 
+    else {
+      // localization context is a bundle basename
+      locCtxt = getLocalizationContext(pc, (String) obj);
+    }
+
+    return locCtxt;
+  }
+
+  /**
+  * Gets the resource bundle with the given base name, whose locale is
+  * determined as follows:
+  *
+  * Check if a match exists between the ordered set of preferred
+  * locales and the available locales, for the given base name.
+  * The set of preferred locales consists of a single locale
+  * (if the <tt>javax.servlet.jsp.jstl.fmt.locale</tt> configuration
+  * setting is present) or is equal to the client's preferred locales
+  * determined from the client's browser settings.
+  *
+  * <p> If no match was found in the previous step, check if a match
+  * exists between the fallback locale (given by the
+  * <tt>javax.servlet.jsp.jstl.fmt.fallbackLocale</tt> configuration
+  * setting) and the available locales, for the given base name.
+  *
+  * @param pageContext Page in which the resource bundle with the
+  * given base name is requested
+  * @param basename Resource bundle base name
+  *
+  * @return Localization context containing the resource bundle with the
+  * given base name and the locale that led to the resource bundle match,
+  * or the empty localization context if no resource bundle match was found
+  */
+  public static LocalizationContext getLocalizationContext(PageContext pc,
+    String basename) {
+    LocalizationContext locCtxt = null;
+    ResourceBundle bundle = null;
+
+    if ((basename == null) || basename.equals("")) {
+      return new LocalizationContext();
+    }
+
+    // Try preferred locales
+    Locale pref = getLocale(pc, Config.FMT_LOCALE);
+    if (pref != null) {
+      // Preferred locale is application-based
+      bundle = findMatch(basename, pref);
+      if (bundle != null) {
+        locCtxt = new LocalizationContext(bundle, pref);
+      }
+    }
+    else {
+      // Preferred locales are browser-based
+      locCtxt = findMatch(pc, basename);
+    }
+
+    if (locCtxt == null) {
+      // No match found with preferred locales, try using fallback locale
+      pref = getLocale(pc, Config.FMT_FALLBACK_LOCALE);
+      if (pref != null) {
+        bundle = findMatch(basename, pref);
+        if (bundle != null) {
+          locCtxt = new LocalizationContext(bundle, pref);
+        }
+      }
+    }
+
+    if (locCtxt == null) {
+      // try using the root resource bundle with the given basename
+      try {
+        bundle = ResourceBundle.getBundle(basename, EMPTY_LOCALE,
+        Thread.currentThread().getContextClassLoader());
+        if (bundle != null) {
+          locCtxt = new LocalizationContext(bundle, null);
+        }
+      } 
+      catch (MissingResourceException mre) {
+        // do nothing
+      }
+    }
+
+    if (locCtxt != null) {
+      // set response locale
+      if (locCtxt.getLocale() != null) {
+        setResponseLocale(pc, locCtxt.getLocale());
+      }
+    } 
+    else {
+      // create empty localization context
+      locCtxt = new LocalizationContext();
+    }
+
+    return locCtxt;
+  }
+
+  /*
+  * Determines the client's preferred locales from the request, and compares
+  * each of the locales (in order of preference) against the available
+  * locales in order to determine the best matching locale.
+  *
+  * @param pageContext the page in which the resource bundle with the
+  * given base name is requested
+  * @param basename the resource bundle's base name
+  *
+  * @return the localization context containing the resource bundle with
+  * the given base name and best matching locale, or <tt>null</tt> if no
+  * resource bundle match was found
+  */
+  private static LocalizationContext findMatch(PageContext pageContext,
+    String basename) {
+    LocalizationContext locCtxt = null;
+
+    // Determine locale from client's browser settings.
+    for (Enumeration enum_ = 
+      Util.getRequestLocales((HttpServletRequest)pageContext.getRequest());
+      enum_.hasMoreElements(); ) {
+      Locale pref = (Locale) enum_.nextElement();
+      ResourceBundle match = findMatch(basename, pref);
+      if (match != null) {
+        locCtxt = new LocalizationContext(match, pref);
+        break;
+      }
+    }
+
+    return locCtxt;
+  }
+
+  /*
+  * Gets the resource bundle with the given base name and preferred locale.
+  * 
+  * This method calls java.util.ResourceBundle.getBundle(), but ignores
+  * its return value unless its locale represents an exact or language match
+  * with the given preferred locale.
+  *
+  * @param basename the resource bundle base name
+  * @param pref the preferred locale
+  *
+  * @return the requested resource bundle, or <tt>null</tt> if no resource
+  * bundle with the given base name exists or if there is no exact- or
+  * language-match between the preferred locale and the locale of
+  * the bundle returned by java.util.ResourceBundle.getBundle().
+  */
+  private static ResourceBundle findMatch(String basename, Locale pref) {
+    ResourceBundle match = null;
+
+    try {
+      ResourceBundle bundle = ResourceBundle.getBundle(basename, pref,
+       Thread.currentThread().getContextClassLoader());
+      Locale avail = bundle.getLocale();
+      if (pref.equals(avail)) {
+        // Exact match
+        match = bundle;
+      } 
+      else {
+        /*
+        * We have to make sure that the match we got is for
+        * the specified locale. The way ResourceBundle.getBundle()
+        * works, if a match is not found with (1) the specified locale,
+        * it tries to match with (2) the current default locale as 
+        * returned by Locale.getDefault() or (3) the root resource 
+        * bundle (basename).
+        * We must ignore any match that could have worked with (2) or (3).
+        * So if an exact match is not found, we make the following extra
+        * tests:
+        *     - avail locale must be equal to preferred locale
+        *     - avail country must be empty or equal to preferred country
+        *       (the equality match might have failed on the variant)
+        */
+        if (pref.getLanguage().equals(avail.getLanguage())
+          && ("".equals(avail.getCountry()) || 
+          pref.getCountry().equals(avail.getCountry()))) {
+          /*
+          * Language match.
+          * By making sure the available locale does not have a 
+          * country and matches the preferred locale's language, we
+          * rule out "matches" based on the container's default
+          * locale. For example, if the preferred locale is 
+          * "en-US", the container's default locale is "en-UK", and
+          * there is a resource bundle (with the requested base
+          * name) available for "en-UK", ResourceBundle.getBundle()
+          * will return it, but even though its language matches
+          * that of the preferred locale, we must ignore it,
+          * because matches based on the container's default locale
+          * are not portable across different containers with
+          * different default locales.
+          */
+          match = bundle;
+        }
+      }
+    }
+    catch (MissingResourceException mre) {
+    }
+
+    return match;
+  }
+
+}

From 6c7032e613b5be8d6dbc19811f2e11221bf65c6c Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 19 Jul 2005 20:26:10 +0000
Subject: [PATCH 088/124] Add since tags

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@820 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/java/org/joda/time/chrono/BaseGJChronology.java     | 6 +++---
 .../java/org/joda/time/chrono/BasicYearDateTimeField.java   | 2 +-
 2 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java b/JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java
index 0e52fd95a..53d68cfe8 100644
--- a/JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java
@@ -279,10 +279,10 @@ protected void assemble(Fields fields) {
         fields.era = new GJEraDateTimeField(this);
         fields.dayOfWeek = new GJDayOfWeekDateTimeField(this, fields.days);
         fields.dayOfMonth = new BasicDayOfMonthDateTimeField(this, fields.days);
-        fields.dayOfYear = new GJDayOfYearDateTimeField(this, fields.days);
+        fields.dayOfYear = new BasicDayOfYearDateTimeField(this, fields.days);
         fields.monthOfYear = new GJMonthOfYearDateTimeField(this);
-        fields.weekyear = new GJWeekyearDateTimeField(this);
-        fields.weekOfWeekyear = new GJWeekOfWeekyearDateTimeField(this, fields.weeks);
+        fields.weekyear = new BasicWeekyearDateTimeField(this);
+        fields.weekOfWeekyear = new BasicWeekOfWeekyearDateTimeField(this, fields.weeks);
         
         field = new RemainderDateTimeField(
             fields.weekyear, DateTimeFieldType.weekyearOfCentury(), 100);
diff --git a/JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java b/JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java
index 496c48298..5f11f85ad 100644
--- a/JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java
+++ b/JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java
@@ -26,7 +26,7 @@
  * @author Guy Allard
  * @author Stephen Colebourne
  * @author Brian S O'Neill
- * @since 1.0
+ * @since 1.1, refactored from GJYearDateTimeField
  */
 class BasicYearDateTimeField extends ImpreciseDateTimeField {
 

From 86d15ea163e5731450a4da7d3fcfa49e29f8c16c Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 19 Jul 2005 20:26:42 +0000
Subject: [PATCH 089/124] Refactor GJ named classes to less specific Basic
 named classes

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@821 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../org/joda/time/chrono/BasicDayOfMonthDateTimeField.java | 2 +-
 ...DateTimeField.java => BasicDayOfYearDateTimeField.java} | 6 +++---
 ...imeField.java => BasicWeekOfWeekyearDateTimeField.java} | 6 +++---
 ...rDateTimeField.java => BasicWeekyearDateTimeField.java} | 7 +++----
 4 files changed, 10 insertions(+), 11 deletions(-)
 rename JodaTime/src/java/org/joda/time/chrono/{GJDayOfYearDateTimeField.java => BasicDayOfYearDateTimeField.java} (92%)
 rename JodaTime/src/java/org/joda/time/chrono/{GJWeekOfWeekyearDateTimeField.java => BasicWeekOfWeekyearDateTimeField.java} (93%)
 rename JodaTime/src/java/org/joda/time/chrono/{GJWeekyearDateTimeField.java => BasicWeekyearDateTimeField.java} (97%)

diff --git a/JodaTime/src/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java b/JodaTime/src/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java
index 85e9100fa..79e778c10 100644
--- a/JodaTime/src/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java
+++ b/JodaTime/src/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java
@@ -26,7 +26,7 @@
  * @author Guy Allard
  * @author Stephen Colebourne
  * @author Brian S O'Neill
- * @since 1.0
+ * @since 1.1, refactored from GJDayOfMonthDateTimeField
  */
 final class BasicDayOfMonthDateTimeField extends PreciseDurationDateTimeField {
 
diff --git a/JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java b/JodaTime/src/java/org/joda/time/chrono/BasicDayOfYearDateTimeField.java
similarity index 92%
rename from JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java
rename to JodaTime/src/java/org/joda/time/chrono/BasicDayOfYearDateTimeField.java
index 2304ee8aa..14c8dfc3d 100644
--- a/JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java
+++ b/JodaTime/src/java/org/joda/time/chrono/BasicDayOfYearDateTimeField.java
@@ -26,9 +26,9 @@
  * @author Guy Allard
  * @author Stephen Colebourne
  * @author Brian S O'Neill
- * @since 1.0
+ * @since 1.1, refactored from GJDayOfYearDateTimeField
  */
-final class GJDayOfYearDateTimeField extends PreciseDurationDateTimeField {
+final class BasicDayOfYearDateTimeField extends PreciseDurationDateTimeField {
 
     private static final long serialVersionUID = -6821236822336841037L;
 
@@ -37,7 +37,7 @@
     /**
      * Restricted constructor
      */
-    GJDayOfYearDateTimeField(BaseGJChronology chronology, DurationField days) {
+    BasicDayOfYearDateTimeField(BaseGJChronology chronology, DurationField days) {
         super(DateTimeFieldType.dayOfYear(), days);
         iChronology = chronology;
     }
diff --git a/JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java b/JodaTime/src/java/org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField.java
similarity index 93%
rename from JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java
rename to JodaTime/src/java/org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField.java
index c9cf7c171..26e80282b 100644
--- a/JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java
+++ b/JodaTime/src/java/org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField.java
@@ -27,9 +27,9 @@
  * @author Guy Allard
  * @author Stephen Colebourne
  * @author Brian S O'Neill
- * @since 1.0
+ * @since 1.1, refactored from GJWeekOfWeekyearDateTimeField
  */
-final class GJWeekOfWeekyearDateTimeField extends PreciseDurationDateTimeField {
+final class BasicWeekOfWeekyearDateTimeField extends PreciseDurationDateTimeField {
 
     private static final long serialVersionUID = -1587436826395135328L;
 
@@ -38,7 +38,7 @@
     /**
      * Restricted constructor
      */
-    GJWeekOfWeekyearDateTimeField(BaseGJChronology chronology, DurationField weeks) {
+    BasicWeekOfWeekyearDateTimeField(BaseGJChronology chronology, DurationField weeks) {
         super(DateTimeFieldType.weekOfWeekyear(), weeks);
         iChronology = chronology;
     }
diff --git a/JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java b/JodaTime/src/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java
similarity index 97%
rename from JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java
rename to JodaTime/src/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java
index 06ccf46b7..cd8998fdc 100644
--- a/JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java
+++ b/JodaTime/src/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java
@@ -27,10 +27,9 @@
  * @author Guy Allard
  * @author Stephen Colebourne
  * @author Brian S O'Neill
- * @since 1.0
- * @see org.joda.time.DateTimeField
+ * @since 1.1, refactored from GJWeekyearDateTimeField
  */
-final class GJWeekyearDateTimeField extends ImpreciseDateTimeField {
+final class BasicWeekyearDateTimeField extends ImpreciseDateTimeField {
     
     private static final long serialVersionUID = 6215066916806820644L;
 
@@ -41,7 +40,7 @@
     /**
      * Restricted constructor
      */
-    GJWeekyearDateTimeField(BaseGJChronology chronology) {
+    BasicWeekyearDateTimeField(BaseGJChronology chronology) {
         super(DateTimeFieldType.weekyear(), chronology.getAverageMillisPerYear());
         iChronology = chronology;
     }

From 61bbfc4731b95d0f018db459116d44ce3c0e4664 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 19 Jul 2005 20:48:26 +0000
Subject: [PATCH 090/124] Organize imports

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@822 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/test/org/joda/time/TestSerialization.java | 1 -
 1 file changed, 1 deletion(-)

diff --git a/JodaTime/src/test/org/joda/time/TestSerialization.java b/JodaTime/src/test/org/joda/time/TestSerialization.java
index 4c788a683..80d7b29a4 100644
--- a/JodaTime/src/test/org/joda/time/TestSerialization.java
+++ b/JodaTime/src/test/org/joda/time/TestSerialization.java
@@ -18,7 +18,6 @@
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.FileInputStream;
-import java.io.FileOutputStream;
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
 import java.io.Serializable;

From 140588368c32233a03231936081524bde9d0f107 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 19 Jul 2005 20:49:44 +0000
Subject: [PATCH 091/124] Increase test coverage

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@823 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/test/org/joda/time/TestDateTimeZone.java |  7 +++++++
 .../test/org/joda/time/TestPeriod_Constructors.java   | 11 ++++++++---
 2 files changed, 15 insertions(+), 3 deletions(-)

diff --git a/JodaTime/src/test/org/joda/time/TestDateTimeZone.java b/JodaTime/src/test/org/joda/time/TestDateTimeZone.java
index 23ce65597..3e4cc66ae 100644
--- a/JodaTime/src/test/org/joda/time/TestDateTimeZone.java
+++ b/JodaTime/src/test/org/joda/time/TestDateTimeZone.java
@@ -209,6 +209,13 @@ public void testForID_String() {
         assertEquals((-2L * DateTimeConstants.MILLIS_PER_HOUR),
                 zone.getOffset(TEST_TIME_SUMMER));
         
+        zone = DateTimeZone.forID("-07:05:34.0");
+        assertEquals("-07:05:34", zone.getID());
+        assertEquals((-7L * DateTimeConstants.MILLIS_PER_HOUR) +
+                    (-5L * DateTimeConstants.MILLIS_PER_MINUTE) +
+                    (-34L * DateTimeConstants.MILLIS_PER_SECOND),
+                    zone.getOffset(TEST_TIME_SUMMER));
+        
         try {
             DateTimeZone.forID("SST");
             fail();
diff --git a/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java b/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java
index f04d29cb3..1920fca32 100644
--- a/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java
+++ b/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java
@@ -1213,7 +1213,12 @@ public void testFactoryMillis() throws Throwable {
     //-----------------------------------------------------------------------
     public void testFactoryFieldDifference1() throws Throwable {
         YearMonthDay start = new YearMonthDay(2005, 4, 9);
-        YearMonthDay end = new YearMonthDay(2004, 6, 7);
+        DateTimeFieldType[] types = new DateTimeFieldType[] {
+            DateTimeFieldType.year(),
+            DateTimeFieldType.monthOfYear(),
+            DateTimeFieldType.dayOfMonth(),
+        };
+        Partial end = new Partial(types, new int[] {2004, 6, 7});
         Period test = Period.fieldDifference(start, end);
         assertEquals(PeriodType.yearMonthDay(), test.getPeriodType());
         assertEquals(-1, test.getYears());
@@ -1248,12 +1253,12 @@ public void testFactoryFieldDifference3() throws Throwable {
     }
 
     public void testFactoryFieldDifference4() throws Throwable {
-        YearMonthDay start = new YearMonthDay(2005, 4, 9);
         DateTimeFieldType[] types = new DateTimeFieldType[] {
             DateTimeFieldType.year(),
             DateTimeFieldType.monthOfYear(),
             DateTimeFieldType.dayOfWeek(),
         };
+        YearMonthDay start = new YearMonthDay(2005, 4, 9);
         Partial end = new Partial(types, new int[] {1, 2, 3});
         try {
             Period.fieldDifference(start, end);
@@ -1262,12 +1267,12 @@ public void testFactoryFieldDifference4() throws Throwable {
     }
 
     public void testFactoryFieldDifference5() throws Throwable {
-        YearMonthDay start = new YearMonthDay(2005, 4, 9);
         DateTimeFieldType[] types = new DateTimeFieldType[] {
             DateTimeFieldType.year(),
             DateTimeFieldType.dayOfMonth(),
             DateTimeFieldType.dayOfWeek(),
         };
+        Partial start = new Partial(types, new int[] {1, 2, 3});
         Partial end = new Partial(types, new int[] {1, 2, 3});
         try {
             Period.fieldDifference(start, end);

From 67906ed63995d56dbdb39d8cd66baefba5f0d4a9 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 19 Jul 2005 20:51:51 +0000
Subject: [PATCH 092/124] Set jdiff version

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@824 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/project.properties | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/JodaTime/project.properties b/JodaTime/project.properties
index f8b4e6927..cca8e1692 100644
--- a/JodaTime/project.properties
+++ b/JodaTime/project.properties
@@ -12,4 +12,4 @@ maven.javadoc.public=true
 maven.javadoc.package=false
 maven.javadoc.private=false
 
-maven.jdiff.old.tag=v0_9_900
+maven.jdiff.old.tag=v1_0_000

From 98049a1c5f309c5a551a3d69f39f383392d89331 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 20 Jul 2005 00:12:11 +0000
Subject: [PATCH 093/124] Prepare for 1.1

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@825 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/build.xml   | 2 +-
 JodaTime/project.xml | 6 +++---
 2 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/JodaTime/build.xml b/JodaTime/build.xml
index 2fa3b9636..cd82f8b74 100644
--- a/JodaTime/build.xml
+++ b/JodaTime/build.xml
@@ -27,7 +27,7 @@
   <property name="component.title"         value="Joda date and time"/>
 
   <!-- The current version number of this component -->
-  <property name="component.version"       value="1.0"/>
+  <property name="component.version"       value="1.1-dev"/>
 
   <!-- The current version number of this component -->
   <property name="component.fullname"      value="${component.name}-${component.version}"/>
diff --git a/JodaTime/project.xml b/JodaTime/project.xml
index 0e2513132..4bbf5c54b 100644
--- a/JodaTime/project.xml
+++ b/JodaTime/project.xml
@@ -2,12 +2,12 @@
 <!-- You are strongly recommended to use ant for compiling and building -->
 <!-- We only use and test maven for website construction -->
 
-<project>
+<maven:project xmlns:maven="http://maven.apache.org/maven-v3_0_0.xsd">
   <pomVersion>3</pomVersion>
   <id>joda-time</id>
   <name>Joda time</name>
   <groupId>joda-time</groupId>
-  <currentVersion>1.0</currentVersion>
+  <currentVersion>1.1-dev</currentVersion>
   <organization>
     <name>Joda.org</name>
     <url>http://www.joda.org</url>
@@ -170,4 +170,4 @@
      <!--report>maven-tasklist-plugin</report-->
   </reports>
 
-</project>
+</maven:project>

From b71720361d0b07746370fcac3d2130ab95f15a2b Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 20 Jul 2005 21:36:07 +0000
Subject: [PATCH 094/124] Change methods from final to non-final to ensure
 binary compatability with v1.0

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@826 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../org/joda/time/field/AbstractPartialFieldProperty.java     | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java b/JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java
index 3f5222fea..8a9bc5c8d 100644
--- a/JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java
+++ b/JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java
@@ -116,7 +116,7 @@ public String getAsString() {
      * @return the current text value
      * @see DateTimeField#getAsText
      */
-    public final String getAsText() {
+    public String getAsText() {
         return getAsText(null);
     }
 
@@ -147,7 +147,7 @@ public String getAsText(Locale locale) {
      * @return the current text value
      * @see DateTimeField#getAsShortText
      */
-    public final String getAsShortText() {
+    public String getAsShortText() {
         return getAsShortText(null);
     }
 

From 785b98e47f14afbb2afe9012cfd90d7e051c963a Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 20 Jul 2005 21:36:58 +0000
Subject: [PATCH 095/124] Remove final method qualifier to match
 AbstractPartialFieldProperty

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@827 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../joda/time/field/AbstractReadableInstantFieldProperty.java | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java b/JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java
index 579237317..a36125dd6 100644
--- a/JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java
+++ b/JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java
@@ -128,7 +128,7 @@ public String getAsString() {
      * @return the current text value
      * @see DateTimeField#getAsText
      */
-    public final String getAsText() {
+    public String getAsText() {
         return getAsText(null);
     }
 
@@ -159,7 +159,7 @@ public String getAsText(Locale locale) {
      * @return the current text value
      * @see DateTimeField#getAsShortText
      */
-    public final String getAsShortText() {
+    public String getAsShortText() {
         return getAsShortText(null);
     }
 

From e349fc5ca68b999bc10e4426b88de8eb3b65bd85 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 20 Jul 2005 23:09:53 +0000
Subject: [PATCH 096/124] Organize imports

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@828 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../time/contrib/jsptag/DateTimeZoneSupport.java     |  4 +++-
 .../org/joda/time/contrib/jsptag/FormatSupport.java  | 12 +++++++-----
 .../java/org/joda/time/contrib/jsptag/FormatTag.java |  5 +++--
 .../time/contrib/jsptag/JodaTagLibraryValidator.java |  9 ++-------
 .../time/contrib/jsptag/ParseDateTimeSupport.java    | 10 ++++++----
 .../joda/time/contrib/jsptag/ParseDateTimeTag.java   |  4 +++-
 .../time/contrib/jsptag/SetDateTimeZoneSupport.java  |  3 ++-
 .../src/java/org/joda/time/contrib/jsptag/Util.java  |  5 +----
 8 files changed, 27 insertions(+), 25 deletions(-)

diff --git a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/DateTimeZoneSupport.java b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/DateTimeZoneSupport.java
index 520e48d15..e298b196c 100644
--- a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/DateTimeZoneSupport.java
+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/DateTimeZoneSupport.java
@@ -17,8 +17,8 @@
 
 package org.joda.time.contrib.jsptag;
 
-import org.joda.time.DateTimeZone;
 import java.io.IOException;
+
 import javax.servlet.jsp.JspException;
 import javax.servlet.jsp.JspTagException;
 import javax.servlet.jsp.PageContext;
@@ -26,6 +26,8 @@
 import javax.servlet.jsp.tagext.BodyTagSupport;
 import javax.servlet.jsp.tagext.Tag;
 
+import org.joda.time.DateTimeZone;
+
 /**
  * Support for tag handlers for &lt;timeZone&gt;.
  * @author Jan Luehe
diff --git a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/FormatSupport.java b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/FormatSupport.java
index 1537ff9db..12c807282 100644
--- a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/FormatSupport.java
+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/FormatSupport.java
@@ -17,19 +17,21 @@
 
 package org.joda.time.contrib.jsptag;
 
-import org.joda.time.DateTimeZone;
-import org.joda.time.ReadableInstant;
-import org.joda.time.ReadablePartial;
-import org.joda.time.format.DateTimeFormat;
-import org.joda.time.format.DateTimeFormatter;
 import java.io.IOException;
 import java.text.DateFormat;
 import java.util.Locale;
+
 import javax.servlet.jsp.JspException;
 import javax.servlet.jsp.JspTagException;
 import javax.servlet.jsp.PageContext;
 import javax.servlet.jsp.tagext.TagSupport;
 
+import org.joda.time.DateTimeZone;
+import org.joda.time.ReadableInstant;
+import org.joda.time.ReadablePartial;
+import org.joda.time.format.DateTimeFormat;
+import org.joda.time.format.DateTimeFormatter;
+
 /**
  * Support for tag handlers for &lt;formatDate&gt;, the date and time
  * formatting tag in JSTL 1.0.
diff --git a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/FormatTag.java b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/FormatTag.java
index 9067b43f2..d5f1a6d03 100644
--- a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/FormatTag.java
+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/FormatTag.java
@@ -17,11 +17,12 @@
 
 package org.joda.time.contrib.jsptag;
 
-import org.joda.time.DateTime;
-import org.joda.time.DateTimeZone;
 import java.util.Locale;
+
 import javax.servlet.jsp.JspTagException;
 
+import org.joda.time.DateTimeZone;
+
 /**
  * <p>A handler for &lt;format&gt; that supports rtexprvalue-based
  * attributes.</p>
diff --git a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/JodaTagLibraryValidator.java b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/JodaTagLibraryValidator.java
index 2fea40ee8..4de2b6f2d 100644
--- a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/JodaTagLibraryValidator.java
+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/JodaTagLibraryValidator.java
@@ -17,16 +17,10 @@
 
 package org.joda.time.contrib.jsptag;
 
-import java.util.Set;
 import java.io.IOException;
-import java.util.HashMap;
-import java.util.HashSet;
 import java.util.Map;
-import java.util.NoSuchElementException;
-import java.util.Set;
-import java.util.StringTokenizer;
 import java.util.Vector;
-import javax.servlet.jsp.JspException;
+
 import javax.servlet.jsp.tagext.PageData;
 import javax.servlet.jsp.tagext.TagData;
 import javax.servlet.jsp.tagext.TagLibraryValidator;
@@ -34,6 +28,7 @@
 import javax.xml.parsers.ParserConfigurationException;
 import javax.xml.parsers.SAXParser;
 import javax.xml.parsers.SAXParserFactory;
+
 import org.xml.sax.Attributes;
 import org.xml.sax.SAXException;
 import org.xml.sax.helpers.DefaultHandler;
diff --git a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/ParseDateTimeSupport.java b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/ParseDateTimeSupport.java
index 140829a97..74525c06c 100644
--- a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/ParseDateTimeSupport.java
+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/ParseDateTimeSupport.java
@@ -17,18 +17,20 @@
 
 package org.joda.time.contrib.jsptag;
 
-import org.joda.time.DateTime;
-import org.joda.time.DateTimeZone;
-import org.joda.time.format.DateTimeFormat;
-import org.joda.time.format.DateTimeFormatter;
 import java.io.IOException;
 import java.text.DateFormat;
 import java.util.Locale;
+
 import javax.servlet.jsp.JspException;
 import javax.servlet.jsp.JspTagException;
 import javax.servlet.jsp.PageContext;
 import javax.servlet.jsp.tagext.BodyTagSupport;
 
+import org.joda.time.DateTime;
+import org.joda.time.DateTimeZone;
+import org.joda.time.format.DateTimeFormat;
+import org.joda.time.format.DateTimeFormatter;
+
 /**
  * Support for tag handlers for &lt;parseDate&gt;, the date and time
  * parsing tag in JSTL 1.0.
diff --git a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/ParseDateTimeTag.java b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/ParseDateTimeTag.java
index e08857f33..ea2d5eb44 100644
--- a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/ParseDateTimeTag.java
+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/ParseDateTimeTag.java
@@ -17,10 +17,12 @@
 
 package org.joda.time.contrib.jsptag;
 
-import org.joda.time.DateTimeZone;
 import java.util.Locale;
+
 import javax.servlet.jsp.JspTagException;
 
+import org.joda.time.DateTimeZone;
+
 /**
  * <p>A handler for &lt;parseDate&gt; that supports rtexprvalue-based
  * attributes.</p>
diff --git a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/SetDateTimeZoneSupport.java b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/SetDateTimeZoneSupport.java
index 5cedb8b17..f609bd0e3 100644
--- a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/SetDateTimeZoneSupport.java
+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/SetDateTimeZoneSupport.java
@@ -17,12 +17,13 @@
 
 package org.joda.time.contrib.jsptag;
 
-import org.joda.time.DateTimeZone;
 import javax.servlet.jsp.JspException;
 import javax.servlet.jsp.PageContext;
 import javax.servlet.jsp.jstl.core.Config;
 import javax.servlet.jsp.tagext.TagSupport;
 
+import org.joda.time.DateTimeZone;
+
 /**
  * Support for tag handlers for &lt;setDateTimeZone&gt;.
  * @author Jan Luehe
diff --git a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/Util.java b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/Util.java
index 251869b82..578bf0dd7 100644
--- a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/Util.java
+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/Util.java
@@ -17,9 +17,6 @@
 
 package org.joda.time.contrib.jsptag;
 
-import java.io.ByteArrayOutputStream;
-import java.io.IOException;
-import java.io.OutputStreamWriter;
 import java.text.DateFormat;
 import java.text.NumberFormat;
 import java.util.Enumeration;
@@ -27,9 +24,9 @@
 import java.util.MissingResourceException;
 import java.util.ResourceBundle;
 import java.util.Vector;
+
 import javax.servlet.ServletResponse;
 import javax.servlet.http.HttpServletRequest;
-import javax.servlet.jsp.JspException;
 import javax.servlet.jsp.PageContext;
 import javax.servlet.jsp.jstl.core.Config;
 import javax.servlet.jsp.jstl.fmt.LocalizationContext;

From e232922c16dc03ef38a678080d9fd1719c00915a Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 20 Jul 2005 23:10:26 +0000
Subject: [PATCH 097/124] Ignores

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@829 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/jsptags/.cvsignore | 2 ++
 1 file changed, 2 insertions(+)
 create mode 100644 JodaTimeContrib/jsptags/.cvsignore

diff --git a/JodaTimeContrib/jsptags/.cvsignore b/JodaTimeContrib/jsptags/.cvsignore
new file mode 100644
index 000000000..d567ba01e
--- /dev/null
+++ b/JodaTimeContrib/jsptags/.cvsignore
@@ -0,0 +1,2 @@
+bin
+target

From 1140e252fbe053c1afe7a476655b1c30d4c2a3e0 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 20 Jul 2005 23:10:58 +0000
Subject: [PATCH 098/124] Eclipse files

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@830 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/jsptags/.classpath | 18 ++++++++++++++++++
 JodaTimeContrib/jsptags/.project   | 18 ++++++++++++++++++
 2 files changed, 36 insertions(+)
 create mode 100644 JodaTimeContrib/jsptags/.classpath
 create mode 100644 JodaTimeContrib/jsptags/.project

diff --git a/JodaTimeContrib/jsptags/.classpath b/JodaTimeContrib/jsptags/.classpath
new file mode 100644
index 000000000..df74b7ce2
--- /dev/null
+++ b/JodaTimeContrib/jsptags/.classpath
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<classpath>
+  <classpathentry excluding="" kind="src" path="src/java">
+  </classpathentry>
+  <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER">
+  </classpathentry>
+  <classpathentry kind="var" path="MAVEN_REPO/joda-time/jars/joda-time-1.0.jar">
+  </classpathentry>
+  <classpathentry kind="var" path="MAVEN_REPO/servletapi/jars/servlet-api-2.4.jar">
+  </classpathentry>
+  <classpathentry kind="var" path="MAVEN_REPO/jspapi/jars/jsp-api-2.0.jar">
+  </classpathentry>
+  <classpathentry kind="var" path="MAVEN_REPO/jstl/jars/jstl-1.1.2.jar">
+  </classpathentry>
+  <classpathentry kind="output" path="target/classes">
+  </classpathentry>
+</classpath>
\ No newline at end of file
diff --git a/JodaTimeContrib/jsptags/.project b/JodaTimeContrib/jsptags/.project
new file mode 100644
index 000000000..8d8823607
--- /dev/null
+++ b/JodaTimeContrib/jsptags/.project
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<projectDescription>
+  <name>joda-time-jsptags</name>
+  <comment>Contribution to Joda-Time that adds JSP tags support</comment>
+  <projects>
+  </projects>
+  <buildSpec>
+    <buildCommand>
+      <name>org.eclipse.jdt.core.javabuilder</name>
+      <arguments>
+      </arguments>
+    </buildCommand>
+  </buildSpec>
+  <natures>
+    <nature>org.eclipse.jdt.core.javanature</nature>
+  </natures>
+</projectDescription>
\ No newline at end of file

From bdbd251538b1dfb938608952cac9ebb585feb2d8 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 20 Jul 2005 23:11:22 +0000
Subject: [PATCH 099/124] Add maven files

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@831 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/jsptags/project.properties |  13 ++
 JodaTimeContrib/jsptags/project.xml        | 134 +++++++++++++++++++++
 2 files changed, 147 insertions(+)
 create mode 100644 JodaTimeContrib/jsptags/project.properties
 create mode 100644 JodaTimeContrib/jsptags/project.xml

diff --git a/JodaTimeContrib/jsptags/project.properties b/JodaTimeContrib/jsptags/project.properties
new file mode 100644
index 000000000..3ed694952
--- /dev/null
+++ b/JodaTimeContrib/jsptags/project.properties
@@ -0,0 +1,13 @@
+#show data on the breadcrumbs line
+maven.xdoc.date = navigation-bottom
+maven.xdoc.date.format = yyyy-MM-dd
+# maven.xdoc.version = ${pom.currentVersion}
+
+maven.checkstyle.properties=checkstyle.xml
+maven.junit.fork=true
+maven.xdoc.poweredby.image=maven-feather.png
+maven.javadoc.links=http://java.sun.com/products/j2se/1.4/docs/api, http://joda-time.sourceforge.net/api-release
+maven.javadoc.public=true
+maven.javadoc.package=false
+maven.javadoc.private=false
+
diff --git a/JodaTimeContrib/jsptags/project.xml b/JodaTimeContrib/jsptags/project.xml
new file mode 100644
index 000000000..0b0dbe651
--- /dev/null
+++ b/JodaTimeContrib/jsptags/project.xml
@@ -0,0 +1,134 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- You are strongly recommended to use ant for compiling and building -->
+<!-- We only use and test maven for website construction -->
+
+<project xmlns="http://maven.apache.org/maven-v3_0_0.xsd">
+  <pomVersion>3</pomVersion>
+  <id>joda-time-jsptags</id>
+  <groupId>joda-time</groupId>
+  <name>Joda time JSP tags support</name>
+  <currentVersion>0.5</currentVersion>
+  <shortDescription>Joda time JSP tags support</shortDescription>
+  <description>
+    Contribution to Joda-Time that adds JSP tags support
+  </description>
+
+  <url>http://joda-time.sourceforge.net/jsptags</url>
+  <logo>/images/jodatime.png</logo>
+  <issueTrackingUrl>http://sourceforge.net/tracker/?atid=617889&amp;group_id=97367&amp;func=browse</issueTrackingUrl>
+  <inceptionYear>2005</inceptionYear>
+
+  <siteAddress>shell.sourceforge.net</siteAddress>
+  <siteDirectory>/home/groups/j/jo/joda-time/htdocs/contrib/jsptags</siteDirectory>
+
+  <mailingLists>
+    <mailingList>
+      <name>Joda Interest list</name>
+      <subscribe>http://sourceforge.net/mail/?group_id=47291</subscribe>
+      <unsubscribe>http://sourceforge.net/mail/?group_id=47291</unsubscribe>
+      <archive>http://sourceforge.net/mailarchive/forum.php?forum_id=8530</archive>
+    </mailingList>
+  </mailingLists>
+
+  <developers>
+    <developer>
+      <name>Jim Newsham</name>
+      <id>jimnewsham</id>
+      <email></email>
+      <roles>
+        <role>Lead developer</role>
+      </roles>
+    </developer>
+    <developer>
+      <name>Stephen Colebourne</name>
+      <id>scolebourne</id>
+      <email></email>
+      <roles>
+        <role>Website and Release manager</role>
+      </roles>
+    </developer>
+  </developers>
+
+  <licenses>
+    <license>
+      <name>Apache 2</name>
+      <url>http://www.apache.org/licenses/</url>
+      <distribution>repo</distribution>
+    </license>
+  </licenses>
+
+  <repository>
+    <connection>scm:cvs:pserver:anonymous@cvs.sourceforge.net:/cvsroot/joda-time:JodaTimeContrib/jsptags</connection>
+    <url>http://cvs.sourceforge.net/viewcvs.py/joda-time/JodaTimeContrib/jsptags/</url>
+  </repository>
+
+  <organization>
+    <name>Joda.org</name>
+    <url>http://www.joda.org</url>
+    <logo>/images/joda.png</logo>
+  </organization>
+  <package>org.joda.time.contrib.jsptags</package>
+
+  <build>
+    <sourceDirectory>src/java</sourceDirectory>
+    <unitTestSourceDirectory>src/test</unitTestSourceDirectory>
+    <unitTest>
+      <includes>
+        <include>org/joda/time/contrib/jsptags/**/Test*.java</include>
+      </includes>
+    </unitTest>
+    <resources>
+      <resource>
+        <targetPath>meta-inf</targetPath>
+        <includes>
+          <include>NOTICE.txt</include>
+        </includes>
+      </resource>
+    </resources>
+  </build>
+
+  <dependencies>
+    <dependency>
+      <groupId>joda-time</groupId>
+      <artifactId>joda-time</artifactId>
+      <version>1.0</version>
+    </dependency>
+
+    <dependency>
+      <groupId>servletapi</groupId>
+      <artifactId>servlet-api</artifactId>
+      <version>2.4</version>
+    </dependency>
+
+    <dependency>
+      <groupId>jspapi</groupId>
+      <artifactId>jsp-api</artifactId>
+      <version>2.0</version>
+    </dependency>
+
+    <dependency>
+      <groupId>jstl</groupId>
+      <artifactId>jstl</artifactId>
+      <version>1.1.2</version>
+    </dependency>
+  </dependencies>
+
+  <reports>
+     <report>maven-changelog-plugin</report>
+     <report>maven-changes-plugin</report>
+     <report>maven-checkstyle-plugin</report>
+     <!-- <report>maven-clover-plugin</report> -->
+     <report>maven-jcoverage-plugin</report>
+     <report>maven-developer-activity-plugin</report>
+     <report>maven-file-activity-plugin</report>
+     <report>maven-javadoc-plugin</report>
+     <!-- <report>maven-jellydoc-plugin</report> -->
+     <report>maven-junit-report-plugin</report>
+     <report>maven-jxr-plugin</report>
+     <report>maven-license-plugin</report>
+     <!--report>maven-linkcheck-plugin</report-->
+     <!--report>maven-statcvs-plugin</report-->
+     <!--report>maven-tasklist-plugin</report-->
+  </reports>
+
+</project>

From dba815751a0cd98b9bdfabbccb939c03bfd5c079 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 20 Jul 2005 23:40:36 +0000
Subject: [PATCH 100/124] Tabs to spaces

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@832 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../time/contrib/jsptag/FormatSupport.java    |  2 +-
 .../jsptag/JodaTagLibraryValidator.java       | 16 ++--
 .../contrib/jsptag/ParseDateTimeSupport.java  |  4 +-
 .../joda/time/contrib/jsptag/Resources.java   | 74 +++++++++----------
 4 files changed, 48 insertions(+), 48 deletions(-)

diff --git a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/FormatSupport.java b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/FormatSupport.java
index 12c807282..dc8860d51 100644
--- a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/FormatSupport.java
+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/FormatSupport.java
@@ -127,7 +127,7 @@ else if (style != null) {
     }
 
     if (var != null) {
-      pageContext.setAttribute(var, formatted, scope);	
+      pageContext.setAttribute(var, formatted, scope);
     } 
     else {
       try {
diff --git a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/JodaTagLibraryValidator.java b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/JodaTagLibraryValidator.java
index 4de2b6f2d..0feb4b903 100644
--- a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/JodaTagLibraryValidator.java
+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/JodaTagLibraryValidator.java
@@ -117,12 +117,12 @@
   //*********************************************************************
   // Validation and configuration state (protected)
 
-  private String uri;		// our taglib's uri (as passed by JSP container on XML View)
-  private String prefix;	// our taglib's prefix
-  private Vector messageVector;	// temporary error messages
-  private Map config;		// configuration (Map of Sets)
-  private boolean failed;	// have we failed >0 times?
-  private String lastElementId;	// the last element we've seen
+  private String uri;    // our taglib's uri (as passed by JSP container on XML View)
+  private String prefix;  // our taglib's prefix
+  private Vector messageVector;  // temporary error messages
+  private Map config;    // configuration (Map of Sets)
+  private boolean failed;  // have we failed >0 times?
+  private String lastElementId;  // the last element we've seen
 
   //*********************************************************************
   // Constructor and lifecycle management
@@ -406,7 +406,7 @@ public void startElement(String ns, String ln, String qn, Attributes a) {
     }
 
     public void characters(char[] ch, int start, int length) {
-      bodyNecessary = false;		// body is no longer necessary!
+      bodyNecessary = false;    // body is no longer necessary!
 
       // ignore strings that are just whitespace
       String s = new String(ch, start, length).trim();
@@ -430,7 +430,7 @@ public void endElement(String ns, String ln, String qn) {
       if (bodyNecessary) {
         fail(Resources.getMessage("TLV_MISSING_BODY", lastElementName));
       }
-      bodyIllegal = false;	// reset: we've left the tag
+      bodyIllegal = false;  // reset: we've left the tag
 
       // update our depth
       depth--;
diff --git a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/ParseDateTimeSupport.java b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/ParseDateTimeSupport.java
index 74525c06c..ad3617759 100644
--- a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/ParseDateTimeSupport.java
+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/ParseDateTimeSupport.java
@@ -40,7 +40,7 @@
 public abstract class ParseDateTimeSupport extends BodyTagSupport {
 
   protected String value;                      // 'value' attribute
-  protected boolean valueSpecified;	       // status
+  protected boolean valueSpecified;         // status
   protected String pattern;                    // 'pattern' attribute
   protected String style;                      // 'style' attribute
   protected DateTimeZone dateTimeZone;         // 'dateTimeZone' attribute
@@ -135,7 +135,7 @@ else if (style != null) {
     }
 
     if (var != null) {
-      pageContext.setAttribute(var, parsed, scope);	
+      pageContext.setAttribute(var, parsed, scope);  
     }
     else {
       try {
diff --git a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/Resources.java b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/Resources.java
index 953ece324..84ff4a381 100644
--- a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/Resources.java
+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/Resources.java
@@ -47,11 +47,11 @@
 
     /** The location of our resources. */
     private static final String RESOURCE_LOCATION
-	= "org.joda.time.contrib.jsptag.Resources";
+  = "org.joda.time.contrib.jsptag.Resources";
 
     /** Our class-wide ResourceBundle. */
     private static ResourceBundle rb =
-	ResourceBundle.getBundle(RESOURCE_LOCATION);
+  ResourceBundle.getBundle(RESOURCE_LOCATION);
 
 
     //*********************************************************************
@@ -59,69 +59,69 @@
 
     /** Retrieves a message with no arguments. */
     public static String getMessage(String name)
-	    throws MissingResourceException {
-	return rb.getString(name);
+      throws MissingResourceException {
+  return rb.getString(name);
     }
 
     /** Retrieves a message with arbitrarily many arguments. */
     public static String getMessage(String name, Object[] a)
-	    throws MissingResourceException {
-	String res = rb.getString(name);
-	return MessageFormat.format(res, a);
+      throws MissingResourceException {
+  String res = rb.getString(name);
+  return MessageFormat.format(res, a);
     }
 
     /** Retrieves a message with one argument. */
     public static String getMessage(String name, Object a1)
-	    throws MissingResourceException {
-	return getMessage(name, new Object[] { a1 });
+      throws MissingResourceException {
+  return getMessage(name, new Object[] { a1 });
     }
 
     /** Retrieves a message with two arguments. */
     public static String getMessage(String name, Object a1, Object a2)
-	    throws MissingResourceException {
-	return getMessage(name, new Object[] { a1, a2 });
+      throws MissingResourceException {
+  return getMessage(name, new Object[] { a1, a2 });
     }
 
     /** Retrieves a message with three arguments. */
     public static String getMessage(String name,
-				    Object a1,
-				    Object a2,
-				    Object a3)
-	    throws MissingResourceException {
-	return getMessage(name, new Object[] { a1, a2, a3 });
+            Object a1,
+            Object a2,
+            Object a3)
+      throws MissingResourceException {
+  return getMessage(name, new Object[] { a1, a2, a3 });
     }
 
     /** Retrieves a message with four arguments. */
     public static String getMessage(String name,
-			 	    Object a1,
-				    Object a2,
-				    Object a3,
-				    Object a4)
-	    throws MissingResourceException {
-	return getMessage(name, new Object[] { a1, a2, a3, a4 });
+             Object a1,
+            Object a2,
+            Object a3,
+            Object a4)
+      throws MissingResourceException {
+  return getMessage(name, new Object[] { a1, a2, a3, a4 });
     }
 
     /** Retrieves a message with five arguments. */
     public static String getMessage(String name,
-				    Object a1,
-				    Object a2,
-				    Object a3,
-				    Object a4,
-				    Object a5)
-	    throws MissingResourceException {
-	return getMessage(name, new Object[] { a1, a2, a3, a4, a5 });
+            Object a1,
+            Object a2,
+            Object a3,
+            Object a4,
+            Object a5)
+      throws MissingResourceException {
+  return getMessage(name, new Object[] { a1, a2, a3, a4, a5 });
     }
 
     /** Retrieves a message with six arguments. */
     public static String getMessage(String name,
-				    Object a1,
-				    Object a2,
-				    Object a3,
-				    Object a4,
-				    Object a5,
-				    Object a6)
-	    throws MissingResourceException {
-	return getMessage(name, new Object[] { a1, a2, a3, a4, a5, a6 });
+            Object a1,
+            Object a2,
+            Object a3,
+            Object a4,
+            Object a5,
+            Object a6)
+      throws MissingResourceException {
+  return getMessage(name, new Object[] { a1, a2, a3, a4, a5, a6 });
     }
 
 }

From 7f8dcd0fa30885036314b9de32c697ea0394a267 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 20 Jul 2005 23:51:21 +0000
Subject: [PATCH 101/124] Add basic xdocs

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@833 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/jsptags/xdocs/images/joda.png | Bin 0 -> 2919 bytes
 .../jsptags/xdocs/images/jodatime.png         | Bin 0 -> 2850 bytes
 JodaTimeContrib/jsptags/xdocs/navigation.xml  |  60 +++++++++
 .../jsptags/xdocs/stylesheets/maven-theme.css | 119 ++++++++++++++++++
 JodaTimeContrib/jsptags/xdocs/tasks.xml       |  18 +++
 5 files changed, 197 insertions(+)
 create mode 100644 JodaTimeContrib/jsptags/xdocs/images/joda.png
 create mode 100644 JodaTimeContrib/jsptags/xdocs/images/jodatime.png
 create mode 100644 JodaTimeContrib/jsptags/xdocs/navigation.xml
 create mode 100644 JodaTimeContrib/jsptags/xdocs/stylesheets/maven-theme.css
 create mode 100644 JodaTimeContrib/jsptags/xdocs/tasks.xml

diff --git a/JodaTimeContrib/jsptags/xdocs/images/joda.png b/JodaTimeContrib/jsptags/xdocs/images/joda.png
new file mode 100644
index 0000000000000000000000000000000000000000..435df26a39732551d2f7ed9b1fdf288be1c83875
GIT binary patch
literal 2919
zcmY*bc{EgSAHT9>C)v0BESbp~S(CBGl$e?^_B~6ojwNKGWSNNUMkJ&mhRl>=EM>`7
zw&BN^Y$4f83=+Nf?T`1I_n!0I=bn4c{XEZozMtibLs(nzaEfyR0KfycG`j}QVc>wU
z9|P|ue%BJgi6g|);lD4L{tg?3&VRv&<Kgft=Eterg8UphIyI<i0N`SSn;D~`iq;(h
zt&rmqaY478CQY0sFSAysyvuRKb8CC3E1D8gl&uN|0<L~w7;mSh;`{CMyf15?_PMm@
zev$O4Gq6zXT!PpL?{n*rgh-9p#P4OVI2kQDc_X{@BUsVG*O+LrAHje6<CZt6%X)2L
z8)0{r^ai5`pu#vanIuU3j*Z0kI&&+U-#^a-UhyNf9aEqZDxEnGg+2Q&a-H=qPb?q}
zx0mHik$r6(9SfaRXPTqQ!+x<OVM*8>gY)N|RP*g@ZEu__R6M^2V~;&6|M-)S2L9Mx
zz?feiZs@?}teW3@okU-cq+H-<H=w=$W87J0{J(XS&kU%hZES30E80xI4fVocvbsE>
zxqT}uD<l%Bv(t=?x`-(@#Qyq-*W{BnnEkn5QBiT6SF&JJjOtlm1dD5Z{W>Bb;A4Px
zSfg{rHHWKL>%*1?($dnpM18a$(<dhfiq8|qS6f`wjQJH56mIWsU^g0<AnEk=)|efC
zCnt&Y`J3alDr#!Metw856dVqxM6T<{?y0BG-!+>3@KB;VU21iGy({#0mxx;pk?8U!
z$OVa{c6PF4bXOCJwr6rb4q6D`9T~Z%n$HE$XteqHdDP+d_BK7ZO+}E?ckl&?gz@u(
zNb({Va5$U`CGtm<fqvjrQ^fxMz5tE|&<^@MF*cUiqZ2$`Q&ZC!`nBCl6pcpzOQ%y_
zzAr^olF4C*zjnwxP7MJLrlzJc{6<#QV~%cae1Nm64!G@^R&0u}h=`r5Yx>u{PdYQ5
zU0uV+GcQ%_?CjXU4$lE8W@T=7_PrZ;{^XJlb~j6q==(a;QC{KUf@iUY;Kv670s@GW
z>GRjBat4>E`#B`(jHRJcQ$G#Sq!TQed3mP=aF9^&<iCaJ3ah`RP;Pf5@%$9aD=eIx
znCL;|ee&UAImVlupxfKq+nsT0_u#O&xcJA9AC+Jkab~jh_Gx>5`ahuud!dZJTqXb4
zF)=aX0J_c<`)hl-zP`S;w)UZfPMNpvZN}PIwVkhz4=_7YaasJ~hxJHiqdRw69f{g_
zt6Q7X*rnoI5DL_p5=m@po7vp`x&NEbaL+v?1W`9$je4Qt)BqUC3!D{y$d=$?*b$&j
zuWLK{b+FmS43rGc)O%S32XB7=9^&OSPx9^u++$;#D=HQl>-23`d3cP0^gWsB+nX)r
z78x6#8_Ca}bp~k1?Tp#^ak3Z}>4vt?g@|$|ef{bq**zTowae>ZZDWd(N##gvPfzD<
zo5@(&oTAtv5br$efv3&QvF`3N0=U?{xnz(_z@vhKC=k<KJ*9`4nc3-0ka^w^Hqy`U
z+Zv5LgWa9#>0$R|J9f9JNx$=RE0%(;E*_jr6;Ug*?DMRTT$?Z!Tl*1ZU96udtf8m3
zPql$n94G_w^75mjqeIC}(LYZYmK(`TkbU`VVOm-d-)D_SS2+%9#{66E95#)wvc`|Q
z-VR)!d~F#6^z`&Vl$1>M84QLa5e<lniG}J)0tggpdlYGNl?hdaIwQz=(H_*7gM$O*
z)+SgO*Vq0+@GSk}jnOKkU9Gc2S|HykLrF<VmUtm0bo1}6{{DP5Lei)HetL7XCaJBi
zPEC}1<oxqz&rr6uS7BJg5^I8Km|$vGZf-6r+eoIeveJGct@|SnHyg7z+S;1e%Yr~4
zlo$5)!U<G8P0jg8%J8BJ6bhH&AL?Z>?(FU^=NR%hCvJOYERjp(ocO~oPlsn7(iz>J
z^-%`Wz#~ifoEmnM(vYqPLI6K+GKdwZEg@vj6yH7HyNFrwg$RP4Q<*le+k*S#Q~r(w
zNF!;>%QsdEm2xjFGnnG-m7n_?NN4mfaweMOToFwg?v>3<nIi*3las&pmr8bbcad69
zC^XX&WCJshKA)yGz`>i`Vc+%kt?o(>4_iXe8;J@9!ICG?qz;dg!Q?&=;-nCFhbXN*
zz(9bf@bTlYu&|12H-ds{`xhObN*MEx<_~2bYZ>!@{p;`!3iRH~dCH}0A-a+|jVK<>
zSx!e{Lt~>@?+XM3G{0AlL~BC%HCgElo!e*mCjzt;ng*A`^ozIAb>lb5Gz7kXu?+d-
zn5hGAvRrmALQjyh^ktG!*1}Ay)rB&U0aBu(AaYF0lPwKEU6lJ9!CBSfo~m1Gkw7(p
zkX+B*(a{0%wY+jgD77m<+v#-nKPnqDZ8jw;@GKv)SSHl(oVXw)41-CRz7Vs}lll91
z>_u6FQ(wM(xvqgnonZwiQ?=CPZ$u;#>E-1GyqgQj%F2SweU&()r6rVmLE6T~hHq@)
z=YA7~BGRyM!dr-wRi8?D{(RJ5Ys-v?zIjf(V@@4-Mj*&#@N*_cM@ReBRiR$Mj`o-<
zP6I<!YB{=EQBjd;Hc`aYo^+i9sBs{(ty9k5+TiBqMl1{r41nTJo!b&l_4fDY1oBi}
zE?qgA>qsVRs<h3(baf}D|6VgQ8TTSE7>tk4>6J2cb)8#VdQWzCwuqYR+RBPaQG2_|
zMQ6`T9iCu1`IcaXfg<ar4A@cB>c1)gJ6l5B(f(4VoP{u&ky+F4S&yJIRVZs|X|Wh1
zgu&REUfq%13T`{h%gakzF_#^tY_`%zMn;B)9^vu0JPU|mLqkJZz}n>No2;y?Dax6a
z({X<eLBW(5L}Nfd573qvLps<Yktg*}naK`|xW&$e>+`Ugy0}Og^QXYQT~22&gDzaT
zwKMM47Wc>S(lf)OJug(R4;dttgoMOkksf&V2@Iapu1V0*z&Mgy?He3?LkkEu27d#0
zQW2q)<N*fGW9`7nmmbU!i+8(b-ZM65U^8<sBUaJby=IDW+rt*yC*$j9!Kgr2=gP)y
z^(ywniP<-WLm%AAAxTL|B_<|T=Jqc>Fq0MJROdFm>Fn$ryT7%#pJUF|h&^EF@i501
z6%~Ol*y(Ifvy?9zUv-OFR`|ev>~4JDpm22!b-AXpvH<I$rlL|@Q1G;kStj<+;jWTh
z?ezd9oY~0e==C@BWvjaJ1DbEiaF_^hG8uIGj$}SxZ|~t;P+?&9mTNN2;(eb~5sBsx
z>YN+5z*u!L0@u>e*N>Tf$Mk_?U@qiAYHHOut_yNGYhhwy;&E^*PLj7n9dE^0%y(n#
z?5NZz3*%R-mcd*J3=9PGc`n4h3Kc|eAXZkUG;yiBYv3p8bS-h7zN05#(fj)P!1jUG
z&kSI(SQQnO^73*H4vueZ%b3QE>6X<<3dg;kzCM#=K6sWRk<p&WmC|^F`aF={z`=5F
zc=)Pdpr)p#5U05e|Jz%e()u|InEgVno8R;j2A3$<gN92L;?mMj@OUsBpddIDTDnO#
zlKDRSKB2VqAHdSeN*Mwv2<vA{Fm7>$85n$A#E{8kkhH;5O}Y8`#{tj!y`_>kRaI4=
zaJ&;ulwVo6f7~rjik)SIO0}zVbwMEFKPw1wf+a2Gk<YYz<+%RBwz{C$mlDb?7_KiR
zbbS${CsZ7$?GzEA1-Ogmfjh}sSZlSJT|970yMO;aD2i=Y4|P#j?2c`s$qAfU+C{mh
zke^Y_FJ7F<;X3;RwsZH7&LjEgrGa9w^m-B9q0KK}hP38?u`fE5Fq1t&nL6s=gZ<v7
z+Q`Yt38%7lyxiN{D=RCrbB$gkzL_q2vLN=iyF8-&e|s4RJf;x@X*Ewdz$O`hn_HXJ
Inz-Nl59h<Bq5uE@

literal 0
HcmV?d00001

diff --git a/JodaTimeContrib/jsptags/xdocs/images/jodatime.png b/JodaTimeContrib/jsptags/xdocs/images/jodatime.png
new file mode 100644
index 0000000000000000000000000000000000000000..4d5d609868c392a2871e8f15100f4ba54b7e92b6
GIT binary patch
literal 2850
zcmai$c{Ei28^^DVeMuoZ6GADZX}&_k*dh$3F_xskSY|?&2rZUx$d)V_YZwwqizRC)
z2GJN|EJNZuA|~rlWc%Ik@9*C^zkAN}JolV?&b^<{b6?N<{YkJzT@vD#<_7>k$imzN
z4b}uO)OZhp*_0ba2Mb?-xl=G$IsO|qCpt&K8=hMh)}}l|f?^`V0uC{)PXU1cgM|qa
z6PCZ^>|`Z+O$Kq!FXzjbL*gefr_U%sAI3z9NSJh{nAG}<48sy*e3UO|3V2MqTe)b!
zx@eLqE>JTI7jmbht&$qi)(&$1^ph9n<6?x9brZK*lh}8(v#?eFcpsF~V#9a(gQvo2
z;r;7Rk;!F*>FBG64kq}*rp4s_CMEt~_&Uhs>xK}0e0TxF^irc@$q$%_h=|_a-lA)^
zw(axmNCPh?Cnp;l8cl0P=H}NX`q&unzTwJ!uG%E1MLKPsy}c{0j%{H4+6nvhQ|dsy
zsj10Kc`jM%+?D~)R@cXm9}R|^uSfN<x^P<UAs#U4OQBg~zHmvY{_G<O3DtYYr)8{F
zh7=aRYPNg&?YF%l(q9Y@V>Z~omL{yNtpPwjwcf3RTSe5rI505KGV3%4psb>@U!S8J
zl}9{>W|>uBoKGLysCoVRFp<e*UU6~xj5qQV<EOlIs)4$h9Nm&jE`?(&>#D1(!G%44
z-t7wyZk#MFE&bj{;^F2NR;{nC&CJSb4QF%zyM1&89zoIitl?{KZyy=ihOMLo>Vp>o
zaeutp)791Wo6SimG-^Aen~D6J;?Bjxb9lb({+@KADygsgk(@vQnEp0%b)6a*7@#Cc
z6e8{s;d!3g<7L));H#-#>YAEuA*`$qxK%dW(%PEZ-`}-%lZeZsV(slim|ZEYtq35>
zTsilgcR$%QY0P*2XhVcyv4*FYm-gPu)cd~PUVZ@qQT|v6GC)UGgCrv>s~@sBytqhg
zhB~}*Nk~cAWV4yzBjIiuO%o3P)gH~MR@vW=>Vf50adC0Exw#<_2ncdo=Ml5PRxR`L
zv+(e6m5fi%X4!1E+wSx<F8+bv#JdEF`&-ABh)v?GSR`d{=eIXC_r$RzH=cX<?p;Bn
zb#-+U6BA3(CrN$Z19bG|ZB9Lr*AIIvHG<a`7Z*=cUSKjgn?KL9J++<u{g<bwi)wtM
zsis<WNL0orSmgfQ7--y$RJUvwjn}VVUz%kw7-v1YpfQF}5nf1Wa7#^%X!^nSyaL8b
z0CFf@dC+-gEzHx?Q{zM-i4<SEjffuC%cPfDWH_GAGFLWY9qwM++6s#{Z1<`$RXpOJ
zXhN3IbS>iD`MnZ<4*~=<y5R5Jxg#MiexWZEKSE6qRRw#qK`YSv-IXHqd-?0cTMr&a
zE*gziON^O~6_8LIe<XjAF*WrHT@ku6Ma5uB1_xl)c9^g*osE~*nz7H&?;{WP_xE<x
z;`8%mN$CeOO-P8>iY->>k%I0m^D1mx#O5gt4dG2AsK{hX_?0Sb;l(@0(oz)+g!3vf
zrwj}Xeqc^L@$>UrT3Y&1%Vcj;sZ`+%DGooi#KeaWqx#Fs%a@n^YsP)+oHrx(rrzHv
zE~L2IW3gXgRimuIb?3JG??2#*2n??pAt51<3gOYYHD<SWe?Ca3<?Y+`RId^OgIMR~
z>4|i9cPCqZIw*tJc+<@I6cBeMw{NdZ`N8uDxo~L^wAO*faJJXjUDim|fauYq>kC7w
zV*>A84T9&ah9}*$m23s{BllaXs)QKLp-cRNf)Dy)Y4Z{i5(;{uzBpVIxm?}h)#tpw
zR>1G8Wbmbf_$@3g2?6a|$=%E|*P3d{<QOTbjyDe;JZNapsTogZHhjPh_`txqvMEHw
zLTYDxV7WujZ6;1+<>cf%e!RLPXVTNtW5{Ru3_VNh?Twk>Mv4SAwiFk0062Kw%#hyg
zWkaQl7Ym>dHLtg}^AZRI@c(fF?UC`!(K@8);?hKY56arwGs|&mYAP))EhHoah|0=3
z21J>aAZ?VClyW#!t+H_vvK?BLbjILd;LOKZ5WY*P@`O5P!H(?LQ9l+J8TB^{3$7@p
zjS-9w%3+rv@m4ujalW@^0bn-hLbY9ZoMKDlfxI+H<62WVTg9EsI+Hsd8t@_oTS;HI
z1*X2fr0`oxMI73af;|avZ08aF*ntt&=Jdo4oSn_}ZG<{dMgV0ff|`3?I)yvS+oLO4
z>S9FgppUP=KlgRb69%a>WL+g4d{CoHd~vp}kgA}tuu;dW>eco2nD2*^C_&lDSNtwt
zzKnXRUoq%IE-5M0504?2RLbh^o;b=!q<{IM9lnm=$RMl1ZWtLE0l??0v1TRFDBc2;
zH>sn&y}c=fHI24Jq5404vaqyFdh}?jAy8?U+nOr|YD<rbDx-XhHBsDNo#6y<zkZJ2
z7<sw99fztrE1h!c2|rMTu0TZY|6Ex)4E$JH+S^zVRelf`XQZUBpAY2?OUxvZx;s0e
z<F2iDx0k=_`KYR@asuY*__vN?rW^o~NK8*ppT3eu4gI}*tyxwcad&KRkOKtfWlM|f
zHSR$x6Uo2)CpTH6OZiA7(%=Grq!=F`pRG)8nK(aJi|-fM*MR{;JF(Pm8L(p=;HnZ*
zQ@gd2%NC-eqd}0o@pznM=;oq*Z3?-{<<t{Yj`p*6?~VZhbDwiEGc(7=9EIbD==8ea
zc~nC}iu8H@EH`C~xcK-Er^w~W#tXr7J$UWhvIz#GztG?&$v86d;Gh~`Gt+Njhq-Y>
zUB4ahh@TB=WOk?C4j<bWJ?+}E^=Fd>vmPBD)(>07t<QdfAj|2Cpy<n_nB`c#17-B*
z&!00w1;mW}{L`eqiHQjg0Gy;3<>k1yjy|@aFMb&sI@0*&&6~Qqy88P1wzkN<Kb!oq
zMrvXs!^4IMqzEY3tL5G`<1%1dTJJSe+zCWtFOBA)CWfutWYpbQ_23o_-~-(+iBj!N
zlYfS;7+Sb&X-OxZSJqM&Agy+gr%7k^*FVMzfb{3(<;BOvf$s6-^0T(KgSs1|(^-Z?
zFh;a&XHcA|DoSVf2h4x6AwB)5%8)M{6tkXJ%Q3vXyggJZomltqC7nppye^z%2Pw9F
zxI8<}+UxRxX*j+C>=B@pNXD&g--VqqQA|TU-$6<IT+REPmzc;ui_hBm%)7R>Hjq<T
zn3@mDxUz+?LOzJ$#XG->t~ScGIvCH-&7sBYot!GLl|tN{ac&$O96^nD2g#<Oyx_Gj
z$o7Nh0ApigaOQXCs4`*2YwPRaCM+#2`)D+8`97oK)t)q^<HwJu%3oYuUgieOmD4vi
zHezB9HE41I(|eiFhnzgZ5C{YYhksnWprPT<s3nY#kArIR;JnSvo0@+h>&Bg(op?MR
z0J6V1$R5q6{I$_uj2Bj4KX=xT0ekBxXnfoog%UQk1Kq8vs>-?Q7yx=z*CV;Sr%zi6
zLn_U$$-I(#CG@Y8le_EREelZb%mx$19GyUN2L&=nr_%=pR@a!9k|_TyEy;<Bo^$&M
ziC=+B3W5R^a9hzL=+DN2FMJ2&ewAQi0{LSIl5*9-VRUpfo*9P0VBFmmlPE+2A)3q7
z*7k8tbZGX}Jgtxe@P*6V>kBZC^57{@Q?I}z?uQnQvh4Vz<>XQnYwPPft_*zp_RYUY
zS5J?{Vj0}u<po3%OpY8m@-M+Ef?HC4`de35cMW8I$6os1!8H-w7I<}6;7zqmuJI&B
R4?N!j7N#hZS4Oy){{UxZaMAz(

literal 0
HcmV?d00001

diff --git a/JodaTimeContrib/jsptags/xdocs/navigation.xml b/JodaTimeContrib/jsptags/xdocs/navigation.xml
new file mode 100644
index 000000000..8b89b944e
--- /dev/null
+++ b/JodaTimeContrib/jsptags/xdocs/navigation.xml
@@ -0,0 +1,60 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+
+<project name="Joda Time">
+
+  <title>Joda Time</title>
+  <organizationLogo href="">Joda.org</organizationLogo>
+
+  <body>
+    <menu name="Joda Time">
+      <item name="Overview" href="index.html"/>
+<!--      <item name="Quick start guide" href="/quickstart.html"/> -->
+<!--      <item name="Users guide" href="/userguide.html"/> -->
+<!--      <item name="FAQ" href="/faq.html"/> -->
+      <item name="Javadoc (Release)" href="/api-release/index.html"/>
+      <item name="License" href="/license.html"/>
+      <item name="Download" href="http://sourceforge.net/project/showfiles.php?group_id=97367"/>
+    </menu>
+<!--
+    <menu name="Key concepts">
+      <item name="Instant" href="/key_instant.html"/>
+      <item name="Partial" href="/key_partial.html"/>
+      <item name="Interval" href="/key_interval.html"/>
+      <item name="Duration" href="/key_duration.html"/>
+      <item name="Period" href="/key_period.html"/>
+      <item name="Chronology" href="/key_chronology.html"/>
+    </menu>
+    
+    <menu name="Chronologies">
+      <item name="ISO8601" href="/cal_iso.html"/>
+      <item name="Buddhist" href="/cal_buddhist.html"/>
+      <item name="Coptic" href="/cal_coptic.html"/>
+      <item name="Gregorian" href="/cal_gregorian.html"/>
+      <item name="GregorianJulian" href="/cal_gj.html"/>
+      <item name="Julian" href="/cal_julian.html"/>
+    </menu>
+-->    
+    <menu name="Development">
+      <item name="Sourceforge" href="http://sourceforge.net/projects/joda-time/"/>
+<!--      <item name="Test results" href="/junit-report.html"/> -->
+<!--      <item name="Test coverage" href="/jcoverage/index.html"/> -->
+      <item name="Mailing lists" href="mail-lists.html"/>
+      <item name="Tasks" href="tasks.html"/>
+      <item name="CVS" href="http://cvs.sourceforge.net/viewcvs.py/joda-time/JodaTimeContrib/jsptags/"/>
+      <item name="Javadoc (CVS)" href="apidocs/index.html"/>
+    </menu>
+
+    <menu name="Joda">
+      <item name="Joda home" href="http://joda.sourceforge.net"/>
+      <item name="Time" href="http://joda-time.sourceforge.net/index.html"/>
+      <item name="Beans" href="http://joda.sourceforge.net/beans.html"/>
+      <item name="Primitives" href="http://joda-primitives.sourceforge.net/index.html"/>
+    </menu>
+    
+    <footer>
+      <a href="http://sourceforge.net">
+        <img src="http://sourceforge.net/sflogo.php?group_id=97367&amp;type=2" width="125" height="37" border="0" alt="SourceForge.net Logo" />
+      </a>
+    </footer>
+  </body>
+</project>
diff --git a/JodaTimeContrib/jsptags/xdocs/stylesheets/maven-theme.css b/JodaTimeContrib/jsptags/xdocs/stylesheets/maven-theme.css
new file mode 100644
index 000000000..d2a9decd1
--- /dev/null
+++ b/JodaTimeContrib/jsptags/xdocs/stylesheets/maven-theme.css
@@ -0,0 +1,119 @@
+body, td, select, input, li{
+  font-family: Helvetica, Arial, sans-serif;
+  font-size: 13px;
+  background-color: #fff;
+}
+a {
+  text-decoration: none;
+}
+a:link {
+  color:#009;
+}
+a:visited  {
+  color:#009;
+}
+a:active, a:hover {
+  text-decoration: underline;
+}
+a.externalLink, a.externalLink:link, a.externalLink:visited, a.externalLink:active, a.externalLink:hover {
+  background: url(../images/external.png) right center no-repeat;
+  padding-right: 15px;
+}
+a.newWindow, a.newWindow:link, a.newWindow:visited, a.newWindow:active, a.newWindow:hover {
+  background: url(../images/newwindow.png) right center no-repeat;
+  padding-right: 18px;
+}
+h2 {
+  font-family: Verdana, Helvetica, Arial, sans-serif;
+  padding: 4px 4px 4px 6px;
+  border: 1px solid #999;
+  color: #006;
+  background-color: #eef;
+  font-weight:bold;
+  font-size: 16px;
+  margin-top: 4px;
+  margin-bottom: 6px;
+}
+h3 {
+  padding: 4px 4px 4px 6px;
+  border: 1px solid #aaa;
+  color: #006;
+  background-color: #eee;
+  font-weight: normal;
+  font-size: 14px;
+  margin-top: 4px;
+  margin-bottom: 6px;
+}
+p, ul {
+  font-size: 13px;
+  margin-top: 4px;
+  margin-bottom: 6px;
+}
+#banner {
+  background-color: #eef;
+}
+#organizationLogo img, #projectLogo img {
+  border: 1px solid #999;
+}
+#breadcrumbs {
+  border-top: 1px solid #aaa;
+  border-bottom: 1px solid #aaa;
+  background-color: #ccc;
+}
+#leftColumn {
+  margin: 8px 0 8px 4px;
+  border: 1px solid #999;
+  background-color: #eef;
+}
+#navcolumn {
+  padding: 6px 4px 0 6px;
+}
+#navcolumn h5 {
+  font-size: 12px;
+  border-bottom: 1px solid #aaaaaa;
+  padding-top: 2px;
+  font-weight: normal;
+}
+#navcolumn li {
+  font-size: 12px;
+  padding-left: 12px;
+  background-color: #eef;
+}
+#navcolumn a:active, #navcolumn a:hover {
+  text-decoration: none;
+}
+#lastPublished {
+  font-size: 10px;
+}
+table.bodyTable th {
+  color: white;
+  background-color: #bbb;
+  text-align: left;
+  font-weight: bold;
+  font-size: 13px;
+}
+
+table.bodyTable th, table.bodyTable td {
+  font-size: 13px;
+}
+
+table.bodyTable tr.a {
+  background-color: #ddd;
+}
+
+table.bodyTable tr.b {
+  background-color: #eee;
+}
+
+.source {
+  border: 1px solid #999;
+  padding: 8px;
+  margin: 6px;
+}
+#footer {
+  background-color: #eef;
+  border-top: 1px solid #999;
+}
+body {
+  padding-bottom: 0px;
+}
diff --git a/JodaTimeContrib/jsptags/xdocs/tasks.xml b/JodaTimeContrib/jsptags/xdocs/tasks.xml
new file mode 100644
index 000000000..ddd9d16ad
--- /dev/null
+++ b/JodaTimeContrib/jsptags/xdocs/tasks.xml
@@ -0,0 +1,18 @@
+<?xml version="1.0"?>
+
+<document>
+
+  <properties>
+    <title>Joda Time JSP tags support - Tasks outstanding</title>
+    <author email="scolebourne@users.sourceforge.net">Stephen Colebourne</author>
+  </properties>
+
+  <body>
+    <section name="Tasks outstanding">
+<p>
+The project needs a release!
+Contact the mailing lists for more details or to help.
+</p>
+    </section>
+  </body>
+</document>

From ecb3c8132a2d6c147a4f9bfbe500b3e7da0da834 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 20 Jul 2005 23:52:04 +0000
Subject: [PATCH 102/124] Add basic checkstyle

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@834 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/jsptags/checkstyle.xml | 81 ++++++++++++++++++++++++++
 1 file changed, 81 insertions(+)
 create mode 100644 JodaTimeContrib/jsptags/checkstyle.xml

diff --git a/JodaTimeContrib/jsptags/checkstyle.xml b/JodaTimeContrib/jsptags/checkstyle.xml
new file mode 100644
index 000000000..37326e2f0
--- /dev/null
+++ b/JodaTimeContrib/jsptags/checkstyle.xml
@@ -0,0 +1,81 @@
+<?xml version="1.0"?>
+
+<!DOCTYPE module PUBLIC
+    "-//Puppy Crawl//DTD Check Configuration 1.1//EN"
+    "http://www.puppycrawl.com/dtds/configuration_1_1.dtd">
+
+<!-- customization of default Checkstyle behavior -->
+<module name="Checker">
+  <property name="localeLanguage" value="en"/>
+  <!--module name="PackageHtml"/-->
+  <module name="TreeWalker">
+    <module name="MemberName">
+      <property name="format" value="^[a-zA-Z][a-zA-Z0-9]*$"/>
+    </module>
+    <module name="LocalVariableName">
+      <property name="format" value="^ex[0-9]*$"/>
+      <property name="tokens" value="PARAMETER_DEF"/>
+    </module>
+    <module name="AvoidStarImport"/>
+    <module name="RedundantImport"/>
+    <module name="UnusedImports"/>
+    
+    <module name="TabCharacter"/>
+    <module name="NeedBraces"/>
+    <!--module name="TypecastParenPad"/-->
+    <module name="WhitespaceAfter"/>
+    <module name="WhitespaceAround"/>
+    <module name="ModifierOrder"/>
+    <module name="RedundantModifier"/>
+    
+    <module name="EmptyBlock"/>
+    <module name="LeftCurly"/>
+    <module name="NeedBraces"/>
+    <module name="RightCurly"/>
+    <!--module name="AvoidNestedBlocks">
+      <property name="allowInSwitchCase" value="true"/>
+    </module-->
+    
+    <!--module name="ArrayTrailingComma"/-->
+    <!--module name="CovariantEquals"/-->
+    <module name="DoubleCheckedLocking"/>
+    <module name="EmptyStatement"/>
+    <module name="EqualsHashCode"/>
+    <!--module name="HiddenField">
+      <property name="ignoreConstructorParameter" value="true"/>
+      <property name="ignoreSetter" value="true"/>
+    </module-->
+    <module name="IllegalInstantiation">
+      <property name="classes" value="java.lang.Boolean"/>
+    </module>
+    <!--module name="SuperClone"/-->
+    <!--module name="ExplicitInitialization"/-->
+              
+    <module name="GenericIllegalRegexp">
+      <property name="format" value="System\.out\.println"/>
+    </module>
+    <module name="GenericIllegalRegexp">
+      <property name="format" value="System\.err\.println"/>
+    </module>
+    <module name="TodoComment"/>
+    <module name="UpperEll"/>
+    <module name="ArrayTypeStyle"/>
+    <!--module name="Indentation"/-->
+          
+    <module name="RedundantThrows">
+      <property name="allowUnchecked" value="true"/>
+    </module>
+    <module name="LineLength">
+      <property name="max" value="120"/>
+    </module>
+    <module name="JavadocVariable">
+      <property name="excludeScope" value="private"/>
+    </module>
+    <module name="JavadocMethod">
+      <property name="excludeScope" value="private"/>
+      <property name="allowUndeclaredRTE" value="true"/>
+    </module>
+ </module>
+</module>
+                        
+

From 73517eabb390f26bb536a3d75fa22167c79d6286 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Thu, 21 Jul 2005 03:53:19 +0000
Subject: [PATCH 103/124] Update to version 2005k.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@835 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/java/org/joda/time/tz/src/Readme.txt  |    2 +-
 JodaTime/src/java/org/joda/time/tz/src/africa | 1210 ++--
 .../src/java/org/joda/time/tz/src/antarctica  |  638 +--
 JodaTime/src/java/org/joda/time/tz/src/asia   | 3122 +++++------
 .../src/java/org/joda/time/tz/src/australasia | 2718 ++++-----
 JodaTime/src/java/org/joda/time/tz/src/europe | 4868 ++++++++---------
 .../java/org/joda/time/tz/src/northamerica    | 4104 +++++++-------
 .../java/org/joda/time/tz/src/southamerica    | 2166 ++++----
 8 files changed, 9413 insertions(+), 9415 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
index 143f1075a..35fba172a 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
+++ b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
@@ -1,2 +1,2 @@
 The data files in this directory were obtained from the public tz database,
-http://www.twinsun.com/tz/tz-link.htm, version 2005i.
+http://www.twinsun.com/tz/tz-link.htm, version 2005k.
diff --git a/JodaTime/src/java/org/joda/time/tz/src/africa b/JodaTime/src/java/org/joda/time/tz/src/africa
index 7069102b3..7d75ae3a0 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/africa
+++ b/JodaTime/src/java/org/joda/time/tz/src/africa
@@ -1,605 +1,605 @@
-# @(#)africa	7.37
-
-# This data is by no means authoritative; if you think you know better,
-# go ahead and edit the file (and please send any changes to
-# tz@elsie.nci.nih.gov for general use in the future).
-
-# From Paul Eggert <eggert@twinsun.com> (1999-03-22):
-#
-# A good source for time zone historical data outside the U.S. is
-# Thomas G. Shanks, The International Atlas (5th edition),
-# San Diego: ACS Publications, Inc. (1999).
-#
-# Gwillim Law writes that a good source
-# for recent time zone data is the International Air Transport
-# Association's Standard Schedules Information Manual (IATA SSIM),
-# published semiannually.  Law sent in several helpful summaries
-# of the IATA's data after 1990.
-#
-# Except where otherwise noted, Shanks is the source for entries through 1990,
-# and IATA SSIM is the source for entries after 1990.
-#
-# Another source occasionally used is Edward W. Whitman, World Time Differences,
-# Whitman Publishing Co, 2 Niagara Av, Ealing, London (undated), which
-# I found in the UCLA library.
-#
-# A reliable and entertaining source about time zones is
-# Derek Howse, Greenwich time and longitude, Philip Wilson Publishers (1997).
-#
-# Previous editions of this database used WAT, CAT, SAT, and EAT
-# for +0:00 through +3:00, respectively,
-# but Mark R V Murray <markm@grondar.za> reports that
-# `SAST' is the official abbreviation for +2:00 in the country of South Africa,
-# `CAT' is commonly used for +2:00 in countries north of South Africa, and
-# `WAT' is probably the best name for +1:00, as the common phrase for
-# the area that includes Nigeria is ``West Africa''.
-# He has heard of ``Western Sahara Time'' for +0:00 but can find no reference.
-#
-# To make things confusing, `WAT' seems to have been used for -1:00 long ago;
-# I'd guess that this was because people needed _some_ name for -1:00,
-# and at the time, far west Africa was the only major land area in -1:00.
-# This usage is now obsolete, as the last use of -1:00 on the African
-# mainland seems to have been 1976 in Western Sahara.
-#
-# To summarize, the following abbreviations seem to have some currency:
-#	-1:00	WAT	West Africa Time (no longer used)
-#	 0:00	GMT	Greenwich Mean Time
-#	 2:00	CAT	Central Africa Time
-#	 2:00	SAST	South Africa Standard Time
-# and Murray suggests the following abbreviation:
-#	 1:00	WAT	West Africa Time
-# I realize that this leads to `WAT' being used for both -1:00 and 1:00
-# for times before 1976, but this is the best I can think of
-# until we get more information.
-#
-# I invented the following abbreviations; corrections are welcome!
-#	 2:00	WAST	West Africa Summer Time
-#	 2:30	BEAT	British East Africa Time (no longer used)
-#	 2:44:45 BEAUT	British East Africa Unified Time (no longer used)
-#	 3:00	CAST	Central Africa Summer Time (no longer used)
-#	 3:00	SAST	South Africa Summer Time (no longer used)
-#	 3:00	EAT	East Africa Time
-#	 4:00	EAST	East Africa Summer Time (no longer used)
-
-# Algeria
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Algeria	1916	only	-	Jun	14	23:00s	1:00	S
-Rule	Algeria	1916	1919	-	Oct	Sun<=7	23:00s	0	-
-Rule	Algeria	1917	only	-	Mar	24	23:00s	1:00	S
-Rule	Algeria	1918	only	-	Mar	 9	23:00s	1:00	S
-Rule	Algeria	1919	only	-	Mar	 1	23:00s	1:00	S
-Rule	Algeria	1920	only	-	Feb	14	23:00s	1:00	S
-Rule	Algeria	1920	only	-	Oct	23	23:00s	0	-
-Rule	Algeria	1921	only	-	Mar	14	23:00s	1:00	S
-Rule	Algeria	1921	only	-	Jun	21	23:00s	0	-
-Rule	Algeria	1939	only	-	Sep	11	23:00s	1:00	S
-Rule	Algeria	1939	only	-	Nov	19	 1:00	0	-
-Rule	Algeria	1944	1945	-	Apr	Mon<=7	 2:00	1:00	S
-Rule	Algeria	1944	only	-	Oct	 8	 2:00	0	-
-Rule	Algeria	1945	only	-	Sep	16	 1:00	0	-
-Rule	Algeria	1971	only	-	Apr	25	23:00s	1:00	S
-Rule	Algeria	1971	only	-	Sep	26	23:00s	0	-
-Rule	Algeria	1977	only	-	May	 6	 0:00	1:00	S
-Rule	Algeria	1977	only	-	Oct	21	 0:00	0	-
-Rule	Algeria	1978	only	-	Mar	24	 1:00	1:00	S
-Rule	Algeria	1978	only	-	Sep	22	 3:00	0	-
-Rule	Algeria	1980	only	-	Apr	25	 0:00	1:00	S
-Rule	Algeria	1980	only	-	Oct	31	 2:00	0	-
-# Shanks gives 0:09 for Paris Mean Time; go with Howse's more precise 0:09:21.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Algiers	0:12:12 -	LMT	1891 Mar 15 0:01
-			0:09:21	-	PMT	1911 Mar 11    # Paris Mean Time
-			0:00	Algeria	WE%sT	1940 Feb 25 2:00
-			1:00	Algeria	CE%sT	1946 Oct  7
-			0:00	-	WET	1956 Jan 29
-			1:00	-	CET	1963 Apr 14
-			0:00	Algeria	WE%sT	1977 Oct 21
-			1:00	Algeria	CE%sT	1979 Oct 26
-			0:00	Algeria	WE%sT	1981 May
-			1:00	-	CET
-
-# Angola
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Luanda	0:52:56	-	LMT	1892
-			0:52:04	-	AOT	1911 May 26 # Angola Time
-			1:00	-	WAT
-
-# Benin
-# Whitman says they switched to 1:00 in 1946, not 1934; go with Shanks.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Africa/Porto-Novo	0:10:28	-	LMT	1912
-			0:00	-	GMT	1934 Feb 26
-			1:00	-	WAT
-
-# Botswana
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Gaborone	1:43:40 -	LMT	1885
-			2:00	-	CAT	1943 Sep 19 2:00
-			2:00	1:00	CAST	1944 Mar 19 2:00
-			2:00	-	CAT
-
-# Burkina Faso
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Africa/Ouagadougou	-0:06:04 -	LMT	1912
-			 0:00	-	GMT
-
-# Burundi
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Africa/Bujumbura	1:57:28	-	LMT	1890
-			2:00	-	CAT
-
-# Cameroon
-# Whitman says they switched to 1:00 in 1920; go with Shanks.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Douala	0:38:48	-	LMT	1912
-			1:00	-	WAT
-
-# Cape Verde
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Atlantic/Cape_Verde -1:34:04 -	LMT	1907			# Praia
-			-2:00	-	CVT	1942 Sep
-			-2:00	1:00	CVST	1945 Oct 15
-			-2:00	-	CVT	1975 Nov 25 2:00
-			-1:00	-	CVT
-
-# Central African Republic
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Bangui	1:14:20	-	LMT	1912
-			1:00	-	WAT
-
-# Chad
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Ndjamena	1:00:12 -	LMT	1912
-			1:00	-	WAT	1979 Oct 14
-			1:00	1:00	WAST	1980 Mar  8
-			1:00	-	WAT
-
-# Comoros
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Indian/Comoro	2:53:04 -	LMT	1911 Jul   # Moroni, Gran Comoro
-			3:00	-	EAT
-
-# Democratic Republic of Congo
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Africa/Kinshasa	1:01:12 -	LMT	1897 Nov 9
-			1:00	-	WAT
-Zone Africa/Lubumbashi	1:49:52 -	LMT	1897 Nov 9
-			2:00	-	CAT
-
-# Republic of the Congo
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Africa/Brazzaville	1:01:08 -	LMT	1912
-			1:00	-	WAT
-
-# Cote D'Ivoire
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Abidjan	-0:16:08 -	LMT	1912
-			 0:00	-	GMT
-
-# Djibouti
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Djibouti	2:52:36 -	LMT	1911 Jul
-			3:00	-	EAT
-
-###############################################################################
-
-# Egypt
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Egypt	1940	only	-	Jul	15	0:00	1:00	S
-Rule	Egypt	1940	only	-	Oct	 1	0:00	0	-
-Rule	Egypt	1941	only	-	Apr	15	0:00	1:00	S
-Rule	Egypt	1941	only	-	Sep	16	0:00	0	-
-Rule	Egypt	1942	1944	-	Apr	 1	0:00	1:00	S
-Rule	Egypt	1942	only	-	Oct	27	0:00	0	-
-Rule	Egypt	1943	1945	-	Nov	 1	0:00	0	-
-Rule	Egypt	1945	only	-	Apr	16	0:00	1:00	S
-Rule	Egypt	1957	only	-	May	10	0:00	1:00	S
-Rule	Egypt	1957	1958	-	Oct	 1	0:00	0	-
-Rule	Egypt	1958	only	-	May	 1	0:00	1:00	S
-Rule	Egypt	1959	1981	-	May	 1	1:00	1:00	S
-Rule	Egypt	1959	1965	-	Sep	30	3:00	0	-
-Rule	Egypt	1966	1994	-	Oct	 1	3:00	0	-
-Rule	Egypt	1982	only	-	Jul	25	1:00	1:00	S
-Rule	Egypt	1983	only	-	Jul	12	1:00	1:00	S
-Rule	Egypt	1984	1988	-	May	 1	1:00	1:00	S
-Rule	Egypt	1989	only	-	May	 6	1:00	1:00	S
-Rule	Egypt	1990	1994	-	May	 1	1:00	1:00	S
-# IATA (after 1990) says transitions are at 0:00.
-# Go with IATA starting in 1995, except correct 1995 entry from 09-30 to 09-29.
-Rule	Egypt	1995	max	-	Apr	lastFri	 0:00s	1:00	S
-Rule	Egypt	1995	max	-	Sep	lastThu	23:00s	0	-
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Cairo	2:05:00 -	LMT	1900 Oct
-			2:00	Egypt	EE%sT
-
-# Equatorial Guinea
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Malabo	0:35:08 -	LMT	1912
-			0:00	-	GMT	1963 Dec 15
-			1:00	-	WAT
-
-# Eritrea
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Asmera	2:35:32 -	LMT	1870
-			2:35:32	-	AMT	1890	      # Asmera Mean Time
-			2:35:20	-	ADMT	1936 May 5    # Adis Dera MT
-			3:00	-	EAT
-
-# Ethiopia
-# From Paul Eggert (1997-10-05):
-# Shanks writes that Ethiopia had six narrowly-spaced time zones between
-# 1870 and 1890, and that they merged to 38E50 (2:35:20) in 1890.
-# We'll guess that 38E50 is for Adis Dera.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Africa/Addis_Ababa	2:34:48 -	LMT	1870
-			2:35:20	-	ADMT	1936 May 5    # Adis Dera MT
-			3:00	-	EAT
-
-# Gabon
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Africa/Libreville	0:37:48 -	LMT	1912
-			1:00	-	WAT
-
-# Gambia
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Banjul	-1:06:36 -	LMT	1912
-			-1:06:36 -	BMT	1935	# Banjul Mean Time
-			-1:00	-	WAT	1964
-			 0:00	-	GMT
-
-# Ghana
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-# Whitman says DST was observed from 1931 to ``the present''; go with Shanks.
-Rule	Ghana	1936	1942	-	Sep	 1	0:00	0:20	GHST
-Rule	Ghana	1936	1942	-	Dec	31	0:00	0	GMT
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Accra	-0:00:52 -	LMT	1918
-			 0:00	Ghana	%s
-
-# Guinea
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Conakry	-0:54:52 -	LMT	1912
-			 0:00	-	GMT	1934 Feb 26
-			-1:00	-	WAT	1960
-			 0:00	-	GMT
-
-# Guinea-Bissau
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Bissau	-1:02:20 -	LMT	1911 May 26
-			-1:00	-	WAT	1975
-			 0:00	-	GMT
-
-# Kenya
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Nairobi	2:27:16	-	LMT	1928 Jul
-			3:00	-	EAT	1930
-			2:30	-	BEAT	1940
-			2:44:45	-	BEAUT	1960
-			3:00	-	EAT
-
-# Lesotho
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Maseru	1:50:00 -	LMT	1903 Mar
-			2:00	-	SAST	1943 Sep 19 2:00
-			2:00	1:00	SAST	1944 Mar 19 2:00
-			2:00	-	SAST
-
-# Liberia
-# From Paul Eggert <eggert@twinsun.com> (2001-07-17):
-# In 1972 Liberia was the last country to switch
-# from a UTC offset that was not a multiple of 15 or 20 minutes.
-# Howse reports that it was in honor of their president's birthday.
-# Shanks reports the date as May 1, whereas Howse reports Jan; go with Shanks.
-# For Liberia before 1972, Shanks reports -0:44, whereas Howse and Whitman
-# each report -0:44:30; go with the more precise figure.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Monrovia	-0:43:08 -	LMT	1882
-			-0:43:08 -	MMT	1919 Mar # Monrovia Mean Time
-			-0:44:30 -	LRT	1972 May # Liberia Time
-			 0:00	-	GMT
-
-###############################################################################
-
-# Libya
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Libya	1951	only	-	Oct	14	2:00	1:00	S
-Rule	Libya	1952	only	-	Jan	 1	0:00	0	-
-Rule	Libya	1953	only	-	Oct	 9	2:00	1:00	S
-Rule	Libya	1954	only	-	Jan	 1	0:00	0	-
-Rule	Libya	1955	only	-	Sep	30	0:00	1:00	S
-Rule	Libya	1956	only	-	Jan	 1	0:00	0	-
-Rule	Libya	1982	1984	-	Apr	 1	0:00	1:00	S
-Rule	Libya	1982	1985	-	Oct	 1	0:00	0	-
-Rule	Libya	1985	only	-	Apr	 6	0:00	1:00	S
-Rule	Libya	1986	only	-	Apr	 4	0:00	1:00	S
-Rule	Libya	1986	only	-	Oct	 3	0:00	0	-
-Rule	Libya	1987	1989	-	Apr	 1	0:00	1:00	S
-Rule	Libya	1987	1989	-	Oct	 1	0:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Tripoli	0:52:44 -	LMT	1920
-			1:00	Libya	CE%sT	1959
-			2:00	-	EET	1982
-			1:00	Libya	CE%sT	1990 May  4
-# The following entries are all from Shanks;
-# the IATA SSIM data contain some obvious errors.
-			2:00	-	EET	1996 Sep 30
-			1:00	-	CET	1997 Apr  4
-			1:00	1:00	CEST	1997 Oct  4
-			2:00	-	EET
-
-# Madagascar
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Indian/Antananarivo 3:10:04 -	LMT	1911 Jul
-			3:00	-	EAT	1954 Feb 27 23:00s
-			3:00	1:00	EAST	1954 May 29 23:00s
-			3:00	-	EAT
-
-# Malawi
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Blantyre	2:20:00 -	LMT	1903 Mar
-			2:00	-	CAT
-
-# Mali
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Bamako	-0:32:00 -	LMT	1912
-			 0:00	-	GMT	1934 Feb 26
-			-1:00	-	WAT	1960 Jun 20
-			 0:00	-	GMT
-# no longer different from Bamako, but too famous to omit
-Zone	Africa/Timbuktu	-0:12:04 -	LMT	1912
-			 0:00	-	GMT
-
-# Mauritania
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Africa/Nouakchott	-1:03:48 -	LMT	1912
-			 0:00	-	GMT	1934 Feb 26
-			-1:00	-	WAT	1960 Nov 28
-			 0:00	-	GMT
-
-# Mauritius
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Indian/Mauritius	3:50:00 -	LMT	1907		# Port Louis
-			4:00	-	MUT	# Mauritius Time
-# Agalega Is, Rodriguez
-# no information; probably like Indian/Mauritius
-
-# Mayotte
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Indian/Mayotte	3:00:56 -	LMT	1911 Jul	# Mamoutzou
-			3:00	-	EAT
-
-# Morocco
-# See the `europe' file for Spanish Morocco (Africa/Ceuta).
-# RULE	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Morocco	1939	only	-	Sep	12	 0:00	1:00	S
-Rule	Morocco	1939	only	-	Nov	19	 0:00	0	-
-Rule	Morocco	1940	only	-	Feb	25	 0:00	1:00	S
-Rule	Morocco	1945	only	-	Nov	18	 0:00	0	-
-Rule	Morocco	1950	only	-	Jun	11	 0:00	1:00	S
-Rule	Morocco	1950	only	-	Oct	29	 0:00	0	-
-Rule	Morocco	1967	only	-	Jun	 3	12:00	1:00	S
-Rule	Morocco	1967	only	-	Oct	 1	 0:00	0	-
-Rule	Morocco	1974	only	-	Jun	24	 0:00	1:00	S
-Rule	Morocco	1974	only	-	Sep	 1	 0:00	0	-
-Rule	Morocco	1976	1977	-	May	 1	 0:00	1:00	S
-Rule	Morocco	1976	only	-	Aug	 1	 0:00	0	-
-Rule	Morocco	1977	only	-	Sep	28	 0:00	0	-
-Rule	Morocco	1978	only	-	Jun	 1	 0:00	1:00	S
-Rule	Morocco	1978	only	-	Aug	 4	 0:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Africa/Casablanca	-0:30:20 -	LMT	1913 Oct 26
-			 0:00	Morocco	WE%sT	1984 Mar 16
-			 1:00	-	CET	1986
-			 0:00	-	WET
-# Western Sahara
-Zone Africa/El_Aaiun	-0:52:48 -	LMT	1934 Jan
-			-1:00	-	WAT	1976 Apr 14
-			 0:00	-	WET
-
-# Mozambique
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Maputo	2:10:20 -	LMT	1903 Mar
-			2:00	-	CAT
-
-# Namibia
-# The 1994-04-03 transition is from Shanks.
-# Shanks reports no DST after 1998-04; go with IATA.
-# RULE	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Namibia	1994	max	-	Sep	Sun>=1	2:00	1:00	S
-Rule	Namibia	1995	max	-	Apr	Sun>=1	2:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Windhoek	1:08:24 -	LMT	1892 Feb 8
-			1:30	-	SWAT	1903 Mar	# SW Africa Time
-			2:00	-	SAST	1942 Sep 20 2:00
-			2:00	1:00	SAST	1943 Mar 21 2:00
-			2:00	-	SAST	1990 Mar 21 # independence
-			2:00	-	CAT	1994 Apr  3
-			1:00	Namibia	WA%sT
-
-# Niger
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Niamey	 0:08:28 -	LMT	1912
-			-1:00	-	WAT	1934 Feb 26
-			 0:00	-	GMT	1960
-			 1:00	-	WAT
-
-# Nigeria
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Lagos	0:13:36 -	LMT	1919 Sep
-			1:00	-	WAT
-
-# Reunion
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Indian/Reunion	3:41:52 -	LMT	1911 Jun	# Saint-Denis
-			4:00	-	RET	# Reunion Time
-#
-# Scattered Islands (Iles Eparses) administered from Reunion are as follows.
-# The following information about them is taken from
-# Iles Eparses (www.outre-mer.gouv.fr/domtom/ile.htm, 1997-07-22, in French;
-# no longer available as of 1999-08-17).
-# We have no info about their time zone histories.
-#
-# Bassas da India - uninhabited
-# Europa Island - inhabited from 1905 to 1910 by two families
-# Glorioso Is - inhabited until at least 1958
-# Juan de Nova - uninhabited
-# Tromelin - inhabited until at least 1958
-
-# Rwanda
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Kigali	2:00:16 -	LMT	1935 Jun
-			2:00	-	CAT
-
-# St Helena
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Atlantic/St_Helena	-0:22:48 -	LMT	1890		# Jamestown
-			-0:22:48 -	JMT	1951	# Jamestown Mean Time
-			 0:00	-	GMT
-# The other parts of the St Helena territory are similar:
-#	Tristan da Cunha: on GMT, say Whitman and the CIA
-#	Ascension: on GMT, says usno1995 and the CIA
-#	Gough (scientific station since 1955; sealers wintered previously):
-#		on GMT, says the CIA
-#	Inaccessible, Nightingale: no information, but probably GMT
-
-# Sao Tome and Principe
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Sao_Tome	 0:26:56 -	LMT	1884
-			-0:36:32 -	LMT	1912	# Lisbon Mean Time
-			 0:00	-	GMT
-
-# Senegal
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Dakar	-1:09:44 -	LMT	1912
-			-1:00	-	WAT	1941 Jun
-			 0:00	-	GMT
-
-# Seychelles
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Indian/Mahe	3:41:48 -	LMT	1906 Jun	# Victoria
-			4:00	-	SCT	# Seychelles Time
-# From Paul Eggert (2001-05-30):
-# Aldabra, Farquhar, and Desroches, originally dependencies of the
-# Seychelles, were transferred to the British Indian Ocean Territory
-# in 1965 and returned to Seychelles control in 1976.  We don't know
-# whether this affected their time zone, so omit this for now.
-# Possibly the islands were uninhabited.
-
-# Sierra Leone
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-# Whitman gives Mar 31 - Aug 31 for 1931 on; go with Shanks.
-Rule	SL	1935	1942	-	Jun	 1	0:00	0:40	SLST
-Rule	SL	1935	1942	-	Oct	 1	0:00	0	WAT
-Rule	SL	1957	1962	-	Jun	 1	0:00	1:00	SLST
-Rule	SL	1957	1962	-	Sep	 1	0:00	0	GMT
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Freetown	-0:53:00 -	LMT	1882
-			-0:53:00 -	FMT	1913 Jun # Freetown Mean Time
-			-1:00	SL	%s	1957
-			 0:00	SL	%s
-
-# Somalia
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Africa/Mogadishu	3:01:28 -	LMT	1893 Nov
-			3:00	-	EAT	1931
-			2:30	-	BEAT	1957
-			3:00	-	EAT
-
-# South Africa
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	SA	1942	1943	-	Sep	Sun>=15	2:00	1:00	-
-Rule	SA	1943	1944	-	Mar	Sun>=15	2:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Africa/Johannesburg 1:52:00 -	LMT	1892 Feb 8
-			1:30	-	SAST	1903 Mar
-			2:00	SA	SAST
-# Marion and Prince Edward Is
-# scientific station since 1947
-# no information
-
-# Sudan
-#
-# From <a href="http://www.sunanews.net/sn13jane.html">
-# Sudan News Agency (2000-01-13)
-# </a>, also reported by Michael De Beukelaer-Dossche via Steffen Thorsen:
-# Clocks will be moved ahead for 60 minutes all over the Sudan as of noon
-# Saturday....  This was announced Thursday by Caretaker State Minister for
-# Manpower Abdul-Rahman Nur-Eddin.
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Sudan	1970	only	-	May	 1	0:00	1:00	S
-Rule	Sudan	1970	1985	-	Oct	15	0:00	0	-
-Rule	Sudan	1971	only	-	Apr	30	0:00	1:00	S
-Rule	Sudan	1972	1985	-	Apr	lastSun	0:00	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Khartoum	2:10:08 -	LMT	1931
-			2:00	Sudan	CA%sT	2000 Jan 15 12:00
-			3:00	-	EAT
-
-# Swaziland
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Mbabane	2:04:24 -	LMT	1903 Mar
-			2:00	-	SAST
-
-# Tanzania
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Africa/Dar_es_Salaam 2:37:08 -	LMT	1931
-			3:00	-	EAT	1948
-			2:44:45	-	BEAUT	1961
-			3:00	-	EAT
-
-# Togo
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Lome	0:04:52 -	LMT	1893
-			0:00	-	GMT
-
-# Tunisia
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Tunisia	1939	only	-	Apr	15	23:00s	1:00	S
-Rule	Tunisia	1939	only	-	Nov	18	23:00s	0	-
-Rule	Tunisia	1940	only	-	Feb	25	23:00s	1:00	S
-Rule	Tunisia	1941	only	-	Oct	 6	 0:00	0	-
-Rule	Tunisia	1942	only	-	Mar	 9	 0:00	1:00	S
-Rule	Tunisia	1942	only	-	Nov	 2	 3:00	0	-
-Rule	Tunisia	1943	only	-	Mar	29	 2:00	1:00	S
-Rule	Tunisia	1943	only	-	Apr	17	 2:00	0	-
-Rule	Tunisia	1943	only	-	Apr	25	 2:00	1:00	S
-Rule	Tunisia	1943	only	-	Oct	 4	 2:00	0	-
-Rule	Tunisia	1944	1945	-	Apr	Mon>=1	 2:00	1:00	S
-Rule	Tunisia	1944	only	-	Oct	 8	 0:00	0	-
-Rule	Tunisia	1945	only	-	Sep	16	 0:00	0	-
-Rule	Tunisia	1977	only	-	Apr	30	 0:00s	1:00	S
-Rule	Tunisia	1977	only	-	Sep	24	 0:00s	0	-
-Rule	Tunisia	1978	only	-	May	 1	 0:00s	1:00	S
-Rule	Tunisia	1978	only	-	Oct	 1	 0:00s	0	-
-Rule	Tunisia	1988	only	-	Jun	 1	 0:00s	1:00	S
-Rule	Tunisia	1988	1990	-	Sep	lastSun	 0:00s	0	-
-Rule	Tunisia	1989	only	-	Mar	26	 0:00s	1:00	S
-Rule	Tunisia	1990	only	-	May	 1	 0:00s	1:00	S
-# Shanks gives 0:09 for Paris Mean Time; go with Howse's more precise 0:09:21.
-# Shanks says the 1911 switch occurred on Mar 9; go with Howse's Mar 11.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Tunis	0:40:44 -	LMT	1881 May 12
-			0:09:21	-	PMT	1911 Mar 11    # Paris Mean Time
-			1:00	Tunisia	CE%sT
-
-# Uganda
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Kampala	2:09:40 -	LMT	1928 Jul
-			3:00	-	EAT	1930
-			2:30	-	BEAT	1948
-			2:44:45	-	BEAUT	1957
-			3:00	-	EAT
-
-# Zambia
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Lusaka	1:53:08 -	LMT	1903 Mar
-			2:00	-	CAT
-
-# Zimbabwe
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Harare	2:04:12 -	LMT	1903 Mar
-			2:00	-	CAT
+# @(#)africa	7.38
+
+# This data is by no means authoritative; if you think you know better,
+# go ahead and edit the file (and please send any changes to
+# tz@elsie.nci.nih.gov for general use in the future).
+
+# From Paul Eggert (1999-03-22):
+#
+# A good source for time zone historical data outside the U.S. is
+# Thomas G. Shanks, The International Atlas (5th edition),
+# San Diego: ACS Publications, Inc. (1999).
+#
+# Gwillim Law writes that a good source
+# for recent time zone data is the International Air Transport
+# Association's Standard Schedules Information Manual (IATA SSIM),
+# published semiannually.  Law sent in several helpful summaries
+# of the IATA's data after 1990.
+#
+# Except where otherwise noted, Shanks is the source for entries through 1990,
+# and IATA SSIM is the source for entries after 1990.
+#
+# Another source occasionally used is Edward W. Whitman, World Time Differences,
+# Whitman Publishing Co, 2 Niagara Av, Ealing, London (undated), which
+# I found in the UCLA library.
+#
+# A reliable and entertaining source about time zones is
+# Derek Howse, Greenwich time and longitude, Philip Wilson Publishers (1997).
+#
+# Previous editions of this database used WAT, CAT, SAT, and EAT
+# for +0:00 through +3:00, respectively,
+# but Mark R V Murray reports that
+# `SAST' is the official abbreviation for +2:00 in the country of South Africa,
+# `CAT' is commonly used for +2:00 in countries north of South Africa, and
+# `WAT' is probably the best name for +1:00, as the common phrase for
+# the area that includes Nigeria is ``West Africa''.
+# He has heard of ``Western Sahara Time'' for +0:00 but can find no reference.
+#
+# To make things confusing, `WAT' seems to have been used for -1:00 long ago;
+# I'd guess that this was because people needed _some_ name for -1:00,
+# and at the time, far west Africa was the only major land area in -1:00.
+# This usage is now obsolete, as the last use of -1:00 on the African
+# mainland seems to have been 1976 in Western Sahara.
+#
+# To summarize, the following abbreviations seem to have some currency:
+#	-1:00	WAT	West Africa Time (no longer used)
+#	 0:00	GMT	Greenwich Mean Time
+#	 2:00	CAT	Central Africa Time
+#	 2:00	SAST	South Africa Standard Time
+# and Murray suggests the following abbreviation:
+#	 1:00	WAT	West Africa Time
+# I realize that this leads to `WAT' being used for both -1:00 and 1:00
+# for times before 1976, but this is the best I can think of
+# until we get more information.
+#
+# I invented the following abbreviations; corrections are welcome!
+#	 2:00	WAST	West Africa Summer Time
+#	 2:30	BEAT	British East Africa Time (no longer used)
+#	 2:44:45 BEAUT	British East Africa Unified Time (no longer used)
+#	 3:00	CAST	Central Africa Summer Time (no longer used)
+#	 3:00	SAST	South Africa Summer Time (no longer used)
+#	 3:00	EAT	East Africa Time
+#	 4:00	EAST	East Africa Summer Time (no longer used)
+
+# Algeria
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Algeria	1916	only	-	Jun	14	23:00s	1:00	S
+Rule	Algeria	1916	1919	-	Oct	Sun<=7	23:00s	0	-
+Rule	Algeria	1917	only	-	Mar	24	23:00s	1:00	S
+Rule	Algeria	1918	only	-	Mar	 9	23:00s	1:00	S
+Rule	Algeria	1919	only	-	Mar	 1	23:00s	1:00	S
+Rule	Algeria	1920	only	-	Feb	14	23:00s	1:00	S
+Rule	Algeria	1920	only	-	Oct	23	23:00s	0	-
+Rule	Algeria	1921	only	-	Mar	14	23:00s	1:00	S
+Rule	Algeria	1921	only	-	Jun	21	23:00s	0	-
+Rule	Algeria	1939	only	-	Sep	11	23:00s	1:00	S
+Rule	Algeria	1939	only	-	Nov	19	 1:00	0	-
+Rule	Algeria	1944	1945	-	Apr	Mon<=7	 2:00	1:00	S
+Rule	Algeria	1944	only	-	Oct	 8	 2:00	0	-
+Rule	Algeria	1945	only	-	Sep	16	 1:00	0	-
+Rule	Algeria	1971	only	-	Apr	25	23:00s	1:00	S
+Rule	Algeria	1971	only	-	Sep	26	23:00s	0	-
+Rule	Algeria	1977	only	-	May	 6	 0:00	1:00	S
+Rule	Algeria	1977	only	-	Oct	21	 0:00	0	-
+Rule	Algeria	1978	only	-	Mar	24	 1:00	1:00	S
+Rule	Algeria	1978	only	-	Sep	22	 3:00	0	-
+Rule	Algeria	1980	only	-	Apr	25	 0:00	1:00	S
+Rule	Algeria	1980	only	-	Oct	31	 2:00	0	-
+# Shanks gives 0:09 for Paris Mean Time; go with Howse's more precise 0:09:21.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Algiers	0:12:12 -	LMT	1891 Mar 15 0:01
+			0:09:21	-	PMT	1911 Mar 11    # Paris Mean Time
+			0:00	Algeria	WE%sT	1940 Feb 25 2:00
+			1:00	Algeria	CE%sT	1946 Oct  7
+			0:00	-	WET	1956 Jan 29
+			1:00	-	CET	1963 Apr 14
+			0:00	Algeria	WE%sT	1977 Oct 21
+			1:00	Algeria	CE%sT	1979 Oct 26
+			0:00	Algeria	WE%sT	1981 May
+			1:00	-	CET
+
+# Angola
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Luanda	0:52:56	-	LMT	1892
+			0:52:04	-	AOT	1911 May 26 # Angola Time
+			1:00	-	WAT
+
+# Benin
+# Whitman says they switched to 1:00 in 1946, not 1934; go with Shanks.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Africa/Porto-Novo	0:10:28	-	LMT	1912
+			0:00	-	GMT	1934 Feb 26
+			1:00	-	WAT
+
+# Botswana
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Gaborone	1:43:40 -	LMT	1885
+			2:00	-	CAT	1943 Sep 19 2:00
+			2:00	1:00	CAST	1944 Mar 19 2:00
+			2:00	-	CAT
+
+# Burkina Faso
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Africa/Ouagadougou	-0:06:04 -	LMT	1912
+			 0:00	-	GMT
+
+# Burundi
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Africa/Bujumbura	1:57:28	-	LMT	1890
+			2:00	-	CAT
+
+# Cameroon
+# Whitman says they switched to 1:00 in 1920; go with Shanks.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Douala	0:38:48	-	LMT	1912
+			1:00	-	WAT
+
+# Cape Verde
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Atlantic/Cape_Verde -1:34:04 -	LMT	1907			# Praia
+			-2:00	-	CVT	1942 Sep
+			-2:00	1:00	CVST	1945 Oct 15
+			-2:00	-	CVT	1975 Nov 25 2:00
+			-1:00	-	CVT
+
+# Central African Republic
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Bangui	1:14:20	-	LMT	1912
+			1:00	-	WAT
+
+# Chad
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Ndjamena	1:00:12 -	LMT	1912
+			1:00	-	WAT	1979 Oct 14
+			1:00	1:00	WAST	1980 Mar  8
+			1:00	-	WAT
+
+# Comoros
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Indian/Comoro	2:53:04 -	LMT	1911 Jul   # Moroni, Gran Comoro
+			3:00	-	EAT
+
+# Democratic Republic of Congo
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Africa/Kinshasa	1:01:12 -	LMT	1897 Nov 9
+			1:00	-	WAT
+Zone Africa/Lubumbashi	1:49:52 -	LMT	1897 Nov 9
+			2:00	-	CAT
+
+# Republic of the Congo
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Africa/Brazzaville	1:01:08 -	LMT	1912
+			1:00	-	WAT
+
+# Cote D'Ivoire
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Abidjan	-0:16:08 -	LMT	1912
+			 0:00	-	GMT
+
+# Djibouti
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Djibouti	2:52:36 -	LMT	1911 Jul
+			3:00	-	EAT
+
+###############################################################################
+
+# Egypt
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Egypt	1940	only	-	Jul	15	0:00	1:00	S
+Rule	Egypt	1940	only	-	Oct	 1	0:00	0	-
+Rule	Egypt	1941	only	-	Apr	15	0:00	1:00	S
+Rule	Egypt	1941	only	-	Sep	16	0:00	0	-
+Rule	Egypt	1942	1944	-	Apr	 1	0:00	1:00	S
+Rule	Egypt	1942	only	-	Oct	27	0:00	0	-
+Rule	Egypt	1943	1945	-	Nov	 1	0:00	0	-
+Rule	Egypt	1945	only	-	Apr	16	0:00	1:00	S
+Rule	Egypt	1957	only	-	May	10	0:00	1:00	S
+Rule	Egypt	1957	1958	-	Oct	 1	0:00	0	-
+Rule	Egypt	1958	only	-	May	 1	0:00	1:00	S
+Rule	Egypt	1959	1981	-	May	 1	1:00	1:00	S
+Rule	Egypt	1959	1965	-	Sep	30	3:00	0	-
+Rule	Egypt	1966	1994	-	Oct	 1	3:00	0	-
+Rule	Egypt	1982	only	-	Jul	25	1:00	1:00	S
+Rule	Egypt	1983	only	-	Jul	12	1:00	1:00	S
+Rule	Egypt	1984	1988	-	May	 1	1:00	1:00	S
+Rule	Egypt	1989	only	-	May	 6	1:00	1:00	S
+Rule	Egypt	1990	1994	-	May	 1	1:00	1:00	S
+# IATA (after 1990) says transitions are at 0:00.
+# Go with IATA starting in 1995, except correct 1995 entry from 09-30 to 09-29.
+Rule	Egypt	1995	max	-	Apr	lastFri	 0:00s	1:00	S
+Rule	Egypt	1995	max	-	Sep	lastThu	23:00s	0	-
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Cairo	2:05:00 -	LMT	1900 Oct
+			2:00	Egypt	EE%sT
+
+# Equatorial Guinea
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Malabo	0:35:08 -	LMT	1912
+			0:00	-	GMT	1963 Dec 15
+			1:00	-	WAT
+
+# Eritrea
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Asmera	2:35:32 -	LMT	1870
+			2:35:32	-	AMT	1890	      # Asmera Mean Time
+			2:35:20	-	ADMT	1936 May 5    # Adis Dera MT
+			3:00	-	EAT
+
+# Ethiopia
+# From Paul Eggert (1997-10-05):
+# Shanks writes that Ethiopia had six narrowly-spaced time zones between
+# 1870 and 1890, and that they merged to 38E50 (2:35:20) in 1890.
+# We'll guess that 38E50 is for Adis Dera.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Africa/Addis_Ababa	2:34:48 -	LMT	1870
+			2:35:20	-	ADMT	1936 May 5    # Adis Dera MT
+			3:00	-	EAT
+
+# Gabon
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Africa/Libreville	0:37:48 -	LMT	1912
+			1:00	-	WAT
+
+# Gambia
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Banjul	-1:06:36 -	LMT	1912
+			-1:06:36 -	BMT	1935	# Banjul Mean Time
+			-1:00	-	WAT	1964
+			 0:00	-	GMT
+
+# Ghana
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+# Whitman says DST was observed from 1931 to ``the present''; go with Shanks.
+Rule	Ghana	1936	1942	-	Sep	 1	0:00	0:20	GHST
+Rule	Ghana	1936	1942	-	Dec	31	0:00	0	GMT
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Accra	-0:00:52 -	LMT	1918
+			 0:00	Ghana	%s
+
+# Guinea
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Conakry	-0:54:52 -	LMT	1912
+			 0:00	-	GMT	1934 Feb 26
+			-1:00	-	WAT	1960
+			 0:00	-	GMT
+
+# Guinea-Bissau
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Bissau	-1:02:20 -	LMT	1911 May 26
+			-1:00	-	WAT	1975
+			 0:00	-	GMT
+
+# Kenya
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Nairobi	2:27:16	-	LMT	1928 Jul
+			3:00	-	EAT	1930
+			2:30	-	BEAT	1940
+			2:44:45	-	BEAUT	1960
+			3:00	-	EAT
+
+# Lesotho
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Maseru	1:50:00 -	LMT	1903 Mar
+			2:00	-	SAST	1943 Sep 19 2:00
+			2:00	1:00	SAST	1944 Mar 19 2:00
+			2:00	-	SAST
+
+# Liberia
+# From Paul Eggert (2001-07-17):
+# In 1972 Liberia was the last country to switch
+# from a UTC offset that was not a multiple of 15 or 20 minutes.
+# Howse reports that it was in honor of their president's birthday.
+# Shanks reports the date as May 1, whereas Howse reports Jan; go with Shanks.
+# For Liberia before 1972, Shanks reports -0:44, whereas Howse and Whitman
+# each report -0:44:30; go with the more precise figure.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Monrovia	-0:43:08 -	LMT	1882
+			-0:43:08 -	MMT	1919 Mar # Monrovia Mean Time
+			-0:44:30 -	LRT	1972 May # Liberia Time
+			 0:00	-	GMT
+
+###############################################################################
+
+# Libya
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Libya	1951	only	-	Oct	14	2:00	1:00	S
+Rule	Libya	1952	only	-	Jan	 1	0:00	0	-
+Rule	Libya	1953	only	-	Oct	 9	2:00	1:00	S
+Rule	Libya	1954	only	-	Jan	 1	0:00	0	-
+Rule	Libya	1955	only	-	Sep	30	0:00	1:00	S
+Rule	Libya	1956	only	-	Jan	 1	0:00	0	-
+Rule	Libya	1982	1984	-	Apr	 1	0:00	1:00	S
+Rule	Libya	1982	1985	-	Oct	 1	0:00	0	-
+Rule	Libya	1985	only	-	Apr	 6	0:00	1:00	S
+Rule	Libya	1986	only	-	Apr	 4	0:00	1:00	S
+Rule	Libya	1986	only	-	Oct	 3	0:00	0	-
+Rule	Libya	1987	1989	-	Apr	 1	0:00	1:00	S
+Rule	Libya	1987	1989	-	Oct	 1	0:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Tripoli	0:52:44 -	LMT	1920
+			1:00	Libya	CE%sT	1959
+			2:00	-	EET	1982
+			1:00	Libya	CE%sT	1990 May  4
+# The following entries are all from Shanks;
+# the IATA SSIM data contain some obvious errors.
+			2:00	-	EET	1996 Sep 30
+			1:00	-	CET	1997 Apr  4
+			1:00	1:00	CEST	1997 Oct  4
+			2:00	-	EET
+
+# Madagascar
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Indian/Antananarivo 3:10:04 -	LMT	1911 Jul
+			3:00	-	EAT	1954 Feb 27 23:00s
+			3:00	1:00	EAST	1954 May 29 23:00s
+			3:00	-	EAT
+
+# Malawi
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Blantyre	2:20:00 -	LMT	1903 Mar
+			2:00	-	CAT
+
+# Mali
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Bamako	-0:32:00 -	LMT	1912
+			 0:00	-	GMT	1934 Feb 26
+			-1:00	-	WAT	1960 Jun 20
+			 0:00	-	GMT
+# no longer different from Bamako, but too famous to omit
+Zone	Africa/Timbuktu	-0:12:04 -	LMT	1912
+			 0:00	-	GMT
+
+# Mauritania
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Africa/Nouakchott	-1:03:48 -	LMT	1912
+			 0:00	-	GMT	1934 Feb 26
+			-1:00	-	WAT	1960 Nov 28
+			 0:00	-	GMT
+
+# Mauritius
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Indian/Mauritius	3:50:00 -	LMT	1907		# Port Louis
+			4:00	-	MUT	# Mauritius Time
+# Agalega Is, Rodriguez
+# no information; probably like Indian/Mauritius
+
+# Mayotte
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Indian/Mayotte	3:00:56 -	LMT	1911 Jul	# Mamoutzou
+			3:00	-	EAT
+
+# Morocco
+# See the `europe' file for Spanish Morocco (Africa/Ceuta).
+# RULE	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Morocco	1939	only	-	Sep	12	 0:00	1:00	S
+Rule	Morocco	1939	only	-	Nov	19	 0:00	0	-
+Rule	Morocco	1940	only	-	Feb	25	 0:00	1:00	S
+Rule	Morocco	1945	only	-	Nov	18	 0:00	0	-
+Rule	Morocco	1950	only	-	Jun	11	 0:00	1:00	S
+Rule	Morocco	1950	only	-	Oct	29	 0:00	0	-
+Rule	Morocco	1967	only	-	Jun	 3	12:00	1:00	S
+Rule	Morocco	1967	only	-	Oct	 1	 0:00	0	-
+Rule	Morocco	1974	only	-	Jun	24	 0:00	1:00	S
+Rule	Morocco	1974	only	-	Sep	 1	 0:00	0	-
+Rule	Morocco	1976	1977	-	May	 1	 0:00	1:00	S
+Rule	Morocco	1976	only	-	Aug	 1	 0:00	0	-
+Rule	Morocco	1977	only	-	Sep	28	 0:00	0	-
+Rule	Morocco	1978	only	-	Jun	 1	 0:00	1:00	S
+Rule	Morocco	1978	only	-	Aug	 4	 0:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Africa/Casablanca	-0:30:20 -	LMT	1913 Oct 26
+			 0:00	Morocco	WE%sT	1984 Mar 16
+			 1:00	-	CET	1986
+			 0:00	-	WET
+# Western Sahara
+Zone Africa/El_Aaiun	-0:52:48 -	LMT	1934 Jan
+			-1:00	-	WAT	1976 Apr 14
+			 0:00	-	WET
+
+# Mozambique
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Maputo	2:10:20 -	LMT	1903 Mar
+			2:00	-	CAT
+
+# Namibia
+# The 1994-04-03 transition is from Shanks.
+# Shanks reports no DST after 1998-04; go with IATA.
+# RULE	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Namibia	1994	max	-	Sep	Sun>=1	2:00	1:00	S
+Rule	Namibia	1995	max	-	Apr	Sun>=1	2:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Windhoek	1:08:24 -	LMT	1892 Feb 8
+			1:30	-	SWAT	1903 Mar	# SW Africa Time
+			2:00	-	SAST	1942 Sep 20 2:00
+			2:00	1:00	SAST	1943 Mar 21 2:00
+			2:00	-	SAST	1990 Mar 21 # independence
+			2:00	-	CAT	1994 Apr  3
+			1:00	Namibia	WA%sT
+
+# Niger
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Niamey	 0:08:28 -	LMT	1912
+			-1:00	-	WAT	1934 Feb 26
+			 0:00	-	GMT	1960
+			 1:00	-	WAT
+
+# Nigeria
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Lagos	0:13:36 -	LMT	1919 Sep
+			1:00	-	WAT
+
+# Reunion
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Indian/Reunion	3:41:52 -	LMT	1911 Jun	# Saint-Denis
+			4:00	-	RET	# Reunion Time
+#
+# Scattered Islands (Iles Eparses) administered from Reunion are as follows.
+# The following information about them is taken from
+# Iles Eparses (www.outre-mer.gouv.fr/domtom/ile.htm, 1997-07-22, in French;
+# no longer available as of 1999-08-17).
+# We have no info about their time zone histories.
+#
+# Bassas da India - uninhabited
+# Europa Island - inhabited from 1905 to 1910 by two families
+# Glorioso Is - inhabited until at least 1958
+# Juan de Nova - uninhabited
+# Tromelin - inhabited until at least 1958
+
+# Rwanda
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Kigali	2:00:16 -	LMT	1935 Jun
+			2:00	-	CAT
+
+# St Helena
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Atlantic/St_Helena	-0:22:48 -	LMT	1890		# Jamestown
+			-0:22:48 -	JMT	1951	# Jamestown Mean Time
+			 0:00	-	GMT
+# The other parts of the St Helena territory are similar:
+#	Tristan da Cunha: on GMT, say Whitman and the CIA
+#	Ascension: on GMT, says usno1995 and the CIA
+#	Gough (scientific station since 1955; sealers wintered previously):
+#		on GMT, says the CIA
+#	Inaccessible, Nightingale: no information, but probably GMT
+
+# Sao Tome and Principe
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Sao_Tome	 0:26:56 -	LMT	1884
+			-0:36:32 -	LMT	1912	# Lisbon Mean Time
+			 0:00	-	GMT
+
+# Senegal
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Dakar	-1:09:44 -	LMT	1912
+			-1:00	-	WAT	1941 Jun
+			 0:00	-	GMT
+
+# Seychelles
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Indian/Mahe	3:41:48 -	LMT	1906 Jun	# Victoria
+			4:00	-	SCT	# Seychelles Time
+# From Paul Eggert (2001-05-30):
+# Aldabra, Farquhar, and Desroches, originally dependencies of the
+# Seychelles, were transferred to the British Indian Ocean Territory
+# in 1965 and returned to Seychelles control in 1976.  We don't know
+# whether this affected their time zone, so omit this for now.
+# Possibly the islands were uninhabited.
+
+# Sierra Leone
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+# Whitman gives Mar 31 - Aug 31 for 1931 on; go with Shanks.
+Rule	SL	1935	1942	-	Jun	 1	0:00	0:40	SLST
+Rule	SL	1935	1942	-	Oct	 1	0:00	0	WAT
+Rule	SL	1957	1962	-	Jun	 1	0:00	1:00	SLST
+Rule	SL	1957	1962	-	Sep	 1	0:00	0	GMT
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Freetown	-0:53:00 -	LMT	1882
+			-0:53:00 -	FMT	1913 Jun # Freetown Mean Time
+			-1:00	SL	%s	1957
+			 0:00	SL	%s
+
+# Somalia
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Africa/Mogadishu	3:01:28 -	LMT	1893 Nov
+			3:00	-	EAT	1931
+			2:30	-	BEAT	1957
+			3:00	-	EAT
+
+# South Africa
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	SA	1942	1943	-	Sep	Sun>=15	2:00	1:00	-
+Rule	SA	1943	1944	-	Mar	Sun>=15	2:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Africa/Johannesburg 1:52:00 -	LMT	1892 Feb 8
+			1:30	-	SAST	1903 Mar
+			2:00	SA	SAST
+# Marion and Prince Edward Is
+# scientific station since 1947
+# no information
+
+# Sudan
+#
+# From <a href="http://www.sunanews.net/sn13jane.html">
+# Sudan News Agency (2000-01-13)
+# </a>, also reported by Michael De Beukelaer-Dossche via Steffen Thorsen:
+# Clocks will be moved ahead for 60 minutes all over the Sudan as of noon
+# Saturday....  This was announced Thursday by Caretaker State Minister for
+# Manpower Abdul-Rahman Nur-Eddin.
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Sudan	1970	only	-	May	 1	0:00	1:00	S
+Rule	Sudan	1970	1985	-	Oct	15	0:00	0	-
+Rule	Sudan	1971	only	-	Apr	30	0:00	1:00	S
+Rule	Sudan	1972	1985	-	Apr	lastSun	0:00	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Khartoum	2:10:08 -	LMT	1931
+			2:00	Sudan	CA%sT	2000 Jan 15 12:00
+			3:00	-	EAT
+
+# Swaziland
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Mbabane	2:04:24 -	LMT	1903 Mar
+			2:00	-	SAST
+
+# Tanzania
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Africa/Dar_es_Salaam 2:37:08 -	LMT	1931
+			3:00	-	EAT	1948
+			2:44:45	-	BEAUT	1961
+			3:00	-	EAT
+
+# Togo
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Lome	0:04:52 -	LMT	1893
+			0:00	-	GMT
+
+# Tunisia
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Tunisia	1939	only	-	Apr	15	23:00s	1:00	S
+Rule	Tunisia	1939	only	-	Nov	18	23:00s	0	-
+Rule	Tunisia	1940	only	-	Feb	25	23:00s	1:00	S
+Rule	Tunisia	1941	only	-	Oct	 6	 0:00	0	-
+Rule	Tunisia	1942	only	-	Mar	 9	 0:00	1:00	S
+Rule	Tunisia	1942	only	-	Nov	 2	 3:00	0	-
+Rule	Tunisia	1943	only	-	Mar	29	 2:00	1:00	S
+Rule	Tunisia	1943	only	-	Apr	17	 2:00	0	-
+Rule	Tunisia	1943	only	-	Apr	25	 2:00	1:00	S
+Rule	Tunisia	1943	only	-	Oct	 4	 2:00	0	-
+Rule	Tunisia	1944	1945	-	Apr	Mon>=1	 2:00	1:00	S
+Rule	Tunisia	1944	only	-	Oct	 8	 0:00	0	-
+Rule	Tunisia	1945	only	-	Sep	16	 0:00	0	-
+Rule	Tunisia	1977	only	-	Apr	30	 0:00s	1:00	S
+Rule	Tunisia	1977	only	-	Sep	24	 0:00s	0	-
+Rule	Tunisia	1978	only	-	May	 1	 0:00s	1:00	S
+Rule	Tunisia	1978	only	-	Oct	 1	 0:00s	0	-
+Rule	Tunisia	1988	only	-	Jun	 1	 0:00s	1:00	S
+Rule	Tunisia	1988	1990	-	Sep	lastSun	 0:00s	0	-
+Rule	Tunisia	1989	only	-	Mar	26	 0:00s	1:00	S
+Rule	Tunisia	1990	only	-	May	 1	 0:00s	1:00	S
+# Shanks gives 0:09 for Paris Mean Time; go with Howse's more precise 0:09:21.
+# Shanks says the 1911 switch occurred on Mar 9; go with Howse's Mar 11.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Tunis	0:40:44 -	LMT	1881 May 12
+			0:09:21	-	PMT	1911 Mar 11    # Paris Mean Time
+			1:00	Tunisia	CE%sT
+
+# Uganda
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Kampala	2:09:40 -	LMT	1928 Jul
+			3:00	-	EAT	1930
+			2:30	-	BEAT	1948
+			2:44:45	-	BEAUT	1957
+			3:00	-	EAT
+
+# Zambia
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Lusaka	1:53:08 -	LMT	1903 Mar
+			2:00	-	CAT
+
+# Zimbabwe
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Harare	2:04:12 -	LMT	1903 Mar
+			2:00	-	CAT
diff --git a/JodaTime/src/java/org/joda/time/tz/src/antarctica b/JodaTime/src/java/org/joda/time/tz/src/antarctica
index 30d0fe759..c11d24e7d 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/antarctica
+++ b/JodaTime/src/java/org/joda/time/tz/src/antarctica
@@ -1,319 +1,319 @@
-# @(#)antarctica	7.24
-
-# From Paul Eggert (1999-11-15):
-# To keep things manageable, we list only locations occupied year-round; see
-# <a href="http://www.comnap.aq/comnap/comnap.nsf/P/Stations/">
-# COMNAP - Stations and Bases
-# </a>
-# and
-# <a href="http://www.spri.cam.ac.uk/bob/periant.htm">
-# Summary of the Peri-Antarctic Islands (1998-07-23)
-# </a>
-# for information.
-# Unless otherwise specified, we have no time zone information.
-#
-# Except for the French entries,
-# I made up all time zone abbreviations mentioned here; corrections welcome!
-# FORMAT is `zzz' and GMTOFF is 0 for locations while uninhabited.
-
-# These rules are stolen from the `europe' file.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	RussAQ	1981	1984	-	Apr	 1	 0:00	1:00	S
-Rule	RussAQ	1981	1983	-	Oct	 1	 0:00	0	-
-Rule	RussAQ	1984	1991	-	Sep	lastSun	 2:00s	0	-
-Rule	RussAQ	1985	1991	-	Mar	lastSun	 2:00s	1:00	S
-Rule	RussAQ	1992	only	-	Mar	lastSat	 23:00	1:00	S
-Rule	RussAQ	1992	only	-	Sep	lastSat	 23:00	0	-
-Rule	RussAQ	1993	max	-	Mar	lastSun	 2:00s	1:00	S
-Rule	RussAQ	1993	1995	-	Sep	lastSun	 2:00s	0	-
-Rule	RussAQ	1996	max	-	Oct	lastSun	 2:00s	0	-
-
-# These rules are stolen from the `southamerica' file.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	ArgAQ	1964	1966	-	Mar	 1	0:00	0	-
-Rule	ArgAQ	1964	1966	-	Oct	15	0:00	1:00	S
-Rule	ArgAQ	1967	only	-	Apr	 1	0:00	0	-
-Rule	ArgAQ	1967	1968	-	Oct	Sun<=7	0:00	1:00	S
-Rule	ArgAQ	1968	1969	-	Apr	Sun<=7	0:00	0	-
-Rule	ArgAQ	1974	only	-	Jan	23	0:00	1:00	S
-Rule	ArgAQ	1974	only	-	May	 1	0:00	0	-
-Rule	ArgAQ	1974	1976	-	Oct	Sun<=7	0:00	1:00	S
-Rule	ArgAQ	1975	1977	-	Apr	Sun<=7	0:00	0	-
-Rule	ChileAQ	1966	1997	-	Oct	Sun>=9	0:00	1:00	S
-Rule	ChileAQ	1967	1998	-	Mar	Sun>=9	0:00	0	-
-Rule	ChileAQ	1998	only	-	Sep	27	0:00	1:00	S
-Rule	ChileAQ	1999	only	-	Apr	 4	0:00	0	-
-Rule	ChileAQ	1999	max	-	Oct	Sun>=9	0:00	1:00	S
-Rule	ChileAQ	2000	max	-	Mar	Sun>=9	0:00	0	-
-
-
-# Argentina - year-round bases
-# Belgrano II, Confin Coast, -770227-0343737, since 1972-02-05
-# Esperanza, San Martin Land, -6323-05659, since 1952-12-17
-# Jubany, Potter Peninsula, King George Island, -6414-0602320, since 1982-01
-# Marambio, Seymour I, -6414-05637, since 1969-10-29
-# Orcadas, Laurie I, -6016-04444, since 1904-02-22
-# San Martin, Debenham I, -6807-06708, since 1951-03-21
-#	(except 1960-03 / 1976-03-21)
-
-# Australia - territories
-# Heard Island, McDonald Islands (uninhabited)
-#	previously sealers and scientific personnel wintered
-#	<a href="http://www.dstc.qut.edu.au/DST/marg/daylight.html">
-#	Margaret Turner reports
-#	</a> (1999-09-30) that they're UTC+5, with no DST;
-#	presumably this is when they have visitors.
-#
-# year-round bases
-# Casey, Bailey Peninsula, -6617+11032, since 1969
-# Davis, Vestfold Hills, -6835+07759, since 1957-01-13
-#	(except 1964-11 - 1969-02)
-# Mawson, Holme Bay, -6736+06253, since 1954-02-13
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Antarctica/Casey	0	-	zzz	1969
-			8:00	-	WST	# Western (Aus) Standard Time
-Zone Antarctica/Davis	0	-	zzz	1957 Jan 13
-			7:00	-	DAVT	1964 Nov # Davis Time
-			0	-	zzz	1969 Feb
-			7:00	-	DAVT
-Zone Antarctica/Mawson	0	-	zzz	1954 Feb 13
-			6:00	-	MAWT	# Mawson Time
-# References:
-# <a href="http://www.antdiv.gov.au/aad/exop/sfo/casey/casey_aws.html">
-# Casey Weather (1998-02-26)
-# </a>
-# <a href="http://www.antdiv.gov.au/aad/exop/sfo/davis/video.html">
-# Davis Station, Antarctica (1998-02-26)
-# </a>
-# <a href="http://www.antdiv.gov.au/aad/exop/sfo/mawson/video.html">
-# Mawson Station, Antarctica (1998-02-25)
-# </a>
-
-# Brazil - year-round base
-# Comandante Ferraz, King George Island, -6205+05824, since 1983/4
-
-# Chile - year-round bases and towns
-# Escudero, South Shetland Is, -621157-0585735, since 1994
-# Presidente Eduadro Frei, King George Island, -6214-05848, since 1969-03-07
-# General Bernardo O'Higgins, Antarctic Peninsula, -6319-05704, since 1948-02
-# Capitan Arturo Prat, -6230-05941
-# Villa Las Estrellas (a town), around the Frei base, since 1984-04-09
-# These locations have always used Santiago time; use TZ='America/Santiago'.
-
-# China - year-round bases
-# Great Wall, King George Island, -6213-05858, since 1985-02-20
-# Zhongshan, Larsemann Hills, Prydz Bay, -6922+07623, since 1989-02-26
-
-# France - year-round bases
-#
-# From Antoine Leca <Antoine.Leca@Renault.FR> (1997-01-20):
-# Time data are from Nicole Pailleau at the IFRTP
-# (French Institute for Polar Research and Technology).
-# She confirms that French Southern Territories and Terre Adelie bases
-# don't observe daylight saving time, even if Terre Adelie supplies came
-# from Tasmania.
-#
-# French Southern Territories with year-round inhabitants
-#
-# Martin-de-Vivies Base, Amsterdam Island, -374105+0773155, since 1950
-# Alfred-Faure Base, Crozet Islands, -462551+0515152, since 1964
-# Port-aux-Francais, Kerguelen Islands, -492110+0701303, since 1951;
-#	whaling & sealing station operated 1908/1914, 1920/1929, and 1951/1956
-#
-# St Paul Island - near Amsterdam, uninhabited
-#	fishing stations operated variously 1819/1931
-#
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Indian/Kerguelen	0	-	zzz	1950	# Port-aux-Francais
-			5:00	-	TFT	# ISO code TF Time
-#
-# year-round base in the main continent
-# Dumont-d'Urville, Ile des Petrels, -6640+14001, since 1956-11
-#
-# Another base at Port-Martin, 50km east, began operation in 1947.
-# It was destroyed by fire on 1952-01-14.
-#
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Antarctica/DumontDUrville 0 -	zzz	1947
-			10:00	-	PMT	1952 Jan 14 # Port-Martin Time
-			0	-	zzz	1956 Nov
-			10:00	-	DDUT	# Dumont-d'Urville Time
-# Reference:
-# <a href="http://www.icair.iac.org.nz/science/reports/fr/IFRTP.html">
-# Support and Development of Polar Research and Technology (1997-02-03)
-# </a>
-
-
-# Germany - year-round base
-# Georg von Neumayer, -7039-00815
-
-# India - year-round base
-# Dakshin Gangotri, -7005+01200
-
-# Japan - year-round bases
-# Dome Fuji, -7719+03942
-# Syowa, -690022+0393524
-#
-# From Hideyuki Suzuki (1999-02-06):
-# In all Japanese stations, +0300 is used as the standard time.  [See]
-# <a href="http://www.crl.go.jp/uk/uk201/basyo.htm">[reference in Japanese]</a>
-# and information from KAMO Hiroyasu <wd@ics.nara-wu.ac.jp>.
-#
-# Syowa station, which is the first antarctic station of Japan,
-# was established on 1957-01-29.  Since Syowa station is still the main
-# station of Japan, it's appropriate for the principal location.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Antarctica/Syowa	0	-	zzz	1957 Jan 29
-			3:00	-	SYOT	# Syowa Time
-# See:
-# <a href="http://www.nipr.ac.jp/english/ara01.html">
-# NIPR Antarctic Research Activities (1999-08-17)
-# </a>
-
-# S Korea - year-round base
-# King Sejong, King George Island, -6213-05847, since 1988
-
-# New Zealand - claims
-# Balleny Islands (never inhabited)
-# Scott Island (never inhabited)
-#
-# year-round base
-# Scott, Ross Island, since 1957-01, is like Antarctica/McMurdo.
-#
-# These rules for New Zealand are stolen from the `australasia' file.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	NZAQ	1974	only	-	Nov	 3	2:00s	1:00	D
-Rule	NZAQ	1975	1988	-	Oct	lastSun	2:00s	1:00	D
-Rule	NZAQ	1989	only	-	Oct	 8	2:00s	1:00	D
-Rule	NZAQ	1990	max	-	Oct	Sun>=1	2:00s	1:00	D
-Rule	NZAQ	1975	only	-	Feb	23	2:00s	0	S
-Rule	NZAQ	1976	1989	-	Mar	Sun>=1	2:00s	0	S
-Rule	NZAQ	1990	max	-	Mar	Sun>=15	2:00s	0	S
-
-# Norway - territories
-# Bouvet (never inhabited)
-#
-# claims
-# Peter I Island (never inhabited)
-
-# Poland - year-round base
-# Arctowski, King George Island, -620945-0582745, since 1977
-
-# Russia - year-round bases
-# Bellingshausen, King George Island, -621159-0585337, since 1968-02-22
-# Mirny, Davis coast, -6633+09301, since 1956-02
-# Molodezhnaya, Alasheyev Bay, -6740+04551,
-#	year-round from 1962-02 to 1999-07-01
-# Novolazarevskaya, Queen Maud Land, -7046+01150,
-#	year-round from 1960/61 to 1992
-
-# Vostok, since 1957-12-16, temporarily closed 1994-02/1994-11
-# <a href="http://quest.arc.nasa.gov/antarctica/QA/computers/Directions,Time,ZIP">
-# From Craig Mundell (1994-12-15)</a>:
-# Vostok, which is one of the Russian stations, is set on the same
-# time as Moscow, Russia.
-#
-# From Lee Hotz (2001-03-08):
-# I queried the folks at Columbia who spent the summer at Vostok and this is
-# what they had to say about time there:
-# ``in the US Camp (East Camp) we have been on New Zealand (McMurdo)
-# time, which is 12 hours ahead of GMT. The Russian Station Vostok was
-# 6 hours behind that (although only 2 miles away, i.e. 6 hours ahead
-# of GMT). This is a time zone I think two hours east of Moscow. The
-# natural time zone is in between the two: 8 hours ahead of GMT.''
-#
-# From Paul Eggert (2001-05-04):
-# This seems to be hopelessly confusing, so I asked Lee Hotz about it
-# in person.  He said that some Antartic locations set their local
-# time so that noon is the warmest part of the day, and that this
-# changes during the year and does not necessarily correspond to mean
-# solar noon.  So the Vostok time might have been whatever the clocks
-# happened to be during their visit.  So we still don't really know what time
-# it is at Vostok.  But we'll guess UTC+6.
-#
-Zone Antarctica/Vostok	0	-	zzz	1957 Dec 16
-			6:00	-	VOST	# Vostok time
-
-# S Africa - year-round bases
-# Marion Island, -4653+03752
-# Sanae, -7141-00250
-
-# UK
-#
-# British Antarctic Territories (BAT) claims
-# South Orkney Islands
-#	scientific station from 1903
-#	whaling station at Signy I 1920/1926
-# South Shetland Islands
-#
-# year-round bases
-# Bird Island, South Georgia, -5400-03803, since 1983
-# Deception Island, -6259-06034, whaling station 1912/1931,
-#	scientific station 1943/1967,
-#	previously sealers and a scientific expedition wintered by accident,
-#	and a garrison was deployed briefly
-# Halley, Coates Land, -7535-02604, since 1956-01-06
-#	Halley is on a moving ice shelf and is periodically relocated
-#	so that it is never more than 10km from its nominal location.
-# Rothera, Adelaide Island, -6734-6808, since 1976-12-01
-#
-# From Paul Eggert (2002-10-22)
-# <http://webexhibits.org/daylightsaving/g.html> says Rothera is -03 all year.
-#
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Antarctica/Rothera	0	-	zzz	1976 Dec  1
-			-3:00	-	ROTT	# Rothera time
-
-# Uruguay - year round base
-# Artigas, King George Island, -621104-0585107
-
-# USA - year-round bases
-#
-# Palmer, Anvers Island, since 1965 (moved 2 miles in 1968)
-#
-# From Ethan Dicks <erd@mcmsun5.mcmurdo.gov> (1996-10-06):
-# It keeps the same time as Punta Arenas, Chile, because, just like us
-# and the South Pole, that's the other end of their supply line....
-# I verified with someone who was there that since 1980,
-# Palmer has followed Chile.  Prior to that, before the Falklands War,
-# Palmer used to be supplied from Argentina.
-#
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Antarctica/Palmer	0	-	zzz	1965
-			-4:00	ArgAQ	AR%sT	1969 Oct 5
-			-3:00	ArgAQ	AR%sT	1982 May
-			-4:00	ChileAQ	CL%sT
-#
-#
-# McMurdo, Ross Island, since 1955-12
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Antarctica/McMurdo	0	-	zzz	1956
-			12:00	NZAQ	NZ%sT
-#
-# Amundsen-Scott, South Pole, continuously occupied since 1956-11-20
-#
-# From Paul Eggert (1996-09-03):
-# Normally it wouldn't have a separate entry, since it's like the
-# larger Antarctica/McMurdo since 1970, but it's too famous to omit.
-#
-# From Chris Carrier <72157.3334@CompuServe.COM> (1996-06-27):
-# Siple, the first commander of the South Pole station,
-# stated that he would have liked to have kept GMT at the station,
-# but that he found it more convenient to keep GMT+12
-# as supplies for the station were coming from McMurdo Sound,
-# which was on GMT+12 because New Zealand was on GMT+12 all year
-# at that time (1957).  (Source: Siple's book 90 degrees SOUTH.)
-#
-# From Susan Smith
-# http://www.cybertours.com/whs/pole10.html
-# (1995-11-13 16:24:56 +1300, no longer available):
-# We use the same time as McMurdo does.
-# And they use the same time as Christchurch, NZ does....
-# One last quirk about South Pole time.
-# All the electric clocks are usually wrong.
-# Something about the generators running at 60.1hertz or something
-# makes all of the clocks run fast.  So every couple of days,
-# we have to go around and set them back 5 minutes or so.
-# Maybe if we let them run fast all of the time, we'd get to leave here sooner!!
-#
-Link	Antarctica/McMurdo	Antarctica/South_Pole
+# @(#)antarctica	7.25
+
+# From Paul Eggert (1999-11-15):
+# To keep things manageable, we list only locations occupied year-round; see
+# <a href="http://www.comnap.aq/comnap/comnap.nsf/P/Stations/">
+# COMNAP - Stations and Bases
+# </a>
+# and
+# <a href="http://www.spri.cam.ac.uk/bob/periant.htm">
+# Summary of the Peri-Antarctic Islands (1998-07-23)
+# </a>
+# for information.
+# Unless otherwise specified, we have no time zone information.
+#
+# Except for the French entries,
+# I made up all time zone abbreviations mentioned here; corrections welcome!
+# FORMAT is `zzz' and GMTOFF is 0 for locations while uninhabited.
+
+# These rules are stolen from the `europe' file.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	RussAQ	1981	1984	-	Apr	 1	 0:00	1:00	S
+Rule	RussAQ	1981	1983	-	Oct	 1	 0:00	0	-
+Rule	RussAQ	1984	1991	-	Sep	lastSun	 2:00s	0	-
+Rule	RussAQ	1985	1991	-	Mar	lastSun	 2:00s	1:00	S
+Rule	RussAQ	1992	only	-	Mar	lastSat	 23:00	1:00	S
+Rule	RussAQ	1992	only	-	Sep	lastSat	 23:00	0	-
+Rule	RussAQ	1993	max	-	Mar	lastSun	 2:00s	1:00	S
+Rule	RussAQ	1993	1995	-	Sep	lastSun	 2:00s	0	-
+Rule	RussAQ	1996	max	-	Oct	lastSun	 2:00s	0	-
+
+# These rules are stolen from the `southamerica' file.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	ArgAQ	1964	1966	-	Mar	 1	0:00	0	-
+Rule	ArgAQ	1964	1966	-	Oct	15	0:00	1:00	S
+Rule	ArgAQ	1967	only	-	Apr	 1	0:00	0	-
+Rule	ArgAQ	1967	1968	-	Oct	Sun<=7	0:00	1:00	S
+Rule	ArgAQ	1968	1969	-	Apr	Sun<=7	0:00	0	-
+Rule	ArgAQ	1974	only	-	Jan	23	0:00	1:00	S
+Rule	ArgAQ	1974	only	-	May	 1	0:00	0	-
+Rule	ArgAQ	1974	1976	-	Oct	Sun<=7	0:00	1:00	S
+Rule	ArgAQ	1975	1977	-	Apr	Sun<=7	0:00	0	-
+Rule	ChileAQ	1966	1997	-	Oct	Sun>=9	0:00	1:00	S
+Rule	ChileAQ	1967	1998	-	Mar	Sun>=9	0:00	0	-
+Rule	ChileAQ	1998	only	-	Sep	27	0:00	1:00	S
+Rule	ChileAQ	1999	only	-	Apr	 4	0:00	0	-
+Rule	ChileAQ	1999	max	-	Oct	Sun>=9	0:00	1:00	S
+Rule	ChileAQ	2000	max	-	Mar	Sun>=9	0:00	0	-
+
+
+# Argentina - year-round bases
+# Belgrano II, Confin Coast, -770227-0343737, since 1972-02-05
+# Esperanza, San Martin Land, -6323-05659, since 1952-12-17
+# Jubany, Potter Peninsula, King George Island, -6414-0602320, since 1982-01
+# Marambio, Seymour I, -6414-05637, since 1969-10-29
+# Orcadas, Laurie I, -6016-04444, since 1904-02-22
+# San Martin, Debenham I, -6807-06708, since 1951-03-21
+#	(except 1960-03 / 1976-03-21)
+
+# Australia - territories
+# Heard Island, McDonald Islands (uninhabited)
+#	previously sealers and scientific personnel wintered
+#	<a href="http://www.dstc.qut.edu.au/DST/marg/daylight.html">
+#	Margaret Turner reports
+#	</a> (1999-09-30) that they're UTC+5, with no DST;
+#	presumably this is when they have visitors.
+#
+# year-round bases
+# Casey, Bailey Peninsula, -6617+11032, since 1969
+# Davis, Vestfold Hills, -6835+07759, since 1957-01-13
+#	(except 1964-11 - 1969-02)
+# Mawson, Holme Bay, -6736+06253, since 1954-02-13
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Antarctica/Casey	0	-	zzz	1969
+			8:00	-	WST	# Western (Aus) Standard Time
+Zone Antarctica/Davis	0	-	zzz	1957 Jan 13
+			7:00	-	DAVT	1964 Nov # Davis Time
+			0	-	zzz	1969 Feb
+			7:00	-	DAVT
+Zone Antarctica/Mawson	0	-	zzz	1954 Feb 13
+			6:00	-	MAWT	# Mawson Time
+# References:
+# <a href="http://www.antdiv.gov.au/aad/exop/sfo/casey/casey_aws.html">
+# Casey Weather (1998-02-26)
+# </a>
+# <a href="http://www.antdiv.gov.au/aad/exop/sfo/davis/video.html">
+# Davis Station, Antarctica (1998-02-26)
+# </a>
+# <a href="http://www.antdiv.gov.au/aad/exop/sfo/mawson/video.html">
+# Mawson Station, Antarctica (1998-02-25)
+# </a>
+
+# Brazil - year-round base
+# Comandante Ferraz, King George Island, -6205+05824, since 1983/4
+
+# Chile - year-round bases and towns
+# Escudero, South Shetland Is, -621157-0585735, since 1994
+# Presidente Eduadro Frei, King George Island, -6214-05848, since 1969-03-07
+# General Bernardo O'Higgins, Antarctic Peninsula, -6319-05704, since 1948-02
+# Capitan Arturo Prat, -6230-05941
+# Villa Las Estrellas (a town), around the Frei base, since 1984-04-09
+# These locations have always used Santiago time; use TZ='America/Santiago'.
+
+# China - year-round bases
+# Great Wall, King George Island, -6213-05858, since 1985-02-20
+# Zhongshan, Larsemann Hills, Prydz Bay, -6922+07623, since 1989-02-26
+
+# France - year-round bases
+#
+# From Antoine Leca <Antoine.Leca@Renault.FR> (1997-01-20):
+# Time data are from Nicole Pailleau at the IFRTP
+# (French Institute for Polar Research and Technology).
+# She confirms that French Southern Territories and Terre Adelie bases
+# don't observe daylight saving time, even if Terre Adelie supplies came
+# from Tasmania.
+#
+# French Southern Territories with year-round inhabitants
+#
+# Martin-de-Vivies Base, Amsterdam Island, -374105+0773155, since 1950
+# Alfred-Faure Base, Crozet Islands, -462551+0515152, since 1964
+# Port-aux-Francais, Kerguelen Islands, -492110+0701303, since 1951;
+#	whaling & sealing station operated 1908/1914, 1920/1929, and 1951/1956
+#
+# St Paul Island - near Amsterdam, uninhabited
+#	fishing stations operated variously 1819/1931
+#
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Indian/Kerguelen	0	-	zzz	1950	# Port-aux-Francais
+			5:00	-	TFT	# ISO code TF Time
+#
+# year-round base in the main continent
+# Dumont-d'Urville, Ile des Petrels, -6640+14001, since 1956-11
+#
+# Another base at Port-Martin, 50km east, began operation in 1947.
+# It was destroyed by fire on 1952-01-14.
+#
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Antarctica/DumontDUrville 0 -	zzz	1947
+			10:00	-	PMT	1952 Jan 14 # Port-Martin Time
+			0	-	zzz	1956 Nov
+			10:00	-	DDUT	# Dumont-d'Urville Time
+# Reference:
+# <a href="http://www.icair.iac.org.nz/science/reports/fr/IFRTP.html">
+# Support and Development of Polar Research and Technology (1997-02-03)
+# </a>
+
+
+# Germany - year-round base
+# Georg von Neumayer, -7039-00815
+
+# India - year-round base
+# Dakshin Gangotri, -7005+01200
+
+# Japan - year-round bases
+# Dome Fuji, -7719+03942
+# Syowa, -690022+0393524
+#
+# From Hideyuki Suzuki (1999-02-06):
+# In all Japanese stations, +0300 is used as the standard time.  [See]
+# <a href="http://www.crl.go.jp/uk/uk201/basyo.htm">[reference in Japanese]</a>
+# and information from KAMO Hiroyasu.
+#
+# Syowa station, which is the first antarctic station of Japan,
+# was established on 1957-01-29.  Since Syowa station is still the main
+# station of Japan, it's appropriate for the principal location.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Antarctica/Syowa	0	-	zzz	1957 Jan 29
+			3:00	-	SYOT	# Syowa Time
+# See:
+# <a href="http://www.nipr.ac.jp/english/ara01.html">
+# NIPR Antarctic Research Activities (1999-08-17)
+# </a>
+
+# S Korea - year-round base
+# King Sejong, King George Island, -6213-05847, since 1988
+
+# New Zealand - claims
+# Balleny Islands (never inhabited)
+# Scott Island (never inhabited)
+#
+# year-round base
+# Scott, Ross Island, since 1957-01, is like Antarctica/McMurdo.
+#
+# These rules for New Zealand are stolen from the `australasia' file.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	NZAQ	1974	only	-	Nov	 3	2:00s	1:00	D
+Rule	NZAQ	1975	1988	-	Oct	lastSun	2:00s	1:00	D
+Rule	NZAQ	1989	only	-	Oct	 8	2:00s	1:00	D
+Rule	NZAQ	1990	max	-	Oct	Sun>=1	2:00s	1:00	D
+Rule	NZAQ	1975	only	-	Feb	23	2:00s	0	S
+Rule	NZAQ	1976	1989	-	Mar	Sun>=1	2:00s	0	S
+Rule	NZAQ	1990	max	-	Mar	Sun>=15	2:00s	0	S
+
+# Norway - territories
+# Bouvet (never inhabited)
+#
+# claims
+# Peter I Island (never inhabited)
+
+# Poland - year-round base
+# Arctowski, King George Island, -620945-0582745, since 1977
+
+# Russia - year-round bases
+# Bellingshausen, King George Island, -621159-0585337, since 1968-02-22
+# Mirny, Davis coast, -6633+09301, since 1956-02
+# Molodezhnaya, Alasheyev Bay, -6740+04551,
+#	year-round from 1962-02 to 1999-07-01
+# Novolazarevskaya, Queen Maud Land, -7046+01150,
+#	year-round from 1960/61 to 1992
+
+# Vostok, since 1957-12-16, temporarily closed 1994-02/1994-11
+# <a href="http://quest.arc.nasa.gov/antarctica/QA/computers/Directions,Time,ZIP">
+# From Craig Mundell (1994-12-15)</a>:
+# Vostok, which is one of the Russian stations, is set on the same
+# time as Moscow, Russia.
+#
+# From Lee Hotz (2001-03-08):
+# I queried the folks at Columbia who spent the summer at Vostok and this is
+# what they had to say about time there:
+# ``in the US Camp (East Camp) we have been on New Zealand (McMurdo)
+# time, which is 12 hours ahead of GMT. The Russian Station Vostok was
+# 6 hours behind that (although only 2 miles away, i.e. 6 hours ahead
+# of GMT). This is a time zone I think two hours east of Moscow. The
+# natural time zone is in between the two: 8 hours ahead of GMT.''
+#
+# From Paul Eggert (2001-05-04):
+# This seems to be hopelessly confusing, so I asked Lee Hotz about it
+# in person.  He said that some Antartic locations set their local
+# time so that noon is the warmest part of the day, and that this
+# changes during the year and does not necessarily correspond to mean
+# solar noon.  So the Vostok time might have been whatever the clocks
+# happened to be during their visit.  So we still don't really know what time
+# it is at Vostok.  But we'll guess UTC+6.
+#
+Zone Antarctica/Vostok	0	-	zzz	1957 Dec 16
+			6:00	-	VOST	# Vostok time
+
+# S Africa - year-round bases
+# Marion Island, -4653+03752
+# Sanae, -7141-00250
+
+# UK
+#
+# British Antarctic Territories (BAT) claims
+# South Orkney Islands
+#	scientific station from 1903
+#	whaling station at Signy I 1920/1926
+# South Shetland Islands
+#
+# year-round bases
+# Bird Island, South Georgia, -5400-03803, since 1983
+# Deception Island, -6259-06034, whaling station 1912/1931,
+#	scientific station 1943/1967,
+#	previously sealers and a scientific expedition wintered by accident,
+#	and a garrison was deployed briefly
+# Halley, Coates Land, -7535-02604, since 1956-01-06
+#	Halley is on a moving ice shelf and is periodically relocated
+#	so that it is never more than 10km from its nominal location.
+# Rothera, Adelaide Island, -6734-6808, since 1976-12-01
+#
+# From Paul Eggert (2002-10-22)
+# <http://webexhibits.org/daylightsaving/g.html> says Rothera is -03 all year.
+#
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Antarctica/Rothera	0	-	zzz	1976 Dec  1
+			-3:00	-	ROTT	# Rothera time
+
+# Uruguay - year round base
+# Artigas, King George Island, -621104-0585107
+
+# USA - year-round bases
+#
+# Palmer, Anvers Island, since 1965 (moved 2 miles in 1968)
+#
+# From Ethan Dicks (1996-10-06):
+# It keeps the same time as Punta Arenas, Chile, because, just like us
+# and the South Pole, that's the other end of their supply line....
+# I verified with someone who was there that since 1980,
+# Palmer has followed Chile.  Prior to that, before the Falklands War,
+# Palmer used to be supplied from Argentina.
+#
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Antarctica/Palmer	0	-	zzz	1965
+			-4:00	ArgAQ	AR%sT	1969 Oct 5
+			-3:00	ArgAQ	AR%sT	1982 May
+			-4:00	ChileAQ	CL%sT
+#
+#
+# McMurdo, Ross Island, since 1955-12
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Antarctica/McMurdo	0	-	zzz	1956
+			12:00	NZAQ	NZ%sT
+#
+# Amundsen-Scott, South Pole, continuously occupied since 1956-11-20
+#
+# From Paul Eggert (1996-09-03):
+# Normally it wouldn't have a separate entry, since it's like the
+# larger Antarctica/McMurdo since 1970, but it's too famous to omit.
+#
+# From Chris Carrier <72157.3334@CompuServe.COM> (1996-06-27):
+# Siple, the first commander of the South Pole station,
+# stated that he would have liked to have kept GMT at the station,
+# but that he found it more convenient to keep GMT+12
+# as supplies for the station were coming from McMurdo Sound,
+# which was on GMT+12 because New Zealand was on GMT+12 all year
+# at that time (1957).  (Source: Siple's book 90 degrees SOUTH.)
+#
+# From Susan Smith
+# http://www.cybertours.com/whs/pole10.html
+# (1995-11-13 16:24:56 +1300, no longer available):
+# We use the same time as McMurdo does.
+# And they use the same time as Christchurch, NZ does....
+# One last quirk about South Pole time.
+# All the electric clocks are usually wrong.
+# Something about the generators running at 60.1hertz or something
+# makes all of the clocks run fast.  So every couple of days,
+# we have to go around and set them back 5 minutes or so.
+# Maybe if we let them run fast all of the time, we'd get to leave here sooner!!
+#
+Link	Antarctica/McMurdo	Antarctica/South_Pole
diff --git a/JodaTime/src/java/org/joda/time/tz/src/asia b/JodaTime/src/java/org/joda/time/tz/src/asia
index 0282bd58f..1a40fb4c5 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/asia
+++ b/JodaTime/src/java/org/joda/time/tz/src/asia
@@ -1,1561 +1,1561 @@
-# @(#)asia	7.82
-
-# This data is by no means authoritative; if you think you know better,
-# go ahead and edit the file (and please send any changes to
-# tz@elsie.nci.nih.gov for general use in the future).
-
-# From Paul Eggert <eggert@twinsun.com> (1999-03-22):
-#
-# A good source for time zone historical data outside the U.S. is
-# Thomas G. Shanks, The International Atlas (5th edition),
-# San Diego: ACS Publications, Inc. (1999).
-#
-# Gwillim Law writes that a good source
-# for recent time zone data is the International Air Transport
-# Association's Standard Schedules Information Manual (IATA SSIM),
-# published semiannually.  Law sent in several helpful summaries
-# of the IATA's data after 1990.
-#
-# Except where otherwise noted, Shanks is the source for entries through 1990,
-# and IATA SSIM is the source for entries after 1990.
-#
-# Another source occasionally used is Edward W. Whitman, World Time Differences,
-# Whitman Publishing Co, 2 Niagara Av, Ealing, London (undated), which
-# I found in the UCLA library.
-#
-# A reliable and entertaining source about time zones is
-# Derek Howse, Greenwich time and longitude, Philip Wilson Publishers (1997).
-#
-# I invented the abbreviations marked `*' in the following table;
-# the rest are from earlier versions of this file, or from other sources.
-# Corrections are welcome!
-#	     std  dst
-#	     LMT	Local Mean Time
-#	2:00 EET  EEST	Eastern European Time
-#	2:00 IST  IDT	Israel
-#	3:00 AST  ADT	Arabia*
-#	3:30 IRST IRDT	Iran
-#	4:00 GST	Gulf*
-#	5:30 IST	India
-#	7:00 ICT	Indochina*
-#	7:00 WIT	west Indonesia
-#	8:00 CIT	central Indonesia
-#	8:00 CST	China
-#	9:00 CJT	Central Japanese Time (1896/1937)*
-#	9:00 EIT	east Indonesia
-#	9:00 JST	Japan
-#	9:00 KST	Korea
-#	9:30 CST	(Australian) Central Standard Time
-#
-# See the `europe' file for Russia and Turkey in Asia.
-
-# From Guy Harris:
-# Incorporates data for Singapore from Robert Elz' asia 1.1, as well as
-# additional information from Tom Yap, Sun Microsystems Intercontinental
-# Technical Support (including a page from the Official Airline Guide -
-# Worldwide Edition).  The names for time zones are guesses.
-
-###############################################################################
-
-# These rules are stolen from the `europe' file.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	EUAsia	1981	max	-	Mar	lastSun	 1:00u	1:00	S
-Rule	EUAsia	1996	max	-	Oct	lastSun	 1:00u	0	-
-Rule E-EurAsia	1981	max	-	Mar	lastSun	 0:00	1:00	S
-Rule E-EurAsia	1979	1995	-	Sep	lastSun	 0:00	0	-
-Rule E-EurAsia	1996	max	-	Oct	lastSun	 0:00	0	-
-Rule RussiaAsia	1981	1984	-	Apr	1	 0:00	1:00	S
-Rule RussiaAsia	1981	1983	-	Oct	1	 0:00	0	-
-Rule RussiaAsia	1984	1991	-	Sep	lastSun	 2:00s	0	-
-Rule RussiaAsia	1985	1991	-	Mar	lastSun	 2:00s	1:00	S
-Rule RussiaAsia	1992	only	-	Mar	lastSat	23:00	1:00	S
-Rule RussiaAsia	1992	only	-	Sep	lastSat	23:00	0	-
-Rule RussiaAsia	1993	max	-	Mar	lastSun	 2:00s	1:00	S
-Rule RussiaAsia	1993	1995	-	Sep	lastSun	 2:00s	0	-
-Rule RussiaAsia	1996	max	-	Oct	lastSun	 2:00s	0	-
-
-# Afghanistan
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Kabul	4:36:48 -	LMT	1890
-			4:00	-	AFT	1945
-			4:30	-	AFT
-
-# Armenia
-# From Paul Eggert (1999-10-29):
-# Shanks has Yerevan switching to 3:00 (with Russian DST) in spring 1991,
-# then to 4:00 with no DST in fall 1995, then readopting Russian DST in 1997.
-# Go with Shanks, even when he disagrees with others.  Edgar Der-Danieliantz
-# <edd@AIC.NET> reported (1996-05-04) that Yerevan probably wouldn't use DST
-# in 1996, though it did use DST in 1995.  IATA SSIM (1991/1998) reports that
-# Armenia switched from 3:00 to 4:00 in 1998 and observed DST after 1991,
-# but started switching at 3:00s in 1998.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Yerevan	2:58:00 -	LMT	1924 May  2
-			3:00	-	YERT	1957 Mar    # Yerevan Time
-			4:00 RussiaAsia YER%sT	1991 Mar 31 2:00s
-			3:00	1:00	YERST	1991 Sep 23 # independence
-			3:00 RussiaAsia	AM%sT	1995 Sep 24 2:00s
-			4:00	-	AMT	1997
-			4:00 RussiaAsia	AM%sT
-
-# Azerbaijan
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Azer	1997	max	-	Mar	lastSun	 1:00	1:00	S
-Rule	Azer	1997	max	-	Oct	lastSun	 1:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Baku	3:19:24 -	LMT	1924 May  2
-			3:00	-	BAKT	1957 Mar    # Baku Time
-			4:00 RussiaAsia BAK%sT	1991 Mar 31 2:00s
-			3:00	1:00	BAKST	1991 Aug 30 # independence
-			3:00 RussiaAsia	AZ%sT	1992 Sep lastSat 23:00
-			4:00	-	AZT	1996 # Azerbaijan time
-			4:00	EUAsia	AZ%sT	1997
-			4:00	Azer	AZ%sT
-
-# Bahrain
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Bahrain	3:22:20 -	LMT	1920		# Al Manamah
-			4:00	-	GST	1972 Jun
-			3:00	-	AST
-
-# Bangladesh
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Dhaka	6:01:40 -	LMT	1890
-			5:53:20	-	HMT	1941 Oct    # Howrah Mean Time?
-			6:30	-	BURT	1942 May 15 # Burma Time
-			5:30	-	IST	1942 Sep
-			6:30	-	BURT	1951 Sep 30
-			6:00	-	DACT	1971 Mar 26 # Dacca Time
-			6:00	-	BDT	# Bangladesh Time
-
-# Bhutan
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Thimphu	5:58:36 -	LMT	1947 Aug 15 # or Thimbu
-			5:30	-	IST	1987 Oct
-			6:00	-	BTT	# Bhutan Time
-
-# British Indian Ocean Territory
-# Whitman and the 1995 CIA time zone map say 5:00, but the
-# 1997 and later maps say 6:00.  Assume the switch occurred in 1996.
-# We have no information as to when standard time was introduced;
-# assume it occurred in 1907, the same year as Mauritius (which
-# then contained the Chagos Archipelago).
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Indian/Chagos	4:49:40	-	LMT	1907
-			5:00	-	IOT	1996 # BIOT Time
-			6:00	-	IOT
-
-# Brunei
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Brunei	7:39:40 -	LMT	1926 Mar   # Bandar Seri Begawan
-			7:30	-	BNT	1933
-			8:00	-	BNT
-
-# Burma / Myanmar
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Rangoon	6:24:40 -	LMT	1880		# or Yangon
-			6:24:36	-	RMT	1920	   # Rangoon Mean Time?
-			6:30	-	BURT	1942 May   # Burma Time
-			9:00	-	JST	1945 May 3
-			6:30	-	MMT		   # Myanmar Time
-
-# Cambodia
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Phnom_Penh	6:59:40 -	LMT	1906 Jun  9
-			7:06:20	-	SMT	1911 Mar 11 0:01 # Saigon MT?
-			7:00	-	ICT	1912 May
-			8:00	-	ICT	1931 May
-			7:00	-	ICT
-
-# China
-
-# From Guy Harris:
-# People's Republic of China.  Yes, they really have only one time zone.
-
-# From Bob Devine (1988-01-28):
-# No they don't.  See TIME mag, 1986-02-17 p.52.  Even though
-# China is across 4 physical time zones, before Feb 1, 1986 only the
-# Peking (Bejing) time zone was recognized.  Since that date, China
-# has two of 'em -- Peking's and Urumqi (named after the capital of
-# the Xinjiang Uyghur Autonomous Region).  I don't know about DST for it.
-#
-# . . .I just deleted the DST table and this editor makes it too
-# painful to suck in another copy..  So, here is what I have for
-# DST start/end dates for Peking's time zone (info from AP):
-#
-#     1986 May 4 - Sept 14
-#     1987 mid-April - ??
-
-# From U. S. Naval Observatory (1989-01-19):
-# CHINA               8 H  AHEAD OF UTC  ALL OF CHINA, INCL TAIWAN
-# CHINA               9 H  AHEAD OF UTC  APR 17 - SEP 10
-
-# From Paul Eggert <eggert@twinsun.com> (1995-12-19):
-# Shanks writes that China has had a single time zone since 1980 May 1,
-# observing summer DST from 1986 through 1991; this contradicts Devine's
-# note about Time magazine, though apparently _something_ happened in 1986.
-# Go with Shanks for now.  I made up names for the other pre-1980 time zones.
-
-# From Shanks:
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Shang	1940	only	-	Jun	 3	0:00	1:00	D
-Rule	Shang	1940	1941	-	Oct	 1	0:00	0	S
-Rule	Shang	1941	only	-	Mar	16	0:00	1:00	D
-Rule	PRC	1949	only	-	Jan	 1	0:00	0	S
-Rule	PRC	1986	only	-	May	 4	0:00	1:00	D
-Rule	PRC	1986	1991	-	Sep	Sun>=11	0:00	0	S
-Rule	PRC	1987	1991	-	Apr	Sun>=10	0:00	1:00	D
-#
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-#
-# From Anthony Fok (2001-12-20):
-# BTW, I did some research on-line and found some info regarding these five
-# historic timezones from some Taiwan websites.  And yes, there are official
-# Chinese names for these locales (before 1949):
-# Changbai Time ("Long-white Time", Long-white = Heilongjiang area)
-Zone	Asia/Harbin	8:26:44	-	LMT	1928 # or Haerbin
-			8:30	-	CHAT	1932 Mar # Changbai Time
-			8:00	-	CST	1940
-			9:00	-	CHAT	1966 May
-			8:30	-	CHAT	1980 May
-			8:00	PRC	C%sT
-# Zhongyuan Time ("Central plain Time")
-Zone	Asia/Shanghai	8:05:52	-	LMT	1928
-			8:00	Shang	C%sT	1949
-			8:00	PRC	C%sT
-# Long-shu Time (probably due to Long and Shu being two names of that area)
-Zone	Asia/Chongqing	7:06:20	-	LMT	1928 # or Chungking
-			7:00	-	LONT	1980 May # Long-shu Time
-			8:00	PRC	C%sT
-# Xin-zang Time ("Xinjiang-Tibet Time")
-Zone	Asia/Urumqi	5:50:20	-	LMT	1928 # or Urumchi
-			6:00	-	URUT	1980 May # Urumqi Time
-			8:00	PRC	C%sT
-# Kunlun Time
-Zone	Asia/Kashgar	5:03:56	-	LMT	1928 # or Kashi or Kaxgar
-			5:30	-	KAST	1940	 # Kashgar Time
-			5:00	-	KAST	1980 May
-			8:00	PRC	C%sT
-
-# Hong Kong (Xianggang)
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	HK	1946	only	-	Apr	20	3:30	1:00	S
-Rule	HK	1946	only	-	Dec	1	3:30	0	-
-Rule	HK	1947	only	-	Apr	13	3:30	1:00	S
-Rule	HK	1947	only	-	Dec	30	3:30	0	-
-Rule	HK	1948	only	-	May	2	3:30	1:00	S
-Rule	HK	1948	1952	-	Oct	lastSun	3:30	0	-
-Rule	HK	1949	1953	-	Apr	Sun>=1	3:30	1:00	S
-Rule	HK	1953	only	-	Nov	1	3:30	0	-
-Rule	HK	1954	1964	-	Mar	Sun>=18	3:30	1:00	S
-Rule	HK	1954	only	-	Oct	31	3:30	0	-
-Rule	HK	1955	1964	-	Nov	Sun>=1	3:30	0	-
-Rule	HK	1965	1977	-	Apr	Sun>=16	3:30	1:00	S
-Rule	HK	1965	1977	-	Oct	Sun>=16	3:30	0	-
-Rule	HK	1979	1980	-	May	Sun>=8	3:30	1:00	S
-Rule	HK	1979	1980	-	Oct	Sun>=16	3:30	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Hong_Kong	7:36:36 -	LMT	1904 Oct 30
-			8:00	HK	HK%sT
-
-
-###############################################################################
-
-# Taiwan
-
-# Shanks writes that Taiwan observed DST during 1945, when it
-# was still controlled by Japan.  This is hard to believe, but we don't
-# have any other information.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Taiwan	1945	1951	-	May	1	0:00	1:00	D
-Rule	Taiwan	1945	1951	-	Oct	1	0:00	0	S
-Rule	Taiwan	1952	only	-	Mar	1	0:00	1:00	D
-Rule	Taiwan	1952	1954	-	Nov	1	0:00	0	S
-Rule	Taiwan	1953	1959	-	Apr	1	0:00	1:00	D
-Rule	Taiwan	1955	1961	-	Oct	1	0:00	0	S
-Rule	Taiwan	1960	1961	-	Jun	1	0:00	1:00	D
-Rule	Taiwan	1974	1975	-	Apr	1	0:00	1:00	D
-Rule	Taiwan	1974	1975	-	Oct	1	0:00	0	S
-Rule	Taiwan	1980	only	-	Jun	30	0:00	1:00	D
-Rule	Taiwan	1980	only	-	Sep	30	0:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Taipei	8:06:00 -	LMT	1896 # or Taibei or T'ai-pei
-			8:00	Taiwan	C%sT
-
-# Macau (Macao, Aomen)
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Macau	1961	1962	-	Mar	Sun>=16	3:30	1:00	S
-Rule	Macau	1961	1964	-	Nov	Sun>=1	3:30	0	-
-Rule	Macau	1963	only	-	Mar	Sun>=16	0:00	1:00	S
-Rule	Macau	1964	only	-	Mar	Sun>=16	3:30	1:00	S
-Rule	Macau	1965	only	-	Mar	Sun>=16	0:00	1:00	S
-Rule	Macau	1965	only	-	Oct	31	0:00	0	-
-Rule	Macau	1966	1971	-	Apr	Sun>=16	3:30	1:00	S
-Rule	Macau	1966	1971	-	Oct	Sun>=16	3:30	0	-
-Rule	Macau	1972	1974	-	Apr	Sun>=15	0:00	1:00	S
-Rule	Macau	1972	1973	-	Oct	Sun>=15	0:00	0	-
-Rule	Macau	1974	1977	-	Oct	Sun>=15	3:30	0	-
-Rule	Macau	1975	1977	-	Apr	Sun>=15	3:30	1:00	S
-Rule	Macau	1978	1980	-	Apr	Sun>=15	0:00	1:00	S
-Rule	Macau	1978	1980	-	Oct	Sun>=15	0:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Macau	7:34:20 -	LMT	1912
-			8:00	Macau	MO%sT	1999 Dec 20 # return to China
-			8:00	PRC	C%sT
-
-
-###############################################################################
-
-# Cyprus
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Cyprus	1975	only	-	Apr	13	0:00	1:00	S
-Rule	Cyprus	1975	only	-	Oct	12	0:00	0	-
-Rule	Cyprus	1976	only	-	May	15	0:00	1:00	S
-Rule	Cyprus	1976	only	-	Oct	11	0:00	0	-
-Rule	Cyprus	1977	1980	-	Apr	Sun>=1	0:00	1:00	S
-Rule	Cyprus	1977	only	-	Sep	25	0:00	0	-
-Rule	Cyprus	1978	only	-	Oct	2	0:00	0	-
-Rule	Cyprus	1979	1997	-	Sep	lastSun	0:00	0	-
-Rule	Cyprus	1981	1998	-	Mar	lastSun	0:00	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Nicosia	2:13:28 -	LMT	1921 Nov 14
-			2:00	Cyprus	EE%sT	1998 Sep
-			2:00	EUAsia	EE%sT
-# IATA SSIM (1998-09) has Cyprus using EU rules for the first time.
-
-# Classically, Cyprus belongs to Asia; e.g. see Herodotus, Histories, I.72.
-# However, for various reasons many users expect to find it under Europe.
-Link	Asia/Nicosia	Europe/Nicosia
-
-# Georgia
-# From Paul Eggert <eggert@twinsun.com> (1994-11-19):
-# Today's _Economist_ (p 60) reports that Georgia moved its clocks forward
-# an hour recently, due to a law proposed by Zurab Murvanidze,
-# an MP who went on a hunger strike for 11 days to force discussion about it!
-# We have no details, but we'll guess they didn't move the clocks back in fall.
-#
-# From Mathew Englander <mathew@io.org>, quoting AP (1996-10-23 13:05-04):
-# Instead of putting back clocks at the end of October, Georgia
-# will stay on daylight savings time this winter to save energy,
-# President Eduard Shevardnadze decreed Wednesday.
-#
-# From the BBC via Joseph S. Myers (2004-06-27):
-#
-# Georgia moved closer to Western Europe on Sunday...  The former Soviet
-# republic has changed its time zone back to that of Moscow.  As a result it
-# is now just four hours ahead of Greenwich Mean Time, rather than five hours
-# ahead.  The switch was decreed by the pro-Western president of Georgia,
-# Mikhail Saakashvili, who said the change was partly prompted by the process
-# of integration into Europe.
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Tbilisi	2:59:16 -	LMT	1880
-			2:59:16	-	TBMT	1924 May  2 # Tbilisi Mean Time
-			3:00	-	TBIT	1957 Mar    # Tbilisi Time
-			4:00 RussiaAsia TBI%sT	1991 Mar 31 2:00s
-			3:00	1:00	TBIST	1991 Apr  9 # independence
-			3:00 RussiaAsia GE%sT	1992 # Georgia Time
-			3:00 E-EurAsia	GE%sT	1994 Sep lastSun
-			4:00 E-EurAsia	GE%sT	1996 Oct lastSun
-			4:00	1:00	GEST	1997 Mar lastSun
-			4:00 E-EurAsia	GE%sT	2004 Jun 27
-			3:00 RussiaAsia	GE%sT
-
-# East Timor
-
-# From Joao Carrascalao, brother of the former governor of East Timor, in
-# <a href="http://etan.org/et99c/december/26-31/30ETMAY.htm">
-# East Timor may be late for its millennium
-# </a> (1999-12-26/31):
-# Portugal tried to change the time forward in 1974 because the sun
-# rises too early but the suggestion raised a lot of problems with the
-# Timorese and I still don't think it would work today because it
-# conflicts with their way of life.
-
-# From Paul Eggert (2000-12-04):
-# We don't have any record of the above attempt.
-# Most likely our records are incomplete, but we have no better data.
-
-# <a href="http://www.hri.org/news/world/undh/last/00-08-16.undh.html">
-# From Manoel de Almeida e Silva, Deputy Spokesman for the UN Secretary-General
-# (2000-08-16)</a>:
-# The Cabinet of the East Timor Transition Administration decided
-# today to advance East Timor's time by one hour.  The time change,
-# which will be permanent, with no seasonal adjustment, will happen at
-# midnight on Saturday, September 16.
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Dili	8:22:20 -	LMT	1912
-			8:00	-	TPT	1942 Feb 21 23:00 # E Timor Time
-			9:00	-	JST	1945 Aug
-			9:00	-	TPT	1976 May  3
-			8:00	-	CIT	2000 Sep 17 00:00
-			9:00	-	TPT
-
-# India
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Calcutta	5:53:28 -	LMT	1880	# Kolkata
-			5:53:20	-	HMT	1941 Oct    # Howrah Mean Time?
-			6:30	-	BURT	1942 May 15 # Burma Time
-			5:30	-	IST	1942 Sep
-			5:30	1:00	IST	1945 Oct 15
-			5:30	-	IST
-# The following are like Asia/Calcutta:
-#	Andaman Is
-#	Lakshadweep (Laccadive, Minicoy and Amindivi Is)
-#	Nicobar Is
-
-# Indonesia
-#
-# From Gwillim Law (2001-05-28), overriding Shanks:
-# <http://www.sumatera-inc.com/go_to_invest/about_indonesia.asp#standtime>
-# says that Indonesia's time zones changed on 1988-01-01.  Looking at some
-# time zone maps, I think that must refer to Western Borneo (Kalimantan Barat
-# and Kalimantan Tengah) switching from UTC+8 to UTC+7.
-#
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Asia/Jakarta	7:07:12 -	LMT	1867 Aug 10
-# Shanks says the next transition was at 1924 Jan 1 0:13,
-# but this must be a typo.
-			7:07:12	-	JMT	1923 Dec 31 23:47:12 # Jakarta
-			7:20	-	JAVT	1932 Nov	 # Java Time
-			7:30	-	WIT	1942 Mar 23
-			9:00	-	JST	1945 Aug
-			7:30	-	WIT	1948 May
-			8:00	-	WIT	1950 May
-			7:30	-	WIT	1964
-			7:00	-	WIT
-Zone Asia/Pontianak	7:17:20	-	LMT	1908 May
-			7:17:20	-	PMT	1932 Nov    # Pontianak MT
-			7:30	-	WIT	1942 Jan 29
-			9:00	-	JST	1945 Aug
-			7:30	-	WIT	1948 May
-			8:00	-	WIT	1950 May
-			7:30	-	WIT	1964
-			8:00	-	CIT	1988 Jan  1
-			7:00	-	WIT
-Zone Asia/Makassar	7:57:36 -	LMT	1920
-			7:57:36	-	MMT	1932 Nov    # Macassar MT
-			8:00	-	CIT	1942 Feb  9
-			9:00	-	JST	1945 Aug
-			8:00	-	CIT
-Zone Asia/Jayapura	9:22:48 -	LMT	1932 Nov
-			9:00	-	EIT	1944
-			9:30	-	CST	1964
-			9:00	-	EIT
-
-# Iran
-
-# From Roozbeh Pournader (2003-03-15):
-# This is an English translation of what I just found (originally in Persian).
-# The Gregorian dates in brackets are mine:
-#
-#	Official Newspaper No. 13548-1370/6/25 [1991-09-16]
-#	No. 16760/T233 H				1370/6/10 [1991-09-01]
-#
-#	The Rule About Change of the Official Time of the Country
-#
-#	The Board of Ministers, in the meeting dated 1370/5/23 [1991-08-14],
-#	based on the suggestion number 2221/D dated 1370/4/22 [1991-07-13]
-#	of the Country's Organization for Official and Employment Affairs,
-#	and referring to the law for equating the working hours of workers
-#	and officers in the whole country dated 1359/4/23 [1980-07-14], and
-#	for synchronizing the official times of the country, agreed that:
-#
-#	The official time of the country will should move forward one hour
-#	at the 24[:00] hours of the first day of Farvardin and should return
-#	to its previous state at the 24[:00] hours of the 30th day of
-#	Shahrivar.
-#
-#	First Deputy to the President - Hassan Habibi
-#
-# From personal experience, that agrees with what has been followed
-# for at least the last 5 years.  Before that, for a few years, the
-# date used was the first Thursday night of Farvardin and the last
-# Thursday night of Shahrivar, but I can't give exact dates....
-# I have also changed the abbreviations to what is considered correct
-# here in Iran, IRST for regular time and IRDT for daylight saving time.
-#
-# From Roozbeh Pournader (2005-04-05):
-# The text of the Iranian law, in effect since 1925, clearly mentions
-# that the true solar year is the measure, and there is no arithmetic
-# leap year calculation involved.  There has never been any serious
-# plan to change that law....
-#
-# From Paul Eggert (2005-04-05):
-# Go with Shanks before September 1991, and with Pournader thereafter.
-# I used Ed Reingold's cal-persia in GNU Emacs 21.2 to check Persian dates,
-# stopping after 2037 when 32-bit time_t's overflow.
-# That cal-persia used Birashk's approximation, which disagrees with the solar
-# calendar predictions for the year 2025, so I corrected those dates by hand.
-#
-# From Oscar van Vlijmen (2005-03-30), writing about future
-# discrepancies between cal-persia and the Iranian calendar:
-# For 2091 solar-longitude-after yields 2091-03-20 08:40:07.7 UT for
-# the vernal equinox and that gets so close to 12:00 some local
-# Iranian time that the definition of the correct location needs to be
-# known exactly, amongst other factors.  2157 is even closer:
-# 2157-03-20 08:37:15.5 UT.  But the Gregorian year 2025 should give
-# no interpretation problem whatsoever.  By the way, another instant
-# in the near future where there will be a discrepancy between
-# arithmetical and astronomical Iranian calendars will be in 2058:
-# vernal equinox on 2058-03-20 09:03:05.9 UT.  The Java version of
-# Reingold's/Dershowitz' calculator gives correctly the Gregorian date
-# 2058-03-21 for 1 Farvardin 1437 (astronomical).
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Iran	1978	1980	-	Mar	21	0:00	1:00	D
-Rule	Iran	1978	only	-	Oct	21	0:00	0	S
-Rule	Iran	1979	only	-	Sep	19	0:00	0	S
-Rule	Iran	1980	only	-	Sep	23	0:00	0	S
-Rule	Iran	1991	only	-	May	 3	0:00	1:00	D
-Rule	Iran	1992	1995	-	Mar	22	0:00	1:00	D
-Rule	Iran	1991	1995	-	Sep	22	0:00	0	S
-Rule	Iran	1996	only	-	Mar	21	0:00	1:00	D
-Rule	Iran	1996	only	-	Sep	21	0:00	0	S
-Rule	Iran	1997	1999	-	Mar	22	0:00	1:00	D
-Rule	Iran	1997	1999	-	Sep	22	0:00	0	S
-Rule	Iran	2000	only	-	Mar	21	0:00	1:00	D
-Rule	Iran	2000	only	-	Sep	21	0:00	0	S
-Rule	Iran	2001	2003	-	Mar	22	0:00	1:00	D
-Rule	Iran	2001	2003	-	Sep	22	0:00	0	S
-Rule	Iran	2004	only	-	Mar	21	0:00	1:00	D
-Rule	Iran	2004	only	-	Sep	21	0:00	0	S
-Rule	Iran	2005	2007	-	Mar	22	0:00	1:00	D
-Rule	Iran	2005	2007	-	Sep	22	0:00	0	S
-Rule	Iran	2008	only	-	Mar	21	0:00	1:00	D
-Rule	Iran	2008	only	-	Sep	21	0:00	0	S
-Rule	Iran	2009	2011	-	Mar	22	0:00	1:00	D
-Rule	Iran	2009	2011	-	Sep	22	0:00	0	S
-Rule	Iran	2012	only	-	Mar	21	0:00	1:00	D
-Rule	Iran	2012	only	-	Sep	21	0:00	0	S
-Rule	Iran	2013	2015	-	Mar	22	0:00	1:00	D
-Rule	Iran	2013	2015	-	Sep	22	0:00	0	S
-Rule	Iran	2016	only	-	Mar	21	0:00	1:00	D
-Rule	Iran	2016	only	-	Sep	21	0:00	0	S
-Rule	Iran	2017	2019	-	Mar	22	0:00	1:00	D
-Rule	Iran	2017	2019	-	Sep	22	0:00	0	S
-Rule	Iran	2020	only	-	Mar	21	0:00	1:00	D
-Rule	Iran	2020	only	-	Sep	21	0:00	0	S
-Rule	Iran	2021	2023	-	Mar	22	0:00	1:00	D
-Rule	Iran	2021	2023	-	Sep	22	0:00	0	S
-Rule	Iran	2024	only	-	Mar	21	0:00	1:00	D
-Rule	Iran	2024	only	-	Sep	21	0:00	0	S
-Rule	Iran	2025	2027	-	Mar	22	0:00	1:00	D
-Rule	Iran	2025	2027	-	Sep	22	0:00	0	S
-Rule	Iran	2028	2029	-	Mar	21	0:00	1:00	D
-Rule	Iran	2028	2029	-	Sep	21	0:00	0	S
-Rule	Iran	2030	2031	-	Mar	22	0:00	1:00	D
-Rule	Iran	2030	2031	-	Sep	22	0:00	0	S
-Rule	Iran	2032	2033	-	Mar	21	0:00	1:00	D
-Rule	Iran	2032	2033	-	Sep	21	0:00	0	S
-Rule	Iran	2034	2035	-	Mar	22	0:00	1:00	D
-Rule	Iran	2034	2035	-	Sep	22	0:00	0	S
-Rule	Iran	2036	2037	-	Mar	21	0:00	1:00	D
-Rule	Iran	2036	2037	-	Sep	21	0:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Tehran	3:25:44	-	LMT	1916
-			3:25:44	-	TMT	1946	# Tehran Mean Time
-			3:30	-	IRST	1977 Nov
-			4:00	Iran	IR%sT	1979
-			3:30	Iran	IR%sT
-
-
-# Iraq
-#
-# From Jonathan Lennox <lennox@cs.columbia.edu> (2000-06-12):
-# An article in this week's Economist ("Inside the Saddam-free zone", p. 50 in
-# the U.S. edition) on the Iraqi Kurds contains a paragraph:
-# "The three northern provinces ... switched their clocks this spring and
-# are an hour ahead of Baghdad."
-#
-# But Rives McDow (2000-06-18) quotes a contact in Iraqi-Kurdistan as follows:
-# In the past, some Kurdish nationalists, as a protest to the Iraqi
-# Government, did not adhere to daylight saving time.  They referred
-# to daylight saving as Saddam time.  But, as of today, the time zone
-# in Iraqi-Kurdistan is on standard time with Baghdad, Iraq.
-#
-# So we'll ignore the Economist's claim.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Iraq	1982	only	-	May	1	0:00	1:00	D
-Rule	Iraq	1982	1984	-	Oct	1	0:00	0	S
-Rule	Iraq	1983	only	-	Mar	31	0:00	1:00	D
-Rule	Iraq	1984	1985	-	Apr	1	0:00	1:00	D
-Rule	Iraq	1985	1990	-	Sep	lastSun	1:00s	0	S
-Rule	Iraq	1986	1990	-	Mar	lastSun	1:00s	1:00	D
-# IATA SSIM (1991/1996) says Apr 1 12:01am UTC; guess the `:01' is a typo.
-# Shanks says Iraq did not observe DST 1992/1997 or 1999 on; ignore this.
-Rule	Iraq	1991	max	-	Apr	 1	3:00s	1:00	D
-Rule	Iraq	1991	max	-	Oct	 1	3:00s	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Baghdad	2:57:40	-	LMT	1890
-			2:57:36	-	BMT	1918	    # Baghdad Mean Time?
-			3:00	-	AST	1982 May
-			3:00	Iraq	A%sT
-
-
-###############################################################################
-
-# Israel
-
-# From Ephraim Silverberg (2001-01-11):
-#
-# I coined "IST/IDT" circa 1988.  Until then there were three
-# different abbreviations in use:
-#
-# JST  Jerusalem Standard Time [Danny Braniss, Hebrew University]
-# IZT  Israel Zonal (sic) Time [Prof. Haim Papo, Technion]
-# EEST Eastern Europe Standard Time [used by almost everyone else]
-#
-# Since timezones should be called by country and not capital cities,
-# I ruled out JST.  As Israel is in Asia Minor and not Eastern Europe,
-# EEST was equally unacceptable.  Since "zonal" was not compatible with
-# any other timezone abbreviation, I felt that 'IST' was the way to go
-# and, indeed, it has received almost universal acceptance in timezone
-# settings in Israeli computers.
-#
-# In any case, I am happy to share timezone abbreviations with India,
-# high on my favorite-country list (and not only because my wife's
-# family is from India).
-
-# From Shanks:
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Zion	1940	only	-	Jun	 1	0:00	1:00	D
-Rule	Zion	1942	1944	-	Nov	 1	0:00	0	S
-Rule	Zion	1943	only	-	Apr	 1	2:00	1:00	D
-Rule	Zion	1944	only	-	Apr	 1	0:00	1:00	D
-Rule	Zion	1945	only	-	Apr	16	0:00	1:00	D
-Rule	Zion	1945	only	-	Nov	 1	2:00	0	S
-Rule	Zion	1946	only	-	Apr	16	2:00	1:00	D
-Rule	Zion	1946	only	-	Nov	 1	0:00	0	S
-Rule	Zion	1948	only	-	May	23	0:00	2:00	DD
-Rule	Zion	1948	only	-	Sep	 1	0:00	1:00	D
-Rule	Zion	1948	1949	-	Nov	 1	2:00	0	S
-Rule	Zion	1949	only	-	May	 1	0:00	1:00	D
-Rule	Zion	1950	only	-	Apr	16	0:00	1:00	D
-Rule	Zion	1950	only	-	Sep	15	3:00	0	S
-Rule	Zion	1951	only	-	Apr	 1	0:00	1:00	D
-Rule	Zion	1951	only	-	Nov	11	3:00	0	S
-Rule	Zion	1952	only	-	Apr	20	2:00	1:00	D
-Rule	Zion	1952	only	-	Oct	19	3:00	0	S
-Rule	Zion	1953	only	-	Apr	12	2:00	1:00	D
-Rule	Zion	1953	only	-	Sep	13	3:00	0	S
-Rule	Zion	1954	only	-	Jun	13	0:00	1:00	D
-Rule	Zion	1954	only	-	Sep	12	0:00	0	S
-Rule	Zion	1955	only	-	Jun	11	2:00	1:00	D
-Rule	Zion	1955	only	-	Sep	11	0:00	0	S
-Rule	Zion	1956	only	-	Jun	 3	0:00	1:00	D
-Rule	Zion	1956	only	-	Sep	30	3:00	0	S
-Rule	Zion	1957	only	-	Apr	29	2:00	1:00	D
-Rule	Zion	1957	only	-	Sep	22	0:00	0	S
-Rule	Zion	1974	only	-	Jul	 7	0:00	1:00	D
-Rule	Zion	1974	only	-	Oct	13	0:00	0	S
-Rule	Zion	1975	only	-	Apr	20	0:00	1:00	D
-Rule	Zion	1975	only	-	Aug	31	0:00	0	S
-Rule	Zion	1985	only	-	Apr	14	0:00	1:00	D
-Rule	Zion	1985	only	-	Sep	15	0:00	0	S
-Rule	Zion	1986	only	-	May	18	0:00	1:00	D
-Rule	Zion	1986	only	-	Sep	 7	0:00	0	S
-Rule	Zion	1987	only	-	Apr	15	0:00	1:00	D
-Rule	Zion	1987	only	-	Sep	13	0:00	0	S
-Rule	Zion	1988	only	-	Apr	 9	0:00	1:00	D
-Rule	Zion	1988	only	-	Sep	 3	0:00	0	S
-
-# From Ephraim Silverberg <ephraim@cs.huji.ac.il>
-# (1997-03-04, 1998-03-16, 1998-12-28, 2000-01-17, 2000-07-25, 2004-12-22,
-# and 2005-02-17):
-
-# According to the Office of the Secretary General of the Ministry of
-# Interior, there is NO set rule for Daylight-Savings/Standard time changes.
-# One thing is entrenched in law, however: that there must be at least 150
-# days of daylight savings time annually.  From 1993-1998, the change to
-# daylight savings time was on a Friday morning from midnight IST to
-# 1 a.m IDT; up until 1998, the change back to standard time was on a
-# Saturday night from midnight daylight savings time to 11 p.m. standard
-# time.  1996 is an exception to this rule where the change back to standard
-# time took place on Sunday night instead of Saturday night to avoid
-# conflicts with the Jewish New Year.  In 1999, the change to
-# daylight savings time was still on a Friday morning but from
-# 2 a.m. IST to 3 a.m. IDT; furthermore, the change back to standard time
-# was also on a Friday morning from 2 a.m. IDT to 1 a.m. IST for
-# 1999 only.  In the year 2000, the change to daylight savings time was
-# similar to 1999, but although the change back will be on a Friday, it
-# will take place from 1 a.m. IDT to midnight IST.  Starting in 2001, all
-# changes to/from will take place at 1 a.m. old time, but now there is no
-# rule as to what day of the week it will take place in as the start date
-# (except in 2003) is the night after the Passover Seder (i.e. the eve
-# of the 16th of Nisan in the lunar Hebrew calendar) and the end date
-# (except in 2002) is three nights before Yom Kippur [Day of Atonement]
-# (the eve of the 7th of Tishrei in the lunar Hebrew calendar).
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Zion	1989	only	-	Apr	30	0:00	1:00	D
-Rule	Zion	1989	only	-	Sep	 3	0:00	0	S
-Rule	Zion	1990	only	-	Mar	25	0:00	1:00	D
-Rule	Zion	1990	only	-	Aug	26	0:00	0	S
-Rule	Zion	1991	only	-	Mar	24	0:00	1:00	D
-Rule	Zion	1991	only	-	Sep	 1	0:00	0	S
-Rule	Zion	1992	only	-	Mar	29	0:00	1:00	D
-Rule	Zion	1992	only	-	Sep	 6	0:00	0	S
-Rule	Zion	1993	only	-	Apr	 2	0:00	1:00	D
-Rule	Zion	1993	only	-	Sep	 5	0:00	0	S
-
-# The dates for 1994-1995 were obtained from Office of the Spokeswoman for the
-# Ministry of Interior, Jerusalem, Israel.  The spokeswoman can be reached by
-# calling the office directly at 972-2-6701447 or 972-2-6701448.
-
-# Rule	NAME    FROM    TO      TYPE    IN      ON      AT      SAVE    LETTER/S
-Rule	Zion	1994	only	-	Apr	 1	0:00	1:00	D
-Rule	Zion	1994	only	-	Aug	28	0:00	0	S
-Rule	Zion	1995	only	-	Mar	31	0:00	1:00	D
-Rule	Zion	1995	only	-	Sep	 3	0:00	0	S
-
-# The dates for 1996 were determined by the Minister of Interior of the
-# time, Haim Ramon.  The official announcement regarding 1996-1998
-# (with the dates for 1997-1998 no longer being relevant) can be viewed at:
-#
-#   ftp://ftp.cs.huji.ac.il/pub/tz/announcements/1996-1998.ramon.ps.gz
-#
-# The dates for 1997-1998 were altered by his successor, Rabbi Eli Suissa.
-#
-# The official announcements for the years 1997-1999 can be viewed at:
-#
-#   ftp://ftp.cs.huji.ac.il/pub/tz/announcements/YYYY.ps.gz
-#
-#       where YYYY is the relevant year.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Zion	1996	only	-	Mar	15	0:00	1:00	D
-Rule	Zion	1996	only	-	Sep	16	0:00	0	S
-Rule	Zion	1997	only	-	Mar	21	0:00	1:00	D
-Rule	Zion	1997	only	-	Sep	14	0:00	0	S
-Rule	Zion	1998	only	-	Mar	20	0:00	1:00	D
-Rule	Zion	1998	only	-	Sep	 6	0:00	0	S
-Rule	Zion	1999	only	-	Apr	 2	2:00	1:00	D
-Rule	Zion	1999	only	-	Sep	 3	2:00	0	S
-
-# The Knesset Interior Committee has changed the dates for 2000 for
-# the third time in just over a year and have set new dates for the
-# years 2001-2004 as well.
-#
-# The official announcement for the start date of 2000 can be viewed at:
-#
-#	ftp://ftp.cs.huji.ac.il/pub/tz/announcements/2000-start.ps.gz
-#
-# The official announcement for the end date of 2000 and the dates
-# for the years 2001-2004 can be viewed at:
-#
-#	ftp://ftp.cs.huji.ac.il/pub/tz/announcements/2000-2004.ps.gz
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Zion	2000	only	-	Apr	14	2:00	1:00	D
-Rule	Zion	2000	only	-	Oct	 6	1:00	0	S
-Rule	Zion	2001	only	-	Apr	 9	1:00	1:00	D
-Rule	Zion	2001	only	-	Sep	24	1:00	0	S
-Rule	Zion	2002	only	-	Mar	29	1:00	1:00	D
-Rule	Zion	2002	only	-	Oct	 7	1:00	0	S
-Rule	Zion	2003	only	-	Mar	28	1:00	1:00	D
-Rule	Zion	2003	only	-	Oct	 3	1:00	0	S
-Rule	Zion	2004	only	-	Apr	 7	1:00	1:00	D
-Rule	Zion	2004	only	-	Sep	22	1:00	0	S
-
-# The proposed law agreed upon by the Knesset Interior Committee on
-# 2005-02-14 is that, for 2005 and beyond, DST starts at 02:00 the
-# last Friday before April 2nd (i.e. the last Friday in March or April
-# 1st itself if it falls on a Friday) and ends at 02:00 on the Saturday
-# night _before_ the fast of Yom Kippur.
-#
-# Those who can read Hebrew can view the announcement at:
-#
-#	ftp://ftp.cs.huji.ac.il/pub/tz/announcements/2005+beyond.ps
-
-# From Paul Eggert (2005-02-22):
-# I used Ephraim Silverberg's dst-israel.el program
-# <ftp://ftp.cs.huji.ac.il/pub/tz/software/dst-israel.el> (2005-02-20)
-# along with Ed Reingold's cal-hebrew in GNU Emacs 21.4,
-# to generate the transitions in this list.
-# (I replaced "lastFri" with "Fri>=26" by hand.)
-# The spring transitions below all correspond to the following Rule:
-#
-# Rule	Zion	2005	max	-	Mar	Fri>=26	2:00	1:00	D
-#
-# but older zic implementations (e.g., Solaris 8) do not support
-# "Fri>=26" to mean April 1 in years like 2005, so for now we list the
-# springtime transitions explicitly.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Zion	2005	only	-	Apr	 1	2:00	1:00	D
-Rule	Zion	2005	only	-	Oct	 9	2:00	0	S
-Rule	Zion	2006	2010	-	Mar	Fri>=26	2:00	1:00	D
-Rule	Zion	2006	only	-	Oct	 1	2:00	0	S
-Rule	Zion	2007	only	-	Sep	16	2:00	0	S
-Rule	Zion	2008	only	-	Oct	 5	2:00	0	S
-Rule	Zion	2009	only	-	Sep	27	2:00	0	S
-Rule	Zion	2010	only	-	Sep	12	2:00	0	S
-Rule	Zion	2011	only	-	Apr	 1	2:00	1:00	D
-Rule	Zion	2011	only	-	Oct	 2	2:00	0	S
-Rule	Zion	2012	2015	-	Mar	Fri>=26	2:00	1:00	D
-Rule	Zion	2012	only	-	Sep	23	2:00	0	S
-Rule	Zion	2013	only	-	Sep	 8	2:00	0	S
-Rule	Zion	2014	only	-	Sep	28	2:00	0	S
-Rule	Zion	2015	only	-	Sep	20	2:00	0	S
-Rule	Zion	2016	only	-	Apr	 1	2:00	1:00	D
-Rule	Zion	2016	only	-	Oct	 9	2:00	0	S
-Rule	Zion	2017	2021	-	Mar	Fri>=26	2:00	1:00	D
-Rule	Zion	2017	only	-	Sep	24	2:00	0	S
-Rule	Zion	2018	only	-	Sep	16	2:00	0	S
-Rule	Zion	2019	only	-	Oct	 6	2:00	0	S
-Rule	Zion	2020	only	-	Sep	27	2:00	0	S
-Rule	Zion	2021	only	-	Sep	12	2:00	0	S
-Rule	Zion	2022	only	-	Apr	 1	2:00	1:00	D
-Rule	Zion	2022	only	-	Oct	 2	2:00	0	S
-Rule	Zion	2023	2032	-	Mar	Fri>=26	2:00	1:00	D
-Rule	Zion	2023	only	-	Sep	24	2:00	0	S
-Rule	Zion	2024	only	-	Oct	 6	2:00	0	S
-Rule	Zion	2025	only	-	Sep	28	2:00	0	S
-Rule	Zion	2026	only	-	Sep	20	2:00	0	S
-Rule	Zion	2027	only	-	Oct	10	2:00	0	S
-Rule	Zion	2028	only	-	Sep	24	2:00	0	S
-Rule	Zion	2029	only	-	Sep	16	2:00	0	S
-Rule	Zion	2030	only	-	Oct	 6	2:00	0	S
-Rule	Zion	2031	only	-	Sep	21	2:00	0	S
-Rule	Zion	2032	only	-	Sep	12	2:00	0	S
-Rule	Zion	2033	only	-	Apr	 1	2:00	1:00	D
-Rule	Zion	2033	only	-	Oct	 2	2:00	0	S
-Rule	Zion	2034	2037	-	Mar	Fri>=26	2:00	1:00	D
-Rule	Zion	2034	only	-	Sep	17	2:00	0	S
-Rule	Zion	2035	only	-	Oct	 7	2:00	0	S
-Rule	Zion	2036	only	-	Sep	28	2:00	0	S
-Rule	Zion	2037	only	-	Sep	13	2:00	0	S
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Jerusalem	2:20:56 -	LMT	1880
-			2:20:40	-	JMT	1918	# Jerusalem Mean Time?
-			2:00	Zion	I%sT
-
-
-
-###############################################################################
-
-# Japan
-
-# `9:00' and `JST' is from Guy Harris.
-
-# From Paul Eggert <eggert@twinsun.com> (1995-03-06):
-# Today's _Asahi Evening News_ (page 4) reports that Japan had
-# daylight saving between 1948 and 1951, but ``the system was discontinued
-# because the public believed it would lead to longer working hours.''
-# Shanks writes that daylight saving in Japan during those years was as follows:
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-#Rule	Japan	1948	only	-	May	Sun>=1	2:00	1:00	D
-#Rule	Japan	1948	1951	-	Sep	Sat>=8	2:00	0	S
-#Rule	Japan	1949	only	-	Apr	Sun>=1	2:00	1:00	D
-#Rule	Japan	1950	1951	-	May	Sun>=1	2:00	1:00	D
-# but the only locations using it were US military bases.
-# We go with Shanks and omit daylight saving in those years for Asia/Tokyo.
-
-# From Hideyuki Suzuki (1998-11-09):
-# 'Tokyo' usually stands for the former location of Tokyo Astronomical
-# Observatory: E 139 44' 40".90 (9h 18m 58s.727), N 35 39' 16".0.
-# This data is from 'Rika Nenpyou (Chronological Scientific Tables) 1996'
-# edited by National Astronomical Observatory of Japan....
-# JST (Japan Standard Time) has been used since 1888-01-01 00:00 (JST).
-# The law is enacted on 1886-07-07.
-
-# From Hideyuki Suzuki (1998-11-16):
-# The ordinance No. 51 (1886) established "standard time" in Japan,
-# which stands for the time on E 135 degree.
-# In the ordinance No. 167 (1895), "standard time" was renamed to "central
-# standard time".  And the same ordinance also established "western standard
-# time", which stands for the time on E 120 degree....  But "western standard
-# time" was abolished in the ordinance No. 529 (1937).  In the ordinance No.
-# 167, there is no mention regarding for what place western standard time is
-# standard....
-#
-# I wrote "ordinance" above, but I don't know how to translate.
-# In Japanese it's "chokurei", which means ordinance from emperor.
-
-# Shanks claims JST in use since 1896, and that a few places (e.g. Ishigaki)
-# use +0800; go with Suzuki.  Guess that all ordinances took effect on Jan 1.
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Tokyo	9:18:59	-	LMT	1887 Dec 31 15:00u
-			9:00	-	JST	1896
-			9:00	-	CJT	1938
-			9:00	-	JST
-# Since 1938, all Japanese possessions have been like Asia/Tokyo.
-
-# Jordan
-#
-# From <a href="http://star.arabia.com/990701/JO9.html">
-# Jordan Week (1999-07-01) </a> via Steffen Thorsen (1999-09-09):
-# Clocks in Jordan were forwarded one hour on Wednesday at midnight,
-# in accordance with the government's decision to implement summer time
-# all year round.
-#
-# From <a href="http://star.arabia.com/990930/JO9.html">
-# Jordan Week (1999-09-30) </a> via Steffen Thorsen (1999-11-09):
-# Winter time starts today Thursday, 30 September. Clocks will be turned back
-# by one hour.  This is the latest government decision and it's final!
-# The decision was taken because of the increase in working hours in
-# government's departments from six to seven hours.
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Jordan	1973	only	-	Jun	6	0:00	1:00	S
-Rule	Jordan	1973	1975	-	Oct	1	0:00	0	-
-Rule	Jordan	1974	1977	-	May	1	0:00	1:00	S
-Rule	Jordan	1976	only	-	Nov	1	0:00	0	-
-Rule	Jordan	1977	only	-	Oct	1	0:00	0	-
-Rule	Jordan	1978	only	-	Apr	30	0:00	1:00	S
-Rule	Jordan	1978	only	-	Sep	30	0:00	0	-
-Rule	Jordan	1985	only	-	Apr	1	0:00	1:00	S
-Rule	Jordan	1985	only	-	Oct	1	0:00	0	-
-Rule	Jordan	1986	1988	-	Apr	Fri>=1	0:00	1:00	S
-Rule	Jordan	1986	1990	-	Oct	Fri>=1	0:00	0	-
-Rule	Jordan	1989	only	-	May	8	0:00	1:00	S
-Rule	Jordan	1990	only	-	Apr	27	0:00	1:00	S
-Rule	Jordan	1991	only	-	Apr	17	0:00	1:00	S
-Rule	Jordan	1991	only	-	Sep	27	0:00	0	-
-Rule	Jordan	1992	only	-	Apr	10	0:00	1:00	S
-Rule	Jordan	1992	1993	-	Oct	Fri>=1	0:00	0	-
-Rule	Jordan	1993	1998	-	Apr	Fri>=1	0:00	1:00	S
-Rule	Jordan	1994	only	-	Sep	Fri>=15	0:00	0	-
-Rule	Jordan	1995	1998	-	Sep	Fri>=15	0:00s	0	-
-Rule	Jordan	1999	only	-	Jul	 1	0:00s	1:00	S
-Rule	Jordan	1999	max	-	Sep	lastThu	0:00s	0	-
-Rule	Jordan	2000	max	-	Mar	lastThu	0:00s	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Amman	2:23:44 -	LMT	1931
-			2:00	Jordan	EE%sT
-
-# Kazakhstan
-# From Paul Eggert (1996-11-22):
-# Andrew Evtichov <evti@chevron.com> (1996-04-13) writes that Kazakhstan
-# stayed in sync with Moscow after 1990, and that Aqtobe (formerly Aktyubinsk)
-# and Aqtau (formerly Shevchenko) are the largest cities in their zones.
-# Guess that Aqtau and Aqtobe diverged in 1995, since that's the first time
-# IATA SSIM mentions a third time zone in Kazakhstan.
-#
-# From Paul Eggert (2001-10-18):
-# German Iofis, ELSI, Almaty (2001-10-09) reports that Kazakhstan uses
-# RussiaAsia rules, instead of switching at 00:00 as the IATA has it.
-# Go with Shanks, who has them always using RussiaAsia rules.
-# Also go with the following claims of Shanks:
-#
-# - Kazakhstan did not observe DST in 1991.
-# - Qyzylorda switched from +5:00 to +6:00 on 1992-01-19 02:00.
-# - Oral switched from +5:00 to +4:00 in spring 1989.
-#
-# <a href="http://www.kazsociety.org.uk/news/2005/03/30.htm">
-# From Kazakhstan Embassy's News Bulletin #11 (2005-03-21):
-# </a>
-# The Government of Kazakhstan passed a resolution March 15 abolishing
-# daylight saving time citing lack of economic benefits and health
-# complications coupled with a decrease in productivity.
-#
-#
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-#
-# Almaty (formerly Alma-Ata), representing most locations in Kazakhstan
-Zone	Asia/Almaty	5:07:48 -	LMT	1924 May  2 # or Alma-Ata
-			5:00	-	ALMT	1930 Jun 21 # Alma-Ata Time
-			6:00 RussiaAsia ALM%sT	1991
-			6:00	-	ALMT	1992
-			6:00 RussiaAsia	ALM%sT	2005 Mar 15
-			6:00	-	ALMT
-# Qyzylorda (aka Kyzylorda, Kizilorda, Kzyl-Orda, etc.)
-Zone	Asia/Qyzylorda	4:21:52 -	LMT	1924 May  2
-			4:00	-	KIZT	1930 Jun 21 # Kizilorda Time
-			5:00	-	KIZT	1981 Apr  1
-			5:00	1:00	KIZST	1981 Oct  1
-			6:00	-	KIZT	1982 Apr  1
-			5:00 RussiaAsia	KIZ%sT	1991
-			5:00	-	KIZT	1991 Dec 16 # independence
-			5:00	-	QYZT	1992 Jan 19 2:00
-			6:00 RussiaAsia	QYZ%sT	2005 Mar 15
-			6:00	-	QYZT
-# Aqtobe (aka Aktobe, formerly Akt'ubinsk)
-Zone	Asia/Aqtobe	3:48:40	-	LMT	1924 May  2
-			4:00	-	AKTT	1930 Jun 21 # Aktyubinsk Time
-			5:00	-	AKTT	1981 Apr  1
-			5:00	1:00	AKTST	1981 Oct  1
-			6:00	-	AKTT	1982 Apr  1
-			5:00 RussiaAsia	AKT%sT	1991
-			5:00	-	AKTT	1991 Dec 16 # independence
-			5:00 RussiaAsia	AQT%sT	2005 Mar 15 # Aqtobe Time
-			5:00	-	AQTT
-# Mangghystau
-# Aqtau was not founded until 1963, but it represents an inhabited region,
-# so include time stamps before 1963.
-Zone	Asia/Aqtau	3:21:04	-	LMT	1924 May  2
-			4:00	-	FORT	1930 Jun 21 # Fort Shevchenko T
-			5:00	-	FORT	1963
-			5:00	-	SHET	1981 Oct  1 # Shevchenko Time
-			6:00	-	SHET	1982 Apr  1
-			5:00 RussiaAsia	SHE%sT	1991
-			5:00	-	SHET	1991 Dec 16 # independence
-			5:00 RussiaAsia	AQT%sT	1995 Mar lastSun 2:00 # Aqtau Time
-			4:00 RussiaAsia	AQT%sT	2005 Mar 15
-			4:00	-	AQTT
-# West Kazakhstan
-Zone	Asia/Oral	3:25:24	-	LMT	1924 May  2 # or Ural'sk
-			4:00	-	URAT	1930 Jun 21 # Ural'sk time
-			5:00	-	URAT	1981 Apr  1
-			5:00	1:00	URAST	1981 Oct  1
-			6:00	-	URAT	1982 Apr  1
-			5:00 RussiaAsia	URA%sT	1989 Mar 26 2:00
-			4:00 RussiaAsia	URA%sT	1991
-			4:00	-	URAT	1991 Dec 16 # independence
-			4:00 RussiaAsia	ORA%sT	2005 Mar 15 # Oral Time
-			4:00	-	ORAT
-
-# Kyrgyzstan (Kirgizstan)
-# Transitions through 1991 are from Shanks.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Kirgiz	1992	1996	-	Apr	Sun>=7	0:00s	1:00	S
-Rule	Kirgiz	1992	1996	-	Sep	lastSun	0:00	0	-
-Rule	Kirgiz	1997	max	-	Mar	lastSun	2:30	1:00	S
-Rule	Kirgiz	1997	max	-	Oct	lastSun	2:30	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Bishkek	4:58:24 -	LMT	1924 May  2
-			5:00	-	FRUT	1930 Jun 21 # Frunze Time
-			6:00 RussiaAsia FRU%sT	1991 Mar 31 2:00s
-			5:00	1:00	FRUST	1991 Aug 31 2:00 # independence
-			5:00	Kirgiz	KG%sT		    # Kirgizstan Time
-
-###############################################################################
-
-# Korea (North and South)
-
-# From Guy Harris:
-# According to someone at the Korean Times in San Francisco,
-# Daylight Savings Time was not observed until 1987.  He did not know
-# at what time of day DST starts or ends.
-
-# From Shanks:
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	ROK	1960	only	-	May	15	0:00	1:00	D
-Rule	ROK	1960	only	-	Sep	13	0:00	0	S
-Rule	ROK	1987	1988	-	May	Sun<=14	0:00	1:00	D
-Rule	ROK	1987	1988	-	Oct	Sun<=14	0:00	0	S
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Seoul	8:27:52	-	LMT	1890
-			8:30	-	KST	1904 Dec
-			9:00	-	KST	1928
-			8:30	-	KST	1932
-			9:00	-	KST	1954 Mar 21
-			8:00	ROK	K%sT	1961 Aug 10
-			8:30	-	KST	1968 Oct
-			9:00	ROK	K%sT
-Zone	Asia/Pyongyang	8:23:00 -	LMT	1890
-			8:30	-	KST	1904 Dec
-			9:00	-	KST	1928
-			8:30	-	KST	1932
-			9:00	-	KST	1954 Mar 21
-			8:00	-	KST	1961 Aug 10
-			9:00	-	KST
-
-###############################################################################
-
-# Kuwait
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Kuwait	3:11:56 -	LMT	1950
-			3:00	-	AST
-
-# Laos
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Vientiane	6:50:24 -	LMT	1906 Jun  9 # or Viangchan
-			7:06:20	-	SMT	1911 Mar 11 0:01 # Saigon MT?
-			7:00	-	ICT	1912 May
-			8:00	-	ICT	1931 May
-			7:00	-	ICT
-
-# Lebanon
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Lebanon	1920	only	-	Mar	28	0:00	1:00	S
-Rule	Lebanon	1920	only	-	Oct	25	0:00	0	-
-Rule	Lebanon	1921	only	-	Apr	3	0:00	1:00	S
-Rule	Lebanon	1921	only	-	Oct	3	0:00	0	-
-Rule	Lebanon	1922	only	-	Mar	26	0:00	1:00	S
-Rule	Lebanon	1922	only	-	Oct	8	0:00	0	-
-Rule	Lebanon	1923	only	-	Apr	22	0:00	1:00	S
-Rule	Lebanon	1923	only	-	Sep	16	0:00	0	-
-Rule	Lebanon	1957	1961	-	May	1	0:00	1:00	S
-Rule	Lebanon	1957	1961	-	Oct	1	0:00	0	-
-Rule	Lebanon	1972	only	-	Jun	22	0:00	1:00	S
-Rule	Lebanon	1972	1977	-	Oct	1	0:00	0	-
-Rule	Lebanon	1973	1977	-	May	1	0:00	1:00	S
-Rule	Lebanon	1978	only	-	Apr	30	0:00	1:00	S
-Rule	Lebanon	1978	only	-	Sep	30	0:00	0	-
-Rule	Lebanon	1984	1987	-	May	1	0:00	1:00	S
-Rule	Lebanon	1984	1991	-	Oct	16	0:00	0	-
-Rule	Lebanon	1988	only	-	Jun	1	0:00	1:00	S
-Rule	Lebanon	1989	only	-	May	10	0:00	1:00	S
-Rule	Lebanon	1990	1992	-	May	1	0:00	1:00	S
-Rule	Lebanon	1992	only	-	Oct	4	0:00	0	-
-Rule	Lebanon	1993	max	-	Mar	lastSun	0:00	1:00	S
-Rule	Lebanon	1993	1998	-	Sep	lastSun	0:00	0	-
-Rule	Lebanon	1999	max	-	Oct	lastSun	0:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Beirut	2:22:00 -	LMT	1880
-			2:00	Lebanon	EE%sT
-
-# Malaysia
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	NBorneo	1935	1941	-	Sep	14	0:00	0:20	TS # one-Third Summer
-Rule	NBorneo	1935	1941	-	Dec	14	0:00	0	-
-#
-# peninsular Malaysia
-# The data here are taken from Mok Ly Yng (2003-10-30)
-# <http://www.math.nus.edu.sg/aslaksen/teaching/timezone.html>.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Asia/Kuala_Lumpur	6:46:46 -	LMT	1901 Jan  1
-			6:55:25	-	SMT	1905 Jun  1 # Singapore M.T.
-			7:00	-	MALT	1933 Jan  1 # Malaya Time
-			7:00	0:20	MALST	1936 Jan  1
-			7:20	-	MALT	1941 Sep  1
-			7:30	-	MALT	1942 Feb 16
-			9:00	-	JST	1945 Sep 12
-			7:30	-	MALT	1982 Jan  1
-			8:00	-	MYT	# Malaysia Time
-# Sabah & Sarawak
-# From Paul Eggert (2003-11-01):
-# The data here are mostly from Shanks, but the 1942, 1945 and 1982
-# transition dates are from Mok Ly Yng.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Asia/Kuching	7:21:20	-	LMT	1926 Mar
-			7:30	-	BORT	1933	# Borneo Time
-			8:00	NBorneo	BOR%sT	1942 Feb 16
-			9:00	-	JST	1945 Sep 12
-			8:00	-	BORT	1982 Jan  1
-			8:00	-	MYT
-
-# Maldives
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Indian/Maldives	4:54:00 -	LMT	1880	# Male
-			4:54:00	-	MMT	1960	# Male Mean Time
-			5:00	-	MVT		# Maldives Time
-
-# Mongolia
-
-# Shanks says that Mongolia has three time zones, but usno1995 and the CIA map
-# Standard Time Zones of the World (1997-01)
-# both say that it has just one.
-
-# From Oscar van Vlijmen (1999-12-11):
-# <a href="http://www.mongoliatourism.gov.mn/general.htm">
-# General Information Mongolia
-# </a> (1999-09)
-# "Time: Mongolia has two time zones. Three westernmost provinces of
-# Bayan-Ulgii, Uvs, and Hovd are one hour earlier than the capital city, and
-# the rest of the country follows the Ulaanbaatar time, which is UTC/GMT plus
-# eight hours."
-
-# From Rives McDow (1999-12-13):
-# Mongolia discontinued the use of daylight savings time in 1999; 1998
-# being the last year it was implemented.  The dates of implementation I am
-# unsure of, but most probably it was similar to Russia, except for the time
-# of implementation may have been different....
-# Some maps in the past have indicated that there was an additional time
-# zone in the eastern part of Mongolia, including the provinces of Dornod,
-# Suhbaatar, and possibly Khentij.
-
-# From Paul Eggert (1999-12-15):
-# Naming and spelling is tricky in Mongolia.
-# We'll use Hovd (also spelled Chovd and Khovd) to represent the west zone;
-# the capital of the Hovd province is sometimes called Hovd, sometimes Dund-Us,
-# and sometimes Jirgalanta (with variant spellings), but the name Hovd
-# is good enough for our purposes.
-
-# From Rives McDow (2001-05-13):
-# In addition to Mongolia starting daylight savings as reported earlier
-# (adopted DST on 2001-04-27 02:00 local time, ending 2001-09-28),
-# there are three time zones.
-#
-# Provinces [at 7:00]: Bayan-ulgii, Uvs, Khovd, Zavkhan, Govi-Altai
-# Provinces [at 8:00]: Khovsgol, Bulgan, Arkhangai, Khentii, Tov,
-#	Bayankhongor, Ovorkhangai, Dundgovi, Dornogovi, Omnogovi
-# Provinces [at 9:00]: Dornod, Sukhbaatar
-#
-# [The province of Selenge is omitted from the above lists.]
-
-# From Ganbold Ts., Ulaanbaatar <ganbold@micom.mng.net> (2004-04-17):
-# Daylight saving occurs at 02:00 local time last Saturday of March.
-# It will change back to normal at 02:00 local time last Saturday of
-# September.... As I remember this rule was changed in 2001.
-#
-# From Paul Eggert (2004-04-17):
-# For now, assume Rives McDow's informant got confused about Friday vs
-# Saturday, and that his 2001 dates should have 1 added to them.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Mongol	1983	1984	-	Apr	1	0:00	1:00	S
-Rule	Mongol	1983	only	-	Oct	1	0:00	0	-
-# IATA SSIM says 1990s switches occurred at 00:00, but Shanks (1995) lists
-# them at 02:00s, and McDow says the 2001 switches also occurred at 02:00.
-# Also, IATA SSIM (1996-09) says 1996-10-25.  Go with Shanks through 1998.
-Rule	Mongol	1985	1998	-	Mar	lastSun	2:00s	1:00	S
-Rule	Mongol	1984	1998	-	Sep	lastSun	2:00s	0	-
-# IATA SSIM (1999-09) says Mongolia no longer observes DST.
-Rule	Mongol	2001	only	-	Apr	lastSat	2:00	1:00	S
-Rule	Mongol	2001	max	-	Sep	lastSat	2:00	0	-
-Rule	Mongol	2002	max	-	Mar	lastSat	2:00	1:00	S
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-# Hovd, a.k.a. Chovd, Dund-Us, Dzhargalant, Khovd, Jirgalanta
-Zone	Asia/Hovd	6:06:36 -	LMT	1905 Aug
-			6:00	-	HOVT	1978	# Hovd Time
-			7:00	Mongol	HOV%sT
-# Ulaanbaatar, a.k.a. Ulan Bataar, Ulan Bator, Urga
-Zone	Asia/Ulaanbaatar 7:07:32 -	LMT	1905 Aug
-			7:00	-	ULAT	1978	# Ulaanbaatar Time
-			8:00	Mongol	ULA%sT
-# Choibalsan, a.k.a. Bajan Tuemen, Bajan Tumen, Chojbalsan,
-# Choybalsan, Sanbejse, Tchoibalsan
-Zone	Asia/Choibalsan	7:38:00 -	LMT	1905 Aug
-			7:00	-	ULAT	1978
-			8:00	-	ULAT	1983 Apr
-			9:00	Mongol	CHO%sT	# Choibalsan Time
-
-# Nepal
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Katmandu	5:41:16 -	LMT	1920
-			5:30	-	IST	1986
-			5:45	-	NPT	# Nepal Time
-
-# Oman
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Muscat	3:54:20 -	LMT	1920
-			4:00	-	GST
-
-# Pakistan
-
-# From Rives McDow (2002-03-13):
-# I have been advised that Pakistan has decided to adopt dst on a
-# TRIAL basis for one year, starting 00:01 local time on April 7, 2002
-# and ending at 00:01 local time October 6, 2002.  This is what I was
-# told, but I believe that the actual time of change may be 00:00; the
-# 00:01 was to make it clear which day it was on.
-
-# From Paul Eggert (2002-03-15):
-# Jesper Norgaard found this URL:
-# http://www.pak.gov.pk/public/news/app/app06_dec.htm
-# (dated 2001-12-06) which says that the Cabinet adopted a scheme "to
-# advance the clocks by one hour on the night between the first
-# Saturday and Sunday of April and revert to the original position on
-# 15th October each year".  This agrees with McDow's 04-07 at 00:00,
-# but disagrees about the October transition, and makes it sound like
-# it's not on a trial basis.  Also, the "between the first Saturday
-# and Sunday of April" phrase, if taken literally, means that the
-# transition takes place at 00:00 on the first Sunday on or after 04-02.
-
-# From Paul Eggert (2003-02-09):
-# DAWN <http://www.dawn.com/2002/10/06/top13.htm> reported on 2002-10-05
-# that 2002 DST ended that day at midnight.  Go with McDow for now.
-
-# From Steffen Thorsen (2003-03-14):
-# According to http://www.dawn.com/2003/03/07/top15.htm
-# there will be no DST in Pakistan this year:
-#
-# ISLAMABAD, March 6: Information and Media Development Minister Sheikh
-# Rashid Ahmed on Thursday said the cabinet had reversed a previous
-# decision to advance clocks by one hour in summer and put them back by
-# one hour in winter with the aim of saving light hours and energy.
-#
-# The minister told a news conference that the experiment had rather
-# shown 8 per cent higher consumption of electricity.
-
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule Pakistan	2002	only	-	Apr	Sun>=2	0:01	1:00	S
-Rule Pakistan	2002	only	-	Oct	Sun>=2	0:01	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Karachi	4:28:12 -	LMT	1907
-			5:30	-	IST	1942 Sep
-			5:30	1:00	IST	1945 Oct 15
-			5:30	-	IST	1951 Sep 30
-			5:00	-	KART	1971 Mar 26 # Karachi Time
-			5:00 Pakistan	PK%sT	# Pakistan Time
-
-# Palestine
-
-# From Amos Shapir <amos@nsof.co.il> (1998-02-15):
-#
-# From 1917 until 1948-05-15, all of Palestine, including the parts now
-# known as the Gaza Strip and the West Bank, was under British rule.
-# Therefore the rules given for Israel for that period, apply there too...
-#
-# The Gaza Strip was under Egyptian rule between 1948-05-15 until 1967-06-05
-# (except a short occupation by Israel from 1956-11 till 1957-03, but no
-# time zone was affected then).  It was never formally annexed to Egypt,
-# though.
-#
-# The rest of Palestine was under Jordanian rule at that time, formally
-# annexed in 1950 as the West Bank (and the word "Trans" was dropped from
-# the country's previous name of "the Hashemite Kingdom of the
-# Trans-Jordan").  So the rules for Jordan for that time apply.  Major
-# towns in that area are Nablus (Shchem), El-Halil (Hebron), Ramallah, and
-# East Jerusalem.
-#
-# Both areas were occupied by Israel in June 1967, but not annexed (except
-# for East Jerusalem).  They were on Israel time since then; there might
-# have been a Military Governor's order about time zones, but I'm not aware
-# of any (such orders may have been issued semi-annually whenever summer
-# time was in effect, but maybe the legal aspect of time was just neglected).
-#
-# The Palestinian Authority was established in 1993, and got hold of most
-# towns in the West Bank and Gaza by 1995.  I know that in order to
-# demonstrate...independence, they have been switching to
-# summer time and back on a different schedule than Israel's, but I don't
-# know when this was started, or what algorithm is used (most likely the
-# Jordanian one).
-#
-# To summarize, the table should probably look something like that:
-#
-# Area \ when | 1918-1947 | 1948-1967 | 1967-1995 | 1996-
-# ------------+-----------+-----------+-----------+-----------
-# Israel      | Zion      | Zion      | Zion      | Zion
-# West bank   | Zion      | Jordan    | Zion      | Jordan
-# Gaza        | Zion      | Egypt     | Zion      | Jordan
-#
-# I guess more info may be available from the PA's web page (if/when they
-# have one).
-
-# From Paul Eggert (1998-02-25):
-# Shanks writes that Gaza did not observe DST until 1957, but we'll go
-# with Shapir and assume that it observed DST from 1940 through 1947,
-# and that it used Jordanian rules starting in 1996.
-# We don't yet need a separate entry for the West Bank, since
-# the only differences between it and Gaza that we know about
-# occurred before our cutoff date of 1970.
-# However, as we get more information, we may need to add entries
-# for parts of the West Bank as they transitioned from Israel's rules
-# to Palestine's rules.  If you have more info about this, please
-# send it to tz@elsie.nci.nih.gov for incorporation into future editions.
-
-# From IINS News Service - Israel - 1998-03-23 10:38:07 Israel time,
-# forwarded by Ephraim Silverberg:
-#
-# Despite the fact that Israel changed over to daylight savings time
-# last week, the PLO Authority (PA) has decided not to turn its clocks
-# one-hour forward at this time.  As a sign of independence from Israeli rule,
-# the PA has decided to implement DST in April.
-
-# From Paul Eggert (1999-09-20):
-# Daoud Kuttab writes in
-# <a href="http://www.jpost.com/com/Archive/22.Apr.1999/Opinion/Article-2.html">
-# Holiday havoc
-# </a> (Jerusalem Post, 1999-04-22) that
-# the Palestinian National Authority changed to DST on 1999-04-15.
-# I vaguely recall that they switch back in October (sorry, forgot the source).
-# For now, let's assume that the spring switch was at 24:00,
-# and that they switch at 0:00 on the 3rd Fridays of April and October.
-
-# The rules for Egypt are stolen from the `africa' file.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule EgyptAsia	1957	only	-	May	10	0:00	1:00	S
-Rule EgyptAsia	1957	1958	-	Oct	 1	0:00	0	-
-Rule EgyptAsia	1958	only	-	May	 1	0:00	1:00	S
-Rule EgyptAsia	1959	1967	-	May	 1	1:00	1:00	S
-Rule EgyptAsia	1959	1965	-	Sep	30	3:00	0	-
-Rule EgyptAsia	1966	only	-	Oct	 1	3:00	0	-
-
-Rule Palestine	1999	max	-	Apr	Fri>=15	0:00	1:00	S
-Rule Palestine	1999	max	-	Oct	Fri>=15	0:00	0	-
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Gaza	2:17:52	-	LMT	1900 Oct
-			2:00	Zion	EET	1948 May 15
-			2:00 EgyptAsia	EE%sT	1967 Jun  5
-			2:00	Zion	I%sT	1996
-			2:00	Jordan	EE%sT	1999
-			2:00 Palestine	EE%sT
-
-# Paracel Is
-# no information
-
-# Philippines
-# On 1844-08-16, Narciso Claveria, governor-general of the
-# Philippines, issued a proclamation announcing that 1844-12-30 was to
-# be immediately followed by 1845-01-01.  Robert H. van Gent has a
-# transcript of the decree in <http://www.phys.uu.nl/~vgent/idl/idl.htm>.
-# The rest of this data is from Shanks.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Phil	1936	only	-	Nov	1	0:00	1:00	S
-Rule	Phil	1937	only	-	Feb	1	0:00	0	-
-Rule	Phil	1954	only	-	Apr	12	0:00	1:00	S
-Rule	Phil	1954	only	-	Jul	1	0:00	0	-
-Rule	Phil	1978	only	-	Mar	22	0:00	1:00	S
-Rule	Phil	1978	only	-	Sep	21	0:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Manila	-15:56:00 -	LMT	1844 Dec 31
-			8:04:00 -	LMT	1899 May 11
-			8:00	Phil	PH%sT	1942 May
-			9:00	-	JST	1944 Nov
-			8:00	Phil	PH%sT
-
-# Qatar
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Qatar	3:26:08 -	LMT	1920	# Al Dawhah / Doha
-			4:00	-	GST	1972 Jun
-			3:00	-	AST
-
-# Saudi Arabia
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Riyadh	3:06:52 -	LMT	1950
-			3:00	-	AST
-
-# Singapore
-# The data here are taken from Mok Ly Yng (2003-10-30)
-# <http://www.math.nus.edu.sg/aslaksen/teaching/timezone.html>.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Singapore	6:55:25 -	LMT	1901 Jan  1
-			6:55:25	-	SMT	1905 Jun  1 # Singapore M.T.
-			7:00	-	MALT	1933 Jan  1 # Malaya Time
-			7:00	0:20	MALST	1936 Jan  1
-			7:20	-	MALT	1941 Sep  1
-			7:30	-	MALT	1942 Feb 16
-			9:00	-	JST	1945 Sep 12
-			7:30	-	MALT	1965 Aug  9 # independence
-			7:30	-	SGT	1982 Jan  1 # Singapore Time
-			8:00	-	SGT
-
-# Spratly Is
-# no information
-
-# Sri Lanka
-# From Paul Eggert (1996-09-03):
-# "Sri Lanka advances clock by an hour to avoid blackout"
-# (www.virtual-pc.com/lankaweb/news/items/240596-2.html, 1996-05-24,
-# no longer available as of 1999-08-17)
-# reported ``the country's standard time will be put forward by one hour at
-# midnight Friday (1830 GMT) `in the light of the present power crisis'.''
-#
-# From Dharmasiri Senanayake, Sri Lanka Media Minister (1996-10-24), as quoted
-# by Shamindra in
-# <a href="news:54rka5$m5h@mtinsc01-mgt.ops.worldnet.att.net">
-# Daily News - Hot News Section (1996-10-26)
-# </a>:
-# With effect from 12.30 a.m. on 26th October 1996
-# Sri Lanka will be six (06) hours ahead of GMT.
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Colombo	5:19:24 -	LMT	1880
-			5:19:32	-	MMT	1906	# Moratuwa Mean Time
-			5:30	-	IST	1942 Jan  5
-			5:30	0:30	IHST	1942 Sep
-			5:30	1:00	IST	1945 Oct 16 2:00
-			5:30	-	IST	1996 May 25 0:00
-			6:30	-	LKT	1996 Oct 26 0:30
-			6:00	-	LKT
-
-# Syria
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Syria	1920	1923	-	Apr	Sun>=15	2:00	1:00	S
-Rule	Syria	1920	1923	-	Oct	Sun>=1	2:00	0	-
-Rule	Syria	1962	only	-	Apr	29	2:00	1:00	S
-Rule	Syria	1962	only	-	Oct	1	2:00	0	-
-Rule	Syria	1963	1965	-	May	1	2:00	1:00	S
-Rule	Syria	1963	only	-	Sep	30	2:00	0	-
-Rule	Syria	1964	only	-	Oct	1	2:00	0	-
-Rule	Syria	1965	only	-	Sep	30	2:00	0	-
-Rule	Syria	1966	only	-	Apr	24	2:00	1:00	S
-Rule	Syria	1966	1976	-	Oct	1	2:00	0	-
-Rule	Syria	1967	1978	-	May	1	2:00	1:00	S
-Rule	Syria	1977	1978	-	Sep	1	2:00	0	-
-Rule	Syria	1983	1984	-	Apr	9	2:00	1:00	S
-Rule	Syria	1983	1984	-	Oct	1	2:00	0	-
-Rule	Syria	1986	only	-	Feb	16	2:00	1:00	S
-Rule	Syria	1986	only	-	Oct	9	2:00	0	-
-Rule	Syria	1987	only	-	Mar	1	2:00	1:00	S
-Rule	Syria	1987	1988	-	Oct	31	2:00	0	-
-Rule	Syria	1988	only	-	Mar	15	2:00	1:00	S
-Rule	Syria	1989	only	-	Mar	31	2:00	1:00	S
-Rule	Syria	1989	only	-	Oct	1	2:00	0	-
-Rule	Syria	1990	only	-	Apr	1	2:00	1:00	S
-Rule	Syria	1990	only	-	Sep	30	2:00	0	-
-Rule	Syria	1991	only	-	Apr	 1	0:00	1:00	S
-Rule	Syria	1991	1992	-	Oct	 1	0:00	0	-
-Rule	Syria	1992	only	-	Apr	 8	0:00	1:00	S
-Rule	Syria	1993	only	-	Mar	26	0:00	1:00	S
-Rule	Syria	1993	only	-	Sep	25	0:00	0	-
-# IATA SSIM (1998-02) says 1998-04-02;
-# (1998-09) says 1999-03-29 and 1999-09-29; (1999-02) says 1999-04-02,
-# 2000-04-02, and 2001-04-02; (1999-09) says 2000-03-31 and 2001-03-31;
-# ignore all these claims and go with Shanks.
-Rule	Syria	1994	1996	-	Apr	 1	0:00	1:00	S
-Rule	Syria	1994	max	-	Oct	 1	0:00	0	-
-Rule	Syria	1997	1998	-	Mar	lastMon	0:00	1:00	S
-Rule	Syria	1999	max	-	Apr	 1	0:00	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Damascus	2:25:12 -	LMT	1920	# Dimashq
-			2:00	Syria	EE%sT
-
-# Tajikistan
-# From Shanks.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Dushanbe	4:35:12 -	LMT	1924 May  2
-			5:00	-	DUST	1930 Jun 21 # Dushanbe Time
-			6:00 RussiaAsia DUS%sT	1991 Mar 31 2:00s
-			5:00	1:00	DUSST	1991 Sep  9 2:00s
-			5:00	-	TJT		    # Tajikistan Time
-
-# Thailand
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Bangkok	6:42:04	-	LMT	1880
-			6:42:04	-	BMT	1920 Apr # Bangkok Mean Time
-			7:00	-	ICT
-
-# Turkmenistan
-# From Shanks.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Ashgabat	3:53:32 -	LMT	1924 May  2 # or Ashkhabad
-			4:00	-	ASHT	1930 Jun 21 # Ashkhabad Time
-			5:00 RussiaAsia	ASH%sT	1991 Mar 31 2:00
-			4:00 RussiaAsia	ASH%sT	1991 Oct 27 # independence
-			4:00 RussiaAsia TM%sT	1992 Jan 19 2:00
-			5:00	-	TMT
-
-# United Arab Emirates
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Dubai	3:41:12 -	LMT	1920
-			4:00	-	GST
-
-# Uzbekistan
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Samarkand	4:27:12 -	LMT	1924 May  2
-			4:00	-	SAMT	1930 Jun 21 # Samarkand Time
-			5:00	-	SAMT	1981 Apr  1
-			5:00	1:00	SAMST	1981 Oct  1
-			6:00 RussiaAsia TAS%sT	1991 Mar 31 2:00 # Tashkent Time
-			5:00 RussiaAsia	TAS%sT	1991 Sep  1 # independence
-			5:00 RussiaAsia	UZ%sT	1992
-			5:00 RussiaAsia	UZ%sT	1993
-			5:00	-	UZT
-Zone	Asia/Tashkent	4:37:12 -	LMT	1924 May  2
-			5:00	-	TAST	1930 Jun 21 # Tashkent Time
-			6:00 RussiaAsia TAS%sT	1991 Mar 31 2:00s
-			5:00 RussiaAsia	TAS%sT	1991 Sep  1 # independence
-			5:00 RussiaAsia	UZ%sT	1992
-			5:00 RussiaAsia	UZ%sT	1993
-			5:00	-	UZT
-
-# Vietnam
-# From Paul Eggert <eggert@twinsun.com> (1993-11-18):
-# Saigon's official name is Thanh-Pho Ho Chi Minh, but it's too long.
-# We'll stick with the traditional name for now.
-# From Shanks:
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Saigon	7:06:40 -	LMT	1906 Jun  9
-			7:06:20	-	SMT	1911 Mar 11 0:01 # Saigon MT?
-			7:00	-	ICT	1912 May
-			8:00	-	ICT	1931 May
-			7:00	-	ICT
-
-# Yemen
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Aden	3:00:48	-	LMT	1950
-			3:00	-	AST
+# @(#)asia	7.83
+
+# This data is by no means authoritative; if you think you know better,
+# go ahead and edit the file (and please send any changes to
+# tz@elsie.nci.nih.gov for general use in the future).
+
+# From Paul Eggert (1999-03-22):
+#
+# A good source for time zone historical data outside the U.S. is
+# Thomas G. Shanks, The International Atlas (5th edition),
+# San Diego: ACS Publications, Inc. (1999).
+#
+# Gwillim Law writes that a good source
+# for recent time zone data is the International Air Transport
+# Association's Standard Schedules Information Manual (IATA SSIM),
+# published semiannually.  Law sent in several helpful summaries
+# of the IATA's data after 1990.
+#
+# Except where otherwise noted, Shanks is the source for entries through 1990,
+# and IATA SSIM is the source for entries after 1990.
+#
+# Another source occasionally used is Edward W. Whitman, World Time Differences,
+# Whitman Publishing Co, 2 Niagara Av, Ealing, London (undated), which
+# I found in the UCLA library.
+#
+# A reliable and entertaining source about time zones is
+# Derek Howse, Greenwich time and longitude, Philip Wilson Publishers (1997).
+#
+# I invented the abbreviations marked `*' in the following table;
+# the rest are from earlier versions of this file, or from other sources.
+# Corrections are welcome!
+#	     std  dst
+#	     LMT	Local Mean Time
+#	2:00 EET  EEST	Eastern European Time
+#	2:00 IST  IDT	Israel
+#	3:00 AST  ADT	Arabia*
+#	3:30 IRST IRDT	Iran
+#	4:00 GST	Gulf*
+#	5:30 IST	India
+#	7:00 ICT	Indochina*
+#	7:00 WIT	west Indonesia
+#	8:00 CIT	central Indonesia
+#	8:00 CST	China
+#	9:00 CJT	Central Japanese Time (1896/1937)*
+#	9:00 EIT	east Indonesia
+#	9:00 JST	Japan
+#	9:00 KST	Korea
+#	9:30 CST	(Australian) Central Standard Time
+#
+# See the `europe' file for Russia and Turkey in Asia.
+
+# From Guy Harris:
+# Incorporates data for Singapore from Robert Elz' asia 1.1, as well as
+# additional information from Tom Yap, Sun Microsystems Intercontinental
+# Technical Support (including a page from the Official Airline Guide -
+# Worldwide Edition).  The names for time zones are guesses.
+
+###############################################################################
+
+# These rules are stolen from the `europe' file.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	EUAsia	1981	max	-	Mar	lastSun	 1:00u	1:00	S
+Rule	EUAsia	1996	max	-	Oct	lastSun	 1:00u	0	-
+Rule E-EurAsia	1981	max	-	Mar	lastSun	 0:00	1:00	S
+Rule E-EurAsia	1979	1995	-	Sep	lastSun	 0:00	0	-
+Rule E-EurAsia	1996	max	-	Oct	lastSun	 0:00	0	-
+Rule RussiaAsia	1981	1984	-	Apr	1	 0:00	1:00	S
+Rule RussiaAsia	1981	1983	-	Oct	1	 0:00	0	-
+Rule RussiaAsia	1984	1991	-	Sep	lastSun	 2:00s	0	-
+Rule RussiaAsia	1985	1991	-	Mar	lastSun	 2:00s	1:00	S
+Rule RussiaAsia	1992	only	-	Mar	lastSat	23:00	1:00	S
+Rule RussiaAsia	1992	only	-	Sep	lastSat	23:00	0	-
+Rule RussiaAsia	1993	max	-	Mar	lastSun	 2:00s	1:00	S
+Rule RussiaAsia	1993	1995	-	Sep	lastSun	 2:00s	0	-
+Rule RussiaAsia	1996	max	-	Oct	lastSun	 2:00s	0	-
+
+# Afghanistan
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Kabul	4:36:48 -	LMT	1890
+			4:00	-	AFT	1945
+			4:30	-	AFT
+
+# Armenia
+# From Paul Eggert (1999-10-29):
+# Shanks has Yerevan switching to 3:00 (with Russian DST) in spring 1991,
+# then to 4:00 with no DST in fall 1995, then readopting Russian DST in 1997.
+# Go with Shanks, even when he disagrees with others.  Edgar Der-Danieliantz
+# <edd@AIC.NET> reported (1996-05-04) that Yerevan probably wouldn't use DST
+# in 1996, though it did use DST in 1995.  IATA SSIM (1991/1998) reports that
+# Armenia switched from 3:00 to 4:00 in 1998 and observed DST after 1991,
+# but started switching at 3:00s in 1998.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Yerevan	2:58:00 -	LMT	1924 May  2
+			3:00	-	YERT	1957 Mar    # Yerevan Time
+			4:00 RussiaAsia YER%sT	1991 Mar 31 2:00s
+			3:00	1:00	YERST	1991 Sep 23 # independence
+			3:00 RussiaAsia	AM%sT	1995 Sep 24 2:00s
+			4:00	-	AMT	1997
+			4:00 RussiaAsia	AM%sT
+
+# Azerbaijan
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Azer	1997	max	-	Mar	lastSun	 1:00	1:00	S
+Rule	Azer	1997	max	-	Oct	lastSun	 1:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Baku	3:19:24 -	LMT	1924 May  2
+			3:00	-	BAKT	1957 Mar    # Baku Time
+			4:00 RussiaAsia BAK%sT	1991 Mar 31 2:00s
+			3:00	1:00	BAKST	1991 Aug 30 # independence
+			3:00 RussiaAsia	AZ%sT	1992 Sep lastSat 23:00
+			4:00	-	AZT	1996 # Azerbaijan time
+			4:00	EUAsia	AZ%sT	1997
+			4:00	Azer	AZ%sT
+
+# Bahrain
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Bahrain	3:22:20 -	LMT	1920		# Al Manamah
+			4:00	-	GST	1972 Jun
+			3:00	-	AST
+
+# Bangladesh
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Dhaka	6:01:40 -	LMT	1890
+			5:53:20	-	HMT	1941 Oct    # Howrah Mean Time?
+			6:30	-	BURT	1942 May 15 # Burma Time
+			5:30	-	IST	1942 Sep
+			6:30	-	BURT	1951 Sep 30
+			6:00	-	DACT	1971 Mar 26 # Dacca Time
+			6:00	-	BDT	# Bangladesh Time
+
+# Bhutan
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Thimphu	5:58:36 -	LMT	1947 Aug 15 # or Thimbu
+			5:30	-	IST	1987 Oct
+			6:00	-	BTT	# Bhutan Time
+
+# British Indian Ocean Territory
+# Whitman and the 1995 CIA time zone map say 5:00, but the
+# 1997 and later maps say 6:00.  Assume the switch occurred in 1996.
+# We have no information as to when standard time was introduced;
+# assume it occurred in 1907, the same year as Mauritius (which
+# then contained the Chagos Archipelago).
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Indian/Chagos	4:49:40	-	LMT	1907
+			5:00	-	IOT	1996 # BIOT Time
+			6:00	-	IOT
+
+# Brunei
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Brunei	7:39:40 -	LMT	1926 Mar   # Bandar Seri Begawan
+			7:30	-	BNT	1933
+			8:00	-	BNT
+
+# Burma / Myanmar
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Rangoon	6:24:40 -	LMT	1880		# or Yangon
+			6:24:36	-	RMT	1920	   # Rangoon Mean Time?
+			6:30	-	BURT	1942 May   # Burma Time
+			9:00	-	JST	1945 May 3
+			6:30	-	MMT		   # Myanmar Time
+
+# Cambodia
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Phnom_Penh	6:59:40 -	LMT	1906 Jun  9
+			7:06:20	-	SMT	1911 Mar 11 0:01 # Saigon MT?
+			7:00	-	ICT	1912 May
+			8:00	-	ICT	1931 May
+			7:00	-	ICT
+
+# China
+
+# From Guy Harris:
+# People's Republic of China.  Yes, they really have only one time zone.
+
+# From Bob Devine (1988-01-28):
+# No they don't.  See TIME mag, 1986-02-17 p.52.  Even though
+# China is across 4 physical time zones, before Feb 1, 1986 only the
+# Peking (Bejing) time zone was recognized.  Since that date, China
+# has two of 'em -- Peking's and Urumqi (named after the capital of
+# the Xinjiang Uyghur Autonomous Region).  I don't know about DST for it.
+#
+# . . .I just deleted the DST table and this editor makes it too
+# painful to suck in another copy..  So, here is what I have for
+# DST start/end dates for Peking's time zone (info from AP):
+#
+#     1986 May 4 - Sept 14
+#     1987 mid-April - ??
+
+# From U. S. Naval Observatory (1989-01-19):
+# CHINA               8 H  AHEAD OF UTC  ALL OF CHINA, INCL TAIWAN
+# CHINA               9 H  AHEAD OF UTC  APR 17 - SEP 10
+
+# From Paul Eggert (1995-12-19):
+# Shanks writes that China has had a single time zone since 1980 May 1,
+# observing summer DST from 1986 through 1991; this contradicts Devine's
+# note about Time magazine, though apparently _something_ happened in 1986.
+# Go with Shanks for now.  I made up names for the other pre-1980 time zones.
+
+# From Shanks:
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Shang	1940	only	-	Jun	 3	0:00	1:00	D
+Rule	Shang	1940	1941	-	Oct	 1	0:00	0	S
+Rule	Shang	1941	only	-	Mar	16	0:00	1:00	D
+Rule	PRC	1949	only	-	Jan	 1	0:00	0	S
+Rule	PRC	1986	only	-	May	 4	0:00	1:00	D
+Rule	PRC	1986	1991	-	Sep	Sun>=11	0:00	0	S
+Rule	PRC	1987	1991	-	Apr	Sun>=10	0:00	1:00	D
+#
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+#
+# From Anthony Fok (2001-12-20):
+# BTW, I did some research on-line and found some info regarding these five
+# historic timezones from some Taiwan websites.  And yes, there are official
+# Chinese names for these locales (before 1949):
+# Changbai Time ("Long-white Time", Long-white = Heilongjiang area)
+Zone	Asia/Harbin	8:26:44	-	LMT	1928 # or Haerbin
+			8:30	-	CHAT	1932 Mar # Changbai Time
+			8:00	-	CST	1940
+			9:00	-	CHAT	1966 May
+			8:30	-	CHAT	1980 May
+			8:00	PRC	C%sT
+# Zhongyuan Time ("Central plain Time")
+Zone	Asia/Shanghai	8:05:52	-	LMT	1928
+			8:00	Shang	C%sT	1949
+			8:00	PRC	C%sT
+# Long-shu Time (probably due to Long and Shu being two names of that area)
+Zone	Asia/Chongqing	7:06:20	-	LMT	1928 # or Chungking
+			7:00	-	LONT	1980 May # Long-shu Time
+			8:00	PRC	C%sT
+# Xin-zang Time ("Xinjiang-Tibet Time")
+Zone	Asia/Urumqi	5:50:20	-	LMT	1928 # or Urumchi
+			6:00	-	URUT	1980 May # Urumqi Time
+			8:00	PRC	C%sT
+# Kunlun Time
+Zone	Asia/Kashgar	5:03:56	-	LMT	1928 # or Kashi or Kaxgar
+			5:30	-	KAST	1940	 # Kashgar Time
+			5:00	-	KAST	1980 May
+			8:00	PRC	C%sT
+
+# Hong Kong (Xianggang)
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	HK	1946	only	-	Apr	20	3:30	1:00	S
+Rule	HK	1946	only	-	Dec	1	3:30	0	-
+Rule	HK	1947	only	-	Apr	13	3:30	1:00	S
+Rule	HK	1947	only	-	Dec	30	3:30	0	-
+Rule	HK	1948	only	-	May	2	3:30	1:00	S
+Rule	HK	1948	1952	-	Oct	lastSun	3:30	0	-
+Rule	HK	1949	1953	-	Apr	Sun>=1	3:30	1:00	S
+Rule	HK	1953	only	-	Nov	1	3:30	0	-
+Rule	HK	1954	1964	-	Mar	Sun>=18	3:30	1:00	S
+Rule	HK	1954	only	-	Oct	31	3:30	0	-
+Rule	HK	1955	1964	-	Nov	Sun>=1	3:30	0	-
+Rule	HK	1965	1977	-	Apr	Sun>=16	3:30	1:00	S
+Rule	HK	1965	1977	-	Oct	Sun>=16	3:30	0	-
+Rule	HK	1979	1980	-	May	Sun>=8	3:30	1:00	S
+Rule	HK	1979	1980	-	Oct	Sun>=16	3:30	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Hong_Kong	7:36:36 -	LMT	1904 Oct 30
+			8:00	HK	HK%sT
+
+
+###############################################################################
+
+# Taiwan
+
+# Shanks writes that Taiwan observed DST during 1945, when it
+# was still controlled by Japan.  This is hard to believe, but we don't
+# have any other information.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Taiwan	1945	1951	-	May	1	0:00	1:00	D
+Rule	Taiwan	1945	1951	-	Oct	1	0:00	0	S
+Rule	Taiwan	1952	only	-	Mar	1	0:00	1:00	D
+Rule	Taiwan	1952	1954	-	Nov	1	0:00	0	S
+Rule	Taiwan	1953	1959	-	Apr	1	0:00	1:00	D
+Rule	Taiwan	1955	1961	-	Oct	1	0:00	0	S
+Rule	Taiwan	1960	1961	-	Jun	1	0:00	1:00	D
+Rule	Taiwan	1974	1975	-	Apr	1	0:00	1:00	D
+Rule	Taiwan	1974	1975	-	Oct	1	0:00	0	S
+Rule	Taiwan	1980	only	-	Jun	30	0:00	1:00	D
+Rule	Taiwan	1980	only	-	Sep	30	0:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Taipei	8:06:00 -	LMT	1896 # or Taibei or T'ai-pei
+			8:00	Taiwan	C%sT
+
+# Macau (Macao, Aomen)
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Macau	1961	1962	-	Mar	Sun>=16	3:30	1:00	S
+Rule	Macau	1961	1964	-	Nov	Sun>=1	3:30	0	-
+Rule	Macau	1963	only	-	Mar	Sun>=16	0:00	1:00	S
+Rule	Macau	1964	only	-	Mar	Sun>=16	3:30	1:00	S
+Rule	Macau	1965	only	-	Mar	Sun>=16	0:00	1:00	S
+Rule	Macau	1965	only	-	Oct	31	0:00	0	-
+Rule	Macau	1966	1971	-	Apr	Sun>=16	3:30	1:00	S
+Rule	Macau	1966	1971	-	Oct	Sun>=16	3:30	0	-
+Rule	Macau	1972	1974	-	Apr	Sun>=15	0:00	1:00	S
+Rule	Macau	1972	1973	-	Oct	Sun>=15	0:00	0	-
+Rule	Macau	1974	1977	-	Oct	Sun>=15	3:30	0	-
+Rule	Macau	1975	1977	-	Apr	Sun>=15	3:30	1:00	S
+Rule	Macau	1978	1980	-	Apr	Sun>=15	0:00	1:00	S
+Rule	Macau	1978	1980	-	Oct	Sun>=15	0:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Macau	7:34:20 -	LMT	1912
+			8:00	Macau	MO%sT	1999 Dec 20 # return to China
+			8:00	PRC	C%sT
+
+
+###############################################################################
+
+# Cyprus
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Cyprus	1975	only	-	Apr	13	0:00	1:00	S
+Rule	Cyprus	1975	only	-	Oct	12	0:00	0	-
+Rule	Cyprus	1976	only	-	May	15	0:00	1:00	S
+Rule	Cyprus	1976	only	-	Oct	11	0:00	0	-
+Rule	Cyprus	1977	1980	-	Apr	Sun>=1	0:00	1:00	S
+Rule	Cyprus	1977	only	-	Sep	25	0:00	0	-
+Rule	Cyprus	1978	only	-	Oct	2	0:00	0	-
+Rule	Cyprus	1979	1997	-	Sep	lastSun	0:00	0	-
+Rule	Cyprus	1981	1998	-	Mar	lastSun	0:00	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Nicosia	2:13:28 -	LMT	1921 Nov 14
+			2:00	Cyprus	EE%sT	1998 Sep
+			2:00	EUAsia	EE%sT
+# IATA SSIM (1998-09) has Cyprus using EU rules for the first time.
+
+# Classically, Cyprus belongs to Asia; e.g. see Herodotus, Histories, I.72.
+# However, for various reasons many users expect to find it under Europe.
+Link	Asia/Nicosia	Europe/Nicosia
+
+# Georgia
+# From Paul Eggert (1994-11-19):
+# Today's _Economist_ (p 60) reports that Georgia moved its clocks forward
+# an hour recently, due to a law proposed by Zurab Murvanidze,
+# an MP who went on a hunger strike for 11 days to force discussion about it!
+# We have no details, but we'll guess they didn't move the clocks back in fall.
+#
+# From Mathew Englander, quoting AP (1996-10-23 13:05-04):
+# Instead of putting back clocks at the end of October, Georgia
+# will stay on daylight savings time this winter to save energy,
+# President Eduard Shevardnadze decreed Wednesday.
+#
+# From the BBC via Joseph S. Myers (2004-06-27):
+#
+# Georgia moved closer to Western Europe on Sunday...  The former Soviet
+# republic has changed its time zone back to that of Moscow.  As a result it
+# is now just four hours ahead of Greenwich Mean Time, rather than five hours
+# ahead.  The switch was decreed by the pro-Western president of Georgia,
+# Mikhail Saakashvili, who said the change was partly prompted by the process
+# of integration into Europe.
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Tbilisi	2:59:16 -	LMT	1880
+			2:59:16	-	TBMT	1924 May  2 # Tbilisi Mean Time
+			3:00	-	TBIT	1957 Mar    # Tbilisi Time
+			4:00 RussiaAsia TBI%sT	1991 Mar 31 2:00s
+			3:00	1:00	TBIST	1991 Apr  9 # independence
+			3:00 RussiaAsia GE%sT	1992 # Georgia Time
+			3:00 E-EurAsia	GE%sT	1994 Sep lastSun
+			4:00 E-EurAsia	GE%sT	1996 Oct lastSun
+			4:00	1:00	GEST	1997 Mar lastSun
+			4:00 E-EurAsia	GE%sT	2004 Jun 27
+			3:00 RussiaAsia	GE%sT
+
+# East Timor
+
+# From Joao Carrascalao, brother of the former governor of East Timor, in
+# <a href="http://etan.org/et99c/december/26-31/30ETMAY.htm">
+# East Timor may be late for its millennium
+# </a> (1999-12-26/31):
+# Portugal tried to change the time forward in 1974 because the sun
+# rises too early but the suggestion raised a lot of problems with the
+# Timorese and I still don't think it would work today because it
+# conflicts with their way of life.
+
+# From Paul Eggert (2000-12-04):
+# We don't have any record of the above attempt.
+# Most likely our records are incomplete, but we have no better data.
+
+# <a href="http://www.hri.org/news/world/undh/last/00-08-16.undh.html">
+# From Manoel de Almeida e Silva, Deputy Spokesman for the UN Secretary-General
+# (2000-08-16)</a>:
+# The Cabinet of the East Timor Transition Administration decided
+# today to advance East Timor's time by one hour.  The time change,
+# which will be permanent, with no seasonal adjustment, will happen at
+# midnight on Saturday, September 16.
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Dili	8:22:20 -	LMT	1912
+			8:00	-	TPT	1942 Feb 21 23:00 # E Timor Time
+			9:00	-	JST	1945 Aug
+			9:00	-	TPT	1976 May  3
+			8:00	-	CIT	2000 Sep 17 00:00
+			9:00	-	TPT
+
+# India
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Calcutta	5:53:28 -	LMT	1880	# Kolkata
+			5:53:20	-	HMT	1941 Oct    # Howrah Mean Time?
+			6:30	-	BURT	1942 May 15 # Burma Time
+			5:30	-	IST	1942 Sep
+			5:30	1:00	IST	1945 Oct 15
+			5:30	-	IST
+# The following are like Asia/Calcutta:
+#	Andaman Is
+#	Lakshadweep (Laccadive, Minicoy and Amindivi Is)
+#	Nicobar Is
+
+# Indonesia
+#
+# From Gwillim Law (2001-05-28), overriding Shanks:
+# <http://www.sumatera-inc.com/go_to_invest/about_indonesia.asp#standtime>
+# says that Indonesia's time zones changed on 1988-01-01.  Looking at some
+# time zone maps, I think that must refer to Western Borneo (Kalimantan Barat
+# and Kalimantan Tengah) switching from UTC+8 to UTC+7.
+#
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Asia/Jakarta	7:07:12 -	LMT	1867 Aug 10
+# Shanks says the next transition was at 1924 Jan 1 0:13,
+# but this must be a typo.
+			7:07:12	-	JMT	1923 Dec 31 23:47:12 # Jakarta
+			7:20	-	JAVT	1932 Nov	 # Java Time
+			7:30	-	WIT	1942 Mar 23
+			9:00	-	JST	1945 Aug
+			7:30	-	WIT	1948 May
+			8:00	-	WIT	1950 May
+			7:30	-	WIT	1964
+			7:00	-	WIT
+Zone Asia/Pontianak	7:17:20	-	LMT	1908 May
+			7:17:20	-	PMT	1932 Nov    # Pontianak MT
+			7:30	-	WIT	1942 Jan 29
+			9:00	-	JST	1945 Aug
+			7:30	-	WIT	1948 May
+			8:00	-	WIT	1950 May
+			7:30	-	WIT	1964
+			8:00	-	CIT	1988 Jan  1
+			7:00	-	WIT
+Zone Asia/Makassar	7:57:36 -	LMT	1920
+			7:57:36	-	MMT	1932 Nov    # Macassar MT
+			8:00	-	CIT	1942 Feb  9
+			9:00	-	JST	1945 Aug
+			8:00	-	CIT
+Zone Asia/Jayapura	9:22:48 -	LMT	1932 Nov
+			9:00	-	EIT	1944
+			9:30	-	CST	1964
+			9:00	-	EIT
+
+# Iran
+
+# From Roozbeh Pournader (2003-03-15):
+# This is an English translation of what I just found (originally in Persian).
+# The Gregorian dates in brackets are mine:
+#
+#	Official Newspaper No. 13548-1370/6/25 [1991-09-16]
+#	No. 16760/T233 H				1370/6/10 [1991-09-01]
+#
+#	The Rule About Change of the Official Time of the Country
+#
+#	The Board of Ministers, in the meeting dated 1370/5/23 [1991-08-14],
+#	based on the suggestion number 2221/D dated 1370/4/22 [1991-07-13]
+#	of the Country's Organization for Official and Employment Affairs,
+#	and referring to the law for equating the working hours of workers
+#	and officers in the whole country dated 1359/4/23 [1980-07-14], and
+#	for synchronizing the official times of the country, agreed that:
+#
+#	The official time of the country will should move forward one hour
+#	at the 24[:00] hours of the first day of Farvardin and should return
+#	to its previous state at the 24[:00] hours of the 30th day of
+#	Shahrivar.
+#
+#	First Deputy to the President - Hassan Habibi
+#
+# From personal experience, that agrees with what has been followed
+# for at least the last 5 years.  Before that, for a few years, the
+# date used was the first Thursday night of Farvardin and the last
+# Thursday night of Shahrivar, but I can't give exact dates....
+# I have also changed the abbreviations to what is considered correct
+# here in Iran, IRST for regular time and IRDT for daylight saving time.
+#
+# From Roozbeh Pournader (2005-04-05):
+# The text of the Iranian law, in effect since 1925, clearly mentions
+# that the true solar year is the measure, and there is no arithmetic
+# leap year calculation involved.  There has never been any serious
+# plan to change that law....
+#
+# From Paul Eggert (2005-04-05):
+# Go with Shanks before September 1991, and with Pournader thereafter.
+# I used Ed Reingold's cal-persia in GNU Emacs 21.2 to check Persian dates,
+# stopping after 2037 when 32-bit time_t's overflow.
+# That cal-persia used Birashk's approximation, which disagrees with the solar
+# calendar predictions for the year 2025, so I corrected those dates by hand.
+#
+# From Oscar van Vlijmen (2005-03-30), writing about future
+# discrepancies between cal-persia and the Iranian calendar:
+# For 2091 solar-longitude-after yields 2091-03-20 08:40:07.7 UT for
+# the vernal equinox and that gets so close to 12:00 some local
+# Iranian time that the definition of the correct location needs to be
+# known exactly, amongst other factors.  2157 is even closer:
+# 2157-03-20 08:37:15.5 UT.  But the Gregorian year 2025 should give
+# no interpretation problem whatsoever.  By the way, another instant
+# in the near future where there will be a discrepancy between
+# arithmetical and astronomical Iranian calendars will be in 2058:
+# vernal equinox on 2058-03-20 09:03:05.9 UT.  The Java version of
+# Reingold's/Dershowitz' calculator gives correctly the Gregorian date
+# 2058-03-21 for 1 Farvardin 1437 (astronomical).
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Iran	1978	1980	-	Mar	21	0:00	1:00	D
+Rule	Iran	1978	only	-	Oct	21	0:00	0	S
+Rule	Iran	1979	only	-	Sep	19	0:00	0	S
+Rule	Iran	1980	only	-	Sep	23	0:00	0	S
+Rule	Iran	1991	only	-	May	 3	0:00	1:00	D
+Rule	Iran	1992	1995	-	Mar	22	0:00	1:00	D
+Rule	Iran	1991	1995	-	Sep	22	0:00	0	S
+Rule	Iran	1996	only	-	Mar	21	0:00	1:00	D
+Rule	Iran	1996	only	-	Sep	21	0:00	0	S
+Rule	Iran	1997	1999	-	Mar	22	0:00	1:00	D
+Rule	Iran	1997	1999	-	Sep	22	0:00	0	S
+Rule	Iran	2000	only	-	Mar	21	0:00	1:00	D
+Rule	Iran	2000	only	-	Sep	21	0:00	0	S
+Rule	Iran	2001	2003	-	Mar	22	0:00	1:00	D
+Rule	Iran	2001	2003	-	Sep	22	0:00	0	S
+Rule	Iran	2004	only	-	Mar	21	0:00	1:00	D
+Rule	Iran	2004	only	-	Sep	21	0:00	0	S
+Rule	Iran	2005	2007	-	Mar	22	0:00	1:00	D
+Rule	Iran	2005	2007	-	Sep	22	0:00	0	S
+Rule	Iran	2008	only	-	Mar	21	0:00	1:00	D
+Rule	Iran	2008	only	-	Sep	21	0:00	0	S
+Rule	Iran	2009	2011	-	Mar	22	0:00	1:00	D
+Rule	Iran	2009	2011	-	Sep	22	0:00	0	S
+Rule	Iran	2012	only	-	Mar	21	0:00	1:00	D
+Rule	Iran	2012	only	-	Sep	21	0:00	0	S
+Rule	Iran	2013	2015	-	Mar	22	0:00	1:00	D
+Rule	Iran	2013	2015	-	Sep	22	0:00	0	S
+Rule	Iran	2016	only	-	Mar	21	0:00	1:00	D
+Rule	Iran	2016	only	-	Sep	21	0:00	0	S
+Rule	Iran	2017	2019	-	Mar	22	0:00	1:00	D
+Rule	Iran	2017	2019	-	Sep	22	0:00	0	S
+Rule	Iran	2020	only	-	Mar	21	0:00	1:00	D
+Rule	Iran	2020	only	-	Sep	21	0:00	0	S
+Rule	Iran	2021	2023	-	Mar	22	0:00	1:00	D
+Rule	Iran	2021	2023	-	Sep	22	0:00	0	S
+Rule	Iran	2024	only	-	Mar	21	0:00	1:00	D
+Rule	Iran	2024	only	-	Sep	21	0:00	0	S
+Rule	Iran	2025	2027	-	Mar	22	0:00	1:00	D
+Rule	Iran	2025	2027	-	Sep	22	0:00	0	S
+Rule	Iran	2028	2029	-	Mar	21	0:00	1:00	D
+Rule	Iran	2028	2029	-	Sep	21	0:00	0	S
+Rule	Iran	2030	2031	-	Mar	22	0:00	1:00	D
+Rule	Iran	2030	2031	-	Sep	22	0:00	0	S
+Rule	Iran	2032	2033	-	Mar	21	0:00	1:00	D
+Rule	Iran	2032	2033	-	Sep	21	0:00	0	S
+Rule	Iran	2034	2035	-	Mar	22	0:00	1:00	D
+Rule	Iran	2034	2035	-	Sep	22	0:00	0	S
+Rule	Iran	2036	2037	-	Mar	21	0:00	1:00	D
+Rule	Iran	2036	2037	-	Sep	21	0:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Tehran	3:25:44	-	LMT	1916
+			3:25:44	-	TMT	1946	# Tehran Mean Time
+			3:30	-	IRST	1977 Nov
+			4:00	Iran	IR%sT	1979
+			3:30	Iran	IR%sT
+
+
+# Iraq
+#
+# From Jonathan Lennox (2000-06-12):
+# An article in this week's Economist ("Inside the Saddam-free zone", p. 50 in
+# the U.S. edition) on the Iraqi Kurds contains a paragraph:
+# "The three northern provinces ... switched their clocks this spring and
+# are an hour ahead of Baghdad."
+#
+# But Rives McDow (2000-06-18) quotes a contact in Iraqi-Kurdistan as follows:
+# In the past, some Kurdish nationalists, as a protest to the Iraqi
+# Government, did not adhere to daylight saving time.  They referred
+# to daylight saving as Saddam time.  But, as of today, the time zone
+# in Iraqi-Kurdistan is on standard time with Baghdad, Iraq.
+#
+# So we'll ignore the Economist's claim.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Iraq	1982	only	-	May	1	0:00	1:00	D
+Rule	Iraq	1982	1984	-	Oct	1	0:00	0	S
+Rule	Iraq	1983	only	-	Mar	31	0:00	1:00	D
+Rule	Iraq	1984	1985	-	Apr	1	0:00	1:00	D
+Rule	Iraq	1985	1990	-	Sep	lastSun	1:00s	0	S
+Rule	Iraq	1986	1990	-	Mar	lastSun	1:00s	1:00	D
+# IATA SSIM (1991/1996) says Apr 1 12:01am UTC; guess the `:01' is a typo.
+# Shanks says Iraq did not observe DST 1992/1997 or 1999 on; ignore this.
+Rule	Iraq	1991	max	-	Apr	 1	3:00s	1:00	D
+Rule	Iraq	1991	max	-	Oct	 1	3:00s	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Baghdad	2:57:40	-	LMT	1890
+			2:57:36	-	BMT	1918	    # Baghdad Mean Time?
+			3:00	-	AST	1982 May
+			3:00	Iraq	A%sT
+
+
+###############################################################################
+
+# Israel
+
+# From Ephraim Silverberg (2001-01-11):
+#
+# I coined "IST/IDT" circa 1988.  Until then there were three
+# different abbreviations in use:
+#
+# JST  Jerusalem Standard Time [Danny Braniss, Hebrew University]
+# IZT  Israel Zonal (sic) Time [Prof. Haim Papo, Technion]
+# EEST Eastern Europe Standard Time [used by almost everyone else]
+#
+# Since timezones should be called by country and not capital cities,
+# I ruled out JST.  As Israel is in Asia Minor and not Eastern Europe,
+# EEST was equally unacceptable.  Since "zonal" was not compatible with
+# any other timezone abbreviation, I felt that 'IST' was the way to go
+# and, indeed, it has received almost universal acceptance in timezone
+# settings in Israeli computers.
+#
+# In any case, I am happy to share timezone abbreviations with India,
+# high on my favorite-country list (and not only because my wife's
+# family is from India).
+
+# From Shanks:
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Zion	1940	only	-	Jun	 1	0:00	1:00	D
+Rule	Zion	1942	1944	-	Nov	 1	0:00	0	S
+Rule	Zion	1943	only	-	Apr	 1	2:00	1:00	D
+Rule	Zion	1944	only	-	Apr	 1	0:00	1:00	D
+Rule	Zion	1945	only	-	Apr	16	0:00	1:00	D
+Rule	Zion	1945	only	-	Nov	 1	2:00	0	S
+Rule	Zion	1946	only	-	Apr	16	2:00	1:00	D
+Rule	Zion	1946	only	-	Nov	 1	0:00	0	S
+Rule	Zion	1948	only	-	May	23	0:00	2:00	DD
+Rule	Zion	1948	only	-	Sep	 1	0:00	1:00	D
+Rule	Zion	1948	1949	-	Nov	 1	2:00	0	S
+Rule	Zion	1949	only	-	May	 1	0:00	1:00	D
+Rule	Zion	1950	only	-	Apr	16	0:00	1:00	D
+Rule	Zion	1950	only	-	Sep	15	3:00	0	S
+Rule	Zion	1951	only	-	Apr	 1	0:00	1:00	D
+Rule	Zion	1951	only	-	Nov	11	3:00	0	S
+Rule	Zion	1952	only	-	Apr	20	2:00	1:00	D
+Rule	Zion	1952	only	-	Oct	19	3:00	0	S
+Rule	Zion	1953	only	-	Apr	12	2:00	1:00	D
+Rule	Zion	1953	only	-	Sep	13	3:00	0	S
+Rule	Zion	1954	only	-	Jun	13	0:00	1:00	D
+Rule	Zion	1954	only	-	Sep	12	0:00	0	S
+Rule	Zion	1955	only	-	Jun	11	2:00	1:00	D
+Rule	Zion	1955	only	-	Sep	11	0:00	0	S
+Rule	Zion	1956	only	-	Jun	 3	0:00	1:00	D
+Rule	Zion	1956	only	-	Sep	30	3:00	0	S
+Rule	Zion	1957	only	-	Apr	29	2:00	1:00	D
+Rule	Zion	1957	only	-	Sep	22	0:00	0	S
+Rule	Zion	1974	only	-	Jul	 7	0:00	1:00	D
+Rule	Zion	1974	only	-	Oct	13	0:00	0	S
+Rule	Zion	1975	only	-	Apr	20	0:00	1:00	D
+Rule	Zion	1975	only	-	Aug	31	0:00	0	S
+Rule	Zion	1985	only	-	Apr	14	0:00	1:00	D
+Rule	Zion	1985	only	-	Sep	15	0:00	0	S
+Rule	Zion	1986	only	-	May	18	0:00	1:00	D
+Rule	Zion	1986	only	-	Sep	 7	0:00	0	S
+Rule	Zion	1987	only	-	Apr	15	0:00	1:00	D
+Rule	Zion	1987	only	-	Sep	13	0:00	0	S
+Rule	Zion	1988	only	-	Apr	 9	0:00	1:00	D
+Rule	Zion	1988	only	-	Sep	 3	0:00	0	S
+
+# From Ephraim Silverberg
+# (1997-03-04, 1998-03-16, 1998-12-28, 2000-01-17, 2000-07-25, 2004-12-22,
+# and 2005-02-17):
+
+# According to the Office of the Secretary General of the Ministry of
+# Interior, there is NO set rule for Daylight-Savings/Standard time changes.
+# One thing is entrenched in law, however: that there must be at least 150
+# days of daylight savings time annually.  From 1993-1998, the change to
+# daylight savings time was on a Friday morning from midnight IST to
+# 1 a.m IDT; up until 1998, the change back to standard time was on a
+# Saturday night from midnight daylight savings time to 11 p.m. standard
+# time.  1996 is an exception to this rule where the change back to standard
+# time took place on Sunday night instead of Saturday night to avoid
+# conflicts with the Jewish New Year.  In 1999, the change to
+# daylight savings time was still on a Friday morning but from
+# 2 a.m. IST to 3 a.m. IDT; furthermore, the change back to standard time
+# was also on a Friday morning from 2 a.m. IDT to 1 a.m. IST for
+# 1999 only.  In the year 2000, the change to daylight savings time was
+# similar to 1999, but although the change back will be on a Friday, it
+# will take place from 1 a.m. IDT to midnight IST.  Starting in 2001, all
+# changes to/from will take place at 1 a.m. old time, but now there is no
+# rule as to what day of the week it will take place in as the start date
+# (except in 2003) is the night after the Passover Seder (i.e. the eve
+# of the 16th of Nisan in the lunar Hebrew calendar) and the end date
+# (except in 2002) is three nights before Yom Kippur [Day of Atonement]
+# (the eve of the 7th of Tishrei in the lunar Hebrew calendar).
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Zion	1989	only	-	Apr	30	0:00	1:00	D
+Rule	Zion	1989	only	-	Sep	 3	0:00	0	S
+Rule	Zion	1990	only	-	Mar	25	0:00	1:00	D
+Rule	Zion	1990	only	-	Aug	26	0:00	0	S
+Rule	Zion	1991	only	-	Mar	24	0:00	1:00	D
+Rule	Zion	1991	only	-	Sep	 1	0:00	0	S
+Rule	Zion	1992	only	-	Mar	29	0:00	1:00	D
+Rule	Zion	1992	only	-	Sep	 6	0:00	0	S
+Rule	Zion	1993	only	-	Apr	 2	0:00	1:00	D
+Rule	Zion	1993	only	-	Sep	 5	0:00	0	S
+
+# The dates for 1994-1995 were obtained from Office of the Spokeswoman for the
+# Ministry of Interior, Jerusalem, Israel.  The spokeswoman can be reached by
+# calling the office directly at 972-2-6701447 or 972-2-6701448.
+
+# Rule	NAME    FROM    TO      TYPE    IN      ON      AT      SAVE    LETTER/S
+Rule	Zion	1994	only	-	Apr	 1	0:00	1:00	D
+Rule	Zion	1994	only	-	Aug	28	0:00	0	S
+Rule	Zion	1995	only	-	Mar	31	0:00	1:00	D
+Rule	Zion	1995	only	-	Sep	 3	0:00	0	S
+
+# The dates for 1996 were determined by the Minister of Interior of the
+# time, Haim Ramon.  The official announcement regarding 1996-1998
+# (with the dates for 1997-1998 no longer being relevant) can be viewed at:
+#
+#   ftp://ftp.cs.huji.ac.il/pub/tz/announcements/1996-1998.ramon.ps.gz
+#
+# The dates for 1997-1998 were altered by his successor, Rabbi Eli Suissa.
+#
+# The official announcements for the years 1997-1999 can be viewed at:
+#
+#   ftp://ftp.cs.huji.ac.il/pub/tz/announcements/YYYY.ps.gz
+#
+#       where YYYY is the relevant year.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Zion	1996	only	-	Mar	15	0:00	1:00	D
+Rule	Zion	1996	only	-	Sep	16	0:00	0	S
+Rule	Zion	1997	only	-	Mar	21	0:00	1:00	D
+Rule	Zion	1997	only	-	Sep	14	0:00	0	S
+Rule	Zion	1998	only	-	Mar	20	0:00	1:00	D
+Rule	Zion	1998	only	-	Sep	 6	0:00	0	S
+Rule	Zion	1999	only	-	Apr	 2	2:00	1:00	D
+Rule	Zion	1999	only	-	Sep	 3	2:00	0	S
+
+# The Knesset Interior Committee has changed the dates for 2000 for
+# the third time in just over a year and have set new dates for the
+# years 2001-2004 as well.
+#
+# The official announcement for the start date of 2000 can be viewed at:
+#
+#	ftp://ftp.cs.huji.ac.il/pub/tz/announcements/2000-start.ps.gz
+#
+# The official announcement for the end date of 2000 and the dates
+# for the years 2001-2004 can be viewed at:
+#
+#	ftp://ftp.cs.huji.ac.il/pub/tz/announcements/2000-2004.ps.gz
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Zion	2000	only	-	Apr	14	2:00	1:00	D
+Rule	Zion	2000	only	-	Oct	 6	1:00	0	S
+Rule	Zion	2001	only	-	Apr	 9	1:00	1:00	D
+Rule	Zion	2001	only	-	Sep	24	1:00	0	S
+Rule	Zion	2002	only	-	Mar	29	1:00	1:00	D
+Rule	Zion	2002	only	-	Oct	 7	1:00	0	S
+Rule	Zion	2003	only	-	Mar	28	1:00	1:00	D
+Rule	Zion	2003	only	-	Oct	 3	1:00	0	S
+Rule	Zion	2004	only	-	Apr	 7	1:00	1:00	D
+Rule	Zion	2004	only	-	Sep	22	1:00	0	S
+
+# The proposed law agreed upon by the Knesset Interior Committee on
+# 2005-02-14 is that, for 2005 and beyond, DST starts at 02:00 the
+# last Friday before April 2nd (i.e. the last Friday in March or April
+# 1st itself if it falls on a Friday) and ends at 02:00 on the Saturday
+# night _before_ the fast of Yom Kippur.
+#
+# Those who can read Hebrew can view the announcement at:
+#
+#	ftp://ftp.cs.huji.ac.il/pub/tz/announcements/2005+beyond.ps
+
+# From Paul Eggert (2005-02-22):
+# I used Ephraim Silverberg's dst-israel.el program
+# <ftp://ftp.cs.huji.ac.il/pub/tz/software/dst-israel.el> (2005-02-20)
+# along with Ed Reingold's cal-hebrew in GNU Emacs 21.4,
+# to generate the transitions in this list.
+# (I replaced "lastFri" with "Fri>=26" by hand.)
+# The spring transitions below all correspond to the following Rule:
+#
+# Rule	Zion	2005	max	-	Mar	Fri>=26	2:00	1:00	D
+#
+# but older zic implementations (e.g., Solaris 8) do not support
+# "Fri>=26" to mean April 1 in years like 2005, so for now we list the
+# springtime transitions explicitly.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Zion	2005	only	-	Apr	 1	2:00	1:00	D
+Rule	Zion	2005	only	-	Oct	 9	2:00	0	S
+Rule	Zion	2006	2010	-	Mar	Fri>=26	2:00	1:00	D
+Rule	Zion	2006	only	-	Oct	 1	2:00	0	S
+Rule	Zion	2007	only	-	Sep	16	2:00	0	S
+Rule	Zion	2008	only	-	Oct	 5	2:00	0	S
+Rule	Zion	2009	only	-	Sep	27	2:00	0	S
+Rule	Zion	2010	only	-	Sep	12	2:00	0	S
+Rule	Zion	2011	only	-	Apr	 1	2:00	1:00	D
+Rule	Zion	2011	only	-	Oct	 2	2:00	0	S
+Rule	Zion	2012	2015	-	Mar	Fri>=26	2:00	1:00	D
+Rule	Zion	2012	only	-	Sep	23	2:00	0	S
+Rule	Zion	2013	only	-	Sep	 8	2:00	0	S
+Rule	Zion	2014	only	-	Sep	28	2:00	0	S
+Rule	Zion	2015	only	-	Sep	20	2:00	0	S
+Rule	Zion	2016	only	-	Apr	 1	2:00	1:00	D
+Rule	Zion	2016	only	-	Oct	 9	2:00	0	S
+Rule	Zion	2017	2021	-	Mar	Fri>=26	2:00	1:00	D
+Rule	Zion	2017	only	-	Sep	24	2:00	0	S
+Rule	Zion	2018	only	-	Sep	16	2:00	0	S
+Rule	Zion	2019	only	-	Oct	 6	2:00	0	S
+Rule	Zion	2020	only	-	Sep	27	2:00	0	S
+Rule	Zion	2021	only	-	Sep	12	2:00	0	S
+Rule	Zion	2022	only	-	Apr	 1	2:00	1:00	D
+Rule	Zion	2022	only	-	Oct	 2	2:00	0	S
+Rule	Zion	2023	2032	-	Mar	Fri>=26	2:00	1:00	D
+Rule	Zion	2023	only	-	Sep	24	2:00	0	S
+Rule	Zion	2024	only	-	Oct	 6	2:00	0	S
+Rule	Zion	2025	only	-	Sep	28	2:00	0	S
+Rule	Zion	2026	only	-	Sep	20	2:00	0	S
+Rule	Zion	2027	only	-	Oct	10	2:00	0	S
+Rule	Zion	2028	only	-	Sep	24	2:00	0	S
+Rule	Zion	2029	only	-	Sep	16	2:00	0	S
+Rule	Zion	2030	only	-	Oct	 6	2:00	0	S
+Rule	Zion	2031	only	-	Sep	21	2:00	0	S
+Rule	Zion	2032	only	-	Sep	12	2:00	0	S
+Rule	Zion	2033	only	-	Apr	 1	2:00	1:00	D
+Rule	Zion	2033	only	-	Oct	 2	2:00	0	S
+Rule	Zion	2034	2037	-	Mar	Fri>=26	2:00	1:00	D
+Rule	Zion	2034	only	-	Sep	17	2:00	0	S
+Rule	Zion	2035	only	-	Oct	 7	2:00	0	S
+Rule	Zion	2036	only	-	Sep	28	2:00	0	S
+Rule	Zion	2037	only	-	Sep	13	2:00	0	S
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Jerusalem	2:20:56 -	LMT	1880
+			2:20:40	-	JMT	1918	# Jerusalem Mean Time?
+			2:00	Zion	I%sT
+
+
+
+###############################################################################
+
+# Japan
+
+# `9:00' and `JST' is from Guy Harris.
+
+# From Paul Eggert (1995-03-06):
+# Today's _Asahi Evening News_ (page 4) reports that Japan had
+# daylight saving between 1948 and 1951, but ``the system was discontinued
+# because the public believed it would lead to longer working hours.''
+# Shanks writes that daylight saving in Japan during those years was as follows:
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+#Rule	Japan	1948	only	-	May	Sun>=1	2:00	1:00	D
+#Rule	Japan	1948	1951	-	Sep	Sat>=8	2:00	0	S
+#Rule	Japan	1949	only	-	Apr	Sun>=1	2:00	1:00	D
+#Rule	Japan	1950	1951	-	May	Sun>=1	2:00	1:00	D
+# but the only locations using it were US military bases.
+# We go with Shanks and omit daylight saving in those years for Asia/Tokyo.
+
+# From Hideyuki Suzuki (1998-11-09):
+# 'Tokyo' usually stands for the former location of Tokyo Astronomical
+# Observatory: E 139 44' 40".90 (9h 18m 58s.727), N 35 39' 16".0.
+# This data is from 'Rika Nenpyou (Chronological Scientific Tables) 1996'
+# edited by National Astronomical Observatory of Japan....
+# JST (Japan Standard Time) has been used since 1888-01-01 00:00 (JST).
+# The law is enacted on 1886-07-07.
+
+# From Hideyuki Suzuki (1998-11-16):
+# The ordinance No. 51 (1886) established "standard time" in Japan,
+# which stands for the time on E 135 degree.
+# In the ordinance No. 167 (1895), "standard time" was renamed to "central
+# standard time".  And the same ordinance also established "western standard
+# time", which stands for the time on E 120 degree....  But "western standard
+# time" was abolished in the ordinance No. 529 (1937).  In the ordinance No.
+# 167, there is no mention regarding for what place western standard time is
+# standard....
+#
+# I wrote "ordinance" above, but I don't know how to translate.
+# In Japanese it's "chokurei", which means ordinance from emperor.
+
+# Shanks claims JST in use since 1896, and that a few places (e.g. Ishigaki)
+# use +0800; go with Suzuki.  Guess that all ordinances took effect on Jan 1.
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Tokyo	9:18:59	-	LMT	1887 Dec 31 15:00u
+			9:00	-	JST	1896
+			9:00	-	CJT	1938
+			9:00	-	JST
+# Since 1938, all Japanese possessions have been like Asia/Tokyo.
+
+# Jordan
+#
+# From <a href="http://star.arabia.com/990701/JO9.html">
+# Jordan Week (1999-07-01) </a> via Steffen Thorsen (1999-09-09):
+# Clocks in Jordan were forwarded one hour on Wednesday at midnight,
+# in accordance with the government's decision to implement summer time
+# all year round.
+#
+# From <a href="http://star.arabia.com/990930/JO9.html">
+# Jordan Week (1999-09-30) </a> via Steffen Thorsen (1999-11-09):
+# Winter time starts today Thursday, 30 September. Clocks will be turned back
+# by one hour.  This is the latest government decision and it's final!
+# The decision was taken because of the increase in working hours in
+# government's departments from six to seven hours.
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Jordan	1973	only	-	Jun	6	0:00	1:00	S
+Rule	Jordan	1973	1975	-	Oct	1	0:00	0	-
+Rule	Jordan	1974	1977	-	May	1	0:00	1:00	S
+Rule	Jordan	1976	only	-	Nov	1	0:00	0	-
+Rule	Jordan	1977	only	-	Oct	1	0:00	0	-
+Rule	Jordan	1978	only	-	Apr	30	0:00	1:00	S
+Rule	Jordan	1978	only	-	Sep	30	0:00	0	-
+Rule	Jordan	1985	only	-	Apr	1	0:00	1:00	S
+Rule	Jordan	1985	only	-	Oct	1	0:00	0	-
+Rule	Jordan	1986	1988	-	Apr	Fri>=1	0:00	1:00	S
+Rule	Jordan	1986	1990	-	Oct	Fri>=1	0:00	0	-
+Rule	Jordan	1989	only	-	May	8	0:00	1:00	S
+Rule	Jordan	1990	only	-	Apr	27	0:00	1:00	S
+Rule	Jordan	1991	only	-	Apr	17	0:00	1:00	S
+Rule	Jordan	1991	only	-	Sep	27	0:00	0	-
+Rule	Jordan	1992	only	-	Apr	10	0:00	1:00	S
+Rule	Jordan	1992	1993	-	Oct	Fri>=1	0:00	0	-
+Rule	Jordan	1993	1998	-	Apr	Fri>=1	0:00	1:00	S
+Rule	Jordan	1994	only	-	Sep	Fri>=15	0:00	0	-
+Rule	Jordan	1995	1998	-	Sep	Fri>=15	0:00s	0	-
+Rule	Jordan	1999	only	-	Jul	 1	0:00s	1:00	S
+Rule	Jordan	1999	max	-	Sep	lastThu	0:00s	0	-
+Rule	Jordan	2000	max	-	Mar	lastThu	0:00s	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Amman	2:23:44 -	LMT	1931
+			2:00	Jordan	EE%sT
+
+# Kazakhstan
+# From Paul Eggert (1996-11-22):
+# Andrew Evtichov (1996-04-13) writes that Kazakhstan
+# stayed in sync with Moscow after 1990, and that Aqtobe (formerly Aktyubinsk)
+# and Aqtau (formerly Shevchenko) are the largest cities in their zones.
+# Guess that Aqtau and Aqtobe diverged in 1995, since that's the first time
+# IATA SSIM mentions a third time zone in Kazakhstan.
+#
+# From Paul Eggert (2001-10-18):
+# German Iofis, ELSI, Almaty (2001-10-09) reports that Kazakhstan uses
+# RussiaAsia rules, instead of switching at 00:00 as the IATA has it.
+# Go with Shanks, who has them always using RussiaAsia rules.
+# Also go with the following claims of Shanks:
+#
+# - Kazakhstan did not observe DST in 1991.
+# - Qyzylorda switched from +5:00 to +6:00 on 1992-01-19 02:00.
+# - Oral switched from +5:00 to +4:00 in spring 1989.
+#
+# <a href="http://www.kazsociety.org.uk/news/2005/03/30.htm">
+# From Kazakhstan Embassy's News Bulletin #11 (2005-03-21):
+# </a>
+# The Government of Kazakhstan passed a resolution March 15 abolishing
+# daylight saving time citing lack of economic benefits and health
+# complications coupled with a decrease in productivity.
+#
+#
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+#
+# Almaty (formerly Alma-Ata), representing most locations in Kazakhstan
+Zone	Asia/Almaty	5:07:48 -	LMT	1924 May  2 # or Alma-Ata
+			5:00	-	ALMT	1930 Jun 21 # Alma-Ata Time
+			6:00 RussiaAsia ALM%sT	1991
+			6:00	-	ALMT	1992
+			6:00 RussiaAsia	ALM%sT	2005 Mar 15
+			6:00	-	ALMT
+# Qyzylorda (aka Kyzylorda, Kizilorda, Kzyl-Orda, etc.)
+Zone	Asia/Qyzylorda	4:21:52 -	LMT	1924 May  2
+			4:00	-	KIZT	1930 Jun 21 # Kizilorda Time
+			5:00	-	KIZT	1981 Apr  1
+			5:00	1:00	KIZST	1981 Oct  1
+			6:00	-	KIZT	1982 Apr  1
+			5:00 RussiaAsia	KIZ%sT	1991
+			5:00	-	KIZT	1991 Dec 16 # independence
+			5:00	-	QYZT	1992 Jan 19 2:00
+			6:00 RussiaAsia	QYZ%sT	2005 Mar 15
+			6:00	-	QYZT
+# Aqtobe (aka Aktobe, formerly Akt'ubinsk)
+Zone	Asia/Aqtobe	3:48:40	-	LMT	1924 May  2
+			4:00	-	AKTT	1930 Jun 21 # Aktyubinsk Time
+			5:00	-	AKTT	1981 Apr  1
+			5:00	1:00	AKTST	1981 Oct  1
+			6:00	-	AKTT	1982 Apr  1
+			5:00 RussiaAsia	AKT%sT	1991
+			5:00	-	AKTT	1991 Dec 16 # independence
+			5:00 RussiaAsia	AQT%sT	2005 Mar 15 # Aqtobe Time
+			5:00	-	AQTT
+# Mangghystau
+# Aqtau was not founded until 1963, but it represents an inhabited region,
+# so include time stamps before 1963.
+Zone	Asia/Aqtau	3:21:04	-	LMT	1924 May  2
+			4:00	-	FORT	1930 Jun 21 # Fort Shevchenko T
+			5:00	-	FORT	1963
+			5:00	-	SHET	1981 Oct  1 # Shevchenko Time
+			6:00	-	SHET	1982 Apr  1
+			5:00 RussiaAsia	SHE%sT	1991
+			5:00	-	SHET	1991 Dec 16 # independence
+			5:00 RussiaAsia	AQT%sT	1995 Mar lastSun 2:00 # Aqtau Time
+			4:00 RussiaAsia	AQT%sT	2005 Mar 15
+			4:00	-	AQTT
+# West Kazakhstan
+Zone	Asia/Oral	3:25:24	-	LMT	1924 May  2 # or Ural'sk
+			4:00	-	URAT	1930 Jun 21 # Ural'sk time
+			5:00	-	URAT	1981 Apr  1
+			5:00	1:00	URAST	1981 Oct  1
+			6:00	-	URAT	1982 Apr  1
+			5:00 RussiaAsia	URA%sT	1989 Mar 26 2:00
+			4:00 RussiaAsia	URA%sT	1991
+			4:00	-	URAT	1991 Dec 16 # independence
+			4:00 RussiaAsia	ORA%sT	2005 Mar 15 # Oral Time
+			4:00	-	ORAT
+
+# Kyrgyzstan (Kirgizstan)
+# Transitions through 1991 are from Shanks.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Kirgiz	1992	1996	-	Apr	Sun>=7	0:00s	1:00	S
+Rule	Kirgiz	1992	1996	-	Sep	lastSun	0:00	0	-
+Rule	Kirgiz	1997	max	-	Mar	lastSun	2:30	1:00	S
+Rule	Kirgiz	1997	max	-	Oct	lastSun	2:30	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Bishkek	4:58:24 -	LMT	1924 May  2
+			5:00	-	FRUT	1930 Jun 21 # Frunze Time
+			6:00 RussiaAsia FRU%sT	1991 Mar 31 2:00s
+			5:00	1:00	FRUST	1991 Aug 31 2:00 # independence
+			5:00	Kirgiz	KG%sT		    # Kirgizstan Time
+
+###############################################################################
+
+# Korea (North and South)
+
+# From Guy Harris:
+# According to someone at the Korean Times in San Francisco,
+# Daylight Savings Time was not observed until 1987.  He did not know
+# at what time of day DST starts or ends.
+
+# From Shanks:
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	ROK	1960	only	-	May	15	0:00	1:00	D
+Rule	ROK	1960	only	-	Sep	13	0:00	0	S
+Rule	ROK	1987	1988	-	May	Sun<=14	0:00	1:00	D
+Rule	ROK	1987	1988	-	Oct	Sun<=14	0:00	0	S
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Seoul	8:27:52	-	LMT	1890
+			8:30	-	KST	1904 Dec
+			9:00	-	KST	1928
+			8:30	-	KST	1932
+			9:00	-	KST	1954 Mar 21
+			8:00	ROK	K%sT	1961 Aug 10
+			8:30	-	KST	1968 Oct
+			9:00	ROK	K%sT
+Zone	Asia/Pyongyang	8:23:00 -	LMT	1890
+			8:30	-	KST	1904 Dec
+			9:00	-	KST	1928
+			8:30	-	KST	1932
+			9:00	-	KST	1954 Mar 21
+			8:00	-	KST	1961 Aug 10
+			9:00	-	KST
+
+###############################################################################
+
+# Kuwait
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Kuwait	3:11:56 -	LMT	1950
+			3:00	-	AST
+
+# Laos
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Vientiane	6:50:24 -	LMT	1906 Jun  9 # or Viangchan
+			7:06:20	-	SMT	1911 Mar 11 0:01 # Saigon MT?
+			7:00	-	ICT	1912 May
+			8:00	-	ICT	1931 May
+			7:00	-	ICT
+
+# Lebanon
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Lebanon	1920	only	-	Mar	28	0:00	1:00	S
+Rule	Lebanon	1920	only	-	Oct	25	0:00	0	-
+Rule	Lebanon	1921	only	-	Apr	3	0:00	1:00	S
+Rule	Lebanon	1921	only	-	Oct	3	0:00	0	-
+Rule	Lebanon	1922	only	-	Mar	26	0:00	1:00	S
+Rule	Lebanon	1922	only	-	Oct	8	0:00	0	-
+Rule	Lebanon	1923	only	-	Apr	22	0:00	1:00	S
+Rule	Lebanon	1923	only	-	Sep	16	0:00	0	-
+Rule	Lebanon	1957	1961	-	May	1	0:00	1:00	S
+Rule	Lebanon	1957	1961	-	Oct	1	0:00	0	-
+Rule	Lebanon	1972	only	-	Jun	22	0:00	1:00	S
+Rule	Lebanon	1972	1977	-	Oct	1	0:00	0	-
+Rule	Lebanon	1973	1977	-	May	1	0:00	1:00	S
+Rule	Lebanon	1978	only	-	Apr	30	0:00	1:00	S
+Rule	Lebanon	1978	only	-	Sep	30	0:00	0	-
+Rule	Lebanon	1984	1987	-	May	1	0:00	1:00	S
+Rule	Lebanon	1984	1991	-	Oct	16	0:00	0	-
+Rule	Lebanon	1988	only	-	Jun	1	0:00	1:00	S
+Rule	Lebanon	1989	only	-	May	10	0:00	1:00	S
+Rule	Lebanon	1990	1992	-	May	1	0:00	1:00	S
+Rule	Lebanon	1992	only	-	Oct	4	0:00	0	-
+Rule	Lebanon	1993	max	-	Mar	lastSun	0:00	1:00	S
+Rule	Lebanon	1993	1998	-	Sep	lastSun	0:00	0	-
+Rule	Lebanon	1999	max	-	Oct	lastSun	0:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Beirut	2:22:00 -	LMT	1880
+			2:00	Lebanon	EE%sT
+
+# Malaysia
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	NBorneo	1935	1941	-	Sep	14	0:00	0:20	TS # one-Third Summer
+Rule	NBorneo	1935	1941	-	Dec	14	0:00	0	-
+#
+# peninsular Malaysia
+# The data here are taken from Mok Ly Yng (2003-10-30)
+# <http://www.math.nus.edu.sg/aslaksen/teaching/timezone.html>.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Asia/Kuala_Lumpur	6:46:46 -	LMT	1901 Jan  1
+			6:55:25	-	SMT	1905 Jun  1 # Singapore M.T.
+			7:00	-	MALT	1933 Jan  1 # Malaya Time
+			7:00	0:20	MALST	1936 Jan  1
+			7:20	-	MALT	1941 Sep  1
+			7:30	-	MALT	1942 Feb 16
+			9:00	-	JST	1945 Sep 12
+			7:30	-	MALT	1982 Jan  1
+			8:00	-	MYT	# Malaysia Time
+# Sabah & Sarawak
+# From Paul Eggert (2003-11-01):
+# The data here are mostly from Shanks, but the 1942, 1945 and 1982
+# transition dates are from Mok Ly Yng.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Asia/Kuching	7:21:20	-	LMT	1926 Mar
+			7:30	-	BORT	1933	# Borneo Time
+			8:00	NBorneo	BOR%sT	1942 Feb 16
+			9:00	-	JST	1945 Sep 12
+			8:00	-	BORT	1982 Jan  1
+			8:00	-	MYT
+
+# Maldives
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Indian/Maldives	4:54:00 -	LMT	1880	# Male
+			4:54:00	-	MMT	1960	# Male Mean Time
+			5:00	-	MVT		# Maldives Time
+
+# Mongolia
+
+# Shanks says that Mongolia has three time zones, but usno1995 and the CIA map
+# Standard Time Zones of the World (1997-01)
+# both say that it has just one.
+
+# From Oscar van Vlijmen (1999-12-11):
+# <a href="http://www.mongoliatourism.gov.mn/general.htm">
+# General Information Mongolia
+# </a> (1999-09)
+# "Time: Mongolia has two time zones. Three westernmost provinces of
+# Bayan-Ulgii, Uvs, and Hovd are one hour earlier than the capital city, and
+# the rest of the country follows the Ulaanbaatar time, which is UTC/GMT plus
+# eight hours."
+
+# From Rives McDow (1999-12-13):
+# Mongolia discontinued the use of daylight savings time in 1999; 1998
+# being the last year it was implemented.  The dates of implementation I am
+# unsure of, but most probably it was similar to Russia, except for the time
+# of implementation may have been different....
+# Some maps in the past have indicated that there was an additional time
+# zone in the eastern part of Mongolia, including the provinces of Dornod,
+# Suhbaatar, and possibly Khentij.
+
+# From Paul Eggert (1999-12-15):
+# Naming and spelling is tricky in Mongolia.
+# We'll use Hovd (also spelled Chovd and Khovd) to represent the west zone;
+# the capital of the Hovd province is sometimes called Hovd, sometimes Dund-Us,
+# and sometimes Jirgalanta (with variant spellings), but the name Hovd
+# is good enough for our purposes.
+
+# From Rives McDow (2001-05-13):
+# In addition to Mongolia starting daylight savings as reported earlier
+# (adopted DST on 2001-04-27 02:00 local time, ending 2001-09-28),
+# there are three time zones.
+#
+# Provinces [at 7:00]: Bayan-ulgii, Uvs, Khovd, Zavkhan, Govi-Altai
+# Provinces [at 8:00]: Khovsgol, Bulgan, Arkhangai, Khentii, Tov,
+#	Bayankhongor, Ovorkhangai, Dundgovi, Dornogovi, Omnogovi
+# Provinces [at 9:00]: Dornod, Sukhbaatar
+#
+# [The province of Selenge is omitted from the above lists.]
+
+# From Ganbold Ts., Ulaanbaatar (2004-04-17):
+# Daylight saving occurs at 02:00 local time last Saturday of March.
+# It will change back to normal at 02:00 local time last Saturday of
+# September.... As I remember this rule was changed in 2001.
+#
+# From Paul Eggert (2004-04-17):
+# For now, assume Rives McDow's informant got confused about Friday vs
+# Saturday, and that his 2001 dates should have 1 added to them.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Mongol	1983	1984	-	Apr	1	0:00	1:00	S
+Rule	Mongol	1983	only	-	Oct	1	0:00	0	-
+# IATA SSIM says 1990s switches occurred at 00:00, but Shanks (1995) lists
+# them at 02:00s, and McDow says the 2001 switches also occurred at 02:00.
+# Also, IATA SSIM (1996-09) says 1996-10-25.  Go with Shanks through 1998.
+Rule	Mongol	1985	1998	-	Mar	lastSun	2:00s	1:00	S
+Rule	Mongol	1984	1998	-	Sep	lastSun	2:00s	0	-
+# IATA SSIM (1999-09) says Mongolia no longer observes DST.
+Rule	Mongol	2001	only	-	Apr	lastSat	2:00	1:00	S
+Rule	Mongol	2001	max	-	Sep	lastSat	2:00	0	-
+Rule	Mongol	2002	max	-	Mar	lastSat	2:00	1:00	S
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+# Hovd, a.k.a. Chovd, Dund-Us, Dzhargalant, Khovd, Jirgalanta
+Zone	Asia/Hovd	6:06:36 -	LMT	1905 Aug
+			6:00	-	HOVT	1978	# Hovd Time
+			7:00	Mongol	HOV%sT
+# Ulaanbaatar, a.k.a. Ulan Bataar, Ulan Bator, Urga
+Zone	Asia/Ulaanbaatar 7:07:32 -	LMT	1905 Aug
+			7:00	-	ULAT	1978	# Ulaanbaatar Time
+			8:00	Mongol	ULA%sT
+# Choibalsan, a.k.a. Bajan Tuemen, Bajan Tumen, Chojbalsan,
+# Choybalsan, Sanbejse, Tchoibalsan
+Zone	Asia/Choibalsan	7:38:00 -	LMT	1905 Aug
+			7:00	-	ULAT	1978
+			8:00	-	ULAT	1983 Apr
+			9:00	Mongol	CHO%sT	# Choibalsan Time
+
+# Nepal
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Katmandu	5:41:16 -	LMT	1920
+			5:30	-	IST	1986
+			5:45	-	NPT	# Nepal Time
+
+# Oman
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Muscat	3:54:20 -	LMT	1920
+			4:00	-	GST
+
+# Pakistan
+
+# From Rives McDow (2002-03-13):
+# I have been advised that Pakistan has decided to adopt dst on a
+# TRIAL basis for one year, starting 00:01 local time on April 7, 2002
+# and ending at 00:01 local time October 6, 2002.  This is what I was
+# told, but I believe that the actual time of change may be 00:00; the
+# 00:01 was to make it clear which day it was on.
+
+# From Paul Eggert (2002-03-15):
+# Jesper Norgaard found this URL:
+# http://www.pak.gov.pk/public/news/app/app06_dec.htm
+# (dated 2001-12-06) which says that the Cabinet adopted a scheme "to
+# advance the clocks by one hour on the night between the first
+# Saturday and Sunday of April and revert to the original position on
+# 15th October each year".  This agrees with McDow's 04-07 at 00:00,
+# but disagrees about the October transition, and makes it sound like
+# it's not on a trial basis.  Also, the "between the first Saturday
+# and Sunday of April" phrase, if taken literally, means that the
+# transition takes place at 00:00 on the first Sunday on or after 04-02.
+
+# From Paul Eggert (2003-02-09):
+# DAWN <http://www.dawn.com/2002/10/06/top13.htm> reported on 2002-10-05
+# that 2002 DST ended that day at midnight.  Go with McDow for now.
+
+# From Steffen Thorsen (2003-03-14):
+# According to http://www.dawn.com/2003/03/07/top15.htm
+# there will be no DST in Pakistan this year:
+#
+# ISLAMABAD, March 6: Information and Media Development Minister Sheikh
+# Rashid Ahmed on Thursday said the cabinet had reversed a previous
+# decision to advance clocks by one hour in summer and put them back by
+# one hour in winter with the aim of saving light hours and energy.
+#
+# The minister told a news conference that the experiment had rather
+# shown 8 per cent higher consumption of electricity.
+
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule Pakistan	2002	only	-	Apr	Sun>=2	0:01	1:00	S
+Rule Pakistan	2002	only	-	Oct	Sun>=2	0:01	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Karachi	4:28:12 -	LMT	1907
+			5:30	-	IST	1942 Sep
+			5:30	1:00	IST	1945 Oct 15
+			5:30	-	IST	1951 Sep 30
+			5:00	-	KART	1971 Mar 26 # Karachi Time
+			5:00 Pakistan	PK%sT	# Pakistan Time
+
+# Palestine
+
+# From Amos Shapir (1998-02-15):
+#
+# From 1917 until 1948-05-15, all of Palestine, including the parts now
+# known as the Gaza Strip and the West Bank, was under British rule.
+# Therefore the rules given for Israel for that period, apply there too...
+#
+# The Gaza Strip was under Egyptian rule between 1948-05-15 until 1967-06-05
+# (except a short occupation by Israel from 1956-11 till 1957-03, but no
+# time zone was affected then).  It was never formally annexed to Egypt,
+# though.
+#
+# The rest of Palestine was under Jordanian rule at that time, formally
+# annexed in 1950 as the West Bank (and the word "Trans" was dropped from
+# the country's previous name of "the Hashemite Kingdom of the
+# Trans-Jordan").  So the rules for Jordan for that time apply.  Major
+# towns in that area are Nablus (Shchem), El-Halil (Hebron), Ramallah, and
+# East Jerusalem.
+#
+# Both areas were occupied by Israel in June 1967, but not annexed (except
+# for East Jerusalem).  They were on Israel time since then; there might
+# have been a Military Governor's order about time zones, but I'm not aware
+# of any (such orders may have been issued semi-annually whenever summer
+# time was in effect, but maybe the legal aspect of time was just neglected).
+#
+# The Palestinian Authority was established in 1993, and got hold of most
+# towns in the West Bank and Gaza by 1995.  I know that in order to
+# demonstrate...independence, they have been switching to
+# summer time and back on a different schedule than Israel's, but I don't
+# know when this was started, or what algorithm is used (most likely the
+# Jordanian one).
+#
+# To summarize, the table should probably look something like that:
+#
+# Area \ when | 1918-1947 | 1948-1967 | 1967-1995 | 1996-
+# ------------+-----------+-----------+-----------+-----------
+# Israel      | Zion      | Zion      | Zion      | Zion
+# West bank   | Zion      | Jordan    | Zion      | Jordan
+# Gaza        | Zion      | Egypt     | Zion      | Jordan
+#
+# I guess more info may be available from the PA's web page (if/when they
+# have one).
+
+# From Paul Eggert (1998-02-25):
+# Shanks writes that Gaza did not observe DST until 1957, but we'll go
+# with Shapir and assume that it observed DST from 1940 through 1947,
+# and that it used Jordanian rules starting in 1996.
+# We don't yet need a separate entry for the West Bank, since
+# the only differences between it and Gaza that we know about
+# occurred before our cutoff date of 1970.
+# However, as we get more information, we may need to add entries
+# for parts of the West Bank as they transitioned from Israel's rules
+# to Palestine's rules.  If you have more info about this, please
+# send it to tz@elsie.nci.nih.gov for incorporation into future editions.
+
+# From IINS News Service - Israel - 1998-03-23 10:38:07 Israel time,
+# forwarded by Ephraim Silverberg:
+#
+# Despite the fact that Israel changed over to daylight savings time
+# last week, the PLO Authority (PA) has decided not to turn its clocks
+# one-hour forward at this time.  As a sign of independence from Israeli rule,
+# the PA has decided to implement DST in April.
+
+# From Paul Eggert (1999-09-20):
+# Daoud Kuttab writes in
+# <a href="http://www.jpost.com/com/Archive/22.Apr.1999/Opinion/Article-2.html">
+# Holiday havoc
+# </a> (Jerusalem Post, 1999-04-22) that
+# the Palestinian National Authority changed to DST on 1999-04-15.
+# I vaguely recall that they switch back in October (sorry, forgot the source).
+# For now, let's assume that the spring switch was at 24:00,
+# and that they switch at 0:00 on the 3rd Fridays of April and October.
+
+# The rules for Egypt are stolen from the `africa' file.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule EgyptAsia	1957	only	-	May	10	0:00	1:00	S
+Rule EgyptAsia	1957	1958	-	Oct	 1	0:00	0	-
+Rule EgyptAsia	1958	only	-	May	 1	0:00	1:00	S
+Rule EgyptAsia	1959	1967	-	May	 1	1:00	1:00	S
+Rule EgyptAsia	1959	1965	-	Sep	30	3:00	0	-
+Rule EgyptAsia	1966	only	-	Oct	 1	3:00	0	-
+
+Rule Palestine	1999	max	-	Apr	Fri>=15	0:00	1:00	S
+Rule Palestine	1999	max	-	Oct	Fri>=15	0:00	0	-
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Gaza	2:17:52	-	LMT	1900 Oct
+			2:00	Zion	EET	1948 May 15
+			2:00 EgyptAsia	EE%sT	1967 Jun  5
+			2:00	Zion	I%sT	1996
+			2:00	Jordan	EE%sT	1999
+			2:00 Palestine	EE%sT
+
+# Paracel Is
+# no information
+
+# Philippines
+# On 1844-08-16, Narciso Claveria, governor-general of the
+# Philippines, issued a proclamation announcing that 1844-12-30 was to
+# be immediately followed by 1845-01-01.  Robert H. van Gent has a
+# transcript of the decree in <http://www.phys.uu.nl/~vgent/idl/idl.htm>.
+# The rest of this data is from Shanks.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Phil	1936	only	-	Nov	1	0:00	1:00	S
+Rule	Phil	1937	only	-	Feb	1	0:00	0	-
+Rule	Phil	1954	only	-	Apr	12	0:00	1:00	S
+Rule	Phil	1954	only	-	Jul	1	0:00	0	-
+Rule	Phil	1978	only	-	Mar	22	0:00	1:00	S
+Rule	Phil	1978	only	-	Sep	21	0:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Manila	-15:56:00 -	LMT	1844 Dec 31
+			8:04:00 -	LMT	1899 May 11
+			8:00	Phil	PH%sT	1942 May
+			9:00	-	JST	1944 Nov
+			8:00	Phil	PH%sT
+
+# Qatar
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Qatar	3:26:08 -	LMT	1920	# Al Dawhah / Doha
+			4:00	-	GST	1972 Jun
+			3:00	-	AST
+
+# Saudi Arabia
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Riyadh	3:06:52 -	LMT	1950
+			3:00	-	AST
+
+# Singapore
+# The data here are taken from Mok Ly Yng (2003-10-30)
+# <http://www.math.nus.edu.sg/aslaksen/teaching/timezone.html>.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Singapore	6:55:25 -	LMT	1901 Jan  1
+			6:55:25	-	SMT	1905 Jun  1 # Singapore M.T.
+			7:00	-	MALT	1933 Jan  1 # Malaya Time
+			7:00	0:20	MALST	1936 Jan  1
+			7:20	-	MALT	1941 Sep  1
+			7:30	-	MALT	1942 Feb 16
+			9:00	-	JST	1945 Sep 12
+			7:30	-	MALT	1965 Aug  9 # independence
+			7:30	-	SGT	1982 Jan  1 # Singapore Time
+			8:00	-	SGT
+
+# Spratly Is
+# no information
+
+# Sri Lanka
+# From Paul Eggert (1996-09-03):
+# "Sri Lanka advances clock by an hour to avoid blackout"
+# (www.virtual-pc.com/lankaweb/news/items/240596-2.html, 1996-05-24,
+# no longer available as of 1999-08-17)
+# reported ``the country's standard time will be put forward by one hour at
+# midnight Friday (1830 GMT) `in the light of the present power crisis'.''
+#
+# From Dharmasiri Senanayake, Sri Lanka Media Minister (1996-10-24), as quoted
+# by Shamindra in
+# <a href="news:54rka5$m5h@mtinsc01-mgt.ops.worldnet.att.net">
+# Daily News - Hot News Section (1996-10-26)
+# </a>:
+# With effect from 12.30 a.m. on 26th October 1996
+# Sri Lanka will be six (06) hours ahead of GMT.
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Colombo	5:19:24 -	LMT	1880
+			5:19:32	-	MMT	1906	# Moratuwa Mean Time
+			5:30	-	IST	1942 Jan  5
+			5:30	0:30	IHST	1942 Sep
+			5:30	1:00	IST	1945 Oct 16 2:00
+			5:30	-	IST	1996 May 25 0:00
+			6:30	-	LKT	1996 Oct 26 0:30
+			6:00	-	LKT
+
+# Syria
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Syria	1920	1923	-	Apr	Sun>=15	2:00	1:00	S
+Rule	Syria	1920	1923	-	Oct	Sun>=1	2:00	0	-
+Rule	Syria	1962	only	-	Apr	29	2:00	1:00	S
+Rule	Syria	1962	only	-	Oct	1	2:00	0	-
+Rule	Syria	1963	1965	-	May	1	2:00	1:00	S
+Rule	Syria	1963	only	-	Sep	30	2:00	0	-
+Rule	Syria	1964	only	-	Oct	1	2:00	0	-
+Rule	Syria	1965	only	-	Sep	30	2:00	0	-
+Rule	Syria	1966	only	-	Apr	24	2:00	1:00	S
+Rule	Syria	1966	1976	-	Oct	1	2:00	0	-
+Rule	Syria	1967	1978	-	May	1	2:00	1:00	S
+Rule	Syria	1977	1978	-	Sep	1	2:00	0	-
+Rule	Syria	1983	1984	-	Apr	9	2:00	1:00	S
+Rule	Syria	1983	1984	-	Oct	1	2:00	0	-
+Rule	Syria	1986	only	-	Feb	16	2:00	1:00	S
+Rule	Syria	1986	only	-	Oct	9	2:00	0	-
+Rule	Syria	1987	only	-	Mar	1	2:00	1:00	S
+Rule	Syria	1987	1988	-	Oct	31	2:00	0	-
+Rule	Syria	1988	only	-	Mar	15	2:00	1:00	S
+Rule	Syria	1989	only	-	Mar	31	2:00	1:00	S
+Rule	Syria	1989	only	-	Oct	1	2:00	0	-
+Rule	Syria	1990	only	-	Apr	1	2:00	1:00	S
+Rule	Syria	1990	only	-	Sep	30	2:00	0	-
+Rule	Syria	1991	only	-	Apr	 1	0:00	1:00	S
+Rule	Syria	1991	1992	-	Oct	 1	0:00	0	-
+Rule	Syria	1992	only	-	Apr	 8	0:00	1:00	S
+Rule	Syria	1993	only	-	Mar	26	0:00	1:00	S
+Rule	Syria	1993	only	-	Sep	25	0:00	0	-
+# IATA SSIM (1998-02) says 1998-04-02;
+# (1998-09) says 1999-03-29 and 1999-09-29; (1999-02) says 1999-04-02,
+# 2000-04-02, and 2001-04-02; (1999-09) says 2000-03-31 and 2001-03-31;
+# ignore all these claims and go with Shanks.
+Rule	Syria	1994	1996	-	Apr	 1	0:00	1:00	S
+Rule	Syria	1994	max	-	Oct	 1	0:00	0	-
+Rule	Syria	1997	1998	-	Mar	lastMon	0:00	1:00	S
+Rule	Syria	1999	max	-	Apr	 1	0:00	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Damascus	2:25:12 -	LMT	1920	# Dimashq
+			2:00	Syria	EE%sT
+
+# Tajikistan
+# From Shanks.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Dushanbe	4:35:12 -	LMT	1924 May  2
+			5:00	-	DUST	1930 Jun 21 # Dushanbe Time
+			6:00 RussiaAsia DUS%sT	1991 Mar 31 2:00s
+			5:00	1:00	DUSST	1991 Sep  9 2:00s
+			5:00	-	TJT		    # Tajikistan Time
+
+# Thailand
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Bangkok	6:42:04	-	LMT	1880
+			6:42:04	-	BMT	1920 Apr # Bangkok Mean Time
+			7:00	-	ICT
+
+# Turkmenistan
+# From Shanks.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Ashgabat	3:53:32 -	LMT	1924 May  2 # or Ashkhabad
+			4:00	-	ASHT	1930 Jun 21 # Ashkhabad Time
+			5:00 RussiaAsia	ASH%sT	1991 Mar 31 2:00
+			4:00 RussiaAsia	ASH%sT	1991 Oct 27 # independence
+			4:00 RussiaAsia TM%sT	1992 Jan 19 2:00
+			5:00	-	TMT
+
+# United Arab Emirates
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Dubai	3:41:12 -	LMT	1920
+			4:00	-	GST
+
+# Uzbekistan
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Samarkand	4:27:12 -	LMT	1924 May  2
+			4:00	-	SAMT	1930 Jun 21 # Samarkand Time
+			5:00	-	SAMT	1981 Apr  1
+			5:00	1:00	SAMST	1981 Oct  1
+			6:00 RussiaAsia TAS%sT	1991 Mar 31 2:00 # Tashkent Time
+			5:00 RussiaAsia	TAS%sT	1991 Sep  1 # independence
+			5:00 RussiaAsia	UZ%sT	1992
+			5:00 RussiaAsia	UZ%sT	1993
+			5:00	-	UZT
+Zone	Asia/Tashkent	4:37:12 -	LMT	1924 May  2
+			5:00	-	TAST	1930 Jun 21 # Tashkent Time
+			6:00 RussiaAsia TAS%sT	1991 Mar 31 2:00s
+			5:00 RussiaAsia	TAS%sT	1991 Sep  1 # independence
+			5:00 RussiaAsia	UZ%sT	1992
+			5:00 RussiaAsia	UZ%sT	1993
+			5:00	-	UZT
+
+# Vietnam
+# From Paul Eggert (1993-11-18):
+# Saigon's official name is Thanh-Pho Ho Chi Minh, but it's too long.
+# We'll stick with the traditional name for now.
+# From Shanks:
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Saigon	7:06:40 -	LMT	1906 Jun  9
+			7:06:20	-	SMT	1911 Mar 11 0:01 # Saigon MT?
+			7:00	-	ICT	1912 May
+			8:00	-	ICT	1931 May
+			7:00	-	ICT
+
+# Yemen
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Aden	3:00:48	-	LMT	1950
+			3:00	-	AST
diff --git a/JodaTime/src/java/org/joda/time/tz/src/australasia b/JodaTime/src/java/org/joda/time/tz/src/australasia
index 3aae52c78..b39ada2cd 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/australasia
+++ b/JodaTime/src/java/org/joda/time/tz/src/australasia
@@ -1,1359 +1,1359 @@
-# @(#)australasia	7.71
-# This file also includes Pacific islands.
-
-# Notes are at the end of this file
-
-###############################################################################
-
-# Australia
-
-# Please see the notes below for the controversy about "EST" versus "AEST" etc.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Aus	1917	only	-	Jan	 1	0:01	1:00	-
-Rule	Aus	1917	only	-	Mar	25	2:00	0	-
-Rule	Aus	1942	only	-	Jan	 1	2:00	1:00	-
-Rule	Aus	1942	only	-	Mar	29	2:00	0	-
-Rule	Aus	1942	only	-	Sep	27	2:00	1:00	-
-Rule	Aus	1943	1944	-	Mar	lastSun	2:00	0	-
-Rule	Aus	1943	only	-	Oct	 3	2:00	1:00	-
-# Go with Whitman and the Australian National Standards Commission, which
-# says W Australia didn't use DST in 1943/1944.  Ignore Whitman's claim that
-# 1944/1945 was just like 1943/1944.
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-# Northern Territory
-Zone Australia/Darwin	 8:43:20 -	LMT	1895 Feb
-			 9:00	-	CST	1899 May
-			 9:30	Aus	CST
-# Western Australia
-Zone Australia/Perth	 7:43:24 -	LMT	1895 Dec
-			 8:00	Aus	WST	1943 Jul
-			 8:00	-	WST	1974 Oct lastSun 2:00s
-			 8:00	1:00	WST	1975 Mar Sun>=1 2:00s
-			 8:00	-	WST	1983 Oct lastSun 2:00s
-			 8:00	1:00	WST	1984 Mar Sun>=1 2:00s
-			 8:00	-	WST	1991 Nov 17 2:00s
-			 8:00	1:00	WST	1992 Mar Sun>=1 2:00s
-			 8:00	-	WST
-# Queensland
-#
-# From Alex Livingston <alex@agsm.unsw.edu.au> (1996-11-01):
-# I have heard or read more than once that some resort islands off the coast
-# of Queensland chose to keep observing daylight-saving time even after
-# Queensland ceased to.
-#
-# From Paul Eggert (1996-11-22):
-# IATA SSIM (1993-02/1994-09) say that the Holiday Islands (Hayman, Lindeman,
-# Hamilton) observed DST for two years after the rest of Queensland stopped.
-# Hamilton is the largest, but there is also a Hamilton in Victoria,
-# so use Lindeman.
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	AQ	1971	only	-	Oct	lastSun	2:00s	1:00	-
-Rule	AQ	1972	only	-	Feb	lastSun	2:00s	0	-
-Rule	AQ	1989	1991	-	Oct	lastSun	2:00s	1:00	-
-Rule	AQ	1990	1992	-	Mar	Sun>=1	2:00s	0	-
-Rule	Holiday	1992	1993	-	Oct	lastSun	2:00s	1:00	-
-Rule	Holiday	1993	1994	-	Mar	Sun>=1	2:00s	0	-
-Zone Australia/Brisbane	10:12:08 -	LMT	1895
-			10:00	Aus	EST	1971
-			10:00	AQ	EST
-Zone Australia/Lindeman  9:55:56 -	LMT	1895
-			10:00	Aus	EST	1971
-			10:00	AQ	EST	1992 Jul
-			10:00	Holiday	EST
-
-# South Australia
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	AS	1971	1985	-	Oct	lastSun	2:00s	1:00	-
-Rule	AS	1986	only	-	Oct	19	2:00s	1:00	-
-Rule	AS	1987	max	-	Oct	lastSun	2:00s	1:00	-
-Rule	AS	1972	only	-	Feb	27	2:00s	0	-
-Rule	AS	1973	1985	-	Mar	Sun>=1	2:00s	0	-
-Rule	AS	1986	1989	-	Mar	Sun>=15	2:00s	0	-
-Rule	AS	1990	only	-	Mar	Sun>=18	2:00s	0	-
-Rule	AS	1991	only	-	Mar	Sun>=1	2:00s	0	-
-Rule	AS	1992	only	-	Mar	Sun>=18	2:00s	0	-
-Rule	AS	1993	only	-	Mar	Sun>=1	2:00s	0	-
-Rule	AS	1994	only	-	Mar	Sun>=18	2:00s	0	-
-Rule	AS	1995	max	-	Mar	lastSun	2:00s	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Australia/Adelaide	9:14:20 -	LMT	1895 Feb
-			9:00	-	CST	1899 May
-			9:30	Aus	CST	1971
-			9:30	AS	CST
-
-# Tasmania
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	AT	1967	only	-	Oct	Sun>=1	2:00s	1:00	-
-Rule	AT	1968	only	-	Mar	lastSun	2:00s	0	-
-Rule	AT	1968	1985	-	Oct	lastSun	2:00s	1:00	-
-Rule	AT	1969	1971	-	Mar	Sun>=8	2:00s	0	-
-Rule	AT	1972	only	-	Feb	lastSun	2:00s	0	-
-Rule	AT	1973	1981	-	Mar	Sun>=1	2:00s	0	-
-Rule	AT	1982	1983	-	Mar	lastSun	2:00s	0	-
-Rule	AT	1984	1986	-	Mar	Sun>=1	2:00s	0	-
-Rule	AT	1986	only	-	Oct	Sun>=15	2:00s	1:00	-
-Rule	AT	1987	1990	-	Mar	Sun>=15	2:00s	0	-
-Rule	AT	1987	only	-	Oct	Sun>=22	2:00s	1:00	-
-Rule	AT	1988	1990	-	Oct	lastSun	2:00s	1:00	-
-Rule	AT	1991	1999	-	Oct	Sun>=1	2:00s	1:00	-
-Rule	AT	1991	max	-	Mar	lastSun	2:00s	0	-
-Rule	AT	2000	only	-	Aug	lastSun	2:00s	1:00	-
-Rule	AT	2001	max	-	Oct	Sun>=1	2:00s	1:00	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Australia/Hobart	9:49:16	-	LMT	1895 Sep
-			10:00	-	EST	1916 Oct 1 2:00
-			10:00	1:00	EST	1917 Feb
-			10:00	Aus	EST	1967
-			10:00	AT	EST
-
-# Victoria
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	AV	1971	1985	-	Oct	lastSun	2:00s	1:00	-
-Rule	AV	1972	only	-	Feb	lastSun	2:00s	0	-
-Rule	AV	1973	1985	-	Mar	Sun>=1	2:00s	0	-
-Rule	AV	1986	1990	-	Mar	Sun>=15	2:00s	0	-
-Rule	AV	1986	1987	-	Oct	Sun>=15	2:00s	1:00	-
-Rule	AV	1988	1999	-	Oct	lastSun	2:00s	1:00	-
-Rule	AV	1991	1994	-	Mar	Sun>=1	2:00s	0	-
-Rule	AV	1995	max	-	Mar	lastSun	2:00s	0	-
-Rule	AV	2000	only	-	Aug	lastSun	2:00s	1:00	-
-Rule	AV	2001	max	-	Oct	lastSun	2:00s	1:00	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Australia/Melbourne 9:39:52 -	LMT	1895 Feb
-			10:00	Aus	EST	1971
-			10:00	AV	EST
-
-# New South Wales
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	AN	1971	1985	-	Oct	lastSun	2:00s	1:00	-
-Rule	AN	1972	only	-	Feb	27	2:00s	0	-
-Rule	AN	1973	1981	-	Mar	Sun>=1	2:00s	0	-
-Rule	AN	1982	only	-	Apr	Sun>=1	2:00s	0	-
-Rule	AN	1983	1985	-	Mar	Sun>=1	2:00s	0	-
-Rule	AN	1986	1989	-	Mar	Sun>=15	2:00s	0	-
-Rule	AN	1986	only	-	Oct	19	2:00s	1:00	-
-Rule	AN	1987	1999	-	Oct	lastSun	2:00s	1:00	-
-Rule	AN	1990	1995	-	Mar	Sun>=1	2:00s	0	-
-Rule	AN	1996	max	-	Mar	lastSun	2:00s	0	-
-Rule	AN	2000	only	-	Aug	lastSun	2:00s	1:00	-
-Rule	AN	2001	max	-	Oct	lastSun	2:00s	1:00	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Australia/Sydney	10:04:52 -	LMT	1895 Feb
-			10:00	Aus	EST	1971
-			10:00	AN	EST
-Zone Australia/Broken_Hill 9:25:48 -	LMT	1895 Feb
-			10:00	-	EST	1896 Aug 23
-			9:00	-	CST	1899 May
-			9:30	Aus	CST	1971
-			9:30	AN	CST	2000
-			9:30	AS	CST
-
-# Lord Howe Island
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	LH	1981	1984	-	Oct	lastSun	2:00	1:00	-
-Rule	LH	1982	1985	-	Mar	Sun>=1	2:00	0	-
-Rule	LH	1985	only	-	Oct	lastSun	2:00	0:30	-
-Rule	LH	1986	1989	-	Mar	Sun>=15	2:00	0	-
-Rule	LH	1986	only	-	Oct	19	2:00	0:30	-
-Rule	LH	1987	1999	-	Oct	lastSun	2:00	0:30	-
-Rule	LH	1990	1995	-	Mar	Sun>=1	2:00	0	-
-Rule	LH	1996	max	-	Mar	lastSun	2:00	0	-
-Rule	LH	2000	only	-	Aug	lastSun	2:00	0:30	-
-Rule	LH	2001	max	-	Oct	lastSun	2:00	0:30	-
-Zone Australia/Lord_Howe 10:36:20 -	LMT	1895 Feb
-			10:00	-	EST	1981 Mar
-			10:30	LH	LHST
-
-# Australian miscellany
-#
-# Ashmore Is, Cartier
-# no indigenous inhabitants; only seasonal caretakers
-# like Australia/Perth, says Turner
-#
-# Coral Sea Is
-# no indigenous inhabitants; only meteorologists
-# no information
-#
-# Macquarie
-# permanent occupation (scientific station) since 1948;
-# sealing and penguin oil station operated 1888/1917
-# like Australia/Hobart, says Turner
-
-# Christmas
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Indian/Christmas	7:02:52 -	LMT	1895 Feb
-			7:00	-	CXT	# Christmas Island Time
-
-# Cook Is
-# From Shanks:
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Cook	1978	only	-	Nov	12	0:00	0:30	HS
-Rule	Cook	1979	1991	-	Mar	Sun>=1	0:00	0	-
-Rule	Cook	1979	1990	-	Oct	lastSun	0:00	0:30	HS
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Pacific/Rarotonga	-10:39:04 -	LMT	1901		# Avarua
-			-10:30	-	CKT	1978 Nov 12	# Cook Is Time
-			-10:00	Cook	CK%sT
-
-# Cocos
-# These islands were ruled by the Ross family from about 1830 to 1978.
-# We don't know when standard time was introduced; for now, we guess 1900.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Indian/Cocos	6:27:40	-	LMT	1900
-			6:30	-	CCT	# Cocos Islands Time
-
-# Fiji
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Fiji	1998	1999	-	Nov	Sun>=1	2:00	1:00	S
-Rule	Fiji	1999	2000	-	Feb	lastSun	3:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Pacific/Fiji	11:53:40 -	LMT	1915 Oct 26	# Suva
-			12:00	Fiji	FJ%sT	# Fiji Time
-
-# French Polynesia
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Pacific/Gambier	 -8:59:48 -	LMT	1912 Oct	# Rikitea
-			 -9:00	-	GAMT	# Gambier Time
-Zone	Pacific/Marquesas -9:18:00 -	LMT	1912 Oct
-			 -9:30	-	MART	# Marquesas Time
-Zone	Pacific/Tahiti	 -9:58:16 -	LMT	1912 Oct	# Papeete
-			-10:00	-	TAHT	# Tahiti Time
-# Clipperton (near North America) is administered from French Polynesia;
-# it is uninhabited.
-
-# Guam
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Pacific/Guam	-14:21:00 -	LMT	1844 Dec 31
-			 9:39:00 -	LMT	1901		# Agana
-			10:00	-	GST	2000 Dec 23	# Guam
-			10:00	-	ChST	# Chamorro Standard Time
-
-# Kiribati
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Pacific/Tarawa	 11:32:04 -	LMT	1901		# Bairiki
-			 12:00	-	GILT		 # Gilbert Is Time
-Zone Pacific/Enderbury	-11:24:20 -	LMT	1901
-			-12:00	-	PHOT	1979 Oct # Phoenix Is Time
-			-11:00	-	PHOT	1995
-			 13:00	-	PHOT
-Zone Pacific/Kiritimati	-10:29:20 -	LMT	1901
-			-10:40	-	LINT	1979 Oct # Line Is Time
-			-10:00	-	LINT	1995
-			 14:00	-	LINT
-
-# N Mariana Is
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Pacific/Saipan	-14:17:00 -	LMT	1844 Dec 31
-			 9:43:00 -	LMT	1901
-			 9:00	-	MPT	1969 Oct # N Mariana Is Time
-			10:00	-	MPT	2000 Dec 23
-			10:00	-	ChST	# Chamorro Standard Time
-
-# Marshall Is
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Pacific/Majuro	11:24:48 -	LMT	1901
-			11:00	-	MHT	1969 Oct # Marshall Islands Time
-			12:00	-	MHT
-Zone Pacific/Kwajalein	11:09:20 -	LMT	1901
-			11:00	-	MHT	1969 Oct
-			-12:00	-	KWAT	1993 Aug 20	# Kwajalein Time
-			12:00	-	MHT
-
-# Micronesia
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Pacific/Yap	9:12:32	-	LMT	1901		# Colonia
-			9:00	-	YAPT	1969 Oct	# Yap Time
-			10:00	-	YAPT
-Zone Pacific/Truk	10:07:08 -	LMT	1901
-			10:00	-	TRUT			# Truk Time
-Zone Pacific/Ponape	10:32:52 -	LMT	1901		# Kolonia
-			11:00	-	PONT			# Ponape Time
-Zone Pacific/Kosrae	10:51:56 -	LMT	1901
-			11:00	-	KOST	1969 Oct	# Kosrae Time
-			12:00	-	KOST	1999
-			11:00	-	KOST
-
-# Nauru
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Pacific/Nauru	11:07:40 -	LMT	1921 Jan 15	# Uaobe
-			11:30	-	NRT	1942 Mar 15	# Nauru Time
-			9:00	-	JST	1944 Aug 15
-			11:30	-	NRT	1979 May
-			12:00	-	NRT
-
-# New Caledonia
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	NC	1977	1978	-	Dec	Sun>=1	0:00	1:00	S
-Rule	NC	1978	1979	-	Feb	27	0:00	0	-
-Rule	NC	1996	only	-	Dec	 1	2:00s	1:00	S
-# Shanks says the following was at 2:00; go with IATA.
-Rule	NC	1997	only	-	Mar	 2	2:00s	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Pacific/Noumea	11:05:48 -	LMT	1912 Jan 13
-			11:00	NC	NC%sT
-
-
-###############################################################################
-
-# New Zealand
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	NZ	1927	only	-	Nov	 6	2:00	1:00	S
-Rule	NZ	1928	only	-	Mar	 4	2:00	0	M
-Rule	NZ	1928	1933	-	Oct	Sun>=8	2:00	0:30	S
-Rule	NZ	1929	1933	-	Mar	Sun>=15	2:00	0	M
-Rule	NZ	1934	1940	-	Apr	lastSun	2:00	0	M
-Rule	NZ	1934	1940	-	Sep	lastSun	2:00	0:30	S
-Rule	NZ	1946	only	-	Jan	 1	0:00	0	S
-# Since 1957 Chatham has been 45 minutes ahead of NZ, but there's no
-# convenient notation for this so we must duplicate the Rule lines.
-Rule	NZ	1974	only	-	Nov	Sun>=1	2:00s	1:00	D
-Rule	Chatham	1974	only	-	Nov	Sun>=1	2:45s	1:00	D
-Rule	NZ	1975	only	-	Feb	lastSun	2:00s	0	S
-Rule	Chatham	1975	only	-	Feb	lastSun	2:45s	0	S
-Rule	NZ	1975	1988	-	Oct	lastSun	2:00s	1:00	D
-Rule	Chatham	1975	1988	-	Oct	lastSun	2:45s	1:00	D
-Rule	NZ	1976	1989	-	Mar	Sun>=1	2:00s	0	S
-Rule	Chatham	1976	1989	-	Mar	Sun>=1	2:45s	0	S
-Rule	NZ	1989	only	-	Oct	Sun>=8	2:00s	1:00	D
-Rule	Chatham	1989	only	-	Oct	Sun>=8	2:45s	1:00	D
-Rule	NZ	1990	max	-	Oct	Sun>=1	2:00s	1:00	D
-Rule	Chatham	1990	max	-	Oct	Sun>=1	2:45s	1:00	D
-Rule	NZ	1990	max	-	Mar	Sun>=15	2:00s	0	S
-Rule	Chatham	1990	max	-	Mar	Sun>=15	2:45s	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Pacific/Auckland	11:39:04 -	LMT	1868 Nov  2
-			11:30	NZ	NZ%sT	1946 Jan  1
-			12:00	NZ	NZ%sT
-Zone Pacific/Chatham	12:13:48 -	LMT	1957 Jan  1
-			12:45	Chatham	CHA%sT
-
-
-# Auckland Is
-# uninhabited; Maori and Moriori, colonial settlers, pastoralists, sealers,
-# and scientific personnel have wintered
-
-# Campbell I
-# minor whaling stations operated 1909/1914
-# scientific station operated 1941/1995;
-# previously whalers, sealers, pastoralists, and scientific personnel wintered
-# was probably like Pacific/Auckland
-
-###############################################################################
-
-
-# Niue
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Pacific/Niue	-11:19:40 -	LMT	1901		# Alofi
-			-11:20	-	NUT	1951	# Niue Time
-			-11:30	-	NUT	1978 Oct 1
-			-11:00	-	NUT
-
-# Norfolk
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Pacific/Norfolk	11:11:52 -	LMT	1901		# Kingston
-			11:12	-	NMT	1951	# Norfolk Mean Time
-			11:30	-	NFT		# Norfolk Time
-
-# Palau (Belau)
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Pacific/Palau	8:57:56 -	LMT	1901		# Koror
-			9:00	-	PWT	# Palau Time
-
-# Papua New Guinea
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Pacific/Port_Moresby 9:48:40 -	LMT	1880
-			9:48:32	-	PMMT	1895	# Port Moresby Mean Time
-			10:00	-	PGT		# Papua New Guinea Time
-
-# Pitcairn
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Pacific/Pitcairn	-8:40:20 -	LMT	1901		# Adamstown
-			-8:30	-	PNT	1998 Apr 27 00:00
-			-8:00	-	PST	# Pitcairn Standard Time
-
-# American Samoa
-Zone Pacific/Pago_Pago	 12:37:12 -	LMT	1879 Jul  5
-			-11:22:48 -	LMT	1911
-			-11:30	-	SAMT	1950		# Samoa Time
-			-11:00	-	NST	1967 Apr	# N=Nome
-			-11:00	-	BST	1983 Nov 30	# B=Bering
-			-11:00	-	SST			# S=Samoa
-
-# Samoa
-Zone Pacific/Apia	 12:33:04 -	LMT	1879 Jul  5
-			-11:26:56 -	LMT	1911
-			-11:30	-	SAMT	1950		# Samoa Time
-			-11:00	-	WST			# Samoa Time
-
-# Solomon Is
-# excludes Bougainville, for which see Papua New Guinea
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Pacific/Guadalcanal 10:39:48 -	LMT	1912 Oct	# Honiara
-			11:00	-	SBT	# Solomon Is Time
-
-# Tokelau Is
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Pacific/Fakaofo	-11:24:56 -	LMT	1901
-			-10:00	-	TKT	# Tokelau Time
-
-# Tonga
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Tonga	1999	only	-	Oct	 7	2:00s	1:00	S
-Rule	Tonga	2000	only	-	Mar	19	2:00s	0	-
-Rule	Tonga	2000	2001	-	Nov	Sun>=1	2:00	1:00	S
-Rule	Tonga	2001	2002	-	Jan	lastSun	2:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Pacific/Tongatapu	12:19:20 -	LMT	1901
-			12:20	-	TOT	1941 # Tonga Time
-			13:00	-	TOT	1999
-			13:00	Tonga	TO%sT
-
-# Tuvalu
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Pacific/Funafuti	11:56:52 -	LMT	1901
-			12:00	-	TVT	# Tuvalu Time
-
-
-# US minor outlying islands
-
-# Howland, Baker
-# uninhabited since World War II
-# no information; was probably like Pacific/Pago_Pago
-
-# Jarvis
-# uninhabited since 1958
-# no information; was probably like Pacific/Kiritimati
-
-# Johnston
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Pacific/Johnston	-10:00	-	HST
-
-# Kingman
-# uninhabited
-
-# Midway
-#
-# From Mark Brader (2005-01-23):
-# [Fallacies and Fantasies of Air Transport History, by R.E.G. Davies,
-# published 1994 by Paladwr Press, McLean, VA, USA; ISBN 0-9626483-5-3]
-# reproduced a Pan American Airways timeables from 1936, for their weekly
-# "Orient Express" flights between San Francisco and Manila, and connecting
-# flights to Chicago and the US East Coast.  As it uses some time zone
-# designations that I've never seen before:....
-# Fri. 6:30A Lv. HONOLOLU (Pearl Harbor), H.I.   H.L.T. Ar. 5:30P Sun.
-#  "   3:00P Ar. MIDWAY ISLAND . . . . . . . . . M.L.T. Lv. 6:00A  "
-#
-Zone Pacific/Midway	-11:49:28 -	LMT	1901
-			-11:00	-	NST	1956 Jun  3
-			-11:00	1:00	NDT	1956 Sep  2
-			-11:00	-	NST	1967 Apr	# N=Nome
-			-11:00	-	BST	1983 Nov 30	# B=Bering
-			-11:00	-	SST			# S=Samoa
-
-# Palmyra
-# uninhabited since World War II; was probably like Pacific/Kiritimati
-
-# Wake
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Pacific/Wake	11:06:28 -	LMT	1901
-			12:00	-	WAKT	# Wake Time
-
-
-# Vanuatu
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Vanuatu	1983	only	-	Sep	25	0:00	1:00	S
-Rule	Vanuatu	1984	1991	-	Mar	Sun>=23	0:00	0	-
-Rule	Vanuatu	1984	only	-	Oct	23	0:00	1:00	S
-Rule	Vanuatu	1985	1991	-	Sep	Sun>=23	0:00	1:00	S
-Rule	Vanuatu	1992	1993	-	Jan	Sun>=23	0:00	0	-
-Rule	Vanuatu	1992	only	-	Oct	Sun>=23	0:00	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Pacific/Efate	11:13:16 -	LMT	1912 Jan 13		# Vila
-			11:00	Vanuatu	VU%sT	# Vanuatu Time
-
-# Wallis and Futuna
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Pacific/Wallis	12:15:20 -	LMT	1901
-			12:00	-	WFT	# Wallis & Futuna Time
-
-###############################################################################
-
-# NOTES
-
-# This data is by no means authoritative; if you think you know better,
-# go ahead and edit the file (and please send any changes to
-# tz@elsie.nci.nih.gov for general use in the future).
-
-# From Paul Eggert <eggert@twinsun.com> (1999-10-29):
-# A good source for time zone historical data outside the U.S. is
-# Thomas G. Shanks, The International Atlas (5th edition),
-# San Diego: ACS Publications, Inc. (1999).
-#
-# Gwillim Law writes that a good source
-# for recent time zone data is the International Air Transport
-# Association's Standard Schedules Information Manual (IATA SSIM),
-# published semiannually.  Law sent in several helpful summaries
-# of the IATA's data after 1990.
-#
-# Except where otherwise noted, Shanks is the source for entries through 1990,
-# and IATA SSIM is the source for entries after 1990.
-#
-# Another source occasionally used is Edward W. Whitman, World Time Differences,
-# Whitman Publishing Co, 2 Niagara Av, Ealing, London (undated), which
-# I found in the UCLA library.
-#
-# A reliable and entertaining source about time zones is
-# Derek Howse, Greenwich time and longitude, Philip Wilson Publishers (1997).
-#
-# I invented the abbreviations marked `*' in the following table;
-# the rest are from earlier versions of this file, or from other sources.
-# Corrections are welcome!
-#		std dst
-#		LMT	Local Mean Time
-#	  8:00	WST WST	Western Australia
-#	  9:00	JST	Japan
-#	  9:30	CST CST	Central Australia
-#	 10:00	EST EST	Eastern Australia
-#	 10:00	ChST	Chamorro
-#	 10:30	LHST LHST Lord Howe*
-#	 11:30	NZMT NZST New Zealand through 1945
-#	 12:00	NZST NZDT New Zealand 1946-present
-#	 12:45	CHAST CHADT Chatham*
-#	-11:00	SST	Samoa
-#	-10:00	HST	Hawaii
-#	- 8:00	PST	Pitcairn*
-#
-# See the `northamerica' file for Hawaii.
-# See the `southamerica' file for Easter I and the Galapagos Is.
-
-###############################################################################
-
-# Australia
-
-# <a href="http://www.dstc.qut.edu.au/DST/marg/daylight.html">
-# Australia's Daylight Saving Times
-# </a>, by Margaret Turner, summarizes daylight saving issues in Australia.
-
-# From John Mackin (1991-03-06):
-# We in Australia have _never_ referred to DST as `daylight' time.
-# It is called `summer' time.  Now by a happy coincidence, `summer'
-# and `standard' happen to start with the same letter; hence, the
-# abbreviation does _not_ change...
-# The legislation does not actually define abbreviations, at least
-# in this State, but the abbreviation is just commonly taken to be the
-# initials of the phrase, and the legislation here uniformly uses
-# the phrase `summer time' and does not use the phrase `daylight
-# time'.
-# Announcers on the Commonwealth radio network, the ABC (for Australian
-# Broadcasting Commission), use the phrases `Eastern Standard Time'
-# or `Eastern Summer Time'.  (Note, though, that as I say in the
-# current australasia file, there is really no such thing.)  Announcers
-# on its overseas service, Radio Australia, use the same phrases
-# prefixed by the word `Australian' when referring to local times;
-# time announcements on that service, naturally enough, are made in UTC.
-
-# From Arthur David Olson (1992-03-08):
-# Given the above, what's chosen for year-round use is:
-#	CST	for any place operating at a GMTOFF of 9:30
-#	WST	for any place operating at a GMTOFF of 8:00
-#	EST	for any place operating at a GMTOFF of 10:00
-
-# From Paul Eggert (2001-04-05), summarizing a long discussion about "EST"
-# versus "AEST" etc.:
-#
-# I see the following points of dispute:
-#
-# * How important are unique time zone abbreviations?
-#
-#   Here I tend to agree with the point (most recently made by Chris
-#   Newman) that unique abbreviations should not be essential for proper
-#   operation of software.  We have other instances of ambiguity
-#   (e.g. "IST" denoting both "Israel Standard Time" and "Indian
-#   Standard Time"), and they are not likely to go away any time soon.
-#   In the old days, some software mistakenly relied on unique
-#   abbreviations, but this is becoming less true with time, and I don't
-#   think it's that important to cater to such software these days.
-#
-#   On the other hand, there is another motivation for unambiguous
-#   abbreviations: it cuts down on human confusion.  This is
-#   particularly true for Australia, where "EST" can mean one thing for
-#   time T and a different thing for time T plus 1 second.
-#
-# * Does the relevant legislation indicate which abbreviations should be used?
-#
-#   Here I tend to think that things are a mess, just as they are in
-#   many other countries.  We Americans are currently disagreeing about
-#   which abbreviation to use for the newly legislated Chamorro Standard
-#   Time, for example.
-#
-#   Personally, I would prefer to use common practice; I would like to
-#   refer to legislation only for examples of common practice, or as a
-#   tiebreaker.
-#
-# * Do Australians more often use "Eastern Daylight Time" or "Eastern
-#   Summer Time"?  Do they typically prefix the time zone names with
-#   the word "Australian"?
-#
-#   My own impression is that both "Daylight Time" and "Summer Time" are
-#   common and are widely understood, but that "Summer Time" is more
-#   popular; and that the leading "A" is also common but is omitted more
-#   often than not.  I just used AltaVista advanced search and got the
-#   following count of page hits:
-#
-#     1,103 "Eastern Summer Time" AND domain:au
-#       971 "Australian Eastern Summer Time" AND domain:au
-#       613 "Eastern Daylight Time" AND domain:au
-#       127 "Australian Eastern Daylight Time" AND domain:au
-#
-#   Here "Summer" seems quite a bit more popular than "Daylight",
-#   particularly when we know the time zone is Australian and not US,
-#   say.  The "Australian" prefix seems to be popular for Eastern Summer
-#   Time, but unpopular for Eastern Daylight Time.
-#
-#   For abbreviations, tools like AltaVista are less useful because of
-#   ambiguity.  Many hits are not really time zones, unfortunately, and
-#   many hits denote US time zones and not Australian ones.  But here
-#   are the hit counts anyway:
-#
-#     161,304 "EST" and domain:au
-#      25,156 "EDT" and domain:au
-#      18,263 "AEST" and domain:au
-#      10,416 "AEDT" and domain:au
-#
-#      14,538 "CST" and domain:au
-#       5,728 "CDT" and domain:au
-#         176 "ACST" and domain:au
-#          29 "ACDT" and domain:au
-#
-#       7,539 "WST" and domain:au
-#          68 "AWST" and domain:au
-#
-#   This data suggest that Australians tend to omit the "A" prefix in
-#   practice.  The situation for "ST" versus "DT" is less clear, given
-#   the ambiguities involved.
-#
-# * How do Australians feel about the abbreviations in the tz database?
-#
-#   If you just count Australians on this list, I count 2 in favor and 3
-#   against.  One of the "against" votes (David Keegel) counseled delay,
-#   saying that both AEST/AEDT and EST/EST are widely used and
-#   understood in Australia.
-
-# From Paul Eggert (1995-12-19):
-# Shanks reports 2:00 for all autumn changes in Australia and New Zealand.
-# Mark Prior <mrp@itd.adelaide.edu.au> writes that his newspaper
-# reports that NSW's fall 1995 change will occur at 2:00,
-# but Robert Elz says it's been 3:00 in Victoria since 1970
-# and perhaps the newspaper's `2:00' is referring to standard time.
-# For now we'll continue to assume 2:00s for changes since 1960.
-
-# From Eric Ulevik <eau@zip.com.au> (1998-01-05):
-#
-# Here are some URLs to Australian time legislation. These URLs are stable,
-# and should probably be included in the data file. There are probably more
-# relevant entries in this database.
-#
-# NSW (including LHI and Broken Hill):
-# <a href="http://www.austlii.edu.au/au/legis/nsw/consol_act/sta1987137/index.html">
-# Standard Time Act 1987 (updated 1995-04-04)
-# </a>
-# ACT
-# <a href="http://www.austlii.edu.au/au/legis/act/consol_act/stasta1972279/index.html">
-# Standard Time and Summer Time Act 1972
-# </a>
-# SA
-# <a href="http://www.austlii.edu.au/au/legis/sa/consol_act/sta1898137/index.html">
-# Standard Time Act, 1898
-# </a>
-
-# Northern Territory
-
-# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
-# # The NORTHERN TERRITORY..  [ Courtesy N.T. Dept of the Chief Minister ]
-# #					[ Nov 1990 ]
-# #	N.T. have never utilised any DST due to sub-tropical/tropical location.
-# ...
-# Zone        Australia/North         9:30    -       CST
-
-# From Bradley White (1991-03-04):
-# A recent excerpt from an Australian newspaper...
-# the Northern Territory do[es] not have daylight saving.
-
-# Western Australia
-
-# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
-# #  The state of WESTERN AUSTRALIA..  [ Courtesy W.A. dept Premier+Cabinet ]
-# #						[ Nov 1990 ]
-# #	W.A. suffers from a great deal of public and political opposition to
-# #	DST in principle. A bill is brought before parliament in most years, but
-# #	usually defeated either in the upper house, or in party caucus
-# #	before reaching parliament.
-# ...
-# Zone	Australia/West		8:00	AW	%sST
-# ...
-# Rule	AW	1974	only	-	Oct	lastSun	2:00	1:00	D
-# Rule	AW	1975	only	-	Mar	Sun>=1	3:00	0	W
-# Rule	AW	1983	only	-	Oct	lastSun	2:00	1:00	D
-# Rule	AW	1984	only	-	Mar	Sun>=1	3:00	0	W
-
-# From Bradley White (1991-03-04):
-# A recent excerpt from an Australian newspaper...
-# Western Australia...do[es] not have daylight saving.
-
-# From John D. Newman via Bradley White (1991-11-02):
-# Western Australia is still on "winter time". Some DH in Sydney
-# rang me at home a few days ago at 6.00am. (He had just arrived at
-# work at 9.00am.)
-# W.A. is switching to Summer Time on Nov 17th just to confuse
-# everybody again.
-
-# From Arthur David Olson (1992-03-08):
-# The 1992 ending date used in the rules is a best guess;
-# it matches what was used in the past.
-
-# <a href="http://www.bom.gov.au/faq/faqgen.htm">
-# The Australian Bureau of Meteorology FAQ
-# </a> (1999-09-27) writes that Giles Meteorological Station uses
-# South Australian time even though it's located in Western Australia.
-
-# Queensland
-# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
-# #   The state of QUEENSLAND.. [ Courtesy Qld. Dept Premier Econ&Trade Devel ]
-# #						[ Dec 1990 ]
-# ...
-# Zone	Australia/Queensland	10:00	AQ	%sST
-# ...
-# Rule	AQ	1971	only	-	Oct	lastSun	2:00	1:00	D
-# Rule	AQ	1972	only	-	Feb	lastSun	3:00	0	E
-# Rule	AQ	1989	max	-	Oct	lastSun	2:00	1:00	D
-# Rule	AQ	1990	max	-	Mar	Sun>=1	3:00	0	E
-
-# From Bradley White (1989-12-24):
-# "Australia/Queensland" now observes daylight time (i.e. from
-# October 1989).
-
-# From Bradley White (1991-03-04):
-# A recent excerpt from an Australian newspaper...
-# ...Queensland...[has] agreed to end daylight saving
-# at 3am tomorrow (March 3)...
-
-# From John Mackin (1991-03-06):
-# I can certainly confirm for my part that Daylight Saving in NSW did in fact
-# end on Sunday, 3 March.  I don't know at what hour, though.  (It surprised
-# me.)
-
-# From Bradley White (1992-03-08):
-# ...there was recently a referendum in Queensland which resulted
-# in the experimental daylight saving system being abandoned. So, ...
-# ...
-# Rule	QLD	1989	1991	-	Oct	lastSun	2:00	1:00	D
-# Rule	QLD	1990	1992	-	Mar	Sun>=1	3:00	0	S
-# ...
-
-# From Arthur David Olson (1992-03-08):
-# The chosen rules the union of the 1971/1972 change and the 1989-1992 changes.
-
-# From Rives McDow (2002-04-09):
-# The most interesting region I have found consists of three towns on the
-# southern coast of Australia, population 10 at last report, along with
-# 50,000 sheep, about 100 kilometers long and 40 kilometers into the
-# continent.  The primary town is Madura, with the other towns being
-# Mundrabilla and Eucla.  According to the sheriff of Madura, the
-# residents got tired of having to change the time so often, as they are
-# located in a strip overlapping the border of South Australia and Western
-# Australia.  South Australia observes daylight saving time; Western
-# Australia does not.  The two states are one and a half hours apart.  The
-# residents decided to forget about this nonsense of changing the clock so
-# much and set the local time 20 hours and 45 minutes from the
-# international date line, or right in the middle of the time of South
-# Australia and Western Australia.  As it only affects about 10 people and
-# tourists staying at the Madura Motel, it has never really made as big an
-# impact as Broken Hill.  However, as tourist visiting there or anyone
-# calling the local sheriff will attest, they do keep time in this way.
-#
-# From Paul Eggert (2002-04-09):
-# This is confirmed by the section entitled
-# "What's the deal with time zones???" in
-# <http://www.earthsci.unimelb.edu.au/~awatkins/null.html>,
-# which says a few other things:
-#
-# * Border Village, SA also is 45 minutes ahead of Perth.
-# * The locals call this time zone "central W.A. Time" (presumably "CWAT").
-# * The locals also call Western Australia time "Perth time".
-#
-# It's not clear from context whether everyone in Western Australia
-# knows of this naming convention, or whether it's just the people in
-# this subregion.
-
-# South Australia, Tasmania, Victoria
-
-# From Arthur David Olson (1992-03-08):
-# The rules from version 7.1 follow.
-# There are lots of differences between these rules and
-# the Shepherd et al. rules.  Since the Shepherd et al. rules
-# and Bradley White's newspaper article are in agreement on
-# current DST ending dates, no worries.
-#
-# Rule	Oz	1971	1985	-	Oct	lastSun	2:00	1:00	-
-# Rule	Oz	1986	max	-	Oct	Sun<=24	2:00	1:00	-
-# Rule	Oz	1972	only	-	Feb	27	3:00	0	-
-# Rule	Oz	1973	1986	-	Mar	Sun>=1	3:00	0	-
-# Rule	Oz	1987	max	-	Mar	Sun<=21	3:00	0	-
-# Zone	Australia/Tasmania	10:00	Oz	EST
-# Zone	Australia/South		9:30	Oz	CST
-# Zone	Australia/Victoria	10:00	Oz	EST	1985 Oct lastSun 2:00
-#				10:00	1:00	EST	1986 Mar Sun<=21 3:00
-#				10:00	Oz	EST
-
-# From Robert Elz (1991-03-06):
-# I believe that the current start date for DST is "lastSun" in Oct...
-# that changed Oct 89.  That is, we're back to the
-# original rule, and that rule currently applies in all the states
-# that have dst, incl Qld.  (Certainly it was true in Vic).
-# The file I'm including says that happened in 1988, I think
-# that's incorrect, but I'm not 100% certain.
-
-# South Australia
-
-# From Bradley White (1991-03-04):
-# A recent excerpt from an Australian newspaper...
-# ...South Australia...[has] agreed to end daylight saving
-# at 3am tomorrow (March 3)...
-
-# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
-# #   The state of SOUTH AUSTRALIA....[ Courtesy of S.A. Dept of Labour ]
-# #						[ Nov 1990 ]
-# ...
-# Zone	Australia/South		9:30	AS	%sST
-# ...
-# Rule	 AS	1971	max	-	Oct	lastSun	2:00	1:00	D
-# Rule	 AS	1972	1985	-	Mar	Sun>=1	3:00	0	C
-# Rule	 AS	1986	1990	-	Mar	Sun<=21	3:00	0	C
-# Rule	 AS	1991	max	-	Mar	Sun>=1	3:00	0	C
-
-# From Bradley White (1992-03-11):
-# Recent correspondence with a friend in Adelaide
-# contained the following exchange:  "Due to the Adelaide Festival,
-# South Australia delays setting back our clocks for a few weeks."
-
-# From Robert Elz (1992-03-13):
-# I heard that apparently (or at least, it appears that)
-# South Aus will have an extra 3 weeks daylight saving every even
-# numbered year (from 1990).  That's when the Adelaide Festival
-# is on...
-
-# From Robert Elz (1992-03-16, 00:57:07 +1000):
-# DST didn't end in Adelaide today (yesterday)....
-# But whether it's "4th Sunday" or "2nd last Sunday" I have no idea whatever...
-# (it's just as likely to be "the Sunday we pick for this year"...).
-
-# From Bradley White (1994-04-11):
-# If Sun, 15 March, 1992 was at +1030 as kre asserts, but yet Sun, 20 March,
-# 1994 was at +0930 as John Connolly's customer seems to assert, then I can
-# only conclude that the actual rule is more complicated....
-
-# From John Warburton <jwarb@SACBH.com.au> (1994-10-07):
-# The new Daylight Savings dates for South Australia ...
-# was gazetted in the Government Hansard on Sep 26 1994....
-# start on last Sunday in October and end in last sunday in March.
-
-# Tasmania
-
-# The rules for 1967 through 1991 were reported by George Shepherd
-# via Simon Woodhead via Robert Elz (1991-03-06):
-# #  The state of TASMANIA.. [Courtesy Tasmanian Dept of Premier + Cabinet ]
-# #					[ Nov 1990 ]
-
-# From Bill Hart via Guy Harris (1991-10-10):
-# Oh yes, the new daylight savings rules are uniquely tasmanian, we have
-# 6 weeks a year now when we are out of sync with the rest of Australia
-# (but nothing new about that).
-
-# From Alex Livingston (1999-10-04):
-# I heard on the ABC (Australian Broadcasting Corporation) radio news on the
-# (long) weekend that Tasmania, which usually goes its own way in this regard,
-# has decided to join with most of NSW, the ACT, and most of Victoria
-# (Australia) and start daylight saving on the last Sunday in August in 2000
-# instead of the first Sunday in October.
-
-# Sim Alam (2000-07-03) reported a legal citation for the 2000/2001 rules:
-# http://www.thelaw.tas.gov.au/fragview/42++1968+GS3A@EN+2000070300
-
-# Victoria
-
-# The rules for 1971 through 1991 were reported by George Shepherd
-# via Simon Woodhead via Robert Elz (1991-03-06):
-# #   The state of VICTORIA.. [ Courtesy of Vic. Dept of Premier + Cabinet ]
-# #						[ Nov 1990 ]
-
-# From Scott Harrington (2001-08-29):
-# On KQED's "City Arts and Lectures" program last night I heard an
-# interesting story about daylight savings time.  Dr. John Heilbron was
-# discussing his book "The Sun in the Church: Cathedrals as Solar
-# Observatories"[1], and in particular the Shrine of Remembrance[2] located
-# in Melbourne, Australia.
-#
-# Apparently the shrine's main purpose is a beam of sunlight which
-# illuminates a special spot on the floor at the 11th hour of the 11th day
-# of the 11th month (Remembrance Day) every year in memory of Australia's
-# fallen WWI soldiers.  And if you go there on Nov. 11, at 11am local time,
-# you will indeed see the sunbeam illuminate the special spot at the
-# expected time.
-#
-# However, that is only because of some special mirror contraption that had
-# to be employed, since due to daylight savings time, the true solar time of
-# the remembrance moment occurs one hour later (or earlier?).  Perhaps
-# someone with more information on this jury-rig can tell us more.
-#
-# [1] http://www.hup.harvard.edu/catalog/HEISUN.html
-# [2] http://www.shrine.org.au
-
-# New South Wales
-
-# From Arthur David Olson:
-# New South Wales and subjurisdictions have their own ideas of a fun time.
-# Based on law library research by John Mackin (john@basser.cs.su.oz),
-# who notes:
-#	In Australia, time is not legislated federally, but rather by the
-#	individual states.  Thus, while such terms as ``Eastern Standard Time''
-#	[I mean, of course, Australian EST, not any other kind] are in common
-#	use, _they have NO REAL MEANING_, as they are not defined in the
-#	legislation.  This is very important to understand.
-#	I have researched New South Wales time only...
-
-# From Paul Eggert (1999-09-27):
-# The Information Service of the Australian National Standards Commission
-# <a href="http://www.nsc.gov.au/InfoServ/Ileaflet/il27.htm">
-# Daylight Saving
-# </a> page (1995-04) has an excellent overall history of Australian DST.
-# The Community Relations Division of the NSW Attorney General's Department
-# publishes a history of daylight saving in NSW.  See:
-# <a href="http://www.lawlink.nsw.gov.au/crd.nsf/pages/time2">
-# Lawlink NSW: Daylight Saving in New South Wales
-# </a>
-
-# From Eric Ulevik <eau@ozemail.com.au> (1999-05-26):
-# DST will start in NSW on the last Sunday of August, rather than the usual
-# October in 2000.  [See: Matthew Moore,
-# <a href="http://www.smh.com.au/news/9905/26/pageone/pageone4.html">
-# Two months more daylight saving
-# </a>
-# Sydney Morning Herald (1999-05-26).]
-
-# From Paul Eggert (1999-09-27):
-# See the following official NSW source:
-# <a href="http://dir.gis.nsw.gov.au/cgi-bin/genobject/document/other/daylightsaving/tigGmZ">
-# Daylight Saving in New South Wales.
-# </a>
-#
-# Narrabri Shire (NSW) council has announced it will ignore the extension of
-# daylight saving next year.  See:
-# <a href="http://abc.net.au/news/regionals/neweng/monthly/regeng-22jul1999-1.htm">
-# Narrabri Council to ignore daylight saving
-# </a> (1999-07-22).  For now, we'll wait to see if this really happens.
-#
-# Victoria will following NSW.  See:
-# <a href="http://abc.net.au/local/news/olympics/1999/07/item19990728112314_1.htm">
-# Vic to extend daylight saving
-# </a> (1999-07-28).
-#
-# However, South Australia rejected the DST request.  See:
-# <a href="http://abc.net.au/news/olympics/1999/07/item19990719151754_1.htm">
-# South Australia rejects Olympics daylight savings request
-# </a> (1999-07-19).
-#
-# Queensland also will not observe DST for the Olympics.  See:
-# <a href="http://abc.net.au/news/olympics/1999/06/item19990601114608_1.htm">
-# Qld says no to daylight savings for Olympics
-# </a> (1999-06-01), which quotes Queensland Premier Peter Beattie as saying
-# ``Look you've got to remember in my family when this came up last time
-# I voted for it, my wife voted against it and she said to me it's all very
-# well for you, you don't have to worry about getting the children out of
-# bed, getting them to school, getting them to sleep at night.
-# I've been through all this argument domestically...my wife rules.''
-#
-# Broken Hill will stick with South Australian time in 2000.  See:
-# <a href="http://abc.net.au/news/regionals/brokenh/monthly/regbrok-21jul1999-6.htm">
-# Broken Hill to be behind the times
-# </a> (1999-07-21).
-
-# IATA SSIM (1998-09) says that the spring 2000 change for Australian
-# Capital Territory, New South Wales except Lord Howe Island and Broken
-# Hill, and Victoria will be August 27, presumably due to the Sydney Olympics.
-
-# From Eric Ulevik, referring to Sydney's Sun Herald (2000-08-13), page 29:
-# The Queensland Premier Peter Beattie is encouraging northern NSW
-# towns to use Queensland time.
-
-# Yancowinna
-
-# From John Mackin (1989-01-04):
-# `Broken Hill' means the County of Yancowinna.
-
-# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
-# # YANCOWINNA..  [ Confirmation courtesy of Broken Hill Postmaster ]
-# #					[ Dec 1990 ]
-# ...
-# # Yancowinna uses Central Standard Time, despite [its] location on the
-# # New South Wales side of the S.A. border. Most business and social dealings
-# # are with CST zones, therefore CST is legislated by local government
-# # although the switch to Summer Time occurs in line with N.S.W. There have
-# # been years when this did not apply, but the historical data is not
-# # presently available.
-# Zone	Australia/Yancowinna	9:30	 AY	%sST
-# ...
-# Rule	 AY	1971	1985	-	Oct	lastSun	2:00	1:00	D
-# Rule	 AY	1972	only	-	Feb	lastSun	3:00	0	C
-# [followed by other Rules]
-
-# Lord Howe Island
-
-# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
-# LHI...		[ Courtesy of Pauline Van Winsen.. pauline@Aus ]
-#					[ Dec 1990 ]
-# Lord Howe Island is located off the New South Wales coast, and is half an
-# hour ahead of NSW time.
-
-# From James Lonergan, Secretary, Lord Howe Island Board (2000-01-27):
-# Lord Howe Island summer time in 2000/2001 will commence on the same
-# date as the rest of NSW (i.e. 2000-08-27).  For your information the
-# Lord Howe Island Board (controlling authority for the Island) is
-# seeking the community's views on various options for summer time
-# arrangements on the Island, e.g. advance clocks by 1 full hour
-# instead of only 30 minutes.  Dependant on the wishes of residents
-# the Board may approach the NSW government to change the existing
-# arrangements.  The starting date for summer time on the Island will
-# however always coincide with the rest of NSW.
-
-# From James Lonergan, Secretary, Lord Howe Island Board (2000-10-25):
-# Lord Howe Island advances clocks by 30 minutes during DST in NSW and retards
-# clocks by 30 minutes when DST finishes. Since DST was most recently
-# introduced in NSW, the "changeover" time on the Island has been 02:00 as
-# shown on clocks on LHI. I guess this means that for 30 minutes at the start
-# of DST, LHI is actually 1 hour ahead of the rest of NSW.
-
-# From Paul Eggert (2001-02-09):
-# For Lord Howe dates we use Shanks through 1989, and Lonergan thereafter.
-# For times we use Lonergan.
-
-###############################################################################
-
-# New Zealand
-
-# From Mark Davies (1990-10-03):
-# the 1989/90 year was a trial of an extended "daylight saving" period.
-# This trial was deemed successful and the extended period adopted for
-# subsequent years (with the addition of a further week at the start).
-# source -- phone call to Ministry of Internal Affairs Head Office.
-
-# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
-# # The Country of New Zealand   (Australia's east island -) Gee they hate that!
-# #				   or is Australia the west island of N.Z.
-# #	[ courtesy of Geoff Tribble.. Geofft@Aus.. Auckland N.Z. ]
-# #				[ Nov 1990 ]
-# ...
-# Rule	NZ      1974    1988	-	Oct	lastSun	2:00	1:00	D
-# Rule	NZ	1989	max	-	Oct	Sun>=1	2:00	1:00	D
-# Rule	NZ      1975    1989	-	Mar	Sun>=1	3:00	0	S
-# Rule	NZ	1990	max	-	Mar	lastSun	3:00	0	S
-# ...
-# Zone	NZ			12:00	NZ		NZ%sT	# New Zealand
-# Zone	NZ-CHAT			12:45	-		NZ-CHAT # Chatham Island
-
-# From Arthur David Olson (1992-03-08):
-# The chosen rules use the Davies October 8 values for the start of DST in 1989
-# rather than the October 1 value.
-
-# From Paul Eggert (1995-12-19);
-# Shanks reports 2:00 for all autumn changes in Australia and New Zealand.
-# Robert Uzgalis <buz@cs.aukuni.ac.nz> writes that the New Zealand Daylight
-# Savings Time Order in Council dated 1990-06-18 specifies 2:00 standard
-# time on both the first Sunday in October and the third Sunday in March.
-# As with Australia, we'll assume the tradition is 2:00s, not 2:00.
-#
-# From Paul Eggert (2003-05-26):
-# The Department of Internal Affairs (DIA) maintains a brief history,
-# as does Carol Squires; see tz-link.htm for the full references.
-# Use these sources in preference to Shanks.
-#
-# For Chatham, IATA SSIM (1991/1999) gives the NZ rules but with
-# transitions at 2:45 local standard time; this confirms that Chatham
-# is always exactly 45 minutes ahead of Auckland.
-
-###############################################################################
-
-
-# Fiji
-
-# Howse writes (p 153) that in 1879 the British governor of Fiji
-# enacted an ordinance standardizing the islands on Antipodean Time
-# instead of the American system (which was one day behind).
-
-# From Rives McDow (1998-10-08):
-# Fiji will introduce DST effective 0200 local time, 1998-11-01
-# until 0300 local time 1999-02-28.  Each year the DST period will
-# be from the first Sunday in November until the last Sunday in February.
-
-# From Paul Eggert (2000-01-08):
-# IATA SSIM (1999-09) says DST ends 0100 local time.  Go with McDow.
-
-# From the BBC World Service (1998-10-31 11:32 UTC):
-# The Fijiian government says the main reasons for the time change is to
-# improve productivity and reduce road accidents.  But correspondents say it
-# also hopes the move will boost Fiji's ability to compete with other pacific
-# islands in the effort to attract tourists to witness the dawning of the new
-# millenium.
-
-# http://www.fiji.gov.fj/press/2000_09/2000_09_13-05.shtml (2000-09-13)
-# reports that Fiji has discontinued DST.
-
-# Johnston
-
-# Johnston data is from usno1995.
-
-
-# Kiribati
-
-# From Paul Eggert (1996-01-22):
-# Today's _Wall Street Journal_ (page 1) reports that Kiribati
-# ``declared it the same day throught the country as of Jan. 1, 1995''
-# as part of the competition to be first into the 21st century.
-
-
-# Kwajalein
-
-# In comp.risks 14.87 (26 August 1993), Peter Neumann writes:
-# I wonder what happened in Kwajalein, where there was NO Friday,
-# 1993-08-20.  Thursday night at midnight Kwajalein switched sides with
-# respect to the International Date Line, to rejoin its fellow islands,
-# going from 11:59 p.m. Thursday to 12:00 m. Saturday in a blink.
-
-
-# N Mariana Is, Guam
-
-# Howse writes (p 153) ``The Spaniards, on the other hand, reached the
-# Philippines and the Ladrones from America,'' and implies that the Ladrones
-# (now called the Marianas) kept American date for quite some time.
-# For now, we assume the Ladrones switched at the same time as the Philippines;
-# see Asia/Manila.
-
-# US Public Law 106-564 (2000-12-23) made UTC+10 the official standard time,
-# under the name "Chamorro Standard Time".  There is no official abbreviation,
-# but Congressman Robert A. Underwood, author of the bill that became law,
-# wrote in a press release (2000-12-27) that he will seek the use of "ChST".
-
-
-# Micronesia
-
-# Alan Eugene Davis <adavis@kuentos.guam.net> writes (1996-03-16),
-# ``I am certain, having lived there for the past decade, that "Truk"
-# (now properly known as Chuuk) ... is in the time zone GMT+10.''
-#
-# Shanks writes that Truk switched from UTC+10 to UTC+11 on 1978-10-01;
-# ignore this for now.
-
-# From Paul Eggert (1999-10-29):
-# The Federated States of Micronesia Visitors Board writes in
-# <a href="http://www.fsmgov.org/info/clocks.html">
-# The Federated States of Micronesia - Visitor Information
-# </a> (1999-01-26)
-# that Truk and Yap are UTC+10, and Ponape and Kosrae are UTC+11.
-# We don't know when Kosrae switched from UTC+12; assume January 1 for now.
-
-
-# Midway
-
-# From Charles T O'Connor, KMTH DJ (1956),
-# quoted in the KTMH section of the Radio Heritage Collection
-# <http://radiodx.com/spdxr/KMTH.htm> (2002-12-31):
-# For the past two months we've been on what is known as Daylight
-# Saving Time.  This time has put us on air at 5am in the morning,
-# your time down there in New Zealand.  Starting September 2, 1956
-# we'll again go back to Standard Time.  This'll mean that we'll go to
-# air at 6am your time.
-#
-# From Paul Eggert (2003-03-23):
-# We don't know the date of that quote, but we'll guess they
-# started DST on June 3.  Possibly DST was observed other years
-# in Midway, but we have no record of it.
-
-
-# Pitcairn
-
-# From Rives McDow (1999-11-08):
-# A Proclamation was signed by the Governor of Pitcairn on the 27th March 1998
-# with regard to Pitcairn Standard Time.  The Proclamation is as follows.
-#
-#	The local time for general purposes in the Islands shall be
-#	Co-ordinated Universal time minus 8 hours and shall be known
-#	as Pitcairn Standard Time.
-#
-# ... I have also seen Pitcairn listed as UTC minus 9 hours in several
-# references, and can only assume that this was an error in interpretation
-# somehow in light of this proclamation.
-
-# From Rives McDow (1999-11-09):
-# The Proclamation regarding Pitcairn time came into effect on 27 April 1998
-# ... at midnight.
-
-# From Howie Phelps (1999-11-10), who talked to a Pitcairner via shortwave:
-# Betty Christian told me yesterday that their local time is the same as
-# Pacific Standard Time. They used to be 1/2 hour different from us here in
-# Sacramento but it was changed a couple of years ago.
-
-
-# Samoa
-
-# Howse writes (p 153, citing p 10 of the 1883-11-18 New York Herald)
-# that in 1879 the King of Samoa decided to change
-# ``the date in his kingdom from the Antipodean to the American system,
-# ordaining -- by a masterpiece of diplomatic flattery -- that
-# the Fourth of July should be celebrated twice in that year.''
-
-
-# Tonga
-
-# From Paul Eggert (1996-01-22):
-# Today's _Wall Street Journal_ (p 1) reports that ``Tonga has been plotting
-# to sneak ahead of [New Zealanders] by introducing daylight-saving time.''
-# Since Kiribati has moved the Date Line it's not clear what Tonga will do.
-
-# Don Mundell writes in the 1997-02-20 Tonga Chronicle
-# <a href="http://www.tongatapu.net.to/tonga/homeland/timebegins.htm">
-# How Tonga became `The Land where Time Begins'
-# </a>:
-
-# Until 1941 Tonga maintained a standard time 50 minutes ahead of NZST
-# 12 hours and 20 minutes ahead of GMT.  When New Zealand adjusted its
-# standard time in 1940s, Tonga had the choice of subtracting from its
-# local time to come on the same standard time as New Zealand or of
-# advancing its time to maintain the differential of 13 degrees
-# (approximately 50 minutes ahead of New Zealand time).
-#
-# Because His Majesty King Taufa'ahau Tupou IV, then Crown Prince
-# Tungi, preferred to ensure Tonga's title as the land where time
-# begins, the Legislative Assembly approved the latter change.
-#
-# But some of the older, more conservative members from the outer
-# islands objected. "If at midnight on Dec. 31, we move ahead 40
-# minutes, as your Royal Highness wishes, what becomes of the 40
-# minutes we have lost?"
-#
-# The Crown Prince, presented an unanswerable argument: "Remember that
-# on the World Day of Prayer, you would be the first people on Earth
-# to say your prayers in the morning."
-
-# From Paul Eggert (1999-08-12):
-# Shanks says the transition was on 1968-10-01; go with Mundell.
-
-# From Eric Ulevik (1999-05-03):
-# Tonga's director of tourism, who is also secretary of the National Millenium
-# Committee, has a plan to get Tonga back in front.
-# He has proposed a one-off move to tropical daylight saving for Tonga from
-# October to March, which has won approval in principle from the Tongan
-# Government.
-
-# From Steffen Thorsen [straen@thorsen.priv.no] (1999-09-09):
-# * Tonga will introduce DST in November
-#
-# I was given this link by John Letts <johnletts@earthlink.net>:
-# <a hef="http://news.bbc.co.uk/hi/english/world/asia-pacific/newsid_424000/424764.stm">
-# http://news.bbc.co.uk/hi/english/world/asia-pacific/newsid_424000/424764.stm
-# </a>
-#
-# I have not been able to find exact dates for the transition in November
-# yet. By reading this article it seems like Fiji will be 14 hours ahead
-# of UTC as well, but as far as I know Fiji will only be 13 hours ahead
-# (12 + 1 hour DST).
-
-# From Arthur David Olson [arthur_david_olson@nih.gov] (1999-09-20):
-# According to <a href="http://www.tongaonline.com/news/sept1799.html>
-# http://www.tongaonline.com/news/sept1799.html
-# </a>:
-# "Daylight Savings Time will take effect on Oct. 2 through April 15, 2000
-# and annually thereafter from the first Saturday in October through the
-# third Saturday of April.  Under the system approved by Privy Council on
-# Sept. 10, clocks must be turned ahead one hour on the opening day and
-# set back an hour on the closing date."
-# Alas, no indication of the time of day.
-
-# From Rives McDow (1999-10-06):
-# Tonga started its Daylight Saving on Saturday morning October 2nd at 0200am.
-# Daylight Saving ends on April 16 at 0300am which is Sunday morning.
-
-# From Steffen Thorsen (2000-10-31):
-# Back in March I found a notice on the website http://www.tongaonline.com
-# that Tonga changed back to standard time one month early, on March 19
-# instead of the original reported date April 16. Unfortunately, the article
-# is no longer available on the site, and I did not make a copy of the
-# text, and I have forgotten to report it here.
-# (Original URL was: http://www.tongaonline.com/news/march162000.htm )
-
-# From Rives McDow (2000-12-01):
-# Tonga is observing DST as of 2000-11-04 and will stop on 2001-01-27.
-
-# From Sione Moala-Mafi (2001-09-20) via Rives McDow:
-# At 2:00am on the first Sunday of November, the standard time in the Kingdom
-# shall be moved forward by one hour to 3:00am.  At 2:00am on the last Sunday
-# of January the standard time in the Kingdom shall be moved backward by one
-# hour to 1:00am.
-
-# From Pulu 'Anau (2002-11-05):
-# The law was for 3 years, supposedly to get renewed.  It wasn't.
-
-
-# Wake
-
-# From Vernice Anderson, Personal Secretary to Philip Jessup,
-# US Ambassador At Large (oral history interview, 1971-02-02):
-#
-# Saturday, the 14th [of October, 1950] -- ...  The time was all the
-# more confusing at that point, because we had crossed the
-# International Date Line, thus getting two Sundays.  Furthermore, we
-# discovered that Wake Island had two hours of daylight saving time
-# making calculation of time in Washington difficult if not almost
-# impossible.
-#
-# http://www.trumanlibrary.org/wake/meeting.htm
-
-# From Paul Eggert (2003-03-23):
-# We have no other report of DST in Wake Island, so omit this info for now.
-
-###############################################################################
-
-# The International Date Line
-
-# From Gwillim Law (2000-01-03):
-#
-# The International Date Line is not defined by any international standard,
-# convention, or treaty.  Mapmakers are free to draw it as they please.
-# Reputable mapmakers will simply ensure that every point of land appears on
-# the correct side of the IDL, according to the date legally observed there.
-#
-# When Kiribati adopted a uniform date in 1995, thereby moving the Phoenix and
-# Line Islands to the west side of the IDL (or, if you prefer, moving the IDL
-# to the east side of the Phoenix and Line Islands), I suppose that most
-# mapmakers redrew the IDL following the boundary of Kiribati.  Even that line
-# has a rather arbitrary nature.  The straight-line boundaries between Pacific
-# island nations that are shown on many maps are based on an international
-# convention, but are not legally binding national borders.
-#
-# An Anglo-French Conference on Time-Keeping at Sea (June, 1917) agreed that
-# legal time on the high seas would be zone time, i.e., the standard time at
-# the nearest meridian that is a multiple of fifteen degrees.  The date is
-# governed by the IDL; therefore, even on the high seas, there may be some
-# places as late as fourteen hours later than UTC.  And, since the IDL is not
-# an international standard, there are some places on the high seas where the
-# correct date is ambiguous.
-
-# From Paul Eggert, using references suggested by Oscar van Vlijmen
-# (2005-03-20):
-#
-# The American Practical Navigator (2002)
-# <http://pollux.nss.nima.mil/pubs/pubs_j_apn_sections.html?rid=187>
-# talks only about the 180-degree meridian with respect to ships in
-# international waters; it ignores the international date line.
+# @(#)australasia	7.72
+# This file also includes Pacific islands.
+
+# Notes are at the end of this file
+
+###############################################################################
+
+# Australia
+
+# Please see the notes below for the controversy about "EST" versus "AEST" etc.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Aus	1917	only	-	Jan	 1	0:01	1:00	-
+Rule	Aus	1917	only	-	Mar	25	2:00	0	-
+Rule	Aus	1942	only	-	Jan	 1	2:00	1:00	-
+Rule	Aus	1942	only	-	Mar	29	2:00	0	-
+Rule	Aus	1942	only	-	Sep	27	2:00	1:00	-
+Rule	Aus	1943	1944	-	Mar	lastSun	2:00	0	-
+Rule	Aus	1943	only	-	Oct	 3	2:00	1:00	-
+# Go with Whitman and the Australian National Standards Commission, which
+# says W Australia didn't use DST in 1943/1944.  Ignore Whitman's claim that
+# 1944/1945 was just like 1943/1944.
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+# Northern Territory
+Zone Australia/Darwin	 8:43:20 -	LMT	1895 Feb
+			 9:00	-	CST	1899 May
+			 9:30	Aus	CST
+# Western Australia
+Zone Australia/Perth	 7:43:24 -	LMT	1895 Dec
+			 8:00	Aus	WST	1943 Jul
+			 8:00	-	WST	1974 Oct lastSun 2:00s
+			 8:00	1:00	WST	1975 Mar Sun>=1 2:00s
+			 8:00	-	WST	1983 Oct lastSun 2:00s
+			 8:00	1:00	WST	1984 Mar Sun>=1 2:00s
+			 8:00	-	WST	1991 Nov 17 2:00s
+			 8:00	1:00	WST	1992 Mar Sun>=1 2:00s
+			 8:00	-	WST
+# Queensland
+#
+# From Alex Livingston (1996-11-01):
+# I have heard or read more than once that some resort islands off the coast
+# of Queensland chose to keep observing daylight-saving time even after
+# Queensland ceased to.
+#
+# From Paul Eggert (1996-11-22):
+# IATA SSIM (1993-02/1994-09) say that the Holiday Islands (Hayman, Lindeman,
+# Hamilton) observed DST for two years after the rest of Queensland stopped.
+# Hamilton is the largest, but there is also a Hamilton in Victoria,
+# so use Lindeman.
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	AQ	1971	only	-	Oct	lastSun	2:00s	1:00	-
+Rule	AQ	1972	only	-	Feb	lastSun	2:00s	0	-
+Rule	AQ	1989	1991	-	Oct	lastSun	2:00s	1:00	-
+Rule	AQ	1990	1992	-	Mar	Sun>=1	2:00s	0	-
+Rule	Holiday	1992	1993	-	Oct	lastSun	2:00s	1:00	-
+Rule	Holiday	1993	1994	-	Mar	Sun>=1	2:00s	0	-
+Zone Australia/Brisbane	10:12:08 -	LMT	1895
+			10:00	Aus	EST	1971
+			10:00	AQ	EST
+Zone Australia/Lindeman  9:55:56 -	LMT	1895
+			10:00	Aus	EST	1971
+			10:00	AQ	EST	1992 Jul
+			10:00	Holiday	EST
+
+# South Australia
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	AS	1971	1985	-	Oct	lastSun	2:00s	1:00	-
+Rule	AS	1986	only	-	Oct	19	2:00s	1:00	-
+Rule	AS	1987	max	-	Oct	lastSun	2:00s	1:00	-
+Rule	AS	1972	only	-	Feb	27	2:00s	0	-
+Rule	AS	1973	1985	-	Mar	Sun>=1	2:00s	0	-
+Rule	AS	1986	1989	-	Mar	Sun>=15	2:00s	0	-
+Rule	AS	1990	only	-	Mar	Sun>=18	2:00s	0	-
+Rule	AS	1991	only	-	Mar	Sun>=1	2:00s	0	-
+Rule	AS	1992	only	-	Mar	Sun>=18	2:00s	0	-
+Rule	AS	1993	only	-	Mar	Sun>=1	2:00s	0	-
+Rule	AS	1994	only	-	Mar	Sun>=18	2:00s	0	-
+Rule	AS	1995	max	-	Mar	lastSun	2:00s	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Australia/Adelaide	9:14:20 -	LMT	1895 Feb
+			9:00	-	CST	1899 May
+			9:30	Aus	CST	1971
+			9:30	AS	CST
+
+# Tasmania
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	AT	1967	only	-	Oct	Sun>=1	2:00s	1:00	-
+Rule	AT	1968	only	-	Mar	lastSun	2:00s	0	-
+Rule	AT	1968	1985	-	Oct	lastSun	2:00s	1:00	-
+Rule	AT	1969	1971	-	Mar	Sun>=8	2:00s	0	-
+Rule	AT	1972	only	-	Feb	lastSun	2:00s	0	-
+Rule	AT	1973	1981	-	Mar	Sun>=1	2:00s	0	-
+Rule	AT	1982	1983	-	Mar	lastSun	2:00s	0	-
+Rule	AT	1984	1986	-	Mar	Sun>=1	2:00s	0	-
+Rule	AT	1986	only	-	Oct	Sun>=15	2:00s	1:00	-
+Rule	AT	1987	1990	-	Mar	Sun>=15	2:00s	0	-
+Rule	AT	1987	only	-	Oct	Sun>=22	2:00s	1:00	-
+Rule	AT	1988	1990	-	Oct	lastSun	2:00s	1:00	-
+Rule	AT	1991	1999	-	Oct	Sun>=1	2:00s	1:00	-
+Rule	AT	1991	max	-	Mar	lastSun	2:00s	0	-
+Rule	AT	2000	only	-	Aug	lastSun	2:00s	1:00	-
+Rule	AT	2001	max	-	Oct	Sun>=1	2:00s	1:00	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Australia/Hobart	9:49:16	-	LMT	1895 Sep
+			10:00	-	EST	1916 Oct 1 2:00
+			10:00	1:00	EST	1917 Feb
+			10:00	Aus	EST	1967
+			10:00	AT	EST
+
+# Victoria
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	AV	1971	1985	-	Oct	lastSun	2:00s	1:00	-
+Rule	AV	1972	only	-	Feb	lastSun	2:00s	0	-
+Rule	AV	1973	1985	-	Mar	Sun>=1	2:00s	0	-
+Rule	AV	1986	1990	-	Mar	Sun>=15	2:00s	0	-
+Rule	AV	1986	1987	-	Oct	Sun>=15	2:00s	1:00	-
+Rule	AV	1988	1999	-	Oct	lastSun	2:00s	1:00	-
+Rule	AV	1991	1994	-	Mar	Sun>=1	2:00s	0	-
+Rule	AV	1995	max	-	Mar	lastSun	2:00s	0	-
+Rule	AV	2000	only	-	Aug	lastSun	2:00s	1:00	-
+Rule	AV	2001	max	-	Oct	lastSun	2:00s	1:00	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Australia/Melbourne 9:39:52 -	LMT	1895 Feb
+			10:00	Aus	EST	1971
+			10:00	AV	EST
+
+# New South Wales
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	AN	1971	1985	-	Oct	lastSun	2:00s	1:00	-
+Rule	AN	1972	only	-	Feb	27	2:00s	0	-
+Rule	AN	1973	1981	-	Mar	Sun>=1	2:00s	0	-
+Rule	AN	1982	only	-	Apr	Sun>=1	2:00s	0	-
+Rule	AN	1983	1985	-	Mar	Sun>=1	2:00s	0	-
+Rule	AN	1986	1989	-	Mar	Sun>=15	2:00s	0	-
+Rule	AN	1986	only	-	Oct	19	2:00s	1:00	-
+Rule	AN	1987	1999	-	Oct	lastSun	2:00s	1:00	-
+Rule	AN	1990	1995	-	Mar	Sun>=1	2:00s	0	-
+Rule	AN	1996	max	-	Mar	lastSun	2:00s	0	-
+Rule	AN	2000	only	-	Aug	lastSun	2:00s	1:00	-
+Rule	AN	2001	max	-	Oct	lastSun	2:00s	1:00	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Australia/Sydney	10:04:52 -	LMT	1895 Feb
+			10:00	Aus	EST	1971
+			10:00	AN	EST
+Zone Australia/Broken_Hill 9:25:48 -	LMT	1895 Feb
+			10:00	-	EST	1896 Aug 23
+			9:00	-	CST	1899 May
+			9:30	Aus	CST	1971
+			9:30	AN	CST	2000
+			9:30	AS	CST
+
+# Lord Howe Island
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	LH	1981	1984	-	Oct	lastSun	2:00	1:00	-
+Rule	LH	1982	1985	-	Mar	Sun>=1	2:00	0	-
+Rule	LH	1985	only	-	Oct	lastSun	2:00	0:30	-
+Rule	LH	1986	1989	-	Mar	Sun>=15	2:00	0	-
+Rule	LH	1986	only	-	Oct	19	2:00	0:30	-
+Rule	LH	1987	1999	-	Oct	lastSun	2:00	0:30	-
+Rule	LH	1990	1995	-	Mar	Sun>=1	2:00	0	-
+Rule	LH	1996	max	-	Mar	lastSun	2:00	0	-
+Rule	LH	2000	only	-	Aug	lastSun	2:00	0:30	-
+Rule	LH	2001	max	-	Oct	lastSun	2:00	0:30	-
+Zone Australia/Lord_Howe 10:36:20 -	LMT	1895 Feb
+			10:00	-	EST	1981 Mar
+			10:30	LH	LHST
+
+# Australian miscellany
+#
+# Ashmore Is, Cartier
+# no indigenous inhabitants; only seasonal caretakers
+# like Australia/Perth, says Turner
+#
+# Coral Sea Is
+# no indigenous inhabitants; only meteorologists
+# no information
+#
+# Macquarie
+# permanent occupation (scientific station) since 1948;
+# sealing and penguin oil station operated 1888/1917
+# like Australia/Hobart, says Turner
+
+# Christmas
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Indian/Christmas	7:02:52 -	LMT	1895 Feb
+			7:00	-	CXT	# Christmas Island Time
+
+# Cook Is
+# From Shanks:
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Cook	1978	only	-	Nov	12	0:00	0:30	HS
+Rule	Cook	1979	1991	-	Mar	Sun>=1	0:00	0	-
+Rule	Cook	1979	1990	-	Oct	lastSun	0:00	0:30	HS
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Pacific/Rarotonga	-10:39:04 -	LMT	1901		# Avarua
+			-10:30	-	CKT	1978 Nov 12	# Cook Is Time
+			-10:00	Cook	CK%sT
+
+# Cocos
+# These islands were ruled by the Ross family from about 1830 to 1978.
+# We don't know when standard time was introduced; for now, we guess 1900.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Indian/Cocos	6:27:40	-	LMT	1900
+			6:30	-	CCT	# Cocos Islands Time
+
+# Fiji
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Fiji	1998	1999	-	Nov	Sun>=1	2:00	1:00	S
+Rule	Fiji	1999	2000	-	Feb	lastSun	3:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Pacific/Fiji	11:53:40 -	LMT	1915 Oct 26	# Suva
+			12:00	Fiji	FJ%sT	# Fiji Time
+
+# French Polynesia
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Pacific/Gambier	 -8:59:48 -	LMT	1912 Oct	# Rikitea
+			 -9:00	-	GAMT	# Gambier Time
+Zone	Pacific/Marquesas -9:18:00 -	LMT	1912 Oct
+			 -9:30	-	MART	# Marquesas Time
+Zone	Pacific/Tahiti	 -9:58:16 -	LMT	1912 Oct	# Papeete
+			-10:00	-	TAHT	# Tahiti Time
+# Clipperton (near North America) is administered from French Polynesia;
+# it is uninhabited.
+
+# Guam
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Pacific/Guam	-14:21:00 -	LMT	1844 Dec 31
+			 9:39:00 -	LMT	1901		# Agana
+			10:00	-	GST	2000 Dec 23	# Guam
+			10:00	-	ChST	# Chamorro Standard Time
+
+# Kiribati
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Pacific/Tarawa	 11:32:04 -	LMT	1901		# Bairiki
+			 12:00	-	GILT		 # Gilbert Is Time
+Zone Pacific/Enderbury	-11:24:20 -	LMT	1901
+			-12:00	-	PHOT	1979 Oct # Phoenix Is Time
+			-11:00	-	PHOT	1995
+			 13:00	-	PHOT
+Zone Pacific/Kiritimati	-10:29:20 -	LMT	1901
+			-10:40	-	LINT	1979 Oct # Line Is Time
+			-10:00	-	LINT	1995
+			 14:00	-	LINT
+
+# N Mariana Is
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Pacific/Saipan	-14:17:00 -	LMT	1844 Dec 31
+			 9:43:00 -	LMT	1901
+			 9:00	-	MPT	1969 Oct # N Mariana Is Time
+			10:00	-	MPT	2000 Dec 23
+			10:00	-	ChST	# Chamorro Standard Time
+
+# Marshall Is
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Pacific/Majuro	11:24:48 -	LMT	1901
+			11:00	-	MHT	1969 Oct # Marshall Islands Time
+			12:00	-	MHT
+Zone Pacific/Kwajalein	11:09:20 -	LMT	1901
+			11:00	-	MHT	1969 Oct
+			-12:00	-	KWAT	1993 Aug 20	# Kwajalein Time
+			12:00	-	MHT
+
+# Micronesia
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Pacific/Yap	9:12:32	-	LMT	1901		# Colonia
+			9:00	-	YAPT	1969 Oct	# Yap Time
+			10:00	-	YAPT
+Zone Pacific/Truk	10:07:08 -	LMT	1901
+			10:00	-	TRUT			# Truk Time
+Zone Pacific/Ponape	10:32:52 -	LMT	1901		# Kolonia
+			11:00	-	PONT			# Ponape Time
+Zone Pacific/Kosrae	10:51:56 -	LMT	1901
+			11:00	-	KOST	1969 Oct	# Kosrae Time
+			12:00	-	KOST	1999
+			11:00	-	KOST
+
+# Nauru
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Pacific/Nauru	11:07:40 -	LMT	1921 Jan 15	# Uaobe
+			11:30	-	NRT	1942 Mar 15	# Nauru Time
+			9:00	-	JST	1944 Aug 15
+			11:30	-	NRT	1979 May
+			12:00	-	NRT
+
+# New Caledonia
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	NC	1977	1978	-	Dec	Sun>=1	0:00	1:00	S
+Rule	NC	1978	1979	-	Feb	27	0:00	0	-
+Rule	NC	1996	only	-	Dec	 1	2:00s	1:00	S
+# Shanks says the following was at 2:00; go with IATA.
+Rule	NC	1997	only	-	Mar	 2	2:00s	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Pacific/Noumea	11:05:48 -	LMT	1912 Jan 13
+			11:00	NC	NC%sT
+
+
+###############################################################################
+
+# New Zealand
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	NZ	1927	only	-	Nov	 6	2:00	1:00	S
+Rule	NZ	1928	only	-	Mar	 4	2:00	0	M
+Rule	NZ	1928	1933	-	Oct	Sun>=8	2:00	0:30	S
+Rule	NZ	1929	1933	-	Mar	Sun>=15	2:00	0	M
+Rule	NZ	1934	1940	-	Apr	lastSun	2:00	0	M
+Rule	NZ	1934	1940	-	Sep	lastSun	2:00	0:30	S
+Rule	NZ	1946	only	-	Jan	 1	0:00	0	S
+# Since 1957 Chatham has been 45 minutes ahead of NZ, but there's no
+# convenient notation for this so we must duplicate the Rule lines.
+Rule	NZ	1974	only	-	Nov	Sun>=1	2:00s	1:00	D
+Rule	Chatham	1974	only	-	Nov	Sun>=1	2:45s	1:00	D
+Rule	NZ	1975	only	-	Feb	lastSun	2:00s	0	S
+Rule	Chatham	1975	only	-	Feb	lastSun	2:45s	0	S
+Rule	NZ	1975	1988	-	Oct	lastSun	2:00s	1:00	D
+Rule	Chatham	1975	1988	-	Oct	lastSun	2:45s	1:00	D
+Rule	NZ	1976	1989	-	Mar	Sun>=1	2:00s	0	S
+Rule	Chatham	1976	1989	-	Mar	Sun>=1	2:45s	0	S
+Rule	NZ	1989	only	-	Oct	Sun>=8	2:00s	1:00	D
+Rule	Chatham	1989	only	-	Oct	Sun>=8	2:45s	1:00	D
+Rule	NZ	1990	max	-	Oct	Sun>=1	2:00s	1:00	D
+Rule	Chatham	1990	max	-	Oct	Sun>=1	2:45s	1:00	D
+Rule	NZ	1990	max	-	Mar	Sun>=15	2:00s	0	S
+Rule	Chatham	1990	max	-	Mar	Sun>=15	2:45s	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Pacific/Auckland	11:39:04 -	LMT	1868 Nov  2
+			11:30	NZ	NZ%sT	1946 Jan  1
+			12:00	NZ	NZ%sT
+Zone Pacific/Chatham	12:13:48 -	LMT	1957 Jan  1
+			12:45	Chatham	CHA%sT
+
+
+# Auckland Is
+# uninhabited; Maori and Moriori, colonial settlers, pastoralists, sealers,
+# and scientific personnel have wintered
+
+# Campbell I
+# minor whaling stations operated 1909/1914
+# scientific station operated 1941/1995;
+# previously whalers, sealers, pastoralists, and scientific personnel wintered
+# was probably like Pacific/Auckland
+
+###############################################################################
+
+
+# Niue
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Pacific/Niue	-11:19:40 -	LMT	1901		# Alofi
+			-11:20	-	NUT	1951	# Niue Time
+			-11:30	-	NUT	1978 Oct 1
+			-11:00	-	NUT
+
+# Norfolk
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Pacific/Norfolk	11:11:52 -	LMT	1901		# Kingston
+			11:12	-	NMT	1951	# Norfolk Mean Time
+			11:30	-	NFT		# Norfolk Time
+
+# Palau (Belau)
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Pacific/Palau	8:57:56 -	LMT	1901		# Koror
+			9:00	-	PWT	# Palau Time
+
+# Papua New Guinea
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Pacific/Port_Moresby 9:48:40 -	LMT	1880
+			9:48:32	-	PMMT	1895	# Port Moresby Mean Time
+			10:00	-	PGT		# Papua New Guinea Time
+
+# Pitcairn
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Pacific/Pitcairn	-8:40:20 -	LMT	1901		# Adamstown
+			-8:30	-	PNT	1998 Apr 27 00:00
+			-8:00	-	PST	# Pitcairn Standard Time
+
+# American Samoa
+Zone Pacific/Pago_Pago	 12:37:12 -	LMT	1879 Jul  5
+			-11:22:48 -	LMT	1911
+			-11:30	-	SAMT	1950		# Samoa Time
+			-11:00	-	NST	1967 Apr	# N=Nome
+			-11:00	-	BST	1983 Nov 30	# B=Bering
+			-11:00	-	SST			# S=Samoa
+
+# Samoa
+Zone Pacific/Apia	 12:33:04 -	LMT	1879 Jul  5
+			-11:26:56 -	LMT	1911
+			-11:30	-	SAMT	1950		# Samoa Time
+			-11:00	-	WST			# Samoa Time
+
+# Solomon Is
+# excludes Bougainville, for which see Papua New Guinea
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Pacific/Guadalcanal 10:39:48 -	LMT	1912 Oct	# Honiara
+			11:00	-	SBT	# Solomon Is Time
+
+# Tokelau Is
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Pacific/Fakaofo	-11:24:56 -	LMT	1901
+			-10:00	-	TKT	# Tokelau Time
+
+# Tonga
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Tonga	1999	only	-	Oct	 7	2:00s	1:00	S
+Rule	Tonga	2000	only	-	Mar	19	2:00s	0	-
+Rule	Tonga	2000	2001	-	Nov	Sun>=1	2:00	1:00	S
+Rule	Tonga	2001	2002	-	Jan	lastSun	2:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Pacific/Tongatapu	12:19:20 -	LMT	1901
+			12:20	-	TOT	1941 # Tonga Time
+			13:00	-	TOT	1999
+			13:00	Tonga	TO%sT
+
+# Tuvalu
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Pacific/Funafuti	11:56:52 -	LMT	1901
+			12:00	-	TVT	# Tuvalu Time
+
+
+# US minor outlying islands
+
+# Howland, Baker
+# uninhabited since World War II
+# no information; was probably like Pacific/Pago_Pago
+
+# Jarvis
+# uninhabited since 1958
+# no information; was probably like Pacific/Kiritimati
+
+# Johnston
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Pacific/Johnston	-10:00	-	HST
+
+# Kingman
+# uninhabited
+
+# Midway
+#
+# From Mark Brader (2005-01-23):
+# [Fallacies and Fantasies of Air Transport History, by R.E.G. Davies,
+# published 1994 by Paladwr Press, McLean, VA, USA; ISBN 0-9626483-5-3]
+# reproduced a Pan American Airways timeables from 1936, for their weekly
+# "Orient Express" flights between San Francisco and Manila, and connecting
+# flights to Chicago and the US East Coast.  As it uses some time zone
+# designations that I've never seen before:....
+# Fri. 6:30A Lv. HONOLOLU (Pearl Harbor), H.I.   H.L.T. Ar. 5:30P Sun.
+#  "   3:00P Ar. MIDWAY ISLAND . . . . . . . . . M.L.T. Lv. 6:00A  "
+#
+Zone Pacific/Midway	-11:49:28 -	LMT	1901
+			-11:00	-	NST	1956 Jun  3
+			-11:00	1:00	NDT	1956 Sep  2
+			-11:00	-	NST	1967 Apr	# N=Nome
+			-11:00	-	BST	1983 Nov 30	# B=Bering
+			-11:00	-	SST			# S=Samoa
+
+# Palmyra
+# uninhabited since World War II; was probably like Pacific/Kiritimati
+
+# Wake
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Pacific/Wake	11:06:28 -	LMT	1901
+			12:00	-	WAKT	# Wake Time
+
+
+# Vanuatu
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Vanuatu	1983	only	-	Sep	25	0:00	1:00	S
+Rule	Vanuatu	1984	1991	-	Mar	Sun>=23	0:00	0	-
+Rule	Vanuatu	1984	only	-	Oct	23	0:00	1:00	S
+Rule	Vanuatu	1985	1991	-	Sep	Sun>=23	0:00	1:00	S
+Rule	Vanuatu	1992	1993	-	Jan	Sun>=23	0:00	0	-
+Rule	Vanuatu	1992	only	-	Oct	Sun>=23	0:00	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Pacific/Efate	11:13:16 -	LMT	1912 Jan 13		# Vila
+			11:00	Vanuatu	VU%sT	# Vanuatu Time
+
+# Wallis and Futuna
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Pacific/Wallis	12:15:20 -	LMT	1901
+			12:00	-	WFT	# Wallis & Futuna Time
+
+###############################################################################
+
+# NOTES
+
+# This data is by no means authoritative; if you think you know better,
+# go ahead and edit the file (and please send any changes to
+# tz@elsie.nci.nih.gov for general use in the future).
+
+# From Paul Eggert (1999-10-29):
+# A good source for time zone historical data outside the U.S. is
+# Thomas G. Shanks, The International Atlas (5th edition),
+# San Diego: ACS Publications, Inc. (1999).
+#
+# Gwillim Law writes that a good source
+# for recent time zone data is the International Air Transport
+# Association's Standard Schedules Information Manual (IATA SSIM),
+# published semiannually.  Law sent in several helpful summaries
+# of the IATA's data after 1990.
+#
+# Except where otherwise noted, Shanks is the source for entries through 1990,
+# and IATA SSIM is the source for entries after 1990.
+#
+# Another source occasionally used is Edward W. Whitman, World Time Differences,
+# Whitman Publishing Co, 2 Niagara Av, Ealing, London (undated), which
+# I found in the UCLA library.
+#
+# A reliable and entertaining source about time zones is
+# Derek Howse, Greenwich time and longitude, Philip Wilson Publishers (1997).
+#
+# I invented the abbreviations marked `*' in the following table;
+# the rest are from earlier versions of this file, or from other sources.
+# Corrections are welcome!
+#		std dst
+#		LMT	Local Mean Time
+#	  8:00	WST WST	Western Australia
+#	  9:00	JST	Japan
+#	  9:30	CST CST	Central Australia
+#	 10:00	EST EST	Eastern Australia
+#	 10:00	ChST	Chamorro
+#	 10:30	LHST LHST Lord Howe*
+#	 11:30	NZMT NZST New Zealand through 1945
+#	 12:00	NZST NZDT New Zealand 1946-present
+#	 12:45	CHAST CHADT Chatham*
+#	-11:00	SST	Samoa
+#	-10:00	HST	Hawaii
+#	- 8:00	PST	Pitcairn*
+#
+# See the `northamerica' file for Hawaii.
+# See the `southamerica' file for Easter I and the Galapagos Is.
+
+###############################################################################
+
+# Australia
+
+# <a href="http://www.dstc.qut.edu.au/DST/marg/daylight.html">
+# Australia's Daylight Saving Times
+# </a>, by Margaret Turner, summarizes daylight saving issues in Australia.
+
+# From John Mackin (1991-03-06):
+# We in Australia have _never_ referred to DST as `daylight' time.
+# It is called `summer' time.  Now by a happy coincidence, `summer'
+# and `standard' happen to start with the same letter; hence, the
+# abbreviation does _not_ change...
+# The legislation does not actually define abbreviations, at least
+# in this State, but the abbreviation is just commonly taken to be the
+# initials of the phrase, and the legislation here uniformly uses
+# the phrase `summer time' and does not use the phrase `daylight
+# time'.
+# Announcers on the Commonwealth radio network, the ABC (for Australian
+# Broadcasting Commission), use the phrases `Eastern Standard Time'
+# or `Eastern Summer Time'.  (Note, though, that as I say in the
+# current australasia file, there is really no such thing.)  Announcers
+# on its overseas service, Radio Australia, use the same phrases
+# prefixed by the word `Australian' when referring to local times;
+# time announcements on that service, naturally enough, are made in UTC.
+
+# From Arthur David Olson (1992-03-08):
+# Given the above, what's chosen for year-round use is:
+#	CST	for any place operating at a GMTOFF of 9:30
+#	WST	for any place operating at a GMTOFF of 8:00
+#	EST	for any place operating at a GMTOFF of 10:00
+
+# From Paul Eggert (2001-04-05), summarizing a long discussion about "EST"
+# versus "AEST" etc.:
+#
+# I see the following points of dispute:
+#
+# * How important are unique time zone abbreviations?
+#
+#   Here I tend to agree with the point (most recently made by Chris
+#   Newman) that unique abbreviations should not be essential for proper
+#   operation of software.  We have other instances of ambiguity
+#   (e.g. "IST" denoting both "Israel Standard Time" and "Indian
+#   Standard Time"), and they are not likely to go away any time soon.
+#   In the old days, some software mistakenly relied on unique
+#   abbreviations, but this is becoming less true with time, and I don't
+#   think it's that important to cater to such software these days.
+#
+#   On the other hand, there is another motivation for unambiguous
+#   abbreviations: it cuts down on human confusion.  This is
+#   particularly true for Australia, where "EST" can mean one thing for
+#   time T and a different thing for time T plus 1 second.
+#
+# * Does the relevant legislation indicate which abbreviations should be used?
+#
+#   Here I tend to think that things are a mess, just as they are in
+#   many other countries.  We Americans are currently disagreeing about
+#   which abbreviation to use for the newly legislated Chamorro Standard
+#   Time, for example.
+#
+#   Personally, I would prefer to use common practice; I would like to
+#   refer to legislation only for examples of common practice, or as a
+#   tiebreaker.
+#
+# * Do Australians more often use "Eastern Daylight Time" or "Eastern
+#   Summer Time"?  Do they typically prefix the time zone names with
+#   the word "Australian"?
+#
+#   My own impression is that both "Daylight Time" and "Summer Time" are
+#   common and are widely understood, but that "Summer Time" is more
+#   popular; and that the leading "A" is also common but is omitted more
+#   often than not.  I just used AltaVista advanced search and got the
+#   following count of page hits:
+#
+#     1,103 "Eastern Summer Time" AND domain:au
+#       971 "Australian Eastern Summer Time" AND domain:au
+#       613 "Eastern Daylight Time" AND domain:au
+#       127 "Australian Eastern Daylight Time" AND domain:au
+#
+#   Here "Summer" seems quite a bit more popular than "Daylight",
+#   particularly when we know the time zone is Australian and not US,
+#   say.  The "Australian" prefix seems to be popular for Eastern Summer
+#   Time, but unpopular for Eastern Daylight Time.
+#
+#   For abbreviations, tools like AltaVista are less useful because of
+#   ambiguity.  Many hits are not really time zones, unfortunately, and
+#   many hits denote US time zones and not Australian ones.  But here
+#   are the hit counts anyway:
+#
+#     161,304 "EST" and domain:au
+#      25,156 "EDT" and domain:au
+#      18,263 "AEST" and domain:au
+#      10,416 "AEDT" and domain:au
+#
+#      14,538 "CST" and domain:au
+#       5,728 "CDT" and domain:au
+#         176 "ACST" and domain:au
+#          29 "ACDT" and domain:au
+#
+#       7,539 "WST" and domain:au
+#          68 "AWST" and domain:au
+#
+#   This data suggest that Australians tend to omit the "A" prefix in
+#   practice.  The situation for "ST" versus "DT" is less clear, given
+#   the ambiguities involved.
+#
+# * How do Australians feel about the abbreviations in the tz database?
+#
+#   If you just count Australians on this list, I count 2 in favor and 3
+#   against.  One of the "against" votes (David Keegel) counseled delay,
+#   saying that both AEST/AEDT and EST/EST are widely used and
+#   understood in Australia.
+
+# From Paul Eggert (1995-12-19):
+# Shanks reports 2:00 for all autumn changes in Australia and New Zealand.
+# Mark Prior writes that his newspaper
+# reports that NSW's fall 1995 change will occur at 2:00,
+# but Robert Elz says it's been 3:00 in Victoria since 1970
+# and perhaps the newspaper's `2:00' is referring to standard time.
+# For now we'll continue to assume 2:00s for changes since 1960.
+
+# From Eric Ulevik (1998-01-05):
+#
+# Here are some URLs to Australian time legislation. These URLs are stable,
+# and should probably be included in the data file. There are probably more
+# relevant entries in this database.
+#
+# NSW (including LHI and Broken Hill):
+# <a href="http://www.austlii.edu.au/au/legis/nsw/consol_act/sta1987137/index.html">
+# Standard Time Act 1987 (updated 1995-04-04)
+# </a>
+# ACT
+# <a href="http://www.austlii.edu.au/au/legis/act/consol_act/stasta1972279/index.html">
+# Standard Time and Summer Time Act 1972
+# </a>
+# SA
+# <a href="http://www.austlii.edu.au/au/legis/sa/consol_act/sta1898137/index.html">
+# Standard Time Act, 1898
+# </a>
+
+# Northern Territory
+
+# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
+# # The NORTHERN TERRITORY..  [ Courtesy N.T. Dept of the Chief Minister ]
+# #					[ Nov 1990 ]
+# #	N.T. have never utilised any DST due to sub-tropical/tropical location.
+# ...
+# Zone        Australia/North         9:30    -       CST
+
+# From Bradley White (1991-03-04):
+# A recent excerpt from an Australian newspaper...
+# the Northern Territory do[es] not have daylight saving.
+
+# Western Australia
+
+# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
+# #  The state of WESTERN AUSTRALIA..  [ Courtesy W.A. dept Premier+Cabinet ]
+# #						[ Nov 1990 ]
+# #	W.A. suffers from a great deal of public and political opposition to
+# #	DST in principle. A bill is brought before parliament in most years, but
+# #	usually defeated either in the upper house, or in party caucus
+# #	before reaching parliament.
+# ...
+# Zone	Australia/West		8:00	AW	%sST
+# ...
+# Rule	AW	1974	only	-	Oct	lastSun	2:00	1:00	D
+# Rule	AW	1975	only	-	Mar	Sun>=1	3:00	0	W
+# Rule	AW	1983	only	-	Oct	lastSun	2:00	1:00	D
+# Rule	AW	1984	only	-	Mar	Sun>=1	3:00	0	W
+
+# From Bradley White (1991-03-04):
+# A recent excerpt from an Australian newspaper...
+# Western Australia...do[es] not have daylight saving.
+
+# From John D. Newman via Bradley White (1991-11-02):
+# Western Australia is still on "winter time". Some DH in Sydney
+# rang me at home a few days ago at 6.00am. (He had just arrived at
+# work at 9.00am.)
+# W.A. is switching to Summer Time on Nov 17th just to confuse
+# everybody again.
+
+# From Arthur David Olson (1992-03-08):
+# The 1992 ending date used in the rules is a best guess;
+# it matches what was used in the past.
+
+# <a href="http://www.bom.gov.au/faq/faqgen.htm">
+# The Australian Bureau of Meteorology FAQ
+# </a> (1999-09-27) writes that Giles Meteorological Station uses
+# South Australian time even though it's located in Western Australia.
+
+# Queensland
+# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
+# #   The state of QUEENSLAND.. [ Courtesy Qld. Dept Premier Econ&Trade Devel ]
+# #						[ Dec 1990 ]
+# ...
+# Zone	Australia/Queensland	10:00	AQ	%sST
+# ...
+# Rule	AQ	1971	only	-	Oct	lastSun	2:00	1:00	D
+# Rule	AQ	1972	only	-	Feb	lastSun	3:00	0	E
+# Rule	AQ	1989	max	-	Oct	lastSun	2:00	1:00	D
+# Rule	AQ	1990	max	-	Mar	Sun>=1	3:00	0	E
+
+# From Bradley White (1989-12-24):
+# "Australia/Queensland" now observes daylight time (i.e. from
+# October 1989).
+
+# From Bradley White (1991-03-04):
+# A recent excerpt from an Australian newspaper...
+# ...Queensland...[has] agreed to end daylight saving
+# at 3am tomorrow (March 3)...
+
+# From John Mackin (1991-03-06):
+# I can certainly confirm for my part that Daylight Saving in NSW did in fact
+# end on Sunday, 3 March.  I don't know at what hour, though.  (It surprised
+# me.)
+
+# From Bradley White (1992-03-08):
+# ...there was recently a referendum in Queensland which resulted
+# in the experimental daylight saving system being abandoned. So, ...
+# ...
+# Rule	QLD	1989	1991	-	Oct	lastSun	2:00	1:00	D
+# Rule	QLD	1990	1992	-	Mar	Sun>=1	3:00	0	S
+# ...
+
+# From Arthur David Olson (1992-03-08):
+# The chosen rules the union of the 1971/1972 change and the 1989-1992 changes.
+
+# From Rives McDow (2002-04-09):
+# The most interesting region I have found consists of three towns on the
+# southern coast of Australia, population 10 at last report, along with
+# 50,000 sheep, about 100 kilometers long and 40 kilometers into the
+# continent.  The primary town is Madura, with the other towns being
+# Mundrabilla and Eucla.  According to the sheriff of Madura, the
+# residents got tired of having to change the time so often, as they are
+# located in a strip overlapping the border of South Australia and Western
+# Australia.  South Australia observes daylight saving time; Western
+# Australia does not.  The two states are one and a half hours apart.  The
+# residents decided to forget about this nonsense of changing the clock so
+# much and set the local time 20 hours and 45 minutes from the
+# international date line, or right in the middle of the time of South
+# Australia and Western Australia.  As it only affects about 10 people and
+# tourists staying at the Madura Motel, it has never really made as big an
+# impact as Broken Hill.  However, as tourist visiting there or anyone
+# calling the local sheriff will attest, they do keep time in this way.
+#
+# From Paul Eggert (2002-04-09):
+# This is confirmed by the section entitled
+# "What's the deal with time zones???" in
+# <http://www.earthsci.unimelb.edu.au/~awatkins/null.html>,
+# which says a few other things:
+#
+# * Border Village, SA also is 45 minutes ahead of Perth.
+# * The locals call this time zone "central W.A. Time" (presumably "CWAT").
+# * The locals also call Western Australia time "Perth time".
+#
+# It's not clear from context whether everyone in Western Australia
+# knows of this naming convention, or whether it's just the people in
+# this subregion.
+
+# South Australia, Tasmania, Victoria
+
+# From Arthur David Olson (1992-03-08):
+# The rules from version 7.1 follow.
+# There are lots of differences between these rules and
+# the Shepherd et al. rules.  Since the Shepherd et al. rules
+# and Bradley White's newspaper article are in agreement on
+# current DST ending dates, no worries.
+#
+# Rule	Oz	1971	1985	-	Oct	lastSun	2:00	1:00	-
+# Rule	Oz	1986	max	-	Oct	Sun<=24	2:00	1:00	-
+# Rule	Oz	1972	only	-	Feb	27	3:00	0	-
+# Rule	Oz	1973	1986	-	Mar	Sun>=1	3:00	0	-
+# Rule	Oz	1987	max	-	Mar	Sun<=21	3:00	0	-
+# Zone	Australia/Tasmania	10:00	Oz	EST
+# Zone	Australia/South		9:30	Oz	CST
+# Zone	Australia/Victoria	10:00	Oz	EST	1985 Oct lastSun 2:00
+#				10:00	1:00	EST	1986 Mar Sun<=21 3:00
+#				10:00	Oz	EST
+
+# From Robert Elz (1991-03-06):
+# I believe that the current start date for DST is "lastSun" in Oct...
+# that changed Oct 89.  That is, we're back to the
+# original rule, and that rule currently applies in all the states
+# that have dst, incl Qld.  (Certainly it was true in Vic).
+# The file I'm including says that happened in 1988, I think
+# that's incorrect, but I'm not 100% certain.
+
+# South Australia
+
+# From Bradley White (1991-03-04):
+# A recent excerpt from an Australian newspaper...
+# ...South Australia...[has] agreed to end daylight saving
+# at 3am tomorrow (March 3)...
+
+# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
+# #   The state of SOUTH AUSTRALIA....[ Courtesy of S.A. Dept of Labour ]
+# #						[ Nov 1990 ]
+# ...
+# Zone	Australia/South		9:30	AS	%sST
+# ...
+# Rule	 AS	1971	max	-	Oct	lastSun	2:00	1:00	D
+# Rule	 AS	1972	1985	-	Mar	Sun>=1	3:00	0	C
+# Rule	 AS	1986	1990	-	Mar	Sun<=21	3:00	0	C
+# Rule	 AS	1991	max	-	Mar	Sun>=1	3:00	0	C
+
+# From Bradley White (1992-03-11):
+# Recent correspondence with a friend in Adelaide
+# contained the following exchange:  "Due to the Adelaide Festival,
+# South Australia delays setting back our clocks for a few weeks."
+
+# From Robert Elz (1992-03-13):
+# I heard that apparently (or at least, it appears that)
+# South Aus will have an extra 3 weeks daylight saving every even
+# numbered year (from 1990).  That's when the Adelaide Festival
+# is on...
+
+# From Robert Elz (1992-03-16, 00:57:07 +1000):
+# DST didn't end in Adelaide today (yesterday)....
+# But whether it's "4th Sunday" or "2nd last Sunday" I have no idea whatever...
+# (it's just as likely to be "the Sunday we pick for this year"...).
+
+# From Bradley White (1994-04-11):
+# If Sun, 15 March, 1992 was at +1030 as kre asserts, but yet Sun, 20 March,
+# 1994 was at +0930 as John Connolly's customer seems to assert, then I can
+# only conclude that the actual rule is more complicated....
+
+# From John Warburton <jwarb@SACBH.com.au> (1994-10-07):
+# The new Daylight Savings dates for South Australia ...
+# was gazetted in the Government Hansard on Sep 26 1994....
+# start on last Sunday in October and end in last sunday in March.
+
+# Tasmania
+
+# The rules for 1967 through 1991 were reported by George Shepherd
+# via Simon Woodhead via Robert Elz (1991-03-06):
+# #  The state of TASMANIA.. [Courtesy Tasmanian Dept of Premier + Cabinet ]
+# #					[ Nov 1990 ]
+
+# From Bill Hart via Guy Harris (1991-10-10):
+# Oh yes, the new daylight savings rules are uniquely tasmanian, we have
+# 6 weeks a year now when we are out of sync with the rest of Australia
+# (but nothing new about that).
+
+# From Alex Livingston (1999-10-04):
+# I heard on the ABC (Australian Broadcasting Corporation) radio news on the
+# (long) weekend that Tasmania, which usually goes its own way in this regard,
+# has decided to join with most of NSW, the ACT, and most of Victoria
+# (Australia) and start daylight saving on the last Sunday in August in 2000
+# instead of the first Sunday in October.
+
+# Sim Alam (2000-07-03) reported a legal citation for the 2000/2001 rules:
+# http://www.thelaw.tas.gov.au/fragview/42++1968+GS3A@EN+2000070300
+
+# Victoria
+
+# The rules for 1971 through 1991 were reported by George Shepherd
+# via Simon Woodhead via Robert Elz (1991-03-06):
+# #   The state of VICTORIA.. [ Courtesy of Vic. Dept of Premier + Cabinet ]
+# #						[ Nov 1990 ]
+
+# From Scott Harrington (2001-08-29):
+# On KQED's "City Arts and Lectures" program last night I heard an
+# interesting story about daylight savings time.  Dr. John Heilbron was
+# discussing his book "The Sun in the Church: Cathedrals as Solar
+# Observatories"[1], and in particular the Shrine of Remembrance[2] located
+# in Melbourne, Australia.
+#
+# Apparently the shrine's main purpose is a beam of sunlight which
+# illuminates a special spot on the floor at the 11th hour of the 11th day
+# of the 11th month (Remembrance Day) every year in memory of Australia's
+# fallen WWI soldiers.  And if you go there on Nov. 11, at 11am local time,
+# you will indeed see the sunbeam illuminate the special spot at the
+# expected time.
+#
+# However, that is only because of some special mirror contraption that had
+# to be employed, since due to daylight savings time, the true solar time of
+# the remembrance moment occurs one hour later (or earlier?).  Perhaps
+# someone with more information on this jury-rig can tell us more.
+#
+# [1] http://www.hup.harvard.edu/catalog/HEISUN.html
+# [2] http://www.shrine.org.au
+
+# New South Wales
+
+# From Arthur David Olson:
+# New South Wales and subjurisdictions have their own ideas of a fun time.
+# Based on law library research by John Mackin,
+# who notes:
+#	In Australia, time is not legislated federally, but rather by the
+#	individual states.  Thus, while such terms as ``Eastern Standard Time''
+#	[I mean, of course, Australian EST, not any other kind] are in common
+#	use, _they have NO REAL MEANING_, as they are not defined in the
+#	legislation.  This is very important to understand.
+#	I have researched New South Wales time only...
+
+# From Paul Eggert (1999-09-27):
+# The Information Service of the Australian National Standards Commission
+# <a href="http://www.nsc.gov.au/InfoServ/Ileaflet/il27.htm">
+# Daylight Saving
+# </a> page (1995-04) has an excellent overall history of Australian DST.
+# The Community Relations Division of the NSW Attorney General's Department
+# publishes a history of daylight saving in NSW.  See:
+# <a href="http://www.lawlink.nsw.gov.au/crd.nsf/pages/time2">
+# Lawlink NSW: Daylight Saving in New South Wales
+# </a>
+
+# From Eric Ulevik (1999-05-26):
+# DST will start in NSW on the last Sunday of August, rather than the usual
+# October in 2000.  [See: Matthew Moore,
+# <a href="http://www.smh.com.au/news/9905/26/pageone/pageone4.html">
+# Two months more daylight saving
+# </a>
+# Sydney Morning Herald (1999-05-26).]
+
+# From Paul Eggert (1999-09-27):
+# See the following official NSW source:
+# <a href="http://dir.gis.nsw.gov.au/cgi-bin/genobject/document/other/daylightsaving/tigGmZ">
+# Daylight Saving in New South Wales.
+# </a>
+#
+# Narrabri Shire (NSW) council has announced it will ignore the extension of
+# daylight saving next year.  See:
+# <a href="http://abc.net.au/news/regionals/neweng/monthly/regeng-22jul1999-1.htm">
+# Narrabri Council to ignore daylight saving
+# </a> (1999-07-22).  For now, we'll wait to see if this really happens.
+#
+# Victoria will following NSW.  See:
+# <a href="http://abc.net.au/local/news/olympics/1999/07/item19990728112314_1.htm">
+# Vic to extend daylight saving
+# </a> (1999-07-28).
+#
+# However, South Australia rejected the DST request.  See:
+# <a href="http://abc.net.au/news/olympics/1999/07/item19990719151754_1.htm">
+# South Australia rejects Olympics daylight savings request
+# </a> (1999-07-19).
+#
+# Queensland also will not observe DST for the Olympics.  See:
+# <a href="http://abc.net.au/news/olympics/1999/06/item19990601114608_1.htm">
+# Qld says no to daylight savings for Olympics
+# </a> (1999-06-01), which quotes Queensland Premier Peter Beattie as saying
+# ``Look you've got to remember in my family when this came up last time
+# I voted for it, my wife voted against it and she said to me it's all very
+# well for you, you don't have to worry about getting the children out of
+# bed, getting them to school, getting them to sleep at night.
+# I've been through all this argument domestically...my wife rules.''
+#
+# Broken Hill will stick with South Australian time in 2000.  See:
+# <a href="http://abc.net.au/news/regionals/brokenh/monthly/regbrok-21jul1999-6.htm">
+# Broken Hill to be behind the times
+# </a> (1999-07-21).
+
+# IATA SSIM (1998-09) says that the spring 2000 change for Australian
+# Capital Territory, New South Wales except Lord Howe Island and Broken
+# Hill, and Victoria will be August 27, presumably due to the Sydney Olympics.
+
+# From Eric Ulevik, referring to Sydney's Sun Herald (2000-08-13), page 29:
+# The Queensland Premier Peter Beattie is encouraging northern NSW
+# towns to use Queensland time.
+
+# Yancowinna
+
+# From John Mackin (1989-01-04):
+# `Broken Hill' means the County of Yancowinna.
+
+# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
+# # YANCOWINNA..  [ Confirmation courtesy of Broken Hill Postmaster ]
+# #					[ Dec 1990 ]
+# ...
+# # Yancowinna uses Central Standard Time, despite [its] location on the
+# # New South Wales side of the S.A. border. Most business and social dealings
+# # are with CST zones, therefore CST is legislated by local government
+# # although the switch to Summer Time occurs in line with N.S.W. There have
+# # been years when this did not apply, but the historical data is not
+# # presently available.
+# Zone	Australia/Yancowinna	9:30	 AY	%sST
+# ...
+# Rule	 AY	1971	1985	-	Oct	lastSun	2:00	1:00	D
+# Rule	 AY	1972	only	-	Feb	lastSun	3:00	0	C
+# [followed by other Rules]
+
+# Lord Howe Island
+
+# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
+# LHI...		[ Courtesy of Pauline Van Winsen.. pauline@Aus ]
+#					[ Dec 1990 ]
+# Lord Howe Island is located off the New South Wales coast, and is half an
+# hour ahead of NSW time.
+
+# From James Lonergan, Secretary, Lord Howe Island Board (2000-01-27):
+# Lord Howe Island summer time in 2000/2001 will commence on the same
+# date as the rest of NSW (i.e. 2000-08-27).  For your information the
+# Lord Howe Island Board (controlling authority for the Island) is
+# seeking the community's views on various options for summer time
+# arrangements on the Island, e.g. advance clocks by 1 full hour
+# instead of only 30 minutes.  Dependant on the wishes of residents
+# the Board may approach the NSW government to change the existing
+# arrangements.  The starting date for summer time on the Island will
+# however always coincide with the rest of NSW.
+
+# From James Lonergan, Secretary, Lord Howe Island Board (2000-10-25):
+# Lord Howe Island advances clocks by 30 minutes during DST in NSW and retards
+# clocks by 30 minutes when DST finishes. Since DST was most recently
+# introduced in NSW, the "changeover" time on the Island has been 02:00 as
+# shown on clocks on LHI. I guess this means that for 30 minutes at the start
+# of DST, LHI is actually 1 hour ahead of the rest of NSW.
+
+# From Paul Eggert (2001-02-09):
+# For Lord Howe dates we use Shanks through 1989, and Lonergan thereafter.
+# For times we use Lonergan.
+
+###############################################################################
+
+# New Zealand
+
+# From Mark Davies (1990-10-03):
+# the 1989/90 year was a trial of an extended "daylight saving" period.
+# This trial was deemed successful and the extended period adopted for
+# subsequent years (with the addition of a further week at the start).
+# source -- phone call to Ministry of Internal Affairs Head Office.
+
+# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
+# # The Country of New Zealand   (Australia's east island -) Gee they hate that!
+# #				   or is Australia the west island of N.Z.
+# #	[ courtesy of Geoff Tribble.. Geofft@Aus.. Auckland N.Z. ]
+# #				[ Nov 1990 ]
+# ...
+# Rule	NZ      1974    1988	-	Oct	lastSun	2:00	1:00	D
+# Rule	NZ	1989	max	-	Oct	Sun>=1	2:00	1:00	D
+# Rule	NZ      1975    1989	-	Mar	Sun>=1	3:00	0	S
+# Rule	NZ	1990	max	-	Mar	lastSun	3:00	0	S
+# ...
+# Zone	NZ			12:00	NZ		NZ%sT	# New Zealand
+# Zone	NZ-CHAT			12:45	-		NZ-CHAT # Chatham Island
+
+# From Arthur David Olson (1992-03-08):
+# The chosen rules use the Davies October 8 values for the start of DST in 1989
+# rather than the October 1 value.
+
+# From Paul Eggert (1995-12-19);
+# Shanks reports 2:00 for all autumn changes in Australia and New Zealand.
+# Robert Uzgalis writes that the New Zealand Daylight
+# Savings Time Order in Council dated 1990-06-18 specifies 2:00 standard
+# time on both the first Sunday in October and the third Sunday in March.
+# As with Australia, we'll assume the tradition is 2:00s, not 2:00.
+#
+# From Paul Eggert (2003-05-26):
+# The Department of Internal Affairs (DIA) maintains a brief history,
+# as does Carol Squires; see tz-link.htm for the full references.
+# Use these sources in preference to Shanks.
+#
+# For Chatham, IATA SSIM (1991/1999) gives the NZ rules but with
+# transitions at 2:45 local standard time; this confirms that Chatham
+# is always exactly 45 minutes ahead of Auckland.
+
+###############################################################################
+
+
+# Fiji
+
+# Howse writes (p 153) that in 1879 the British governor of Fiji
+# enacted an ordinance standardizing the islands on Antipodean Time
+# instead of the American system (which was one day behind).
+
+# From Rives McDow (1998-10-08):
+# Fiji will introduce DST effective 0200 local time, 1998-11-01
+# until 0300 local time 1999-02-28.  Each year the DST period will
+# be from the first Sunday in November until the last Sunday in February.
+
+# From Paul Eggert (2000-01-08):
+# IATA SSIM (1999-09) says DST ends 0100 local time.  Go with McDow.
+
+# From the BBC World Service (1998-10-31 11:32 UTC):
+# The Fijiian government says the main reasons for the time change is to
+# improve productivity and reduce road accidents.  But correspondents say it
+# also hopes the move will boost Fiji's ability to compete with other pacific
+# islands in the effort to attract tourists to witness the dawning of the new
+# millenium.
+
+# http://www.fiji.gov.fj/press/2000_09/2000_09_13-05.shtml (2000-09-13)
+# reports that Fiji has discontinued DST.
+
+# Johnston
+
+# Johnston data is from usno1995.
+
+
+# Kiribati
+
+# From Paul Eggert (1996-01-22):
+# Today's _Wall Street Journal_ (page 1) reports that Kiribati
+# ``declared it the same day throught the country as of Jan. 1, 1995''
+# as part of the competition to be first into the 21st century.
+
+
+# Kwajalein
+
+# In comp.risks 14.87 (26 August 1993), Peter Neumann writes:
+# I wonder what happened in Kwajalein, where there was NO Friday,
+# 1993-08-20.  Thursday night at midnight Kwajalein switched sides with
+# respect to the International Date Line, to rejoin its fellow islands,
+# going from 11:59 p.m. Thursday to 12:00 m. Saturday in a blink.
+
+
+# N Mariana Is, Guam
+
+# Howse writes (p 153) ``The Spaniards, on the other hand, reached the
+# Philippines and the Ladrones from America,'' and implies that the Ladrones
+# (now called the Marianas) kept American date for quite some time.
+# For now, we assume the Ladrones switched at the same time as the Philippines;
+# see Asia/Manila.
+
+# US Public Law 106-564 (2000-12-23) made UTC+10 the official standard time,
+# under the name "Chamorro Standard Time".  There is no official abbreviation,
+# but Congressman Robert A. Underwood, author of the bill that became law,
+# wrote in a press release (2000-12-27) that he will seek the use of "ChST".
+
+
+# Micronesia
+
+# Alan Eugene Davis writes (1996-03-16),
+# ``I am certain, having lived there for the past decade, that "Truk"
+# (now properly known as Chuuk) ... is in the time zone GMT+10.''
+#
+# Shanks writes that Truk switched from UTC+10 to UTC+11 on 1978-10-01;
+# ignore this for now.
+
+# From Paul Eggert (1999-10-29):
+# The Federated States of Micronesia Visitors Board writes in
+# <a href="http://www.fsmgov.org/info/clocks.html">
+# The Federated States of Micronesia - Visitor Information
+# </a> (1999-01-26)
+# that Truk and Yap are UTC+10, and Ponape and Kosrae are UTC+11.
+# We don't know when Kosrae switched from UTC+12; assume January 1 for now.
+
+
+# Midway
+
+# From Charles T O'Connor, KMTH DJ (1956),
+# quoted in the KTMH section of the Radio Heritage Collection
+# <http://radiodx.com/spdxr/KMTH.htm> (2002-12-31):
+# For the past two months we've been on what is known as Daylight
+# Saving Time.  This time has put us on air at 5am in the morning,
+# your time down there in New Zealand.  Starting September 2, 1956
+# we'll again go back to Standard Time.  This'll mean that we'll go to
+# air at 6am your time.
+#
+# From Paul Eggert (2003-03-23):
+# We don't know the date of that quote, but we'll guess they
+# started DST on June 3.  Possibly DST was observed other years
+# in Midway, but we have no record of it.
+
+
+# Pitcairn
+
+# From Rives McDow (1999-11-08):
+# A Proclamation was signed by the Governor of Pitcairn on the 27th March 1998
+# with regard to Pitcairn Standard Time.  The Proclamation is as follows.
+#
+#	The local time for general purposes in the Islands shall be
+#	Co-ordinated Universal time minus 8 hours and shall be known
+#	as Pitcairn Standard Time.
+#
+# ... I have also seen Pitcairn listed as UTC minus 9 hours in several
+# references, and can only assume that this was an error in interpretation
+# somehow in light of this proclamation.
+
+# From Rives McDow (1999-11-09):
+# The Proclamation regarding Pitcairn time came into effect on 27 April 1998
+# ... at midnight.
+
+# From Howie Phelps (1999-11-10), who talked to a Pitcairner via shortwave:
+# Betty Christian told me yesterday that their local time is the same as
+# Pacific Standard Time. They used to be 1/2 hour different from us here in
+# Sacramento but it was changed a couple of years ago.
+
+
+# Samoa
+
+# Howse writes (p 153, citing p 10 of the 1883-11-18 New York Herald)
+# that in 1879 the King of Samoa decided to change
+# ``the date in his kingdom from the Antipodean to the American system,
+# ordaining -- by a masterpiece of diplomatic flattery -- that
+# the Fourth of July should be celebrated twice in that year.''
+
+
+# Tonga
+
+# From Paul Eggert (1996-01-22):
+# Today's _Wall Street Journal_ (p 1) reports that ``Tonga has been plotting
+# to sneak ahead of [New Zealanders] by introducing daylight-saving time.''
+# Since Kiribati has moved the Date Line it's not clear what Tonga will do.
+
+# Don Mundell writes in the 1997-02-20 Tonga Chronicle
+# <a href="http://www.tongatapu.net.to/tonga/homeland/timebegins.htm">
+# How Tonga became `The Land where Time Begins'
+# </a>:
+
+# Until 1941 Tonga maintained a standard time 50 minutes ahead of NZST
+# 12 hours and 20 minutes ahead of GMT.  When New Zealand adjusted its
+# standard time in 1940s, Tonga had the choice of subtracting from its
+# local time to come on the same standard time as New Zealand or of
+# advancing its time to maintain the differential of 13 degrees
+# (approximately 50 minutes ahead of New Zealand time).
+#
+# Because His Majesty King Taufa'ahau Tupou IV, then Crown Prince
+# Tungi, preferred to ensure Tonga's title as the land where time
+# begins, the Legislative Assembly approved the latter change.
+#
+# But some of the older, more conservative members from the outer
+# islands objected. "If at midnight on Dec. 31, we move ahead 40
+# minutes, as your Royal Highness wishes, what becomes of the 40
+# minutes we have lost?"
+#
+# The Crown Prince, presented an unanswerable argument: "Remember that
+# on the World Day of Prayer, you would be the first people on Earth
+# to say your prayers in the morning."
+
+# From Paul Eggert (1999-08-12):
+# Shanks says the transition was on 1968-10-01; go with Mundell.
+
+# From Eric Ulevik (1999-05-03):
+# Tonga's director of tourism, who is also secretary of the National Millenium
+# Committee, has a plan to get Tonga back in front.
+# He has proposed a one-off move to tropical daylight saving for Tonga from
+# October to March, which has won approval in principle from the Tongan
+# Government.
+
+# From Steffen Thorsen (1999-09-09):
+# * Tonga will introduce DST in November
+#
+# I was given this link by John Letts:
+# <a hef="http://news.bbc.co.uk/hi/english/world/asia-pacific/newsid_424000/424764.stm">
+# http://news.bbc.co.uk/hi/english/world/asia-pacific/newsid_424000/424764.stm
+# </a>
+#
+# I have not been able to find exact dates for the transition in November
+# yet. By reading this article it seems like Fiji will be 14 hours ahead
+# of UTC as well, but as far as I know Fiji will only be 13 hours ahead
+# (12 + 1 hour DST).
+
+# From Arthur David Olson (1999-09-20):
+# According to <a href="http://www.tongaonline.com/news/sept1799.html>
+# http://www.tongaonline.com/news/sept1799.html
+# </a>:
+# "Daylight Savings Time will take effect on Oct. 2 through April 15, 2000
+# and annually thereafter from the first Saturday in October through the
+# third Saturday of April.  Under the system approved by Privy Council on
+# Sept. 10, clocks must be turned ahead one hour on the opening day and
+# set back an hour on the closing date."
+# Alas, no indication of the time of day.
+
+# From Rives McDow (1999-10-06):
+# Tonga started its Daylight Saving on Saturday morning October 2nd at 0200am.
+# Daylight Saving ends on April 16 at 0300am which is Sunday morning.
+
+# From Steffen Thorsen (2000-10-31):
+# Back in March I found a notice on the website http://www.tongaonline.com
+# that Tonga changed back to standard time one month early, on March 19
+# instead of the original reported date April 16. Unfortunately, the article
+# is no longer available on the site, and I did not make a copy of the
+# text, and I have forgotten to report it here.
+# (Original URL was: http://www.tongaonline.com/news/march162000.htm )
+
+# From Rives McDow (2000-12-01):
+# Tonga is observing DST as of 2000-11-04 and will stop on 2001-01-27.
+
+# From Sione Moala-Mafi (2001-09-20) via Rives McDow:
+# At 2:00am on the first Sunday of November, the standard time in the Kingdom
+# shall be moved forward by one hour to 3:00am.  At 2:00am on the last Sunday
+# of January the standard time in the Kingdom shall be moved backward by one
+# hour to 1:00am.
+
+# From Pulu 'Anau (2002-11-05):
+# The law was for 3 years, supposedly to get renewed.  It wasn't.
+
+
+# Wake
+
+# From Vernice Anderson, Personal Secretary to Philip Jessup,
+# US Ambassador At Large (oral history interview, 1971-02-02):
+#
+# Saturday, the 14th [of October, 1950] -- ...  The time was all the
+# more confusing at that point, because we had crossed the
+# International Date Line, thus getting two Sundays.  Furthermore, we
+# discovered that Wake Island had two hours of daylight saving time
+# making calculation of time in Washington difficult if not almost
+# impossible.
+#
+# http://www.trumanlibrary.org/wake/meeting.htm
+
+# From Paul Eggert (2003-03-23):
+# We have no other report of DST in Wake Island, so omit this info for now.
+
+###############################################################################
+
+# The International Date Line
+
+# From Gwillim Law (2000-01-03):
+#
+# The International Date Line is not defined by any international standard,
+# convention, or treaty.  Mapmakers are free to draw it as they please.
+# Reputable mapmakers will simply ensure that every point of land appears on
+# the correct side of the IDL, according to the date legally observed there.
+#
+# When Kiribati adopted a uniform date in 1995, thereby moving the Phoenix and
+# Line Islands to the west side of the IDL (or, if you prefer, moving the IDL
+# to the east side of the Phoenix and Line Islands), I suppose that most
+# mapmakers redrew the IDL following the boundary of Kiribati.  Even that line
+# has a rather arbitrary nature.  The straight-line boundaries between Pacific
+# island nations that are shown on many maps are based on an international
+# convention, but are not legally binding national borders.
+#
+# An Anglo-French Conference on Time-Keeping at Sea (June, 1917) agreed that
+# legal time on the high seas would be zone time, i.e., the standard time at
+# the nearest meridian that is a multiple of fifteen degrees.  The date is
+# governed by the IDL; therefore, even on the high seas, there may be some
+# places as late as fourteen hours later than UTC.  And, since the IDL is not
+# an international standard, there are some places on the high seas where the
+# correct date is ambiguous.
+
+# From Paul Eggert, using references suggested by Oscar van Vlijmen
+# (2005-03-20):
+#
+# The American Practical Navigator (2002)
+# <http://pollux.nss.nima.mil/pubs/pubs_j_apn_sections.html?rid=187>
+# talks only about the 180-degree meridian with respect to ships in
+# international waters; it ignores the international date line.
diff --git a/JodaTime/src/java/org/joda/time/tz/src/europe b/JodaTime/src/java/org/joda/time/tz/src/europe
index f7fd57e9e..9535a667b 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/europe
+++ b/JodaTime/src/java/org/joda/time/tz/src/europe
@@ -1,2435 +1,2433 @@
-# @(#)europe	7.92
-
-# This data is by no means authoritative; if you think you know better,
-# go ahead and edit the file (and please send any changes to
-# tz@elsie.nci.nih.gov for general use in the future).
-
-# From Paul Eggert <eggert@twinsun.com> (1999-10-29):
-# A good source for time zone historical data outside the U.S. is
-# Thomas G. Shanks, The International Atlas (5th edition),
-# San Diego: ACS Publications, Inc. (1999).
-#
-# Gwillim Law writes that a good source
-# for recent time zone data is the International Air Transport
-# Association's Standard Schedules Information Manual (IATA SSIM),
-# published semiannually.  Law sent in several helpful summaries
-# of the IATA's data after 1990.
-#
-# Except where otherwise noted, Shanks is the source for entries through 1991,
-# and IATA SSIM is the source for entries afterwards.
-#
-# Other sources occasionally used include:
-#
-#	Edward W. Whitman, World Time Differences,
-#	Whitman Publishing Co, 2 Niagara Av, Ealing, London (undated),
-#	which I found in the UCLA library.
-#
-#	<a href="http://www.pettswoodvillage.co.uk/Daylight_Savings_William_Willett.pdf">
-#	William Willett, The Waste of Daylight, 19th edition
-#	</a> (1914-03)
-#
-#	Brazil's Departamento Servico da Hora (DSH),
-#	<a href="http://pcdsh01.on.br/HISTHV.htm">
-#	History of Summer Time
-#	</a> (1998-09-21, in Portuguese)
-
-#
-# I invented the abbreviations marked `*' in the following table;
-# the rest are from earlier versions of this file, or from other sources.
-# Corrections are welcome!
-#                   std dst  2dst
-#                   LMT           Local Mean Time
-#       -4:00       AST ADT       Atlantic
-#       -3:00       WGT WGST      Western Greenland*
-#       -1:00       EGT EGST      Eastern Greenland*
-#        0:00       GMT BST  BDST Greenwich, British Summer
-#        0:00       GMT IST       Greenwich, Irish Summer
-#        0:00       WET WEST WEMT Western Europe
-#        0:19:32.13 AMT NST       Amsterdam, Netherlands Summer (1835-1937)*
-#        0:20       NET NEST      Netherlands (1937-1940)*
-#        1:00       CET CEST CEMT Central Europe
-#        1:00:14    SET           Swedish (1879-1899)*
-#        2:00       EET EEST      Eastern Europe
-#        3:00       MSK MSD       Moscow
-#
-# A reliable and entertaining source about time zones, especially in Britain,
-# Derek Howse, Greenwich time and longitude, Philip Wilson Publishers (1997).
-
-# From Peter Ilieve <peter@memex.co.uk> (1994-12-04),
-# The original six [EU members]: Belgium, France, (West) Germany, Italy,
-# Luxembourg, the Netherlands.
-# Plus, from 1 Jan 73: Denmark, Ireland, United Kingdom.
-# Plus, from 1 Jan 81: Greece.
-# Plus, from 1 Jan 86: Spain, Portugal.
-# Plus, from 1 Jan 95: Austria, Finland, Sweden. (Norway negotiated terms for
-# entry but in a referendum on 28 Nov 94 the people voted No by 52.2% to 47.8%
-# on a turnout of 88.6%. This was almost the same result as Norway's previous
-# referendum in 1972, they are the only country to have said No twice.
-# Referendums in the other three countries voted Yes.)
-# ...
-# Estonia ... uses EU dates but not at 01:00 GMT, they use midnight GMT.
-# I don't think they know yet what they will do from 1996 onwards.
-# ...
-# There shouldn't be any [current members who are not using EU rules].
-# A Directive has the force of law, member states are obliged to enact
-# national law to implement it. The only contentious issue was the
-# different end date for the UK and Ireland, and this was always allowed
-# in the Directive.
-
-
-###############################################################################
-
-# Britain (United Kingdom) and Ireland (Eire)
-
-# From Peter Ilieve <peter@memex.co.uk> (1994-07-06):
-#
-# On 17 Jan 1994 the Independent, a UK quality newspaper, had a piece about
-# historical vistas along the Thames in west London. There was a photo
-# and a sketch map showing some of the sightlines involved. One paragraph
-# of the text said:
-#
-# `An old stone obelisk marking a forgotten terrestrial meridian stands
-# beside the river at Kew. In the 18th century, before time and longitude
-# was standardised by the Royal Observatory in Greenwich, scholars observed
-# this stone and the movement of stars from Kew Observatory nearby. They
-# made their calculations and set the time for the Horse Guards and Parliament,
-# but now the stone is obscured by scrubwood and can only be seen by walking
-# along the towpath within a few yards of it.'
-#
-# I have a one inch to one mile map of London and my estimate of the stone's
-# position is 51 deg. 28' 30" N, 0 deg. 18' 45" W. The longitude should
-# be within about +-2". The Ordnance Survey grid reference is TQ172761.
-#
-# [This yields GMTOFF = -0:01:15 for London LMT in the 18th century.]
-
-# From Paul Eggert <eggert@twinsun.com> (1993-11-18):
-#
-# Howse writes that Britain was the first country to use standard time.
-# The railways cared most about the inconsistencies of local mean time,
-# and it was they who forced a uniform time on the country.
-# The original idea was credited to Dr. William Hyde Wollaston (1766-1828)
-# and was popularized by Abraham Follett Osler (1808-1903).
-# The first railway to adopt London time was the Great Western Railway
-# in November 1840; other railways followed suit, and by 1847 most
-# (though not all) railways used London time.  On 1847-09-22 the
-# Railway Clearing House, an industry standards body, recommended that GMT be
-# adopted at all stations as soon as the General Post Office permitted it.
-# The transition occurred on 12-01 for the L&NW, the Caledonian,
-# and presumably other railways; the January 1848 Bradshaw's lists many
-# railways as using GMT.  By 1855 the vast majority of public
-# clocks in Britain were set to GMT (though some, like the great clock
-# on Tom Tower at Christ Church, Oxford, were fitted with two minute hands,
-# one for local time and one for GMT).  The last major holdout was the legal
-# system, which stubbornly stuck to local time for many years, leading
-# to oddities like polls opening at 08:13 and closing at 16:13.
-# The legal system finally switched to GMT when the Statutes (Definition
-# of Time) Act took effect; it received the Royal Assent on 1880-08-02.
-#
-# In the tables below, we condense this complicated story into a single
-# transition date for London, namely 1847-12-01.  We don't know as much
-# about Dublin, so we use 1880-08-02, the legal transition time.
-
-# From Paul Eggert (2003-09-27):
-# Summer Time was first seriously proposed by William Willett (1857-1915),
-# a London builder and member of the Royal Astronomical Society
-# who circulated a pamphlet ``The Waste of Daylight'' (1907)
-# that proposed advancing clocks 20 minutes on each of four Sundays in April,
-# and retarding them by the same amount on four Sundays in September.
-# A bill was drafted in 1909 and introduced in Parliament several times,
-# but it met with ridicule and opposition, especially from farming interests.
-# Later editions of the pamphlet proposed one-hour summer time, and
-# it was eventually adopted as a wartime measure in 1916.
-# See: Summer Time Arrives Early, The Times (2000-05-18).
-# A monument to Willett was unveiled on 1927-05-21, in an open space in
-# a 45-acre wood near Chislehurst, Kent that was purchased by popular
-# subscription and open to the public.  On the south face of the monolith,
-# designed by G. W. Miller, is the the William Willett Memorial Sundial,
-# which is permanently set to Summer Time.
-
-# From Winston Churchill (1934-04-28):
-# It is one of the paradoxes of history that we should owe the boon of
-# summer time, which gives every year to the people of this country
-# between 160 and 170 hours more daylight leisure, to a war which
-# plunged Europe into darkness for four years, and shook the
-# foundations of civilization throughout the world.
-#	-- <a href="http://www.winstonchurchill.org/fh114willett.htm">
-#	"A Silent Toast to William Willett", Pictorial Weekly
-#	</a>
-
-# From Paul Eggert (1996-09-03):
-# The OED Supplement says that the English originally said ``Daylight Saving''
-# when they were debating the adoption of DST in 1908; but by 1916 this
-# term appears only in quotes taken from DST's opponents, whereas the
-# proponents (who eventually won the argument) are quoted as using ``Summer''.
-
-# From Arthur David Olson (1989-01-19):
-#
-# A source at the British Information Office in New York avers that it's
-# known as "British" Summer Time in all parts of the United Kingdom.
-
-# Date: 4 Jan 89 08:57:25 GMT (Wed)
-# From: Jonathan Leffler <nih-csl!uunet!mcvax!sphinx.co.uk!john>
-# [British Summer Time] is fixed annually by Act of Parliament.
-# If you can predict what Parliament will do, you should be in
-# politics making a fortune, not computing.
-
-# From Chris Carrier <72157.3334@CompuServe.COM> (1996-06-14):
-# I remember reading in various wartime issues of the London Times the
-# acronym BDST for British Double Summer Time.  Look for the published
-# time of sunrise and sunset in The Times, when BDST was in effect, and
-# if you find a zone reference it will say, "All times B.D.S.T."
-
-# From Joseph S. Myers (1999-09-02):
-# ... some military cables (WO 219/4100 - this is a copy from the
-# main SHAEF archives held in the US National Archives, SHAEF/5252/8/516)
-# agree that the usage is BDST (this appears in a message dated 17 Feb 1945).
-
-# From Joseph S. Myers (2000-10-03):
-# On 18th April 1941, Sir Stephen Tallents of the BBC wrote to Sir
-# Alexander Maxwell of the Home Office asking whether there was any
-# official designation; the reply of the 21st was that there wasn't
-# but he couldn't think of anything better than the "Double British
-# Summer Time" that the BBC had been using informally.
-# http://student.cusu.cam.ac.uk/~jsm28/british-time/bbc-19410418.png
-# http://student.cusu.cam.ac.uk/~jsm28/british-time/ho-19410421.png
-
-# From Sir Alexander Maxwell in the above-mentioned letter (1941-04-21):
-# [N]o official designation has as far as I know been adopted for the time
-# which is to be introduced in May....
-# I cannot think of anything better than "Double British Summer Time"
-# which could not be said to run counter to any official description.
-
-# From Paul Eggert (2000-10-02):
-# Howse writes (p 157) `DBST' too, but `BDST' seems to have been common
-# and follows the more usual convention of putting the location name first,
-# so we use `BDST'.
-
-# Peter Ilieve <peter@aldie.co.uk> (1998-04-19) described at length
-# the history of summer time legislation in the United Kingdom.
-# Since 1998 Joseph S. Myers <jsm28@cam.ac.uk> has been updating
-# and extending this list, which can be found in
-# <a href="http://student.cusu.cam.ac.uk/~jsm28/british-time/">
-# History of legal time in Britain
-# </a>
-
-# From Joseph S. Myers <jsm28@cam.ac.uk> (1998-01-06):
-#
-# The legal time in the UK outside of summer time is definitely GMT, not UTC;
-# see Lord Tanlaw's speech
-# <a href="http://www.parliament.the-stationery-office.co.uk/pa/ld199697/ldhansrd/pdvn/lds97/text/70611-20.htm#70611-20_head0">
-# (Lords Hansard 11 June 1997 columns 964 to 976)
-# </a>.
-
-# From Paul Eggert (2001-07-18):
-#
-# For lack of other data, we'll follow Shanks for Eire in 1940-1948.
-#
-# Given Ilieve and Myers's data, the following claims by Shanks are incorrect:
-#     * Wales did not switch from GMT to daylight saving time until
-#	1921 Apr 3, when they began to conform with the rest of Great Britain.
-# Actually, Wales was identical after 1880.
-#     * Eire had two transitions on 1916 Oct 1.
-# It actually just had one transition.
-#     * Northern Ireland used single daylight saving time throughout WW II.
-# Actually, it conformed to Britain.
-#     * GB-Eire changed standard time to 1 hour ahead of GMT on 1968-02-18.
-# Actually, that date saw the usual switch to summer time.
-# Standard time was not changed until 1968-10-27 (the clocks didn't change).
-#
-# Here is another incorrect claim by Shanks:
-#     * Jersey, Guernsey, and the Isle of Man did not switch from GMT
-#	to daylight saving time until 1921 Apr 3, when they began to
-#	conform with Great Britain.
-# S.R.&O. 1916, No. 382 and HO 45/10811/312364 (quoted above) say otherwise.
-#
-# The following claim by Shanks is possible though doubtful;
-# we'll ignore it for now.
-#     * Dublin's 1971-10-31 switch was at 02:00, even though London's was 03:00.
-#
-#
-# Whitman says Dublin Mean Time was -0:25:21, which is more precise than Shanks.
-# Perhaps this was Dunsink Observatory Time, as Dunsink Observatory
-# (8 km NW of Dublin's center) seemingly was to Dublin as Greenwich was
-# to London.  For example:
-#
-#   "Timeball on the ballast office is down.  Dunsink time."
-#   -- James Joyce, Ulysses
-
-# From Joseph S. Myers (2005-01-26):
-# Irish laws are available online at www.irishstatutebook.ie.  These include 
-# various relating to legal time, for example:
-# 
-# ZZA13Y1923.html ZZA12Y1924.html ZZA8Y1925.html ZZSIV20PG1267.html
-# 
-# ZZSI71Y1947.html ZZSI128Y1948.html ZZSI23Y1949.html ZZSI41Y1950.html
-# ZZSI27Y1951.html ZZSI73Y1952.html
-# 
-# ZZSI11Y1961.html ZZSI232Y1961.html ZZSI182Y1962.html
-# ZZSI167Y1963.html ZZSI257Y1964.html ZZSI198Y1967.html
-# ZZA23Y1968.html ZZA17Y1971.html
-# 
-# ZZSI67Y1981.html ZZSI212Y1982.html ZZSI45Y1986.html
-# ZZSI264Y1988.html ZZSI52Y1990.html ZZSI371Y1992.html
-# ZZSI395Y1994.html ZZSI484Y1997.html ZZSI506Y2001.html
-#
-# [These are all relative to the root, e.g., the first is
-# <http://www.irishstatutebook.ie/ZZA13Y1923.html>.]
-# 
-# (These are those I found, but there could be more.  In any case these 
-# should allow various updates to the comments in the europe file to cover 
-# the laws applicable in Ireland.)
-# 
-# (Note that the time in the Republic of Ireland since 1968 has been defined 
-# in terms of standard time being GMT+1 with a period of winter time when it 
-# is GMT, rather than standard time being GMT with a period of summer time 
-# being GMT+1.)
-
-# From Paul Eggert (1999-03-28):
-# Clive Feather (<news:859845706.26043.0@office.demon.net>, 1997-03-31)
-# reports that Folkestone (Cheriton) Shuttle Terminal uses Concession Time
-# (CT), equivalent to French civil time.
-# Julian Hill (<news:36118128.5A14@virgin.net>, 1998-09-30) reports that
-# trains between Dollands Moor (the freight facility next door)
-# and Frethun run in CT.
-# My admittedly uninformed guess is that the terminal has two authorities,
-# the French concession operators and the British civil authorities,
-# and that the time depends on who you're talking to.
-# If, say, the British police were called to the station for some reason,
-# I would expect the official police report to use GMT/BST and not CET/CEST.
-# This is a borderline case, but for now let's stick to GMT/BST.
-
-# From an anonymous contributor (1996-06-02):
-# The law governing time in Ireland is under Statutory Instrument SI 395/94,
-# which gives force to European Union 7th Council Directive # 94/21/EC.
-# Under this directive, the Minister for Justice in Ireland makes appropriate
-# regulations. I spoke this morning with the Secretary of the Department of
-# Justice (tel +353 1 678 9711) who confirmed to me that the correct name is
-# "Irish Summer Time", abbreviated to "IST".
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-# Summer Time Act, 1916
-Rule	GB-Eire	1916	only	-	May	21	2:00s	1:00	BST
-Rule	GB-Eire	1916	only	-	Oct	 1	2:00s	0	GMT
-# S.R.&O. 1917, No. 358
-Rule	GB-Eire	1917	only	-	Apr	 8	2:00s	1:00	BST
-Rule	GB-Eire	1917	only	-	Sep	17	2:00s	0	GMT
-# S.R.&O. 1918, No. 274
-Rule	GB-Eire	1918	only	-	Mar	24	2:00s	1:00	BST
-Rule	GB-Eire	1918	only	-	Sep	30	2:00s	0	GMT
-# S.R.&O. 1919, No. 297
-Rule	GB-Eire	1919	only	-	Mar	30	2:00s	1:00	BST
-Rule	GB-Eire	1919	only	-	Sep	29	2:00s	0	GMT
-# S.R.&O. 1920, No. 458
-Rule	GB-Eire	1920	only	-	Mar	28	2:00s	1:00	BST
-# S.R.&O. 1920, No. 1844
-Rule	GB-Eire	1920	only	-	Oct	25	2:00s	0	GMT
-# S.R.&O. 1921, No. 363
-Rule	GB-Eire	1921	only	-	Apr	 3	2:00s	1:00	BST
-Rule	GB-Eire	1921	only	-	Oct	 3	2:00s	0	GMT
-# S.R.&O. 1922, No. 264
-Rule	GB-Eire	1922	only	-	Mar	26	2:00s	1:00	BST
-Rule	GB-Eire	1922	only	-	Oct	 8	2:00s	0	GMT
-# The Summer Time Act, 1922
-Rule	GB-Eire	1923	only	-	Apr	Sun>=16	2:00s	1:00	BST
-Rule	GB-Eire	1923	1924	-	Sep	Sun>=16	2:00s	0	GMT
-Rule	GB-Eire	1924	only	-	Apr	Sun>=9	2:00s	1:00	BST
-Rule	GB-Eire	1925	1926	-	Apr	Sun>=16	2:00s	1:00	BST
-# The Summer Time Act, 1925
-Rule	GB-Eire	1925	1938	-	Oct	Sun>=2	2:00s	0	GMT
-Rule	GB-Eire	1927	only	-	Apr	Sun>=9	2:00s	1:00	BST
-Rule	GB-Eire	1928	1929	-	Apr	Sun>=16	2:00s	1:00	BST
-Rule	GB-Eire	1930	only	-	Apr	Sun>=9	2:00s	1:00	BST
-Rule	GB-Eire	1931	1932	-	Apr	Sun>=16	2:00s	1:00	BST
-Rule	GB-Eire	1933	only	-	Apr	Sun>=9	2:00s	1:00	BST
-Rule	GB-Eire	1934	only	-	Apr	Sun>=16	2:00s	1:00	BST
-Rule	GB-Eire	1935	only	-	Apr	Sun>=9	2:00s	1:00	BST
-Rule	GB-Eire	1936	1937	-	Apr	Sun>=16	2:00s	1:00	BST
-Rule	GB-Eire	1938	only	-	Apr	Sun>=9	2:00s	1:00	BST
-Rule	GB-Eire	1939	only	-	Apr	Sun>=16	2:00s	1:00	BST
-# S.R.&O. 1939, No. 1379
-Rule	GB-Eire	1939	only	-	Nov	Sun>=16	2:00s	0	GMT
-# S.R.&O. 1940, No. 172 and No. 1883
-Rule	GB-Eire	1940	only	-	Feb	Sun>=23	2:00s	1:00	BST
-# S.R.&O. 1941, No. 476
-Rule	GB-Eire	1941	only	-	May	Sun>=2	1:00s	2:00	BDST
-Rule	GB-Eire	1941	1943	-	Aug	Sun>=9	1:00s	1:00	BST
-# S.R.&O. 1942, No. 506
-Rule	GB-Eire	1942	1944	-	Apr	Sun>=2	1:00s	2:00	BDST
-# S.R.&O. 1944, No. 932
-Rule	GB-Eire	1944	only	-	Sep	Sun>=16	1:00s	1:00	BST
-# S.R.&O. 1945, No. 312
-Rule	GB-Eire	1945	only	-	Apr	Mon>=2	1:00s	2:00	BDST
-Rule	GB-Eire	1945	only	-	Jul	Sun>=9	1:00s	1:00	BST
-# S.R.&O. 1945, No. 1208
-Rule	GB-Eire	1945	1946	-	Oct	Sun>=2	2:00s	0	GMT
-Rule	GB-Eire	1946	only	-	Apr	Sun>=9	2:00s	1:00	BST
-# The Summer Time Act, 1947
-Rule	GB-Eire	1947	only	-	Mar	16	2:00s	1:00	BST
-Rule	GB-Eire	1947	only	-	Apr	13	1:00s	2:00	BDST
-Rule	GB-Eire	1947	only	-	Aug	10	1:00s	1:00	BST
-Rule	GB-Eire	1947	only	-	Nov	 2	2:00s	0	GMT
-# Summer Time Order, 1948 (S.I. 1948/495)
-Rule	GB-Eire	1948	only	-	Mar	14	2:00s	1:00	BST
-Rule	GB-Eire	1948	only	-	Oct	31	2:00s	0	GMT
-# Summer Time Order, 1949 (S.I. 1949/373)
-Rule	GB-Eire	1949	only	-	Apr	 3	2:00s	1:00	BST
-Rule	GB-Eire	1949	only	-	Oct	30	2:00s	0	GMT
-# Summer Time Order, 1950 (S.I. 1950/518)
-# Summer Time Order, 1951 (S.I. 1951/430)
-# Summer Time Order, 1952 (S.I. 1952/451)
-Rule	GB-Eire	1950	1952	-	Apr	Sun>=14	2:00s	1:00	BST
-Rule	GB-Eire	1950	1952	-	Oct	Sun>=21	2:00s	0	GMT
-# revert to the rules of the Summer Time Act, 1925
-Rule	GB-Eire	1953	only	-	Apr	Sun>=16	2:00s	1:00	BST
-Rule	GB-Eire	1953	1960	-	Oct	Sun>=2	2:00s	0	GMT
-Rule	GB-Eire	1954	only	-	Apr	Sun>=9	2:00s	1:00	BST
-Rule	GB-Eire	1955	1956	-	Apr	Sun>=16	2:00s	1:00	BST
-Rule	GB-Eire	1957	only	-	Apr	Sun>=9	2:00s	1:00	BST
-Rule	GB-Eire	1958	1959	-	Apr	Sun>=16	2:00s	1:00	BST
-Rule	GB-Eire	1960	only	-	Apr	Sun>=9	2:00s	1:00	BST
-# Summer Time Order, 1961 (S.I. 1961/71)
-# Summer Time (1962) Order, 1961 (S.I. 1961/2465)
-# Summer Time Order, 1963 (S.I. 1963/81)
-Rule	GB-Eire	1961	1963	-	Mar	lastSun	2:00s	1:00	BST
-Rule	GB-Eire	1961	1968	-	Oct	Sun>=23	2:00s	0	GMT
-# Summer Time (1964) Order, 1963 (S.I. 1963/2101)
-# Summer Time Order, 1964 (S.I. 1964/1201)
-# Summer Time Order, 1967 (S.I. 1967/1148)
-Rule	GB-Eire	1964	1967	-	Mar	Sun>=19	2:00s	1:00	BST
-# Summer Time Order, 1968 (S.I. 1968/117)
-Rule	GB-Eire	1968	only	-	Feb	18	2:00s	1:00	BST
-# The British Standard Time Act, 1968
-#	(no summer time)
-# The Summer Time Act, 1972
-Rule	GB-Eire	1972	1980	-	Mar	Sun>=16	2:00s	1:00	BST
-Rule	GB-Eire	1972	1980	-	Oct	Sun>=23	2:00s	0	GMT
-# Summer Time Order, 1980 (S.I. 1980/1089)
-# Summer Time Order, 1982 (S.I. 1982/1673)
-# Summer Time Order, 1986 (S.I. 1986/223)
-# Summer Time Order, 1988 (S.I. 1988/931)
-Rule	GB-Eire	1981	1995	-	Mar	lastSun	1:00u	1:00	BST
-Rule	GB-Eire 1981	1989	-	Oct	Sun>=23	1:00u	0	GMT
-# Summer Time Order, 1989 (S.I. 1989/985)
-# Summer Time Order, 1992 (S.I. 1992/1729)
-# Summer Time Order 1994 (S.I. 1994/2798)
-Rule	GB-Eire 1990	1995	-	Oct	Sun>=22	1:00u	0	GMT
-# Summer Time Order 1997 (S.I. 1997/2982)
-# See EU for rules starting in 1996.
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/London	-0:01:15 -	LMT	1847 Dec  1
-			 0:00	GB-Eire	%s	1968 Oct 27
-			 1:00	-	BST	1971 Oct 31 2:00u
-			 0:00	GB-Eire	%s	1996
-			 0:00	EU	GMT/BST
-Zone	Europe/Belfast	-0:23:40 -	LMT	1880 Aug  2
-			-0:25:21 -	DMT	1916 May 21 2:00 # Dublin/Dunsink MT
-			-0:25:21 1:00	IST	1916 Oct  1 2:00s   # Irish Summer Time
-			 0:00	GB-Eire	%s	1968 Oct 27
-			 1:00	-	BST	1971 Oct 31 2:00u
-			 0:00	GB-Eire	%s	1996
-			 0:00	EU	GMT/BST
-Zone	Europe/Dublin	-0:25:00 -	LMT	1880 Aug  2
-			-0:25:21 -	DMT	1916 May 21 2:00
-			-0:25:21 1:00	IST	1916 Oct  1 2:00s
-			 0:00	GB-Eire	%s	1921 Dec  6 # independence
-			 0:00	GB-Eire	GMT/IST	1940 Feb 25 2:00
-			 0:00	1:00	IST	1946 Oct  6 2:00
-			 0:00	-	GMT	1947 Mar 16 2:00
-			 0:00	1:00	IST	1947 Nov  2 2:00
-			 0:00	-	GMT	1948 Apr 18 2:00
-			 0:00	GB-Eire	GMT/IST	1968 Oct 27
-			 1:00	-	IST	1971 Oct 31 2:00u
-			 0:00	GB-Eire	GMT/IST	1996
-			 0:00	EU	GMT/IST
-
-###############################################################################
-
-# Continental Europe
-
-# EU rules are for the European Union, previously known as the EC, EEC,
-# Common Market, etc.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	EU	1977	1980	-	Apr	Sun>=1	 1:00u	1:00	S
-Rule	EU	1977	only	-	Sep	lastSun	 1:00u	0	-
-Rule	EU	1978	only	-	Oct	 1	 1:00u	0	-
-Rule	EU	1979	1995	-	Sep	lastSun	 1:00u	0	-
-Rule	EU	1981	max	-	Mar	lastSun	 1:00u	1:00	S
-Rule	EU	1996	max	-	Oct	lastSun	 1:00u	0	-
-# The most recent directive covers the years starting in 2002.  See:
-# <a href="http://europa.eu.int/eur-lex/en/lif/dat/2000/en_300L0084.html"
-# Directive 2000/84/EC of the European Parliament and of the Council
-# of 19 January 2001 on summer-time arrangements.
-# </a>
-
-# W-Eur differs from EU only in that W-Eur uses standard time.
-Rule	W-Eur	1977	1980	-	Apr	Sun>=1	 1:00s	1:00	S
-Rule	W-Eur	1977	only	-	Sep	lastSun	 1:00s	0	-
-Rule	W-Eur	1978	only	-	Oct	 1	 1:00s	0	-
-Rule	W-Eur	1979	1995	-	Sep	lastSun	 1:00s	0	-
-Rule	W-Eur	1981	max	-	Mar	lastSun	 1:00s	1:00	S
-Rule	W-Eur	1996	max	-	Oct	lastSun	 1:00s	0	-
-
-# Older C-Eur rules are for convenience in the tables.
-# From 1977 on, C-Eur differs from EU only in that C-Eur uses standard time.
-Rule	C-Eur	1916	only	-	Apr	30	23:00	1:00	S
-Rule	C-Eur	1916	only	-	Oct	 1	 1:00	0	-
-Rule	C-Eur	1917	1918	-	Apr	Mon>=15	 2:00s	1:00	S
-Rule	C-Eur	1917	1918	-	Sep	Mon>=15	 2:00s	0	-
-Rule	C-Eur	1940	only	-	Apr	 1	 2:00s	1:00	S
-Rule	C-Eur	1942	only	-	Nov	 2	 2:00s	0	-
-Rule	C-Eur	1943	only	-	Mar	29	 2:00s	1:00	S
-Rule	C-Eur	1943	only	-	Oct	 4	 2:00s	0	-
-Rule	C-Eur	1944	only	-	Apr	 3	 2:00s	1:00	S
-# Whitman gives 1944 Oct 7; go with Shanks.
-Rule	C-Eur	1944	only	-	Oct	 2	 2:00s	0	-
-Rule	C-Eur	1977	1980	-	Apr	Sun>=1	 2:00s	1:00	S
-Rule	C-Eur	1977	only	-	Sep	lastSun	 2:00s	0	-
-Rule	C-Eur	1978	only	-	Oct	 1	 2:00s	0	-
-Rule	C-Eur	1979	1995	-	Sep	lastSun	 2:00s	0	-
-Rule	C-Eur	1981	max	-	Mar	lastSun	 2:00s	1:00	S
-Rule	C-Eur	1996	max	-	Oct	lastSun	 2:00s	0	-
-
-# E-Eur differs from EU only in that E-Eur switches at midnight local time.
-Rule	E-Eur	1977	1980	-	Apr	Sun>=1	 0:00	1:00	S
-Rule	E-Eur	1977	only	-	Sep	lastSun	 0:00	0	-
-Rule	E-Eur	1978	only	-	Oct	 1	 0:00	0	-
-Rule	E-Eur	1979	1995	-	Sep	lastSun	 0:00	0	-
-Rule	E-Eur	1981	max	-	Mar	lastSun	 0:00	1:00	S
-Rule	E-Eur	1996	max	-	Oct	lastSun	 0:00	0	-
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Russia	1917	only	-	Jul	 1	23:00	1:00	MST	# Moscow Summer Time
-Rule	Russia	1917	only	-	Dec	28	 0:00	0	MMT	# Moscow Mean Time
-Rule	Russia	1918	only	-	May	31	22:00	2:00	MDST	# Moscow Double Summer Time
-Rule	Russia	1918	only	-	Sep	16	 1:00	1:00	MST
-Rule	Russia	1919	only	-	May	31	23:00	2:00	MDST
-Rule	Russia	1919	only	-	Jul	 1	 2:00	1:00	S
-Rule	Russia	1919	only	-	Aug	16	 0:00	0	-
-Rule	Russia	1921	only	-	Feb	14	23:00	1:00	S
-Rule	Russia	1921	only	-	Mar	20	23:00	2:00	M # Midsummer
-Rule	Russia	1921	only	-	Sep	 1	 0:00	1:00	S
-Rule	Russia	1921	only	-	Oct	 1	 0:00	0	-
-# Act No.925 of the Council of Ministers of the USSR (1980-10-24):
-Rule	Russia	1981	1984	-	Apr	 1	 0:00	1:00	S
-Rule	Russia	1981	1983	-	Oct	 1	 0:00	0	-
-# Act No.967 of the Council of Ministers of the USSR (1984-09-13), repeated in
-# Act No.227 of the Council of Ministers of the USSR (1989-03-14):
-Rule	Russia	1984	1991	-	Sep	lastSun	 2:00s	0	-
-Rule	Russia	1985	1991	-	Mar	lastSun	 2:00s	1:00	S
-#
-Rule	Russia	1992	only	-	Mar	lastSat	 23:00	1:00	S
-Rule	Russia	1992	only	-	Sep	lastSat	 23:00	0	-
-Rule	Russia	1993	max	-	Mar	lastSun	 2:00s	1:00	S
-Rule	Russia	1993	1995	-	Sep	lastSun	 2:00s	0	-
-Rule	Russia	1996	max	-	Oct	lastSun	 2:00s	0	-
-
-# These are for backward compatibility with older versions.
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	WET		0:00	EU	WE%sT
-Zone	CET		1:00	C-Eur	CE%sT
-Zone	MET		1:00	C-Eur	ME%sT
-Zone	EET		2:00	EU	EE%sT
-
-# Previous editions of this database used abbreviations like MET DST
-# for Central European Summer Time, but this didn't agree with common usage.
-
-# From Markus Kuhn <mskuhn@unrza3.dialin.rrze.uni-erlangen.de> (1996-07-12):
-# The official German names ... are
-#
-#	Mitteleuropaeische Zeit (MEZ)         = UTC+01:00
-#	Mitteleuropaeische Sommerzeit (MESZ)  = UTC+02:00
-#
-# as defined in the German Time Act (Gesetz ueber die Zeitbestimmung (ZeitG),
-# 1978-07-25, Bundesgesetzblatt, Jahrgang 1978, Teil I, S. 1110-1111)....
-# I wrote ... to the German Federal Physical-Technical Institution
-#
-#	Physikalisch-Technische Bundesanstalt (PTB)
-#	Laboratorium 4.41 "Zeiteinheit"
-#	Postfach 3345
-#	D-38023 Braunschweig
-#	phone: +49 531 592-0
-#
-# ... I received today an answer letter from Dr. Peter Hetzel, head of the PTB
-# department for time and frequency transmission.  He explained that the
-# PTB translates MEZ and MESZ into English as
-#
-#	Central European Time (CET)         = UTC+01:00
-#	Central European Summer Time (CEST) = UTC+02:00
-
-
-# Albania
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Albania	1940	only	-	Jun	16	0:00	1:00	S
-Rule	Albania	1942	only	-	Nov	 2	3:00	0	-
-Rule	Albania	1943	only	-	Mar	29	2:00	1:00	S
-Rule	Albania	1943	only	-	Apr	10	3:00	0	-
-Rule	Albania	1974	only	-	May	 4	0:00	1:00	S
-Rule	Albania	1974	only	-	Oct	 2	0:00	0	-
-Rule	Albania	1975	only	-	May	 1	0:00	1:00	S
-Rule	Albania	1975	only	-	Oct	 2	0:00	0	-
-Rule	Albania	1976	only	-	May	 2	0:00	1:00	S
-Rule	Albania	1976	only	-	Oct	 3	0:00	0	-
-Rule	Albania	1977	only	-	May	 8	0:00	1:00	S
-Rule	Albania	1977	only	-	Oct	 2	0:00	0	-
-Rule	Albania	1978	only	-	May	 6	0:00	1:00	S
-Rule	Albania	1978	only	-	Oct	 1	0:00	0	-
-Rule	Albania	1979	only	-	May	 5	0:00	1:00	S
-Rule	Albania	1979	only	-	Sep	30	0:00	0	-
-Rule	Albania	1980	only	-	May	 3	0:00	1:00	S
-Rule	Albania	1980	only	-	Oct	 4	0:00	0	-
-Rule	Albania	1981	only	-	Apr	26	0:00	1:00	S
-Rule	Albania	1981	only	-	Sep	27	0:00	0	-
-Rule	Albania	1982	only	-	May	 2	0:00	1:00	S
-Rule	Albania	1982	only	-	Oct	 3	0:00	0	-
-Rule	Albania	1983	only	-	Apr	18	0:00	1:00	S
-Rule	Albania	1983	only	-	Oct	 1	0:00	0	-
-Rule	Albania	1984	only	-	Apr	 1	0:00	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Tirane	1:19:20 -	LMT	1914
-			1:00	-	CET	1940 Jun 16
-			1:00	Albania	CE%sT	1984 Jul
-			1:00	EU	CE%sT
-
-# Andorra
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Andorra	0:06:04 -	LMT	1901
-			0:00	-	WET	1946 Sep 30
-			1:00	-	CET	1985 Mar 31 2:00
-			1:00	EU	CE%sT
-
-# Austria
-
-# From Paul Eggert (2003-02-28): Shanks gives 1918-06-16 and
-# 1945-11-18, but the Austrian Federal Office of Metrology and
-# Surveying (BEV) gives 1918-09-16 and for Vienna gives the "alleged"
-# date of 1945-04-12 with no time.  For the 1980-04-06 transition
-# Shanks gives 02:00, the BEV 00:00.  Go with the BEV, and guess 02:00
-# for 1945-04-12.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Austria	1920	only	-	Apr	 5	2:00s	1:00	S
-Rule	Austria	1920	only	-	Sep	13	2:00s	0	-
-Rule	Austria	1946	only	-	Apr	14	2:00s	1:00	S
-Rule	Austria	1946	1948	-	Oct	Sun>=1	2:00s	0	-
-Rule	Austria	1947	only	-	Apr	 6	2:00s	1:00	S
-Rule	Austria	1948	only	-	Apr	18	2:00s	1:00	S
-Rule	Austria	1980	only	-	Apr	 6	0:00	1:00	S
-Rule	Austria	1980	only	-	Sep	28	0:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Vienna	1:05:20 -	LMT	1893 Apr
-			1:00	C-Eur	CE%sT	1920
-			1:00	Austria	CE%sT	1940 Apr  1 2:00s
-			1:00	C-Eur	CE%sT	1945 Apr  2 2:00s
-			1:00	1:00	CEST	1945 Apr 12 2:00s
-			1:00	-	CET	1946
-			1:00	Austria	CE%sT	1981
-			1:00	EU	CE%sT
-
-# Belarus
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Minsk	1:50:16 -	LMT	1880
-			1:50	-	MMT	1924 May 2 # Minsk Mean Time
-			2:00	-	EET	1930 Jun 21
-			3:00	-	MSK	1941 Jun 28
-			1:00	C-Eur	CE%sT	1944 Jul  3
-			3:00	Russia	MSK/MSD	1990
-			3:00	-	MSK	1991 Mar 31 2:00s
-			2:00	1:00	EEST	1991 Sep 29 2:00s
-			2:00	-	EET	1992 Mar 29 0:00s
-			2:00	1:00	EEST	1992 Sep 27 0:00s
-			2:00	Russia	EE%sT
-
-# Belgium
-#
-# From Paul Eggert (1997-07-02):
-# Entries from 1918 through 1991 are taken from:
-#	Annuaire de L'Observatoire Royal de Belgique,
-#	Avenue Circulaire, 3, B-1180 BRUXELLES, CLVIIe annee, 1991
-#	(Imprimerie HAYEZ, s.p.r.l., Rue Fin, 4, 1080 BRUXELLES, MCMXC),
-#	pp 8-9.
-# LMT before 1892 was 0:17:30, according to the official journal of Belgium:
-#	Moniteur Belge, Samedi 30 Avril 1892, N.121.
-# Thanks to Pascal Delmoitie <pascal@belnet.be> for these references.
-# The 1918 rules are listed for completeness; they apply to unoccupied Belgium.
-# Assume Brussels switched to WET in 1918 when the armistice took effect.
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Belgium	1918	only	-	Mar	 9	 0:00s	1:00	S
-Rule	Belgium	1918	1919	-	Oct	Sat>=1	23:00s	0	-
-Rule	Belgium	1919	only	-	Mar	 1	23:00s	1:00	S
-Rule	Belgium	1920	only	-	Feb	14	23:00s	1:00	S
-Rule	Belgium	1920	only	-	Oct	23	23:00s	0	-
-Rule	Belgium	1921	only	-	Mar	14	23:00s	1:00	S
-Rule	Belgium	1921	only	-	Oct	25	23:00s	0	-
-Rule	Belgium	1922	only	-	Mar	25	23:00s	1:00	S
-Rule	Belgium	1922	1927	-	Oct	Sat>=1	23:00s	0	-
-Rule	Belgium	1923	only	-	Apr	21	23:00s	1:00	S
-Rule	Belgium	1924	only	-	Mar	29	23:00s	1:00	S
-Rule	Belgium	1925	only	-	Apr	 4	23:00s	1:00	S
-# DSH writes that a royal decree of 1926-02-22 specified the Sun following 3rd
-# Sat in Apr (except if it's Easter, in which case it's one Sunday earlier),
-# to Sun following 1st Sat in Oct, and that a royal decree of 1928-09-15
-# changed the transition times to 02:00 GMT.
-Rule	Belgium	1926	only	-	Apr	17	23:00s	1:00	S
-Rule	Belgium	1927	only	-	Apr	 9	23:00s	1:00	S
-Rule	Belgium	1928	only	-	Apr	14	23:00s	1:00	S
-Rule	Belgium	1928	1938	-	Oct	Sun>=2	 2:00s	0	-
-Rule	Belgium	1929	only	-	Apr	21	 2:00s	1:00	S
-Rule	Belgium	1930	only	-	Apr	13	 2:00s	1:00	S
-Rule	Belgium	1931	only	-	Apr	19	 2:00s	1:00	S
-Rule	Belgium	1932	only	-	Apr	 3	 2:00s	1:00	S
-Rule	Belgium	1933	only	-	Mar	26	 2:00s	1:00	S
-Rule	Belgium	1934	only	-	Apr	 8	 2:00s	1:00	S
-Rule	Belgium	1935	only	-	Mar	31	 2:00s	1:00	S
-Rule	Belgium	1936	only	-	Apr	19	 2:00s	1:00	S
-Rule	Belgium	1937	only	-	Apr	 4	 2:00s	1:00	S
-Rule	Belgium	1938	only	-	Mar	27	 2:00s	1:00	S
-Rule	Belgium	1939	only	-	Apr	16	 2:00s	1:00	S
-Rule	Belgium	1939	only	-	Nov	19	 2:00s	0	-
-Rule	Belgium	1940	only	-	Feb	25	 2:00s	1:00	S
-Rule	Belgium	1944	only	-	Sep	17	 2:00s	0	-
-Rule	Belgium	1945	only	-	Apr	 2	 2:00s	1:00	S
-Rule	Belgium	1945	only	-	Sep	16	 2:00s	0	-
-Rule	Belgium	1946	only	-	May	19	 2:00s	1:00	S
-Rule	Belgium	1946	only	-	Oct	 7	 2:00s	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Brussels	0:17:30 -	LMT	1880
-			0:17:30	-	BMT	1892 May  1 12:00 # Brussels MT
-			0:00	-	WET	1914 Nov  8
-			1:00	-	CET	1916 May  1  0:00
-			1:00	C-Eur	CE%sT	1918 Nov 11 11:00u
-			0:00	Belgium	WE%sT	1940 May 20  2:00s
-			1:00	C-Eur	CE%sT	1944 Sep  3
-			1:00	Belgium	CE%sT	1977
-			1:00	EU	CE%sT
-
-# Bosnia and Herzegovina
-# see Serbia and Montenegro
-
-# Bulgaria
-#
-# From Plamen Simenov <P.Simeonov@cnsys.bg> via Steffen Thorsen (1999-09-09):
-# A document of Government of Bulgaria (No.94/1997) says:
-# EET --> EETDST is in 03:00 Local time in last Sunday of March ...
-# EETDST --> EET is in 04:00 Local time in last Sunday of October
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Bulg	1979	only	-	Mar	31	23:00	1:00	S
-Rule	Bulg	1979	only	-	Oct	 1	 1:00	0	-
-Rule	Bulg	1980	1982	-	Apr	Sat<=7	23:00	1:00	S
-Rule	Bulg	1980	only	-	Sep	29	 1:00	0	-
-Rule	Bulg	1981	only	-	Sep	27	 2:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Sofia	1:33:16 -	LMT	1880
-			1:56:56	-	IMT	1894 Nov 30 # Istanbul MT?
-			2:00	-	EET	1942 Nov  2  3:00
-			1:00	C-Eur	CE%sT	1945 Apr  2  3:00
-			2:00	-	EET	1979 Mar 31 23:00
-			2:00	Bulg	EE%sT	1982 Sep 26  2:00
-			2:00	C-Eur	EE%sT	1991
-			2:00	E-Eur	EE%sT	1997
-			2:00	EU	EE%sT
-
-# Croatia
-# see Serbia and Montenegro
-
-# Cyprus
-# Please see the `asia' file for Asia/Nicosia.
-
-# Czech Republic
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Czech	1945	only	-	Apr	 8	2:00s	1:00	S
-Rule	Czech	1945	only	-	Nov	18	2:00s	0	-
-Rule	Czech	1946	only	-	May	 6	2:00s	1:00	S
-Rule	Czech	1946	1949	-	Oct	Sun>=1	2:00s	0	-
-Rule	Czech	1947	only	-	Apr	20	2:00s	1:00	S
-Rule	Czech	1948	only	-	Apr	18	2:00s	1:00	S
-Rule	Czech	1949	only	-	Apr	 9	2:00s	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Prague	0:57:44 -	LMT	1850
-			0:57:44	-	PMT	1891 Oct     # Prague Mean Time
-			1:00	C-Eur	CE%sT	1944 Sep 17 2:00s
-			1:00	Czech	CE%sT	1979
-			1:00	EU	CE%sT
-
-# Denmark, Faeroe Islands, and Greenland
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Denmark	1916	only	-	May	14	23:00	1:00	S
-Rule	Denmark	1916	only	-	Sep	30	23:00	0	-
-Rule	Denmark	1940	only	-	May	15	 0:00	1:00	S
-Rule	Denmark	1945	only	-	Apr	 2	 2:00s	1:00	S
-Rule	Denmark	1945	only	-	Aug	15	 2:00s	0	-
-Rule	Denmark	1946	only	-	May	 1	 2:00s	1:00	S
-Rule	Denmark	1946	only	-	Sep	 1	 2:00s	0	-
-Rule	Denmark	1947	only	-	May	 4	 2:00s	1:00	S
-Rule	Denmark	1947	only	-	Aug	10	 2:00s	0	-
-Rule	Denmark	1948	only	-	May	 9	 2:00s	1:00	S
-Rule	Denmark	1948	only	-	Aug	 8	 2:00s	0	-
-# Whitman also gives 1949 Apr 9 to 1949 Oct 1, and disagrees in minor ways
-# about many of the above dates; go with Shanks.
-#
-# For 1894, Shanks says Jan, Whitman Apr; go with Whitman.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Europe/Copenhagen	 0:50:20 -	LMT	1890
-			 0:50:20 -	CMT	1894 Apr  # Copenhagen Mean Time
-			 1:00	Denmark	CE%sT	1942 Nov  2 2:00s
-			 1:00	C-Eur	CE%sT	1945 Apr  2 2:00
-			 1:00	Denmark	CE%sT	1980
-			 1:00	EU	CE%sT
-Zone Atlantic/Faeroe	-0:27:04 -	LMT	1908 Jan 11	# Torshavn
-			 0:00	-	WET	1981
-			 0:00	EU	WE%sT
-#
-# From Paul Eggert (2004-10-31):
-# During World War II, Germany maintained secret manned weather stations in
-# East Greenland and Franz Josef Land, but we don't know their time zones.
-# My source for this is Wilhelm Dege's book mentioned under Svalbard.
-#
-# From Paul Eggert (1996-11-22):
-# Greenland joined the EU as part of Denmark, obtained home rule on 1979-05-01,
-# and left the EU on 1985-02-01.  It therefore should have been using EU
-# rules at least through 1984.  Shanks says Scoresbysund and Godthab
-# used C-Eur rules after 1980, but IATA SSIM (1991/1996) says they use EU
-# rules since at least 1991.  Assume EU rules since 1980.
-
-# From Gwillin Law (2001-06-06), citing
-# <http://www.statkart.no/efs/efshefter/2001/efs5-2001.pdf> (2001-03-15),
-# and with translations corrected by Steffen Thorsen:
-#
-# Greenland has four local times, and the relation to UTC
-# is according to the following time line:
-#
-# The military zone near Thule	UTC-4
-# Standard Greenland time	UTC-3
-# Scoresbysund			UTC-1
-# Danmarkshavn			UTC
-#
-# In the military area near Thule and in Danmarkshavn DST will not be
-# introduced.
-
-# From Rives McDow (2001-11-01):
-#
-# I correspond regularly with the Dansk Polarcenter, and wrote them at
-# the time to clarify the situation in Thule.  Unfortunately, I have
-# not heard back from them regarding my recent letter.  [But I have
-# info from earlier correspondence.]
-#
-# According to the center, a very small local time zone around Thule
-# Air Base keeps the time according to UTC-4, implementing daylight
-# savings using North America rules, changing the time at 02:00 local time....
-#
-# The east coast of Greenland north of the community of Scoresbysund
-# uses UTC in the same way as in Iceland, year round, with no dst.
-# There are just a few stations on this coast, including the
-# Danmarkshavn ICAO weather station mentioned in your September 29th
-# email.  The other stations are two sledge patrol stations in
-# Mestersvig and Daneborg, the air force base at Station Nord, and the
-# DPC research station at Zackenberg.
-#
-# Scoresbysund and two small villages nearby keep time UTC-1 and use
-# the same daylight savings time period as in West Greenland (Godthab).
-#
-# The rest of Greenland, including Godthab (this area, although it
-# includes central Greenland, is known as west Greenland), keeps time
-# UTC-3, with daylight savings methods according to European rules.
-#
-# It is common procedure to use UTC 0 in the wilderness of East and
-# North Greenland, because it is mainly Icelandic aircraft operators
-# maintaining traffic in these areas.  However, the official status of
-# this area is that it sticks with Godthab time.  This area might be
-# considered a dual time zone in some respects because of this.
-
-# From Rives McDow (2001-11-19):
-# I heard back from someone stationed at Thule; the time change took place
-# there at 2:00 AM.
-
-# From Paul Eggert (2001-11-19):
-# The 1997 CIA map shows Danmarkshavn on GMT; the 1995 map as like Godthab.
-# For lack of better info, assume they were like Godthab before 1996.
-# startkart.no says Thule does not observe DST, but this is clearly an error,
-# so go with Shanks for all Thule transitions.
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Thule	1991	1992	-	Mar	lastSun	2:00	1:00	D
-Rule	Thule	1991	1992	-	Sep	lastSun	2:00	0	S
-Rule	Thule	1993	max	-	Apr	Sun>=1	2:00	1:00	D
-Rule	Thule	1993	max	-	Oct	lastSun	2:00	0	S
-#
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Danmarkshavn -1:14:40 -	LMT	1916 Jul 28
-			-3:00	-	WGT	1980 Apr  6 2:00
-			-3:00	EU	WG%sT	1996
-			0:00	-	GMT
-Zone America/Scoresbysund -1:29:00 -	LMT	1916 Jul 28 # Ittoqqortoormiit
-			-2:00	-	CGT	1980 Apr  6 2:00
-			-2:00	C-Eur	CG%sT	1981 Mar 29
-			-1:00	EU	EG%sT
-Zone America/Godthab	-3:26:56 -	LMT	1916 Jul 28 # Nuuk
-			-3:00	-	WGT	1980 Apr  6 2:00
-			-3:00	EU	WG%sT
-Zone America/Thule	-4:35:08 -	LMT	1916 Jul 28 # Pituffik air base
-			-4:00	Thule	A%sT
-
-# Estonia
-# From Peter Ilieve <peter@memex.co.uk> (1994-10-15):
-# A relative in Tallinn confirms the accuracy of the data for 1989 onwards
-# [through 1994] and gives the legal authority for it,
-# a regulation of the Government of Estonia, No. 111 of 1989....
-#
-# From Peter Ilieve <peter@aldie.co.uk> (1996-10-28):
-# [IATA SSIM (1992/1996) claims that the Baltic republics switch at 01:00s,
-# but a relative confirms that Estonia still switches at 02:00s, writing:]
-# ``I do not [know] exactly but there are some little different
-# (confusing) rules for International Air and Railway Transport Schedules
-# conversion in Sunday connected with end of summer time in Estonia....
-# A discussion is running about the summer time efficiency and effect on
-# human physiology.  It seems that Estonia maybe will not change to
-# summer time next spring.''
-
-# From Peter Ilieve <peter@aldie.co.uk> (1998-11-04), heavily edited:
-# <a href="http://trip.rk.ee/cgi-bin/thw?${BASE}=akt&${OOHTML}=rtd&TA=1998&TO=1&AN=1390">
-# The 1998-09-22 Estonian time law
-# </a>
-# refers to the Eighth Directive and cites the association agreement between
-# the EU and Estonia, ratified by the Estonian law (RT II 1995, 22--27, 120).
-#
-# I also asked [my relative] whether they use any standard abbreviation
-# for their standard and summer times. He says no, they use "suveaeg"
-# (summer time) and "talveaeg" (winter time).
-
-# From <a href="http://www.baltictimes.com/">The Baltic Times</a> (1999-09-09)
-# via Steffen Thorsen:
-# This year will mark the last time Estonia shifts to summer time,
-# a council of the ruling coalition announced Sept. 6....
-# But what this could mean for Estonia's chances of joining the European
-# Union are still unclear.  In 1994, the EU declared summer time compulsory
-# for all member states until 2001.  Brussels has yet to decide what to do
-# after that.
-
-# From Mart Oruaas (2000-01-29):
-# Regulation no. 301 (1999-10-12) obsoletes previous regulation
-# no. 206 (1998-09-22) and thus sticks Estonia to +02:00 GMT for all
-# the year round.  The regulation is effective 1999-11-01.
-
-# From Toomas Soome (2002-02-21):
-# The Estonian government has changed once again timezone politics.
-# Now we are using again EU rules.
-#
-# From Urmet Jaanes (2002-03-28):
-# The legislative reference is Government decree No. 84 on 2002-02-21.
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Tallinn	1:39:00	-	LMT	1880
-			1:39:00	-	TMT	1918 Feb # Tallinn Mean Time
-			1:00	C-Eur	CE%sT	1919 Jul
-			1:39:00	-	TMT	1921 May
-			2:00	-	EET	1940 Aug  6
-			3:00	-	MSK	1941 Sep 15
-			1:00	C-Eur	CE%sT	1944 Sep 22
-			3:00	Russia	MSK/MSD	1989 Mar 26 2:00s
-			2:00	1:00	EEST	1989 Sep 24 2:00s
-			2:00	C-Eur	EE%sT	1998 Sep 22
-			2:00	EU	EE%sT	1999 Nov  1
-			2:00	-	EET	2002 Feb 21
-			2:00	EU	EE%sT
-
-# Finland
-#
-# From Hannu Strang <chs@apu.fi> (25 Sep 1994 06:03:37 UTC):
-# Well, here in Helsinki we're just changing from summer time to regular one,
-# and it's supposed to change at 4am...
-#
-# From Paul Eggert <eggert@twinsun.com> (25 Sep 1994):
-# Shanks says Finland has switched at 02:00 standard time since 1981.
-# Go with Strang instead.
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Finland	1942	only	-	Apr	3	0:00	1:00	S
-Rule	Finland	1942	only	-	Oct	3	0:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Helsinki	1:39:52 -	LMT	1878 May 31
-			1:39:52	-	HMT	1921 May    # Helsinki Mean Time
-			2:00	Finland	EE%sT	1981 Mar 29 2:00
-			2:00	EU	EE%sT
-
-# Aaland Is
-Link	Europe/Helsinki	Europe/Mariehamn
-
-
-# France
-
-# From Ciro Discepolo (2000-12-20):
-#
-# Henri Le Corre, Regimes Horaires pour le monde entier, Editions
-# Traditionnelles - Paris 2 books, 1993
-#
-# Gabriel, Traite de l'heure dans le monde, Guy Tredaniel editeur,
-# Paris, 1991
-#
-# Francoise Gauquelin, Problemes de l'heure resolus en astrologie,
-# Guy tredaniel, Paris 1987
-
-
-#
-# Shanks seems to use `24:00' ambiguously; we resolve it with Whitman.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	France	1916	only	-	Jun	14	23:00s	1:00	S
-Rule	France	1916	1919	-	Oct	Sun>=1	23:00s	0	-
-Rule	France	1917	only	-	Mar	24	23:00s	1:00	S
-Rule	France	1918	only	-	Mar	 9	23:00s	1:00	S
-Rule	France	1919	only	-	Mar	 1	23:00s	1:00	S
-Rule	France	1920	only	-	Feb	14	23:00s	1:00	S
-Rule	France	1920	only	-	Oct	23	23:00s	0	-
-Rule	France	1921	only	-	Mar	14	23:00s	1:00	S
-Rule	France	1921	only	-	Oct	25	23:00s	0	-
-Rule	France	1922	only	-	Mar	25	23:00s	1:00	S
-# DSH writes that a law of 1923-05-24 specified 3rd Sat in Apr at 23:00 to 1st
-# Sat in Oct at 24:00; and that in 1930, because of Easter, the transitions
-# were Apr 12 and Oct 5.  Go with Shanks.
-Rule	France	1922	1938	-	Oct	Sat>=1	23:00s	0	-
-Rule	France	1923	only	-	May	26	23:00s	1:00	S
-Rule	France	1924	only	-	Mar	29	23:00s	1:00	S
-Rule	France	1925	only	-	Apr	 4	23:00s	1:00	S
-Rule	France	1926	only	-	Apr	17	23:00s	1:00	S
-Rule	France	1927	only	-	Apr	 9	23:00s	1:00	S
-Rule	France	1928	only	-	Apr	14	23:00s	1:00	S
-Rule	France	1929	only	-	Apr	20	23:00s	1:00	S
-Rule	France	1930	only	-	Apr	12	23:00s	1:00	S
-Rule	France	1931	only	-	Apr	18	23:00s	1:00	S
-Rule	France	1932	only	-	Apr	 2	23:00s	1:00	S
-Rule	France	1933	only	-	Mar	25	23:00s	1:00	S
-Rule	France	1934	only	-	Apr	 7	23:00s	1:00	S
-Rule	France	1935	only	-	Mar	30	23:00s	1:00	S
-Rule	France	1936	only	-	Apr	18	23:00s	1:00	S
-Rule	France	1937	only	-	Apr	 3	23:00s	1:00	S
-Rule	France	1938	only	-	Mar	26	23:00s	1:00	S
-Rule	France	1939	only	-	Apr	15	23:00s	1:00	S
-Rule	France	1939	only	-	Nov	18	23:00s	0	-
-Rule	France	1940	only	-	Feb	25	 2:00	1:00	S
-# The French rules for 1941-1944 were not used in Paris, but Shanks writes
-# that they were used in Monaco and in many French locations.
-# Le Corre writes that the upper limit of the free zone was Arneguy, Orthez,
-# Mont-de-Marsan, Bazas, Langon, Lamotte-Montravel, Marouil, La
-# Rochefoucault, Champagne-Mouton, La Roche-Posay, La Haye-Decartes,
-# Loches, Montrichard, Vierzon, Bourges, Moulins, Digoin,
-# Paray-le-Monial, Montceau-les-Mines, Chalons-sur-Saone, Arbois,
-# Dole, Morez, St-Claude, and Collognes (Haute-Savioe).
-Rule	France	1941	only	-	May	 5	 0:00	2:00	M # Midsummer
-# Shanks says this transition occurred at Oct 6 1:00,
-# but go with Denis.Excoffier@ens.fr (1997-12-12),
-# who quotes the Ephemerides Astronomiques for 1998 from Bureau des Longitudes
-# as saying 5/10/41 22hUT.
-Rule	France	1941	only	-	Oct	 6	 0:00	1:00	S
-Rule	France	1942	only	-	Mar	 9	 0:00	2:00	M
-Rule	France	1942	only	-	Nov	 2	 3:00	1:00	S
-Rule	France	1943	only	-	Mar	29	 2:00	2:00	M
-Rule	France	1943	only	-	Oct	 4	 3:00	1:00	S
-Rule	France	1944	only	-	Apr	 3	 2:00	2:00	M
-Rule	France	1944	only	-	Oct	 8	 1:00	1:00	S
-Rule	France	1945	only	-	Apr	 2	 2:00	2:00	M
-Rule	France	1945	only	-	Sep	16	 3:00	0	-
-# Shanks gives Mar 28 2:00 and Sep 26 3:00;
-# go with Excoffier's 28/3/76 0hUT and 25/9/76 23hUT.
-Rule	France	1976	only	-	Mar	28	 1:00	1:00	S
-Rule	France	1976	only	-	Sep	26	 1:00	0	-
-# Shanks gives 0:09 for Paris Mean Time, and Whitman gives 0:09:05,
-# but Howse quotes the actual French legislation as saying 0:09:21.
-# Go with Howse.  Howse writes that the time in France was officially based
-# on PMT-0:09:21 until 1978-08-09, when the time base finally switched to UTC.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Paris	0:09:21 -	LMT	1891 Mar 15  0:01
-			0:09:21	-	PMT	1911 Mar 11  0:01  # Paris MT
-# Shanks gives 1940 Jun 14 0:00; go with Excoffier and Le Corre.
-			0:00	France	WE%sT	1940 Jun 14 23:00
-# Le Corre says Paris stuck with occupied-France time after the liberation;
-# go with Shanks.
-			1:00	C-Eur	CE%sT	1944 Aug 25
-			0:00	France	WE%sT	1945 Sep 16  3:00
-			1:00	France	CE%sT	1977
-			1:00	EU	CE%sT
-
-# Germany
-
-# From Markus Kuhn <Markus.Kuhn@cl.cam.ac.uk> (1998-09-29):
-# The German time zone web site by the Physikalisch-Technische
-# Bundesanstalt contains DST information back to 1916.
-# [See tz-link.htm for the URL.]
-
-# From Joerg Schilling (2002-10-23):
-# In 1945, Berlin was switched to Moscow Summer time (GMT+4) by <a
-# href="http://www.dhm.de/lemo/html/biografien/BersarinNikolai/">
-# General [Nikolai] Bersarin</a>.
-
-# From Paul Eggert (2003-03-08):
-# <a href="http://www.parlament-berlin.de/pds-fraktion.nsf/727459127c8b66ee8525662300459099/defc77cb784f180ac1256c2b0030274b/$FILE/bersarint.pdf">
-# says that Bersarin issued an order to use Moscow time on May 20.
-# However, Moscow did not observe daylight saving in 1945, so
-# this was equivalent to CEMT (GMT+3), not GMT+4.
-
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Germany	1945	only	-	Apr	 2	2:00s	1:00	S
-Rule	Germany	1945	only	-	May	24	2:00	2:00	M # Midsummer
-Rule	Germany	1945	only	-	Sep	24	3:00	1:00	S
-Rule	Germany	1945	only	-	Nov	18	2:00s	0	-
-Rule	Germany	1946	only	-	Apr	14	2:00s	1:00	S
-Rule	Germany	1946	only	-	Oct	 7	2:00s	0	-
-Rule	Germany	1947	1949	-	Oct	Sun>=1	2:00s	0	-
-Rule	Germany	1947	only	-	Apr	 6	2:00s	1:00	S
-Rule	Germany	1947	only	-	May	11	2:00s	2:00	M
-Rule	Germany	1947	only	-	Jun	29	3:00	1:00	S
-Rule	Germany	1948	only	-	Apr	18	2:00s	1:00	S
-Rule	Germany	1949	only	-	Apr	10	2:00s	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Berlin	0:53:28 -	LMT	1893 Apr
-			1:00	C-Eur	CE%sT	1945 Apr 2 2:00
-			1:00	Germany	CE%sT	1980
-			1:00	EU	CE%sT
-
-# Georgia
-# Please see the "asia" file for Asia/Tbilisi.
-# Herodotus (Histories, IV.45) says Georgia north of the Phasis (now Rioni)
-# is in Europe.  Our reference location Tbilisi is in the Asian part.
-
-# Gibraltar
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Europe/Gibraltar	-0:21:24 -	LMT	1880 Aug  2
-			0:00	GB-Eire	%s	1957 Apr 14 2:00
-			1:00	-	CET	1982
-			1:00	EU	CE%sT
-
-# Greece
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-# Whitman gives 1932 Jul 5 - Nov 1; go with Shanks.
-Rule	Greece	1932	only	-	Jul	 7	0:00	1:00	S
-Rule	Greece	1932	only	-	Sep	 1	0:00	0	-
-# Whitman gives 1941 Apr 25 - ?; go with Shanks.
-Rule	Greece	1941	only	-	Apr	 7	0:00	1:00	S
-# Whitman gives 1942 Feb 2 - ?; go with Shanks.
-Rule	Greece	1942	only	-	Nov	 2	3:00	0	-
-Rule	Greece	1943	only	-	Mar	30	0:00	1:00	S
-Rule	Greece	1943	only	-	Oct	 4	0:00	0	-
-# Whitman gives 1944 Oct 3 - Oct 31; go with Shanks.
-Rule	Greece	1952	only	-	Jul	 1	0:00	1:00	S
-Rule	Greece	1952	only	-	Nov	 2	0:00	0	-
-Rule	Greece	1975	only	-	Apr	12	0:00s	1:00	S
-Rule	Greece	1975	only	-	Nov	26	0:00s	0	-
-Rule	Greece	1976	only	-	Apr	11	2:00s	1:00	S
-Rule	Greece	1976	only	-	Oct	10	2:00s	0	-
-Rule	Greece	1977	1978	-	Apr	Sun>=1	2:00s	1:00	S
-Rule	Greece	1977	only	-	Sep	26	2:00s	0	-
-Rule	Greece	1978	only	-	Sep	24	4:00	0	-
-Rule	Greece	1979	only	-	Apr	 1	9:00	1:00	S
-Rule	Greece	1979	only	-	Sep	29	2:00	0	-
-Rule	Greece	1980	only	-	Apr	 1	0:00	1:00	S
-Rule	Greece	1980	only	-	Sep	28	0:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Athens	1:34:52 -	LMT	1895 Sep 14
-			1:34:52	-	AMT	1916 Jul 28 0:01     # Athens MT
-			2:00	Greece	EE%sT	1941 Apr 30
-			1:00	Greece	CE%sT	1944 Apr  4
-			2:00	Greece	EE%sT	1981
-			# Shanks says they switched to C-Eur in 1981;
-			# go with EU instead, since Greece joined it on Jan 1.
-			2:00	EU	EE%sT
-
-# Hungary
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Hungary	1918	only	-	Apr	 1	 3:00	1:00	S
-Rule	Hungary	1918	only	-	Sep	29	 3:00	0	-
-Rule	Hungary	1919	only	-	Apr	15	 3:00	1:00	S
-Rule	Hungary	1919	only	-	Sep	15	 3:00	0	-
-Rule	Hungary	1920	only	-	Apr	 5	 3:00	1:00	S
-Rule	Hungary	1920	only	-	Sep	30	 3:00	0	-
-Rule	Hungary	1945	only	-	May	 1	23:00	1:00	S
-Rule	Hungary	1945	only	-	Nov	 3	 0:00	0	-
-Rule	Hungary	1946	only	-	Mar	31	 2:00s	1:00	S
-Rule	Hungary	1946	1949	-	Oct	Sun>=1	 2:00s	0	-
-Rule	Hungary	1947	1949	-	Apr	Sun>=4	 2:00s	1:00	S
-Rule	Hungary	1950	only	-	Apr	17	 2:00s	1:00	S
-Rule	Hungary	1950	only	-	Oct	23	 2:00s	0	-
-Rule	Hungary	1954	1955	-	May	23	 0:00	1:00	S
-Rule	Hungary	1954	1955	-	Oct	 3	 0:00	0	-
-Rule	Hungary	1956	only	-	Jun	Sun>=1	 0:00	1:00	S
-Rule	Hungary	1956	only	-	Sep	lastSun	 0:00	0	-
-Rule	Hungary	1957	only	-	Jun	Sun>=1	 1:00	1:00	S
-Rule	Hungary	1957	only	-	Sep	lastSun	 3:00	0	-
-Rule	Hungary	1980	only	-	Apr	 6	 1:00	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Budapest	1:16:20 -	LMT	1890 Oct
-			1:00	C-Eur	CE%sT	1918
-			1:00	Hungary	CE%sT	1941 Apr  6  2:00
-			1:00	C-Eur	CE%sT	1945 May  1 23:00
-			1:00	Hungary	CE%sT	1980 Sep 28  2:00s
-			1:00	EU	CE%sT
-
-# Iceland
-#
-# From Adam David <adam@veda.is> (1993-11-06):
-# The name of the timezone in Iceland for system / mail / news purposes is GMT.
-#
-# (1993-12-05):
-# This material is paraphrased from the 1988 edition of the University of
-# Iceland Almanak.
-#
-# From January 1st, 1908 the whole of Iceland was standardised at 1 hour
-# behind GMT. Previously, local mean solar time was used in different parts
-# of Iceland, the almanak had been based on Reykjavik mean solar time which
-# was 1 hour and 28 minutes behind GMT.
-#
-# "first day of winter" referred to [below] means the first day of the 26 weeks
-# of winter, according to the old icelandic calendar that dates back to the
-# time the norsemen first settled Iceland.  The first day of winter is always
-# Saturday, but is not dependent on the Julian or Gregorian calendars.
-#
-# (1993-12-10):
-# I have a reference from the Oxford Icelandic-English dictionary for the
-# beginning of winter, which ties it to the ecclesiastical calendar (and thus
-# to the julian/gregorian calendar) over the period in question.
-#	the winter begins on the Saturday next before St. Luke's day
-#	(old style), or on St. Luke's day, if a Saturday.
-# St. Luke's day ought to be traceable from ecclesiastical sources. "old style"
-# might be a reference to the Julian calendar as opposed to Gregorian, or it
-# might mean something else (???).
-#
-# From Paul Eggert <eggert@twinsun.com> (1999-10-29):
-# The Iceland Almanak, Shanks and Whitman disagree on many points.
-# We go with the Almanak, except for one claim from Shanks, namely that
-# Reykavik was 21W57 from 1837 to 1908, local mean time before that.
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Iceland	1917	1918	-	Feb	19	23:00	1:00	S
-Rule	Iceland	1917	only	-	Oct	21	 1:00	0	-
-Rule	Iceland	1918	only	-	Nov	16	 1:00	0	-
-Rule	Iceland	1939	only	-	Apr	29	23:00	1:00	S
-Rule	Iceland	1939	only	-	Nov	29	 2:00	0	-
-Rule	Iceland	1940	only	-	Feb	25	 2:00	1:00	S
-Rule	Iceland	1940	only	-	Nov	 3	 2:00	0	-
-Rule	Iceland	1941	only	-	Mar	 2	 1:00s	1:00	S
-Rule	Iceland	1941	only	-	Nov	 2	 1:00s	0	-
-Rule	Iceland	1942	only	-	Mar	 8	 1:00s	1:00	S
-Rule	Iceland	1942	only	-	Oct	25	 1:00s	0	-
-# 1943-1946 - first Sunday in March until first Sunday in winter
-Rule	Iceland	1943	1946	-	Mar	Sun>=1	 1:00s	1:00	S
-Rule	Iceland	1943	1948	-	Oct	Sun>=22	 1:00s	0	-
-# 1947-1967 - first Sunday in April until first Sunday in winter
-Rule	Iceland	1947	1967	-	Apr	Sun>=1	 1:00s	1:00	S
-# 1949 Oct transition delayed by 1 week
-Rule	Iceland	1949	only	-	Oct	30	 1:00s	0	-
-Rule	Iceland	1950	1966	-	Oct	Sun>=22	 1:00s	0	-
-Rule	Iceland	1967	only	-	Oct	29	 1:00s	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Atlantic/Reykjavik	-1:27:24 -	LMT	1837
-			-1:27:48 -	RMT	1908 # Reykjavik Mean Time?
-			-1:00	Iceland	IS%sT	1968 Apr 7 1:00s
-			 0:00	-	GMT
-
-# Italy
-#
-# From Paul Eggert (2001-03-06):
-# Sicily and Sardinia each had their own time zones from 1866 to 1893,
-# called Palermo Time (+00:53:28) and Cagliari Time (+00:36:32).
-# During World War II, German-controlled Italy used German time.
-# But these events all occurred before the 1970 cutoff,
-# so record only the time in Rome.
-#
-# From Paul Eggert (1996-05-06):
-# For Italian DST we have three sources: Shanks, Whitman, and F. Pollastri
-# <a href="http://toi.iriti.cnr.it/uk/ienitlt.html">
-# Day-light Saving Time in Italy (1996-03-14)
-# </a>
-# (`FP' below), taken from an Italian National Electrotechnical Institute
-# publication. When the three sources disagree, guess who's right, as follows:
-#
-# year	FP	Shanks (S)	Whitman (W)	Go with:
-# 1916	06-03	06-03 24:00	06-03 00:00	FP & W
-#	09-30	09-30 24:00	09-30 01:00	FP; guess 24:00s
-# 1917	04-01	03-31 24:00	03-31 00:00	FP & S
-#	09-30	09-29 24:00	09-30 01:00	FP & W
-# 1918	03-09	03-09 24:00	03-09 00:00	FP & S
-#	10-06	10-05 24:00	10-06 01:00	FP & W
-# 1919	03-01	03-01 24:00	03-01 00:00	FP & S
-#	10-04	10-04 24:00	10-04 01:00	FP; guess 24:00s
-# 1920	03-20	03-20 24:00	03-20 00:00	FP & S
-#	09-18	09-18 24:00	10-01 01:00	FP; guess 24:00s
-# 1944	04-02	04-03 02:00			S (see C-Eur)
-#	09-16	10-02 03:00			FP; guess 24:00s
-# 1945	09-14	09-16 24:00			FP; guess 24:00s
-# 1970	05-21	05-31 00:00			S
-#	09-20	09-27 00:00			S
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Italy	1916	only	-	Jun	 3	0:00s	1:00	S
-Rule	Italy	1916	only	-	Oct	 1	0:00s	0	-
-Rule	Italy	1917	only	-	Apr	 1	0:00s	1:00	S
-Rule	Italy	1917	only	-	Sep	30	0:00s	0	-
-Rule	Italy	1918	only	-	Mar	10	0:00s	1:00	S
-Rule	Italy	1918	1919	-	Oct	Sun>=1	0:00s	0	-
-Rule	Italy	1919	only	-	Mar	 2	0:00s	1:00	S
-Rule	Italy	1920	only	-	Mar	21	0:00s	1:00	S
-Rule	Italy	1920	only	-	Sep	19	0:00s	0	-
-Rule	Italy	1940	only	-	Jun	15	0:00s	1:00	S
-Rule	Italy	1944	only	-	Sep	17	0:00s	0	-
-Rule	Italy	1945	only	-	Apr	 2	2:00	1:00	S
-Rule	Italy	1945	only	-	Sep	15	0:00s	0	-
-Rule	Italy	1946	only	-	Mar	17	2:00s	1:00	S
-Rule	Italy	1946	only	-	Oct	 6	2:00s	0	-
-Rule	Italy	1947	only	-	Mar	16	0:00s	1:00	S
-Rule	Italy	1947	only	-	Oct	 5	0:00s	0	-
-Rule	Italy	1948	only	-	Feb	29	2:00s	1:00	S
-Rule	Italy	1948	only	-	Oct	 3	2:00s	0	-
-Rule	Italy	1966	1968	-	May	Sun>=22	0:00	1:00	S
-Rule	Italy	1966	1969	-	Sep	Sun>=22	0:00	0	-
-Rule	Italy	1969	only	-	Jun	 1	0:00	1:00	S
-Rule	Italy	1970	only	-	May	31	0:00	1:00	S
-Rule	Italy	1970	only	-	Sep	lastSun	0:00	0	-
-Rule	Italy	1971	1972	-	May	Sun>=22	0:00	1:00	S
-Rule	Italy	1971	only	-	Sep	lastSun	1:00	0	-
-Rule	Italy	1972	only	-	Oct	 1	0:00	0	-
-Rule	Italy	1973	only	-	Jun	 3	0:00	1:00	S
-Rule	Italy	1973	1974	-	Sep	lastSun	0:00	0	-
-Rule	Italy	1974	only	-	May	26	0:00	1:00	S
-Rule	Italy	1975	only	-	Jun	 1	0:00s	1:00	S
-Rule	Italy	1975	1977	-	Sep	lastSun	0:00s	0	-
-Rule	Italy	1976	only	-	May	30	0:00s	1:00	S
-Rule	Italy	1977	1979	-	May	Sun>=22	0:00s	1:00	S
-Rule	Italy	1978	only	-	Oct	 1	0:00s	0	-
-Rule	Italy	1979	only	-	Sep	30	0:00s	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Rome	0:49:56 -	LMT	1866 Sep 22
-			0:49:56	-	RMT	1893 Nov	# Rome Mean Time
-			1:00	Italy	CE%sT	1942 Nov  2 2:00s
-			1:00	C-Eur	CE%sT	1944 Jul
-			1:00	Italy	CE%sT	1980
-			1:00	EU	CE%sT
-
-Link	Europe/Rome	Europe/Vatican
-Link	Europe/Rome	Europe/San_Marino
-
-# Latvia
-
-# From Liene Kanepe <Liene_Kanepe@lm.gov.lv> (1998-09-17):
-
-# I asked about this matter Scientific Secretary of the Institute of Astronomy
-# of The University of Latvia Dr. paed Mr. Ilgonis Vilks. I also searched the
-# correct data in juridical acts and I found some juridical documents about
-# changes in the counting of time in Latvia from 1981....
-#
-# Act No.35 of the Council of Ministers of Latvian SSR of 1981-01-22 ...
-# according to the Act No.925 of the Council of Ministers of USSR of 1980-10-24
-# ...: all year round the time of 2nd time zone + 1 hour, in addition turning
-# the hands of the clock 1 hour forward on 1 April at 00:00 (GMT 31 March 21:00)
-# and 1 hour backward on the 1 October at 00:00 (GMT 30 September 20:00).
-#
-# Act No.592 of the Council of Ministers of Latvian SSR of 1984-09-24 ...
-# according to the Act No.967 of the Council of Ministers of USSR of 1984-09-13
-# ...: all year round the time of 2nd time zone + 1 hour, in addition turning
-# the hands of the clock 1 hour forward on the last Sunday of March at 02:00
-# (GMT 23:00 on the previous day) and 1 hour backward on the last Sunday of
-# September at 03:00 (GMT 23:00 on the previous day).
-#
-# Act No.81 of the Council of Ministers of Latvian SSR of 1989-03-22 ...
-# according to the Act No.227 of the Council of Ministers of USSR of 1989-03-14
-# ...: since the last Sunday of March 1989 in Lithuanian SSR, Latvian SSR,
-# Estonian SSR and Kaliningrad region of Russian Federation all year round the
-# time of 2nd time zone (Moscow time minus one hour). On the territory of Latvia
-# transition to summer time is performed on the last Sunday of March at 02:00
-# (GMT 00:00), turning the hands of the clock 1 hour forward.  The end of
-# daylight saving time is performed on the last Sunday of September at 03:00
-# (GMT 00:00), turning the hands of the clock 1 hour backward. Exception is
-# 1989-03-26, when we must not turn the hands of the clock....
-#
-# The Regulations of the Cabinet of Ministers of the Republic of Latvia of
-# 1997-01-21 on transition to Summer time ... established the same order of
-# daylight savings time settings as in the States of the European Union.
-
-# From Andrei Ivanov (2000-03-06):
-# This year Latvia will not switch to Daylight Savings Time (as specified in
-# <a href="http://www.lv-laiks.lv/wwwraksti/2000/071072/vd4.htm">
-# The Regulations of the Cabinet of Ministers of the Rep. of Latvia of
-# 29-Feb-2000 (#79)</a>, in Latvian for subscribers only).
-
-# <a href="http://www.rferl.org/newsline/2001/01/3-CEE/cee-030101.html">
-# From RFE/RL Newsline (2001-01-03), noted after a heads-up by Rives McDow:
-# </a>
-# The Latvian government on 2 January decided that the country will
-# institute daylight-saving time this spring, LETA reported.
-# Last February the three Baltic states decided not to turn back their
-# clocks one hour in the spring....
-# Minister of Economy Aigars Kalvitis noted that Latvia had too few
-# daylight hours and thus decided to comply with a draft European
-# Commission directive that provides for instituting daylight-saving
-# time in EU countries between 2002 and 2006. The Latvian government
-# urged Lithuania and Estonia to adopt a similar time policy, but it
-# appears that they will not do so....
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Latvia	1989	1996	-	Mar	lastSun	 2:00s	1:00	S
-Rule	Latvia	1989	1996	-	Sep	lastSun	 2:00s	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Riga	1:36:24	-	LMT	1880
-			1:36:24	-	RMT	1918 Apr 15 2:00 #Riga Mean Time
-			1:36:24	1:00	LST	1918 Sep 16 3:00 #Latvian Summer
-			1:36:24	-	RMT	1919 Apr  1 2:00
-			1:36:24	1:00	LST	1919 May 22 3:00
-			1:36:24	-	RMT	1926 May 11
-			2:00	-	EET	1940 Aug  5
-			3:00	-	MSK	1941 Jul
-			1:00	C-Eur	CE%sT	1944 Oct 13
-			3:00	Russia	MSK/MSD	1989 Mar lastSun 2:00s
-			2:00	1:00	EEST	1989 Sep lastSun 2:00s
-			2:00	Latvia	EE%sT	1997 Jan 21
-			2:00	EU	EE%sT	2000 Feb 29
-			2:00	-	EET	2001 Jan  2
-			2:00	EU	EE%sT
-
-# Liechtenstein
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Vaduz	0:38:04 -	LMT	1894 Jun
-			1:00	-	CET	1981
-			1:00	EU	CE%sT
-
-# Lithuania
-
-# From Paul Eggert (1996-11-22):
-# IATA SSIM (1992/1996) says Lithuania uses W-Eur rules, but since it is
-# known to be wrong about Estonia and Latvia, assume it's wrong here too.
-
-# From Marius Gedminas <mgedmin@pub.osf.lt> (1998-08-07):
-# I would like to inform that in this year Lithuanian time zone
-# (Europe/Vilnius) was changed.
-
-# From <a href="http://www.elta.lt/">ELTA</a> No. 972 (2582) (1999-09-29),
-# via Steffen Thorsen:
-# Lithuania has shifted back to the second time zone (GMT plus two hours)
-# to be valid here starting from October 31,
-# as decided by the national government on Wednesday....
-# The Lithuanian government also announced plans to consider a
-# motion to give up shifting to summer time in spring, as it was
-# already done by Estonia.
-
-# From the <a href="http://www.tourism.lt/informa/ff.htm">
-# Fact File, Lithuanian State Department of Tourism
-# </a> (2000-03-27): Local time is GMT+2 hours ..., no daylight saving.
-
-# From a user via Klaus Marten (2003-02-07):
-# As a candidate for membership of the European Union, Lithuania will
-# observe Summer Time in 2003, changing its clocks at the times laid
-# down in EU Directive 2000/84 of 19.I.01 (i.e. at the same times as its
-# neighbour Latvia). The text of the Lithuanian government Order of
-# 7.XI.02 to this effect can be found at
-# http://www.lrvk.lt/nut/11/n1749.htm
-
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Vilnius	1:41:16	-	LMT	1880
-			1:24:00	-	WMT	1917	    # Warsaw Mean Time
-			1:35:36	-	KMT	1919 Oct 10 # Kaunas Mean Time
-			1:00	-	CET	1920 Jul 12
-			2:00	-	EET	1920 Oct  9
-			1:00	-	CET	1940 Aug  3
-			3:00	-	MSK	1941 Jun 24
-			1:00	C-Eur	CE%sT	1944 Aug
-			3:00	Russia	MSK/MSD	1991 Mar 31 2:00s
-			2:00	1:00	EEST	1991 Sep 29 2:00s
-			2:00	C-Eur	EE%sT	1998
-			2:00	-	EET	1998 Mar 29 1:00u
-			1:00	EU	CE%sT	1999 Oct 31 1:00u
-			2:00	-	EET	2003 Jan  1
-			2:00	EU	EE%sT
-
-# Luxembourg
-# Whitman disagrees with most of these dates in minor ways; go with Shanks.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Lux	1916	only	-	May	14	23:00	1:00	S
-Rule	Lux	1916	only	-	Oct	 1	 1:00	0	-
-Rule	Lux	1917	only	-	Apr	28	23:00	1:00	S
-Rule	Lux	1917	only	-	Sep	17	 1:00	0	-
-Rule	Lux	1918	only	-	Apr	Mon>=15	 2:00s	1:00	S
-Rule	Lux	1918	only	-	Sep	Mon>=15	 2:00s	0	-
-Rule	Lux	1919	only	-	Mar	 1	23:00	1:00	S
-Rule	Lux	1919	only	-	Oct	 5	 3:00	0	-
-Rule	Lux	1920	only	-	Feb	14	23:00	1:00	S
-Rule	Lux	1920	only	-	Oct	24	 2:00	0	-
-Rule	Lux	1921	only	-	Mar	14	23:00	1:00	S
-Rule	Lux	1921	only	-	Oct	26	 2:00	0	-
-Rule	Lux	1922	only	-	Mar	25	23:00	1:00	S
-Rule	Lux	1922	only	-	Oct	Sun>=2	 1:00	0	-
-Rule	Lux	1923	only	-	Apr	21	23:00	1:00	S
-Rule	Lux	1923	only	-	Oct	Sun>=2	 2:00	0	-
-Rule	Lux	1924	only	-	Mar	29	23:00	1:00	S
-Rule	Lux	1924	1928	-	Oct	Sun>=2	 1:00	0	-
-Rule	Lux	1925	only	-	Apr	 5	23:00	1:00	S
-Rule	Lux	1926	only	-	Apr	17	23:00	1:00	S
-Rule	Lux	1927	only	-	Apr	 9	23:00	1:00	S
-Rule	Lux	1928	only	-	Apr	14	23:00	1:00	S
-Rule	Lux	1929	only	-	Apr	20	23:00	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Europe/Luxembourg	0:24:36 -	LMT	1904 Jun
-			1:00	Lux	CE%sT	1918 Nov 25
-			0:00	Lux	WE%sT	1929 Oct  6 2:00s
-			0:00	Belgium	WE%sT	1940 May 14 3:00
-			1:00	C-Eur	WE%sT	1944 Sep 18 3:00
-			1:00	Belgium	CE%sT	1977
-			1:00	EU	CE%sT
-
-# Macedonia
-# see Serbia and Montenegro
-
-# Malta
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Malta	1973	only	-	Mar	31	0:00s	1:00	S
-Rule	Malta	1973	only	-	Sep	29	0:00s	0	-
-Rule	Malta	1974	only	-	Apr	21	0:00s	1:00	S
-Rule	Malta	1974	only	-	Sep	16	0:00s	0	-
-Rule	Malta	1975	1979	-	Apr	Sun>=15	2:00	1:00	S
-Rule	Malta	1975	1980	-	Sep	Sun>=15	2:00	0	-
-Rule	Malta	1980	only	-	Mar	31	2:00	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Malta	0:58:04 -	LMT	1893 Nov  2	# Valletta
-			1:00	Italy	CE%sT	1942 Nov  2 2:00s
-			1:00	C-Eur	CE%sT	1945 Apr  2 2:00s
-			1:00	Italy	CE%sT	1973 Mar 31
-			1:00	Malta	CE%sT	1981
-			1:00	EU	CE%sT
-
-# Moldova
-
-# From Paul Eggert (2001-02-11):
-# A previous version of this database followed Shanks, who writes that
-# Tiraspol switched to Moscow time on 1992-01-19 at 02:00.
-# However, this is most likely an error, as Moldova declared independence
-# on 1991-08-27 (the 1992-01-19 date is that of a Russian decree).
-# In early 1992 there was large-scale interethnic violence in the area
-# and it's possible that some Russophones continued to observe Moscow time.
-# But moldavizolit@tirastel.md and mk@tirastel.md separately reported via
-# Jesper Norgaard that as of 2001-01-24 Tiraspol was like Chisinau.
-# The Tiraspol entry has therefore been removed for now.
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Chisinau	1:55:20 -	LMT	1880
-			1:55	-	CMT	1918 Feb 15 # Chisinau MT
-			1:44:24	-	BMT	1931 Jul 24 # Bucharest MT
-			2:00	Romania	EE%sT	1940 Aug 15
-			2:00	1:00	EEST	1941 Jul 17
-			1:00	C-Eur	CE%sT	1944 Aug 24
-			3:00	Russia	MSK/MSD	1990
-			3:00	-	MSK	1990 May 6
-			2:00	-	EET	1991
-			2:00	Russia	EE%sT	1992
-			2:00	E-Eur	EE%sT	1997
-# See Romania commentary for the guessed 1997 transition to EU rules.
-			2:00	EU	EE%sT
-
-# Monaco
-# Shanks gives 0:09 for Paris Mean Time; go with Howse's more precise 0:09:21.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Monaco	0:29:32 -	LMT	1891 Mar 15
-			0:09:21	-	PMT	1911 Mar 11    # Paris Mean Time
-			0:00	France	WE%sT	1945 Sep 16 3:00
-			1:00	France	CE%sT	1977
-			1:00	EU	CE%sT
-
-# Netherlands
-
-# Howse writes that the Netherlands' railways used GMT between 1892 and 1940,
-# but for other purposes the Netherlands used Amsterdam mean time.
-
-# However, Robert H. van Gent writes (2001-04-01):
-# Howse's statement is only correct up to 1909. From 1909-05-01 (00:00:00
-# Amsterdam mean time) onwards, the whole of the Netherlands (including
-# the Dutch railways) was required by law to observe Amsterdam mean time
-# (19 minutes 32.13 seconds ahead of GMT). This had already been the
-# common practice (except for the railways) for many decades but it was
-# not until 1909 when the Dutch government finally defined this by law.
-# On 1937-07-01 this was changed to 20 minutes (exactly) ahead of GMT and
-# was generally known as Dutch Time ("Nederlandse Tijd").
-#
-# (2001-04-08):
-# 1892-05-01 was the date when the Dutch railways were by law required to
-# observe GMT while the remainder of the Netherlands adhered to the common
-# practice of following Amsterdam mean time.
-#
-# (2001-04-09):
-# In 1835 the authorities of the province of North Holland requested the
-# municipal authorities of the towns and cities in the province to observe
-# Amsterdam mean time but I do not know in how many cases this request was
-# actually followed.
-#
-# From 1852 onwards the Dutch telegraph offices were by law required to
-# observe Amsterdam mean time. As the time signals from the observatory of
-# Leiden were also distributed by the telegraph system, I assume that most
-# places linked up with the telegraph (and railway) system automatically
-# adopted Amsterdam mean time.
-#
-# Although the early Dutch railway companies initially observed a variety
-# of times, most of them had adopted Amsterdam mean time by 1858 but it
-# was not until 1866 when they were all required by law to observe
-# Amsterdam mean time.
-
-# The data before 1945 are taken from
-# <http://www.phys.uu.nl/~vgent/wettijd/wettijd.htm>.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Neth	1916	only	-	May	 1	0:00	1:00	NST	# Netherlands Summer Time
-Rule	Neth	1916	only	-	Oct	 1	0:00	0	AMT	# Amsterdam Mean Time
-Rule	Neth	1917	only	-	Apr	16	2:00s	1:00	NST
-Rule	Neth	1917	only	-	Sep	17	2:00s	0	AMT
-Rule	Neth	1918	1921	-	Apr	Mon>=1	2:00s	1:00	NST
-Rule	Neth	1918	1921	-	Sep	lastMon	2:00s	0	AMT
-Rule	Neth	1922	only	-	Mar	lastSun	2:00s	1:00	NST
-Rule	Neth	1922	1936	-	Oct	Sun>=2	2:00s	0	AMT
-Rule	Neth	1923	only	-	Jun	Fri>=1	2:00s	1:00	NST
-Rule	Neth	1924	only	-	Mar	lastSun	2:00s	1:00	NST
-Rule	Neth	1925	only	-	Jun	Fri>=1	2:00s	1:00	NST
-# From 1926 through 1939 DST began 05-15, except that it was delayed by a week
-# in years when 05-15 fell in the Pentecost weekend.
-Rule	Neth	1926	1931	-	May	15	2:00s	1:00	NST
-Rule	Neth	1932	only	-	May	22	2:00s	1:00	NST
-Rule	Neth	1933	1936	-	May	15	2:00s	1:00	NST
-Rule	Neth	1937	only	-	May	22	2:00s	1:00	NST
-Rule	Neth	1937	only	-	Jul	 1	0:00	1:00	S
-Rule	Neth	1937	1939	-	Oct	Sun>=2	2:00s	0	-
-Rule	Neth	1938	1939	-	May	15	2:00s	1:00	S
-Rule	Neth	1945	only	-	Apr	 2	2:00s	1:00	S
-Rule	Neth	1945	only	-	Sep	16	2:00s	0	-
-#
-# Amsterdam Mean Time was +00:19:32.13 exactly, but the .13 is omitted
-# below because the current format requires GMTOFF to be an integer.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Europe/Amsterdam	0:19:32 -	LMT	1835
-			0:19:32	Neth	%s	1937 Jul  1
-			0:20	Neth	NE%sT	1940 May 16 0:00 # Dutch Time
-			1:00	C-Eur	CE%sT	1945 Apr  2 2:00
-			1:00	Neth	CE%sT	1977
-			1:00	EU	CE%sT
-
-# Norway
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-# Whitman gives 1916 May 21 - 1916 Oct 21; go with Shanks.
-Rule	Norway	1916	only	-	May	22	1:00	1:00	S
-Rule	Norway	1916	only	-	Sep	30	0:00	0	-
-# Whitman says DST observed 1935-08-11/1942-11-01, then 1943-03-29/10-04,
-# 1944-04-03/10-02, and 1945-04-01/10-01; go with Shanks.
-Rule	Norway	1945	only	-	Apr	 2	2:00s	1:00	S
-Rule	Norway	1945	only	-	Oct	 1	2:00s	0	-
-Rule	Norway	1959	1964	-	Mar	Sun>=15	2:00s	1:00	S
-Rule	Norway	1959	1965	-	Sep	Sun>=15	2:00s	0	-
-Rule	Norway	1965	only	-	Apr	25	2:00s	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Oslo	0:43:00 -	LMT	1895 Jan  1
-			1:00	Norway	CE%sT	1940 Aug 10 23:00
-			1:00	C-Eur	CE%sT	1945 Apr  2  2:00
-			1:00	Norway	CE%sT	1980
-			1:00	EU	CE%sT
-
-# Svalbard & Jan Mayen
-
-# From Steffen Thorsen (2001-05-01):
-# Although I could not find it explicitly, it seems that Jan Mayen and
-# Svalbard have been using the same time as Norway at least since the
-# time they were declared as parts of Norway.  Svalbard was declared
-# as a part of Norway by law of 1925-07-17 no 11, section 4 and Jan
-# Mayen by law of 1930-02-27 no 2, section 2. (From
-# http://www.lovdata.no/all/nl-19250717-011.html and
-# http://www.lovdata.no/all/nl-19300227-002.html).  The law/regulation
-# for normal/standard time in Norway is from 1894-06-29 no 1 (came
-# into operation on 1895-01-01) and Svalbard/Jan Mayen seem to be a
-# part of this law since 1925/1930. (From
-# http://www.lovdata.no/all/nl-18940629-001.html ) I have not been
-# able to find if Jan Mayen used a different time zone (e.g. -0100)
-# before 1930. Jan Mayen has only been "inhabitated" since 1921 by
-# Norwegian meteorologists and maybe used the same time as Norway ever
-# since 1921.  Svalbard (Arctic/Longyearbyen) has been inhabited since
-# before 1895, and therefore probably changed the local time somewhere
-# between 1895 and 1925 (inclusive).
-
-# From Paul Eggert (2001-05-01):
-#
-# Actually, Jan Mayen was never occupied by Germany during World War II,
-# so it must have diverged from Oslo time during the war, as Oslo was
-# keeping Berlin time.
-#
-# <http://home.no.net/janmayen/history.htm> says that the meteorologists
-# burned down their station in 1940 and left the island, but returned in
-# 1941 with a small Norwegian garrison and continued operations despite
-# frequent air ttacks from Germans.  In 1943 the Americans established a
-# radiolocating station on the island, called "Atlantic City".  Possibly
-# the UTC offset changed during the war, but I think it unlikely that
-# Jan Mayen used German daylight-saving rules.
-#
-# Svalbard is more complicated, as it was raided in August 1941 by an
-# Allied party that evacuated the civilian population to England (says
-# <http://www.bartleby.com/65/sv/Svalbard.html>).  The Svalbard FAQ
-# <http://www.svalbard.com/SvalbardFAQ.html> says that the Germans were
-# expelled on 1942-05-14.  However, small parties of Germans did return,
-# and according to Wilhelm Dege's book "War North of 80" (1954)
-# <http://www.ucalgary.ca/UofC/departments/UP/1-55238/1-55238-110-2.html>
-# the German armed forces at the Svalbard weather station code-named
-# Haudegen did not surrender to the Allies until September 1945.
-#
-# All these events predate our cutoff date of 1970.  Unless we can
-# come up with more definitive info about the timekeeping during the
-# war years it's probably best just do do the following for now:
-Link	Europe/Oslo	Arctic/Longyearbyen
-Link	Europe/Oslo	Atlantic/Jan_Mayen
-
-# Poland
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Poland	1918	1919	-	Sep	16	2:00s	0	-
-Rule	Poland	1919	only	-	Apr	15	2:00s	1:00	S
-# Whitman gives 1944 Nov 30; go with Shanks.
-Rule	Poland	1944	only	-	Oct	 4	2:00	0	-
-# For 1944-1948 Whitman gives the previous day; go with Shanks.
-Rule	Poland	1945	only	-	Apr	29	0:00	1:00	S
-Rule	Poland	1945	only	-	Nov	 1	0:00	0	-
-Rule	Poland	1946	only	-	Apr	14	0:00	1:00	S
-Rule	Poland	1946	only	-	Sep	 7	0:00	0	-
-Rule	Poland	1947	only	-	May	 4	0:00	1:00	S
-Rule	Poland	1947	1948	-	Oct	Sun>=1	0:00	0	-
-Rule	Poland	1948	only	-	Apr	18	0:00	1:00	S
-# Whitman also gives 1949 Apr 9 - 1949 Oct 1; go with Shanks.
-Rule	Poland	1957	only	-	Jun	 2	1:00s	1:00	S
-Rule	Poland	1957	1958	-	Sep	lastSun	1:00s	0	-
-Rule	Poland	1958	only	-	Mar	30	1:00s	1:00	S
-Rule	Poland	1959	only	-	May	31	1:00s	1:00	S
-Rule	Poland	1959	1961	-	Oct	Sun>=1	1:00s	0	-
-Rule	Poland	1960	only	-	Apr	 3	1:00s	1:00	S
-Rule	Poland	1961	1964	-	May	Sun>=25	1:00s	1:00	S
-Rule	Poland	1962	1964	-	Sep	lastSun	1:00s	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Warsaw	1:24:00 -	LMT	1880
-			1:24:00	-	WMT	1915 Aug  5   # Warsaw Mean Time
-			1:00	C-Eur	CE%sT	1918 Sep 16 3:00
-			2:00	Poland	EE%sT	1922 Jun
-			1:00	Poland	CE%sT	1940 Jun 23 2:00
-			1:00	C-Eur	CE%sT	1944 Oct
-			1:00	Poland	CE%sT	1977 Apr  3 1:00
-			1:00	W-Eur	CE%sT	1999
-# IATA SSIM (1991/1996) gives EU rules, but the _The Warsaw Voice_
-# <a href="http://www.warsawvoice.com.pl/v361/NewsInBrief.shtml">
-# http://www.warsawvoice.com/pl/v361/NewsInBrief.shtml (1995-09-24)
-# </a>
-# says the autumn 1995 switch was at 02:00.
-# Stick with W-Eur for now.
-#
-# From Marcin.Kasperski@softax.com.pl (1999-06-10):
-# According to my colleagues someone recently decided, that Poland would
-# follow European Union regulations, so - I think - the matter is not
-# worth further discussion.
-#
-# From Paul Eggert (1999-06-10):
-# Kasperski also writes that the government futzed with the rules in 1997
-# or 1998 but he doesn't remember the details.  Assume they switched to
-# EU rules in 1999.
-			1:00	EU	CE%sT
-
-# Portugal
-#
-# From Rui Pedro Salgueiro <rps@inescca.inescc.pt> (1992-11-12):
-# Portugal has recently (September, 27) changed timezone
-# (from WET to MET or CET) to harmonize with EEC.
-#
-# Martin Bruckmann <martin@ua.pt> (1996-02-29) reports via Peter Ilieve
-# that Portugal is reverting to 0:00 by not moving its clocks this spring.
-# The new Prime Minister was fed up with getting up in the dark in the winter.
-#
-# From Paul Eggert (1996-11-12):
-# IATA SSIM (1991-09) reports several 1991-09 and 1992-09 transitions
-# at 02:00u, not 01:00u.  Assume that these are typos.
-# IATA SSIM (1991/1992) reports that the Azores were at -1:00.
-# IATA SSIM (1993-02) says +0:00; later issues (through 1996-09) say -1:00.
-# Guess that the Azores changed to EU rules in 1992 (since that's when Portugal
-# harmonized with the EU), and that they stayed +0:00 that winter.
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-# DSH writes that despite Decree 1,469 (1915), the change to the clocks was not
-# done every year, depending on what Spain did, because of railroad schedules.
-# Go with Shanks.
-Rule	Port	1916	only	-	Jun	17	23:00	1:00	S
-# Whitman gives 1916 Oct 31; go with Shanks.
-Rule	Port	1916	only	-	Nov	 1	 1:00	0	-
-Rule	Port	1917	only	-	Feb	28	23:00s	1:00	S
-Rule	Port	1917	1921	-	Oct	14	23:00s	0	-
-Rule	Port	1918	only	-	Mar	 1	23:00s	1:00	S
-Rule	Port	1919	only	-	Feb	28	23:00s	1:00	S
-Rule	Port	1920	only	-	Feb	29	23:00s	1:00	S
-Rule	Port	1921	only	-	Feb	28	23:00s	1:00	S
-Rule	Port	1924	only	-	Apr	16	23:00s	1:00	S
-Rule	Port	1924	only	-	Oct	14	23:00s	0	-
-Rule	Port	1926	only	-	Apr	17	23:00s	1:00	S
-Rule	Port	1926	1929	-	Oct	Sat>=1	23:00s	0	-
-Rule	Port	1927	only	-	Apr	 9	23:00s	1:00	S
-Rule	Port	1928	only	-	Apr	14	23:00s	1:00	S
-Rule	Port	1929	only	-	Apr	20	23:00s	1:00	S
-Rule	Port	1931	only	-	Apr	18	23:00s	1:00	S
-# Whitman gives 1931 Oct 8; go with Shanks.
-Rule	Port	1931	1932	-	Oct	Sat>=1	23:00s	0	-
-Rule	Port	1932	only	-	Apr	 2	23:00s	1:00	S
-# Shanks gives 1934 Apr 4; go with Whitman.
-Rule	Port	1934	only	-	Apr	 7	23:00s	1:00	S
-# Whitman gives 1934 Oct 5; go with Shanks.
-Rule	Port	1934	1938	-	Oct	Sat>=1	23:00s	0	-
-# Shanks gives 1935 Apr 30; go with Whitman.
-Rule	Port	1935	only	-	Mar	30	23:00s	1:00	S
-Rule	Port	1936	only	-	Apr	18	23:00s	1:00	S
-# Whitman gives 1937 Apr 2; go with Shanks.
-Rule	Port	1937	only	-	Apr	 3	23:00s	1:00	S
-Rule	Port	1938	only	-	Mar	26	23:00s	1:00	S
-Rule	Port	1939	only	-	Apr	15	23:00s	1:00	S
-# Whitman gives 1939 Oct 7; go with Shanks.
-Rule	Port	1939	only	-	Nov	18	23:00s	0	-
-Rule	Port	1940	only	-	Feb	24	23:00s	1:00	S
-# Shanks gives 1940 Oct 7; go with Whitman.
-Rule	Port	1940	1941	-	Oct	 5	23:00s	0	-
-Rule	Port	1941	only	-	Apr	 5	23:00s	1:00	S
-Rule	Port	1942	1945	-	Mar	Sat>=8	23:00s	1:00	S
-Rule	Port	1942	only	-	Apr	25	22:00s	2:00	M # Midsummer
-Rule	Port	1942	only	-	Aug	15	22:00s	1:00	S
-Rule	Port	1942	1945	-	Oct	Sat>=24	23:00s	0	-
-Rule	Port	1943	only	-	Apr	17	22:00s	2:00	M
-Rule	Port	1943	1945	-	Aug	Sat>=25	22:00s	1:00	S
-Rule	Port	1944	1945	-	Apr	Sat>=21	22:00s	2:00	M
-Rule	Port	1946	only	-	Apr	Sat>=1	23:00s	1:00	S
-Rule	Port	1946	only	-	Oct	Sat>=1	23:00s	0	-
-Rule	Port	1947	1949	-	Apr	Sun>=1	 2:00s	1:00	S
-Rule	Port	1947	1949	-	Oct	Sun>=1	 2:00s	0	-
-# Shanks says DST was observed in 1950; go with Whitman.
-# Whitman gives Oct lastSun for 1952 on; go with Shanks.
-Rule	Port	1951	1965	-	Apr	Sun>=1	 2:00s	1:00	S
-Rule	Port	1951	1965	-	Oct	Sun>=1	 2:00s	0	-
-Rule	Port	1977	only	-	Mar	27	 0:00s	1:00	S
-Rule	Port	1977	only	-	Sep	25	 0:00s	0	-
-Rule	Port	1978	1979	-	Apr	Sun>=1	 0:00s	1:00	S
-Rule	Port	1978	only	-	Oct	 1	 0:00s	0	-
-Rule	Port	1979	1982	-	Sep	lastSun	 1:00s	0	-
-Rule	Port	1980	only	-	Mar	lastSun	 0:00s	1:00	S
-Rule	Port	1981	1982	-	Mar	lastSun	 1:00s	1:00	S
-Rule	Port	1983	only	-	Mar	lastSun	 2:00s	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-# Shanks says that the transition from LMT to WET occurred 1911-05-24;
-# Willett says 1912-01-01.  Go with Willett.
-Zone	Europe/Lisbon	-0:36:32 -	LMT	1884
-			-0:36:32 -	LMT	1912 Jan  1  # Lisbon Mean Time
-			 0:00	Port	WE%sT	1966 Apr  3 2:00
-			 1:00	-	CET	1976 Sep 26 1:00
-			 0:00	Port	WE%sT	1983 Sep 25 1:00s
-			 0:00	W-Eur	WE%sT	1992 Sep 27 1:00s
-			 1:00	EU	CE%sT	1996 Mar 31 1:00u
-			 0:00	EU	WE%sT
-Zone Atlantic/Azores	-1:42:40 -	LMT	1884		# Ponta Delgada
-			-1:54:32 -	HMT	1911 May 24  # Horta Mean Time
-			-2:00	Port	AZO%sT	1966 Apr  3 2:00 # Azores Time
-			-1:00	Port	AZO%sT	1983 Sep 25 1:00s
-			-1:00	W-Eur	AZO%sT	1992 Sep 27 1:00s
-			 0:00	EU	WE%sT	1993 Mar 28 1:00u
-			-1:00	EU	AZO%sT
-Zone Atlantic/Madeira	-1:07:36 -	LMT	1884		# Funchal
-			-1:07:36 -	FMT	1911 May 24  # Funchal Mean Time
-			-1:00	Port	MAD%sT	1966 Apr  3 2:00 # Madeira Time
-			 0:00	Port	WE%sT	1983 Sep 25 1:00s
-			 0:00	EU	WE%sT
-
-# Romania
-#
-# From Paul Eggert (1999-10-07):
-# <a href="http://www.nineoclock.ro/POL/1778pol.html">
-# Nine O'clock</a> (1998-10-23) reports that the switch occurred at
-# 04:00 local time in fall 1998.  For lack of better info,
-# assume that Romania and Moldova switched to EU rules in 1997,
-# the same year as Bulgaria.
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Romania	1932	only	-	May	21	 0:00s	1:00	S
-Rule	Romania	1932	1939	-	Oct	Sun>=1	 0:00s	0	-
-Rule	Romania	1933	1939	-	Apr	Sun>=2	 0:00s	1:00	S
-Rule	Romania	1979	only	-	May	27	 0:00	1:00	S
-Rule	Romania	1979	only	-	Sep	lastSun	 0:00	0	-
-Rule	Romania	1980	only	-	Apr	 5	23:00	1:00	S
-Rule	Romania	1980	only	-	Sep	lastSun	 1:00	0	-
-Rule	Romania	1991	1993	-	Mar	lastSun	 0:00s	1:00	S
-Rule	Romania	1991	1993	-	Sep	lastSun	 0:00s	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Europe/Bucharest	1:44:24 -	LMT	1891 Oct
-			1:44:24	-	BMT	1931 Jul 24	# Bucharest MT
-			2:00	Romania	EE%sT	1981 Mar 29 2:00s
-			2:00	C-Eur	EE%sT	1991
-			2:00	Romania	EE%sT	1994
-			2:00	E-Eur	EE%sT	1997
-			2:00	EU	EE%sT
-
-# Russia
-
-# From Paul Eggert <eggert@twinsun.com> (1999-11-12):
-# Except for Moscow after 1919-07-01, I invented the time zone abbreviations.
-# Moscow time zone abbreviations after 1919-07-01, and Moscow rules after 1991,
-# are from Andrey A. Chernov.  The rest is from Shanks, except we follow
-# Chernov's report that 1992 DST transitions were Sat 23:00, not Sun 02:00s.
-#
-# From Stanislaw A. Kuzikowski <S.A.Kuz@iae.nsk.su> (1994-06-29):
-# But now it is some months since Novosibirsk is 3 hours ahead of Moscow!
-# I do not know why they have decided to make this change;
-# as far as I remember it was done exactly during winter->summer switching
-# so we (Novosibirsk) simply did not switch.
-#
-# From Andrey A. Chernov <ache@nagual.ru> (1996-10-04):
-# `MSK' and `MSD' were born and used initially on Moscow computers with
-# UNIX-like OSes by several developer groups (e.g. Demos group, Kiae group)....
-# The next step was the UUCP network, the Relcom predecessor
-# (used mainly for mail), and MSK/MSD was actively used there.
-#
-# From Chris Carrier <72157.3334@CompuServe.COM> (1996-10-30):
-# According to a friend of mine who rode the Trans-Siberian Railroad from
-# Moscow to Irkutsk in 1995, public air and rail transport in Russia ...
-# still follows Moscow time, no matter where in Russia it is located.
-#
-# For Grozny, Chechnya, we have the following story from
-# John Daniszewski, "Scavengers in the Rubble", Los Angeles Times (2001-02-07):
-# News--often false--is spread by word of mouth.  A rumor that it was
-# time to move the clocks back put this whole city out of sync with
-# the rest of Russia for two weeks--even soldiers stationed here began
-# enforcing curfew at the wrong time.
-#
-# From Gwillim Law (2001-06-05):
-# There's considerable evidence that Sakhalin Island used to be in
-# UTC+11, and has changed to UTC+10, in this decade.  I start with the
-# SSIM, which listed Yuzhno-Sakhalinsk in zone RU10 along with Magadan
-# until February 1997, and then in RU9 with Khabarovsk and Vladivostok
-# since September 1997....  Although the Kuril Islands are
-# administratively part of Sakhalin oblast', they appear to have
-# remained on UTC+11 along with Magadan.
-#
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-#
-# Kaliningradskaya oblast'.
-Zone Europe/Kaliningrad	 1:22:00 -	LMT	1893 Apr
-			 1:00	C-Eur	CE%sT	1945
-			 2:00	Poland	CE%sT	1946
-			 3:00	Russia	MSK/MSD	1991 Mar 31 2:00s
-			 2:00	Russia	EE%sT
-#
-# From Oscar van Vlijmen (2001-08-25): [This region consists of]
-# Respublika Adygeya, Arkhangel'skaya oblast', Astrakhanskaya oblast',
-# Belgorodskaya oblast', Bryanskaya oblast', Vladimirskaya oblast',
-# Volgogradskaya oblast', Vologodskaya oblast', Voronezhskaya oblast',
-# Respublika Dagestan, Ivanovskaya oblast', Respublika Ingushetiya,
-# Kabarbino-Balkarskaya Respublika, Respublika Kalmykiya,
-# Kalyzhskaya oblast', Respublika Karachaevo-Cherkessiya,
-# Respublika Kareliya, Kirovskaya oblast', Respublika Komi,
-# Kostromskaya oblast', Krasnodarskij kraj, Kurskaya oblast',
-# Leningradskaya oblast', Lipetskaya oblast', Respublika Marij El,
-# Respublika Mordoviya, Moskva, Moskovskaya oblast',
-# Murmanskaya oblast', Nenetskij avtonomnyj okrug,
-# Nizhegorodskaya oblast', Novgorodskaya oblast', Orlovskaya oblast',
-# Penzenskaya oblast', Pskovskaya oblast', Rostovskaya oblast',
-# Ryazanskaya oblast', Sankt-Peterburg, Saratovskaya oblast',
-# Respublika Severnaya Osetiya, Smolenskaya oblast',
-# Stavropol'skij kraj, Tambovskaya oblast', Respublika Tatarstan,
-# Tverskaya oblast', Tyl'skaya oblast', Ul'yanovskaya oblast',
-# Chechenskaya Respublika, Chuvashskaya oblast',
-# Yaroslavskaya oblast'
-Zone Europe/Moscow	 2:30:20 -	LMT	1880
-			 2:30	-	MMT	1916 Jul  3 # Moscow Mean Time
-			 2:30:48 Russia	%s	1919 Jul  1 2:00
-			 3:00	Russia	MSK/MSD	1922 Oct
-			 2:00	-	EET	1930 Jun 21
-			 3:00	Russia	MSK/MSD	1991 Mar 31 2:00s
-			 2:00	Russia	EE%sT	1992 Jan 19 2:00s
-			 3:00	Russia	MSK/MSD
-#
-# From Oscar van Vlijmen (2001-08-25): [This region consists of]
-# Samarskaya oblast', Udmyrtskaya respublika
-Zone Europe/Samara	 3:20:36 -	LMT	1919 Jul  1 2:00
-			 3:00	-	KUYT	1930 Jun 21 # Kuybyshev
-			 4:00	Russia	KUY%sT	1989 Mar 26 2:00s
-			 3:00	Russia	KUY%sT	1991 Mar 31 2:00s
-			 2:00	Russia	KUY%sT	1991 Sep 29 2:00s
-			 3:00	-	KUYT	1991 Oct 20 3:00
-			 4:00	Russia	SAM%sT	# Samara Time
-#
-# From Oscar van Vlijmen (2001-08-25): [This region consists of]
-# Respublika Bashkortostan, Komi-Permyatskij avtonomnyj okrug,
-# Kurganskaya oblast', Orenburgskaya oblast', Permskaya oblast',
-# Sverdlovskaya oblast', Tyumenskaya oblast',
-# Khanty-Manskijskij avtonomnyj okrug, Chelyabinskaya oblast',
-# Yamalo-Nenetskij avtonomnyj okrug.
-Zone Asia/Yekaterinburg	 4:02:24 -	LMT	1919 Jul 15 4:00
-			 4:00	-	SVET	1930 Jun 21 # Sverdlovsk Time
-			 5:00	Russia	SVE%sT	1991 Mar 31 2:00s
-			 4:00	Russia	SVE%sT	1992 Jan 19 2:00s
-			 5:00	Russia	YEK%sT	# Yekaterinburg Time
-#
-# From Oscar van Vlijmen (2001-08-25): [This region consists of]
-# Respublika Altaj, Altajskij kraj, Omskaya oblast'.
-Zone Asia/Omsk		 4:53:36 -	LMT	1919 Nov 14
-			 5:00	-	OMST	1930 Jun 21 # Omsk TIme
-			 6:00	Russia	OMS%sT	1991 Mar 31 2:00s
-			 5:00	Russia	OMS%sT	1992 Jan 19 2:00s
-			 6:00	Russia	OMS%sT
-#
-# Novosibirskaya oblast'.
-Zone Asia/Novosibirsk	 5:31:40 -	LMT	1919 Dec 14 6:00
-			 6:00	-	NOVT	1930 Jun 21 # Novosibirsk Time
-			 7:00	Russia	NOV%sT	1991 Mar 31 2:00s
-			 6:00	Russia	NOV%sT	1992 Jan 19 2:00s
-			 7:00	Russia	NOV%sT	1993 May 23 # says Shanks
-			 6:00	Russia	NOV%sT
-#
-# From Oscar van Vlijmen (2001-08-25): [This region consists of]
-# Kemerovskaya oblast', Krasnoyarskij kraj,
-# Tajmyrskij (Dolgano-Nenetskij) avtonomnyj okrug, Tomskaya oblast',
-# Respublika Tuva, Respublika Khakasiya, Evenkijskij avtonomnyj okrug.
-Zone Asia/Krasnoyarsk	 6:11:20 -	LMT	1920 Jan  6
-			 6:00	-	KRAT	1930 Jun 21 # Krasnoyarsk Time
-			 7:00	Russia	KRA%sT	1991 Mar 31 2:00s
-			 6:00	Russia	KRA%sT	1992 Jan 19 2:00s
-			 7:00	Russia	KRA%sT
-#
-# From Oscar van Vlijmen (2001-08-25): [This region consists of]
-# Respublika Buryatiya, Irkutskaya oblast',
-# Ust'-Ordynskij Buryatskij avtonomnyj okrug.
-Zone Asia/Irkutsk	 6:57:20 -	LMT	1880
-			 6:57:20 -	IMT	1920 Jan 25 # Irkutsk Mean Time
-			 7:00	-	IRKT	1930 Jun 21 # Irkutsk Time
-			 8:00	Russia	IRK%sT	1991 Mar 31 2:00s
-			 7:00	Russia	IRK%sT	1992 Jan 19 2:00s
-			 8:00	Russia	IRK%sT
-#
-# From Oscar van Vlijmen (2003-10-18): [This region consists of]
-# Aginskij Buryatskij avtonomnyj okrug, Amurskaya oblast',
-# [parts of] Respublika Sakha (Yakutiya), Chitinskaya oblast'.
-# The Sakha districts are: Aldanskij, Amginskij, Anabarskij,
-# Bulunskij, Verkhnekolymskij, Verkhnevilyujskij, Vilyujskij, Gornyj,
-# Zhiganskij, Kobyajskij, Lenskij, Megino-Kangalasskij, Mirninskij,
-# Namskij, Nyurbinskij, Olenekskij, Olekminskij, Srednekolymskij,
-# Suntarskij, Tattinskij, Ust'-Aldanskij, Khangalasskij,
-# Churapchinskij, Eveno-Bytantajskij.
-Zone Asia/Yakutsk	 8:38:40 -	LMT	1919 Dec 15
-			 8:00	-	YAKT	1930 Jun 21 # Yakutsk Time
-			 9:00	Russia	YAK%sT	1991 Mar 31 2:00s
-			 8:00	Russia	YAK%sT	1992 Jan 19 2:00s
-			 9:00	Russia	YAK%sT
-#
-# From Oscar van Vlijmen (2003-10-18): [This region consists of]
-# Evrejskaya avtonomnaya oblast', Khabarovskij kraj, Primorskij kraj,
-# [parts of] Respublika Sakha (Yakutiya).
-# The Sakha districts are: Verkhoyanskij, Tomponskij, Ust'-Majskij,
-# Ust'-Yanskij.
-Zone Asia/Vladivostok	 8:47:44 -	LMT	1922 Nov 15
-			 9:00	-	VLAT	1930 Jun 21 # Vladivostok Time
-			10:00	Russia	VLA%sT	1991 Mar 31 2:00s
-			 9:00	Russia	VLA%sST	1992 Jan 19 2:00s
-			10:00	Russia	VLA%sT
-#
-# Sakhalinskaya oblast'.
-# The Zone name should be Yuzhno-Sakhalinsk, but that's too long.
-Zone Asia/Sakhalin	 9:30:48 -	LMT	1905 Aug 23
-			 9:00	-	CJT	1938
-			 9:00	-	JST	1945 Aug 25
-			11:00	Russia	SAK%sT	1991 Mar 31 2:00s # Sakhalin T.
-			10:00	Russia	SAK%sT	1992 Jan 19 2:00s
-			11:00	Russia	SAK%sT	1997 Mar lastSun 2:00s
-			10:00	Russia	SAK%sT
-#
-# From Oscar van Vlijmen (2003-10-18): [This region consists of]
-# Magadanskaya oblast', Respublika Sakha (Yakutiya).
-# Probably also: Kuril Islands.
-# The Sakha districts are: Abyjskij, Allaikhovskij, Momskij,
-# Nizhnekolymskij, Ojmyakonskij.
-Zone Asia/Magadan	10:03:12 -	LMT	1924 May  2
-			10:00	-	MAGT	1930 Jun 21 # Magadan Time
-			11:00	Russia	MAG%sT	1991 Mar 31 2:00s
-			10:00	Russia	MAG%sT	1992 Jan 19 2:00s
-			11:00	Russia	MAG%sT
-#
-# From Oscar van Vlijmen (2001-08-25): [This region consists of]
-# Kamchatskaya oblast', Koryakskij avtonomnyj okrug.
-#
-# The Zone name should be Asia/Petropavlovsk-Kamchatski, but that's too long.
-Zone Asia/Kamchatka	10:34:36 -	LMT	1922 Nov 10
-			11:00	-	PETT	1930 Jun 21 # P-K Time
-			12:00	Russia	PET%sT	1991 Mar 31 2:00s
-			11:00	Russia	PET%sT	1992 Jan 19 2:00s
-			12:00	Russia	PET%sT
-#
-# Chukotskij avtonomnyj okrug
-Zone Asia/Anadyr	11:49:56 -	LMT	1924 May  2
-			12:00	-	ANAT	1930 Jun 21 # Anadyr Time
-			13:00	Russia	ANA%sT	1982 Apr  1 0:00s
-			12:00	Russia	ANA%sT	1991 Mar 31 2:00s
-			11:00	Russia	ANA%sT	1992 Jan 19 2:00s
-			12:00	Russia	ANA%sT
-
-# Serbia and Montenegro
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Belgrade	1:22:00	-	LMT	1884
-			1:00	-	CET	1941 Apr 18 23:00
-			1:00	C-Eur	CE%sT	1945 May  8  2:00s
-			1:00	1:00	CEST	1945 Sep 16  2:00s
-# Metod Kozelj <metod.kozelj@rzs-hm.si> reports that the legal date of
-# transition to EU rules was 1982-11-27, for all of Yugoslavia at the time.
-# Shanks doesn't give as much detail, so go with Kozelj.
-			1:00	-	CET	1982 Nov 27
-			1:00	EU	CE%sT
-Link Europe/Belgrade Europe/Ljubljana	# Slovenia
-Link Europe/Belgrade Europe/Sarajevo	# Bosnia and Herzegovina
-Link Europe/Belgrade Europe/Skopje	# Macedonia
-Link Europe/Belgrade Europe/Zagreb	# Croatia
-
-# Slovakia
-Link Europe/Prague Europe/Bratislava
-
-# Slovenia
-# see Serbia and Montenegro
-
-# Spain
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-# For 1917-1919 Whitman gives Apr Sat>=1 - Oct Sat>=1; go with Shanks.
-Rule	Spain	1917	only	-	May	 5	23:00s	1:00	S
-Rule	Spain	1917	1919	-	Oct	 6	23:00s	0	-
-Rule	Spain	1918	only	-	Apr	15	23:00s	1:00	S
-Rule	Spain	1919	only	-	Apr	 5	23:00s	1:00	S
-# Whitman gives 1921 Feb 28 - Oct 14; go with Shanks.
-Rule	Spain	1924	only	-	Apr	16	23:00s	1:00	S
-# Whitman gives 1924 Oct 14; go with Shanks.
-Rule	Spain	1924	only	-	Oct	 4	23:00s	0	-
-Rule	Spain	1926	only	-	Apr	17	23:00s	1:00	S
-# Whitman says no DST in 1929; go with Shanks.
-Rule	Spain	1926	1929	-	Oct	Sat>=1	23:00s	0	-
-Rule	Spain	1927	only	-	Apr	 9	23:00s	1:00	S
-Rule	Spain	1928	only	-	Apr	14	23:00s	1:00	S
-Rule	Spain	1929	only	-	Apr	20	23:00s	1:00	S
-# Whitman gives 1937 Jun 16, 1938 Apr 16, 1940 Apr 13; go with Shanks.
-Rule	Spain	1937	only	-	May	22	23:00s	1:00	S
-Rule	Spain	1937	1939	-	Oct	Sat>=1	23:00s	0	-
-Rule	Spain	1938	only	-	Mar	22	23:00s	1:00	S
-Rule	Spain	1939	only	-	Apr	15	23:00s	1:00	S
-Rule	Spain	1940	only	-	Mar	16	23:00s	1:00	S
-# Whitman says no DST 1942-1945; go with Shanks.
-Rule	Spain	1942	only	-	May	 2	22:00s	2:00	M # Midsummer
-Rule	Spain	1942	only	-	Sep	 1	22:00s	1:00	S
-Rule	Spain	1943	1946	-	Apr	Sat>=13	22:00s	2:00	M
-Rule	Spain	1943	only	-	Oct	 3	22:00s	1:00	S
-Rule	Spain	1944	only	-	Oct	10	22:00s	1:00	S
-Rule	Spain	1945	only	-	Sep	30	 1:00	1:00	S
-Rule	Spain	1946	only	-	Sep	30	 0:00	0	-
-Rule	Spain	1949	only	-	Apr	30	23:00	1:00	S
-Rule	Spain	1949	only	-	Sep	30	 1:00	0	-
-Rule	Spain	1974	1975	-	Apr	Sat>=13	23:00	1:00	S
-Rule	Spain	1974	1975	-	Oct	Sun>=1	 1:00	0	-
-Rule	Spain	1976	only	-	Mar	27	23:00	1:00	S
-Rule	Spain	1976	1977	-	Sep	lastSun	 1:00	0	-
-Rule	Spain	1977	1978	-	Apr	 2	23:00	1:00	S
-Rule	Spain	1978	only	-	Oct	 1	 1:00	0	-
-# The following rules are copied from Morocco from 1967 through 1978.
-Rule SpainAfrica 1967	only	-	Jun	 3	12:00	1:00	S
-Rule SpainAfrica 1967	only	-	Oct	 1	 0:00	0	-
-Rule SpainAfrica 1974	only	-	Jun	24	 0:00	1:00	S
-Rule SpainAfrica 1974	only	-	Sep	 1	 0:00	0	-
-Rule SpainAfrica 1976	1977	-	May	 1	 0:00	1:00	S
-Rule SpainAfrica 1976	only	-	Aug	 1	 0:00	0	-
-Rule SpainAfrica 1977	only	-	Sep	28	 0:00	0	-
-Rule SpainAfrica 1978	only	-	Jun	 1	 0:00	1:00	S
-Rule SpainAfrica 1978	only	-	Aug	 4	 0:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Madrid	-0:14:44 -	LMT	1901
-			 0:00	Spain	WE%sT	1946 Sep 30
-			 1:00	Spain	CE%sT	1979
-			 1:00	EU	CE%sT
-Zone	Africa/Ceuta	-0:21:16 -	LMT	1901
-			 0:00	-	WET	1918 May  6 23:00
-			 0:00	1:00	WEST	1918 Oct  7 23:00
-			 0:00	-	WET	1924
-			 0:00	Spain	WE%sT	1929
-			 0:00 SpainAfrica WE%sT 1984 Mar 16
-			 1:00	-	CET	1986
-			 1:00	EU	CE%sT
-Zone	Atlantic/Canary	-1:01:36 -	LMT	1922 Mar # Las Palmas de Gran C.
-			-1:00	-	CANT	1946 Sep 30 1:00 # Canaries Time
-			 0:00	-	WET	1980 Apr  6 0:00s
-			 0:00	1:00	WEST	1980 Sep 28 0:00s
-			 0:00	EU	WE%sT
-# IATA SSIM (1996-09) says the Canaries switch at 2:00u, not 1:00u.
-# Ignore this for now, as the Canaries are part of the EU.
-
-# Sweden
-
-# From Ivan Nilsson (2001-04-13), superseding Shanks:
-#
-# The law "Svensk forfattningssamling 1878, no 14" about standard time in 1879:
-# From the beginning of 1879 (that is 01-01 00:00) the time for all
-# places in the country is "the mean solar time for the meridian at
-# three degrees, or twelve minutes of time, to the west of the
-# meridian of the Observatory of Stockholm".  The law is dated 1878-05-31.
-#
-# The observatory at that time had the meridian 18 degrees 03' 30"
-# eastern longitude = 01:12:14 in time.  Less 12 minutes gives the
-# national standard time as 01:00:14 ahead of GMT....
-#
-# About the beginning of CET in Sweden. The lawtext ("Svensk
-# forfattningssamling 1899, no 44") states, that "from the beginning
-# of 1900... ... the same as the mean solar time for the meridian at
-# the distance of one hour of time from the meridian of the English
-# observatory at Greenwich, or at 12 minutes 14 seconds to the west
-# from the meridian of the Observatory of Stockholm". The law is dated
-# 1899-06-16.  In short: At 1900-01-01 00:00:00 the new standard time
-# in Sweden is 01:00:00 ahead of GMT.
-#
-# 1916: The lawtext ("Svensk forfattningssamling 1916, no 124") states
-# that "1916-05-15 is considered to begin one hour earlier". It is
-# pretty obvious that at 05-14 23:00 the clocks are set to 05-15 00:00....
-# Further the law says, that "1916-09-30 is considered to end one hour later".
-#
-# The laws regulating [DST] are available on the site of the Swedish
-# Parliament beginning with 1985 - the laws regulating 1980/1984 are
-# not available on the site (to my knowledge they are only available
-# in Swedish): <http://www.riksdagen.se/english/work/sfst.asp> (type
-# "sommartid" without the quotes in the field "Fritext" and then click
-# the Sok-button).
-#
-# (2001-05-13):
-#
-# I have now found a newspaper stating that at 1916-10-01 01:00
-# summertime the church-clocks etc were set back one hour to show
-# 1916-10-01 00:00 standard time.  The article also reports that some
-# people thought the switch to standard time would take place already
-# at 1916-10-01 00:00 summer time, but they had to wait for another
-# hour before the event took place.
-#
-# Source: The newspaper "Dagens Nyheter", 1916-10-01, page 7 upper left.
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Europe/Stockholm	1:12:12 -	LMT	1879 Jan  1
-			1:00:14	-	SET	1900 Jan  1	# Swedish Time
-			1:00	-	CET	1916 May 14 23:00
-			1:00	1:00	CEST	1916 Oct  1 01:00
-			1:00	-	CET	1980
-			1:00	EU	CE%sT
-
-# Switzerland
-# From Howse:
-# By the end of the 18th century clocks and watches became commonplace
-# and their performance improved enormously.  Communities began to keep
-# mean time in preference to apparent time -- Geneva from 1780 ....
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-# From Whitman (who writes ``Midnight?''):
-Rule	Swiss	1940	only	-	Nov	 2	0:00	1:00	S
-Rule	Swiss	1940	only	-	Dec	31	0:00	0	-
-# From Shanks:
-Rule	Swiss	1941	1942	-	May	Sun>=1	2:00	1:00	S
-Rule	Swiss	1941	1942	-	Oct	Sun>=1	0:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Zurich	0:34:08 -	LMT	1848 Sep 12
-			0:29:44	-	BMT	1894 Jun # Bern Mean Time
-			1:00	Swiss	CE%sT	1981
-			1:00	EU	CE%sT
-
-# Turkey
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Turkey	1916	only	-	May	 1	0:00	1:00	S
-Rule	Turkey	1916	only	-	Oct	 1	0:00	0	-
-Rule	Turkey	1920	only	-	Mar	28	0:00	1:00	S
-Rule	Turkey	1920	only	-	Oct	25	0:00	0	-
-Rule	Turkey	1921	only	-	Apr	 3	0:00	1:00	S
-Rule	Turkey	1921	only	-	Oct	 3	0:00	0	-
-Rule	Turkey	1922	only	-	Mar	26	0:00	1:00	S
-Rule	Turkey	1922	only	-	Oct	 8	0:00	0	-
-# Whitman gives 1923 Apr 28 - Sep 16 and no DST in 1924-1925; go with Shanks.
-Rule	Turkey	1924	only	-	May	13	0:00	1:00	S
-Rule	Turkey	1924	1925	-	Oct	 1	0:00	0	-
-Rule	Turkey	1925	only	-	May	 1	0:00	1:00	S
-Rule	Turkey	1940	only	-	Jun	30	0:00	1:00	S
-Rule	Turkey	1940	only	-	Oct	 5	0:00	0	-
-Rule	Turkey	1940	only	-	Dec	 1	0:00	1:00	S
-Rule	Turkey	1941	only	-	Sep	21	0:00	0	-
-Rule	Turkey	1942	only	-	Apr	 1	0:00	1:00	S
-# Whitman omits the next two transition and gives 1945 Oct 1; go with Shanks.
-Rule	Turkey	1942	only	-	Nov	 1	0:00	0	-
-Rule	Turkey	1945	only	-	Apr	 2	0:00	1:00	S
-Rule	Turkey	1945	only	-	Oct	 8	0:00	0	-
-Rule	Turkey	1946	only	-	Jun	 1	0:00	1:00	S
-Rule	Turkey	1946	only	-	Oct	 1	0:00	0	-
-Rule	Turkey	1947	1948	-	Apr	Sun>=16	0:00	1:00	S
-Rule	Turkey	1947	1950	-	Oct	Sun>=2	0:00	0	-
-Rule	Turkey	1949	only	-	Apr	10	0:00	1:00	S
-Rule	Turkey	1950	only	-	Apr	19	0:00	1:00	S
-Rule	Turkey	1951	only	-	Apr	22	0:00	1:00	S
-Rule	Turkey	1951	only	-	Oct	 8	0:00	0	-
-Rule	Turkey	1962	only	-	Jul	15	0:00	1:00	S
-Rule	Turkey	1962	only	-	Oct	 8	0:00	0	-
-Rule	Turkey	1964	only	-	May	15	0:00	1:00	S
-Rule	Turkey	1964	only	-	Oct	 1	0:00	0	-
-Rule	Turkey	1970	1972	-	May	Sun>=2	0:00	1:00	S
-Rule	Turkey	1970	1972	-	Oct	Sun>=2	0:00	0	-
-Rule	Turkey	1973	only	-	Jun	 3	1:00	1:00	S
-Rule	Turkey	1973	only	-	Nov	 4	3:00	0	-
-Rule	Turkey	1974	only	-	Mar	31	2:00	1:00	S
-Rule	Turkey	1974	only	-	Nov	 3	5:00	0	-
-Rule	Turkey	1975	only	-	Mar	30	0:00	1:00	S
-Rule	Turkey	1975	1976	-	Oct	lastSun	0:00	0	-
-Rule	Turkey	1976	only	-	Jun	 1	0:00	1:00	S
-Rule	Turkey	1977	1978	-	Apr	Sun>=1	0:00	1:00	S
-Rule	Turkey	1977	only	-	Oct	16	0:00	0	-
-Rule	Turkey	1979	1980	-	Apr	Sun>=1	3:00	1:00	S
-Rule	Turkey	1979	1982	-	Oct	Mon>=11	0:00	0	-
-Rule	Turkey	1981	1982	-	Mar	lastSun	3:00	1:00	S
-Rule	Turkey	1983	only	-	Jul	31	0:00	1:00	S
-Rule	Turkey	1983	only	-	Oct	 2	0:00	0	-
-Rule	Turkey	1985	only	-	Apr	20	0:00	1:00	S
-Rule	Turkey	1985	only	-	Sep	28	0:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Istanbul	1:55:52 -	LMT	1880
-			1:56:56	-	IMT	1910 Oct # Istanbul Mean Time?
-			2:00	Turkey	EE%sT	1978 Oct 15
-			3:00	Turkey	TR%sT	1985 Apr 20 # Turkey Time
-			2:00	Turkey	EE%sT	1986
-			2:00	C-Eur	EE%sT	1991
-			2:00	EU	EE%sT
-Link	Europe/Istanbul	Asia/Istanbul	# Istanbul is in both continents.
-
-# Ukraine
-#
-# From Igor Karpov, who works for the Ukranian Ministry of Justice,
-# via Garrett Wollman (2003-01-27):
-# BTW, I've found the official document on this matter. It's goverment
-# regulations number 509, May 13, 1996. In my poor translation it says:
-# "Time in Ukraine is set to second timezone (Kiev time). Each last Sunday
-# of March at 3am the time is changing to 4am and each last Sunday of
-# October the time at 4am is changing to 3am"
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-# Most of Ukraine since 1970 has been like Kiev.
-Zone Europe/Kiev	2:02:04 -	LMT	1880
-			2:02:04	-	KMT	1924 May  2 # Kiev Mean Time
-			2:00	-	EET	1930 Jun 21
-			3:00	-	MSK	1941 Sep 20
-			1:00	C-Eur	CE%sT	1943 Nov  6
-			3:00	Russia	MSK/MSD	1990
-			3:00	-	MSK	1990 Jul  1 2:00
-			2:00	-	EET	1992
-			2:00	E-Eur	EE%sT	1995
-			2:00	EU	EE%sT
-# Ruthenia used CET 1990/1991.
-Zone Europe/Uzhgorod	1:29:12 -	LMT	1890 Oct
-			1:00	-	CET	1940
-			1:00	C-Eur	CE%sT	1944 Oct
-			1:00	1:00	CEST	1944 Oct 26
-			1:00	-	CET	1945 Jun 29
-			3:00	Russia	MSK/MSD	1990
-			3:00	-	MSK	1990 Jul  1 2:00
-			1:00	-	CET	1991 Mar 31 3:00
-			2:00	-	EET	1992
-			2:00	E-Eur	EE%sT	1995
-			2:00	EU	EE%sT
-# Zaporozh'ye and eastern Lugansk oblasts observed DST 1990/1991.
-# Zaporozh'ye has an apostrophe, but Posix file names can't have apostrophes.
-Zone Europe/Zaporozhye	2:20:40 -	LMT	1880
-			2:20	-	CUT	1924 May  2 # Central Ukraine T
-			2:00	-	EET	1930 Jun 21
-			3:00	-	MSK	1941 Aug 25
-			1:00	C-Eur	CE%sT	1943 Oct 25
-			3:00	Russia	MSK/MSD	1991 Mar 31 2:00
-			2:00	E-Eur	EE%sT	1995
-			2:00	EU	EE%sT
-# Central Crimea used Moscow time 1994/1997.
-Zone Europe/Simferopol	2:16:24 -	LMT	1880
-			2:16	-	SMT	1924 May  2 # Simferopol Mean T
-			2:00	-	EET	1930 Jun 21
-			3:00	-	MSK	1941 Nov
-			1:00	C-Eur	CE%sT	1944 Apr 13
-			3:00	Russia	MSK/MSD	1990
-			3:00	-	MSK	1990 Jul  1 2:00
-			2:00	-	EET	1992
-# From Paul Eggert <eggert@twinsun.com> (1999-11-12):
-# The _Economist_ (1994-05-28, p 45) reports that central Crimea switched
-# from Kiev to Moscow time sometime after the January 1994 elections.
-# Shanks says ``date of change uncertain'', but implies that it happened
-# sometime between the 1994 DST switches.  For now, guess it changed in May.
-			2:00	E-Eur	EE%sT	1994 May
-# From IATA SSIM (1994/1997), which also says that Kerch is still like Kiev.
-			3:00	E-Eur	MSK/MSD	1996 Mar 31 3:00s
-			3:00	1:00	MSD	1996 Oct 27 3:00s
-# IATA SSIM (1997-09) says Crimea switched to EET/EEST.
-# Assume it happened in March by not changing the clocks.
-			3:00	Russia	MSK/MSD	1997
-			3:00	-	MSK	1997 Mar lastSun 1:00u
-			2:00	EU	EE%sT
-
-###############################################################################
-
-# One source shows that Bulgaria, Cyprus, Finland, and Greece observe DST from
-# the last Sunday in March to the last Sunday in September in 1986.
-# The source shows Romania changing a day later than everybody else.
-#
-# According to Bernard Sieloff's source, Poland is in the MET time zone but
-# uses the WE DST rules.  The Western USSR uses EET+1 and ME DST rules.
-# Bernard Sieloff's source claims Romania switches on the same day, but at
-# 00:00 standard time (i.e., 01:00 DST).  It also claims that Turkey
-# switches on the same day, but switches on at 01:00 standard time
-# and off at 00:00 standard time (i.e., 01:00 DST)
-
-# ...
-# Date: Wed, 28 Jan 87 16:56:27 -0100
-# From: seismo!mcvax!cgcha!wtho (Tom Hofmann)
-# Message-Id: <8701281556.AA22174@cgcha.uucp>
-# ...
-#
-# ...the European time rules are...standardized since 1981, when
-# most European coun[tr]ies started DST.  Before that year, only
-# a few countries (UK, France, Italy) had DST, each according
-# to own national rules.  In 1981, however, DST started on
-# 'Apr firstSun', and not on 'Mar lastSun' as in the following
-# years...
-# But also since 1981 there are some more national exceptions
-# than listed in 'europe': Switzerland, for example, joined DST
-# one year later, Denmark ended DST on 'Oct 1' instead of 'Sep
-# lastSun' in 1981---I don't know how they handle now.
-#
-# Finally, DST ist always from 'Apr 1' to 'Oct 1' in the
-# Soviet Union (as far as I know).
-#
-# Tom Hofmann, Scientific Computer Center, CIBA-GEIGY AG,
-# 4002 Basle, Switzerland
-# UUCP: ...!mcvax!cernvax!cgcha!wtho
-
-# ...
-# Date: Wed, 4 Feb 87 22:35:22 +0100
-# From: seismo!mcvax!cwi.nl!dik (Dik T. Winter)
-# ...
-#
-# The information from Tom Hofmann is (as far as I know) not entirely correct.
-# After a request from chongo at amdahl I tried to retrieve all information
-# about DST in Europe.  I was able to find all from about 1969.
-#
-# ...standardization on DST in Europe started in about 1977 with switches on
-# first Sunday in April and last Sunday in September...
-# In 1981 UK joined Europe insofar that
-# the starting day for both shifted to last Sunday in March.  And from 1982
-# the whole of Europe used DST, with switch dates April 1 and October 1 in
-# the Sov[i]et Union.  In 1985 the SU reverted to standard Europe[a]n switch
-# dates...
-#
-# It should also be remembered that time-zones are not constants; e.g.
-# Portugal switched in 1976 from MET (or CET) to WET with DST...
-# Note also that though there were rules for switch dates not
-# all countries abided to these dates, and many individual deviations
-# occurred, though not since 1982 I believe.  Another note: it is always
-# assumed that DST is 1 hour ahead of normal time, this need not be the
-# case; at least in the Netherlands there have been times when DST was 2 hours
-# in advance of normal time.
-#
-# ...
-# dik t. winter, cwi, amsterdam, nederland
-# INTERNET   : dik@cwi.nl
-# BITNET/EARN: dik@mcvax
-
-# From Bob Devine (1988-01-28):
-# ...
-# Greece: Last Sunday in April to last Sunday in September (iffy on dates).
-# Since 1978.  Change at midnight.
-# ...
-# Monaco: has same DST as France.
-# ...
+# @(#)europe	7.94
+
+# This data is by no means authoritative; if you think you know better,
+# go ahead and edit the file (and please send any changes to
+# tz@elsie.nci.nih.gov for general use in the future).
+
+# From Paul Eggert (1999-10-29):
+# A good source for time zone historical data outside the U.S. is
+# Thomas G. Shanks, The International Atlas (5th edition),
+# San Diego: ACS Publications, Inc. (1999).
+#
+# Gwillim Law writes that a good source
+# for recent time zone data is the International Air Transport
+# Association's Standard Schedules Information Manual (IATA SSIM),
+# published semiannually.  Law sent in several helpful summaries
+# of the IATA's data after 1990.
+#
+# Except where otherwise noted, Shanks is the source for entries through 1991,
+# and IATA SSIM is the source for entries afterwards.
+#
+# Other sources occasionally used include:
+#
+#	Edward W. Whitman, World Time Differences,
+#	Whitman Publishing Co, 2 Niagara Av, Ealing, London (undated),
+#	which I found in the UCLA library.
+#
+#	<a href="http://www.pettswoodvillage.co.uk/Daylight_Savings_William_Willett.pdf">
+#	William Willett, The Waste of Daylight, 19th edition
+#	</a> (1914-03)
+#
+#	Brazil's Departamento Servico da Hora (DSH),
+#	<a href="http://pcdsh01.on.br/HISTHV.htm">
+#	History of Summer Time
+#	</a> (1998-09-21, in Portuguese)
+
+#
+# I invented the abbreviations marked `*' in the following table;
+# the rest are from earlier versions of this file, or from other sources.
+# Corrections are welcome!
+#                   std dst  2dst
+#                   LMT           Local Mean Time
+#       -4:00       AST ADT       Atlantic
+#       -3:00       WGT WGST      Western Greenland*
+#       -1:00       EGT EGST      Eastern Greenland*
+#        0:00       GMT BST  BDST Greenwich, British Summer
+#        0:00       GMT IST       Greenwich, Irish Summer
+#        0:00       WET WEST WEMT Western Europe
+#        0:19:32.13 AMT NST       Amsterdam, Netherlands Summer (1835-1937)*
+#        0:20       NET NEST      Netherlands (1937-1940)*
+#        1:00       CET CEST CEMT Central Europe
+#        1:00:14    SET           Swedish (1879-1899)*
+#        2:00       EET EEST      Eastern Europe
+#        3:00       MSK MSD       Moscow
+#
+# A reliable and entertaining source about time zones, especially in Britain,
+# Derek Howse, Greenwich time and longitude, Philip Wilson Publishers (1997).
+
+# From Peter Ilieve (1994-12-04),
+# The original six [EU members]: Belgium, France, (West) Germany, Italy,
+# Luxembourg, the Netherlands.
+# Plus, from 1 Jan 73: Denmark, Ireland, United Kingdom.
+# Plus, from 1 Jan 81: Greece.
+# Plus, from 1 Jan 86: Spain, Portugal.
+# Plus, from 1 Jan 95: Austria, Finland, Sweden. (Norway negotiated terms for
+# entry but in a referendum on 28 Nov 94 the people voted No by 52.2% to 47.8%
+# on a turnout of 88.6%. This was almost the same result as Norway's previous
+# referendum in 1972, they are the only country to have said No twice.
+# Referendums in the other three countries voted Yes.)
+# ...
+# Estonia ... uses EU dates but not at 01:00 GMT, they use midnight GMT.
+# I don't think they know yet what they will do from 1996 onwards.
+# ...
+# There shouldn't be any [current members who are not using EU rules].
+# A Directive has the force of law, member states are obliged to enact
+# national law to implement it. The only contentious issue was the
+# different end date for the UK and Ireland, and this was always allowed
+# in the Directive.
+
+
+###############################################################################
+
+# Britain (United Kingdom) and Ireland (Eire)
+
+# From Peter Ilieve (1994-07-06):
+#
+# On 17 Jan 1994 the Independent, a UK quality newspaper, had a piece about
+# historical vistas along the Thames in west London. There was a photo
+# and a sketch map showing some of the sightlines involved. One paragraph
+# of the text said:
+#
+# `An old stone obelisk marking a forgotten terrestrial meridian stands
+# beside the river at Kew. In the 18th century, before time and longitude
+# was standardised by the Royal Observatory in Greenwich, scholars observed
+# this stone and the movement of stars from Kew Observatory nearby. They
+# made their calculations and set the time for the Horse Guards and Parliament,
+# but now the stone is obscured by scrubwood and can only be seen by walking
+# along the towpath within a few yards of it.'
+#
+# I have a one inch to one mile map of London and my estimate of the stone's
+# position is 51 deg. 28' 30" N, 0 deg. 18' 45" W. The longitude should
+# be within about +-2". The Ordnance Survey grid reference is TQ172761.
+#
+# [This yields GMTOFF = -0:01:15 for London LMT in the 18th century.]
+
+# From Paul Eggert (1993-11-18):
+#
+# Howse writes that Britain was the first country to use standard time.
+# The railways cared most about the inconsistencies of local mean time,
+# and it was they who forced a uniform time on the country.
+# The original idea was credited to Dr. William Hyde Wollaston (1766-1828)
+# and was popularized by Abraham Follett Osler (1808-1903).
+# The first railway to adopt London time was the Great Western Railway
+# in November 1840; other railways followed suit, and by 1847 most
+# (though not all) railways used London time.  On 1847-09-22 the
+# Railway Clearing House, an industry standards body, recommended that GMT be
+# adopted at all stations as soon as the General Post Office permitted it.
+# The transition occurred on 12-01 for the L&NW, the Caledonian,
+# and presumably other railways; the January 1848 Bradshaw's lists many
+# railways as using GMT.  By 1855 the vast majority of public
+# clocks in Britain were set to GMT (though some, like the great clock
+# on Tom Tower at Christ Church, Oxford, were fitted with two minute hands,
+# one for local time and one for GMT).  The last major holdout was the legal
+# system, which stubbornly stuck to local time for many years, leading
+# to oddities like polls opening at 08:13 and closing at 16:13.
+# The legal system finally switched to GMT when the Statutes (Definition
+# of Time) Act took effect; it received the Royal Assent on 1880-08-02.
+#
+# In the tables below, we condense this complicated story into a single
+# transition date for London, namely 1847-12-01.  We don't know as much
+# about Dublin, so we use 1880-08-02, the legal transition time.
+
+# From Paul Eggert (2003-09-27):
+# Summer Time was first seriously proposed by William Willett (1857-1915),
+# a London builder and member of the Royal Astronomical Society
+# who circulated a pamphlet ``The Waste of Daylight'' (1907)
+# that proposed advancing clocks 20 minutes on each of four Sundays in April,
+# and retarding them by the same amount on four Sundays in September.
+# A bill was drafted in 1909 and introduced in Parliament several times,
+# but it met with ridicule and opposition, especially from farming interests.
+# Later editions of the pamphlet proposed one-hour summer time, and
+# it was eventually adopted as a wartime measure in 1916.
+# See: Summer Time Arrives Early, The Times (2000-05-18).
+# A monument to Willett was unveiled on 1927-05-21, in an open space in
+# a 45-acre wood near Chislehurst, Kent that was purchased by popular
+# subscription and open to the public.  On the south face of the monolith,
+# designed by G. W. Miller, is the the William Willett Memorial Sundial,
+# which is permanently set to Summer Time.
+
+# From Winston Churchill (1934-04-28):
+# It is one of the paradoxes of history that we should owe the boon of
+# summer time, which gives every year to the people of this country
+# between 160 and 170 hours more daylight leisure, to a war which
+# plunged Europe into darkness for four years, and shook the
+# foundations of civilization throughout the world.
+#	-- <a href="http://www.winstonchurchill.org/fh114willett.htm">
+#	"A Silent Toast to William Willett", Pictorial Weekly
+#	</a>
+
+# From Paul Eggert (1996-09-03):
+# The OED Supplement says that the English originally said ``Daylight Saving''
+# when they were debating the adoption of DST in 1908; but by 1916 this
+# term appears only in quotes taken from DST's opponents, whereas the
+# proponents (who eventually won the argument) are quoted as using ``Summer''.
+
+# From Arthur David Olson (1989-01-19):
+#
+# A source at the British Information Office in New York avers that it's
+# known as "British" Summer Time in all parts of the United Kingdom.
+
+# Date: 4 Jan 89 08:57:25 GMT (Wed)
+# From: Jonathan Leffler
+# [British Summer Time] is fixed annually by Act of Parliament.
+# If you can predict what Parliament will do, you should be in
+# politics making a fortune, not computing.
+
+# From Chris Carrier (1996-06-14):
+# I remember reading in various wartime issues of the London Times the
+# acronym BDST for British Double Summer Time.  Look for the published
+# time of sunrise and sunset in The Times, when BDST was in effect, and
+# if you find a zone reference it will say, "All times B.D.S.T."
+
+# From Joseph S. Myers (1999-09-02):
+# ... some military cables (WO 219/4100 - this is a copy from the
+# main SHAEF archives held in the US National Archives, SHAEF/5252/8/516)
+# agree that the usage is BDST (this appears in a message dated 17 Feb 1945).
+
+# From Joseph S. Myers (2000-10-03):
+# On 18th April 1941, Sir Stephen Tallents of the BBC wrote to Sir
+# Alexander Maxwell of the Home Office asking whether there was any
+# official designation; the reply of the 21st was that there wasn't
+# but he couldn't think of anything better than the "Double British
+# Summer Time" that the BBC had been using informally.
+# http://student.cusu.cam.ac.uk/~jsm28/british-time/bbc-19410418.png
+# http://student.cusu.cam.ac.uk/~jsm28/british-time/ho-19410421.png
+
+# From Sir Alexander Maxwell in the above-mentioned letter (1941-04-21):
+# [N]o official designation has as far as I know been adopted for the time
+# which is to be introduced in May....
+# I cannot think of anything better than "Double British Summer Time"
+# which could not be said to run counter to any official description.
+
+# From Paul Eggert (2000-10-02):
+# Howse writes (p 157) `DBST' too, but `BDST' seems to have been common
+# and follows the more usual convention of putting the location name first,
+# so we use `BDST'.
+
+# Peter Ilieve (1998-04-19) described at length
+# the history of summer time legislation in the United Kingdom.
+# Since 1998 Joseph S. Myers has been updating
+# and extending this list, which can be found in
+# <a href="http://student.cusu.cam.ac.uk/~jsm28/british-time/">
+# History of legal time in Britain
+# </a>
+
+# From Joseph S. Myers (1998-01-06):
+#
+# The legal time in the UK outside of summer time is definitely GMT, not UTC;
+# see Lord Tanlaw's speech
+# <a href="http://www.parliament.the-stationery-office.co.uk/pa/ld199697/ldhansrd/pdvn/lds97/text/70611-20.htm#70611-20_head0">
+# (Lords Hansard 11 June 1997 columns 964 to 976)
+# </a>.
+
+# From Paul Eggert (2001-07-18):
+#
+# For lack of other data, we'll follow Shanks for Eire in 1940-1948.
+#
+# Given Ilieve and Myers's data, the following claims by Shanks are incorrect:
+#     * Wales did not switch from GMT to daylight saving time until
+#	1921 Apr 3, when they began to conform with the rest of Great Britain.
+# Actually, Wales was identical after 1880.
+#     * Eire had two transitions on 1916 Oct 1.
+# It actually just had one transition.
+#     * Northern Ireland used single daylight saving time throughout WW II.
+# Actually, it conformed to Britain.
+#     * GB-Eire changed standard time to 1 hour ahead of GMT on 1968-02-18.
+# Actually, that date saw the usual switch to summer time.
+# Standard time was not changed until 1968-10-27 (the clocks didn't change).
+#
+# Here is another incorrect claim by Shanks:
+#     * Jersey, Guernsey, and the Isle of Man did not switch from GMT
+#	to daylight saving time until 1921 Apr 3, when they began to
+#	conform with Great Britain.
+# S.R.&O. 1916, No. 382 and HO 45/10811/312364 (quoted above) say otherwise.
+#
+# The following claim by Shanks is possible though doubtful;
+# we'll ignore it for now.
+#     * Dublin's 1971-10-31 switch was at 02:00, even though London's was 03:00.
+#
+#
+# Whitman says Dublin Mean Time was -0:25:21, which is more precise than Shanks.
+# Perhaps this was Dunsink Observatory Time, as Dunsink Observatory
+# (8 km NW of Dublin's center) seemingly was to Dublin as Greenwich was
+# to London.  For example:
+#
+#   "Timeball on the ballast office is down.  Dunsink time."
+#   -- James Joyce, Ulysses
+
+# From Joseph S. Myers (2005-01-26):
+# Irish laws are available online at www.irishstatutebook.ie.  These include 
+# various relating to legal time, for example:
+# 
+# ZZA13Y1923.html ZZA12Y1924.html ZZA8Y1925.html ZZSIV20PG1267.html
+# 
+# ZZSI71Y1947.html ZZSI128Y1948.html ZZSI23Y1949.html ZZSI41Y1950.html
+# ZZSI27Y1951.html ZZSI73Y1952.html
+# 
+# ZZSI11Y1961.html ZZSI232Y1961.html ZZSI182Y1962.html
+# ZZSI167Y1963.html ZZSI257Y1964.html ZZSI198Y1967.html
+# ZZA23Y1968.html ZZA17Y1971.html
+# 
+# ZZSI67Y1981.html ZZSI212Y1982.html ZZSI45Y1986.html
+# ZZSI264Y1988.html ZZSI52Y1990.html ZZSI371Y1992.html
+# ZZSI395Y1994.html ZZSI484Y1997.html ZZSI506Y2001.html
+#
+# [These are all relative to the root, e.g., the first is
+# <http://www.irishstatutebook.ie/ZZA13Y1923.html>.]
+# 
+# (These are those I found, but there could be more.  In any case these 
+# should allow various updates to the comments in the europe file to cover 
+# the laws applicable in Ireland.)
+# 
+# (Note that the time in the Republic of Ireland since 1968 has been defined 
+# in terms of standard time being GMT+1 with a period of winter time when it 
+# is GMT, rather than standard time being GMT with a period of summer time 
+# being GMT+1.)
+
+# From Paul Eggert (1999-03-28):
+# Clive Feather (<news:859845706.26043.0@office.demon.net>, 1997-03-31)
+# reports that Folkestone (Cheriton) Shuttle Terminal uses Concession Time
+# (CT), equivalent to French civil time.
+# Julian Hill (<news:36118128.5A14@virgin.net>, 1998-09-30) reports that
+# trains between Dollands Moor (the freight facility next door)
+# and Frethun run in CT.
+# My admittedly uninformed guess is that the terminal has two authorities,
+# the French concession operators and the British civil authorities,
+# and that the time depends on who you're talking to.
+# If, say, the British police were called to the station for some reason,
+# I would expect the official police report to use GMT/BST and not CET/CEST.
+# This is a borderline case, but for now let's stick to GMT/BST.
+
+# From an anonymous contributor (1996-06-02):
+# The law governing time in Ireland is under Statutory Instrument SI 395/94,
+# which gives force to European Union 7th Council Directive # 94/21/EC.
+# Under this directive, the Minister for Justice in Ireland makes appropriate
+# regulations. I spoke this morning with the Secretary of the Department of
+# Justice (tel +353 1 678 9711) who confirmed to me that the correct name is
+# "Irish Summer Time", abbreviated to "IST".
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+# Summer Time Act, 1916
+Rule	GB-Eire	1916	only	-	May	21	2:00s	1:00	BST
+Rule	GB-Eire	1916	only	-	Oct	 1	2:00s	0	GMT
+# S.R.&O. 1917, No. 358
+Rule	GB-Eire	1917	only	-	Apr	 8	2:00s	1:00	BST
+Rule	GB-Eire	1917	only	-	Sep	17	2:00s	0	GMT
+# S.R.&O. 1918, No. 274
+Rule	GB-Eire	1918	only	-	Mar	24	2:00s	1:00	BST
+Rule	GB-Eire	1918	only	-	Sep	30	2:00s	0	GMT
+# S.R.&O. 1919, No. 297
+Rule	GB-Eire	1919	only	-	Mar	30	2:00s	1:00	BST
+Rule	GB-Eire	1919	only	-	Sep	29	2:00s	0	GMT
+# S.R.&O. 1920, No. 458
+Rule	GB-Eire	1920	only	-	Mar	28	2:00s	1:00	BST
+# S.R.&O. 1920, No. 1844
+Rule	GB-Eire	1920	only	-	Oct	25	2:00s	0	GMT
+# S.R.&O. 1921, No. 363
+Rule	GB-Eire	1921	only	-	Apr	 3	2:00s	1:00	BST
+Rule	GB-Eire	1921	only	-	Oct	 3	2:00s	0	GMT
+# S.R.&O. 1922, No. 264
+Rule	GB-Eire	1922	only	-	Mar	26	2:00s	1:00	BST
+Rule	GB-Eire	1922	only	-	Oct	 8	2:00s	0	GMT
+# The Summer Time Act, 1922
+Rule	GB-Eire	1923	only	-	Apr	Sun>=16	2:00s	1:00	BST
+Rule	GB-Eire	1923	1924	-	Sep	Sun>=16	2:00s	0	GMT
+Rule	GB-Eire	1924	only	-	Apr	Sun>=9	2:00s	1:00	BST
+Rule	GB-Eire	1925	1926	-	Apr	Sun>=16	2:00s	1:00	BST
+# The Summer Time Act, 1925
+Rule	GB-Eire	1925	1938	-	Oct	Sun>=2	2:00s	0	GMT
+Rule	GB-Eire	1927	only	-	Apr	Sun>=9	2:00s	1:00	BST
+Rule	GB-Eire	1928	1929	-	Apr	Sun>=16	2:00s	1:00	BST
+Rule	GB-Eire	1930	only	-	Apr	Sun>=9	2:00s	1:00	BST
+Rule	GB-Eire	1931	1932	-	Apr	Sun>=16	2:00s	1:00	BST
+Rule	GB-Eire	1933	only	-	Apr	Sun>=9	2:00s	1:00	BST
+Rule	GB-Eire	1934	only	-	Apr	Sun>=16	2:00s	1:00	BST
+Rule	GB-Eire	1935	only	-	Apr	Sun>=9	2:00s	1:00	BST
+Rule	GB-Eire	1936	1937	-	Apr	Sun>=16	2:00s	1:00	BST
+Rule	GB-Eire	1938	only	-	Apr	Sun>=9	2:00s	1:00	BST
+Rule	GB-Eire	1939	only	-	Apr	Sun>=16	2:00s	1:00	BST
+# S.R.&O. 1939, No. 1379
+Rule	GB-Eire	1939	only	-	Nov	Sun>=16	2:00s	0	GMT
+# S.R.&O. 1940, No. 172 and No. 1883
+Rule	GB-Eire	1940	only	-	Feb	Sun>=23	2:00s	1:00	BST
+# S.R.&O. 1941, No. 476
+Rule	GB-Eire	1941	only	-	May	Sun>=2	1:00s	2:00	BDST
+Rule	GB-Eire	1941	1943	-	Aug	Sun>=9	1:00s	1:00	BST
+# S.R.&O. 1942, No. 506
+Rule	GB-Eire	1942	1944	-	Apr	Sun>=2	1:00s	2:00	BDST
+# S.R.&O. 1944, No. 932
+Rule	GB-Eire	1944	only	-	Sep	Sun>=16	1:00s	1:00	BST
+# S.R.&O. 1945, No. 312
+Rule	GB-Eire	1945	only	-	Apr	Mon>=2	1:00s	2:00	BDST
+Rule	GB-Eire	1945	only	-	Jul	Sun>=9	1:00s	1:00	BST
+# S.R.&O. 1945, No. 1208
+Rule	GB-Eire	1945	1946	-	Oct	Sun>=2	2:00s	0	GMT
+Rule	GB-Eire	1946	only	-	Apr	Sun>=9	2:00s	1:00	BST
+# The Summer Time Act, 1947
+Rule	GB-Eire	1947	only	-	Mar	16	2:00s	1:00	BST
+Rule	GB-Eire	1947	only	-	Apr	13	1:00s	2:00	BDST
+Rule	GB-Eire	1947	only	-	Aug	10	1:00s	1:00	BST
+Rule	GB-Eire	1947	only	-	Nov	 2	2:00s	0	GMT
+# Summer Time Order, 1948 (S.I. 1948/495)
+Rule	GB-Eire	1948	only	-	Mar	14	2:00s	1:00	BST
+Rule	GB-Eire	1948	only	-	Oct	31	2:00s	0	GMT
+# Summer Time Order, 1949 (S.I. 1949/373)
+Rule	GB-Eire	1949	only	-	Apr	 3	2:00s	1:00	BST
+Rule	GB-Eire	1949	only	-	Oct	30	2:00s	0	GMT
+# Summer Time Order, 1950 (S.I. 1950/518)
+# Summer Time Order, 1951 (S.I. 1951/430)
+# Summer Time Order, 1952 (S.I. 1952/451)
+Rule	GB-Eire	1950	1952	-	Apr	Sun>=14	2:00s	1:00	BST
+Rule	GB-Eire	1950	1952	-	Oct	Sun>=21	2:00s	0	GMT
+# revert to the rules of the Summer Time Act, 1925
+Rule	GB-Eire	1953	only	-	Apr	Sun>=16	2:00s	1:00	BST
+Rule	GB-Eire	1953	1960	-	Oct	Sun>=2	2:00s	0	GMT
+Rule	GB-Eire	1954	only	-	Apr	Sun>=9	2:00s	1:00	BST
+Rule	GB-Eire	1955	1956	-	Apr	Sun>=16	2:00s	1:00	BST
+Rule	GB-Eire	1957	only	-	Apr	Sun>=9	2:00s	1:00	BST
+Rule	GB-Eire	1958	1959	-	Apr	Sun>=16	2:00s	1:00	BST
+Rule	GB-Eire	1960	only	-	Apr	Sun>=9	2:00s	1:00	BST
+# Summer Time Order, 1961 (S.I. 1961/71)
+# Summer Time (1962) Order, 1961 (S.I. 1961/2465)
+# Summer Time Order, 1963 (S.I. 1963/81)
+Rule	GB-Eire	1961	1963	-	Mar	lastSun	2:00s	1:00	BST
+Rule	GB-Eire	1961	1968	-	Oct	Sun>=23	2:00s	0	GMT
+# Summer Time (1964) Order, 1963 (S.I. 1963/2101)
+# Summer Time Order, 1964 (S.I. 1964/1201)
+# Summer Time Order, 1967 (S.I. 1967/1148)
+Rule	GB-Eire	1964	1967	-	Mar	Sun>=19	2:00s	1:00	BST
+# Summer Time Order, 1968 (S.I. 1968/117)
+Rule	GB-Eire	1968	only	-	Feb	18	2:00s	1:00	BST
+# The British Standard Time Act, 1968
+#	(no summer time)
+# The Summer Time Act, 1972
+Rule	GB-Eire	1972	1980	-	Mar	Sun>=16	2:00s	1:00	BST
+Rule	GB-Eire	1972	1980	-	Oct	Sun>=23	2:00s	0	GMT
+# Summer Time Order, 1980 (S.I. 1980/1089)
+# Summer Time Order, 1982 (S.I. 1982/1673)
+# Summer Time Order, 1986 (S.I. 1986/223)
+# Summer Time Order, 1988 (S.I. 1988/931)
+Rule	GB-Eire	1981	1995	-	Mar	lastSun	1:00u	1:00	BST
+Rule	GB-Eire 1981	1989	-	Oct	Sun>=23	1:00u	0	GMT
+# Summer Time Order, 1989 (S.I. 1989/985)
+# Summer Time Order, 1992 (S.I. 1992/1729)
+# Summer Time Order 1994 (S.I. 1994/2798)
+Rule	GB-Eire 1990	1995	-	Oct	Sun>=22	1:00u	0	GMT
+# Summer Time Order 1997 (S.I. 1997/2982)
+# See EU for rules starting in 1996.
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/London	-0:01:15 -	LMT	1847 Dec  1
+			 0:00	GB-Eire	%s	1968 Oct 27
+			 1:00	-	BST	1971 Oct 31 2:00u
+			 0:00	GB-Eire	%s	1996
+			 0:00	EU	GMT/BST
+Zone	Europe/Belfast	-0:23:40 -	LMT	1880 Aug  2
+			-0:25:21 -	DMT	1916 May 21 2:00 # Dublin/Dunsink MT
+			-0:25:21 1:00	IST	1916 Oct  1 2:00s   # Irish Summer Time
+			 0:00	GB-Eire	%s	1968 Oct 27
+			 1:00	-	BST	1971 Oct 31 2:00u
+			 0:00	GB-Eire	%s	1996
+			 0:00	EU	GMT/BST
+Zone	Europe/Dublin	-0:25:00 -	LMT	1880 Aug  2
+			-0:25:21 -	DMT	1916 May 21 2:00
+			-0:25:21 1:00	IST	1916 Oct  1 2:00s
+			 0:00	GB-Eire	%s	1921 Dec  6 # independence
+			 0:00	GB-Eire	GMT/IST	1940 Feb 25 2:00
+			 0:00	1:00	IST	1946 Oct  6 2:00
+			 0:00	-	GMT	1947 Mar 16 2:00
+			 0:00	1:00	IST	1947 Nov  2 2:00
+			 0:00	-	GMT	1948 Apr 18 2:00
+			 0:00	GB-Eire	GMT/IST	1968 Oct 27
+			 1:00	-	IST	1971 Oct 31 2:00u
+			 0:00	GB-Eire	GMT/IST	1996
+			 0:00	EU	GMT/IST
+
+###############################################################################
+
+# Continental Europe
+
+# EU rules are for the European Union, previously known as the EC, EEC,
+# Common Market, etc.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	EU	1977	1980	-	Apr	Sun>=1	 1:00u	1:00	S
+Rule	EU	1977	only	-	Sep	lastSun	 1:00u	0	-
+Rule	EU	1978	only	-	Oct	 1	 1:00u	0	-
+Rule	EU	1979	1995	-	Sep	lastSun	 1:00u	0	-
+Rule	EU	1981	max	-	Mar	lastSun	 1:00u	1:00	S
+Rule	EU	1996	max	-	Oct	lastSun	 1:00u	0	-
+# The most recent directive covers the years starting in 2002.  See:
+# <a href="http://europa.eu.int/eur-lex/en/lif/dat/2000/en_300L0084.html"
+# Directive 2000/84/EC of the European Parliament and of the Council
+# of 19 January 2001 on summer-time arrangements.
+# </a>
+
+# W-Eur differs from EU only in that W-Eur uses standard time.
+Rule	W-Eur	1977	1980	-	Apr	Sun>=1	 1:00s	1:00	S
+Rule	W-Eur	1977	only	-	Sep	lastSun	 1:00s	0	-
+Rule	W-Eur	1978	only	-	Oct	 1	 1:00s	0	-
+Rule	W-Eur	1979	1995	-	Sep	lastSun	 1:00s	0	-
+Rule	W-Eur	1981	max	-	Mar	lastSun	 1:00s	1:00	S
+Rule	W-Eur	1996	max	-	Oct	lastSun	 1:00s	0	-
+
+# Older C-Eur rules are for convenience in the tables.
+# From 1977 on, C-Eur differs from EU only in that C-Eur uses standard time.
+Rule	C-Eur	1916	only	-	Apr	30	23:00	1:00	S
+Rule	C-Eur	1916	only	-	Oct	 1	 1:00	0	-
+Rule	C-Eur	1917	1918	-	Apr	Mon>=15	 2:00s	1:00	S
+Rule	C-Eur	1917	1918	-	Sep	Mon>=15	 2:00s	0	-
+Rule	C-Eur	1940	only	-	Apr	 1	 2:00s	1:00	S
+Rule	C-Eur	1942	only	-	Nov	 2	 2:00s	0	-
+Rule	C-Eur	1943	only	-	Mar	29	 2:00s	1:00	S
+Rule	C-Eur	1943	only	-	Oct	 4	 2:00s	0	-
+Rule	C-Eur	1944	only	-	Apr	 3	 2:00s	1:00	S
+# Whitman gives 1944 Oct 7; go with Shanks.
+Rule	C-Eur	1944	only	-	Oct	 2	 2:00s	0	-
+Rule	C-Eur	1977	1980	-	Apr	Sun>=1	 2:00s	1:00	S
+Rule	C-Eur	1977	only	-	Sep	lastSun	 2:00s	0	-
+Rule	C-Eur	1978	only	-	Oct	 1	 2:00s	0	-
+Rule	C-Eur	1979	1995	-	Sep	lastSun	 2:00s	0	-
+Rule	C-Eur	1981	max	-	Mar	lastSun	 2:00s	1:00	S
+Rule	C-Eur	1996	max	-	Oct	lastSun	 2:00s	0	-
+
+# E-Eur differs from EU only in that E-Eur switches at midnight local time.
+Rule	E-Eur	1977	1980	-	Apr	Sun>=1	 0:00	1:00	S
+Rule	E-Eur	1977	only	-	Sep	lastSun	 0:00	0	-
+Rule	E-Eur	1978	only	-	Oct	 1	 0:00	0	-
+Rule	E-Eur	1979	1995	-	Sep	lastSun	 0:00	0	-
+Rule	E-Eur	1981	max	-	Mar	lastSun	 0:00	1:00	S
+Rule	E-Eur	1996	max	-	Oct	lastSun	 0:00	0	-
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Russia	1917	only	-	Jul	 1	23:00	1:00	MST	# Moscow Summer Time
+Rule	Russia	1917	only	-	Dec	28	 0:00	0	MMT	# Moscow Mean Time
+Rule	Russia	1918	only	-	May	31	22:00	2:00	MDST	# Moscow Double Summer Time
+Rule	Russia	1918	only	-	Sep	16	 1:00	1:00	MST
+Rule	Russia	1919	only	-	May	31	23:00	2:00	MDST
+Rule	Russia	1919	only	-	Jul	 1	 2:00	1:00	S
+Rule	Russia	1919	only	-	Aug	16	 0:00	0	-
+Rule	Russia	1921	only	-	Feb	14	23:00	1:00	S
+Rule	Russia	1921	only	-	Mar	20	23:00	2:00	M # Midsummer
+Rule	Russia	1921	only	-	Sep	 1	 0:00	1:00	S
+Rule	Russia	1921	only	-	Oct	 1	 0:00	0	-
+# Act No.925 of the Council of Ministers of the USSR (1980-10-24):
+Rule	Russia	1981	1984	-	Apr	 1	 0:00	1:00	S
+Rule	Russia	1981	1983	-	Oct	 1	 0:00	0	-
+# Act No.967 of the Council of Ministers of the USSR (1984-09-13), repeated in
+# Act No.227 of the Council of Ministers of the USSR (1989-03-14):
+Rule	Russia	1984	1991	-	Sep	lastSun	 2:00s	0	-
+Rule	Russia	1985	1991	-	Mar	lastSun	 2:00s	1:00	S
+#
+Rule	Russia	1992	only	-	Mar	lastSat	 23:00	1:00	S
+Rule	Russia	1992	only	-	Sep	lastSat	 23:00	0	-
+Rule	Russia	1993	max	-	Mar	lastSun	 2:00s	1:00	S
+Rule	Russia	1993	1995	-	Sep	lastSun	 2:00s	0	-
+Rule	Russia	1996	max	-	Oct	lastSun	 2:00s	0	-
+
+# These are for backward compatibility with older versions.
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	WET		0:00	EU	WE%sT
+Zone	CET		1:00	C-Eur	CE%sT
+Zone	MET		1:00	C-Eur	ME%sT
+Zone	EET		2:00	EU	EE%sT
+
+# Previous editions of this database used abbreviations like MET DST
+# for Central European Summer Time, but this didn't agree with common usage.
+
+# From Markus Kuhn (1996-07-12):
+# The official German names ... are
+#
+#	Mitteleuropaeische Zeit (MEZ)         = UTC+01:00
+#	Mitteleuropaeische Sommerzeit (MESZ)  = UTC+02:00
+#
+# as defined in the German Time Act (Gesetz ueber die Zeitbestimmung (ZeitG),
+# 1978-07-25, Bundesgesetzblatt, Jahrgang 1978, Teil I, S. 1110-1111)....
+# I wrote ... to the German Federal Physical-Technical Institution
+#
+#	Physikalisch-Technische Bundesanstalt (PTB)
+#	Laboratorium 4.41 "Zeiteinheit"
+#	Postfach 3345
+#	D-38023 Braunschweig
+#	phone: +49 531 592-0
+#
+# ... I received today an answer letter from Dr. Peter Hetzel, head of the PTB
+# department for time and frequency transmission.  He explained that the
+# PTB translates MEZ and MESZ into English as
+#
+#	Central European Time (CET)         = UTC+01:00
+#	Central European Summer Time (CEST) = UTC+02:00
+
+
+# Albania
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Albania	1940	only	-	Jun	16	0:00	1:00	S
+Rule	Albania	1942	only	-	Nov	 2	3:00	0	-
+Rule	Albania	1943	only	-	Mar	29	2:00	1:00	S
+Rule	Albania	1943	only	-	Apr	10	3:00	0	-
+Rule	Albania	1974	only	-	May	 4	0:00	1:00	S
+Rule	Albania	1974	only	-	Oct	 2	0:00	0	-
+Rule	Albania	1975	only	-	May	 1	0:00	1:00	S
+Rule	Albania	1975	only	-	Oct	 2	0:00	0	-
+Rule	Albania	1976	only	-	May	 2	0:00	1:00	S
+Rule	Albania	1976	only	-	Oct	 3	0:00	0	-
+Rule	Albania	1977	only	-	May	 8	0:00	1:00	S
+Rule	Albania	1977	only	-	Oct	 2	0:00	0	-
+Rule	Albania	1978	only	-	May	 6	0:00	1:00	S
+Rule	Albania	1978	only	-	Oct	 1	0:00	0	-
+Rule	Albania	1979	only	-	May	 5	0:00	1:00	S
+Rule	Albania	1979	only	-	Sep	30	0:00	0	-
+Rule	Albania	1980	only	-	May	 3	0:00	1:00	S
+Rule	Albania	1980	only	-	Oct	 4	0:00	0	-
+Rule	Albania	1981	only	-	Apr	26	0:00	1:00	S
+Rule	Albania	1981	only	-	Sep	27	0:00	0	-
+Rule	Albania	1982	only	-	May	 2	0:00	1:00	S
+Rule	Albania	1982	only	-	Oct	 3	0:00	0	-
+Rule	Albania	1983	only	-	Apr	18	0:00	1:00	S
+Rule	Albania	1983	only	-	Oct	 1	0:00	0	-
+Rule	Albania	1984	only	-	Apr	 1	0:00	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Tirane	1:19:20 -	LMT	1914
+			1:00	-	CET	1940 Jun 16
+			1:00	Albania	CE%sT	1984 Jul
+			1:00	EU	CE%sT
+
+# Andorra
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Andorra	0:06:04 -	LMT	1901
+			0:00	-	WET	1946 Sep 30
+			1:00	-	CET	1985 Mar 31 2:00
+			1:00	EU	CE%sT
+
+# Austria
+
+# From Paul Eggert (2003-02-28): Shanks gives 1918-06-16 and
+# 1945-11-18, but the Austrian Federal Office of Metrology and
+# Surveying (BEV) gives 1918-09-16 and for Vienna gives the "alleged"
+# date of 1945-04-12 with no time.  For the 1980-04-06 transition
+# Shanks gives 02:00, the BEV 00:00.  Go with the BEV, and guess 02:00
+# for 1945-04-12.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Austria	1920	only	-	Apr	 5	2:00s	1:00	S
+Rule	Austria	1920	only	-	Sep	13	2:00s	0	-
+Rule	Austria	1946	only	-	Apr	14	2:00s	1:00	S
+Rule	Austria	1946	1948	-	Oct	Sun>=1	2:00s	0	-
+Rule	Austria	1947	only	-	Apr	 6	2:00s	1:00	S
+Rule	Austria	1948	only	-	Apr	18	2:00s	1:00	S
+Rule	Austria	1980	only	-	Apr	 6	0:00	1:00	S
+Rule	Austria	1980	only	-	Sep	28	0:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Vienna	1:05:20 -	LMT	1893 Apr
+			1:00	C-Eur	CE%sT	1920
+			1:00	Austria	CE%sT	1940 Apr  1 2:00s
+			1:00	C-Eur	CE%sT	1945 Apr  2 2:00s
+			1:00	1:00	CEST	1945 Apr 12 2:00s
+			1:00	-	CET	1946
+			1:00	Austria	CE%sT	1981
+			1:00	EU	CE%sT
+
+# Belarus
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Minsk	1:50:16 -	LMT	1880
+			1:50	-	MMT	1924 May 2 # Minsk Mean Time
+			2:00	-	EET	1930 Jun 21
+			3:00	-	MSK	1941 Jun 28
+			1:00	C-Eur	CE%sT	1944 Jul  3
+			3:00	Russia	MSK/MSD	1990
+			3:00	-	MSK	1991 Mar 31 2:00s
+			2:00	1:00	EEST	1991 Sep 29 2:00s
+			2:00	-	EET	1992 Mar 29 0:00s
+			2:00	1:00	EEST	1992 Sep 27 0:00s
+			2:00	Russia	EE%sT
+
+# Belgium
+#
+# From Paul Eggert (1997-07-02):
+# Entries from 1918 through 1991 are taken from:
+#	Annuaire de L'Observatoire Royal de Belgique,
+#	Avenue Circulaire, 3, B-1180 BRUXELLES, CLVIIe annee, 1991
+#	(Imprimerie HAYEZ, s.p.r.l., Rue Fin, 4, 1080 BRUXELLES, MCMXC),
+#	pp 8-9.
+# LMT before 1892 was 0:17:30, according to the official journal of Belgium:
+#	Moniteur Belge, Samedi 30 Avril 1892, N.121.
+# Thanks to Pascal Delmoitie for these references.
+# The 1918 rules are listed for completeness; they apply to unoccupied Belgium.
+# Assume Brussels switched to WET in 1918 when the armistice took effect.
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Belgium	1918	only	-	Mar	 9	 0:00s	1:00	S
+Rule	Belgium	1918	1919	-	Oct	Sat>=1	23:00s	0	-
+Rule	Belgium	1919	only	-	Mar	 1	23:00s	1:00	S
+Rule	Belgium	1920	only	-	Feb	14	23:00s	1:00	S
+Rule	Belgium	1920	only	-	Oct	23	23:00s	0	-
+Rule	Belgium	1921	only	-	Mar	14	23:00s	1:00	S
+Rule	Belgium	1921	only	-	Oct	25	23:00s	0	-
+Rule	Belgium	1922	only	-	Mar	25	23:00s	1:00	S
+Rule	Belgium	1922	1927	-	Oct	Sat>=1	23:00s	0	-
+Rule	Belgium	1923	only	-	Apr	21	23:00s	1:00	S
+Rule	Belgium	1924	only	-	Mar	29	23:00s	1:00	S
+Rule	Belgium	1925	only	-	Apr	 4	23:00s	1:00	S
+# DSH writes that a royal decree of 1926-02-22 specified the Sun following 3rd
+# Sat in Apr (except if it's Easter, in which case it's one Sunday earlier),
+# to Sun following 1st Sat in Oct, and that a royal decree of 1928-09-15
+# changed the transition times to 02:00 GMT.
+Rule	Belgium	1926	only	-	Apr	17	23:00s	1:00	S
+Rule	Belgium	1927	only	-	Apr	 9	23:00s	1:00	S
+Rule	Belgium	1928	only	-	Apr	14	23:00s	1:00	S
+Rule	Belgium	1928	1938	-	Oct	Sun>=2	 2:00s	0	-
+Rule	Belgium	1929	only	-	Apr	21	 2:00s	1:00	S
+Rule	Belgium	1930	only	-	Apr	13	 2:00s	1:00	S
+Rule	Belgium	1931	only	-	Apr	19	 2:00s	1:00	S
+Rule	Belgium	1932	only	-	Apr	 3	 2:00s	1:00	S
+Rule	Belgium	1933	only	-	Mar	26	 2:00s	1:00	S
+Rule	Belgium	1934	only	-	Apr	 8	 2:00s	1:00	S
+Rule	Belgium	1935	only	-	Mar	31	 2:00s	1:00	S
+Rule	Belgium	1936	only	-	Apr	19	 2:00s	1:00	S
+Rule	Belgium	1937	only	-	Apr	 4	 2:00s	1:00	S
+Rule	Belgium	1938	only	-	Mar	27	 2:00s	1:00	S
+Rule	Belgium	1939	only	-	Apr	16	 2:00s	1:00	S
+Rule	Belgium	1939	only	-	Nov	19	 2:00s	0	-
+Rule	Belgium	1940	only	-	Feb	25	 2:00s	1:00	S
+Rule	Belgium	1944	only	-	Sep	17	 2:00s	0	-
+Rule	Belgium	1945	only	-	Apr	 2	 2:00s	1:00	S
+Rule	Belgium	1945	only	-	Sep	16	 2:00s	0	-
+Rule	Belgium	1946	only	-	May	19	 2:00s	1:00	S
+Rule	Belgium	1946	only	-	Oct	 7	 2:00s	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Brussels	0:17:30 -	LMT	1880
+			0:17:30	-	BMT	1892 May  1 12:00 # Brussels MT
+			0:00	-	WET	1914 Nov  8
+			1:00	-	CET	1916 May  1  0:00
+			1:00	C-Eur	CE%sT	1918 Nov 11 11:00u
+			0:00	Belgium	WE%sT	1940 May 20  2:00s
+			1:00	C-Eur	CE%sT	1944 Sep  3
+			1:00	Belgium	CE%sT	1977
+			1:00	EU	CE%sT
+
+# Bosnia and Herzegovina
+# see Serbia and Montenegro
+
+# Bulgaria
+#
+# From Plamen Simenov via Steffen Thorsen (1999-09-09):
+# A document of Government of Bulgaria (No.94/1997) says:
+# EET --> EETDST is in 03:00 Local time in last Sunday of March ...
+# EETDST --> EET is in 04:00 Local time in last Sunday of October
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Bulg	1979	only	-	Mar	31	23:00	1:00	S
+Rule	Bulg	1979	only	-	Oct	 1	 1:00	0	-
+Rule	Bulg	1980	1982	-	Apr	Sat<=7	23:00	1:00	S
+Rule	Bulg	1980	only	-	Sep	29	 1:00	0	-
+Rule	Bulg	1981	only	-	Sep	27	 2:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Sofia	1:33:16 -	LMT	1880
+			1:56:56	-	IMT	1894 Nov 30 # Istanbul MT?
+			2:00	-	EET	1942 Nov  2  3:00
+			1:00	C-Eur	CE%sT	1945 Apr  2  3:00
+			2:00	-	EET	1979 Mar 31 23:00
+			2:00	Bulg	EE%sT	1982 Sep 26  2:00
+			2:00	C-Eur	EE%sT	1991
+			2:00	E-Eur	EE%sT	1997
+			2:00	EU	EE%sT
+
+# Croatia
+# see Serbia and Montenegro
+
+# Cyprus
+# Please see the `asia' file for Asia/Nicosia.
+
+# Czech Republic
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Czech	1945	only	-	Apr	 8	2:00s	1:00	S
+Rule	Czech	1945	only	-	Nov	18	2:00s	0	-
+Rule	Czech	1946	only	-	May	 6	2:00s	1:00	S
+Rule	Czech	1946	1949	-	Oct	Sun>=1	2:00s	0	-
+Rule	Czech	1947	only	-	Apr	20	2:00s	1:00	S
+Rule	Czech	1948	only	-	Apr	18	2:00s	1:00	S
+Rule	Czech	1949	only	-	Apr	 9	2:00s	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Prague	0:57:44 -	LMT	1850
+			0:57:44	-	PMT	1891 Oct     # Prague Mean Time
+			1:00	C-Eur	CE%sT	1944 Sep 17 2:00s
+			1:00	Czech	CE%sT	1979
+			1:00	EU	CE%sT
+
+# Denmark, Faeroe Islands, and Greenland
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Denmark	1916	only	-	May	14	23:00	1:00	S
+Rule	Denmark	1916	only	-	Sep	30	23:00	0	-
+Rule	Denmark	1940	only	-	May	15	 0:00	1:00	S
+Rule	Denmark	1945	only	-	Apr	 2	 2:00s	1:00	S
+Rule	Denmark	1945	only	-	Aug	15	 2:00s	0	-
+Rule	Denmark	1946	only	-	May	 1	 2:00s	1:00	S
+Rule	Denmark	1946	only	-	Sep	 1	 2:00s	0	-
+Rule	Denmark	1947	only	-	May	 4	 2:00s	1:00	S
+Rule	Denmark	1947	only	-	Aug	10	 2:00s	0	-
+Rule	Denmark	1948	only	-	May	 9	 2:00s	1:00	S
+Rule	Denmark	1948	only	-	Aug	 8	 2:00s	0	-
+# Whitman also gives 1949 Apr 9 to 1949 Oct 1, and disagrees in minor ways
+# about many of the above dates; go with Shanks.
+#
+# For 1894, Shanks says Jan, Whitman Apr; go with Whitman.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Europe/Copenhagen	 0:50:20 -	LMT	1890
+			 0:50:20 -	CMT	1894 Apr  # Copenhagen Mean Time
+			 1:00	Denmark	CE%sT	1942 Nov  2 2:00s
+			 1:00	C-Eur	CE%sT	1945 Apr  2 2:00
+			 1:00	Denmark	CE%sT	1980
+			 1:00	EU	CE%sT
+Zone Atlantic/Faeroe	-0:27:04 -	LMT	1908 Jan 11	# Torshavn
+			 0:00	-	WET	1981
+			 0:00	EU	WE%sT
+#
+# From Paul Eggert (2004-10-31):
+# During World War II, Germany maintained secret manned weather stations in
+# East Greenland and Franz Josef Land, but we don't know their time zones.
+# My source for this is Wilhelm Dege's book mentioned under Svalbard.
+#
+# From Paul Eggert (1996-11-22):
+# Greenland joined the EU as part of Denmark, obtained home rule on 1979-05-01,
+# and left the EU on 1985-02-01.  It therefore should have been using EU
+# rules at least through 1984.  Shanks says Scoresbysund and Godthab
+# used C-Eur rules after 1980, but IATA SSIM (1991/1996) says they use EU
+# rules since at least 1991.  Assume EU rules since 1980.
+
+# From Gwillin Law (2001-06-06), citing
+# <http://www.statkart.no/efs/efshefter/2001/efs5-2001.pdf> (2001-03-15),
+# and with translations corrected by Steffen Thorsen:
+#
+# Greenland has four local times, and the relation to UTC
+# is according to the following time line:
+#
+# The military zone near Thule	UTC-4
+# Standard Greenland time	UTC-3
+# Scoresbysund			UTC-1
+# Danmarkshavn			UTC
+#
+# In the military area near Thule and in Danmarkshavn DST will not be
+# introduced.
+
+# From Rives McDow (2001-11-01):
+#
+# I correspond regularly with the Dansk Polarcenter, and wrote them at
+# the time to clarify the situation in Thule.  Unfortunately, I have
+# not heard back from them regarding my recent letter.  [But I have
+# info from earlier correspondence.]
+#
+# According to the center, a very small local time zone around Thule
+# Air Base keeps the time according to UTC-4, implementing daylight
+# savings using North America rules, changing the time at 02:00 local time....
+#
+# The east coast of Greenland north of the community of Scoresbysund
+# uses UTC in the same way as in Iceland, year round, with no dst.
+# There are just a few stations on this coast, including the
+# Danmarkshavn ICAO weather station mentioned in your September 29th
+# email.  The other stations are two sledge patrol stations in
+# Mestersvig and Daneborg, the air force base at Station Nord, and the
+# DPC research station at Zackenberg.
+#
+# Scoresbysund and two small villages nearby keep time UTC-1 and use
+# the same daylight savings time period as in West Greenland (Godthab).
+#
+# The rest of Greenland, including Godthab (this area, although it
+# includes central Greenland, is known as west Greenland), keeps time
+# UTC-3, with daylight savings methods according to European rules.
+#
+# It is common procedure to use UTC 0 in the wilderness of East and
+# North Greenland, because it is mainly Icelandic aircraft operators
+# maintaining traffic in these areas.  However, the official status of
+# this area is that it sticks with Godthab time.  This area might be
+# considered a dual time zone in some respects because of this.
+
+# From Rives McDow (2001-11-19):
+# I heard back from someone stationed at Thule; the time change took place
+# there at 2:00 AM.
+
+# From Paul Eggert (2001-11-19):
+# The 1997 CIA map shows Danmarkshavn on GMT; the 1995 map as like Godthab.
+# For lack of better info, assume they were like Godthab before 1996.
+# startkart.no says Thule does not observe DST, but this is clearly an error,
+# so go with Shanks for all Thule transitions.
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Thule	1991	1992	-	Mar	lastSun	2:00	1:00	D
+Rule	Thule	1991	1992	-	Sep	lastSun	2:00	0	S
+Rule	Thule	1993	max	-	Apr	Sun>=1	2:00	1:00	D
+Rule	Thule	1993	max	-	Oct	lastSun	2:00	0	S
+#
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Danmarkshavn -1:14:40 -	LMT	1916 Jul 28
+			-3:00	-	WGT	1980 Apr  6 2:00
+			-3:00	EU	WG%sT	1996
+			0:00	-	GMT
+Zone America/Scoresbysund -1:29:00 -	LMT	1916 Jul 28 # Ittoqqortoormiit
+			-2:00	-	CGT	1980 Apr  6 2:00
+			-2:00	C-Eur	CG%sT	1981 Mar 29
+			-1:00	EU	EG%sT
+Zone America/Godthab	-3:26:56 -	LMT	1916 Jul 28 # Nuuk
+			-3:00	-	WGT	1980 Apr  6 2:00
+			-3:00	EU	WG%sT
+Zone America/Thule	-4:35:08 -	LMT	1916 Jul 28 # Pituffik air base
+			-4:00	Thule	A%sT
+
+# Estonia
+# From Peter Ilieve (1994-10-15):
+# A relative in Tallinn confirms the accuracy of the data for 1989 onwards
+# [through 1994] and gives the legal authority for it,
+# a regulation of the Government of Estonia, No. 111 of 1989....
+#
+# From Peter Ilieve (1996-10-28):
+# [IATA SSIM (1992/1996) claims that the Baltic republics switch at 01:00s,
+# but a relative confirms that Estonia still switches at 02:00s, writing:]
+# ``I do not [know] exactly but there are some little different
+# (confusing) rules for International Air and Railway Transport Schedules
+# conversion in Sunday connected with end of summer time in Estonia....
+# A discussion is running about the summer time efficiency and effect on
+# human physiology.  It seems that Estonia maybe will not change to
+# summer time next spring.''
+
+# From Peter Ilieve (1998-11-04), heavily edited:
+# <a href="http://trip.rk.ee/cgi-bin/thw?${BASE}=akt&${OOHTML}=rtd&TA=1998&TO=1&AN=1390">
+# The 1998-09-22 Estonian time law
+# </a>
+# refers to the Eighth Directive and cites the association agreement between
+# the EU and Estonia, ratified by the Estonian law (RT II 1995, 22--27, 120).
+#
+# I also asked [my relative] whether they use any standard abbreviation
+# for their standard and summer times. He says no, they use "suveaeg"
+# (summer time) and "talveaeg" (winter time).
+
+# From <a href="http://www.baltictimes.com/">The Baltic Times</a> (1999-09-09)
+# via Steffen Thorsen:
+# This year will mark the last time Estonia shifts to summer time,
+# a council of the ruling coalition announced Sept. 6....
+# But what this could mean for Estonia's chances of joining the European
+# Union are still unclear.  In 1994, the EU declared summer time compulsory
+# for all member states until 2001.  Brussels has yet to decide what to do
+# after that.
+
+# From Mart Oruaas (2000-01-29):
+# Regulation no. 301 (1999-10-12) obsoletes previous regulation
+# no. 206 (1998-09-22) and thus sticks Estonia to +02:00 GMT for all
+# the year round.  The regulation is effective 1999-11-01.
+
+# From Toomas Soome (2002-02-21):
+# The Estonian government has changed once again timezone politics.
+# Now we are using again EU rules.
+#
+# From Urmet Jaanes (2002-03-28):
+# The legislative reference is Government decree No. 84 on 2002-02-21.
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Tallinn	1:39:00	-	LMT	1880
+			1:39:00	-	TMT	1918 Feb # Tallinn Mean Time
+			1:00	C-Eur	CE%sT	1919 Jul
+			1:39:00	-	TMT	1921 May
+			2:00	-	EET	1940 Aug  6
+			3:00	-	MSK	1941 Sep 15
+			1:00	C-Eur	CE%sT	1944 Sep 22
+			3:00	Russia	MSK/MSD	1989 Mar 26 2:00s
+			2:00	1:00	EEST	1989 Sep 24 2:00s
+			2:00	C-Eur	EE%sT	1998 Sep 22
+			2:00	EU	EE%sT	1999 Nov  1
+			2:00	-	EET	2002 Feb 21
+			2:00	EU	EE%sT
+
+# Finland
+#
+# From Hannu Strang (25 Sep 1994 06:03:37 UTC):
+# Well, here in Helsinki we're just changing from summer time to regular one,
+# and it's supposed to change at 4am...
+#
+# From Paul Eggert (25 Sep 1994):
+# Shanks says Finland has switched at 02:00 standard time since 1981.
+# Go with Strang instead.
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Finland	1942	only	-	Apr	3	0:00	1:00	S
+Rule	Finland	1942	only	-	Oct	3	0:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Helsinki	1:39:52 -	LMT	1878 May 31
+			1:39:52	-	HMT	1921 May    # Helsinki Mean Time
+			2:00	Finland	EE%sT	1981 Mar 29 2:00
+			2:00	EU	EE%sT
+
+# Aaland Is
+Link	Europe/Helsinki	Europe/Mariehamn
+
+
+# France
+
+# From Ciro Discepolo (2000-12-20):
+#
+# Henri Le Corre, Regimes Horaires pour le monde entier, Editions
+# Traditionnelles - Paris 2 books, 1993
+#
+# Gabriel, Traite de l'heure dans le monde, Guy Tredaniel editeur,
+# Paris, 1991
+#
+# Francoise Gauquelin, Problemes de l'heure resolus en astrologie,
+# Guy tredaniel, Paris 1987
+
+
+#
+# Shanks seems to use `24:00' ambiguously; we resolve it with Whitman.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	France	1916	only	-	Jun	14	23:00s	1:00	S
+Rule	France	1916	1919	-	Oct	Sun>=1	23:00s	0	-
+Rule	France	1917	only	-	Mar	24	23:00s	1:00	S
+Rule	France	1918	only	-	Mar	 9	23:00s	1:00	S
+Rule	France	1919	only	-	Mar	 1	23:00s	1:00	S
+Rule	France	1920	only	-	Feb	14	23:00s	1:00	S
+Rule	France	1920	only	-	Oct	23	23:00s	0	-
+Rule	France	1921	only	-	Mar	14	23:00s	1:00	S
+Rule	France	1921	only	-	Oct	25	23:00s	0	-
+Rule	France	1922	only	-	Mar	25	23:00s	1:00	S
+# DSH writes that a law of 1923-05-24 specified 3rd Sat in Apr at 23:00 to 1st
+# Sat in Oct at 24:00; and that in 1930, because of Easter, the transitions
+# were Apr 12 and Oct 5.  Go with Shanks.
+Rule	France	1922	1938	-	Oct	Sat>=1	23:00s	0	-
+Rule	France	1923	only	-	May	26	23:00s	1:00	S
+Rule	France	1924	only	-	Mar	29	23:00s	1:00	S
+Rule	France	1925	only	-	Apr	 4	23:00s	1:00	S
+Rule	France	1926	only	-	Apr	17	23:00s	1:00	S
+Rule	France	1927	only	-	Apr	 9	23:00s	1:00	S
+Rule	France	1928	only	-	Apr	14	23:00s	1:00	S
+Rule	France	1929	only	-	Apr	20	23:00s	1:00	S
+Rule	France	1930	only	-	Apr	12	23:00s	1:00	S
+Rule	France	1931	only	-	Apr	18	23:00s	1:00	S
+Rule	France	1932	only	-	Apr	 2	23:00s	1:00	S
+Rule	France	1933	only	-	Mar	25	23:00s	1:00	S
+Rule	France	1934	only	-	Apr	 7	23:00s	1:00	S
+Rule	France	1935	only	-	Mar	30	23:00s	1:00	S
+Rule	France	1936	only	-	Apr	18	23:00s	1:00	S
+Rule	France	1937	only	-	Apr	 3	23:00s	1:00	S
+Rule	France	1938	only	-	Mar	26	23:00s	1:00	S
+Rule	France	1939	only	-	Apr	15	23:00s	1:00	S
+Rule	France	1939	only	-	Nov	18	23:00s	0	-
+Rule	France	1940	only	-	Feb	25	 2:00	1:00	S
+# The French rules for 1941-1944 were not used in Paris, but Shanks writes
+# that they were used in Monaco and in many French locations.
+# Le Corre writes that the upper limit of the free zone was Arneguy, Orthez,
+# Mont-de-Marsan, Bazas, Langon, Lamotte-Montravel, Marouil, La
+# Rochefoucault, Champagne-Mouton, La Roche-Posay, La Haye-Decartes,
+# Loches, Montrichard, Vierzon, Bourges, Moulins, Digoin,
+# Paray-le-Monial, Montceau-les-Mines, Chalons-sur-Saone, Arbois,
+# Dole, Morez, St-Claude, and Collognes (Haute-Savioe).
+Rule	France	1941	only	-	May	 5	 0:00	2:00	M # Midsummer
+# Shanks says this transition occurred at Oct 6 1:00,
+# but go with Denis Excoffier (1997-12-12),
+# who quotes the Ephemerides Astronomiques for 1998 from Bureau des Longitudes
+# as saying 5/10/41 22hUT.
+Rule	France	1941	only	-	Oct	 6	 0:00	1:00	S
+Rule	France	1942	only	-	Mar	 9	 0:00	2:00	M
+Rule	France	1942	only	-	Nov	 2	 3:00	1:00	S
+Rule	France	1943	only	-	Mar	29	 2:00	2:00	M
+Rule	France	1943	only	-	Oct	 4	 3:00	1:00	S
+Rule	France	1944	only	-	Apr	 3	 2:00	2:00	M
+Rule	France	1944	only	-	Oct	 8	 1:00	1:00	S
+Rule	France	1945	only	-	Apr	 2	 2:00	2:00	M
+Rule	France	1945	only	-	Sep	16	 3:00	0	-
+# Shanks gives Mar 28 2:00 and Sep 26 3:00;
+# go with Excoffier's 28/3/76 0hUT and 25/9/76 23hUT.
+Rule	France	1976	only	-	Mar	28	 1:00	1:00	S
+Rule	France	1976	only	-	Sep	26	 1:00	0	-
+# Shanks gives 0:09 for Paris Mean Time, and Whitman gives 0:09:05,
+# but Howse quotes the actual French legislation as saying 0:09:21.
+# Go with Howse.  Howse writes that the time in France was officially based
+# on PMT-0:09:21 until 1978-08-09, when the time base finally switched to UTC.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Paris	0:09:21 -	LMT	1891 Mar 15  0:01
+			0:09:21	-	PMT	1911 Mar 11  0:01  # Paris MT
+# Shanks gives 1940 Jun 14 0:00; go with Excoffier and Le Corre.
+			0:00	France	WE%sT	1940 Jun 14 23:00
+# Le Corre says Paris stuck with occupied-France time after the liberation;
+# go with Shanks.
+			1:00	C-Eur	CE%sT	1944 Aug 25
+			0:00	France	WE%sT	1945 Sep 16  3:00
+			1:00	France	CE%sT	1977
+			1:00	EU	CE%sT
+
+# Germany
+
+# From Markus Kuhn (1998-09-29):
+# The German time zone web site by the Physikalisch-Technische
+# Bundesanstalt contains DST information back to 1916.
+# [See tz-link.htm for the URL.]
+
+# From Joerg Schilling (2002-10-23):
+# In 1945, Berlin was switched to Moscow Summer time (GMT+4) by <a
+# href="http://www.dhm.de/lemo/html/biografien/BersarinNikolai/">
+# General [Nikolai] Bersarin</a>.
+
+# From Paul Eggert (2003-03-08):
+# <a href="http://www.parlament-berlin.de/pds-fraktion.nsf/727459127c8b66ee8525662300459099/defc77cb784f180ac1256c2b0030274b/$FILE/bersarint.pdf">
+# says that Bersarin issued an order to use Moscow time on May 20.
+# However, Moscow did not observe daylight saving in 1945, so
+# this was equivalent to CEMT (GMT+3), not GMT+4.
+
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Germany	1945	only	-	Apr	 2	2:00s	1:00	S
+Rule	Germany	1945	only	-	May	24	2:00	2:00	M # Midsummer
+Rule	Germany	1945	only	-	Sep	24	3:00	1:00	S
+Rule	Germany	1945	only	-	Nov	18	2:00s	0	-
+Rule	Germany	1946	only	-	Apr	14	2:00s	1:00	S
+Rule	Germany	1946	only	-	Oct	 7	2:00s	0	-
+Rule	Germany	1947	1949	-	Oct	Sun>=1	2:00s	0	-
+Rule	Germany	1947	only	-	Apr	 6	2:00s	1:00	S
+Rule	Germany	1947	only	-	May	11	2:00s	2:00	M
+Rule	Germany	1947	only	-	Jun	29	3:00	1:00	S
+Rule	Germany	1948	only	-	Apr	18	2:00s	1:00	S
+Rule	Germany	1949	only	-	Apr	10	2:00s	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Berlin	0:53:28 -	LMT	1893 Apr
+			1:00	C-Eur	CE%sT	1945 Apr 2 2:00
+			1:00	Germany	CE%sT	1980
+			1:00	EU	CE%sT
+
+# Georgia
+# Please see the "asia" file for Asia/Tbilisi.
+# Herodotus (Histories, IV.45) says Georgia north of the Phasis (now Rioni)
+# is in Europe.  Our reference location Tbilisi is in the Asian part.
+
+# Gibraltar
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Europe/Gibraltar	-0:21:24 -	LMT	1880 Aug  2
+			0:00	GB-Eire	%s	1957 Apr 14 2:00
+			1:00	-	CET	1982
+			1:00	EU	CE%sT
+
+# Greece
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+# Whitman gives 1932 Jul 5 - Nov 1; go with Shanks.
+Rule	Greece	1932	only	-	Jul	 7	0:00	1:00	S
+Rule	Greece	1932	only	-	Sep	 1	0:00	0	-
+# Whitman gives 1941 Apr 25 - ?; go with Shanks.
+Rule	Greece	1941	only	-	Apr	 7	0:00	1:00	S
+# Whitman gives 1942 Feb 2 - ?; go with Shanks.
+Rule	Greece	1942	only	-	Nov	 2	3:00	0	-
+Rule	Greece	1943	only	-	Mar	30	0:00	1:00	S
+Rule	Greece	1943	only	-	Oct	 4	0:00	0	-
+# Whitman gives 1944 Oct 3 - Oct 31; go with Shanks.
+Rule	Greece	1952	only	-	Jul	 1	0:00	1:00	S
+Rule	Greece	1952	only	-	Nov	 2	0:00	0	-
+Rule	Greece	1975	only	-	Apr	12	0:00s	1:00	S
+Rule	Greece	1975	only	-	Nov	26	0:00s	0	-
+Rule	Greece	1976	only	-	Apr	11	2:00s	1:00	S
+Rule	Greece	1976	only	-	Oct	10	2:00s	0	-
+Rule	Greece	1977	1978	-	Apr	Sun>=1	2:00s	1:00	S
+Rule	Greece	1977	only	-	Sep	26	2:00s	0	-
+Rule	Greece	1978	only	-	Sep	24	4:00	0	-
+Rule	Greece	1979	only	-	Apr	 1	9:00	1:00	S
+Rule	Greece	1979	only	-	Sep	29	2:00	0	-
+Rule	Greece	1980	only	-	Apr	 1	0:00	1:00	S
+Rule	Greece	1980	only	-	Sep	28	0:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Athens	1:34:52 -	LMT	1895 Sep 14
+			1:34:52	-	AMT	1916 Jul 28 0:01     # Athens MT
+			2:00	Greece	EE%sT	1941 Apr 30
+			1:00	Greece	CE%sT	1944 Apr  4
+			2:00	Greece	EE%sT	1981
+			# Shanks says they switched to C-Eur in 1981;
+			# go with EU instead, since Greece joined it on Jan 1.
+			2:00	EU	EE%sT
+
+# Hungary
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Hungary	1918	only	-	Apr	 1	 3:00	1:00	S
+Rule	Hungary	1918	only	-	Sep	29	 3:00	0	-
+Rule	Hungary	1919	only	-	Apr	15	 3:00	1:00	S
+Rule	Hungary	1919	only	-	Sep	15	 3:00	0	-
+Rule	Hungary	1920	only	-	Apr	 5	 3:00	1:00	S
+Rule	Hungary	1920	only	-	Sep	30	 3:00	0	-
+Rule	Hungary	1945	only	-	May	 1	23:00	1:00	S
+Rule	Hungary	1945	only	-	Nov	 3	 0:00	0	-
+Rule	Hungary	1946	only	-	Mar	31	 2:00s	1:00	S
+Rule	Hungary	1946	1949	-	Oct	Sun>=1	 2:00s	0	-
+Rule	Hungary	1947	1949	-	Apr	Sun>=4	 2:00s	1:00	S
+Rule	Hungary	1950	only	-	Apr	17	 2:00s	1:00	S
+Rule	Hungary	1950	only	-	Oct	23	 2:00s	0	-
+Rule	Hungary	1954	1955	-	May	23	 0:00	1:00	S
+Rule	Hungary	1954	1955	-	Oct	 3	 0:00	0	-
+Rule	Hungary	1956	only	-	Jun	Sun>=1	 0:00	1:00	S
+Rule	Hungary	1956	only	-	Sep	lastSun	 0:00	0	-
+Rule	Hungary	1957	only	-	Jun	Sun>=1	 1:00	1:00	S
+Rule	Hungary	1957	only	-	Sep	lastSun	 3:00	0	-
+Rule	Hungary	1980	only	-	Apr	 6	 1:00	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Budapest	1:16:20 -	LMT	1890 Oct
+			1:00	C-Eur	CE%sT	1918
+			1:00	Hungary	CE%sT	1941 Apr  6  2:00
+			1:00	C-Eur	CE%sT	1945 May  1 23:00
+			1:00	Hungary	CE%sT	1980 Sep 28  2:00s
+			1:00	EU	CE%sT
+
+# Iceland
+#
+# From Adam David (1993-11-06):
+# The name of the timezone in Iceland for system / mail / news purposes is GMT.
+#
+# (1993-12-05):
+# This material is paraphrased from the 1988 edition of the University of
+# Iceland Almanak.
+#
+# From January 1st, 1908 the whole of Iceland was standardised at 1 hour
+# behind GMT. Previously, local mean solar time was used in different parts
+# of Iceland, the almanak had been based on Reykjavik mean solar time which
+# was 1 hour and 28 minutes behind GMT.
+#
+# "first day of winter" referred to [below] means the first day of the 26 weeks
+# of winter, according to the old icelandic calendar that dates back to the
+# time the norsemen first settled Iceland.  The first day of winter is always
+# Saturday, but is not dependent on the Julian or Gregorian calendars.
+#
+# (1993-12-10):
+# I have a reference from the Oxford Icelandic-English dictionary for the
+# beginning of winter, which ties it to the ecclesiastical calendar (and thus
+# to the julian/gregorian calendar) over the period in question.
+#	the winter begins on the Saturday next before St. Luke's day
+#	(old style), or on St. Luke's day, if a Saturday.
+# St. Luke's day ought to be traceable from ecclesiastical sources. "old style"
+# might be a reference to the Julian calendar as opposed to Gregorian, or it
+# might mean something else (???).
+#
+# From Paul Eggert (1999-10-29):
+# The Iceland Almanak, Shanks and Whitman disagree on many points.
+# We go with the Almanak, except for one claim from Shanks, namely that
+# Reykavik was 21W57 from 1837 to 1908, local mean time before that.
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Iceland	1917	1918	-	Feb	19	23:00	1:00	S
+Rule	Iceland	1917	only	-	Oct	21	 1:00	0	-
+Rule	Iceland	1918	only	-	Nov	16	 1:00	0	-
+Rule	Iceland	1939	only	-	Apr	29	23:00	1:00	S
+Rule	Iceland	1939	only	-	Nov	29	 2:00	0	-
+Rule	Iceland	1940	only	-	Feb	25	 2:00	1:00	S
+Rule	Iceland	1940	only	-	Nov	 3	 2:00	0	-
+Rule	Iceland	1941	only	-	Mar	 2	 1:00s	1:00	S
+Rule	Iceland	1941	only	-	Nov	 2	 1:00s	0	-
+Rule	Iceland	1942	only	-	Mar	 8	 1:00s	1:00	S
+Rule	Iceland	1942	only	-	Oct	25	 1:00s	0	-
+# 1943-1946 - first Sunday in March until first Sunday in winter
+Rule	Iceland	1943	1946	-	Mar	Sun>=1	 1:00s	1:00	S
+Rule	Iceland	1943	1948	-	Oct	Sun>=22	 1:00s	0	-
+# 1947-1967 - first Sunday in April until first Sunday in winter
+Rule	Iceland	1947	1967	-	Apr	Sun>=1	 1:00s	1:00	S
+# 1949 Oct transition delayed by 1 week
+Rule	Iceland	1949	only	-	Oct	30	 1:00s	0	-
+Rule	Iceland	1950	1966	-	Oct	Sun>=22	 1:00s	0	-
+Rule	Iceland	1967	only	-	Oct	29	 1:00s	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Atlantic/Reykjavik	-1:27:24 -	LMT	1837
+			-1:27:48 -	RMT	1908 # Reykjavik Mean Time?
+			-1:00	Iceland	IS%sT	1968 Apr 7 1:00s
+			 0:00	-	GMT
+
+# Italy
+#
+# From Paul Eggert (2001-03-06):
+# Sicily and Sardinia each had their own time zones from 1866 to 1893,
+# called Palermo Time (+00:53:28) and Cagliari Time (+00:36:32).
+# During World War II, German-controlled Italy used German time.
+# But these events all occurred before the 1970 cutoff,
+# so record only the time in Rome.
+#
+# From Paul Eggert (1996-05-06):
+# For Italian DST we have three sources: Shanks, Whitman, and F. Pollastri
+# <a href="http://toi.iriti.cnr.it/uk/ienitlt.html">
+# Day-light Saving Time in Italy (1996-03-14)
+# </a>
+# (`FP' below), taken from an Italian National Electrotechnical Institute
+# publication. When the three sources disagree, guess who's right, as follows:
+#
+# year	FP	Shanks (S)	Whitman (W)	Go with:
+# 1916	06-03	06-03 24:00	06-03 00:00	FP & W
+#	09-30	09-30 24:00	09-30 01:00	FP; guess 24:00s
+# 1917	04-01	03-31 24:00	03-31 00:00	FP & S
+#	09-30	09-29 24:00	09-30 01:00	FP & W
+# 1918	03-09	03-09 24:00	03-09 00:00	FP & S
+#	10-06	10-05 24:00	10-06 01:00	FP & W
+# 1919	03-01	03-01 24:00	03-01 00:00	FP & S
+#	10-04	10-04 24:00	10-04 01:00	FP; guess 24:00s
+# 1920	03-20	03-20 24:00	03-20 00:00	FP & S
+#	09-18	09-18 24:00	10-01 01:00	FP; guess 24:00s
+# 1944	04-02	04-03 02:00			S (see C-Eur)
+#	09-16	10-02 03:00			FP; guess 24:00s
+# 1945	09-14	09-16 24:00			FP; guess 24:00s
+# 1970	05-21	05-31 00:00			S
+#	09-20	09-27 00:00			S
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Italy	1916	only	-	Jun	 3	0:00s	1:00	S
+Rule	Italy	1916	only	-	Oct	 1	0:00s	0	-
+Rule	Italy	1917	only	-	Apr	 1	0:00s	1:00	S
+Rule	Italy	1917	only	-	Sep	30	0:00s	0	-
+Rule	Italy	1918	only	-	Mar	10	0:00s	1:00	S
+Rule	Italy	1918	1919	-	Oct	Sun>=1	0:00s	0	-
+Rule	Italy	1919	only	-	Mar	 2	0:00s	1:00	S
+Rule	Italy	1920	only	-	Mar	21	0:00s	1:00	S
+Rule	Italy	1920	only	-	Sep	19	0:00s	0	-
+Rule	Italy	1940	only	-	Jun	15	0:00s	1:00	S
+Rule	Italy	1944	only	-	Sep	17	0:00s	0	-
+Rule	Italy	1945	only	-	Apr	 2	2:00	1:00	S
+Rule	Italy	1945	only	-	Sep	15	0:00s	0	-
+Rule	Italy	1946	only	-	Mar	17	2:00s	1:00	S
+Rule	Italy	1946	only	-	Oct	 6	2:00s	0	-
+Rule	Italy	1947	only	-	Mar	16	0:00s	1:00	S
+Rule	Italy	1947	only	-	Oct	 5	0:00s	0	-
+Rule	Italy	1948	only	-	Feb	29	2:00s	1:00	S
+Rule	Italy	1948	only	-	Oct	 3	2:00s	0	-
+Rule	Italy	1966	1968	-	May	Sun>=22	0:00	1:00	S
+Rule	Italy	1966	1969	-	Sep	Sun>=22	0:00	0	-
+Rule	Italy	1969	only	-	Jun	 1	0:00	1:00	S
+Rule	Italy	1970	only	-	May	31	0:00	1:00	S
+Rule	Italy	1970	only	-	Sep	lastSun	0:00	0	-
+Rule	Italy	1971	1972	-	May	Sun>=22	0:00	1:00	S
+Rule	Italy	1971	only	-	Sep	lastSun	1:00	0	-
+Rule	Italy	1972	only	-	Oct	 1	0:00	0	-
+Rule	Italy	1973	only	-	Jun	 3	0:00	1:00	S
+Rule	Italy	1973	1974	-	Sep	lastSun	0:00	0	-
+Rule	Italy	1974	only	-	May	26	0:00	1:00	S
+Rule	Italy	1975	only	-	Jun	 1	0:00s	1:00	S
+Rule	Italy	1975	1977	-	Sep	lastSun	0:00s	0	-
+Rule	Italy	1976	only	-	May	30	0:00s	1:00	S
+Rule	Italy	1977	1979	-	May	Sun>=22	0:00s	1:00	S
+Rule	Italy	1978	only	-	Oct	 1	0:00s	0	-
+Rule	Italy	1979	only	-	Sep	30	0:00s	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Rome	0:49:56 -	LMT	1866 Sep 22
+			0:49:56	-	RMT	1893 Nov	# Rome Mean Time
+			1:00	Italy	CE%sT	1942 Nov  2 2:00s
+			1:00	C-Eur	CE%sT	1944 Jul
+			1:00	Italy	CE%sT	1980
+			1:00	EU	CE%sT
+
+Link	Europe/Rome	Europe/Vatican
+Link	Europe/Rome	Europe/San_Marino
+
+# Latvia
+
+# From Liene Kanepe (1998-09-17):
+
+# I asked about this matter Scientific Secretary of the Institute of Astronomy
+# of The University of Latvia Dr. paed Mr. Ilgonis Vilks. I also searched the
+# correct data in juridical acts and I found some juridical documents about
+# changes in the counting of time in Latvia from 1981....
+#
+# Act No.35 of the Council of Ministers of Latvian SSR of 1981-01-22 ...
+# according to the Act No.925 of the Council of Ministers of USSR of 1980-10-24
+# ...: all year round the time of 2nd time zone + 1 hour, in addition turning
+# the hands of the clock 1 hour forward on 1 April at 00:00 (GMT 31 March 21:00)
+# and 1 hour backward on the 1 October at 00:00 (GMT 30 September 20:00).
+#
+# Act No.592 of the Council of Ministers of Latvian SSR of 1984-09-24 ...
+# according to the Act No.967 of the Council of Ministers of USSR of 1984-09-13
+# ...: all year round the time of 2nd time zone + 1 hour, in addition turning
+# the hands of the clock 1 hour forward on the last Sunday of March at 02:00
+# (GMT 23:00 on the previous day) and 1 hour backward on the last Sunday of
+# September at 03:00 (GMT 23:00 on the previous day).
+#
+# Act No.81 of the Council of Ministers of Latvian SSR of 1989-03-22 ...
+# according to the Act No.227 of the Council of Ministers of USSR of 1989-03-14
+# ...: since the last Sunday of March 1989 in Lithuanian SSR, Latvian SSR,
+# Estonian SSR and Kaliningrad region of Russian Federation all year round the
+# time of 2nd time zone (Moscow time minus one hour). On the territory of Latvia
+# transition to summer time is performed on the last Sunday of March at 02:00
+# (GMT 00:00), turning the hands of the clock 1 hour forward.  The end of
+# daylight saving time is performed on the last Sunday of September at 03:00
+# (GMT 00:00), turning the hands of the clock 1 hour backward. Exception is
+# 1989-03-26, when we must not turn the hands of the clock....
+#
+# The Regulations of the Cabinet of Ministers of the Republic of Latvia of
+# 1997-01-21 on transition to Summer time ... established the same order of
+# daylight savings time settings as in the States of the European Union.
+
+# From Andrei Ivanov (2000-03-06):
+# This year Latvia will not switch to Daylight Savings Time (as specified in
+# <a href="http://www.lv-laiks.lv/wwwraksti/2000/071072/vd4.htm">
+# The Regulations of the Cabinet of Ministers of the Rep. of Latvia of
+# 29-Feb-2000 (#79)</a>, in Latvian for subscribers only).
+
+# <a href="http://www.rferl.org/newsline/2001/01/3-CEE/cee-030101.html">
+# From RFE/RL Newsline (2001-01-03), noted after a heads-up by Rives McDow:
+# </a>
+# The Latvian government on 2 January decided that the country will
+# institute daylight-saving time this spring, LETA reported.
+# Last February the three Baltic states decided not to turn back their
+# clocks one hour in the spring....
+# Minister of Economy Aigars Kalvitis noted that Latvia had too few
+# daylight hours and thus decided to comply with a draft European
+# Commission directive that provides for instituting daylight-saving
+# time in EU countries between 2002 and 2006. The Latvian government
+# urged Lithuania and Estonia to adopt a similar time policy, but it
+# appears that they will not do so....
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Latvia	1989	1996	-	Mar	lastSun	 2:00s	1:00	S
+Rule	Latvia	1989	1996	-	Sep	lastSun	 2:00s	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Riga	1:36:24	-	LMT	1880
+			1:36:24	-	RMT	1918 Apr 15 2:00 #Riga Mean Time
+			1:36:24	1:00	LST	1918 Sep 16 3:00 #Latvian Summer
+			1:36:24	-	RMT	1919 Apr  1 2:00
+			1:36:24	1:00	LST	1919 May 22 3:00
+			1:36:24	-	RMT	1926 May 11
+			2:00	-	EET	1940 Aug  5
+			3:00	-	MSK	1941 Jul
+			1:00	C-Eur	CE%sT	1944 Oct 13
+			3:00	Russia	MSK/MSD	1989 Mar lastSun 2:00s
+			2:00	1:00	EEST	1989 Sep lastSun 2:00s
+			2:00	Latvia	EE%sT	1997 Jan 21
+			2:00	EU	EE%sT	2000 Feb 29
+			2:00	-	EET	2001 Jan  2
+			2:00	EU	EE%sT
+
+# Liechtenstein
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Vaduz	0:38:04 -	LMT	1894 Jun
+			1:00	-	CET	1981
+			1:00	EU	CE%sT
+
+# Lithuania
+
+# From Paul Eggert (1996-11-22):
+# IATA SSIM (1992/1996) says Lithuania uses W-Eur rules, but since it is
+# known to be wrong about Estonia and Latvia, assume it's wrong here too.
+
+# From Marius Gedminas (1998-08-07):
+# I would like to inform that in this year Lithuanian time zone
+# (Europe/Vilnius) was changed.
+
+# From <a href="http://www.elta.lt/">ELTA</a> No. 972 (2582) (1999-09-29),
+# via Steffen Thorsen:
+# Lithuania has shifted back to the second time zone (GMT plus two hours)
+# to be valid here starting from October 31,
+# as decided by the national government on Wednesday....
+# The Lithuanian government also announced plans to consider a
+# motion to give up shifting to summer time in spring, as it was
+# already done by Estonia.
+
+# From the <a href="http://www.tourism.lt/informa/ff.htm">
+# Fact File, Lithuanian State Department of Tourism
+# </a> (2000-03-27): Local time is GMT+2 hours ..., no daylight saving.
+
+# From a user via Klaus Marten (2003-02-07):
+# As a candidate for membership of the European Union, Lithuania will
+# observe Summer Time in 2003, changing its clocks at the times laid
+# down in EU Directive 2000/84 of 19.I.01 (i.e. at the same times as its
+# neighbour Latvia). The text of the Lithuanian government Order of
+# 7.XI.02 to this effect can be found at
+# http://www.lrvk.lt/nut/11/n1749.htm
+
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Vilnius	1:41:16	-	LMT	1880
+			1:24:00	-	WMT	1917	    # Warsaw Mean Time
+			1:35:36	-	KMT	1919 Oct 10 # Kaunas Mean Time
+			1:00	-	CET	1920 Jul 12
+			2:00	-	EET	1920 Oct  9
+			1:00	-	CET	1940 Aug  3
+			3:00	-	MSK	1941 Jun 24
+			1:00	C-Eur	CE%sT	1944 Aug
+			3:00	Russia	MSK/MSD	1991 Mar 31 2:00s
+			2:00	1:00	EEST	1991 Sep 29 2:00s
+			2:00	C-Eur	EE%sT	1998
+			2:00	-	EET	1998 Mar 29 1:00u
+			1:00	EU	CE%sT	1999 Oct 31 1:00u
+			2:00	-	EET	2003 Jan  1
+			2:00	EU	EE%sT
+
+# Luxembourg
+# Whitman disagrees with most of these dates in minor ways; go with Shanks.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Lux	1916	only	-	May	14	23:00	1:00	S
+Rule	Lux	1916	only	-	Oct	 1	 1:00	0	-
+Rule	Lux	1917	only	-	Apr	28	23:00	1:00	S
+Rule	Lux	1917	only	-	Sep	17	 1:00	0	-
+Rule	Lux	1918	only	-	Apr	Mon>=15	 2:00s	1:00	S
+Rule	Lux	1918	only	-	Sep	Mon>=15	 2:00s	0	-
+Rule	Lux	1919	only	-	Mar	 1	23:00	1:00	S
+Rule	Lux	1919	only	-	Oct	 5	 3:00	0	-
+Rule	Lux	1920	only	-	Feb	14	23:00	1:00	S
+Rule	Lux	1920	only	-	Oct	24	 2:00	0	-
+Rule	Lux	1921	only	-	Mar	14	23:00	1:00	S
+Rule	Lux	1921	only	-	Oct	26	 2:00	0	-
+Rule	Lux	1922	only	-	Mar	25	23:00	1:00	S
+Rule	Lux	1922	only	-	Oct	Sun>=2	 1:00	0	-
+Rule	Lux	1923	only	-	Apr	21	23:00	1:00	S
+Rule	Lux	1923	only	-	Oct	Sun>=2	 2:00	0	-
+Rule	Lux	1924	only	-	Mar	29	23:00	1:00	S
+Rule	Lux	1924	1928	-	Oct	Sun>=2	 1:00	0	-
+Rule	Lux	1925	only	-	Apr	 5	23:00	1:00	S
+Rule	Lux	1926	only	-	Apr	17	23:00	1:00	S
+Rule	Lux	1927	only	-	Apr	 9	23:00	1:00	S
+Rule	Lux	1928	only	-	Apr	14	23:00	1:00	S
+Rule	Lux	1929	only	-	Apr	20	23:00	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Europe/Luxembourg	0:24:36 -	LMT	1904 Jun
+			1:00	Lux	CE%sT	1918 Nov 25
+			0:00	Lux	WE%sT	1929 Oct  6 2:00s
+			0:00	Belgium	WE%sT	1940 May 14 3:00
+			1:00	C-Eur	WE%sT	1944 Sep 18 3:00
+			1:00	Belgium	CE%sT	1977
+			1:00	EU	CE%sT
+
+# Macedonia
+# see Serbia and Montenegro
+
+# Malta
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Malta	1973	only	-	Mar	31	0:00s	1:00	S
+Rule	Malta	1973	only	-	Sep	29	0:00s	0	-
+Rule	Malta	1974	only	-	Apr	21	0:00s	1:00	S
+Rule	Malta	1974	only	-	Sep	16	0:00s	0	-
+Rule	Malta	1975	1979	-	Apr	Sun>=15	2:00	1:00	S
+Rule	Malta	1975	1980	-	Sep	Sun>=15	2:00	0	-
+Rule	Malta	1980	only	-	Mar	31	2:00	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Malta	0:58:04 -	LMT	1893 Nov  2	# Valletta
+			1:00	Italy	CE%sT	1942 Nov  2 2:00s
+			1:00	C-Eur	CE%sT	1945 Apr  2 2:00s
+			1:00	Italy	CE%sT	1973 Mar 31
+			1:00	Malta	CE%sT	1981
+			1:00	EU	CE%sT
+
+# Moldova
+
+# From Paul Eggert (2001-02-11):
+# A previous version of this database followed Shanks, who writes that
+# Tiraspol switched to Moscow time on 1992-01-19 at 02:00.
+# However, this is most likely an error, as Moldova declared independence
+# on 1991-08-27 (the 1992-01-19 date is that of a Russian decree).
+# In early 1992 there was large-scale interethnic violence in the area
+# and it's possible that some Russophones continued to observe Moscow time.
+# But [two people] separately reported via
+# Jesper Norgaard that as of 2001-01-24 Tiraspol was like Chisinau.
+# The Tiraspol entry has therefore been removed for now.
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Chisinau	1:55:20 -	LMT	1880
+			1:55	-	CMT	1918 Feb 15 # Chisinau MT
+			1:44:24	-	BMT	1931 Jul 24 # Bucharest MT
+			2:00	Romania	EE%sT	1940 Aug 15
+			2:00	1:00	EEST	1941 Jul 17
+			1:00	C-Eur	CE%sT	1944 Aug 24
+			3:00	Russia	MSK/MSD	1990
+			3:00	-	MSK	1990 May 6
+			2:00	-	EET	1991
+			2:00	Russia	EE%sT	1992
+			2:00	E-Eur	EE%sT	1997
+# See Romania commentary for the guessed 1997 transition to EU rules.
+			2:00	EU	EE%sT
+
+# Monaco
+# Shanks gives 0:09 for Paris Mean Time; go with Howse's more precise 0:09:21.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Monaco	0:29:32 -	LMT	1891 Mar 15
+			0:09:21	-	PMT	1911 Mar 11    # Paris Mean Time
+			0:00	France	WE%sT	1945 Sep 16 3:00
+			1:00	France	CE%sT	1977
+			1:00	EU	CE%sT
+
+# Netherlands
+
+# Howse writes that the Netherlands' railways used GMT between 1892 and 1940,
+# but for other purposes the Netherlands used Amsterdam mean time.
+
+# However, Robert H. van Gent writes (2001-04-01):
+# Howse's statement is only correct up to 1909. From 1909-05-01 (00:00:00
+# Amsterdam mean time) onwards, the whole of the Netherlands (including
+# the Dutch railways) was required by law to observe Amsterdam mean time
+# (19 minutes 32.13 seconds ahead of GMT). This had already been the
+# common practice (except for the railways) for many decades but it was
+# not until 1909 when the Dutch government finally defined this by law.
+# On 1937-07-01 this was changed to 20 minutes (exactly) ahead of GMT and
+# was generally known as Dutch Time ("Nederlandse Tijd").
+#
+# (2001-04-08):
+# 1892-05-01 was the date when the Dutch railways were by law required to
+# observe GMT while the remainder of the Netherlands adhered to the common
+# practice of following Amsterdam mean time.
+#
+# (2001-04-09):
+# In 1835 the authorities of the province of North Holland requested the
+# municipal authorities of the towns and cities in the province to observe
+# Amsterdam mean time but I do not know in how many cases this request was
+# actually followed.
+#
+# From 1852 onwards the Dutch telegraph offices were by law required to
+# observe Amsterdam mean time. As the time signals from the observatory of
+# Leiden were also distributed by the telegraph system, I assume that most
+# places linked up with the telegraph (and railway) system automatically
+# adopted Amsterdam mean time.
+#
+# Although the early Dutch railway companies initially observed a variety
+# of times, most of them had adopted Amsterdam mean time by 1858 but it
+# was not until 1866 when they were all required by law to observe
+# Amsterdam mean time.
+
+# The data before 1945 are taken from
+# <http://www.phys.uu.nl/~vgent/wettijd/wettijd.htm>.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Neth	1916	only	-	May	 1	0:00	1:00	NST	# Netherlands Summer Time
+Rule	Neth	1916	only	-	Oct	 1	0:00	0	AMT	# Amsterdam Mean Time
+Rule	Neth	1917	only	-	Apr	16	2:00s	1:00	NST
+Rule	Neth	1917	only	-	Sep	17	2:00s	0	AMT
+Rule	Neth	1918	1921	-	Apr	Mon>=1	2:00s	1:00	NST
+Rule	Neth	1918	1921	-	Sep	lastMon	2:00s	0	AMT
+Rule	Neth	1922	only	-	Mar	lastSun	2:00s	1:00	NST
+Rule	Neth	1922	1936	-	Oct	Sun>=2	2:00s	0	AMT
+Rule	Neth	1923	only	-	Jun	Fri>=1	2:00s	1:00	NST
+Rule	Neth	1924	only	-	Mar	lastSun	2:00s	1:00	NST
+Rule	Neth	1925	only	-	Jun	Fri>=1	2:00s	1:00	NST
+# From 1926 through 1939 DST began 05-15, except that it was delayed by a week
+# in years when 05-15 fell in the Pentecost weekend.
+Rule	Neth	1926	1931	-	May	15	2:00s	1:00	NST
+Rule	Neth	1932	only	-	May	22	2:00s	1:00	NST
+Rule	Neth	1933	1936	-	May	15	2:00s	1:00	NST
+Rule	Neth	1937	only	-	May	22	2:00s	1:00	NST
+Rule	Neth	1937	only	-	Jul	 1	0:00	1:00	S
+Rule	Neth	1937	1939	-	Oct	Sun>=2	2:00s	0	-
+Rule	Neth	1938	1939	-	May	15	2:00s	1:00	S
+Rule	Neth	1945	only	-	Apr	 2	2:00s	1:00	S
+Rule	Neth	1945	only	-	Sep	16	2:00s	0	-
+#
+# Amsterdam Mean Time was +00:19:32.13 exactly, but the .13 is omitted
+# below because the current format requires GMTOFF to be an integer.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Europe/Amsterdam	0:19:32 -	LMT	1835
+			0:19:32	Neth	%s	1937 Jul  1
+			0:20	Neth	NE%sT	1940 May 16 0:00 # Dutch Time
+			1:00	C-Eur	CE%sT	1945 Apr  2 2:00
+			1:00	Neth	CE%sT	1977
+			1:00	EU	CE%sT
+
+# Norway
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+# Whitman gives 1916 May 21 - 1916 Oct 21; go with Shanks.
+Rule	Norway	1916	only	-	May	22	1:00	1:00	S
+Rule	Norway	1916	only	-	Sep	30	0:00	0	-
+# Whitman says DST observed 1935-08-11/1942-11-01, then 1943-03-29/10-04,
+# 1944-04-03/10-02, and 1945-04-01/10-01; go with Shanks.
+Rule	Norway	1945	only	-	Apr	 2	2:00s	1:00	S
+Rule	Norway	1945	only	-	Oct	 1	2:00s	0	-
+Rule	Norway	1959	1964	-	Mar	Sun>=15	2:00s	1:00	S
+Rule	Norway	1959	1965	-	Sep	Sun>=15	2:00s	0	-
+Rule	Norway	1965	only	-	Apr	25	2:00s	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Oslo	0:43:00 -	LMT	1895 Jan  1
+			1:00	Norway	CE%sT	1940 Aug 10 23:00
+			1:00	C-Eur	CE%sT	1945 Apr  2  2:00
+			1:00	Norway	CE%sT	1980
+			1:00	EU	CE%sT
+
+# Svalbard & Jan Mayen
+
+# From Steffen Thorsen (2001-05-01):
+# Although I could not find it explicitly, it seems that Jan Mayen and
+# Svalbard have been using the same time as Norway at least since the
+# time they were declared as parts of Norway.  Svalbard was declared
+# as a part of Norway by law of 1925-07-17 no 11, section 4 and Jan
+# Mayen by law of 1930-02-27 no 2, section 2. (From
+# http://www.lovdata.no/all/nl-19250717-011.html and
+# http://www.lovdata.no/all/nl-19300227-002.html).  The law/regulation
+# for normal/standard time in Norway is from 1894-06-29 no 1 (came
+# into operation on 1895-01-01) and Svalbard/Jan Mayen seem to be a
+# part of this law since 1925/1930. (From
+# http://www.lovdata.no/all/nl-18940629-001.html ) I have not been
+# able to find if Jan Mayen used a different time zone (e.g. -0100)
+# before 1930. Jan Mayen has only been "inhabitated" since 1921 by
+# Norwegian meteorologists and maybe used the same time as Norway ever
+# since 1921.  Svalbard (Arctic/Longyearbyen) has been inhabited since
+# before 1895, and therefore probably changed the local time somewhere
+# between 1895 and 1925 (inclusive).
+
+# From Paul Eggert (2001-05-01):
+#
+# Actually, Jan Mayen was never occupied by Germany during World War II,
+# so it must have diverged from Oslo time during the war, as Oslo was
+# keeping Berlin time.
+#
+# <http://home.no.net/janmayen/history.htm> says that the meteorologists
+# burned down their station in 1940 and left the island, but returned in
+# 1941 with a small Norwegian garrison and continued operations despite
+# frequent air ttacks from Germans.  In 1943 the Americans established a
+# radiolocating station on the island, called "Atlantic City".  Possibly
+# the UTC offset changed during the war, but I think it unlikely that
+# Jan Mayen used German daylight-saving rules.
+#
+# Svalbard is more complicated, as it was raided in August 1941 by an
+# Allied party that evacuated the civilian population to England (says
+# <http://www.bartleby.com/65/sv/Svalbard.html>).  The Svalbard FAQ
+# <http://www.svalbard.com/SvalbardFAQ.html> says that the Germans were
+# expelled on 1942-05-14.  However, small parties of Germans did return,
+# and according to Wilhelm Dege's book "War North of 80" (1954)
+# <http://www.ucalgary.ca/UofC/departments/UP/1-55238/1-55238-110-2.html>
+# the German armed forces at the Svalbard weather station code-named
+# Haudegen did not surrender to the Allies until September 1945.
+#
+# All these events predate our cutoff date of 1970.  Unless we can
+# come up with more definitive info about the timekeeping during the
+# war years it's probably best just do do the following for now:
+Link	Europe/Oslo	Arctic/Longyearbyen
+Link	Europe/Oslo	Atlantic/Jan_Mayen
+
+# Poland
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Poland	1918	1919	-	Sep	16	2:00s	0	-
+Rule	Poland	1919	only	-	Apr	15	2:00s	1:00	S
+# Whitman gives 1944 Nov 30; go with Shanks.
+Rule	Poland	1944	only	-	Oct	 4	2:00	0	-
+# For 1944-1948 Whitman gives the previous day; go with Shanks.
+Rule	Poland	1945	only	-	Apr	29	0:00	1:00	S
+Rule	Poland	1945	only	-	Nov	 1	0:00	0	-
+Rule	Poland	1946	only	-	Apr	14	0:00	1:00	S
+Rule	Poland	1946	only	-	Sep	 7	0:00	0	-
+Rule	Poland	1947	only	-	May	 4	0:00	1:00	S
+Rule	Poland	1947	1948	-	Oct	Sun>=1	0:00	0	-
+Rule	Poland	1948	only	-	Apr	18	0:00	1:00	S
+# Whitman also gives 1949 Apr 9 - 1949 Oct 1; go with Shanks.
+Rule	Poland	1957	only	-	Jun	 2	1:00s	1:00	S
+Rule	Poland	1957	1958	-	Sep	lastSun	1:00s	0	-
+Rule	Poland	1958	only	-	Mar	30	1:00s	1:00	S
+Rule	Poland	1959	only	-	May	31	1:00s	1:00	S
+Rule	Poland	1959	1961	-	Oct	Sun>=1	1:00s	0	-
+Rule	Poland	1960	only	-	Apr	 3	1:00s	1:00	S
+Rule	Poland	1961	1964	-	May	Sun>=25	1:00s	1:00	S
+Rule	Poland	1962	1964	-	Sep	lastSun	1:00s	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Warsaw	1:24:00 -	LMT	1880
+			1:24:00	-	WMT	1915 Aug  5   # Warsaw Mean Time
+			1:00	C-Eur	CE%sT	1918 Sep 16 3:00
+			2:00	Poland	EE%sT	1922 Jun
+			1:00	Poland	CE%sT	1940 Jun 23 2:00
+			1:00	C-Eur	CE%sT	1944 Oct
+			1:00	Poland	CE%sT	1977 Apr  3 1:00
+			1:00	W-Eur	CE%sT	1999
+# IATA SSIM (1991/1996) gives EU rules, but the _The Warsaw Voice_
+# <a href="http://www.warsawvoice.com.pl/v361/NewsInBrief.shtml">
+# http://www.warsawvoice.com/pl/v361/NewsInBrief.shtml (1995-09-24)
+# </a>
+# says the autumn 1995 switch was at 02:00.
+# Stick with W-Eur for now.
+#
+# From Marcin Kasperski (1999-06-10):
+# According to my colleagues someone recently decided, that Poland would
+# follow European Union regulations, so - I think - the matter is not
+# worth further discussion.
+#
+# From Paul Eggert (1999-06-10):
+# Kasperski also writes that the government futzed with the rules in 1997
+# or 1998 but he doesn't remember the details.  Assume they switched to
+# EU rules in 1999.
+			1:00	EU	CE%sT
+
+# Portugal
+#
+# From Rui Pedro Salgueiro (1992-11-12):
+# Portugal has recently (September, 27) changed timezone
+# (from WET to MET or CET) to harmonize with EEC.
+#
+# Martin Bruckmann (1996-02-29) reports via Peter Ilieve
+# that Portugal is reverting to 0:00 by not moving its clocks this spring.
+# The new Prime Minister was fed up with getting up in the dark in the winter.
+#
+# From Paul Eggert (1996-11-12):
+# IATA SSIM (1991-09) reports several 1991-09 and 1992-09 transitions
+# at 02:00u, not 01:00u.  Assume that these are typos.
+# IATA SSIM (1991/1992) reports that the Azores were at -1:00.
+# IATA SSIM (1993-02) says +0:00; later issues (through 1996-09) say -1:00.
+# Guess that the Azores changed to EU rules in 1992 (since that's when Portugal
+# harmonized with the EU), and that they stayed +0:00 that winter.
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+# DSH writes that despite Decree 1,469 (1915), the change to the clocks was not
+# done every year, depending on what Spain did, because of railroad schedules.
+# Go with Shanks.
+Rule	Port	1916	only	-	Jun	17	23:00	1:00	S
+# Whitman gives 1916 Oct 31; go with Shanks.
+Rule	Port	1916	only	-	Nov	 1	 1:00	0	-
+Rule	Port	1917	only	-	Feb	28	23:00s	1:00	S
+Rule	Port	1917	1921	-	Oct	14	23:00s	0	-
+Rule	Port	1918	only	-	Mar	 1	23:00s	1:00	S
+Rule	Port	1919	only	-	Feb	28	23:00s	1:00	S
+Rule	Port	1920	only	-	Feb	29	23:00s	1:00	S
+Rule	Port	1921	only	-	Feb	28	23:00s	1:00	S
+Rule	Port	1924	only	-	Apr	16	23:00s	1:00	S
+Rule	Port	1924	only	-	Oct	14	23:00s	0	-
+Rule	Port	1926	only	-	Apr	17	23:00s	1:00	S
+Rule	Port	1926	1929	-	Oct	Sat>=1	23:00s	0	-
+Rule	Port	1927	only	-	Apr	 9	23:00s	1:00	S
+Rule	Port	1928	only	-	Apr	14	23:00s	1:00	S
+Rule	Port	1929	only	-	Apr	20	23:00s	1:00	S
+Rule	Port	1931	only	-	Apr	18	23:00s	1:00	S
+# Whitman gives 1931 Oct 8; go with Shanks.
+Rule	Port	1931	1932	-	Oct	Sat>=1	23:00s	0	-
+Rule	Port	1932	only	-	Apr	 2	23:00s	1:00	S
+# Shanks gives 1934 Apr 4; go with Whitman.
+Rule	Port	1934	only	-	Apr	 7	23:00s	1:00	S
+# Whitman gives 1934 Oct 5; go with Shanks.
+Rule	Port	1934	1938	-	Oct	Sat>=1	23:00s	0	-
+# Shanks gives 1935 Apr 30; go with Whitman.
+Rule	Port	1935	only	-	Mar	30	23:00s	1:00	S
+Rule	Port	1936	only	-	Apr	18	23:00s	1:00	S
+# Whitman gives 1937 Apr 2; go with Shanks.
+Rule	Port	1937	only	-	Apr	 3	23:00s	1:00	S
+Rule	Port	1938	only	-	Mar	26	23:00s	1:00	S
+Rule	Port	1939	only	-	Apr	15	23:00s	1:00	S
+# Whitman gives 1939 Oct 7; go with Shanks.
+Rule	Port	1939	only	-	Nov	18	23:00s	0	-
+Rule	Port	1940	only	-	Feb	24	23:00s	1:00	S
+# Shanks gives 1940 Oct 7; go with Whitman.
+Rule	Port	1940	1941	-	Oct	 5	23:00s	0	-
+Rule	Port	1941	only	-	Apr	 5	23:00s	1:00	S
+Rule	Port	1942	1945	-	Mar	Sat>=8	23:00s	1:00	S
+Rule	Port	1942	only	-	Apr	25	22:00s	2:00	M # Midsummer
+Rule	Port	1942	only	-	Aug	15	22:00s	1:00	S
+Rule	Port	1942	1945	-	Oct	Sat>=24	23:00s	0	-
+Rule	Port	1943	only	-	Apr	17	22:00s	2:00	M
+Rule	Port	1943	1945	-	Aug	Sat>=25	22:00s	1:00	S
+Rule	Port	1944	1945	-	Apr	Sat>=21	22:00s	2:00	M
+Rule	Port	1946	only	-	Apr	Sat>=1	23:00s	1:00	S
+Rule	Port	1946	only	-	Oct	Sat>=1	23:00s	0	-
+Rule	Port	1947	1949	-	Apr	Sun>=1	 2:00s	1:00	S
+Rule	Port	1947	1949	-	Oct	Sun>=1	 2:00s	0	-
+# Shanks says DST was observed in 1950; go with Whitman.
+# Whitman gives Oct lastSun for 1952 on; go with Shanks.
+Rule	Port	1951	1965	-	Apr	Sun>=1	 2:00s	1:00	S
+Rule	Port	1951	1965	-	Oct	Sun>=1	 2:00s	0	-
+Rule	Port	1977	only	-	Mar	27	 0:00s	1:00	S
+Rule	Port	1977	only	-	Sep	25	 0:00s	0	-
+Rule	Port	1978	1979	-	Apr	Sun>=1	 0:00s	1:00	S
+Rule	Port	1978	only	-	Oct	 1	 0:00s	0	-
+Rule	Port	1979	1982	-	Sep	lastSun	 1:00s	0	-
+Rule	Port	1980	only	-	Mar	lastSun	 0:00s	1:00	S
+Rule	Port	1981	1982	-	Mar	lastSun	 1:00s	1:00	S
+Rule	Port	1983	only	-	Mar	lastSun	 2:00s	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+# Shanks says that the transition from LMT to WET occurred 1911-05-24;
+# Willett says 1912-01-01.  Go with Willett.
+Zone	Europe/Lisbon	-0:36:32 -	LMT	1884
+			-0:36:32 -	LMT	1912 Jan  1  # Lisbon Mean Time
+			 0:00	Port	WE%sT	1966 Apr  3 2:00
+			 1:00	-	CET	1976 Sep 26 1:00
+			 0:00	Port	WE%sT	1983 Sep 25 1:00s
+			 0:00	W-Eur	WE%sT	1992 Sep 27 1:00s
+			 1:00	EU	CE%sT	1996 Mar 31 1:00u
+			 0:00	EU	WE%sT
+Zone Atlantic/Azores	-1:42:40 -	LMT	1884		# Ponta Delgada
+			-1:54:32 -	HMT	1911 May 24  # Horta Mean Time
+			-2:00	Port	AZO%sT	1966 Apr  3 2:00 # Azores Time
+			-1:00	Port	AZO%sT	1983 Sep 25 1:00s
+			-1:00	W-Eur	AZO%sT	1992 Sep 27 1:00s
+			 0:00	EU	WE%sT	1993 Mar 28 1:00u
+			-1:00	EU	AZO%sT
+Zone Atlantic/Madeira	-1:07:36 -	LMT	1884		# Funchal
+			-1:07:36 -	FMT	1911 May 24  # Funchal Mean Time
+			-1:00	Port	MAD%sT	1966 Apr  3 2:00 # Madeira Time
+			 0:00	Port	WE%sT	1983 Sep 25 1:00s
+			 0:00	EU	WE%sT
+
+# Romania
+#
+# From Paul Eggert (1999-10-07):
+# <a href="http://www.nineoclock.ro/POL/1778pol.html">
+# Nine O'clock</a> (1998-10-23) reports that the switch occurred at
+# 04:00 local time in fall 1998.  For lack of better info,
+# assume that Romania and Moldova switched to EU rules in 1997,
+# the same year as Bulgaria.
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Romania	1932	only	-	May	21	 0:00s	1:00	S
+Rule	Romania	1932	1939	-	Oct	Sun>=1	 0:00s	0	-
+Rule	Romania	1933	1939	-	Apr	Sun>=2	 0:00s	1:00	S
+Rule	Romania	1979	only	-	May	27	 0:00	1:00	S
+Rule	Romania	1979	only	-	Sep	lastSun	 0:00	0	-
+Rule	Romania	1980	only	-	Apr	 5	23:00	1:00	S
+Rule	Romania	1980	only	-	Sep	lastSun	 1:00	0	-
+Rule	Romania	1991	1993	-	Mar	lastSun	 0:00s	1:00	S
+Rule	Romania	1991	1993	-	Sep	lastSun	 0:00s	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Europe/Bucharest	1:44:24 -	LMT	1891 Oct
+			1:44:24	-	BMT	1931 Jul 24	# Bucharest MT
+			2:00	Romania	EE%sT	1981 Mar 29 2:00s
+			2:00	C-Eur	EE%sT	1991
+			2:00	Romania	EE%sT	1994
+			2:00	E-Eur	EE%sT	1997
+			2:00	EU	EE%sT
+
+# Russia
+
+# From Paul Eggert (1999-11-12):
+# Except for Moscow after 1919-07-01, I invented the time zone abbreviations.
+# Moscow time zone abbreviations after 1919-07-01, and Moscow rules after 1991,
+# are from Andrey A. Chernov.  The rest is from Shanks, except we follow
+# Chernov's report that 1992 DST transitions were Sat 23:00, not Sun 02:00s.
+#
+# From Stanislaw A. Kuzikowski (1994-06-29):
+# But now it is some months since Novosibirsk is 3 hours ahead of Moscow!
+# I do not know why they have decided to make this change;
+# as far as I remember it was done exactly during winter->summer switching
+# so we (Novosibirsk) simply did not switch.
+#
+# From Andrey A. Chernov (1996-10-04):
+# `MSK' and `MSD' were born and used initially on Moscow computers with
+# UNIX-like OSes by several developer groups (e.g. Demos group, Kiae group)....
+# The next step was the UUCP network, the Relcom predecessor
+# (used mainly for mail), and MSK/MSD was actively used there.
+#
+# From Chris Carrier (1996-10-30):
+# According to a friend of mine who rode the Trans-Siberian Railroad from
+# Moscow to Irkutsk in 1995, public air and rail transport in Russia ...
+# still follows Moscow time, no matter where in Russia it is located.
+#
+# For Grozny, Chechnya, we have the following story from
+# John Daniszewski, "Scavengers in the Rubble", Los Angeles Times (2001-02-07):
+# News--often false--is spread by word of mouth.  A rumor that it was
+# time to move the clocks back put this whole city out of sync with
+# the rest of Russia for two weeks--even soldiers stationed here began
+# enforcing curfew at the wrong time.
+#
+# From Gwillim Law (2001-06-05):
+# There's considerable evidence that Sakhalin Island used to be in
+# UTC+11, and has changed to UTC+10, in this decade.  I start with the
+# SSIM, which listed Yuzhno-Sakhalinsk in zone RU10 along with Magadan
+# until February 1997, and then in RU9 with Khabarovsk and Vladivostok
+# since September 1997....  Although the Kuril Islands are
+# administratively part of Sakhalin oblast', they appear to have
+# remained on UTC+11 along with Magadan.
+#
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+#
+# Kaliningradskaya oblast'.
+Zone Europe/Kaliningrad	 1:22:00 -	LMT	1893 Apr
+			 1:00	C-Eur	CE%sT	1945
+			 2:00	Poland	CE%sT	1946
+			 3:00	Russia	MSK/MSD	1991 Mar 31 2:00s
+			 2:00	Russia	EE%sT
+#
+# From Oscar van Vlijmen (2001-08-25): [This region consists of]
+# Respublika Adygeya, Arkhangel'skaya oblast', Astrakhanskaya oblast',
+# Belgorodskaya oblast', Bryanskaya oblast', Vladimirskaya oblast',
+# Volgogradskaya oblast', Vologodskaya oblast', Voronezhskaya oblast',
+# Respublika Dagestan, Ivanovskaya oblast', Respublika Ingushetiya,
+# Kabarbino-Balkarskaya Respublika, Respublika Kalmykiya,
+# Kalyzhskaya oblast', Respublika Karachaevo-Cherkessiya,
+# Respublika Kareliya, Kirovskaya oblast', Respublika Komi,
+# Kostromskaya oblast', Krasnodarskij kraj, Kurskaya oblast',
+# Leningradskaya oblast', Lipetskaya oblast', Respublika Marij El,
+# Respublika Mordoviya, Moskva, Moskovskaya oblast',
+# Murmanskaya oblast', Nenetskij avtonomnyj okrug,
+# Nizhegorodskaya oblast', Novgorodskaya oblast', Orlovskaya oblast',
+# Penzenskaya oblast', Pskovskaya oblast', Rostovskaya oblast',
+# Ryazanskaya oblast', Sankt-Peterburg, Saratovskaya oblast',
+# Respublika Severnaya Osetiya, Smolenskaya oblast',
+# Stavropol'skij kraj, Tambovskaya oblast', Respublika Tatarstan,
+# Tverskaya oblast', Tyl'skaya oblast', Ul'yanovskaya oblast',
+# Chechenskaya Respublika, Chuvashskaya oblast',
+# Yaroslavskaya oblast'
+Zone Europe/Moscow	 2:30:20 -	LMT	1880
+			 2:30	-	MMT	1916 Jul  3 # Moscow Mean Time
+			 2:30:48 Russia	%s	1919 Jul  1 2:00
+			 3:00	Russia	MSK/MSD	1922 Oct
+			 2:00	-	EET	1930 Jun 21
+			 3:00	Russia	MSK/MSD	1991 Mar 31 2:00s
+			 2:00	Russia	EE%sT	1992 Jan 19 2:00s
+			 3:00	Russia	MSK/MSD
+#
+# From Oscar van Vlijmen (2001-08-25): [This region consists of]
+# Samarskaya oblast', Udmyrtskaya respublika
+Zone Europe/Samara	 3:20:36 -	LMT	1919 Jul  1 2:00
+			 3:00	-	KUYT	1930 Jun 21 # Kuybyshev
+			 4:00	Russia	KUY%sT	1989 Mar 26 2:00s
+			 3:00	Russia	KUY%sT	1991 Mar 31 2:00s
+			 2:00	Russia	KUY%sT	1991 Sep 29 2:00s
+			 3:00	-	KUYT	1991 Oct 20 3:00
+			 4:00	Russia	SAM%sT	# Samara Time
+#
+# From Oscar van Vlijmen (2001-08-25): [This region consists of]
+# Respublika Bashkortostan, Komi-Permyatskij avtonomnyj okrug,
+# Kurganskaya oblast', Orenburgskaya oblast', Permskaya oblast',
+# Sverdlovskaya oblast', Tyumenskaya oblast',
+# Khanty-Manskijskij avtonomnyj okrug, Chelyabinskaya oblast',
+# Yamalo-Nenetskij avtonomnyj okrug.
+Zone Asia/Yekaterinburg	 4:02:24 -	LMT	1919 Jul 15 4:00
+			 4:00	-	SVET	1930 Jun 21 # Sverdlovsk Time
+			 5:00	Russia	SVE%sT	1991 Mar 31 2:00s
+			 4:00	Russia	SVE%sT	1992 Jan 19 2:00s
+			 5:00	Russia	YEK%sT	# Yekaterinburg Time
+#
+# From Oscar van Vlijmen (2001-08-25): [This region consists of]
+# Respublika Altaj, Altajskij kraj, Omskaya oblast'.
+Zone Asia/Omsk		 4:53:36 -	LMT	1919 Nov 14
+			 5:00	-	OMST	1930 Jun 21 # Omsk TIme
+			 6:00	Russia	OMS%sT	1991 Mar 31 2:00s
+			 5:00	Russia	OMS%sT	1992 Jan 19 2:00s
+			 6:00	Russia	OMS%sT
+#
+# Novosibirskaya oblast'.
+Zone Asia/Novosibirsk	 5:31:40 -	LMT	1919 Dec 14 6:00
+			 6:00	-	NOVT	1930 Jun 21 # Novosibirsk Time
+			 7:00	Russia	NOV%sT	1991 Mar 31 2:00s
+			 6:00	Russia	NOV%sT	1992 Jan 19 2:00s
+			 7:00	Russia	NOV%sT	1993 May 23 # says Shanks
+			 6:00	Russia	NOV%sT
+#
+# From Oscar van Vlijmen (2001-08-25): [This region consists of]
+# Kemerovskaya oblast', Krasnoyarskij kraj,
+# Tajmyrskij (Dolgano-Nenetskij) avtonomnyj okrug, Tomskaya oblast',
+# Respublika Tuva, Respublika Khakasiya, Evenkijskij avtonomnyj okrug.
+Zone Asia/Krasnoyarsk	 6:11:20 -	LMT	1920 Jan  6
+			 6:00	-	KRAT	1930 Jun 21 # Krasnoyarsk Time
+			 7:00	Russia	KRA%sT	1991 Mar 31 2:00s
+			 6:00	Russia	KRA%sT	1992 Jan 19 2:00s
+			 7:00	Russia	KRA%sT
+#
+# From Oscar van Vlijmen (2001-08-25): [This region consists of]
+# Respublika Buryatiya, Irkutskaya oblast',
+# Ust'-Ordynskij Buryatskij avtonomnyj okrug.
+Zone Asia/Irkutsk	 6:57:20 -	LMT	1880
+			 6:57:20 -	IMT	1920 Jan 25 # Irkutsk Mean Time
+			 7:00	-	IRKT	1930 Jun 21 # Irkutsk Time
+			 8:00	Russia	IRK%sT	1991 Mar 31 2:00s
+			 7:00	Russia	IRK%sT	1992 Jan 19 2:00s
+			 8:00	Russia	IRK%sT
+#
+# From Oscar van Vlijmen (2003-10-18): [This region consists of]
+# Aginskij Buryatskij avtonomnyj okrug, Amurskaya oblast',
+# [parts of] Respublika Sakha (Yakutiya), Chitinskaya oblast'.
+# The Sakha districts are: Aldanskij, Amginskij, Anabarskij,
+# Bulunskij, Verkhnekolymskij, Verkhnevilyujskij, Vilyujskij, Gornyj,
+# Zhiganskij, Kobyajskij, Lenskij, Megino-Kangalasskij, Mirninskij,
+# Namskij, Nyurbinskij, Olenekskij, Olekminskij, Srednekolymskij,
+# Suntarskij, Tattinskij, Ust'-Aldanskij, Khangalasskij,
+# Churapchinskij, Eveno-Bytantajskij.
+Zone Asia/Yakutsk	 8:38:40 -	LMT	1919 Dec 15
+			 8:00	-	YAKT	1930 Jun 21 # Yakutsk Time
+			 9:00	Russia	YAK%sT	1991 Mar 31 2:00s
+			 8:00	Russia	YAK%sT	1992 Jan 19 2:00s
+			 9:00	Russia	YAK%sT
+#
+# From Oscar van Vlijmen (2003-10-18): [This region consists of]
+# Evrejskaya avtonomnaya oblast', Khabarovskij kraj, Primorskij kraj,
+# [parts of] Respublika Sakha (Yakutiya).
+# The Sakha districts are: Verkhoyanskij, Tomponskij, Ust'-Majskij,
+# Ust'-Yanskij.
+Zone Asia/Vladivostok	 8:47:44 -	LMT	1922 Nov 15
+			 9:00	-	VLAT	1930 Jun 21 # Vladivostok Time
+			10:00	Russia	VLA%sT	1991 Mar 31 2:00s
+			 9:00	Russia	VLA%sST	1992 Jan 19 2:00s
+			10:00	Russia	VLA%sT
+#
+# Sakhalinskaya oblast'.
+# The Zone name should be Yuzhno-Sakhalinsk, but that's too long.
+Zone Asia/Sakhalin	 9:30:48 -	LMT	1905 Aug 23
+			 9:00	-	CJT	1938
+			 9:00	-	JST	1945 Aug 25
+			11:00	Russia	SAK%sT	1991 Mar 31 2:00s # Sakhalin T.
+			10:00	Russia	SAK%sT	1992 Jan 19 2:00s
+			11:00	Russia	SAK%sT	1997 Mar lastSun 2:00s
+			10:00	Russia	SAK%sT
+#
+# From Oscar van Vlijmen (2003-10-18): [This region consists of]
+# Magadanskaya oblast', Respublika Sakha (Yakutiya).
+# Probably also: Kuril Islands.
+# The Sakha districts are: Abyjskij, Allaikhovskij, Momskij,
+# Nizhnekolymskij, Ojmyakonskij.
+Zone Asia/Magadan	10:03:12 -	LMT	1924 May  2
+			10:00	-	MAGT	1930 Jun 21 # Magadan Time
+			11:00	Russia	MAG%sT	1991 Mar 31 2:00s
+			10:00	Russia	MAG%sT	1992 Jan 19 2:00s
+			11:00	Russia	MAG%sT
+#
+# From Oscar van Vlijmen (2001-08-25): [This region consists of]
+# Kamchatskaya oblast', Koryakskij avtonomnyj okrug.
+#
+# The Zone name should be Asia/Petropavlovsk-Kamchatski, but that's too long.
+Zone Asia/Kamchatka	10:34:36 -	LMT	1922 Nov 10
+			11:00	-	PETT	1930 Jun 21 # P-K Time
+			12:00	Russia	PET%sT	1991 Mar 31 2:00s
+			11:00	Russia	PET%sT	1992 Jan 19 2:00s
+			12:00	Russia	PET%sT
+#
+# Chukotskij avtonomnyj okrug
+Zone Asia/Anadyr	11:49:56 -	LMT	1924 May  2
+			12:00	-	ANAT	1930 Jun 21 # Anadyr Time
+			13:00	Russia	ANA%sT	1982 Apr  1 0:00s
+			12:00	Russia	ANA%sT	1991 Mar 31 2:00s
+			11:00	Russia	ANA%sT	1992 Jan 19 2:00s
+			12:00	Russia	ANA%sT
+
+# Serbia and Montenegro
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Belgrade	1:22:00	-	LMT	1884
+			1:00	-	CET	1941 Apr 18 23:00
+			1:00	C-Eur	CE%sT	1945 May  8  2:00s
+			1:00	1:00	CEST	1945 Sep 16  2:00s
+# Metod Kozelj reports that the legal date of
+# transition to EU rules was 1982-11-27, for all of Yugoslavia at the time.
+# Shanks doesn't give as much detail, so go with Kozelj.
+			1:00	-	CET	1982 Nov 27
+			1:00	EU	CE%sT
+Link Europe/Belgrade Europe/Ljubljana	# Slovenia
+Link Europe/Belgrade Europe/Sarajevo	# Bosnia and Herzegovina
+Link Europe/Belgrade Europe/Skopje	# Macedonia
+Link Europe/Belgrade Europe/Zagreb	# Croatia
+
+# Slovakia
+Link Europe/Prague Europe/Bratislava
+
+# Slovenia
+# see Serbia and Montenegro
+
+# Spain
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+# For 1917-1919 Whitman gives Apr Sat>=1 - Oct Sat>=1; go with Shanks.
+Rule	Spain	1917	only	-	May	 5	23:00s	1:00	S
+Rule	Spain	1917	1919	-	Oct	 6	23:00s	0	-
+Rule	Spain	1918	only	-	Apr	15	23:00s	1:00	S
+Rule	Spain	1919	only	-	Apr	 5	23:00s	1:00	S
+# Whitman gives 1921 Feb 28 - Oct 14; go with Shanks.
+Rule	Spain	1924	only	-	Apr	16	23:00s	1:00	S
+# Whitman gives 1924 Oct 14; go with Shanks.
+Rule	Spain	1924	only	-	Oct	 4	23:00s	0	-
+Rule	Spain	1926	only	-	Apr	17	23:00s	1:00	S
+# Whitman says no DST in 1929; go with Shanks.
+Rule	Spain	1926	1929	-	Oct	Sat>=1	23:00s	0	-
+Rule	Spain	1927	only	-	Apr	 9	23:00s	1:00	S
+Rule	Spain	1928	only	-	Apr	14	23:00s	1:00	S
+Rule	Spain	1929	only	-	Apr	20	23:00s	1:00	S
+# Whitman gives 1937 Jun 16, 1938 Apr 16, 1940 Apr 13; go with Shanks.
+Rule	Spain	1937	only	-	May	22	23:00s	1:00	S
+Rule	Spain	1937	1939	-	Oct	Sat>=1	23:00s	0	-
+Rule	Spain	1938	only	-	Mar	22	23:00s	1:00	S
+Rule	Spain	1939	only	-	Apr	15	23:00s	1:00	S
+Rule	Spain	1940	only	-	Mar	16	23:00s	1:00	S
+# Whitman says no DST 1942-1945; go with Shanks.
+Rule	Spain	1942	only	-	May	 2	22:00s	2:00	M # Midsummer
+Rule	Spain	1942	only	-	Sep	 1	22:00s	1:00	S
+Rule	Spain	1943	1946	-	Apr	Sat>=13	22:00s	2:00	M
+Rule	Spain	1943	only	-	Oct	 3	22:00s	1:00	S
+Rule	Spain	1944	only	-	Oct	10	22:00s	1:00	S
+Rule	Spain	1945	only	-	Sep	30	 1:00	1:00	S
+Rule	Spain	1946	only	-	Sep	30	 0:00	0	-
+Rule	Spain	1949	only	-	Apr	30	23:00	1:00	S
+Rule	Spain	1949	only	-	Sep	30	 1:00	0	-
+Rule	Spain	1974	1975	-	Apr	Sat>=13	23:00	1:00	S
+Rule	Spain	1974	1975	-	Oct	Sun>=1	 1:00	0	-
+Rule	Spain	1976	only	-	Mar	27	23:00	1:00	S
+Rule	Spain	1976	1977	-	Sep	lastSun	 1:00	0	-
+Rule	Spain	1977	1978	-	Apr	 2	23:00	1:00	S
+Rule	Spain	1978	only	-	Oct	 1	 1:00	0	-
+# The following rules are copied from Morocco from 1967 through 1978.
+Rule SpainAfrica 1967	only	-	Jun	 3	12:00	1:00	S
+Rule SpainAfrica 1967	only	-	Oct	 1	 0:00	0	-
+Rule SpainAfrica 1974	only	-	Jun	24	 0:00	1:00	S
+Rule SpainAfrica 1974	only	-	Sep	 1	 0:00	0	-
+Rule SpainAfrica 1976	1977	-	May	 1	 0:00	1:00	S
+Rule SpainAfrica 1976	only	-	Aug	 1	 0:00	0	-
+Rule SpainAfrica 1977	only	-	Sep	28	 0:00	0	-
+Rule SpainAfrica 1978	only	-	Jun	 1	 0:00	1:00	S
+Rule SpainAfrica 1978	only	-	Aug	 4	 0:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Madrid	-0:14:44 -	LMT	1901
+			 0:00	Spain	WE%sT	1946 Sep 30
+			 1:00	Spain	CE%sT	1979
+			 1:00	EU	CE%sT
+Zone	Africa/Ceuta	-0:21:16 -	LMT	1901
+			 0:00	-	WET	1918 May  6 23:00
+			 0:00	1:00	WEST	1918 Oct  7 23:00
+			 0:00	-	WET	1924
+			 0:00	Spain	WE%sT	1929
+			 0:00 SpainAfrica WE%sT 1984 Mar 16
+			 1:00	-	CET	1986
+			 1:00	EU	CE%sT
+Zone	Atlantic/Canary	-1:01:36 -	LMT	1922 Mar # Las Palmas de Gran C.
+			-1:00	-	CANT	1946 Sep 30 1:00 # Canaries Time
+			 0:00	-	WET	1980 Apr  6 0:00s
+			 0:00	1:00	WEST	1980 Sep 28 0:00s
+			 0:00	EU	WE%sT
+# IATA SSIM (1996-09) says the Canaries switch at 2:00u, not 1:00u.
+# Ignore this for now, as the Canaries are part of the EU.
+
+# Sweden
+
+# From Ivan Nilsson (2001-04-13), superseding Shanks:
+#
+# The law "Svensk forfattningssamling 1878, no 14" about standard time in 1879:
+# From the beginning of 1879 (that is 01-01 00:00) the time for all
+# places in the country is "the mean solar time for the meridian at
+# three degrees, or twelve minutes of time, to the west of the
+# meridian of the Observatory of Stockholm".  The law is dated 1878-05-31.
+#
+# The observatory at that time had the meridian 18 degrees 03' 30"
+# eastern longitude = 01:12:14 in time.  Less 12 minutes gives the
+# national standard time as 01:00:14 ahead of GMT....
+#
+# About the beginning of CET in Sweden. The lawtext ("Svensk
+# forfattningssamling 1899, no 44") states, that "from the beginning
+# of 1900... ... the same as the mean solar time for the meridian at
+# the distance of one hour of time from the meridian of the English
+# observatory at Greenwich, or at 12 minutes 14 seconds to the west
+# from the meridian of the Observatory of Stockholm". The law is dated
+# 1899-06-16.  In short: At 1900-01-01 00:00:00 the new standard time
+# in Sweden is 01:00:00 ahead of GMT.
+#
+# 1916: The lawtext ("Svensk forfattningssamling 1916, no 124") states
+# that "1916-05-15 is considered to begin one hour earlier". It is
+# pretty obvious that at 05-14 23:00 the clocks are set to 05-15 00:00....
+# Further the law says, that "1916-09-30 is considered to end one hour later".
+#
+# The laws regulating [DST] are available on the site of the Swedish
+# Parliament beginning with 1985 - the laws regulating 1980/1984 are
+# not available on the site (to my knowledge they are only available
+# in Swedish): <http://www.riksdagen.se/english/work/sfst.asp> (type
+# "sommartid" without the quotes in the field "Fritext" and then click
+# the Sok-button).
+#
+# (2001-05-13):
+#
+# I have now found a newspaper stating that at 1916-10-01 01:00
+# summertime the church-clocks etc were set back one hour to show
+# 1916-10-01 00:00 standard time.  The article also reports that some
+# people thought the switch to standard time would take place already
+# at 1916-10-01 00:00 summer time, but they had to wait for another
+# hour before the event took place.
+#
+# Source: The newspaper "Dagens Nyheter", 1916-10-01, page 7 upper left.
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Europe/Stockholm	1:12:12 -	LMT	1879 Jan  1
+			1:00:14	-	SET	1900 Jan  1	# Swedish Time
+			1:00	-	CET	1916 May 14 23:00
+			1:00	1:00	CEST	1916 Oct  1 01:00
+			1:00	-	CET	1980
+			1:00	EU	CE%sT
+
+# Switzerland
+# From Howse:
+# By the end of the 18th century clocks and watches became commonplace
+# and their performance improved enormously.  Communities began to keep
+# mean time in preference to apparent time -- Geneva from 1780 ....
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+# From Whitman (who writes ``Midnight?''):
+Rule	Swiss	1940	only	-	Nov	 2	0:00	1:00	S
+Rule	Swiss	1940	only	-	Dec	31	0:00	0	-
+# From Shanks:
+Rule	Swiss	1941	1942	-	May	Sun>=1	2:00	1:00	S
+Rule	Swiss	1941	1942	-	Oct	Sun>=1	0:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Zurich	0:34:08 -	LMT	1848 Sep 12
+			0:29:44	-	BMT	1894 Jun # Bern Mean Time
+			1:00	Swiss	CE%sT	1981
+			1:00	EU	CE%sT
+
+# Turkey
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Turkey	1916	only	-	May	 1	0:00	1:00	S
+Rule	Turkey	1916	only	-	Oct	 1	0:00	0	-
+Rule	Turkey	1920	only	-	Mar	28	0:00	1:00	S
+Rule	Turkey	1920	only	-	Oct	25	0:00	0	-
+Rule	Turkey	1921	only	-	Apr	 3	0:00	1:00	S
+Rule	Turkey	1921	only	-	Oct	 3	0:00	0	-
+Rule	Turkey	1922	only	-	Mar	26	0:00	1:00	S
+Rule	Turkey	1922	only	-	Oct	 8	0:00	0	-
+# Whitman gives 1923 Apr 28 - Sep 16 and no DST in 1924-1925; go with Shanks.
+Rule	Turkey	1924	only	-	May	13	0:00	1:00	S
+Rule	Turkey	1924	1925	-	Oct	 1	0:00	0	-
+Rule	Turkey	1925	only	-	May	 1	0:00	1:00	S
+Rule	Turkey	1940	only	-	Jun	30	0:00	1:00	S
+Rule	Turkey	1940	only	-	Oct	 5	0:00	0	-
+Rule	Turkey	1940	only	-	Dec	 1	0:00	1:00	S
+Rule	Turkey	1941	only	-	Sep	21	0:00	0	-
+Rule	Turkey	1942	only	-	Apr	 1	0:00	1:00	S
+# Whitman omits the next two transition and gives 1945 Oct 1; go with Shanks.
+Rule	Turkey	1942	only	-	Nov	 1	0:00	0	-
+Rule	Turkey	1945	only	-	Apr	 2	0:00	1:00	S
+Rule	Turkey	1945	only	-	Oct	 8	0:00	0	-
+Rule	Turkey	1946	only	-	Jun	 1	0:00	1:00	S
+Rule	Turkey	1946	only	-	Oct	 1	0:00	0	-
+Rule	Turkey	1947	1948	-	Apr	Sun>=16	0:00	1:00	S
+Rule	Turkey	1947	1950	-	Oct	Sun>=2	0:00	0	-
+Rule	Turkey	1949	only	-	Apr	10	0:00	1:00	S
+Rule	Turkey	1950	only	-	Apr	19	0:00	1:00	S
+Rule	Turkey	1951	only	-	Apr	22	0:00	1:00	S
+Rule	Turkey	1951	only	-	Oct	 8	0:00	0	-
+Rule	Turkey	1962	only	-	Jul	15	0:00	1:00	S
+Rule	Turkey	1962	only	-	Oct	 8	0:00	0	-
+Rule	Turkey	1964	only	-	May	15	0:00	1:00	S
+Rule	Turkey	1964	only	-	Oct	 1	0:00	0	-
+Rule	Turkey	1970	1972	-	May	Sun>=2	0:00	1:00	S
+Rule	Turkey	1970	1972	-	Oct	Sun>=2	0:00	0	-
+Rule	Turkey	1973	only	-	Jun	 3	1:00	1:00	S
+Rule	Turkey	1973	only	-	Nov	 4	3:00	0	-
+Rule	Turkey	1974	only	-	Mar	31	2:00	1:00	S
+Rule	Turkey	1974	only	-	Nov	 3	5:00	0	-
+Rule	Turkey	1975	only	-	Mar	30	0:00	1:00	S
+Rule	Turkey	1975	1976	-	Oct	lastSun	0:00	0	-
+Rule	Turkey	1976	only	-	Jun	 1	0:00	1:00	S
+Rule	Turkey	1977	1978	-	Apr	Sun>=1	0:00	1:00	S
+Rule	Turkey	1977	only	-	Oct	16	0:00	0	-
+Rule	Turkey	1979	1980	-	Apr	Sun>=1	3:00	1:00	S
+Rule	Turkey	1979	1982	-	Oct	Mon>=11	0:00	0	-
+Rule	Turkey	1981	1982	-	Mar	lastSun	3:00	1:00	S
+Rule	Turkey	1983	only	-	Jul	31	0:00	1:00	S
+Rule	Turkey	1983	only	-	Oct	 2	0:00	0	-
+Rule	Turkey	1985	only	-	Apr	20	0:00	1:00	S
+Rule	Turkey	1985	only	-	Sep	28	0:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Istanbul	1:55:52 -	LMT	1880
+			1:56:56	-	IMT	1910 Oct # Istanbul Mean Time?
+			2:00	Turkey	EE%sT	1978 Oct 15
+			3:00	Turkey	TR%sT	1985 Apr 20 # Turkey Time
+			2:00	Turkey	EE%sT	1986
+			2:00	C-Eur	EE%sT	1991
+			2:00	EU	EE%sT
+Link	Europe/Istanbul	Asia/Istanbul	# Istanbul is in both continents.
+
+# Ukraine
+#
+# From Igor Karpov, who works for the Ukranian Ministry of Justice,
+# via Garrett Wollman (2003-01-27):
+# BTW, I've found the official document on this matter. It's goverment
+# regulations number 509, May 13, 1996. In my poor translation it says:
+# "Time in Ukraine is set to second timezone (Kiev time). Each last Sunday
+# of March at 3am the time is changing to 4am and each last Sunday of
+# October the time at 4am is changing to 3am"
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+# Most of Ukraine since 1970 has been like Kiev.
+Zone Europe/Kiev	2:02:04 -	LMT	1880
+			2:02:04	-	KMT	1924 May  2 # Kiev Mean Time
+			2:00	-	EET	1930 Jun 21
+			3:00	-	MSK	1941 Sep 20
+			1:00	C-Eur	CE%sT	1943 Nov  6
+			3:00	Russia	MSK/MSD	1990
+			3:00	-	MSK	1990 Jul  1 2:00
+			2:00	-	EET	1992
+			2:00	E-Eur	EE%sT	1995
+			2:00	EU	EE%sT
+# Ruthenia used CET 1990/1991.
+Zone Europe/Uzhgorod	1:29:12 -	LMT	1890 Oct
+			1:00	-	CET	1940
+			1:00	C-Eur	CE%sT	1944 Oct
+			1:00	1:00	CEST	1944 Oct 26
+			1:00	-	CET	1945 Jun 29
+			3:00	Russia	MSK/MSD	1990
+			3:00	-	MSK	1990 Jul  1 2:00
+			1:00	-	CET	1991 Mar 31 3:00
+			2:00	-	EET	1992
+			2:00	E-Eur	EE%sT	1995
+			2:00	EU	EE%sT
+# Zaporozh'ye and eastern Lugansk oblasts observed DST 1990/1991.
+# Zaporozh'ye has an apostrophe, but Posix file names can't have apostrophes.
+Zone Europe/Zaporozhye	2:20:40 -	LMT	1880
+			2:20	-	CUT	1924 May  2 # Central Ukraine T
+			2:00	-	EET	1930 Jun 21
+			3:00	-	MSK	1941 Aug 25
+			1:00	C-Eur	CE%sT	1943 Oct 25
+			3:00	Russia	MSK/MSD	1991 Mar 31 2:00
+			2:00	E-Eur	EE%sT	1995
+			2:00	EU	EE%sT
+# Central Crimea used Moscow time 1994/1997.
+Zone Europe/Simferopol	2:16:24 -	LMT	1880
+			2:16	-	SMT	1924 May  2 # Simferopol Mean T
+			2:00	-	EET	1930 Jun 21
+			3:00	-	MSK	1941 Nov
+			1:00	C-Eur	CE%sT	1944 Apr 13
+			3:00	Russia	MSK/MSD	1990
+			3:00	-	MSK	1990 Jul  1 2:00
+			2:00	-	EET	1992
+# From Paul Eggert (1999-11-12):
+# The _Economist_ (1994-05-28, p 45) reports that central Crimea switched
+# from Kiev to Moscow time sometime after the January 1994 elections.
+# Shanks says ``date of change uncertain'', but implies that it happened
+# sometime between the 1994 DST switches.  For now, guess it changed in May.
+			2:00	E-Eur	EE%sT	1994 May
+# From IATA SSIM (1994/1997), which also says that Kerch is still like Kiev.
+			3:00	E-Eur	MSK/MSD	1996 Mar 31 3:00s
+			3:00	1:00	MSD	1996 Oct 27 3:00s
+# IATA SSIM (1997-09) says Crimea switched to EET/EEST.
+# Assume it happened in March by not changing the clocks.
+			3:00	Russia	MSK/MSD	1997
+			3:00	-	MSK	1997 Mar lastSun 1:00u
+			2:00	EU	EE%sT
+
+###############################################################################
+
+# One source shows that Bulgaria, Cyprus, Finland, and Greece observe DST from
+# the last Sunday in March to the last Sunday in September in 1986.
+# The source shows Romania changing a day later than everybody else.
+#
+# According to Bernard Sieloff's source, Poland is in the MET time zone but
+# uses the WE DST rules.  The Western USSR uses EET+1 and ME DST rules.
+# Bernard Sieloff's source claims Romania switches on the same day, but at
+# 00:00 standard time (i.e., 01:00 DST).  It also claims that Turkey
+# switches on the same day, but switches on at 01:00 standard time
+# and off at 00:00 standard time (i.e., 01:00 DST)
+
+# ...
+# Date: Wed, 28 Jan 87 16:56:27 -0100
+# From: Tom Hofmann
+# ...
+#
+# ...the European time rules are...standardized since 1981, when
+# most European coun[tr]ies started DST.  Before that year, only
+# a few countries (UK, France, Italy) had DST, each according
+# to own national rules.  In 1981, however, DST started on
+# 'Apr firstSun', and not on 'Mar lastSun' as in the following
+# years...
+# But also since 1981 there are some more national exceptions
+# than listed in 'europe': Switzerland, for example, joined DST
+# one year later, Denmark ended DST on 'Oct 1' instead of 'Sep
+# lastSun' in 1981---I don't know how they handle now.
+#
+# Finally, DST ist always from 'Apr 1' to 'Oct 1' in the
+# Soviet Union (as far as I know).
+#
+# Tom Hofmann, Scientific Computer Center, CIBA-GEIGY AG,
+# 4002 Basle, Switzerland
+# ...
+
+# ...
+# Date: Wed, 4 Feb 87 22:35:22 +0100
+# From: Dik T. Winter
+# ...
+#
+# The information from Tom Hofmann is (as far as I know) not entirely correct.
+# After a request from chongo at amdahl I tried to retrieve all information
+# about DST in Europe.  I was able to find all from about 1969.
+#
+# ...standardization on DST in Europe started in about 1977 with switches on
+# first Sunday in April and last Sunday in September...
+# In 1981 UK joined Europe insofar that
+# the starting day for both shifted to last Sunday in March.  And from 1982
+# the whole of Europe used DST, with switch dates April 1 and October 1 in
+# the Sov[i]et Union.  In 1985 the SU reverted to standard Europe[a]n switch
+# dates...
+#
+# It should also be remembered that time-zones are not constants; e.g.
+# Portugal switched in 1976 from MET (or CET) to WET with DST...
+# Note also that though there were rules for switch dates not
+# all countries abided to these dates, and many individual deviations
+# occurred, though not since 1982 I believe.  Another note: it is always
+# assumed that DST is 1 hour ahead of normal time, this need not be the
+# case; at least in the Netherlands there have been times when DST was 2 hours
+# in advance of normal time.
+#
+# ...
+# dik t. winter, cwi, amsterdam, nederland
+# ...
+
+# From Bob Devine (1988-01-28):
+# ...
+# Greece: Last Sunday in April to last Sunday in September (iffy on dates).
+# Since 1978.  Change at midnight.
+# ...
+# Monaco: has same DST as France.
+# ...
diff --git a/JodaTime/src/java/org/joda/time/tz/src/northamerica b/JodaTime/src/java/org/joda/time/tz/src/northamerica
index 93389c3e1..c290caf67 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/northamerica
+++ b/JodaTime/src/java/org/joda/time/tz/src/northamerica
@@ -1,2052 +1,2052 @@
-# @(#)northamerica	7.74
-# also includes Central America and the Caribbean
-
-# This data is by no means authoritative; if you think you know better,
-# go ahead and edit the file (and please send any changes to
-# tz@elsie.nci.nih.gov for general use in the future).
-
-# From Paul Eggert (1999-03-22):
-# A reliable and entertaining source about time zones is
-# Derek Howse, Greenwich time and longitude, Philip Wilson Publishers (1997).
-
-###############################################################################
-
-# United States
-
-# From Paul Eggert (1999-03-31):
-# Howse writes (pp 121-125) that time zones were invented by
-# Professor Charles Ferdinand Dowd (1825-1904),
-# Principal of Temple Grove Ladies' Seminary (Saratoga Springs, NY).
-# His pamphlet ``A System of National Time for Railroads'' (1870)
-# was the result of his proposals at the Convention of Railroad Trunk Lines
-# in New York City (1869-10).  His 1870 proposal was based on Washington, DC,
-# but in 1872-05 he moved the proposed origin to Greenwich.
-# His proposal was adopted by the railroads on 1883-11-18 at 12:00,
-# and the most of the country soon followed suit.
-
-# From Paul Eggert (2005-04-16):
-# That 1883 transition occurred at 12:00 new time, not at 12:00 old time.
-# See p 46 of David Prerau, Seize the daylight, Thunder's Mouth Press (2005).
-
-# From Paul Eggert (1995-12-19):
-# A good source for time zone historical data in the US is
-# Thomas G. Shanks, The American Atlas (5th edition),
-# San Diego: ACS Publications, Inc. (1991).
-# Make sure you have the errata sheet; the book is somewhat useless without it.
-# It is the source for most of the pre-1991 US and Puerto Rico entries below.
-
-# From Paul Eggert (2001-03-06):
-# Daylight Saving Time was first suggested as a joke by Benjamin Franklin
-# in his whimsical essay ``An Economical Project for Diminishing the Cost
-# of Light'' published in the Journal de Paris (1784-04-26).
-# Not everyone is happy with the results:
-#
-#	I don't really care how time is reckoned so long as there is some
-#	agreement about it, but I object to being told that I am saving
-#	daylight when my reason tells me that I am doing nothing of the kind.
-#	I even object to the implication that I am wasting something
-#	valuable if I stay in bed after the sun has risen.  As an admirer
-#	of moonlight I resent the bossy insistence of those who want to
-#	reduce my time for enjoying it.  At the back of the Daylight Saving
-#	scheme I detect the bony, blue-fingered hand of Puritanism, eager
-#	to push people into bed earlier, and get them up earlier, to make
-#	them healthy, wealthy and wise in spite of themselves.
-#
-#	-- Robertson Davies, The diary of Samuel Marchbanks,
-#	   Clarke, Irwin (1947), XIX, Sunday
-#
-# For more about the first ten years of DST in the United States, see
-# Robert Garland's <a href="http://www.clpgh.org/exhibit/dst.html">
-# Ten years of daylight saving from the Pittsburgh standpoint
-# (Carnegie Library of Pittsburgh, 1927)</a>.
-#
-# Shanks says that DST was called "War Time" in the US in 1918 and 1919.
-# However, DST was imposed by the Standard Time Act of 1918, which
-# was the first nationwide legal time standard, and apparently
-# time was just called "Standard Time" or "Daylight Saving Time".
-
-# From Arthur David Olson:
-# US Daylight Saving Time ended on the last Sunday of *October* in 1974.
-# See, for example, the front page of the Saturday, 1974-10-26
-# and Sunday, 1974-10-27 editions of the Washington Post.
-
-# From Arthur David Olson:
-# Before the Uniform Time Act of 1966 took effect in 1967, observance of
-# Daylight Saving Time in the US was by local option, except during wartime.
-
-# From Arthur David Olson (2000-09-25):
-# Last night I heard part of a rebroadcast of a 1945 Arch Oboler radio drama.
-# In the introduction, Oboler spoke of "Eastern Peace Time."
-# An AltaVista search turned up
-# <a href="http://rowayton.org/rhs/hstaug45.html">:
-# "When the time is announced over the radio now, it is 'Eastern Peace
-# Time' instead of the old familiar 'Eastern War Time.'  Peace is wonderful."
-# </a> (August 1945) by way of confirmation.
-
-# From Joseph Gallant <notquite@hotmail.com>, citing
-# George H. Douglas, _The Early Days of Radio Broadcasting_ (1987):
-# At 7 P.M. (Eastern War Time) [on 1945-08-14], the networks were set
-# to switch to London for Attlee's address, but the American people
-# never got to hear his speech live. According to one press account,
-# CBS' Bob Trout was first to announce the word of Japan's surrender,
-# but a few seconds later, NBC, ABC and Mutual also flashed the word
-# of surrender, all of whom interrupting the bells of Big Ben in
-# London which were to precede Mr. Attlee's speech.
-
-# From Paul Eggert (2003-02-09): It was Robert St John, not Bob Trout.  From
-# Myrna Oliver's obituary of St John on page B16 of today's Los Angeles Times:
-#
-# ... a war-weary U.S. clung to radios, awaiting word of Japan's surrender.
-# Any announcement from Asia would reach St. John's New York newsroom on a
-# wire service teletype machine, which had prescribed signals for major news.
-# Associated Press, for example, would ring five bells before spewing out
-# typed copy of an important story, and 10 bells for news "of transcendental
-# importance."
-#
-# On Aug. 14, stalling while talking steadily into the NBC networks' open
-# microphone, St. John heard five bells and waited only to hear a sixth bell,
-# before announcing confidently: "Ladies and gentlemen, World War II is over.
-# The Japanese have agreed to our surrender terms."
-#
-# He had scored a 20-second scoop on other broadcasters.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	US	1918	1919	-	Mar	lastSun	2:00	1:00	D
-Rule	US	1918	1919	-	Oct	lastSun	2:00	0	S
-Rule	US	1942	only	-	Feb	9	2:00	1:00	W # War
-Rule	US	1945	only	-	Aug	14	23:00u	1:00	P # Peace
-Rule	US	1945	only	-	Sep	30	2:00	0	S
-Rule	US	1967	max	-	Oct	lastSun	2:00	0	S
-Rule	US	1967	1973	-	Apr	lastSun	2:00	1:00	D
-Rule	US	1974	only	-	Jan	6	2:00	1:00	D
-Rule	US	1975	only	-	Feb	23	2:00	1:00	D
-Rule	US	1976	1986	-	Apr	lastSun	2:00	1:00	D
-Rule	US	1987	max	-	Apr	Sun>=1	2:00	1:00	D
-# <a href="http://thomas.loc.gov/cgi-bin/bdquery/z?d106:h.r.00177:">
-# H.R.177
-# </a> (introduced 1999-01-06) would change April to March in the above rule.
-
-# From Bob Devine (1988-01-28):
-# ...Alaska (and Hawaii) had the timezone names changed in 1967.
-#    old			 new
-#    Pacific Standard Time(PST)  -same-
-#    Yukon Standard Time(YST)    -same-
-#    Central Alaska S.T. (CAT)   Alaska-Hawaii St[an]dard Time (AHST)
-#    Nome Standard Time (NT)     Bering Standard Time (BST)
-#
-# ...Alaska's timezone lines were redrawn in 1983 to give only 2 tz.
-#    The YST zone now covers nearly all of the state, AHST just part
-#    of the Aleutian islands.   No DST.
-
-# From Paul Eggert (1995-12-19):
-# The tables below use `NST', not `NT', for Nome Standard Time.
-# I invented `CAWT' for Central Alaska War Time.
-
-# From U. S. Naval Observatory (1989-01-19):
-# USA  EASTERN       5 H  BEHIND UTC    NEW YORK, WASHINGTON
-# USA  EASTERN       4 H  BEHIND UTC    APR 3 - OCT 30
-# USA  CENTRAL       6 H  BEHIND UTC    CHICAGO, HOUSTON
-# USA  CENTRAL       5 H  BEHIND UTC    APR 3 - OCT 30
-# USA  MOUNTAIN      7 H  BEHIND UTC    DENVER
-# USA  MOUNTAIN      6 H  BEHIND UTC    APR 3 - OCT 30
-# USA  PACIFIC       8 H  BEHIND UTC    L.A., SAN FRANCISCO
-# USA  PACIFIC       7 H  BEHIND UTC    APR 3 - OCT 30
-# USA  ALASKA STD    9 H  BEHIND UTC    MOST OF ALASKA     (AKST)
-# USA  ALASKA STD    8 H  BEHIND UTC    APR 3 - OCT 30 (AKDT)
-# USA  ALEUTIAN     10 H  BEHIND UTC    ISLANDS WEST OF 170W
-# USA  - " -         9 H  BEHIND UTC    APR 3 - OCT 30
-# USA  HAWAII       10 H  BEHIND UTC
-# USA  BERING       11 H  BEHIND UTC    SAMOA, MIDWAY
-
-# From Arthur David Olson (1989-01-21):
-# The above dates are for 1988.
-# Note the "AKST" and "AKDT" abbreviations, the claim that there's
-# no DST in Samoa, and the claim that there is DST in Alaska and the
-# Aleutians.
-
-# From Arthur David Olson (1988-02-13):
-# Legal standard time zone names, from United States Code (1982 Edition and
-# Supplement III), Title 15, Chapter 6, Section 260 and forward.  First, names
-# up to 1967-04-01 (when most provisions of the Uniform Time Act of 1966
-# took effect), as explained in sections 263 and 261:
-#	(none)
-#	United States standard eastern time
-#	United States standard mountain time
-#	United States standard central time
-#	United States standard Pacific time
-#	(none)
-#	United States standard Alaska time
-#	(none)
-# Next, names from 1967-04-01 until 1983-11-30 (the date for
-# public law 98-181):
-#	Atlantic standard time
-#	eastern standard time
-#	central standard time
-#	mountain standard time
-#	Pacific standard time
-#	Yukon standard time
-#	Alaska-Hawaii standard time
-#	Bering standard time
-# And after 1983-11-30:
-#	Atlantic standard time
-#	eastern standard time
-#	central standard time
-#	mountain standard time
-#	Pacific standard time
-#	Alaska standard time
-#	Hawaii-Aleutian standard time
-#	Samoa standard time
-# The law doesn't give abbreviations.
-#
-# From Paul Eggert (2000-01-08), following a heads-up from Rives McDow:
-# Public law 106-564 (2000-12-23) introduced the abbreviation
-# "Chamorro Standard Time" for time in Guam and the Northern Marianas.
-# See the file "australasia".
-
-
-# US eastern time, represented by New York
-
-# Connecticut, Delaware, District of Columbia, most of Florida,
-# Georgia, southeast Indiana (Clark, Dearborn, Floyd, Harrison, and
-# Ohio counties), eastern Kentucky, Maine, Maryland, Massachusetts,
-# New Hampshire, New Jersey, New York, North Carolina, Ohio,
-# Pennsylvania, Rhode Island, South Carolina, eastern Tennessee,
-# Vermont, Virginia, West Virginia
-
-# From Dave Cantor (2004-11-02):
-# Early this summer I had the occasion to visit the Mount Washington
-# Observatory weather station atop (of course!) Mount Washington [, NH]....
-# One of the staff members said that the station was on Eastern Standard Time
-# and didn't change their clocks for Daylight Saving ... so that their
-# reports will always have times which are 5 hours behind UTC.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
-Rule	NYC	1920	only	-	Mar	lastSun	2:00	1:00	D
-Rule	NYC	1920	only	-	Oct	lastSun	2:00	0	S
-Rule	NYC	1921	1966	-	Apr	lastSun	2:00	1:00	D
-Rule	NYC	1921	1954	-	Sep	lastSun	2:00	0	S
-Rule	NYC	1955	1966	-	Oct	lastSun	2:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/New_York	-4:56:02 -	LMT	1883 Nov 18 12:03:58
-			-5:00	US	E%sT	1920
-			-5:00	NYC	E%sT	1942
-			-5:00	US	E%sT	1946
-			-5:00	NYC	E%sT	1967
-			-5:00	US	E%sT
-
-# US central time, represented by Chicago
-
-# Alabama, Arkansas, Florida panhandle (Bay, Calhoun, Escambia,
-# Gulf, Holmes, Jackson, Okaloosa, Santa Rosa, Walton, and
-# Washington counties), Illinois, western Indiana
-# (Gibson, Jasper, Lake, LaPorte, Newton, Porter, Posey, Spencer,
-# Vanderburgh, and Warrick counties), Iowa, most of Kansas, western
-# Kentucky, Louisiana, Minnesota, Mississippi, Missouri, eastern
-# Nebraska, eastern North Dakota, Oklahoma, eastern South Dakota,
-# western Tennessee, most of Texas, Wisconsin
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
-Rule	Chicago	1920	only	-	Jun	13	2:00	1:00	D
-Rule	Chicago	1920	1921	-	Oct	lastSun	2:00	0	S
-Rule	Chicago	1921	only	-	Mar	lastSun	2:00	1:00	D
-Rule	Chicago	1922	1966	-	Apr	lastSun	2:00	1:00	D
-Rule	Chicago	1922	1954	-	Sep	lastSun	2:00	0	S
-Rule	Chicago	1955	1966	-	Oct	lastSun	2:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Chicago	-5:50:36 -	LMT	1883 Nov 18 12:09:24
-			-6:00	US	C%sT	1920
-			-6:00	Chicago	C%sT	1936 Mar  1 2:00
-			-5:00	-	EST	1936 Nov 15 2:00
-			-6:00	Chicago	C%sT	1942
-			-6:00	US	C%sT	1946
-			-6:00	Chicago	C%sT	1967
-			-6:00	US	C%sT
-# Oliver County, ND switched from mountain to central time on 1992-10-25.
-Zone America/North_Dakota/Center -6:45:12 - LMT	1883 Nov 18 12:14:48
-			-7:00	US	M%sT	1992 Oct 25 02:00
-			-6:00	US	C%sT
-
-# US mountain time, represented by Denver
-#
-# Colorado, far western Kansas, Montana, western
-# Nebraska, Nevada border (Jackpot, Owyhee, and Mountain City),
-# New Mexico, southwestern North Dakota, far eastern Oregon,
-# western South Dakota, far western Texas (El Paso County, Hudspeth County,
-# and Pine Springs and Nickel Creek in Culberson County), Utah, Wyoming
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
-Rule	Denver	1920	1921	-	Mar	lastSun	2:00	1:00	D
-Rule	Denver	1920	only	-	Oct	lastSun	2:00	0	S
-Rule	Denver	1921	only	-	May	22	2:00	0	S
-Rule	Denver	1965	1966	-	Apr	lastSun	2:00	1:00	D
-Rule	Denver	1965	1966	-	Oct	lastSun	2:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Denver	-6:59:56 -	LMT	1883 Nov 18 12:00:04
-			-7:00	US	M%sT	1920
-			-7:00	Denver	M%sT	1942
-			-7:00	US	M%sT	1946
-			-7:00	Denver	M%sT	1967
-			-7:00	US	M%sT
-
-# US Pacific time, represented by Los Angeles
-#
-# California, northern Idaho (Benewah, Bonner, Boundary, Clearwater,
-# Idaho, Kootenai, Latah, Lewis, Nez Perce, and Shoshone counties),
-# most of Nevada, most of Oregon, and Washington
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
-Rule	CA	1948	only	-	Mar	14	2:00	1:00	D
-Rule	CA	1949	only	-	Jan	 1	2:00	0	S
-Rule	CA	1950	1966	-	Apr	lastSun	2:00	1:00	D
-Rule	CA	1950	1961	-	Sep	lastSun	2:00	0	S
-Rule	CA	1962	1966	-	Oct	lastSun	2:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Los_Angeles -7:52:58 -	LMT	1883 Nov 18 12:07:02
-			-8:00	US	P%sT	1946
-			-8:00	CA	P%sT	1967
-			-8:00	US	P%sT
-
-# Alaska
-# AK%sT is the modern abbreviation for -9:00 per USNO.
-#
-# From Paul Eggert (2001-05-30):
-# Howse writes that Alaska switched from the Julian to the Gregorian calendar,
-# and from east-of-GMT to west-of-GMT days, when the US bought it from Russia.
-# This was on 1867-10-18, a Friday; the previous day was 1867-10-06 Julian,
-# also a Friday.  Include only the time zone part of this transition,
-# ignoring the switch from Julian to Gregorian, since we can't represent
-# the Julian calendar.
-#
-# As far as we know, none of the exact locations mentioned below were
-# permanently inhabited in 1867 by anyone using either calendar.
-# (Yakutat was colonized by the Russians in 1799, but the settlement
-# was destroyed in 1805 by a Yakutat-kon war party.)  However, there
-# were nearby inhabitants in some cases and for our purposes perhaps
-# it's best to simply use the official transition.
-#
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Juneau	 15:02:19 -	LMT	1867 Oct 18
-			 -8:57:41 -	LMT	1900 Aug 20 12:00
-			 -8:00	-	PST	1942
-			 -8:00	US	P%sT	1946
-			 -8:00	-	PST	1969
-			 -8:00	US	P%sT	1983 Oct 30 2:00
-			 -9:00	US	Y%sT	1983 Nov 30
-			 -9:00	US	AK%sT
-Zone America/Yakutat	 14:41:05 -	LMT	1867 Oct 18
-			 -9:18:55 -	LMT	1900 Aug 20 12:00
-			 -9:00	-	YST	1942
-			 -9:00	US	Y%sT	1946
-			 -9:00	-	YST	1969
-			 -9:00	US	Y%sT	1983 Nov 30
-			 -9:00	US	AK%sT
-Zone America/Anchorage	 14:00:24 -	LMT	1867 Oct 18
-			 -9:59:36 -	LMT	1900 Aug 20 12:00
-			-10:00	-	CAT	1942
-			-10:00	US	CAT/CAWT 1946
-			-10:00	-	CAT	1967 Apr
-			-10:00	-	AHST	1969
-			-10:00	US	AH%sT	1983 Oct 30 2:00
-			 -9:00	US	Y%sT	1983 Nov 30
-			 -9:00	US	AK%sT
-Zone America/Nome	 12:58:21 -	LMT	1867 Oct 18
-			-11:01:38 -	LMT	1900 Aug 20 12:00
-			-11:00	-	NST	1942
-			-11:00	US	N%sT	1946
-			-11:00	-	NST	1967 Apr
-			-11:00	-	BST	1969
-			-11:00	US	B%sT	1983 Oct 30 2:00
-			 -9:00	US	Y%sT	1983 Nov 30
-			 -9:00	US	AK%sT
-Zone America/Adak	 12:13:21 -	LMT	1867 Oct 18
-			-11:46:38 -	LMT	1900 Aug 20 12:00
-			-11:00	-	NST	1942
-			-11:00	US	N%sT	1946
-			-11:00	-	NST	1967 Apr
-			-11:00	-	BST	1969
-			-11:00	US	B%sT	1983 Oct 30 2:00
-			-10:00	US	AH%sT	1983 Nov 30
-			-10:00	US	HA%sT
-# The following switches don't quite make our 1970 cutoff.
-#
-# Shanks writes that part of southwest Alaska (e.g. Aniak)
-# switched from -11:00 to -10:00 on 1968-09-22 at 02:00,
-# and another part (e.g. Akiak) made the same switch five weeks later.
-#
-# From David Flater (2004-11-09):
-# In e-mail, 2004-11-02, Ray Hudson, historian/liaison to the Unalaska
-# Historic Preservation Commission, provided this information, which
-# suggests that Unalaska deviated from statutory time from early 1967
-# possibly until 1983:
-#
-#  Minutes of the Unalaska City Council Meeting, January 10, 1967:
-#  "Except for St. Paul and Akutan, Unalaska is the only important
-#  location not on Alaska Standard Time.  The following resolution was
-#  made by William Robinson and seconded by Henry Swanson:  Be it
-#  resolved that the City of Unalaska hereby goes to Alaska Standard
-#  Time as of midnight Friday, January 13, 1967 (1 A.M. Saturday,
-#  January 14, Alaska Standard Time.)  This resolution was passed with
-#  three votes for and one against."
-
-# Hawaii
-#
-# From Arthur David Olson:
-# And then there's Hawaii.
-# DST was observed for one day in 1933;
-# standard time was changed by half an hour in 1947;
-# it's always standard as of 1986.
-#
-# From Paul Eggert:
-# Shanks says the 1933 experiment lasted for three weeks.  Go with Shanks.
-#
-Zone Pacific/Honolulu	-10:31:26 -	LMT	1900 Jan  1 12:00
-			-10:30	-	HST	1933 Apr 30 2:00
-			-10:30	1:00	HDT	1933 May 21 2:00
-			-10:30	US	H%sT	1947 Jun  8 2:00
-			-10:00	-	HST
-
-# Now we turn to US areas that have diverged from the consensus since 1970.
-
-# Arizona mostly uses MST.
-
-# From Paul Eggert (2002-10-20):
-#
-# The information in the rest of this paragraph is derived from the
-# <a href="http://www.dlapr.lib.az.us/links/daylight.htm">
-# Daylight Saving Time web page (2002-01-23)</a> maintained by the
-# Arizona State Library, Archives and Public Records.
-# Between 1944-01-01 and 1944-04-01 the State of Arizona used standard
-# time, but by federal law railroads, airlines, bus lines, military
-# personnel, and some engaged in interstate commerce continued to
-# observe war (i.e., daylight saving) time.  The 1944-03-17 Phoenix
-# Gazette says that was the date the law changed, and that 04-01 was
-# the date the state's clocks would change.  In 1945 the State of
-# Arizona used standard time all year, again with exceptions only as
-# mandated by federal law.  Arizona observed DST in 1967, but Arizona
-# Laws 1968, ch. 183 (effective 1968-03-21) repealed DST.
-#
-# Shanks says the 1944 experiment came to an end on 1944-03-17.
-# Go with the Arizona State Library instead.
-
-Zone America/Phoenix	-7:28:18 -	LMT	1883 Nov 18 11:31:42
-			-7:00	US	M%sT	1944 Jan  1 00:01
-			-7:00	-	MST	1944 Apr  1 00:01
-			-7:00	US	M%sT	1944 Oct  1 00:01
-			-7:00	-	MST	1967
-			-7:00	US	M%sT	1968 Mar 21
-			-7:00	-	MST
-# From Arthur David Olson (1988-02-13):
-# A writer from the Inter Tribal Council of Arizona, Inc.,
-# notes in private correspondence dated 1987-12-28 that "Presently, only the
-# Navajo Nation participates in the Daylight Saving Time policy, due to its
-# large size and location in three states."  (The "only" means that other
-# tribal nations don't use DST.)
-
-Link America/Denver America/Shiprock
-
-# Southern Idaho (Ada, Adams, Bannock, Bear Lake, Bingham, Blaine,
-# Boise, Bonneville, Butte, Camas, Canyon, Caribou, Cassia, Clark,
-# Custer, Elmore, Franklin, Fremont, Gem, Gooding, Jefferson, Jerome,
-# Lemhi, Lincoln, Madison, Minidoka, Oneida, Owyhee, Payette, Power,
-# Teton, Twin Falls, Valley, Washington counties) and eastern Oregon
-# switched four weeks late in 1974.
-#
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Boise	-7:44:49 -	LMT	1883 Nov 18 12:15:11
-			-8:00	US	P%sT	1923 May 13 2:00
-			-7:00	US	M%sT	1974
-			-7:00	-	MST	1974 Feb  3 2:00
-			-7:00	US	M%sT
-
-# Indiana
-#
-# For a map of Indiana's time zone regions, see:
-# <a href="http://www.mccsc.edu/time.html">
-# What time is it in Indiana?
-# </a> (1999-04-06)
-#
-# From Paul Eggert (1995-12-19):
-# Indiana generally observes either EST all year, or CST/CDT,
-# but areas near Cincinnati and Louisville use those cities' timekeeping
-# and in 1969 and 1970 the whole state observed daylight time;
-# and there are other exceptions as noted below.
-# Shanks partitions Indiana into 345 regions, each with its own time history,
-# and writes ``Even newspaper reports present contradictory information.''
-# Fortunately, most of the complexity occurred before our cutoff date of 1970.
-#
-# Since 1970, EST-only Indiana has been like America/Indianapolis,
-# with exceptions noted below for Crawford, Starke, and Switzerland counties.
-# The parts of Indiana not listed below have been like America/Chicago,
-# America/Louisville, or America/New_York.
-#
-# Other than Indianapolis, the Indiana place names are so nondescript
-# that they would be ambiguous if we left them at the `America' level.
-# So we reluctantly put them all in a subdirectory `America/Indiana'.
-#
-# Most of EST-only Indiana last observed DST in 1970.
-
-# From Paul Eggert (2001-03-06), following a tip by Markus Kuhn:
-# Pam Belluck reported in the New York Times (2001-01-31) that the
-# Indiana Legislature is considering a bill to adopt DST statewide.
-# Her article mentioned Vevay, whose post office observes a different
-# time zone from Danner's Hardware across the street.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
-Rule Indianapolis 1941	only	-	Jun	22	2:00	1:00	D
-Rule Indianapolis 1941	1954	-	Sep	lastSun	2:00	0	S
-Rule Indianapolis 1946	1954	-	Apr	lastSun	2:00	1:00	D
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Indianapolis -5:44:38 - LMT 1883 Nov 18 12:15:22
-			-6:00	US	C%sT	1920
-			-6:00 Indianapolis C%sT	1942
-			-6:00	US	C%sT	1946
-			-6:00 Indianapolis C%sT	1955 Apr 24 2:00
-			-5:00	-	EST	1957 Sep 29 2:00
-			-6:00	-	CST	1958 Apr 27 2:00
-			-5:00	-	EST	1969
-			-5:00	US	E%sT	1971
-			-5:00	-	EST
-Link America/Indianapolis America/Indiana/Indianapolis
-#
-# Part of Crawford County, Indiana, last observed DST in 1975,
-# and left its clocks alone in 1974.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
-Rule	Marengo	1951	only	-	Apr	lastSun	2:00	1:00	D
-Rule	Marengo	1951	only	-	Sep	lastSun	2:00	0	S
-Rule	Marengo	1954	1960	-	Apr	lastSun	2:00	1:00	D
-Rule	Marengo	1954	1960	-	Sep	lastSun	2:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Indiana/Marengo -5:45:23 -	LMT	1883 Nov 18 12:14:37
-			-6:00	US	C%sT	1951
-			-6:00	Marengo	C%sT	1961 Apr 30 2:00
-			-5:00	-	EST	1969
-			-5:00	US	E%sT	1974 Jan  6 2:00
-			-6:00	1:00	CDT	1974 Oct 27 2:00
-			-5:00	US	E%sT	1976
-			-5:00	-	EST
-#
-# Starke County, Indiana
-# From Arthur David Olson (1991-10-28):
-# An article on page A3 of the Sunday, 1991-10-27 Washington Post
-# notes that Starke County switched from Central time to Eastern time as of
-# 1991-10-27.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
-Rule	Starke	1947	1961	-	Apr	lastSun	2:00	1:00	D
-Rule	Starke	1947	1954	-	Sep	lastSun	2:00	0	S
-Rule	Starke	1955	1956	-	Oct	lastSun	2:00	0	S
-Rule	Starke	1957	1958	-	Sep	lastSun	2:00	0	S
-Rule	Starke	1959	1961	-	Oct	lastSun	2:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Indiana/Knox -5:46:30 -	LMT	1883 Nov 18 12:13:30
-			-6:00	US	C%sT	1947
-			-6:00	Starke	C%sT	1962 Apr 29 2:00
-			-5:00	-	EST	1963 Oct 27 2:00
-			-6:00	US	C%sT	1991 Oct 27 2:00
-			-5:00	-	EST
-#
-# Switzerland County, Indiana, last observed DST in 1972.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Indiana/Vevay -5:40:16 -	LMT	1883 Nov 18 12:19:44
-			-6:00	US	C%sT	1954 Apr 25 2:00
-			-5:00	-	EST	1969
-			-5:00	US	E%sT	1973
-			-5:00	-	EST
-
-# Part of Kentucky left its clocks alone in 1974.
-# This also includes a part of Indiana immediately adjacent to Louisville.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
-Rule Louisville	1921	only	-	May	1	2:00	1:00	D
-Rule Louisville	1921	only	-	Sep	1	2:00	0	S
-Rule Louisville	1941	1961	-	Apr	lastSun	2:00	1:00	D
-Rule Louisville	1941	only	-	Sep	lastSun	2:00	0	S
-Rule Louisville	1946	only	-	Jun	2	2:00	0	S
-Rule Louisville	1950	1955	-	Sep	lastSun	2:00	0	S
-Rule Louisville	1956	1960	-	Oct	lastSun	2:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Louisville	-5:43:02 -	LMT	1883 Nov 18 12:16:58
-			-6:00	US	C%sT	1921
-			-6:00 Louisville C%sT	1942
-			-6:00	US	C%sT	1946
-			-6:00 Louisville C%sT	1961 Jul 23 2:00
-			-5:00	-	EST	1968
-			-5:00	US	E%sT	1974 Jan  6 2:00
-			-6:00	1:00	CDT	1974 Oct 27 2:00
-			-5:00	US	E%sT
-Link America/Louisville America/Kentucky/Louisville
-#
-# Wayne, Clinton, and Russell Counties, Kentucky
-#
-# From
-# <a href="http://www.lake-cumberland.com/life/archive/news990129time.shtml">
-# Lake Cumberland LIFE
-# </a> (1999-01-29) via WKYM-101.7:
-# Clinton County has joined Wayne County in asking the DoT to change from
-# the Central to the Eastern time zone....  The Wayne County government made
-# the same request in December.  And while Russell County officials have not
-# taken action, the majority of respondents to a poll conducted there in
-# August indicated they would like to change to "fast time" also.
-# The three Lake Cumberland counties are the farthest east of any U.S.
-# location in the Central time zone.
-#
-# From Rich Wales (2000-08-29):
-# After prolonged debate, and despite continuing deep differences of opinion,
-# Wayne County (central Kentucky) is switching from Central (-0600) to Eastern
-# (-0500) time.  They won't "fall back" this year.  See Sara Shipley,
-# The difference an hour makes, Nando Times (2000-08-29 15:33 -0400).
-#
-# From Paul Eggert (2001-07-16):
-# The final rule was published in the
-# <a href="http://frwebgate.access.gpo.gov/cgi-bin/getdoc.cgi?dbname=2000_register&docid=fr17au00-22">
-# Federal Register 65, 160 (2000-08-17), page 50154-50158.
-# </a>
-#
-Zone America/Kentucky/Monticello -5:39:24 - LMT	1883 Nov 18 12:20:36
-			-6:00	US	C%sT	1946
-			-6:00	-	CST	1968
-			-6:00	US	C%sT	2000 Oct 29  2:00
-			-5:00	US	E%sT
-
-
-# From Rives McDow (2000-08-30):
-# Here ... are all the changes in the US since 1985.
-# Kearny County, KS (put all of county on central;
-#	previously split between MST and CST) ... 1990-10
-# Starke County, IN (from CST to EST) ... 1991-10
-# Oliver County, ND (from MST to CST) ... 1992-10
-# West Wendover, NV (from PST TO MST) ... 1999-10
-# Wayne County, KY (from CST to EST) ... 2000-10
-#
-# From Paul Eggert (2001-07-17):
-# We don't know where the line used to be within Kearny County, KS,
-# so omit that change for now.
-# See America/Indiana/Knox for the Starke County, IN change.
-# See America/North_Dakota/Center for the Oliver County, ND change.
-# West Wendover, NV officially switched from Pacific to mountain time on
-# 1999-10-31.  See the
-# <a href="http://frwebgate.access.gpo.gov/cgi-bin/getdoc.cgi?dbname=1999_register&docid=fr21oc99-15">
-# Federal Register 64, 203 (1999-10-21), page 56705-56707.
-# </a>
-# However, the Federal Register says that West Wendover already operated
-# on mountain time, and the rule merely made this official;
-# hence a separate tz entry is not needed.
-
-# Michigan
-#
-# From Bob Devine (1988-01-28):
-# Michigan didn't observe DST from 1968 to 1973.
-#
-# From Paul Eggert (1999-03-31):
-# Shanks writes that Michigan started using standard time on 1885-09-18,
-# but Howse writes (pp 124-125, referring to Popular Astronomy, 1901-01)
-# that Detroit kept
-#
-#	local time until 1900 when the City Council decreed that clocks should
-#	be put back twenty-eight minutes to Central Standard Time.  Half the
-#	city obeyed, half refused.  After considerable debate, the decision
-#	was rescinded and the city reverted to Sun time.  A derisive offer to
-#	erect a sundial in front of the city hall was referred to the
-#	Committee on Sewers.  Then, in 1905, Central time was adopted
-#	by city vote.
-#
-# This story is too entertaining to be false, so go with Howse over Shanks.
-#
-# From Paul Eggert (2001-03-06):
-# Garland (1927) writes ``Cleveland and Detroit advanced their clocks
-# one hour in 1914.''  This change is not in Shanks.  We have no more
-# info, so omit this for now.
-#
-# Most of Michigan observed DST from 1973 on, but was a bit late in 1975.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
-Rule	Detroit	1948	only	-	Apr	lastSun	2:00	1:00	D
-Rule	Detroit	1948	only	-	Sep	lastSun	2:00	0	S
-Rule	Detroit	1967	only	-	Jun	14	2:00	1:00	D
-Rule	Detroit	1967	only	-	Oct	lastSun	2:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Detroit	-5:32:11 -	LMT	1905
-			-6:00	-	CST	1915 May 15 2:00
-			-5:00	-	EST	1942
-			-5:00	US	E%sT	1946
-			-5:00	Detroit	E%sT	1973
-			-5:00	US	E%sT	1975
-			-5:00	-	EST	1975 Apr 27 2:00
-			-5:00	US	E%sT
-#
-# The Michigan border with Wisconsin switched from EST to CST/CDT in 1973.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
-Rule Menominee	1946	only	-	Apr	lastSun	2:00	1:00	D
-Rule Menominee	1946	only	-	Sep	lastSun	2:00	0	S
-Rule Menominee	1966	only	-	Apr	lastSun	2:00	1:00	D
-Rule Menominee	1966	only	-	Oct	lastSun	2:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Menominee	-5:50:27 -	LMT	1885 Sep 18 12:00
-			-6:00	US	C%sT	1946
-			-6:00 Menominee	C%sT	1969 Apr 27 2:00
-			-5:00	-	EST	1973 Apr 29 2:00
-			-6:00	US	C%sT
-
-# Navassa
-# administered by the US Fish and Wildlife Service
-# claimed by US under the provisions of the 1856 Guano Islands Act
-# also claimed by Haiti
-# occupied 1857/1900 by the Navassa Phosphate Co
-# US lighthouse 1917/1996-09
-# currently uninhabited
-# see Mark Fineman, ``An Isle Rich in Guano and Discord'',
-# _Los Angeles Times_ (1998-11-10), A1, A10; it cites
-# Jimmy Skaggs, _The Great Guano Rush_ (1994).
-
-# Old names, for S5 users
-
-# Link	LINK-FROM		LINK-TO
-Link	America/New_York	EST5EDT
-Link	America/Chicago		CST6CDT
-Link	America/Denver		MST7MDT
-Link	America/Los_Angeles	PST8PDT
-Link	America/Indianapolis	EST
-Link	America/Phoenix		MST
-Link	Pacific/Honolulu	HST
-
-################################################################################
-
-
-# From Paul Eggert (1999-10-29):
-# A good source for time zone historical data outside the US is
-# Thomas G. Shanks, The International Atlas (5th edition),
-# San Diego: ACS Publications, Inc. (1999).
-#
-# Gwillim Law writes that a good source
-# for recent time zone data is the International Air Transport
-# Association's Standard Schedules Information Manual (IATA SSIM),
-# published semiannually.  Law sent in several helpful summaries
-# of the IATA's data after 1990.
-#
-# Except where otherwise noted, Shanks is the source for entries through 1990,
-# and IATA SSIM is the source for entries after 1990.
-#
-# Other sources occasionally used include:
-#
-#	Edward W. Whitman, World Time Differences,
-#	Whitman Publishing Co, 2 Niagara Av, Ealing, London (undated),
-#	which I found in the UCLA library.
-#
-#	<a href="http://www.pettswoodvillage.co.uk/Daylight_Savings_William_Willett.pdf">
-#	William Willett, The Waste of Daylight, 19th edition
-#	</a> (1914-03)
-#
-# See the `europe' file for Greenland.
-
-# Canada
-
-# From Alain LaBont<e'> <ALB@immedia.ca> (1994-11-14):
-# I post here the time zone abbreviations standardized in Canada
-# for both English and French in the CAN/CSA-Z234.4-89 standard....
-#
-#	UTC	Standard time	Daylight savings time
-#	offset	French	English	French	English
-#	-2:30	-	-	HAT	NDT
-#	-3	-	-	HAA	ADT
-#	-3:30	HNT	NST	-	-
-#	-4	HNA	AST	HAE	EDT
-#	-5	HNE	EST	HAC	CDT
-#	-6	HNC	CST	HAR	MDT
-#	-7	HNR	MST	HAP	PDT
-#	-8	HNP	PST	HAY	YDT
-#	-9	HNY	YST	-	-
-#
-#	HN: Heure Normale	ST: Standard Time
-#	HA: Heure Avanc<e'>e	DT: Daylight saving Time
-#
-#	A: de l'Atlantique	Atlantic
-#	C: du Centre		Central
-#	E: de l'Est		Eastern
-#	M:			Mountain
-#	N:			Newfoundland
-#	P: du Pacifique		Pacific
-#	R: des Rocheuses
-#	T: de Terre-Neuve
-#	Y: du Yukon		Yukon
-#
-# From Paul Eggert (1994-11-22):
-# Alas, this sort of thing must be handled by localization software.
-
-# Unless otherwise specified, the data for Canada are all from Shanks.
-
-# From Paul Eggert (2000-10-02):
-# H. David Matthews and Mary Vincent's map
-# <a href="http://www.canadiangeographic.ca/SO98/geomap.htm">
-# "It's about TIME", _Canadian Geographic_ (September-October 1998)
-# </a> contains detailed boundaries for regions observing nonstandard
-# time and daylight saving time arrangements in Canada circa 1998.
-#
-# INMS, the Institute for National Measurement Standards in Ottawa, has
-# <a href="http://www.nrc.ca/inms/time/tze.html">
-# information about standard and daylight saving time zones in Canada.
-# </a> (updated periodically).
-# Its unofficial information is often taken from Matthews and Vincent.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Canada	1918	only	-	Apr	14	2:00	1:00	D
-Rule	Canada	1918	only	-	Oct	31	2:00	0	S
-Rule	Canada	1942	only	-	Feb	 9	2:00	1:00	W # War
-Rule	Canada	1945	only	-	Aug	14	23:00u	1:00	P # Peace
-Rule	Canada	1945	only	-	Sep	30	2:00	0	S
-Rule	Canada	1974	1986	-	Apr	lastSun	2:00	1:00	D
-Rule	Canada	1974	max	-	Oct	lastSun	2:00	0	S
-Rule	Canada	1987	max	-	Apr	Sun>=1	2:00	1:00	D
-
-
-# Newfoundland (and far southeast Labrador)
-
-# From Paul Eggert (2000-10-02):
-# Matthews and Vincent (1998) write that Labrador should use NST/NDT,
-# but the only part of Labrador that follows the rules is the
-# southeast corner, including Port Hope Simpson and Mary's Harbour,
-# but excluding, say, Black Tickle.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	StJohns	1917	only	-	Apr	 8	2:00	1:00	D
-Rule	StJohns	1917	only	-	Sep	17	2:00	0	S
-# Whitman gives 1919 Apr 5 and 1920 Apr 5; go with Shanks.
-Rule	StJohns	1919	only	-	May	 5	23:00	1:00	D
-Rule	StJohns	1919	only	-	Aug	12	23:00	0	S
-# For 1931-1935 Whitman gives Apr same date; go with Shanks.
-Rule	StJohns	1920	1935	-	May	Sun>=1	23:00	1:00	D
-Rule	StJohns	1920	1935	-	Oct	lastSun	23:00	0	S
-# For 1936-1941 Whitman gives May Sun>=8 and Oct Sun>=1; go with Shanks.
-Rule	StJohns	1936	1941	-	May	Mon>=9	0:00	1:00	D
-Rule	StJohns	1936	1941	-	Oct	Mon>=2	0:00	0	S
-# Whitman gives the following transitions:
-# 1942 03-01/12-31, 1943 05-30/09-05, 1944 07-10/09-02, 1945 01-01/10-07
-# but go with Shanks and assume they used Canadian rules.
-# For 1946-9 Whitman gives May 5,4,9,1 - Oct 1,5,3,2, and for 1950 he gives
-# Apr 30 - Sep 24; go with Shanks.
-Rule	StJohns	1946	1950	-	May	Sun>=8	2:00	1:00	D
-Rule	StJohns	1946	1950	-	Oct	Sun>=2	2:00	0	S
-Rule	StJohns	1951	1986	-	Apr	lastSun	2:00	1:00	D
-Rule	StJohns	1951	1959	-	Sep	lastSun	2:00	0	S
-Rule	StJohns	1960	1986	-	Oct	lastSun	2:00	0	S
-# From Paul Eggert (2000-10-02):
-# INMS (2000-09-12) says that, since 1988 at least, Newfoundland switches
-# at 00:01 local time.  For now, assume it started in 1987.
-Rule	StJohns	1987	only	-	Apr	Sun>=1	0:01	1:00	D
-Rule	StJohns	1987	max	-	Oct	lastSun	0:01	0	S
-Rule	StJohns	1988	only	-	Apr	Sun>=1	0:01	2:00	DD
-Rule	StJohns	1989	max	-	Apr	Sun>=1	0:01	1:00	D
-# St John's has an apostrophe, but Posix file names can't have apostrophes.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/St_Johns	-3:30:52 -	LMT	1884
-			-3:30:52 StJohns N%sT	1918
-			-3:30:52 Canada	N%sT	1919
-			-3:30:52 StJohns N%sT	1935 Mar 30
-			-3:30	StJohns	N%sT	1942 May 11
-			-3:30	Canada	N%sT	1946
-			-3:30	StJohns	N%sT
-
-# most of east Labrador
-
-# The name `Happy Valley-Goose Bay' is too long; use `Goose Bay'.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Goose_Bay	-4:01:40 -	LMT	1884 # Happy Valley-Goose Bay
-			-3:30:52 -	NST	1918
-			-3:30:52 Canada N%sT	1919
-			-3:30:52 -	NST	1935 Mar 30
-			-3:30	-	NST	1936
-			-3:30	StJohns	N%sT	1942 May 11
-			-3:30	Canada	N%sT	1946
-			-3:30	StJohns	N%sT	1966 Mar 15 2:00
-			-4:00	StJohns	A%sT
-
-
-# west Labrador, New Brunswick, Nova Scotia, Prince Edward I
-
-# From Paul Eggert (1996-06-12):
-# Shanks writes that since 1970 most of this region has been like Halifax.
-# Many locales did not observe peacetime DST until 1972;
-# Glace Bay, NS is the largest that we know of.
-# Shanks also writes that Liverpool, NS was the only town in Canada to observe
-# DST in 1971 but not 1970; for now we'll assume this is a typo.
-
-# From Paul Eggert (2000-10-02):
-# INMS (2000-09-12) says that, since 1988 at least, New Brunswick switches
-# at 00:01 local time.  FIXME: verify and create a new Zone for this.
-
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule Halifax	1916	only	-	Apr	 1	0:00	1:00	D
-Rule Halifax	1916	only	-	Oct	 1	0:00	0	S
-Rule Halifax	1920	only	-	May	 9	0:00	1:00	D
-Rule Halifax	1920	only	-	Aug	29	0:00	0	S
-Rule Halifax	1921	only	-	May	 6	0:00	1:00	D
-Rule Halifax	1921	1922	-	Sep	 5	0:00	0	S
-Rule Halifax	1922	only	-	Apr	30	0:00	1:00	D
-Rule Halifax	1923	1925	-	May	Sun>=1	0:00	1:00	D
-Rule Halifax	1923	only	-	Sep	 4	0:00	0	S
-Rule Halifax	1924	only	-	Sep	15	0:00	0	S
-Rule Halifax	1925	only	-	Sep	28	0:00	0	S
-Rule Halifax	1926	only	-	May	16	0:00	1:00	D
-Rule Halifax	1926	only	-	Sep	13	0:00	0	S
-Rule Halifax	1927	only	-	May	 1	0:00	1:00	D
-Rule Halifax	1927	only	-	Sep	26	0:00	0	S
-Rule Halifax	1928	1931	-	May	Sun>=8	0:00	1:00	D
-Rule Halifax	1928	only	-	Sep	 9	0:00	0	S
-Rule Halifax	1929	only	-	Sep	 3	0:00	0	S
-Rule Halifax	1930	only	-	Sep	15	0:00	0	S
-Rule Halifax	1931	1932	-	Sep	Mon>=24	0:00	0	S
-Rule Halifax	1932	only	-	May	 1	0:00	1:00	D
-Rule Halifax	1933	only	-	Apr	30	0:00	1:00	D
-Rule Halifax	1933	only	-	Oct	 2	0:00	0	S
-Rule Halifax	1934	only	-	May	20	0:00	1:00	D
-Rule Halifax	1934	only	-	Sep	16	0:00	0	S
-Rule Halifax	1935	only	-	Jun	 2	0:00	1:00	D
-Rule Halifax	1935	only	-	Sep	30	0:00	0	S
-Rule Halifax	1936	only	-	Jun	 1	0:00	1:00	D
-Rule Halifax	1936	only	-	Sep	14	0:00	0	S
-Rule Halifax	1937	1938	-	May	Sun>=1	0:00	1:00	D
-Rule Halifax	1937	1941	-	Sep	Mon>=24	0:00	0	S
-Rule Halifax	1939	only	-	May	28	0:00	1:00	D
-Rule Halifax	1940	1941	-	May	Sun>=1	0:00	1:00	D
-Rule Halifax	1946	1949	-	Sep	lastSun	2:00	0	S
-Rule Halifax	1946	1949	-	Apr	lastSun	2:00	1:00	D
-Rule Halifax	1951	1954	-	Sep	lastSun	2:00	0	S
-Rule Halifax	1951	1954	-	Apr	lastSun	2:00	1:00	D
-Rule Halifax	1956	1959	-	Sep	lastSun	2:00	0	S
-Rule Halifax	1956	1959	-	Apr	lastSun	2:00	1:00	D
-Rule Halifax	1962	1973	-	Apr	lastSun	2:00	1:00	D
-Rule Halifax	1962	1973	-	Oct	lastSun	2:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Halifax	-4:14:24 -	LMT	1902 Jun 15
-			-4:00	Halifax	A%sT	1918
-			-4:00	Canada	A%sT	1919
-			-4:00	Halifax	A%sT	1942 Feb  9 2:00s
-			-4:00	Canada	A%sT	1946
-			-4:00	Halifax	A%sT	1974
-			-4:00	Canada	A%sT
-Zone America/Glace_Bay	-3:59:48 -	LMT	1902 Jun 15
-			-4:00	Canada	A%sT	1953
-			-4:00	Halifax	A%sT	1954
-			-4:00	-	AST	1972
-			-4:00	Halifax	A%sT	1974
-			-4:00	Canada	A%sT
-
-
-# Ontario, Quebec
-
-# From Paul Eggert (1996-06-12):
-# Shanks writes that since 1970 most of Ontario has been like Toronto,
-# and most of Quebec has been like Montreal.
-# Thunder Bay skipped DST in 1973.
-# Many smaller locales did not observe peacetime DST until 1974;
-# Nipigon (EST) and Rainy River (CST) are the largest that we know of.
-# Far west Ontario is like Winnipeg; far east Quebec is like Halifax.
-
-# From Mark Brader (2003-07-26):
-# [According to the Toronto Star] Orillia, Ontario, adopted DST
-# effective Saturday, 1912-06-22, 22:00; the article mentions that
-# Port Arthur (now part of Thunder Bay, Ontario) as well as Moose Jaw
-# have already done so.  In Orillia DST was to run until Saturday,
-# 1912-08-31 (no time mentioned), but it was met with considerable
-# hostility from certain segments of the public, and was revoked after
-# only two weeks -- I copied it as Saturday, 1912-07-07, 22:00, but
-# presumably that should be -07-06.  (1912-06-19, -07-12; also letters
-# earlier in June).
-#
-# Kenora, Ontario, was to abandon DST on 1914-06-01 (-05-21).
-
-# From Paul Eggert (1997-10-17):
-# Mark Brader writes that an article in the 1997-10-14 Toronto Star
-# says that Atikokan, Ontario currently does not observe DST,
-# but will vote on 11-10 whether to use EST/EDT.
-# He also writes that the
-# <a href="http://www.gov.on.ca/MBS/english/publications/statregs/conttext.html">
-# Ontario Time Act (1990, Chapter T.9)
-# </a>
-# says that Ontario east of 90W uses EST/EDT, and west of 90W uses CST/CDT.
-# Officially Atikokan is therefore on CST/CDT, and most likely this report
-# concerns a non-official time observed as a matter of local practice.
-# For what it's worth, Shanks says that Atikokan has agreed with
-# Rainy River ever since standard time was introduced.
-
-# From Paul Eggert (2000-10-02):
-# Matthews and Vincent (1998) write that Atikokan, Pickle Lake, and
-# New Osnaburgh observe CST all year, that Big Trout Lake observes
-# CST/CDT, and that Upsala and Shebandowan observe EST/EDT, all in
-# violation of the official Ontario rules.
-# They also write that Quebec east of the -63 meridian is supposed to
-# observe AST, but residents as far east as Natashquan use EST/EDT,
-# and residents east of Natashquan use AST.
-# We probably need Zones for far east Quebec and for Atikokan,
-# but we don't know when their practices started.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Mont	1917	only	-	Mar	25	2:00	1:00	D
-Rule	Mont	1917	only	-	Apr	24	0:00	0	S
-Rule	Mont	1919	only	-	Mar	31	2:30	1:00	D
-Rule	Mont	1919	only	-	Oct	25	2:30	0	S
-Rule	Mont	1920	only	-	May	 2	2:30	1:00	D
-Rule	Mont	1920	1922	-	Oct	Sun>=1	2:30	0	S
-Rule	Mont	1921	only	-	May	 1	2:00	1:00	D
-Rule	Mont	1922	only	-	Apr	30	2:00	1:00	D
-Rule	Mont	1924	only	-	May	17	2:00	1:00	D
-Rule	Mont	1924	1926	-	Sep	lastSun	2:30	0	S
-Rule	Mont	1925	1926	-	May	Sun>=1	2:00	1:00	D
-# The 1927-to-1937 rules can be expressed more simply as
-# Rule	Mont	1927	1937	-	Apr	lastSat	24:00	1:00	D
-# Rule	Mont	1927	1937	-	Sep	lastSat	24:00	0	S
-# The rules below avoid use of 24:00
-# (which pre-1998 versions of zic cannot handle).
-Rule	Mont	1927	only	-	May	1	0:00	1:00	D
-Rule	Mont	1927	1932	-	Sep	lastSun	0:00	0	S
-Rule	Mont	1928	1931	-	Apr	lastSun	0:00	1:00	D
-Rule	Mont	1932	only	-	May	1	0:00	1:00	D
-Rule	Mont	1933	1940	-	Apr	lastSun	0:00	1:00	D
-Rule	Mont	1933	only	-	Oct	1	0:00	0	S
-Rule	Mont	1934	1939	-	Sep	lastSun	0:00	0	S
-Rule	Mont	1946	1973	-	Apr	lastSun	2:00	1:00	D
-Rule	Mont	1945	1948	-	Sep	lastSun	2:00	0	S
-Rule	Mont	1949	1950	-	Oct	lastSun	2:00	0	S
-Rule	Mont	1951	1956	-	Sep	lastSun	2:00	0	S
-Rule	Mont	1957	1973	-	Oct	lastSun	2:00	0	S
-
-Rule	Toronto	1919	only	-	Mar	30	23:30	1:00	D
-Rule	Toronto	1919	only	-	Oct	26	0:00	0	S
-Rule	Toronto	1920	only	-	May	 2	2:00	1:00	D
-Rule	Toronto	1920	only	-	Sep	26	0:00	0	S
-Rule	Toronto	1921	only	-	May	15	2:00	1:00	D
-Rule	Toronto	1921	only	-	Sep	15	2:00	0	S
-Rule	Toronto	1922	1923	-	May	Sun>=8	2:00	1:00	D
-# Shanks says 1923-09-19; assume it's a typo and that "-16" was meant.
-Rule	Toronto	1922	1926	-	Sep	Sun>=15	2:00	0	S
-Rule	Toronto	1924	1927	-	May	Sun>=1	2:00	1:00	D
-# The 1927-to-1939 rules can be expressed more simply as
-# Rule	Toronto	1927	1937	-	Sep	Sun>=25	2:00	0	S
-# Rule	Toronto	1928	1937	-	Apr	Sun>=25	2:00	1:00	D
-# Rule	Toronto	1938	1940	-	Apr	lastSun	2:00	1:00	D
-# Rule	Toronto	1938	1939	-	Sep	lastSun	2:00	0	S
-# The rules below avoid use of Sun>=25
-# (which pre-2004 versions of zic cannot handle).
-Rule	Toronto	1927	1932	-	Sep	lastSun	2:00	0	S
-Rule	Toronto	1928	1931	-	Apr	lastSun	2:00	1:00	D
-Rule	Toronto	1932	only	-	May	1	2:00	1:00	D
-Rule	Toronto	1933	1940	-	Apr	lastSun	2:00	1:00	D
-Rule	Toronto	1933	only	-	Oct	1	2:00	0	S
-Rule	Toronto	1934	1939	-	Sep	lastSun	2:00	0	S
-Rule	Toronto	1945	1946	-	Sep	lastSun	2:00	0	S
-Rule	Toronto	1946	only	-	Apr	lastSun	2:00	1:00	D
-Rule	Toronto	1947	1949	-	Apr	lastSun	0:00	1:00	D
-Rule	Toronto	1947	1948	-	Sep	lastSun	0:00	0	S
-Rule	Toronto	1949	only	-	Nov	lastSun	0:00	0	S
-Rule	Toronto	1950	1973	-	Apr	lastSun	2:00	1:00	D
-Rule	Toronto	1950	only	-	Nov	lastSun	2:00	0	S
-Rule	Toronto	1951	1956	-	Sep	lastSun	2:00	0	S
-# Shanks says Toronto ended DST a week early in 1971, namely on 1971-10-24,
-# but Mark Brader wrote (2003-05-31) that he checked the 1971-10-30 issue
-# of the Toronto Star, and it said that DST ended 1971-10-31 as usual.
-Rule	Toronto	1957	1973	-	Oct	lastSun	2:00	0	S
-
-# From Paul Eggert (2003-07-27):
-# Willett (1914-03) writes (p. 17) "In the Cities of Fort William, and
-# Port Arthur, Ontario, the principle of the Bill has been in
-# operation for the past three years, and in the City of Moose Jaw,
-# Saskatchewan, for one year."
-
-# From David Bryan via Tory Tronrud, Director/Curator,
-# Thunder Bay Museum (2003-11-12):
-# There is some suggestion, however, that, by-law or not, daylight
-# savings time was being practiced in Fort William and Port Arthur
-# before 1909.... [I]n 1910, the line between the Eastern and Central
-# Time Zones was permanently moved about two hundred miles west to
-# include the Thunder Bay area....  When Canada adopted daylight
-# savings time in 1916, Fort William and Port Arthur, having done so
-# already, did not change their clocks....  During the Second World
-# War,... [t]he cities agreed to implement DST during the summer
-# months for the remainder of the war years.
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Montreal	-4:54:16 -	LMT	1884
-			-5:00	Mont	E%sT	1918
-			-5:00	Canada	E%sT	1919
-			-5:00	Mont	E%sT	1942 Feb  9 2:00s
-			-5:00	Canada	E%sT	1946
-			-5:00	Mont	E%sT	1974
-			-5:00	Canada	E%sT
-Zone America/Toronto	-5:17:32 -	LMT	1895
-			-5:00	Canada	E%sT	1919
-			-5:00	Toronto	E%sT	1942 Feb  9 2:00s
-			-5:00	Canada	E%sT	1946
-			-5:00	Toronto	E%sT	1974
-			-5:00	Canada	E%sT
-Zone America/Thunder_Bay -5:57:00 -	LMT	1895
-			-6:00	-	CST	1910
-			-5:00	-	EST	1942
-			-5:00	Canada	E%sT	1970
-			-5:00	Mont	E%sT	1973
-			-5:00	-	EST	1974
-			-5:00	Canada	E%sT
-Zone America/Nipigon	-5:53:04 -	LMT	1895
-			-5:00	Canada	E%sT	1940 Sep 29
-			-5:00	1:00	EDT	1942 Feb  9 2:00s
-			-5:00	Canada	E%sT
-Zone America/Rainy_River -6:17:56 -	LMT	1895
-			-6:00	Canada	C%sT	1940 Sep 29
-			-6:00	1:00	CDT	1942 Feb  9 2:00s
-			-6:00	Canada	C%sT
-
-
-# Manitoba
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Winn	1916	only	-	Apr	23	0:00	1:00	D
-Rule	Winn	1916	only	-	Sep	17	0:00	0	S
-Rule	Winn	1918	only	-	Apr	14	2:00	1:00	D
-Rule	Winn	1918	only	-	Oct	31	2:00	0	S
-Rule	Winn	1937	only	-	May	16	2:00	1:00	D
-Rule	Winn	1937	only	-	Sep	26	2:00	0	S
-Rule	Winn	1942	only	-	Feb	 9	2:00	1:00	W # War
-Rule	Winn	1945	only	-	Aug	14	23:00u	1:00	P # Peace
-Rule	Winn	1945	only	-	Sep	lastSun	2:00	0	S
-Rule	Winn	1946	only	-	May	12	2:00	1:00	D
-Rule	Winn	1946	only	-	Oct	13	2:00	0	S
-Rule	Winn	1947	1949	-	Apr	lastSun	2:00	1:00	D
-Rule	Winn	1947	1949	-	Sep	lastSun	2:00	0	S
-Rule	Winn	1950	only	-	May	 1	2:00	1:00	D
-Rule	Winn	1950	only	-	Sep	30	2:00	0	S
-Rule	Winn	1951	1960	-	Apr	lastSun	2:00	1:00	D
-Rule	Winn	1951	1958	-	Sep	lastSun	2:00	0	S
-Rule	Winn	1959	only	-	Oct	lastSun	2:00	0	S
-Rule	Winn	1960	only	-	Sep	lastSun	2:00	0	S
-Rule	Winn	1963	only	-	Apr	lastSun	2:00	1:00	D
-Rule	Winn	1963	only	-	Sep	22	2:00	0	S
-Rule	Winn	1966	1986	-	Apr	lastSun	2:00	1:00	D
-Rule	Winn	1966	1986	-	Oct	lastSun	2:00	0	S
-Rule	Winn	1987	max	-	Apr	Sun>=1	2:00	1:00	D
-# From Paul Eggert (2000-10-02):
-# INMS (2000-09-12) says that, since 1988 at least, Manitoba switches from
-# DST at 03:00 local time.  For now, assume it started in 1987.
-Rule	Winn	1987	max	-	Oct	lastSun	2:00s	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Winnipeg	-6:28:36 -	LMT	1887 Jul 16
-			-6:00	Winn	C%sT
-
-
-# Saskatchewan
-
-# From Mark Brader (2003-07-26):
-# The first actual adoption of DST in Canada was at the municipal
-# level.  As the [Toronto] Star put it (1912-06-07), "While people
-# elsewhere have long been talking of legislation to save daylight,
-# the city of Moose Jaw [Saskatchewan] has acted on its own hook."
-# DST in Moose Jaw began on Saturday, 1912-06-01 (no time mentioned:
-# presumably late evening, as below), and would run until "the end of
-# the summer".  The discrepancy between municipal time and railroad
-# time was noted.
-
-# From Paul Eggert (2003-07-27):
-# Willett (1914-03) notes that DST "has been in operation ... in the
-# City of Moose Jaw, Saskatchewan, for one year."
-
-# From Paul Eggert (2000-10-02):
-# Shanks writes that since 1970 most of this region has been like Regina.
-# Some western towns (e.g. Swift Current) switched from MST/MDT to CST in 1972.
-# Other western towns (e.g. Lloydminster) are like Edmonton.
-# Matthews and Vincent (1998) write that Denare Beach and Creighton
-# are like Winnipeg, in violation of Saskatchewan law.
-
-# From W. Jones <jones@skdad.usask.ca> (1992-11-06):
-# The. . .below is based on information I got from our law library, the
-# provincial archives, and the provincial Community Services department.
-# A precise history would require digging through newspaper archives, and
-# since you didn't say what you wanted, I didn't bother.
-#
-# Saskatchewan is split by a time zone meridian (105W) and over the years
-# the boundary became pretty ragged as communities near it reevaluated
-# their affiliations in one direction or the other.  In 1965 a provincial
-# referendum favoured legislating common time practices.
-#
-# On 15 April 1966 the Time Act (c. T-14, Revised Statutes of
-# Saskatchewan 1978) was proclaimed, and established that the eastern
-# part of Saskatchewan would use CST year round, that districts in
-# northwest Saskatchewan would by default follow CST but could opt to
-# follow Mountain Time rules (thus 1 hour difference in the winter and
-# zero in the summer), and that districts in southwest Saskatchewan would
-# by default follow MT but could opt to follow CST.
-#
-# It took a few years for the dust to settle (I know one story of a town
-# on one time zone having its school in another, such that a mom had to
-# serve her family lunch in two shifts), but presently it seems that only
-# a few towns on the border with Alberta (e.g. Lloydminster) follow MT
-# rules any more; all other districts appear to have used CST year round
-# since sometime in the 1960s.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Regina	1918	only	-	Apr	14	2:00	1:00	D
-Rule	Regina	1918	only	-	Oct	31	2:00	0	S
-Rule	Regina	1930	1934	-	May	Sun>=1	0:00	1:00	D
-Rule	Regina	1930	1934	-	Oct	Sun>=1	0:00	0	S
-Rule	Regina	1937	1941	-	Apr	Sun>=8	0:00	1:00	D
-Rule	Regina	1937	only	-	Oct	Sun>=8	0:00	0	S
-Rule	Regina	1938	only	-	Oct	Sun>=1	0:00	0	S
-Rule	Regina	1939	1941	-	Oct	Sun>=8	0:00	0	S
-Rule	Regina	1942	only	-	Feb	 9	2:00	1:00	W # War
-Rule	Regina	1945	only	-	Aug	14	23:00u	1:00	P # Peace
-Rule	Regina	1945	only	-	Sep	lastSun	2:00	0	S
-Rule	Regina	1946	only	-	Apr	Sun>=8	2:00	1:00	D
-Rule	Regina	1946	only	-	Oct	Sun>=8	2:00	0	S
-Rule	Regina	1947	1957	-	Apr	lastSun	2:00	1:00	D
-Rule	Regina	1947	1957	-	Sep	lastSun	2:00	0	S
-Rule	Regina	1959	only	-	Apr	lastSun	2:00	1:00	D
-Rule	Regina	1959	only	-	Oct	lastSun	2:00	0	S
-#
-Rule	Swift	1957	only	-	Apr	lastSun	2:00	1:00	D
-Rule	Swift	1957	only	-	Oct	lastSun	2:00	0	S
-Rule	Swift	1959	1961	-	Apr	lastSun	2:00	1:00	D
-Rule	Swift	1959	only	-	Oct	lastSun	2:00	0	S
-Rule	Swift	1960	1961	-	Sep	lastSun	2:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Regina	-6:58:36 -	LMT	1905 Sep
-			-7:00	Regina	M%sT	1960 Apr lastSun 2:00
-			-6:00	-	CST
-Zone America/Swift_Current -7:11:20 -	LMT	1905 Sep
-			-7:00	Canada	M%sT	1946 Apr lastSun 2:00
-			-7:00	Regina	M%sT	1950
-			-7:00	Swift	M%sT	1972 Apr lastSun 2:00
-			-6:00	-	CST
-
-
-# Alberta
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Edm	1918	1919	-	Apr	Sun>=8	2:00	1:00	D
-Rule	Edm	1918	only	-	Oct	31	2:00	0	S
-Rule	Edm	1919	only	-	May	27	2:00	0	S
-Rule	Edm	1920	1923	-	Apr	lastSun	2:00	1:00	D
-Rule	Edm	1920	only	-	Oct	lastSun	2:00	0	S
-Rule	Edm	1921	1923	-	Sep	lastSun	2:00	0	S
-Rule	Edm	1942	only	-	Feb	 9	2:00	1:00	W # War
-Rule	Edm	1945	only	-	Aug	14	23:00u	1:00	P # Peace
-Rule	Edm	1945	only	-	Sep	lastSun	2:00	0	S
-Rule	Edm	1947	only	-	Apr	lastSun	2:00	1:00	D
-Rule	Edm	1947	only	-	Sep	lastSun	2:00	0	S
-Rule	Edm	1967	only	-	Apr	lastSun	2:00	1:00	D
-Rule	Edm	1967	only	-	Oct	lastSun	2:00	0	S
-Rule	Edm	1969	only	-	Apr	lastSun	2:00	1:00	D
-Rule	Edm	1969	only	-	Oct	lastSun	2:00	0	S
-Rule	Edm	1972	1986	-	Apr	lastSun	2:00	1:00	D
-Rule	Edm	1972	max	-	Oct	lastSun	2:00	0	S
-Rule	Edm	1987	max	-	Apr	Sun>=1	2:00	1:00	D
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Edmonton	-7:33:52 -	LMT	1906 Sep
-			-7:00	Edm	M%sT
-
-
-# British Columbia
-
-# From Paul Eggert (2000-10-02):
-# Shanks writes that since 1970 most of this region has been like Vancouver.
-# Dawson Creek uses MST.  Much of east BC is like Edmonton.
-# Matthews and Vincent (1998) write that Creston is like Dawson Creek.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Vanc	1918	only	-	Apr	14	2:00	1:00	D
-Rule	Vanc	1918	only	-	Oct	31	2:00	0	S
-Rule	Vanc	1942	only	-	Feb	 9	2:00	1:00	W # War
-Rule	Vanc	1945	only	-	Aug	14	23:00u	1:00	P # Peace
-Rule	Vanc	1945	only	-	Sep	30	2:00	0	S
-Rule	Vanc	1946	1986	-	Apr	lastSun	2:00	1:00	D
-Rule	Vanc	1946	only	-	Oct	13	2:00	0	S
-Rule	Vanc	1947	1961	-	Sep	lastSun	2:00	0	S
-Rule	Vanc	1962	max	-	Oct	lastSun	2:00	0	S
-Rule	Vanc	1987	max	-	Apr	Sun>=1	2:00	1:00	D
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Vancouver	-8:12:28 -	LMT	1884
-			-8:00	Vanc	P%sT
-Zone America/Dawson_Creek -8:00:56 -	LMT	1884
-			-8:00	Canada	P%sT	1947
-			-8:00	Vanc	P%sT	1972 Aug 30 2:00
-			-7:00	-	MST
-
-
-# Northwest Territories, Nunavut, Yukon
-
-# From Paul Eggert (1999-10-29):
-# Dawson switched to PST in 1973.  Inuvik switched to MST in 1979.
-# Mathew Englander <mathew@io.org> (1996-10-07) gives the following refs:
-#	* 1967. Paragraph 28(34)(g) of the Interpretation Act, S.C. 1967-68,
-#	c. 7 defines Yukon standard time as UTC-9.  This is still valid;
-#	see Interpretation Act, R.S.C. 1985, c. I-21, s. 35(1).
-#	* C.O. 1973/214 switched Yukon to PST on 1973-10-28 00:00.
-#	* O.I.C. 1980/02 established DST.
-#	* O.I.C. 1987/056 changed DST to Apr firstSun 2:00 to Oct lastSun 2:00.
-# Shanks says Yukon's 1973-10-28 switch was at 2:00; go with Englander.
-
-# From Rives McDow (1999-09-04):
-# Nunavut ... moved ... to incorporate the whole territory into one time zone.
-# <a href="http://www.nunatsiaq.com/nunavut/nvt90903_13.html">
-# Nunavut moves to single time zone Oct. 31
-# </a>
-#
-# From Antoine Leca (1999-09-06):
-# We then need to create a new timezone for the Kitikmeot region of Nunavut
-# to differentiate it from the Yellowknife region.
-
-# From Paul Eggert (1999-09-20):
-# <a href="http://www.nunavut.com/basicfacts/english/basicfacts_1territory.html">
-# Basic Facts: The New Territory
-# </a> (1999) reports that Pangnirtung operates on eastern time,
-# and that Coral Harbour does not observe DST.  We don't know when
-# Pangnirtung switched to eastern time; we'll guess 1995.
-# We'll ignore the claim about Coral Harbour for now,
-# since we have no further info.
-
-# From Rives McDow (1999-11-08):
-# On October 31, when the rest of Nunavut went to Central time,
-# Pangnirtung wobbled.  Here is the result of their wobble:
-#
-# The following businesses and organizations in Pangnirtung use Central Time:
-#
-#	First Air, Power Corp, Nunavut Construction, Health Center, RCMP,
-#	Eastern Arctic National Parks, A & D Specialist
-#
-# The following businesses and organizations in Pangnirtung use Eastern Time:
-#
-#	Hamlet office, All other businesses, Both schools, Airport operator
-#
-# This has made for an interesting situation there, which warranted the news.
-# No one there that I spoke with seems concerned, or has plans to
-# change the local methods of keeping time, as it evidently does not
-# really interfere with any activities or make things difficult locally.
-# They plan to celebrate New Year's turn-over twice, one hour apart,
-# so it appears that the situation will last at least that long.
-# The Nunavut Intergovernmental Affairs hopes that they will "come to
-# their senses", but the locals evidently don't see any problem with
-# the current state of affairs.
-
-# From Michaela Rodrigue, writing in the
-# <a href="http://www.nunatsiaq.com/archives/nunavut991130/nvt91119_17.html">
-# Nunatsiaq News (1999-11-19)</a>:
-# Clyde River, Pangnirtung and Sanikiluaq now operate with two time zones,
-# central - or Nunavut time - for government offices, and eastern time
-# for municipal offices and schools....  Igloolik [was similar but then]
-# made the switch to central time on Saturday, Nov. 6.
-
-# From Paul Eggert (2000-10-02):
-# Matthews and Vincent (1998) say the following, but we lack histories
-# for these potential new Zones.
-#
-# The Canadian Forces station at Alert uses Eastern Time while the
-# handful of residents at the Eureka weather station [in the Central
-# zone] skip daylight savings.  Baffin Island, which is crossed by the
-# Central, Eastern and Atlantic Time zones only uses Eastern Time.
-# Gjoa Haven, Taloyoak and Pelly Bay all use Mountain instead of
-# Central Time and Southampton Island [in the Central zone] is not
-# required to use daylight savings.
-
-# From
-# <a href="http://www.nunatsiaq.com/archives/nunavut001130/nvt21110_02.html">
-# Nunavut now has two time zones
-# </a> (2000-11-10):
-# The Nunavut government would allow its employees in Kugluktuk and
-# Cambridge Bay to operate on central time year-round, putting them
-# one hour behind the rest of Nunavut for six months during the winter.
-# At the end of October the two communities had rebelled against
-# Nunavut's unified time zone, refusing to shift to eastern time with
-# the rest of the territory for the winter.  Cambridge Bay remained on
-# central time, while Kugluktuk, even farther west, reverted to
-# mountain time, which they had used before the advent of Nunavut's
-# unified time zone in 1999.
-#
-# From Rives McDow (2001-01-20), quoting the Nunavut government:
-# The preceding decision came into effect at midnight, Saturday Nov 4, 2000.
-
-# From Paul Eggert (2000-12-04):
-# Let's just keep track of the official times for now.
-
-# From Rives McDow (2001-03-07):
-# The premier of Nunavut has issued a ministerial statement advising
-# that effective 2001-04-01, the territory of Nunavut will revert
-# back to three time zones (mountain, central, and eastern).  Of the
-# cities in Nunavut, Coral Harbor is the only one that I know of that
-# has said it will not observe dst, staying on EST year round.  I'm
-# checking for more info, and will get back to you if I come up with
-# more.
-# [Also see <http://www.nunatsiaq.com/nunavut/nvt10309_06.html> (2001-03-09).]
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	NT_YK	1918	only	-	Apr	14	2:00	1:00	D
-Rule	NT_YK	1918	only	-	Oct	27	2:00	0	S
-Rule	NT_YK	1919	only	-	May	25	2:00	1:00	D
-Rule	NT_YK	1919	only	-	Nov	 1	0:00	0	S
-Rule	NT_YK	1942	only	-	Feb	 9	2:00	1:00	W # War
-Rule	NT_YK	1945	only	-	Aug	14	23:00u	1:00	P # Peace
-Rule	NT_YK	1945	only	-	Sep	30	2:00	0	S
-Rule	NT_YK	1965	only	-	Apr	lastSun	0:00	2:00	DD
-Rule	NT_YK	1965	only	-	Oct	lastSun	2:00	0	S
-Rule	NT_YK	1980	1986	-	Apr	lastSun	2:00	1:00	D
-Rule	NT_YK	1980	max	-	Oct	lastSun	2:00	0	S
-Rule	NT_YK	1987	max	-	Apr	Sun>=1	2:00	1:00	D
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Pangnirtung -4:22:56 -	LMT	1884
-			-4:00	NT_YK	A%sT	1995 Apr Sun>=1 2:00
-			-5:00	Canada	E%sT	1999 Oct 31 2:00
-			-6:00	Canada	C%sT	2000 Oct 29 2:00
-			-5:00	Canada	E%sT
-Zone America/Iqaluit	-4:33:52 -	LMT	1884 # Frobisher Bay before 1987
-			-5:00	NT_YK	E%sT	1999 Oct 31 2:00
-			-6:00	Canada	C%sT	2000 Oct 29 2:00
-			-5:00	Canada	E%sT
-Zone America/Rankin_Inlet -6:08:40 -	LMT	1884
-			-6:00	NT_YK	C%sT	2000 Oct 29 2:00
-			-5:00	-	EST	2001 Apr  1 3:00
-			-6:00	Canada	C%sT
-Zone America/Cambridge_Bay -7:00:20 -	LMT	1884
-			-7:00	NT_YK	M%sT	1999 Oct 31 2:00
-			-6:00	Canada	C%sT	2000 Oct 29 2:00
-			-5:00	-	EST	2000 Nov  5 0:00
-			-6:00	-	CST	2001 Apr  1 3:00
-			-7:00	Canada	M%sT
-Zone America/Yellowknife -7:37:24 -	LMT	1884
-			-7:00	NT_YK	M%sT
-Zone America/Inuvik	-8:54:00 -	LMT	1884
-			-8:00	NT_YK	P%sT	1979 Apr lastSun 2:00
-			-7:00	NT_YK	M%sT
-Zone America/Whitehorse	-9:00:12 -	LMT	1900 Aug 20
-			-9:00	NT_YK	Y%sT	1966 Jul 1 2:00
-			-8:00	NT_YK	P%sT
-Zone America/Dawson	-9:17:40 -	LMT	1900 Aug 20
-			-9:00	NT_YK	Y%sT	1973 Oct 28 0:00
-			-8:00	NT_YK	P%sT
-
-
-###############################################################################
-
-# Mexico
-
-# From Paul Eggert (2001-03-05):
-# The Investigation and Analysis Service of the
-# Mexican Library of Congress (MLoC) has published a
-# <a href="http://www.cddhcu.gob.mx/bibliot/publica/inveyana/polisoc/horver/">
-# history of Mexican local time (in Spanish)
-# </a>.
-#
-# Here are the discrepancies between Shanks and the MLoC.
-# (In all cases we go with the MLoC.)
-# Shanks reports that Baja was at -8:00 in 1922/1923.
-# Shanks says the 1930 transition in Baja was 1930-11-16.
-# Shanks reports no DST during summer 1931.
-# Shanks reports a transition at 1932-03-30 23:00, not 1932-04-01.
-# Shanks does not report transitions for Baja in 1945 or 1948.
-# Shanks reports southern Mexico transitions on 1981-12-01, not 12-23.
-# Shanks says Quintana Roo switched to -6:00 on 1982-12-02, and to -5:00
-# on 1997-10-26 at 02:00.
-
-# From Gwillim Law (2001-02-20):
-# There are some other discrepancies between the Decrees page and the
-# tz database.  I think they can best be explained by supposing that
-# the researchers who prepared the Decrees page failed to find some of
-# the relevant documents.
-
-# From Paul Eggert (2000-07-26):
-# Shanks gives 1942-04-01 instead of 1942-04-24, and omits the 1981
-# and 1988 DST experiments.  Go with spin.com.mx.
-
-# From Alan Perry <alan.perry@eng.sun.com> (1996-02-15):
-# A guy from our Mexico subsidiary finally found the Presidential Decree
-# outlining the timezone changes in Mexico.
-#
-# ------------- Begin Forwarded Message -------------
-#
-# I finally got my hands on the Official Presidential Decree that sets up the
-# rules for the DST changes. The rules are:
-#
-# 1. The country is divided in 3 timezones:
-#    - Baja California Norte (the Mexico/BajaNorte TZ)
-#    - Baja California Sur, Nayarit, Sinaloa and Sonora (the Mexico/BajaSur TZ)
-#    - The rest of the country (the Mexico/General TZ)
-#
-# 2. From the first Sunday in April at 2:00 AM to the last Sunday in October
-#    at 2:00 AM, the times in each zone are as follows:
-#    BajaNorte: GMT+7
-#    BajaSur:   GMT+6
-#    General:   GMT+5
-#
-# 3. The rest of the year, the times are as follows:
-#    BajaNorte: GMT+8
-#    BajaSur:   GMT+7
-#    General:   GMT+6
-#
-# The Decree was published in Mexico's Official Newspaper on January 4th.
-#
-# -------------- End Forwarded Message --------------
-# From Paul Eggert (1996-06-12):
-# For an English translation of the decree, see
-# <a href="http://mexico-travel.com/extra/timezone_eng.html">
-# ``Diario Oficial: Time Zone Changeover'' (1996-01-04).
-# </a>
-
-# From Rives McDow (1998-10-08):
-# The State of Quintana Roo has reverted back to central STD and DST times
-# (i.e. UTC -0600 and -0500 as of 1998-08-02).
-
-# From Rives McDow (2000-01-10):
-# Effective April 4, 1999 at 2:00 AM local time, Sonora changed to the time
-# zone 5 hours from the International Date Line, and will not observe daylight
-# savings time so as to stay on the same time zone as the southern part of
-# Arizona year round.
-
-# From Jesper Norgaard, translating
-# <http://www.reforma.com/nacional/articulo/064327/> (2001-01-17):
-# In Oaxaca, the 55.000 teachers from the Section 22 of the National
-# Syndicate of Education Workers, refuse to apply daylight saving each
-# year, so that the more than 10,000 schools work at normal hour the
-# whole year.
-
-# From Gwillim Law (2001-01-19):
-# <http://www.reforma.com/negocios_y_dinero/articulo/064481/> ... says
-# (translated):...
-# January 17, 2000 - The Energy Secretary, Ernesto Martens, announced
-# that Summer Time will be reduced from seven to five months, starting
-# this year....
-# <http://www.publico.com.mx/scripts/texto3.asp?action=pagina&pag=21&pos=p&secc=naci&date=01/17/2001>
-# [translated], says "summer time will ... take effect on the first Sunday
-# in May, and end on the last Sunday of September.
-
-# From Arthur David Olson (2001-01-25):
-# The 2001-01-24 traditional Washington Post contained the page one
-# story "Timely Issue Divides Mexicans."...
-# http://www.washingtonpost.com/wp-dyn/articles/A37383-2001Jan23.html
-# ... Mexico City Mayor Lopez Obrador "...is threatening to keep
-# Mexico City and its 20 million residents on a different time than
-# the rest of the country..." In particular, Lopez Obrador would abolish
-# observation of Daylight Saving Time.
-
-# <a href="http://www.conae.gob.mx/ahorro/decretohorver2001.html#decre">
-# Official statute published by the Energy Department
-# </a> (2001-02-01) shows Baja and Chihauhua as still using US DST rules,
-# and Sonora with no DST.  This was reported by Jesper Norgaard (2001-02-03).
-
-# From Paul Eggert (2001-03-03):
-#
-# <a href="http://www.latimes.com/news/nation/20010303/t000018766.html">
-# James F. Smith writes in today's LA Times
-# </a>
-# * Sonora will continue to observe standard time.
-# * Last week Mexico City's mayor Andres Manuel Lopez Obrador decreed that
-#   the Federal District will not adopt DST.
-# * 4 of 16 district leaders announced they'll ignore the decree.
-# * The decree does not affect federal-controlled facilities including
-#   the airport, banks, hospitals, and schools.
-#
-# For now we'll assume that the Federal District will bow to federal rules.
-
-# From Jesper Norgaard (2001-04-01):
-# I found some references to the Mexican application of daylight
-# saving, which modifies what I had already sent you, stating earlier
-# that a number of northern Mexican states would go on daylight
-# saving. The modification reverts this to only cover Baja California
-# (Norte), while all other states (except Sonora, who has no daylight
-# saving all year) will follow the original decree of president
-# Vicente Fox, starting daylight saving May 6, 2001 and ending
-# September 30, 2001.
-# References: "Diario de Monterrey" <www.diariodemonterrey.com/index.asp>
-# Palabra <http://palabra.infosel.com/010331/primera/ppri3101.pdf> (2001-03-31)
-
-# From Reuters (2001-09-04):
-# Mexico's Supreme Court on Tuesday declared that daylight savings was
-# unconstitutional in Mexico City, creating the possibility the
-# capital will be in a different time zone from the rest of the nation
-# next year....  The Supreme Court's ruling takes effect at 2:00
-# a.m. (0800 GMT) on Sept. 30, when Mexico is scheduled to revert to
-# standard time. "This is so residents of the Federal District are not
-# subject to unexpected time changes," a statement from the court said.
-
-# From Jesper Norgaard Welen (2002-03-12):
-# ... consulting my local grocery store(!) and my coworkers, they all insisted
-# that a new decision had been made to reinstate US style DST in Mexico....
-# http://www.conae.gob.mx/ahorro/horaver2001_m1_2002.html (2002-02-20)
-# confirms this.  Sonora as usual is the only state where DST is not applied.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Mexico	1939	only	-	Feb	5	0:00	1:00	D
-Rule	Mexico	1939	only	-	Jun	25	0:00	0	S
-Rule	Mexico	1940	only	-	Dec	9	0:00	1:00	D
-Rule	Mexico	1941	only	-	Apr	1	0:00	0	S
-Rule	Mexico	1943	only	-	Dec	16	0:00	1:00	W # War
-Rule	Mexico	1944	only	-	May	1	0:00	0	S
-Rule	Mexico	1950	only	-	Feb	12	0:00	1:00	D
-Rule	Mexico	1950	only	-	Jul	30	0:00	0	S
-Rule	Mexico	1996	2000	-	Apr	Sun>=1	2:00	1:00	D
-Rule	Mexico	1996	2000	-	Oct	lastSun	2:00	0	S
-Rule	Mexico	2001	only	-	May	Sun>=1	2:00	1:00	D
-Rule	Mexico	2001	only	-	Sep	lastSun	2:00	0	S
-Rule	Mexico	2002	max	-	Apr	Sun>=1	2:00	1:00	D
-Rule	Mexico	2002	max	-	Oct	lastSun	2:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-# Quintana Roo
-Zone America/Cancun	-5:47:04 -	LMT	1922 Jan  1  0:12:56
-			-6:00	-	CST	1981 Dec 23
-			-5:00	Mexico	E%sT	1998 Aug  2  2:00
-			-6:00	Mexico	C%sT
-# Campeche, Yucatan
-Zone America/Merida	-5:58:28 -	LMT	1922 Jan  1  0:01:32
-			-6:00	-	CST	1981 Dec 23
-			-5:00	-	EST	1982 Dec  2
-			-6:00	Mexico	C%sT
-# Coahuila, Durango, Nuevo Leon, Tamaulipas
-Zone America/Monterrey	-6:41:16 -	LMT	1921 Dec 31 23:18:44
-			-6:00	-	CST	1988
-			-6:00	US	C%sT	1989
-			-6:00	Mexico	C%sT
-# Central Mexico
-Zone America/Mexico_City -6:36:36 -	LMT	1922 Jan  1  0:23:24
-			-7:00	-	MST	1927 Jun 10 23:00
-			-6:00	-	CST	1930 Nov 15
-			-7:00	-	MST	1931 May  1 23:00
-			-6:00	-	CST	1931 Oct
-			-7:00	-	MST	1932 Apr  1
-			-6:00	Mexico	C%sT	2001 Sep 30 02:00
-			-6:00	-	CST	2002 Feb 20
-			-6:00	Mexico	C%sT
-# Chihuahua
-Zone America/Chihuahua	-7:04:20 -	LMT	1921 Dec 31 23:55:40
-			-7:00	-	MST	1927 Jun 10 23:00
-			-6:00	-	CST	1930 Nov 15
-			-7:00	-	MST	1931 May  1 23:00
-			-6:00	-	CST	1931 Oct
-			-7:00	-	MST	1932 Apr  1
-			-6:00	-	CST	1996
-			-6:00	Mexico	C%sT	1998
-			-6:00	-	CST	1998 Apr Sun>=1 3:00
-			-7:00	Mexico	M%sT
-# Sonora
-Zone America/Hermosillo	-7:23:52 -	LMT	1921 Dec 31 23:36:08
-			-7:00	-	MST	1927 Jun 10 23:00
-			-6:00	-	CST	1930 Nov 15
-			-7:00	-	MST	1931 May  1 23:00
-			-6:00	-	CST	1931 Oct
-			-7:00	-	MST	1932 Apr  1
-			-6:00	-	CST	1942 Apr 24
-			-7:00	-	MST	1949 Jan 14
-			-8:00	-	PST	1970
-			-7:00	Mexico	M%sT	1999
-			-7:00	-	MST
-# Baja California Sur, Nayarit, Sinaloa
-Zone America/Mazatlan	-7:05:40 -	LMT	1921 Dec 31 23:54:20
-			-7:00	-	MST	1927 Jun 10 23:00
-			-6:00	-	CST	1930 Nov 15
-			-7:00	-	MST	1931 May  1 23:00
-			-6:00	-	CST	1931 Oct
-			-7:00	-	MST	1932 Apr  1
-			-6:00	-	CST	1942 Apr 24
-			-7:00	-	MST	1949 Jan 14
-			-8:00	-	PST	1970
-			-7:00	Mexico	M%sT
-# Baja California
-Zone America/Tijuana	-7:48:04 -	LMT	1922 Jan  1  0:11:56
-			-7:00	-	MST	1924
-			-8:00	-	PST	1927 Jun 10 23:00
-			-7:00	-	MST	1930 Nov 15
-			-8:00	-	PST	1931 Apr  1
-			-8:00	1:00	PDT	1931 Sep 30
-			-8:00	-	PST	1942 Apr 24
-			-8:00	1:00	PWT	1945 Nov 12
-			-8:00	-	PST	1948 Apr  5
-			-8:00	1:00	PDT	1949 Jan 14
-			-8:00	-	PST	1954
-			-8:00	CA	P%sT	1961
-			-8:00	-	PST	1976
-			-8:00	US	P%sT	1996
-			-8:00	Mexico	P%sT	2001
-			-8:00	US	P%sT	2002 Feb 20
-			-8:00	Mexico	P%sT
-# From Paul Eggert (2001-03-05):
-# Formerly there was an America/Ensenada zone, which differed from
-# America/Tijuana only in that it did not observe DST from 1976
-# through 1995.  This was as per Shanks.  However, Guy Harris reports
-# that the 1987 OAG says "Only Ensenada, Mexicale, San Felipe and
-# Tijuana observe DST," which contradicts Shanks but does imply that
-# DST-observance was a town-by-town matter back then.  This concerns
-# data after 1970 so most likely there should be at least one Zone
-# other than America/Tijuana for Baja, but it's not clear yet what its
-# name or contents should be.
-#
-# Revillagigedo Is
-# no information
-
-###############################################################################
-
-# Anguilla
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Anguilla	-4:12:16 -	LMT	1912 Mar 2
-			-4:00	-	AST
-
-# Antigua and Barbuda
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Antigua	-4:07:12 -	LMT	1912 Mar 2
-			-5:00	-	EST	1951
-			-4:00	-	AST
-
-# Bahamas
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Bahamas	1964	max	-	Oct	lastSun	2:00	0	S
-Rule	Bahamas	1964	1986	-	Apr	lastSun	2:00	1:00	D
-Rule	Bahamas	1987	max	-	Apr	Sun>=1	2:00	1:00	D
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Nassau	-5:09:24 -	LMT	1912 Mar 2
-			-5:00	Bahamas	E%sT
-
-# Barbados
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Barb	1977	only	-	Jun	12	2:00	1:00	D
-Rule	Barb	1977	1978	-	Oct	Sun>=1	2:00	0	S
-Rule	Barb	1978	1980	-	Apr	Sun>=15	2:00	1:00	D
-Rule	Barb	1979	only	-	Sep	30	2:00	0	S
-Rule	Barb	1980	only	-	Sep	25	2:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Barbados	-3:58:28 -	LMT	1924		# Bridgetown
-			-3:58:28 -	BMT	1932	  # Bridgetown Mean Time
-			-4:00	Barb	A%sT
-
-# Belize
-# Whitman entirely disagrees with Shanks; go with Shanks.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Belize	1918	1942	-	Oct	Sun>=2	0:00	0:30	HD
-Rule	Belize	1919	1943	-	Feb	Sun>=9	0:00	0	S
-Rule	Belize	1973	only	-	Dec	 5	0:00	1:00	D
-Rule	Belize	1974	only	-	Feb	 9	0:00	0	S
-Rule	Belize	1982	only	-	Dec	18	0:00	1:00	D
-Rule	Belize	1983	only	-	Feb	12	0:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Belize	-5:52:48 -	LMT	1912 Apr
-			-6:00	Belize	C%sT
-
-# Bermuda
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Atlantic/Bermuda	-4:19:04 -	LMT	1930 Jan  1 2:00    # Hamilton
-			-4:00	-	AST	1974 Apr 28 2:00
-			-4:00	Bahamas	A%sT
-
-# Cayman Is
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Cayman	-5:25:32 -	LMT	1890		# Georgetown
-			-5:07:12 -	KMT	1912 Feb    # Kingston Mean Time
-			-5:00	-	EST
-
-# Costa Rica
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	CR	1979	1980	-	Feb	lastSun	0:00	1:00	D
-Rule	CR	1979	1980	-	Jun	Sun>=1	0:00	0	S
-Rule	CR	1991	1992	-	Jan	Sat>=15	0:00	1:00	D
-# IATA SSIM (1991-09) says the following was at 1:00; go with Shanks.
-Rule	CR	1991	only	-	Jul	 1	0:00	0	S
-Rule	CR	1992	only	-	Mar	15	0:00	0	S
-# There are too many San Joses elsewhere, so we'll use `Costa Rica'.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Costa_Rica	-5:36:20 -	LMT	1890		# San Jose
-			-5:36:20 -	SJMT	1921 Jan 15 # San Jose Mean Time
-			-6:00	CR	C%sT
-# Coco
-# no information; probably like America/Costa_Rica
-
-# Cuba
-
-# From Arthur David Olson (1999-03-29):
-# The 1999-03-28 exhibition baseball game held in Havana, Cuba, between
-# the Cuban National Team and the Baltimore Orioles was carried live on
-# the Orioles Radio Network, including affiliate WTOP in Washington, DC.
-# During the game, play-by-play announcer Jim Hunter noted that
-# "We'll be losing two hours of sleep...Cuba switched to Daylight Saving
-# Time today."  (The "two hour" remark referred to losing one hour of
-# sleep on 1999-03-28--when the announcers were in Cuba as it switched
-# to DST--and one more hour on 1999-04-04--when the announcers will have
-# returned to Baltimore, which switches on that date.)
-
-# From Evert van der Veer via Steffen Thorsen (2004-10-28):
-# Cuba is not going back to standard time this year.
-# From Paul Eggert (2004-10-28):
-# http://www.granma.cu/ingles/2004/septiembre/juev30/41medid-i.html
-# says that it's due to a problem at the Antonio Guiteras
-# thermoelectric plant, and says "This October there will be no return
-# to normal hours (after daylight saving time)".
-# For now, let's assume that it's a one-year temporary measure.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Cuba	1928	only	-	Jun	10	0:00	1:00	D
-Rule	Cuba	1928	only	-	Oct	10	0:00	0	S
-Rule	Cuba	1940	1942	-	Jun	Sun>=1	0:00	1:00	D
-Rule	Cuba	1940	1942	-	Sep	Sun>=1	0:00	0	S
-Rule	Cuba	1945	1946	-	Jun	Sun>=1	0:00	1:00	D
-Rule	Cuba	1945	1946	-	Sep	Sun>=1	0:00	0	S
-Rule	Cuba	1965	only	-	Jun	1	0:00	1:00	D
-Rule	Cuba	1965	only	-	Sep	30	0:00	0	S
-Rule	Cuba	1966	only	-	May	29	0:00	1:00	D
-Rule	Cuba	1966	only	-	Oct	2	0:00	0	S
-Rule	Cuba	1967	only	-	Apr	8	0:00	1:00	D
-Rule	Cuba	1967	1968	-	Sep	Sun>=8	0:00	0	S
-Rule	Cuba	1968	only	-	Apr	14	0:00	1:00	D
-Rule	Cuba	1969	1977	-	Apr	lastSun	0:00	1:00	D
-Rule	Cuba	1969	1971	-	Oct	lastSun	0:00	0	S
-Rule	Cuba	1972	1974	-	Oct	8	0:00	0	S
-Rule	Cuba	1975	1977	-	Oct	lastSun	0:00	0	S
-Rule	Cuba	1978	only	-	May	7	0:00	1:00	D
-Rule	Cuba	1978	1990	-	Oct	Sun>=8	0:00	0	S
-Rule	Cuba	1979	1980	-	Mar	Sun>=15	0:00	1:00	D
-Rule	Cuba	1981	1985	-	May	Sun>=5	0:00	1:00	D
-Rule	Cuba	1986	1989	-	Mar	Sun>=14	0:00	1:00	D
-Rule	Cuba	1990	1997	-	Apr	Sun>=1	0:00	1:00	D
-Rule	Cuba	1991	1995	-	Oct	Sun>=8	0:00s	0	S
-Rule	Cuba	1996	only	-	Oct	 6	0:00s	0	S
-Rule	Cuba	1997	only	-	Oct	12	0:00s	0	S
-Rule	Cuba	1998	1999	-	Mar	lastSun	0:00s	1:00	D
-Rule	Cuba	1998	2003	-	Oct	lastSun	0:00s	0	S
-Rule	Cuba	2000	max	-	Apr	Sun>=1	0:00s	1:00	D
-Rule	Cuba	2005	max	-	Oct	lastSun	0:00s	0	S
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Havana	-5:29:28 -	LMT	1890
-			-5:29:36 -	HMT	1925 Jul 19 12:00 # Havana MT
-			-5:00	Cuba	C%sT
-
-# Dominica
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Dominica	-4:05:36 -	LMT	1911 Jul 1 0:01		# Roseau
-			-4:00	-	AST
-
-# Dominican Republic
-
-# From Steffen Thorsen (2000-10-30):
-# Enrique Morales reported to me that the Dominican Republic has changed the
-# time zone to Eastern Standard Time as of Sunday 29 at 2 am....
-# http://www.listin.com.do/antes/261000/republica/princi.html
-
-# From Paul Eggert (2000-12-04):
-# That URL (2000-10-26, in Spanish) says they planned to use US-style DST.
-
-# From Rives McDow (2000-12-01):
-# Dominican Republic changed its mind and presidential decree on Tuesday,
-# November 28, 2000, with a new decree.  On Sunday, December 3 at 1:00 AM the
-# Dominican Republic will be reverting to 8 hours from the International Date
-# Line, and will not be using DST in the foreseeable future.  The reason they
-# decided to use DST was to be in synch with Puerto Rico, who was also going
-# to implement DST.  When Puerto Rico didn't implement DST, the president
-# decided to revert.
-
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	DR	1966	only	-	Oct	30	0:00	1:00	D
-Rule	DR	1967	only	-	Feb	28	0:00	0	S
-Rule	DR	1969	1973	-	Oct	lastSun	0:00	0:30	HD
-Rule	DR	1970	only	-	Feb	21	0:00	0	S
-Rule	DR	1971	only	-	Jan	20	0:00	0	S
-Rule	DR	1972	1974	-	Jan	21	0:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Santo_Domingo -4:39:36 -	LMT	1890
-			-4:40	-	SDMT	1933 Apr  1 12:00 # S. Dom. MT
-			-5:00	DR	E%sT	1974 Oct 27
-			-4:00	-	AST	2000 Oct 29 02:00
-			-5:00	US	E%sT	2000 Dec  3 01:00
-			-4:00	-	AST
-
-# El Salvador
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Salv	1987	1988	-	May	Sun>=1	0:00	1:00	D
-Rule	Salv	1987	1988	-	Sep	lastSun	0:00	0	S
-# There are too many San Salvadors elsewhere, so use America/El_Salvador
-# instead of America/San_Salvador.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/El_Salvador -5:56:48 -	LMT	1921		# San Salvador
-			-6:00	Salv	C%sT
-
-# Grenada
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Grenada	-4:07:00 -	LMT	1911 Jul	# St George's
-			-4:00	-	AST
-
-# Guadeloupe
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Guadeloupe	-4:06:08 -	LMT	1911 Jun 8	# Pointe a Pitre
-			-4:00	-	AST
-
-# Guatemala
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Guat	1973	only	-	Nov	25	0:00	1:00	D
-Rule	Guat	1974	only	-	Feb	24	0:00	0	S
-Rule	Guat	1983	only	-	May	21	0:00	1:00	D
-Rule	Guat	1983	only	-	Sep	22	0:00	0	S
-Rule	Guat	1991	only	-	Mar	23	0:00	1:00	D
-Rule	Guat	1991	only	-	Sep	 7	0:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Guatemala	-6:02:04 -	LMT	1918 Oct 5
-			-6:00	Guat	C%sT
-
-# Haiti
-# From Gwillim Law (2005-04-15):
-# Risto O. Nykanen wrote me that Haiti is now on DST.
-# I searched for confirmation, and I found a
-# <a href="http://www.haitianconsulate.org/time.doc"> press release
-# on the Web page of the Haitian Consulate in Chicago (2005-03-31),
-# </a>.  Translated from French, it says:
-#
-#  "The Prime Minister's Communication Office notifies the public in general
-#   and the press in particular that, following a decision of the Interior
-#   Ministry and the Territorial Collectivities [I suppose that means the
-#   provinces], Haiti will move to Eastern Daylight Time in the night from next
-#   Saturday the 2nd to Sunday the 3rd.
-#
-#  "Consequently, the Prime Minister's Communication Office wishes to inform
-#   the population that the country's clocks will be set forward one hour
-#   starting at midnight.  This provision will hold until the last Saturday in
-#   October 2005.
-#
-#  "Port-au-Prince, March 31, 2005"
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Haiti	1983	only	-	May	8	0:00	1:00	D
-Rule	Haiti	1984	1987	-	Apr	lastSun	0:00	1:00	D
-Rule	Haiti	1983	1987	-	Oct	lastSun	0:00	0	S
-# Shanks says AT is 2:00, but IATA SSIM (1991/1997) says 1:00s.  Go with IATA.
-Rule	Haiti	1988	1997	-	Apr	Sun>=1	1:00s	1:00	D
-Rule	Haiti	1988	1997	-	Oct	lastSun	1:00s	0	S
-Rule	Haiti	2005	only	-	Apr	Sun>=1	0:00	1:00	D
-Rule	Haiti	2005	only	-	Oct	lastSun	0:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Port-au-Prince -4:49:20 -	LMT	1890
-			-4:49	-	PPMT	1917 Jan 24 12:00 # P-a-P MT
-			-5:00	Haiti	E%sT
-
-# Honduras
-# Shanks says 1921 Jan 1; go with Whitman's more precise Apr 1.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Tegucigalpa -5:48:52 -	LMT	1921 Apr
-			-6:00	Salv	C%sT
-#
-# Great Swan I ceded by US to Honduras in 1972
-
-# Jamaica
-
-# From Bob Devine (1988-01-28):
-# Follows US rules.
-
-# From U. S. Naval Observatory (1989-01-19):
-# JAMAICA             5 H  BEHIND UTC
-
-# From Shanks:
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Jamaica	-5:07:12 -	LMT	1890		# Kingston
-			-5:07:12 -	KMT	1912 Feb    # Kingston Mean Time
-			-5:00	-	EST	1974 Apr 28 2:00
-			-5:00	US	E%sT	1984
-			-5:00	-	EST
-
-# Martinique
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Martinique	-4:04:20 -      LMT	1890		# Fort-de-France
-			-4:04:20 -	FFMT	1911 May     # Fort-de-France MT
-			-4:00	-	AST	1980 Apr  6
-			-4:00	1:00	ADT	1980 Sep 28
-			-4:00	-	AST
-
-# Montserrat
-# From Paul Eggert (1997-08-31):
-# Recent volcanic eruptions have forced evacuation of Plymouth, the capital.
-# Luckily, Olveston, the current de facto capital, has the same longitude.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Montserrat	-4:08:52 -	LMT	1911 Jul 1 0:01   # Olveston
-			-4:00	-	AST
-
-# Nicaragua
-#
-# From Steffen Thorsen (1998-12-29):
-# Nicaragua seems to be back at -6:00 but I have not been able to find when
-# they changed from -5:00.
-#
-# From Steffen Thorsen (2005-04-12):
-# I've got reports from 8 different people that Nicaragua just started
-# DST on Sunday 2005-04-10, in order to save energy because of
-# expensive petroleum.  The exact end date for DST is not yet
-# announced, only "September" but some sites also say "mid-September".
-# Some background information is available on the President's official site:
-# http://www.presidencia.gob.ni/Presidencia/Files_index/Secretaria/Notas%20de%20Prensa/Presidente/2005/ABRIL/Gobierno-de-nicaragua-adelanta-hora-oficial-06abril.htm
-# The Decree, no 23-2005 is available here:
-# http://www.presidencia.gob.ni/buscador_gaceta/BD/DECRETOS/2005/Decreto%2023-2005%20Se%20adelanta%20en%20una%20hora%20en%20todo%20el%20territorio%20nacional%20apartir%20de%20las%2024horas%20del%2009%20de%20Abril.pdf
-#
-# From Paul Eggert (2005-04-12):
-# The decree doesn't say anything about daylight saving, but for now let's
-# assume that it is daylight saving and that they'll switch back on the
-# 2nd Sunday in September.
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Nic	1979	1980	-	Mar	Sun>=16	0:00	1:00	D
-Rule	Nic	1979	1980	-	Jun	Mon>=23	0:00	0	S
-Rule	Nic	1992	only	-	Jan	1	4:00	1:00	D
-Rule	Nic	1992	only	-	Sep	24	0:00	0	S
-Rule	Nic	2005	only	-	Apr	10	0:00	1:00	D
-Rule	Nic	2005	only	-	Sep	11	0:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Managua	-5:45:08 -	LMT	1890
-			-5:45:12 -	MMT	1934 Jun 23 # Managua Mean Time?
-			-6:00	-	CST	1973 May
-			-5:00	-	EST	1975 Feb 16
-			-6:00	Nic	C%sT	1993 Jan 1 4:00
-			-5:00	-	EST	1998 Dec
-			-6:00	Nic	C%sT
-
-# Panama
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Panama	-5:18:08 -	LMT	1890
-			-5:19:36 -	CMT	1908 Apr 22   # Colon Mean Time
-			-5:00	-	EST
-
-# Puerto Rico
-# There are too many San Juans elsewhere, so we'll use `Puerto_Rico'.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Puerto_Rico -4:24:25 -	LMT	1899 Mar 28 12:00    # San Juan
-			-4:00	-	AST	1942 May  3
-			-4:00	1:00	AWT	1945 Sep 30  2:00
-			-4:00	-	AST
-
-# St Kitts-Nevis
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/St_Kitts	-4:10:52 -	LMT	1912 Mar 2	# Basseterre
-			-4:00	-	AST
-
-# St Lucia
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/St_Lucia	-4:04:00 -	LMT	1890		# Castries
-			-4:04:00 -	CMT	1912	    # Castries Mean Time
-			-4:00	-	AST
-
-# St Pierre and Miquelon
-# There are too many St Pierres elsewhere, so we'll use `Miquelon'.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Miquelon	-3:44:40 -	LMT	1911 May 15	# St Pierre
-			-4:00	-	AST	1980 May
-			-3:00	-	PMST	1987 # Pierre & Miquelon Time
-			-3:00	Canada	PM%sT
-
-# St Vincent and the Grenadines
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/St_Vincent	-4:04:56 -	LMT	1890		# Kingstown
-			-4:04:56 -	KMT	1912	   # Kingstown Mean Time
-			-4:00	-	AST
-
-# Turks and Caicos
-# From Paul Eggert (1998-08-06):
-# Shanks says they use US DST rules, but IATA SSIM (1991/1998)
-# says they switch at midnight.  Go with IATA SSIM.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	TC	1979	1986	-	Apr	lastSun	0:00	1:00	D
-Rule	TC	1979	max	-	Oct	lastSun	0:00	0	S
-Rule	TC	1987	max	-	Apr	Sun>=1	0:00	1:00	D
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Grand_Turk	-4:44:32 -	LMT	1890
-			-5:07:12 -	KMT	1912 Feb    # Kingston Mean Time
-			-5:00	TC	E%sT
-
-# British Virgin Is
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Tortola	-4:18:28 -	LMT	1911 Jul    # Road Town
-			-4:00	-	AST
-
-# Virgin Is
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/St_Thomas	-4:19:44 -	LMT	1911 Jul    # Charlotte Amalie
-			-4:00	-	AST
+# @(#)northamerica	7.75
+# also includes Central America and the Caribbean
+
+# This data is by no means authoritative; if you think you know better,
+# go ahead and edit the file (and please send any changes to
+# tz@elsie.nci.nih.gov for general use in the future).
+
+# From Paul Eggert (1999-03-22):
+# A reliable and entertaining source about time zones is
+# Derek Howse, Greenwich time and longitude, Philip Wilson Publishers (1997).
+
+###############################################################################
+
+# United States
+
+# From Paul Eggert (1999-03-31):
+# Howse writes (pp 121-125) that time zones were invented by
+# Professor Charles Ferdinand Dowd (1825-1904),
+# Principal of Temple Grove Ladies' Seminary (Saratoga Springs, NY).
+# His pamphlet ``A System of National Time for Railroads'' (1870)
+# was the result of his proposals at the Convention of Railroad Trunk Lines
+# in New York City (1869-10).  His 1870 proposal was based on Washington, DC,
+# but in 1872-05 he moved the proposed origin to Greenwich.
+# His proposal was adopted by the railroads on 1883-11-18 at 12:00,
+# and the most of the country soon followed suit.
+
+# From Paul Eggert (2005-04-16):
+# That 1883 transition occurred at 12:00 new time, not at 12:00 old time.
+# See p 46 of David Prerau, Seize the daylight, Thunder's Mouth Press (2005).
+
+# From Paul Eggert (1995-12-19):
+# A good source for time zone historical data in the US is
+# Thomas G. Shanks, The American Atlas (5th edition),
+# San Diego: ACS Publications, Inc. (1991).
+# Make sure you have the errata sheet; the book is somewhat useless without it.
+# It is the source for most of the pre-1991 US and Puerto Rico entries below.
+
+# From Paul Eggert (2001-03-06):
+# Daylight Saving Time was first suggested as a joke by Benjamin Franklin
+# in his whimsical essay ``An Economical Project for Diminishing the Cost
+# of Light'' published in the Journal de Paris (1784-04-26).
+# Not everyone is happy with the results:
+#
+#	I don't really care how time is reckoned so long as there is some
+#	agreement about it, but I object to being told that I am saving
+#	daylight when my reason tells me that I am doing nothing of the kind.
+#	I even object to the implication that I am wasting something
+#	valuable if I stay in bed after the sun has risen.  As an admirer
+#	of moonlight I resent the bossy insistence of those who want to
+#	reduce my time for enjoying it.  At the back of the Daylight Saving
+#	scheme I detect the bony, blue-fingered hand of Puritanism, eager
+#	to push people into bed earlier, and get them up earlier, to make
+#	them healthy, wealthy and wise in spite of themselves.
+#
+#	-- Robertson Davies, The diary of Samuel Marchbanks,
+#	   Clarke, Irwin (1947), XIX, Sunday
+#
+# For more about the first ten years of DST in the United States, see
+# Robert Garland's <a href="http://www.clpgh.org/exhibit/dst.html">
+# Ten years of daylight saving from the Pittsburgh standpoint
+# (Carnegie Library of Pittsburgh, 1927)</a>.
+#
+# Shanks says that DST was called "War Time" in the US in 1918 and 1919.
+# However, DST was imposed by the Standard Time Act of 1918, which
+# was the first nationwide legal time standard, and apparently
+# time was just called "Standard Time" or "Daylight Saving Time".
+
+# From Arthur David Olson:
+# US Daylight Saving Time ended on the last Sunday of *October* in 1974.
+# See, for example, the front page of the Saturday, 1974-10-26
+# and Sunday, 1974-10-27 editions of the Washington Post.
+
+# From Arthur David Olson:
+# Before the Uniform Time Act of 1966 took effect in 1967, observance of
+# Daylight Saving Time in the US was by local option, except during wartime.
+
+# From Arthur David Olson (2000-09-25):
+# Last night I heard part of a rebroadcast of a 1945 Arch Oboler radio drama.
+# In the introduction, Oboler spoke of "Eastern Peace Time."
+# An AltaVista search turned up
+# <a href="http://rowayton.org/rhs/hstaug45.html">:
+# "When the time is announced over the radio now, it is 'Eastern Peace
+# Time' instead of the old familiar 'Eastern War Time.'  Peace is wonderful."
+# </a> (August 1945) by way of confirmation.
+
+# From Joseph Gallant citing
+# George H. Douglas, _The Early Days of Radio Broadcasting_ (1987):
+# At 7 P.M. (Eastern War Time) [on 1945-08-14], the networks were set
+# to switch to London for Attlee's address, but the American people
+# never got to hear his speech live. According to one press account,
+# CBS' Bob Trout was first to announce the word of Japan's surrender,
+# but a few seconds later, NBC, ABC and Mutual also flashed the word
+# of surrender, all of whom interrupting the bells of Big Ben in
+# London which were to precede Mr. Attlee's speech.
+
+# From Paul Eggert (2003-02-09): It was Robert St John, not Bob Trout.  From
+# Myrna Oliver's obituary of St John on page B16 of today's Los Angeles Times:
+#
+# ... a war-weary U.S. clung to radios, awaiting word of Japan's surrender.
+# Any announcement from Asia would reach St. John's New York newsroom on a
+# wire service teletype machine, which had prescribed signals for major news.
+# Associated Press, for example, would ring five bells before spewing out
+# typed copy of an important story, and 10 bells for news "of transcendental
+# importance."
+#
+# On Aug. 14, stalling while talking steadily into the NBC networks' open
+# microphone, St. John heard five bells and waited only to hear a sixth bell,
+# before announcing confidently: "Ladies and gentlemen, World War II is over.
+# The Japanese have agreed to our surrender terms."
+#
+# He had scored a 20-second scoop on other broadcasters.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	US	1918	1919	-	Mar	lastSun	2:00	1:00	D
+Rule	US	1918	1919	-	Oct	lastSun	2:00	0	S
+Rule	US	1942	only	-	Feb	9	2:00	1:00	W # War
+Rule	US	1945	only	-	Aug	14	23:00u	1:00	P # Peace
+Rule	US	1945	only	-	Sep	30	2:00	0	S
+Rule	US	1967	max	-	Oct	lastSun	2:00	0	S
+Rule	US	1967	1973	-	Apr	lastSun	2:00	1:00	D
+Rule	US	1974	only	-	Jan	6	2:00	1:00	D
+Rule	US	1975	only	-	Feb	23	2:00	1:00	D
+Rule	US	1976	1986	-	Apr	lastSun	2:00	1:00	D
+Rule	US	1987	max	-	Apr	Sun>=1	2:00	1:00	D
+# <a href="http://thomas.loc.gov/cgi-bin/bdquery/z?d106:h.r.00177:">
+# H.R.177
+# </a> (introduced 1999-01-06) would change April to March in the above rule.
+
+# From Bob Devine (1988-01-28):
+# ...Alaska (and Hawaii) had the timezone names changed in 1967.
+#    old			 new
+#    Pacific Standard Time(PST)  -same-
+#    Yukon Standard Time(YST)    -same-
+#    Central Alaska S.T. (CAT)   Alaska-Hawaii St[an]dard Time (AHST)
+#    Nome Standard Time (NT)     Bering Standard Time (BST)
+#
+# ...Alaska's timezone lines were redrawn in 1983 to give only 2 tz.
+#    The YST zone now covers nearly all of the state, AHST just part
+#    of the Aleutian islands.   No DST.
+
+# From Paul Eggert (1995-12-19):
+# The tables below use `NST', not `NT', for Nome Standard Time.
+# I invented `CAWT' for Central Alaska War Time.
+
+# From U. S. Naval Observatory (1989-01-19):
+# USA  EASTERN       5 H  BEHIND UTC    NEW YORK, WASHINGTON
+# USA  EASTERN       4 H  BEHIND UTC    APR 3 - OCT 30
+# USA  CENTRAL       6 H  BEHIND UTC    CHICAGO, HOUSTON
+# USA  CENTRAL       5 H  BEHIND UTC    APR 3 - OCT 30
+# USA  MOUNTAIN      7 H  BEHIND UTC    DENVER
+# USA  MOUNTAIN      6 H  BEHIND UTC    APR 3 - OCT 30
+# USA  PACIFIC       8 H  BEHIND UTC    L.A., SAN FRANCISCO
+# USA  PACIFIC       7 H  BEHIND UTC    APR 3 - OCT 30
+# USA  ALASKA STD    9 H  BEHIND UTC    MOST OF ALASKA     (AKST)
+# USA  ALASKA STD    8 H  BEHIND UTC    APR 3 - OCT 30 (AKDT)
+# USA  ALEUTIAN     10 H  BEHIND UTC    ISLANDS WEST OF 170W
+# USA  - " -         9 H  BEHIND UTC    APR 3 - OCT 30
+# USA  HAWAII       10 H  BEHIND UTC
+# USA  BERING       11 H  BEHIND UTC    SAMOA, MIDWAY
+
+# From Arthur David Olson (1989-01-21):
+# The above dates are for 1988.
+# Note the "AKST" and "AKDT" abbreviations, the claim that there's
+# no DST in Samoa, and the claim that there is DST in Alaska and the
+# Aleutians.
+
+# From Arthur David Olson (1988-02-13):
+# Legal standard time zone names, from United States Code (1982 Edition and
+# Supplement III), Title 15, Chapter 6, Section 260 and forward.  First, names
+# up to 1967-04-01 (when most provisions of the Uniform Time Act of 1966
+# took effect), as explained in sections 263 and 261:
+#	(none)
+#	United States standard eastern time
+#	United States standard mountain time
+#	United States standard central time
+#	United States standard Pacific time
+#	(none)
+#	United States standard Alaska time
+#	(none)
+# Next, names from 1967-04-01 until 1983-11-30 (the date for
+# public law 98-181):
+#	Atlantic standard time
+#	eastern standard time
+#	central standard time
+#	mountain standard time
+#	Pacific standard time
+#	Yukon standard time
+#	Alaska-Hawaii standard time
+#	Bering standard time
+# And after 1983-11-30:
+#	Atlantic standard time
+#	eastern standard time
+#	central standard time
+#	mountain standard time
+#	Pacific standard time
+#	Alaska standard time
+#	Hawaii-Aleutian standard time
+#	Samoa standard time
+# The law doesn't give abbreviations.
+#
+# From Paul Eggert (2000-01-08), following a heads-up from Rives McDow:
+# Public law 106-564 (2000-12-23) introduced the abbreviation
+# "Chamorro Standard Time" for time in Guam and the Northern Marianas.
+# See the file "australasia".
+
+
+# US eastern time, represented by New York
+
+# Connecticut, Delaware, District of Columbia, most of Florida,
+# Georgia, southeast Indiana (Clark, Dearborn, Floyd, Harrison, and
+# Ohio counties), eastern Kentucky, Maine, Maryland, Massachusetts,
+# New Hampshire, New Jersey, New York, North Carolina, Ohio,
+# Pennsylvania, Rhode Island, South Carolina, eastern Tennessee,
+# Vermont, Virginia, West Virginia
+
+# From Dave Cantor (2004-11-02):
+# Early this summer I had the occasion to visit the Mount Washington
+# Observatory weather station atop (of course!) Mount Washington [, NH]....
+# One of the staff members said that the station was on Eastern Standard Time
+# and didn't change their clocks for Daylight Saving ... so that their
+# reports will always have times which are 5 hours behind UTC.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
+Rule	NYC	1920	only	-	Mar	lastSun	2:00	1:00	D
+Rule	NYC	1920	only	-	Oct	lastSun	2:00	0	S
+Rule	NYC	1921	1966	-	Apr	lastSun	2:00	1:00	D
+Rule	NYC	1921	1954	-	Sep	lastSun	2:00	0	S
+Rule	NYC	1955	1966	-	Oct	lastSun	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/New_York	-4:56:02 -	LMT	1883 Nov 18 12:03:58
+			-5:00	US	E%sT	1920
+			-5:00	NYC	E%sT	1942
+			-5:00	US	E%sT	1946
+			-5:00	NYC	E%sT	1967
+			-5:00	US	E%sT
+
+# US central time, represented by Chicago
+
+# Alabama, Arkansas, Florida panhandle (Bay, Calhoun, Escambia,
+# Gulf, Holmes, Jackson, Okaloosa, Santa Rosa, Walton, and
+# Washington counties), Illinois, western Indiana
+# (Gibson, Jasper, Lake, LaPorte, Newton, Porter, Posey, Spencer,
+# Vanderburgh, and Warrick counties), Iowa, most of Kansas, western
+# Kentucky, Louisiana, Minnesota, Mississippi, Missouri, eastern
+# Nebraska, eastern North Dakota, Oklahoma, eastern South Dakota,
+# western Tennessee, most of Texas, Wisconsin
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
+Rule	Chicago	1920	only	-	Jun	13	2:00	1:00	D
+Rule	Chicago	1920	1921	-	Oct	lastSun	2:00	0	S
+Rule	Chicago	1921	only	-	Mar	lastSun	2:00	1:00	D
+Rule	Chicago	1922	1966	-	Apr	lastSun	2:00	1:00	D
+Rule	Chicago	1922	1954	-	Sep	lastSun	2:00	0	S
+Rule	Chicago	1955	1966	-	Oct	lastSun	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Chicago	-5:50:36 -	LMT	1883 Nov 18 12:09:24
+			-6:00	US	C%sT	1920
+			-6:00	Chicago	C%sT	1936 Mar  1 2:00
+			-5:00	-	EST	1936 Nov 15 2:00
+			-6:00	Chicago	C%sT	1942
+			-6:00	US	C%sT	1946
+			-6:00	Chicago	C%sT	1967
+			-6:00	US	C%sT
+# Oliver County, ND switched from mountain to central time on 1992-10-25.
+Zone America/North_Dakota/Center -6:45:12 - LMT	1883 Nov 18 12:14:48
+			-7:00	US	M%sT	1992 Oct 25 02:00
+			-6:00	US	C%sT
+
+# US mountain time, represented by Denver
+#
+# Colorado, far western Kansas, Montana, western
+# Nebraska, Nevada border (Jackpot, Owyhee, and Mountain City),
+# New Mexico, southwestern North Dakota, far eastern Oregon,
+# western South Dakota, far western Texas (El Paso County, Hudspeth County,
+# and Pine Springs and Nickel Creek in Culberson County), Utah, Wyoming
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
+Rule	Denver	1920	1921	-	Mar	lastSun	2:00	1:00	D
+Rule	Denver	1920	only	-	Oct	lastSun	2:00	0	S
+Rule	Denver	1921	only	-	May	22	2:00	0	S
+Rule	Denver	1965	1966	-	Apr	lastSun	2:00	1:00	D
+Rule	Denver	1965	1966	-	Oct	lastSun	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Denver	-6:59:56 -	LMT	1883 Nov 18 12:00:04
+			-7:00	US	M%sT	1920
+			-7:00	Denver	M%sT	1942
+			-7:00	US	M%sT	1946
+			-7:00	Denver	M%sT	1967
+			-7:00	US	M%sT
+
+# US Pacific time, represented by Los Angeles
+#
+# California, northern Idaho (Benewah, Bonner, Boundary, Clearwater,
+# Idaho, Kootenai, Latah, Lewis, Nez Perce, and Shoshone counties),
+# most of Nevada, most of Oregon, and Washington
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
+Rule	CA	1948	only	-	Mar	14	2:00	1:00	D
+Rule	CA	1949	only	-	Jan	 1	2:00	0	S
+Rule	CA	1950	1966	-	Apr	lastSun	2:00	1:00	D
+Rule	CA	1950	1961	-	Sep	lastSun	2:00	0	S
+Rule	CA	1962	1966	-	Oct	lastSun	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Los_Angeles -7:52:58 -	LMT	1883 Nov 18 12:07:02
+			-8:00	US	P%sT	1946
+			-8:00	CA	P%sT	1967
+			-8:00	US	P%sT
+
+# Alaska
+# AK%sT is the modern abbreviation for -9:00 per USNO.
+#
+# From Paul Eggert (2001-05-30):
+# Howse writes that Alaska switched from the Julian to the Gregorian calendar,
+# and from east-of-GMT to west-of-GMT days, when the US bought it from Russia.
+# This was on 1867-10-18, a Friday; the previous day was 1867-10-06 Julian,
+# also a Friday.  Include only the time zone part of this transition,
+# ignoring the switch from Julian to Gregorian, since we can't represent
+# the Julian calendar.
+#
+# As far as we know, none of the exact locations mentioned below were
+# permanently inhabited in 1867 by anyone using either calendar.
+# (Yakutat was colonized by the Russians in 1799, but the settlement
+# was destroyed in 1805 by a Yakutat-kon war party.)  However, there
+# were nearby inhabitants in some cases and for our purposes perhaps
+# it's best to simply use the official transition.
+#
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Juneau	 15:02:19 -	LMT	1867 Oct 18
+			 -8:57:41 -	LMT	1900 Aug 20 12:00
+			 -8:00	-	PST	1942
+			 -8:00	US	P%sT	1946
+			 -8:00	-	PST	1969
+			 -8:00	US	P%sT	1983 Oct 30 2:00
+			 -9:00	US	Y%sT	1983 Nov 30
+			 -9:00	US	AK%sT
+Zone America/Yakutat	 14:41:05 -	LMT	1867 Oct 18
+			 -9:18:55 -	LMT	1900 Aug 20 12:00
+			 -9:00	-	YST	1942
+			 -9:00	US	Y%sT	1946
+			 -9:00	-	YST	1969
+			 -9:00	US	Y%sT	1983 Nov 30
+			 -9:00	US	AK%sT
+Zone America/Anchorage	 14:00:24 -	LMT	1867 Oct 18
+			 -9:59:36 -	LMT	1900 Aug 20 12:00
+			-10:00	-	CAT	1942
+			-10:00	US	CAT/CAWT 1946
+			-10:00	-	CAT	1967 Apr
+			-10:00	-	AHST	1969
+			-10:00	US	AH%sT	1983 Oct 30 2:00
+			 -9:00	US	Y%sT	1983 Nov 30
+			 -9:00	US	AK%sT
+Zone America/Nome	 12:58:21 -	LMT	1867 Oct 18
+			-11:01:38 -	LMT	1900 Aug 20 12:00
+			-11:00	-	NST	1942
+			-11:00	US	N%sT	1946
+			-11:00	-	NST	1967 Apr
+			-11:00	-	BST	1969
+			-11:00	US	B%sT	1983 Oct 30 2:00
+			 -9:00	US	Y%sT	1983 Nov 30
+			 -9:00	US	AK%sT
+Zone America/Adak	 12:13:21 -	LMT	1867 Oct 18
+			-11:46:38 -	LMT	1900 Aug 20 12:00
+			-11:00	-	NST	1942
+			-11:00	US	N%sT	1946
+			-11:00	-	NST	1967 Apr
+			-11:00	-	BST	1969
+			-11:00	US	B%sT	1983 Oct 30 2:00
+			-10:00	US	AH%sT	1983 Nov 30
+			-10:00	US	HA%sT
+# The following switches don't quite make our 1970 cutoff.
+#
+# Shanks writes that part of southwest Alaska (e.g. Aniak)
+# switched from -11:00 to -10:00 on 1968-09-22 at 02:00,
+# and another part (e.g. Akiak) made the same switch five weeks later.
+#
+# From David Flater (2004-11-09):
+# In e-mail, 2004-11-02, Ray Hudson, historian/liaison to the Unalaska
+# Historic Preservation Commission, provided this information, which
+# suggests that Unalaska deviated from statutory time from early 1967
+# possibly until 1983:
+#
+#  Minutes of the Unalaska City Council Meeting, January 10, 1967:
+#  "Except for St. Paul and Akutan, Unalaska is the only important
+#  location not on Alaska Standard Time.  The following resolution was
+#  made by William Robinson and seconded by Henry Swanson:  Be it
+#  resolved that the City of Unalaska hereby goes to Alaska Standard
+#  Time as of midnight Friday, January 13, 1967 (1 A.M. Saturday,
+#  January 14, Alaska Standard Time.)  This resolution was passed with
+#  three votes for and one against."
+
+# Hawaii
+#
+# From Arthur David Olson:
+# And then there's Hawaii.
+# DST was observed for one day in 1933;
+# standard time was changed by half an hour in 1947;
+# it's always standard as of 1986.
+#
+# From Paul Eggert:
+# Shanks says the 1933 experiment lasted for three weeks.  Go with Shanks.
+#
+Zone Pacific/Honolulu	-10:31:26 -	LMT	1900 Jan  1 12:00
+			-10:30	-	HST	1933 Apr 30 2:00
+			-10:30	1:00	HDT	1933 May 21 2:00
+			-10:30	US	H%sT	1947 Jun  8 2:00
+			-10:00	-	HST
+
+# Now we turn to US areas that have diverged from the consensus since 1970.
+
+# Arizona mostly uses MST.
+
+# From Paul Eggert (2002-10-20):
+#
+# The information in the rest of this paragraph is derived from the
+# <a href="http://www.dlapr.lib.az.us/links/daylight.htm">
+# Daylight Saving Time web page (2002-01-23)</a> maintained by the
+# Arizona State Library, Archives and Public Records.
+# Between 1944-01-01 and 1944-04-01 the State of Arizona used standard
+# time, but by federal law railroads, airlines, bus lines, military
+# personnel, and some engaged in interstate commerce continued to
+# observe war (i.e., daylight saving) time.  The 1944-03-17 Phoenix
+# Gazette says that was the date the law changed, and that 04-01 was
+# the date the state's clocks would change.  In 1945 the State of
+# Arizona used standard time all year, again with exceptions only as
+# mandated by federal law.  Arizona observed DST in 1967, but Arizona
+# Laws 1968, ch. 183 (effective 1968-03-21) repealed DST.
+#
+# Shanks says the 1944 experiment came to an end on 1944-03-17.
+# Go with the Arizona State Library instead.
+
+Zone America/Phoenix	-7:28:18 -	LMT	1883 Nov 18 11:31:42
+			-7:00	US	M%sT	1944 Jan  1 00:01
+			-7:00	-	MST	1944 Apr  1 00:01
+			-7:00	US	M%sT	1944 Oct  1 00:01
+			-7:00	-	MST	1967
+			-7:00	US	M%sT	1968 Mar 21
+			-7:00	-	MST
+# From Arthur David Olson (1988-02-13):
+# A writer from the Inter Tribal Council of Arizona, Inc.,
+# notes in private correspondence dated 1987-12-28 that "Presently, only the
+# Navajo Nation participates in the Daylight Saving Time policy, due to its
+# large size and location in three states."  (The "only" means that other
+# tribal nations don't use DST.)
+
+Link America/Denver America/Shiprock
+
+# Southern Idaho (Ada, Adams, Bannock, Bear Lake, Bingham, Blaine,
+# Boise, Bonneville, Butte, Camas, Canyon, Caribou, Cassia, Clark,
+# Custer, Elmore, Franklin, Fremont, Gem, Gooding, Jefferson, Jerome,
+# Lemhi, Lincoln, Madison, Minidoka, Oneida, Owyhee, Payette, Power,
+# Teton, Twin Falls, Valley, Washington counties) and eastern Oregon
+# switched four weeks late in 1974.
+#
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Boise	-7:44:49 -	LMT	1883 Nov 18 12:15:11
+			-8:00	US	P%sT	1923 May 13 2:00
+			-7:00	US	M%sT	1974
+			-7:00	-	MST	1974 Feb  3 2:00
+			-7:00	US	M%sT
+
+# Indiana
+#
+# For a map of Indiana's time zone regions, see:
+# <a href="http://www.mccsc.edu/time.html">
+# What time is it in Indiana?
+# </a> (1999-04-06)
+#
+# From Paul Eggert (1995-12-19):
+# Indiana generally observes either EST all year, or CST/CDT,
+# but areas near Cincinnati and Louisville use those cities' timekeeping
+# and in 1969 and 1970 the whole state observed daylight time;
+# and there are other exceptions as noted below.
+# Shanks partitions Indiana into 345 regions, each with its own time history,
+# and writes ``Even newspaper reports present contradictory information.''
+# Fortunately, most of the complexity occurred before our cutoff date of 1970.
+#
+# Since 1970, EST-only Indiana has been like America/Indianapolis,
+# with exceptions noted below for Crawford, Starke, and Switzerland counties.
+# The parts of Indiana not listed below have been like America/Chicago,
+# America/Louisville, or America/New_York.
+#
+# Other than Indianapolis, the Indiana place names are so nondescript
+# that they would be ambiguous if we left them at the `America' level.
+# So we reluctantly put them all in a subdirectory `America/Indiana'.
+#
+# Most of EST-only Indiana last observed DST in 1970.
+
+# From Paul Eggert (2001-03-06), following a tip by Markus Kuhn:
+# Pam Belluck reported in the New York Times (2001-01-31) that the
+# Indiana Legislature is considering a bill to adopt DST statewide.
+# Her article mentioned Vevay, whose post office observes a different
+# time zone from Danner's Hardware across the street.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
+Rule Indianapolis 1941	only	-	Jun	22	2:00	1:00	D
+Rule Indianapolis 1941	1954	-	Sep	lastSun	2:00	0	S
+Rule Indianapolis 1946	1954	-	Apr	lastSun	2:00	1:00	D
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Indianapolis -5:44:38 - LMT 1883 Nov 18 12:15:22
+			-6:00	US	C%sT	1920
+			-6:00 Indianapolis C%sT	1942
+			-6:00	US	C%sT	1946
+			-6:00 Indianapolis C%sT	1955 Apr 24 2:00
+			-5:00	-	EST	1957 Sep 29 2:00
+			-6:00	-	CST	1958 Apr 27 2:00
+			-5:00	-	EST	1969
+			-5:00	US	E%sT	1971
+			-5:00	-	EST
+Link America/Indianapolis America/Indiana/Indianapolis
+#
+# Part of Crawford County, Indiana, last observed DST in 1975,
+# and left its clocks alone in 1974.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
+Rule	Marengo	1951	only	-	Apr	lastSun	2:00	1:00	D
+Rule	Marengo	1951	only	-	Sep	lastSun	2:00	0	S
+Rule	Marengo	1954	1960	-	Apr	lastSun	2:00	1:00	D
+Rule	Marengo	1954	1960	-	Sep	lastSun	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Indiana/Marengo -5:45:23 -	LMT	1883 Nov 18 12:14:37
+			-6:00	US	C%sT	1951
+			-6:00	Marengo	C%sT	1961 Apr 30 2:00
+			-5:00	-	EST	1969
+			-5:00	US	E%sT	1974 Jan  6 2:00
+			-6:00	1:00	CDT	1974 Oct 27 2:00
+			-5:00	US	E%sT	1976
+			-5:00	-	EST
+#
+# Starke County, Indiana
+# From Arthur David Olson (1991-10-28):
+# An article on page A3 of the Sunday, 1991-10-27 Washington Post
+# notes that Starke County switched from Central time to Eastern time as of
+# 1991-10-27.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
+Rule	Starke	1947	1961	-	Apr	lastSun	2:00	1:00	D
+Rule	Starke	1947	1954	-	Sep	lastSun	2:00	0	S
+Rule	Starke	1955	1956	-	Oct	lastSun	2:00	0	S
+Rule	Starke	1957	1958	-	Sep	lastSun	2:00	0	S
+Rule	Starke	1959	1961	-	Oct	lastSun	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Indiana/Knox -5:46:30 -	LMT	1883 Nov 18 12:13:30
+			-6:00	US	C%sT	1947
+			-6:00	Starke	C%sT	1962 Apr 29 2:00
+			-5:00	-	EST	1963 Oct 27 2:00
+			-6:00	US	C%sT	1991 Oct 27 2:00
+			-5:00	-	EST
+#
+# Switzerland County, Indiana, last observed DST in 1972.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Indiana/Vevay -5:40:16 -	LMT	1883 Nov 18 12:19:44
+			-6:00	US	C%sT	1954 Apr 25 2:00
+			-5:00	-	EST	1969
+			-5:00	US	E%sT	1973
+			-5:00	-	EST
+
+# Part of Kentucky left its clocks alone in 1974.
+# This also includes a part of Indiana immediately adjacent to Louisville.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
+Rule Louisville	1921	only	-	May	1	2:00	1:00	D
+Rule Louisville	1921	only	-	Sep	1	2:00	0	S
+Rule Louisville	1941	1961	-	Apr	lastSun	2:00	1:00	D
+Rule Louisville	1941	only	-	Sep	lastSun	2:00	0	S
+Rule Louisville	1946	only	-	Jun	2	2:00	0	S
+Rule Louisville	1950	1955	-	Sep	lastSun	2:00	0	S
+Rule Louisville	1956	1960	-	Oct	lastSun	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Louisville	-5:43:02 -	LMT	1883 Nov 18 12:16:58
+			-6:00	US	C%sT	1921
+			-6:00 Louisville C%sT	1942
+			-6:00	US	C%sT	1946
+			-6:00 Louisville C%sT	1961 Jul 23 2:00
+			-5:00	-	EST	1968
+			-5:00	US	E%sT	1974 Jan  6 2:00
+			-6:00	1:00	CDT	1974 Oct 27 2:00
+			-5:00	US	E%sT
+Link America/Louisville America/Kentucky/Louisville
+#
+# Wayne, Clinton, and Russell Counties, Kentucky
+#
+# From
+# <a href="http://www.lake-cumberland.com/life/archive/news990129time.shtml">
+# Lake Cumberland LIFE
+# </a> (1999-01-29) via WKYM-101.7:
+# Clinton County has joined Wayne County in asking the DoT to change from
+# the Central to the Eastern time zone....  The Wayne County government made
+# the same request in December.  And while Russell County officials have not
+# taken action, the majority of respondents to a poll conducted there in
+# August indicated they would like to change to "fast time" also.
+# The three Lake Cumberland counties are the farthest east of any U.S.
+# location in the Central time zone.
+#
+# From Rich Wales (2000-08-29):
+# After prolonged debate, and despite continuing deep differences of opinion,
+# Wayne County (central Kentucky) is switching from Central (-0600) to Eastern
+# (-0500) time.  They won't "fall back" this year.  See Sara Shipley,
+# The difference an hour makes, Nando Times (2000-08-29 15:33 -0400).
+#
+# From Paul Eggert (2001-07-16):
+# The final rule was published in the
+# <a href="http://frwebgate.access.gpo.gov/cgi-bin/getdoc.cgi?dbname=2000_register&docid=fr17au00-22">
+# Federal Register 65, 160 (2000-08-17), page 50154-50158.
+# </a>
+#
+Zone America/Kentucky/Monticello -5:39:24 - LMT	1883 Nov 18 12:20:36
+			-6:00	US	C%sT	1946
+			-6:00	-	CST	1968
+			-6:00	US	C%sT	2000 Oct 29  2:00
+			-5:00	US	E%sT
+
+
+# From Rives McDow (2000-08-30):
+# Here ... are all the changes in the US since 1985.
+# Kearny County, KS (put all of county on central;
+#	previously split between MST and CST) ... 1990-10
+# Starke County, IN (from CST to EST) ... 1991-10
+# Oliver County, ND (from MST to CST) ... 1992-10
+# West Wendover, NV (from PST TO MST) ... 1999-10
+# Wayne County, KY (from CST to EST) ... 2000-10
+#
+# From Paul Eggert (2001-07-17):
+# We don't know where the line used to be within Kearny County, KS,
+# so omit that change for now.
+# See America/Indiana/Knox for the Starke County, IN change.
+# See America/North_Dakota/Center for the Oliver County, ND change.
+# West Wendover, NV officially switched from Pacific to mountain time on
+# 1999-10-31.  See the
+# <a href="http://frwebgate.access.gpo.gov/cgi-bin/getdoc.cgi?dbname=1999_register&docid=fr21oc99-15">
+# Federal Register 64, 203 (1999-10-21), page 56705-56707.
+# </a>
+# However, the Federal Register says that West Wendover already operated
+# on mountain time, and the rule merely made this official;
+# hence a separate tz entry is not needed.
+
+# Michigan
+#
+# From Bob Devine (1988-01-28):
+# Michigan didn't observe DST from 1968 to 1973.
+#
+# From Paul Eggert (1999-03-31):
+# Shanks writes that Michigan started using standard time on 1885-09-18,
+# but Howse writes (pp 124-125, referring to Popular Astronomy, 1901-01)
+# that Detroit kept
+#
+#	local time until 1900 when the City Council decreed that clocks should
+#	be put back twenty-eight minutes to Central Standard Time.  Half the
+#	city obeyed, half refused.  After considerable debate, the decision
+#	was rescinded and the city reverted to Sun time.  A derisive offer to
+#	erect a sundial in front of the city hall was referred to the
+#	Committee on Sewers.  Then, in 1905, Central time was adopted
+#	by city vote.
+#
+# This story is too entertaining to be false, so go with Howse over Shanks.
+#
+# From Paul Eggert (2001-03-06):
+# Garland (1927) writes ``Cleveland and Detroit advanced their clocks
+# one hour in 1914.''  This change is not in Shanks.  We have no more
+# info, so omit this for now.
+#
+# Most of Michigan observed DST from 1973 on, but was a bit late in 1975.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
+Rule	Detroit	1948	only	-	Apr	lastSun	2:00	1:00	D
+Rule	Detroit	1948	only	-	Sep	lastSun	2:00	0	S
+Rule	Detroit	1967	only	-	Jun	14	2:00	1:00	D
+Rule	Detroit	1967	only	-	Oct	lastSun	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Detroit	-5:32:11 -	LMT	1905
+			-6:00	-	CST	1915 May 15 2:00
+			-5:00	-	EST	1942
+			-5:00	US	E%sT	1946
+			-5:00	Detroit	E%sT	1973
+			-5:00	US	E%sT	1975
+			-5:00	-	EST	1975 Apr 27 2:00
+			-5:00	US	E%sT
+#
+# The Michigan border with Wisconsin switched from EST to CST/CDT in 1973.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
+Rule Menominee	1946	only	-	Apr	lastSun	2:00	1:00	D
+Rule Menominee	1946	only	-	Sep	lastSun	2:00	0	S
+Rule Menominee	1966	only	-	Apr	lastSun	2:00	1:00	D
+Rule Menominee	1966	only	-	Oct	lastSun	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Menominee	-5:50:27 -	LMT	1885 Sep 18 12:00
+			-6:00	US	C%sT	1946
+			-6:00 Menominee	C%sT	1969 Apr 27 2:00
+			-5:00	-	EST	1973 Apr 29 2:00
+			-6:00	US	C%sT
+
+# Navassa
+# administered by the US Fish and Wildlife Service
+# claimed by US under the provisions of the 1856 Guano Islands Act
+# also claimed by Haiti
+# occupied 1857/1900 by the Navassa Phosphate Co
+# US lighthouse 1917/1996-09
+# currently uninhabited
+# see Mark Fineman, ``An Isle Rich in Guano and Discord'',
+# _Los Angeles Times_ (1998-11-10), A1, A10; it cites
+# Jimmy Skaggs, _The Great Guano Rush_ (1994).
+
+# Old names, for S5 users
+
+# Link	LINK-FROM		LINK-TO
+Link	America/New_York	EST5EDT
+Link	America/Chicago		CST6CDT
+Link	America/Denver		MST7MDT
+Link	America/Los_Angeles	PST8PDT
+Link	America/Indianapolis	EST
+Link	America/Phoenix		MST
+Link	Pacific/Honolulu	HST
+
+################################################################################
+
+
+# From Paul Eggert (1999-10-29):
+# A good source for time zone historical data outside the US is
+# Thomas G. Shanks, The International Atlas (5th edition),
+# San Diego: ACS Publications, Inc. (1999).
+#
+# Gwillim Law writes that a good source
+# for recent time zone data is the International Air Transport
+# Association's Standard Schedules Information Manual (IATA SSIM),
+# published semiannually.  Law sent in several helpful summaries
+# of the IATA's data after 1990.
+#
+# Except where otherwise noted, Shanks is the source for entries through 1990,
+# and IATA SSIM is the source for entries after 1990.
+#
+# Other sources occasionally used include:
+#
+#	Edward W. Whitman, World Time Differences,
+#	Whitman Publishing Co, 2 Niagara Av, Ealing, London (undated),
+#	which I found in the UCLA library.
+#
+#	<a href="http://www.pettswoodvillage.co.uk/Daylight_Savings_William_Willett.pdf">
+#	William Willett, The Waste of Daylight, 19th edition
+#	</a> (1914-03)
+#
+# See the `europe' file for Greenland.
+
+# Canada
+
+# From Alain LaBont<e'> (1994-11-14):
+# I post here the time zone abbreviations standardized in Canada
+# for both English and French in the CAN/CSA-Z234.4-89 standard....
+#
+#	UTC	Standard time	Daylight savings time
+#	offset	French	English	French	English
+#	-2:30	-	-	HAT	NDT
+#	-3	-	-	HAA	ADT
+#	-3:30	HNT	NST	-	-
+#	-4	HNA	AST	HAE	EDT
+#	-5	HNE	EST	HAC	CDT
+#	-6	HNC	CST	HAR	MDT
+#	-7	HNR	MST	HAP	PDT
+#	-8	HNP	PST	HAY	YDT
+#	-9	HNY	YST	-	-
+#
+#	HN: Heure Normale	ST: Standard Time
+#	HA: Heure Avanc<e'>e	DT: Daylight saving Time
+#
+#	A: de l'Atlantique	Atlantic
+#	C: du Centre		Central
+#	E: de l'Est		Eastern
+#	M:			Mountain
+#	N:			Newfoundland
+#	P: du Pacifique		Pacific
+#	R: des Rocheuses
+#	T: de Terre-Neuve
+#	Y: du Yukon		Yukon
+#
+# From Paul Eggert (1994-11-22):
+# Alas, this sort of thing must be handled by localization software.
+
+# Unless otherwise specified, the data for Canada are all from Shanks.
+
+# From Paul Eggert (2000-10-02):
+# H. David Matthews and Mary Vincent's map
+# <a href="http://www.canadiangeographic.ca/SO98/geomap.htm">
+# "It's about TIME", _Canadian Geographic_ (September-October 1998)
+# </a> contains detailed boundaries for regions observing nonstandard
+# time and daylight saving time arrangements in Canada circa 1998.
+#
+# INMS, the Institute for National Measurement Standards in Ottawa, has
+# <a href="http://www.nrc.ca/inms/time/tze.html">
+# information about standard and daylight saving time zones in Canada.
+# </a> (updated periodically).
+# Its unofficial information is often taken from Matthews and Vincent.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Canada	1918	only	-	Apr	14	2:00	1:00	D
+Rule	Canada	1918	only	-	Oct	31	2:00	0	S
+Rule	Canada	1942	only	-	Feb	 9	2:00	1:00	W # War
+Rule	Canada	1945	only	-	Aug	14	23:00u	1:00	P # Peace
+Rule	Canada	1945	only	-	Sep	30	2:00	0	S
+Rule	Canada	1974	1986	-	Apr	lastSun	2:00	1:00	D
+Rule	Canada	1974	max	-	Oct	lastSun	2:00	0	S
+Rule	Canada	1987	max	-	Apr	Sun>=1	2:00	1:00	D
+
+
+# Newfoundland (and far southeast Labrador)
+
+# From Paul Eggert (2000-10-02):
+# Matthews and Vincent (1998) write that Labrador should use NST/NDT,
+# but the only part of Labrador that follows the rules is the
+# southeast corner, including Port Hope Simpson and Mary's Harbour,
+# but excluding, say, Black Tickle.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	StJohns	1917	only	-	Apr	 8	2:00	1:00	D
+Rule	StJohns	1917	only	-	Sep	17	2:00	0	S
+# Whitman gives 1919 Apr 5 and 1920 Apr 5; go with Shanks.
+Rule	StJohns	1919	only	-	May	 5	23:00	1:00	D
+Rule	StJohns	1919	only	-	Aug	12	23:00	0	S
+# For 1931-1935 Whitman gives Apr same date; go with Shanks.
+Rule	StJohns	1920	1935	-	May	Sun>=1	23:00	1:00	D
+Rule	StJohns	1920	1935	-	Oct	lastSun	23:00	0	S
+# For 1936-1941 Whitman gives May Sun>=8 and Oct Sun>=1; go with Shanks.
+Rule	StJohns	1936	1941	-	May	Mon>=9	0:00	1:00	D
+Rule	StJohns	1936	1941	-	Oct	Mon>=2	0:00	0	S
+# Whitman gives the following transitions:
+# 1942 03-01/12-31, 1943 05-30/09-05, 1944 07-10/09-02, 1945 01-01/10-07
+# but go with Shanks and assume they used Canadian rules.
+# For 1946-9 Whitman gives May 5,4,9,1 - Oct 1,5,3,2, and for 1950 he gives
+# Apr 30 - Sep 24; go with Shanks.
+Rule	StJohns	1946	1950	-	May	Sun>=8	2:00	1:00	D
+Rule	StJohns	1946	1950	-	Oct	Sun>=2	2:00	0	S
+Rule	StJohns	1951	1986	-	Apr	lastSun	2:00	1:00	D
+Rule	StJohns	1951	1959	-	Sep	lastSun	2:00	0	S
+Rule	StJohns	1960	1986	-	Oct	lastSun	2:00	0	S
+# From Paul Eggert (2000-10-02):
+# INMS (2000-09-12) says that, since 1988 at least, Newfoundland switches
+# at 00:01 local time.  For now, assume it started in 1987.
+Rule	StJohns	1987	only	-	Apr	Sun>=1	0:01	1:00	D
+Rule	StJohns	1987	max	-	Oct	lastSun	0:01	0	S
+Rule	StJohns	1988	only	-	Apr	Sun>=1	0:01	2:00	DD
+Rule	StJohns	1989	max	-	Apr	Sun>=1	0:01	1:00	D
+# St John's has an apostrophe, but Posix file names can't have apostrophes.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/St_Johns	-3:30:52 -	LMT	1884
+			-3:30:52 StJohns N%sT	1918
+			-3:30:52 Canada	N%sT	1919
+			-3:30:52 StJohns N%sT	1935 Mar 30
+			-3:30	StJohns	N%sT	1942 May 11
+			-3:30	Canada	N%sT	1946
+			-3:30	StJohns	N%sT
+
+# most of east Labrador
+
+# The name `Happy Valley-Goose Bay' is too long; use `Goose Bay'.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Goose_Bay	-4:01:40 -	LMT	1884 # Happy Valley-Goose Bay
+			-3:30:52 -	NST	1918
+			-3:30:52 Canada N%sT	1919
+			-3:30:52 -	NST	1935 Mar 30
+			-3:30	-	NST	1936
+			-3:30	StJohns	N%sT	1942 May 11
+			-3:30	Canada	N%sT	1946
+			-3:30	StJohns	N%sT	1966 Mar 15 2:00
+			-4:00	StJohns	A%sT
+
+
+# west Labrador, New Brunswick, Nova Scotia, Prince Edward I
+
+# From Paul Eggert (1996-06-12):
+# Shanks writes that since 1970 most of this region has been like Halifax.
+# Many locales did not observe peacetime DST until 1972;
+# Glace Bay, NS is the largest that we know of.
+# Shanks also writes that Liverpool, NS was the only town in Canada to observe
+# DST in 1971 but not 1970; for now we'll assume this is a typo.
+
+# From Paul Eggert (2000-10-02):
+# INMS (2000-09-12) says that, since 1988 at least, New Brunswick switches
+# at 00:01 local time.  FIXME: verify and create a new Zone for this.
+
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule Halifax	1916	only	-	Apr	 1	0:00	1:00	D
+Rule Halifax	1916	only	-	Oct	 1	0:00	0	S
+Rule Halifax	1920	only	-	May	 9	0:00	1:00	D
+Rule Halifax	1920	only	-	Aug	29	0:00	0	S
+Rule Halifax	1921	only	-	May	 6	0:00	1:00	D
+Rule Halifax	1921	1922	-	Sep	 5	0:00	0	S
+Rule Halifax	1922	only	-	Apr	30	0:00	1:00	D
+Rule Halifax	1923	1925	-	May	Sun>=1	0:00	1:00	D
+Rule Halifax	1923	only	-	Sep	 4	0:00	0	S
+Rule Halifax	1924	only	-	Sep	15	0:00	0	S
+Rule Halifax	1925	only	-	Sep	28	0:00	0	S
+Rule Halifax	1926	only	-	May	16	0:00	1:00	D
+Rule Halifax	1926	only	-	Sep	13	0:00	0	S
+Rule Halifax	1927	only	-	May	 1	0:00	1:00	D
+Rule Halifax	1927	only	-	Sep	26	0:00	0	S
+Rule Halifax	1928	1931	-	May	Sun>=8	0:00	1:00	D
+Rule Halifax	1928	only	-	Sep	 9	0:00	0	S
+Rule Halifax	1929	only	-	Sep	 3	0:00	0	S
+Rule Halifax	1930	only	-	Sep	15	0:00	0	S
+Rule Halifax	1931	1932	-	Sep	Mon>=24	0:00	0	S
+Rule Halifax	1932	only	-	May	 1	0:00	1:00	D
+Rule Halifax	1933	only	-	Apr	30	0:00	1:00	D
+Rule Halifax	1933	only	-	Oct	 2	0:00	0	S
+Rule Halifax	1934	only	-	May	20	0:00	1:00	D
+Rule Halifax	1934	only	-	Sep	16	0:00	0	S
+Rule Halifax	1935	only	-	Jun	 2	0:00	1:00	D
+Rule Halifax	1935	only	-	Sep	30	0:00	0	S
+Rule Halifax	1936	only	-	Jun	 1	0:00	1:00	D
+Rule Halifax	1936	only	-	Sep	14	0:00	0	S
+Rule Halifax	1937	1938	-	May	Sun>=1	0:00	1:00	D
+Rule Halifax	1937	1941	-	Sep	Mon>=24	0:00	0	S
+Rule Halifax	1939	only	-	May	28	0:00	1:00	D
+Rule Halifax	1940	1941	-	May	Sun>=1	0:00	1:00	D
+Rule Halifax	1946	1949	-	Sep	lastSun	2:00	0	S
+Rule Halifax	1946	1949	-	Apr	lastSun	2:00	1:00	D
+Rule Halifax	1951	1954	-	Sep	lastSun	2:00	0	S
+Rule Halifax	1951	1954	-	Apr	lastSun	2:00	1:00	D
+Rule Halifax	1956	1959	-	Sep	lastSun	2:00	0	S
+Rule Halifax	1956	1959	-	Apr	lastSun	2:00	1:00	D
+Rule Halifax	1962	1973	-	Apr	lastSun	2:00	1:00	D
+Rule Halifax	1962	1973	-	Oct	lastSun	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Halifax	-4:14:24 -	LMT	1902 Jun 15
+			-4:00	Halifax	A%sT	1918
+			-4:00	Canada	A%sT	1919
+			-4:00	Halifax	A%sT	1942 Feb  9 2:00s
+			-4:00	Canada	A%sT	1946
+			-4:00	Halifax	A%sT	1974
+			-4:00	Canada	A%sT
+Zone America/Glace_Bay	-3:59:48 -	LMT	1902 Jun 15
+			-4:00	Canada	A%sT	1953
+			-4:00	Halifax	A%sT	1954
+			-4:00	-	AST	1972
+			-4:00	Halifax	A%sT	1974
+			-4:00	Canada	A%sT
+
+
+# Ontario, Quebec
+
+# From Paul Eggert (1996-06-12):
+# Shanks writes that since 1970 most of Ontario has been like Toronto,
+# and most of Quebec has been like Montreal.
+# Thunder Bay skipped DST in 1973.
+# Many smaller locales did not observe peacetime DST until 1974;
+# Nipigon (EST) and Rainy River (CST) are the largest that we know of.
+# Far west Ontario is like Winnipeg; far east Quebec is like Halifax.
+
+# From Mark Brader (2003-07-26):
+# [According to the Toronto Star] Orillia, Ontario, adopted DST
+# effective Saturday, 1912-06-22, 22:00; the article mentions that
+# Port Arthur (now part of Thunder Bay, Ontario) as well as Moose Jaw
+# have already done so.  In Orillia DST was to run until Saturday,
+# 1912-08-31 (no time mentioned), but it was met with considerable
+# hostility from certain segments of the public, and was revoked after
+# only two weeks -- I copied it as Saturday, 1912-07-07, 22:00, but
+# presumably that should be -07-06.  (1912-06-19, -07-12; also letters
+# earlier in June).
+#
+# Kenora, Ontario, was to abandon DST on 1914-06-01 (-05-21).
+
+# From Paul Eggert (1997-10-17):
+# Mark Brader writes that an article in the 1997-10-14 Toronto Star
+# says that Atikokan, Ontario currently does not observe DST,
+# but will vote on 11-10 whether to use EST/EDT.
+# He also writes that the
+# <a href="http://www.gov.on.ca/MBS/english/publications/statregs/conttext.html">
+# Ontario Time Act (1990, Chapter T.9)
+# </a>
+# says that Ontario east of 90W uses EST/EDT, and west of 90W uses CST/CDT.
+# Officially Atikokan is therefore on CST/CDT, and most likely this report
+# concerns a non-official time observed as a matter of local practice.
+# For what it's worth, Shanks says that Atikokan has agreed with
+# Rainy River ever since standard time was introduced.
+
+# From Paul Eggert (2000-10-02):
+# Matthews and Vincent (1998) write that Atikokan, Pickle Lake, and
+# New Osnaburgh observe CST all year, that Big Trout Lake observes
+# CST/CDT, and that Upsala and Shebandowan observe EST/EDT, all in
+# violation of the official Ontario rules.
+# They also write that Quebec east of the -63 meridian is supposed to
+# observe AST, but residents as far east as Natashquan use EST/EDT,
+# and residents east of Natashquan use AST.
+# We probably need Zones for far east Quebec and for Atikokan,
+# but we don't know when their practices started.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Mont	1917	only	-	Mar	25	2:00	1:00	D
+Rule	Mont	1917	only	-	Apr	24	0:00	0	S
+Rule	Mont	1919	only	-	Mar	31	2:30	1:00	D
+Rule	Mont	1919	only	-	Oct	25	2:30	0	S
+Rule	Mont	1920	only	-	May	 2	2:30	1:00	D
+Rule	Mont	1920	1922	-	Oct	Sun>=1	2:30	0	S
+Rule	Mont	1921	only	-	May	 1	2:00	1:00	D
+Rule	Mont	1922	only	-	Apr	30	2:00	1:00	D
+Rule	Mont	1924	only	-	May	17	2:00	1:00	D
+Rule	Mont	1924	1926	-	Sep	lastSun	2:30	0	S
+Rule	Mont	1925	1926	-	May	Sun>=1	2:00	1:00	D
+# The 1927-to-1937 rules can be expressed more simply as
+# Rule	Mont	1927	1937	-	Apr	lastSat	24:00	1:00	D
+# Rule	Mont	1927	1937	-	Sep	lastSat	24:00	0	S
+# The rules below avoid use of 24:00
+# (which pre-1998 versions of zic cannot handle).
+Rule	Mont	1927	only	-	May	1	0:00	1:00	D
+Rule	Mont	1927	1932	-	Sep	lastSun	0:00	0	S
+Rule	Mont	1928	1931	-	Apr	lastSun	0:00	1:00	D
+Rule	Mont	1932	only	-	May	1	0:00	1:00	D
+Rule	Mont	1933	1940	-	Apr	lastSun	0:00	1:00	D
+Rule	Mont	1933	only	-	Oct	1	0:00	0	S
+Rule	Mont	1934	1939	-	Sep	lastSun	0:00	0	S
+Rule	Mont	1946	1973	-	Apr	lastSun	2:00	1:00	D
+Rule	Mont	1945	1948	-	Sep	lastSun	2:00	0	S
+Rule	Mont	1949	1950	-	Oct	lastSun	2:00	0	S
+Rule	Mont	1951	1956	-	Sep	lastSun	2:00	0	S
+Rule	Mont	1957	1973	-	Oct	lastSun	2:00	0	S
+
+Rule	Toronto	1919	only	-	Mar	30	23:30	1:00	D
+Rule	Toronto	1919	only	-	Oct	26	0:00	0	S
+Rule	Toronto	1920	only	-	May	 2	2:00	1:00	D
+Rule	Toronto	1920	only	-	Sep	26	0:00	0	S
+Rule	Toronto	1921	only	-	May	15	2:00	1:00	D
+Rule	Toronto	1921	only	-	Sep	15	2:00	0	S
+Rule	Toronto	1922	1923	-	May	Sun>=8	2:00	1:00	D
+# Shanks says 1923-09-19; assume it's a typo and that "-16" was meant.
+Rule	Toronto	1922	1926	-	Sep	Sun>=15	2:00	0	S
+Rule	Toronto	1924	1927	-	May	Sun>=1	2:00	1:00	D
+# The 1927-to-1939 rules can be expressed more simply as
+# Rule	Toronto	1927	1937	-	Sep	Sun>=25	2:00	0	S
+# Rule	Toronto	1928	1937	-	Apr	Sun>=25	2:00	1:00	D
+# Rule	Toronto	1938	1940	-	Apr	lastSun	2:00	1:00	D
+# Rule	Toronto	1938	1939	-	Sep	lastSun	2:00	0	S
+# The rules below avoid use of Sun>=25
+# (which pre-2004 versions of zic cannot handle).
+Rule	Toronto	1927	1932	-	Sep	lastSun	2:00	0	S
+Rule	Toronto	1928	1931	-	Apr	lastSun	2:00	1:00	D
+Rule	Toronto	1932	only	-	May	1	2:00	1:00	D
+Rule	Toronto	1933	1940	-	Apr	lastSun	2:00	1:00	D
+Rule	Toronto	1933	only	-	Oct	1	2:00	0	S
+Rule	Toronto	1934	1939	-	Sep	lastSun	2:00	0	S
+Rule	Toronto	1945	1946	-	Sep	lastSun	2:00	0	S
+Rule	Toronto	1946	only	-	Apr	lastSun	2:00	1:00	D
+Rule	Toronto	1947	1949	-	Apr	lastSun	0:00	1:00	D
+Rule	Toronto	1947	1948	-	Sep	lastSun	0:00	0	S
+Rule	Toronto	1949	only	-	Nov	lastSun	0:00	0	S
+Rule	Toronto	1950	1973	-	Apr	lastSun	2:00	1:00	D
+Rule	Toronto	1950	only	-	Nov	lastSun	2:00	0	S
+Rule	Toronto	1951	1956	-	Sep	lastSun	2:00	0	S
+# Shanks says Toronto ended DST a week early in 1971, namely on 1971-10-24,
+# but Mark Brader wrote (2003-05-31) that he checked the 1971-10-30 issue
+# of the Toronto Star, and it said that DST ended 1971-10-31 as usual.
+Rule	Toronto	1957	1973	-	Oct	lastSun	2:00	0	S
+
+# From Paul Eggert (2003-07-27):
+# Willett (1914-03) writes (p. 17) "In the Cities of Fort William, and
+# Port Arthur, Ontario, the principle of the Bill has been in
+# operation for the past three years, and in the City of Moose Jaw,
+# Saskatchewan, for one year."
+
+# From David Bryan via Tory Tronrud, Director/Curator,
+# Thunder Bay Museum (2003-11-12):
+# There is some suggestion, however, that, by-law or not, daylight
+# savings time was being practiced in Fort William and Port Arthur
+# before 1909.... [I]n 1910, the line between the Eastern and Central
+# Time Zones was permanently moved about two hundred miles west to
+# include the Thunder Bay area....  When Canada adopted daylight
+# savings time in 1916, Fort William and Port Arthur, having done so
+# already, did not change their clocks....  During the Second World
+# War,... [t]he cities agreed to implement DST during the summer
+# months for the remainder of the war years.
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Montreal	-4:54:16 -	LMT	1884
+			-5:00	Mont	E%sT	1918
+			-5:00	Canada	E%sT	1919
+			-5:00	Mont	E%sT	1942 Feb  9 2:00s
+			-5:00	Canada	E%sT	1946
+			-5:00	Mont	E%sT	1974
+			-5:00	Canada	E%sT
+Zone America/Toronto	-5:17:32 -	LMT	1895
+			-5:00	Canada	E%sT	1919
+			-5:00	Toronto	E%sT	1942 Feb  9 2:00s
+			-5:00	Canada	E%sT	1946
+			-5:00	Toronto	E%sT	1974
+			-5:00	Canada	E%sT
+Zone America/Thunder_Bay -5:57:00 -	LMT	1895
+			-6:00	-	CST	1910
+			-5:00	-	EST	1942
+			-5:00	Canada	E%sT	1970
+			-5:00	Mont	E%sT	1973
+			-5:00	-	EST	1974
+			-5:00	Canada	E%sT
+Zone America/Nipigon	-5:53:04 -	LMT	1895
+			-5:00	Canada	E%sT	1940 Sep 29
+			-5:00	1:00	EDT	1942 Feb  9 2:00s
+			-5:00	Canada	E%sT
+Zone America/Rainy_River -6:17:56 -	LMT	1895
+			-6:00	Canada	C%sT	1940 Sep 29
+			-6:00	1:00	CDT	1942 Feb  9 2:00s
+			-6:00	Canada	C%sT
+
+
+# Manitoba
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Winn	1916	only	-	Apr	23	0:00	1:00	D
+Rule	Winn	1916	only	-	Sep	17	0:00	0	S
+Rule	Winn	1918	only	-	Apr	14	2:00	1:00	D
+Rule	Winn	1918	only	-	Oct	31	2:00	0	S
+Rule	Winn	1937	only	-	May	16	2:00	1:00	D
+Rule	Winn	1937	only	-	Sep	26	2:00	0	S
+Rule	Winn	1942	only	-	Feb	 9	2:00	1:00	W # War
+Rule	Winn	1945	only	-	Aug	14	23:00u	1:00	P # Peace
+Rule	Winn	1945	only	-	Sep	lastSun	2:00	0	S
+Rule	Winn	1946	only	-	May	12	2:00	1:00	D
+Rule	Winn	1946	only	-	Oct	13	2:00	0	S
+Rule	Winn	1947	1949	-	Apr	lastSun	2:00	1:00	D
+Rule	Winn	1947	1949	-	Sep	lastSun	2:00	0	S
+Rule	Winn	1950	only	-	May	 1	2:00	1:00	D
+Rule	Winn	1950	only	-	Sep	30	2:00	0	S
+Rule	Winn	1951	1960	-	Apr	lastSun	2:00	1:00	D
+Rule	Winn	1951	1958	-	Sep	lastSun	2:00	0	S
+Rule	Winn	1959	only	-	Oct	lastSun	2:00	0	S
+Rule	Winn	1960	only	-	Sep	lastSun	2:00	0	S
+Rule	Winn	1963	only	-	Apr	lastSun	2:00	1:00	D
+Rule	Winn	1963	only	-	Sep	22	2:00	0	S
+Rule	Winn	1966	1986	-	Apr	lastSun	2:00	1:00	D
+Rule	Winn	1966	1986	-	Oct	lastSun	2:00	0	S
+Rule	Winn	1987	max	-	Apr	Sun>=1	2:00	1:00	D
+# From Paul Eggert (2000-10-02):
+# INMS (2000-09-12) says that, since 1988 at least, Manitoba switches from
+# DST at 03:00 local time.  For now, assume it started in 1987.
+Rule	Winn	1987	max	-	Oct	lastSun	2:00s	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Winnipeg	-6:28:36 -	LMT	1887 Jul 16
+			-6:00	Winn	C%sT
+
+
+# Saskatchewan
+
+# From Mark Brader (2003-07-26):
+# The first actual adoption of DST in Canada was at the municipal
+# level.  As the [Toronto] Star put it (1912-06-07), "While people
+# elsewhere have long been talking of legislation to save daylight,
+# the city of Moose Jaw [Saskatchewan] has acted on its own hook."
+# DST in Moose Jaw began on Saturday, 1912-06-01 (no time mentioned:
+# presumably late evening, as below), and would run until "the end of
+# the summer".  The discrepancy between municipal time and railroad
+# time was noted.
+
+# From Paul Eggert (2003-07-27):
+# Willett (1914-03) notes that DST "has been in operation ... in the
+# City of Moose Jaw, Saskatchewan, for one year."
+
+# From Paul Eggert (2000-10-02):
+# Shanks writes that since 1970 most of this region has been like Regina.
+# Some western towns (e.g. Swift Current) switched from MST/MDT to CST in 1972.
+# Other western towns (e.g. Lloydminster) are like Edmonton.
+# Matthews and Vincent (1998) write that Denare Beach and Creighton
+# are like Winnipeg, in violation of Saskatchewan law.
+
+# From W. Jones (1992-11-06):
+# The. . .below is based on information I got from our law library, the
+# provincial archives, and the provincial Community Services department.
+# A precise history would require digging through newspaper archives, and
+# since you didn't say what you wanted, I didn't bother.
+#
+# Saskatchewan is split by a time zone meridian (105W) and over the years
+# the boundary became pretty ragged as communities near it reevaluated
+# their affiliations in one direction or the other.  In 1965 a provincial
+# referendum favoured legislating common time practices.
+#
+# On 15 April 1966 the Time Act (c. T-14, Revised Statutes of
+# Saskatchewan 1978) was proclaimed, and established that the eastern
+# part of Saskatchewan would use CST year round, that districts in
+# northwest Saskatchewan would by default follow CST but could opt to
+# follow Mountain Time rules (thus 1 hour difference in the winter and
+# zero in the summer), and that districts in southwest Saskatchewan would
+# by default follow MT but could opt to follow CST.
+#
+# It took a few years for the dust to settle (I know one story of a town
+# on one time zone having its school in another, such that a mom had to
+# serve her family lunch in two shifts), but presently it seems that only
+# a few towns on the border with Alberta (e.g. Lloydminster) follow MT
+# rules any more; all other districts appear to have used CST year round
+# since sometime in the 1960s.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Regina	1918	only	-	Apr	14	2:00	1:00	D
+Rule	Regina	1918	only	-	Oct	31	2:00	0	S
+Rule	Regina	1930	1934	-	May	Sun>=1	0:00	1:00	D
+Rule	Regina	1930	1934	-	Oct	Sun>=1	0:00	0	S
+Rule	Regina	1937	1941	-	Apr	Sun>=8	0:00	1:00	D
+Rule	Regina	1937	only	-	Oct	Sun>=8	0:00	0	S
+Rule	Regina	1938	only	-	Oct	Sun>=1	0:00	0	S
+Rule	Regina	1939	1941	-	Oct	Sun>=8	0:00	0	S
+Rule	Regina	1942	only	-	Feb	 9	2:00	1:00	W # War
+Rule	Regina	1945	only	-	Aug	14	23:00u	1:00	P # Peace
+Rule	Regina	1945	only	-	Sep	lastSun	2:00	0	S
+Rule	Regina	1946	only	-	Apr	Sun>=8	2:00	1:00	D
+Rule	Regina	1946	only	-	Oct	Sun>=8	2:00	0	S
+Rule	Regina	1947	1957	-	Apr	lastSun	2:00	1:00	D
+Rule	Regina	1947	1957	-	Sep	lastSun	2:00	0	S
+Rule	Regina	1959	only	-	Apr	lastSun	2:00	1:00	D
+Rule	Regina	1959	only	-	Oct	lastSun	2:00	0	S
+#
+Rule	Swift	1957	only	-	Apr	lastSun	2:00	1:00	D
+Rule	Swift	1957	only	-	Oct	lastSun	2:00	0	S
+Rule	Swift	1959	1961	-	Apr	lastSun	2:00	1:00	D
+Rule	Swift	1959	only	-	Oct	lastSun	2:00	0	S
+Rule	Swift	1960	1961	-	Sep	lastSun	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Regina	-6:58:36 -	LMT	1905 Sep
+			-7:00	Regina	M%sT	1960 Apr lastSun 2:00
+			-6:00	-	CST
+Zone America/Swift_Current -7:11:20 -	LMT	1905 Sep
+			-7:00	Canada	M%sT	1946 Apr lastSun 2:00
+			-7:00	Regina	M%sT	1950
+			-7:00	Swift	M%sT	1972 Apr lastSun 2:00
+			-6:00	-	CST
+
+
+# Alberta
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Edm	1918	1919	-	Apr	Sun>=8	2:00	1:00	D
+Rule	Edm	1918	only	-	Oct	31	2:00	0	S
+Rule	Edm	1919	only	-	May	27	2:00	0	S
+Rule	Edm	1920	1923	-	Apr	lastSun	2:00	1:00	D
+Rule	Edm	1920	only	-	Oct	lastSun	2:00	0	S
+Rule	Edm	1921	1923	-	Sep	lastSun	2:00	0	S
+Rule	Edm	1942	only	-	Feb	 9	2:00	1:00	W # War
+Rule	Edm	1945	only	-	Aug	14	23:00u	1:00	P # Peace
+Rule	Edm	1945	only	-	Sep	lastSun	2:00	0	S
+Rule	Edm	1947	only	-	Apr	lastSun	2:00	1:00	D
+Rule	Edm	1947	only	-	Sep	lastSun	2:00	0	S
+Rule	Edm	1967	only	-	Apr	lastSun	2:00	1:00	D
+Rule	Edm	1967	only	-	Oct	lastSun	2:00	0	S
+Rule	Edm	1969	only	-	Apr	lastSun	2:00	1:00	D
+Rule	Edm	1969	only	-	Oct	lastSun	2:00	0	S
+Rule	Edm	1972	1986	-	Apr	lastSun	2:00	1:00	D
+Rule	Edm	1972	max	-	Oct	lastSun	2:00	0	S
+Rule	Edm	1987	max	-	Apr	Sun>=1	2:00	1:00	D
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Edmonton	-7:33:52 -	LMT	1906 Sep
+			-7:00	Edm	M%sT
+
+
+# British Columbia
+
+# From Paul Eggert (2000-10-02):
+# Shanks writes that since 1970 most of this region has been like Vancouver.
+# Dawson Creek uses MST.  Much of east BC is like Edmonton.
+# Matthews and Vincent (1998) write that Creston is like Dawson Creek.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Vanc	1918	only	-	Apr	14	2:00	1:00	D
+Rule	Vanc	1918	only	-	Oct	31	2:00	0	S
+Rule	Vanc	1942	only	-	Feb	 9	2:00	1:00	W # War
+Rule	Vanc	1945	only	-	Aug	14	23:00u	1:00	P # Peace
+Rule	Vanc	1945	only	-	Sep	30	2:00	0	S
+Rule	Vanc	1946	1986	-	Apr	lastSun	2:00	1:00	D
+Rule	Vanc	1946	only	-	Oct	13	2:00	0	S
+Rule	Vanc	1947	1961	-	Sep	lastSun	2:00	0	S
+Rule	Vanc	1962	max	-	Oct	lastSun	2:00	0	S
+Rule	Vanc	1987	max	-	Apr	Sun>=1	2:00	1:00	D
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Vancouver	-8:12:28 -	LMT	1884
+			-8:00	Vanc	P%sT
+Zone America/Dawson_Creek -8:00:56 -	LMT	1884
+			-8:00	Canada	P%sT	1947
+			-8:00	Vanc	P%sT	1972 Aug 30 2:00
+			-7:00	-	MST
+
+
+# Northwest Territories, Nunavut, Yukon
+
+# From Paul Eggert (1999-10-29):
+# Dawson switched to PST in 1973.  Inuvik switched to MST in 1979.
+# Mathew Englander (1996-10-07) gives the following refs:
+#	* 1967. Paragraph 28(34)(g) of the Interpretation Act, S.C. 1967-68,
+#	c. 7 defines Yukon standard time as UTC-9.  This is still valid;
+#	see Interpretation Act, R.S.C. 1985, c. I-21, s. 35(1).
+#	* C.O. 1973/214 switched Yukon to PST on 1973-10-28 00:00.
+#	* O.I.C. 1980/02 established DST.
+#	* O.I.C. 1987/056 changed DST to Apr firstSun 2:00 to Oct lastSun 2:00.
+# Shanks says Yukon's 1973-10-28 switch was at 2:00; go with Englander.
+
+# From Rives McDow (1999-09-04):
+# Nunavut ... moved ... to incorporate the whole territory into one time zone.
+# <a href="http://www.nunatsiaq.com/nunavut/nvt90903_13.html">
+# Nunavut moves to single time zone Oct. 31
+# </a>
+#
+# From Antoine Leca (1999-09-06):
+# We then need to create a new timezone for the Kitikmeot region of Nunavut
+# to differentiate it from the Yellowknife region.
+
+# From Paul Eggert (1999-09-20):
+# <a href="http://www.nunavut.com/basicfacts/english/basicfacts_1territory.html">
+# Basic Facts: The New Territory
+# </a> (1999) reports that Pangnirtung operates on eastern time,
+# and that Coral Harbour does not observe DST.  We don't know when
+# Pangnirtung switched to eastern time; we'll guess 1995.
+# We'll ignore the claim about Coral Harbour for now,
+# since we have no further info.
+
+# From Rives McDow (1999-11-08):
+# On October 31, when the rest of Nunavut went to Central time,
+# Pangnirtung wobbled.  Here is the result of their wobble:
+#
+# The following businesses and organizations in Pangnirtung use Central Time:
+#
+#	First Air, Power Corp, Nunavut Construction, Health Center, RCMP,
+#	Eastern Arctic National Parks, A & D Specialist
+#
+# The following businesses and organizations in Pangnirtung use Eastern Time:
+#
+#	Hamlet office, All other businesses, Both schools, Airport operator
+#
+# This has made for an interesting situation there, which warranted the news.
+# No one there that I spoke with seems concerned, or has plans to
+# change the local methods of keeping time, as it evidently does not
+# really interfere with any activities or make things difficult locally.
+# They plan to celebrate New Year's turn-over twice, one hour apart,
+# so it appears that the situation will last at least that long.
+# The Nunavut Intergovernmental Affairs hopes that they will "come to
+# their senses", but the locals evidently don't see any problem with
+# the current state of affairs.
+
+# From Michaela Rodrigue, writing in the
+# <a href="http://www.nunatsiaq.com/archives/nunavut991130/nvt91119_17.html">
+# Nunatsiaq News (1999-11-19)</a>:
+# Clyde River, Pangnirtung and Sanikiluaq now operate with two time zones,
+# central - or Nunavut time - for government offices, and eastern time
+# for municipal offices and schools....  Igloolik [was similar but then]
+# made the switch to central time on Saturday, Nov. 6.
+
+# From Paul Eggert (2000-10-02):
+# Matthews and Vincent (1998) say the following, but we lack histories
+# for these potential new Zones.
+#
+# The Canadian Forces station at Alert uses Eastern Time while the
+# handful of residents at the Eureka weather station [in the Central
+# zone] skip daylight savings.  Baffin Island, which is crossed by the
+# Central, Eastern and Atlantic Time zones only uses Eastern Time.
+# Gjoa Haven, Taloyoak and Pelly Bay all use Mountain instead of
+# Central Time and Southampton Island [in the Central zone] is not
+# required to use daylight savings.
+
+# From
+# <a href="http://www.nunatsiaq.com/archives/nunavut001130/nvt21110_02.html">
+# Nunavut now has two time zones
+# </a> (2000-11-10):
+# The Nunavut government would allow its employees in Kugluktuk and
+# Cambridge Bay to operate on central time year-round, putting them
+# one hour behind the rest of Nunavut for six months during the winter.
+# At the end of October the two communities had rebelled against
+# Nunavut's unified time zone, refusing to shift to eastern time with
+# the rest of the territory for the winter.  Cambridge Bay remained on
+# central time, while Kugluktuk, even farther west, reverted to
+# mountain time, which they had used before the advent of Nunavut's
+# unified time zone in 1999.
+#
+# From Rives McDow (2001-01-20), quoting the Nunavut government:
+# The preceding decision came into effect at midnight, Saturday Nov 4, 2000.
+
+# From Paul Eggert (2000-12-04):
+# Let's just keep track of the official times for now.
+
+# From Rives McDow (2001-03-07):
+# The premier of Nunavut has issued a ministerial statement advising
+# that effective 2001-04-01, the territory of Nunavut will revert
+# back to three time zones (mountain, central, and eastern).  Of the
+# cities in Nunavut, Coral Harbor is the only one that I know of that
+# has said it will not observe dst, staying on EST year round.  I'm
+# checking for more info, and will get back to you if I come up with
+# more.
+# [Also see <http://www.nunatsiaq.com/nunavut/nvt10309_06.html> (2001-03-09).]
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	NT_YK	1918	only	-	Apr	14	2:00	1:00	D
+Rule	NT_YK	1918	only	-	Oct	27	2:00	0	S
+Rule	NT_YK	1919	only	-	May	25	2:00	1:00	D
+Rule	NT_YK	1919	only	-	Nov	 1	0:00	0	S
+Rule	NT_YK	1942	only	-	Feb	 9	2:00	1:00	W # War
+Rule	NT_YK	1945	only	-	Aug	14	23:00u	1:00	P # Peace
+Rule	NT_YK	1945	only	-	Sep	30	2:00	0	S
+Rule	NT_YK	1965	only	-	Apr	lastSun	0:00	2:00	DD
+Rule	NT_YK	1965	only	-	Oct	lastSun	2:00	0	S
+Rule	NT_YK	1980	1986	-	Apr	lastSun	2:00	1:00	D
+Rule	NT_YK	1980	max	-	Oct	lastSun	2:00	0	S
+Rule	NT_YK	1987	max	-	Apr	Sun>=1	2:00	1:00	D
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Pangnirtung -4:22:56 -	LMT	1884
+			-4:00	NT_YK	A%sT	1995 Apr Sun>=1 2:00
+			-5:00	Canada	E%sT	1999 Oct 31 2:00
+			-6:00	Canada	C%sT	2000 Oct 29 2:00
+			-5:00	Canada	E%sT
+Zone America/Iqaluit	-4:33:52 -	LMT	1884 # Frobisher Bay before 1987
+			-5:00	NT_YK	E%sT	1999 Oct 31 2:00
+			-6:00	Canada	C%sT	2000 Oct 29 2:00
+			-5:00	Canada	E%sT
+Zone America/Rankin_Inlet -6:08:40 -	LMT	1884
+			-6:00	NT_YK	C%sT	2000 Oct 29 2:00
+			-5:00	-	EST	2001 Apr  1 3:00
+			-6:00	Canada	C%sT
+Zone America/Cambridge_Bay -7:00:20 -	LMT	1884
+			-7:00	NT_YK	M%sT	1999 Oct 31 2:00
+			-6:00	Canada	C%sT	2000 Oct 29 2:00
+			-5:00	-	EST	2000 Nov  5 0:00
+			-6:00	-	CST	2001 Apr  1 3:00
+			-7:00	Canada	M%sT
+Zone America/Yellowknife -7:37:24 -	LMT	1884
+			-7:00	NT_YK	M%sT
+Zone America/Inuvik	-8:54:00 -	LMT	1884
+			-8:00	NT_YK	P%sT	1979 Apr lastSun 2:00
+			-7:00	NT_YK	M%sT
+Zone America/Whitehorse	-9:00:12 -	LMT	1900 Aug 20
+			-9:00	NT_YK	Y%sT	1966 Jul 1 2:00
+			-8:00	NT_YK	P%sT
+Zone America/Dawson	-9:17:40 -	LMT	1900 Aug 20
+			-9:00	NT_YK	Y%sT	1973 Oct 28 0:00
+			-8:00	NT_YK	P%sT
+
+
+###############################################################################
+
+# Mexico
+
+# From Paul Eggert (2001-03-05):
+# The Investigation and Analysis Service of the
+# Mexican Library of Congress (MLoC) has published a
+# <a href="http://www.cddhcu.gob.mx/bibliot/publica/inveyana/polisoc/horver/">
+# history of Mexican local time (in Spanish)
+# </a>.
+#
+# Here are the discrepancies between Shanks and the MLoC.
+# (In all cases we go with the MLoC.)
+# Shanks reports that Baja was at -8:00 in 1922/1923.
+# Shanks says the 1930 transition in Baja was 1930-11-16.
+# Shanks reports no DST during summer 1931.
+# Shanks reports a transition at 1932-03-30 23:00, not 1932-04-01.
+# Shanks does not report transitions for Baja in 1945 or 1948.
+# Shanks reports southern Mexico transitions on 1981-12-01, not 12-23.
+# Shanks says Quintana Roo switched to -6:00 on 1982-12-02, and to -5:00
+# on 1997-10-26 at 02:00.
+
+# From Gwillim Law (2001-02-20):
+# There are some other discrepancies between the Decrees page and the
+# tz database.  I think they can best be explained by supposing that
+# the researchers who prepared the Decrees page failed to find some of
+# the relevant documents.
+
+# From Paul Eggert (2000-07-26):
+# Shanks gives 1942-04-01 instead of 1942-04-24, and omits the 1981
+# and 1988 DST experiments.  Go with spin.com.mx.
+
+# From Alan Perry (1996-02-15):
+# A guy from our Mexico subsidiary finally found the Presidential Decree
+# outlining the timezone changes in Mexico.
+#
+# ------------- Begin Forwarded Message -------------
+#
+# I finally got my hands on the Official Presidential Decree that sets up the
+# rules for the DST changes. The rules are:
+#
+# 1. The country is divided in 3 timezones:
+#    - Baja California Norte (the Mexico/BajaNorte TZ)
+#    - Baja California Sur, Nayarit, Sinaloa and Sonora (the Mexico/BajaSur TZ)
+#    - The rest of the country (the Mexico/General TZ)
+#
+# 2. From the first Sunday in April at 2:00 AM to the last Sunday in October
+#    at 2:00 AM, the times in each zone are as follows:
+#    BajaNorte: GMT+7
+#    BajaSur:   GMT+6
+#    General:   GMT+5
+#
+# 3. The rest of the year, the times are as follows:
+#    BajaNorte: GMT+8
+#    BajaSur:   GMT+7
+#    General:   GMT+6
+#
+# The Decree was published in Mexico's Official Newspaper on January 4th.
+#
+# -------------- End Forwarded Message --------------
+# From Paul Eggert (1996-06-12):
+# For an English translation of the decree, see
+# <a href="http://mexico-travel.com/extra/timezone_eng.html">
+# ``Diario Oficial: Time Zone Changeover'' (1996-01-04).
+# </a>
+
+# From Rives McDow (1998-10-08):
+# The State of Quintana Roo has reverted back to central STD and DST times
+# (i.e. UTC -0600 and -0500 as of 1998-08-02).
+
+# From Rives McDow (2000-01-10):
+# Effective April 4, 1999 at 2:00 AM local time, Sonora changed to the time
+# zone 5 hours from the International Date Line, and will not observe daylight
+# savings time so as to stay on the same time zone as the southern part of
+# Arizona year round.
+
+# From Jesper Norgaard, translating
+# <http://www.reforma.com/nacional/articulo/064327/> (2001-01-17):
+# In Oaxaca, the 55.000 teachers from the Section 22 of the National
+# Syndicate of Education Workers, refuse to apply daylight saving each
+# year, so that the more than 10,000 schools work at normal hour the
+# whole year.
+
+# From Gwillim Law (2001-01-19):
+# <http://www.reforma.com/negocios_y_dinero/articulo/064481/> ... says
+# (translated):...
+# January 17, 2000 - The Energy Secretary, Ernesto Martens, announced
+# that Summer Time will be reduced from seven to five months, starting
+# this year....
+# <http://www.publico.com.mx/scripts/texto3.asp?action=pagina&pag=21&pos=p&secc=naci&date=01/17/2001>
+# [translated], says "summer time will ... take effect on the first Sunday
+# in May, and end on the last Sunday of September.
+
+# From Arthur David Olson (2001-01-25):
+# The 2001-01-24 traditional Washington Post contained the page one
+# story "Timely Issue Divides Mexicans."...
+# http://www.washingtonpost.com/wp-dyn/articles/A37383-2001Jan23.html
+# ... Mexico City Mayor Lopez Obrador "...is threatening to keep
+# Mexico City and its 20 million residents on a different time than
+# the rest of the country..." In particular, Lopez Obrador would abolish
+# observation of Daylight Saving Time.
+
+# <a href="http://www.conae.gob.mx/ahorro/decretohorver2001.html#decre">
+# Official statute published by the Energy Department
+# </a> (2001-02-01) shows Baja and Chihauhua as still using US DST rules,
+# and Sonora with no DST.  This was reported by Jesper Norgaard (2001-02-03).
+
+# From Paul Eggert (2001-03-03):
+#
+# <a href="http://www.latimes.com/news/nation/20010303/t000018766.html">
+# James F. Smith writes in today's LA Times
+# </a>
+# * Sonora will continue to observe standard time.
+# * Last week Mexico City's mayor Andres Manuel Lopez Obrador decreed that
+#   the Federal District will not adopt DST.
+# * 4 of 16 district leaders announced they'll ignore the decree.
+# * The decree does not affect federal-controlled facilities including
+#   the airport, banks, hospitals, and schools.
+#
+# For now we'll assume that the Federal District will bow to federal rules.
+
+# From Jesper Norgaard (2001-04-01):
+# I found some references to the Mexican application of daylight
+# saving, which modifies what I had already sent you, stating earlier
+# that a number of northern Mexican states would go on daylight
+# saving. The modification reverts this to only cover Baja California
+# (Norte), while all other states (except Sonora, who has no daylight
+# saving all year) will follow the original decree of president
+# Vicente Fox, starting daylight saving May 6, 2001 and ending
+# September 30, 2001.
+# References: "Diario de Monterrey" <www.diariodemonterrey.com/index.asp>
+# Palabra <http://palabra.infosel.com/010331/primera/ppri3101.pdf> (2001-03-31)
+
+# From Reuters (2001-09-04):
+# Mexico's Supreme Court on Tuesday declared that daylight savings was
+# unconstitutional in Mexico City, creating the possibility the
+# capital will be in a different time zone from the rest of the nation
+# next year....  The Supreme Court's ruling takes effect at 2:00
+# a.m. (0800 GMT) on Sept. 30, when Mexico is scheduled to revert to
+# standard time. "This is so residents of the Federal District are not
+# subject to unexpected time changes," a statement from the court said.
+
+# From Jesper Norgaard Welen (2002-03-12):
+# ... consulting my local grocery store(!) and my coworkers, they all insisted
+# that a new decision had been made to reinstate US style DST in Mexico....
+# http://www.conae.gob.mx/ahorro/horaver2001_m1_2002.html (2002-02-20)
+# confirms this.  Sonora as usual is the only state where DST is not applied.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Mexico	1939	only	-	Feb	5	0:00	1:00	D
+Rule	Mexico	1939	only	-	Jun	25	0:00	0	S
+Rule	Mexico	1940	only	-	Dec	9	0:00	1:00	D
+Rule	Mexico	1941	only	-	Apr	1	0:00	0	S
+Rule	Mexico	1943	only	-	Dec	16	0:00	1:00	W # War
+Rule	Mexico	1944	only	-	May	1	0:00	0	S
+Rule	Mexico	1950	only	-	Feb	12	0:00	1:00	D
+Rule	Mexico	1950	only	-	Jul	30	0:00	0	S
+Rule	Mexico	1996	2000	-	Apr	Sun>=1	2:00	1:00	D
+Rule	Mexico	1996	2000	-	Oct	lastSun	2:00	0	S
+Rule	Mexico	2001	only	-	May	Sun>=1	2:00	1:00	D
+Rule	Mexico	2001	only	-	Sep	lastSun	2:00	0	S
+Rule	Mexico	2002	max	-	Apr	Sun>=1	2:00	1:00	D
+Rule	Mexico	2002	max	-	Oct	lastSun	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+# Quintana Roo
+Zone America/Cancun	-5:47:04 -	LMT	1922 Jan  1  0:12:56
+			-6:00	-	CST	1981 Dec 23
+			-5:00	Mexico	E%sT	1998 Aug  2  2:00
+			-6:00	Mexico	C%sT
+# Campeche, Yucatan
+Zone America/Merida	-5:58:28 -	LMT	1922 Jan  1  0:01:32
+			-6:00	-	CST	1981 Dec 23
+			-5:00	-	EST	1982 Dec  2
+			-6:00	Mexico	C%sT
+# Coahuila, Durango, Nuevo Leon, Tamaulipas
+Zone America/Monterrey	-6:41:16 -	LMT	1921 Dec 31 23:18:44
+			-6:00	-	CST	1988
+			-6:00	US	C%sT	1989
+			-6:00	Mexico	C%sT
+# Central Mexico
+Zone America/Mexico_City -6:36:36 -	LMT	1922 Jan  1  0:23:24
+			-7:00	-	MST	1927 Jun 10 23:00
+			-6:00	-	CST	1930 Nov 15
+			-7:00	-	MST	1931 May  1 23:00
+			-6:00	-	CST	1931 Oct
+			-7:00	-	MST	1932 Apr  1
+			-6:00	Mexico	C%sT	2001 Sep 30 02:00
+			-6:00	-	CST	2002 Feb 20
+			-6:00	Mexico	C%sT
+# Chihuahua
+Zone America/Chihuahua	-7:04:20 -	LMT	1921 Dec 31 23:55:40
+			-7:00	-	MST	1927 Jun 10 23:00
+			-6:00	-	CST	1930 Nov 15
+			-7:00	-	MST	1931 May  1 23:00
+			-6:00	-	CST	1931 Oct
+			-7:00	-	MST	1932 Apr  1
+			-6:00	-	CST	1996
+			-6:00	Mexico	C%sT	1998
+			-6:00	-	CST	1998 Apr Sun>=1 3:00
+			-7:00	Mexico	M%sT
+# Sonora
+Zone America/Hermosillo	-7:23:52 -	LMT	1921 Dec 31 23:36:08
+			-7:00	-	MST	1927 Jun 10 23:00
+			-6:00	-	CST	1930 Nov 15
+			-7:00	-	MST	1931 May  1 23:00
+			-6:00	-	CST	1931 Oct
+			-7:00	-	MST	1932 Apr  1
+			-6:00	-	CST	1942 Apr 24
+			-7:00	-	MST	1949 Jan 14
+			-8:00	-	PST	1970
+			-7:00	Mexico	M%sT	1999
+			-7:00	-	MST
+# Baja California Sur, Nayarit, Sinaloa
+Zone America/Mazatlan	-7:05:40 -	LMT	1921 Dec 31 23:54:20
+			-7:00	-	MST	1927 Jun 10 23:00
+			-6:00	-	CST	1930 Nov 15
+			-7:00	-	MST	1931 May  1 23:00
+			-6:00	-	CST	1931 Oct
+			-7:00	-	MST	1932 Apr  1
+			-6:00	-	CST	1942 Apr 24
+			-7:00	-	MST	1949 Jan 14
+			-8:00	-	PST	1970
+			-7:00	Mexico	M%sT
+# Baja California
+Zone America/Tijuana	-7:48:04 -	LMT	1922 Jan  1  0:11:56
+			-7:00	-	MST	1924
+			-8:00	-	PST	1927 Jun 10 23:00
+			-7:00	-	MST	1930 Nov 15
+			-8:00	-	PST	1931 Apr  1
+			-8:00	1:00	PDT	1931 Sep 30
+			-8:00	-	PST	1942 Apr 24
+			-8:00	1:00	PWT	1945 Nov 12
+			-8:00	-	PST	1948 Apr  5
+			-8:00	1:00	PDT	1949 Jan 14
+			-8:00	-	PST	1954
+			-8:00	CA	P%sT	1961
+			-8:00	-	PST	1976
+			-8:00	US	P%sT	1996
+			-8:00	Mexico	P%sT	2001
+			-8:00	US	P%sT	2002 Feb 20
+			-8:00	Mexico	P%sT
+# From Paul Eggert (2001-03-05):
+# Formerly there was an America/Ensenada zone, which differed from
+# America/Tijuana only in that it did not observe DST from 1976
+# through 1995.  This was as per Shanks.  However, Guy Harris reports
+# that the 1987 OAG says "Only Ensenada, Mexicale, San Felipe and
+# Tijuana observe DST," which contradicts Shanks but does imply that
+# DST-observance was a town-by-town matter back then.  This concerns
+# data after 1970 so most likely there should be at least one Zone
+# other than America/Tijuana for Baja, but it's not clear yet what its
+# name or contents should be.
+#
+# Revillagigedo Is
+# no information
+
+###############################################################################
+
+# Anguilla
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Anguilla	-4:12:16 -	LMT	1912 Mar 2
+			-4:00	-	AST
+
+# Antigua and Barbuda
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Antigua	-4:07:12 -	LMT	1912 Mar 2
+			-5:00	-	EST	1951
+			-4:00	-	AST
+
+# Bahamas
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Bahamas	1964	max	-	Oct	lastSun	2:00	0	S
+Rule	Bahamas	1964	1986	-	Apr	lastSun	2:00	1:00	D
+Rule	Bahamas	1987	max	-	Apr	Sun>=1	2:00	1:00	D
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Nassau	-5:09:24 -	LMT	1912 Mar 2
+			-5:00	Bahamas	E%sT
+
+# Barbados
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Barb	1977	only	-	Jun	12	2:00	1:00	D
+Rule	Barb	1977	1978	-	Oct	Sun>=1	2:00	0	S
+Rule	Barb	1978	1980	-	Apr	Sun>=15	2:00	1:00	D
+Rule	Barb	1979	only	-	Sep	30	2:00	0	S
+Rule	Barb	1980	only	-	Sep	25	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Barbados	-3:58:28 -	LMT	1924		# Bridgetown
+			-3:58:28 -	BMT	1932	  # Bridgetown Mean Time
+			-4:00	Barb	A%sT
+
+# Belize
+# Whitman entirely disagrees with Shanks; go with Shanks.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Belize	1918	1942	-	Oct	Sun>=2	0:00	0:30	HD
+Rule	Belize	1919	1943	-	Feb	Sun>=9	0:00	0	S
+Rule	Belize	1973	only	-	Dec	 5	0:00	1:00	D
+Rule	Belize	1974	only	-	Feb	 9	0:00	0	S
+Rule	Belize	1982	only	-	Dec	18	0:00	1:00	D
+Rule	Belize	1983	only	-	Feb	12	0:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Belize	-5:52:48 -	LMT	1912 Apr
+			-6:00	Belize	C%sT
+
+# Bermuda
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Atlantic/Bermuda	-4:19:04 -	LMT	1930 Jan  1 2:00    # Hamilton
+			-4:00	-	AST	1974 Apr 28 2:00
+			-4:00	Bahamas	A%sT
+
+# Cayman Is
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Cayman	-5:25:32 -	LMT	1890		# Georgetown
+			-5:07:12 -	KMT	1912 Feb    # Kingston Mean Time
+			-5:00	-	EST
+
+# Costa Rica
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	CR	1979	1980	-	Feb	lastSun	0:00	1:00	D
+Rule	CR	1979	1980	-	Jun	Sun>=1	0:00	0	S
+Rule	CR	1991	1992	-	Jan	Sat>=15	0:00	1:00	D
+# IATA SSIM (1991-09) says the following was at 1:00; go with Shanks.
+Rule	CR	1991	only	-	Jul	 1	0:00	0	S
+Rule	CR	1992	only	-	Mar	15	0:00	0	S
+# There are too many San Joses elsewhere, so we'll use `Costa Rica'.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Costa_Rica	-5:36:20 -	LMT	1890		# San Jose
+			-5:36:20 -	SJMT	1921 Jan 15 # San Jose Mean Time
+			-6:00	CR	C%sT
+# Coco
+# no information; probably like America/Costa_Rica
+
+# Cuba
+
+# From Arthur David Olson (1999-03-29):
+# The 1999-03-28 exhibition baseball game held in Havana, Cuba, between
+# the Cuban National Team and the Baltimore Orioles was carried live on
+# the Orioles Radio Network, including affiliate WTOP in Washington, DC.
+# During the game, play-by-play announcer Jim Hunter noted that
+# "We'll be losing two hours of sleep...Cuba switched to Daylight Saving
+# Time today."  (The "two hour" remark referred to losing one hour of
+# sleep on 1999-03-28--when the announcers were in Cuba as it switched
+# to DST--and one more hour on 1999-04-04--when the announcers will have
+# returned to Baltimore, which switches on that date.)
+
+# From Evert van der Veer via Steffen Thorsen (2004-10-28):
+# Cuba is not going back to standard time this year.
+# From Paul Eggert (2004-10-28):
+# http://www.granma.cu/ingles/2004/septiembre/juev30/41medid-i.html
+# says that it's due to a problem at the Antonio Guiteras
+# thermoelectric plant, and says "This October there will be no return
+# to normal hours (after daylight saving time)".
+# For now, let's assume that it's a one-year temporary measure.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Cuba	1928	only	-	Jun	10	0:00	1:00	D
+Rule	Cuba	1928	only	-	Oct	10	0:00	0	S
+Rule	Cuba	1940	1942	-	Jun	Sun>=1	0:00	1:00	D
+Rule	Cuba	1940	1942	-	Sep	Sun>=1	0:00	0	S
+Rule	Cuba	1945	1946	-	Jun	Sun>=1	0:00	1:00	D
+Rule	Cuba	1945	1946	-	Sep	Sun>=1	0:00	0	S
+Rule	Cuba	1965	only	-	Jun	1	0:00	1:00	D
+Rule	Cuba	1965	only	-	Sep	30	0:00	0	S
+Rule	Cuba	1966	only	-	May	29	0:00	1:00	D
+Rule	Cuba	1966	only	-	Oct	2	0:00	0	S
+Rule	Cuba	1967	only	-	Apr	8	0:00	1:00	D
+Rule	Cuba	1967	1968	-	Sep	Sun>=8	0:00	0	S
+Rule	Cuba	1968	only	-	Apr	14	0:00	1:00	D
+Rule	Cuba	1969	1977	-	Apr	lastSun	0:00	1:00	D
+Rule	Cuba	1969	1971	-	Oct	lastSun	0:00	0	S
+Rule	Cuba	1972	1974	-	Oct	8	0:00	0	S
+Rule	Cuba	1975	1977	-	Oct	lastSun	0:00	0	S
+Rule	Cuba	1978	only	-	May	7	0:00	1:00	D
+Rule	Cuba	1978	1990	-	Oct	Sun>=8	0:00	0	S
+Rule	Cuba	1979	1980	-	Mar	Sun>=15	0:00	1:00	D
+Rule	Cuba	1981	1985	-	May	Sun>=5	0:00	1:00	D
+Rule	Cuba	1986	1989	-	Mar	Sun>=14	0:00	1:00	D
+Rule	Cuba	1990	1997	-	Apr	Sun>=1	0:00	1:00	D
+Rule	Cuba	1991	1995	-	Oct	Sun>=8	0:00s	0	S
+Rule	Cuba	1996	only	-	Oct	 6	0:00s	0	S
+Rule	Cuba	1997	only	-	Oct	12	0:00s	0	S
+Rule	Cuba	1998	1999	-	Mar	lastSun	0:00s	1:00	D
+Rule	Cuba	1998	2003	-	Oct	lastSun	0:00s	0	S
+Rule	Cuba	2000	max	-	Apr	Sun>=1	0:00s	1:00	D
+Rule	Cuba	2005	max	-	Oct	lastSun	0:00s	0	S
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Havana	-5:29:28 -	LMT	1890
+			-5:29:36 -	HMT	1925 Jul 19 12:00 # Havana MT
+			-5:00	Cuba	C%sT
+
+# Dominica
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Dominica	-4:05:36 -	LMT	1911 Jul 1 0:01		# Roseau
+			-4:00	-	AST
+
+# Dominican Republic
+
+# From Steffen Thorsen (2000-10-30):
+# Enrique Morales reported to me that the Dominican Republic has changed the
+# time zone to Eastern Standard Time as of Sunday 29 at 2 am....
+# http://www.listin.com.do/antes/261000/republica/princi.html
+
+# From Paul Eggert (2000-12-04):
+# That URL (2000-10-26, in Spanish) says they planned to use US-style DST.
+
+# From Rives McDow (2000-12-01):
+# Dominican Republic changed its mind and presidential decree on Tuesday,
+# November 28, 2000, with a new decree.  On Sunday, December 3 at 1:00 AM the
+# Dominican Republic will be reverting to 8 hours from the International Date
+# Line, and will not be using DST in the foreseeable future.  The reason they
+# decided to use DST was to be in synch with Puerto Rico, who was also going
+# to implement DST.  When Puerto Rico didn't implement DST, the president
+# decided to revert.
+
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	DR	1966	only	-	Oct	30	0:00	1:00	D
+Rule	DR	1967	only	-	Feb	28	0:00	0	S
+Rule	DR	1969	1973	-	Oct	lastSun	0:00	0:30	HD
+Rule	DR	1970	only	-	Feb	21	0:00	0	S
+Rule	DR	1971	only	-	Jan	20	0:00	0	S
+Rule	DR	1972	1974	-	Jan	21	0:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Santo_Domingo -4:39:36 -	LMT	1890
+			-4:40	-	SDMT	1933 Apr  1 12:00 # S. Dom. MT
+			-5:00	DR	E%sT	1974 Oct 27
+			-4:00	-	AST	2000 Oct 29 02:00
+			-5:00	US	E%sT	2000 Dec  3 01:00
+			-4:00	-	AST
+
+# El Salvador
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Salv	1987	1988	-	May	Sun>=1	0:00	1:00	D
+Rule	Salv	1987	1988	-	Sep	lastSun	0:00	0	S
+# There are too many San Salvadors elsewhere, so use America/El_Salvador
+# instead of America/San_Salvador.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/El_Salvador -5:56:48 -	LMT	1921		# San Salvador
+			-6:00	Salv	C%sT
+
+# Grenada
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Grenada	-4:07:00 -	LMT	1911 Jul	# St George's
+			-4:00	-	AST
+
+# Guadeloupe
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Guadeloupe	-4:06:08 -	LMT	1911 Jun 8	# Pointe a Pitre
+			-4:00	-	AST
+
+# Guatemala
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Guat	1973	only	-	Nov	25	0:00	1:00	D
+Rule	Guat	1974	only	-	Feb	24	0:00	0	S
+Rule	Guat	1983	only	-	May	21	0:00	1:00	D
+Rule	Guat	1983	only	-	Sep	22	0:00	0	S
+Rule	Guat	1991	only	-	Mar	23	0:00	1:00	D
+Rule	Guat	1991	only	-	Sep	 7	0:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Guatemala	-6:02:04 -	LMT	1918 Oct 5
+			-6:00	Guat	C%sT
+
+# Haiti
+# From Gwillim Law (2005-04-15):
+# Risto O. Nykanen wrote me that Haiti is now on DST.
+# I searched for confirmation, and I found a
+# <a href="http://www.haitianconsulate.org/time.doc"> press release
+# on the Web page of the Haitian Consulate in Chicago (2005-03-31),
+# </a>.  Translated from French, it says:
+#
+#  "The Prime Minister's Communication Office notifies the public in general
+#   and the press in particular that, following a decision of the Interior
+#   Ministry and the Territorial Collectivities [I suppose that means the
+#   provinces], Haiti will move to Eastern Daylight Time in the night from next
+#   Saturday the 2nd to Sunday the 3rd.
+#
+#  "Consequently, the Prime Minister's Communication Office wishes to inform
+#   the population that the country's clocks will be set forward one hour
+#   starting at midnight.  This provision will hold until the last Saturday in
+#   October 2005.
+#
+#  "Port-au-Prince, March 31, 2005"
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Haiti	1983	only	-	May	8	0:00	1:00	D
+Rule	Haiti	1984	1987	-	Apr	lastSun	0:00	1:00	D
+Rule	Haiti	1983	1987	-	Oct	lastSun	0:00	0	S
+# Shanks says AT is 2:00, but IATA SSIM (1991/1997) says 1:00s.  Go with IATA.
+Rule	Haiti	1988	1997	-	Apr	Sun>=1	1:00s	1:00	D
+Rule	Haiti	1988	1997	-	Oct	lastSun	1:00s	0	S
+Rule	Haiti	2005	only	-	Apr	Sun>=1	0:00	1:00	D
+Rule	Haiti	2005	only	-	Oct	lastSun	0:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Port-au-Prince -4:49:20 -	LMT	1890
+			-4:49	-	PPMT	1917 Jan 24 12:00 # P-a-P MT
+			-5:00	Haiti	E%sT
+
+# Honduras
+# Shanks says 1921 Jan 1; go with Whitman's more precise Apr 1.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Tegucigalpa -5:48:52 -	LMT	1921 Apr
+			-6:00	Salv	C%sT
+#
+# Great Swan I ceded by US to Honduras in 1972
+
+# Jamaica
+
+# From Bob Devine (1988-01-28):
+# Follows US rules.
+
+# From U. S. Naval Observatory (1989-01-19):
+# JAMAICA             5 H  BEHIND UTC
+
+# From Shanks:
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Jamaica	-5:07:12 -	LMT	1890		# Kingston
+			-5:07:12 -	KMT	1912 Feb    # Kingston Mean Time
+			-5:00	-	EST	1974 Apr 28 2:00
+			-5:00	US	E%sT	1984
+			-5:00	-	EST
+
+# Martinique
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Martinique	-4:04:20 -      LMT	1890		# Fort-de-France
+			-4:04:20 -	FFMT	1911 May     # Fort-de-France MT
+			-4:00	-	AST	1980 Apr  6
+			-4:00	1:00	ADT	1980 Sep 28
+			-4:00	-	AST
+
+# Montserrat
+# From Paul Eggert (1997-08-31):
+# Recent volcanic eruptions have forced evacuation of Plymouth, the capital.
+# Luckily, Olveston, the current de facto capital, has the same longitude.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Montserrat	-4:08:52 -	LMT	1911 Jul 1 0:01   # Olveston
+			-4:00	-	AST
+
+# Nicaragua
+#
+# From Steffen Thorsen (1998-12-29):
+# Nicaragua seems to be back at -6:00 but I have not been able to find when
+# they changed from -5:00.
+#
+# From Steffen Thorsen (2005-04-12):
+# I've got reports from 8 different people that Nicaragua just started
+# DST on Sunday 2005-04-10, in order to save energy because of
+# expensive petroleum.  The exact end date for DST is not yet
+# announced, only "September" but some sites also say "mid-September".
+# Some background information is available on the President's official site:
+# http://www.presidencia.gob.ni/Presidencia/Files_index/Secretaria/Notas%20de%20Prensa/Presidente/2005/ABRIL/Gobierno-de-nicaragua-adelanta-hora-oficial-06abril.htm
+# The Decree, no 23-2005 is available here:
+# http://www.presidencia.gob.ni/buscador_gaceta/BD/DECRETOS/2005/Decreto%2023-2005%20Se%20adelanta%20en%20una%20hora%20en%20todo%20el%20territorio%20nacional%20apartir%20de%20las%2024horas%20del%2009%20de%20Abril.pdf
+#
+# From Paul Eggert (2005-04-12):
+# The decree doesn't say anything about daylight saving, but for now let's
+# assume that it is daylight saving and that they'll switch back on the
+# 2nd Sunday in September.
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Nic	1979	1980	-	Mar	Sun>=16	0:00	1:00	D
+Rule	Nic	1979	1980	-	Jun	Mon>=23	0:00	0	S
+Rule	Nic	1992	only	-	Jan	1	4:00	1:00	D
+Rule	Nic	1992	only	-	Sep	24	0:00	0	S
+Rule	Nic	2005	only	-	Apr	10	0:00	1:00	D
+Rule	Nic	2005	only	-	Sep	11	0:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Managua	-5:45:08 -	LMT	1890
+			-5:45:12 -	MMT	1934 Jun 23 # Managua Mean Time?
+			-6:00	-	CST	1973 May
+			-5:00	-	EST	1975 Feb 16
+			-6:00	Nic	C%sT	1993 Jan 1 4:00
+			-5:00	-	EST	1998 Dec
+			-6:00	Nic	C%sT
+
+# Panama
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Panama	-5:18:08 -	LMT	1890
+			-5:19:36 -	CMT	1908 Apr 22   # Colon Mean Time
+			-5:00	-	EST
+
+# Puerto Rico
+# There are too many San Juans elsewhere, so we'll use `Puerto_Rico'.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Puerto_Rico -4:24:25 -	LMT	1899 Mar 28 12:00    # San Juan
+			-4:00	-	AST	1942 May  3
+			-4:00	1:00	AWT	1945 Sep 30  2:00
+			-4:00	-	AST
+
+# St Kitts-Nevis
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/St_Kitts	-4:10:52 -	LMT	1912 Mar 2	# Basseterre
+			-4:00	-	AST
+
+# St Lucia
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/St_Lucia	-4:04:00 -	LMT	1890		# Castries
+			-4:04:00 -	CMT	1912	    # Castries Mean Time
+			-4:00	-	AST
+
+# St Pierre and Miquelon
+# There are too many St Pierres elsewhere, so we'll use `Miquelon'.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Miquelon	-3:44:40 -	LMT	1911 May 15	# St Pierre
+			-4:00	-	AST	1980 May
+			-3:00	-	PMST	1987 # Pierre & Miquelon Time
+			-3:00	Canada	PM%sT
+
+# St Vincent and the Grenadines
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/St_Vincent	-4:04:56 -	LMT	1890		# Kingstown
+			-4:04:56 -	KMT	1912	   # Kingstown Mean Time
+			-4:00	-	AST
+
+# Turks and Caicos
+# From Paul Eggert (1998-08-06):
+# Shanks says they use US DST rules, but IATA SSIM (1991/1998)
+# says they switch at midnight.  Go with IATA SSIM.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	TC	1979	1986	-	Apr	lastSun	0:00	1:00	D
+Rule	TC	1979	max	-	Oct	lastSun	0:00	0	S
+Rule	TC	1987	max	-	Apr	Sun>=1	0:00	1:00	D
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Grand_Turk	-4:44:32 -	LMT	1890
+			-5:07:12 -	KMT	1912 Feb    # Kingston Mean Time
+			-5:00	TC	E%sT
+
+# British Virgin Is
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Tortola	-4:18:28 -	LMT	1911 Jul    # Road Town
+			-4:00	-	AST
+
+# Virgin Is
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/St_Thomas	-4:19:44 -	LMT	1911 Jul    # Charlotte Amalie
+			-4:00	-	AST
diff --git a/JodaTime/src/java/org/joda/time/tz/src/southamerica b/JodaTime/src/java/org/joda/time/tz/src/southamerica
index adf7d62b0..d348d7a47 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/southamerica
+++ b/JodaTime/src/java/org/joda/time/tz/src/southamerica
@@ -1,1083 +1,1083 @@
-# @(#)southamerica	7.59
-
-# This data is by no means authoritative; if you think you know better,
-# go ahead and edit the file (and please send any changes to
-# tz@elsie.nci.nih.gov for general use in the future).
-
-# From Paul Eggert <eggert@twinsun.com> (1999-07-07):
-# A good source for time zone historical data outside the U.S. is
-# Thomas G. Shanks, The International Atlas (5th edition),
-# San Diego: ACS Publications, Inc. (1999).
-#
-# Gwillim Law writes that a good source
-# for recent time zone data is the International Air Transport
-# Association's Standard Schedules Information Manual (IATA SSIM),
-# published semiannually.  Law sent in several helpful summaries
-# of the IATA's data after 1990.
-#
-# Except where otherwise noted, Shanks is the source for entries through 1990,
-# and IATA SSIM is the source for entries after 1990.
-#
-# Earlier editions of these tables used the North American style (e.g. ARST and
-# ARDT for Argentine Standard and Daylight Time), but the following quote
-# suggests that it's better to use European style (e.g. ART and ARST).
-#	I suggest the use of _Summer time_ instead of the more cumbersome
-#	_daylight-saving time_.  _Summer time_ seems to be in general use
-#	in Europe and South America.
-#	-- E O Cutler, _New York Times_ (1937-02-14), quoted in
-#	H L Mencken, _The American Language: Supplement I_ (1960), p 466
-#
-# Earlier editions of these tables also used the North American style
-# for time zones in Brazil, but this was incorrect, as Brazilians say
-# "summer time".  Reinaldo Goulart, a Sao Paulo businessman active in
-# the railroad sector, writes (1999-07-06):
-#	The subject of time zones is currently a matter of discussion/debate in
-#	Brazil.  Let's say that "the Brasilia time" is considered the
-#	"official time" because Brasilia is the capital city.
-#	The other three time zones are called "Brasilia time "minus one" or
-#	"plus one" or "plus two".  As far as I know there is no such
-#	name/designation as "Eastern Time" or "Central Time".
-# So I invented the following (English-language) abbreviations for now.
-# Corrections are welcome!
-#		std	dst
-#	-2:00	FNT	FNST	Fernando de Noronha
-#	-3:00	BRT	BRST	Brasilia
-#	-4:00	AMT	AMST	Amazon
-#	-5:00	ACT	ACST	Acre
-
-###############################################################################
-
-###############################################################################
-
-# Argentina
-
-# From Bob Devine (1988-01-28):
-# Argentina: first Sunday in October to first Sunday in April since 1976.
-# Double Summer time from 1969 to 1974.  Switches at midnight.
-
-# From U. S. Naval Observatory (1988-01-199):
-# ARGENTINA           3 H BEHIND   UTC
-
-# From Hernan G. Otero <hernan@isoft.com.ar> (1995-06-26):
-# I am sending modifications to the Argentine time zone table...
-# AR was chosen because they are the ISO letters that represent Argentina.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Arg	1930	only	-	Dec	 1	0:00	1:00	S
-Rule	Arg	1931	only	-	Apr	 1	0:00	0	-
-Rule	Arg	1931	only	-	Oct	15	0:00	1:00	S
-Rule	Arg	1932	1940	-	Mar	 1	0:00	0	-
-Rule	Arg	1932	1939	-	Nov	 1	0:00	1:00	S
-Rule	Arg	1940	only	-	Jul	 1	0:00	1:00	S
-Rule	Arg	1941	only	-	Jun	15	0:00	0	-
-Rule	Arg	1941	only	-	Oct	15	0:00	1:00	S
-Rule	Arg	1943	only	-	Aug	 1	0:00	0	-
-Rule	Arg	1943	only	-	Oct	15	0:00	1:00	S
-Rule	Arg	1946	only	-	Mar	 1	0:00	0	-
-Rule	Arg	1946	only	-	Oct	 1	0:00	1:00	S
-Rule	Arg	1963	only	-	Oct	 1	0:00	0	-
-Rule	Arg	1963	only	-	Dec	15	0:00	1:00	S
-Rule	Arg	1964	1966	-	Mar	 1	0:00	0	-
-Rule	Arg	1964	1966	-	Oct	15	0:00	1:00	S
-Rule	Arg	1967	only	-	Apr	 2	0:00	0	-
-Rule	Arg	1967	1968	-	Oct	Sun>=1	0:00	1:00	S
-Rule	Arg	1968	1969	-	Apr	Sun>=1	0:00	0	-
-Rule	Arg	1974	only	-	Jan	23	0:00	1:00	S
-Rule	Arg	1974	only	-	May	 1	0:00	0	-
-Rule	Arg	1988	only	-	Dec	 1	0:00	1:00	S
-#
-# From Hernan G. Otero <hernan@isoft.com.ar> (1995-06-26):
-# These corrections were contributed by InterSoft Argentina S.A.,
-# obtaining the data from the:
-# Talleres de Hidrografia Naval Argentina
-# (Argentine Naval Hydrography Institute)
-#
-# Shanks stops after 1992-03-01; go with Otero.
-Rule	Arg	1989	1993	-	Mar	Sun>=1	0:00	0	-
-Rule	Arg	1989	1992	-	Oct	Sun>=15	0:00	1:00	S
-#
-# From Hernan G. Otero <hernan@isoft.com.ar> (1995-06-26):
-# From this moment on, the law that mandated the daylight saving
-# time corrections was derogated and no more modifications
-# to the time zones (for daylight saving) are now made.
-#
-# From Rives McDow (2000-01-10):
-# On October 3, 1999, 0:00 local, Argentina implemented daylight savings time,
-# which did not result in the switch of a time zone, as they stayed 9 hours
-# from the International Date Line.
-Rule	Arg	1999	only	-	Oct	Sun>=1	0:00	1:00	S
-Rule	Arg	2000	only	-	Mar	Sun>=1	0:00	0	-
-#
-# From Peter Gradelski via Steffen Thorsen (2000-03-01):
-# We just checked with our Sao Paulo office and they say the government of
-# Argentina decided not to become one of the countries that go on or off DST.
-# So Buenos Aires should be -3 hours from GMT at all times.
-#
-# From Fabian L. Arce Jofre <farcejofre@bigfoot.com> (2000-04-04):
-# The law that claimed DST for Argentina was derogated by President Fernando
-# de la Rua on March 2, 2000, because it would make people spend more energy
-# in the winter time, rather than less.  The change took effect on March 3.
-#
-# From Mariano Absatz (2001-06-06):
-# one of the major newspapers here in Argentina said that the 1999
-# Timezone Law (which never was effectively applied) will (would?) be
-# in effect.... The article is at
-# http://ar.clarin.com/diario/2001-06-06/e-01701.htm
-# ... The Law itself is "Ley No 25155", sanctioned on 1999-08-25, enacted
-# 1999-09-17, and published 1999-09-21.  The official publication is at:
-# http://www.boletin.jus.gov.ar/BON/Primera/1999/09-Septiembre/21/PDF/BO21-09-99LEG.PDF
-# Regretfully, you have to subscribe (and pay) for the on-line version....
-#
-# (2001-06-12):
-# the timezone for Argentina will not change next Sunday.
-# Apparently it will do so on Sunday 24th....
-# http://ar.clarin.com/diario/2001-06-12/s-03501.htm
-#
-# (2001-06-25):
-# Last Friday (yes, the last working day before the date of the change), the
-# Senate annulled the 1999 law that introduced the changes later postponed.
-# http://www.clarin.com.ar/diario/2001-06-22/s-03601.htm
-# It remains the vote of the Deputies..., but it will be the same....
-# This kind of things had always been done this way in Argentina.
-# We are still -03:00 all year round in all of the country.
-#
-# From Mariano Absatz (2004-05-21):
-# Today it was officially published that the Province of Mendoza is changing
-# its timezone this winter... starting tomorrow night....
-# http://www.gobernac.mendoza.gov.ar/boletin/pdf/20040521-27158-normas.pdf
-# From Paul Eggert (2004-05-24):
-# It's Law No. 7,210.  This change is due to a public power emergency, so for
-# now we'll assume it's for this year only.
-#
-# From Paul Eggert (2002-01-22):
-# <a href="http://www.spicasc.net/horvera.html">
-# Hora de verano para la Republica Argentina (2000-10-01)
-# </a> says that standard time in Argentina from 1894-10-31
-# to 1920-05-01 was -4:16:48.25.  Go with this more-precise value
-# over Shanks.
-#
-# From Mariano Absatz (2004-06-05):
-# These media articles from a major newspaper mostly cover the current state:
-# http://www.lanacion.com.ar/04/05/27/de_604825.asp
-# http://www.lanacion.com.ar/04/05/28/de_605203.asp
-#
-# The following eight (8) provinces pulled clocks back to UTC-04:00 at
-# midnight Monday May 31st. (that is, the night between 05/31 and 06/01).
-# Apparently, all nine provinces would go back to UTC-03:00 at the same
-# time in October 17th.
-#
-# Catamarca, Chubut, La Rioja, San Juan, San Luis, Santa Cruz,
-# Tierra del Fuego, Tucuman.
-#
-# From Mariano Absatz (2004-06-14):
-# ... this weekend, the Province of Tucuman decided it'd go back to UTC-03:00
-# yesterday midnight (that is, at 24:00 Saturday 12th), since the people's
-# annoyance with the change is much higher than the power savings obtained....
-#
-# From Gwillim Law (2004-06-14):
-# http://www.lanacion.com.ar/04/06/10/de_609078.asp ...
-#     "The time change in Tierra del Fuego was a conflicted decision from
-#   the start.  The government had decreed that the measure would take
-#   effect on June 1, but a normative error forced the new time to begin
-#   three days earlier, from a Saturday to a Sunday....
-# Our understanding was that the change was originally scheduled to take place
-# on June 1 at 00:00 in Chubut, Santa Cruz, Tierra del Fuego (and some other
-# provinces).  Sunday was May 30, only two days earlier.  So the article
-# contains a contradiction.  I would give more credence to the Saturday/Sunday
-# date than the "three days earlier" phrase, and conclude that Tierra del
-# Fuego set its clocks back at 2004-05-30 00:00.
-#
-# From Steffen Thorsen (2004-10-05):
-# The previous law 7210 which changed the province of Mendoza's time zone
-# back in May have been modified slightly in a new law 7277, which set the
-# new end date to 2004-09-26 (original date was 2004-10-17).
-# http://www.gobernac.mendoza.gov.ar/boletin/pdf/20040924-27244-normas.pdf
-#
-# From Mariano Absatz (2004-10-05):
-# San Juan changed from UTC-03:00 to UTC-04:00 at midnight between
-# Sunday, May 30th and Monday, May 31st.  It changed back to UTC-03:00
-# at midnight between Saturday, July 24th and Sunday, July 25th....
-# http://www.sanjuan.gov.ar/prensa/archivo/000329.html
-# http://www.sanjuan.gov.ar/prensa/archivo/000426.html
-# http://www.sanjuan.gov.ar/prensa/archivo/000441.html
-
-# Unless otherwise specified, data are from Shanks through 1992, from
-# the IATA otherwise.  As noted below, Shanks says that
-# America/Cordoba split into 6 subregions during 1991/1992, but we
-# haven't verified this yet so for now we'll keep it a single region.
-#
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-#
-# Buenos Aires (BA), Capital Federal (CF),
-Zone America/Argentina/Buenos_Aires -3:53:48 - LMT 1894 Oct 31
-			-4:16:48 -	CMT	1920 May # Cordoba Mean Time
-			-4:00	-	ART	1930 Dec
-			-4:00	Arg	AR%sT	1969 Oct  5
-			-3:00	Arg	AR%sT	1999 Oct  3
-			-4:00	Arg	AR%sT	2000 Mar  3
-			-3:00	-	ART
-#
-# Santa Fe (SF), Entre Rios (ER), Corrientes (CN), Misiones (MN), Chaco (CC),
-# Formosa (FM), Salta (SA), Santiago del Estero (SE), Cordoba (CB),
-# San Luis (SL), La Pampa (LP), Neuquen (NQ), Rio Negro (RN)
-#
-# Shanks also makes the following claims, which we haven't verified:
-# - Formosa switched to -3:00 on 1991-01-07.
-# - Misiones switched to -3:00 on 1990-12-29.
-# - Chaco switched to -3:00 on 1991-01-04.
-# - San Luis switched to -4:00 on 1990-03-14, then to -3:00 on 1990-10-15,
-#   then to -4:00 on 1991-03-01, then to -3:00 on 1991-06-01.
-# - Santiago del Estero switched to -4:00 on 1991-04-01,
-#   then to -3:00 on 1991-04-26.
-#
-Zone America/Argentina/Cordoba -4:16:48 - LMT	1894 Oct 31
-			-4:16:48 -	CMT	1920 May
-			-4:00	-	ART	1930 Dec
-			-4:00	Arg	AR%sT	1969 Oct  5
-			-3:00	Arg	AR%sT	1991 Mar  3
-			-4:00	-	WART	1991 Oct 20
-			-3:00	Arg	AR%sT	1999 Oct  3
-			-4:00	Arg	AR%sT	2000 Mar  3
-			-3:00	-	ART
-#
-# Tucuman (TM)
-Zone America/Argentina/Tucuman -4:20:52 - LMT	1894 Oct 31
-			-4:16:48 -	CMT	1920 May
-			-4:00	-	ART	1930 Dec
-			-4:00	Arg	AR%sT	1969 Oct  5
-			-3:00	Arg	AR%sT	1991 Mar  3
-			-4:00	-	WART	1991 Oct 20
-			-3:00	Arg	AR%sT	1999 Oct  3
-			-4:00	Arg	AR%sT	2000 Mar  3
-			-3:00	-	ART	2004 Jun  1
-			-4:00	-	WART	2004 Jun 13
-			-3:00	-	ART
-#
-# La Rioja (LR)
-Zone America/Argentina/La_Rioja -4:27:24 - LMT	1894 Oct 31
-			-4:16:48 -	CMT	1920 May
-			-4:00	-	ART	1930 Dec
-			-4:00	Arg	AR%sT	1969 Oct  5
-			-3:00	Arg	AR%sT	1991 Mar  1
-			-4:00	-	WART	1991 May  7
-			-3:00	Arg	AR%sT	1999 Oct  3
-			-4:00	Arg	AR%sT	2000 Mar  3
-			-3:00	-	ART	2004 Jun  1
-			-4:00	-	WART	2004 Jun 20
-			-3:00	-	ART
-#
-# San Juan (SJ)
-Zone America/Argentina/San_Juan -4:34:04 - LMT	1894 Oct 31
-			-4:16:48 -	CMT	1920 May
-			-4:00	-	ART	1930 Dec
-			-4:00	Arg	AR%sT	1969 Oct  5
-			-3:00	Arg	AR%sT	1991 Mar  1
-			-4:00	-	WART	1991 May  7
-			-3:00	Arg	AR%sT	1999 Oct  3
-			-4:00	Arg	AR%sT	2000 Mar  3
-			-3:00	-	ART	2004 May 31
-			-4:00	-	WART	2004 Jul 25
-			-3:00	-	ART
-#
-# Jujuy (JY)
-Zone America/Argentina/Jujuy -4:21:12 -	LMT	1894 Oct 31
-			-4:16:48 -	CMT	1920 May
-			-4:00	-	ART	1930 Dec
-			-4:00	Arg	AR%sT	1969 Oct  5
-			-3:00	Arg	AR%sT	1990 Mar  4
-			-4:00	-	WART	1990 Oct 28
-			-4:00	1:00	WARST	1991 Mar 17
-			-4:00	-	WART	1991 Oct  6
-			-3:00	1:00	ARST	1992
-			-3:00	Arg	AR%sT	1999 Oct  3
-			-4:00	Arg	AR%sT	2000 Mar  3
-			-3:00	-	ART
-#
-# Catamarca (CT)
-Zone America/Argentina/Catamarca -4:23:08 - LMT	1894 Oct 31
-			-4:16:48 -	CMT	1920 May
-			-4:00	-	ART	1930 Dec
-			-4:00	Arg	AR%sT	1969 Oct  5
-			-3:00	Arg	AR%sT	1991 Mar  3
-			-4:00	-	WART	1991 Oct 20
-			-3:00	Arg	AR%sT	1999 Oct  3
-			-4:00	Arg	AR%sT	2000 Mar  3
-			-3:00	-	ART	2004 Jun  1
-			-4:00	-	WART	2004 Jun 20
-			-3:00	-	ART
-#
-# Mendoza (MZ)
-Zone America/Argentina/Mendoza -4:35:16 - LMT	1894 Oct 31
-			-4:16:48 -	CMT	1920 May
-			-4:00	-	ART	1930 Dec
-			-4:00	Arg	AR%sT	1969 Oct  5
-			-3:00	Arg	AR%sT	1990 Mar  4
-			-4:00	-	WART	1990 Oct 15
-			-4:00	1:00	WARST	1991 Mar  1
-			-4:00	-	WART	1991 Oct 15
-			-4:00	1:00	WARST	1992 Mar  1
-			-4:00	-	WART	1992 Oct 18
-			-3:00	Arg	AR%sT	1999 Oct  3
-			-4:00	Arg	AR%sT	2000 Mar  3
-			-3:00	-	ART	2004 May 23
-			-4:00	-	WART	2004 Sep 26
-			-3:00	-	ART
-#
-# Chubut (CH)
-# The name "Comodoro Rivadavia" exceeds the 14-byte POSIX limit.
-Zone America/Argentina/ComodRivadavia -4:30:00 - LMT	1894 Oct 31
-			-4:16:48 -	CMT	1920 May
-			-4:00	-	ART	1930 Dec
-			-4:00	Arg	AR%sT	1969 Oct  5
-			-3:00	Arg	AR%sT	1991 Mar  3
-			-4:00	-	WART	1991 Oct 20
-			-3:00	Arg	AR%sT	1999 Oct  3
-			-4:00	Arg	AR%sT	2000 Mar  3
-			-3:00	-	ART	2004 Jun  1
-			-4:00	-	WART	2004 Jun 20
-			-3:00	-	ART
-#
-# Santa Cruz (SC)
-Zone America/Argentina/Rio_Gallegos -4:36:52 - LMT 1894 Oct 31
-			-4:16:48 -	CMT	1920 May # Cordoba Mean Time
-			-4:00	-	ART	1930 Dec
-			-4:00	Arg	AR%sT	1969 Oct  5
-			-3:00	Arg	AR%sT	1999 Oct  3
-			-4:00	Arg	AR%sT	2000 Mar  3
-			-3:00	-	ART	2004 Jun  1
-			-4:00	-	WART	2004 Jun 20
-			-3:00	-	ART
-#
-# Tierra del Fuego, Antartida e Islas del Atlantico Sur (TF)
-Zone America/Argentina/Ushuaia -4:33:12 - LMT 1894 Oct 31
-			-4:16:48 -	CMT	1920 May # Cordoba Mean Time
-			-4:00	-	ART	1930 Dec
-			-4:00	Arg	AR%sT	1969 Oct  5
-			-3:00	Arg	AR%sT	1999 Oct  3
-			-4:00	Arg	AR%sT	2000 Mar  3
-			-3:00	-	ART	2004 May 30
-			-4:00	-	WART	2004 Jun 20
-			-3:00	-	ART
-
-# Aruba
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Aruba	-4:40:24 -	LMT	1912 Feb 12	# Oranjestad
-			-4:30	-	ANT	1965 # Netherlands Antilles Time
-			-4:00	-	AST
-
-# Bolivia
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/La_Paz	-4:32:36 -	LMT	1890
-			-4:32:36 -	CMT	1931 Oct 15 # Calamarca MT
-			-4:32:36 1:00	BOST	1932 Mar 21 # Bolivia ST
-			-4:00	-	BOT	# Bolivia Time
-
-# Brazil
-
-# From Paul Eggert <eggert@twinsun.com> (1993-11-18):
-# The mayor of Rio recently attempted to change the time zone rules
-# just in his city, in order to leave more summer time for the tourist trade.
-# The rule change lasted only part of the day;
-# the federal government refused to follow the city's rules, and business
-# was in a chaos, so the mayor backed down that afternoon.
-
-# From IATA SSIM (1996-02):
-# _Only_ the following states in BR1 observe DST: Rio Grande do Sul (RS),
-# Santa Catarina (SC), Parana (PR), Sao Paulo (SP), Rio de Janeiro (RJ),
-# Espirito Santo (ES), Minas Gerais (MG), Bahia (BA), Goias (GO),
-# Distrito Federal (DF), Tocantins (TO), Sergipe [SE] and Alagoas [AL].
-# [The last three states are new to this issue of the IATA SSIM.]
-
-# From Gwillim Law (1996-10-07):
-# Geography, history (Tocantins was part of Goias until 1989), and other
-# sources of time zone information lead me to believe that AL, SE, and TO were
-# always in BR1, and so the only change was whether or not they observed DST....
-# The earliest issue of the SSIM I have is 2/91.  Each issue from then until
-# 9/95 says that DST is observed only in the ten states I quoted from 9/95,
-# along with Mato Grosso (MT) and Mato Grosso do Sul (MS), which are in BR2
-# (UTC-4)....  The other two time zones given for Brazil are BR3, which is
-# UTC-5, no DST, and applies only in the state of Acre (AC); and BR4, which is
-# UTC-2, and applies to Fernando de Noronha (formerly FN, but I believe it's
-# become part of the state of Pernambuco).  The boundary between BR1 and BR2
-# has never been clearly stated.  They've simply been called East and West.
-# However, some conclusions can be drawn from another IATA manual: the Airline
-# Coding Directory, which lists close to 400 airports in Brazil.  For each
-# airport it gives a time zone which is coded to the SSIM.  From that
-# information, I'm led to conclude that the states of Amapa (AP), Ceara (CE),
-# Maranhao (MA), Paraiba (PR), Pernambuco (PE), Piaui (PI), and Rio Grande do
-# Norte (RN), and the eastern part of Para (PA) are all in BR1 without DST.
-
-# From Marcos Tadeu (1998-09-27):
-# <a href="http://pcdsh01.on.br/verao1.html">
-# Brazilian official page
-# </a>
-
-# From Jesper Norgaard (2000-11-03):
-# [For an official list of which regions in Brazil use which time zones, see:]
-# http://pcdsh01.on.br/Fusbr.htm
-# http://pcdsh01.on.br/Fusbrhv.htm
-
-# From Celso Doria via David Madeo (2002-10-09):
-# The reason for the delay this year has to do with elections in Brazil.
-#
-# Unlike in the United States, elections in Brazil are 100% computerized and
-# the results are known almost immediately.  Yesterday, it was the first
-# round of the elections when 115 million Brazilians voted for President,
-# Governor, Senators, Federal Deputies, and State Deputies.  Nobody is
-# counting (or re-counting) votes anymore and we know there will be a second
-# round for the Presidency and also for some Governors.  The 2nd round will
-# take place on October 27th.
-#
-# The reason why the DST will only begin November 3rd is that the thousands
-# of electoral machines used cannot have their time changed, and since the
-# Constitution says the elections must begin at 8:00 AM and end at 5:00 PM,
-# the Government decided to postpone DST, instead of changing the Constitution
-# (maybe, for the next elections, it will be possible to change the clock)...
-
-# From Rodrigo Severo (2004-10-04):
-# It's just the biannual change made necessary by the much hyped, supposedly
-# modern Brazilian eletronic voting machines which, apparently, can't deal
-# with a time change between the first and the second rounds of the elections.
-
-# From Paul Eggert (2002-10-10):
-# The official decrees referenced below are mostly taken from
-# <a href="http://pcdsh01.on.br/DecHV.html">
-# Decretos sobre o Horario de Verao no Brasil
-# </a> (2001-09-20, in Portuguese).
-# The official site for all decrees, including those not related to time, is
-# <a href="http://www.presidencia.gov.br/CCIVIL/decreto/principal_ano.htm">
-# Presidencia da Republica, Subchefia para Assuntos Juridicos, Decretos
-# </a> (in Portuguese).
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-# Decree <a href="http://pcdsh01.on.br/HV20466.htm">20,466</a> (1931-10-01)
-# Decree <a href="http://pcdsh01.on.br/HV21896.htm">21,896</a> (1932-01-10)
-Rule	Brazil	1931	only	-	Oct	 3	11:00	1:00	S
-Rule	Brazil	1932	1933	-	Apr	 1	 0:00	0	-
-Rule	Brazil	1932	only	-	Oct	 3	 0:00	1:00	S
-# Decree <a href="http://pcdsh01.on.br/HV23195.htm">23,195</a> (1933-10-10)
-# revoked DST.
-# Decree <a href="http://pcdsh01.on.br/HV27496.htm">27,496</a> (1949-11-24)
-# Decree <a href="http://pcdsh01.on.br/HV27998.htm">27,998</a> (1950-04-13)
-Rule	Brazil	1949	1952	-	Dec	 1	 0:00	1:00	S
-Rule	Brazil	1950	only	-	Apr	16	 1:00	0	-
-Rule	Brazil	1951	1952	-	Apr	 1	 0:00	0	-
-# Decree <a href="http://pcdsh01.on.br/HV32308.htm">32,308</a> (1953-02-24)
-Rule	Brazil	1953	only	-	Mar	 1	 0:00	0	-
-# Decree <a href="http://pcdsh01.on.br/HV34724.htm">34,724</a> (1953-11-30)
-# revoked DST.
-# Decree <a href="http://pcdsh01.on.br/HV52700.htm">52,700</a> (1963-10-18)
-# established DST from 1963-10-23 00:00 to 1964-02-29 00:00
-# in SP, RJ, GB, MG, ES, due to the prolongation of the drought.
-# Decree <a href="http://pcdsh01.on.br/HV53071.htm">53,071</a> (1963-12-03)
-# extended the above decree to all of the national territory on 12-09.
-Rule	Brazil	1963	only	-	Dec	 9	 0:00	1:00	S
-# Decree <a href="http://pcdsh01.on.br/HV53604.htm">53,604</a> (1964-02-25)
-# extended summer time by one day to 1964-03-01 00:00 (start of school).
-Rule	Brazil	1964	only	-	Mar	 1	 0:00	0	-
-# Decree <a href="http://pcdsh01.on.br/HV55639.htm">55,639</a> (1965-01-27)
-Rule	Brazil	1965	only	-	Jan	31	 0:00	1:00	S
-Rule	Brazil	1965	only	-	Mar	31	 0:00	0	-
-# Decree <a href="http://pcdsh01.on.br/HV57303.htm">57,303</a> (1965-11-22)
-Rule	Brazil	1965	only	-	Dec	 1	 0:00	1:00	S
-# Decree <a href="http://pcdsh01.on.br/HV57843.htm">57,843</a> (1966-02-18)
-Rule	Brazil	1966	1968	-	Mar	 1	 0:00	0	-
-Rule	Brazil	1966	1967	-	Nov	 1	 0:00	1:00	S
-# Decree <a href="http://pcdsh01.on.br/HV63429.htm">63,429</a> (1968-10-15)
-# revoked DST.
-# Decree <a href="http://pcdsh01.on.br/HV91698.htm">91,698</a> (1985-09-27)
-Rule	Brazil	1985	only	-	Nov	 2	 0:00	1:00	S
-# Decree 92,310 (1986-01-21)
-# Decree 92,463 (1986-03-13)
-Rule	Brazil	1986	only	-	Mar	15	 0:00	0	-
-# Decree 93,316 (1986-10-01)
-Rule	Brazil	1986	only	-	Oct	25	 0:00	1:00	S
-Rule	Brazil	1987	only	-	Feb	14	 0:00	0	-
-# Decree <a href="http://pcdsh01.on.br/HV94922.htm">94,922</a> (1987-09-22)
-Rule	Brazil	1987	only	-	Oct	25	 0:00	1:00	S
-Rule	Brazil	1988	only	-	Feb	 7	 0:00	0	-
-# Decree <a href="http://pcdsh01.on.br/HV96676.htm">96,676</a> (1988-09-12)
-# except for the states of AC, AM, PA, RR, RO, and AP (then a territory)
-Rule	Brazil	1988	only	-	Oct	16	 0:00	1:00	S
-Rule	Brazil	1989	only	-	Jan	29	 0:00	0	-
-# Decree <a href="http://pcdsh01.on.br/HV98077.htm">98,077</a> (1989-08-21)
-# with the same exceptions
-Rule	Brazil	1989	only	-	Oct	15	 0:00	1:00	S
-Rule	Brazil	1990	only	-	Feb	11	 0:00	0	-
-# Decree <a href="http://pcdsh01.on.br/HV99530.htm">99,530</a> (1990-09-17)
-# adopted by RS, SC, PR, SP, RJ, ES, MG, GO, MS, DF.
-# Decree 99,629 (1990-10-19) adds BA, MT.
-Rule	Brazil	1990	only	-	Oct	21	 0:00	1:00	S
-Rule	Brazil	1991	only	-	Feb	17	 0:00	0	-
-# <a href="http://pcdsh01.on.br/HV1991.htm">Unnumbered decree</a> (1991-09-25)
-# adopted by RS, SC, PR, SP, RJ, ES, MG, BA, GO, MT, MS, DF.
-Rule	Brazil	1991	only	-	Oct	20	 0:00	1:00	S
-Rule	Brazil	1992	only	-	Feb	 9	 0:00	0	-
-# <a href="http://pcdsh01.on.br/HV1992.htm">Unnumbered decree</a> (1992-10-16)
-# adopted by same states.
-Rule	Brazil	1992	only	-	Oct	25	 0:00	1:00	S
-Rule	Brazil	1993	only	-	Jan	31	 0:00	0	-
-# Decree <a href="http://pcdsh01.on.br/HV942.htm">942</a> (1993-09-28)
-# adopted by same states, plus AM.
-# Decree <a href="http://pcdsh01.on.br/HV1252.htm">1,252</a> (1994-09-22;
-# web page corrected 2004-01-07) adopted by same states, minus AM.
-# Decree <a href="http://pcdsh01.on.br/HV1636.htm">1,636</a> (1995-09-14)
-# adopted by same states, plus MT and TO.
-# Decree <a href="http://pcdsh01.on.br/HV1674.htm">1,674</a> (1995-10-13)
-# adds AL, SE.
-Rule	Brazil	1993	1995	-	Oct	Sun>=11	 0:00	1:00	S
-Rule	Brazil	1994	1995	-	Feb	Sun>=15	 0:00	0	-
-Rule	Brazil	1996	only	-	Feb	11	 0:00	0	-
-# Decree <a href="http://pcdsh01.on.br/HV2000.htm">2,000</a> (1996-09-04)
-# adopted by same states, minus AL, SE.
-Rule	Brazil	1996	only	-	Oct	 6	 0:00	1:00	S
-Rule	Brazil	1997	only	-	Feb	16	 0:00	0	-
-# From Daniel C. Sobral <dcs@gns.com.br> (1998-02-12):
-# In 1997, the DS began on October 6. The stated reason was that
-# because international television networks ignored Brazil's policy on DS,
-# they bought the wrong times on satellite for coverage of Pope's visit.
-# This year, the ending date of DS was postponed to March 1
-# to help dealing with the shortages of electric power.
-#
-# From Paul Eggert (1998-02-25):
-# <a href="http://churchnet.ucsm.ac.uk/news/files2/news165.htm">
-# Brazil Prepares for Papal Visit
-# </a>,
-# Church Net UK (1997-10-02).
-#
-# Decree 2,317 (1997-09-04), adopted by same states.
-Rule	Brazil	1997	only	-	Oct	 6	 0:00	1:00	S
-# Decree <a href="http://pcdsh01.on.br/figuras/HV2495.JPG">2,495</a>
-# (1998-02-10)
-Rule	Brazil	1998	only	-	Mar	 1	 0:00	0	-
-# Decree <a href="http://pcdsh01.on.br/figuras/Hv98.jpg">2,780</a> (1998-09-11)
-# adopted by the same states as before.
-Rule	Brazil	1998	only	-	Oct	11	 0:00	1:00	S
-Rule	Brazil	1999	only	-	Feb	21	 0:00	0	-
-# Decree <a href="http://pcdsh01.on.br/figuras/HV3150.gif">3,150</a>
-# (1999-08-23) adopted by same states.
-# Decree <a href="http://pcdsh01.on.br/DecHV99.gif">3,188</a> (1999-09-30)
-# adds SE, AL, PB, PE, RN, CE, PI, MA and RR.
-Rule	Brazil	1999	only	-	Oct	 3	 0:00	1:00	S
-Rule	Brazil	2000	only	-	Feb	27	 0:00	0	-
-# Decree <a href="http://pcdsh01.on.br/DEC3592.htm">3,592</a> (2000-09-06)
-# adopted by the same states as before.
-# Decree <a href="http://pcdsh01.on.br/Dec3630.jpg">3,630</a> (2000-10-13)
-# repeals DST in PE and RR, effective 2000-10-15 00:00.
-# Decree <a href="http://pcdsh01.on.br/Dec3632.jpg">3,632</a> (2000-10-17)
-# repeals DST in SE, AL, PB, RN, CE, PI and MA, effective 2000-10-22 00:00.
-# Decree <a href="http://pcdsh01.on.br/figuras/HV3916.gif">3,916</a>
-# (2001-09-13) reestablishes DST in AL, CE, MA, PB, PE, PI, RN, SE.
-Rule	Brazil	2000	2001	-	Oct	Sun>=8	 0:00	1:00	S
-Rule	Brazil	2001	max	-	Feb	Sun>=15	 0:00	0	-
-# Decree 4,399 (2002-10-01) repeals DST in AL, CE, MA, PB, PE, PI, RN, SE.
-# <a href="http://www.presidencia.gov.br/CCIVIL/decreto/2002/D4399.htm"></a>
-Rule	Brazil	2002	only	-	Nov	 3	 0:00	1:00	S
-# Decree 4,844 (2003-09-24; corrected 2003-09-26) repeals DST in BA, MT, TO.
-# <a href="http://www.presidencia.gov.br/CCIVIL/decreto/2003/D4844.htm"></a>
-Rule	Brazil	2003	only	-	Oct	19	 0:00	1:00	S
-# Decree 5,223 (2004-10-01) reestablishes DST in MT.
-# <a href="http://www.planalto.gov.br/ccivil_03/_Ato2004-2006/2004/Decreto/D5223.htm"></a>
-Rule	Brazil	2004	only	-	Nov	 2	 0:00	1:00	S
-# The latest ruleset listed above says that the following states observe DST:
-# DF, ES, GO, MG, MS, MT, PR, RJ, RS, SC, SP.
-#
-Rule	Brazil	2005	max	-	Oct	Sun>=15	 0:00	1:00	S
-# For dates after mid-2005, the above rules with TO="max" are guesses
-# and are quite possibly wrong, but are more likely than no DST at all.
-
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-#
-# Fernando de Noronha (administratively part of PE)
-Zone America/Noronha	-2:09:40 -	LMT	1914
-			-2:00	Brazil	FN%sT	1990 Sep 17
-			-2:00	-	FNT	1999 Sep 30
-			-2:00	Brazil	FN%sT	2000 Oct 15
-			-2:00	-	FNT	2001 Sep 13
-			-2:00	Brazil	FN%sT	2002 Oct  1
-			-2:00	-	FNT
-# Other Atlantic islands have no permanent settlement.
-# These include Trindade and Martin Vaz (administratively part of ES),
-# Atol das Rocas (RN), and Penedos de Sao Pedro e Sao Paulo (PE).
-# Fernando de Noronha was a separate territory from 1942-09-02 to 1989-01-01;
-# it also included the Penedos.
-#
-# Amapa (AP), east Para (PA)
-# East Para includes Belem, Maraba, Serra Norte, and Sao Felix do Xingu.
-# The division between east and west Para is the river Xingu.
-# In the north a very small part from the river Javary (now Jari I guess,
-# the border with Amapa) to the Amazon, then to the Xingu.
-Zone America/Belem	-3:13:56 -	LMT	1914
-			-3:00	Brazil	BR%sT	1988 Sep 12
-			-3:00	-	BRT
-#
-# Maranhao (MA), Piaui (PI), Ceara (CE), Rio Grande do Norte (RN),
-# Paraiba (PB)
-Zone America/Fortaleza	-2:34:00 -	LMT	1914
-			-3:00	Brazil	BR%sT	1990 Sep 17
-			-3:00	-	BRT	1999 Sep 30
-			-3:00	Brazil	BR%sT	2000 Oct 22
-			-3:00	-	BRT	2001 Sep 13
-			-3:00	Brazil	BR%sT	2002 Oct  1
-			-3:00	-	BRT
-#
-# Pernambuco (PE) (except Atlantic islands)
-Zone America/Recife	-2:19:36 -	LMT	1914
-			-3:00	Brazil	BR%sT	1990 Sep 17
-			-3:00	-	BRT	1999 Sep 30
-			-3:00	Brazil	BR%sT	2000 Oct 15
-			-3:00	-	BRT	2001 Sep 13
-			-3:00	Brazil	BR%sT	2002 Oct  1
-			-3:00	-	BRT
-#
-# Tocantins (TO)
-Zone America/Araguaina	-3:12:48 -	LMT	1914
-			-3:00	Brazil	BR%sT	1990 Sep 17
-			-3:00	-	BRT	1995 Sep 14
-			-3:00	Brazil	BR%sT	2003 Sep 24
-			-3:00	-	BRT
-#
-# Alagoas (AL), Sergipe (SE)
-Zone America/Maceio	-2:22:52 -	LMT	1914
-			-3:00	Brazil	BR%sT	1990 Sep 17
-			-3:00	-	BRT	1995 Oct 13
-			-3:00	Brazil	BR%sT	1996 Sep  4
-			-3:00	-	BRT	1999 Sep 30
-			-3:00	Brazil	BR%sT	2000 Oct 22
-			-3:00	-	BRT	2001 Sep 13
-			-3:00	Brazil	BR%sT	2002 Oct  1
-			-3:00	-	BRT
-#
-# Bahia (BA)
-# There are too many Salvadors elsewhere, so use America/Bahia instead
-# of America/Salvador.
-Zone America/Bahia	-2:34:04 -	LMT	1914
-			-3:00	Brazil	BR%sT	2003 Sep 24
-			-3:00	-	BRT
-#
-# Goias (GO), Distrito Federal (DF), Minas Gerais (MG),
-# Espirito Santo (ES), Rio de Janeiro (RJ), Sao Paulo (SP), Parana (PR),
-# Santa Catarina (SC), Rio Grande do Sul (RS)
-Zone America/Sao_Paulo	-3:06:28 -	LMT	1914
-			-3:00	Brazil	BR%sT	1963 Oct 23 00:00
-			-3:00	1:00	BRST	1964
-			-3:00	Brazil	BR%sT
-#
-# Mato Grosso do Sul (MS)
-Zone America/Campo_Grande -3:38:28 -	LMT	1914
-			-4:00	Brazil	AM%sT
-#
-# Mato Grosso (MT)
-Zone America/Cuiaba	-3:44:20 -	LMT	1914
-			-4:00	Brazil	AM%sT	2003 Sep 24
-			-4:00	-	AMT	2004 Oct  1
-			-4:00	Brazil	AM%sT
-#
-# west Para (PA), Rondonia (RO)
-# West Para includes Altamira, Oribidos, Prainha, Oriximina, and Santarem.
-Zone America/Porto_Velho -4:15:36 -	LMT	1914
-			-4:00	Brazil	AM%sT	1988 Sep 12
-			-4:00	-	AMT
-#
-# Roraima (RR)
-Zone America/Boa_Vista	-4:02:40 -	LMT	1914
-			-4:00	Brazil	AM%sT	1988 Sep 12
-			-4:00	-	AMT	1999 Sep 30
-			-4:00	Brazil	AM%sT	2000 Oct 15
-			-4:00	-	AMT
-#
-# east Amazonas (AM): Boca do Acre, Jutai, Manaus, Floriano Peixoto
-# The great circle line from Tabatinga to Porto Acre divides
-# east from west Amazonas.
-Zone America/Manaus	-4:00:04 -	LMT	1914
-			-4:00	Brazil	AM%sT	1988 Sep 12
-			-4:00	-	AMT	1993 Sep 28
-			-4:00	Brazil	AM%sT	1994 Sep 22
-			-4:00	-	AMT
-#
-# west Amazonas (AM): Atalaia do Norte, Boca do Maoco, Benjamin Constant,
-#	Eirunepe, Envira, Ipixuna
-Zone America/Eirunepe	-4:39:28 -	LMT	1914
-			-5:00	Brazil	AC%sT	1988 Sep 12
-			-5:00	-	ACT	1993 Sep 28
-			-5:00	Brazil	AC%sT	1994 Sep 22
-			-5:00	-	ACT
-#
-# Acre (AC)
-Zone America/Rio_Branco	-4:31:12 -	LMT	1914
-			-5:00	Brazil	AC%sT	1988 Sep 12
-			-5:00	-	ACT
-
-
-# Chile
-
-# From Eduardo Krell (1995-10-19):
-# The law says to switch to DST at midnight [24:00] on the second SATURDAY
-# of October....  The law is the same for March and October.
-# (1998-09-29):
-# Because of the drought this year, the government decided to go into
-# DST earlier (saturday 9/26 at 24:00). This is a one-time change only ...
-# (unless there's another dry season next year, I guess).
-
-# From Julio I. Pacheco Troncoso (1999-03-18):
-# Because of the same drought, the government decided to end DST later,
-# on April 3, (one-time change).
-
-# From Gwillim Law (2001-05-04):
-# I came across another article in "La Tercera" about Chilean DST.
-# <http://www.tercera.cl/diario/2000/10/13/t-extras.html>
-# It clearly confirms my earlier suggestion, that DST begins at 22:00
-# on Easter Island....  But it also seems to be saying that the
-# observance of DST in Chile began in 1966, rather than 1969 as
-# ... [Shanks] has it....
-#
-# My translation:
-#
-# "The Chilean Army has announced that summer time will begin tomorrow,
-# Saturday, October 14 in continental Chile, insular Chile, and
-# Antarctica, as provided by Supreme Decree 25 of January 11, 1966.
-# By the preceding, official time in continental Chile and Chilean
-# Antarctic, and official time in Western Insular Chile, which applies
-# to Easter Island and Sala y Gomez Island, will be set forward at
-# midnight and at 22:00, respectively, by 20 minutes."
-
-# From Paul Eggert (2001-05-04):
-# Go with this article in preference to Shanks's 1969 date for modern DST.
-# Assume this rule has been used since DST was introduced in the islands.
-
-# From Paul Eggert (2002-10-24):
-# <http://www.shoa.cl/shoa/faqhoraoficial.htm> gives many details that
-# disagree with the following table, but we haven't had time to compare them.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Chile	1918	only	-	Sep	 1	0:00	1:00	S
-Rule	Chile	1919	only	-	Jul	 2	0:00	0	-
-Rule	Chile	1927	1931	-	Sep	 1	0:00	1:00	S
-Rule	Chile	1928	1932	-	Apr	 1	0:00	0	-
-Rule	Chile	1966	1997	-	Oct	Sun>=9	4:00u	1:00	S
-Rule	Chile	1967	1998	-	Mar	Sun>=9	3:00u	0	-
-Rule	Chile	1998	only	-	Sep	27	4:00u	1:00	S
-Rule	Chile	1999	only	-	Apr	 4	3:00u	0	-
-Rule	Chile	1999	max	-	Oct	Sun>=9	4:00u	1:00	S
-Rule	Chile	2000	max	-	Mar	Sun>=9	3:00u	0	-
-# IATA SSIM anomalies: (1990-09) says 1990-09-16; (1992-02) says 1992-03-14;
-# (1996-09) says 1998-03-08.  Ignore these.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Santiago	-4:42:40 -	LMT	1890
-			-4:42:40 -	SMT	1910	    # Santiago Mean Time
-			-5:00	Chile	CL%sT	1932 Sep    # Chile Time
-			-4:00	Chile	CL%sT
-Zone Pacific/Easter	-7:17:28 -	LMT	1890	    # Mataveri
-			-7:17:28 -	MMT	1932 Sep    # Mataveri Mean Time
-			-7:00	Chile	EAS%sT	1982 Mar 14 # Easter I Time
-			-6:00	Chile	EAS%sT
-#
-# Sala y Gomez Island is like Pacific/Easter.
-# Other Chilean locations, including Juan Fernandez Is, San Ambrosio,
-# San Felix, and Antarctic bases, are like America/Santiago.
-
-# Colombia
-# Shanks specifies 24:00 for 1992 transition times; go with IATA,
-# as it seems implausible to change clocks at midnight New Year's Eve.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	CO	1992	only	-	May	 2	0:00	1:00	S
-Rule	CO	1992	only	-	Dec	31	0:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Bogota	-4:56:20 -	LMT	1884 Mar 13
-			-4:56:20 -	BMT	1914 Nov 23 # Bogota Mean Time
-			-5:00	CO	CO%sT	# Colombia Time
-# Malpelo, Providencia, San Andres
-# no information; probably like America/Bogota
-
-# Curacao
-# Shanks says that Bottom and Oranjestad have been at -4:00 since
-# standard time was introduced on 1912-03-02; and that Kralendijk and Rincon
-# used Kralendijk Mean Time (-4:33:08) from 1912-02-02 to 1965-01-01.
-# This all predates our 1970 cutoff, though.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Curacao	-4:35:44 -	LMT	1912 Feb 12	# Willemstad
-			-4:30	-	ANT	1965 # Netherlands Antilles Time
-			-4:00	-	AST
-
-# Ecuador
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Guayaquil	-5:19:20 -	LMT	1890
-			-5:14:00 -	QMT	1931 # Quito Mean Time
-			-5:00	-	ECT	     # Ecuador Time
-Zone Pacific/Galapagos	-5:58:24 -	LMT	1931 # Puerto Baquerizo Moreno
-			-5:00	-	ECT	1986
-			-6:00	-	GALT	     # Galapagos Time
-
-# Falklands
-
-# From Paul Eggert (2001-03-05):
-# Between 1990 and 2000 inclusive, Shanks and the IATA agree except
-# the IATA gives 1996-09-08.  Go with Shanks.
-
-# From Falkland Islands Government Office, London (2001-01-22)
-# via Jesper Norgaard:
-# ... the clocks revert back to Local Mean Time at 2 am on Sunday 15
-# April 2001 and advance one hour to summer time at 2 am on Sunday 2
-# September.  It is anticipated that the clocks will revert back at 2
-# am on Sunday 21 April 2002 and advance to summer time at 2 am on
-# Sunday 1 September.
-
-# From Rives McDow (2001-02-13):
-#
-# I have communicated several times with people there, and the last
-# time I had communications that was helpful was in 1998.  Here is
-# what was said then:
-#
-# "The general rule was that Stanley used daylight saving and the Camp
-# did not. However for various reasons many people in the Camp have
-# started to use daylight saving (known locally as 'Stanley Time')
-# There is no rule as to who uses daylight saving - it is a matter of
-# personal choice and so it is impossible to draw a map showing who
-# uses it and who does not. Any list would be out of date as soon as
-# it was produced. This year daylight saving ended on April 18/19th
-# and started again on September 12/13th.  I do not know what the rule
-# is, but can find out if you like.  We do not change at the same time
-# as UK or Chile."
-#
-# I did have in my notes that the rule was "Second Saturday in Sep at
-# 0:00 until third Saturday in Apr at 0:00".  I think that this does
-# not agree in some cases with Shanks; is this true?
-#
-# Also, there is no mention in the list that some areas in the
-# Falklands do not use DST.  I have found in my communications there
-# that these areas are on the western half of East Falkland and all of
-# West Falkland.  Stanley is the only place that consistently observes
-# DST.  Again, as in other places in the world, the farmers don't like
-# it.  West Falkland is almost entirely sheep farmers.
-#
-# I know one lady there that keeps a list of which farm keeps DST and
-# which doesn't each year.  She runs a shop in Stanley, and says that
-# the list changes each year.  She uses it to communicate to her
-# customers, catching them when they are home for lunch or dinner.
-
-# From Paul Eggert (2001-03-05):
-# For now, we'll just record the time in Stanley, since we have no
-# better info.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Falk	1937	1938	-	Sep	lastSun	0:00	1:00	S
-Rule	Falk	1938	1942	-	Mar	Sun>=19	0:00	0	-
-Rule	Falk	1939	only	-	Oct	1	0:00	1:00	S
-Rule	Falk	1940	1942	-	Sep	lastSun	0:00	1:00	S
-Rule	Falk	1943	only	-	Jan	1	0:00	0	-
-Rule	Falk	1983	only	-	Sep	lastSun	0:00	1:00	S
-Rule	Falk	1984	1985	-	Apr	lastSun	0:00	0	-
-Rule	Falk	1984	only	-	Sep	16	0:00	1:00	S
-Rule	Falk	1985	2000	-	Sep	Sun>=9	0:00	1:00	S
-Rule	Falk	1986	2000	-	Apr	Sun>=16	0:00	0	-
-Rule	Falk	2001	max	-	Apr	Sun>=15	2:00	0	-
-Rule	Falk	2001	max	-	Sep	Sun>=1	2:00	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Atlantic/Stanley	-3:51:24 -	LMT	1890
-			-3:51:24 -	SMT	1912 Mar 12  # Stanley Mean Time
-			-4:00	Falk	FK%sT	1983 May     # Falkland Is Time
-			-3:00	Falk	FK%sT	1985 Sep 15
-			-4:00	Falk	FK%sT
-
-# French Guiana
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Cayenne	-3:29:20 -	LMT	1911 Jul
-			-4:00	-	GFT	1967 Oct # French Guiana Time
-			-3:00	-	GFT
-
-# Guyana
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Guyana	-3:52:40 -	LMT	1915 Mar	# Georgetown
-			-3:45	-	GBGT	1966 May 26 # Br Guiana Time
-			-3:45	-	GYT	1975 Jul 31 # Guyana Time
-			-3:00	-	GYT	1991
-# IATA SSIM (1996-06) says -4:00.  Assume a 1991 switch.
-			-4:00	-	GYT
-
-# Paraguay
-# From Paul Eggert (1999-10-29):
-# Shanks (1999) says that spring transitions are from 01:00 -> 02:00,
-# and autumn transitions are from 00:00 -> 23:00.  Go with earlier
-# editions of Shanks, and with the IATA, who say transitions occur at 00:00.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Para	1975	1988	-	Oct	 1	0:00	1:00	S
-Rule	Para	1975	1978	-	Mar	 1	0:00	0	-
-Rule	Para	1979	1991	-	Apr	 1	0:00	0	-
-Rule	Para	1989	only	-	Oct	22	0:00	1:00	S
-Rule	Para	1990	only	-	Oct	 1	0:00	1:00	S
-Rule	Para	1991	only	-	Oct	 6	0:00	1:00	S
-Rule	Para	1992	only	-	Mar	 1	0:00	0	-
-Rule	Para	1992	only	-	Oct	 5	0:00	1:00	S
-Rule	Para	1993	only	-	Mar	31	0:00	0	-
-Rule	Para	1993	1995	-	Oct	 1	0:00	1:00	S
-Rule	Para	1994	1995	-	Feb	lastSun	0:00	0	-
-Rule	Para	1996	only	-	Mar	 1	0:00	0	-
-# IATA SSIM (2000-02) says 1999-10-10; ignore this for now.
-# From Steffen Thorsen (2000-10-02):
-# I have three independent reports that Paraguay changed to DST this Sunday
-# (10-01).
-#
-# Translated by Gwillim Law (2001-02-27) from
-# <a href="http://www.diarionoticias.com.py/011000/nacional/naciona1.htm">
-# Noticias, a daily paper in Asuncion, Paraguay (2000-10-01)
-# </a>:
-# Starting at 0:00 today, the clock will be set forward 60 minutes, in
-# fulfillment of Decree No. 7,273 of the Executive Power....  The time change
-# system has been operating for several years.  Formerly there was a separate
-# decree each year; the new law has the same effect, but permanently.  Every
-# year, the time will change on the first Sunday of October; likewise, the
-# clock will be set back on the first Sunday of March.
-#
-# From Jesper Norgaard (2001-03-06) [an official URL saying similar things]:
-# http://gateway.abc.com.py:8000/pub/pag04.mbr/artic?FHA=2001-03-03-02.24.52.900592
-#
-Rule	Para	1996	2001	-	Oct	Sun>=1	0:00	1:00	S
-# IATA SSIM (1997-09) says Mar 1; go with Shanks.
-Rule	Para	1997	only	-	Feb	lastSun	0:00	0	-
-# Shanks says 1999-02-28; IATA SSIM (1999-02) says 1999-02-27, but
-# (1999-09) reports no date; go with above sources and Gerd Knops (2001-02-27).
-Rule	Para	1998	2001	-	Mar	Sun>=1	0:00	0	-
-# From Rives McDow (2002-02-28):
-# A decree was issued in Paraguay (no. 16350) on 2002-02-26 that changed the
-# dst method to be from the first Sunday in September to the first Sunday in
-# April.
-Rule	Para	2002	2004	-	Apr	Sun>=1	0:00	0	-
-Rule	Para	2002	2003	-	Sep	Sun>=1	0:00	1:00	S
-#
-# From Jesper Norgaard Welen (2005-01-02):
-# There are several sources that claim that Paraguay made
-# a timezone rule change in autumn 2004.
-# From Steffen Thorsen (2005-01-05):
-# Decree 1,867 (2004-03-05) <http://www.labor.com.py/noticias.asp?id=27>
-Rule	Para	2004	max	-	Oct	Sun>=15	0:00	1:00	S
-Rule	Para	2005	max	-	Mar	Sun>=8	0:00	0	-
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Asuncion	-3:50:40 -	LMT	1890
-			-3:50:40 -	AMT	1931 Oct 10 # Asuncion Mean Time
-			-4:00	-	PYT	1972 Oct # Paraguay Time
-			-3:00	-	PYT	1974 Apr
-			-4:00	Para	PY%sT
-
-# Peru
-#
-# <a href="news:xrGmb.39935$gA1.13896113@news4.srv.hcvlny.cv.net">
-# From Evelyn C. Leeper via Mark Brader (2003-10-26):</a>
-# When we were in Peru in 1985-1986, they apparently switched over
-# sometime between December 29 and January 3 while we were on the Amazon.
-#
-# From Paul Eggert (2003-11-02):
-# Shanks doesn't have this transition.  Assume 1986 was like 1987.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Peru	1938	only	-	Jan	 1	0:00	1:00	S
-Rule	Peru	1938	only	-	Apr	 1	0:00	0	-
-Rule	Peru	1938	1939	-	Sep	lastSun	0:00	1:00	S
-Rule	Peru	1939	1940	-	Mar	Sun>=24	0:00	0	-
-Rule	Peru	1986	1987	-	Jan	 1	0:00	1:00	S
-Rule	Peru	1986	1987	-	Apr	 1	0:00	0	-
-Rule	Peru	1990	only	-	Jan	 1	0:00	1:00	S
-Rule	Peru	1990	only	-	Apr	 1	0:00	0	-
-# IATA is ambiguous for 1993/1995; go with Shanks.
-Rule	Peru	1994	only	-	Jan	 1	0:00	1:00	S
-Rule	Peru	1994	only	-	Apr	 1	0:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Lima	-5:08:12 -	LMT	1890
-			-5:08:36 -	LMT	1908 Jul 28 # Lima Mean Time?
-			-5:00	Peru	PE%sT	# Peru Time
-
-# South Georgia
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Atlantic/South_Georgia -2:26:08 -	LMT	1890		# Grytviken
-			-2:00	-	GST	# South Georgia Time
-
-# South Sandwich Is
-# uninhabited; scientific personnel have wintered
-
-# Suriname
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Paramaribo	-3:40:40 -	LMT	1911
-			-3:40:52 -	PMT	1935     # Paramaribo Mean Time
-			-3:40:36 -	PMT	1945 Oct # The capital moved?
-			-3:30	-	NEGT	1975 Nov 20 # Dutch Guiana Time
-			-3:30	-	SRT	1984 Oct # Suriname Time
-			-3:00	-	SRT
-
-# Trinidad and Tobago
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Port_of_Spain -4:06:04 -	LMT	1912 Mar 2
-			-4:00	-	AST
-
-# Uruguay
-# From Paul Eggert <eggert@twinsun.com> (1993-11-18):
-# Uruguay wins the prize for the strangest peacetime manipulation of the rules.
-# From Shanks:
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-# Whitman gives 1923 Oct 1; go with Shanks.
-Rule	Uruguay	1923	only	-	Oct	 2	 0:00	0:30	HS
-Rule	Uruguay	1924	1926	-	Apr	 1	 0:00	0	-
-Rule	Uruguay	1924	1925	-	Oct	 1	 0:00	0:30	HS
-Rule	Uruguay	1933	1935	-	Oct	lastSun	 0:00	0:30	HS
-# Shanks gives 1935 Apr 1 0:00 and 1936 Mar 30 0:00; go with Whitman.
-Rule	Uruguay	1934	1936	-	Mar	Sat>=25	23:30s	0	-
-Rule	Uruguay	1936	only	-	Nov	 1	 0:00	0:30	HS
-Rule	Uruguay	1937	1941	-	Mar	lastSun	 0:00	0	-
-# Whitman gives 1937 Oct 3; go with Shanks.
-Rule	Uruguay	1937	1940	-	Oct	lastSun	 0:00	0:30	HS
-# Whitman gives 1941 Oct 24 - 1942 Mar 27, 1942 Dec 14 - 1943 Apr 13,
-# and 1943 Apr 13 ``to present time''; go with Shanks.
-Rule	Uruguay	1941	only	-	Aug	 1	 0:00	0	-
-Rule	Uruguay	1942	only	-	Jan	 1	 0:00	0:30	HS
-Rule	Uruguay	1942	only	-	Dec	14	 0:00	1:00	S
-Rule	Uruguay	1943	only	-	Mar	14	 0:00	0	-
-Rule	Uruguay	1959	only	-	May	24	 0:00	1:00	S
-Rule	Uruguay	1959	only	-	Nov	15	 0:00	0	-
-Rule	Uruguay	1960	only	-	Jan	17	 0:00	1:00	S
-Rule	Uruguay	1960	only	-	Mar	 6	 0:00	0	-
-Rule	Uruguay	1965	1967	-	Apr	Sun>=1	 0:00	1:00	S
-Rule	Uruguay	1965	only	-	Sep	26	 0:00	0	-
-Rule	Uruguay	1966	1967	-	Oct	31	 0:00	0	-
-Rule	Uruguay	1968	1970	-	May	27	 0:00	0:30	HS
-Rule	Uruguay	1968	1970	-	Dec	 2	 0:00	0	-
-Rule	Uruguay	1972	only	-	Apr	24	 0:00	1:00	S
-Rule	Uruguay	1972	only	-	Aug	15	 0:00	0	-
-Rule	Uruguay	1974	only	-	Mar	10	 0:00	0:30	HS
-Rule	Uruguay	1974	only	-	Dec	22	 0:00	1:00	S
-Rule	Uruguay	1976	only	-	Oct	 1	 0:00	0	-
-Rule	Uruguay	1977	only	-	Dec	 4	 0:00	1:00	S
-Rule	Uruguay	1978	only	-	Apr	 1	 0:00	0	-
-Rule	Uruguay	1979	only	-	Oct	 1	 0:00	1:00	S
-Rule	Uruguay	1980	only	-	May	 1	 0:00	0	-
-Rule	Uruguay	1987	only	-	Dec	14	 0:00	1:00	S
-Rule	Uruguay	1988	only	-	Mar	14	 0:00	0	-
-Rule	Uruguay	1988	only	-	Dec	11	 0:00	1:00	S
-Rule	Uruguay	1989	only	-	Mar	12	 0:00	0	-
-Rule	Uruguay	1989	only	-	Oct	29	 0:00	1:00	S
-# Shanks says no DST was observed in 1990/1 and 1991/2,
-# and that 1992/3's DST was from 10-25 to 03-01.  Go with IATA.
-Rule	Uruguay	1990	1992	-	Mar	Sun>=1	 0:00	0	-
-Rule	Uruguay	1990	1991	-	Oct	Sun>=21	 0:00	1:00	S
-Rule	Uruguay	1992	only	-	Oct	18	 0:00	1:00	S
-Rule	Uruguay	1993	only	-	Feb	28	 0:00	0	-
-# From Eduardo Cota (2004-09-20):
-# The uruguayan government has decreed a change in the local time....
-# http://www.presidencia.gub.uy/decretos/2004091502.htm
-Rule	Uruguay	2004	only	-	Sep	19	 0:00	1:00	S
-# From Steffen Thorsen (2005-03-11):
-# Uruguay's DST was scheduled to end on Sunday, 2005-03-13, but in order to
-# save energy ... it was postponed two weeks....
-# http://www.presidencia.gub.uy/_Web/noticias/2005/03/2005031005.htm
-Rule	Uruguay	2005	only	-	Mar	27	 2:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Montevideo	-3:44:44 -	LMT	1898 Jun 28
-			-3:44:44 -	MMT	1920 May  1	# Montevideo MT
-			-3:30	Uruguay	UY%sT	1942 Dec 14	# Uruguay Time
-			-3:00	Uruguay	UY%sT
-
-# Venezuela
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Caracas	-4:27:44 -	LMT	1890
-			-4:27:40 -	CMT	1912 Feb 12 # Caracas Mean Time?
-			-4:30	-	VET	1965	     # Venezuela Time
-			-4:00	-	VET
+# @(#)southamerica	7.60
+
+# This data is by no means authoritative; if you think you know better,
+# go ahead and edit the file (and please send any changes to
+# tz@elsie.nci.nih.gov for general use in the future).
+
+# From Paul Eggert (1999-07-07):
+# A good source for time zone historical data outside the U.S. is
+# Thomas G. Shanks, The International Atlas (5th edition),
+# San Diego: ACS Publications, Inc. (1999).
+#
+# Gwillim Law writes that a good source
+# for recent time zone data is the International Air Transport
+# Association's Standard Schedules Information Manual (IATA SSIM),
+# published semiannually.  Law sent in several helpful summaries
+# of the IATA's data after 1990.
+#
+# Except where otherwise noted, Shanks is the source for entries through 1990,
+# and IATA SSIM is the source for entries after 1990.
+#
+# Earlier editions of these tables used the North American style (e.g. ARST and
+# ARDT for Argentine Standard and Daylight Time), but the following quote
+# suggests that it's better to use European style (e.g. ART and ARST).
+#	I suggest the use of _Summer time_ instead of the more cumbersome
+#	_daylight-saving time_.  _Summer time_ seems to be in general use
+#	in Europe and South America.
+#	-- E O Cutler, _New York Times_ (1937-02-14), quoted in
+#	H L Mencken, _The American Language: Supplement I_ (1960), p 466
+#
+# Earlier editions of these tables also used the North American style
+# for time zones in Brazil, but this was incorrect, as Brazilians say
+# "summer time".  Reinaldo Goulart, a Sao Paulo businessman active in
+# the railroad sector, writes (1999-07-06):
+#	The subject of time zones is currently a matter of discussion/debate in
+#	Brazil.  Let's say that "the Brasilia time" is considered the
+#	"official time" because Brasilia is the capital city.
+#	The other three time zones are called "Brasilia time "minus one" or
+#	"plus one" or "plus two".  As far as I know there is no such
+#	name/designation as "Eastern Time" or "Central Time".
+# So I invented the following (English-language) abbreviations for now.
+# Corrections are welcome!
+#		std	dst
+#	-2:00	FNT	FNST	Fernando de Noronha
+#	-3:00	BRT	BRST	Brasilia
+#	-4:00	AMT	AMST	Amazon
+#	-5:00	ACT	ACST	Acre
+
+###############################################################################
+
+###############################################################################
+
+# Argentina
+
+# From Bob Devine (1988-01-28):
+# Argentina: first Sunday in October to first Sunday in April since 1976.
+# Double Summer time from 1969 to 1974.  Switches at midnight.
+
+# From U. S. Naval Observatory (1988-01-199):
+# ARGENTINA           3 H BEHIND   UTC
+
+# From Hernan G. Otero (1995-06-26):
+# I am sending modifications to the Argentine time zone table...
+# AR was chosen because they are the ISO letters that represent Argentina.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Arg	1930	only	-	Dec	 1	0:00	1:00	S
+Rule	Arg	1931	only	-	Apr	 1	0:00	0	-
+Rule	Arg	1931	only	-	Oct	15	0:00	1:00	S
+Rule	Arg	1932	1940	-	Mar	 1	0:00	0	-
+Rule	Arg	1932	1939	-	Nov	 1	0:00	1:00	S
+Rule	Arg	1940	only	-	Jul	 1	0:00	1:00	S
+Rule	Arg	1941	only	-	Jun	15	0:00	0	-
+Rule	Arg	1941	only	-	Oct	15	0:00	1:00	S
+Rule	Arg	1943	only	-	Aug	 1	0:00	0	-
+Rule	Arg	1943	only	-	Oct	15	0:00	1:00	S
+Rule	Arg	1946	only	-	Mar	 1	0:00	0	-
+Rule	Arg	1946	only	-	Oct	 1	0:00	1:00	S
+Rule	Arg	1963	only	-	Oct	 1	0:00	0	-
+Rule	Arg	1963	only	-	Dec	15	0:00	1:00	S
+Rule	Arg	1964	1966	-	Mar	 1	0:00	0	-
+Rule	Arg	1964	1966	-	Oct	15	0:00	1:00	S
+Rule	Arg	1967	only	-	Apr	 2	0:00	0	-
+Rule	Arg	1967	1968	-	Oct	Sun>=1	0:00	1:00	S
+Rule	Arg	1968	1969	-	Apr	Sun>=1	0:00	0	-
+Rule	Arg	1974	only	-	Jan	23	0:00	1:00	S
+Rule	Arg	1974	only	-	May	 1	0:00	0	-
+Rule	Arg	1988	only	-	Dec	 1	0:00	1:00	S
+#
+# From Hernan G. Otero (1995-06-26):
+# These corrections were contributed by InterSoft Argentina S.A.,
+# obtaining the data from the:
+# Talleres de Hidrografia Naval Argentina
+# (Argentine Naval Hydrography Institute)
+#
+# Shanks stops after 1992-03-01; go with Otero.
+Rule	Arg	1989	1993	-	Mar	Sun>=1	0:00	0	-
+Rule	Arg	1989	1992	-	Oct	Sun>=15	0:00	1:00	S
+#
+# From Hernan G. Otero (1995-06-26):
+# From this moment on, the law that mandated the daylight saving
+# time corrections was derogated and no more modifications
+# to the time zones (for daylight saving) are now made.
+#
+# From Rives McDow (2000-01-10):
+# On October 3, 1999, 0:00 local, Argentina implemented daylight savings time,
+# which did not result in the switch of a time zone, as they stayed 9 hours
+# from the International Date Line.
+Rule	Arg	1999	only	-	Oct	Sun>=1	0:00	1:00	S
+Rule	Arg	2000	only	-	Mar	Sun>=1	0:00	0	-
+#
+# From Peter Gradelski via Steffen Thorsen (2000-03-01):
+# We just checked with our Sao Paulo office and they say the government of
+# Argentina decided not to become one of the countries that go on or off DST.
+# So Buenos Aires should be -3 hours from GMT at all times.
+#
+# From Fabian L. Arce Jofre (2000-04-04):
+# The law that claimed DST for Argentina was derogated by President Fernando
+# de la Rua on March 2, 2000, because it would make people spend more energy
+# in the winter time, rather than less.  The change took effect on March 3.
+#
+# From Mariano Absatz (2001-06-06):
+# one of the major newspapers here in Argentina said that the 1999
+# Timezone Law (which never was effectively applied) will (would?) be
+# in effect.... The article is at
+# http://ar.clarin.com/diario/2001-06-06/e-01701.htm
+# ... The Law itself is "Ley No 25155", sanctioned on 1999-08-25, enacted
+# 1999-09-17, and published 1999-09-21.  The official publication is at:
+# http://www.boletin.jus.gov.ar/BON/Primera/1999/09-Septiembre/21/PDF/BO21-09-99LEG.PDF
+# Regretfully, you have to subscribe (and pay) for the on-line version....
+#
+# (2001-06-12):
+# the timezone for Argentina will not change next Sunday.
+# Apparently it will do so on Sunday 24th....
+# http://ar.clarin.com/diario/2001-06-12/s-03501.htm
+#
+# (2001-06-25):
+# Last Friday (yes, the last working day before the date of the change), the
+# Senate annulled the 1999 law that introduced the changes later postponed.
+# http://www.clarin.com.ar/diario/2001-06-22/s-03601.htm
+# It remains the vote of the Deputies..., but it will be the same....
+# This kind of things had always been done this way in Argentina.
+# We are still -03:00 all year round in all of the country.
+#
+# From Mariano Absatz (2004-05-21):
+# Today it was officially published that the Province of Mendoza is changing
+# its timezone this winter... starting tomorrow night....
+# http://www.gobernac.mendoza.gov.ar/boletin/pdf/20040521-27158-normas.pdf
+# From Paul Eggert (2004-05-24):
+# It's Law No. 7,210.  This change is due to a public power emergency, so for
+# now we'll assume it's for this year only.
+#
+# From Paul Eggert (2002-01-22):
+# <a href="http://www.spicasc.net/horvera.html">
+# Hora de verano para la Republica Argentina (2000-10-01)
+# </a> says that standard time in Argentina from 1894-10-31
+# to 1920-05-01 was -4:16:48.25.  Go with this more-precise value
+# over Shanks.
+#
+# From Mariano Absatz (2004-06-05):
+# These media articles from a major newspaper mostly cover the current state:
+# http://www.lanacion.com.ar/04/05/27/de_604825.asp
+# http://www.lanacion.com.ar/04/05/28/de_605203.asp
+#
+# The following eight (8) provinces pulled clocks back to UTC-04:00 at
+# midnight Monday May 31st. (that is, the night between 05/31 and 06/01).
+# Apparently, all nine provinces would go back to UTC-03:00 at the same
+# time in October 17th.
+#
+# Catamarca, Chubut, La Rioja, San Juan, San Luis, Santa Cruz,
+# Tierra del Fuego, Tucuman.
+#
+# From Mariano Absatz (2004-06-14):
+# ... this weekend, the Province of Tucuman decided it'd go back to UTC-03:00
+# yesterday midnight (that is, at 24:00 Saturday 12th), since the people's
+# annoyance with the change is much higher than the power savings obtained....
+#
+# From Gwillim Law (2004-06-14):
+# http://www.lanacion.com.ar/04/06/10/de_609078.asp ...
+#     "The time change in Tierra del Fuego was a conflicted decision from
+#   the start.  The government had decreed that the measure would take
+#   effect on June 1, but a normative error forced the new time to begin
+#   three days earlier, from a Saturday to a Sunday....
+# Our understanding was that the change was originally scheduled to take place
+# on June 1 at 00:00 in Chubut, Santa Cruz, Tierra del Fuego (and some other
+# provinces).  Sunday was May 30, only two days earlier.  So the article
+# contains a contradiction.  I would give more credence to the Saturday/Sunday
+# date than the "three days earlier" phrase, and conclude that Tierra del
+# Fuego set its clocks back at 2004-05-30 00:00.
+#
+# From Steffen Thorsen (2004-10-05):
+# The previous law 7210 which changed the province of Mendoza's time zone
+# back in May have been modified slightly in a new law 7277, which set the
+# new end date to 2004-09-26 (original date was 2004-10-17).
+# http://www.gobernac.mendoza.gov.ar/boletin/pdf/20040924-27244-normas.pdf
+#
+# From Mariano Absatz (2004-10-05):
+# San Juan changed from UTC-03:00 to UTC-04:00 at midnight between
+# Sunday, May 30th and Monday, May 31st.  It changed back to UTC-03:00
+# at midnight between Saturday, July 24th and Sunday, July 25th....
+# http://www.sanjuan.gov.ar/prensa/archivo/000329.html
+# http://www.sanjuan.gov.ar/prensa/archivo/000426.html
+# http://www.sanjuan.gov.ar/prensa/archivo/000441.html
+
+# Unless otherwise specified, data are from Shanks through 1992, from
+# the IATA otherwise.  As noted below, Shanks says that
+# America/Cordoba split into 6 subregions during 1991/1992, but we
+# haven't verified this yet so for now we'll keep it a single region.
+#
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+#
+# Buenos Aires (BA), Capital Federal (CF),
+Zone America/Argentina/Buenos_Aires -3:53:48 - LMT 1894 Oct 31
+			-4:16:48 -	CMT	1920 May # Cordoba Mean Time
+			-4:00	-	ART	1930 Dec
+			-4:00	Arg	AR%sT	1969 Oct  5
+			-3:00	Arg	AR%sT	1999 Oct  3
+			-4:00	Arg	AR%sT	2000 Mar  3
+			-3:00	-	ART
+#
+# Santa Fe (SF), Entre Rios (ER), Corrientes (CN), Misiones (MN), Chaco (CC),
+# Formosa (FM), Salta (SA), Santiago del Estero (SE), Cordoba (CB),
+# San Luis (SL), La Pampa (LP), Neuquen (NQ), Rio Negro (RN)
+#
+# Shanks also makes the following claims, which we haven't verified:
+# - Formosa switched to -3:00 on 1991-01-07.
+# - Misiones switched to -3:00 on 1990-12-29.
+# - Chaco switched to -3:00 on 1991-01-04.
+# - San Luis switched to -4:00 on 1990-03-14, then to -3:00 on 1990-10-15,
+#   then to -4:00 on 1991-03-01, then to -3:00 on 1991-06-01.
+# - Santiago del Estero switched to -4:00 on 1991-04-01,
+#   then to -3:00 on 1991-04-26.
+#
+Zone America/Argentina/Cordoba -4:16:48 - LMT	1894 Oct 31
+			-4:16:48 -	CMT	1920 May
+			-4:00	-	ART	1930 Dec
+			-4:00	Arg	AR%sT	1969 Oct  5
+			-3:00	Arg	AR%sT	1991 Mar  3
+			-4:00	-	WART	1991 Oct 20
+			-3:00	Arg	AR%sT	1999 Oct  3
+			-4:00	Arg	AR%sT	2000 Mar  3
+			-3:00	-	ART
+#
+# Tucuman (TM)
+Zone America/Argentina/Tucuman -4:20:52 - LMT	1894 Oct 31
+			-4:16:48 -	CMT	1920 May
+			-4:00	-	ART	1930 Dec
+			-4:00	Arg	AR%sT	1969 Oct  5
+			-3:00	Arg	AR%sT	1991 Mar  3
+			-4:00	-	WART	1991 Oct 20
+			-3:00	Arg	AR%sT	1999 Oct  3
+			-4:00	Arg	AR%sT	2000 Mar  3
+			-3:00	-	ART	2004 Jun  1
+			-4:00	-	WART	2004 Jun 13
+			-3:00	-	ART
+#
+# La Rioja (LR)
+Zone America/Argentina/La_Rioja -4:27:24 - LMT	1894 Oct 31
+			-4:16:48 -	CMT	1920 May
+			-4:00	-	ART	1930 Dec
+			-4:00	Arg	AR%sT	1969 Oct  5
+			-3:00	Arg	AR%sT	1991 Mar  1
+			-4:00	-	WART	1991 May  7
+			-3:00	Arg	AR%sT	1999 Oct  3
+			-4:00	Arg	AR%sT	2000 Mar  3
+			-3:00	-	ART	2004 Jun  1
+			-4:00	-	WART	2004 Jun 20
+			-3:00	-	ART
+#
+# San Juan (SJ)
+Zone America/Argentina/San_Juan -4:34:04 - LMT	1894 Oct 31
+			-4:16:48 -	CMT	1920 May
+			-4:00	-	ART	1930 Dec
+			-4:00	Arg	AR%sT	1969 Oct  5
+			-3:00	Arg	AR%sT	1991 Mar  1
+			-4:00	-	WART	1991 May  7
+			-3:00	Arg	AR%sT	1999 Oct  3
+			-4:00	Arg	AR%sT	2000 Mar  3
+			-3:00	-	ART	2004 May 31
+			-4:00	-	WART	2004 Jul 25
+			-3:00	-	ART
+#
+# Jujuy (JY)
+Zone America/Argentina/Jujuy -4:21:12 -	LMT	1894 Oct 31
+			-4:16:48 -	CMT	1920 May
+			-4:00	-	ART	1930 Dec
+			-4:00	Arg	AR%sT	1969 Oct  5
+			-3:00	Arg	AR%sT	1990 Mar  4
+			-4:00	-	WART	1990 Oct 28
+			-4:00	1:00	WARST	1991 Mar 17
+			-4:00	-	WART	1991 Oct  6
+			-3:00	1:00	ARST	1992
+			-3:00	Arg	AR%sT	1999 Oct  3
+			-4:00	Arg	AR%sT	2000 Mar  3
+			-3:00	-	ART
+#
+# Catamarca (CT)
+Zone America/Argentina/Catamarca -4:23:08 - LMT	1894 Oct 31
+			-4:16:48 -	CMT	1920 May
+			-4:00	-	ART	1930 Dec
+			-4:00	Arg	AR%sT	1969 Oct  5
+			-3:00	Arg	AR%sT	1991 Mar  3
+			-4:00	-	WART	1991 Oct 20
+			-3:00	Arg	AR%sT	1999 Oct  3
+			-4:00	Arg	AR%sT	2000 Mar  3
+			-3:00	-	ART	2004 Jun  1
+			-4:00	-	WART	2004 Jun 20
+			-3:00	-	ART
+#
+# Mendoza (MZ)
+Zone America/Argentina/Mendoza -4:35:16 - LMT	1894 Oct 31
+			-4:16:48 -	CMT	1920 May
+			-4:00	-	ART	1930 Dec
+			-4:00	Arg	AR%sT	1969 Oct  5
+			-3:00	Arg	AR%sT	1990 Mar  4
+			-4:00	-	WART	1990 Oct 15
+			-4:00	1:00	WARST	1991 Mar  1
+			-4:00	-	WART	1991 Oct 15
+			-4:00	1:00	WARST	1992 Mar  1
+			-4:00	-	WART	1992 Oct 18
+			-3:00	Arg	AR%sT	1999 Oct  3
+			-4:00	Arg	AR%sT	2000 Mar  3
+			-3:00	-	ART	2004 May 23
+			-4:00	-	WART	2004 Sep 26
+			-3:00	-	ART
+#
+# Chubut (CH)
+# The name "Comodoro Rivadavia" exceeds the 14-byte POSIX limit.
+Zone America/Argentina/ComodRivadavia -4:30:00 - LMT	1894 Oct 31
+			-4:16:48 -	CMT	1920 May
+			-4:00	-	ART	1930 Dec
+			-4:00	Arg	AR%sT	1969 Oct  5
+			-3:00	Arg	AR%sT	1991 Mar  3
+			-4:00	-	WART	1991 Oct 20
+			-3:00	Arg	AR%sT	1999 Oct  3
+			-4:00	Arg	AR%sT	2000 Mar  3
+			-3:00	-	ART	2004 Jun  1
+			-4:00	-	WART	2004 Jun 20
+			-3:00	-	ART
+#
+# Santa Cruz (SC)
+Zone America/Argentina/Rio_Gallegos -4:36:52 - LMT 1894 Oct 31
+			-4:16:48 -	CMT	1920 May # Cordoba Mean Time
+			-4:00	-	ART	1930 Dec
+			-4:00	Arg	AR%sT	1969 Oct  5
+			-3:00	Arg	AR%sT	1999 Oct  3
+			-4:00	Arg	AR%sT	2000 Mar  3
+			-3:00	-	ART	2004 Jun  1
+			-4:00	-	WART	2004 Jun 20
+			-3:00	-	ART
+#
+# Tierra del Fuego, Antartida e Islas del Atlantico Sur (TF)
+Zone America/Argentina/Ushuaia -4:33:12 - LMT 1894 Oct 31
+			-4:16:48 -	CMT	1920 May # Cordoba Mean Time
+			-4:00	-	ART	1930 Dec
+			-4:00	Arg	AR%sT	1969 Oct  5
+			-3:00	Arg	AR%sT	1999 Oct  3
+			-4:00	Arg	AR%sT	2000 Mar  3
+			-3:00	-	ART	2004 May 30
+			-4:00	-	WART	2004 Jun 20
+			-3:00	-	ART
+
+# Aruba
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Aruba	-4:40:24 -	LMT	1912 Feb 12	# Oranjestad
+			-4:30	-	ANT	1965 # Netherlands Antilles Time
+			-4:00	-	AST
+
+# Bolivia
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/La_Paz	-4:32:36 -	LMT	1890
+			-4:32:36 -	CMT	1931 Oct 15 # Calamarca MT
+			-4:32:36 1:00	BOST	1932 Mar 21 # Bolivia ST
+			-4:00	-	BOT	# Bolivia Time
+
+# Brazil
+
+# From Paul Eggert (1993-11-18):
+# The mayor of Rio recently attempted to change the time zone rules
+# just in his city, in order to leave more summer time for the tourist trade.
+# The rule change lasted only part of the day;
+# the federal government refused to follow the city's rules, and business
+# was in a chaos, so the mayor backed down that afternoon.
+
+# From IATA SSIM (1996-02):
+# _Only_ the following states in BR1 observe DST: Rio Grande do Sul (RS),
+# Santa Catarina (SC), Parana (PR), Sao Paulo (SP), Rio de Janeiro (RJ),
+# Espirito Santo (ES), Minas Gerais (MG), Bahia (BA), Goias (GO),
+# Distrito Federal (DF), Tocantins (TO), Sergipe [SE] and Alagoas [AL].
+# [The last three states are new to this issue of the IATA SSIM.]
+
+# From Gwillim Law (1996-10-07):
+# Geography, history (Tocantins was part of Goias until 1989), and other
+# sources of time zone information lead me to believe that AL, SE, and TO were
+# always in BR1, and so the only change was whether or not they observed DST....
+# The earliest issue of the SSIM I have is 2/91.  Each issue from then until
+# 9/95 says that DST is observed only in the ten states I quoted from 9/95,
+# along with Mato Grosso (MT) and Mato Grosso do Sul (MS), which are in BR2
+# (UTC-4)....  The other two time zones given for Brazil are BR3, which is
+# UTC-5, no DST, and applies only in the state of Acre (AC); and BR4, which is
+# UTC-2, and applies to Fernando de Noronha (formerly FN, but I believe it's
+# become part of the state of Pernambuco).  The boundary between BR1 and BR2
+# has never been clearly stated.  They've simply been called East and West.
+# However, some conclusions can be drawn from another IATA manual: the Airline
+# Coding Directory, which lists close to 400 airports in Brazil.  For each
+# airport it gives a time zone which is coded to the SSIM.  From that
+# information, I'm led to conclude that the states of Amapa (AP), Ceara (CE),
+# Maranhao (MA), Paraiba (PR), Pernambuco (PE), Piaui (PI), and Rio Grande do
+# Norte (RN), and the eastern part of Para (PA) are all in BR1 without DST.
+
+# From Marcos Tadeu (1998-09-27):
+# <a href="http://pcdsh01.on.br/verao1.html">
+# Brazilian official page
+# </a>
+
+# From Jesper Norgaard (2000-11-03):
+# [For an official list of which regions in Brazil use which time zones, see:]
+# http://pcdsh01.on.br/Fusbr.htm
+# http://pcdsh01.on.br/Fusbrhv.htm
+
+# From Celso Doria via David Madeo (2002-10-09):
+# The reason for the delay this year has to do with elections in Brazil.
+#
+# Unlike in the United States, elections in Brazil are 100% computerized and
+# the results are known almost immediately.  Yesterday, it was the first
+# round of the elections when 115 million Brazilians voted for President,
+# Governor, Senators, Federal Deputies, and State Deputies.  Nobody is
+# counting (or re-counting) votes anymore and we know there will be a second
+# round for the Presidency and also for some Governors.  The 2nd round will
+# take place on October 27th.
+#
+# The reason why the DST will only begin November 3rd is that the thousands
+# of electoral machines used cannot have their time changed, and since the
+# Constitution says the elections must begin at 8:00 AM and end at 5:00 PM,
+# the Government decided to postpone DST, instead of changing the Constitution
+# (maybe, for the next elections, it will be possible to change the clock)...
+
+# From Rodrigo Severo (2004-10-04):
+# It's just the biannual change made necessary by the much hyped, supposedly
+# modern Brazilian eletronic voting machines which, apparently, can't deal
+# with a time change between the first and the second rounds of the elections.
+
+# From Paul Eggert (2002-10-10):
+# The official decrees referenced below are mostly taken from
+# <a href="http://pcdsh01.on.br/DecHV.html">
+# Decretos sobre o Horario de Verao no Brasil
+# </a> (2001-09-20, in Portuguese).
+# The official site for all decrees, including those not related to time, is
+# <a href="http://www.presidencia.gov.br/CCIVIL/decreto/principal_ano.htm">
+# Presidencia da Republica, Subchefia para Assuntos Juridicos, Decretos
+# </a> (in Portuguese).
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+# Decree <a href="http://pcdsh01.on.br/HV20466.htm">20,466</a> (1931-10-01)
+# Decree <a href="http://pcdsh01.on.br/HV21896.htm">21,896</a> (1932-01-10)
+Rule	Brazil	1931	only	-	Oct	 3	11:00	1:00	S
+Rule	Brazil	1932	1933	-	Apr	 1	 0:00	0	-
+Rule	Brazil	1932	only	-	Oct	 3	 0:00	1:00	S
+# Decree <a href="http://pcdsh01.on.br/HV23195.htm">23,195</a> (1933-10-10)
+# revoked DST.
+# Decree <a href="http://pcdsh01.on.br/HV27496.htm">27,496</a> (1949-11-24)
+# Decree <a href="http://pcdsh01.on.br/HV27998.htm">27,998</a> (1950-04-13)
+Rule	Brazil	1949	1952	-	Dec	 1	 0:00	1:00	S
+Rule	Brazil	1950	only	-	Apr	16	 1:00	0	-
+Rule	Brazil	1951	1952	-	Apr	 1	 0:00	0	-
+# Decree <a href="http://pcdsh01.on.br/HV32308.htm">32,308</a> (1953-02-24)
+Rule	Brazil	1953	only	-	Mar	 1	 0:00	0	-
+# Decree <a href="http://pcdsh01.on.br/HV34724.htm">34,724</a> (1953-11-30)
+# revoked DST.
+# Decree <a href="http://pcdsh01.on.br/HV52700.htm">52,700</a> (1963-10-18)
+# established DST from 1963-10-23 00:00 to 1964-02-29 00:00
+# in SP, RJ, GB, MG, ES, due to the prolongation of the drought.
+# Decree <a href="http://pcdsh01.on.br/HV53071.htm">53,071</a> (1963-12-03)
+# extended the above decree to all of the national territory on 12-09.
+Rule	Brazil	1963	only	-	Dec	 9	 0:00	1:00	S
+# Decree <a href="http://pcdsh01.on.br/HV53604.htm">53,604</a> (1964-02-25)
+# extended summer time by one day to 1964-03-01 00:00 (start of school).
+Rule	Brazil	1964	only	-	Mar	 1	 0:00	0	-
+# Decree <a href="http://pcdsh01.on.br/HV55639.htm">55,639</a> (1965-01-27)
+Rule	Brazil	1965	only	-	Jan	31	 0:00	1:00	S
+Rule	Brazil	1965	only	-	Mar	31	 0:00	0	-
+# Decree <a href="http://pcdsh01.on.br/HV57303.htm">57,303</a> (1965-11-22)
+Rule	Brazil	1965	only	-	Dec	 1	 0:00	1:00	S
+# Decree <a href="http://pcdsh01.on.br/HV57843.htm">57,843</a> (1966-02-18)
+Rule	Brazil	1966	1968	-	Mar	 1	 0:00	0	-
+Rule	Brazil	1966	1967	-	Nov	 1	 0:00	1:00	S
+# Decree <a href="http://pcdsh01.on.br/HV63429.htm">63,429</a> (1968-10-15)
+# revoked DST.
+# Decree <a href="http://pcdsh01.on.br/HV91698.htm">91,698</a> (1985-09-27)
+Rule	Brazil	1985	only	-	Nov	 2	 0:00	1:00	S
+# Decree 92,310 (1986-01-21)
+# Decree 92,463 (1986-03-13)
+Rule	Brazil	1986	only	-	Mar	15	 0:00	0	-
+# Decree 93,316 (1986-10-01)
+Rule	Brazil	1986	only	-	Oct	25	 0:00	1:00	S
+Rule	Brazil	1987	only	-	Feb	14	 0:00	0	-
+# Decree <a href="http://pcdsh01.on.br/HV94922.htm">94,922</a> (1987-09-22)
+Rule	Brazil	1987	only	-	Oct	25	 0:00	1:00	S
+Rule	Brazil	1988	only	-	Feb	 7	 0:00	0	-
+# Decree <a href="http://pcdsh01.on.br/HV96676.htm">96,676</a> (1988-09-12)
+# except for the states of AC, AM, PA, RR, RO, and AP (then a territory)
+Rule	Brazil	1988	only	-	Oct	16	 0:00	1:00	S
+Rule	Brazil	1989	only	-	Jan	29	 0:00	0	-
+# Decree <a href="http://pcdsh01.on.br/HV98077.htm">98,077</a> (1989-08-21)
+# with the same exceptions
+Rule	Brazil	1989	only	-	Oct	15	 0:00	1:00	S
+Rule	Brazil	1990	only	-	Feb	11	 0:00	0	-
+# Decree <a href="http://pcdsh01.on.br/HV99530.htm">99,530</a> (1990-09-17)
+# adopted by RS, SC, PR, SP, RJ, ES, MG, GO, MS, DF.
+# Decree 99,629 (1990-10-19) adds BA, MT.
+Rule	Brazil	1990	only	-	Oct	21	 0:00	1:00	S
+Rule	Brazil	1991	only	-	Feb	17	 0:00	0	-
+# <a href="http://pcdsh01.on.br/HV1991.htm">Unnumbered decree</a> (1991-09-25)
+# adopted by RS, SC, PR, SP, RJ, ES, MG, BA, GO, MT, MS, DF.
+Rule	Brazil	1991	only	-	Oct	20	 0:00	1:00	S
+Rule	Brazil	1992	only	-	Feb	 9	 0:00	0	-
+# <a href="http://pcdsh01.on.br/HV1992.htm">Unnumbered decree</a> (1992-10-16)
+# adopted by same states.
+Rule	Brazil	1992	only	-	Oct	25	 0:00	1:00	S
+Rule	Brazil	1993	only	-	Jan	31	 0:00	0	-
+# Decree <a href="http://pcdsh01.on.br/HV942.htm">942</a> (1993-09-28)
+# adopted by same states, plus AM.
+# Decree <a href="http://pcdsh01.on.br/HV1252.htm">1,252</a> (1994-09-22;
+# web page corrected 2004-01-07) adopted by same states, minus AM.
+# Decree <a href="http://pcdsh01.on.br/HV1636.htm">1,636</a> (1995-09-14)
+# adopted by same states, plus MT and TO.
+# Decree <a href="http://pcdsh01.on.br/HV1674.htm">1,674</a> (1995-10-13)
+# adds AL, SE.
+Rule	Brazil	1993	1995	-	Oct	Sun>=11	 0:00	1:00	S
+Rule	Brazil	1994	1995	-	Feb	Sun>=15	 0:00	0	-
+Rule	Brazil	1996	only	-	Feb	11	 0:00	0	-
+# Decree <a href="http://pcdsh01.on.br/HV2000.htm">2,000</a> (1996-09-04)
+# adopted by same states, minus AL, SE.
+Rule	Brazil	1996	only	-	Oct	 6	 0:00	1:00	S
+Rule	Brazil	1997	only	-	Feb	16	 0:00	0	-
+# From Daniel C. Sobral (1998-02-12):
+# In 1997, the DS began on October 6. The stated reason was that
+# because international television networks ignored Brazil's policy on DS,
+# they bought the wrong times on satellite for coverage of Pope's visit.
+# This year, the ending date of DS was postponed to March 1
+# to help dealing with the shortages of electric power.
+#
+# From Paul Eggert (1998-02-25):
+# <a href="http://churchnet.ucsm.ac.uk/news/files2/news165.htm">
+# Brazil Prepares for Papal Visit
+# </a>,
+# Church Net UK (1997-10-02).
+#
+# Decree 2,317 (1997-09-04), adopted by same states.
+Rule	Brazil	1997	only	-	Oct	 6	 0:00	1:00	S
+# Decree <a href="http://pcdsh01.on.br/figuras/HV2495.JPG">2,495</a>
+# (1998-02-10)
+Rule	Brazil	1998	only	-	Mar	 1	 0:00	0	-
+# Decree <a href="http://pcdsh01.on.br/figuras/Hv98.jpg">2,780</a> (1998-09-11)
+# adopted by the same states as before.
+Rule	Brazil	1998	only	-	Oct	11	 0:00	1:00	S
+Rule	Brazil	1999	only	-	Feb	21	 0:00	0	-
+# Decree <a href="http://pcdsh01.on.br/figuras/HV3150.gif">3,150</a>
+# (1999-08-23) adopted by same states.
+# Decree <a href="http://pcdsh01.on.br/DecHV99.gif">3,188</a> (1999-09-30)
+# adds SE, AL, PB, PE, RN, CE, PI, MA and RR.
+Rule	Brazil	1999	only	-	Oct	 3	 0:00	1:00	S
+Rule	Brazil	2000	only	-	Feb	27	 0:00	0	-
+# Decree <a href="http://pcdsh01.on.br/DEC3592.htm">3,592</a> (2000-09-06)
+# adopted by the same states as before.
+# Decree <a href="http://pcdsh01.on.br/Dec3630.jpg">3,630</a> (2000-10-13)
+# repeals DST in PE and RR, effective 2000-10-15 00:00.
+# Decree <a href="http://pcdsh01.on.br/Dec3632.jpg">3,632</a> (2000-10-17)
+# repeals DST in SE, AL, PB, RN, CE, PI and MA, effective 2000-10-22 00:00.
+# Decree <a href="http://pcdsh01.on.br/figuras/HV3916.gif">3,916</a>
+# (2001-09-13) reestablishes DST in AL, CE, MA, PB, PE, PI, RN, SE.
+Rule	Brazil	2000	2001	-	Oct	Sun>=8	 0:00	1:00	S
+Rule	Brazil	2001	max	-	Feb	Sun>=15	 0:00	0	-
+# Decree 4,399 (2002-10-01) repeals DST in AL, CE, MA, PB, PE, PI, RN, SE.
+# <a href="http://www.presidencia.gov.br/CCIVIL/decreto/2002/D4399.htm"></a>
+Rule	Brazil	2002	only	-	Nov	 3	 0:00	1:00	S
+# Decree 4,844 (2003-09-24; corrected 2003-09-26) repeals DST in BA, MT, TO.
+# <a href="http://www.presidencia.gov.br/CCIVIL/decreto/2003/D4844.htm"></a>
+Rule	Brazil	2003	only	-	Oct	19	 0:00	1:00	S
+# Decree 5,223 (2004-10-01) reestablishes DST in MT.
+# <a href="http://www.planalto.gov.br/ccivil_03/_Ato2004-2006/2004/Decreto/D5223.htm"></a>
+Rule	Brazil	2004	only	-	Nov	 2	 0:00	1:00	S
+# The latest ruleset listed above says that the following states observe DST:
+# DF, ES, GO, MG, MS, MT, PR, RJ, RS, SC, SP.
+#
+Rule	Brazil	2005	max	-	Oct	Sun>=15	 0:00	1:00	S
+# For dates after mid-2005, the above rules with TO="max" are guesses
+# and are quite possibly wrong, but are more likely than no DST at all.
+
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+#
+# Fernando de Noronha (administratively part of PE)
+Zone America/Noronha	-2:09:40 -	LMT	1914
+			-2:00	Brazil	FN%sT	1990 Sep 17
+			-2:00	-	FNT	1999 Sep 30
+			-2:00	Brazil	FN%sT	2000 Oct 15
+			-2:00	-	FNT	2001 Sep 13
+			-2:00	Brazil	FN%sT	2002 Oct  1
+			-2:00	-	FNT
+# Other Atlantic islands have no permanent settlement.
+# These include Trindade and Martin Vaz (administratively part of ES),
+# Atol das Rocas (RN), and Penedos de Sao Pedro e Sao Paulo (PE).
+# Fernando de Noronha was a separate territory from 1942-09-02 to 1989-01-01;
+# it also included the Penedos.
+#
+# Amapa (AP), east Para (PA)
+# East Para includes Belem, Maraba, Serra Norte, and Sao Felix do Xingu.
+# The division between east and west Para is the river Xingu.
+# In the north a very small part from the river Javary (now Jari I guess,
+# the border with Amapa) to the Amazon, then to the Xingu.
+Zone America/Belem	-3:13:56 -	LMT	1914
+			-3:00	Brazil	BR%sT	1988 Sep 12
+			-3:00	-	BRT
+#
+# Maranhao (MA), Piaui (PI), Ceara (CE), Rio Grande do Norte (RN),
+# Paraiba (PB)
+Zone America/Fortaleza	-2:34:00 -	LMT	1914
+			-3:00	Brazil	BR%sT	1990 Sep 17
+			-3:00	-	BRT	1999 Sep 30
+			-3:00	Brazil	BR%sT	2000 Oct 22
+			-3:00	-	BRT	2001 Sep 13
+			-3:00	Brazil	BR%sT	2002 Oct  1
+			-3:00	-	BRT
+#
+# Pernambuco (PE) (except Atlantic islands)
+Zone America/Recife	-2:19:36 -	LMT	1914
+			-3:00	Brazil	BR%sT	1990 Sep 17
+			-3:00	-	BRT	1999 Sep 30
+			-3:00	Brazil	BR%sT	2000 Oct 15
+			-3:00	-	BRT	2001 Sep 13
+			-3:00	Brazil	BR%sT	2002 Oct  1
+			-3:00	-	BRT
+#
+# Tocantins (TO)
+Zone America/Araguaina	-3:12:48 -	LMT	1914
+			-3:00	Brazil	BR%sT	1990 Sep 17
+			-3:00	-	BRT	1995 Sep 14
+			-3:00	Brazil	BR%sT	2003 Sep 24
+			-3:00	-	BRT
+#
+# Alagoas (AL), Sergipe (SE)
+Zone America/Maceio	-2:22:52 -	LMT	1914
+			-3:00	Brazil	BR%sT	1990 Sep 17
+			-3:00	-	BRT	1995 Oct 13
+			-3:00	Brazil	BR%sT	1996 Sep  4
+			-3:00	-	BRT	1999 Sep 30
+			-3:00	Brazil	BR%sT	2000 Oct 22
+			-3:00	-	BRT	2001 Sep 13
+			-3:00	Brazil	BR%sT	2002 Oct  1
+			-3:00	-	BRT
+#
+# Bahia (BA)
+# There are too many Salvadors elsewhere, so use America/Bahia instead
+# of America/Salvador.
+Zone America/Bahia	-2:34:04 -	LMT	1914
+			-3:00	Brazil	BR%sT	2003 Sep 24
+			-3:00	-	BRT
+#
+# Goias (GO), Distrito Federal (DF), Minas Gerais (MG),
+# Espirito Santo (ES), Rio de Janeiro (RJ), Sao Paulo (SP), Parana (PR),
+# Santa Catarina (SC), Rio Grande do Sul (RS)
+Zone America/Sao_Paulo	-3:06:28 -	LMT	1914
+			-3:00	Brazil	BR%sT	1963 Oct 23 00:00
+			-3:00	1:00	BRST	1964
+			-3:00	Brazil	BR%sT
+#
+# Mato Grosso do Sul (MS)
+Zone America/Campo_Grande -3:38:28 -	LMT	1914
+			-4:00	Brazil	AM%sT
+#
+# Mato Grosso (MT)
+Zone America/Cuiaba	-3:44:20 -	LMT	1914
+			-4:00	Brazil	AM%sT	2003 Sep 24
+			-4:00	-	AMT	2004 Oct  1
+			-4:00	Brazil	AM%sT
+#
+# west Para (PA), Rondonia (RO)
+# West Para includes Altamira, Oribidos, Prainha, Oriximina, and Santarem.
+Zone America/Porto_Velho -4:15:36 -	LMT	1914
+			-4:00	Brazil	AM%sT	1988 Sep 12
+			-4:00	-	AMT
+#
+# Roraima (RR)
+Zone America/Boa_Vista	-4:02:40 -	LMT	1914
+			-4:00	Brazil	AM%sT	1988 Sep 12
+			-4:00	-	AMT	1999 Sep 30
+			-4:00	Brazil	AM%sT	2000 Oct 15
+			-4:00	-	AMT
+#
+# east Amazonas (AM): Boca do Acre, Jutai, Manaus, Floriano Peixoto
+# The great circle line from Tabatinga to Porto Acre divides
+# east from west Amazonas.
+Zone America/Manaus	-4:00:04 -	LMT	1914
+			-4:00	Brazil	AM%sT	1988 Sep 12
+			-4:00	-	AMT	1993 Sep 28
+			-4:00	Brazil	AM%sT	1994 Sep 22
+			-4:00	-	AMT
+#
+# west Amazonas (AM): Atalaia do Norte, Boca do Maoco, Benjamin Constant,
+#	Eirunepe, Envira, Ipixuna
+Zone America/Eirunepe	-4:39:28 -	LMT	1914
+			-5:00	Brazil	AC%sT	1988 Sep 12
+			-5:00	-	ACT	1993 Sep 28
+			-5:00	Brazil	AC%sT	1994 Sep 22
+			-5:00	-	ACT
+#
+# Acre (AC)
+Zone America/Rio_Branco	-4:31:12 -	LMT	1914
+			-5:00	Brazil	AC%sT	1988 Sep 12
+			-5:00	-	ACT
+
+
+# Chile
+
+# From Eduardo Krell (1995-10-19):
+# The law says to switch to DST at midnight [24:00] on the second SATURDAY
+# of October....  The law is the same for March and October.
+# (1998-09-29):
+# Because of the drought this year, the government decided to go into
+# DST earlier (saturday 9/26 at 24:00). This is a one-time change only ...
+# (unless there's another dry season next year, I guess).
+
+# From Julio I. Pacheco Troncoso (1999-03-18):
+# Because of the same drought, the government decided to end DST later,
+# on April 3, (one-time change).
+
+# From Gwillim Law (2001-05-04):
+# I came across another article in "La Tercera" about Chilean DST.
+# <http://www.tercera.cl/diario/2000/10/13/t-extras.html>
+# It clearly confirms my earlier suggestion, that DST begins at 22:00
+# on Easter Island....  But it also seems to be saying that the
+# observance of DST in Chile began in 1966, rather than 1969 as
+# ... [Shanks] has it....
+#
+# My translation:
+#
+# "The Chilean Army has announced that summer time will begin tomorrow,
+# Saturday, October 14 in continental Chile, insular Chile, and
+# Antarctica, as provided by Supreme Decree 25 of January 11, 1966.
+# By the preceding, official time in continental Chile and Chilean
+# Antarctic, and official time in Western Insular Chile, which applies
+# to Easter Island and Sala y Gomez Island, will be set forward at
+# midnight and at 22:00, respectively, by 20 minutes."
+
+# From Paul Eggert (2001-05-04):
+# Go with this article in preference to Shanks's 1969 date for modern DST.
+# Assume this rule has been used since DST was introduced in the islands.
+
+# From Paul Eggert (2002-10-24):
+# <http://www.shoa.cl/shoa/faqhoraoficial.htm> gives many details that
+# disagree with the following table, but we haven't had time to compare them.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Chile	1918	only	-	Sep	 1	0:00	1:00	S
+Rule	Chile	1919	only	-	Jul	 2	0:00	0	-
+Rule	Chile	1927	1931	-	Sep	 1	0:00	1:00	S
+Rule	Chile	1928	1932	-	Apr	 1	0:00	0	-
+Rule	Chile	1966	1997	-	Oct	Sun>=9	4:00u	1:00	S
+Rule	Chile	1967	1998	-	Mar	Sun>=9	3:00u	0	-
+Rule	Chile	1998	only	-	Sep	27	4:00u	1:00	S
+Rule	Chile	1999	only	-	Apr	 4	3:00u	0	-
+Rule	Chile	1999	max	-	Oct	Sun>=9	4:00u	1:00	S
+Rule	Chile	2000	max	-	Mar	Sun>=9	3:00u	0	-
+# IATA SSIM anomalies: (1990-09) says 1990-09-16; (1992-02) says 1992-03-14;
+# (1996-09) says 1998-03-08.  Ignore these.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Santiago	-4:42:40 -	LMT	1890
+			-4:42:40 -	SMT	1910	    # Santiago Mean Time
+			-5:00	Chile	CL%sT	1932 Sep    # Chile Time
+			-4:00	Chile	CL%sT
+Zone Pacific/Easter	-7:17:28 -	LMT	1890	    # Mataveri
+			-7:17:28 -	MMT	1932 Sep    # Mataveri Mean Time
+			-7:00	Chile	EAS%sT	1982 Mar 14 # Easter I Time
+			-6:00	Chile	EAS%sT
+#
+# Sala y Gomez Island is like Pacific/Easter.
+# Other Chilean locations, including Juan Fernandez Is, San Ambrosio,
+# San Felix, and Antarctic bases, are like America/Santiago.
+
+# Colombia
+# Shanks specifies 24:00 for 1992 transition times; go with IATA,
+# as it seems implausible to change clocks at midnight New Year's Eve.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	CO	1992	only	-	May	 2	0:00	1:00	S
+Rule	CO	1992	only	-	Dec	31	0:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Bogota	-4:56:20 -	LMT	1884 Mar 13
+			-4:56:20 -	BMT	1914 Nov 23 # Bogota Mean Time
+			-5:00	CO	CO%sT	# Colombia Time
+# Malpelo, Providencia, San Andres
+# no information; probably like America/Bogota
+
+# Curacao
+# Shanks says that Bottom and Oranjestad have been at -4:00 since
+# standard time was introduced on 1912-03-02; and that Kralendijk and Rincon
+# used Kralendijk Mean Time (-4:33:08) from 1912-02-02 to 1965-01-01.
+# This all predates our 1970 cutoff, though.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Curacao	-4:35:44 -	LMT	1912 Feb 12	# Willemstad
+			-4:30	-	ANT	1965 # Netherlands Antilles Time
+			-4:00	-	AST
+
+# Ecuador
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Guayaquil	-5:19:20 -	LMT	1890
+			-5:14:00 -	QMT	1931 # Quito Mean Time
+			-5:00	-	ECT	     # Ecuador Time
+Zone Pacific/Galapagos	-5:58:24 -	LMT	1931 # Puerto Baquerizo Moreno
+			-5:00	-	ECT	1986
+			-6:00	-	GALT	     # Galapagos Time
+
+# Falklands
+
+# From Paul Eggert (2001-03-05):
+# Between 1990 and 2000 inclusive, Shanks and the IATA agree except
+# the IATA gives 1996-09-08.  Go with Shanks.
+
+# From Falkland Islands Government Office, London (2001-01-22)
+# via Jesper Norgaard:
+# ... the clocks revert back to Local Mean Time at 2 am on Sunday 15
+# April 2001 and advance one hour to summer time at 2 am on Sunday 2
+# September.  It is anticipated that the clocks will revert back at 2
+# am on Sunday 21 April 2002 and advance to summer time at 2 am on
+# Sunday 1 September.
+
+# From Rives McDow (2001-02-13):
+#
+# I have communicated several times with people there, and the last
+# time I had communications that was helpful was in 1998.  Here is
+# what was said then:
+#
+# "The general rule was that Stanley used daylight saving and the Camp
+# did not. However for various reasons many people in the Camp have
+# started to use daylight saving (known locally as 'Stanley Time')
+# There is no rule as to who uses daylight saving - it is a matter of
+# personal choice and so it is impossible to draw a map showing who
+# uses it and who does not. Any list would be out of date as soon as
+# it was produced. This year daylight saving ended on April 18/19th
+# and started again on September 12/13th.  I do not know what the rule
+# is, but can find out if you like.  We do not change at the same time
+# as UK or Chile."
+#
+# I did have in my notes that the rule was "Second Saturday in Sep at
+# 0:00 until third Saturday in Apr at 0:00".  I think that this does
+# not agree in some cases with Shanks; is this true?
+#
+# Also, there is no mention in the list that some areas in the
+# Falklands do not use DST.  I have found in my communications there
+# that these areas are on the western half of East Falkland and all of
+# West Falkland.  Stanley is the only place that consistently observes
+# DST.  Again, as in other places in the world, the farmers don't like
+# it.  West Falkland is almost entirely sheep farmers.
+#
+# I know one lady there that keeps a list of which farm keeps DST and
+# which doesn't each year.  She runs a shop in Stanley, and says that
+# the list changes each year.  She uses it to communicate to her
+# customers, catching them when they are home for lunch or dinner.
+
+# From Paul Eggert (2001-03-05):
+# For now, we'll just record the time in Stanley, since we have no
+# better info.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Falk	1937	1938	-	Sep	lastSun	0:00	1:00	S
+Rule	Falk	1938	1942	-	Mar	Sun>=19	0:00	0	-
+Rule	Falk	1939	only	-	Oct	1	0:00	1:00	S
+Rule	Falk	1940	1942	-	Sep	lastSun	0:00	1:00	S
+Rule	Falk	1943	only	-	Jan	1	0:00	0	-
+Rule	Falk	1983	only	-	Sep	lastSun	0:00	1:00	S
+Rule	Falk	1984	1985	-	Apr	lastSun	0:00	0	-
+Rule	Falk	1984	only	-	Sep	16	0:00	1:00	S
+Rule	Falk	1985	2000	-	Sep	Sun>=9	0:00	1:00	S
+Rule	Falk	1986	2000	-	Apr	Sun>=16	0:00	0	-
+Rule	Falk	2001	max	-	Apr	Sun>=15	2:00	0	-
+Rule	Falk	2001	max	-	Sep	Sun>=1	2:00	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Atlantic/Stanley	-3:51:24 -	LMT	1890
+			-3:51:24 -	SMT	1912 Mar 12  # Stanley Mean Time
+			-4:00	Falk	FK%sT	1983 May     # Falkland Is Time
+			-3:00	Falk	FK%sT	1985 Sep 15
+			-4:00	Falk	FK%sT
+
+# French Guiana
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Cayenne	-3:29:20 -	LMT	1911 Jul
+			-4:00	-	GFT	1967 Oct # French Guiana Time
+			-3:00	-	GFT
+
+# Guyana
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Guyana	-3:52:40 -	LMT	1915 Mar	# Georgetown
+			-3:45	-	GBGT	1966 May 26 # Br Guiana Time
+			-3:45	-	GYT	1975 Jul 31 # Guyana Time
+			-3:00	-	GYT	1991
+# IATA SSIM (1996-06) says -4:00.  Assume a 1991 switch.
+			-4:00	-	GYT
+
+# Paraguay
+# From Paul Eggert (1999-10-29):
+# Shanks (1999) says that spring transitions are from 01:00 -> 02:00,
+# and autumn transitions are from 00:00 -> 23:00.  Go with earlier
+# editions of Shanks, and with the IATA, who say transitions occur at 00:00.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Para	1975	1988	-	Oct	 1	0:00	1:00	S
+Rule	Para	1975	1978	-	Mar	 1	0:00	0	-
+Rule	Para	1979	1991	-	Apr	 1	0:00	0	-
+Rule	Para	1989	only	-	Oct	22	0:00	1:00	S
+Rule	Para	1990	only	-	Oct	 1	0:00	1:00	S
+Rule	Para	1991	only	-	Oct	 6	0:00	1:00	S
+Rule	Para	1992	only	-	Mar	 1	0:00	0	-
+Rule	Para	1992	only	-	Oct	 5	0:00	1:00	S
+Rule	Para	1993	only	-	Mar	31	0:00	0	-
+Rule	Para	1993	1995	-	Oct	 1	0:00	1:00	S
+Rule	Para	1994	1995	-	Feb	lastSun	0:00	0	-
+Rule	Para	1996	only	-	Mar	 1	0:00	0	-
+# IATA SSIM (2000-02) says 1999-10-10; ignore this for now.
+# From Steffen Thorsen (2000-10-02):
+# I have three independent reports that Paraguay changed to DST this Sunday
+# (10-01).
+#
+# Translated by Gwillim Law (2001-02-27) from
+# <a href="http://www.diarionoticias.com.py/011000/nacional/naciona1.htm">
+# Noticias, a daily paper in Asuncion, Paraguay (2000-10-01)
+# </a>:
+# Starting at 0:00 today, the clock will be set forward 60 minutes, in
+# fulfillment of Decree No. 7,273 of the Executive Power....  The time change
+# system has been operating for several years.  Formerly there was a separate
+# decree each year; the new law has the same effect, but permanently.  Every
+# year, the time will change on the first Sunday of October; likewise, the
+# clock will be set back on the first Sunday of March.
+#
+# From Jesper Norgaard (2001-03-06) [an official URL saying similar things]:
+# http://gateway.abc.com.py:8000/pub/pag04.mbr/artic?FHA=2001-03-03-02.24.52.900592
+#
+Rule	Para	1996	2001	-	Oct	Sun>=1	0:00	1:00	S
+# IATA SSIM (1997-09) says Mar 1; go with Shanks.
+Rule	Para	1997	only	-	Feb	lastSun	0:00	0	-
+# Shanks says 1999-02-28; IATA SSIM (1999-02) says 1999-02-27, but
+# (1999-09) reports no date; go with above sources and Gerd Knops (2001-02-27).
+Rule	Para	1998	2001	-	Mar	Sun>=1	0:00	0	-
+# From Rives McDow (2002-02-28):
+# A decree was issued in Paraguay (no. 16350) on 2002-02-26 that changed the
+# dst method to be from the first Sunday in September to the first Sunday in
+# April.
+Rule	Para	2002	2004	-	Apr	Sun>=1	0:00	0	-
+Rule	Para	2002	2003	-	Sep	Sun>=1	0:00	1:00	S
+#
+# From Jesper Norgaard Welen (2005-01-02):
+# There are several sources that claim that Paraguay made
+# a timezone rule change in autumn 2004.
+# From Steffen Thorsen (2005-01-05):
+# Decree 1,867 (2004-03-05) <http://www.labor.com.py/noticias.asp?id=27>
+Rule	Para	2004	max	-	Oct	Sun>=15	0:00	1:00	S
+Rule	Para	2005	max	-	Mar	Sun>=8	0:00	0	-
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Asuncion	-3:50:40 -	LMT	1890
+			-3:50:40 -	AMT	1931 Oct 10 # Asuncion Mean Time
+			-4:00	-	PYT	1972 Oct # Paraguay Time
+			-3:00	-	PYT	1974 Apr
+			-4:00	Para	PY%sT
+
+# Peru
+#
+# <a href="news:xrGmb.39935$gA1.13896113@news4.srv.hcvlny.cv.net">
+# From Evelyn C. Leeper via Mark Brader (2003-10-26):</a>
+# When we were in Peru in 1985-1986, they apparently switched over
+# sometime between December 29 and January 3 while we were on the Amazon.
+#
+# From Paul Eggert (2003-11-02):
+# Shanks doesn't have this transition.  Assume 1986 was like 1987.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Peru	1938	only	-	Jan	 1	0:00	1:00	S
+Rule	Peru	1938	only	-	Apr	 1	0:00	0	-
+Rule	Peru	1938	1939	-	Sep	lastSun	0:00	1:00	S
+Rule	Peru	1939	1940	-	Mar	Sun>=24	0:00	0	-
+Rule	Peru	1986	1987	-	Jan	 1	0:00	1:00	S
+Rule	Peru	1986	1987	-	Apr	 1	0:00	0	-
+Rule	Peru	1990	only	-	Jan	 1	0:00	1:00	S
+Rule	Peru	1990	only	-	Apr	 1	0:00	0	-
+# IATA is ambiguous for 1993/1995; go with Shanks.
+Rule	Peru	1994	only	-	Jan	 1	0:00	1:00	S
+Rule	Peru	1994	only	-	Apr	 1	0:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Lima	-5:08:12 -	LMT	1890
+			-5:08:36 -	LMT	1908 Jul 28 # Lima Mean Time?
+			-5:00	Peru	PE%sT	# Peru Time
+
+# South Georgia
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Atlantic/South_Georgia -2:26:08 -	LMT	1890		# Grytviken
+			-2:00	-	GST	# South Georgia Time
+
+# South Sandwich Is
+# uninhabited; scientific personnel have wintered
+
+# Suriname
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Paramaribo	-3:40:40 -	LMT	1911
+			-3:40:52 -	PMT	1935     # Paramaribo Mean Time
+			-3:40:36 -	PMT	1945 Oct # The capital moved?
+			-3:30	-	NEGT	1975 Nov 20 # Dutch Guiana Time
+			-3:30	-	SRT	1984 Oct # Suriname Time
+			-3:00	-	SRT
+
+# Trinidad and Tobago
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Port_of_Spain -4:06:04 -	LMT	1912 Mar 2
+			-4:00	-	AST
+
+# Uruguay
+# From Paul Eggert (1993-11-18):
+# Uruguay wins the prize for the strangest peacetime manipulation of the rules.
+# From Shanks:
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+# Whitman gives 1923 Oct 1; go with Shanks.
+Rule	Uruguay	1923	only	-	Oct	 2	 0:00	0:30	HS
+Rule	Uruguay	1924	1926	-	Apr	 1	 0:00	0	-
+Rule	Uruguay	1924	1925	-	Oct	 1	 0:00	0:30	HS
+Rule	Uruguay	1933	1935	-	Oct	lastSun	 0:00	0:30	HS
+# Shanks gives 1935 Apr 1 0:00 and 1936 Mar 30 0:00; go with Whitman.
+Rule	Uruguay	1934	1936	-	Mar	Sat>=25	23:30s	0	-
+Rule	Uruguay	1936	only	-	Nov	 1	 0:00	0:30	HS
+Rule	Uruguay	1937	1941	-	Mar	lastSun	 0:00	0	-
+# Whitman gives 1937 Oct 3; go with Shanks.
+Rule	Uruguay	1937	1940	-	Oct	lastSun	 0:00	0:30	HS
+# Whitman gives 1941 Oct 24 - 1942 Mar 27, 1942 Dec 14 - 1943 Apr 13,
+# and 1943 Apr 13 ``to present time''; go with Shanks.
+Rule	Uruguay	1941	only	-	Aug	 1	 0:00	0	-
+Rule	Uruguay	1942	only	-	Jan	 1	 0:00	0:30	HS
+Rule	Uruguay	1942	only	-	Dec	14	 0:00	1:00	S
+Rule	Uruguay	1943	only	-	Mar	14	 0:00	0	-
+Rule	Uruguay	1959	only	-	May	24	 0:00	1:00	S
+Rule	Uruguay	1959	only	-	Nov	15	 0:00	0	-
+Rule	Uruguay	1960	only	-	Jan	17	 0:00	1:00	S
+Rule	Uruguay	1960	only	-	Mar	 6	 0:00	0	-
+Rule	Uruguay	1965	1967	-	Apr	Sun>=1	 0:00	1:00	S
+Rule	Uruguay	1965	only	-	Sep	26	 0:00	0	-
+Rule	Uruguay	1966	1967	-	Oct	31	 0:00	0	-
+Rule	Uruguay	1968	1970	-	May	27	 0:00	0:30	HS
+Rule	Uruguay	1968	1970	-	Dec	 2	 0:00	0	-
+Rule	Uruguay	1972	only	-	Apr	24	 0:00	1:00	S
+Rule	Uruguay	1972	only	-	Aug	15	 0:00	0	-
+Rule	Uruguay	1974	only	-	Mar	10	 0:00	0:30	HS
+Rule	Uruguay	1974	only	-	Dec	22	 0:00	1:00	S
+Rule	Uruguay	1976	only	-	Oct	 1	 0:00	0	-
+Rule	Uruguay	1977	only	-	Dec	 4	 0:00	1:00	S
+Rule	Uruguay	1978	only	-	Apr	 1	 0:00	0	-
+Rule	Uruguay	1979	only	-	Oct	 1	 0:00	1:00	S
+Rule	Uruguay	1980	only	-	May	 1	 0:00	0	-
+Rule	Uruguay	1987	only	-	Dec	14	 0:00	1:00	S
+Rule	Uruguay	1988	only	-	Mar	14	 0:00	0	-
+Rule	Uruguay	1988	only	-	Dec	11	 0:00	1:00	S
+Rule	Uruguay	1989	only	-	Mar	12	 0:00	0	-
+Rule	Uruguay	1989	only	-	Oct	29	 0:00	1:00	S
+# Shanks says no DST was observed in 1990/1 and 1991/2,
+# and that 1992/3's DST was from 10-25 to 03-01.  Go with IATA.
+Rule	Uruguay	1990	1992	-	Mar	Sun>=1	 0:00	0	-
+Rule	Uruguay	1990	1991	-	Oct	Sun>=21	 0:00	1:00	S
+Rule	Uruguay	1992	only	-	Oct	18	 0:00	1:00	S
+Rule	Uruguay	1993	only	-	Feb	28	 0:00	0	-
+# From Eduardo Cota (2004-09-20):
+# The uruguayan government has decreed a change in the local time....
+# http://www.presidencia.gub.uy/decretos/2004091502.htm
+Rule	Uruguay	2004	only	-	Sep	19	 0:00	1:00	S
+# From Steffen Thorsen (2005-03-11):
+# Uruguay's DST was scheduled to end on Sunday, 2005-03-13, but in order to
+# save energy ... it was postponed two weeks....
+# http://www.presidencia.gub.uy/_Web/noticias/2005/03/2005031005.htm
+Rule	Uruguay	2005	only	-	Mar	27	 2:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Montevideo	-3:44:44 -	LMT	1898 Jun 28
+			-3:44:44 -	MMT	1920 May  1	# Montevideo MT
+			-3:30	Uruguay	UY%sT	1942 Dec 14	# Uruguay Time
+			-3:00	Uruguay	UY%sT
+
+# Venezuela
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Caracas	-4:27:44 -	LMT	1890
+			-4:27:40 -	CMT	1912 Feb 12 # Caracas Mean Time?
+			-4:30	-	VET	1965	     # Venezuela Time
+			-4:00	-	VET

From f152b0492f94bd4e7b4bf5ef38e3183e03ea2a7c Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Sat, 23 Jul 2005 17:59:12 +0000
Subject: [PATCH 104/124] Comment about removed time zones.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@836 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index a77d4d233..b7f366f42 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -24,6 +24,8 @@ Serialization compatible - Yes, except:
    Please note that this only affects the property classes, and not DateTime etc.
    It is unlikely that you serialized one of these classes
 
+- Removed time zones Asia/Riyadh87, Asia/Riyadh88 and Asia/Riyadh89.
+
 
 Deprecations since 1.0
 ----------------------

From 7168f6d3a780c220f8e47fcc3e1e593b7f80118d Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 24 Jul 2005 22:19:21 +0000
Subject: [PATCH 105/124] Add DateTimeUtils.isContiguous

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@837 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  5 +++
 .../src/java/org/joda/time/DateTimeUtils.java | 42 +++++++++++++++++++
 .../test/org/joda/time/TestDateTimeUtils.java | 23 ++++++++++
 3 files changed, 70 insertions(+)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index b7f366f42..f1bd89a5b 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -25,6 +25,8 @@ Serialization compatible - Yes, except:
    It is unlikely that you serialized one of these classes
 
 - Removed time zones Asia/Riyadh87, Asia/Riyadh88 and Asia/Riyadh89.
+  These should not have been included in the 1.0 release, and do not represent
+  genuine time zones. It is unlikely that you used them.
 
 
 Deprecations since 1.0
@@ -113,6 +115,9 @@ Enhancements since 1.0
   Added factory to create a Period from two ReadablePartials using an
   alternative, field-based, calculation
 
+- DateTimeUtils.isContiguous(ReadablePartial)
+  New method to test if a partial is contiguous (see the method for the definition)
+
 - PeriodType
   Added factory method forFields() to allow a PeriodType to be obtained
   from any set of DurationFieldType objects
diff --git a/JodaTime/src/java/org/joda/time/DateTimeUtils.java b/JodaTime/src/java/org/joda/time/DateTimeUtils.java
index 80252539f..6cd73549b 100644
--- a/JodaTime/src/java/org/joda/time/DateTimeUtils.java
+++ b/JodaTime/src/java/org/joda/time/DateTimeUtils.java
@@ -265,6 +265,48 @@ public static final long getDurationMillis(ReadableDuration duration) {
         return duration.getMillis();
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Checks whether the partial is contiguous.
+     * <p>
+     * A partial is contiguous if one field starts where another ends.
+     * <p>
+     * For example YearMonthDay is contiguous because DayOfMonth has the
+     * same range (Month) as the unit of the next field (MonthOfYear), and
+     * MonthOfYear has the same range (Year) as the unit of the next field
+     * (Year).
+     * <p>
+     * Similarly, TimeOfDay is contiguous, as it consists of MillisOfSecond,
+     * SecondOfMinute, MinuteOfHour and HourOfDay (note how the names of
+     * each field 'join up').
+     * <p>
+     * However, a Year/HourOfDay partial is not contiguous because the range
+     * field Day is not equal to the next field Year.
+     * Similarly, a DayOfWeek/DayOfMonth partial is not contiguous because
+     * the range Month is not equal to the next field Day.
+     * 
+     * @param partial  the partial to check
+     * @return true if the partial is contiguous
+     * @throws IllegalArgumentException if the partial is null
+     * @since 1.1
+     */
+    public static final boolean isContiguous(ReadablePartial partial) {
+        if (partial == null) {
+            throw new IllegalArgumentException("Partial must not be null");
+        }
+        DurationFieldType lastType = null;
+        for (int i = 0; i < partial.size(); i++) {
+            DateTimeField loopField = partial.getField(i);
+            if (i > 0) {
+                if (loopField.getRangeDurationField().getType() != lastType) {
+                    return false;
+                }
+            }
+            lastType = loopField.getDurationField().getType();
+        }
+        return true;
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Base class defining a millisecond provider.
diff --git a/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java b/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java
index 4bd4d00b9..33a99d80c 100644
--- a/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java
+++ b/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java
@@ -356,4 +356,27 @@ public void testGetDurationMillis_RI() {
         assertEquals(0L, DateTimeUtils.getDurationMillis(null));
     }
 
+    //-----------------------------------------------------------------------
+    public void testIsContiguous_RP() {
+        YearMonthDay ymd = new YearMonthDay(2005, 6, 9);
+        assertEquals(true, DateTimeUtils.isContiguous(ymd));
+        TimeOfDay tod = new TimeOfDay(12, 20, 30, 0);
+        assertEquals(true, DateTimeUtils.isContiguous(tod));
+        Partial year = new Partial(DateTimeFieldType.year(), 2005);
+        assertEquals(true, DateTimeUtils.isContiguous(year));
+        Partial hourOfDay = new Partial(DateTimeFieldType.hourOfDay(), 12);
+        assertEquals(true, DateTimeUtils.isContiguous(hourOfDay));
+        Partial yearHour = year.with(DateTimeFieldType.hourOfDay(), 12);
+        assertEquals(false, DateTimeUtils.isContiguous(yearHour));
+        Partial ymdd = new Partial(ymd).with(DateTimeFieldType.dayOfWeek(), 2);
+        assertEquals(false, DateTimeUtils.isContiguous(ymdd));
+        Partial dd = new Partial(DateTimeFieldType.dayOfMonth(), 13).with(DateTimeFieldType.dayOfWeek(), 5);
+        assertEquals(false, DateTimeUtils.isContiguous(dd));
+        
+        try {
+            DateTimeUtils.isContiguous((ReadablePartial) null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
 }

From 65a5478fb4d8616417524d13954fe92c501f9e69 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 24 Jul 2005 22:20:11 +0000
Subject: [PATCH 106/124] Ensure that Period constructors for partials check
 for contiguous partials

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@838 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/Period.java    | 18 ++++++++++++++++++
 .../java/org/joda/time/base/BasePeriod.java    |  8 ++++++++
 .../org/joda/time/TestPeriod_Constructors.java | 18 ++++++++++++++++++
 3 files changed, 44 insertions(+)

diff --git a/JodaTime/src/java/org/joda/time/Period.java b/JodaTime/src/java/org/joda/time/Period.java
index 8ddf7d55d..0226bf4a0 100644
--- a/JodaTime/src/java/org/joda/time/Period.java
+++ b/JodaTime/src/java/org/joda/time/Period.java
@@ -426,11 +426,20 @@ public Period(ReadableInstant startInstant, ReadableInstant endInstant, PeriodTy
 
     /**
      * Creates a period from two partially specified times.
+     * <p>
      * The two partials must contain the same fields, thus you can
      * specify two YearMonthDay objects, or two TimeOfDay objects,
      * but not one of each.
      * As these are Partial objects, time zones have no effect on
      * the result.
+     * <p>
+     * The two partials must also both be contiguous - see
+     * {@link DateTimeUtils#isContiguous(ReadablePartial)} for a
+     * definition. Both YearMonthDay and TimeOfDay are contiguous.
+     * <p>
+     * An alternative way of constructing a Period from two Partials
+     * is {@link #fieldDifference(ReadablePartial, ReadablePartial)}.
+     * That method handles all kinds of partials.
      *
      * @param start  the start of the period, must not be null
      * @param end  the end of the period, must not be null
@@ -443,11 +452,20 @@ public Period(ReadablePartial start, ReadablePartial end) {
 
     /**
      * Creates a period from two partially specified times.
+     * <p>
      * The two partials must contain the same fields, thus you can
      * specify two YearMonthDay objects, or two TimeOfDay objects,
      * but not one of each.
      * As these are Partial objects, time zones have no effect on
      * the result.
+     * <p>
+     * The two partials must also both be contiguous - see
+     * {@link DateTimeUtils#isContiguous(ReadablePartial)} for a
+     * definition. Both YearMonthDay and TimeOfDay are contiguous.
+     * <p>
+     * An alternative way of constructing a Period from two Partials
+     * is {@link #fieldDifference(ReadablePartial, ReadablePartial)}.
+     * That method handles all kinds of partials.
      *
      * @param start  the start of the period, must not be null
      * @param end  the end of the period, must not be null
diff --git a/JodaTime/src/java/org/joda/time/base/BasePeriod.java b/JodaTime/src/java/org/joda/time/base/BasePeriod.java
index c1c46c038..84838e3f7 100644
--- a/JodaTime/src/java/org/joda/time/base/BasePeriod.java
+++ b/JodaTime/src/java/org/joda/time/base/BasePeriod.java
@@ -126,11 +126,16 @@ protected BasePeriod(ReadableInstant startInstant, ReadableInstant endInstant, P
 
     /**
      * Creates a period from the given duration and end point.
+     * <p>
      * The two partials must contain the same fields, thus you can
      * specify two YearMonthDay objects, or two TimeOfDay objects,
      * but not one of each.
      * As these are Partial objects, time zones have no effect on
      * the result.
+     * <p>
+     * The two partials must also both be contiguous - see
+     * {@link DateTimeUtils#isContiguous(ReadablePartial)} for a
+     * definition. Both YearMonthDay and TimeOfDay are contiguous.
      *
      * @param start  the start of the period, must not be null
      * @param end  the end of the period, must not be null
@@ -151,6 +156,9 @@ protected BasePeriod(ReadablePartial start, ReadablePartial end, PeriodType type
                 throw new IllegalArgumentException("ReadablePartial objects must have the same set of fields");
             }
         }
+        if (DateTimeUtils.isContiguous(start) == false) {
+            throw new IllegalArgumentException("ReadablePartial objects must be contiguous");
+        }
         iType = checkPeriodType(type);
         Chronology chrono = DateTimeUtils.getChronology(start.getChronology()).withUTC();
         iValues = chrono.get(this, chrono.set(start, 0L), chrono.set(end, 0L));
diff --git a/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java b/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java
index 1920fca32..3896e0aea 100644
--- a/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java
+++ b/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java
@@ -797,6 +797,15 @@ public void testConstructor_RP_RP6() throws Throwable {
         } catch (IllegalArgumentException ex) {}
     }
 
+    public void testConstructor_RP_RP7() throws Throwable {
+        Partial dt1 = new Partial().with(DateTimeFieldType.year(), 2005).with(DateTimeFieldType.hourOfDay(), 12);
+        Partial dt2 = new Partial().with(DateTimeFieldType.year(), 2005).with(DateTimeFieldType.hourOfDay(), 14);
+        try {
+            new Period(dt1, dt2);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
     //-----------------------------------------------------------------------
     public void testConstructor_RP_RP_PeriodType1() throws Throwable {
         YearMonthDay dt1 = new YearMonthDay(2004, 6, 9);
@@ -864,6 +873,15 @@ public void testConstructor_RP_RP_PeriodType6() throws Throwable {
         } catch (IllegalArgumentException ex) {}
     }
 
+    public void testConstructor_RP_RP_PeriodType7() throws Throwable {
+        Partial dt1 = new Partial().with(DateTimeFieldType.year(), 2005).with(DateTimeFieldType.hourOfDay(), 12);
+        Partial dt2 = new Partial().with(DateTimeFieldType.year(), 2005).with(DateTimeFieldType.hourOfDay(), 14);
+        try {
+            new Period(dt1, dt2, PeriodType.standard());
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
     //-----------------------------------------------------------------------
     public void testConstructor_RI_RD1() throws Throwable {
         DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);

From 2de7d1e48ef73f6a1216b6377caec9244782694f Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 25 Jul 2005 22:59:12 +0000
Subject: [PATCH 107/124] Update TODO for 1.2

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@839 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/ToDo.txt | 28 ++++++++++++++++++++--------
 1 file changed, 20 insertions(+), 8 deletions(-)

diff --git a/JodaTime/ToDo.txt b/JodaTime/ToDo.txt
index 97260449c..5891f3870 100644
--- a/JodaTime/ToDo.txt
+++ b/JodaTime/ToDo.txt
@@ -1,44 +1,56 @@
 JodaTime ToDo list
 ==================
 
-For 1.1
+For 1.2
 -------
 
-The TODO list for 1.1 has not been set yet, however I would hope that
-at least some of the items below will be included.
+The TODO list for 1.2 has not been set yet.
+Some of the following are likely targets, as they are interesting ideas.
 
 Join joda-interest@lists.sourceforge.net to help out!
 
 
 Ideas longer term
 -----------------
+- Pluggable text providers:
+   Allow all text output to be controlled and updated.
+   Probably use the CLDR files.
+
 - More chronologies:
    Implement more chronologies, like ChineseChronology, HebrewChronology,
    PersianChronology, etc. This may require more work in localization.
 
-- DateTimeFormatter.appendLocaleFormatterMap(map)
+- DateTimeFormatter.appendLocaleFormatterMap(map):
     Adds a map of Locale to Formatter, which picks the formatter to use
     based on the locale of the print/parse. Allows for the flexible insertion
     of any locale based text into a shared multi-language formatter.
 
-- DateTimeField.setNext(instant, value, howManyNext)
+- DateTimeField.setNext(instant, value, howManyNext):
     Allows questions like what is the date next Tuesday
 
-- Partial matching
+- Partial matching:
     Add code to allow full matching of partials. Thus you might define
     DayOfWeek=Friday and DayOfMonth=13, and then resolve to find the
     next matching Friday the 13th.
 
-- DateHourMinute/DateHourMinuteSecond
+- DateHourMinute/DateHourMinuteSecond/YearMonth?
     More instant variations
+    May be covered by Partial class now
+
+- LocalDateTime/LocalDate/LocalTime?
+    Possible alternative implementation of contiguous partials
 
-- DurationProperty on DateTime, Period and related
+- DurationProperty on DateTime, Period and related?
     Possibly a clear way to do duration stuff, however adding plusDays() type
     methods might be simpler.
 
 - Factories for DateTime classes?
     Perhaps, but the constructors cover this now.
 
+- ChronologyType:
+    An enumerated type for chronologies to replace the static methods on Chronology
+    This will also help with serialization
+
 - Chronology:
     Add daysFrom(year)
     This would be a DateTimeField that, given a base year, returns the number of

From a9f2cd480b637f728ce26997d9dcc5c947907373 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 25 Jul 2005 23:43:35 +0000
Subject: [PATCH 108/124] Improve documentation for v1.1

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@840 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/key_partial.xml |  7 +++--
 JodaTime/xdocs/userguide.xml   | 47 +++++++++++++++++++++++++++++++---
 2 files changed, 48 insertions(+), 6 deletions(-)

diff --git a/JodaTime/xdocs/key_partial.xml b/JodaTime/xdocs/key_partial.xml
index bea06ee71..f617db8d7 100644
--- a/JodaTime/xdocs/key_partial.xml
+++ b/JodaTime/xdocs/key_partial.xml
@@ -57,9 +57,12 @@ Within Joda-Time a partial is represented by the
 There are two implementations of the interface provided:
 <ul>
 <li><a href="apidocs/org/joda/time/TimeOfDay.html">TimeOfDay</a> -
-An immutable implementation that stores the hour, minute, second and millisecond fields</li>
+An immutable implementation that stores the hour, minute, second and millisecond fields.</li>
 <li><a href="apidocs/org/joda/time/YearMonthDay.html">YearMonthDay</a> -
-An immutable implementation that stores the year, monthOfYear and dayOfMonth fields</li>
+An immutable implementation that stores the year, monthOfYear and dayOfMonth fields.</li>
+<li><a href="apidocs/org/joda/time/Partial.html">Partial</a> -
+An immutable implementation that can store any combination of datetime fields.
+For example, using this class you could create a YearMonth or DayOfWeekDayOfMonth partial.</li>
 </ul>
 </p>
 <p>
diff --git a/JodaTime/xdocs/userguide.xml b/JodaTime/xdocs/userguide.xml
index a57d6c8d6..dcc0b0654 100644
--- a/JodaTime/xdocs/userguide.xml
+++ b/JodaTime/xdocs/userguide.xml
@@ -322,9 +322,21 @@ DateTimeZone zone = DateTimeZone.forID("Europe/London");
 </source>
 </p>
 <p>
+In addition to named time zones, Joda-Time also supports fixed time zones.
+The simplest of these is UTC, which is defined as a constant:
+<source>
+DateTimeZone zoneUTC = DateTimeZone.UTC;
+</source>
+Other fixed offset time zones can be obtained by a specialise factory method:
+<source>
+DateTimeZone zoneUTC = DateTimeZone.forOffsetHours(hours);
+</source>
+</p>
+<p>
 The TimeZone implementation is based on data provided by the public
 <a href="http://www.twinsun.com/tz/tz-link.htm">tz database</a>,
 otherwise known as the Olson database.
+A full list of timezone ids can be found <a href="timezones.html">here</a>
 </p>
 </section>
 
@@ -602,6 +614,11 @@ construction (they are immutable).
 Therefore, most simple manipulation of a datetime object involves
 construction of a new datetime as a modified copy of the original.
 </p>
+<p>
+WARNING: <i>A common mistake to make with immutable classes is to forget to assign
+the result to a variable. Remember that calling an add or set method on an
+immtable object has no effect on that object - only the result is updated.</i>
+</p>
 
 <subsection name="Modifying fields">
 <p>
@@ -610,7 +627,7 @@ return to our prior example, if we wish to modify the <code>dt</code> object
 by changing its day-of-week field to Monday we can do so by using the
 <code>setCopy</code> method of the property:
 <source>
-    DateTime dt1 = dt.dayOfWeek().setCopy(DateTimeConstants.MONDAY);
+    DateTime result = dt.dayOfWeek().setCopy(DateTimeConstants.MONDAY);
 </source>
 Note: If the <code>DateTime</code> object is already set to Monday then the same
 object will be returned.
@@ -618,7 +635,7 @@ object will be returned.
 <p>
 To add to a date you could use the <code>addToCopy</code> method.
 <source>
-    DateTime dt1 = dt.dayOfWeek().addToCopy(3);
+    DateTime result = dt.dayOfWeek().addToCopy(3);
 </source>
 </p>
 </subsection>
@@ -629,7 +646,7 @@ Another means of accomplishing similar calculations is to use methods on the
 <code>DateTime</code> object itself. Thus we could add 3 days to <code>dt</code>
 directly as follows:
 <source>
-    DateTime dt1 = dt.plus(Period.days(3));
+    DateTime result = dt.plusDays(3);
 </source>
 </p>
 </subsection>
@@ -644,7 +661,7 @@ finally create a new value datetime.
     MutableDateTime mdt = dt.toMutableDateTime();
     // perform various calculations on mdt
     ...
-    DateTime dt1 = mdt.toDateTime();
+    DateTime result = mdt.toDateTime();
 </source>
 <code>MutableDateTime</code> has a number of methods, including standard setters,
 for directly modifying the datetime.
@@ -888,6 +905,28 @@ but 07 will be 1907. This kind of conversion is not possible with ordinary forma
 strings, highlighting the power of the Joda time formatting architecture.
 </p>
 </subsection>
+
+<subsection name="Direct access">
+<p>
+To simplify the access to the formatter architecture, methods have been
+provided on the datetime classes such as DateTime.
+<source>
+    DateTime dt = new DateTime();
+    String a = dt.toString();
+    String b = dt.toString("dd:mm:yy");
+    String c = dt.toString("EEE", Locale.FRENCH);
+    DateTimeFormatter fmt = ...;
+    String d = dt.toString(fmt);
+</source>
+Each of the four results demonstrates a different way to use the formatters.
+Result <code>a</code> is the standard ISO8601 string for the DateTime.
+Result <code>b</code> will output using the pattern 'dd:mm:yy' (note that
+patterns are cached internally).
+Result <code>c</code> will output using the pattern 'EEE' in French.
+Result <code>d</code> will output using the specified formatter, and is thus
+the same as <code>fmt.print(dt)</code>.
+</p>
+</subsection>
 </section>
 
 <!-- ========================================================================= -->

From 3c4b31b40ca0b42b0dd58c7bac566327a4d4e9ea Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 26 Jul 2005 22:34:15 +0000
Subject: [PATCH 109/124] Add Comparable support to all ReadablePartials via
 AbstractPartial and comments

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@841 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  27 +++-
 JodaTime/src/java/org/joda/time/Partial.java  |  94 --------------
 .../java/org/joda/time/ReadablePartial.java   |  28 ++++
 .../src/java/org/joda/time/TimeOfDay.java     |  55 --------
 .../src/java/org/joda/time/YearMonthDay.java  |  55 --------
 .../org/joda/time/base/AbstractPartial.java   | 120 +++++++++++++++++-
 .../java/org/joda/time/base/BasePartial.java  |  43 +------
 .../org/joda/time/TestTimeOfDay_Basics.java   |  16 ++-
 .../joda/time/TestYearMonthDay_Basics.java    |  11 +-
 9 files changed, 188 insertions(+), 261 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index f1bd89a5b..0888f8b97 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -17,16 +17,27 @@ of restrictions. If the license cause you problems please contact the mailing li
 Incompatible changes since 1.0
 ------------------------------
 Binary compatible - Yes
+
 Source compatible - Yes
+
 Serialization compatible - Yes, except:
   - DateTime.Property, DateMidnight.Property and MutableDateTime.Property
    serialization formats have changed to fix a bug.
-   Please note that this only affects the property classes, and not DateTime etc.
-   It is unlikely that you serialized one of these classes
+    Please note that this only affects the property classes, and not DateTime,
+   DateMidnight or MutableDateTime themselves
+    It is unlikely that you serialized one of these classes
+
+Data compatible - Yes, except:
+  - Removed time zones Asia/Riyadh87, Asia/Riyadh88 and Asia/Riyadh89.
+   These should not have been included in the 1.0 release, and do not represent
+   genuine time zones. It is unlikely that you used them.
 
-- Removed time zones Asia/Riyadh87, Asia/Riyadh88 and Asia/Riyadh89.
-  These should not have been included in the 1.0 release, and do not represent
-  genuine time zones. It is unlikely that you used them.
+
+Warnings since 1.0
+------------------
+ReadablePartial now has a comment recommending that all implementations
+should also implement Comparable.
+This is most easily achieved by extending AbstractPartial.
 
 
 Deprecations since 1.0
@@ -86,6 +97,8 @@ Enhancements since 1.0
   This implementation is flexible as to the fields that it stores.
   Thus, if you want a partial holding just a year and monthOfYear (perhaps
   for a credit card expiry date), then this class can be used.
+  Full support for almost all truncated and reduced precision ISO output
+  formats is available via use of this class.
 
 - DateTime/DateMidnight/MutableDateTime/YearMonthDay/TimeOfDay
   Added convenience plusXxx() and minusXxx() methods to add/subtract a period
@@ -95,9 +108,11 @@ Enhancements since 1.0
   Added convenience toString() method that takes a DateTimeFormatter
   For example, dt.toString(DateTimeFormat.shortDateTime())
 
-- YearMonthDay/TimeOfDay
+- YearMonthDay/TimeOfDay/AbstractPartial
   Enabled comparisons using Comparable interface
   Added compareTo/isEqual/isAfter/isBefore methods
+  These methods were added to AbstractPartial, and are thus available to
+  all implementations of ReadablePartial
 
 - YearMonthDay/TimeOfDay
   Extra time zone constructor
diff --git a/JodaTime/src/java/org/joda/time/Partial.java b/JodaTime/src/java/org/joda/time/Partial.java
index 391cdb2e6..b32c9a56d 100644
--- a/JodaTime/src/java/org/joda/time/Partial.java
+++ b/JodaTime/src/java/org/joda/time/Partial.java
@@ -641,100 +641,6 @@ public Property property(DateTimeFieldType type) {
         return new Property(this, indexOfSupported(type));
     }
 
-    //-----------------------------------------------------------------------
-    /**
-     * Compares this ReadablePartial with another returning an integer
-     * indicating the order.
-     * <p>
-     * The specified object must be a ReadablePartial whose field types
-     * match those of this partial. Normally that means that the partials
-     * must be the same class.
-     *
-     * @param partial  an object to check against
-     * @return negative if this is less, zero if equal, positive if greater
-     * @throws ClassCastException if the partial is the wrong class
-     *  or if it has field types that don't match
-     * @throws NullPointerException if the partial is null
-     */
-    public int compareTo(Object partial) {
-        if (this == partial) {
-            return 0;
-        }
-        ReadablePartial other = (ReadablePartial) partial;
-        if (size() != other.size()) {
-            throw new ClassCastException("ReadablePartial objects must have matching field types");
-        }
-        for (int i = 0, isize = size(); i < isize; i++) {
-            if (getFieldType(i) != other.getFieldType(i)) {
-                throw new ClassCastException("ReadablePartial objects must have matching field types");
-            }
-        }
-        // fields are ordered largest first
-        for (int i = 0, isize = size(); i < isize; i++) {
-            if (getValue(i) > other.getValue(i)) {
-                return 1;
-            }
-            if (getValue(i) < other.getValue(i)) {
-                return -1;
-            }
-        }
-        return 0;
-    }
-
-    /**
-     * Is this partial later than the specified partial.
-     * <p>
-     * You may not pass null into this method. This is because you need
-     * a time zone to accurately determine the current date.
-     *
-     * @param date  an date to check against, null means now
-     * @return true if this date is after the date passed in
-     * @throws IllegalArgumentException if the specified partial is null
-     * @throws ClassCastException if the partial has field types that don't match
-     */
-    public boolean isAfter(ReadablePartial date) {
-        if (date == null) {
-            throw new IllegalArgumentException("Partial cannot be null");
-        }
-        return compareTo(date) > 0;
-    }
-
-    /**
-     * Is this partial earlier than the specified partial.
-     * <p>
-     * You may not pass null into this method. This is because you need
-     * a time zone to accurately determine the current date.
-     *
-     * @param date  an date to check against, null means now
-     * @return true if this date is before the date passed in
-     * @throws IllegalArgumentException if the specified partial is null
-     * @throws ClassCastException if the partial has field types that don't match
-     */
-    public boolean isBefore(ReadablePartial date) {
-        if (date == null) {
-            throw new IllegalArgumentException("Partial cannot be null");
-        }
-        return compareTo(date) < 0;
-    }
-
-    /**
-     * Is this partial the same as the specified partial.
-     * <p>
-     * You may not pass null into this method. This is because you need
-     * a time zone to accurately determine the current date.
-     *
-     * @param date  an date to check against, null means now
-     * @return true if this date is the same as the date passed in
-     * @throws IllegalArgumentException if the specified partial is null
-     * @throws ClassCastException if the partial has field types that don't match
-     */
-    public boolean isEqual(ReadablePartial date) {
-        if (date == null) {
-            throw new IllegalArgumentException("Partial cannot be null");
-        }
-        return compareTo(date) == 0;
-    }
-
     //-----------------------------------------------------------------------
     /**
      * Does this partial match the specified instant.
diff --git a/JodaTime/src/java/org/joda/time/ReadablePartial.java b/JodaTime/src/java/org/joda/time/ReadablePartial.java
index d8aba3133..53478d524 100644
--- a/JodaTime/src/java/org/joda/time/ReadablePartial.java
+++ b/JodaTime/src/java/org/joda/time/ReadablePartial.java
@@ -144,6 +144,34 @@
      */
     int hashCode();
 
+// NOTE: This method should have existed in Joda-Time v1.0.
+// We STRONGLY recommend that all implementations of ReadablePartial
+// implement this method, as per AbstractPartial.
+// The simplest way to do this is to extend AbstractPartial.
+// v2.0 of Joda-Time will include this method in this interface.
+//    //-----------------------------------------------------------------------
+//    /**
+//     * Compares this partial with another returning an integer
+//     * indicating the order.
+//     * <p>
+//     * The fields are compared in order, from largest to smallest.
+//     * The first field that is non-equal is used to determine the result.
+//     * Thus a YearHour partial will first be compared on the year, and then
+//     * on the hour.
+//     * <p>
+//     * The specified object must be a partial instance whose field types
+//     * match those of this partial. If the parial instance has different
+//     * fields then a ClassCastException is thrown.
+//     *
+//     * @param partial  an object to check against
+//     * @return negative if this is less, zero if equal, positive if greater
+//     * @throws ClassCastException if the partial is the wrong class
+//     *  or if it has field types that don't match
+//     * @throws NullPointerException if the partial is null
+//     * @since 2.0
+//     */
+//    int compareTo(Object partial);
+
     //-----------------------------------------------------------------------
     /**
      * Get the value as a String in a recognisable ISO8601 format, only
diff --git a/JodaTime/src/java/org/joda/time/TimeOfDay.java b/JodaTime/src/java/org/joda/time/TimeOfDay.java
index 720943938..98ae695af 100644
--- a/JodaTime/src/java/org/joda/time/TimeOfDay.java
+++ b/JodaTime/src/java/org/joda/time/TimeOfDay.java
@@ -833,61 +833,6 @@ public Property millisOfSecond() {
         return new Property(this, MILLIS_OF_SECOND);
     }
 
-    //-----------------------------------------------------------------------
-    /**
-     * Is this TimeOfDay later than the specified TimeOfDay.
-     * <p>
-     * You may not pass null into this method. This is because you need
-     * a time zone to accurately determine the current time.
-     *
-     * @param time  a time to check against, null means now
-     * @return true if this time is after the time passed in
-     * @throws IllegalArgumentException if the specified TimeOfDay is null
-     * @since 1.1
-     */
-    public boolean isAfter(TimeOfDay time) {
-        if (time == null) {
-            throw new IllegalArgumentException("TimeOfDay cannot be null");
-        }
-        return super.compareTo(time) > 0;
-    }
-
-    /**
-     * Is this TimeOfDay earlier than the specified TimeOfDay.
-     * <p>
-     * You may not pass null into this method. This is because you need
-     * a time zone to accurately determine the current time.
-     *
-     * @param time  a time to check against, null means now
-     * @return true if this time is before the time passed in
-     * @throws IllegalArgumentException if the specified TimeOfDay is null
-     * @since 1.1
-     */
-    public boolean isBefore(TimeOfDay time) {
-        if (time == null) {
-            throw new IllegalArgumentException("TimeOfDay cannot be null");
-        }
-        return super.compareTo(time) < 0;
-    }
-
-    /**
-     * Is this TimeOfDay the same as the specified TimeOfDay.
-     * <p>
-     * You may not pass null into this method. This is because you need
-     * a time zone to accurately determine the current time.
-     *
-     * @param time  a time to check against, null means now
-     * @return true if this time is the same as the time passed in
-     * @throws IllegalArgumentException if the specified TimeOfDay is null
-     * @since 1.1
-     */
-    public boolean isEqual(TimeOfDay time) {
-        if (time == null) {
-            throw new IllegalArgumentException("TimeOfDay cannot be null");
-        }
-        return super.compareTo(time) == 0;
-    }
-
     //-----------------------------------------------------------------------
     /**
      * Output the time in the ISO8601 format THH:mm:ss.SSS.
diff --git a/JodaTime/src/java/org/joda/time/YearMonthDay.java b/JodaTime/src/java/org/joda/time/YearMonthDay.java
index 5e423cc93..e2ee7ce7a 100644
--- a/JodaTime/src/java/org/joda/time/YearMonthDay.java
+++ b/JodaTime/src/java/org/joda/time/YearMonthDay.java
@@ -768,61 +768,6 @@ public Property dayOfMonth() {
         return new Property(this, DAY_OF_MONTH);
     }
 
-    //-----------------------------------------------------------------------
-    /**
-     * Is this YearMonthDay later than the specified YearMonthDay.
-     * <p>
-     * You may not pass null into this method. This is because you need
-     * a time zone to accurately determine the current date.
-     *
-     * @param date  an date to check against, null means now
-     * @return true if this date is after the date passed in
-     * @throws IllegalArgumentException if the specified YearMonthDay is null
-     * @since 1.1
-     */
-    public boolean isAfter(YearMonthDay date) {
-        if (date == null) {
-            throw new IllegalArgumentException("YearMonthDay cannot be null");
-        }
-        return super.compareTo(date) > 0;
-    }
-
-    /**
-     * Is this YearMonthDay earlier than the specified YearMonthDay.
-     * <p>
-     * You may not pass null into this method. This is because you need
-     * a time zone to accurately determine the current date.
-     *
-     * @param date  an date to check against, null means now
-     * @return true if this date is before the date passed in
-     * @throws IllegalArgumentException if the specified YearMonthDay is null
-     * @since 1.1
-     */
-    public boolean isBefore(YearMonthDay date) {
-        if (date == null) {
-            throw new IllegalArgumentException("YearMonthDay cannot be null");
-        }
-        return super.compareTo(date) < 0;
-    }
-
-    /**
-     * Is this YearMonthDay the same as the specified YearMonthDay.
-     * <p>
-     * You may not pass null into this method. This is because you need
-     * a time zone to accurately determine the current date.
-     *
-     * @param date  an date to check against, null means now
-     * @return true if this date is the same as the date passed in
-     * @throws IllegalArgumentException if the specified YearMonthDay is null
-     * @since 1.1
-     */
-    public boolean isEqual(YearMonthDay date) {
-        if (date == null) {
-            throw new IllegalArgumentException("YearMonthDay cannot be null");
-        }
-        return super.compareTo(date) == 0;
-    }
-
     //-----------------------------------------------------------------------
     /**
      * Output the date in the ISO8601 format YYYY-MM-DD.
diff --git a/JodaTime/src/java/org/joda/time/base/AbstractPartial.java b/JodaTime/src/java/org/joda/time/base/AbstractPartial.java
index e9d68e50d..662ac9c67 100644
--- a/JodaTime/src/java/org/joda/time/base/AbstractPartial.java
+++ b/JodaTime/src/java/org/joda/time/base/AbstractPartial.java
@@ -42,7 +42,8 @@
  * @author Stephen Colebourne
  * @since 1.0
  */
-public abstract class AbstractPartial implements ReadablePartial {
+public abstract class AbstractPartial
+        implements ReadablePartial, Comparable {
 
     //-----------------------------------------------------------------------
     /**
@@ -284,6 +285,123 @@ public int hashCode() {
         return total;
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Compares this partial with another returning an integer
+     * indicating the order.
+     * <p>
+     * The fields are compared in order, from largest to smallest.
+     * The first field that is non-equal is used to determine the result.
+     * <p>
+     * The specified object must be a partial instance whose field types
+     * match those of this partial.
+     * <p>
+     * NOTE: This implementation violates the Comparable contract.
+     * This method will accept any instance of ReadablePartial as input.
+     * However, it is possible that some implementations of ReadablePartial
+     * exist that do not extend AbstractPartial, and thus will throw a
+     * ClassCastException if compared in the opposite direction.
+     * The cause of this problem is that ReadablePartial doesn't define
+     * the compareTo() method, however we can't change that until v2.0.
+     *
+     * @param partial  an object to check against
+     * @return negative if this is less, zero if equal, positive if greater
+     * @throws ClassCastException if the partial is the wrong class
+     *  or if it has field types that don't match
+     * @throws NullPointerException if the partial is null
+     * @since 1.1
+     */
+    public int compareTo(Object partial) {
+        if (this == partial) {
+            return 0;
+        }
+        ReadablePartial other = (ReadablePartial) partial;
+        if (size() != other.size()) {
+            throw new ClassCastException("ReadablePartial objects must have matching field types");
+        }
+        for (int i = 0, isize = size(); i < isize; i++) {
+            if (getFieldType(i) != other.getFieldType(i)) {
+                throw new ClassCastException("ReadablePartial objects must have matching field types");
+            }
+        }
+        // fields are ordered largest first
+        for (int i = 0, isize = size(); i < isize; i++) {
+            if (getValue(i) > other.getValue(i)) {
+                return 1;
+            }
+            if (getValue(i) < other.getValue(i)) {
+                return -1;
+            }
+        }
+        return 0;
+    }
+
+    /**
+     * Is this partial later than the specified partial.
+     * <p>
+     * The fields are compared in order, from largest to smallest.
+     * The first field that is non-equal is used to determine the result.
+     * <p>
+     * You may not pass null into this method. This is because you need
+     * a time zone to accurately determine the current date.
+     *
+     * @param partial  a partial to check against, must not be null
+     * @return true if this date is after the date passed in
+     * @throws IllegalArgumentException if the specified partial is null
+     * @throws ClassCastException if the partial has field types that don't match
+     * @since 1.1
+     */
+    public boolean isAfter(ReadablePartial partial) {
+        if (partial == null) {
+            throw new IllegalArgumentException("Partial cannot be null");
+        }
+        return compareTo(partial) > 0;
+    }
+
+    /**
+     * Is this partial earlier than the specified partial.
+     * <p>
+     * The fields are compared in order, from largest to smallest.
+     * The first field that is non-equal is used to determine the result.
+     * <p>
+     * You may not pass null into this method. This is because you need
+     * a time zone to accurately determine the current date.
+     *
+     * @param partial  a partial to check against, must not be null
+     * @return true if this date is before the date passed in
+     * @throws IllegalArgumentException if the specified partial is null
+     * @throws ClassCastException if the partial has field types that don't match
+     * @since 1.1
+     */
+    public boolean isBefore(ReadablePartial partial) {
+        if (partial == null) {
+            throw new IllegalArgumentException("Partial cannot be null");
+        }
+        return compareTo(partial) < 0;
+    }
+
+    /**
+     * Is this partial the same as the specified partial.
+     * <p>
+     * The fields are compared in order, from largest to smallest.
+     * If all fields are equal, the result is true.
+     * <p>
+     * You may not pass null into this method. This is because you need
+     * a time zone to accurately determine the current date.
+     *
+     * @param partial  a partial to check against, must not be null
+     * @return true if this date is the same as the date passed in
+     * @throws IllegalArgumentException if the specified partial is null
+     * @throws ClassCastException if the partial has field types that don't match
+     * @since 1.1
+     */
+    public boolean isEqual(ReadablePartial partial) {
+        if (partial == null) {
+            throw new IllegalArgumentException("Partial cannot be null");
+        }
+        return compareTo(partial) == 0;
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Uses the specified formatter to convert this partial to a String.
diff --git a/JodaTime/src/java/org/joda/time/base/BasePartial.java b/JodaTime/src/java/org/joda/time/base/BasePartial.java
index 9e3e8ef8a..53e61e114 100644
--- a/JodaTime/src/java/org/joda/time/base/BasePartial.java
+++ b/JodaTime/src/java/org/joda/time/base/BasePartial.java
@@ -41,7 +41,7 @@
  */
 public abstract class BasePartial
         extends AbstractPartial
-        implements ReadablePartial, Comparable, Serializable {
+        implements ReadablePartial, Serializable {
 
     /** Serialization version */
     private static final long serialVersionUID = 2353678632973660L;
@@ -244,47 +244,6 @@ protected void setValues(int[] values) {
         iValues = values;
     }
 
-    //-----------------------------------------------------------------------
-    /**
-     * Compares this ReadablePartial with another returning an integer
-     * indicating the order.
-     * <p>
-     * The specified object must be a ReadablePartial whose field types
-     * match those of this partial. Normally that means that the partials
-     * must be the same class.
-     *
-     * @param partial  an object to check against
-     * @return negative if this is less, zero if equal, positive if greater
-     * @throws ClassCastException if the partial is the wrong class
-     *  or if it has field types that don't match
-     * @throws NullPointerException if the partial is null
-     * @since 1.1
-     */
-    public int compareTo(Object partial) {
-        if (this == partial) {
-            return 0;
-        }
-        ReadablePartial other = (ReadablePartial) partial;
-        if (size() != other.size()) {
-            throw new ClassCastException("ReadablePartial objects must have matching field types");
-        }
-        for (int i = 0, isize = size(); i < isize; i++) {
-            if (getFieldType(i) != other.getFieldType(i)) {
-                throw new ClassCastException("ReadablePartial objects must have matching field types");
-            }
-        }
-        // fields are ordered largest first
-        for (int i = 0, isize = size(); i < isize; i++) {
-            if (getValue(i) > other.getValue(i)) {
-                return 1;
-            }
-            if (getValue(i) < other.getValue(i)) {
-                return -1;
-            }
-        }
-        return 0;
-    }
-
     //-----------------------------------------------------------------------
     /**
      * Output the date using the specified format pattern.
diff --git a/JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java b/JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java
index 433c65384..1cd78782b 100644
--- a/JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java
@@ -226,7 +226,7 @@ public void testEqualsHashCode() {
         assertEquals(true, test1.equals(new MockInstant()));
         assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE));
     }
-    
+
     class MockInstant extends MockPartial {
         public Chronology getChronology() {
             return Chronology.getCopticUTC();
@@ -262,9 +262,15 @@ public void testCompareTo() {
         assertEquals(+1, test3.compareTo(test1));
         assertEquals(0, test3.compareTo(test2));
         
-        assertEquals(+1, test2.compareTo(new MockInstant()));
-        assertEquals(0, test1.compareTo(new MockInstant()));
-        
+        DateTimeFieldType[] types = new DateTimeFieldType[] {
+            DateTimeFieldType.hourOfDay(),
+            DateTimeFieldType.minuteOfHour(),
+            DateTimeFieldType.secondOfMinute(),
+            DateTimeFieldType.millisOfSecond(),
+        };
+        int[] values = new int[] {10, 20, 30, 40};
+        Partial p = new Partial(types, values);
+        assertEquals(0, test1.compareTo(p));
         try {
             test1.compareTo(null);
             fail();
@@ -274,7 +280,7 @@ public void testCompareTo() {
             fail();
         } catch (ClassCastException ex) {}
     }
-    
+
     //-----------------------------------------------------------------------
     public void testIsEqual_TOD() {
         TimeOfDay test1 = new TimeOfDay(10, 20, 30, 40);
diff --git a/JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java b/JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java
index c009ed4d9..2f8b872a9 100644
--- a/JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java
@@ -247,9 +247,14 @@ public void testCompareTo() {
         assertEquals(+1, test3.compareTo(test1));
         assertEquals(0, test3.compareTo(test2));
         
-        assertEquals(+1, test2.compareTo(new MockInstant()));
-        assertEquals(0, new YearMonthDay(1970, 6, 9).compareTo(new MockInstant()));
-        
+        DateTimeFieldType[] types = new DateTimeFieldType[] {
+            DateTimeFieldType.year(),
+            DateTimeFieldType.monthOfYear(),
+            DateTimeFieldType.dayOfMonth(),
+        };
+        int[] values = new int[] {2005, 6, 2};
+        Partial p = new Partial(types, values);
+        assertEquals(0, test1.compareTo(p));
         try {
             test1.compareTo(null);
             fail();

From 75c05c8e12c87371651c4285d748c86ca42317ba Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Wed, 27 Jul 2005 17:49:08 +0000
Subject: [PATCH 110/124] Fixed spelling error.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@842 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 0888f8b97..46b21026a 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -166,7 +166,7 @@ Enhancements since 1.0
 - ISODateTimeFormat
   New methods to output ordinal style dates, such as 2005-161.
 
-- DateTimeZone classes updated to latest data from the Olsen time zone database
+- DateTimeZone classes updated to latest data from the Olson time zone database
 
 
 Feedback

From da10d7e4ec270a11dd2bc2c4b8be2a123aba2f3c Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Wed, 27 Jul 2005 17:54:09 +0000
Subject: [PATCH 111/124] Fix javadoc warning

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@843 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/Period.java | 1 -
 1 file changed, 1 deletion(-)

diff --git a/JodaTime/src/java/org/joda/time/Period.java b/JodaTime/src/java/org/joda/time/Period.java
index 0226bf4a0..a16e08d47 100644
--- a/JodaTime/src/java/org/joda/time/Period.java
+++ b/JodaTime/src/java/org/joda/time/Period.java
@@ -161,7 +161,6 @@ public static Period millis(int millis) {
      *
      * @param start  the start of the period, must not be null
      * @param end  the end of the period, must not be null
-     * @param type  which set of fields this period supports, null means standard
      * @throws IllegalArgumentException if the partials are null or invalid
      * @since 1.1
      */

From 6f9ef4c4033655457d3809e6785d45605051d466 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 3 Aug 2005 21:33:04 +0000
Subject: [PATCH 112/124] Interval:   Added gap method that returns the gap
 between two intervals.   Added abuts method that returns true if two
 intervals abut. DateTimeUtils:   Added getReadableInterval(ReadableInterval)
 method to handle null intervals

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@844 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    | 11 +++-
 .../src/java/org/joda/time/DateTimeUtils.java | 19 ++++++
 JodaTime/src/java/org/joda/time/Interval.java | 60 +++++++++++++++++--
 .../test/org/joda/time/TestDateTimeUtils.java | 13 ++++
 .../org/joda/time/TestInterval_Basics.java    | 52 ++++++++++++++++
 5 files changed, 147 insertions(+), 8 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 46b21026a..4b5bcfe0c 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -31,6 +31,7 @@ Data compatible - Yes, except:
   - Removed time zones Asia/Riyadh87, Asia/Riyadh88 and Asia/Riyadh89.
    These should not have been included in the 1.0 release, and do not represent
    genuine time zones. It is unlikely that you used them.
+   If you do want to use them, please contact joda-interest@lists.sourceforge.net
 
 
 Warnings since 1.0
@@ -130,8 +131,9 @@ Enhancements since 1.0
   Added factory to create a Period from two ReadablePartials using an
   alternative, field-based, calculation
 
-- DateTimeUtils.isContiguous(ReadablePartial)
-  New method to test if a partial is contiguous (see the method for the definition)
+- DateTimeUtils
+  Added isContiguous(ReadablePartial) to test if a partial is contiguous
+  (see the method for the definition)
 
 - PeriodType
   Added factory method forFields() to allow a PeriodType to be obtained
@@ -150,6 +152,11 @@ Enhancements since 1.0
 
 - Interval
   Added overlap method that returns the actual overlap between two intervals.
+  Added gap method that returns the gap between two intervals.
+  Added abuts method that returns true if two intervals abut.
+
+- DateTimeUtils
+  Added getReadableInterval(ReadableInterval) method to handle null intervals
 
 - IllegalFieldValueException
   Added new exception subclass of IllegalArgumentException to capture more
diff --git a/JodaTime/src/java/org/joda/time/DateTimeUtils.java b/JodaTime/src/java/org/joda/time/DateTimeUtils.java
index 6cd73549b..9e3b258a2 100644
--- a/JodaTime/src/java/org/joda/time/DateTimeUtils.java
+++ b/JodaTime/src/java/org/joda/time/DateTimeUtils.java
@@ -197,6 +197,25 @@ public static final Chronology getIntervalChronology(ReadableInterval interval)
         return chrono;
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the interval handling null.
+     * <p>
+     * If the interval is <code>null</code>, an interval representing now
+     * to now in the {@link ISOChronology#getInstance() ISOChronology}
+     * will be returned. Otherwise, the interval specified is returned.
+     * 
+     * @param interval  the interval to use, null means now to now
+     * @return the interval, never null
+     */
+    public static final ReadableInterval getReadableInterval(ReadableInterval interval) {
+        if (interval == null) {
+            long now = DateTimeUtils.currentTimeMillis();
+            interval = new Interval(now, now);
+        }
+        return interval;
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Gets the chronology handling null.
diff --git a/JodaTime/src/java/org/joda/time/Interval.java b/JodaTime/src/java/org/joda/time/Interval.java
index c69eaba81..9a125a3e7 100644
--- a/JodaTime/src/java/org/joda/time/Interval.java
+++ b/JodaTime/src/java/org/joda/time/Interval.java
@@ -177,17 +177,19 @@ public Interval toInterval() {
 
     //-----------------------------------------------------------------------
     /**
-     * Gets the interval where this interval and that specified overlap.
-     * 
+     * Gets the overlap where this interval and that specified.
+     * <p>
+     * Any two intervals can overlap, abut, or have a gap between them.
+     * This method returns the amount of the overlap, only if the
+     * intervals do overlap.
+     * If the intervals do not overlap, then null is returned.
+     *
      * @param interval  the interval to examine, null means now
      * @return the overlap interval, null if no overlap
      * @since 1.1
      */
     public Interval overlap(ReadableInterval interval) {
-        if (interval == null) {
-            long now = DateTimeUtils.currentTimeMillis();
-            interval = new Interval(now, now);
-        }
+        interval = DateTimeUtils.getReadableInterval(interval);
         if (overlaps(interval) == false) {
             return null;
         }
@@ -196,6 +198,52 @@ public Interval overlap(ReadableInterval interval) {
         return new Interval(start, end);
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the gap between this interval and that specified.
+     * <p>
+     * Any two intervals can overlap, abut, or have a gap between them.
+     * This method returns the amount of the gap only if the
+     * intervals do actually have a gap between them.
+     * If the intervals overlap or abut, then null is returned.
+     *
+     * @param interval  the interval to examine, null means now
+     * @return the gap interval, null if no gap
+     * @since 1.1
+     */
+    public Interval gap(ReadableInterval interval) {
+        interval = DateTimeUtils.getReadableInterval(interval);
+        if (overlaps(interval) || abuts(interval)) {
+            return null;
+        }
+        long otherStart = interval.getStartMillis();
+        long otherEnd = interval.getEndMillis();
+        long thisStart = getStartMillis();
+        long thisEnd = getEndMillis();
+        if (thisStart >= otherEnd) {
+            return new Interval(otherEnd, thisStart);
+        } else {
+            return new Interval(thisEnd, otherStart);
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Does this interval abut with the interval specified.
+     * <p>
+     * An interval abuts if it starts immediately after, or
+     * ends immediately before this interval without overlap.
+     *
+     * @param interval  the interval to examine, null means now
+     * @return true if the interval abuts
+     * @since 1.1
+     */
+    public boolean abuts(ReadableInterval interval) {
+        interval = DateTimeUtils.getReadableInterval(interval);
+        return (interval.getEndMillis() == getStartMillis() ||
+                getEndMillis() == interval.getStartMillis());
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Creates a new interval with the same start and end, but a different chronology.
diff --git a/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java b/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java
index 33a99d80c..448e8ce28 100644
--- a/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java
+++ b/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java
@@ -331,6 +331,19 @@ public void testGetIntervalChronology_RI_RI() {
         assertEquals(Chronology.getISO(), DateTimeUtils.getIntervalChronology(null, null));
     }
 
+    //-----------------------------------------------------------------------
+    public void testGetReadableInterval_ReadableInterval() {
+        ReadableInterval input = new Interval(0, 100L);
+        assertEquals(input, DateTimeUtils.getReadableInterval(input));
+        
+        try {
+            DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
+            assertEquals(new Interval(TEST_TIME_NOW, TEST_TIME_NOW), DateTimeUtils.getReadableInterval(null));
+        } finally {
+            DateTimeUtils.setCurrentMillisSystem();
+        }
+    }
+
     //-----------------------------------------------------------------------
     public void testGetChronology_Chronology() {
         assertEquals(BuddhistChronology.getInstance(), DateTimeUtils.getChronology(BuddhistChronology.getInstance()));
diff --git a/JodaTime/src/test/org/joda/time/TestInterval_Basics.java b/JodaTime/src/test/org/joda/time/TestInterval_Basics.java
index 8dd9d6e69..af2b94115 100644
--- a/JodaTime/src/test/org/joda/time/TestInterval_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestInterval_Basics.java
@@ -323,6 +323,58 @@ public void testOverlap_RInterval() {
                 test.overlap((ReadableInterval) null));
     }
 
+    //-----------------------------------------------------------------------
+    public void testGap_RInterval() {
+        Interval test = new Interval(TEST_TIME1, TEST_TIME2);
+        
+        assertEquals(
+                new Interval(TEST_TIME2, TEST_TIME2 + 2),
+                test.gap(new Interval(TEST_TIME2 + 2, TEST_TIME2 + 4)));
+        assertEquals(
+                null,
+                test.gap(new Interval(TEST_TIME2, TEST_TIME2)));
+
+        assertEquals(
+                new Interval(TEST_TIME1 - 2, TEST_TIME1),
+                test.gap(new Interval(TEST_TIME1 - 4, TEST_TIME1 - 2)));
+        assertEquals(
+                null,
+                test.gap(new Interval(TEST_TIME1 - 2, TEST_TIME1)));
+
+        assertEquals(
+                null,
+                test.gap(new Interval(TEST_TIME1, TEST_TIME2)));
+        assertEquals(
+                null,
+                test.gap(new Interval(TEST_TIME1 + 1, TEST_TIME2 - 1)));
+    }
+
+    //-----------------------------------------------------------------------
+    public void testAbuts_RInterval() {
+        Interval test = new Interval(TEST_TIME1, TEST_TIME2);
+        
+        assertEquals(
+                false,
+                test.abuts(new Interval(TEST_TIME2 + 2, TEST_TIME2 + 4)));
+        assertEquals(
+                true,
+                test.abuts(new Interval(TEST_TIME2, TEST_TIME2)));
+
+        assertEquals(
+                false,
+                test.abuts(new Interval(TEST_TIME1 - 4, TEST_TIME1 - 2)));
+        assertEquals(
+                true,
+                test.abuts(new Interval(TEST_TIME1 - 2, TEST_TIME1)));
+
+        assertEquals(
+                false,
+                test.abuts(new Interval(TEST_TIME1, TEST_TIME2)));
+        assertEquals(
+                false,
+                test.abuts(new Interval(TEST_TIME1 + 1, TEST_TIME2 - 1)));
+    }
+
     //-----------------------------------------------------------------------
     public void testIsBefore_long() {
         Interval test = new Interval(TEST_TIME1, TEST_TIME2);

From 0aa4f5e1f5ec24852393047d4a869ecf447986ea Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 3 Aug 2005 21:59:16 +0000
Subject: [PATCH 113/124] Javadoc

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@845 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../joda/time/IllegalFieldValueException.java | 88 +++++++++++++++----
 1 file changed, 69 insertions(+), 19 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/IllegalFieldValueException.java b/JodaTime/src/java/org/joda/time/IllegalFieldValueException.java
index a88d6ec41..0550bb8dd 100644
--- a/JodaTime/src/java/org/joda/time/IllegalFieldValueException.java
+++ b/JodaTime/src/java/org/joda/time/IllegalFieldValueException.java
@@ -22,6 +22,19 @@
  * @since 1.1
  */
 public class IllegalFieldValueException extends IllegalArgumentException {
+    
+    /** Serialization lock. */
+    private static final long serialVersionUID = 6305711765985447737L;
+
+    /**
+     * Creates a message for the exception.
+     *
+     * @param fieldName  the field name
+     * @param value  the value rejected
+     * @param lowerBound  the lower bound allowed
+     * @param upperBound  the uppe bound allowed
+     * @return the message
+     */
     private static String createMessage(String fieldName, Number value,
                                         Number lowerBound, Number upperBound) {
         StringBuffer buf = new StringBuffer()
@@ -46,6 +59,13 @@ private static String createMessage(String fieldName, Number value,
         return buf.toString();
     }
 
+    /**
+     * Creates a message for the exception.
+     *
+     * @param fieldName  the field name
+     * @param value  the value rejected
+     * @return the message
+     */
     private static String createMessage(String fieldName, String value) {
         StringBuffer buf = new StringBuffer().append("Value ");
 
@@ -61,7 +81,7 @@ private static String createMessage(String fieldName, String value) {
         
         return buf.toString();
     }
-    
+
     private final DateTimeFieldType iDateTimeFieldType;
     private final DurationFieldType iDurationFieldType;
     private final String iFieldName;
@@ -71,10 +91,12 @@ private static String createMessage(String fieldName, String value) {
     private final Number iUpperBound;
 
     /**
-     * @param fieldType type of field being set
-     * @param value illegal value being set
-     * @param lowerBound lower legal field value, or null if not applicable
-     * @param upperBound upper legal field value, or null if not applicable
+     * Constructor.
+     * 
+     * @param fieldType  type of field being set
+     * @param value  illegal value being set
+     * @param lowerBound  lower legal field value, or null if not applicable
+     * @param upperBound  upper legal field value, or null if not applicable
      */
     public IllegalFieldValueException(DateTimeFieldType fieldType,
                                       Number value, Number lowerBound, Number upperBound) {
@@ -89,10 +111,12 @@ public IllegalFieldValueException(DateTimeFieldType fieldType,
     }
 
     /**
-     * @param fieldType type of field being set
-     * @param value illegal value being set
-     * @param lowerBound lower legal field value, or null if not applicable
-     * @param upperBound upper legal field value, or null if not applicable
+     * Constructor.
+     * 
+     * @param fieldType  type of field being set
+     * @param value  illegal value being set
+     * @param lowerBound  lower legal field value, or null if not applicable
+     * @param upperBound  upper legal field value, or null if not applicable
      */
     public IllegalFieldValueException(DurationFieldType fieldType,
                                       Number value, Number lowerBound, Number upperBound) {
@@ -107,10 +131,12 @@ public IllegalFieldValueException(DurationFieldType fieldType,
     }
 
     /**
-     * @param fieldName name of field being set
-     * @param value illegal value being set
-     * @param lowerBound lower legal field value, or null if not applicable
-     * @param upperBound upper legal field value, or null if not applicable
+     * Constructor.
+     * 
+     * @param fieldName  name of field being set
+     * @param value  illegal value being set
+     * @param lowerBound  lower legal field value, or null if not applicable
+     * @param upperBound  upper legal field value, or null if not applicable
      */
     public IllegalFieldValueException(String fieldName,
                                       Number value, Number lowerBound, Number upperBound) {
@@ -125,8 +151,10 @@ public IllegalFieldValueException(String fieldName,
     }
 
     /**
-     * @param fieldType type of field being set
-     * @param value illegal value being set
+     * Constructor.
+     * 
+     * @param fieldType  type of field being set
+     * @param value  illegal value being set
      */
     public IllegalFieldValueException(DateTimeFieldType fieldType, String value) {
         super(createMessage(fieldType.getName(), value));
@@ -140,8 +168,10 @@ public IllegalFieldValueException(DateTimeFieldType fieldType, String value) {
     }
 
     /**
-     * @param fieldType type of field being set
-     * @param value illegal value being set
+     * Constructor.
+     * 
+     * @param fieldType  type of field being set
+     * @param value  illegal value being set
      */
     public IllegalFieldValueException(DurationFieldType fieldType, String value) {
         super(createMessage(fieldType.getName(), value));
@@ -155,8 +185,10 @@ public IllegalFieldValueException(DurationFieldType fieldType, String value) {
     }
 
     /**
-     * @param fieldName name of field being set
-     * @param value illegal value being set
+     * Constructor.
+     * 
+     * @param fieldName  name of field being set
+     * @param value  illegal value being set
      */
     public IllegalFieldValueException(String fieldName, String value) {
         super(createMessage(fieldName, value));
@@ -169,8 +201,11 @@ public IllegalFieldValueException(String fieldName, String value) {
         iUpperBound = null;
     }
 
+    //-----------------------------------------------------------------------
     /**
      * Returns the DateTimeFieldType whose value was invalid, or null if not applicable.
+     * 
+     * @return the datetime field type
      */
     public DateTimeFieldType getDateTimeFieldType() {
         return iDateTimeFieldType;
@@ -178,6 +213,8 @@ public DateTimeFieldType getDateTimeFieldType() {
 
     /**
      * Returns the DurationFieldType whose value was invalid, or null if not applicable.
+     * 
+     * @return the duration field type
      */
     public DurationFieldType getDurationFieldType() {
         return iDurationFieldType;
@@ -185,6 +222,8 @@ public DurationFieldType getDurationFieldType() {
 
     /**
      * Returns the name of the field whose value was invalid.
+     * 
+     * @return the field name
      */
     public String getFieldName() {
         return iFieldName;
@@ -192,6 +231,8 @@ public String getFieldName() {
 
     /**
      * Returns the illegal integer value assigned to the field, or null if not applicable.
+     * 
+     * @return the value
      */
     public Number getIllegalNumberValue() {
         return iNumberValue;
@@ -199,6 +240,8 @@ public Number getIllegalNumberValue() {
 
     /**
      * Returns the illegal string value assigned to the field, or null if not applicable.
+     * 
+     * @return the value
      */
     public String getIllegalStringValue() {
         return iStringValue;
@@ -206,6 +249,8 @@ public String getIllegalStringValue() {
 
     /**
      * Returns the illegal value assigned to the field as a non-null string.
+     * 
+     * @return the value
      */
     public String getIllegalValueAsString() {
         String value = iStringValue;
@@ -217,6 +262,8 @@ public String getIllegalValueAsString() {
 
     /**
      * Returns the lower bound of the legal value range, or null if not applicable.
+     * 
+     * @return the lower bound
      */
     public Number getLowerBound() {
         return iLowerBound;
@@ -224,8 +271,11 @@ public Number getLowerBound() {
 
     /**
      * Returns the upper bound of the legal value range, or null if not applicable.
+     * 
+     * @return the upper bound
      */
     public Number getUpperBound() {
         return iUpperBound;
     }
+
 }

From 0531e3dc4fe73eacc1742644a8847c2dd9dc9466 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 3 Aug 2005 22:07:34 +0000
Subject: [PATCH 114/124] Remove unused code

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@846 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/DateTimeZone.java          | 1 -
 JodaTime/src/java/org/joda/time/PeriodType.java            | 1 -
 JodaTime/src/java/org/joda/time/format/DateTimeFormat.java | 2 --
 .../org/joda/time/format/DateTimeFormatterBuilder.java     | 7 -------
 4 files changed, 11 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/DateTimeZone.java b/JodaTime/src/java/org/joda/time/DateTimeZone.java
index 9a13af048..c8aac17a5 100644
--- a/JodaTime/src/java/org/joda/time/DateTimeZone.java
+++ b/JodaTime/src/java/org/joda/time/DateTimeZone.java
@@ -191,7 +191,6 @@ public static DateTimeZone forID(String id) {
             if (offset == 0L) {
                 return DateTimeZone.UTC;
             } else {
-                StringBuffer buf = new StringBuffer();
                 id = printOffset(offset);
                 return fixedOffsetZone(id, offset);
             }
diff --git a/JodaTime/src/java/org/joda/time/PeriodType.java b/JodaTime/src/java/org/joda/time/PeriodType.java
index 32123f61d..087f557d5 100644
--- a/JodaTime/src/java/org/joda/time/PeriodType.java
+++ b/JodaTime/src/java/org/joda/time/PeriodType.java
@@ -659,7 +659,6 @@ public int indexOf(DurationFieldType type) {
      * @return a string
      */
     public String toString() {
-        String name = getName();
         return "PeriodType[" + getName() + "]";
     }
 
diff --git a/JodaTime/src/java/org/joda/time/format/DateTimeFormat.java b/JodaTime/src/java/org/joda/time/format/DateTimeFormat.java
index 1712a5886..36d3c1942 100644
--- a/JodaTime/src/java/org/joda/time/format/DateTimeFormat.java
+++ b/JodaTime/src/java/org/joda/time/format/DateTimeFormat.java
@@ -25,7 +25,6 @@
 
 import org.joda.time.Chronology;
 import org.joda.time.DateTime;
-import org.joda.time.DateTimeFieldType;
 import org.joda.time.DateTimeZone;
 import org.joda.time.ReadablePartial;
 
@@ -409,7 +408,6 @@ private static void parsePatternTo(DateTimeFormatterBuilder builder, String patt
                     }
 
                     // Use pivots which are compatible with SimpleDateFormat.
-                    DateTimeFieldType type;
                     switch (c) {
                     case 'x':
                         builder.appendTwoDigitWeekyear
diff --git a/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java b/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java
index c46283581..6a290a840 100644
--- a/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java
+++ b/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java
@@ -2311,13 +2311,6 @@ public void printTo(Writer out, ReadablePartial partial, Locale locale) throws I
             }
         }
 
-        private Composite(Composite base, DateTimePrinter[] printers) {
-            iPrinters = printers;
-            iParsers = base.iParsers;
-            iPrintedLengthEstimate = base.iPrintedLengthEstimate;
-            iParsedLengthEstimate = base.iParsedLengthEstimate;
-        }
-
         public int estimatePrintedLength() {
             return iPrintedLengthEstimate;
         }

From 467cf820dd5af0aa6480d903c19ec8651fc22674 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 3 Aug 2005 22:14:06 +0000
Subject: [PATCH 115/124] Improve test coverage

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@847 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../org/joda/time/TestPeriod_Constructors.java | 18 ++++++++++++++++++
 1 file changed, 18 insertions(+)

diff --git a/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java b/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java
index 3896e0aea..52eb7953e 100644
--- a/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java
+++ b/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java
@@ -798,6 +798,15 @@ public void testConstructor_RP_RP6() throws Throwable {
     }
 
     public void testConstructor_RP_RP7() throws Throwable {
+        Partial dt1 = new Partial().with(DateTimeFieldType.year(), 2005).with(DateTimeFieldType.monthOfYear(), 12);
+        Partial dt2 = new Partial().with(DateTimeFieldType.year(), 2005).with(DateTimeFieldType.hourOfDay(), 14);
+        try {
+            new Period(dt1, dt2);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testConstructor_RP_RP8() throws Throwable {
         Partial dt1 = new Partial().with(DateTimeFieldType.year(), 2005).with(DateTimeFieldType.hourOfDay(), 12);
         Partial dt2 = new Partial().with(DateTimeFieldType.year(), 2005).with(DateTimeFieldType.hourOfDay(), 14);
         try {
@@ -874,6 +883,15 @@ public void testConstructor_RP_RP_PeriodType6() throws Throwable {
     }
 
     public void testConstructor_RP_RP_PeriodType7() throws Throwable {
+        Partial dt1 = new Partial().with(DateTimeFieldType.year(), 2005).with(DateTimeFieldType.monthOfYear(), 12);
+        Partial dt2 = new Partial().with(DateTimeFieldType.year(), 2005).with(DateTimeFieldType.hourOfDay(), 14);
+        try {
+            new Period(dt1, dt2, PeriodType.standard());
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testConstructor_RP_RP_PeriodType8() throws Throwable {
         Partial dt1 = new Partial().with(DateTimeFieldType.year(), 2005).with(DateTimeFieldType.hourOfDay(), 12);
         Partial dt2 = new Partial().with(DateTimeFieldType.year(), 2005).with(DateTimeFieldType.hourOfDay(), 14);
         try {

From df16fe1bb49ac761bed5f46e081bf2166428dd7d Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 3 Aug 2005 22:24:28 +0000
Subject: [PATCH 116/124] Add int override to withPivotYear, and tests

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@848 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../joda/time/format/DateTimeFormatter.java   | 33 +++++++++++++++++++
 .../time/format/TestDateTimeFormatter.java    | 28 +++++++++++++---
 2 files changed, 56 insertions(+), 5 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java b/JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java
index 2065684e9..b35dbb576 100644
--- a/JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java
+++ b/JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java
@@ -331,6 +331,39 @@ public DateTimeFormatter withPivotYear(Integer pivotYear) {
                 iOffsetParsed, iChrono, iZone, pivotYear);
     }
 
+    /**
+     * Returns a new formatter that will use the specified pivot year for two
+     * digit year parsing in preference to that stored in the parser.
+     * <p>
+     * This setting is useful for changing the pivot year of formats built
+     * using a pattern - {@link DateTimeFormat#forPattern(String)}.
+     * <p>
+     * When parsing, this pivot year is used.
+     * There is no effect when printing.
+     * <p>
+     * The pivot year enables a two digit year to be converted to a four
+     * digit year. The pivot represents the year in the middle of the
+     * supported range of years. Thus the full range of years that will
+     * be built is <code>(pivot - 50) .. (pivot + 49)</code>.
+     *
+     * <pre>
+     * pivot   supported range   00 is   20 is   40 is   60 is   80 is
+     * ---------------------------------------------------------------
+     * 1950      1900..1999      1900    1920    1940    1960    1980
+     * 1975      1925..2024      2000    2020    1940    1960    1980
+     * 2000      1950..2049      2000    2020    2040    1960    1980
+     * 2025      1975..2074      2000    2020    2040    2060    1980
+     * 2050      2000..2099      2000    2020    2040    2060    2080
+     * </pre>
+     *
+     * @param pivotYear  the pivot year to use as an override when parsing
+     * @return the new formatter
+     * @since 1.1
+     */
+    public DateTimeFormatter withPivotYear(int pivotYear) {
+        return withPivotYear(new Integer(pivotYear));
+    }
+
     /**
      * Gets the pivot year to use as an override.
      *
diff --git a/JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java b/JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java
index 125ba1040..d83338802 100644
--- a/JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java
+++ b/JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java
@@ -233,7 +233,7 @@ public void testPrint_chrono_and_zone() {
                 f.withChronology(null).withZone(NEWYORK).print(dt));
     }
 
-    public void testWithGetMethods() {
+    public void testWithGetLocale() {
         DateTimeFormatter f2 = f.withLocale(Locale.FRENCH);
         assertEquals(Locale.FRENCH, f2.getLocale());
         assertSame(f2, f2.withLocale(Locale.FRENCH));
@@ -241,16 +241,20 @@ public void testWithGetMethods() {
         f2 = f.withLocale(null);
         assertEquals(null, f2.getLocale());
         assertSame(f2, f2.withLocale(null));
-        
-        f2 = f.withZone(PARIS);
+    }
+
+    public void testWithGetZone() {
+        DateTimeFormatter f2 = f.withZone(PARIS);
         assertEquals(PARIS, f2.getZone());
         assertSame(f2, f2.withZone(PARIS));
         
         f2 = f.withZone(null);
         assertEquals(null, f2.getZone());
         assertSame(f2, f2.withZone(null));
-        
-        f2 = f.withChronology(BUDDHIST_PARIS);
+    }
+
+    public void testWithGetChronology() {
+        DateTimeFormatter f2 = f.withChronology(BUDDHIST_PARIS);
         assertEquals(BUDDHIST_PARIS, f2.getChronolgy());
         assertSame(f2, f2.withChronology(BUDDHIST_PARIS));
         
@@ -259,6 +263,20 @@ public void testWithGetMethods() {
         assertSame(f2, f2.withChronology(null));
     }
 
+    public void testWithGetPivotYear() {
+        DateTimeFormatter f2 = f.withPivotYear(13);
+        assertEquals(new Integer(13), f2.getPivotYear());
+        assertSame(f2, f2.withPivotYear(13));
+        
+        f2 = f.withPivotYear(new Integer(14));
+        assertEquals(new Integer(14), f2.getPivotYear());
+        assertSame(f2, f2.withPivotYear(new Integer(14)));
+        
+        f2 = f.withPivotYear(null);
+        assertEquals(null, f2.getPivotYear());
+        assertSame(f2, f2.withPivotYear(null));
+    }
+
     public void testWithGetOffsetParsedMethods() {
         DateTimeFormatter f2 = f;
         assertEquals(false, f2.isOffsetParsed());

From 16bf50803d23cb8bfd49bb1758971f8d21c41a38 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 3 Aug 2005 22:29:05 +0000
Subject: [PATCH 117/124] Add some more possible TODO items

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@849 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/tasks.xml | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/JodaTime/xdocs/tasks.xml b/JodaTime/xdocs/tasks.xml
index 8b1ac3cc4..7620f4fc8 100644
--- a/JodaTime/xdocs/tasks.xml
+++ b/JodaTime/xdocs/tasks.xml
@@ -20,6 +20,9 @@ The following tasks are on the possible TODO list - contact the mailing lists fo
 <li>Consider methods to easily get to the last day in a month</li>
 <li>Consider formatting ordinal numbers, like 1st, 2nd, 3rd</li>
 <li>Consider allowing the text output to be altered</li>
+<li>Formatter switching by locale</li>
+<li>ChronologyType to better represent chronologies in partials (no time zone)</li>
+<li>Date matching methods to find next date matching search criteria</li>
 </ul>
 
 <p>

From bd4c24974040e276aa303789fbe03bd1bafd0442 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 3 Aug 2005 22:40:42 +0000
Subject: [PATCH 118/124] Improve JDK1.5 compilation

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@850 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/test/org/joda/time/convert/MockUnknownCalendar.java    | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/JodaTime/src/test/org/joda/time/convert/MockUnknownCalendar.java b/JodaTime/src/test/org/joda/time/convert/MockUnknownCalendar.java
index cae24335a..8c30a41f5 100644
--- a/JodaTime/src/test/org/joda/time/convert/MockUnknownCalendar.java
+++ b/JodaTime/src/test/org/joda/time/convert/MockUnknownCalendar.java
@@ -65,5 +65,8 @@ public int getLeastMaximum(int field) {
     public int compareTo(Object arg0) {
         return 0;
     }
+    public int compareTo(Calendar arg0) {
+        return 0;
+    }
     
 }

From b00d835b7655fd14d55e0e4fcd0234177e18944e Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 3 Aug 2005 22:44:51 +0000
Subject: [PATCH 119/124] Add comments about equals on periods

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@851 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/java/org/joda/time/MutablePeriod.java | 19 +++++++++++++++++++
 JodaTime/src/java/org/joda/time/Period.java   |  8 ++++++++
 .../java/org/joda/time/ReadablePeriod.java    | 12 ++++++++++++
 .../org/joda/time/base/AbstractPeriod.java    | 12 ++++++++++++
 4 files changed, 51 insertions(+)

diff --git a/JodaTime/src/java/org/joda/time/MutablePeriod.java b/JodaTime/src/java/org/joda/time/MutablePeriod.java
index 278e84e10..0615c1b27 100644
--- a/JodaTime/src/java/org/joda/time/MutablePeriod.java
+++ b/JodaTime/src/java/org/joda/time/MutablePeriod.java
@@ -23,6 +23,25 @@
 /**
  * Standard mutable time period implementation.
  * <p>
+ * A time period is divided into a number of fields, such as hours and seconds.
+ * Which fields are supported is defined by the PeriodType class.
+ * The default is the standard period type, which supports years, months, weeks, days,
+ * hours, minutes, seconds and millis.
+ * <p>
+ * When this time period is added to an instant, the effect is of adding each field in turn.
+ * As a result, this takes into account daylight savings time.
+ * Adding a time period of 1 day to the day before daylight savings starts will only add
+ * 23 hours rather than 24 to ensure that the time remains the same.
+ * If this is not the behaviour you want, then see {@link Duration}.
+ * <p>
+ * The definition of a period also affects the equals method. A period of 1
+ * day is not equal to a period of 24 hours, nor 1 hour equal to 60 minutes.
+ * This is because periods represent an abstracted definition of a time period
+ * (eg. a day may not actually be 24 hours, it might be 23 or 25 at daylight
+ * savings boundary). To compare the actual duration of two periods, convert
+ * both to durations using toDuration, an operation that emphasises that the
+ * result may differ according to the date you choose.
+ * <p>
  * MutablePeriod is mutable and not thread-safe, unless concurrent threads
  * are not invoking mutator methods.
  *
diff --git a/JodaTime/src/java/org/joda/time/Period.java b/JodaTime/src/java/org/joda/time/Period.java
index a16e08d47..d71211d4c 100644
--- a/JodaTime/src/java/org/joda/time/Period.java
+++ b/JodaTime/src/java/org/joda/time/Period.java
@@ -33,6 +33,14 @@
  * 23 hours rather than 24 to ensure that the time remains the same.
  * If this is not the behaviour you want, then see {@link Duration}.
  * <p>
+ * The definition of a period also affects the equals method. A period of 1
+ * day is not equal to a period of 24 hours, nor 1 hour equal to 60 minutes.
+ * This is because periods represent an abstracted definition of a time period
+ * (eg. a day may not actually be 24 hours, it might be 23 or 25 at daylight
+ * savings boundary). To compare the actual duration of two periods, convert
+ * both to durations using toDuration, an operation that emphasises that the
+ * result may differ according to the date you choose.
+ * <p>
  * Period is thread-safe and immutable, provided that the PeriodType is as well.
  * All standard PeriodType classes supplied are thread-safe and immutable.
  *
diff --git a/JodaTime/src/java/org/joda/time/ReadablePeriod.java b/JodaTime/src/java/org/joda/time/ReadablePeriod.java
index db6564be4..3845029b0 100644
--- a/JodaTime/src/java/org/joda/time/ReadablePeriod.java
+++ b/JodaTime/src/java/org/joda/time/ReadablePeriod.java
@@ -118,6 +118,18 @@
      * Compares this object with the specified object for equality based
      * on the value and type of each supported field.
      * All ReadablePeriod instances are accepted.
+     * <p>
+     * Note that a period of 1 day is not equal to a period of 24 hours,
+     * nor is 1 hour equal to 60 minutes. Only periods with the same amount
+     * in each field are equal.
+     * <p>
+     * This is because periods represent an abstracted definition of a time
+     * period (eg. a day may not actually be 24 hours, it might be 23 or 25
+     * at daylight savings boundary).
+     * <p>
+     * To compare the actual duration of two periods, convert both to
+     * {@link Duration}s, an operation that emphasises that the result may
+     * differ according to the date you choose.
      *
      * @param readablePeriod  a readable period to check against
      * @return true if all the field values and types are equal, false if
diff --git a/JodaTime/src/java/org/joda/time/base/AbstractPeriod.java b/JodaTime/src/java/org/joda/time/base/AbstractPeriod.java
index 520d05672..41f5d1450 100644
--- a/JodaTime/src/java/org/joda/time/base/AbstractPeriod.java
+++ b/JodaTime/src/java/org/joda/time/base/AbstractPeriod.java
@@ -138,6 +138,18 @@ public MutablePeriod toMutablePeriod() {
     /**
      * Compares this object with the specified object for equality based
      * on the value of each field. All ReadablePeriod instances are accepted.
+     * <p>
+     * Note that a period of 1 day is not equal to a period of 24 hours,
+     * nor is 1 hour equal to 60 minutes. Only periods with the same amount
+     * in each field are equal.
+     * <p>
+     * This is because periods represent an abstracted definition of a time
+     * period (eg. a day may not actually be 24 hours, it might be 23 or 25
+     * at daylight savings boundary).
+     * <p>
+     * To compare the actual duration of two periods, convert both to
+     * {@link org.joda.time.Duration Duration}s, an operation that emphasises
+     * that the result may differ according to the date you choose.
      *
      * @param period  a readable period to check against
      * @return true if all the field values are equal, false if

From 9bf299b6c856b3ca9947fe87a3a1ac7dea648f7e Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 3 Aug 2005 23:31:09 +0000
Subject: [PATCH 120/124] Update documentation for v1.1

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@852 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/index.xml        |   8 +-
 JodaTime/xdocs/installation.xml |  23 +++-
 JodaTime/xdocs/upgradeto110.xml | 198 ++++++++++++++++++++++++++++++++
 3 files changed, 221 insertions(+), 8 deletions(-)
 create mode 100644 JodaTime/xdocs/upgradeto110.xml

diff --git a/JodaTime/xdocs/index.xml b/JodaTime/xdocs/index.xml
index b0a3471a7..c2d4cc1c5 100644
--- a/JodaTime/xdocs/index.xml
+++ b/JodaTime/xdocs/index.xml
@@ -35,8 +35,8 @@ public boolean isBirthdayInLeapYear(<b>YearMonthDay</b> dateOfBirth) {
   return dateOfBirth.year().isLeap();
 }
 </source>
-Version 1.0 was released on 2005-02-22 -
-<a href="http://sourceforge.net/project/showfiles.php?group_id=97367">Download now</a>
+Version 1.1 was released on 2005-08-dd -
+<a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=104212">Download now</a>
 </p>
 </section>
 
@@ -105,9 +105,9 @@ Various documentation is available:
 
 <section name="Releases">
 <p>
-<a href="http://sourceforge.net/project/showfiles.php?group_id=97367">Release 1.0</a>
+<a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=104212">Release 1.1</a>
 is the current latest release.
-This release is considered stable and worthy of the 1.0 tag.
+This release is considered stable and worthy of the 1.x tag.
 It has extensive testing suites and has been used in production.
 We now recommend JDK 1.3 or later, and have performed no testing on earlier JDKs.
 </p>
diff --git a/JodaTime/xdocs/installation.xml b/JodaTime/xdocs/installation.xml
index 498f0ccd8..d16836a9b 100644
--- a/JodaTime/xdocs/installation.xml
+++ b/JodaTime/xdocs/installation.xml
@@ -11,22 +11,37 @@
 <section name="Download and Installation">
 <p>
 You can download the latest version of Joda-Time
-<a href="http://sourceforge.net/project/showfiles.php?group_id=97367">here</a>.
-Once the "joda-time.jar" is in your classpath, you will be able to use Joda-Time.
+<a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=104212">here</a>.
+Once the "joda-time-1.1.jar" is in your classpath, you will be able to use Joda-Time.
 </p>
+<!--<p>
+As from v1.1 we release three versions:
+<ul>
+<li>ide - the recommended download for most Eclipse/IDEA/NetBeans users.
+  This contains the binary jar file and a zip of the java source files to attach within your IDE classpath.</li>
+<li>bin - the classic binary release, with the jar file and javadocs</li>
+<li>src - the classic source release, with the jar file and all source files</li>
+</ul>
+</p>-->
 <p>
 The release notes for upgraders can be found here:
 <ul>
+<li><a href="upgradeto110.html">Version 1.0 to Version 1.1</a></li>
 <li><a href="upgradeto100.html">Version 0.99 to Version 1.0</a></li>
 <li><a href="upgradeto099.html">Version 0.98 to Version 0.99</a></li>
 </ul>
 </p>
 <p>
-Unless you have a specific reason to do otherwise, it is advisable to use the
-binary download. If you want to build Joda-Time from source you will need
+If you want to build Joda-Time from source you will need
 <a href="http://ant.apache.org">Apache Ant</a>.
 Simply call <code>ant jar</code> to compile and create a jar file.
 </p>
+<p>
+Compilation is also available using
+<a href="http://maven.apache.org">Apache Maven</a>.
+Maven is intended to be used primarily as a website generation tool.
+Ant is our preferred build tool.
+</p>
 </section>
 <!--
 <section name="Eclipse Support">
diff --git a/JodaTime/xdocs/upgradeto110.xml b/JodaTime/xdocs/upgradeto110.xml
new file mode 100644
index 000000000..1ed7576d7
--- /dev/null
+++ b/JodaTime/xdocs/upgradeto110.xml
@@ -0,0 +1,198 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+
+<document>
+ <properties>
+  <title>Java date and time API - Upgrade from 1.0 to 1.1</title>
+  <author email="scolebourne@joda.org">Stephen Colebourne</author>
+ </properties>
+
+<body>
+
+<section name="Upgrade">
+<p>
+These are the release notes and advice for upgrading Joda-Time from
+version 1.0 to version 1.1.
+<source>
+Joda-Time version 1.1
+---------------------
+
+Joda-Time is a date and time handling library that seeks to replace the JDK
+Date and Calendar classes.
+
+This is the second full release of Joda-Time.
+
+We recommend JDK 1.3 or later, and have performed no testing on earlier JDKs.
+
+Joda-Time is licensed under the business-friendly Apache License Version 2.
+This is the same license as all of Apache, plus other open source projects such as Spring.
+The intent is to make the code available to the Java community with the minimum
+of restrictions. If the license cause you problems please contact the mailing list.
+
+
+Incompatible changes since 1.0
+------------------------------
+Binary compatible - Yes
+
+Source compatible - Yes
+
+Serialization compatible - Yes, except:
+  - DateTime.Property, DateMidnight.Property and MutableDateTime.Property
+   serialization formats have changed to fix a bug.
+    Please note that this only affects the property classes, and not DateTime,
+   DateMidnight or MutableDateTime themselves
+    It is unlikely that you serialized one of these classes
+
+Data compatible - Yes, except:
+  - Removed time zones Asia/Riyadh87, Asia/Riyadh88 and Asia/Riyadh89.
+   These should not have been included in the 1.0 release, and do not represent
+   genuine time zones. It is unlikely that you used them.
+   If you do want to use them, please contact joda-interest@lists.sourceforge.net
+
+
+Warnings since 1.0
+------------------
+ReadablePartial now has a comment recommending that all implementations
+should also implement Comparable.
+This is most easily achieved by extending AbstractPartial.
+
+
+Deprecations since 1.0
+----------------------
+None
+
+
+Bug fixes since 1.0
+-------------------
+- Date and Time (ZoneInfoCompiler)
+  Greek summer time was incorrect due to a comment parsing bug.
+  This disabled DST (summer time) for Europe/Athens after 1980.
+
+- DateTimeFormat
+  Parsing of two digit year by DateTimeFormat supports parsing of more or less
+  than two digits, for compatibility with java.text.SimpleDateFormat. If not
+  two digits or if sign character is present, then year is parsed as absolute.
+
+- GJChronology
+  Range duration field of dayOfMonth was not consistent with monthOfYear. This
+  bug manifested itself when adding/subtracting periods to partials.
+
+- DateTimeParserBucket
+  Fixed parsing date where format includes era. Era must be set and rounded
+  before any other fields.
+
+- PeriodFormatterBuilder
+  Formatters that had fields which required a zero to be printed were not being
+  parsed.
+
+- DateTime.Property, DateMidnight.Property and MutableDateTime.Property
+  Could previously only be serialized in UTC.
+  The serialization format has been changed to be simpler and more reliable.
+  Unfortunately, this was an incompatible change to the serialization format.
+
+- DateTimeFormatterBuilder/PeriodFormatterBuilder
+  Number parser would accept multiple sign characters as valid.
+
+- YearMonthDay/TimeOfDay.withChronologyRetainFields
+  Previously, switching chronology did not validate the fields, so you could
+  end up with an object in an invalid state, such as a YearMonthDay where
+  dayOfMonth=31 with Coptic.
+  This method can now throw an IllegalArgumentException
+
+- Chronologies
+  Overflowed calculations involving year throw ArithmeticException rather than
+  produce a bogus result.
+
+- DateTimeFormatterBuilder.canBuildFormatter()
+  Previously this method always returned false.
+
+
+Enhancements since 1.0
+----------------------
+- Partial
+  New immutable implementation of ReadablePartial.
+  This implementation is flexible as to the fields that it stores.
+  Thus, if you want a partial holding just a year and monthOfYear (perhaps
+  for a credit card expiry date), then this class can be used.
+  Full support for almost all truncated and reduced precision ISO output
+  formats is available via use of this class.
+
+- DateTime/DateMidnight/MutableDateTime/YearMonthDay/TimeOfDay
+  Added convenience plusXxx() and minusXxx() methods to add/subtract a period
+  For example, dt.plus(Period.days(6)) can now be replaced by dt.plusDays(6)
+
+- DateTime/DateMidnight/MutableDateTime/YearMonthDay/TimeOfDay
+  Added convenience toString() method that takes a DateTimeFormatter
+  For example, dt.toString(DateTimeFormat.shortDateTime())
+
+- YearMonthDay/TimeOfDay/AbstractPartial
+  Enabled comparisons using Comparable interface
+  Added compareTo/isEqual/isAfter/isBefore methods
+  These methods were added to AbstractPartial, and are thus available to
+  all implementations of ReadablePartial
+
+- YearMonthDay/TimeOfDay
+  Extra time zone constructor
+  Allows current date and time to be accurately obtained
+
+- DateTime/DateMidnight/MutableDateTime/YearMonthDay/TimeOfDay Property
+  Added new method to property class - getAsString()
+  Gets the value as a string, not using text values like 'Monday' or 'January'
+
+- Period
+  Added constructors to create a Period from two ReadablePartials, such as
+  YearMonthDay or TimeOfDay
+
+- Period
+  Added factory to create a Period from two ReadablePartials using an
+  alternative, field-based, calculation
+
+- DateTimeUtils
+  Added isContiguous(ReadablePartial) to test if a partial is contiguous
+  (see the method for the definition)
+
+- PeriodType
+  Added factory method forFields() to allow a PeriodType to be obtained
+  from any set of DurationFieldType objects
+
+- PeriodType
+  Added three new period types - YearMonthDay, YearWeekDay and YearDay
+  These complement the existing ones but exclude the time fields.
+
+- DateTimeFormatter
+  Method withPivotYear added to allow the two digit pivot year to be controlled.
+  This is most useful after creating a format from a string pattern.
+
+- DateTimeFormatter
+  Added lenient parse option to appendTwoDigitYear and appendTwoDigitWeekyear.
+
+- Interval
+  Added overlap method that returns the actual overlap between two intervals.
+  Added gap method that returns the gap between two intervals.
+  Added abuts method that returns true if two intervals abut.
+
+- DateTimeUtils
+  Added getReadableInterval(ReadableInterval) method to handle null intervals
+
+- IllegalFieldValueException
+  Added new exception subclass of IllegalArgumentException to capture more
+  context when a field is set to an illegal value. This can be helpful in
+  interactive applications.
+
+- GJLocaleSymbols
+  Supports parsing "CE" and "BCE" as era if locale language is English.
+
+- ISODateTimeFormat
+  New method, forFields(), which gets an ISO format for a set of fields.
+  This is useful for more unusual formats such as DayHour.
+
+- ISODateTimeFormat
+  New methods to output ordinal style dates, such as 2005-161.
+
+- DateTimeZone classes updated to latest data from the Olson time zone database
+
+</source>
+</p>
+</section>
+
+</body>
+</document>

From c820cbe00211734ffd4340c45a1c1f3c52d10e18 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 3 Aug 2005 23:34:31 +0000
Subject: [PATCH 121/124] Update documentation for v1.1

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@853 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/installation.xml | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/JodaTime/xdocs/installation.xml b/JodaTime/xdocs/installation.xml
index d16836a9b..4b743e92f 100644
--- a/JodaTime/xdocs/installation.xml
+++ b/JodaTime/xdocs/installation.xml
@@ -10,9 +10,9 @@
 
 <section name="Download and Installation">
 <p>
-You can download the latest version of Joda-Time
-<a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=104212">here</a>.
-Once the "joda-time-1.1.jar" is in your classpath, you will be able to use Joda-Time.
+To use Joda-Time you need to
+<a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=104212">download the latest version</a>.
+The download will contain the joda-time-1.1.jar. Once you add this to your classpath you will be able to use Joda-Time.
 </p>
 <!--<p>
 As from v1.1 we release three versions:

From 22b39081c85640ff5add5ed3a8037f4ac00ccb49 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 10 Aug 2005 22:34:57 +0000
Subject: [PATCH 122/124] Add since tags for 1.1

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@854 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/DateTimeUtils.java            | 1 +
 JodaTime/src/java/org/joda/time/Partial.java                  | 1 +
 .../org/joda/time/field/AbstractPartialFieldProperty.java     | 1 +
 .../joda/time/field/AbstractReadableInstantFieldProperty.java | 1 +
 JodaTime/src/java/org/joda/time/field/FieldUtils.java         | 1 +
 JodaTime/src/java/org/joda/time/format/DateTimeFormat.java    | 2 ++
 JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java | 4 +++-
 JodaTime/src/java/org/joda/time/format/ISOPeriodFormat.java   | 2 ++
 JodaTime/src/java/org/joda/time/format/PeriodFormat.java      | 2 ++
 9 files changed, 14 insertions(+), 1 deletion(-)

diff --git a/JodaTime/src/java/org/joda/time/DateTimeUtils.java b/JodaTime/src/java/org/joda/time/DateTimeUtils.java
index 9e3b258a2..8a84d83bd 100644
--- a/JodaTime/src/java/org/joda/time/DateTimeUtils.java
+++ b/JodaTime/src/java/org/joda/time/DateTimeUtils.java
@@ -207,6 +207,7 @@ public static final Chronology getIntervalChronology(ReadableInterval interval)
      * 
      * @param interval  the interval to use, null means now to now
      * @return the interval, never null
+     * @since 1.1
      */
     public static final ReadableInterval getReadableInterval(ReadableInterval interval) {
         if (interval == null) {
diff --git a/JodaTime/src/java/org/joda/time/Partial.java b/JodaTime/src/java/org/joda/time/Partial.java
index b32c9a56d..0a808ff28 100644
--- a/JodaTime/src/java/org/joda/time/Partial.java
+++ b/JodaTime/src/java/org/joda/time/Partial.java
@@ -785,6 +785,7 @@ public String toString(String pattern, Locale locale) {
      * This class binds a <code>YearMonthDay</code> to a <code>DateTimeField</code>.
      * 
      * @author Stephen Colebourne
+     * @since 1.1
      */
     public static class Property extends AbstractPartialFieldProperty implements Serializable {
 
diff --git a/JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java b/JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java
index 8a9bc5c8d..c13e21bea 100644
--- a/JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java
+++ b/JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java
@@ -100,6 +100,7 @@ public String getName() {
      * 
      * @return the current value
      * @see DateTimeField#get
+     * @since 1.1
      */
     public String getAsString() {
         return Integer.toString(get());
diff --git a/JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java b/JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java
index a36125dd6..b63bc39c2 100644
--- a/JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java
+++ b/JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java
@@ -112,6 +112,7 @@ public int get() {
      * 
      * @return the current value
      * @see DateTimeField#get
+     * @since 1.1
      */
     public String getAsString() {
         return Integer.toString(get());
diff --git a/JodaTime/src/java/org/joda/time/field/FieldUtils.java b/JodaTime/src/java/org/joda/time/field/FieldUtils.java
index 67565b68e..3faf5d223 100644
--- a/JodaTime/src/java/org/joda/time/field/FieldUtils.java
+++ b/JodaTime/src/java/org/joda/time/field/FieldUtils.java
@@ -176,6 +176,7 @@ public static void verifyValueBounds(DateTimeField field,
      * @param lowerBound  the lower bound allowed for value
      * @param upperBound  the upper bound allowed for value
      * @throws IllegalFieldValueException if value is not in the specified bounds
+     * @since 1.1
      */
     public static void verifyValueBounds(DateTimeFieldType fieldType, 
                                          int value, int lowerBound, int upperBound) {
diff --git a/JodaTime/src/java/org/joda/time/format/DateTimeFormat.java b/JodaTime/src/java/org/joda/time/format/DateTimeFormat.java
index 36d3c1942..b94daab53 100644
--- a/JodaTime/src/java/org/joda/time/format/DateTimeFormat.java
+++ b/JodaTime/src/java/org/joda/time/format/DateTimeFormat.java
@@ -353,6 +353,8 @@ static void appendPatternTo(DateTimeFormatterBuilder builder, String pattern) {
     //-----------------------------------------------------------------------
     /**
      * Constructor.
+     *
+     * @since 1.1 (previously private)
      */
     protected DateTimeFormat() {
         super();
diff --git a/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java b/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java
index e077b7a40..0f326ee6a 100644
--- a/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java
+++ b/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java
@@ -132,7 +132,9 @@
         dtp; // date time parser
 
     /**
-     * Restricted constructor.
+     * Constructor.
+     *
+     * @since 1.1 (previously private)
      */
     protected ISODateTimeFormat() {
         super();
diff --git a/JodaTime/src/java/org/joda/time/format/ISOPeriodFormat.java b/JodaTime/src/java/org/joda/time/format/ISOPeriodFormat.java
index 09d0de1d9..528004bb2 100644
--- a/JodaTime/src/java/org/joda/time/format/ISOPeriodFormat.java
+++ b/JodaTime/src/java/org/joda/time/format/ISOPeriodFormat.java
@@ -45,6 +45,8 @@
 
     /**
      * Constructor.
+     *
+     * @since 1.1 (previously private)
      */
     protected ISOPeriodFormat() {
         super();
diff --git a/JodaTime/src/java/org/joda/time/format/PeriodFormat.java b/JodaTime/src/java/org/joda/time/format/PeriodFormat.java
index a27bcb487..9a1f3de2e 100644
--- a/JodaTime/src/java/org/joda/time/format/PeriodFormat.java
+++ b/JodaTime/src/java/org/joda/time/format/PeriodFormat.java
@@ -37,6 +37,8 @@
 
     /**
      * Constructor.
+     *
+     * @since 1.1 (previously private)
      */
     protected PeriodFormat() {
         super();

From 227eb75ce1563091cec8175aa34374972893b585 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 10 Aug 2005 22:36:06 +0000
Subject: [PATCH 123/124] Update for v1.1

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@855 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt      | 2 ++
 JodaTime/build.xml              | 2 +-
 JodaTime/project.xml            | 2 +-
 JodaTime/src/conf/MANIFEST.MF   | 2 +-
 JodaTime/xdocs/index.xml        | 2 +-
 JodaTime/xdocs/installation.xml | 9 ---------
 JodaTime/xdocs/upgradeto110.xml | 3 ++-
 7 files changed, 8 insertions(+), 14 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 4b5bcfe0c..d5af7073a 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -17,8 +17,10 @@ of restrictions. If the license cause you problems please contact the mailing li
 Incompatible changes since 1.0
 ------------------------------
 Binary compatible - Yes
+  - v1.0 and v1.1 are binary compatible in their public and protected API
 
 Source compatible - Yes
+  - v1.0 and v1.1 are source compatible in their public and protected API
 
 Serialization compatible - Yes, except:
   - DateTime.Property, DateMidnight.Property and MutableDateTime.Property
diff --git a/JodaTime/build.xml b/JodaTime/build.xml
index cd82f8b74..fab6efa75 100644
--- a/JodaTime/build.xml
+++ b/JodaTime/build.xml
@@ -27,7 +27,7 @@
   <property name="component.title"         value="Joda date and time"/>
 
   <!-- The current version number of this component -->
-  <property name="component.version"       value="1.1-dev"/>
+  <property name="component.version"       value="1.1"/>
 
   <!-- The current version number of this component -->
   <property name="component.fullname"      value="${component.name}-${component.version}"/>
diff --git a/JodaTime/project.xml b/JodaTime/project.xml
index 4bbf5c54b..63d14459f 100644
--- a/JodaTime/project.xml
+++ b/JodaTime/project.xml
@@ -7,7 +7,7 @@
   <id>joda-time</id>
   <name>Joda time</name>
   <groupId>joda-time</groupId>
-  <currentVersion>1.1-dev</currentVersion>
+  <currentVersion>1.1</currentVersion>
   <organization>
     <name>Joda.org</name>
     <url>http://www.joda.org</url>
diff --git a/JodaTime/src/conf/MANIFEST.MF b/JodaTime/src/conf/MANIFEST.MF
index 62e746532..c3fd588f0 100644
--- a/JodaTime/src/conf/MANIFEST.MF
+++ b/JodaTime/src/conf/MANIFEST.MF
@@ -1,7 +1,7 @@
 Extension-Name: @name@
 Specification-Title: Joda Time
 Specification-Vendor: Joda.org
-Specification-Version: 1.0
+Specification-Version: 1.1
 Implementation-Vendor: Joda.org
 Implementation-Title: org.joda.time
 Implementation-Version: @version@
diff --git a/JodaTime/xdocs/index.xml b/JodaTime/xdocs/index.xml
index c2d4cc1c5..64ab188f2 100644
--- a/JodaTime/xdocs/index.xml
+++ b/JodaTime/xdocs/index.xml
@@ -35,7 +35,7 @@ public boolean isBirthdayInLeapYear(<b>YearMonthDay</b> dateOfBirth) {
   return dateOfBirth.year().isLeap();
 }
 </source>
-Version 1.1 was released on 2005-08-dd -
+Version 1.1 was released on 2005-08-10 -
 <a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=104212">Download now</a>
 </p>
 </section>
diff --git a/JodaTime/xdocs/installation.xml b/JodaTime/xdocs/installation.xml
index 4b743e92f..2eec5e338 100644
--- a/JodaTime/xdocs/installation.xml
+++ b/JodaTime/xdocs/installation.xml
@@ -14,15 +14,6 @@ To use Joda-Time you need to
 <a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=104212">download the latest version</a>.
 The download will contain the joda-time-1.1.jar. Once you add this to your classpath you will be able to use Joda-Time.
 </p>
-<!--<p>
-As from v1.1 we release three versions:
-<ul>
-<li>ide - the recommended download for most Eclipse/IDEA/NetBeans users.
-  This contains the binary jar file and a zip of the java source files to attach within your IDE classpath.</li>
-<li>bin - the classic binary release, with the jar file and javadocs</li>
-<li>src - the classic source release, with the jar file and all source files</li>
-</ul>
-</p>-->
 <p>
 The release notes for upgraders can be found here:
 <ul>
diff --git a/JodaTime/xdocs/upgradeto110.xml b/JodaTime/xdocs/upgradeto110.xml
index 1ed7576d7..c2feb04ef 100644
--- a/JodaTime/xdocs/upgradeto110.xml
+++ b/JodaTime/xdocs/upgradeto110.xml
@@ -32,8 +32,10 @@ of restrictions. If the license cause you problems please contact the mailing li
 Incompatible changes since 1.0
 ------------------------------
 Binary compatible - Yes
+  - v1.0 and v1.1 are binary compatible in their public and protected API
 
 Source compatible - Yes
+  - v1.0 and v1.1 are source compatible in their public and protected API
 
 Serialization compatible - Yes, except:
   - DateTime.Property, DateMidnight.Property and MutableDateTime.Property
@@ -189,7 +191,6 @@ Enhancements since 1.0
   New methods to output ordinal style dates, such as 2005-161.
 
 - DateTimeZone classes updated to latest data from the Olson time zone database
-
 </source>
 </p>
 </section>

From 6eb9bf0265bc3d7d9fdb8791f8463c7b4e3f7b12 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 10 Aug 2005 23:17:08 +0000
Subject: [PATCH 124/124] Update for v1.1

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@856 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/project.xml | 1 +
 1 file changed, 1 insertion(+)

diff --git a/JodaTime/project.xml b/JodaTime/project.xml
index 63d14459f..bf18234dc 100644
--- a/JodaTime/project.xml
+++ b/JodaTime/project.xml
@@ -157,6 +157,7 @@
      <report>maven-changes-plugin</report>
      <report>maven-checkstyle-plugin</report>
      <!-- <report>maven-clover-plugin</report> -->
+     <report>maven-jdiff-plugin</report>
      <report>maven-jcoverage-plugin</report>
      <report>maven-developer-activity-plugin</report>
      <report>maven-file-activity-plugin</report>