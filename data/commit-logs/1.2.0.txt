From 6e7e7d68e208f51eb7d8ce9207788736daac2eeb Mon Sep 17 00:00:00 2001
From: Mario Ivankovits <mario@ops.co.at>
Date: Wed, 17 Aug 2005 20:20:18 +0000
Subject: [PATCH 001/130] add: PersistentTimeOfDay (might loose milliseconds
 part) add: PersistentTimeOfDayExact (use int to store the full time)

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@858 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../hibernate/PersistentTimeOfDay.java        | 153 ++++++++++++++++++
 .../hibernate/PersistentTimeOfDayExact.java   | 153 ++++++++++++++++++
 .../contrib/hibernate/HibernateTestCase.java  |   8 +-
 .../joda/time/contrib/hibernate/Schedule.java |  25 ++-
 .../hibernate/TestPersistentDateTime.java     |   4 +-
 .../hibernate/TestPersistentTimeOfDay.java    |  71 ++++++++
 .../TestPersistentTimeOfDayExact.java         |  60 +++++++
 .../hibernate/TestPersistentYearMonthDay.java |   4 +-
 .../time/contrib/hibernate/schedule.hbm.xml   |   6 +-
 9 files changed, 477 insertions(+), 7 deletions(-)
 create mode 100644 JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentTimeOfDay.java
 create mode 100644 JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentTimeOfDayExact.java
 create mode 100644 JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentTimeOfDay.java
 create mode 100644 JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentTimeOfDayExact.java

diff --git a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentTimeOfDay.java b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentTimeOfDay.java
new file mode 100644
index 000000000..72dd180f2
--- /dev/null
+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentTimeOfDay.java
@@ -0,0 +1,153 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.contrib.hibernate;
+
+import org.hibernate.Hibernate;
+import org.hibernate.HibernateException;
+import org.hibernate.usertype.EnhancedUserType;
+import org.joda.time.YearMonthDay;
+import org.joda.time.TimeOfDay;
+import org.joda.time.DateTime;
+
+import java.io.Serializable;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Types;
+import java.sql.Time;
+
+/**
+ * Persist {@link org.joda.time.TimeOfDay} via hibernate. <br />
+ * This uses java.sql.Time and the time datatype of your database. <br />
+ * Notice: You might loose the milliseconds part.
+ *
+ * @author Mario Ivankovits (mario@ops.co.at)
+ */
+public class PersistentTimeOfDay implements EnhancedUserType
+{
+	private final DateTime timeBase = new DateTime(1970, 1, 1, 0, 0, 0, 0);
+	public final static PersistentTimeOfDay INSTANCE = new PersistentTimeOfDay();
+
+	private static final int[] SQL_TYPES = new int[]
+	{
+		Types.TIME,
+	};
+
+	public int[] sqlTypes()
+	{
+		return SQL_TYPES;
+	}
+
+	public Class returnedClass()
+	{
+		return TimeOfDay.class;
+	}
+
+	public boolean equals(Object x, Object y) throws HibernateException
+	{
+		if (x == y)
+		{
+			return true;
+		}
+		if (x == null || y == null)
+		{
+			return false;
+		}
+		TimeOfDay dtx = (TimeOfDay) x;
+		TimeOfDay dty = (TimeOfDay) y;
+
+		return dtx.equals(dty);
+	}
+
+	public int hashCode(Object object) throws HibernateException
+	{
+		return object.hashCode();
+	}
+
+	public Object nullSafeGet(ResultSet resultSet, String[] strings, Object object) throws HibernateException, SQLException
+	{
+		return nullSafeGet(resultSet, strings[0]);
+
+	}
+
+	public Object nullSafeGet(ResultSet resultSet, String string) throws SQLException
+	{
+		Object date = Hibernate.TIME.nullSafeGet(resultSet, string);
+		if (date == null)
+		{
+			return null;
+		}
+
+		return new TimeOfDay(date);
+	}
+
+	public void nullSafeSet(PreparedStatement preparedStatement, Object value, int index) throws HibernateException, SQLException
+	{
+		if (value == null)
+		{
+			Hibernate.TIME.nullSafeSet(preparedStatement, null, index);
+		}
+		else
+		{
+			Hibernate.TIME.nullSafeSet(preparedStatement, new Time(((TimeOfDay) value).toDateTime(timeBase).getMillis()), index);
+		}
+	}
+
+	public Object deepCopy(Object value) throws HibernateException
+	{
+		if (value == null)
+		{
+			return null;
+		}
+
+		return new TimeOfDay(value);
+	}
+
+	public boolean isMutable()
+	{
+		return false;
+	}
+
+	public Serializable disassemble(Object value) throws HibernateException
+	{
+		return (Serializable) value;
+	}
+
+	public Object assemble(Serializable cached, Object value) throws HibernateException
+	{
+		return cached;
+	}
+
+	public Object replace(Object original, Object target, Object owner) throws HibernateException
+	{
+		return original;
+	}
+
+	public String objectToSQLString(Object object)
+	{
+		throw new UnsupportedOperationException();
+	}
+
+	public String toXMLString(Object object)
+	{
+		return object.toString();
+	}
+
+	public Object fromXMLString(String string)
+	{
+		return new TimeOfDay(string);
+	}
+}
diff --git a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentTimeOfDayExact.java b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentTimeOfDayExact.java
new file mode 100644
index 000000000..36611c8c0
--- /dev/null
+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentTimeOfDayExact.java
@@ -0,0 +1,153 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.contrib.hibernate;
+
+import org.hibernate.Hibernate;
+import org.hibernate.HibernateException;
+import org.hibernate.usertype.EnhancedUserType;
+import org.joda.time.YearMonthDay;
+import org.joda.time.TimeOfDay;
+import org.joda.time.DateTime;
+
+import java.io.Serializable;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Types;
+import java.sql.Time;
+
+/**
+ * Persist {@link org.joda.time.TimeOfDay} via hibernate.<br />
+ * This uses a simple integer to store the time as milliseconds since 1970-1-1. <br />
+ * The milliseconds will survive.
+ *
+ * @author Mario Ivankovits (mario@ops.co.at)
+ */
+public class PersistentTimeOfDayExact implements EnhancedUserType
+{
+	private final DateTime timeBase = new DateTime(1970, 1, 1, 0, 0, 0, 0);
+	public final static PersistentTimeOfDayExact INSTANCE = new PersistentTimeOfDayExact();
+
+	private static final int[] SQL_TYPES = new int[]
+	{
+		Types.INTEGER,
+	};
+
+	public int[] sqlTypes()
+	{
+		return SQL_TYPES;
+	}
+
+	public Class returnedClass()
+	{
+		return TimeOfDay.class;
+	}
+
+	public boolean equals(Object x, Object y) throws HibernateException
+	{
+		if (x == y)
+		{
+			return true;
+		}
+		if (x == null || y == null)
+		{
+			return false;
+		}
+		TimeOfDay dtx = (TimeOfDay) x;
+		TimeOfDay dty = (TimeOfDay) y;
+
+		return dtx.equals(dty);
+	}
+
+	public int hashCode(Object object) throws HibernateException
+	{
+		return object.hashCode();
+	}
+
+	public Object nullSafeGet(ResultSet resultSet, String[] strings, Object object) throws HibernateException, SQLException
+	{
+		return nullSafeGet(resultSet, strings[0]);
+
+	}
+
+	public Object nullSafeGet(ResultSet resultSet, String string) throws SQLException
+	{
+		int value = resultSet.getInt(string);
+		if (resultSet.wasNull())
+		{
+			return null;
+		}
+
+		return new TimeOfDay(value);
+	}
+
+	public void nullSafeSet(PreparedStatement preparedStatement, Object value, int index) throws HibernateException, SQLException
+	{
+		if (value == null)
+		{
+			preparedStatement.setNull(index, SQL_TYPES[0]);
+		}
+		else
+		{
+			preparedStatement.setInt(index, (int) ((TimeOfDay) value).toDateTime(timeBase).getMillis());
+		}
+	}
+
+	public Object deepCopy(Object value) throws HibernateException
+	{
+		if (value == null)
+		{
+			return null;
+		}
+
+		return new TimeOfDay(value);
+	}
+
+	public boolean isMutable()
+	{
+		return false;
+	}
+
+	public Serializable disassemble(Object value) throws HibernateException
+	{
+		return (Serializable) value;
+	}
+
+	public Object assemble(Serializable cached, Object value) throws HibernateException
+	{
+		return cached;
+	}
+
+	public Object replace(Object original, Object target, Object owner) throws HibernateException
+	{
+		return original;
+	}
+
+	public String objectToSQLString(Object object)
+	{
+		throw new UnsupportedOperationException();
+	}
+
+	public String toXMLString(Object object)
+	{
+		return object.toString();
+	}
+
+	public Object fromXMLString(String string)
+	{
+		return new TimeOfDay(string);
+	}
+}
diff --git a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/HibernateTestCase.java b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/HibernateTestCase.java
index a0da2be8e..9926dcddc 100644
--- a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/HibernateTestCase.java
+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/HibernateTestCase.java
@@ -19,7 +19,7 @@ protected SessionFactory getSessionFactory()
 			setupConfiguration(cfg);
 
 			cfg.setProperty("hibernate.connection.driver_class", "org.hsqldb.jdbcDriver");
-			cfg.setProperty("hibernate.connection.url", "jdbc:hsqldb:mem:hbmtest");
+			cfg.setProperty("hibernate.connection.url", "jdbc:hsqldb:mem:hbmtest" + getClass().getName());
 			cfg.setProperty("hibernate.dialect", HSQLDialect.class.getName());
 
 			cfg.setProperty("hibernate.show_sql", "true");
@@ -33,5 +33,11 @@ protected SessionFactory getSessionFactory()
 		return factory;
 	}
 
+	protected void tearDown() throws Exception
+	{
+		this.factory.close();
+		this.factory = null;
+	}
+
 	protected abstract void setupConfiguration(Configuration cfg);
 }
diff --git a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/Schedule.java b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/Schedule.java
index c346f3776..faf395377 100644
--- a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/Schedule.java
+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/Schedule.java
@@ -1,6 +1,7 @@
 package org.joda.time.contrib.hibernate;
 
 import org.joda.time.YearMonthDay;
+import org.joda.time.TimeOfDay;
 
 import java.io.Serializable;
 
@@ -11,8 +12,10 @@
 {
     private int id;
     private YearMonthDay startDate;
+	private TimeOfDay nextTime;
+	private TimeOfDay nextTimeMillis;
 
-    public Schedule()
+	public Schedule()
     {
     }
 
@@ -35,4 +38,24 @@ public void setStartDate(YearMonthDay startDate)
 	{
 		this.startDate = startDate;
 	}
+
+	public TimeOfDay getNextTime()
+	{
+		return nextTime;
+	}
+
+	public void setNextTime(TimeOfDay nextTime)
+	{
+		this.nextTime = nextTime;
+	}
+
+	public TimeOfDay getNextTimeMillis()
+	{
+		return nextTimeMillis;
+	}
+
+	public void setNextTimeMillis(TimeOfDay nextTimeMillis)
+	{
+		this.nextTimeMillis = nextTimeMillis;
+	}
 }
diff --git a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentDateTime.java b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentDateTime.java
index 3a3b9b5f9..3fa8cee11 100644
--- a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentDateTime.java
+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentDateTime.java
@@ -90,9 +90,9 @@ public void testStoreWithTimezone() throws SQLException
 
             assertEquals("get failed - returned different time",
                 writeReadTime, eventReread.getDateTime());
-
-            session.close();
         }
+		
+		session.close();
     }
 
 	protected void setupConfiguration(Configuration cfg)
diff --git a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentTimeOfDay.java b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentTimeOfDay.java
new file mode 100644
index 000000000..b97f1a870
--- /dev/null
+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentTimeOfDay.java
@@ -0,0 +1,71 @@
+package org.joda.time.contrib.hibernate;
+
+import org.hibernate.Session;
+import org.hibernate.SessionFactory;
+import org.hibernate.cfg.Configuration;
+import org.joda.time.TimeOfDay;
+
+import java.io.File;
+import java.sql.SQLException;
+
+public class TestPersistentTimeOfDay extends HibernateTestCase
+{
+    private TimeOfDay[] writeReadTimes = new TimeOfDay[]
+    {
+        new TimeOfDay(12, 10, 31),
+        new TimeOfDay(23,  7, 43, 120)
+    };
+
+    public void testSimpleStore() throws SQLException
+    {
+        SessionFactory factory = getSessionFactory();
+
+        Session session = factory.openSession();
+
+        for (int i = 0; i<writeReadTimes.length; i++)
+        {
+            TimeOfDay writeReadTime = writeReadTimes[i];
+
+            Schedule event = new Schedule();
+            event.setId(i);
+            event.setNextTime(writeReadTime);
+
+            session.save(event);
+        }
+
+        session.flush();
+        session.connection().commit();
+        session.close();
+
+        for (int i = 0; i<writeReadTimes.length; i++)
+        {
+            TimeOfDay writeReadTime = writeReadTimes[i];
+
+            session = factory.openSession();
+            Schedule eventReread = (Schedule) session.get(Schedule.class, new Integer(i));
+
+            assertNotNull("get failed - event#'" + i + "'not found", eventReread);
+            assertNotNull("get failed - returned null", eventReread.getNextTime());
+
+			TimeOfDay reReadTime = eventReread.getNextTime();
+			if (writeReadTime.getHourOfDay() != reReadTime.getHourOfDay() ||
+				writeReadTime.getMinuteOfHour() != reReadTime.getMinuteOfHour() ||
+				writeReadTime.getSecondOfMinute() != reReadTime.getSecondOfMinute())
+			{
+				fail("get failed - returned different date. expected " + writeReadTime + " was " + eventReread.getNextTime());
+			}
+
+			if (writeReadTime.getMillisOfSecond() != reReadTime.getMillisOfSecond())
+			{
+				System.out.println("millis different, might happen?");
+			}
+		}
+
+		session.close();
+    }
+
+	protected void setupConfiguration(Configuration cfg)
+	{
+		cfg.addFile(new File("src/test/org/joda/time/contrib/hibernate/schedule.hbm.xml"));
+	}
+}
diff --git a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentTimeOfDayExact.java b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentTimeOfDayExact.java
new file mode 100644
index 000000000..6fe259290
--- /dev/null
+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentTimeOfDayExact.java
@@ -0,0 +1,60 @@
+package org.joda.time.contrib.hibernate;
+
+import org.hibernate.Session;
+import org.hibernate.SessionFactory;
+import org.hibernate.cfg.Configuration;
+import org.joda.time.TimeOfDay;
+
+import java.io.File;
+import java.sql.SQLException;
+
+public class TestPersistentTimeOfDayExact extends HibernateTestCase
+{
+    private TimeOfDay[] writeReadTimes = new TimeOfDay[]
+    {
+        new TimeOfDay(12, 10, 31),
+        new TimeOfDay(23,  7, 43, 120)
+    };
+
+    public void testSimpleStore() throws SQLException
+    {
+        SessionFactory factory = getSessionFactory();
+
+        Session session = factory.openSession();
+
+        for (int i = 0; i<writeReadTimes.length; i++)
+        {
+            TimeOfDay writeReadTime = writeReadTimes[i];
+
+            Schedule event = new Schedule();
+            event.setId(i);
+            event.setNextTimeMillis(writeReadTime);
+
+            session.save(event);
+        }
+
+        session.flush();
+        session.connection().commit();
+        session.close();
+
+        for (int i = 0; i<writeReadTimes.length; i++)
+        {
+            TimeOfDay writeReadTime = writeReadTimes[i];
+
+            session = factory.openSession();
+            Schedule eventReread = (Schedule) session.get(Schedule.class, new Integer(i));
+
+            assertNotNull("get failed - event#'" + i + "'not found", eventReread);
+            assertNotNull("get failed - returned null", eventReread.getNextTimeMillis());
+
+			assertEquals("get failed - returned different date.", writeReadTime, eventReread.getNextTimeMillis());
+		}
+
+		session.close();
+    }
+
+	protected void setupConfiguration(Configuration cfg)
+	{
+		cfg.addFile(new File("src/test/org/joda/time/contrib/hibernate/schedule.hbm.xml"));
+	}
+}
diff --git a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentYearMonthDay.java b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentYearMonthDay.java
index 7d8f5ec70..f1a36ebe7 100644
--- a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentYearMonthDay.java
+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentYearMonthDay.java
@@ -48,9 +48,9 @@ public void testSimpleStore() throws SQLException
             assertNotNull("get failed - returned null", eventReread.getStartDate());
 
             assertEquals("get failed - returned different date", writeReadTime, eventReread.getStartDate());
-
-            session.close();
         }
+		
+		session.close();
     }
 
 	protected void setupConfiguration(Configuration cfg)
diff --git a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/schedule.hbm.xml b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/schedule.hbm.xml
index 455964b7a..d0cbb236d 100644
--- a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/schedule.hbm.xml
+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/schedule.hbm.xml
@@ -9,8 +9,12 @@
 
                 <id name="id" />
 
-                <property type="org.joda.time.contrib.hibernate.PersistentYearMonthDay" name="startDate"/>
 
+				<property type="org.joda.time.contrib.hibernate.PersistentYearMonthDay" name="startDate"/>
+
+				<property type="org.joda.time.contrib.hibernate.PersistentTimeOfDay" name="nextTime"/>
+
+				<property type="org.joda.time.contrib.hibernate.PersistentTimeOfDayExact" name="nextTimeMillis"/>
         </class>
 
 </hibernate-mapping>

From c53a954642fca50544559b0e26ecbb335307028a Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 17 Aug 2005 20:48:32 +0000
Subject: [PATCH 002/130] Fix invalid xml

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@859 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/project.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/JodaTime/project.xml b/JodaTime/project.xml
index bf18234dc..7cd61d395 100644
--- a/JodaTime/project.xml
+++ b/JodaTime/project.xml
@@ -99,7 +99,7 @@
   <contributors>
     <contributor>
       <name>Guy Allard</name>
-    </contributor>Fredrik Borgh
+    </contributor>
     <contributor>
       <name>Fredrik Borgh</name>
     </contributor>

From 20f77358a3518552007950ffaef5f1ae6713d9f7 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 17 Aug 2005 20:51:04 +0000
Subject: [PATCH 003/130] Move from 1.1 to 1.2

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@860 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt | 152 +++----------------------------------
 JodaTime/build.xml         |   2 +-
 JodaTime/project.xml       |   2 +-
 3 files changed, 11 insertions(+), 145 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index d5af7073a..828d8454c 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -1,10 +1,10 @@
-Joda-Time version 1.1
+Joda-Time version 1.2
 ---------------------
 
 Joda-Time is a date and time handling library that seeks to replace the JDK
 Date and Calendar classes.
 
-This is the second full release of Joda-Time.
+This is the third full release of Joda-Time.
 
 We recommend JDK 1.3 or later, and have performed no testing on earlier JDKs.
 
@@ -14,7 +14,7 @@ The intent is to make the code available to the Java community with the minimum
 of restrictions. If the license cause you problems please contact the mailing list.
 
 
-Incompatible changes since 1.0
+Incompatible changes since 1.1
 ------------------------------
 Binary compatible - Yes
   - v1.0 and v1.1 are binary compatible in their public and protected API
@@ -22,160 +22,26 @@ Binary compatible - Yes
 Source compatible - Yes
   - v1.0 and v1.1 are source compatible in their public and protected API
 
-Serialization compatible - Yes, except:
-  - DateTime.Property, DateMidnight.Property and MutableDateTime.Property
-   serialization formats have changed to fix a bug.
-    Please note that this only affects the property classes, and not DateTime,
-   DateMidnight or MutableDateTime themselves
-    It is unlikely that you serialized one of these classes
+Serialization compatible - Yes
 
-Data compatible - Yes, except:
-  - Removed time zones Asia/Riyadh87, Asia/Riyadh88 and Asia/Riyadh89.
-   These should not have been included in the 1.0 release, and do not represent
-   genuine time zones. It is unlikely that you used them.
-   If you do want to use them, please contact joda-interest@lists.sourceforge.net
+Data compatible - Yes
 
 
-Warnings since 1.0
+Warnings since 1.1
 ------------------
-ReadablePartial now has a comment recommending that all implementations
-should also implement Comparable.
-This is most easily achieved by extending AbstractPartial.
 
 
-Deprecations since 1.0
+Deprecations since 1.1
 ----------------------
 None
 
 
-Bug fixes since 1.0
+Bug fixes since 1.1
 -------------------
-- Date and Time (ZoneInfoCompiler)
-  Greek summer time was incorrect due to a comment parsing bug.
-  This disabled DST (summer time) for Europe/Athens after 1980.
 
-- DateTimeFormat
-  Parsing of two digit year by DateTimeFormat supports parsing of more or less
-  than two digits, for compatibility with java.text.SimpleDateFormat. If not
-  two digits or if sign character is present, then year is parsed as absolute.
 
-- GJChronology
-  Range duration field of dayOfMonth was not consistent with monthOfYear. This
-  bug manifested itself when adding/subtracting periods to partials.
-
-- DateTimeParserBucket
-  Fixed parsing date where format includes era. Era must be set and rounded
-  before any other fields.
-
-- PeriodFormatterBuilder
-  Formatters that had fields which required a zero to be printed were not being
-  parsed.
-
-- DateTime.Property, DateMidnight.Property and MutableDateTime.Property
-  Could previously only be serialized in UTC.
-  The serialization format has been changed to be simpler and more reliable.
-  Unfortunately, this was an incompatible change to the serialization format.
-
-- DateTimeFormatterBuilder/PeriodFormatterBuilder
-  Number parser would accept multiple sign characters as valid.
-
-- YearMonthDay/TimeOfDay.withChronologyRetainFields
-  Previously, switching chronology did not validate the fields, so you could
-  end up with an object in an invalid state, such as a YearMonthDay where
-  dayOfMonth=31 with Coptic.
-  This method can now throw an IllegalArgumentException
-
-- Chronologies
-  Overflowed calculations involving year throw ArithmeticException rather than
-  produce a bogus result.
-
-- DateTimeFormatterBuilder.canBuildFormatter()
-  Previously this method always returned false.
-
-
-Enhancements since 1.0
+Enhancements since 1.1
 ----------------------
-- Partial
-  New immutable implementation of ReadablePartial.
-  This implementation is flexible as to the fields that it stores.
-  Thus, if you want a partial holding just a year and monthOfYear (perhaps
-  for a credit card expiry date), then this class can be used.
-  Full support for almost all truncated and reduced precision ISO output
-  formats is available via use of this class.
-
-- DateTime/DateMidnight/MutableDateTime/YearMonthDay/TimeOfDay
-  Added convenience plusXxx() and minusXxx() methods to add/subtract a period
-  For example, dt.plus(Period.days(6)) can now be replaced by dt.plusDays(6)
-
-- DateTime/DateMidnight/MutableDateTime/YearMonthDay/TimeOfDay
-  Added convenience toString() method that takes a DateTimeFormatter
-  For example, dt.toString(DateTimeFormat.shortDateTime())
-
-- YearMonthDay/TimeOfDay/AbstractPartial
-  Enabled comparisons using Comparable interface
-  Added compareTo/isEqual/isAfter/isBefore methods
-  These methods were added to AbstractPartial, and are thus available to
-  all implementations of ReadablePartial
-
-- YearMonthDay/TimeOfDay
-  Extra time zone constructor
-  Allows current date and time to be accurately obtained
-
-- DateTime/DateMidnight/MutableDateTime/YearMonthDay/TimeOfDay Property
-  Added new method to property class - getAsString()
-  Gets the value as a string, not using text values like 'Monday' or 'January'
-
-- Period
-  Added constructors to create a Period from two ReadablePartials, such as
-  YearMonthDay or TimeOfDay
-
-- Period
-  Added factory to create a Period from two ReadablePartials using an
-  alternative, field-based, calculation
-
-- DateTimeUtils
-  Added isContiguous(ReadablePartial) to test if a partial is contiguous
-  (see the method for the definition)
-
-- PeriodType
-  Added factory method forFields() to allow a PeriodType to be obtained
-  from any set of DurationFieldType objects
-
-- PeriodType
-  Added three new period types - YearMonthDay, YearWeekDay and YearDay
-  These complement the existing ones but exclude the time fields.
-
-- DateTimeFormatter
-  Method withPivotYear added to allow the two digit pivot year to be controlled.
-  This is most useful after creating a format from a string pattern.
-
-- DateTimeFormatter
-  Added lenient parse option to appendTwoDigitYear and appendTwoDigitWeekyear.
-
-- Interval
-  Added overlap method that returns the actual overlap between two intervals.
-  Added gap method that returns the gap between two intervals.
-  Added abuts method that returns true if two intervals abut.
-
-- DateTimeUtils
-  Added getReadableInterval(ReadableInterval) method to handle null intervals
-
-- IllegalFieldValueException
-  Added new exception subclass of IllegalArgumentException to capture more
-  context when a field is set to an illegal value. This can be helpful in
-  interactive applications.
-
-- GJLocaleSymbols
-  Supports parsing "CE" and "BCE" as era if locale language is English.
-
-- ISODateTimeFormat
-  New method, forFields(), which gets an ISO format for a set of fields.
-  This is useful for more unusual formats such as DayHour.
-
-- ISODateTimeFormat
-  New methods to output ordinal style dates, such as 2005-161.
-
-- DateTimeZone classes updated to latest data from the Olson time zone database
 
 
 Feedback
diff --git a/JodaTime/build.xml b/JodaTime/build.xml
index fab6efa75..2e7d79d4b 100644
--- a/JodaTime/build.xml
+++ b/JodaTime/build.xml
@@ -27,7 +27,7 @@
   <property name="component.title"         value="Joda date and time"/>
 
   <!-- The current version number of this component -->
-  <property name="component.version"       value="1.1"/>
+  <property name="component.version"       value="1.2-dev"/>
 
   <!-- The current version number of this component -->
   <property name="component.fullname"      value="${component.name}-${component.version}"/>
diff --git a/JodaTime/project.xml b/JodaTime/project.xml
index 7cd61d395..f51fd69e1 100644
--- a/JodaTime/project.xml
+++ b/JodaTime/project.xml
@@ -7,7 +7,7 @@
   <id>joda-time</id>
   <name>Joda time</name>
   <groupId>joda-time</groupId>
-  <currentVersion>1.1</currentVersion>
+  <currentVersion>1.2-dev</currentVersion>
   <organization>
     <name>Joda.org</name>
     <url>http://www.joda.org</url>

From aab3dfbd40e9e22755a376bdd2aa2af88ba356ac Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 17 Aug 2005 22:07:26 +0000
Subject: [PATCH 004/130] Reformat classes to Joda-Time codeing standards

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@861 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../contrib/jsptag/DateTimeZoneSupport.java   |  192 +--
 .../time/contrib/jsptag/DateTimeZoneTag.java  |   17 +-
 .../time/contrib/jsptag/FormatSupport.java    |  192 +--
 .../joda/time/contrib/jsptag/FormatTag.java   |  107 +-
 .../jsptag/JodaTagLibraryValidator.java       |  722 +++++-----
 .../contrib/jsptag/ParseDateTimeSupport.java  |  218 ++--
 .../time/contrib/jsptag/ParseDateTimeTag.java |  109 +-
 .../joda/time/contrib/jsptag/Resources.java   |   25 +-
 .../jsptag/SetDateTimeZoneSupport.java        |  102 +-
 .../contrib/jsptag/SetDateTimeZoneTag.java    |   22 +-
 .../org/joda/time/contrib/jsptag/Util.java    | 1159 ++++++++---------
 11 files changed, 1427 insertions(+), 1438 deletions(-)

diff --git a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/DateTimeZoneSupport.java b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/DateTimeZoneSupport.java
index e298b196c..b60863f19 100644
--- a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/DateTimeZoneSupport.java
+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/DateTimeZoneSupport.java
@@ -13,8 +13,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */ 
-
+ */
 package org.joda.time.contrib.jsptag;
 
 import java.io.IOException;
@@ -30,107 +29,108 @@
 
 /**
  * Support for tag handlers for &lt;timeZone&gt;.
+ * 
  * @author Jan Luehe
  * @author Jim Newsham
  */
 public abstract class DateTimeZoneSupport extends BodyTagSupport {
-  public static final String FMT_TIME_ZONE = "org.joda.time.dateTimeZone";
-
-  protected Object value;                      // 'value' attribute
-  private DateTimeZone dateTimeZone;
-
-  public DateTimeZoneSupport() {
-    super();
-    init();
-  }
-
-  private void init() {
-    value = null;
-  }
-
-  public DateTimeZone getDateTimeZone() {
-    return dateTimeZone;
-  }
-
-
-  public int doStartTag() throws JspException {
-    if (value == null) {
-      dateTimeZone = DateTimeZone.UTC;
-    } 
-    else if (value instanceof String) {
-      try {
-        dateTimeZone = DateTimeZone.forID((String) value);
-      }
-      catch(IllegalArgumentException iae) {
-        dateTimeZone = DateTimeZone.UTC;
-      }
+
+    /** The config key for the time zone. */
+    public static final String FMT_TIME_ZONE = "org.joda.time.dateTimeZone";
+
+    /** The value attribute. */
+    protected Object value;
+
+    /** The zone. */
+    private DateTimeZone dateTimeZone;
+
+    /**
+     * Constructor.
+     */
+    public DateTimeZoneSupport() {
+        super();
+        init();
     }
-    else {
-      dateTimeZone = (DateTimeZone) value;
+
+    private void init() {
+        value = null;
     }
-    return EVAL_BODY_BUFFERED;
-  }
-
-  public int doEndTag() throws JspException {
-    try {
-      pageContext.getOut().print(bodyContent.getString());
-    } 
-    catch (IOException ioe) {
-      throw new JspTagException(ioe.toString(), ioe);
+
+    public DateTimeZone getDateTimeZone() {
+        return dateTimeZone;
     }
-    return EVAL_PAGE;
-  }
-
-  // Releases any resources we may have (or inherit)
-  public void release() {
-    init();
-  }
-
-  /*
-  * Determines and returns the time zone to be used by the given action.
-  *
-  * <p> If the given action is nested inside a &lt;dateTimeZone&gt; action,
-  * the time zone is taken from the enclosing &lt;dateTimeZone&gt; action.
-  *
-  * <p> Otherwise, the time zone configuration setting
-  * <tt>org.joda.time.FMT_TIME_ZONE</tt> is used.
-  *
-  * @param pageContext the page containing the action for which the
-  * time zone needs to be determined
-  * @param fromTag the action for which the time zone needs to be
-  * determined
-  *
-  * @return the time zone, or <tt>null</tt> if the given action is not 
-  * nested inside a &lt;dateTimeZone&gt; action and no time zone configuration
-  * setting exists
-  */
-  static DateTimeZone getDateTimeZone(PageContext pc, Tag fromTag) {
-    DateTimeZone tz = null;
-
-    Tag t = findAncestorWithClass(fromTag, DateTimeZoneSupport.class);
-    if (t != null) {
-      // use time zone from parent <timeZone> tag
-      DateTimeZoneSupport parent = (DateTimeZoneSupport) t;
-      tz = parent.getDateTimeZone();
-    } 
-    else {
-      // get time zone from configuration setting
-      Object obj = Config.find(pc, FMT_TIME_ZONE);
-      if (obj != null) {
-        if (obj instanceof DateTimeZone) {
-          tz = (DateTimeZone) obj;
-        } 
-        else {
-          try {
-            tz = DateTimeZone.forID((String) obj);
-          }
-          catch(IllegalArgumentException iae) {
-            tz = DateTimeZone.UTC;
-          }
+
+    public int doStartTag() throws JspException {
+        if (value == null) {
+            dateTimeZone = DateTimeZone.UTC;
+        } else if (value instanceof String) {
+            try {
+                dateTimeZone = DateTimeZone.forID((String) value);
+            } catch (IllegalArgumentException iae) {
+                dateTimeZone = DateTimeZone.UTC;
+            }
+        } else {
+            dateTimeZone = (DateTimeZone) value;
         }
-      }
+        return EVAL_BODY_BUFFERED;
     }
-    
-    return tz;
-  }
+
+    public int doEndTag() throws JspException {
+        try {
+            pageContext.getOut().print(bodyContent.getString());
+        } catch (IOException ioe) {
+            throw new JspTagException(ioe.toString(), ioe);
+        }
+        return EVAL_PAGE;
+    }
+
+    // Releases any resources we may have (or inherit)
+    public void release() {
+        init();
+    }
+
+    /**
+     * Determines and returns the time zone to be used by the given action.
+     * <p>
+     * If the given action is nested inside a &lt;dateTimeZone&gt; action,
+     * the time zone is taken from the enclosing &lt;dateTimeZone&gt; action.
+     * <p>
+     * Otherwise, the time zone configuration setting
+     * <tt>org.joda.time.FMT_TIME_ZONE</tt> is used.
+     * 
+     * @param pageContext  the page containing the action for which the time zone
+     *  needs to be determined
+     * @param fromTag  the action for which the time zone needs to be determined
+     * 
+     * @return the time zone, or <tt> null </tt> if the given action is not
+     * nested inside a &lt;dateTimeZone&gt; action and no time zone configuration
+     * setting exists
+     */
+    static DateTimeZone getDateTimeZone(PageContext pc, Tag fromTag) {
+        DateTimeZone tz = null;
+
+        Tag t = findAncestorWithClass(fromTag, DateTimeZoneSupport.class);
+        if (t != null) {
+            // use time zone from parent <timeZone> tag
+            DateTimeZoneSupport parent = (DateTimeZoneSupport) t;
+            tz = parent.getDateTimeZone();
+        } else {
+            // get time zone from configuration setting
+            Object obj = Config.find(pc, FMT_TIME_ZONE);
+            if (obj != null) {
+                if (obj instanceof DateTimeZone) {
+                    tz = (DateTimeZone) obj;
+                } else {
+                    try {
+                        tz = DateTimeZone.forID((String) obj);
+                    } catch (IllegalArgumentException iae) {
+                        tz = DateTimeZone.UTC;
+                    }
+                }
+            }
+        }
+
+        return tz;
+    }
+
 }
diff --git a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/DateTimeZoneTag.java b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/DateTimeZoneTag.java
index 9a096bb45..6b4081a99 100644
--- a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/DateTimeZoneTag.java
+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/DateTimeZoneTag.java
@@ -13,23 +13,22 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */ 
-
+ */
 package org.joda.time.contrib.jsptag;
 
 import javax.servlet.jsp.JspTagException;
 
 /**
- * <p>A handler for &lt;dateTimeZone&gt.
+ * A handler for &lt;dateTimeZone&gt.
+ * 
  * @author Jan Luehe
  * @author Jim Newsham
  */
-
 public class DateTimeZoneTag extends DateTimeZoneSupport {
 
-  // for tag attribute
-  public void setValue(Object value) throws JspTagException {
-    this.value = value;
-  }
-  
+    // for tag attribute
+    public void setValue(Object value) throws JspTagException {
+        this.value = value;
+    }
+
 }
diff --git a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/FormatSupport.java b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/FormatSupport.java
index dc8860d51..96da2526a 100644
--- a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/FormatSupport.java
+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/FormatSupport.java
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */ 
-
 package org.joda.time.contrib.jsptag;
 
 import java.io.IOException;
@@ -35,115 +34,118 @@
 /**
  * Support for tag handlers for &lt;formatDate&gt;, the date and time
  * formatting tag in JSTL 1.0.
+ *
  * @author Jan Luehe
  * @author Jim Newsham
  */
-
 public abstract class FormatSupport extends TagSupport {
 
-  protected Object value;                      // 'value' attribute
-  protected String pattern;                    // 'pattern' attribute
-  protected String style;                      // 'style' attribute
-  protected DateTimeZone dateTimeZone;         // 'dateTimeZone' attribute
-  protected Locale locale;                     // 'locale' attribute
-
-  private String var;                          // 'var' attribute
-  private int scope;                           // 'scope' attribute
-
-
-  public FormatSupport() {
-    super();
-    init();
-  }
-
-  private void init() {
-    var = null;
-    value = null;
-    pattern = null;
-    style = null;
-    dateTimeZone = null;
-    locale = null;
-    scope = PageContext.PAGE_SCOPE;
-  }
-
-  public void setVar(String var) {
-    this.var = var;
-  }
-
-  public void setScope(String scope) {
-    this.scope = Util.getScope(scope);
-  }
-
-  /*
-   * Formats the given instant or partial.
-   */
-  public int doEndTag() throws JspException {
-    if (value == null) {
-      if (var != null) {
-        pageContext.removeAttribute(var, scope);
-      }
-      return EVAL_PAGE;
+    /** The value attribute. */
+    protected Object value;
+    /** The pattern attribute. */
+    protected String pattern;
+    /** The style attribute. */
+    protected String style;
+    /** The dateTimeZone attribute. */
+    protected DateTimeZone dateTimeZone;
+    /** The locale attribute. */
+    protected Locale locale;
+    /** The var attribute. */
+    private String var;
+    /** The scope attribute. */
+    private int scope;
+
+    /**
+     * Constructor.
+     */
+    public FormatSupport() {
+        super();
+        init();
     }
 
-    // Create formatter
-    DateTimeFormatter formatter;
-    if (pattern != null) {
-      formatter = DateTimeFormat.forPattern(pattern);
-    }
-    else if (style != null) {
-      formatter = DateTimeFormat.forStyle(style);
-    }
-    else {
-      // use a medium date (no time) style by default; same as jstl
-      formatter = DateTimeFormat.mediumDate();
+    private void init() {
+        var = null;
+        value = null;
+        pattern = null;
+        style = null;
+        dateTimeZone = null;
+        locale = null;
+        scope = PageContext.PAGE_SCOPE;
     }
 
-    // set formatter locale
-    Locale locale = this.locale;
-    if (locale == null) {
-      locale = Util.getFormattingLocale(pageContext, this, true,
-        DateFormat.getAvailableLocales());
-    }
-    if (locale != null) {
-      formatter = formatter.withLocale(locale);
+    public void setVar(String var) {
+        this.var = var;
     }
 
-    // set formatter timezone
-    DateTimeZone tz = this.dateTimeZone;
-    if (tz == null) {
-      tz = DateTimeZoneSupport.getDateTimeZone(pageContext, this);
-    }
-    if (tz != null) {
-      formatter = formatter.withZone(tz);
+    public void setScope(String scope) {
+        this.scope = Util.getScope(scope);
     }
 
-    // format value
-    String formatted;
-    if (value instanceof ReadableInstant) {
-      formatted = formatter.print((ReadableInstant) value);
-    }
-    else {
-      formatted = formatter.print((ReadablePartial) value);
+    /*
+     * Formats the given instant or partial.
+     */
+    public int doEndTag() throws JspException {
+        if (value == null) {
+            if (var != null) {
+                pageContext.removeAttribute(var, scope);
+            }
+            return EVAL_PAGE;
+        }
+
+        // Create formatter
+        DateTimeFormatter formatter;
+        if (pattern != null) {
+            formatter = DateTimeFormat.forPattern(pattern);
+        } else if (style != null) {
+            formatter = DateTimeFormat.forStyle(style);
+        } else {
+            // use a medium date (no time) style by default; same as jstl
+            formatter = DateTimeFormat.mediumDate();
+        }
+
+        // set formatter locale
+        Locale locale = this.locale;
+        if (locale == null) {
+            locale = Util.getFormattingLocale(pageContext, this, true,
+                    DateFormat.getAvailableLocales());
+        }
+        if (locale != null) {
+            formatter = formatter.withLocale(locale);
+        }
+
+        // set formatter timezone
+        DateTimeZone tz = this.dateTimeZone;
+        if (tz == null) {
+            tz = DateTimeZoneSupport.getDateTimeZone(pageContext, this);
+        }
+        if (tz != null) {
+            formatter = formatter.withZone(tz);
+        }
+
+        // format value
+        String formatted;
+        if (value instanceof ReadableInstant) {
+            formatted = formatter.print((ReadableInstant) value);
+        } else {
+            formatted = formatter.print((ReadablePartial) value);
+        }
+
+        if (var != null) {
+            pageContext.setAttribute(var, formatted, scope);
+        } else {
+            try {
+                pageContext.getOut().print(formatted);
+            } catch (IOException ioe) {
+                throw new JspTagException(ioe.toString(), ioe);
+            }
+        }
+
+        return EVAL_PAGE;
     }
 
-    if (var != null) {
-      pageContext.setAttribute(var, formatted, scope);
-    } 
-    else {
-      try {
-        pageContext.getOut().print(formatted);
-      } 
-      catch (IOException ioe) {
-        throw new JspTagException(ioe.toString(), ioe);
-      }
+    // Releases any resources we may have (or inherit)
+    public void release() {
+        init();
     }
 
-    return EVAL_PAGE;
-  }
-
-  // Releases any resources we may have (or inherit)
-  public void release() {
-    init();
-  }
-
 }
diff --git a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/FormatTag.java b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/FormatTag.java
index d5f1a6d03..3d86de5aa 100644
--- a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/FormatTag.java
+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/FormatTag.java
@@ -13,8 +13,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */ 
-
+ */
 package org.joda.time.contrib.jsptag;
 
 import java.util.Locale;
@@ -24,60 +23,76 @@
 import org.joda.time.DateTimeZone;
 
 /**
- * <p>A handler for &lt;format&gt; that supports rtexprvalue-based
- * attributes.</p>
+ * <p>
+ * A handler for &lt;format&gt; that supports rtexprvalue-based attributes.
+ * </p>
+ * 
  * @author Jan Luehe
  * @author Jim Newsham
  */
 public class FormatTag extends FormatSupport {
 
-  // 'value' attribute
-  public void setValue(Object value) throws JspTagException {
-    this.value = value;
-  }
-
-  // 'style' attribute
-  public void setStyle(String style) throws JspTagException {
-    this.style = style;
-  }
-
-  // 'pattern' attribute
-  public void setPattern(String pattern) throws JspTagException {
-    this.pattern = pattern;
-  }
-
-  // 'dateTimeZone' attribute
-  public void setDateTimeZone(Object dtz) throws JspTagException {
-    if (dtz == null || dtz instanceof String && 
-      ((String) dtz).length() == 0) {
-      this.dateTimeZone = null;
+    /**
+     * Sets the value attribute.
+     * 
+     * @param value  the value
+     */
+    public void setValue(Object value) throws JspTagException {
+        this.value = value;
     }
-    else if (dtz instanceof DateTimeZone) {
-      this.dateTimeZone = (DateTimeZone) dtz;
+
+    /**
+     * Sets the style attribute.
+     * 
+     * @param style  the style
+     */
+    public void setStyle(String style) throws JspTagException {
+        this.style = style;
     }
-    else {
-      try {
-        String s = (String) dtz;
-        this.dateTimeZone = DateTimeZone.forID((String) dtz);
-      }
-      catch(IllegalArgumentException iae) {
-        this.dateTimeZone = DateTimeZone.UTC;
-      }
+
+    /**
+     * Sets the pattern attribute.
+     * 
+     * @param pattern  the pattern
+     */
+    public void setPattern(String pattern) throws JspTagException {
+        this.pattern = pattern;
     }
-  }
 
-  // 'locale' attribute
-  public void setLocale(Object loc) throws JspTagException {
-    if (loc == null || 
-      (loc instanceof String && ((String) loc).length() == 0)) {
-      this.locale = null;
+    /**
+     * Sets the zone attribute.
+     * 
+     * @param dtz  the zone
+     */
+    public void setDateTimeZone(Object dtz) throws JspTagException {
+        if (dtz == null || dtz instanceof String
+                && ((String) dtz).length() == 0) {
+            this.dateTimeZone = null;
+        } else if (dtz instanceof DateTimeZone) {
+            this.dateTimeZone = (DateTimeZone) dtz;
+        } else {
+            try {
+                this.dateTimeZone = DateTimeZone.forID((String) dtz);
+            } catch (IllegalArgumentException iae) {
+                this.dateTimeZone = DateTimeZone.UTC;
+            }
+        }
     }
-    else if (loc instanceof Locale) {
-      this.locale = (Locale) loc;
-    } 
-    else {
-      this.locale = Util.parseLocale((String) loc);
+
+    /**
+     * Sets the style attribute.
+     * 
+     * @param loc  the locale
+     */
+    public void setLocale(Object loc) throws JspTagException {
+        if (loc == null
+                || (loc instanceof String && ((String) loc).length() == 0)) {
+            this.locale = null;
+        } else if (loc instanceof Locale) {
+            this.locale = (Locale) loc;
+        } else {
+            this.locale = Util.parseLocale((String) loc);
+        }
     }
-  }
 
 }
diff --git a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/JodaTagLibraryValidator.java b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/JodaTagLibraryValidator.java
index 0feb4b903..4f98d4aee 100644
--- a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/JodaTagLibraryValidator.java
+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/JodaTagLibraryValidator.java
@@ -13,16 +13,13 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */ 
-
+ */
 package org.joda.time.contrib.jsptag;
 
 import java.io.IOException;
-import java.util.Map;
 import java.util.Vector;
 
 import javax.servlet.jsp.tagext.PageData;
-import javax.servlet.jsp.tagext.TagData;
 import javax.servlet.jsp.tagext.TagLibraryValidator;
 import javax.servlet.jsp.tagext.ValidationMessage;
 import javax.xml.parsers.ParserConfigurationException;
@@ -33,19 +30,18 @@
 import org.xml.sax.SAXException;
 import org.xml.sax.helpers.DefaultHandler;
 
-//import org.apache.taglibs.standard.lang.support.ExpressionEvaluator;
-//import org.apache.taglibs.standard.lang.support.ExpressionEvaluatorManager;
-
 /**
- * <p>A SAX-based TagLibraryValidator for the Joda tags.  Currently implements 
- * the following checks:</p>
+ * <p>
+ * A SAX-based TagLibraryValidator for the Joda tags. Currently implements the
+ * following checks:
+ * </p>
  * 
  * <ul>
- *   <li>Tag bodies that must either be empty or non-empty given
- *      particular attributes.</li>
- *   <li>Expression syntax validation (NOTE: this has been disabled; per my
- *       understanding, it shouldn't be needed in JSP 2.0+ containers; see 
- *       notes in source code for more information).
+ * <li>Tag bodies that must either be empty or non-empty given particular
+ * attributes.</li>
+ * <li>Expression syntax validation (NOTE: this has been disabled; per my
+ * understanding, it shouldn't be needed in JSP 2.0+ containers; see notes in
+ * source code for more information).
  * </ul>
  * 
  * @author Shawn Bayern
@@ -53,387 +49,361 @@
  * @author Jim Newsham
  */
 public class JodaTagLibraryValidator extends TagLibraryValidator {
-  
-  /*
-   * Expression syntax validation has been disabled since when I ported this 
-   * code over from Jakarta Taglib, I wanted to reduce dependencies.  As I
-   * understand it, JSP 2.0 containers take over the responsibility of handling
-   * EL code (both in attribute tags, and externally), so this shouldn't be a
-   * problem unless you're using something old.  If you want to restore this
-   * validation, you must uncomment the various lines in this source, include
-   * the Jakarta Taglib's standard.jar library at build and runtime, and 
-   * (I believe, but don't know specifically) make a legacy-style tld which 
-   * describes which attributes should be validated.  Have a look at fmt.tld, 
-   * fmt-1.0.tld, fmt-1.0-rt.tld in standard.jar for an example of this.
-   */
-   
-
-  //*********************************************************************
-  // Implementation Overview
-
-  /*
-  * We essentially just run the page through a SAX parser, handling
-  * the callbacks that interest us.  We collapse <jsp:text> elements
-  * into the text they contain, since this simplifies processing
-  * somewhat.  Even a quick glance at the implementation shows its
-  * necessary, tree-oriented nature:  multiple Stacks, an understanding
-  * of 'depth', and so on all are important as we recover necessary
-  * state upon each callback.  This TLV demonstrates various techniques,
-  * from the general "how do I use a SAX parser for a TLV?" to
-  * "how do I read my init parameters and then validate?"  But also,
-  * the specific SAX methodology was kept as general as possible to
-  * allow for experimentation and flexibility.
-  */
-
-
-  //*********************************************************************
-  // Constants
-
-  // tag names
-  private static final String SET_DATETIMEZONE = "setDateTimeZone";
-  private static final String PARSE_DATETIME = "parseDateTime";
-  private static final String JSP_TEXT = "jsp:text";
-
-  // attribute names
-  private static final String VALUE = "value";
-
-  // parameter names
-  //private final String EXP_ATT_PARAM = "expressionAttributes";
-
-  // attributes
-  private static final String VAR = "var";
-  private static final String SCOPE = "scope";  
-
-  //scopes
-  private static final String PAGE_SCOPE = "page";        
-  private static final String REQUEST_SCOPE = "request";  
-  private static final String SESSION_SCOPE = "session";  
-  private static final String APPLICATION_SCOPE = "application";
-
-  // Relevant URIs
-  private final String JSP = "http://java.sun.com/JSP/Page"; 
-
-
-  //*********************************************************************
-  // Validation and configuration state (protected)
-
-  private String uri;    // our taglib's uri (as passed by JSP container on XML View)
-  private String prefix;  // our taglib's prefix
-  private Vector messageVector;  // temporary error messages
-  private Map config;    // configuration (Map of Sets)
-  private boolean failed;  // have we failed >0 times?
-  private String lastElementId;  // the last element we've seen
-
-  //*********************************************************************
-  // Constructor and lifecycle management
-
-  public JodaTagLibraryValidator() {
-    init();
-  }
-
-  private void init() {
-    messageVector = null;
-    prefix = null;
-    config = null;
-  }
-
-  public void release() {
-    super.release();
-    init();
-  }
-
-
-  public synchronized ValidationMessage[] validate(String prefix, String uri, 
-    PageData page) {
-    try {
-      this.uri = uri;
-      // initialize
-      messageVector = new Vector();
-
-      // save the prefix
-      this.prefix = prefix;
-
-      // parse parameters if necessary
-      /*
-      try {
-        if (config == null) {
-          configure((String) getInitParameters().get(EXP_ATT_PARAM));
-        }
-      } 
-      catch (NoSuchElementException ex) {
-        // parsing error
-        return vmFromString(Resources.getMessage("TLV_PARAMETER_ERROR",
-          EXP_ATT_PARAM));
-      }
-      */
-
-      DefaultHandler h = new Handler();
-
-      // parse the page
-      SAXParserFactory f = SAXParserFactory.newInstance();
-      f.setValidating(false);
-      f.setNamespaceAware(true);
-      SAXParser p = f.newSAXParser();
-      p.parse(page.getInputStream(), h);
-
-      if (messageVector.size() == 0) {
-        return null;
-      }
-      else {
-        return vmFromVector(messageVector);
-      }
-    } 
-    catch (SAXException ex) {
-      return vmFromString(ex.toString());
-    } 
-    catch (ParserConfigurationException ex) {
-      return vmFromString(ex.toString());
-    } 
-    catch (IOException ex) {
-      return vmFromString(ex.toString());
+
+    /*
+     * Expression syntax validation has been disabled since when I ported this
+     * code over from Jakarta Taglib, I wanted to reduce dependencies. As I
+     * understand it, JSP 2.0 containers take over the responsibility of
+     * handling EL code (both in attribute tags, and externally), so this
+     * shouldn't be a problem unless you're using something old. If you want to
+     * restore this validation, you must uncomment the various lines in this
+     * source, include the Jakarta Taglib's standard.jar library at build and
+     * runtime, and (I believe, but don't know specifically) make a legacy-style
+     * tld which describes which attributes should be validated. Have a look at
+     * fmt.tld, fmt-1.0.tld, fmt-1.0-rt.tld in standard.jar for an example of
+     * this.
+     */
+
+    // *********************************************************************
+    // Implementation Overview
+    /*
+     * We essentially just run the page through a SAX parser, handling the
+     * callbacks that interest us. We collapse <jsp:text> elements into the text
+     * they contain, since this simplifies processing somewhat. Even a quick
+     * glance at the implementation shows its necessary, tree-oriented nature:
+     * multiple Stacks, an understanding of 'depth', and so on all are important
+     * as we recover necessary state upon each callback. This TLV demonstrates
+     * various techniques, from the general "how do I use a SAX parser for a
+     * TLV?" to "how do I read my init parameters and then validate?" But also,
+     * the specific SAX methodology was kept as general as possible to allow for
+     * experimentation and flexibility.
+     */
+
+    // *********************************************************************
+    // Constants
+    // tag names
+    private static final String SET_DATETIMEZONE = "setDateTimeZone";
+
+    private static final String PARSE_DATETIME = "parseDateTime";
+
+    private static final String JSP_TEXT = "jsp:text";
+
+    // attribute names
+    private static final String VALUE = "value";
+
+    // parameter names
+    // private final String EXP_ATT_PARAM = "expressionAttributes";
+
+    // attributes
+    private static final String VAR = "var";
+
+    private static final String SCOPE = "scope";
+
+    // scopes
+    private static final String PAGE_SCOPE = "page";
+
+    private static final String REQUEST_SCOPE = "request";
+
+    private static final String SESSION_SCOPE = "session";
+
+    private static final String APPLICATION_SCOPE = "application";
+
+    // Relevant URIs
+    private final String JSP = "http://java.sun.com/JSP/Page";
+
+    // *********************************************************************
+    // Validation and configuration state (protected)
+
+    private String uri; // our taglib's uri (as passed by JSP container on XML
+                        // View)
+
+    private String prefix; // our taglib's prefix
+
+    private Vector messageVector; // temporary error messages
+
+//    private Map config; // configuration (Map of Sets)
+//
+//    private boolean failed; // have we failed >0 times?
+
+    private String lastElementId; // the last element we've seen
+
+    // *********************************************************************
+    // Constructor and lifecycle management
+
+    public JodaTagLibraryValidator() {
+        init();
     }
-  }
-
-  /*
-  // delegate validation to the appropriate expression language
-  private String validateExpression(String elem, String att, String expr) {
-    // let's just use the cache kept by the ExpressionEvaluatorManager
-    ExpressionEvaluator current;
-    try {
-      current = ExpressionEvaluatorManager.getEvaluatorByName(
-        ExpressionEvaluatorManager.EVALUATOR_CLASS);
-    } 
-    catch (JspException ex) {
-      // (using JspException here feels ugly, but it's what EEM uses)
-      return ex.getMessage();
+
+    private void init() {
+        messageVector = null;
+        prefix = null;
+//        config = null;
     }
-    String response = current.validate(att, expr);
-    return (response == null) 
-      ? null : "tag = '" + elem + "' / attribute = '" + att + "': " + response;
-  }
-   */
-
-  // utility methods to help us match elements in our tagset
-  private boolean isTag(String tagUri, String tagLn, String matchUri,
-    String matchLn) {
-    if (tagUri == null || tagLn == null || matchUri == null || 
-      matchLn == null) {
-      return false;
+
+    public void release() {
+        super.release();
+        init();
     }
-    // match beginning of URI since some suffix *_rt tags can
-    // be nested in EL enabled tags as defined by the spec
-    if (tagUri.length() > matchUri.length()) {
-      return (tagUri.startsWith(matchUri) && tagLn.equals(matchLn));
-    } 
-    else {
-      return (matchUri.startsWith(tagUri) && tagLn.equals(matchLn));
+
+    public synchronized ValidationMessage[] validate(String prefix, String uri,
+            PageData page) {
+        try {
+            this.uri = uri;
+            // initialize
+            messageVector = new Vector();
+
+            // save the prefix
+            this.prefix = prefix;
+
+            // parse parameters if necessary
+            /*
+             * try { if (config == null) { configure((String)
+             * getInitParameters().get(EXP_ATT_PARAM)); } } catch
+             * (NoSuchElementException ex) { // parsing error return
+             * vmFromString(Resources.getMessage("TLV_PARAMETER_ERROR",
+             * EXP_ATT_PARAM)); }
+             */
+
+            DefaultHandler h = new Handler();
+
+            // parse the page
+            SAXParserFactory f = SAXParserFactory.newInstance();
+            f.setValidating(false);
+            f.setNamespaceAware(true);
+            SAXParser p = f.newSAXParser();
+            p.parse(page.getInputStream(), h);
+
+            if (messageVector.size() == 0) {
+                return null;
+            } else {
+                return vmFromVector(messageVector);
+            }
+        } catch (SAXException ex) {
+            return vmFromString(ex.toString());
+        } catch (ParserConfigurationException ex) {
+            return vmFromString(ex.toString());
+        } catch (IOException ex) {
+            return vmFromString(ex.toString());
+        }
     }
-  }
-
-  private boolean isJspTag(String tagUri, String tagLn, String target) {
-    return isTag(tagUri, tagLn, JSP, target);
-  }
-
-  private boolean isJodaTag(String tagUri, String tagLn, String target) {
-    return isTag(tagUri, tagLn, this.uri, target);
-  }
-
-  // utility method to determine if an attribute exists
-  private boolean hasAttribute(Attributes a, String att) {
-    return (a.getValue(att) != null);
-  }
-
-  /*
-  * method to assist with failure [ as if it's not easy enough
-  * already :-) ]
-  */
-  private void fail(String message) {
-    failed = true;
-    messageVector.add(new ValidationMessage(lastElementId, message));
-  }
-
-  // returns true if the given attribute name is specified, false otherwise
-  private boolean isSpecified(TagData data, String attributeName) {
-    return (data.getAttribute(attributeName) != null);
-  }
-
-  // returns true if the 'scope' attribute is valid
-  protected boolean hasNoInvalidScope(Attributes a) {
-    String scope = a.getValue(SCOPE);
-    if ((scope != null) && !scope.equals(PAGE_SCOPE) &&
-      !scope.equals(REQUEST_SCOPE) && !scope.equals(SESSION_SCOPE) &&
-      !scope.equals(APPLICATION_SCOPE)) {
-      return false;
+
+    /*
+     * // delegate validation to the appropriate expression language private
+     * String validateExpression(String elem, String att, String expr) { //
+     * let's just use the cache kept by the ExpressionEvaluatorManager
+     * ExpressionEvaluator current; try { current =
+     * ExpressionEvaluatorManager.getEvaluatorByName(
+     * ExpressionEvaluatorManager.EVALUATOR_CLASS); } catch (JspException ex) { //
+     * (using JspException here feels ugly, but it's what EEM uses) return
+     * ex.getMessage(); } String response = current.validate(att, expr); return
+     * (response == null) ? null : "tag = '" + elem + "' / attribute = '" + att +
+     * "': " + response; }
+     */
+
+    // utility methods to help us match elements in our tagset
+    private boolean isTag(String tagUri, String tagLn, String matchUri,
+            String matchLn) {
+        if (tagUri == null || tagLn == null || matchUri == null
+                || matchLn == null) {
+            return false;
+        }
+        // match beginning of URI since some suffix *_rt tags can
+        // be nested in EL enabled tags as defined by the spec
+        if (tagUri.length() > matchUri.length()) {
+            return (tagUri.startsWith(matchUri) && tagLn.equals(matchLn));
+        } else {
+            return (matchUri.startsWith(tagUri) && tagLn.equals(matchLn));
+        }
     }
-    return true;
-  }
-
-  // returns true if the 'var' attribute is empty
-  protected boolean hasEmptyVar(Attributes a) {
-    return "".equals(a.getValue(VAR));
-  }
-
-  // returns true if the 'scope' attribute is present without 'var'
-  protected boolean hasDanglingScope(Attributes a) {
-    return (a.getValue(SCOPE) != null && a.getValue(VAR) == null);
-  }
-
-  // retrieves the local part of a QName
-  protected String getLocalPart(String qname) {
-    int colon = qname.indexOf(":");
-    return (colon == -1) ? qname : qname.substring(colon + 1);
-  }
-
-  // parses our configuration parameter for element:attribute pairs
-  /*
-  private void configure(String info) {
-    // construct our configuration map
-    config = new HashMap();
-
-    // leave the map empty if we have nothing to configure
-    if (info == null) {
-      return;
+
+//    private boolean isJspTag(String tagUri, String tagLn, String target) {
+//        return isTag(tagUri, tagLn, JSP, target);
+//    }
+
+    private boolean isJodaTag(String tagUri, String tagLn, String target) {
+        return isTag(tagUri, tagLn, this.uri, target);
     }
 
-    // separate parameter into space-separated tokens and store them
-    StringTokenizer st = new StringTokenizer(info);
-    while (st.hasMoreTokens()) {
-      String pair = st.nextToken();
-      StringTokenizer pairTokens = new StringTokenizer(pair, ":");
-      String element = pairTokens.nextToken();
-      String attribute = pairTokens.nextToken();
-      Object atts = config.get(element);
-      if (atts == null) {
-        atts = new HashSet();
-        config.put(element, atts);
-      }
-      ((Set) atts).add(attribute);
+    // utility method to determine if an attribute exists
+    private boolean hasAttribute(Attributes a, String att) {
+        return (a.getValue(att) != null);
     }
-  }
-  */
-
-  // constructs a ValidationMessage[] from a single String and no ID
-  private static ValidationMessage[] vmFromString(String message) {
-    return new ValidationMessage[] { new ValidationMessage(null, message) };
-  }
-
-  // constructs a ValidationMessage[] from a ValidationMessage Vector
-  private static ValidationMessage[] vmFromVector(Vector v) {
-    ValidationMessage[] vm = new ValidationMessage[v.size()];
-    for (int i = 0; i < vm.length; i++) {
-      vm[i] = (ValidationMessage) v.get(i);
+
+    /*
+     * method to assist with failure [ as if it's not easy enough already :-) ]
+     */
+    private void fail(String message) {
+//        failed = true;
+        messageVector.add(new ValidationMessage(lastElementId, message));
     }
-    return vm;
-  }
-
-  /**
-   * SAX event handler.
-   */
-  private class Handler extends DefaultHandler {
-    // parser state
-    private int depth = 0;
-    private String lastElementName = null;
-    private boolean bodyNecessary = false;
-    private boolean bodyIllegal = false;
-
-    // process under the existing context (state), then modify it
-    public void startElement(String ns, String ln, String qn, Attributes a) {
-      // substitute our own parsed 'ln' if it's not provided
-      if (ln == null) {
-        ln = getLocalPart(qn);
-      }
-
-      // for simplicity, we can ignore <jsp:text> for our purposes
-      // (don't bother distinguishing between it and its characters)
-      if (qn.equals(JSP_TEXT)) {
-        return;
-      }
-
-      // check body-related constraint
-      if (bodyIllegal) {
-        fail(Resources.getMessage("TLV_ILLEGAL_BODY", lastElementName));
-      }
-
-      // validate expression syntax if we need to
-      /*
-      Set expAtts;
-      if (qn.startsWith(prefix + ":") && (expAtts = (Set) config.get(ln)) != null) {
-        for (int i = 0; i < a.getLength(); i++) {
-          String attName = a.getLocalName(i);
-          if (expAtts.contains(attName)) {
-            String vMsg = validateExpression(ln, attName, a.getValue(i));
-            if (vMsg != null) {
-              fail(vMsg);
-            }
-          }
-        }
-      }
-      */
-
-      // validate attributes
-      if (qn.startsWith(prefix + ":") && !hasNoInvalidScope(a)) {
-        fail(Resources.getMessage("TLV_INVALID_ATTRIBUTE", SCOPE, qn, 
-          a.getValue(SCOPE)));
-      }
-      if (qn.startsWith(prefix + ":") && hasEmptyVar(a)) {
-        fail(Resources.getMessage("TLV_EMPTY_VAR", qn));
-      }
-      if (qn.startsWith(prefix + ":") && !isJodaTag(ns, ln, SET_DATETIMEZONE) &&
-        hasDanglingScope(a)) {
-        fail(Resources.getMessage("TLV_DANGLING_SCOPE", qn));
-      }
-
-      // now, modify state
-
-      // set up a check against illegal attribute/body combinations
-      bodyIllegal = false;
-      bodyNecessary = false;
-      if (isJodaTag(ns, ln,  PARSE_DATETIME)) {
-        if (hasAttribute(a, VALUE)) {
-          bodyIllegal = true;
-        }
-        else {
-          bodyNecessary = true;
+
+//    // returns true if the given attribute name is specified, false otherwise
+//    private boolean isSpecified(TagData data, String attributeName) {
+//        return (data.getAttribute(attributeName) != null);
+//    }
+
+    // returns true if the 'scope' attribute is valid
+    protected boolean hasNoInvalidScope(Attributes a) {
+        String scope = a.getValue(SCOPE);
+        if ((scope != null) && !scope.equals(PAGE_SCOPE)
+                && !scope.equals(REQUEST_SCOPE) && !scope.equals(SESSION_SCOPE)
+                && !scope.equals(APPLICATION_SCOPE)) {
+            return false;
         }
-      } 
+        return true;
+    }
 
-      // record the most recent tag (for error reporting)
-      lastElementName = qn;
-      lastElementId = a.getValue(JSP, "id");
+    // returns true if the 'var' attribute is empty
+    protected boolean hasEmptyVar(Attributes a) {
+        return "".equals(a.getValue(VAR));
+    }
 
-      // we're a new element, so increase depth
-      depth++;
+    // returns true if the 'scope' attribute is present without 'var'
+    protected boolean hasDanglingScope(Attributes a) {
+        return (a.getValue(SCOPE) != null && a.getValue(VAR) == null);
     }
 
-    public void characters(char[] ch, int start, int length) {
-      bodyNecessary = false;    // body is no longer necessary!
+    // retrieves the local part of a QName
+    protected String getLocalPart(String qname) {
+        int colon = qname.indexOf(":");
+        return (colon == -1) ? qname : qname.substring(colon + 1);
+    }
 
-      // ignore strings that are just whitespace
-      String s = new String(ch, start, length).trim();
-      if (s.equals("")) {
-        return;
-      }
+    // parses our configuration parameter for element:attribute pairs
+    /*
+     * private void configure(String info) { // construct our configuration map
+     * config = new HashMap();
+     *  // leave the map empty if we have nothing to configure if (info == null) {
+     * return; }
+     *  // separate parameter into space-separated tokens and store them
+     * StringTokenizer st = new StringTokenizer(info); while
+     * (st.hasMoreTokens()) { String pair = st.nextToken(); StringTokenizer
+     * pairTokens = new StringTokenizer(pair, ":"); String element =
+     * pairTokens.nextToken(); String attribute = pairTokens.nextToken(); Object
+     * atts = config.get(element); if (atts == null) { atts = new HashSet();
+     * config.put(element, atts); } ((Set) atts).add(attribute); } }
+     */
+
+    // constructs a ValidationMessage[] from a single String and no ID
+    private static ValidationMessage[] vmFromString(String message) {
+        return new ValidationMessage[] { new ValidationMessage(null, message) };
+    }
 
-      // check and update body-related constraints
-      if (bodyIllegal) {
-        fail(Resources.getMessage("TLV_ILLEGAL_BODY", lastElementName));
-      }
+    // constructs a ValidationMessage[] from a ValidationMessage Vector
+    private static ValidationMessage[] vmFromVector(Vector v) {
+        ValidationMessage[] vm = new ValidationMessage[v.size()];
+        for (int i = 0; i < vm.length; i++) {
+            vm[i] = (ValidationMessage) v.get(i);
+        }
+        return vm;
     }
 
-    public void endElement(String ns, String ln, String qn) {
-      // consistently, we ignore JSP_TEXT
-      if (qn.equals(JSP_TEXT)) {
-        return;
-      }
+    /**
+     * SAX event handler.
+     */
+    private class Handler extends DefaultHandler {
+        // parser state
+        private int depth = 0;
+
+        private String lastElementName = null;
+
+        private boolean bodyNecessary = false;
 
-      // handle body-related invariant
-      if (bodyNecessary) {
-        fail(Resources.getMessage("TLV_MISSING_BODY", lastElementName));
-      }
-      bodyIllegal = false;  // reset: we've left the tag
+        private boolean bodyIllegal = false;
 
-      // update our depth
-      depth--;
+        // process under the existing context (state), then modify it
+        public void startElement(String ns, String ln, String qn, Attributes a) {
+            // substitute our own parsed 'ln' if it's not provided
+            if (ln == null) {
+                ln = getLocalPart(qn);
+            }
+
+            // for simplicity, we can ignore <jsp:text> for our purposes
+            // (don't bother distinguishing between it and its characters)
+            if (qn.equals(JSP_TEXT)) {
+                return;
+            }
+
+            // check body-related constraint
+            if (bodyIllegal) {
+                fail(Resources.getMessage("TLV_ILLEGAL_BODY", lastElementName));
+            }
+
+            // validate expression syntax if we need to
+            /*
+             * Set expAtts; if (qn.startsWith(prefix + ":") && (expAtts = (Set)
+             * config.get(ln)) != null) { for (int i = 0; i < a.getLength();
+             * i++) { String attName = a.getLocalName(i); if
+             * (expAtts.contains(attName)) { String vMsg =
+             * validateExpression(ln, attName, a.getValue(i)); if (vMsg != null) {
+             * fail(vMsg); } } } }
+             */
+
+            // validate attributes
+            if (qn.startsWith(prefix + ":") && !hasNoInvalidScope(a)) {
+                fail(Resources.getMessage("TLV_INVALID_ATTRIBUTE", SCOPE, qn, a
+                        .getValue(SCOPE)));
+            }
+            if (qn.startsWith(prefix + ":") && hasEmptyVar(a)) {
+                fail(Resources.getMessage("TLV_EMPTY_VAR", qn));
+            }
+            if (qn.startsWith(prefix + ":")
+                    && !isJodaTag(ns, ln, SET_DATETIMEZONE)
+                    && hasDanglingScope(a)) {
+                fail(Resources.getMessage("TLV_DANGLING_SCOPE", qn));
+            }
+
+            // now, modify state
+
+            // set up a check against illegal attribute/body combinations
+            bodyIllegal = false;
+            bodyNecessary = false;
+            if (isJodaTag(ns, ln, PARSE_DATETIME)) {
+                if (hasAttribute(a, VALUE)) {
+                    bodyIllegal = true;
+                } else {
+                    bodyNecessary = true;
+                }
+            }
+
+            // record the most recent tag (for error reporting)
+            lastElementName = qn;
+            lastElementId = a.getValue(JSP, "id");
+
+            // we're a new element, so increase depth
+            depth++;
+        }
+
+        public void characters(char[] ch, int start, int length) {
+            bodyNecessary = false; // body is no longer necessary!
+
+            // ignore strings that are just whitespace
+            String s = new String(ch, start, length).trim();
+            if (s.equals("")) {
+                return;
+            }
+
+            // check and update body-related constraints
+            if (bodyIllegal) {
+                fail(Resources.getMessage("TLV_ILLEGAL_BODY", lastElementName));
+            }
+        }
+
+        public void endElement(String ns, String ln, String qn) {
+            // consistently, we ignore JSP_TEXT
+            if (qn.equals(JSP_TEXT)) {
+                return;
+            }
+
+            // handle body-related invariant
+            if (bodyNecessary) {
+                fail(Resources.getMessage("TLV_MISSING_BODY", lastElementName));
+            }
+            bodyIllegal = false; // reset: we've left the tag
+
+            // update our depth
+            depth--;
+        }
     }
-  }
+
 }
diff --git a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/ParseDateTimeSupport.java b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/ParseDateTimeSupport.java
index ad3617759..c96a4b5d7 100644
--- a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/ParseDateTimeSupport.java
+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/ParseDateTimeSupport.java
@@ -13,8 +13,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */ 
-
+ */
 package org.joda.time.contrib.jsptag;
 
 import java.io.IOException;
@@ -32,126 +31,131 @@
 import org.joda.time.format.DateTimeFormatter;
 
 /**
- * Support for tag handlers for &lt;parseDate&gt;, the date and time
- * parsing tag in JSTL 1.0.
+ * Support for tag handlers for &lt;parseDate&gt;, the date and time parsing tag
+ * in JSTL 1.0.
+ * 
  * @author Jan Luehe
  * @author Jim Newsham
  */
 public abstract class ParseDateTimeSupport extends BodyTagSupport {
 
-  protected String value;                      // 'value' attribute
-  protected boolean valueSpecified;         // status
-  protected String pattern;                    // 'pattern' attribute
-  protected String style;                      // 'style' attribute
-  protected DateTimeZone dateTimeZone;         // 'dateTimeZone' attribute
-  protected Locale locale;                     // 'locale' attribute
-
-  private String var;                          // 'var' attribute
-  private int scope;                           // 'scope' attribute
-
-  public ParseDateTimeSupport() {
-    super();
-    init();
-  }
-
-  private void init() {
-    value = null;
-    valueSpecified = false;
-    pattern = null;
-    style = null;
-    dateTimeZone = null;
-    locale = null;
-    scope = PageContext.PAGE_SCOPE;
-  }
-
-  public void setVar(String var) {
-    this.var = var;
-  }
-
-  public void setScope(String scope) {
-    this.scope = Util.getScope(scope);
-  }
-
-  public int doEndTag() throws JspException {
-    String input = null;
-
-    // determine the input by...
-    if (valueSpecified) {
-      // ... reading 'value' attribute
-      input = value;
-    } 
-    else {
-      // ... retrieving and trimming our body
-      if (bodyContent != null && bodyContent.getString() != null)
-      input = bodyContent.getString().trim();
+    /** The value attribute. */
+    protected String value;
+    /** Status of the value. */
+    protected boolean valueSpecified;
+    /** The pattern attribute. */
+    protected String pattern;
+    /** The style attribute. */
+    protected String style;
+    /** The zone attribute. */
+    protected DateTimeZone dateTimeZone;
+    /** The locale attribute. */
+    protected Locale locale;
+    /** The var attribute. */
+    private String var;
+    /** The scope attribute. */
+    private int scope;
+
+    /**
+     * Constructor.
+     */
+    public ParseDateTimeSupport() {
+        super();
+        init();
     }
 
-    if ((input == null) || input.equals("")) {
-      if (var != null) {
-        pageContext.removeAttribute(var, scope);
-      }
-      return EVAL_PAGE;
-    }
-
-    // Create formatter
-    DateTimeFormatter formatter;
-    if (pattern != null) {
-      formatter = DateTimeFormat.forPattern(pattern);
-    }
-    else if (style != null) {
-      formatter = DateTimeFormat.forStyle(style);
-    }
-    else {
-      formatter = DateTimeFormat.fullDateTime();
+    private void init() {
+        value = null;
+        valueSpecified = false;
+        pattern = null;
+        style = null;
+        dateTimeZone = null;
+        locale = null;
+        scope = PageContext.PAGE_SCOPE;
     }
 
-    // set formatter locale
-    Locale locale = this.locale;
-    if (locale == null) {
-      locale = Util.getFormattingLocale(pageContext, this, true,
-        DateFormat.getAvailableLocales());
-    }
-    if (locale != null) {
-      formatter = formatter.withLocale(locale);
+    public void setVar(String var) {
+        this.var = var;
     }
 
-    // set formatter timezone
-    DateTimeZone tz = this.dateTimeZone;
-    if (tz == null) {
-      tz = DateTimeZoneSupport.getDateTimeZone(pageContext, this);
-    }
-    if (tz != null) {
-      formatter = formatter.withZone(tz);
+    public void setScope(String scope) {
+        this.scope = Util.getScope(scope);
     }
 
-    // Parse date
-    DateTime parsed = null;
-    try {
-      parsed = formatter.parseDateTime(input);
-    } 
-    catch (IllegalArgumentException iae) {
-      throw new JspException(Resources.getMessage("PARSE_DATE_PARSE_ERROR", 
-        input), iae);
+    public int doEndTag() throws JspException {
+        String input = null;
+
+        // determine the input by...
+        if (valueSpecified) {
+            // ... reading 'value' attribute
+            input = value;
+        } else {
+            // ... retrieving and trimming our body
+            if (bodyContent != null && bodyContent.getString() != null)
+                input = bodyContent.getString().trim();
+        }
+
+        if ((input == null) || input.equals("")) {
+            if (var != null) {
+                pageContext.removeAttribute(var, scope);
+            }
+            return EVAL_PAGE;
+        }
+
+        // Create formatter
+        DateTimeFormatter formatter;
+        if (pattern != null) {
+            formatter = DateTimeFormat.forPattern(pattern);
+        } else if (style != null) {
+            formatter = DateTimeFormat.forStyle(style);
+        } else {
+            formatter = DateTimeFormat.fullDateTime();
+        }
+
+        // set formatter locale
+        Locale locale = this.locale;
+        if (locale == null) {
+            locale = Util.getFormattingLocale(pageContext, this, true,
+                    DateFormat.getAvailableLocales());
+        }
+        if (locale != null) {
+            formatter = formatter.withLocale(locale);
+        }
+
+        // set formatter timezone
+        DateTimeZone tz = this.dateTimeZone;
+        if (tz == null) {
+            tz = DateTimeZoneSupport.getDateTimeZone(pageContext, this);
+        }
+        if (tz != null) {
+            formatter = formatter.withZone(tz);
+        }
+
+        // Parse date
+        DateTime parsed = null;
+        try {
+            parsed = formatter.parseDateTime(input);
+        } catch (IllegalArgumentException iae) {
+            throw new JspException(Resources.getMessage(
+                    "PARSE_DATE_PARSE_ERROR", input), iae);
+        }
+
+        if (var != null) {
+            pageContext.setAttribute(var, parsed, scope);
+        } else {
+            try {
+                pageContext.getOut().print(parsed);
+            } catch (IOException ioe) {
+                throw new JspTagException(ioe.toString(), ioe);
+            }
+        }
+
+        return EVAL_PAGE;
     }
 
-    if (var != null) {
-      pageContext.setAttribute(var, parsed, scope);  
+    // Releases any resources we may have (or inherit)
+    public void release() {
+        init();
     }
-    else {
-      try {
-        pageContext.getOut().print(parsed);
-      } 
-      catch (IOException ioe) {
-        throw new JspTagException(ioe.toString(), ioe);
-      }
-    }
-
-    return EVAL_PAGE;
-  }
-
-  // Releases any resources we may have (or inherit)
-  public void release() {
-    init();
-  }
 
 }
diff --git a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/ParseDateTimeTag.java b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/ParseDateTimeTag.java
index ea2d5eb44..b1ec30355 100644
--- a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/ParseDateTimeTag.java
+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/ParseDateTimeTag.java
@@ -13,8 +13,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */ 
-
+ */
 package org.joda.time.contrib.jsptag;
 
 import java.util.Locale;
@@ -24,60 +23,78 @@
 import org.joda.time.DateTimeZone;
 
 /**
- * <p>A handler for &lt;parseDate&gt; that supports rtexprvalue-based
- * attributes.</p>
+ * <p>
+ * A handler for &lt;parseDate&gt; that supports rtexprvalue-based attributes.
+ * </p>
+ * 
  * @author Jan Luehe
  * @author Jim Newsham
  */
 
 public class ParseDateTimeTag extends ParseDateTimeSupport {
 
-  // 'value' attribute
-  public void setValue(String value) throws JspTagException {
-    this.value = value;
-    this.valueSpecified = true;
-  }
-
-  // 'style' attribute
-  public void setStyle(String style) throws JspTagException {
-    this.style = style;
-  }
-
-  // 'pattern' attribute
-  public void setPattern(String pattern) throws JspTagException {
-    this.pattern = pattern;
-  }
-
-  // 'dateTimeZone' attribute
-  public void setDateTimeZone(Object dtz) throws JspTagException {
-    if (dtz == null || dtz instanceof String && ((String) dtz).length() == 0) {
-      this.dateTimeZone = null;
+    /**
+     * Sets the value attribute.
+     * 
+     * @param value  the value
+     */
+    public void setValue(String value) throws JspTagException {
+        this.value = value;
+        this.valueSpecified = true;
     }
-    else if (dtz instanceof DateTimeZone) {
-      this.dateTimeZone = (DateTimeZone) dtz;
+
+    /**
+     * Sets the style attribute.
+     * 
+     * @param style  the style
+     */
+    public void setStyle(String style) throws JspTagException {
+        this.style = style;
     }
-    else {
-      try {
-        String s = (String) dtz;
-        this.dateTimeZone = DateTimeZone.forID((String) dtz);
-      }
-      catch(IllegalArgumentException iae) {
-        this.dateTimeZone = DateTimeZone.UTC;
-      }
+
+    /**
+     * Sets the pattern attribute.
+     * 
+     * @param pattern  the pattern
+     */
+    public void setPattern(String pattern) throws JspTagException {
+        this.pattern = pattern;
     }
-  }
 
-  // 'locale' attribute
-  public void setLocale(Object loc) throws JspTagException {
-    if (loc == null || 
-      (loc instanceof String && ((String) loc).length() == 0)) {
-      this.locale = null;
+    /**
+     * Sets the zone attribute.
+     * 
+     * @param dtz  the zone
+     */
+    public void setDateTimeZone(Object dtz) throws JspTagException {
+        if (dtz == null || dtz instanceof String
+                && ((String) dtz).length() == 0) {
+            this.dateTimeZone = null;
+        } else if (dtz instanceof DateTimeZone) {
+            this.dateTimeZone = (DateTimeZone) dtz;
+        } else {
+            try {
+                this.dateTimeZone = DateTimeZone.forID((String) dtz);
+            } catch (IllegalArgumentException iae) {
+                this.dateTimeZone = DateTimeZone.UTC;
+            }
+        }
     }
-    else if (loc instanceof Locale) {
-      this.locale = (Locale) loc;
-    } 
-    else {
-      locale = Util.parseLocale((String) loc);
+
+    /**
+     * Sets the style attribute.
+     * 
+     * @param loc  the locale
+     */
+    public void setLocale(Object loc) throws JspTagException {
+        if (loc == null
+                || (loc instanceof String && ((String) loc).length() == 0)) {
+            this.locale = null;
+        } else if (loc instanceof Locale) {
+            this.locale = (Locale) loc;
+        } else {
+            locale = Util.parseLocale((String) loc);
+        }
     }
-  }
+
 }
diff --git a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/Resources.java b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/Resources.java
index 84ff4a381..e7fd0c8ab 100644
--- a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/Resources.java
+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/Resources.java
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */ 
-
 package org.joda.time.contrib.jsptag;
 
 import java.text.MessageFormat;
@@ -46,12 +45,10 @@
     // Static data
 
     /** The location of our resources. */
-    private static final String RESOURCE_LOCATION
-  = "org.joda.time.contrib.jsptag.Resources";
+    private static final String RESOURCE_LOCATION = "org.joda.time.contrib.jsptag.Resources";
 
     /** Our class-wide ResourceBundle. */
-    private static ResourceBundle rb =
-  ResourceBundle.getBundle(RESOURCE_LOCATION);
+    private static ResourceBundle rb = ResourceBundle.getBundle(RESOURCE_LOCATION);
 
 
     //*********************************************************************
@@ -60,26 +57,26 @@
     /** Retrieves a message with no arguments. */
     public static String getMessage(String name)
       throws MissingResourceException {
-  return rb.getString(name);
+        return rb.getString(name);
     }
 
     /** Retrieves a message with arbitrarily many arguments. */
     public static String getMessage(String name, Object[] a)
       throws MissingResourceException {
-  String res = rb.getString(name);
-  return MessageFormat.format(res, a);
+        String res = rb.getString(name);
+        return MessageFormat.format(res, a);
     }
 
     /** Retrieves a message with one argument. */
     public static String getMessage(String name, Object a1)
       throws MissingResourceException {
-  return getMessage(name, new Object[] { a1 });
+        return getMessage(name, new Object[] { a1 });
     }
 
     /** Retrieves a message with two arguments. */
     public static String getMessage(String name, Object a1, Object a2)
       throws MissingResourceException {
-  return getMessage(name, new Object[] { a1, a2 });
+        return getMessage(name, new Object[] { a1, a2 });
     }
 
     /** Retrieves a message with three arguments. */
@@ -88,7 +85,7 @@ public static String getMessage(String name,
             Object a2,
             Object a3)
       throws MissingResourceException {
-  return getMessage(name, new Object[] { a1, a2, a3 });
+        return getMessage(name, new Object[] { a1, a2, a3 });
     }
 
     /** Retrieves a message with four arguments. */
@@ -98,7 +95,7 @@ public static String getMessage(String name,
             Object a3,
             Object a4)
       throws MissingResourceException {
-  return getMessage(name, new Object[] { a1, a2, a3, a4 });
+        return getMessage(name, new Object[] { a1, a2, a3, a4 });
     }
 
     /** Retrieves a message with five arguments. */
@@ -109,7 +106,7 @@ public static String getMessage(String name,
             Object a4,
             Object a5)
       throws MissingResourceException {
-  return getMessage(name, new Object[] { a1, a2, a3, a4, a5 });
+        return getMessage(name, new Object[] { a1, a2, a3, a4, a5 });
     }
 
     /** Retrieves a message with six arguments. */
@@ -121,7 +118,7 @@ public static String getMessage(String name,
             Object a5,
             Object a6)
       throws MissingResourceException {
-  return getMessage(name, new Object[] { a1, a2, a3, a4, a5, a6 });
+        return getMessage(name, new Object[] { a1, a2, a3, a4, a5, a6 });
     }
 
 }
diff --git a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/SetDateTimeZoneSupport.java b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/SetDateTimeZoneSupport.java
index f609bd0e3..72ad2530f 100644
--- a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/SetDateTimeZoneSupport.java
+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/SetDateTimeZoneSupport.java
@@ -13,8 +13,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */ 
-
+ */
 package org.joda.time.contrib.jsptag;
 
 import javax.servlet.jsp.JspException;
@@ -26,66 +25,69 @@
 
 /**
  * Support for tag handlers for &lt;setDateTimeZone&gt;.
+ * 
  * @author Jan Luehe
  * @author Jim Newsham
  */
 public abstract class SetDateTimeZoneSupport extends TagSupport {
 
-  protected Object value;                      // 'value' attribute
-  private int scope;                           // 'scope' attribute
-  private String var;                          // 'var' attribute
+    /** The value attribute. */
+    protected Object value;
+    /** The scope attribute. */
+    private int scope;
+    /** The var attribute. */
+    private String var;
 
-  public SetDateTimeZoneSupport() {
-    super();
-    init();
-  }
-
-  // resets local state
-  private void init() {
-    value = null;
-    var = null;
-    scope = PageContext.PAGE_SCOPE;
-  }
-
-  public void setScope(String scope) {
-    this.scope = Util.getScope(scope);
-  }
+    /**
+     * Constructor.
+     */
+    public SetDateTimeZoneSupport() {
+        super();
+        init();
+    }
 
-  public void setVar(String var) {
-    this.var = var;
-  }
+    // resets local state
+    private void init() {
+        value = null;
+        var = null;
+        scope = PageContext.PAGE_SCOPE;
+    }
 
-  public int doEndTag() throws JspException {
-    DateTimeZone dateTimeZone = null;
-    if (value == null) {
-      dateTimeZone = DateTimeZone.UTC;
+    public void setScope(String scope) {
+        this.scope = Util.getScope(scope);
     }
-    else if (value instanceof String) {
-      try {
-        dateTimeZone = DateTimeZone.forID((String) value);
-      }
-      catch(IllegalArgumentException iae) {
-        dateTimeZone = DateTimeZone.UTC;
-      }
-    } 
-    else {
-      dateTimeZone = (DateTimeZone) value;
+
+    public void setVar(String var) {
+        this.var = var;
     }
 
-    if (var != null) {
-      pageContext.setAttribute(var, dateTimeZone, scope);
-    } 
-    else {
-      Config.set(pageContext, DateTimeZoneSupport.FMT_TIME_ZONE, 
-      dateTimeZone, scope);
+    public int doEndTag() throws JspException {
+        DateTimeZone dateTimeZone = null;
+        if (value == null) {
+            dateTimeZone = DateTimeZone.UTC;
+        } else if (value instanceof String) {
+            try {
+                dateTimeZone = DateTimeZone.forID((String) value);
+            } catch (IllegalArgumentException iae) {
+                dateTimeZone = DateTimeZone.UTC;
+            }
+        } else {
+            dateTimeZone = (DateTimeZone) value;
+        }
+
+        if (var != null) {
+            pageContext.setAttribute(var, dateTimeZone, scope);
+        } else {
+            Config.set(pageContext, DateTimeZoneSupport.FMT_TIME_ZONE,
+                    dateTimeZone, scope);
+        }
+
+        return EVAL_PAGE;
     }
 
-    return EVAL_PAGE;
-  }
+    // Releases any resources we may have (or inherit)
+    public void release() {
+        init();
+    }
 
-  // Releases any resources we may have (or inherit)
-  public void release() {
-    init();
-  }
-  
 }
diff --git a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/SetDateTimeZoneTag.java b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/SetDateTimeZoneTag.java
index 608166f2c..2afb147bd 100644
--- a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/SetDateTimeZoneTag.java
+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/SetDateTimeZoneTag.java
@@ -13,23 +13,29 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */ 
-
+ */
 package org.joda.time.contrib.jsptag;
 
 import javax.servlet.jsp.JspTagException;
 
 /**
- * <p>A handler for &lt;setDateTimeZone&gt; that supports rtexprvalue-based
- * attributes.</p>
+ * <p>
+ * A handler for &lt;setDateTimeZone&gt; that supports rtexprvalue-based
+ * attributes.
+ * </p>
+ * 
  * @author Jan Luehe
  * @author Jim Newsham
  */
 public class SetDateTimeZoneTag extends SetDateTimeZoneSupport {
 
-  // for tag attribute
-  public void setValue(Object value) throws JspTagException {
-    this.value = value;
-  }
+    /**
+     * Sets the value attribute.
+     * 
+     * @param value  the value
+     */
+    public void setValue(Object value) throws JspTagException {
+        this.value = value;
+    }
 
 }
diff --git a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/Util.java b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/Util.java
index 578bf0dd7..55730a9bc 100644
--- a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/Util.java
+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/Util.java
@@ -13,8 +13,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */ 
-
+ */
 package org.joda.time.contrib.jsptag;
 
 import java.text.DateFormat;
@@ -33,627 +32,605 @@
 import javax.servlet.jsp.tagext.Tag;
 
 /**
- * <p>Utilities in support of tag-handler classes.</p>
+ * <p>
+ * Utilities in support of tag-handler classes.
+ * </p>
+ * 
  * @author Jan Luehe
  * @author Jim Newsham
  */
 public class Util {
 
-  private static final String REQUEST = "request";   
-  private static final String SESSION = "session";   
-  private static final String APPLICATION = "application"; 
-  private static final char HYPHEN = '-';
-  private static final char UNDERSCORE = '_';
-
-  private static final Locale EMPTY_LOCALE = new Locale("", "");
-
-  static final String REQUEST_CHAR_SET =
-    "javax.servlet.jsp.jstl.fmt.request.charset";
-  
-  /*
-  * Converts the given string description of a scope to the corresponding
-  * PageContext constant.
-  *
-  * The validity of the given scope has already been checked by the
-  * appropriate TLV.
-  *
-  * @param scope String description of scope
-  *
-  * @return PageContext constant corresponding to given scope description
-  */
-  public static int getScope(String scope) {
-    int ret = PageContext.PAGE_SCOPE; // default
-
-    if (REQUEST.equalsIgnoreCase(scope))
-      ret = PageContext.REQUEST_SCOPE;
-    else if (SESSION.equalsIgnoreCase(scope))
-      ret = PageContext.SESSION_SCOPE;
-    else if (APPLICATION.equalsIgnoreCase(scope))
-      ret = PageContext.APPLICATION_SCOPE;
-
-    return ret;
-  }
-
-  /**
-  * HttpServletRequest.getLocales() returns the server's default locale 
-  * if the request did not specify a preferred language.
-  * We do not want this behavior, because it prevents us from using
-  * the fallback locale. 
-  * We therefore need to return an empty Enumeration if no preferred 
-  * locale has been specified. This way, the logic for the fallback 
-  * locale will be able to kick in.
-  */
-  public static Enumeration getRequestLocales(HttpServletRequest request) {        
-    Enumeration values = request.getHeaders("accept-language");
-    if (values.hasMoreElements()) {
-      // At least one "accept-language". Simply return
-      // the enumeration returned by request.getLocales().
-      // System.out.println("At least one accept-language");
-      return request.getLocales();
-    } 
-    else {
-      // No header for "accept-language". Simply return
-      // the empty enumeration.
-      // System.out.println("No accept-language");
-      return values;
-    }
-  }
-
-  /**
-  * See parseLocale(String, String) for details.
-  */
-  public static Locale parseLocale(String locale) {
-    return parseLocale(locale, null);
-  }
-
-  /**
-  * Parses the given locale string into its language and (optionally)
-  * country components, and returns the corresponding
-  * <tt>java.util.Locale</tt> object.
-  *
-  * If the given locale string is null or empty, the runtime's default
-  * locale is returned.
-  *
-  * @param locale the locale string to parse
-  * @param variant the variant
-  *
-  * @return <tt>java.util.Locale</tt> object corresponding to the given
-  * locale string, or the runtime's default locale if the locale string is
-  * null or empty
-  *
-  * @throws IllegalArgumentException if the given locale does not have a
-  * language component or has an empty country component
-  */
-  public static Locale parseLocale(String locale, String variant) {
-    Locale ret = null;
-    String language = locale;
-    String country = null;
-    int index = -1;
-
-    if (((index = locale.indexOf(HYPHEN)) > -1)
-      || ((index = locale.indexOf(UNDERSCORE)) > -1)) {
-      language = locale.substring(0, index);
-      country = locale.substring(index+1);
-    }
+    private static final String REQUEST = "request";
 
-    if ((language == null) || (language.length() == 0)) {
-      throw new IllegalArgumentException(
-      Resources.getMessage("LOCALE_NO_LANGUAGE"));
-    }
+    private static final String SESSION = "session";
 
-    if (country == null) {
-      if (variant != null)
-        ret = new Locale(language, "", variant);
-      else
-        ret = new Locale(language, "");
-    } 
-    else if (country.length() > 0) {
-      if (variant != null)
-        ret = new Locale(language, country, variant);
-      else
-        ret = new Locale(language, country);
-    } 
-    else {
-      throw new IllegalArgumentException(
-      Resources.getMessage("LOCALE_EMPTY_COUNTRY"));
-    }
+    private static final String APPLICATION = "application";
 
-    return ret;
-  }
-
-
-  /*
-  * Stores the given locale in the response object of the given page
-  * context, and stores the locale's associated charset in the
-  * javax.servlet.jsp.jstl.fmt.request.charset session attribute, which
-  * may be used by the <requestEncoding> action in a page invoked by a
-  * form included in the response to set the request charset to the same as
-  * the response charset (this makes it possible for the container to
-  * decode the form parameter values properly, since browsers typically
-  * encode form field values using the response's charset).
-  *
-  * @param pageContext the page context whose response object is assigned
-  * the given locale
-  * @param locale the response locale
-  */
-  static void setResponseLocale(PageContext pc, Locale locale) {
-    // set response locale
-    ServletResponse response = pc.getResponse();
-    response.setLocale(locale);
-
-    // get response character encoding and store it in session attribute
-    if (pc.getSession() != null) {
-      try {
-        pc.setAttribute(REQUEST_CHAR_SET, response.getCharacterEncoding(),
-          PageContext.SESSION_SCOPE);
-      } 
-      catch (IllegalStateException ex) { 
-        // invalidated session ignored
-      }
-    }
-  }
-
-  /*
-  * Returns the formatting locale to use with the given formatting action
-  * in the given page.
-  *
-  * @param pc The page context containing the formatting action
-  * @param fromTag The formatting action
-  * @param format <tt>true</tt> if the formatting action is of type
-  * <formatXXX> (as opposed to <parseXXX>), and <tt>false</tt> otherwise
-  * (if set to <tt>true</tt>, the formatting locale that is returned by
-  * this method is used to set the response locale).
-  *
-  * @param avail the array of available locales
-  *
-  * @return the formatting locale to use
-  */
-  static Locale getFormattingLocale(PageContext pc, Tag fromTag, 
-    boolean format, Locale[] avail) {
-
-    LocalizationContext locCtxt = null;
-
-    /*
-    // Get formatting locale from enclosing <fmt:bundle>
-    Tag parent = findAncestorWithClass(fromTag, BundleSupport.class);
-    if (parent != null) {
-    /*
-    * use locale from localization context established by parent
-    * <fmt:bundle> action, unless that locale is null
-    * /
-    locCtxt = ((BundleSupport) parent).getLocalizationContext();
-    if (locCtxt.getLocale() != null) {
-    if (format) {
-    setResponseLocale(pc, locCtxt.getLocale());
-    }
-    return locCtxt.getLocale();
-    }
-    }
-    */
+    private static final char HYPHEN = '-';
+
+    private static final char UNDERSCORE = '_';
+
+    private static final Locale EMPTY_LOCALE = new Locale("", "");
+
+    static final String REQUEST_CHAR_SET = "javax.servlet.jsp.jstl.fmt.request.charset";
 
-    // Use locale from default I18N localization context, unless it is null
-    if ((locCtxt = getLocalizationContext(pc)) != null) {
-      if (locCtxt.getLocale() != null) {
-        if (format) {
-          setResponseLocale(pc, locCtxt.getLocale());
+    /**
+     * Converts the given string description of a scope to the corresponding
+     * PageContext constant.
+     * 
+     * The validity of the given scope has already been checked by the
+     * appropriate TLV.
+     * 
+     * @param scope String description of scope
+     * 
+     * @return PageContext constant corresponding to given scope description
+     */
+    public static int getScope(String scope) {
+        int ret = PageContext.PAGE_SCOPE; // default
+
+        if (REQUEST.equalsIgnoreCase(scope)) {
+            ret = PageContext.REQUEST_SCOPE;
+        } else if (SESSION.equalsIgnoreCase(scope)) {
+            ret = PageContext.SESSION_SCOPE;
+        } else if (APPLICATION.equalsIgnoreCase(scope)) {
+            ret = PageContext.APPLICATION_SCOPE;
+        }
+        return ret;
+    }
+
+    /**
+     * HttpServletRequest.getLocales() returns the server's default locale if
+     * the request did not specify a preferred language. We do not want this
+     * behavior, because it prevents us from using the fallback locale. We
+     * therefore need to return an empty Enumeration if no preferred locale has
+     * been specified. This way, the logic for the fallback locale will be able
+     * to kick in.
+     */
+    public static Enumeration getRequestLocales(HttpServletRequest request) {
+        Enumeration values = request.getHeaders("accept-language");
+        if (values.hasMoreElements()) {
+            // At least one "accept-language". Simply return
+            // the enumeration returned by request.getLocales().
+            // System.out.println("At least one accept-language");
+            return request.getLocales();
+        } else {
+            // No header for "accept-language". Simply return
+            // the empty enumeration.
+            // System.out.println("No accept-language");
+            return values;
         }
-        return locCtxt.getLocale();
-      }
     }
 
-    /*
-    * Establish formatting locale by comparing the preferred locales
-    * (in order of preference) against the available formatting
-    * locales, and determining the best matching locale.
-    */
-    Locale match = null;
-    Locale pref = getLocale(pc, Config.FMT_LOCALE);
-    if (pref != null) {
-      // Preferred locale is application-based
-      match = findFormattingMatch(pref, avail);
-    } 
-    else {
-      // Preferred locales are browser-based 
-      match = findFormattingMatch(pc, avail);
-    }
-    if (match == null) {
-      //Use fallback locale.
-      pref = getLocale(pc, Config.FMT_FALLBACK_LOCALE);
-      if (pref != null) {
-        match = findFormattingMatch(pref, avail);
-      }
-    }
-    if (format && (match != null)) {
-      setResponseLocale(pc, match);
-    }
+    /**
+     * See parseLocale(String, String) for details.
+     */
+    public static Locale parseLocale(String locale) {
+        return parseLocale(locale, null);
+    }
+
+    /**
+     * Parses the given locale string into its language and (optionally) country
+     * components, and returns the corresponding <tt>java.util.Locale</tt>
+     * object.
+     * 
+     * If the given locale string is null or empty, the runtime's default locale
+     * is returned.
+     * 
+     * @param locale the locale string to parse
+     * @param variant the variant
+     * 
+     * @return <tt>java.util.Locale</tt> object corresponding to the given
+     * locale string, or the runtime's default locale if the locale string is
+     * null or empty
+     * 
+     * @throws IllegalArgumentException if the given locale does not have a
+     * language component or has an empty country component
+     */
+    public static Locale parseLocale(String locale, String variant) {
+        Locale ret = null;
+        String language = locale;
+        String country = null;
+        int index = -1;
+
+        if (((index = locale.indexOf(HYPHEN)) > -1)
+                || ((index = locale.indexOf(UNDERSCORE)) > -1)) {
+            language = locale.substring(0, index);
+            country = locale.substring(index + 1);
+        }
 
-    return match;
-  }
-
-  /**
-  * Setup the available formatting locales that will be used
-  * by getFormattingLocale(PageContext).
-  */
-  static Locale[] availableFormattingLocales;
-  static {
-    Locale[] dateLocales = DateFormat.getAvailableLocales();
-    Locale[] numberLocales = NumberFormat.getAvailableLocales();
-    Vector vec = new Vector(dateLocales.length);
-    for (int i=0; i<dateLocales.length; i++) {
-      for (int j=0; j<numberLocales.length; j++) {
-        if (dateLocales[i].equals(numberLocales[j])) {
-          vec.add(dateLocales[i]);
-          break;
+        if ((language == null) || (language.length() == 0)) {
+            throw new IllegalArgumentException(Resources
+                    .getMessage("LOCALE_NO_LANGUAGE"));
         }
-      }
-    }
-    availableFormattingLocales = new Locale[vec.size()];
-    availableFormattingLocales = (Locale[])vec.toArray(availableFormattingLocales);
-    /*
-    for (int i=0; i<availableFormattingLocales.length; i++) {
-    System.out.println("AvailableLocale[" + i + "] " + availableFormattingLocales[i]);
-    }
-    */
-  }
-
-  /*
-  * Returns the formatting locale to use when <fmt:message> is used
-  * with a locale-less localization context.
-  *
-  * @param pc The page context containing the formatting action
-  * @return the formatting locale to use
-  */
-  static Locale getFormattingLocale(PageContext pc) {
-    /*
-    * Establish formatting locale by comparing the preferred locales
-    * (in order of preference) against the available formatting
-    * locales, and determining the best matching locale.
-    */
-    Locale match = null;
-    Locale pref = getLocale(pc, Config.FMT_LOCALE);
-    if (pref != null) {
-      // Preferred locale is application-based
-      match = findFormattingMatch(pref, availableFormattingLocales);
-    }
-    else {
-      // Preferred locales are browser-based 
-      match = findFormattingMatch(pc, availableFormattingLocales);
-    }
-    if (match == null) {
-      //Use fallback locale.
-      pref = getLocale(pc, Config.FMT_FALLBACK_LOCALE);
-      if (pref != null) {
-        match = findFormattingMatch(pref, availableFormattingLocales);
-      }
-    }
-    if (match != null) {
-      setResponseLocale(pc, match);
-    }
 
-    return match;
-  }
-
-  /*
-  * Returns the locale specified by the named scoped attribute or context
-  * configuration parameter.
-  *
-  * <p> The named scoped attribute is searched in the page, request,
-  * session (if valid), and application scope(s) (in this order). If no such
-  * attribute exists in any of the scopes, the locale is taken from the
-  * named context configuration parameter.
-  *
-  * @param pageContext the page in which to search for the named scoped
-  * attribute or context configuration parameter
-  * @param name the name of the scoped attribute or context configuration
-  * parameter
-  *
-  * @return the locale specified by the named scoped attribute or context
-  * configuration parameter, or <tt>null</tt> if no scoped attribute or
-  * configuration parameter with the given name exists
-  */
-  static Locale getLocale(PageContext pageContext, String name) {
-    Locale loc = null;
-
-    Object obj = Config.find(pageContext, name);
-    if (obj != null) {
-      if (obj instanceof Locale) {
-        loc = (Locale) obj;
-      }
-      else {
-        loc = parseLocale((String) obj);
-      }
-    }
+        if (country == null) {
+            if (variant != null) {
+                ret = new Locale(language, "", variant);
+            } else {
+                ret = new Locale(language, "");
+            }
+        } else if (country.length() > 0) {
+            if (variant != null) {
+                ret = new Locale(language, country, variant);
+            } else {
+                ret = new Locale(language, country);
+            }
+        } else {
+            throw new IllegalArgumentException(Resources
+                    .getMessage("LOCALE_EMPTY_COUNTRY"));
+        }
 
-    return loc;
-  }
-
-
-  //*********************************************************************
-  // Private utility methods
-
-  /*
-  * Determines the client's preferred locales from the request, and compares
-  * each of the locales (in order of preference) against the available
-  * locales in order to determine the best matching locale.
-  *
-  * @param pageContext Page containing the formatting action
-  * @param avail Available formatting locales
-  *
-  * @return Best matching locale, or <tt>null</tt> if no match was found
-  */
-  private static Locale findFormattingMatch(PageContext pageContext,
-    Locale[] avail) {
-    Locale match = null;
-    for (Enumeration enum_ = 
-      Util.getRequestLocales((HttpServletRequest)pageContext.getRequest());
-      enum_.hasMoreElements(); ) {
-      Locale locale = (Locale)enum_.nextElement();
-      match = findFormattingMatch(locale, avail);
-      if (match != null) {
-        break;
-      }
+        return ret;
+    }
+
+    /**
+     * Stores the given locale in the response object of the given page context,
+     * and stores the locale's associated charset in the
+     * javax.servlet.jsp.jstl.fmt.request.charset session attribute, which may
+     * be used by the <requestEncoding> action in a page invoked by a form
+     * included in the response to set the request charset to the same as the
+     * response charset (this makes it possible for the container to decode the
+     * form parameter values properly, since browsers typically encode form
+     * field values using the response's charset).
+     * 
+     * @param pageContext the page context whose response object is assigned the
+     * given locale
+     * @param locale the response locale
+     */
+    static void setResponseLocale(PageContext pc, Locale locale) {
+        // set response locale
+        ServletResponse response = pc.getResponse();
+        response.setLocale(locale);
+
+        // get response character encoding and store it in session attribute
+        if (pc.getSession() != null) {
+            try {
+                pc.setAttribute(REQUEST_CHAR_SET, response
+                        .getCharacterEncoding(), PageContext.SESSION_SCOPE);
+            } catch (IllegalStateException ex) {
+                // invalidated session ignored
+            }
+        }
     }
 
-    return match;
-  }
-
-  /*
-  * Returns the best match between the given preferred locale and the
-  * given available locales.
-  *
-  * The best match is given as the first available locale that exactly
-  * matches the given preferred locale ("exact match"). If no exact match
-  * exists, the best match is given to an available locale that meets
-  * the following criteria (in order of priority):
-  *  - available locale's variant is empty and exact match for both
-  *    language and country
-  *  - available locale's variant and country are empty, and exact match 
-  *    for language.
-  *
-  * @param pref the preferred locale
-  * @param avail the available formatting locales
-  *
-  * @return Available locale that best matches the given preferred locale,
-  * or <tt>null</tt> if no match exists
-  */
-  private static Locale findFormattingMatch(Locale pref, Locale[] avail) {
-    Locale match = null;
-    boolean langAndCountryMatch = false;
-    for (int i=0; i<avail.length; i++) {
-      if (pref.equals(avail[i])) {
-        // Exact match
-        match = avail[i];
-        break;
-      } 
-      else if (!"".equals(pref.getVariant()) &&
-        "".equals(avail[i].getVariant()) &&
-        pref.getLanguage().equals(avail[i].getLanguage()) &&
-        pref.getCountry().equals(avail[i].getCountry())) {
-        // Language and country match; different variant
-        match = avail[i];
-        langAndCountryMatch = true;
-      } 
-      else if (!langAndCountryMatch &&
-        pref.getLanguage().equals(avail[i].getLanguage()) &&
-        ("".equals(avail[i].getCountry()))) {
-        // Language match
+    /**
+     * Returns the formatting locale to use with the given formatting action in
+     * the given page.
+     * 
+     * @param pc The page context containing the formatting action @param
+     * fromTag The formatting action @param format <tt>true</tt> if the
+     * formatting action is of type <formatXXX> (as opposed to <parseXXX>), and
+     * <tt>false</tt> otherwise (if set to <tt>true</tt>, the formatting
+     * locale that is returned by this method is used to set the response
+     * locale).
+     * 
+     * @param avail the array of available locales
+     * 
+     * @return the formatting locale to use
+     */
+    static Locale getFormattingLocale(PageContext pc, Tag fromTag,
+            boolean format, Locale[] avail) {
+
+        LocalizationContext locCtxt = null;
+
+        /*
+         * // Get formatting locale from enclosing <fmt:bundle> Tag parent =
+         * findAncestorWithClass(fromTag, BundleSupport.class); if (parent !=
+         * null) { /* use locale from localization context established by parent
+         * <fmt:bundle> action, unless that locale is null / locCtxt =
+         * ((BundleSupport) parent).getLocalizationContext(); if
+         * (locCtxt.getLocale() != null) { if (format) { setResponseLocale(pc,
+         * locCtxt.getLocale()); } return locCtxt.getLocale(); } }
+         */
+
+        // Use locale from default I18N localization context, unless it is null
+        if ((locCtxt = getLocalizationContext(pc)) != null) {
+            if (locCtxt.getLocale() != null) {
+                if (format) {
+                    setResponseLocale(pc, locCtxt.getLocale());
+                }
+                return locCtxt.getLocale();
+            }
+        }
+
+        /*
+         * Establish formatting locale by comparing the preferred locales (in
+         * order of preference) against the available formatting locales, and
+         * determining the best matching locale.
+         */
+        Locale match = null;
+        Locale pref = getLocale(pc, Config.FMT_LOCALE);
+        if (pref != null) {
+            // Preferred locale is application-based
+            match = findFormattingMatch(pref, avail);
+        } else {
+            // Preferred locales are browser-based
+            match = findFormattingMatch(pc, avail);
+        }
         if (match == null) {
-          match = avail[i];
+            // Use fallback locale.
+            pref = getLocale(pc, Config.FMT_FALLBACK_LOCALE);
+            if (pref != null) {
+                match = findFormattingMatch(pref, avail);
+            }
+        }
+        if (format && (match != null)) {
+            setResponseLocale(pc, match);
         }
-      }
-    }
-    return match;
-  }
-
-  /**
-  * Gets the default I18N localization context.
-  *
-  * @param pc Page in which to look up the default I18N localization context
-  */    
-  public static LocalizationContext getLocalizationContext(PageContext pc) {
-    LocalizationContext locCtxt = null;
-
-    Object obj = Config.find(pc, Config.FMT_LOCALIZATION_CONTEXT);
-    if (obj == null) {
-      return null;
-    }
 
-    if (obj instanceof LocalizationContext) {
-      locCtxt = (LocalizationContext) obj;
-    } 
-    else {
-      // localization context is a bundle basename
-      locCtxt = getLocalizationContext(pc, (String) obj);
-    }
+        return match;
+    }
+
+    /**
+     * Setup the available formatting locales that will be used by
+     * getFormattingLocale(PageContext).
+     */
+    static Locale[] availableFormattingLocales;
+    static {
+        Locale[] dateLocales = DateFormat.getAvailableLocales();
+        Locale[] numberLocales = NumberFormat.getAvailableLocales();
+        Vector vec = new Vector(dateLocales.length);
+        for (int i = 0; i < dateLocales.length; i++) {
+            for (int j = 0; j < numberLocales.length; j++) {
+                if (dateLocales[i].equals(numberLocales[j])) {
+                    vec.add(dateLocales[i]);
+                    break;
+                }
+            }
+        }
+        availableFormattingLocales = new Locale[vec.size()];
+        availableFormattingLocales = (Locale[]) vec
+                .toArray(availableFormattingLocales);
+        /*
+         * for (int i=0; i<availableFormattingLocales.length; i++) {
+         * System.out.println("AvailableLocale[" + i + "] " +
+         * availableFormattingLocales[i]); }
+         */
+    }
+
+    /**
+     * Returns the formatting locale to use when <fmt:message> is used with a
+     * locale-less localization context.
+     * 
+     * @param pc The page context containing the formatting action @return the
+     * formatting locale to use
+     */
+    static Locale getFormattingLocale(PageContext pc) {
+        /*
+         * Establish formatting locale by comparing the preferred locales (in
+         * order of preference) against the available formatting locales, and
+         * determining the best matching locale.
+         */
+        Locale match = null;
+        Locale pref = getLocale(pc, Config.FMT_LOCALE);
+        if (pref != null) {
+            // Preferred locale is application-based
+            match = findFormattingMatch(pref, availableFormattingLocales);
+        } else {
+            // Preferred locales are browser-based
+            match = findFormattingMatch(pc, availableFormattingLocales);
+        }
+        if (match == null) {
+            // Use fallback locale.
+            pref = getLocale(pc, Config.FMT_FALLBACK_LOCALE);
+            if (pref != null) {
+                match = findFormattingMatch(pref, availableFormattingLocales);
+            }
+        }
+        if (match != null) {
+            setResponseLocale(pc, match);
+        }
 
-    return locCtxt;
-  }
-
-  /**
-  * Gets the resource bundle with the given base name, whose locale is
-  * determined as follows:
-  *
-  * Check if a match exists between the ordered set of preferred
-  * locales and the available locales, for the given base name.
-  * The set of preferred locales consists of a single locale
-  * (if the <tt>javax.servlet.jsp.jstl.fmt.locale</tt> configuration
-  * setting is present) or is equal to the client's preferred locales
-  * determined from the client's browser settings.
-  *
-  * <p> If no match was found in the previous step, check if a match
-  * exists between the fallback locale (given by the
-  * <tt>javax.servlet.jsp.jstl.fmt.fallbackLocale</tt> configuration
-  * setting) and the available locales, for the given base name.
-  *
-  * @param pageContext Page in which the resource bundle with the
-  * given base name is requested
-  * @param basename Resource bundle base name
-  *
-  * @return Localization context containing the resource bundle with the
-  * given base name and the locale that led to the resource bundle match,
-  * or the empty localization context if no resource bundle match was found
-  */
-  public static LocalizationContext getLocalizationContext(PageContext pc,
-    String basename) {
-    LocalizationContext locCtxt = null;
-    ResourceBundle bundle = null;
-
-    if ((basename == null) || basename.equals("")) {
-      return new LocalizationContext();
-    }
+        return match;
+    }
+
+    /**
+     * Returns the locale specified by the named scoped attribute or context
+     * configuration parameter.
+     * 
+     * <p> The named scoped attribute is searched in the page, request, session
+     * (if valid), and application scope(s) (in this order). If no such
+     * attribute exists in any of the scopes, the locale is taken from the named
+     * context configuration parameter.
+     * 
+     * @param pageContext the page in which to search for the named scoped
+     * attribute or context configuration parameter @param name the name of the
+     * scoped attribute or context configuration parameter
+     * 
+     * @return the locale specified by the named scoped attribute or context
+     * configuration parameter, or <tt>null</tt> if no scoped attribute or
+     * configuration parameter with the given name exists
+     */
+    static Locale getLocale(PageContext pageContext, String name) {
+        Locale loc = null;
+
+        Object obj = Config.find(pageContext, name);
+        if (obj != null) {
+            if (obj instanceof Locale) {
+                loc = (Locale) obj;
+            } else {
+                loc = parseLocale((String) obj);
+            }
+        }
 
-    // Try preferred locales
-    Locale pref = getLocale(pc, Config.FMT_LOCALE);
-    if (pref != null) {
-      // Preferred locale is application-based
-      bundle = findMatch(basename, pref);
-      if (bundle != null) {
-        locCtxt = new LocalizationContext(bundle, pref);
-      }
-    }
-    else {
-      // Preferred locales are browser-based
-      locCtxt = findMatch(pc, basename);
-    }
+        return loc;
+    }
+
+    // *********************************************************************
+    // Private utility methods
+
+    /**
+     * Determines the client's preferred locales from the request, and compares
+     * each of the locales (in order of preference) against the available
+     * locales in order to determine the best matching locale.
+     * 
+     * @param pageContext Page containing the formatting action @param avail
+     * Available formatting locales
+     * 
+     * @return Best matching locale, or <tt>null</tt> if no match was found
+     */
+    private static Locale findFormattingMatch(PageContext pageContext,
+            Locale[] avail) {
+        Locale match = null;
+        for (Enumeration enum_ = Util
+                .getRequestLocales((HttpServletRequest) pageContext
+                        .getRequest()); enum_.hasMoreElements();) {
+            Locale locale = (Locale) enum_.nextElement();
+            match = findFormattingMatch(locale, avail);
+            if (match != null) {
+                break;
+            }
+        }
 
-    if (locCtxt == null) {
-      // No match found with preferred locales, try using fallback locale
-      pref = getLocale(pc, Config.FMT_FALLBACK_LOCALE);
-      if (pref != null) {
-        bundle = findMatch(basename, pref);
-        if (bundle != null) {
-          locCtxt = new LocalizationContext(bundle, pref);
+        return match;
+    }
+
+    /**
+     * Returns the best match between the given preferred locale and the given
+     * available locales.
+     * 
+     * The best match is given as the first available locale that exactly
+     * matches the given preferred locale ("exact match"). If no exact match
+     * exists, the best match is given to an available locale that meets the
+     * following criteria (in order of priority): - available locale's variant
+     * is empty and exact match for both language and country - available
+     * locale's variant and country are empty, and exact match for language.
+     * 
+     * @param pref the preferred locale @param avail the available formatting
+     * locales
+     * 
+     * @return Available locale that best matches the given preferred locale, or
+     * <tt>null</tt> if no match exists
+     */
+    private static Locale findFormattingMatch(Locale pref, Locale[] avail) {
+        Locale match = null;
+        boolean langAndCountryMatch = false;
+        for (int i = 0; i < avail.length; i++) {
+            if (pref.equals(avail[i])) {
+                // Exact match
+                match = avail[i];
+                break;
+            } else if (!"".equals(pref.getVariant())
+                    && "".equals(avail[i].getVariant())
+                    && pref.getLanguage().equals(avail[i].getLanguage())
+                    && pref.getCountry().equals(avail[i].getCountry())) {
+                // Language and country match; different variant
+                match = avail[i];
+                langAndCountryMatch = true;
+            } else if (!langAndCountryMatch
+                    && pref.getLanguage().equals(avail[i].getLanguage())
+                    && ("".equals(avail[i].getCountry()))) {
+                // Language match
+                if (match == null) {
+                    match = avail[i];
+                }
+            }
         }
-      }
+        return match;
     }
 
-    if (locCtxt == null) {
-      // try using the root resource bundle with the given basename
-      try {
-        bundle = ResourceBundle.getBundle(basename, EMPTY_LOCALE,
-        Thread.currentThread().getContextClassLoader());
-        if (bundle != null) {
-          locCtxt = new LocalizationContext(bundle, null);
+    /**
+     * Gets the default I18N localization context.
+     * 
+     * @param pc Page in which to look up the default I18N localization context
+     */
+    public static LocalizationContext getLocalizationContext(PageContext pc) {
+        LocalizationContext locCtxt = null;
+
+        Object obj = Config.find(pc, Config.FMT_LOCALIZATION_CONTEXT);
+        if (obj == null) {
+            return null;
         }
-      } 
-      catch (MissingResourceException mre) {
-        // do nothing
-      }
-    }
 
-    if (locCtxt != null) {
-      // set response locale
-      if (locCtxt.getLocale() != null) {
-        setResponseLocale(pc, locCtxt.getLocale());
-      }
-    } 
-    else {
-      // create empty localization context
-      locCtxt = new LocalizationContext();
-    }
+        if (obj instanceof LocalizationContext) {
+            locCtxt = (LocalizationContext) obj;
+        } else {
+            // localization context is a bundle basename
+            locCtxt = getLocalizationContext(pc, (String) obj);
+        }
 
-    return locCtxt;
-  }
-
-  /*
-  * Determines the client's preferred locales from the request, and compares
-  * each of the locales (in order of preference) against the available
-  * locales in order to determine the best matching locale.
-  *
-  * @param pageContext the page in which the resource bundle with the
-  * given base name is requested
-  * @param basename the resource bundle's base name
-  *
-  * @return the localization context containing the resource bundle with
-  * the given base name and best matching locale, or <tt>null</tt> if no
-  * resource bundle match was found
-  */
-  private static LocalizationContext findMatch(PageContext pageContext,
-    String basename) {
-    LocalizationContext locCtxt = null;
-
-    // Determine locale from client's browser settings.
-    for (Enumeration enum_ = 
-      Util.getRequestLocales((HttpServletRequest)pageContext.getRequest());
-      enum_.hasMoreElements(); ) {
-      Locale pref = (Locale) enum_.nextElement();
-      ResourceBundle match = findMatch(basename, pref);
-      if (match != null) {
-        locCtxt = new LocalizationContext(match, pref);
-        break;
-      }
-    }
+        return locCtxt;
+    }
+
+    /**
+     * Gets the resource bundle with the given base name, whose locale is
+     * determined as follows:
+     * 
+     * Check if a match exists between the ordered set of preferred locales and
+     * the available locales, for the given base name. The set of preferred
+     * locales consists of a single locale (if the
+     * <tt>javax.servlet.jsp.jstl.fmt.locale</tt> configuration setting is
+     * present) or is equal to the client's preferred locales determined from
+     * the client's browser settings.
+     * 
+     * <p>
+     * If no match was found in the previous step, check if a match exists
+     * between the fallback locale (given by the
+     * <tt>javax.servlet.jsp.jstl.fmt.fallbackLocale</tt> configuration
+     * setting) and the available locales, for the given base name.
+     * 
+     * @param pageContext Page in which the resource bundle with the given base
+     * name is requested
+     * @param basename Resource bundle base name
+     * 
+     * @return Localization context containing the resource bundle with the
+     * given base name and the locale that led to the resource bundle match, or
+     * the empty localization context if no resource bundle match was found
+     */
+    public static LocalizationContext getLocalizationContext(PageContext pc,
+            String basename) {
+        LocalizationContext locCtxt = null;
+        ResourceBundle bundle = null;
+
+        if ((basename == null) || basename.equals("")) {
+            return new LocalizationContext();
+        }
 
-    return locCtxt;
-  }
-
-  /*
-  * Gets the resource bundle with the given base name and preferred locale.
-  * 
-  * This method calls java.util.ResourceBundle.getBundle(), but ignores
-  * its return value unless its locale represents an exact or language match
-  * with the given preferred locale.
-  *
-  * @param basename the resource bundle base name
-  * @param pref the preferred locale
-  *
-  * @return the requested resource bundle, or <tt>null</tt> if no resource
-  * bundle with the given base name exists or if there is no exact- or
-  * language-match between the preferred locale and the locale of
-  * the bundle returned by java.util.ResourceBundle.getBundle().
-  */
-  private static ResourceBundle findMatch(String basename, Locale pref) {
-    ResourceBundle match = null;
-
-    try {
-      ResourceBundle bundle = ResourceBundle.getBundle(basename, pref,
-       Thread.currentThread().getContextClassLoader());
-      Locale avail = bundle.getLocale();
-      if (pref.equals(avail)) {
-        // Exact match
-        match = bundle;
-      } 
-      else {
-        /*
-        * We have to make sure that the match we got is for
-        * the specified locale. The way ResourceBundle.getBundle()
-        * works, if a match is not found with (1) the specified locale,
-        * it tries to match with (2) the current default locale as 
-        * returned by Locale.getDefault() or (3) the root resource 
-        * bundle (basename).
-        * We must ignore any match that could have worked with (2) or (3).
-        * So if an exact match is not found, we make the following extra
-        * tests:
-        *     - avail locale must be equal to preferred locale
-        *     - avail country must be empty or equal to preferred country
-        *       (the equality match might have failed on the variant)
-        */
-        if (pref.getLanguage().equals(avail.getLanguage())
-          && ("".equals(avail.getCountry()) || 
-          pref.getCountry().equals(avail.getCountry()))) {
-          /*
-          * Language match.
-          * By making sure the available locale does not have a 
-          * country and matches the preferred locale's language, we
-          * rule out "matches" based on the container's default
-          * locale. For example, if the preferred locale is 
-          * "en-US", the container's default locale is "en-UK", and
-          * there is a resource bundle (with the requested base
-          * name) available for "en-UK", ResourceBundle.getBundle()
-          * will return it, but even though its language matches
-          * that of the preferred locale, we must ignore it,
-          * because matches based on the container's default locale
-          * are not portable across different containers with
-          * different default locales.
-          */
-          match = bundle;
+        // Try preferred locales
+        Locale pref = getLocale(pc, Config.FMT_LOCALE);
+        if (pref != null) {
+            // Preferred locale is application-based
+            bundle = findMatch(basename, pref);
+            if (bundle != null) {
+                locCtxt = new LocalizationContext(bundle, pref);
+            }
+        } else {
+            // Preferred locales are browser-based
+            locCtxt = findMatch(pc, basename);
+        }
+
+        if (locCtxt == null) {
+            // No match found with preferred locales, try using fallback locale
+            pref = getLocale(pc, Config.FMT_FALLBACK_LOCALE);
+            if (pref != null) {
+                bundle = findMatch(basename, pref);
+                if (bundle != null) {
+                    locCtxt = new LocalizationContext(bundle, pref);
+                }
+            }
         }
-      }
-    }
-    catch (MissingResourceException mre) {
-    }
 
-    return match;
-  }
+        if (locCtxt == null) {
+            // try using the root resource bundle with the given basename
+            try {
+                bundle = ResourceBundle.getBundle(basename, EMPTY_LOCALE,
+                        Thread.currentThread().getContextClassLoader());
+                if (bundle != null) {
+                    locCtxt = new LocalizationContext(bundle, null);
+                }
+            } catch (MissingResourceException mre) {
+                // do nothing
+            }
+        }
+
+        if (locCtxt != null) {
+            // set response locale
+            if (locCtxt.getLocale() != null) {
+                setResponseLocale(pc, locCtxt.getLocale());
+            }
+        } else {
+            // create empty localization context
+            locCtxt = new LocalizationContext();
+        }
+
+        return locCtxt;
+    }
+
+    /**
+     * Determines the client's preferred locales from the request, and compares
+     * each of the locales (in order of preference) against the available
+     * locales in order to determine the best matching locale.
+     * 
+     * @param pageContext the page in which the resource bundle with the given
+     * base name is requested @param basename the resource bundle's base name
+     * 
+     * @return the localization context containing the resource bundle with the
+     * given base name and best matching locale, or <tt>null</tt> if no
+     * resource bundle match was found
+     */
+    private static LocalizationContext findMatch(PageContext pageContext,
+            String basename) {
+        LocalizationContext locCtxt = null;
+
+        // Determine locale from client's browser settings.
+        for (Enumeration enum_ = Util
+                .getRequestLocales((HttpServletRequest) pageContext
+                        .getRequest()); enum_.hasMoreElements();) {
+            Locale pref = (Locale) enum_.nextElement();
+            ResourceBundle match = findMatch(basename, pref);
+            if (match != null) {
+                locCtxt = new LocalizationContext(match, pref);
+                break;
+            }
+        }
+
+        return locCtxt;
+    }
+
+    /**
+     * Gets the resource bundle with the given base name and preferred locale.
+     * 
+     * This method calls java.util.ResourceBundle.getBundle(), but ignores its
+     * return value unless its locale represents an exact or language match with
+     * the given preferred locale.
+     * 
+     * @param basename the resource bundle base name @param pref the preferred
+     * locale
+     * 
+     * @return the requested resource bundle, or <tt>null</tt> if no resource
+     * bundle with the given base name exists or if there is no exact- or
+     * language-match between the preferred locale and the locale of the bundle
+     * returned by java.util.ResourceBundle.getBundle().
+     */
+    private static ResourceBundle findMatch(String basename, Locale pref) {
+        ResourceBundle match = null;
+
+        try {
+            ResourceBundle bundle = ResourceBundle.getBundle(basename, pref,
+                    Thread.currentThread().getContextClassLoader());
+            Locale avail = bundle.getLocale();
+            if (pref.equals(avail)) {
+                // Exact match
+                match = bundle;
+            } else {
+                /*
+                 * We have to make sure that the match we got is for the
+                 * specified locale. The way ResourceBundle.getBundle() works,
+                 * if a match is not found with (1) the specified locale, it
+                 * tries to match with (2) the current default locale as
+                 * returned by Locale.getDefault() or (3) the root resource
+                 * bundle (basename). We must ignore any match that could have
+                 * worked with (2) or (3). So if an exact match is not found, we
+                 * make the following extra tests: - avail locale must be equal
+                 * to preferred locale - avail country must be empty or equal to
+                 * preferred country (the equality match might have failed on
+                 * the variant)
+                 */
+                if (pref.getLanguage().equals(avail.getLanguage())
+                        && ("".equals(avail.getCountry()) || pref.getCountry()
+                                .equals(avail.getCountry()))) {
+                    /*
+                     * Language match. By making sure the available locale does
+                     * not have a country and matches the preferred locale's
+                     * language, we rule out "matches" based on the container's
+                     * default locale. For example, if the preferred locale is
+                     * "en-US", the container's default locale is "en-UK", and
+                     * there is a resource bundle (with the requested base name)
+                     * available for "en-UK", ResourceBundle.getBundle() will
+                     * return it, but even though its language matches that of
+                     * the preferred locale, we must ignore it, because matches
+                     * based on the container's default locale are not portable
+                     * across different containers with different default
+                     * locales.
+                     */
+                    match = bundle;
+                }
+            }
+        } catch (MissingResourceException mre) {
+        }
+
+        return match;
+    }
 
 }

From 9d78d8b41f41ef356d7bfd882cc4ae9adbf36794 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 17 Aug 2005 23:23:01 +0000
Subject: [PATCH 005/130] Upgrade to Joda-Time 1.1

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@862 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/jsptags/project.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/JodaTimeContrib/jsptags/project.xml b/JodaTimeContrib/jsptags/project.xml
index 0b0dbe651..7f792a68e 100644
--- a/JodaTimeContrib/jsptags/project.xml
+++ b/JodaTimeContrib/jsptags/project.xml
@@ -91,7 +91,7 @@
     <dependency>
       <groupId>joda-time</groupId>
       <artifactId>joda-time</artifactId>
-      <version>1.0</version>
+      <version>1.1</version>
     </dependency>
 
     <dependency>

From 265440cfa70091550d8c5068498f9b53ea4e534b Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 17 Aug 2005 23:23:22 +0000
Subject: [PATCH 006/130] Improve documentation

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@863 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../jsptags/xdocs/licensecover.xml            |  38 +++
 JodaTimeContrib/jsptags/xdocs/navigation.xml  |  25 +-
 JodaTimeContrib/jsptags/xdocs/tasks.xml       |  17 +-
 JodaTimeContrib/jsptags/xdocs/userguide.xml   | 235 ++++++++++++++++++
 4 files changed, 284 insertions(+), 31 deletions(-)
 create mode 100644 JodaTimeContrib/jsptags/xdocs/licensecover.xml
 create mode 100644 JodaTimeContrib/jsptags/xdocs/userguide.xml

diff --git a/JodaTimeContrib/jsptags/xdocs/licensecover.xml b/JodaTimeContrib/jsptags/xdocs/licensecover.xml
new file mode 100644
index 000000000..f697b44c7
--- /dev/null
+++ b/JodaTimeContrib/jsptags/xdocs/licensecover.xml
@@ -0,0 +1,38 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+
+<document>
+ <properties>
+  <title>Java date and time API - JSP tags - License</title>
+  <author email="scolebourne@joda.org">Stephen Colebourne</author>
+ </properties>
+
+<body>
+
+<section name="License information">
+<p>
+Joda-Time source code is released under the business-friendly
+<a href="license.html">Apache 2.0 license</a>.
+This is the same license as <a href="http://ant.apache.org">Ant</a>,
+<a href="http://www.springframework.org">Spring</a>,
+<a href="http://tomcat.apache.org">Tomcat</a> and
+<a href="http://jakarta.apache.org">Jakarta</a>.
+</p>
+<p>
+The JSP tags contributed library is an edited version of code originally
+from <a href="http://jakarta.apache.org/taglibs">Jakarta Taglibs</a>.
+As a result, the NOTICE file contains the Apache information clause
+as well as the Joda-Time information clause as follows:
+<source>
+=============================================================================
+= NOTICE file corresponding to section 4d of the Apache License Version 2.0 =
+=============================================================================
+This product includes software developed by
+The Apache Software Foundation (http://www.apache.org/).
+This product includes software developed by
+Joda.org (http://www.joda.org/).
+</source>
+</p>
+</section>
+
+</body>
+</document>
diff --git a/JodaTimeContrib/jsptags/xdocs/navigation.xml b/JodaTimeContrib/jsptags/xdocs/navigation.xml
index 8b89b944e..aa43855c5 100644
--- a/JodaTimeContrib/jsptags/xdocs/navigation.xml
+++ b/JodaTimeContrib/jsptags/xdocs/navigation.xml
@@ -8,32 +8,11 @@
   <body>
     <menu name="Joda Time">
       <item name="Overview" href="index.html"/>
-<!--      <item name="Quick start guide" href="/quickstart.html"/> -->
-<!--      <item name="Users guide" href="/userguide.html"/> -->
-<!--      <item name="FAQ" href="/faq.html"/> -->
+      <item name="Users guide" href="userguide.html"/>
       <item name="Javadoc (Release)" href="/api-release/index.html"/>
-      <item name="License" href="/license.html"/>
+      <item name="License" href="licensecover.html"/>
       <item name="Download" href="http://sourceforge.net/project/showfiles.php?group_id=97367"/>
     </menu>
-<!--
-    <menu name="Key concepts">
-      <item name="Instant" href="/key_instant.html"/>
-      <item name="Partial" href="/key_partial.html"/>
-      <item name="Interval" href="/key_interval.html"/>
-      <item name="Duration" href="/key_duration.html"/>
-      <item name="Period" href="/key_period.html"/>
-      <item name="Chronology" href="/key_chronology.html"/>
-    </menu>
-    
-    <menu name="Chronologies">
-      <item name="ISO8601" href="/cal_iso.html"/>
-      <item name="Buddhist" href="/cal_buddhist.html"/>
-      <item name="Coptic" href="/cal_coptic.html"/>
-      <item name="Gregorian" href="/cal_gregorian.html"/>
-      <item name="GregorianJulian" href="/cal_gj.html"/>
-      <item name="Julian" href="/cal_julian.html"/>
-    </menu>
--->    
     <menu name="Development">
       <item name="Sourceforge" href="http://sourceforge.net/projects/joda-time/"/>
 <!--      <item name="Test results" href="/junit-report.html"/> -->
diff --git a/JodaTimeContrib/jsptags/xdocs/tasks.xml b/JodaTimeContrib/jsptags/xdocs/tasks.xml
index ddd9d16ad..7fbaa135d 100644
--- a/JodaTimeContrib/jsptags/xdocs/tasks.xml
+++ b/JodaTimeContrib/jsptags/xdocs/tasks.xml
@@ -1,18 +1,19 @@
 <?xml version="1.0"?>
 
 <document>
+ <properties>
+  <title>Java date and time API - JSP tags - Tasks outstanding</title>
+  <author email="scolebourne@users.sourceforge.net">Stephen Colebourne</author>
+ </properties>
 
-  <properties>
-    <title>Joda Time JSP tags support - Tasks outstanding</title>
-    <author email="scolebourne@users.sourceforge.net">Stephen Colebourne</author>
-  </properties>
+ <body>
 
-  <body>
-    <section name="Tasks outstanding">
+<section name="Tasks outstanding">
 <p>
 The project needs a release!
 Contact the mailing lists for more details or to help.
 </p>
-    </section>
-  </body>
+</section>
+
+ </body>
 </document>
diff --git a/JodaTimeContrib/jsptags/xdocs/userguide.xml b/JodaTimeContrib/jsptags/xdocs/userguide.xml
new file mode 100644
index 000000000..81084afa2
--- /dev/null
+++ b/JodaTimeContrib/jsptags/xdocs/userguide.xml
@@ -0,0 +1,235 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+
+<document>
+ <properties>
+  <title>Java date and time API - JSP tags - User Guide</title>
+  <author email="newsham@hawaii.rr.com">Jim Newsham</author>
+  <author email="scolebourne@users.sourceforge.net">Stephen Colebourne</author>
+ </properties>
+<body>
+
+<!-- ========================================================================= -->
+
+<section name="Introduction">
+<p>
+Joda-Time JSP tags provide a JSTL-like set of tags to format and parse
+Joda-Time based date and time objects.
+</p>
+<p>
+The JSTL fmt tags work with java.util.Date and java.util.TimeZone objects.
+The tags in this library work with Joda-Time DateTime, ReadableInstant,
+ReadablePartial, and DateTimeZone objects.
+Otherwise, the two libraries are very similar, thus you can refer to standard
+JSTL books and documentation to supplement this document.
+</p>
+
+<!-- ========================================================================= -->
+
+<subsection name="Setup">
+<p>
+You will need a servlet container which supports Servlet 2.4, JSP 2.0, JSTL 1.1.
+One such container is <a href="http://tomcat.apache.org">Tomcat 5</a>.
+</p>
+<p>
+The simplest setup is to copy the joda-time-1.1.jar and joda-time-jsptags-1.0.jar
+to the WEB-INF/lib directory of your web application.
+</p>
+<p>
+You then need to declare the library as follows at the top of your jsp pages:
+<source>
+&lt;%@taglib prefix="joda" uri="http://www.joda.org/joda/time/tags" %&gt;
+</source>
+</p>
+</subsection>
+</section>
+
+<!-- ========================================================================= -->
+
+<section name="Format tag">
+<p>
+This tag formats ReadableInstant (including DateTime) and ReadablePartial
+(including YearMonthDay and TimeOfDay) objects.
+The time zone may be specified using an attribute, an enclosing &lt;joda:dateTimeZone/&gt; tag,
+preceding &lt;joda:timeZone/&gt; tag, or via the "org.joda.time.dateTimeZone" scoped variable.
+</p>
+<p>
+The tag may be used in one of two ways.
+The simplest way is to output directly to the HTTP response.
+The second way is to set the var and scope attributes and set the value of a variable.
+</p>
+<p>
+Example: 
+<source>
+  &lt;% pageContext.setAttribute("now", new org.joda.time.DateTime()); %&gt;
+  &lt;joda:format value="${now}" style="SM" /&gt;
+</source>
+</p>
+<p>
+<table>
+<tr>
+ <th colspan="2">Attributes</th>
+</tr>
+<tr>
+ <td>value (required)</td>
+ <td>Must be a ReadableInstant or ReadablePartial</td>
+</tr>
+<tr>
+ <td>var</td>
+ <td>The scoped variable to set</td>
+</tr>
+<tr>
+ <td>scope</td>
+ <td>The scope of the variable to set</td>
+</tr>
+<tr>
+ <td>locale</td>
+ <td>The locale to use for formatting</td>
+</tr>
+<tr>
+ <td>style</td>
+ <td>The style to use for formatting (two characters, one for date, one for time, from S=Short, M=Medium, L=Long, F=Full, -=None)</td>
+</tr>
+<tr>
+ <td>pattern</td>
+ <td>The pattern to use for formatting (see Joda format documentation for recognized pattern strings)</td>
+</tr>
+<tr>
+ <td>dateTimeZone</td>
+ <td>The time zone to use for formatting</td>
+</tr>
+</table>
+</p>
+</section>
+
+<!-- ========================================================================= -->
+
+<section name="ParseDateTime tag">
+<p>
+This tag parses a String into a DateTime object.
+The time zone may be specified using an attribute, an enclosing &lt;joda:dateTimeZone/&gt; tag,
+preceding &lt;joda:timeZone/&gt; tag, or via the "org.joda.time.dateTimeZone" scoped variable.
+</p>
+<p>
+The tag may be used in one of two ways.
+The simplest way is to parse the input and then directly format the output to the HTTP response.
+The second way, and more usual way, is to set the var and scope attributes and
+set the value of a variable with the results of the parse.
+</p>
+<p>
+Example: 
+<source>
+  &lt;joda:parseDateTime var="parsed" pattern="yy/M/d" value="05/11/19" /&gt;
+  &lt;joda:format value="${parsed}" style="L-" /&gt;
+</source>
+</p>
+<p>
+<table>
+<tr>
+ <th colspan="2">Attributes</th>
+</tr>
+<tr>
+ <td>value (required; unless value is nested within tag)</td>
+ <td>Must be a string which can be parsed into a DateTime according to the parsing options specified</td>
+</tr>
+<tr>
+ <td>var</td>
+ <td>The scoped variable to set</td>
+</tr>
+<tr>
+ <td>scope</td>
+ <td>The scope of the variable to set</td>
+</tr>
+<tr>
+ <td>locale</td>
+ <td>The locale to use for parsing</td>
+</tr>
+<tr>
+ <td>style</td>
+ <td>The style to use for parsing (two characters, one for date, one for time, from S=Short, M=Medium, L=Long, F=Full, -=None)</td>
+</tr>
+<tr>
+ <td>pattern</td>
+ <td>The pattern to use for parsing (see Joda format documentation for recognized pattern strings)</td>
+</tr>
+<tr>
+ <td>dateTimeZone</td>
+ <td>The time zone to use for parsing</td>
+</tr>
+</table>
+</p>
+</section>
+
+<!-- ========================================================================= -->
+
+<section name="DateTimeZone tag">
+<p>
+This tag sets the default time zone to use for all nested tags.
+The &lt;joda:format /&gt; tag may override this value with an explicit dateTimeZone attribute.
+</p>
+<p>
+Example: 
+<source>
+  &lt;% pageContext.setAttribute("now", new DateTime()); %&gt;
+  &lt;% pageContext.setAttribute("bkk", DateTimeZone.forID("Asia/Bangkok")); %&gt;
+  &lt;joda:dateTimeZone value="${bkk}"&gt;
+    &lt;joda:format value="${datetime}" /&gt;
+  &lt;/joda:dateTimeZone&gt;
+</source>
+</p>
+<p>
+<table>
+<tr>
+ <th colspan="2">Attributes</th>
+</tr>
+<tr>
+ <td>value (required)</td>
+ <td>Must be a DateTimeZone object, or an id of a zone</td>
+</tr>
+</table>
+</p>
+</section>
+
+<!-- ========================================================================= -->
+
+<section name="SetDateTimeZone tag">
+<p>
+This tag sets the default time zone, either for the remainder of the page, or to a variable.
+If var is not specified, the zone will be stored in a scoped variable called "org.joda.time.dateTimeZone".
+This acts as a default for all the other tags.
+It will be overridden by a &lt;joda:datetimezone /&gt; tag, or by
+an explicit dateTimeZone attribute on &lt;joda:format /&gt;.
+</p>
+<p>
+Example: 
+<source>
+  &lt;% pageContext.setAttribute("now", new DateTime()); %&gt;
+  &lt;% pageContext.setAttribute("bkk", DateTimeZone.forID("Asia/Bangkok")); %&gt;
+  &lt;joda:dateTimeZone value="${bkk}" /&gt;
+  &lt;joda:format value="${datetime}" /&gt;
+</source>
+</p>
+<p>
+<table>
+<tr>
+ <th colspan="2">Attributes</th>
+</tr>
+<tr>
+ <td>value (required)</td>
+ <td>Must be a DateTimeZone object, or an id of a zone</td>
+</tr>
+<tr>
+ <td>var</td>
+ <td>The scoped variable to set</td>
+</tr>
+<tr>
+ <td>scope</td>
+ <td>The scope of the variable to set</td>
+</tr>
+</table>
+</p>
+</section>
+
+<!-- ========================================================================= -->
+
+</body>
+</document>

From b9ccb8d9579f56e02968ae771e0871b263fa3c29 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Thu, 18 Aug 2005 19:46:04 +0000
Subject: [PATCH 007/130] Improve documentation

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@864 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/jsptags/build.xml            |  2 +-
 JodaTimeContrib/jsptags/project.xml          |  2 +-
 JodaTimeContrib/jsptags/xdocs/index.xml      | 81 ++++++++++++++++++++
 JodaTimeContrib/jsptags/xdocs/navigation.xml |  4 +
 JodaTimeContrib/jsptags/xdocs/userguide.xml  |  4 +-
 5 files changed, 89 insertions(+), 4 deletions(-)
 create mode 100644 JodaTimeContrib/jsptags/xdocs/index.xml

diff --git a/JodaTimeContrib/jsptags/build.xml b/JodaTimeContrib/jsptags/build.xml
index b1815ea5d..f60df0298 100644
--- a/JodaTimeContrib/jsptags/build.xml
+++ b/JodaTimeContrib/jsptags/build.xml
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 
 <project name='jodatime-tags' default='dist'>
- <property name="jodatime-tags.version" value="0.1"/>
+ <property name="jodatime-tags.version" value="0.8"/>
  <property name="build.dir" value="build"/>
  <property name="lib.dir" value="lib"/>
 
diff --git a/JodaTimeContrib/jsptags/project.xml b/JodaTimeContrib/jsptags/project.xml
index 7f792a68e..6cf2bf5e4 100644
--- a/JodaTimeContrib/jsptags/project.xml
+++ b/JodaTimeContrib/jsptags/project.xml
@@ -7,7 +7,7 @@
   <id>joda-time-jsptags</id>
   <groupId>joda-time</groupId>
   <name>Joda time JSP tags support</name>
-  <currentVersion>0.5</currentVersion>
+  <currentVersion>0.8</currentVersion>
   <shortDescription>Joda time JSP tags support</shortDescription>
   <description>
     Contribution to Joda-Time that adds JSP tags support
diff --git a/JodaTimeContrib/jsptags/xdocs/index.xml b/JodaTimeContrib/jsptags/xdocs/index.xml
new file mode 100644
index 000000000..c876450f3
--- /dev/null
+++ b/JodaTimeContrib/jsptags/xdocs/index.xml
@@ -0,0 +1,81 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+
+<document>
+
+ <properties>
+  <title>Java date and time API - JSP tags - Home</title>
+  <author email="scolebourne@users.sourceforge.net">Stephen Colebourne</author>
+ </properties>
+
+ <body>
+
+<section name="Joda Time - JSP tags">
+<p>
+<a href="/index.html">Joda-Time</a> provides a complete quality alternative
+to the JDK date and time classes.
+However, this causes issues when working with other libraries that expect
+a JDK object, such as the JSTL JSP tag library.
+</p>
+<p>
+To solve this problem, the Joda-Time JSP tags contributed project provides
+a JSTL-like set of tags that format and parse Joda-Time based date and time
+objects instead of JDK based objects.
+</p>
+<p>
+As a flavour of the tags, here's how to format a Joda-Time object in JSP:
+<source>
+  &lt;%@taglib prefix="joda" uri="http://www.joda.org/joda/time/tags" %&gt;
+  &lt;% pageContext.setAttribute("now", new org.joda.time.DateTime()); %&gt;
+  <b>&lt;joda:format value="${now}" style="SM" /&gt;</b>
+</source>
+Version 0.8 was released on 2005-nn-nn -
+<a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=104212">Download now</a>
+</p>
+</section>
+
+
+<section name="Documentation">
+<p>
+Various documentation is available:
+<ul>
+<li>The user guide and tag description - <a href="userguide.html">user guide</a></li>
+<li>The javadoc for the <a href="api-release/index.html">current release</a></li>
+<li>The javadoc for the <a href="apidocs/index.html">latest CVS</a></li>
+<!--li>A <a href="faq.html">FAQ</a> list</li-->
+<li>The <a href="http://cvs.sourceforge.net/viewcvs.py/joda-time/JodaTimeContrib/jsptags">CVS repository</a></li>
+</ul>
+</p>
+</section>
+
+
+<section name="Releases">
+<p>
+<a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=104212">Release 0.8</a>
+is the current latest release.
+This release is a beta release and may have bugs.
+</p>
+<p>
+The dependencies are Joda-Time 1.1, the Servlet 2.4 API, the JSP 2.0 API,
+and JSTL 1.1 API.
+We recommend JDK 1.4 or later, and have performed no testing on earlier JDKs.
+</p>
+<p>
+We will support the 1.x product line using standard Java mechanisms.
+The main public API will remain backwards compatible for both source and binary.
+The version number will change to 2.0 to indicate a change in compatibility.
+</p>
+</section>
+
+
+<section name="Support">
+<p>
+The Joda-Time JSP tags library was contributed to Joda-Time by Jim Newsham.
+It is based on the code at <a href="http://jakarta.apache.org/taglibs">Jakarta Taglibs</a>.
+</p>
+<p>
+For support on bugs, using the library or to volunteer please contact the <a href="mail-lists.html">mailing list</a>
+(or email direct to the list via <a href="mailto:joda-interest@lists.sourceforge.net">joda-interest@lists.sourceforge.net</a>).
+</p>
+</section>
+</body>
+</document>
diff --git a/JodaTimeContrib/jsptags/xdocs/navigation.xml b/JodaTimeContrib/jsptags/xdocs/navigation.xml
index aa43855c5..650d05bf8 100644
--- a/JodaTimeContrib/jsptags/xdocs/navigation.xml
+++ b/JodaTimeContrib/jsptags/xdocs/navigation.xml
@@ -6,6 +6,10 @@
   <organizationLogo href="">Joda.org</organizationLogo>
 
   <body>
+    <links>
+      <item name="Joda-Time" href="/index.html"/>
+      <item name="JSP tags" href="/contrib/jsptags/index.html"/>
+    </links>
     <menu name="Joda Time">
       <item name="Overview" href="index.html"/>
       <item name="Users guide" href="userguide.html"/>
diff --git a/JodaTimeContrib/jsptags/xdocs/userguide.xml b/JodaTimeContrib/jsptags/xdocs/userguide.xml
index 81084afa2..6badaebff 100644
--- a/JodaTimeContrib/jsptags/xdocs/userguide.xml
+++ b/JodaTimeContrib/jsptags/xdocs/userguide.xml
@@ -12,7 +12,7 @@
 
 <section name="Introduction">
 <p>
-Joda-Time JSP tags provide a JSTL-like set of tags to format and parse
+<a href="/index.html">Joda-Time</a> JSP tags provide a JSTL-like set of tags to format and parse
 Joda-Time based date and time objects.
 </p>
 <p>
@@ -31,7 +31,7 @@ You will need a servlet container which supports Servlet 2.4, JSP 2.0, JSTL 1.1.
 One such container is <a href="http://tomcat.apache.org">Tomcat 5</a>.
 </p>
 <p>
-The simplest setup is to copy the joda-time-1.1.jar and joda-time-jsptags-1.0.jar
+The simplest setup is to copy the joda-time-1.1.jar and joda-time-jsptags-0.8.jar
 to the WEB-INF/lib directory of your web application.
 </p>
 <p>

From f713c75b508d1958d6f0a0fb84ebad8a8f3201ec Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 19 Aug 2005 21:47:37 +0000
Subject: [PATCH 008/130] Fix javadoc

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@865 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../org/joda/time/contrib/jsptag/DateTimeZoneSupport.java     | 2 +-
 .../org/joda/time/contrib/jsptag/ParseDateTimeSupport.java    | 3 ++-
 .../jsptags/src/java/org/joda/time/contrib/jsptag/Util.java   | 4 ++--
 3 files changed, 5 insertions(+), 4 deletions(-)

diff --git a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/DateTimeZoneSupport.java b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/DateTimeZoneSupport.java
index b60863f19..1e25e6f73 100644
--- a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/DateTimeZoneSupport.java
+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/DateTimeZoneSupport.java
@@ -98,7 +98,7 @@ public void release() {
      * Otherwise, the time zone configuration setting
      * <tt>org.joda.time.FMT_TIME_ZONE</tt> is used.
      * 
-     * @param pageContext  the page containing the action for which the time zone
+     * @param pc  the page containing the action for which the time zone
      *  needs to be determined
      * @param fromTag  the action for which the time zone needs to be determined
      * 
diff --git a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/ParseDateTimeSupport.java b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/ParseDateTimeSupport.java
index c96a4b5d7..aac4ae94c 100644
--- a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/ParseDateTimeSupport.java
+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/ParseDateTimeSupport.java
@@ -91,8 +91,9 @@ public int doEndTag() throws JspException {
             input = value;
         } else {
             // ... retrieving and trimming our body
-            if (bodyContent != null && bodyContent.getString() != null)
+            if (bodyContent != null && bodyContent.getString() != null) {
                 input = bodyContent.getString().trim();
+            }
         }
 
         if ((input == null) || input.equals("")) {
diff --git a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/Util.java b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/Util.java
index 55730a9bc..a9cda5e33 100644
--- a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/Util.java
+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/Util.java
@@ -174,7 +174,7 @@ public static Locale parseLocale(String locale, String variant) {
      * form parameter values properly, since browsers typically encode form
      * field values using the response's charset).
      * 
-     * @param pageContext the page context whose response object is assigned the
+     * @param pc the page context whose response object is assigned the
      * given locale
      * @param locale the response locale
      */
@@ -470,7 +470,7 @@ public static LocalizationContext getLocalizationContext(PageContext pc) {
      * <tt>javax.servlet.jsp.jstl.fmt.fallbackLocale</tt> configuration
      * setting) and the available locales, for the given base name.
      * 
-     * @param pageContext Page in which the resource bundle with the given base
+     * @param pc Page in which the resource bundle with the given base
      * name is requested
      * @param basename Resource bundle base name
      * 

From ce3ac84dd4bce16522b5a7ce4a6eceb8e1f39b47 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 19 Aug 2005 21:47:57 +0000
Subject: [PATCH 009/130] Improve documentation

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@866 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/jsptags/xdocs/index.xml      | 5 -----
 JodaTimeContrib/jsptags/xdocs/navigation.xml | 4 +---
 2 files changed, 1 insertion(+), 8 deletions(-)

diff --git a/JodaTimeContrib/jsptags/xdocs/index.xml b/JodaTimeContrib/jsptags/xdocs/index.xml
index c876450f3..35ee7a810 100644
--- a/JodaTimeContrib/jsptags/xdocs/index.xml
+++ b/JodaTimeContrib/jsptags/xdocs/index.xml
@@ -59,11 +59,6 @@ The dependencies are Joda-Time 1.1, the Servlet 2.4 API, the JSP 2.0 API,
 and JSTL 1.1 API.
 We recommend JDK 1.4 or later, and have performed no testing on earlier JDKs.
 </p>
-<p>
-We will support the 1.x product line using standard Java mechanisms.
-The main public API will remain backwards compatible for both source and binary.
-The version number will change to 2.0 to indicate a change in compatibility.
-</p>
 </section>
 
 
diff --git a/JodaTimeContrib/jsptags/xdocs/navigation.xml b/JodaTimeContrib/jsptags/xdocs/navigation.xml
index 650d05bf8..692e348f4 100644
--- a/JodaTimeContrib/jsptags/xdocs/navigation.xml
+++ b/JodaTimeContrib/jsptags/xdocs/navigation.xml
@@ -10,7 +10,7 @@
       <item name="Joda-Time" href="/index.html"/>
       <item name="JSP tags" href="/contrib/jsptags/index.html"/>
     </links>
-    <menu name="Joda Time">
+    <menu name="Joda Time JSP tags">
       <item name="Overview" href="index.html"/>
       <item name="Users guide" href="userguide.html"/>
       <item name="Javadoc (Release)" href="/api-release/index.html"/>
@@ -19,8 +19,6 @@
     </menu>
     <menu name="Development">
       <item name="Sourceforge" href="http://sourceforge.net/projects/joda-time/"/>
-<!--      <item name="Test results" href="/junit-report.html"/> -->
-<!--      <item name="Test coverage" href="/jcoverage/index.html"/> -->
       <item name="Mailing lists" href="mail-lists.html"/>
       <item name="Tasks" href="tasks.html"/>
       <item name="CVS" href="http://cvs.sourceforge.net/viewcvs.py/joda-time/JodaTimeContrib/jsptags/"/>

From 38cbf38682fd586f2d61947cb8a6654e90d915c7 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 19 Aug 2005 21:48:36 +0000
Subject: [PATCH 010/130] Improve release scripts

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@867 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/jsptags/build.xml          | 244 +++++++++++++++++----
 JodaTimeContrib/jsptags/project.properties |   2 +-
 JodaTimeContrib/jsptags/project.xml        |  12 +-
 3 files changed, 209 insertions(+), 49 deletions(-)

diff --git a/JodaTimeContrib/jsptags/build.xml b/JodaTimeContrib/jsptags/build.xml
index f60df0298..7c55f5d71 100644
--- a/JodaTimeContrib/jsptags/build.xml
+++ b/JodaTimeContrib/jsptags/build.xml
@@ -1,49 +1,211 @@
 <?xml version="1.0" encoding="UTF-8"?>
 
-<project name='jodatime-tags' default='dist'>
- <property name="jodatime-tags.version" value="0.8"/>
- <property name="build.dir" value="build"/>
- <property name="lib.dir" value="lib"/>
+<!--build.xml generated by maven from project.xml version 0.8
+  on date August 19 2005, time 2215-->
 
- <path id='compile-classpath'>
-  <fileset dir='${lib.dir}'>
-   <include name='*.jar'/>
-  </fileset>
- </path>
+<project default="jar" name="joda-time-jsptags" basedir=".">
+  <!--Load local and user build preferences-->
 
- <target name='compile'>
-  <mkdir dir='${build.dir}'/>
-  <javac srcdir='src/java' destdir='${build.dir}' 
-    classpathref='compile-classpath' debug='true'/>
- </target>
+  <property file="build.properties">
+  </property>
+  <property file="${user.home}/build.properties">
+  </property>
+  <!--Build properties-->
 
- <target name='clean'>
-  <delete dir='${build.dir}'/>
- </target>
+  <property name="defaulttargetdir" value="${basedir}/target">
+  </property>
+  <property name="libdir" value="${user.home}/.maven/repository">
+  </property>
+  <property name="classesdir" value="${basedir}/target/classes">
+  </property>
+  <property name="distdir" value="${basedir}/dist">
+  </property>
+  <property name="javadocdir" value="${basedir}/dist/docs/api">
+  </property>
+  <property name="final.name" value="joda-time-jsptags-0.8">
+  </property>
+  <property name="proxy.host" value="">
+  </property>
+  <property name="proxy.port" value="">
+  </property>
+  <property name="proxy.username" value="">
+  </property>
+  <property name="proxy.password" value="">
+  </property>
+  <path id="build.classpath">
+    <pathelement location="${libdir}/joda-time/jars/joda-time-1.1.jar">
+    </pathelement>
+    <pathelement location="${libdir}/servletapi/jars/servlet-api-2.4.jar">
+    </pathelement>
+    <pathelement location="${libdir}/jspapi/jars/jsp-api-2.0.jar">
+    </pathelement>
+    <pathelement location="${libdir}/jstl/jars/jstl-1.1.2.jar">
+    </pathelement>
+  </path>
+  <target name="init" description="o Initializes some properties">
+    <mkdir dir="${libdir}">
+    </mkdir>
+    <condition property="noget">
+      <equals arg2="only" arg1="${build.sysclasspath}">
+      </equals>
+    </condition>
+    <!--Test if JUNIT is present in ANT classpath-->
 
- <target name='dist' depends='compile'>
-  <copy todir="${build.dir}">
-   <fileset dir="src/java">
-    <include name="**/*.properties"/>
-   </fileset>
-  </copy>
+    <available property="Junit.present" classname="junit.framework.Test">
+    </available>
+    <!--Test if user defined a proxy-->
 
-  <mkdir dir='${build.dir}/META-INF'/>
-  <copy todir="${build.dir}/META-INF">
-   <fileset dir="src/conf">
-    <include name="*.tld"/>
-   </fileset>
-  </copy>
-
-  <jar jarfile="joda-time-tags.jar">
-   <fileset dir="${build.dir}"/>
-   <manifest>
-    <attribute name="Implementation-Title" value="Joda Time Tags"/>
-    <attribute name="Implementation-Version" value="${jodatime-tags.version}"/>
-   </manifest>         
-  </jar>        
- </target>
-
-</project>
-    
+    <condition property="useProxy">
+      <and>
+        <isset property="proxy.host">
+        </isset>
+        <not>
+          <equals trim="true" arg2="" arg1="${proxy.host}">
+          </equals>
+        </not>
+      </and>
+    </condition>
+  </target>
+  <target name="compile" description="o Compile the code" depends="get-deps">
+    <mkdir dir="${classesdir}">
+    </mkdir>
+    <javac destdir="${classesdir}" deprecation="true" debug="true" optimize="false" excludes="**/package.html">
+      <src>
+        <pathelement location="${basedir}/src/java">
+        </pathelement>
+      </src>
+      <classpath refid="build.classpath">
+      </classpath>
+    </javac>
+    <mkdir dir="${classesdir}/meta-inf">
+    </mkdir>
+    <copy todir="${classesdir}/meta-inf">
+      <fileset dir="${basedir}/.">
+        <include name="LICENSE.txt">
+        </include>
+        <include name="NOTICE.txt">
+        </include>
+      </fileset>
+    </copy>
+  </target>
+  <target name="jar" description="o Create the jar" depends="compile,test">
+    <jar jarfile="${defaulttargetdir}/${final.name}.jar" excludes="**/package.html" basedir="${classesdir}">
+    </jar>
+  </target>
+  <target name="clean" description="o Clean up the generated directories">
+    <delete dir="${defaulttargetdir}">
+    </delete>
+    <delete dir="${distdir}">
+    </delete>
+  </target>
+  <target name="dist" description="o Create a distribution" depends="jar, javadoc">
+    <mkdir dir="dist">
+    </mkdir>
+    <copy todir="dist">
+      <fileset dir="${defaulttargetdir}" includes="*.jar">
+      </fileset>
+      <fileset dir="${basedir}" includes="LICENSE*, README*">
+      </fileset>
+    </copy>
+  </target>
+  <target name="test" description="o Run the test cases" if="test.failure" depends="internal-test">
+    <fail message="There were test failures.">
+    </fail>
+  </target>
+  <target name="internal-test" if="Junit.present" depends="junit-present,compile-tests">
+  </target>
+  <target name="junit-present" unless="Junit.present" depends="init">
+    <echo>================================= WARNING ================================</echo>
+    <echo>Junit isn't present in your ${ANT_HOME}/lib directory. Tests not executed.</echo>
+    <echo>==========================================================================</echo>
+  </target>
+  <target name="compile-tests" if="Junit.present" depends="junit-present,compile">
+  </target>
+  <target name="javadoc" description="o Generate javadoc" depends="get-deps">
+    <mkdir dir="${javadocdir}">
+    </mkdir>
+    <tstamp>
+      <format pattern="2005-yyyy" property="year">
+      </format>
+    </tstamp>
+    <property name="copyright" value="Copyright &amp;copy;  Joda.org. All Rights Reserved.">
+    </property>
+    <property name="title" value="Joda time JSP tags support 0.8 API">
+    </property>
+    <javadoc use="true" private="true" destdir="${javadocdir}" author="true" version="true" sourcepath="${basedir}/src/java" packagenames="org.joda.time.contrib.jsptag.*">
+      <classpath>
+        <path refid="build.classpath">
+        </path>
+      </classpath>
+    </javadoc>
+  </target>
+  <target name="get-dep-joda-time.jar" description="o Download the dependency : joda-time.jar" unless="joda-time.jar" depends="init,setProxy,noProxy,get-custom-dep-joda-time.jar">
+    <mkdir dir="${libdir}/joda-time/jars/">
+    </mkdir>
+    <get dest="${libdir}/joda-time/jars/joda-time-1.1.jar" usetimestamp="true" ignoreerrors="true" src="http://www.ibiblio.org/maven/joda-time/jars/joda-time-1.1.jar">
+    </get>
+  </target>
+  <target name="get-custom-dep-joda-time.jar" if="joda-time.jar" depends="init,setProxy,noProxy">
+    <mkdir dir="${libdir}/joda-time/jars/">
+    </mkdir>
+    <get dest="${libdir}/joda-time/jars/joda-time-1.1.jar" usetimestamp="true" ignoreerrors="true" src="${joda-time.jar}">
+    </get>
+  </target>
+  <target name="get-dep-servlet-api.jar" description="o Download the dependency : servlet-api.jar" unless="servlet-api.jar" depends="init,setProxy,noProxy,get-custom-dep-servlet-api.jar">
+    <mkdir dir="${libdir}/servletapi/jars/">
+    </mkdir>
+    <get dest="${libdir}/servletapi/jars/servlet-api-2.4.jar" usetimestamp="true" ignoreerrors="true" src="http://www.ibiblio.org/maven/servletapi/jars/servlet-api-2.4.jar">
+    </get>
+  </target>
+  <target name="get-custom-dep-servlet-api.jar" if="servlet-api.jar" depends="init,setProxy,noProxy">
+    <mkdir dir="${libdir}/servletapi/jars/">
+    </mkdir>
+    <get dest="${libdir}/servletapi/jars/servlet-api-2.4.jar" usetimestamp="true" ignoreerrors="true" src="${servlet-api.jar}">
+    </get>
+  </target>
+  <target name="get-dep-jsp-api.jar" description="o Download the dependency : jsp-api.jar" unless="jsp-api.jar" depends="init,setProxy,noProxy,get-custom-dep-jsp-api.jar">
+    <mkdir dir="${libdir}/jspapi/jars/">
+    </mkdir>
+    <get dest="${libdir}/jspapi/jars/jsp-api-2.0.jar" usetimestamp="true" ignoreerrors="true" src="http://www.ibiblio.org/maven/jspapi/jars/jsp-api-2.0.jar">
+    </get>
+  </target>
+  <target name="get-custom-dep-jsp-api.jar" if="jsp-api.jar" depends="init,setProxy,noProxy">
+    <mkdir dir="${libdir}/jspapi/jars/">
+    </mkdir>
+    <get dest="${libdir}/jspapi/jars/jsp-api-2.0.jar" usetimestamp="true" ignoreerrors="true" src="${jsp-api.jar}">
+    </get>
+  </target>
+  <target name="get-dep-jstl.jar" description="o Download the dependency : jstl.jar" unless="jstl.jar" depends="init,setProxy,noProxy,get-custom-dep-jstl.jar">
+    <mkdir dir="${libdir}/jstl/jars/">
+    </mkdir>
+    <get dest="${libdir}/jstl/jars/jstl-1.1.2.jar" usetimestamp="true" ignoreerrors="true" src="http://www.ibiblio.org/maven/jstl/jars/jstl-1.1.2.jar">
+    </get>
+  </target>
+  <target name="get-custom-dep-jstl.jar" if="jstl.jar" depends="init,setProxy,noProxy">
+    <mkdir dir="${libdir}/jstl/jars/">
+    </mkdir>
+    <get dest="${libdir}/jstl/jars/jstl-1.1.2.jar" usetimestamp="true" ignoreerrors="true" src="${jstl.jar}">
+    </get>
+  </target>
+  <target name="get-deps" unless="noget" depends="get-dep-joda-time.jar,get-dep-servlet-api.jar,get-dep-jsp-api.jar,get-dep-jstl.jar">
+  </target>
+  <target name="setProxy" if="useProxy" depends="init">
+    <!--Proxy settings works only with a JDK 1.2 and higher.-->
 
+    <echo>Proxy used :</echo>
+    <echo>Proxy host [${proxy.host}]</echo>
+    <echo>Proxy port [${proxy.port}]</echo>
+    <echo>Proxy user [${proxy.username}]</echo>
+    <setproxy proxyuser="${proxy.username}" proxyport="${proxy.port}" proxypassword="${proxy.password}" proxyhost="${proxy.host}">
+    </setproxy>
+  </target>
+  <target name="noProxy" unless="useProxy" depends="init">
+    <echo>Proxy not used.</echo>
+  </target>
+  <target name="install-maven">
+    <get dest="${user.home}/maven-install-latest.jar" usetimestamp="true" src="${repo}/maven/maven-install-latest.jar">
+    </get>
+    <unjar dest="${maven.home}" src="${user.home}/maven-install-latest.jar">
+    </unjar>
+  </target>
+</project>
\ No newline at end of file
diff --git a/JodaTimeContrib/jsptags/project.properties b/JodaTimeContrib/jsptags/project.properties
index 3ed694952..b34733815 100644
--- a/JodaTimeContrib/jsptags/project.properties
+++ b/JodaTimeContrib/jsptags/project.properties
@@ -6,7 +6,7 @@ maven.xdoc.date.format = yyyy-MM-dd
 maven.checkstyle.properties=checkstyle.xml
 maven.junit.fork=true
 maven.xdoc.poweredby.image=maven-feather.png
-maven.javadoc.links=http://java.sun.com/products/j2se/1.4/docs/api, http://joda-time.sourceforge.net/api-release
+maven.javadoc.links=http://java.sun.com/products/j2se/1.4/docs/api, http://java.sun.com/j2ee/1.4/docs/api, http://joda-time.sourceforge.net/api-release
 maven.javadoc.public=true
 maven.javadoc.package=false
 maven.javadoc.private=false
diff --git a/JodaTimeContrib/jsptags/project.xml b/JodaTimeContrib/jsptags/project.xml
index 6cf2bf5e4..c1292eb5c 100644
--- a/JodaTimeContrib/jsptags/project.xml
+++ b/JodaTimeContrib/jsptags/project.xml
@@ -1,8 +1,5 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<!-- You are strongly recommended to use ant for compiling and building -->
-<!-- We only use and test maven for website construction -->
-
-<project xmlns="http://maven.apache.org/maven-v3_0_0.xsd">
+<project>
   <pomVersion>3</pomVersion>
   <id>joda-time-jsptags</id>
   <groupId>joda-time</groupId>
@@ -67,7 +64,7 @@
     <url>http://www.joda.org</url>
     <logo>/images/joda.png</logo>
   </organization>
-  <package>org.joda.time.contrib.jsptags</package>
+  <package>org.joda.time.contrib.jsptag</package>
 
   <build>
     <sourceDirectory>src/java</sourceDirectory>
@@ -81,6 +78,7 @@
       <resource>
         <targetPath>meta-inf</targetPath>
         <includes>
+          <include>LICENSE.txt</include>
           <include>NOTICE.txt</include>
         </includes>
       </resource>
@@ -118,12 +116,12 @@
      <report>maven-changes-plugin</report>
      <report>maven-checkstyle-plugin</report>
      <!-- <report>maven-clover-plugin</report> -->
-     <report>maven-jcoverage-plugin</report>
+     <!-- <report>maven-jcoverage-plugin</report> -->
      <report>maven-developer-activity-plugin</report>
      <report>maven-file-activity-plugin</report>
      <report>maven-javadoc-plugin</report>
      <!-- <report>maven-jellydoc-plugin</report> -->
-     <report>maven-junit-report-plugin</report>
+     <!-- <report>maven-junit-report-plugin</report> -->
      <report>maven-jxr-plugin</report>
      <report>maven-license-plugin</report>
      <!--report>maven-linkcheck-plugin</report-->

From 30714b09466e5a95c200db43015141e54fd5d03e Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 19 Aug 2005 22:55:42 +0000
Subject: [PATCH 011/130] Update theme for maven 1.0.2

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@868 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/jsptags/project.properties    |   2 +
 .../jsptags/xdocs/stylesheets/joda-theme.css  | 121 ++++++++++++++++++
 .../jsptags/xdocs/stylesheets/maven-theme.css |   6 +-
 3 files changed, 127 insertions(+), 2 deletions(-)
 create mode 100644 JodaTimeContrib/jsptags/xdocs/stylesheets/joda-theme.css

diff --git a/JodaTimeContrib/jsptags/project.properties b/JodaTimeContrib/jsptags/project.properties
index b34733815..2c82288b7 100644
--- a/JodaTimeContrib/jsptags/project.properties
+++ b/JodaTimeContrib/jsptags/project.properties
@@ -2,6 +2,8 @@
 maven.xdoc.date = navigation-bottom
 maven.xdoc.date.format = yyyy-MM-dd
 # maven.xdoc.version = ${pom.currentVersion}
+maven.xdoc.legend = false;
+maven.xdoc.theme.url = ./style/joda-theme.css
 
 maven.checkstyle.properties=checkstyle.xml
 maven.junit.fork=true
diff --git a/JodaTimeContrib/jsptags/xdocs/stylesheets/joda-theme.css b/JodaTimeContrib/jsptags/xdocs/stylesheets/joda-theme.css
new file mode 100644
index 000000000..5d616b279
--- /dev/null
+++ b/JodaTimeContrib/jsptags/xdocs/stylesheets/joda-theme.css
@@ -0,0 +1,121 @@
+body, td, select, input, li{
+  font-family: Helvetica, Arial, sans-serif;
+  font-size: 13px;
+  background-color: #fff;
+}
+a {
+  text-decoration: none;
+}
+a:link {
+  color:#009;
+}
+a:visited  {
+  color:#009;
+}
+a:active, a:hover {
+  text-decoration: underline;
+}
+a.externalLink, a.externalLink:link, a.externalLink:visited, a.externalLink:active, a.externalLink:hover {
+  background: url(../images/external.png) right center no-repeat;
+  padding-right: 15px;
+}
+a.newWindow, a.newWindow:link, a.newWindow:visited, a.newWindow:active, a.newWindow:hover {
+  background: url(../images/newwindow.png) right center no-repeat;
+  padding-right: 18px;
+}
+h2 {
+  font-family: Verdana, Helvetica, Arial, sans-serif;
+  padding: 4px 4px 4px 6px;
+  border: 1px solid #999;
+  color: #006;
+  background-color: #eef;
+  font-weight:bold;
+  font-size: 16px;
+  margin-top: 4px;
+  margin-bottom: 6px;
+}
+h3 {
+  padding: 4px 4px 4px 6px;
+  border: 1px solid #aaa;
+  color: #006;
+  background-color: #eee;
+  font-weight: normal;
+  font-size: 14px;
+  margin-top: 4px;
+  margin-bottom: 6px;
+}
+p, ul {
+  font-size: 13px;
+  margin-top: 4px;
+  margin-bottom: 6px;
+}
+#banner {
+  background-color: #eef;
+  border-bottom: 1px solid #aaa;
+}
+#organizationLogo img, #projectLogo img {
+  border: 1px solid #999;
+}
+#breadcrumbs {
+  padding-top: 1px;
+  padding-bottom: 2px;
+  border-bottom: 1px solid #aaa;
+  background-color: #ddf;
+}
+#leftColumn {
+  margin: 8px 0 8px 4px;
+  border: 1px solid #999;
+  background-color: #eef;
+}
+#navcolumn {
+  padding: 6px 4px 0 6px;
+}
+#navcolumn h5 {
+  font-size: 12px;
+  border-bottom: 1px solid #aaaaaa;
+  padding-top: 2px;
+  font-weight: normal;
+}
+#navcolumn li {
+  font-size: 12px;
+  padding-left: 12px;
+  background-color: #eef;
+}
+#navcolumn a:active, #navcolumn a:hover {
+  text-decoration: none;
+}
+#lastPublished {
+  font-size: 10px;
+}
+table.bodyTable th {
+  color: white;
+  background-color: #bbb;
+  text-align: left;
+  font-weight: bold;
+  font-size: 13px;
+}
+
+table.bodyTable th, table.bodyTable td {
+  font-size: 13px;
+}
+
+table.bodyTable tr.a {
+  background-color: #ddd;
+}
+
+table.bodyTable tr.b {
+  background-color: #eee;
+}
+
+.source {
+  border: 1px solid #999;
+  padding: 8px;
+  margin: 6px;
+}
+#footer {
+  background-color: #eef;
+  border-top: 1px solid #999;
+}
+body {
+  padding-bottom: 0px;
+}
diff --git a/JodaTimeContrib/jsptags/xdocs/stylesheets/maven-theme.css b/JodaTimeContrib/jsptags/xdocs/stylesheets/maven-theme.css
index d2a9decd1..5d616b279 100644
--- a/JodaTimeContrib/jsptags/xdocs/stylesheets/maven-theme.css
+++ b/JodaTimeContrib/jsptags/xdocs/stylesheets/maven-theme.css
@@ -51,14 +51,16 @@ p, ul {
 }
 #banner {
   background-color: #eef;
+  border-bottom: 1px solid #aaa;
 }
 #organizationLogo img, #projectLogo img {
   border: 1px solid #999;
 }
 #breadcrumbs {
-  border-top: 1px solid #aaa;
+  padding-top: 1px;
+  padding-bottom: 2px;
   border-bottom: 1px solid #aaa;
-  background-color: #ccc;
+  background-color: #ddf;
 }
 #leftColumn {
   margin: 8px 0 8px 4px;

From f4c019f3090e0a1b76b82c5609d7bc8aaccf2389 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 19 Aug 2005 23:27:32 +0000
Subject: [PATCH 012/130] Fix paths so maven works

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@869 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/jsptags/xdocs/navigation.xml | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/JodaTimeContrib/jsptags/xdocs/navigation.xml b/JodaTimeContrib/jsptags/xdocs/navigation.xml
index 692e348f4..996d5c5fd 100644
--- a/JodaTimeContrib/jsptags/xdocs/navigation.xml
+++ b/JodaTimeContrib/jsptags/xdocs/navigation.xml
@@ -7,8 +7,8 @@
 
   <body>
     <links>
-      <item name="Joda-Time" href="/index.html"/>
-      <item name="JSP tags" href="/contrib/jsptags/index.html"/>
+      <item name="Joda-Time" href="../../index.html"/>
+      <item name="JSP tags" href="/index.html"/>
     </links>
     <menu name="Joda Time JSP tags">
       <item name="Overview" href="index.html"/>

From be0846b0f6b1c024dec3a2469bdeb4916bb73abd Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 20 Aug 2005 00:01:45 +0000
Subject: [PATCH 013/130] Fix dist so maven works

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@870 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/jsptags/maven.xml   | 47 +++++++++++++++++++++++++++++
 JodaTimeContrib/jsptags/project.xml |  1 -
 2 files changed, 47 insertions(+), 1 deletion(-)
 create mode 100644 JodaTimeContrib/jsptags/maven.xml

diff --git a/JodaTimeContrib/jsptags/maven.xml b/JodaTimeContrib/jsptags/maven.xml
new file mode 100644
index 000000000..58eed5607
--- /dev/null
+++ b/JodaTimeContrib/jsptags/maven.xml
@@ -0,0 +1,47 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project
+    default="java:jar"
+    xmlns:j="jelly:core"
+    xmlns:license="license"
+    xmlns:maven="jelly:maven"
+    xmlns:util="jelly:util"
+    xmlns:ant="jelly:ant">
+
+  <postGoal name="dist:prepare-bin-filesystem">
+    <j:set var="maven.dist.bin.assembly.dir" value="${pom.getPluginContext('maven-dist-plugin').getVariable('maven.dist.bin.assembly.dir')}" />
+    
+    <!-- Copy Files -->
+    <ant:copy todir="${maven.dist.bin.assembly.dir}">
+      <ant:fileset dir=".">
+        <ant:include name="NOTICE.txt"/>
+        <ant:include name="RELEASE-NOTES.txt"/>
+      </ant:fileset>
+    </ant:copy>
+  </postGoal>
+
+  <postGoal name="dist:prepare-src-filesystem">
+    <j:set var="maven.dist.src.assembly.dir" value="${pom.getPluginContext('maven-dist-plugin').getVariable('maven.dist.src.assembly.dir')}" />
+    
+    <!-- Copy Files -->
+    <ant:copy todir="${maven.dist.src.assembly.dir}">
+      <ant:fileset dir=".">
+        <ant:include name="NOTICE.txt"/>
+        <ant:include name="RELEASE-NOTES.txt"/>
+        <ant:include name="checkstyle.xml"/>
+      </ant:fileset>
+    </ant:copy>
+    
+    <!-- Copy Jars -->
+    <ant:copy todir="${maven.dist.src.assembly.dir}">
+      <ant:fileset dir="${maven.build.dir}">
+        <ant:include name="*.jar"/>
+      </ant:fileset>
+    </ant:copy>
+    
+    <!-- Copy XDocs -->
+    <ant:copy todir="${maven.dist.src.assembly.dir}/xdocs">
+      <ant:fileset dir="xdocs" />
+    </ant:copy>
+  </postGoal>
+
+</project>
diff --git a/JodaTimeContrib/jsptags/project.xml b/JodaTimeContrib/jsptags/project.xml
index c1292eb5c..390844b1a 100644
--- a/JodaTimeContrib/jsptags/project.xml
+++ b/JodaTimeContrib/jsptags/project.xml
@@ -78,7 +78,6 @@
       <resource>
         <targetPath>meta-inf</targetPath>
         <includes>
-          <include>LICENSE.txt</include>
           <include>NOTICE.txt</include>
         </includes>
       </resource>

From 8aa766b74b155681d63127f29bf0fec152987706 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 20 Aug 2005 20:47:18 +0000
Subject: [PATCH 014/130] Rename README to RELEASE-NOTES

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@871 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../jsptags/{README.txt => RELEASE-NOTES.txt} | 33 +++++++++++++++----
 1 file changed, 27 insertions(+), 6 deletions(-)
 rename JodaTimeContrib/jsptags/{README.txt => RELEASE-NOTES.txt} (76%)

diff --git a/JodaTimeContrib/jsptags/README.txt b/JodaTimeContrib/jsptags/RELEASE-NOTES.txt
similarity index 76%
rename from JodaTimeContrib/jsptags/README.txt
rename to JodaTimeContrib/jsptags/RELEASE-NOTES.txt
index b88da2c4d..fce17b1e8 100644
--- a/JodaTimeContrib/jsptags/README.txt
+++ b/JodaTimeContrib/jsptags/RELEASE-NOTES.txt
@@ -1,23 +1,38 @@
-Joda Time Tag Library
----------------------
+Joda-Time JSP tags contributed project version 0.8
+--------------------------------------------------
+
+Joda-Time is a date and time handling library that seeks to replace the JDK
+Date and Calendar classes.
+
+This is the 0.8 release of the JSP tag library support classes.
+These classes were converted from code at Jakarta Taglibs by Jim Newsham.
+Please check the NOTICE.txt for the Apache credit.
+
 
 About
 -----
 
-The Joda Time Tag Library is a custom tag library for formatting and parsing Joda dates in jsp pages.  This library works very similarly to the date-related tags in the jstl fmt library, so please refer to the documentation for that standard if you still have questions after reading this document.
+The Joda Time Tag Library is a custom tag library for formatting and parsing
+Joda dates in jsp pages.  This library works very similarly to the date-related
+tags in the jstl fmt library, so please refer to the documentation for that
+standard if you still have questions after reading this document or online help.
 
-Unlike the fmt tags which work with java.util.Date and java.util.TimeZone objects, the Joda tags work with Joda DateTime, ReadableInstant, ReadablePartial, and DateTimeZone objects.  
+Unlike the fmt tags which work with java.util.Date and java.util.TimeZone objects,
+the Joda tags work with Joda DateTime, ReadableInstant, ReadablePartial,
+and DateTimeZone objects.  
 
 Build
 -----
 
 Build-time dependencies are Joda 1.0, the Servlet 2.4 API, the
-JSP 2.0 API, and JSTL 1.1 API.  Place these jars in the lib directory, then run "ant".
+JSP 2.0 API, and JSTL 1.1 API. A source build can be achieved from ant or maven.
 
 Setup
 -----
 
-You'll need a servlet container which supports Servlet 2.4, JSP 2.0, JSTL 1.1.  Copy the joda-time-1.0.jar and joda-time-tags.jar to the WEB-INF/lib directory of your web application.  Declare the library as follows in your jsp pages:
+You'll need a servlet container which supports Servlet 2.4, JSP 2.0, JSTL 1.1.
+Copy the joda-time-1.0.jar and joda-time-tags.jar to the WEB-INF/lib directory of
+your web application.  Declare the library as follows in your jsp pages:
 
 <%@taglib prefix="joda" uri="http://www.joda.org/joda/time/tags"%>
 
@@ -94,3 +109,9 @@ value (required).  The time zone to set.
 var.  The scoped variable to set.
 scope.  The scope of the variable to set.
 
+
+Feedback
+--------
+All feedback is welcomed at joda-interest@lists.sourceforge.net.
+
+The Joda team

From cfb150dfca5da631b5576b46143d229f502427c7 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 20 Aug 2005 20:47:31 +0000
Subject: [PATCH 015/130] Fix scripts for 0.8

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@872 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/jsptags/build.xml   | 4 ++--
 JodaTimeContrib/jsptags/project.xml | 7 +++++++
 2 files changed, 9 insertions(+), 2 deletions(-)

diff --git a/JodaTimeContrib/jsptags/build.xml b/JodaTimeContrib/jsptags/build.xml
index 7c55f5d71..b6e2f1936 100644
--- a/JodaTimeContrib/jsptags/build.xml
+++ b/JodaTimeContrib/jsptags/build.xml
@@ -77,9 +77,9 @@
       <classpath refid="build.classpath">
       </classpath>
     </javac>
-    <mkdir dir="${classesdir}/meta-inf">
+    <mkdir dir="${classesdir}/META-INF">
     </mkdir>
-    <copy todir="${classesdir}/meta-inf">
+    <copy todir="${classesdir}/META-INF">
       <fileset dir="${basedir}/.">
         <include name="LICENSE.txt">
         </include>
diff --git a/JodaTimeContrib/jsptags/project.xml b/JodaTimeContrib/jsptags/project.xml
index 390844b1a..42ffcaa13 100644
--- a/JodaTimeContrib/jsptags/project.xml
+++ b/JodaTimeContrib/jsptags/project.xml
@@ -81,6 +81,13 @@
           <include>NOTICE.txt</include>
         </includes>
       </resource>
+      <resource>
+        <targetPath>meta-inf</targetPath>
+        <directory>src/conf</directory>
+        <includes>
+          <include>joda.tld</include>
+        </includes>
+      </resource>
     </resources>
   </build>
 

From 323f95f883dead90d889fb023e387bfc38f558fc Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 20 Aug 2005 20:55:16 +0000
Subject: [PATCH 016/130] Fix scripts for 0.8

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@873 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/jsptags/project.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/JodaTimeContrib/jsptags/project.xml b/JodaTimeContrib/jsptags/project.xml
index 42ffcaa13..520891bb5 100644
--- a/JodaTimeContrib/jsptags/project.xml
+++ b/JodaTimeContrib/jsptags/project.xml
@@ -10,7 +10,7 @@
     Contribution to Joda-Time that adds JSP tags support
   </description>
 
-  <url>http://joda-time.sourceforge.net/jsptags</url>
+  <url>http://joda-time.sourceforge.net/contrib/jsptags</url>
   <logo>/images/jodatime.png</logo>
   <issueTrackingUrl>http://sourceforge.net/tracker/?atid=617889&amp;group_id=97367&amp;func=browse</issueTrackingUrl>
   <inceptionYear>2005</inceptionYear>

From efbed15b5abbdd17c9ec63ac49aa88b20323e091 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 21 Aug 2005 17:05:39 +0000
Subject: [PATCH 017/130] Fix META-INF

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@874 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/jsptags/project.xml | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/JodaTimeContrib/jsptags/project.xml b/JodaTimeContrib/jsptags/project.xml
index 520891bb5..43c43441f 100644
--- a/JodaTimeContrib/jsptags/project.xml
+++ b/JodaTimeContrib/jsptags/project.xml
@@ -76,13 +76,13 @@
     </unitTest>
     <resources>
       <resource>
-        <targetPath>meta-inf</targetPath>
+        <targetPath>META-INF</targetPath>
         <includes>
           <include>NOTICE.txt</include>
         </includes>
       </resource>
       <resource>
-        <targetPath>meta-inf</targetPath>
+        <targetPath>META-INF</targetPath>
         <directory>src/conf</directory>
         <includes>
           <include>joda.tld</include>

From 94cb3a89e2be37b60033776a4c99f32759602a88 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 21 Aug 2005 17:10:00 +0000
Subject: [PATCH 018/130] Fix joda-time version

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@875 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/jsptags/RELEASE-NOTES.txt | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/JodaTimeContrib/jsptags/RELEASE-NOTES.txt b/JodaTimeContrib/jsptags/RELEASE-NOTES.txt
index fce17b1e8..62597c0d6 100644
--- a/JodaTimeContrib/jsptags/RELEASE-NOTES.txt
+++ b/JodaTimeContrib/jsptags/RELEASE-NOTES.txt
@@ -24,14 +24,14 @@ and DateTimeZone objects.
 Build
 -----
 
-Build-time dependencies are Joda 1.0, the Servlet 2.4 API, the
+Build-time dependencies are Joda 1.1, the Servlet 2.4 API, the
 JSP 2.0 API, and JSTL 1.1 API. A source build can be achieved from ant or maven.
 
 Setup
 -----
 
 You'll need a servlet container which supports Servlet 2.4, JSP 2.0, JSTL 1.1.
-Copy the joda-time-1.0.jar and joda-time-tags.jar to the WEB-INF/lib directory of
+Copy the joda-time-1.1.jar and joda-time-tags.jar to the WEB-INF/lib directory of
 your web application.  Declare the library as follows in your jsp pages:
 
 <%@taglib prefix="joda" uri="http://www.joda.org/joda/time/tags"%>

From c22634c56ab8a398a51f1324031e5eaa3dd66d78 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 21 Aug 2005 17:16:18 +0000
Subject: [PATCH 019/130] Fix download locations and release date

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@876 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/jsptags/xdocs/index.xml      | 6 +++---
 JodaTimeContrib/jsptags/xdocs/navigation.xml | 2 +-
 2 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/JodaTimeContrib/jsptags/xdocs/index.xml b/JodaTimeContrib/jsptags/xdocs/index.xml
index 35ee7a810..3420b8910 100644
--- a/JodaTimeContrib/jsptags/xdocs/index.xml
+++ b/JodaTimeContrib/jsptags/xdocs/index.xml
@@ -28,8 +28,8 @@ As a flavour of the tags, here's how to format a Joda-Time object in JSP:
   &lt;% pageContext.setAttribute("now", new org.joda.time.DateTime()); %&gt;
   <b>&lt;joda:format value="${now}" style="SM" /&gt;</b>
 </source>
-Version 0.8 was released on 2005-nn-nn -
-<a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=104212">Download now</a>
+Version 0.8 was released on 2005-08-21 -
+<a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=161360">Download now</a>
 </p>
 </section>
 
@@ -50,7 +50,7 @@ Various documentation is available:
 
 <section name="Releases">
 <p>
-<a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=104212">Release 0.8</a>
+<a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=161360">Release 0.8</a>
 is the current latest release.
 This release is a beta release and may have bugs.
 </p>
diff --git a/JodaTimeContrib/jsptags/xdocs/navigation.xml b/JodaTimeContrib/jsptags/xdocs/navigation.xml
index 996d5c5fd..42335f3e5 100644
--- a/JodaTimeContrib/jsptags/xdocs/navigation.xml
+++ b/JodaTimeContrib/jsptags/xdocs/navigation.xml
@@ -15,7 +15,7 @@
       <item name="Users guide" href="userguide.html"/>
       <item name="Javadoc (Release)" href="/api-release/index.html"/>
       <item name="License" href="licensecover.html"/>
-      <item name="Download" href="http://sourceforge.net/project/showfiles.php?group_id=97367"/>
+      <item name="Download" href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=161360"/>
     </menu>
     <menu name="Development">
       <item name="Sourceforge" href="http://sourceforge.net/projects/joda-time/"/>

From d0ed711a952a5093feb67947f39ae7a794b1b8e4 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 21 Aug 2005 17:52:06 +0000
Subject: [PATCH 020/130] Post 0.8 tasks

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@877 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/jsptags/build.xml   |  4 ++--
 JodaTimeContrib/jsptags/project.xml | 10 +++++++++-
 2 files changed, 11 insertions(+), 3 deletions(-)

diff --git a/JodaTimeContrib/jsptags/build.xml b/JodaTimeContrib/jsptags/build.xml
index b6e2f1936..923b6035f 100644
--- a/JodaTimeContrib/jsptags/build.xml
+++ b/JodaTimeContrib/jsptags/build.xml
@@ -22,7 +22,7 @@
   </property>
   <property name="javadocdir" value="${basedir}/dist/docs/api">
   </property>
-  <property name="final.name" value="joda-time-jsptags-0.8">
+  <property name="final.name" value="joda-time-jsptags-0.9">
   </property>
   <property name="proxy.host" value="">
   </property>
@@ -130,7 +130,7 @@
     </tstamp>
     <property name="copyright" value="Copyright &amp;copy;  Joda.org. All Rights Reserved.">
     </property>
-    <property name="title" value="Joda time JSP tags support 0.8 API">
+    <property name="title" value="Joda time JSP tags support 0.9 API">
     </property>
     <javadoc use="true" private="true" destdir="${javadocdir}" author="true" version="true" sourcepath="${basedir}/src/java" packagenames="org.joda.time.contrib.jsptag.*">
       <classpath>
diff --git a/JodaTimeContrib/jsptags/project.xml b/JodaTimeContrib/jsptags/project.xml
index 43c43441f..0ff867fba 100644
--- a/JodaTimeContrib/jsptags/project.xml
+++ b/JodaTimeContrib/jsptags/project.xml
@@ -4,7 +4,7 @@
   <id>joda-time-jsptags</id>
   <groupId>joda-time</groupId>
   <name>Joda time JSP tags support</name>
-  <currentVersion>0.8</currentVersion>
+  <currentVersion>0.9-dev</currentVersion>
   <shortDescription>Joda time JSP tags support</shortDescription>
   <description>
     Contribution to Joda-Time that adds JSP tags support
@@ -54,6 +54,14 @@
     </license>
   </licenses>
 
+  <versions>
+    <version>
+      <id>0.8</id>
+      <name>0.8</name>
+      <tag>v0_8_000</tag>
+    </version>
+  </versions>
+
   <repository>
     <connection>scm:cvs:pserver:anonymous@cvs.sourceforge.net:/cvsroot/joda-time:JodaTimeContrib/jsptags</connection>
     <url>http://cvs.sourceforge.net/viewcvs.py/joda-time/JodaTimeContrib/jsptags/</url>

From d2f83bce7b65a970f7d6cf90240979db52007b3c Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 21 Aug 2005 17:52:54 +0000
Subject: [PATCH 021/130] Add NOTICE to jar. Add license xml segment.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@878 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/project.xml | 15 +++++++++++++++
 1 file changed, 15 insertions(+)

diff --git a/JodaTime/project.xml b/JodaTime/project.xml
index f51fd69e1..5ca8e3b47 100644
--- a/JodaTime/project.xml
+++ b/JodaTime/project.xml
@@ -43,6 +43,15 @@
     <connection>scm:cvs:pserver:anonymous@cvs.sourceforge.net:/cvsroot/joda-time:JodaTime</connection>
     <url>http://cvs.sourceforge.net/viewcvs.py/joda-time/JodaTime/</url>
   </repository>
+
+  <licenses>
+    <license>
+      <name>Apache 2</name>
+      <url>http://www.apache.org/licenses/</url>
+      <distribution>repo</distribution>
+    </license>
+  </licenses>
+
   <versions>
     <version>
       <id>0.95</id>
@@ -149,6 +158,12 @@
           <include>org/joda/time/tz/data/**</include>
         </includes>
       </resource>
+      <resource>
+        <targetPath>META-INF</targetPath>
+        <includes>
+          <include>NOTICE.txt</include>
+        </includes>
+      </resource>
     </resources>
   </build>
 

From 219ac5f9d6284cb7478d78ae9d083902445a881b Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 21 Aug 2005 19:51:56 +0000
Subject: [PATCH 022/130] Fix website for maven 1.0.2

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@879 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/project.properties                |   2 +
 JodaTime/xdocs/stylesheets/joda-theme.css  | 121 +++++++++++++++++++++
 JodaTime/xdocs/stylesheets/maven-theme.css |   6 +-
 3 files changed, 127 insertions(+), 2 deletions(-)
 create mode 100644 JodaTime/xdocs/stylesheets/joda-theme.css

diff --git a/JodaTime/project.properties b/JodaTime/project.properties
index cca8e1692..cbaa9aaa7 100644
--- a/JodaTime/project.properties
+++ b/JodaTime/project.properties
@@ -2,6 +2,8 @@
 maven.xdoc.date = navigation-bottom
 maven.xdoc.date.format = yyyy-MM-dd
 # maven.xdoc.version = ${pom.currentVersion}
+maven.xdoc.legend = false;
+maven.xdoc.theme.url = ./style/joda-theme.css
 
 maven.checkstyle.properties=checkstyle.xml
 maven.junit.fork=true
diff --git a/JodaTime/xdocs/stylesheets/joda-theme.css b/JodaTime/xdocs/stylesheets/joda-theme.css
new file mode 100644
index 000000000..5d616b279
--- /dev/null
+++ b/JodaTime/xdocs/stylesheets/joda-theme.css
@@ -0,0 +1,121 @@
+body, td, select, input, li{
+  font-family: Helvetica, Arial, sans-serif;
+  font-size: 13px;
+  background-color: #fff;
+}
+a {
+  text-decoration: none;
+}
+a:link {
+  color:#009;
+}
+a:visited  {
+  color:#009;
+}
+a:active, a:hover {
+  text-decoration: underline;
+}
+a.externalLink, a.externalLink:link, a.externalLink:visited, a.externalLink:active, a.externalLink:hover {
+  background: url(../images/external.png) right center no-repeat;
+  padding-right: 15px;
+}
+a.newWindow, a.newWindow:link, a.newWindow:visited, a.newWindow:active, a.newWindow:hover {
+  background: url(../images/newwindow.png) right center no-repeat;
+  padding-right: 18px;
+}
+h2 {
+  font-family: Verdana, Helvetica, Arial, sans-serif;
+  padding: 4px 4px 4px 6px;
+  border: 1px solid #999;
+  color: #006;
+  background-color: #eef;
+  font-weight:bold;
+  font-size: 16px;
+  margin-top: 4px;
+  margin-bottom: 6px;
+}
+h3 {
+  padding: 4px 4px 4px 6px;
+  border: 1px solid #aaa;
+  color: #006;
+  background-color: #eee;
+  font-weight: normal;
+  font-size: 14px;
+  margin-top: 4px;
+  margin-bottom: 6px;
+}
+p, ul {
+  font-size: 13px;
+  margin-top: 4px;
+  margin-bottom: 6px;
+}
+#banner {
+  background-color: #eef;
+  border-bottom: 1px solid #aaa;
+}
+#organizationLogo img, #projectLogo img {
+  border: 1px solid #999;
+}
+#breadcrumbs {
+  padding-top: 1px;
+  padding-bottom: 2px;
+  border-bottom: 1px solid #aaa;
+  background-color: #ddf;
+}
+#leftColumn {
+  margin: 8px 0 8px 4px;
+  border: 1px solid #999;
+  background-color: #eef;
+}
+#navcolumn {
+  padding: 6px 4px 0 6px;
+}
+#navcolumn h5 {
+  font-size: 12px;
+  border-bottom: 1px solid #aaaaaa;
+  padding-top: 2px;
+  font-weight: normal;
+}
+#navcolumn li {
+  font-size: 12px;
+  padding-left: 12px;
+  background-color: #eef;
+}
+#navcolumn a:active, #navcolumn a:hover {
+  text-decoration: none;
+}
+#lastPublished {
+  font-size: 10px;
+}
+table.bodyTable th {
+  color: white;
+  background-color: #bbb;
+  text-align: left;
+  font-weight: bold;
+  font-size: 13px;
+}
+
+table.bodyTable th, table.bodyTable td {
+  font-size: 13px;
+}
+
+table.bodyTable tr.a {
+  background-color: #ddd;
+}
+
+table.bodyTable tr.b {
+  background-color: #eee;
+}
+
+.source {
+  border: 1px solid #999;
+  padding: 8px;
+  margin: 6px;
+}
+#footer {
+  background-color: #eef;
+  border-top: 1px solid #999;
+}
+body {
+  padding-bottom: 0px;
+}
diff --git a/JodaTime/xdocs/stylesheets/maven-theme.css b/JodaTime/xdocs/stylesheets/maven-theme.css
index 4818c989e..9925fb868 100644
--- a/JodaTime/xdocs/stylesheets/maven-theme.css
+++ b/JodaTime/xdocs/stylesheets/maven-theme.css
@@ -51,14 +51,16 @@ p, ul {
 }
 #banner {
   background-color: #eef;
+  border-bottom: 1px solid #aaa;
 }
 #organizationLogo img, #projectLogo img {
   border: 1px solid #999;
 }
 #breadcrumbs {
-  border-top: 1px solid #aaa;
+  padding-top: 1px;
+  padding-bottom: 2px;
   border-bottom: 1px solid #aaa;
-  background-color: #ccc;
+  background-color: #ddf;
 }
 #leftColumn {
   margin: 8px 0 8px 4px;

From 820a909801631fb967a32351c5e3f3cf2b3748c1 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 21 Aug 2005 19:52:30 +0000
Subject: [PATCH 023/130] Fix example to something that actually compiles

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@880 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/index.xml | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/JodaTime/xdocs/index.xml b/JodaTime/xdocs/index.xml
index 64ab188f2..8269d8d09 100644
--- a/JodaTime/xdocs/index.xml
+++ b/JodaTime/xdocs/index.xml
@@ -31,8 +31,8 @@ public boolean isJoinedInLastThreeMonths(<b>DateTime</b> datetimeJoined) {
   <b>Interval</b> last3Months = new Interval(Period.months(3), new DateTime());
   return last3Months.contains(datetimeJoined);
 }
-public boolean isBirthdayInLeapYear(<b>YearMonthDay</b> dateOfBirth) {
-  return dateOfBirth.year().isLeap();
+public String getBirthMonthText(<b>YearMonthDay</b> dateOfBirth) {
+  return dateOfBirth.monthOfYear().getAsText(Locale.ENGLISH);
 }
 </source>
 Version 1.1 was released on 2005-08-10 -

From 26c4a01e5947d7ce2d0c508bc977b375832e21d6 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 21 Aug 2005 19:52:53 +0000
Subject: [PATCH 024/130] Add JSP tags contributed project

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@881 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/navigation.xml | 7 ++++++-
 1 file changed, 6 insertions(+), 1 deletion(-)

diff --git a/JodaTime/xdocs/navigation.xml b/JodaTime/xdocs/navigation.xml
index ac7c55abc..97777be95 100644
--- a/JodaTime/xdocs/navigation.xml
+++ b/JodaTime/xdocs/navigation.xml
@@ -6,6 +6,11 @@
   <organizationLogo href="">Joda.org</organizationLogo>
 
   <body>
+    <links>
+      <item name="Joda-Time" href="/index.html"/>
+      <item name="JSP tags" href="/contrib/jsptags/index.html"/>
+    </links>
+
     <menu name="Joda Time">
       <item name="Overview" href="/index.html"/>
       <item name="Quick start guide" href="/quickstart.html"/>
@@ -13,7 +18,7 @@
       <item name="FAQ" href="/faq.html"/>
       <item name="Javadoc (Release)" href="/api-release/index.html"/>
       <item name="License" href="/license.html"/>
-      <item name="Download" href="http://sourceforge.net/project/showfiles.php?group_id=97367"/>
+      <item name="Download" href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=104212"/>
     </menu>
     
     <menu name="Key concepts">

From 69c3d758fa58a5abe835e1c7f61bd5e85bc0dc73 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 23 Aug 2005 19:56:30 +0000
Subject: [PATCH 025/130] Fix ZonedChronology ReadablePartial getMax/Min Value
 methods

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@882 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                      |  3 +++
 .../org/joda/time/chrono/ZonedChronology.java   | 17 +++++++++++++++++
 .../time/chrono/TestGregorianChronology.java    | 11 +++++++++++
 3 files changed, 31 insertions(+)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 828d8454c..a11ddf364 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -38,6 +38,9 @@ None
 
 Bug fixes since 1.1
 -------------------
+- ZonedChronology
+  getMaximumValue(ReadablePartial)/getMinimumValue(ReadablePartial)
+  Methods returned incorrect result
 
 
 Enhancements since 1.1
diff --git a/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java b/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java
index cd54dea30..f13a00d04 100644
--- a/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java
@@ -24,6 +24,7 @@
 import org.joda.time.DateTimeZone;
 import org.joda.time.DurationField;
 import org.joda.time.IllegalFieldValueException;
+import org.joda.time.ReadablePartial;
 import org.joda.time.field.BaseDateTimeField;
 import org.joda.time.field.BaseDurationField;
 
@@ -448,6 +449,14 @@ public int getMinimumValue(long instant) {
             return iField.getMinimumValue(instant + this.iZone.getOffset(instant));
         }
 
+        public int getMinimumValue(ReadablePartial instant) {
+            return iField.getMinimumValue(instant);
+        }
+
+        public int getMinimumValue(ReadablePartial instant, int[] values) {
+            return iField.getMinimumValue(instant, values);
+        }
+
         public int getMaximumValue() {
             return iField.getMaximumValue();
         }
@@ -456,6 +465,14 @@ public int getMaximumValue(long instant) {
             return iField.getMaximumValue(instant + this.iZone.getOffset(instant));
         }
 
+        public int getMaximumValue(ReadablePartial instant) {
+            return iField.getMaximumValue(instant);
+        }
+
+        public int getMaximumValue(ReadablePartial instant, int[] values) {
+            return iField.getMaximumValue(instant, values);
+        }
+
         public int getMaximumTextLength(Locale locale) {
             return iField.getMaximumTextLength(locale);
         }
diff --git a/JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java b/JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java
index 38b54c7b1..5b1a4890e 100644
--- a/JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java
+++ b/JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java
@@ -21,9 +21,12 @@
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
 
+import org.joda.time.Chronology;
+import org.joda.time.DateMidnight;
 import org.joda.time.DateTimeConstants;
 import org.joda.time.DateTimeUtils;
 import org.joda.time.DateTimeZone;
+import org.joda.time.YearMonthDay;
 
 /**
  * This class is a Junit unit test for GregorianChronology.
@@ -253,4 +256,12 @@ public void testTimeFields() {
         assertEquals(true, GregorianChronology.getInstance().millisOfSecond().isSupported());
     }
 
+    public void testMaximumValue() {
+        YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1);
+        DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1);
+        Chronology chrono = Chronology.getGregorian();
+        assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1));
+        assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis()));
+    }
+
 }

From f676ffe21247f747f480fdb7c903b364d081a778 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Mon, 29 Aug 2005 16:44:53 +0000
Subject: [PATCH 026/130] Updated to version 2005m

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@883 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/java/org/joda/time/tz/src/Readme.txt  |   2 +-
 JodaTime/src/java/org/joda/time/tz/src/africa |  24 +-
 JodaTime/src/java/org/joda/time/tz/src/asia   |  86 +++++--
 .../src/java/org/joda/time/tz/src/australasia |  55 ++++-
 .../src/java/org/joda/time/tz/src/backward    | 213 ++++++++++--------
 JodaTime/src/java/org/joda/time/tz/src/europe |  93 ++++----
 .../java/org/joda/time/tz/src/northamerica    | 152 ++++++++-----
 .../java/org/joda/time/tz/src/southamerica    |  18 +-
 8 files changed, 402 insertions(+), 241 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
index 35fba172a..3abefbdcd 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
+++ b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
@@ -1,2 +1,2 @@
 The data files in this directory were obtained from the public tz database,
-http://www.twinsun.com/tz/tz-link.htm, version 2005k.
+http://www.twinsun.com/tz/tz-link.htm, version 2005m.
diff --git a/JodaTime/src/java/org/joda/time/tz/src/africa b/JodaTime/src/java/org/joda/time/tz/src/africa
index 7d75ae3a0..87ae9e36e 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/africa
+++ b/JodaTime/src/java/org/joda/time/tz/src/africa
@@ -1,4 +1,4 @@
-# @(#)africa	7.38
+# @(#)africa	7.39
 
 # This data is by no means authoritative; if you think you know better,
 # go ahead and edit the file (and please send any changes to
@@ -348,9 +348,6 @@ Zone	Africa/Bamako	-0:32:00 -	LMT	1912
 			 0:00	-	GMT	1934 Feb 26
 			-1:00	-	WAT	1960 Jun 20
 			 0:00	-	GMT
-# no longer different from Bamako, but too famous to omit
-Zone	Africa/Timbuktu	-0:12:04 -	LMT	1912
-			 0:00	-	GMT
 
 # Mauritania
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
@@ -557,6 +554,23 @@ Zone	Africa/Lome	0:04:52 -	LMT	1893
 			0:00	-	GMT
 
 # Tunisia
+
+# From Gwillim Law (2005-04-30):
+#
+# My correspondent, Risto Nykanen, has alerted me to another adoption of DST,
+# this time in Tunisia.  According to Yahoo France News
+# <http://fr.news.yahoo.com/050426/5/4dumk.html>, in a story attributed to AP
+# and dated 2005-04-26, "Tunisia has decided to advance its official time by
+# one hour, starting on Sunday, May 1.  Henceforth, Tunisian time will be
+# UTC+2 instead of UTC+1.  The change will take place at 23:00 UTC next
+# Saturday."  (My translation)
+#
+# From Oscar van Vlijmen (2005-05-02):
+# LaPresse, the first national daily newspaper ...
+# <http://www.lapresse.tn/archives/archives280405/actualites/lheure.html>
+# ... DST for 2005: on: Sun May 1 0h standard time, off: Fri Sept. 30,
+# 1h standard time.
+
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Tunisia	1939	only	-	Apr	15	23:00s	1:00	S
 Rule	Tunisia	1939	only	-	Nov	18	23:00s	0	-
@@ -579,6 +593,8 @@ Rule	Tunisia	1988	only	-	Jun	 1	 0:00s	1:00	S
 Rule	Tunisia	1988	1990	-	Sep	lastSun	 0:00s	0	-
 Rule	Tunisia	1989	only	-	Mar	26	 0:00s	1:00	S
 Rule	Tunisia	1990	only	-	May	 1	 0:00s	1:00	S
+Rule	Tunisia	2005	only	-	May	 1	 0:00s	1:00	S
+Rule	Tunisia	2005	only	-	Sep	30	 1:00s	0	-
 # Shanks gives 0:09 for Paris Mean Time; go with Howse's more precise 0:09:21.
 # Shanks says the 1911 switch occurred on Mar 9; go with Howse's Mar 11.
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
diff --git a/JodaTime/src/java/org/joda/time/tz/src/asia b/JodaTime/src/java/org/joda/time/tz/src/asia
index 1a40fb4c5..52ba32338 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/asia
+++ b/JodaTime/src/java/org/joda/time/tz/src/asia
@@ -1,4 +1,4 @@
-# @(#)asia	7.83
+# @(#)asia	7.85
 
 # This data is by no means authoritative; if you think you know better,
 # go ahead and edit the file (and please send any changes to
@@ -43,8 +43,8 @@
 #	8:00 CST	China
 #	9:00 CJT	Central Japanese Time (1896/1937)*
 #	9:00 EIT	east Indonesia
-#	9:00 JST	Japan
-#	9:00 KST	Korea
+#	9:00 JST  JDT	Japan
+#	9:00 KST  KDT	Korea
 #	9:30 CST	(Australian) Central Standard Time
 #
 # See the `europe' file for Russia and Turkey in Asia.
@@ -201,7 +201,6 @@ Zone	Asia/Phnom_Penh	6:59:40 -	LMT	1906 Jun  9
 Rule	Shang	1940	only	-	Jun	 3	0:00	1:00	D
 Rule	Shang	1940	1941	-	Oct	 1	0:00	0	S
 Rule	Shang	1941	only	-	Mar	16	0:00	1:00	D
-Rule	PRC	1949	only	-	Jan	 1	0:00	0	S
 Rule	PRC	1986	only	-	May	 4	0:00	1:00	D
 Rule	PRC	1986	1991	-	Sep	Sun>=11	0:00	0	S
 Rule	PRC	1987	1991	-	Apr	Sun>=10	0:00	1:00	D
@@ -387,11 +386,11 @@ Zone	Asia/Tbilisi	2:59:16 -	LMT	1880
 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Asia/Dili	8:22:20 -	LMT	1912
-			8:00	-	TPT	1942 Feb 21 23:00 # E Timor Time
+			8:00	-	TLT	1942 Feb 21 23:00 # E Timor Time
 			9:00	-	JST	1945 Aug
-			9:00	-	TPT	1976 May  3
+			9:00	-	TLT	1976 May  3
 			8:00	-	CIT	2000 Sep 17 00:00
-			9:00	-	TPT
+			9:00	-	TLT
 
 # India
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
@@ -847,14 +846,28 @@ Zone	Asia/Jerusalem	2:20:56 -	LMT	1880
 # Today's _Asahi Evening News_ (page 4) reports that Japan had
 # daylight saving between 1948 and 1951, but ``the system was discontinued
 # because the public believed it would lead to longer working hours.''
+
+# From Mayumi Negishi in the 2005-08-10 Japan Times
+# <http://www.japantimes.co.jp/cgi-bin/getarticle.pl5?nn20050810f2.htm>:
+# Occupation authorities imposed daylight-saving time on Japan on
+# [1948-05-01]....  But lack of prior debate and the execution of
+# daylight-saving time just three days after the bill was passed generated
+# deep hatred of the concept....  The Diet unceremoniously passed a bill to
+# dump the unpopular system in October 1951, less than a month after the San
+# Francisco Peace Treaty was signed.  (A government poll in 1951 showed 53%
+# of the Japanese wanted to scrap daylight-saving time, as opposed to 30% who
+# wanted to keep it.)
+
 # Shanks writes that daylight saving in Japan during those years was as follows:
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-#Rule	Japan	1948	only	-	May	Sun>=1	2:00	1:00	D
-#Rule	Japan	1948	1951	-	Sep	Sat>=8	2:00	0	S
-#Rule	Japan	1949	only	-	Apr	Sun>=1	2:00	1:00	D
-#Rule	Japan	1950	1951	-	May	Sun>=1	2:00	1:00	D
-# but the only locations using it were US military bases.
-# We go with Shanks and omit daylight saving in those years for Asia/Tokyo.
+Rule	Japan	1948	only	-	May	Sun>=1	2:00	1:00	D
+Rule	Japan	1948	1951	-	Sep	Sat>=8	2:00	0	S
+Rule	Japan	1949	only	-	Apr	Sun>=1	2:00	1:00	D
+Rule	Japan	1950	1951	-	May	Sun>=1	2:00	1:00	D
+# but the only locations using it (for birth certificates, presumably, since
+# Shanks's audience is astrologers) were US military bases.  For now, assume
+# that for most purposes daylight-saving time was observed; otherwise, what
+# would have been the point of the 1951 poll?
 
 # From Hideyuki Suzuki (1998-11-09):
 # 'Tokyo' usually stands for the former location of Tokyo Astronomical
@@ -884,7 +897,7 @@ Zone	Asia/Jerusalem	2:20:56 -	LMT	1880
 Zone	Asia/Tokyo	9:18:59	-	LMT	1887 Dec 31 15:00u
 			9:00	-	JST	1896
 			9:00	-	CJT	1938
-			9:00	-	JST
+			9:00	Japan	J%sT
 # Since 1938, all Japanese possessions have been like Asia/Tokyo.
 
 # Jordan
@@ -930,14 +943,16 @@ Rule	Jordan	2000	max	-	Mar	lastThu	0:00s	1:00	S
 Zone	Asia/Amman	2:23:44 -	LMT	1931
 			2:00	Jordan	EE%sT
 
+
 # Kazakhstan
+
 # From Paul Eggert (1996-11-22):
 # Andrew Evtichov (1996-04-13) writes that Kazakhstan
 # stayed in sync with Moscow after 1990, and that Aqtobe (formerly Aktyubinsk)
 # and Aqtau (formerly Shevchenko) are the largest cities in their zones.
 # Guess that Aqtau and Aqtobe diverged in 1995, since that's the first time
 # IATA SSIM mentions a third time zone in Kazakhstan.
-#
+
 # From Paul Eggert (2001-10-18):
 # German Iofis, ELSI, Almaty (2001-10-09) reports that Kazakhstan uses
 # RussiaAsia rules, instead of switching at 00:00 as the IATA has it.
@@ -947,7 +962,7 @@ Zone	Asia/Amman	2:23:44 -	LMT	1931
 # - Kazakhstan did not observe DST in 1991.
 # - Qyzylorda switched from +5:00 to +6:00 on 1992-01-19 02:00.
 # - Oral switched from +5:00 to +4:00 in spring 1989.
-#
+
 # <a href="http://www.kazsociety.org.uk/news/2005/03/30.htm">
 # From Kazakhstan Embassy's News Bulletin #11 (2005-03-21):
 # </a>
@@ -955,6 +970,16 @@ Zone	Asia/Amman	2:23:44 -	LMT	1931
 # daylight saving time citing lack of economic benefits and health
 # complications coupled with a decrease in productivity.
 #
+# From Branislav Kojic (in Astana) via Gwillim Law (2005-06-28):
+# ... what happened was that the former Kazakhstan Eastern time zone
+# was "blended" with the Central zone.  Therefore, Kazakhstan now has
+# two time zones, and difference between them is one hour.  The zone
+# closer to UTC is the former Western zone (probably still called the
+# same), encompassing four provinces in the west: Aqtobe, Atyrau,
+# Mangghystau, and West Kazakhstan.  The other zone encompasses
+# everything else....  I guess that would make Kazakhstan time zones
+# de jure UTC+5 and UTC+6 respectively.
+
 #
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 #
@@ -998,7 +1023,7 @@ Zone	Asia/Aqtau	3:21:04	-	LMT	1924 May  2
 			5:00	-	SHET	1991 Dec 16 # independence
 			5:00 RussiaAsia	AQT%sT	1995 Mar lastSun 2:00 # Aqtau Time
 			4:00 RussiaAsia	AQT%sT	2005 Mar 15
-			4:00	-	AQTT
+			5:00	-	AQTT
 # West Kazakhstan
 Zone	Asia/Oral	3:25:24	-	LMT	1924 May  2 # or Ural'sk
 			4:00	-	URAT	1930 Jun 21 # Ural'sk time
@@ -1009,10 +1034,17 @@ Zone	Asia/Oral	3:25:24	-	LMT	1924 May  2 # or Ural'sk
 			4:00 RussiaAsia	URA%sT	1991
 			4:00	-	URAT	1991 Dec 16 # independence
 			4:00 RussiaAsia	ORA%sT	2005 Mar 15 # Oral Time
-			4:00	-	ORAT
+			5:00	-	ORAT
 
 # Kyrgyzstan (Kirgizstan)
 # Transitions through 1991 are from Shanks.
+
+# From Paul Eggert (2005-08-15):
+# According to an article dated today in the Kyrgyzstan Development Gateway
+# <http://eng.gateway.kg/cgi-bin/page.pl?id=1&story_name=doc9979.shtml>
+# Kyrgyzstan is canceling the daylight saving time system.  I take the article
+# to mean that they will leave their clocks at 6 hours ahead of UTC.
+
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Kirgiz	1992	1996	-	Apr	Sun>=7	0:00s	1:00	S
 Rule	Kirgiz	1992	1996	-	Sep	lastSun	0:00	0	-
@@ -1191,6 +1223,24 @@ Zone	Indian/Maldives	4:54:00 -	LMT	1880	# Male
 # For now, assume Rives McDow's informant got confused about Friday vs
 # Saturday, and that his 2001 dates should have 1 added to them.
 
+# From Paul Eggert (2005-07-26):
+# We have wildly conflicting information about Mongolia's time zones.
+# Bill Bonnet (2005-05-19) reports that the US Embassy in Ulaanbaatar says
+# there is only one time zone and that DST is observed, citing Microsoft
+# Windows XP as the source.  Risto Nykanen (2005-05-16) reports that
+# travelmongolia.org says there are two time zones (UTC+7, UTC+8) with no DST.
+# Oscar van Vlijmen (2005-05-20) reports that the Mongolian Embassy in
+# Washington, DC says there are two time zones, with DST observed.
+# He also found
+# <http://ubpost.mongolnews.mn/index.php?subaction=showcomments&id=1111634894&archive=&start_from=&ucat=1&>
+# which also says that there is DST, and which has a comment by "Toddius"
+# (2005-03-31 06:05 +0700) saying "Mongolia actually has 3.5 time zones.
+# The West (OLGII) is +7 GMT, most of the country is ULAT is +8 GMT
+# and some Eastern provinces are +9 GMT but Sukhbaatar Aimag is SUHK +8.5 GMT.
+# The SUKH timezone is new this year, it is one of the few things the
+# parliament passed during the tumultuous winter session."
+# For now, let's ignore this information, until we have more confirmation.
+
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Mongol	1983	1984	-	Apr	1	0:00	1:00	S
 Rule	Mongol	1983	only	-	Oct	1	0:00	0	-
diff --git a/JodaTime/src/java/org/joda/time/tz/src/australasia b/JodaTime/src/java/org/joda/time/tz/src/australasia
index b39ada2cd..57bd60adb 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/australasia
+++ b/JodaTime/src/java/org/joda/time/tz/src/australasia
@@ -1,4 +1,4 @@
-# @(#)australasia	7.72
+# @(#)australasia	7.73
 # This file also includes Pacific islands.
 
 # Notes are at the end of this file
@@ -77,7 +77,9 @@ Rule	AS	1991	only	-	Mar	Sun>=1	2:00s	0	-
 Rule	AS	1992	only	-	Mar	Sun>=18	2:00s	0	-
 Rule	AS	1993	only	-	Mar	Sun>=1	2:00s	0	-
 Rule	AS	1994	only	-	Mar	Sun>=18	2:00s	0	-
-Rule	AS	1995	max	-	Mar	lastSun	2:00s	0	-
+Rule	AS	1995	2005	-	Mar	lastSun	2:00s	0	-
+Rule	AS	2006	only	-	Apr	Sun>=1	2:00s	0	-
+Rule	AS	2007	max	-	Mar	lastSun	2:00s	0	-
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone Australia/Adelaide	9:14:20 -	LMT	1895 Feb
 			9:00	-	CST	1899 May
@@ -85,6 +87,11 @@ Zone Australia/Adelaide	9:14:20 -	LMT	1895 Feb
 			9:30	AS	CST
 
 # Tasmania
+#
+# From Paul Eggert (2005-08-16):
+# <http://www.bom.gov.au/climate/averages/tables/dst_times.shtml>
+# says King Island didn't observe DST from WWII until late 1971.
+#
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	AT	1967	only	-	Oct	Sun>=1	2:00s	1:00	-
 Rule	AT	1968	only	-	Mar	lastSun	2:00s	0	-
@@ -99,15 +106,22 @@ Rule	AT	1987	1990	-	Mar	Sun>=15	2:00s	0	-
 Rule	AT	1987	only	-	Oct	Sun>=22	2:00s	1:00	-
 Rule	AT	1988	1990	-	Oct	lastSun	2:00s	1:00	-
 Rule	AT	1991	1999	-	Oct	Sun>=1	2:00s	1:00	-
-Rule	AT	1991	max	-	Mar	lastSun	2:00s	0	-
+Rule	AT	1991	2005	-	Mar	lastSun	2:00s	0	-
 Rule	AT	2000	only	-	Aug	lastSun	2:00s	1:00	-
 Rule	AT	2001	max	-	Oct	Sun>=1	2:00s	1:00	-
+Rule	AT	2006	only	-	Apr	Sun>=1	2:00s	0	-
+Rule	AT	2007	max	-	Mar	lastSun	2:00s	0	-
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone Australia/Hobart	9:49:16	-	LMT	1895 Sep
 			10:00	-	EST	1916 Oct 1 2:00
 			10:00	1:00	EST	1917 Feb
 			10:00	Aus	EST	1967
 			10:00	AT	EST
+Zone Australia/Currie	9:35:28	-	LMT	1895 Sep
+			10:00	-	EST	1916 Oct 1 2:00
+			10:00	1:00	EST	1917 Feb
+			10:00	Aus	EST	1971 Jul
+			10:00	AT	EST
 
 # Victoria
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
@@ -118,9 +132,11 @@ Rule	AV	1986	1990	-	Mar	Sun>=15	2:00s	0	-
 Rule	AV	1986	1987	-	Oct	Sun>=15	2:00s	1:00	-
 Rule	AV	1988	1999	-	Oct	lastSun	2:00s	1:00	-
 Rule	AV	1991	1994	-	Mar	Sun>=1	2:00s	0	-
-Rule	AV	1995	max	-	Mar	lastSun	2:00s	0	-
+Rule	AV	1995	2005	-	Mar	lastSun	2:00s	0	-
 Rule	AV	2000	only	-	Aug	lastSun	2:00s	1:00	-
 Rule	AV	2001	max	-	Oct	lastSun	2:00s	1:00	-
+Rule	AV	2006	only	-	Apr	Sun>=1	2:00s	0	-
+Rule	AV	2007	max	-	Mar	lastSun	2:00s	0	-
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone Australia/Melbourne 9:39:52 -	LMT	1895 Feb
 			10:00	Aus	EST	1971
@@ -137,9 +153,11 @@ Rule	AN	1986	1989	-	Mar	Sun>=15	2:00s	0	-
 Rule	AN	1986	only	-	Oct	19	2:00s	1:00	-
 Rule	AN	1987	1999	-	Oct	lastSun	2:00s	1:00	-
 Rule	AN	1990	1995	-	Mar	Sun>=1	2:00s	0	-
-Rule	AN	1996	max	-	Mar	lastSun	2:00s	0	-
+Rule	AN	1996	2005	-	Mar	lastSun	2:00s	0	-
 Rule	AN	2000	only	-	Aug	lastSun	2:00s	1:00	-
 Rule	AN	2001	max	-	Oct	lastSun	2:00s	1:00	-
+Rule	AN	2006	only	-	Apr	Sun>=1	2:00s	0	-
+Rule	AN	2007	max	-	Mar	lastSun	2:00s	0	-
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone Australia/Sydney	10:04:52 -	LMT	1895 Feb
 			10:00	Aus	EST	1971
@@ -160,9 +178,11 @@ Rule	LH	1986	1989	-	Mar	Sun>=15	2:00	0	-
 Rule	LH	1986	only	-	Oct	19	2:00	0:30	-
 Rule	LH	1987	1999	-	Oct	lastSun	2:00	0:30	-
 Rule	LH	1990	1995	-	Mar	Sun>=1	2:00	0	-
-Rule	LH	1996	max	-	Mar	lastSun	2:00	0	-
+Rule	LH	1996	2005	-	Mar	lastSun	2:00	0	-
 Rule	LH	2000	only	-	Aug	lastSun	2:00	0:30	-
 Rule	LH	2001	max	-	Oct	lastSun	2:00	0:30	-
+Rule	LH	2006	only	-	Apr	Sun>=1	2:00	0	-
+Rule	LH	2007	max	-	Mar	lastSun	2:00	0	-
 Zone Australia/Lord_Howe 10:36:20 -	LMT	1895 Feb
 			10:00	-	EST	1981 Mar
 			10:30	LH	LHST
@@ -264,9 +284,6 @@ Zone Pacific/Kwajalein	11:09:20 -	LMT	1901
 
 # Micronesia
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Pacific/Yap	9:12:32	-	LMT	1901		# Colonia
-			9:00	-	YAPT	1969 Oct	# Yap Time
-			10:00	-	YAPT
 Zone Pacific/Truk	10:07:08 -	LMT	1901
 			10:00	-	TRUT			# Truk Time
 Zone Pacific/Ponape	10:32:52 -	LMT	1901		# Kolonia
@@ -670,6 +687,24 @@ Zone	Pacific/Wallis	12:15:20 -	LMT	1901
 # Standard Time Act, 1898
 # </a>
 
+# From David Grosz (2005-06-13):
+# It was announced last week that Daylight Saving would be extended by
+# one week next year to allow for the 2006 Commonwealth Games.
+# Daylight Saving is now to end for next year only on the first Sunday
+# in April instead of the last Sunday in March.
+#
+# From Gwillim Law (2005-06-14):
+# I did some Googling and found that all of those states (and territory) plan
+# to extend DST together in 2006.
+# ACT: http://www.cmd.act.gov.au/mediareleases/fileread.cfm?file=86.txt
+# New South Wales: http://www.thecouriermail.news.com.au/common/story_page/0,5936,15538869%255E1702,00.html
+# South Australia: http://www.news.com.au/story/0,10117,15555031-1246,00.html
+# Tasmania: http://www.media.tas.gov.au/release.php?id=14772
+# Victoria: I wasn't able to find anything separate, but the other articles
+# allude to it.
+# But not Queensland
+# http://www.news.com.au/story/0,10117,15564030-1248,00.html.
+
 # Northern Territory
 
 # From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
@@ -856,7 +891,7 @@ Zone	Pacific/Wallis	12:15:20 -	LMT	1901
 # 1994 was at +0930 as John Connolly's customer seems to assert, then I can
 # only conclude that the actual rule is more complicated....
 
-# From John Warburton <jwarb@SACBH.com.au> (1994-10-07):
+# From John Warburton (1994-10-07):
 # The new Daylight Savings dates for South Australia ...
 # was gazetted in the Government Hansard on Sep 26 1994....
 # start on last Sunday in October and end in last sunday in March.
diff --git a/JodaTime/src/java/org/joda/time/tz/src/backward b/JodaTime/src/java/org/joda/time/tz/src/backward
index 233005fbb..ca22dfeae 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/backward
+++ b/JodaTime/src/java/org/joda/time/tz/src/backward
@@ -1,100 +1,113 @@
-# @(#)backward	7.27
-
-# This file provides links between current names for time zones
-# and their old names.  Many names changed in late 1993.
-
-Link	America/Adak		America/Atka
-Link	America/Argentina/Buenos_Aires	America/Buenos_Aires
-Link	America/Argentina/Catamarca	America/Catamarca
-Link	America/Argentina/Cordoba	America/Cordoba
-Link	America/Tijuana		America/Ensenada
-Link	America/Indianapolis	America/Fort_Wayne
-Link	America/Argentina/Jujuy	America/Jujuy
-Link	America/Indiana/Knox	America/Knox_IN
-Link	America/Argentina/Mendoza	America/Mendoza
-Link	America/Rio_Branco	America/Porto_Acre
-Link	America/Argentina/Cordoba	America/Rosario
-Link	America/St_Thomas	America/Virgin
-Link	Asia/Ashgabat		Asia/Ashkhabad
-Link	Asia/Chongqing		Asia/Chungking
-Link	Asia/Dhaka		Asia/Dacca
-Link	Asia/Macau		Asia/Macao
-Link	Asia/Makassar		Asia/Ujung_Pandang
-Link	Asia/Jerusalem		Asia/Tel_Aviv
-Link	Asia/Thimphu		Asia/Thimbu
-Link	Asia/Ulaanbaatar	Asia/Ulan_Bator
-Link	Australia/Sydney	Australia/ACT
-Link	Australia/Sydney	Australia/Canberra
-Link	Australia/Lord_Howe	Australia/LHI
-Link	Australia/Sydney	Australia/NSW
-Link	Australia/Darwin	Australia/North
-Link	Australia/Brisbane	Australia/Queensland
-Link	Australia/Adelaide	Australia/South
-Link	Australia/Hobart	Australia/Tasmania
-Link	Australia/Melbourne	Australia/Victoria
-Link	Australia/Perth		Australia/West
-Link	Australia/Broken_Hill	Australia/Yancowinna
-Link	America/Rio_Branco	Brazil/Acre
-Link	America/Noronha		Brazil/DeNoronha
-Link	America/Sao_Paulo	Brazil/East
-Link	America/Manaus		Brazil/West
-Link	America/Halifax		Canada/Atlantic
-Link	America/Winnipeg	Canada/Central
-Link	America/Regina		Canada/East-Saskatchewan
-Link	America/Toronto		Canada/Eastern
-Link	America/Edmonton	Canada/Mountain
-Link	America/St_Johns	Canada/Newfoundland
-Link	America/Vancouver	Canada/Pacific
-Link	America/Regina		Canada/Saskatchewan
-Link	America/Whitehorse	Canada/Yukon
-Link	America/Santiago	Chile/Continental
-Link	Pacific/Easter		Chile/EasterIsland
-Link	America/Havana		Cuba
-Link	Africa/Cairo		Egypt
-Link	Europe/Dublin		Eire
-Link	Europe/Chisinau		Europe/Tiraspol
-Link	Europe/London		GB
-Link	Europe/London		GB-Eire
-Link	Etc/GMT			GMT+0
-Link	Etc/GMT			GMT-0
-Link	Etc/GMT			GMT0
-Link	Etc/GMT			Greenwich
-Link	Asia/Hong_Kong		Hongkong
-Link	Atlantic/Reykjavik	Iceland
-Link	Asia/Tehran		Iran
-Link	Asia/Jerusalem		Israel
-Link	America/Jamaica		Jamaica
-Link	Asia/Tokyo		Japan
-Link	Pacific/Kwajalein	Kwajalein
-Link	Africa/Tripoli		Libya
-Link	America/Tijuana		Mexico/BajaNorte
-Link	America/Mazatlan	Mexico/BajaSur
-Link	America/Mexico_City	Mexico/General
-Link	America/Denver		Navajo
-Link	Pacific/Auckland	NZ
-Link	Pacific/Chatham		NZ-CHAT
-Link	Pacific/Pago_Pago	Pacific/Samoa
-Link	Europe/Warsaw		Poland
-Link	Europe/Lisbon		Portugal
-Link	Asia/Shanghai		PRC
-Link	Asia/Taipei		ROC
-Link	Asia/Seoul		ROK
-Link	Asia/Singapore		Singapore
-Link	Europe/Istanbul		Turkey
-Link	Etc/UCT			UCT
-Link	America/Anchorage	US/Alaska
-Link	America/Adak		US/Aleutian
-Link	America/Phoenix		US/Arizona
-Link	America/Chicago		US/Central
-Link	America/Indianapolis	US/East-Indiana
-Link	America/New_York	US/Eastern
-Link	Pacific/Honolulu	US/Hawaii
-Link	America/Indiana/Knox	US/Indiana-Starke
-Link	America/Detroit		US/Michigan
-Link	America/Denver		US/Mountain
-Link	America/Los_Angeles	US/Pacific
-Link	Pacific/Pago_Pago	US/Samoa
-Link	Etc/UTC			UTC
-Link	Etc/UTC			Universal
-Link	Europe/Moscow		W-SU
-Link	Etc/UTC			Zulu
+# @(#)backward	7.29
+
+# This file provides links between current names for time zones
+# and their old names.  Many names changed in late 1993.
+
+Link	Africa/Bamako		Africa/Timbuktu
+Link	America/Argentina/Catamarca	America/Argentina/ComodRivadavia
+Link	America/Adak		America/Atka
+Link	America/Argentina/Buenos_Aires	America/Buenos_Aires
+Link	America/Argentina/Catamarca	America/Catamarca
+Link	America/Argentina/Cordoba	America/Cordoba
+Link	America/Tijuana		America/Ensenada
+Link	America/Indiana/Indianapolis	America/Fort_Wayne
+Link	America/Indiana/Indianapolis	America/Indianapolis
+Link	America/Argentina/Jujuy	America/Jujuy
+Link	America/Indiana/Knox	America/Knox_IN
+Link	America/Kentucky/Louisville	America/Louisville
+Link	America/Argentina/Mendoza	America/Mendoza
+Link	America/Rio_Branco	America/Porto_Acre
+Link	America/Argentina/Cordoba	America/Rosario
+Link	America/St_Thomas	America/Virgin
+Link	Asia/Ashgabat		Asia/Ashkhabad
+Link	Asia/Chongqing		Asia/Chungking
+Link	Asia/Dhaka		Asia/Dacca
+Link	Asia/Macau		Asia/Macao
+Link	Asia/Jerusalem		Asia/Tel_Aviv
+Link	Asia/Thimphu		Asia/Thimbu
+Link	Asia/Makassar		Asia/Ujung_Pandang
+Link	Asia/Ulaanbaatar	Asia/Ulan_Bator
+Link	Australia/Sydney	Australia/ACT
+Link	Australia/Sydney	Australia/Canberra
+Link	Australia/Lord_Howe	Australia/LHI
+Link	Australia/Sydney	Australia/NSW
+Link	Australia/Darwin	Australia/North
+Link	Australia/Brisbane	Australia/Queensland
+Link	Australia/Adelaide	Australia/South
+Link	Australia/Hobart	Australia/Tasmania
+Link	Australia/Melbourne	Australia/Victoria
+Link	Australia/Perth		Australia/West
+Link	Australia/Broken_Hill	Australia/Yancowinna
+Link	America/Rio_Branco	Brazil/Acre
+Link	America/Noronha		Brazil/DeNoronha
+Link	America/Sao_Paulo	Brazil/East
+Link	America/Manaus		Brazil/West
+Link	America/Chicago		CST6CDT
+Link	America/Halifax		Canada/Atlantic
+Link	America/Winnipeg	Canada/Central
+Link	America/Regina		Canada/East-Saskatchewan
+Link	America/Toronto		Canada/Eastern
+Link	America/Edmonton	Canada/Mountain
+Link	America/St_Johns	Canada/Newfoundland
+Link	America/Vancouver	Canada/Pacific
+Link	America/Regina		Canada/Saskatchewan
+Link	America/Whitehorse	Canada/Yukon
+Link	America/Santiago	Chile/Continental
+Link	Pacific/Easter		Chile/EasterIsland
+Link	America/Havana		Cuba
+Link	America/Panama		EST
+Link	America/New_York	EST5EDT
+Link	Africa/Cairo		Egypt
+Link	Europe/Dublin		Eire
+Link	Europe/London		Europe/Belfast
+Link	Europe/Chisinau		Europe/Tiraspol
+Link	Europe/London		GB
+Link	Europe/London		GB-Eire
+Link	Etc/GMT			GMT+0
+Link	Etc/GMT			GMT-0
+Link	Etc/GMT			GMT0
+Link	Etc/GMT			Greenwich
+Link	Pacific/Honolulu	HST
+Link	Asia/Hong_Kong		Hongkong
+Link	Atlantic/Reykjavik	Iceland
+Link	Asia/Tehran		Iran
+Link	Asia/Jerusalem		Israel
+Link	America/Jamaica		Jamaica
+Link	Asia/Tokyo		Japan
+Link	Pacific/Kwajalein	Kwajalein
+Link	Africa/Tripoli		Libya
+Link	America/Phoenix		MST
+Link	America/Denver		MST7MDT
+Link	America/Tijuana		Mexico/BajaNorte
+Link	America/Mazatlan	Mexico/BajaSur
+Link	America/Mexico_City	Mexico/General
+Link	Pacific/Auckland	NZ
+Link	Pacific/Chatham		NZ-CHAT
+Link	America/Denver		Navajo
+Link	Asia/Shanghai		PRC
+Link	America/Los_Angeles	PST8PDT
+Link	Pacific/Pago_Pago	Pacific/Samoa
+Link	Pacific/Truk		Pacific/Yap
+Link	Europe/Warsaw		Poland
+Link	Europe/Lisbon		Portugal
+Link	Asia/Taipei		ROC
+Link	Asia/Seoul		ROK
+Link	Asia/Singapore		Singapore
+Link	Europe/Istanbul		Turkey
+Link	Etc/UCT			UCT
+Link	America/Anchorage	US/Alaska
+Link	America/Adak		US/Aleutian
+Link	America/Phoenix		US/Arizona
+Link	America/Chicago		US/Central
+Link	America/Indiana/Indianapolis	US/East-Indiana
+Link	America/New_York	US/Eastern
+Link	Pacific/Honolulu	US/Hawaii
+Link	America/Indiana/Knox	US/Indiana-Starke
+Link	America/Detroit		US/Michigan
+Link	America/Denver		US/Mountain
+Link	America/Los_Angeles	US/Pacific
+Link	Pacific/Pago_Pago	US/Samoa
+Link	Etc/UTC			UTC
+Link	Etc/UTC			Universal
+Link	Europe/Moscow		W-SU
+Link	Etc/UTC			Zulu
diff --git a/JodaTime/src/java/org/joda/time/tz/src/europe b/JodaTime/src/java/org/joda/time/tz/src/europe
index 9535a667b..ec6720a80 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/europe
+++ b/JodaTime/src/java/org/joda/time/tz/src/europe
@@ -1,4 +1,4 @@
-# @(#)europe	7.94
+# @(#)europe	7.95
 
 # This data is by no means authoritative; if you think you know better,
 # go ahead and edit the file (and please send any changes to
@@ -422,13 +422,6 @@ Zone	Europe/London	-0:01:15 -	LMT	1847 Dec  1
 			 1:00	-	BST	1971 Oct 31 2:00u
 			 0:00	GB-Eire	%s	1996
 			 0:00	EU	GMT/BST
-Zone	Europe/Belfast	-0:23:40 -	LMT	1880 Aug  2
-			-0:25:21 -	DMT	1916 May 21 2:00 # Dublin/Dunsink MT
-			-0:25:21 1:00	IST	1916 Oct  1 2:00s   # Irish Summer Time
-			 0:00	GB-Eire	%s	1968 Oct 27
-			 1:00	-	BST	1971 Oct 31 2:00u
-			 0:00	GB-Eire	%s	1996
-			 0:00	EU	GMT/BST
 Zone	Europe/Dublin	-0:25:00 -	LMT	1880 Aug  2
 			-0:25:21 -	DMT	1916 May 21 2:00
 			-0:25:21 1:00	IST	1916 Oct  1 2:00s
@@ -756,6 +749,40 @@ Zone	Europe/Prague	0:57:44 -	LMT	1850
 			1:00	EU	CE%sT
 
 # Denmark, Faeroe Islands, and Greenland
+
+# From Jesper Norgaard Welen (2005-04-26):
+# http://www.hum.aau.dk/~poe/tid/tine/DanskTid.htm says that the law
+# [introducing standard time] was in effect from 1894-01-01....
+# The page http://www.retsinfo.dk/_GETDOCI_/ACCN/A18930008330-REGL
+# confirms this, and states that the law was put forth 1893-03-29.
+#
+# The EU treaty with effect from 1973:
+# http://www.retsinfo.dk/_GETDOCI_/ACCN/A19722110030-REGL
+#
+# This provoked a new law from 1974 to make possible summer time changes
+# in subsequenet decrees with the law
+# http://www.retsinfo.dk/_GETDOCI_/ACCN/A19740022330-REGL
+#
+# It seems however that no decree was set forward until 1980.  I have
+# not found any decree, but in another related law, the effecting DST
+# changes are stated explicitly to be from 1980-04-06 at 02:00 to
+# 1980-09-28 at 02:00.  If this is true, this differs slightly from
+# the EU rule in that DST runs to 02:00, not 03:00.  We don't know
+# when Denmark began using the EU rule correctly, but we have only
+# confirmation of the 1980-time, so I presume it was correct in 1981:
+# The law is about the management of the extra hour, concerning
+# working hours reported and effect on obligatory-rest rules (which
+# was suspended on that night):
+# http://www.retsinfo.dk/_GETDOCI_/ACCN/C19801120554-REGL
+
+# From Jesper Norgaard Welen (2005-06-11):
+# The Herning Folkeblad (1980-09-26) reported that the night between
+# Saturday and Sunday the clock is set back from three to two.
+
+# From Paul Eggert (2005-06-11):
+# Hence the "02:00" of the 1980 law refers to standard time, not
+# wall-clock time, and so the EU rules were in effect in 1980.
+
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Denmark	1916	only	-	May	14	23:00	1:00	S
 Rule	Denmark	1916	only	-	Sep	30	23:00	0	-
@@ -768,13 +795,10 @@ Rule	Denmark	1947	only	-	May	 4	 2:00s	1:00	S
 Rule	Denmark	1947	only	-	Aug	10	 2:00s	0	-
 Rule	Denmark	1948	only	-	May	 9	 2:00s	1:00	S
 Rule	Denmark	1948	only	-	Aug	 8	 2:00s	0	-
-# Whitman also gives 1949 Apr 9 to 1949 Oct 1, and disagrees in minor ways
-# about many of the above dates; go with Shanks.
 #
-# For 1894, Shanks says Jan, Whitman Apr; go with Whitman.
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone Europe/Copenhagen	 0:50:20 -	LMT	1890
-			 0:50:20 -	CMT	1894 Apr  # Copenhagen Mean Time
+			 0:50:20 -	CMT	1894 Jan  1 # Copenhagen MT
 			 1:00	Denmark	CE%sT	1942 Nov  2 2:00s
 			 1:00	C-Eur	CE%sT	1945 Apr  2 2:00
 			 1:00	Denmark	CE%sT	1980
@@ -1608,12 +1632,10 @@ Zone Europe/Amsterdam	0:19:32 -	LMT	1835
 			1:00	EU	CE%sT
 
 # Norway
+# http://met.no/met/met_lex/q_u/sommertid.html (2004-01) agrees with Shanks.
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-# Whitman gives 1916 May 21 - 1916 Oct 21; go with Shanks.
 Rule	Norway	1916	only	-	May	22	1:00	1:00	S
 Rule	Norway	1916	only	-	Sep	30	0:00	0	-
-# Whitman says DST observed 1935-08-11/1942-11-01, then 1943-03-29/10-04,
-# 1944-04-03/10-02, and 1945-04-01/10-01; go with Shanks.
 Rule	Norway	1945	only	-	Apr	 2	2:00s	1:00	S
 Rule	Norway	1945	only	-	Oct	 1	2:00s	0	-
 Rule	Norway	1959	1964	-	Mar	Sun>=15	2:00s	1:00	S
@@ -1686,19 +1708,26 @@ Rule	Poland	1944	only	-	Oct	 4	2:00	0	-
 # For 1944-1948 Whitman gives the previous day; go with Shanks.
 Rule	Poland	1945	only	-	Apr	29	0:00	1:00	S
 Rule	Poland	1945	only	-	Nov	 1	0:00	0	-
-Rule	Poland	1946	only	-	Apr	14	0:00	1:00	S
-Rule	Poland	1946	only	-	Sep	 7	0:00	0	-
-Rule	Poland	1947	only	-	May	 4	0:00	1:00	S
-Rule	Poland	1947	1948	-	Oct	Sun>=1	0:00	0	-
-Rule	Poland	1948	only	-	Apr	18	0:00	1:00	S
-# Whitman also gives 1949 Apr 9 - 1949 Oct 1; go with Shanks.
+# For 1946 on the source is Kazimierz Borkowski,
+# Torun Center for Astronomy, Dept. of Radio Astronomy, Nicolaus Copernicus U.,
+# <http://www.astro.uni.torun.pl/~kb/Artykuly/U-PA/Czas2.htm#tth_tAb1>
+# Thanks to Przemyslaw Augustyniak (2005-05-28) for this reference.
+# He also gives these further references:
+# Mon Pol nr 13, poz 162 (1995) <http://www.abc.com.pl/serwis/mp/1995/0162.htm>
+# Druk nr 2180 (2003) <http://www.senat.gov.pl/k5/dok/sejm/053/2180.pdf>
+Rule	Poland	1946	only	-	Apr	14	0:00s	1:00	S
+Rule	Poland	1946	only	-	Oct	 7	2:00s	0	-
+Rule	Poland	1947	only	-	May	 4	2:00s	1:00	S
+Rule	Poland	1947	1949	-	Oct	Sun>=1	2:00s	0	-
+Rule	Poland	1948	only	-	Apr	18	2:00s	1:00	S
+Rule	Poland	1949	only	-	Apr	10	2:00s	1:00	S
 Rule	Poland	1957	only	-	Jun	 2	1:00s	1:00	S
 Rule	Poland	1957	1958	-	Sep	lastSun	1:00s	0	-
 Rule	Poland	1958	only	-	Mar	30	1:00s	1:00	S
 Rule	Poland	1959	only	-	May	31	1:00s	1:00	S
 Rule	Poland	1959	1961	-	Oct	Sun>=1	1:00s	0	-
 Rule	Poland	1960	only	-	Apr	 3	1:00s	1:00	S
-Rule	Poland	1961	1964	-	May	Sun>=25	1:00s	1:00	S
+Rule	Poland	1961	1964	-	May	lastSun	1:00s	1:00	S
 Rule	Poland	1962	1964	-	Sep	lastSun	1:00s	0	-
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Europe/Warsaw	1:24:00 -	LMT	1880
@@ -1707,24 +1736,8 @@ Zone	Europe/Warsaw	1:24:00 -	LMT	1880
 			2:00	Poland	EE%sT	1922 Jun
 			1:00	Poland	CE%sT	1940 Jun 23 2:00
 			1:00	C-Eur	CE%sT	1944 Oct
-			1:00	Poland	CE%sT	1977 Apr  3 1:00
-			1:00	W-Eur	CE%sT	1999
-# IATA SSIM (1991/1996) gives EU rules, but the _The Warsaw Voice_
-# <a href="http://www.warsawvoice.com.pl/v361/NewsInBrief.shtml">
-# http://www.warsawvoice.com/pl/v361/NewsInBrief.shtml (1995-09-24)
-# </a>
-# says the autumn 1995 switch was at 02:00.
-# Stick with W-Eur for now.
-#
-# From Marcin Kasperski (1999-06-10):
-# According to my colleagues someone recently decided, that Poland would
-# follow European Union regulations, so - I think - the matter is not
-# worth further discussion.
-#
-# From Paul Eggert (1999-06-10):
-# Kasperski also writes that the government futzed with the rules in 1997
-# or 1998 but he doesn't remember the details.  Assume they switched to
-# EU rules in 1999.
+			1:00	Poland	CE%sT	1977
+			1:00	W-Eur	CE%sT	1988
 			1:00	EU	CE%sT
 
 # Portugal
diff --git a/JodaTime/src/java/org/joda/time/tz/src/northamerica b/JodaTime/src/java/org/joda/time/tz/src/northamerica
index c290caf67..40a2ce269 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/northamerica
+++ b/JodaTime/src/java/org/joda/time/tz/src/northamerica
@@ -1,4 +1,4 @@
-# @(#)northamerica	7.75
+# @(#)northamerica	7.79
 # also includes Central America and the Caribbean
 
 # This data is by no means authoritative; if you think you know better,
@@ -110,21 +110,26 @@
 #
 # He had scored a 20-second scoop on other broadcasters.
 
+# From Arthur David Olson (2005-08-22):
+# Paul has been careful to use the "US" rules only in those locations
+# that are part of the United States; this reflects the real scope of
+# U.S. government action.  So even though the "US" rules have changed
+# in the latest release, other countries won't be affected.
+
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	US	1918	1919	-	Mar	lastSun	2:00	1:00	D
 Rule	US	1918	1919	-	Oct	lastSun	2:00	0	S
 Rule	US	1942	only	-	Feb	9	2:00	1:00	W # War
 Rule	US	1945	only	-	Aug	14	23:00u	1:00	P # Peace
 Rule	US	1945	only	-	Sep	30	2:00	0	S
-Rule	US	1967	max	-	Oct	lastSun	2:00	0	S
+Rule	US	1967	2006	-	Oct	lastSun	2:00	0	S
 Rule	US	1967	1973	-	Apr	lastSun	2:00	1:00	D
 Rule	US	1974	only	-	Jan	6	2:00	1:00	D
 Rule	US	1975	only	-	Feb	23	2:00	1:00	D
 Rule	US	1976	1986	-	Apr	lastSun	2:00	1:00	D
-Rule	US	1987	max	-	Apr	Sun>=1	2:00	1:00	D
-# <a href="http://thomas.loc.gov/cgi-bin/bdquery/z?d106:h.r.00177:">
-# H.R.177
-# </a> (introduced 1999-01-06) would change April to March in the above rule.
+Rule	US	1987	2006	-	Apr	Sun>=1	2:00	1:00	D
+Rule	US	2007	max	-	Mar	Sun>=8	2:00	1:00	D
+Rule	US	2007	max	-	Nov	Sun>=1	2:00	0	S
 
 # From Bob Devine (1988-01-28):
 # ...Alaska (and Hawaii) had the timezone names changed in 1967.
@@ -202,13 +207,32 @@ Rule	US	1987	max	-	Apr	Sun>=1	2:00	1:00	D
 # Public law 106-564 (2000-12-23) introduced the abbreviation
 # "Chamorro Standard Time" for time in Guam and the Northern Marianas.
 # See the file "australasia".
-
+ 
+# From Arthur David Olson, 2005-08-09
+# The following was signed into law on 2005-08-08.
+#
+# H.R. 6, Energy Policy Act of 2005, SEC. 110. DAYLIGHT SAVINGS.
+#   (a) Amendment- Section 3(a) of the Uniform Time Act of 1966 (15
+#   U.S.C. 260a(a)) is amended--
+#     (1) by striking `first Sunday of April' and inserting `second
+#     Sunday of March'; and
+#     (2) by striking `last Sunday of October' and inserting `first
+#     Sunday of November'.
+#   (b) Effective Date- Subsection (a) shall take effect 1 year after the
+#   date of enactment of this Act or March 1, 2007, whichever is later.
+#   (c) Report to Congress- Not later than 9 months after the effective
+#   date stated in subsection (b), the Secretary shall report to Congress
+#   on the impact of this section on energy consumption in the United
+#   States.
+#   (d) Right to Revert- Congress retains the right to revert the
+#   Daylight Saving Time back to the 2005 time schedules once the
+#   Department study is complete.
 
 # US eastern time, represented by New York
 
 # Connecticut, Delaware, District of Columbia, most of Florida,
-# Georgia, southeast Indiana (Clark, Dearborn, Floyd, Harrison, and
-# Ohio counties), eastern Kentucky, Maine, Maryland, Massachusetts,
+# Georgia, southeast Indiana (Dearborn and Ohio counties), eastern Kentucky
+# (except America/Kentucky/Louisville below), Maine, Maryland, Massachusetts,
 # New Hampshire, New Jersey, New York, North Carolina, Ohio,
 # Pennsylvania, Rhode Island, South Carolina, eastern Tennessee,
 # Vermont, Virginia, West Virginia
@@ -463,40 +487,44 @@ Zone America/Boise	-7:44:49 -	LMT	1883 Nov 18 12:15:11
 # For a map of Indiana's time zone regions, see:
 # <a href="http://www.mccsc.edu/time.html">
 # What time is it in Indiana?
-# </a> (1999-04-06)
+# </a> (2005-05-03)
+#
+# From Paul Eggert (2005-08-22):
+# Since 1970, most of Indiana has been like America/Indiana/Indianapolis,
+# with the following exceptions:
+#
+# - Gibson, Jasper, Lake, LaPorte, Newton, Porter, Posey, Spencer,
+#   Vandenburgh, and Warrick counties have been like America/Chicago.
+#
+# - Dearborn and Ohio counties have been like America/New_York.
+#
+# - Clark, Floyd, and Harrison counties have been like
+#   America/Kentucky/Louisville.
+#
+# - Crawford, Starke, and Switzerland counties have their own time zone
+#   histories as noted below.
 #
-# From Paul Eggert (1995-12-19):
-# Indiana generally observes either EST all year, or CST/CDT,
-# but areas near Cincinnati and Louisville use those cities' timekeeping
-# and in 1969 and 1970 the whole state observed daylight time;
-# and there are other exceptions as noted below.
 # Shanks partitions Indiana into 345 regions, each with its own time history,
 # and writes ``Even newspaper reports present contradictory information.''
 # Fortunately, most of the complexity occurred before our cutoff date of 1970.
 #
-# Since 1970, EST-only Indiana has been like America/Indianapolis,
-# with exceptions noted below for Crawford, Starke, and Switzerland counties.
-# The parts of Indiana not listed below have been like America/Chicago,
-# America/Louisville, or America/New_York.
-#
 # Other than Indianapolis, the Indiana place names are so nondescript
 # that they would be ambiguous if we left them at the `America' level.
 # So we reluctantly put them all in a subdirectory `America/Indiana'.
-#
-# Most of EST-only Indiana last observed DST in 1970.
 
-# From Paul Eggert (2001-03-06), following a tip by Markus Kuhn:
-# Pam Belluck reported in the New York Times (2001-01-31) that the
-# Indiana Legislature is considering a bill to adopt DST statewide.
-# Her article mentioned Vevay, whose post office observes a different
-# time zone from Danner's Hardware across the street.
+# From Paul Eggert (2005-08-16):
+# http://www.mccsc.edu/time.html says that Indiana will use DST starting 2006,
+# and that many counties may switch either to Central or to Eastern time.
+# The county-by-county decisions have not been made yet, so for now assume
+# that no counties will switch: this assumption is most likely wrong,
+# but it's the best we can do for now.
 
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
 Rule Indianapolis 1941	only	-	Jun	22	2:00	1:00	D
 Rule Indianapolis 1941	1954	-	Sep	lastSun	2:00	0	S
 Rule Indianapolis 1946	1954	-	Apr	lastSun	2:00	1:00	D
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Indianapolis -5:44:38 - LMT 1883 Nov 18 12:15:22
+Zone America/Indiana/Indianapolis -5:44:38 - LMT 1883 Nov 18 12:15:22
 			-6:00	US	C%sT	1920
 			-6:00 Indianapolis C%sT	1942
 			-6:00	US	C%sT	1946
@@ -505,8 +533,8 @@ Zone America/Indianapolis -5:44:38 - LMT 1883 Nov 18 12:15:22
 			-6:00	-	CST	1958 Apr 27 2:00
 			-5:00	-	EST	1969
 			-5:00	US	E%sT	1971
-			-5:00	-	EST
-Link America/Indianapolis America/Indiana/Indianapolis
+			-5:00	-	EST	2006
+			-5:00	US	E%sT
 #
 # Part of Crawford County, Indiana, last observed DST in 1975,
 # and left its clocks alone in 1974.
@@ -523,7 +551,8 @@ Zone America/Indiana/Marengo -5:45:23 -	LMT	1883 Nov 18 12:14:37
 			-5:00	US	E%sT	1974 Jan  6 2:00
 			-6:00	1:00	CDT	1974 Oct 27 2:00
 			-5:00	US	E%sT	1976
-			-5:00	-	EST
+			-5:00	-	EST	2006
+			-5:00	US	E%sT
 #
 # Starke County, Indiana
 # From Arthur David Olson (1991-10-28):
@@ -542,7 +571,8 @@ Zone America/Indiana/Knox -5:46:30 -	LMT	1883 Nov 18 12:13:30
 			-6:00	Starke	C%sT	1962 Apr 29 2:00
 			-5:00	-	EST	1963 Oct 27 2:00
 			-6:00	US	C%sT	1991 Oct 27 2:00
-			-5:00	-	EST
+			-5:00	-	EST	2006
+			-5:00	US	E%sT
 #
 # Switzerland County, Indiana, last observed DST in 1972.
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
@@ -550,10 +580,11 @@ Zone America/Indiana/Vevay -5:40:16 -	LMT	1883 Nov 18 12:19:44
 			-6:00	US	C%sT	1954 Apr 25 2:00
 			-5:00	-	EST	1969
 			-5:00	US	E%sT	1973
-			-5:00	-	EST
+			-5:00	-	EST	2006
+			-5:00	US	E%sT
 
 # Part of Kentucky left its clocks alone in 1974.
-# This also includes a part of Indiana immediately adjacent to Louisville.
+# This also includes Clark, Floyd, and Harrison counties in Indiana.
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
 Rule Louisville	1921	only	-	May	1	2:00	1:00	D
 Rule Louisville	1921	only	-	Sep	1	2:00	0	S
@@ -563,7 +594,7 @@ Rule Louisville	1946	only	-	Jun	2	2:00	0	S
 Rule Louisville	1950	1955	-	Sep	lastSun	2:00	0	S
 Rule Louisville	1956	1960	-	Oct	lastSun	2:00	0	S
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Louisville	-5:43:02 -	LMT	1883 Nov 18 12:16:58
+Zone America/Kentucky/Louisville -5:43:02 -	LMT	1883 Nov 18 12:16:58
 			-6:00	US	C%sT	1921
 			-6:00 Louisville C%sT	1942
 			-6:00	US	C%sT	1946
@@ -572,7 +603,6 @@ Zone America/Louisville	-5:43:02 -	LMT	1883 Nov 18 12:16:58
 			-5:00	US	E%sT	1974 Jan  6 2:00
 			-6:00	1:00	CDT	1974 Oct 27 2:00
 			-5:00	US	E%sT
-Link America/Louisville America/Kentucky/Louisville
 #
 # Wayne, Clinton, and Russell Counties, Kentucky
 #
@@ -695,17 +725,6 @@ Zone America/Menominee	-5:50:27 -	LMT	1885 Sep 18 12:00
 # _Los Angeles Times_ (1998-11-10), A1, A10; it cites
 # Jimmy Skaggs, _The Great Guano Rush_ (1994).
 
-# Old names, for S5 users
-
-# Link	LINK-FROM		LINK-TO
-Link	America/New_York	EST5EDT
-Link	America/Chicago		CST6CDT
-Link	America/Denver		MST7MDT
-Link	America/Los_Angeles	PST8PDT
-Link	America/Indianapolis	EST
-Link	America/Phoenix		MST
-Link	Pacific/Honolulu	HST
-
 ################################################################################
 
 
@@ -1294,8 +1313,6 @@ Zone America/Dawson_Creek -8:00:56 -	LMT	1884
 # </a> (1999) reports that Pangnirtung operates on eastern time,
 # and that Coral Harbour does not observe DST.  We don't know when
 # Pangnirtung switched to eastern time; we'll guess 1995.
-# We'll ignore the claim about Coral Harbour for now,
-# since we have no further info.
 
 # From Rives McDow (1999-11-08):
 # On October 31, when the rest of Nunavut went to Central time,
@@ -1370,6 +1387,23 @@ Zone America/Dawson_Creek -8:00:56 -	LMT	1884
 # more.
 # [Also see <http://www.nunatsiaq.com/nunavut/nvt10309_06.html> (2001-03-09).]
 
+# From Gwillim Law (2005-05-21):
+# According to maps at
+# http://inms-ienm.nrc-cnrc.gc.ca/images/time_services/TZ01SWE.jpg
+# http://inms-ienm.nrc-cnrc.gc.ca/images/time_services/TZ01SSE.jpg
+# (both dated 2003), and
+# http://www.canadiangeographic.ca/Magazine/SO98/geomap.asp
+# (from a 1998 Canadian Geographic article), the de facto and de jure time
+# for Southampton Island (at the north end of Hudson Bay) is UTC-5 all year
+# round.  Using Google, it's easy to find other websites that confirm this.
+# I wasn't able to find how far back this time regimen goes, but since it
+# predates the creation of Nunavut, it probably goes back many years....
+# The Inuktitut name of Coral Harbour is Sallit, but it's rarely used.
+#
+# From Paul Eggert (2005-07-26):
+# For lack of better information, assume that Southampton Island observed
+# daylight saving only during wartime.
+
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	NT_YK	1918	only	-	Apr	14	2:00	1:00	D
 Rule	NT_YK	1918	only	-	Oct	27	2:00	0	S
@@ -1393,6 +1427,9 @@ Zone America/Iqaluit	-4:33:52 -	LMT	1884 # Frobisher Bay before 1987
 			-5:00	NT_YK	E%sT	1999 Oct 31 2:00
 			-6:00	Canada	C%sT	2000 Oct 29 2:00
 			-5:00	Canada	E%sT
+Zone America/Coral_Harbour -5:32:40 -	LMT	1884
+			-5:00	NT_YK	E%sT	1946
+			-5:00	-	EST
 Zone America/Rankin_Inlet -6:08:40 -	LMT	1884
 			-6:00	NT_YK	C%sT	2000 Oct 29 2:00
 			-5:00	-	EST	2001 Apr  1 3:00
@@ -1968,10 +2005,21 @@ Zone America/Montserrat	-4:08:52 -	LMT	1911 Jul 1 0:01   # Olveston
 # The Decree, no 23-2005 is available here:
 # http://www.presidencia.gob.ni/buscador_gaceta/BD/DECRETOS/2005/Decreto%2023-2005%20Se%20adelanta%20en%20una%20hora%20en%20todo%20el%20territorio%20nacional%20apartir%20de%20las%2024horas%20del%2009%20de%20Abril.pdf
 #
-# From Paul Eggert (2005-04-12):
+# From Paul Eggert (2005-05-01):
 # The decree doesn't say anything about daylight saving, but for now let's
 # assume that it is daylight saving and that they'll switch back on the
-# 2nd Sunday in September.
+# 3rd Sunday in September.
+#
+# From Gwillim Law (2005-04-21):
+# The Associated Press story on the time change, which can be found at
+# http://www.lapalmainteractivo.com/guias/content/gen/ap/America_Latina/AMC_GEN_NICARAGUA_HORA.html
+# and elsewhere, says (fifth paragraph, translated from Spanish):  "The last
+# time that a change of clocks was applied to save energy was in the year 2000
+# during the Arnoldo Aleman administration."...
+# The northamerica file says that Nicaragua has been on UTC-6 continuously
+# since December 1998.  I wasn't able to find any details of Nicaraguan time
+# changes in 2000.  Perhaps a note could be added to the northamerica file, to
+# the effect that we have indirect evidence that DST was observed in 2000.
 #
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Nic	1979	1980	-	Mar	Sun>=16	0:00	1:00	D
@@ -1979,7 +2027,7 @@ Rule	Nic	1979	1980	-	Jun	Mon>=23	0:00	0	S
 Rule	Nic	1992	only	-	Jan	1	4:00	1:00	D
 Rule	Nic	1992	only	-	Sep	24	0:00	0	S
 Rule	Nic	2005	only	-	Apr	10	0:00	1:00	D
-Rule	Nic	2005	only	-	Sep	11	0:00	0	S
+Rule	Nic	2005	only	-	Sep	18	0:00	0	S
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	America/Managua	-5:45:08 -	LMT	1890
 			-5:45:12 -	MMT	1934 Jun 23 # Managua Mean Time?
diff --git a/JodaTime/src/java/org/joda/time/tz/src/southamerica b/JodaTime/src/java/org/joda/time/tz/src/southamerica
index d348d7a47..9bf068ba9 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/southamerica
+++ b/JodaTime/src/java/org/joda/time/tz/src/southamerica
@@ -1,4 +1,4 @@
-# @(#)southamerica	7.60
+# @(#)southamerica	7.61
 
 # This data is by no means authoritative; if you think you know better,
 # go ahead and edit the file (and please send any changes to
@@ -293,7 +293,7 @@ Zone America/Argentina/Jujuy -4:21:12 -	LMT	1894 Oct 31
 			-4:00	Arg	AR%sT	2000 Mar  3
 			-3:00	-	ART
 #
-# Catamarca (CT)
+# Catamarca (CT), Chubut (CH)
 Zone America/Argentina/Catamarca -4:23:08 - LMT	1894 Oct 31
 			-4:16:48 -	CMT	1920 May
 			-4:00	-	ART	1930 Dec
@@ -323,20 +323,6 @@ Zone America/Argentina/Mendoza -4:35:16 - LMT	1894 Oct 31
 			-4:00	-	WART	2004 Sep 26
 			-3:00	-	ART
 #
-# Chubut (CH)
-# The name "Comodoro Rivadavia" exceeds the 14-byte POSIX limit.
-Zone America/Argentina/ComodRivadavia -4:30:00 - LMT	1894 Oct 31
-			-4:16:48 -	CMT	1920 May
-			-4:00	-	ART	1930 Dec
-			-4:00	Arg	AR%sT	1969 Oct  5
-			-3:00	Arg	AR%sT	1991 Mar  3
-			-4:00	-	WART	1991 Oct 20
-			-3:00	Arg	AR%sT	1999 Oct  3
-			-4:00	Arg	AR%sT	2000 Mar  3
-			-3:00	-	ART	2004 Jun  1
-			-4:00	-	WART	2004 Jun 20
-			-3:00	-	ART
-#
 # Santa Cruz (SC)
 Zone America/Argentina/Rio_Gallegos -4:36:52 - LMT 1894 Oct 31
 			-4:16:48 -	CMT	1920 May # Cordoba Mean Time

From 229e52b25b0f1c12a9f860a057b3a2f57e963044 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 3 Sep 2005 21:22:49 +0000
Subject: [PATCH 027/130] Ignore temp files

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@884 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/test/org/joda/time/.cvsignore | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 JodaTime/src/test/org/joda/time/.cvsignore

diff --git a/JodaTime/src/test/org/joda/time/.cvsignore b/JodaTime/src/test/org/joda/time/.cvsignore
new file mode 100644
index 000000000..202a7b178
--- /dev/null
+++ b/JodaTime/src/test/org/joda/time/.cvsignore
@@ -0,0 +1 @@
+Temp*

From dd16addfdda61cefc46ffea34a39ee2794c8791b Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 3 Sep 2005 21:25:18 +0000
Subject: [PATCH 028/130] Add ChronologyType, to provide the missing link in
 the API types

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@885 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |   2 +
 .../java/org/joda/time/ChronologyType.java    | 326 ++++++++++++++++++
 JodaTime/src/test/org/joda/time/TestAll.java  |   1 +
 .../org/joda/time/TestChronologyType.java     | 179 ++++++++++
 4 files changed, 508 insertions(+)
 create mode 100644 JodaTime/src/java/org/joda/time/ChronologyType.java
 create mode 100644 JodaTime/src/test/org/joda/time/TestChronologyType.java

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index a11ddf364..0f842b7d7 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -45,6 +45,8 @@ Bug fixes since 1.1
 
 Enhancements since 1.1
 ----------------------
+- ChronologyType
+  New type that acts as a factory for creating Chronology instances
 
 
 Feedback
diff --git a/JodaTime/src/java/org/joda/time/ChronologyType.java b/JodaTime/src/java/org/joda/time/ChronologyType.java
new file mode 100644
index 000000000..504cc4ce1
--- /dev/null
+++ b/JodaTime/src/java/org/joda/time/ChronologyType.java
@@ -0,0 +1,326 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time;
+
+import java.io.Serializable;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Set;
+
+import org.joda.time.chrono.BuddhistChronology;
+import org.joda.time.chrono.CopticChronology;
+import org.joda.time.chrono.GJChronology;
+import org.joda.time.chrono.GregorianChronology;
+import org.joda.time.chrono.ISOChronology;
+import org.joda.time.chrono.JulianChronology;
+
+/**
+ * Identifies a type of chronology, which represents the calendar system.
+ * <p>
+ * Various chronologies are supported by Joda-Time, including ISO and
+ * GregorianJulian. This class defines static methods to obtain the
+ * different kinds of chronology that are supported. Each instance then
+ * defines methods to obtain a Chronology by specifying the time zone.
+ * For example, to obtain the coptic chronology in the default zone:
+ * <pre>
+ * Chronology c = ChronologyType.coptic().getChronology();
+ * </pre>
+ * <p>
+ * The provided chronology types are:
+ * <ul>
+ * <li>ISO - Based on the ISO8601 standard and suitable for use after about 1600
+ * <li>GJ - Historically accurate calendar with Julian followed by Gregorian
+ * <li>Gregorian - The Gregorian calendar system used for all time (proleptic)
+ * <li>Julian - The Julian calendar system used for all time (proleptic)
+ * <li>Buddhist - The Buddhist calendar system which is an offset in years from GJ
+ * <li>Coptic - The Coptic calendar system which defines 30 day months
+ * </ul>
+ * Hopefully future releases will contain more chronologies.
+ *
+ * @see org.joda.time.chrono.ISOChronology
+ * @see org.joda.time.chrono.GJChronology
+ * @see org.joda.time.chrono.GregorianChronology
+ * @see org.joda.time.chrono.JulianChronology
+ * @see org.joda.time.chrono.CopticChronology
+ * @see org.joda.time.chrono.BuddhistChronology
+ *
+ * @author Stephen Colebourne
+ * @since 1.2
+ */
+public abstract class ChronologyType implements Serializable {
+
+    /** Serialization version */
+    private static final long serialVersionUID = 83923682285389L;
+
+    /** The map of id to type. */
+    private static final Map cTypes = Collections.synchronizedMap(new HashMap());
+
+    /** Ordinal values for standard chronology types. */
+    static final byte  // do not change - values matter for serialization
+        ISO = 1,
+        GJ = 2,
+        GREGORIAN = 3,
+        JULIAN = 4,
+        BUDDHIST = 5,
+        COPTIC = 6;
+
+    /** The iso chronology type. */
+    private static final ChronologyType ISO_TYPE = new StandardChronologyType("ISO", ISO);
+    /** The iso chronology type. */
+    private static final ChronologyType GJ_TYPE = new StandardChronologyType("GJ", GJ);
+    /** The iso chronology type. */
+    private static final ChronologyType GREGORIAN_TYPE = new StandardChronologyType("Gregorian", GREGORIAN);
+    /** The iso chronology type. */
+    private static final ChronologyType JULIAN_TYPE = new StandardChronologyType("Julian", JULIAN);
+    /** The iso chronology type. */
+    private static final ChronologyType BUDDHIST_TYPE = new StandardChronologyType("Buddhist", BUDDHIST);
+    /** The iso chronology type. */
+    private static final ChronologyType COPTIC_TYPE = new StandardChronologyType("Coptic", COPTIC);
+
+    /** The id of the field. */
+    private final String iID;
+
+    //-----------------------------------------------------------------------
+    /**
+     * Constructor.
+     * 
+     * @param id  the id to use
+     */
+    protected ChronologyType(String id) {
+        super();
+        iID = id;
+        cTypes.put(id, this);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets a ChronologyType by id.
+     * <p>
+     * Note that this method will work with your own subclasses of
+     * ChronologyType, so long as an instance of the subclass has been
+     * class-loaded.
+     *
+     * @param id  the id to get
+     * @return the chronology type, null if no known chronology
+     */
+    public static ChronologyType forID(String id) {
+        return (ChronologyType) cTypes.get(id);
+    }
+
+    /**
+     * Gets all the available ids supported.
+     * 
+     * @return an unmodifiable Set of String ids
+     */
+    public static Set getAvailableIDs() {
+        return Collections.unmodifiableSet(cTypes.keySet());
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Get the ISO chronology type.
+     * <p>
+     * {@link ISOChronology} defines all fields in line with the ISO8601 standard.
+     * This chronology is the default, and is suitable for all normal datetime processing.
+     * It is <i>unsuitable</i> for historical datetimes before October 15, 1582
+     * as it applies the modern Gregorian calendar rules before that date.
+     *
+     * @return the ChronologyType constant
+     */
+    public static ChronologyType iso() {
+        return ISO_TYPE;
+    }
+
+    /**
+     * Get the GJ chronology type.
+     * <p>
+     * {@link GJChronology} defines all fields using standard meanings.
+     * This chronology is intended to be used as a replacement for <code>GregorianCalendar</code>.
+     * The Gregorian calendar system is used after October 15, 1582, while the
+     * Julian calendar system is used before.
+     * <p>
+     * Unlike <code>GregorianCalendar</code>, this chronology returns a year of -1
+     * for 1 BCE, -2 for 2 BCE and so on. Thus there is no year zero.
+     * <p>
+     * This method uses the standard Julian to Gregorian cutover date of
+     * October 15th 1582. If you require a cutover on a different date, then use
+     * the factory methods on <code>GJChronology</code> itself.
+     * <p>
+     * When dealing solely with dates in the modern era, from 1600 onwards,
+     * we recommend using ISOChronology, which is the default.
+     *
+     * @return the ChronologyType constant
+     */
+    public static ChronologyType gj() {
+        return GJ_TYPE;
+    }
+
+    /**
+     * Get the Gregorian chronology type.
+     * <p>
+     * {@link GregorianChronology} defines all fields using standard meanings.
+     * It uses the Gregorian calendar rules <i>for all time</i> (proleptic)
+     * thus it is NOT a replacement for <code>GregorianCalendar</code>.
+     * For that purpose, you should use {@link #gj()}.
+     * <p>
+     * The Gregorian calendar system defines a leap year every four years,
+     * except that every 100 years is not leap, but every 400 is leap.
+     * <p>
+     * Technically, this chronology is almost identical to the ISO chronology,
+     * thus we recommend using ISOChronology instead, which is the default.
+     *
+     * @return the ChronologyType constant
+     */
+    public static ChronologyType gregorian() {
+        return GREGORIAN_TYPE;
+    }
+
+    /**
+     * Get the Julian chronology type.
+     * <p>
+     * {@link JulianChronology} defines all fields using standard meanings.
+     * It uses the Julian calendar rules <i>for all time</i> (proleptic).
+     * The Julian calendar system defines a leap year every four years.
+     *
+     * @return the ChronologyType constant
+     */
+    public static ChronologyType julian() {
+        return JULIAN_TYPE;
+    }
+
+    /**
+     * Get the Buddhist chronology type.
+     * <p>
+     * {@link BuddhistChronology} defines all fields using standard meanings,
+     * however the year is offset by 543. The chronology cannot be used before
+     * year 1 in the Buddhist calendar.
+     *
+     * @return the ChronologyType constant
+     */
+    public static ChronologyType buddhist() {
+        return BUDDHIST_TYPE;
+    }
+
+    /**
+     * Get the Coptic chronology type.
+     * <p>
+     * {@link CopticChronology} defines fields sensibly for the Coptic calendar system.
+     * The Coptic calendar system defines every fourth year as leap.
+     * The year is broken down into 12 months, each 30 days in length.
+     * An extra period at the end of the year is either 5 or 6 days in length
+     * and is returned as a 13th month.
+     * Year 1 in the Coptic calendar began on August 29, 284 CE (Julian).
+     * The chronology cannot be used before the first Coptic year.
+     *
+     * @return the ChronologyType constant
+     */
+    public static ChronologyType coptic() {
+        return COPTIC_TYPE;
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Get the id of the chronology.
+     * 
+     * @return the id of the chronology
+     */
+    public String getID() {
+        return iID;
+    }
+
+    /**
+     * Get an instance of the Chronology in the default time zone.
+     * 
+     * @return the Chronology
+     */
+    public Chronology getChronology() {
+        return getChronology(null);
+    }
+
+    /**
+     * Get an instance of the Chronology in the UTC time zone.
+     * 
+     * @return the Chronology
+     */
+    public Chronology getChronologyUTC() {
+        return getChronology(DateTimeZone.UTC);
+    }
+
+    /**
+     * Get an instance of the Chronology in the specified time zone.
+     * 
+     * @param zone  the time zone, null means default
+     */
+    public abstract Chronology getChronology(DateTimeZone zone);
+
+    /**
+     * Gets the chronology as a string, which is simply its id.
+     *
+     * @return the id of the chronology
+     */
+    public String toString() {
+        return getID();
+    }
+
+    //-----------------------------------------------------------------------
+    private static class StandardChronologyType extends ChronologyType {
+        /** Serialization version */
+        private static final long serialVersionUID = -562289176239L;
+
+        /** The ordinal of the standard field type, for switch statements */
+        private final byte iOrdinal;
+
+        /**
+         * Constructor.
+         */
+        StandardChronologyType(String id, byte ordinal) {
+            super(id);
+            iOrdinal = ordinal;
+        }
+
+        /** @inheritdoc */
+        public Chronology getChronology(DateTimeZone zone) {
+            switch (iOrdinal) {
+                case ISO:
+                    return ISOChronology.getInstance(zone);
+                case GJ:
+                    return GJChronology.getInstance(zone);
+                case GREGORIAN:
+                    return GregorianChronology.getInstance(zone);
+                case JULIAN:
+                    return JulianChronology.getInstance(zone);
+                case BUDDHIST:
+                    return BuddhistChronology.getInstance(zone);
+                case COPTIC:
+                    return CopticChronology.getInstance(zone);
+                default:
+                    // Shouldn't happen.
+                    throw new InternalError();
+            }
+        }
+
+        /**
+         * Ensure a singleton is returned.
+         * 
+         * @return the singleton type
+         */
+        private Object readResolve() {
+        	return (ChronologyType) forID(getID());
+        }
+    }
+
+}
diff --git a/JodaTime/src/test/org/joda/time/TestAll.java b/JodaTime/src/test/org/joda/time/TestAll.java
index c87269298..3715c1913 100644
--- a/JodaTime/src/test/org/joda/time/TestAll.java
+++ b/JodaTime/src/test/org/joda/time/TestAll.java
@@ -35,6 +35,7 @@ public TestAll(String testName) {
     public static Test suite() {
         TestSuite suite = new TestSuite();
         suite.addTest(TestChronology.suite());
+        suite.addTest(TestChronologyType.suite());
         suite.addTest(TestDateTimeFieldType.suite());
         suite.addTest(TestDurationFieldType.suite());
         
diff --git a/JodaTime/src/test/org/joda/time/TestChronologyType.java b/JodaTime/src/test/org/joda/time/TestChronologyType.java
new file mode 100644
index 000000000..439678588
--- /dev/null
+++ b/JodaTime/src/test/org/joda/time/TestChronologyType.java
@@ -0,0 +1,179 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time;
+
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+import java.lang.reflect.Constructor;
+import java.util.Set;
+
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+import org.joda.time.chrono.BuddhistChronology;
+import org.joda.time.chrono.CopticChronology;
+import org.joda.time.chrono.GJChronology;
+import org.joda.time.chrono.GregorianChronology;
+import org.joda.time.chrono.ISOChronology;
+import org.joda.time.chrono.JulianChronology;
+
+/**
+ * This class is a Junit unit test for ChronologyType.
+ *
+ * @author Stephen Colebourne
+ */
+public class TestChronologyType extends TestCase {
+
+    private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
+
+    public static void main(String[] args) {
+        junit.textui.TestRunner.run(suite());
+    }
+
+    public static TestSuite suite() {
+        return new TestSuite(TestChronologyType.class);
+    }
+
+    public TestChronologyType(String name) {
+        super(name);
+    }
+
+    protected void setUp() throws Exception {
+    }
+
+    protected void tearDown() throws Exception {
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_forName() throws Exception {
+        assertSame(ChronologyType.iso(), ChronologyType.forID("ISO"));
+        assertSame(null, ChronologyType.forID("rubbish"));
+        assertSame(null, ChronologyType.forID(""));
+        assertSame(null, ChronologyType.forID(null));
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_getAvailableIDs() throws Exception {
+        Set set = ChronologyType.getAvailableIDs();
+        assertEquals(6, set.size());
+        assertEquals(true, set.contains("ISO"));
+        assertEquals(true, set.contains("GJ"));
+        assertEquals(true, set.contains("Gregorian"));
+        assertEquals(true, set.contains("Julian"));
+        assertEquals(true, set.contains("Buddhist"));
+        assertEquals(true, set.contains("Coptic"));
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_iso() throws Exception {
+        assertEquals(ChronologyType.iso(), ChronologyType.iso());
+        assertEquals("ISO", ChronologyType.iso().getID());
+        assertEquals(ISOChronology.getInstance(), ChronologyType.iso().getChronology());
+        assertEquals(ISOChronology.getInstanceUTC(), ChronologyType.iso().getChronologyUTC());
+        assertEquals(ISOChronology.getInstance(PARIS), ChronologyType.iso().getChronology(PARIS));
+        assertEquals("ISO", ChronologyType.iso().toString());
+        assertSerialization(ChronologyType.iso());
+    }
+
+    public void test_gj() throws Exception {
+        assertEquals(ChronologyType.gj(), ChronologyType.gj());
+        assertEquals("GJ", ChronologyType.gj().getID());
+        assertEquals(GJChronology.getInstance(), ChronologyType.gj().getChronology());
+        assertEquals(GJChronology.getInstanceUTC(), ChronologyType.gj().getChronologyUTC());
+        assertEquals(GJChronology.getInstance(PARIS), ChronologyType.gj().getChronology(PARIS));
+        assertEquals("GJ", ChronologyType.gj().toString());
+        assertSerialization(ChronologyType.gj());
+    }
+
+    public void test_gregorian() throws Exception {
+        assertEquals(ChronologyType.gregorian(), ChronologyType.gregorian());
+        assertEquals("Gregorian", ChronologyType.gregorian().getID());
+        assertEquals(GregorianChronology.getInstance(), ChronologyType.gregorian().getChronology());
+        assertEquals(GregorianChronology.getInstanceUTC(), ChronologyType.gregorian().getChronologyUTC());
+        assertEquals(GregorianChronology.getInstance(PARIS), ChronologyType.gregorian().getChronology(PARIS));
+        assertEquals("Gregorian", ChronologyType.gregorian().toString());
+        assertSerialization(ChronologyType.gregorian());
+    }
+
+    public void test_julian() throws Exception {
+        assertEquals(ChronologyType.julian(), ChronologyType.julian());
+        assertEquals("Julian", ChronologyType.julian().getID());
+        assertEquals(JulianChronology.getInstance(), ChronologyType.julian().getChronology());
+        assertEquals(JulianChronology.getInstanceUTC(), ChronologyType.julian().getChronologyUTC());
+        assertEquals(JulianChronology.getInstance(PARIS), ChronologyType.julian().getChronology(PARIS));
+        assertEquals("Julian", ChronologyType.julian().toString());
+        assertSerialization(ChronologyType.julian());
+    }
+
+    public void test_buddhist() throws Exception {
+        assertEquals(ChronologyType.buddhist(), ChronologyType.buddhist());
+        assertEquals("Buddhist", ChronologyType.buddhist().getID());
+        assertEquals(BuddhistChronology.getInstance(), ChronologyType.buddhist().getChronology());
+        assertEquals(BuddhistChronology.getInstanceUTC(), ChronologyType.buddhist().getChronologyUTC());
+        assertEquals(BuddhistChronology.getInstance(PARIS), ChronologyType.buddhist().getChronology(PARIS));
+        assertEquals("Buddhist", ChronologyType.buddhist().toString());
+        assertSerialization(ChronologyType.buddhist());
+    }
+
+    public void test_coptic() throws Exception {
+        assertEquals(ChronologyType.coptic(), ChronologyType.coptic());
+        assertEquals("Coptic", ChronologyType.coptic().getID());
+        assertEquals(CopticChronology.getInstance(), ChronologyType.coptic().getChronology());
+        assertEquals(CopticChronology.getInstanceUTC(), ChronologyType.coptic().getChronologyUTC());
+        assertEquals(CopticChronology.getInstance(PARIS), ChronologyType.coptic().getChronology(PARIS));
+        assertEquals("Coptic", ChronologyType.coptic().toString());
+        assertSerialization(ChronologyType.coptic());
+    }
+
+    public void test_other() throws Exception {
+        assertEquals(1, ChronologyType.class.getDeclaredClasses().length);
+        Class cls = ChronologyType.class.getDeclaredClasses()[0];
+        assertEquals(1, cls.getDeclaredConstructors().length);
+        Constructor con = cls.getDeclaredConstructors()[0];
+        Object[] params = new Object[] { "other", new Byte((byte) 128) };
+        ChronologyType type = (ChronologyType) con.newInstance(params);
+        
+        assertEquals("other", type.getID());
+        try {
+            type.getChronology(PARIS);
+            fail();
+        } catch (InternalError ex) {}
+        assertSerialization(type);   // same because of ID map
+    }
+
+    //-----------------------------------------------------------------------
+    private void assertSerialization(ChronologyType type) throws Exception {
+        ChronologyType result = doSerialization(type);
+        assertSame(type, result);
+    }
+
+    private ChronologyType doSerialization(ChronologyType type) throws Exception {
+        ByteArrayOutputStream baos = new ByteArrayOutputStream();
+        ObjectOutputStream oos = new ObjectOutputStream(baos);
+        oos.writeObject(type);
+        byte[] bytes = baos.toByteArray();
+        oos.close();
+        
+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
+        ObjectInputStream ois = new ObjectInputStream(bais);
+        ChronologyType result = (ChronologyType) ois.readObject();
+        ois.close();
+        return result;
+    }
+
+}

From 583cfd39b4778a5ea15458d237574cb7472574c0 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 3 Sep 2005 22:32:35 +0000
Subject: [PATCH 029/130] Refactor Single Era fields to
 BasicSingleEraDateTimeField

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@886 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 ....java => BasicSingleEraDateTimeField.java} |  77 +++++-----
 .../joda/time/chrono/BuddhistChronology.java  |   5 +-
 .../joda/time/chrono/CopticChronology.java    |  22 +--
 .../chrono/ThaiBuddhistEraDateTimeField.java  | 142 ------------------
 4 files changed, 52 insertions(+), 194 deletions(-)
 rename JodaTime/src/java/org/joda/time/chrono/{CopticEraDateTimeField.java => BasicSingleEraDateTimeField.java} (63%)
 delete mode 100644 JodaTime/src/java/org/joda/time/chrono/ThaiBuddhistEraDateTimeField.java

diff --git a/JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java b/JodaTime/src/java/org/joda/time/chrono/BasicSingleEraDateTimeField.java
similarity index 63%
rename from JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java
rename to JodaTime/src/java/org/joda/time/chrono/BasicSingleEraDateTimeField.java
index a52d77d19..d0d51643b 100644
--- a/JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java
+++ b/JodaTime/src/java/org/joda/time/chrono/BasicSingleEraDateTimeField.java
@@ -17,7 +17,7 @@
 
 import java.util.Locale;
 
-import org.joda.time.DateTimeField;
+import org.joda.time.DateTimeConstants;
 import org.joda.time.DateTimeFieldType;
 import org.joda.time.DurationField;
 import org.joda.time.DurationFieldType;
@@ -30,112 +30,105 @@
  * Provides time calculations for the coptic era component of time.
  *
  * @author Brian S O'Neill
- * @since 1.0
+ * @author Stephen Colebourne
+ * @since 1.2, refactored from CopticEraDateTimeField
  */
-final class CopticEraDateTimeField extends BaseDateTimeField {
-    
-    /** Serialization version */
-    private static final long serialVersionUID = 4090856468123006167L;
+final class BasicSingleEraDateTimeField extends BaseDateTimeField {
 
     /**
-     * Singleton instance
+     * Value of the era, which will be the same as DateTimeConstants.CE.
      */
-    static final DateTimeField INSTANCE = new CopticEraDateTimeField();
-
+    private static final int ERA_VALUE = DateTimeConstants.CE;
     /**
-     * Restricted constructor
+     * Text value of the era.
      */
-    private CopticEraDateTimeField() {
-        super(DateTimeFieldType.era());
-    }
+    private final String iEraText;
 
     /**
-     * Serialization singleton
+     * Restricted constructor.
      */
-    private Object readResolve() {
-        return INSTANCE;
+    BasicSingleEraDateTimeField(String text) {
+        super(DateTimeFieldType.era());
+        iEraText = text;
     }
 
+    /** @inheritDoc */
     public boolean isLenient() {
         return false;
     }
 
-    /**
-     * Get the Era component of the specified time instant.
-     * 
-     * @param instant  the time instant in millis to query.
-     * @return the era extracted from the input.
-     */
+    /** @inheritDoc */
     public int get(long instant) {
-        return CopticChronology.AM;
+        return ERA_VALUE;
     }
 
-    /**
-     * Set the Era component of the specified time instant.
-     * 
-     * @param instant  the time instant in millis to update.
-     * @param era  the era (CopticChronology.AM) to update the time to.
-     * @return the updated time instant.
-     * @throws IllegalArgumentException  if era is invalid.
-     */
+    /** @inheritDoc */
     public long set(long instant, int era) {
-        FieldUtils.verifyValueBounds(this, era, getMinimumValue(), getMaximumValue());
-
+        FieldUtils.verifyValueBounds(this, era, ERA_VALUE, ERA_VALUE);
         return instant;
     }
 
-    /**
-     * @see org.joda.time.DateTimeField#set(long, String, Locale)
-     */
+    /** @inheritDoc */
     public long set(long instant, String text, Locale locale) {
-        if ("AM".equals(text) == false) {
+        if (iEraText.equals(text) == false && "1".equals(text) == false) {
             throw new IllegalFieldValueException(DateTimeFieldType.era(), text);
         }
         return instant;
     }
 
+    /** @inheritDoc */
     public long roundFloor(long instant) {
         return Long.MIN_VALUE;
     }
 
+    /** @inheritDoc */
     public long roundCeiling(long instant) {
         return Long.MAX_VALUE;
     }
 
+    /** @inheritDoc */
     public long roundHalfFloor(long instant) {
         return Long.MIN_VALUE;
     }
 
+    /** @inheritDoc */
     public long roundHalfCeiling(long instant) {
         return Long.MIN_VALUE;
     }
 
+    /** @inheritDoc */
     public long roundHalfEven(long instant) {
         return Long.MIN_VALUE;
     }
 
+    /** @inheritDoc */
     public DurationField getDurationField() {
         return UnsupportedDurationField.getInstance(DurationFieldType.eras());
     }
 
+    /** @inheritDoc */
     public DurationField getRangeDurationField() {
         return null;
     }
 
+    /** @inheritDoc */
     public int getMinimumValue() {
-        return CopticChronology.AM;
+        return ERA_VALUE;
     }
 
+    /** @inheritDoc */
     public int getMaximumValue() {
-        return CopticChronology.AM;
+        return ERA_VALUE;
     }
-    
+
+    /** @inheritDoc */
     public String getAsText(int fieldValue, Locale locale) {
-        return "AM";
+        return iEraText;
     }
 
+    /** @inheritDoc */
     public int getMaximumTextLength(Locale locale) {
-        return 2;
+        return iEraText.length();
     }
 
 }
diff --git a/JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java b/JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java
index eaaede1f2..734a4031c 100644
--- a/JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java
@@ -61,6 +61,9 @@
      */
     public static final int BE = DateTimeConstants.CE;
 
+    /** A singleton era field. */
+    private static final DateTimeField ERA_FIELD = new BasicSingleEraDateTimeField("BE");
+
     /** Number of years difference in calendars. */
     private static final int BUDDHIST_OFFSET = 543;
 
@@ -207,7 +210,7 @@ protected void assemble(Fields fields) {
             fields.weekyearOfCentury = new OffsetDateTimeField(
                 field, DateTimeFieldType.weekyearOfCentury(), 1);
             
-            fields.era = ThaiBuddhistEraDateTimeField.INSTANCE;
+            fields.era = ERA_FIELD;
         }
     }
    
diff --git a/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java b/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java
index 36ecaae96..5bc9e8e9b 100644
--- a/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java
@@ -21,6 +21,7 @@
 import org.joda.time.Chronology;
 import org.joda.time.DateTime;
 import org.joda.time.DateTimeConstants;
+import org.joda.time.DateTimeField;
 import org.joda.time.DateTimeFieldType;
 import org.joda.time.DateTimeZone;
 import org.joda.time.DurationField;
@@ -63,21 +64,27 @@
      */
     public static final int AM = DateTimeConstants.CE;
 
+    /** A singleton era field. */
+    private static final DateTimeField ERA_FIELD = new BasicSingleEraDateTimeField("AM");
+
     private static final long MILLIS_PER_YEAR =
         (long) (365.25 * DateTimeConstants.MILLIS_PER_DAY);
 
     private static final long MILLIS_PER_MONTH =
         (long) (365.25 * DateTimeConstants.MILLIS_PER_DAY / 12);
 
-    // The lowest year that can be fully supported.
+    /** The lowest year that can be fully supported. */
     private static final int MIN_YEAR = -292269337;
 
-    // The highest year that can be fully supported. Although
-    // calculateFirstDayOfYearMillis can go higher without overflowing, the
-    // getYear method overflows when it adds the approximate millis at the
-    // epoch.
+    /**
+     * The highest year that can be fully supported.
+     * Although calculateFirstDayOfYearMillis can go higher without
+     * overflowing, the getYear method overflows when it adds the
+     * approximate millis at the epoch.
+     */
     private static final int MAX_YEAR = 292271022;
 
+    /** Singleton 30 day month field used to build the monthOfYear field. */
     private static final DurationField cMonthsField;
 
     /** Singleton instance of a UTC CopticChronology */
@@ -356,14 +363,11 @@ protected void assemble(Fields fields) {
         if (getBase() == null) {
             super.assemble(fields);
 
-            fields.year = new BasicYearDateTimeField(this);
-            fields.years = fields.year.getDurationField();
-
             // Coptic, like Julian, has no year zero.
             fields.year = new SkipDateTimeField(this, fields.year);
             fields.weekyear = new SkipDateTimeField(this, fields.weekyear);
             
-            fields.era = CopticEraDateTimeField.INSTANCE;
+            fields.era = ERA_FIELD;
             fields.months = cMonthsField;
             fields.monthOfYear = new CopticMonthOfYearDateTimeField(this, cMonthsField);
             fields.dayOfMonth = new BasicDayOfMonthDateTimeField(this, fields.days);
diff --git a/JodaTime/src/java/org/joda/time/chrono/ThaiBuddhistEraDateTimeField.java b/JodaTime/src/java/org/joda/time/chrono/ThaiBuddhistEraDateTimeField.java
deleted file mode 100644
index ddf524277..000000000
--- a/JodaTime/src/java/org/joda/time/chrono/ThaiBuddhistEraDateTimeField.java
+++ /dev/null
@@ -1,142 +0,0 @@
-/*
- *  Copyright 2001-2005 Stephen Colebourne
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.joda.time.chrono;
-
-import java.util.Locale;
-
-import org.joda.time.DateTimeField;
-import org.joda.time.DateTimeFieldType;
-import org.joda.time.DurationField;
-import org.joda.time.DurationFieldType;
-import org.joda.time.IllegalFieldValueException;
-import org.joda.time.field.BaseDateTimeField;
-import org.joda.time.field.FieldUtils;
-import org.joda.time.field.UnsupportedDurationField;
-
-/**
- * Provides time calculations for the buddhist era component of time.
- *
- * @author Stephen Colebourne
- * @author Brian S O'Neill
- * @since 1.0
- */
-final class ThaiBuddhistEraDateTimeField extends BaseDateTimeField {
-    
-    /** Serialization version */
-    private static final long serialVersionUID = -9175876774456816364L;
-
-    /**
-     * Singleton instance
-     */
-    static final DateTimeField INSTANCE = new ThaiBuddhistEraDateTimeField();
-
-    /**
-     * Restricted constructor
-     */
-    private ThaiBuddhistEraDateTimeField() {
-        super(DateTimeFieldType.era());
-    }
-
-    /**
-     * Serialization singleton
-     */
-    private Object readResolve() {
-        return INSTANCE;
-    }
-
-    public boolean isLenient() {
-        return false;
-    }
-
-    /**
-     * Get the Era component of the specified time instant.
-     * 
-     * @param instant  the time instant in millis to query.
-     * @return the era extracted from the input.
-     */
-    public int get(long instant) {
-        return BuddhistChronology.BE;
-    }
-
-    /**
-     * Set the Era component of the specified time instant.
-     * 
-     * @param instant  the time instant in millis to update.
-     * @param era  the era (BuddhistChronology.BE) to update the time to.
-     * @return the updated time instant.
-     * @throws IllegalArgumentException  if era is invalid.
-     */
-    public long set(long instant, int era) {
-        FieldUtils.verifyValueBounds(this, era, getMinimumValue(), getMaximumValue());
-
-        return instant;
-    }
-
-    /**
-     * @see org.joda.time.DateTimeField#set(long, String, Locale)
-     */
-    public long set(long instant, String text, Locale locale) {
-        if ("BE".equals(text) == false) {
-            throw new IllegalFieldValueException(DateTimeFieldType.era(), text);
-        }
-        return instant;
-    }
-
-    public long roundFloor(long instant) {
-        return Long.MIN_VALUE;
-    }
-
-    public long roundCeiling(long instant) {
-        return Long.MAX_VALUE;
-    }
-
-    public long roundHalfFloor(long instant) {
-        return Long.MIN_VALUE;
-    }
-
-    public long roundHalfCeiling(long instant) {
-        return Long.MIN_VALUE;
-    }
-
-    public long roundHalfEven(long instant) {
-        return Long.MIN_VALUE;
-    }
-
-    public DurationField getDurationField() {
-        return UnsupportedDurationField.getInstance(DurationFieldType.eras());
-    }
-
-    public DurationField getRangeDurationField() {
-        return null;
-    }
-
-    public int getMinimumValue() {
-        return BuddhistChronology.BE;
-    }
-
-    public int getMaximumValue() {
-        return BuddhistChronology.BE;
-    }
-
-    public String getAsText(int fieldValue, Locale locale) {
-        return "BE";
-    }
-
-    public int getMaximumTextLength(Locale locale) {
-        return 2;
-    }
-
-}

From 96f76a3342f6fdaadd24638002574a35c6d24d80 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 3 Sep 2005 22:45:58 +0000
Subject: [PATCH 030/130] Add Chronology.getType() method

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@887 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                      |  5 +++++
 JodaTime/src/java/org/joda/time/Chronology.java | 17 ++++++++++++++++-
 .../joda/time/chrono/BuddhistChronology.java    | 12 ++++++++++++
 .../org/joda/time/chrono/CopticChronology.java  | 12 ++++++++++++
 .../java/org/joda/time/chrono/GJChronology.java | 12 ++++++++++++
 .../joda/time/chrono/GregorianChronology.java   | 12 ++++++++++++
 .../org/joda/time/chrono/ISOChronology.java     | 12 ++++++++++++
 .../org/joda/time/chrono/JulianChronology.java  | 12 ++++++++++++
 8 files changed, 93 insertions(+), 1 deletion(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 0f842b7d7..edd2d564e 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -29,6 +29,10 @@ Data compatible - Yes
 
 Warnings since 1.1
 ------------------
+- ChronologyType
+  If you have created your own subclass of Chronology, you should create
+  a ChronologyType subclass to define a type for your chronology, and
+  override the Chronology.getType() to return it.
 
 
 Deprecations since 1.1
@@ -47,6 +51,7 @@ Enhancements since 1.1
 ----------------------
 - ChronologyType
   New type that acts as a factory for creating Chronology instances
+  Chronology.getType() returns the type
 
 
 Feedback
diff --git a/JodaTime/src/java/org/joda/time/Chronology.java b/JodaTime/src/java/org/joda/time/Chronology.java
index df6041a04..82c81ded2 100644
--- a/JodaTime/src/java/org/joda/time/Chronology.java
+++ b/JodaTime/src/java/org/joda/time/Chronology.java
@@ -379,11 +379,26 @@ public static Chronology getCoptic(DateTimeZone zone) {
     }
 
     //-----------------------------------------------------------------------
+    /**
+     * Returns the ChronologyType constant for this Chronology.
+     * <p>
+     * This method should ideally never return null. However ChronologyType
+     * was only added in v1.2, and any chronology written before then
+     * will not correctly override this method to return the type.
+     *
+     * @return the chronology type, correct implementations never return null
+     * @since 1.2
+     */
+    public ChronologyType getType() {
+        // all subclasses should override this method
+        return null;
+    }
+
     /**
      * Returns the DateTimeZone that this Chronology operates in, or null if
      * unspecified.
      *
-     * @return DateTimeZone null if unspecified
+     * @return the DateTimeZone, null if unspecified
      */
     public abstract DateTimeZone getZone();
 
diff --git a/JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java b/JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java
index 734a4031c..93c6a12eb 100644
--- a/JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java
@@ -19,6 +19,7 @@
 import java.util.Map;
 
 import org.joda.time.Chronology;
+import org.joda.time.ChronologyType;
 import org.joda.time.DateTime;
 import org.joda.time.DateTimeConstants;
 import org.joda.time.DateTimeField;
@@ -136,6 +137,17 @@ private Object readResolve() {
         return base == null ? getInstanceUTC() : getInstance(base.getZone());
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Returns the ChronologyType constant for this Chronology.
+     *
+     * @return the chronology type
+     * @since 1.2
+     */
+    public ChronologyType getType() {
+        return ChronologyType.buddhist();
+    }
+
     // Conversion
     //-----------------------------------------------------------------------
     /**
diff --git a/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java b/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java
index 5bc9e8e9b..5b9ea8d67 100644
--- a/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java
@@ -19,6 +19,7 @@
 import java.util.Map;
 
 import org.joda.time.Chronology;
+import org.joda.time.ChronologyType;
 import org.joda.time.DateTime;
 import org.joda.time.DateTimeConstants;
 import org.joda.time.DateTimeField;
@@ -190,6 +191,17 @@ private Object readResolve() {
         return base == null ? getInstanceUTC() : getInstance(base.getZone());
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Returns the ChronologyType constant for this Chronology.
+     *
+     * @return the chronology type
+     * @since 1.2
+     */
+    public ChronologyType getType() {
+        return ChronologyType.coptic();
+    }
+
     // Conversion
     //-----------------------------------------------------------------------
     /**
diff --git a/JodaTime/src/java/org/joda/time/chrono/GJChronology.java b/JodaTime/src/java/org/joda/time/chrono/GJChronology.java
index 411a4c689..72fe71d7a 100644
--- a/JodaTime/src/java/org/joda/time/chrono/GJChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/GJChronology.java
@@ -21,6 +21,7 @@
 import java.util.Map;
 
 import org.joda.time.Chronology;
+import org.joda.time.ChronologyType;
 import org.joda.time.DateTimeField;
 import org.joda.time.DateTimeUtils;
 import org.joda.time.DateTimeZone;
@@ -295,6 +296,17 @@ public DateTimeZone getZone() {
         return DateTimeZone.UTC;
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Returns the ChronologyType constant for this Chronology.
+     *
+     * @return the chronology type
+     * @since 1.2
+     */
+    public ChronologyType getType() {
+        return ChronologyType.gj();
+    }
+
     // Conversion
     //-----------------------------------------------------------------------
     /**
diff --git a/JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java b/JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java
index c8956da99..5165e225e 100644
--- a/JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java
@@ -19,6 +19,7 @@
 import java.util.Map;
 
 import org.joda.time.Chronology;
+import org.joda.time.ChronologyType;
 import org.joda.time.DateTimeConstants;
 import org.joda.time.DateTimeZone;
 
@@ -159,6 +160,17 @@ private Object readResolve() {
         return base == null ? getInstanceUTC() : getInstance(base.getZone());
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Returns the ChronologyType constant for this Chronology.
+     *
+     * @return the chronology type
+     * @since 1.2
+     */
+    public ChronologyType getType() {
+        return ChronologyType.gregorian();
+    }
+
     // Conversion
     //-----------------------------------------------------------------------
     /**
diff --git a/JodaTime/src/java/org/joda/time/chrono/ISOChronology.java b/JodaTime/src/java/org/joda/time/chrono/ISOChronology.java
index 34db26da4..cd5c93afe 100644
--- a/JodaTime/src/java/org/joda/time/chrono/ISOChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/ISOChronology.java
@@ -23,6 +23,7 @@
 import java.util.Map;
 
 import org.joda.time.Chronology;
+import org.joda.time.ChronologyType;
 import org.joda.time.DateTimeFieldType;
 import org.joda.time.DateTimeZone;
 import org.joda.time.field.DividedDateTimeField;
@@ -122,6 +123,17 @@ private ISOChronology(Chronology base) {
         super(base, null);
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Returns the ChronologyType constant for this Chronology.
+     *
+     * @return the chronology type
+     * @since 1.2
+     */
+    public ChronologyType getType() {
+        return ChronologyType.iso();
+    }
+
     // Conversion
     //-----------------------------------------------------------------------
     /**
diff --git a/JodaTime/src/java/org/joda/time/chrono/JulianChronology.java b/JodaTime/src/java/org/joda/time/chrono/JulianChronology.java
index 4ca81769a..88e214032 100644
--- a/JodaTime/src/java/org/joda/time/chrono/JulianChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/JulianChronology.java
@@ -19,6 +19,7 @@
 import java.util.Map;
 
 import org.joda.time.Chronology;
+import org.joda.time.ChronologyType;
 import org.joda.time.DateTimeConstants;
 import org.joda.time.DateTimeFieldType;
 import org.joda.time.DateTimeZone;
@@ -173,6 +174,17 @@ private Object readResolve() {
         return base == null ? getInstanceUTC() : getInstance(base.getZone());
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Returns the ChronologyType constant for this Chronology.
+     *
+     * @return the chronology type
+     * @since 1.2
+     */
+    public ChronologyType getType() {
+        return ChronologyType.julian();
+    }
+
     // Conversion
     //-----------------------------------------------------------------------
     /**

From 0d6d0e2492be26b28fcbbef01b31b95d4bc75f5c Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 4 Sep 2005 18:55:43 +0000
Subject: [PATCH 031/130] Add v1.1 tag

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@888 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/project.xml | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/JodaTime/project.xml b/JodaTime/project.xml
index 5ca8e3b47..a9fd8f82a 100644
--- a/JodaTime/project.xml
+++ b/JodaTime/project.xml
@@ -73,6 +73,11 @@
       <name>1.0</name>
       <tag>v1_0_000</tag>
     </version>
+    <version>
+      <id>1.1</id>
+      <name>1.1</name>
+      <tag>v1_1_000</tag>
+    </version>
   </versions>
   
   <mailingLists>

From 88d0750d0330406af66bd23962613db79c4e9d4e Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 4 Sep 2005 18:58:07 +0000
Subject: [PATCH 032/130] Add MutableDateTime.property method

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@889 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  3 ++
 JodaTime/project.xml                          |  3 ++
 .../java/org/joda/time/MutableDateTime.java   | 20 +++++++++++++
 .../joda/time/TestMutableDateTime_Basics.java | 30 +++++++++++++++++++
 4 files changed, 56 insertions(+)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index edd2d564e..c2c7f5648 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -53,6 +53,9 @@ Enhancements since 1.1
   New type that acts as a factory for creating Chronology instances
   Chronology.getType() returns the type
 
+- MutableDateTime.property(DateTimeFieldType)
+  Gets the property by type. Complements the method already on DateTime/DateMidnight.
+
 
 Feedback
 --------
diff --git a/JodaTime/project.xml b/JodaTime/project.xml
index a9fd8f82a..e587392f3 100644
--- a/JodaTime/project.xml
+++ b/JodaTime/project.xml
@@ -132,6 +132,9 @@
     <contributor>
       <name>Julen Parra</name>
     </contributor>
+    <contributor>
+      <name>Mike Schrag</name>
+    </contributor>
     <contributor>
       <name>Kandarp Shah</name>
     </contributor>
diff --git a/JodaTime/src/java/org/joda/time/MutableDateTime.java b/JodaTime/src/java/org/joda/time/MutableDateTime.java
index 9114ffc95..0e4782299 100644
--- a/JodaTime/src/java/org/joda/time/MutableDateTime.java
+++ b/JodaTime/src/java/org/joda/time/MutableDateTime.java
@@ -62,6 +62,7 @@
  * @author Guy Allard
  * @author Brian S O'Neill
  * @author Stephen Colebourne
+ * @author Mike Schrag
  * @since 1.0
  * @see DateTime
  */
@@ -929,6 +930,25 @@ public void setDateTime(
     }
 
     //-----------------------------------------------------------------------
+    /**
+     * Gets the property object for the specified type, which contains many useful methods.
+     *
+     * @param type  the field type to get the chronology for
+     * @return the property object
+     * @throws IllegalArgumentException if the field is null or unsupported
+     * @since 1.2
+     */
+    public Property property(DateTimeFieldType type) {
+        if (type == null) {
+            throw new IllegalArgumentException("The DateTimeFieldType must not be null");
+        }
+        DateTimeField field = type.getField(getChronology());
+        if (field.isSupported() == false) {
+            throw new IllegalArgumentException("Field '" + type + "' is not supported");
+        }
+        return new Property(this, field);
+    }
+
     /**
      * Get the era property.
      * 
diff --git a/JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java b/JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java
index 3a8313869..180e59d7b 100644
--- a/JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java
@@ -32,6 +32,8 @@
 import org.joda.time.chrono.BaseChronology;
 import org.joda.time.chrono.GregorianChronology;
 import org.joda.time.chrono.ISOChronology;
+import org.joda.time.field.UnsupportedDateTimeField;
+import org.joda.time.field.UnsupportedDurationField;
 import org.joda.time.format.DateTimeFormat;
 import org.joda.time.format.DateTimeFormatter;
 
@@ -720,4 +722,32 @@ public void testRounding8() {
         assertEquals(null, test.getRoundingField());
     }
 
+    //-----------------------------------------------------------------------
+    public void testProperty() {
+        MutableDateTime test = new MutableDateTime();
+        assertEquals(test.year(), test.property(DateTimeFieldType.year()));
+        assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek()));
+        assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute()));
+        assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond()));
+        DateTimeFieldType bad = new DateTimeFieldType("bad") {
+            public DurationFieldType getDurationType() {
+                return DurationFieldType.weeks();
+            }
+            public DurationFieldType getRangeDurationType() {
+                return null;
+            }
+            public DateTimeField getField(Chronology chronology) {
+                return UnsupportedDateTimeField.getInstance(this, UnsupportedDurationField.getInstance(getDurationType()));
+            }
+        };
+        try {
+            test.property(bad);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            test.property(null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
 }

From fc76f162a3395f5443d369e3d75996167cea3b43 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 4 Sep 2005 18:59:58 +0000
Subject: [PATCH 033/130] Add ReadableInstant.Property.toInterval() method

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@890 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  5 ++
 .../AbstractReadableInstantFieldProperty.java | 20 +++++
 .../time/TestDateMidnight_Properties.java     | 44 +++++++++-
 .../joda/time/TestDateTime_Properties.java    | 77 +++++++++++++++-
 .../time/TestMutableDateTime_Properties.java  | 88 ++++++++++++++++++-
 5 files changed, 231 insertions(+), 3 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index c2c7f5648..e8f1cef6a 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -53,6 +53,11 @@ Enhancements since 1.1
   New type that acts as a factory for creating Chronology instances
   Chronology.getType() returns the type
 
+- DateTime.Property.toInterval() (also DateMidnight/MutableDateTime)
+  New method to convert return an Interval object over the span of the property
+  Thus dt.monthOfYear().toInterval() returns an interval from the start to
+  the end of the month
+
 - MutableDateTime.property(DateTimeFieldType)
   Gets the property by type. Complements the method already on DateTime/DateMidnight.
 
diff --git a/JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java b/JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java
index b63bc39c2..cabc2ebb8 100644
--- a/JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java
+++ b/JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java
@@ -22,6 +22,7 @@
 import org.joda.time.DateTimeFieldType;
 import org.joda.time.DateTimeUtils;
 import org.joda.time.DurationField;
+import org.joda.time.Interval;
 import org.joda.time.ReadableInstant;
 import org.joda.time.ReadablePartial;
 
@@ -38,6 +39,7 @@
  *
  * @author Stephen Colebourne
  * @author Brian S O'Neill
+ * @author Mike Schrag
  * @since 1.0
  */
 public abstract class AbstractReadableInstantFieldProperty implements Serializable {
@@ -338,6 +340,24 @@ public long remainder() {
         return getField().remainder(getMillis());
     }
 
+    /**
+     * Returns the interval that represents the range of the minimum
+     * and maximum values of this field.
+     * <p>
+     * For example, <code>datetime.monthOfYear().toInterval()</code>
+     * will return an interval over the whole month.
+     *
+     * @return the interval of this field
+     * @since 1.2
+     */
+    public Interval toInterval() {
+        DateTimeField field = getField();
+        long start = field.roundFloor(getMillis());
+        long end = field.add(start, 1);
+        Interval interval = new Interval(start, end);
+        return interval;
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Compare this field to the same field on another instant.
diff --git a/JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java b/JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java
index e6267d27d..878af7064 100644
--- a/JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java
+++ b/JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java
@@ -24,12 +24,13 @@
  * This class is a Junit unit test for DateTime.
  *
  * @author Stephen Colebourne
+ * @author Mike Schrag
  */
 public class TestDateMidnight_Properties extends TestCase {
     // Test in 2002/03 as time zones are more well known
     // (before the late 90's they were all over the place)
 
-    private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
+    //private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
     private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
     
     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 
@@ -454,4 +455,45 @@ public void testPropertyGetDayOfWeek() {
         assertEquals(null, test.dayOfWeek().getLeapDurationField());
     }
 
+    //-----------------------------------------------------------------------
+    public void testPropertyToIntervalYearOfEra() {
+      DateMidnight test = new DateMidnight(2004, 6, 9);
+      Interval testInterval = test.yearOfEra().toInterval();
+      assertEquals(new DateMidnight(2004, 1, 1), testInterval.getStart());
+      assertEquals(new DateMidnight(2005, 1, 1), testInterval.getEnd());
+    }
+
+    public void testPropertyToIntervalYearOfCentury() {
+      DateMidnight test = new DateMidnight(2004, 6, 9);
+      Interval testInterval = test.yearOfCentury().toInterval();
+      assertEquals(new DateMidnight(2004, 1, 1), testInterval.getStart());
+      assertEquals(new DateMidnight(2005, 1, 1), testInterval.getEnd());
+    }
+
+    public void testPropertyToIntervalYear() {
+      DateMidnight test = new DateMidnight(2004, 6, 9);
+      Interval testInterval = test.year().toInterval();
+      assertEquals(new DateMidnight(2004, 1, 1), testInterval.getStart());
+      assertEquals(new DateMidnight(2005, 1, 1), testInterval.getEnd());
+    }
+
+    public void testPropertyToIntervalMonthOfYear() {
+      DateMidnight test = new DateMidnight(2004, 6, 9);
+      Interval testInterval = test.monthOfYear().toInterval();
+      assertEquals(new DateMidnight(2004, 6, 1), testInterval.getStart());
+      assertEquals(new DateMidnight(2004, 7, 1), testInterval.getEnd());
+    }
+
+    public void testPropertyToIntervalDayOfMonth() {
+      DateMidnight test = new DateMidnight(2004, 6, 9);
+      Interval testInterval = test.dayOfMonth().toInterval();
+      assertEquals(new DateMidnight(2004, 6, 9), testInterval.getStart());
+      assertEquals(new DateMidnight(2004, 6, 10), testInterval.getEnd());
+
+      DateMidnight febTest = new DateMidnight(2004, 2, 29);
+      Interval febTestInterval = febTest.dayOfMonth().toInterval();
+      assertEquals(new DateMidnight(2004, 2, 29), febTestInterval.getStart());
+      assertEquals(new DateMidnight(2004, 3, 1), febTestInterval.getEnd());
+    }
+
 }
diff --git a/JodaTime/src/test/org/joda/time/TestDateTime_Properties.java b/JodaTime/src/test/org/joda/time/TestDateTime_Properties.java
index e331dec64..b10648cb3 100644
--- a/JodaTime/src/test/org/joda/time/TestDateTime_Properties.java
+++ b/JodaTime/src/test/org/joda/time/TestDateTime_Properties.java
@@ -24,12 +24,13 @@
  * This class is a Junit unit test for DateTime.
  *
  * @author Stephen Colebourne
+ * @author Mike Schrag
  */
 public class TestDateTime_Properties extends TestCase {
     // Test in 2002/03 as time zones are more well known
     // (before the late 90's they were all over the place)
 
-    private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
+    //private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
     private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
     
     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 
@@ -1245,4 +1246,78 @@ public void testPropertyGetMillisOfDay() {
         assertEquals(8, test.millisOfDay().getMaximumShortTextLength(null));
     }
 
+    //-----------------------------------------------------------------------
+    public void testPropertyToIntervalYearOfEra() {
+      DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53);
+      Interval testInterval = test.yearOfEra().toInterval();
+      assertEquals(new DateTime(2004, 1, 1, 0, 0, 0, 0), testInterval.getStart());
+      assertEquals(new DateTime(2005, 1, 1, 0, 0, 0, 0), testInterval.getEnd());
+    }
+
+    public void testPropertyToIntervalYearOfCentury() {
+      DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53);
+      Interval testInterval = test.yearOfCentury().toInterval();
+      assertEquals(new DateTime(2004, 1, 1, 0, 0, 0, 0), testInterval.getStart());
+      assertEquals(new DateTime(2005, 1, 1, 0, 0, 0, 0), testInterval.getEnd());
+    }
+
+    public void testPropertyToIntervalYear() {
+      DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53);
+      Interval testInterval = test.year().toInterval();
+      assertEquals(new DateTime(2004, 1, 1, 0, 0, 0, 0), testInterval.getStart());
+      assertEquals(new DateTime(2005, 1, 1, 0, 0, 0, 0), testInterval.getEnd());
+    }
+
+    public void testPropertyToIntervalMonthOfYear() {
+      DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53);
+      Interval testInterval = test.monthOfYear().toInterval();
+      assertEquals(new DateTime(2004, 6, 1, 0, 0, 0, 0), testInterval.getStart());
+      assertEquals(new DateTime(2004, 7, 1, 0, 0, 0, 0), testInterval.getEnd());
+    }
+
+    public void testPropertyToIntervalDayOfMonth() {
+      DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53);
+      Interval testInterval = test.dayOfMonth().toInterval();
+      assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0), testInterval.getStart());
+      assertEquals(new DateTime(2004, 6, 10, 0, 0, 0, 0), testInterval.getEnd());
+
+      DateTime febTest = new DateTime(2004, 2, 29, 13, 23, 43, 53);
+      Interval febTestInterval = febTest.dayOfMonth().toInterval();
+      assertEquals(new DateTime(2004, 2, 29, 0, 0, 0, 0), febTestInterval.getStart());
+      assertEquals(new DateTime(2004, 3, 1, 0, 0, 0, 0), febTestInterval.getEnd());
+    }
+
+    public void testPropertyToIntervalHourOfDay() {
+      DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53);
+      Interval testInterval = test.hourOfDay().toInterval();
+      assertEquals(new DateTime(2004, 6, 9, 13, 0, 0, 0), testInterval.getStart());
+      assertEquals(new DateTime(2004, 6, 9, 14, 0, 0, 0), testInterval.getEnd());
+
+      DateTime midnightTest = new DateTime(2004, 6, 9, 23, 23, 43, 53);
+      Interval midnightTestInterval = midnightTest.hourOfDay().toInterval();
+      assertEquals(new DateTime(2004, 6, 9, 23, 0, 0, 0), midnightTestInterval.getStart());
+      assertEquals(new DateTime(2004, 6, 10, 0, 0, 0, 0), midnightTestInterval.getEnd());
+    }
+
+    public void testPropertyToIntervalMinuteOfHour() {
+      DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53);
+      Interval testInterval = test.minuteOfHour().toInterval();
+      assertEquals(new DateTime(2004, 6, 9, 13, 23, 0, 0), testInterval.getStart());
+      assertEquals(new DateTime(2004, 6, 9, 13, 24, 0, 0), testInterval.getEnd());
+    }
+
+    public void testPropertyToIntervalSecondOfMinute() {
+      DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53);
+      Interval testInterval = test.secondOfMinute().toInterval();
+      assertEquals(new DateTime(2004, 6, 9, 13, 23, 43, 0), testInterval.getStart());
+      assertEquals(new DateTime(2004, 6, 9, 13, 23, 44, 0), testInterval.getEnd());
+    }
+
+    public void testPropertyToIntervalMillisOfSecond() {
+      DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53);
+      Interval testInterval = test.millisOfSecond().toInterval();
+      assertEquals(new DateTime(2004, 6, 9, 13, 23, 43, 53), testInterval.getStart());
+      assertEquals(new DateTime(2004, 6, 9, 13, 23, 43, 54), testInterval.getEnd());
+    }
+
 }
diff --git a/JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java b/JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java
index 90ae5f725..288cd344a 100644
--- a/JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java
+++ b/JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java
@@ -24,12 +24,13 @@
  * This class is a Junit unit test for DateTime.
  *
  * @author Stephen Colebourne
+ * @author Mike Schrag
  */
 public class TestMutableDateTime_Properties extends TestCase {
     // Test in 2002/03 as time zones are more well known
     // (before the late 90's they were all over the place)
 
-    private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
+    //private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
     private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
     
     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 
@@ -687,4 +688,89 @@ public void testPropertyGetMillisOfDay() {
         assertEquals(8, test.millisOfDay().getMaximumShortTextLength(null));
     }
 
+    //-----------------------------------------------------------------------
+    public void testPropertyToIntervalYearOfEra() {
+      MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53);
+      Interval testInterval = test.yearOfEra().toInterval();
+      assertEquals(new MutableDateTime(2004, 1, 1, 0, 0, 0, 0), testInterval.getStart());
+      assertEquals(new MutableDateTime(2005, 1, 1, 0, 0, 0, 0), testInterval.getEnd());
+      assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 43, 53), test);
+    }
+
+    public void testPropertyToIntervalYearOfCentury() {
+      MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53);
+      Interval testInterval = test.yearOfCentury().toInterval();
+      assertEquals(new MutableDateTime(2004, 1, 1, 0, 0, 0, 0), testInterval.getStart());
+      assertEquals(new MutableDateTime(2005, 1, 1, 0, 0, 0, 0), testInterval.getEnd());
+      assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 43, 53), test);
+    }
+
+    public void testPropertyToIntervalYear() {
+      MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53);
+      Interval testInterval = test.year().toInterval();
+      assertEquals(new MutableDateTime(2004, 1, 1, 0, 0, 0, 0), testInterval.getStart());
+      assertEquals(new MutableDateTime(2005, 1, 1, 0, 0, 0, 0), testInterval.getEnd());
+      assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 43, 53), test);
+    }
+
+    public void testPropertyToIntervalMonthOfYear() {
+      MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53);
+      Interval testInterval = test.monthOfYear().toInterval();
+      assertEquals(new MutableDateTime(2004, 6, 1, 0, 0, 0, 0), testInterval.getStart());
+      assertEquals(new MutableDateTime(2004, 7, 1, 0, 0, 0, 0), testInterval.getEnd());
+      assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 43, 53), test);
+    }
+
+    public void testPropertyToIntervalDayOfMonth() {
+      MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53);
+      Interval testInterval = test.dayOfMonth().toInterval();
+      assertEquals(new MutableDateTime(2004, 6, 9, 0, 0, 0, 0), testInterval.getStart());
+      assertEquals(new MutableDateTime(2004, 6, 10, 0, 0, 0, 0), testInterval.getEnd());
+      assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 43, 53), test);
+
+      MutableDateTime febTest = new MutableDateTime(2004, 2, 29, 13, 23, 43, 53);
+      Interval febTestInterval = febTest.dayOfMonth().toInterval();
+      assertEquals(new MutableDateTime(2004, 2, 29, 0, 0, 0, 0), febTestInterval.getStart());
+      assertEquals(new MutableDateTime(2004, 3, 1, 0, 0, 0, 0), febTestInterval.getEnd());
+      assertEquals(new MutableDateTime(2004, 2, 29, 13, 23, 43, 53), febTest);
+    }
+
+    public void testPropertyToIntervalHourOfDay() {
+      MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53);
+      Interval testInterval = test.hourOfDay().toInterval();
+      assertEquals(new MutableDateTime(2004, 6, 9, 13, 0, 0, 0), testInterval.getStart());
+      assertEquals(new MutableDateTime(2004, 6, 9, 14, 0, 0, 0), testInterval.getEnd());
+      assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 43, 53), test);
+
+      MutableDateTime midnightTest = new MutableDateTime(2004, 6, 9, 23, 23, 43, 53);
+      Interval midnightTestInterval = midnightTest.hourOfDay().toInterval();
+      assertEquals(new MutableDateTime(2004, 6, 9, 23, 0, 0, 0), midnightTestInterval.getStart());
+      assertEquals(new MutableDateTime(2004, 6, 10, 0, 0, 0, 0), midnightTestInterval.getEnd());
+      assertEquals(new MutableDateTime(2004, 6, 9, 23, 23, 43, 53), midnightTest);
+    }
+
+    public void testPropertyToIntervalMinuteOfHour() {
+      MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53);
+      Interval testInterval = test.minuteOfHour().toInterval();
+      assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 0, 0), testInterval.getStart());
+      assertEquals(new MutableDateTime(2004, 6, 9, 13, 24, 0, 0), testInterval.getEnd());
+      assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 43, 53), test);
+    }
+
+    public void testPropertyToIntervalSecondOfMinute() {
+      MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53);
+      Interval testInterval = test.secondOfMinute().toInterval();
+      assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 43, 0), testInterval.getStart());
+      assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 44, 0), testInterval.getEnd());
+      assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 43, 53), test);
+    }
+
+    public void testPropertyToIntervalMillisOfSecond() {
+      MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53);
+      Interval testInterval = test.millisOfSecond().toInterval();
+      assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 43, 53), testInterval.getStart());
+      assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 43, 54), testInterval.getEnd());
+      assertEquals(new MutableDateTime(2004, 6, 9, 13, 23, 43, 53), test);
+    }
+
 }

From a4e206629640b02107b0ea5ff076fd922a287f07 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 4 Sep 2005 20:08:53 +0000
Subject: [PATCH 034/130] Use chronology factory method on chronology subclass
 instead of that on Chronology

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@891 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../org/joda/time/TestAbstractPartial.java    | 14 +--
 .../joda/time/TestDateMidnight_Basics.java    |  7 +-
 .../org/joda/time/TestDateTimeFieldType.java  | 96 ++++++++++---------
 .../test/org/joda/time/TestDateTimeUtils.java | 21 ++--
 .../org/joda/time/TestDateTime_Basics.java    | 13 +--
 .../joda/time/TestDateTime_Properties.java    |  6 +-
 .../org/joda/time/TestDurationFieldType.java  | 52 +++++-----
 .../org/joda/time/TestDuration_Basics.java    | 13 +--
 .../time/TestIllegalFieldValueException.java  | 25 ++---
 .../org/joda/time/TestInstant_Basics.java     |  4 +-
 .../joda/time/TestInstant_Constructors.java   | 13 +--
 .../org/joda/time/TestInterval_Basics.java    | 16 ++--
 .../joda/time/TestInterval_Constructors.java  | 57 +++++------
 .../joda/time/TestMutableInterval_Basics.java |  9 +-
 .../TestMutableInterval_Constructors.java     | 70 +++++++-------
 .../time/TestMutableInterval_Updates.java     |  3 +-
 .../time/TestMutablePeriod_Constructors.java  | 27 +++---
 .../joda/time/TestMutablePeriod_Updates.java  |  8 +-
 .../org/joda/time/TestPartial_Basics.java     | 35 +++----
 .../test/org/joda/time/TestPartial_Match.java | 28 +++---
 .../joda/time/TestPeriod_Constructors.java    | 23 +++--
 .../org/joda/time/TestTimeOfDay_Basics.java   | 52 +++++-----
 .../joda/time/TestTimeOfDay_Constructors.java |  5 +-
 .../joda/time/TestYearMonthDay_Basics.java    | 26 ++---
 .../time/TestYearMonthDay_Constructors.java   | 15 ++-
 .../time/chrono/TestBuddhistChronology.java   | 10 +-
 .../time/chrono/TestCopticChronology.java     |  6 +-
 .../time/chrono/TestGregorianChronology.java  |  2 +-
 .../time/convert/TestCalendarConverter.java   |  4 +-
 .../joda/time/convert/TestDateConverter.java  |  5 +-
 .../joda/time/convert/TestLongConverter.java  |  4 +-
 .../joda/time/convert/TestNullConverter.java  | 14 +--
 .../convert/TestReadableInstantConverter.java |  4 +-
 .../TestReadableIntervalConverter.java        | 33 ++++---
 .../convert/TestReadablePartialConverter.java |  2 +-
 .../time/convert/TestStringConverter.java     | 31 +++---
 .../time/field/TestBaseDateTimeField.java     |  9 +-
 .../time/field/TestMillisDurationField.java   |  4 +-
 .../time/field/TestOffsetDateTimeField.java   | 26 ++---
 .../time/field/TestPreciseDateTimeField.java  | 32 +++----
 .../TestPreciseDurationDateTimeField.java     |  6 +-
 .../time/field/TestPreciseDurationField.java  |  8 +-
 .../time/field/TestScaledDurationField.java   |  8 +-
 .../joda/time/format/TestDateTimeFormat.java  |  3 +-
 .../time/format/TestDateTimeFormatter.java    |  8 +-
 .../time/format/TestISODateTimeFormat.java    |  6 +-
 .../joda/time/format/TestPeriodFormatter.java |  8 +-
 .../org/joda/time/format/TestTextFields.java  |  5 +-
 48 files changed, 472 insertions(+), 404 deletions(-)

diff --git a/JodaTime/src/test/org/joda/time/TestAbstractPartial.java b/JodaTime/src/test/org/joda/time/TestAbstractPartial.java
index f9907483e..d71f14117 100644
--- a/JodaTime/src/test/org/joda/time/TestAbstractPartial.java
+++ b/JodaTime/src/test/org/joda/time/TestAbstractPartial.java
@@ -19,6 +19,8 @@
 import junit.framework.TestSuite;
 
 import org.joda.time.base.AbstractPartial;
+import org.joda.time.chrono.BuddhistChronology;
+import org.joda.time.chrono.ISOChronology;
 import org.joda.time.field.AbstractPartialFieldProperty;
 
 /**
@@ -95,8 +97,8 @@ public void testGetValues() throws Throwable {
 
     public void testGetField() throws Throwable {
         MockPartial mock = new MockPartial();
-        assertEquals(Chronology.getBuddhistUTC().year(), mock.getField(0));
-        assertEquals(Chronology.getBuddhistUTC().monthOfYear(), mock.getField(1));
+        assertEquals(BuddhistChronology.getInstanceUTC().year(), mock.getField(0));
+        assertEquals(BuddhistChronology.getInstanceUTC().monthOfYear(), mock.getField(1));
         
         try {
             mock.getField(-1);
@@ -133,7 +135,7 @@ public void testGetFieldTypes() throws Throwable {
 
     public void testGetPropertyEquals() throws Throwable {
         MockPartial mock = new MockPartial();
-        YearMonthDay ymd = new YearMonthDay(1970, 2, 1, Chronology.getBuddhist());
+        YearMonthDay ymd = new YearMonthDay(1970, 2, 1, BuddhistChronology.getInstance());
         
         MockProperty0 prop0 = new MockProperty0();
         assertEquals(true, prop0.equals(prop0));
@@ -179,7 +181,7 @@ public void setValue(int index, int value) {
         }
 
         public Chronology getChronology() {
-            return Chronology.getBuddhistUTC();
+            return BuddhistChronology.getInstanceUTC();
         }
     }
     
@@ -209,7 +211,7 @@ public int get() {
     }
     static class MockProperty0Field extends MockProperty0 {
         public DateTimeField getField() {
-            return Chronology.getBuddhistUTC().hourOfDay();
+            return BuddhistChronology.getInstanceUTC().hourOfDay();
         }
     }
     static class MockProperty0Val extends MockProperty0 {
@@ -221,7 +223,7 @@ public int get() {
         public ReadablePartial getReadablePartial() {
             return new MockPartial() {
                 public Chronology getChronology() {
-                    return Chronology.getISOUTC();
+                    return ISOChronology.getInstanceUTC();
                 }
             };
         }
diff --git a/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java b/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java
index c70de158d..4f735d48d 100644
--- a/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java
@@ -30,6 +30,7 @@
 
 import org.joda.time.base.AbstractInstant;
 import org.joda.time.chrono.BuddhistChronology;
+import org.joda.time.chrono.CopticChronology;
 import org.joda.time.chrono.GregorianChronology;
 import org.joda.time.chrono.ISOChronology;
 import org.joda.time.field.UnsupportedDateTimeField;
@@ -599,13 +600,13 @@ public void testToGregorianCalendar() {
 
     //-----------------------------------------------------------------------
     public void testToYearMonthDay() {
-        DateMidnight base = new DateMidnight(TEST_TIME1_UTC, Chronology.getCoptic());
+        DateMidnight base = new DateMidnight(TEST_TIME1_UTC, CopticChronology.getInstance());
         YearMonthDay test = base.toYearMonthDay();
-        assertEquals(new YearMonthDay(TEST_TIME1_UTC, Chronology.getCoptic()), test);
+        assertEquals(new YearMonthDay(TEST_TIME1_UTC, CopticChronology.getInstance()), test);
     }
 
     public void testToInterval() {
-        DateMidnight base = new DateMidnight(TEST_TIME1_UTC, Chronology.getCoptic());
+        DateMidnight base = new DateMidnight(TEST_TIME1_UTC, CopticChronology.getInstance());
         Interval test = base.toInterval();
         DateMidnight end = base.plus(Period.days(1));
         assertEquals(new Interval(base, end), test);
diff --git a/JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java b/JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java
index ab469f97b..424641026 100644
--- a/JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java
+++ b/JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java
@@ -24,6 +24,8 @@
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
 
+import org.joda.time.chrono.CopticChronology;
+
 /**
  * This class is a Junit unit test for Chronology.
  *
@@ -55,8 +57,8 @@ public void test_era() throws Exception {
         assertEquals("era", DateTimeFieldType.era().getName());
         assertEquals(DurationFieldType.eras(), DateTimeFieldType.era().getDurationType());
         assertEquals(null, DateTimeFieldType.era().getRangeDurationType());
-        assertEquals(Chronology.getCopticUTC().era(), DateTimeFieldType.era().getField(Chronology.getCopticUTC()));
-        assertEquals(Chronology.getCopticUTC().era().isSupported(), DateTimeFieldType.era().isSupported(Chronology.getCopticUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().era(), DateTimeFieldType.era().getField(CopticChronology.getInstanceUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().era().isSupported(), DateTimeFieldType.era().isSupported(CopticChronology.getInstanceUTC()));
         assertSerialization(DateTimeFieldType.era());
     }
 
@@ -65,8 +67,8 @@ public void test_centuryOfEra() throws Exception {
         assertEquals("centuryOfEra", DateTimeFieldType.centuryOfEra().getName());
         assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType());
         assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType());
-        assertEquals(Chronology.getCopticUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(Chronology.getCopticUTC()));
-        assertEquals(Chronology.getCopticUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(Chronology.getCopticUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC()));
         assertSerialization(DateTimeFieldType.centuryOfEra());
     }
 
@@ -75,8 +77,8 @@ public void test_yearOfCentury() throws Exception {
         assertEquals("yearOfCentury", DateTimeFieldType.yearOfCentury().getName());
         assertEquals(DurationFieldType.years(), DateTimeFieldType.yearOfCentury().getDurationType());
         assertEquals(DurationFieldType.centuries(), DateTimeFieldType.yearOfCentury().getRangeDurationType());
-        assertEquals(Chronology.getCopticUTC().yearOfCentury(), DateTimeFieldType.yearOfCentury().getField(Chronology.getCopticUTC()));
-        assertEquals(Chronology.getCopticUTC().yearOfCentury().isSupported(), DateTimeFieldType.yearOfCentury().isSupported(Chronology.getCopticUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().yearOfCentury(), DateTimeFieldType.yearOfCentury().getField(CopticChronology.getInstanceUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().yearOfCentury().isSupported(), DateTimeFieldType.yearOfCentury().isSupported(CopticChronology.getInstanceUTC()));
         assertSerialization(DateTimeFieldType.yearOfCentury());
     }
 
@@ -85,8 +87,8 @@ public void test_yearOfEra() throws Exception {
         assertEquals("yearOfEra", DateTimeFieldType.yearOfEra().getName());
         assertEquals(DurationFieldType.years(), DateTimeFieldType.yearOfEra().getDurationType());
         assertEquals(DurationFieldType.eras(), DateTimeFieldType.yearOfEra().getRangeDurationType());
-        assertEquals(Chronology.getCopticUTC().yearOfEra(), DateTimeFieldType.yearOfEra().getField(Chronology.getCopticUTC()));
-        assertEquals(Chronology.getCopticUTC().yearOfEra().isSupported(), DateTimeFieldType.yearOfEra().isSupported(Chronology.getCopticUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().yearOfEra(), DateTimeFieldType.yearOfEra().getField(CopticChronology.getInstanceUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().yearOfEra().isSupported(), DateTimeFieldType.yearOfEra().isSupported(CopticChronology.getInstanceUTC()));
         assertSerialization(DateTimeFieldType.yearOfEra());
     }
 
@@ -95,8 +97,8 @@ public void test_year() throws Exception {
         assertEquals("year", DateTimeFieldType.year().getName());
         assertEquals(DurationFieldType.years(), DateTimeFieldType.year().getDurationType());
         assertEquals(null, DateTimeFieldType.year().getRangeDurationType());
-        assertEquals(Chronology.getCopticUTC().year(), DateTimeFieldType.year().getField(Chronology.getCopticUTC()));
-        assertEquals(Chronology.getCopticUTC().year().isSupported(), DateTimeFieldType.year().isSupported(Chronology.getCopticUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().year(), DateTimeFieldType.year().getField(CopticChronology.getInstanceUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().year().isSupported(), DateTimeFieldType.year().isSupported(CopticChronology.getInstanceUTC()));
         assertSerialization(DateTimeFieldType.year());
     }
 
@@ -105,8 +107,8 @@ public void test_monthOfYear() throws Exception {
         assertEquals("monthOfYear", DateTimeFieldType.monthOfYear().getName());
         assertEquals(DurationFieldType.months(), DateTimeFieldType.monthOfYear().getDurationType());
         assertEquals(DurationFieldType.years(), DateTimeFieldType.monthOfYear().getRangeDurationType());
-        assertEquals(Chronology.getCopticUTC().monthOfYear(), DateTimeFieldType.monthOfYear().getField(Chronology.getCopticUTC()));
-        assertEquals(Chronology.getCopticUTC().monthOfYear().isSupported(), DateTimeFieldType.monthOfYear().isSupported(Chronology.getCopticUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().monthOfYear(), DateTimeFieldType.monthOfYear().getField(CopticChronology.getInstanceUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().monthOfYear().isSupported(), DateTimeFieldType.monthOfYear().isSupported(CopticChronology.getInstanceUTC()));
         assertSerialization(DateTimeFieldType.monthOfYear());
     }
 
@@ -115,8 +117,8 @@ public void test_weekyearOfCentury() throws Exception {
         assertEquals("weekyearOfCentury", DateTimeFieldType.weekyearOfCentury().getName());
         assertEquals(DurationFieldType.weekyears(), DateTimeFieldType.weekyearOfCentury().getDurationType());
         assertEquals(DurationFieldType.centuries(), DateTimeFieldType.weekyearOfCentury().getRangeDurationType());
-        assertEquals(Chronology.getCopticUTC().weekyearOfCentury(), DateTimeFieldType.weekyearOfCentury().getField(Chronology.getCopticUTC()));
-        assertEquals(Chronology.getCopticUTC().weekyearOfCentury().isSupported(), DateTimeFieldType.weekyearOfCentury().isSupported(Chronology.getCopticUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().weekyearOfCentury(), DateTimeFieldType.weekyearOfCentury().getField(CopticChronology.getInstanceUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().weekyearOfCentury().isSupported(), DateTimeFieldType.weekyearOfCentury().isSupported(CopticChronology.getInstanceUTC()));
         assertSerialization(DateTimeFieldType.weekyearOfCentury());
     }
 
@@ -125,8 +127,8 @@ public void test_weekyear() throws Exception {
         assertEquals("weekyear", DateTimeFieldType.weekyear().getName());
         assertEquals(DurationFieldType.weekyears(), DateTimeFieldType.weekyear().getDurationType());
         assertEquals(null, DateTimeFieldType.weekyear().getRangeDurationType());
-        assertEquals(Chronology.getCopticUTC().weekyear(), DateTimeFieldType.weekyear().getField(Chronology.getCopticUTC()));
-        assertEquals(Chronology.getCopticUTC().weekyear().isSupported(), DateTimeFieldType.weekyear().isSupported(Chronology.getCopticUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().weekyear(), DateTimeFieldType.weekyear().getField(CopticChronology.getInstanceUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().weekyear().isSupported(), DateTimeFieldType.weekyear().isSupported(CopticChronology.getInstanceUTC()));
         assertSerialization(DateTimeFieldType.weekyear());
     }
 
@@ -135,8 +137,8 @@ public void test_weekOfWeekyear() throws Exception {
         assertEquals("weekOfWeekyear", DateTimeFieldType.weekOfWeekyear().getName());
         assertEquals(DurationFieldType.weeks(), DateTimeFieldType.weekOfWeekyear().getDurationType());
         assertEquals(DurationFieldType.weekyears(), DateTimeFieldType.weekOfWeekyear().getRangeDurationType());
-        assertEquals(Chronology.getCopticUTC().weekOfWeekyear(), DateTimeFieldType.weekOfWeekyear().getField(Chronology.getCopticUTC()));
-        assertEquals(Chronology.getCopticUTC().weekOfWeekyear().isSupported(), DateTimeFieldType.weekOfWeekyear().isSupported(Chronology.getCopticUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().weekOfWeekyear(), DateTimeFieldType.weekOfWeekyear().getField(CopticChronology.getInstanceUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().weekOfWeekyear().isSupported(), DateTimeFieldType.weekOfWeekyear().isSupported(CopticChronology.getInstanceUTC()));
         assertSerialization(DateTimeFieldType.weekOfWeekyear());
     }
 
@@ -145,8 +147,8 @@ public void test_dayOfYear() throws Exception {
         assertEquals("dayOfYear", DateTimeFieldType.dayOfYear().getName());
         assertEquals(DurationFieldType.days(), DateTimeFieldType.dayOfYear().getDurationType());
         assertEquals(DurationFieldType.years(), DateTimeFieldType.dayOfYear().getRangeDurationType());
-        assertEquals(Chronology.getCopticUTC().dayOfYear(), DateTimeFieldType.dayOfYear().getField(Chronology.getCopticUTC()));
-        assertEquals(Chronology.getCopticUTC().dayOfYear().isSupported(), DateTimeFieldType.dayOfYear().isSupported(Chronology.getCopticUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().dayOfYear(), DateTimeFieldType.dayOfYear().getField(CopticChronology.getInstanceUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().dayOfYear().isSupported(), DateTimeFieldType.dayOfYear().isSupported(CopticChronology.getInstanceUTC()));
         assertSerialization(DateTimeFieldType.dayOfYear());
     }
 
@@ -155,8 +157,8 @@ public void test_dayOfMonth() throws Exception {
         assertEquals("dayOfMonth", DateTimeFieldType.dayOfMonth().getName());
         assertEquals(DurationFieldType.days(), DateTimeFieldType.dayOfMonth().getDurationType());
         assertEquals(DurationFieldType.months(), DateTimeFieldType.dayOfMonth().getRangeDurationType());
-        assertEquals(Chronology.getCopticUTC().dayOfMonth(), DateTimeFieldType.dayOfMonth().getField(Chronology.getCopticUTC()));
-        assertEquals(Chronology.getCopticUTC().dayOfMonth().isSupported(), DateTimeFieldType.dayOfMonth().isSupported(Chronology.getCopticUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().dayOfMonth(), DateTimeFieldType.dayOfMonth().getField(CopticChronology.getInstanceUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().dayOfMonth().isSupported(), DateTimeFieldType.dayOfMonth().isSupported(CopticChronology.getInstanceUTC()));
         assertSerialization(DateTimeFieldType.dayOfMonth());
     }
 
@@ -165,8 +167,8 @@ public void test_dayOfWeek() throws Exception {
         assertEquals("dayOfWeek", DateTimeFieldType.dayOfWeek().getName());
         assertEquals(DurationFieldType.days(), DateTimeFieldType.dayOfWeek().getDurationType());
         assertEquals(DurationFieldType.weeks(), DateTimeFieldType.dayOfWeek().getRangeDurationType());
-        assertEquals(Chronology.getCopticUTC().dayOfWeek(), DateTimeFieldType.dayOfWeek().getField(Chronology.getCopticUTC()));
-        assertEquals(Chronology.getCopticUTC().dayOfWeek().isSupported(), DateTimeFieldType.dayOfWeek().isSupported(Chronology.getCopticUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().dayOfWeek(), DateTimeFieldType.dayOfWeek().getField(CopticChronology.getInstanceUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().dayOfWeek().isSupported(), DateTimeFieldType.dayOfWeek().isSupported(CopticChronology.getInstanceUTC()));
         assertSerialization(DateTimeFieldType.dayOfWeek());
     }
 
@@ -175,8 +177,8 @@ public void test_halfdayOfDay() throws Exception {
         assertEquals("halfdayOfDay", DateTimeFieldType.halfdayOfDay().getName());
         assertEquals(DurationFieldType.halfdays(), DateTimeFieldType.halfdayOfDay().getDurationType());
         assertEquals(DurationFieldType.days(), DateTimeFieldType.halfdayOfDay().getRangeDurationType());
-        assertEquals(Chronology.getCopticUTC().halfdayOfDay(), DateTimeFieldType.halfdayOfDay().getField(Chronology.getCopticUTC()));
-        assertEquals(Chronology.getCopticUTC().halfdayOfDay().isSupported(), DateTimeFieldType.halfdayOfDay().isSupported(Chronology.getCopticUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().halfdayOfDay(), DateTimeFieldType.halfdayOfDay().getField(CopticChronology.getInstanceUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().halfdayOfDay().isSupported(), DateTimeFieldType.halfdayOfDay().isSupported(CopticChronology.getInstanceUTC()));
         assertSerialization(DateTimeFieldType.halfdayOfDay());
     }
 
@@ -185,8 +187,8 @@ public void test_clockhourOfDay() throws Exception {
         assertEquals("clockhourOfDay", DateTimeFieldType.clockhourOfDay().getName());
         assertEquals(DurationFieldType.hours(), DateTimeFieldType.clockhourOfDay().getDurationType());
         assertEquals(DurationFieldType.days(), DateTimeFieldType.clockhourOfDay().getRangeDurationType());
-        assertEquals(Chronology.getCopticUTC().clockhourOfDay(), DateTimeFieldType.clockhourOfDay().getField(Chronology.getCopticUTC()));
-        assertEquals(Chronology.getCopticUTC().clockhourOfDay().isSupported(), DateTimeFieldType.clockhourOfDay().isSupported(Chronology.getCopticUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().clockhourOfDay(), DateTimeFieldType.clockhourOfDay().getField(CopticChronology.getInstanceUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().clockhourOfDay().isSupported(), DateTimeFieldType.clockhourOfDay().isSupported(CopticChronology.getInstanceUTC()));
         assertSerialization(DateTimeFieldType.clockhourOfDay());
     }
 
@@ -195,8 +197,8 @@ public void test_clockhourOfHalfday() throws Exception {
         assertEquals("clockhourOfHalfday", DateTimeFieldType.clockhourOfHalfday().getName());
         assertEquals(DurationFieldType.hours(), DateTimeFieldType.clockhourOfHalfday().getDurationType());
         assertEquals(DurationFieldType.halfdays(), DateTimeFieldType.clockhourOfHalfday().getRangeDurationType());
-        assertEquals(Chronology.getCopticUTC().clockhourOfHalfday(), DateTimeFieldType.clockhourOfHalfday().getField(Chronology.getCopticUTC()));
-        assertEquals(Chronology.getCopticUTC().clockhourOfHalfday().isSupported(), DateTimeFieldType.clockhourOfHalfday().isSupported(Chronology.getCopticUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().clockhourOfHalfday(), DateTimeFieldType.clockhourOfHalfday().getField(CopticChronology.getInstanceUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().clockhourOfHalfday().isSupported(), DateTimeFieldType.clockhourOfHalfday().isSupported(CopticChronology.getInstanceUTC()));
         assertSerialization(DateTimeFieldType.clockhourOfHalfday());
     }
 
@@ -205,8 +207,8 @@ public void test_hourOfHalfday() throws Exception {
         assertEquals("hourOfHalfday", DateTimeFieldType.hourOfHalfday().getName());
         assertEquals(DurationFieldType.hours(), DateTimeFieldType.hourOfHalfday().getDurationType());
         assertEquals(DurationFieldType.halfdays(), DateTimeFieldType.hourOfHalfday().getRangeDurationType());
-        assertEquals(Chronology.getCopticUTC().hourOfHalfday(), DateTimeFieldType.hourOfHalfday().getField(Chronology.getCopticUTC()));
-        assertEquals(Chronology.getCopticUTC().hourOfHalfday().isSupported(), DateTimeFieldType.hourOfHalfday().isSupported(Chronology.getCopticUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().hourOfHalfday(), DateTimeFieldType.hourOfHalfday().getField(CopticChronology.getInstanceUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().hourOfHalfday().isSupported(), DateTimeFieldType.hourOfHalfday().isSupported(CopticChronology.getInstanceUTC()));
         assertSerialization(DateTimeFieldType.hourOfHalfday());
     }
 
@@ -215,8 +217,8 @@ public void test_hourOfDay() throws Exception {
         assertEquals("hourOfDay", DateTimeFieldType.hourOfDay().getName());
         assertEquals(DurationFieldType.hours(), DateTimeFieldType.hourOfDay().getDurationType());
         assertEquals(DurationFieldType.days(), DateTimeFieldType.hourOfDay().getRangeDurationType());
-        assertEquals(Chronology.getCopticUTC().hourOfDay(), DateTimeFieldType.hourOfDay().getField(Chronology.getCopticUTC()));
-        assertEquals(Chronology.getCopticUTC().hourOfDay().isSupported(), DateTimeFieldType.hourOfDay().isSupported(Chronology.getCopticUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().hourOfDay(), DateTimeFieldType.hourOfDay().getField(CopticChronology.getInstanceUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().hourOfDay().isSupported(), DateTimeFieldType.hourOfDay().isSupported(CopticChronology.getInstanceUTC()));
         assertSerialization(DateTimeFieldType.hourOfDay());
     }
 
@@ -225,8 +227,8 @@ public void test_minuteOfDay() throws Exception {
         assertEquals("minuteOfDay", DateTimeFieldType.minuteOfDay().getName());
         assertEquals(DurationFieldType.minutes(), DateTimeFieldType.minuteOfDay().getDurationType());
         assertEquals(DurationFieldType.days(), DateTimeFieldType.minuteOfDay().getRangeDurationType());
-        assertEquals(Chronology.getCopticUTC().minuteOfDay(), DateTimeFieldType.minuteOfDay().getField(Chronology.getCopticUTC()));
-        assertEquals(Chronology.getCopticUTC().minuteOfDay().isSupported(), DateTimeFieldType.minuteOfDay().isSupported(Chronology.getCopticUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().minuteOfDay(), DateTimeFieldType.minuteOfDay().getField(CopticChronology.getInstanceUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().minuteOfDay().isSupported(), DateTimeFieldType.minuteOfDay().isSupported(CopticChronology.getInstanceUTC()));
         assertSerialization(DateTimeFieldType.minuteOfDay());
     }
 
@@ -235,8 +237,8 @@ public void test_minuteOfHour() throws Exception {
         assertEquals("minuteOfHour", DateTimeFieldType.minuteOfHour().getName());
         assertEquals(DurationFieldType.minutes(), DateTimeFieldType.minuteOfHour().getDurationType());
         assertEquals(DurationFieldType.hours(), DateTimeFieldType.minuteOfHour().getRangeDurationType());
-        assertEquals(Chronology.getCopticUTC().minuteOfHour(), DateTimeFieldType.minuteOfHour().getField(Chronology.getCopticUTC()));
-        assertEquals(Chronology.getCopticUTC().minuteOfHour().isSupported(), DateTimeFieldType.minuteOfHour().isSupported(Chronology.getCopticUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().minuteOfHour(), DateTimeFieldType.minuteOfHour().getField(CopticChronology.getInstanceUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().minuteOfHour().isSupported(), DateTimeFieldType.minuteOfHour().isSupported(CopticChronology.getInstanceUTC()));
         assertSerialization(DateTimeFieldType.minuteOfHour());
     }
 
@@ -245,8 +247,8 @@ public void test_secondOfDay() throws Exception {
         assertEquals("secondOfDay", DateTimeFieldType.secondOfDay().getName());
         assertEquals(DurationFieldType.seconds(), DateTimeFieldType.secondOfDay().getDurationType());
         assertEquals(DurationFieldType.days(), DateTimeFieldType.secondOfDay().getRangeDurationType());
-        assertEquals(Chronology.getCopticUTC().secondOfDay(), DateTimeFieldType.secondOfDay().getField(Chronology.getCopticUTC()));
-        assertEquals(Chronology.getCopticUTC().secondOfDay().isSupported(), DateTimeFieldType.secondOfDay().isSupported(Chronology.getCopticUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().secondOfDay(), DateTimeFieldType.secondOfDay().getField(CopticChronology.getInstanceUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().secondOfDay().isSupported(), DateTimeFieldType.secondOfDay().isSupported(CopticChronology.getInstanceUTC()));
         assertSerialization(DateTimeFieldType.secondOfDay());
     }
 
@@ -255,8 +257,8 @@ public void test_secondOfMinute() throws Exception {
         assertEquals("secondOfMinute", DateTimeFieldType.secondOfMinute().getName());
         assertEquals(DurationFieldType.seconds(), DateTimeFieldType.secondOfMinute().getDurationType());
         assertEquals(DurationFieldType.minutes(), DateTimeFieldType.secondOfMinute().getRangeDurationType());
-        assertEquals(Chronology.getCopticUTC().secondOfMinute(), DateTimeFieldType.secondOfMinute().getField(Chronology.getCopticUTC()));
-        assertEquals(Chronology.getCopticUTC().secondOfMinute().isSupported(), DateTimeFieldType.secondOfMinute().isSupported(Chronology.getCopticUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().secondOfMinute(), DateTimeFieldType.secondOfMinute().getField(CopticChronology.getInstanceUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().secondOfMinute().isSupported(), DateTimeFieldType.secondOfMinute().isSupported(CopticChronology.getInstanceUTC()));
         assertSerialization(DateTimeFieldType.secondOfMinute());
     }
 
@@ -265,8 +267,8 @@ public void test_millisOfDay() throws Exception {
         assertEquals("millisOfDay", DateTimeFieldType.millisOfDay().getName());
         assertEquals(DurationFieldType.millis(), DateTimeFieldType.millisOfDay().getDurationType());
         assertEquals(DurationFieldType.days(), DateTimeFieldType.millisOfDay().getRangeDurationType());
-        assertEquals(Chronology.getCopticUTC().millisOfDay(), DateTimeFieldType.millisOfDay().getField(Chronology.getCopticUTC()));
-        assertEquals(Chronology.getCopticUTC().millisOfDay().isSupported(), DateTimeFieldType.millisOfDay().isSupported(Chronology.getCopticUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().millisOfDay(), DateTimeFieldType.millisOfDay().getField(CopticChronology.getInstanceUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().millisOfDay().isSupported(), DateTimeFieldType.millisOfDay().isSupported(CopticChronology.getInstanceUTC()));
         assertSerialization(DateTimeFieldType.millisOfDay());
     }
 
@@ -275,8 +277,8 @@ public void test_millisOfSecond() throws Exception {
         assertEquals("millisOfSecond", DateTimeFieldType.millisOfSecond().getName());
         assertEquals(DurationFieldType.millis(), DateTimeFieldType.millisOfSecond().getDurationType());
         assertEquals(DurationFieldType.seconds(), DateTimeFieldType.millisOfSecond().getRangeDurationType());
-        assertEquals(Chronology.getCopticUTC().millisOfSecond(), DateTimeFieldType.millisOfSecond().getField(Chronology.getCopticUTC()));
-        assertEquals(Chronology.getCopticUTC().millisOfSecond().isSupported(), DateTimeFieldType.millisOfSecond().isSupported(Chronology.getCopticUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().millisOfSecond(), DateTimeFieldType.millisOfSecond().getField(CopticChronology.getInstanceUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().millisOfSecond().isSupported(), DateTimeFieldType.millisOfSecond().isSupported(CopticChronology.getInstanceUTC()));
         assertSerialization(DateTimeFieldType.millisOfSecond());
     }
 
@@ -293,7 +295,7 @@ public void test_other() throws Exception {
         assertSame(DurationFieldType.hours(), type.getDurationType());
         assertSame(DurationFieldType.months(), type.getRangeDurationType());
         try {
-            type.getField(Chronology.getCopticUTC());
+            type.getField(CopticChronology.getInstanceUTC());
             fail();
         } catch (InternalError ex) {}
         DateTimeFieldType result = doSerialization(type);
diff --git a/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java b/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java
index 448e8ce28..1c0576306 100644
--- a/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java
+++ b/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java
@@ -29,6 +29,7 @@
 
 import org.joda.time.base.AbstractInstant;
 import org.joda.time.chrono.BuddhistChronology;
+import org.joda.time.chrono.CopticChronology;
 import org.joda.time.chrono.ISOChronology;
 
 /**
@@ -308,27 +309,27 @@ public Chronology getChronology() {
 
     //-----------------------------------------------------------------------
     public void testGetIntervalChronology_RInterval() {
-        Interval dt = new Interval(123L, 456L, Chronology.getBuddhist());
-        assertEquals(Chronology.getBuddhist(), DateTimeUtils.getIntervalChronology(dt));
+        Interval dt = new Interval(123L, 456L, BuddhistChronology.getInstance());
+        assertEquals(BuddhistChronology.getInstance(), DateTimeUtils.getIntervalChronology(dt));
         
-        assertEquals(Chronology.getISO(), DateTimeUtils.getIntervalChronology(null));
+        assertEquals(ISOChronology.getInstance(), DateTimeUtils.getIntervalChronology(null));
         
         MutableInterval ai = new MutableInterval() {
             public Chronology getChronology() {
                 return null; // testing for this
             }
         };
-        assertEquals(Chronology.getISO(), DateTimeUtils.getIntervalChronology(ai));
+        assertEquals(ISOChronology.getInstance(), DateTimeUtils.getIntervalChronology(ai));
     }
 
     //-----------------------------------------------------------------------
     public void testGetIntervalChronology_RI_RI() {
-        DateTime dt1 = new DateTime(123L, Chronology.getBuddhist());
-        DateTime dt2 = new DateTime(123L, Chronology.getCoptic());
-        assertEquals(Chronology.getBuddhist(), DateTimeUtils.getIntervalChronology(dt1, dt2));
-        assertEquals(Chronology.getBuddhist(), DateTimeUtils.getIntervalChronology(dt1, null));
-        assertEquals(Chronology.getCoptic(), DateTimeUtils.getIntervalChronology(null, dt2));
-        assertEquals(Chronology.getISO(), DateTimeUtils.getIntervalChronology(null, null));
+        DateTime dt1 = new DateTime(123L, BuddhistChronology.getInstance());
+        DateTime dt2 = new DateTime(123L, CopticChronology.getInstance());
+        assertEquals(BuddhistChronology.getInstance(), DateTimeUtils.getIntervalChronology(dt1, dt2));
+        assertEquals(BuddhistChronology.getInstance(), DateTimeUtils.getIntervalChronology(dt1, null));
+        assertEquals(CopticChronology.getInstance(), DateTimeUtils.getIntervalChronology(null, dt2));
+        assertEquals(ISOChronology.getInstance(), DateTimeUtils.getIntervalChronology(null, null));
     }
 
     //-----------------------------------------------------------------------
diff --git a/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java b/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java
index 8f19c8267..bfa1cb25c 100644
--- a/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java
@@ -31,6 +31,7 @@
 import org.joda.time.base.AbstractInstant;
 import org.joda.time.chrono.BaseChronology;
 import org.joda.time.chrono.BuddhistChronology;
+import org.joda.time.chrono.CopticChronology;
 import org.joda.time.chrono.GregorianChronology;
 import org.joda.time.chrono.ISOChronology;
 import org.joda.time.field.UnsupportedDateTimeField;
@@ -661,21 +662,21 @@ public void testToGregorianCalendar() {
 
     //-----------------------------------------------------------------------
     public void testToDateMidnight() {
-        DateTime base = new DateTime(TEST_TIME1, Chronology.getCoptic());
+        DateTime base = new DateTime(TEST_TIME1, CopticChronology.getInstance());
         DateMidnight test = base.toDateMidnight();
-        assertEquals(new DateMidnight(base, Chronology.getCoptic()), test);
+        assertEquals(new DateMidnight(base, CopticChronology.getInstance()), test);
     }
 
     public void testToYearMonthDay() {
-        DateTime base = new DateTime(TEST_TIME1, Chronology.getCoptic());
+        DateTime base = new DateTime(TEST_TIME1, CopticChronology.getInstance());
         YearMonthDay test = base.toYearMonthDay();
-        assertEquals(new YearMonthDay(TEST_TIME1, Chronology.getCoptic()), test);
+        assertEquals(new YearMonthDay(TEST_TIME1, CopticChronology.getInstance()), test);
     }
 
     public void testToTimeOfDay() {
-        DateTime base = new DateTime(TEST_TIME1, Chronology.getCoptic());
+        DateTime base = new DateTime(TEST_TIME1, CopticChronology.getInstance());
         TimeOfDay test = base.toTimeOfDay();
-        assertEquals(new TimeOfDay(TEST_TIME1, Chronology.getCoptic()), test);
+        assertEquals(new TimeOfDay(TEST_TIME1, CopticChronology.getInstance()), test);
     }
 
     //-----------------------------------------------------------------------
diff --git a/JodaTime/src/test/org/joda/time/TestDateTime_Properties.java b/JodaTime/src/test/org/joda/time/TestDateTime_Properties.java
index b10648cb3..346c52764 100644
--- a/JodaTime/src/test/org/joda/time/TestDateTime_Properties.java
+++ b/JodaTime/src/test/org/joda/time/TestDateTime_Properties.java
@@ -20,6 +20,8 @@
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
 
+import org.joda.time.chrono.CopticChronology;
+
 /**
  * This class is a Junit unit test for DateTime.
  *
@@ -316,12 +318,12 @@ public void testPropertyEqualsHashCodeYear() {
         assertEquals(true, test1.year().equals(test1.year()));
         assertEquals(true, test1.year().equals(new DateTime(2004, 6, 9, 0, 0, 0, 0).year()));
         assertEquals(false, test1.year().equals(new DateTime(2004, 6, 9, 0, 0, 0, 0).monthOfYear()));
-        assertEquals(false, test1.year().equals(new DateTime(2004, 6, 9, 0, 0, 0, 0, Chronology.getCoptic()).year()));
+        assertEquals(false, test1.year().equals(new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance()).year()));
         
         assertEquals(true, test1.year().hashCode() == test1.year().hashCode());
         assertEquals(true, test1.year().hashCode() == new DateTime(2004, 6, 9, 0, 0, 0, 0).year().hashCode());
         assertEquals(false, test1.year().hashCode() == new DateTime(2004, 6, 9, 0, 0, 0, 0).monthOfYear().hashCode());
-        assertEquals(false, test1.year().hashCode() == new DateTime(2004, 6, 9, 0, 0, 0, 0, Chronology.getCoptic()).year().hashCode());
+        assertEquals(false, test1.year().hashCode() == new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance()).year().hashCode());
     }
 
     //-----------------------------------------------------------------------
diff --git a/JodaTime/src/test/org/joda/time/TestDurationFieldType.java b/JodaTime/src/test/org/joda/time/TestDurationFieldType.java
index 7ca1271ef..582d78f7b 100644
--- a/JodaTime/src/test/org/joda/time/TestDurationFieldType.java
+++ b/JodaTime/src/test/org/joda/time/TestDurationFieldType.java
@@ -24,6 +24,8 @@
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
 
+import org.joda.time.chrono.CopticChronology;
+
 /**
  * This class is a Junit unit test for DurationFieldType.
  *
@@ -53,96 +55,96 @@ protected void tearDown() throws Exception {
     public void test_eras() throws Exception {
         assertEquals(DurationFieldType.eras(), DurationFieldType.eras());
         assertEquals("eras", DurationFieldType.eras().getName());
-        assertEquals(Chronology.getCopticUTC().eras(), DurationFieldType.eras().getField(Chronology.getCopticUTC()));
-        assertEquals(Chronology.getCopticUTC().eras().isSupported(), DurationFieldType.eras().isSupported(Chronology.getCopticUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().eras(), DurationFieldType.eras().getField(CopticChronology.getInstanceUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().eras().isSupported(), DurationFieldType.eras().isSupported(CopticChronology.getInstanceUTC()));
         assertSerialization(DurationFieldType.eras());
     }
 
     public void test_centuries() throws Exception {
         assertEquals(DurationFieldType.centuries(), DurationFieldType.centuries());
         assertEquals("centuries", DurationFieldType.centuries().getName());
-        assertEquals(Chronology.getCopticUTC().centuries(), DurationFieldType.centuries().getField(Chronology.getCopticUTC()));
-        assertEquals(Chronology.getCopticUTC().centuries().isSupported(), DurationFieldType.centuries().isSupported(Chronology.getCopticUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().centuries(), DurationFieldType.centuries().getField(CopticChronology.getInstanceUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().centuries().isSupported(), DurationFieldType.centuries().isSupported(CopticChronology.getInstanceUTC()));
         assertSerialization(DurationFieldType.centuries());
     }
 
     public void test_years() throws Exception {
         assertEquals(DurationFieldType.years(), DurationFieldType.years());
         assertEquals("years", DurationFieldType.years().getName());
-        assertEquals(Chronology.getCopticUTC().years(), DurationFieldType.years().getField(Chronology.getCopticUTC()));
-        assertEquals(Chronology.getCopticUTC().years().isSupported(), DurationFieldType.years().isSupported(Chronology.getCopticUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().years(), DurationFieldType.years().getField(CopticChronology.getInstanceUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().years().isSupported(), DurationFieldType.years().isSupported(CopticChronology.getInstanceUTC()));
         assertSerialization(DurationFieldType.years());
     }
 
     public void test_months() throws Exception {
         assertEquals(DurationFieldType.months(), DurationFieldType.months());
         assertEquals("months", DurationFieldType.months().getName());
-        assertEquals(Chronology.getCopticUTC().months(), DurationFieldType.months().getField(Chronology.getCopticUTC()));
-        assertEquals(Chronology.getCopticUTC().months().isSupported(), DurationFieldType.months().isSupported(Chronology.getCopticUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().months(), DurationFieldType.months().getField(CopticChronology.getInstanceUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().months().isSupported(), DurationFieldType.months().isSupported(CopticChronology.getInstanceUTC()));
         assertSerialization(DurationFieldType.months());
     }
 
     public void test_weekyears() throws Exception {
         assertEquals(DurationFieldType.weekyears(), DurationFieldType.weekyears());
         assertEquals("weekyears", DurationFieldType.weekyears().getName());
-        assertEquals(Chronology.getCopticUTC().weekyears(), DurationFieldType.weekyears().getField(Chronology.getCopticUTC()));
-        assertEquals(Chronology.getCopticUTC().weekyears().isSupported(), DurationFieldType.weekyears().isSupported(Chronology.getCopticUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().weekyears(), DurationFieldType.weekyears().getField(CopticChronology.getInstanceUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().weekyears().isSupported(), DurationFieldType.weekyears().isSupported(CopticChronology.getInstanceUTC()));
         assertSerialization(DurationFieldType.weekyears());
     }
 
     public void test_weeks() throws Exception {
         assertEquals(DurationFieldType.weeks(), DurationFieldType.weeks());
         assertEquals("weeks", DurationFieldType.weeks().getName());
-        assertEquals(Chronology.getCopticUTC().weeks(), DurationFieldType.weeks().getField(Chronology.getCopticUTC()));
-        assertEquals(Chronology.getCopticUTC().weeks().isSupported(), DurationFieldType.weeks().isSupported(Chronology.getCopticUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().weeks(), DurationFieldType.weeks().getField(CopticChronology.getInstanceUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().weeks().isSupported(), DurationFieldType.weeks().isSupported(CopticChronology.getInstanceUTC()));
         assertSerialization(DurationFieldType.weeks());
     }
 
     public void test_days() throws Exception {
         assertEquals(DurationFieldType.days(), DurationFieldType.days());
         assertEquals("days", DurationFieldType.days().getName());
-        assertEquals(Chronology.getCopticUTC().days(), DurationFieldType.days().getField(Chronology.getCopticUTC()));
-        assertEquals(Chronology.getCopticUTC().days().isSupported(), DurationFieldType.days().isSupported(Chronology.getCopticUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().days(), DurationFieldType.days().getField(CopticChronology.getInstanceUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().days().isSupported(), DurationFieldType.days().isSupported(CopticChronology.getInstanceUTC()));
         assertSerialization(DurationFieldType.days());
     }
 
     public void test_halfdays() throws Exception {
         assertEquals(DurationFieldType.halfdays(), DurationFieldType.halfdays());
         assertEquals("halfdays", DurationFieldType.halfdays().getName());
-        assertEquals(Chronology.getCopticUTC().halfdays(), DurationFieldType.halfdays().getField(Chronology.getCopticUTC()));
-        assertEquals(Chronology.getCopticUTC().halfdays().isSupported(), DurationFieldType.halfdays().isSupported(Chronology.getCopticUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().halfdays(), DurationFieldType.halfdays().getField(CopticChronology.getInstanceUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().halfdays().isSupported(), DurationFieldType.halfdays().isSupported(CopticChronology.getInstanceUTC()));
         assertSerialization(DurationFieldType.halfdays());
     }
 
     public void test_hours() throws Exception {
         assertEquals(DurationFieldType.hours(), DurationFieldType.hours());
         assertEquals("hours", DurationFieldType.hours().getName());
-        assertEquals(Chronology.getCopticUTC().hours(), DurationFieldType.hours().getField(Chronology.getCopticUTC()));
-        assertEquals(Chronology.getCopticUTC().hours().isSupported(), DurationFieldType.hours().isSupported(Chronology.getCopticUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().hours(), DurationFieldType.hours().getField(CopticChronology.getInstanceUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().hours().isSupported(), DurationFieldType.hours().isSupported(CopticChronology.getInstanceUTC()));
         assertSerialization(DurationFieldType.hours());
     }
 
     public void test_minutes() throws Exception {
         assertEquals(DurationFieldType.minutes(), DurationFieldType.minutes());
         assertEquals("minutes", DurationFieldType.minutes().getName());
-        assertEquals(Chronology.getCopticUTC().minutes(), DurationFieldType.minutes().getField(Chronology.getCopticUTC()));
-        assertEquals(Chronology.getCopticUTC().minutes().isSupported(), DurationFieldType.minutes().isSupported(Chronology.getCopticUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().minutes(), DurationFieldType.minutes().getField(CopticChronology.getInstanceUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().minutes().isSupported(), DurationFieldType.minutes().isSupported(CopticChronology.getInstanceUTC()));
         assertSerialization(DurationFieldType.minutes());
     }
 
     public void test_seconds() throws Exception {
         assertEquals(DurationFieldType.seconds(), DurationFieldType.seconds());
         assertEquals("seconds", DurationFieldType.seconds().getName());
-        assertEquals(Chronology.getCopticUTC().seconds(), DurationFieldType.seconds().getField(Chronology.getCopticUTC()));
-        assertEquals(Chronology.getCopticUTC().seconds().isSupported(), DurationFieldType.seconds().isSupported(Chronology.getCopticUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().seconds(), DurationFieldType.seconds().getField(CopticChronology.getInstanceUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().seconds().isSupported(), DurationFieldType.seconds().isSupported(CopticChronology.getInstanceUTC()));
         assertSerialization(DurationFieldType.seconds());
     }
 
     public void test_millis() throws Exception {
         assertEquals(DurationFieldType.millis(), DurationFieldType.millis());
         assertEquals("millis", DurationFieldType.millis().getName());
-        assertEquals(Chronology.getCopticUTC().millis(), DurationFieldType.millis().getField(Chronology.getCopticUTC()));
-        assertEquals(Chronology.getCopticUTC().millis().isSupported(), DurationFieldType.millis().isSupported(Chronology.getCopticUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().millis(), DurationFieldType.millis().getField(CopticChronology.getInstanceUTC()));
+        assertEquals(CopticChronology.getInstanceUTC().millis().isSupported(), DurationFieldType.millis().isSupported(CopticChronology.getInstanceUTC()));
         assertSerialization(DurationFieldType.millis());
     }
 
@@ -156,7 +158,7 @@ public void test_other() throws Exception {
         
         assertEquals("other", type.getName());
         try {
-            type.getField(Chronology.getCopticUTC());
+            type.getField(CopticChronology.getInstanceUTC());
             fail();
         } catch (InternalError ex) {}
         DurationFieldType result = doSerialization(type);
diff --git a/JodaTime/src/test/org/joda/time/TestDuration_Basics.java b/JodaTime/src/test/org/joda/time/TestDuration_Basics.java
index b4ef8d240..4068f279f 100644
--- a/JodaTime/src/test/org/joda/time/TestDuration_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestDuration_Basics.java
@@ -27,6 +27,7 @@
 
 import org.joda.time.base.AbstractDuration;
 import org.joda.time.base.BaseDuration;
+import org.joda.time.chrono.ISOChronology;
 
 /**
  * This class is a Junit unit test for Duration.
@@ -315,9 +316,9 @@ public void testToPeriod_Chronology() {
             6L * DateTimeConstants.MILLIS_PER_MINUTE +
             7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
         Duration test = new Duration(length);
-        Period result = test.toPeriod(Chronology.getISOUTC());
-        assertEquals(new Period(test, Chronology.getISOUTC()), result);
-        assertEquals(new Period(test.getMillis(), Chronology.getISOUTC()), result);
+        Period result = test.toPeriod(ISOChronology.getInstanceUTC());
+        assertEquals(new Period(test, ISOChronology.getInstanceUTC()), result);
+        assertEquals(new Period(test.getMillis(), ISOChronology.getInstanceUTC()), result);
     }
 
     //-----------------------------------------------------------------------
@@ -328,9 +329,9 @@ public void testToPeriod_PeriodType_Chronology() {
             6L * DateTimeConstants.MILLIS_PER_MINUTE +
             7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
         Duration test = new Duration(length);
-        Period result = test.toPeriod(PeriodType.standard().withMillisRemoved(), Chronology.getISOUTC());
-        assertEquals(new Period(test, PeriodType.standard().withMillisRemoved(), Chronology.getISOUTC()), result);
-        assertEquals(new Period(test.getMillis(), PeriodType.standard().withMillisRemoved(), Chronology.getISOUTC()), result);
+        Period result = test.toPeriod(PeriodType.standard().withMillisRemoved(), ISOChronology.getInstanceUTC());
+        assertEquals(new Period(test, PeriodType.standard().withMillisRemoved(), ISOChronology.getInstanceUTC()), result);
+        assertEquals(new Period(test.getMillis(), PeriodType.standard().withMillisRemoved(), ISOChronology.getInstanceUTC()), result);
     }
 
     //-----------------------------------------------------------------------
diff --git a/JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java b/JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java
index 5b95317e3..cefa18d44 100644
--- a/JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java
+++ b/JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java
@@ -18,6 +18,9 @@
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
 
+import org.joda.time.chrono.GJChronology;
+import org.joda.time.chrono.ISOChronology;
+import org.joda.time.chrono.JulianChronology;
 import org.joda.time.field.FieldUtils;
 import org.joda.time.field.SkipDateTimeField;
 
@@ -41,7 +44,7 @@ public TestIllegalFieldValueException(String name) {
 
     public void testVerifyValueBounds() {
         try {
-            FieldUtils.verifyValueBounds(Chronology.getISO().monthOfYear(), -5, 1, 31);
+            FieldUtils.verifyValueBounds(ISOChronology.getInstance().monthOfYear(), -5, 1, 31);
             fail();
         } catch (IllegalFieldValueException e) {
             assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType());
@@ -85,7 +88,7 @@ public void testVerifyValueBounds() {
 
     public void testSkipDateTimeField() {
         DateTimeField field = new SkipDateTimeField
-            (Chronology.getISOUTC(), Chronology.getISOUTC().year(), 1970);
+            (ISOChronology.getInstanceUTC(), ISOChronology.getInstanceUTC().year(), 1970);
         try {
             field.set(0, 1970);
             fail();
@@ -103,7 +106,7 @@ public void testSkipDateTimeField() {
 
     public void testSetText() {
         try {
-            Chronology.getISOUTC().year().set(0, null, java.util.Locale.US);
+            ISOChronology.getInstanceUTC().year().set(0, null, java.util.Locale.US);
             fail();
         } catch (IllegalFieldValueException e) {
             assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType());
@@ -117,7 +120,7 @@ public void testSetText() {
         }
 
         try {
-            Chronology.getISOUTC().year().set(0, "nineteen seventy", java.util.Locale.US);
+            ISOChronology.getInstanceUTC().year().set(0, "nineteen seventy", java.util.Locale.US);
             fail();
         } catch (IllegalFieldValueException e) {
             assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType());
@@ -131,7 +134,7 @@ public void testSetText() {
         }
 
         try {
-            Chronology.getISOUTC().era().set(0, "long ago", java.util.Locale.US);
+            ISOChronology.getInstanceUTC().era().set(0, "long ago", java.util.Locale.US);
             fail();
         } catch (IllegalFieldValueException e) {
             assertEquals(DateTimeFieldType.era(), e.getDateTimeFieldType());
@@ -145,7 +148,7 @@ public void testSetText() {
         }
 
         try {
-            Chronology.getISOUTC().monthOfYear().set(0, "spring", java.util.Locale.US);
+            ISOChronology.getInstanceUTC().monthOfYear().set(0, "spring", java.util.Locale.US);
             fail();
         } catch (IllegalFieldValueException e) {
             assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType());
@@ -159,7 +162,7 @@ public void testSetText() {
         }
 
         try {
-            Chronology.getISOUTC().dayOfWeek().set(0, "yesterday", java.util.Locale.US);
+            ISOChronology.getInstanceUTC().dayOfWeek().set(0, "yesterday", java.util.Locale.US);
             fail();
         } catch (IllegalFieldValueException e) {
             assertEquals(DateTimeFieldType.dayOfWeek(), e.getDateTimeFieldType());
@@ -173,7 +176,7 @@ public void testSetText() {
         }
 
         try {
-            Chronology.getISOUTC().halfdayOfDay().set(0, "morning", java.util.Locale.US);
+            ISOChronology.getInstanceUTC().halfdayOfDay().set(0, "morning", java.util.Locale.US);
             fail();
         } catch (IllegalFieldValueException e) {
             assertEquals(DateTimeFieldType.halfdayOfDay(), e.getDateTimeFieldType());
@@ -206,7 +209,7 @@ public void testZoneTransition() {
     }
 
     public void testJulianYearZero() {
-        DateTime dt = new DateTime(Chronology.getJulianUTC());
+        DateTime dt = new DateTime(JulianChronology.getInstanceUTC());
         try {
             dt.year().setCopy(0);
             fail();
@@ -223,7 +226,7 @@ public void testJulianYearZero() {
     }
 
     public void testGJCutover() {
-        DateTime dt = new DateTime("1582-10-04", Chronology.getGJUTC());
+        DateTime dt = new DateTime("1582-10-04", GJChronology.getInstanceUTC());
         try {
             dt.dayOfMonth().setCopy(5);
             fail();
@@ -238,7 +241,7 @@ public void testGJCutover() {
             assertEquals(null, e.getUpperBound());
         }
 
-        dt = new DateTime("1582-10-15", Chronology.getGJUTC());
+        dt = new DateTime("1582-10-15", GJChronology.getInstanceUTC());
         try {
             dt.dayOfMonth().setCopy(14);
             fail();
diff --git a/JodaTime/src/test/org/joda/time/TestInstant_Basics.java b/JodaTime/src/test/org/joda/time/TestInstant_Basics.java
index ce76db6ec..7799917a2 100644
--- a/JodaTime/src/test/org/joda/time/TestInstant_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestInstant_Basics.java
@@ -175,7 +175,7 @@ public void testGet_DateTimeField() {
     public void testGetMethods() {
         Instant test = new Instant();
         
-        assertEquals(Chronology.getISOUTC(), test.getChronology());
+        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());
         assertEquals(DateTimeZone.UTC, test.getZone());
         assertEquals(TEST_TIME_NOW, test.getMillis());
     }
@@ -212,7 +212,7 @@ public long getMillis() {
             return TEST_TIME1;
         }
         public Chronology getChronology() {
-            return Chronology.getISOUTC();
+            return ISOChronology.getInstanceUTC();
         }
     }
 
diff --git a/JodaTime/src/test/org/joda/time/TestInstant_Constructors.java b/JodaTime/src/test/org/joda/time/TestInstant_Constructors.java
index 1feb6ab57..901482b74 100644
--- a/JodaTime/src/test/org/joda/time/TestInstant_Constructors.java
+++ b/JodaTime/src/test/org/joda/time/TestInstant_Constructors.java
@@ -21,6 +21,7 @@
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
 
+import org.joda.time.chrono.ISOChronology;
 import org.joda.time.convert.ConverterManager;
 import org.joda.time.convert.MockZeroNullIntegerConverter;
 
@@ -86,7 +87,7 @@ protected void tearDown() throws Exception {
      */
     public void testConstructor() throws Throwable {
         Instant test = new Instant();
-        assertEquals(Chronology.getISOUTC(), test.getChronology());
+        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());
         assertEquals(TEST_TIME_NOW, test.getMillis());
     }
 
@@ -96,7 +97,7 @@ public void testConstructor() throws Throwable {
      */
     public void testConstructor_long1() throws Throwable {
         Instant test = new Instant(TEST_TIME1);
-        assertEquals(Chronology.getISOUTC(), test.getChronology());
+        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());
         assertEquals(TEST_TIME1, test.getMillis());
     }
 
@@ -105,7 +106,7 @@ public void testConstructor_long1() throws Throwable {
      */
     public void testConstructor_long2() throws Throwable {
         Instant test = new Instant(TEST_TIME2);
-        assertEquals(Chronology.getISOUTC(), test.getChronology());
+        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());
         assertEquals(TEST_TIME2, test.getMillis());
     }
 
@@ -116,7 +117,7 @@ public void testConstructor_long2() throws Throwable {
     public void testConstructor_Object() throws Throwable {
         Date date = new Date(TEST_TIME1);
         Instant test = new Instant(date);
-        assertEquals(Chronology.getISOUTC(), test.getChronology());
+        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());
         assertEquals(TEST_TIME1, test.getMillis());
     }
 
@@ -135,7 +136,7 @@ public void testConstructor_invalidObject() throws Throwable {
      */
     public void testConstructor_nullObject() throws Throwable {
         Instant test = new Instant((Object) null);
-        assertEquals(Chronology.getISOUTC(), test.getChronology());
+        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());
         assertEquals(TEST_TIME_NOW, test.getMillis());
     }
 
@@ -146,7 +147,7 @@ public void testConstructor_badconverterObject() throws Throwable {
         try {
             ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE);
             Instant test = new Instant(new Integer(0));
-            assertEquals(Chronology.getISOUTC(), test.getChronology());
+            assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());
             assertEquals(0L, test.getMillis());
         } finally {
             ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE);
diff --git a/JodaTime/src/test/org/joda/time/TestInterval_Basics.java b/JodaTime/src/test/org/joda/time/TestInterval_Basics.java
index af2b94115..171cabad4 100644
--- a/JodaTime/src/test/org/joda/time/TestInterval_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestInterval_Basics.java
@@ -26,6 +26,10 @@
 import junit.framework.TestSuite;
 
 import org.joda.time.base.AbstractInterval;
+import org.joda.time.chrono.BuddhistChronology;
+import org.joda.time.chrono.CopticChronology;
+import org.joda.time.chrono.GJChronology;
+import org.joda.time.chrono.ISOChronology;
 
 /**
  * This class is a Junit unit test for Instant.
@@ -38,7 +42,7 @@
 
     private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
     private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
-    private static final Chronology COPTIC_PARIS = Chronology.getCoptic(PARIS);
+    private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);
     
     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 
                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 
@@ -149,7 +153,7 @@ public void testEqualsHashCode() {
         assertEquals(false, test1.hashCode() == test3.hashCode());
         assertEquals(false, test2.hashCode() == test3.hashCode());
         
-        Interval test4 = new Interval(TEST_TIME1, TEST_TIME2, Chronology.getGJ());
+        Interval test4 = new Interval(TEST_TIME1, TEST_TIME2, GJChronology.getInstance());
         assertEquals(true, test4.equals(test4));
         assertEquals(false, test1.equals(test4));
         assertEquals(false, test2.equals(test4));
@@ -179,7 +183,7 @@ public MockInterval() {
             super();
         }
         public Chronology getChronology() {
-            return Chronology.getISO();
+            return ISOChronology.getInstance();
         }
         public long getStartMillis() {
             return TEST_TIME1;
@@ -554,14 +558,14 @@ public void testToString() {
     //-----------------------------------------------------------------------
     public void testWithChronology1() {
         Interval base = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS);
-        Interval test = base.withChronology(Chronology.getBuddhist());
-        assertEquals(new Interval(TEST_TIME1, TEST_TIME2, Chronology.getBuddhist()), test);
+        Interval test = base.withChronology(BuddhistChronology.getInstance());
+        assertEquals(new Interval(TEST_TIME1, TEST_TIME2, BuddhistChronology.getInstance()), test);
     }
 
     public void testWithChronology2() {
         Interval base = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS);
         Interval test = base.withChronology(null);
-        assertEquals(new Interval(TEST_TIME1, TEST_TIME2, Chronology.getISO()), test);
+        assertEquals(new Interval(TEST_TIME1, TEST_TIME2, ISOChronology.getInstance()), test);
     }
 
     public void testWithChronology3() {
diff --git a/JodaTime/src/test/org/joda/time/TestInterval_Constructors.java b/JodaTime/src/test/org/joda/time/TestInterval_Constructors.java
index 858371505..de600cbcb 100644
--- a/JodaTime/src/test/org/joda/time/TestInterval_Constructors.java
+++ b/JodaTime/src/test/org/joda/time/TestInterval_Constructors.java
@@ -18,13 +18,16 @@
 import java.util.Locale;
 import java.util.TimeZone;
 
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+import org.joda.time.chrono.BuddhistChronology;
+import org.joda.time.chrono.CopticChronology;
+import org.joda.time.chrono.GJChronology;
 import org.joda.time.chrono.ISOChronology;
 import org.joda.time.convert.ConverterManager;
 import org.joda.time.convert.IntervalConverter;
 
-import junit.framework.TestCase;
-import junit.framework.TestSuite;
-
 /**
  * This class is a JUnit test for Interval.
  *
@@ -105,7 +108,7 @@ public void testConstructor_long_long1() throws Throwable {
         Interval test = new Interval(dt1.getMillis(), dt2.getMillis());
         assertEquals(dt1.getMillis(), test.getStartMillis());
         assertEquals(dt2.getMillis(), test.getEndMillis());
-        assertEquals(Chronology.getISO(), test.getChronology());
+        assertEquals(ISOChronology.getInstance(), test.getChronology());
     }
 
     public void testConstructor_long_long2() throws Throwable {
@@ -113,7 +116,7 @@ public void testConstructor_long_long2() throws Throwable {
         Interval test = new Interval(dt1.getMillis(), dt1.getMillis());
         assertEquals(dt1.getMillis(), test.getStartMillis());
         assertEquals(dt1.getMillis(), test.getEndMillis());
-        assertEquals(Chronology.getISO(), test.getChronology());
+        assertEquals(ISOChronology.getInstance(), test.getChronology());
     }
 
     public void testConstructor_long_long3() throws Throwable {
@@ -129,10 +132,10 @@ public void testConstructor_long_long3() throws Throwable {
     public void testConstructor_long_long_Chronology1() throws Throwable {
         DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);
         DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);
-        Interval test = new Interval(dt1.getMillis(), dt2.getMillis(), Chronology.getGJ());
+        Interval test = new Interval(dt1.getMillis(), dt2.getMillis(), GJChronology.getInstance());
         assertEquals(dt1.getMillis(), test.getStartMillis());
         assertEquals(dt2.getMillis(), test.getEndMillis());
-        assertEquals(Chronology.getGJ(), test.getChronology());
+        assertEquals(GJChronology.getInstance(), test.getChronology());
     }
 
     public void testConstructor_long_long_Chronology2() throws Throwable {
@@ -141,7 +144,7 @@ public void testConstructor_long_long_Chronology2() throws Throwable {
         Interval test = new Interval(dt1.getMillis(), dt2.getMillis(), null);
         assertEquals(dt1.getMillis(), test.getStartMillis());
         assertEquals(dt2.getMillis(), test.getEndMillis());
-        assertEquals(Chronology.getISO(), test.getChronology());
+        assertEquals(ISOChronology.getInstance(), test.getChronology());
     }
 
     //-----------------------------------------------------------------------
@@ -198,21 +201,21 @@ public void testConstructor_RI_RI7() throws Throwable {
     }
 
     public void testConstructor_RI_RI8() throws Throwable {
-        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, Chronology.getGJ());
+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, GJChronology.getInstance());
         DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);
         Interval test = new Interval(dt1, dt2);
         assertEquals(dt1.getMillis(), test.getStartMillis());
         assertEquals(dt2.getMillis(), test.getEndMillis());
-        assertEquals(Chronology.getGJ(), test.getChronology());
+        assertEquals(GJChronology.getInstance(), test.getChronology());
     }
 
     public void testConstructor_RI_RI9() throws Throwable {
         DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);
-        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, Chronology.getGJ());
+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, GJChronology.getInstance());
         Interval test = new Interval(dt1, dt2);
         assertEquals(dt1.getMillis(), test.getStartMillis());
         assertEquals(dt2.getMillis(), test.getEndMillis());
-        assertEquals(Chronology.getISO(), test.getChronology());
+        assertEquals(ISOChronology.getInstance(), test.getChronology());
     }
 
     //-----------------------------------------------------------------------
@@ -242,12 +245,12 @@ public void testConstructor_RI_RP2() throws Throwable {
     }
 
     public void testConstructor_RI_RP3() throws Throwable {
-        DateTime dt = new DateTime(TEST_TIME_NOW, Chronology.getCopticUTC());
+        DateTime dt = new DateTime(TEST_TIME_NOW, CopticChronology.getInstanceUTC());
         Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0, PeriodType.standard());
         long result = TEST_TIME_NOW;
-        result = Chronology.getCopticUTC().months().add(result, 6);
-        result = Chronology.getCopticUTC().days().add(result, 3);
-        result = Chronology.getCopticUTC().hours().add(result, 1);
+        result = CopticChronology.getInstanceUTC().months().add(result, 6);
+        result = CopticChronology.getInstanceUTC().days().add(result, 3);
+        result = CopticChronology.getInstanceUTC().hours().add(result, 1);
         
         Interval test = new Interval(dt, dur);
         assertEquals(dt.getMillis(), test.getStartMillis());
@@ -316,9 +319,9 @@ public void testConstructor_RP_RI2() throws Throwable {
         Instant dt = new Instant(new DateTime(TEST_TIME_NOW));
         Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0);
         long result = TEST_TIME_NOW;
-        result = Chronology.getISOUTC().months().add(result, -6);
-        result = Chronology.getISOUTC().days().add(result, -3);
-        result = Chronology.getISOUTC().hours().add(result, -1);
+        result = ISOChronology.getInstanceUTC().months().add(result, -6);
+        result = ISOChronology.getInstanceUTC().days().add(result, -3);
+        result = ISOChronology.getInstanceUTC().hours().add(result, -1);
         
         Interval test = new Interval(dur, dt);
         assertEquals(result, test.getStartMillis());
@@ -326,12 +329,12 @@ public void testConstructor_RP_RI2() throws Throwable {
     }
 
     public void testConstructor_RP_RI3() throws Throwable {
-        DateTime dt = new DateTime(TEST_TIME_NOW, Chronology.getCopticUTC());
+        DateTime dt = new DateTime(TEST_TIME_NOW, CopticChronology.getInstanceUTC());
         Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0, PeriodType.standard());
         long result = TEST_TIME_NOW;
-        result = Chronology.getCopticUTC().months().add(result, -6);
-        result = Chronology.getCopticUTC().days().add(result, -3);
-        result = Chronology.getCopticUTC().hours().add(result, -1);
+        result = CopticChronology.getInstanceUTC().months().add(result, -6);
+        result = CopticChronology.getInstanceUTC().days().add(result, -3);
+        result = CopticChronology.getInstanceUTC().hours().add(result, -1);
         
         Interval test = new Interval(dur, dt);
         assertEquals(result, test.getStartMillis());
@@ -568,7 +571,7 @@ public Class getSupportedType() {
 
     class MockInterval implements ReadableInterval {
         public Chronology getChronology() {
-            return Chronology.getISO();
+            return ISOChronology.getInstance();
         }
         public long getStartMillis() {
             return 1234L;
@@ -635,10 +638,10 @@ public void testConstructor_Object_Chronology1() throws Throwable {
         DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);
         Interval base = new Interval(dt1, dt2);
         
-        Interval test = new Interval(base, Chronology.getBuddhist());
+        Interval test = new Interval(base, BuddhistChronology.getInstance());
         assertEquals(dt1.getMillis(), test.getStartMillis());
         assertEquals(dt2.getMillis(), test.getEndMillis());
-        assertEquals(Chronology.getBuddhist(), test.getChronology());
+        assertEquals(BuddhistChronology.getInstance(), test.getChronology());
     }
 
     public void testConstructor_Object_Chronology2() throws Throwable {
@@ -649,7 +652,7 @@ public void testConstructor_Object_Chronology2() throws Throwable {
         Interval test = new Interval(base, null);
         assertEquals(dt1.getMillis(), test.getStartMillis());
         assertEquals(dt2.getMillis(), test.getEndMillis());
-        assertEquals(Chronology.getISO(), test.getChronology());
+        assertEquals(ISOChronology.getInstance(), test.getChronology());
     }
 
 }
diff --git a/JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java b/JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java
index 55fd9a4a0..4c6a2f44d 100644
--- a/JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java
@@ -26,6 +26,9 @@
 import junit.framework.TestSuite;
 
 import org.joda.time.base.AbstractInterval;
+import org.joda.time.chrono.CopticChronology;
+import org.joda.time.chrono.GJChronology;
+import org.joda.time.chrono.ISOChronology;
 
 /**
  * This class is a Junit unit test for Instant.
@@ -38,7 +41,7 @@
 
     private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
     private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
-    private static final Chronology COPTIC_PARIS = Chronology.getCoptic(PARIS);
+    private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);
     
     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 
                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 
@@ -149,7 +152,7 @@ public void testEqualsHashCode() {
         assertEquals(false, test1.hashCode() == test3.hashCode());
         assertEquals(false, test2.hashCode() == test3.hashCode());
         
-        MutableInterval test4 = new MutableInterval(TEST_TIME1, TEST_TIME2, Chronology.getGJ());
+        MutableInterval test4 = new MutableInterval(TEST_TIME1, TEST_TIME2, GJChronology.getInstance());
         assertEquals(true, test4.equals(test4));
         assertEquals(false, test1.equals(test4));
         assertEquals(false, test2.equals(test4));
@@ -179,7 +182,7 @@ public MockInterval() {
             super();
         }
         public Chronology getChronology() {
-            return Chronology.getISO();
+            return ISOChronology.getInstance();
         }
         public long getStartMillis() {
             return TEST_TIME1;
diff --git a/JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java b/JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java
index 2392582fb..57a9bd3c8 100644
--- a/JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java
+++ b/JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java
@@ -18,13 +18,15 @@
 import java.util.Locale;
 import java.util.TimeZone;
 
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+import org.joda.time.chrono.BuddhistChronology;
+import org.joda.time.chrono.GJChronology;
 import org.joda.time.chrono.ISOChronology;
 import org.joda.time.convert.ConverterManager;
 import org.joda.time.convert.IntervalConverter;
 
-import junit.framework.TestCase;
-import junit.framework.TestSuite;
-
 /**
  * This class is a JUnit test for Interval.
  *
@@ -119,7 +121,7 @@ public void testConstructor_long_long1() throws Throwable {
         MutableInterval test = new MutableInterval(dt1.getMillis(), dt2.getMillis());
         assertEquals(dt1.getMillis(), test.getStartMillis());
         assertEquals(dt2.getMillis(), test.getEndMillis());
-        assertEquals(Chronology.getISO(), test.getChronology());
+        assertEquals(ISOChronology.getInstance(), test.getChronology());
     }
 
     public void testConstructor_long_long2() throws Throwable {
@@ -127,7 +129,7 @@ public void testConstructor_long_long2() throws Throwable {
         MutableInterval test = new MutableInterval(dt1.getMillis(), dt1.getMillis());
         assertEquals(dt1.getMillis(), test.getStartMillis());
         assertEquals(dt1.getMillis(), test.getEndMillis());
-        assertEquals(Chronology.getISO(), test.getChronology());
+        assertEquals(ISOChronology.getInstance(), test.getChronology());
     }
 
     public void testConstructor_long_long3() throws Throwable {
@@ -143,10 +145,10 @@ public void testConstructor_long_long3() throws Throwable {
     public void testConstructor_long_long_Chronology1() throws Throwable {
         DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);
         DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);
-        MutableInterval test = new MutableInterval(dt1.getMillis(), dt2.getMillis(), Chronology.getGJ());
+        MutableInterval test = new MutableInterval(dt1.getMillis(), dt2.getMillis(), GJChronology.getInstance());
         assertEquals(dt1.getMillis(), test.getStartMillis());
         assertEquals(dt2.getMillis(), test.getEndMillis());
-        assertEquals(Chronology.getGJ(), test.getChronology());
+        assertEquals(GJChronology.getInstance(), test.getChronology());
     }
 
     public void testConstructor_long_long_Chronology2() throws Throwable {
@@ -155,7 +157,7 @@ public void testConstructor_long_long_Chronology2() throws Throwable {
         MutableInterval test = new MutableInterval(dt1.getMillis(), dt2.getMillis(), null);
         assertEquals(dt1.getMillis(), test.getStartMillis());
         assertEquals(dt2.getMillis(), test.getEndMillis());
-        assertEquals(Chronology.getISO(), test.getChronology());
+        assertEquals(ISOChronology.getInstance(), test.getChronology());
     }
 
     //-----------------------------------------------------------------------
@@ -212,21 +214,21 @@ public void testConstructor_RI_RI7() throws Throwable {
     }
 
     public void testConstructor_RI_RI8() throws Throwable {
-        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, Chronology.getGJ());
+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, GJChronology.getInstance());
         DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);
         MutableInterval test = new MutableInterval(dt1, dt2);
         assertEquals(dt1.getMillis(), test.getStartMillis());
         assertEquals(dt2.getMillis(), test.getEndMillis());
-        assertEquals(Chronology.getGJ(), test.getChronology());
+        assertEquals(GJChronology.getInstance(), test.getChronology());
     }
 
     public void testConstructor_RI_RI9() throws Throwable {
         DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);
-        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, Chronology.getGJ());
+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, GJChronology.getInstance());
         MutableInterval test = new MutableInterval(dt1, dt2);
         assertEquals(dt1.getMillis(), test.getStartMillis());
         assertEquals(dt2.getMillis(), test.getEndMillis());
-        assertEquals(Chronology.getISO(), test.getChronology());
+        assertEquals(ISOChronology.getInstance(), test.getChronology());
     }
 
     //-----------------------------------------------------------------------
@@ -234,8 +236,8 @@ public void testConstructor_RI_RP1() throws Throwable {
         DateTime dt = new DateTime(TEST_TIME_NOW);
         Period dur = new Period(0, 6, 0, 0, 1, 0, 0, 0);
         long result = TEST_TIME_NOW;
-        result = Chronology.getISO().months().add(result, 6);
-        result = Chronology.getISO().hours().add(result, 1);
+        result = ISOChronology.getInstance().months().add(result, 6);
+        result = ISOChronology.getInstance().hours().add(result, 1);
         
         MutableInterval test = new MutableInterval(dt, dur);
         assertEquals(dt.getMillis(), test.getStartMillis());
@@ -246,9 +248,9 @@ public void testConstructor_RI_RP2() throws Throwable {
         Instant dt = new Instant(new DateTime(TEST_TIME_NOW));
         Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0);
         long result = TEST_TIME_NOW;
-        result = Chronology.getISOUTC().months().add(result, 6);
-        result = Chronology.getISOUTC().days().add(result, 3);
-        result = Chronology.getISOUTC().hours().add(result, 1);
+        result = ISOChronology.getInstanceUTC().months().add(result, 6);
+        result = ISOChronology.getInstanceUTC().days().add(result, 3);
+        result = ISOChronology.getInstanceUTC().hours().add(result, 1);
         
         MutableInterval test = new MutableInterval(dt, dur);
         assertEquals(dt.getMillis(), test.getStartMillis());
@@ -256,12 +258,12 @@ public void testConstructor_RI_RP2() throws Throwable {
     }
 
     public void testConstructor_RI_RP3() throws Throwable {
-        DateTime dt = new DateTime(TEST_TIME_NOW, Chronology.getISOUTC());
+        DateTime dt = new DateTime(TEST_TIME_NOW, ISOChronology.getInstanceUTC());
         Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0, PeriodType.standard());
         long result = TEST_TIME_NOW;
-        result = Chronology.getISOUTC().months().add(result, 6);
-        result = Chronology.getISOUTC().days().add(result, 3);
-        result = Chronology.getISOUTC().hours().add(result, 1);
+        result = ISOChronology.getInstanceUTC().months().add(result, 6);
+        result = ISOChronology.getInstanceUTC().days().add(result, 3);
+        result = ISOChronology.getInstanceUTC().hours().add(result, 1);
         
         MutableInterval test = new MutableInterval(dt, dur);
         assertEquals(dt.getMillis(), test.getStartMillis());
@@ -318,8 +320,8 @@ public void testConstructor_RP_RI1() throws Throwable {
         DateTime dt = new DateTime(TEST_TIME_NOW);
         Period dur = new Period(0, 6, 0, 0, 1, 0, 0, 0);
         long result = TEST_TIME_NOW;
-        result = Chronology.getISO().months().add(result, -6);
-        result = Chronology.getISO().hours().add(result, -1);
+        result = ISOChronology.getInstance().months().add(result, -6);
+        result = ISOChronology.getInstance().hours().add(result, -1);
         
         MutableInterval test = new MutableInterval(dur, dt);
         assertEquals(result, test.getStartMillis());
@@ -330,9 +332,9 @@ public void testConstructor_RP_RI2() throws Throwable {
         Instant dt = new Instant(new DateTime(TEST_TIME_NOW));
         Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0);
         long result = TEST_TIME_NOW;
-        result = Chronology.getISOUTC().months().add(result, -6);
-        result = Chronology.getISOUTC().days().add(result, -3);
-        result = Chronology.getISOUTC().hours().add(result, -1);
+        result = ISOChronology.getInstanceUTC().months().add(result, -6);
+        result = ISOChronology.getInstanceUTC().days().add(result, -3);
+        result = ISOChronology.getInstanceUTC().hours().add(result, -1);
         
         MutableInterval test = new MutableInterval(dur, dt);
         assertEquals(result, test.getStartMillis());
@@ -340,12 +342,12 @@ public void testConstructor_RP_RI2() throws Throwable {
     }
 
     public void testConstructor_RP_RI3() throws Throwable {
-        DateTime dt = new DateTime(TEST_TIME_NOW, Chronology.getISOUTC());
+        DateTime dt = new DateTime(TEST_TIME_NOW, ISOChronology.getInstanceUTC());
         Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0, PeriodType.standard());
         long result = TEST_TIME_NOW;
-        result = Chronology.getISOUTC().months().add(result, -6);
-        result = Chronology.getISOUTC().days().add(result, -3);
-        result = Chronology.getISOUTC().hours().add(result, -1);
+        result = ISOChronology.getInstanceUTC().months().add(result, -6);
+        result = ISOChronology.getInstanceUTC().days().add(result, -3);
+        result = ISOChronology.getInstanceUTC().hours().add(result, -1);
         
         MutableInterval test = new MutableInterval(dur, dt);
         assertEquals(result, test.getStartMillis());
@@ -582,7 +584,7 @@ public Class getSupportedType() {
 
     class MockInterval implements ReadableInterval {
         public Chronology getChronology() {
-            return Chronology.getISO();
+            return ISOChronology.getInstance();
         }
         public long getStartMillis() {
             return 1234L;
@@ -649,10 +651,10 @@ public void testConstructor_Object_Chronology1() throws Throwable {
         DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);
         Interval base = new Interval(dt1, dt2);
         
-        MutableInterval test = new MutableInterval(base, Chronology.getBuddhist());
+        MutableInterval test = new MutableInterval(base, BuddhistChronology.getInstance());
         assertEquals(dt1.getMillis(), test.getStartMillis());
         assertEquals(dt2.getMillis(), test.getEndMillis());
-        assertEquals(Chronology.getBuddhist(), test.getChronology());
+        assertEquals(BuddhistChronology.getInstance(), test.getChronology());
     }
 
     public void testConstructor_Object_Chronology2() throws Throwable {
@@ -663,7 +665,7 @@ public void testConstructor_Object_Chronology2() throws Throwable {
         MutableInterval test = new MutableInterval(base, null);
         assertEquals(dt1.getMillis(), test.getStartMillis());
         assertEquals(dt2.getMillis(), test.getEndMillis());
-        assertEquals(Chronology.getISO(), test.getChronology());
+        assertEquals(ISOChronology.getInstance(), test.getChronology());
     }
 
 }
diff --git a/JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java b/JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java
index 9925e614c..2ea700f96 100644
--- a/JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java
+++ b/JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java
@@ -22,6 +22,7 @@
 import junit.framework.TestSuite;
 
 import org.joda.time.base.AbstractInterval;
+import org.joda.time.chrono.ISOChronology;
 
 /**
  * This class is a Junit unit test for Instant.
@@ -174,7 +175,7 @@ public void testSetInterval_RInterval2() {
     
     class MockBadInterval extends AbstractInterval {
         public Chronology getChronology() {
-            return Chronology.getISO();
+            return ISOChronology.getInstance();
         }
         public long getStartMillis() {
             return TEST_TIME1 - 1;
diff --git a/JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java b/JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java
index 7ab2e4d56..b71ca885d 100644
--- a/JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java
+++ b/JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java
@@ -21,6 +21,9 @@
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
 
+import org.joda.time.chrono.CopticChronology;
+import org.joda.time.chrono.ISOChronology;
+
 /**
  * This class is a JUnit test for MutableDuration.
  *
@@ -270,7 +273,7 @@ public void testConstructor_long_Chronology1() throws Throwable {
                 5 * DateTimeConstants.MILLIS_PER_HOUR +
                 6 * DateTimeConstants.MILLIS_PER_MINUTE +
                 7 * DateTimeConstants.MILLIS_PER_SECOND + 8;
-        MutablePeriod test = new MutablePeriod(length, Chronology.getISO());
+        MutablePeriod test = new MutablePeriod(length, ISOChronology.getInstance());
         assertEquals(PeriodType.standard(), test.getPeriodType());
         assertEquals(0, test.getYears());
         assertEquals(0, test.getMonths());
@@ -287,7 +290,7 @@ public void testConstructor_long_Chronology2() throws Throwable {
                 5 * DateTimeConstants.MILLIS_PER_HOUR +
                 6 * DateTimeConstants.MILLIS_PER_MINUTE +
                 7 * DateTimeConstants.MILLIS_PER_SECOND + 8;
-        MutablePeriod test = new MutablePeriod(length, Chronology.getISOUTC());
+        MutablePeriod test = new MutablePeriod(length, ISOChronology.getInstanceUTC());
         assertEquals(PeriodType.standard(), test.getPeriodType());
         assertEquals(0, test.getYears());
         assertEquals(0, test.getMonths());
@@ -322,7 +325,7 @@ public void testConstructor_long_PeriodType_Chronology1() throws Throwable {
                 5 * DateTimeConstants.MILLIS_PER_HOUR +
                 6 * DateTimeConstants.MILLIS_PER_MINUTE +
                 7 * DateTimeConstants.MILLIS_PER_SECOND + 8;
-        MutablePeriod test = new MutablePeriod(length, PeriodType.time().withMillisRemoved(), Chronology.getISO());
+        MutablePeriod test = new MutablePeriod(length, PeriodType.time().withMillisRemoved(), ISOChronology.getInstance());
         assertEquals(PeriodType.time().withMillisRemoved(), test.getPeriodType());
         assertEquals(0, test.getYears());
         assertEquals(0, test.getMonths());
@@ -339,7 +342,7 @@ public void testConstructor_long_PeriodType_Chronology2() throws Throwable {
                 5 * DateTimeConstants.MILLIS_PER_HOUR +
                 6 * DateTimeConstants.MILLIS_PER_MINUTE +
                 7 * DateTimeConstants.MILLIS_PER_SECOND + 8;
-        MutablePeriod test = new MutablePeriod(length, PeriodType.standard(), Chronology.getISOUTC());
+        MutablePeriod test = new MutablePeriod(length, PeriodType.standard(), ISOChronology.getInstanceUTC());
         assertEquals(PeriodType.standard(), test.getPeriodType());
         assertEquals(0, test.getYears());
         assertEquals(0, test.getMonths());
@@ -535,9 +538,9 @@ public void testConstructor_long_long_PeriodType3() throws Throwable {
 
     //-----------------------------------------------------------------------
     public void testConstructor_long_long_Chronology1() throws Throwable {
-        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, Chronology.getCoptic());
-        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, Chronology.getCoptic());
-        MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), Chronology.getCoptic());
+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance());
+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance());
+        MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), CopticChronology.getInstance());
         assertEquals(PeriodType.standard(), test.getPeriodType());
         assertEquals(1, test.getYears());
         assertEquals(1, test.getMonths());
@@ -566,9 +569,9 @@ public void testConstructor_long_long_Chronology2() throws Throwable {
 
     //-----------------------------------------------------------------------
     public void testConstructor_long_long_PeriodType_Chronology1() throws Throwable {
-        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, Chronology.getCoptic());
-        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, Chronology.getCoptic());
-        MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), (PeriodType) null, Chronology.getCoptic());
+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance());
+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance());
+        MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), (PeriodType) null, CopticChronology.getInstance());
         assertEquals(PeriodType.standard(), test.getPeriodType());
         assertEquals(1, test.getYears());
         assertEquals(1, test.getMonths());
@@ -931,7 +934,7 @@ public void testConstructor_Object_Chronology1() throws Throwable {
             5L * DateTimeConstants.MILLIS_PER_HOUR +
             6L * DateTimeConstants.MILLIS_PER_MINUTE +
             7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
-        MutablePeriod test = new MutablePeriod(new Duration(length), Chronology.getISO());
+        MutablePeriod test = new MutablePeriod(new Duration(length), ISOChronology.getInstance());
         assertEquals(PeriodType.standard(), test.getPeriodType());
         assertEquals(0, test.getYears());  // (4 + (3 * 7) + (2 * 30) + 365) == 450
         assertEquals(0, test.getMonths());
@@ -949,7 +952,7 @@ public void testConstructor_Object_Chronology2() throws Throwable {
             5L * DateTimeConstants.MILLIS_PER_HOUR +
             6L * DateTimeConstants.MILLIS_PER_MINUTE +
             7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
-        MutablePeriod test = new MutablePeriod(new Duration(length), Chronology.getISOUTC());
+        MutablePeriod test = new MutablePeriod(new Duration(length), ISOChronology.getInstanceUTC());
         assertEquals(PeriodType.standard(), test.getPeriodType());
         assertEquals(0, test.getYears());  // (4 + (3 * 7) + (2 * 30) + 365) == 450
         assertEquals(0, test.getMonths());
diff --git a/JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java b/JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java
index ef5c31341..5c42f5013 100644
--- a/JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java
+++ b/JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java
@@ -21,6 +21,8 @@
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
 
+import org.joda.time.chrono.ISOChronology;
+
 /**
  * This class is a JUnit test for MutableDuration.
  *
@@ -1134,7 +1136,7 @@ public void testAdd_long3() {
     //-----------------------------------------------------------------------
     public void testAdd_long_Chronology1() {
         MutablePeriod test = new MutablePeriod(100L);
-        test.add(100L, Chronology.getISO());
+        test.add(100L, ISOChronology.getInstance());
         assertEquals(0, test.getYears());
         assertEquals(0, test.getMonths());
         assertEquals(0, test.getWeeks());
@@ -1152,7 +1154,7 @@ public void testAdd_long_Chronology2() {
             5L * DateTimeConstants.MILLIS_PER_HOUR +
             6L * DateTimeConstants.MILLIS_PER_MINUTE +
             7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
-        test.add(ms, Chronology.getISO());
+        test.add(ms, ISOChronology.getInstance());
         // only time fields are precise
         assertEquals(0, test.getYears());  // (4 + (3 * 7) + (2 * 30) + 365) == 450 days
         assertEquals(0, test.getMonths());
@@ -1171,7 +1173,7 @@ public void testAdd_long_Chronology3() {
             5L * DateTimeConstants.MILLIS_PER_HOUR +
             6L * DateTimeConstants.MILLIS_PER_MINUTE +
             7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
-        test.add(ms, Chronology.getISOUTC());
+        test.add(ms, ISOChronology.getInstanceUTC());
         // UTC, so weeks and day also precise
         assertEquals(0, test.getYears());  // (4 + (3 * 7) + (2 * 30) + 365) == 450 days
         assertEquals(0, test.getMonths());
diff --git a/JodaTime/src/test/org/joda/time/TestPartial_Basics.java b/JodaTime/src/test/org/joda/time/TestPartial_Basics.java
index c024ca3dd..00877b13f 100644
--- a/JodaTime/src/test/org/joda/time/TestPartial_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestPartial_Basics.java
@@ -26,6 +26,9 @@
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
 
+import org.joda.time.chrono.BuddhistChronology;
+import org.joda.time.chrono.CopticChronology;
+import org.joda.time.chrono.ISOChronology;
 import org.joda.time.format.DateTimeFormat;
 import org.joda.time.format.DateTimeFormatter;
 
@@ -40,18 +43,18 @@
     private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
     private static final DateTimeZone TOKYO = DateTimeZone.forID("Asia/Tokyo");
     private static final int OFFSET = 1;
-    private static final Chronology COPTIC_PARIS = Chronology.getCoptic(PARIS);
-    private static final Chronology COPTIC_LONDON = Chronology.getCoptic(LONDON);
-    private static final Chronology COPTIC_TOKYO = Chronology.getCoptic(TOKYO);
-    private static final Chronology COPTIC_UTC = Chronology.getCopticUTC();
-    private static final Chronology ISO_PARIS = Chronology.getISO(PARIS);
-    private static final Chronology ISO_LONDON = Chronology.getISO(LONDON);
-    private static final Chronology ISO_TOKYO = Chronology.getISO(TOKYO);
-    private static final Chronology ISO_UTC = Chronology.getISOUTC();
-    private static final Chronology BUDDHIST_PARIS = Chronology.getBuddhist(PARIS);
-    private static final Chronology BUDDHIST_LONDON = Chronology.getBuddhist(LONDON);
-    private static final Chronology BUDDHIST_TOKYO = Chronology.getBuddhist(TOKYO);
-    private static final Chronology BUDDHIST_UTC = Chronology.getBuddhistUTC();
+    private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);
+    private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);
+    private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);
+    private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();
+    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);
+    private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);
+    private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);
+    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
+    private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);
+    private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);
+    private static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);
+    private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();
     
     private long TEST_TIME_NOW =
             10L * DateTimeConstants.MILLIS_PER_HOUR
@@ -141,8 +144,8 @@ public void testGetFieldTypes() {
 
     public void testGetField() {
         Partial test = createHourMinPartial(COPTIC_PARIS);
-        assertSame(Chronology.getCopticUTC().hourOfDay(), test.getField(0));
-        assertSame(Chronology.getCopticUTC().minuteOfHour(), test.getField(1));
+        assertSame(CopticChronology.getInstanceUTC().hourOfDay(), test.getField(0));
+        assertSame(CopticChronology.getInstanceUTC().minuteOfHour(), test.getField(1));
         try {
             test.getField(-1);
         } catch (IndexOutOfBoundsException ex) {}
@@ -155,8 +158,8 @@ public void testGetFields() {
         Partial test = createHourMinPartial(COPTIC_PARIS);
         DateTimeField[] fields = test.getFields();
         assertEquals(2, fields.length);
-        assertSame(Chronology.getCopticUTC().hourOfDay(), fields[0]);
-        assertSame(Chronology.getCopticUTC().minuteOfHour(), fields[1]);
+        assertSame(CopticChronology.getInstanceUTC().hourOfDay(), fields[0]);
+        assertSame(CopticChronology.getInstanceUTC().minuteOfHour(), fields[1]);
         assertNotSame(test.getFields(), test.getFields());
     }
 
diff --git a/JodaTime/src/test/org/joda/time/TestPartial_Match.java b/JodaTime/src/test/org/joda/time/TestPartial_Match.java
index f48f8e420..0c4036e67 100644
--- a/JodaTime/src/test/org/joda/time/TestPartial_Match.java
+++ b/JodaTime/src/test/org/joda/time/TestPartial_Match.java
@@ -18,6 +18,10 @@
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
 
+import org.joda.time.chrono.BuddhistChronology;
+import org.joda.time.chrono.CopticChronology;
+import org.joda.time.chrono.ISOChronology;
+
 /**
  * This class is a Junit unit test for Partial.
  *
@@ -29,18 +33,18 @@
     private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
     private static final DateTimeZone TOKYO = DateTimeZone.forID("Asia/Tokyo");
     private static final int OFFSET = 1;
-    private static final Chronology COPTIC_PARIS = Chronology.getCoptic(PARIS);
-    private static final Chronology COPTIC_LONDON = Chronology.getCoptic(LONDON);
-    private static final Chronology COPTIC_TOKYO = Chronology.getCoptic(TOKYO);
-    private static final Chronology COPTIC_UTC = Chronology.getCopticUTC();
-    private static final Chronology ISO_PARIS = Chronology.getISO(PARIS);
-    private static final Chronology ISO_LONDON = Chronology.getISO(LONDON);
-    private static final Chronology ISO_TOKYO = Chronology.getISO(TOKYO);
-    private static final Chronology ISO_UTC = Chronology.getISOUTC();
-    private static final Chronology BUDDHIST_PARIS = Chronology.getBuddhist(PARIS);
-    private static final Chronology BUDDHIST_LONDON = Chronology.getBuddhist(LONDON);
-    private static final Chronology BUDDHIST_TOKYO = Chronology.getBuddhist(TOKYO);
-    private static final Chronology BUDDHIST_UTC = Chronology.getBuddhistUTC();
+    private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);
+    private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);
+    private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);
+    private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();
+    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);
+    private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);
+    private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);
+    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
+    private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);
+    private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);
+    private static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);
+    private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();
     
     private long TEST_TIME_NOW =
             10L * DateTimeConstants.MILLIS_PER_HOUR
diff --git a/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java b/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java
index 52eb7953e..56e1edfd0 100644
--- a/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java
+++ b/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java
@@ -21,6 +21,9 @@
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
 
+import org.joda.time.chrono.CopticChronology;
+import org.joda.time.chrono.ISOChronology;
+
 /**
  * This class is a JUnit test for Duration.
  *
@@ -237,7 +240,7 @@ public void testConstructor_long_Chronology1() throws Throwable {
                 5 * DateTimeConstants.MILLIS_PER_HOUR +
                 6 * DateTimeConstants.MILLIS_PER_MINUTE +
                 7 * DateTimeConstants.MILLIS_PER_SECOND + 8;
-        Period test = new Period(length, Chronology.getISO());
+        Period test = new Period(length, ISOChronology.getInstance());
         assertEquals(PeriodType.standard(), test.getPeriodType());
         assertEquals(0, test.getYears());
         assertEquals(0, test.getMonths());
@@ -254,7 +257,7 @@ public void testConstructor_long_Chronology2() throws Throwable {
                 5 * DateTimeConstants.MILLIS_PER_HOUR +
                 6 * DateTimeConstants.MILLIS_PER_MINUTE +
                 7 * DateTimeConstants.MILLIS_PER_SECOND + 8;
-        Period test = new Period(length, Chronology.getISOUTC());
+        Period test = new Period(length, ISOChronology.getInstanceUTC());
         assertEquals(PeriodType.standard(), test.getPeriodType());
         assertEquals(0, test.getYears());
         assertEquals(0, test.getMonths());
@@ -289,7 +292,7 @@ public void testConstructor_long_PeriodType_Chronology1() throws Throwable {
                 5 * DateTimeConstants.MILLIS_PER_HOUR +
                 6 * DateTimeConstants.MILLIS_PER_MINUTE +
                 7 * DateTimeConstants.MILLIS_PER_SECOND + 8;
-        Period test = new Period(length, PeriodType.time().withMillisRemoved(), Chronology.getISO());
+        Period test = new Period(length, PeriodType.time().withMillisRemoved(), ISOChronology.getInstance());
         assertEquals(PeriodType.time().withMillisRemoved(), test.getPeriodType());
         assertEquals(0, test.getYears());
         assertEquals(0, test.getMonths());
@@ -306,7 +309,7 @@ public void testConstructor_long_PeriodType_Chronology2() throws Throwable {
                 5 * DateTimeConstants.MILLIS_PER_HOUR +
                 6 * DateTimeConstants.MILLIS_PER_MINUTE +
                 7 * DateTimeConstants.MILLIS_PER_SECOND + 8;
-        Period test = new Period(length, PeriodType.standard(), Chronology.getISOUTC());
+        Period test = new Period(length, PeriodType.standard(), ISOChronology.getInstanceUTC());
         assertEquals(PeriodType.standard(), test.getPeriodType());
         assertEquals(0, test.getYears());
         assertEquals(0, test.getMonths());
@@ -518,9 +521,9 @@ public void testToPeriod_PeriodType3() {
 
     //-----------------------------------------------------------------------
     public void testConstructor_long_long_Chronology1() throws Throwable {
-        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, Chronology.getCoptic());
-        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, Chronology.getCoptic());
-        Period test = new Period(dt1.getMillis(), dt2.getMillis(), Chronology.getCoptic());
+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance());
+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance());
+        Period test = new Period(dt1.getMillis(), dt2.getMillis(), CopticChronology.getInstance());
         assertEquals(PeriodType.standard(), test.getPeriodType());
         assertEquals(1, test.getYears());
         assertEquals(1, test.getMonths());
@@ -549,9 +552,9 @@ public void testConstructor_long_long_Chronology2() throws Throwable {
 
     //-----------------------------------------------------------------------
     public void testConstructor_long_long_PeriodType_Chronology1() throws Throwable {
-        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, Chronology.getCoptic());
-        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, Chronology.getCoptic());
-        Period test = new Period(dt1.getMillis(), dt2.getMillis(), (PeriodType) null, Chronology.getCoptic());
+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance());
+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance());
+        Period test = new Period(dt1.getMillis(), dt2.getMillis(), (PeriodType) null, CopticChronology.getInstance());
         assertEquals(PeriodType.standard(), test.getPeriodType());
         assertEquals(1, test.getYears());
         assertEquals(1, test.getMonths());
diff --git a/JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java b/JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java
index 1cd78782b..ebc09d9a0 100644
--- a/JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java
@@ -27,7 +27,9 @@
 import junit.framework.TestSuite;
 
 import org.joda.time.chrono.BuddhistChronology;
+import org.joda.time.chrono.CopticChronology;
 import org.joda.time.chrono.GregorianChronology;
+import org.joda.time.chrono.ISOChronology;
 import org.joda.time.format.DateTimeFormat;
 import org.joda.time.format.DateTimeFormatter;
 
@@ -42,18 +44,18 @@
     private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
     private static final DateTimeZone TOKYO = DateTimeZone.forID("Asia/Tokyo");
     private static final int OFFSET = 1;
-    private static final Chronology COPTIC_PARIS = Chronology.getCoptic(PARIS);
-    private static final Chronology COPTIC_LONDON = Chronology.getCoptic(LONDON);
-    private static final Chronology COPTIC_TOKYO = Chronology.getCoptic(TOKYO);
-    private static final Chronology COPTIC_UTC = Chronology.getCopticUTC();
-    private static final Chronology ISO_PARIS = Chronology.getISO(PARIS);
-    private static final Chronology ISO_LONDON = Chronology.getISO(LONDON);
-    private static final Chronology ISO_TOKYO = Chronology.getISO(TOKYO);
-    private static final Chronology ISO_UTC = Chronology.getISOUTC();
-    private static final Chronology BUDDHIST_PARIS = Chronology.getBuddhist(PARIS);
-    private static final Chronology BUDDHIST_LONDON = Chronology.getBuddhist(LONDON);
-    private static final Chronology BUDDHIST_TOKYO = Chronology.getBuddhist(TOKYO);
-    private static final Chronology BUDDHIST_UTC = Chronology.getBuddhistUTC();
+    private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);
+    private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);
+    private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);
+    private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();
+    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);
+    private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);
+    private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);
+    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
+    private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);
+    private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);
+    private static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);
+    private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();
     
     private long TEST_TIME_NOW =
             10L * DateTimeConstants.MILLIS_PER_HOUR
@@ -148,10 +150,10 @@ public void testGetFieldTypes() {
 
     public void testGetField() {
         TimeOfDay test = new TimeOfDay(COPTIC_PARIS);
-        assertSame(Chronology.getCopticUTC().hourOfDay(), test.getField(0));
-        assertSame(Chronology.getCopticUTC().minuteOfHour(), test.getField(1));
-        assertSame(Chronology.getCopticUTC().secondOfMinute(), test.getField(2));
-        assertSame(Chronology.getCopticUTC().millisOfSecond(), test.getField(3));
+        assertSame(CopticChronology.getInstanceUTC().hourOfDay(), test.getField(0));
+        assertSame(CopticChronology.getInstanceUTC().minuteOfHour(), test.getField(1));
+        assertSame(CopticChronology.getInstanceUTC().secondOfMinute(), test.getField(2));
+        assertSame(CopticChronology.getInstanceUTC().millisOfSecond(), test.getField(3));
         try {
             test.getField(-1);
         } catch (IndexOutOfBoundsException ex) {}
@@ -163,10 +165,10 @@ public void testGetField() {
     public void testGetFields() {
         TimeOfDay test = new TimeOfDay(COPTIC_PARIS);
         DateTimeField[] fields = test.getFields();
-        assertSame(Chronology.getCopticUTC().hourOfDay(), fields[0]);
-        assertSame(Chronology.getCopticUTC().minuteOfHour(), fields[1]);
-        assertSame(Chronology.getCopticUTC().secondOfMinute(), fields[2]);
-        assertSame(Chronology.getCopticUTC().millisOfSecond(), fields[3]);
+        assertSame(CopticChronology.getInstanceUTC().hourOfDay(), fields[0]);
+        assertSame(CopticChronology.getInstanceUTC().minuteOfHour(), fields[1]);
+        assertSame(CopticChronology.getInstanceUTC().secondOfMinute(), fields[2]);
+        assertSame(CopticChronology.getInstanceUTC().millisOfSecond(), fields[3]);
         assertNotSame(test.getFields(), test.getFields());
     }
 
@@ -229,14 +231,14 @@ public void testEqualsHashCode() {
 
     class MockInstant extends MockPartial {
         public Chronology getChronology() {
-            return Chronology.getCopticUTC();
+            return CopticChronology.getInstanceUTC();
         }
         public DateTimeField[] getFields() {
             return new DateTimeField[] {
-                Chronology.getCopticUTC().hourOfDay(),
-                Chronology.getCopticUTC().minuteOfHour(),
-                Chronology.getCopticUTC().secondOfMinute(),
-                Chronology.getCopticUTC().millisOfSecond(),
+                CopticChronology.getInstanceUTC().hourOfDay(),
+                CopticChronology.getInstanceUTC().minuteOfHour(),
+                CopticChronology.getInstanceUTC().secondOfMinute(),
+                CopticChronology.getInstanceUTC().millisOfSecond(),
             };
         }
         public int[] getValues() {
diff --git a/JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java b/JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java
index d1efd023e..810ed526e 100644
--- a/JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java
+++ b/JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java
@@ -20,6 +20,7 @@
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
 
+import org.joda.time.chrono.CopticChronology;
 import org.joda.time.chrono.ISOChronology;
 import org.joda.time.chrono.JulianChronology;
 
@@ -297,9 +298,9 @@ public void testConstructor_nullObject() throws Throwable {
      * Test constructor (Object)
      */
     public void testConstructor_todObject() throws Throwable {
-        TimeOfDay base = new TimeOfDay(10, 20, 30, 40, Chronology.getCoptic(PARIS));
+        TimeOfDay base = new TimeOfDay(10, 20, 30, 40, CopticChronology.getInstance(PARIS));
         TimeOfDay test = new TimeOfDay(base);
-        assertEquals(Chronology.getCopticUTC(), test.getChronology());
+        assertEquals(CopticChronology.getInstanceUTC(), test.getChronology());
         assertEquals(10, test.getHourOfDay());
         assertEquals(20, test.getMinuteOfHour());
         assertEquals(30, test.getSecondOfMinute());
diff --git a/JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java b/JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java
index 2f8b872a9..a2f38c8de 100644
--- a/JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java
@@ -27,7 +27,9 @@
 import junit.framework.TestSuite;
 
 import org.joda.time.chrono.BuddhistChronology;
+import org.joda.time.chrono.CopticChronology;
 import org.joda.time.chrono.GregorianChronology;
+import org.joda.time.chrono.ISOChronology;
 import org.joda.time.format.DateTimeFormat;
 import org.joda.time.format.DateTimeFormatter;
 
@@ -42,18 +44,18 @@
     private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
     private static final DateTimeZone TOKYO = DateTimeZone.forID("Asia/Tokyo");
     private static final int OFFSET = 1;
-    private static final Chronology COPTIC_PARIS = Chronology.getCoptic(PARIS);
-    private static final Chronology COPTIC_LONDON = Chronology.getCoptic(LONDON);
-    private static final Chronology COPTIC_TOKYO = Chronology.getCoptic(TOKYO);
-    private static final Chronology COPTIC_UTC = Chronology.getCopticUTC();
-    private static final Chronology ISO_PARIS = Chronology.getISO(PARIS);
-    private static final Chronology ISO_LONDON = Chronology.getISO(LONDON);
-    private static final Chronology ISO_TOKYO = Chronology.getISO(TOKYO);
-    private static final Chronology ISO_UTC = Chronology.getISOUTC();
-    private static final Chronology BUDDHIST_PARIS = Chronology.getBuddhist(PARIS);
-    private static final Chronology BUDDHIST_LONDON = Chronology.getBuddhist(LONDON);
-    private static final Chronology BUDDHIST_TOKYO = Chronology.getBuddhist(TOKYO);
-    private static final Chronology BUDDHIST_UTC = Chronology.getBuddhistUTC();
+    private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);
+    private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);
+    private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);
+    private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();
+    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);
+    private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);
+    private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);
+    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
+    private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);
+    private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);
+    private static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);
+    private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();
     
     private long TEST_TIME_NOW =
             (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
diff --git a/JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java b/JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java
index 22cf5c34e..06a70d36c 100644
--- a/JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java
+++ b/JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java
@@ -20,6 +20,11 @@
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
 
+import org.joda.time.chrono.BuddhistChronology;
+import org.joda.time.chrono.CopticChronology;
+import org.joda.time.chrono.GregorianChronology;
+import org.joda.time.chrono.ISOChronology;
+
 /**
  * This class is a Junit unit test for YearMonthDay.
  *
@@ -29,11 +34,11 @@
 
     private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
     private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
-    private static final Chronology COPTIC_UTC = Chronology.getCopticUTC();
-    private static final Chronology ISO_UTC = Chronology.getISOUTC();
-    private static final Chronology BUDDHIST_UTC = Chronology.getBuddhistUTC();
-    private static final Chronology GREGORIAN_UTC = Chronology.getGregorianUTC();
-    private static final Chronology GREGORIAN_PARIS = Chronology.getGregorian(PARIS);
+    private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();
+    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
+    private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();
+    private static final Chronology GREGORIAN_UTC = GregorianChronology.getInstanceUTC();
+    private static final Chronology GREGORIAN_PARIS = GregorianChronology.getInstance(PARIS);
     
     private long TEST_TIME_NOW =
             (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
diff --git a/JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java b/JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java
index fd90da876..8b10a6009 100644
--- a/JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java
+++ b/JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java
@@ -41,11 +41,11 @@
     private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
     private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
     private static final DateTimeZone TOKYO = DateTimeZone.forID("Asia/Tokyo");
-    private static final Chronology BUDDHIST_UTC = Chronology.getBuddhistUTC();
-    private static final Chronology COPTIC_UTC = Chronology.getCopticUTC();
-    private static final Chronology JULIAN_UTC = Chronology.getJulianUTC();
-    private static final Chronology GJ_UTC = Chronology.getGJUTC();
-    private static final Chronology ISO_UTC = Chronology.getISOUTC();
+    private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();
+    private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();
+    private static final Chronology JULIAN_UTC = JulianChronology.getInstanceUTC();
+    private static final Chronology GJ_UTC = GJChronology.getInstanceUTC();
+    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
 
     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 
                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 
diff --git a/JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java b/JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java
index 5426445ab..45a87887a 100644
--- a/JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java
+++ b/JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java
@@ -40,9 +40,9 @@
     private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
     private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
     private static final DateTimeZone TOKYO = DateTimeZone.forID("Asia/Tokyo");
-    private static final Chronology COPTIC_UTC = Chronology.getCopticUTC();
-    private static final Chronology JULIAN_UTC = Chronology.getJulianUTC();
-    private static final Chronology ISO_UTC = Chronology.getISOUTC();
+    private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();
+    private static final Chronology JULIAN_UTC = JulianChronology.getInstanceUTC();
+    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
 
     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 
                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 
diff --git a/JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java b/JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java
index 5b1a4890e..373f0c2aa 100644
--- a/JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java
+++ b/JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java
@@ -259,7 +259,7 @@ public void testTimeFields() {
     public void testMaximumValue() {
         YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1);
         DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1);
-        Chronology chrono = Chronology.getGregorian();
+        Chronology chrono = GregorianChronology.getInstance();
         assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1));
         assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis()));
     }
diff --git a/JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java b/JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java
index 631a40dae..1d4fd1a57 100644
--- a/JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java
+++ b/JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java
@@ -171,8 +171,8 @@ public void testGetPartialValues() throws Exception {
         GregorianCalendar cal = new GregorianCalendar();
         cal.setTime(new Date(12345678L));
         TimeOfDay tod = new TimeOfDay();
-        int[] expected = Chronology.getISO().get(tod, 12345678L);
-        int[] actual = CalendarConverter.INSTANCE.getPartialValues(tod, cal, Chronology.getISO());
+        int[] expected = ISOChronology.getInstance().get(tod, 12345678L);
+        int[] actual = CalendarConverter.INSTANCE.getPartialValues(tod, cal, ISOChronology.getInstance());
         assertEquals(true, Arrays.equals(expected, actual));
     }
 
diff --git a/JodaTime/src/test/org/joda/time/convert/TestDateConverter.java b/JodaTime/src/test/org/joda/time/convert/TestDateConverter.java
index 15a9cf425..acc9f2e63 100644
--- a/JodaTime/src/test/org/joda/time/convert/TestDateConverter.java
+++ b/JodaTime/src/test/org/joda/time/convert/TestDateConverter.java
@@ -27,6 +27,7 @@
 import org.joda.time.Chronology;
 import org.joda.time.DateTimeZone;
 import org.joda.time.TimeOfDay;
+import org.joda.time.chrono.CopticChronology;
 import org.joda.time.chrono.ISOChronology;
 import org.joda.time.chrono.JulianChronology;
 
@@ -104,8 +105,8 @@ public void testGetChronology_Object_Chronology() throws Exception {
     //-----------------------------------------------------------------------
     public void testGetPartialValues() throws Exception {
         TimeOfDay tod = new TimeOfDay();
-        int[] expected = Chronology.getCoptic().get(tod, 12345678L);
-        int[] actual = DateConverter.INSTANCE.getPartialValues(tod, new Date(12345678L), Chronology.getCoptic());
+        int[] expected = CopticChronology.getInstance().get(tod, 12345678L);
+        int[] actual = DateConverter.INSTANCE.getPartialValues(tod, new Date(12345678L), CopticChronology.getInstance());
         assertEquals(true, Arrays.equals(expected, actual));
     }
 
diff --git a/JodaTime/src/test/org/joda/time/convert/TestLongConverter.java b/JodaTime/src/test/org/joda/time/convert/TestLongConverter.java
index 661192af0..ad45b1854 100644
--- a/JodaTime/src/test/org/joda/time/convert/TestLongConverter.java
+++ b/JodaTime/src/test/org/joda/time/convert/TestLongConverter.java
@@ -103,8 +103,8 @@ public void testGetChronology_Object_Chronology() throws Exception {
     //-----------------------------------------------------------------------
     public void testGetPartialValues() throws Exception {
         TimeOfDay tod = new TimeOfDay();
-        int[] expected = Chronology.getISO().get(tod, 12345678L);
-        int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), Chronology.getISO());
+        int[] expected = ISOChronology.getInstance().get(tod, 12345678L);
+        int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());
         assertEquals(true, Arrays.equals(expected, actual));
     }
 
diff --git a/JodaTime/src/test/org/joda/time/convert/TestNullConverter.java b/JodaTime/src/test/org/joda/time/convert/TestNullConverter.java
index d7dea3d4c..26373c0ac 100644
--- a/JodaTime/src/test/org/joda/time/convert/TestNullConverter.java
+++ b/JodaTime/src/test/org/joda/time/convert/TestNullConverter.java
@@ -33,6 +33,8 @@
 import org.joda.time.MutablePeriod;
 import org.joda.time.PeriodType;
 import org.joda.time.TimeOfDay;
+import org.joda.time.chrono.CopticChronology;
+import org.joda.time.chrono.GJChronology;
 import org.joda.time.chrono.ISOChronology;
 import org.joda.time.chrono.JulianChronology;
 
@@ -139,7 +141,7 @@ public void testGetChronology_Object_Chronology() throws Exception {
     public void testGetPartialValues() throws Exception {
         TimeOfDay tod = new TimeOfDay();
         int[] expected = new int[] {10 + 1, 20, 30, 40}; // now
-        int[] actual = NullConverter.INSTANCE.getPartialValues(tod, null, Chronology.getISO());
+        int[] actual = NullConverter.INSTANCE.getPartialValues(tod, null, ISOChronology.getInstance());
         assertEquals(true, Arrays.equals(expected, actual));
     }
 
@@ -166,19 +168,19 @@ public void testIsReadableInterval_Object_Chronology() throws Exception {
     }
 
     public void testSetInto_Object_Chronology1() throws Exception {
-        MutableInterval m = new MutableInterval(1000L, 2000L, Chronology.getGJ());
+        MutableInterval m = new MutableInterval(1000L, 2000L, GJChronology.getInstance());
         NullConverter.INSTANCE.setInto(m, null, null);
         assertEquals(TEST_TIME_NOW, m.getStartMillis());
         assertEquals(TEST_TIME_NOW, m.getEndMillis());
-        assertEquals(Chronology.getISO(), m.getChronology());
+        assertEquals(ISOChronology.getInstance(), m.getChronology());
     }
 
     public void testSetInto_Object_Chronology2() throws Exception {
-        MutableInterval m = new MutableInterval(1000L, 2000L, Chronology.getGJ());
-        NullConverter.INSTANCE.setInto(m, null, Chronology.getCoptic());
+        MutableInterval m = new MutableInterval(1000L, 2000L, GJChronology.getInstance());
+        NullConverter.INSTANCE.setInto(m, null, CopticChronology.getInstance());
         assertEquals(TEST_TIME_NOW, m.getStartMillis());
         assertEquals(TEST_TIME_NOW, m.getEndMillis());
-        assertEquals(Chronology.getCoptic(), m.getChronology());
+        assertEquals(CopticChronology.getInstance(), m.getChronology());
     }
 
     //-----------------------------------------------------------------------
diff --git a/JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java b/JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java
index 66b6ca06b..d3860ec80 100644
--- a/JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java
+++ b/JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java
@@ -134,8 +134,8 @@ public void testGetChronology_Object_Chronology() throws Exception {
     //-----------------------------------------------------------------------
     public void testGetPartialValues() throws Exception {
         TimeOfDay tod = new TimeOfDay();
-        int[] expected = Chronology.getISO().get(tod, 12345678L);
-        int[] actual = ReadableInstantConverter.INSTANCE.getPartialValues(tod, new Instant(12345678L), Chronology.getISO());
+        int[] expected = ISOChronology.getInstance().get(tod, 12345678L);
+        int[] actual = ReadableInstantConverter.INSTANCE.getPartialValues(tod, new Instant(12345678L), ISOChronology.getInstance());
         assertEquals(true, Arrays.equals(expected, actual));
     }
 
diff --git a/JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java b/JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java
index 49a756940..e650ff6a1 100644
--- a/JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java
+++ b/JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java
@@ -24,11 +24,14 @@
 
 import org.joda.time.Chronology;
 import org.joda.time.DateTimeZone;
-import org.joda.time.PeriodType;
 import org.joda.time.Interval;
-import org.joda.time.MutablePeriod;
 import org.joda.time.MutableInterval;
+import org.joda.time.MutablePeriod;
+import org.joda.time.PeriodType;
 import org.joda.time.ReadableInterval;
+import org.joda.time.chrono.BuddhistChronology;
+import org.joda.time.chrono.CopticChronology;
+import org.joda.time.chrono.GJChronology;
 import org.joda.time.chrono.ISOChronology;
 import org.joda.time.chrono.JulianChronology;
 
@@ -116,7 +119,7 @@ public void testSetIntoPeriod_Object1() throws Exception {
     public void testSetIntoPeriod_Object2() throws Exception {
         Interval i = new Interval(100L, 223L);
         MutablePeriod m = new MutablePeriod(PeriodType.millis());
-        ReadableIntervalConverter.INSTANCE.setInto(m, i, Chronology.getCoptic());
+        ReadableIntervalConverter.INSTANCE.setInto(m, i, CopticChronology.getInstance());
         assertEquals(0, m.getYears());
         assertEquals(0, m.getMonths());
         assertEquals(0, m.getWeeks());
@@ -134,21 +137,21 @@ public void testIsReadableInterval_Object_Chronology() throws Exception {
     }
 
     public void testSetIntoInterval_Object1() throws Exception {
-        Interval i = new Interval(0L, 123L, Chronology.getCoptic());
-        MutableInterval m = new MutableInterval(-1000L, 1000L, Chronology.getBuddhist());
+        Interval i = new Interval(0L, 123L, CopticChronology.getInstance());
+        MutableInterval m = new MutableInterval(-1000L, 1000L, BuddhistChronology.getInstance());
         ReadableIntervalConverter.INSTANCE.setInto(m, i, null);
         assertEquals(0L, m.getStartMillis());
         assertEquals(123L, m.getEndMillis());
-        assertEquals(Chronology.getCoptic(), m.getChronology());
+        assertEquals(CopticChronology.getInstance(), m.getChronology());
     }
 
     public void testSetIntoInterval_Object2() throws Exception {
-        Interval i = new Interval(0L, 123L, Chronology.getCoptic());
-        MutableInterval m = new MutableInterval(-1000L, 1000L, Chronology.getBuddhist());
-        ReadableIntervalConverter.INSTANCE.setInto(m, i, Chronology.getGJ());
+        Interval i = new Interval(0L, 123L, CopticChronology.getInstance());
+        MutableInterval m = new MutableInterval(-1000L, 1000L, BuddhistChronology.getInstance());
+        ReadableIntervalConverter.INSTANCE.setInto(m, i, GJChronology.getInstance());
         assertEquals(0L, m.getStartMillis());
         assertEquals(123L, m.getEndMillis());
-        assertEquals(Chronology.getGJ(), m.getChronology());
+        assertEquals(GJChronology.getInstance(), m.getChronology());
     }
 
     public void testSetIntoInterval_Object3() throws Exception {
@@ -157,11 +160,11 @@ public Chronology getChronology() {
                 return null; // bad
             }
         };
-        MutableInterval m = new MutableInterval(-1000L, 1000L, Chronology.getBuddhist());
-        ReadableIntervalConverter.INSTANCE.setInto(m, i, Chronology.getGJ());
+        MutableInterval m = new MutableInterval(-1000L, 1000L, BuddhistChronology.getInstance());
+        ReadableIntervalConverter.INSTANCE.setInto(m, i, GJChronology.getInstance());
         assertEquals(0L, m.getStartMillis());
         assertEquals(123L, m.getEndMillis());
-        assertEquals(Chronology.getGJ(), m.getChronology());
+        assertEquals(GJChronology.getInstance(), m.getChronology());
     }
 
     public void testSetIntoInterval_Object4() throws Exception {
@@ -170,11 +173,11 @@ public Chronology getChronology() {
                 return null; // bad
             }
         };
-        MutableInterval m = new MutableInterval(-1000L, 1000L, Chronology.getBuddhist());
+        MutableInterval m = new MutableInterval(-1000L, 1000L, BuddhistChronology.getInstance());
         ReadableIntervalConverter.INSTANCE.setInto(m, i, null);
         assertEquals(0L, m.getStartMillis());
         assertEquals(123L, m.getEndMillis());
-        assertEquals(Chronology.getISO(), m.getChronology());
+        assertEquals(ISOChronology.getInstance(), m.getChronology());
     }
 
     //-----------------------------------------------------------------------
diff --git a/JodaTime/src/test/org/joda/time/convert/TestReadablePartialConverter.java b/JodaTime/src/test/org/joda/time/convert/TestReadablePartialConverter.java
index 974d452b9..47db9b789 100644
--- a/JodaTime/src/test/org/joda/time/convert/TestReadablePartialConverter.java
+++ b/JodaTime/src/test/org/joda/time/convert/TestReadablePartialConverter.java
@@ -107,7 +107,7 @@ public void testGetChronology_Object_Chronology() throws Exception {
     public void testGetPartialValues() throws Exception {
         TimeOfDay tod = new TimeOfDay();
         int[] expected = new int[] {1, 2, 3, 4};
-        int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), Chronology.getISO(PARIS));
+        int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));
         assertEquals(true, Arrays.equals(expected, actual));
         
         try {
diff --git a/JodaTime/src/test/org/joda/time/convert/TestStringConverter.java b/JodaTime/src/test/org/joda/time/convert/TestStringConverter.java
index 26c4ce31d..a3c9e49f1 100644
--- a/JodaTime/src/test/org/joda/time/convert/TestStringConverter.java
+++ b/JodaTime/src/test/org/joda/time/convert/TestStringConverter.java
@@ -31,6 +31,7 @@
 import org.joda.time.MutablePeriod;
 import org.joda.time.PeriodType;
 import org.joda.time.TimeOfDay;
+import org.joda.time.chrono.BuddhistChronology;
 import org.joda.time.chrono.ISOChronology;
 import org.joda.time.chrono.JulianChronology;
 
@@ -201,7 +202,7 @@ public void testGetChronology_Object_Chronology() throws Exception {
     public void testGetPartialValues() throws Exception {
         TimeOfDay tod = new TimeOfDay();
         int[] expected = new int[] {3, 4, 5, 6};
-        int[] actual = StringConverter.INSTANCE.getPartialValues(tod, "T03:04:05.006", Chronology.getISO());
+        int[] actual = StringConverter.INSTANCE.getPartialValues(tod, "T03:04:05.006", ISOChronology.getInstance());
         assertEquals(true, Arrays.equals(expected, actual));
     }
 
@@ -462,7 +463,7 @@ public void testSetIntoInterval_Object_Chronology1() throws Exception {
         StringConverter.INSTANCE.setInto(m, "2004-06-09/P1Y2M", null);
         assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0), m.getStart());
         assertEquals(new DateTime(2005, 8, 9, 0, 0, 0, 0), m.getEnd());
-        assertEquals(Chronology.getISO(), m.getChronology());
+        assertEquals(ISOChronology.getInstance(), m.getChronology());
     }
 
     public void testSetIntoInterval_Object_Chronology2() throws Exception {
@@ -470,7 +471,7 @@ public void testSetIntoInterval_Object_Chronology2() throws Exception {
         StringConverter.INSTANCE.setInto(m, "P1Y2M/2004-06-09", null);
         assertEquals(new DateTime(2003, 4, 9, 0, 0, 0, 0), m.getStart());
         assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0), m.getEnd());
-        assertEquals(Chronology.getISO(), m.getChronology());
+        assertEquals(ISOChronology.getInstance(), m.getChronology());
     }
 
     public void testSetIntoInterval_Object_Chronology3() throws Exception {
@@ -478,7 +479,7 @@ public void testSetIntoInterval_Object_Chronology3() throws Exception {
         StringConverter.INSTANCE.setInto(m, "2003-08-09/2004-06-09", null);
         assertEquals(new DateTime(2003, 8, 9, 0, 0, 0, 0), m.getStart());
         assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0), m.getEnd());
-        assertEquals(Chronology.getISO(), m.getChronology());
+        assertEquals(ISOChronology.getInstance(), m.getChronology());
     }
 
     public void testSetIntoInterval_Object_Chronology4() throws Exception {
@@ -486,7 +487,7 @@ public void testSetIntoInterval_Object_Chronology4() throws Exception {
         StringConverter.INSTANCE.setInto(m, "2004-06-09T+06:00/P1Y2M", null);
         assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0, SIX).withChronology(null), m.getStart());
         assertEquals(new DateTime(2005, 8, 9, 0, 0, 0, 0, SIX).withChronology(null), m.getEnd());
-        assertEquals(Chronology.getISO(), m.getChronology());
+        assertEquals(ISOChronology.getInstance(), m.getChronology());
     }
 
     public void testSetIntoInterval_Object_Chronology5() throws Exception {
@@ -494,7 +495,7 @@ public void testSetIntoInterval_Object_Chronology5() throws Exception {
         StringConverter.INSTANCE.setInto(m, "P1Y2M/2004-06-09T+06:00", null);
         assertEquals(new DateTime(2003, 4, 9, 0, 0, 0, 0, SIX).withChronology(null), m.getStart());
         assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0, SIX).withChronology(null), m.getEnd());
-        assertEquals(Chronology.getISO(), m.getChronology());
+        assertEquals(ISOChronology.getInstance(), m.getChronology());
     }
 
     public void testSetIntoInterval_Object_Chronology6() throws Exception {
@@ -502,23 +503,23 @@ public void testSetIntoInterval_Object_Chronology6() throws Exception {
         StringConverter.INSTANCE.setInto(m, "2003-08-09T+06:00/2004-06-09T+07:00", null);
         assertEquals(new DateTime(2003, 8, 9, 0, 0, 0, 0, SIX).withChronology(null), m.getStart());
         assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0, SEVEN).withChronology(null), m.getEnd());
-        assertEquals(Chronology.getISO(), m.getChronology());
+        assertEquals(ISOChronology.getInstance(), m.getChronology());
     }
 
     public void testSetIntoInterval_Object_Chronology7() throws Exception {
         MutableInterval m = new MutableInterval(-1000L, 1000L);
-        StringConverter.INSTANCE.setInto(m, "2003-08-09/2004-06-09", Chronology.getBuddhist());
-        assertEquals(new DateTime(2003, 8, 9, 0, 0, 0, 0, Chronology.getBuddhist()), m.getStart());
-        assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0, Chronology.getBuddhist()), m.getEnd());
-        assertEquals(Chronology.getBuddhist(), m.getChronology());
+        StringConverter.INSTANCE.setInto(m, "2003-08-09/2004-06-09", BuddhistChronology.getInstance());
+        assertEquals(new DateTime(2003, 8, 9, 0, 0, 0, 0, BuddhistChronology.getInstance()), m.getStart());
+        assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0, BuddhistChronology.getInstance()), m.getEnd());
+        assertEquals(BuddhistChronology.getInstance(), m.getChronology());
     }
 
     public void testSetIntoInterval_Object_Chronology8() throws Exception {
         MutableInterval m = new MutableInterval(-1000L, 1000L);
-        StringConverter.INSTANCE.setInto(m, "2003-08-09T+06:00/2004-06-09T+07:00", Chronology.getBuddhist(EIGHT));
-        assertEquals(new DateTime(2003, 8, 9, 0, 0, 0, 0, Chronology.getBuddhist(SIX)).withZone(EIGHT), m.getStart());
-        assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0, Chronology.getBuddhist(SEVEN)).withZone(EIGHT), m.getEnd());
-        assertEquals(Chronology.getBuddhist(EIGHT), m.getChronology());
+        StringConverter.INSTANCE.setInto(m, "2003-08-09T+06:00/2004-06-09T+07:00", BuddhistChronology.getInstance(EIGHT));
+        assertEquals(new DateTime(2003, 8, 9, 0, 0, 0, 0, BuddhistChronology.getInstance(SIX)).withZone(EIGHT), m.getStart());
+        assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0, BuddhistChronology.getInstance(SEVEN)).withZone(EIGHT), m.getEnd());
+        assertEquals(BuddhistChronology.getInstance(EIGHT), m.getChronology());
     }
 
     public void testSetIntoIntervalEx_Object_Chronology1() throws Exception {
diff --git a/JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java b/JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java
index f71308bc5..26965a93b 100644
--- a/JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java
+++ b/JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java
@@ -28,6 +28,7 @@
 import org.joda.time.DurationFieldType;
 import org.joda.time.TimeOfDay;
 import org.joda.time.base.BasePartial;
+import org.joda.time.chrono.ISOChronology;
 
 /**
  * This class is a Junit unit test for BaseDateTimeField.
@@ -552,10 +553,10 @@ protected MockStandardBaseDateTimeField() {
             super();
         }
         public DurationField getDurationField() {
-            return Chronology.getISOUTC().seconds();
+            return ISOChronology.getInstanceUTC().seconds();
         }
         public DurationField getRangeDurationField() {
-            return Chronology.getISOUTC().minutes();
+            return ISOChronology.getInstanceUTC().minutes();
         }
     }
 
@@ -600,10 +601,10 @@ public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {
     static class MockPartial extends BasePartial {
         protected DateTimeField getField(int index, Chronology chrono) {
             if (index == 0) {
-                return Chronology.getISOUTC().minuteOfHour();
+                return ISOChronology.getInstanceUTC().minuteOfHour();
             }
             if (index == 1) {
-                return Chronology.getISOUTC().millisOfSecond();
+                return ISOChronology.getInstanceUTC().millisOfSecond();
             }
             return null;
         }
diff --git a/JodaTime/src/test/org/joda/time/field/TestMillisDurationField.java b/JodaTime/src/test/org/joda/time/field/TestMillisDurationField.java
index 01d009879..3694b75dd 100644
--- a/JodaTime/src/test/org/joda/time/field/TestMillisDurationField.java
+++ b/JodaTime/src/test/org/joda/time/field/TestMillisDurationField.java
@@ -23,9 +23,9 @@
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
 
-import org.joda.time.Chronology;
 import org.joda.time.DurationField;
 import org.joda.time.DurationFieldType;
+import org.joda.time.chrono.ISOChronology;
 
 /**
  * This class is a Junit unit test for PeriodFormatterBuilder.
@@ -182,7 +182,7 @@ public void test_getDifferenceAsLong_long_long() {
     //-----------------------------------------------------------------------
     public void test_compareTo() {
         assertEquals(0, MillisDurationField.INSTANCE.compareTo(MillisDurationField.INSTANCE));
-        assertEquals(-1, MillisDurationField.INSTANCE.compareTo(Chronology.getISO().seconds()));
+        assertEquals(-1, MillisDurationField.INSTANCE.compareTo(ISOChronology.getInstance().seconds()));
         DurationField dummy = new PreciseDurationField(DurationFieldType.seconds(), 0);
         assertEquals(1, MillisDurationField.INSTANCE.compareTo(dummy));
         try {
diff --git a/JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java b/JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java
index d5f518ee3..339d49f38 100644
--- a/JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java
+++ b/JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java
@@ -21,11 +21,11 @@
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
 
-import org.joda.time.Chronology;
 import org.joda.time.DateTimeFieldType;
 import org.joda.time.DurationField;
 import org.joda.time.DurationFieldType;
 import org.joda.time.TimeOfDay;
+import org.joda.time.chrono.ISOChronology;
 
 /**
  * This class is a Junit unit test for PreciseDateTimeField.
@@ -55,7 +55,7 @@ protected void tearDown() throws Exception {
     //-----------------------------------------------------------------------
     public void test_constructor1() {
         OffsetDateTimeField field = new OffsetDateTimeField(
-            Chronology.getISO().secondOfMinute(), 3
+            ISOChronology.getInstance().secondOfMinute(), 3
         );
         assertEquals(DateTimeFieldType.secondOfMinute(), field.getType());
         assertEquals(3, field.getOffset());
@@ -66,7 +66,7 @@ public void test_constructor1() {
         } catch (IllegalArgumentException ex) {}
         
         try {
-            field = new OffsetDateTimeField(Chronology.getISO().secondOfMinute(), 0);
+            field = new OffsetDateTimeField(ISOChronology.getInstance().secondOfMinute(), 0);
             fail();
         } catch (IllegalArgumentException ex) {}
         
@@ -79,7 +79,7 @@ public void test_constructor1() {
 
     public void test_constructor2() {
         OffsetDateTimeField field = new OffsetDateTimeField(
-            Chronology.getISO().secondOfMinute(), DateTimeFieldType.secondOfDay(), 3
+            ISOChronology.getInstance().secondOfMinute(), DateTimeFieldType.secondOfDay(), 3
         );
         assertEquals(DateTimeFieldType.secondOfDay(), field.getType());
         assertEquals(3, field.getOffset());
@@ -90,33 +90,33 @@ public void test_constructor2() {
         } catch (IllegalArgumentException ex) {}
         
         try {
-            field = new OffsetDateTimeField(Chronology.getISO().secondOfMinute(), null, 3);
+            field = new OffsetDateTimeField(ISOChronology.getInstance().secondOfMinute(), null, 3);
             fail();
         } catch (IllegalArgumentException ex) {}
         
         try {
-            field = new OffsetDateTimeField(Chronology.getISO().secondOfMinute(), DateTimeFieldType.secondOfDay(), 0);
+            field = new OffsetDateTimeField(ISOChronology.getInstance().secondOfMinute(), DateTimeFieldType.secondOfDay(), 0);
             fail();
         } catch (IllegalArgumentException ex) {}
     }
 
     public void test_getType() {
         OffsetDateTimeField field = new OffsetDateTimeField(
-            Chronology.getISO().secondOfMinute(), 3
+            ISOChronology.getInstance().secondOfMinute(), 3
         );
         assertEquals(DateTimeFieldType.secondOfMinute(), field.getType());
     }
 
     public void test_getName() {
         OffsetDateTimeField field = new OffsetDateTimeField(
-            Chronology.getISO().secondOfMinute(), 3
+            ISOChronology.getInstance().secondOfMinute(), 3
         );
         assertEquals("secondOfMinute", field.getName());
     }
 
     public void test_toString() {
         OffsetDateTimeField field = new OffsetDateTimeField(
-            Chronology.getISO().secondOfMinute(), 3
+            ISOChronology.getInstance().secondOfMinute(), 3
         );
         assertEquals("DateTimeField[secondOfMinute]", field.toString());
     }
@@ -133,7 +133,7 @@ public void test_isLenient() {
 
     public void test_getOffset() {
         OffsetDateTimeField field = new OffsetDateTimeField(
-            Chronology.getISO().secondOfMinute(), 5
+            ISOChronology.getInstance().secondOfMinute(), 5
         );
         assertEquals(5, field.getOffset());
     }
@@ -532,7 +532,7 @@ public void test_remainder_long() {
     //-----------------------------------------------------------------------
     static class MockOffsetDateTimeField extends OffsetDateTimeField {
         protected MockOffsetDateTimeField() {
-            super(Chronology.getISO().secondOfMinute(), 3);
+            super(ISOChronology.getInstance().secondOfMinute(), 3);
         }
     }
 
@@ -541,10 +541,10 @@ protected MockStandardDateTimeField() {
             super();
         }
         public DurationField getDurationField() {
-            return Chronology.getISOUTC().seconds();
+            return ISOChronology.getInstanceUTC().seconds();
         }
         public DurationField getRangeDurationField() {
-            return Chronology.getISOUTC().minutes();
+            return ISOChronology.getInstanceUTC().minutes();
         }
     }
 
diff --git a/JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java b/JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java
index 9f94fe71c..2dd51703f 100644
--- a/JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java
+++ b/JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java
@@ -21,11 +21,11 @@
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
 
-import org.joda.time.Chronology;
 import org.joda.time.DateTimeFieldType;
 import org.joda.time.DurationField;
 import org.joda.time.DurationFieldType;
 import org.joda.time.TimeOfDay;
+import org.joda.time.chrono.ISOChronology;
 
 /**
  * This class is a Junit unit test for PreciseDateTimeField.
@@ -56,8 +56,8 @@ protected void tearDown() throws Exception {
     public void test_constructor() {
         BaseDateTimeField field = new PreciseDateTimeField(
             DateTimeFieldType.secondOfMinute(),
-            Chronology.getISOUTC().millis(),
-            Chronology.getISOUTC().hours()
+            ISOChronology.getInstanceUTC().millis(),
+            ISOChronology.getInstanceUTC().hours()
         );
         assertEquals(DateTimeFieldType.secondOfMinute(), field.getType());
         try {
@@ -68,28 +68,28 @@ public void test_constructor() {
             field = new PreciseDateTimeField(
                 DateTimeFieldType.minuteOfHour(),
                 new MockImpreciseDurationField(DurationFieldType.minutes()),
-                Chronology.getISOUTC().hours());
+                ISOChronology.getInstanceUTC().hours());
             fail();
         } catch (IllegalArgumentException ex) {}
         try {
             field = new PreciseDateTimeField(
                 DateTimeFieldType.minuteOfHour(),
-                Chronology.getISOUTC().hours(),
+                ISOChronology.getInstanceUTC().hours(),
                 new MockImpreciseDurationField(DurationFieldType.minutes()));
             fail();
         } catch (IllegalArgumentException ex) {}
         try {
             field = new PreciseDateTimeField(
                 DateTimeFieldType.minuteOfHour(),
-                Chronology.getISOUTC().hours(),
-                Chronology.getISOUTC().hours());
+                ISOChronology.getInstanceUTC().hours(),
+                ISOChronology.getInstanceUTC().hours());
             fail();
         } catch (IllegalArgumentException ex) {}
         try {
             field = new PreciseDateTimeField(
                 DateTimeFieldType.minuteOfHour(),
                 new MockZeroDurationField(DurationFieldType.minutes()),
-                Chronology.getISOUTC().hours());
+                ISOChronology.getInstanceUTC().hours());
             fail();
         } catch (IllegalArgumentException ex) {}
     }
@@ -97,8 +97,8 @@ public void test_constructor() {
     public void test_getType() {
         BaseDateTimeField field = new PreciseDateTimeField(
             DateTimeFieldType.secondOfDay(),
-            Chronology.getISOUTC().millis(),
-            Chronology.getISOUTC().hours()
+            ISOChronology.getInstanceUTC().millis(),
+            ISOChronology.getInstanceUTC().hours()
         );
         assertEquals(DateTimeFieldType.secondOfDay(), field.getType());
     }
@@ -106,8 +106,8 @@ public void test_getType() {
     public void test_getName() {
         BaseDateTimeField field = new PreciseDateTimeField(
             DateTimeFieldType.secondOfDay(),
-            Chronology.getISOUTC().millis(),
-            Chronology.getISOUTC().hours()
+            ISOChronology.getInstanceUTC().millis(),
+            ISOChronology.getInstanceUTC().hours()
         );
         assertEquals("secondOfDay", field.getName());
     }
@@ -115,8 +115,8 @@ public void test_getName() {
     public void test_toString() {
         BaseDateTimeField field = new PreciseDateTimeField(
             DateTimeFieldType.secondOfDay(),
-            Chronology.getISOUTC().millis(),
-            Chronology.getISOUTC().hours()
+            ISOChronology.getInstanceUTC().millis(),
+            ISOChronology.getInstanceUTC().hours()
         );
         assertEquals("DateTimeField[secondOfDay]", field.toString());
     }
@@ -548,10 +548,10 @@ protected MockStandardDateTimeField() {
             super();
         }
         public DurationField getDurationField() {
-            return Chronology.getISOUTC().seconds();
+            return ISOChronology.getInstanceUTC().seconds();
         }
         public DurationField getRangeDurationField() {
-            return Chronology.getISOUTC().minutes();
+            return ISOChronology.getInstanceUTC().minutes();
         }
     }
 
diff --git a/JodaTime/src/test/org/joda/time/field/TestPreciseDurationDateTimeField.java b/JodaTime/src/test/org/joda/time/field/TestPreciseDurationDateTimeField.java
index b0146a0c0..29e245579 100644
--- a/JodaTime/src/test/org/joda/time/field/TestPreciseDurationDateTimeField.java
+++ b/JodaTime/src/test/org/joda/time/field/TestPreciseDurationDateTimeField.java
@@ -21,11 +21,11 @@
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
 
-import org.joda.time.Chronology;
 import org.joda.time.DateTimeFieldType;
 import org.joda.time.DurationField;
 import org.joda.time.DurationFieldType;
 import org.joda.time.TimeOfDay;
+import org.joda.time.chrono.ISOChronology;
 
 /**
  * This class is a Junit unit test for PreciseDurationDateTimeField.
@@ -554,10 +554,10 @@ protected MockStandardBaseDateTimeField() {
             super();
         }
         public DurationField getDurationField() {
-            return Chronology.getISOUTC().seconds();
+            return ISOChronology.getInstanceUTC().seconds();
         }
         public DurationField getRangeDurationField() {
-            return Chronology.getISOUTC().minutes();
+            return ISOChronology.getInstanceUTC().minutes();
         }
     }
 
diff --git a/JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java b/JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java
index e1c113df9..1c5109d2c 100644
--- a/JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java
+++ b/JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java
@@ -23,9 +23,9 @@
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
 
-import org.joda.time.Chronology;
 import org.joda.time.DurationField;
 import org.joda.time.DurationFieldType;
+import org.joda.time.chrono.ISOChronology;
 
 /**
  * This class is a Junit unit test for PreciseDurationField.
@@ -216,7 +216,7 @@ public void test_getDifferenceAsLong_long_long() {
     //-----------------------------------------------------------------------
     public void test_equals() {
         assertEquals(true, iField.equals(iField));
-        assertEquals(false, iField.equals(Chronology.getISO().minutes()));
+        assertEquals(false, iField.equals(ISOChronology.getInstance().minutes()));
         DurationField dummy = new PreciseDurationField(DurationFieldType.seconds(), 0);
         assertEquals(false, iField.equals(dummy));
         dummy = new PreciseDurationField(DurationFieldType.seconds(), 1000);
@@ -229,7 +229,7 @@ public void test_equals() {
 
     public void test_hashCode() {
         assertEquals(true, iField.hashCode() == iField.hashCode());
-        assertEquals(false, iField.hashCode() == Chronology.getISO().minutes().hashCode());
+        assertEquals(false, iField.hashCode() == ISOChronology.getInstance().minutes().hashCode());
         DurationField dummy = new PreciseDurationField(DurationFieldType.seconds(), 0);
         assertEquals(false, iField.hashCode() == dummy.hashCode());
         dummy = new PreciseDurationField(DurationFieldType.seconds(), 1000);
@@ -241,7 +241,7 @@ public void test_hashCode() {
     //-----------------------------------------------------------------------
     public void test_compareTo() {
         assertEquals(0, iField.compareTo(iField));
-        assertEquals(-1, iField.compareTo(Chronology.getISO().minutes()));
+        assertEquals(-1, iField.compareTo(ISOChronology.getInstance().minutes()));
         DurationField dummy = new PreciseDurationField(DurationFieldType.seconds(), 0);
         assertEquals(1, iField.compareTo(dummy));
         try {
diff --git a/JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java b/JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java
index 81a2b3ca9..11de211a2 100644
--- a/JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java
+++ b/JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java
@@ -23,9 +23,9 @@
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
 
-import org.joda.time.Chronology;
 import org.joda.time.DurationField;
 import org.joda.time.DurationFieldType;
+import org.joda.time.chrono.ISOChronology;
 
 /**
  * This class is a Junit unit test for PreciseDurationField.
@@ -233,7 +233,7 @@ public void test_getDifferenceAsLong_long_long() {
     //-----------------------------------------------------------------------
     public void test_equals() {
         assertEquals(true, iField.equals(iField));
-        assertEquals(false, iField.equals(Chronology.getISO().minutes()));
+        assertEquals(false, iField.equals(ISOChronology.getInstance().minutes()));
         DurationField dummy = new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 2);
         assertEquals(false, iField.equals(dummy));
         dummy = new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 90);
@@ -246,7 +246,7 @@ public void test_equals() {
 
     public void test_hashCode() {
         assertEquals(iField.hashCode(), iField.hashCode());
-        assertEquals(false, iField.hashCode() == Chronology.getISO().minutes().hashCode());
+        assertEquals(false, iField.hashCode() == ISOChronology.getInstance().minutes().hashCode());
         DurationField dummy = new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 2);
         assertEquals(false, iField.hashCode() == dummy.hashCode());
         dummy = new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 90);
@@ -258,7 +258,7 @@ public void test_hashCode() {
     //-----------------------------------------------------------------------
     public void test_compareTo() {
         assertEquals(0, iField.compareTo(iField));
-        assertEquals(-1, iField.compareTo(Chronology.getISO().minutes()));
+        assertEquals(-1, iField.compareTo(ISOChronology.getInstance().minutes()));
         DurationField dummy = new PreciseDurationField(DurationFieldType.minutes(), 0);
         assertEquals(1, iField.compareTo(dummy));
         try {
diff --git a/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java b/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java
index 682fe1e2e..e497490b2 100644
--- a/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java
+++ b/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java
@@ -26,6 +26,7 @@
 import org.joda.time.DateTimeConstants;
 import org.joda.time.DateTimeUtils;
 import org.joda.time.DateTimeZone;
+import org.joda.time.chrono.GJChronology;
 
 /**
  * This class is a Junit unit test for DateTime Formating.
@@ -187,7 +188,7 @@ public void testFormat_yearOfEra_twoDigit() {
     }
 
     public void testFormat_yearOfEraParse() {
-        Chronology chrono = Chronology.getGJUTC();
+        Chronology chrono = GJChronology.getInstanceUTC();
 
         DateTimeFormatter f = DateTimeFormat
             .forPattern("YYYY-MM GG")
diff --git a/JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java b/JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java
index d83338802..6eb533096 100644
--- a/JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java
+++ b/JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java
@@ -29,6 +29,8 @@
 import org.joda.time.DateTimeZone;
 import org.joda.time.MutableDateTime;
 import org.joda.time.ReadablePartial;
+import org.joda.time.chrono.BuddhistChronology;
+import org.joda.time.chrono.ISOChronology;
 
 /**
  * This class is a Junit unit test for DateTime Formating.
@@ -42,9 +44,9 @@
     private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
     private static final DateTimeZone TOKYO = DateTimeZone.forID("Asia/Tokyo");
     private static final DateTimeZone NEWYORK = DateTimeZone.forID("America/New_York");
-    private static final Chronology ISO_UTC = Chronology.getISOUTC();
-    private static final Chronology ISO_PARIS = Chronology.getISO(PARIS);
-    private static final Chronology BUDDHIST_PARIS = Chronology.getBuddhist(PARIS);
+    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
+    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);
+    private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);
 
     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 
                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 
diff --git a/JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java b/JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java
index 99602fb85..c33514a41 100644
--- a/JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java
+++ b/JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java
@@ -162,11 +162,11 @@ public void testFormat_dateTime() {
 //        dt = dt.withZone(LONDON);
 //        assertEquals("2004-06-09T12:20:30.040+02:00", ISODateTimeFormat.dateTime().print(dt.getMillis(), PARIS));
 //        
-//        dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, Chronology.getCoptic());
+//        dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, CopticChronology.getInstance());
 //        assertEquals("2288-02-19T10:20:30.040Z", ISODateTimeFormat.dateTime().print(dt));
 //        
-//        dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, Chronology.getCoptic());
-//        assertEquals("2004-06-09T10:20:30.040Z", ISODateTimeFormat.getInstance(Chronology.getCoptic()).dateTime().print(dt));
+//        dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, CopticChronology.getInstance());
+//        assertEquals("2004-06-09T10:20:30.040Z", ISODateTimeFormat.getInstance(CopticChronology.getInstance()).dateTime().print(dt));
     }
 
     public void testFormat_dateTimeNoMillis() {
diff --git a/JodaTime/src/test/org/joda/time/format/TestPeriodFormatter.java b/JodaTime/src/test/org/joda/time/format/TestPeriodFormatter.java
index 716e41c3c..9717ed8e3 100644
--- a/JodaTime/src/test/org/joda/time/format/TestPeriodFormatter.java
+++ b/JodaTime/src/test/org/joda/time/format/TestPeriodFormatter.java
@@ -29,6 +29,8 @@
 import org.joda.time.MutablePeriod;
 import org.joda.time.Period;
 import org.joda.time.PeriodType;
+import org.joda.time.chrono.BuddhistChronology;
+import org.joda.time.chrono.ISOChronology;
 
 /**
  * This class is a Junit unit test for Period Formating.
@@ -42,9 +44,9 @@
     private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
     private static final DateTimeZone TOKYO = DateTimeZone.forID("Asia/Tokyo");
     private static final DateTimeZone NEWYORK = DateTimeZone.forID("America/New_York");
-    private static final Chronology ISO_UTC = Chronology.getISOUTC();
-    private static final Chronology ISO_PARIS = Chronology.getISO(PARIS);
-    private static final Chronology BUDDHIST_PARIS = Chronology.getBuddhist(PARIS);
+    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
+    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);
+    private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);
 
     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 
                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 
diff --git a/JodaTime/src/test/org/joda/time/format/TestTextFields.java b/JodaTime/src/test/org/joda/time/format/TestTextFields.java
index 06733a3d3..310890aa8 100644
--- a/JodaTime/src/test/org/joda/time/format/TestTextFields.java
+++ b/JodaTime/src/test/org/joda/time/format/TestTextFields.java
@@ -24,6 +24,7 @@
 import org.joda.time.DateTime;
 import org.joda.time.DateTimeZone;
 import org.joda.time.MutableDateTime;
+import org.joda.time.chrono.ISOChronology;
 
 /**
  * Makes sure that text fields are correct for English.
@@ -110,7 +111,7 @@ public void testMonthNames_monthMiddle() {
     public void testMonthNames_monthEnd() {
         DateTimeFormatter printer = DateTimeFormat.forPattern("MMMM");
         for (int i=0; i<ZONES.length; i++) {
-            Chronology chrono = Chronology.getISO(ZONES[i]);
+            Chronology chrono = ISOChronology.getInstance(ZONES[i]);
             for (int month=1; month<=12; month++) {
                 DateTime dt = new DateTime(2004, month, 1, 23, 20, 30, 40, chrono);
                 int lastDay = chrono.dayOfMonth().getMaximumValue(dt.getMillis());
@@ -137,7 +138,7 @@ public void testWeekdayNames() {
     public void testHalfdayNames() {
         DateTimeFormatter printer = DateTimeFormat.forPattern("a");
         for (int i=0; i<ZONES.length; i++) {
-            Chronology chrono = Chronology.getISO(ZONES[i]);
+            Chronology chrono = ISOChronology.getInstance(ZONES[i]);
             MutableDateTime mdt = new MutableDateTime(2004, 5, 30, 0, 20, 30, 40, chrono);
             for (int hour=0; hour<24; hour++) {
                 mdt.setHourOfDay(hour);

From 2fdb8ed57bf5c42dbb6e5bcca0e0efe4655f54df Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 4 Sep 2005 20:20:10 +0000
Subject: [PATCH 035/130] Remove references to Chronology factory methods

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@892 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/Instant.java             | 4 ++--
 JodaTime/src/java/org/joda/time/TimeOfDay.java           | 2 +-
 JodaTime/src/java/org/joda/time/YearMonthDay.java        | 2 +-
 JodaTime/src/java/org/joda/time/base/BaseInterval.java   | 3 ++-
 .../java/org/joda/time/convert/AbstractConverter.java    | 3 ++-
 .../java/org/joda/time/convert/CalendarConverter.java    | 9 ++++++---
 6 files changed, 14 insertions(+), 9 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/Instant.java b/JodaTime/src/java/org/joda/time/Instant.java
index dc737407a..467b9ec86 100644
--- a/JodaTime/src/java/org/joda/time/Instant.java
+++ b/JodaTime/src/java/org/joda/time/Instant.java
@@ -86,7 +86,7 @@ public Instant(long instant) {
     public Instant(Object instant) {
         super();
         InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
-        iMillis = converter.getInstantMillis(instant, Chronology.getISOUTC());
+        iMillis = converter.getInstantMillis(instant, ChronologyType.iso().getChronologyUTC());
     }
 
     //-----------------------------------------------------------------------
@@ -217,7 +217,7 @@ public long getMillis() {
      * @return ISO in the UTC zone
      */
     public Chronology getChronology() {
-        return Chronology.getISOUTC();
+        return ChronologyType.iso().getChronologyUTC();
     }
 
 }
diff --git a/JodaTime/src/java/org/joda/time/TimeOfDay.java b/JodaTime/src/java/org/joda/time/TimeOfDay.java
index 98ae695af..a130f2199 100644
--- a/JodaTime/src/java/org/joda/time/TimeOfDay.java
+++ b/JodaTime/src/java/org/joda/time/TimeOfDay.java
@@ -139,7 +139,7 @@ public TimeOfDay() {
      * @since 1.1
      */
     public TimeOfDay(DateTimeZone zone) {
-        super(Chronology.getISO(zone));
+        super(ChronologyType.iso().getChronology(zone));
     }
 
     /**
diff --git a/JodaTime/src/java/org/joda/time/YearMonthDay.java b/JodaTime/src/java/org/joda/time/YearMonthDay.java
index e2ee7ce7a..6462ec9dd 100644
--- a/JodaTime/src/java/org/joda/time/YearMonthDay.java
+++ b/JodaTime/src/java/org/joda/time/YearMonthDay.java
@@ -98,7 +98,7 @@ public YearMonthDay() {
      * @since 1.1
      */
     public YearMonthDay(DateTimeZone zone) {
-        super(Chronology.getISO(zone));
+        super(ChronologyType.iso().getChronology(zone));
     }
 
     /**
diff --git a/JodaTime/src/java/org/joda/time/base/BaseInterval.java b/JodaTime/src/java/org/joda/time/base/BaseInterval.java
index 61df6c12c..99e516bf7 100644
--- a/JodaTime/src/java/org/joda/time/base/BaseInterval.java
+++ b/JodaTime/src/java/org/joda/time/base/BaseInterval.java
@@ -18,6 +18,7 @@
 import java.io.Serializable;
 
 import org.joda.time.Chronology;
+import org.joda.time.ChronologyType;
 import org.joda.time.DateTimeUtils;
 import org.joda.time.MutableInterval;
 import org.joda.time.ReadWritableInterval;
@@ -85,7 +86,7 @@ protected BaseInterval(ReadableInstant start, ReadableInstant end) {
         super();
         if (start == null && end == null) {
             iStartMillis = iEndMillis = DateTimeUtils.currentTimeMillis();
-            iChronology = Chronology.getISO();
+            iChronology = ChronologyType.iso().getChronology();
         } else {
             iChronology = DateTimeUtils.getInstantChronology(start);
             iStartMillis = DateTimeUtils.getInstantMillis(start);
diff --git a/JodaTime/src/java/org/joda/time/convert/AbstractConverter.java b/JodaTime/src/java/org/joda/time/convert/AbstractConverter.java
index 7c87f1d1c..5b89d5633 100644
--- a/JodaTime/src/java/org/joda/time/convert/AbstractConverter.java
+++ b/JodaTime/src/java/org/joda/time/convert/AbstractConverter.java
@@ -16,6 +16,7 @@
 package org.joda.time.convert;
 
 import org.joda.time.Chronology;
+import org.joda.time.ChronologyType;
 import org.joda.time.DateTimeUtils;
 import org.joda.time.DateTimeZone;
 import org.joda.time.PeriodType;
@@ -62,7 +63,7 @@ public long getInstantMillis(Object object, Chronology chrono) {
      * @return the chronology, never null
      */
     public Chronology getChronology(Object object, DateTimeZone zone) {
-        return Chronology.getISO(zone);
+        return ChronologyType.iso().getChronology(zone);
     }
 
     /**
diff --git a/JodaTime/src/java/org/joda/time/convert/CalendarConverter.java b/JodaTime/src/java/org/joda/time/convert/CalendarConverter.java
index 0f30f05cd..f7c15f768 100644
--- a/JodaTime/src/java/org/joda/time/convert/CalendarConverter.java
+++ b/JodaTime/src/java/org/joda/time/convert/CalendarConverter.java
@@ -19,9 +19,12 @@
 import java.util.GregorianCalendar;
 
 import org.joda.time.Chronology;
+import org.joda.time.ChronologyType;
 import org.joda.time.DateTimeZone;
 import org.joda.time.chrono.BuddhistChronology;
 import org.joda.time.chrono.GJChronology;
+import org.joda.time.chrono.GregorianChronology;
+import org.joda.time.chrono.JulianChronology;
 
 /**
  * CalendarConverter converts a java util Calendar to an instant or partial.
@@ -94,14 +97,14 @@ public Chronology getChronology(Object object, DateTimeZone zone) {
             GregorianCalendar gc = (GregorianCalendar) object;
             long cutover = gc.getGregorianChange().getTime();
             if (cutover == Long.MIN_VALUE) {
-                return Chronology.getGregorian(zone);
+                return GregorianChronology.getInstance(zone);
             } else if (cutover == Long.MAX_VALUE) {
-                return Chronology.getJulian(zone);
+                return JulianChronology.getInstance(zone);
             } else {
                 return GJChronology.getInstance(zone, cutover, 4);
             }
         } else {
-            return Chronology.getISO(zone);
+            return ChronologyType.iso().getChronology(zone);
         }
     }
 

From 12883c595ea9e1e82acb2875625a51d3c9a35a0a Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 4 Sep 2005 20:21:08 +0000
Subject: [PATCH 036/130] Deprecate Chronology factory methods

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@893 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    | 11 +++++--
 .../src/java/org/joda/time/Chronology.java    | 29 ++++++++++++++++---
 2 files changed, 33 insertions(+), 7 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index e8f1cef6a..1ef32700b 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -17,10 +17,10 @@ of restrictions. If the license cause you problems please contact the mailing li
 Incompatible changes since 1.1
 ------------------------------
 Binary compatible - Yes
-  - v1.0 and v1.1 are binary compatible in their public and protected API
+  - v1.1 and v1.2 are binary compatible in their public and protected API
 
 Source compatible - Yes
-  - v1.0 and v1.1 are source compatible in their public and protected API
+  - v1.1 and v1.2 are source compatible in their public and protected API
 
 Serialization compatible - Yes
 
@@ -37,7 +37,12 @@ Warnings since 1.1
 
 Deprecations since 1.1
 ----------------------
-None
+- Chronology factory methods, such as getISO() and getCopticUTC()
+  The ChronologyType class contains suitable replacement methods
+    Chronology.getCoptic(zone)   is replaced by
+    ChronologyType.coptic().getChronology(zone)
+  These factory methods have been removed as they were a poor substitute
+  for a proper type class, and confused the role of the Chronology class
 
 
 Bug fixes since 1.1
diff --git a/JodaTime/src/java/org/joda/time/Chronology.java b/JodaTime/src/java/org/joda/time/Chronology.java
index 82c81ded2..ce5fb0144 100644
--- a/JodaTime/src/java/org/joda/time/Chronology.java
+++ b/JodaTime/src/java/org/joda/time/Chronology.java
@@ -26,11 +26,14 @@
  * Chronology provides access to the individual date time fields for a
  * chronological calendar system.
  * <p>
- * Various chronologies are supported by subclasses including ISO and GregorianJulian.
- * This class provides static factory methods to access these chronologies.
+ * Various chronologies are supported by subclasses including ISO
+ * and GregorianJulian. To construct a Chronology you should use the
+ * factory methods on {@link ChronologyType}. If you require full
+ * control of the factory, then you should use the method on each subclass.
+ * <p>
  * For example, to obtain the current time in the coptic calendar system:
  * <pre>
- * DateTime dt = new DateTime(Chronology.getCoptic());
+ * DateTime dt = new DateTime(ChronologyType.coptic().getChronology());
  * </pre>
  * <p>
  * The provided chronology implementations are:
@@ -50,7 +53,7 @@
  * For example, a week could be defined as 10 days and a month as 40 days in a
  * special WeirdChronology implementation. Clearly the GJ and ISO
  * implementations provided use the field names as you would expect.
- * 
+ *
  * @see org.joda.time.chrono.ISOChronology
  * @see org.joda.time.chrono.GJChronology
  * @see org.joda.time.chrono.GregorianChronology
@@ -73,6 +76,7 @@
      * as it applies the modern Gregorian calendar rules before that date.
      *
      * @return the ISO chronology
+     * @deprecated Use ChronologyType.iso().getChronology()
      */
     public static Chronology getISO() {
         return ISOChronology.getInstance();
@@ -87,6 +91,7 @@ public static Chronology getISO() {
      * as it applies the modern Gregorian calendar rules before that date.
      *
      * @return the ISO chronology
+     * @deprecated Use ChronologyType.iso().getChronologyUTC()
      */
     public static Chronology getISOUTC() {
         return ISOChronology.getInstanceUTC();
@@ -102,6 +107,7 @@ public static Chronology getISOUTC() {
      *
      * @param zone  the zone to use, null means default zone
      * @return the ISO chronology
+     * @deprecated Use ChronologyType.iso().getChronology(zone)
      */
     public static Chronology getISO(DateTimeZone zone) {
         return ISOChronology.getInstance(zone);
@@ -127,6 +133,7 @@ public static Chronology getISO(DateTimeZone zone) {
      * we recommend using ISOChronology, which is the default.
      *
      * @return the GJ chronology
+     * @deprecated Use ChronologyType.gj().getChronology()
      */
     public static Chronology getGJ() {
         return GJChronology.getInstance();
@@ -151,6 +158,7 @@ public static Chronology getGJ() {
      * we recommend using ISOChronology, which is the default.
      *
      * @return the GJ chronology
+     * @deprecated Use ChronologyType.gj().getChronologyUTC()
      */
     public static Chronology getGJUTC() {
         return GJChronology.getInstanceUTC();
@@ -176,6 +184,7 @@ public static Chronology getGJUTC() {
      *
      * @param zone  the zone to use, null means default zone
      * @return the GJ chronology
+     * @deprecated Use ChronologyType.gj().getChronology(zone)
      */
     public static Chronology getGJ(DateTimeZone zone) {
         return GJChronology.getInstance(zone);
@@ -197,6 +206,7 @@ public static Chronology getGJ(DateTimeZone zone) {
      * thus we recommend using ISOChronology instead, which is the default.
      *
      * @return the Gregorian chronology
+     * @deprecated Use ChronologyType.gregorian().getChronology()
      */
     public static Chronology getGregorian() {
         return GregorianChronology.getInstance();
@@ -217,6 +227,7 @@ public static Chronology getGregorian() {
      * thus we recommend using ISOChronology instead, which is the default.
      *
      * @return the Gregorian chronology
+     * @deprecated Use ChronologyType.gregorian().getChronologyUTC()
      */
     public static Chronology getGregorianUTC() {
         return GregorianChronology.getInstanceUTC();
@@ -238,6 +249,7 @@ public static Chronology getGregorianUTC() {
      *
      * @param zone  the zone to use, null means default zone
      * @return the Gregorian chronology
+     * @deprecated Use ChronologyType.gregorian().getChronology(zone)
      */
     public static Chronology getGregorian(DateTimeZone zone) {
         return GregorianChronology.getInstance(zone);
@@ -252,6 +264,7 @@ public static Chronology getGregorian(DateTimeZone zone) {
      * The Julian calendar system defines a leap year every four years.
      *
      * @return the Julian chronology
+     * @deprecated Use ChronologyType.julian().getChronology()
      */
     public static Chronology getJulian() {
         return JulianChronology.getInstance();
@@ -265,6 +278,7 @@ public static Chronology getJulian() {
      * The Julian calendar system defines a leap year every four years.
      *
      * @return the Julian chronology
+     * @deprecated Use ChronologyType.julian().getChronologyUTC()
      */
     public static Chronology getJulianUTC() {
         return JulianChronology.getInstanceUTC();
@@ -279,6 +293,7 @@ public static Chronology getJulianUTC() {
      *
      * @param zone  the zone to use, null means default zone
      * @return the Julian chronology
+     * @deprecated Use ChronologyType.julian().getChronology(zone)
      */
     public static Chronology getJulian(DateTimeZone zone) {
         return JulianChronology.getInstance(zone);
@@ -293,6 +308,7 @@ public static Chronology getJulian(DateTimeZone zone) {
      * year 1 in the Buddhist calendar.
      *
      * @return the Buddhist chronology
+     * @deprecated Use ChronologyType.buddhist().getChronology()
      */
     public static Chronology getBuddhist() {
         return BuddhistChronology.getInstance();
@@ -306,6 +322,7 @@ public static Chronology getBuddhist() {
      * year 1 in the Buddhist calendar.
      *
      * @return the Buddhist chronology
+     * @deprecated Use ChronologyType.buddhist().getChronologyUTC()
      */
     public static Chronology getBuddhistUTC() {
         return BuddhistChronology.getInstanceUTC();
@@ -320,6 +337,7 @@ public static Chronology getBuddhistUTC() {
      *
      * @param zone  the zone to use, null means default zone
      * @return the Buddhist chronology
+     * @deprecated Use ChronologyType.buddhist().getChronology(zone)
      */
     public static Chronology getBuddhist(DateTimeZone zone) {
         return BuddhistChronology.getInstance(zone);
@@ -338,6 +356,7 @@ public static Chronology getBuddhist(DateTimeZone zone) {
      * The chronology cannot be used before the first Coptic year.
      *
      * @return the Coptic chronology
+     * @deprecated Use ChronologyType.coptic().getChronology()
      */
     public static Chronology getCoptic() {
         return CopticChronology.getInstance();
@@ -355,6 +374,7 @@ public static Chronology getCoptic() {
      * The chronology cannot be used before the first Coptic year.
      *
      * @return the Coptic chronology
+     * @deprecated Use ChronologyType.coptic().getChronologyUTC()
      */
     public static Chronology getCopticUTC() {
         return CopticChronology.getInstanceUTC();
@@ -373,6 +393,7 @@ public static Chronology getCopticUTC() {
      *
      * @param zone  the zone to use, null means default zone
      * @return the Coptic chronology
+     * @deprecated Use ChronologyType.coptic().getChronology(zone)
      */
     public static Chronology getCoptic(DateTimeZone zone) {
         return CopticChronology.getInstance(zone);

From f6e53770a373272f8779b61116c6a36660644963 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Wed, 7 Sep 2005 18:26:06 +0000
Subject: [PATCH 037/130] Added tests for FieldUtils.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@894 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/test/org/joda/time/field/TestAll.java |   2 +
 .../org/joda/time/field/TestFieldUtils.java   | 191 ++++++++++++++++++
 2 files changed, 193 insertions(+)
 create mode 100644 JodaTime/src/test/org/joda/time/field/TestFieldUtils.java

diff --git a/JodaTime/src/test/org/joda/time/field/TestAll.java b/JodaTime/src/test/org/joda/time/field/TestAll.java
index 8d665f3f9..12b3ec72e 100644
--- a/JodaTime/src/test/org/joda/time/field/TestAll.java
+++ b/JodaTime/src/test/org/joda/time/field/TestAll.java
@@ -42,6 +42,8 @@ public static void main(String args[]) {
     public static Test suite() {
         TestSuite suite = new TestSuite();
         
+        suite.addTest(TestFieldUtils.suite());
+
         suite.addTest(TestBaseDateTimeField.suite());
         suite.addTest(TestOffsetDateTimeField.suite());
         suite.addTest(TestPreciseDurationDateTimeField.suite());
diff --git a/JodaTime/src/test/org/joda/time/field/TestFieldUtils.java b/JodaTime/src/test/org/joda/time/field/TestFieldUtils.java
new file mode 100644
index 000000000..e01fdef88
--- /dev/null
+++ b/JodaTime/src/test/org/joda/time/field/TestFieldUtils.java
@@ -0,0 +1,191 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.field;
+
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+/**
+ * 
+ *
+ * @author Brian S O'Neill
+ */
+public class TestFieldUtils extends TestCase {
+    public static void main(String[] args) {
+        junit.textui.TestRunner.run(suite());
+    }
+
+    public static TestSuite suite() {
+        return new TestSuite(TestFieldUtils.class);
+    }
+
+    public TestFieldUtils(String name) {
+        super(name);
+    }
+
+    public void testSafeAddInt() {
+        assertEquals(0, FieldUtils.safeAdd(0, 0));
+
+        assertEquals(5, FieldUtils.safeAdd(2, 3));
+        assertEquals(-1, FieldUtils.safeAdd(2, -3));
+        assertEquals(1, FieldUtils.safeAdd(-2, 3));
+        assertEquals(-5, FieldUtils.safeAdd(-2, -3));
+
+        assertEquals(Integer.MAX_VALUE - 1, FieldUtils.safeAdd(Integer.MAX_VALUE, -1));
+        assertEquals(Integer.MIN_VALUE + 1, FieldUtils.safeAdd(Integer.MIN_VALUE, 1));
+
+        assertEquals(-1, FieldUtils.safeAdd(Integer.MIN_VALUE, Integer.MAX_VALUE));
+        assertEquals(-1, FieldUtils.safeAdd(Integer.MAX_VALUE, Integer.MIN_VALUE));
+
+        try {
+            FieldUtils.safeAdd(Integer.MAX_VALUE, 1);
+            fail();
+        } catch (ArithmeticException e) {
+        }
+
+        try {
+            FieldUtils.safeAdd(Integer.MAX_VALUE, 100);
+            fail();
+        } catch (ArithmeticException e) {
+        }
+
+        try {
+            FieldUtils.safeAdd(Integer.MAX_VALUE, Integer.MAX_VALUE);
+            fail();
+        } catch (ArithmeticException e) {
+        }
+
+        try {
+            FieldUtils.safeAdd(Integer.MIN_VALUE, -1);
+            fail();
+        } catch (ArithmeticException e) {
+        }
+
+        try {
+            FieldUtils.safeAdd(Integer.MIN_VALUE, -100);
+            fail();
+        } catch (ArithmeticException e) {
+        }
+
+        try {
+            FieldUtils.safeAdd(Integer.MIN_VALUE, Integer.MIN_VALUE);
+            fail();
+        } catch (ArithmeticException e) {
+        }
+    }
+
+    public void testSafeAddLong() {
+        assertEquals(0L, FieldUtils.safeAdd(0L, 0L));
+
+        assertEquals(5L, FieldUtils.safeAdd(2L, 3L));
+        assertEquals(-1L, FieldUtils.safeAdd(2L, -3L));
+        assertEquals(1L, FieldUtils.safeAdd(-2L, 3L));
+        assertEquals(-5L, FieldUtils.safeAdd(-2L, -3L));
+
+        assertEquals(Long.MAX_VALUE - 1, FieldUtils.safeAdd(Long.MAX_VALUE, -1L));
+        assertEquals(Long.MIN_VALUE + 1, FieldUtils.safeAdd(Long.MIN_VALUE, 1L));
+
+        assertEquals(-1, FieldUtils.safeAdd(Long.MIN_VALUE, Long.MAX_VALUE));
+        assertEquals(-1, FieldUtils.safeAdd(Long.MAX_VALUE, Long.MIN_VALUE));
+
+        try {
+            FieldUtils.safeAdd(Long.MAX_VALUE, 1L);
+            fail();
+        } catch (ArithmeticException e) {
+        }
+
+        try {
+            FieldUtils.safeAdd(Long.MAX_VALUE, 100L);
+            fail();
+        } catch (ArithmeticException e) {
+        }
+
+        try {
+            FieldUtils.safeAdd(Long.MAX_VALUE, Long.MAX_VALUE);
+            fail();
+        } catch (ArithmeticException e) {
+        }
+
+        try {
+            FieldUtils.safeAdd(Long.MIN_VALUE, -1L);
+            fail();
+        } catch (ArithmeticException e) {
+        }
+
+        try {
+            FieldUtils.safeAdd(Long.MIN_VALUE, -100L);
+            fail();
+        } catch (ArithmeticException e) {
+        }
+
+        try {
+            FieldUtils.safeAdd(Long.MIN_VALUE, Long.MIN_VALUE);
+            fail();
+        } catch (ArithmeticException e) {
+        }
+    }
+
+    public void testSafeSubtractLong() {
+        assertEquals(0L, FieldUtils.safeSubtract(0L, 0L));
+
+        assertEquals(-1L, FieldUtils.safeSubtract(2L, 3L));
+        assertEquals(5L, FieldUtils.safeSubtract(2L, -3L));
+        assertEquals(-5L, FieldUtils.safeSubtract(-2L, 3L));
+        assertEquals(1L, FieldUtils.safeSubtract(-2L, -3L));
+
+        assertEquals(Long.MAX_VALUE - 1, FieldUtils.safeSubtract(Long.MAX_VALUE, 1L));
+        assertEquals(Long.MIN_VALUE + 1, FieldUtils.safeSubtract(Long.MIN_VALUE, -1L));
+
+        assertEquals(0, FieldUtils.safeSubtract(Long.MIN_VALUE, Long.MIN_VALUE));
+        assertEquals(0, FieldUtils.safeSubtract(Long.MAX_VALUE, Long.MAX_VALUE));
+
+        try {
+            FieldUtils.safeSubtract(Long.MIN_VALUE, 1L);
+            fail();
+        } catch (ArithmeticException e) {
+        }
+
+        try {
+            FieldUtils.safeSubtract(Long.MIN_VALUE, 100L);
+            fail();
+        } catch (ArithmeticException e) {
+        }
+
+        try {
+            FieldUtils.safeSubtract(Long.MIN_VALUE, Long.MAX_VALUE);
+            fail();
+        } catch (ArithmeticException e) {
+        }
+
+        try {
+            FieldUtils.safeSubtract(Long.MAX_VALUE, -1L);
+            fail();
+        } catch (ArithmeticException e) {
+        }
+
+        try {
+            FieldUtils.safeSubtract(Long.MAX_VALUE, -100L);
+            fail();
+        } catch (ArithmeticException e) {
+        }
+
+        try {
+            FieldUtils.safeSubtract(Long.MAX_VALUE, Long.MIN_VALUE);
+            fail();
+        } catch (ArithmeticException e) {
+        }
+    }
+}

From 3dd31f2d88ad2109502a508bfaf1d81f9f7a3808 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Wed, 7 Sep 2005 18:26:59 +0000
Subject: [PATCH 038/130] Improved overflow detection and handling.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@895 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../org/joda/time/chrono/ZonedChronology.java | 142 +++++++++++++-----
 .../java/org/joda/time/field/FieldUtils.java  |  40 ++---
 .../joda/time/format/DateTimeFormatter.java   |  16 +-
 .../org/joda/time/tz/DateTimeZoneBuilder.java |  18 +++
 4 files changed, 154 insertions(+), 62 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java b/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java
index f13a00d04..7bbed04d4 100644
--- a/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java
@@ -247,11 +247,11 @@ public String toString() {
             }
             iField = field;
             iTimeField = useTimeArithmetic(field);
-            this.iZone = zone;
+            iZone = zone;
         }
 
         public boolean isPrecise() {
-            return iTimeField ? iField.isPrecise() : iZone.isFixed();
+            return iTimeField ? iField.isPrecise() : this.iZone.isFixed();
         }
 
         public long getUnitMillis() {
@@ -259,46 +259,76 @@ public long getUnitMillis() {
         }
 
         public int getValue(long duration, long instant) {
-            return iField.getValue(duration, instant + this.iZone.getOffset(instant));
+            return iField.getValue(duration, addOffset(instant));
         }
 
         public long getValueAsLong(long duration, long instant) {
-            return iField.getValueAsLong(duration, instant + this.iZone.getOffset(instant));
+            return iField.getValueAsLong(duration, addOffset(instant));
         }
 
         public long getMillis(int value, long instant) {
-            return iField.getMillis(value, instant + this.iZone.getOffset(instant));
+            return iField.getMillis(value, addOffset(instant));
         }
 
         public long getMillis(long value, long instant) {
-            return iField.getMillis(value, instant + this.iZone.getOffset(instant));
+            return iField.getMillis(value, addOffset(instant));
         }
 
         public long add(long instant, int value) {
-            int offset = this.iZone.getOffset(instant);
+            int offset = getOffsetToAdd(instant);
             instant = iField.add(instant + offset, value);
-            return instant - (iTimeField ? offset : this.iZone.getOffsetFromLocal(instant));
+            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));
         }
 
         public long add(long instant, long value) {
-            int offset = this.iZone.getOffset(instant);
+            int offset = getOffsetToAdd(instant);
             instant = iField.add(instant + offset, value);
-            return instant - (iTimeField ? offset : this.iZone.getOffsetFromLocal(instant));
+            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));
         }
 
         public int getDifference(long minuendInstant, long subtrahendInstant) {
-            int offset = this.iZone.getOffset(subtrahendInstant);
+            int offset = getOffsetToAdd(subtrahendInstant);
             return iField.getDifference
-                (minuendInstant + (iTimeField ? offset : this.iZone.getOffset(minuendInstant)),
+                (minuendInstant + (iTimeField ? offset : getOffsetToAdd(minuendInstant)),
                  subtrahendInstant + offset);
         }
 
         public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {
-            int offset = this.iZone.getOffset(subtrahendInstant);
+            int offset = getOffsetToAdd(subtrahendInstant);
             return iField.getDifferenceAsLong
-                (minuendInstant + (iTimeField ? offset : this.iZone.getOffset(minuendInstant)),
+                (minuendInstant + (iTimeField ? offset : getOffsetToAdd(minuendInstant)),
                  subtrahendInstant + offset);
         }
+
+        private int getOffsetToAdd(long instant) {
+            int offset = this.iZone.getOffset(instant);
+            long sum = instant + offset;
+            // If there is a sign change, but the two values have the same sign...
+            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {
+                throw new ArithmeticException("Adding time zone offset caused overflow");
+            }
+            return offset;
+        }
+
+        private int getOffsetFromLocalToSubtract(long instant) {
+            int offset = this.iZone.getOffsetFromLocal(instant);
+            long diff = instant - offset;
+            // If there is a sign change, but the two values have different signs...
+            if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {
+                throw new ArithmeticException("Subtracting time zone offset caused overflow");
+            }
+            return offset;
+        }
+
+        private long addOffset(long instant) {
+            int offset = this.iZone.getOffset(instant);
+            long sum = instant + offset;
+            // If there is a sign change, but the two values have the same sign...
+            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {
+                throw new ArithmeticException("Adding time zone offset caused overflow");
+            }
+            return sum;
+        }
     }
 
     /**
@@ -327,7 +357,7 @@ public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {
                 throw new IllegalArgumentException();
             }
             iField = field;
-            this.iZone = zone;
+            iZone = zone;
             iDurationField = durationField;
             iTimeField = useTimeArithmetic(durationField);
             iRangeDurationField = rangeDurationField;
@@ -339,40 +369,40 @@ public boolean isLenient() {
         }
 
         public int get(long instant) {
-            return iField.get(instant + this.iZone.getOffset(instant));
+            return iField.get(addOffset(instant));
         }
 
         public String getAsText(long instant, Locale locale) {
-            return iField.getAsText(instant + this.iZone.getOffset(instant), locale);
+            return iField.getAsText(addOffset(instant), locale);
         }
 
         public String getAsShortText(long instant, Locale locale) {
-            return iField.getAsShortText(instant + this.iZone.getOffset(instant), locale);
+            return iField.getAsShortText(addOffset(instant), locale);
         }
 
         public long add(long instant, int value) {
-            int offset = this.iZone.getOffset(instant);
+            int offset = getOffsetToAdd(instant);
             instant = iField.add(instant + offset, value);
-            return instant - (iTimeField ? offset : this.iZone.getOffsetFromLocal(instant));
+            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));
         }
 
         public long add(long instant, long value) {
-            int offset = this.iZone.getOffset(instant);
+            int offset = getOffsetToAdd(instant);
             instant = iField.add(instant + offset, value);
-            return instant - (iTimeField ? offset : this.iZone.getOffsetFromLocal(instant));
+            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));
         }
 
         public long addWrapField(long instant, int value) {
-            int offset = this.iZone.getOffset(instant);
+            int offset = getOffsetToAdd(instant);
             instant = iField.addWrapField(instant + offset, value);
-            return instant - (iTimeField ? offset : this.iZone.getOffsetFromLocal(instant));
+            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));
         }
 
         public long set(long instant, int value) {
-            long offset = this.iZone.getOffset(instant);
+            long offset = getOffsetToAdd(instant);
 
             instant = iField.set(instant + offset, value);
-            long offsetFromLocal = this.iZone.getOffsetFromLocal(instant);
+            long offsetFromLocal = getOffsetFromLocalToSubtract(instant);
             instant -= offsetFromLocal;
 
             if (offset != offsetFromLocal) {
@@ -386,22 +416,22 @@ public long set(long instant, int value) {
         }
 
         public long set(long instant, String text, Locale locale) {
-            instant = iField.set(instant + this.iZone.getOffset(instant), text, locale);
+            instant = iField.set(addOffset(instant), text, locale);
             // Cannot verify that new value stuck because set may be lenient.
-            return instant - this.iZone.getOffsetFromLocal(instant);
+            return instant - getOffsetFromLocalToSubtract(instant);
         }
 
         public int getDifference(long minuendInstant, long subtrahendInstant) {
-            int offset = this.iZone.getOffset(subtrahendInstant);
+            int offset = getOffsetToAdd(subtrahendInstant);
             return iField.getDifference
-                (minuendInstant + (iTimeField ? offset : this.iZone.getOffset(minuendInstant)),
+                (minuendInstant + (iTimeField ? offset : getOffsetToAdd(minuendInstant)),
                  subtrahendInstant + offset);
         }
 
         public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {
-            int offset = this.iZone.getOffset(subtrahendInstant);
+            int offset = getOffsetToAdd(subtrahendInstant);
             return iField.getDifferenceAsLong
-                (minuendInstant + (iTimeField ? offset : this.iZone.getOffset(minuendInstant)),
+                (minuendInstant + (iTimeField ? offset : getOffsetToAdd(minuendInstant)),
                  subtrahendInstant + offset);
         }
 
@@ -414,11 +444,11 @@ public final DurationField getRangeDurationField() {
         }
 
         public boolean isLeap(long instant) {
-            return iField.isLeap(instant + this.iZone.getOffset(instant));
+            return iField.isLeap(addOffset(instant));
         }
 
         public int getLeapAmount(long instant) {
-            return iField.getLeapAmount(instant + this.iZone.getOffset(instant));
+            return iField.getLeapAmount(addOffset(instant));
         }
 
         public final DurationField getLeapDurationField() {
@@ -426,19 +456,19 @@ public final DurationField getLeapDurationField() {
         }
 
         public long roundFloor(long instant) {
-            int offset = this.iZone.getOffset(instant);
+            int offset = getOffsetToAdd(instant);
             instant = iField.roundFloor(instant + offset);
-            return instant - (iTimeField ? offset : this.iZone.getOffsetFromLocal(instant));
+            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));
         }
 
         public long roundCeiling(long instant) {
-            int offset = this.iZone.getOffset(instant);
+            int offset = getOffsetToAdd(instant);
             instant = iField.roundCeiling(instant + offset);
-            return instant - (iTimeField ? offset : this.iZone.getOffsetFromLocal(instant));
+            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));
         }
 
         public long remainder(long instant) {
-            return iField.remainder(instant + this.iZone.getOffset(instant));
+            return iField.remainder(addOffset(instant));
         }
 
         public int getMinimumValue() {
@@ -446,7 +476,7 @@ public int getMinimumValue() {
         }
 
         public int getMinimumValue(long instant) {
-            return iField.getMinimumValue(instant + this.iZone.getOffset(instant));
+            return iField.getMinimumValue(addOffset(instant));
         }
 
         public int getMinimumValue(ReadablePartial instant) {
@@ -462,7 +492,7 @@ public int getMaximumValue() {
         }
 
         public int getMaximumValue(long instant) {
-            return iField.getMaximumValue(instant + this.iZone.getOffset(instant));
+            return iField.getMaximumValue(addOffset(instant));
         }
 
         public int getMaximumValue(ReadablePartial instant) {
@@ -480,6 +510,36 @@ public int getMaximumTextLength(Locale locale) {
         public int getMaximumShortTextLength(Locale locale) {
             return iField.getMaximumShortTextLength(locale);
         }
+
+        private int getOffsetToAdd(long instant) {
+            int offset = this.iZone.getOffset(instant);
+            long sum = instant + offset;
+            // If there is a sign change, but the two values have the same sign...
+            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {
+                throw new ArithmeticException("Adding time zone offset caused overflow");
+            }
+            return offset;
+        }
+
+        private int getOffsetFromLocalToSubtract(long instant) {
+            int offset = this.iZone.getOffsetFromLocal(instant);
+            long diff = instant - offset;
+            // If there is a sign change, but the two values have different signs...
+            if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {
+                throw new ArithmeticException("Subtracting time zone offset caused overflow");
+            }
+            return offset;
+        }
+
+        private long addOffset(long instant) {
+            int offset = this.iZone.getOffset(instant);
+            long sum = instant + offset;
+            // If there is a sign change, but the two values have the same sign...
+            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {
+                throw new ArithmeticException("Adding time zone offset caused overflow");
+            }
+            return sum;
+        }
     }
 
 }
diff --git a/JodaTime/src/java/org/joda/time/field/FieldUtils.java b/JodaTime/src/java/org/joda/time/field/FieldUtils.java
index 3faf5d223..24ebf1e98 100644
--- a/JodaTime/src/java/org/joda/time/field/FieldUtils.java
+++ b/JodaTime/src/java/org/joda/time/field/FieldUtils.java
@@ -61,11 +61,13 @@ public static int safeNegate(int value) {
      * @throws ArithmeticException if the value is too big or too small
      */
     public static int safeAdd(int val1, int val2) {
-        long total = ((long) val1) + ((long) val2);
-        if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {
-            throw new ArithmeticException("The calculation caused an overflow: " + val1 +" + " + val2);
+        int sum = val1 + val2;
+        // If there is a sign change, but the two values have the same sign...
+        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {
+            throw new ArithmeticException
+                ("The calculation caused an overflow: " + val1 + " + " + val2);
         }
-        return (int) total;
+        return sum;
     }
     
     /**
@@ -77,14 +79,13 @@ public static int safeAdd(int val1, int val2) {
      * @throws ArithmeticException if the value is too big or too small
      */
     public static long safeAdd(long val1, long val2) {
-        long total = val1 + val2;
-        if (val1 > 0 && val2 > 0 && total < 0) {
-            throw new ArithmeticException("The calculation caused an overflow: " + val1 +" + " + val2);
+        long sum = val1 + val2;
+        // If there is a sign change, but the two values have the same sign...
+        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {
+            throw new ArithmeticException
+                ("The calculation caused an overflow: " + val1 + " + " + val2);
         }
-        if (val1 < 0 && val2 < 0 && total > 0) {
-            throw new ArithmeticException("The calculation caused an overflow: " + val1 +" + " + val2);
-        }
-        return total;
+        return sum;
     }
     
     /**
@@ -96,13 +97,13 @@ public static long safeAdd(long val1, long val2) {
      * @throws ArithmeticException if the value is too big or too small
      */
     public static long safeSubtract(long val1, long val2) {
-        if (val2 == Long.MIN_VALUE) {
-            if (val1 <= 0L) {
-                return (val1 - val2);
-            }
-            throw new ArithmeticException("The calculation caused an overflow: " + val1 +" - " + val2);
+        long diff = val1 - val2;
+        // If there is a sign change, but the two values have different signs...
+        if ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {
+            throw new ArithmeticException
+                ("The calculation caused an overflow: " + val1 + " - " + val2);
         }
-        return safeAdd(val1, -val2);
+        return diff;
     }
     
     /**
@@ -114,12 +115,13 @@ public static long safeSubtract(long val1, long val2) {
      * @throws ArithmeticException if the value is too big or too small
      */
     public static long safeMultiply(long val1, long val2) {
-        if (val1 == 0  || val2 == 0) {
+        if (val1 == 0 || val2 == 0) {
             return 0L;
         }
         long total = val1 * val2;
         if (total / val2 != val1) {
-            throw new ArithmeticException("The calculation caused an overflow: " + val1 +" * " + val2);
+            throw new ArithmeticException
+                ("The calculation caused an overflow: " + val1 + " * " + val2);
         }
         return total;
     }
diff --git a/JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java b/JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java
index b35dbb576..e67696e40 100644
--- a/JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java
+++ b/JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java
@@ -525,7 +525,13 @@ private void printTo(StringBuffer buf, long instant, Chronology chrono) {
         // calculations when printing multiple fields in a composite printer.
         DateTimeZone zone = chrono.getZone();
         int offset = zone.getOffset(instant);
-        iPrinter.printTo(buf, instant + offset, chrono.withUTC(), offset, zone, iLocale);
+        long adjustedInstant = instant + offset;
+        if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {
+            // Time zone offset overflow, so revert to UTC.
+            adjustedInstant = instant;
+            offset = 0;
+        }
+        iPrinter.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);
     }
 
     private void printTo(Writer buf, long instant, Chronology chrono) throws IOException {
@@ -534,7 +540,13 @@ private void printTo(Writer buf, long instant, Chronology chrono) throws IOExcep
         // calculations when printing multiple fields in a composite printer.
         DateTimeZone zone = chrono.getZone();
         int offset = zone.getOffset(instant);
-        iPrinter.printTo(buf, instant + offset, chrono.withUTC(), offset, zone, iLocale);
+        long adjustedInstant = instant + offset;
+        if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {
+            // Time zone offset overflow, so revert to UTC.
+            adjustedInstant = instant;
+            offset = 0;
+        }
+        iPrinter.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);
     }
 
     /**
diff --git a/JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java b/JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java
index 5d2543e68..934972034 100644
--- a/JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java
+++ b/JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java
@@ -1197,6 +1197,9 @@ public long nextTransition(long instant) {
             } catch (IllegalArgumentException e) {
                 // Overflowed.
                 start = instant;
+            } catch (ArithmeticException e) {
+                // Overflowed.
+                start = instant;
             }
 
             try {
@@ -1209,6 +1212,9 @@ public long nextTransition(long instant) {
             } catch (IllegalArgumentException e) {
                 // Overflowed.
                 end = instant;
+            } catch (ArithmeticException e) {
+                // Overflowed.
+                end = instant;
             }
 
             return (start > end) ? end : start;
@@ -1235,6 +1241,9 @@ public long previousTransition(long instant) {
             } catch (IllegalArgumentException e) {
                 // Overflowed.
                 start = instant;
+            } catch (ArithmeticException e) {
+                // Overflowed.
+                start = instant;
             }
 
             try {
@@ -1247,6 +1256,9 @@ public long previousTransition(long instant) {
             } catch (IllegalArgumentException e) {
                 // Overflowed.
                 end = instant;
+            } catch (ArithmeticException e) {
+                // Overflowed.
+                end = instant;
             }
 
             return ((start > end) ? start : end) - 1;
@@ -1286,6 +1298,9 @@ private Recurrence findMatchingRecurrence(long instant) {
             } catch (IllegalArgumentException e) {
                 // Overflowed.
                 start = instant;
+            } catch (ArithmeticException e) {
+                // Overflowed.
+                start = instant;
             }
 
             try {
@@ -1294,6 +1309,9 @@ private Recurrence findMatchingRecurrence(long instant) {
             } catch (IllegalArgumentException e) {
                 // Overflowed.
                 end = instant;
+            } catch (ArithmeticException e) {
+                // Overflowed.
+                end = instant;
             }
 
             return (start > end) ? startRecurrence : endRecurrence;

From 0b8ed160d41f6a192aaafb6a20a561191a6c4b0a Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Wed, 7 Sep 2005 18:36:44 +0000
Subject: [PATCH 039/130] Improved overflow detection and handling.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@896 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt | 12 ++++++++++++
 1 file changed, 12 insertions(+)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 1ef32700b..785baea8c 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -51,6 +51,18 @@ Bug fixes since 1.1
   getMaximumValue(ReadablePartial)/getMinimumValue(ReadablePartial)
   Methods returned incorrect result
 
+- ZonedChronology
+  Better detection and handling of offset calculation overflow, throwing
+  an ArithmeticException.
+
+- DateTimeZone
+  Handles offset calculation overflow errors for instants near Long.MAX_VALUE,
+  ending the offset transition sequence.
+
+- DateTimeFormatter
+  Reverts to UTC if time zone offset calculation causes overflow. This allows at least
+  the time of day fields to be printed for instants near Long.MIN_VALUE or Long.MAX_VALUE.
+
 
 Enhancements since 1.1
 ----------------------

From 37ea1f66a344bd315e101a31d55ccf0d64b37f6a Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Wed, 7 Sep 2005 18:54:35 +0000
Subject: [PATCH 040/130] Make sure display zone is also UTC.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@897 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/java/org/joda/time/format/DateTimeFormatter.java    | 6 ++++--
 1 file changed, 4 insertions(+), 2 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java b/JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java
index e67696e40..062d52198 100644
--- a/JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java
+++ b/JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java
@@ -528,8 +528,9 @@ private void printTo(StringBuffer buf, long instant, Chronology chrono) {
         long adjustedInstant = instant + offset;
         if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {
             // Time zone offset overflow, so revert to UTC.
-            adjustedInstant = instant;
+            zone = DateTimeZone.UTC;
             offset = 0;
+            adjustedInstant = instant;
         }
         iPrinter.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);
     }
@@ -543,8 +544,9 @@ private void printTo(Writer buf, long instant, Chronology chrono) throws IOExcep
         long adjustedInstant = instant + offset;
         if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {
             // Time zone offset overflow, so revert to UTC.
-            adjustedInstant = instant;
+            zone = DateTimeZone.UTC;
             offset = 0;
+            adjustedInstant = instant;
         }
         iPrinter.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);
     }

From 000f47148544e618931f0039630f8f11f1e30ba3 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Thu, 8 Sep 2005 22:35:18 +0000
Subject: [PATCH 041/130] Fix Javadoc from Gwyn Evans

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@898 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/project.xml                                          | 3 +++
 JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java | 2 +-
 2 files changed, 4 insertions(+), 1 deletion(-)

diff --git a/JodaTime/project.xml b/JodaTime/project.xml
index e587392f3..49a3287c4 100644
--- a/JodaTime/project.xml
+++ b/JodaTime/project.xml
@@ -117,6 +117,9 @@
     <contributor>
       <name>Fredrik Borgh</name>
     </contributor>
+    <contributor>
+      <name>Gwyn Evans</name>
+    </contributor>
     <contributor>
       <name>Sean Geoghegan</name>
     </contributor>
diff --git a/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java b/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java
index 0f326ee6a..4b48ae6dc 100644
--- a/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java
+++ b/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java
@@ -34,7 +34,7 @@
  * For example, to format a date time in ISO format:
  * <pre>
  * DateTime dt = new DateTime();
- * DateTimeFormatter fmt = DateTimeFormat.getInstance().dateTime();
+ * DateTimeFormatter fmt = ISODateTimeFormat.dateTime();
  * String str = fmt.print(dt);
  * </pre>
  * <p>

From 71f75eca499dbf71e47bc8db1a9ee7cde7ae33fb Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 10 Sep 2005 18:20:14 +0000
Subject: [PATCH 042/130] First website version

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@899 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/hibernate/project.properties  |  14 ++
 JodaTimeContrib/hibernate/project.xml         |  77 +++++------
 JodaTimeContrib/hibernate/xdocs/index.xml     |  74 +++++++++++
 .../hibernate/xdocs/licensecover.xml          |  41 ++++++
 .../hibernate/xdocs/navigation.xml            |  52 +++-----
 .../xdocs/stylesheets/joda-theme.css          | 121 ++++++++++++++++++
 .../xdocs/stylesheets/maven-theme.css         |   6 +-
 JodaTimeContrib/hibernate/xdocs/tasks.xml     |  19 +++
 JodaTimeContrib/hibernate/xdocs/userguide.xml |  30 +++++
 9 files changed, 355 insertions(+), 79 deletions(-)
 create mode 100644 JodaTimeContrib/hibernate/xdocs/index.xml
 create mode 100644 JodaTimeContrib/hibernate/xdocs/licensecover.xml
 create mode 100644 JodaTimeContrib/hibernate/xdocs/stylesheets/joda-theme.css
 create mode 100644 JodaTimeContrib/hibernate/xdocs/tasks.xml
 create mode 100644 JodaTimeContrib/hibernate/xdocs/userguide.xml

diff --git a/JodaTimeContrib/hibernate/project.properties b/JodaTimeContrib/hibernate/project.properties
index 3ed694952..518ee544f 100644
--- a/JodaTimeContrib/hibernate/project.properties
+++ b/JodaTimeContrib/hibernate/project.properties
@@ -2,6 +2,8 @@
 maven.xdoc.date = navigation-bottom
 maven.xdoc.date.format = yyyy-MM-dd
 # maven.xdoc.version = ${pom.currentVersion}
+maven.xdoc.legend = false;
+maven.xdoc.theme.url = ./style/joda-theme.css
 
 maven.checkstyle.properties=checkstyle.xml
 maven.junit.fork=true
@@ -11,3 +13,15 @@ maven.javadoc.public=true
 maven.javadoc.package=false
 maven.javadoc.private=false
 
+# Generate class files for specific VM version (e.g., 1.1 or 1.2). 
+# Note that the default value depends on the JVM that is running Ant. 
+# In particular, if you use JDK 1.4+ the generated classes will not be usable
+# for a 1.1 Java VM unless you explicitly set this attribute to the value 1.1 
+# (which is the default value for JDK 1.1 to 1.3).
+maven.compile.target = 1.1
+
+# Specifies the source version for the Java compiler.
+# Corresponds to the source attribute for the ant javac task. 
+# Valid values are 1.3, 1.4, 1.5. 
+maven.compile.source = 1.3
+
diff --git a/JodaTimeContrib/hibernate/project.xml b/JodaTimeContrib/hibernate/project.xml
index d7bd8129f..cf502c725 100644
--- a/JodaTimeContrib/hibernate/project.xml
+++ b/JodaTimeContrib/hibernate/project.xml
@@ -1,34 +1,39 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<!-- You are strongly recommended to use ant for compiling and building -->
-<!-- We only use and test maven for website construction -->
-
-<maven:project xmlns:maven="http://maven.apache.org/maven-v3_0_0.xsd">
+<project>
   <pomVersion>3</pomVersion>
   <id>joda-time-hibernate</id>
-  <name>Joda time Hibernate support</name>
   <groupId>joda-time</groupId>
-  <currentVersion>1.0</currentVersion>
-  <organization>
-    <name>Joda.org</name>
-    <url>http://www.joda.org</url>
-    <logo>/images/joda.png</logo>
-  </organization>
-  <inceptionYear>2002</inceptionYear>
-  <package>org.joda.time.contrib.hibernate</package>
-  <logo>/images/jodatime.png</logo>
-
+  <name>Joda time Hibernate support</name>
+  <currentVersion>0.8-dev</currentVersion>
+  <shortDescription>Joda time Hibernate support</shortDescription>
   <description>
     Contribution to Joda-Time that adds Hibernate support
   </description>
-  <shortDescription>Joda time Hibernate support</shortDescription>
-  <url>http://joda-time.sourceforge.net</url>
 
+  <url>http://joda-time.sourceforge.net/contrib/hibernate</url>
+  <logo>/images/jodatime.png</logo>
   <issueTrackingUrl>http://sourceforge.net/tracker/?atid=617889&amp;group_id=97367&amp;func=browse</issueTrackingUrl>
+  <inceptionYear>2002</inceptionYear>
+  <package>org.joda.time.contrib.hibernate</package>
 
   <siteAddress>shell.sourceforge.net</siteAddress>
   <siteDirectory>/home/groups/j/jo/joda-time/htdocs/contrib/hibernate</siteDirectory>
   <distributionDirectory>home/groups/j/jo/joda-time/htdocs/repository</distributionDirectory>
 
+  <licenses>
+    <license>
+      <name>Apache 2</name>
+      <url>http://www.apache.org/licenses/</url>
+      <distribution>repo</distribution>
+    </license>
+  </licenses>
+
+  <organization>
+    <name>Joda.org</name>
+    <url>http://www.joda.org</url>
+    <logo>/images/joda.png</logo>
+  </organization>
+
   <repository>
     <connection>scm:cvs:pserver:anonymous@cvs.sourceforge.net:/cvsroot/joda-time:JodaTimeContrib/hibernate</connection>
     <url>http://cvs.sourceforge.net/viewcvs.py/joda-time/JodaTimeContrib/hibernate/</url>
@@ -47,6 +52,18 @@
     <developer>
       <name>Mario Ivankovits</name>
       <id>imario</id>
+      <email></email>
+      <roles>
+        <role>Lead developer</role>
+      </roles>
+    </developer>
+    <developer>
+      <name>Stephen Colebourne</name>
+      <id>scolebourne</id>
+      <email></email>
+      <roles>
+        <role>Website and Release manager</role>
+      </roles>
     </developer>
   </developers>
 
@@ -56,65 +73,41 @@
       <artifactId>joda-time</artifactId>
       <version>1.0</version>
     </dependency>
-  </dependencies>
-
-  <dependencies>
     <dependency>
       <groupId>hibernate</groupId>
       <artifactId>hibernate</artifactId>
       <version>3.0.5</version>
     </dependency>
-  </dependencies>
-
-  <dependencies>
     <dependency>
       <groupId>commons-logging</groupId>
       <artifactId>commons-logging-api</artifactId>
       <version>1.0.4</version>
     </dependency>
-  </dependencies>
-
-  <dependencies>
     <dependency>
       <groupId>commons-collections</groupId>
       <artifactId>commons-collections</artifactId>
       <version>3.1</version>
     </dependency>
-  </dependencies>
-
-  <dependencies>
     <dependency>
       <groupId>hsqldb</groupId>
       <artifactId>hsqldb</artifactId>
       <version>1.7.3.3</version>
     </dependency>
-  </dependencies>
-
-  <dependencies>
     <dependency>
       <groupId>ehcache</groupId>
       <artifactId>ehcache</artifactId>
       <version>1.1</version>
     </dependency>
-  </dependencies>
-
-  <dependencies>
     <dependency>
       <groupId>dom4j</groupId>
       <artifactId>dom4j</artifactId>
       <version>1.6</version>
     </dependency>
-  </dependencies>
-
-  <dependencies>
     <dependency>
       <groupId>cglib</groupId>
       <artifactId>cglib</artifactId>
       <version>full-2.0.2</version>
     </dependency>
-  </dependencies>
-
-  <dependencies>
     <dependency>
       <groupId>jta</groupId>
       <artifactId>jta</artifactId>
@@ -159,4 +152,4 @@
      <!--report>maven-tasklist-plugin</report-->
   </reports>
 
-</maven:project>
+</project>
diff --git a/JodaTimeContrib/hibernate/xdocs/index.xml b/JodaTimeContrib/hibernate/xdocs/index.xml
new file mode 100644
index 000000000..17ff9296b
--- /dev/null
+++ b/JodaTimeContrib/hibernate/xdocs/index.xml
@@ -0,0 +1,74 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+
+<document>
+
+ <properties>
+  <title>Java date and time API - Hibernate support - Home</title>
+  <author email="scolebourne@users.sourceforge.net">Stephen Colebourne</author>
+ </properties>
+
+ <body>
+
+<section name="Joda Time - Hibernate support">
+<p>
+<a href="/index.html">Joda-Time</a> provides a complete quality alternative
+to the JDK date and time classes.
+At some point however, many projects need to persist these classes to a database.
+One popular tool for achieving this is <a href="http://www.hibernate.org/">Hibernate</a>.
+</p>
+<p>
+To ease the integration of Joda-Time and Hibernate, this sub-project was setup.
+It aims to provide the classes necessary to persist Joda-Time objects.
+</p>
+<p>
+<!--As a flavour of the tags, here's how to format a Joda-Time object in JSP:
+<source>
+  &lt;%@taglib prefix="joda" uri="http://www.joda.org/joda/time/tags" %&gt;
+  &lt;% pageContext.setAttribute("now", new org.joda.time.DateTime()); %&gt;
+  <b>&lt;joda:format value="${now}" style="SM" /&gt;</b>
+</source>-->
+<!--Version 0.8 was released on 2005-xxxx -
+<a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=xxxx">Download now</a>-->
+</p>
+</section>
+
+
+<section name="Documentation">
+<p>
+Various documentation is available:
+<ul>
+<!--<li>The user guide - <a href="userguide.html">user guide</a></li>
+<li>The javadoc for the <a href="api-release/index.html">current release</a></li>-->
+<li>The javadoc for the <a href="apidocs/index.html">latest CVS</a></li>
+<!--li>A <a href="faq.html">FAQ</a> list</li-->
+<li>The <a href="http://cvs.sourceforge.net/viewcvs.py/joda-time/JodaTimeContrib/hibernate">CVS repository</a></li>
+</ul>
+</p>
+</section>
+
+
+<section name="Releases">
+<p>
+None yet.
+<!--<a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=xxxx">Release 0.8</a>
+is the current latest release.
+This release is a beta release and may have bugs.-->
+</p>
+<p>
+The dependencies are Joda-Time 1.1 and Hibernate 3.0 (plus associated dependencies).
+We recommend JDK 1.4 or later, and have performed no testing on earlier JDKs.
+</p>
+</section>
+
+
+<section name="Support">
+<p>
+The Joda-Time Hibernate support library was contributed to Joda-Time by Mario Ivankovits.
+</p>
+<p>
+For support on bugs, using the library or to volunteer please contact the <a href="mail-lists.html">mailing list</a>
+(or email direct to the list via <a href="mailto:joda-interest@lists.sourceforge.net">joda-interest@lists.sourceforge.net</a>).
+</p>
+</section>
+</body>
+</document>
diff --git a/JodaTimeContrib/hibernate/xdocs/licensecover.xml b/JodaTimeContrib/hibernate/xdocs/licensecover.xml
new file mode 100644
index 000000000..e11306f9f
--- /dev/null
+++ b/JodaTimeContrib/hibernate/xdocs/licensecover.xml
@@ -0,0 +1,41 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+
+<document>
+ <properties>
+  <title>Java date and time API - Hibernate support - License</title>
+  <author email="scolebourne@joda.org">Stephen Colebourne</author>
+ </properties>
+
+<body>
+
+<section name="License information">
+<p>
+Joda-Time source code is released under the business-friendly
+<a href="license.html">Apache 2.0 license</a>.
+This is the same license as <a href="http://ant.apache.org">Ant</a>,
+<a href="http://www.springframework.org">Spring</a>,
+<a href="http://tomcat.apache.org">Tomcat</a> and
+<a href="http://jakarta.apache.org">Jakarta</a>.
+</p>
+<p>
+The Hibernate support contributed library depends on
+<a href="http://www.hibernate.org/">Hibernate</a>.
+Hibernate is <a href="http://www.gnu.org/copyleft/lesser.html">LGPL</a> licenced
+with specific <a href="http://www.hibernate.org/196.html">clarifications</a>.
+As a user of this library you must decide how the LGPL applies to you.
+</p>
+<p>
+As is normal with the <a href="license.html">Apache 2.0 license</a>, a
+NOTICE file exists for Joda-Time Hibernate support:
+<source>
+=============================================================================
+= NOTICE file corresponding to section 4d of the Apache License Version 2.0 =
+=============================================================================
+This product includes software developed by
+Joda.org (http://www.joda.org/).
+</source>
+</p>
+</section>
+
+</body>
+</document>
diff --git a/JodaTimeContrib/hibernate/xdocs/navigation.xml b/JodaTimeContrib/hibernate/xdocs/navigation.xml
index 5fa670478..6af8af8ed 100644
--- a/JodaTimeContrib/hibernate/xdocs/navigation.xml
+++ b/JodaTimeContrib/hibernate/xdocs/navigation.xml
@@ -6,51 +6,33 @@
   <organizationLogo href="">Joda.org</organizationLogo>
 
   <body>
-<!--    <menu name="Joda Time">
-      <item name="Overview" href="/index.html"/>
-      <item name="Quick start guide" href="/quickstart.html"/>
-      <item name="Users guide" href="/userguide.html"/>
-      <item name="FAQ" href="/faq.html"/>
-      <item name="Javadoc (Release)" href="/api-release/index.html"/>
-      <item name="License" href="/license.html"/>
-      <item name="Download" href="http://sourceforge.net/project/showfiles.php?group_id=97367"/>
+    <links>
+      <item name="Joda-Time" href="../../index.html"/>
+      <item name="JSP tags" href="../jsptags/index.html"/>
+      <item name="Hibernate" href="/index.html"/>
+    </links>
+    <menu name="Joda Time Hibernate">
+      <item name="Overview" href="index.html"/>
+      <item name="Users guide" href="userguide.html"/>
+<!--      <item name="Javadoc (Release)" href="/api-release/index.html"/>-->
+      <item name="License" href="licensecover.html"/>
+      <item name="Download" href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=xxxxxx"/>
     </menu>
-    
-    <menu name="Key concepts">
-      <item name="Instant" href="/key_instant.html"/>
-      <item name="Partial" href="/key_partial.html"/>
-      <item name="Interval" href="/key_interval.html"/>
-      <item name="Duration" href="/key_duration.html"/>
-      <item name="Period" href="/key_period.html"/>
-      <item name="Chronology" href="/key_chronology.html"/>
-    </menu>
-    
-    <menu name="Chronologies">
-      <item name="ISO8601" href="/cal_iso.html"/>
-      <item name="Buddhist" href="/cal_buddhist.html"/>
-      <item name="Coptic" href="/cal_coptic.html"/>
-      <item name="Gregorian" href="/cal_gregorian.html"/>
-      <item name="GregorianJulian" href="/cal_gj.html"/>
-      <item name="Julian" href="/cal_julian.html"/>
-    </menu>
-    
     <menu name="Development">
       <item name="Sourceforge" href="http://sourceforge.net/projects/joda-time/"/>
-      <item name="Test results" href="/junit-report.html"/>
-      <item name="Test coverage" href="/jcoverage/index.html"/>
-      <item name="Mailing lists" href="/mail-lists.html"/>
-      <item name="Tasks" href="/tasks.html"/>
-      <item name="CVS" href="http://cvs.sourceforge.net/viewcvs.py/joda-time/JodaTime/"/>
-      <item name="Javadoc (CVS)" href="/apidocs/index.html"/>
+      <item name="Mailing lists" href="mail-lists.html"/>
+      <item name="Tasks" href="tasks.html"/>
+      <item name="CVS" href="http://cvs.sourceforge.net/viewcvs.py/joda-time/JodaTimeContrib/hibernate/"/>
+      <item name="Javadoc (CVS)" href="apidocs/index.html"/>
     </menu>
--->    
+
     <menu name="Joda">
       <item name="Joda home" href="http://joda.sourceforge.net"/>
       <item name="Time" href="http://joda-time.sourceforge.net/index.html"/>
       <item name="Beans" href="http://joda.sourceforge.net/beans.html"/>
       <item name="Primitives" href="http://joda-primitives.sourceforge.net/index.html"/>
     </menu>
-    
+
     <footer>
       <a href="http://sourceforge.net">
         <img src="http://sourceforge.net/sflogo.php?group_id=97367&amp;type=2" width="125" height="37" border="0" alt="SourceForge.net Logo" />
diff --git a/JodaTimeContrib/hibernate/xdocs/stylesheets/joda-theme.css b/JodaTimeContrib/hibernate/xdocs/stylesheets/joda-theme.css
new file mode 100644
index 000000000..5d616b279
--- /dev/null
+++ b/JodaTimeContrib/hibernate/xdocs/stylesheets/joda-theme.css
@@ -0,0 +1,121 @@
+body, td, select, input, li{
+  font-family: Helvetica, Arial, sans-serif;
+  font-size: 13px;
+  background-color: #fff;
+}
+a {
+  text-decoration: none;
+}
+a:link {
+  color:#009;
+}
+a:visited  {
+  color:#009;
+}
+a:active, a:hover {
+  text-decoration: underline;
+}
+a.externalLink, a.externalLink:link, a.externalLink:visited, a.externalLink:active, a.externalLink:hover {
+  background: url(../images/external.png) right center no-repeat;
+  padding-right: 15px;
+}
+a.newWindow, a.newWindow:link, a.newWindow:visited, a.newWindow:active, a.newWindow:hover {
+  background: url(../images/newwindow.png) right center no-repeat;
+  padding-right: 18px;
+}
+h2 {
+  font-family: Verdana, Helvetica, Arial, sans-serif;
+  padding: 4px 4px 4px 6px;
+  border: 1px solid #999;
+  color: #006;
+  background-color: #eef;
+  font-weight:bold;
+  font-size: 16px;
+  margin-top: 4px;
+  margin-bottom: 6px;
+}
+h3 {
+  padding: 4px 4px 4px 6px;
+  border: 1px solid #aaa;
+  color: #006;
+  background-color: #eee;
+  font-weight: normal;
+  font-size: 14px;
+  margin-top: 4px;
+  margin-bottom: 6px;
+}
+p, ul {
+  font-size: 13px;
+  margin-top: 4px;
+  margin-bottom: 6px;
+}
+#banner {
+  background-color: #eef;
+  border-bottom: 1px solid #aaa;
+}
+#organizationLogo img, #projectLogo img {
+  border: 1px solid #999;
+}
+#breadcrumbs {
+  padding-top: 1px;
+  padding-bottom: 2px;
+  border-bottom: 1px solid #aaa;
+  background-color: #ddf;
+}
+#leftColumn {
+  margin: 8px 0 8px 4px;
+  border: 1px solid #999;
+  background-color: #eef;
+}
+#navcolumn {
+  padding: 6px 4px 0 6px;
+}
+#navcolumn h5 {
+  font-size: 12px;
+  border-bottom: 1px solid #aaaaaa;
+  padding-top: 2px;
+  font-weight: normal;
+}
+#navcolumn li {
+  font-size: 12px;
+  padding-left: 12px;
+  background-color: #eef;
+}
+#navcolumn a:active, #navcolumn a:hover {
+  text-decoration: none;
+}
+#lastPublished {
+  font-size: 10px;
+}
+table.bodyTable th {
+  color: white;
+  background-color: #bbb;
+  text-align: left;
+  font-weight: bold;
+  font-size: 13px;
+}
+
+table.bodyTable th, table.bodyTable td {
+  font-size: 13px;
+}
+
+table.bodyTable tr.a {
+  background-color: #ddd;
+}
+
+table.bodyTable tr.b {
+  background-color: #eee;
+}
+
+.source {
+  border: 1px solid #999;
+  padding: 8px;
+  margin: 6px;
+}
+#footer {
+  background-color: #eef;
+  border-top: 1px solid #999;
+}
+body {
+  padding-bottom: 0px;
+}
diff --git a/JodaTimeContrib/hibernate/xdocs/stylesheets/maven-theme.css b/JodaTimeContrib/hibernate/xdocs/stylesheets/maven-theme.css
index d2a9decd1..5d616b279 100644
--- a/JodaTimeContrib/hibernate/xdocs/stylesheets/maven-theme.css
+++ b/JodaTimeContrib/hibernate/xdocs/stylesheets/maven-theme.css
@@ -51,14 +51,16 @@ p, ul {
 }
 #banner {
   background-color: #eef;
+  border-bottom: 1px solid #aaa;
 }
 #organizationLogo img, #projectLogo img {
   border: 1px solid #999;
 }
 #breadcrumbs {
-  border-top: 1px solid #aaa;
+  padding-top: 1px;
+  padding-bottom: 2px;
   border-bottom: 1px solid #aaa;
-  background-color: #ccc;
+  background-color: #ddf;
 }
 #leftColumn {
   margin: 8px 0 8px 4px;
diff --git a/JodaTimeContrib/hibernate/xdocs/tasks.xml b/JodaTimeContrib/hibernate/xdocs/tasks.xml
new file mode 100644
index 000000000..c33821dde
--- /dev/null
+++ b/JodaTimeContrib/hibernate/xdocs/tasks.xml
@@ -0,0 +1,19 @@
+<?xml version="1.0"?>
+
+<document>
+ <properties>
+  <title>Java date and time API - Hibernate support - Tasks outstanding</title>
+  <author email="scolebourne@users.sourceforge.net">Stephen Colebourne</author>
+ </properties>
+
+ <body>
+
+<section name="Tasks outstanding">
+<p>
+The project needs a release!
+Contact the mailing lists for more details or to help.
+</p>
+</section>
+
+ </body>
+</document>
diff --git a/JodaTimeContrib/hibernate/xdocs/userguide.xml b/JodaTimeContrib/hibernate/xdocs/userguide.xml
new file mode 100644
index 000000000..7f894ad83
--- /dev/null
+++ b/JodaTimeContrib/hibernate/xdocs/userguide.xml
@@ -0,0 +1,30 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+
+<document>
+ <properties>
+  <title>Java date and time API - Hibernate support - User Guide</title>
+  <author email="scolebourne@users.sourceforge.net">Stephen Colebourne</author>
+ </properties>
+<body>
+
+<!-- ========================================================================= -->
+
+<section name="Introduction">
+<p>
+<a href="/index.html">Joda-Time</a> Hibernate support provides classes to
+persist Joda-Time based date and time objects to a database using Hibernate.
+</p>
+
+<!-- ========================================================================= -->
+
+<subsection name="TODO">
+<p>
+TODO
+</p>
+</subsection>
+</section>
+
+<!-- ========================================================================= -->
+
+</body>
+</document>

From 6cdf6fc1a7e8e0d7444574dcd5cb1d843b01cf5b Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 10 Sep 2005 18:21:27 +0000
Subject: [PATCH 043/130] Add hibernate project link

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@900 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/jsptags/xdocs/navigation.xml | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/JodaTimeContrib/jsptags/xdocs/navigation.xml b/JodaTimeContrib/jsptags/xdocs/navigation.xml
index 42335f3e5..682ad451a 100644
--- a/JodaTimeContrib/jsptags/xdocs/navigation.xml
+++ b/JodaTimeContrib/jsptags/xdocs/navigation.xml
@@ -9,6 +9,7 @@
     <links>
       <item name="Joda-Time" href="../../index.html"/>
       <item name="JSP tags" href="/index.html"/>
+      <item name="Hibernate" href="../hibernate/index.html"/>
     </links>
     <menu name="Joda Time JSP tags">
       <item name="Overview" href="index.html"/>
@@ -31,7 +32,7 @@
       <item name="Beans" href="http://joda.sourceforge.net/beans.html"/>
       <item name="Primitives" href="http://joda-primitives.sourceforge.net/index.html"/>
     </menu>
-    
+
     <footer>
       <a href="http://sourceforge.net">
         <img src="http://sourceforge.net/sflogo.php?group_id=97367&amp;type=2" width="125" height="37" border="0" alt="SourceForge.net Logo" />

From 9e98bed10c3132c448cbe7ac9586c9fbc074b95f Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 10 Sep 2005 22:43:07 +0000
Subject: [PATCH 044/130] Add hibernate sub-project

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@901 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/navigation.xml | 1 +
 1 file changed, 1 insertion(+)

diff --git a/JodaTime/xdocs/navigation.xml b/JodaTime/xdocs/navigation.xml
index 97777be95..4b8f441a3 100644
--- a/JodaTime/xdocs/navigation.xml
+++ b/JodaTime/xdocs/navigation.xml
@@ -9,6 +9,7 @@
     <links>
       <item name="Joda-Time" href="/index.html"/>
       <item name="JSP tags" href="/contrib/jsptags/index.html"/>
+      <item name="Hibernate" href="/contrib/hibernate/index.html"/>
     </links>
 
     <menu name="Joda Time">

From 865687185b5119328e709214b56dc5188fe79a4e Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 17 Sep 2005 23:36:09 +0000
Subject: [PATCH 045/130] Ignore

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@902 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/.cvsignore | 1 +
 1 file changed, 1 insertion(+)

diff --git a/JodaTimeContrib/.cvsignore b/JodaTimeContrib/.cvsignore
index fbee38f08..a348feba8 100644
--- a/JodaTimeContrib/.cvsignore
+++ b/JodaTimeContrib/.cvsignore
@@ -1,3 +1,4 @@
 bin
 .classpath
 .project
+target

From 3eb5cdcdb839ccb0e5dd5d6c6876d5425ba4cebd Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 17 Sep 2005 23:38:05 +0000
Subject: [PATCH 046/130] Presentation for BeJUG, Open office v1.1.4

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@903 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/presentation/JodaTimeBeJUG.sxi | Bin 0 -> 108944 bytes
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 JodaTimeContrib/presentation/JodaTimeBeJUG.sxi

diff --git a/JodaTimeContrib/presentation/JodaTimeBeJUG.sxi b/JodaTimeContrib/presentation/JodaTimeBeJUG.sxi
new file mode 100644
index 0000000000000000000000000000000000000000..6be83867d965718c763b3c6bce0daf098258e310
GIT binary patch
literal 108944
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
Wu%{gk4h#0Tj0gu8n+F>J;QkL~%@TwF

literal 0
HcmV?d00001


From de22e64ad990c41149af452f1e1ff906c1975efa Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Sun, 18 Sep 2005 19:41:14 +0000
Subject: [PATCH 047/130] Fixed regression in month of year calculation which
 affected max days in a month

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@904 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/chrono/CopticChronology.java | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java b/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java
index 5b9ea8d67..517ac1de1 100644
--- a/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java
@@ -307,7 +307,8 @@ int getDaysInMonthMax(int month) {
 
     //-----------------------------------------------------------------------
     int getMonthOfYear(long millis, int year) {
-        return ((int) ((millis - getYearMillis(year)) / 30)) + 1;
+        return ((int) ((millis - getYearMillis(year))
+                       / (30L * DateTimeConstants.MILLIS_PER_DAY))) + 1;
     }
     
     //-----------------------------------------------------------------------

From f574d59dd322be0df10694c296bbdff9a7a2fba2 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Sun, 18 Sep 2005 19:42:18 +0000
Subject: [PATCH 048/130] Performance optimization for overflow checking
 multiplications

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@905 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/java/org/joda/time/DateTimeZone.java  |  4 +-
 JodaTime/src/java/org/joda/time/Partial.java  |  2 +-
 .../src/java/org/joda/time/TimeOfDay.java     |  2 +-
 .../src/java/org/joda/time/YearMonthDay.java  |  2 +-
 .../java/org/joda/time/field/FieldUtils.java  | 51 ++++++++++++++++++-
 5 files changed, 54 insertions(+), 7 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/DateTimeZone.java b/JodaTime/src/java/org/joda/time/DateTimeZone.java
index c8aac17a5..f996f10c8 100644
--- a/JodaTime/src/java/org/joda/time/DateTimeZone.java
+++ b/JodaTime/src/java/org/joda/time/DateTimeZone.java
@@ -234,13 +234,13 @@ public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOff
         }
         int offset = 0;
         try {
-            int hoursInMinutes = FieldUtils.safeMultiplyToInt(hoursOffset, 60);
+            int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);
             if (hoursInMinutes < 0) {
                 minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);
             } else {
                 minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);
             }
-            offset = FieldUtils.safeMultiplyToInt(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
+            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);
         } catch (ArithmeticException ex) {
             throw new IllegalArgumentException("Offset is too large");
         }
diff --git a/JodaTime/src/java/org/joda/time/Partial.java b/JodaTime/src/java/org/joda/time/Partial.java
index 0a808ff28..095e88b69 100644
--- a/JodaTime/src/java/org/joda/time/Partial.java
+++ b/JodaTime/src/java/org/joda/time/Partial.java
@@ -594,7 +594,7 @@ public Partial withPeriodAdded(ReadablePeriod period, int scalar) {
             int index = indexOf(fieldType);
             if (index >= 0) {
                 newValues = getField(index).add(this, index, newValues,
-                        FieldUtils.safeMultiplyToInt(period.getValue(i), scalar));
+                        FieldUtils.safeMultiply(period.getValue(i), scalar));
             }
         }
         return new Partial(this, newValues);
diff --git a/JodaTime/src/java/org/joda/time/TimeOfDay.java b/JodaTime/src/java/org/joda/time/TimeOfDay.java
index a130f2199..47f6a5b21 100644
--- a/JodaTime/src/java/org/joda/time/TimeOfDay.java
+++ b/JodaTime/src/java/org/joda/time/TimeOfDay.java
@@ -510,7 +510,7 @@ public TimeOfDay withPeriodAdded(ReadablePeriod period, int scalar) {
             int index = indexOf(fieldType);
             if (index >= 0) {
                 newValues = getField(index).addWrapPartial(this, index, newValues,
-                        FieldUtils.safeMultiplyToInt(period.getValue(i), scalar));
+                        FieldUtils.safeMultiply(period.getValue(i), scalar));
             }
         }
         return new TimeOfDay(this, newValues);
diff --git a/JodaTime/src/java/org/joda/time/YearMonthDay.java b/JodaTime/src/java/org/joda/time/YearMonthDay.java
index 6462ec9dd..96bd0e4fb 100644
--- a/JodaTime/src/java/org/joda/time/YearMonthDay.java
+++ b/JodaTime/src/java/org/joda/time/YearMonthDay.java
@@ -396,7 +396,7 @@ public YearMonthDay withPeriodAdded(ReadablePeriod period, int scalar) {
             int index = indexOf(fieldType);
             if (index >= 0) {
                 newValues = getField(index).add(this, index, newValues,
-                        FieldUtils.safeMultiplyToInt(period.getValue(i), scalar));
+                        FieldUtils.safeMultiply(period.getValue(i), scalar));
             }
         }
         return new YearMonthDay(this, newValues);
diff --git a/JodaTime/src/java/org/joda/time/field/FieldUtils.java b/JodaTime/src/java/org/joda/time/field/FieldUtils.java
index 24ebf1e98..8fd0be239 100644
--- a/JodaTime/src/java/org/joda/time/field/FieldUtils.java
+++ b/JodaTime/src/java/org/joda/time/field/FieldUtils.java
@@ -113,10 +113,57 @@ public static long safeSubtract(long val1, long val2) {
      * @param val2  the second value
      * @return the new total
      * @throws ArithmeticException if the value is too big or too small
+     * @since 1.2
      */
-    public static long safeMultiply(long val1, long val2) {
-        if (val1 == 0 || val2 == 0) {
+    public static int safeMultiply(int val1, int val2) {
+        long total = (long) val1 * (long) val2;
+        if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {
+            throw new ArithmeticException
+                ("The calculation caused an overflow: " + val1 + " * " + val2);
+        }
+        return (int) total;
+    }
+
+    /**
+     * Multiply two values throwing an exception if overflow occurs.
+     * 
+     * @param val1  the first value
+     * @param scalar  the second value
+     * @return the new total
+     * @throws ArithmeticException if the value is too big or too small
+     * @since 1.2
+     */
+    public static long safeMultiply(long val1, int scalar) {
+        switch (scalar) {
+        case -1:
+            return -val1;
+        case 0:
             return 0L;
+        case 1:
+            return val1;
+        }
+        long total = val1 * scalar;
+        if (total / scalar != val1) {
+            throw new ArithmeticException
+                ("The calculation caused an overflow: " + val1 + " * " + scalar);
+        }
+        return total;
+    }
+
+    /**
+     * Multiply two values throwing an exception if overflow occurs.
+     * 
+     * @param val1  the first value
+     * @param val2  the second value
+     * @return the new total
+     * @throws ArithmeticException if the value is too big or too small
+     */
+    public static long safeMultiply(long val1, long val2) {
+        if (val2 == 1) {
+            return val1;
+        }
+        if (val2 == 0) {
+            return 0;
         }
         long total = val1 * val2;
         if (total / val2 != val1) {

From e371d1e9d2d0fa42ef1f0da9987603bd56678776 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Sun, 18 Sep 2005 19:51:40 +0000
Subject: [PATCH 049/130] Add notes for coptic bug fix and scalar performance
 improvement

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@906 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt | 9 +++++++++
 1 file changed, 9 insertions(+)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 785baea8c..120589320 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -63,6 +63,10 @@ Bug fixes since 1.1
   Reverts to UTC if time zone offset calculation causes overflow. This allows at least
   the time of day fields to be printed for instants near Long.MIN_VALUE or Long.MAX_VALUE.
 
+- CopticChronology
+  Fixed regression in month of year calculation which affected getMaximumValue
+  on dayOfMonth field.
+
 
 Enhancements since 1.1
 ----------------------
@@ -78,6 +82,11 @@ Enhancements since 1.1
 - MutableDateTime.property(DateTimeFieldType)
   Gets the property by type. Complements the method already on DateTime/DateMidnight.
 
+- FieldUtils
+  Performance optimization when adding by scalars of one or negative one. The
+  overflow detecting multiplication skips the multiply and divide check for
+  these values.
+
 
 Feedback
 --------

From f8558e673954ba1226c05e31faf426703dc620d8 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Mon, 3 Oct 2005 15:31:20 +0000
Subject: [PATCH 050/130] Updated to version 2005n.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@907 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/java/org/joda/time/tz/src/Readme.txt  |    2 +-
 JodaTime/src/java/org/joda/time/tz/src/africa | 1242 ++---
 .../src/java/org/joda/time/tz/src/antarctica  |  638 +--
 JodaTime/src/java/org/joda/time/tz/src/asia   | 3226 +++++------
 .../src/java/org/joda/time/tz/src/australasia | 2798 +++++-----
 .../src/java/org/joda/time/tz/src/backward    |  226 +-
 JodaTime/src/java/org/joda/time/tz/src/europe | 4892 ++++++++---------
 .../java/org/joda/time/tz/src/northamerica    | 4210 +++++++-------
 .../java/org/joda/time/tz/src/southamerica    | 2144 ++++----
 9 files changed, 9704 insertions(+), 9674 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
index 3abefbdcd..809543ce3 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
+++ b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
@@ -1,2 +1,2 @@
 The data files in this directory were obtained from the public tz database,
-http://www.twinsun.com/tz/tz-link.htm, version 2005m.
+http://www.twinsun.com/tz/tz-link.htm, version 2005n.
diff --git a/JodaTime/src/java/org/joda/time/tz/src/africa b/JodaTime/src/java/org/joda/time/tz/src/africa
index 87ae9e36e..88a1e4280 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/africa
+++ b/JodaTime/src/java/org/joda/time/tz/src/africa
@@ -1,621 +1,621 @@
-# @(#)africa	7.39
-
-# This data is by no means authoritative; if you think you know better,
-# go ahead and edit the file (and please send any changes to
-# tz@elsie.nci.nih.gov for general use in the future).
-
-# From Paul Eggert (1999-03-22):
-#
-# A good source for time zone historical data outside the U.S. is
-# Thomas G. Shanks, The International Atlas (5th edition),
-# San Diego: ACS Publications, Inc. (1999).
-#
-# Gwillim Law writes that a good source
-# for recent time zone data is the International Air Transport
-# Association's Standard Schedules Information Manual (IATA SSIM),
-# published semiannually.  Law sent in several helpful summaries
-# of the IATA's data after 1990.
-#
-# Except where otherwise noted, Shanks is the source for entries through 1990,
-# and IATA SSIM is the source for entries after 1990.
-#
-# Another source occasionally used is Edward W. Whitman, World Time Differences,
-# Whitman Publishing Co, 2 Niagara Av, Ealing, London (undated), which
-# I found in the UCLA library.
-#
-# A reliable and entertaining source about time zones is
-# Derek Howse, Greenwich time and longitude, Philip Wilson Publishers (1997).
-#
-# Previous editions of this database used WAT, CAT, SAT, and EAT
-# for +0:00 through +3:00, respectively,
-# but Mark R V Murray reports that
-# `SAST' is the official abbreviation for +2:00 in the country of South Africa,
-# `CAT' is commonly used for +2:00 in countries north of South Africa, and
-# `WAT' is probably the best name for +1:00, as the common phrase for
-# the area that includes Nigeria is ``West Africa''.
-# He has heard of ``Western Sahara Time'' for +0:00 but can find no reference.
-#
-# To make things confusing, `WAT' seems to have been used for -1:00 long ago;
-# I'd guess that this was because people needed _some_ name for -1:00,
-# and at the time, far west Africa was the only major land area in -1:00.
-# This usage is now obsolete, as the last use of -1:00 on the African
-# mainland seems to have been 1976 in Western Sahara.
-#
-# To summarize, the following abbreviations seem to have some currency:
-#	-1:00	WAT	West Africa Time (no longer used)
-#	 0:00	GMT	Greenwich Mean Time
-#	 2:00	CAT	Central Africa Time
-#	 2:00	SAST	South Africa Standard Time
-# and Murray suggests the following abbreviation:
-#	 1:00	WAT	West Africa Time
-# I realize that this leads to `WAT' being used for both -1:00 and 1:00
-# for times before 1976, but this is the best I can think of
-# until we get more information.
-#
-# I invented the following abbreviations; corrections are welcome!
-#	 2:00	WAST	West Africa Summer Time
-#	 2:30	BEAT	British East Africa Time (no longer used)
-#	 2:44:45 BEAUT	British East Africa Unified Time (no longer used)
-#	 3:00	CAST	Central Africa Summer Time (no longer used)
-#	 3:00	SAST	South Africa Summer Time (no longer used)
-#	 3:00	EAT	East Africa Time
-#	 4:00	EAST	East Africa Summer Time (no longer used)
-
-# Algeria
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Algeria	1916	only	-	Jun	14	23:00s	1:00	S
-Rule	Algeria	1916	1919	-	Oct	Sun<=7	23:00s	0	-
-Rule	Algeria	1917	only	-	Mar	24	23:00s	1:00	S
-Rule	Algeria	1918	only	-	Mar	 9	23:00s	1:00	S
-Rule	Algeria	1919	only	-	Mar	 1	23:00s	1:00	S
-Rule	Algeria	1920	only	-	Feb	14	23:00s	1:00	S
-Rule	Algeria	1920	only	-	Oct	23	23:00s	0	-
-Rule	Algeria	1921	only	-	Mar	14	23:00s	1:00	S
-Rule	Algeria	1921	only	-	Jun	21	23:00s	0	-
-Rule	Algeria	1939	only	-	Sep	11	23:00s	1:00	S
-Rule	Algeria	1939	only	-	Nov	19	 1:00	0	-
-Rule	Algeria	1944	1945	-	Apr	Mon<=7	 2:00	1:00	S
-Rule	Algeria	1944	only	-	Oct	 8	 2:00	0	-
-Rule	Algeria	1945	only	-	Sep	16	 1:00	0	-
-Rule	Algeria	1971	only	-	Apr	25	23:00s	1:00	S
-Rule	Algeria	1971	only	-	Sep	26	23:00s	0	-
-Rule	Algeria	1977	only	-	May	 6	 0:00	1:00	S
-Rule	Algeria	1977	only	-	Oct	21	 0:00	0	-
-Rule	Algeria	1978	only	-	Mar	24	 1:00	1:00	S
-Rule	Algeria	1978	only	-	Sep	22	 3:00	0	-
-Rule	Algeria	1980	only	-	Apr	25	 0:00	1:00	S
-Rule	Algeria	1980	only	-	Oct	31	 2:00	0	-
-# Shanks gives 0:09 for Paris Mean Time; go with Howse's more precise 0:09:21.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Algiers	0:12:12 -	LMT	1891 Mar 15 0:01
-			0:09:21	-	PMT	1911 Mar 11    # Paris Mean Time
-			0:00	Algeria	WE%sT	1940 Feb 25 2:00
-			1:00	Algeria	CE%sT	1946 Oct  7
-			0:00	-	WET	1956 Jan 29
-			1:00	-	CET	1963 Apr 14
-			0:00	Algeria	WE%sT	1977 Oct 21
-			1:00	Algeria	CE%sT	1979 Oct 26
-			0:00	Algeria	WE%sT	1981 May
-			1:00	-	CET
-
-# Angola
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Luanda	0:52:56	-	LMT	1892
-			0:52:04	-	AOT	1911 May 26 # Angola Time
-			1:00	-	WAT
-
-# Benin
-# Whitman says they switched to 1:00 in 1946, not 1934; go with Shanks.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Africa/Porto-Novo	0:10:28	-	LMT	1912
-			0:00	-	GMT	1934 Feb 26
-			1:00	-	WAT
-
-# Botswana
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Gaborone	1:43:40 -	LMT	1885
-			2:00	-	CAT	1943 Sep 19 2:00
-			2:00	1:00	CAST	1944 Mar 19 2:00
-			2:00	-	CAT
-
-# Burkina Faso
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Africa/Ouagadougou	-0:06:04 -	LMT	1912
-			 0:00	-	GMT
-
-# Burundi
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Africa/Bujumbura	1:57:28	-	LMT	1890
-			2:00	-	CAT
-
-# Cameroon
-# Whitman says they switched to 1:00 in 1920; go with Shanks.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Douala	0:38:48	-	LMT	1912
-			1:00	-	WAT
-
-# Cape Verde
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Atlantic/Cape_Verde -1:34:04 -	LMT	1907			# Praia
-			-2:00	-	CVT	1942 Sep
-			-2:00	1:00	CVST	1945 Oct 15
-			-2:00	-	CVT	1975 Nov 25 2:00
-			-1:00	-	CVT
-
-# Central African Republic
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Bangui	1:14:20	-	LMT	1912
-			1:00	-	WAT
-
-# Chad
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Ndjamena	1:00:12 -	LMT	1912
-			1:00	-	WAT	1979 Oct 14
-			1:00	1:00	WAST	1980 Mar  8
-			1:00	-	WAT
-
-# Comoros
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Indian/Comoro	2:53:04 -	LMT	1911 Jul   # Moroni, Gran Comoro
-			3:00	-	EAT
-
-# Democratic Republic of Congo
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Africa/Kinshasa	1:01:12 -	LMT	1897 Nov 9
-			1:00	-	WAT
-Zone Africa/Lubumbashi	1:49:52 -	LMT	1897 Nov 9
-			2:00	-	CAT
-
-# Republic of the Congo
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Africa/Brazzaville	1:01:08 -	LMT	1912
-			1:00	-	WAT
-
-# Cote D'Ivoire
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Abidjan	-0:16:08 -	LMT	1912
-			 0:00	-	GMT
-
-# Djibouti
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Djibouti	2:52:36 -	LMT	1911 Jul
-			3:00	-	EAT
-
-###############################################################################
-
-# Egypt
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Egypt	1940	only	-	Jul	15	0:00	1:00	S
-Rule	Egypt	1940	only	-	Oct	 1	0:00	0	-
-Rule	Egypt	1941	only	-	Apr	15	0:00	1:00	S
-Rule	Egypt	1941	only	-	Sep	16	0:00	0	-
-Rule	Egypt	1942	1944	-	Apr	 1	0:00	1:00	S
-Rule	Egypt	1942	only	-	Oct	27	0:00	0	-
-Rule	Egypt	1943	1945	-	Nov	 1	0:00	0	-
-Rule	Egypt	1945	only	-	Apr	16	0:00	1:00	S
-Rule	Egypt	1957	only	-	May	10	0:00	1:00	S
-Rule	Egypt	1957	1958	-	Oct	 1	0:00	0	-
-Rule	Egypt	1958	only	-	May	 1	0:00	1:00	S
-Rule	Egypt	1959	1981	-	May	 1	1:00	1:00	S
-Rule	Egypt	1959	1965	-	Sep	30	3:00	0	-
-Rule	Egypt	1966	1994	-	Oct	 1	3:00	0	-
-Rule	Egypt	1982	only	-	Jul	25	1:00	1:00	S
-Rule	Egypt	1983	only	-	Jul	12	1:00	1:00	S
-Rule	Egypt	1984	1988	-	May	 1	1:00	1:00	S
-Rule	Egypt	1989	only	-	May	 6	1:00	1:00	S
-Rule	Egypt	1990	1994	-	May	 1	1:00	1:00	S
-# IATA (after 1990) says transitions are at 0:00.
-# Go with IATA starting in 1995, except correct 1995 entry from 09-30 to 09-29.
-Rule	Egypt	1995	max	-	Apr	lastFri	 0:00s	1:00	S
-Rule	Egypt	1995	max	-	Sep	lastThu	23:00s	0	-
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Cairo	2:05:00 -	LMT	1900 Oct
-			2:00	Egypt	EE%sT
-
-# Equatorial Guinea
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Malabo	0:35:08 -	LMT	1912
-			0:00	-	GMT	1963 Dec 15
-			1:00	-	WAT
-
-# Eritrea
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Asmera	2:35:32 -	LMT	1870
-			2:35:32	-	AMT	1890	      # Asmera Mean Time
-			2:35:20	-	ADMT	1936 May 5    # Adis Dera MT
-			3:00	-	EAT
-
-# Ethiopia
-# From Paul Eggert (1997-10-05):
-# Shanks writes that Ethiopia had six narrowly-spaced time zones between
-# 1870 and 1890, and that they merged to 38E50 (2:35:20) in 1890.
-# We'll guess that 38E50 is for Adis Dera.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Africa/Addis_Ababa	2:34:48 -	LMT	1870
-			2:35:20	-	ADMT	1936 May 5    # Adis Dera MT
-			3:00	-	EAT
-
-# Gabon
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Africa/Libreville	0:37:48 -	LMT	1912
-			1:00	-	WAT
-
-# Gambia
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Banjul	-1:06:36 -	LMT	1912
-			-1:06:36 -	BMT	1935	# Banjul Mean Time
-			-1:00	-	WAT	1964
-			 0:00	-	GMT
-
-# Ghana
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-# Whitman says DST was observed from 1931 to ``the present''; go with Shanks.
-Rule	Ghana	1936	1942	-	Sep	 1	0:00	0:20	GHST
-Rule	Ghana	1936	1942	-	Dec	31	0:00	0	GMT
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Accra	-0:00:52 -	LMT	1918
-			 0:00	Ghana	%s
-
-# Guinea
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Conakry	-0:54:52 -	LMT	1912
-			 0:00	-	GMT	1934 Feb 26
-			-1:00	-	WAT	1960
-			 0:00	-	GMT
-
-# Guinea-Bissau
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Bissau	-1:02:20 -	LMT	1911 May 26
-			-1:00	-	WAT	1975
-			 0:00	-	GMT
-
-# Kenya
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Nairobi	2:27:16	-	LMT	1928 Jul
-			3:00	-	EAT	1930
-			2:30	-	BEAT	1940
-			2:44:45	-	BEAUT	1960
-			3:00	-	EAT
-
-# Lesotho
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Maseru	1:50:00 -	LMT	1903 Mar
-			2:00	-	SAST	1943 Sep 19 2:00
-			2:00	1:00	SAST	1944 Mar 19 2:00
-			2:00	-	SAST
-
-# Liberia
-# From Paul Eggert (2001-07-17):
-# In 1972 Liberia was the last country to switch
-# from a UTC offset that was not a multiple of 15 or 20 minutes.
-# Howse reports that it was in honor of their president's birthday.
-# Shanks reports the date as May 1, whereas Howse reports Jan; go with Shanks.
-# For Liberia before 1972, Shanks reports -0:44, whereas Howse and Whitman
-# each report -0:44:30; go with the more precise figure.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Monrovia	-0:43:08 -	LMT	1882
-			-0:43:08 -	MMT	1919 Mar # Monrovia Mean Time
-			-0:44:30 -	LRT	1972 May # Liberia Time
-			 0:00	-	GMT
-
-###############################################################################
-
-# Libya
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Libya	1951	only	-	Oct	14	2:00	1:00	S
-Rule	Libya	1952	only	-	Jan	 1	0:00	0	-
-Rule	Libya	1953	only	-	Oct	 9	2:00	1:00	S
-Rule	Libya	1954	only	-	Jan	 1	0:00	0	-
-Rule	Libya	1955	only	-	Sep	30	0:00	1:00	S
-Rule	Libya	1956	only	-	Jan	 1	0:00	0	-
-Rule	Libya	1982	1984	-	Apr	 1	0:00	1:00	S
-Rule	Libya	1982	1985	-	Oct	 1	0:00	0	-
-Rule	Libya	1985	only	-	Apr	 6	0:00	1:00	S
-Rule	Libya	1986	only	-	Apr	 4	0:00	1:00	S
-Rule	Libya	1986	only	-	Oct	 3	0:00	0	-
-Rule	Libya	1987	1989	-	Apr	 1	0:00	1:00	S
-Rule	Libya	1987	1989	-	Oct	 1	0:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Tripoli	0:52:44 -	LMT	1920
-			1:00	Libya	CE%sT	1959
-			2:00	-	EET	1982
-			1:00	Libya	CE%sT	1990 May  4
-# The following entries are all from Shanks;
-# the IATA SSIM data contain some obvious errors.
-			2:00	-	EET	1996 Sep 30
-			1:00	-	CET	1997 Apr  4
-			1:00	1:00	CEST	1997 Oct  4
-			2:00	-	EET
-
-# Madagascar
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Indian/Antananarivo 3:10:04 -	LMT	1911 Jul
-			3:00	-	EAT	1954 Feb 27 23:00s
-			3:00	1:00	EAST	1954 May 29 23:00s
-			3:00	-	EAT
-
-# Malawi
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Blantyre	2:20:00 -	LMT	1903 Mar
-			2:00	-	CAT
-
-# Mali
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Bamako	-0:32:00 -	LMT	1912
-			 0:00	-	GMT	1934 Feb 26
-			-1:00	-	WAT	1960 Jun 20
-			 0:00	-	GMT
-
-# Mauritania
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Africa/Nouakchott	-1:03:48 -	LMT	1912
-			 0:00	-	GMT	1934 Feb 26
-			-1:00	-	WAT	1960 Nov 28
-			 0:00	-	GMT
-
-# Mauritius
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Indian/Mauritius	3:50:00 -	LMT	1907		# Port Louis
-			4:00	-	MUT	# Mauritius Time
-# Agalega Is, Rodriguez
-# no information; probably like Indian/Mauritius
-
-# Mayotte
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Indian/Mayotte	3:00:56 -	LMT	1911 Jul	# Mamoutzou
-			3:00	-	EAT
-
-# Morocco
-# See the `europe' file for Spanish Morocco (Africa/Ceuta).
-# RULE	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Morocco	1939	only	-	Sep	12	 0:00	1:00	S
-Rule	Morocco	1939	only	-	Nov	19	 0:00	0	-
-Rule	Morocco	1940	only	-	Feb	25	 0:00	1:00	S
-Rule	Morocco	1945	only	-	Nov	18	 0:00	0	-
-Rule	Morocco	1950	only	-	Jun	11	 0:00	1:00	S
-Rule	Morocco	1950	only	-	Oct	29	 0:00	0	-
-Rule	Morocco	1967	only	-	Jun	 3	12:00	1:00	S
-Rule	Morocco	1967	only	-	Oct	 1	 0:00	0	-
-Rule	Morocco	1974	only	-	Jun	24	 0:00	1:00	S
-Rule	Morocco	1974	only	-	Sep	 1	 0:00	0	-
-Rule	Morocco	1976	1977	-	May	 1	 0:00	1:00	S
-Rule	Morocco	1976	only	-	Aug	 1	 0:00	0	-
-Rule	Morocco	1977	only	-	Sep	28	 0:00	0	-
-Rule	Morocco	1978	only	-	Jun	 1	 0:00	1:00	S
-Rule	Morocco	1978	only	-	Aug	 4	 0:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Africa/Casablanca	-0:30:20 -	LMT	1913 Oct 26
-			 0:00	Morocco	WE%sT	1984 Mar 16
-			 1:00	-	CET	1986
-			 0:00	-	WET
-# Western Sahara
-Zone Africa/El_Aaiun	-0:52:48 -	LMT	1934 Jan
-			-1:00	-	WAT	1976 Apr 14
-			 0:00	-	WET
-
-# Mozambique
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Maputo	2:10:20 -	LMT	1903 Mar
-			2:00	-	CAT
-
-# Namibia
-# The 1994-04-03 transition is from Shanks.
-# Shanks reports no DST after 1998-04; go with IATA.
-# RULE	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Namibia	1994	max	-	Sep	Sun>=1	2:00	1:00	S
-Rule	Namibia	1995	max	-	Apr	Sun>=1	2:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Windhoek	1:08:24 -	LMT	1892 Feb 8
-			1:30	-	SWAT	1903 Mar	# SW Africa Time
-			2:00	-	SAST	1942 Sep 20 2:00
-			2:00	1:00	SAST	1943 Mar 21 2:00
-			2:00	-	SAST	1990 Mar 21 # independence
-			2:00	-	CAT	1994 Apr  3
-			1:00	Namibia	WA%sT
-
-# Niger
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Niamey	 0:08:28 -	LMT	1912
-			-1:00	-	WAT	1934 Feb 26
-			 0:00	-	GMT	1960
-			 1:00	-	WAT
-
-# Nigeria
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Lagos	0:13:36 -	LMT	1919 Sep
-			1:00	-	WAT
-
-# Reunion
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Indian/Reunion	3:41:52 -	LMT	1911 Jun	# Saint-Denis
-			4:00	-	RET	# Reunion Time
-#
-# Scattered Islands (Iles Eparses) administered from Reunion are as follows.
-# The following information about them is taken from
-# Iles Eparses (www.outre-mer.gouv.fr/domtom/ile.htm, 1997-07-22, in French;
-# no longer available as of 1999-08-17).
-# We have no info about their time zone histories.
-#
-# Bassas da India - uninhabited
-# Europa Island - inhabited from 1905 to 1910 by two families
-# Glorioso Is - inhabited until at least 1958
-# Juan de Nova - uninhabited
-# Tromelin - inhabited until at least 1958
-
-# Rwanda
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Kigali	2:00:16 -	LMT	1935 Jun
-			2:00	-	CAT
-
-# St Helena
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Atlantic/St_Helena	-0:22:48 -	LMT	1890		# Jamestown
-			-0:22:48 -	JMT	1951	# Jamestown Mean Time
-			 0:00	-	GMT
-# The other parts of the St Helena territory are similar:
-#	Tristan da Cunha: on GMT, say Whitman and the CIA
-#	Ascension: on GMT, says usno1995 and the CIA
-#	Gough (scientific station since 1955; sealers wintered previously):
-#		on GMT, says the CIA
-#	Inaccessible, Nightingale: no information, but probably GMT
-
-# Sao Tome and Principe
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Sao_Tome	 0:26:56 -	LMT	1884
-			-0:36:32 -	LMT	1912	# Lisbon Mean Time
-			 0:00	-	GMT
-
-# Senegal
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Dakar	-1:09:44 -	LMT	1912
-			-1:00	-	WAT	1941 Jun
-			 0:00	-	GMT
-
-# Seychelles
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Indian/Mahe	3:41:48 -	LMT	1906 Jun	# Victoria
-			4:00	-	SCT	# Seychelles Time
-# From Paul Eggert (2001-05-30):
-# Aldabra, Farquhar, and Desroches, originally dependencies of the
-# Seychelles, were transferred to the British Indian Ocean Territory
-# in 1965 and returned to Seychelles control in 1976.  We don't know
-# whether this affected their time zone, so omit this for now.
-# Possibly the islands were uninhabited.
-
-# Sierra Leone
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-# Whitman gives Mar 31 - Aug 31 for 1931 on; go with Shanks.
-Rule	SL	1935	1942	-	Jun	 1	0:00	0:40	SLST
-Rule	SL	1935	1942	-	Oct	 1	0:00	0	WAT
-Rule	SL	1957	1962	-	Jun	 1	0:00	1:00	SLST
-Rule	SL	1957	1962	-	Sep	 1	0:00	0	GMT
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Freetown	-0:53:00 -	LMT	1882
-			-0:53:00 -	FMT	1913 Jun # Freetown Mean Time
-			-1:00	SL	%s	1957
-			 0:00	SL	%s
-
-# Somalia
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Africa/Mogadishu	3:01:28 -	LMT	1893 Nov
-			3:00	-	EAT	1931
-			2:30	-	BEAT	1957
-			3:00	-	EAT
-
-# South Africa
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	SA	1942	1943	-	Sep	Sun>=15	2:00	1:00	-
-Rule	SA	1943	1944	-	Mar	Sun>=15	2:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Africa/Johannesburg 1:52:00 -	LMT	1892 Feb 8
-			1:30	-	SAST	1903 Mar
-			2:00	SA	SAST
-# Marion and Prince Edward Is
-# scientific station since 1947
-# no information
-
-# Sudan
-#
-# From <a href="http://www.sunanews.net/sn13jane.html">
-# Sudan News Agency (2000-01-13)
-# </a>, also reported by Michael De Beukelaer-Dossche via Steffen Thorsen:
-# Clocks will be moved ahead for 60 minutes all over the Sudan as of noon
-# Saturday....  This was announced Thursday by Caretaker State Minister for
-# Manpower Abdul-Rahman Nur-Eddin.
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Sudan	1970	only	-	May	 1	0:00	1:00	S
-Rule	Sudan	1970	1985	-	Oct	15	0:00	0	-
-Rule	Sudan	1971	only	-	Apr	30	0:00	1:00	S
-Rule	Sudan	1972	1985	-	Apr	lastSun	0:00	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Khartoum	2:10:08 -	LMT	1931
-			2:00	Sudan	CA%sT	2000 Jan 15 12:00
-			3:00	-	EAT
-
-# Swaziland
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Mbabane	2:04:24 -	LMT	1903 Mar
-			2:00	-	SAST
-
-# Tanzania
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Africa/Dar_es_Salaam 2:37:08 -	LMT	1931
-			3:00	-	EAT	1948
-			2:44:45	-	BEAUT	1961
-			3:00	-	EAT
-
-# Togo
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Lome	0:04:52 -	LMT	1893
-			0:00	-	GMT
-
-# Tunisia
-
-# From Gwillim Law (2005-04-30):
-#
-# My correspondent, Risto Nykanen, has alerted me to another adoption of DST,
-# this time in Tunisia.  According to Yahoo France News
-# <http://fr.news.yahoo.com/050426/5/4dumk.html>, in a story attributed to AP
-# and dated 2005-04-26, "Tunisia has decided to advance its official time by
-# one hour, starting on Sunday, May 1.  Henceforth, Tunisian time will be
-# UTC+2 instead of UTC+1.  The change will take place at 23:00 UTC next
-# Saturday."  (My translation)
-#
-# From Oscar van Vlijmen (2005-05-02):
-# LaPresse, the first national daily newspaper ...
-# <http://www.lapresse.tn/archives/archives280405/actualites/lheure.html>
-# ... DST for 2005: on: Sun May 1 0h standard time, off: Fri Sept. 30,
-# 1h standard time.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Tunisia	1939	only	-	Apr	15	23:00s	1:00	S
-Rule	Tunisia	1939	only	-	Nov	18	23:00s	0	-
-Rule	Tunisia	1940	only	-	Feb	25	23:00s	1:00	S
-Rule	Tunisia	1941	only	-	Oct	 6	 0:00	0	-
-Rule	Tunisia	1942	only	-	Mar	 9	 0:00	1:00	S
-Rule	Tunisia	1942	only	-	Nov	 2	 3:00	0	-
-Rule	Tunisia	1943	only	-	Mar	29	 2:00	1:00	S
-Rule	Tunisia	1943	only	-	Apr	17	 2:00	0	-
-Rule	Tunisia	1943	only	-	Apr	25	 2:00	1:00	S
-Rule	Tunisia	1943	only	-	Oct	 4	 2:00	0	-
-Rule	Tunisia	1944	1945	-	Apr	Mon>=1	 2:00	1:00	S
-Rule	Tunisia	1944	only	-	Oct	 8	 0:00	0	-
-Rule	Tunisia	1945	only	-	Sep	16	 0:00	0	-
-Rule	Tunisia	1977	only	-	Apr	30	 0:00s	1:00	S
-Rule	Tunisia	1977	only	-	Sep	24	 0:00s	0	-
-Rule	Tunisia	1978	only	-	May	 1	 0:00s	1:00	S
-Rule	Tunisia	1978	only	-	Oct	 1	 0:00s	0	-
-Rule	Tunisia	1988	only	-	Jun	 1	 0:00s	1:00	S
-Rule	Tunisia	1988	1990	-	Sep	lastSun	 0:00s	0	-
-Rule	Tunisia	1989	only	-	Mar	26	 0:00s	1:00	S
-Rule	Tunisia	1990	only	-	May	 1	 0:00s	1:00	S
-Rule	Tunisia	2005	only	-	May	 1	 0:00s	1:00	S
-Rule	Tunisia	2005	only	-	Sep	30	 1:00s	0	-
-# Shanks gives 0:09 for Paris Mean Time; go with Howse's more precise 0:09:21.
-# Shanks says the 1911 switch occurred on Mar 9; go with Howse's Mar 11.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Tunis	0:40:44 -	LMT	1881 May 12
-			0:09:21	-	PMT	1911 Mar 11    # Paris Mean Time
-			1:00	Tunisia	CE%sT
-
-# Uganda
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Kampala	2:09:40 -	LMT	1928 Jul
-			3:00	-	EAT	1930
-			2:30	-	BEAT	1948
-			2:44:45	-	BEAUT	1957
-			3:00	-	EAT
-
-# Zambia
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Lusaka	1:53:08 -	LMT	1903 Mar
-			2:00	-	CAT
-
-# Zimbabwe
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Harare	2:04:12 -	LMT	1903 Mar
-			2:00	-	CAT
+# @(#)africa	7.39
+
+# This data is by no means authoritative; if you think you know better,
+# go ahead and edit the file (and please send any changes to
+# tz@elsie.nci.nih.gov for general use in the future).
+
+# From Paul Eggert (1999-03-22):
+#
+# A good source for time zone historical data outside the U.S. is
+# Thomas G. Shanks, The International Atlas (5th edition),
+# San Diego: ACS Publications, Inc. (1999).
+#
+# Gwillim Law writes that a good source
+# for recent time zone data is the International Air Transport
+# Association's Standard Schedules Information Manual (IATA SSIM),
+# published semiannually.  Law sent in several helpful summaries
+# of the IATA's data after 1990.
+#
+# Except where otherwise noted, Shanks is the source for entries through 1990,
+# and IATA SSIM is the source for entries after 1990.
+#
+# Another source occasionally used is Edward W. Whitman, World Time Differences,
+# Whitman Publishing Co, 2 Niagara Av, Ealing, London (undated), which
+# I found in the UCLA library.
+#
+# A reliable and entertaining source about time zones is
+# Derek Howse, Greenwich time and longitude, Philip Wilson Publishers (1997).
+#
+# Previous editions of this database used WAT, CAT, SAT, and EAT
+# for +0:00 through +3:00, respectively,
+# but Mark R V Murray reports that
+# `SAST' is the official abbreviation for +2:00 in the country of South Africa,
+# `CAT' is commonly used for +2:00 in countries north of South Africa, and
+# `WAT' is probably the best name for +1:00, as the common phrase for
+# the area that includes Nigeria is ``West Africa''.
+# He has heard of ``Western Sahara Time'' for +0:00 but can find no reference.
+#
+# To make things confusing, `WAT' seems to have been used for -1:00 long ago;
+# I'd guess that this was because people needed _some_ name for -1:00,
+# and at the time, far west Africa was the only major land area in -1:00.
+# This usage is now obsolete, as the last use of -1:00 on the African
+# mainland seems to have been 1976 in Western Sahara.
+#
+# To summarize, the following abbreviations seem to have some currency:
+#	-1:00	WAT	West Africa Time (no longer used)
+#	 0:00	GMT	Greenwich Mean Time
+#	 2:00	CAT	Central Africa Time
+#	 2:00	SAST	South Africa Standard Time
+# and Murray suggests the following abbreviation:
+#	 1:00	WAT	West Africa Time
+# I realize that this leads to `WAT' being used for both -1:00 and 1:00
+# for times before 1976, but this is the best I can think of
+# until we get more information.
+#
+# I invented the following abbreviations; corrections are welcome!
+#	 2:00	WAST	West Africa Summer Time
+#	 2:30	BEAT	British East Africa Time (no longer used)
+#	 2:44:45 BEAUT	British East Africa Unified Time (no longer used)
+#	 3:00	CAST	Central Africa Summer Time (no longer used)
+#	 3:00	SAST	South Africa Summer Time (no longer used)
+#	 3:00	EAT	East Africa Time
+#	 4:00	EAST	East Africa Summer Time (no longer used)
+
+# Algeria
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Algeria	1916	only	-	Jun	14	23:00s	1:00	S
+Rule	Algeria	1916	1919	-	Oct	Sun<=7	23:00s	0	-
+Rule	Algeria	1917	only	-	Mar	24	23:00s	1:00	S
+Rule	Algeria	1918	only	-	Mar	 9	23:00s	1:00	S
+Rule	Algeria	1919	only	-	Mar	 1	23:00s	1:00	S
+Rule	Algeria	1920	only	-	Feb	14	23:00s	1:00	S
+Rule	Algeria	1920	only	-	Oct	23	23:00s	0	-
+Rule	Algeria	1921	only	-	Mar	14	23:00s	1:00	S
+Rule	Algeria	1921	only	-	Jun	21	23:00s	0	-
+Rule	Algeria	1939	only	-	Sep	11	23:00s	1:00	S
+Rule	Algeria	1939	only	-	Nov	19	 1:00	0	-
+Rule	Algeria	1944	1945	-	Apr	Mon<=7	 2:00	1:00	S
+Rule	Algeria	1944	only	-	Oct	 8	 2:00	0	-
+Rule	Algeria	1945	only	-	Sep	16	 1:00	0	-
+Rule	Algeria	1971	only	-	Apr	25	23:00s	1:00	S
+Rule	Algeria	1971	only	-	Sep	26	23:00s	0	-
+Rule	Algeria	1977	only	-	May	 6	 0:00	1:00	S
+Rule	Algeria	1977	only	-	Oct	21	 0:00	0	-
+Rule	Algeria	1978	only	-	Mar	24	 1:00	1:00	S
+Rule	Algeria	1978	only	-	Sep	22	 3:00	0	-
+Rule	Algeria	1980	only	-	Apr	25	 0:00	1:00	S
+Rule	Algeria	1980	only	-	Oct	31	 2:00	0	-
+# Shanks gives 0:09 for Paris Mean Time; go with Howse's more precise 0:09:21.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Algiers	0:12:12 -	LMT	1891 Mar 15 0:01
+			0:09:21	-	PMT	1911 Mar 11    # Paris Mean Time
+			0:00	Algeria	WE%sT	1940 Feb 25 2:00
+			1:00	Algeria	CE%sT	1946 Oct  7
+			0:00	-	WET	1956 Jan 29
+			1:00	-	CET	1963 Apr 14
+			0:00	Algeria	WE%sT	1977 Oct 21
+			1:00	Algeria	CE%sT	1979 Oct 26
+			0:00	Algeria	WE%sT	1981 May
+			1:00	-	CET
+
+# Angola
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Luanda	0:52:56	-	LMT	1892
+			0:52:04	-	AOT	1911 May 26 # Angola Time
+			1:00	-	WAT
+
+# Benin
+# Whitman says they switched to 1:00 in 1946, not 1934; go with Shanks.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Africa/Porto-Novo	0:10:28	-	LMT	1912
+			0:00	-	GMT	1934 Feb 26
+			1:00	-	WAT
+
+# Botswana
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Gaborone	1:43:40 -	LMT	1885
+			2:00	-	CAT	1943 Sep 19 2:00
+			2:00	1:00	CAST	1944 Mar 19 2:00
+			2:00	-	CAT
+
+# Burkina Faso
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Africa/Ouagadougou	-0:06:04 -	LMT	1912
+			 0:00	-	GMT
+
+# Burundi
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Africa/Bujumbura	1:57:28	-	LMT	1890
+			2:00	-	CAT
+
+# Cameroon
+# Whitman says they switched to 1:00 in 1920; go with Shanks.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Douala	0:38:48	-	LMT	1912
+			1:00	-	WAT
+
+# Cape Verde
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Atlantic/Cape_Verde -1:34:04 -	LMT	1907			# Praia
+			-2:00	-	CVT	1942 Sep
+			-2:00	1:00	CVST	1945 Oct 15
+			-2:00	-	CVT	1975 Nov 25 2:00
+			-1:00	-	CVT
+
+# Central African Republic
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Bangui	1:14:20	-	LMT	1912
+			1:00	-	WAT
+
+# Chad
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Ndjamena	1:00:12 -	LMT	1912
+			1:00	-	WAT	1979 Oct 14
+			1:00	1:00	WAST	1980 Mar  8
+			1:00	-	WAT
+
+# Comoros
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Indian/Comoro	2:53:04 -	LMT	1911 Jul   # Moroni, Gran Comoro
+			3:00	-	EAT
+
+# Democratic Republic of Congo
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Africa/Kinshasa	1:01:12 -	LMT	1897 Nov 9
+			1:00	-	WAT
+Zone Africa/Lubumbashi	1:49:52 -	LMT	1897 Nov 9
+			2:00	-	CAT
+
+# Republic of the Congo
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Africa/Brazzaville	1:01:08 -	LMT	1912
+			1:00	-	WAT
+
+# Cote D'Ivoire
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Abidjan	-0:16:08 -	LMT	1912
+			 0:00	-	GMT
+
+# Djibouti
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Djibouti	2:52:36 -	LMT	1911 Jul
+			3:00	-	EAT
+
+###############################################################################
+
+# Egypt
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Egypt	1940	only	-	Jul	15	0:00	1:00	S
+Rule	Egypt	1940	only	-	Oct	 1	0:00	0	-
+Rule	Egypt	1941	only	-	Apr	15	0:00	1:00	S
+Rule	Egypt	1941	only	-	Sep	16	0:00	0	-
+Rule	Egypt	1942	1944	-	Apr	 1	0:00	1:00	S
+Rule	Egypt	1942	only	-	Oct	27	0:00	0	-
+Rule	Egypt	1943	1945	-	Nov	 1	0:00	0	-
+Rule	Egypt	1945	only	-	Apr	16	0:00	1:00	S
+Rule	Egypt	1957	only	-	May	10	0:00	1:00	S
+Rule	Egypt	1957	1958	-	Oct	 1	0:00	0	-
+Rule	Egypt	1958	only	-	May	 1	0:00	1:00	S
+Rule	Egypt	1959	1981	-	May	 1	1:00	1:00	S
+Rule	Egypt	1959	1965	-	Sep	30	3:00	0	-
+Rule	Egypt	1966	1994	-	Oct	 1	3:00	0	-
+Rule	Egypt	1982	only	-	Jul	25	1:00	1:00	S
+Rule	Egypt	1983	only	-	Jul	12	1:00	1:00	S
+Rule	Egypt	1984	1988	-	May	 1	1:00	1:00	S
+Rule	Egypt	1989	only	-	May	 6	1:00	1:00	S
+Rule	Egypt	1990	1994	-	May	 1	1:00	1:00	S
+# IATA (after 1990) says transitions are at 0:00.
+# Go with IATA starting in 1995, except correct 1995 entry from 09-30 to 09-29.
+Rule	Egypt	1995	max	-	Apr	lastFri	 0:00s	1:00	S
+Rule	Egypt	1995	max	-	Sep	lastThu	23:00s	0	-
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Cairo	2:05:00 -	LMT	1900 Oct
+			2:00	Egypt	EE%sT
+
+# Equatorial Guinea
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Malabo	0:35:08 -	LMT	1912
+			0:00	-	GMT	1963 Dec 15
+			1:00	-	WAT
+
+# Eritrea
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Asmera	2:35:32 -	LMT	1870
+			2:35:32	-	AMT	1890	      # Asmera Mean Time
+			2:35:20	-	ADMT	1936 May 5    # Adis Dera MT
+			3:00	-	EAT
+
+# Ethiopia
+# From Paul Eggert (1997-10-05):
+# Shanks writes that Ethiopia had six narrowly-spaced time zones between
+# 1870 and 1890, and that they merged to 38E50 (2:35:20) in 1890.
+# We'll guess that 38E50 is for Adis Dera.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Africa/Addis_Ababa	2:34:48 -	LMT	1870
+			2:35:20	-	ADMT	1936 May 5    # Adis Dera MT
+			3:00	-	EAT
+
+# Gabon
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Africa/Libreville	0:37:48 -	LMT	1912
+			1:00	-	WAT
+
+# Gambia
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Banjul	-1:06:36 -	LMT	1912
+			-1:06:36 -	BMT	1935	# Banjul Mean Time
+			-1:00	-	WAT	1964
+			 0:00	-	GMT
+
+# Ghana
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+# Whitman says DST was observed from 1931 to ``the present''; go with Shanks.
+Rule	Ghana	1936	1942	-	Sep	 1	0:00	0:20	GHST
+Rule	Ghana	1936	1942	-	Dec	31	0:00	0	GMT
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Accra	-0:00:52 -	LMT	1918
+			 0:00	Ghana	%s
+
+# Guinea
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Conakry	-0:54:52 -	LMT	1912
+			 0:00	-	GMT	1934 Feb 26
+			-1:00	-	WAT	1960
+			 0:00	-	GMT
+
+# Guinea-Bissau
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Bissau	-1:02:20 -	LMT	1911 May 26
+			-1:00	-	WAT	1975
+			 0:00	-	GMT
+
+# Kenya
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Nairobi	2:27:16	-	LMT	1928 Jul
+			3:00	-	EAT	1930
+			2:30	-	BEAT	1940
+			2:44:45	-	BEAUT	1960
+			3:00	-	EAT
+
+# Lesotho
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Maseru	1:50:00 -	LMT	1903 Mar
+			2:00	-	SAST	1943 Sep 19 2:00
+			2:00	1:00	SAST	1944 Mar 19 2:00
+			2:00	-	SAST
+
+# Liberia
+# From Paul Eggert (2001-07-17):
+# In 1972 Liberia was the last country to switch
+# from a UTC offset that was not a multiple of 15 or 20 minutes.
+# Howse reports that it was in honor of their president's birthday.
+# Shanks reports the date as May 1, whereas Howse reports Jan; go with Shanks.
+# For Liberia before 1972, Shanks reports -0:44, whereas Howse and Whitman
+# each report -0:44:30; go with the more precise figure.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Monrovia	-0:43:08 -	LMT	1882
+			-0:43:08 -	MMT	1919 Mar # Monrovia Mean Time
+			-0:44:30 -	LRT	1972 May # Liberia Time
+			 0:00	-	GMT
+
+###############################################################################
+
+# Libya
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Libya	1951	only	-	Oct	14	2:00	1:00	S
+Rule	Libya	1952	only	-	Jan	 1	0:00	0	-
+Rule	Libya	1953	only	-	Oct	 9	2:00	1:00	S
+Rule	Libya	1954	only	-	Jan	 1	0:00	0	-
+Rule	Libya	1955	only	-	Sep	30	0:00	1:00	S
+Rule	Libya	1956	only	-	Jan	 1	0:00	0	-
+Rule	Libya	1982	1984	-	Apr	 1	0:00	1:00	S
+Rule	Libya	1982	1985	-	Oct	 1	0:00	0	-
+Rule	Libya	1985	only	-	Apr	 6	0:00	1:00	S
+Rule	Libya	1986	only	-	Apr	 4	0:00	1:00	S
+Rule	Libya	1986	only	-	Oct	 3	0:00	0	-
+Rule	Libya	1987	1989	-	Apr	 1	0:00	1:00	S
+Rule	Libya	1987	1989	-	Oct	 1	0:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Tripoli	0:52:44 -	LMT	1920
+			1:00	Libya	CE%sT	1959
+			2:00	-	EET	1982
+			1:00	Libya	CE%sT	1990 May  4
+# The following entries are all from Shanks;
+# the IATA SSIM data contain some obvious errors.
+			2:00	-	EET	1996 Sep 30
+			1:00	-	CET	1997 Apr  4
+			1:00	1:00	CEST	1997 Oct  4
+			2:00	-	EET
+
+# Madagascar
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Indian/Antananarivo 3:10:04 -	LMT	1911 Jul
+			3:00	-	EAT	1954 Feb 27 23:00s
+			3:00	1:00	EAST	1954 May 29 23:00s
+			3:00	-	EAT
+
+# Malawi
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Blantyre	2:20:00 -	LMT	1903 Mar
+			2:00	-	CAT
+
+# Mali
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Bamako	-0:32:00 -	LMT	1912
+			 0:00	-	GMT	1934 Feb 26
+			-1:00	-	WAT	1960 Jun 20
+			 0:00	-	GMT
+
+# Mauritania
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Africa/Nouakchott	-1:03:48 -	LMT	1912
+			 0:00	-	GMT	1934 Feb 26
+			-1:00	-	WAT	1960 Nov 28
+			 0:00	-	GMT
+
+# Mauritius
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Indian/Mauritius	3:50:00 -	LMT	1907		# Port Louis
+			4:00	-	MUT	# Mauritius Time
+# Agalega Is, Rodriguez
+# no information; probably like Indian/Mauritius
+
+# Mayotte
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Indian/Mayotte	3:00:56 -	LMT	1911 Jul	# Mamoutzou
+			3:00	-	EAT
+
+# Morocco
+# See the `europe' file for Spanish Morocco (Africa/Ceuta).
+# RULE	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Morocco	1939	only	-	Sep	12	 0:00	1:00	S
+Rule	Morocco	1939	only	-	Nov	19	 0:00	0	-
+Rule	Morocco	1940	only	-	Feb	25	 0:00	1:00	S
+Rule	Morocco	1945	only	-	Nov	18	 0:00	0	-
+Rule	Morocco	1950	only	-	Jun	11	 0:00	1:00	S
+Rule	Morocco	1950	only	-	Oct	29	 0:00	0	-
+Rule	Morocco	1967	only	-	Jun	 3	12:00	1:00	S
+Rule	Morocco	1967	only	-	Oct	 1	 0:00	0	-
+Rule	Morocco	1974	only	-	Jun	24	 0:00	1:00	S
+Rule	Morocco	1974	only	-	Sep	 1	 0:00	0	-
+Rule	Morocco	1976	1977	-	May	 1	 0:00	1:00	S
+Rule	Morocco	1976	only	-	Aug	 1	 0:00	0	-
+Rule	Morocco	1977	only	-	Sep	28	 0:00	0	-
+Rule	Morocco	1978	only	-	Jun	 1	 0:00	1:00	S
+Rule	Morocco	1978	only	-	Aug	 4	 0:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Africa/Casablanca	-0:30:20 -	LMT	1913 Oct 26
+			 0:00	Morocco	WE%sT	1984 Mar 16
+			 1:00	-	CET	1986
+			 0:00	-	WET
+# Western Sahara
+Zone Africa/El_Aaiun	-0:52:48 -	LMT	1934 Jan
+			-1:00	-	WAT	1976 Apr 14
+			 0:00	-	WET
+
+# Mozambique
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Maputo	2:10:20 -	LMT	1903 Mar
+			2:00	-	CAT
+
+# Namibia
+# The 1994-04-03 transition is from Shanks.
+# Shanks reports no DST after 1998-04; go with IATA.
+# RULE	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Namibia	1994	max	-	Sep	Sun>=1	2:00	1:00	S
+Rule	Namibia	1995	max	-	Apr	Sun>=1	2:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Windhoek	1:08:24 -	LMT	1892 Feb 8
+			1:30	-	SWAT	1903 Mar	# SW Africa Time
+			2:00	-	SAST	1942 Sep 20 2:00
+			2:00	1:00	SAST	1943 Mar 21 2:00
+			2:00	-	SAST	1990 Mar 21 # independence
+			2:00	-	CAT	1994 Apr  3
+			1:00	Namibia	WA%sT
+
+# Niger
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Niamey	 0:08:28 -	LMT	1912
+			-1:00	-	WAT	1934 Feb 26
+			 0:00	-	GMT	1960
+			 1:00	-	WAT
+
+# Nigeria
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Lagos	0:13:36 -	LMT	1919 Sep
+			1:00	-	WAT
+
+# Reunion
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Indian/Reunion	3:41:52 -	LMT	1911 Jun	# Saint-Denis
+			4:00	-	RET	# Reunion Time
+#
+# Scattered Islands (Iles Eparses) administered from Reunion are as follows.
+# The following information about them is taken from
+# Iles Eparses (www.outre-mer.gouv.fr/domtom/ile.htm, 1997-07-22, in French;
+# no longer available as of 1999-08-17).
+# We have no info about their time zone histories.
+#
+# Bassas da India - uninhabited
+# Europa Island - inhabited from 1905 to 1910 by two families
+# Glorioso Is - inhabited until at least 1958
+# Juan de Nova - uninhabited
+# Tromelin - inhabited until at least 1958
+
+# Rwanda
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Kigali	2:00:16 -	LMT	1935 Jun
+			2:00	-	CAT
+
+# St Helena
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Atlantic/St_Helena	-0:22:48 -	LMT	1890		# Jamestown
+			-0:22:48 -	JMT	1951	# Jamestown Mean Time
+			 0:00	-	GMT
+# The other parts of the St Helena territory are similar:
+#	Tristan da Cunha: on GMT, say Whitman and the CIA
+#	Ascension: on GMT, says usno1995 and the CIA
+#	Gough (scientific station since 1955; sealers wintered previously):
+#		on GMT, says the CIA
+#	Inaccessible, Nightingale: no information, but probably GMT
+
+# Sao Tome and Principe
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Sao_Tome	 0:26:56 -	LMT	1884
+			-0:36:32 -	LMT	1912	# Lisbon Mean Time
+			 0:00	-	GMT
+
+# Senegal
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Dakar	-1:09:44 -	LMT	1912
+			-1:00	-	WAT	1941 Jun
+			 0:00	-	GMT
+
+# Seychelles
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Indian/Mahe	3:41:48 -	LMT	1906 Jun	# Victoria
+			4:00	-	SCT	# Seychelles Time
+# From Paul Eggert (2001-05-30):
+# Aldabra, Farquhar, and Desroches, originally dependencies of the
+# Seychelles, were transferred to the British Indian Ocean Territory
+# in 1965 and returned to Seychelles control in 1976.  We don't know
+# whether this affected their time zone, so omit this for now.
+# Possibly the islands were uninhabited.
+
+# Sierra Leone
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+# Whitman gives Mar 31 - Aug 31 for 1931 on; go with Shanks.
+Rule	SL	1935	1942	-	Jun	 1	0:00	0:40	SLST
+Rule	SL	1935	1942	-	Oct	 1	0:00	0	WAT
+Rule	SL	1957	1962	-	Jun	 1	0:00	1:00	SLST
+Rule	SL	1957	1962	-	Sep	 1	0:00	0	GMT
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Freetown	-0:53:00 -	LMT	1882
+			-0:53:00 -	FMT	1913 Jun # Freetown Mean Time
+			-1:00	SL	%s	1957
+			 0:00	SL	%s
+
+# Somalia
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Africa/Mogadishu	3:01:28 -	LMT	1893 Nov
+			3:00	-	EAT	1931
+			2:30	-	BEAT	1957
+			3:00	-	EAT
+
+# South Africa
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	SA	1942	1943	-	Sep	Sun>=15	2:00	1:00	-
+Rule	SA	1943	1944	-	Mar	Sun>=15	2:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Africa/Johannesburg 1:52:00 -	LMT	1892 Feb 8
+			1:30	-	SAST	1903 Mar
+			2:00	SA	SAST
+# Marion and Prince Edward Is
+# scientific station since 1947
+# no information
+
+# Sudan
+#
+# From <a href="http://www.sunanews.net/sn13jane.html">
+# Sudan News Agency (2000-01-13)
+# </a>, also reported by Michael De Beukelaer-Dossche via Steffen Thorsen:
+# Clocks will be moved ahead for 60 minutes all over the Sudan as of noon
+# Saturday....  This was announced Thursday by Caretaker State Minister for
+# Manpower Abdul-Rahman Nur-Eddin.
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Sudan	1970	only	-	May	 1	0:00	1:00	S
+Rule	Sudan	1970	1985	-	Oct	15	0:00	0	-
+Rule	Sudan	1971	only	-	Apr	30	0:00	1:00	S
+Rule	Sudan	1972	1985	-	Apr	lastSun	0:00	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Khartoum	2:10:08 -	LMT	1931
+			2:00	Sudan	CA%sT	2000 Jan 15 12:00
+			3:00	-	EAT
+
+# Swaziland
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Mbabane	2:04:24 -	LMT	1903 Mar
+			2:00	-	SAST
+
+# Tanzania
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Africa/Dar_es_Salaam 2:37:08 -	LMT	1931
+			3:00	-	EAT	1948
+			2:44:45	-	BEAUT	1961
+			3:00	-	EAT
+
+# Togo
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Lome	0:04:52 -	LMT	1893
+			0:00	-	GMT
+
+# Tunisia
+
+# From Gwillim Law (2005-04-30):
+#
+# My correspondent, Risto Nykanen, has alerted me to another adoption of DST,
+# this time in Tunisia.  According to Yahoo France News
+# <http://fr.news.yahoo.com/050426/5/4dumk.html>, in a story attributed to AP
+# and dated 2005-04-26, "Tunisia has decided to advance its official time by
+# one hour, starting on Sunday, May 1.  Henceforth, Tunisian time will be
+# UTC+2 instead of UTC+1.  The change will take place at 23:00 UTC next
+# Saturday."  (My translation)
+#
+# From Oscar van Vlijmen (2005-05-02):
+# LaPresse, the first national daily newspaper ...
+# <http://www.lapresse.tn/archives/archives280405/actualites/lheure.html>
+# ... DST for 2005: on: Sun May 1 0h standard time, off: Fri Sept. 30,
+# 1h standard time.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Tunisia	1939	only	-	Apr	15	23:00s	1:00	S
+Rule	Tunisia	1939	only	-	Nov	18	23:00s	0	-
+Rule	Tunisia	1940	only	-	Feb	25	23:00s	1:00	S
+Rule	Tunisia	1941	only	-	Oct	 6	 0:00	0	-
+Rule	Tunisia	1942	only	-	Mar	 9	 0:00	1:00	S
+Rule	Tunisia	1942	only	-	Nov	 2	 3:00	0	-
+Rule	Tunisia	1943	only	-	Mar	29	 2:00	1:00	S
+Rule	Tunisia	1943	only	-	Apr	17	 2:00	0	-
+Rule	Tunisia	1943	only	-	Apr	25	 2:00	1:00	S
+Rule	Tunisia	1943	only	-	Oct	 4	 2:00	0	-
+Rule	Tunisia	1944	1945	-	Apr	Mon>=1	 2:00	1:00	S
+Rule	Tunisia	1944	only	-	Oct	 8	 0:00	0	-
+Rule	Tunisia	1945	only	-	Sep	16	 0:00	0	-
+Rule	Tunisia	1977	only	-	Apr	30	 0:00s	1:00	S
+Rule	Tunisia	1977	only	-	Sep	24	 0:00s	0	-
+Rule	Tunisia	1978	only	-	May	 1	 0:00s	1:00	S
+Rule	Tunisia	1978	only	-	Oct	 1	 0:00s	0	-
+Rule	Tunisia	1988	only	-	Jun	 1	 0:00s	1:00	S
+Rule	Tunisia	1988	1990	-	Sep	lastSun	 0:00s	0	-
+Rule	Tunisia	1989	only	-	Mar	26	 0:00s	1:00	S
+Rule	Tunisia	1990	only	-	May	 1	 0:00s	1:00	S
+Rule	Tunisia	2005	only	-	May	 1	 0:00s	1:00	S
+Rule	Tunisia	2005	only	-	Sep	30	 1:00s	0	-
+# Shanks gives 0:09 for Paris Mean Time; go with Howse's more precise 0:09:21.
+# Shanks says the 1911 switch occurred on Mar 9; go with Howse's Mar 11.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Tunis	0:40:44 -	LMT	1881 May 12
+			0:09:21	-	PMT	1911 Mar 11    # Paris Mean Time
+			1:00	Tunisia	CE%sT
+
+# Uganda
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Kampala	2:09:40 -	LMT	1928 Jul
+			3:00	-	EAT	1930
+			2:30	-	BEAT	1948
+			2:44:45	-	BEAUT	1957
+			3:00	-	EAT
+
+# Zambia
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Lusaka	1:53:08 -	LMT	1903 Mar
+			2:00	-	CAT
+
+# Zimbabwe
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Harare	2:04:12 -	LMT	1903 Mar
+			2:00	-	CAT
diff --git a/JodaTime/src/java/org/joda/time/tz/src/antarctica b/JodaTime/src/java/org/joda/time/tz/src/antarctica
index c11d24e7d..165900c6c 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/antarctica
+++ b/JodaTime/src/java/org/joda/time/tz/src/antarctica
@@ -1,319 +1,319 @@
-# @(#)antarctica	7.25
-
-# From Paul Eggert (1999-11-15):
-# To keep things manageable, we list only locations occupied year-round; see
-# <a href="http://www.comnap.aq/comnap/comnap.nsf/P/Stations/">
-# COMNAP - Stations and Bases
-# </a>
-# and
-# <a href="http://www.spri.cam.ac.uk/bob/periant.htm">
-# Summary of the Peri-Antarctic Islands (1998-07-23)
-# </a>
-# for information.
-# Unless otherwise specified, we have no time zone information.
-#
-# Except for the French entries,
-# I made up all time zone abbreviations mentioned here; corrections welcome!
-# FORMAT is `zzz' and GMTOFF is 0 for locations while uninhabited.
-
-# These rules are stolen from the `europe' file.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	RussAQ	1981	1984	-	Apr	 1	 0:00	1:00	S
-Rule	RussAQ	1981	1983	-	Oct	 1	 0:00	0	-
-Rule	RussAQ	1984	1991	-	Sep	lastSun	 2:00s	0	-
-Rule	RussAQ	1985	1991	-	Mar	lastSun	 2:00s	1:00	S
-Rule	RussAQ	1992	only	-	Mar	lastSat	 23:00	1:00	S
-Rule	RussAQ	1992	only	-	Sep	lastSat	 23:00	0	-
-Rule	RussAQ	1993	max	-	Mar	lastSun	 2:00s	1:00	S
-Rule	RussAQ	1993	1995	-	Sep	lastSun	 2:00s	0	-
-Rule	RussAQ	1996	max	-	Oct	lastSun	 2:00s	0	-
-
-# These rules are stolen from the `southamerica' file.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	ArgAQ	1964	1966	-	Mar	 1	0:00	0	-
-Rule	ArgAQ	1964	1966	-	Oct	15	0:00	1:00	S
-Rule	ArgAQ	1967	only	-	Apr	 1	0:00	0	-
-Rule	ArgAQ	1967	1968	-	Oct	Sun<=7	0:00	1:00	S
-Rule	ArgAQ	1968	1969	-	Apr	Sun<=7	0:00	0	-
-Rule	ArgAQ	1974	only	-	Jan	23	0:00	1:00	S
-Rule	ArgAQ	1974	only	-	May	 1	0:00	0	-
-Rule	ArgAQ	1974	1976	-	Oct	Sun<=7	0:00	1:00	S
-Rule	ArgAQ	1975	1977	-	Apr	Sun<=7	0:00	0	-
-Rule	ChileAQ	1966	1997	-	Oct	Sun>=9	0:00	1:00	S
-Rule	ChileAQ	1967	1998	-	Mar	Sun>=9	0:00	0	-
-Rule	ChileAQ	1998	only	-	Sep	27	0:00	1:00	S
-Rule	ChileAQ	1999	only	-	Apr	 4	0:00	0	-
-Rule	ChileAQ	1999	max	-	Oct	Sun>=9	0:00	1:00	S
-Rule	ChileAQ	2000	max	-	Mar	Sun>=9	0:00	0	-
-
-
-# Argentina - year-round bases
-# Belgrano II, Confin Coast, -770227-0343737, since 1972-02-05
-# Esperanza, San Martin Land, -6323-05659, since 1952-12-17
-# Jubany, Potter Peninsula, King George Island, -6414-0602320, since 1982-01
-# Marambio, Seymour I, -6414-05637, since 1969-10-29
-# Orcadas, Laurie I, -6016-04444, since 1904-02-22
-# San Martin, Debenham I, -6807-06708, since 1951-03-21
-#	(except 1960-03 / 1976-03-21)
-
-# Australia - territories
-# Heard Island, McDonald Islands (uninhabited)
-#	previously sealers and scientific personnel wintered
-#	<a href="http://www.dstc.qut.edu.au/DST/marg/daylight.html">
-#	Margaret Turner reports
-#	</a> (1999-09-30) that they're UTC+5, with no DST;
-#	presumably this is when they have visitors.
-#
-# year-round bases
-# Casey, Bailey Peninsula, -6617+11032, since 1969
-# Davis, Vestfold Hills, -6835+07759, since 1957-01-13
-#	(except 1964-11 - 1969-02)
-# Mawson, Holme Bay, -6736+06253, since 1954-02-13
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Antarctica/Casey	0	-	zzz	1969
-			8:00	-	WST	# Western (Aus) Standard Time
-Zone Antarctica/Davis	0	-	zzz	1957 Jan 13
-			7:00	-	DAVT	1964 Nov # Davis Time
-			0	-	zzz	1969 Feb
-			7:00	-	DAVT
-Zone Antarctica/Mawson	0	-	zzz	1954 Feb 13
-			6:00	-	MAWT	# Mawson Time
-# References:
-# <a href="http://www.antdiv.gov.au/aad/exop/sfo/casey/casey_aws.html">
-# Casey Weather (1998-02-26)
-# </a>
-# <a href="http://www.antdiv.gov.au/aad/exop/sfo/davis/video.html">
-# Davis Station, Antarctica (1998-02-26)
-# </a>
-# <a href="http://www.antdiv.gov.au/aad/exop/sfo/mawson/video.html">
-# Mawson Station, Antarctica (1998-02-25)
-# </a>
-
-# Brazil - year-round base
-# Comandante Ferraz, King George Island, -6205+05824, since 1983/4
-
-# Chile - year-round bases and towns
-# Escudero, South Shetland Is, -621157-0585735, since 1994
-# Presidente Eduadro Frei, King George Island, -6214-05848, since 1969-03-07
-# General Bernardo O'Higgins, Antarctic Peninsula, -6319-05704, since 1948-02
-# Capitan Arturo Prat, -6230-05941
-# Villa Las Estrellas (a town), around the Frei base, since 1984-04-09
-# These locations have always used Santiago time; use TZ='America/Santiago'.
-
-# China - year-round bases
-# Great Wall, King George Island, -6213-05858, since 1985-02-20
-# Zhongshan, Larsemann Hills, Prydz Bay, -6922+07623, since 1989-02-26
-
-# France - year-round bases
-#
-# From Antoine Leca <Antoine.Leca@Renault.FR> (1997-01-20):
-# Time data are from Nicole Pailleau at the IFRTP
-# (French Institute for Polar Research and Technology).
-# She confirms that French Southern Territories and Terre Adelie bases
-# don't observe daylight saving time, even if Terre Adelie supplies came
-# from Tasmania.
-#
-# French Southern Territories with year-round inhabitants
-#
-# Martin-de-Vivies Base, Amsterdam Island, -374105+0773155, since 1950
-# Alfred-Faure Base, Crozet Islands, -462551+0515152, since 1964
-# Port-aux-Francais, Kerguelen Islands, -492110+0701303, since 1951;
-#	whaling & sealing station operated 1908/1914, 1920/1929, and 1951/1956
-#
-# St Paul Island - near Amsterdam, uninhabited
-#	fishing stations operated variously 1819/1931
-#
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Indian/Kerguelen	0	-	zzz	1950	# Port-aux-Francais
-			5:00	-	TFT	# ISO code TF Time
-#
-# year-round base in the main continent
-# Dumont-d'Urville, Ile des Petrels, -6640+14001, since 1956-11
-#
-# Another base at Port-Martin, 50km east, began operation in 1947.
-# It was destroyed by fire on 1952-01-14.
-#
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Antarctica/DumontDUrville 0 -	zzz	1947
-			10:00	-	PMT	1952 Jan 14 # Port-Martin Time
-			0	-	zzz	1956 Nov
-			10:00	-	DDUT	# Dumont-d'Urville Time
-# Reference:
-# <a href="http://www.icair.iac.org.nz/science/reports/fr/IFRTP.html">
-# Support and Development of Polar Research and Technology (1997-02-03)
-# </a>
-
-
-# Germany - year-round base
-# Georg von Neumayer, -7039-00815
-
-# India - year-round base
-# Dakshin Gangotri, -7005+01200
-
-# Japan - year-round bases
-# Dome Fuji, -7719+03942
-# Syowa, -690022+0393524
-#
-# From Hideyuki Suzuki (1999-02-06):
-# In all Japanese stations, +0300 is used as the standard time.  [See]
-# <a href="http://www.crl.go.jp/uk/uk201/basyo.htm">[reference in Japanese]</a>
-# and information from KAMO Hiroyasu.
-#
-# Syowa station, which is the first antarctic station of Japan,
-# was established on 1957-01-29.  Since Syowa station is still the main
-# station of Japan, it's appropriate for the principal location.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Antarctica/Syowa	0	-	zzz	1957 Jan 29
-			3:00	-	SYOT	# Syowa Time
-# See:
-# <a href="http://www.nipr.ac.jp/english/ara01.html">
-# NIPR Antarctic Research Activities (1999-08-17)
-# </a>
-
-# S Korea - year-round base
-# King Sejong, King George Island, -6213-05847, since 1988
-
-# New Zealand - claims
-# Balleny Islands (never inhabited)
-# Scott Island (never inhabited)
-#
-# year-round base
-# Scott, Ross Island, since 1957-01, is like Antarctica/McMurdo.
-#
-# These rules for New Zealand are stolen from the `australasia' file.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	NZAQ	1974	only	-	Nov	 3	2:00s	1:00	D
-Rule	NZAQ	1975	1988	-	Oct	lastSun	2:00s	1:00	D
-Rule	NZAQ	1989	only	-	Oct	 8	2:00s	1:00	D
-Rule	NZAQ	1990	max	-	Oct	Sun>=1	2:00s	1:00	D
-Rule	NZAQ	1975	only	-	Feb	23	2:00s	0	S
-Rule	NZAQ	1976	1989	-	Mar	Sun>=1	2:00s	0	S
-Rule	NZAQ	1990	max	-	Mar	Sun>=15	2:00s	0	S
-
-# Norway - territories
-# Bouvet (never inhabited)
-#
-# claims
-# Peter I Island (never inhabited)
-
-# Poland - year-round base
-# Arctowski, King George Island, -620945-0582745, since 1977
-
-# Russia - year-round bases
-# Bellingshausen, King George Island, -621159-0585337, since 1968-02-22
-# Mirny, Davis coast, -6633+09301, since 1956-02
-# Molodezhnaya, Alasheyev Bay, -6740+04551,
-#	year-round from 1962-02 to 1999-07-01
-# Novolazarevskaya, Queen Maud Land, -7046+01150,
-#	year-round from 1960/61 to 1992
-
-# Vostok, since 1957-12-16, temporarily closed 1994-02/1994-11
-# <a href="http://quest.arc.nasa.gov/antarctica/QA/computers/Directions,Time,ZIP">
-# From Craig Mundell (1994-12-15)</a>:
-# Vostok, which is one of the Russian stations, is set on the same
-# time as Moscow, Russia.
-#
-# From Lee Hotz (2001-03-08):
-# I queried the folks at Columbia who spent the summer at Vostok and this is
-# what they had to say about time there:
-# ``in the US Camp (East Camp) we have been on New Zealand (McMurdo)
-# time, which is 12 hours ahead of GMT. The Russian Station Vostok was
-# 6 hours behind that (although only 2 miles away, i.e. 6 hours ahead
-# of GMT). This is a time zone I think two hours east of Moscow. The
-# natural time zone is in between the two: 8 hours ahead of GMT.''
-#
-# From Paul Eggert (2001-05-04):
-# This seems to be hopelessly confusing, so I asked Lee Hotz about it
-# in person.  He said that some Antartic locations set their local
-# time so that noon is the warmest part of the day, and that this
-# changes during the year and does not necessarily correspond to mean
-# solar noon.  So the Vostok time might have been whatever the clocks
-# happened to be during their visit.  So we still don't really know what time
-# it is at Vostok.  But we'll guess UTC+6.
-#
-Zone Antarctica/Vostok	0	-	zzz	1957 Dec 16
-			6:00	-	VOST	# Vostok time
-
-# S Africa - year-round bases
-# Marion Island, -4653+03752
-# Sanae, -7141-00250
-
-# UK
-#
-# British Antarctic Territories (BAT) claims
-# South Orkney Islands
-#	scientific station from 1903
-#	whaling station at Signy I 1920/1926
-# South Shetland Islands
-#
-# year-round bases
-# Bird Island, South Georgia, -5400-03803, since 1983
-# Deception Island, -6259-06034, whaling station 1912/1931,
-#	scientific station 1943/1967,
-#	previously sealers and a scientific expedition wintered by accident,
-#	and a garrison was deployed briefly
-# Halley, Coates Land, -7535-02604, since 1956-01-06
-#	Halley is on a moving ice shelf and is periodically relocated
-#	so that it is never more than 10km from its nominal location.
-# Rothera, Adelaide Island, -6734-6808, since 1976-12-01
-#
-# From Paul Eggert (2002-10-22)
-# <http://webexhibits.org/daylightsaving/g.html> says Rothera is -03 all year.
-#
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Antarctica/Rothera	0	-	zzz	1976 Dec  1
-			-3:00	-	ROTT	# Rothera time
-
-# Uruguay - year round base
-# Artigas, King George Island, -621104-0585107
-
-# USA - year-round bases
-#
-# Palmer, Anvers Island, since 1965 (moved 2 miles in 1968)
-#
-# From Ethan Dicks (1996-10-06):
-# It keeps the same time as Punta Arenas, Chile, because, just like us
-# and the South Pole, that's the other end of their supply line....
-# I verified with someone who was there that since 1980,
-# Palmer has followed Chile.  Prior to that, before the Falklands War,
-# Palmer used to be supplied from Argentina.
-#
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Antarctica/Palmer	0	-	zzz	1965
-			-4:00	ArgAQ	AR%sT	1969 Oct 5
-			-3:00	ArgAQ	AR%sT	1982 May
-			-4:00	ChileAQ	CL%sT
-#
-#
-# McMurdo, Ross Island, since 1955-12
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Antarctica/McMurdo	0	-	zzz	1956
-			12:00	NZAQ	NZ%sT
-#
-# Amundsen-Scott, South Pole, continuously occupied since 1956-11-20
-#
-# From Paul Eggert (1996-09-03):
-# Normally it wouldn't have a separate entry, since it's like the
-# larger Antarctica/McMurdo since 1970, but it's too famous to omit.
-#
-# From Chris Carrier <72157.3334@CompuServe.COM> (1996-06-27):
-# Siple, the first commander of the South Pole station,
-# stated that he would have liked to have kept GMT at the station,
-# but that he found it more convenient to keep GMT+12
-# as supplies for the station were coming from McMurdo Sound,
-# which was on GMT+12 because New Zealand was on GMT+12 all year
-# at that time (1957).  (Source: Siple's book 90 degrees SOUTH.)
-#
-# From Susan Smith
-# http://www.cybertours.com/whs/pole10.html
-# (1995-11-13 16:24:56 +1300, no longer available):
-# We use the same time as McMurdo does.
-# And they use the same time as Christchurch, NZ does....
-# One last quirk about South Pole time.
-# All the electric clocks are usually wrong.
-# Something about the generators running at 60.1hertz or something
-# makes all of the clocks run fast.  So every couple of days,
-# we have to go around and set them back 5 minutes or so.
-# Maybe if we let them run fast all of the time, we'd get to leave here sooner!!
-#
-Link	Antarctica/McMurdo	Antarctica/South_Pole
+# @(#)antarctica	7.25
+
+# From Paul Eggert (1999-11-15):
+# To keep things manageable, we list only locations occupied year-round; see
+# <a href="http://www.comnap.aq/comnap/comnap.nsf/P/Stations/">
+# COMNAP - Stations and Bases
+# </a>
+# and
+# <a href="http://www.spri.cam.ac.uk/bob/periant.htm">
+# Summary of the Peri-Antarctic Islands (1998-07-23)
+# </a>
+# for information.
+# Unless otherwise specified, we have no time zone information.
+#
+# Except for the French entries,
+# I made up all time zone abbreviations mentioned here; corrections welcome!
+# FORMAT is `zzz' and GMTOFF is 0 for locations while uninhabited.
+
+# These rules are stolen from the `europe' file.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	RussAQ	1981	1984	-	Apr	 1	 0:00	1:00	S
+Rule	RussAQ	1981	1983	-	Oct	 1	 0:00	0	-
+Rule	RussAQ	1984	1991	-	Sep	lastSun	 2:00s	0	-
+Rule	RussAQ	1985	1991	-	Mar	lastSun	 2:00s	1:00	S
+Rule	RussAQ	1992	only	-	Mar	lastSat	 23:00	1:00	S
+Rule	RussAQ	1992	only	-	Sep	lastSat	 23:00	0	-
+Rule	RussAQ	1993	max	-	Mar	lastSun	 2:00s	1:00	S
+Rule	RussAQ	1993	1995	-	Sep	lastSun	 2:00s	0	-
+Rule	RussAQ	1996	max	-	Oct	lastSun	 2:00s	0	-
+
+# These rules are stolen from the `southamerica' file.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	ArgAQ	1964	1966	-	Mar	 1	0:00	0	-
+Rule	ArgAQ	1964	1966	-	Oct	15	0:00	1:00	S
+Rule	ArgAQ	1967	only	-	Apr	 1	0:00	0	-
+Rule	ArgAQ	1967	1968	-	Oct	Sun<=7	0:00	1:00	S
+Rule	ArgAQ	1968	1969	-	Apr	Sun<=7	0:00	0	-
+Rule	ArgAQ	1974	only	-	Jan	23	0:00	1:00	S
+Rule	ArgAQ	1974	only	-	May	 1	0:00	0	-
+Rule	ArgAQ	1974	1976	-	Oct	Sun<=7	0:00	1:00	S
+Rule	ArgAQ	1975	1977	-	Apr	Sun<=7	0:00	0	-
+Rule	ChileAQ	1966	1997	-	Oct	Sun>=9	0:00	1:00	S
+Rule	ChileAQ	1967	1998	-	Mar	Sun>=9	0:00	0	-
+Rule	ChileAQ	1998	only	-	Sep	27	0:00	1:00	S
+Rule	ChileAQ	1999	only	-	Apr	 4	0:00	0	-
+Rule	ChileAQ	1999	max	-	Oct	Sun>=9	0:00	1:00	S
+Rule	ChileAQ	2000	max	-	Mar	Sun>=9	0:00	0	-
+
+
+# Argentina - year-round bases
+# Belgrano II, Confin Coast, -770227-0343737, since 1972-02-05
+# Esperanza, San Martin Land, -6323-05659, since 1952-12-17
+# Jubany, Potter Peninsula, King George Island, -6414-0602320, since 1982-01
+# Marambio, Seymour I, -6414-05637, since 1969-10-29
+# Orcadas, Laurie I, -6016-04444, since 1904-02-22
+# San Martin, Debenham I, -6807-06708, since 1951-03-21
+#	(except 1960-03 / 1976-03-21)
+
+# Australia - territories
+# Heard Island, McDonald Islands (uninhabited)
+#	previously sealers and scientific personnel wintered
+#	<a href="http://www.dstc.qut.edu.au/DST/marg/daylight.html">
+#	Margaret Turner reports
+#	</a> (1999-09-30) that they're UTC+5, with no DST;
+#	presumably this is when they have visitors.
+#
+# year-round bases
+# Casey, Bailey Peninsula, -6617+11032, since 1969
+# Davis, Vestfold Hills, -6835+07759, since 1957-01-13
+#	(except 1964-11 - 1969-02)
+# Mawson, Holme Bay, -6736+06253, since 1954-02-13
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Antarctica/Casey	0	-	zzz	1969
+			8:00	-	WST	# Western (Aus) Standard Time
+Zone Antarctica/Davis	0	-	zzz	1957 Jan 13
+			7:00	-	DAVT	1964 Nov # Davis Time
+			0	-	zzz	1969 Feb
+			7:00	-	DAVT
+Zone Antarctica/Mawson	0	-	zzz	1954 Feb 13
+			6:00	-	MAWT	# Mawson Time
+# References:
+# <a href="http://www.antdiv.gov.au/aad/exop/sfo/casey/casey_aws.html">
+# Casey Weather (1998-02-26)
+# </a>
+# <a href="http://www.antdiv.gov.au/aad/exop/sfo/davis/video.html">
+# Davis Station, Antarctica (1998-02-26)
+# </a>
+# <a href="http://www.antdiv.gov.au/aad/exop/sfo/mawson/video.html">
+# Mawson Station, Antarctica (1998-02-25)
+# </a>
+
+# Brazil - year-round base
+# Comandante Ferraz, King George Island, -6205+05824, since 1983/4
+
+# Chile - year-round bases and towns
+# Escudero, South Shetland Is, -621157-0585735, since 1994
+# Presidente Eduadro Frei, King George Island, -6214-05848, since 1969-03-07
+# General Bernardo O'Higgins, Antarctic Peninsula, -6319-05704, since 1948-02
+# Capitan Arturo Prat, -6230-05941
+# Villa Las Estrellas (a town), around the Frei base, since 1984-04-09
+# These locations have always used Santiago time; use TZ='America/Santiago'.
+
+# China - year-round bases
+# Great Wall, King George Island, -6213-05858, since 1985-02-20
+# Zhongshan, Larsemann Hills, Prydz Bay, -6922+07623, since 1989-02-26
+
+# France - year-round bases
+#
+# From Antoine Leca <Antoine.Leca@Renault.FR> (1997-01-20):
+# Time data are from Nicole Pailleau at the IFRTP
+# (French Institute for Polar Research and Technology).
+# She confirms that French Southern Territories and Terre Adelie bases
+# don't observe daylight saving time, even if Terre Adelie supplies came
+# from Tasmania.
+#
+# French Southern Territories with year-round inhabitants
+#
+# Martin-de-Vivies Base, Amsterdam Island, -374105+0773155, since 1950
+# Alfred-Faure Base, Crozet Islands, -462551+0515152, since 1964
+# Port-aux-Francais, Kerguelen Islands, -492110+0701303, since 1951;
+#	whaling & sealing station operated 1908/1914, 1920/1929, and 1951/1956
+#
+# St Paul Island - near Amsterdam, uninhabited
+#	fishing stations operated variously 1819/1931
+#
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Indian/Kerguelen	0	-	zzz	1950	# Port-aux-Francais
+			5:00	-	TFT	# ISO code TF Time
+#
+# year-round base in the main continent
+# Dumont-d'Urville, Ile des Petrels, -6640+14001, since 1956-11
+#
+# Another base at Port-Martin, 50km east, began operation in 1947.
+# It was destroyed by fire on 1952-01-14.
+#
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Antarctica/DumontDUrville 0 -	zzz	1947
+			10:00	-	PMT	1952 Jan 14 # Port-Martin Time
+			0	-	zzz	1956 Nov
+			10:00	-	DDUT	# Dumont-d'Urville Time
+# Reference:
+# <a href="http://www.icair.iac.org.nz/science/reports/fr/IFRTP.html">
+# Support and Development of Polar Research and Technology (1997-02-03)
+# </a>
+
+
+# Germany - year-round base
+# Georg von Neumayer, -7039-00815
+
+# India - year-round base
+# Dakshin Gangotri, -7005+01200
+
+# Japan - year-round bases
+# Dome Fuji, -7719+03942
+# Syowa, -690022+0393524
+#
+# From Hideyuki Suzuki (1999-02-06):
+# In all Japanese stations, +0300 is used as the standard time.  [See]
+# <a href="http://www.crl.go.jp/uk/uk201/basyo.htm">[reference in Japanese]</a>
+# and information from KAMO Hiroyasu.
+#
+# Syowa station, which is the first antarctic station of Japan,
+# was established on 1957-01-29.  Since Syowa station is still the main
+# station of Japan, it's appropriate for the principal location.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Antarctica/Syowa	0	-	zzz	1957 Jan 29
+			3:00	-	SYOT	# Syowa Time
+# See:
+# <a href="http://www.nipr.ac.jp/english/ara01.html">
+# NIPR Antarctic Research Activities (1999-08-17)
+# </a>
+
+# S Korea - year-round base
+# King Sejong, King George Island, -6213-05847, since 1988
+
+# New Zealand - claims
+# Balleny Islands (never inhabited)
+# Scott Island (never inhabited)
+#
+# year-round base
+# Scott, Ross Island, since 1957-01, is like Antarctica/McMurdo.
+#
+# These rules for New Zealand are stolen from the `australasia' file.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	NZAQ	1974	only	-	Nov	 3	2:00s	1:00	D
+Rule	NZAQ	1975	1988	-	Oct	lastSun	2:00s	1:00	D
+Rule	NZAQ	1989	only	-	Oct	 8	2:00s	1:00	D
+Rule	NZAQ	1990	max	-	Oct	Sun>=1	2:00s	1:00	D
+Rule	NZAQ	1975	only	-	Feb	23	2:00s	0	S
+Rule	NZAQ	1976	1989	-	Mar	Sun>=1	2:00s	0	S
+Rule	NZAQ	1990	max	-	Mar	Sun>=15	2:00s	0	S
+
+# Norway - territories
+# Bouvet (never inhabited)
+#
+# claims
+# Peter I Island (never inhabited)
+
+# Poland - year-round base
+# Arctowski, King George Island, -620945-0582745, since 1977
+
+# Russia - year-round bases
+# Bellingshausen, King George Island, -621159-0585337, since 1968-02-22
+# Mirny, Davis coast, -6633+09301, since 1956-02
+# Molodezhnaya, Alasheyev Bay, -6740+04551,
+#	year-round from 1962-02 to 1999-07-01
+# Novolazarevskaya, Queen Maud Land, -7046+01150,
+#	year-round from 1960/61 to 1992
+
+# Vostok, since 1957-12-16, temporarily closed 1994-02/1994-11
+# <a href="http://quest.arc.nasa.gov/antarctica/QA/computers/Directions,Time,ZIP">
+# From Craig Mundell (1994-12-15)</a>:
+# Vostok, which is one of the Russian stations, is set on the same
+# time as Moscow, Russia.
+#
+# From Lee Hotz (2001-03-08):
+# I queried the folks at Columbia who spent the summer at Vostok and this is
+# what they had to say about time there:
+# ``in the US Camp (East Camp) we have been on New Zealand (McMurdo)
+# time, which is 12 hours ahead of GMT. The Russian Station Vostok was
+# 6 hours behind that (although only 2 miles away, i.e. 6 hours ahead
+# of GMT). This is a time zone I think two hours east of Moscow. The
+# natural time zone is in between the two: 8 hours ahead of GMT.''
+#
+# From Paul Eggert (2001-05-04):
+# This seems to be hopelessly confusing, so I asked Lee Hotz about it
+# in person.  He said that some Antartic locations set their local
+# time so that noon is the warmest part of the day, and that this
+# changes during the year and does not necessarily correspond to mean
+# solar noon.  So the Vostok time might have been whatever the clocks
+# happened to be during their visit.  So we still don't really know what time
+# it is at Vostok.  But we'll guess UTC+6.
+#
+Zone Antarctica/Vostok	0	-	zzz	1957 Dec 16
+			6:00	-	VOST	# Vostok time
+
+# S Africa - year-round bases
+# Marion Island, -4653+03752
+# Sanae, -7141-00250
+
+# UK
+#
+# British Antarctic Territories (BAT) claims
+# South Orkney Islands
+#	scientific station from 1903
+#	whaling station at Signy I 1920/1926
+# South Shetland Islands
+#
+# year-round bases
+# Bird Island, South Georgia, -5400-03803, since 1983
+# Deception Island, -6259-06034, whaling station 1912/1931,
+#	scientific station 1943/1967,
+#	previously sealers and a scientific expedition wintered by accident,
+#	and a garrison was deployed briefly
+# Halley, Coates Land, -7535-02604, since 1956-01-06
+#	Halley is on a moving ice shelf and is periodically relocated
+#	so that it is never more than 10km from its nominal location.
+# Rothera, Adelaide Island, -6734-6808, since 1976-12-01
+#
+# From Paul Eggert (2002-10-22)
+# <http://webexhibits.org/daylightsaving/g.html> says Rothera is -03 all year.
+#
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Antarctica/Rothera	0	-	zzz	1976 Dec  1
+			-3:00	-	ROTT	# Rothera time
+
+# Uruguay - year round base
+# Artigas, King George Island, -621104-0585107
+
+# USA - year-round bases
+#
+# Palmer, Anvers Island, since 1965 (moved 2 miles in 1968)
+#
+# From Ethan Dicks (1996-10-06):
+# It keeps the same time as Punta Arenas, Chile, because, just like us
+# and the South Pole, that's the other end of their supply line....
+# I verified with someone who was there that since 1980,
+# Palmer has followed Chile.  Prior to that, before the Falklands War,
+# Palmer used to be supplied from Argentina.
+#
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Antarctica/Palmer	0	-	zzz	1965
+			-4:00	ArgAQ	AR%sT	1969 Oct 5
+			-3:00	ArgAQ	AR%sT	1982 May
+			-4:00	ChileAQ	CL%sT
+#
+#
+# McMurdo, Ross Island, since 1955-12
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Antarctica/McMurdo	0	-	zzz	1956
+			12:00	NZAQ	NZ%sT
+#
+# Amundsen-Scott, South Pole, continuously occupied since 1956-11-20
+#
+# From Paul Eggert (1996-09-03):
+# Normally it wouldn't have a separate entry, since it's like the
+# larger Antarctica/McMurdo since 1970, but it's too famous to omit.
+#
+# From Chris Carrier <72157.3334@CompuServe.COM> (1996-06-27):
+# Siple, the first commander of the South Pole station,
+# stated that he would have liked to have kept GMT at the station,
+# but that he found it more convenient to keep GMT+12
+# as supplies for the station were coming from McMurdo Sound,
+# which was on GMT+12 because New Zealand was on GMT+12 all year
+# at that time (1957).  (Source: Siple's book 90 degrees SOUTH.)
+#
+# From Susan Smith
+# http://www.cybertours.com/whs/pole10.html
+# (1995-11-13 16:24:56 +1300, no longer available):
+# We use the same time as McMurdo does.
+# And they use the same time as Christchurch, NZ does....
+# One last quirk about South Pole time.
+# All the electric clocks are usually wrong.
+# Something about the generators running at 60.1hertz or something
+# makes all of the clocks run fast.  So every couple of days,
+# we have to go around and set them back 5 minutes or so.
+# Maybe if we let them run fast all of the time, we'd get to leave here sooner!!
+#
+Link	Antarctica/McMurdo	Antarctica/South_Pole
diff --git a/JodaTime/src/java/org/joda/time/tz/src/asia b/JodaTime/src/java/org/joda/time/tz/src/asia
index 52ba32338..9e4087bd5 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/asia
+++ b/JodaTime/src/java/org/joda/time/tz/src/asia
@@ -1,1611 +1,1615 @@
-# @(#)asia	7.85
-
-# This data is by no means authoritative; if you think you know better,
-# go ahead and edit the file (and please send any changes to
-# tz@elsie.nci.nih.gov for general use in the future).
-
-# From Paul Eggert (1999-03-22):
-#
-# A good source for time zone historical data outside the U.S. is
-# Thomas G. Shanks, The International Atlas (5th edition),
-# San Diego: ACS Publications, Inc. (1999).
-#
-# Gwillim Law writes that a good source
-# for recent time zone data is the International Air Transport
-# Association's Standard Schedules Information Manual (IATA SSIM),
-# published semiannually.  Law sent in several helpful summaries
-# of the IATA's data after 1990.
-#
-# Except where otherwise noted, Shanks is the source for entries through 1990,
-# and IATA SSIM is the source for entries after 1990.
-#
-# Another source occasionally used is Edward W. Whitman, World Time Differences,
-# Whitman Publishing Co, 2 Niagara Av, Ealing, London (undated), which
-# I found in the UCLA library.
-#
-# A reliable and entertaining source about time zones is
-# Derek Howse, Greenwich time and longitude, Philip Wilson Publishers (1997).
-#
-# I invented the abbreviations marked `*' in the following table;
-# the rest are from earlier versions of this file, or from other sources.
-# Corrections are welcome!
-#	     std  dst
-#	     LMT	Local Mean Time
-#	2:00 EET  EEST	Eastern European Time
-#	2:00 IST  IDT	Israel
-#	3:00 AST  ADT	Arabia*
-#	3:30 IRST IRDT	Iran
-#	4:00 GST	Gulf*
-#	5:30 IST	India
-#	7:00 ICT	Indochina*
-#	7:00 WIT	west Indonesia
-#	8:00 CIT	central Indonesia
-#	8:00 CST	China
-#	9:00 CJT	Central Japanese Time (1896/1937)*
-#	9:00 EIT	east Indonesia
-#	9:00 JST  JDT	Japan
-#	9:00 KST  KDT	Korea
-#	9:30 CST	(Australian) Central Standard Time
-#
-# See the `europe' file for Russia and Turkey in Asia.
-
-# From Guy Harris:
-# Incorporates data for Singapore from Robert Elz' asia 1.1, as well as
-# additional information from Tom Yap, Sun Microsystems Intercontinental
-# Technical Support (including a page from the Official Airline Guide -
-# Worldwide Edition).  The names for time zones are guesses.
-
-###############################################################################
-
-# These rules are stolen from the `europe' file.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	EUAsia	1981	max	-	Mar	lastSun	 1:00u	1:00	S
-Rule	EUAsia	1996	max	-	Oct	lastSun	 1:00u	0	-
-Rule E-EurAsia	1981	max	-	Mar	lastSun	 0:00	1:00	S
-Rule E-EurAsia	1979	1995	-	Sep	lastSun	 0:00	0	-
-Rule E-EurAsia	1996	max	-	Oct	lastSun	 0:00	0	-
-Rule RussiaAsia	1981	1984	-	Apr	1	 0:00	1:00	S
-Rule RussiaAsia	1981	1983	-	Oct	1	 0:00	0	-
-Rule RussiaAsia	1984	1991	-	Sep	lastSun	 2:00s	0	-
-Rule RussiaAsia	1985	1991	-	Mar	lastSun	 2:00s	1:00	S
-Rule RussiaAsia	1992	only	-	Mar	lastSat	23:00	1:00	S
-Rule RussiaAsia	1992	only	-	Sep	lastSat	23:00	0	-
-Rule RussiaAsia	1993	max	-	Mar	lastSun	 2:00s	1:00	S
-Rule RussiaAsia	1993	1995	-	Sep	lastSun	 2:00s	0	-
-Rule RussiaAsia	1996	max	-	Oct	lastSun	 2:00s	0	-
-
-# Afghanistan
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Kabul	4:36:48 -	LMT	1890
-			4:00	-	AFT	1945
-			4:30	-	AFT
-
-# Armenia
-# From Paul Eggert (1999-10-29):
-# Shanks has Yerevan switching to 3:00 (with Russian DST) in spring 1991,
-# then to 4:00 with no DST in fall 1995, then readopting Russian DST in 1997.
-# Go with Shanks, even when he disagrees with others.  Edgar Der-Danieliantz
-# <edd@AIC.NET> reported (1996-05-04) that Yerevan probably wouldn't use DST
-# in 1996, though it did use DST in 1995.  IATA SSIM (1991/1998) reports that
-# Armenia switched from 3:00 to 4:00 in 1998 and observed DST after 1991,
-# but started switching at 3:00s in 1998.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Yerevan	2:58:00 -	LMT	1924 May  2
-			3:00	-	YERT	1957 Mar    # Yerevan Time
-			4:00 RussiaAsia YER%sT	1991 Mar 31 2:00s
-			3:00	1:00	YERST	1991 Sep 23 # independence
-			3:00 RussiaAsia	AM%sT	1995 Sep 24 2:00s
-			4:00	-	AMT	1997
-			4:00 RussiaAsia	AM%sT
-
-# Azerbaijan
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Azer	1997	max	-	Mar	lastSun	 1:00	1:00	S
-Rule	Azer	1997	max	-	Oct	lastSun	 1:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Baku	3:19:24 -	LMT	1924 May  2
-			3:00	-	BAKT	1957 Mar    # Baku Time
-			4:00 RussiaAsia BAK%sT	1991 Mar 31 2:00s
-			3:00	1:00	BAKST	1991 Aug 30 # independence
-			3:00 RussiaAsia	AZ%sT	1992 Sep lastSat 23:00
-			4:00	-	AZT	1996 # Azerbaijan time
-			4:00	EUAsia	AZ%sT	1997
-			4:00	Azer	AZ%sT
-
-# Bahrain
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Bahrain	3:22:20 -	LMT	1920		# Al Manamah
-			4:00	-	GST	1972 Jun
-			3:00	-	AST
-
-# Bangladesh
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Dhaka	6:01:40 -	LMT	1890
-			5:53:20	-	HMT	1941 Oct    # Howrah Mean Time?
-			6:30	-	BURT	1942 May 15 # Burma Time
-			5:30	-	IST	1942 Sep
-			6:30	-	BURT	1951 Sep 30
-			6:00	-	DACT	1971 Mar 26 # Dacca Time
-			6:00	-	BDT	# Bangladesh Time
-
-# Bhutan
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Thimphu	5:58:36 -	LMT	1947 Aug 15 # or Thimbu
-			5:30	-	IST	1987 Oct
-			6:00	-	BTT	# Bhutan Time
-
-# British Indian Ocean Territory
-# Whitman and the 1995 CIA time zone map say 5:00, but the
-# 1997 and later maps say 6:00.  Assume the switch occurred in 1996.
-# We have no information as to when standard time was introduced;
-# assume it occurred in 1907, the same year as Mauritius (which
-# then contained the Chagos Archipelago).
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Indian/Chagos	4:49:40	-	LMT	1907
-			5:00	-	IOT	1996 # BIOT Time
-			6:00	-	IOT
-
-# Brunei
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Brunei	7:39:40 -	LMT	1926 Mar   # Bandar Seri Begawan
-			7:30	-	BNT	1933
-			8:00	-	BNT
-
-# Burma / Myanmar
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Rangoon	6:24:40 -	LMT	1880		# or Yangon
-			6:24:36	-	RMT	1920	   # Rangoon Mean Time?
-			6:30	-	BURT	1942 May   # Burma Time
-			9:00	-	JST	1945 May 3
-			6:30	-	MMT		   # Myanmar Time
-
-# Cambodia
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Phnom_Penh	6:59:40 -	LMT	1906 Jun  9
-			7:06:20	-	SMT	1911 Mar 11 0:01 # Saigon MT?
-			7:00	-	ICT	1912 May
-			8:00	-	ICT	1931 May
-			7:00	-	ICT
-
-# China
-
-# From Guy Harris:
-# People's Republic of China.  Yes, they really have only one time zone.
-
-# From Bob Devine (1988-01-28):
-# No they don't.  See TIME mag, 1986-02-17 p.52.  Even though
-# China is across 4 physical time zones, before Feb 1, 1986 only the
-# Peking (Bejing) time zone was recognized.  Since that date, China
-# has two of 'em -- Peking's and Urumqi (named after the capital of
-# the Xinjiang Uyghur Autonomous Region).  I don't know about DST for it.
-#
-# . . .I just deleted the DST table and this editor makes it too
-# painful to suck in another copy..  So, here is what I have for
-# DST start/end dates for Peking's time zone (info from AP):
-#
-#     1986 May 4 - Sept 14
-#     1987 mid-April - ??
-
-# From U. S. Naval Observatory (1989-01-19):
-# CHINA               8 H  AHEAD OF UTC  ALL OF CHINA, INCL TAIWAN
-# CHINA               9 H  AHEAD OF UTC  APR 17 - SEP 10
-
-# From Paul Eggert (1995-12-19):
-# Shanks writes that China has had a single time zone since 1980 May 1,
-# observing summer DST from 1986 through 1991; this contradicts Devine's
-# note about Time magazine, though apparently _something_ happened in 1986.
-# Go with Shanks for now.  I made up names for the other pre-1980 time zones.
-
-# From Shanks:
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Shang	1940	only	-	Jun	 3	0:00	1:00	D
-Rule	Shang	1940	1941	-	Oct	 1	0:00	0	S
-Rule	Shang	1941	only	-	Mar	16	0:00	1:00	D
-Rule	PRC	1986	only	-	May	 4	0:00	1:00	D
-Rule	PRC	1986	1991	-	Sep	Sun>=11	0:00	0	S
-Rule	PRC	1987	1991	-	Apr	Sun>=10	0:00	1:00	D
-#
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-#
-# From Anthony Fok (2001-12-20):
-# BTW, I did some research on-line and found some info regarding these five
-# historic timezones from some Taiwan websites.  And yes, there are official
-# Chinese names for these locales (before 1949):
-# Changbai Time ("Long-white Time", Long-white = Heilongjiang area)
-Zone	Asia/Harbin	8:26:44	-	LMT	1928 # or Haerbin
-			8:30	-	CHAT	1932 Mar # Changbai Time
-			8:00	-	CST	1940
-			9:00	-	CHAT	1966 May
-			8:30	-	CHAT	1980 May
-			8:00	PRC	C%sT
-# Zhongyuan Time ("Central plain Time")
-Zone	Asia/Shanghai	8:05:52	-	LMT	1928
-			8:00	Shang	C%sT	1949
-			8:00	PRC	C%sT
-# Long-shu Time (probably due to Long and Shu being two names of that area)
-Zone	Asia/Chongqing	7:06:20	-	LMT	1928 # or Chungking
-			7:00	-	LONT	1980 May # Long-shu Time
-			8:00	PRC	C%sT
-# Xin-zang Time ("Xinjiang-Tibet Time")
-Zone	Asia/Urumqi	5:50:20	-	LMT	1928 # or Urumchi
-			6:00	-	URUT	1980 May # Urumqi Time
-			8:00	PRC	C%sT
-# Kunlun Time
-Zone	Asia/Kashgar	5:03:56	-	LMT	1928 # or Kashi or Kaxgar
-			5:30	-	KAST	1940	 # Kashgar Time
-			5:00	-	KAST	1980 May
-			8:00	PRC	C%sT
-
-# Hong Kong (Xianggang)
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	HK	1946	only	-	Apr	20	3:30	1:00	S
-Rule	HK	1946	only	-	Dec	1	3:30	0	-
-Rule	HK	1947	only	-	Apr	13	3:30	1:00	S
-Rule	HK	1947	only	-	Dec	30	3:30	0	-
-Rule	HK	1948	only	-	May	2	3:30	1:00	S
-Rule	HK	1948	1952	-	Oct	lastSun	3:30	0	-
-Rule	HK	1949	1953	-	Apr	Sun>=1	3:30	1:00	S
-Rule	HK	1953	only	-	Nov	1	3:30	0	-
-Rule	HK	1954	1964	-	Mar	Sun>=18	3:30	1:00	S
-Rule	HK	1954	only	-	Oct	31	3:30	0	-
-Rule	HK	1955	1964	-	Nov	Sun>=1	3:30	0	-
-Rule	HK	1965	1977	-	Apr	Sun>=16	3:30	1:00	S
-Rule	HK	1965	1977	-	Oct	Sun>=16	3:30	0	-
-Rule	HK	1979	1980	-	May	Sun>=8	3:30	1:00	S
-Rule	HK	1979	1980	-	Oct	Sun>=16	3:30	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Hong_Kong	7:36:36 -	LMT	1904 Oct 30
-			8:00	HK	HK%sT
-
-
-###############################################################################
-
-# Taiwan
-
-# Shanks writes that Taiwan observed DST during 1945, when it
-# was still controlled by Japan.  This is hard to believe, but we don't
-# have any other information.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Taiwan	1945	1951	-	May	1	0:00	1:00	D
-Rule	Taiwan	1945	1951	-	Oct	1	0:00	0	S
-Rule	Taiwan	1952	only	-	Mar	1	0:00	1:00	D
-Rule	Taiwan	1952	1954	-	Nov	1	0:00	0	S
-Rule	Taiwan	1953	1959	-	Apr	1	0:00	1:00	D
-Rule	Taiwan	1955	1961	-	Oct	1	0:00	0	S
-Rule	Taiwan	1960	1961	-	Jun	1	0:00	1:00	D
-Rule	Taiwan	1974	1975	-	Apr	1	0:00	1:00	D
-Rule	Taiwan	1974	1975	-	Oct	1	0:00	0	S
-Rule	Taiwan	1980	only	-	Jun	30	0:00	1:00	D
-Rule	Taiwan	1980	only	-	Sep	30	0:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Taipei	8:06:00 -	LMT	1896 # or Taibei or T'ai-pei
-			8:00	Taiwan	C%sT
-
-# Macau (Macao, Aomen)
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Macau	1961	1962	-	Mar	Sun>=16	3:30	1:00	S
-Rule	Macau	1961	1964	-	Nov	Sun>=1	3:30	0	-
-Rule	Macau	1963	only	-	Mar	Sun>=16	0:00	1:00	S
-Rule	Macau	1964	only	-	Mar	Sun>=16	3:30	1:00	S
-Rule	Macau	1965	only	-	Mar	Sun>=16	0:00	1:00	S
-Rule	Macau	1965	only	-	Oct	31	0:00	0	-
-Rule	Macau	1966	1971	-	Apr	Sun>=16	3:30	1:00	S
-Rule	Macau	1966	1971	-	Oct	Sun>=16	3:30	0	-
-Rule	Macau	1972	1974	-	Apr	Sun>=15	0:00	1:00	S
-Rule	Macau	1972	1973	-	Oct	Sun>=15	0:00	0	-
-Rule	Macau	1974	1977	-	Oct	Sun>=15	3:30	0	-
-Rule	Macau	1975	1977	-	Apr	Sun>=15	3:30	1:00	S
-Rule	Macau	1978	1980	-	Apr	Sun>=15	0:00	1:00	S
-Rule	Macau	1978	1980	-	Oct	Sun>=15	0:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Macau	7:34:20 -	LMT	1912
-			8:00	Macau	MO%sT	1999 Dec 20 # return to China
-			8:00	PRC	C%sT
-
-
-###############################################################################
-
-# Cyprus
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Cyprus	1975	only	-	Apr	13	0:00	1:00	S
-Rule	Cyprus	1975	only	-	Oct	12	0:00	0	-
-Rule	Cyprus	1976	only	-	May	15	0:00	1:00	S
-Rule	Cyprus	1976	only	-	Oct	11	0:00	0	-
-Rule	Cyprus	1977	1980	-	Apr	Sun>=1	0:00	1:00	S
-Rule	Cyprus	1977	only	-	Sep	25	0:00	0	-
-Rule	Cyprus	1978	only	-	Oct	2	0:00	0	-
-Rule	Cyprus	1979	1997	-	Sep	lastSun	0:00	0	-
-Rule	Cyprus	1981	1998	-	Mar	lastSun	0:00	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Nicosia	2:13:28 -	LMT	1921 Nov 14
-			2:00	Cyprus	EE%sT	1998 Sep
-			2:00	EUAsia	EE%sT
-# IATA SSIM (1998-09) has Cyprus using EU rules for the first time.
-
-# Classically, Cyprus belongs to Asia; e.g. see Herodotus, Histories, I.72.
-# However, for various reasons many users expect to find it under Europe.
-Link	Asia/Nicosia	Europe/Nicosia
-
-# Georgia
-# From Paul Eggert (1994-11-19):
-# Today's _Economist_ (p 60) reports that Georgia moved its clocks forward
-# an hour recently, due to a law proposed by Zurab Murvanidze,
-# an MP who went on a hunger strike for 11 days to force discussion about it!
-# We have no details, but we'll guess they didn't move the clocks back in fall.
-#
-# From Mathew Englander, quoting AP (1996-10-23 13:05-04):
-# Instead of putting back clocks at the end of October, Georgia
-# will stay on daylight savings time this winter to save energy,
-# President Eduard Shevardnadze decreed Wednesday.
-#
-# From the BBC via Joseph S. Myers (2004-06-27):
-#
-# Georgia moved closer to Western Europe on Sunday...  The former Soviet
-# republic has changed its time zone back to that of Moscow.  As a result it
-# is now just four hours ahead of Greenwich Mean Time, rather than five hours
-# ahead.  The switch was decreed by the pro-Western president of Georgia,
-# Mikhail Saakashvili, who said the change was partly prompted by the process
-# of integration into Europe.
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Tbilisi	2:59:16 -	LMT	1880
-			2:59:16	-	TBMT	1924 May  2 # Tbilisi Mean Time
-			3:00	-	TBIT	1957 Mar    # Tbilisi Time
-			4:00 RussiaAsia TBI%sT	1991 Mar 31 2:00s
-			3:00	1:00	TBIST	1991 Apr  9 # independence
-			3:00 RussiaAsia GE%sT	1992 # Georgia Time
-			3:00 E-EurAsia	GE%sT	1994 Sep lastSun
-			4:00 E-EurAsia	GE%sT	1996 Oct lastSun
-			4:00	1:00	GEST	1997 Mar lastSun
-			4:00 E-EurAsia	GE%sT	2004 Jun 27
-			3:00 RussiaAsia	GE%sT
-
-# East Timor
-
-# From Joao Carrascalao, brother of the former governor of East Timor, in
-# <a href="http://etan.org/et99c/december/26-31/30ETMAY.htm">
-# East Timor may be late for its millennium
-# </a> (1999-12-26/31):
-# Portugal tried to change the time forward in 1974 because the sun
-# rises too early but the suggestion raised a lot of problems with the
-# Timorese and I still don't think it would work today because it
-# conflicts with their way of life.
-
-# From Paul Eggert (2000-12-04):
-# We don't have any record of the above attempt.
-# Most likely our records are incomplete, but we have no better data.
-
-# <a href="http://www.hri.org/news/world/undh/last/00-08-16.undh.html">
-# From Manoel de Almeida e Silva, Deputy Spokesman for the UN Secretary-General
-# (2000-08-16)</a>:
-# The Cabinet of the East Timor Transition Administration decided
-# today to advance East Timor's time by one hour.  The time change,
-# which will be permanent, with no seasonal adjustment, will happen at
-# midnight on Saturday, September 16.
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Dili	8:22:20 -	LMT	1912
-			8:00	-	TLT	1942 Feb 21 23:00 # E Timor Time
-			9:00	-	JST	1945 Aug
-			9:00	-	TLT	1976 May  3
-			8:00	-	CIT	2000 Sep 17 00:00
-			9:00	-	TLT
-
-# India
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Calcutta	5:53:28 -	LMT	1880	# Kolkata
-			5:53:20	-	HMT	1941 Oct    # Howrah Mean Time?
-			6:30	-	BURT	1942 May 15 # Burma Time
-			5:30	-	IST	1942 Sep
-			5:30	1:00	IST	1945 Oct 15
-			5:30	-	IST
-# The following are like Asia/Calcutta:
-#	Andaman Is
-#	Lakshadweep (Laccadive, Minicoy and Amindivi Is)
-#	Nicobar Is
-
-# Indonesia
-#
-# From Gwillim Law (2001-05-28), overriding Shanks:
-# <http://www.sumatera-inc.com/go_to_invest/about_indonesia.asp#standtime>
-# says that Indonesia's time zones changed on 1988-01-01.  Looking at some
-# time zone maps, I think that must refer to Western Borneo (Kalimantan Barat
-# and Kalimantan Tengah) switching from UTC+8 to UTC+7.
-#
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Asia/Jakarta	7:07:12 -	LMT	1867 Aug 10
-# Shanks says the next transition was at 1924 Jan 1 0:13,
-# but this must be a typo.
-			7:07:12	-	JMT	1923 Dec 31 23:47:12 # Jakarta
-			7:20	-	JAVT	1932 Nov	 # Java Time
-			7:30	-	WIT	1942 Mar 23
-			9:00	-	JST	1945 Aug
-			7:30	-	WIT	1948 May
-			8:00	-	WIT	1950 May
-			7:30	-	WIT	1964
-			7:00	-	WIT
-Zone Asia/Pontianak	7:17:20	-	LMT	1908 May
-			7:17:20	-	PMT	1932 Nov    # Pontianak MT
-			7:30	-	WIT	1942 Jan 29
-			9:00	-	JST	1945 Aug
-			7:30	-	WIT	1948 May
-			8:00	-	WIT	1950 May
-			7:30	-	WIT	1964
-			8:00	-	CIT	1988 Jan  1
-			7:00	-	WIT
-Zone Asia/Makassar	7:57:36 -	LMT	1920
-			7:57:36	-	MMT	1932 Nov    # Macassar MT
-			8:00	-	CIT	1942 Feb  9
-			9:00	-	JST	1945 Aug
-			8:00	-	CIT
-Zone Asia/Jayapura	9:22:48 -	LMT	1932 Nov
-			9:00	-	EIT	1944
-			9:30	-	CST	1964
-			9:00	-	EIT
-
-# Iran
-
-# From Roozbeh Pournader (2003-03-15):
-# This is an English translation of what I just found (originally in Persian).
-# The Gregorian dates in brackets are mine:
-#
-#	Official Newspaper No. 13548-1370/6/25 [1991-09-16]
-#	No. 16760/T233 H				1370/6/10 [1991-09-01]
-#
-#	The Rule About Change of the Official Time of the Country
-#
-#	The Board of Ministers, in the meeting dated 1370/5/23 [1991-08-14],
-#	based on the suggestion number 2221/D dated 1370/4/22 [1991-07-13]
-#	of the Country's Organization for Official and Employment Affairs,
-#	and referring to the law for equating the working hours of workers
-#	and officers in the whole country dated 1359/4/23 [1980-07-14], and
-#	for synchronizing the official times of the country, agreed that:
-#
-#	The official time of the country will should move forward one hour
-#	at the 24[:00] hours of the first day of Farvardin and should return
-#	to its previous state at the 24[:00] hours of the 30th day of
-#	Shahrivar.
-#
-#	First Deputy to the President - Hassan Habibi
-#
-# From personal experience, that agrees with what has been followed
-# for at least the last 5 years.  Before that, for a few years, the
-# date used was the first Thursday night of Farvardin and the last
-# Thursday night of Shahrivar, but I can't give exact dates....
-# I have also changed the abbreviations to what is considered correct
-# here in Iran, IRST for regular time and IRDT for daylight saving time.
-#
-# From Roozbeh Pournader (2005-04-05):
-# The text of the Iranian law, in effect since 1925, clearly mentions
-# that the true solar year is the measure, and there is no arithmetic
-# leap year calculation involved.  There has never been any serious
-# plan to change that law....
-#
-# From Paul Eggert (2005-04-05):
-# Go with Shanks before September 1991, and with Pournader thereafter.
-# I used Ed Reingold's cal-persia in GNU Emacs 21.2 to check Persian dates,
-# stopping after 2037 when 32-bit time_t's overflow.
-# That cal-persia used Birashk's approximation, which disagrees with the solar
-# calendar predictions for the year 2025, so I corrected those dates by hand.
-#
-# From Oscar van Vlijmen (2005-03-30), writing about future
-# discrepancies between cal-persia and the Iranian calendar:
-# For 2091 solar-longitude-after yields 2091-03-20 08:40:07.7 UT for
-# the vernal equinox and that gets so close to 12:00 some local
-# Iranian time that the definition of the correct location needs to be
-# known exactly, amongst other factors.  2157 is even closer:
-# 2157-03-20 08:37:15.5 UT.  But the Gregorian year 2025 should give
-# no interpretation problem whatsoever.  By the way, another instant
-# in the near future where there will be a discrepancy between
-# arithmetical and astronomical Iranian calendars will be in 2058:
-# vernal equinox on 2058-03-20 09:03:05.9 UT.  The Java version of
-# Reingold's/Dershowitz' calculator gives correctly the Gregorian date
-# 2058-03-21 for 1 Farvardin 1437 (astronomical).
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Iran	1978	1980	-	Mar	21	0:00	1:00	D
-Rule	Iran	1978	only	-	Oct	21	0:00	0	S
-Rule	Iran	1979	only	-	Sep	19	0:00	0	S
-Rule	Iran	1980	only	-	Sep	23	0:00	0	S
-Rule	Iran	1991	only	-	May	 3	0:00	1:00	D
-Rule	Iran	1992	1995	-	Mar	22	0:00	1:00	D
-Rule	Iran	1991	1995	-	Sep	22	0:00	0	S
-Rule	Iran	1996	only	-	Mar	21	0:00	1:00	D
-Rule	Iran	1996	only	-	Sep	21	0:00	0	S
-Rule	Iran	1997	1999	-	Mar	22	0:00	1:00	D
-Rule	Iran	1997	1999	-	Sep	22	0:00	0	S
-Rule	Iran	2000	only	-	Mar	21	0:00	1:00	D
-Rule	Iran	2000	only	-	Sep	21	0:00	0	S
-Rule	Iran	2001	2003	-	Mar	22	0:00	1:00	D
-Rule	Iran	2001	2003	-	Sep	22	0:00	0	S
-Rule	Iran	2004	only	-	Mar	21	0:00	1:00	D
-Rule	Iran	2004	only	-	Sep	21	0:00	0	S
-Rule	Iran	2005	2007	-	Mar	22	0:00	1:00	D
-Rule	Iran	2005	2007	-	Sep	22	0:00	0	S
-Rule	Iran	2008	only	-	Mar	21	0:00	1:00	D
-Rule	Iran	2008	only	-	Sep	21	0:00	0	S
-Rule	Iran	2009	2011	-	Mar	22	0:00	1:00	D
-Rule	Iran	2009	2011	-	Sep	22	0:00	0	S
-Rule	Iran	2012	only	-	Mar	21	0:00	1:00	D
-Rule	Iran	2012	only	-	Sep	21	0:00	0	S
-Rule	Iran	2013	2015	-	Mar	22	0:00	1:00	D
-Rule	Iran	2013	2015	-	Sep	22	0:00	0	S
-Rule	Iran	2016	only	-	Mar	21	0:00	1:00	D
-Rule	Iran	2016	only	-	Sep	21	0:00	0	S
-Rule	Iran	2017	2019	-	Mar	22	0:00	1:00	D
-Rule	Iran	2017	2019	-	Sep	22	0:00	0	S
-Rule	Iran	2020	only	-	Mar	21	0:00	1:00	D
-Rule	Iran	2020	only	-	Sep	21	0:00	0	S
-Rule	Iran	2021	2023	-	Mar	22	0:00	1:00	D
-Rule	Iran	2021	2023	-	Sep	22	0:00	0	S
-Rule	Iran	2024	only	-	Mar	21	0:00	1:00	D
-Rule	Iran	2024	only	-	Sep	21	0:00	0	S
-Rule	Iran	2025	2027	-	Mar	22	0:00	1:00	D
-Rule	Iran	2025	2027	-	Sep	22	0:00	0	S
-Rule	Iran	2028	2029	-	Mar	21	0:00	1:00	D
-Rule	Iran	2028	2029	-	Sep	21	0:00	0	S
-Rule	Iran	2030	2031	-	Mar	22	0:00	1:00	D
-Rule	Iran	2030	2031	-	Sep	22	0:00	0	S
-Rule	Iran	2032	2033	-	Mar	21	0:00	1:00	D
-Rule	Iran	2032	2033	-	Sep	21	0:00	0	S
-Rule	Iran	2034	2035	-	Mar	22	0:00	1:00	D
-Rule	Iran	2034	2035	-	Sep	22	0:00	0	S
-Rule	Iran	2036	2037	-	Mar	21	0:00	1:00	D
-Rule	Iran	2036	2037	-	Sep	21	0:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Tehran	3:25:44	-	LMT	1916
-			3:25:44	-	TMT	1946	# Tehran Mean Time
-			3:30	-	IRST	1977 Nov
-			4:00	Iran	IR%sT	1979
-			3:30	Iran	IR%sT
-
-
-# Iraq
-#
-# From Jonathan Lennox (2000-06-12):
-# An article in this week's Economist ("Inside the Saddam-free zone", p. 50 in
-# the U.S. edition) on the Iraqi Kurds contains a paragraph:
-# "The three northern provinces ... switched their clocks this spring and
-# are an hour ahead of Baghdad."
-#
-# But Rives McDow (2000-06-18) quotes a contact in Iraqi-Kurdistan as follows:
-# In the past, some Kurdish nationalists, as a protest to the Iraqi
-# Government, did not adhere to daylight saving time.  They referred
-# to daylight saving as Saddam time.  But, as of today, the time zone
-# in Iraqi-Kurdistan is on standard time with Baghdad, Iraq.
-#
-# So we'll ignore the Economist's claim.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Iraq	1982	only	-	May	1	0:00	1:00	D
-Rule	Iraq	1982	1984	-	Oct	1	0:00	0	S
-Rule	Iraq	1983	only	-	Mar	31	0:00	1:00	D
-Rule	Iraq	1984	1985	-	Apr	1	0:00	1:00	D
-Rule	Iraq	1985	1990	-	Sep	lastSun	1:00s	0	S
-Rule	Iraq	1986	1990	-	Mar	lastSun	1:00s	1:00	D
-# IATA SSIM (1991/1996) says Apr 1 12:01am UTC; guess the `:01' is a typo.
-# Shanks says Iraq did not observe DST 1992/1997 or 1999 on; ignore this.
-Rule	Iraq	1991	max	-	Apr	 1	3:00s	1:00	D
-Rule	Iraq	1991	max	-	Oct	 1	3:00s	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Baghdad	2:57:40	-	LMT	1890
-			2:57:36	-	BMT	1918	    # Baghdad Mean Time?
-			3:00	-	AST	1982 May
-			3:00	Iraq	A%sT
-
-
-###############################################################################
-
-# Israel
-
-# From Ephraim Silverberg (2001-01-11):
-#
-# I coined "IST/IDT" circa 1988.  Until then there were three
-# different abbreviations in use:
-#
-# JST  Jerusalem Standard Time [Danny Braniss, Hebrew University]
-# IZT  Israel Zonal (sic) Time [Prof. Haim Papo, Technion]
-# EEST Eastern Europe Standard Time [used by almost everyone else]
-#
-# Since timezones should be called by country and not capital cities,
-# I ruled out JST.  As Israel is in Asia Minor and not Eastern Europe,
-# EEST was equally unacceptable.  Since "zonal" was not compatible with
-# any other timezone abbreviation, I felt that 'IST' was the way to go
-# and, indeed, it has received almost universal acceptance in timezone
-# settings in Israeli computers.
-#
-# In any case, I am happy to share timezone abbreviations with India,
-# high on my favorite-country list (and not only because my wife's
-# family is from India).
-
-# From Shanks:
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Zion	1940	only	-	Jun	 1	0:00	1:00	D
-Rule	Zion	1942	1944	-	Nov	 1	0:00	0	S
-Rule	Zion	1943	only	-	Apr	 1	2:00	1:00	D
-Rule	Zion	1944	only	-	Apr	 1	0:00	1:00	D
-Rule	Zion	1945	only	-	Apr	16	0:00	1:00	D
-Rule	Zion	1945	only	-	Nov	 1	2:00	0	S
-Rule	Zion	1946	only	-	Apr	16	2:00	1:00	D
-Rule	Zion	1946	only	-	Nov	 1	0:00	0	S
-Rule	Zion	1948	only	-	May	23	0:00	2:00	DD
-Rule	Zion	1948	only	-	Sep	 1	0:00	1:00	D
-Rule	Zion	1948	1949	-	Nov	 1	2:00	0	S
-Rule	Zion	1949	only	-	May	 1	0:00	1:00	D
-Rule	Zion	1950	only	-	Apr	16	0:00	1:00	D
-Rule	Zion	1950	only	-	Sep	15	3:00	0	S
-Rule	Zion	1951	only	-	Apr	 1	0:00	1:00	D
-Rule	Zion	1951	only	-	Nov	11	3:00	0	S
-Rule	Zion	1952	only	-	Apr	20	2:00	1:00	D
-Rule	Zion	1952	only	-	Oct	19	3:00	0	S
-Rule	Zion	1953	only	-	Apr	12	2:00	1:00	D
-Rule	Zion	1953	only	-	Sep	13	3:00	0	S
-Rule	Zion	1954	only	-	Jun	13	0:00	1:00	D
-Rule	Zion	1954	only	-	Sep	12	0:00	0	S
-Rule	Zion	1955	only	-	Jun	11	2:00	1:00	D
-Rule	Zion	1955	only	-	Sep	11	0:00	0	S
-Rule	Zion	1956	only	-	Jun	 3	0:00	1:00	D
-Rule	Zion	1956	only	-	Sep	30	3:00	0	S
-Rule	Zion	1957	only	-	Apr	29	2:00	1:00	D
-Rule	Zion	1957	only	-	Sep	22	0:00	0	S
-Rule	Zion	1974	only	-	Jul	 7	0:00	1:00	D
-Rule	Zion	1974	only	-	Oct	13	0:00	0	S
-Rule	Zion	1975	only	-	Apr	20	0:00	1:00	D
-Rule	Zion	1975	only	-	Aug	31	0:00	0	S
-Rule	Zion	1985	only	-	Apr	14	0:00	1:00	D
-Rule	Zion	1985	only	-	Sep	15	0:00	0	S
-Rule	Zion	1986	only	-	May	18	0:00	1:00	D
-Rule	Zion	1986	only	-	Sep	 7	0:00	0	S
-Rule	Zion	1987	only	-	Apr	15	0:00	1:00	D
-Rule	Zion	1987	only	-	Sep	13	0:00	0	S
-Rule	Zion	1988	only	-	Apr	 9	0:00	1:00	D
-Rule	Zion	1988	only	-	Sep	 3	0:00	0	S
-
-# From Ephraim Silverberg
-# (1997-03-04, 1998-03-16, 1998-12-28, 2000-01-17, 2000-07-25, 2004-12-22,
-# and 2005-02-17):
-
-# According to the Office of the Secretary General of the Ministry of
-# Interior, there is NO set rule for Daylight-Savings/Standard time changes.
-# One thing is entrenched in law, however: that there must be at least 150
-# days of daylight savings time annually.  From 1993-1998, the change to
-# daylight savings time was on a Friday morning from midnight IST to
-# 1 a.m IDT; up until 1998, the change back to standard time was on a
-# Saturday night from midnight daylight savings time to 11 p.m. standard
-# time.  1996 is an exception to this rule where the change back to standard
-# time took place on Sunday night instead of Saturday night to avoid
-# conflicts with the Jewish New Year.  In 1999, the change to
-# daylight savings time was still on a Friday morning but from
-# 2 a.m. IST to 3 a.m. IDT; furthermore, the change back to standard time
-# was also on a Friday morning from 2 a.m. IDT to 1 a.m. IST for
-# 1999 only.  In the year 2000, the change to daylight savings time was
-# similar to 1999, but although the change back will be on a Friday, it
-# will take place from 1 a.m. IDT to midnight IST.  Starting in 2001, all
-# changes to/from will take place at 1 a.m. old time, but now there is no
-# rule as to what day of the week it will take place in as the start date
-# (except in 2003) is the night after the Passover Seder (i.e. the eve
-# of the 16th of Nisan in the lunar Hebrew calendar) and the end date
-# (except in 2002) is three nights before Yom Kippur [Day of Atonement]
-# (the eve of the 7th of Tishrei in the lunar Hebrew calendar).
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Zion	1989	only	-	Apr	30	0:00	1:00	D
-Rule	Zion	1989	only	-	Sep	 3	0:00	0	S
-Rule	Zion	1990	only	-	Mar	25	0:00	1:00	D
-Rule	Zion	1990	only	-	Aug	26	0:00	0	S
-Rule	Zion	1991	only	-	Mar	24	0:00	1:00	D
-Rule	Zion	1991	only	-	Sep	 1	0:00	0	S
-Rule	Zion	1992	only	-	Mar	29	0:00	1:00	D
-Rule	Zion	1992	only	-	Sep	 6	0:00	0	S
-Rule	Zion	1993	only	-	Apr	 2	0:00	1:00	D
-Rule	Zion	1993	only	-	Sep	 5	0:00	0	S
-
-# The dates for 1994-1995 were obtained from Office of the Spokeswoman for the
-# Ministry of Interior, Jerusalem, Israel.  The spokeswoman can be reached by
-# calling the office directly at 972-2-6701447 or 972-2-6701448.
-
-# Rule	NAME    FROM    TO      TYPE    IN      ON      AT      SAVE    LETTER/S
-Rule	Zion	1994	only	-	Apr	 1	0:00	1:00	D
-Rule	Zion	1994	only	-	Aug	28	0:00	0	S
-Rule	Zion	1995	only	-	Mar	31	0:00	1:00	D
-Rule	Zion	1995	only	-	Sep	 3	0:00	0	S
-
-# The dates for 1996 were determined by the Minister of Interior of the
-# time, Haim Ramon.  The official announcement regarding 1996-1998
-# (with the dates for 1997-1998 no longer being relevant) can be viewed at:
-#
-#   ftp://ftp.cs.huji.ac.il/pub/tz/announcements/1996-1998.ramon.ps.gz
-#
-# The dates for 1997-1998 were altered by his successor, Rabbi Eli Suissa.
-#
-# The official announcements for the years 1997-1999 can be viewed at:
-#
-#   ftp://ftp.cs.huji.ac.il/pub/tz/announcements/YYYY.ps.gz
-#
-#       where YYYY is the relevant year.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Zion	1996	only	-	Mar	15	0:00	1:00	D
-Rule	Zion	1996	only	-	Sep	16	0:00	0	S
-Rule	Zion	1997	only	-	Mar	21	0:00	1:00	D
-Rule	Zion	1997	only	-	Sep	14	0:00	0	S
-Rule	Zion	1998	only	-	Mar	20	0:00	1:00	D
-Rule	Zion	1998	only	-	Sep	 6	0:00	0	S
-Rule	Zion	1999	only	-	Apr	 2	2:00	1:00	D
-Rule	Zion	1999	only	-	Sep	 3	2:00	0	S
-
-# The Knesset Interior Committee has changed the dates for 2000 for
-# the third time in just over a year and have set new dates for the
-# years 2001-2004 as well.
-#
-# The official announcement for the start date of 2000 can be viewed at:
-#
-#	ftp://ftp.cs.huji.ac.il/pub/tz/announcements/2000-start.ps.gz
-#
-# The official announcement for the end date of 2000 and the dates
-# for the years 2001-2004 can be viewed at:
-#
-#	ftp://ftp.cs.huji.ac.il/pub/tz/announcements/2000-2004.ps.gz
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Zion	2000	only	-	Apr	14	2:00	1:00	D
-Rule	Zion	2000	only	-	Oct	 6	1:00	0	S
-Rule	Zion	2001	only	-	Apr	 9	1:00	1:00	D
-Rule	Zion	2001	only	-	Sep	24	1:00	0	S
-Rule	Zion	2002	only	-	Mar	29	1:00	1:00	D
-Rule	Zion	2002	only	-	Oct	 7	1:00	0	S
-Rule	Zion	2003	only	-	Mar	28	1:00	1:00	D
-Rule	Zion	2003	only	-	Oct	 3	1:00	0	S
-Rule	Zion	2004	only	-	Apr	 7	1:00	1:00	D
-Rule	Zion	2004	only	-	Sep	22	1:00	0	S
-
-# The proposed law agreed upon by the Knesset Interior Committee on
-# 2005-02-14 is that, for 2005 and beyond, DST starts at 02:00 the
-# last Friday before April 2nd (i.e. the last Friday in March or April
-# 1st itself if it falls on a Friday) and ends at 02:00 on the Saturday
-# night _before_ the fast of Yom Kippur.
-#
-# Those who can read Hebrew can view the announcement at:
-#
-#	ftp://ftp.cs.huji.ac.il/pub/tz/announcements/2005+beyond.ps
-
-# From Paul Eggert (2005-02-22):
-# I used Ephraim Silverberg's dst-israel.el program
-# <ftp://ftp.cs.huji.ac.il/pub/tz/software/dst-israel.el> (2005-02-20)
-# along with Ed Reingold's cal-hebrew in GNU Emacs 21.4,
-# to generate the transitions in this list.
-# (I replaced "lastFri" with "Fri>=26" by hand.)
-# The spring transitions below all correspond to the following Rule:
-#
-# Rule	Zion	2005	max	-	Mar	Fri>=26	2:00	1:00	D
-#
-# but older zic implementations (e.g., Solaris 8) do not support
-# "Fri>=26" to mean April 1 in years like 2005, so for now we list the
-# springtime transitions explicitly.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Zion	2005	only	-	Apr	 1	2:00	1:00	D
-Rule	Zion	2005	only	-	Oct	 9	2:00	0	S
-Rule	Zion	2006	2010	-	Mar	Fri>=26	2:00	1:00	D
-Rule	Zion	2006	only	-	Oct	 1	2:00	0	S
-Rule	Zion	2007	only	-	Sep	16	2:00	0	S
-Rule	Zion	2008	only	-	Oct	 5	2:00	0	S
-Rule	Zion	2009	only	-	Sep	27	2:00	0	S
-Rule	Zion	2010	only	-	Sep	12	2:00	0	S
-Rule	Zion	2011	only	-	Apr	 1	2:00	1:00	D
-Rule	Zion	2011	only	-	Oct	 2	2:00	0	S
-Rule	Zion	2012	2015	-	Mar	Fri>=26	2:00	1:00	D
-Rule	Zion	2012	only	-	Sep	23	2:00	0	S
-Rule	Zion	2013	only	-	Sep	 8	2:00	0	S
-Rule	Zion	2014	only	-	Sep	28	2:00	0	S
-Rule	Zion	2015	only	-	Sep	20	2:00	0	S
-Rule	Zion	2016	only	-	Apr	 1	2:00	1:00	D
-Rule	Zion	2016	only	-	Oct	 9	2:00	0	S
-Rule	Zion	2017	2021	-	Mar	Fri>=26	2:00	1:00	D
-Rule	Zion	2017	only	-	Sep	24	2:00	0	S
-Rule	Zion	2018	only	-	Sep	16	2:00	0	S
-Rule	Zion	2019	only	-	Oct	 6	2:00	0	S
-Rule	Zion	2020	only	-	Sep	27	2:00	0	S
-Rule	Zion	2021	only	-	Sep	12	2:00	0	S
-Rule	Zion	2022	only	-	Apr	 1	2:00	1:00	D
-Rule	Zion	2022	only	-	Oct	 2	2:00	0	S
-Rule	Zion	2023	2032	-	Mar	Fri>=26	2:00	1:00	D
-Rule	Zion	2023	only	-	Sep	24	2:00	0	S
-Rule	Zion	2024	only	-	Oct	 6	2:00	0	S
-Rule	Zion	2025	only	-	Sep	28	2:00	0	S
-Rule	Zion	2026	only	-	Sep	20	2:00	0	S
-Rule	Zion	2027	only	-	Oct	10	2:00	0	S
-Rule	Zion	2028	only	-	Sep	24	2:00	0	S
-Rule	Zion	2029	only	-	Sep	16	2:00	0	S
-Rule	Zion	2030	only	-	Oct	 6	2:00	0	S
-Rule	Zion	2031	only	-	Sep	21	2:00	0	S
-Rule	Zion	2032	only	-	Sep	12	2:00	0	S
-Rule	Zion	2033	only	-	Apr	 1	2:00	1:00	D
-Rule	Zion	2033	only	-	Oct	 2	2:00	0	S
-Rule	Zion	2034	2037	-	Mar	Fri>=26	2:00	1:00	D
-Rule	Zion	2034	only	-	Sep	17	2:00	0	S
-Rule	Zion	2035	only	-	Oct	 7	2:00	0	S
-Rule	Zion	2036	only	-	Sep	28	2:00	0	S
-Rule	Zion	2037	only	-	Sep	13	2:00	0	S
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Jerusalem	2:20:56 -	LMT	1880
-			2:20:40	-	JMT	1918	# Jerusalem Mean Time?
-			2:00	Zion	I%sT
-
-
-
-###############################################################################
-
-# Japan
-
-# `9:00' and `JST' is from Guy Harris.
-
-# From Paul Eggert (1995-03-06):
-# Today's _Asahi Evening News_ (page 4) reports that Japan had
-# daylight saving between 1948 and 1951, but ``the system was discontinued
-# because the public believed it would lead to longer working hours.''
-
-# From Mayumi Negishi in the 2005-08-10 Japan Times
-# <http://www.japantimes.co.jp/cgi-bin/getarticle.pl5?nn20050810f2.htm>:
-# Occupation authorities imposed daylight-saving time on Japan on
-# [1948-05-01]....  But lack of prior debate and the execution of
-# daylight-saving time just three days after the bill was passed generated
-# deep hatred of the concept....  The Diet unceremoniously passed a bill to
-# dump the unpopular system in October 1951, less than a month after the San
-# Francisco Peace Treaty was signed.  (A government poll in 1951 showed 53%
-# of the Japanese wanted to scrap daylight-saving time, as opposed to 30% who
-# wanted to keep it.)
-
-# Shanks writes that daylight saving in Japan during those years was as follows:
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Japan	1948	only	-	May	Sun>=1	2:00	1:00	D
-Rule	Japan	1948	1951	-	Sep	Sat>=8	2:00	0	S
-Rule	Japan	1949	only	-	Apr	Sun>=1	2:00	1:00	D
-Rule	Japan	1950	1951	-	May	Sun>=1	2:00	1:00	D
-# but the only locations using it (for birth certificates, presumably, since
-# Shanks's audience is astrologers) were US military bases.  For now, assume
-# that for most purposes daylight-saving time was observed; otherwise, what
-# would have been the point of the 1951 poll?
-
-# From Hideyuki Suzuki (1998-11-09):
-# 'Tokyo' usually stands for the former location of Tokyo Astronomical
-# Observatory: E 139 44' 40".90 (9h 18m 58s.727), N 35 39' 16".0.
-# This data is from 'Rika Nenpyou (Chronological Scientific Tables) 1996'
-# edited by National Astronomical Observatory of Japan....
-# JST (Japan Standard Time) has been used since 1888-01-01 00:00 (JST).
-# The law is enacted on 1886-07-07.
-
-# From Hideyuki Suzuki (1998-11-16):
-# The ordinance No. 51 (1886) established "standard time" in Japan,
-# which stands for the time on E 135 degree.
-# In the ordinance No. 167 (1895), "standard time" was renamed to "central
-# standard time".  And the same ordinance also established "western standard
-# time", which stands for the time on E 120 degree....  But "western standard
-# time" was abolished in the ordinance No. 529 (1937).  In the ordinance No.
-# 167, there is no mention regarding for what place western standard time is
-# standard....
-#
-# I wrote "ordinance" above, but I don't know how to translate.
-# In Japanese it's "chokurei", which means ordinance from emperor.
-
-# Shanks claims JST in use since 1896, and that a few places (e.g. Ishigaki)
-# use +0800; go with Suzuki.  Guess that all ordinances took effect on Jan 1.
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Tokyo	9:18:59	-	LMT	1887 Dec 31 15:00u
-			9:00	-	JST	1896
-			9:00	-	CJT	1938
-			9:00	Japan	J%sT
-# Since 1938, all Japanese possessions have been like Asia/Tokyo.
-
-# Jordan
-#
-# From <a href="http://star.arabia.com/990701/JO9.html">
-# Jordan Week (1999-07-01) </a> via Steffen Thorsen (1999-09-09):
-# Clocks in Jordan were forwarded one hour on Wednesday at midnight,
-# in accordance with the government's decision to implement summer time
-# all year round.
-#
-# From <a href="http://star.arabia.com/990930/JO9.html">
-# Jordan Week (1999-09-30) </a> via Steffen Thorsen (1999-11-09):
-# Winter time starts today Thursday, 30 September. Clocks will be turned back
-# by one hour.  This is the latest government decision and it's final!
-# The decision was taken because of the increase in working hours in
-# government's departments from six to seven hours.
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Jordan	1973	only	-	Jun	6	0:00	1:00	S
-Rule	Jordan	1973	1975	-	Oct	1	0:00	0	-
-Rule	Jordan	1974	1977	-	May	1	0:00	1:00	S
-Rule	Jordan	1976	only	-	Nov	1	0:00	0	-
-Rule	Jordan	1977	only	-	Oct	1	0:00	0	-
-Rule	Jordan	1978	only	-	Apr	30	0:00	1:00	S
-Rule	Jordan	1978	only	-	Sep	30	0:00	0	-
-Rule	Jordan	1985	only	-	Apr	1	0:00	1:00	S
-Rule	Jordan	1985	only	-	Oct	1	0:00	0	-
-Rule	Jordan	1986	1988	-	Apr	Fri>=1	0:00	1:00	S
-Rule	Jordan	1986	1990	-	Oct	Fri>=1	0:00	0	-
-Rule	Jordan	1989	only	-	May	8	0:00	1:00	S
-Rule	Jordan	1990	only	-	Apr	27	0:00	1:00	S
-Rule	Jordan	1991	only	-	Apr	17	0:00	1:00	S
-Rule	Jordan	1991	only	-	Sep	27	0:00	0	-
-Rule	Jordan	1992	only	-	Apr	10	0:00	1:00	S
-Rule	Jordan	1992	1993	-	Oct	Fri>=1	0:00	0	-
-Rule	Jordan	1993	1998	-	Apr	Fri>=1	0:00	1:00	S
-Rule	Jordan	1994	only	-	Sep	Fri>=15	0:00	0	-
-Rule	Jordan	1995	1998	-	Sep	Fri>=15	0:00s	0	-
-Rule	Jordan	1999	only	-	Jul	 1	0:00s	1:00	S
-Rule	Jordan	1999	max	-	Sep	lastThu	0:00s	0	-
-Rule	Jordan	2000	max	-	Mar	lastThu	0:00s	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Amman	2:23:44 -	LMT	1931
-			2:00	Jordan	EE%sT
-
-
-# Kazakhstan
-
-# From Paul Eggert (1996-11-22):
-# Andrew Evtichov (1996-04-13) writes that Kazakhstan
-# stayed in sync with Moscow after 1990, and that Aqtobe (formerly Aktyubinsk)
-# and Aqtau (formerly Shevchenko) are the largest cities in their zones.
-# Guess that Aqtau and Aqtobe diverged in 1995, since that's the first time
-# IATA SSIM mentions a third time zone in Kazakhstan.
-
-# From Paul Eggert (2001-10-18):
-# German Iofis, ELSI, Almaty (2001-10-09) reports that Kazakhstan uses
-# RussiaAsia rules, instead of switching at 00:00 as the IATA has it.
-# Go with Shanks, who has them always using RussiaAsia rules.
-# Also go with the following claims of Shanks:
-#
-# - Kazakhstan did not observe DST in 1991.
-# - Qyzylorda switched from +5:00 to +6:00 on 1992-01-19 02:00.
-# - Oral switched from +5:00 to +4:00 in spring 1989.
-
-# <a href="http://www.kazsociety.org.uk/news/2005/03/30.htm">
-# From Kazakhstan Embassy's News Bulletin #11 (2005-03-21):
-# </a>
-# The Government of Kazakhstan passed a resolution March 15 abolishing
-# daylight saving time citing lack of economic benefits and health
-# complications coupled with a decrease in productivity.
-#
-# From Branislav Kojic (in Astana) via Gwillim Law (2005-06-28):
-# ... what happened was that the former Kazakhstan Eastern time zone
-# was "blended" with the Central zone.  Therefore, Kazakhstan now has
-# two time zones, and difference between them is one hour.  The zone
-# closer to UTC is the former Western zone (probably still called the
-# same), encompassing four provinces in the west: Aqtobe, Atyrau,
-# Mangghystau, and West Kazakhstan.  The other zone encompasses
-# everything else....  I guess that would make Kazakhstan time zones
-# de jure UTC+5 and UTC+6 respectively.
-
-#
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-#
-# Almaty (formerly Alma-Ata), representing most locations in Kazakhstan
-Zone	Asia/Almaty	5:07:48 -	LMT	1924 May  2 # or Alma-Ata
-			5:00	-	ALMT	1930 Jun 21 # Alma-Ata Time
-			6:00 RussiaAsia ALM%sT	1991
-			6:00	-	ALMT	1992
-			6:00 RussiaAsia	ALM%sT	2005 Mar 15
-			6:00	-	ALMT
-# Qyzylorda (aka Kyzylorda, Kizilorda, Kzyl-Orda, etc.)
-Zone	Asia/Qyzylorda	4:21:52 -	LMT	1924 May  2
-			4:00	-	KIZT	1930 Jun 21 # Kizilorda Time
-			5:00	-	KIZT	1981 Apr  1
-			5:00	1:00	KIZST	1981 Oct  1
-			6:00	-	KIZT	1982 Apr  1
-			5:00 RussiaAsia	KIZ%sT	1991
-			5:00	-	KIZT	1991 Dec 16 # independence
-			5:00	-	QYZT	1992 Jan 19 2:00
-			6:00 RussiaAsia	QYZ%sT	2005 Mar 15
-			6:00	-	QYZT
-# Aqtobe (aka Aktobe, formerly Akt'ubinsk)
-Zone	Asia/Aqtobe	3:48:40	-	LMT	1924 May  2
-			4:00	-	AKTT	1930 Jun 21 # Aktyubinsk Time
-			5:00	-	AKTT	1981 Apr  1
-			5:00	1:00	AKTST	1981 Oct  1
-			6:00	-	AKTT	1982 Apr  1
-			5:00 RussiaAsia	AKT%sT	1991
-			5:00	-	AKTT	1991 Dec 16 # independence
-			5:00 RussiaAsia	AQT%sT	2005 Mar 15 # Aqtobe Time
-			5:00	-	AQTT
-# Mangghystau
-# Aqtau was not founded until 1963, but it represents an inhabited region,
-# so include time stamps before 1963.
-Zone	Asia/Aqtau	3:21:04	-	LMT	1924 May  2
-			4:00	-	FORT	1930 Jun 21 # Fort Shevchenko T
-			5:00	-	FORT	1963
-			5:00	-	SHET	1981 Oct  1 # Shevchenko Time
-			6:00	-	SHET	1982 Apr  1
-			5:00 RussiaAsia	SHE%sT	1991
-			5:00	-	SHET	1991 Dec 16 # independence
-			5:00 RussiaAsia	AQT%sT	1995 Mar lastSun 2:00 # Aqtau Time
-			4:00 RussiaAsia	AQT%sT	2005 Mar 15
-			5:00	-	AQTT
-# West Kazakhstan
-Zone	Asia/Oral	3:25:24	-	LMT	1924 May  2 # or Ural'sk
-			4:00	-	URAT	1930 Jun 21 # Ural'sk time
-			5:00	-	URAT	1981 Apr  1
-			5:00	1:00	URAST	1981 Oct  1
-			6:00	-	URAT	1982 Apr  1
-			5:00 RussiaAsia	URA%sT	1989 Mar 26 2:00
-			4:00 RussiaAsia	URA%sT	1991
-			4:00	-	URAT	1991 Dec 16 # independence
-			4:00 RussiaAsia	ORA%sT	2005 Mar 15 # Oral Time
-			5:00	-	ORAT
-
-# Kyrgyzstan (Kirgizstan)
-# Transitions through 1991 are from Shanks.
-
-# From Paul Eggert (2005-08-15):
-# According to an article dated today in the Kyrgyzstan Development Gateway
-# <http://eng.gateway.kg/cgi-bin/page.pl?id=1&story_name=doc9979.shtml>
-# Kyrgyzstan is canceling the daylight saving time system.  I take the article
-# to mean that they will leave their clocks at 6 hours ahead of UTC.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Kirgiz	1992	1996	-	Apr	Sun>=7	0:00s	1:00	S
-Rule	Kirgiz	1992	1996	-	Sep	lastSun	0:00	0	-
-Rule	Kirgiz	1997	max	-	Mar	lastSun	2:30	1:00	S
-Rule	Kirgiz	1997	max	-	Oct	lastSun	2:30	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Bishkek	4:58:24 -	LMT	1924 May  2
-			5:00	-	FRUT	1930 Jun 21 # Frunze Time
-			6:00 RussiaAsia FRU%sT	1991 Mar 31 2:00s
-			5:00	1:00	FRUST	1991 Aug 31 2:00 # independence
-			5:00	Kirgiz	KG%sT		    # Kirgizstan Time
-
-###############################################################################
-
-# Korea (North and South)
-
-# From Guy Harris:
-# According to someone at the Korean Times in San Francisco,
-# Daylight Savings Time was not observed until 1987.  He did not know
-# at what time of day DST starts or ends.
-
-# From Shanks:
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	ROK	1960	only	-	May	15	0:00	1:00	D
-Rule	ROK	1960	only	-	Sep	13	0:00	0	S
-Rule	ROK	1987	1988	-	May	Sun<=14	0:00	1:00	D
-Rule	ROK	1987	1988	-	Oct	Sun<=14	0:00	0	S
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Seoul	8:27:52	-	LMT	1890
-			8:30	-	KST	1904 Dec
-			9:00	-	KST	1928
-			8:30	-	KST	1932
-			9:00	-	KST	1954 Mar 21
-			8:00	ROK	K%sT	1961 Aug 10
-			8:30	-	KST	1968 Oct
-			9:00	ROK	K%sT
-Zone	Asia/Pyongyang	8:23:00 -	LMT	1890
-			8:30	-	KST	1904 Dec
-			9:00	-	KST	1928
-			8:30	-	KST	1932
-			9:00	-	KST	1954 Mar 21
-			8:00	-	KST	1961 Aug 10
-			9:00	-	KST
-
-###############################################################################
-
-# Kuwait
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Kuwait	3:11:56 -	LMT	1950
-			3:00	-	AST
-
-# Laos
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Vientiane	6:50:24 -	LMT	1906 Jun  9 # or Viangchan
-			7:06:20	-	SMT	1911 Mar 11 0:01 # Saigon MT?
-			7:00	-	ICT	1912 May
-			8:00	-	ICT	1931 May
-			7:00	-	ICT
-
-# Lebanon
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Lebanon	1920	only	-	Mar	28	0:00	1:00	S
-Rule	Lebanon	1920	only	-	Oct	25	0:00	0	-
-Rule	Lebanon	1921	only	-	Apr	3	0:00	1:00	S
-Rule	Lebanon	1921	only	-	Oct	3	0:00	0	-
-Rule	Lebanon	1922	only	-	Mar	26	0:00	1:00	S
-Rule	Lebanon	1922	only	-	Oct	8	0:00	0	-
-Rule	Lebanon	1923	only	-	Apr	22	0:00	1:00	S
-Rule	Lebanon	1923	only	-	Sep	16	0:00	0	-
-Rule	Lebanon	1957	1961	-	May	1	0:00	1:00	S
-Rule	Lebanon	1957	1961	-	Oct	1	0:00	0	-
-Rule	Lebanon	1972	only	-	Jun	22	0:00	1:00	S
-Rule	Lebanon	1972	1977	-	Oct	1	0:00	0	-
-Rule	Lebanon	1973	1977	-	May	1	0:00	1:00	S
-Rule	Lebanon	1978	only	-	Apr	30	0:00	1:00	S
-Rule	Lebanon	1978	only	-	Sep	30	0:00	0	-
-Rule	Lebanon	1984	1987	-	May	1	0:00	1:00	S
-Rule	Lebanon	1984	1991	-	Oct	16	0:00	0	-
-Rule	Lebanon	1988	only	-	Jun	1	0:00	1:00	S
-Rule	Lebanon	1989	only	-	May	10	0:00	1:00	S
-Rule	Lebanon	1990	1992	-	May	1	0:00	1:00	S
-Rule	Lebanon	1992	only	-	Oct	4	0:00	0	-
-Rule	Lebanon	1993	max	-	Mar	lastSun	0:00	1:00	S
-Rule	Lebanon	1993	1998	-	Sep	lastSun	0:00	0	-
-Rule	Lebanon	1999	max	-	Oct	lastSun	0:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Beirut	2:22:00 -	LMT	1880
-			2:00	Lebanon	EE%sT
-
-# Malaysia
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	NBorneo	1935	1941	-	Sep	14	0:00	0:20	TS # one-Third Summer
-Rule	NBorneo	1935	1941	-	Dec	14	0:00	0	-
-#
-# peninsular Malaysia
-# The data here are taken from Mok Ly Yng (2003-10-30)
-# <http://www.math.nus.edu.sg/aslaksen/teaching/timezone.html>.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Asia/Kuala_Lumpur	6:46:46 -	LMT	1901 Jan  1
-			6:55:25	-	SMT	1905 Jun  1 # Singapore M.T.
-			7:00	-	MALT	1933 Jan  1 # Malaya Time
-			7:00	0:20	MALST	1936 Jan  1
-			7:20	-	MALT	1941 Sep  1
-			7:30	-	MALT	1942 Feb 16
-			9:00	-	JST	1945 Sep 12
-			7:30	-	MALT	1982 Jan  1
-			8:00	-	MYT	# Malaysia Time
-# Sabah & Sarawak
-# From Paul Eggert (2003-11-01):
-# The data here are mostly from Shanks, but the 1942, 1945 and 1982
-# transition dates are from Mok Ly Yng.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Asia/Kuching	7:21:20	-	LMT	1926 Mar
-			7:30	-	BORT	1933	# Borneo Time
-			8:00	NBorneo	BOR%sT	1942 Feb 16
-			9:00	-	JST	1945 Sep 12
-			8:00	-	BORT	1982 Jan  1
-			8:00	-	MYT
-
-# Maldives
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Indian/Maldives	4:54:00 -	LMT	1880	# Male
-			4:54:00	-	MMT	1960	# Male Mean Time
-			5:00	-	MVT		# Maldives Time
-
-# Mongolia
-
-# Shanks says that Mongolia has three time zones, but usno1995 and the CIA map
-# Standard Time Zones of the World (1997-01)
-# both say that it has just one.
-
-# From Oscar van Vlijmen (1999-12-11):
-# <a href="http://www.mongoliatourism.gov.mn/general.htm">
-# General Information Mongolia
-# </a> (1999-09)
-# "Time: Mongolia has two time zones. Three westernmost provinces of
-# Bayan-Ulgii, Uvs, and Hovd are one hour earlier than the capital city, and
-# the rest of the country follows the Ulaanbaatar time, which is UTC/GMT plus
-# eight hours."
-
-# From Rives McDow (1999-12-13):
-# Mongolia discontinued the use of daylight savings time in 1999; 1998
-# being the last year it was implemented.  The dates of implementation I am
-# unsure of, but most probably it was similar to Russia, except for the time
-# of implementation may have been different....
-# Some maps in the past have indicated that there was an additional time
-# zone in the eastern part of Mongolia, including the provinces of Dornod,
-# Suhbaatar, and possibly Khentij.
-
-# From Paul Eggert (1999-12-15):
-# Naming and spelling is tricky in Mongolia.
-# We'll use Hovd (also spelled Chovd and Khovd) to represent the west zone;
-# the capital of the Hovd province is sometimes called Hovd, sometimes Dund-Us,
-# and sometimes Jirgalanta (with variant spellings), but the name Hovd
-# is good enough for our purposes.
-
-# From Rives McDow (2001-05-13):
-# In addition to Mongolia starting daylight savings as reported earlier
-# (adopted DST on 2001-04-27 02:00 local time, ending 2001-09-28),
-# there are three time zones.
-#
-# Provinces [at 7:00]: Bayan-ulgii, Uvs, Khovd, Zavkhan, Govi-Altai
-# Provinces [at 8:00]: Khovsgol, Bulgan, Arkhangai, Khentii, Tov,
-#	Bayankhongor, Ovorkhangai, Dundgovi, Dornogovi, Omnogovi
-# Provinces [at 9:00]: Dornod, Sukhbaatar
-#
-# [The province of Selenge is omitted from the above lists.]
-
-# From Ganbold Ts., Ulaanbaatar (2004-04-17):
-# Daylight saving occurs at 02:00 local time last Saturday of March.
-# It will change back to normal at 02:00 local time last Saturday of
-# September.... As I remember this rule was changed in 2001.
-#
-# From Paul Eggert (2004-04-17):
-# For now, assume Rives McDow's informant got confused about Friday vs
-# Saturday, and that his 2001 dates should have 1 added to them.
-
-# From Paul Eggert (2005-07-26):
-# We have wildly conflicting information about Mongolia's time zones.
-# Bill Bonnet (2005-05-19) reports that the US Embassy in Ulaanbaatar says
-# there is only one time zone and that DST is observed, citing Microsoft
-# Windows XP as the source.  Risto Nykanen (2005-05-16) reports that
-# travelmongolia.org says there are two time zones (UTC+7, UTC+8) with no DST.
-# Oscar van Vlijmen (2005-05-20) reports that the Mongolian Embassy in
-# Washington, DC says there are two time zones, with DST observed.
-# He also found
-# <http://ubpost.mongolnews.mn/index.php?subaction=showcomments&id=1111634894&archive=&start_from=&ucat=1&>
-# which also says that there is DST, and which has a comment by "Toddius"
-# (2005-03-31 06:05 +0700) saying "Mongolia actually has 3.5 time zones.
-# The West (OLGII) is +7 GMT, most of the country is ULAT is +8 GMT
-# and some Eastern provinces are +9 GMT but Sukhbaatar Aimag is SUHK +8.5 GMT.
-# The SUKH timezone is new this year, it is one of the few things the
-# parliament passed during the tumultuous winter session."
-# For now, let's ignore this information, until we have more confirmation.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Mongol	1983	1984	-	Apr	1	0:00	1:00	S
-Rule	Mongol	1983	only	-	Oct	1	0:00	0	-
-# IATA SSIM says 1990s switches occurred at 00:00, but Shanks (1995) lists
-# them at 02:00s, and McDow says the 2001 switches also occurred at 02:00.
-# Also, IATA SSIM (1996-09) says 1996-10-25.  Go with Shanks through 1998.
-Rule	Mongol	1985	1998	-	Mar	lastSun	2:00s	1:00	S
-Rule	Mongol	1984	1998	-	Sep	lastSun	2:00s	0	-
-# IATA SSIM (1999-09) says Mongolia no longer observes DST.
-Rule	Mongol	2001	only	-	Apr	lastSat	2:00	1:00	S
-Rule	Mongol	2001	max	-	Sep	lastSat	2:00	0	-
-Rule	Mongol	2002	max	-	Mar	lastSat	2:00	1:00	S
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-# Hovd, a.k.a. Chovd, Dund-Us, Dzhargalant, Khovd, Jirgalanta
-Zone	Asia/Hovd	6:06:36 -	LMT	1905 Aug
-			6:00	-	HOVT	1978	# Hovd Time
-			7:00	Mongol	HOV%sT
-# Ulaanbaatar, a.k.a. Ulan Bataar, Ulan Bator, Urga
-Zone	Asia/Ulaanbaatar 7:07:32 -	LMT	1905 Aug
-			7:00	-	ULAT	1978	# Ulaanbaatar Time
-			8:00	Mongol	ULA%sT
-# Choibalsan, a.k.a. Bajan Tuemen, Bajan Tumen, Chojbalsan,
-# Choybalsan, Sanbejse, Tchoibalsan
-Zone	Asia/Choibalsan	7:38:00 -	LMT	1905 Aug
-			7:00	-	ULAT	1978
-			8:00	-	ULAT	1983 Apr
-			9:00	Mongol	CHO%sT	# Choibalsan Time
-
-# Nepal
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Katmandu	5:41:16 -	LMT	1920
-			5:30	-	IST	1986
-			5:45	-	NPT	# Nepal Time
-
-# Oman
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Muscat	3:54:20 -	LMT	1920
-			4:00	-	GST
-
-# Pakistan
-
-# From Rives McDow (2002-03-13):
-# I have been advised that Pakistan has decided to adopt dst on a
-# TRIAL basis for one year, starting 00:01 local time on April 7, 2002
-# and ending at 00:01 local time October 6, 2002.  This is what I was
-# told, but I believe that the actual time of change may be 00:00; the
-# 00:01 was to make it clear which day it was on.
-
-# From Paul Eggert (2002-03-15):
-# Jesper Norgaard found this URL:
-# http://www.pak.gov.pk/public/news/app/app06_dec.htm
-# (dated 2001-12-06) which says that the Cabinet adopted a scheme "to
-# advance the clocks by one hour on the night between the first
-# Saturday and Sunday of April and revert to the original position on
-# 15th October each year".  This agrees with McDow's 04-07 at 00:00,
-# but disagrees about the October transition, and makes it sound like
-# it's not on a trial basis.  Also, the "between the first Saturday
-# and Sunday of April" phrase, if taken literally, means that the
-# transition takes place at 00:00 on the first Sunday on or after 04-02.
-
-# From Paul Eggert (2003-02-09):
-# DAWN <http://www.dawn.com/2002/10/06/top13.htm> reported on 2002-10-05
-# that 2002 DST ended that day at midnight.  Go with McDow for now.
-
-# From Steffen Thorsen (2003-03-14):
-# According to http://www.dawn.com/2003/03/07/top15.htm
-# there will be no DST in Pakistan this year:
-#
-# ISLAMABAD, March 6: Information and Media Development Minister Sheikh
-# Rashid Ahmed on Thursday said the cabinet had reversed a previous
-# decision to advance clocks by one hour in summer and put them back by
-# one hour in winter with the aim of saving light hours and energy.
-#
-# The minister told a news conference that the experiment had rather
-# shown 8 per cent higher consumption of electricity.
-
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule Pakistan	2002	only	-	Apr	Sun>=2	0:01	1:00	S
-Rule Pakistan	2002	only	-	Oct	Sun>=2	0:01	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Karachi	4:28:12 -	LMT	1907
-			5:30	-	IST	1942 Sep
-			5:30	1:00	IST	1945 Oct 15
-			5:30	-	IST	1951 Sep 30
-			5:00	-	KART	1971 Mar 26 # Karachi Time
-			5:00 Pakistan	PK%sT	# Pakistan Time
-
-# Palestine
-
-# From Amos Shapir (1998-02-15):
-#
-# From 1917 until 1948-05-15, all of Palestine, including the parts now
-# known as the Gaza Strip and the West Bank, was under British rule.
-# Therefore the rules given for Israel for that period, apply there too...
-#
-# The Gaza Strip was under Egyptian rule between 1948-05-15 until 1967-06-05
-# (except a short occupation by Israel from 1956-11 till 1957-03, but no
-# time zone was affected then).  It was never formally annexed to Egypt,
-# though.
-#
-# The rest of Palestine was under Jordanian rule at that time, formally
-# annexed in 1950 as the West Bank (and the word "Trans" was dropped from
-# the country's previous name of "the Hashemite Kingdom of the
-# Trans-Jordan").  So the rules for Jordan for that time apply.  Major
-# towns in that area are Nablus (Shchem), El-Halil (Hebron), Ramallah, and
-# East Jerusalem.
-#
-# Both areas were occupied by Israel in June 1967, but not annexed (except
-# for East Jerusalem).  They were on Israel time since then; there might
-# have been a Military Governor's order about time zones, but I'm not aware
-# of any (such orders may have been issued semi-annually whenever summer
-# time was in effect, but maybe the legal aspect of time was just neglected).
-#
-# The Palestinian Authority was established in 1993, and got hold of most
-# towns in the West Bank and Gaza by 1995.  I know that in order to
-# demonstrate...independence, they have been switching to
-# summer time and back on a different schedule than Israel's, but I don't
-# know when this was started, or what algorithm is used (most likely the
-# Jordanian one).
-#
-# To summarize, the table should probably look something like that:
-#
-# Area \ when | 1918-1947 | 1948-1967 | 1967-1995 | 1996-
-# ------------+-----------+-----------+-----------+-----------
-# Israel      | Zion      | Zion      | Zion      | Zion
-# West bank   | Zion      | Jordan    | Zion      | Jordan
-# Gaza        | Zion      | Egypt     | Zion      | Jordan
-#
-# I guess more info may be available from the PA's web page (if/when they
-# have one).
-
-# From Paul Eggert (1998-02-25):
-# Shanks writes that Gaza did not observe DST until 1957, but we'll go
-# with Shapir and assume that it observed DST from 1940 through 1947,
-# and that it used Jordanian rules starting in 1996.
-# We don't yet need a separate entry for the West Bank, since
-# the only differences between it and Gaza that we know about
-# occurred before our cutoff date of 1970.
-# However, as we get more information, we may need to add entries
-# for parts of the West Bank as they transitioned from Israel's rules
-# to Palestine's rules.  If you have more info about this, please
-# send it to tz@elsie.nci.nih.gov for incorporation into future editions.
-
-# From IINS News Service - Israel - 1998-03-23 10:38:07 Israel time,
-# forwarded by Ephraim Silverberg:
-#
-# Despite the fact that Israel changed over to daylight savings time
-# last week, the PLO Authority (PA) has decided not to turn its clocks
-# one-hour forward at this time.  As a sign of independence from Israeli rule,
-# the PA has decided to implement DST in April.
-
-# From Paul Eggert (1999-09-20):
-# Daoud Kuttab writes in
-# <a href="http://www.jpost.com/com/Archive/22.Apr.1999/Opinion/Article-2.html">
-# Holiday havoc
-# </a> (Jerusalem Post, 1999-04-22) that
-# the Palestinian National Authority changed to DST on 1999-04-15.
-# I vaguely recall that they switch back in October (sorry, forgot the source).
-# For now, let's assume that the spring switch was at 24:00,
-# and that they switch at 0:00 on the 3rd Fridays of April and October.
-
-# The rules for Egypt are stolen from the `africa' file.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule EgyptAsia	1957	only	-	May	10	0:00	1:00	S
-Rule EgyptAsia	1957	1958	-	Oct	 1	0:00	0	-
-Rule EgyptAsia	1958	only	-	May	 1	0:00	1:00	S
-Rule EgyptAsia	1959	1967	-	May	 1	1:00	1:00	S
-Rule EgyptAsia	1959	1965	-	Sep	30	3:00	0	-
-Rule EgyptAsia	1966	only	-	Oct	 1	3:00	0	-
-
-Rule Palestine	1999	max	-	Apr	Fri>=15	0:00	1:00	S
-Rule Palestine	1999	max	-	Oct	Fri>=15	0:00	0	-
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Gaza	2:17:52	-	LMT	1900 Oct
-			2:00	Zion	EET	1948 May 15
-			2:00 EgyptAsia	EE%sT	1967 Jun  5
-			2:00	Zion	I%sT	1996
-			2:00	Jordan	EE%sT	1999
-			2:00 Palestine	EE%sT
-
-# Paracel Is
-# no information
-
-# Philippines
-# On 1844-08-16, Narciso Claveria, governor-general of the
-# Philippines, issued a proclamation announcing that 1844-12-30 was to
-# be immediately followed by 1845-01-01.  Robert H. van Gent has a
-# transcript of the decree in <http://www.phys.uu.nl/~vgent/idl/idl.htm>.
-# The rest of this data is from Shanks.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Phil	1936	only	-	Nov	1	0:00	1:00	S
-Rule	Phil	1937	only	-	Feb	1	0:00	0	-
-Rule	Phil	1954	only	-	Apr	12	0:00	1:00	S
-Rule	Phil	1954	only	-	Jul	1	0:00	0	-
-Rule	Phil	1978	only	-	Mar	22	0:00	1:00	S
-Rule	Phil	1978	only	-	Sep	21	0:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Manila	-15:56:00 -	LMT	1844 Dec 31
-			8:04:00 -	LMT	1899 May 11
-			8:00	Phil	PH%sT	1942 May
-			9:00	-	JST	1944 Nov
-			8:00	Phil	PH%sT
-
-# Qatar
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Qatar	3:26:08 -	LMT	1920	# Al Dawhah / Doha
-			4:00	-	GST	1972 Jun
-			3:00	-	AST
-
-# Saudi Arabia
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Riyadh	3:06:52 -	LMT	1950
-			3:00	-	AST
-
-# Singapore
-# The data here are taken from Mok Ly Yng (2003-10-30)
-# <http://www.math.nus.edu.sg/aslaksen/teaching/timezone.html>.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Singapore	6:55:25 -	LMT	1901 Jan  1
-			6:55:25	-	SMT	1905 Jun  1 # Singapore M.T.
-			7:00	-	MALT	1933 Jan  1 # Malaya Time
-			7:00	0:20	MALST	1936 Jan  1
-			7:20	-	MALT	1941 Sep  1
-			7:30	-	MALT	1942 Feb 16
-			9:00	-	JST	1945 Sep 12
-			7:30	-	MALT	1965 Aug  9 # independence
-			7:30	-	SGT	1982 Jan  1 # Singapore Time
-			8:00	-	SGT
-
-# Spratly Is
-# no information
-
-# Sri Lanka
-# From Paul Eggert (1996-09-03):
-# "Sri Lanka advances clock by an hour to avoid blackout"
-# (www.virtual-pc.com/lankaweb/news/items/240596-2.html, 1996-05-24,
-# no longer available as of 1999-08-17)
-# reported ``the country's standard time will be put forward by one hour at
-# midnight Friday (1830 GMT) `in the light of the present power crisis'.''
-#
-# From Dharmasiri Senanayake, Sri Lanka Media Minister (1996-10-24), as quoted
-# by Shamindra in
-# <a href="news:54rka5$m5h@mtinsc01-mgt.ops.worldnet.att.net">
-# Daily News - Hot News Section (1996-10-26)
-# </a>:
-# With effect from 12.30 a.m. on 26th October 1996
-# Sri Lanka will be six (06) hours ahead of GMT.
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Colombo	5:19:24 -	LMT	1880
-			5:19:32	-	MMT	1906	# Moratuwa Mean Time
-			5:30	-	IST	1942 Jan  5
-			5:30	0:30	IHST	1942 Sep
-			5:30	1:00	IST	1945 Oct 16 2:00
-			5:30	-	IST	1996 May 25 0:00
-			6:30	-	LKT	1996 Oct 26 0:30
-			6:00	-	LKT
-
-# Syria
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Syria	1920	1923	-	Apr	Sun>=15	2:00	1:00	S
-Rule	Syria	1920	1923	-	Oct	Sun>=1	2:00	0	-
-Rule	Syria	1962	only	-	Apr	29	2:00	1:00	S
-Rule	Syria	1962	only	-	Oct	1	2:00	0	-
-Rule	Syria	1963	1965	-	May	1	2:00	1:00	S
-Rule	Syria	1963	only	-	Sep	30	2:00	0	-
-Rule	Syria	1964	only	-	Oct	1	2:00	0	-
-Rule	Syria	1965	only	-	Sep	30	2:00	0	-
-Rule	Syria	1966	only	-	Apr	24	2:00	1:00	S
-Rule	Syria	1966	1976	-	Oct	1	2:00	0	-
-Rule	Syria	1967	1978	-	May	1	2:00	1:00	S
-Rule	Syria	1977	1978	-	Sep	1	2:00	0	-
-Rule	Syria	1983	1984	-	Apr	9	2:00	1:00	S
-Rule	Syria	1983	1984	-	Oct	1	2:00	0	-
-Rule	Syria	1986	only	-	Feb	16	2:00	1:00	S
-Rule	Syria	1986	only	-	Oct	9	2:00	0	-
-Rule	Syria	1987	only	-	Mar	1	2:00	1:00	S
-Rule	Syria	1987	1988	-	Oct	31	2:00	0	-
-Rule	Syria	1988	only	-	Mar	15	2:00	1:00	S
-Rule	Syria	1989	only	-	Mar	31	2:00	1:00	S
-Rule	Syria	1989	only	-	Oct	1	2:00	0	-
-Rule	Syria	1990	only	-	Apr	1	2:00	1:00	S
-Rule	Syria	1990	only	-	Sep	30	2:00	0	-
-Rule	Syria	1991	only	-	Apr	 1	0:00	1:00	S
-Rule	Syria	1991	1992	-	Oct	 1	0:00	0	-
-Rule	Syria	1992	only	-	Apr	 8	0:00	1:00	S
-Rule	Syria	1993	only	-	Mar	26	0:00	1:00	S
-Rule	Syria	1993	only	-	Sep	25	0:00	0	-
-# IATA SSIM (1998-02) says 1998-04-02;
-# (1998-09) says 1999-03-29 and 1999-09-29; (1999-02) says 1999-04-02,
-# 2000-04-02, and 2001-04-02; (1999-09) says 2000-03-31 and 2001-03-31;
-# ignore all these claims and go with Shanks.
-Rule	Syria	1994	1996	-	Apr	 1	0:00	1:00	S
-Rule	Syria	1994	max	-	Oct	 1	0:00	0	-
-Rule	Syria	1997	1998	-	Mar	lastMon	0:00	1:00	S
-Rule	Syria	1999	max	-	Apr	 1	0:00	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Damascus	2:25:12 -	LMT	1920	# Dimashq
-			2:00	Syria	EE%sT
-
-# Tajikistan
-# From Shanks.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Dushanbe	4:35:12 -	LMT	1924 May  2
-			5:00	-	DUST	1930 Jun 21 # Dushanbe Time
-			6:00 RussiaAsia DUS%sT	1991 Mar 31 2:00s
-			5:00	1:00	DUSST	1991 Sep  9 2:00s
-			5:00	-	TJT		    # Tajikistan Time
-
-# Thailand
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Bangkok	6:42:04	-	LMT	1880
-			6:42:04	-	BMT	1920 Apr # Bangkok Mean Time
-			7:00	-	ICT
-
-# Turkmenistan
-# From Shanks.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Ashgabat	3:53:32 -	LMT	1924 May  2 # or Ashkhabad
-			4:00	-	ASHT	1930 Jun 21 # Ashkhabad Time
-			5:00 RussiaAsia	ASH%sT	1991 Mar 31 2:00
-			4:00 RussiaAsia	ASH%sT	1991 Oct 27 # independence
-			4:00 RussiaAsia TM%sT	1992 Jan 19 2:00
-			5:00	-	TMT
-
-# United Arab Emirates
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Dubai	3:41:12 -	LMT	1920
-			4:00	-	GST
-
-# Uzbekistan
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Samarkand	4:27:12 -	LMT	1924 May  2
-			4:00	-	SAMT	1930 Jun 21 # Samarkand Time
-			5:00	-	SAMT	1981 Apr  1
-			5:00	1:00	SAMST	1981 Oct  1
-			6:00 RussiaAsia TAS%sT	1991 Mar 31 2:00 # Tashkent Time
-			5:00 RussiaAsia	TAS%sT	1991 Sep  1 # independence
-			5:00 RussiaAsia	UZ%sT	1992
-			5:00 RussiaAsia	UZ%sT	1993
-			5:00	-	UZT
-Zone	Asia/Tashkent	4:37:12 -	LMT	1924 May  2
-			5:00	-	TAST	1930 Jun 21 # Tashkent Time
-			6:00 RussiaAsia TAS%sT	1991 Mar 31 2:00s
-			5:00 RussiaAsia	TAS%sT	1991 Sep  1 # independence
-			5:00 RussiaAsia	UZ%sT	1992
-			5:00 RussiaAsia	UZ%sT	1993
-			5:00	-	UZT
-
-# Vietnam
-# From Paul Eggert (1993-11-18):
-# Saigon's official name is Thanh-Pho Ho Chi Minh, but it's too long.
-# We'll stick with the traditional name for now.
-# From Shanks:
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Saigon	7:06:40 -	LMT	1906 Jun  9
-			7:06:20	-	SMT	1911 Mar 11 0:01 # Saigon MT?
-			7:00	-	ICT	1912 May
-			8:00	-	ICT	1931 May
-			7:00	-	ICT
-
-# Yemen
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Aden	3:00:48	-	LMT	1950
-			3:00	-	AST
+# @(#)asia	7.86
+
+# This data is by no means authoritative; if you think you know better,
+# go ahead and edit the file (and please send any changes to
+# tz@elsie.nci.nih.gov for general use in the future).
+
+# From Paul Eggert (1999-03-22):
+#
+# A good source for time zone historical data outside the U.S. is
+# Thomas G. Shanks, The International Atlas (5th edition),
+# San Diego: ACS Publications, Inc. (1999).
+#
+# Gwillim Law writes that a good source
+# for recent time zone data is the International Air Transport
+# Association's Standard Schedules Information Manual (IATA SSIM),
+# published semiannually.  Law sent in several helpful summaries
+# of the IATA's data after 1990.
+#
+# Except where otherwise noted, Shanks is the source for entries through 1990,
+# and IATA SSIM is the source for entries after 1990.
+#
+# Another source occasionally used is Edward W. Whitman, World Time Differences,
+# Whitman Publishing Co, 2 Niagara Av, Ealing, London (undated), which
+# I found in the UCLA library.
+#
+# A reliable and entertaining source about time zones is
+# Derek Howse, Greenwich time and longitude, Philip Wilson Publishers (1997).
+#
+# I invented the abbreviations marked `*' in the following table;
+# the rest are from earlier versions of this file, or from other sources.
+# Corrections are welcome!
+#	     std  dst
+#	     LMT	Local Mean Time
+#	2:00 EET  EEST	Eastern European Time
+#	2:00 IST  IDT	Israel
+#	3:00 AST  ADT	Arabia*
+#	3:30 IRST IRDT	Iran
+#	4:00 GST	Gulf*
+#	5:30 IST	India
+#	7:00 ICT	Indochina*
+#	7:00 WIT	west Indonesia
+#	8:00 CIT	central Indonesia
+#	8:00 CST	China
+#	9:00 CJT	Central Japanese Time (1896/1937)*
+#	9:00 EIT	east Indonesia
+#	9:00 JST  JDT	Japan
+#	9:00 KST  KDT	Korea
+#	9:30 CST	(Australian) Central Standard Time
+#
+# See the `europe' file for Russia and Turkey in Asia.
+
+# From Guy Harris:
+# Incorporates data for Singapore from Robert Elz' asia 1.1, as well as
+# additional information from Tom Yap, Sun Microsystems Intercontinental
+# Technical Support (including a page from the Official Airline Guide -
+# Worldwide Edition).  The names for time zones are guesses.
+
+###############################################################################
+
+# These rules are stolen from the `europe' file.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	EUAsia	1981	max	-	Mar	lastSun	 1:00u	1:00	S
+Rule	EUAsia	1996	max	-	Oct	lastSun	 1:00u	0	-
+Rule E-EurAsia	1981	max	-	Mar	lastSun	 0:00	1:00	S
+Rule E-EurAsia	1979	1995	-	Sep	lastSun	 0:00	0	-
+Rule E-EurAsia	1996	max	-	Oct	lastSun	 0:00	0	-
+Rule RussiaAsia	1981	1984	-	Apr	1	 0:00	1:00	S
+Rule RussiaAsia	1981	1983	-	Oct	1	 0:00	0	-
+Rule RussiaAsia	1984	1991	-	Sep	lastSun	 2:00s	0	-
+Rule RussiaAsia	1985	1991	-	Mar	lastSun	 2:00s	1:00	S
+Rule RussiaAsia	1992	only	-	Mar	lastSat	23:00	1:00	S
+Rule RussiaAsia	1992	only	-	Sep	lastSat	23:00	0	-
+Rule RussiaAsia	1993	max	-	Mar	lastSun	 2:00s	1:00	S
+Rule RussiaAsia	1993	1995	-	Sep	lastSun	 2:00s	0	-
+Rule RussiaAsia	1996	max	-	Oct	lastSun	 2:00s	0	-
+
+# Afghanistan
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Kabul	4:36:48 -	LMT	1890
+			4:00	-	AFT	1945
+			4:30	-	AFT
+
+# Armenia
+# From Paul Eggert (1999-10-29):
+# Shanks has Yerevan switching to 3:00 (with Russian DST) in spring 1991,
+# then to 4:00 with no DST in fall 1995, then readopting Russian DST in 1997.
+# Go with Shanks, even when he disagrees with others.  Edgar Der-Danieliantz
+# <edd@AIC.NET> reported (1996-05-04) that Yerevan probably wouldn't use DST
+# in 1996, though it did use DST in 1995.  IATA SSIM (1991/1998) reports that
+# Armenia switched from 3:00 to 4:00 in 1998 and observed DST after 1991,
+# but started switching at 3:00s in 1998.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Yerevan	2:58:00 -	LMT	1924 May  2
+			3:00	-	YERT	1957 Mar    # Yerevan Time
+			4:00 RussiaAsia YER%sT	1991 Mar 31 2:00s
+			3:00	1:00	YERST	1991 Sep 23 # independence
+			3:00 RussiaAsia	AM%sT	1995 Sep 24 2:00s
+			4:00	-	AMT	1997
+			4:00 RussiaAsia	AM%sT
+
+# Azerbaijan
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Azer	1997	max	-	Mar	lastSun	 1:00	1:00	S
+Rule	Azer	1997	max	-	Oct	lastSun	 1:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Baku	3:19:24 -	LMT	1924 May  2
+			3:00	-	BAKT	1957 Mar    # Baku Time
+			4:00 RussiaAsia BAK%sT	1991 Mar 31 2:00s
+			3:00	1:00	BAKST	1991 Aug 30 # independence
+			3:00 RussiaAsia	AZ%sT	1992 Sep lastSat 23:00
+			4:00	-	AZT	1996 # Azerbaijan time
+			4:00	EUAsia	AZ%sT	1997
+			4:00	Azer	AZ%sT
+
+# Bahrain
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Bahrain	3:22:20 -	LMT	1920		# Al Manamah
+			4:00	-	GST	1972 Jun
+			3:00	-	AST
+
+# Bangladesh
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Dhaka	6:01:40 -	LMT	1890
+			5:53:20	-	HMT	1941 Oct    # Howrah Mean Time?
+			6:30	-	BURT	1942 May 15 # Burma Time
+			5:30	-	IST	1942 Sep
+			6:30	-	BURT	1951 Sep 30
+			6:00	-	DACT	1971 Mar 26 # Dacca Time
+			6:00	-	BDT	# Bangladesh Time
+
+# Bhutan
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Thimphu	5:58:36 -	LMT	1947 Aug 15 # or Thimbu
+			5:30	-	IST	1987 Oct
+			6:00	-	BTT	# Bhutan Time
+
+# British Indian Ocean Territory
+# Whitman and the 1995 CIA time zone map say 5:00, but the
+# 1997 and later maps say 6:00.  Assume the switch occurred in 1996.
+# We have no information as to when standard time was introduced;
+# assume it occurred in 1907, the same year as Mauritius (which
+# then contained the Chagos Archipelago).
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Indian/Chagos	4:49:40	-	LMT	1907
+			5:00	-	IOT	1996 # BIOT Time
+			6:00	-	IOT
+
+# Brunei
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Brunei	7:39:40 -	LMT	1926 Mar   # Bandar Seri Begawan
+			7:30	-	BNT	1933
+			8:00	-	BNT
+
+# Burma / Myanmar
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Rangoon	6:24:40 -	LMT	1880		# or Yangon
+			6:24:36	-	RMT	1920	   # Rangoon Mean Time?
+			6:30	-	BURT	1942 May   # Burma Time
+			9:00	-	JST	1945 May 3
+			6:30	-	MMT		   # Myanmar Time
+
+# Cambodia
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Phnom_Penh	6:59:40 -	LMT	1906 Jun  9
+			7:06:20	-	SMT	1911 Mar 11 0:01 # Saigon MT?
+			7:00	-	ICT	1912 May
+			8:00	-	ICT	1931 May
+			7:00	-	ICT
+
+# China
+
+# From Guy Harris:
+# People's Republic of China.  Yes, they really have only one time zone.
+
+# From Bob Devine (1988-01-28):
+# No they don't.  See TIME mag, 1986-02-17 p.52.  Even though
+# China is across 4 physical time zones, before Feb 1, 1986 only the
+# Peking (Bejing) time zone was recognized.  Since that date, China
+# has two of 'em -- Peking's and Urumqi (named after the capital of
+# the Xinjiang Uyghur Autonomous Region).  I don't know about DST for it.
+#
+# . . .I just deleted the DST table and this editor makes it too
+# painful to suck in another copy..  So, here is what I have for
+# DST start/end dates for Peking's time zone (info from AP):
+#
+#     1986 May 4 - Sept 14
+#     1987 mid-April - ??
+
+# From U. S. Naval Observatory (1989-01-19):
+# CHINA               8 H  AHEAD OF UTC  ALL OF CHINA, INCL TAIWAN
+# CHINA               9 H  AHEAD OF UTC  APR 17 - SEP 10
+
+# From Paul Eggert (1995-12-19):
+# Shanks writes that China has had a single time zone since 1980 May 1,
+# observing summer DST from 1986 through 1991; this contradicts Devine's
+# note about Time magazine, though apparently _something_ happened in 1986.
+# Go with Shanks for now.  I made up names for the other pre-1980 time zones.
+
+# From Shanks:
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Shang	1940	only	-	Jun	 3	0:00	1:00	D
+Rule	Shang	1940	1941	-	Oct	 1	0:00	0	S
+Rule	Shang	1941	only	-	Mar	16	0:00	1:00	D
+Rule	PRC	1986	only	-	May	 4	0:00	1:00	D
+Rule	PRC	1986	1991	-	Sep	Sun>=11	0:00	0	S
+Rule	PRC	1987	1991	-	Apr	Sun>=10	0:00	1:00	D
+#
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+#
+# From Anthony Fok (2001-12-20):
+# BTW, I did some research on-line and found some info regarding these five
+# historic timezones from some Taiwan websites.  And yes, there are official
+# Chinese names for these locales (before 1949):
+# Changbai Time ("Long-white Time", Long-white = Heilongjiang area)
+Zone	Asia/Harbin	8:26:44	-	LMT	1928 # or Haerbin
+			8:30	-	CHAT	1932 Mar # Changbai Time
+			8:00	-	CST	1940
+			9:00	-	CHAT	1966 May
+			8:30	-	CHAT	1980 May
+			8:00	PRC	C%sT
+# Zhongyuan Time ("Central plain Time")
+Zone	Asia/Shanghai	8:05:52	-	LMT	1928
+			8:00	Shang	C%sT	1949
+			8:00	PRC	C%sT
+# Long-shu Time (probably due to Long and Shu being two names of that area)
+Zone	Asia/Chongqing	7:06:20	-	LMT	1928 # or Chungking
+			7:00	-	LONT	1980 May # Long-shu Time
+			8:00	PRC	C%sT
+# Xin-zang Time ("Xinjiang-Tibet Time")
+Zone	Asia/Urumqi	5:50:20	-	LMT	1928 # or Urumchi
+			6:00	-	URUT	1980 May # Urumqi Time
+			8:00	PRC	C%sT
+# Kunlun Time
+Zone	Asia/Kashgar	5:03:56	-	LMT	1928 # or Kashi or Kaxgar
+			5:30	-	KAST	1940	 # Kashgar Time
+			5:00	-	KAST	1980 May
+			8:00	PRC	C%sT
+
+# Hong Kong (Xianggang)
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	HK	1946	only	-	Apr	20	3:30	1:00	S
+Rule	HK	1946	only	-	Dec	1	3:30	0	-
+Rule	HK	1947	only	-	Apr	13	3:30	1:00	S
+Rule	HK	1947	only	-	Dec	30	3:30	0	-
+Rule	HK	1948	only	-	May	2	3:30	1:00	S
+Rule	HK	1948	1952	-	Oct	lastSun	3:30	0	-
+Rule	HK	1949	1953	-	Apr	Sun>=1	3:30	1:00	S
+Rule	HK	1953	only	-	Nov	1	3:30	0	-
+Rule	HK	1954	1964	-	Mar	Sun>=18	3:30	1:00	S
+Rule	HK	1954	only	-	Oct	31	3:30	0	-
+Rule	HK	1955	1964	-	Nov	Sun>=1	3:30	0	-
+Rule	HK	1965	1977	-	Apr	Sun>=16	3:30	1:00	S
+Rule	HK	1965	1977	-	Oct	Sun>=16	3:30	0	-
+Rule	HK	1979	1980	-	May	Sun>=8	3:30	1:00	S
+Rule	HK	1979	1980	-	Oct	Sun>=16	3:30	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Hong_Kong	7:36:36 -	LMT	1904 Oct 30
+			8:00	HK	HK%sT
+
+
+###############################################################################
+
+# Taiwan
+
+# Shanks writes that Taiwan observed DST during 1945, when it
+# was still controlled by Japan.  This is hard to believe, but we don't
+# have any other information.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Taiwan	1945	1951	-	May	1	0:00	1:00	D
+Rule	Taiwan	1945	1951	-	Oct	1	0:00	0	S
+Rule	Taiwan	1952	only	-	Mar	1	0:00	1:00	D
+Rule	Taiwan	1952	1954	-	Nov	1	0:00	0	S
+Rule	Taiwan	1953	1959	-	Apr	1	0:00	1:00	D
+Rule	Taiwan	1955	1961	-	Oct	1	0:00	0	S
+Rule	Taiwan	1960	1961	-	Jun	1	0:00	1:00	D
+Rule	Taiwan	1974	1975	-	Apr	1	0:00	1:00	D
+Rule	Taiwan	1974	1975	-	Oct	1	0:00	0	S
+Rule	Taiwan	1980	only	-	Jun	30	0:00	1:00	D
+Rule	Taiwan	1980	only	-	Sep	30	0:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Taipei	8:06:00 -	LMT	1896 # or Taibei or T'ai-pei
+			8:00	Taiwan	C%sT
+
+# Macau (Macao, Aomen)
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Macau	1961	1962	-	Mar	Sun>=16	3:30	1:00	S
+Rule	Macau	1961	1964	-	Nov	Sun>=1	3:30	0	-
+Rule	Macau	1963	only	-	Mar	Sun>=16	0:00	1:00	S
+Rule	Macau	1964	only	-	Mar	Sun>=16	3:30	1:00	S
+Rule	Macau	1965	only	-	Mar	Sun>=16	0:00	1:00	S
+Rule	Macau	1965	only	-	Oct	31	0:00	0	-
+Rule	Macau	1966	1971	-	Apr	Sun>=16	3:30	1:00	S
+Rule	Macau	1966	1971	-	Oct	Sun>=16	3:30	0	-
+Rule	Macau	1972	1974	-	Apr	Sun>=15	0:00	1:00	S
+Rule	Macau	1972	1973	-	Oct	Sun>=15	0:00	0	-
+Rule	Macau	1974	1977	-	Oct	Sun>=15	3:30	0	-
+Rule	Macau	1975	1977	-	Apr	Sun>=15	3:30	1:00	S
+Rule	Macau	1978	1980	-	Apr	Sun>=15	0:00	1:00	S
+Rule	Macau	1978	1980	-	Oct	Sun>=15	0:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Macau	7:34:20 -	LMT	1912
+			8:00	Macau	MO%sT	1999 Dec 20 # return to China
+			8:00	PRC	C%sT
+
+
+###############################################################################
+
+# Cyprus
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Cyprus	1975	only	-	Apr	13	0:00	1:00	S
+Rule	Cyprus	1975	only	-	Oct	12	0:00	0	-
+Rule	Cyprus	1976	only	-	May	15	0:00	1:00	S
+Rule	Cyprus	1976	only	-	Oct	11	0:00	0	-
+Rule	Cyprus	1977	1980	-	Apr	Sun>=1	0:00	1:00	S
+Rule	Cyprus	1977	only	-	Sep	25	0:00	0	-
+Rule	Cyprus	1978	only	-	Oct	2	0:00	0	-
+Rule	Cyprus	1979	1997	-	Sep	lastSun	0:00	0	-
+Rule	Cyprus	1981	1998	-	Mar	lastSun	0:00	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Nicosia	2:13:28 -	LMT	1921 Nov 14
+			2:00	Cyprus	EE%sT	1998 Sep
+			2:00	EUAsia	EE%sT
+# IATA SSIM (1998-09) has Cyprus using EU rules for the first time.
+
+# Classically, Cyprus belongs to Asia; e.g. see Herodotus, Histories, I.72.
+# However, for various reasons many users expect to find it under Europe.
+Link	Asia/Nicosia	Europe/Nicosia
+
+# Georgia
+# From Paul Eggert (1994-11-19):
+# Today's _Economist_ (p 60) reports that Georgia moved its clocks forward
+# an hour recently, due to a law proposed by Zurab Murvanidze,
+# an MP who went on a hunger strike for 11 days to force discussion about it!
+# We have no details, but we'll guess they didn't move the clocks back in fall.
+#
+# From Mathew Englander, quoting AP (1996-10-23 13:05-04):
+# Instead of putting back clocks at the end of October, Georgia
+# will stay on daylight savings time this winter to save energy,
+# President Eduard Shevardnadze decreed Wednesday.
+#
+# From the BBC via Joseph S. Myers (2004-06-27):
+#
+# Georgia moved closer to Western Europe on Sunday...  The former Soviet
+# republic has changed its time zone back to that of Moscow.  As a result it
+# is now just four hours ahead of Greenwich Mean Time, rather than five hours
+# ahead.  The switch was decreed by the pro-Western president of Georgia,
+# Mikhail Saakashvili, who said the change was partly prompted by the process
+# of integration into Europe.
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Tbilisi	2:59:16 -	LMT	1880
+			2:59:16	-	TBMT	1924 May  2 # Tbilisi Mean Time
+			3:00	-	TBIT	1957 Mar    # Tbilisi Time
+			4:00 RussiaAsia TBI%sT	1991 Mar 31 2:00s
+			3:00	1:00	TBIST	1991 Apr  9 # independence
+			3:00 RussiaAsia GE%sT	1992 # Georgia Time
+			3:00 E-EurAsia	GE%sT	1994 Sep lastSun
+			4:00 E-EurAsia	GE%sT	1996 Oct lastSun
+			4:00	1:00	GEST	1997 Mar lastSun
+			4:00 E-EurAsia	GE%sT	2004 Jun 27
+			3:00 RussiaAsia	GE%sT
+
+# East Timor
+
+# From Joao Carrascalao, brother of the former governor of East Timor, in
+# <a href="http://etan.org/et99c/december/26-31/30ETMAY.htm">
+# East Timor may be late for its millennium
+# </a> (1999-12-26/31):
+# Portugal tried to change the time forward in 1974 because the sun
+# rises too early but the suggestion raised a lot of problems with the
+# Timorese and I still don't think it would work today because it
+# conflicts with their way of life.
+
+# From Paul Eggert (2000-12-04):
+# We don't have any record of the above attempt.
+# Most likely our records are incomplete, but we have no better data.
+
+# <a href="http://www.hri.org/news/world/undh/last/00-08-16.undh.html">
+# From Manoel de Almeida e Silva, Deputy Spokesman for the UN Secretary-General
+# (2000-08-16)</a>:
+# The Cabinet of the East Timor Transition Administration decided
+# today to advance East Timor's time by one hour.  The time change,
+# which will be permanent, with no seasonal adjustment, will happen at
+# midnight on Saturday, September 16.
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Dili	8:22:20 -	LMT	1912
+			8:00	-	TLT	1942 Feb 21 23:00 # E Timor Time
+			9:00	-	JST	1945 Aug
+			9:00	-	TLT	1976 May  3
+			8:00	-	CIT	2000 Sep 17 00:00
+			9:00	-	TLT
+
+# India
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Calcutta	5:53:28 -	LMT	1880	# Kolkata
+			5:53:20	-	HMT	1941 Oct    # Howrah Mean Time?
+			6:30	-	BURT	1942 May 15 # Burma Time
+			5:30	-	IST	1942 Sep
+			5:30	1:00	IST	1945 Oct 15
+			5:30	-	IST
+# The following are like Asia/Calcutta:
+#	Andaman Is
+#	Lakshadweep (Laccadive, Minicoy and Amindivi Is)
+#	Nicobar Is
+
+# Indonesia
+#
+# From Gwillim Law (2001-05-28), overriding Shanks:
+# <http://www.sumatera-inc.com/go_to_invest/about_indonesia.asp#standtime>
+# says that Indonesia's time zones changed on 1988-01-01.  Looking at some
+# time zone maps, I think that must refer to Western Borneo (Kalimantan Barat
+# and Kalimantan Tengah) switching from UTC+8 to UTC+7.
+#
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Asia/Jakarta	7:07:12 -	LMT	1867 Aug 10
+# Shanks says the next transition was at 1924 Jan 1 0:13,
+# but this must be a typo.
+			7:07:12	-	JMT	1923 Dec 31 23:47:12 # Jakarta
+			7:20	-	JAVT	1932 Nov	 # Java Time
+			7:30	-	WIT	1942 Mar 23
+			9:00	-	JST	1945 Aug
+			7:30	-	WIT	1948 May
+			8:00	-	WIT	1950 May
+			7:30	-	WIT	1964
+			7:00	-	WIT
+Zone Asia/Pontianak	7:17:20	-	LMT	1908 May
+			7:17:20	-	PMT	1932 Nov    # Pontianak MT
+			7:30	-	WIT	1942 Jan 29
+			9:00	-	JST	1945 Aug
+			7:30	-	WIT	1948 May
+			8:00	-	WIT	1950 May
+			7:30	-	WIT	1964
+			8:00	-	CIT	1988 Jan  1
+			7:00	-	WIT
+Zone Asia/Makassar	7:57:36 -	LMT	1920
+			7:57:36	-	MMT	1932 Nov    # Macassar MT
+			8:00	-	CIT	1942 Feb  9
+			9:00	-	JST	1945 Aug
+			8:00	-	CIT
+Zone Asia/Jayapura	9:22:48 -	LMT	1932 Nov
+			9:00	-	EIT	1944
+			9:30	-	CST	1964
+			9:00	-	EIT
+
+# Iran
+
+# From Roozbeh Pournader (2003-03-15):
+# This is an English translation of what I just found (originally in Persian).
+# The Gregorian dates in brackets are mine:
+#
+#	Official Newspaper No. 13548-1370/6/25 [1991-09-16]
+#	No. 16760/T233 H				1370/6/10 [1991-09-01]
+#
+#	The Rule About Change of the Official Time of the Country
+#
+#	The Board of Ministers, in the meeting dated 1370/5/23 [1991-08-14],
+#	based on the suggestion number 2221/D dated 1370/4/22 [1991-07-13]
+#	of the Country's Organization for Official and Employment Affairs,
+#	and referring to the law for equating the working hours of workers
+#	and officers in the whole country dated 1359/4/23 [1980-07-14], and
+#	for synchronizing the official times of the country, agreed that:
+#
+#	The official time of the country will should move forward one hour
+#	at the 24[:00] hours of the first day of Farvardin and should return
+#	to its previous state at the 24[:00] hours of the 30th day of
+#	Shahrivar.
+#
+#	First Deputy to the President - Hassan Habibi
+#
+# From personal experience, that agrees with what has been followed
+# for at least the last 5 years.  Before that, for a few years, the
+# date used was the first Thursday night of Farvardin and the last
+# Thursday night of Shahrivar, but I can't give exact dates....
+# I have also changed the abbreviations to what is considered correct
+# here in Iran, IRST for regular time and IRDT for daylight saving time.
+#
+# From Roozbeh Pournader (2005-04-05):
+# The text of the Iranian law, in effect since 1925, clearly mentions
+# that the true solar year is the measure, and there is no arithmetic
+# leap year calculation involved.  There has never been any serious
+# plan to change that law....
+#
+# From Paul Eggert (2005-04-05):
+# Go with Shanks before September 1991, and with Pournader thereafter.
+# I used Ed Reingold's cal-persia in GNU Emacs 21.2 to check Persian dates,
+# stopping after 2037 when 32-bit time_t's overflow.
+# That cal-persia used Birashk's approximation, which disagrees with the solar
+# calendar predictions for the year 2025, so I corrected those dates by hand.
+#
+# From Oscar van Vlijmen (2005-03-30), writing about future
+# discrepancies between cal-persia and the Iranian calendar:
+# For 2091 solar-longitude-after yields 2091-03-20 08:40:07.7 UT for
+# the vernal equinox and that gets so close to 12:00 some local
+# Iranian time that the definition of the correct location needs to be
+# known exactly, amongst other factors.  2157 is even closer:
+# 2157-03-20 08:37:15.5 UT.  But the Gregorian year 2025 should give
+# no interpretation problem whatsoever.  By the way, another instant
+# in the near future where there will be a discrepancy between
+# arithmetical and astronomical Iranian calendars will be in 2058:
+# vernal equinox on 2058-03-20 09:03:05.9 UT.  The Java version of
+# Reingold's/Dershowitz' calculator gives correctly the Gregorian date
+# 2058-03-21 for 1 Farvardin 1437 (astronomical).
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Iran	1978	1980	-	Mar	21	0:00	1:00	D
+Rule	Iran	1978	only	-	Oct	21	0:00	0	S
+Rule	Iran	1979	only	-	Sep	19	0:00	0	S
+Rule	Iran	1980	only	-	Sep	23	0:00	0	S
+Rule	Iran	1991	only	-	May	 3	0:00	1:00	D
+Rule	Iran	1992	1995	-	Mar	22	0:00	1:00	D
+Rule	Iran	1991	1995	-	Sep	22	0:00	0	S
+Rule	Iran	1996	only	-	Mar	21	0:00	1:00	D
+Rule	Iran	1996	only	-	Sep	21	0:00	0	S
+Rule	Iran	1997	1999	-	Mar	22	0:00	1:00	D
+Rule	Iran	1997	1999	-	Sep	22	0:00	0	S
+Rule	Iran	2000	only	-	Mar	21	0:00	1:00	D
+Rule	Iran	2000	only	-	Sep	21	0:00	0	S
+Rule	Iran	2001	2003	-	Mar	22	0:00	1:00	D
+Rule	Iran	2001	2003	-	Sep	22	0:00	0	S
+Rule	Iran	2004	only	-	Mar	21	0:00	1:00	D
+Rule	Iran	2004	only	-	Sep	21	0:00	0	S
+Rule	Iran	2005	2007	-	Mar	22	0:00	1:00	D
+Rule	Iran	2005	2007	-	Sep	22	0:00	0	S
+Rule	Iran	2008	only	-	Mar	21	0:00	1:00	D
+Rule	Iran	2008	only	-	Sep	21	0:00	0	S
+Rule	Iran	2009	2011	-	Mar	22	0:00	1:00	D
+Rule	Iran	2009	2011	-	Sep	22	0:00	0	S
+Rule	Iran	2012	only	-	Mar	21	0:00	1:00	D
+Rule	Iran	2012	only	-	Sep	21	0:00	0	S
+Rule	Iran	2013	2015	-	Mar	22	0:00	1:00	D
+Rule	Iran	2013	2015	-	Sep	22	0:00	0	S
+Rule	Iran	2016	only	-	Mar	21	0:00	1:00	D
+Rule	Iran	2016	only	-	Sep	21	0:00	0	S
+Rule	Iran	2017	2019	-	Mar	22	0:00	1:00	D
+Rule	Iran	2017	2019	-	Sep	22	0:00	0	S
+Rule	Iran	2020	only	-	Mar	21	0:00	1:00	D
+Rule	Iran	2020	only	-	Sep	21	0:00	0	S
+Rule	Iran	2021	2023	-	Mar	22	0:00	1:00	D
+Rule	Iran	2021	2023	-	Sep	22	0:00	0	S
+Rule	Iran	2024	only	-	Mar	21	0:00	1:00	D
+Rule	Iran	2024	only	-	Sep	21	0:00	0	S
+Rule	Iran	2025	2027	-	Mar	22	0:00	1:00	D
+Rule	Iran	2025	2027	-	Sep	22	0:00	0	S
+Rule	Iran	2028	2029	-	Mar	21	0:00	1:00	D
+Rule	Iran	2028	2029	-	Sep	21	0:00	0	S
+Rule	Iran	2030	2031	-	Mar	22	0:00	1:00	D
+Rule	Iran	2030	2031	-	Sep	22	0:00	0	S
+Rule	Iran	2032	2033	-	Mar	21	0:00	1:00	D
+Rule	Iran	2032	2033	-	Sep	21	0:00	0	S
+Rule	Iran	2034	2035	-	Mar	22	0:00	1:00	D
+Rule	Iran	2034	2035	-	Sep	22	0:00	0	S
+Rule	Iran	2036	2037	-	Mar	21	0:00	1:00	D
+Rule	Iran	2036	2037	-	Sep	21	0:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Tehran	3:25:44	-	LMT	1916
+			3:25:44	-	TMT	1946	# Tehran Mean Time
+			3:30	-	IRST	1977 Nov
+			4:00	Iran	IR%sT	1979
+			3:30	Iran	IR%sT
+
+
+# Iraq
+#
+# From Jonathan Lennox (2000-06-12):
+# An article in this week's Economist ("Inside the Saddam-free zone", p. 50 in
+# the U.S. edition) on the Iraqi Kurds contains a paragraph:
+# "The three northern provinces ... switched their clocks this spring and
+# are an hour ahead of Baghdad."
+#
+# But Rives McDow (2000-06-18) quotes a contact in Iraqi-Kurdistan as follows:
+# In the past, some Kurdish nationalists, as a protest to the Iraqi
+# Government, did not adhere to daylight saving time.  They referred
+# to daylight saving as Saddam time.  But, as of today, the time zone
+# in Iraqi-Kurdistan is on standard time with Baghdad, Iraq.
+#
+# So we'll ignore the Economist's claim.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Iraq	1982	only	-	May	1	0:00	1:00	D
+Rule	Iraq	1982	1984	-	Oct	1	0:00	0	S
+Rule	Iraq	1983	only	-	Mar	31	0:00	1:00	D
+Rule	Iraq	1984	1985	-	Apr	1	0:00	1:00	D
+Rule	Iraq	1985	1990	-	Sep	lastSun	1:00s	0	S
+Rule	Iraq	1986	1990	-	Mar	lastSun	1:00s	1:00	D
+# IATA SSIM (1991/1996) says Apr 1 12:01am UTC; guess the `:01' is a typo.
+# Shanks says Iraq did not observe DST 1992/1997 or 1999 on; ignore this.
+Rule	Iraq	1991	max	-	Apr	 1	3:00s	1:00	D
+Rule	Iraq	1991	max	-	Oct	 1	3:00s	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Baghdad	2:57:40	-	LMT	1890
+			2:57:36	-	BMT	1918	    # Baghdad Mean Time?
+			3:00	-	AST	1982 May
+			3:00	Iraq	A%sT
+
+
+###############################################################################
+
+# Israel
+
+# From Ephraim Silverberg (2001-01-11):
+#
+# I coined "IST/IDT" circa 1988.  Until then there were three
+# different abbreviations in use:
+#
+# JST  Jerusalem Standard Time [Danny Braniss, Hebrew University]
+# IZT  Israel Zonal (sic) Time [Prof. Haim Papo, Technion]
+# EEST Eastern Europe Standard Time [used by almost everyone else]
+#
+# Since timezones should be called by country and not capital cities,
+# I ruled out JST.  As Israel is in Asia Minor and not Eastern Europe,
+# EEST was equally unacceptable.  Since "zonal" was not compatible with
+# any other timezone abbreviation, I felt that 'IST' was the way to go
+# and, indeed, it has received almost universal acceptance in timezone
+# settings in Israeli computers.
+#
+# In any case, I am happy to share timezone abbreviations with India,
+# high on my favorite-country list (and not only because my wife's
+# family is from India).
+
+# From Shanks:
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Zion	1940	only	-	Jun	 1	0:00	1:00	D
+Rule	Zion	1942	1944	-	Nov	 1	0:00	0	S
+Rule	Zion	1943	only	-	Apr	 1	2:00	1:00	D
+Rule	Zion	1944	only	-	Apr	 1	0:00	1:00	D
+Rule	Zion	1945	only	-	Apr	16	0:00	1:00	D
+Rule	Zion	1945	only	-	Nov	 1	2:00	0	S
+Rule	Zion	1946	only	-	Apr	16	2:00	1:00	D
+Rule	Zion	1946	only	-	Nov	 1	0:00	0	S
+Rule	Zion	1948	only	-	May	23	0:00	2:00	DD
+Rule	Zion	1948	only	-	Sep	 1	0:00	1:00	D
+Rule	Zion	1948	1949	-	Nov	 1	2:00	0	S
+Rule	Zion	1949	only	-	May	 1	0:00	1:00	D
+Rule	Zion	1950	only	-	Apr	16	0:00	1:00	D
+Rule	Zion	1950	only	-	Sep	15	3:00	0	S
+Rule	Zion	1951	only	-	Apr	 1	0:00	1:00	D
+Rule	Zion	1951	only	-	Nov	11	3:00	0	S
+Rule	Zion	1952	only	-	Apr	20	2:00	1:00	D
+Rule	Zion	1952	only	-	Oct	19	3:00	0	S
+Rule	Zion	1953	only	-	Apr	12	2:00	1:00	D
+Rule	Zion	1953	only	-	Sep	13	3:00	0	S
+Rule	Zion	1954	only	-	Jun	13	0:00	1:00	D
+Rule	Zion	1954	only	-	Sep	12	0:00	0	S
+Rule	Zion	1955	only	-	Jun	11	2:00	1:00	D
+Rule	Zion	1955	only	-	Sep	11	0:00	0	S
+Rule	Zion	1956	only	-	Jun	 3	0:00	1:00	D
+Rule	Zion	1956	only	-	Sep	30	3:00	0	S
+Rule	Zion	1957	only	-	Apr	29	2:00	1:00	D
+Rule	Zion	1957	only	-	Sep	22	0:00	0	S
+Rule	Zion	1974	only	-	Jul	 7	0:00	1:00	D
+Rule	Zion	1974	only	-	Oct	13	0:00	0	S
+Rule	Zion	1975	only	-	Apr	20	0:00	1:00	D
+Rule	Zion	1975	only	-	Aug	31	0:00	0	S
+Rule	Zion	1985	only	-	Apr	14	0:00	1:00	D
+Rule	Zion	1985	only	-	Sep	15	0:00	0	S
+Rule	Zion	1986	only	-	May	18	0:00	1:00	D
+Rule	Zion	1986	only	-	Sep	 7	0:00	0	S
+Rule	Zion	1987	only	-	Apr	15	0:00	1:00	D
+Rule	Zion	1987	only	-	Sep	13	0:00	0	S
+Rule	Zion	1988	only	-	Apr	 9	0:00	1:00	D
+Rule	Zion	1988	only	-	Sep	 3	0:00	0	S
+
+# From Ephraim Silverberg
+# (1997-03-04, 1998-03-16, 1998-12-28, 2000-01-17, 2000-07-25, 2004-12-22,
+# and 2005-02-17):
+
+# According to the Office of the Secretary General of the Ministry of
+# Interior, there is NO set rule for Daylight-Savings/Standard time changes.
+# One thing is entrenched in law, however: that there must be at least 150
+# days of daylight savings time annually.  From 1993-1998, the change to
+# daylight savings time was on a Friday morning from midnight IST to
+# 1 a.m IDT; up until 1998, the change back to standard time was on a
+# Saturday night from midnight daylight savings time to 11 p.m. standard
+# time.  1996 is an exception to this rule where the change back to standard
+# time took place on Sunday night instead of Saturday night to avoid
+# conflicts with the Jewish New Year.  In 1999, the change to
+# daylight savings time was still on a Friday morning but from
+# 2 a.m. IST to 3 a.m. IDT; furthermore, the change back to standard time
+# was also on a Friday morning from 2 a.m. IDT to 1 a.m. IST for
+# 1999 only.  In the year 2000, the change to daylight savings time was
+# similar to 1999, but although the change back will be on a Friday, it
+# will take place from 1 a.m. IDT to midnight IST.  Starting in 2001, all
+# changes to/from will take place at 1 a.m. old time, but now there is no
+# rule as to what day of the week it will take place in as the start date
+# (except in 2003) is the night after the Passover Seder (i.e. the eve
+# of the 16th of Nisan in the lunar Hebrew calendar) and the end date
+# (except in 2002) is three nights before Yom Kippur [Day of Atonement]
+# (the eve of the 7th of Tishrei in the lunar Hebrew calendar).
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Zion	1989	only	-	Apr	30	0:00	1:00	D
+Rule	Zion	1989	only	-	Sep	 3	0:00	0	S
+Rule	Zion	1990	only	-	Mar	25	0:00	1:00	D
+Rule	Zion	1990	only	-	Aug	26	0:00	0	S
+Rule	Zion	1991	only	-	Mar	24	0:00	1:00	D
+Rule	Zion	1991	only	-	Sep	 1	0:00	0	S
+Rule	Zion	1992	only	-	Mar	29	0:00	1:00	D
+Rule	Zion	1992	only	-	Sep	 6	0:00	0	S
+Rule	Zion	1993	only	-	Apr	 2	0:00	1:00	D
+Rule	Zion	1993	only	-	Sep	 5	0:00	0	S
+
+# The dates for 1994-1995 were obtained from Office of the Spokeswoman for the
+# Ministry of Interior, Jerusalem, Israel.  The spokeswoman can be reached by
+# calling the office directly at 972-2-6701447 or 972-2-6701448.
+
+# Rule	NAME    FROM    TO      TYPE    IN      ON      AT      SAVE    LETTER/S
+Rule	Zion	1994	only	-	Apr	 1	0:00	1:00	D
+Rule	Zion	1994	only	-	Aug	28	0:00	0	S
+Rule	Zion	1995	only	-	Mar	31	0:00	1:00	D
+Rule	Zion	1995	only	-	Sep	 3	0:00	0	S
+
+# The dates for 1996 were determined by the Minister of Interior of the
+# time, Haim Ramon.  The official announcement regarding 1996-1998
+# (with the dates for 1997-1998 no longer being relevant) can be viewed at:
+#
+#   ftp://ftp.cs.huji.ac.il/pub/tz/announcements/1996-1998.ramon.ps.gz
+#
+# The dates for 1997-1998 were altered by his successor, Rabbi Eli Suissa.
+#
+# The official announcements for the years 1997-1999 can be viewed at:
+#
+#   ftp://ftp.cs.huji.ac.il/pub/tz/announcements/YYYY.ps.gz
+#
+#       where YYYY is the relevant year.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Zion	1996	only	-	Mar	15	0:00	1:00	D
+Rule	Zion	1996	only	-	Sep	16	0:00	0	S
+Rule	Zion	1997	only	-	Mar	21	0:00	1:00	D
+Rule	Zion	1997	only	-	Sep	14	0:00	0	S
+Rule	Zion	1998	only	-	Mar	20	0:00	1:00	D
+Rule	Zion	1998	only	-	Sep	 6	0:00	0	S
+Rule	Zion	1999	only	-	Apr	 2	2:00	1:00	D
+Rule	Zion	1999	only	-	Sep	 3	2:00	0	S
+
+# The Knesset Interior Committee has changed the dates for 2000 for
+# the third time in just over a year and have set new dates for the
+# years 2001-2004 as well.
+#
+# The official announcement for the start date of 2000 can be viewed at:
+#
+#	ftp://ftp.cs.huji.ac.il/pub/tz/announcements/2000-start.ps.gz
+#
+# The official announcement for the end date of 2000 and the dates
+# for the years 2001-2004 can be viewed at:
+#
+#	ftp://ftp.cs.huji.ac.il/pub/tz/announcements/2000-2004.ps.gz
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Zion	2000	only	-	Apr	14	2:00	1:00	D
+Rule	Zion	2000	only	-	Oct	 6	1:00	0	S
+Rule	Zion	2001	only	-	Apr	 9	1:00	1:00	D
+Rule	Zion	2001	only	-	Sep	24	1:00	0	S
+Rule	Zion	2002	only	-	Mar	29	1:00	1:00	D
+Rule	Zion	2002	only	-	Oct	 7	1:00	0	S
+Rule	Zion	2003	only	-	Mar	28	1:00	1:00	D
+Rule	Zion	2003	only	-	Oct	 3	1:00	0	S
+Rule	Zion	2004	only	-	Apr	 7	1:00	1:00	D
+Rule	Zion	2004	only	-	Sep	22	1:00	0	S
+
+# The proposed law agreed upon by the Knesset Interior Committee on
+# 2005-02-14 is that, for 2005 and beyond, DST starts at 02:00 the
+# last Friday before April 2nd (i.e. the last Friday in March or April
+# 1st itself if it falls on a Friday) and ends at 02:00 on the Saturday
+# night _before_ the fast of Yom Kippur.
+#
+# Those who can read Hebrew can view the announcement at:
+#
+#	ftp://ftp.cs.huji.ac.il/pub/tz/announcements/2005+beyond.ps
+
+# From Paul Eggert (2005-02-22):
+# I used Ephraim Silverberg's dst-israel.el program
+# <ftp://ftp.cs.huji.ac.il/pub/tz/software/dst-israel.el> (2005-02-20)
+# along with Ed Reingold's cal-hebrew in GNU Emacs 21.4,
+# to generate the transitions in this list.
+# (I replaced "lastFri" with "Fri>=26" by hand.)
+# The spring transitions below all correspond to the following Rule:
+#
+# Rule	Zion	2005	max	-	Mar	Fri>=26	2:00	1:00	D
+#
+# but older zic implementations (e.g., Solaris 8) do not support
+# "Fri>=26" to mean April 1 in years like 2005, so for now we list the
+# springtime transitions explicitly.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Zion	2005	only	-	Apr	 1	2:00	1:00	D
+Rule	Zion	2005	only	-	Oct	 9	2:00	0	S
+Rule	Zion	2006	2010	-	Mar	Fri>=26	2:00	1:00	D
+Rule	Zion	2006	only	-	Oct	 1	2:00	0	S
+Rule	Zion	2007	only	-	Sep	16	2:00	0	S
+Rule	Zion	2008	only	-	Oct	 5	2:00	0	S
+Rule	Zion	2009	only	-	Sep	27	2:00	0	S
+Rule	Zion	2010	only	-	Sep	12	2:00	0	S
+Rule	Zion	2011	only	-	Apr	 1	2:00	1:00	D
+Rule	Zion	2011	only	-	Oct	 2	2:00	0	S
+Rule	Zion	2012	2015	-	Mar	Fri>=26	2:00	1:00	D
+Rule	Zion	2012	only	-	Sep	23	2:00	0	S
+Rule	Zion	2013	only	-	Sep	 8	2:00	0	S
+Rule	Zion	2014	only	-	Sep	28	2:00	0	S
+Rule	Zion	2015	only	-	Sep	20	2:00	0	S
+Rule	Zion	2016	only	-	Apr	 1	2:00	1:00	D
+Rule	Zion	2016	only	-	Oct	 9	2:00	0	S
+Rule	Zion	2017	2021	-	Mar	Fri>=26	2:00	1:00	D
+Rule	Zion	2017	only	-	Sep	24	2:00	0	S
+Rule	Zion	2018	only	-	Sep	16	2:00	0	S
+Rule	Zion	2019	only	-	Oct	 6	2:00	0	S
+Rule	Zion	2020	only	-	Sep	27	2:00	0	S
+Rule	Zion	2021	only	-	Sep	12	2:00	0	S
+Rule	Zion	2022	only	-	Apr	 1	2:00	1:00	D
+Rule	Zion	2022	only	-	Oct	 2	2:00	0	S
+Rule	Zion	2023	2032	-	Mar	Fri>=26	2:00	1:00	D
+Rule	Zion	2023	only	-	Sep	24	2:00	0	S
+Rule	Zion	2024	only	-	Oct	 6	2:00	0	S
+Rule	Zion	2025	only	-	Sep	28	2:00	0	S
+Rule	Zion	2026	only	-	Sep	20	2:00	0	S
+Rule	Zion	2027	only	-	Oct	10	2:00	0	S
+Rule	Zion	2028	only	-	Sep	24	2:00	0	S
+Rule	Zion	2029	only	-	Sep	16	2:00	0	S
+Rule	Zion	2030	only	-	Oct	 6	2:00	0	S
+Rule	Zion	2031	only	-	Sep	21	2:00	0	S
+Rule	Zion	2032	only	-	Sep	12	2:00	0	S
+Rule	Zion	2033	only	-	Apr	 1	2:00	1:00	D
+Rule	Zion	2033	only	-	Oct	 2	2:00	0	S
+Rule	Zion	2034	2037	-	Mar	Fri>=26	2:00	1:00	D
+Rule	Zion	2034	only	-	Sep	17	2:00	0	S
+Rule	Zion	2035	only	-	Oct	 7	2:00	0	S
+Rule	Zion	2036	only	-	Sep	28	2:00	0	S
+Rule	Zion	2037	only	-	Sep	13	2:00	0	S
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Jerusalem	2:20:56 -	LMT	1880
+			2:20:40	-	JMT	1918	# Jerusalem Mean Time?
+			2:00	Zion	I%sT
+
+
+
+###############################################################################
+
+# Japan
+
+# `9:00' and `JST' is from Guy Harris.
+
+# From Paul Eggert (1995-03-06):
+# Today's _Asahi Evening News_ (page 4) reports that Japan had
+# daylight saving between 1948 and 1951, but ``the system was discontinued
+# because the public believed it would lead to longer working hours.''
+
+# From Mayumi Negishi in the 2005-08-10 Japan Times
+# <http://www.japantimes.co.jp/cgi-bin/getarticle.pl5?nn20050810f2.htm>:
+# Occupation authorities imposed daylight-saving time on Japan on
+# [1948-05-01]....  But lack of prior debate and the execution of
+# daylight-saving time just three days after the bill was passed generated
+# deep hatred of the concept....  The Diet unceremoniously passed a bill to
+# dump the unpopular system in October 1951, less than a month after the San
+# Francisco Peace Treaty was signed.  (A government poll in 1951 showed 53%
+# of the Japanese wanted to scrap daylight-saving time, as opposed to 30% who
+# wanted to keep it.)
+
+# Shanks writes that daylight saving in Japan during those years was as follows:
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Japan	1948	only	-	May	Sun>=1	2:00	1:00	D
+Rule	Japan	1948	1951	-	Sep	Sat>=8	2:00	0	S
+Rule	Japan	1949	only	-	Apr	Sun>=1	2:00	1:00	D
+Rule	Japan	1950	1951	-	May	Sun>=1	2:00	1:00	D
+# but the only locations using it (for birth certificates, presumably, since
+# Shanks's audience is astrologers) were US military bases.  For now, assume
+# that for most purposes daylight-saving time was observed; otherwise, what
+# would have been the point of the 1951 poll?
+
+# From Hideyuki Suzuki (1998-11-09):
+# 'Tokyo' usually stands for the former location of Tokyo Astronomical
+# Observatory: E 139 44' 40".90 (9h 18m 58s.727), N 35 39' 16".0.
+# This data is from 'Rika Nenpyou (Chronological Scientific Tables) 1996'
+# edited by National Astronomical Observatory of Japan....
+# JST (Japan Standard Time) has been used since 1888-01-01 00:00 (JST).
+# The law is enacted on 1886-07-07.
+
+# From Hideyuki Suzuki (1998-11-16):
+# The ordinance No. 51 (1886) established "standard time" in Japan,
+# which stands for the time on E 135 degree.
+# In the ordinance No. 167 (1895), "standard time" was renamed to "central
+# standard time".  And the same ordinance also established "western standard
+# time", which stands for the time on E 120 degree....  But "western standard
+# time" was abolished in the ordinance No. 529 (1937).  In the ordinance No.
+# 167, there is no mention regarding for what place western standard time is
+# standard....
+#
+# I wrote "ordinance" above, but I don't know how to translate.
+# In Japanese it's "chokurei", which means ordinance from emperor.
+
+# Shanks claims JST in use since 1896, and that a few places (e.g. Ishigaki)
+# use +0800; go with Suzuki.  Guess that all ordinances took effect on Jan 1.
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Tokyo	9:18:59	-	LMT	1887 Dec 31 15:00u
+			9:00	-	JST	1896
+			9:00	-	CJT	1938
+			9:00	Japan	J%sT
+# Since 1938, all Japanese possessions have been like Asia/Tokyo.
+
+# Jordan
+#
+# From <a href="http://star.arabia.com/990701/JO9.html">
+# Jordan Week (1999-07-01) </a> via Steffen Thorsen (1999-09-09):
+# Clocks in Jordan were forwarded one hour on Wednesday at midnight,
+# in accordance with the government's decision to implement summer time
+# all year round.
+#
+# From <a href="http://star.arabia.com/990930/JO9.html">
+# Jordan Week (1999-09-30) </a> via Steffen Thorsen (1999-11-09):
+# Winter time starts today Thursday, 30 September. Clocks will be turned back
+# by one hour.  This is the latest government decision and it's final!
+# The decision was taken because of the increase in working hours in
+# government's departments from six to seven hours.
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Jordan	1973	only	-	Jun	6	0:00	1:00	S
+Rule	Jordan	1973	1975	-	Oct	1	0:00	0	-
+Rule	Jordan	1974	1977	-	May	1	0:00	1:00	S
+Rule	Jordan	1976	only	-	Nov	1	0:00	0	-
+Rule	Jordan	1977	only	-	Oct	1	0:00	0	-
+Rule	Jordan	1978	only	-	Apr	30	0:00	1:00	S
+Rule	Jordan	1978	only	-	Sep	30	0:00	0	-
+Rule	Jordan	1985	only	-	Apr	1	0:00	1:00	S
+Rule	Jordan	1985	only	-	Oct	1	0:00	0	-
+Rule	Jordan	1986	1988	-	Apr	Fri>=1	0:00	1:00	S
+Rule	Jordan	1986	1990	-	Oct	Fri>=1	0:00	0	-
+Rule	Jordan	1989	only	-	May	8	0:00	1:00	S
+Rule	Jordan	1990	only	-	Apr	27	0:00	1:00	S
+Rule	Jordan	1991	only	-	Apr	17	0:00	1:00	S
+Rule	Jordan	1991	only	-	Sep	27	0:00	0	-
+Rule	Jordan	1992	only	-	Apr	10	0:00	1:00	S
+Rule	Jordan	1992	1993	-	Oct	Fri>=1	0:00	0	-
+Rule	Jordan	1993	1998	-	Apr	Fri>=1	0:00	1:00	S
+Rule	Jordan	1994	only	-	Sep	Fri>=15	0:00	0	-
+Rule	Jordan	1995	1998	-	Sep	Fri>=15	0:00s	0	-
+Rule	Jordan	1999	only	-	Jul	 1	0:00s	1:00	S
+Rule	Jordan	1999	max	-	Sep	lastThu	0:00s	0	-
+Rule	Jordan	2000	max	-	Mar	lastThu	0:00s	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Amman	2:23:44 -	LMT	1931
+			2:00	Jordan	EE%sT
+
+
+# Kazakhstan
+
+# From Paul Eggert (1996-11-22):
+# Andrew Evtichov (1996-04-13) writes that Kazakhstan
+# stayed in sync with Moscow after 1990, and that Aqtobe (formerly Aktyubinsk)
+# and Aqtau (formerly Shevchenko) are the largest cities in their zones.
+# Guess that Aqtau and Aqtobe diverged in 1995, since that's the first time
+# IATA SSIM mentions a third time zone in Kazakhstan.
+
+# From Paul Eggert (2001-10-18):
+# German Iofis, ELSI, Almaty (2001-10-09) reports that Kazakhstan uses
+# RussiaAsia rules, instead of switching at 00:00 as the IATA has it.
+# Go with Shanks, who has them always using RussiaAsia rules.
+# Also go with the following claims of Shanks:
+#
+# - Kazakhstan did not observe DST in 1991.
+# - Qyzylorda switched from +5:00 to +6:00 on 1992-01-19 02:00.
+# - Oral switched from +5:00 to +4:00 in spring 1989.
+
+# <a href="http://www.kazsociety.org.uk/news/2005/03/30.htm">
+# From Kazakhstan Embassy's News Bulletin #11 (2005-03-21):
+# </a>
+# The Government of Kazakhstan passed a resolution March 15 abolishing
+# daylight saving time citing lack of economic benefits and health
+# complications coupled with a decrease in productivity.
+#
+# From Branislav Kojic (in Astana) via Gwillim Law (2005-06-28):
+# ... what happened was that the former Kazakhstan Eastern time zone
+# was "blended" with the Central zone.  Therefore, Kazakhstan now has
+# two time zones, and difference between them is one hour.  The zone
+# closer to UTC is the former Western zone (probably still called the
+# same), encompassing four provinces in the west: Aqtobe, Atyrau,
+# Mangghystau, and West Kazakhstan.  The other zone encompasses
+# everything else....  I guess that would make Kazakhstan time zones
+# de jure UTC+5 and UTC+6 respectively.
+
+#
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+#
+# Almaty (formerly Alma-Ata), representing most locations in Kazakhstan
+Zone	Asia/Almaty	5:07:48 -	LMT	1924 May  2 # or Alma-Ata
+			5:00	-	ALMT	1930 Jun 21 # Alma-Ata Time
+			6:00 RussiaAsia ALM%sT	1991
+			6:00	-	ALMT	1992
+			6:00 RussiaAsia	ALM%sT	2005 Mar 15
+			6:00	-	ALMT
+# Qyzylorda (aka Kyzylorda, Kizilorda, Kzyl-Orda, etc.)
+Zone	Asia/Qyzylorda	4:21:52 -	LMT	1924 May  2
+			4:00	-	KIZT	1930 Jun 21 # Kizilorda Time
+			5:00	-	KIZT	1981 Apr  1
+			5:00	1:00	KIZST	1981 Oct  1
+			6:00	-	KIZT	1982 Apr  1
+			5:00 RussiaAsia	KIZ%sT	1991
+			5:00	-	KIZT	1991 Dec 16 # independence
+			5:00	-	QYZT	1992 Jan 19 2:00
+			6:00 RussiaAsia	QYZ%sT	2005 Mar 15
+			6:00	-	QYZT
+# Aqtobe (aka Aktobe, formerly Akt'ubinsk)
+Zone	Asia/Aqtobe	3:48:40	-	LMT	1924 May  2
+			4:00	-	AKTT	1930 Jun 21 # Aktyubinsk Time
+			5:00	-	AKTT	1981 Apr  1
+			5:00	1:00	AKTST	1981 Oct  1
+			6:00	-	AKTT	1982 Apr  1
+			5:00 RussiaAsia	AKT%sT	1991
+			5:00	-	AKTT	1991 Dec 16 # independence
+			5:00 RussiaAsia	AQT%sT	2005 Mar 15 # Aqtobe Time
+			5:00	-	AQTT
+# Mangghystau
+# Aqtau was not founded until 1963, but it represents an inhabited region,
+# so include time stamps before 1963.
+Zone	Asia/Aqtau	3:21:04	-	LMT	1924 May  2
+			4:00	-	FORT	1930 Jun 21 # Fort Shevchenko T
+			5:00	-	FORT	1963
+			5:00	-	SHET	1981 Oct  1 # Shevchenko Time
+			6:00	-	SHET	1982 Apr  1
+			5:00 RussiaAsia	SHE%sT	1991
+			5:00	-	SHET	1991 Dec 16 # independence
+			5:00 RussiaAsia	AQT%sT	1995 Mar lastSun 2:00 # Aqtau Time
+			4:00 RussiaAsia	AQT%sT	2005 Mar 15
+			5:00	-	AQTT
+# West Kazakhstan
+Zone	Asia/Oral	3:25:24	-	LMT	1924 May  2 # or Ural'sk
+			4:00	-	URAT	1930 Jun 21 # Ural'sk time
+			5:00	-	URAT	1981 Apr  1
+			5:00	1:00	URAST	1981 Oct  1
+			6:00	-	URAT	1982 Apr  1
+			5:00 RussiaAsia	URA%sT	1989 Mar 26 2:00
+			4:00 RussiaAsia	URA%sT	1991
+			4:00	-	URAT	1991 Dec 16 # independence
+			4:00 RussiaAsia	ORA%sT	2005 Mar 15 # Oral Time
+			5:00	-	ORAT
+
+# Kyrgyzstan (Kirgizstan)
+# Transitions through 1991 are from Shanks.
+
+# From Paul Eggert (2005-08-15):
+# According to an article dated today in the Kyrgyzstan Development Gateway
+# <http://eng.gateway.kg/cgi-bin/page.pl?id=1&story_name=doc9979.shtml>
+# Kyrgyzstan is canceling the daylight saving time system.  I take the article
+# to mean that they will leave their clocks at 6 hours ahead of UTC.
+# From Malik Abdugaliev (2005-09-21):
+# Our government cancels daylight saving time 6th of August 2005.
+# From 2005-08-12 our GMT-offset is +6, w/o any daylight saving.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Kyrgyz	1992	1996	-	Apr	Sun>=7	0:00s	1:00	S
+Rule	Kyrgyz	1992	1996	-	Sep	lastSun	0:00	0	-
+Rule	Kyrgyz	1997	2005	-	Mar	lastSun	2:30	1:00	S
+Rule	Kyrgyz	1997	2004	-	Oct	lastSun	2:30	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Bishkek	4:58:24 -	LMT	1924 May  2
+			5:00	-	FRUT	1930 Jun 21 # Frunze Time
+			6:00 RussiaAsia FRU%sT	1991 Mar 31 2:00s
+			5:00	1:00	FRUST	1991 Aug 31 2:00 # independence
+			5:00	Kyrgyz	KG%sT	2005 Aug 12    # Kyrgyzstan Time
+			6:00	-	KGT
+
+###############################################################################
+
+# Korea (North and South)
+
+# From Guy Harris:
+# According to someone at the Korean Times in San Francisco,
+# Daylight Savings Time was not observed until 1987.  He did not know
+# at what time of day DST starts or ends.
+
+# From Shanks:
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	ROK	1960	only	-	May	15	0:00	1:00	D
+Rule	ROK	1960	only	-	Sep	13	0:00	0	S
+Rule	ROK	1987	1988	-	May	Sun<=14	0:00	1:00	D
+Rule	ROK	1987	1988	-	Oct	Sun<=14	0:00	0	S
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Seoul	8:27:52	-	LMT	1890
+			8:30	-	KST	1904 Dec
+			9:00	-	KST	1928
+			8:30	-	KST	1932
+			9:00	-	KST	1954 Mar 21
+			8:00	ROK	K%sT	1961 Aug 10
+			8:30	-	KST	1968 Oct
+			9:00	ROK	K%sT
+Zone	Asia/Pyongyang	8:23:00 -	LMT	1890
+			8:30	-	KST	1904 Dec
+			9:00	-	KST	1928
+			8:30	-	KST	1932
+			9:00	-	KST	1954 Mar 21
+			8:00	-	KST	1961 Aug 10
+			9:00	-	KST
+
+###############################################################################
+
+# Kuwait
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Kuwait	3:11:56 -	LMT	1950
+			3:00	-	AST
+
+# Laos
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Vientiane	6:50:24 -	LMT	1906 Jun  9 # or Viangchan
+			7:06:20	-	SMT	1911 Mar 11 0:01 # Saigon MT?
+			7:00	-	ICT	1912 May
+			8:00	-	ICT	1931 May
+			7:00	-	ICT
+
+# Lebanon
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Lebanon	1920	only	-	Mar	28	0:00	1:00	S
+Rule	Lebanon	1920	only	-	Oct	25	0:00	0	-
+Rule	Lebanon	1921	only	-	Apr	3	0:00	1:00	S
+Rule	Lebanon	1921	only	-	Oct	3	0:00	0	-
+Rule	Lebanon	1922	only	-	Mar	26	0:00	1:00	S
+Rule	Lebanon	1922	only	-	Oct	8	0:00	0	-
+Rule	Lebanon	1923	only	-	Apr	22	0:00	1:00	S
+Rule	Lebanon	1923	only	-	Sep	16	0:00	0	-
+Rule	Lebanon	1957	1961	-	May	1	0:00	1:00	S
+Rule	Lebanon	1957	1961	-	Oct	1	0:00	0	-
+Rule	Lebanon	1972	only	-	Jun	22	0:00	1:00	S
+Rule	Lebanon	1972	1977	-	Oct	1	0:00	0	-
+Rule	Lebanon	1973	1977	-	May	1	0:00	1:00	S
+Rule	Lebanon	1978	only	-	Apr	30	0:00	1:00	S
+Rule	Lebanon	1978	only	-	Sep	30	0:00	0	-
+Rule	Lebanon	1984	1987	-	May	1	0:00	1:00	S
+Rule	Lebanon	1984	1991	-	Oct	16	0:00	0	-
+Rule	Lebanon	1988	only	-	Jun	1	0:00	1:00	S
+Rule	Lebanon	1989	only	-	May	10	0:00	1:00	S
+Rule	Lebanon	1990	1992	-	May	1	0:00	1:00	S
+Rule	Lebanon	1992	only	-	Oct	4	0:00	0	-
+Rule	Lebanon	1993	max	-	Mar	lastSun	0:00	1:00	S
+Rule	Lebanon	1993	1998	-	Sep	lastSun	0:00	0	-
+Rule	Lebanon	1999	max	-	Oct	lastSun	0:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Beirut	2:22:00 -	LMT	1880
+			2:00	Lebanon	EE%sT
+
+# Malaysia
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	NBorneo	1935	1941	-	Sep	14	0:00	0:20	TS # one-Third Summer
+Rule	NBorneo	1935	1941	-	Dec	14	0:00	0	-
+#
+# peninsular Malaysia
+# The data here are taken from Mok Ly Yng (2003-10-30)
+# <http://www.math.nus.edu.sg/aslaksen/teaching/timezone.html>.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Asia/Kuala_Lumpur	6:46:46 -	LMT	1901 Jan  1
+			6:55:25	-	SMT	1905 Jun  1 # Singapore M.T.
+			7:00	-	MALT	1933 Jan  1 # Malaya Time
+			7:00	0:20	MALST	1936 Jan  1
+			7:20	-	MALT	1941 Sep  1
+			7:30	-	MALT	1942 Feb 16
+			9:00	-	JST	1945 Sep 12
+			7:30	-	MALT	1982 Jan  1
+			8:00	-	MYT	# Malaysia Time
+# Sabah & Sarawak
+# From Paul Eggert (2003-11-01):
+# The data here are mostly from Shanks, but the 1942, 1945 and 1982
+# transition dates are from Mok Ly Yng.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Asia/Kuching	7:21:20	-	LMT	1926 Mar
+			7:30	-	BORT	1933	# Borneo Time
+			8:00	NBorneo	BOR%sT	1942 Feb 16
+			9:00	-	JST	1945 Sep 12
+			8:00	-	BORT	1982 Jan  1
+			8:00	-	MYT
+
+# Maldives
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Indian/Maldives	4:54:00 -	LMT	1880	# Male
+			4:54:00	-	MMT	1960	# Male Mean Time
+			5:00	-	MVT		# Maldives Time
+
+# Mongolia
+
+# Shanks says that Mongolia has three time zones, but usno1995 and the CIA map
+# Standard Time Zones of the World (1997-01)
+# both say that it has just one.
+
+# From Oscar van Vlijmen (1999-12-11):
+# <a href="http://www.mongoliatourism.gov.mn/general.htm">
+# General Information Mongolia
+# </a> (1999-09)
+# "Time: Mongolia has two time zones. Three westernmost provinces of
+# Bayan-Ulgii, Uvs, and Hovd are one hour earlier than the capital city, and
+# the rest of the country follows the Ulaanbaatar time, which is UTC/GMT plus
+# eight hours."
+
+# From Rives McDow (1999-12-13):
+# Mongolia discontinued the use of daylight savings time in 1999; 1998
+# being the last year it was implemented.  The dates of implementation I am
+# unsure of, but most probably it was similar to Russia, except for the time
+# of implementation may have been different....
+# Some maps in the past have indicated that there was an additional time
+# zone in the eastern part of Mongolia, including the provinces of Dornod,
+# Suhbaatar, and possibly Khentij.
+
+# From Paul Eggert (1999-12-15):
+# Naming and spelling is tricky in Mongolia.
+# We'll use Hovd (also spelled Chovd and Khovd) to represent the west zone;
+# the capital of the Hovd province is sometimes called Hovd, sometimes Dund-Us,
+# and sometimes Jirgalanta (with variant spellings), but the name Hovd
+# is good enough for our purposes.
+
+# From Rives McDow (2001-05-13):
+# In addition to Mongolia starting daylight savings as reported earlier
+# (adopted DST on 2001-04-27 02:00 local time, ending 2001-09-28),
+# there are three time zones.
+#
+# Provinces [at 7:00]: Bayan-ulgii, Uvs, Khovd, Zavkhan, Govi-Altai
+# Provinces [at 8:00]: Khovsgol, Bulgan, Arkhangai, Khentii, Tov,
+#	Bayankhongor, Ovorkhangai, Dundgovi, Dornogovi, Omnogovi
+# Provinces [at 9:00]: Dornod, Sukhbaatar
+#
+# [The province of Selenge is omitted from the above lists.]
+
+# From Ganbold Ts., Ulaanbaatar (2004-04-17):
+# Daylight saving occurs at 02:00 local time last Saturday of March.
+# It will change back to normal at 02:00 local time last Saturday of
+# September.... As I remember this rule was changed in 2001.
+#
+# From Paul Eggert (2004-04-17):
+# For now, assume Rives McDow's informant got confused about Friday vs
+# Saturday, and that his 2001 dates should have 1 added to them.
+
+# From Paul Eggert (2005-07-26):
+# We have wildly conflicting information about Mongolia's time zones.
+# Bill Bonnet (2005-05-19) reports that the US Embassy in Ulaanbaatar says
+# there is only one time zone and that DST is observed, citing Microsoft
+# Windows XP as the source.  Risto Nykanen (2005-05-16) reports that
+# travelmongolia.org says there are two time zones (UTC+7, UTC+8) with no DST.
+# Oscar van Vlijmen (2005-05-20) reports that the Mongolian Embassy in
+# Washington, DC says there are two time zones, with DST observed.
+# He also found
+# <http://ubpost.mongolnews.mn/index.php?subaction=showcomments&id=1111634894&archive=&start_from=&ucat=1&>
+# which also says that there is DST, and which has a comment by "Toddius"
+# (2005-03-31 06:05 +0700) saying "Mongolia actually has 3.5 time zones.
+# The West (OLGII) is +7 GMT, most of the country is ULAT is +8 GMT
+# and some Eastern provinces are +9 GMT but Sukhbaatar Aimag is SUHK +8.5 GMT.
+# The SUKH timezone is new this year, it is one of the few things the
+# parliament passed during the tumultuous winter session."
+# For now, let's ignore this information, until we have more confirmation.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Mongol	1983	1984	-	Apr	1	0:00	1:00	S
+Rule	Mongol	1983	only	-	Oct	1	0:00	0	-
+# IATA SSIM says 1990s switches occurred at 00:00, but Shanks (1995) lists
+# them at 02:00s, and McDow says the 2001 switches also occurred at 02:00.
+# Also, IATA SSIM (1996-09) says 1996-10-25.  Go with Shanks through 1998.
+Rule	Mongol	1985	1998	-	Mar	lastSun	2:00s	1:00	S
+Rule	Mongol	1984	1998	-	Sep	lastSun	2:00s	0	-
+# IATA SSIM (1999-09) says Mongolia no longer observes DST.
+Rule	Mongol	2001	only	-	Apr	lastSat	2:00	1:00	S
+Rule	Mongol	2001	max	-	Sep	lastSat	2:00	0	-
+Rule	Mongol	2002	max	-	Mar	lastSat	2:00	1:00	S
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+# Hovd, a.k.a. Chovd, Dund-Us, Dzhargalant, Khovd, Jirgalanta
+Zone	Asia/Hovd	6:06:36 -	LMT	1905 Aug
+			6:00	-	HOVT	1978	# Hovd Time
+			7:00	Mongol	HOV%sT
+# Ulaanbaatar, a.k.a. Ulan Bataar, Ulan Bator, Urga
+Zone	Asia/Ulaanbaatar 7:07:32 -	LMT	1905 Aug
+			7:00	-	ULAT	1978	# Ulaanbaatar Time
+			8:00	Mongol	ULA%sT
+# Choibalsan, a.k.a. Bajan Tuemen, Bajan Tumen, Chojbalsan,
+# Choybalsan, Sanbejse, Tchoibalsan
+Zone	Asia/Choibalsan	7:38:00 -	LMT	1905 Aug
+			7:00	-	ULAT	1978
+			8:00	-	ULAT	1983 Apr
+			9:00	Mongol	CHO%sT	# Choibalsan Time
+
+# Nepal
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Katmandu	5:41:16 -	LMT	1920
+			5:30	-	IST	1986
+			5:45	-	NPT	# Nepal Time
+
+# Oman
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Muscat	3:54:20 -	LMT	1920
+			4:00	-	GST
+
+# Pakistan
+
+# From Rives McDow (2002-03-13):
+# I have been advised that Pakistan has decided to adopt dst on a
+# TRIAL basis for one year, starting 00:01 local time on April 7, 2002
+# and ending at 00:01 local time October 6, 2002.  This is what I was
+# told, but I believe that the actual time of change may be 00:00; the
+# 00:01 was to make it clear which day it was on.
+
+# From Paul Eggert (2002-03-15):
+# Jesper Norgaard found this URL:
+# http://www.pak.gov.pk/public/news/app/app06_dec.htm
+# (dated 2001-12-06) which says that the Cabinet adopted a scheme "to
+# advance the clocks by one hour on the night between the first
+# Saturday and Sunday of April and revert to the original position on
+# 15th October each year".  This agrees with McDow's 04-07 at 00:00,
+# but disagrees about the October transition, and makes it sound like
+# it's not on a trial basis.  Also, the "between the first Saturday
+# and Sunday of April" phrase, if taken literally, means that the
+# transition takes place at 00:00 on the first Sunday on or after 04-02.
+
+# From Paul Eggert (2003-02-09):
+# DAWN <http://www.dawn.com/2002/10/06/top13.htm> reported on 2002-10-05
+# that 2002 DST ended that day at midnight.  Go with McDow for now.
+
+# From Steffen Thorsen (2003-03-14):
+# According to http://www.dawn.com/2003/03/07/top15.htm
+# there will be no DST in Pakistan this year:
+#
+# ISLAMABAD, March 6: Information and Media Development Minister Sheikh
+# Rashid Ahmed on Thursday said the cabinet had reversed a previous
+# decision to advance clocks by one hour in summer and put them back by
+# one hour in winter with the aim of saving light hours and energy.
+#
+# The minister told a news conference that the experiment had rather
+# shown 8 per cent higher consumption of electricity.
+
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule Pakistan	2002	only	-	Apr	Sun>=2	0:01	1:00	S
+Rule Pakistan	2002	only	-	Oct	Sun>=2	0:01	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Karachi	4:28:12 -	LMT	1907
+			5:30	-	IST	1942 Sep
+			5:30	1:00	IST	1945 Oct 15
+			5:30	-	IST	1951 Sep 30
+			5:00	-	KART	1971 Mar 26 # Karachi Time
+			5:00 Pakistan	PK%sT	# Pakistan Time
+
+# Palestine
+
+# From Amos Shapir (1998-02-15):
+#
+# From 1917 until 1948-05-15, all of Palestine, including the parts now
+# known as the Gaza Strip and the West Bank, was under British rule.
+# Therefore the rules given for Israel for that period, apply there too...
+#
+# The Gaza Strip was under Egyptian rule between 1948-05-15 until 1967-06-05
+# (except a short occupation by Israel from 1956-11 till 1957-03, but no
+# time zone was affected then).  It was never formally annexed to Egypt,
+# though.
+#
+# The rest of Palestine was under Jordanian rule at that time, formally
+# annexed in 1950 as the West Bank (and the word "Trans" was dropped from
+# the country's previous name of "the Hashemite Kingdom of the
+# Trans-Jordan").  So the rules for Jordan for that time apply.  Major
+# towns in that area are Nablus (Shchem), El-Halil (Hebron), Ramallah, and
+# East Jerusalem.
+#
+# Both areas were occupied by Israel in June 1967, but not annexed (except
+# for East Jerusalem).  They were on Israel time since then; there might
+# have been a Military Governor's order about time zones, but I'm not aware
+# of any (such orders may have been issued semi-annually whenever summer
+# time was in effect, but maybe the legal aspect of time was just neglected).
+#
+# The Palestinian Authority was established in 1993, and got hold of most
+# towns in the West Bank and Gaza by 1995.  I know that in order to
+# demonstrate...independence, they have been switching to
+# summer time and back on a different schedule than Israel's, but I don't
+# know when this was started, or what algorithm is used (most likely the
+# Jordanian one).
+#
+# To summarize, the table should probably look something like that:
+#
+# Area \ when | 1918-1947 | 1948-1967 | 1967-1995 | 1996-
+# ------------+-----------+-----------+-----------+-----------
+# Israel      | Zion      | Zion      | Zion      | Zion
+# West bank   | Zion      | Jordan    | Zion      | Jordan
+# Gaza        | Zion      | Egypt     | Zion      | Jordan
+#
+# I guess more info may be available from the PA's web page (if/when they
+# have one).
+
+# From Paul Eggert (1998-02-25):
+# Shanks writes that Gaza did not observe DST until 1957, but we'll go
+# with Shapir and assume that it observed DST from 1940 through 1947,
+# and that it used Jordanian rules starting in 1996.
+# We don't yet need a separate entry for the West Bank, since
+# the only differences between it and Gaza that we know about
+# occurred before our cutoff date of 1970.
+# However, as we get more information, we may need to add entries
+# for parts of the West Bank as they transitioned from Israel's rules
+# to Palestine's rules.  If you have more info about this, please
+# send it to tz@elsie.nci.nih.gov for incorporation into future editions.
+
+# From IINS News Service - Israel - 1998-03-23 10:38:07 Israel time,
+# forwarded by Ephraim Silverberg:
+#
+# Despite the fact that Israel changed over to daylight savings time
+# last week, the PLO Authority (PA) has decided not to turn its clocks
+# one-hour forward at this time.  As a sign of independence from Israeli rule,
+# the PA has decided to implement DST in April.
+
+# From Paul Eggert (1999-09-20):
+# Daoud Kuttab writes in
+# <a href="http://www.jpost.com/com/Archive/22.Apr.1999/Opinion/Article-2.html">
+# Holiday havoc
+# </a> (Jerusalem Post, 1999-04-22) that
+# the Palestinian National Authority changed to DST on 1999-04-15.
+# I vaguely recall that they switch back in October (sorry, forgot the source).
+# For now, let's assume that the spring switch was at 24:00,
+# and that they switch at 0:00 on the 3rd Fridays of April and October.
+
+# The rules for Egypt are stolen from the `africa' file.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule EgyptAsia	1957	only	-	May	10	0:00	1:00	S
+Rule EgyptAsia	1957	1958	-	Oct	 1	0:00	0	-
+Rule EgyptAsia	1958	only	-	May	 1	0:00	1:00	S
+Rule EgyptAsia	1959	1967	-	May	 1	1:00	1:00	S
+Rule EgyptAsia	1959	1965	-	Sep	30	3:00	0	-
+Rule EgyptAsia	1966	only	-	Oct	 1	3:00	0	-
+
+Rule Palestine	1999	max	-	Apr	Fri>=15	0:00	1:00	S
+Rule Palestine	1999	max	-	Oct	Fri>=15	0:00	0	-
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Gaza	2:17:52	-	LMT	1900 Oct
+			2:00	Zion	EET	1948 May 15
+			2:00 EgyptAsia	EE%sT	1967 Jun  5
+			2:00	Zion	I%sT	1996
+			2:00	Jordan	EE%sT	1999
+			2:00 Palestine	EE%sT
+
+# Paracel Is
+# no information
+
+# Philippines
+# On 1844-08-16, Narciso Claveria, governor-general of the
+# Philippines, issued a proclamation announcing that 1844-12-30 was to
+# be immediately followed by 1845-01-01.  Robert H. van Gent has a
+# transcript of the decree in <http://www.phys.uu.nl/~vgent/idl/idl.htm>.
+# The rest of this data is from Shanks.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Phil	1936	only	-	Nov	1	0:00	1:00	S
+Rule	Phil	1937	only	-	Feb	1	0:00	0	-
+Rule	Phil	1954	only	-	Apr	12	0:00	1:00	S
+Rule	Phil	1954	only	-	Jul	1	0:00	0	-
+Rule	Phil	1978	only	-	Mar	22	0:00	1:00	S
+Rule	Phil	1978	only	-	Sep	21	0:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Manila	-15:56:00 -	LMT	1844 Dec 31
+			8:04:00 -	LMT	1899 May 11
+			8:00	Phil	PH%sT	1942 May
+			9:00	-	JST	1944 Nov
+			8:00	Phil	PH%sT
+
+# Qatar
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Qatar	3:26:08 -	LMT	1920	# Al Dawhah / Doha
+			4:00	-	GST	1972 Jun
+			3:00	-	AST
+
+# Saudi Arabia
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Riyadh	3:06:52 -	LMT	1950
+			3:00	-	AST
+
+# Singapore
+# The data here are taken from Mok Ly Yng (2003-10-30)
+# <http://www.math.nus.edu.sg/aslaksen/teaching/timezone.html>.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Singapore	6:55:25 -	LMT	1901 Jan  1
+			6:55:25	-	SMT	1905 Jun  1 # Singapore M.T.
+			7:00	-	MALT	1933 Jan  1 # Malaya Time
+			7:00	0:20	MALST	1936 Jan  1
+			7:20	-	MALT	1941 Sep  1
+			7:30	-	MALT	1942 Feb 16
+			9:00	-	JST	1945 Sep 12
+			7:30	-	MALT	1965 Aug  9 # independence
+			7:30	-	SGT	1982 Jan  1 # Singapore Time
+			8:00	-	SGT
+
+# Spratly Is
+# no information
+
+# Sri Lanka
+# From Paul Eggert (1996-09-03):
+# "Sri Lanka advances clock by an hour to avoid blackout"
+# (www.virtual-pc.com/lankaweb/news/items/240596-2.html, 1996-05-24,
+# no longer available as of 1999-08-17)
+# reported ``the country's standard time will be put forward by one hour at
+# midnight Friday (1830 GMT) `in the light of the present power crisis'.''
+#
+# From Dharmasiri Senanayake, Sri Lanka Media Minister (1996-10-24), as quoted
+# by Shamindra in
+# <a href="news:54rka5$m5h@mtinsc01-mgt.ops.worldnet.att.net">
+# Daily News - Hot News Section (1996-10-26)
+# </a>:
+# With effect from 12.30 a.m. on 26th October 1996
+# Sri Lanka will be six (06) hours ahead of GMT.
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Colombo	5:19:24 -	LMT	1880
+			5:19:32	-	MMT	1906	# Moratuwa Mean Time
+			5:30	-	IST	1942 Jan  5
+			5:30	0:30	IHST	1942 Sep
+			5:30	1:00	IST	1945 Oct 16 2:00
+			5:30	-	IST	1996 May 25 0:00
+			6:30	-	LKT	1996 Oct 26 0:30
+			6:00	-	LKT
+
+# Syria
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Syria	1920	1923	-	Apr	Sun>=15	2:00	1:00	S
+Rule	Syria	1920	1923	-	Oct	Sun>=1	2:00	0	-
+Rule	Syria	1962	only	-	Apr	29	2:00	1:00	S
+Rule	Syria	1962	only	-	Oct	1	2:00	0	-
+Rule	Syria	1963	1965	-	May	1	2:00	1:00	S
+Rule	Syria	1963	only	-	Sep	30	2:00	0	-
+Rule	Syria	1964	only	-	Oct	1	2:00	0	-
+Rule	Syria	1965	only	-	Sep	30	2:00	0	-
+Rule	Syria	1966	only	-	Apr	24	2:00	1:00	S
+Rule	Syria	1966	1976	-	Oct	1	2:00	0	-
+Rule	Syria	1967	1978	-	May	1	2:00	1:00	S
+Rule	Syria	1977	1978	-	Sep	1	2:00	0	-
+Rule	Syria	1983	1984	-	Apr	9	2:00	1:00	S
+Rule	Syria	1983	1984	-	Oct	1	2:00	0	-
+Rule	Syria	1986	only	-	Feb	16	2:00	1:00	S
+Rule	Syria	1986	only	-	Oct	9	2:00	0	-
+Rule	Syria	1987	only	-	Mar	1	2:00	1:00	S
+Rule	Syria	1987	1988	-	Oct	31	2:00	0	-
+Rule	Syria	1988	only	-	Mar	15	2:00	1:00	S
+Rule	Syria	1989	only	-	Mar	31	2:00	1:00	S
+Rule	Syria	1989	only	-	Oct	1	2:00	0	-
+Rule	Syria	1990	only	-	Apr	1	2:00	1:00	S
+Rule	Syria	1990	only	-	Sep	30	2:00	0	-
+Rule	Syria	1991	only	-	Apr	 1	0:00	1:00	S
+Rule	Syria	1991	1992	-	Oct	 1	0:00	0	-
+Rule	Syria	1992	only	-	Apr	 8	0:00	1:00	S
+Rule	Syria	1993	only	-	Mar	26	0:00	1:00	S
+Rule	Syria	1993	only	-	Sep	25	0:00	0	-
+# IATA SSIM (1998-02) says 1998-04-02;
+# (1998-09) says 1999-03-29 and 1999-09-29; (1999-02) says 1999-04-02,
+# 2000-04-02, and 2001-04-02; (1999-09) says 2000-03-31 and 2001-03-31;
+# ignore all these claims and go with Shanks.
+Rule	Syria	1994	1996	-	Apr	 1	0:00	1:00	S
+Rule	Syria	1994	max	-	Oct	 1	0:00	0	-
+Rule	Syria	1997	1998	-	Mar	lastMon	0:00	1:00	S
+Rule	Syria	1999	max	-	Apr	 1	0:00	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Damascus	2:25:12 -	LMT	1920	# Dimashq
+			2:00	Syria	EE%sT
+
+# Tajikistan
+# From Shanks.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Dushanbe	4:35:12 -	LMT	1924 May  2
+			5:00	-	DUST	1930 Jun 21 # Dushanbe Time
+			6:00 RussiaAsia DUS%sT	1991 Mar 31 2:00s
+			5:00	1:00	DUSST	1991 Sep  9 2:00s
+			5:00	-	TJT		    # Tajikistan Time
+
+# Thailand
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Bangkok	6:42:04	-	LMT	1880
+			6:42:04	-	BMT	1920 Apr # Bangkok Mean Time
+			7:00	-	ICT
+
+# Turkmenistan
+# From Shanks.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Ashgabat	3:53:32 -	LMT	1924 May  2 # or Ashkhabad
+			4:00	-	ASHT	1930 Jun 21 # Ashkhabad Time
+			5:00 RussiaAsia	ASH%sT	1991 Mar 31 2:00
+			4:00 RussiaAsia	ASH%sT	1991 Oct 27 # independence
+			4:00 RussiaAsia TM%sT	1992 Jan 19 2:00
+			5:00	-	TMT
+
+# United Arab Emirates
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Dubai	3:41:12 -	LMT	1920
+			4:00	-	GST
+
+# Uzbekistan
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Samarkand	4:27:12 -	LMT	1924 May  2
+			4:00	-	SAMT	1930 Jun 21 # Samarkand Time
+			5:00	-	SAMT	1981 Apr  1
+			5:00	1:00	SAMST	1981 Oct  1
+			6:00 RussiaAsia TAS%sT	1991 Mar 31 2:00 # Tashkent Time
+			5:00 RussiaAsia	TAS%sT	1991 Sep  1 # independence
+			5:00 RussiaAsia	UZ%sT	1992
+			5:00 RussiaAsia	UZ%sT	1993
+			5:00	-	UZT
+Zone	Asia/Tashkent	4:37:12 -	LMT	1924 May  2
+			5:00	-	TAST	1930 Jun 21 # Tashkent Time
+			6:00 RussiaAsia TAS%sT	1991 Mar 31 2:00s
+			5:00 RussiaAsia	TAS%sT	1991 Sep  1 # independence
+			5:00 RussiaAsia	UZ%sT	1992
+			5:00 RussiaAsia	UZ%sT	1993
+			5:00	-	UZT
+
+# Vietnam
+# From Paul Eggert (1993-11-18):
+# Saigon's official name is Thanh-Pho Ho Chi Minh, but it's too long.
+# We'll stick with the traditional name for now.
+# From Shanks:
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Saigon	7:06:40 -	LMT	1906 Jun  9
+			7:06:20	-	SMT	1911 Mar 11 0:01 # Saigon MT?
+			7:00	-	ICT	1912 May
+			8:00	-	ICT	1931 May
+			7:00	-	ICT
+
+# Yemen
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Aden	3:00:48	-	LMT	1950
+			3:00	-	AST
diff --git a/JodaTime/src/java/org/joda/time/tz/src/australasia b/JodaTime/src/java/org/joda/time/tz/src/australasia
index 57bd60adb..55b55def4 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/australasia
+++ b/JodaTime/src/java/org/joda/time/tz/src/australasia
@@ -1,1394 +1,1404 @@
-# @(#)australasia	7.73
-# This file also includes Pacific islands.
-
-# Notes are at the end of this file
-
-###############################################################################
-
-# Australia
-
-# Please see the notes below for the controversy about "EST" versus "AEST" etc.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Aus	1917	only	-	Jan	 1	0:01	1:00	-
-Rule	Aus	1917	only	-	Mar	25	2:00	0	-
-Rule	Aus	1942	only	-	Jan	 1	2:00	1:00	-
-Rule	Aus	1942	only	-	Mar	29	2:00	0	-
-Rule	Aus	1942	only	-	Sep	27	2:00	1:00	-
-Rule	Aus	1943	1944	-	Mar	lastSun	2:00	0	-
-Rule	Aus	1943	only	-	Oct	 3	2:00	1:00	-
-# Go with Whitman and the Australian National Standards Commission, which
-# says W Australia didn't use DST in 1943/1944.  Ignore Whitman's claim that
-# 1944/1945 was just like 1943/1944.
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-# Northern Territory
-Zone Australia/Darwin	 8:43:20 -	LMT	1895 Feb
-			 9:00	-	CST	1899 May
-			 9:30	Aus	CST
-# Western Australia
-Zone Australia/Perth	 7:43:24 -	LMT	1895 Dec
-			 8:00	Aus	WST	1943 Jul
-			 8:00	-	WST	1974 Oct lastSun 2:00s
-			 8:00	1:00	WST	1975 Mar Sun>=1 2:00s
-			 8:00	-	WST	1983 Oct lastSun 2:00s
-			 8:00	1:00	WST	1984 Mar Sun>=1 2:00s
-			 8:00	-	WST	1991 Nov 17 2:00s
-			 8:00	1:00	WST	1992 Mar Sun>=1 2:00s
-			 8:00	-	WST
-# Queensland
-#
-# From Alex Livingston (1996-11-01):
-# I have heard or read more than once that some resort islands off the coast
-# of Queensland chose to keep observing daylight-saving time even after
-# Queensland ceased to.
-#
-# From Paul Eggert (1996-11-22):
-# IATA SSIM (1993-02/1994-09) say that the Holiday Islands (Hayman, Lindeman,
-# Hamilton) observed DST for two years after the rest of Queensland stopped.
-# Hamilton is the largest, but there is also a Hamilton in Victoria,
-# so use Lindeman.
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	AQ	1971	only	-	Oct	lastSun	2:00s	1:00	-
-Rule	AQ	1972	only	-	Feb	lastSun	2:00s	0	-
-Rule	AQ	1989	1991	-	Oct	lastSun	2:00s	1:00	-
-Rule	AQ	1990	1992	-	Mar	Sun>=1	2:00s	0	-
-Rule	Holiday	1992	1993	-	Oct	lastSun	2:00s	1:00	-
-Rule	Holiday	1993	1994	-	Mar	Sun>=1	2:00s	0	-
-Zone Australia/Brisbane	10:12:08 -	LMT	1895
-			10:00	Aus	EST	1971
-			10:00	AQ	EST
-Zone Australia/Lindeman  9:55:56 -	LMT	1895
-			10:00	Aus	EST	1971
-			10:00	AQ	EST	1992 Jul
-			10:00	Holiday	EST
-
-# South Australia
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	AS	1971	1985	-	Oct	lastSun	2:00s	1:00	-
-Rule	AS	1986	only	-	Oct	19	2:00s	1:00	-
-Rule	AS	1987	max	-	Oct	lastSun	2:00s	1:00	-
-Rule	AS	1972	only	-	Feb	27	2:00s	0	-
-Rule	AS	1973	1985	-	Mar	Sun>=1	2:00s	0	-
-Rule	AS	1986	1989	-	Mar	Sun>=15	2:00s	0	-
-Rule	AS	1990	only	-	Mar	Sun>=18	2:00s	0	-
-Rule	AS	1991	only	-	Mar	Sun>=1	2:00s	0	-
-Rule	AS	1992	only	-	Mar	Sun>=18	2:00s	0	-
-Rule	AS	1993	only	-	Mar	Sun>=1	2:00s	0	-
-Rule	AS	1994	only	-	Mar	Sun>=18	2:00s	0	-
-Rule	AS	1995	2005	-	Mar	lastSun	2:00s	0	-
-Rule	AS	2006	only	-	Apr	Sun>=1	2:00s	0	-
-Rule	AS	2007	max	-	Mar	lastSun	2:00s	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Australia/Adelaide	9:14:20 -	LMT	1895 Feb
-			9:00	-	CST	1899 May
-			9:30	Aus	CST	1971
-			9:30	AS	CST
-
-# Tasmania
-#
-# From Paul Eggert (2005-08-16):
-# <http://www.bom.gov.au/climate/averages/tables/dst_times.shtml>
-# says King Island didn't observe DST from WWII until late 1971.
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	AT	1967	only	-	Oct	Sun>=1	2:00s	1:00	-
-Rule	AT	1968	only	-	Mar	lastSun	2:00s	0	-
-Rule	AT	1968	1985	-	Oct	lastSun	2:00s	1:00	-
-Rule	AT	1969	1971	-	Mar	Sun>=8	2:00s	0	-
-Rule	AT	1972	only	-	Feb	lastSun	2:00s	0	-
-Rule	AT	1973	1981	-	Mar	Sun>=1	2:00s	0	-
-Rule	AT	1982	1983	-	Mar	lastSun	2:00s	0	-
-Rule	AT	1984	1986	-	Mar	Sun>=1	2:00s	0	-
-Rule	AT	1986	only	-	Oct	Sun>=15	2:00s	1:00	-
-Rule	AT	1987	1990	-	Mar	Sun>=15	2:00s	0	-
-Rule	AT	1987	only	-	Oct	Sun>=22	2:00s	1:00	-
-Rule	AT	1988	1990	-	Oct	lastSun	2:00s	1:00	-
-Rule	AT	1991	1999	-	Oct	Sun>=1	2:00s	1:00	-
-Rule	AT	1991	2005	-	Mar	lastSun	2:00s	0	-
-Rule	AT	2000	only	-	Aug	lastSun	2:00s	1:00	-
-Rule	AT	2001	max	-	Oct	Sun>=1	2:00s	1:00	-
-Rule	AT	2006	only	-	Apr	Sun>=1	2:00s	0	-
-Rule	AT	2007	max	-	Mar	lastSun	2:00s	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Australia/Hobart	9:49:16	-	LMT	1895 Sep
-			10:00	-	EST	1916 Oct 1 2:00
-			10:00	1:00	EST	1917 Feb
-			10:00	Aus	EST	1967
-			10:00	AT	EST
-Zone Australia/Currie	9:35:28	-	LMT	1895 Sep
-			10:00	-	EST	1916 Oct 1 2:00
-			10:00	1:00	EST	1917 Feb
-			10:00	Aus	EST	1971 Jul
-			10:00	AT	EST
-
-# Victoria
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	AV	1971	1985	-	Oct	lastSun	2:00s	1:00	-
-Rule	AV	1972	only	-	Feb	lastSun	2:00s	0	-
-Rule	AV	1973	1985	-	Mar	Sun>=1	2:00s	0	-
-Rule	AV	1986	1990	-	Mar	Sun>=15	2:00s	0	-
-Rule	AV	1986	1987	-	Oct	Sun>=15	2:00s	1:00	-
-Rule	AV	1988	1999	-	Oct	lastSun	2:00s	1:00	-
-Rule	AV	1991	1994	-	Mar	Sun>=1	2:00s	0	-
-Rule	AV	1995	2005	-	Mar	lastSun	2:00s	0	-
-Rule	AV	2000	only	-	Aug	lastSun	2:00s	1:00	-
-Rule	AV	2001	max	-	Oct	lastSun	2:00s	1:00	-
-Rule	AV	2006	only	-	Apr	Sun>=1	2:00s	0	-
-Rule	AV	2007	max	-	Mar	lastSun	2:00s	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Australia/Melbourne 9:39:52 -	LMT	1895 Feb
-			10:00	Aus	EST	1971
-			10:00	AV	EST
-
-# New South Wales
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	AN	1971	1985	-	Oct	lastSun	2:00s	1:00	-
-Rule	AN	1972	only	-	Feb	27	2:00s	0	-
-Rule	AN	1973	1981	-	Mar	Sun>=1	2:00s	0	-
-Rule	AN	1982	only	-	Apr	Sun>=1	2:00s	0	-
-Rule	AN	1983	1985	-	Mar	Sun>=1	2:00s	0	-
-Rule	AN	1986	1989	-	Mar	Sun>=15	2:00s	0	-
-Rule	AN	1986	only	-	Oct	19	2:00s	1:00	-
-Rule	AN	1987	1999	-	Oct	lastSun	2:00s	1:00	-
-Rule	AN	1990	1995	-	Mar	Sun>=1	2:00s	0	-
-Rule	AN	1996	2005	-	Mar	lastSun	2:00s	0	-
-Rule	AN	2000	only	-	Aug	lastSun	2:00s	1:00	-
-Rule	AN	2001	max	-	Oct	lastSun	2:00s	1:00	-
-Rule	AN	2006	only	-	Apr	Sun>=1	2:00s	0	-
-Rule	AN	2007	max	-	Mar	lastSun	2:00s	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Australia/Sydney	10:04:52 -	LMT	1895 Feb
-			10:00	Aus	EST	1971
-			10:00	AN	EST
-Zone Australia/Broken_Hill 9:25:48 -	LMT	1895 Feb
-			10:00	-	EST	1896 Aug 23
-			9:00	-	CST	1899 May
-			9:30	Aus	CST	1971
-			9:30	AN	CST	2000
-			9:30	AS	CST
-
-# Lord Howe Island
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	LH	1981	1984	-	Oct	lastSun	2:00	1:00	-
-Rule	LH	1982	1985	-	Mar	Sun>=1	2:00	0	-
-Rule	LH	1985	only	-	Oct	lastSun	2:00	0:30	-
-Rule	LH	1986	1989	-	Mar	Sun>=15	2:00	0	-
-Rule	LH	1986	only	-	Oct	19	2:00	0:30	-
-Rule	LH	1987	1999	-	Oct	lastSun	2:00	0:30	-
-Rule	LH	1990	1995	-	Mar	Sun>=1	2:00	0	-
-Rule	LH	1996	2005	-	Mar	lastSun	2:00	0	-
-Rule	LH	2000	only	-	Aug	lastSun	2:00	0:30	-
-Rule	LH	2001	max	-	Oct	lastSun	2:00	0:30	-
-Rule	LH	2006	only	-	Apr	Sun>=1	2:00	0	-
-Rule	LH	2007	max	-	Mar	lastSun	2:00	0	-
-Zone Australia/Lord_Howe 10:36:20 -	LMT	1895 Feb
-			10:00	-	EST	1981 Mar
-			10:30	LH	LHST
-
-# Australian miscellany
-#
-# Ashmore Is, Cartier
-# no indigenous inhabitants; only seasonal caretakers
-# like Australia/Perth, says Turner
-#
-# Coral Sea Is
-# no indigenous inhabitants; only meteorologists
-# no information
-#
-# Macquarie
-# permanent occupation (scientific station) since 1948;
-# sealing and penguin oil station operated 1888/1917
-# like Australia/Hobart, says Turner
-
-# Christmas
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Indian/Christmas	7:02:52 -	LMT	1895 Feb
-			7:00	-	CXT	# Christmas Island Time
-
-# Cook Is
-# From Shanks:
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Cook	1978	only	-	Nov	12	0:00	0:30	HS
-Rule	Cook	1979	1991	-	Mar	Sun>=1	0:00	0	-
-Rule	Cook	1979	1990	-	Oct	lastSun	0:00	0:30	HS
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Pacific/Rarotonga	-10:39:04 -	LMT	1901		# Avarua
-			-10:30	-	CKT	1978 Nov 12	# Cook Is Time
-			-10:00	Cook	CK%sT
-
-# Cocos
-# These islands were ruled by the Ross family from about 1830 to 1978.
-# We don't know when standard time was introduced; for now, we guess 1900.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Indian/Cocos	6:27:40	-	LMT	1900
-			6:30	-	CCT	# Cocos Islands Time
-
-# Fiji
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Fiji	1998	1999	-	Nov	Sun>=1	2:00	1:00	S
-Rule	Fiji	1999	2000	-	Feb	lastSun	3:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Pacific/Fiji	11:53:40 -	LMT	1915 Oct 26	# Suva
-			12:00	Fiji	FJ%sT	# Fiji Time
-
-# French Polynesia
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Pacific/Gambier	 -8:59:48 -	LMT	1912 Oct	# Rikitea
-			 -9:00	-	GAMT	# Gambier Time
-Zone	Pacific/Marquesas -9:18:00 -	LMT	1912 Oct
-			 -9:30	-	MART	# Marquesas Time
-Zone	Pacific/Tahiti	 -9:58:16 -	LMT	1912 Oct	# Papeete
-			-10:00	-	TAHT	# Tahiti Time
-# Clipperton (near North America) is administered from French Polynesia;
-# it is uninhabited.
-
-# Guam
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Pacific/Guam	-14:21:00 -	LMT	1844 Dec 31
-			 9:39:00 -	LMT	1901		# Agana
-			10:00	-	GST	2000 Dec 23	# Guam
-			10:00	-	ChST	# Chamorro Standard Time
-
-# Kiribati
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Pacific/Tarawa	 11:32:04 -	LMT	1901		# Bairiki
-			 12:00	-	GILT		 # Gilbert Is Time
-Zone Pacific/Enderbury	-11:24:20 -	LMT	1901
-			-12:00	-	PHOT	1979 Oct # Phoenix Is Time
-			-11:00	-	PHOT	1995
-			 13:00	-	PHOT
-Zone Pacific/Kiritimati	-10:29:20 -	LMT	1901
-			-10:40	-	LINT	1979 Oct # Line Is Time
-			-10:00	-	LINT	1995
-			 14:00	-	LINT
-
-# N Mariana Is
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Pacific/Saipan	-14:17:00 -	LMT	1844 Dec 31
-			 9:43:00 -	LMT	1901
-			 9:00	-	MPT	1969 Oct # N Mariana Is Time
-			10:00	-	MPT	2000 Dec 23
-			10:00	-	ChST	# Chamorro Standard Time
-
-# Marshall Is
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Pacific/Majuro	11:24:48 -	LMT	1901
-			11:00	-	MHT	1969 Oct # Marshall Islands Time
-			12:00	-	MHT
-Zone Pacific/Kwajalein	11:09:20 -	LMT	1901
-			11:00	-	MHT	1969 Oct
-			-12:00	-	KWAT	1993 Aug 20	# Kwajalein Time
-			12:00	-	MHT
-
-# Micronesia
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Pacific/Truk	10:07:08 -	LMT	1901
-			10:00	-	TRUT			# Truk Time
-Zone Pacific/Ponape	10:32:52 -	LMT	1901		# Kolonia
-			11:00	-	PONT			# Ponape Time
-Zone Pacific/Kosrae	10:51:56 -	LMT	1901
-			11:00	-	KOST	1969 Oct	# Kosrae Time
-			12:00	-	KOST	1999
-			11:00	-	KOST
-
-# Nauru
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Pacific/Nauru	11:07:40 -	LMT	1921 Jan 15	# Uaobe
-			11:30	-	NRT	1942 Mar 15	# Nauru Time
-			9:00	-	JST	1944 Aug 15
-			11:30	-	NRT	1979 May
-			12:00	-	NRT
-
-# New Caledonia
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	NC	1977	1978	-	Dec	Sun>=1	0:00	1:00	S
-Rule	NC	1978	1979	-	Feb	27	0:00	0	-
-Rule	NC	1996	only	-	Dec	 1	2:00s	1:00	S
-# Shanks says the following was at 2:00; go with IATA.
-Rule	NC	1997	only	-	Mar	 2	2:00s	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Pacific/Noumea	11:05:48 -	LMT	1912 Jan 13
-			11:00	NC	NC%sT
-
-
-###############################################################################
-
-# New Zealand
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	NZ	1927	only	-	Nov	 6	2:00	1:00	S
-Rule	NZ	1928	only	-	Mar	 4	2:00	0	M
-Rule	NZ	1928	1933	-	Oct	Sun>=8	2:00	0:30	S
-Rule	NZ	1929	1933	-	Mar	Sun>=15	2:00	0	M
-Rule	NZ	1934	1940	-	Apr	lastSun	2:00	0	M
-Rule	NZ	1934	1940	-	Sep	lastSun	2:00	0:30	S
-Rule	NZ	1946	only	-	Jan	 1	0:00	0	S
-# Since 1957 Chatham has been 45 minutes ahead of NZ, but there's no
-# convenient notation for this so we must duplicate the Rule lines.
-Rule	NZ	1974	only	-	Nov	Sun>=1	2:00s	1:00	D
-Rule	Chatham	1974	only	-	Nov	Sun>=1	2:45s	1:00	D
-Rule	NZ	1975	only	-	Feb	lastSun	2:00s	0	S
-Rule	Chatham	1975	only	-	Feb	lastSun	2:45s	0	S
-Rule	NZ	1975	1988	-	Oct	lastSun	2:00s	1:00	D
-Rule	Chatham	1975	1988	-	Oct	lastSun	2:45s	1:00	D
-Rule	NZ	1976	1989	-	Mar	Sun>=1	2:00s	0	S
-Rule	Chatham	1976	1989	-	Mar	Sun>=1	2:45s	0	S
-Rule	NZ	1989	only	-	Oct	Sun>=8	2:00s	1:00	D
-Rule	Chatham	1989	only	-	Oct	Sun>=8	2:45s	1:00	D
-Rule	NZ	1990	max	-	Oct	Sun>=1	2:00s	1:00	D
-Rule	Chatham	1990	max	-	Oct	Sun>=1	2:45s	1:00	D
-Rule	NZ	1990	max	-	Mar	Sun>=15	2:00s	0	S
-Rule	Chatham	1990	max	-	Mar	Sun>=15	2:45s	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Pacific/Auckland	11:39:04 -	LMT	1868 Nov  2
-			11:30	NZ	NZ%sT	1946 Jan  1
-			12:00	NZ	NZ%sT
-Zone Pacific/Chatham	12:13:48 -	LMT	1957 Jan  1
-			12:45	Chatham	CHA%sT
-
-
-# Auckland Is
-# uninhabited; Maori and Moriori, colonial settlers, pastoralists, sealers,
-# and scientific personnel have wintered
-
-# Campbell I
-# minor whaling stations operated 1909/1914
-# scientific station operated 1941/1995;
-# previously whalers, sealers, pastoralists, and scientific personnel wintered
-# was probably like Pacific/Auckland
-
-###############################################################################
-
-
-# Niue
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Pacific/Niue	-11:19:40 -	LMT	1901		# Alofi
-			-11:20	-	NUT	1951	# Niue Time
-			-11:30	-	NUT	1978 Oct 1
-			-11:00	-	NUT
-
-# Norfolk
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Pacific/Norfolk	11:11:52 -	LMT	1901		# Kingston
-			11:12	-	NMT	1951	# Norfolk Mean Time
-			11:30	-	NFT		# Norfolk Time
-
-# Palau (Belau)
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Pacific/Palau	8:57:56 -	LMT	1901		# Koror
-			9:00	-	PWT	# Palau Time
-
-# Papua New Guinea
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Pacific/Port_Moresby 9:48:40 -	LMT	1880
-			9:48:32	-	PMMT	1895	# Port Moresby Mean Time
-			10:00	-	PGT		# Papua New Guinea Time
-
-# Pitcairn
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Pacific/Pitcairn	-8:40:20 -	LMT	1901		# Adamstown
-			-8:30	-	PNT	1998 Apr 27 00:00
-			-8:00	-	PST	# Pitcairn Standard Time
-
-# American Samoa
-Zone Pacific/Pago_Pago	 12:37:12 -	LMT	1879 Jul  5
-			-11:22:48 -	LMT	1911
-			-11:30	-	SAMT	1950		# Samoa Time
-			-11:00	-	NST	1967 Apr	# N=Nome
-			-11:00	-	BST	1983 Nov 30	# B=Bering
-			-11:00	-	SST			# S=Samoa
-
-# Samoa
-Zone Pacific/Apia	 12:33:04 -	LMT	1879 Jul  5
-			-11:26:56 -	LMT	1911
-			-11:30	-	SAMT	1950		# Samoa Time
-			-11:00	-	WST			# Samoa Time
-
-# Solomon Is
-# excludes Bougainville, for which see Papua New Guinea
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Pacific/Guadalcanal 10:39:48 -	LMT	1912 Oct	# Honiara
-			11:00	-	SBT	# Solomon Is Time
-
-# Tokelau Is
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Pacific/Fakaofo	-11:24:56 -	LMT	1901
-			-10:00	-	TKT	# Tokelau Time
-
-# Tonga
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Tonga	1999	only	-	Oct	 7	2:00s	1:00	S
-Rule	Tonga	2000	only	-	Mar	19	2:00s	0	-
-Rule	Tonga	2000	2001	-	Nov	Sun>=1	2:00	1:00	S
-Rule	Tonga	2001	2002	-	Jan	lastSun	2:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Pacific/Tongatapu	12:19:20 -	LMT	1901
-			12:20	-	TOT	1941 # Tonga Time
-			13:00	-	TOT	1999
-			13:00	Tonga	TO%sT
-
-# Tuvalu
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Pacific/Funafuti	11:56:52 -	LMT	1901
-			12:00	-	TVT	# Tuvalu Time
-
-
-# US minor outlying islands
-
-# Howland, Baker
-# uninhabited since World War II
-# no information; was probably like Pacific/Pago_Pago
-
-# Jarvis
-# uninhabited since 1958
-# no information; was probably like Pacific/Kiritimati
-
-# Johnston
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Pacific/Johnston	-10:00	-	HST
-
-# Kingman
-# uninhabited
-
-# Midway
-#
-# From Mark Brader (2005-01-23):
-# [Fallacies and Fantasies of Air Transport History, by R.E.G. Davies,
-# published 1994 by Paladwr Press, McLean, VA, USA; ISBN 0-9626483-5-3]
-# reproduced a Pan American Airways timeables from 1936, for their weekly
-# "Orient Express" flights between San Francisco and Manila, and connecting
-# flights to Chicago and the US East Coast.  As it uses some time zone
-# designations that I've never seen before:....
-# Fri. 6:30A Lv. HONOLOLU (Pearl Harbor), H.I.   H.L.T. Ar. 5:30P Sun.
-#  "   3:00P Ar. MIDWAY ISLAND . . . . . . . . . M.L.T. Lv. 6:00A  "
-#
-Zone Pacific/Midway	-11:49:28 -	LMT	1901
-			-11:00	-	NST	1956 Jun  3
-			-11:00	1:00	NDT	1956 Sep  2
-			-11:00	-	NST	1967 Apr	# N=Nome
-			-11:00	-	BST	1983 Nov 30	# B=Bering
-			-11:00	-	SST			# S=Samoa
-
-# Palmyra
-# uninhabited since World War II; was probably like Pacific/Kiritimati
-
-# Wake
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Pacific/Wake	11:06:28 -	LMT	1901
-			12:00	-	WAKT	# Wake Time
-
-
-# Vanuatu
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Vanuatu	1983	only	-	Sep	25	0:00	1:00	S
-Rule	Vanuatu	1984	1991	-	Mar	Sun>=23	0:00	0	-
-Rule	Vanuatu	1984	only	-	Oct	23	0:00	1:00	S
-Rule	Vanuatu	1985	1991	-	Sep	Sun>=23	0:00	1:00	S
-Rule	Vanuatu	1992	1993	-	Jan	Sun>=23	0:00	0	-
-Rule	Vanuatu	1992	only	-	Oct	Sun>=23	0:00	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Pacific/Efate	11:13:16 -	LMT	1912 Jan 13		# Vila
-			11:00	Vanuatu	VU%sT	# Vanuatu Time
-
-# Wallis and Futuna
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Pacific/Wallis	12:15:20 -	LMT	1901
-			12:00	-	WFT	# Wallis & Futuna Time
-
-###############################################################################
-
-# NOTES
-
-# This data is by no means authoritative; if you think you know better,
-# go ahead and edit the file (and please send any changes to
-# tz@elsie.nci.nih.gov for general use in the future).
-
-# From Paul Eggert (1999-10-29):
-# A good source for time zone historical data outside the U.S. is
-# Thomas G. Shanks, The International Atlas (5th edition),
-# San Diego: ACS Publications, Inc. (1999).
-#
-# Gwillim Law writes that a good source
-# for recent time zone data is the International Air Transport
-# Association's Standard Schedules Information Manual (IATA SSIM),
-# published semiannually.  Law sent in several helpful summaries
-# of the IATA's data after 1990.
-#
-# Except where otherwise noted, Shanks is the source for entries through 1990,
-# and IATA SSIM is the source for entries after 1990.
-#
-# Another source occasionally used is Edward W. Whitman, World Time Differences,
-# Whitman Publishing Co, 2 Niagara Av, Ealing, London (undated), which
-# I found in the UCLA library.
-#
-# A reliable and entertaining source about time zones is
-# Derek Howse, Greenwich time and longitude, Philip Wilson Publishers (1997).
-#
-# I invented the abbreviations marked `*' in the following table;
-# the rest are from earlier versions of this file, or from other sources.
-# Corrections are welcome!
-#		std dst
-#		LMT	Local Mean Time
-#	  8:00	WST WST	Western Australia
-#	  9:00	JST	Japan
-#	  9:30	CST CST	Central Australia
-#	 10:00	EST EST	Eastern Australia
-#	 10:00	ChST	Chamorro
-#	 10:30	LHST LHST Lord Howe*
-#	 11:30	NZMT NZST New Zealand through 1945
-#	 12:00	NZST NZDT New Zealand 1946-present
-#	 12:45	CHAST CHADT Chatham*
-#	-11:00	SST	Samoa
-#	-10:00	HST	Hawaii
-#	- 8:00	PST	Pitcairn*
-#
-# See the `northamerica' file for Hawaii.
-# See the `southamerica' file for Easter I and the Galapagos Is.
-
-###############################################################################
-
-# Australia
-
-# <a href="http://www.dstc.qut.edu.au/DST/marg/daylight.html">
-# Australia's Daylight Saving Times
-# </a>, by Margaret Turner, summarizes daylight saving issues in Australia.
-
-# From John Mackin (1991-03-06):
-# We in Australia have _never_ referred to DST as `daylight' time.
-# It is called `summer' time.  Now by a happy coincidence, `summer'
-# and `standard' happen to start with the same letter; hence, the
-# abbreviation does _not_ change...
-# The legislation does not actually define abbreviations, at least
-# in this State, but the abbreviation is just commonly taken to be the
-# initials of the phrase, and the legislation here uniformly uses
-# the phrase `summer time' and does not use the phrase `daylight
-# time'.
-# Announcers on the Commonwealth radio network, the ABC (for Australian
-# Broadcasting Commission), use the phrases `Eastern Standard Time'
-# or `Eastern Summer Time'.  (Note, though, that as I say in the
-# current australasia file, there is really no such thing.)  Announcers
-# on its overseas service, Radio Australia, use the same phrases
-# prefixed by the word `Australian' when referring to local times;
-# time announcements on that service, naturally enough, are made in UTC.
-
-# From Arthur David Olson (1992-03-08):
-# Given the above, what's chosen for year-round use is:
-#	CST	for any place operating at a GMTOFF of 9:30
-#	WST	for any place operating at a GMTOFF of 8:00
-#	EST	for any place operating at a GMTOFF of 10:00
-
-# From Paul Eggert (2001-04-05), summarizing a long discussion about "EST"
-# versus "AEST" etc.:
-#
-# I see the following points of dispute:
-#
-# * How important are unique time zone abbreviations?
-#
-#   Here I tend to agree with the point (most recently made by Chris
-#   Newman) that unique abbreviations should not be essential for proper
-#   operation of software.  We have other instances of ambiguity
-#   (e.g. "IST" denoting both "Israel Standard Time" and "Indian
-#   Standard Time"), and they are not likely to go away any time soon.
-#   In the old days, some software mistakenly relied on unique
-#   abbreviations, but this is becoming less true with time, and I don't
-#   think it's that important to cater to such software these days.
-#
-#   On the other hand, there is another motivation for unambiguous
-#   abbreviations: it cuts down on human confusion.  This is
-#   particularly true for Australia, where "EST" can mean one thing for
-#   time T and a different thing for time T plus 1 second.
-#
-# * Does the relevant legislation indicate which abbreviations should be used?
-#
-#   Here I tend to think that things are a mess, just as they are in
-#   many other countries.  We Americans are currently disagreeing about
-#   which abbreviation to use for the newly legislated Chamorro Standard
-#   Time, for example.
-#
-#   Personally, I would prefer to use common practice; I would like to
-#   refer to legislation only for examples of common practice, or as a
-#   tiebreaker.
-#
-# * Do Australians more often use "Eastern Daylight Time" or "Eastern
-#   Summer Time"?  Do they typically prefix the time zone names with
-#   the word "Australian"?
-#
-#   My own impression is that both "Daylight Time" and "Summer Time" are
-#   common and are widely understood, but that "Summer Time" is more
-#   popular; and that the leading "A" is also common but is omitted more
-#   often than not.  I just used AltaVista advanced search and got the
-#   following count of page hits:
-#
-#     1,103 "Eastern Summer Time" AND domain:au
-#       971 "Australian Eastern Summer Time" AND domain:au
-#       613 "Eastern Daylight Time" AND domain:au
-#       127 "Australian Eastern Daylight Time" AND domain:au
-#
-#   Here "Summer" seems quite a bit more popular than "Daylight",
-#   particularly when we know the time zone is Australian and not US,
-#   say.  The "Australian" prefix seems to be popular for Eastern Summer
-#   Time, but unpopular for Eastern Daylight Time.
-#
-#   For abbreviations, tools like AltaVista are less useful because of
-#   ambiguity.  Many hits are not really time zones, unfortunately, and
-#   many hits denote US time zones and not Australian ones.  But here
-#   are the hit counts anyway:
-#
-#     161,304 "EST" and domain:au
-#      25,156 "EDT" and domain:au
-#      18,263 "AEST" and domain:au
-#      10,416 "AEDT" and domain:au
-#
-#      14,538 "CST" and domain:au
-#       5,728 "CDT" and domain:au
-#         176 "ACST" and domain:au
-#          29 "ACDT" and domain:au
-#
-#       7,539 "WST" and domain:au
-#          68 "AWST" and domain:au
-#
-#   This data suggest that Australians tend to omit the "A" prefix in
-#   practice.  The situation for "ST" versus "DT" is less clear, given
-#   the ambiguities involved.
-#
-# * How do Australians feel about the abbreviations in the tz database?
-#
-#   If you just count Australians on this list, I count 2 in favor and 3
-#   against.  One of the "against" votes (David Keegel) counseled delay,
-#   saying that both AEST/AEDT and EST/EST are widely used and
-#   understood in Australia.
-
-# From Paul Eggert (1995-12-19):
-# Shanks reports 2:00 for all autumn changes in Australia and New Zealand.
-# Mark Prior writes that his newspaper
-# reports that NSW's fall 1995 change will occur at 2:00,
-# but Robert Elz says it's been 3:00 in Victoria since 1970
-# and perhaps the newspaper's `2:00' is referring to standard time.
-# For now we'll continue to assume 2:00s for changes since 1960.
-
-# From Eric Ulevik (1998-01-05):
-#
-# Here are some URLs to Australian time legislation. These URLs are stable,
-# and should probably be included in the data file. There are probably more
-# relevant entries in this database.
-#
-# NSW (including LHI and Broken Hill):
-# <a href="http://www.austlii.edu.au/au/legis/nsw/consol_act/sta1987137/index.html">
-# Standard Time Act 1987 (updated 1995-04-04)
-# </a>
-# ACT
-# <a href="http://www.austlii.edu.au/au/legis/act/consol_act/stasta1972279/index.html">
-# Standard Time and Summer Time Act 1972
-# </a>
-# SA
-# <a href="http://www.austlii.edu.au/au/legis/sa/consol_act/sta1898137/index.html">
-# Standard Time Act, 1898
-# </a>
-
-# From David Grosz (2005-06-13):
-# It was announced last week that Daylight Saving would be extended by
-# one week next year to allow for the 2006 Commonwealth Games.
-# Daylight Saving is now to end for next year only on the first Sunday
-# in April instead of the last Sunday in March.
-#
-# From Gwillim Law (2005-06-14):
-# I did some Googling and found that all of those states (and territory) plan
-# to extend DST together in 2006.
-# ACT: http://www.cmd.act.gov.au/mediareleases/fileread.cfm?file=86.txt
-# New South Wales: http://www.thecouriermail.news.com.au/common/story_page/0,5936,15538869%255E1702,00.html
-# South Australia: http://www.news.com.au/story/0,10117,15555031-1246,00.html
-# Tasmania: http://www.media.tas.gov.au/release.php?id=14772
-# Victoria: I wasn't able to find anything separate, but the other articles
-# allude to it.
-# But not Queensland
-# http://www.news.com.au/story/0,10117,15564030-1248,00.html.
-
-# Northern Territory
-
-# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
-# # The NORTHERN TERRITORY..  [ Courtesy N.T. Dept of the Chief Minister ]
-# #					[ Nov 1990 ]
-# #	N.T. have never utilised any DST due to sub-tropical/tropical location.
-# ...
-# Zone        Australia/North         9:30    -       CST
-
-# From Bradley White (1991-03-04):
-# A recent excerpt from an Australian newspaper...
-# the Northern Territory do[es] not have daylight saving.
-
-# Western Australia
-
-# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
-# #  The state of WESTERN AUSTRALIA..  [ Courtesy W.A. dept Premier+Cabinet ]
-# #						[ Nov 1990 ]
-# #	W.A. suffers from a great deal of public and political opposition to
-# #	DST in principle. A bill is brought before parliament in most years, but
-# #	usually defeated either in the upper house, or in party caucus
-# #	before reaching parliament.
-# ...
-# Zone	Australia/West		8:00	AW	%sST
-# ...
-# Rule	AW	1974	only	-	Oct	lastSun	2:00	1:00	D
-# Rule	AW	1975	only	-	Mar	Sun>=1	3:00	0	W
-# Rule	AW	1983	only	-	Oct	lastSun	2:00	1:00	D
-# Rule	AW	1984	only	-	Mar	Sun>=1	3:00	0	W
-
-# From Bradley White (1991-03-04):
-# A recent excerpt from an Australian newspaper...
-# Western Australia...do[es] not have daylight saving.
-
-# From John D. Newman via Bradley White (1991-11-02):
-# Western Australia is still on "winter time". Some DH in Sydney
-# rang me at home a few days ago at 6.00am. (He had just arrived at
-# work at 9.00am.)
-# W.A. is switching to Summer Time on Nov 17th just to confuse
-# everybody again.
-
-# From Arthur David Olson (1992-03-08):
-# The 1992 ending date used in the rules is a best guess;
-# it matches what was used in the past.
-
-# <a href="http://www.bom.gov.au/faq/faqgen.htm">
-# The Australian Bureau of Meteorology FAQ
-# </a> (1999-09-27) writes that Giles Meteorological Station uses
-# South Australian time even though it's located in Western Australia.
-
-# Queensland
-# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
-# #   The state of QUEENSLAND.. [ Courtesy Qld. Dept Premier Econ&Trade Devel ]
-# #						[ Dec 1990 ]
-# ...
-# Zone	Australia/Queensland	10:00	AQ	%sST
-# ...
-# Rule	AQ	1971	only	-	Oct	lastSun	2:00	1:00	D
-# Rule	AQ	1972	only	-	Feb	lastSun	3:00	0	E
-# Rule	AQ	1989	max	-	Oct	lastSun	2:00	1:00	D
-# Rule	AQ	1990	max	-	Mar	Sun>=1	3:00	0	E
-
-# From Bradley White (1989-12-24):
-# "Australia/Queensland" now observes daylight time (i.e. from
-# October 1989).
-
-# From Bradley White (1991-03-04):
-# A recent excerpt from an Australian newspaper...
-# ...Queensland...[has] agreed to end daylight saving
-# at 3am tomorrow (March 3)...
-
-# From John Mackin (1991-03-06):
-# I can certainly confirm for my part that Daylight Saving in NSW did in fact
-# end on Sunday, 3 March.  I don't know at what hour, though.  (It surprised
-# me.)
-
-# From Bradley White (1992-03-08):
-# ...there was recently a referendum in Queensland which resulted
-# in the experimental daylight saving system being abandoned. So, ...
-# ...
-# Rule	QLD	1989	1991	-	Oct	lastSun	2:00	1:00	D
-# Rule	QLD	1990	1992	-	Mar	Sun>=1	3:00	0	S
-# ...
-
-# From Arthur David Olson (1992-03-08):
-# The chosen rules the union of the 1971/1972 change and the 1989-1992 changes.
-
-# From Rives McDow (2002-04-09):
-# The most interesting region I have found consists of three towns on the
-# southern coast of Australia, population 10 at last report, along with
-# 50,000 sheep, about 100 kilometers long and 40 kilometers into the
-# continent.  The primary town is Madura, with the other towns being
-# Mundrabilla and Eucla.  According to the sheriff of Madura, the
-# residents got tired of having to change the time so often, as they are
-# located in a strip overlapping the border of South Australia and Western
-# Australia.  South Australia observes daylight saving time; Western
-# Australia does not.  The two states are one and a half hours apart.  The
-# residents decided to forget about this nonsense of changing the clock so
-# much and set the local time 20 hours and 45 minutes from the
-# international date line, or right in the middle of the time of South
-# Australia and Western Australia.  As it only affects about 10 people and
-# tourists staying at the Madura Motel, it has never really made as big an
-# impact as Broken Hill.  However, as tourist visiting there or anyone
-# calling the local sheriff will attest, they do keep time in this way.
-#
-# From Paul Eggert (2002-04-09):
-# This is confirmed by the section entitled
-# "What's the deal with time zones???" in
-# <http://www.earthsci.unimelb.edu.au/~awatkins/null.html>,
-# which says a few other things:
-#
-# * Border Village, SA also is 45 minutes ahead of Perth.
-# * The locals call this time zone "central W.A. Time" (presumably "CWAT").
-# * The locals also call Western Australia time "Perth time".
-#
-# It's not clear from context whether everyone in Western Australia
-# knows of this naming convention, or whether it's just the people in
-# this subregion.
-
-# South Australia, Tasmania, Victoria
-
-# From Arthur David Olson (1992-03-08):
-# The rules from version 7.1 follow.
-# There are lots of differences between these rules and
-# the Shepherd et al. rules.  Since the Shepherd et al. rules
-# and Bradley White's newspaper article are in agreement on
-# current DST ending dates, no worries.
-#
-# Rule	Oz	1971	1985	-	Oct	lastSun	2:00	1:00	-
-# Rule	Oz	1986	max	-	Oct	Sun<=24	2:00	1:00	-
-# Rule	Oz	1972	only	-	Feb	27	3:00	0	-
-# Rule	Oz	1973	1986	-	Mar	Sun>=1	3:00	0	-
-# Rule	Oz	1987	max	-	Mar	Sun<=21	3:00	0	-
-# Zone	Australia/Tasmania	10:00	Oz	EST
-# Zone	Australia/South		9:30	Oz	CST
-# Zone	Australia/Victoria	10:00	Oz	EST	1985 Oct lastSun 2:00
-#				10:00	1:00	EST	1986 Mar Sun<=21 3:00
-#				10:00	Oz	EST
-
-# From Robert Elz (1991-03-06):
-# I believe that the current start date for DST is "lastSun" in Oct...
-# that changed Oct 89.  That is, we're back to the
-# original rule, and that rule currently applies in all the states
-# that have dst, incl Qld.  (Certainly it was true in Vic).
-# The file I'm including says that happened in 1988, I think
-# that's incorrect, but I'm not 100% certain.
-
-# South Australia
-
-# From Bradley White (1991-03-04):
-# A recent excerpt from an Australian newspaper...
-# ...South Australia...[has] agreed to end daylight saving
-# at 3am tomorrow (March 3)...
-
-# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
-# #   The state of SOUTH AUSTRALIA....[ Courtesy of S.A. Dept of Labour ]
-# #						[ Nov 1990 ]
-# ...
-# Zone	Australia/South		9:30	AS	%sST
-# ...
-# Rule	 AS	1971	max	-	Oct	lastSun	2:00	1:00	D
-# Rule	 AS	1972	1985	-	Mar	Sun>=1	3:00	0	C
-# Rule	 AS	1986	1990	-	Mar	Sun<=21	3:00	0	C
-# Rule	 AS	1991	max	-	Mar	Sun>=1	3:00	0	C
-
-# From Bradley White (1992-03-11):
-# Recent correspondence with a friend in Adelaide
-# contained the following exchange:  "Due to the Adelaide Festival,
-# South Australia delays setting back our clocks for a few weeks."
-
-# From Robert Elz (1992-03-13):
-# I heard that apparently (or at least, it appears that)
-# South Aus will have an extra 3 weeks daylight saving every even
-# numbered year (from 1990).  That's when the Adelaide Festival
-# is on...
-
-# From Robert Elz (1992-03-16, 00:57:07 +1000):
-# DST didn't end in Adelaide today (yesterday)....
-# But whether it's "4th Sunday" or "2nd last Sunday" I have no idea whatever...
-# (it's just as likely to be "the Sunday we pick for this year"...).
-
-# From Bradley White (1994-04-11):
-# If Sun, 15 March, 1992 was at +1030 as kre asserts, but yet Sun, 20 March,
-# 1994 was at +0930 as John Connolly's customer seems to assert, then I can
-# only conclude that the actual rule is more complicated....
-
-# From John Warburton (1994-10-07):
-# The new Daylight Savings dates for South Australia ...
-# was gazetted in the Government Hansard on Sep 26 1994....
-# start on last Sunday in October and end in last sunday in March.
-
-# Tasmania
-
-# The rules for 1967 through 1991 were reported by George Shepherd
-# via Simon Woodhead via Robert Elz (1991-03-06):
-# #  The state of TASMANIA.. [Courtesy Tasmanian Dept of Premier + Cabinet ]
-# #					[ Nov 1990 ]
-
-# From Bill Hart via Guy Harris (1991-10-10):
-# Oh yes, the new daylight savings rules are uniquely tasmanian, we have
-# 6 weeks a year now when we are out of sync with the rest of Australia
-# (but nothing new about that).
-
-# From Alex Livingston (1999-10-04):
-# I heard on the ABC (Australian Broadcasting Corporation) radio news on the
-# (long) weekend that Tasmania, which usually goes its own way in this regard,
-# has decided to join with most of NSW, the ACT, and most of Victoria
-# (Australia) and start daylight saving on the last Sunday in August in 2000
-# instead of the first Sunday in October.
-
-# Sim Alam (2000-07-03) reported a legal citation for the 2000/2001 rules:
-# http://www.thelaw.tas.gov.au/fragview/42++1968+GS3A@EN+2000070300
-
-# Victoria
-
-# The rules for 1971 through 1991 were reported by George Shepherd
-# via Simon Woodhead via Robert Elz (1991-03-06):
-# #   The state of VICTORIA.. [ Courtesy of Vic. Dept of Premier + Cabinet ]
-# #						[ Nov 1990 ]
-
-# From Scott Harrington (2001-08-29):
-# On KQED's "City Arts and Lectures" program last night I heard an
-# interesting story about daylight savings time.  Dr. John Heilbron was
-# discussing his book "The Sun in the Church: Cathedrals as Solar
-# Observatories"[1], and in particular the Shrine of Remembrance[2] located
-# in Melbourne, Australia.
-#
-# Apparently the shrine's main purpose is a beam of sunlight which
-# illuminates a special spot on the floor at the 11th hour of the 11th day
-# of the 11th month (Remembrance Day) every year in memory of Australia's
-# fallen WWI soldiers.  And if you go there on Nov. 11, at 11am local time,
-# you will indeed see the sunbeam illuminate the special spot at the
-# expected time.
-#
-# However, that is only because of some special mirror contraption that had
-# to be employed, since due to daylight savings time, the true solar time of
-# the remembrance moment occurs one hour later (or earlier?).  Perhaps
-# someone with more information on this jury-rig can tell us more.
-#
-# [1] http://www.hup.harvard.edu/catalog/HEISUN.html
-# [2] http://www.shrine.org.au
-
-# New South Wales
-
-# From Arthur David Olson:
-# New South Wales and subjurisdictions have their own ideas of a fun time.
-# Based on law library research by John Mackin,
-# who notes:
-#	In Australia, time is not legislated federally, but rather by the
-#	individual states.  Thus, while such terms as ``Eastern Standard Time''
-#	[I mean, of course, Australian EST, not any other kind] are in common
-#	use, _they have NO REAL MEANING_, as they are not defined in the
-#	legislation.  This is very important to understand.
-#	I have researched New South Wales time only...
-
-# From Paul Eggert (1999-09-27):
-# The Information Service of the Australian National Standards Commission
-# <a href="http://www.nsc.gov.au/InfoServ/Ileaflet/il27.htm">
-# Daylight Saving
-# </a> page (1995-04) has an excellent overall history of Australian DST.
-# The Community Relations Division of the NSW Attorney General's Department
-# publishes a history of daylight saving in NSW.  See:
-# <a href="http://www.lawlink.nsw.gov.au/crd.nsf/pages/time2">
-# Lawlink NSW: Daylight Saving in New South Wales
-# </a>
-
-# From Eric Ulevik (1999-05-26):
-# DST will start in NSW on the last Sunday of August, rather than the usual
-# October in 2000.  [See: Matthew Moore,
-# <a href="http://www.smh.com.au/news/9905/26/pageone/pageone4.html">
-# Two months more daylight saving
-# </a>
-# Sydney Morning Herald (1999-05-26).]
-
-# From Paul Eggert (1999-09-27):
-# See the following official NSW source:
-# <a href="http://dir.gis.nsw.gov.au/cgi-bin/genobject/document/other/daylightsaving/tigGmZ">
-# Daylight Saving in New South Wales.
-# </a>
-#
-# Narrabri Shire (NSW) council has announced it will ignore the extension of
-# daylight saving next year.  See:
-# <a href="http://abc.net.au/news/regionals/neweng/monthly/regeng-22jul1999-1.htm">
-# Narrabri Council to ignore daylight saving
-# </a> (1999-07-22).  For now, we'll wait to see if this really happens.
-#
-# Victoria will following NSW.  See:
-# <a href="http://abc.net.au/local/news/olympics/1999/07/item19990728112314_1.htm">
-# Vic to extend daylight saving
-# </a> (1999-07-28).
-#
-# However, South Australia rejected the DST request.  See:
-# <a href="http://abc.net.au/news/olympics/1999/07/item19990719151754_1.htm">
-# South Australia rejects Olympics daylight savings request
-# </a> (1999-07-19).
-#
-# Queensland also will not observe DST for the Olympics.  See:
-# <a href="http://abc.net.au/news/olympics/1999/06/item19990601114608_1.htm">
-# Qld says no to daylight savings for Olympics
-# </a> (1999-06-01), which quotes Queensland Premier Peter Beattie as saying
-# ``Look you've got to remember in my family when this came up last time
-# I voted for it, my wife voted against it and she said to me it's all very
-# well for you, you don't have to worry about getting the children out of
-# bed, getting them to school, getting them to sleep at night.
-# I've been through all this argument domestically...my wife rules.''
-#
-# Broken Hill will stick with South Australian time in 2000.  See:
-# <a href="http://abc.net.au/news/regionals/brokenh/monthly/regbrok-21jul1999-6.htm">
-# Broken Hill to be behind the times
-# </a> (1999-07-21).
-
-# IATA SSIM (1998-09) says that the spring 2000 change for Australian
-# Capital Territory, New South Wales except Lord Howe Island and Broken
-# Hill, and Victoria will be August 27, presumably due to the Sydney Olympics.
-
-# From Eric Ulevik, referring to Sydney's Sun Herald (2000-08-13), page 29:
-# The Queensland Premier Peter Beattie is encouraging northern NSW
-# towns to use Queensland time.
-
-# Yancowinna
-
-# From John Mackin (1989-01-04):
-# `Broken Hill' means the County of Yancowinna.
-
-# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
-# # YANCOWINNA..  [ Confirmation courtesy of Broken Hill Postmaster ]
-# #					[ Dec 1990 ]
-# ...
-# # Yancowinna uses Central Standard Time, despite [its] location on the
-# # New South Wales side of the S.A. border. Most business and social dealings
-# # are with CST zones, therefore CST is legislated by local government
-# # although the switch to Summer Time occurs in line with N.S.W. There have
-# # been years when this did not apply, but the historical data is not
-# # presently available.
-# Zone	Australia/Yancowinna	9:30	 AY	%sST
-# ...
-# Rule	 AY	1971	1985	-	Oct	lastSun	2:00	1:00	D
-# Rule	 AY	1972	only	-	Feb	lastSun	3:00	0	C
-# [followed by other Rules]
-
-# Lord Howe Island
-
-# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
-# LHI...		[ Courtesy of Pauline Van Winsen.. pauline@Aus ]
-#					[ Dec 1990 ]
-# Lord Howe Island is located off the New South Wales coast, and is half an
-# hour ahead of NSW time.
-
-# From James Lonergan, Secretary, Lord Howe Island Board (2000-01-27):
-# Lord Howe Island summer time in 2000/2001 will commence on the same
-# date as the rest of NSW (i.e. 2000-08-27).  For your information the
-# Lord Howe Island Board (controlling authority for the Island) is
-# seeking the community's views on various options for summer time
-# arrangements on the Island, e.g. advance clocks by 1 full hour
-# instead of only 30 minutes.  Dependant on the wishes of residents
-# the Board may approach the NSW government to change the existing
-# arrangements.  The starting date for summer time on the Island will
-# however always coincide with the rest of NSW.
-
-# From James Lonergan, Secretary, Lord Howe Island Board (2000-10-25):
-# Lord Howe Island advances clocks by 30 minutes during DST in NSW and retards
-# clocks by 30 minutes when DST finishes. Since DST was most recently
-# introduced in NSW, the "changeover" time on the Island has been 02:00 as
-# shown on clocks on LHI. I guess this means that for 30 minutes at the start
-# of DST, LHI is actually 1 hour ahead of the rest of NSW.
-
-# From Paul Eggert (2001-02-09):
-# For Lord Howe dates we use Shanks through 1989, and Lonergan thereafter.
-# For times we use Lonergan.
-
-###############################################################################
-
-# New Zealand
-
-# From Mark Davies (1990-10-03):
-# the 1989/90 year was a trial of an extended "daylight saving" period.
-# This trial was deemed successful and the extended period adopted for
-# subsequent years (with the addition of a further week at the start).
-# source -- phone call to Ministry of Internal Affairs Head Office.
-
-# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
-# # The Country of New Zealand   (Australia's east island -) Gee they hate that!
-# #				   or is Australia the west island of N.Z.
-# #	[ courtesy of Geoff Tribble.. Geofft@Aus.. Auckland N.Z. ]
-# #				[ Nov 1990 ]
-# ...
-# Rule	NZ      1974    1988	-	Oct	lastSun	2:00	1:00	D
-# Rule	NZ	1989	max	-	Oct	Sun>=1	2:00	1:00	D
-# Rule	NZ      1975    1989	-	Mar	Sun>=1	3:00	0	S
-# Rule	NZ	1990	max	-	Mar	lastSun	3:00	0	S
-# ...
-# Zone	NZ			12:00	NZ		NZ%sT	# New Zealand
-# Zone	NZ-CHAT			12:45	-		NZ-CHAT # Chatham Island
-
-# From Arthur David Olson (1992-03-08):
-# The chosen rules use the Davies October 8 values for the start of DST in 1989
-# rather than the October 1 value.
-
-# From Paul Eggert (1995-12-19);
-# Shanks reports 2:00 for all autumn changes in Australia and New Zealand.
-# Robert Uzgalis writes that the New Zealand Daylight
-# Savings Time Order in Council dated 1990-06-18 specifies 2:00 standard
-# time on both the first Sunday in October and the third Sunday in March.
-# As with Australia, we'll assume the tradition is 2:00s, not 2:00.
-#
-# From Paul Eggert (2003-05-26):
-# The Department of Internal Affairs (DIA) maintains a brief history,
-# as does Carol Squires; see tz-link.htm for the full references.
-# Use these sources in preference to Shanks.
-#
-# For Chatham, IATA SSIM (1991/1999) gives the NZ rules but with
-# transitions at 2:45 local standard time; this confirms that Chatham
-# is always exactly 45 minutes ahead of Auckland.
-
-###############################################################################
-
-
-# Fiji
-
-# Howse writes (p 153) that in 1879 the British governor of Fiji
-# enacted an ordinance standardizing the islands on Antipodean Time
-# instead of the American system (which was one day behind).
-
-# From Rives McDow (1998-10-08):
-# Fiji will introduce DST effective 0200 local time, 1998-11-01
-# until 0300 local time 1999-02-28.  Each year the DST period will
-# be from the first Sunday in November until the last Sunday in February.
-
-# From Paul Eggert (2000-01-08):
-# IATA SSIM (1999-09) says DST ends 0100 local time.  Go with McDow.
-
-# From the BBC World Service (1998-10-31 11:32 UTC):
-# The Fijiian government says the main reasons for the time change is to
-# improve productivity and reduce road accidents.  But correspondents say it
-# also hopes the move will boost Fiji's ability to compete with other pacific
-# islands in the effort to attract tourists to witness the dawning of the new
-# millenium.
-
-# http://www.fiji.gov.fj/press/2000_09/2000_09_13-05.shtml (2000-09-13)
-# reports that Fiji has discontinued DST.
-
-# Johnston
-
-# Johnston data is from usno1995.
-
-
-# Kiribati
-
-# From Paul Eggert (1996-01-22):
-# Today's _Wall Street Journal_ (page 1) reports that Kiribati
-# ``declared it the same day throught the country as of Jan. 1, 1995''
-# as part of the competition to be first into the 21st century.
-
-
-# Kwajalein
-
-# In comp.risks 14.87 (26 August 1993), Peter Neumann writes:
-# I wonder what happened in Kwajalein, where there was NO Friday,
-# 1993-08-20.  Thursday night at midnight Kwajalein switched sides with
-# respect to the International Date Line, to rejoin its fellow islands,
-# going from 11:59 p.m. Thursday to 12:00 m. Saturday in a blink.
-
-
-# N Mariana Is, Guam
-
-# Howse writes (p 153) ``The Spaniards, on the other hand, reached the
-# Philippines and the Ladrones from America,'' and implies that the Ladrones
-# (now called the Marianas) kept American date for quite some time.
-# For now, we assume the Ladrones switched at the same time as the Philippines;
-# see Asia/Manila.
-
-# US Public Law 106-564 (2000-12-23) made UTC+10 the official standard time,
-# under the name "Chamorro Standard Time".  There is no official abbreviation,
-# but Congressman Robert A. Underwood, author of the bill that became law,
-# wrote in a press release (2000-12-27) that he will seek the use of "ChST".
-
-
-# Micronesia
-
-# Alan Eugene Davis writes (1996-03-16),
-# ``I am certain, having lived there for the past decade, that "Truk"
-# (now properly known as Chuuk) ... is in the time zone GMT+10.''
-#
-# Shanks writes that Truk switched from UTC+10 to UTC+11 on 1978-10-01;
-# ignore this for now.
-
-# From Paul Eggert (1999-10-29):
-# The Federated States of Micronesia Visitors Board writes in
-# <a href="http://www.fsmgov.org/info/clocks.html">
-# The Federated States of Micronesia - Visitor Information
-# </a> (1999-01-26)
-# that Truk and Yap are UTC+10, and Ponape and Kosrae are UTC+11.
-# We don't know when Kosrae switched from UTC+12; assume January 1 for now.
-
-
-# Midway
-
-# From Charles T O'Connor, KMTH DJ (1956),
-# quoted in the KTMH section of the Radio Heritage Collection
-# <http://radiodx.com/spdxr/KMTH.htm> (2002-12-31):
-# For the past two months we've been on what is known as Daylight
-# Saving Time.  This time has put us on air at 5am in the morning,
-# your time down there in New Zealand.  Starting September 2, 1956
-# we'll again go back to Standard Time.  This'll mean that we'll go to
-# air at 6am your time.
-#
-# From Paul Eggert (2003-03-23):
-# We don't know the date of that quote, but we'll guess they
-# started DST on June 3.  Possibly DST was observed other years
-# in Midway, but we have no record of it.
-
-
-# Pitcairn
-
-# From Rives McDow (1999-11-08):
-# A Proclamation was signed by the Governor of Pitcairn on the 27th March 1998
-# with regard to Pitcairn Standard Time.  The Proclamation is as follows.
-#
-#	The local time for general purposes in the Islands shall be
-#	Co-ordinated Universal time minus 8 hours and shall be known
-#	as Pitcairn Standard Time.
-#
-# ... I have also seen Pitcairn listed as UTC minus 9 hours in several
-# references, and can only assume that this was an error in interpretation
-# somehow in light of this proclamation.
-
-# From Rives McDow (1999-11-09):
-# The Proclamation regarding Pitcairn time came into effect on 27 April 1998
-# ... at midnight.
-
-# From Howie Phelps (1999-11-10), who talked to a Pitcairner via shortwave:
-# Betty Christian told me yesterday that their local time is the same as
-# Pacific Standard Time. They used to be 1/2 hour different from us here in
-# Sacramento but it was changed a couple of years ago.
-
-
-# Samoa
-
-# Howse writes (p 153, citing p 10 of the 1883-11-18 New York Herald)
-# that in 1879 the King of Samoa decided to change
-# ``the date in his kingdom from the Antipodean to the American system,
-# ordaining -- by a masterpiece of diplomatic flattery -- that
-# the Fourth of July should be celebrated twice in that year.''
-
-
-# Tonga
-
-# From Paul Eggert (1996-01-22):
-# Today's _Wall Street Journal_ (p 1) reports that ``Tonga has been plotting
-# to sneak ahead of [New Zealanders] by introducing daylight-saving time.''
-# Since Kiribati has moved the Date Line it's not clear what Tonga will do.
-
-# Don Mundell writes in the 1997-02-20 Tonga Chronicle
-# <a href="http://www.tongatapu.net.to/tonga/homeland/timebegins.htm">
-# How Tonga became `The Land where Time Begins'
-# </a>:
-
-# Until 1941 Tonga maintained a standard time 50 minutes ahead of NZST
-# 12 hours and 20 minutes ahead of GMT.  When New Zealand adjusted its
-# standard time in 1940s, Tonga had the choice of subtracting from its
-# local time to come on the same standard time as New Zealand or of
-# advancing its time to maintain the differential of 13 degrees
-# (approximately 50 minutes ahead of New Zealand time).
-#
-# Because His Majesty King Taufa'ahau Tupou IV, then Crown Prince
-# Tungi, preferred to ensure Tonga's title as the land where time
-# begins, the Legislative Assembly approved the latter change.
-#
-# But some of the older, more conservative members from the outer
-# islands objected. "If at midnight on Dec. 31, we move ahead 40
-# minutes, as your Royal Highness wishes, what becomes of the 40
-# minutes we have lost?"
-#
-# The Crown Prince, presented an unanswerable argument: "Remember that
-# on the World Day of Prayer, you would be the first people on Earth
-# to say your prayers in the morning."
-
-# From Paul Eggert (1999-08-12):
-# Shanks says the transition was on 1968-10-01; go with Mundell.
-
-# From Eric Ulevik (1999-05-03):
-# Tonga's director of tourism, who is also secretary of the National Millenium
-# Committee, has a plan to get Tonga back in front.
-# He has proposed a one-off move to tropical daylight saving for Tonga from
-# October to March, which has won approval in principle from the Tongan
-# Government.
-
-# From Steffen Thorsen (1999-09-09):
-# * Tonga will introduce DST in November
-#
-# I was given this link by John Letts:
-# <a hef="http://news.bbc.co.uk/hi/english/world/asia-pacific/newsid_424000/424764.stm">
-# http://news.bbc.co.uk/hi/english/world/asia-pacific/newsid_424000/424764.stm
-# </a>
-#
-# I have not been able to find exact dates for the transition in November
-# yet. By reading this article it seems like Fiji will be 14 hours ahead
-# of UTC as well, but as far as I know Fiji will only be 13 hours ahead
-# (12 + 1 hour DST).
-
-# From Arthur David Olson (1999-09-20):
-# According to <a href="http://www.tongaonline.com/news/sept1799.html>
-# http://www.tongaonline.com/news/sept1799.html
-# </a>:
-# "Daylight Savings Time will take effect on Oct. 2 through April 15, 2000
-# and annually thereafter from the first Saturday in October through the
-# third Saturday of April.  Under the system approved by Privy Council on
-# Sept. 10, clocks must be turned ahead one hour on the opening day and
-# set back an hour on the closing date."
-# Alas, no indication of the time of day.
-
-# From Rives McDow (1999-10-06):
-# Tonga started its Daylight Saving on Saturday morning October 2nd at 0200am.
-# Daylight Saving ends on April 16 at 0300am which is Sunday morning.
-
-# From Steffen Thorsen (2000-10-31):
-# Back in March I found a notice on the website http://www.tongaonline.com
-# that Tonga changed back to standard time one month early, on March 19
-# instead of the original reported date April 16. Unfortunately, the article
-# is no longer available on the site, and I did not make a copy of the
-# text, and I have forgotten to report it here.
-# (Original URL was: http://www.tongaonline.com/news/march162000.htm )
-
-# From Rives McDow (2000-12-01):
-# Tonga is observing DST as of 2000-11-04 and will stop on 2001-01-27.
-
-# From Sione Moala-Mafi (2001-09-20) via Rives McDow:
-# At 2:00am on the first Sunday of November, the standard time in the Kingdom
-# shall be moved forward by one hour to 3:00am.  At 2:00am on the last Sunday
-# of January the standard time in the Kingdom shall be moved backward by one
-# hour to 1:00am.
-
-# From Pulu 'Anau (2002-11-05):
-# The law was for 3 years, supposedly to get renewed.  It wasn't.
-
-
-# Wake
-
-# From Vernice Anderson, Personal Secretary to Philip Jessup,
-# US Ambassador At Large (oral history interview, 1971-02-02):
-#
-# Saturday, the 14th [of October, 1950] -- ...  The time was all the
-# more confusing at that point, because we had crossed the
-# International Date Line, thus getting two Sundays.  Furthermore, we
-# discovered that Wake Island had two hours of daylight saving time
-# making calculation of time in Washington difficult if not almost
-# impossible.
-#
-# http://www.trumanlibrary.org/wake/meeting.htm
-
-# From Paul Eggert (2003-03-23):
-# We have no other report of DST in Wake Island, so omit this info for now.
-
-###############################################################################
-
-# The International Date Line
-
-# From Gwillim Law (2000-01-03):
-#
-# The International Date Line is not defined by any international standard,
-# convention, or treaty.  Mapmakers are free to draw it as they please.
-# Reputable mapmakers will simply ensure that every point of land appears on
-# the correct side of the IDL, according to the date legally observed there.
-#
-# When Kiribati adopted a uniform date in 1995, thereby moving the Phoenix and
-# Line Islands to the west side of the IDL (or, if you prefer, moving the IDL
-# to the east side of the Phoenix and Line Islands), I suppose that most
-# mapmakers redrew the IDL following the boundary of Kiribati.  Even that line
-# has a rather arbitrary nature.  The straight-line boundaries between Pacific
-# island nations that are shown on many maps are based on an international
-# convention, but are not legally binding national borders.
-#
-# An Anglo-French Conference on Time-Keeping at Sea (June, 1917) agreed that
-# legal time on the high seas would be zone time, i.e., the standard time at
-# the nearest meridian that is a multiple of fifteen degrees.  The date is
-# governed by the IDL; therefore, even on the high seas, there may be some
-# places as late as fourteen hours later than UTC.  And, since the IDL is not
-# an international standard, there are some places on the high seas where the
-# correct date is ambiguous.
-
-# From Paul Eggert, using references suggested by Oscar van Vlijmen
-# (2005-03-20):
-#
-# The American Practical Navigator (2002)
-# <http://pollux.nss.nima.mil/pubs/pubs_j_apn_sections.html?rid=187>
-# talks only about the 180-degree meridian with respect to ships in
-# international waters; it ignores the international date line.
+# @(#)australasia	7.74
+# This file also includes Pacific islands.
+
+# Notes are at the end of this file
+
+###############################################################################
+
+# Australia
+
+# Please see the notes below for the controversy about "EST" versus "AEST" etc.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Aus	1917	only	-	Jan	 1	0:01	1:00	-
+Rule	Aus	1917	only	-	Mar	25	2:00	0	-
+Rule	Aus	1942	only	-	Jan	 1	2:00	1:00	-
+Rule	Aus	1942	only	-	Mar	29	2:00	0	-
+Rule	Aus	1942	only	-	Sep	27	2:00	1:00	-
+Rule	Aus	1943	1944	-	Mar	lastSun	2:00	0	-
+Rule	Aus	1943	only	-	Oct	 3	2:00	1:00	-
+# Go with Whitman and the Australian National Standards Commission, which
+# says W Australia didn't use DST in 1943/1944.  Ignore Whitman's claim that
+# 1944/1945 was just like 1943/1944.
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+# Northern Territory
+Zone Australia/Darwin	 8:43:20 -	LMT	1895 Feb
+			 9:00	-	CST	1899 May
+			 9:30	Aus	CST
+# Western Australia
+Zone Australia/Perth	 7:43:24 -	LMT	1895 Dec
+			 8:00	Aus	WST	1943 Jul
+			 8:00	-	WST	1974 Oct lastSun 2:00s
+			 8:00	1:00	WST	1975 Mar Sun>=1 2:00s
+			 8:00	-	WST	1983 Oct lastSun 2:00s
+			 8:00	1:00	WST	1984 Mar Sun>=1 2:00s
+			 8:00	-	WST	1991 Nov 17 2:00s
+			 8:00	1:00	WST	1992 Mar Sun>=1 2:00s
+			 8:00	-	WST
+# Queensland
+#
+# From Alex Livingston (1996-11-01):
+# I have heard or read more than once that some resort islands off the coast
+# of Queensland chose to keep observing daylight-saving time even after
+# Queensland ceased to.
+#
+# From Paul Eggert (1996-11-22):
+# IATA SSIM (1993-02/1994-09) say that the Holiday Islands (Hayman, Lindeman,
+# Hamilton) observed DST for two years after the rest of Queensland stopped.
+# Hamilton is the largest, but there is also a Hamilton in Victoria,
+# so use Lindeman.
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	AQ	1971	only	-	Oct	lastSun	2:00s	1:00	-
+Rule	AQ	1972	only	-	Feb	lastSun	2:00s	0	-
+Rule	AQ	1989	1991	-	Oct	lastSun	2:00s	1:00	-
+Rule	AQ	1990	1992	-	Mar	Sun>=1	2:00s	0	-
+Rule	Holiday	1992	1993	-	Oct	lastSun	2:00s	1:00	-
+Rule	Holiday	1993	1994	-	Mar	Sun>=1	2:00s	0	-
+Zone Australia/Brisbane	10:12:08 -	LMT	1895
+			10:00	Aus	EST	1971
+			10:00	AQ	EST
+Zone Australia/Lindeman  9:55:56 -	LMT	1895
+			10:00	Aus	EST	1971
+			10:00	AQ	EST	1992 Jul
+			10:00	Holiday	EST
+
+# South Australia
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	AS	1971	1985	-	Oct	lastSun	2:00s	1:00	-
+Rule	AS	1986	only	-	Oct	19	2:00s	1:00	-
+Rule	AS	1987	max	-	Oct	lastSun	2:00s	1:00	-
+Rule	AS	1972	only	-	Feb	27	2:00s	0	-
+Rule	AS	1973	1985	-	Mar	Sun>=1	2:00s	0	-
+Rule	AS	1986	1989	-	Mar	Sun>=15	2:00s	0	-
+Rule	AS	1990	only	-	Mar	Sun>=18	2:00s	0	-
+Rule	AS	1991	only	-	Mar	Sun>=1	2:00s	0	-
+Rule	AS	1992	only	-	Mar	Sun>=18	2:00s	0	-
+Rule	AS	1993	only	-	Mar	Sun>=1	2:00s	0	-
+Rule	AS	1994	only	-	Mar	Sun>=18	2:00s	0	-
+Rule	AS	1995	2005	-	Mar	lastSun	2:00s	0	-
+Rule	AS	2006	only	-	Apr	Sun>=1	2:00s	0	-
+Rule	AS	2007	max	-	Mar	lastSun	2:00s	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Australia/Adelaide	9:14:20 -	LMT	1895 Feb
+			9:00	-	CST	1899 May
+			9:30	Aus	CST	1971
+			9:30	AS	CST
+
+# Tasmania
+#
+# From Paul Eggert (2005-08-16):
+# <http://www.bom.gov.au/climate/averages/tables/dst_times.shtml>
+# says King Island didn't observe DST from WWII until late 1971.
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	AT	1967	only	-	Oct	Sun>=1	2:00s	1:00	-
+Rule	AT	1968	only	-	Mar	lastSun	2:00s	0	-
+Rule	AT	1968	1985	-	Oct	lastSun	2:00s	1:00	-
+Rule	AT	1969	1971	-	Mar	Sun>=8	2:00s	0	-
+Rule	AT	1972	only	-	Feb	lastSun	2:00s	0	-
+Rule	AT	1973	1981	-	Mar	Sun>=1	2:00s	0	-
+Rule	AT	1982	1983	-	Mar	lastSun	2:00s	0	-
+Rule	AT	1984	1986	-	Mar	Sun>=1	2:00s	0	-
+Rule	AT	1986	only	-	Oct	Sun>=15	2:00s	1:00	-
+Rule	AT	1987	1990	-	Mar	Sun>=15	2:00s	0	-
+Rule	AT	1987	only	-	Oct	Sun>=22	2:00s	1:00	-
+Rule	AT	1988	1990	-	Oct	lastSun	2:00s	1:00	-
+Rule	AT	1991	1999	-	Oct	Sun>=1	2:00s	1:00	-
+Rule	AT	1991	2005	-	Mar	lastSun	2:00s	0	-
+Rule	AT	2000	only	-	Aug	lastSun	2:00s	1:00	-
+Rule	AT	2001	max	-	Oct	Sun>=1	2:00s	1:00	-
+Rule	AT	2006	only	-	Apr	Sun>=1	2:00s	0	-
+Rule	AT	2007	max	-	Mar	lastSun	2:00s	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Australia/Hobart	9:49:16	-	LMT	1895 Sep
+			10:00	-	EST	1916 Oct 1 2:00
+			10:00	1:00	EST	1917 Feb
+			10:00	Aus	EST	1967
+			10:00	AT	EST
+Zone Australia/Currie	9:35:28	-	LMT	1895 Sep
+			10:00	-	EST	1916 Oct 1 2:00
+			10:00	1:00	EST	1917 Feb
+			10:00	Aus	EST	1971 Jul
+			10:00	AT	EST
+
+# Victoria
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	AV	1971	1985	-	Oct	lastSun	2:00s	1:00	-
+Rule	AV	1972	only	-	Feb	lastSun	2:00s	0	-
+Rule	AV	1973	1985	-	Mar	Sun>=1	2:00s	0	-
+Rule	AV	1986	1990	-	Mar	Sun>=15	2:00s	0	-
+Rule	AV	1986	1987	-	Oct	Sun>=15	2:00s	1:00	-
+Rule	AV	1988	1999	-	Oct	lastSun	2:00s	1:00	-
+Rule	AV	1991	1994	-	Mar	Sun>=1	2:00s	0	-
+Rule	AV	1995	2005	-	Mar	lastSun	2:00s	0	-
+Rule	AV	2000	only	-	Aug	lastSun	2:00s	1:00	-
+Rule	AV	2001	max	-	Oct	lastSun	2:00s	1:00	-
+Rule	AV	2006	only	-	Apr	Sun>=1	2:00s	0	-
+Rule	AV	2007	max	-	Mar	lastSun	2:00s	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Australia/Melbourne 9:39:52 -	LMT	1895 Feb
+			10:00	Aus	EST	1971
+			10:00	AV	EST
+
+# New South Wales
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	AN	1971	1985	-	Oct	lastSun	2:00s	1:00	-
+Rule	AN	1972	only	-	Feb	27	2:00s	0	-
+Rule	AN	1973	1981	-	Mar	Sun>=1	2:00s	0	-
+Rule	AN	1982	only	-	Apr	Sun>=1	2:00s	0	-
+Rule	AN	1983	1985	-	Mar	Sun>=1	2:00s	0	-
+Rule	AN	1986	1989	-	Mar	Sun>=15	2:00s	0	-
+Rule	AN	1986	only	-	Oct	19	2:00s	1:00	-
+Rule	AN	1987	1999	-	Oct	lastSun	2:00s	1:00	-
+Rule	AN	1990	1995	-	Mar	Sun>=1	2:00s	0	-
+Rule	AN	1996	2005	-	Mar	lastSun	2:00s	0	-
+Rule	AN	2000	only	-	Aug	lastSun	2:00s	1:00	-
+Rule	AN	2001	max	-	Oct	lastSun	2:00s	1:00	-
+Rule	AN	2006	only	-	Apr	Sun>=1	2:00s	0	-
+Rule	AN	2007	max	-	Mar	lastSun	2:00s	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Australia/Sydney	10:04:52 -	LMT	1895 Feb
+			10:00	Aus	EST	1971
+			10:00	AN	EST
+Zone Australia/Broken_Hill 9:25:48 -	LMT	1895 Feb
+			10:00	-	EST	1896 Aug 23
+			9:00	-	CST	1899 May
+			9:30	Aus	CST	1971
+			9:30	AN	CST	2000
+			9:30	AS	CST
+
+# Lord Howe Island
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	LH	1981	1984	-	Oct	lastSun	2:00	1:00	-
+Rule	LH	1982	1985	-	Mar	Sun>=1	2:00	0	-
+Rule	LH	1985	only	-	Oct	lastSun	2:00	0:30	-
+Rule	LH	1986	1989	-	Mar	Sun>=15	2:00	0	-
+Rule	LH	1986	only	-	Oct	19	2:00	0:30	-
+Rule	LH	1987	1999	-	Oct	lastSun	2:00	0:30	-
+Rule	LH	1990	1995	-	Mar	Sun>=1	2:00	0	-
+Rule	LH	1996	2005	-	Mar	lastSun	2:00	0	-
+Rule	LH	2000	only	-	Aug	lastSun	2:00	0:30	-
+Rule	LH	2001	max	-	Oct	lastSun	2:00	0:30	-
+Rule	LH	2006	only	-	Apr	Sun>=1	2:00	0	-
+Rule	LH	2007	max	-	Mar	lastSun	2:00	0	-
+Zone Australia/Lord_Howe 10:36:20 -	LMT	1895 Feb
+			10:00	-	EST	1981 Mar
+			10:30	LH	LHST
+
+# Australian miscellany
+#
+# Ashmore Is, Cartier
+# no indigenous inhabitants; only seasonal caretakers
+# like Australia/Perth, says Turner
+#
+# Coral Sea Is
+# no indigenous inhabitants; only meteorologists
+# no information
+#
+# Macquarie
+# permanent occupation (scientific station) since 1948;
+# sealing and penguin oil station operated 1888/1917
+# like Australia/Hobart, says Turner
+
+# Christmas
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Indian/Christmas	7:02:52 -	LMT	1895 Feb
+			7:00	-	CXT	# Christmas Island Time
+
+# Cook Is
+# From Shanks:
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Cook	1978	only	-	Nov	12	0:00	0:30	HS
+Rule	Cook	1979	1991	-	Mar	Sun>=1	0:00	0	-
+Rule	Cook	1979	1990	-	Oct	lastSun	0:00	0:30	HS
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Pacific/Rarotonga	-10:39:04 -	LMT	1901		# Avarua
+			-10:30	-	CKT	1978 Nov 12	# Cook Is Time
+			-10:00	Cook	CK%sT
+
+# Cocos
+# These islands were ruled by the Ross family from about 1830 to 1978.
+# We don't know when standard time was introduced; for now, we guess 1900.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Indian/Cocos	6:27:40	-	LMT	1900
+			6:30	-	CCT	# Cocos Islands Time
+
+# Fiji
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Fiji	1998	1999	-	Nov	Sun>=1	2:00	1:00	S
+Rule	Fiji	1999	2000	-	Feb	lastSun	3:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Pacific/Fiji	11:53:40 -	LMT	1915 Oct 26	# Suva
+			12:00	Fiji	FJ%sT	# Fiji Time
+
+# French Polynesia
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Pacific/Gambier	 -8:59:48 -	LMT	1912 Oct	# Rikitea
+			 -9:00	-	GAMT	# Gambier Time
+Zone	Pacific/Marquesas -9:18:00 -	LMT	1912 Oct
+			 -9:30	-	MART	# Marquesas Time
+Zone	Pacific/Tahiti	 -9:58:16 -	LMT	1912 Oct	# Papeete
+			-10:00	-	TAHT	# Tahiti Time
+# Clipperton (near North America) is administered from French Polynesia;
+# it is uninhabited.
+
+# Guam
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Pacific/Guam	-14:21:00 -	LMT	1844 Dec 31
+			 9:39:00 -	LMT	1901		# Agana
+			10:00	-	GST	2000 Dec 23	# Guam
+			10:00	-	ChST	# Chamorro Standard Time
+
+# Kiribati
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Pacific/Tarawa	 11:32:04 -	LMT	1901		# Bairiki
+			 12:00	-	GILT		 # Gilbert Is Time
+Zone Pacific/Enderbury	-11:24:20 -	LMT	1901
+			-12:00	-	PHOT	1979 Oct # Phoenix Is Time
+			-11:00	-	PHOT	1995
+			 13:00	-	PHOT
+Zone Pacific/Kiritimati	-10:29:20 -	LMT	1901
+			-10:40	-	LINT	1979 Oct # Line Is Time
+			-10:00	-	LINT	1995
+			 14:00	-	LINT
+
+# N Mariana Is
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Pacific/Saipan	-14:17:00 -	LMT	1844 Dec 31
+			 9:43:00 -	LMT	1901
+			 9:00	-	MPT	1969 Oct # N Mariana Is Time
+			10:00	-	MPT	2000 Dec 23
+			10:00	-	ChST	# Chamorro Standard Time
+
+# Marshall Is
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Pacific/Majuro	11:24:48 -	LMT	1901
+			11:00	-	MHT	1969 Oct # Marshall Islands Time
+			12:00	-	MHT
+Zone Pacific/Kwajalein	11:09:20 -	LMT	1901
+			11:00	-	MHT	1969 Oct
+			-12:00	-	KWAT	1993 Aug 20	# Kwajalein Time
+			12:00	-	MHT
+
+# Micronesia
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Pacific/Truk	10:07:08 -	LMT	1901
+			10:00	-	TRUT			# Truk Time
+Zone Pacific/Ponape	10:32:52 -	LMT	1901		# Kolonia
+			11:00	-	PONT			# Ponape Time
+Zone Pacific/Kosrae	10:51:56 -	LMT	1901
+			11:00	-	KOST	1969 Oct	# Kosrae Time
+			12:00	-	KOST	1999
+			11:00	-	KOST
+
+# Nauru
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Pacific/Nauru	11:07:40 -	LMT	1921 Jan 15	# Uaobe
+			11:30	-	NRT	1942 Mar 15	# Nauru Time
+			9:00	-	JST	1944 Aug 15
+			11:30	-	NRT	1979 May
+			12:00	-	NRT
+
+# New Caledonia
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	NC	1977	1978	-	Dec	Sun>=1	0:00	1:00	S
+Rule	NC	1978	1979	-	Feb	27	0:00	0	-
+Rule	NC	1996	only	-	Dec	 1	2:00s	1:00	S
+# Shanks says the following was at 2:00; go with IATA.
+Rule	NC	1997	only	-	Mar	 2	2:00s	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Pacific/Noumea	11:05:48 -	LMT	1912 Jan 13
+			11:00	NC	NC%sT
+
+
+###############################################################################
+
+# New Zealand
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	NZ	1927	only	-	Nov	 6	2:00	1:00	S
+Rule	NZ	1928	only	-	Mar	 4	2:00	0	M
+Rule	NZ	1928	1933	-	Oct	Sun>=8	2:00	0:30	S
+Rule	NZ	1929	1933	-	Mar	Sun>=15	2:00	0	M
+Rule	NZ	1934	1940	-	Apr	lastSun	2:00	0	M
+Rule	NZ	1934	1940	-	Sep	lastSun	2:00	0:30	S
+Rule	NZ	1946	only	-	Jan	 1	0:00	0	S
+# Since 1957 Chatham has been 45 minutes ahead of NZ, but there's no
+# convenient notation for this so we must duplicate the Rule lines.
+Rule	NZ	1974	only	-	Nov	Sun>=1	2:00s	1:00	D
+Rule	Chatham	1974	only	-	Nov	Sun>=1	2:45s	1:00	D
+Rule	NZ	1975	only	-	Feb	lastSun	2:00s	0	S
+Rule	Chatham	1975	only	-	Feb	lastSun	2:45s	0	S
+Rule	NZ	1975	1988	-	Oct	lastSun	2:00s	1:00	D
+Rule	Chatham	1975	1988	-	Oct	lastSun	2:45s	1:00	D
+Rule	NZ	1976	1989	-	Mar	Sun>=1	2:00s	0	S
+Rule	Chatham	1976	1989	-	Mar	Sun>=1	2:45s	0	S
+Rule	NZ	1989	only	-	Oct	Sun>=8	2:00s	1:00	D
+Rule	Chatham	1989	only	-	Oct	Sun>=8	2:45s	1:00	D
+Rule	NZ	1990	max	-	Oct	Sun>=1	2:00s	1:00	D
+Rule	Chatham	1990	max	-	Oct	Sun>=1	2:45s	1:00	D
+Rule	NZ	1990	max	-	Mar	Sun>=15	2:00s	0	S
+Rule	Chatham	1990	max	-	Mar	Sun>=15	2:45s	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Pacific/Auckland	11:39:04 -	LMT	1868 Nov  2
+			11:30	NZ	NZ%sT	1946 Jan  1
+			12:00	NZ	NZ%sT
+Zone Pacific/Chatham	12:13:48 -	LMT	1957 Jan  1
+			12:45	Chatham	CHA%sT
+
+
+# Auckland Is
+# uninhabited; Maori and Moriori, colonial settlers, pastoralists, sealers,
+# and scientific personnel have wintered
+
+# Campbell I
+# minor whaling stations operated 1909/1914
+# scientific station operated 1941/1995;
+# previously whalers, sealers, pastoralists, and scientific personnel wintered
+# was probably like Pacific/Auckland
+
+###############################################################################
+
+
+# Niue
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Pacific/Niue	-11:19:40 -	LMT	1901		# Alofi
+			-11:20	-	NUT	1951	# Niue Time
+			-11:30	-	NUT	1978 Oct 1
+			-11:00	-	NUT
+
+# Norfolk
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Pacific/Norfolk	11:11:52 -	LMT	1901		# Kingston
+			11:12	-	NMT	1951	# Norfolk Mean Time
+			11:30	-	NFT		# Norfolk Time
+
+# Palau (Belau)
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Pacific/Palau	8:57:56 -	LMT	1901		# Koror
+			9:00	-	PWT	# Palau Time
+
+# Papua New Guinea
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Pacific/Port_Moresby 9:48:40 -	LMT	1880
+			9:48:32	-	PMMT	1895	# Port Moresby Mean Time
+			10:00	-	PGT		# Papua New Guinea Time
+
+# Pitcairn
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Pacific/Pitcairn	-8:40:20 -	LMT	1901		# Adamstown
+			-8:30	-	PNT	1998 Apr 27 00:00
+			-8:00	-	PST	# Pitcairn Standard Time
+
+# American Samoa
+Zone Pacific/Pago_Pago	 12:37:12 -	LMT	1879 Jul  5
+			-11:22:48 -	LMT	1911
+			-11:30	-	SAMT	1950		# Samoa Time
+			-11:00	-	NST	1967 Apr	# N=Nome
+			-11:00	-	BST	1983 Nov 30	# B=Bering
+			-11:00	-	SST			# S=Samoa
+
+# Samoa
+Zone Pacific/Apia	 12:33:04 -	LMT	1879 Jul  5
+			-11:26:56 -	LMT	1911
+			-11:30	-	SAMT	1950		# Samoa Time
+			-11:00	-	WST			# Samoa Time
+
+# Solomon Is
+# excludes Bougainville, for which see Papua New Guinea
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Pacific/Guadalcanal 10:39:48 -	LMT	1912 Oct	# Honiara
+			11:00	-	SBT	# Solomon Is Time
+
+# Tokelau Is
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Pacific/Fakaofo	-11:24:56 -	LMT	1901
+			-10:00	-	TKT	# Tokelau Time
+
+# Tonga
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Tonga	1999	only	-	Oct	 7	2:00s	1:00	S
+Rule	Tonga	2000	only	-	Mar	19	2:00s	0	-
+Rule	Tonga	2000	2001	-	Nov	Sun>=1	2:00	1:00	S
+Rule	Tonga	2001	2002	-	Jan	lastSun	2:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Pacific/Tongatapu	12:19:20 -	LMT	1901
+			12:20	-	TOT	1941 # Tonga Time
+			13:00	-	TOT	1999
+			13:00	Tonga	TO%sT
+
+# Tuvalu
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Pacific/Funafuti	11:56:52 -	LMT	1901
+			12:00	-	TVT	# Tuvalu Time
+
+
+# US minor outlying islands
+
+# Howland, Baker
+# uninhabited since World War II
+# no information; was probably like Pacific/Pago_Pago
+
+# Jarvis
+# uninhabited since 1958
+# no information; was probably like Pacific/Kiritimati
+
+# Johnston
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Pacific/Johnston	-10:00	-	HST
+
+# Kingman
+# uninhabited
+
+# Midway
+#
+# From Mark Brader (2005-01-23):
+# [Fallacies and Fantasies of Air Transport History, by R.E.G. Davies,
+# published 1994 by Paladwr Press, McLean, VA, USA; ISBN 0-9626483-5-3]
+# reproduced a Pan American Airways timeables from 1936, for their weekly
+# "Orient Express" flights between San Francisco and Manila, and connecting
+# flights to Chicago and the US East Coast.  As it uses some time zone
+# designations that I've never seen before:....
+# Fri. 6:30A Lv. HONOLOLU (Pearl Harbor), H.I.   H.L.T. Ar. 5:30P Sun.
+#  "   3:00P Ar. MIDWAY ISLAND . . . . . . . . . M.L.T. Lv. 6:00A  "
+#
+Zone Pacific/Midway	-11:49:28 -	LMT	1901
+			-11:00	-	NST	1956 Jun  3
+			-11:00	1:00	NDT	1956 Sep  2
+			-11:00	-	NST	1967 Apr	# N=Nome
+			-11:00	-	BST	1983 Nov 30	# B=Bering
+			-11:00	-	SST			# S=Samoa
+
+# Palmyra
+# uninhabited since World War II; was probably like Pacific/Kiritimati
+
+# Wake
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Pacific/Wake	11:06:28 -	LMT	1901
+			12:00	-	WAKT	# Wake Time
+
+
+# Vanuatu
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Vanuatu	1983	only	-	Sep	25	0:00	1:00	S
+Rule	Vanuatu	1984	1991	-	Mar	Sun>=23	0:00	0	-
+Rule	Vanuatu	1984	only	-	Oct	23	0:00	1:00	S
+Rule	Vanuatu	1985	1991	-	Sep	Sun>=23	0:00	1:00	S
+Rule	Vanuatu	1992	1993	-	Jan	Sun>=23	0:00	0	-
+Rule	Vanuatu	1992	only	-	Oct	Sun>=23	0:00	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Pacific/Efate	11:13:16 -	LMT	1912 Jan 13		# Vila
+			11:00	Vanuatu	VU%sT	# Vanuatu Time
+
+# Wallis and Futuna
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Pacific/Wallis	12:15:20 -	LMT	1901
+			12:00	-	WFT	# Wallis & Futuna Time
+
+###############################################################################
+
+# NOTES
+
+# This data is by no means authoritative; if you think you know better,
+# go ahead and edit the file (and please send any changes to
+# tz@elsie.nci.nih.gov for general use in the future).
+
+# From Paul Eggert (1999-10-29):
+# A good source for time zone historical data outside the U.S. is
+# Thomas G. Shanks, The International Atlas (5th edition),
+# San Diego: ACS Publications, Inc. (1999).
+#
+# Gwillim Law writes that a good source
+# for recent time zone data is the International Air Transport
+# Association's Standard Schedules Information Manual (IATA SSIM),
+# published semiannually.  Law sent in several helpful summaries
+# of the IATA's data after 1990.
+#
+# Except where otherwise noted, Shanks is the source for entries through 1990,
+# and IATA SSIM is the source for entries after 1990.
+#
+# Another source occasionally used is Edward W. Whitman, World Time Differences,
+# Whitman Publishing Co, 2 Niagara Av, Ealing, London (undated), which
+# I found in the UCLA library.
+#
+# A reliable and entertaining source about time zones is
+# Derek Howse, Greenwich time and longitude, Philip Wilson Publishers (1997).
+#
+# I invented the abbreviations marked `*' in the following table;
+# the rest are from earlier versions of this file, or from other sources.
+# Corrections are welcome!
+#		std dst
+#		LMT	Local Mean Time
+#	  8:00	WST WST	Western Australia
+#	  9:00	JST	Japan
+#	  9:30	CST CST	Central Australia
+#	 10:00	EST EST	Eastern Australia
+#	 10:00	ChST	Chamorro
+#	 10:30	LHST LHST Lord Howe*
+#	 11:30	NZMT NZST New Zealand through 1945
+#	 12:00	NZST NZDT New Zealand 1946-present
+#	 12:45	CHAST CHADT Chatham*
+#	-11:00	SST	Samoa
+#	-10:00	HST	Hawaii
+#	- 8:00	PST	Pitcairn*
+#
+# See the `northamerica' file for Hawaii.
+# See the `southamerica' file for Easter I and the Galapagos Is.
+
+###############################################################################
+
+# Australia
+
+# <a href="http://www.dstc.qut.edu.au/DST/marg/daylight.html">
+# Australia's Daylight Saving Times
+# </a>, by Margaret Turner, summarizes daylight saving issues in Australia.
+
+# From John Mackin (1991-03-06):
+# We in Australia have _never_ referred to DST as `daylight' time.
+# It is called `summer' time.  Now by a happy coincidence, `summer'
+# and `standard' happen to start with the same letter; hence, the
+# abbreviation does _not_ change...
+# The legislation does not actually define abbreviations, at least
+# in this State, but the abbreviation is just commonly taken to be the
+# initials of the phrase, and the legislation here uniformly uses
+# the phrase `summer time' and does not use the phrase `daylight
+# time'.
+# Announcers on the Commonwealth radio network, the ABC (for Australian
+# Broadcasting Commission), use the phrases `Eastern Standard Time'
+# or `Eastern Summer Time'.  (Note, though, that as I say in the
+# current australasia file, there is really no such thing.)  Announcers
+# on its overseas service, Radio Australia, use the same phrases
+# prefixed by the word `Australian' when referring to local times;
+# time announcements on that service, naturally enough, are made in UTC.
+
+# From Arthur David Olson (1992-03-08):
+# Given the above, what's chosen for year-round use is:
+#	CST	for any place operating at a GMTOFF of 9:30
+#	WST	for any place operating at a GMTOFF of 8:00
+#	EST	for any place operating at a GMTOFF of 10:00
+
+# From Paul Eggert (2001-04-05), summarizing a long discussion about "EST"
+# versus "AEST" etc.:
+#
+# I see the following points of dispute:
+#
+# * How important are unique time zone abbreviations?
+#
+#   Here I tend to agree with the point (most recently made by Chris
+#   Newman) that unique abbreviations should not be essential for proper
+#   operation of software.  We have other instances of ambiguity
+#   (e.g. "IST" denoting both "Israel Standard Time" and "Indian
+#   Standard Time"), and they are not likely to go away any time soon.
+#   In the old days, some software mistakenly relied on unique
+#   abbreviations, but this is becoming less true with time, and I don't
+#   think it's that important to cater to such software these days.
+#
+#   On the other hand, there is another motivation for unambiguous
+#   abbreviations: it cuts down on human confusion.  This is
+#   particularly true for Australia, where "EST" can mean one thing for
+#   time T and a different thing for time T plus 1 second.
+#
+# * Does the relevant legislation indicate which abbreviations should be used?
+#
+#   Here I tend to think that things are a mess, just as they are in
+#   many other countries.  We Americans are currently disagreeing about
+#   which abbreviation to use for the newly legislated Chamorro Standard
+#   Time, for example.
+#
+#   Personally, I would prefer to use common practice; I would like to
+#   refer to legislation only for examples of common practice, or as a
+#   tiebreaker.
+#
+# * Do Australians more often use "Eastern Daylight Time" or "Eastern
+#   Summer Time"?  Do they typically prefix the time zone names with
+#   the word "Australian"?
+#
+#   My own impression is that both "Daylight Time" and "Summer Time" are
+#   common and are widely understood, but that "Summer Time" is more
+#   popular; and that the leading "A" is also common but is omitted more
+#   often than not.  I just used AltaVista advanced search and got the
+#   following count of page hits:
+#
+#     1,103 "Eastern Summer Time" AND domain:au
+#       971 "Australian Eastern Summer Time" AND domain:au
+#       613 "Eastern Daylight Time" AND domain:au
+#       127 "Australian Eastern Daylight Time" AND domain:au
+#
+#   Here "Summer" seems quite a bit more popular than "Daylight",
+#   particularly when we know the time zone is Australian and not US,
+#   say.  The "Australian" prefix seems to be popular for Eastern Summer
+#   Time, but unpopular for Eastern Daylight Time.
+#
+#   For abbreviations, tools like AltaVista are less useful because of
+#   ambiguity.  Many hits are not really time zones, unfortunately, and
+#   many hits denote US time zones and not Australian ones.  But here
+#   are the hit counts anyway:
+#
+#     161,304 "EST" and domain:au
+#      25,156 "EDT" and domain:au
+#      18,263 "AEST" and domain:au
+#      10,416 "AEDT" and domain:au
+#
+#      14,538 "CST" and domain:au
+#       5,728 "CDT" and domain:au
+#         176 "ACST" and domain:au
+#          29 "ACDT" and domain:au
+#
+#       7,539 "WST" and domain:au
+#          68 "AWST" and domain:au
+#
+#   This data suggest that Australians tend to omit the "A" prefix in
+#   practice.  The situation for "ST" versus "DT" is less clear, given
+#   the ambiguities involved.
+#
+# * How do Australians feel about the abbreviations in the tz database?
+#
+#   If you just count Australians on this list, I count 2 in favor and 3
+#   against.  One of the "against" votes (David Keegel) counseled delay,
+#   saying that both AEST/AEDT and EST/EST are widely used and
+#   understood in Australia.
+
+# From Paul Eggert (1995-12-19):
+# Shanks reports 2:00 for all autumn changes in Australia and New Zealand.
+# Mark Prior writes that his newspaper
+# reports that NSW's fall 1995 change will occur at 2:00,
+# but Robert Elz says it's been 3:00 in Victoria since 1970
+# and perhaps the newspaper's `2:00' is referring to standard time.
+# For now we'll continue to assume 2:00s for changes since 1960.
+
+# From Eric Ulevik (1998-01-05):
+#
+# Here are some URLs to Australian time legislation. These URLs are stable,
+# and should probably be included in the data file. There are probably more
+# relevant entries in this database.
+#
+# NSW (including LHI and Broken Hill):
+# <a href="http://www.austlii.edu.au/au/legis/nsw/consol_act/sta1987137/index.html">
+# Standard Time Act 1987 (updated 1995-04-04)
+# </a>
+# ACT
+# <a href="http://www.austlii.edu.au/au/legis/act/consol_act/stasta1972279/index.html">
+# Standard Time and Summer Time Act 1972
+# </a>
+# SA
+# <a href="http://www.austlii.edu.au/au/legis/sa/consol_act/sta1898137/index.html">
+# Standard Time Act, 1898
+# </a>
+
+# From David Grosz (2005-06-13):
+# It was announced last week that Daylight Saving would be extended by
+# one week next year to allow for the 2006 Commonwealth Games.
+# Daylight Saving is now to end for next year only on the first Sunday
+# in April instead of the last Sunday in March.
+#
+# From Gwillim Law (2005-06-14):
+# I did some Googling and found that all of those states (and territory) plan
+# to extend DST together in 2006.
+# ACT: http://www.cmd.act.gov.au/mediareleases/fileread.cfm?file=86.txt
+# New South Wales: http://www.thecouriermail.news.com.au/common/story_page/0,5936,15538869%255E1702,00.html
+# South Australia: http://www.news.com.au/story/0,10117,15555031-1246,00.html
+# Tasmania: http://www.media.tas.gov.au/release.php?id=14772
+# Victoria: I wasn't able to find anything separate, but the other articles
+# allude to it.
+# But not Queensland
+# http://www.news.com.au/story/0,10117,15564030-1248,00.html.
+
+# Northern Territory
+
+# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
+# # The NORTHERN TERRITORY..  [ Courtesy N.T. Dept of the Chief Minister ]
+# #					[ Nov 1990 ]
+# #	N.T. have never utilised any DST due to sub-tropical/tropical location.
+# ...
+# Zone        Australia/North         9:30    -       CST
+
+# From Bradley White (1991-03-04):
+# A recent excerpt from an Australian newspaper...
+# the Northern Territory do[es] not have daylight saving.
+
+# Western Australia
+
+# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
+# #  The state of WESTERN AUSTRALIA..  [ Courtesy W.A. dept Premier+Cabinet ]
+# #						[ Nov 1990 ]
+# #	W.A. suffers from a great deal of public and political opposition to
+# #	DST in principle. A bill is brought before parliament in most years, but
+# #	usually defeated either in the upper house, or in party caucus
+# #	before reaching parliament.
+# ...
+# Zone	Australia/West		8:00	AW	%sST
+# ...
+# Rule	AW	1974	only	-	Oct	lastSun	2:00	1:00	D
+# Rule	AW	1975	only	-	Mar	Sun>=1	3:00	0	W
+# Rule	AW	1983	only	-	Oct	lastSun	2:00	1:00	D
+# Rule	AW	1984	only	-	Mar	Sun>=1	3:00	0	W
+
+# From Bradley White (1991-03-04):
+# A recent excerpt from an Australian newspaper...
+# Western Australia...do[es] not have daylight saving.
+
+# From John D. Newman via Bradley White (1991-11-02):
+# Western Australia is still on "winter time". Some DH in Sydney
+# rang me at home a few days ago at 6.00am. (He had just arrived at
+# work at 9.00am.)
+# W.A. is switching to Summer Time on Nov 17th just to confuse
+# everybody again.
+
+# From Arthur David Olson (1992-03-08):
+# The 1992 ending date used in the rules is a best guess;
+# it matches what was used in the past.
+
+# <a href="http://www.bom.gov.au/faq/faqgen.htm">
+# The Australian Bureau of Meteorology FAQ
+# </a> (1999-09-27) writes that Giles Meteorological Station uses
+# South Australian time even though it's located in Western Australia.
+
+# Queensland
+# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
+# #   The state of QUEENSLAND.. [ Courtesy Qld. Dept Premier Econ&Trade Devel ]
+# #						[ Dec 1990 ]
+# ...
+# Zone	Australia/Queensland	10:00	AQ	%sST
+# ...
+# Rule	AQ	1971	only	-	Oct	lastSun	2:00	1:00	D
+# Rule	AQ	1972	only	-	Feb	lastSun	3:00	0	E
+# Rule	AQ	1989	max	-	Oct	lastSun	2:00	1:00	D
+# Rule	AQ	1990	max	-	Mar	Sun>=1	3:00	0	E
+
+# From Bradley White (1989-12-24):
+# "Australia/Queensland" now observes daylight time (i.e. from
+# October 1989).
+
+# From Bradley White (1991-03-04):
+# A recent excerpt from an Australian newspaper...
+# ...Queensland...[has] agreed to end daylight saving
+# at 3am tomorrow (March 3)...
+
+# From John Mackin (1991-03-06):
+# I can certainly confirm for my part that Daylight Saving in NSW did in fact
+# end on Sunday, 3 March.  I don't know at what hour, though.  (It surprised
+# me.)
+
+# From Bradley White (1992-03-08):
+# ...there was recently a referendum in Queensland which resulted
+# in the experimental daylight saving system being abandoned. So, ...
+# ...
+# Rule	QLD	1989	1991	-	Oct	lastSun	2:00	1:00	D
+# Rule	QLD	1990	1992	-	Mar	Sun>=1	3:00	0	S
+# ...
+
+# From Arthur David Olson (1992-03-08):
+# The chosen rules the union of the 1971/1972 change and the 1989-1992 changes.
+
+# From Rives McDow (2002-04-09):
+# The most interesting region I have found consists of three towns on the
+# southern coast of Australia, population 10 at last report, along with
+# 50,000 sheep, about 100 kilometers long and 40 kilometers into the
+# continent.  The primary town is Madura, with the other towns being
+# Mundrabilla and Eucla.  According to the sheriff of Madura, the
+# residents got tired of having to change the time so often, as they are
+# located in a strip overlapping the border of South Australia and Western
+# Australia.  South Australia observes daylight saving time; Western
+# Australia does not.  The two states are one and a half hours apart.  The
+# residents decided to forget about this nonsense of changing the clock so
+# much and set the local time 20 hours and 45 minutes from the
+# international date line, or right in the middle of the time of South
+# Australia and Western Australia.  As it only affects about 10 people and
+# tourists staying at the Madura Motel, it has never really made as big an
+# impact as Broken Hill.  However, as tourist visiting there or anyone
+# calling the local sheriff will attest, they do keep time in this way.
+#
+# From Paul Eggert (2002-04-09):
+# This is confirmed by the section entitled
+# "What's the deal with time zones???" in
+# <http://www.earthsci.unimelb.edu.au/~awatkins/null.html>,
+# which says a few other things:
+#
+# * Border Village, SA also is 45 minutes ahead of Perth.
+# * The locals call this time zone "central W.A. Time" (presumably "CWAT").
+# * The locals also call Western Australia time "Perth time".
+#
+# It's not clear from context whether everyone in Western Australia
+# knows of this naming convention, or whether it's just the people in
+# this subregion.
+
+# South Australia, Tasmania, Victoria
+
+# From Arthur David Olson (1992-03-08):
+# The rules from version 7.1 follow.
+# There are lots of differences between these rules and
+# the Shepherd et al. rules.  Since the Shepherd et al. rules
+# and Bradley White's newspaper article are in agreement on
+# current DST ending dates, no worries.
+#
+# Rule	Oz	1971	1985	-	Oct	lastSun	2:00	1:00	-
+# Rule	Oz	1986	max	-	Oct	Sun<=24	2:00	1:00	-
+# Rule	Oz	1972	only	-	Feb	27	3:00	0	-
+# Rule	Oz	1973	1986	-	Mar	Sun>=1	3:00	0	-
+# Rule	Oz	1987	max	-	Mar	Sun<=21	3:00	0	-
+# Zone	Australia/Tasmania	10:00	Oz	EST
+# Zone	Australia/South		9:30	Oz	CST
+# Zone	Australia/Victoria	10:00	Oz	EST	1985 Oct lastSun 2:00
+#				10:00	1:00	EST	1986 Mar Sun<=21 3:00
+#				10:00	Oz	EST
+
+# From Robert Elz (1991-03-06):
+# I believe that the current start date for DST is "lastSun" in Oct...
+# that changed Oct 89.  That is, we're back to the
+# original rule, and that rule currently applies in all the states
+# that have dst, incl Qld.  (Certainly it was true in Vic).
+# The file I'm including says that happened in 1988, I think
+# that's incorrect, but I'm not 100% certain.
+
+# South Australia
+
+# From Bradley White (1991-03-04):
+# A recent excerpt from an Australian newspaper...
+# ...South Australia...[has] agreed to end daylight saving
+# at 3am tomorrow (March 3)...
+
+# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
+# #   The state of SOUTH AUSTRALIA....[ Courtesy of S.A. Dept of Labour ]
+# #						[ Nov 1990 ]
+# ...
+# Zone	Australia/South		9:30	AS	%sST
+# ...
+# Rule	 AS	1971	max	-	Oct	lastSun	2:00	1:00	D
+# Rule	 AS	1972	1985	-	Mar	Sun>=1	3:00	0	C
+# Rule	 AS	1986	1990	-	Mar	Sun<=21	3:00	0	C
+# Rule	 AS	1991	max	-	Mar	Sun>=1	3:00	0	C
+
+# From Bradley White (1992-03-11):
+# Recent correspondence with a friend in Adelaide
+# contained the following exchange:  "Due to the Adelaide Festival,
+# South Australia delays setting back our clocks for a few weeks."
+
+# From Robert Elz (1992-03-13):
+# I heard that apparently (or at least, it appears that)
+# South Aus will have an extra 3 weeks daylight saving every even
+# numbered year (from 1990).  That's when the Adelaide Festival
+# is on...
+
+# From Robert Elz (1992-03-16, 00:57:07 +1000):
+# DST didn't end in Adelaide today (yesterday)....
+# But whether it's "4th Sunday" or "2nd last Sunday" I have no idea whatever...
+# (it's just as likely to be "the Sunday we pick for this year"...).
+
+# From Bradley White (1994-04-11):
+# If Sun, 15 March, 1992 was at +1030 as kre asserts, but yet Sun, 20 March,
+# 1994 was at +0930 as John Connolly's customer seems to assert, then I can
+# only conclude that the actual rule is more complicated....
+
+# From John Warburton (1994-10-07):
+# The new Daylight Savings dates for South Australia ...
+# was gazetted in the Government Hansard on Sep 26 1994....
+# start on last Sunday in October and end in last sunday in March.
+
+# Tasmania
+
+# The rules for 1967 through 1991 were reported by George Shepherd
+# via Simon Woodhead via Robert Elz (1991-03-06):
+# #  The state of TASMANIA.. [Courtesy Tasmanian Dept of Premier + Cabinet ]
+# #					[ Nov 1990 ]
+
+# From Bill Hart via Guy Harris (1991-10-10):
+# Oh yes, the new daylight savings rules are uniquely tasmanian, we have
+# 6 weeks a year now when we are out of sync with the rest of Australia
+# (but nothing new about that).
+
+# From Alex Livingston (1999-10-04):
+# I heard on the ABC (Australian Broadcasting Corporation) radio news on the
+# (long) weekend that Tasmania, which usually goes its own way in this regard,
+# has decided to join with most of NSW, the ACT, and most of Victoria
+# (Australia) and start daylight saving on the last Sunday in August in 2000
+# instead of the first Sunday in October.
+
+# Sim Alam (2000-07-03) reported a legal citation for the 2000/2001 rules:
+# http://www.thelaw.tas.gov.au/fragview/42++1968+GS3A@EN+2000070300
+
+# Victoria
+
+# The rules for 1971 through 1991 were reported by George Shepherd
+# via Simon Woodhead via Robert Elz (1991-03-06):
+# #   The state of VICTORIA.. [ Courtesy of Vic. Dept of Premier + Cabinet ]
+# #						[ Nov 1990 ]
+
+# From Scott Harrington (2001-08-29):
+# On KQED's "City Arts and Lectures" program last night I heard an
+# interesting story about daylight savings time.  Dr. John Heilbron was
+# discussing his book "The Sun in the Church: Cathedrals as Solar
+# Observatories"[1], and in particular the Shrine of Remembrance[2] located
+# in Melbourne, Australia.
+#
+# Apparently the shrine's main purpose is a beam of sunlight which
+# illuminates a special spot on the floor at the 11th hour of the 11th day
+# of the 11th month (Remembrance Day) every year in memory of Australia's
+# fallen WWI soldiers.  And if you go there on Nov. 11, at 11am local time,
+# you will indeed see the sunbeam illuminate the special spot at the
+# expected time.
+#
+# However, that is only because of some special mirror contraption that had
+# to be employed, since due to daylight savings time, the true solar time of
+# the remembrance moment occurs one hour later (or earlier?).  Perhaps
+# someone with more information on this jury-rig can tell us more.
+#
+# [1] http://www.hup.harvard.edu/catalog/HEISUN.html
+# [2] http://www.shrine.org.au
+
+# New South Wales
+
+# From Arthur David Olson:
+# New South Wales and subjurisdictions have their own ideas of a fun time.
+# Based on law library research by John Mackin,
+# who notes:
+#	In Australia, time is not legislated federally, but rather by the
+#	individual states.  Thus, while such terms as ``Eastern Standard Time''
+#	[I mean, of course, Australian EST, not any other kind] are in common
+#	use, _they have NO REAL MEANING_, as they are not defined in the
+#	legislation.  This is very important to understand.
+#	I have researched New South Wales time only...
+
+# From Paul Eggert (1999-09-27):
+# The Information Service of the Australian National Standards Commission
+# <a href="http://www.nsc.gov.au/InfoServ/Ileaflet/il27.htm">
+# Daylight Saving
+# </a> page (1995-04) has an excellent overall history of Australian DST.
+# The Community Relations Division of the NSW Attorney General's Department
+# publishes a history of daylight saving in NSW.  See:
+# <a href="http://www.lawlink.nsw.gov.au/crd.nsf/pages/time2">
+# Lawlink NSW: Daylight Saving in New South Wales
+# </a>
+
+# From Eric Ulevik (1999-05-26):
+# DST will start in NSW on the last Sunday of August, rather than the usual
+# October in 2000.  [See: Matthew Moore,
+# <a href="http://www.smh.com.au/news/9905/26/pageone/pageone4.html">
+# Two months more daylight saving
+# </a>
+# Sydney Morning Herald (1999-05-26).]
+
+# From Paul Eggert (1999-09-27):
+# See the following official NSW source:
+# <a href="http://dir.gis.nsw.gov.au/cgi-bin/genobject/document/other/daylightsaving/tigGmZ">
+# Daylight Saving in New South Wales.
+# </a>
+#
+# Narrabri Shire (NSW) council has announced it will ignore the extension of
+# daylight saving next year.  See:
+# <a href="http://abc.net.au/news/regionals/neweng/monthly/regeng-22jul1999-1.htm">
+# Narrabri Council to ignore daylight saving
+# </a> (1999-07-22).  For now, we'll wait to see if this really happens.
+#
+# Victoria will following NSW.  See:
+# <a href="http://abc.net.au/local/news/olympics/1999/07/item19990728112314_1.htm">
+# Vic to extend daylight saving
+# </a> (1999-07-28).
+#
+# However, South Australia rejected the DST request.  See:
+# <a href="http://abc.net.au/news/olympics/1999/07/item19990719151754_1.htm">
+# South Australia rejects Olympics daylight savings request
+# </a> (1999-07-19).
+#
+# Queensland also will not observe DST for the Olympics.  See:
+# <a href="http://abc.net.au/news/olympics/1999/06/item19990601114608_1.htm">
+# Qld says no to daylight savings for Olympics
+# </a> (1999-06-01), which quotes Queensland Premier Peter Beattie as saying
+# ``Look you've got to remember in my family when this came up last time
+# I voted for it, my wife voted against it and she said to me it's all very
+# well for you, you don't have to worry about getting the children out of
+# bed, getting them to school, getting them to sleep at night.
+# I've been through all this argument domestically...my wife rules.''
+#
+# Broken Hill will stick with South Australian time in 2000.  See:
+# <a href="http://abc.net.au/news/regionals/brokenh/monthly/regbrok-21jul1999-6.htm">
+# Broken Hill to be behind the times
+# </a> (1999-07-21).
+
+# IATA SSIM (1998-09) says that the spring 2000 change for Australian
+# Capital Territory, New South Wales except Lord Howe Island and Broken
+# Hill, and Victoria will be August 27, presumably due to the Sydney Olympics.
+
+# From Eric Ulevik, referring to Sydney's Sun Herald (2000-08-13), page 29:
+# The Queensland Premier Peter Beattie is encouraging northern NSW
+# towns to use Queensland time.
+
+# Yancowinna
+
+# From John Mackin (1989-01-04):
+# `Broken Hill' means the County of Yancowinna.
+
+# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
+# # YANCOWINNA..  [ Confirmation courtesy of Broken Hill Postmaster ]
+# #					[ Dec 1990 ]
+# ...
+# # Yancowinna uses Central Standard Time, despite [its] location on the
+# # New South Wales side of the S.A. border. Most business and social dealings
+# # are with CST zones, therefore CST is legislated by local government
+# # although the switch to Summer Time occurs in line with N.S.W. There have
+# # been years when this did not apply, but the historical data is not
+# # presently available.
+# Zone	Australia/Yancowinna	9:30	 AY	%sST
+# ...
+# Rule	 AY	1971	1985	-	Oct	lastSun	2:00	1:00	D
+# Rule	 AY	1972	only	-	Feb	lastSun	3:00	0	C
+# [followed by other Rules]
+
+# Lord Howe Island
+
+# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
+# LHI...		[ Courtesy of Pauline Van Winsen.. pauline@Aus ]
+#					[ Dec 1990 ]
+# Lord Howe Island is located off the New South Wales coast, and is half an
+# hour ahead of NSW time.
+
+# From James Lonergan, Secretary, Lord Howe Island Board (2000-01-27):
+# Lord Howe Island summer time in 2000/2001 will commence on the same
+# date as the rest of NSW (i.e. 2000-08-27).  For your information the
+# Lord Howe Island Board (controlling authority for the Island) is
+# seeking the community's views on various options for summer time
+# arrangements on the Island, e.g. advance clocks by 1 full hour
+# instead of only 30 minutes.  Dependant on the wishes of residents
+# the Board may approach the NSW government to change the existing
+# arrangements.  The starting date for summer time on the Island will
+# however always coincide with the rest of NSW.
+
+# From James Lonergan, Secretary, Lord Howe Island Board (2000-10-25):
+# Lord Howe Island advances clocks by 30 minutes during DST in NSW and retards
+# clocks by 30 minutes when DST finishes. Since DST was most recently
+# introduced in NSW, the "changeover" time on the Island has been 02:00 as
+# shown on clocks on LHI. I guess this means that for 30 minutes at the start
+# of DST, LHI is actually 1 hour ahead of the rest of NSW.
+
+# From Paul Eggert (2001-02-09):
+# For Lord Howe dates we use Shanks through 1989, and Lonergan thereafter.
+# For times we use Lonergan.
+
+###############################################################################
+
+# New Zealand
+
+# From Mark Davies (1990-10-03):
+# the 1989/90 year was a trial of an extended "daylight saving" period.
+# This trial was deemed successful and the extended period adopted for
+# subsequent years (with the addition of a further week at the start).
+# source -- phone call to Ministry of Internal Affairs Head Office.
+
+# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
+# # The Country of New Zealand   (Australia's east island -) Gee they hate that!
+# #				   or is Australia the west island of N.Z.
+# #	[ courtesy of Geoff Tribble.. Geofft@Aus.. Auckland N.Z. ]
+# #				[ Nov 1990 ]
+# ...
+# Rule	NZ      1974    1988	-	Oct	lastSun	2:00	1:00	D
+# Rule	NZ	1989	max	-	Oct	Sun>=1	2:00	1:00	D
+# Rule	NZ      1975    1989	-	Mar	Sun>=1	3:00	0	S
+# Rule	NZ	1990	max	-	Mar	lastSun	3:00	0	S
+# ...
+# Zone	NZ			12:00	NZ		NZ%sT	# New Zealand
+# Zone	NZ-CHAT			12:45	-		NZ-CHAT # Chatham Island
+
+# From Arthur David Olson (1992-03-08):
+# The chosen rules use the Davies October 8 values for the start of DST in 1989
+# rather than the October 1 value.
+
+# From Paul Eggert (1995-12-19);
+# Shanks reports 2:00 for all autumn changes in Australia and New Zealand.
+# Robert Uzgalis writes that the New Zealand Daylight
+# Savings Time Order in Council dated 1990-06-18 specifies 2:00 standard
+# time on both the first Sunday in October and the third Sunday in March.
+# As with Australia, we'll assume the tradition is 2:00s, not 2:00.
+#
+# From Paul Eggert (2003-05-26):
+# The Department of Internal Affairs (DIA) maintains a brief history,
+# as does Carol Squires; see tz-link.htm for the full references.
+# Use these sources in preference to Shanks.
+#
+# For Chatham, IATA SSIM (1991/1999) gives the NZ rules but with
+# transitions at 2:45 local standard time; this confirms that Chatham
+# is always exactly 45 minutes ahead of Auckland.
+
+###############################################################################
+
+
+# Fiji
+
+# Howse writes (p 153) that in 1879 the British governor of Fiji
+# enacted an ordinance standardizing the islands on Antipodean Time
+# instead of the American system (which was one day behind).
+
+# From Rives McDow (1998-10-08):
+# Fiji will introduce DST effective 0200 local time, 1998-11-01
+# until 0300 local time 1999-02-28.  Each year the DST period will
+# be from the first Sunday in November until the last Sunday in February.
+
+# From Paul Eggert (2000-01-08):
+# IATA SSIM (1999-09) says DST ends 0100 local time.  Go with McDow.
+
+# From the BBC World Service (1998-10-31 11:32 UTC):
+# The Fijiian government says the main reasons for the time change is to
+# improve productivity and reduce road accidents.  But correspondents say it
+# also hopes the move will boost Fiji's ability to compete with other pacific
+# islands in the effort to attract tourists to witness the dawning of the new
+# millenium.
+
+# http://www.fiji.gov.fj/press/2000_09/2000_09_13-05.shtml (2000-09-13)
+# reports that Fiji has discontinued DST.
+
+# Johnston
+
+# Johnston data is from usno1995.
+
+
+# Kiribati
+
+# From Paul Eggert (1996-01-22):
+# Today's _Wall Street Journal_ (page 1) reports that Kiribati
+# ``declared it the same day throught the country as of Jan. 1, 1995''
+# as part of the competition to be first into the 21st century.
+
+
+# Kwajalein
+
+# In comp.risks 14.87 (26 August 1993), Peter Neumann writes:
+# I wonder what happened in Kwajalein, where there was NO Friday,
+# 1993-08-20.  Thursday night at midnight Kwajalein switched sides with
+# respect to the International Date Line, to rejoin its fellow islands,
+# going from 11:59 p.m. Thursday to 12:00 m. Saturday in a blink.
+
+
+# N Mariana Is, Guam
+
+# Howse writes (p 153) ``The Spaniards, on the other hand, reached the
+# Philippines and the Ladrones from America,'' and implies that the Ladrones
+# (now called the Marianas) kept American date for quite some time.
+# For now, we assume the Ladrones switched at the same time as the Philippines;
+# see Asia/Manila.
+
+# US Public Law 106-564 (2000-12-23) made UTC+10 the official standard time,
+# under the name "Chamorro Standard Time".  There is no official abbreviation,
+# but Congressman Robert A. Underwood, author of the bill that became law,
+# wrote in a press release (2000-12-27) that he will seek the use of "ChST".
+
+
+# Micronesia
+
+# Alan Eugene Davis writes (1996-03-16),
+# ``I am certain, having lived there for the past decade, that "Truk"
+# (now properly known as Chuuk) ... is in the time zone GMT+10.''
+#
+# Shanks writes that Truk switched from UTC+10 to UTC+11 on 1978-10-01;
+# ignore this for now.
+
+# From Paul Eggert (1999-10-29):
+# The Federated States of Micronesia Visitors Board writes in
+# <a href="http://www.fsmgov.org/info/clocks.html">
+# The Federated States of Micronesia - Visitor Information
+# </a> (1999-01-26)
+# that Truk and Yap are UTC+10, and Ponape and Kosrae are UTC+11.
+# We don't know when Kosrae switched from UTC+12; assume January 1 for now.
+
+
+# Midway
+
+# From Charles T O'Connor, KMTH DJ (1956),
+# quoted in the KTMH section of the Radio Heritage Collection
+# <http://radiodx.com/spdxr/KMTH.htm> (2002-12-31):
+# For the past two months we've been on what is known as Daylight
+# Saving Time.  This time has put us on air at 5am in the morning,
+# your time down there in New Zealand.  Starting September 2, 1956
+# we'll again go back to Standard Time.  This'll mean that we'll go to
+# air at 6am your time.
+#
+# From Paul Eggert (2003-03-23):
+# We don't know the date of that quote, but we'll guess they
+# started DST on June 3.  Possibly DST was observed other years
+# in Midway, but we have no record of it.
+
+
+# Pitcairn
+
+# From Rives McDow (1999-11-08):
+# A Proclamation was signed by the Governor of Pitcairn on the 27th March 1998
+# with regard to Pitcairn Standard Time.  The Proclamation is as follows.
+#
+#	The local time for general purposes in the Islands shall be
+#	Co-ordinated Universal time minus 8 hours and shall be known
+#	as Pitcairn Standard Time.
+#
+# ... I have also seen Pitcairn listed as UTC minus 9 hours in several
+# references, and can only assume that this was an error in interpretation
+# somehow in light of this proclamation.
+
+# From Rives McDow (1999-11-09):
+# The Proclamation regarding Pitcairn time came into effect on 27 April 1998
+# ... at midnight.
+
+# From Howie Phelps (1999-11-10), who talked to a Pitcairner via shortwave:
+# Betty Christian told me yesterday that their local time is the same as
+# Pacific Standard Time. They used to be 1/2 hour different from us here in
+# Sacramento but it was changed a couple of years ago.
+
+
+# Samoa
+
+# Howse writes (p 153, citing p 10 of the 1883-11-18 New York Herald)
+# that in 1879 the King of Samoa decided to change
+# ``the date in his kingdom from the Antipodean to the American system,
+# ordaining -- by a masterpiece of diplomatic flattery -- that
+# the Fourth of July should be celebrated twice in that year.''
+
+
+# Tonga
+
+# From Paul Eggert (1996-01-22):
+# Today's _Wall Street Journal_ (p 1) reports that ``Tonga has been plotting
+# to sneak ahead of [New Zealanders] by introducing daylight-saving time.''
+# Since Kiribati has moved the Date Line it's not clear what Tonga will do.
+
+# Don Mundell writes in the 1997-02-20 Tonga Chronicle
+# <a href="http://www.tongatapu.net.to/tonga/homeland/timebegins.htm">
+# How Tonga became `The Land where Time Begins'
+# </a>:
+
+# Until 1941 Tonga maintained a standard time 50 minutes ahead of NZST
+# 12 hours and 20 minutes ahead of GMT.  When New Zealand adjusted its
+# standard time in 1940s, Tonga had the choice of subtracting from its
+# local time to come on the same standard time as New Zealand or of
+# advancing its time to maintain the differential of 13 degrees
+# (approximately 50 minutes ahead of New Zealand time).
+#
+# Because His Majesty King Taufa'ahau Tupou IV, then Crown Prince
+# Tungi, preferred to ensure Tonga's title as the land where time
+# begins, the Legislative Assembly approved the latter change.
+#
+# But some of the older, more conservative members from the outer
+# islands objected. "If at midnight on Dec. 31, we move ahead 40
+# minutes, as your Royal Highness wishes, what becomes of the 40
+# minutes we have lost?"
+#
+# The Crown Prince, presented an unanswerable argument: "Remember that
+# on the World Day of Prayer, you would be the first people on Earth
+# to say your prayers in the morning."
+
+# From Paul Eggert (1999-08-12):
+# Shanks says the transition was on 1968-10-01; go with Mundell.
+
+# From Eric Ulevik (1999-05-03):
+# Tonga's director of tourism, who is also secretary of the National Millenium
+# Committee, has a plan to get Tonga back in front.
+# He has proposed a one-off move to tropical daylight saving for Tonga from
+# October to March, which has won approval in principle from the Tongan
+# Government.
+
+# From Steffen Thorsen (1999-09-09):
+# * Tonga will introduce DST in November
+#
+# I was given this link by John Letts:
+# <a hef="http://news.bbc.co.uk/hi/english/world/asia-pacific/newsid_424000/424764.stm">
+# http://news.bbc.co.uk/hi/english/world/asia-pacific/newsid_424000/424764.stm
+# </a>
+#
+# I have not been able to find exact dates for the transition in November
+# yet. By reading this article it seems like Fiji will be 14 hours ahead
+# of UTC as well, but as far as I know Fiji will only be 13 hours ahead
+# (12 + 1 hour DST).
+
+# From Arthur David Olson (1999-09-20):
+# According to <a href="http://www.tongaonline.com/news/sept1799.html>
+# http://www.tongaonline.com/news/sept1799.html
+# </a>:
+# "Daylight Savings Time will take effect on Oct. 2 through April 15, 2000
+# and annually thereafter from the first Saturday in October through the
+# third Saturday of April.  Under the system approved by Privy Council on
+# Sept. 10, clocks must be turned ahead one hour on the opening day and
+# set back an hour on the closing date."
+# Alas, no indication of the time of day.
+
+# From Rives McDow (1999-10-06):
+# Tonga started its Daylight Saving on Saturday morning October 2nd at 0200am.
+# Daylight Saving ends on April 16 at 0300am which is Sunday morning.
+
+# From Steffen Thorsen (2000-10-31):
+# Back in March I found a notice on the website http://www.tongaonline.com
+# that Tonga changed back to standard time one month early, on March 19
+# instead of the original reported date April 16. Unfortunately, the article
+# is no longer available on the site, and I did not make a copy of the
+# text, and I have forgotten to report it here.
+# (Original URL was: http://www.tongaonline.com/news/march162000.htm )
+
+# From Rives McDow (2000-12-01):
+# Tonga is observing DST as of 2000-11-04 and will stop on 2001-01-27.
+
+# From Sione Moala-Mafi (2001-09-20) via Rives McDow:
+# At 2:00am on the first Sunday of November, the standard time in the Kingdom
+# shall be moved forward by one hour to 3:00am.  At 2:00am on the last Sunday
+# of January the standard time in the Kingdom shall be moved backward by one
+# hour to 1:00am.
+
+# From Pulu 'Anau (2002-11-05):
+# The law was for 3 years, supposedly to get renewed.  It wasn't.
+
+
+# Wake
+
+# From Vernice Anderson, Personal Secretary to Philip Jessup,
+# US Ambassador At Large (oral history interview, 1971-02-02):
+#
+# Saturday, the 14th [of October, 1950] -- ...  The time was all the
+# more confusing at that point, because we had crossed the
+# International Date Line, thus getting two Sundays.  Furthermore, we
+# discovered that Wake Island had two hours of daylight saving time
+# making calculation of time in Washington difficult if not almost
+# impossible.
+#
+# http://www.trumanlibrary.org/wake/meeting.htm
+
+# From Paul Eggert (2003-03-23):
+# We have no other report of DST in Wake Island, so omit this info for now.
+
+###############################################################################
+
+# The International Date Line
+
+# From Gwillim Law (2000-01-03):
+#
+# The International Date Line is not defined by any international standard,
+# convention, or treaty.  Mapmakers are free to draw it as they please.
+# Reputable mapmakers will simply ensure that every point of land appears on
+# the correct side of the IDL, according to the date legally observed there.
+#
+# When Kiribati adopted a uniform date in 1995, thereby moving the Phoenix and
+# Line Islands to the west side of the IDL (or, if you prefer, moving the IDL
+# to the east side of the Phoenix and Line Islands), I suppose that most
+# mapmakers redrew the IDL following the boundary of Kiribati.  Even that line
+# has a rather arbitrary nature.  The straight-line boundaries between Pacific
+# island nations that are shown on many maps are based on an international
+# convention, but are not legally binding national borders.... The date is
+# governed by the IDL; therefore, even on the high seas, there may be some
+# places as late as fourteen hours later than UTC.  And, since the IDL is not
+# an international standard, there are some places on the high seas where the
+# correct date is ambiguous.
+
+# From Wikipedia <http://en.wikipedia.org/wiki/Time_zone> (2005-08-31):
+# Before 1920, all ships kept local apparent time on the high seas by setting
+# their clocks at night or at the morning sight so that, given the ship's
+# speed and direction, it would be 12 o'clock when the Sun crossed the ship's
+# meridian (12 o'clock = local apparent noon).  During 1917, at the
+# Anglo-French Conference on Time-keeping at Sea, it was recommended that all
+# ships, both military and civilian, should adopt hourly standard time zones
+# on the high seas.  Whenever a ship was within the territorial waters of any
+# nation it would use that nation's standard time.  The captain was permitted
+# to change his ship's clocks at a time of his choice following his ship's
+# entry into another zone time--he often chose midnight.  These zones were
+# adopted by all major fleets between 1920 and 1925 but not by many
+# independent merchant ships until World War II.
+
+# From Paul Eggert, using references suggested by Oscar van Vlijmen
+# (2005-03-20):
+#
+# The American Practical Navigator (2002)
+# <http://pollux.nss.nima.mil/pubs/pubs_j_apn_sections.html?rid=187>
+# talks only about the 180-degree meridian with respect to ships in
+# international waters; it ignores the international date line.
diff --git a/JodaTime/src/java/org/joda/time/tz/src/backward b/JodaTime/src/java/org/joda/time/tz/src/backward
index ca22dfeae..e34f405e1 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/backward
+++ b/JodaTime/src/java/org/joda/time/tz/src/backward
@@ -1,113 +1,113 @@
-# @(#)backward	7.29
-
-# This file provides links between current names for time zones
-# and their old names.  Many names changed in late 1993.
-
-Link	Africa/Bamako		Africa/Timbuktu
-Link	America/Argentina/Catamarca	America/Argentina/ComodRivadavia
-Link	America/Adak		America/Atka
-Link	America/Argentina/Buenos_Aires	America/Buenos_Aires
-Link	America/Argentina/Catamarca	America/Catamarca
-Link	America/Argentina/Cordoba	America/Cordoba
-Link	America/Tijuana		America/Ensenada
-Link	America/Indiana/Indianapolis	America/Fort_Wayne
-Link	America/Indiana/Indianapolis	America/Indianapolis
-Link	America/Argentina/Jujuy	America/Jujuy
-Link	America/Indiana/Knox	America/Knox_IN
-Link	America/Kentucky/Louisville	America/Louisville
-Link	America/Argentina/Mendoza	America/Mendoza
-Link	America/Rio_Branco	America/Porto_Acre
-Link	America/Argentina/Cordoba	America/Rosario
-Link	America/St_Thomas	America/Virgin
-Link	Asia/Ashgabat		Asia/Ashkhabad
-Link	Asia/Chongqing		Asia/Chungking
-Link	Asia/Dhaka		Asia/Dacca
-Link	Asia/Macau		Asia/Macao
-Link	Asia/Jerusalem		Asia/Tel_Aviv
-Link	Asia/Thimphu		Asia/Thimbu
-Link	Asia/Makassar		Asia/Ujung_Pandang
-Link	Asia/Ulaanbaatar	Asia/Ulan_Bator
-Link	Australia/Sydney	Australia/ACT
-Link	Australia/Sydney	Australia/Canberra
-Link	Australia/Lord_Howe	Australia/LHI
-Link	Australia/Sydney	Australia/NSW
-Link	Australia/Darwin	Australia/North
-Link	Australia/Brisbane	Australia/Queensland
-Link	Australia/Adelaide	Australia/South
-Link	Australia/Hobart	Australia/Tasmania
-Link	Australia/Melbourne	Australia/Victoria
-Link	Australia/Perth		Australia/West
-Link	Australia/Broken_Hill	Australia/Yancowinna
-Link	America/Rio_Branco	Brazil/Acre
-Link	America/Noronha		Brazil/DeNoronha
-Link	America/Sao_Paulo	Brazil/East
-Link	America/Manaus		Brazil/West
-Link	America/Chicago		CST6CDT
-Link	America/Halifax		Canada/Atlantic
-Link	America/Winnipeg	Canada/Central
-Link	America/Regina		Canada/East-Saskatchewan
-Link	America/Toronto		Canada/Eastern
-Link	America/Edmonton	Canada/Mountain
-Link	America/St_Johns	Canada/Newfoundland
-Link	America/Vancouver	Canada/Pacific
-Link	America/Regina		Canada/Saskatchewan
-Link	America/Whitehorse	Canada/Yukon
-Link	America/Santiago	Chile/Continental
-Link	Pacific/Easter		Chile/EasterIsland
-Link	America/Havana		Cuba
-Link	America/Panama		EST
-Link	America/New_York	EST5EDT
-Link	Africa/Cairo		Egypt
-Link	Europe/Dublin		Eire
-Link	Europe/London		Europe/Belfast
-Link	Europe/Chisinau		Europe/Tiraspol
-Link	Europe/London		GB
-Link	Europe/London		GB-Eire
-Link	Etc/GMT			GMT+0
-Link	Etc/GMT			GMT-0
-Link	Etc/GMT			GMT0
-Link	Etc/GMT			Greenwich
-Link	Pacific/Honolulu	HST
-Link	Asia/Hong_Kong		Hongkong
-Link	Atlantic/Reykjavik	Iceland
-Link	Asia/Tehran		Iran
-Link	Asia/Jerusalem		Israel
-Link	America/Jamaica		Jamaica
-Link	Asia/Tokyo		Japan
-Link	Pacific/Kwajalein	Kwajalein
-Link	Africa/Tripoli		Libya
-Link	America/Phoenix		MST
-Link	America/Denver		MST7MDT
-Link	America/Tijuana		Mexico/BajaNorte
-Link	America/Mazatlan	Mexico/BajaSur
-Link	America/Mexico_City	Mexico/General
-Link	Pacific/Auckland	NZ
-Link	Pacific/Chatham		NZ-CHAT
-Link	America/Denver		Navajo
-Link	Asia/Shanghai		PRC
-Link	America/Los_Angeles	PST8PDT
-Link	Pacific/Pago_Pago	Pacific/Samoa
-Link	Pacific/Truk		Pacific/Yap
-Link	Europe/Warsaw		Poland
-Link	Europe/Lisbon		Portugal
-Link	Asia/Taipei		ROC
-Link	Asia/Seoul		ROK
-Link	Asia/Singapore		Singapore
-Link	Europe/Istanbul		Turkey
-Link	Etc/UCT			UCT
-Link	America/Anchorage	US/Alaska
-Link	America/Adak		US/Aleutian
-Link	America/Phoenix		US/Arizona
-Link	America/Chicago		US/Central
-Link	America/Indiana/Indianapolis	US/East-Indiana
-Link	America/New_York	US/Eastern
-Link	Pacific/Honolulu	US/Hawaii
-Link	America/Indiana/Knox	US/Indiana-Starke
-Link	America/Detroit		US/Michigan
-Link	America/Denver		US/Mountain
-Link	America/Los_Angeles	US/Pacific
-Link	Pacific/Pago_Pago	US/Samoa
-Link	Etc/UTC			UTC
-Link	Etc/UTC			Universal
-Link	Europe/Moscow		W-SU
-Link	Etc/UTC			Zulu
+# @(#)backward	7.29
+
+# This file provides links between current names for time zones
+# and their old names.  Many names changed in late 1993.
+
+Link	Africa/Bamako		Africa/Timbuktu
+Link	America/Argentina/Catamarca	America/Argentina/ComodRivadavia
+Link	America/Adak		America/Atka
+Link	America/Argentina/Buenos_Aires	America/Buenos_Aires
+Link	America/Argentina/Catamarca	America/Catamarca
+Link	America/Argentina/Cordoba	America/Cordoba
+Link	America/Tijuana		America/Ensenada
+Link	America/Indiana/Indianapolis	America/Fort_Wayne
+Link	America/Indiana/Indianapolis	America/Indianapolis
+Link	America/Argentina/Jujuy	America/Jujuy
+Link	America/Indiana/Knox	America/Knox_IN
+Link	America/Kentucky/Louisville	America/Louisville
+Link	America/Argentina/Mendoza	America/Mendoza
+Link	America/Rio_Branco	America/Porto_Acre
+Link	America/Argentina/Cordoba	America/Rosario
+Link	America/St_Thomas	America/Virgin
+Link	Asia/Ashgabat		Asia/Ashkhabad
+Link	Asia/Chongqing		Asia/Chungking
+Link	Asia/Dhaka		Asia/Dacca
+Link	Asia/Macau		Asia/Macao
+Link	Asia/Jerusalem		Asia/Tel_Aviv
+Link	Asia/Thimphu		Asia/Thimbu
+Link	Asia/Makassar		Asia/Ujung_Pandang
+Link	Asia/Ulaanbaatar	Asia/Ulan_Bator
+Link	Australia/Sydney	Australia/ACT
+Link	Australia/Sydney	Australia/Canberra
+Link	Australia/Lord_Howe	Australia/LHI
+Link	Australia/Sydney	Australia/NSW
+Link	Australia/Darwin	Australia/North
+Link	Australia/Brisbane	Australia/Queensland
+Link	Australia/Adelaide	Australia/South
+Link	Australia/Hobart	Australia/Tasmania
+Link	Australia/Melbourne	Australia/Victoria
+Link	Australia/Perth		Australia/West
+Link	Australia/Broken_Hill	Australia/Yancowinna
+Link	America/Rio_Branco	Brazil/Acre
+Link	America/Noronha		Brazil/DeNoronha
+Link	America/Sao_Paulo	Brazil/East
+Link	America/Manaus		Brazil/West
+Link	America/Chicago		CST6CDT
+Link	America/Halifax		Canada/Atlantic
+Link	America/Winnipeg	Canada/Central
+Link	America/Regina		Canada/East-Saskatchewan
+Link	America/Toronto		Canada/Eastern
+Link	America/Edmonton	Canada/Mountain
+Link	America/St_Johns	Canada/Newfoundland
+Link	America/Vancouver	Canada/Pacific
+Link	America/Regina		Canada/Saskatchewan
+Link	America/Whitehorse	Canada/Yukon
+Link	America/Santiago	Chile/Continental
+Link	Pacific/Easter		Chile/EasterIsland
+Link	America/Havana		Cuba
+Link	America/Panama		EST
+Link	America/New_York	EST5EDT
+Link	Africa/Cairo		Egypt
+Link	Europe/Dublin		Eire
+Link	Europe/London		Europe/Belfast
+Link	Europe/Chisinau		Europe/Tiraspol
+Link	Europe/London		GB
+Link	Europe/London		GB-Eire
+Link	Etc/GMT			GMT+0
+Link	Etc/GMT			GMT-0
+Link	Etc/GMT			GMT0
+Link	Etc/GMT			Greenwich
+Link	Pacific/Honolulu	HST
+Link	Asia/Hong_Kong		Hongkong
+Link	Atlantic/Reykjavik	Iceland
+Link	Asia/Tehran		Iran
+Link	Asia/Jerusalem		Israel
+Link	America/Jamaica		Jamaica
+Link	Asia/Tokyo		Japan
+Link	Pacific/Kwajalein	Kwajalein
+Link	Africa/Tripoli		Libya
+Link	America/Phoenix		MST
+Link	America/Denver		MST7MDT
+Link	America/Tijuana		Mexico/BajaNorte
+Link	America/Mazatlan	Mexico/BajaSur
+Link	America/Mexico_City	Mexico/General
+Link	Pacific/Auckland	NZ
+Link	Pacific/Chatham		NZ-CHAT
+Link	America/Denver		Navajo
+Link	Asia/Shanghai		PRC
+Link	America/Los_Angeles	PST8PDT
+Link	Pacific/Pago_Pago	Pacific/Samoa
+Link	Pacific/Truk		Pacific/Yap
+Link	Europe/Warsaw		Poland
+Link	Europe/Lisbon		Portugal
+Link	Asia/Taipei		ROC
+Link	Asia/Seoul		ROK
+Link	Asia/Singapore		Singapore
+Link	Europe/Istanbul		Turkey
+Link	Etc/UCT			UCT
+Link	America/Anchorage	US/Alaska
+Link	America/Adak		US/Aleutian
+Link	America/Phoenix		US/Arizona
+Link	America/Chicago		US/Central
+Link	America/Indiana/Indianapolis	US/East-Indiana
+Link	America/New_York	US/Eastern
+Link	Pacific/Honolulu	US/Hawaii
+Link	America/Indiana/Knox	US/Indiana-Starke
+Link	America/Detroit		US/Michigan
+Link	America/Denver		US/Mountain
+Link	America/Los_Angeles	US/Pacific
+Link	Pacific/Pago_Pago	US/Samoa
+Link	Etc/UTC			UTC
+Link	Etc/UTC			Universal
+Link	Europe/Moscow		W-SU
+Link	Etc/UTC			Zulu
diff --git a/JodaTime/src/java/org/joda/time/tz/src/europe b/JodaTime/src/java/org/joda/time/tz/src/europe
index ec6720a80..6f8f8d1e3 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/europe
+++ b/JodaTime/src/java/org/joda/time/tz/src/europe
@@ -1,2446 +1,2446 @@
-# @(#)europe	7.95
-
-# This data is by no means authoritative; if you think you know better,
-# go ahead and edit the file (and please send any changes to
-# tz@elsie.nci.nih.gov for general use in the future).
-
-# From Paul Eggert (1999-10-29):
-# A good source for time zone historical data outside the U.S. is
-# Thomas G. Shanks, The International Atlas (5th edition),
-# San Diego: ACS Publications, Inc. (1999).
-#
-# Gwillim Law writes that a good source
-# for recent time zone data is the International Air Transport
-# Association's Standard Schedules Information Manual (IATA SSIM),
-# published semiannually.  Law sent in several helpful summaries
-# of the IATA's data after 1990.
-#
-# Except where otherwise noted, Shanks is the source for entries through 1991,
-# and IATA SSIM is the source for entries afterwards.
-#
-# Other sources occasionally used include:
-#
-#	Edward W. Whitman, World Time Differences,
-#	Whitman Publishing Co, 2 Niagara Av, Ealing, London (undated),
-#	which I found in the UCLA library.
-#
-#	<a href="http://www.pettswoodvillage.co.uk/Daylight_Savings_William_Willett.pdf">
-#	William Willett, The Waste of Daylight, 19th edition
-#	</a> (1914-03)
-#
-#	Brazil's Departamento Servico da Hora (DSH),
-#	<a href="http://pcdsh01.on.br/HISTHV.htm">
-#	History of Summer Time
-#	</a> (1998-09-21, in Portuguese)
-
-#
-# I invented the abbreviations marked `*' in the following table;
-# the rest are from earlier versions of this file, or from other sources.
-# Corrections are welcome!
-#                   std dst  2dst
-#                   LMT           Local Mean Time
-#       -4:00       AST ADT       Atlantic
-#       -3:00       WGT WGST      Western Greenland*
-#       -1:00       EGT EGST      Eastern Greenland*
-#        0:00       GMT BST  BDST Greenwich, British Summer
-#        0:00       GMT IST       Greenwich, Irish Summer
-#        0:00       WET WEST WEMT Western Europe
-#        0:19:32.13 AMT NST       Amsterdam, Netherlands Summer (1835-1937)*
-#        0:20       NET NEST      Netherlands (1937-1940)*
-#        1:00       CET CEST CEMT Central Europe
-#        1:00:14    SET           Swedish (1879-1899)*
-#        2:00       EET EEST      Eastern Europe
-#        3:00       MSK MSD       Moscow
-#
-# A reliable and entertaining source about time zones, especially in Britain,
-# Derek Howse, Greenwich time and longitude, Philip Wilson Publishers (1997).
-
-# From Peter Ilieve (1994-12-04),
-# The original six [EU members]: Belgium, France, (West) Germany, Italy,
-# Luxembourg, the Netherlands.
-# Plus, from 1 Jan 73: Denmark, Ireland, United Kingdom.
-# Plus, from 1 Jan 81: Greece.
-# Plus, from 1 Jan 86: Spain, Portugal.
-# Plus, from 1 Jan 95: Austria, Finland, Sweden. (Norway negotiated terms for
-# entry but in a referendum on 28 Nov 94 the people voted No by 52.2% to 47.8%
-# on a turnout of 88.6%. This was almost the same result as Norway's previous
-# referendum in 1972, they are the only country to have said No twice.
-# Referendums in the other three countries voted Yes.)
-# ...
-# Estonia ... uses EU dates but not at 01:00 GMT, they use midnight GMT.
-# I don't think they know yet what they will do from 1996 onwards.
-# ...
-# There shouldn't be any [current members who are not using EU rules].
-# A Directive has the force of law, member states are obliged to enact
-# national law to implement it. The only contentious issue was the
-# different end date for the UK and Ireland, and this was always allowed
-# in the Directive.
-
-
-###############################################################################
-
-# Britain (United Kingdom) and Ireland (Eire)
-
-# From Peter Ilieve (1994-07-06):
-#
-# On 17 Jan 1994 the Independent, a UK quality newspaper, had a piece about
-# historical vistas along the Thames in west London. There was a photo
-# and a sketch map showing some of the sightlines involved. One paragraph
-# of the text said:
-#
-# `An old stone obelisk marking a forgotten terrestrial meridian stands
-# beside the river at Kew. In the 18th century, before time and longitude
-# was standardised by the Royal Observatory in Greenwich, scholars observed
-# this stone and the movement of stars from Kew Observatory nearby. They
-# made their calculations and set the time for the Horse Guards and Parliament,
-# but now the stone is obscured by scrubwood and can only be seen by walking
-# along the towpath within a few yards of it.'
-#
-# I have a one inch to one mile map of London and my estimate of the stone's
-# position is 51 deg. 28' 30" N, 0 deg. 18' 45" W. The longitude should
-# be within about +-2". The Ordnance Survey grid reference is TQ172761.
-#
-# [This yields GMTOFF = -0:01:15 for London LMT in the 18th century.]
-
-# From Paul Eggert (1993-11-18):
-#
-# Howse writes that Britain was the first country to use standard time.
-# The railways cared most about the inconsistencies of local mean time,
-# and it was they who forced a uniform time on the country.
-# The original idea was credited to Dr. William Hyde Wollaston (1766-1828)
-# and was popularized by Abraham Follett Osler (1808-1903).
-# The first railway to adopt London time was the Great Western Railway
-# in November 1840; other railways followed suit, and by 1847 most
-# (though not all) railways used London time.  On 1847-09-22 the
-# Railway Clearing House, an industry standards body, recommended that GMT be
-# adopted at all stations as soon as the General Post Office permitted it.
-# The transition occurred on 12-01 for the L&NW, the Caledonian,
-# and presumably other railways; the January 1848 Bradshaw's lists many
-# railways as using GMT.  By 1855 the vast majority of public
-# clocks in Britain were set to GMT (though some, like the great clock
-# on Tom Tower at Christ Church, Oxford, were fitted with two minute hands,
-# one for local time and one for GMT).  The last major holdout was the legal
-# system, which stubbornly stuck to local time for many years, leading
-# to oddities like polls opening at 08:13 and closing at 16:13.
-# The legal system finally switched to GMT when the Statutes (Definition
-# of Time) Act took effect; it received the Royal Assent on 1880-08-02.
-#
-# In the tables below, we condense this complicated story into a single
-# transition date for London, namely 1847-12-01.  We don't know as much
-# about Dublin, so we use 1880-08-02, the legal transition time.
-
-# From Paul Eggert (2003-09-27):
-# Summer Time was first seriously proposed by William Willett (1857-1915),
-# a London builder and member of the Royal Astronomical Society
-# who circulated a pamphlet ``The Waste of Daylight'' (1907)
-# that proposed advancing clocks 20 minutes on each of four Sundays in April,
-# and retarding them by the same amount on four Sundays in September.
-# A bill was drafted in 1909 and introduced in Parliament several times,
-# but it met with ridicule and opposition, especially from farming interests.
-# Later editions of the pamphlet proposed one-hour summer time, and
-# it was eventually adopted as a wartime measure in 1916.
-# See: Summer Time Arrives Early, The Times (2000-05-18).
-# A monument to Willett was unveiled on 1927-05-21, in an open space in
-# a 45-acre wood near Chislehurst, Kent that was purchased by popular
-# subscription and open to the public.  On the south face of the monolith,
-# designed by G. W. Miller, is the the William Willett Memorial Sundial,
-# which is permanently set to Summer Time.
-
-# From Winston Churchill (1934-04-28):
-# It is one of the paradoxes of history that we should owe the boon of
-# summer time, which gives every year to the people of this country
-# between 160 and 170 hours more daylight leisure, to a war which
-# plunged Europe into darkness for four years, and shook the
-# foundations of civilization throughout the world.
-#	-- <a href="http://www.winstonchurchill.org/fh114willett.htm">
-#	"A Silent Toast to William Willett", Pictorial Weekly
-#	</a>
-
-# From Paul Eggert (1996-09-03):
-# The OED Supplement says that the English originally said ``Daylight Saving''
-# when they were debating the adoption of DST in 1908; but by 1916 this
-# term appears only in quotes taken from DST's opponents, whereas the
-# proponents (who eventually won the argument) are quoted as using ``Summer''.
-
-# From Arthur David Olson (1989-01-19):
-#
-# A source at the British Information Office in New York avers that it's
-# known as "British" Summer Time in all parts of the United Kingdom.
-
-# Date: 4 Jan 89 08:57:25 GMT (Wed)
-# From: Jonathan Leffler
-# [British Summer Time] is fixed annually by Act of Parliament.
-# If you can predict what Parliament will do, you should be in
-# politics making a fortune, not computing.
-
-# From Chris Carrier (1996-06-14):
-# I remember reading in various wartime issues of the London Times the
-# acronym BDST for British Double Summer Time.  Look for the published
-# time of sunrise and sunset in The Times, when BDST was in effect, and
-# if you find a zone reference it will say, "All times B.D.S.T."
-
-# From Joseph S. Myers (1999-09-02):
-# ... some military cables (WO 219/4100 - this is a copy from the
-# main SHAEF archives held in the US National Archives, SHAEF/5252/8/516)
-# agree that the usage is BDST (this appears in a message dated 17 Feb 1945).
-
-# From Joseph S. Myers (2000-10-03):
-# On 18th April 1941, Sir Stephen Tallents of the BBC wrote to Sir
-# Alexander Maxwell of the Home Office asking whether there was any
-# official designation; the reply of the 21st was that there wasn't
-# but he couldn't think of anything better than the "Double British
-# Summer Time" that the BBC had been using informally.
-# http://student.cusu.cam.ac.uk/~jsm28/british-time/bbc-19410418.png
-# http://student.cusu.cam.ac.uk/~jsm28/british-time/ho-19410421.png
-
-# From Sir Alexander Maxwell in the above-mentioned letter (1941-04-21):
-# [N]o official designation has as far as I know been adopted for the time
-# which is to be introduced in May....
-# I cannot think of anything better than "Double British Summer Time"
-# which could not be said to run counter to any official description.
-
-# From Paul Eggert (2000-10-02):
-# Howse writes (p 157) `DBST' too, but `BDST' seems to have been common
-# and follows the more usual convention of putting the location name first,
-# so we use `BDST'.
-
-# Peter Ilieve (1998-04-19) described at length
-# the history of summer time legislation in the United Kingdom.
-# Since 1998 Joseph S. Myers has been updating
-# and extending this list, which can be found in
-# <a href="http://student.cusu.cam.ac.uk/~jsm28/british-time/">
-# History of legal time in Britain
-# </a>
-
-# From Joseph S. Myers (1998-01-06):
-#
-# The legal time in the UK outside of summer time is definitely GMT, not UTC;
-# see Lord Tanlaw's speech
-# <a href="http://www.parliament.the-stationery-office.co.uk/pa/ld199697/ldhansrd/pdvn/lds97/text/70611-20.htm#70611-20_head0">
-# (Lords Hansard 11 June 1997 columns 964 to 976)
-# </a>.
-
-# From Paul Eggert (2001-07-18):
-#
-# For lack of other data, we'll follow Shanks for Eire in 1940-1948.
-#
-# Given Ilieve and Myers's data, the following claims by Shanks are incorrect:
-#     * Wales did not switch from GMT to daylight saving time until
-#	1921 Apr 3, when they began to conform with the rest of Great Britain.
-# Actually, Wales was identical after 1880.
-#     * Eire had two transitions on 1916 Oct 1.
-# It actually just had one transition.
-#     * Northern Ireland used single daylight saving time throughout WW II.
-# Actually, it conformed to Britain.
-#     * GB-Eire changed standard time to 1 hour ahead of GMT on 1968-02-18.
-# Actually, that date saw the usual switch to summer time.
-# Standard time was not changed until 1968-10-27 (the clocks didn't change).
-#
-# Here is another incorrect claim by Shanks:
-#     * Jersey, Guernsey, and the Isle of Man did not switch from GMT
-#	to daylight saving time until 1921 Apr 3, when they began to
-#	conform with Great Britain.
-# S.R.&O. 1916, No. 382 and HO 45/10811/312364 (quoted above) say otherwise.
-#
-# The following claim by Shanks is possible though doubtful;
-# we'll ignore it for now.
-#     * Dublin's 1971-10-31 switch was at 02:00, even though London's was 03:00.
-#
-#
-# Whitman says Dublin Mean Time was -0:25:21, which is more precise than Shanks.
-# Perhaps this was Dunsink Observatory Time, as Dunsink Observatory
-# (8 km NW of Dublin's center) seemingly was to Dublin as Greenwich was
-# to London.  For example:
-#
-#   "Timeball on the ballast office is down.  Dunsink time."
-#   -- James Joyce, Ulysses
-
-# From Joseph S. Myers (2005-01-26):
-# Irish laws are available online at www.irishstatutebook.ie.  These include 
-# various relating to legal time, for example:
-# 
-# ZZA13Y1923.html ZZA12Y1924.html ZZA8Y1925.html ZZSIV20PG1267.html
-# 
-# ZZSI71Y1947.html ZZSI128Y1948.html ZZSI23Y1949.html ZZSI41Y1950.html
-# ZZSI27Y1951.html ZZSI73Y1952.html
-# 
-# ZZSI11Y1961.html ZZSI232Y1961.html ZZSI182Y1962.html
-# ZZSI167Y1963.html ZZSI257Y1964.html ZZSI198Y1967.html
-# ZZA23Y1968.html ZZA17Y1971.html
-# 
-# ZZSI67Y1981.html ZZSI212Y1982.html ZZSI45Y1986.html
-# ZZSI264Y1988.html ZZSI52Y1990.html ZZSI371Y1992.html
-# ZZSI395Y1994.html ZZSI484Y1997.html ZZSI506Y2001.html
-#
-# [These are all relative to the root, e.g., the first is
-# <http://www.irishstatutebook.ie/ZZA13Y1923.html>.]
-# 
-# (These are those I found, but there could be more.  In any case these 
-# should allow various updates to the comments in the europe file to cover 
-# the laws applicable in Ireland.)
-# 
-# (Note that the time in the Republic of Ireland since 1968 has been defined 
-# in terms of standard time being GMT+1 with a period of winter time when it 
-# is GMT, rather than standard time being GMT with a period of summer time 
-# being GMT+1.)
-
-# From Paul Eggert (1999-03-28):
-# Clive Feather (<news:859845706.26043.0@office.demon.net>, 1997-03-31)
-# reports that Folkestone (Cheriton) Shuttle Terminal uses Concession Time
-# (CT), equivalent to French civil time.
-# Julian Hill (<news:36118128.5A14@virgin.net>, 1998-09-30) reports that
-# trains between Dollands Moor (the freight facility next door)
-# and Frethun run in CT.
-# My admittedly uninformed guess is that the terminal has two authorities,
-# the French concession operators and the British civil authorities,
-# and that the time depends on who you're talking to.
-# If, say, the British police were called to the station for some reason,
-# I would expect the official police report to use GMT/BST and not CET/CEST.
-# This is a borderline case, but for now let's stick to GMT/BST.
-
-# From an anonymous contributor (1996-06-02):
-# The law governing time in Ireland is under Statutory Instrument SI 395/94,
-# which gives force to European Union 7th Council Directive # 94/21/EC.
-# Under this directive, the Minister for Justice in Ireland makes appropriate
-# regulations. I spoke this morning with the Secretary of the Department of
-# Justice (tel +353 1 678 9711) who confirmed to me that the correct name is
-# "Irish Summer Time", abbreviated to "IST".
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-# Summer Time Act, 1916
-Rule	GB-Eire	1916	only	-	May	21	2:00s	1:00	BST
-Rule	GB-Eire	1916	only	-	Oct	 1	2:00s	0	GMT
-# S.R.&O. 1917, No. 358
-Rule	GB-Eire	1917	only	-	Apr	 8	2:00s	1:00	BST
-Rule	GB-Eire	1917	only	-	Sep	17	2:00s	0	GMT
-# S.R.&O. 1918, No. 274
-Rule	GB-Eire	1918	only	-	Mar	24	2:00s	1:00	BST
-Rule	GB-Eire	1918	only	-	Sep	30	2:00s	0	GMT
-# S.R.&O. 1919, No. 297
-Rule	GB-Eire	1919	only	-	Mar	30	2:00s	1:00	BST
-Rule	GB-Eire	1919	only	-	Sep	29	2:00s	0	GMT
-# S.R.&O. 1920, No. 458
-Rule	GB-Eire	1920	only	-	Mar	28	2:00s	1:00	BST
-# S.R.&O. 1920, No. 1844
-Rule	GB-Eire	1920	only	-	Oct	25	2:00s	0	GMT
-# S.R.&O. 1921, No. 363
-Rule	GB-Eire	1921	only	-	Apr	 3	2:00s	1:00	BST
-Rule	GB-Eire	1921	only	-	Oct	 3	2:00s	0	GMT
-# S.R.&O. 1922, No. 264
-Rule	GB-Eire	1922	only	-	Mar	26	2:00s	1:00	BST
-Rule	GB-Eire	1922	only	-	Oct	 8	2:00s	0	GMT
-# The Summer Time Act, 1922
-Rule	GB-Eire	1923	only	-	Apr	Sun>=16	2:00s	1:00	BST
-Rule	GB-Eire	1923	1924	-	Sep	Sun>=16	2:00s	0	GMT
-Rule	GB-Eire	1924	only	-	Apr	Sun>=9	2:00s	1:00	BST
-Rule	GB-Eire	1925	1926	-	Apr	Sun>=16	2:00s	1:00	BST
-# The Summer Time Act, 1925
-Rule	GB-Eire	1925	1938	-	Oct	Sun>=2	2:00s	0	GMT
-Rule	GB-Eire	1927	only	-	Apr	Sun>=9	2:00s	1:00	BST
-Rule	GB-Eire	1928	1929	-	Apr	Sun>=16	2:00s	1:00	BST
-Rule	GB-Eire	1930	only	-	Apr	Sun>=9	2:00s	1:00	BST
-Rule	GB-Eire	1931	1932	-	Apr	Sun>=16	2:00s	1:00	BST
-Rule	GB-Eire	1933	only	-	Apr	Sun>=9	2:00s	1:00	BST
-Rule	GB-Eire	1934	only	-	Apr	Sun>=16	2:00s	1:00	BST
-Rule	GB-Eire	1935	only	-	Apr	Sun>=9	2:00s	1:00	BST
-Rule	GB-Eire	1936	1937	-	Apr	Sun>=16	2:00s	1:00	BST
-Rule	GB-Eire	1938	only	-	Apr	Sun>=9	2:00s	1:00	BST
-Rule	GB-Eire	1939	only	-	Apr	Sun>=16	2:00s	1:00	BST
-# S.R.&O. 1939, No. 1379
-Rule	GB-Eire	1939	only	-	Nov	Sun>=16	2:00s	0	GMT
-# S.R.&O. 1940, No. 172 and No. 1883
-Rule	GB-Eire	1940	only	-	Feb	Sun>=23	2:00s	1:00	BST
-# S.R.&O. 1941, No. 476
-Rule	GB-Eire	1941	only	-	May	Sun>=2	1:00s	2:00	BDST
-Rule	GB-Eire	1941	1943	-	Aug	Sun>=9	1:00s	1:00	BST
-# S.R.&O. 1942, No. 506
-Rule	GB-Eire	1942	1944	-	Apr	Sun>=2	1:00s	2:00	BDST
-# S.R.&O. 1944, No. 932
-Rule	GB-Eire	1944	only	-	Sep	Sun>=16	1:00s	1:00	BST
-# S.R.&O. 1945, No. 312
-Rule	GB-Eire	1945	only	-	Apr	Mon>=2	1:00s	2:00	BDST
-Rule	GB-Eire	1945	only	-	Jul	Sun>=9	1:00s	1:00	BST
-# S.R.&O. 1945, No. 1208
-Rule	GB-Eire	1945	1946	-	Oct	Sun>=2	2:00s	0	GMT
-Rule	GB-Eire	1946	only	-	Apr	Sun>=9	2:00s	1:00	BST
-# The Summer Time Act, 1947
-Rule	GB-Eire	1947	only	-	Mar	16	2:00s	1:00	BST
-Rule	GB-Eire	1947	only	-	Apr	13	1:00s	2:00	BDST
-Rule	GB-Eire	1947	only	-	Aug	10	1:00s	1:00	BST
-Rule	GB-Eire	1947	only	-	Nov	 2	2:00s	0	GMT
-# Summer Time Order, 1948 (S.I. 1948/495)
-Rule	GB-Eire	1948	only	-	Mar	14	2:00s	1:00	BST
-Rule	GB-Eire	1948	only	-	Oct	31	2:00s	0	GMT
-# Summer Time Order, 1949 (S.I. 1949/373)
-Rule	GB-Eire	1949	only	-	Apr	 3	2:00s	1:00	BST
-Rule	GB-Eire	1949	only	-	Oct	30	2:00s	0	GMT
-# Summer Time Order, 1950 (S.I. 1950/518)
-# Summer Time Order, 1951 (S.I. 1951/430)
-# Summer Time Order, 1952 (S.I. 1952/451)
-Rule	GB-Eire	1950	1952	-	Apr	Sun>=14	2:00s	1:00	BST
-Rule	GB-Eire	1950	1952	-	Oct	Sun>=21	2:00s	0	GMT
-# revert to the rules of the Summer Time Act, 1925
-Rule	GB-Eire	1953	only	-	Apr	Sun>=16	2:00s	1:00	BST
-Rule	GB-Eire	1953	1960	-	Oct	Sun>=2	2:00s	0	GMT
-Rule	GB-Eire	1954	only	-	Apr	Sun>=9	2:00s	1:00	BST
-Rule	GB-Eire	1955	1956	-	Apr	Sun>=16	2:00s	1:00	BST
-Rule	GB-Eire	1957	only	-	Apr	Sun>=9	2:00s	1:00	BST
-Rule	GB-Eire	1958	1959	-	Apr	Sun>=16	2:00s	1:00	BST
-Rule	GB-Eire	1960	only	-	Apr	Sun>=9	2:00s	1:00	BST
-# Summer Time Order, 1961 (S.I. 1961/71)
-# Summer Time (1962) Order, 1961 (S.I. 1961/2465)
-# Summer Time Order, 1963 (S.I. 1963/81)
-Rule	GB-Eire	1961	1963	-	Mar	lastSun	2:00s	1:00	BST
-Rule	GB-Eire	1961	1968	-	Oct	Sun>=23	2:00s	0	GMT
-# Summer Time (1964) Order, 1963 (S.I. 1963/2101)
-# Summer Time Order, 1964 (S.I. 1964/1201)
-# Summer Time Order, 1967 (S.I. 1967/1148)
-Rule	GB-Eire	1964	1967	-	Mar	Sun>=19	2:00s	1:00	BST
-# Summer Time Order, 1968 (S.I. 1968/117)
-Rule	GB-Eire	1968	only	-	Feb	18	2:00s	1:00	BST
-# The British Standard Time Act, 1968
-#	(no summer time)
-# The Summer Time Act, 1972
-Rule	GB-Eire	1972	1980	-	Mar	Sun>=16	2:00s	1:00	BST
-Rule	GB-Eire	1972	1980	-	Oct	Sun>=23	2:00s	0	GMT
-# Summer Time Order, 1980 (S.I. 1980/1089)
-# Summer Time Order, 1982 (S.I. 1982/1673)
-# Summer Time Order, 1986 (S.I. 1986/223)
-# Summer Time Order, 1988 (S.I. 1988/931)
-Rule	GB-Eire	1981	1995	-	Mar	lastSun	1:00u	1:00	BST
-Rule	GB-Eire 1981	1989	-	Oct	Sun>=23	1:00u	0	GMT
-# Summer Time Order, 1989 (S.I. 1989/985)
-# Summer Time Order, 1992 (S.I. 1992/1729)
-# Summer Time Order 1994 (S.I. 1994/2798)
-Rule	GB-Eire 1990	1995	-	Oct	Sun>=22	1:00u	0	GMT
-# Summer Time Order 1997 (S.I. 1997/2982)
-# See EU for rules starting in 1996.
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/London	-0:01:15 -	LMT	1847 Dec  1
-			 0:00	GB-Eire	%s	1968 Oct 27
-			 1:00	-	BST	1971 Oct 31 2:00u
-			 0:00	GB-Eire	%s	1996
-			 0:00	EU	GMT/BST
-Zone	Europe/Dublin	-0:25:00 -	LMT	1880 Aug  2
-			-0:25:21 -	DMT	1916 May 21 2:00
-			-0:25:21 1:00	IST	1916 Oct  1 2:00s
-			 0:00	GB-Eire	%s	1921 Dec  6 # independence
-			 0:00	GB-Eire	GMT/IST	1940 Feb 25 2:00
-			 0:00	1:00	IST	1946 Oct  6 2:00
-			 0:00	-	GMT	1947 Mar 16 2:00
-			 0:00	1:00	IST	1947 Nov  2 2:00
-			 0:00	-	GMT	1948 Apr 18 2:00
-			 0:00	GB-Eire	GMT/IST	1968 Oct 27
-			 1:00	-	IST	1971 Oct 31 2:00u
-			 0:00	GB-Eire	GMT/IST	1996
-			 0:00	EU	GMT/IST
-
-###############################################################################
-
-# Continental Europe
-
-# EU rules are for the European Union, previously known as the EC, EEC,
-# Common Market, etc.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	EU	1977	1980	-	Apr	Sun>=1	 1:00u	1:00	S
-Rule	EU	1977	only	-	Sep	lastSun	 1:00u	0	-
-Rule	EU	1978	only	-	Oct	 1	 1:00u	0	-
-Rule	EU	1979	1995	-	Sep	lastSun	 1:00u	0	-
-Rule	EU	1981	max	-	Mar	lastSun	 1:00u	1:00	S
-Rule	EU	1996	max	-	Oct	lastSun	 1:00u	0	-
-# The most recent directive covers the years starting in 2002.  See:
-# <a href="http://europa.eu.int/eur-lex/en/lif/dat/2000/en_300L0084.html"
-# Directive 2000/84/EC of the European Parliament and of the Council
-# of 19 January 2001 on summer-time arrangements.
-# </a>
-
-# W-Eur differs from EU only in that W-Eur uses standard time.
-Rule	W-Eur	1977	1980	-	Apr	Sun>=1	 1:00s	1:00	S
-Rule	W-Eur	1977	only	-	Sep	lastSun	 1:00s	0	-
-Rule	W-Eur	1978	only	-	Oct	 1	 1:00s	0	-
-Rule	W-Eur	1979	1995	-	Sep	lastSun	 1:00s	0	-
-Rule	W-Eur	1981	max	-	Mar	lastSun	 1:00s	1:00	S
-Rule	W-Eur	1996	max	-	Oct	lastSun	 1:00s	0	-
-
-# Older C-Eur rules are for convenience in the tables.
-# From 1977 on, C-Eur differs from EU only in that C-Eur uses standard time.
-Rule	C-Eur	1916	only	-	Apr	30	23:00	1:00	S
-Rule	C-Eur	1916	only	-	Oct	 1	 1:00	0	-
-Rule	C-Eur	1917	1918	-	Apr	Mon>=15	 2:00s	1:00	S
-Rule	C-Eur	1917	1918	-	Sep	Mon>=15	 2:00s	0	-
-Rule	C-Eur	1940	only	-	Apr	 1	 2:00s	1:00	S
-Rule	C-Eur	1942	only	-	Nov	 2	 2:00s	0	-
-Rule	C-Eur	1943	only	-	Mar	29	 2:00s	1:00	S
-Rule	C-Eur	1943	only	-	Oct	 4	 2:00s	0	-
-Rule	C-Eur	1944	only	-	Apr	 3	 2:00s	1:00	S
-# Whitman gives 1944 Oct 7; go with Shanks.
-Rule	C-Eur	1944	only	-	Oct	 2	 2:00s	0	-
-Rule	C-Eur	1977	1980	-	Apr	Sun>=1	 2:00s	1:00	S
-Rule	C-Eur	1977	only	-	Sep	lastSun	 2:00s	0	-
-Rule	C-Eur	1978	only	-	Oct	 1	 2:00s	0	-
-Rule	C-Eur	1979	1995	-	Sep	lastSun	 2:00s	0	-
-Rule	C-Eur	1981	max	-	Mar	lastSun	 2:00s	1:00	S
-Rule	C-Eur	1996	max	-	Oct	lastSun	 2:00s	0	-
-
-# E-Eur differs from EU only in that E-Eur switches at midnight local time.
-Rule	E-Eur	1977	1980	-	Apr	Sun>=1	 0:00	1:00	S
-Rule	E-Eur	1977	only	-	Sep	lastSun	 0:00	0	-
-Rule	E-Eur	1978	only	-	Oct	 1	 0:00	0	-
-Rule	E-Eur	1979	1995	-	Sep	lastSun	 0:00	0	-
-Rule	E-Eur	1981	max	-	Mar	lastSun	 0:00	1:00	S
-Rule	E-Eur	1996	max	-	Oct	lastSun	 0:00	0	-
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Russia	1917	only	-	Jul	 1	23:00	1:00	MST	# Moscow Summer Time
-Rule	Russia	1917	only	-	Dec	28	 0:00	0	MMT	# Moscow Mean Time
-Rule	Russia	1918	only	-	May	31	22:00	2:00	MDST	# Moscow Double Summer Time
-Rule	Russia	1918	only	-	Sep	16	 1:00	1:00	MST
-Rule	Russia	1919	only	-	May	31	23:00	2:00	MDST
-Rule	Russia	1919	only	-	Jul	 1	 2:00	1:00	S
-Rule	Russia	1919	only	-	Aug	16	 0:00	0	-
-Rule	Russia	1921	only	-	Feb	14	23:00	1:00	S
-Rule	Russia	1921	only	-	Mar	20	23:00	2:00	M # Midsummer
-Rule	Russia	1921	only	-	Sep	 1	 0:00	1:00	S
-Rule	Russia	1921	only	-	Oct	 1	 0:00	0	-
-# Act No.925 of the Council of Ministers of the USSR (1980-10-24):
-Rule	Russia	1981	1984	-	Apr	 1	 0:00	1:00	S
-Rule	Russia	1981	1983	-	Oct	 1	 0:00	0	-
-# Act No.967 of the Council of Ministers of the USSR (1984-09-13), repeated in
-# Act No.227 of the Council of Ministers of the USSR (1989-03-14):
-Rule	Russia	1984	1991	-	Sep	lastSun	 2:00s	0	-
-Rule	Russia	1985	1991	-	Mar	lastSun	 2:00s	1:00	S
-#
-Rule	Russia	1992	only	-	Mar	lastSat	 23:00	1:00	S
-Rule	Russia	1992	only	-	Sep	lastSat	 23:00	0	-
-Rule	Russia	1993	max	-	Mar	lastSun	 2:00s	1:00	S
-Rule	Russia	1993	1995	-	Sep	lastSun	 2:00s	0	-
-Rule	Russia	1996	max	-	Oct	lastSun	 2:00s	0	-
-
-# These are for backward compatibility with older versions.
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	WET		0:00	EU	WE%sT
-Zone	CET		1:00	C-Eur	CE%sT
-Zone	MET		1:00	C-Eur	ME%sT
-Zone	EET		2:00	EU	EE%sT
-
-# Previous editions of this database used abbreviations like MET DST
-# for Central European Summer Time, but this didn't agree with common usage.
-
-# From Markus Kuhn (1996-07-12):
-# The official German names ... are
-#
-#	Mitteleuropaeische Zeit (MEZ)         = UTC+01:00
-#	Mitteleuropaeische Sommerzeit (MESZ)  = UTC+02:00
-#
-# as defined in the German Time Act (Gesetz ueber die Zeitbestimmung (ZeitG),
-# 1978-07-25, Bundesgesetzblatt, Jahrgang 1978, Teil I, S. 1110-1111)....
-# I wrote ... to the German Federal Physical-Technical Institution
-#
-#	Physikalisch-Technische Bundesanstalt (PTB)
-#	Laboratorium 4.41 "Zeiteinheit"
-#	Postfach 3345
-#	D-38023 Braunschweig
-#	phone: +49 531 592-0
-#
-# ... I received today an answer letter from Dr. Peter Hetzel, head of the PTB
-# department for time and frequency transmission.  He explained that the
-# PTB translates MEZ and MESZ into English as
-#
-#	Central European Time (CET)         = UTC+01:00
-#	Central European Summer Time (CEST) = UTC+02:00
-
-
-# Albania
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Albania	1940	only	-	Jun	16	0:00	1:00	S
-Rule	Albania	1942	only	-	Nov	 2	3:00	0	-
-Rule	Albania	1943	only	-	Mar	29	2:00	1:00	S
-Rule	Albania	1943	only	-	Apr	10	3:00	0	-
-Rule	Albania	1974	only	-	May	 4	0:00	1:00	S
-Rule	Albania	1974	only	-	Oct	 2	0:00	0	-
-Rule	Albania	1975	only	-	May	 1	0:00	1:00	S
-Rule	Albania	1975	only	-	Oct	 2	0:00	0	-
-Rule	Albania	1976	only	-	May	 2	0:00	1:00	S
-Rule	Albania	1976	only	-	Oct	 3	0:00	0	-
-Rule	Albania	1977	only	-	May	 8	0:00	1:00	S
-Rule	Albania	1977	only	-	Oct	 2	0:00	0	-
-Rule	Albania	1978	only	-	May	 6	0:00	1:00	S
-Rule	Albania	1978	only	-	Oct	 1	0:00	0	-
-Rule	Albania	1979	only	-	May	 5	0:00	1:00	S
-Rule	Albania	1979	only	-	Sep	30	0:00	0	-
-Rule	Albania	1980	only	-	May	 3	0:00	1:00	S
-Rule	Albania	1980	only	-	Oct	 4	0:00	0	-
-Rule	Albania	1981	only	-	Apr	26	0:00	1:00	S
-Rule	Albania	1981	only	-	Sep	27	0:00	0	-
-Rule	Albania	1982	only	-	May	 2	0:00	1:00	S
-Rule	Albania	1982	only	-	Oct	 3	0:00	0	-
-Rule	Albania	1983	only	-	Apr	18	0:00	1:00	S
-Rule	Albania	1983	only	-	Oct	 1	0:00	0	-
-Rule	Albania	1984	only	-	Apr	 1	0:00	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Tirane	1:19:20 -	LMT	1914
-			1:00	-	CET	1940 Jun 16
-			1:00	Albania	CE%sT	1984 Jul
-			1:00	EU	CE%sT
-
-# Andorra
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Andorra	0:06:04 -	LMT	1901
-			0:00	-	WET	1946 Sep 30
-			1:00	-	CET	1985 Mar 31 2:00
-			1:00	EU	CE%sT
-
-# Austria
-
-# From Paul Eggert (2003-02-28): Shanks gives 1918-06-16 and
-# 1945-11-18, but the Austrian Federal Office of Metrology and
-# Surveying (BEV) gives 1918-09-16 and for Vienna gives the "alleged"
-# date of 1945-04-12 with no time.  For the 1980-04-06 transition
-# Shanks gives 02:00, the BEV 00:00.  Go with the BEV, and guess 02:00
-# for 1945-04-12.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Austria	1920	only	-	Apr	 5	2:00s	1:00	S
-Rule	Austria	1920	only	-	Sep	13	2:00s	0	-
-Rule	Austria	1946	only	-	Apr	14	2:00s	1:00	S
-Rule	Austria	1946	1948	-	Oct	Sun>=1	2:00s	0	-
-Rule	Austria	1947	only	-	Apr	 6	2:00s	1:00	S
-Rule	Austria	1948	only	-	Apr	18	2:00s	1:00	S
-Rule	Austria	1980	only	-	Apr	 6	0:00	1:00	S
-Rule	Austria	1980	only	-	Sep	28	0:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Vienna	1:05:20 -	LMT	1893 Apr
-			1:00	C-Eur	CE%sT	1920
-			1:00	Austria	CE%sT	1940 Apr  1 2:00s
-			1:00	C-Eur	CE%sT	1945 Apr  2 2:00s
-			1:00	1:00	CEST	1945 Apr 12 2:00s
-			1:00	-	CET	1946
-			1:00	Austria	CE%sT	1981
-			1:00	EU	CE%sT
-
-# Belarus
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Minsk	1:50:16 -	LMT	1880
-			1:50	-	MMT	1924 May 2 # Minsk Mean Time
-			2:00	-	EET	1930 Jun 21
-			3:00	-	MSK	1941 Jun 28
-			1:00	C-Eur	CE%sT	1944 Jul  3
-			3:00	Russia	MSK/MSD	1990
-			3:00	-	MSK	1991 Mar 31 2:00s
-			2:00	1:00	EEST	1991 Sep 29 2:00s
-			2:00	-	EET	1992 Mar 29 0:00s
-			2:00	1:00	EEST	1992 Sep 27 0:00s
-			2:00	Russia	EE%sT
-
-# Belgium
-#
-# From Paul Eggert (1997-07-02):
-# Entries from 1918 through 1991 are taken from:
-#	Annuaire de L'Observatoire Royal de Belgique,
-#	Avenue Circulaire, 3, B-1180 BRUXELLES, CLVIIe annee, 1991
-#	(Imprimerie HAYEZ, s.p.r.l., Rue Fin, 4, 1080 BRUXELLES, MCMXC),
-#	pp 8-9.
-# LMT before 1892 was 0:17:30, according to the official journal of Belgium:
-#	Moniteur Belge, Samedi 30 Avril 1892, N.121.
-# Thanks to Pascal Delmoitie for these references.
-# The 1918 rules are listed for completeness; they apply to unoccupied Belgium.
-# Assume Brussels switched to WET in 1918 when the armistice took effect.
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Belgium	1918	only	-	Mar	 9	 0:00s	1:00	S
-Rule	Belgium	1918	1919	-	Oct	Sat>=1	23:00s	0	-
-Rule	Belgium	1919	only	-	Mar	 1	23:00s	1:00	S
-Rule	Belgium	1920	only	-	Feb	14	23:00s	1:00	S
-Rule	Belgium	1920	only	-	Oct	23	23:00s	0	-
-Rule	Belgium	1921	only	-	Mar	14	23:00s	1:00	S
-Rule	Belgium	1921	only	-	Oct	25	23:00s	0	-
-Rule	Belgium	1922	only	-	Mar	25	23:00s	1:00	S
-Rule	Belgium	1922	1927	-	Oct	Sat>=1	23:00s	0	-
-Rule	Belgium	1923	only	-	Apr	21	23:00s	1:00	S
-Rule	Belgium	1924	only	-	Mar	29	23:00s	1:00	S
-Rule	Belgium	1925	only	-	Apr	 4	23:00s	1:00	S
-# DSH writes that a royal decree of 1926-02-22 specified the Sun following 3rd
-# Sat in Apr (except if it's Easter, in which case it's one Sunday earlier),
-# to Sun following 1st Sat in Oct, and that a royal decree of 1928-09-15
-# changed the transition times to 02:00 GMT.
-Rule	Belgium	1926	only	-	Apr	17	23:00s	1:00	S
-Rule	Belgium	1927	only	-	Apr	 9	23:00s	1:00	S
-Rule	Belgium	1928	only	-	Apr	14	23:00s	1:00	S
-Rule	Belgium	1928	1938	-	Oct	Sun>=2	 2:00s	0	-
-Rule	Belgium	1929	only	-	Apr	21	 2:00s	1:00	S
-Rule	Belgium	1930	only	-	Apr	13	 2:00s	1:00	S
-Rule	Belgium	1931	only	-	Apr	19	 2:00s	1:00	S
-Rule	Belgium	1932	only	-	Apr	 3	 2:00s	1:00	S
-Rule	Belgium	1933	only	-	Mar	26	 2:00s	1:00	S
-Rule	Belgium	1934	only	-	Apr	 8	 2:00s	1:00	S
-Rule	Belgium	1935	only	-	Mar	31	 2:00s	1:00	S
-Rule	Belgium	1936	only	-	Apr	19	 2:00s	1:00	S
-Rule	Belgium	1937	only	-	Apr	 4	 2:00s	1:00	S
-Rule	Belgium	1938	only	-	Mar	27	 2:00s	1:00	S
-Rule	Belgium	1939	only	-	Apr	16	 2:00s	1:00	S
-Rule	Belgium	1939	only	-	Nov	19	 2:00s	0	-
-Rule	Belgium	1940	only	-	Feb	25	 2:00s	1:00	S
-Rule	Belgium	1944	only	-	Sep	17	 2:00s	0	-
-Rule	Belgium	1945	only	-	Apr	 2	 2:00s	1:00	S
-Rule	Belgium	1945	only	-	Sep	16	 2:00s	0	-
-Rule	Belgium	1946	only	-	May	19	 2:00s	1:00	S
-Rule	Belgium	1946	only	-	Oct	 7	 2:00s	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Brussels	0:17:30 -	LMT	1880
-			0:17:30	-	BMT	1892 May  1 12:00 # Brussels MT
-			0:00	-	WET	1914 Nov  8
-			1:00	-	CET	1916 May  1  0:00
-			1:00	C-Eur	CE%sT	1918 Nov 11 11:00u
-			0:00	Belgium	WE%sT	1940 May 20  2:00s
-			1:00	C-Eur	CE%sT	1944 Sep  3
-			1:00	Belgium	CE%sT	1977
-			1:00	EU	CE%sT
-
-# Bosnia and Herzegovina
-# see Serbia and Montenegro
-
-# Bulgaria
-#
-# From Plamen Simenov via Steffen Thorsen (1999-09-09):
-# A document of Government of Bulgaria (No.94/1997) says:
-# EET --> EETDST is in 03:00 Local time in last Sunday of March ...
-# EETDST --> EET is in 04:00 Local time in last Sunday of October
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Bulg	1979	only	-	Mar	31	23:00	1:00	S
-Rule	Bulg	1979	only	-	Oct	 1	 1:00	0	-
-Rule	Bulg	1980	1982	-	Apr	Sat<=7	23:00	1:00	S
-Rule	Bulg	1980	only	-	Sep	29	 1:00	0	-
-Rule	Bulg	1981	only	-	Sep	27	 2:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Sofia	1:33:16 -	LMT	1880
-			1:56:56	-	IMT	1894 Nov 30 # Istanbul MT?
-			2:00	-	EET	1942 Nov  2  3:00
-			1:00	C-Eur	CE%sT	1945 Apr  2  3:00
-			2:00	-	EET	1979 Mar 31 23:00
-			2:00	Bulg	EE%sT	1982 Sep 26  2:00
-			2:00	C-Eur	EE%sT	1991
-			2:00	E-Eur	EE%sT	1997
-			2:00	EU	EE%sT
-
-# Croatia
-# see Serbia and Montenegro
-
-# Cyprus
-# Please see the `asia' file for Asia/Nicosia.
-
-# Czech Republic
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Czech	1945	only	-	Apr	 8	2:00s	1:00	S
-Rule	Czech	1945	only	-	Nov	18	2:00s	0	-
-Rule	Czech	1946	only	-	May	 6	2:00s	1:00	S
-Rule	Czech	1946	1949	-	Oct	Sun>=1	2:00s	0	-
-Rule	Czech	1947	only	-	Apr	20	2:00s	1:00	S
-Rule	Czech	1948	only	-	Apr	18	2:00s	1:00	S
-Rule	Czech	1949	only	-	Apr	 9	2:00s	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Prague	0:57:44 -	LMT	1850
-			0:57:44	-	PMT	1891 Oct     # Prague Mean Time
-			1:00	C-Eur	CE%sT	1944 Sep 17 2:00s
-			1:00	Czech	CE%sT	1979
-			1:00	EU	CE%sT
-
-# Denmark, Faeroe Islands, and Greenland
-
-# From Jesper Norgaard Welen (2005-04-26):
-# http://www.hum.aau.dk/~poe/tid/tine/DanskTid.htm says that the law
-# [introducing standard time] was in effect from 1894-01-01....
-# The page http://www.retsinfo.dk/_GETDOCI_/ACCN/A18930008330-REGL
-# confirms this, and states that the law was put forth 1893-03-29.
-#
-# The EU treaty with effect from 1973:
-# http://www.retsinfo.dk/_GETDOCI_/ACCN/A19722110030-REGL
-#
-# This provoked a new law from 1974 to make possible summer time changes
-# in subsequenet decrees with the law
-# http://www.retsinfo.dk/_GETDOCI_/ACCN/A19740022330-REGL
-#
-# It seems however that no decree was set forward until 1980.  I have
-# not found any decree, but in another related law, the effecting DST
-# changes are stated explicitly to be from 1980-04-06 at 02:00 to
-# 1980-09-28 at 02:00.  If this is true, this differs slightly from
-# the EU rule in that DST runs to 02:00, not 03:00.  We don't know
-# when Denmark began using the EU rule correctly, but we have only
-# confirmation of the 1980-time, so I presume it was correct in 1981:
-# The law is about the management of the extra hour, concerning
-# working hours reported and effect on obligatory-rest rules (which
-# was suspended on that night):
-# http://www.retsinfo.dk/_GETDOCI_/ACCN/C19801120554-REGL
-
-# From Jesper Norgaard Welen (2005-06-11):
-# The Herning Folkeblad (1980-09-26) reported that the night between
-# Saturday and Sunday the clock is set back from three to two.
-
-# From Paul Eggert (2005-06-11):
-# Hence the "02:00" of the 1980 law refers to standard time, not
-# wall-clock time, and so the EU rules were in effect in 1980.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Denmark	1916	only	-	May	14	23:00	1:00	S
-Rule	Denmark	1916	only	-	Sep	30	23:00	0	-
-Rule	Denmark	1940	only	-	May	15	 0:00	1:00	S
-Rule	Denmark	1945	only	-	Apr	 2	 2:00s	1:00	S
-Rule	Denmark	1945	only	-	Aug	15	 2:00s	0	-
-Rule	Denmark	1946	only	-	May	 1	 2:00s	1:00	S
-Rule	Denmark	1946	only	-	Sep	 1	 2:00s	0	-
-Rule	Denmark	1947	only	-	May	 4	 2:00s	1:00	S
-Rule	Denmark	1947	only	-	Aug	10	 2:00s	0	-
-Rule	Denmark	1948	only	-	May	 9	 2:00s	1:00	S
-Rule	Denmark	1948	only	-	Aug	 8	 2:00s	0	-
-#
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Europe/Copenhagen	 0:50:20 -	LMT	1890
-			 0:50:20 -	CMT	1894 Jan  1 # Copenhagen MT
-			 1:00	Denmark	CE%sT	1942 Nov  2 2:00s
-			 1:00	C-Eur	CE%sT	1945 Apr  2 2:00
-			 1:00	Denmark	CE%sT	1980
-			 1:00	EU	CE%sT
-Zone Atlantic/Faeroe	-0:27:04 -	LMT	1908 Jan 11	# Torshavn
-			 0:00	-	WET	1981
-			 0:00	EU	WE%sT
-#
-# From Paul Eggert (2004-10-31):
-# During World War II, Germany maintained secret manned weather stations in
-# East Greenland and Franz Josef Land, but we don't know their time zones.
-# My source for this is Wilhelm Dege's book mentioned under Svalbard.
-#
-# From Paul Eggert (1996-11-22):
-# Greenland joined the EU as part of Denmark, obtained home rule on 1979-05-01,
-# and left the EU on 1985-02-01.  It therefore should have been using EU
-# rules at least through 1984.  Shanks says Scoresbysund and Godthab
-# used C-Eur rules after 1980, but IATA SSIM (1991/1996) says they use EU
-# rules since at least 1991.  Assume EU rules since 1980.
-
-# From Gwillin Law (2001-06-06), citing
-# <http://www.statkart.no/efs/efshefter/2001/efs5-2001.pdf> (2001-03-15),
-# and with translations corrected by Steffen Thorsen:
-#
-# Greenland has four local times, and the relation to UTC
-# is according to the following time line:
-#
-# The military zone near Thule	UTC-4
-# Standard Greenland time	UTC-3
-# Scoresbysund			UTC-1
-# Danmarkshavn			UTC
-#
-# In the military area near Thule and in Danmarkshavn DST will not be
-# introduced.
-
-# From Rives McDow (2001-11-01):
-#
-# I correspond regularly with the Dansk Polarcenter, and wrote them at
-# the time to clarify the situation in Thule.  Unfortunately, I have
-# not heard back from them regarding my recent letter.  [But I have
-# info from earlier correspondence.]
-#
-# According to the center, a very small local time zone around Thule
-# Air Base keeps the time according to UTC-4, implementing daylight
-# savings using North America rules, changing the time at 02:00 local time....
-#
-# The east coast of Greenland north of the community of Scoresbysund
-# uses UTC in the same way as in Iceland, year round, with no dst.
-# There are just a few stations on this coast, including the
-# Danmarkshavn ICAO weather station mentioned in your September 29th
-# email.  The other stations are two sledge patrol stations in
-# Mestersvig and Daneborg, the air force base at Station Nord, and the
-# DPC research station at Zackenberg.
-#
-# Scoresbysund and two small villages nearby keep time UTC-1 and use
-# the same daylight savings time period as in West Greenland (Godthab).
-#
-# The rest of Greenland, including Godthab (this area, although it
-# includes central Greenland, is known as west Greenland), keeps time
-# UTC-3, with daylight savings methods according to European rules.
-#
-# It is common procedure to use UTC 0 in the wilderness of East and
-# North Greenland, because it is mainly Icelandic aircraft operators
-# maintaining traffic in these areas.  However, the official status of
-# this area is that it sticks with Godthab time.  This area might be
-# considered a dual time zone in some respects because of this.
-
-# From Rives McDow (2001-11-19):
-# I heard back from someone stationed at Thule; the time change took place
-# there at 2:00 AM.
-
-# From Paul Eggert (2001-11-19):
-# The 1997 CIA map shows Danmarkshavn on GMT; the 1995 map as like Godthab.
-# For lack of better info, assume they were like Godthab before 1996.
-# startkart.no says Thule does not observe DST, but this is clearly an error,
-# so go with Shanks for all Thule transitions.
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Thule	1991	1992	-	Mar	lastSun	2:00	1:00	D
-Rule	Thule	1991	1992	-	Sep	lastSun	2:00	0	S
-Rule	Thule	1993	max	-	Apr	Sun>=1	2:00	1:00	D
-Rule	Thule	1993	max	-	Oct	lastSun	2:00	0	S
-#
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Danmarkshavn -1:14:40 -	LMT	1916 Jul 28
-			-3:00	-	WGT	1980 Apr  6 2:00
-			-3:00	EU	WG%sT	1996
-			0:00	-	GMT
-Zone America/Scoresbysund -1:29:00 -	LMT	1916 Jul 28 # Ittoqqortoormiit
-			-2:00	-	CGT	1980 Apr  6 2:00
-			-2:00	C-Eur	CG%sT	1981 Mar 29
-			-1:00	EU	EG%sT
-Zone America/Godthab	-3:26:56 -	LMT	1916 Jul 28 # Nuuk
-			-3:00	-	WGT	1980 Apr  6 2:00
-			-3:00	EU	WG%sT
-Zone America/Thule	-4:35:08 -	LMT	1916 Jul 28 # Pituffik air base
-			-4:00	Thule	A%sT
-
-# Estonia
-# From Peter Ilieve (1994-10-15):
-# A relative in Tallinn confirms the accuracy of the data for 1989 onwards
-# [through 1994] and gives the legal authority for it,
-# a regulation of the Government of Estonia, No. 111 of 1989....
-#
-# From Peter Ilieve (1996-10-28):
-# [IATA SSIM (1992/1996) claims that the Baltic republics switch at 01:00s,
-# but a relative confirms that Estonia still switches at 02:00s, writing:]
-# ``I do not [know] exactly but there are some little different
-# (confusing) rules for International Air and Railway Transport Schedules
-# conversion in Sunday connected with end of summer time in Estonia....
-# A discussion is running about the summer time efficiency and effect on
-# human physiology.  It seems that Estonia maybe will not change to
-# summer time next spring.''
-
-# From Peter Ilieve (1998-11-04), heavily edited:
-# <a href="http://trip.rk.ee/cgi-bin/thw?${BASE}=akt&${OOHTML}=rtd&TA=1998&TO=1&AN=1390">
-# The 1998-09-22 Estonian time law
-# </a>
-# refers to the Eighth Directive and cites the association agreement between
-# the EU and Estonia, ratified by the Estonian law (RT II 1995, 22--27, 120).
-#
-# I also asked [my relative] whether they use any standard abbreviation
-# for their standard and summer times. He says no, they use "suveaeg"
-# (summer time) and "talveaeg" (winter time).
-
-# From <a href="http://www.baltictimes.com/">The Baltic Times</a> (1999-09-09)
-# via Steffen Thorsen:
-# This year will mark the last time Estonia shifts to summer time,
-# a council of the ruling coalition announced Sept. 6....
-# But what this could mean for Estonia's chances of joining the European
-# Union are still unclear.  In 1994, the EU declared summer time compulsory
-# for all member states until 2001.  Brussels has yet to decide what to do
-# after that.
-
-# From Mart Oruaas (2000-01-29):
-# Regulation no. 301 (1999-10-12) obsoletes previous regulation
-# no. 206 (1998-09-22) and thus sticks Estonia to +02:00 GMT for all
-# the year round.  The regulation is effective 1999-11-01.
-
-# From Toomas Soome (2002-02-21):
-# The Estonian government has changed once again timezone politics.
-# Now we are using again EU rules.
-#
-# From Urmet Jaanes (2002-03-28):
-# The legislative reference is Government decree No. 84 on 2002-02-21.
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Tallinn	1:39:00	-	LMT	1880
-			1:39:00	-	TMT	1918 Feb # Tallinn Mean Time
-			1:00	C-Eur	CE%sT	1919 Jul
-			1:39:00	-	TMT	1921 May
-			2:00	-	EET	1940 Aug  6
-			3:00	-	MSK	1941 Sep 15
-			1:00	C-Eur	CE%sT	1944 Sep 22
-			3:00	Russia	MSK/MSD	1989 Mar 26 2:00s
-			2:00	1:00	EEST	1989 Sep 24 2:00s
-			2:00	C-Eur	EE%sT	1998 Sep 22
-			2:00	EU	EE%sT	1999 Nov  1
-			2:00	-	EET	2002 Feb 21
-			2:00	EU	EE%sT
-
-# Finland
-#
-# From Hannu Strang (25 Sep 1994 06:03:37 UTC):
-# Well, here in Helsinki we're just changing from summer time to regular one,
-# and it's supposed to change at 4am...
-#
-# From Paul Eggert (25 Sep 1994):
-# Shanks says Finland has switched at 02:00 standard time since 1981.
-# Go with Strang instead.
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Finland	1942	only	-	Apr	3	0:00	1:00	S
-Rule	Finland	1942	only	-	Oct	3	0:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Helsinki	1:39:52 -	LMT	1878 May 31
-			1:39:52	-	HMT	1921 May    # Helsinki Mean Time
-			2:00	Finland	EE%sT	1981 Mar 29 2:00
-			2:00	EU	EE%sT
-
-# Aaland Is
-Link	Europe/Helsinki	Europe/Mariehamn
-
-
-# France
-
-# From Ciro Discepolo (2000-12-20):
-#
-# Henri Le Corre, Regimes Horaires pour le monde entier, Editions
-# Traditionnelles - Paris 2 books, 1993
-#
-# Gabriel, Traite de l'heure dans le monde, Guy Tredaniel editeur,
-# Paris, 1991
-#
-# Francoise Gauquelin, Problemes de l'heure resolus en astrologie,
-# Guy tredaniel, Paris 1987
-
-
-#
-# Shanks seems to use `24:00' ambiguously; we resolve it with Whitman.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	France	1916	only	-	Jun	14	23:00s	1:00	S
-Rule	France	1916	1919	-	Oct	Sun>=1	23:00s	0	-
-Rule	France	1917	only	-	Mar	24	23:00s	1:00	S
-Rule	France	1918	only	-	Mar	 9	23:00s	1:00	S
-Rule	France	1919	only	-	Mar	 1	23:00s	1:00	S
-Rule	France	1920	only	-	Feb	14	23:00s	1:00	S
-Rule	France	1920	only	-	Oct	23	23:00s	0	-
-Rule	France	1921	only	-	Mar	14	23:00s	1:00	S
-Rule	France	1921	only	-	Oct	25	23:00s	0	-
-Rule	France	1922	only	-	Mar	25	23:00s	1:00	S
-# DSH writes that a law of 1923-05-24 specified 3rd Sat in Apr at 23:00 to 1st
-# Sat in Oct at 24:00; and that in 1930, because of Easter, the transitions
-# were Apr 12 and Oct 5.  Go with Shanks.
-Rule	France	1922	1938	-	Oct	Sat>=1	23:00s	0	-
-Rule	France	1923	only	-	May	26	23:00s	1:00	S
-Rule	France	1924	only	-	Mar	29	23:00s	1:00	S
-Rule	France	1925	only	-	Apr	 4	23:00s	1:00	S
-Rule	France	1926	only	-	Apr	17	23:00s	1:00	S
-Rule	France	1927	only	-	Apr	 9	23:00s	1:00	S
-Rule	France	1928	only	-	Apr	14	23:00s	1:00	S
-Rule	France	1929	only	-	Apr	20	23:00s	1:00	S
-Rule	France	1930	only	-	Apr	12	23:00s	1:00	S
-Rule	France	1931	only	-	Apr	18	23:00s	1:00	S
-Rule	France	1932	only	-	Apr	 2	23:00s	1:00	S
-Rule	France	1933	only	-	Mar	25	23:00s	1:00	S
-Rule	France	1934	only	-	Apr	 7	23:00s	1:00	S
-Rule	France	1935	only	-	Mar	30	23:00s	1:00	S
-Rule	France	1936	only	-	Apr	18	23:00s	1:00	S
-Rule	France	1937	only	-	Apr	 3	23:00s	1:00	S
-Rule	France	1938	only	-	Mar	26	23:00s	1:00	S
-Rule	France	1939	only	-	Apr	15	23:00s	1:00	S
-Rule	France	1939	only	-	Nov	18	23:00s	0	-
-Rule	France	1940	only	-	Feb	25	 2:00	1:00	S
-# The French rules for 1941-1944 were not used in Paris, but Shanks writes
-# that they were used in Monaco and in many French locations.
-# Le Corre writes that the upper limit of the free zone was Arneguy, Orthez,
-# Mont-de-Marsan, Bazas, Langon, Lamotte-Montravel, Marouil, La
-# Rochefoucault, Champagne-Mouton, La Roche-Posay, La Haye-Decartes,
-# Loches, Montrichard, Vierzon, Bourges, Moulins, Digoin,
-# Paray-le-Monial, Montceau-les-Mines, Chalons-sur-Saone, Arbois,
-# Dole, Morez, St-Claude, and Collognes (Haute-Savioe).
-Rule	France	1941	only	-	May	 5	 0:00	2:00	M # Midsummer
-# Shanks says this transition occurred at Oct 6 1:00,
-# but go with Denis Excoffier (1997-12-12),
-# who quotes the Ephemerides Astronomiques for 1998 from Bureau des Longitudes
-# as saying 5/10/41 22hUT.
-Rule	France	1941	only	-	Oct	 6	 0:00	1:00	S
-Rule	France	1942	only	-	Mar	 9	 0:00	2:00	M
-Rule	France	1942	only	-	Nov	 2	 3:00	1:00	S
-Rule	France	1943	only	-	Mar	29	 2:00	2:00	M
-Rule	France	1943	only	-	Oct	 4	 3:00	1:00	S
-Rule	France	1944	only	-	Apr	 3	 2:00	2:00	M
-Rule	France	1944	only	-	Oct	 8	 1:00	1:00	S
-Rule	France	1945	only	-	Apr	 2	 2:00	2:00	M
-Rule	France	1945	only	-	Sep	16	 3:00	0	-
-# Shanks gives Mar 28 2:00 and Sep 26 3:00;
-# go with Excoffier's 28/3/76 0hUT and 25/9/76 23hUT.
-Rule	France	1976	only	-	Mar	28	 1:00	1:00	S
-Rule	France	1976	only	-	Sep	26	 1:00	0	-
-# Shanks gives 0:09 for Paris Mean Time, and Whitman gives 0:09:05,
-# but Howse quotes the actual French legislation as saying 0:09:21.
-# Go with Howse.  Howse writes that the time in France was officially based
-# on PMT-0:09:21 until 1978-08-09, when the time base finally switched to UTC.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Paris	0:09:21 -	LMT	1891 Mar 15  0:01
-			0:09:21	-	PMT	1911 Mar 11  0:01  # Paris MT
-# Shanks gives 1940 Jun 14 0:00; go with Excoffier and Le Corre.
-			0:00	France	WE%sT	1940 Jun 14 23:00
-# Le Corre says Paris stuck with occupied-France time after the liberation;
-# go with Shanks.
-			1:00	C-Eur	CE%sT	1944 Aug 25
-			0:00	France	WE%sT	1945 Sep 16  3:00
-			1:00	France	CE%sT	1977
-			1:00	EU	CE%sT
-
-# Germany
-
-# From Markus Kuhn (1998-09-29):
-# The German time zone web site by the Physikalisch-Technische
-# Bundesanstalt contains DST information back to 1916.
-# [See tz-link.htm for the URL.]
-
-# From Joerg Schilling (2002-10-23):
-# In 1945, Berlin was switched to Moscow Summer time (GMT+4) by <a
-# href="http://www.dhm.de/lemo/html/biografien/BersarinNikolai/">
-# General [Nikolai] Bersarin</a>.
-
-# From Paul Eggert (2003-03-08):
-# <a href="http://www.parlament-berlin.de/pds-fraktion.nsf/727459127c8b66ee8525662300459099/defc77cb784f180ac1256c2b0030274b/$FILE/bersarint.pdf">
-# says that Bersarin issued an order to use Moscow time on May 20.
-# However, Moscow did not observe daylight saving in 1945, so
-# this was equivalent to CEMT (GMT+3), not GMT+4.
-
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Germany	1945	only	-	Apr	 2	2:00s	1:00	S
-Rule	Germany	1945	only	-	May	24	2:00	2:00	M # Midsummer
-Rule	Germany	1945	only	-	Sep	24	3:00	1:00	S
-Rule	Germany	1945	only	-	Nov	18	2:00s	0	-
-Rule	Germany	1946	only	-	Apr	14	2:00s	1:00	S
-Rule	Germany	1946	only	-	Oct	 7	2:00s	0	-
-Rule	Germany	1947	1949	-	Oct	Sun>=1	2:00s	0	-
-Rule	Germany	1947	only	-	Apr	 6	2:00s	1:00	S
-Rule	Germany	1947	only	-	May	11	2:00s	2:00	M
-Rule	Germany	1947	only	-	Jun	29	3:00	1:00	S
-Rule	Germany	1948	only	-	Apr	18	2:00s	1:00	S
-Rule	Germany	1949	only	-	Apr	10	2:00s	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Berlin	0:53:28 -	LMT	1893 Apr
-			1:00	C-Eur	CE%sT	1945 Apr 2 2:00
-			1:00	Germany	CE%sT	1980
-			1:00	EU	CE%sT
-
-# Georgia
-# Please see the "asia" file for Asia/Tbilisi.
-# Herodotus (Histories, IV.45) says Georgia north of the Phasis (now Rioni)
-# is in Europe.  Our reference location Tbilisi is in the Asian part.
-
-# Gibraltar
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Europe/Gibraltar	-0:21:24 -	LMT	1880 Aug  2
-			0:00	GB-Eire	%s	1957 Apr 14 2:00
-			1:00	-	CET	1982
-			1:00	EU	CE%sT
-
-# Greece
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-# Whitman gives 1932 Jul 5 - Nov 1; go with Shanks.
-Rule	Greece	1932	only	-	Jul	 7	0:00	1:00	S
-Rule	Greece	1932	only	-	Sep	 1	0:00	0	-
-# Whitman gives 1941 Apr 25 - ?; go with Shanks.
-Rule	Greece	1941	only	-	Apr	 7	0:00	1:00	S
-# Whitman gives 1942 Feb 2 - ?; go with Shanks.
-Rule	Greece	1942	only	-	Nov	 2	3:00	0	-
-Rule	Greece	1943	only	-	Mar	30	0:00	1:00	S
-Rule	Greece	1943	only	-	Oct	 4	0:00	0	-
-# Whitman gives 1944 Oct 3 - Oct 31; go with Shanks.
-Rule	Greece	1952	only	-	Jul	 1	0:00	1:00	S
-Rule	Greece	1952	only	-	Nov	 2	0:00	0	-
-Rule	Greece	1975	only	-	Apr	12	0:00s	1:00	S
-Rule	Greece	1975	only	-	Nov	26	0:00s	0	-
-Rule	Greece	1976	only	-	Apr	11	2:00s	1:00	S
-Rule	Greece	1976	only	-	Oct	10	2:00s	0	-
-Rule	Greece	1977	1978	-	Apr	Sun>=1	2:00s	1:00	S
-Rule	Greece	1977	only	-	Sep	26	2:00s	0	-
-Rule	Greece	1978	only	-	Sep	24	4:00	0	-
-Rule	Greece	1979	only	-	Apr	 1	9:00	1:00	S
-Rule	Greece	1979	only	-	Sep	29	2:00	0	-
-Rule	Greece	1980	only	-	Apr	 1	0:00	1:00	S
-Rule	Greece	1980	only	-	Sep	28	0:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Athens	1:34:52 -	LMT	1895 Sep 14
-			1:34:52	-	AMT	1916 Jul 28 0:01     # Athens MT
-			2:00	Greece	EE%sT	1941 Apr 30
-			1:00	Greece	CE%sT	1944 Apr  4
-			2:00	Greece	EE%sT	1981
-			# Shanks says they switched to C-Eur in 1981;
-			# go with EU instead, since Greece joined it on Jan 1.
-			2:00	EU	EE%sT
-
-# Hungary
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Hungary	1918	only	-	Apr	 1	 3:00	1:00	S
-Rule	Hungary	1918	only	-	Sep	29	 3:00	0	-
-Rule	Hungary	1919	only	-	Apr	15	 3:00	1:00	S
-Rule	Hungary	1919	only	-	Sep	15	 3:00	0	-
-Rule	Hungary	1920	only	-	Apr	 5	 3:00	1:00	S
-Rule	Hungary	1920	only	-	Sep	30	 3:00	0	-
-Rule	Hungary	1945	only	-	May	 1	23:00	1:00	S
-Rule	Hungary	1945	only	-	Nov	 3	 0:00	0	-
-Rule	Hungary	1946	only	-	Mar	31	 2:00s	1:00	S
-Rule	Hungary	1946	1949	-	Oct	Sun>=1	 2:00s	0	-
-Rule	Hungary	1947	1949	-	Apr	Sun>=4	 2:00s	1:00	S
-Rule	Hungary	1950	only	-	Apr	17	 2:00s	1:00	S
-Rule	Hungary	1950	only	-	Oct	23	 2:00s	0	-
-Rule	Hungary	1954	1955	-	May	23	 0:00	1:00	S
-Rule	Hungary	1954	1955	-	Oct	 3	 0:00	0	-
-Rule	Hungary	1956	only	-	Jun	Sun>=1	 0:00	1:00	S
-Rule	Hungary	1956	only	-	Sep	lastSun	 0:00	0	-
-Rule	Hungary	1957	only	-	Jun	Sun>=1	 1:00	1:00	S
-Rule	Hungary	1957	only	-	Sep	lastSun	 3:00	0	-
-Rule	Hungary	1980	only	-	Apr	 6	 1:00	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Budapest	1:16:20 -	LMT	1890 Oct
-			1:00	C-Eur	CE%sT	1918
-			1:00	Hungary	CE%sT	1941 Apr  6  2:00
-			1:00	C-Eur	CE%sT	1945 May  1 23:00
-			1:00	Hungary	CE%sT	1980 Sep 28  2:00s
-			1:00	EU	CE%sT
-
-# Iceland
-#
-# From Adam David (1993-11-06):
-# The name of the timezone in Iceland for system / mail / news purposes is GMT.
-#
-# (1993-12-05):
-# This material is paraphrased from the 1988 edition of the University of
-# Iceland Almanak.
-#
-# From January 1st, 1908 the whole of Iceland was standardised at 1 hour
-# behind GMT. Previously, local mean solar time was used in different parts
-# of Iceland, the almanak had been based on Reykjavik mean solar time which
-# was 1 hour and 28 minutes behind GMT.
-#
-# "first day of winter" referred to [below] means the first day of the 26 weeks
-# of winter, according to the old icelandic calendar that dates back to the
-# time the norsemen first settled Iceland.  The first day of winter is always
-# Saturday, but is not dependent on the Julian or Gregorian calendars.
-#
-# (1993-12-10):
-# I have a reference from the Oxford Icelandic-English dictionary for the
-# beginning of winter, which ties it to the ecclesiastical calendar (and thus
-# to the julian/gregorian calendar) over the period in question.
-#	the winter begins on the Saturday next before St. Luke's day
-#	(old style), or on St. Luke's day, if a Saturday.
-# St. Luke's day ought to be traceable from ecclesiastical sources. "old style"
-# might be a reference to the Julian calendar as opposed to Gregorian, or it
-# might mean something else (???).
-#
-# From Paul Eggert (1999-10-29):
-# The Iceland Almanak, Shanks and Whitman disagree on many points.
-# We go with the Almanak, except for one claim from Shanks, namely that
-# Reykavik was 21W57 from 1837 to 1908, local mean time before that.
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Iceland	1917	1918	-	Feb	19	23:00	1:00	S
-Rule	Iceland	1917	only	-	Oct	21	 1:00	0	-
-Rule	Iceland	1918	only	-	Nov	16	 1:00	0	-
-Rule	Iceland	1939	only	-	Apr	29	23:00	1:00	S
-Rule	Iceland	1939	only	-	Nov	29	 2:00	0	-
-Rule	Iceland	1940	only	-	Feb	25	 2:00	1:00	S
-Rule	Iceland	1940	only	-	Nov	 3	 2:00	0	-
-Rule	Iceland	1941	only	-	Mar	 2	 1:00s	1:00	S
-Rule	Iceland	1941	only	-	Nov	 2	 1:00s	0	-
-Rule	Iceland	1942	only	-	Mar	 8	 1:00s	1:00	S
-Rule	Iceland	1942	only	-	Oct	25	 1:00s	0	-
-# 1943-1946 - first Sunday in March until first Sunday in winter
-Rule	Iceland	1943	1946	-	Mar	Sun>=1	 1:00s	1:00	S
-Rule	Iceland	1943	1948	-	Oct	Sun>=22	 1:00s	0	-
-# 1947-1967 - first Sunday in April until first Sunday in winter
-Rule	Iceland	1947	1967	-	Apr	Sun>=1	 1:00s	1:00	S
-# 1949 Oct transition delayed by 1 week
-Rule	Iceland	1949	only	-	Oct	30	 1:00s	0	-
-Rule	Iceland	1950	1966	-	Oct	Sun>=22	 1:00s	0	-
-Rule	Iceland	1967	only	-	Oct	29	 1:00s	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Atlantic/Reykjavik	-1:27:24 -	LMT	1837
-			-1:27:48 -	RMT	1908 # Reykjavik Mean Time?
-			-1:00	Iceland	IS%sT	1968 Apr 7 1:00s
-			 0:00	-	GMT
-
-# Italy
-#
-# From Paul Eggert (2001-03-06):
-# Sicily and Sardinia each had their own time zones from 1866 to 1893,
-# called Palermo Time (+00:53:28) and Cagliari Time (+00:36:32).
-# During World War II, German-controlled Italy used German time.
-# But these events all occurred before the 1970 cutoff,
-# so record only the time in Rome.
-#
-# From Paul Eggert (1996-05-06):
-# For Italian DST we have three sources: Shanks, Whitman, and F. Pollastri
-# <a href="http://toi.iriti.cnr.it/uk/ienitlt.html">
-# Day-light Saving Time in Italy (1996-03-14)
-# </a>
-# (`FP' below), taken from an Italian National Electrotechnical Institute
-# publication. When the three sources disagree, guess who's right, as follows:
-#
-# year	FP	Shanks (S)	Whitman (W)	Go with:
-# 1916	06-03	06-03 24:00	06-03 00:00	FP & W
-#	09-30	09-30 24:00	09-30 01:00	FP; guess 24:00s
-# 1917	04-01	03-31 24:00	03-31 00:00	FP & S
-#	09-30	09-29 24:00	09-30 01:00	FP & W
-# 1918	03-09	03-09 24:00	03-09 00:00	FP & S
-#	10-06	10-05 24:00	10-06 01:00	FP & W
-# 1919	03-01	03-01 24:00	03-01 00:00	FP & S
-#	10-04	10-04 24:00	10-04 01:00	FP; guess 24:00s
-# 1920	03-20	03-20 24:00	03-20 00:00	FP & S
-#	09-18	09-18 24:00	10-01 01:00	FP; guess 24:00s
-# 1944	04-02	04-03 02:00			S (see C-Eur)
-#	09-16	10-02 03:00			FP; guess 24:00s
-# 1945	09-14	09-16 24:00			FP; guess 24:00s
-# 1970	05-21	05-31 00:00			S
-#	09-20	09-27 00:00			S
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Italy	1916	only	-	Jun	 3	0:00s	1:00	S
-Rule	Italy	1916	only	-	Oct	 1	0:00s	0	-
-Rule	Italy	1917	only	-	Apr	 1	0:00s	1:00	S
-Rule	Italy	1917	only	-	Sep	30	0:00s	0	-
-Rule	Italy	1918	only	-	Mar	10	0:00s	1:00	S
-Rule	Italy	1918	1919	-	Oct	Sun>=1	0:00s	0	-
-Rule	Italy	1919	only	-	Mar	 2	0:00s	1:00	S
-Rule	Italy	1920	only	-	Mar	21	0:00s	1:00	S
-Rule	Italy	1920	only	-	Sep	19	0:00s	0	-
-Rule	Italy	1940	only	-	Jun	15	0:00s	1:00	S
-Rule	Italy	1944	only	-	Sep	17	0:00s	0	-
-Rule	Italy	1945	only	-	Apr	 2	2:00	1:00	S
-Rule	Italy	1945	only	-	Sep	15	0:00s	0	-
-Rule	Italy	1946	only	-	Mar	17	2:00s	1:00	S
-Rule	Italy	1946	only	-	Oct	 6	2:00s	0	-
-Rule	Italy	1947	only	-	Mar	16	0:00s	1:00	S
-Rule	Italy	1947	only	-	Oct	 5	0:00s	0	-
-Rule	Italy	1948	only	-	Feb	29	2:00s	1:00	S
-Rule	Italy	1948	only	-	Oct	 3	2:00s	0	-
-Rule	Italy	1966	1968	-	May	Sun>=22	0:00	1:00	S
-Rule	Italy	1966	1969	-	Sep	Sun>=22	0:00	0	-
-Rule	Italy	1969	only	-	Jun	 1	0:00	1:00	S
-Rule	Italy	1970	only	-	May	31	0:00	1:00	S
-Rule	Italy	1970	only	-	Sep	lastSun	0:00	0	-
-Rule	Italy	1971	1972	-	May	Sun>=22	0:00	1:00	S
-Rule	Italy	1971	only	-	Sep	lastSun	1:00	0	-
-Rule	Italy	1972	only	-	Oct	 1	0:00	0	-
-Rule	Italy	1973	only	-	Jun	 3	0:00	1:00	S
-Rule	Italy	1973	1974	-	Sep	lastSun	0:00	0	-
-Rule	Italy	1974	only	-	May	26	0:00	1:00	S
-Rule	Italy	1975	only	-	Jun	 1	0:00s	1:00	S
-Rule	Italy	1975	1977	-	Sep	lastSun	0:00s	0	-
-Rule	Italy	1976	only	-	May	30	0:00s	1:00	S
-Rule	Italy	1977	1979	-	May	Sun>=22	0:00s	1:00	S
-Rule	Italy	1978	only	-	Oct	 1	0:00s	0	-
-Rule	Italy	1979	only	-	Sep	30	0:00s	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Rome	0:49:56 -	LMT	1866 Sep 22
-			0:49:56	-	RMT	1893 Nov	# Rome Mean Time
-			1:00	Italy	CE%sT	1942 Nov  2 2:00s
-			1:00	C-Eur	CE%sT	1944 Jul
-			1:00	Italy	CE%sT	1980
-			1:00	EU	CE%sT
-
-Link	Europe/Rome	Europe/Vatican
-Link	Europe/Rome	Europe/San_Marino
-
-# Latvia
-
-# From Liene Kanepe (1998-09-17):
-
-# I asked about this matter Scientific Secretary of the Institute of Astronomy
-# of The University of Latvia Dr. paed Mr. Ilgonis Vilks. I also searched the
-# correct data in juridical acts and I found some juridical documents about
-# changes in the counting of time in Latvia from 1981....
-#
-# Act No.35 of the Council of Ministers of Latvian SSR of 1981-01-22 ...
-# according to the Act No.925 of the Council of Ministers of USSR of 1980-10-24
-# ...: all year round the time of 2nd time zone + 1 hour, in addition turning
-# the hands of the clock 1 hour forward on 1 April at 00:00 (GMT 31 March 21:00)
-# and 1 hour backward on the 1 October at 00:00 (GMT 30 September 20:00).
-#
-# Act No.592 of the Council of Ministers of Latvian SSR of 1984-09-24 ...
-# according to the Act No.967 of the Council of Ministers of USSR of 1984-09-13
-# ...: all year round the time of 2nd time zone + 1 hour, in addition turning
-# the hands of the clock 1 hour forward on the last Sunday of March at 02:00
-# (GMT 23:00 on the previous day) and 1 hour backward on the last Sunday of
-# September at 03:00 (GMT 23:00 on the previous day).
-#
-# Act No.81 of the Council of Ministers of Latvian SSR of 1989-03-22 ...
-# according to the Act No.227 of the Council of Ministers of USSR of 1989-03-14
-# ...: since the last Sunday of March 1989 in Lithuanian SSR, Latvian SSR,
-# Estonian SSR and Kaliningrad region of Russian Federation all year round the
-# time of 2nd time zone (Moscow time minus one hour). On the territory of Latvia
-# transition to summer time is performed on the last Sunday of March at 02:00
-# (GMT 00:00), turning the hands of the clock 1 hour forward.  The end of
-# daylight saving time is performed on the last Sunday of September at 03:00
-# (GMT 00:00), turning the hands of the clock 1 hour backward. Exception is
-# 1989-03-26, when we must not turn the hands of the clock....
-#
-# The Regulations of the Cabinet of Ministers of the Republic of Latvia of
-# 1997-01-21 on transition to Summer time ... established the same order of
-# daylight savings time settings as in the States of the European Union.
-
-# From Andrei Ivanov (2000-03-06):
-# This year Latvia will not switch to Daylight Savings Time (as specified in
-# <a href="http://www.lv-laiks.lv/wwwraksti/2000/071072/vd4.htm">
-# The Regulations of the Cabinet of Ministers of the Rep. of Latvia of
-# 29-Feb-2000 (#79)</a>, in Latvian for subscribers only).
-
-# <a href="http://www.rferl.org/newsline/2001/01/3-CEE/cee-030101.html">
-# From RFE/RL Newsline (2001-01-03), noted after a heads-up by Rives McDow:
-# </a>
-# The Latvian government on 2 January decided that the country will
-# institute daylight-saving time this spring, LETA reported.
-# Last February the three Baltic states decided not to turn back their
-# clocks one hour in the spring....
-# Minister of Economy Aigars Kalvitis noted that Latvia had too few
-# daylight hours and thus decided to comply with a draft European
-# Commission directive that provides for instituting daylight-saving
-# time in EU countries between 2002 and 2006. The Latvian government
-# urged Lithuania and Estonia to adopt a similar time policy, but it
-# appears that they will not do so....
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Latvia	1989	1996	-	Mar	lastSun	 2:00s	1:00	S
-Rule	Latvia	1989	1996	-	Sep	lastSun	 2:00s	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Riga	1:36:24	-	LMT	1880
-			1:36:24	-	RMT	1918 Apr 15 2:00 #Riga Mean Time
-			1:36:24	1:00	LST	1918 Sep 16 3:00 #Latvian Summer
-			1:36:24	-	RMT	1919 Apr  1 2:00
-			1:36:24	1:00	LST	1919 May 22 3:00
-			1:36:24	-	RMT	1926 May 11
-			2:00	-	EET	1940 Aug  5
-			3:00	-	MSK	1941 Jul
-			1:00	C-Eur	CE%sT	1944 Oct 13
-			3:00	Russia	MSK/MSD	1989 Mar lastSun 2:00s
-			2:00	1:00	EEST	1989 Sep lastSun 2:00s
-			2:00	Latvia	EE%sT	1997 Jan 21
-			2:00	EU	EE%sT	2000 Feb 29
-			2:00	-	EET	2001 Jan  2
-			2:00	EU	EE%sT
-
-# Liechtenstein
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Vaduz	0:38:04 -	LMT	1894 Jun
-			1:00	-	CET	1981
-			1:00	EU	CE%sT
-
-# Lithuania
-
-# From Paul Eggert (1996-11-22):
-# IATA SSIM (1992/1996) says Lithuania uses W-Eur rules, but since it is
-# known to be wrong about Estonia and Latvia, assume it's wrong here too.
-
-# From Marius Gedminas (1998-08-07):
-# I would like to inform that in this year Lithuanian time zone
-# (Europe/Vilnius) was changed.
-
-# From <a href="http://www.elta.lt/">ELTA</a> No. 972 (2582) (1999-09-29),
-# via Steffen Thorsen:
-# Lithuania has shifted back to the second time zone (GMT plus two hours)
-# to be valid here starting from October 31,
-# as decided by the national government on Wednesday....
-# The Lithuanian government also announced plans to consider a
-# motion to give up shifting to summer time in spring, as it was
-# already done by Estonia.
-
-# From the <a href="http://www.tourism.lt/informa/ff.htm">
-# Fact File, Lithuanian State Department of Tourism
-# </a> (2000-03-27): Local time is GMT+2 hours ..., no daylight saving.
-
-# From a user via Klaus Marten (2003-02-07):
-# As a candidate for membership of the European Union, Lithuania will
-# observe Summer Time in 2003, changing its clocks at the times laid
-# down in EU Directive 2000/84 of 19.I.01 (i.e. at the same times as its
-# neighbour Latvia). The text of the Lithuanian government Order of
-# 7.XI.02 to this effect can be found at
-# http://www.lrvk.lt/nut/11/n1749.htm
-
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Vilnius	1:41:16	-	LMT	1880
-			1:24:00	-	WMT	1917	    # Warsaw Mean Time
-			1:35:36	-	KMT	1919 Oct 10 # Kaunas Mean Time
-			1:00	-	CET	1920 Jul 12
-			2:00	-	EET	1920 Oct  9
-			1:00	-	CET	1940 Aug  3
-			3:00	-	MSK	1941 Jun 24
-			1:00	C-Eur	CE%sT	1944 Aug
-			3:00	Russia	MSK/MSD	1991 Mar 31 2:00s
-			2:00	1:00	EEST	1991 Sep 29 2:00s
-			2:00	C-Eur	EE%sT	1998
-			2:00	-	EET	1998 Mar 29 1:00u
-			1:00	EU	CE%sT	1999 Oct 31 1:00u
-			2:00	-	EET	2003 Jan  1
-			2:00	EU	EE%sT
-
-# Luxembourg
-# Whitman disagrees with most of these dates in minor ways; go with Shanks.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Lux	1916	only	-	May	14	23:00	1:00	S
-Rule	Lux	1916	only	-	Oct	 1	 1:00	0	-
-Rule	Lux	1917	only	-	Apr	28	23:00	1:00	S
-Rule	Lux	1917	only	-	Sep	17	 1:00	0	-
-Rule	Lux	1918	only	-	Apr	Mon>=15	 2:00s	1:00	S
-Rule	Lux	1918	only	-	Sep	Mon>=15	 2:00s	0	-
-Rule	Lux	1919	only	-	Mar	 1	23:00	1:00	S
-Rule	Lux	1919	only	-	Oct	 5	 3:00	0	-
-Rule	Lux	1920	only	-	Feb	14	23:00	1:00	S
-Rule	Lux	1920	only	-	Oct	24	 2:00	0	-
-Rule	Lux	1921	only	-	Mar	14	23:00	1:00	S
-Rule	Lux	1921	only	-	Oct	26	 2:00	0	-
-Rule	Lux	1922	only	-	Mar	25	23:00	1:00	S
-Rule	Lux	1922	only	-	Oct	Sun>=2	 1:00	0	-
-Rule	Lux	1923	only	-	Apr	21	23:00	1:00	S
-Rule	Lux	1923	only	-	Oct	Sun>=2	 2:00	0	-
-Rule	Lux	1924	only	-	Mar	29	23:00	1:00	S
-Rule	Lux	1924	1928	-	Oct	Sun>=2	 1:00	0	-
-Rule	Lux	1925	only	-	Apr	 5	23:00	1:00	S
-Rule	Lux	1926	only	-	Apr	17	23:00	1:00	S
-Rule	Lux	1927	only	-	Apr	 9	23:00	1:00	S
-Rule	Lux	1928	only	-	Apr	14	23:00	1:00	S
-Rule	Lux	1929	only	-	Apr	20	23:00	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Europe/Luxembourg	0:24:36 -	LMT	1904 Jun
-			1:00	Lux	CE%sT	1918 Nov 25
-			0:00	Lux	WE%sT	1929 Oct  6 2:00s
-			0:00	Belgium	WE%sT	1940 May 14 3:00
-			1:00	C-Eur	WE%sT	1944 Sep 18 3:00
-			1:00	Belgium	CE%sT	1977
-			1:00	EU	CE%sT
-
-# Macedonia
-# see Serbia and Montenegro
-
-# Malta
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Malta	1973	only	-	Mar	31	0:00s	1:00	S
-Rule	Malta	1973	only	-	Sep	29	0:00s	0	-
-Rule	Malta	1974	only	-	Apr	21	0:00s	1:00	S
-Rule	Malta	1974	only	-	Sep	16	0:00s	0	-
-Rule	Malta	1975	1979	-	Apr	Sun>=15	2:00	1:00	S
-Rule	Malta	1975	1980	-	Sep	Sun>=15	2:00	0	-
-Rule	Malta	1980	only	-	Mar	31	2:00	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Malta	0:58:04 -	LMT	1893 Nov  2	# Valletta
-			1:00	Italy	CE%sT	1942 Nov  2 2:00s
-			1:00	C-Eur	CE%sT	1945 Apr  2 2:00s
-			1:00	Italy	CE%sT	1973 Mar 31
-			1:00	Malta	CE%sT	1981
-			1:00	EU	CE%sT
-
-# Moldova
-
-# From Paul Eggert (2001-02-11):
-# A previous version of this database followed Shanks, who writes that
-# Tiraspol switched to Moscow time on 1992-01-19 at 02:00.
-# However, this is most likely an error, as Moldova declared independence
-# on 1991-08-27 (the 1992-01-19 date is that of a Russian decree).
-# In early 1992 there was large-scale interethnic violence in the area
-# and it's possible that some Russophones continued to observe Moscow time.
-# But [two people] separately reported via
-# Jesper Norgaard that as of 2001-01-24 Tiraspol was like Chisinau.
-# The Tiraspol entry has therefore been removed for now.
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Chisinau	1:55:20 -	LMT	1880
-			1:55	-	CMT	1918 Feb 15 # Chisinau MT
-			1:44:24	-	BMT	1931 Jul 24 # Bucharest MT
-			2:00	Romania	EE%sT	1940 Aug 15
-			2:00	1:00	EEST	1941 Jul 17
-			1:00	C-Eur	CE%sT	1944 Aug 24
-			3:00	Russia	MSK/MSD	1990
-			3:00	-	MSK	1990 May 6
-			2:00	-	EET	1991
-			2:00	Russia	EE%sT	1992
-			2:00	E-Eur	EE%sT	1997
-# See Romania commentary for the guessed 1997 transition to EU rules.
-			2:00	EU	EE%sT
-
-# Monaco
-# Shanks gives 0:09 for Paris Mean Time; go with Howse's more precise 0:09:21.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Monaco	0:29:32 -	LMT	1891 Mar 15
-			0:09:21	-	PMT	1911 Mar 11    # Paris Mean Time
-			0:00	France	WE%sT	1945 Sep 16 3:00
-			1:00	France	CE%sT	1977
-			1:00	EU	CE%sT
-
-# Netherlands
-
-# Howse writes that the Netherlands' railways used GMT between 1892 and 1940,
-# but for other purposes the Netherlands used Amsterdam mean time.
-
-# However, Robert H. van Gent writes (2001-04-01):
-# Howse's statement is only correct up to 1909. From 1909-05-01 (00:00:00
-# Amsterdam mean time) onwards, the whole of the Netherlands (including
-# the Dutch railways) was required by law to observe Amsterdam mean time
-# (19 minutes 32.13 seconds ahead of GMT). This had already been the
-# common practice (except for the railways) for many decades but it was
-# not until 1909 when the Dutch government finally defined this by law.
-# On 1937-07-01 this was changed to 20 minutes (exactly) ahead of GMT and
-# was generally known as Dutch Time ("Nederlandse Tijd").
-#
-# (2001-04-08):
-# 1892-05-01 was the date when the Dutch railways were by law required to
-# observe GMT while the remainder of the Netherlands adhered to the common
-# practice of following Amsterdam mean time.
-#
-# (2001-04-09):
-# In 1835 the authorities of the province of North Holland requested the
-# municipal authorities of the towns and cities in the province to observe
-# Amsterdam mean time but I do not know in how many cases this request was
-# actually followed.
-#
-# From 1852 onwards the Dutch telegraph offices were by law required to
-# observe Amsterdam mean time. As the time signals from the observatory of
-# Leiden were also distributed by the telegraph system, I assume that most
-# places linked up with the telegraph (and railway) system automatically
-# adopted Amsterdam mean time.
-#
-# Although the early Dutch railway companies initially observed a variety
-# of times, most of them had adopted Amsterdam mean time by 1858 but it
-# was not until 1866 when they were all required by law to observe
-# Amsterdam mean time.
-
-# The data before 1945 are taken from
-# <http://www.phys.uu.nl/~vgent/wettijd/wettijd.htm>.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Neth	1916	only	-	May	 1	0:00	1:00	NST	# Netherlands Summer Time
-Rule	Neth	1916	only	-	Oct	 1	0:00	0	AMT	# Amsterdam Mean Time
-Rule	Neth	1917	only	-	Apr	16	2:00s	1:00	NST
-Rule	Neth	1917	only	-	Sep	17	2:00s	0	AMT
-Rule	Neth	1918	1921	-	Apr	Mon>=1	2:00s	1:00	NST
-Rule	Neth	1918	1921	-	Sep	lastMon	2:00s	0	AMT
-Rule	Neth	1922	only	-	Mar	lastSun	2:00s	1:00	NST
-Rule	Neth	1922	1936	-	Oct	Sun>=2	2:00s	0	AMT
-Rule	Neth	1923	only	-	Jun	Fri>=1	2:00s	1:00	NST
-Rule	Neth	1924	only	-	Mar	lastSun	2:00s	1:00	NST
-Rule	Neth	1925	only	-	Jun	Fri>=1	2:00s	1:00	NST
-# From 1926 through 1939 DST began 05-15, except that it was delayed by a week
-# in years when 05-15 fell in the Pentecost weekend.
-Rule	Neth	1926	1931	-	May	15	2:00s	1:00	NST
-Rule	Neth	1932	only	-	May	22	2:00s	1:00	NST
-Rule	Neth	1933	1936	-	May	15	2:00s	1:00	NST
-Rule	Neth	1937	only	-	May	22	2:00s	1:00	NST
-Rule	Neth	1937	only	-	Jul	 1	0:00	1:00	S
-Rule	Neth	1937	1939	-	Oct	Sun>=2	2:00s	0	-
-Rule	Neth	1938	1939	-	May	15	2:00s	1:00	S
-Rule	Neth	1945	only	-	Apr	 2	2:00s	1:00	S
-Rule	Neth	1945	only	-	Sep	16	2:00s	0	-
-#
-# Amsterdam Mean Time was +00:19:32.13 exactly, but the .13 is omitted
-# below because the current format requires GMTOFF to be an integer.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Europe/Amsterdam	0:19:32 -	LMT	1835
-			0:19:32	Neth	%s	1937 Jul  1
-			0:20	Neth	NE%sT	1940 May 16 0:00 # Dutch Time
-			1:00	C-Eur	CE%sT	1945 Apr  2 2:00
-			1:00	Neth	CE%sT	1977
-			1:00	EU	CE%sT
-
-# Norway
-# http://met.no/met/met_lex/q_u/sommertid.html (2004-01) agrees with Shanks.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Norway	1916	only	-	May	22	1:00	1:00	S
-Rule	Norway	1916	only	-	Sep	30	0:00	0	-
-Rule	Norway	1945	only	-	Apr	 2	2:00s	1:00	S
-Rule	Norway	1945	only	-	Oct	 1	2:00s	0	-
-Rule	Norway	1959	1964	-	Mar	Sun>=15	2:00s	1:00	S
-Rule	Norway	1959	1965	-	Sep	Sun>=15	2:00s	0	-
-Rule	Norway	1965	only	-	Apr	25	2:00s	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Oslo	0:43:00 -	LMT	1895 Jan  1
-			1:00	Norway	CE%sT	1940 Aug 10 23:00
-			1:00	C-Eur	CE%sT	1945 Apr  2  2:00
-			1:00	Norway	CE%sT	1980
-			1:00	EU	CE%sT
-
-# Svalbard & Jan Mayen
-
-# From Steffen Thorsen (2001-05-01):
-# Although I could not find it explicitly, it seems that Jan Mayen and
-# Svalbard have been using the same time as Norway at least since the
-# time they were declared as parts of Norway.  Svalbard was declared
-# as a part of Norway by law of 1925-07-17 no 11, section 4 and Jan
-# Mayen by law of 1930-02-27 no 2, section 2. (From
-# http://www.lovdata.no/all/nl-19250717-011.html and
-# http://www.lovdata.no/all/nl-19300227-002.html).  The law/regulation
-# for normal/standard time in Norway is from 1894-06-29 no 1 (came
-# into operation on 1895-01-01) and Svalbard/Jan Mayen seem to be a
-# part of this law since 1925/1930. (From
-# http://www.lovdata.no/all/nl-18940629-001.html ) I have not been
-# able to find if Jan Mayen used a different time zone (e.g. -0100)
-# before 1930. Jan Mayen has only been "inhabitated" since 1921 by
-# Norwegian meteorologists and maybe used the same time as Norway ever
-# since 1921.  Svalbard (Arctic/Longyearbyen) has been inhabited since
-# before 1895, and therefore probably changed the local time somewhere
-# between 1895 and 1925 (inclusive).
-
-# From Paul Eggert (2001-05-01):
-#
-# Actually, Jan Mayen was never occupied by Germany during World War II,
-# so it must have diverged from Oslo time during the war, as Oslo was
-# keeping Berlin time.
-#
-# <http://home.no.net/janmayen/history.htm> says that the meteorologists
-# burned down their station in 1940 and left the island, but returned in
-# 1941 with a small Norwegian garrison and continued operations despite
-# frequent air ttacks from Germans.  In 1943 the Americans established a
-# radiolocating station on the island, called "Atlantic City".  Possibly
-# the UTC offset changed during the war, but I think it unlikely that
-# Jan Mayen used German daylight-saving rules.
-#
-# Svalbard is more complicated, as it was raided in August 1941 by an
-# Allied party that evacuated the civilian population to England (says
-# <http://www.bartleby.com/65/sv/Svalbard.html>).  The Svalbard FAQ
-# <http://www.svalbard.com/SvalbardFAQ.html> says that the Germans were
-# expelled on 1942-05-14.  However, small parties of Germans did return,
-# and according to Wilhelm Dege's book "War North of 80" (1954)
-# <http://www.ucalgary.ca/UofC/departments/UP/1-55238/1-55238-110-2.html>
-# the German armed forces at the Svalbard weather station code-named
-# Haudegen did not surrender to the Allies until September 1945.
-#
-# All these events predate our cutoff date of 1970.  Unless we can
-# come up with more definitive info about the timekeeping during the
-# war years it's probably best just do do the following for now:
-Link	Europe/Oslo	Arctic/Longyearbyen
-Link	Europe/Oslo	Atlantic/Jan_Mayen
-
-# Poland
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Poland	1918	1919	-	Sep	16	2:00s	0	-
-Rule	Poland	1919	only	-	Apr	15	2:00s	1:00	S
-# Whitman gives 1944 Nov 30; go with Shanks.
-Rule	Poland	1944	only	-	Oct	 4	2:00	0	-
-# For 1944-1948 Whitman gives the previous day; go with Shanks.
-Rule	Poland	1945	only	-	Apr	29	0:00	1:00	S
-Rule	Poland	1945	only	-	Nov	 1	0:00	0	-
-# For 1946 on the source is Kazimierz Borkowski,
-# Torun Center for Astronomy, Dept. of Radio Astronomy, Nicolaus Copernicus U.,
-# <http://www.astro.uni.torun.pl/~kb/Artykuly/U-PA/Czas2.htm#tth_tAb1>
-# Thanks to Przemyslaw Augustyniak (2005-05-28) for this reference.
-# He also gives these further references:
-# Mon Pol nr 13, poz 162 (1995) <http://www.abc.com.pl/serwis/mp/1995/0162.htm>
-# Druk nr 2180 (2003) <http://www.senat.gov.pl/k5/dok/sejm/053/2180.pdf>
-Rule	Poland	1946	only	-	Apr	14	0:00s	1:00	S
-Rule	Poland	1946	only	-	Oct	 7	2:00s	0	-
-Rule	Poland	1947	only	-	May	 4	2:00s	1:00	S
-Rule	Poland	1947	1949	-	Oct	Sun>=1	2:00s	0	-
-Rule	Poland	1948	only	-	Apr	18	2:00s	1:00	S
-Rule	Poland	1949	only	-	Apr	10	2:00s	1:00	S
-Rule	Poland	1957	only	-	Jun	 2	1:00s	1:00	S
-Rule	Poland	1957	1958	-	Sep	lastSun	1:00s	0	-
-Rule	Poland	1958	only	-	Mar	30	1:00s	1:00	S
-Rule	Poland	1959	only	-	May	31	1:00s	1:00	S
-Rule	Poland	1959	1961	-	Oct	Sun>=1	1:00s	0	-
-Rule	Poland	1960	only	-	Apr	 3	1:00s	1:00	S
-Rule	Poland	1961	1964	-	May	lastSun	1:00s	1:00	S
-Rule	Poland	1962	1964	-	Sep	lastSun	1:00s	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Warsaw	1:24:00 -	LMT	1880
-			1:24:00	-	WMT	1915 Aug  5   # Warsaw Mean Time
-			1:00	C-Eur	CE%sT	1918 Sep 16 3:00
-			2:00	Poland	EE%sT	1922 Jun
-			1:00	Poland	CE%sT	1940 Jun 23 2:00
-			1:00	C-Eur	CE%sT	1944 Oct
-			1:00	Poland	CE%sT	1977
-			1:00	W-Eur	CE%sT	1988
-			1:00	EU	CE%sT
-
-# Portugal
-#
-# From Rui Pedro Salgueiro (1992-11-12):
-# Portugal has recently (September, 27) changed timezone
-# (from WET to MET or CET) to harmonize with EEC.
-#
-# Martin Bruckmann (1996-02-29) reports via Peter Ilieve
-# that Portugal is reverting to 0:00 by not moving its clocks this spring.
-# The new Prime Minister was fed up with getting up in the dark in the winter.
-#
-# From Paul Eggert (1996-11-12):
-# IATA SSIM (1991-09) reports several 1991-09 and 1992-09 transitions
-# at 02:00u, not 01:00u.  Assume that these are typos.
-# IATA SSIM (1991/1992) reports that the Azores were at -1:00.
-# IATA SSIM (1993-02) says +0:00; later issues (through 1996-09) say -1:00.
-# Guess that the Azores changed to EU rules in 1992 (since that's when Portugal
-# harmonized with the EU), and that they stayed +0:00 that winter.
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-# DSH writes that despite Decree 1,469 (1915), the change to the clocks was not
-# done every year, depending on what Spain did, because of railroad schedules.
-# Go with Shanks.
-Rule	Port	1916	only	-	Jun	17	23:00	1:00	S
-# Whitman gives 1916 Oct 31; go with Shanks.
-Rule	Port	1916	only	-	Nov	 1	 1:00	0	-
-Rule	Port	1917	only	-	Feb	28	23:00s	1:00	S
-Rule	Port	1917	1921	-	Oct	14	23:00s	0	-
-Rule	Port	1918	only	-	Mar	 1	23:00s	1:00	S
-Rule	Port	1919	only	-	Feb	28	23:00s	1:00	S
-Rule	Port	1920	only	-	Feb	29	23:00s	1:00	S
-Rule	Port	1921	only	-	Feb	28	23:00s	1:00	S
-Rule	Port	1924	only	-	Apr	16	23:00s	1:00	S
-Rule	Port	1924	only	-	Oct	14	23:00s	0	-
-Rule	Port	1926	only	-	Apr	17	23:00s	1:00	S
-Rule	Port	1926	1929	-	Oct	Sat>=1	23:00s	0	-
-Rule	Port	1927	only	-	Apr	 9	23:00s	1:00	S
-Rule	Port	1928	only	-	Apr	14	23:00s	1:00	S
-Rule	Port	1929	only	-	Apr	20	23:00s	1:00	S
-Rule	Port	1931	only	-	Apr	18	23:00s	1:00	S
-# Whitman gives 1931 Oct 8; go with Shanks.
-Rule	Port	1931	1932	-	Oct	Sat>=1	23:00s	0	-
-Rule	Port	1932	only	-	Apr	 2	23:00s	1:00	S
-# Shanks gives 1934 Apr 4; go with Whitman.
-Rule	Port	1934	only	-	Apr	 7	23:00s	1:00	S
-# Whitman gives 1934 Oct 5; go with Shanks.
-Rule	Port	1934	1938	-	Oct	Sat>=1	23:00s	0	-
-# Shanks gives 1935 Apr 30; go with Whitman.
-Rule	Port	1935	only	-	Mar	30	23:00s	1:00	S
-Rule	Port	1936	only	-	Apr	18	23:00s	1:00	S
-# Whitman gives 1937 Apr 2; go with Shanks.
-Rule	Port	1937	only	-	Apr	 3	23:00s	1:00	S
-Rule	Port	1938	only	-	Mar	26	23:00s	1:00	S
-Rule	Port	1939	only	-	Apr	15	23:00s	1:00	S
-# Whitman gives 1939 Oct 7; go with Shanks.
-Rule	Port	1939	only	-	Nov	18	23:00s	0	-
-Rule	Port	1940	only	-	Feb	24	23:00s	1:00	S
-# Shanks gives 1940 Oct 7; go with Whitman.
-Rule	Port	1940	1941	-	Oct	 5	23:00s	0	-
-Rule	Port	1941	only	-	Apr	 5	23:00s	1:00	S
-Rule	Port	1942	1945	-	Mar	Sat>=8	23:00s	1:00	S
-Rule	Port	1942	only	-	Apr	25	22:00s	2:00	M # Midsummer
-Rule	Port	1942	only	-	Aug	15	22:00s	1:00	S
-Rule	Port	1942	1945	-	Oct	Sat>=24	23:00s	0	-
-Rule	Port	1943	only	-	Apr	17	22:00s	2:00	M
-Rule	Port	1943	1945	-	Aug	Sat>=25	22:00s	1:00	S
-Rule	Port	1944	1945	-	Apr	Sat>=21	22:00s	2:00	M
-Rule	Port	1946	only	-	Apr	Sat>=1	23:00s	1:00	S
-Rule	Port	1946	only	-	Oct	Sat>=1	23:00s	0	-
-Rule	Port	1947	1949	-	Apr	Sun>=1	 2:00s	1:00	S
-Rule	Port	1947	1949	-	Oct	Sun>=1	 2:00s	0	-
-# Shanks says DST was observed in 1950; go with Whitman.
-# Whitman gives Oct lastSun for 1952 on; go with Shanks.
-Rule	Port	1951	1965	-	Apr	Sun>=1	 2:00s	1:00	S
-Rule	Port	1951	1965	-	Oct	Sun>=1	 2:00s	0	-
-Rule	Port	1977	only	-	Mar	27	 0:00s	1:00	S
-Rule	Port	1977	only	-	Sep	25	 0:00s	0	-
-Rule	Port	1978	1979	-	Apr	Sun>=1	 0:00s	1:00	S
-Rule	Port	1978	only	-	Oct	 1	 0:00s	0	-
-Rule	Port	1979	1982	-	Sep	lastSun	 1:00s	0	-
-Rule	Port	1980	only	-	Mar	lastSun	 0:00s	1:00	S
-Rule	Port	1981	1982	-	Mar	lastSun	 1:00s	1:00	S
-Rule	Port	1983	only	-	Mar	lastSun	 2:00s	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-# Shanks says that the transition from LMT to WET occurred 1911-05-24;
-# Willett says 1912-01-01.  Go with Willett.
-Zone	Europe/Lisbon	-0:36:32 -	LMT	1884
-			-0:36:32 -	LMT	1912 Jan  1  # Lisbon Mean Time
-			 0:00	Port	WE%sT	1966 Apr  3 2:00
-			 1:00	-	CET	1976 Sep 26 1:00
-			 0:00	Port	WE%sT	1983 Sep 25 1:00s
-			 0:00	W-Eur	WE%sT	1992 Sep 27 1:00s
-			 1:00	EU	CE%sT	1996 Mar 31 1:00u
-			 0:00	EU	WE%sT
-Zone Atlantic/Azores	-1:42:40 -	LMT	1884		# Ponta Delgada
-			-1:54:32 -	HMT	1911 May 24  # Horta Mean Time
-			-2:00	Port	AZO%sT	1966 Apr  3 2:00 # Azores Time
-			-1:00	Port	AZO%sT	1983 Sep 25 1:00s
-			-1:00	W-Eur	AZO%sT	1992 Sep 27 1:00s
-			 0:00	EU	WE%sT	1993 Mar 28 1:00u
-			-1:00	EU	AZO%sT
-Zone Atlantic/Madeira	-1:07:36 -	LMT	1884		# Funchal
-			-1:07:36 -	FMT	1911 May 24  # Funchal Mean Time
-			-1:00	Port	MAD%sT	1966 Apr  3 2:00 # Madeira Time
-			 0:00	Port	WE%sT	1983 Sep 25 1:00s
-			 0:00	EU	WE%sT
-
-# Romania
-#
-# From Paul Eggert (1999-10-07):
-# <a href="http://www.nineoclock.ro/POL/1778pol.html">
-# Nine O'clock</a> (1998-10-23) reports that the switch occurred at
-# 04:00 local time in fall 1998.  For lack of better info,
-# assume that Romania and Moldova switched to EU rules in 1997,
-# the same year as Bulgaria.
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Romania	1932	only	-	May	21	 0:00s	1:00	S
-Rule	Romania	1932	1939	-	Oct	Sun>=1	 0:00s	0	-
-Rule	Romania	1933	1939	-	Apr	Sun>=2	 0:00s	1:00	S
-Rule	Romania	1979	only	-	May	27	 0:00	1:00	S
-Rule	Romania	1979	only	-	Sep	lastSun	 0:00	0	-
-Rule	Romania	1980	only	-	Apr	 5	23:00	1:00	S
-Rule	Romania	1980	only	-	Sep	lastSun	 1:00	0	-
-Rule	Romania	1991	1993	-	Mar	lastSun	 0:00s	1:00	S
-Rule	Romania	1991	1993	-	Sep	lastSun	 0:00s	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Europe/Bucharest	1:44:24 -	LMT	1891 Oct
-			1:44:24	-	BMT	1931 Jul 24	# Bucharest MT
-			2:00	Romania	EE%sT	1981 Mar 29 2:00s
-			2:00	C-Eur	EE%sT	1991
-			2:00	Romania	EE%sT	1994
-			2:00	E-Eur	EE%sT	1997
-			2:00	EU	EE%sT
-
-# Russia
-
-# From Paul Eggert (1999-11-12):
-# Except for Moscow after 1919-07-01, I invented the time zone abbreviations.
-# Moscow time zone abbreviations after 1919-07-01, and Moscow rules after 1991,
-# are from Andrey A. Chernov.  The rest is from Shanks, except we follow
-# Chernov's report that 1992 DST transitions were Sat 23:00, not Sun 02:00s.
-#
-# From Stanislaw A. Kuzikowski (1994-06-29):
-# But now it is some months since Novosibirsk is 3 hours ahead of Moscow!
-# I do not know why they have decided to make this change;
-# as far as I remember it was done exactly during winter->summer switching
-# so we (Novosibirsk) simply did not switch.
-#
-# From Andrey A. Chernov (1996-10-04):
-# `MSK' and `MSD' were born and used initially on Moscow computers with
-# UNIX-like OSes by several developer groups (e.g. Demos group, Kiae group)....
-# The next step was the UUCP network, the Relcom predecessor
-# (used mainly for mail), and MSK/MSD was actively used there.
-#
-# From Chris Carrier (1996-10-30):
-# According to a friend of mine who rode the Trans-Siberian Railroad from
-# Moscow to Irkutsk in 1995, public air and rail transport in Russia ...
-# still follows Moscow time, no matter where in Russia it is located.
-#
-# For Grozny, Chechnya, we have the following story from
-# John Daniszewski, "Scavengers in the Rubble", Los Angeles Times (2001-02-07):
-# News--often false--is spread by word of mouth.  A rumor that it was
-# time to move the clocks back put this whole city out of sync with
-# the rest of Russia for two weeks--even soldiers stationed here began
-# enforcing curfew at the wrong time.
-#
-# From Gwillim Law (2001-06-05):
-# There's considerable evidence that Sakhalin Island used to be in
-# UTC+11, and has changed to UTC+10, in this decade.  I start with the
-# SSIM, which listed Yuzhno-Sakhalinsk in zone RU10 along with Magadan
-# until February 1997, and then in RU9 with Khabarovsk and Vladivostok
-# since September 1997....  Although the Kuril Islands are
-# administratively part of Sakhalin oblast', they appear to have
-# remained on UTC+11 along with Magadan.
-#
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-#
-# Kaliningradskaya oblast'.
-Zone Europe/Kaliningrad	 1:22:00 -	LMT	1893 Apr
-			 1:00	C-Eur	CE%sT	1945
-			 2:00	Poland	CE%sT	1946
-			 3:00	Russia	MSK/MSD	1991 Mar 31 2:00s
-			 2:00	Russia	EE%sT
-#
-# From Oscar van Vlijmen (2001-08-25): [This region consists of]
-# Respublika Adygeya, Arkhangel'skaya oblast', Astrakhanskaya oblast',
-# Belgorodskaya oblast', Bryanskaya oblast', Vladimirskaya oblast',
-# Volgogradskaya oblast', Vologodskaya oblast', Voronezhskaya oblast',
-# Respublika Dagestan, Ivanovskaya oblast', Respublika Ingushetiya,
-# Kabarbino-Balkarskaya Respublika, Respublika Kalmykiya,
-# Kalyzhskaya oblast', Respublika Karachaevo-Cherkessiya,
-# Respublika Kareliya, Kirovskaya oblast', Respublika Komi,
-# Kostromskaya oblast', Krasnodarskij kraj, Kurskaya oblast',
-# Leningradskaya oblast', Lipetskaya oblast', Respublika Marij El,
-# Respublika Mordoviya, Moskva, Moskovskaya oblast',
-# Murmanskaya oblast', Nenetskij avtonomnyj okrug,
-# Nizhegorodskaya oblast', Novgorodskaya oblast', Orlovskaya oblast',
-# Penzenskaya oblast', Pskovskaya oblast', Rostovskaya oblast',
-# Ryazanskaya oblast', Sankt-Peterburg, Saratovskaya oblast',
-# Respublika Severnaya Osetiya, Smolenskaya oblast',
-# Stavropol'skij kraj, Tambovskaya oblast', Respublika Tatarstan,
-# Tverskaya oblast', Tyl'skaya oblast', Ul'yanovskaya oblast',
-# Chechenskaya Respublika, Chuvashskaya oblast',
-# Yaroslavskaya oblast'
-Zone Europe/Moscow	 2:30:20 -	LMT	1880
-			 2:30	-	MMT	1916 Jul  3 # Moscow Mean Time
-			 2:30:48 Russia	%s	1919 Jul  1 2:00
-			 3:00	Russia	MSK/MSD	1922 Oct
-			 2:00	-	EET	1930 Jun 21
-			 3:00	Russia	MSK/MSD	1991 Mar 31 2:00s
-			 2:00	Russia	EE%sT	1992 Jan 19 2:00s
-			 3:00	Russia	MSK/MSD
-#
-# From Oscar van Vlijmen (2001-08-25): [This region consists of]
-# Samarskaya oblast', Udmyrtskaya respublika
-Zone Europe/Samara	 3:20:36 -	LMT	1919 Jul  1 2:00
-			 3:00	-	KUYT	1930 Jun 21 # Kuybyshev
-			 4:00	Russia	KUY%sT	1989 Mar 26 2:00s
-			 3:00	Russia	KUY%sT	1991 Mar 31 2:00s
-			 2:00	Russia	KUY%sT	1991 Sep 29 2:00s
-			 3:00	-	KUYT	1991 Oct 20 3:00
-			 4:00	Russia	SAM%sT	# Samara Time
-#
-# From Oscar van Vlijmen (2001-08-25): [This region consists of]
-# Respublika Bashkortostan, Komi-Permyatskij avtonomnyj okrug,
-# Kurganskaya oblast', Orenburgskaya oblast', Permskaya oblast',
-# Sverdlovskaya oblast', Tyumenskaya oblast',
-# Khanty-Manskijskij avtonomnyj okrug, Chelyabinskaya oblast',
-# Yamalo-Nenetskij avtonomnyj okrug.
-Zone Asia/Yekaterinburg	 4:02:24 -	LMT	1919 Jul 15 4:00
-			 4:00	-	SVET	1930 Jun 21 # Sverdlovsk Time
-			 5:00	Russia	SVE%sT	1991 Mar 31 2:00s
-			 4:00	Russia	SVE%sT	1992 Jan 19 2:00s
-			 5:00	Russia	YEK%sT	# Yekaterinburg Time
-#
-# From Oscar van Vlijmen (2001-08-25): [This region consists of]
-# Respublika Altaj, Altajskij kraj, Omskaya oblast'.
-Zone Asia/Omsk		 4:53:36 -	LMT	1919 Nov 14
-			 5:00	-	OMST	1930 Jun 21 # Omsk TIme
-			 6:00	Russia	OMS%sT	1991 Mar 31 2:00s
-			 5:00	Russia	OMS%sT	1992 Jan 19 2:00s
-			 6:00	Russia	OMS%sT
-#
-# Novosibirskaya oblast'.
-Zone Asia/Novosibirsk	 5:31:40 -	LMT	1919 Dec 14 6:00
-			 6:00	-	NOVT	1930 Jun 21 # Novosibirsk Time
-			 7:00	Russia	NOV%sT	1991 Mar 31 2:00s
-			 6:00	Russia	NOV%sT	1992 Jan 19 2:00s
-			 7:00	Russia	NOV%sT	1993 May 23 # says Shanks
-			 6:00	Russia	NOV%sT
-#
-# From Oscar van Vlijmen (2001-08-25): [This region consists of]
-# Kemerovskaya oblast', Krasnoyarskij kraj,
-# Tajmyrskij (Dolgano-Nenetskij) avtonomnyj okrug, Tomskaya oblast',
-# Respublika Tuva, Respublika Khakasiya, Evenkijskij avtonomnyj okrug.
-Zone Asia/Krasnoyarsk	 6:11:20 -	LMT	1920 Jan  6
-			 6:00	-	KRAT	1930 Jun 21 # Krasnoyarsk Time
-			 7:00	Russia	KRA%sT	1991 Mar 31 2:00s
-			 6:00	Russia	KRA%sT	1992 Jan 19 2:00s
-			 7:00	Russia	KRA%sT
-#
-# From Oscar van Vlijmen (2001-08-25): [This region consists of]
-# Respublika Buryatiya, Irkutskaya oblast',
-# Ust'-Ordynskij Buryatskij avtonomnyj okrug.
-Zone Asia/Irkutsk	 6:57:20 -	LMT	1880
-			 6:57:20 -	IMT	1920 Jan 25 # Irkutsk Mean Time
-			 7:00	-	IRKT	1930 Jun 21 # Irkutsk Time
-			 8:00	Russia	IRK%sT	1991 Mar 31 2:00s
-			 7:00	Russia	IRK%sT	1992 Jan 19 2:00s
-			 8:00	Russia	IRK%sT
-#
-# From Oscar van Vlijmen (2003-10-18): [This region consists of]
-# Aginskij Buryatskij avtonomnyj okrug, Amurskaya oblast',
-# [parts of] Respublika Sakha (Yakutiya), Chitinskaya oblast'.
-# The Sakha districts are: Aldanskij, Amginskij, Anabarskij,
-# Bulunskij, Verkhnekolymskij, Verkhnevilyujskij, Vilyujskij, Gornyj,
-# Zhiganskij, Kobyajskij, Lenskij, Megino-Kangalasskij, Mirninskij,
-# Namskij, Nyurbinskij, Olenekskij, Olekminskij, Srednekolymskij,
-# Suntarskij, Tattinskij, Ust'-Aldanskij, Khangalasskij,
-# Churapchinskij, Eveno-Bytantajskij.
-Zone Asia/Yakutsk	 8:38:40 -	LMT	1919 Dec 15
-			 8:00	-	YAKT	1930 Jun 21 # Yakutsk Time
-			 9:00	Russia	YAK%sT	1991 Mar 31 2:00s
-			 8:00	Russia	YAK%sT	1992 Jan 19 2:00s
-			 9:00	Russia	YAK%sT
-#
-# From Oscar van Vlijmen (2003-10-18): [This region consists of]
-# Evrejskaya avtonomnaya oblast', Khabarovskij kraj, Primorskij kraj,
-# [parts of] Respublika Sakha (Yakutiya).
-# The Sakha districts are: Verkhoyanskij, Tomponskij, Ust'-Majskij,
-# Ust'-Yanskij.
-Zone Asia/Vladivostok	 8:47:44 -	LMT	1922 Nov 15
-			 9:00	-	VLAT	1930 Jun 21 # Vladivostok Time
-			10:00	Russia	VLA%sT	1991 Mar 31 2:00s
-			 9:00	Russia	VLA%sST	1992 Jan 19 2:00s
-			10:00	Russia	VLA%sT
-#
-# Sakhalinskaya oblast'.
-# The Zone name should be Yuzhno-Sakhalinsk, but that's too long.
-Zone Asia/Sakhalin	 9:30:48 -	LMT	1905 Aug 23
-			 9:00	-	CJT	1938
-			 9:00	-	JST	1945 Aug 25
-			11:00	Russia	SAK%sT	1991 Mar 31 2:00s # Sakhalin T.
-			10:00	Russia	SAK%sT	1992 Jan 19 2:00s
-			11:00	Russia	SAK%sT	1997 Mar lastSun 2:00s
-			10:00	Russia	SAK%sT
-#
-# From Oscar van Vlijmen (2003-10-18): [This region consists of]
-# Magadanskaya oblast', Respublika Sakha (Yakutiya).
-# Probably also: Kuril Islands.
-# The Sakha districts are: Abyjskij, Allaikhovskij, Momskij,
-# Nizhnekolymskij, Ojmyakonskij.
-Zone Asia/Magadan	10:03:12 -	LMT	1924 May  2
-			10:00	-	MAGT	1930 Jun 21 # Magadan Time
-			11:00	Russia	MAG%sT	1991 Mar 31 2:00s
-			10:00	Russia	MAG%sT	1992 Jan 19 2:00s
-			11:00	Russia	MAG%sT
-#
-# From Oscar van Vlijmen (2001-08-25): [This region consists of]
-# Kamchatskaya oblast', Koryakskij avtonomnyj okrug.
-#
-# The Zone name should be Asia/Petropavlovsk-Kamchatski, but that's too long.
-Zone Asia/Kamchatka	10:34:36 -	LMT	1922 Nov 10
-			11:00	-	PETT	1930 Jun 21 # P-K Time
-			12:00	Russia	PET%sT	1991 Mar 31 2:00s
-			11:00	Russia	PET%sT	1992 Jan 19 2:00s
-			12:00	Russia	PET%sT
-#
-# Chukotskij avtonomnyj okrug
-Zone Asia/Anadyr	11:49:56 -	LMT	1924 May  2
-			12:00	-	ANAT	1930 Jun 21 # Anadyr Time
-			13:00	Russia	ANA%sT	1982 Apr  1 0:00s
-			12:00	Russia	ANA%sT	1991 Mar 31 2:00s
-			11:00	Russia	ANA%sT	1992 Jan 19 2:00s
-			12:00	Russia	ANA%sT
-
-# Serbia and Montenegro
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Belgrade	1:22:00	-	LMT	1884
-			1:00	-	CET	1941 Apr 18 23:00
-			1:00	C-Eur	CE%sT	1945 May  8  2:00s
-			1:00	1:00	CEST	1945 Sep 16  2:00s
-# Metod Kozelj reports that the legal date of
-# transition to EU rules was 1982-11-27, for all of Yugoslavia at the time.
-# Shanks doesn't give as much detail, so go with Kozelj.
-			1:00	-	CET	1982 Nov 27
-			1:00	EU	CE%sT
-Link Europe/Belgrade Europe/Ljubljana	# Slovenia
-Link Europe/Belgrade Europe/Sarajevo	# Bosnia and Herzegovina
-Link Europe/Belgrade Europe/Skopje	# Macedonia
-Link Europe/Belgrade Europe/Zagreb	# Croatia
-
-# Slovakia
-Link Europe/Prague Europe/Bratislava
-
-# Slovenia
-# see Serbia and Montenegro
-
-# Spain
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-# For 1917-1919 Whitman gives Apr Sat>=1 - Oct Sat>=1; go with Shanks.
-Rule	Spain	1917	only	-	May	 5	23:00s	1:00	S
-Rule	Spain	1917	1919	-	Oct	 6	23:00s	0	-
-Rule	Spain	1918	only	-	Apr	15	23:00s	1:00	S
-Rule	Spain	1919	only	-	Apr	 5	23:00s	1:00	S
-# Whitman gives 1921 Feb 28 - Oct 14; go with Shanks.
-Rule	Spain	1924	only	-	Apr	16	23:00s	1:00	S
-# Whitman gives 1924 Oct 14; go with Shanks.
-Rule	Spain	1924	only	-	Oct	 4	23:00s	0	-
-Rule	Spain	1926	only	-	Apr	17	23:00s	1:00	S
-# Whitman says no DST in 1929; go with Shanks.
-Rule	Spain	1926	1929	-	Oct	Sat>=1	23:00s	0	-
-Rule	Spain	1927	only	-	Apr	 9	23:00s	1:00	S
-Rule	Spain	1928	only	-	Apr	14	23:00s	1:00	S
-Rule	Spain	1929	only	-	Apr	20	23:00s	1:00	S
-# Whitman gives 1937 Jun 16, 1938 Apr 16, 1940 Apr 13; go with Shanks.
-Rule	Spain	1937	only	-	May	22	23:00s	1:00	S
-Rule	Spain	1937	1939	-	Oct	Sat>=1	23:00s	0	-
-Rule	Spain	1938	only	-	Mar	22	23:00s	1:00	S
-Rule	Spain	1939	only	-	Apr	15	23:00s	1:00	S
-Rule	Spain	1940	only	-	Mar	16	23:00s	1:00	S
-# Whitman says no DST 1942-1945; go with Shanks.
-Rule	Spain	1942	only	-	May	 2	22:00s	2:00	M # Midsummer
-Rule	Spain	1942	only	-	Sep	 1	22:00s	1:00	S
-Rule	Spain	1943	1946	-	Apr	Sat>=13	22:00s	2:00	M
-Rule	Spain	1943	only	-	Oct	 3	22:00s	1:00	S
-Rule	Spain	1944	only	-	Oct	10	22:00s	1:00	S
-Rule	Spain	1945	only	-	Sep	30	 1:00	1:00	S
-Rule	Spain	1946	only	-	Sep	30	 0:00	0	-
-Rule	Spain	1949	only	-	Apr	30	23:00	1:00	S
-Rule	Spain	1949	only	-	Sep	30	 1:00	0	-
-Rule	Spain	1974	1975	-	Apr	Sat>=13	23:00	1:00	S
-Rule	Spain	1974	1975	-	Oct	Sun>=1	 1:00	0	-
-Rule	Spain	1976	only	-	Mar	27	23:00	1:00	S
-Rule	Spain	1976	1977	-	Sep	lastSun	 1:00	0	-
-Rule	Spain	1977	1978	-	Apr	 2	23:00	1:00	S
-Rule	Spain	1978	only	-	Oct	 1	 1:00	0	-
-# The following rules are copied from Morocco from 1967 through 1978.
-Rule SpainAfrica 1967	only	-	Jun	 3	12:00	1:00	S
-Rule SpainAfrica 1967	only	-	Oct	 1	 0:00	0	-
-Rule SpainAfrica 1974	only	-	Jun	24	 0:00	1:00	S
-Rule SpainAfrica 1974	only	-	Sep	 1	 0:00	0	-
-Rule SpainAfrica 1976	1977	-	May	 1	 0:00	1:00	S
-Rule SpainAfrica 1976	only	-	Aug	 1	 0:00	0	-
-Rule SpainAfrica 1977	only	-	Sep	28	 0:00	0	-
-Rule SpainAfrica 1978	only	-	Jun	 1	 0:00	1:00	S
-Rule SpainAfrica 1978	only	-	Aug	 4	 0:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Madrid	-0:14:44 -	LMT	1901
-			 0:00	Spain	WE%sT	1946 Sep 30
-			 1:00	Spain	CE%sT	1979
-			 1:00	EU	CE%sT
-Zone	Africa/Ceuta	-0:21:16 -	LMT	1901
-			 0:00	-	WET	1918 May  6 23:00
-			 0:00	1:00	WEST	1918 Oct  7 23:00
-			 0:00	-	WET	1924
-			 0:00	Spain	WE%sT	1929
-			 0:00 SpainAfrica WE%sT 1984 Mar 16
-			 1:00	-	CET	1986
-			 1:00	EU	CE%sT
-Zone	Atlantic/Canary	-1:01:36 -	LMT	1922 Mar # Las Palmas de Gran C.
-			-1:00	-	CANT	1946 Sep 30 1:00 # Canaries Time
-			 0:00	-	WET	1980 Apr  6 0:00s
-			 0:00	1:00	WEST	1980 Sep 28 0:00s
-			 0:00	EU	WE%sT
-# IATA SSIM (1996-09) says the Canaries switch at 2:00u, not 1:00u.
-# Ignore this for now, as the Canaries are part of the EU.
-
-# Sweden
-
-# From Ivan Nilsson (2001-04-13), superseding Shanks:
-#
-# The law "Svensk forfattningssamling 1878, no 14" about standard time in 1879:
-# From the beginning of 1879 (that is 01-01 00:00) the time for all
-# places in the country is "the mean solar time for the meridian at
-# three degrees, or twelve minutes of time, to the west of the
-# meridian of the Observatory of Stockholm".  The law is dated 1878-05-31.
-#
-# The observatory at that time had the meridian 18 degrees 03' 30"
-# eastern longitude = 01:12:14 in time.  Less 12 minutes gives the
-# national standard time as 01:00:14 ahead of GMT....
-#
-# About the beginning of CET in Sweden. The lawtext ("Svensk
-# forfattningssamling 1899, no 44") states, that "from the beginning
-# of 1900... ... the same as the mean solar time for the meridian at
-# the distance of one hour of time from the meridian of the English
-# observatory at Greenwich, or at 12 minutes 14 seconds to the west
-# from the meridian of the Observatory of Stockholm". The law is dated
-# 1899-06-16.  In short: At 1900-01-01 00:00:00 the new standard time
-# in Sweden is 01:00:00 ahead of GMT.
-#
-# 1916: The lawtext ("Svensk forfattningssamling 1916, no 124") states
-# that "1916-05-15 is considered to begin one hour earlier". It is
-# pretty obvious that at 05-14 23:00 the clocks are set to 05-15 00:00....
-# Further the law says, that "1916-09-30 is considered to end one hour later".
-#
-# The laws regulating [DST] are available on the site of the Swedish
-# Parliament beginning with 1985 - the laws regulating 1980/1984 are
-# not available on the site (to my knowledge they are only available
-# in Swedish): <http://www.riksdagen.se/english/work/sfst.asp> (type
-# "sommartid" without the quotes in the field "Fritext" and then click
-# the Sok-button).
-#
-# (2001-05-13):
-#
-# I have now found a newspaper stating that at 1916-10-01 01:00
-# summertime the church-clocks etc were set back one hour to show
-# 1916-10-01 00:00 standard time.  The article also reports that some
-# people thought the switch to standard time would take place already
-# at 1916-10-01 00:00 summer time, but they had to wait for another
-# hour before the event took place.
-#
-# Source: The newspaper "Dagens Nyheter", 1916-10-01, page 7 upper left.
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Europe/Stockholm	1:12:12 -	LMT	1879 Jan  1
-			1:00:14	-	SET	1900 Jan  1	# Swedish Time
-			1:00	-	CET	1916 May 14 23:00
-			1:00	1:00	CEST	1916 Oct  1 01:00
-			1:00	-	CET	1980
-			1:00	EU	CE%sT
-
-# Switzerland
-# From Howse:
-# By the end of the 18th century clocks and watches became commonplace
-# and their performance improved enormously.  Communities began to keep
-# mean time in preference to apparent time -- Geneva from 1780 ....
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-# From Whitman (who writes ``Midnight?''):
-Rule	Swiss	1940	only	-	Nov	 2	0:00	1:00	S
-Rule	Swiss	1940	only	-	Dec	31	0:00	0	-
-# From Shanks:
-Rule	Swiss	1941	1942	-	May	Sun>=1	2:00	1:00	S
-Rule	Swiss	1941	1942	-	Oct	Sun>=1	0:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Zurich	0:34:08 -	LMT	1848 Sep 12
-			0:29:44	-	BMT	1894 Jun # Bern Mean Time
-			1:00	Swiss	CE%sT	1981
-			1:00	EU	CE%sT
-
-# Turkey
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Turkey	1916	only	-	May	 1	0:00	1:00	S
-Rule	Turkey	1916	only	-	Oct	 1	0:00	0	-
-Rule	Turkey	1920	only	-	Mar	28	0:00	1:00	S
-Rule	Turkey	1920	only	-	Oct	25	0:00	0	-
-Rule	Turkey	1921	only	-	Apr	 3	0:00	1:00	S
-Rule	Turkey	1921	only	-	Oct	 3	0:00	0	-
-Rule	Turkey	1922	only	-	Mar	26	0:00	1:00	S
-Rule	Turkey	1922	only	-	Oct	 8	0:00	0	-
-# Whitman gives 1923 Apr 28 - Sep 16 and no DST in 1924-1925; go with Shanks.
-Rule	Turkey	1924	only	-	May	13	0:00	1:00	S
-Rule	Turkey	1924	1925	-	Oct	 1	0:00	0	-
-Rule	Turkey	1925	only	-	May	 1	0:00	1:00	S
-Rule	Turkey	1940	only	-	Jun	30	0:00	1:00	S
-Rule	Turkey	1940	only	-	Oct	 5	0:00	0	-
-Rule	Turkey	1940	only	-	Dec	 1	0:00	1:00	S
-Rule	Turkey	1941	only	-	Sep	21	0:00	0	-
-Rule	Turkey	1942	only	-	Apr	 1	0:00	1:00	S
-# Whitman omits the next two transition and gives 1945 Oct 1; go with Shanks.
-Rule	Turkey	1942	only	-	Nov	 1	0:00	0	-
-Rule	Turkey	1945	only	-	Apr	 2	0:00	1:00	S
-Rule	Turkey	1945	only	-	Oct	 8	0:00	0	-
-Rule	Turkey	1946	only	-	Jun	 1	0:00	1:00	S
-Rule	Turkey	1946	only	-	Oct	 1	0:00	0	-
-Rule	Turkey	1947	1948	-	Apr	Sun>=16	0:00	1:00	S
-Rule	Turkey	1947	1950	-	Oct	Sun>=2	0:00	0	-
-Rule	Turkey	1949	only	-	Apr	10	0:00	1:00	S
-Rule	Turkey	1950	only	-	Apr	19	0:00	1:00	S
-Rule	Turkey	1951	only	-	Apr	22	0:00	1:00	S
-Rule	Turkey	1951	only	-	Oct	 8	0:00	0	-
-Rule	Turkey	1962	only	-	Jul	15	0:00	1:00	S
-Rule	Turkey	1962	only	-	Oct	 8	0:00	0	-
-Rule	Turkey	1964	only	-	May	15	0:00	1:00	S
-Rule	Turkey	1964	only	-	Oct	 1	0:00	0	-
-Rule	Turkey	1970	1972	-	May	Sun>=2	0:00	1:00	S
-Rule	Turkey	1970	1972	-	Oct	Sun>=2	0:00	0	-
-Rule	Turkey	1973	only	-	Jun	 3	1:00	1:00	S
-Rule	Turkey	1973	only	-	Nov	 4	3:00	0	-
-Rule	Turkey	1974	only	-	Mar	31	2:00	1:00	S
-Rule	Turkey	1974	only	-	Nov	 3	5:00	0	-
-Rule	Turkey	1975	only	-	Mar	30	0:00	1:00	S
-Rule	Turkey	1975	1976	-	Oct	lastSun	0:00	0	-
-Rule	Turkey	1976	only	-	Jun	 1	0:00	1:00	S
-Rule	Turkey	1977	1978	-	Apr	Sun>=1	0:00	1:00	S
-Rule	Turkey	1977	only	-	Oct	16	0:00	0	-
-Rule	Turkey	1979	1980	-	Apr	Sun>=1	3:00	1:00	S
-Rule	Turkey	1979	1982	-	Oct	Mon>=11	0:00	0	-
-Rule	Turkey	1981	1982	-	Mar	lastSun	3:00	1:00	S
-Rule	Turkey	1983	only	-	Jul	31	0:00	1:00	S
-Rule	Turkey	1983	only	-	Oct	 2	0:00	0	-
-Rule	Turkey	1985	only	-	Apr	20	0:00	1:00	S
-Rule	Turkey	1985	only	-	Sep	28	0:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Istanbul	1:55:52 -	LMT	1880
-			1:56:56	-	IMT	1910 Oct # Istanbul Mean Time?
-			2:00	Turkey	EE%sT	1978 Oct 15
-			3:00	Turkey	TR%sT	1985 Apr 20 # Turkey Time
-			2:00	Turkey	EE%sT	1986
-			2:00	C-Eur	EE%sT	1991
-			2:00	EU	EE%sT
-Link	Europe/Istanbul	Asia/Istanbul	# Istanbul is in both continents.
-
-# Ukraine
-#
-# From Igor Karpov, who works for the Ukranian Ministry of Justice,
-# via Garrett Wollman (2003-01-27):
-# BTW, I've found the official document on this matter. It's goverment
-# regulations number 509, May 13, 1996. In my poor translation it says:
-# "Time in Ukraine is set to second timezone (Kiev time). Each last Sunday
-# of March at 3am the time is changing to 4am and each last Sunday of
-# October the time at 4am is changing to 3am"
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-# Most of Ukraine since 1970 has been like Kiev.
-Zone Europe/Kiev	2:02:04 -	LMT	1880
-			2:02:04	-	KMT	1924 May  2 # Kiev Mean Time
-			2:00	-	EET	1930 Jun 21
-			3:00	-	MSK	1941 Sep 20
-			1:00	C-Eur	CE%sT	1943 Nov  6
-			3:00	Russia	MSK/MSD	1990
-			3:00	-	MSK	1990 Jul  1 2:00
-			2:00	-	EET	1992
-			2:00	E-Eur	EE%sT	1995
-			2:00	EU	EE%sT
-# Ruthenia used CET 1990/1991.
-Zone Europe/Uzhgorod	1:29:12 -	LMT	1890 Oct
-			1:00	-	CET	1940
-			1:00	C-Eur	CE%sT	1944 Oct
-			1:00	1:00	CEST	1944 Oct 26
-			1:00	-	CET	1945 Jun 29
-			3:00	Russia	MSK/MSD	1990
-			3:00	-	MSK	1990 Jul  1 2:00
-			1:00	-	CET	1991 Mar 31 3:00
-			2:00	-	EET	1992
-			2:00	E-Eur	EE%sT	1995
-			2:00	EU	EE%sT
-# Zaporozh'ye and eastern Lugansk oblasts observed DST 1990/1991.
-# Zaporozh'ye has an apostrophe, but Posix file names can't have apostrophes.
-Zone Europe/Zaporozhye	2:20:40 -	LMT	1880
-			2:20	-	CUT	1924 May  2 # Central Ukraine T
-			2:00	-	EET	1930 Jun 21
-			3:00	-	MSK	1941 Aug 25
-			1:00	C-Eur	CE%sT	1943 Oct 25
-			3:00	Russia	MSK/MSD	1991 Mar 31 2:00
-			2:00	E-Eur	EE%sT	1995
-			2:00	EU	EE%sT
-# Central Crimea used Moscow time 1994/1997.
-Zone Europe/Simferopol	2:16:24 -	LMT	1880
-			2:16	-	SMT	1924 May  2 # Simferopol Mean T
-			2:00	-	EET	1930 Jun 21
-			3:00	-	MSK	1941 Nov
-			1:00	C-Eur	CE%sT	1944 Apr 13
-			3:00	Russia	MSK/MSD	1990
-			3:00	-	MSK	1990 Jul  1 2:00
-			2:00	-	EET	1992
-# From Paul Eggert (1999-11-12):
-# The _Economist_ (1994-05-28, p 45) reports that central Crimea switched
-# from Kiev to Moscow time sometime after the January 1994 elections.
-# Shanks says ``date of change uncertain'', but implies that it happened
-# sometime between the 1994 DST switches.  For now, guess it changed in May.
-			2:00	E-Eur	EE%sT	1994 May
-# From IATA SSIM (1994/1997), which also says that Kerch is still like Kiev.
-			3:00	E-Eur	MSK/MSD	1996 Mar 31 3:00s
-			3:00	1:00	MSD	1996 Oct 27 3:00s
-# IATA SSIM (1997-09) says Crimea switched to EET/EEST.
-# Assume it happened in March by not changing the clocks.
-			3:00	Russia	MSK/MSD	1997
-			3:00	-	MSK	1997 Mar lastSun 1:00u
-			2:00	EU	EE%sT
-
-###############################################################################
-
-# One source shows that Bulgaria, Cyprus, Finland, and Greece observe DST from
-# the last Sunday in March to the last Sunday in September in 1986.
-# The source shows Romania changing a day later than everybody else.
-#
-# According to Bernard Sieloff's source, Poland is in the MET time zone but
-# uses the WE DST rules.  The Western USSR uses EET+1 and ME DST rules.
-# Bernard Sieloff's source claims Romania switches on the same day, but at
-# 00:00 standard time (i.e., 01:00 DST).  It also claims that Turkey
-# switches on the same day, but switches on at 01:00 standard time
-# and off at 00:00 standard time (i.e., 01:00 DST)
-
-# ...
-# Date: Wed, 28 Jan 87 16:56:27 -0100
-# From: Tom Hofmann
-# ...
-#
-# ...the European time rules are...standardized since 1981, when
-# most European coun[tr]ies started DST.  Before that year, only
-# a few countries (UK, France, Italy) had DST, each according
-# to own national rules.  In 1981, however, DST started on
-# 'Apr firstSun', and not on 'Mar lastSun' as in the following
-# years...
-# But also since 1981 there are some more national exceptions
-# than listed in 'europe': Switzerland, for example, joined DST
-# one year later, Denmark ended DST on 'Oct 1' instead of 'Sep
-# lastSun' in 1981---I don't know how they handle now.
-#
-# Finally, DST ist always from 'Apr 1' to 'Oct 1' in the
-# Soviet Union (as far as I know).
-#
-# Tom Hofmann, Scientific Computer Center, CIBA-GEIGY AG,
-# 4002 Basle, Switzerland
-# ...
-
-# ...
-# Date: Wed, 4 Feb 87 22:35:22 +0100
-# From: Dik T. Winter
-# ...
-#
-# The information from Tom Hofmann is (as far as I know) not entirely correct.
-# After a request from chongo at amdahl I tried to retrieve all information
-# about DST in Europe.  I was able to find all from about 1969.
-#
-# ...standardization on DST in Europe started in about 1977 with switches on
-# first Sunday in April and last Sunday in September...
-# In 1981 UK joined Europe insofar that
-# the starting day for both shifted to last Sunday in March.  And from 1982
-# the whole of Europe used DST, with switch dates April 1 and October 1 in
-# the Sov[i]et Union.  In 1985 the SU reverted to standard Europe[a]n switch
-# dates...
-#
-# It should also be remembered that time-zones are not constants; e.g.
-# Portugal switched in 1976 from MET (or CET) to WET with DST...
-# Note also that though there were rules for switch dates not
-# all countries abided to these dates, and many individual deviations
-# occurred, though not since 1982 I believe.  Another note: it is always
-# assumed that DST is 1 hour ahead of normal time, this need not be the
-# case; at least in the Netherlands there have been times when DST was 2 hours
-# in advance of normal time.
-#
-# ...
-# dik t. winter, cwi, amsterdam, nederland
-# ...
-
-# From Bob Devine (1988-01-28):
-# ...
-# Greece: Last Sunday in April to last Sunday in September (iffy on dates).
-# Since 1978.  Change at midnight.
-# ...
-# Monaco: has same DST as France.
-# ...
+# @(#)europe	7.95
+
+# This data is by no means authoritative; if you think you know better,
+# go ahead and edit the file (and please send any changes to
+# tz@elsie.nci.nih.gov for general use in the future).
+
+# From Paul Eggert (1999-10-29):
+# A good source for time zone historical data outside the U.S. is
+# Thomas G. Shanks, The International Atlas (5th edition),
+# San Diego: ACS Publications, Inc. (1999).
+#
+# Gwillim Law writes that a good source
+# for recent time zone data is the International Air Transport
+# Association's Standard Schedules Information Manual (IATA SSIM),
+# published semiannually.  Law sent in several helpful summaries
+# of the IATA's data after 1990.
+#
+# Except where otherwise noted, Shanks is the source for entries through 1991,
+# and IATA SSIM is the source for entries afterwards.
+#
+# Other sources occasionally used include:
+#
+#	Edward W. Whitman, World Time Differences,
+#	Whitman Publishing Co, 2 Niagara Av, Ealing, London (undated),
+#	which I found in the UCLA library.
+#
+#	<a href="http://www.pettswoodvillage.co.uk/Daylight_Savings_William_Willett.pdf">
+#	William Willett, The Waste of Daylight, 19th edition
+#	</a> (1914-03)
+#
+#	Brazil's Departamento Servico da Hora (DSH),
+#	<a href="http://pcdsh01.on.br/HISTHV.htm">
+#	History of Summer Time
+#	</a> (1998-09-21, in Portuguese)
+
+#
+# I invented the abbreviations marked `*' in the following table;
+# the rest are from earlier versions of this file, or from other sources.
+# Corrections are welcome!
+#                   std dst  2dst
+#                   LMT           Local Mean Time
+#       -4:00       AST ADT       Atlantic
+#       -3:00       WGT WGST      Western Greenland*
+#       -1:00       EGT EGST      Eastern Greenland*
+#        0:00       GMT BST  BDST Greenwich, British Summer
+#        0:00       GMT IST       Greenwich, Irish Summer
+#        0:00       WET WEST WEMT Western Europe
+#        0:19:32.13 AMT NST       Amsterdam, Netherlands Summer (1835-1937)*
+#        0:20       NET NEST      Netherlands (1937-1940)*
+#        1:00       CET CEST CEMT Central Europe
+#        1:00:14    SET           Swedish (1879-1899)*
+#        2:00       EET EEST      Eastern Europe
+#        3:00       MSK MSD       Moscow
+#
+# A reliable and entertaining source about time zones, especially in Britain,
+# Derek Howse, Greenwich time and longitude, Philip Wilson Publishers (1997).
+
+# From Peter Ilieve (1994-12-04),
+# The original six [EU members]: Belgium, France, (West) Germany, Italy,
+# Luxembourg, the Netherlands.
+# Plus, from 1 Jan 73: Denmark, Ireland, United Kingdom.
+# Plus, from 1 Jan 81: Greece.
+# Plus, from 1 Jan 86: Spain, Portugal.
+# Plus, from 1 Jan 95: Austria, Finland, Sweden. (Norway negotiated terms for
+# entry but in a referendum on 28 Nov 94 the people voted No by 52.2% to 47.8%
+# on a turnout of 88.6%. This was almost the same result as Norway's previous
+# referendum in 1972, they are the only country to have said No twice.
+# Referendums in the other three countries voted Yes.)
+# ...
+# Estonia ... uses EU dates but not at 01:00 GMT, they use midnight GMT.
+# I don't think they know yet what they will do from 1996 onwards.
+# ...
+# There shouldn't be any [current members who are not using EU rules].
+# A Directive has the force of law, member states are obliged to enact
+# national law to implement it. The only contentious issue was the
+# different end date for the UK and Ireland, and this was always allowed
+# in the Directive.
+
+
+###############################################################################
+
+# Britain (United Kingdom) and Ireland (Eire)
+
+# From Peter Ilieve (1994-07-06):
+#
+# On 17 Jan 1994 the Independent, a UK quality newspaper, had a piece about
+# historical vistas along the Thames in west London. There was a photo
+# and a sketch map showing some of the sightlines involved. One paragraph
+# of the text said:
+#
+# `An old stone obelisk marking a forgotten terrestrial meridian stands
+# beside the river at Kew. In the 18th century, before time and longitude
+# was standardised by the Royal Observatory in Greenwich, scholars observed
+# this stone and the movement of stars from Kew Observatory nearby. They
+# made their calculations and set the time for the Horse Guards and Parliament,
+# but now the stone is obscured by scrubwood and can only be seen by walking
+# along the towpath within a few yards of it.'
+#
+# I have a one inch to one mile map of London and my estimate of the stone's
+# position is 51 deg. 28' 30" N, 0 deg. 18' 45" W. The longitude should
+# be within about +-2". The Ordnance Survey grid reference is TQ172761.
+#
+# [This yields GMTOFF = -0:01:15 for London LMT in the 18th century.]
+
+# From Paul Eggert (1993-11-18):
+#
+# Howse writes that Britain was the first country to use standard time.
+# The railways cared most about the inconsistencies of local mean time,
+# and it was they who forced a uniform time on the country.
+# The original idea was credited to Dr. William Hyde Wollaston (1766-1828)
+# and was popularized by Abraham Follett Osler (1808-1903).
+# The first railway to adopt London time was the Great Western Railway
+# in November 1840; other railways followed suit, and by 1847 most
+# (though not all) railways used London time.  On 1847-09-22 the
+# Railway Clearing House, an industry standards body, recommended that GMT be
+# adopted at all stations as soon as the General Post Office permitted it.
+# The transition occurred on 12-01 for the L&NW, the Caledonian,
+# and presumably other railways; the January 1848 Bradshaw's lists many
+# railways as using GMT.  By 1855 the vast majority of public
+# clocks in Britain were set to GMT (though some, like the great clock
+# on Tom Tower at Christ Church, Oxford, were fitted with two minute hands,
+# one for local time and one for GMT).  The last major holdout was the legal
+# system, which stubbornly stuck to local time for many years, leading
+# to oddities like polls opening at 08:13 and closing at 16:13.
+# The legal system finally switched to GMT when the Statutes (Definition
+# of Time) Act took effect; it received the Royal Assent on 1880-08-02.
+#
+# In the tables below, we condense this complicated story into a single
+# transition date for London, namely 1847-12-01.  We don't know as much
+# about Dublin, so we use 1880-08-02, the legal transition time.
+
+# From Paul Eggert (2003-09-27):
+# Summer Time was first seriously proposed by William Willett (1857-1915),
+# a London builder and member of the Royal Astronomical Society
+# who circulated a pamphlet ``The Waste of Daylight'' (1907)
+# that proposed advancing clocks 20 minutes on each of four Sundays in April,
+# and retarding them by the same amount on four Sundays in September.
+# A bill was drafted in 1909 and introduced in Parliament several times,
+# but it met with ridicule and opposition, especially from farming interests.
+# Later editions of the pamphlet proposed one-hour summer time, and
+# it was eventually adopted as a wartime measure in 1916.
+# See: Summer Time Arrives Early, The Times (2000-05-18).
+# A monument to Willett was unveiled on 1927-05-21, in an open space in
+# a 45-acre wood near Chislehurst, Kent that was purchased by popular
+# subscription and open to the public.  On the south face of the monolith,
+# designed by G. W. Miller, is the the William Willett Memorial Sundial,
+# which is permanently set to Summer Time.
+
+# From Winston Churchill (1934-04-28):
+# It is one of the paradoxes of history that we should owe the boon of
+# summer time, which gives every year to the people of this country
+# between 160 and 170 hours more daylight leisure, to a war which
+# plunged Europe into darkness for four years, and shook the
+# foundations of civilization throughout the world.
+#	-- <a href="http://www.winstonchurchill.org/fh114willett.htm">
+#	"A Silent Toast to William Willett", Pictorial Weekly
+#	</a>
+
+# From Paul Eggert (1996-09-03):
+# The OED Supplement says that the English originally said ``Daylight Saving''
+# when they were debating the adoption of DST in 1908; but by 1916 this
+# term appears only in quotes taken from DST's opponents, whereas the
+# proponents (who eventually won the argument) are quoted as using ``Summer''.
+
+# From Arthur David Olson (1989-01-19):
+#
+# A source at the British Information Office in New York avers that it's
+# known as "British" Summer Time in all parts of the United Kingdom.
+
+# Date: 4 Jan 89 08:57:25 GMT (Wed)
+# From: Jonathan Leffler
+# [British Summer Time] is fixed annually by Act of Parliament.
+# If you can predict what Parliament will do, you should be in
+# politics making a fortune, not computing.
+
+# From Chris Carrier (1996-06-14):
+# I remember reading in various wartime issues of the London Times the
+# acronym BDST for British Double Summer Time.  Look for the published
+# time of sunrise and sunset in The Times, when BDST was in effect, and
+# if you find a zone reference it will say, "All times B.D.S.T."
+
+# From Joseph S. Myers (1999-09-02):
+# ... some military cables (WO 219/4100 - this is a copy from the
+# main SHAEF archives held in the US National Archives, SHAEF/5252/8/516)
+# agree that the usage is BDST (this appears in a message dated 17 Feb 1945).
+
+# From Joseph S. Myers (2000-10-03):
+# On 18th April 1941, Sir Stephen Tallents of the BBC wrote to Sir
+# Alexander Maxwell of the Home Office asking whether there was any
+# official designation; the reply of the 21st was that there wasn't
+# but he couldn't think of anything better than the "Double British
+# Summer Time" that the BBC had been using informally.
+# http://student.cusu.cam.ac.uk/~jsm28/british-time/bbc-19410418.png
+# http://student.cusu.cam.ac.uk/~jsm28/british-time/ho-19410421.png
+
+# From Sir Alexander Maxwell in the above-mentioned letter (1941-04-21):
+# [N]o official designation has as far as I know been adopted for the time
+# which is to be introduced in May....
+# I cannot think of anything better than "Double British Summer Time"
+# which could not be said to run counter to any official description.
+
+# From Paul Eggert (2000-10-02):
+# Howse writes (p 157) `DBST' too, but `BDST' seems to have been common
+# and follows the more usual convention of putting the location name first,
+# so we use `BDST'.
+
+# Peter Ilieve (1998-04-19) described at length
+# the history of summer time legislation in the United Kingdom.
+# Since 1998 Joseph S. Myers has been updating
+# and extending this list, which can be found in
+# <a href="http://student.cusu.cam.ac.uk/~jsm28/british-time/">
+# History of legal time in Britain
+# </a>
+
+# From Joseph S. Myers (1998-01-06):
+#
+# The legal time in the UK outside of summer time is definitely GMT, not UTC;
+# see Lord Tanlaw's speech
+# <a href="http://www.parliament.the-stationery-office.co.uk/pa/ld199697/ldhansrd/pdvn/lds97/text/70611-20.htm#70611-20_head0">
+# (Lords Hansard 11 June 1997 columns 964 to 976)
+# </a>.
+
+# From Paul Eggert (2001-07-18):
+#
+# For lack of other data, we'll follow Shanks for Eire in 1940-1948.
+#
+# Given Ilieve and Myers's data, the following claims by Shanks are incorrect:
+#     * Wales did not switch from GMT to daylight saving time until
+#	1921 Apr 3, when they began to conform with the rest of Great Britain.
+# Actually, Wales was identical after 1880.
+#     * Eire had two transitions on 1916 Oct 1.
+# It actually just had one transition.
+#     * Northern Ireland used single daylight saving time throughout WW II.
+# Actually, it conformed to Britain.
+#     * GB-Eire changed standard time to 1 hour ahead of GMT on 1968-02-18.
+# Actually, that date saw the usual switch to summer time.
+# Standard time was not changed until 1968-10-27 (the clocks didn't change).
+#
+# Here is another incorrect claim by Shanks:
+#     * Jersey, Guernsey, and the Isle of Man did not switch from GMT
+#	to daylight saving time until 1921 Apr 3, when they began to
+#	conform with Great Britain.
+# S.R.&O. 1916, No. 382 and HO 45/10811/312364 (quoted above) say otherwise.
+#
+# The following claim by Shanks is possible though doubtful;
+# we'll ignore it for now.
+#     * Dublin's 1971-10-31 switch was at 02:00, even though London's was 03:00.
+#
+#
+# Whitman says Dublin Mean Time was -0:25:21, which is more precise than Shanks.
+# Perhaps this was Dunsink Observatory Time, as Dunsink Observatory
+# (8 km NW of Dublin's center) seemingly was to Dublin as Greenwich was
+# to London.  For example:
+#
+#   "Timeball on the ballast office is down.  Dunsink time."
+#   -- James Joyce, Ulysses
+
+# From Joseph S. Myers (2005-01-26):
+# Irish laws are available online at www.irishstatutebook.ie.  These include 
+# various relating to legal time, for example:
+# 
+# ZZA13Y1923.html ZZA12Y1924.html ZZA8Y1925.html ZZSIV20PG1267.html
+# 
+# ZZSI71Y1947.html ZZSI128Y1948.html ZZSI23Y1949.html ZZSI41Y1950.html
+# ZZSI27Y1951.html ZZSI73Y1952.html
+# 
+# ZZSI11Y1961.html ZZSI232Y1961.html ZZSI182Y1962.html
+# ZZSI167Y1963.html ZZSI257Y1964.html ZZSI198Y1967.html
+# ZZA23Y1968.html ZZA17Y1971.html
+# 
+# ZZSI67Y1981.html ZZSI212Y1982.html ZZSI45Y1986.html
+# ZZSI264Y1988.html ZZSI52Y1990.html ZZSI371Y1992.html
+# ZZSI395Y1994.html ZZSI484Y1997.html ZZSI506Y2001.html
+#
+# [These are all relative to the root, e.g., the first is
+# <http://www.irishstatutebook.ie/ZZA13Y1923.html>.]
+# 
+# (These are those I found, but there could be more.  In any case these 
+# should allow various updates to the comments in the europe file to cover 
+# the laws applicable in Ireland.)
+# 
+# (Note that the time in the Republic of Ireland since 1968 has been defined 
+# in terms of standard time being GMT+1 with a period of winter time when it 
+# is GMT, rather than standard time being GMT with a period of summer time 
+# being GMT+1.)
+
+# From Paul Eggert (1999-03-28):
+# Clive Feather (<news:859845706.26043.0@office.demon.net>, 1997-03-31)
+# reports that Folkestone (Cheriton) Shuttle Terminal uses Concession Time
+# (CT), equivalent to French civil time.
+# Julian Hill (<news:36118128.5A14@virgin.net>, 1998-09-30) reports that
+# trains between Dollands Moor (the freight facility next door)
+# and Frethun run in CT.
+# My admittedly uninformed guess is that the terminal has two authorities,
+# the French concession operators and the British civil authorities,
+# and that the time depends on who you're talking to.
+# If, say, the British police were called to the station for some reason,
+# I would expect the official police report to use GMT/BST and not CET/CEST.
+# This is a borderline case, but for now let's stick to GMT/BST.
+
+# From an anonymous contributor (1996-06-02):
+# The law governing time in Ireland is under Statutory Instrument SI 395/94,
+# which gives force to European Union 7th Council Directive # 94/21/EC.
+# Under this directive, the Minister for Justice in Ireland makes appropriate
+# regulations. I spoke this morning with the Secretary of the Department of
+# Justice (tel +353 1 678 9711) who confirmed to me that the correct name is
+# "Irish Summer Time", abbreviated to "IST".
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+# Summer Time Act, 1916
+Rule	GB-Eire	1916	only	-	May	21	2:00s	1:00	BST
+Rule	GB-Eire	1916	only	-	Oct	 1	2:00s	0	GMT
+# S.R.&O. 1917, No. 358
+Rule	GB-Eire	1917	only	-	Apr	 8	2:00s	1:00	BST
+Rule	GB-Eire	1917	only	-	Sep	17	2:00s	0	GMT
+# S.R.&O. 1918, No. 274
+Rule	GB-Eire	1918	only	-	Mar	24	2:00s	1:00	BST
+Rule	GB-Eire	1918	only	-	Sep	30	2:00s	0	GMT
+# S.R.&O. 1919, No. 297
+Rule	GB-Eire	1919	only	-	Mar	30	2:00s	1:00	BST
+Rule	GB-Eire	1919	only	-	Sep	29	2:00s	0	GMT
+# S.R.&O. 1920, No. 458
+Rule	GB-Eire	1920	only	-	Mar	28	2:00s	1:00	BST
+# S.R.&O. 1920, No. 1844
+Rule	GB-Eire	1920	only	-	Oct	25	2:00s	0	GMT
+# S.R.&O. 1921, No. 363
+Rule	GB-Eire	1921	only	-	Apr	 3	2:00s	1:00	BST
+Rule	GB-Eire	1921	only	-	Oct	 3	2:00s	0	GMT
+# S.R.&O. 1922, No. 264
+Rule	GB-Eire	1922	only	-	Mar	26	2:00s	1:00	BST
+Rule	GB-Eire	1922	only	-	Oct	 8	2:00s	0	GMT
+# The Summer Time Act, 1922
+Rule	GB-Eire	1923	only	-	Apr	Sun>=16	2:00s	1:00	BST
+Rule	GB-Eire	1923	1924	-	Sep	Sun>=16	2:00s	0	GMT
+Rule	GB-Eire	1924	only	-	Apr	Sun>=9	2:00s	1:00	BST
+Rule	GB-Eire	1925	1926	-	Apr	Sun>=16	2:00s	1:00	BST
+# The Summer Time Act, 1925
+Rule	GB-Eire	1925	1938	-	Oct	Sun>=2	2:00s	0	GMT
+Rule	GB-Eire	1927	only	-	Apr	Sun>=9	2:00s	1:00	BST
+Rule	GB-Eire	1928	1929	-	Apr	Sun>=16	2:00s	1:00	BST
+Rule	GB-Eire	1930	only	-	Apr	Sun>=9	2:00s	1:00	BST
+Rule	GB-Eire	1931	1932	-	Apr	Sun>=16	2:00s	1:00	BST
+Rule	GB-Eire	1933	only	-	Apr	Sun>=9	2:00s	1:00	BST
+Rule	GB-Eire	1934	only	-	Apr	Sun>=16	2:00s	1:00	BST
+Rule	GB-Eire	1935	only	-	Apr	Sun>=9	2:00s	1:00	BST
+Rule	GB-Eire	1936	1937	-	Apr	Sun>=16	2:00s	1:00	BST
+Rule	GB-Eire	1938	only	-	Apr	Sun>=9	2:00s	1:00	BST
+Rule	GB-Eire	1939	only	-	Apr	Sun>=16	2:00s	1:00	BST
+# S.R.&O. 1939, No. 1379
+Rule	GB-Eire	1939	only	-	Nov	Sun>=16	2:00s	0	GMT
+# S.R.&O. 1940, No. 172 and No. 1883
+Rule	GB-Eire	1940	only	-	Feb	Sun>=23	2:00s	1:00	BST
+# S.R.&O. 1941, No. 476
+Rule	GB-Eire	1941	only	-	May	Sun>=2	1:00s	2:00	BDST
+Rule	GB-Eire	1941	1943	-	Aug	Sun>=9	1:00s	1:00	BST
+# S.R.&O. 1942, No. 506
+Rule	GB-Eire	1942	1944	-	Apr	Sun>=2	1:00s	2:00	BDST
+# S.R.&O. 1944, No. 932
+Rule	GB-Eire	1944	only	-	Sep	Sun>=16	1:00s	1:00	BST
+# S.R.&O. 1945, No. 312
+Rule	GB-Eire	1945	only	-	Apr	Mon>=2	1:00s	2:00	BDST
+Rule	GB-Eire	1945	only	-	Jul	Sun>=9	1:00s	1:00	BST
+# S.R.&O. 1945, No. 1208
+Rule	GB-Eire	1945	1946	-	Oct	Sun>=2	2:00s	0	GMT
+Rule	GB-Eire	1946	only	-	Apr	Sun>=9	2:00s	1:00	BST
+# The Summer Time Act, 1947
+Rule	GB-Eire	1947	only	-	Mar	16	2:00s	1:00	BST
+Rule	GB-Eire	1947	only	-	Apr	13	1:00s	2:00	BDST
+Rule	GB-Eire	1947	only	-	Aug	10	1:00s	1:00	BST
+Rule	GB-Eire	1947	only	-	Nov	 2	2:00s	0	GMT
+# Summer Time Order, 1948 (S.I. 1948/495)
+Rule	GB-Eire	1948	only	-	Mar	14	2:00s	1:00	BST
+Rule	GB-Eire	1948	only	-	Oct	31	2:00s	0	GMT
+# Summer Time Order, 1949 (S.I. 1949/373)
+Rule	GB-Eire	1949	only	-	Apr	 3	2:00s	1:00	BST
+Rule	GB-Eire	1949	only	-	Oct	30	2:00s	0	GMT
+# Summer Time Order, 1950 (S.I. 1950/518)
+# Summer Time Order, 1951 (S.I. 1951/430)
+# Summer Time Order, 1952 (S.I. 1952/451)
+Rule	GB-Eire	1950	1952	-	Apr	Sun>=14	2:00s	1:00	BST
+Rule	GB-Eire	1950	1952	-	Oct	Sun>=21	2:00s	0	GMT
+# revert to the rules of the Summer Time Act, 1925
+Rule	GB-Eire	1953	only	-	Apr	Sun>=16	2:00s	1:00	BST
+Rule	GB-Eire	1953	1960	-	Oct	Sun>=2	2:00s	0	GMT
+Rule	GB-Eire	1954	only	-	Apr	Sun>=9	2:00s	1:00	BST
+Rule	GB-Eire	1955	1956	-	Apr	Sun>=16	2:00s	1:00	BST
+Rule	GB-Eire	1957	only	-	Apr	Sun>=9	2:00s	1:00	BST
+Rule	GB-Eire	1958	1959	-	Apr	Sun>=16	2:00s	1:00	BST
+Rule	GB-Eire	1960	only	-	Apr	Sun>=9	2:00s	1:00	BST
+# Summer Time Order, 1961 (S.I. 1961/71)
+# Summer Time (1962) Order, 1961 (S.I. 1961/2465)
+# Summer Time Order, 1963 (S.I. 1963/81)
+Rule	GB-Eire	1961	1963	-	Mar	lastSun	2:00s	1:00	BST
+Rule	GB-Eire	1961	1968	-	Oct	Sun>=23	2:00s	0	GMT
+# Summer Time (1964) Order, 1963 (S.I. 1963/2101)
+# Summer Time Order, 1964 (S.I. 1964/1201)
+# Summer Time Order, 1967 (S.I. 1967/1148)
+Rule	GB-Eire	1964	1967	-	Mar	Sun>=19	2:00s	1:00	BST
+# Summer Time Order, 1968 (S.I. 1968/117)
+Rule	GB-Eire	1968	only	-	Feb	18	2:00s	1:00	BST
+# The British Standard Time Act, 1968
+#	(no summer time)
+# The Summer Time Act, 1972
+Rule	GB-Eire	1972	1980	-	Mar	Sun>=16	2:00s	1:00	BST
+Rule	GB-Eire	1972	1980	-	Oct	Sun>=23	2:00s	0	GMT
+# Summer Time Order, 1980 (S.I. 1980/1089)
+# Summer Time Order, 1982 (S.I. 1982/1673)
+# Summer Time Order, 1986 (S.I. 1986/223)
+# Summer Time Order, 1988 (S.I. 1988/931)
+Rule	GB-Eire	1981	1995	-	Mar	lastSun	1:00u	1:00	BST
+Rule	GB-Eire 1981	1989	-	Oct	Sun>=23	1:00u	0	GMT
+# Summer Time Order, 1989 (S.I. 1989/985)
+# Summer Time Order, 1992 (S.I. 1992/1729)
+# Summer Time Order 1994 (S.I. 1994/2798)
+Rule	GB-Eire 1990	1995	-	Oct	Sun>=22	1:00u	0	GMT
+# Summer Time Order 1997 (S.I. 1997/2982)
+# See EU for rules starting in 1996.
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/London	-0:01:15 -	LMT	1847 Dec  1
+			 0:00	GB-Eire	%s	1968 Oct 27
+			 1:00	-	BST	1971 Oct 31 2:00u
+			 0:00	GB-Eire	%s	1996
+			 0:00	EU	GMT/BST
+Zone	Europe/Dublin	-0:25:00 -	LMT	1880 Aug  2
+			-0:25:21 -	DMT	1916 May 21 2:00
+			-0:25:21 1:00	IST	1916 Oct  1 2:00s
+			 0:00	GB-Eire	%s	1921 Dec  6 # independence
+			 0:00	GB-Eire	GMT/IST	1940 Feb 25 2:00
+			 0:00	1:00	IST	1946 Oct  6 2:00
+			 0:00	-	GMT	1947 Mar 16 2:00
+			 0:00	1:00	IST	1947 Nov  2 2:00
+			 0:00	-	GMT	1948 Apr 18 2:00
+			 0:00	GB-Eire	GMT/IST	1968 Oct 27
+			 1:00	-	IST	1971 Oct 31 2:00u
+			 0:00	GB-Eire	GMT/IST	1996
+			 0:00	EU	GMT/IST
+
+###############################################################################
+
+# Continental Europe
+
+# EU rules are for the European Union, previously known as the EC, EEC,
+# Common Market, etc.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	EU	1977	1980	-	Apr	Sun>=1	 1:00u	1:00	S
+Rule	EU	1977	only	-	Sep	lastSun	 1:00u	0	-
+Rule	EU	1978	only	-	Oct	 1	 1:00u	0	-
+Rule	EU	1979	1995	-	Sep	lastSun	 1:00u	0	-
+Rule	EU	1981	max	-	Mar	lastSun	 1:00u	1:00	S
+Rule	EU	1996	max	-	Oct	lastSun	 1:00u	0	-
+# The most recent directive covers the years starting in 2002.  See:
+# <a href="http://europa.eu.int/eur-lex/en/lif/dat/2000/en_300L0084.html"
+# Directive 2000/84/EC of the European Parliament and of the Council
+# of 19 January 2001 on summer-time arrangements.
+# </a>
+
+# W-Eur differs from EU only in that W-Eur uses standard time.
+Rule	W-Eur	1977	1980	-	Apr	Sun>=1	 1:00s	1:00	S
+Rule	W-Eur	1977	only	-	Sep	lastSun	 1:00s	0	-
+Rule	W-Eur	1978	only	-	Oct	 1	 1:00s	0	-
+Rule	W-Eur	1979	1995	-	Sep	lastSun	 1:00s	0	-
+Rule	W-Eur	1981	max	-	Mar	lastSun	 1:00s	1:00	S
+Rule	W-Eur	1996	max	-	Oct	lastSun	 1:00s	0	-
+
+# Older C-Eur rules are for convenience in the tables.
+# From 1977 on, C-Eur differs from EU only in that C-Eur uses standard time.
+Rule	C-Eur	1916	only	-	Apr	30	23:00	1:00	S
+Rule	C-Eur	1916	only	-	Oct	 1	 1:00	0	-
+Rule	C-Eur	1917	1918	-	Apr	Mon>=15	 2:00s	1:00	S
+Rule	C-Eur	1917	1918	-	Sep	Mon>=15	 2:00s	0	-
+Rule	C-Eur	1940	only	-	Apr	 1	 2:00s	1:00	S
+Rule	C-Eur	1942	only	-	Nov	 2	 2:00s	0	-
+Rule	C-Eur	1943	only	-	Mar	29	 2:00s	1:00	S
+Rule	C-Eur	1943	only	-	Oct	 4	 2:00s	0	-
+Rule	C-Eur	1944	only	-	Apr	 3	 2:00s	1:00	S
+# Whitman gives 1944 Oct 7; go with Shanks.
+Rule	C-Eur	1944	only	-	Oct	 2	 2:00s	0	-
+Rule	C-Eur	1977	1980	-	Apr	Sun>=1	 2:00s	1:00	S
+Rule	C-Eur	1977	only	-	Sep	lastSun	 2:00s	0	-
+Rule	C-Eur	1978	only	-	Oct	 1	 2:00s	0	-
+Rule	C-Eur	1979	1995	-	Sep	lastSun	 2:00s	0	-
+Rule	C-Eur	1981	max	-	Mar	lastSun	 2:00s	1:00	S
+Rule	C-Eur	1996	max	-	Oct	lastSun	 2:00s	0	-
+
+# E-Eur differs from EU only in that E-Eur switches at midnight local time.
+Rule	E-Eur	1977	1980	-	Apr	Sun>=1	 0:00	1:00	S
+Rule	E-Eur	1977	only	-	Sep	lastSun	 0:00	0	-
+Rule	E-Eur	1978	only	-	Oct	 1	 0:00	0	-
+Rule	E-Eur	1979	1995	-	Sep	lastSun	 0:00	0	-
+Rule	E-Eur	1981	max	-	Mar	lastSun	 0:00	1:00	S
+Rule	E-Eur	1996	max	-	Oct	lastSun	 0:00	0	-
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Russia	1917	only	-	Jul	 1	23:00	1:00	MST	# Moscow Summer Time
+Rule	Russia	1917	only	-	Dec	28	 0:00	0	MMT	# Moscow Mean Time
+Rule	Russia	1918	only	-	May	31	22:00	2:00	MDST	# Moscow Double Summer Time
+Rule	Russia	1918	only	-	Sep	16	 1:00	1:00	MST
+Rule	Russia	1919	only	-	May	31	23:00	2:00	MDST
+Rule	Russia	1919	only	-	Jul	 1	 2:00	1:00	S
+Rule	Russia	1919	only	-	Aug	16	 0:00	0	-
+Rule	Russia	1921	only	-	Feb	14	23:00	1:00	S
+Rule	Russia	1921	only	-	Mar	20	23:00	2:00	M # Midsummer
+Rule	Russia	1921	only	-	Sep	 1	 0:00	1:00	S
+Rule	Russia	1921	only	-	Oct	 1	 0:00	0	-
+# Act No.925 of the Council of Ministers of the USSR (1980-10-24):
+Rule	Russia	1981	1984	-	Apr	 1	 0:00	1:00	S
+Rule	Russia	1981	1983	-	Oct	 1	 0:00	0	-
+# Act No.967 of the Council of Ministers of the USSR (1984-09-13), repeated in
+# Act No.227 of the Council of Ministers of the USSR (1989-03-14):
+Rule	Russia	1984	1991	-	Sep	lastSun	 2:00s	0	-
+Rule	Russia	1985	1991	-	Mar	lastSun	 2:00s	1:00	S
+#
+Rule	Russia	1992	only	-	Mar	lastSat	 23:00	1:00	S
+Rule	Russia	1992	only	-	Sep	lastSat	 23:00	0	-
+Rule	Russia	1993	max	-	Mar	lastSun	 2:00s	1:00	S
+Rule	Russia	1993	1995	-	Sep	lastSun	 2:00s	0	-
+Rule	Russia	1996	max	-	Oct	lastSun	 2:00s	0	-
+
+# These are for backward compatibility with older versions.
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	WET		0:00	EU	WE%sT
+Zone	CET		1:00	C-Eur	CE%sT
+Zone	MET		1:00	C-Eur	ME%sT
+Zone	EET		2:00	EU	EE%sT
+
+# Previous editions of this database used abbreviations like MET DST
+# for Central European Summer Time, but this didn't agree with common usage.
+
+# From Markus Kuhn (1996-07-12):
+# The official German names ... are
+#
+#	Mitteleuropaeische Zeit (MEZ)         = UTC+01:00
+#	Mitteleuropaeische Sommerzeit (MESZ)  = UTC+02:00
+#
+# as defined in the German Time Act (Gesetz ueber die Zeitbestimmung (ZeitG),
+# 1978-07-25, Bundesgesetzblatt, Jahrgang 1978, Teil I, S. 1110-1111)....
+# I wrote ... to the German Federal Physical-Technical Institution
+#
+#	Physikalisch-Technische Bundesanstalt (PTB)
+#	Laboratorium 4.41 "Zeiteinheit"
+#	Postfach 3345
+#	D-38023 Braunschweig
+#	phone: +49 531 592-0
+#
+# ... I received today an answer letter from Dr. Peter Hetzel, head of the PTB
+# department for time and frequency transmission.  He explained that the
+# PTB translates MEZ and MESZ into English as
+#
+#	Central European Time (CET)         = UTC+01:00
+#	Central European Summer Time (CEST) = UTC+02:00
+
+
+# Albania
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Albania	1940	only	-	Jun	16	0:00	1:00	S
+Rule	Albania	1942	only	-	Nov	 2	3:00	0	-
+Rule	Albania	1943	only	-	Mar	29	2:00	1:00	S
+Rule	Albania	1943	only	-	Apr	10	3:00	0	-
+Rule	Albania	1974	only	-	May	 4	0:00	1:00	S
+Rule	Albania	1974	only	-	Oct	 2	0:00	0	-
+Rule	Albania	1975	only	-	May	 1	0:00	1:00	S
+Rule	Albania	1975	only	-	Oct	 2	0:00	0	-
+Rule	Albania	1976	only	-	May	 2	0:00	1:00	S
+Rule	Albania	1976	only	-	Oct	 3	0:00	0	-
+Rule	Albania	1977	only	-	May	 8	0:00	1:00	S
+Rule	Albania	1977	only	-	Oct	 2	0:00	0	-
+Rule	Albania	1978	only	-	May	 6	0:00	1:00	S
+Rule	Albania	1978	only	-	Oct	 1	0:00	0	-
+Rule	Albania	1979	only	-	May	 5	0:00	1:00	S
+Rule	Albania	1979	only	-	Sep	30	0:00	0	-
+Rule	Albania	1980	only	-	May	 3	0:00	1:00	S
+Rule	Albania	1980	only	-	Oct	 4	0:00	0	-
+Rule	Albania	1981	only	-	Apr	26	0:00	1:00	S
+Rule	Albania	1981	only	-	Sep	27	0:00	0	-
+Rule	Albania	1982	only	-	May	 2	0:00	1:00	S
+Rule	Albania	1982	only	-	Oct	 3	0:00	0	-
+Rule	Albania	1983	only	-	Apr	18	0:00	1:00	S
+Rule	Albania	1983	only	-	Oct	 1	0:00	0	-
+Rule	Albania	1984	only	-	Apr	 1	0:00	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Tirane	1:19:20 -	LMT	1914
+			1:00	-	CET	1940 Jun 16
+			1:00	Albania	CE%sT	1984 Jul
+			1:00	EU	CE%sT
+
+# Andorra
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Andorra	0:06:04 -	LMT	1901
+			0:00	-	WET	1946 Sep 30
+			1:00	-	CET	1985 Mar 31 2:00
+			1:00	EU	CE%sT
+
+# Austria
+
+# From Paul Eggert (2003-02-28): Shanks gives 1918-06-16 and
+# 1945-11-18, but the Austrian Federal Office of Metrology and
+# Surveying (BEV) gives 1918-09-16 and for Vienna gives the "alleged"
+# date of 1945-04-12 with no time.  For the 1980-04-06 transition
+# Shanks gives 02:00, the BEV 00:00.  Go with the BEV, and guess 02:00
+# for 1945-04-12.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Austria	1920	only	-	Apr	 5	2:00s	1:00	S
+Rule	Austria	1920	only	-	Sep	13	2:00s	0	-
+Rule	Austria	1946	only	-	Apr	14	2:00s	1:00	S
+Rule	Austria	1946	1948	-	Oct	Sun>=1	2:00s	0	-
+Rule	Austria	1947	only	-	Apr	 6	2:00s	1:00	S
+Rule	Austria	1948	only	-	Apr	18	2:00s	1:00	S
+Rule	Austria	1980	only	-	Apr	 6	0:00	1:00	S
+Rule	Austria	1980	only	-	Sep	28	0:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Vienna	1:05:20 -	LMT	1893 Apr
+			1:00	C-Eur	CE%sT	1920
+			1:00	Austria	CE%sT	1940 Apr  1 2:00s
+			1:00	C-Eur	CE%sT	1945 Apr  2 2:00s
+			1:00	1:00	CEST	1945 Apr 12 2:00s
+			1:00	-	CET	1946
+			1:00	Austria	CE%sT	1981
+			1:00	EU	CE%sT
+
+# Belarus
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Minsk	1:50:16 -	LMT	1880
+			1:50	-	MMT	1924 May 2 # Minsk Mean Time
+			2:00	-	EET	1930 Jun 21
+			3:00	-	MSK	1941 Jun 28
+			1:00	C-Eur	CE%sT	1944 Jul  3
+			3:00	Russia	MSK/MSD	1990
+			3:00	-	MSK	1991 Mar 31 2:00s
+			2:00	1:00	EEST	1991 Sep 29 2:00s
+			2:00	-	EET	1992 Mar 29 0:00s
+			2:00	1:00	EEST	1992 Sep 27 0:00s
+			2:00	Russia	EE%sT
+
+# Belgium
+#
+# From Paul Eggert (1997-07-02):
+# Entries from 1918 through 1991 are taken from:
+#	Annuaire de L'Observatoire Royal de Belgique,
+#	Avenue Circulaire, 3, B-1180 BRUXELLES, CLVIIe annee, 1991
+#	(Imprimerie HAYEZ, s.p.r.l., Rue Fin, 4, 1080 BRUXELLES, MCMXC),
+#	pp 8-9.
+# LMT before 1892 was 0:17:30, according to the official journal of Belgium:
+#	Moniteur Belge, Samedi 30 Avril 1892, N.121.
+# Thanks to Pascal Delmoitie for these references.
+# The 1918 rules are listed for completeness; they apply to unoccupied Belgium.
+# Assume Brussels switched to WET in 1918 when the armistice took effect.
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Belgium	1918	only	-	Mar	 9	 0:00s	1:00	S
+Rule	Belgium	1918	1919	-	Oct	Sat>=1	23:00s	0	-
+Rule	Belgium	1919	only	-	Mar	 1	23:00s	1:00	S
+Rule	Belgium	1920	only	-	Feb	14	23:00s	1:00	S
+Rule	Belgium	1920	only	-	Oct	23	23:00s	0	-
+Rule	Belgium	1921	only	-	Mar	14	23:00s	1:00	S
+Rule	Belgium	1921	only	-	Oct	25	23:00s	0	-
+Rule	Belgium	1922	only	-	Mar	25	23:00s	1:00	S
+Rule	Belgium	1922	1927	-	Oct	Sat>=1	23:00s	0	-
+Rule	Belgium	1923	only	-	Apr	21	23:00s	1:00	S
+Rule	Belgium	1924	only	-	Mar	29	23:00s	1:00	S
+Rule	Belgium	1925	only	-	Apr	 4	23:00s	1:00	S
+# DSH writes that a royal decree of 1926-02-22 specified the Sun following 3rd
+# Sat in Apr (except if it's Easter, in which case it's one Sunday earlier),
+# to Sun following 1st Sat in Oct, and that a royal decree of 1928-09-15
+# changed the transition times to 02:00 GMT.
+Rule	Belgium	1926	only	-	Apr	17	23:00s	1:00	S
+Rule	Belgium	1927	only	-	Apr	 9	23:00s	1:00	S
+Rule	Belgium	1928	only	-	Apr	14	23:00s	1:00	S
+Rule	Belgium	1928	1938	-	Oct	Sun>=2	 2:00s	0	-
+Rule	Belgium	1929	only	-	Apr	21	 2:00s	1:00	S
+Rule	Belgium	1930	only	-	Apr	13	 2:00s	1:00	S
+Rule	Belgium	1931	only	-	Apr	19	 2:00s	1:00	S
+Rule	Belgium	1932	only	-	Apr	 3	 2:00s	1:00	S
+Rule	Belgium	1933	only	-	Mar	26	 2:00s	1:00	S
+Rule	Belgium	1934	only	-	Apr	 8	 2:00s	1:00	S
+Rule	Belgium	1935	only	-	Mar	31	 2:00s	1:00	S
+Rule	Belgium	1936	only	-	Apr	19	 2:00s	1:00	S
+Rule	Belgium	1937	only	-	Apr	 4	 2:00s	1:00	S
+Rule	Belgium	1938	only	-	Mar	27	 2:00s	1:00	S
+Rule	Belgium	1939	only	-	Apr	16	 2:00s	1:00	S
+Rule	Belgium	1939	only	-	Nov	19	 2:00s	0	-
+Rule	Belgium	1940	only	-	Feb	25	 2:00s	1:00	S
+Rule	Belgium	1944	only	-	Sep	17	 2:00s	0	-
+Rule	Belgium	1945	only	-	Apr	 2	 2:00s	1:00	S
+Rule	Belgium	1945	only	-	Sep	16	 2:00s	0	-
+Rule	Belgium	1946	only	-	May	19	 2:00s	1:00	S
+Rule	Belgium	1946	only	-	Oct	 7	 2:00s	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Brussels	0:17:30 -	LMT	1880
+			0:17:30	-	BMT	1892 May  1 12:00 # Brussels MT
+			0:00	-	WET	1914 Nov  8
+			1:00	-	CET	1916 May  1  0:00
+			1:00	C-Eur	CE%sT	1918 Nov 11 11:00u
+			0:00	Belgium	WE%sT	1940 May 20  2:00s
+			1:00	C-Eur	CE%sT	1944 Sep  3
+			1:00	Belgium	CE%sT	1977
+			1:00	EU	CE%sT
+
+# Bosnia and Herzegovina
+# see Serbia and Montenegro
+
+# Bulgaria
+#
+# From Plamen Simenov via Steffen Thorsen (1999-09-09):
+# A document of Government of Bulgaria (No.94/1997) says:
+# EET --> EETDST is in 03:00 Local time in last Sunday of March ...
+# EETDST --> EET is in 04:00 Local time in last Sunday of October
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Bulg	1979	only	-	Mar	31	23:00	1:00	S
+Rule	Bulg	1979	only	-	Oct	 1	 1:00	0	-
+Rule	Bulg	1980	1982	-	Apr	Sat<=7	23:00	1:00	S
+Rule	Bulg	1980	only	-	Sep	29	 1:00	0	-
+Rule	Bulg	1981	only	-	Sep	27	 2:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Sofia	1:33:16 -	LMT	1880
+			1:56:56	-	IMT	1894 Nov 30 # Istanbul MT?
+			2:00	-	EET	1942 Nov  2  3:00
+			1:00	C-Eur	CE%sT	1945 Apr  2  3:00
+			2:00	-	EET	1979 Mar 31 23:00
+			2:00	Bulg	EE%sT	1982 Sep 26  2:00
+			2:00	C-Eur	EE%sT	1991
+			2:00	E-Eur	EE%sT	1997
+			2:00	EU	EE%sT
+
+# Croatia
+# see Serbia and Montenegro
+
+# Cyprus
+# Please see the `asia' file for Asia/Nicosia.
+
+# Czech Republic
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Czech	1945	only	-	Apr	 8	2:00s	1:00	S
+Rule	Czech	1945	only	-	Nov	18	2:00s	0	-
+Rule	Czech	1946	only	-	May	 6	2:00s	1:00	S
+Rule	Czech	1946	1949	-	Oct	Sun>=1	2:00s	0	-
+Rule	Czech	1947	only	-	Apr	20	2:00s	1:00	S
+Rule	Czech	1948	only	-	Apr	18	2:00s	1:00	S
+Rule	Czech	1949	only	-	Apr	 9	2:00s	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Prague	0:57:44 -	LMT	1850
+			0:57:44	-	PMT	1891 Oct     # Prague Mean Time
+			1:00	C-Eur	CE%sT	1944 Sep 17 2:00s
+			1:00	Czech	CE%sT	1979
+			1:00	EU	CE%sT
+
+# Denmark, Faeroe Islands, and Greenland
+
+# From Jesper Norgaard Welen (2005-04-26):
+# http://www.hum.aau.dk/~poe/tid/tine/DanskTid.htm says that the law
+# [introducing standard time] was in effect from 1894-01-01....
+# The page http://www.retsinfo.dk/_GETDOCI_/ACCN/A18930008330-REGL
+# confirms this, and states that the law was put forth 1893-03-29.
+#
+# The EU treaty with effect from 1973:
+# http://www.retsinfo.dk/_GETDOCI_/ACCN/A19722110030-REGL
+#
+# This provoked a new law from 1974 to make possible summer time changes
+# in subsequenet decrees with the law
+# http://www.retsinfo.dk/_GETDOCI_/ACCN/A19740022330-REGL
+#
+# It seems however that no decree was set forward until 1980.  I have
+# not found any decree, but in another related law, the effecting DST
+# changes are stated explicitly to be from 1980-04-06 at 02:00 to
+# 1980-09-28 at 02:00.  If this is true, this differs slightly from
+# the EU rule in that DST runs to 02:00, not 03:00.  We don't know
+# when Denmark began using the EU rule correctly, but we have only
+# confirmation of the 1980-time, so I presume it was correct in 1981:
+# The law is about the management of the extra hour, concerning
+# working hours reported and effect on obligatory-rest rules (which
+# was suspended on that night):
+# http://www.retsinfo.dk/_GETDOCI_/ACCN/C19801120554-REGL
+
+# From Jesper Norgaard Welen (2005-06-11):
+# The Herning Folkeblad (1980-09-26) reported that the night between
+# Saturday and Sunday the clock is set back from three to two.
+
+# From Paul Eggert (2005-06-11):
+# Hence the "02:00" of the 1980 law refers to standard time, not
+# wall-clock time, and so the EU rules were in effect in 1980.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Denmark	1916	only	-	May	14	23:00	1:00	S
+Rule	Denmark	1916	only	-	Sep	30	23:00	0	-
+Rule	Denmark	1940	only	-	May	15	 0:00	1:00	S
+Rule	Denmark	1945	only	-	Apr	 2	 2:00s	1:00	S
+Rule	Denmark	1945	only	-	Aug	15	 2:00s	0	-
+Rule	Denmark	1946	only	-	May	 1	 2:00s	1:00	S
+Rule	Denmark	1946	only	-	Sep	 1	 2:00s	0	-
+Rule	Denmark	1947	only	-	May	 4	 2:00s	1:00	S
+Rule	Denmark	1947	only	-	Aug	10	 2:00s	0	-
+Rule	Denmark	1948	only	-	May	 9	 2:00s	1:00	S
+Rule	Denmark	1948	only	-	Aug	 8	 2:00s	0	-
+#
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Europe/Copenhagen	 0:50:20 -	LMT	1890
+			 0:50:20 -	CMT	1894 Jan  1 # Copenhagen MT
+			 1:00	Denmark	CE%sT	1942 Nov  2 2:00s
+			 1:00	C-Eur	CE%sT	1945 Apr  2 2:00
+			 1:00	Denmark	CE%sT	1980
+			 1:00	EU	CE%sT
+Zone Atlantic/Faeroe	-0:27:04 -	LMT	1908 Jan 11	# Torshavn
+			 0:00	-	WET	1981
+			 0:00	EU	WE%sT
+#
+# From Paul Eggert (2004-10-31):
+# During World War II, Germany maintained secret manned weather stations in
+# East Greenland and Franz Josef Land, but we don't know their time zones.
+# My source for this is Wilhelm Dege's book mentioned under Svalbard.
+#
+# From Paul Eggert (1996-11-22):
+# Greenland joined the EU as part of Denmark, obtained home rule on 1979-05-01,
+# and left the EU on 1985-02-01.  It therefore should have been using EU
+# rules at least through 1984.  Shanks says Scoresbysund and Godthab
+# used C-Eur rules after 1980, but IATA SSIM (1991/1996) says they use EU
+# rules since at least 1991.  Assume EU rules since 1980.
+
+# From Gwillin Law (2001-06-06), citing
+# <http://www.statkart.no/efs/efshefter/2001/efs5-2001.pdf> (2001-03-15),
+# and with translations corrected by Steffen Thorsen:
+#
+# Greenland has four local times, and the relation to UTC
+# is according to the following time line:
+#
+# The military zone near Thule	UTC-4
+# Standard Greenland time	UTC-3
+# Scoresbysund			UTC-1
+# Danmarkshavn			UTC
+#
+# In the military area near Thule and in Danmarkshavn DST will not be
+# introduced.
+
+# From Rives McDow (2001-11-01):
+#
+# I correspond regularly with the Dansk Polarcenter, and wrote them at
+# the time to clarify the situation in Thule.  Unfortunately, I have
+# not heard back from them regarding my recent letter.  [But I have
+# info from earlier correspondence.]
+#
+# According to the center, a very small local time zone around Thule
+# Air Base keeps the time according to UTC-4, implementing daylight
+# savings using North America rules, changing the time at 02:00 local time....
+#
+# The east coast of Greenland north of the community of Scoresbysund
+# uses UTC in the same way as in Iceland, year round, with no dst.
+# There are just a few stations on this coast, including the
+# Danmarkshavn ICAO weather station mentioned in your September 29th
+# email.  The other stations are two sledge patrol stations in
+# Mestersvig and Daneborg, the air force base at Station Nord, and the
+# DPC research station at Zackenberg.
+#
+# Scoresbysund and two small villages nearby keep time UTC-1 and use
+# the same daylight savings time period as in West Greenland (Godthab).
+#
+# The rest of Greenland, including Godthab (this area, although it
+# includes central Greenland, is known as west Greenland), keeps time
+# UTC-3, with daylight savings methods according to European rules.
+#
+# It is common procedure to use UTC 0 in the wilderness of East and
+# North Greenland, because it is mainly Icelandic aircraft operators
+# maintaining traffic in these areas.  However, the official status of
+# this area is that it sticks with Godthab time.  This area might be
+# considered a dual time zone in some respects because of this.
+
+# From Rives McDow (2001-11-19):
+# I heard back from someone stationed at Thule; the time change took place
+# there at 2:00 AM.
+
+# From Paul Eggert (2001-11-19):
+# The 1997 CIA map shows Danmarkshavn on GMT; the 1995 map as like Godthab.
+# For lack of better info, assume they were like Godthab before 1996.
+# startkart.no says Thule does not observe DST, but this is clearly an error,
+# so go with Shanks for all Thule transitions.
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Thule	1991	1992	-	Mar	lastSun	2:00	1:00	D
+Rule	Thule	1991	1992	-	Sep	lastSun	2:00	0	S
+Rule	Thule	1993	max	-	Apr	Sun>=1	2:00	1:00	D
+Rule	Thule	1993	max	-	Oct	lastSun	2:00	0	S
+#
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Danmarkshavn -1:14:40 -	LMT	1916 Jul 28
+			-3:00	-	WGT	1980 Apr  6 2:00
+			-3:00	EU	WG%sT	1996
+			0:00	-	GMT
+Zone America/Scoresbysund -1:29:00 -	LMT	1916 Jul 28 # Ittoqqortoormiit
+			-2:00	-	CGT	1980 Apr  6 2:00
+			-2:00	C-Eur	CG%sT	1981 Mar 29
+			-1:00	EU	EG%sT
+Zone America/Godthab	-3:26:56 -	LMT	1916 Jul 28 # Nuuk
+			-3:00	-	WGT	1980 Apr  6 2:00
+			-3:00	EU	WG%sT
+Zone America/Thule	-4:35:08 -	LMT	1916 Jul 28 # Pituffik air base
+			-4:00	Thule	A%sT
+
+# Estonia
+# From Peter Ilieve (1994-10-15):
+# A relative in Tallinn confirms the accuracy of the data for 1989 onwards
+# [through 1994] and gives the legal authority for it,
+# a regulation of the Government of Estonia, No. 111 of 1989....
+#
+# From Peter Ilieve (1996-10-28):
+# [IATA SSIM (1992/1996) claims that the Baltic republics switch at 01:00s,
+# but a relative confirms that Estonia still switches at 02:00s, writing:]
+# ``I do not [know] exactly but there are some little different
+# (confusing) rules for International Air and Railway Transport Schedules
+# conversion in Sunday connected with end of summer time in Estonia....
+# A discussion is running about the summer time efficiency and effect on
+# human physiology.  It seems that Estonia maybe will not change to
+# summer time next spring.''
+
+# From Peter Ilieve (1998-11-04), heavily edited:
+# <a href="http://trip.rk.ee/cgi-bin/thw?${BASE}=akt&${OOHTML}=rtd&TA=1998&TO=1&AN=1390">
+# The 1998-09-22 Estonian time law
+# </a>
+# refers to the Eighth Directive and cites the association agreement between
+# the EU and Estonia, ratified by the Estonian law (RT II 1995, 22--27, 120).
+#
+# I also asked [my relative] whether they use any standard abbreviation
+# for their standard and summer times. He says no, they use "suveaeg"
+# (summer time) and "talveaeg" (winter time).
+
+# From <a href="http://www.baltictimes.com/">The Baltic Times</a> (1999-09-09)
+# via Steffen Thorsen:
+# This year will mark the last time Estonia shifts to summer time,
+# a council of the ruling coalition announced Sept. 6....
+# But what this could mean for Estonia's chances of joining the European
+# Union are still unclear.  In 1994, the EU declared summer time compulsory
+# for all member states until 2001.  Brussels has yet to decide what to do
+# after that.
+
+# From Mart Oruaas (2000-01-29):
+# Regulation no. 301 (1999-10-12) obsoletes previous regulation
+# no. 206 (1998-09-22) and thus sticks Estonia to +02:00 GMT for all
+# the year round.  The regulation is effective 1999-11-01.
+
+# From Toomas Soome (2002-02-21):
+# The Estonian government has changed once again timezone politics.
+# Now we are using again EU rules.
+#
+# From Urmet Jaanes (2002-03-28):
+# The legislative reference is Government decree No. 84 on 2002-02-21.
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Tallinn	1:39:00	-	LMT	1880
+			1:39:00	-	TMT	1918 Feb # Tallinn Mean Time
+			1:00	C-Eur	CE%sT	1919 Jul
+			1:39:00	-	TMT	1921 May
+			2:00	-	EET	1940 Aug  6
+			3:00	-	MSK	1941 Sep 15
+			1:00	C-Eur	CE%sT	1944 Sep 22
+			3:00	Russia	MSK/MSD	1989 Mar 26 2:00s
+			2:00	1:00	EEST	1989 Sep 24 2:00s
+			2:00	C-Eur	EE%sT	1998 Sep 22
+			2:00	EU	EE%sT	1999 Nov  1
+			2:00	-	EET	2002 Feb 21
+			2:00	EU	EE%sT
+
+# Finland
+#
+# From Hannu Strang (25 Sep 1994 06:03:37 UTC):
+# Well, here in Helsinki we're just changing from summer time to regular one,
+# and it's supposed to change at 4am...
+#
+# From Paul Eggert (25 Sep 1994):
+# Shanks says Finland has switched at 02:00 standard time since 1981.
+# Go with Strang instead.
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Finland	1942	only	-	Apr	3	0:00	1:00	S
+Rule	Finland	1942	only	-	Oct	3	0:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Helsinki	1:39:52 -	LMT	1878 May 31
+			1:39:52	-	HMT	1921 May    # Helsinki Mean Time
+			2:00	Finland	EE%sT	1981 Mar 29 2:00
+			2:00	EU	EE%sT
+
+# Aaland Is
+Link	Europe/Helsinki	Europe/Mariehamn
+
+
+# France
+
+# From Ciro Discepolo (2000-12-20):
+#
+# Henri Le Corre, Regimes Horaires pour le monde entier, Editions
+# Traditionnelles - Paris 2 books, 1993
+#
+# Gabriel, Traite de l'heure dans le monde, Guy Tredaniel editeur,
+# Paris, 1991
+#
+# Francoise Gauquelin, Problemes de l'heure resolus en astrologie,
+# Guy tredaniel, Paris 1987
+
+
+#
+# Shanks seems to use `24:00' ambiguously; we resolve it with Whitman.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	France	1916	only	-	Jun	14	23:00s	1:00	S
+Rule	France	1916	1919	-	Oct	Sun>=1	23:00s	0	-
+Rule	France	1917	only	-	Mar	24	23:00s	1:00	S
+Rule	France	1918	only	-	Mar	 9	23:00s	1:00	S
+Rule	France	1919	only	-	Mar	 1	23:00s	1:00	S
+Rule	France	1920	only	-	Feb	14	23:00s	1:00	S
+Rule	France	1920	only	-	Oct	23	23:00s	0	-
+Rule	France	1921	only	-	Mar	14	23:00s	1:00	S
+Rule	France	1921	only	-	Oct	25	23:00s	0	-
+Rule	France	1922	only	-	Mar	25	23:00s	1:00	S
+# DSH writes that a law of 1923-05-24 specified 3rd Sat in Apr at 23:00 to 1st
+# Sat in Oct at 24:00; and that in 1930, because of Easter, the transitions
+# were Apr 12 and Oct 5.  Go with Shanks.
+Rule	France	1922	1938	-	Oct	Sat>=1	23:00s	0	-
+Rule	France	1923	only	-	May	26	23:00s	1:00	S
+Rule	France	1924	only	-	Mar	29	23:00s	1:00	S
+Rule	France	1925	only	-	Apr	 4	23:00s	1:00	S
+Rule	France	1926	only	-	Apr	17	23:00s	1:00	S
+Rule	France	1927	only	-	Apr	 9	23:00s	1:00	S
+Rule	France	1928	only	-	Apr	14	23:00s	1:00	S
+Rule	France	1929	only	-	Apr	20	23:00s	1:00	S
+Rule	France	1930	only	-	Apr	12	23:00s	1:00	S
+Rule	France	1931	only	-	Apr	18	23:00s	1:00	S
+Rule	France	1932	only	-	Apr	 2	23:00s	1:00	S
+Rule	France	1933	only	-	Mar	25	23:00s	1:00	S
+Rule	France	1934	only	-	Apr	 7	23:00s	1:00	S
+Rule	France	1935	only	-	Mar	30	23:00s	1:00	S
+Rule	France	1936	only	-	Apr	18	23:00s	1:00	S
+Rule	France	1937	only	-	Apr	 3	23:00s	1:00	S
+Rule	France	1938	only	-	Mar	26	23:00s	1:00	S
+Rule	France	1939	only	-	Apr	15	23:00s	1:00	S
+Rule	France	1939	only	-	Nov	18	23:00s	0	-
+Rule	France	1940	only	-	Feb	25	 2:00	1:00	S
+# The French rules for 1941-1944 were not used in Paris, but Shanks writes
+# that they were used in Monaco and in many French locations.
+# Le Corre writes that the upper limit of the free zone was Arneguy, Orthez,
+# Mont-de-Marsan, Bazas, Langon, Lamotte-Montravel, Marouil, La
+# Rochefoucault, Champagne-Mouton, La Roche-Posay, La Haye-Decartes,
+# Loches, Montrichard, Vierzon, Bourges, Moulins, Digoin,
+# Paray-le-Monial, Montceau-les-Mines, Chalons-sur-Saone, Arbois,
+# Dole, Morez, St-Claude, and Collognes (Haute-Savioe).
+Rule	France	1941	only	-	May	 5	 0:00	2:00	M # Midsummer
+# Shanks says this transition occurred at Oct 6 1:00,
+# but go with Denis Excoffier (1997-12-12),
+# who quotes the Ephemerides Astronomiques for 1998 from Bureau des Longitudes
+# as saying 5/10/41 22hUT.
+Rule	France	1941	only	-	Oct	 6	 0:00	1:00	S
+Rule	France	1942	only	-	Mar	 9	 0:00	2:00	M
+Rule	France	1942	only	-	Nov	 2	 3:00	1:00	S
+Rule	France	1943	only	-	Mar	29	 2:00	2:00	M
+Rule	France	1943	only	-	Oct	 4	 3:00	1:00	S
+Rule	France	1944	only	-	Apr	 3	 2:00	2:00	M
+Rule	France	1944	only	-	Oct	 8	 1:00	1:00	S
+Rule	France	1945	only	-	Apr	 2	 2:00	2:00	M
+Rule	France	1945	only	-	Sep	16	 3:00	0	-
+# Shanks gives Mar 28 2:00 and Sep 26 3:00;
+# go with Excoffier's 28/3/76 0hUT and 25/9/76 23hUT.
+Rule	France	1976	only	-	Mar	28	 1:00	1:00	S
+Rule	France	1976	only	-	Sep	26	 1:00	0	-
+# Shanks gives 0:09 for Paris Mean Time, and Whitman gives 0:09:05,
+# but Howse quotes the actual French legislation as saying 0:09:21.
+# Go with Howse.  Howse writes that the time in France was officially based
+# on PMT-0:09:21 until 1978-08-09, when the time base finally switched to UTC.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Paris	0:09:21 -	LMT	1891 Mar 15  0:01
+			0:09:21	-	PMT	1911 Mar 11  0:01  # Paris MT
+# Shanks gives 1940 Jun 14 0:00; go with Excoffier and Le Corre.
+			0:00	France	WE%sT	1940 Jun 14 23:00
+# Le Corre says Paris stuck with occupied-France time after the liberation;
+# go with Shanks.
+			1:00	C-Eur	CE%sT	1944 Aug 25
+			0:00	France	WE%sT	1945 Sep 16  3:00
+			1:00	France	CE%sT	1977
+			1:00	EU	CE%sT
+
+# Germany
+
+# From Markus Kuhn (1998-09-29):
+# The German time zone web site by the Physikalisch-Technische
+# Bundesanstalt contains DST information back to 1916.
+# [See tz-link.htm for the URL.]
+
+# From Joerg Schilling (2002-10-23):
+# In 1945, Berlin was switched to Moscow Summer time (GMT+4) by <a
+# href="http://www.dhm.de/lemo/html/biografien/BersarinNikolai/">
+# General [Nikolai] Bersarin</a>.
+
+# From Paul Eggert (2003-03-08):
+# <a href="http://www.parlament-berlin.de/pds-fraktion.nsf/727459127c8b66ee8525662300459099/defc77cb784f180ac1256c2b0030274b/$FILE/bersarint.pdf">
+# says that Bersarin issued an order to use Moscow time on May 20.
+# However, Moscow did not observe daylight saving in 1945, so
+# this was equivalent to CEMT (GMT+3), not GMT+4.
+
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Germany	1945	only	-	Apr	 2	2:00s	1:00	S
+Rule	Germany	1945	only	-	May	24	2:00	2:00	M # Midsummer
+Rule	Germany	1945	only	-	Sep	24	3:00	1:00	S
+Rule	Germany	1945	only	-	Nov	18	2:00s	0	-
+Rule	Germany	1946	only	-	Apr	14	2:00s	1:00	S
+Rule	Germany	1946	only	-	Oct	 7	2:00s	0	-
+Rule	Germany	1947	1949	-	Oct	Sun>=1	2:00s	0	-
+Rule	Germany	1947	only	-	Apr	 6	2:00s	1:00	S
+Rule	Germany	1947	only	-	May	11	2:00s	2:00	M
+Rule	Germany	1947	only	-	Jun	29	3:00	1:00	S
+Rule	Germany	1948	only	-	Apr	18	2:00s	1:00	S
+Rule	Germany	1949	only	-	Apr	10	2:00s	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Berlin	0:53:28 -	LMT	1893 Apr
+			1:00	C-Eur	CE%sT	1945 Apr 2 2:00
+			1:00	Germany	CE%sT	1980
+			1:00	EU	CE%sT
+
+# Georgia
+# Please see the "asia" file for Asia/Tbilisi.
+# Herodotus (Histories, IV.45) says Georgia north of the Phasis (now Rioni)
+# is in Europe.  Our reference location Tbilisi is in the Asian part.
+
+# Gibraltar
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Europe/Gibraltar	-0:21:24 -	LMT	1880 Aug  2
+			0:00	GB-Eire	%s	1957 Apr 14 2:00
+			1:00	-	CET	1982
+			1:00	EU	CE%sT
+
+# Greece
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+# Whitman gives 1932 Jul 5 - Nov 1; go with Shanks.
+Rule	Greece	1932	only	-	Jul	 7	0:00	1:00	S
+Rule	Greece	1932	only	-	Sep	 1	0:00	0	-
+# Whitman gives 1941 Apr 25 - ?; go with Shanks.
+Rule	Greece	1941	only	-	Apr	 7	0:00	1:00	S
+# Whitman gives 1942 Feb 2 - ?; go with Shanks.
+Rule	Greece	1942	only	-	Nov	 2	3:00	0	-
+Rule	Greece	1943	only	-	Mar	30	0:00	1:00	S
+Rule	Greece	1943	only	-	Oct	 4	0:00	0	-
+# Whitman gives 1944 Oct 3 - Oct 31; go with Shanks.
+Rule	Greece	1952	only	-	Jul	 1	0:00	1:00	S
+Rule	Greece	1952	only	-	Nov	 2	0:00	0	-
+Rule	Greece	1975	only	-	Apr	12	0:00s	1:00	S
+Rule	Greece	1975	only	-	Nov	26	0:00s	0	-
+Rule	Greece	1976	only	-	Apr	11	2:00s	1:00	S
+Rule	Greece	1976	only	-	Oct	10	2:00s	0	-
+Rule	Greece	1977	1978	-	Apr	Sun>=1	2:00s	1:00	S
+Rule	Greece	1977	only	-	Sep	26	2:00s	0	-
+Rule	Greece	1978	only	-	Sep	24	4:00	0	-
+Rule	Greece	1979	only	-	Apr	 1	9:00	1:00	S
+Rule	Greece	1979	only	-	Sep	29	2:00	0	-
+Rule	Greece	1980	only	-	Apr	 1	0:00	1:00	S
+Rule	Greece	1980	only	-	Sep	28	0:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Athens	1:34:52 -	LMT	1895 Sep 14
+			1:34:52	-	AMT	1916 Jul 28 0:01     # Athens MT
+			2:00	Greece	EE%sT	1941 Apr 30
+			1:00	Greece	CE%sT	1944 Apr  4
+			2:00	Greece	EE%sT	1981
+			# Shanks says they switched to C-Eur in 1981;
+			# go with EU instead, since Greece joined it on Jan 1.
+			2:00	EU	EE%sT
+
+# Hungary
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Hungary	1918	only	-	Apr	 1	 3:00	1:00	S
+Rule	Hungary	1918	only	-	Sep	29	 3:00	0	-
+Rule	Hungary	1919	only	-	Apr	15	 3:00	1:00	S
+Rule	Hungary	1919	only	-	Sep	15	 3:00	0	-
+Rule	Hungary	1920	only	-	Apr	 5	 3:00	1:00	S
+Rule	Hungary	1920	only	-	Sep	30	 3:00	0	-
+Rule	Hungary	1945	only	-	May	 1	23:00	1:00	S
+Rule	Hungary	1945	only	-	Nov	 3	 0:00	0	-
+Rule	Hungary	1946	only	-	Mar	31	 2:00s	1:00	S
+Rule	Hungary	1946	1949	-	Oct	Sun>=1	 2:00s	0	-
+Rule	Hungary	1947	1949	-	Apr	Sun>=4	 2:00s	1:00	S
+Rule	Hungary	1950	only	-	Apr	17	 2:00s	1:00	S
+Rule	Hungary	1950	only	-	Oct	23	 2:00s	0	-
+Rule	Hungary	1954	1955	-	May	23	 0:00	1:00	S
+Rule	Hungary	1954	1955	-	Oct	 3	 0:00	0	-
+Rule	Hungary	1956	only	-	Jun	Sun>=1	 0:00	1:00	S
+Rule	Hungary	1956	only	-	Sep	lastSun	 0:00	0	-
+Rule	Hungary	1957	only	-	Jun	Sun>=1	 1:00	1:00	S
+Rule	Hungary	1957	only	-	Sep	lastSun	 3:00	0	-
+Rule	Hungary	1980	only	-	Apr	 6	 1:00	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Budapest	1:16:20 -	LMT	1890 Oct
+			1:00	C-Eur	CE%sT	1918
+			1:00	Hungary	CE%sT	1941 Apr  6  2:00
+			1:00	C-Eur	CE%sT	1945 May  1 23:00
+			1:00	Hungary	CE%sT	1980 Sep 28  2:00s
+			1:00	EU	CE%sT
+
+# Iceland
+#
+# From Adam David (1993-11-06):
+# The name of the timezone in Iceland for system / mail / news purposes is GMT.
+#
+# (1993-12-05):
+# This material is paraphrased from the 1988 edition of the University of
+# Iceland Almanak.
+#
+# From January 1st, 1908 the whole of Iceland was standardised at 1 hour
+# behind GMT. Previously, local mean solar time was used in different parts
+# of Iceland, the almanak had been based on Reykjavik mean solar time which
+# was 1 hour and 28 minutes behind GMT.
+#
+# "first day of winter" referred to [below] means the first day of the 26 weeks
+# of winter, according to the old icelandic calendar that dates back to the
+# time the norsemen first settled Iceland.  The first day of winter is always
+# Saturday, but is not dependent on the Julian or Gregorian calendars.
+#
+# (1993-12-10):
+# I have a reference from the Oxford Icelandic-English dictionary for the
+# beginning of winter, which ties it to the ecclesiastical calendar (and thus
+# to the julian/gregorian calendar) over the period in question.
+#	the winter begins on the Saturday next before St. Luke's day
+#	(old style), or on St. Luke's day, if a Saturday.
+# St. Luke's day ought to be traceable from ecclesiastical sources. "old style"
+# might be a reference to the Julian calendar as opposed to Gregorian, or it
+# might mean something else (???).
+#
+# From Paul Eggert (1999-10-29):
+# The Iceland Almanak, Shanks and Whitman disagree on many points.
+# We go with the Almanak, except for one claim from Shanks, namely that
+# Reykavik was 21W57 from 1837 to 1908, local mean time before that.
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Iceland	1917	1918	-	Feb	19	23:00	1:00	S
+Rule	Iceland	1917	only	-	Oct	21	 1:00	0	-
+Rule	Iceland	1918	only	-	Nov	16	 1:00	0	-
+Rule	Iceland	1939	only	-	Apr	29	23:00	1:00	S
+Rule	Iceland	1939	only	-	Nov	29	 2:00	0	-
+Rule	Iceland	1940	only	-	Feb	25	 2:00	1:00	S
+Rule	Iceland	1940	only	-	Nov	 3	 2:00	0	-
+Rule	Iceland	1941	only	-	Mar	 2	 1:00s	1:00	S
+Rule	Iceland	1941	only	-	Nov	 2	 1:00s	0	-
+Rule	Iceland	1942	only	-	Mar	 8	 1:00s	1:00	S
+Rule	Iceland	1942	only	-	Oct	25	 1:00s	0	-
+# 1943-1946 - first Sunday in March until first Sunday in winter
+Rule	Iceland	1943	1946	-	Mar	Sun>=1	 1:00s	1:00	S
+Rule	Iceland	1943	1948	-	Oct	Sun>=22	 1:00s	0	-
+# 1947-1967 - first Sunday in April until first Sunday in winter
+Rule	Iceland	1947	1967	-	Apr	Sun>=1	 1:00s	1:00	S
+# 1949 Oct transition delayed by 1 week
+Rule	Iceland	1949	only	-	Oct	30	 1:00s	0	-
+Rule	Iceland	1950	1966	-	Oct	Sun>=22	 1:00s	0	-
+Rule	Iceland	1967	only	-	Oct	29	 1:00s	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Atlantic/Reykjavik	-1:27:24 -	LMT	1837
+			-1:27:48 -	RMT	1908 # Reykjavik Mean Time?
+			-1:00	Iceland	IS%sT	1968 Apr 7 1:00s
+			 0:00	-	GMT
+
+# Italy
+#
+# From Paul Eggert (2001-03-06):
+# Sicily and Sardinia each had their own time zones from 1866 to 1893,
+# called Palermo Time (+00:53:28) and Cagliari Time (+00:36:32).
+# During World War II, German-controlled Italy used German time.
+# But these events all occurred before the 1970 cutoff,
+# so record only the time in Rome.
+#
+# From Paul Eggert (1996-05-06):
+# For Italian DST we have three sources: Shanks, Whitman, and F. Pollastri
+# <a href="http://toi.iriti.cnr.it/uk/ienitlt.html">
+# Day-light Saving Time in Italy (1996-03-14)
+# </a>
+# (`FP' below), taken from an Italian National Electrotechnical Institute
+# publication. When the three sources disagree, guess who's right, as follows:
+#
+# year	FP	Shanks (S)	Whitman (W)	Go with:
+# 1916	06-03	06-03 24:00	06-03 00:00	FP & W
+#	09-30	09-30 24:00	09-30 01:00	FP; guess 24:00s
+# 1917	04-01	03-31 24:00	03-31 00:00	FP & S
+#	09-30	09-29 24:00	09-30 01:00	FP & W
+# 1918	03-09	03-09 24:00	03-09 00:00	FP & S
+#	10-06	10-05 24:00	10-06 01:00	FP & W
+# 1919	03-01	03-01 24:00	03-01 00:00	FP & S
+#	10-04	10-04 24:00	10-04 01:00	FP; guess 24:00s
+# 1920	03-20	03-20 24:00	03-20 00:00	FP & S
+#	09-18	09-18 24:00	10-01 01:00	FP; guess 24:00s
+# 1944	04-02	04-03 02:00			S (see C-Eur)
+#	09-16	10-02 03:00			FP; guess 24:00s
+# 1945	09-14	09-16 24:00			FP; guess 24:00s
+# 1970	05-21	05-31 00:00			S
+#	09-20	09-27 00:00			S
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Italy	1916	only	-	Jun	 3	0:00s	1:00	S
+Rule	Italy	1916	only	-	Oct	 1	0:00s	0	-
+Rule	Italy	1917	only	-	Apr	 1	0:00s	1:00	S
+Rule	Italy	1917	only	-	Sep	30	0:00s	0	-
+Rule	Italy	1918	only	-	Mar	10	0:00s	1:00	S
+Rule	Italy	1918	1919	-	Oct	Sun>=1	0:00s	0	-
+Rule	Italy	1919	only	-	Mar	 2	0:00s	1:00	S
+Rule	Italy	1920	only	-	Mar	21	0:00s	1:00	S
+Rule	Italy	1920	only	-	Sep	19	0:00s	0	-
+Rule	Italy	1940	only	-	Jun	15	0:00s	1:00	S
+Rule	Italy	1944	only	-	Sep	17	0:00s	0	-
+Rule	Italy	1945	only	-	Apr	 2	2:00	1:00	S
+Rule	Italy	1945	only	-	Sep	15	0:00s	0	-
+Rule	Italy	1946	only	-	Mar	17	2:00s	1:00	S
+Rule	Italy	1946	only	-	Oct	 6	2:00s	0	-
+Rule	Italy	1947	only	-	Mar	16	0:00s	1:00	S
+Rule	Italy	1947	only	-	Oct	 5	0:00s	0	-
+Rule	Italy	1948	only	-	Feb	29	2:00s	1:00	S
+Rule	Italy	1948	only	-	Oct	 3	2:00s	0	-
+Rule	Italy	1966	1968	-	May	Sun>=22	0:00	1:00	S
+Rule	Italy	1966	1969	-	Sep	Sun>=22	0:00	0	-
+Rule	Italy	1969	only	-	Jun	 1	0:00	1:00	S
+Rule	Italy	1970	only	-	May	31	0:00	1:00	S
+Rule	Italy	1970	only	-	Sep	lastSun	0:00	0	-
+Rule	Italy	1971	1972	-	May	Sun>=22	0:00	1:00	S
+Rule	Italy	1971	only	-	Sep	lastSun	1:00	0	-
+Rule	Italy	1972	only	-	Oct	 1	0:00	0	-
+Rule	Italy	1973	only	-	Jun	 3	0:00	1:00	S
+Rule	Italy	1973	1974	-	Sep	lastSun	0:00	0	-
+Rule	Italy	1974	only	-	May	26	0:00	1:00	S
+Rule	Italy	1975	only	-	Jun	 1	0:00s	1:00	S
+Rule	Italy	1975	1977	-	Sep	lastSun	0:00s	0	-
+Rule	Italy	1976	only	-	May	30	0:00s	1:00	S
+Rule	Italy	1977	1979	-	May	Sun>=22	0:00s	1:00	S
+Rule	Italy	1978	only	-	Oct	 1	0:00s	0	-
+Rule	Italy	1979	only	-	Sep	30	0:00s	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Rome	0:49:56 -	LMT	1866 Sep 22
+			0:49:56	-	RMT	1893 Nov	# Rome Mean Time
+			1:00	Italy	CE%sT	1942 Nov  2 2:00s
+			1:00	C-Eur	CE%sT	1944 Jul
+			1:00	Italy	CE%sT	1980
+			1:00	EU	CE%sT
+
+Link	Europe/Rome	Europe/Vatican
+Link	Europe/Rome	Europe/San_Marino
+
+# Latvia
+
+# From Liene Kanepe (1998-09-17):
+
+# I asked about this matter Scientific Secretary of the Institute of Astronomy
+# of The University of Latvia Dr. paed Mr. Ilgonis Vilks. I also searched the
+# correct data in juridical acts and I found some juridical documents about
+# changes in the counting of time in Latvia from 1981....
+#
+# Act No.35 of the Council of Ministers of Latvian SSR of 1981-01-22 ...
+# according to the Act No.925 of the Council of Ministers of USSR of 1980-10-24
+# ...: all year round the time of 2nd time zone + 1 hour, in addition turning
+# the hands of the clock 1 hour forward on 1 April at 00:00 (GMT 31 March 21:00)
+# and 1 hour backward on the 1 October at 00:00 (GMT 30 September 20:00).
+#
+# Act No.592 of the Council of Ministers of Latvian SSR of 1984-09-24 ...
+# according to the Act No.967 of the Council of Ministers of USSR of 1984-09-13
+# ...: all year round the time of 2nd time zone + 1 hour, in addition turning
+# the hands of the clock 1 hour forward on the last Sunday of March at 02:00
+# (GMT 23:00 on the previous day) and 1 hour backward on the last Sunday of
+# September at 03:00 (GMT 23:00 on the previous day).
+#
+# Act No.81 of the Council of Ministers of Latvian SSR of 1989-03-22 ...
+# according to the Act No.227 of the Council of Ministers of USSR of 1989-03-14
+# ...: since the last Sunday of March 1989 in Lithuanian SSR, Latvian SSR,
+# Estonian SSR and Kaliningrad region of Russian Federation all year round the
+# time of 2nd time zone (Moscow time minus one hour). On the territory of Latvia
+# transition to summer time is performed on the last Sunday of March at 02:00
+# (GMT 00:00), turning the hands of the clock 1 hour forward.  The end of
+# daylight saving time is performed on the last Sunday of September at 03:00
+# (GMT 00:00), turning the hands of the clock 1 hour backward. Exception is
+# 1989-03-26, when we must not turn the hands of the clock....
+#
+# The Regulations of the Cabinet of Ministers of the Republic of Latvia of
+# 1997-01-21 on transition to Summer time ... established the same order of
+# daylight savings time settings as in the States of the European Union.
+
+# From Andrei Ivanov (2000-03-06):
+# This year Latvia will not switch to Daylight Savings Time (as specified in
+# <a href="http://www.lv-laiks.lv/wwwraksti/2000/071072/vd4.htm">
+# The Regulations of the Cabinet of Ministers of the Rep. of Latvia of
+# 29-Feb-2000 (#79)</a>, in Latvian for subscribers only).
+
+# <a href="http://www.rferl.org/newsline/2001/01/3-CEE/cee-030101.html">
+# From RFE/RL Newsline (2001-01-03), noted after a heads-up by Rives McDow:
+# </a>
+# The Latvian government on 2 January decided that the country will
+# institute daylight-saving time this spring, LETA reported.
+# Last February the three Baltic states decided not to turn back their
+# clocks one hour in the spring....
+# Minister of Economy Aigars Kalvitis noted that Latvia had too few
+# daylight hours and thus decided to comply with a draft European
+# Commission directive that provides for instituting daylight-saving
+# time in EU countries between 2002 and 2006. The Latvian government
+# urged Lithuania and Estonia to adopt a similar time policy, but it
+# appears that they will not do so....
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Latvia	1989	1996	-	Mar	lastSun	 2:00s	1:00	S
+Rule	Latvia	1989	1996	-	Sep	lastSun	 2:00s	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Riga	1:36:24	-	LMT	1880
+			1:36:24	-	RMT	1918 Apr 15 2:00 #Riga Mean Time
+			1:36:24	1:00	LST	1918 Sep 16 3:00 #Latvian Summer
+			1:36:24	-	RMT	1919 Apr  1 2:00
+			1:36:24	1:00	LST	1919 May 22 3:00
+			1:36:24	-	RMT	1926 May 11
+			2:00	-	EET	1940 Aug  5
+			3:00	-	MSK	1941 Jul
+			1:00	C-Eur	CE%sT	1944 Oct 13
+			3:00	Russia	MSK/MSD	1989 Mar lastSun 2:00s
+			2:00	1:00	EEST	1989 Sep lastSun 2:00s
+			2:00	Latvia	EE%sT	1997 Jan 21
+			2:00	EU	EE%sT	2000 Feb 29
+			2:00	-	EET	2001 Jan  2
+			2:00	EU	EE%sT
+
+# Liechtenstein
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Vaduz	0:38:04 -	LMT	1894 Jun
+			1:00	-	CET	1981
+			1:00	EU	CE%sT
+
+# Lithuania
+
+# From Paul Eggert (1996-11-22):
+# IATA SSIM (1992/1996) says Lithuania uses W-Eur rules, but since it is
+# known to be wrong about Estonia and Latvia, assume it's wrong here too.
+
+# From Marius Gedminas (1998-08-07):
+# I would like to inform that in this year Lithuanian time zone
+# (Europe/Vilnius) was changed.
+
+# From <a href="http://www.elta.lt/">ELTA</a> No. 972 (2582) (1999-09-29),
+# via Steffen Thorsen:
+# Lithuania has shifted back to the second time zone (GMT plus two hours)
+# to be valid here starting from October 31,
+# as decided by the national government on Wednesday....
+# The Lithuanian government also announced plans to consider a
+# motion to give up shifting to summer time in spring, as it was
+# already done by Estonia.
+
+# From the <a href="http://www.tourism.lt/informa/ff.htm">
+# Fact File, Lithuanian State Department of Tourism
+# </a> (2000-03-27): Local time is GMT+2 hours ..., no daylight saving.
+
+# From a user via Klaus Marten (2003-02-07):
+# As a candidate for membership of the European Union, Lithuania will
+# observe Summer Time in 2003, changing its clocks at the times laid
+# down in EU Directive 2000/84 of 19.I.01 (i.e. at the same times as its
+# neighbour Latvia). The text of the Lithuanian government Order of
+# 7.XI.02 to this effect can be found at
+# http://www.lrvk.lt/nut/11/n1749.htm
+
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Vilnius	1:41:16	-	LMT	1880
+			1:24:00	-	WMT	1917	    # Warsaw Mean Time
+			1:35:36	-	KMT	1919 Oct 10 # Kaunas Mean Time
+			1:00	-	CET	1920 Jul 12
+			2:00	-	EET	1920 Oct  9
+			1:00	-	CET	1940 Aug  3
+			3:00	-	MSK	1941 Jun 24
+			1:00	C-Eur	CE%sT	1944 Aug
+			3:00	Russia	MSK/MSD	1991 Mar 31 2:00s
+			2:00	1:00	EEST	1991 Sep 29 2:00s
+			2:00	C-Eur	EE%sT	1998
+			2:00	-	EET	1998 Mar 29 1:00u
+			1:00	EU	CE%sT	1999 Oct 31 1:00u
+			2:00	-	EET	2003 Jan  1
+			2:00	EU	EE%sT
+
+# Luxembourg
+# Whitman disagrees with most of these dates in minor ways; go with Shanks.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Lux	1916	only	-	May	14	23:00	1:00	S
+Rule	Lux	1916	only	-	Oct	 1	 1:00	0	-
+Rule	Lux	1917	only	-	Apr	28	23:00	1:00	S
+Rule	Lux	1917	only	-	Sep	17	 1:00	0	-
+Rule	Lux	1918	only	-	Apr	Mon>=15	 2:00s	1:00	S
+Rule	Lux	1918	only	-	Sep	Mon>=15	 2:00s	0	-
+Rule	Lux	1919	only	-	Mar	 1	23:00	1:00	S
+Rule	Lux	1919	only	-	Oct	 5	 3:00	0	-
+Rule	Lux	1920	only	-	Feb	14	23:00	1:00	S
+Rule	Lux	1920	only	-	Oct	24	 2:00	0	-
+Rule	Lux	1921	only	-	Mar	14	23:00	1:00	S
+Rule	Lux	1921	only	-	Oct	26	 2:00	0	-
+Rule	Lux	1922	only	-	Mar	25	23:00	1:00	S
+Rule	Lux	1922	only	-	Oct	Sun>=2	 1:00	0	-
+Rule	Lux	1923	only	-	Apr	21	23:00	1:00	S
+Rule	Lux	1923	only	-	Oct	Sun>=2	 2:00	0	-
+Rule	Lux	1924	only	-	Mar	29	23:00	1:00	S
+Rule	Lux	1924	1928	-	Oct	Sun>=2	 1:00	0	-
+Rule	Lux	1925	only	-	Apr	 5	23:00	1:00	S
+Rule	Lux	1926	only	-	Apr	17	23:00	1:00	S
+Rule	Lux	1927	only	-	Apr	 9	23:00	1:00	S
+Rule	Lux	1928	only	-	Apr	14	23:00	1:00	S
+Rule	Lux	1929	only	-	Apr	20	23:00	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Europe/Luxembourg	0:24:36 -	LMT	1904 Jun
+			1:00	Lux	CE%sT	1918 Nov 25
+			0:00	Lux	WE%sT	1929 Oct  6 2:00s
+			0:00	Belgium	WE%sT	1940 May 14 3:00
+			1:00	C-Eur	WE%sT	1944 Sep 18 3:00
+			1:00	Belgium	CE%sT	1977
+			1:00	EU	CE%sT
+
+# Macedonia
+# see Serbia and Montenegro
+
+# Malta
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Malta	1973	only	-	Mar	31	0:00s	1:00	S
+Rule	Malta	1973	only	-	Sep	29	0:00s	0	-
+Rule	Malta	1974	only	-	Apr	21	0:00s	1:00	S
+Rule	Malta	1974	only	-	Sep	16	0:00s	0	-
+Rule	Malta	1975	1979	-	Apr	Sun>=15	2:00	1:00	S
+Rule	Malta	1975	1980	-	Sep	Sun>=15	2:00	0	-
+Rule	Malta	1980	only	-	Mar	31	2:00	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Malta	0:58:04 -	LMT	1893 Nov  2	# Valletta
+			1:00	Italy	CE%sT	1942 Nov  2 2:00s
+			1:00	C-Eur	CE%sT	1945 Apr  2 2:00s
+			1:00	Italy	CE%sT	1973 Mar 31
+			1:00	Malta	CE%sT	1981
+			1:00	EU	CE%sT
+
+# Moldova
+
+# From Paul Eggert (2001-02-11):
+# A previous version of this database followed Shanks, who writes that
+# Tiraspol switched to Moscow time on 1992-01-19 at 02:00.
+# However, this is most likely an error, as Moldova declared independence
+# on 1991-08-27 (the 1992-01-19 date is that of a Russian decree).
+# In early 1992 there was large-scale interethnic violence in the area
+# and it's possible that some Russophones continued to observe Moscow time.
+# But [two people] separately reported via
+# Jesper Norgaard that as of 2001-01-24 Tiraspol was like Chisinau.
+# The Tiraspol entry has therefore been removed for now.
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Chisinau	1:55:20 -	LMT	1880
+			1:55	-	CMT	1918 Feb 15 # Chisinau MT
+			1:44:24	-	BMT	1931 Jul 24 # Bucharest MT
+			2:00	Romania	EE%sT	1940 Aug 15
+			2:00	1:00	EEST	1941 Jul 17
+			1:00	C-Eur	CE%sT	1944 Aug 24
+			3:00	Russia	MSK/MSD	1990
+			3:00	-	MSK	1990 May 6
+			2:00	-	EET	1991
+			2:00	Russia	EE%sT	1992
+			2:00	E-Eur	EE%sT	1997
+# See Romania commentary for the guessed 1997 transition to EU rules.
+			2:00	EU	EE%sT
+
+# Monaco
+# Shanks gives 0:09 for Paris Mean Time; go with Howse's more precise 0:09:21.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Monaco	0:29:32 -	LMT	1891 Mar 15
+			0:09:21	-	PMT	1911 Mar 11    # Paris Mean Time
+			0:00	France	WE%sT	1945 Sep 16 3:00
+			1:00	France	CE%sT	1977
+			1:00	EU	CE%sT
+
+# Netherlands
+
+# Howse writes that the Netherlands' railways used GMT between 1892 and 1940,
+# but for other purposes the Netherlands used Amsterdam mean time.
+
+# However, Robert H. van Gent writes (2001-04-01):
+# Howse's statement is only correct up to 1909. From 1909-05-01 (00:00:00
+# Amsterdam mean time) onwards, the whole of the Netherlands (including
+# the Dutch railways) was required by law to observe Amsterdam mean time
+# (19 minutes 32.13 seconds ahead of GMT). This had already been the
+# common practice (except for the railways) for many decades but it was
+# not until 1909 when the Dutch government finally defined this by law.
+# On 1937-07-01 this was changed to 20 minutes (exactly) ahead of GMT and
+# was generally known as Dutch Time ("Nederlandse Tijd").
+#
+# (2001-04-08):
+# 1892-05-01 was the date when the Dutch railways were by law required to
+# observe GMT while the remainder of the Netherlands adhered to the common
+# practice of following Amsterdam mean time.
+#
+# (2001-04-09):
+# In 1835 the authorities of the province of North Holland requested the
+# municipal authorities of the towns and cities in the province to observe
+# Amsterdam mean time but I do not know in how many cases this request was
+# actually followed.
+#
+# From 1852 onwards the Dutch telegraph offices were by law required to
+# observe Amsterdam mean time. As the time signals from the observatory of
+# Leiden were also distributed by the telegraph system, I assume that most
+# places linked up with the telegraph (and railway) system automatically
+# adopted Amsterdam mean time.
+#
+# Although the early Dutch railway companies initially observed a variety
+# of times, most of them had adopted Amsterdam mean time by 1858 but it
+# was not until 1866 when they were all required by law to observe
+# Amsterdam mean time.
+
+# The data before 1945 are taken from
+# <http://www.phys.uu.nl/~vgent/wettijd/wettijd.htm>.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Neth	1916	only	-	May	 1	0:00	1:00	NST	# Netherlands Summer Time
+Rule	Neth	1916	only	-	Oct	 1	0:00	0	AMT	# Amsterdam Mean Time
+Rule	Neth	1917	only	-	Apr	16	2:00s	1:00	NST
+Rule	Neth	1917	only	-	Sep	17	2:00s	0	AMT
+Rule	Neth	1918	1921	-	Apr	Mon>=1	2:00s	1:00	NST
+Rule	Neth	1918	1921	-	Sep	lastMon	2:00s	0	AMT
+Rule	Neth	1922	only	-	Mar	lastSun	2:00s	1:00	NST
+Rule	Neth	1922	1936	-	Oct	Sun>=2	2:00s	0	AMT
+Rule	Neth	1923	only	-	Jun	Fri>=1	2:00s	1:00	NST
+Rule	Neth	1924	only	-	Mar	lastSun	2:00s	1:00	NST
+Rule	Neth	1925	only	-	Jun	Fri>=1	2:00s	1:00	NST
+# From 1926 through 1939 DST began 05-15, except that it was delayed by a week
+# in years when 05-15 fell in the Pentecost weekend.
+Rule	Neth	1926	1931	-	May	15	2:00s	1:00	NST
+Rule	Neth	1932	only	-	May	22	2:00s	1:00	NST
+Rule	Neth	1933	1936	-	May	15	2:00s	1:00	NST
+Rule	Neth	1937	only	-	May	22	2:00s	1:00	NST
+Rule	Neth	1937	only	-	Jul	 1	0:00	1:00	S
+Rule	Neth	1937	1939	-	Oct	Sun>=2	2:00s	0	-
+Rule	Neth	1938	1939	-	May	15	2:00s	1:00	S
+Rule	Neth	1945	only	-	Apr	 2	2:00s	1:00	S
+Rule	Neth	1945	only	-	Sep	16	2:00s	0	-
+#
+# Amsterdam Mean Time was +00:19:32.13 exactly, but the .13 is omitted
+# below because the current format requires GMTOFF to be an integer.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Europe/Amsterdam	0:19:32 -	LMT	1835
+			0:19:32	Neth	%s	1937 Jul  1
+			0:20	Neth	NE%sT	1940 May 16 0:00 # Dutch Time
+			1:00	C-Eur	CE%sT	1945 Apr  2 2:00
+			1:00	Neth	CE%sT	1977
+			1:00	EU	CE%sT
+
+# Norway
+# http://met.no/met/met_lex/q_u/sommertid.html (2004-01) agrees with Shanks.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Norway	1916	only	-	May	22	1:00	1:00	S
+Rule	Norway	1916	only	-	Sep	30	0:00	0	-
+Rule	Norway	1945	only	-	Apr	 2	2:00s	1:00	S
+Rule	Norway	1945	only	-	Oct	 1	2:00s	0	-
+Rule	Norway	1959	1964	-	Mar	Sun>=15	2:00s	1:00	S
+Rule	Norway	1959	1965	-	Sep	Sun>=15	2:00s	0	-
+Rule	Norway	1965	only	-	Apr	25	2:00s	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Oslo	0:43:00 -	LMT	1895 Jan  1
+			1:00	Norway	CE%sT	1940 Aug 10 23:00
+			1:00	C-Eur	CE%sT	1945 Apr  2  2:00
+			1:00	Norway	CE%sT	1980
+			1:00	EU	CE%sT
+
+# Svalbard & Jan Mayen
+
+# From Steffen Thorsen (2001-05-01):
+# Although I could not find it explicitly, it seems that Jan Mayen and
+# Svalbard have been using the same time as Norway at least since the
+# time they were declared as parts of Norway.  Svalbard was declared
+# as a part of Norway by law of 1925-07-17 no 11, section 4 and Jan
+# Mayen by law of 1930-02-27 no 2, section 2. (From
+# http://www.lovdata.no/all/nl-19250717-011.html and
+# http://www.lovdata.no/all/nl-19300227-002.html).  The law/regulation
+# for normal/standard time in Norway is from 1894-06-29 no 1 (came
+# into operation on 1895-01-01) and Svalbard/Jan Mayen seem to be a
+# part of this law since 1925/1930. (From
+# http://www.lovdata.no/all/nl-18940629-001.html ) I have not been
+# able to find if Jan Mayen used a different time zone (e.g. -0100)
+# before 1930. Jan Mayen has only been "inhabitated" since 1921 by
+# Norwegian meteorologists and maybe used the same time as Norway ever
+# since 1921.  Svalbard (Arctic/Longyearbyen) has been inhabited since
+# before 1895, and therefore probably changed the local time somewhere
+# between 1895 and 1925 (inclusive).
+
+# From Paul Eggert (2001-05-01):
+#
+# Actually, Jan Mayen was never occupied by Germany during World War II,
+# so it must have diverged from Oslo time during the war, as Oslo was
+# keeping Berlin time.
+#
+# <http://home.no.net/janmayen/history.htm> says that the meteorologists
+# burned down their station in 1940 and left the island, but returned in
+# 1941 with a small Norwegian garrison and continued operations despite
+# frequent air ttacks from Germans.  In 1943 the Americans established a
+# radiolocating station on the island, called "Atlantic City".  Possibly
+# the UTC offset changed during the war, but I think it unlikely that
+# Jan Mayen used German daylight-saving rules.
+#
+# Svalbard is more complicated, as it was raided in August 1941 by an
+# Allied party that evacuated the civilian population to England (says
+# <http://www.bartleby.com/65/sv/Svalbard.html>).  The Svalbard FAQ
+# <http://www.svalbard.com/SvalbardFAQ.html> says that the Germans were
+# expelled on 1942-05-14.  However, small parties of Germans did return,
+# and according to Wilhelm Dege's book "War North of 80" (1954)
+# <http://www.ucalgary.ca/UofC/departments/UP/1-55238/1-55238-110-2.html>
+# the German armed forces at the Svalbard weather station code-named
+# Haudegen did not surrender to the Allies until September 1945.
+#
+# All these events predate our cutoff date of 1970.  Unless we can
+# come up with more definitive info about the timekeeping during the
+# war years it's probably best just do do the following for now:
+Link	Europe/Oslo	Arctic/Longyearbyen
+Link	Europe/Oslo	Atlantic/Jan_Mayen
+
+# Poland
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Poland	1918	1919	-	Sep	16	2:00s	0	-
+Rule	Poland	1919	only	-	Apr	15	2:00s	1:00	S
+# Whitman gives 1944 Nov 30; go with Shanks.
+Rule	Poland	1944	only	-	Oct	 4	2:00	0	-
+# For 1944-1948 Whitman gives the previous day; go with Shanks.
+Rule	Poland	1945	only	-	Apr	29	0:00	1:00	S
+Rule	Poland	1945	only	-	Nov	 1	0:00	0	-
+# For 1946 on the source is Kazimierz Borkowski,
+# Torun Center for Astronomy, Dept. of Radio Astronomy, Nicolaus Copernicus U.,
+# <http://www.astro.uni.torun.pl/~kb/Artykuly/U-PA/Czas2.htm#tth_tAb1>
+# Thanks to Przemyslaw Augustyniak (2005-05-28) for this reference.
+# He also gives these further references:
+# Mon Pol nr 13, poz 162 (1995) <http://www.abc.com.pl/serwis/mp/1995/0162.htm>
+# Druk nr 2180 (2003) <http://www.senat.gov.pl/k5/dok/sejm/053/2180.pdf>
+Rule	Poland	1946	only	-	Apr	14	0:00s	1:00	S
+Rule	Poland	1946	only	-	Oct	 7	2:00s	0	-
+Rule	Poland	1947	only	-	May	 4	2:00s	1:00	S
+Rule	Poland	1947	1949	-	Oct	Sun>=1	2:00s	0	-
+Rule	Poland	1948	only	-	Apr	18	2:00s	1:00	S
+Rule	Poland	1949	only	-	Apr	10	2:00s	1:00	S
+Rule	Poland	1957	only	-	Jun	 2	1:00s	1:00	S
+Rule	Poland	1957	1958	-	Sep	lastSun	1:00s	0	-
+Rule	Poland	1958	only	-	Mar	30	1:00s	1:00	S
+Rule	Poland	1959	only	-	May	31	1:00s	1:00	S
+Rule	Poland	1959	1961	-	Oct	Sun>=1	1:00s	0	-
+Rule	Poland	1960	only	-	Apr	 3	1:00s	1:00	S
+Rule	Poland	1961	1964	-	May	lastSun	1:00s	1:00	S
+Rule	Poland	1962	1964	-	Sep	lastSun	1:00s	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Warsaw	1:24:00 -	LMT	1880
+			1:24:00	-	WMT	1915 Aug  5   # Warsaw Mean Time
+			1:00	C-Eur	CE%sT	1918 Sep 16 3:00
+			2:00	Poland	EE%sT	1922 Jun
+			1:00	Poland	CE%sT	1940 Jun 23 2:00
+			1:00	C-Eur	CE%sT	1944 Oct
+			1:00	Poland	CE%sT	1977
+			1:00	W-Eur	CE%sT	1988
+			1:00	EU	CE%sT
+
+# Portugal
+#
+# From Rui Pedro Salgueiro (1992-11-12):
+# Portugal has recently (September, 27) changed timezone
+# (from WET to MET or CET) to harmonize with EEC.
+#
+# Martin Bruckmann (1996-02-29) reports via Peter Ilieve
+# that Portugal is reverting to 0:00 by not moving its clocks this spring.
+# The new Prime Minister was fed up with getting up in the dark in the winter.
+#
+# From Paul Eggert (1996-11-12):
+# IATA SSIM (1991-09) reports several 1991-09 and 1992-09 transitions
+# at 02:00u, not 01:00u.  Assume that these are typos.
+# IATA SSIM (1991/1992) reports that the Azores were at -1:00.
+# IATA SSIM (1993-02) says +0:00; later issues (through 1996-09) say -1:00.
+# Guess that the Azores changed to EU rules in 1992 (since that's when Portugal
+# harmonized with the EU), and that they stayed +0:00 that winter.
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+# DSH writes that despite Decree 1,469 (1915), the change to the clocks was not
+# done every year, depending on what Spain did, because of railroad schedules.
+# Go with Shanks.
+Rule	Port	1916	only	-	Jun	17	23:00	1:00	S
+# Whitman gives 1916 Oct 31; go with Shanks.
+Rule	Port	1916	only	-	Nov	 1	 1:00	0	-
+Rule	Port	1917	only	-	Feb	28	23:00s	1:00	S
+Rule	Port	1917	1921	-	Oct	14	23:00s	0	-
+Rule	Port	1918	only	-	Mar	 1	23:00s	1:00	S
+Rule	Port	1919	only	-	Feb	28	23:00s	1:00	S
+Rule	Port	1920	only	-	Feb	29	23:00s	1:00	S
+Rule	Port	1921	only	-	Feb	28	23:00s	1:00	S
+Rule	Port	1924	only	-	Apr	16	23:00s	1:00	S
+Rule	Port	1924	only	-	Oct	14	23:00s	0	-
+Rule	Port	1926	only	-	Apr	17	23:00s	1:00	S
+Rule	Port	1926	1929	-	Oct	Sat>=1	23:00s	0	-
+Rule	Port	1927	only	-	Apr	 9	23:00s	1:00	S
+Rule	Port	1928	only	-	Apr	14	23:00s	1:00	S
+Rule	Port	1929	only	-	Apr	20	23:00s	1:00	S
+Rule	Port	1931	only	-	Apr	18	23:00s	1:00	S
+# Whitman gives 1931 Oct 8; go with Shanks.
+Rule	Port	1931	1932	-	Oct	Sat>=1	23:00s	0	-
+Rule	Port	1932	only	-	Apr	 2	23:00s	1:00	S
+# Shanks gives 1934 Apr 4; go with Whitman.
+Rule	Port	1934	only	-	Apr	 7	23:00s	1:00	S
+# Whitman gives 1934 Oct 5; go with Shanks.
+Rule	Port	1934	1938	-	Oct	Sat>=1	23:00s	0	-
+# Shanks gives 1935 Apr 30; go with Whitman.
+Rule	Port	1935	only	-	Mar	30	23:00s	1:00	S
+Rule	Port	1936	only	-	Apr	18	23:00s	1:00	S
+# Whitman gives 1937 Apr 2; go with Shanks.
+Rule	Port	1937	only	-	Apr	 3	23:00s	1:00	S
+Rule	Port	1938	only	-	Mar	26	23:00s	1:00	S
+Rule	Port	1939	only	-	Apr	15	23:00s	1:00	S
+# Whitman gives 1939 Oct 7; go with Shanks.
+Rule	Port	1939	only	-	Nov	18	23:00s	0	-
+Rule	Port	1940	only	-	Feb	24	23:00s	1:00	S
+# Shanks gives 1940 Oct 7; go with Whitman.
+Rule	Port	1940	1941	-	Oct	 5	23:00s	0	-
+Rule	Port	1941	only	-	Apr	 5	23:00s	1:00	S
+Rule	Port	1942	1945	-	Mar	Sat>=8	23:00s	1:00	S
+Rule	Port	1942	only	-	Apr	25	22:00s	2:00	M # Midsummer
+Rule	Port	1942	only	-	Aug	15	22:00s	1:00	S
+Rule	Port	1942	1945	-	Oct	Sat>=24	23:00s	0	-
+Rule	Port	1943	only	-	Apr	17	22:00s	2:00	M
+Rule	Port	1943	1945	-	Aug	Sat>=25	22:00s	1:00	S
+Rule	Port	1944	1945	-	Apr	Sat>=21	22:00s	2:00	M
+Rule	Port	1946	only	-	Apr	Sat>=1	23:00s	1:00	S
+Rule	Port	1946	only	-	Oct	Sat>=1	23:00s	0	-
+Rule	Port	1947	1949	-	Apr	Sun>=1	 2:00s	1:00	S
+Rule	Port	1947	1949	-	Oct	Sun>=1	 2:00s	0	-
+# Shanks says DST was observed in 1950; go with Whitman.
+# Whitman gives Oct lastSun for 1952 on; go with Shanks.
+Rule	Port	1951	1965	-	Apr	Sun>=1	 2:00s	1:00	S
+Rule	Port	1951	1965	-	Oct	Sun>=1	 2:00s	0	-
+Rule	Port	1977	only	-	Mar	27	 0:00s	1:00	S
+Rule	Port	1977	only	-	Sep	25	 0:00s	0	-
+Rule	Port	1978	1979	-	Apr	Sun>=1	 0:00s	1:00	S
+Rule	Port	1978	only	-	Oct	 1	 0:00s	0	-
+Rule	Port	1979	1982	-	Sep	lastSun	 1:00s	0	-
+Rule	Port	1980	only	-	Mar	lastSun	 0:00s	1:00	S
+Rule	Port	1981	1982	-	Mar	lastSun	 1:00s	1:00	S
+Rule	Port	1983	only	-	Mar	lastSun	 2:00s	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+# Shanks says that the transition from LMT to WET occurred 1911-05-24;
+# Willett says 1912-01-01.  Go with Willett.
+Zone	Europe/Lisbon	-0:36:32 -	LMT	1884
+			-0:36:32 -	LMT	1912 Jan  1  # Lisbon Mean Time
+			 0:00	Port	WE%sT	1966 Apr  3 2:00
+			 1:00	-	CET	1976 Sep 26 1:00
+			 0:00	Port	WE%sT	1983 Sep 25 1:00s
+			 0:00	W-Eur	WE%sT	1992 Sep 27 1:00s
+			 1:00	EU	CE%sT	1996 Mar 31 1:00u
+			 0:00	EU	WE%sT
+Zone Atlantic/Azores	-1:42:40 -	LMT	1884		# Ponta Delgada
+			-1:54:32 -	HMT	1911 May 24  # Horta Mean Time
+			-2:00	Port	AZO%sT	1966 Apr  3 2:00 # Azores Time
+			-1:00	Port	AZO%sT	1983 Sep 25 1:00s
+			-1:00	W-Eur	AZO%sT	1992 Sep 27 1:00s
+			 0:00	EU	WE%sT	1993 Mar 28 1:00u
+			-1:00	EU	AZO%sT
+Zone Atlantic/Madeira	-1:07:36 -	LMT	1884		# Funchal
+			-1:07:36 -	FMT	1911 May 24  # Funchal Mean Time
+			-1:00	Port	MAD%sT	1966 Apr  3 2:00 # Madeira Time
+			 0:00	Port	WE%sT	1983 Sep 25 1:00s
+			 0:00	EU	WE%sT
+
+# Romania
+#
+# From Paul Eggert (1999-10-07):
+# <a href="http://www.nineoclock.ro/POL/1778pol.html">
+# Nine O'clock</a> (1998-10-23) reports that the switch occurred at
+# 04:00 local time in fall 1998.  For lack of better info,
+# assume that Romania and Moldova switched to EU rules in 1997,
+# the same year as Bulgaria.
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Romania	1932	only	-	May	21	 0:00s	1:00	S
+Rule	Romania	1932	1939	-	Oct	Sun>=1	 0:00s	0	-
+Rule	Romania	1933	1939	-	Apr	Sun>=2	 0:00s	1:00	S
+Rule	Romania	1979	only	-	May	27	 0:00	1:00	S
+Rule	Romania	1979	only	-	Sep	lastSun	 0:00	0	-
+Rule	Romania	1980	only	-	Apr	 5	23:00	1:00	S
+Rule	Romania	1980	only	-	Sep	lastSun	 1:00	0	-
+Rule	Romania	1991	1993	-	Mar	lastSun	 0:00s	1:00	S
+Rule	Romania	1991	1993	-	Sep	lastSun	 0:00s	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Europe/Bucharest	1:44:24 -	LMT	1891 Oct
+			1:44:24	-	BMT	1931 Jul 24	# Bucharest MT
+			2:00	Romania	EE%sT	1981 Mar 29 2:00s
+			2:00	C-Eur	EE%sT	1991
+			2:00	Romania	EE%sT	1994
+			2:00	E-Eur	EE%sT	1997
+			2:00	EU	EE%sT
+
+# Russia
+
+# From Paul Eggert (1999-11-12):
+# Except for Moscow after 1919-07-01, I invented the time zone abbreviations.
+# Moscow time zone abbreviations after 1919-07-01, and Moscow rules after 1991,
+# are from Andrey A. Chernov.  The rest is from Shanks, except we follow
+# Chernov's report that 1992 DST transitions were Sat 23:00, not Sun 02:00s.
+#
+# From Stanislaw A. Kuzikowski (1994-06-29):
+# But now it is some months since Novosibirsk is 3 hours ahead of Moscow!
+# I do not know why they have decided to make this change;
+# as far as I remember it was done exactly during winter->summer switching
+# so we (Novosibirsk) simply did not switch.
+#
+# From Andrey A. Chernov (1996-10-04):
+# `MSK' and `MSD' were born and used initially on Moscow computers with
+# UNIX-like OSes by several developer groups (e.g. Demos group, Kiae group)....
+# The next step was the UUCP network, the Relcom predecessor
+# (used mainly for mail), and MSK/MSD was actively used there.
+#
+# From Chris Carrier (1996-10-30):
+# According to a friend of mine who rode the Trans-Siberian Railroad from
+# Moscow to Irkutsk in 1995, public air and rail transport in Russia ...
+# still follows Moscow time, no matter where in Russia it is located.
+#
+# For Grozny, Chechnya, we have the following story from
+# John Daniszewski, "Scavengers in the Rubble", Los Angeles Times (2001-02-07):
+# News--often false--is spread by word of mouth.  A rumor that it was
+# time to move the clocks back put this whole city out of sync with
+# the rest of Russia for two weeks--even soldiers stationed here began
+# enforcing curfew at the wrong time.
+#
+# From Gwillim Law (2001-06-05):
+# There's considerable evidence that Sakhalin Island used to be in
+# UTC+11, and has changed to UTC+10, in this decade.  I start with the
+# SSIM, which listed Yuzhno-Sakhalinsk in zone RU10 along with Magadan
+# until February 1997, and then in RU9 with Khabarovsk and Vladivostok
+# since September 1997....  Although the Kuril Islands are
+# administratively part of Sakhalin oblast', they appear to have
+# remained on UTC+11 along with Magadan.
+#
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+#
+# Kaliningradskaya oblast'.
+Zone Europe/Kaliningrad	 1:22:00 -	LMT	1893 Apr
+			 1:00	C-Eur	CE%sT	1945
+			 2:00	Poland	CE%sT	1946
+			 3:00	Russia	MSK/MSD	1991 Mar 31 2:00s
+			 2:00	Russia	EE%sT
+#
+# From Oscar van Vlijmen (2001-08-25): [This region consists of]
+# Respublika Adygeya, Arkhangel'skaya oblast', Astrakhanskaya oblast',
+# Belgorodskaya oblast', Bryanskaya oblast', Vladimirskaya oblast',
+# Volgogradskaya oblast', Vologodskaya oblast', Voronezhskaya oblast',
+# Respublika Dagestan, Ivanovskaya oblast', Respublika Ingushetiya,
+# Kabarbino-Balkarskaya Respublika, Respublika Kalmykiya,
+# Kalyzhskaya oblast', Respublika Karachaevo-Cherkessiya,
+# Respublika Kareliya, Kirovskaya oblast', Respublika Komi,
+# Kostromskaya oblast', Krasnodarskij kraj, Kurskaya oblast',
+# Leningradskaya oblast', Lipetskaya oblast', Respublika Marij El,
+# Respublika Mordoviya, Moskva, Moskovskaya oblast',
+# Murmanskaya oblast', Nenetskij avtonomnyj okrug,
+# Nizhegorodskaya oblast', Novgorodskaya oblast', Orlovskaya oblast',
+# Penzenskaya oblast', Pskovskaya oblast', Rostovskaya oblast',
+# Ryazanskaya oblast', Sankt-Peterburg, Saratovskaya oblast',
+# Respublika Severnaya Osetiya, Smolenskaya oblast',
+# Stavropol'skij kraj, Tambovskaya oblast', Respublika Tatarstan,
+# Tverskaya oblast', Tyl'skaya oblast', Ul'yanovskaya oblast',
+# Chechenskaya Respublika, Chuvashskaya oblast',
+# Yaroslavskaya oblast'
+Zone Europe/Moscow	 2:30:20 -	LMT	1880
+			 2:30	-	MMT	1916 Jul  3 # Moscow Mean Time
+			 2:30:48 Russia	%s	1919 Jul  1 2:00
+			 3:00	Russia	MSK/MSD	1922 Oct
+			 2:00	-	EET	1930 Jun 21
+			 3:00	Russia	MSK/MSD	1991 Mar 31 2:00s
+			 2:00	Russia	EE%sT	1992 Jan 19 2:00s
+			 3:00	Russia	MSK/MSD
+#
+# From Oscar van Vlijmen (2001-08-25): [This region consists of]
+# Samarskaya oblast', Udmyrtskaya respublika
+Zone Europe/Samara	 3:20:36 -	LMT	1919 Jul  1 2:00
+			 3:00	-	KUYT	1930 Jun 21 # Kuybyshev
+			 4:00	Russia	KUY%sT	1989 Mar 26 2:00s
+			 3:00	Russia	KUY%sT	1991 Mar 31 2:00s
+			 2:00	Russia	KUY%sT	1991 Sep 29 2:00s
+			 3:00	-	KUYT	1991 Oct 20 3:00
+			 4:00	Russia	SAM%sT	# Samara Time
+#
+# From Oscar van Vlijmen (2001-08-25): [This region consists of]
+# Respublika Bashkortostan, Komi-Permyatskij avtonomnyj okrug,
+# Kurganskaya oblast', Orenburgskaya oblast', Permskaya oblast',
+# Sverdlovskaya oblast', Tyumenskaya oblast',
+# Khanty-Manskijskij avtonomnyj okrug, Chelyabinskaya oblast',
+# Yamalo-Nenetskij avtonomnyj okrug.
+Zone Asia/Yekaterinburg	 4:02:24 -	LMT	1919 Jul 15 4:00
+			 4:00	-	SVET	1930 Jun 21 # Sverdlovsk Time
+			 5:00	Russia	SVE%sT	1991 Mar 31 2:00s
+			 4:00	Russia	SVE%sT	1992 Jan 19 2:00s
+			 5:00	Russia	YEK%sT	# Yekaterinburg Time
+#
+# From Oscar van Vlijmen (2001-08-25): [This region consists of]
+# Respublika Altaj, Altajskij kraj, Omskaya oblast'.
+Zone Asia/Omsk		 4:53:36 -	LMT	1919 Nov 14
+			 5:00	-	OMST	1930 Jun 21 # Omsk TIme
+			 6:00	Russia	OMS%sT	1991 Mar 31 2:00s
+			 5:00	Russia	OMS%sT	1992 Jan 19 2:00s
+			 6:00	Russia	OMS%sT
+#
+# Novosibirskaya oblast'.
+Zone Asia/Novosibirsk	 5:31:40 -	LMT	1919 Dec 14 6:00
+			 6:00	-	NOVT	1930 Jun 21 # Novosibirsk Time
+			 7:00	Russia	NOV%sT	1991 Mar 31 2:00s
+			 6:00	Russia	NOV%sT	1992 Jan 19 2:00s
+			 7:00	Russia	NOV%sT	1993 May 23 # says Shanks
+			 6:00	Russia	NOV%sT
+#
+# From Oscar van Vlijmen (2001-08-25): [This region consists of]
+# Kemerovskaya oblast', Krasnoyarskij kraj,
+# Tajmyrskij (Dolgano-Nenetskij) avtonomnyj okrug, Tomskaya oblast',
+# Respublika Tuva, Respublika Khakasiya, Evenkijskij avtonomnyj okrug.
+Zone Asia/Krasnoyarsk	 6:11:20 -	LMT	1920 Jan  6
+			 6:00	-	KRAT	1930 Jun 21 # Krasnoyarsk Time
+			 7:00	Russia	KRA%sT	1991 Mar 31 2:00s
+			 6:00	Russia	KRA%sT	1992 Jan 19 2:00s
+			 7:00	Russia	KRA%sT
+#
+# From Oscar van Vlijmen (2001-08-25): [This region consists of]
+# Respublika Buryatiya, Irkutskaya oblast',
+# Ust'-Ordynskij Buryatskij avtonomnyj okrug.
+Zone Asia/Irkutsk	 6:57:20 -	LMT	1880
+			 6:57:20 -	IMT	1920 Jan 25 # Irkutsk Mean Time
+			 7:00	-	IRKT	1930 Jun 21 # Irkutsk Time
+			 8:00	Russia	IRK%sT	1991 Mar 31 2:00s
+			 7:00	Russia	IRK%sT	1992 Jan 19 2:00s
+			 8:00	Russia	IRK%sT
+#
+# From Oscar van Vlijmen (2003-10-18): [This region consists of]
+# Aginskij Buryatskij avtonomnyj okrug, Amurskaya oblast',
+# [parts of] Respublika Sakha (Yakutiya), Chitinskaya oblast'.
+# The Sakha districts are: Aldanskij, Amginskij, Anabarskij,
+# Bulunskij, Verkhnekolymskij, Verkhnevilyujskij, Vilyujskij, Gornyj,
+# Zhiganskij, Kobyajskij, Lenskij, Megino-Kangalasskij, Mirninskij,
+# Namskij, Nyurbinskij, Olenekskij, Olekminskij, Srednekolymskij,
+# Suntarskij, Tattinskij, Ust'-Aldanskij, Khangalasskij,
+# Churapchinskij, Eveno-Bytantajskij.
+Zone Asia/Yakutsk	 8:38:40 -	LMT	1919 Dec 15
+			 8:00	-	YAKT	1930 Jun 21 # Yakutsk Time
+			 9:00	Russia	YAK%sT	1991 Mar 31 2:00s
+			 8:00	Russia	YAK%sT	1992 Jan 19 2:00s
+			 9:00	Russia	YAK%sT
+#
+# From Oscar van Vlijmen (2003-10-18): [This region consists of]
+# Evrejskaya avtonomnaya oblast', Khabarovskij kraj, Primorskij kraj,
+# [parts of] Respublika Sakha (Yakutiya).
+# The Sakha districts are: Verkhoyanskij, Tomponskij, Ust'-Majskij,
+# Ust'-Yanskij.
+Zone Asia/Vladivostok	 8:47:44 -	LMT	1922 Nov 15
+			 9:00	-	VLAT	1930 Jun 21 # Vladivostok Time
+			10:00	Russia	VLA%sT	1991 Mar 31 2:00s
+			 9:00	Russia	VLA%sST	1992 Jan 19 2:00s
+			10:00	Russia	VLA%sT
+#
+# Sakhalinskaya oblast'.
+# The Zone name should be Yuzhno-Sakhalinsk, but that's too long.
+Zone Asia/Sakhalin	 9:30:48 -	LMT	1905 Aug 23
+			 9:00	-	CJT	1938
+			 9:00	-	JST	1945 Aug 25
+			11:00	Russia	SAK%sT	1991 Mar 31 2:00s # Sakhalin T.
+			10:00	Russia	SAK%sT	1992 Jan 19 2:00s
+			11:00	Russia	SAK%sT	1997 Mar lastSun 2:00s
+			10:00	Russia	SAK%sT
+#
+# From Oscar van Vlijmen (2003-10-18): [This region consists of]
+# Magadanskaya oblast', Respublika Sakha (Yakutiya).
+# Probably also: Kuril Islands.
+# The Sakha districts are: Abyjskij, Allaikhovskij, Momskij,
+# Nizhnekolymskij, Ojmyakonskij.
+Zone Asia/Magadan	10:03:12 -	LMT	1924 May  2
+			10:00	-	MAGT	1930 Jun 21 # Magadan Time
+			11:00	Russia	MAG%sT	1991 Mar 31 2:00s
+			10:00	Russia	MAG%sT	1992 Jan 19 2:00s
+			11:00	Russia	MAG%sT
+#
+# From Oscar van Vlijmen (2001-08-25): [This region consists of]
+# Kamchatskaya oblast', Koryakskij avtonomnyj okrug.
+#
+# The Zone name should be Asia/Petropavlovsk-Kamchatski, but that's too long.
+Zone Asia/Kamchatka	10:34:36 -	LMT	1922 Nov 10
+			11:00	-	PETT	1930 Jun 21 # P-K Time
+			12:00	Russia	PET%sT	1991 Mar 31 2:00s
+			11:00	Russia	PET%sT	1992 Jan 19 2:00s
+			12:00	Russia	PET%sT
+#
+# Chukotskij avtonomnyj okrug
+Zone Asia/Anadyr	11:49:56 -	LMT	1924 May  2
+			12:00	-	ANAT	1930 Jun 21 # Anadyr Time
+			13:00	Russia	ANA%sT	1982 Apr  1 0:00s
+			12:00	Russia	ANA%sT	1991 Mar 31 2:00s
+			11:00	Russia	ANA%sT	1992 Jan 19 2:00s
+			12:00	Russia	ANA%sT
+
+# Serbia and Montenegro
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Belgrade	1:22:00	-	LMT	1884
+			1:00	-	CET	1941 Apr 18 23:00
+			1:00	C-Eur	CE%sT	1945 May  8  2:00s
+			1:00	1:00	CEST	1945 Sep 16  2:00s
+# Metod Kozelj reports that the legal date of
+# transition to EU rules was 1982-11-27, for all of Yugoslavia at the time.
+# Shanks doesn't give as much detail, so go with Kozelj.
+			1:00	-	CET	1982 Nov 27
+			1:00	EU	CE%sT
+Link Europe/Belgrade Europe/Ljubljana	# Slovenia
+Link Europe/Belgrade Europe/Sarajevo	# Bosnia and Herzegovina
+Link Europe/Belgrade Europe/Skopje	# Macedonia
+Link Europe/Belgrade Europe/Zagreb	# Croatia
+
+# Slovakia
+Link Europe/Prague Europe/Bratislava
+
+# Slovenia
+# see Serbia and Montenegro
+
+# Spain
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+# For 1917-1919 Whitman gives Apr Sat>=1 - Oct Sat>=1; go with Shanks.
+Rule	Spain	1917	only	-	May	 5	23:00s	1:00	S
+Rule	Spain	1917	1919	-	Oct	 6	23:00s	0	-
+Rule	Spain	1918	only	-	Apr	15	23:00s	1:00	S
+Rule	Spain	1919	only	-	Apr	 5	23:00s	1:00	S
+# Whitman gives 1921 Feb 28 - Oct 14; go with Shanks.
+Rule	Spain	1924	only	-	Apr	16	23:00s	1:00	S
+# Whitman gives 1924 Oct 14; go with Shanks.
+Rule	Spain	1924	only	-	Oct	 4	23:00s	0	-
+Rule	Spain	1926	only	-	Apr	17	23:00s	1:00	S
+# Whitman says no DST in 1929; go with Shanks.
+Rule	Spain	1926	1929	-	Oct	Sat>=1	23:00s	0	-
+Rule	Spain	1927	only	-	Apr	 9	23:00s	1:00	S
+Rule	Spain	1928	only	-	Apr	14	23:00s	1:00	S
+Rule	Spain	1929	only	-	Apr	20	23:00s	1:00	S
+# Whitman gives 1937 Jun 16, 1938 Apr 16, 1940 Apr 13; go with Shanks.
+Rule	Spain	1937	only	-	May	22	23:00s	1:00	S
+Rule	Spain	1937	1939	-	Oct	Sat>=1	23:00s	0	-
+Rule	Spain	1938	only	-	Mar	22	23:00s	1:00	S
+Rule	Spain	1939	only	-	Apr	15	23:00s	1:00	S
+Rule	Spain	1940	only	-	Mar	16	23:00s	1:00	S
+# Whitman says no DST 1942-1945; go with Shanks.
+Rule	Spain	1942	only	-	May	 2	22:00s	2:00	M # Midsummer
+Rule	Spain	1942	only	-	Sep	 1	22:00s	1:00	S
+Rule	Spain	1943	1946	-	Apr	Sat>=13	22:00s	2:00	M
+Rule	Spain	1943	only	-	Oct	 3	22:00s	1:00	S
+Rule	Spain	1944	only	-	Oct	10	22:00s	1:00	S
+Rule	Spain	1945	only	-	Sep	30	 1:00	1:00	S
+Rule	Spain	1946	only	-	Sep	30	 0:00	0	-
+Rule	Spain	1949	only	-	Apr	30	23:00	1:00	S
+Rule	Spain	1949	only	-	Sep	30	 1:00	0	-
+Rule	Spain	1974	1975	-	Apr	Sat>=13	23:00	1:00	S
+Rule	Spain	1974	1975	-	Oct	Sun>=1	 1:00	0	-
+Rule	Spain	1976	only	-	Mar	27	23:00	1:00	S
+Rule	Spain	1976	1977	-	Sep	lastSun	 1:00	0	-
+Rule	Spain	1977	1978	-	Apr	 2	23:00	1:00	S
+Rule	Spain	1978	only	-	Oct	 1	 1:00	0	-
+# The following rules are copied from Morocco from 1967 through 1978.
+Rule SpainAfrica 1967	only	-	Jun	 3	12:00	1:00	S
+Rule SpainAfrica 1967	only	-	Oct	 1	 0:00	0	-
+Rule SpainAfrica 1974	only	-	Jun	24	 0:00	1:00	S
+Rule SpainAfrica 1974	only	-	Sep	 1	 0:00	0	-
+Rule SpainAfrica 1976	1977	-	May	 1	 0:00	1:00	S
+Rule SpainAfrica 1976	only	-	Aug	 1	 0:00	0	-
+Rule SpainAfrica 1977	only	-	Sep	28	 0:00	0	-
+Rule SpainAfrica 1978	only	-	Jun	 1	 0:00	1:00	S
+Rule SpainAfrica 1978	only	-	Aug	 4	 0:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Madrid	-0:14:44 -	LMT	1901
+			 0:00	Spain	WE%sT	1946 Sep 30
+			 1:00	Spain	CE%sT	1979
+			 1:00	EU	CE%sT
+Zone	Africa/Ceuta	-0:21:16 -	LMT	1901
+			 0:00	-	WET	1918 May  6 23:00
+			 0:00	1:00	WEST	1918 Oct  7 23:00
+			 0:00	-	WET	1924
+			 0:00	Spain	WE%sT	1929
+			 0:00 SpainAfrica WE%sT 1984 Mar 16
+			 1:00	-	CET	1986
+			 1:00	EU	CE%sT
+Zone	Atlantic/Canary	-1:01:36 -	LMT	1922 Mar # Las Palmas de Gran C.
+			-1:00	-	CANT	1946 Sep 30 1:00 # Canaries Time
+			 0:00	-	WET	1980 Apr  6 0:00s
+			 0:00	1:00	WEST	1980 Sep 28 0:00s
+			 0:00	EU	WE%sT
+# IATA SSIM (1996-09) says the Canaries switch at 2:00u, not 1:00u.
+# Ignore this for now, as the Canaries are part of the EU.
+
+# Sweden
+
+# From Ivan Nilsson (2001-04-13), superseding Shanks:
+#
+# The law "Svensk forfattningssamling 1878, no 14" about standard time in 1879:
+# From the beginning of 1879 (that is 01-01 00:00) the time for all
+# places in the country is "the mean solar time for the meridian at
+# three degrees, or twelve minutes of time, to the west of the
+# meridian of the Observatory of Stockholm".  The law is dated 1878-05-31.
+#
+# The observatory at that time had the meridian 18 degrees 03' 30"
+# eastern longitude = 01:12:14 in time.  Less 12 minutes gives the
+# national standard time as 01:00:14 ahead of GMT....
+#
+# About the beginning of CET in Sweden. The lawtext ("Svensk
+# forfattningssamling 1899, no 44") states, that "from the beginning
+# of 1900... ... the same as the mean solar time for the meridian at
+# the distance of one hour of time from the meridian of the English
+# observatory at Greenwich, or at 12 minutes 14 seconds to the west
+# from the meridian of the Observatory of Stockholm". The law is dated
+# 1899-06-16.  In short: At 1900-01-01 00:00:00 the new standard time
+# in Sweden is 01:00:00 ahead of GMT.
+#
+# 1916: The lawtext ("Svensk forfattningssamling 1916, no 124") states
+# that "1916-05-15 is considered to begin one hour earlier". It is
+# pretty obvious that at 05-14 23:00 the clocks are set to 05-15 00:00....
+# Further the law says, that "1916-09-30 is considered to end one hour later".
+#
+# The laws regulating [DST] are available on the site of the Swedish
+# Parliament beginning with 1985 - the laws regulating 1980/1984 are
+# not available on the site (to my knowledge they are only available
+# in Swedish): <http://www.riksdagen.se/english/work/sfst.asp> (type
+# "sommartid" without the quotes in the field "Fritext" and then click
+# the Sok-button).
+#
+# (2001-05-13):
+#
+# I have now found a newspaper stating that at 1916-10-01 01:00
+# summertime the church-clocks etc were set back one hour to show
+# 1916-10-01 00:00 standard time.  The article also reports that some
+# people thought the switch to standard time would take place already
+# at 1916-10-01 00:00 summer time, but they had to wait for another
+# hour before the event took place.
+#
+# Source: The newspaper "Dagens Nyheter", 1916-10-01, page 7 upper left.
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Europe/Stockholm	1:12:12 -	LMT	1879 Jan  1
+			1:00:14	-	SET	1900 Jan  1	# Swedish Time
+			1:00	-	CET	1916 May 14 23:00
+			1:00	1:00	CEST	1916 Oct  1 01:00
+			1:00	-	CET	1980
+			1:00	EU	CE%sT
+
+# Switzerland
+# From Howse:
+# By the end of the 18th century clocks and watches became commonplace
+# and their performance improved enormously.  Communities began to keep
+# mean time in preference to apparent time -- Geneva from 1780 ....
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+# From Whitman (who writes ``Midnight?''):
+Rule	Swiss	1940	only	-	Nov	 2	0:00	1:00	S
+Rule	Swiss	1940	only	-	Dec	31	0:00	0	-
+# From Shanks:
+Rule	Swiss	1941	1942	-	May	Sun>=1	2:00	1:00	S
+Rule	Swiss	1941	1942	-	Oct	Sun>=1	0:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Zurich	0:34:08 -	LMT	1848 Sep 12
+			0:29:44	-	BMT	1894 Jun # Bern Mean Time
+			1:00	Swiss	CE%sT	1981
+			1:00	EU	CE%sT
+
+# Turkey
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Turkey	1916	only	-	May	 1	0:00	1:00	S
+Rule	Turkey	1916	only	-	Oct	 1	0:00	0	-
+Rule	Turkey	1920	only	-	Mar	28	0:00	1:00	S
+Rule	Turkey	1920	only	-	Oct	25	0:00	0	-
+Rule	Turkey	1921	only	-	Apr	 3	0:00	1:00	S
+Rule	Turkey	1921	only	-	Oct	 3	0:00	0	-
+Rule	Turkey	1922	only	-	Mar	26	0:00	1:00	S
+Rule	Turkey	1922	only	-	Oct	 8	0:00	0	-
+# Whitman gives 1923 Apr 28 - Sep 16 and no DST in 1924-1925; go with Shanks.
+Rule	Turkey	1924	only	-	May	13	0:00	1:00	S
+Rule	Turkey	1924	1925	-	Oct	 1	0:00	0	-
+Rule	Turkey	1925	only	-	May	 1	0:00	1:00	S
+Rule	Turkey	1940	only	-	Jun	30	0:00	1:00	S
+Rule	Turkey	1940	only	-	Oct	 5	0:00	0	-
+Rule	Turkey	1940	only	-	Dec	 1	0:00	1:00	S
+Rule	Turkey	1941	only	-	Sep	21	0:00	0	-
+Rule	Turkey	1942	only	-	Apr	 1	0:00	1:00	S
+# Whitman omits the next two transition and gives 1945 Oct 1; go with Shanks.
+Rule	Turkey	1942	only	-	Nov	 1	0:00	0	-
+Rule	Turkey	1945	only	-	Apr	 2	0:00	1:00	S
+Rule	Turkey	1945	only	-	Oct	 8	0:00	0	-
+Rule	Turkey	1946	only	-	Jun	 1	0:00	1:00	S
+Rule	Turkey	1946	only	-	Oct	 1	0:00	0	-
+Rule	Turkey	1947	1948	-	Apr	Sun>=16	0:00	1:00	S
+Rule	Turkey	1947	1950	-	Oct	Sun>=2	0:00	0	-
+Rule	Turkey	1949	only	-	Apr	10	0:00	1:00	S
+Rule	Turkey	1950	only	-	Apr	19	0:00	1:00	S
+Rule	Turkey	1951	only	-	Apr	22	0:00	1:00	S
+Rule	Turkey	1951	only	-	Oct	 8	0:00	0	-
+Rule	Turkey	1962	only	-	Jul	15	0:00	1:00	S
+Rule	Turkey	1962	only	-	Oct	 8	0:00	0	-
+Rule	Turkey	1964	only	-	May	15	0:00	1:00	S
+Rule	Turkey	1964	only	-	Oct	 1	0:00	0	-
+Rule	Turkey	1970	1972	-	May	Sun>=2	0:00	1:00	S
+Rule	Turkey	1970	1972	-	Oct	Sun>=2	0:00	0	-
+Rule	Turkey	1973	only	-	Jun	 3	1:00	1:00	S
+Rule	Turkey	1973	only	-	Nov	 4	3:00	0	-
+Rule	Turkey	1974	only	-	Mar	31	2:00	1:00	S
+Rule	Turkey	1974	only	-	Nov	 3	5:00	0	-
+Rule	Turkey	1975	only	-	Mar	30	0:00	1:00	S
+Rule	Turkey	1975	1976	-	Oct	lastSun	0:00	0	-
+Rule	Turkey	1976	only	-	Jun	 1	0:00	1:00	S
+Rule	Turkey	1977	1978	-	Apr	Sun>=1	0:00	1:00	S
+Rule	Turkey	1977	only	-	Oct	16	0:00	0	-
+Rule	Turkey	1979	1980	-	Apr	Sun>=1	3:00	1:00	S
+Rule	Turkey	1979	1982	-	Oct	Mon>=11	0:00	0	-
+Rule	Turkey	1981	1982	-	Mar	lastSun	3:00	1:00	S
+Rule	Turkey	1983	only	-	Jul	31	0:00	1:00	S
+Rule	Turkey	1983	only	-	Oct	 2	0:00	0	-
+Rule	Turkey	1985	only	-	Apr	20	0:00	1:00	S
+Rule	Turkey	1985	only	-	Sep	28	0:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Istanbul	1:55:52 -	LMT	1880
+			1:56:56	-	IMT	1910 Oct # Istanbul Mean Time?
+			2:00	Turkey	EE%sT	1978 Oct 15
+			3:00	Turkey	TR%sT	1985 Apr 20 # Turkey Time
+			2:00	Turkey	EE%sT	1986
+			2:00	C-Eur	EE%sT	1991
+			2:00	EU	EE%sT
+Link	Europe/Istanbul	Asia/Istanbul	# Istanbul is in both continents.
+
+# Ukraine
+#
+# From Igor Karpov, who works for the Ukranian Ministry of Justice,
+# via Garrett Wollman (2003-01-27):
+# BTW, I've found the official document on this matter. It's goverment
+# regulations number 509, May 13, 1996. In my poor translation it says:
+# "Time in Ukraine is set to second timezone (Kiev time). Each last Sunday
+# of March at 3am the time is changing to 4am and each last Sunday of
+# October the time at 4am is changing to 3am"
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+# Most of Ukraine since 1970 has been like Kiev.
+Zone Europe/Kiev	2:02:04 -	LMT	1880
+			2:02:04	-	KMT	1924 May  2 # Kiev Mean Time
+			2:00	-	EET	1930 Jun 21
+			3:00	-	MSK	1941 Sep 20
+			1:00	C-Eur	CE%sT	1943 Nov  6
+			3:00	Russia	MSK/MSD	1990
+			3:00	-	MSK	1990 Jul  1 2:00
+			2:00	-	EET	1992
+			2:00	E-Eur	EE%sT	1995
+			2:00	EU	EE%sT
+# Ruthenia used CET 1990/1991.
+Zone Europe/Uzhgorod	1:29:12 -	LMT	1890 Oct
+			1:00	-	CET	1940
+			1:00	C-Eur	CE%sT	1944 Oct
+			1:00	1:00	CEST	1944 Oct 26
+			1:00	-	CET	1945 Jun 29
+			3:00	Russia	MSK/MSD	1990
+			3:00	-	MSK	1990 Jul  1 2:00
+			1:00	-	CET	1991 Mar 31 3:00
+			2:00	-	EET	1992
+			2:00	E-Eur	EE%sT	1995
+			2:00	EU	EE%sT
+# Zaporozh'ye and eastern Lugansk oblasts observed DST 1990/1991.
+# Zaporozh'ye has an apostrophe, but Posix file names can't have apostrophes.
+Zone Europe/Zaporozhye	2:20:40 -	LMT	1880
+			2:20	-	CUT	1924 May  2 # Central Ukraine T
+			2:00	-	EET	1930 Jun 21
+			3:00	-	MSK	1941 Aug 25
+			1:00	C-Eur	CE%sT	1943 Oct 25
+			3:00	Russia	MSK/MSD	1991 Mar 31 2:00
+			2:00	E-Eur	EE%sT	1995
+			2:00	EU	EE%sT
+# Central Crimea used Moscow time 1994/1997.
+Zone Europe/Simferopol	2:16:24 -	LMT	1880
+			2:16	-	SMT	1924 May  2 # Simferopol Mean T
+			2:00	-	EET	1930 Jun 21
+			3:00	-	MSK	1941 Nov
+			1:00	C-Eur	CE%sT	1944 Apr 13
+			3:00	Russia	MSK/MSD	1990
+			3:00	-	MSK	1990 Jul  1 2:00
+			2:00	-	EET	1992
+# From Paul Eggert (1999-11-12):
+# The _Economist_ (1994-05-28, p 45) reports that central Crimea switched
+# from Kiev to Moscow time sometime after the January 1994 elections.
+# Shanks says ``date of change uncertain'', but implies that it happened
+# sometime between the 1994 DST switches.  For now, guess it changed in May.
+			2:00	E-Eur	EE%sT	1994 May
+# From IATA SSIM (1994/1997), which also says that Kerch is still like Kiev.
+			3:00	E-Eur	MSK/MSD	1996 Mar 31 3:00s
+			3:00	1:00	MSD	1996 Oct 27 3:00s
+# IATA SSIM (1997-09) says Crimea switched to EET/EEST.
+# Assume it happened in March by not changing the clocks.
+			3:00	Russia	MSK/MSD	1997
+			3:00	-	MSK	1997 Mar lastSun 1:00u
+			2:00	EU	EE%sT
+
+###############################################################################
+
+# One source shows that Bulgaria, Cyprus, Finland, and Greece observe DST from
+# the last Sunday in March to the last Sunday in September in 1986.
+# The source shows Romania changing a day later than everybody else.
+#
+# According to Bernard Sieloff's source, Poland is in the MET time zone but
+# uses the WE DST rules.  The Western USSR uses EET+1 and ME DST rules.
+# Bernard Sieloff's source claims Romania switches on the same day, but at
+# 00:00 standard time (i.e., 01:00 DST).  It also claims that Turkey
+# switches on the same day, but switches on at 01:00 standard time
+# and off at 00:00 standard time (i.e., 01:00 DST)
+
+# ...
+# Date: Wed, 28 Jan 87 16:56:27 -0100
+# From: Tom Hofmann
+# ...
+#
+# ...the European time rules are...standardized since 1981, when
+# most European coun[tr]ies started DST.  Before that year, only
+# a few countries (UK, France, Italy) had DST, each according
+# to own national rules.  In 1981, however, DST started on
+# 'Apr firstSun', and not on 'Mar lastSun' as in the following
+# years...
+# But also since 1981 there are some more national exceptions
+# than listed in 'europe': Switzerland, for example, joined DST
+# one year later, Denmark ended DST on 'Oct 1' instead of 'Sep
+# lastSun' in 1981---I don't know how they handle now.
+#
+# Finally, DST ist always from 'Apr 1' to 'Oct 1' in the
+# Soviet Union (as far as I know).
+#
+# Tom Hofmann, Scientific Computer Center, CIBA-GEIGY AG,
+# 4002 Basle, Switzerland
+# ...
+
+# ...
+# Date: Wed, 4 Feb 87 22:35:22 +0100
+# From: Dik T. Winter
+# ...
+#
+# The information from Tom Hofmann is (as far as I know) not entirely correct.
+# After a request from chongo at amdahl I tried to retrieve all information
+# about DST in Europe.  I was able to find all from about 1969.
+#
+# ...standardization on DST in Europe started in about 1977 with switches on
+# first Sunday in April and last Sunday in September...
+# In 1981 UK joined Europe insofar that
+# the starting day for both shifted to last Sunday in March.  And from 1982
+# the whole of Europe used DST, with switch dates April 1 and October 1 in
+# the Sov[i]et Union.  In 1985 the SU reverted to standard Europe[a]n switch
+# dates...
+#
+# It should also be remembered that time-zones are not constants; e.g.
+# Portugal switched in 1976 from MET (or CET) to WET with DST...
+# Note also that though there were rules for switch dates not
+# all countries abided to these dates, and many individual deviations
+# occurred, though not since 1982 I believe.  Another note: it is always
+# assumed that DST is 1 hour ahead of normal time, this need not be the
+# case; at least in the Netherlands there have been times when DST was 2 hours
+# in advance of normal time.
+#
+# ...
+# dik t. winter, cwi, amsterdam, nederland
+# ...
+
+# From Bob Devine (1988-01-28):
+# ...
+# Greece: Last Sunday in April to last Sunday in September (iffy on dates).
+# Since 1978.  Change at midnight.
+# ...
+# Monaco: has same DST as France.
+# ...
diff --git a/JodaTime/src/java/org/joda/time/tz/src/northamerica b/JodaTime/src/java/org/joda/time/tz/src/northamerica
index 40a2ce269..52f64826f 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/northamerica
+++ b/JodaTime/src/java/org/joda/time/tz/src/northamerica
@@ -1,2100 +1,2110 @@
-# @(#)northamerica	7.79
-# also includes Central America and the Caribbean
-
-# This data is by no means authoritative; if you think you know better,
-# go ahead and edit the file (and please send any changes to
-# tz@elsie.nci.nih.gov for general use in the future).
-
-# From Paul Eggert (1999-03-22):
-# A reliable and entertaining source about time zones is
-# Derek Howse, Greenwich time and longitude, Philip Wilson Publishers (1997).
-
-###############################################################################
-
-# United States
-
-# From Paul Eggert (1999-03-31):
-# Howse writes (pp 121-125) that time zones were invented by
-# Professor Charles Ferdinand Dowd (1825-1904),
-# Principal of Temple Grove Ladies' Seminary (Saratoga Springs, NY).
-# His pamphlet ``A System of National Time for Railroads'' (1870)
-# was the result of his proposals at the Convention of Railroad Trunk Lines
-# in New York City (1869-10).  His 1870 proposal was based on Washington, DC,
-# but in 1872-05 he moved the proposed origin to Greenwich.
-# His proposal was adopted by the railroads on 1883-11-18 at 12:00,
-# and the most of the country soon followed suit.
-
-# From Paul Eggert (2005-04-16):
-# That 1883 transition occurred at 12:00 new time, not at 12:00 old time.
-# See p 46 of David Prerau, Seize the daylight, Thunder's Mouth Press (2005).
-
-# From Paul Eggert (1995-12-19):
-# A good source for time zone historical data in the US is
-# Thomas G. Shanks, The American Atlas (5th edition),
-# San Diego: ACS Publications, Inc. (1991).
-# Make sure you have the errata sheet; the book is somewhat useless without it.
-# It is the source for most of the pre-1991 US and Puerto Rico entries below.
-
-# From Paul Eggert (2001-03-06):
-# Daylight Saving Time was first suggested as a joke by Benjamin Franklin
-# in his whimsical essay ``An Economical Project for Diminishing the Cost
-# of Light'' published in the Journal de Paris (1784-04-26).
-# Not everyone is happy with the results:
-#
-#	I don't really care how time is reckoned so long as there is some
-#	agreement about it, but I object to being told that I am saving
-#	daylight when my reason tells me that I am doing nothing of the kind.
-#	I even object to the implication that I am wasting something
-#	valuable if I stay in bed after the sun has risen.  As an admirer
-#	of moonlight I resent the bossy insistence of those who want to
-#	reduce my time for enjoying it.  At the back of the Daylight Saving
-#	scheme I detect the bony, blue-fingered hand of Puritanism, eager
-#	to push people into bed earlier, and get them up earlier, to make
-#	them healthy, wealthy and wise in spite of themselves.
-#
-#	-- Robertson Davies, The diary of Samuel Marchbanks,
-#	   Clarke, Irwin (1947), XIX, Sunday
-#
-# For more about the first ten years of DST in the United States, see
-# Robert Garland's <a href="http://www.clpgh.org/exhibit/dst.html">
-# Ten years of daylight saving from the Pittsburgh standpoint
-# (Carnegie Library of Pittsburgh, 1927)</a>.
-#
-# Shanks says that DST was called "War Time" in the US in 1918 and 1919.
-# However, DST was imposed by the Standard Time Act of 1918, which
-# was the first nationwide legal time standard, and apparently
-# time was just called "Standard Time" or "Daylight Saving Time".
-
-# From Arthur David Olson:
-# US Daylight Saving Time ended on the last Sunday of *October* in 1974.
-# See, for example, the front page of the Saturday, 1974-10-26
-# and Sunday, 1974-10-27 editions of the Washington Post.
-
-# From Arthur David Olson:
-# Before the Uniform Time Act of 1966 took effect in 1967, observance of
-# Daylight Saving Time in the US was by local option, except during wartime.
-
-# From Arthur David Olson (2000-09-25):
-# Last night I heard part of a rebroadcast of a 1945 Arch Oboler radio drama.
-# In the introduction, Oboler spoke of "Eastern Peace Time."
-# An AltaVista search turned up
-# <a href="http://rowayton.org/rhs/hstaug45.html">:
-# "When the time is announced over the radio now, it is 'Eastern Peace
-# Time' instead of the old familiar 'Eastern War Time.'  Peace is wonderful."
-# </a> (August 1945) by way of confirmation.
-
-# From Joseph Gallant citing
-# George H. Douglas, _The Early Days of Radio Broadcasting_ (1987):
-# At 7 P.M. (Eastern War Time) [on 1945-08-14], the networks were set
-# to switch to London for Attlee's address, but the American people
-# never got to hear his speech live. According to one press account,
-# CBS' Bob Trout was first to announce the word of Japan's surrender,
-# but a few seconds later, NBC, ABC and Mutual also flashed the word
-# of surrender, all of whom interrupting the bells of Big Ben in
-# London which were to precede Mr. Attlee's speech.
-
-# From Paul Eggert (2003-02-09): It was Robert St John, not Bob Trout.  From
-# Myrna Oliver's obituary of St John on page B16 of today's Los Angeles Times:
-#
-# ... a war-weary U.S. clung to radios, awaiting word of Japan's surrender.
-# Any announcement from Asia would reach St. John's New York newsroom on a
-# wire service teletype machine, which had prescribed signals for major news.
-# Associated Press, for example, would ring five bells before spewing out
-# typed copy of an important story, and 10 bells for news "of transcendental
-# importance."
-#
-# On Aug. 14, stalling while talking steadily into the NBC networks' open
-# microphone, St. John heard five bells and waited only to hear a sixth bell,
-# before announcing confidently: "Ladies and gentlemen, World War II is over.
-# The Japanese have agreed to our surrender terms."
-#
-# He had scored a 20-second scoop on other broadcasters.
-
-# From Arthur David Olson (2005-08-22):
-# Paul has been careful to use the "US" rules only in those locations
-# that are part of the United States; this reflects the real scope of
-# U.S. government action.  So even though the "US" rules have changed
-# in the latest release, other countries won't be affected.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	US	1918	1919	-	Mar	lastSun	2:00	1:00	D
-Rule	US	1918	1919	-	Oct	lastSun	2:00	0	S
-Rule	US	1942	only	-	Feb	9	2:00	1:00	W # War
-Rule	US	1945	only	-	Aug	14	23:00u	1:00	P # Peace
-Rule	US	1945	only	-	Sep	30	2:00	0	S
-Rule	US	1967	2006	-	Oct	lastSun	2:00	0	S
-Rule	US	1967	1973	-	Apr	lastSun	2:00	1:00	D
-Rule	US	1974	only	-	Jan	6	2:00	1:00	D
-Rule	US	1975	only	-	Feb	23	2:00	1:00	D
-Rule	US	1976	1986	-	Apr	lastSun	2:00	1:00	D
-Rule	US	1987	2006	-	Apr	Sun>=1	2:00	1:00	D
-Rule	US	2007	max	-	Mar	Sun>=8	2:00	1:00	D
-Rule	US	2007	max	-	Nov	Sun>=1	2:00	0	S
-
-# From Bob Devine (1988-01-28):
-# ...Alaska (and Hawaii) had the timezone names changed in 1967.
-#    old			 new
-#    Pacific Standard Time(PST)  -same-
-#    Yukon Standard Time(YST)    -same-
-#    Central Alaska S.T. (CAT)   Alaska-Hawaii St[an]dard Time (AHST)
-#    Nome Standard Time (NT)     Bering Standard Time (BST)
-#
-# ...Alaska's timezone lines were redrawn in 1983 to give only 2 tz.
-#    The YST zone now covers nearly all of the state, AHST just part
-#    of the Aleutian islands.   No DST.
-
-# From Paul Eggert (1995-12-19):
-# The tables below use `NST', not `NT', for Nome Standard Time.
-# I invented `CAWT' for Central Alaska War Time.
-
-# From U. S. Naval Observatory (1989-01-19):
-# USA  EASTERN       5 H  BEHIND UTC    NEW YORK, WASHINGTON
-# USA  EASTERN       4 H  BEHIND UTC    APR 3 - OCT 30
-# USA  CENTRAL       6 H  BEHIND UTC    CHICAGO, HOUSTON
-# USA  CENTRAL       5 H  BEHIND UTC    APR 3 - OCT 30
-# USA  MOUNTAIN      7 H  BEHIND UTC    DENVER
-# USA  MOUNTAIN      6 H  BEHIND UTC    APR 3 - OCT 30
-# USA  PACIFIC       8 H  BEHIND UTC    L.A., SAN FRANCISCO
-# USA  PACIFIC       7 H  BEHIND UTC    APR 3 - OCT 30
-# USA  ALASKA STD    9 H  BEHIND UTC    MOST OF ALASKA     (AKST)
-# USA  ALASKA STD    8 H  BEHIND UTC    APR 3 - OCT 30 (AKDT)
-# USA  ALEUTIAN     10 H  BEHIND UTC    ISLANDS WEST OF 170W
-# USA  - " -         9 H  BEHIND UTC    APR 3 - OCT 30
-# USA  HAWAII       10 H  BEHIND UTC
-# USA  BERING       11 H  BEHIND UTC    SAMOA, MIDWAY
-
-# From Arthur David Olson (1989-01-21):
-# The above dates are for 1988.
-# Note the "AKST" and "AKDT" abbreviations, the claim that there's
-# no DST in Samoa, and the claim that there is DST in Alaska and the
-# Aleutians.
-
-# From Arthur David Olson (1988-02-13):
-# Legal standard time zone names, from United States Code (1982 Edition and
-# Supplement III), Title 15, Chapter 6, Section 260 and forward.  First, names
-# up to 1967-04-01 (when most provisions of the Uniform Time Act of 1966
-# took effect), as explained in sections 263 and 261:
-#	(none)
-#	United States standard eastern time
-#	United States standard mountain time
-#	United States standard central time
-#	United States standard Pacific time
-#	(none)
-#	United States standard Alaska time
-#	(none)
-# Next, names from 1967-04-01 until 1983-11-30 (the date for
-# public law 98-181):
-#	Atlantic standard time
-#	eastern standard time
-#	central standard time
-#	mountain standard time
-#	Pacific standard time
-#	Yukon standard time
-#	Alaska-Hawaii standard time
-#	Bering standard time
-# And after 1983-11-30:
-#	Atlantic standard time
-#	eastern standard time
-#	central standard time
-#	mountain standard time
-#	Pacific standard time
-#	Alaska standard time
-#	Hawaii-Aleutian standard time
-#	Samoa standard time
-# The law doesn't give abbreviations.
-#
-# From Paul Eggert (2000-01-08), following a heads-up from Rives McDow:
-# Public law 106-564 (2000-12-23) introduced the abbreviation
-# "Chamorro Standard Time" for time in Guam and the Northern Marianas.
-# See the file "australasia".
- 
-# From Arthur David Olson, 2005-08-09
-# The following was signed into law on 2005-08-08.
-#
-# H.R. 6, Energy Policy Act of 2005, SEC. 110. DAYLIGHT SAVINGS.
-#   (a) Amendment- Section 3(a) of the Uniform Time Act of 1966 (15
-#   U.S.C. 260a(a)) is amended--
-#     (1) by striking `first Sunday of April' and inserting `second
-#     Sunday of March'; and
-#     (2) by striking `last Sunday of October' and inserting `first
-#     Sunday of November'.
-#   (b) Effective Date- Subsection (a) shall take effect 1 year after the
-#   date of enactment of this Act or March 1, 2007, whichever is later.
-#   (c) Report to Congress- Not later than 9 months after the effective
-#   date stated in subsection (b), the Secretary shall report to Congress
-#   on the impact of this section on energy consumption in the United
-#   States.
-#   (d) Right to Revert- Congress retains the right to revert the
-#   Daylight Saving Time back to the 2005 time schedules once the
-#   Department study is complete.
-
-# US eastern time, represented by New York
-
-# Connecticut, Delaware, District of Columbia, most of Florida,
-# Georgia, southeast Indiana (Dearborn and Ohio counties), eastern Kentucky
-# (except America/Kentucky/Louisville below), Maine, Maryland, Massachusetts,
-# New Hampshire, New Jersey, New York, North Carolina, Ohio,
-# Pennsylvania, Rhode Island, South Carolina, eastern Tennessee,
-# Vermont, Virginia, West Virginia
-
-# From Dave Cantor (2004-11-02):
-# Early this summer I had the occasion to visit the Mount Washington
-# Observatory weather station atop (of course!) Mount Washington [, NH]....
-# One of the staff members said that the station was on Eastern Standard Time
-# and didn't change their clocks for Daylight Saving ... so that their
-# reports will always have times which are 5 hours behind UTC.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
-Rule	NYC	1920	only	-	Mar	lastSun	2:00	1:00	D
-Rule	NYC	1920	only	-	Oct	lastSun	2:00	0	S
-Rule	NYC	1921	1966	-	Apr	lastSun	2:00	1:00	D
-Rule	NYC	1921	1954	-	Sep	lastSun	2:00	0	S
-Rule	NYC	1955	1966	-	Oct	lastSun	2:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/New_York	-4:56:02 -	LMT	1883 Nov 18 12:03:58
-			-5:00	US	E%sT	1920
-			-5:00	NYC	E%sT	1942
-			-5:00	US	E%sT	1946
-			-5:00	NYC	E%sT	1967
-			-5:00	US	E%sT
-
-# US central time, represented by Chicago
-
-# Alabama, Arkansas, Florida panhandle (Bay, Calhoun, Escambia,
-# Gulf, Holmes, Jackson, Okaloosa, Santa Rosa, Walton, and
-# Washington counties), Illinois, western Indiana
-# (Gibson, Jasper, Lake, LaPorte, Newton, Porter, Posey, Spencer,
-# Vanderburgh, and Warrick counties), Iowa, most of Kansas, western
-# Kentucky, Louisiana, Minnesota, Mississippi, Missouri, eastern
-# Nebraska, eastern North Dakota, Oklahoma, eastern South Dakota,
-# western Tennessee, most of Texas, Wisconsin
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
-Rule	Chicago	1920	only	-	Jun	13	2:00	1:00	D
-Rule	Chicago	1920	1921	-	Oct	lastSun	2:00	0	S
-Rule	Chicago	1921	only	-	Mar	lastSun	2:00	1:00	D
-Rule	Chicago	1922	1966	-	Apr	lastSun	2:00	1:00	D
-Rule	Chicago	1922	1954	-	Sep	lastSun	2:00	0	S
-Rule	Chicago	1955	1966	-	Oct	lastSun	2:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Chicago	-5:50:36 -	LMT	1883 Nov 18 12:09:24
-			-6:00	US	C%sT	1920
-			-6:00	Chicago	C%sT	1936 Mar  1 2:00
-			-5:00	-	EST	1936 Nov 15 2:00
-			-6:00	Chicago	C%sT	1942
-			-6:00	US	C%sT	1946
-			-6:00	Chicago	C%sT	1967
-			-6:00	US	C%sT
-# Oliver County, ND switched from mountain to central time on 1992-10-25.
-Zone America/North_Dakota/Center -6:45:12 - LMT	1883 Nov 18 12:14:48
-			-7:00	US	M%sT	1992 Oct 25 02:00
-			-6:00	US	C%sT
-
-# US mountain time, represented by Denver
-#
-# Colorado, far western Kansas, Montana, western
-# Nebraska, Nevada border (Jackpot, Owyhee, and Mountain City),
-# New Mexico, southwestern North Dakota, far eastern Oregon,
-# western South Dakota, far western Texas (El Paso County, Hudspeth County,
-# and Pine Springs and Nickel Creek in Culberson County), Utah, Wyoming
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
-Rule	Denver	1920	1921	-	Mar	lastSun	2:00	1:00	D
-Rule	Denver	1920	only	-	Oct	lastSun	2:00	0	S
-Rule	Denver	1921	only	-	May	22	2:00	0	S
-Rule	Denver	1965	1966	-	Apr	lastSun	2:00	1:00	D
-Rule	Denver	1965	1966	-	Oct	lastSun	2:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Denver	-6:59:56 -	LMT	1883 Nov 18 12:00:04
-			-7:00	US	M%sT	1920
-			-7:00	Denver	M%sT	1942
-			-7:00	US	M%sT	1946
-			-7:00	Denver	M%sT	1967
-			-7:00	US	M%sT
-
-# US Pacific time, represented by Los Angeles
-#
-# California, northern Idaho (Benewah, Bonner, Boundary, Clearwater,
-# Idaho, Kootenai, Latah, Lewis, Nez Perce, and Shoshone counties),
-# most of Nevada, most of Oregon, and Washington
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
-Rule	CA	1948	only	-	Mar	14	2:00	1:00	D
-Rule	CA	1949	only	-	Jan	 1	2:00	0	S
-Rule	CA	1950	1966	-	Apr	lastSun	2:00	1:00	D
-Rule	CA	1950	1961	-	Sep	lastSun	2:00	0	S
-Rule	CA	1962	1966	-	Oct	lastSun	2:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Los_Angeles -7:52:58 -	LMT	1883 Nov 18 12:07:02
-			-8:00	US	P%sT	1946
-			-8:00	CA	P%sT	1967
-			-8:00	US	P%sT
-
-# Alaska
-# AK%sT is the modern abbreviation for -9:00 per USNO.
-#
-# From Paul Eggert (2001-05-30):
-# Howse writes that Alaska switched from the Julian to the Gregorian calendar,
-# and from east-of-GMT to west-of-GMT days, when the US bought it from Russia.
-# This was on 1867-10-18, a Friday; the previous day was 1867-10-06 Julian,
-# also a Friday.  Include only the time zone part of this transition,
-# ignoring the switch from Julian to Gregorian, since we can't represent
-# the Julian calendar.
-#
-# As far as we know, none of the exact locations mentioned below were
-# permanently inhabited in 1867 by anyone using either calendar.
-# (Yakutat was colonized by the Russians in 1799, but the settlement
-# was destroyed in 1805 by a Yakutat-kon war party.)  However, there
-# were nearby inhabitants in some cases and for our purposes perhaps
-# it's best to simply use the official transition.
-#
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Juneau	 15:02:19 -	LMT	1867 Oct 18
-			 -8:57:41 -	LMT	1900 Aug 20 12:00
-			 -8:00	-	PST	1942
-			 -8:00	US	P%sT	1946
-			 -8:00	-	PST	1969
-			 -8:00	US	P%sT	1983 Oct 30 2:00
-			 -9:00	US	Y%sT	1983 Nov 30
-			 -9:00	US	AK%sT
-Zone America/Yakutat	 14:41:05 -	LMT	1867 Oct 18
-			 -9:18:55 -	LMT	1900 Aug 20 12:00
-			 -9:00	-	YST	1942
-			 -9:00	US	Y%sT	1946
-			 -9:00	-	YST	1969
-			 -9:00	US	Y%sT	1983 Nov 30
-			 -9:00	US	AK%sT
-Zone America/Anchorage	 14:00:24 -	LMT	1867 Oct 18
-			 -9:59:36 -	LMT	1900 Aug 20 12:00
-			-10:00	-	CAT	1942
-			-10:00	US	CAT/CAWT 1946
-			-10:00	-	CAT	1967 Apr
-			-10:00	-	AHST	1969
-			-10:00	US	AH%sT	1983 Oct 30 2:00
-			 -9:00	US	Y%sT	1983 Nov 30
-			 -9:00	US	AK%sT
-Zone America/Nome	 12:58:21 -	LMT	1867 Oct 18
-			-11:01:38 -	LMT	1900 Aug 20 12:00
-			-11:00	-	NST	1942
-			-11:00	US	N%sT	1946
-			-11:00	-	NST	1967 Apr
-			-11:00	-	BST	1969
-			-11:00	US	B%sT	1983 Oct 30 2:00
-			 -9:00	US	Y%sT	1983 Nov 30
-			 -9:00	US	AK%sT
-Zone America/Adak	 12:13:21 -	LMT	1867 Oct 18
-			-11:46:38 -	LMT	1900 Aug 20 12:00
-			-11:00	-	NST	1942
-			-11:00	US	N%sT	1946
-			-11:00	-	NST	1967 Apr
-			-11:00	-	BST	1969
-			-11:00	US	B%sT	1983 Oct 30 2:00
-			-10:00	US	AH%sT	1983 Nov 30
-			-10:00	US	HA%sT
-# The following switches don't quite make our 1970 cutoff.
-#
-# Shanks writes that part of southwest Alaska (e.g. Aniak)
-# switched from -11:00 to -10:00 on 1968-09-22 at 02:00,
-# and another part (e.g. Akiak) made the same switch five weeks later.
-#
-# From David Flater (2004-11-09):
-# In e-mail, 2004-11-02, Ray Hudson, historian/liaison to the Unalaska
-# Historic Preservation Commission, provided this information, which
-# suggests that Unalaska deviated from statutory time from early 1967
-# possibly until 1983:
-#
-#  Minutes of the Unalaska City Council Meeting, January 10, 1967:
-#  "Except for St. Paul and Akutan, Unalaska is the only important
-#  location not on Alaska Standard Time.  The following resolution was
-#  made by William Robinson and seconded by Henry Swanson:  Be it
-#  resolved that the City of Unalaska hereby goes to Alaska Standard
-#  Time as of midnight Friday, January 13, 1967 (1 A.M. Saturday,
-#  January 14, Alaska Standard Time.)  This resolution was passed with
-#  three votes for and one against."
-
-# Hawaii
-#
-# From Arthur David Olson:
-# And then there's Hawaii.
-# DST was observed for one day in 1933;
-# standard time was changed by half an hour in 1947;
-# it's always standard as of 1986.
-#
-# From Paul Eggert:
-# Shanks says the 1933 experiment lasted for three weeks.  Go with Shanks.
-#
-Zone Pacific/Honolulu	-10:31:26 -	LMT	1900 Jan  1 12:00
-			-10:30	-	HST	1933 Apr 30 2:00
-			-10:30	1:00	HDT	1933 May 21 2:00
-			-10:30	US	H%sT	1947 Jun  8 2:00
-			-10:00	-	HST
-
-# Now we turn to US areas that have diverged from the consensus since 1970.
-
-# Arizona mostly uses MST.
-
-# From Paul Eggert (2002-10-20):
-#
-# The information in the rest of this paragraph is derived from the
-# <a href="http://www.dlapr.lib.az.us/links/daylight.htm">
-# Daylight Saving Time web page (2002-01-23)</a> maintained by the
-# Arizona State Library, Archives and Public Records.
-# Between 1944-01-01 and 1944-04-01 the State of Arizona used standard
-# time, but by federal law railroads, airlines, bus lines, military
-# personnel, and some engaged in interstate commerce continued to
-# observe war (i.e., daylight saving) time.  The 1944-03-17 Phoenix
-# Gazette says that was the date the law changed, and that 04-01 was
-# the date the state's clocks would change.  In 1945 the State of
-# Arizona used standard time all year, again with exceptions only as
-# mandated by federal law.  Arizona observed DST in 1967, but Arizona
-# Laws 1968, ch. 183 (effective 1968-03-21) repealed DST.
-#
-# Shanks says the 1944 experiment came to an end on 1944-03-17.
-# Go with the Arizona State Library instead.
-
-Zone America/Phoenix	-7:28:18 -	LMT	1883 Nov 18 11:31:42
-			-7:00	US	M%sT	1944 Jan  1 00:01
-			-7:00	-	MST	1944 Apr  1 00:01
-			-7:00	US	M%sT	1944 Oct  1 00:01
-			-7:00	-	MST	1967
-			-7:00	US	M%sT	1968 Mar 21
-			-7:00	-	MST
-# From Arthur David Olson (1988-02-13):
-# A writer from the Inter Tribal Council of Arizona, Inc.,
-# notes in private correspondence dated 1987-12-28 that "Presently, only the
-# Navajo Nation participates in the Daylight Saving Time policy, due to its
-# large size and location in three states."  (The "only" means that other
-# tribal nations don't use DST.)
-
-Link America/Denver America/Shiprock
-
-# Southern Idaho (Ada, Adams, Bannock, Bear Lake, Bingham, Blaine,
-# Boise, Bonneville, Butte, Camas, Canyon, Caribou, Cassia, Clark,
-# Custer, Elmore, Franklin, Fremont, Gem, Gooding, Jefferson, Jerome,
-# Lemhi, Lincoln, Madison, Minidoka, Oneida, Owyhee, Payette, Power,
-# Teton, Twin Falls, Valley, Washington counties) and eastern Oregon
-# switched four weeks late in 1974.
-#
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Boise	-7:44:49 -	LMT	1883 Nov 18 12:15:11
-			-8:00	US	P%sT	1923 May 13 2:00
-			-7:00	US	M%sT	1974
-			-7:00	-	MST	1974 Feb  3 2:00
-			-7:00	US	M%sT
-
-# Indiana
-#
-# For a map of Indiana's time zone regions, see:
-# <a href="http://www.mccsc.edu/time.html">
-# What time is it in Indiana?
-# </a> (2005-05-03)
-#
-# From Paul Eggert (2005-08-22):
-# Since 1970, most of Indiana has been like America/Indiana/Indianapolis,
-# with the following exceptions:
-#
-# - Gibson, Jasper, Lake, LaPorte, Newton, Porter, Posey, Spencer,
-#   Vandenburgh, and Warrick counties have been like America/Chicago.
-#
-# - Dearborn and Ohio counties have been like America/New_York.
-#
-# - Clark, Floyd, and Harrison counties have been like
-#   America/Kentucky/Louisville.
-#
-# - Crawford, Starke, and Switzerland counties have their own time zone
-#   histories as noted below.
-#
-# Shanks partitions Indiana into 345 regions, each with its own time history,
-# and writes ``Even newspaper reports present contradictory information.''
-# Fortunately, most of the complexity occurred before our cutoff date of 1970.
-#
-# Other than Indianapolis, the Indiana place names are so nondescript
-# that they would be ambiguous if we left them at the `America' level.
-# So we reluctantly put them all in a subdirectory `America/Indiana'.
-
-# From Paul Eggert (2005-08-16):
-# http://www.mccsc.edu/time.html says that Indiana will use DST starting 2006,
-# and that many counties may switch either to Central or to Eastern time.
-# The county-by-county decisions have not been made yet, so for now assume
-# that no counties will switch: this assumption is most likely wrong,
-# but it's the best we can do for now.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
-Rule Indianapolis 1941	only	-	Jun	22	2:00	1:00	D
-Rule Indianapolis 1941	1954	-	Sep	lastSun	2:00	0	S
-Rule Indianapolis 1946	1954	-	Apr	lastSun	2:00	1:00	D
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Indiana/Indianapolis -5:44:38 - LMT 1883 Nov 18 12:15:22
-			-6:00	US	C%sT	1920
-			-6:00 Indianapolis C%sT	1942
-			-6:00	US	C%sT	1946
-			-6:00 Indianapolis C%sT	1955 Apr 24 2:00
-			-5:00	-	EST	1957 Sep 29 2:00
-			-6:00	-	CST	1958 Apr 27 2:00
-			-5:00	-	EST	1969
-			-5:00	US	E%sT	1971
-			-5:00	-	EST	2006
-			-5:00	US	E%sT
-#
-# Part of Crawford County, Indiana, last observed DST in 1975,
-# and left its clocks alone in 1974.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
-Rule	Marengo	1951	only	-	Apr	lastSun	2:00	1:00	D
-Rule	Marengo	1951	only	-	Sep	lastSun	2:00	0	S
-Rule	Marengo	1954	1960	-	Apr	lastSun	2:00	1:00	D
-Rule	Marengo	1954	1960	-	Sep	lastSun	2:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Indiana/Marengo -5:45:23 -	LMT	1883 Nov 18 12:14:37
-			-6:00	US	C%sT	1951
-			-6:00	Marengo	C%sT	1961 Apr 30 2:00
-			-5:00	-	EST	1969
-			-5:00	US	E%sT	1974 Jan  6 2:00
-			-6:00	1:00	CDT	1974 Oct 27 2:00
-			-5:00	US	E%sT	1976
-			-5:00	-	EST	2006
-			-5:00	US	E%sT
-#
-# Starke County, Indiana
-# From Arthur David Olson (1991-10-28):
-# An article on page A3 of the Sunday, 1991-10-27 Washington Post
-# notes that Starke County switched from Central time to Eastern time as of
-# 1991-10-27.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
-Rule	Starke	1947	1961	-	Apr	lastSun	2:00	1:00	D
-Rule	Starke	1947	1954	-	Sep	lastSun	2:00	0	S
-Rule	Starke	1955	1956	-	Oct	lastSun	2:00	0	S
-Rule	Starke	1957	1958	-	Sep	lastSun	2:00	0	S
-Rule	Starke	1959	1961	-	Oct	lastSun	2:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Indiana/Knox -5:46:30 -	LMT	1883 Nov 18 12:13:30
-			-6:00	US	C%sT	1947
-			-6:00	Starke	C%sT	1962 Apr 29 2:00
-			-5:00	-	EST	1963 Oct 27 2:00
-			-6:00	US	C%sT	1991 Oct 27 2:00
-			-5:00	-	EST	2006
-			-5:00	US	E%sT
-#
-# Switzerland County, Indiana, last observed DST in 1972.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Indiana/Vevay -5:40:16 -	LMT	1883 Nov 18 12:19:44
-			-6:00	US	C%sT	1954 Apr 25 2:00
-			-5:00	-	EST	1969
-			-5:00	US	E%sT	1973
-			-5:00	-	EST	2006
-			-5:00	US	E%sT
-
-# Part of Kentucky left its clocks alone in 1974.
-# This also includes Clark, Floyd, and Harrison counties in Indiana.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
-Rule Louisville	1921	only	-	May	1	2:00	1:00	D
-Rule Louisville	1921	only	-	Sep	1	2:00	0	S
-Rule Louisville	1941	1961	-	Apr	lastSun	2:00	1:00	D
-Rule Louisville	1941	only	-	Sep	lastSun	2:00	0	S
-Rule Louisville	1946	only	-	Jun	2	2:00	0	S
-Rule Louisville	1950	1955	-	Sep	lastSun	2:00	0	S
-Rule Louisville	1956	1960	-	Oct	lastSun	2:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Kentucky/Louisville -5:43:02 -	LMT	1883 Nov 18 12:16:58
-			-6:00	US	C%sT	1921
-			-6:00 Louisville C%sT	1942
-			-6:00	US	C%sT	1946
-			-6:00 Louisville C%sT	1961 Jul 23 2:00
-			-5:00	-	EST	1968
-			-5:00	US	E%sT	1974 Jan  6 2:00
-			-6:00	1:00	CDT	1974 Oct 27 2:00
-			-5:00	US	E%sT
-#
-# Wayne, Clinton, and Russell Counties, Kentucky
-#
-# From
-# <a href="http://www.lake-cumberland.com/life/archive/news990129time.shtml">
-# Lake Cumberland LIFE
-# </a> (1999-01-29) via WKYM-101.7:
-# Clinton County has joined Wayne County in asking the DoT to change from
-# the Central to the Eastern time zone....  The Wayne County government made
-# the same request in December.  And while Russell County officials have not
-# taken action, the majority of respondents to a poll conducted there in
-# August indicated they would like to change to "fast time" also.
-# The three Lake Cumberland counties are the farthest east of any U.S.
-# location in the Central time zone.
-#
-# From Rich Wales (2000-08-29):
-# After prolonged debate, and despite continuing deep differences of opinion,
-# Wayne County (central Kentucky) is switching from Central (-0600) to Eastern
-# (-0500) time.  They won't "fall back" this year.  See Sara Shipley,
-# The difference an hour makes, Nando Times (2000-08-29 15:33 -0400).
-#
-# From Paul Eggert (2001-07-16):
-# The final rule was published in the
-# <a href="http://frwebgate.access.gpo.gov/cgi-bin/getdoc.cgi?dbname=2000_register&docid=fr17au00-22">
-# Federal Register 65, 160 (2000-08-17), page 50154-50158.
-# </a>
-#
-Zone America/Kentucky/Monticello -5:39:24 - LMT	1883 Nov 18 12:20:36
-			-6:00	US	C%sT	1946
-			-6:00	-	CST	1968
-			-6:00	US	C%sT	2000 Oct 29  2:00
-			-5:00	US	E%sT
-
-
-# From Rives McDow (2000-08-30):
-# Here ... are all the changes in the US since 1985.
-# Kearny County, KS (put all of county on central;
-#	previously split between MST and CST) ... 1990-10
-# Starke County, IN (from CST to EST) ... 1991-10
-# Oliver County, ND (from MST to CST) ... 1992-10
-# West Wendover, NV (from PST TO MST) ... 1999-10
-# Wayne County, KY (from CST to EST) ... 2000-10
-#
-# From Paul Eggert (2001-07-17):
-# We don't know where the line used to be within Kearny County, KS,
-# so omit that change for now.
-# See America/Indiana/Knox for the Starke County, IN change.
-# See America/North_Dakota/Center for the Oliver County, ND change.
-# West Wendover, NV officially switched from Pacific to mountain time on
-# 1999-10-31.  See the
-# <a href="http://frwebgate.access.gpo.gov/cgi-bin/getdoc.cgi?dbname=1999_register&docid=fr21oc99-15">
-# Federal Register 64, 203 (1999-10-21), page 56705-56707.
-# </a>
-# However, the Federal Register says that West Wendover already operated
-# on mountain time, and the rule merely made this official;
-# hence a separate tz entry is not needed.
-
-# Michigan
-#
-# From Bob Devine (1988-01-28):
-# Michigan didn't observe DST from 1968 to 1973.
-#
-# From Paul Eggert (1999-03-31):
-# Shanks writes that Michigan started using standard time on 1885-09-18,
-# but Howse writes (pp 124-125, referring to Popular Astronomy, 1901-01)
-# that Detroit kept
-#
-#	local time until 1900 when the City Council decreed that clocks should
-#	be put back twenty-eight minutes to Central Standard Time.  Half the
-#	city obeyed, half refused.  After considerable debate, the decision
-#	was rescinded and the city reverted to Sun time.  A derisive offer to
-#	erect a sundial in front of the city hall was referred to the
-#	Committee on Sewers.  Then, in 1905, Central time was adopted
-#	by city vote.
-#
-# This story is too entertaining to be false, so go with Howse over Shanks.
-#
-# From Paul Eggert (2001-03-06):
-# Garland (1927) writes ``Cleveland and Detroit advanced their clocks
-# one hour in 1914.''  This change is not in Shanks.  We have no more
-# info, so omit this for now.
-#
-# Most of Michigan observed DST from 1973 on, but was a bit late in 1975.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
-Rule	Detroit	1948	only	-	Apr	lastSun	2:00	1:00	D
-Rule	Detroit	1948	only	-	Sep	lastSun	2:00	0	S
-Rule	Detroit	1967	only	-	Jun	14	2:00	1:00	D
-Rule	Detroit	1967	only	-	Oct	lastSun	2:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Detroit	-5:32:11 -	LMT	1905
-			-6:00	-	CST	1915 May 15 2:00
-			-5:00	-	EST	1942
-			-5:00	US	E%sT	1946
-			-5:00	Detroit	E%sT	1973
-			-5:00	US	E%sT	1975
-			-5:00	-	EST	1975 Apr 27 2:00
-			-5:00	US	E%sT
-#
-# The Michigan border with Wisconsin switched from EST to CST/CDT in 1973.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
-Rule Menominee	1946	only	-	Apr	lastSun	2:00	1:00	D
-Rule Menominee	1946	only	-	Sep	lastSun	2:00	0	S
-Rule Menominee	1966	only	-	Apr	lastSun	2:00	1:00	D
-Rule Menominee	1966	only	-	Oct	lastSun	2:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Menominee	-5:50:27 -	LMT	1885 Sep 18 12:00
-			-6:00	US	C%sT	1946
-			-6:00 Menominee	C%sT	1969 Apr 27 2:00
-			-5:00	-	EST	1973 Apr 29 2:00
-			-6:00	US	C%sT
-
-# Navassa
-# administered by the US Fish and Wildlife Service
-# claimed by US under the provisions of the 1856 Guano Islands Act
-# also claimed by Haiti
-# occupied 1857/1900 by the Navassa Phosphate Co
-# US lighthouse 1917/1996-09
-# currently uninhabited
-# see Mark Fineman, ``An Isle Rich in Guano and Discord'',
-# _Los Angeles Times_ (1998-11-10), A1, A10; it cites
-# Jimmy Skaggs, _The Great Guano Rush_ (1994).
-
-################################################################################
-
-
-# From Paul Eggert (1999-10-29):
-# A good source for time zone historical data outside the US is
-# Thomas G. Shanks, The International Atlas (5th edition),
-# San Diego: ACS Publications, Inc. (1999).
-#
-# Gwillim Law writes that a good source
-# for recent time zone data is the International Air Transport
-# Association's Standard Schedules Information Manual (IATA SSIM),
-# published semiannually.  Law sent in several helpful summaries
-# of the IATA's data after 1990.
-#
-# Except where otherwise noted, Shanks is the source for entries through 1990,
-# and IATA SSIM is the source for entries after 1990.
-#
-# Other sources occasionally used include:
-#
-#	Edward W. Whitman, World Time Differences,
-#	Whitman Publishing Co, 2 Niagara Av, Ealing, London (undated),
-#	which I found in the UCLA library.
-#
-#	<a href="http://www.pettswoodvillage.co.uk/Daylight_Savings_William_Willett.pdf">
-#	William Willett, The Waste of Daylight, 19th edition
-#	</a> (1914-03)
-#
-# See the `europe' file for Greenland.
-
-# Canada
-
-# From Alain LaBont<e'> (1994-11-14):
-# I post here the time zone abbreviations standardized in Canada
-# for both English and French in the CAN/CSA-Z234.4-89 standard....
-#
-#	UTC	Standard time	Daylight savings time
-#	offset	French	English	French	English
-#	-2:30	-	-	HAT	NDT
-#	-3	-	-	HAA	ADT
-#	-3:30	HNT	NST	-	-
-#	-4	HNA	AST	HAE	EDT
-#	-5	HNE	EST	HAC	CDT
-#	-6	HNC	CST	HAR	MDT
-#	-7	HNR	MST	HAP	PDT
-#	-8	HNP	PST	HAY	YDT
-#	-9	HNY	YST	-	-
-#
-#	HN: Heure Normale	ST: Standard Time
-#	HA: Heure Avanc<e'>e	DT: Daylight saving Time
-#
-#	A: de l'Atlantique	Atlantic
-#	C: du Centre		Central
-#	E: de l'Est		Eastern
-#	M:			Mountain
-#	N:			Newfoundland
-#	P: du Pacifique		Pacific
-#	R: des Rocheuses
-#	T: de Terre-Neuve
-#	Y: du Yukon		Yukon
-#
-# From Paul Eggert (1994-11-22):
-# Alas, this sort of thing must be handled by localization software.
-
-# Unless otherwise specified, the data for Canada are all from Shanks.
-
-# From Paul Eggert (2000-10-02):
-# H. David Matthews and Mary Vincent's map
-# <a href="http://www.canadiangeographic.ca/SO98/geomap.htm">
-# "It's about TIME", _Canadian Geographic_ (September-October 1998)
-# </a> contains detailed boundaries for regions observing nonstandard
-# time and daylight saving time arrangements in Canada circa 1998.
-#
-# INMS, the Institute for National Measurement Standards in Ottawa, has
-# <a href="http://www.nrc.ca/inms/time/tze.html">
-# information about standard and daylight saving time zones in Canada.
-# </a> (updated periodically).
-# Its unofficial information is often taken from Matthews and Vincent.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Canada	1918	only	-	Apr	14	2:00	1:00	D
-Rule	Canada	1918	only	-	Oct	31	2:00	0	S
-Rule	Canada	1942	only	-	Feb	 9	2:00	1:00	W # War
-Rule	Canada	1945	only	-	Aug	14	23:00u	1:00	P # Peace
-Rule	Canada	1945	only	-	Sep	30	2:00	0	S
-Rule	Canada	1974	1986	-	Apr	lastSun	2:00	1:00	D
-Rule	Canada	1974	max	-	Oct	lastSun	2:00	0	S
-Rule	Canada	1987	max	-	Apr	Sun>=1	2:00	1:00	D
-
-
-# Newfoundland (and far southeast Labrador)
-
-# From Paul Eggert (2000-10-02):
-# Matthews and Vincent (1998) write that Labrador should use NST/NDT,
-# but the only part of Labrador that follows the rules is the
-# southeast corner, including Port Hope Simpson and Mary's Harbour,
-# but excluding, say, Black Tickle.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	StJohns	1917	only	-	Apr	 8	2:00	1:00	D
-Rule	StJohns	1917	only	-	Sep	17	2:00	0	S
-# Whitman gives 1919 Apr 5 and 1920 Apr 5; go with Shanks.
-Rule	StJohns	1919	only	-	May	 5	23:00	1:00	D
-Rule	StJohns	1919	only	-	Aug	12	23:00	0	S
-# For 1931-1935 Whitman gives Apr same date; go with Shanks.
-Rule	StJohns	1920	1935	-	May	Sun>=1	23:00	1:00	D
-Rule	StJohns	1920	1935	-	Oct	lastSun	23:00	0	S
-# For 1936-1941 Whitman gives May Sun>=8 and Oct Sun>=1; go with Shanks.
-Rule	StJohns	1936	1941	-	May	Mon>=9	0:00	1:00	D
-Rule	StJohns	1936	1941	-	Oct	Mon>=2	0:00	0	S
-# Whitman gives the following transitions:
-# 1942 03-01/12-31, 1943 05-30/09-05, 1944 07-10/09-02, 1945 01-01/10-07
-# but go with Shanks and assume they used Canadian rules.
-# For 1946-9 Whitman gives May 5,4,9,1 - Oct 1,5,3,2, and for 1950 he gives
-# Apr 30 - Sep 24; go with Shanks.
-Rule	StJohns	1946	1950	-	May	Sun>=8	2:00	1:00	D
-Rule	StJohns	1946	1950	-	Oct	Sun>=2	2:00	0	S
-Rule	StJohns	1951	1986	-	Apr	lastSun	2:00	1:00	D
-Rule	StJohns	1951	1959	-	Sep	lastSun	2:00	0	S
-Rule	StJohns	1960	1986	-	Oct	lastSun	2:00	0	S
-# From Paul Eggert (2000-10-02):
-# INMS (2000-09-12) says that, since 1988 at least, Newfoundland switches
-# at 00:01 local time.  For now, assume it started in 1987.
-Rule	StJohns	1987	only	-	Apr	Sun>=1	0:01	1:00	D
-Rule	StJohns	1987	max	-	Oct	lastSun	0:01	0	S
-Rule	StJohns	1988	only	-	Apr	Sun>=1	0:01	2:00	DD
-Rule	StJohns	1989	max	-	Apr	Sun>=1	0:01	1:00	D
-# St John's has an apostrophe, but Posix file names can't have apostrophes.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/St_Johns	-3:30:52 -	LMT	1884
-			-3:30:52 StJohns N%sT	1918
-			-3:30:52 Canada	N%sT	1919
-			-3:30:52 StJohns N%sT	1935 Mar 30
-			-3:30	StJohns	N%sT	1942 May 11
-			-3:30	Canada	N%sT	1946
-			-3:30	StJohns	N%sT
-
-# most of east Labrador
-
-# The name `Happy Valley-Goose Bay' is too long; use `Goose Bay'.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Goose_Bay	-4:01:40 -	LMT	1884 # Happy Valley-Goose Bay
-			-3:30:52 -	NST	1918
-			-3:30:52 Canada N%sT	1919
-			-3:30:52 -	NST	1935 Mar 30
-			-3:30	-	NST	1936
-			-3:30	StJohns	N%sT	1942 May 11
-			-3:30	Canada	N%sT	1946
-			-3:30	StJohns	N%sT	1966 Mar 15 2:00
-			-4:00	StJohns	A%sT
-
-
-# west Labrador, New Brunswick, Nova Scotia, Prince Edward I
-
-# From Paul Eggert (1996-06-12):
-# Shanks writes that since 1970 most of this region has been like Halifax.
-# Many locales did not observe peacetime DST until 1972;
-# Glace Bay, NS is the largest that we know of.
-# Shanks also writes that Liverpool, NS was the only town in Canada to observe
-# DST in 1971 but not 1970; for now we'll assume this is a typo.
-
-# From Paul Eggert (2000-10-02):
-# INMS (2000-09-12) says that, since 1988 at least, New Brunswick switches
-# at 00:01 local time.  FIXME: verify and create a new Zone for this.
-
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule Halifax	1916	only	-	Apr	 1	0:00	1:00	D
-Rule Halifax	1916	only	-	Oct	 1	0:00	0	S
-Rule Halifax	1920	only	-	May	 9	0:00	1:00	D
-Rule Halifax	1920	only	-	Aug	29	0:00	0	S
-Rule Halifax	1921	only	-	May	 6	0:00	1:00	D
-Rule Halifax	1921	1922	-	Sep	 5	0:00	0	S
-Rule Halifax	1922	only	-	Apr	30	0:00	1:00	D
-Rule Halifax	1923	1925	-	May	Sun>=1	0:00	1:00	D
-Rule Halifax	1923	only	-	Sep	 4	0:00	0	S
-Rule Halifax	1924	only	-	Sep	15	0:00	0	S
-Rule Halifax	1925	only	-	Sep	28	0:00	0	S
-Rule Halifax	1926	only	-	May	16	0:00	1:00	D
-Rule Halifax	1926	only	-	Sep	13	0:00	0	S
-Rule Halifax	1927	only	-	May	 1	0:00	1:00	D
-Rule Halifax	1927	only	-	Sep	26	0:00	0	S
-Rule Halifax	1928	1931	-	May	Sun>=8	0:00	1:00	D
-Rule Halifax	1928	only	-	Sep	 9	0:00	0	S
-Rule Halifax	1929	only	-	Sep	 3	0:00	0	S
-Rule Halifax	1930	only	-	Sep	15	0:00	0	S
-Rule Halifax	1931	1932	-	Sep	Mon>=24	0:00	0	S
-Rule Halifax	1932	only	-	May	 1	0:00	1:00	D
-Rule Halifax	1933	only	-	Apr	30	0:00	1:00	D
-Rule Halifax	1933	only	-	Oct	 2	0:00	0	S
-Rule Halifax	1934	only	-	May	20	0:00	1:00	D
-Rule Halifax	1934	only	-	Sep	16	0:00	0	S
-Rule Halifax	1935	only	-	Jun	 2	0:00	1:00	D
-Rule Halifax	1935	only	-	Sep	30	0:00	0	S
-Rule Halifax	1936	only	-	Jun	 1	0:00	1:00	D
-Rule Halifax	1936	only	-	Sep	14	0:00	0	S
-Rule Halifax	1937	1938	-	May	Sun>=1	0:00	1:00	D
-Rule Halifax	1937	1941	-	Sep	Mon>=24	0:00	0	S
-Rule Halifax	1939	only	-	May	28	0:00	1:00	D
-Rule Halifax	1940	1941	-	May	Sun>=1	0:00	1:00	D
-Rule Halifax	1946	1949	-	Sep	lastSun	2:00	0	S
-Rule Halifax	1946	1949	-	Apr	lastSun	2:00	1:00	D
-Rule Halifax	1951	1954	-	Sep	lastSun	2:00	0	S
-Rule Halifax	1951	1954	-	Apr	lastSun	2:00	1:00	D
-Rule Halifax	1956	1959	-	Sep	lastSun	2:00	0	S
-Rule Halifax	1956	1959	-	Apr	lastSun	2:00	1:00	D
-Rule Halifax	1962	1973	-	Apr	lastSun	2:00	1:00	D
-Rule Halifax	1962	1973	-	Oct	lastSun	2:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Halifax	-4:14:24 -	LMT	1902 Jun 15
-			-4:00	Halifax	A%sT	1918
-			-4:00	Canada	A%sT	1919
-			-4:00	Halifax	A%sT	1942 Feb  9 2:00s
-			-4:00	Canada	A%sT	1946
-			-4:00	Halifax	A%sT	1974
-			-4:00	Canada	A%sT
-Zone America/Glace_Bay	-3:59:48 -	LMT	1902 Jun 15
-			-4:00	Canada	A%sT	1953
-			-4:00	Halifax	A%sT	1954
-			-4:00	-	AST	1972
-			-4:00	Halifax	A%sT	1974
-			-4:00	Canada	A%sT
-
-
-# Ontario, Quebec
-
-# From Paul Eggert (1996-06-12):
-# Shanks writes that since 1970 most of Ontario has been like Toronto,
-# and most of Quebec has been like Montreal.
-# Thunder Bay skipped DST in 1973.
-# Many smaller locales did not observe peacetime DST until 1974;
-# Nipigon (EST) and Rainy River (CST) are the largest that we know of.
-# Far west Ontario is like Winnipeg; far east Quebec is like Halifax.
-
-# From Mark Brader (2003-07-26):
-# [According to the Toronto Star] Orillia, Ontario, adopted DST
-# effective Saturday, 1912-06-22, 22:00; the article mentions that
-# Port Arthur (now part of Thunder Bay, Ontario) as well as Moose Jaw
-# have already done so.  In Orillia DST was to run until Saturday,
-# 1912-08-31 (no time mentioned), but it was met with considerable
-# hostility from certain segments of the public, and was revoked after
-# only two weeks -- I copied it as Saturday, 1912-07-07, 22:00, but
-# presumably that should be -07-06.  (1912-06-19, -07-12; also letters
-# earlier in June).
-#
-# Kenora, Ontario, was to abandon DST on 1914-06-01 (-05-21).
-
-# From Paul Eggert (1997-10-17):
-# Mark Brader writes that an article in the 1997-10-14 Toronto Star
-# says that Atikokan, Ontario currently does not observe DST,
-# but will vote on 11-10 whether to use EST/EDT.
-# He also writes that the
-# <a href="http://www.gov.on.ca/MBS/english/publications/statregs/conttext.html">
-# Ontario Time Act (1990, Chapter T.9)
-# </a>
-# says that Ontario east of 90W uses EST/EDT, and west of 90W uses CST/CDT.
-# Officially Atikokan is therefore on CST/CDT, and most likely this report
-# concerns a non-official time observed as a matter of local practice.
-# For what it's worth, Shanks says that Atikokan has agreed with
-# Rainy River ever since standard time was introduced.
-
-# From Paul Eggert (2000-10-02):
-# Matthews and Vincent (1998) write that Atikokan, Pickle Lake, and
-# New Osnaburgh observe CST all year, that Big Trout Lake observes
-# CST/CDT, and that Upsala and Shebandowan observe EST/EDT, all in
-# violation of the official Ontario rules.
-# They also write that Quebec east of the -63 meridian is supposed to
-# observe AST, but residents as far east as Natashquan use EST/EDT,
-# and residents east of Natashquan use AST.
-# We probably need Zones for far east Quebec and for Atikokan,
-# but we don't know when their practices started.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Mont	1917	only	-	Mar	25	2:00	1:00	D
-Rule	Mont	1917	only	-	Apr	24	0:00	0	S
-Rule	Mont	1919	only	-	Mar	31	2:30	1:00	D
-Rule	Mont	1919	only	-	Oct	25	2:30	0	S
-Rule	Mont	1920	only	-	May	 2	2:30	1:00	D
-Rule	Mont	1920	1922	-	Oct	Sun>=1	2:30	0	S
-Rule	Mont	1921	only	-	May	 1	2:00	1:00	D
-Rule	Mont	1922	only	-	Apr	30	2:00	1:00	D
-Rule	Mont	1924	only	-	May	17	2:00	1:00	D
-Rule	Mont	1924	1926	-	Sep	lastSun	2:30	0	S
-Rule	Mont	1925	1926	-	May	Sun>=1	2:00	1:00	D
-# The 1927-to-1937 rules can be expressed more simply as
-# Rule	Mont	1927	1937	-	Apr	lastSat	24:00	1:00	D
-# Rule	Mont	1927	1937	-	Sep	lastSat	24:00	0	S
-# The rules below avoid use of 24:00
-# (which pre-1998 versions of zic cannot handle).
-Rule	Mont	1927	only	-	May	1	0:00	1:00	D
-Rule	Mont	1927	1932	-	Sep	lastSun	0:00	0	S
-Rule	Mont	1928	1931	-	Apr	lastSun	0:00	1:00	D
-Rule	Mont	1932	only	-	May	1	0:00	1:00	D
-Rule	Mont	1933	1940	-	Apr	lastSun	0:00	1:00	D
-Rule	Mont	1933	only	-	Oct	1	0:00	0	S
-Rule	Mont	1934	1939	-	Sep	lastSun	0:00	0	S
-Rule	Mont	1946	1973	-	Apr	lastSun	2:00	1:00	D
-Rule	Mont	1945	1948	-	Sep	lastSun	2:00	0	S
-Rule	Mont	1949	1950	-	Oct	lastSun	2:00	0	S
-Rule	Mont	1951	1956	-	Sep	lastSun	2:00	0	S
-Rule	Mont	1957	1973	-	Oct	lastSun	2:00	0	S
-
-Rule	Toronto	1919	only	-	Mar	30	23:30	1:00	D
-Rule	Toronto	1919	only	-	Oct	26	0:00	0	S
-Rule	Toronto	1920	only	-	May	 2	2:00	1:00	D
-Rule	Toronto	1920	only	-	Sep	26	0:00	0	S
-Rule	Toronto	1921	only	-	May	15	2:00	1:00	D
-Rule	Toronto	1921	only	-	Sep	15	2:00	0	S
-Rule	Toronto	1922	1923	-	May	Sun>=8	2:00	1:00	D
-# Shanks says 1923-09-19; assume it's a typo and that "-16" was meant.
-Rule	Toronto	1922	1926	-	Sep	Sun>=15	2:00	0	S
-Rule	Toronto	1924	1927	-	May	Sun>=1	2:00	1:00	D
-# The 1927-to-1939 rules can be expressed more simply as
-# Rule	Toronto	1927	1937	-	Sep	Sun>=25	2:00	0	S
-# Rule	Toronto	1928	1937	-	Apr	Sun>=25	2:00	1:00	D
-# Rule	Toronto	1938	1940	-	Apr	lastSun	2:00	1:00	D
-# Rule	Toronto	1938	1939	-	Sep	lastSun	2:00	0	S
-# The rules below avoid use of Sun>=25
-# (which pre-2004 versions of zic cannot handle).
-Rule	Toronto	1927	1932	-	Sep	lastSun	2:00	0	S
-Rule	Toronto	1928	1931	-	Apr	lastSun	2:00	1:00	D
-Rule	Toronto	1932	only	-	May	1	2:00	1:00	D
-Rule	Toronto	1933	1940	-	Apr	lastSun	2:00	1:00	D
-Rule	Toronto	1933	only	-	Oct	1	2:00	0	S
-Rule	Toronto	1934	1939	-	Sep	lastSun	2:00	0	S
-Rule	Toronto	1945	1946	-	Sep	lastSun	2:00	0	S
-Rule	Toronto	1946	only	-	Apr	lastSun	2:00	1:00	D
-Rule	Toronto	1947	1949	-	Apr	lastSun	0:00	1:00	D
-Rule	Toronto	1947	1948	-	Sep	lastSun	0:00	0	S
-Rule	Toronto	1949	only	-	Nov	lastSun	0:00	0	S
-Rule	Toronto	1950	1973	-	Apr	lastSun	2:00	1:00	D
-Rule	Toronto	1950	only	-	Nov	lastSun	2:00	0	S
-Rule	Toronto	1951	1956	-	Sep	lastSun	2:00	0	S
-# Shanks says Toronto ended DST a week early in 1971, namely on 1971-10-24,
-# but Mark Brader wrote (2003-05-31) that he checked the 1971-10-30 issue
-# of the Toronto Star, and it said that DST ended 1971-10-31 as usual.
-Rule	Toronto	1957	1973	-	Oct	lastSun	2:00	0	S
-
-# From Paul Eggert (2003-07-27):
-# Willett (1914-03) writes (p. 17) "In the Cities of Fort William, and
-# Port Arthur, Ontario, the principle of the Bill has been in
-# operation for the past three years, and in the City of Moose Jaw,
-# Saskatchewan, for one year."
-
-# From David Bryan via Tory Tronrud, Director/Curator,
-# Thunder Bay Museum (2003-11-12):
-# There is some suggestion, however, that, by-law or not, daylight
-# savings time was being practiced in Fort William and Port Arthur
-# before 1909.... [I]n 1910, the line between the Eastern and Central
-# Time Zones was permanently moved about two hundred miles west to
-# include the Thunder Bay area....  When Canada adopted daylight
-# savings time in 1916, Fort William and Port Arthur, having done so
-# already, did not change their clocks....  During the Second World
-# War,... [t]he cities agreed to implement DST during the summer
-# months for the remainder of the war years.
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Montreal	-4:54:16 -	LMT	1884
-			-5:00	Mont	E%sT	1918
-			-5:00	Canada	E%sT	1919
-			-5:00	Mont	E%sT	1942 Feb  9 2:00s
-			-5:00	Canada	E%sT	1946
-			-5:00	Mont	E%sT	1974
-			-5:00	Canada	E%sT
-Zone America/Toronto	-5:17:32 -	LMT	1895
-			-5:00	Canada	E%sT	1919
-			-5:00	Toronto	E%sT	1942 Feb  9 2:00s
-			-5:00	Canada	E%sT	1946
-			-5:00	Toronto	E%sT	1974
-			-5:00	Canada	E%sT
-Zone America/Thunder_Bay -5:57:00 -	LMT	1895
-			-6:00	-	CST	1910
-			-5:00	-	EST	1942
-			-5:00	Canada	E%sT	1970
-			-5:00	Mont	E%sT	1973
-			-5:00	-	EST	1974
-			-5:00	Canada	E%sT
-Zone America/Nipigon	-5:53:04 -	LMT	1895
-			-5:00	Canada	E%sT	1940 Sep 29
-			-5:00	1:00	EDT	1942 Feb  9 2:00s
-			-5:00	Canada	E%sT
-Zone America/Rainy_River -6:17:56 -	LMT	1895
-			-6:00	Canada	C%sT	1940 Sep 29
-			-6:00	1:00	CDT	1942 Feb  9 2:00s
-			-6:00	Canada	C%sT
-
-
-# Manitoba
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Winn	1916	only	-	Apr	23	0:00	1:00	D
-Rule	Winn	1916	only	-	Sep	17	0:00	0	S
-Rule	Winn	1918	only	-	Apr	14	2:00	1:00	D
-Rule	Winn	1918	only	-	Oct	31	2:00	0	S
-Rule	Winn	1937	only	-	May	16	2:00	1:00	D
-Rule	Winn	1937	only	-	Sep	26	2:00	0	S
-Rule	Winn	1942	only	-	Feb	 9	2:00	1:00	W # War
-Rule	Winn	1945	only	-	Aug	14	23:00u	1:00	P # Peace
-Rule	Winn	1945	only	-	Sep	lastSun	2:00	0	S
-Rule	Winn	1946	only	-	May	12	2:00	1:00	D
-Rule	Winn	1946	only	-	Oct	13	2:00	0	S
-Rule	Winn	1947	1949	-	Apr	lastSun	2:00	1:00	D
-Rule	Winn	1947	1949	-	Sep	lastSun	2:00	0	S
-Rule	Winn	1950	only	-	May	 1	2:00	1:00	D
-Rule	Winn	1950	only	-	Sep	30	2:00	0	S
-Rule	Winn	1951	1960	-	Apr	lastSun	2:00	1:00	D
-Rule	Winn	1951	1958	-	Sep	lastSun	2:00	0	S
-Rule	Winn	1959	only	-	Oct	lastSun	2:00	0	S
-Rule	Winn	1960	only	-	Sep	lastSun	2:00	0	S
-Rule	Winn	1963	only	-	Apr	lastSun	2:00	1:00	D
-Rule	Winn	1963	only	-	Sep	22	2:00	0	S
-Rule	Winn	1966	1986	-	Apr	lastSun	2:00	1:00	D
-Rule	Winn	1966	1986	-	Oct	lastSun	2:00	0	S
-Rule	Winn	1987	max	-	Apr	Sun>=1	2:00	1:00	D
-# From Paul Eggert (2000-10-02):
-# INMS (2000-09-12) says that, since 1988 at least, Manitoba switches from
-# DST at 03:00 local time.  For now, assume it started in 1987.
-Rule	Winn	1987	max	-	Oct	lastSun	2:00s	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Winnipeg	-6:28:36 -	LMT	1887 Jul 16
-			-6:00	Winn	C%sT
-
-
-# Saskatchewan
-
-# From Mark Brader (2003-07-26):
-# The first actual adoption of DST in Canada was at the municipal
-# level.  As the [Toronto] Star put it (1912-06-07), "While people
-# elsewhere have long been talking of legislation to save daylight,
-# the city of Moose Jaw [Saskatchewan] has acted on its own hook."
-# DST in Moose Jaw began on Saturday, 1912-06-01 (no time mentioned:
-# presumably late evening, as below), and would run until "the end of
-# the summer".  The discrepancy between municipal time and railroad
-# time was noted.
-
-# From Paul Eggert (2003-07-27):
-# Willett (1914-03) notes that DST "has been in operation ... in the
-# City of Moose Jaw, Saskatchewan, for one year."
-
-# From Paul Eggert (2000-10-02):
-# Shanks writes that since 1970 most of this region has been like Regina.
-# Some western towns (e.g. Swift Current) switched from MST/MDT to CST in 1972.
-# Other western towns (e.g. Lloydminster) are like Edmonton.
-# Matthews and Vincent (1998) write that Denare Beach and Creighton
-# are like Winnipeg, in violation of Saskatchewan law.
-
-# From W. Jones (1992-11-06):
-# The. . .below is based on information I got from our law library, the
-# provincial archives, and the provincial Community Services department.
-# A precise history would require digging through newspaper archives, and
-# since you didn't say what you wanted, I didn't bother.
-#
-# Saskatchewan is split by a time zone meridian (105W) and over the years
-# the boundary became pretty ragged as communities near it reevaluated
-# their affiliations in one direction or the other.  In 1965 a provincial
-# referendum favoured legislating common time practices.
-#
-# On 15 April 1966 the Time Act (c. T-14, Revised Statutes of
-# Saskatchewan 1978) was proclaimed, and established that the eastern
-# part of Saskatchewan would use CST year round, that districts in
-# northwest Saskatchewan would by default follow CST but could opt to
-# follow Mountain Time rules (thus 1 hour difference in the winter and
-# zero in the summer), and that districts in southwest Saskatchewan would
-# by default follow MT but could opt to follow CST.
-#
-# It took a few years for the dust to settle (I know one story of a town
-# on one time zone having its school in another, such that a mom had to
-# serve her family lunch in two shifts), but presently it seems that only
-# a few towns on the border with Alberta (e.g. Lloydminster) follow MT
-# rules any more; all other districts appear to have used CST year round
-# since sometime in the 1960s.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Regina	1918	only	-	Apr	14	2:00	1:00	D
-Rule	Regina	1918	only	-	Oct	31	2:00	0	S
-Rule	Regina	1930	1934	-	May	Sun>=1	0:00	1:00	D
-Rule	Regina	1930	1934	-	Oct	Sun>=1	0:00	0	S
-Rule	Regina	1937	1941	-	Apr	Sun>=8	0:00	1:00	D
-Rule	Regina	1937	only	-	Oct	Sun>=8	0:00	0	S
-Rule	Regina	1938	only	-	Oct	Sun>=1	0:00	0	S
-Rule	Regina	1939	1941	-	Oct	Sun>=8	0:00	0	S
-Rule	Regina	1942	only	-	Feb	 9	2:00	1:00	W # War
-Rule	Regina	1945	only	-	Aug	14	23:00u	1:00	P # Peace
-Rule	Regina	1945	only	-	Sep	lastSun	2:00	0	S
-Rule	Regina	1946	only	-	Apr	Sun>=8	2:00	1:00	D
-Rule	Regina	1946	only	-	Oct	Sun>=8	2:00	0	S
-Rule	Regina	1947	1957	-	Apr	lastSun	2:00	1:00	D
-Rule	Regina	1947	1957	-	Sep	lastSun	2:00	0	S
-Rule	Regina	1959	only	-	Apr	lastSun	2:00	1:00	D
-Rule	Regina	1959	only	-	Oct	lastSun	2:00	0	S
-#
-Rule	Swift	1957	only	-	Apr	lastSun	2:00	1:00	D
-Rule	Swift	1957	only	-	Oct	lastSun	2:00	0	S
-Rule	Swift	1959	1961	-	Apr	lastSun	2:00	1:00	D
-Rule	Swift	1959	only	-	Oct	lastSun	2:00	0	S
-Rule	Swift	1960	1961	-	Sep	lastSun	2:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Regina	-6:58:36 -	LMT	1905 Sep
-			-7:00	Regina	M%sT	1960 Apr lastSun 2:00
-			-6:00	-	CST
-Zone America/Swift_Current -7:11:20 -	LMT	1905 Sep
-			-7:00	Canada	M%sT	1946 Apr lastSun 2:00
-			-7:00	Regina	M%sT	1950
-			-7:00	Swift	M%sT	1972 Apr lastSun 2:00
-			-6:00	-	CST
-
-
-# Alberta
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Edm	1918	1919	-	Apr	Sun>=8	2:00	1:00	D
-Rule	Edm	1918	only	-	Oct	31	2:00	0	S
-Rule	Edm	1919	only	-	May	27	2:00	0	S
-Rule	Edm	1920	1923	-	Apr	lastSun	2:00	1:00	D
-Rule	Edm	1920	only	-	Oct	lastSun	2:00	0	S
-Rule	Edm	1921	1923	-	Sep	lastSun	2:00	0	S
-Rule	Edm	1942	only	-	Feb	 9	2:00	1:00	W # War
-Rule	Edm	1945	only	-	Aug	14	23:00u	1:00	P # Peace
-Rule	Edm	1945	only	-	Sep	lastSun	2:00	0	S
-Rule	Edm	1947	only	-	Apr	lastSun	2:00	1:00	D
-Rule	Edm	1947	only	-	Sep	lastSun	2:00	0	S
-Rule	Edm	1967	only	-	Apr	lastSun	2:00	1:00	D
-Rule	Edm	1967	only	-	Oct	lastSun	2:00	0	S
-Rule	Edm	1969	only	-	Apr	lastSun	2:00	1:00	D
-Rule	Edm	1969	only	-	Oct	lastSun	2:00	0	S
-Rule	Edm	1972	1986	-	Apr	lastSun	2:00	1:00	D
-Rule	Edm	1972	max	-	Oct	lastSun	2:00	0	S
-Rule	Edm	1987	max	-	Apr	Sun>=1	2:00	1:00	D
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Edmonton	-7:33:52 -	LMT	1906 Sep
-			-7:00	Edm	M%sT
-
-
-# British Columbia
-
-# From Paul Eggert (2000-10-02):
-# Shanks writes that since 1970 most of this region has been like Vancouver.
-# Dawson Creek uses MST.  Much of east BC is like Edmonton.
-# Matthews and Vincent (1998) write that Creston is like Dawson Creek.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Vanc	1918	only	-	Apr	14	2:00	1:00	D
-Rule	Vanc	1918	only	-	Oct	31	2:00	0	S
-Rule	Vanc	1942	only	-	Feb	 9	2:00	1:00	W # War
-Rule	Vanc	1945	only	-	Aug	14	23:00u	1:00	P # Peace
-Rule	Vanc	1945	only	-	Sep	30	2:00	0	S
-Rule	Vanc	1946	1986	-	Apr	lastSun	2:00	1:00	D
-Rule	Vanc	1946	only	-	Oct	13	2:00	0	S
-Rule	Vanc	1947	1961	-	Sep	lastSun	2:00	0	S
-Rule	Vanc	1962	max	-	Oct	lastSun	2:00	0	S
-Rule	Vanc	1987	max	-	Apr	Sun>=1	2:00	1:00	D
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Vancouver	-8:12:28 -	LMT	1884
-			-8:00	Vanc	P%sT
-Zone America/Dawson_Creek -8:00:56 -	LMT	1884
-			-8:00	Canada	P%sT	1947
-			-8:00	Vanc	P%sT	1972 Aug 30 2:00
-			-7:00	-	MST
-
-
-# Northwest Territories, Nunavut, Yukon
-
-# From Paul Eggert (1999-10-29):
-# Dawson switched to PST in 1973.  Inuvik switched to MST in 1979.
-# Mathew Englander (1996-10-07) gives the following refs:
-#	* 1967. Paragraph 28(34)(g) of the Interpretation Act, S.C. 1967-68,
-#	c. 7 defines Yukon standard time as UTC-9.  This is still valid;
-#	see Interpretation Act, R.S.C. 1985, c. I-21, s. 35(1).
-#	* C.O. 1973/214 switched Yukon to PST on 1973-10-28 00:00.
-#	* O.I.C. 1980/02 established DST.
-#	* O.I.C. 1987/056 changed DST to Apr firstSun 2:00 to Oct lastSun 2:00.
-# Shanks says Yukon's 1973-10-28 switch was at 2:00; go with Englander.
-
-# From Rives McDow (1999-09-04):
-# Nunavut ... moved ... to incorporate the whole territory into one time zone.
-# <a href="http://www.nunatsiaq.com/nunavut/nvt90903_13.html">
-# Nunavut moves to single time zone Oct. 31
-# </a>
-#
-# From Antoine Leca (1999-09-06):
-# We then need to create a new timezone for the Kitikmeot region of Nunavut
-# to differentiate it from the Yellowknife region.
-
-# From Paul Eggert (1999-09-20):
-# <a href="http://www.nunavut.com/basicfacts/english/basicfacts_1territory.html">
-# Basic Facts: The New Territory
-# </a> (1999) reports that Pangnirtung operates on eastern time,
-# and that Coral Harbour does not observe DST.  We don't know when
-# Pangnirtung switched to eastern time; we'll guess 1995.
-
-# From Rives McDow (1999-11-08):
-# On October 31, when the rest of Nunavut went to Central time,
-# Pangnirtung wobbled.  Here is the result of their wobble:
-#
-# The following businesses and organizations in Pangnirtung use Central Time:
-#
-#	First Air, Power Corp, Nunavut Construction, Health Center, RCMP,
-#	Eastern Arctic National Parks, A & D Specialist
-#
-# The following businesses and organizations in Pangnirtung use Eastern Time:
-#
-#	Hamlet office, All other businesses, Both schools, Airport operator
-#
-# This has made for an interesting situation there, which warranted the news.
-# No one there that I spoke with seems concerned, or has plans to
-# change the local methods of keeping time, as it evidently does not
-# really interfere with any activities or make things difficult locally.
-# They plan to celebrate New Year's turn-over twice, one hour apart,
-# so it appears that the situation will last at least that long.
-# The Nunavut Intergovernmental Affairs hopes that they will "come to
-# their senses", but the locals evidently don't see any problem with
-# the current state of affairs.
-
-# From Michaela Rodrigue, writing in the
-# <a href="http://www.nunatsiaq.com/archives/nunavut991130/nvt91119_17.html">
-# Nunatsiaq News (1999-11-19)</a>:
-# Clyde River, Pangnirtung and Sanikiluaq now operate with two time zones,
-# central - or Nunavut time - for government offices, and eastern time
-# for municipal offices and schools....  Igloolik [was similar but then]
-# made the switch to central time on Saturday, Nov. 6.
-
-# From Paul Eggert (2000-10-02):
-# Matthews and Vincent (1998) say the following, but we lack histories
-# for these potential new Zones.
-#
-# The Canadian Forces station at Alert uses Eastern Time while the
-# handful of residents at the Eureka weather station [in the Central
-# zone] skip daylight savings.  Baffin Island, which is crossed by the
-# Central, Eastern and Atlantic Time zones only uses Eastern Time.
-# Gjoa Haven, Taloyoak and Pelly Bay all use Mountain instead of
-# Central Time and Southampton Island [in the Central zone] is not
-# required to use daylight savings.
-
-# From
-# <a href="http://www.nunatsiaq.com/archives/nunavut001130/nvt21110_02.html">
-# Nunavut now has two time zones
-# </a> (2000-11-10):
-# The Nunavut government would allow its employees in Kugluktuk and
-# Cambridge Bay to operate on central time year-round, putting them
-# one hour behind the rest of Nunavut for six months during the winter.
-# At the end of October the two communities had rebelled against
-# Nunavut's unified time zone, refusing to shift to eastern time with
-# the rest of the territory for the winter.  Cambridge Bay remained on
-# central time, while Kugluktuk, even farther west, reverted to
-# mountain time, which they had used before the advent of Nunavut's
-# unified time zone in 1999.
-#
-# From Rives McDow (2001-01-20), quoting the Nunavut government:
-# The preceding decision came into effect at midnight, Saturday Nov 4, 2000.
-
-# From Paul Eggert (2000-12-04):
-# Let's just keep track of the official times for now.
-
-# From Rives McDow (2001-03-07):
-# The premier of Nunavut has issued a ministerial statement advising
-# that effective 2001-04-01, the territory of Nunavut will revert
-# back to three time zones (mountain, central, and eastern).  Of the
-# cities in Nunavut, Coral Harbor is the only one that I know of that
-# has said it will not observe dst, staying on EST year round.  I'm
-# checking for more info, and will get back to you if I come up with
-# more.
-# [Also see <http://www.nunatsiaq.com/nunavut/nvt10309_06.html> (2001-03-09).]
-
-# From Gwillim Law (2005-05-21):
-# According to maps at
-# http://inms-ienm.nrc-cnrc.gc.ca/images/time_services/TZ01SWE.jpg
-# http://inms-ienm.nrc-cnrc.gc.ca/images/time_services/TZ01SSE.jpg
-# (both dated 2003), and
-# http://www.canadiangeographic.ca/Magazine/SO98/geomap.asp
-# (from a 1998 Canadian Geographic article), the de facto and de jure time
-# for Southampton Island (at the north end of Hudson Bay) is UTC-5 all year
-# round.  Using Google, it's easy to find other websites that confirm this.
-# I wasn't able to find how far back this time regimen goes, but since it
-# predates the creation of Nunavut, it probably goes back many years....
-# The Inuktitut name of Coral Harbour is Sallit, but it's rarely used.
-#
-# From Paul Eggert (2005-07-26):
-# For lack of better information, assume that Southampton Island observed
-# daylight saving only during wartime.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	NT_YK	1918	only	-	Apr	14	2:00	1:00	D
-Rule	NT_YK	1918	only	-	Oct	27	2:00	0	S
-Rule	NT_YK	1919	only	-	May	25	2:00	1:00	D
-Rule	NT_YK	1919	only	-	Nov	 1	0:00	0	S
-Rule	NT_YK	1942	only	-	Feb	 9	2:00	1:00	W # War
-Rule	NT_YK	1945	only	-	Aug	14	23:00u	1:00	P # Peace
-Rule	NT_YK	1945	only	-	Sep	30	2:00	0	S
-Rule	NT_YK	1965	only	-	Apr	lastSun	0:00	2:00	DD
-Rule	NT_YK	1965	only	-	Oct	lastSun	2:00	0	S
-Rule	NT_YK	1980	1986	-	Apr	lastSun	2:00	1:00	D
-Rule	NT_YK	1980	max	-	Oct	lastSun	2:00	0	S
-Rule	NT_YK	1987	max	-	Apr	Sun>=1	2:00	1:00	D
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Pangnirtung -4:22:56 -	LMT	1884
-			-4:00	NT_YK	A%sT	1995 Apr Sun>=1 2:00
-			-5:00	Canada	E%sT	1999 Oct 31 2:00
-			-6:00	Canada	C%sT	2000 Oct 29 2:00
-			-5:00	Canada	E%sT
-Zone America/Iqaluit	-4:33:52 -	LMT	1884 # Frobisher Bay before 1987
-			-5:00	NT_YK	E%sT	1999 Oct 31 2:00
-			-6:00	Canada	C%sT	2000 Oct 29 2:00
-			-5:00	Canada	E%sT
-Zone America/Coral_Harbour -5:32:40 -	LMT	1884
-			-5:00	NT_YK	E%sT	1946
-			-5:00	-	EST
-Zone America/Rankin_Inlet -6:08:40 -	LMT	1884
-			-6:00	NT_YK	C%sT	2000 Oct 29 2:00
-			-5:00	-	EST	2001 Apr  1 3:00
-			-6:00	Canada	C%sT
-Zone America/Cambridge_Bay -7:00:20 -	LMT	1884
-			-7:00	NT_YK	M%sT	1999 Oct 31 2:00
-			-6:00	Canada	C%sT	2000 Oct 29 2:00
-			-5:00	-	EST	2000 Nov  5 0:00
-			-6:00	-	CST	2001 Apr  1 3:00
-			-7:00	Canada	M%sT
-Zone America/Yellowknife -7:37:24 -	LMT	1884
-			-7:00	NT_YK	M%sT
-Zone America/Inuvik	-8:54:00 -	LMT	1884
-			-8:00	NT_YK	P%sT	1979 Apr lastSun 2:00
-			-7:00	NT_YK	M%sT
-Zone America/Whitehorse	-9:00:12 -	LMT	1900 Aug 20
-			-9:00	NT_YK	Y%sT	1966 Jul 1 2:00
-			-8:00	NT_YK	P%sT
-Zone America/Dawson	-9:17:40 -	LMT	1900 Aug 20
-			-9:00	NT_YK	Y%sT	1973 Oct 28 0:00
-			-8:00	NT_YK	P%sT
-
-
-###############################################################################
-
-# Mexico
-
-# From Paul Eggert (2001-03-05):
-# The Investigation and Analysis Service of the
-# Mexican Library of Congress (MLoC) has published a
-# <a href="http://www.cddhcu.gob.mx/bibliot/publica/inveyana/polisoc/horver/">
-# history of Mexican local time (in Spanish)
-# </a>.
-#
-# Here are the discrepancies between Shanks and the MLoC.
-# (In all cases we go with the MLoC.)
-# Shanks reports that Baja was at -8:00 in 1922/1923.
-# Shanks says the 1930 transition in Baja was 1930-11-16.
-# Shanks reports no DST during summer 1931.
-# Shanks reports a transition at 1932-03-30 23:00, not 1932-04-01.
-# Shanks does not report transitions for Baja in 1945 or 1948.
-# Shanks reports southern Mexico transitions on 1981-12-01, not 12-23.
-# Shanks says Quintana Roo switched to -6:00 on 1982-12-02, and to -5:00
-# on 1997-10-26 at 02:00.
-
-# From Gwillim Law (2001-02-20):
-# There are some other discrepancies between the Decrees page and the
-# tz database.  I think they can best be explained by supposing that
-# the researchers who prepared the Decrees page failed to find some of
-# the relevant documents.
-
-# From Paul Eggert (2000-07-26):
-# Shanks gives 1942-04-01 instead of 1942-04-24, and omits the 1981
-# and 1988 DST experiments.  Go with spin.com.mx.
-
-# From Alan Perry (1996-02-15):
-# A guy from our Mexico subsidiary finally found the Presidential Decree
-# outlining the timezone changes in Mexico.
-#
-# ------------- Begin Forwarded Message -------------
-#
-# I finally got my hands on the Official Presidential Decree that sets up the
-# rules for the DST changes. The rules are:
-#
-# 1. The country is divided in 3 timezones:
-#    - Baja California Norte (the Mexico/BajaNorte TZ)
-#    - Baja California Sur, Nayarit, Sinaloa and Sonora (the Mexico/BajaSur TZ)
-#    - The rest of the country (the Mexico/General TZ)
-#
-# 2. From the first Sunday in April at 2:00 AM to the last Sunday in October
-#    at 2:00 AM, the times in each zone are as follows:
-#    BajaNorte: GMT+7
-#    BajaSur:   GMT+6
-#    General:   GMT+5
-#
-# 3. The rest of the year, the times are as follows:
-#    BajaNorte: GMT+8
-#    BajaSur:   GMT+7
-#    General:   GMT+6
-#
-# The Decree was published in Mexico's Official Newspaper on January 4th.
-#
-# -------------- End Forwarded Message --------------
-# From Paul Eggert (1996-06-12):
-# For an English translation of the decree, see
-# <a href="http://mexico-travel.com/extra/timezone_eng.html">
-# ``Diario Oficial: Time Zone Changeover'' (1996-01-04).
-# </a>
-
-# From Rives McDow (1998-10-08):
-# The State of Quintana Roo has reverted back to central STD and DST times
-# (i.e. UTC -0600 and -0500 as of 1998-08-02).
-
-# From Rives McDow (2000-01-10):
-# Effective April 4, 1999 at 2:00 AM local time, Sonora changed to the time
-# zone 5 hours from the International Date Line, and will not observe daylight
-# savings time so as to stay on the same time zone as the southern part of
-# Arizona year round.
-
-# From Jesper Norgaard, translating
-# <http://www.reforma.com/nacional/articulo/064327/> (2001-01-17):
-# In Oaxaca, the 55.000 teachers from the Section 22 of the National
-# Syndicate of Education Workers, refuse to apply daylight saving each
-# year, so that the more than 10,000 schools work at normal hour the
-# whole year.
-
-# From Gwillim Law (2001-01-19):
-# <http://www.reforma.com/negocios_y_dinero/articulo/064481/> ... says
-# (translated):...
-# January 17, 2000 - The Energy Secretary, Ernesto Martens, announced
-# that Summer Time will be reduced from seven to five months, starting
-# this year....
-# <http://www.publico.com.mx/scripts/texto3.asp?action=pagina&pag=21&pos=p&secc=naci&date=01/17/2001>
-# [translated], says "summer time will ... take effect on the first Sunday
-# in May, and end on the last Sunday of September.
-
-# From Arthur David Olson (2001-01-25):
-# The 2001-01-24 traditional Washington Post contained the page one
-# story "Timely Issue Divides Mexicans."...
-# http://www.washingtonpost.com/wp-dyn/articles/A37383-2001Jan23.html
-# ... Mexico City Mayor Lopez Obrador "...is threatening to keep
-# Mexico City and its 20 million residents on a different time than
-# the rest of the country..." In particular, Lopez Obrador would abolish
-# observation of Daylight Saving Time.
-
-# <a href="http://www.conae.gob.mx/ahorro/decretohorver2001.html#decre">
-# Official statute published by the Energy Department
-# </a> (2001-02-01) shows Baja and Chihauhua as still using US DST rules,
-# and Sonora with no DST.  This was reported by Jesper Norgaard (2001-02-03).
-
-# From Paul Eggert (2001-03-03):
-#
-# <a href="http://www.latimes.com/news/nation/20010303/t000018766.html">
-# James F. Smith writes in today's LA Times
-# </a>
-# * Sonora will continue to observe standard time.
-# * Last week Mexico City's mayor Andres Manuel Lopez Obrador decreed that
-#   the Federal District will not adopt DST.
-# * 4 of 16 district leaders announced they'll ignore the decree.
-# * The decree does not affect federal-controlled facilities including
-#   the airport, banks, hospitals, and schools.
-#
-# For now we'll assume that the Federal District will bow to federal rules.
-
-# From Jesper Norgaard (2001-04-01):
-# I found some references to the Mexican application of daylight
-# saving, which modifies what I had already sent you, stating earlier
-# that a number of northern Mexican states would go on daylight
-# saving. The modification reverts this to only cover Baja California
-# (Norte), while all other states (except Sonora, who has no daylight
-# saving all year) will follow the original decree of president
-# Vicente Fox, starting daylight saving May 6, 2001 and ending
-# September 30, 2001.
-# References: "Diario de Monterrey" <www.diariodemonterrey.com/index.asp>
-# Palabra <http://palabra.infosel.com/010331/primera/ppri3101.pdf> (2001-03-31)
-
-# From Reuters (2001-09-04):
-# Mexico's Supreme Court on Tuesday declared that daylight savings was
-# unconstitutional in Mexico City, creating the possibility the
-# capital will be in a different time zone from the rest of the nation
-# next year....  The Supreme Court's ruling takes effect at 2:00
-# a.m. (0800 GMT) on Sept. 30, when Mexico is scheduled to revert to
-# standard time. "This is so residents of the Federal District are not
-# subject to unexpected time changes," a statement from the court said.
-
-# From Jesper Norgaard Welen (2002-03-12):
-# ... consulting my local grocery store(!) and my coworkers, they all insisted
-# that a new decision had been made to reinstate US style DST in Mexico....
-# http://www.conae.gob.mx/ahorro/horaver2001_m1_2002.html (2002-02-20)
-# confirms this.  Sonora as usual is the only state where DST is not applied.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Mexico	1939	only	-	Feb	5	0:00	1:00	D
-Rule	Mexico	1939	only	-	Jun	25	0:00	0	S
-Rule	Mexico	1940	only	-	Dec	9	0:00	1:00	D
-Rule	Mexico	1941	only	-	Apr	1	0:00	0	S
-Rule	Mexico	1943	only	-	Dec	16	0:00	1:00	W # War
-Rule	Mexico	1944	only	-	May	1	0:00	0	S
-Rule	Mexico	1950	only	-	Feb	12	0:00	1:00	D
-Rule	Mexico	1950	only	-	Jul	30	0:00	0	S
-Rule	Mexico	1996	2000	-	Apr	Sun>=1	2:00	1:00	D
-Rule	Mexico	1996	2000	-	Oct	lastSun	2:00	0	S
-Rule	Mexico	2001	only	-	May	Sun>=1	2:00	1:00	D
-Rule	Mexico	2001	only	-	Sep	lastSun	2:00	0	S
-Rule	Mexico	2002	max	-	Apr	Sun>=1	2:00	1:00	D
-Rule	Mexico	2002	max	-	Oct	lastSun	2:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-# Quintana Roo
-Zone America/Cancun	-5:47:04 -	LMT	1922 Jan  1  0:12:56
-			-6:00	-	CST	1981 Dec 23
-			-5:00	Mexico	E%sT	1998 Aug  2  2:00
-			-6:00	Mexico	C%sT
-# Campeche, Yucatan
-Zone America/Merida	-5:58:28 -	LMT	1922 Jan  1  0:01:32
-			-6:00	-	CST	1981 Dec 23
-			-5:00	-	EST	1982 Dec  2
-			-6:00	Mexico	C%sT
-# Coahuila, Durango, Nuevo Leon, Tamaulipas
-Zone America/Monterrey	-6:41:16 -	LMT	1921 Dec 31 23:18:44
-			-6:00	-	CST	1988
-			-6:00	US	C%sT	1989
-			-6:00	Mexico	C%sT
-# Central Mexico
-Zone America/Mexico_City -6:36:36 -	LMT	1922 Jan  1  0:23:24
-			-7:00	-	MST	1927 Jun 10 23:00
-			-6:00	-	CST	1930 Nov 15
-			-7:00	-	MST	1931 May  1 23:00
-			-6:00	-	CST	1931 Oct
-			-7:00	-	MST	1932 Apr  1
-			-6:00	Mexico	C%sT	2001 Sep 30 02:00
-			-6:00	-	CST	2002 Feb 20
-			-6:00	Mexico	C%sT
-# Chihuahua
-Zone America/Chihuahua	-7:04:20 -	LMT	1921 Dec 31 23:55:40
-			-7:00	-	MST	1927 Jun 10 23:00
-			-6:00	-	CST	1930 Nov 15
-			-7:00	-	MST	1931 May  1 23:00
-			-6:00	-	CST	1931 Oct
-			-7:00	-	MST	1932 Apr  1
-			-6:00	-	CST	1996
-			-6:00	Mexico	C%sT	1998
-			-6:00	-	CST	1998 Apr Sun>=1 3:00
-			-7:00	Mexico	M%sT
-# Sonora
-Zone America/Hermosillo	-7:23:52 -	LMT	1921 Dec 31 23:36:08
-			-7:00	-	MST	1927 Jun 10 23:00
-			-6:00	-	CST	1930 Nov 15
-			-7:00	-	MST	1931 May  1 23:00
-			-6:00	-	CST	1931 Oct
-			-7:00	-	MST	1932 Apr  1
-			-6:00	-	CST	1942 Apr 24
-			-7:00	-	MST	1949 Jan 14
-			-8:00	-	PST	1970
-			-7:00	Mexico	M%sT	1999
-			-7:00	-	MST
-# Baja California Sur, Nayarit, Sinaloa
-Zone America/Mazatlan	-7:05:40 -	LMT	1921 Dec 31 23:54:20
-			-7:00	-	MST	1927 Jun 10 23:00
-			-6:00	-	CST	1930 Nov 15
-			-7:00	-	MST	1931 May  1 23:00
-			-6:00	-	CST	1931 Oct
-			-7:00	-	MST	1932 Apr  1
-			-6:00	-	CST	1942 Apr 24
-			-7:00	-	MST	1949 Jan 14
-			-8:00	-	PST	1970
-			-7:00	Mexico	M%sT
-# Baja California
-Zone America/Tijuana	-7:48:04 -	LMT	1922 Jan  1  0:11:56
-			-7:00	-	MST	1924
-			-8:00	-	PST	1927 Jun 10 23:00
-			-7:00	-	MST	1930 Nov 15
-			-8:00	-	PST	1931 Apr  1
-			-8:00	1:00	PDT	1931 Sep 30
-			-8:00	-	PST	1942 Apr 24
-			-8:00	1:00	PWT	1945 Nov 12
-			-8:00	-	PST	1948 Apr  5
-			-8:00	1:00	PDT	1949 Jan 14
-			-8:00	-	PST	1954
-			-8:00	CA	P%sT	1961
-			-8:00	-	PST	1976
-			-8:00	US	P%sT	1996
-			-8:00	Mexico	P%sT	2001
-			-8:00	US	P%sT	2002 Feb 20
-			-8:00	Mexico	P%sT
-# From Paul Eggert (2001-03-05):
-# Formerly there was an America/Ensenada zone, which differed from
-# America/Tijuana only in that it did not observe DST from 1976
-# through 1995.  This was as per Shanks.  However, Guy Harris reports
-# that the 1987 OAG says "Only Ensenada, Mexicale, San Felipe and
-# Tijuana observe DST," which contradicts Shanks but does imply that
-# DST-observance was a town-by-town matter back then.  This concerns
-# data after 1970 so most likely there should be at least one Zone
-# other than America/Tijuana for Baja, but it's not clear yet what its
-# name or contents should be.
-#
-# Revillagigedo Is
-# no information
-
-###############################################################################
-
-# Anguilla
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Anguilla	-4:12:16 -	LMT	1912 Mar 2
-			-4:00	-	AST
-
-# Antigua and Barbuda
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Antigua	-4:07:12 -	LMT	1912 Mar 2
-			-5:00	-	EST	1951
-			-4:00	-	AST
-
-# Bahamas
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Bahamas	1964	max	-	Oct	lastSun	2:00	0	S
-Rule	Bahamas	1964	1986	-	Apr	lastSun	2:00	1:00	D
-Rule	Bahamas	1987	max	-	Apr	Sun>=1	2:00	1:00	D
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Nassau	-5:09:24 -	LMT	1912 Mar 2
-			-5:00	Bahamas	E%sT
-
-# Barbados
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Barb	1977	only	-	Jun	12	2:00	1:00	D
-Rule	Barb	1977	1978	-	Oct	Sun>=1	2:00	0	S
-Rule	Barb	1978	1980	-	Apr	Sun>=15	2:00	1:00	D
-Rule	Barb	1979	only	-	Sep	30	2:00	0	S
-Rule	Barb	1980	only	-	Sep	25	2:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Barbados	-3:58:28 -	LMT	1924		# Bridgetown
-			-3:58:28 -	BMT	1932	  # Bridgetown Mean Time
-			-4:00	Barb	A%sT
-
-# Belize
-# Whitman entirely disagrees with Shanks; go with Shanks.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Belize	1918	1942	-	Oct	Sun>=2	0:00	0:30	HD
-Rule	Belize	1919	1943	-	Feb	Sun>=9	0:00	0	S
-Rule	Belize	1973	only	-	Dec	 5	0:00	1:00	D
-Rule	Belize	1974	only	-	Feb	 9	0:00	0	S
-Rule	Belize	1982	only	-	Dec	18	0:00	1:00	D
-Rule	Belize	1983	only	-	Feb	12	0:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Belize	-5:52:48 -	LMT	1912 Apr
-			-6:00	Belize	C%sT
-
-# Bermuda
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Atlantic/Bermuda	-4:19:04 -	LMT	1930 Jan  1 2:00    # Hamilton
-			-4:00	-	AST	1974 Apr 28 2:00
-			-4:00	Bahamas	A%sT
-
-# Cayman Is
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Cayman	-5:25:32 -	LMT	1890		# Georgetown
-			-5:07:12 -	KMT	1912 Feb    # Kingston Mean Time
-			-5:00	-	EST
-
-# Costa Rica
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	CR	1979	1980	-	Feb	lastSun	0:00	1:00	D
-Rule	CR	1979	1980	-	Jun	Sun>=1	0:00	0	S
-Rule	CR	1991	1992	-	Jan	Sat>=15	0:00	1:00	D
-# IATA SSIM (1991-09) says the following was at 1:00; go with Shanks.
-Rule	CR	1991	only	-	Jul	 1	0:00	0	S
-Rule	CR	1992	only	-	Mar	15	0:00	0	S
-# There are too many San Joses elsewhere, so we'll use `Costa Rica'.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Costa_Rica	-5:36:20 -	LMT	1890		# San Jose
-			-5:36:20 -	SJMT	1921 Jan 15 # San Jose Mean Time
-			-6:00	CR	C%sT
-# Coco
-# no information; probably like America/Costa_Rica
-
-# Cuba
-
-# From Arthur David Olson (1999-03-29):
-# The 1999-03-28 exhibition baseball game held in Havana, Cuba, between
-# the Cuban National Team and the Baltimore Orioles was carried live on
-# the Orioles Radio Network, including affiliate WTOP in Washington, DC.
-# During the game, play-by-play announcer Jim Hunter noted that
-# "We'll be losing two hours of sleep...Cuba switched to Daylight Saving
-# Time today."  (The "two hour" remark referred to losing one hour of
-# sleep on 1999-03-28--when the announcers were in Cuba as it switched
-# to DST--and one more hour on 1999-04-04--when the announcers will have
-# returned to Baltimore, which switches on that date.)
-
-# From Evert van der Veer via Steffen Thorsen (2004-10-28):
-# Cuba is not going back to standard time this year.
-# From Paul Eggert (2004-10-28):
-# http://www.granma.cu/ingles/2004/septiembre/juev30/41medid-i.html
-# says that it's due to a problem at the Antonio Guiteras
-# thermoelectric plant, and says "This October there will be no return
-# to normal hours (after daylight saving time)".
-# For now, let's assume that it's a one-year temporary measure.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Cuba	1928	only	-	Jun	10	0:00	1:00	D
-Rule	Cuba	1928	only	-	Oct	10	0:00	0	S
-Rule	Cuba	1940	1942	-	Jun	Sun>=1	0:00	1:00	D
-Rule	Cuba	1940	1942	-	Sep	Sun>=1	0:00	0	S
-Rule	Cuba	1945	1946	-	Jun	Sun>=1	0:00	1:00	D
-Rule	Cuba	1945	1946	-	Sep	Sun>=1	0:00	0	S
-Rule	Cuba	1965	only	-	Jun	1	0:00	1:00	D
-Rule	Cuba	1965	only	-	Sep	30	0:00	0	S
-Rule	Cuba	1966	only	-	May	29	0:00	1:00	D
-Rule	Cuba	1966	only	-	Oct	2	0:00	0	S
-Rule	Cuba	1967	only	-	Apr	8	0:00	1:00	D
-Rule	Cuba	1967	1968	-	Sep	Sun>=8	0:00	0	S
-Rule	Cuba	1968	only	-	Apr	14	0:00	1:00	D
-Rule	Cuba	1969	1977	-	Apr	lastSun	0:00	1:00	D
-Rule	Cuba	1969	1971	-	Oct	lastSun	0:00	0	S
-Rule	Cuba	1972	1974	-	Oct	8	0:00	0	S
-Rule	Cuba	1975	1977	-	Oct	lastSun	0:00	0	S
-Rule	Cuba	1978	only	-	May	7	0:00	1:00	D
-Rule	Cuba	1978	1990	-	Oct	Sun>=8	0:00	0	S
-Rule	Cuba	1979	1980	-	Mar	Sun>=15	0:00	1:00	D
-Rule	Cuba	1981	1985	-	May	Sun>=5	0:00	1:00	D
-Rule	Cuba	1986	1989	-	Mar	Sun>=14	0:00	1:00	D
-Rule	Cuba	1990	1997	-	Apr	Sun>=1	0:00	1:00	D
-Rule	Cuba	1991	1995	-	Oct	Sun>=8	0:00s	0	S
-Rule	Cuba	1996	only	-	Oct	 6	0:00s	0	S
-Rule	Cuba	1997	only	-	Oct	12	0:00s	0	S
-Rule	Cuba	1998	1999	-	Mar	lastSun	0:00s	1:00	D
-Rule	Cuba	1998	2003	-	Oct	lastSun	0:00s	0	S
-Rule	Cuba	2000	max	-	Apr	Sun>=1	0:00s	1:00	D
-Rule	Cuba	2005	max	-	Oct	lastSun	0:00s	0	S
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Havana	-5:29:28 -	LMT	1890
-			-5:29:36 -	HMT	1925 Jul 19 12:00 # Havana MT
-			-5:00	Cuba	C%sT
-
-# Dominica
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Dominica	-4:05:36 -	LMT	1911 Jul 1 0:01		# Roseau
-			-4:00	-	AST
-
-# Dominican Republic
-
-# From Steffen Thorsen (2000-10-30):
-# Enrique Morales reported to me that the Dominican Republic has changed the
-# time zone to Eastern Standard Time as of Sunday 29 at 2 am....
-# http://www.listin.com.do/antes/261000/republica/princi.html
-
-# From Paul Eggert (2000-12-04):
-# That URL (2000-10-26, in Spanish) says they planned to use US-style DST.
-
-# From Rives McDow (2000-12-01):
-# Dominican Republic changed its mind and presidential decree on Tuesday,
-# November 28, 2000, with a new decree.  On Sunday, December 3 at 1:00 AM the
-# Dominican Republic will be reverting to 8 hours from the International Date
-# Line, and will not be using DST in the foreseeable future.  The reason they
-# decided to use DST was to be in synch with Puerto Rico, who was also going
-# to implement DST.  When Puerto Rico didn't implement DST, the president
-# decided to revert.
-
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	DR	1966	only	-	Oct	30	0:00	1:00	D
-Rule	DR	1967	only	-	Feb	28	0:00	0	S
-Rule	DR	1969	1973	-	Oct	lastSun	0:00	0:30	HD
-Rule	DR	1970	only	-	Feb	21	0:00	0	S
-Rule	DR	1971	only	-	Jan	20	0:00	0	S
-Rule	DR	1972	1974	-	Jan	21	0:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Santo_Domingo -4:39:36 -	LMT	1890
-			-4:40	-	SDMT	1933 Apr  1 12:00 # S. Dom. MT
-			-5:00	DR	E%sT	1974 Oct 27
-			-4:00	-	AST	2000 Oct 29 02:00
-			-5:00	US	E%sT	2000 Dec  3 01:00
-			-4:00	-	AST
-
-# El Salvador
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Salv	1987	1988	-	May	Sun>=1	0:00	1:00	D
-Rule	Salv	1987	1988	-	Sep	lastSun	0:00	0	S
-# There are too many San Salvadors elsewhere, so use America/El_Salvador
-# instead of America/San_Salvador.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/El_Salvador -5:56:48 -	LMT	1921		# San Salvador
-			-6:00	Salv	C%sT
-
-# Grenada
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Grenada	-4:07:00 -	LMT	1911 Jul	# St George's
-			-4:00	-	AST
-
-# Guadeloupe
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Guadeloupe	-4:06:08 -	LMT	1911 Jun 8	# Pointe a Pitre
-			-4:00	-	AST
-
-# Guatemala
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Guat	1973	only	-	Nov	25	0:00	1:00	D
-Rule	Guat	1974	only	-	Feb	24	0:00	0	S
-Rule	Guat	1983	only	-	May	21	0:00	1:00	D
-Rule	Guat	1983	only	-	Sep	22	0:00	0	S
-Rule	Guat	1991	only	-	Mar	23	0:00	1:00	D
-Rule	Guat	1991	only	-	Sep	 7	0:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Guatemala	-6:02:04 -	LMT	1918 Oct 5
-			-6:00	Guat	C%sT
-
-# Haiti
-# From Gwillim Law (2005-04-15):
-# Risto O. Nykanen wrote me that Haiti is now on DST.
-# I searched for confirmation, and I found a
-# <a href="http://www.haitianconsulate.org/time.doc"> press release
-# on the Web page of the Haitian Consulate in Chicago (2005-03-31),
-# </a>.  Translated from French, it says:
-#
-#  "The Prime Minister's Communication Office notifies the public in general
-#   and the press in particular that, following a decision of the Interior
-#   Ministry and the Territorial Collectivities [I suppose that means the
-#   provinces], Haiti will move to Eastern Daylight Time in the night from next
-#   Saturday the 2nd to Sunday the 3rd.
-#
-#  "Consequently, the Prime Minister's Communication Office wishes to inform
-#   the population that the country's clocks will be set forward one hour
-#   starting at midnight.  This provision will hold until the last Saturday in
-#   October 2005.
-#
-#  "Port-au-Prince, March 31, 2005"
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Haiti	1983	only	-	May	8	0:00	1:00	D
-Rule	Haiti	1984	1987	-	Apr	lastSun	0:00	1:00	D
-Rule	Haiti	1983	1987	-	Oct	lastSun	0:00	0	S
-# Shanks says AT is 2:00, but IATA SSIM (1991/1997) says 1:00s.  Go with IATA.
-Rule	Haiti	1988	1997	-	Apr	Sun>=1	1:00s	1:00	D
-Rule	Haiti	1988	1997	-	Oct	lastSun	1:00s	0	S
-Rule	Haiti	2005	only	-	Apr	Sun>=1	0:00	1:00	D
-Rule	Haiti	2005	only	-	Oct	lastSun	0:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Port-au-Prince -4:49:20 -	LMT	1890
-			-4:49	-	PPMT	1917 Jan 24 12:00 # P-a-P MT
-			-5:00	Haiti	E%sT
-
-# Honduras
-# Shanks says 1921 Jan 1; go with Whitman's more precise Apr 1.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Tegucigalpa -5:48:52 -	LMT	1921 Apr
-			-6:00	Salv	C%sT
-#
-# Great Swan I ceded by US to Honduras in 1972
-
-# Jamaica
-
-# From Bob Devine (1988-01-28):
-# Follows US rules.
-
-# From U. S. Naval Observatory (1989-01-19):
-# JAMAICA             5 H  BEHIND UTC
-
-# From Shanks:
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Jamaica	-5:07:12 -	LMT	1890		# Kingston
-			-5:07:12 -	KMT	1912 Feb    # Kingston Mean Time
-			-5:00	-	EST	1974 Apr 28 2:00
-			-5:00	US	E%sT	1984
-			-5:00	-	EST
-
-# Martinique
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Martinique	-4:04:20 -      LMT	1890		# Fort-de-France
-			-4:04:20 -	FFMT	1911 May     # Fort-de-France MT
-			-4:00	-	AST	1980 Apr  6
-			-4:00	1:00	ADT	1980 Sep 28
-			-4:00	-	AST
-
-# Montserrat
-# From Paul Eggert (1997-08-31):
-# Recent volcanic eruptions have forced evacuation of Plymouth, the capital.
-# Luckily, Olveston, the current de facto capital, has the same longitude.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Montserrat	-4:08:52 -	LMT	1911 Jul 1 0:01   # Olveston
-			-4:00	-	AST
-
-# Nicaragua
-#
-# From Steffen Thorsen (1998-12-29):
-# Nicaragua seems to be back at -6:00 but I have not been able to find when
-# they changed from -5:00.
-#
-# From Steffen Thorsen (2005-04-12):
-# I've got reports from 8 different people that Nicaragua just started
-# DST on Sunday 2005-04-10, in order to save energy because of
-# expensive petroleum.  The exact end date for DST is not yet
-# announced, only "September" but some sites also say "mid-September".
-# Some background information is available on the President's official site:
-# http://www.presidencia.gob.ni/Presidencia/Files_index/Secretaria/Notas%20de%20Prensa/Presidente/2005/ABRIL/Gobierno-de-nicaragua-adelanta-hora-oficial-06abril.htm
-# The Decree, no 23-2005 is available here:
-# http://www.presidencia.gob.ni/buscador_gaceta/BD/DECRETOS/2005/Decreto%2023-2005%20Se%20adelanta%20en%20una%20hora%20en%20todo%20el%20territorio%20nacional%20apartir%20de%20las%2024horas%20del%2009%20de%20Abril.pdf
-#
-# From Paul Eggert (2005-05-01):
-# The decree doesn't say anything about daylight saving, but for now let's
-# assume that it is daylight saving and that they'll switch back on the
-# 3rd Sunday in September.
-#
-# From Gwillim Law (2005-04-21):
-# The Associated Press story on the time change, which can be found at
-# http://www.lapalmainteractivo.com/guias/content/gen/ap/America_Latina/AMC_GEN_NICARAGUA_HORA.html
-# and elsewhere, says (fifth paragraph, translated from Spanish):  "The last
-# time that a change of clocks was applied to save energy was in the year 2000
-# during the Arnoldo Aleman administration."...
-# The northamerica file says that Nicaragua has been on UTC-6 continuously
-# since December 1998.  I wasn't able to find any details of Nicaraguan time
-# changes in 2000.  Perhaps a note could be added to the northamerica file, to
-# the effect that we have indirect evidence that DST was observed in 2000.
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Nic	1979	1980	-	Mar	Sun>=16	0:00	1:00	D
-Rule	Nic	1979	1980	-	Jun	Mon>=23	0:00	0	S
-Rule	Nic	1992	only	-	Jan	1	4:00	1:00	D
-Rule	Nic	1992	only	-	Sep	24	0:00	0	S
-Rule	Nic	2005	only	-	Apr	10	0:00	1:00	D
-Rule	Nic	2005	only	-	Sep	18	0:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Managua	-5:45:08 -	LMT	1890
-			-5:45:12 -	MMT	1934 Jun 23 # Managua Mean Time?
-			-6:00	-	CST	1973 May
-			-5:00	-	EST	1975 Feb 16
-			-6:00	Nic	C%sT	1993 Jan 1 4:00
-			-5:00	-	EST	1998 Dec
-			-6:00	Nic	C%sT
-
-# Panama
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Panama	-5:18:08 -	LMT	1890
-			-5:19:36 -	CMT	1908 Apr 22   # Colon Mean Time
-			-5:00	-	EST
-
-# Puerto Rico
-# There are too many San Juans elsewhere, so we'll use `Puerto_Rico'.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Puerto_Rico -4:24:25 -	LMT	1899 Mar 28 12:00    # San Juan
-			-4:00	-	AST	1942 May  3
-			-4:00	1:00	AWT	1945 Sep 30  2:00
-			-4:00	-	AST
-
-# St Kitts-Nevis
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/St_Kitts	-4:10:52 -	LMT	1912 Mar 2	# Basseterre
-			-4:00	-	AST
-
-# St Lucia
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/St_Lucia	-4:04:00 -	LMT	1890		# Castries
-			-4:04:00 -	CMT	1912	    # Castries Mean Time
-			-4:00	-	AST
-
-# St Pierre and Miquelon
-# There are too many St Pierres elsewhere, so we'll use `Miquelon'.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Miquelon	-3:44:40 -	LMT	1911 May 15	# St Pierre
-			-4:00	-	AST	1980 May
-			-3:00	-	PMST	1987 # Pierre & Miquelon Time
-			-3:00	Canada	PM%sT
-
-# St Vincent and the Grenadines
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/St_Vincent	-4:04:56 -	LMT	1890		# Kingstown
-			-4:04:56 -	KMT	1912	   # Kingstown Mean Time
-			-4:00	-	AST
-
-# Turks and Caicos
-# From Paul Eggert (1998-08-06):
-# Shanks says they use US DST rules, but IATA SSIM (1991/1998)
-# says they switch at midnight.  Go with IATA SSIM.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	TC	1979	1986	-	Apr	lastSun	0:00	1:00	D
-Rule	TC	1979	max	-	Oct	lastSun	0:00	0	S
-Rule	TC	1987	max	-	Apr	Sun>=1	0:00	1:00	D
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Grand_Turk	-4:44:32 -	LMT	1890
-			-5:07:12 -	KMT	1912 Feb    # Kingston Mean Time
-			-5:00	TC	E%sT
-
-# British Virgin Is
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Tortola	-4:18:28 -	LMT	1911 Jul    # Road Town
-			-4:00	-	AST
-
-# Virgin Is
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/St_Thomas	-4:19:44 -	LMT	1911 Jul    # Charlotte Amalie
-			-4:00	-	AST
+# @(#)northamerica	7.80
+# also includes Central America and the Caribbean
+
+# This data is by no means authoritative; if you think you know better,
+# go ahead and edit the file (and please send any changes to
+# tz@elsie.nci.nih.gov for general use in the future).
+
+# From Paul Eggert (1999-03-22):
+# A reliable and entertaining source about time zones is
+# Derek Howse, Greenwich time and longitude, Philip Wilson Publishers (1997).
+
+###############################################################################
+
+# United States
+
+# From Paul Eggert (1999-03-31):
+# Howse writes (pp 121-125) that time zones were invented by
+# Professor Charles Ferdinand Dowd (1825-1904),
+# Principal of Temple Grove Ladies' Seminary (Saratoga Springs, NY).
+# His pamphlet ``A System of National Time for Railroads'' (1870)
+# was the result of his proposals at the Convention of Railroad Trunk Lines
+# in New York City (1869-10).  His 1870 proposal was based on Washington, DC,
+# but in 1872-05 he moved the proposed origin to Greenwich.
+# His proposal was adopted by the railroads on 1883-11-18 at 12:00,
+# and the most of the country soon followed suit.
+
+# From Paul Eggert (2005-04-16):
+# That 1883 transition occurred at 12:00 new time, not at 12:00 old time.
+# See p 46 of David Prerau, Seize the daylight, Thunder's Mouth Press (2005).
+
+# From Paul Eggert (1995-12-19):
+# A good source for time zone historical data in the US is
+# Thomas G. Shanks, The American Atlas (5th edition),
+# San Diego: ACS Publications, Inc. (1991).
+# Make sure you have the errata sheet; the book is somewhat useless without it.
+# It is the source for most of the pre-1991 US and Puerto Rico entries below.
+
+# From Paul Eggert (2001-03-06):
+# Daylight Saving Time was first suggested as a joke by Benjamin Franklin
+# in his whimsical essay ``An Economical Project for Diminishing the Cost
+# of Light'' published in the Journal de Paris (1784-04-26).
+# Not everyone is happy with the results:
+#
+#	I don't really care how time is reckoned so long as there is some
+#	agreement about it, but I object to being told that I am saving
+#	daylight when my reason tells me that I am doing nothing of the kind.
+#	I even object to the implication that I am wasting something
+#	valuable if I stay in bed after the sun has risen.  As an admirer
+#	of moonlight I resent the bossy insistence of those who want to
+#	reduce my time for enjoying it.  At the back of the Daylight Saving
+#	scheme I detect the bony, blue-fingered hand of Puritanism, eager
+#	to push people into bed earlier, and get them up earlier, to make
+#	them healthy, wealthy and wise in spite of themselves.
+#
+#	-- Robertson Davies, The diary of Samuel Marchbanks,
+#	   Clarke, Irwin (1947), XIX, Sunday
+#
+# For more about the first ten years of DST in the United States, see
+# Robert Garland's <a href="http://www.clpgh.org/exhibit/dst.html">
+# Ten years of daylight saving from the Pittsburgh standpoint
+# (Carnegie Library of Pittsburgh, 1927)</a>.
+#
+# Shanks says that DST was called "War Time" in the US in 1918 and 1919.
+# However, DST was imposed by the Standard Time Act of 1918, which
+# was the first nationwide legal time standard, and apparently
+# time was just called "Standard Time" or "Daylight Saving Time".
+
+# From Arthur David Olson:
+# US Daylight Saving Time ended on the last Sunday of *October* in 1974.
+# See, for example, the front page of the Saturday, 1974-10-26
+# and Sunday, 1974-10-27 editions of the Washington Post.
+
+# From Arthur David Olson:
+# Before the Uniform Time Act of 1966 took effect in 1967, observance of
+# Daylight Saving Time in the US was by local option, except during wartime.
+
+# From Arthur David Olson (2000-09-25):
+# Last night I heard part of a rebroadcast of a 1945 Arch Oboler radio drama.
+# In the introduction, Oboler spoke of "Eastern Peace Time."
+# An AltaVista search turned up
+# <a href="http://rowayton.org/rhs/hstaug45.html">:
+# "When the time is announced over the radio now, it is 'Eastern Peace
+# Time' instead of the old familiar 'Eastern War Time.'  Peace is wonderful."
+# </a> (August 1945) by way of confirmation.
+
+# From Joseph Gallant citing
+# George H. Douglas, _The Early Days of Radio Broadcasting_ (1987):
+# At 7 P.M. (Eastern War Time) [on 1945-08-14], the networks were set
+# to switch to London for Attlee's address, but the American people
+# never got to hear his speech live. According to one press account,
+# CBS' Bob Trout was first to announce the word of Japan's surrender,
+# but a few seconds later, NBC, ABC and Mutual also flashed the word
+# of surrender, all of whom interrupting the bells of Big Ben in
+# London which were to precede Mr. Attlee's speech.
+
+# From Paul Eggert (2003-02-09): It was Robert St John, not Bob Trout.  From
+# Myrna Oliver's obituary of St John on page B16 of today's Los Angeles Times:
+#
+# ... a war-weary U.S. clung to radios, awaiting word of Japan's surrender.
+# Any announcement from Asia would reach St. John's New York newsroom on a
+# wire service teletype machine, which had prescribed signals for major news.
+# Associated Press, for example, would ring five bells before spewing out
+# typed copy of an important story, and 10 bells for news "of transcendental
+# importance."
+#
+# On Aug. 14, stalling while talking steadily into the NBC networks' open
+# microphone, St. John heard five bells and waited only to hear a sixth bell,
+# before announcing confidently: "Ladies and gentlemen, World War II is over.
+# The Japanese have agreed to our surrender terms."
+#
+# He had scored a 20-second scoop on other broadcasters.
+
+# From Arthur David Olson (2005-08-22):
+# Paul has been careful to use the "US" rules only in those locations
+# that are part of the United States; this reflects the real scope of
+# U.S. government action.  So even though the "US" rules have changed
+# in the latest release, other countries won't be affected.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	US	1918	1919	-	Mar	lastSun	2:00	1:00	D
+Rule	US	1918	1919	-	Oct	lastSun	2:00	0	S
+Rule	US	1942	only	-	Feb	9	2:00	1:00	W # War
+Rule	US	1945	only	-	Aug	14	23:00u	1:00	P # Peace
+Rule	US	1945	only	-	Sep	30	2:00	0	S
+Rule	US	1967	2006	-	Oct	lastSun	2:00	0	S
+Rule	US	1967	1973	-	Apr	lastSun	2:00	1:00	D
+Rule	US	1974	only	-	Jan	6	2:00	1:00	D
+Rule	US	1975	only	-	Feb	23	2:00	1:00	D
+Rule	US	1976	1986	-	Apr	lastSun	2:00	1:00	D
+Rule	US	1987	2006	-	Apr	Sun>=1	2:00	1:00	D
+Rule	US	2007	max	-	Mar	Sun>=8	2:00	1:00	D
+Rule	US	2007	max	-	Nov	Sun>=1	2:00	0	S
+
+# From Bob Devine (1988-01-28):
+# ...Alaska (and Hawaii) had the timezone names changed in 1967.
+#    old			 new
+#    Pacific Standard Time(PST)  -same-
+#    Yukon Standard Time(YST)    -same-
+#    Central Alaska S.T. (CAT)   Alaska-Hawaii St[an]dard Time (AHST)
+#    Nome Standard Time (NT)     Bering Standard Time (BST)
+#
+# ...Alaska's timezone lines were redrawn in 1983 to give only 2 tz.
+#    The YST zone now covers nearly all of the state, AHST just part
+#    of the Aleutian islands.   No DST.
+
+# From Paul Eggert (1995-12-19):
+# The tables below use `NST', not `NT', for Nome Standard Time.
+# I invented `CAWT' for Central Alaska War Time.
+
+# From U. S. Naval Observatory (1989-01-19):
+# USA  EASTERN       5 H  BEHIND UTC    NEW YORK, WASHINGTON
+# USA  EASTERN       4 H  BEHIND UTC    APR 3 - OCT 30
+# USA  CENTRAL       6 H  BEHIND UTC    CHICAGO, HOUSTON
+# USA  CENTRAL       5 H  BEHIND UTC    APR 3 - OCT 30
+# USA  MOUNTAIN      7 H  BEHIND UTC    DENVER
+# USA  MOUNTAIN      6 H  BEHIND UTC    APR 3 - OCT 30
+# USA  PACIFIC       8 H  BEHIND UTC    L.A., SAN FRANCISCO
+# USA  PACIFIC       7 H  BEHIND UTC    APR 3 - OCT 30
+# USA  ALASKA STD    9 H  BEHIND UTC    MOST OF ALASKA     (AKST)
+# USA  ALASKA STD    8 H  BEHIND UTC    APR 3 - OCT 30 (AKDT)
+# USA  ALEUTIAN     10 H  BEHIND UTC    ISLANDS WEST OF 170W
+# USA  - " -         9 H  BEHIND UTC    APR 3 - OCT 30
+# USA  HAWAII       10 H  BEHIND UTC
+# USA  BERING       11 H  BEHIND UTC    SAMOA, MIDWAY
+
+# From Arthur David Olson (1989-01-21):
+# The above dates are for 1988.
+# Note the "AKST" and "AKDT" abbreviations, the claim that there's
+# no DST in Samoa, and the claim that there is DST in Alaska and the
+# Aleutians.
+
+# From Arthur David Olson (1988-02-13):
+# Legal standard time zone names, from United States Code (1982 Edition and
+# Supplement III), Title 15, Chapter 6, Section 260 and forward.  First, names
+# up to 1967-04-01 (when most provisions of the Uniform Time Act of 1966
+# took effect), as explained in sections 263 and 261:
+#	(none)
+#	United States standard eastern time
+#	United States standard mountain time
+#	United States standard central time
+#	United States standard Pacific time
+#	(none)
+#	United States standard Alaska time
+#	(none)
+# Next, names from 1967-04-01 until 1983-11-30 (the date for
+# public law 98-181):
+#	Atlantic standard time
+#	eastern standard time
+#	central standard time
+#	mountain standard time
+#	Pacific standard time
+#	Yukon standard time
+#	Alaska-Hawaii standard time
+#	Bering standard time
+# And after 1983-11-30:
+#	Atlantic standard time
+#	eastern standard time
+#	central standard time
+#	mountain standard time
+#	Pacific standard time
+#	Alaska standard time
+#	Hawaii-Aleutian standard time
+#	Samoa standard time
+# The law doesn't give abbreviations.
+#
+# From Paul Eggert (2000-01-08), following a heads-up from Rives McDow:
+# Public law 106-564 (2000-12-23) introduced the abbreviation
+# "Chamorro Standard Time" for time in Guam and the Northern Marianas.
+# See the file "australasia".
+ 
+# From Arthur David Olson, 2005-08-09
+# The following was signed into law on 2005-08-08.
+#
+# H.R. 6, Energy Policy Act of 2005, SEC. 110. DAYLIGHT SAVINGS.
+#   (a) Amendment- Section 3(a) of the Uniform Time Act of 1966 (15
+#   U.S.C. 260a(a)) is amended--
+#     (1) by striking `first Sunday of April' and inserting `second
+#     Sunday of March'; and
+#     (2) by striking `last Sunday of October' and inserting `first
+#     Sunday of November'.
+#   (b) Effective Date- Subsection (a) shall take effect 1 year after the
+#   date of enactment of this Act or March 1, 2007, whichever is later.
+#   (c) Report to Congress- Not later than 9 months after the effective
+#   date stated in subsection (b), the Secretary shall report to Congress
+#   on the impact of this section on energy consumption in the United
+#   States.
+#   (d) Right to Revert- Congress retains the right to revert the
+#   Daylight Saving Time back to the 2005 time schedules once the
+#   Department study is complete.
+
+# US eastern time, represented by New York
+
+# Connecticut, Delaware, District of Columbia, most of Florida,
+# Georgia, southeast Indiana (Dearborn and Ohio counties), eastern Kentucky
+# (except America/Kentucky/Louisville below), Maine, Maryland, Massachusetts,
+# New Hampshire, New Jersey, New York, North Carolina, Ohio,
+# Pennsylvania, Rhode Island, South Carolina, eastern Tennessee,
+# Vermont, Virginia, West Virginia
+
+# From Dave Cantor (2004-11-02):
+# Early this summer I had the occasion to visit the Mount Washington
+# Observatory weather station atop (of course!) Mount Washington [, NH]....
+# One of the staff members said that the station was on Eastern Standard Time
+# and didn't change their clocks for Daylight Saving ... so that their
+# reports will always have times which are 5 hours behind UTC.
+
+# From Paul Eggert (2005-08-26):
+# According to today's Huntsville Times
+# <http://www.al.com/news/huntsvilletimes/index.ssf?/base/news/1125047783228320.xml&coll=1>
+# a few towns on Alabama's "eastern border with Georgia, such as Phenix City
+# in Russell County, Lanett in Chambers County and some towns in Lee County,
+# set their watches and clocks on Eastern time."  It quotes H.H. "Bubba"
+# Roberts, city administrator in Phenix City. as saying "We are in the Central
+# time zone, but we do go by the Eastern time zone because so many people work
+# in Columbus." 
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
+Rule	NYC	1920	only	-	Mar	lastSun	2:00	1:00	D
+Rule	NYC	1920	only	-	Oct	lastSun	2:00	0	S
+Rule	NYC	1921	1966	-	Apr	lastSun	2:00	1:00	D
+Rule	NYC	1921	1954	-	Sep	lastSun	2:00	0	S
+Rule	NYC	1955	1966	-	Oct	lastSun	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/New_York	-4:56:02 -	LMT	1883 Nov 18 12:03:58
+			-5:00	US	E%sT	1920
+			-5:00	NYC	E%sT	1942
+			-5:00	US	E%sT	1946
+			-5:00	NYC	E%sT	1967
+			-5:00	US	E%sT
+
+# US central time, represented by Chicago
+
+# Alabama, Arkansas, Florida panhandle (Bay, Calhoun, Escambia,
+# Gulf, Holmes, Jackson, Okaloosa, Santa Rosa, Walton, and
+# Washington counties), Illinois, western Indiana
+# (Gibson, Jasper, Lake, LaPorte, Newton, Porter, Posey, Spencer,
+# Vanderburgh, and Warrick counties), Iowa, most of Kansas, western
+# Kentucky, Louisiana, Minnesota, Mississippi, Missouri, eastern
+# Nebraska, eastern North Dakota, Oklahoma, eastern South Dakota,
+# western Tennessee, most of Texas, Wisconsin
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
+Rule	Chicago	1920	only	-	Jun	13	2:00	1:00	D
+Rule	Chicago	1920	1921	-	Oct	lastSun	2:00	0	S
+Rule	Chicago	1921	only	-	Mar	lastSun	2:00	1:00	D
+Rule	Chicago	1922	1966	-	Apr	lastSun	2:00	1:00	D
+Rule	Chicago	1922	1954	-	Sep	lastSun	2:00	0	S
+Rule	Chicago	1955	1966	-	Oct	lastSun	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Chicago	-5:50:36 -	LMT	1883 Nov 18 12:09:24
+			-6:00	US	C%sT	1920
+			-6:00	Chicago	C%sT	1936 Mar  1 2:00
+			-5:00	-	EST	1936 Nov 15 2:00
+			-6:00	Chicago	C%sT	1942
+			-6:00	US	C%sT	1946
+			-6:00	Chicago	C%sT	1967
+			-6:00	US	C%sT
+# Oliver County, ND switched from mountain to central time on 1992-10-25.
+Zone America/North_Dakota/Center -6:45:12 - LMT	1883 Nov 18 12:14:48
+			-7:00	US	M%sT	1992 Oct 25 02:00
+			-6:00	US	C%sT
+
+# US mountain time, represented by Denver
+#
+# Colorado, far western Kansas, Montana, western
+# Nebraska, Nevada border (Jackpot, Owyhee, and Mountain City),
+# New Mexico, southwestern North Dakota, far eastern Oregon,
+# western South Dakota, far western Texas (El Paso County, Hudspeth County,
+# and Pine Springs and Nickel Creek in Culberson County), Utah, Wyoming
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
+Rule	Denver	1920	1921	-	Mar	lastSun	2:00	1:00	D
+Rule	Denver	1920	only	-	Oct	lastSun	2:00	0	S
+Rule	Denver	1921	only	-	May	22	2:00	0	S
+Rule	Denver	1965	1966	-	Apr	lastSun	2:00	1:00	D
+Rule	Denver	1965	1966	-	Oct	lastSun	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Denver	-6:59:56 -	LMT	1883 Nov 18 12:00:04
+			-7:00	US	M%sT	1920
+			-7:00	Denver	M%sT	1942
+			-7:00	US	M%sT	1946
+			-7:00	Denver	M%sT	1967
+			-7:00	US	M%sT
+
+# US Pacific time, represented by Los Angeles
+#
+# California, northern Idaho (Benewah, Bonner, Boundary, Clearwater,
+# Idaho, Kootenai, Latah, Lewis, Nez Perce, and Shoshone counties),
+# most of Nevada, most of Oregon, and Washington
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
+Rule	CA	1948	only	-	Mar	14	2:00	1:00	D
+Rule	CA	1949	only	-	Jan	 1	2:00	0	S
+Rule	CA	1950	1966	-	Apr	lastSun	2:00	1:00	D
+Rule	CA	1950	1961	-	Sep	lastSun	2:00	0	S
+Rule	CA	1962	1966	-	Oct	lastSun	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Los_Angeles -7:52:58 -	LMT	1883 Nov 18 12:07:02
+			-8:00	US	P%sT	1946
+			-8:00	CA	P%sT	1967
+			-8:00	US	P%sT
+
+# Alaska
+# AK%sT is the modern abbreviation for -9:00 per USNO.
+#
+# From Paul Eggert (2001-05-30):
+# Howse writes that Alaska switched from the Julian to the Gregorian calendar,
+# and from east-of-GMT to west-of-GMT days, when the US bought it from Russia.
+# This was on 1867-10-18, a Friday; the previous day was 1867-10-06 Julian,
+# also a Friday.  Include only the time zone part of this transition,
+# ignoring the switch from Julian to Gregorian, since we can't represent
+# the Julian calendar.
+#
+# As far as we know, none of the exact locations mentioned below were
+# permanently inhabited in 1867 by anyone using either calendar.
+# (Yakutat was colonized by the Russians in 1799, but the settlement
+# was destroyed in 1805 by a Yakutat-kon war party.)  However, there
+# were nearby inhabitants in some cases and for our purposes perhaps
+# it's best to simply use the official transition.
+#
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Juneau	 15:02:19 -	LMT	1867 Oct 18
+			 -8:57:41 -	LMT	1900 Aug 20 12:00
+			 -8:00	-	PST	1942
+			 -8:00	US	P%sT	1946
+			 -8:00	-	PST	1969
+			 -8:00	US	P%sT	1983 Oct 30 2:00
+			 -9:00	US	Y%sT	1983 Nov 30
+			 -9:00	US	AK%sT
+Zone America/Yakutat	 14:41:05 -	LMT	1867 Oct 18
+			 -9:18:55 -	LMT	1900 Aug 20 12:00
+			 -9:00	-	YST	1942
+			 -9:00	US	Y%sT	1946
+			 -9:00	-	YST	1969
+			 -9:00	US	Y%sT	1983 Nov 30
+			 -9:00	US	AK%sT
+Zone America/Anchorage	 14:00:24 -	LMT	1867 Oct 18
+			 -9:59:36 -	LMT	1900 Aug 20 12:00
+			-10:00	-	CAT	1942
+			-10:00	US	CAT/CAWT 1946
+			-10:00	-	CAT	1967 Apr
+			-10:00	-	AHST	1969
+			-10:00	US	AH%sT	1983 Oct 30 2:00
+			 -9:00	US	Y%sT	1983 Nov 30
+			 -9:00	US	AK%sT
+Zone America/Nome	 12:58:21 -	LMT	1867 Oct 18
+			-11:01:38 -	LMT	1900 Aug 20 12:00
+			-11:00	-	NST	1942
+			-11:00	US	N%sT	1946
+			-11:00	-	NST	1967 Apr
+			-11:00	-	BST	1969
+			-11:00	US	B%sT	1983 Oct 30 2:00
+			 -9:00	US	Y%sT	1983 Nov 30
+			 -9:00	US	AK%sT
+Zone America/Adak	 12:13:21 -	LMT	1867 Oct 18
+			-11:46:38 -	LMT	1900 Aug 20 12:00
+			-11:00	-	NST	1942
+			-11:00	US	N%sT	1946
+			-11:00	-	NST	1967 Apr
+			-11:00	-	BST	1969
+			-11:00	US	B%sT	1983 Oct 30 2:00
+			-10:00	US	AH%sT	1983 Nov 30
+			-10:00	US	HA%sT
+# The following switches don't quite make our 1970 cutoff.
+#
+# Shanks writes that part of southwest Alaska (e.g. Aniak)
+# switched from -11:00 to -10:00 on 1968-09-22 at 02:00,
+# and another part (e.g. Akiak) made the same switch five weeks later.
+#
+# From David Flater (2004-11-09):
+# In e-mail, 2004-11-02, Ray Hudson, historian/liaison to the Unalaska
+# Historic Preservation Commission, provided this information, which
+# suggests that Unalaska deviated from statutory time from early 1967
+# possibly until 1983:
+#
+#  Minutes of the Unalaska City Council Meeting, January 10, 1967:
+#  "Except for St. Paul and Akutan, Unalaska is the only important
+#  location not on Alaska Standard Time.  The following resolution was
+#  made by William Robinson and seconded by Henry Swanson:  Be it
+#  resolved that the City of Unalaska hereby goes to Alaska Standard
+#  Time as of midnight Friday, January 13, 1967 (1 A.M. Saturday,
+#  January 14, Alaska Standard Time.)  This resolution was passed with
+#  three votes for and one against."
+
+# Hawaii
+#
+# From Arthur David Olson:
+# And then there's Hawaii.
+# DST was observed for one day in 1933;
+# standard time was changed by half an hour in 1947;
+# it's always standard as of 1986.
+#
+# From Paul Eggert:
+# Shanks says the 1933 experiment lasted for three weeks.  Go with Shanks.
+#
+Zone Pacific/Honolulu	-10:31:26 -	LMT	1900 Jan  1 12:00
+			-10:30	-	HST	1933 Apr 30 2:00
+			-10:30	1:00	HDT	1933 May 21 2:00
+			-10:30	US	H%sT	1947 Jun  8 2:00
+			-10:00	-	HST
+
+# Now we turn to US areas that have diverged from the consensus since 1970.
+
+# Arizona mostly uses MST.
+
+# From Paul Eggert (2002-10-20):
+#
+# The information in the rest of this paragraph is derived from the
+# <a href="http://www.dlapr.lib.az.us/links/daylight.htm">
+# Daylight Saving Time web page (2002-01-23)</a> maintained by the
+# Arizona State Library, Archives and Public Records.
+# Between 1944-01-01 and 1944-04-01 the State of Arizona used standard
+# time, but by federal law railroads, airlines, bus lines, military
+# personnel, and some engaged in interstate commerce continued to
+# observe war (i.e., daylight saving) time.  The 1944-03-17 Phoenix
+# Gazette says that was the date the law changed, and that 04-01 was
+# the date the state's clocks would change.  In 1945 the State of
+# Arizona used standard time all year, again with exceptions only as
+# mandated by federal law.  Arizona observed DST in 1967, but Arizona
+# Laws 1968, ch. 183 (effective 1968-03-21) repealed DST.
+#
+# Shanks says the 1944 experiment came to an end on 1944-03-17.
+# Go with the Arizona State Library instead.
+
+Zone America/Phoenix	-7:28:18 -	LMT	1883 Nov 18 11:31:42
+			-7:00	US	M%sT	1944 Jan  1 00:01
+			-7:00	-	MST	1944 Apr  1 00:01
+			-7:00	US	M%sT	1944 Oct  1 00:01
+			-7:00	-	MST	1967
+			-7:00	US	M%sT	1968 Mar 21
+			-7:00	-	MST
+# From Arthur David Olson (1988-02-13):
+# A writer from the Inter Tribal Council of Arizona, Inc.,
+# notes in private correspondence dated 1987-12-28 that "Presently, only the
+# Navajo Nation participates in the Daylight Saving Time policy, due to its
+# large size and location in three states."  (The "only" means that other
+# tribal nations don't use DST.)
+
+Link America/Denver America/Shiprock
+
+# Southern Idaho (Ada, Adams, Bannock, Bear Lake, Bingham, Blaine,
+# Boise, Bonneville, Butte, Camas, Canyon, Caribou, Cassia, Clark,
+# Custer, Elmore, Franklin, Fremont, Gem, Gooding, Jefferson, Jerome,
+# Lemhi, Lincoln, Madison, Minidoka, Oneida, Owyhee, Payette, Power,
+# Teton, Twin Falls, Valley, Washington counties) and eastern Oregon
+# switched four weeks late in 1974.
+#
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Boise	-7:44:49 -	LMT	1883 Nov 18 12:15:11
+			-8:00	US	P%sT	1923 May 13 2:00
+			-7:00	US	M%sT	1974
+			-7:00	-	MST	1974 Feb  3 2:00
+			-7:00	US	M%sT
+
+# Indiana
+#
+# For a map of Indiana's time zone regions, see:
+# <a href="http://www.mccsc.edu/time.html">
+# What time is it in Indiana?
+# </a> (2005-05-03)
+#
+# From Paul Eggert (2005-08-22):
+# Since 1970, most of Indiana has been like America/Indiana/Indianapolis,
+# with the following exceptions:
+#
+# - Gibson, Jasper, Lake, LaPorte, Newton, Porter, Posey, Spencer,
+#   Vandenburgh, and Warrick counties have been like America/Chicago.
+#
+# - Dearborn and Ohio counties have been like America/New_York.
+#
+# - Clark, Floyd, and Harrison counties have been like
+#   America/Kentucky/Louisville.
+#
+# - Crawford, Starke, and Switzerland counties have their own time zone
+#   histories as noted below.
+#
+# Shanks partitions Indiana into 345 regions, each with its own time history,
+# and writes ``Even newspaper reports present contradictory information.''
+# Fortunately, most of the complexity occurred before our cutoff date of 1970.
+#
+# Other than Indianapolis, the Indiana place names are so nondescript
+# that they would be ambiguous if we left them at the `America' level.
+# So we reluctantly put them all in a subdirectory `America/Indiana'.
+
+# From Paul Eggert (2005-08-16):
+# http://www.mccsc.edu/time.html says that Indiana will use DST starting 2006,
+# and that many counties may switch either to Central or to Eastern time.
+# The county-by-county decisions have not been made yet, so for now assume
+# that no counties will switch: this assumption is most likely wrong,
+# but it's the best we can do for now.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
+Rule Indianapolis 1941	only	-	Jun	22	2:00	1:00	D
+Rule Indianapolis 1941	1954	-	Sep	lastSun	2:00	0	S
+Rule Indianapolis 1946	1954	-	Apr	lastSun	2:00	1:00	D
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Indiana/Indianapolis -5:44:38 - LMT 1883 Nov 18 12:15:22
+			-6:00	US	C%sT	1920
+			-6:00 Indianapolis C%sT	1942
+			-6:00	US	C%sT	1946
+			-6:00 Indianapolis C%sT	1955 Apr 24 2:00
+			-5:00	-	EST	1957 Sep 29 2:00
+			-6:00	-	CST	1958 Apr 27 2:00
+			-5:00	-	EST	1969
+			-5:00	US	E%sT	1971
+			-5:00	-	EST	2006
+			-5:00	US	E%sT
+#
+# Part of Crawford County, Indiana, last observed DST in 1975,
+# and left its clocks alone in 1974.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
+Rule	Marengo	1951	only	-	Apr	lastSun	2:00	1:00	D
+Rule	Marengo	1951	only	-	Sep	lastSun	2:00	0	S
+Rule	Marengo	1954	1960	-	Apr	lastSun	2:00	1:00	D
+Rule	Marengo	1954	1960	-	Sep	lastSun	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Indiana/Marengo -5:45:23 -	LMT	1883 Nov 18 12:14:37
+			-6:00	US	C%sT	1951
+			-6:00	Marengo	C%sT	1961 Apr 30 2:00
+			-5:00	-	EST	1969
+			-5:00	US	E%sT	1974 Jan  6 2:00
+			-6:00	1:00	CDT	1974 Oct 27 2:00
+			-5:00	US	E%sT	1976
+			-5:00	-	EST	2006
+			-5:00	US	E%sT
+#
+# Starke County, Indiana
+# From Arthur David Olson (1991-10-28):
+# An article on page A3 of the Sunday, 1991-10-27 Washington Post
+# notes that Starke County switched from Central time to Eastern time as of
+# 1991-10-27.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
+Rule	Starke	1947	1961	-	Apr	lastSun	2:00	1:00	D
+Rule	Starke	1947	1954	-	Sep	lastSun	2:00	0	S
+Rule	Starke	1955	1956	-	Oct	lastSun	2:00	0	S
+Rule	Starke	1957	1958	-	Sep	lastSun	2:00	0	S
+Rule	Starke	1959	1961	-	Oct	lastSun	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Indiana/Knox -5:46:30 -	LMT	1883 Nov 18 12:13:30
+			-6:00	US	C%sT	1947
+			-6:00	Starke	C%sT	1962 Apr 29 2:00
+			-5:00	-	EST	1963 Oct 27 2:00
+			-6:00	US	C%sT	1991 Oct 27 2:00
+			-5:00	-	EST	2006
+			-5:00	US	E%sT
+#
+# Switzerland County, Indiana, last observed DST in 1972.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Indiana/Vevay -5:40:16 -	LMT	1883 Nov 18 12:19:44
+			-6:00	US	C%sT	1954 Apr 25 2:00
+			-5:00	-	EST	1969
+			-5:00	US	E%sT	1973
+			-5:00	-	EST	2006
+			-5:00	US	E%sT
+
+# Part of Kentucky left its clocks alone in 1974.
+# This also includes Clark, Floyd, and Harrison counties in Indiana.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
+Rule Louisville	1921	only	-	May	1	2:00	1:00	D
+Rule Louisville	1921	only	-	Sep	1	2:00	0	S
+Rule Louisville	1941	1961	-	Apr	lastSun	2:00	1:00	D
+Rule Louisville	1941	only	-	Sep	lastSun	2:00	0	S
+Rule Louisville	1946	only	-	Jun	2	2:00	0	S
+Rule Louisville	1950	1955	-	Sep	lastSun	2:00	0	S
+Rule Louisville	1956	1960	-	Oct	lastSun	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Kentucky/Louisville -5:43:02 -	LMT	1883 Nov 18 12:16:58
+			-6:00	US	C%sT	1921
+			-6:00 Louisville C%sT	1942
+			-6:00	US	C%sT	1946
+			-6:00 Louisville C%sT	1961 Jul 23 2:00
+			-5:00	-	EST	1968
+			-5:00	US	E%sT	1974 Jan  6 2:00
+			-6:00	1:00	CDT	1974 Oct 27 2:00
+			-5:00	US	E%sT
+#
+# Wayne, Clinton, and Russell Counties, Kentucky
+#
+# From
+# <a href="http://www.lake-cumberland.com/life/archive/news990129time.shtml">
+# Lake Cumberland LIFE
+# </a> (1999-01-29) via WKYM-101.7:
+# Clinton County has joined Wayne County in asking the DoT to change from
+# the Central to the Eastern time zone....  The Wayne County government made
+# the same request in December.  And while Russell County officials have not
+# taken action, the majority of respondents to a poll conducted there in
+# August indicated they would like to change to "fast time" also.
+# The three Lake Cumberland counties are the farthest east of any U.S.
+# location in the Central time zone.
+#
+# From Rich Wales (2000-08-29):
+# After prolonged debate, and despite continuing deep differences of opinion,
+# Wayne County (central Kentucky) is switching from Central (-0600) to Eastern
+# (-0500) time.  They won't "fall back" this year.  See Sara Shipley,
+# The difference an hour makes, Nando Times (2000-08-29 15:33 -0400).
+#
+# From Paul Eggert (2001-07-16):
+# The final rule was published in the
+# <a href="http://frwebgate.access.gpo.gov/cgi-bin/getdoc.cgi?dbname=2000_register&docid=fr17au00-22">
+# Federal Register 65, 160 (2000-08-17), page 50154-50158.
+# </a>
+#
+Zone America/Kentucky/Monticello -5:39:24 - LMT	1883 Nov 18 12:20:36
+			-6:00	US	C%sT	1946
+			-6:00	-	CST	1968
+			-6:00	US	C%sT	2000 Oct 29  2:00
+			-5:00	US	E%sT
+
+
+# From Rives McDow (2000-08-30):
+# Here ... are all the changes in the US since 1985.
+# Kearny County, KS (put all of county on central;
+#	previously split between MST and CST) ... 1990-10
+# Starke County, IN (from CST to EST) ... 1991-10
+# Oliver County, ND (from MST to CST) ... 1992-10
+# West Wendover, NV (from PST TO MST) ... 1999-10
+# Wayne County, KY (from CST to EST) ... 2000-10
+#
+# From Paul Eggert (2001-07-17):
+# We don't know where the line used to be within Kearny County, KS,
+# so omit that change for now.
+# See America/Indiana/Knox for the Starke County, IN change.
+# See America/North_Dakota/Center for the Oliver County, ND change.
+# West Wendover, NV officially switched from Pacific to mountain time on
+# 1999-10-31.  See the
+# <a href="http://frwebgate.access.gpo.gov/cgi-bin/getdoc.cgi?dbname=1999_register&docid=fr21oc99-15">
+# Federal Register 64, 203 (1999-10-21), page 56705-56707.
+# </a>
+# However, the Federal Register says that West Wendover already operated
+# on mountain time, and the rule merely made this official;
+# hence a separate tz entry is not needed.
+
+# Michigan
+#
+# From Bob Devine (1988-01-28):
+# Michigan didn't observe DST from 1968 to 1973.
+#
+# From Paul Eggert (1999-03-31):
+# Shanks writes that Michigan started using standard time on 1885-09-18,
+# but Howse writes (pp 124-125, referring to Popular Astronomy, 1901-01)
+# that Detroit kept
+#
+#	local time until 1900 when the City Council decreed that clocks should
+#	be put back twenty-eight minutes to Central Standard Time.  Half the
+#	city obeyed, half refused.  After considerable debate, the decision
+#	was rescinded and the city reverted to Sun time.  A derisive offer to
+#	erect a sundial in front of the city hall was referred to the
+#	Committee on Sewers.  Then, in 1905, Central time was adopted
+#	by city vote.
+#
+# This story is too entertaining to be false, so go with Howse over Shanks.
+#
+# From Paul Eggert (2001-03-06):
+# Garland (1927) writes ``Cleveland and Detroit advanced their clocks
+# one hour in 1914.''  This change is not in Shanks.  We have no more
+# info, so omit this for now.
+#
+# Most of Michigan observed DST from 1973 on, but was a bit late in 1975.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
+Rule	Detroit	1948	only	-	Apr	lastSun	2:00	1:00	D
+Rule	Detroit	1948	only	-	Sep	lastSun	2:00	0	S
+Rule	Detroit	1967	only	-	Jun	14	2:00	1:00	D
+Rule	Detroit	1967	only	-	Oct	lastSun	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Detroit	-5:32:11 -	LMT	1905
+			-6:00	-	CST	1915 May 15 2:00
+			-5:00	-	EST	1942
+			-5:00	US	E%sT	1946
+			-5:00	Detroit	E%sT	1973
+			-5:00	US	E%sT	1975
+			-5:00	-	EST	1975 Apr 27 2:00
+			-5:00	US	E%sT
+#
+# The Michigan border with Wisconsin switched from EST to CST/CDT in 1973.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
+Rule Menominee	1946	only	-	Apr	lastSun	2:00	1:00	D
+Rule Menominee	1946	only	-	Sep	lastSun	2:00	0	S
+Rule Menominee	1966	only	-	Apr	lastSun	2:00	1:00	D
+Rule Menominee	1966	only	-	Oct	lastSun	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Menominee	-5:50:27 -	LMT	1885 Sep 18 12:00
+			-6:00	US	C%sT	1946
+			-6:00 Menominee	C%sT	1969 Apr 27 2:00
+			-5:00	-	EST	1973 Apr 29 2:00
+			-6:00	US	C%sT
+
+# Navassa
+# administered by the US Fish and Wildlife Service
+# claimed by US under the provisions of the 1856 Guano Islands Act
+# also claimed by Haiti
+# occupied 1857/1900 by the Navassa Phosphate Co
+# US lighthouse 1917/1996-09
+# currently uninhabited
+# see Mark Fineman, ``An Isle Rich in Guano and Discord'',
+# _Los Angeles Times_ (1998-11-10), A1, A10; it cites
+# Jimmy Skaggs, _The Great Guano Rush_ (1994).
+
+################################################################################
+
+
+# From Paul Eggert (1999-10-29):
+# A good source for time zone historical data outside the US is
+# Thomas G. Shanks, The International Atlas (5th edition),
+# San Diego: ACS Publications, Inc. (1999).
+#
+# Gwillim Law writes that a good source
+# for recent time zone data is the International Air Transport
+# Association's Standard Schedules Information Manual (IATA SSIM),
+# published semiannually.  Law sent in several helpful summaries
+# of the IATA's data after 1990.
+#
+# Except where otherwise noted, Shanks is the source for entries through 1990,
+# and IATA SSIM is the source for entries after 1990.
+#
+# Other sources occasionally used include:
+#
+#	Edward W. Whitman, World Time Differences,
+#	Whitman Publishing Co, 2 Niagara Av, Ealing, London (undated),
+#	which I found in the UCLA library.
+#
+#	<a href="http://www.pettswoodvillage.co.uk/Daylight_Savings_William_Willett.pdf">
+#	William Willett, The Waste of Daylight, 19th edition
+#	</a> (1914-03)
+#
+# See the `europe' file for Greenland.
+
+# Canada
+
+# From Alain LaBont<e'> (1994-11-14):
+# I post here the time zone abbreviations standardized in Canada
+# for both English and French in the CAN/CSA-Z234.4-89 standard....
+#
+#	UTC	Standard time	Daylight savings time
+#	offset	French	English	French	English
+#	-2:30	-	-	HAT	NDT
+#	-3	-	-	HAA	ADT
+#	-3:30	HNT	NST	-	-
+#	-4	HNA	AST	HAE	EDT
+#	-5	HNE	EST	HAC	CDT
+#	-6	HNC	CST	HAR	MDT
+#	-7	HNR	MST	HAP	PDT
+#	-8	HNP	PST	HAY	YDT
+#	-9	HNY	YST	-	-
+#
+#	HN: Heure Normale	ST: Standard Time
+#	HA: Heure Avanc<e'>e	DT: Daylight saving Time
+#
+#	A: de l'Atlantique	Atlantic
+#	C: du Centre		Central
+#	E: de l'Est		Eastern
+#	M:			Mountain
+#	N:			Newfoundland
+#	P: du Pacifique		Pacific
+#	R: des Rocheuses
+#	T: de Terre-Neuve
+#	Y: du Yukon		Yukon
+#
+# From Paul Eggert (1994-11-22):
+# Alas, this sort of thing must be handled by localization software.
+
+# Unless otherwise specified, the data for Canada are all from Shanks.
+
+# From Paul Eggert (2000-10-02):
+# H. David Matthews and Mary Vincent's map
+# <a href="http://www.canadiangeographic.ca/SO98/geomap.htm">
+# "It's about TIME", _Canadian Geographic_ (September-October 1998)
+# </a> contains detailed boundaries for regions observing nonstandard
+# time and daylight saving time arrangements in Canada circa 1998.
+#
+# INMS, the Institute for National Measurement Standards in Ottawa, has
+# <a href="http://www.nrc.ca/inms/time/tze.html">
+# information about standard and daylight saving time zones in Canada.
+# </a> (updated periodically).
+# Its unofficial information is often taken from Matthews and Vincent.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Canada	1918	only	-	Apr	14	2:00	1:00	D
+Rule	Canada	1918	only	-	Oct	31	2:00	0	S
+Rule	Canada	1942	only	-	Feb	 9	2:00	1:00	W # War
+Rule	Canada	1945	only	-	Aug	14	23:00u	1:00	P # Peace
+Rule	Canada	1945	only	-	Sep	30	2:00	0	S
+Rule	Canada	1974	1986	-	Apr	lastSun	2:00	1:00	D
+Rule	Canada	1974	max	-	Oct	lastSun	2:00	0	S
+Rule	Canada	1987	max	-	Apr	Sun>=1	2:00	1:00	D
+
+
+# Newfoundland (and far southeast Labrador)
+
+# From Paul Eggert (2000-10-02):
+# Matthews and Vincent (1998) write that Labrador should use NST/NDT,
+# but the only part of Labrador that follows the rules is the
+# southeast corner, including Port Hope Simpson and Mary's Harbour,
+# but excluding, say, Black Tickle.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	StJohns	1917	only	-	Apr	 8	2:00	1:00	D
+Rule	StJohns	1917	only	-	Sep	17	2:00	0	S
+# Whitman gives 1919 Apr 5 and 1920 Apr 5; go with Shanks.
+Rule	StJohns	1919	only	-	May	 5	23:00	1:00	D
+Rule	StJohns	1919	only	-	Aug	12	23:00	0	S
+# For 1931-1935 Whitman gives Apr same date; go with Shanks.
+Rule	StJohns	1920	1935	-	May	Sun>=1	23:00	1:00	D
+Rule	StJohns	1920	1935	-	Oct	lastSun	23:00	0	S
+# For 1936-1941 Whitman gives May Sun>=8 and Oct Sun>=1; go with Shanks.
+Rule	StJohns	1936	1941	-	May	Mon>=9	0:00	1:00	D
+Rule	StJohns	1936	1941	-	Oct	Mon>=2	0:00	0	S
+# Whitman gives the following transitions:
+# 1942 03-01/12-31, 1943 05-30/09-05, 1944 07-10/09-02, 1945 01-01/10-07
+# but go with Shanks and assume they used Canadian rules.
+# For 1946-9 Whitman gives May 5,4,9,1 - Oct 1,5,3,2, and for 1950 he gives
+# Apr 30 - Sep 24; go with Shanks.
+Rule	StJohns	1946	1950	-	May	Sun>=8	2:00	1:00	D
+Rule	StJohns	1946	1950	-	Oct	Sun>=2	2:00	0	S
+Rule	StJohns	1951	1986	-	Apr	lastSun	2:00	1:00	D
+Rule	StJohns	1951	1959	-	Sep	lastSun	2:00	0	S
+Rule	StJohns	1960	1986	-	Oct	lastSun	2:00	0	S
+# From Paul Eggert (2000-10-02):
+# INMS (2000-09-12) says that, since 1988 at least, Newfoundland switches
+# at 00:01 local time.  For now, assume it started in 1987.
+Rule	StJohns	1987	only	-	Apr	Sun>=1	0:01	1:00	D
+Rule	StJohns	1987	max	-	Oct	lastSun	0:01	0	S
+Rule	StJohns	1988	only	-	Apr	Sun>=1	0:01	2:00	DD
+Rule	StJohns	1989	max	-	Apr	Sun>=1	0:01	1:00	D
+# St John's has an apostrophe, but Posix file names can't have apostrophes.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/St_Johns	-3:30:52 -	LMT	1884
+			-3:30:52 StJohns N%sT	1918
+			-3:30:52 Canada	N%sT	1919
+			-3:30:52 StJohns N%sT	1935 Mar 30
+			-3:30	StJohns	N%sT	1942 May 11
+			-3:30	Canada	N%sT	1946
+			-3:30	StJohns	N%sT
+
+# most of east Labrador
+
+# The name `Happy Valley-Goose Bay' is too long; use `Goose Bay'.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Goose_Bay	-4:01:40 -	LMT	1884 # Happy Valley-Goose Bay
+			-3:30:52 -	NST	1918
+			-3:30:52 Canada N%sT	1919
+			-3:30:52 -	NST	1935 Mar 30
+			-3:30	-	NST	1936
+			-3:30	StJohns	N%sT	1942 May 11
+			-3:30	Canada	N%sT	1946
+			-3:30	StJohns	N%sT	1966 Mar 15 2:00
+			-4:00	StJohns	A%sT
+
+
+# west Labrador, New Brunswick, Nova Scotia, Prince Edward I
+
+# From Paul Eggert (1996-06-12):
+# Shanks writes that since 1970 most of this region has been like Halifax.
+# Many locales did not observe peacetime DST until 1972;
+# Glace Bay, NS is the largest that we know of.
+# Shanks also writes that Liverpool, NS was the only town in Canada to observe
+# DST in 1971 but not 1970; for now we'll assume this is a typo.
+
+# From Paul Eggert (2000-10-02):
+# INMS (2000-09-12) says that, since 1988 at least, New Brunswick switches
+# at 00:01 local time.  FIXME: verify and create a new Zone for this.
+
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule Halifax	1916	only	-	Apr	 1	0:00	1:00	D
+Rule Halifax	1916	only	-	Oct	 1	0:00	0	S
+Rule Halifax	1920	only	-	May	 9	0:00	1:00	D
+Rule Halifax	1920	only	-	Aug	29	0:00	0	S
+Rule Halifax	1921	only	-	May	 6	0:00	1:00	D
+Rule Halifax	1921	1922	-	Sep	 5	0:00	0	S
+Rule Halifax	1922	only	-	Apr	30	0:00	1:00	D
+Rule Halifax	1923	1925	-	May	Sun>=1	0:00	1:00	D
+Rule Halifax	1923	only	-	Sep	 4	0:00	0	S
+Rule Halifax	1924	only	-	Sep	15	0:00	0	S
+Rule Halifax	1925	only	-	Sep	28	0:00	0	S
+Rule Halifax	1926	only	-	May	16	0:00	1:00	D
+Rule Halifax	1926	only	-	Sep	13	0:00	0	S
+Rule Halifax	1927	only	-	May	 1	0:00	1:00	D
+Rule Halifax	1927	only	-	Sep	26	0:00	0	S
+Rule Halifax	1928	1931	-	May	Sun>=8	0:00	1:00	D
+Rule Halifax	1928	only	-	Sep	 9	0:00	0	S
+Rule Halifax	1929	only	-	Sep	 3	0:00	0	S
+Rule Halifax	1930	only	-	Sep	15	0:00	0	S
+Rule Halifax	1931	1932	-	Sep	Mon>=24	0:00	0	S
+Rule Halifax	1932	only	-	May	 1	0:00	1:00	D
+Rule Halifax	1933	only	-	Apr	30	0:00	1:00	D
+Rule Halifax	1933	only	-	Oct	 2	0:00	0	S
+Rule Halifax	1934	only	-	May	20	0:00	1:00	D
+Rule Halifax	1934	only	-	Sep	16	0:00	0	S
+Rule Halifax	1935	only	-	Jun	 2	0:00	1:00	D
+Rule Halifax	1935	only	-	Sep	30	0:00	0	S
+Rule Halifax	1936	only	-	Jun	 1	0:00	1:00	D
+Rule Halifax	1936	only	-	Sep	14	0:00	0	S
+Rule Halifax	1937	1938	-	May	Sun>=1	0:00	1:00	D
+Rule Halifax	1937	1941	-	Sep	Mon>=24	0:00	0	S
+Rule Halifax	1939	only	-	May	28	0:00	1:00	D
+Rule Halifax	1940	1941	-	May	Sun>=1	0:00	1:00	D
+Rule Halifax	1946	1949	-	Sep	lastSun	2:00	0	S
+Rule Halifax	1946	1949	-	Apr	lastSun	2:00	1:00	D
+Rule Halifax	1951	1954	-	Sep	lastSun	2:00	0	S
+Rule Halifax	1951	1954	-	Apr	lastSun	2:00	1:00	D
+Rule Halifax	1956	1959	-	Sep	lastSun	2:00	0	S
+Rule Halifax	1956	1959	-	Apr	lastSun	2:00	1:00	D
+Rule Halifax	1962	1973	-	Apr	lastSun	2:00	1:00	D
+Rule Halifax	1962	1973	-	Oct	lastSun	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Halifax	-4:14:24 -	LMT	1902 Jun 15
+			-4:00	Halifax	A%sT	1918
+			-4:00	Canada	A%sT	1919
+			-4:00	Halifax	A%sT	1942 Feb  9 2:00s
+			-4:00	Canada	A%sT	1946
+			-4:00	Halifax	A%sT	1974
+			-4:00	Canada	A%sT
+Zone America/Glace_Bay	-3:59:48 -	LMT	1902 Jun 15
+			-4:00	Canada	A%sT	1953
+			-4:00	Halifax	A%sT	1954
+			-4:00	-	AST	1972
+			-4:00	Halifax	A%sT	1974
+			-4:00	Canada	A%sT
+
+
+# Ontario, Quebec
+
+# From Paul Eggert (1996-06-12):
+# Shanks writes that since 1970 most of Ontario has been like Toronto,
+# and most of Quebec has been like Montreal.
+# Thunder Bay skipped DST in 1973.
+# Many smaller locales did not observe peacetime DST until 1974;
+# Nipigon (EST) and Rainy River (CST) are the largest that we know of.
+# Far west Ontario is like Winnipeg; far east Quebec is like Halifax.
+
+# From Mark Brader (2003-07-26):
+# [According to the Toronto Star] Orillia, Ontario, adopted DST
+# effective Saturday, 1912-06-22, 22:00; the article mentions that
+# Port Arthur (now part of Thunder Bay, Ontario) as well as Moose Jaw
+# have already done so.  In Orillia DST was to run until Saturday,
+# 1912-08-31 (no time mentioned), but it was met with considerable
+# hostility from certain segments of the public, and was revoked after
+# only two weeks -- I copied it as Saturday, 1912-07-07, 22:00, but
+# presumably that should be -07-06.  (1912-06-19, -07-12; also letters
+# earlier in June).
+#
+# Kenora, Ontario, was to abandon DST on 1914-06-01 (-05-21).
+
+# From Paul Eggert (1997-10-17):
+# Mark Brader writes that an article in the 1997-10-14 Toronto Star
+# says that Atikokan, Ontario currently does not observe DST,
+# but will vote on 11-10 whether to use EST/EDT.
+# He also writes that the
+# <a href="http://www.gov.on.ca/MBS/english/publications/statregs/conttext.html">
+# Ontario Time Act (1990, Chapter T.9)
+# </a>
+# says that Ontario east of 90W uses EST/EDT, and west of 90W uses CST/CDT.
+# Officially Atikokan is therefore on CST/CDT, and most likely this report
+# concerns a non-official time observed as a matter of local practice.
+# For what it's worth, Shanks says that Atikokan has agreed with
+# Rainy River ever since standard time was introduced.
+
+# From Paul Eggert (2000-10-02):
+# Matthews and Vincent (1998) write that Atikokan, Pickle Lake, and
+# New Osnaburgh observe CST all year, that Big Trout Lake observes
+# CST/CDT, and that Upsala and Shebandowan observe EST/EDT, all in
+# violation of the official Ontario rules.
+# They also write that Quebec east of the -63 meridian is supposed to
+# observe AST, but residents as far east as Natashquan use EST/EDT,
+# and residents east of Natashquan use AST.
+# We probably need Zones for far east Quebec and for Atikokan,
+# but we don't know when their practices started.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Mont	1917	only	-	Mar	25	2:00	1:00	D
+Rule	Mont	1917	only	-	Apr	24	0:00	0	S
+Rule	Mont	1919	only	-	Mar	31	2:30	1:00	D
+Rule	Mont	1919	only	-	Oct	25	2:30	0	S
+Rule	Mont	1920	only	-	May	 2	2:30	1:00	D
+Rule	Mont	1920	1922	-	Oct	Sun>=1	2:30	0	S
+Rule	Mont	1921	only	-	May	 1	2:00	1:00	D
+Rule	Mont	1922	only	-	Apr	30	2:00	1:00	D
+Rule	Mont	1924	only	-	May	17	2:00	1:00	D
+Rule	Mont	1924	1926	-	Sep	lastSun	2:30	0	S
+Rule	Mont	1925	1926	-	May	Sun>=1	2:00	1:00	D
+# The 1927-to-1937 rules can be expressed more simply as
+# Rule	Mont	1927	1937	-	Apr	lastSat	24:00	1:00	D
+# Rule	Mont	1927	1937	-	Sep	lastSat	24:00	0	S
+# The rules below avoid use of 24:00
+# (which pre-1998 versions of zic cannot handle).
+Rule	Mont	1927	only	-	May	1	0:00	1:00	D
+Rule	Mont	1927	1932	-	Sep	lastSun	0:00	0	S
+Rule	Mont	1928	1931	-	Apr	lastSun	0:00	1:00	D
+Rule	Mont	1932	only	-	May	1	0:00	1:00	D
+Rule	Mont	1933	1940	-	Apr	lastSun	0:00	1:00	D
+Rule	Mont	1933	only	-	Oct	1	0:00	0	S
+Rule	Mont	1934	1939	-	Sep	lastSun	0:00	0	S
+Rule	Mont	1946	1973	-	Apr	lastSun	2:00	1:00	D
+Rule	Mont	1945	1948	-	Sep	lastSun	2:00	0	S
+Rule	Mont	1949	1950	-	Oct	lastSun	2:00	0	S
+Rule	Mont	1951	1956	-	Sep	lastSun	2:00	0	S
+Rule	Mont	1957	1973	-	Oct	lastSun	2:00	0	S
+
+Rule	Toronto	1919	only	-	Mar	30	23:30	1:00	D
+Rule	Toronto	1919	only	-	Oct	26	0:00	0	S
+Rule	Toronto	1920	only	-	May	 2	2:00	1:00	D
+Rule	Toronto	1920	only	-	Sep	26	0:00	0	S
+Rule	Toronto	1921	only	-	May	15	2:00	1:00	D
+Rule	Toronto	1921	only	-	Sep	15	2:00	0	S
+Rule	Toronto	1922	1923	-	May	Sun>=8	2:00	1:00	D
+# Shanks says 1923-09-19; assume it's a typo and that "-16" was meant.
+Rule	Toronto	1922	1926	-	Sep	Sun>=15	2:00	0	S
+Rule	Toronto	1924	1927	-	May	Sun>=1	2:00	1:00	D
+# The 1927-to-1939 rules can be expressed more simply as
+# Rule	Toronto	1927	1937	-	Sep	Sun>=25	2:00	0	S
+# Rule	Toronto	1928	1937	-	Apr	Sun>=25	2:00	1:00	D
+# Rule	Toronto	1938	1940	-	Apr	lastSun	2:00	1:00	D
+# Rule	Toronto	1938	1939	-	Sep	lastSun	2:00	0	S
+# The rules below avoid use of Sun>=25
+# (which pre-2004 versions of zic cannot handle).
+Rule	Toronto	1927	1932	-	Sep	lastSun	2:00	0	S
+Rule	Toronto	1928	1931	-	Apr	lastSun	2:00	1:00	D
+Rule	Toronto	1932	only	-	May	1	2:00	1:00	D
+Rule	Toronto	1933	1940	-	Apr	lastSun	2:00	1:00	D
+Rule	Toronto	1933	only	-	Oct	1	2:00	0	S
+Rule	Toronto	1934	1939	-	Sep	lastSun	2:00	0	S
+Rule	Toronto	1945	1946	-	Sep	lastSun	2:00	0	S
+Rule	Toronto	1946	only	-	Apr	lastSun	2:00	1:00	D
+Rule	Toronto	1947	1949	-	Apr	lastSun	0:00	1:00	D
+Rule	Toronto	1947	1948	-	Sep	lastSun	0:00	0	S
+Rule	Toronto	1949	only	-	Nov	lastSun	0:00	0	S
+Rule	Toronto	1950	1973	-	Apr	lastSun	2:00	1:00	D
+Rule	Toronto	1950	only	-	Nov	lastSun	2:00	0	S
+Rule	Toronto	1951	1956	-	Sep	lastSun	2:00	0	S
+# Shanks says Toronto ended DST a week early in 1971, namely on 1971-10-24,
+# but Mark Brader wrote (2003-05-31) that he checked the 1971-10-30 issue
+# of the Toronto Star, and it said that DST ended 1971-10-31 as usual.
+Rule	Toronto	1957	1973	-	Oct	lastSun	2:00	0	S
+
+# From Paul Eggert (2003-07-27):
+# Willett (1914-03) writes (p. 17) "In the Cities of Fort William, and
+# Port Arthur, Ontario, the principle of the Bill has been in
+# operation for the past three years, and in the City of Moose Jaw,
+# Saskatchewan, for one year."
+
+# From David Bryan via Tory Tronrud, Director/Curator,
+# Thunder Bay Museum (2003-11-12):
+# There is some suggestion, however, that, by-law or not, daylight
+# savings time was being practiced in Fort William and Port Arthur
+# before 1909.... [I]n 1910, the line between the Eastern and Central
+# Time Zones was permanently moved about two hundred miles west to
+# include the Thunder Bay area....  When Canada adopted daylight
+# savings time in 1916, Fort William and Port Arthur, having done so
+# already, did not change their clocks....  During the Second World
+# War,... [t]he cities agreed to implement DST during the summer
+# months for the remainder of the war years.
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Montreal	-4:54:16 -	LMT	1884
+			-5:00	Mont	E%sT	1918
+			-5:00	Canada	E%sT	1919
+			-5:00	Mont	E%sT	1942 Feb  9 2:00s
+			-5:00	Canada	E%sT	1946
+			-5:00	Mont	E%sT	1974
+			-5:00	Canada	E%sT
+Zone America/Toronto	-5:17:32 -	LMT	1895
+			-5:00	Canada	E%sT	1919
+			-5:00	Toronto	E%sT	1942 Feb  9 2:00s
+			-5:00	Canada	E%sT	1946
+			-5:00	Toronto	E%sT	1974
+			-5:00	Canada	E%sT
+Zone America/Thunder_Bay -5:57:00 -	LMT	1895
+			-6:00	-	CST	1910
+			-5:00	-	EST	1942
+			-5:00	Canada	E%sT	1970
+			-5:00	Mont	E%sT	1973
+			-5:00	-	EST	1974
+			-5:00	Canada	E%sT
+Zone America/Nipigon	-5:53:04 -	LMT	1895
+			-5:00	Canada	E%sT	1940 Sep 29
+			-5:00	1:00	EDT	1942 Feb  9 2:00s
+			-5:00	Canada	E%sT
+Zone America/Rainy_River -6:17:56 -	LMT	1895
+			-6:00	Canada	C%sT	1940 Sep 29
+			-6:00	1:00	CDT	1942 Feb  9 2:00s
+			-6:00	Canada	C%sT
+
+
+# Manitoba
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Winn	1916	only	-	Apr	23	0:00	1:00	D
+Rule	Winn	1916	only	-	Sep	17	0:00	0	S
+Rule	Winn	1918	only	-	Apr	14	2:00	1:00	D
+Rule	Winn	1918	only	-	Oct	31	2:00	0	S
+Rule	Winn	1937	only	-	May	16	2:00	1:00	D
+Rule	Winn	1937	only	-	Sep	26	2:00	0	S
+Rule	Winn	1942	only	-	Feb	 9	2:00	1:00	W # War
+Rule	Winn	1945	only	-	Aug	14	23:00u	1:00	P # Peace
+Rule	Winn	1945	only	-	Sep	lastSun	2:00	0	S
+Rule	Winn	1946	only	-	May	12	2:00	1:00	D
+Rule	Winn	1946	only	-	Oct	13	2:00	0	S
+Rule	Winn	1947	1949	-	Apr	lastSun	2:00	1:00	D
+Rule	Winn	1947	1949	-	Sep	lastSun	2:00	0	S
+Rule	Winn	1950	only	-	May	 1	2:00	1:00	D
+Rule	Winn	1950	only	-	Sep	30	2:00	0	S
+Rule	Winn	1951	1960	-	Apr	lastSun	2:00	1:00	D
+Rule	Winn	1951	1958	-	Sep	lastSun	2:00	0	S
+Rule	Winn	1959	only	-	Oct	lastSun	2:00	0	S
+Rule	Winn	1960	only	-	Sep	lastSun	2:00	0	S
+Rule	Winn	1963	only	-	Apr	lastSun	2:00	1:00	D
+Rule	Winn	1963	only	-	Sep	22	2:00	0	S
+Rule	Winn	1966	1986	-	Apr	lastSun	2:00	1:00	D
+Rule	Winn	1966	1986	-	Oct	lastSun	2:00	0	S
+Rule	Winn	1987	max	-	Apr	Sun>=1	2:00	1:00	D
+# From Paul Eggert (2000-10-02):
+# INMS (2000-09-12) says that, since 1988 at least, Manitoba switches from
+# DST at 03:00 local time.  For now, assume it started in 1987.
+Rule	Winn	1987	max	-	Oct	lastSun	2:00s	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Winnipeg	-6:28:36 -	LMT	1887 Jul 16
+			-6:00	Winn	C%sT
+
+
+# Saskatchewan
+
+# From Mark Brader (2003-07-26):
+# The first actual adoption of DST in Canada was at the municipal
+# level.  As the [Toronto] Star put it (1912-06-07), "While people
+# elsewhere have long been talking of legislation to save daylight,
+# the city of Moose Jaw [Saskatchewan] has acted on its own hook."
+# DST in Moose Jaw began on Saturday, 1912-06-01 (no time mentioned:
+# presumably late evening, as below), and would run until "the end of
+# the summer".  The discrepancy between municipal time and railroad
+# time was noted.
+
+# From Paul Eggert (2003-07-27):
+# Willett (1914-03) notes that DST "has been in operation ... in the
+# City of Moose Jaw, Saskatchewan, for one year."
+
+# From Paul Eggert (2000-10-02):
+# Shanks writes that since 1970 most of this region has been like Regina.
+# Some western towns (e.g. Swift Current) switched from MST/MDT to CST in 1972.
+# Other western towns (e.g. Lloydminster) are like Edmonton.
+# Matthews and Vincent (1998) write that Denare Beach and Creighton
+# are like Winnipeg, in violation of Saskatchewan law.
+
+# From W. Jones (1992-11-06):
+# The. . .below is based on information I got from our law library, the
+# provincial archives, and the provincial Community Services department.
+# A precise history would require digging through newspaper archives, and
+# since you didn't say what you wanted, I didn't bother.
+#
+# Saskatchewan is split by a time zone meridian (105W) and over the years
+# the boundary became pretty ragged as communities near it reevaluated
+# their affiliations in one direction or the other.  In 1965 a provincial
+# referendum favoured legislating common time practices.
+#
+# On 15 April 1966 the Time Act (c. T-14, Revised Statutes of
+# Saskatchewan 1978) was proclaimed, and established that the eastern
+# part of Saskatchewan would use CST year round, that districts in
+# northwest Saskatchewan would by default follow CST but could opt to
+# follow Mountain Time rules (thus 1 hour difference in the winter and
+# zero in the summer), and that districts in southwest Saskatchewan would
+# by default follow MT but could opt to follow CST.
+#
+# It took a few years for the dust to settle (I know one story of a town
+# on one time zone having its school in another, such that a mom had to
+# serve her family lunch in two shifts), but presently it seems that only
+# a few towns on the border with Alberta (e.g. Lloydminster) follow MT
+# rules any more; all other districts appear to have used CST year round
+# since sometime in the 1960s.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Regina	1918	only	-	Apr	14	2:00	1:00	D
+Rule	Regina	1918	only	-	Oct	31	2:00	0	S
+Rule	Regina	1930	1934	-	May	Sun>=1	0:00	1:00	D
+Rule	Regina	1930	1934	-	Oct	Sun>=1	0:00	0	S
+Rule	Regina	1937	1941	-	Apr	Sun>=8	0:00	1:00	D
+Rule	Regina	1937	only	-	Oct	Sun>=8	0:00	0	S
+Rule	Regina	1938	only	-	Oct	Sun>=1	0:00	0	S
+Rule	Regina	1939	1941	-	Oct	Sun>=8	0:00	0	S
+Rule	Regina	1942	only	-	Feb	 9	2:00	1:00	W # War
+Rule	Regina	1945	only	-	Aug	14	23:00u	1:00	P # Peace
+Rule	Regina	1945	only	-	Sep	lastSun	2:00	0	S
+Rule	Regina	1946	only	-	Apr	Sun>=8	2:00	1:00	D
+Rule	Regina	1946	only	-	Oct	Sun>=8	2:00	0	S
+Rule	Regina	1947	1957	-	Apr	lastSun	2:00	1:00	D
+Rule	Regina	1947	1957	-	Sep	lastSun	2:00	0	S
+Rule	Regina	1959	only	-	Apr	lastSun	2:00	1:00	D
+Rule	Regina	1959	only	-	Oct	lastSun	2:00	0	S
+#
+Rule	Swift	1957	only	-	Apr	lastSun	2:00	1:00	D
+Rule	Swift	1957	only	-	Oct	lastSun	2:00	0	S
+Rule	Swift	1959	1961	-	Apr	lastSun	2:00	1:00	D
+Rule	Swift	1959	only	-	Oct	lastSun	2:00	0	S
+Rule	Swift	1960	1961	-	Sep	lastSun	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Regina	-6:58:36 -	LMT	1905 Sep
+			-7:00	Regina	M%sT	1960 Apr lastSun 2:00
+			-6:00	-	CST
+Zone America/Swift_Current -7:11:20 -	LMT	1905 Sep
+			-7:00	Canada	M%sT	1946 Apr lastSun 2:00
+			-7:00	Regina	M%sT	1950
+			-7:00	Swift	M%sT	1972 Apr lastSun 2:00
+			-6:00	-	CST
+
+
+# Alberta
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Edm	1918	1919	-	Apr	Sun>=8	2:00	1:00	D
+Rule	Edm	1918	only	-	Oct	31	2:00	0	S
+Rule	Edm	1919	only	-	May	27	2:00	0	S
+Rule	Edm	1920	1923	-	Apr	lastSun	2:00	1:00	D
+Rule	Edm	1920	only	-	Oct	lastSun	2:00	0	S
+Rule	Edm	1921	1923	-	Sep	lastSun	2:00	0	S
+Rule	Edm	1942	only	-	Feb	 9	2:00	1:00	W # War
+Rule	Edm	1945	only	-	Aug	14	23:00u	1:00	P # Peace
+Rule	Edm	1945	only	-	Sep	lastSun	2:00	0	S
+Rule	Edm	1947	only	-	Apr	lastSun	2:00	1:00	D
+Rule	Edm	1947	only	-	Sep	lastSun	2:00	0	S
+Rule	Edm	1967	only	-	Apr	lastSun	2:00	1:00	D
+Rule	Edm	1967	only	-	Oct	lastSun	2:00	0	S
+Rule	Edm	1969	only	-	Apr	lastSun	2:00	1:00	D
+Rule	Edm	1969	only	-	Oct	lastSun	2:00	0	S
+Rule	Edm	1972	1986	-	Apr	lastSun	2:00	1:00	D
+Rule	Edm	1972	max	-	Oct	lastSun	2:00	0	S
+Rule	Edm	1987	max	-	Apr	Sun>=1	2:00	1:00	D
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Edmonton	-7:33:52 -	LMT	1906 Sep
+			-7:00	Edm	M%sT
+
+
+# British Columbia
+
+# From Paul Eggert (2000-10-02):
+# Shanks writes that since 1970 most of this region has been like Vancouver.
+# Dawson Creek uses MST.  Much of east BC is like Edmonton.
+# Matthews and Vincent (1998) write that Creston is like Dawson Creek.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Vanc	1918	only	-	Apr	14	2:00	1:00	D
+Rule	Vanc	1918	only	-	Oct	31	2:00	0	S
+Rule	Vanc	1942	only	-	Feb	 9	2:00	1:00	W # War
+Rule	Vanc	1945	only	-	Aug	14	23:00u	1:00	P # Peace
+Rule	Vanc	1945	only	-	Sep	30	2:00	0	S
+Rule	Vanc	1946	1986	-	Apr	lastSun	2:00	1:00	D
+Rule	Vanc	1946	only	-	Oct	13	2:00	0	S
+Rule	Vanc	1947	1961	-	Sep	lastSun	2:00	0	S
+Rule	Vanc	1962	max	-	Oct	lastSun	2:00	0	S
+Rule	Vanc	1987	max	-	Apr	Sun>=1	2:00	1:00	D
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Vancouver	-8:12:28 -	LMT	1884
+			-8:00	Vanc	P%sT
+Zone America/Dawson_Creek -8:00:56 -	LMT	1884
+			-8:00	Canada	P%sT	1947
+			-8:00	Vanc	P%sT	1972 Aug 30 2:00
+			-7:00	-	MST
+
+
+# Northwest Territories, Nunavut, Yukon
+
+# From Paul Eggert (1999-10-29):
+# Dawson switched to PST in 1973.  Inuvik switched to MST in 1979.
+# Mathew Englander (1996-10-07) gives the following refs:
+#	* 1967. Paragraph 28(34)(g) of the Interpretation Act, S.C. 1967-68,
+#	c. 7 defines Yukon standard time as UTC-9.  This is still valid;
+#	see Interpretation Act, R.S.C. 1985, c. I-21, s. 35(1).
+#	* C.O. 1973/214 switched Yukon to PST on 1973-10-28 00:00.
+#	* O.I.C. 1980/02 established DST.
+#	* O.I.C. 1987/056 changed DST to Apr firstSun 2:00 to Oct lastSun 2:00.
+# Shanks says Yukon's 1973-10-28 switch was at 2:00; go with Englander.
+
+# From Rives McDow (1999-09-04):
+# Nunavut ... moved ... to incorporate the whole territory into one time zone.
+# <a href="http://www.nunatsiaq.com/nunavut/nvt90903_13.html">
+# Nunavut moves to single time zone Oct. 31
+# </a>
+#
+# From Antoine Leca (1999-09-06):
+# We then need to create a new timezone for the Kitikmeot region of Nunavut
+# to differentiate it from the Yellowknife region.
+
+# From Paul Eggert (1999-09-20):
+# <a href="http://www.nunavut.com/basicfacts/english/basicfacts_1territory.html">
+# Basic Facts: The New Territory
+# </a> (1999) reports that Pangnirtung operates on eastern time,
+# and that Coral Harbour does not observe DST.  We don't know when
+# Pangnirtung switched to eastern time; we'll guess 1995.
+
+# From Rives McDow (1999-11-08):
+# On October 31, when the rest of Nunavut went to Central time,
+# Pangnirtung wobbled.  Here is the result of their wobble:
+#
+# The following businesses and organizations in Pangnirtung use Central Time:
+#
+#	First Air, Power Corp, Nunavut Construction, Health Center, RCMP,
+#	Eastern Arctic National Parks, A & D Specialist
+#
+# The following businesses and organizations in Pangnirtung use Eastern Time:
+#
+#	Hamlet office, All other businesses, Both schools, Airport operator
+#
+# This has made for an interesting situation there, which warranted the news.
+# No one there that I spoke with seems concerned, or has plans to
+# change the local methods of keeping time, as it evidently does not
+# really interfere with any activities or make things difficult locally.
+# They plan to celebrate New Year's turn-over twice, one hour apart,
+# so it appears that the situation will last at least that long.
+# The Nunavut Intergovernmental Affairs hopes that they will "come to
+# their senses", but the locals evidently don't see any problem with
+# the current state of affairs.
+
+# From Michaela Rodrigue, writing in the
+# <a href="http://www.nunatsiaq.com/archives/nunavut991130/nvt91119_17.html">
+# Nunatsiaq News (1999-11-19)</a>:
+# Clyde River, Pangnirtung and Sanikiluaq now operate with two time zones,
+# central - or Nunavut time - for government offices, and eastern time
+# for municipal offices and schools....  Igloolik [was similar but then]
+# made the switch to central time on Saturday, Nov. 6.
+
+# From Paul Eggert (2000-10-02):
+# Matthews and Vincent (1998) say the following, but we lack histories
+# for these potential new Zones.
+#
+# The Canadian Forces station at Alert uses Eastern Time while the
+# handful of residents at the Eureka weather station [in the Central
+# zone] skip daylight savings.  Baffin Island, which is crossed by the
+# Central, Eastern and Atlantic Time zones only uses Eastern Time.
+# Gjoa Haven, Taloyoak and Pelly Bay all use Mountain instead of
+# Central Time and Southampton Island [in the Central zone] is not
+# required to use daylight savings.
+
+# From
+# <a href="http://www.nunatsiaq.com/archives/nunavut001130/nvt21110_02.html">
+# Nunavut now has two time zones
+# </a> (2000-11-10):
+# The Nunavut government would allow its employees in Kugluktuk and
+# Cambridge Bay to operate on central time year-round, putting them
+# one hour behind the rest of Nunavut for six months during the winter.
+# At the end of October the two communities had rebelled against
+# Nunavut's unified time zone, refusing to shift to eastern time with
+# the rest of the territory for the winter.  Cambridge Bay remained on
+# central time, while Kugluktuk, even farther west, reverted to
+# mountain time, which they had used before the advent of Nunavut's
+# unified time zone in 1999.
+#
+# From Rives McDow (2001-01-20), quoting the Nunavut government:
+# The preceding decision came into effect at midnight, Saturday Nov 4, 2000.
+
+# From Paul Eggert (2000-12-04):
+# Let's just keep track of the official times for now.
+
+# From Rives McDow (2001-03-07):
+# The premier of Nunavut has issued a ministerial statement advising
+# that effective 2001-04-01, the territory of Nunavut will revert
+# back to three time zones (mountain, central, and eastern).  Of the
+# cities in Nunavut, Coral Harbor is the only one that I know of that
+# has said it will not observe dst, staying on EST year round.  I'm
+# checking for more info, and will get back to you if I come up with
+# more.
+# [Also see <http://www.nunatsiaq.com/nunavut/nvt10309_06.html> (2001-03-09).]
+
+# From Gwillim Law (2005-05-21):
+# According to maps at
+# http://inms-ienm.nrc-cnrc.gc.ca/images/time_services/TZ01SWE.jpg
+# http://inms-ienm.nrc-cnrc.gc.ca/images/time_services/TZ01SSE.jpg
+# (both dated 2003), and
+# http://www.canadiangeographic.ca/Magazine/SO98/geomap.asp
+# (from a 1998 Canadian Geographic article), the de facto and de jure time
+# for Southampton Island (at the north end of Hudson Bay) is UTC-5 all year
+# round.  Using Google, it's easy to find other websites that confirm this.
+# I wasn't able to find how far back this time regimen goes, but since it
+# predates the creation of Nunavut, it probably goes back many years....
+# The Inuktitut name of Coral Harbour is Sallit, but it's rarely used.
+#
+# From Paul Eggert (2005-07-26):
+# For lack of better information, assume that Southampton Island observed
+# daylight saving only during wartime.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	NT_YK	1918	only	-	Apr	14	2:00	1:00	D
+Rule	NT_YK	1918	only	-	Oct	27	2:00	0	S
+Rule	NT_YK	1919	only	-	May	25	2:00	1:00	D
+Rule	NT_YK	1919	only	-	Nov	 1	0:00	0	S
+Rule	NT_YK	1942	only	-	Feb	 9	2:00	1:00	W # War
+Rule	NT_YK	1945	only	-	Aug	14	23:00u	1:00	P # Peace
+Rule	NT_YK	1945	only	-	Sep	30	2:00	0	S
+Rule	NT_YK	1965	only	-	Apr	lastSun	0:00	2:00	DD
+Rule	NT_YK	1965	only	-	Oct	lastSun	2:00	0	S
+Rule	NT_YK	1980	1986	-	Apr	lastSun	2:00	1:00	D
+Rule	NT_YK	1980	max	-	Oct	lastSun	2:00	0	S
+Rule	NT_YK	1987	max	-	Apr	Sun>=1	2:00	1:00	D
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Pangnirtung -4:22:56 -	LMT	1884
+			-4:00	NT_YK	A%sT	1995 Apr Sun>=1 2:00
+			-5:00	Canada	E%sT	1999 Oct 31 2:00
+			-6:00	Canada	C%sT	2000 Oct 29 2:00
+			-5:00	Canada	E%sT
+Zone America/Iqaluit	-4:33:52 -	LMT	1884 # Frobisher Bay before 1987
+			-5:00	NT_YK	E%sT	1999 Oct 31 2:00
+			-6:00	Canada	C%sT	2000 Oct 29 2:00
+			-5:00	Canada	E%sT
+Zone America/Coral_Harbour -5:32:40 -	LMT	1884
+			-5:00	NT_YK	E%sT	1946
+			-5:00	-	EST
+Zone America/Rankin_Inlet -6:08:40 -	LMT	1884
+			-6:00	NT_YK	C%sT	2000 Oct 29 2:00
+			-5:00	-	EST	2001 Apr  1 3:00
+			-6:00	Canada	C%sT
+Zone America/Cambridge_Bay -7:00:20 -	LMT	1884
+			-7:00	NT_YK	M%sT	1999 Oct 31 2:00
+			-6:00	Canada	C%sT	2000 Oct 29 2:00
+			-5:00	-	EST	2000 Nov  5 0:00
+			-6:00	-	CST	2001 Apr  1 3:00
+			-7:00	Canada	M%sT
+Zone America/Yellowknife -7:37:24 -	LMT	1884
+			-7:00	NT_YK	M%sT
+Zone America/Inuvik	-8:54:00 -	LMT	1884
+			-8:00	NT_YK	P%sT	1979 Apr lastSun 2:00
+			-7:00	NT_YK	M%sT
+Zone America/Whitehorse	-9:00:12 -	LMT	1900 Aug 20
+			-9:00	NT_YK	Y%sT	1966 Jul 1 2:00
+			-8:00	NT_YK	P%sT
+Zone America/Dawson	-9:17:40 -	LMT	1900 Aug 20
+			-9:00	NT_YK	Y%sT	1973 Oct 28 0:00
+			-8:00	NT_YK	P%sT
+
+
+###############################################################################
+
+# Mexico
+
+# From Paul Eggert (2001-03-05):
+# The Investigation and Analysis Service of the
+# Mexican Library of Congress (MLoC) has published a
+# <a href="http://www.cddhcu.gob.mx/bibliot/publica/inveyana/polisoc/horver/">
+# history of Mexican local time (in Spanish)
+# </a>.
+#
+# Here are the discrepancies between Shanks and the MLoC.
+# (In all cases we go with the MLoC.)
+# Shanks reports that Baja was at -8:00 in 1922/1923.
+# Shanks says the 1930 transition in Baja was 1930-11-16.
+# Shanks reports no DST during summer 1931.
+# Shanks reports a transition at 1932-03-30 23:00, not 1932-04-01.
+# Shanks does not report transitions for Baja in 1945 or 1948.
+# Shanks reports southern Mexico transitions on 1981-12-01, not 12-23.
+# Shanks says Quintana Roo switched to -6:00 on 1982-12-02, and to -5:00
+# on 1997-10-26 at 02:00.
+
+# From Gwillim Law (2001-02-20):
+# There are some other discrepancies between the Decrees page and the
+# tz database.  I think they can best be explained by supposing that
+# the researchers who prepared the Decrees page failed to find some of
+# the relevant documents.
+
+# From Paul Eggert (2000-07-26):
+# Shanks gives 1942-04-01 instead of 1942-04-24, and omits the 1981
+# and 1988 DST experiments.  Go with spin.com.mx.
+
+# From Alan Perry (1996-02-15):
+# A guy from our Mexico subsidiary finally found the Presidential Decree
+# outlining the timezone changes in Mexico.
+#
+# ------------- Begin Forwarded Message -------------
+#
+# I finally got my hands on the Official Presidential Decree that sets up the
+# rules for the DST changes. The rules are:
+#
+# 1. The country is divided in 3 timezones:
+#    - Baja California Norte (the Mexico/BajaNorte TZ)
+#    - Baja California Sur, Nayarit, Sinaloa and Sonora (the Mexico/BajaSur TZ)
+#    - The rest of the country (the Mexico/General TZ)
+#
+# 2. From the first Sunday in April at 2:00 AM to the last Sunday in October
+#    at 2:00 AM, the times in each zone are as follows:
+#    BajaNorte: GMT+7
+#    BajaSur:   GMT+6
+#    General:   GMT+5
+#
+# 3. The rest of the year, the times are as follows:
+#    BajaNorte: GMT+8
+#    BajaSur:   GMT+7
+#    General:   GMT+6
+#
+# The Decree was published in Mexico's Official Newspaper on January 4th.
+#
+# -------------- End Forwarded Message --------------
+# From Paul Eggert (1996-06-12):
+# For an English translation of the decree, see
+# <a href="http://mexico-travel.com/extra/timezone_eng.html">
+# ``Diario Oficial: Time Zone Changeover'' (1996-01-04).
+# </a>
+
+# From Rives McDow (1998-10-08):
+# The State of Quintana Roo has reverted back to central STD and DST times
+# (i.e. UTC -0600 and -0500 as of 1998-08-02).
+
+# From Rives McDow (2000-01-10):
+# Effective April 4, 1999 at 2:00 AM local time, Sonora changed to the time
+# zone 5 hours from the International Date Line, and will not observe daylight
+# savings time so as to stay on the same time zone as the southern part of
+# Arizona year round.
+
+# From Jesper Norgaard, translating
+# <http://www.reforma.com/nacional/articulo/064327/> (2001-01-17):
+# In Oaxaca, the 55.000 teachers from the Section 22 of the National
+# Syndicate of Education Workers, refuse to apply daylight saving each
+# year, so that the more than 10,000 schools work at normal hour the
+# whole year.
+
+# From Gwillim Law (2001-01-19):
+# <http://www.reforma.com/negocios_y_dinero/articulo/064481/> ... says
+# (translated):...
+# January 17, 2000 - The Energy Secretary, Ernesto Martens, announced
+# that Summer Time will be reduced from seven to five months, starting
+# this year....
+# <http://www.publico.com.mx/scripts/texto3.asp?action=pagina&pag=21&pos=p&secc=naci&date=01/17/2001>
+# [translated], says "summer time will ... take effect on the first Sunday
+# in May, and end on the last Sunday of September.
+
+# From Arthur David Olson (2001-01-25):
+# The 2001-01-24 traditional Washington Post contained the page one
+# story "Timely Issue Divides Mexicans."...
+# http://www.washingtonpost.com/wp-dyn/articles/A37383-2001Jan23.html
+# ... Mexico City Mayor Lopez Obrador "...is threatening to keep
+# Mexico City and its 20 million residents on a different time than
+# the rest of the country..." In particular, Lopez Obrador would abolish
+# observation of Daylight Saving Time.
+
+# <a href="http://www.conae.gob.mx/ahorro/decretohorver2001.html#decre">
+# Official statute published by the Energy Department
+# </a> (2001-02-01) shows Baja and Chihauhua as still using US DST rules,
+# and Sonora with no DST.  This was reported by Jesper Norgaard (2001-02-03).
+
+# From Paul Eggert (2001-03-03):
+#
+# <a href="http://www.latimes.com/news/nation/20010303/t000018766.html">
+# James F. Smith writes in today's LA Times
+# </a>
+# * Sonora will continue to observe standard time.
+# * Last week Mexico City's mayor Andres Manuel Lopez Obrador decreed that
+#   the Federal District will not adopt DST.
+# * 4 of 16 district leaders announced they'll ignore the decree.
+# * The decree does not affect federal-controlled facilities including
+#   the airport, banks, hospitals, and schools.
+#
+# For now we'll assume that the Federal District will bow to federal rules.
+
+# From Jesper Norgaard (2001-04-01):
+# I found some references to the Mexican application of daylight
+# saving, which modifies what I had already sent you, stating earlier
+# that a number of northern Mexican states would go on daylight
+# saving. The modification reverts this to only cover Baja California
+# (Norte), while all other states (except Sonora, who has no daylight
+# saving all year) will follow the original decree of president
+# Vicente Fox, starting daylight saving May 6, 2001 and ending
+# September 30, 2001.
+# References: "Diario de Monterrey" <www.diariodemonterrey.com/index.asp>
+# Palabra <http://palabra.infosel.com/010331/primera/ppri3101.pdf> (2001-03-31)
+
+# From Reuters (2001-09-04):
+# Mexico's Supreme Court on Tuesday declared that daylight savings was
+# unconstitutional in Mexico City, creating the possibility the
+# capital will be in a different time zone from the rest of the nation
+# next year....  The Supreme Court's ruling takes effect at 2:00
+# a.m. (0800 GMT) on Sept. 30, when Mexico is scheduled to revert to
+# standard time. "This is so residents of the Federal District are not
+# subject to unexpected time changes," a statement from the court said.
+
+# From Jesper Norgaard Welen (2002-03-12):
+# ... consulting my local grocery store(!) and my coworkers, they all insisted
+# that a new decision had been made to reinstate US style DST in Mexico....
+# http://www.conae.gob.mx/ahorro/horaver2001_m1_2002.html (2002-02-20)
+# confirms this.  Sonora as usual is the only state where DST is not applied.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Mexico	1939	only	-	Feb	5	0:00	1:00	D
+Rule	Mexico	1939	only	-	Jun	25	0:00	0	S
+Rule	Mexico	1940	only	-	Dec	9	0:00	1:00	D
+Rule	Mexico	1941	only	-	Apr	1	0:00	0	S
+Rule	Mexico	1943	only	-	Dec	16	0:00	1:00	W # War
+Rule	Mexico	1944	only	-	May	1	0:00	0	S
+Rule	Mexico	1950	only	-	Feb	12	0:00	1:00	D
+Rule	Mexico	1950	only	-	Jul	30	0:00	0	S
+Rule	Mexico	1996	2000	-	Apr	Sun>=1	2:00	1:00	D
+Rule	Mexico	1996	2000	-	Oct	lastSun	2:00	0	S
+Rule	Mexico	2001	only	-	May	Sun>=1	2:00	1:00	D
+Rule	Mexico	2001	only	-	Sep	lastSun	2:00	0	S
+Rule	Mexico	2002	max	-	Apr	Sun>=1	2:00	1:00	D
+Rule	Mexico	2002	max	-	Oct	lastSun	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+# Quintana Roo
+Zone America/Cancun	-5:47:04 -	LMT	1922 Jan  1  0:12:56
+			-6:00	-	CST	1981 Dec 23
+			-5:00	Mexico	E%sT	1998 Aug  2  2:00
+			-6:00	Mexico	C%sT
+# Campeche, Yucatan
+Zone America/Merida	-5:58:28 -	LMT	1922 Jan  1  0:01:32
+			-6:00	-	CST	1981 Dec 23
+			-5:00	-	EST	1982 Dec  2
+			-6:00	Mexico	C%sT
+# Coahuila, Durango, Nuevo Leon, Tamaulipas
+Zone America/Monterrey	-6:41:16 -	LMT	1921 Dec 31 23:18:44
+			-6:00	-	CST	1988
+			-6:00	US	C%sT	1989
+			-6:00	Mexico	C%sT
+# Central Mexico
+Zone America/Mexico_City -6:36:36 -	LMT	1922 Jan  1  0:23:24
+			-7:00	-	MST	1927 Jun 10 23:00
+			-6:00	-	CST	1930 Nov 15
+			-7:00	-	MST	1931 May  1 23:00
+			-6:00	-	CST	1931 Oct
+			-7:00	-	MST	1932 Apr  1
+			-6:00	Mexico	C%sT	2001 Sep 30 02:00
+			-6:00	-	CST	2002 Feb 20
+			-6:00	Mexico	C%sT
+# Chihuahua
+Zone America/Chihuahua	-7:04:20 -	LMT	1921 Dec 31 23:55:40
+			-7:00	-	MST	1927 Jun 10 23:00
+			-6:00	-	CST	1930 Nov 15
+			-7:00	-	MST	1931 May  1 23:00
+			-6:00	-	CST	1931 Oct
+			-7:00	-	MST	1932 Apr  1
+			-6:00	-	CST	1996
+			-6:00	Mexico	C%sT	1998
+			-6:00	-	CST	1998 Apr Sun>=1 3:00
+			-7:00	Mexico	M%sT
+# Sonora
+Zone America/Hermosillo	-7:23:52 -	LMT	1921 Dec 31 23:36:08
+			-7:00	-	MST	1927 Jun 10 23:00
+			-6:00	-	CST	1930 Nov 15
+			-7:00	-	MST	1931 May  1 23:00
+			-6:00	-	CST	1931 Oct
+			-7:00	-	MST	1932 Apr  1
+			-6:00	-	CST	1942 Apr 24
+			-7:00	-	MST	1949 Jan 14
+			-8:00	-	PST	1970
+			-7:00	Mexico	M%sT	1999
+			-7:00	-	MST
+# Baja California Sur, Nayarit, Sinaloa
+Zone America/Mazatlan	-7:05:40 -	LMT	1921 Dec 31 23:54:20
+			-7:00	-	MST	1927 Jun 10 23:00
+			-6:00	-	CST	1930 Nov 15
+			-7:00	-	MST	1931 May  1 23:00
+			-6:00	-	CST	1931 Oct
+			-7:00	-	MST	1932 Apr  1
+			-6:00	-	CST	1942 Apr 24
+			-7:00	-	MST	1949 Jan 14
+			-8:00	-	PST	1970
+			-7:00	Mexico	M%sT
+# Baja California
+Zone America/Tijuana	-7:48:04 -	LMT	1922 Jan  1  0:11:56
+			-7:00	-	MST	1924
+			-8:00	-	PST	1927 Jun 10 23:00
+			-7:00	-	MST	1930 Nov 15
+			-8:00	-	PST	1931 Apr  1
+			-8:00	1:00	PDT	1931 Sep 30
+			-8:00	-	PST	1942 Apr 24
+			-8:00	1:00	PWT	1945 Nov 12
+			-8:00	-	PST	1948 Apr  5
+			-8:00	1:00	PDT	1949 Jan 14
+			-8:00	-	PST	1954
+			-8:00	CA	P%sT	1961
+			-8:00	-	PST	1976
+			-8:00	US	P%sT	1996
+			-8:00	Mexico	P%sT	2001
+			-8:00	US	P%sT	2002 Feb 20
+			-8:00	Mexico	P%sT
+# From Paul Eggert (2001-03-05):
+# Formerly there was an America/Ensenada zone, which differed from
+# America/Tijuana only in that it did not observe DST from 1976
+# through 1995.  This was as per Shanks.  However, Guy Harris reports
+# that the 1987 OAG says "Only Ensenada, Mexicale, San Felipe and
+# Tijuana observe DST," which contradicts Shanks but does imply that
+# DST-observance was a town-by-town matter back then.  This concerns
+# data after 1970 so most likely there should be at least one Zone
+# other than America/Tijuana for Baja, but it's not clear yet what its
+# name or contents should be.
+#
+# Revillagigedo Is
+# no information
+
+###############################################################################
+
+# Anguilla
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Anguilla	-4:12:16 -	LMT	1912 Mar 2
+			-4:00	-	AST
+
+# Antigua and Barbuda
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Antigua	-4:07:12 -	LMT	1912 Mar 2
+			-5:00	-	EST	1951
+			-4:00	-	AST
+
+# Bahamas
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Bahamas	1964	max	-	Oct	lastSun	2:00	0	S
+Rule	Bahamas	1964	1986	-	Apr	lastSun	2:00	1:00	D
+Rule	Bahamas	1987	max	-	Apr	Sun>=1	2:00	1:00	D
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Nassau	-5:09:24 -	LMT	1912 Mar 2
+			-5:00	Bahamas	E%sT
+
+# Barbados
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Barb	1977	only	-	Jun	12	2:00	1:00	D
+Rule	Barb	1977	1978	-	Oct	Sun>=1	2:00	0	S
+Rule	Barb	1978	1980	-	Apr	Sun>=15	2:00	1:00	D
+Rule	Barb	1979	only	-	Sep	30	2:00	0	S
+Rule	Barb	1980	only	-	Sep	25	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Barbados	-3:58:28 -	LMT	1924		# Bridgetown
+			-3:58:28 -	BMT	1932	  # Bridgetown Mean Time
+			-4:00	Barb	A%sT
+
+# Belize
+# Whitman entirely disagrees with Shanks; go with Shanks.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Belize	1918	1942	-	Oct	Sun>=2	0:00	0:30	HD
+Rule	Belize	1919	1943	-	Feb	Sun>=9	0:00	0	S
+Rule	Belize	1973	only	-	Dec	 5	0:00	1:00	D
+Rule	Belize	1974	only	-	Feb	 9	0:00	0	S
+Rule	Belize	1982	only	-	Dec	18	0:00	1:00	D
+Rule	Belize	1983	only	-	Feb	12	0:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Belize	-5:52:48 -	LMT	1912 Apr
+			-6:00	Belize	C%sT
+
+# Bermuda
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Atlantic/Bermuda	-4:19:04 -	LMT	1930 Jan  1 2:00    # Hamilton
+			-4:00	-	AST	1974 Apr 28 2:00
+			-4:00	Bahamas	A%sT
+
+# Cayman Is
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Cayman	-5:25:32 -	LMT	1890		# Georgetown
+			-5:07:12 -	KMT	1912 Feb    # Kingston Mean Time
+			-5:00	-	EST
+
+# Costa Rica
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	CR	1979	1980	-	Feb	lastSun	0:00	1:00	D
+Rule	CR	1979	1980	-	Jun	Sun>=1	0:00	0	S
+Rule	CR	1991	1992	-	Jan	Sat>=15	0:00	1:00	D
+# IATA SSIM (1991-09) says the following was at 1:00; go with Shanks.
+Rule	CR	1991	only	-	Jul	 1	0:00	0	S
+Rule	CR	1992	only	-	Mar	15	0:00	0	S
+# There are too many San Joses elsewhere, so we'll use `Costa Rica'.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Costa_Rica	-5:36:20 -	LMT	1890		# San Jose
+			-5:36:20 -	SJMT	1921 Jan 15 # San Jose Mean Time
+			-6:00	CR	C%sT
+# Coco
+# no information; probably like America/Costa_Rica
+
+# Cuba
+
+# From Arthur David Olson (1999-03-29):
+# The 1999-03-28 exhibition baseball game held in Havana, Cuba, between
+# the Cuban National Team and the Baltimore Orioles was carried live on
+# the Orioles Radio Network, including affiliate WTOP in Washington, DC.
+# During the game, play-by-play announcer Jim Hunter noted that
+# "We'll be losing two hours of sleep...Cuba switched to Daylight Saving
+# Time today."  (The "two hour" remark referred to losing one hour of
+# sleep on 1999-03-28--when the announcers were in Cuba as it switched
+# to DST--and one more hour on 1999-04-04--when the announcers will have
+# returned to Baltimore, which switches on that date.)
+
+# From Evert van der Veer via Steffen Thorsen (2004-10-28):
+# Cuba is not going back to standard time this year.
+# From Paul Eggert (2004-10-28):
+# http://www.granma.cu/ingles/2004/septiembre/juev30/41medid-i.html
+# says that it's due to a problem at the Antonio Guiteras
+# thermoelectric plant, and says "This October there will be no return
+# to normal hours (after daylight saving time)".
+# For now, let's assume that it's a one-year temporary measure.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Cuba	1928	only	-	Jun	10	0:00	1:00	D
+Rule	Cuba	1928	only	-	Oct	10	0:00	0	S
+Rule	Cuba	1940	1942	-	Jun	Sun>=1	0:00	1:00	D
+Rule	Cuba	1940	1942	-	Sep	Sun>=1	0:00	0	S
+Rule	Cuba	1945	1946	-	Jun	Sun>=1	0:00	1:00	D
+Rule	Cuba	1945	1946	-	Sep	Sun>=1	0:00	0	S
+Rule	Cuba	1965	only	-	Jun	1	0:00	1:00	D
+Rule	Cuba	1965	only	-	Sep	30	0:00	0	S
+Rule	Cuba	1966	only	-	May	29	0:00	1:00	D
+Rule	Cuba	1966	only	-	Oct	2	0:00	0	S
+Rule	Cuba	1967	only	-	Apr	8	0:00	1:00	D
+Rule	Cuba	1967	1968	-	Sep	Sun>=8	0:00	0	S
+Rule	Cuba	1968	only	-	Apr	14	0:00	1:00	D
+Rule	Cuba	1969	1977	-	Apr	lastSun	0:00	1:00	D
+Rule	Cuba	1969	1971	-	Oct	lastSun	0:00	0	S
+Rule	Cuba	1972	1974	-	Oct	8	0:00	0	S
+Rule	Cuba	1975	1977	-	Oct	lastSun	0:00	0	S
+Rule	Cuba	1978	only	-	May	7	0:00	1:00	D
+Rule	Cuba	1978	1990	-	Oct	Sun>=8	0:00	0	S
+Rule	Cuba	1979	1980	-	Mar	Sun>=15	0:00	1:00	D
+Rule	Cuba	1981	1985	-	May	Sun>=5	0:00	1:00	D
+Rule	Cuba	1986	1989	-	Mar	Sun>=14	0:00	1:00	D
+Rule	Cuba	1990	1997	-	Apr	Sun>=1	0:00	1:00	D
+Rule	Cuba	1991	1995	-	Oct	Sun>=8	0:00s	0	S
+Rule	Cuba	1996	only	-	Oct	 6	0:00s	0	S
+Rule	Cuba	1997	only	-	Oct	12	0:00s	0	S
+Rule	Cuba	1998	1999	-	Mar	lastSun	0:00s	1:00	D
+Rule	Cuba	1998	2003	-	Oct	lastSun	0:00s	0	S
+Rule	Cuba	2000	max	-	Apr	Sun>=1	0:00s	1:00	D
+Rule	Cuba	2005	max	-	Oct	lastSun	0:00s	0	S
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Havana	-5:29:28 -	LMT	1890
+			-5:29:36 -	HMT	1925 Jul 19 12:00 # Havana MT
+			-5:00	Cuba	C%sT
+
+# Dominica
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Dominica	-4:05:36 -	LMT	1911 Jul 1 0:01		# Roseau
+			-4:00	-	AST
+
+# Dominican Republic
+
+# From Steffen Thorsen (2000-10-30):
+# Enrique Morales reported to me that the Dominican Republic has changed the
+# time zone to Eastern Standard Time as of Sunday 29 at 2 am....
+# http://www.listin.com.do/antes/261000/republica/princi.html
+
+# From Paul Eggert (2000-12-04):
+# That URL (2000-10-26, in Spanish) says they planned to use US-style DST.
+
+# From Rives McDow (2000-12-01):
+# Dominican Republic changed its mind and presidential decree on Tuesday,
+# November 28, 2000, with a new decree.  On Sunday, December 3 at 1:00 AM the
+# Dominican Republic will be reverting to 8 hours from the International Date
+# Line, and will not be using DST in the foreseeable future.  The reason they
+# decided to use DST was to be in synch with Puerto Rico, who was also going
+# to implement DST.  When Puerto Rico didn't implement DST, the president
+# decided to revert.
+
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	DR	1966	only	-	Oct	30	0:00	1:00	D
+Rule	DR	1967	only	-	Feb	28	0:00	0	S
+Rule	DR	1969	1973	-	Oct	lastSun	0:00	0:30	HD
+Rule	DR	1970	only	-	Feb	21	0:00	0	S
+Rule	DR	1971	only	-	Jan	20	0:00	0	S
+Rule	DR	1972	1974	-	Jan	21	0:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Santo_Domingo -4:39:36 -	LMT	1890
+			-4:40	-	SDMT	1933 Apr  1 12:00 # S. Dom. MT
+			-5:00	DR	E%sT	1974 Oct 27
+			-4:00	-	AST	2000 Oct 29 02:00
+			-5:00	US	E%sT	2000 Dec  3 01:00
+			-4:00	-	AST
+
+# El Salvador
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Salv	1987	1988	-	May	Sun>=1	0:00	1:00	D
+Rule	Salv	1987	1988	-	Sep	lastSun	0:00	0	S
+# There are too many San Salvadors elsewhere, so use America/El_Salvador
+# instead of America/San_Salvador.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/El_Salvador -5:56:48 -	LMT	1921		# San Salvador
+			-6:00	Salv	C%sT
+
+# Grenada
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Grenada	-4:07:00 -	LMT	1911 Jul	# St George's
+			-4:00	-	AST
+
+# Guadeloupe
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Guadeloupe	-4:06:08 -	LMT	1911 Jun 8	# Pointe a Pitre
+			-4:00	-	AST
+
+# Guatemala
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Guat	1973	only	-	Nov	25	0:00	1:00	D
+Rule	Guat	1974	only	-	Feb	24	0:00	0	S
+Rule	Guat	1983	only	-	May	21	0:00	1:00	D
+Rule	Guat	1983	only	-	Sep	22	0:00	0	S
+Rule	Guat	1991	only	-	Mar	23	0:00	1:00	D
+Rule	Guat	1991	only	-	Sep	 7	0:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Guatemala	-6:02:04 -	LMT	1918 Oct 5
+			-6:00	Guat	C%sT
+
+# Haiti
+# From Gwillim Law (2005-04-15):
+# Risto O. Nykanen wrote me that Haiti is now on DST.
+# I searched for confirmation, and I found a
+# <a href="http://www.haitianconsulate.org/time.doc"> press release
+# on the Web page of the Haitian Consulate in Chicago (2005-03-31),
+# </a>.  Translated from French, it says:
+#
+#  "The Prime Minister's Communication Office notifies the public in general
+#   and the press in particular that, following a decision of the Interior
+#   Ministry and the Territorial Collectivities [I suppose that means the
+#   provinces], Haiti will move to Eastern Daylight Time in the night from next
+#   Saturday the 2nd to Sunday the 3rd.
+#
+#  "Consequently, the Prime Minister's Communication Office wishes to inform
+#   the population that the country's clocks will be set forward one hour
+#   starting at midnight.  This provision will hold until the last Saturday in
+#   October 2005.
+#
+#  "Port-au-Prince, March 31, 2005"
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Haiti	1983	only	-	May	8	0:00	1:00	D
+Rule	Haiti	1984	1987	-	Apr	lastSun	0:00	1:00	D
+Rule	Haiti	1983	1987	-	Oct	lastSun	0:00	0	S
+# Shanks says AT is 2:00, but IATA SSIM (1991/1997) says 1:00s.  Go with IATA.
+Rule	Haiti	1988	1997	-	Apr	Sun>=1	1:00s	1:00	D
+Rule	Haiti	1988	1997	-	Oct	lastSun	1:00s	0	S
+Rule	Haiti	2005	only	-	Apr	Sun>=1	0:00	1:00	D
+Rule	Haiti	2005	only	-	Oct	lastSun	0:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Port-au-Prince -4:49:20 -	LMT	1890
+			-4:49	-	PPMT	1917 Jan 24 12:00 # P-a-P MT
+			-5:00	Haiti	E%sT
+
+# Honduras
+# Shanks says 1921 Jan 1; go with Whitman's more precise Apr 1.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Tegucigalpa -5:48:52 -	LMT	1921 Apr
+			-6:00	Salv	C%sT
+#
+# Great Swan I ceded by US to Honduras in 1972
+
+# Jamaica
+
+# From Bob Devine (1988-01-28):
+# Follows US rules.
+
+# From U. S. Naval Observatory (1989-01-19):
+# JAMAICA             5 H  BEHIND UTC
+
+# From Shanks:
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Jamaica	-5:07:12 -	LMT	1890		# Kingston
+			-5:07:12 -	KMT	1912 Feb    # Kingston Mean Time
+			-5:00	-	EST	1974 Apr 28 2:00
+			-5:00	US	E%sT	1984
+			-5:00	-	EST
+
+# Martinique
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Martinique	-4:04:20 -      LMT	1890		# Fort-de-France
+			-4:04:20 -	FFMT	1911 May     # Fort-de-France MT
+			-4:00	-	AST	1980 Apr  6
+			-4:00	1:00	ADT	1980 Sep 28
+			-4:00	-	AST
+
+# Montserrat
+# From Paul Eggert (1997-08-31):
+# Recent volcanic eruptions have forced evacuation of Plymouth, the capital.
+# Luckily, Olveston, the current de facto capital, has the same longitude.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Montserrat	-4:08:52 -	LMT	1911 Jul 1 0:01   # Olveston
+			-4:00	-	AST
+
+# Nicaragua
+#
+# From Steffen Thorsen (1998-12-29):
+# Nicaragua seems to be back at -6:00 but I have not been able to find when
+# they changed from -5:00.
+#
+# From Steffen Thorsen (2005-04-12):
+# I've got reports from 8 different people that Nicaragua just started
+# DST on Sunday 2005-04-10, in order to save energy because of
+# expensive petroleum.  The exact end date for DST is not yet
+# announced, only "September" but some sites also say "mid-September".
+# Some background information is available on the President's official site:
+# http://www.presidencia.gob.ni/Presidencia/Files_index/Secretaria/Notas%20de%20Prensa/Presidente/2005/ABRIL/Gobierno-de-nicaragua-adelanta-hora-oficial-06abril.htm
+# The Decree, no 23-2005 is available here:
+# http://www.presidencia.gob.ni/buscador_gaceta/BD/DECRETOS/2005/Decreto%2023-2005%20Se%20adelanta%20en%20una%20hora%20en%20todo%20el%20territorio%20nacional%20apartir%20de%20las%2024horas%20del%2009%20de%20Abril.pdf
+#
+# From Paul Eggert (2005-05-01):
+# The decree doesn't say anything about daylight saving, but for now let's
+# assume that it is daylight saving and that they'll switch back on the
+# 3rd Sunday in September.
+#
+# From Gwillim Law (2005-04-21):
+# The Associated Press story on the time change, which can be found at
+# http://www.lapalmainteractivo.com/guias/content/gen/ap/America_Latina/AMC_GEN_NICARAGUA_HORA.html
+# and elsewhere, says (fifth paragraph, translated from Spanish):  "The last
+# time that a change of clocks was applied to save energy was in the year 2000
+# during the Arnoldo Aleman administration."...
+# The northamerica file says that Nicaragua has been on UTC-6 continuously
+# since December 1998.  I wasn't able to find any details of Nicaraguan time
+# changes in 2000.  Perhaps a note could be added to the northamerica file, to
+# the effect that we have indirect evidence that DST was observed in 2000.
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Nic	1979	1980	-	Mar	Sun>=16	0:00	1:00	D
+Rule	Nic	1979	1980	-	Jun	Mon>=23	0:00	0	S
+Rule	Nic	1992	only	-	Jan	1	4:00	1:00	D
+Rule	Nic	1992	only	-	Sep	24	0:00	0	S
+Rule	Nic	2005	only	-	Apr	10	0:00	1:00	D
+Rule	Nic	2005	only	-	Sep	18	0:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Managua	-5:45:08 -	LMT	1890
+			-5:45:12 -	MMT	1934 Jun 23 # Managua Mean Time?
+			-6:00	-	CST	1973 May
+			-5:00	-	EST	1975 Feb 16
+			-6:00	Nic	C%sT	1993 Jan 1 4:00
+			-5:00	-	EST	1998 Dec
+			-6:00	Nic	C%sT
+
+# Panama
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Panama	-5:18:08 -	LMT	1890
+			-5:19:36 -	CMT	1908 Apr 22   # Colon Mean Time
+			-5:00	-	EST
+
+# Puerto Rico
+# There are too many San Juans elsewhere, so we'll use `Puerto_Rico'.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Puerto_Rico -4:24:25 -	LMT	1899 Mar 28 12:00    # San Juan
+			-4:00	-	AST	1942 May  3
+			-4:00	1:00	AWT	1945 Sep 30  2:00
+			-4:00	-	AST
+
+# St Kitts-Nevis
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/St_Kitts	-4:10:52 -	LMT	1912 Mar 2	# Basseterre
+			-4:00	-	AST
+
+# St Lucia
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/St_Lucia	-4:04:00 -	LMT	1890		# Castries
+			-4:04:00 -	CMT	1912	    # Castries Mean Time
+			-4:00	-	AST
+
+# St Pierre and Miquelon
+# There are too many St Pierres elsewhere, so we'll use `Miquelon'.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Miquelon	-3:44:40 -	LMT	1911 May 15	# St Pierre
+			-4:00	-	AST	1980 May
+			-3:00	-	PMST	1987 # Pierre & Miquelon Time
+			-3:00	Canada	PM%sT
+
+# St Vincent and the Grenadines
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/St_Vincent	-4:04:56 -	LMT	1890		# Kingstown
+			-4:04:56 -	KMT	1912	   # Kingstown Mean Time
+			-4:00	-	AST
+
+# Turks and Caicos
+# From Paul Eggert (1998-08-06):
+# Shanks says they use US DST rules, but IATA SSIM (1991/1998)
+# says they switch at midnight.  Go with IATA SSIM.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	TC	1979	1986	-	Apr	lastSun	0:00	1:00	D
+Rule	TC	1979	max	-	Oct	lastSun	0:00	0	S
+Rule	TC	1987	max	-	Apr	Sun>=1	0:00	1:00	D
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Grand_Turk	-4:44:32 -	LMT	1890
+			-5:07:12 -	KMT	1912 Feb    # Kingston Mean Time
+			-5:00	TC	E%sT
+
+# British Virgin Is
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Tortola	-4:18:28 -	LMT	1911 Jul    # Road Town
+			-4:00	-	AST
+
+# Virgin Is
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/St_Thomas	-4:19:44 -	LMT	1911 Jul    # Charlotte Amalie
+			-4:00	-	AST
diff --git a/JodaTime/src/java/org/joda/time/tz/src/southamerica b/JodaTime/src/java/org/joda/time/tz/src/southamerica
index 9bf068ba9..74c4bf2b5 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/southamerica
+++ b/JodaTime/src/java/org/joda/time/tz/src/southamerica
@@ -1,1069 +1,1075 @@
-# @(#)southamerica	7.61
-
-# This data is by no means authoritative; if you think you know better,
-# go ahead and edit the file (and please send any changes to
-# tz@elsie.nci.nih.gov for general use in the future).
-
-# From Paul Eggert (1999-07-07):
-# A good source for time zone historical data outside the U.S. is
-# Thomas G. Shanks, The International Atlas (5th edition),
-# San Diego: ACS Publications, Inc. (1999).
-#
-# Gwillim Law writes that a good source
-# for recent time zone data is the International Air Transport
-# Association's Standard Schedules Information Manual (IATA SSIM),
-# published semiannually.  Law sent in several helpful summaries
-# of the IATA's data after 1990.
-#
-# Except where otherwise noted, Shanks is the source for entries through 1990,
-# and IATA SSIM is the source for entries after 1990.
-#
-# Earlier editions of these tables used the North American style (e.g. ARST and
-# ARDT for Argentine Standard and Daylight Time), but the following quote
-# suggests that it's better to use European style (e.g. ART and ARST).
-#	I suggest the use of _Summer time_ instead of the more cumbersome
-#	_daylight-saving time_.  _Summer time_ seems to be in general use
-#	in Europe and South America.
-#	-- E O Cutler, _New York Times_ (1937-02-14), quoted in
-#	H L Mencken, _The American Language: Supplement I_ (1960), p 466
-#
-# Earlier editions of these tables also used the North American style
-# for time zones in Brazil, but this was incorrect, as Brazilians say
-# "summer time".  Reinaldo Goulart, a Sao Paulo businessman active in
-# the railroad sector, writes (1999-07-06):
-#	The subject of time zones is currently a matter of discussion/debate in
-#	Brazil.  Let's say that "the Brasilia time" is considered the
-#	"official time" because Brasilia is the capital city.
-#	The other three time zones are called "Brasilia time "minus one" or
-#	"plus one" or "plus two".  As far as I know there is no such
-#	name/designation as "Eastern Time" or "Central Time".
-# So I invented the following (English-language) abbreviations for now.
-# Corrections are welcome!
-#		std	dst
-#	-2:00	FNT	FNST	Fernando de Noronha
-#	-3:00	BRT	BRST	Brasilia
-#	-4:00	AMT	AMST	Amazon
-#	-5:00	ACT	ACST	Acre
-
-###############################################################################
-
-###############################################################################
-
-# Argentina
-
-# From Bob Devine (1988-01-28):
-# Argentina: first Sunday in October to first Sunday in April since 1976.
-# Double Summer time from 1969 to 1974.  Switches at midnight.
-
-# From U. S. Naval Observatory (1988-01-199):
-# ARGENTINA           3 H BEHIND   UTC
-
-# From Hernan G. Otero (1995-06-26):
-# I am sending modifications to the Argentine time zone table...
-# AR was chosen because they are the ISO letters that represent Argentina.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Arg	1930	only	-	Dec	 1	0:00	1:00	S
-Rule	Arg	1931	only	-	Apr	 1	0:00	0	-
-Rule	Arg	1931	only	-	Oct	15	0:00	1:00	S
-Rule	Arg	1932	1940	-	Mar	 1	0:00	0	-
-Rule	Arg	1932	1939	-	Nov	 1	0:00	1:00	S
-Rule	Arg	1940	only	-	Jul	 1	0:00	1:00	S
-Rule	Arg	1941	only	-	Jun	15	0:00	0	-
-Rule	Arg	1941	only	-	Oct	15	0:00	1:00	S
-Rule	Arg	1943	only	-	Aug	 1	0:00	0	-
-Rule	Arg	1943	only	-	Oct	15	0:00	1:00	S
-Rule	Arg	1946	only	-	Mar	 1	0:00	0	-
-Rule	Arg	1946	only	-	Oct	 1	0:00	1:00	S
-Rule	Arg	1963	only	-	Oct	 1	0:00	0	-
-Rule	Arg	1963	only	-	Dec	15	0:00	1:00	S
-Rule	Arg	1964	1966	-	Mar	 1	0:00	0	-
-Rule	Arg	1964	1966	-	Oct	15	0:00	1:00	S
-Rule	Arg	1967	only	-	Apr	 2	0:00	0	-
-Rule	Arg	1967	1968	-	Oct	Sun>=1	0:00	1:00	S
-Rule	Arg	1968	1969	-	Apr	Sun>=1	0:00	0	-
-Rule	Arg	1974	only	-	Jan	23	0:00	1:00	S
-Rule	Arg	1974	only	-	May	 1	0:00	0	-
-Rule	Arg	1988	only	-	Dec	 1	0:00	1:00	S
-#
-# From Hernan G. Otero (1995-06-26):
-# These corrections were contributed by InterSoft Argentina S.A.,
-# obtaining the data from the:
-# Talleres de Hidrografia Naval Argentina
-# (Argentine Naval Hydrography Institute)
-#
-# Shanks stops after 1992-03-01; go with Otero.
-Rule	Arg	1989	1993	-	Mar	Sun>=1	0:00	0	-
-Rule	Arg	1989	1992	-	Oct	Sun>=15	0:00	1:00	S
-#
-# From Hernan G. Otero (1995-06-26):
-# From this moment on, the law that mandated the daylight saving
-# time corrections was derogated and no more modifications
-# to the time zones (for daylight saving) are now made.
-#
-# From Rives McDow (2000-01-10):
-# On October 3, 1999, 0:00 local, Argentina implemented daylight savings time,
-# which did not result in the switch of a time zone, as they stayed 9 hours
-# from the International Date Line.
-Rule	Arg	1999	only	-	Oct	Sun>=1	0:00	1:00	S
-Rule	Arg	2000	only	-	Mar	Sun>=1	0:00	0	-
-#
-# From Peter Gradelski via Steffen Thorsen (2000-03-01):
-# We just checked with our Sao Paulo office and they say the government of
-# Argentina decided not to become one of the countries that go on or off DST.
-# So Buenos Aires should be -3 hours from GMT at all times.
-#
-# From Fabian L. Arce Jofre (2000-04-04):
-# The law that claimed DST for Argentina was derogated by President Fernando
-# de la Rua on March 2, 2000, because it would make people spend more energy
-# in the winter time, rather than less.  The change took effect on March 3.
-#
-# From Mariano Absatz (2001-06-06):
-# one of the major newspapers here in Argentina said that the 1999
-# Timezone Law (which never was effectively applied) will (would?) be
-# in effect.... The article is at
-# http://ar.clarin.com/diario/2001-06-06/e-01701.htm
-# ... The Law itself is "Ley No 25155", sanctioned on 1999-08-25, enacted
-# 1999-09-17, and published 1999-09-21.  The official publication is at:
-# http://www.boletin.jus.gov.ar/BON/Primera/1999/09-Septiembre/21/PDF/BO21-09-99LEG.PDF
-# Regretfully, you have to subscribe (and pay) for the on-line version....
-#
-# (2001-06-12):
-# the timezone for Argentina will not change next Sunday.
-# Apparently it will do so on Sunday 24th....
-# http://ar.clarin.com/diario/2001-06-12/s-03501.htm
-#
-# (2001-06-25):
-# Last Friday (yes, the last working day before the date of the change), the
-# Senate annulled the 1999 law that introduced the changes later postponed.
-# http://www.clarin.com.ar/diario/2001-06-22/s-03601.htm
-# It remains the vote of the Deputies..., but it will be the same....
-# This kind of things had always been done this way in Argentina.
-# We are still -03:00 all year round in all of the country.
-#
-# From Mariano Absatz (2004-05-21):
-# Today it was officially published that the Province of Mendoza is changing
-# its timezone this winter... starting tomorrow night....
-# http://www.gobernac.mendoza.gov.ar/boletin/pdf/20040521-27158-normas.pdf
-# From Paul Eggert (2004-05-24):
-# It's Law No. 7,210.  This change is due to a public power emergency, so for
-# now we'll assume it's for this year only.
-#
-# From Paul Eggert (2002-01-22):
-# <a href="http://www.spicasc.net/horvera.html">
-# Hora de verano para la Republica Argentina (2000-10-01)
-# </a> says that standard time in Argentina from 1894-10-31
-# to 1920-05-01 was -4:16:48.25.  Go with this more-precise value
-# over Shanks.
-#
-# From Mariano Absatz (2004-06-05):
-# These media articles from a major newspaper mostly cover the current state:
-# http://www.lanacion.com.ar/04/05/27/de_604825.asp
-# http://www.lanacion.com.ar/04/05/28/de_605203.asp
-#
-# The following eight (8) provinces pulled clocks back to UTC-04:00 at
-# midnight Monday May 31st. (that is, the night between 05/31 and 06/01).
-# Apparently, all nine provinces would go back to UTC-03:00 at the same
-# time in October 17th.
-#
-# Catamarca, Chubut, La Rioja, San Juan, San Luis, Santa Cruz,
-# Tierra del Fuego, Tucuman.
-#
-# From Mariano Absatz (2004-06-14):
-# ... this weekend, the Province of Tucuman decided it'd go back to UTC-03:00
-# yesterday midnight (that is, at 24:00 Saturday 12th), since the people's
-# annoyance with the change is much higher than the power savings obtained....
-#
-# From Gwillim Law (2004-06-14):
-# http://www.lanacion.com.ar/04/06/10/de_609078.asp ...
-#     "The time change in Tierra del Fuego was a conflicted decision from
-#   the start.  The government had decreed that the measure would take
-#   effect on June 1, but a normative error forced the new time to begin
-#   three days earlier, from a Saturday to a Sunday....
-# Our understanding was that the change was originally scheduled to take place
-# on June 1 at 00:00 in Chubut, Santa Cruz, Tierra del Fuego (and some other
-# provinces).  Sunday was May 30, only two days earlier.  So the article
-# contains a contradiction.  I would give more credence to the Saturday/Sunday
-# date than the "three days earlier" phrase, and conclude that Tierra del
-# Fuego set its clocks back at 2004-05-30 00:00.
-#
-# From Steffen Thorsen (2004-10-05):
-# The previous law 7210 which changed the province of Mendoza's time zone
-# back in May have been modified slightly in a new law 7277, which set the
-# new end date to 2004-09-26 (original date was 2004-10-17).
-# http://www.gobernac.mendoza.gov.ar/boletin/pdf/20040924-27244-normas.pdf
-#
-# From Mariano Absatz (2004-10-05):
-# San Juan changed from UTC-03:00 to UTC-04:00 at midnight between
-# Sunday, May 30th and Monday, May 31st.  It changed back to UTC-03:00
-# at midnight between Saturday, July 24th and Sunday, July 25th....
-# http://www.sanjuan.gov.ar/prensa/archivo/000329.html
-# http://www.sanjuan.gov.ar/prensa/archivo/000426.html
-# http://www.sanjuan.gov.ar/prensa/archivo/000441.html
-
-# Unless otherwise specified, data are from Shanks through 1992, from
-# the IATA otherwise.  As noted below, Shanks says that
-# America/Cordoba split into 6 subregions during 1991/1992, but we
-# haven't verified this yet so for now we'll keep it a single region.
-#
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-#
-# Buenos Aires (BA), Capital Federal (CF),
-Zone America/Argentina/Buenos_Aires -3:53:48 - LMT 1894 Oct 31
-			-4:16:48 -	CMT	1920 May # Cordoba Mean Time
-			-4:00	-	ART	1930 Dec
-			-4:00	Arg	AR%sT	1969 Oct  5
-			-3:00	Arg	AR%sT	1999 Oct  3
-			-4:00	Arg	AR%sT	2000 Mar  3
-			-3:00	-	ART
-#
-# Santa Fe (SF), Entre Rios (ER), Corrientes (CN), Misiones (MN), Chaco (CC),
-# Formosa (FM), Salta (SA), Santiago del Estero (SE), Cordoba (CB),
-# San Luis (SL), La Pampa (LP), Neuquen (NQ), Rio Negro (RN)
-#
-# Shanks also makes the following claims, which we haven't verified:
-# - Formosa switched to -3:00 on 1991-01-07.
-# - Misiones switched to -3:00 on 1990-12-29.
-# - Chaco switched to -3:00 on 1991-01-04.
-# - San Luis switched to -4:00 on 1990-03-14, then to -3:00 on 1990-10-15,
-#   then to -4:00 on 1991-03-01, then to -3:00 on 1991-06-01.
-# - Santiago del Estero switched to -4:00 on 1991-04-01,
-#   then to -3:00 on 1991-04-26.
-#
-Zone America/Argentina/Cordoba -4:16:48 - LMT	1894 Oct 31
-			-4:16:48 -	CMT	1920 May
-			-4:00	-	ART	1930 Dec
-			-4:00	Arg	AR%sT	1969 Oct  5
-			-3:00	Arg	AR%sT	1991 Mar  3
-			-4:00	-	WART	1991 Oct 20
-			-3:00	Arg	AR%sT	1999 Oct  3
-			-4:00	Arg	AR%sT	2000 Mar  3
-			-3:00	-	ART
-#
-# Tucuman (TM)
-Zone America/Argentina/Tucuman -4:20:52 - LMT	1894 Oct 31
-			-4:16:48 -	CMT	1920 May
-			-4:00	-	ART	1930 Dec
-			-4:00	Arg	AR%sT	1969 Oct  5
-			-3:00	Arg	AR%sT	1991 Mar  3
-			-4:00	-	WART	1991 Oct 20
-			-3:00	Arg	AR%sT	1999 Oct  3
-			-4:00	Arg	AR%sT	2000 Mar  3
-			-3:00	-	ART	2004 Jun  1
-			-4:00	-	WART	2004 Jun 13
-			-3:00	-	ART
-#
-# La Rioja (LR)
-Zone America/Argentina/La_Rioja -4:27:24 - LMT	1894 Oct 31
-			-4:16:48 -	CMT	1920 May
-			-4:00	-	ART	1930 Dec
-			-4:00	Arg	AR%sT	1969 Oct  5
-			-3:00	Arg	AR%sT	1991 Mar  1
-			-4:00	-	WART	1991 May  7
-			-3:00	Arg	AR%sT	1999 Oct  3
-			-4:00	Arg	AR%sT	2000 Mar  3
-			-3:00	-	ART	2004 Jun  1
-			-4:00	-	WART	2004 Jun 20
-			-3:00	-	ART
-#
-# San Juan (SJ)
-Zone America/Argentina/San_Juan -4:34:04 - LMT	1894 Oct 31
-			-4:16:48 -	CMT	1920 May
-			-4:00	-	ART	1930 Dec
-			-4:00	Arg	AR%sT	1969 Oct  5
-			-3:00	Arg	AR%sT	1991 Mar  1
-			-4:00	-	WART	1991 May  7
-			-3:00	Arg	AR%sT	1999 Oct  3
-			-4:00	Arg	AR%sT	2000 Mar  3
-			-3:00	-	ART	2004 May 31
-			-4:00	-	WART	2004 Jul 25
-			-3:00	-	ART
-#
-# Jujuy (JY)
-Zone America/Argentina/Jujuy -4:21:12 -	LMT	1894 Oct 31
-			-4:16:48 -	CMT	1920 May
-			-4:00	-	ART	1930 Dec
-			-4:00	Arg	AR%sT	1969 Oct  5
-			-3:00	Arg	AR%sT	1990 Mar  4
-			-4:00	-	WART	1990 Oct 28
-			-4:00	1:00	WARST	1991 Mar 17
-			-4:00	-	WART	1991 Oct  6
-			-3:00	1:00	ARST	1992
-			-3:00	Arg	AR%sT	1999 Oct  3
-			-4:00	Arg	AR%sT	2000 Mar  3
-			-3:00	-	ART
-#
-# Catamarca (CT), Chubut (CH)
-Zone America/Argentina/Catamarca -4:23:08 - LMT	1894 Oct 31
-			-4:16:48 -	CMT	1920 May
-			-4:00	-	ART	1930 Dec
-			-4:00	Arg	AR%sT	1969 Oct  5
-			-3:00	Arg	AR%sT	1991 Mar  3
-			-4:00	-	WART	1991 Oct 20
-			-3:00	Arg	AR%sT	1999 Oct  3
-			-4:00	Arg	AR%sT	2000 Mar  3
-			-3:00	-	ART	2004 Jun  1
-			-4:00	-	WART	2004 Jun 20
-			-3:00	-	ART
-#
-# Mendoza (MZ)
-Zone America/Argentina/Mendoza -4:35:16 - LMT	1894 Oct 31
-			-4:16:48 -	CMT	1920 May
-			-4:00	-	ART	1930 Dec
-			-4:00	Arg	AR%sT	1969 Oct  5
-			-3:00	Arg	AR%sT	1990 Mar  4
-			-4:00	-	WART	1990 Oct 15
-			-4:00	1:00	WARST	1991 Mar  1
-			-4:00	-	WART	1991 Oct 15
-			-4:00	1:00	WARST	1992 Mar  1
-			-4:00	-	WART	1992 Oct 18
-			-3:00	Arg	AR%sT	1999 Oct  3
-			-4:00	Arg	AR%sT	2000 Mar  3
-			-3:00	-	ART	2004 May 23
-			-4:00	-	WART	2004 Sep 26
-			-3:00	-	ART
-#
-# Santa Cruz (SC)
-Zone America/Argentina/Rio_Gallegos -4:36:52 - LMT 1894 Oct 31
-			-4:16:48 -	CMT	1920 May # Cordoba Mean Time
-			-4:00	-	ART	1930 Dec
-			-4:00	Arg	AR%sT	1969 Oct  5
-			-3:00	Arg	AR%sT	1999 Oct  3
-			-4:00	Arg	AR%sT	2000 Mar  3
-			-3:00	-	ART	2004 Jun  1
-			-4:00	-	WART	2004 Jun 20
-			-3:00	-	ART
-#
-# Tierra del Fuego, Antartida e Islas del Atlantico Sur (TF)
-Zone America/Argentina/Ushuaia -4:33:12 - LMT 1894 Oct 31
-			-4:16:48 -	CMT	1920 May # Cordoba Mean Time
-			-4:00	-	ART	1930 Dec
-			-4:00	Arg	AR%sT	1969 Oct  5
-			-3:00	Arg	AR%sT	1999 Oct  3
-			-4:00	Arg	AR%sT	2000 Mar  3
-			-3:00	-	ART	2004 May 30
-			-4:00	-	WART	2004 Jun 20
-			-3:00	-	ART
-
-# Aruba
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Aruba	-4:40:24 -	LMT	1912 Feb 12	# Oranjestad
-			-4:30	-	ANT	1965 # Netherlands Antilles Time
-			-4:00	-	AST
-
-# Bolivia
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/La_Paz	-4:32:36 -	LMT	1890
-			-4:32:36 -	CMT	1931 Oct 15 # Calamarca MT
-			-4:32:36 1:00	BOST	1932 Mar 21 # Bolivia ST
-			-4:00	-	BOT	# Bolivia Time
-
-# Brazil
-
-# From Paul Eggert (1993-11-18):
-# The mayor of Rio recently attempted to change the time zone rules
-# just in his city, in order to leave more summer time for the tourist trade.
-# The rule change lasted only part of the day;
-# the federal government refused to follow the city's rules, and business
-# was in a chaos, so the mayor backed down that afternoon.
-
-# From IATA SSIM (1996-02):
-# _Only_ the following states in BR1 observe DST: Rio Grande do Sul (RS),
-# Santa Catarina (SC), Parana (PR), Sao Paulo (SP), Rio de Janeiro (RJ),
-# Espirito Santo (ES), Minas Gerais (MG), Bahia (BA), Goias (GO),
-# Distrito Federal (DF), Tocantins (TO), Sergipe [SE] and Alagoas [AL].
-# [The last three states are new to this issue of the IATA SSIM.]
-
-# From Gwillim Law (1996-10-07):
-# Geography, history (Tocantins was part of Goias until 1989), and other
-# sources of time zone information lead me to believe that AL, SE, and TO were
-# always in BR1, and so the only change was whether or not they observed DST....
-# The earliest issue of the SSIM I have is 2/91.  Each issue from then until
-# 9/95 says that DST is observed only in the ten states I quoted from 9/95,
-# along with Mato Grosso (MT) and Mato Grosso do Sul (MS), which are in BR2
-# (UTC-4)....  The other two time zones given for Brazil are BR3, which is
-# UTC-5, no DST, and applies only in the state of Acre (AC); and BR4, which is
-# UTC-2, and applies to Fernando de Noronha (formerly FN, but I believe it's
-# become part of the state of Pernambuco).  The boundary between BR1 and BR2
-# has never been clearly stated.  They've simply been called East and West.
-# However, some conclusions can be drawn from another IATA manual: the Airline
-# Coding Directory, which lists close to 400 airports in Brazil.  For each
-# airport it gives a time zone which is coded to the SSIM.  From that
-# information, I'm led to conclude that the states of Amapa (AP), Ceara (CE),
-# Maranhao (MA), Paraiba (PR), Pernambuco (PE), Piaui (PI), and Rio Grande do
-# Norte (RN), and the eastern part of Para (PA) are all in BR1 without DST.
-
-# From Marcos Tadeu (1998-09-27):
-# <a href="http://pcdsh01.on.br/verao1.html">
-# Brazilian official page
-# </a>
-
-# From Jesper Norgaard (2000-11-03):
-# [For an official list of which regions in Brazil use which time zones, see:]
-# http://pcdsh01.on.br/Fusbr.htm
-# http://pcdsh01.on.br/Fusbrhv.htm
-
-# From Celso Doria via David Madeo (2002-10-09):
-# The reason for the delay this year has to do with elections in Brazil.
-#
-# Unlike in the United States, elections in Brazil are 100% computerized and
-# the results are known almost immediately.  Yesterday, it was the first
-# round of the elections when 115 million Brazilians voted for President,
-# Governor, Senators, Federal Deputies, and State Deputies.  Nobody is
-# counting (or re-counting) votes anymore and we know there will be a second
-# round for the Presidency and also for some Governors.  The 2nd round will
-# take place on October 27th.
-#
-# The reason why the DST will only begin November 3rd is that the thousands
-# of electoral machines used cannot have their time changed, and since the
-# Constitution says the elections must begin at 8:00 AM and end at 5:00 PM,
-# the Government decided to postpone DST, instead of changing the Constitution
-# (maybe, for the next elections, it will be possible to change the clock)...
-
-# From Rodrigo Severo (2004-10-04):
-# It's just the biannual change made necessary by the much hyped, supposedly
-# modern Brazilian eletronic voting machines which, apparently, can't deal
-# with a time change between the first and the second rounds of the elections.
-
-# From Paul Eggert (2002-10-10):
-# The official decrees referenced below are mostly taken from
-# <a href="http://pcdsh01.on.br/DecHV.html">
-# Decretos sobre o Horario de Verao no Brasil
-# </a> (2001-09-20, in Portuguese).
-# The official site for all decrees, including those not related to time, is
-# <a href="http://www.presidencia.gov.br/CCIVIL/decreto/principal_ano.htm">
-# Presidencia da Republica, Subchefia para Assuntos Juridicos, Decretos
-# </a> (in Portuguese).
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-# Decree <a href="http://pcdsh01.on.br/HV20466.htm">20,466</a> (1931-10-01)
-# Decree <a href="http://pcdsh01.on.br/HV21896.htm">21,896</a> (1932-01-10)
-Rule	Brazil	1931	only	-	Oct	 3	11:00	1:00	S
-Rule	Brazil	1932	1933	-	Apr	 1	 0:00	0	-
-Rule	Brazil	1932	only	-	Oct	 3	 0:00	1:00	S
-# Decree <a href="http://pcdsh01.on.br/HV23195.htm">23,195</a> (1933-10-10)
-# revoked DST.
-# Decree <a href="http://pcdsh01.on.br/HV27496.htm">27,496</a> (1949-11-24)
-# Decree <a href="http://pcdsh01.on.br/HV27998.htm">27,998</a> (1950-04-13)
-Rule	Brazil	1949	1952	-	Dec	 1	 0:00	1:00	S
-Rule	Brazil	1950	only	-	Apr	16	 1:00	0	-
-Rule	Brazil	1951	1952	-	Apr	 1	 0:00	0	-
-# Decree <a href="http://pcdsh01.on.br/HV32308.htm">32,308</a> (1953-02-24)
-Rule	Brazil	1953	only	-	Mar	 1	 0:00	0	-
-# Decree <a href="http://pcdsh01.on.br/HV34724.htm">34,724</a> (1953-11-30)
-# revoked DST.
-# Decree <a href="http://pcdsh01.on.br/HV52700.htm">52,700</a> (1963-10-18)
-# established DST from 1963-10-23 00:00 to 1964-02-29 00:00
-# in SP, RJ, GB, MG, ES, due to the prolongation of the drought.
-# Decree <a href="http://pcdsh01.on.br/HV53071.htm">53,071</a> (1963-12-03)
-# extended the above decree to all of the national territory on 12-09.
-Rule	Brazil	1963	only	-	Dec	 9	 0:00	1:00	S
-# Decree <a href="http://pcdsh01.on.br/HV53604.htm">53,604</a> (1964-02-25)
-# extended summer time by one day to 1964-03-01 00:00 (start of school).
-Rule	Brazil	1964	only	-	Mar	 1	 0:00	0	-
-# Decree <a href="http://pcdsh01.on.br/HV55639.htm">55,639</a> (1965-01-27)
-Rule	Brazil	1965	only	-	Jan	31	 0:00	1:00	S
-Rule	Brazil	1965	only	-	Mar	31	 0:00	0	-
-# Decree <a href="http://pcdsh01.on.br/HV57303.htm">57,303</a> (1965-11-22)
-Rule	Brazil	1965	only	-	Dec	 1	 0:00	1:00	S
-# Decree <a href="http://pcdsh01.on.br/HV57843.htm">57,843</a> (1966-02-18)
-Rule	Brazil	1966	1968	-	Mar	 1	 0:00	0	-
-Rule	Brazil	1966	1967	-	Nov	 1	 0:00	1:00	S
-# Decree <a href="http://pcdsh01.on.br/HV63429.htm">63,429</a> (1968-10-15)
-# revoked DST.
-# Decree <a href="http://pcdsh01.on.br/HV91698.htm">91,698</a> (1985-09-27)
-Rule	Brazil	1985	only	-	Nov	 2	 0:00	1:00	S
-# Decree 92,310 (1986-01-21)
-# Decree 92,463 (1986-03-13)
-Rule	Brazil	1986	only	-	Mar	15	 0:00	0	-
-# Decree 93,316 (1986-10-01)
-Rule	Brazil	1986	only	-	Oct	25	 0:00	1:00	S
-Rule	Brazil	1987	only	-	Feb	14	 0:00	0	-
-# Decree <a href="http://pcdsh01.on.br/HV94922.htm">94,922</a> (1987-09-22)
-Rule	Brazil	1987	only	-	Oct	25	 0:00	1:00	S
-Rule	Brazil	1988	only	-	Feb	 7	 0:00	0	-
-# Decree <a href="http://pcdsh01.on.br/HV96676.htm">96,676</a> (1988-09-12)
-# except for the states of AC, AM, PA, RR, RO, and AP (then a territory)
-Rule	Brazil	1988	only	-	Oct	16	 0:00	1:00	S
-Rule	Brazil	1989	only	-	Jan	29	 0:00	0	-
-# Decree <a href="http://pcdsh01.on.br/HV98077.htm">98,077</a> (1989-08-21)
-# with the same exceptions
-Rule	Brazil	1989	only	-	Oct	15	 0:00	1:00	S
-Rule	Brazil	1990	only	-	Feb	11	 0:00	0	-
-# Decree <a href="http://pcdsh01.on.br/HV99530.htm">99,530</a> (1990-09-17)
-# adopted by RS, SC, PR, SP, RJ, ES, MG, GO, MS, DF.
-# Decree 99,629 (1990-10-19) adds BA, MT.
-Rule	Brazil	1990	only	-	Oct	21	 0:00	1:00	S
-Rule	Brazil	1991	only	-	Feb	17	 0:00	0	-
-# <a href="http://pcdsh01.on.br/HV1991.htm">Unnumbered decree</a> (1991-09-25)
-# adopted by RS, SC, PR, SP, RJ, ES, MG, BA, GO, MT, MS, DF.
-Rule	Brazil	1991	only	-	Oct	20	 0:00	1:00	S
-Rule	Brazil	1992	only	-	Feb	 9	 0:00	0	-
-# <a href="http://pcdsh01.on.br/HV1992.htm">Unnumbered decree</a> (1992-10-16)
-# adopted by same states.
-Rule	Brazil	1992	only	-	Oct	25	 0:00	1:00	S
-Rule	Brazil	1993	only	-	Jan	31	 0:00	0	-
-# Decree <a href="http://pcdsh01.on.br/HV942.htm">942</a> (1993-09-28)
-# adopted by same states, plus AM.
-# Decree <a href="http://pcdsh01.on.br/HV1252.htm">1,252</a> (1994-09-22;
-# web page corrected 2004-01-07) adopted by same states, minus AM.
-# Decree <a href="http://pcdsh01.on.br/HV1636.htm">1,636</a> (1995-09-14)
-# adopted by same states, plus MT and TO.
-# Decree <a href="http://pcdsh01.on.br/HV1674.htm">1,674</a> (1995-10-13)
-# adds AL, SE.
-Rule	Brazil	1993	1995	-	Oct	Sun>=11	 0:00	1:00	S
-Rule	Brazil	1994	1995	-	Feb	Sun>=15	 0:00	0	-
-Rule	Brazil	1996	only	-	Feb	11	 0:00	0	-
-# Decree <a href="http://pcdsh01.on.br/HV2000.htm">2,000</a> (1996-09-04)
-# adopted by same states, minus AL, SE.
-Rule	Brazil	1996	only	-	Oct	 6	 0:00	1:00	S
-Rule	Brazil	1997	only	-	Feb	16	 0:00	0	-
-# From Daniel C. Sobral (1998-02-12):
-# In 1997, the DS began on October 6. The stated reason was that
-# because international television networks ignored Brazil's policy on DS,
-# they bought the wrong times on satellite for coverage of Pope's visit.
-# This year, the ending date of DS was postponed to March 1
-# to help dealing with the shortages of electric power.
-#
-# From Paul Eggert (1998-02-25):
-# <a href="http://churchnet.ucsm.ac.uk/news/files2/news165.htm">
-# Brazil Prepares for Papal Visit
-# </a>,
-# Church Net UK (1997-10-02).
-#
-# Decree 2,317 (1997-09-04), adopted by same states.
-Rule	Brazil	1997	only	-	Oct	 6	 0:00	1:00	S
-# Decree <a href="http://pcdsh01.on.br/figuras/HV2495.JPG">2,495</a>
-# (1998-02-10)
-Rule	Brazil	1998	only	-	Mar	 1	 0:00	0	-
-# Decree <a href="http://pcdsh01.on.br/figuras/Hv98.jpg">2,780</a> (1998-09-11)
-# adopted by the same states as before.
-Rule	Brazil	1998	only	-	Oct	11	 0:00	1:00	S
-Rule	Brazil	1999	only	-	Feb	21	 0:00	0	-
-# Decree <a href="http://pcdsh01.on.br/figuras/HV3150.gif">3,150</a>
-# (1999-08-23) adopted by same states.
-# Decree <a href="http://pcdsh01.on.br/DecHV99.gif">3,188</a> (1999-09-30)
-# adds SE, AL, PB, PE, RN, CE, PI, MA and RR.
-Rule	Brazil	1999	only	-	Oct	 3	 0:00	1:00	S
-Rule	Brazil	2000	only	-	Feb	27	 0:00	0	-
-# Decree <a href="http://pcdsh01.on.br/DEC3592.htm">3,592</a> (2000-09-06)
-# adopted by the same states as before.
-# Decree <a href="http://pcdsh01.on.br/Dec3630.jpg">3,630</a> (2000-10-13)
-# repeals DST in PE and RR, effective 2000-10-15 00:00.
-# Decree <a href="http://pcdsh01.on.br/Dec3632.jpg">3,632</a> (2000-10-17)
-# repeals DST in SE, AL, PB, RN, CE, PI and MA, effective 2000-10-22 00:00.
-# Decree <a href="http://pcdsh01.on.br/figuras/HV3916.gif">3,916</a>
-# (2001-09-13) reestablishes DST in AL, CE, MA, PB, PE, PI, RN, SE.
-Rule	Brazil	2000	2001	-	Oct	Sun>=8	 0:00	1:00	S
-Rule	Brazil	2001	max	-	Feb	Sun>=15	 0:00	0	-
-# Decree 4,399 (2002-10-01) repeals DST in AL, CE, MA, PB, PE, PI, RN, SE.
-# <a href="http://www.presidencia.gov.br/CCIVIL/decreto/2002/D4399.htm"></a>
-Rule	Brazil	2002	only	-	Nov	 3	 0:00	1:00	S
-# Decree 4,844 (2003-09-24; corrected 2003-09-26) repeals DST in BA, MT, TO.
-# <a href="http://www.presidencia.gov.br/CCIVIL/decreto/2003/D4844.htm"></a>
-Rule	Brazil	2003	only	-	Oct	19	 0:00	1:00	S
-# Decree 5,223 (2004-10-01) reestablishes DST in MT.
-# <a href="http://www.planalto.gov.br/ccivil_03/_Ato2004-2006/2004/Decreto/D5223.htm"></a>
-Rule	Brazil	2004	only	-	Nov	 2	 0:00	1:00	S
-# The latest ruleset listed above says that the following states observe DST:
-# DF, ES, GO, MG, MS, MT, PR, RJ, RS, SC, SP.
-#
-Rule	Brazil	2005	max	-	Oct	Sun>=15	 0:00	1:00	S
-# For dates after mid-2005, the above rules with TO="max" are guesses
-# and are quite possibly wrong, but are more likely than no DST at all.
-
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-#
-# Fernando de Noronha (administratively part of PE)
-Zone America/Noronha	-2:09:40 -	LMT	1914
-			-2:00	Brazil	FN%sT	1990 Sep 17
-			-2:00	-	FNT	1999 Sep 30
-			-2:00	Brazil	FN%sT	2000 Oct 15
-			-2:00	-	FNT	2001 Sep 13
-			-2:00	Brazil	FN%sT	2002 Oct  1
-			-2:00	-	FNT
-# Other Atlantic islands have no permanent settlement.
-# These include Trindade and Martin Vaz (administratively part of ES),
-# Atol das Rocas (RN), and Penedos de Sao Pedro e Sao Paulo (PE).
-# Fernando de Noronha was a separate territory from 1942-09-02 to 1989-01-01;
-# it also included the Penedos.
-#
-# Amapa (AP), east Para (PA)
-# East Para includes Belem, Maraba, Serra Norte, and Sao Felix do Xingu.
-# The division between east and west Para is the river Xingu.
-# In the north a very small part from the river Javary (now Jari I guess,
-# the border with Amapa) to the Amazon, then to the Xingu.
-Zone America/Belem	-3:13:56 -	LMT	1914
-			-3:00	Brazil	BR%sT	1988 Sep 12
-			-3:00	-	BRT
-#
-# Maranhao (MA), Piaui (PI), Ceara (CE), Rio Grande do Norte (RN),
-# Paraiba (PB)
-Zone America/Fortaleza	-2:34:00 -	LMT	1914
-			-3:00	Brazil	BR%sT	1990 Sep 17
-			-3:00	-	BRT	1999 Sep 30
-			-3:00	Brazil	BR%sT	2000 Oct 22
-			-3:00	-	BRT	2001 Sep 13
-			-3:00	Brazil	BR%sT	2002 Oct  1
-			-3:00	-	BRT
-#
-# Pernambuco (PE) (except Atlantic islands)
-Zone America/Recife	-2:19:36 -	LMT	1914
-			-3:00	Brazil	BR%sT	1990 Sep 17
-			-3:00	-	BRT	1999 Sep 30
-			-3:00	Brazil	BR%sT	2000 Oct 15
-			-3:00	-	BRT	2001 Sep 13
-			-3:00	Brazil	BR%sT	2002 Oct  1
-			-3:00	-	BRT
-#
-# Tocantins (TO)
-Zone America/Araguaina	-3:12:48 -	LMT	1914
-			-3:00	Brazil	BR%sT	1990 Sep 17
-			-3:00	-	BRT	1995 Sep 14
-			-3:00	Brazil	BR%sT	2003 Sep 24
-			-3:00	-	BRT
-#
-# Alagoas (AL), Sergipe (SE)
-Zone America/Maceio	-2:22:52 -	LMT	1914
-			-3:00	Brazil	BR%sT	1990 Sep 17
-			-3:00	-	BRT	1995 Oct 13
-			-3:00	Brazil	BR%sT	1996 Sep  4
-			-3:00	-	BRT	1999 Sep 30
-			-3:00	Brazil	BR%sT	2000 Oct 22
-			-3:00	-	BRT	2001 Sep 13
-			-3:00	Brazil	BR%sT	2002 Oct  1
-			-3:00	-	BRT
-#
-# Bahia (BA)
-# There are too many Salvadors elsewhere, so use America/Bahia instead
-# of America/Salvador.
-Zone America/Bahia	-2:34:04 -	LMT	1914
-			-3:00	Brazil	BR%sT	2003 Sep 24
-			-3:00	-	BRT
-#
-# Goias (GO), Distrito Federal (DF), Minas Gerais (MG),
-# Espirito Santo (ES), Rio de Janeiro (RJ), Sao Paulo (SP), Parana (PR),
-# Santa Catarina (SC), Rio Grande do Sul (RS)
-Zone America/Sao_Paulo	-3:06:28 -	LMT	1914
-			-3:00	Brazil	BR%sT	1963 Oct 23 00:00
-			-3:00	1:00	BRST	1964
-			-3:00	Brazil	BR%sT
-#
-# Mato Grosso do Sul (MS)
-Zone America/Campo_Grande -3:38:28 -	LMT	1914
-			-4:00	Brazil	AM%sT
-#
-# Mato Grosso (MT)
-Zone America/Cuiaba	-3:44:20 -	LMT	1914
-			-4:00	Brazil	AM%sT	2003 Sep 24
-			-4:00	-	AMT	2004 Oct  1
-			-4:00	Brazil	AM%sT
-#
-# west Para (PA), Rondonia (RO)
-# West Para includes Altamira, Oribidos, Prainha, Oriximina, and Santarem.
-Zone America/Porto_Velho -4:15:36 -	LMT	1914
-			-4:00	Brazil	AM%sT	1988 Sep 12
-			-4:00	-	AMT
-#
-# Roraima (RR)
-Zone America/Boa_Vista	-4:02:40 -	LMT	1914
-			-4:00	Brazil	AM%sT	1988 Sep 12
-			-4:00	-	AMT	1999 Sep 30
-			-4:00	Brazil	AM%sT	2000 Oct 15
-			-4:00	-	AMT
-#
-# east Amazonas (AM): Boca do Acre, Jutai, Manaus, Floriano Peixoto
-# The great circle line from Tabatinga to Porto Acre divides
-# east from west Amazonas.
-Zone America/Manaus	-4:00:04 -	LMT	1914
-			-4:00	Brazil	AM%sT	1988 Sep 12
-			-4:00	-	AMT	1993 Sep 28
-			-4:00	Brazil	AM%sT	1994 Sep 22
-			-4:00	-	AMT
-#
-# west Amazonas (AM): Atalaia do Norte, Boca do Maoco, Benjamin Constant,
-#	Eirunepe, Envira, Ipixuna
-Zone America/Eirunepe	-4:39:28 -	LMT	1914
-			-5:00	Brazil	AC%sT	1988 Sep 12
-			-5:00	-	ACT	1993 Sep 28
-			-5:00	Brazil	AC%sT	1994 Sep 22
-			-5:00	-	ACT
-#
-# Acre (AC)
-Zone America/Rio_Branco	-4:31:12 -	LMT	1914
-			-5:00	Brazil	AC%sT	1988 Sep 12
-			-5:00	-	ACT
-
-
-# Chile
-
-# From Eduardo Krell (1995-10-19):
-# The law says to switch to DST at midnight [24:00] on the second SATURDAY
-# of October....  The law is the same for March and October.
-# (1998-09-29):
-# Because of the drought this year, the government decided to go into
-# DST earlier (saturday 9/26 at 24:00). This is a one-time change only ...
-# (unless there's another dry season next year, I guess).
-
-# From Julio I. Pacheco Troncoso (1999-03-18):
-# Because of the same drought, the government decided to end DST later,
-# on April 3, (one-time change).
-
-# From Gwillim Law (2001-05-04):
-# I came across another article in "La Tercera" about Chilean DST.
-# <http://www.tercera.cl/diario/2000/10/13/t-extras.html>
-# It clearly confirms my earlier suggestion, that DST begins at 22:00
-# on Easter Island....  But it also seems to be saying that the
-# observance of DST in Chile began in 1966, rather than 1969 as
-# ... [Shanks] has it....
-#
-# My translation:
-#
-# "The Chilean Army has announced that summer time will begin tomorrow,
-# Saturday, October 14 in continental Chile, insular Chile, and
-# Antarctica, as provided by Supreme Decree 25 of January 11, 1966.
-# By the preceding, official time in continental Chile and Chilean
-# Antarctic, and official time in Western Insular Chile, which applies
-# to Easter Island and Sala y Gomez Island, will be set forward at
-# midnight and at 22:00, respectively, by 20 minutes."
-
-# From Paul Eggert (2001-05-04):
-# Go with this article in preference to Shanks's 1969 date for modern DST.
-# Assume this rule has been used since DST was introduced in the islands.
-
-# From Paul Eggert (2002-10-24):
-# <http://www.shoa.cl/shoa/faqhoraoficial.htm> gives many details that
-# disagree with the following table, but we haven't had time to compare them.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Chile	1918	only	-	Sep	 1	0:00	1:00	S
-Rule	Chile	1919	only	-	Jul	 2	0:00	0	-
-Rule	Chile	1927	1931	-	Sep	 1	0:00	1:00	S
-Rule	Chile	1928	1932	-	Apr	 1	0:00	0	-
-Rule	Chile	1966	1997	-	Oct	Sun>=9	4:00u	1:00	S
-Rule	Chile	1967	1998	-	Mar	Sun>=9	3:00u	0	-
-Rule	Chile	1998	only	-	Sep	27	4:00u	1:00	S
-Rule	Chile	1999	only	-	Apr	 4	3:00u	0	-
-Rule	Chile	1999	max	-	Oct	Sun>=9	4:00u	1:00	S
-Rule	Chile	2000	max	-	Mar	Sun>=9	3:00u	0	-
-# IATA SSIM anomalies: (1990-09) says 1990-09-16; (1992-02) says 1992-03-14;
-# (1996-09) says 1998-03-08.  Ignore these.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Santiago	-4:42:40 -	LMT	1890
-			-4:42:40 -	SMT	1910	    # Santiago Mean Time
-			-5:00	Chile	CL%sT	1932 Sep    # Chile Time
-			-4:00	Chile	CL%sT
-Zone Pacific/Easter	-7:17:28 -	LMT	1890	    # Mataveri
-			-7:17:28 -	MMT	1932 Sep    # Mataveri Mean Time
-			-7:00	Chile	EAS%sT	1982 Mar 14 # Easter I Time
-			-6:00	Chile	EAS%sT
-#
-# Sala y Gomez Island is like Pacific/Easter.
-# Other Chilean locations, including Juan Fernandez Is, San Ambrosio,
-# San Felix, and Antarctic bases, are like America/Santiago.
-
-# Colombia
-# Shanks specifies 24:00 for 1992 transition times; go with IATA,
-# as it seems implausible to change clocks at midnight New Year's Eve.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	CO	1992	only	-	May	 2	0:00	1:00	S
-Rule	CO	1992	only	-	Dec	31	0:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Bogota	-4:56:20 -	LMT	1884 Mar 13
-			-4:56:20 -	BMT	1914 Nov 23 # Bogota Mean Time
-			-5:00	CO	CO%sT	# Colombia Time
-# Malpelo, Providencia, San Andres
-# no information; probably like America/Bogota
-
-# Curacao
-# Shanks says that Bottom and Oranjestad have been at -4:00 since
-# standard time was introduced on 1912-03-02; and that Kralendijk and Rincon
-# used Kralendijk Mean Time (-4:33:08) from 1912-02-02 to 1965-01-01.
-# This all predates our 1970 cutoff, though.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Curacao	-4:35:44 -	LMT	1912 Feb 12	# Willemstad
-			-4:30	-	ANT	1965 # Netherlands Antilles Time
-			-4:00	-	AST
-
-# Ecuador
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Guayaquil	-5:19:20 -	LMT	1890
-			-5:14:00 -	QMT	1931 # Quito Mean Time
-			-5:00	-	ECT	     # Ecuador Time
-Zone Pacific/Galapagos	-5:58:24 -	LMT	1931 # Puerto Baquerizo Moreno
-			-5:00	-	ECT	1986
-			-6:00	-	GALT	     # Galapagos Time
-
-# Falklands
-
-# From Paul Eggert (2001-03-05):
-# Between 1990 and 2000 inclusive, Shanks and the IATA agree except
-# the IATA gives 1996-09-08.  Go with Shanks.
-
-# From Falkland Islands Government Office, London (2001-01-22)
-# via Jesper Norgaard:
-# ... the clocks revert back to Local Mean Time at 2 am on Sunday 15
-# April 2001 and advance one hour to summer time at 2 am on Sunday 2
-# September.  It is anticipated that the clocks will revert back at 2
-# am on Sunday 21 April 2002 and advance to summer time at 2 am on
-# Sunday 1 September.
-
-# From Rives McDow (2001-02-13):
-#
-# I have communicated several times with people there, and the last
-# time I had communications that was helpful was in 1998.  Here is
-# what was said then:
-#
-# "The general rule was that Stanley used daylight saving and the Camp
-# did not. However for various reasons many people in the Camp have
-# started to use daylight saving (known locally as 'Stanley Time')
-# There is no rule as to who uses daylight saving - it is a matter of
-# personal choice and so it is impossible to draw a map showing who
-# uses it and who does not. Any list would be out of date as soon as
-# it was produced. This year daylight saving ended on April 18/19th
-# and started again on September 12/13th.  I do not know what the rule
-# is, but can find out if you like.  We do not change at the same time
-# as UK or Chile."
-#
-# I did have in my notes that the rule was "Second Saturday in Sep at
-# 0:00 until third Saturday in Apr at 0:00".  I think that this does
-# not agree in some cases with Shanks; is this true?
-#
-# Also, there is no mention in the list that some areas in the
-# Falklands do not use DST.  I have found in my communications there
-# that these areas are on the western half of East Falkland and all of
-# West Falkland.  Stanley is the only place that consistently observes
-# DST.  Again, as in other places in the world, the farmers don't like
-# it.  West Falkland is almost entirely sheep farmers.
-#
-# I know one lady there that keeps a list of which farm keeps DST and
-# which doesn't each year.  She runs a shop in Stanley, and says that
-# the list changes each year.  She uses it to communicate to her
-# customers, catching them when they are home for lunch or dinner.
-
-# From Paul Eggert (2001-03-05):
-# For now, we'll just record the time in Stanley, since we have no
-# better info.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Falk	1937	1938	-	Sep	lastSun	0:00	1:00	S
-Rule	Falk	1938	1942	-	Mar	Sun>=19	0:00	0	-
-Rule	Falk	1939	only	-	Oct	1	0:00	1:00	S
-Rule	Falk	1940	1942	-	Sep	lastSun	0:00	1:00	S
-Rule	Falk	1943	only	-	Jan	1	0:00	0	-
-Rule	Falk	1983	only	-	Sep	lastSun	0:00	1:00	S
-Rule	Falk	1984	1985	-	Apr	lastSun	0:00	0	-
-Rule	Falk	1984	only	-	Sep	16	0:00	1:00	S
-Rule	Falk	1985	2000	-	Sep	Sun>=9	0:00	1:00	S
-Rule	Falk	1986	2000	-	Apr	Sun>=16	0:00	0	-
-Rule	Falk	2001	max	-	Apr	Sun>=15	2:00	0	-
-Rule	Falk	2001	max	-	Sep	Sun>=1	2:00	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Atlantic/Stanley	-3:51:24 -	LMT	1890
-			-3:51:24 -	SMT	1912 Mar 12  # Stanley Mean Time
-			-4:00	Falk	FK%sT	1983 May     # Falkland Is Time
-			-3:00	Falk	FK%sT	1985 Sep 15
-			-4:00	Falk	FK%sT
-
-# French Guiana
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Cayenne	-3:29:20 -	LMT	1911 Jul
-			-4:00	-	GFT	1967 Oct # French Guiana Time
-			-3:00	-	GFT
-
-# Guyana
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Guyana	-3:52:40 -	LMT	1915 Mar	# Georgetown
-			-3:45	-	GBGT	1966 May 26 # Br Guiana Time
-			-3:45	-	GYT	1975 Jul 31 # Guyana Time
-			-3:00	-	GYT	1991
-# IATA SSIM (1996-06) says -4:00.  Assume a 1991 switch.
-			-4:00	-	GYT
-
-# Paraguay
-# From Paul Eggert (1999-10-29):
-# Shanks (1999) says that spring transitions are from 01:00 -> 02:00,
-# and autumn transitions are from 00:00 -> 23:00.  Go with earlier
-# editions of Shanks, and with the IATA, who say transitions occur at 00:00.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Para	1975	1988	-	Oct	 1	0:00	1:00	S
-Rule	Para	1975	1978	-	Mar	 1	0:00	0	-
-Rule	Para	1979	1991	-	Apr	 1	0:00	0	-
-Rule	Para	1989	only	-	Oct	22	0:00	1:00	S
-Rule	Para	1990	only	-	Oct	 1	0:00	1:00	S
-Rule	Para	1991	only	-	Oct	 6	0:00	1:00	S
-Rule	Para	1992	only	-	Mar	 1	0:00	0	-
-Rule	Para	1992	only	-	Oct	 5	0:00	1:00	S
-Rule	Para	1993	only	-	Mar	31	0:00	0	-
-Rule	Para	1993	1995	-	Oct	 1	0:00	1:00	S
-Rule	Para	1994	1995	-	Feb	lastSun	0:00	0	-
-Rule	Para	1996	only	-	Mar	 1	0:00	0	-
-# IATA SSIM (2000-02) says 1999-10-10; ignore this for now.
-# From Steffen Thorsen (2000-10-02):
-# I have three independent reports that Paraguay changed to DST this Sunday
-# (10-01).
-#
-# Translated by Gwillim Law (2001-02-27) from
-# <a href="http://www.diarionoticias.com.py/011000/nacional/naciona1.htm">
-# Noticias, a daily paper in Asuncion, Paraguay (2000-10-01)
-# </a>:
-# Starting at 0:00 today, the clock will be set forward 60 minutes, in
-# fulfillment of Decree No. 7,273 of the Executive Power....  The time change
-# system has been operating for several years.  Formerly there was a separate
-# decree each year; the new law has the same effect, but permanently.  Every
-# year, the time will change on the first Sunday of October; likewise, the
-# clock will be set back on the first Sunday of March.
-#
-# From Jesper Norgaard (2001-03-06) [an official URL saying similar things]:
-# http://gateway.abc.com.py:8000/pub/pag04.mbr/artic?FHA=2001-03-03-02.24.52.900592
-#
-Rule	Para	1996	2001	-	Oct	Sun>=1	0:00	1:00	S
-# IATA SSIM (1997-09) says Mar 1; go with Shanks.
-Rule	Para	1997	only	-	Feb	lastSun	0:00	0	-
-# Shanks says 1999-02-28; IATA SSIM (1999-02) says 1999-02-27, but
-# (1999-09) reports no date; go with above sources and Gerd Knops (2001-02-27).
-Rule	Para	1998	2001	-	Mar	Sun>=1	0:00	0	-
-# From Rives McDow (2002-02-28):
-# A decree was issued in Paraguay (no. 16350) on 2002-02-26 that changed the
-# dst method to be from the first Sunday in September to the first Sunday in
-# April.
-Rule	Para	2002	2004	-	Apr	Sun>=1	0:00	0	-
-Rule	Para	2002	2003	-	Sep	Sun>=1	0:00	1:00	S
-#
-# From Jesper Norgaard Welen (2005-01-02):
-# There are several sources that claim that Paraguay made
-# a timezone rule change in autumn 2004.
-# From Steffen Thorsen (2005-01-05):
-# Decree 1,867 (2004-03-05) <http://www.labor.com.py/noticias.asp?id=27>
-Rule	Para	2004	max	-	Oct	Sun>=15	0:00	1:00	S
-Rule	Para	2005	max	-	Mar	Sun>=8	0:00	0	-
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Asuncion	-3:50:40 -	LMT	1890
-			-3:50:40 -	AMT	1931 Oct 10 # Asuncion Mean Time
-			-4:00	-	PYT	1972 Oct # Paraguay Time
-			-3:00	-	PYT	1974 Apr
-			-4:00	Para	PY%sT
-
-# Peru
-#
-# <a href="news:xrGmb.39935$gA1.13896113@news4.srv.hcvlny.cv.net">
-# From Evelyn C. Leeper via Mark Brader (2003-10-26):</a>
-# When we were in Peru in 1985-1986, they apparently switched over
-# sometime between December 29 and January 3 while we were on the Amazon.
-#
-# From Paul Eggert (2003-11-02):
-# Shanks doesn't have this transition.  Assume 1986 was like 1987.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Peru	1938	only	-	Jan	 1	0:00	1:00	S
-Rule	Peru	1938	only	-	Apr	 1	0:00	0	-
-Rule	Peru	1938	1939	-	Sep	lastSun	0:00	1:00	S
-Rule	Peru	1939	1940	-	Mar	Sun>=24	0:00	0	-
-Rule	Peru	1986	1987	-	Jan	 1	0:00	1:00	S
-Rule	Peru	1986	1987	-	Apr	 1	0:00	0	-
-Rule	Peru	1990	only	-	Jan	 1	0:00	1:00	S
-Rule	Peru	1990	only	-	Apr	 1	0:00	0	-
-# IATA is ambiguous for 1993/1995; go with Shanks.
-Rule	Peru	1994	only	-	Jan	 1	0:00	1:00	S
-Rule	Peru	1994	only	-	Apr	 1	0:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Lima	-5:08:12 -	LMT	1890
-			-5:08:36 -	LMT	1908 Jul 28 # Lima Mean Time?
-			-5:00	Peru	PE%sT	# Peru Time
-
-# South Georgia
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Atlantic/South_Georgia -2:26:08 -	LMT	1890		# Grytviken
-			-2:00	-	GST	# South Georgia Time
-
-# South Sandwich Is
-# uninhabited; scientific personnel have wintered
-
-# Suriname
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Paramaribo	-3:40:40 -	LMT	1911
-			-3:40:52 -	PMT	1935     # Paramaribo Mean Time
-			-3:40:36 -	PMT	1945 Oct # The capital moved?
-			-3:30	-	NEGT	1975 Nov 20 # Dutch Guiana Time
-			-3:30	-	SRT	1984 Oct # Suriname Time
-			-3:00	-	SRT
-
-# Trinidad and Tobago
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Port_of_Spain -4:06:04 -	LMT	1912 Mar 2
-			-4:00	-	AST
-
-# Uruguay
-# From Paul Eggert (1993-11-18):
-# Uruguay wins the prize for the strangest peacetime manipulation of the rules.
-# From Shanks:
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-# Whitman gives 1923 Oct 1; go with Shanks.
-Rule	Uruguay	1923	only	-	Oct	 2	 0:00	0:30	HS
-Rule	Uruguay	1924	1926	-	Apr	 1	 0:00	0	-
-Rule	Uruguay	1924	1925	-	Oct	 1	 0:00	0:30	HS
-Rule	Uruguay	1933	1935	-	Oct	lastSun	 0:00	0:30	HS
-# Shanks gives 1935 Apr 1 0:00 and 1936 Mar 30 0:00; go with Whitman.
-Rule	Uruguay	1934	1936	-	Mar	Sat>=25	23:30s	0	-
-Rule	Uruguay	1936	only	-	Nov	 1	 0:00	0:30	HS
-Rule	Uruguay	1937	1941	-	Mar	lastSun	 0:00	0	-
-# Whitman gives 1937 Oct 3; go with Shanks.
-Rule	Uruguay	1937	1940	-	Oct	lastSun	 0:00	0:30	HS
-# Whitman gives 1941 Oct 24 - 1942 Mar 27, 1942 Dec 14 - 1943 Apr 13,
-# and 1943 Apr 13 ``to present time''; go with Shanks.
-Rule	Uruguay	1941	only	-	Aug	 1	 0:00	0	-
-Rule	Uruguay	1942	only	-	Jan	 1	 0:00	0:30	HS
-Rule	Uruguay	1942	only	-	Dec	14	 0:00	1:00	S
-Rule	Uruguay	1943	only	-	Mar	14	 0:00	0	-
-Rule	Uruguay	1959	only	-	May	24	 0:00	1:00	S
-Rule	Uruguay	1959	only	-	Nov	15	 0:00	0	-
-Rule	Uruguay	1960	only	-	Jan	17	 0:00	1:00	S
-Rule	Uruguay	1960	only	-	Mar	 6	 0:00	0	-
-Rule	Uruguay	1965	1967	-	Apr	Sun>=1	 0:00	1:00	S
-Rule	Uruguay	1965	only	-	Sep	26	 0:00	0	-
-Rule	Uruguay	1966	1967	-	Oct	31	 0:00	0	-
-Rule	Uruguay	1968	1970	-	May	27	 0:00	0:30	HS
-Rule	Uruguay	1968	1970	-	Dec	 2	 0:00	0	-
-Rule	Uruguay	1972	only	-	Apr	24	 0:00	1:00	S
-Rule	Uruguay	1972	only	-	Aug	15	 0:00	0	-
-Rule	Uruguay	1974	only	-	Mar	10	 0:00	0:30	HS
-Rule	Uruguay	1974	only	-	Dec	22	 0:00	1:00	S
-Rule	Uruguay	1976	only	-	Oct	 1	 0:00	0	-
-Rule	Uruguay	1977	only	-	Dec	 4	 0:00	1:00	S
-Rule	Uruguay	1978	only	-	Apr	 1	 0:00	0	-
-Rule	Uruguay	1979	only	-	Oct	 1	 0:00	1:00	S
-Rule	Uruguay	1980	only	-	May	 1	 0:00	0	-
-Rule	Uruguay	1987	only	-	Dec	14	 0:00	1:00	S
-Rule	Uruguay	1988	only	-	Mar	14	 0:00	0	-
-Rule	Uruguay	1988	only	-	Dec	11	 0:00	1:00	S
-Rule	Uruguay	1989	only	-	Mar	12	 0:00	0	-
-Rule	Uruguay	1989	only	-	Oct	29	 0:00	1:00	S
-# Shanks says no DST was observed in 1990/1 and 1991/2,
-# and that 1992/3's DST was from 10-25 to 03-01.  Go with IATA.
-Rule	Uruguay	1990	1992	-	Mar	Sun>=1	 0:00	0	-
-Rule	Uruguay	1990	1991	-	Oct	Sun>=21	 0:00	1:00	S
-Rule	Uruguay	1992	only	-	Oct	18	 0:00	1:00	S
-Rule	Uruguay	1993	only	-	Feb	28	 0:00	0	-
-# From Eduardo Cota (2004-09-20):
-# The uruguayan government has decreed a change in the local time....
-# http://www.presidencia.gub.uy/decretos/2004091502.htm
-Rule	Uruguay	2004	only	-	Sep	19	 0:00	1:00	S
-# From Steffen Thorsen (2005-03-11):
-# Uruguay's DST was scheduled to end on Sunday, 2005-03-13, but in order to
-# save energy ... it was postponed two weeks....
-# http://www.presidencia.gub.uy/_Web/noticias/2005/03/2005031005.htm
-Rule	Uruguay	2005	only	-	Mar	27	 2:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Montevideo	-3:44:44 -	LMT	1898 Jun 28
-			-3:44:44 -	MMT	1920 May  1	# Montevideo MT
-			-3:30	Uruguay	UY%sT	1942 Dec 14	# Uruguay Time
-			-3:00	Uruguay	UY%sT
-
-# Venezuela
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Caracas	-4:27:44 -	LMT	1890
-			-4:27:40 -	CMT	1912 Feb 12 # Caracas Mean Time?
-			-4:30	-	VET	1965	     # Venezuela Time
-			-4:00	-	VET
+# @(#)southamerica	7.62
+
+# This data is by no means authoritative; if you think you know better,
+# go ahead and edit the file (and please send any changes to
+# tz@elsie.nci.nih.gov for general use in the future).
+
+# From Paul Eggert (1999-07-07):
+# A good source for time zone historical data outside the U.S. is
+# Thomas G. Shanks, The International Atlas (5th edition),
+# San Diego: ACS Publications, Inc. (1999).
+#
+# Gwillim Law writes that a good source
+# for recent time zone data is the International Air Transport
+# Association's Standard Schedules Information Manual (IATA SSIM),
+# published semiannually.  Law sent in several helpful summaries
+# of the IATA's data after 1990.
+#
+# Except where otherwise noted, Shanks is the source for entries through 1990,
+# and IATA SSIM is the source for entries after 1990.
+#
+# Earlier editions of these tables used the North American style (e.g. ARST and
+# ARDT for Argentine Standard and Daylight Time), but the following quote
+# suggests that it's better to use European style (e.g. ART and ARST).
+#	I suggest the use of _Summer time_ instead of the more cumbersome
+#	_daylight-saving time_.  _Summer time_ seems to be in general use
+#	in Europe and South America.
+#	-- E O Cutler, _New York Times_ (1937-02-14), quoted in
+#	H L Mencken, _The American Language: Supplement I_ (1960), p 466
+#
+# Earlier editions of these tables also used the North American style
+# for time zones in Brazil, but this was incorrect, as Brazilians say
+# "summer time".  Reinaldo Goulart, a Sao Paulo businessman active in
+# the railroad sector, writes (1999-07-06):
+#	The subject of time zones is currently a matter of discussion/debate in
+#	Brazil.  Let's say that "the Brasilia time" is considered the
+#	"official time" because Brasilia is the capital city.
+#	The other three time zones are called "Brasilia time "minus one" or
+#	"plus one" or "plus two".  As far as I know there is no such
+#	name/designation as "Eastern Time" or "Central Time".
+# So I invented the following (English-language) abbreviations for now.
+# Corrections are welcome!
+#		std	dst
+#	-2:00	FNT	FNST	Fernando de Noronha
+#	-3:00	BRT	BRST	Brasilia
+#	-4:00	AMT	AMST	Amazon
+#	-5:00	ACT	ACST	Acre
+
+###############################################################################
+
+###############################################################################
+
+# Argentina
+
+# From Bob Devine (1988-01-28):
+# Argentina: first Sunday in October to first Sunday in April since 1976.
+# Double Summer time from 1969 to 1974.  Switches at midnight.
+
+# From U. S. Naval Observatory (1988-01-199):
+# ARGENTINA           3 H BEHIND   UTC
+
+# From Hernan G. Otero (1995-06-26):
+# I am sending modifications to the Argentine time zone table...
+# AR was chosen because they are the ISO letters that represent Argentina.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Arg	1930	only	-	Dec	 1	0:00	1:00	S
+Rule	Arg	1931	only	-	Apr	 1	0:00	0	-
+Rule	Arg	1931	only	-	Oct	15	0:00	1:00	S
+Rule	Arg	1932	1940	-	Mar	 1	0:00	0	-
+Rule	Arg	1932	1939	-	Nov	 1	0:00	1:00	S
+Rule	Arg	1940	only	-	Jul	 1	0:00	1:00	S
+Rule	Arg	1941	only	-	Jun	15	0:00	0	-
+Rule	Arg	1941	only	-	Oct	15	0:00	1:00	S
+Rule	Arg	1943	only	-	Aug	 1	0:00	0	-
+Rule	Arg	1943	only	-	Oct	15	0:00	1:00	S
+Rule	Arg	1946	only	-	Mar	 1	0:00	0	-
+Rule	Arg	1946	only	-	Oct	 1	0:00	1:00	S
+Rule	Arg	1963	only	-	Oct	 1	0:00	0	-
+Rule	Arg	1963	only	-	Dec	15	0:00	1:00	S
+Rule	Arg	1964	1966	-	Mar	 1	0:00	0	-
+Rule	Arg	1964	1966	-	Oct	15	0:00	1:00	S
+Rule	Arg	1967	only	-	Apr	 2	0:00	0	-
+Rule	Arg	1967	1968	-	Oct	Sun>=1	0:00	1:00	S
+Rule	Arg	1968	1969	-	Apr	Sun>=1	0:00	0	-
+Rule	Arg	1974	only	-	Jan	23	0:00	1:00	S
+Rule	Arg	1974	only	-	May	 1	0:00	0	-
+Rule	Arg	1988	only	-	Dec	 1	0:00	1:00	S
+#
+# From Hernan G. Otero (1995-06-26):
+# These corrections were contributed by InterSoft Argentina S.A.,
+# obtaining the data from the:
+# Talleres de Hidrografia Naval Argentina
+# (Argentine Naval Hydrography Institute)
+#
+# Shanks stops after 1992-03-01; go with Otero.
+Rule	Arg	1989	1993	-	Mar	Sun>=1	0:00	0	-
+Rule	Arg	1989	1992	-	Oct	Sun>=15	0:00	1:00	S
+#
+# From Hernan G. Otero (1995-06-26):
+# From this moment on, the law that mandated the daylight saving
+# time corrections was derogated and no more modifications
+# to the time zones (for daylight saving) are now made.
+#
+# From Rives McDow (2000-01-10):
+# On October 3, 1999, 0:00 local, Argentina implemented daylight savings time,
+# which did not result in the switch of a time zone, as they stayed 9 hours
+# from the International Date Line.
+Rule	Arg	1999	only	-	Oct	Sun>=1	0:00	1:00	S
+Rule	Arg	2000	only	-	Mar	Sun>=1	0:00	0	-
+#
+# From Peter Gradelski via Steffen Thorsen (2000-03-01):
+# We just checked with our Sao Paulo office and they say the government of
+# Argentina decided not to become one of the countries that go on or off DST.
+# So Buenos Aires should be -3 hours from GMT at all times.
+#
+# From Fabian L. Arce Jofre (2000-04-04):
+# The law that claimed DST for Argentina was derogated by President Fernando
+# de la Rua on March 2, 2000, because it would make people spend more energy
+# in the winter time, rather than less.  The change took effect on March 3.
+#
+# From Mariano Absatz (2001-06-06):
+# one of the major newspapers here in Argentina said that the 1999
+# Timezone Law (which never was effectively applied) will (would?) be
+# in effect.... The article is at
+# http://ar.clarin.com/diario/2001-06-06/e-01701.htm
+# ... The Law itself is "Ley No 25155", sanctioned on 1999-08-25, enacted
+# 1999-09-17, and published 1999-09-21.  The official publication is at:
+# http://www.boletin.jus.gov.ar/BON/Primera/1999/09-Septiembre/21/PDF/BO21-09-99LEG.PDF
+# Regretfully, you have to subscribe (and pay) for the on-line version....
+#
+# (2001-06-12):
+# the timezone for Argentina will not change next Sunday.
+# Apparently it will do so on Sunday 24th....
+# http://ar.clarin.com/diario/2001-06-12/s-03501.htm
+#
+# (2001-06-25):
+# Last Friday (yes, the last working day before the date of the change), the
+# Senate annulled the 1999 law that introduced the changes later postponed.
+# http://www.clarin.com.ar/diario/2001-06-22/s-03601.htm
+# It remains the vote of the Deputies..., but it will be the same....
+# This kind of things had always been done this way in Argentina.
+# We are still -03:00 all year round in all of the country.
+#
+# From Mariano Absatz (2004-05-21):
+# Today it was officially published that the Province of Mendoza is changing
+# its timezone this winter... starting tomorrow night....
+# http://www.gobernac.mendoza.gov.ar/boletin/pdf/20040521-27158-normas.pdf
+# From Paul Eggert (2004-05-24):
+# It's Law No. 7,210.  This change is due to a public power emergency, so for
+# now we'll assume it's for this year only.
+#
+# From Paul Eggert (2002-01-22):
+# <a href="http://www.spicasc.net/horvera.html">
+# Hora de verano para la Republica Argentina (2000-10-01)
+# </a> says that standard time in Argentina from 1894-10-31
+# to 1920-05-01 was -4:16:48.25.  Go with this more-precise value
+# over Shanks.
+#
+# From Mariano Absatz (2004-06-05):
+# These media articles from a major newspaper mostly cover the current state:
+# http://www.lanacion.com.ar/04/05/27/de_604825.asp
+# http://www.lanacion.com.ar/04/05/28/de_605203.asp
+#
+# The following eight (8) provinces pulled clocks back to UTC-04:00 at
+# midnight Monday May 31st. (that is, the night between 05/31 and 06/01).
+# Apparently, all nine provinces would go back to UTC-03:00 at the same
+# time in October 17th.
+#
+# Catamarca, Chubut, La Rioja, San Juan, San Luis, Santa Cruz,
+# Tierra del Fuego, Tucuman.
+#
+# From Mariano Absatz (2004-06-14):
+# ... this weekend, the Province of Tucuman decided it'd go back to UTC-03:00
+# yesterday midnight (that is, at 24:00 Saturday 12th), since the people's
+# annoyance with the change is much higher than the power savings obtained....
+#
+# From Gwillim Law (2004-06-14):
+# http://www.lanacion.com.ar/04/06/10/de_609078.asp ...
+#     "The time change in Tierra del Fuego was a conflicted decision from
+#   the start.  The government had decreed that the measure would take
+#   effect on June 1, but a normative error forced the new time to begin
+#   three days earlier, from a Saturday to a Sunday....
+# Our understanding was that the change was originally scheduled to take place
+# on June 1 at 00:00 in Chubut, Santa Cruz, Tierra del Fuego (and some other
+# provinces).  Sunday was May 30, only two days earlier.  So the article
+# contains a contradiction.  I would give more credence to the Saturday/Sunday
+# date than the "three days earlier" phrase, and conclude that Tierra del
+# Fuego set its clocks back at 2004-05-30 00:00.
+#
+# From Steffen Thorsen (2004-10-05):
+# The previous law 7210 which changed the province of Mendoza's time zone
+# back in May have been modified slightly in a new law 7277, which set the
+# new end date to 2004-09-26 (original date was 2004-10-17).
+# http://www.gobernac.mendoza.gov.ar/boletin/pdf/20040924-27244-normas.pdf
+#
+# From Mariano Absatz (2004-10-05):
+# San Juan changed from UTC-03:00 to UTC-04:00 at midnight between
+# Sunday, May 30th and Monday, May 31st.  It changed back to UTC-03:00
+# at midnight between Saturday, July 24th and Sunday, July 25th....
+# http://www.sanjuan.gov.ar/prensa/archivo/000329.html
+# http://www.sanjuan.gov.ar/prensa/archivo/000426.html
+# http://www.sanjuan.gov.ar/prensa/archivo/000441.html
+
+# Unless otherwise specified, data are from Shanks through 1992, from
+# the IATA otherwise.  As noted below, Shanks says that
+# America/Cordoba split into 6 subregions during 1991/1992, but we
+# haven't verified this yet so for now we'll keep it a single region.
+#
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+#
+# Buenos Aires (BA), Capital Federal (CF),
+Zone America/Argentina/Buenos_Aires -3:53:48 - LMT 1894 Oct 31
+			-4:16:48 -	CMT	1920 May # Cordoba Mean Time
+			-4:00	-	ART	1930 Dec
+			-4:00	Arg	AR%sT	1969 Oct  5
+			-3:00	Arg	AR%sT	1999 Oct  3
+			-4:00	Arg	AR%sT	2000 Mar  3
+			-3:00	-	ART
+#
+# Santa Fe (SF), Entre Rios (ER), Corrientes (CN), Misiones (MN), Chaco (CC),
+# Formosa (FM), Salta (SA), Santiago del Estero (SE), Cordoba (CB),
+# San Luis (SL), La Pampa (LP), Neuquen (NQ), Rio Negro (RN)
+#
+# Shanks also makes the following claims, which we haven't verified:
+# - Formosa switched to -3:00 on 1991-01-07.
+# - Misiones switched to -3:00 on 1990-12-29.
+# - Chaco switched to -3:00 on 1991-01-04.
+# - San Luis switched to -4:00 on 1990-03-14, then to -3:00 on 1990-10-15,
+#   then to -4:00 on 1991-03-01, then to -3:00 on 1991-06-01.
+# - Santiago del Estero switched to -4:00 on 1991-04-01,
+#   then to -3:00 on 1991-04-26.
+#
+Zone America/Argentina/Cordoba -4:16:48 - LMT	1894 Oct 31
+			-4:16:48 -	CMT	1920 May
+			-4:00	-	ART	1930 Dec
+			-4:00	Arg	AR%sT	1969 Oct  5
+			-3:00	Arg	AR%sT	1991 Mar  3
+			-4:00	-	WART	1991 Oct 20
+			-3:00	Arg	AR%sT	1999 Oct  3
+			-4:00	Arg	AR%sT	2000 Mar  3
+			-3:00	-	ART
+#
+# Tucuman (TM)
+Zone America/Argentina/Tucuman -4:20:52 - LMT	1894 Oct 31
+			-4:16:48 -	CMT	1920 May
+			-4:00	-	ART	1930 Dec
+			-4:00	Arg	AR%sT	1969 Oct  5
+			-3:00	Arg	AR%sT	1991 Mar  3
+			-4:00	-	WART	1991 Oct 20
+			-3:00	Arg	AR%sT	1999 Oct  3
+			-4:00	Arg	AR%sT	2000 Mar  3
+			-3:00	-	ART	2004 Jun  1
+			-4:00	-	WART	2004 Jun 13
+			-3:00	-	ART
+#
+# La Rioja (LR)
+Zone America/Argentina/La_Rioja -4:27:24 - LMT	1894 Oct 31
+			-4:16:48 -	CMT	1920 May
+			-4:00	-	ART	1930 Dec
+			-4:00	Arg	AR%sT	1969 Oct  5
+			-3:00	Arg	AR%sT	1991 Mar  1
+			-4:00	-	WART	1991 May  7
+			-3:00	Arg	AR%sT	1999 Oct  3
+			-4:00	Arg	AR%sT	2000 Mar  3
+			-3:00	-	ART	2004 Jun  1
+			-4:00	-	WART	2004 Jun 20
+			-3:00	-	ART
+#
+# San Juan (SJ)
+Zone America/Argentina/San_Juan -4:34:04 - LMT	1894 Oct 31
+			-4:16:48 -	CMT	1920 May
+			-4:00	-	ART	1930 Dec
+			-4:00	Arg	AR%sT	1969 Oct  5
+			-3:00	Arg	AR%sT	1991 Mar  1
+			-4:00	-	WART	1991 May  7
+			-3:00	Arg	AR%sT	1999 Oct  3
+			-4:00	Arg	AR%sT	2000 Mar  3
+			-3:00	-	ART	2004 May 31
+			-4:00	-	WART	2004 Jul 25
+			-3:00	-	ART
+#
+# Jujuy (JY)
+Zone America/Argentina/Jujuy -4:21:12 -	LMT	1894 Oct 31
+			-4:16:48 -	CMT	1920 May
+			-4:00	-	ART	1930 Dec
+			-4:00	Arg	AR%sT	1969 Oct  5
+			-3:00	Arg	AR%sT	1990 Mar  4
+			-4:00	-	WART	1990 Oct 28
+			-4:00	1:00	WARST	1991 Mar 17
+			-4:00	-	WART	1991 Oct  6
+			-3:00	1:00	ARST	1992
+			-3:00	Arg	AR%sT	1999 Oct  3
+			-4:00	Arg	AR%sT	2000 Mar  3
+			-3:00	-	ART
+#
+# Catamarca (CT), Chubut (CH)
+Zone America/Argentina/Catamarca -4:23:08 - LMT	1894 Oct 31
+			-4:16:48 -	CMT	1920 May
+			-4:00	-	ART	1930 Dec
+			-4:00	Arg	AR%sT	1969 Oct  5
+			-3:00	Arg	AR%sT	1991 Mar  3
+			-4:00	-	WART	1991 Oct 20
+			-3:00	Arg	AR%sT	1999 Oct  3
+			-4:00	Arg	AR%sT	2000 Mar  3
+			-3:00	-	ART	2004 Jun  1
+			-4:00	-	WART	2004 Jun 20
+			-3:00	-	ART
+#
+# Mendoza (MZ)
+Zone America/Argentina/Mendoza -4:35:16 - LMT	1894 Oct 31
+			-4:16:48 -	CMT	1920 May
+			-4:00	-	ART	1930 Dec
+			-4:00	Arg	AR%sT	1969 Oct  5
+			-3:00	Arg	AR%sT	1990 Mar  4
+			-4:00	-	WART	1990 Oct 15
+			-4:00	1:00	WARST	1991 Mar  1
+			-4:00	-	WART	1991 Oct 15
+			-4:00	1:00	WARST	1992 Mar  1
+			-4:00	-	WART	1992 Oct 18
+			-3:00	Arg	AR%sT	1999 Oct  3
+			-4:00	Arg	AR%sT	2000 Mar  3
+			-3:00	-	ART	2004 May 23
+			-4:00	-	WART	2004 Sep 26
+			-3:00	-	ART
+#
+# Santa Cruz (SC)
+Zone America/Argentina/Rio_Gallegos -4:36:52 - LMT 1894 Oct 31
+			-4:16:48 -	CMT	1920 May # Cordoba Mean Time
+			-4:00	-	ART	1930 Dec
+			-4:00	Arg	AR%sT	1969 Oct  5
+			-3:00	Arg	AR%sT	1999 Oct  3
+			-4:00	Arg	AR%sT	2000 Mar  3
+			-3:00	-	ART	2004 Jun  1
+			-4:00	-	WART	2004 Jun 20
+			-3:00	-	ART
+#
+# Tierra del Fuego, Antartida e Islas del Atlantico Sur (TF)
+Zone America/Argentina/Ushuaia -4:33:12 - LMT 1894 Oct 31
+			-4:16:48 -	CMT	1920 May # Cordoba Mean Time
+			-4:00	-	ART	1930 Dec
+			-4:00	Arg	AR%sT	1969 Oct  5
+			-3:00	Arg	AR%sT	1999 Oct  3
+			-4:00	Arg	AR%sT	2000 Mar  3
+			-3:00	-	ART	2004 May 30
+			-4:00	-	WART	2004 Jun 20
+			-3:00	-	ART
+
+# Aruba
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Aruba	-4:40:24 -	LMT	1912 Feb 12	# Oranjestad
+			-4:30	-	ANT	1965 # Netherlands Antilles Time
+			-4:00	-	AST
+
+# Bolivia
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/La_Paz	-4:32:36 -	LMT	1890
+			-4:32:36 -	CMT	1931 Oct 15 # Calamarca MT
+			-4:32:36 1:00	BOST	1932 Mar 21 # Bolivia ST
+			-4:00	-	BOT	# Bolivia Time
+
+# Brazil
+
+# From Paul Eggert (1993-11-18):
+# The mayor of Rio recently attempted to change the time zone rules
+# just in his city, in order to leave more summer time for the tourist trade.
+# The rule change lasted only part of the day;
+# the federal government refused to follow the city's rules, and business
+# was in a chaos, so the mayor backed down that afternoon.
+
+# From IATA SSIM (1996-02):
+# _Only_ the following states in BR1 observe DST: Rio Grande do Sul (RS),
+# Santa Catarina (SC), Parana (PR), Sao Paulo (SP), Rio de Janeiro (RJ),
+# Espirito Santo (ES), Minas Gerais (MG), Bahia (BA), Goias (GO),
+# Distrito Federal (DF), Tocantins (TO), Sergipe [SE] and Alagoas [AL].
+# [The last three states are new to this issue of the IATA SSIM.]
+
+# From Gwillim Law (1996-10-07):
+# Geography, history (Tocantins was part of Goias until 1989), and other
+# sources of time zone information lead me to believe that AL, SE, and TO were
+# always in BR1, and so the only change was whether or not they observed DST....
+# The earliest issue of the SSIM I have is 2/91.  Each issue from then until
+# 9/95 says that DST is observed only in the ten states I quoted from 9/95,
+# along with Mato Grosso (MT) and Mato Grosso do Sul (MS), which are in BR2
+# (UTC-4)....  The other two time zones given for Brazil are BR3, which is
+# UTC-5, no DST, and applies only in the state of Acre (AC); and BR4, which is
+# UTC-2, and applies to Fernando de Noronha (formerly FN, but I believe it's
+# become part of the state of Pernambuco).  The boundary between BR1 and BR2
+# has never been clearly stated.  They've simply been called East and West.
+# However, some conclusions can be drawn from another IATA manual: the Airline
+# Coding Directory, which lists close to 400 airports in Brazil.  For each
+# airport it gives a time zone which is coded to the SSIM.  From that
+# information, I'm led to conclude that the states of Amapa (AP), Ceara (CE),
+# Maranhao (MA), Paraiba (PR), Pernambuco (PE), Piaui (PI), and Rio Grande do
+# Norte (RN), and the eastern part of Para (PA) are all in BR1 without DST.
+
+# From Marcos Tadeu (1998-09-27):
+# <a href="http://pcdsh01.on.br/verao1.html">
+# Brazilian official page
+# </a>
+
+# From Jesper Norgaard (2000-11-03):
+# [For an official list of which regions in Brazil use which time zones, see:]
+# http://pcdsh01.on.br/Fusbr.htm
+# http://pcdsh01.on.br/Fusbrhv.htm
+
+# From Celso Doria via David Madeo (2002-10-09):
+# The reason for the delay this year has to do with elections in Brazil.
+#
+# Unlike in the United States, elections in Brazil are 100% computerized and
+# the results are known almost immediately.  Yesterday, it was the first
+# round of the elections when 115 million Brazilians voted for President,
+# Governor, Senators, Federal Deputies, and State Deputies.  Nobody is
+# counting (or re-counting) votes anymore and we know there will be a second
+# round for the Presidency and also for some Governors.  The 2nd round will
+# take place on October 27th.
+#
+# The reason why the DST will only begin November 3rd is that the thousands
+# of electoral machines used cannot have their time changed, and since the
+# Constitution says the elections must begin at 8:00 AM and end at 5:00 PM,
+# the Government decided to postpone DST, instead of changing the Constitution
+# (maybe, for the next elections, it will be possible to change the clock)...
+
+# From Rodrigo Severo (2004-10-04):
+# It's just the biannual change made necessary by the much hyped, supposedly
+# modern Brazilian eletronic voting machines which, apparently, can't deal
+# with a time change between the first and the second rounds of the elections.
+
+# From Paul Eggert (2002-10-10):
+# The official decrees referenced below are mostly taken from
+# <a href="http://pcdsh01.on.br/DecHV.html">
+# Decretos sobre o Horario de Verao no Brasil
+# </a> (2001-09-20, in Portuguese).
+# The official site for all decrees, including those not related to time, is
+# <a href="http://www.presidencia.gov.br/CCIVIL/decreto/principal_ano.htm">
+# Presidencia da Republica, Subchefia para Assuntos Juridicos, Decretos
+# </a> (in Portuguese).
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+# Decree <a href="http://pcdsh01.on.br/HV20466.htm">20,466</a> (1931-10-01)
+# Decree <a href="http://pcdsh01.on.br/HV21896.htm">21,896</a> (1932-01-10)
+Rule	Brazil	1931	only	-	Oct	 3	11:00	1:00	S
+Rule	Brazil	1932	1933	-	Apr	 1	 0:00	0	-
+Rule	Brazil	1932	only	-	Oct	 3	 0:00	1:00	S
+# Decree <a href="http://pcdsh01.on.br/HV23195.htm">23,195</a> (1933-10-10)
+# revoked DST.
+# Decree <a href="http://pcdsh01.on.br/HV27496.htm">27,496</a> (1949-11-24)
+# Decree <a href="http://pcdsh01.on.br/HV27998.htm">27,998</a> (1950-04-13)
+Rule	Brazil	1949	1952	-	Dec	 1	 0:00	1:00	S
+Rule	Brazil	1950	only	-	Apr	16	 1:00	0	-
+Rule	Brazil	1951	1952	-	Apr	 1	 0:00	0	-
+# Decree <a href="http://pcdsh01.on.br/HV32308.htm">32,308</a> (1953-02-24)
+Rule	Brazil	1953	only	-	Mar	 1	 0:00	0	-
+# Decree <a href="http://pcdsh01.on.br/HV34724.htm">34,724</a> (1953-11-30)
+# revoked DST.
+# Decree <a href="http://pcdsh01.on.br/HV52700.htm">52,700</a> (1963-10-18)
+# established DST from 1963-10-23 00:00 to 1964-02-29 00:00
+# in SP, RJ, GB, MG, ES, due to the prolongation of the drought.
+# Decree <a href="http://pcdsh01.on.br/HV53071.htm">53,071</a> (1963-12-03)
+# extended the above decree to all of the national territory on 12-09.
+Rule	Brazil	1963	only	-	Dec	 9	 0:00	1:00	S
+# Decree <a href="http://pcdsh01.on.br/HV53604.htm">53,604</a> (1964-02-25)
+# extended summer time by one day to 1964-03-01 00:00 (start of school).
+Rule	Brazil	1964	only	-	Mar	 1	 0:00	0	-
+# Decree <a href="http://pcdsh01.on.br/HV55639.htm">55,639</a> (1965-01-27)
+Rule	Brazil	1965	only	-	Jan	31	 0:00	1:00	S
+Rule	Brazil	1965	only	-	Mar	31	 0:00	0	-
+# Decree <a href="http://pcdsh01.on.br/HV57303.htm">57,303</a> (1965-11-22)
+Rule	Brazil	1965	only	-	Dec	 1	 0:00	1:00	S
+# Decree <a href="http://pcdsh01.on.br/HV57843.htm">57,843</a> (1966-02-18)
+Rule	Brazil	1966	1968	-	Mar	 1	 0:00	0	-
+Rule	Brazil	1966	1967	-	Nov	 1	 0:00	1:00	S
+# Decree <a href="http://pcdsh01.on.br/HV63429.htm">63,429</a> (1968-10-15)
+# revoked DST.
+# Decree <a href="http://pcdsh01.on.br/HV91698.htm">91,698</a> (1985-09-27)
+Rule	Brazil	1985	only	-	Nov	 2	 0:00	1:00	S
+# Decree 92,310 (1986-01-21)
+# Decree 92,463 (1986-03-13)
+Rule	Brazil	1986	only	-	Mar	15	 0:00	0	-
+# Decree 93,316 (1986-10-01)
+Rule	Brazil	1986	only	-	Oct	25	 0:00	1:00	S
+Rule	Brazil	1987	only	-	Feb	14	 0:00	0	-
+# Decree <a href="http://pcdsh01.on.br/HV94922.htm">94,922</a> (1987-09-22)
+Rule	Brazil	1987	only	-	Oct	25	 0:00	1:00	S
+Rule	Brazil	1988	only	-	Feb	 7	 0:00	0	-
+# Decree <a href="http://pcdsh01.on.br/HV96676.htm">96,676</a> (1988-09-12)
+# except for the states of AC, AM, PA, RR, RO, and AP (then a territory)
+Rule	Brazil	1988	only	-	Oct	16	 0:00	1:00	S
+Rule	Brazil	1989	only	-	Jan	29	 0:00	0	-
+# Decree <a href="http://pcdsh01.on.br/HV98077.htm">98,077</a> (1989-08-21)
+# with the same exceptions
+Rule	Brazil	1989	only	-	Oct	15	 0:00	1:00	S
+Rule	Brazil	1990	only	-	Feb	11	 0:00	0	-
+# Decree <a href="http://pcdsh01.on.br/HV99530.htm">99,530</a> (1990-09-17)
+# adopted by RS, SC, PR, SP, RJ, ES, MG, GO, MS, DF.
+# Decree 99,629 (1990-10-19) adds BA, MT.
+Rule	Brazil	1990	only	-	Oct	21	 0:00	1:00	S
+Rule	Brazil	1991	only	-	Feb	17	 0:00	0	-
+# <a href="http://pcdsh01.on.br/HV1991.htm">Unnumbered decree</a> (1991-09-25)
+# adopted by RS, SC, PR, SP, RJ, ES, MG, BA, GO, MT, MS, DF.
+Rule	Brazil	1991	only	-	Oct	20	 0:00	1:00	S
+Rule	Brazil	1992	only	-	Feb	 9	 0:00	0	-
+# <a href="http://pcdsh01.on.br/HV1992.htm">Unnumbered decree</a> (1992-10-16)
+# adopted by same states.
+Rule	Brazil	1992	only	-	Oct	25	 0:00	1:00	S
+Rule	Brazil	1993	only	-	Jan	31	 0:00	0	-
+# Decree <a href="http://pcdsh01.on.br/HV942.htm">942</a> (1993-09-28)
+# adopted by same states, plus AM.
+# Decree <a href="http://pcdsh01.on.br/HV1252.htm">1,252</a> (1994-09-22;
+# web page corrected 2004-01-07) adopted by same states, minus AM.
+# Decree <a href="http://pcdsh01.on.br/HV1636.htm">1,636</a> (1995-09-14)
+# adopted by same states, plus MT and TO.
+# Decree <a href="http://pcdsh01.on.br/HV1674.htm">1,674</a> (1995-10-13)
+# adds AL, SE.
+Rule	Brazil	1993	1995	-	Oct	Sun>=11	 0:00	1:00	S
+Rule	Brazil	1994	1995	-	Feb	Sun>=15	 0:00	0	-
+Rule	Brazil	1996	only	-	Feb	11	 0:00	0	-
+# Decree <a href="http://pcdsh01.on.br/HV2000.htm">2,000</a> (1996-09-04)
+# adopted by same states, minus AL, SE.
+Rule	Brazil	1996	only	-	Oct	 6	 0:00	1:00	S
+Rule	Brazil	1997	only	-	Feb	16	 0:00	0	-
+# From Daniel C. Sobral (1998-02-12):
+# In 1997, the DS began on October 6. The stated reason was that
+# because international television networks ignored Brazil's policy on DS,
+# they bought the wrong times on satellite for coverage of Pope's visit.
+# This year, the ending date of DS was postponed to March 1
+# to help dealing with the shortages of electric power.
+#
+# From Paul Eggert (1998-02-25):
+# <a href="http://churchnet.ucsm.ac.uk/news/files2/news165.htm">
+# Brazil Prepares for Papal Visit
+# </a>,
+# Church Net UK (1997-10-02).
+#
+# Decree 2,317 (1997-09-04), adopted by same states.
+Rule	Brazil	1997	only	-	Oct	 6	 0:00	1:00	S
+# Decree <a href="http://pcdsh01.on.br/figuras/HV2495.JPG">2,495</a>
+# (1998-02-10)
+Rule	Brazil	1998	only	-	Mar	 1	 0:00	0	-
+# Decree <a href="http://pcdsh01.on.br/figuras/Hv98.jpg">2,780</a> (1998-09-11)
+# adopted by the same states as before.
+Rule	Brazil	1998	only	-	Oct	11	 0:00	1:00	S
+Rule	Brazil	1999	only	-	Feb	21	 0:00	0	-
+# Decree <a href="http://pcdsh01.on.br/figuras/HV3150.gif">3,150</a>
+# (1999-08-23) adopted by same states.
+# Decree <a href="http://pcdsh01.on.br/DecHV99.gif">3,188</a> (1999-09-30)
+# adds SE, AL, PB, PE, RN, CE, PI, MA and RR.
+Rule	Brazil	1999	only	-	Oct	 3	 0:00	1:00	S
+Rule	Brazil	2000	only	-	Feb	27	 0:00	0	-
+# Decree <a href="http://pcdsh01.on.br/DEC3592.htm">3,592</a> (2000-09-06)
+# adopted by the same states as before.
+# Decree <a href="http://pcdsh01.on.br/Dec3630.jpg">3,630</a> (2000-10-13)
+# repeals DST in PE and RR, effective 2000-10-15 00:00.
+# Decree <a href="http://pcdsh01.on.br/Dec3632.jpg">3,632</a> (2000-10-17)
+# repeals DST in SE, AL, PB, RN, CE, PI and MA, effective 2000-10-22 00:00.
+# Decree <a href="http://pcdsh01.on.br/figuras/HV3916.gif">3,916</a>
+# (2001-09-13) reestablishes DST in AL, CE, MA, PB, PE, PI, RN, SE.
+Rule	Brazil	2000	2001	-	Oct	Sun>=8	 0:00	1:00	S
+Rule	Brazil	2001	max	-	Feb	Sun>=15	 0:00	0	-
+# Decree 4,399 (2002-10-01) repeals DST in AL, CE, MA, PB, PE, PI, RN, SE.
+# <a href="http://www.presidencia.gov.br/CCIVIL/decreto/2002/D4399.htm"></a>
+Rule	Brazil	2002	only	-	Nov	 3	 0:00	1:00	S
+# Decree 4,844 (2003-09-24; corrected 2003-09-26) repeals DST in BA, MT, TO.
+# <a href="http://www.presidencia.gov.br/CCIVIL/decreto/2003/D4844.htm"></a>
+Rule	Brazil	2003	only	-	Oct	19	 0:00	1:00	S
+# Decree 5,223 (2004-10-01) reestablishes DST in MT.
+# <a href="http://www.planalto.gov.br/ccivil_03/_Ato2004-2006/2004/Decreto/D5223.htm"></a>
+Rule	Brazil	2004	only	-	Nov	 2	 0:00	1:00	S
+# The latest ruleset listed above says that the following states observe DST:
+# DF, ES, GO, MG, MS, MT, PR, RJ, RS, SC, SP.
+#
+Rule	Brazil	2005	max	-	Oct	Sun>=15	 0:00	1:00	S
+# For dates after mid-2005, the above rules with TO="max" are guesses
+# and are quite possibly wrong, but are more likely than no DST at all.
+
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+#
+# Fernando de Noronha (administratively part of PE)
+Zone America/Noronha	-2:09:40 -	LMT	1914
+			-2:00	Brazil	FN%sT	1990 Sep 17
+			-2:00	-	FNT	1999 Sep 30
+			-2:00	Brazil	FN%sT	2000 Oct 15
+			-2:00	-	FNT	2001 Sep 13
+			-2:00	Brazil	FN%sT	2002 Oct  1
+			-2:00	-	FNT
+# Other Atlantic islands have no permanent settlement.
+# These include Trindade and Martin Vaz (administratively part of ES),
+# Atol das Rocas (RN), and Penedos de Sao Pedro e Sao Paulo (PE).
+# Fernando de Noronha was a separate territory from 1942-09-02 to 1989-01-01;
+# it also included the Penedos.
+#
+# Amapa (AP), east Para (PA)
+# East Para includes Belem, Maraba, Serra Norte, and Sao Felix do Xingu.
+# The division between east and west Para is the river Xingu.
+# In the north a very small part from the river Javary (now Jari I guess,
+# the border with Amapa) to the Amazon, then to the Xingu.
+Zone America/Belem	-3:13:56 -	LMT	1914
+			-3:00	Brazil	BR%sT	1988 Sep 12
+			-3:00	-	BRT
+#
+# Maranhao (MA), Piaui (PI), Ceara (CE), Rio Grande do Norte (RN),
+# Paraiba (PB)
+Zone America/Fortaleza	-2:34:00 -	LMT	1914
+			-3:00	Brazil	BR%sT	1990 Sep 17
+			-3:00	-	BRT	1999 Sep 30
+			-3:00	Brazil	BR%sT	2000 Oct 22
+			-3:00	-	BRT	2001 Sep 13
+			-3:00	Brazil	BR%sT	2002 Oct  1
+			-3:00	-	BRT
+#
+# Pernambuco (PE) (except Atlantic islands)
+Zone America/Recife	-2:19:36 -	LMT	1914
+			-3:00	Brazil	BR%sT	1990 Sep 17
+			-3:00	-	BRT	1999 Sep 30
+			-3:00	Brazil	BR%sT	2000 Oct 15
+			-3:00	-	BRT	2001 Sep 13
+			-3:00	Brazil	BR%sT	2002 Oct  1
+			-3:00	-	BRT
+#
+# Tocantins (TO)
+Zone America/Araguaina	-3:12:48 -	LMT	1914
+			-3:00	Brazil	BR%sT	1990 Sep 17
+			-3:00	-	BRT	1995 Sep 14
+			-3:00	Brazil	BR%sT	2003 Sep 24
+			-3:00	-	BRT
+#
+# Alagoas (AL), Sergipe (SE)
+Zone America/Maceio	-2:22:52 -	LMT	1914
+			-3:00	Brazil	BR%sT	1990 Sep 17
+			-3:00	-	BRT	1995 Oct 13
+			-3:00	Brazil	BR%sT	1996 Sep  4
+			-3:00	-	BRT	1999 Sep 30
+			-3:00	Brazil	BR%sT	2000 Oct 22
+			-3:00	-	BRT	2001 Sep 13
+			-3:00	Brazil	BR%sT	2002 Oct  1
+			-3:00	-	BRT
+#
+# Bahia (BA)
+# There are too many Salvadors elsewhere, so use America/Bahia instead
+# of America/Salvador.
+Zone America/Bahia	-2:34:04 -	LMT	1914
+			-3:00	Brazil	BR%sT	2003 Sep 24
+			-3:00	-	BRT
+#
+# Goias (GO), Distrito Federal (DF), Minas Gerais (MG),
+# Espirito Santo (ES), Rio de Janeiro (RJ), Sao Paulo (SP), Parana (PR),
+# Santa Catarina (SC), Rio Grande do Sul (RS)
+Zone America/Sao_Paulo	-3:06:28 -	LMT	1914
+			-3:00	Brazil	BR%sT	1963 Oct 23 00:00
+			-3:00	1:00	BRST	1964
+			-3:00	Brazil	BR%sT
+#
+# Mato Grosso do Sul (MS)
+Zone America/Campo_Grande -3:38:28 -	LMT	1914
+			-4:00	Brazil	AM%sT
+#
+# Mato Grosso (MT)
+Zone America/Cuiaba	-3:44:20 -	LMT	1914
+			-4:00	Brazil	AM%sT	2003 Sep 24
+			-4:00	-	AMT	2004 Oct  1
+			-4:00	Brazil	AM%sT
+#
+# west Para (PA), Rondonia (RO)
+# West Para includes Altamira, Oribidos, Prainha, Oriximina, and Santarem.
+Zone America/Porto_Velho -4:15:36 -	LMT	1914
+			-4:00	Brazil	AM%sT	1988 Sep 12
+			-4:00	-	AMT
+#
+# Roraima (RR)
+Zone America/Boa_Vista	-4:02:40 -	LMT	1914
+			-4:00	Brazil	AM%sT	1988 Sep 12
+			-4:00	-	AMT	1999 Sep 30
+			-4:00	Brazil	AM%sT	2000 Oct 15
+			-4:00	-	AMT
+#
+# east Amazonas (AM): Boca do Acre, Jutai, Manaus, Floriano Peixoto
+# The great circle line from Tabatinga to Porto Acre divides
+# east from west Amazonas.
+Zone America/Manaus	-4:00:04 -	LMT	1914
+			-4:00	Brazil	AM%sT	1988 Sep 12
+			-4:00	-	AMT	1993 Sep 28
+			-4:00	Brazil	AM%sT	1994 Sep 22
+			-4:00	-	AMT
+#
+# west Amazonas (AM): Atalaia do Norte, Boca do Maoco, Benjamin Constant,
+#	Eirunepe, Envira, Ipixuna
+Zone America/Eirunepe	-4:39:28 -	LMT	1914
+			-5:00	Brazil	AC%sT	1988 Sep 12
+			-5:00	-	ACT	1993 Sep 28
+			-5:00	Brazil	AC%sT	1994 Sep 22
+			-5:00	-	ACT
+#
+# Acre (AC)
+Zone America/Rio_Branco	-4:31:12 -	LMT	1914
+			-5:00	Brazil	AC%sT	1988 Sep 12
+			-5:00	-	ACT
+
+
+# Chile
+
+# From Eduardo Krell (1995-10-19):
+# The law says to switch to DST at midnight [24:00] on the second SATURDAY
+# of October....  The law is the same for March and October.
+# (1998-09-29):
+# Because of the drought this year, the government decided to go into
+# DST earlier (saturday 9/26 at 24:00). This is a one-time change only ...
+# (unless there's another dry season next year, I guess).
+
+# From Julio I. Pacheco Troncoso (1999-03-18):
+# Because of the same drought, the government decided to end DST later,
+# on April 3, (one-time change).
+
+# From Gwillim Law (2001-05-04):
+# I came across another article in "La Tercera" about Chilean DST.
+# <http://www.tercera.cl/diario/2000/10/13/t-extras.html>
+# It clearly confirms my earlier suggestion, that DST begins at 22:00
+# on Easter Island....  But it also seems to be saying that the
+# observance of DST in Chile began in 1966, rather than 1969 as
+# ... [Shanks] has it....
+#
+# My translation:
+#
+# "The Chilean Army has announced that summer time will begin tomorrow,
+# Saturday, October 14 in continental Chile, insular Chile, and
+# Antarctica, as provided by Supreme Decree 25 of January 11, 1966.
+# By the preceding, official time in continental Chile and Chilean
+# Antarctic, and official time in Western Insular Chile, which applies
+# to Easter Island and Sala y Gomez Island, will be set forward at
+# midnight and at 22:00, respectively, by 20 minutes."
+
+# From Paul Eggert (2001-05-04):
+# Go with this article in preference to Shanks's 1969 date for modern DST.
+# Assume this rule has been used since DST was introduced in the islands.
+
+# From Paul Eggert (2002-10-24):
+# <http://www.shoa.cl/shoa/faqhoraoficial.htm> gives many details that
+# disagree with the following table, but we haven't had time to compare them.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Chile	1918	only	-	Sep	 1	0:00	1:00	S
+Rule	Chile	1919	only	-	Jul	 2	0:00	0	-
+Rule	Chile	1927	1931	-	Sep	 1	0:00	1:00	S
+Rule	Chile	1928	1932	-	Apr	 1	0:00	0	-
+Rule	Chile	1966	1997	-	Oct	Sun>=9	4:00u	1:00	S
+Rule	Chile	1967	1998	-	Mar	Sun>=9	3:00u	0	-
+Rule	Chile	1998	only	-	Sep	27	4:00u	1:00	S
+Rule	Chile	1999	only	-	Apr	 4	3:00u	0	-
+Rule	Chile	1999	max	-	Oct	Sun>=9	4:00u	1:00	S
+Rule	Chile	2000	max	-	Mar	Sun>=9	3:00u	0	-
+# IATA SSIM anomalies: (1990-09) says 1990-09-16; (1992-02) says 1992-03-14;
+# (1996-09) says 1998-03-08.  Ignore these.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Santiago	-4:42:40 -	LMT	1890
+			-4:42:40 -	SMT	1910	    # Santiago Mean Time
+			-5:00	Chile	CL%sT	1932 Sep    # Chile Time
+			-4:00	Chile	CL%sT
+Zone Pacific/Easter	-7:17:28 -	LMT	1890	    # Mataveri
+			-7:17:28 -	MMT	1932 Sep    # Mataveri Mean Time
+			-7:00	Chile	EAS%sT	1982 Mar 14 # Easter I Time
+			-6:00	Chile	EAS%sT
+#
+# Sala y Gomez Island is like Pacific/Easter.
+# Other Chilean locations, including Juan Fernandez Is, San Ambrosio,
+# San Felix, and Antarctic bases, are like America/Santiago.
+
+# Colombia
+# Shanks specifies 24:00 for 1992 transition times; go with IATA,
+# as it seems implausible to change clocks at midnight New Year's Eve.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	CO	1992	only	-	May	 2	0:00	1:00	S
+Rule	CO	1992	only	-	Dec	31	0:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Bogota	-4:56:20 -	LMT	1884 Mar 13
+			-4:56:20 -	BMT	1914 Nov 23 # Bogota Mean Time
+			-5:00	CO	CO%sT	# Colombia Time
+# Malpelo, Providencia, San Andres
+# no information; probably like America/Bogota
+
+# Curacao
+# Shanks says that Bottom and Oranjestad have been at -4:00 since
+# standard time was introduced on 1912-03-02; and that Kralendijk and Rincon
+# used Kralendijk Mean Time (-4:33:08) from 1912-02-02 to 1965-01-01.
+# This all predates our 1970 cutoff, though.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Curacao	-4:35:44 -	LMT	1912 Feb 12	# Willemstad
+			-4:30	-	ANT	1965 # Netherlands Antilles Time
+			-4:00	-	AST
+
+# Ecuador
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Guayaquil	-5:19:20 -	LMT	1890
+			-5:14:00 -	QMT	1931 # Quito Mean Time
+			-5:00	-	ECT	     # Ecuador Time
+Zone Pacific/Galapagos	-5:58:24 -	LMT	1931 # Puerto Baquerizo Moreno
+			-5:00	-	ECT	1986
+			-6:00	-	GALT	     # Galapagos Time
+
+# Falklands
+
+# From Paul Eggert (2001-03-05):
+# Between 1990 and 2000 inclusive, Shanks and the IATA agree except
+# the IATA gives 1996-09-08.  Go with Shanks.
+
+# From Falkland Islands Government Office, London (2001-01-22)
+# via Jesper Norgaard:
+# ... the clocks revert back to Local Mean Time at 2 am on Sunday 15
+# April 2001 and advance one hour to summer time at 2 am on Sunday 2
+# September.  It is anticipated that the clocks will revert back at 2
+# am on Sunday 21 April 2002 and advance to summer time at 2 am on
+# Sunday 1 September.
+
+# From Rives McDow (2001-02-13):
+#
+# I have communicated several times with people there, and the last
+# time I had communications that was helpful was in 1998.  Here is
+# what was said then:
+#
+# "The general rule was that Stanley used daylight saving and the Camp
+# did not. However for various reasons many people in the Camp have
+# started to use daylight saving (known locally as 'Stanley Time')
+# There is no rule as to who uses daylight saving - it is a matter of
+# personal choice and so it is impossible to draw a map showing who
+# uses it and who does not. Any list would be out of date as soon as
+# it was produced. This year daylight saving ended on April 18/19th
+# and started again on September 12/13th.  I do not know what the rule
+# is, but can find out if you like.  We do not change at the same time
+# as UK or Chile."
+#
+# I did have in my notes that the rule was "Second Saturday in Sep at
+# 0:00 until third Saturday in Apr at 0:00".  I think that this does
+# not agree in some cases with Shanks; is this true?
+#
+# Also, there is no mention in the list that some areas in the
+# Falklands do not use DST.  I have found in my communications there
+# that these areas are on the western half of East Falkland and all of
+# West Falkland.  Stanley is the only place that consistently observes
+# DST.  Again, as in other places in the world, the farmers don't like
+# it.  West Falkland is almost entirely sheep farmers.
+#
+# I know one lady there that keeps a list of which farm keeps DST and
+# which doesn't each year.  She runs a shop in Stanley, and says that
+# the list changes each year.  She uses it to communicate to her
+# customers, catching them when they are home for lunch or dinner.
+
+# From Paul Eggert (2001-03-05):
+# For now, we'll just record the time in Stanley, since we have no
+# better info.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Falk	1937	1938	-	Sep	lastSun	0:00	1:00	S
+Rule	Falk	1938	1942	-	Mar	Sun>=19	0:00	0	-
+Rule	Falk	1939	only	-	Oct	1	0:00	1:00	S
+Rule	Falk	1940	1942	-	Sep	lastSun	0:00	1:00	S
+Rule	Falk	1943	only	-	Jan	1	0:00	0	-
+Rule	Falk	1983	only	-	Sep	lastSun	0:00	1:00	S
+Rule	Falk	1984	1985	-	Apr	lastSun	0:00	0	-
+Rule	Falk	1984	only	-	Sep	16	0:00	1:00	S
+Rule	Falk	1985	2000	-	Sep	Sun>=9	0:00	1:00	S
+Rule	Falk	1986	2000	-	Apr	Sun>=16	0:00	0	-
+Rule	Falk	2001	max	-	Apr	Sun>=15	2:00	0	-
+Rule	Falk	2001	max	-	Sep	Sun>=1	2:00	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Atlantic/Stanley	-3:51:24 -	LMT	1890
+			-3:51:24 -	SMT	1912 Mar 12  # Stanley Mean Time
+			-4:00	Falk	FK%sT	1983 May     # Falkland Is Time
+			-3:00	Falk	FK%sT	1985 Sep 15
+			-4:00	Falk	FK%sT
+
+# French Guiana
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Cayenne	-3:29:20 -	LMT	1911 Jul
+			-4:00	-	GFT	1967 Oct # French Guiana Time
+			-3:00	-	GFT
+
+# Guyana
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Guyana	-3:52:40 -	LMT	1915 Mar	# Georgetown
+			-3:45	-	GBGT	1966 May 26 # Br Guiana Time
+			-3:45	-	GYT	1975 Jul 31 # Guyana Time
+			-3:00	-	GYT	1991
+# IATA SSIM (1996-06) says -4:00.  Assume a 1991 switch.
+			-4:00	-	GYT
+
+# Paraguay
+# From Paul Eggert (1999-10-29):
+# Shanks (1999) says that spring transitions are from 01:00 -> 02:00,
+# and autumn transitions are from 00:00 -> 23:00.  Go with earlier
+# editions of Shanks, and with the IATA, who say transitions occur at 00:00.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Para	1975	1988	-	Oct	 1	0:00	1:00	S
+Rule	Para	1975	1978	-	Mar	 1	0:00	0	-
+Rule	Para	1979	1991	-	Apr	 1	0:00	0	-
+Rule	Para	1989	only	-	Oct	22	0:00	1:00	S
+Rule	Para	1990	only	-	Oct	 1	0:00	1:00	S
+Rule	Para	1991	only	-	Oct	 6	0:00	1:00	S
+Rule	Para	1992	only	-	Mar	 1	0:00	0	-
+Rule	Para	1992	only	-	Oct	 5	0:00	1:00	S
+Rule	Para	1993	only	-	Mar	31	0:00	0	-
+Rule	Para	1993	1995	-	Oct	 1	0:00	1:00	S
+Rule	Para	1994	1995	-	Feb	lastSun	0:00	0	-
+Rule	Para	1996	only	-	Mar	 1	0:00	0	-
+# IATA SSIM (2000-02) says 1999-10-10; ignore this for now.
+# From Steffen Thorsen (2000-10-02):
+# I have three independent reports that Paraguay changed to DST this Sunday
+# (10-01).
+#
+# Translated by Gwillim Law (2001-02-27) from
+# <a href="http://www.diarionoticias.com.py/011000/nacional/naciona1.htm">
+# Noticias, a daily paper in Asuncion, Paraguay (2000-10-01)
+# </a>:
+# Starting at 0:00 today, the clock will be set forward 60 minutes, in
+# fulfillment of Decree No. 7,273 of the Executive Power....  The time change
+# system has been operating for several years.  Formerly there was a separate
+# decree each year; the new law has the same effect, but permanently.  Every
+# year, the time will change on the first Sunday of October; likewise, the
+# clock will be set back on the first Sunday of March.
+#
+# From Jesper Norgaard (2001-03-06) [an official URL saying similar things]:
+# http://gateway.abc.com.py:8000/pub/pag04.mbr/artic?FHA=2001-03-03-02.24.52.900592
+#
+Rule	Para	1996	2001	-	Oct	Sun>=1	0:00	1:00	S
+# IATA SSIM (1997-09) says Mar 1; go with Shanks.
+Rule	Para	1997	only	-	Feb	lastSun	0:00	0	-
+# Shanks says 1999-02-28; IATA SSIM (1999-02) says 1999-02-27, but
+# (1999-09) reports no date; go with above sources and Gerd Knops (2001-02-27).
+Rule	Para	1998	2001	-	Mar	Sun>=1	0:00	0	-
+# From Rives McDow (2002-02-28):
+# A decree was issued in Paraguay (no. 16350) on 2002-02-26 that changed the
+# dst method to be from the first Sunday in September to the first Sunday in
+# April.
+Rule	Para	2002	2004	-	Apr	Sun>=1	0:00	0	-
+Rule	Para	2002	2003	-	Sep	Sun>=1	0:00	1:00	S
+#
+# From Jesper Norgaard Welen (2005-01-02):
+# There are several sources that claim that Paraguay made
+# a timezone rule change in autumn 2004.
+# From Steffen Thorsen (2005-01-05):
+# Decree 1,867 (2004-03-05) <http://www.labor.com.py/noticias.asp?id=27>
+Rule	Para	2004	max	-	Oct	Sun>=15	0:00	1:00	S
+Rule	Para	2005	max	-	Mar	Sun>=8	0:00	0	-
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Asuncion	-3:50:40 -	LMT	1890
+			-3:50:40 -	AMT	1931 Oct 10 # Asuncion Mean Time
+			-4:00	-	PYT	1972 Oct # Paraguay Time
+			-3:00	-	PYT	1974 Apr
+			-4:00	Para	PY%sT
+
+# Peru
+#
+# <a href="news:xrGmb.39935$gA1.13896113@news4.srv.hcvlny.cv.net">
+# From Evelyn C. Leeper via Mark Brader (2003-10-26):</a>
+# When we were in Peru in 1985-1986, they apparently switched over
+# sometime between December 29 and January 3 while we were on the Amazon.
+#
+# From Paul Eggert (2003-11-02):
+# Shanks doesn't have this transition.  Assume 1986 was like 1987.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Peru	1938	only	-	Jan	 1	0:00	1:00	S
+Rule	Peru	1938	only	-	Apr	 1	0:00	0	-
+Rule	Peru	1938	1939	-	Sep	lastSun	0:00	1:00	S
+Rule	Peru	1939	1940	-	Mar	Sun>=24	0:00	0	-
+Rule	Peru	1986	1987	-	Jan	 1	0:00	1:00	S
+Rule	Peru	1986	1987	-	Apr	 1	0:00	0	-
+Rule	Peru	1990	only	-	Jan	 1	0:00	1:00	S
+Rule	Peru	1990	only	-	Apr	 1	0:00	0	-
+# IATA is ambiguous for 1993/1995; go with Shanks.
+Rule	Peru	1994	only	-	Jan	 1	0:00	1:00	S
+Rule	Peru	1994	only	-	Apr	 1	0:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Lima	-5:08:12 -	LMT	1890
+			-5:08:36 -	LMT	1908 Jul 28 # Lima Mean Time?
+			-5:00	Peru	PE%sT	# Peru Time
+
+# South Georgia
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Atlantic/South_Georgia -2:26:08 -	LMT	1890		# Grytviken
+			-2:00	-	GST	# South Georgia Time
+
+# South Sandwich Is
+# uninhabited; scientific personnel have wintered
+
+# Suriname
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Paramaribo	-3:40:40 -	LMT	1911
+			-3:40:52 -	PMT	1935     # Paramaribo Mean Time
+			-3:40:36 -	PMT	1945 Oct # The capital moved?
+			-3:30	-	NEGT	1975 Nov 20 # Dutch Guiana Time
+			-3:30	-	SRT	1984 Oct # Suriname Time
+			-3:00	-	SRT
+
+# Trinidad and Tobago
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Port_of_Spain -4:06:04 -	LMT	1912 Mar 2
+			-4:00	-	AST
+
+# Uruguay
+# From Paul Eggert (1993-11-18):
+# Uruguay wins the prize for the strangest peacetime manipulation of the rules.
+# From Shanks:
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+# Whitman gives 1923 Oct 1; go with Shanks.
+Rule	Uruguay	1923	only	-	Oct	 2	 0:00	0:30	HS
+Rule	Uruguay	1924	1926	-	Apr	 1	 0:00	0	-
+Rule	Uruguay	1924	1925	-	Oct	 1	 0:00	0:30	HS
+Rule	Uruguay	1933	1935	-	Oct	lastSun	 0:00	0:30	HS
+# Shanks gives 1935 Apr 1 0:00 and 1936 Mar 30 0:00; go with Whitman.
+Rule	Uruguay	1934	1936	-	Mar	Sat>=25	23:30s	0	-
+Rule	Uruguay	1936	only	-	Nov	 1	 0:00	0:30	HS
+Rule	Uruguay	1937	1941	-	Mar	lastSun	 0:00	0	-
+# Whitman gives 1937 Oct 3; go with Shanks.
+Rule	Uruguay	1937	1940	-	Oct	lastSun	 0:00	0:30	HS
+# Whitman gives 1941 Oct 24 - 1942 Mar 27, 1942 Dec 14 - 1943 Apr 13,
+# and 1943 Apr 13 ``to present time''; go with Shanks.
+Rule	Uruguay	1941	only	-	Aug	 1	 0:00	0	-
+Rule	Uruguay	1942	only	-	Jan	 1	 0:00	0:30	HS
+Rule	Uruguay	1942	only	-	Dec	14	 0:00	1:00	S
+Rule	Uruguay	1943	only	-	Mar	14	 0:00	0	-
+Rule	Uruguay	1959	only	-	May	24	 0:00	1:00	S
+Rule	Uruguay	1959	only	-	Nov	15	 0:00	0	-
+Rule	Uruguay	1960	only	-	Jan	17	 0:00	1:00	S
+Rule	Uruguay	1960	only	-	Mar	 6	 0:00	0	-
+Rule	Uruguay	1965	1967	-	Apr	Sun>=1	 0:00	1:00	S
+Rule	Uruguay	1965	only	-	Sep	26	 0:00	0	-
+Rule	Uruguay	1966	1967	-	Oct	31	 0:00	0	-
+Rule	Uruguay	1968	1970	-	May	27	 0:00	0:30	HS
+Rule	Uruguay	1968	1970	-	Dec	 2	 0:00	0	-
+Rule	Uruguay	1972	only	-	Apr	24	 0:00	1:00	S
+Rule	Uruguay	1972	only	-	Aug	15	 0:00	0	-
+Rule	Uruguay	1974	only	-	Mar	10	 0:00	0:30	HS
+Rule	Uruguay	1974	only	-	Dec	22	 0:00	1:00	S
+Rule	Uruguay	1976	only	-	Oct	 1	 0:00	0	-
+Rule	Uruguay	1977	only	-	Dec	 4	 0:00	1:00	S
+Rule	Uruguay	1978	only	-	Apr	 1	 0:00	0	-
+Rule	Uruguay	1979	only	-	Oct	 1	 0:00	1:00	S
+Rule	Uruguay	1980	only	-	May	 1	 0:00	0	-
+Rule	Uruguay	1987	only	-	Dec	14	 0:00	1:00	S
+Rule	Uruguay	1988	only	-	Mar	14	 0:00	0	-
+Rule	Uruguay	1988	only	-	Dec	11	 0:00	1:00	S
+Rule	Uruguay	1989	only	-	Mar	12	 0:00	0	-
+Rule	Uruguay	1989	only	-	Oct	29	 0:00	1:00	S
+# Shanks says no DST was observed in 1990/1 and 1991/2,
+# and that 1992/3's DST was from 10-25 to 03-01.  Go with IATA.
+Rule	Uruguay	1990	1992	-	Mar	Sun>=1	 0:00	0	-
+Rule	Uruguay	1990	1991	-	Oct	Sun>=21	 0:00	1:00	S
+Rule	Uruguay	1992	only	-	Oct	18	 0:00	1:00	S
+Rule	Uruguay	1993	only	-	Feb	28	 0:00	0	-
+# From Eduardo Cota (2004-09-20):
+# The uruguayan government has decreed a change in the local time....
+# http://www.presidencia.gub.uy/decretos/2004091502.htm
+Rule	Uruguay	2004	only	-	Sep	19	 0:00	1:00	S
+# From Steffen Thorsen (2005-03-11):
+# Uruguay's DST was scheduled to end on Sunday, 2005-03-13, but in order to
+# save energy ... it was postponed two weeks....
+# http://www.presidencia.gub.uy/_Web/noticias/2005/03/2005031005.htm
+Rule	Uruguay	2005	only	-	Mar	27	 2:00	0	-
+# From Eduardo Cota (2005-09-27):
+# http://www.presidencia.gub.uy/_Web/decretos/2005/09/CM%20119_09%2009%202005_00001.PDF
+# This means that from 2005-10-09 at 02:00 local time, until 2006-03-12 at
+# 02:00 local time, official time in Uruguay will be at GMT -2.
+Rule	Uruguay	2005	only	-	Oct	 9	 2:00	1:00	S
+Rule	Uruguay	2006	only	-	Mar	12	 2:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Montevideo	-3:44:44 -	LMT	1898 Jun 28
+			-3:44:44 -	MMT	1920 May  1	# Montevideo MT
+			-3:30	Uruguay	UY%sT	1942 Dec 14	# Uruguay Time
+			-3:00	Uruguay	UY%sT
+
+# Venezuela
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Caracas	-4:27:44 -	LMT	1890
+			-4:27:40 -	CMT	1912 Feb 12 # Caracas Mean Time?
+			-4:30	-	VET	1965	     # Venezuela Time
+			-4:00	-	VET

From 5b602633afeca69e2fe7a03cc9a4b826d17c4a3c Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 8 Oct 2005 13:57:06 +0000
Subject: [PATCH 051/130] Initial project checkin from Al Major

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@908 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/holiday/.cvsignore            |   5 +
 JodaTimeContrib/holiday/LICENSE.txt           | 202 ++++++++++++++++++
 JodaTimeContrib/holiday/NOTICE.txt            |   5 +
 JodaTimeContrib/holiday/checkstyle.xml        |  81 +++++++
 .../holiday/CanadaStatutoryHolidays.java      |  52 +++++
 .../joda/time/contrib/holiday/GBHolidays.java |  51 +++++
 .../time/contrib/holiday/USGovtHolidays.java  |  54 +++++
 .../anniversary/AnniversaryFactory.java       |  46 ++++
 .../holiday/anniversary/AnnualHolidays.java   |  49 +++++
 .../anniversary/CanadaAnniversaries.java      | 105 +++++++++
 .../anniversary/CommonAnniversaries.java      | 118 ++++++++++
 .../holiday/anniversary/GBAnniversaries.java  |  69 ++++++
 .../anniversary/IAnniversaryFactory.java      |  25 +++
 .../anniversary/NamedAnniversaryFactory.java  |  63 ++++++
 .../holiday/anniversary/TimeUtility.java      | 157 ++++++++++++++
 .../holiday/anniversary/USAnniversaries.java  | 191 +++++++++++++++++
 .../time/contrib/holiday/TestUSHolidays.java  |  57 +++++
 .../anniversary/TestCommonAnniversaries.java  |  46 ++++
 .../anniversary/TestUSAnniversaries.java      | 135 ++++++++++++
 JodaTimeContrib/holiday/xdoc/images/joda.png  | Bin 0 -> 2919 bytes
 .../holiday/xdoc/images/jodatime.png          | Bin 0 -> 2850 bytes
 JodaTimeContrib/holiday/xdoc/index.xml        |  54 +++++
 .../holiday/xdoc/stylesheets/joda-theme.css   | 121 +++++++++++
 .../holiday/xdoc/stylesheets/maven-theme.css  | 121 +++++++++++
 24 files changed, 1807 insertions(+)
 create mode 100644 JodaTimeContrib/holiday/.cvsignore
 create mode 100644 JodaTimeContrib/holiday/LICENSE.txt
 create mode 100644 JodaTimeContrib/holiday/NOTICE.txt
 create mode 100644 JodaTimeContrib/holiday/checkstyle.xml
 create mode 100644 JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/CanadaStatutoryHolidays.java
 create mode 100644 JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/GBHolidays.java
 create mode 100644 JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/USGovtHolidays.java
 create mode 100644 JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/anniversary/AnniversaryFactory.java
 create mode 100644 JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/anniversary/AnnualHolidays.java
 create mode 100644 JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/anniversary/CanadaAnniversaries.java
 create mode 100644 JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/anniversary/CommonAnniversaries.java
 create mode 100644 JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/anniversary/GBAnniversaries.java
 create mode 100644 JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/anniversary/IAnniversaryFactory.java
 create mode 100644 JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/anniversary/NamedAnniversaryFactory.java
 create mode 100644 JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/anniversary/TimeUtility.java
 create mode 100644 JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/anniversary/USAnniversaries.java
 create mode 100644 JodaTimeContrib/holiday/src/test/org/joda/time/contrib/holiday/TestUSHolidays.java
 create mode 100644 JodaTimeContrib/holiday/src/test/org/joda/time/contrib/holiday/anniversary/TestCommonAnniversaries.java
 create mode 100644 JodaTimeContrib/holiday/src/test/org/joda/time/contrib/holiday/anniversary/TestUSAnniversaries.java
 create mode 100644 JodaTimeContrib/holiday/xdoc/images/joda.png
 create mode 100644 JodaTimeContrib/holiday/xdoc/images/jodatime.png
 create mode 100644 JodaTimeContrib/holiday/xdoc/index.xml
 create mode 100644 JodaTimeContrib/holiday/xdoc/stylesheets/joda-theme.css
 create mode 100644 JodaTimeContrib/holiday/xdoc/stylesheets/maven-theme.css

diff --git a/JodaTimeContrib/holiday/.cvsignore b/JodaTimeContrib/holiday/.cvsignore
new file mode 100644
index 000000000..e3edba998
--- /dev/null
+++ b/JodaTimeContrib/holiday/.cvsignore
@@ -0,0 +1,5 @@
+bin
+.settings
+.classpath
+.project
+.checkstyle
diff --git a/JodaTimeContrib/holiday/LICENSE.txt b/JodaTimeContrib/holiday/LICENSE.txt
new file mode 100644
index 000000000..d64569567
--- /dev/null
+++ b/JodaTimeContrib/holiday/LICENSE.txt
@@ -0,0 +1,202 @@
+
+                                 Apache License
+                           Version 2.0, January 2004
+                        http://www.apache.org/licenses/
+
+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+   1. Definitions.
+
+      "License" shall mean the terms and conditions for use, reproduction,
+      and distribution as defined by Sections 1 through 9 of this document.
+
+      "Licensor" shall mean the copyright owner or entity authorized by
+      the copyright owner that is granting the License.
+
+      "Legal Entity" shall mean the union of the acting entity and all
+      other entities that control, are controlled by, or are under common
+      control with that entity. For the purposes of this definition,
+      "control" means (i) the power, direct or indirect, to cause the
+      direction or management of such entity, whether by contract or
+      otherwise, or (ii) ownership of fifty percent (50%) or more of the
+      outstanding shares, or (iii) beneficial ownership of such entity.
+
+      "You" (or "Your") shall mean an individual or Legal Entity
+      exercising permissions granted by this License.
+
+      "Source" form shall mean the preferred form for making modifications,
+      including but not limited to software source code, documentation
+      source, and configuration files.
+
+      "Object" form shall mean any form resulting from mechanical
+      transformation or translation of a Source form, including but
+      not limited to compiled object code, generated documentation,
+      and conversions to other media types.
+
+      "Work" shall mean the work of authorship, whether in Source or
+      Object form, made available under the License, as indicated by a
+      copyright notice that is included in or attached to the work
+      (an example is provided in the Appendix below).
+
+      "Derivative Works" shall mean any work, whether in Source or Object
+      form, that is based on (or derived from) the Work and for which the
+      editorial revisions, annotations, elaborations, or other modifications
+      represent, as a whole, an original work of authorship. For the purposes
+      of this License, Derivative Works shall not include works that remain
+      separable from, or merely link (or bind by name) to the interfaces of,
+      the Work and Derivative Works thereof.
+
+      "Contribution" shall mean any work of authorship, including
+      the original version of the Work and any modifications or additions
+      to that Work or Derivative Works thereof, that is intentionally
+      submitted to Licensor for inclusion in the Work by the copyright owner
+      or by an individual or Legal Entity authorized to submit on behalf of
+      the copyright owner. For the purposes of this definition, "submitted"
+      means any form of electronic, verbal, or written communication sent
+      to the Licensor or its representatives, including but not limited to
+      communication on electronic mailing lists, source code control systems,
+      and issue tracking systems that are managed by, or on behalf of, the
+      Licensor for the purpose of discussing and improving the Work, but
+      excluding communication that is conspicuously marked or otherwise
+      designated in writing by the copyright owner as "Not a Contribution."
+
+      "Contributor" shall mean Licensor and any individual or Legal Entity
+      on behalf of whom a Contribution has been received by Licensor and
+      subsequently incorporated within the Work.
+
+   2. Grant of Copyright License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      copyright license to reproduce, prepare Derivative Works of,
+      publicly display, publicly perform, sublicense, and distribute the
+      Work and such Derivative Works in Source or Object form.
+
+   3. Grant of Patent License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      (except as stated in this section) patent license to make, have made,
+      use, offer to sell, sell, import, and otherwise transfer the Work,
+      where such license applies only to those patent claims licensable
+      by such Contributor that are necessarily infringed by their
+      Contribution(s) alone or by combination of their Contribution(s)
+      with the Work to which such Contribution(s) was submitted. If You
+      institute patent litigation against any entity (including a
+      cross-claim or counterclaim in a lawsuit) alleging that the Work
+      or a Contribution incorporated within the Work constitutes direct
+      or contributory patent infringement, then any patent licenses
+      granted to You under this License for that Work shall terminate
+      as of the date such litigation is filed.
+
+   4. Redistribution. You may reproduce and distribute copies of the
+      Work or Derivative Works thereof in any medium, with or without
+      modifications, and in Source or Object form, provided that You
+      meet the following conditions:
+
+      (a) You must give any other recipients of the Work or
+          Derivative Works a copy of this License; and
+
+      (b) You must cause any modified files to carry prominent notices
+          stating that You changed the files; and
+
+      (c) You must retain, in the Source form of any Derivative Works
+          that You distribute, all copyright, patent, trademark, and
+          attribution notices from the Source form of the Work,
+          excluding those notices that do not pertain to any part of
+          the Derivative Works; and
+
+      (d) If the Work includes a "NOTICE" text file as part of its
+          distribution, then any Derivative Works that You distribute must
+          include a readable copy of the attribution notices contained
+          within such NOTICE file, excluding those notices that do not
+          pertain to any part of the Derivative Works, in at least one
+          of the following places: within a NOTICE text file distributed
+          as part of the Derivative Works; within the Source form or
+          documentation, if provided along with the Derivative Works; or,
+          within a display generated by the Derivative Works, if and
+          wherever such third-party notices normally appear. The contents
+          of the NOTICE file are for informational purposes only and
+          do not modify the License. You may add Your own attribution
+          notices within Derivative Works that You distribute, alongside
+          or as an addendum to the NOTICE text from the Work, provided
+          that such additional attribution notices cannot be construed
+          as modifying the License.
+
+      You may add Your own copyright statement to Your modifications and
+      may provide additional or different license terms and conditions
+      for use, reproduction, or distribution of Your modifications, or
+      for any such Derivative Works as a whole, provided Your use,
+      reproduction, and distribution of the Work otherwise complies with
+      the conditions stated in this License.
+
+   5. Submission of Contributions. Unless You explicitly state otherwise,
+      any Contribution intentionally submitted for inclusion in the Work
+      by You to the Licensor shall be under the terms and conditions of
+      this License, without any additional terms or conditions.
+      Notwithstanding the above, nothing herein shall supersede or modify
+      the terms of any separate license agreement you may have executed
+      with Licensor regarding such Contributions.
+
+   6. Trademarks. This License does not grant permission to use the trade
+      names, trademarks, service marks, or product names of the Licensor,
+      except as required for reasonable and customary use in describing the
+      origin of the Work and reproducing the content of the NOTICE file.
+
+   7. Disclaimer of Warranty. Unless required by applicable law or
+      agreed to in writing, Licensor provides the Work (and each
+      Contributor provides its Contributions) on an "AS IS" BASIS,
+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+      implied, including, without limitation, any warranties or conditions
+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
+      PARTICULAR PURPOSE. You are solely responsible for determining the
+      appropriateness of using or redistributing the Work and assume any
+      risks associated with Your exercise of permissions under this License.
+
+   8. Limitation of Liability. In no event and under no legal theory,
+      whether in tort (including negligence), contract, or otherwise,
+      unless required by applicable law (such as deliberate and grossly
+      negligent acts) or agreed to in writing, shall any Contributor be
+      liable to You for damages, including any direct, indirect, special,
+      incidental, or consequential damages of any character arising as a
+      result of this License or out of the use or inability to use the
+      Work (including but not limited to damages for loss of goodwill,
+      work stoppage, computer failure or malfunction, or any and all
+      other commercial damages or losses), even if such Contributor
+      has been advised of the possibility of such damages.
+
+   9. Accepting Warranty or Additional Liability. While redistributing
+      the Work or Derivative Works thereof, You may choose to offer,
+      and charge a fee for, acceptance of support, warranty, indemnity,
+      or other liability obligations and/or rights consistent with this
+      License. However, in accepting such obligations, You may act only
+      on Your own behalf and on Your sole responsibility, not on behalf
+      of any other Contributor, and only if You agree to indemnify,
+      defend, and hold each Contributor harmless for any liability
+      incurred by, or claims asserted against, such Contributor by reason
+      of your accepting any such warranty or additional liability.
+
+   END OF TERMS AND CONDITIONS
+
+   APPENDIX: How to apply the Apache License to your work.
+
+      To apply the Apache License to your work, attach the following
+      boilerplate notice, with the fields enclosed by brackets "[]"
+      replaced with your own identifying information. (Don't include
+      the brackets!)  The text should be enclosed in the appropriate
+      comment syntax for the file format. We also recommend that a
+      file or class name and description of purpose be included on the
+      same "printed page" as the copyright notice for easier
+      identification within third-party archives.
+
+   Copyright [yyyy] [name of copyright owner]
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
diff --git a/JodaTimeContrib/holiday/NOTICE.txt b/JodaTimeContrib/holiday/NOTICE.txt
new file mode 100644
index 000000000..dffbcf31c
--- /dev/null
+++ b/JodaTimeContrib/holiday/NOTICE.txt
@@ -0,0 +1,5 @@
+=============================================================================
+= NOTICE file corresponding to section 4d of the Apache License Version 2.0 =
+=============================================================================
+This product includes software developed by
+Joda.org (http://www.joda.org/).
diff --git a/JodaTimeContrib/holiday/checkstyle.xml b/JodaTimeContrib/holiday/checkstyle.xml
new file mode 100644
index 000000000..37326e2f0
--- /dev/null
+++ b/JodaTimeContrib/holiday/checkstyle.xml
@@ -0,0 +1,81 @@
+<?xml version="1.0"?>
+
+<!DOCTYPE module PUBLIC
+    "-//Puppy Crawl//DTD Check Configuration 1.1//EN"
+    "http://www.puppycrawl.com/dtds/configuration_1_1.dtd">
+
+<!-- customization of default Checkstyle behavior -->
+<module name="Checker">
+  <property name="localeLanguage" value="en"/>
+  <!--module name="PackageHtml"/-->
+  <module name="TreeWalker">
+    <module name="MemberName">
+      <property name="format" value="^[a-zA-Z][a-zA-Z0-9]*$"/>
+    </module>
+    <module name="LocalVariableName">
+      <property name="format" value="^ex[0-9]*$"/>
+      <property name="tokens" value="PARAMETER_DEF"/>
+    </module>
+    <module name="AvoidStarImport"/>
+    <module name="RedundantImport"/>
+    <module name="UnusedImports"/>
+    
+    <module name="TabCharacter"/>
+    <module name="NeedBraces"/>
+    <!--module name="TypecastParenPad"/-->
+    <module name="WhitespaceAfter"/>
+    <module name="WhitespaceAround"/>
+    <module name="ModifierOrder"/>
+    <module name="RedundantModifier"/>
+    
+    <module name="EmptyBlock"/>
+    <module name="LeftCurly"/>
+    <module name="NeedBraces"/>
+    <module name="RightCurly"/>
+    <!--module name="AvoidNestedBlocks">
+      <property name="allowInSwitchCase" value="true"/>
+    </module-->
+    
+    <!--module name="ArrayTrailingComma"/-->
+    <!--module name="CovariantEquals"/-->
+    <module name="DoubleCheckedLocking"/>
+    <module name="EmptyStatement"/>
+    <module name="EqualsHashCode"/>
+    <!--module name="HiddenField">
+      <property name="ignoreConstructorParameter" value="true"/>
+      <property name="ignoreSetter" value="true"/>
+    </module-->
+    <module name="IllegalInstantiation">
+      <property name="classes" value="java.lang.Boolean"/>
+    </module>
+    <!--module name="SuperClone"/-->
+    <!--module name="ExplicitInitialization"/-->
+              
+    <module name="GenericIllegalRegexp">
+      <property name="format" value="System\.out\.println"/>
+    </module>
+    <module name="GenericIllegalRegexp">
+      <property name="format" value="System\.err\.println"/>
+    </module>
+    <module name="TodoComment"/>
+    <module name="UpperEll"/>
+    <module name="ArrayTypeStyle"/>
+    <!--module name="Indentation"/-->
+          
+    <module name="RedundantThrows">
+      <property name="allowUnchecked" value="true"/>
+    </module>
+    <module name="LineLength">
+      <property name="max" value="120"/>
+    </module>
+    <module name="JavadocVariable">
+      <property name="excludeScope" value="private"/>
+    </module>
+    <module name="JavadocMethod">
+      <property name="excludeScope" value="private"/>
+      <property name="allowUndeclaredRTE" value="true"/>
+    </module>
+ </module>
+</module>
+                        
+
diff --git a/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/CanadaStatutoryHolidays.java b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/CanadaStatutoryHolidays.java
new file mode 100644
index 000000000..f4a85a5a0
--- /dev/null
+++ b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/CanadaStatutoryHolidays.java
@@ -0,0 +1,52 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.contrib.holiday;
+
+import org.joda.time.contrib.holiday.anniversary.AnnualHolidays;
+import org.joda.time.contrib.holiday.anniversary.CanadaAnniversaries;
+import org.joda.time.contrib.holiday.anniversary.CommonAnniversaries;
+import org.joda.time.contrib.holiday.anniversary.NamedAnniversaryFactory;
+
+/**
+ * 
+ * @author Al Major
+ *
+ */
+public class CanadaStatutoryHolidays {
+    static AnnualHolidays<NamedAnniversaryFactory.NamedAnniversary, NamedAnniversaryFactory>
+    FEDERAL = new AnnualHolidays<NamedAnniversaryFactory.NamedAnniversary, NamedAnniversaryFactory> () {
+        protected void buildFactories () {
+            addFactory(new NamedAnniversaryFactory("New Year's Day",
+                    CanadaAnniversaries.NEW_YEAR_HOLIDAY));
+            addFactory(new NamedAnniversaryFactory("Good Friday",
+                    CommonAnniversaries.GOOD_FRIDAY));
+            addFactory(new NamedAnniversaryFactory("Victoria Day",
+                    CanadaAnniversaries.VICTORIA_DAY));
+            addFactory(new NamedAnniversaryFactory("Canada Day",
+                    CanadaAnniversaries.CANADA_DAY_HOLIDAY));
+            addFactory(new NamedAnniversaryFactory("Labour Day",
+                    CommonAnniversaries.LABOR_DAY));
+            addFactory(new NamedAnniversaryFactory("Thanksgiving Day",
+                    CanadaAnniversaries.THANKSGIVING));
+            addFactory(new NamedAnniversaryFactory("Remembrance Day",
+                    CanadaAnniversaries.REMEMBRANCE_DAY_HOLIDAY));
+            addFactory(new NamedAnniversaryFactory("Christmas Day",
+                    CanadaAnniversaries.CHRISTMAS_HOLIDAY));
+            addFactory(new NamedAnniversaryFactory("Boxing Day",
+                    CanadaAnniversaries.BOXING_DAY_HOLIDAY));
+        }
+    };
+}
diff --git a/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/GBHolidays.java b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/GBHolidays.java
new file mode 100644
index 000000000..6f15be8a5
--- /dev/null
+++ b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/GBHolidays.java
@@ -0,0 +1,51 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.contrib.holiday;
+
+import org.joda.time.contrib.holiday.anniversary.AnnualHolidays;
+import org.joda.time.contrib.holiday.anniversary.CommonAnniversaries;
+import org.joda.time.contrib.holiday.anniversary.GBAnniversaries;
+import org.joda.time.contrib.holiday.anniversary.NamedAnniversaryFactory;
+/**
+ * 
+ * @author Al Major
+ *
+ */
+public class GBHolidays {
+    static AnnualHolidays<NamedAnniversaryFactory.NamedAnniversary, NamedAnniversaryFactory>
+        ENGLISH_BANK = new AnnualHolidays<NamedAnniversaryFactory.NamedAnniversary, NamedAnniversaryFactory> () {
+        protected void buildFactories () {
+            addFactory(new NamedAnniversaryFactory("New Year's Day",
+                    CommonAnniversaries.NEW_YEAR));
+            addFactory(new NamedAnniversaryFactory("Good Friday",
+                    CommonAnniversaries.GOOD_FRIDAY));
+            addFactory(new NamedAnniversaryFactory("Easter Monday",
+                    CommonAnniversaries.EASTER_MONDAY));
+            addFactory(new NamedAnniversaryFactory("May Day Bank Holiday",
+                    GBAnniversaries.MAY_DAY_BANK_HOLIDAY));
+            addFactory(new NamedAnniversaryFactory("Spring Bank Holiday",
+                    GBAnniversaries.SPRING_BANK_HOLIDAY));
+            addFactory(new NamedAnniversaryFactory("Battle of the Boyne",
+                    GBAnniversaries.JULY_12));
+            addFactory(new NamedAnniversaryFactory("Summer Bank Holiday",
+                    GBAnniversaries.SUMMER_BANK_HOLIDAY));
+            addFactory(new NamedAnniversaryFactory("Christmas Day",
+                    CommonAnniversaries.CHRISTMAS));
+            addFactory(new NamedAnniversaryFactory("Boxing Day",
+                    CommonAnniversaries.BOXING_DAY));
+        }
+    };
+}
diff --git a/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/USGovtHolidays.java b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/USGovtHolidays.java
new file mode 100644
index 000000000..ece6f8196
--- /dev/null
+++ b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/USGovtHolidays.java
@@ -0,0 +1,54 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.contrib.holiday;
+
+import org.joda.time.contrib.holiday.anniversary.AnnualHolidays;
+import org.joda.time.contrib.holiday.anniversary.CommonAnniversaries;
+import org.joda.time.contrib.holiday.anniversary.NamedAnniversaryFactory;
+import org.joda.time.contrib.holiday.anniversary.USAnniversaries;
+/**
+ * 
+ * @author Al Major
+ *
+ */
+public class USGovtHolidays {
+    static AnnualHolidays<NamedAnniversaryFactory.NamedAnniversary, NamedAnniversaryFactory>
+        FEDERAL = new AnnualHolidays<NamedAnniversaryFactory.NamedAnniversary, NamedAnniversaryFactory> () {
+        protected void buildFactories () {
+            addFactory(new NamedAnniversaryFactory("New Year's Day",
+                    USAnniversaries.NEW_YEAR_HOLIDAY));
+            addFactory(new NamedAnniversaryFactory(
+                    "Birthday of Martin Luther King, Jr.",
+                    USAnniversaries.MARTIN_LUTHER_KING_DAY));
+            addFactory(new NamedAnniversaryFactory("Washington's Birthday",
+                    USAnniversaries.WASHINGTONS_BIRTHDAY_HOLIDAY));
+            addFactory(new NamedAnniversaryFactory("Memorial Day",
+                    USAnniversaries.MEMORIAL_DAY));
+            addFactory(new NamedAnniversaryFactory("Independence Day",
+                    USAnniversaries.INDEPENDENCE_DAY_HOLIDAY));
+            addFactory(new NamedAnniversaryFactory("Labor Day",
+                    CommonAnniversaries.LABOR_DAY));
+            addFactory(new NamedAnniversaryFactory("Columbus Day",
+                    USAnniversaries.COLUMBUS_DAY));
+            addFactory(new NamedAnniversaryFactory("Veterans Day",
+                    USAnniversaries.VETERANS_DAY_HOLIDAY));
+            addFactory(new NamedAnniversaryFactory("Thanksgiving Day",
+                    USAnniversaries.THANKSGIVING));
+            addFactory(new NamedAnniversaryFactory("Christmas Day",
+                    USAnniversaries.CHRISTMAS_HOLIDAY));
+        }
+    };
+}
diff --git a/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/anniversary/AnniversaryFactory.java b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/anniversary/AnniversaryFactory.java
new file mode 100644
index 000000000..d1b1e4baa
--- /dev/null
+++ b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/anniversary/AnniversaryFactory.java
@@ -0,0 +1,46 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.contrib.holiday.anniversary;
+
+import org.joda.time.Chronology;
+import org.joda.time.DateTime;
+/**
+ * 
+ * @author Al Major
+ *
+ */
+public abstract class AnniversaryFactory implements
+        IAnniversaryFactory<DateTime> {
+    private final String holidayID;
+
+    protected AnniversaryFactory(String str, Chronology c) {
+        if (c != Chronology.getISO()) {
+            throw new IllegalArgumentException(
+                    "AnniversaryFactory(String, Chronology): requires Gregorian/UTC chronologies only");
+        }
+        this.holidayID = str;
+    }
+
+    protected AnniversaryFactory(String str) {
+        this.holidayID = str;
+    }
+
+    public abstract DateTime create(int iYear);
+
+    public String getId() {
+        return holidayID;
+    }
+}
diff --git a/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/anniversary/AnnualHolidays.java b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/anniversary/AnnualHolidays.java
new file mode 100644
index 000000000..5e9630123
--- /dev/null
+++ b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/anniversary/AnnualHolidays.java
@@ -0,0 +1,49 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.contrib.holiday.anniversary;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+/**
+ * 
+ * @author Al Major
+ *
+ * @param <T>
+ * @param <AF>
+ */
+public abstract class AnnualHolidays<T extends Comparable, AF extends IAnniversaryFactory<? extends T>> {
+    protected final List<AF> fHolidayFactories = new ArrayList<AF>();
+    
+    public AnnualHolidays() {
+        buildFactories();
+    }
+
+    protected abstract void buildFactories ();
+
+    protected void addFactory(AF af) {
+        fHolidayFactories.add(af);
+    }
+
+    public List<T> getHolidaysForYear(int iYear) {
+        List<T> result = new ArrayList<T>(fHolidayFactories.size());
+        for (AF sdf : (List<AF>) fHolidayFactories) {
+            result.add((T) sdf.create(iYear));
+        }
+        Collections.sort(result);
+        return result;
+    }
+}
diff --git a/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/anniversary/CanadaAnniversaries.java b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/anniversary/CanadaAnniversaries.java
new file mode 100644
index 000000000..0472ee637
--- /dev/null
+++ b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/anniversary/CanadaAnniversaries.java
@@ -0,0 +1,105 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.contrib.holiday.anniversary;
+
+import org.joda.time.DateMidnight;
+import org.joda.time.DateTime;
+import org.joda.time.DateTimeConstants;
+
+/**
+ * Caveat: According to the description on Wikipedia, the rule states that the
+ * holiday is moved if it would fall on _another holiday_ not just a weekend.
+ * The only standard holidays for which this could be a problem is Boxing Day
+ * and Jan 2, which are explicitly corrected.
+ * 
+ * It's not clear how the rule interacts with non statutory holidays.
+ * 
+ */
+public class CanadaAnniversaries {
+
+    public static final AnniversaryFactory NEW_YEAR_HOLIDAY = new AnniversaryFactory(
+            "CanadaDayHoliday") {
+        public DateTime create(int iYear) {
+            return TimeUtility
+                    .AdjustCanadianHolidayForWeekend(CanadaAnniversaries.CANADA_DAY
+                            .create(iYear));
+        }
+    };
+
+    public static final AnniversaryFactory VICTORIA_DAY = new AnniversaryFactory(
+            "VictoriaDay") {
+        public DateTime create(int iYear) {
+            return TimeUtility.GetLastXWeekdayOfMonthBeforeYMonthday(
+                    DateTimeConstants.MONDAY, 25, iYear, DateTimeConstants.MAY);
+        }
+    };
+
+    public static final AnniversaryFactory CANADA_DAY = new AnniversaryFactory(
+            "CanadaDay") {
+        public DateTime create(int iYear) {
+            return new DateMidnight(iYear, DateTimeConstants.JULY, 1)
+                    .toDateTime();
+        }
+    };
+
+    public static final AnniversaryFactory CANADA_DAY_HOLIDAY = new AnniversaryFactory(
+            "CanadaDayHoliday") {
+        public DateTime create(int iYear) {
+            return TimeUtility
+                    .AdjustCanadianHolidayForWeekend(CanadaAnniversaries.CANADA_DAY
+                            .create(iYear));
+        }
+    };
+
+    public static final AnniversaryFactory THANKSGIVING = new AnniversaryFactory(
+            "Thanksgiving") {
+        public DateTime create(int iYear) {
+            // Second Monday in October
+            return TimeUtility.GetFirstXWeekdayOfMonth(
+                    DateTimeConstants.MONDAY, iYear, DateTimeConstants.OCTOBER)
+                    .plusWeeks(1);
+        }
+    };
+
+    public static final AnniversaryFactory REMEMBRANCE_DAY_HOLIDAY = new AnniversaryFactory(
+            "RemembranceDayHoliday") {
+        public DateTime create(int iYear) {
+            return TimeUtility
+                    .AdjustCanadianHolidayForWeekend(CommonAnniversaries.ARMISTICE_DAY
+                            .create(iYear));
+        }
+    };
+
+    public static final AnniversaryFactory CHRISTMAS_HOLIDAY = new AnniversaryFactory(
+            "ChristmasHoliday") {
+        public DateTime create(int iYear) {
+            return TimeUtility
+                    .AdjustCanadianHolidayForWeekend(CommonAnniversaries.CHRISTMAS
+                            .create(iYear));
+        }
+    };
+
+    public static final AnniversaryFactory BOXING_DAY_HOLIDAY = new AnniversaryFactory(
+            "BoxingDayHoliday") {
+        // special case. since they two dates are together and both have to be on a weekday
+        public DateTime create(int iYear) {
+            return TimeUtility
+                    .AdjustCanadianHolidayForWeekend(CHRISTMAS_HOLIDAY.create(
+                            iYear).plusDays(1));
+        }
+    };
+
+}
diff --git a/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/anniversary/CommonAnniversaries.java b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/anniversary/CommonAnniversaries.java
new file mode 100644
index 000000000..370290e6e
--- /dev/null
+++ b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/anniversary/CommonAnniversaries.java
@@ -0,0 +1,118 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.contrib.holiday.anniversary;
+
+import org.joda.time.DateMidnight;
+import org.joda.time.DateTime;
+import org.joda.time.DateTimeConstants;
+
+public class CommonAnniversaries {
+
+    public static final AnniversaryFactory NEW_YEAR = new AnniversaryFactory(
+            "NewYear") {
+        public DateTime create(int iYear) {
+            return new DateMidnight(iYear, DateTimeConstants.JANUARY, 1)
+                    .toDateTime();
+        }
+    };
+
+    public static final AnniversaryFactory ST_VALENTINES_DAY = new AnniversaryFactory(
+            "ValentinesDay") {
+        public DateTime create(int iYear) {
+            return new DateMidnight(iYear, DateTimeConstants.FEBRUARY, 14)
+                    .toDateTime();
+        }
+    };
+
+    public static final AnniversaryFactory ST_PATRICKS_DAY = new AnniversaryFactory(
+            "StPatricksDay") {
+        public DateTime create(int iYear) {
+            return new DateMidnight(iYear, DateTimeConstants.MARCH, 17)
+                    .toDateTime();
+        }
+    };
+
+    public static final AnniversaryFactory GOOD_FRIDAY = new AnniversaryFactory(
+            "GoodFriday") {
+        public DateTime create(int iYear) {
+            return EASTER_SUNDAY.create(iYear).minusDays(2);
+        }
+    };
+
+    /**
+     * Source: http://www.tondering.dk/claus/calendar.html This is a calculation
+     * for the <em>Gregorian</em> calendar only.
+     */
+    public static final AnniversaryFactory EASTER_SUNDAY = new AnniversaryFactory(
+            "EasterSunday") {
+        public DateTime create(int iYear) {
+            int iG = iYear % 19;
+            int iC = iYear / 100;
+            int iH = (iC - iC / 4 - (8 * iC + 13) / 25 + 19 * iG + 15) % 30;
+            int iI = iH - (iH / 28) * (1 - (29 / (iH + 1)) * ((21 - iG) / 11));
+            int iJ = (iYear + iYear / 4 + iI + 2 - iC + iC / 4) % 7;
+            int iL = iI - iJ;
+            int iMonth = 3 + (iL + 40) / 44;
+            int iDay = iL + 28 - 31 * (iMonth / 4);
+            return new DateMidnight(iYear, iMonth, iDay).toDateTime();
+        }
+    };
+
+    public static final AnniversaryFactory EASTER_MONDAY = new AnniversaryFactory(
+            "EasterMonday") {
+        public DateTime create(int iYear) {
+            return EASTER_SUNDAY.create(iYear).plusDays(1);
+        }
+    };
+
+    /**
+     * same as Veterans Day and Remembrance Day.
+     */
+    public static final AnniversaryFactory ARMISTICE_DAY = new AnniversaryFactory(
+            "ArmisticeDay") {
+        public DateTime create(int iYear) {
+            return new DateMidnight(iYear, DateTimeConstants.NOVEMBER, 11)
+                    .toDateTime();
+        }
+    };
+
+    public static final AnniversaryFactory CHRISTMAS = new AnniversaryFactory(
+            "Christmas") {
+        public DateTime create(int iYear) {
+            return new DateMidnight(iYear, DateTimeConstants.DECEMBER, 25)
+                    .toDateTime();
+        }
+    };
+
+    public static final AnniversaryFactory BOXING_DAY = new AnniversaryFactory(
+            "BoxingDay") {
+        public DateTime create(int iYear) {
+            return new DateMidnight(iYear, DateTimeConstants.DECEMBER, 26)
+                    .toDateTime();
+        }
+    };
+
+    public static final AnniversaryFactory LABOR_DAY = new AnniversaryFactory(
+            "LaborDay") {
+        public DateTime create(int iYear) {
+            // First Monday in September
+            return TimeUtility.GetFirstXWeekdayOfMonth(
+                    DateTimeConstants.MONDAY, iYear,
+                    DateTimeConstants.SEPTEMBER);
+        }
+    };
+
+}
diff --git a/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/anniversary/GBAnniversaries.java b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/anniversary/GBAnniversaries.java
new file mode 100644
index 000000000..fc1202547
--- /dev/null
+++ b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/anniversary/GBAnniversaries.java
@@ -0,0 +1,69 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.contrib.holiday.anniversary;
+
+import org.joda.time.DateMidnight;
+import org.joda.time.DateTime;
+import org.joda.time.DateTimeConstants;
+
+public class GBAnniversaries {
+    /*
+     * TODO: in 1995 this was moved to second monday in may. fix?
+     */
+    public static final AnniversaryFactory MAY_DAY_BANK_HOLIDAY = new AnniversaryFactory(
+            "MayDayBankHoliday") {
+        public DateTime create(int iYear) {
+            // First Monday in May
+            return TimeUtility.GetFirstXWeekdayOfMonth(
+                    DateTimeConstants.MONDAY, iYear, DateTimeConstants.MAY);
+        }
+    };
+
+    public static final AnniversaryFactory SPRING_BANK_HOLIDAY = new AnniversaryFactory(
+            "SpringBankHoliday") {
+        public DateTime create(int iYear) {
+            // Last Monday in May
+            return TimeUtility.GetLastXWeekdayOfMonth(DateTimeConstants.MONDAY,
+                    iYear, DateTimeConstants.MAY);
+        }
+    };
+
+    public static final AnniversaryFactory JULY_12 = new AnniversaryFactory(
+            "July12") {
+        public DateTime create(int iYear) {
+            return new DateMidnight(iYear, DateTimeConstants.JULY, 12)
+                    .toDateTime();
+        }
+    };
+
+    public static final AnniversaryFactory SUMMER_BANK_HOLIDAY = new AnniversaryFactory(
+            "SummerBankHoliday") {
+        public DateTime create(int iYear) {
+            // Last Monday in August
+            return TimeUtility.GetLastXWeekdayOfMonth(DateTimeConstants.MONDAY,
+                    iYear, DateTimeConstants.AUGUST);
+        }
+    };
+
+    public static final AnniversaryFactory SCOTTISH_SUMMER_BANK_HOLIDAY = new AnniversaryFactory(
+            "MayDayBankHoliday") {
+        public DateTime create(int iYear) {
+            // First Monday in August
+            return TimeUtility.GetFirstXWeekdayOfMonth(
+                    DateTimeConstants.MONDAY, iYear, DateTimeConstants.AUGUST);
+        }
+    };
+}
diff --git a/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/anniversary/IAnniversaryFactory.java b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/anniversary/IAnniversaryFactory.java
new file mode 100644
index 000000000..0c5570f49
--- /dev/null
+++ b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/anniversary/IAnniversaryFactory.java
@@ -0,0 +1,25 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.contrib.holiday.anniversary;
+/**
+ * 
+ * @author Al Major
+ *
+ * @param <T>
+ */
+public interface IAnniversaryFactory<T> {
+    T create(int iYear);
+}
diff --git a/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/anniversary/NamedAnniversaryFactory.java b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/anniversary/NamedAnniversaryFactory.java
new file mode 100644
index 000000000..2f30bb670
--- /dev/null
+++ b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/anniversary/NamedAnniversaryFactory.java
@@ -0,0 +1,63 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.contrib.holiday.anniversary;
+
+import org.joda.time.DateTime;
+/**
+ * 
+ * @author Al Major
+ *
+ */
+public class NamedAnniversaryFactory implements
+        IAnniversaryFactory<NamedAnniversaryFactory.NamedAnniversary> {
+    public class NamedAnniversary implements Comparable {
+        final DateTime fAnniversary;
+
+        NamedAnniversary(DateTime dm) {
+            fAnniversary = dm;
+        }
+
+        public String getName() {
+            return fAnniversaryName;
+        }
+
+        public DateTime getDate() {
+            return fAnniversary;
+        }
+
+        public int compareTo(Object o) {
+            if ( o instanceof NamedAnniversary ) {
+                return fAnniversary.compareTo(((NamedAnniversary)o).fAnniversary);
+            } else {
+                assert false;
+                return 0;
+            }
+        }
+    }
+
+    final String fAnniversaryName;
+
+    final AnniversaryFactory fFactory;
+
+    public NamedAnniversaryFactory(String strName, AnniversaryFactory af) {
+        fAnniversaryName = strName;
+        fFactory = af;
+    }
+
+    public NamedAnniversary create(int iYear) {
+        return new NamedAnniversary(fFactory.create(iYear));
+    }
+}
diff --git a/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/anniversary/TimeUtility.java b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/anniversary/TimeUtility.java
new file mode 100644
index 000000000..aec3df23d
--- /dev/null
+++ b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/anniversary/TimeUtility.java
@@ -0,0 +1,157 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.contrib.holiday.anniversary;
+
+import org.joda.time.DateMidnight;
+import org.joda.time.DateTime;
+import org.joda.time.DateTimeConstants;
+import org.joda.time.Period;
+/**
+ * 
+ * @author Al Major
+ *
+ */
+public class TimeUtility {
+    private static final long APPROX_MILLIS_PER_YEAR = 365L * 24L * 60L * 60L
+            * 1000L;
+
+    private static final long APPROX_MILLIS_PER_MONTH = 31L * 24L * 60L * 60L
+            * 1000L;
+
+    public static Period getApproxPeriod(long l) {
+        long millis = l;
+
+        long numYears = millis / APPROX_MILLIS_PER_YEAR;
+        Period p = Period.years((int) numYears);
+        millis -= numYears * APPROX_MILLIS_PER_YEAR;
+
+        long numMonths = millis / APPROX_MILLIS_PER_MONTH;
+        p = p.withMonths((int) numMonths);
+        millis -= numMonths * APPROX_MILLIS_PER_MONTH;
+
+        long numDays = millis / DateTimeConstants.MILLIS_PER_DAY;
+        p = p.withDays((int) numDays);
+        millis -= numDays * DateTimeConstants.MILLIS_PER_DAY;
+
+        long numHours = millis / DateTimeConstants.MILLIS_PER_HOUR;
+        p = p.withHours((int) numHours);
+        millis -= numHours * DateTimeConstants.MILLIS_PER_HOUR;
+
+        long numMinutes = millis / DateTimeConstants.MILLIS_PER_MINUTE;
+        p = p.withMinutes((int) numMinutes);
+        millis -= numMinutes * DateTimeConstants.MILLIS_PER_MINUTE;
+
+        long numSeconds = millis / DateTimeConstants.MILLIS_PER_SECOND;
+        p = p.withSeconds((int) numSeconds);
+        millis -= numSeconds * DateTimeConstants.MILLIS_PER_SECOND;
+
+        p = p.withMillis((int) millis);
+
+        assert l == getApproxMillis(p);
+
+        return p;
+    }
+
+    public static long getApproxMillis(Period p) {
+        if (p.getWeeks() != 0) {
+            return ((long) p.getWeeks()) * DateTimeConstants.MILLIS_PER_WEEK;
+        }
+        return ((long) p.getYears()) * APPROX_MILLIS_PER_YEAR
+                + ((long) p.getMonths()) * APPROX_MILLIS_PER_MONTH
+                + ((long) p.getDays()) * DateTimeConstants.MILLIS_PER_DAY
+                + ((long) p.getHours()) * DateTimeConstants.MILLIS_PER_HOUR
+                + ((long) p.getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE
+                + ((long) p.getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND
+                + ((long) p.getMillis());
+    }
+
+    // iXDayOfWeek takes on values from DateTimeConstants.MONDAY through
+    // DateTimeConstants.SUNDAY
+    static DateTime GetFirstXWeekdayOfMonth(int iXDayOfWeek, int iYear,
+            int iMonth) {
+        DateTime dmFirstOfMonth = new DateMidnight(iYear, iMonth, 1)
+                .toDateTime();
+        int dayOfWeek = dmFirstOfMonth.getDayOfWeek();
+        int daysToAdd = iXDayOfWeek - dayOfWeek;
+        if (iXDayOfWeek < dayOfWeek) {
+            daysToAdd += 7;
+        }
+        return dmFirstOfMonth.plusDays(daysToAdd);
+    }
+
+    // iXDayOfWeek takes on values from DateTimeConstants.MONDAY through
+    // DateTimeConstants.SUNDAY
+    static DateTime GetLastXWeekdayOfMonth(int iXDayOfWeek, int iYear,
+            int iMonth) {
+        DateTime dmFirstOfMonth = new DateMidnight(iYear, iMonth, 1)
+                .toDateTime();
+        DateTime dmLastOfMonth = dmFirstOfMonth.plusMonths(1).minusDays(1);
+        int dayOfWeek = dmLastOfMonth.getDayOfWeek();
+        int daysToSubtract = dayOfWeek - iXDayOfWeek;
+        if (dayOfWeek < iXDayOfWeek) {
+            daysToSubtract -= 7;
+        }
+        return dmLastOfMonth.minusDays(daysToSubtract);
+    }
+
+    // iXDayOfWeek takes on values from DateTimeConstants.MONDAY through
+    // DateTimeConstants.SUNDAY
+    static DateTime GetFirstXWeekdayOfMonthAfterYMonthday(int iXDayOfWeek,
+            int iYMonthDay, int iYear, int iMonth) {
+        assert 1 <= iYMonthDay && iYMonthDay <= 31;
+        DateTime dmFirstXDayOfMonth = GetFirstXWeekdayOfMonth(iXDayOfWeek,
+                iYear, iMonth);
+        while (dmFirstXDayOfMonth.getDayOfMonth() <= iYMonthDay) {
+            dmFirstXDayOfMonth.plusWeeks(1);
+        }
+        return dmFirstXDayOfMonth;
+    }
+
+    // iXDayOfWeek takes on values from DateTimeConstants.MONDAY through
+    // DateTimeConstants.SUNDAY
+    static DateTime GetLastXWeekdayOfMonthBeforeYMonthday(int iXDayOfWeek,
+            int iYMonthDay, int iYear, int iMonth) {
+        assert 1 <= iYMonthDay && iYMonthDay <= 31;
+        DateTime dmLastXDayOfMonth = GetLastXWeekdayOfMonth(iXDayOfWeek, iYear,
+                iMonth);
+        while (dmLastXDayOfMonth.getDayOfMonth() >= iYMonthDay) {
+            dmLastXDayOfMonth.minusWeeks(1);
+        }
+        return dmLastXDayOfMonth;
+    }
+
+    static DateTime AdjustAmericanHolidayForWeekend(DateTime dm) {
+        switch (dm.getDayOfWeek()) {
+        case DateTimeConstants.SATURDAY:
+            return dm.minusDays(1);
+        case DateTimeConstants.SUNDAY:
+            return dm.plusDays(1);
+        default:
+            return dm;
+        }
+    }
+
+    static DateTime AdjustCanadianHolidayForWeekend(DateTime dm) {
+        switch (dm.getDayOfWeek()) {
+        case DateTimeConstants.SATURDAY:
+            return dm.plusDays(2);
+        case DateTimeConstants.SUNDAY:
+            return dm.plusDays(1);
+        default:
+            return dm;
+        }
+    }
+}
diff --git a/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/anniversary/USAnniversaries.java b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/anniversary/USAnniversaries.java
new file mode 100644
index 000000000..582e34740
--- /dev/null
+++ b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/anniversary/USAnniversaries.java
@@ -0,0 +1,191 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.contrib.holiday.anniversary;
+
+import org.joda.time.DateMidnight;
+import org.joda.time.DateTime;
+import org.joda.time.DateTimeConstants;
+
+/**
+ * TODO: There may be a need for localizable labels for the names of the holidays.
+ * would have to be loaded from an appropriate properties file.
+ * TODO: at some point it may make sense to generate either the holiday computation
+ * code from a definition file or to run an interpreter on the file to generate
+ * the holiday directly.
+ */
+/**
+ * Except when specifically noted otherwise, dates for holidays are based on
+ * information from Wikipedia.
+ */
+public class USAnniversaries {
+
+    public static final AnniversaryFactory NEW_YEAR_HOLIDAY = new AnniversaryFactory(
+            "NewYearHoliday") {
+        public DateTime create(int iYear) {
+            return TimeUtility
+                    .AdjustAmericanHolidayForWeekend(CommonAnniversaries.NEW_YEAR
+                            .create(iYear));
+        }
+    };
+
+    public static final AnniversaryFactory MARTIN_LUTHER_KING_DAY = new AnniversaryFactory(
+            "MartinLutherKingDay") {
+        public DateTime create(int iYear) {
+            // Third Monday in January
+            return TimeUtility.GetFirstXWeekdayOfMonth(
+                    DateTimeConstants.MONDAY, iYear, DateTimeConstants.JANUARY)
+                    .plusWeeks(2);
+        }
+    };
+
+    /**
+     * Also called "President's Day"
+     */
+    public static final AnniversaryFactory WASHINGTONS_BIRTHDAY_HOLIDAY = new AnniversaryFactory(
+            "WashingtonsBirthdayHoliday") {
+        public DateTime create(int iYear) {
+            // Third Monday in February
+            return TimeUtility
+                    .GetFirstXWeekdayOfMonth(DateTimeConstants.MONDAY, iYear,
+                            DateTimeConstants.FEBRUARY).plusWeeks(2);
+        }
+    };
+
+    public static final AnniversaryFactory MEMORIAL_DAY = new AnniversaryFactory(
+            "MemorialDay") {
+        public DateTime create(int iYear) {
+            // Last Monday in May
+            return TimeUtility.GetLastXWeekdayOfMonth(DateTimeConstants.MONDAY,
+                    iYear, DateTimeConstants.MAY);
+        }
+    };
+
+    public static final AnniversaryFactory INDEPENDENCE_DAY = new AnniversaryFactory(
+            "IndependenceDay") {
+        public DateTime create(int iYear) {
+            return new DateMidnight(iYear, DateTimeConstants.JULY, 4)
+                    .toDateTime();
+        }
+    };
+
+    public static final AnniversaryFactory INDEPENDENCE_DAY_HOLIDAY = new AnniversaryFactory(
+            "IndependenceDayHoliday") {
+        public DateTime create(int iYear) {
+            return TimeUtility.AdjustAmericanHolidayForWeekend(INDEPENDENCE_DAY
+                    .create(iYear));
+        }
+    };
+
+    public static final AnniversaryFactory VETERANS_DAY_HOLIDAY = new AnniversaryFactory(
+            "VeteransDayHoliday") {
+        public DateTime create(int iYear) {
+            return TimeUtility
+                    .AdjustAmericanHolidayForWeekend(CommonAnniversaries.ARMISTICE_DAY
+                            .create(iYear));
+        }
+    };
+
+    public static final AnniversaryFactory COLUMBUS_DAY = new AnniversaryFactory(
+            "ColumbusDay") {
+        public DateTime create(int iYear) {
+            // Second Monday in October
+            return TimeUtility.GetFirstXWeekdayOfMonth(
+                    DateTimeConstants.MONDAY, iYear, DateTimeConstants.OCTOBER)
+                    .plusWeeks(1);
+        }
+    };
+
+    public static final AnniversaryFactory THANKSGIVING = new AnniversaryFactory(
+            "ThanksGiving") {
+        public DateTime create(int iYear) {
+            // 4th Thursday in November
+            return TimeUtility.GetFirstXWeekdayOfMonth(
+                    DateTimeConstants.THURSDAY, iYear,
+                    DateTimeConstants.NOVEMBER).plusWeeks(3);
+        }
+    };
+
+    public static final AnniversaryFactory CHRISTMAS_HOLIDAY = new AnniversaryFactory(
+            "ChristmasHoliday") {
+        public DateTime create(int iYear) {
+            return TimeUtility
+                    .AdjustAmericanHolidayForWeekend(CommonAnniversaries.CHRISTMAS
+                            .create(iYear));
+        }
+    };
+
+    /**
+     * This was the holiday prior to 1968-1971.
+     */
+    public static final AnniversaryFactory WASHINGTONS_BIRTHDAY = new AnniversaryFactory(
+            "WashingtonsBirthday") {
+        public DateTime create(int iYear) {
+            return new DateMidnight(iYear, DateTimeConstants.FEBRUARY, 22)
+                    .toDateTime();
+        }
+    };
+
+    public static final AnniversaryFactory LINCOLNS_BIRTHDAY = new AnniversaryFactory(
+            "LincolnsBirthday") {
+        public DateTime create(int iYear) {
+            return new DateMidnight(iYear, DateTimeConstants.FEBRUARY, 12)
+                    .toDateTime();
+        }
+    };
+
+    public static final AnniversaryFactory CINCO_DE_MAYO = new AnniversaryFactory(
+            "CincoDeMayo") {
+        public DateTime create(int iYear) {
+            return new DateMidnight(iYear, DateTimeConstants.MAY, 5)
+                    .toDateTime();
+        }
+    };
+
+    public static final AnniversaryFactory HALLOWEEN = new AnniversaryFactory(
+            "Halloween") {
+        public DateTime create(int iYear) {
+            return new DateMidnight(iYear, DateTimeConstants.OCTOBER, 31)
+                    .toDateTime();
+        }
+    };
+
+    /**
+     * Source: the example given in RFC 2445
+     */
+    public static final AnniversaryFactory ELECTION_DAY = new AnniversaryFactory(
+            "ElectionDay") {
+        public DateTime create(int iYear) {
+            // not really an anniversary, happens once in 4 years
+            if (iYear % 4 != 0) {
+                return null;
+            }
+            // First Tuesday in November which follows a Monday in November
+            return TimeUtility.GetFirstXWeekdayOfMonthAfterYMonthday(
+                    DateTimeConstants.TUESDAY, 1, iYear,
+                    DateTimeConstants.NOVEMBER);
+        }
+    };
+
+    public static final AnniversaryFactory PRE_FDR_THANKSGIVING = new AnniversaryFactory(
+            "PreFDRThanksGiving") {
+        public DateTime create(int iYear) {
+            // Last Thursday in November
+            return TimeUtility.GetLastXWeekdayOfMonth(
+                    DateTimeConstants.THURSDAY, iYear,
+                    DateTimeConstants.NOVEMBER);
+        }
+    };
+}
diff --git a/JodaTimeContrib/holiday/src/test/org/joda/time/contrib/holiday/TestUSHolidays.java b/JodaTimeContrib/holiday/src/test/org/joda/time/contrib/holiday/TestUSHolidays.java
new file mode 100644
index 000000000..aed6b81d8
--- /dev/null
+++ b/JodaTimeContrib/holiday/src/test/org/joda/time/contrib/holiday/TestUSHolidays.java
@@ -0,0 +1,57 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.contrib.holiday;
+
+import java.util.List;
+
+import junit.framework.TestCase;
+
+import org.joda.time.contrib.holiday.USGovtHolidays;
+import org.joda.time.contrib.holiday.anniversary.CommonAnniversaries;
+import org.joda.time.contrib.holiday.anniversary.USAnniversaries;
+import org.joda.time.contrib.holiday.anniversary.NamedAnniversaryFactory.NamedAnniversary;
+
+/* 
+ * This is basically a test to make sure that the holiday list mechanism
+ * works correctly. individual dates are tested in the anniversary tests.
+ */
+public class TestUSHolidays extends TestCase {
+    public void testFederalHolidays() {
+        List<NamedAnniversary> holidays = USGovtHolidays.FEDERAL.getHolidaysForYear(1995);
+
+        assertEquals(holidays.size(), 10);
+        assertEquals(holidays.get(0).getDate(),
+                USAnniversaries.NEW_YEAR_HOLIDAY.create(1995));
+        assertEquals(holidays.get(1).getDate(),
+                USAnniversaries.MARTIN_LUTHER_KING_DAY.create(1995));
+        assertEquals(holidays.get(2).getDate(),
+                USAnniversaries.WASHINGTONS_BIRTHDAY_HOLIDAY.create(1995));
+        assertEquals(holidays.get(3).getDate(),
+                USAnniversaries.MEMORIAL_DAY.create(1995));
+        assertEquals(holidays.get(4).getDate(),
+                USAnniversaries.INDEPENDENCE_DAY_HOLIDAY.create(1995));
+        assertEquals(holidays.get(5).getDate(),
+                CommonAnniversaries.LABOR_DAY.create(1995));
+        assertEquals(holidays.get(6).getDate(),
+                USAnniversaries.COLUMBUS_DAY.create(1995));
+        assertEquals(holidays.get(7).getDate(),
+                USAnniversaries.VETERANS_DAY_HOLIDAY.create(1995));
+        assertEquals(holidays.get(8).getDate(),
+                USAnniversaries.THANKSGIVING.create(1995));
+        assertEquals(holidays.get(9).getDate(),
+                USAnniversaries.CHRISTMAS_HOLIDAY.create(1995));
+    }
+}
diff --git a/JodaTimeContrib/holiday/src/test/org/joda/time/contrib/holiday/anniversary/TestCommonAnniversaries.java b/JodaTimeContrib/holiday/src/test/org/joda/time/contrib/holiday/anniversary/TestCommonAnniversaries.java
new file mode 100644
index 000000000..9024f30e5
--- /dev/null
+++ b/JodaTimeContrib/holiday/src/test/org/joda/time/contrib/holiday/anniversary/TestCommonAnniversaries.java
@@ -0,0 +1,46 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.contrib.holiday.anniversary;
+
+import junit.framework.TestCase;
+
+import org.joda.time.DateMidnight;
+import org.joda.time.DateTime;
+import org.joda.time.DateTimeConstants;
+import org.joda.time.contrib.holiday.anniversary.CommonAnniversaries;
+
+public class TestCommonAnniversaries extends TestCase {
+
+    /**
+     * NB: tests for good friday are automatically tests for Easter and Easter
+     * Monday.
+     */
+    public void testGoodFriday0() {
+        DateTime ymd = CommonAnniversaries.GOOD_FRIDAY.create(2005);
+        assertEquals(ymd, new DateMidnight(2005, DateTimeConstants.MARCH, 25));
+    }
+
+    public void testGoodFriday1() {
+        DateTime ymd = CommonAnniversaries.GOOD_FRIDAY.create(1993);
+        assertEquals(ymd, new DateMidnight(1993, DateTimeConstants.APRIL, 9));
+    }
+
+    public void testGoodFriday2() {
+        DateTime ymd = CommonAnniversaries.GOOD_FRIDAY.create(1997);
+        assertEquals(ymd, new DateMidnight(1997, DateTimeConstants.MARCH, 28));
+    }
+
+}
diff --git a/JodaTimeContrib/holiday/src/test/org/joda/time/contrib/holiday/anniversary/TestUSAnniversaries.java b/JodaTimeContrib/holiday/src/test/org/joda/time/contrib/holiday/anniversary/TestUSAnniversaries.java
new file mode 100644
index 000000000..054c3b4d3
--- /dev/null
+++ b/JodaTimeContrib/holiday/src/test/org/joda/time/contrib/holiday/anniversary/TestUSAnniversaries.java
@@ -0,0 +1,135 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.contrib.holiday.anniversary;
+
+import junit.framework.TestCase;
+
+import org.joda.time.DateMidnight;
+import org.joda.time.DateTime;
+import org.joda.time.DateTimeConstants;
+import org.joda.time.contrib.holiday.anniversary.CommonAnniversaries;
+import org.joda.time.contrib.holiday.anniversary.USAnniversaries;
+
+public class TestUSAnniversaries extends TestCase {
+    public void testNewYearHoliday0() {
+        DateTime ymd = USAnniversaries.NEW_YEAR_HOLIDAY.create(2005);
+        assertEquals(ymd,
+                new DateMidnight(2004, DateTimeConstants.DECEMBER, 31));
+    }
+
+    public void testNewYearHoliday1() {
+        DateTime ymd = USAnniversaries.NEW_YEAR_HOLIDAY.create(1993);
+        assertEquals(ymd, new DateMidnight(1993, DateTimeConstants.JANUARY, 1));
+    }
+
+    public void testMartinLutherKingDay() {
+        DateTime ymd = USAnniversaries.MARTIN_LUTHER_KING_DAY.create(2005);
+        assertEquals(ymd, new DateMidnight(2005, DateTimeConstants.JANUARY, 17));
+    }
+
+    public void testWashingtonsBirthdayHoliday() {
+        DateTime ymd = USAnniversaries.WASHINGTONS_BIRTHDAY_HOLIDAY
+                .create(2005);
+        assertEquals(ymd,
+                new DateMidnight(2005, DateTimeConstants.FEBRUARY, 21));
+    }
+
+    public void testMemorialDay0() {
+        DateTime ymd = USAnniversaries.MEMORIAL_DAY.create(2005);
+        assertEquals(ymd, new DateMidnight(2005, DateTimeConstants.MAY, 30));
+    }
+
+    public void testMemorialDay1() {
+        DateTime ymd = USAnniversaries.MEMORIAL_DAY.create(1995);
+        assertEquals(ymd, new DateMidnight(1995, DateTimeConstants.MAY, 29));
+    }
+
+    public void testMemorialDay2() {
+        DateTime ymd = USAnniversaries.MEMORIAL_DAY.create(1997);
+        assertEquals(ymd, new DateMidnight(1997, DateTimeConstants.MAY, 26));
+    }
+
+    public void testIndependenceDayHoliday0() {
+        DateTime ymd = USAnniversaries.INDEPENDENCE_DAY_HOLIDAY.create(2005);
+        assertEquals(ymd, new DateMidnight(2005, DateTimeConstants.JULY, 4));
+    }
+
+    public void testIndependenceDayHoliday1() {
+        DateTime ymd = USAnniversaries.INDEPENDENCE_DAY_HOLIDAY.create(1993);
+        assertEquals(ymd, new DateMidnight(1993, DateTimeConstants.JULY, 5));
+    }
+
+    public void testLaborDay() {
+        DateTime ymd = CommonAnniversaries.LABOR_DAY.create(2005);
+        assertEquals(ymd,
+                new DateMidnight(2005, DateTimeConstants.SEPTEMBER, 5));
+    }
+
+    public void testThanksgiving0() {
+        DateTime ymd = USAnniversaries.THANKSGIVING.create(2005);
+        assertEquals(ymd,
+                new DateMidnight(2005, DateTimeConstants.NOVEMBER, 24));
+    }
+
+    public void testThanksgiving1() {
+        DateTime ymd = USAnniversaries.THANKSGIVING.create(1995);
+        assertEquals(ymd,
+                new DateMidnight(1995, DateTimeConstants.NOVEMBER, 23));
+    }
+
+    public void testColumbusDay0() {
+        DateTime ymd = USAnniversaries.COLUMBUS_DAY.create(2005);
+        assertEquals(ymd, new DateMidnight(2005, DateTimeConstants.OCTOBER, 10));
+    }
+
+    public void testColumbusDay1() {
+        DateTime ymd = USAnniversaries.COLUMBUS_DAY.create(1998);
+        assertEquals(ymd, new DateMidnight(1998, DateTimeConstants.OCTOBER, 12));
+    }
+
+    public void testChristmasHoliday0() {
+        DateTime ymd = USAnniversaries.CHRISTMAS_HOLIDAY.create(2005);
+        assertEquals(ymd,
+                new DateMidnight(2005, DateTimeConstants.DECEMBER, 26));
+    }
+
+    public void testChristmasHoliday1() {
+        DateTime ymd = USAnniversaries.CHRISTMAS_HOLIDAY.create(1995);
+        assertEquals(ymd,
+                new DateMidnight(1995, DateTimeConstants.DECEMBER, 25));
+    }
+
+    public void testElectionDay0() {
+        DateTime ymd = USAnniversaries.ELECTION_DAY.create(1996);
+        assertEquals(ymd, new DateMidnight(1996, DateTimeConstants.NOVEMBER, 5));
+    }
+
+    public void testElectionDay1() {
+        // no election in 1997
+        DateTime ymd = USAnniversaries.ELECTION_DAY.create(1997);
+        assertEquals(ymd, null);
+    }
+
+    public void testElectionDay2() {
+        DateTime ymd = USAnniversaries.ELECTION_DAY.create(2000);
+        assertEquals(ymd, new DateMidnight(2000, DateTimeConstants.NOVEMBER, 7));
+    }
+
+    public void testElectionDay3() {
+        DateTime ymd = USAnniversaries.ELECTION_DAY.create(2004);
+        assertEquals(ymd, new DateMidnight(2004, DateTimeConstants.NOVEMBER, 2));
+    }
+}
diff --git a/JodaTimeContrib/holiday/xdoc/images/joda.png b/JodaTimeContrib/holiday/xdoc/images/joda.png
new file mode 100644
index 0000000000000000000000000000000000000000..435df26a39732551d2f7ed9b1fdf288be1c83875
GIT binary patch
literal 2919
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
Inz-Nl59h<Bq5uE@

literal 0
HcmV?d00001

diff --git a/JodaTimeContrib/holiday/xdoc/images/jodatime.png b/JodaTimeContrib/holiday/xdoc/images/jodatime.png
new file mode 100644
index 0000000000000000000000000000000000000000..4d5d609868c392a2871e8f15100f4ba54b7e92b6
GIT binary patch
literal 2850
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
R4?N!j7N#hZS4Oy){{UxZaMAz(

literal 0
HcmV?d00001

diff --git a/JodaTimeContrib/holiday/xdoc/index.xml b/JodaTimeContrib/holiday/xdoc/index.xml
new file mode 100644
index 000000000..2069b72ef
--- /dev/null
+++ b/JodaTimeContrib/holiday/xdoc/index.xml
@@ -0,0 +1,54 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+
+<document>
+ <properties>
+  <title>Java date and time API - Holidays - Home</title>
+  <author>Al Major</author>
+ </properties>
+
+ <body>
+
+<section name="Joda Time - Holidays">
+<p>
+This is a contribution that provides a flexible framework for
+creating lists of holidays. The package itself is remarkably small, because
+it leverages the powerful field calculations provided by the core Joda
+time classes.
+</p>
+<p>
+Version 0.1 was released on ? -
+<a href="">Download now</a>
+</p>
+</section>
+
+
+<section name="Documentation">
+<p>
+There is currently very limited documentation. This will change over the next few weeks.
+</p>
+</section>
+
+
+<section name="Releases">
+<p>
+<a href="">Release 0.1</a>
+is the current latest release.
+This release is a prototype release and may have bugs. The API is likely to change.
+</p>
+<p>
+The current dependencies are Joda-Time 1.1 and JDK 5.
+</p>
+</section>
+
+
+<section name="Support">
+<p>
+The Joda-Time Holidays library was contributed to Joda-Time by Al Major.
+</p>
+<p>
+For support on bugs, using the library or to volunteer please contact the <a href="mail-lists.html">mailing list</a>
+(or email direct to the list via <a href="mailto:joda-interest@lists.sourceforge.net">joda-interest@lists.sourceforge.net</a>).
+</p>
+</section>
+</body>
+</document>
diff --git a/JodaTimeContrib/holiday/xdoc/stylesheets/joda-theme.css b/JodaTimeContrib/holiday/xdoc/stylesheets/joda-theme.css
new file mode 100644
index 000000000..5d616b279
--- /dev/null
+++ b/JodaTimeContrib/holiday/xdoc/stylesheets/joda-theme.css
@@ -0,0 +1,121 @@
+body, td, select, input, li{
+  font-family: Helvetica, Arial, sans-serif;
+  font-size: 13px;
+  background-color: #fff;
+}
+a {
+  text-decoration: none;
+}
+a:link {
+  color:#009;
+}
+a:visited  {
+  color:#009;
+}
+a:active, a:hover {
+  text-decoration: underline;
+}
+a.externalLink, a.externalLink:link, a.externalLink:visited, a.externalLink:active, a.externalLink:hover {
+  background: url(../images/external.png) right center no-repeat;
+  padding-right: 15px;
+}
+a.newWindow, a.newWindow:link, a.newWindow:visited, a.newWindow:active, a.newWindow:hover {
+  background: url(../images/newwindow.png) right center no-repeat;
+  padding-right: 18px;
+}
+h2 {
+  font-family: Verdana, Helvetica, Arial, sans-serif;
+  padding: 4px 4px 4px 6px;
+  border: 1px solid #999;
+  color: #006;
+  background-color: #eef;
+  font-weight:bold;
+  font-size: 16px;
+  margin-top: 4px;
+  margin-bottom: 6px;
+}
+h3 {
+  padding: 4px 4px 4px 6px;
+  border: 1px solid #aaa;
+  color: #006;
+  background-color: #eee;
+  font-weight: normal;
+  font-size: 14px;
+  margin-top: 4px;
+  margin-bottom: 6px;
+}
+p, ul {
+  font-size: 13px;
+  margin-top: 4px;
+  margin-bottom: 6px;
+}
+#banner {
+  background-color: #eef;
+  border-bottom: 1px solid #aaa;
+}
+#organizationLogo img, #projectLogo img {
+  border: 1px solid #999;
+}
+#breadcrumbs {
+  padding-top: 1px;
+  padding-bottom: 2px;
+  border-bottom: 1px solid #aaa;
+  background-color: #ddf;
+}
+#leftColumn {
+  margin: 8px 0 8px 4px;
+  border: 1px solid #999;
+  background-color: #eef;
+}
+#navcolumn {
+  padding: 6px 4px 0 6px;
+}
+#navcolumn h5 {
+  font-size: 12px;
+  border-bottom: 1px solid #aaaaaa;
+  padding-top: 2px;
+  font-weight: normal;
+}
+#navcolumn li {
+  font-size: 12px;
+  padding-left: 12px;
+  background-color: #eef;
+}
+#navcolumn a:active, #navcolumn a:hover {
+  text-decoration: none;
+}
+#lastPublished {
+  font-size: 10px;
+}
+table.bodyTable th {
+  color: white;
+  background-color: #bbb;
+  text-align: left;
+  font-weight: bold;
+  font-size: 13px;
+}
+
+table.bodyTable th, table.bodyTable td {
+  font-size: 13px;
+}
+
+table.bodyTable tr.a {
+  background-color: #ddd;
+}
+
+table.bodyTable tr.b {
+  background-color: #eee;
+}
+
+.source {
+  border: 1px solid #999;
+  padding: 8px;
+  margin: 6px;
+}
+#footer {
+  background-color: #eef;
+  border-top: 1px solid #999;
+}
+body {
+  padding-bottom: 0px;
+}
diff --git a/JodaTimeContrib/holiday/xdoc/stylesheets/maven-theme.css b/JodaTimeContrib/holiday/xdoc/stylesheets/maven-theme.css
new file mode 100644
index 000000000..5d616b279
--- /dev/null
+++ b/JodaTimeContrib/holiday/xdoc/stylesheets/maven-theme.css
@@ -0,0 +1,121 @@
+body, td, select, input, li{
+  font-family: Helvetica, Arial, sans-serif;
+  font-size: 13px;
+  background-color: #fff;
+}
+a {
+  text-decoration: none;
+}
+a:link {
+  color:#009;
+}
+a:visited  {
+  color:#009;
+}
+a:active, a:hover {
+  text-decoration: underline;
+}
+a.externalLink, a.externalLink:link, a.externalLink:visited, a.externalLink:active, a.externalLink:hover {
+  background: url(../images/external.png) right center no-repeat;
+  padding-right: 15px;
+}
+a.newWindow, a.newWindow:link, a.newWindow:visited, a.newWindow:active, a.newWindow:hover {
+  background: url(../images/newwindow.png) right center no-repeat;
+  padding-right: 18px;
+}
+h2 {
+  font-family: Verdana, Helvetica, Arial, sans-serif;
+  padding: 4px 4px 4px 6px;
+  border: 1px solid #999;
+  color: #006;
+  background-color: #eef;
+  font-weight:bold;
+  font-size: 16px;
+  margin-top: 4px;
+  margin-bottom: 6px;
+}
+h3 {
+  padding: 4px 4px 4px 6px;
+  border: 1px solid #aaa;
+  color: #006;
+  background-color: #eee;
+  font-weight: normal;
+  font-size: 14px;
+  margin-top: 4px;
+  margin-bottom: 6px;
+}
+p, ul {
+  font-size: 13px;
+  margin-top: 4px;
+  margin-bottom: 6px;
+}
+#banner {
+  background-color: #eef;
+  border-bottom: 1px solid #aaa;
+}
+#organizationLogo img, #projectLogo img {
+  border: 1px solid #999;
+}
+#breadcrumbs {
+  padding-top: 1px;
+  padding-bottom: 2px;
+  border-bottom: 1px solid #aaa;
+  background-color: #ddf;
+}
+#leftColumn {
+  margin: 8px 0 8px 4px;
+  border: 1px solid #999;
+  background-color: #eef;
+}
+#navcolumn {
+  padding: 6px 4px 0 6px;
+}
+#navcolumn h5 {
+  font-size: 12px;
+  border-bottom: 1px solid #aaaaaa;
+  padding-top: 2px;
+  font-weight: normal;
+}
+#navcolumn li {
+  font-size: 12px;
+  padding-left: 12px;
+  background-color: #eef;
+}
+#navcolumn a:active, #navcolumn a:hover {
+  text-decoration: none;
+}
+#lastPublished {
+  font-size: 10px;
+}
+table.bodyTable th {
+  color: white;
+  background-color: #bbb;
+  text-align: left;
+  font-weight: bold;
+  font-size: 13px;
+}
+
+table.bodyTable th, table.bodyTable td {
+  font-size: 13px;
+}
+
+table.bodyTable tr.a {
+  background-color: #ddd;
+}
+
+table.bodyTable tr.b {
+  background-color: #eee;
+}
+
+.source {
+  border: 1px solid #999;
+  padding: 8px;
+  margin: 6px;
+}
+#footer {
+  background-color: #eef;
+  border-top: 1px solid #999;
+}
+body {
+  padding-bottom: 0px;
+}

From 03c435f5283f762f32ce2726a2a40369aef79cd1 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 8 Oct 2005 21:50:20 +0000
Subject: [PATCH 052/130] Add first xml design

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@909 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../org/joda/time/contrib/holiday/src/GB.xml  | 166 ++++++++++++++++++
 .../time/contrib/holiday/src/joda-holiday.dtd |  42 +++++
 2 files changed, 208 insertions(+)
 create mode 100644 JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/src/GB.xml
 create mode 100644 JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/src/joda-holiday.dtd

diff --git a/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/src/GB.xml b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/src/GB.xml
new file mode 100644
index 000000000..8ceb0dacb
--- /dev/null
+++ b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/src/GB.xml
@@ -0,0 +1,166 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+  -  Copyright 2001-2005 Stephen Colebourne
+  -
+  -  Licensed under the Apache License, Version 2.0 (the "License");
+  -  you may not use this file except in compliance with the License.
+  -  You may obtain a copy of the License at
+  -
+  -      http://www.apache.org/licenses/LICENSE-2.0
+  -
+  -  Unless required by applicable law or agreed to in writing, software
+  -  distributed under the License is distributed on an "AS IS" BASIS,
+  -  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  -  See the License for the specific language governing permissions and
+  -  limitations under the License.
+  -->
+<!--
+  - Holiday information for GB locale.
+  -
+  - This data is by no means authoritative, and has been collated from various
+  - sources. If you think you know better feel free to edit the file.
+  - Please send any changes or information to
+  - joda-time-holiday@lists.sourceforge.net to benefit other users.
+  -->
+<!DOCTYPE joda-holiday-information SYSTEM "joda-holiday.dtd">
+<joda-holiday-information>
+  <!-- GB -->
+  <!-- Source: http://www.dti.gov.uk/er/bankhol.htm -->
+  <!-- Source: http://www.dti.gov.uk/er/bankhis.htm -->
+  <locale-holiday-information visible="false">
+    <country>GB</country>
+    <week>
+      <weekendStart>6</weekendStart>
+      <weekendEnd>7</weekendEnd>
+    </week>
+    <days type="State">
+      <name lang="en">Bank Holiday</name>
+      <day type="GoodFriday">
+        <name lang="en">Good Friday</name>
+        <dayRule fromYear="1871" basedOn="GregorianEaster" relativeDays="-2" />
+      </day>
+      <day type="Easter">
+        <name lang="en">Easter Day</name>
+        <dayRule fromYear="1871" basedOn="GregorianEaster" />
+      </day>
+      <day type="ChristmasDay">
+        <name lang="en">Christmas Day</name>
+        <baseRule monthOfYear="12" dayOfMonth="25" />
+        <dayRule fromYear="1871" weekendAdjust="NextWeekday" />
+      </day>
+      <day type="MilleniumDay">
+        <name lang="en">Millenium Day</name>
+        <dayRule year="1999" monthOfYear="12" dayOfMonth="31" />
+      </day>
+      <day type="GoldenJubilee">
+        <name lang="en">Golden Jubilee Bank Holiday</name>
+        <dayRule year="2002" monthOfYear="6" dayOfMonth="3" />
+      </day>
+      <day type="RoyalWeddingOfCharlesAndDiana">
+        <name lang="en">Royal Wedding of Charles and Diana</name>
+        <dayRule year="1981" monthOfYear="7" dayOfMonth="29" />
+      </day>
+    </days>
+  </locale-holiday-information>
+  
+  <!-- GB/England -->
+  <locale-holiday-information>
+    <country>GB</country>
+    <region>England</region>
+    <days type="State">
+      <day type="NewYear">
+        <name lang="en">New Year's Day</name>
+        <baseRule monthOfYear="1" dayOfMonth="1" />
+        <dayRule fromYear="1974" weekendAdjust="NextWeekday" />
+      </day>
+      <day type="EasterMonday">
+        <name lang="en">Easter Monday</name>
+        <dayRule fromYear="1871" basedOn="GregorianEaster" relativeDays="1" />
+      </day>
+      <day type="MayDay">
+        <name lang="en">May Day Bank Holiday</name>
+        <dayRule fromYear="1978" monthOfYear="5" weekOfMonth="1" dayOfWeek="1" />
+        <dayRule year="1995" monthOfYear="5" dayOfMonth="8" />
+      </day>
+      <day type="WhitMonday">
+        <name lang="en">Whit Monday</name>
+        <dayRule fromYear="1871" toYear="1964" basedOn="GregorianEaster" relativeDays="50" />
+      </day>
+      <day type="Spring">
+        <name lang="en">Spring Bank Holiday</name>
+        <dayRule fromYear="1965" monthOfYear="5" weekOfMonth="-1" dayOfWeek="1" />
+        <dayRule year="2002" monthOfYear="6" dayOfMonth="4" />
+      </day>
+      <day type="Summer">
+        <name lang="en">Summer Bank Holiday</name>
+        <dayRule fromYear="1871" toYear="1964" monthOfYear="8" weekOfMonth="1" dayOfWeek="1" />
+        <dayRule fromYear="1965" monthOfYear="8" weekOfMonth="-1" dayOfWeek="1" />
+      </day>
+      <day type="BoxingDay">
+        <name lang="en">Boxing Day</name>
+        <dayRule fromYear="1871" basedOn="ChristmasDay" relativeDays="1" />
+      </day>
+    </days>
+  </locale-holiday-information>
+  
+  <!-- GB/Wales -->
+  <locale-holiday-information baseRegion="England">
+    <country>GB</country>
+    <region>Wales</region>
+  </locale-holiday-information>
+  
+  <!-- GB/Scotland -->
+  <locale-holiday-information>
+    <country>GB</country>
+    <region>Scotland</region>
+    <days type="State">
+      <day type="NewYear">
+        <name lang="en">New Year's Day</name>
+        <baseRule monthOfYear="1" dayOfMonth="1" />
+        <dayRule fromYear="1871" weekendAdjust="NextWeekday" />
+      </day>
+      <day type="MayDay">
+        <name lang="en">May Day Bank Holiday</name>
+        <dayRule fromYear="1871" monthOfYear="5" weekOfMonth="1" dayOfWeek="1" />
+        <dayRule year="1995" monthOfYear="5" dayOfMonth="8" />
+      </day>
+      <day type="Summer">
+        <name lang="en">Summer Bank Holiday</name>
+        <dayRule fromYear="1871" monthOfYear="8" weekOfMonth="1" dayOfWeek="1" />
+      </day>
+      <day type="Hogmanay">
+        <name lang="en">Hogmanay</name>
+        <baseRule monthOfYear="1" dayOfMonth="2" />
+        <dayRule fromYear="1973" basedOn="NewYear" relativeDays="1" />
+      </day>
+      <day type="BoxingDay">
+        <name lang="en">Boxing Day</name>
+        <dayRule fromYear="1974" basedOn="ChristmasDay" relativeDays="1" />
+      </day>
+      <day type="Spring">
+        <name lang="en">Spring Bank Holiday</name>
+        <dayRule fromYear="1978" monthOfYear="5" weekOfMonth="-1" dayOfWeek="1" />
+        <dayRule year="2002" monthOfYear="6" dayOfMonth="4" />
+      </day>
+    </days>
+  </locale-holiday-information>
+  
+  <!-- GB/NorthernIreland -->
+  <locale-holiday-information baseRegion="England">
+    <country>GB</country>
+    <region>NorthernIreland</region>
+    <days type="State">
+      <day type="StPatricksDay">
+        <name lang="en">St Patrick's Day</name>
+        <baseRule monthOfYear="3" dayOfMonth="17" />
+        <dayRule fromYear="1903" weekendAdjust="NextWeekday" />
+      </day>
+      <day type="BattleOfTheBoyne">
+        <name lang="en">Battle of the Boyne</name>
+        <baseRule monthOfYear="7" dayOfMonth="12" />
+        <dayRule fromYear="1926" weekendAdjust="NextWeekday" />
+      </day>
+    </days>
+  </locale-holiday-information>
+  
+</joda-holiday-information>
diff --git a/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/src/joda-holiday.dtd b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/src/joda-holiday.dtd
new file mode 100644
index 000000000..0997a84af
--- /dev/null
+++ b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/src/joda-holiday.dtd
@@ -0,0 +1,42 @@
+<!ELEMENT joda-holiday-information (locale-holiday-information*)>
+<!ELEMENT locale-holiday-information (country,region?,week?,days*)>
+<!ATTLIST locale-holiday-information
+  visible (true|false) 'true'
+  baseRegion CDATA #IMPLIED>
+<!ELEMENT country (#PCDATA)>
+<!ELEMENT region (#PCDATA)>
+<!ELEMENT week (weekendStart,weekendEnd)>
+<!ELEMENT weekendStart (#PCDATA)>
+<!ELEMENT weekendEnd (#PCDATA)>
+<!ELEMENT days (name?,day*)>
+<!ATTLIST days type CDATA #REQUIRED>
+<!ELEMENT name (#PCDATA)>
+<!ATTLIST name lang CDATA #REQUIRED>
+<!ELEMENT day (name*,baseRule?,dayRule*)>
+<!ATTLIST day type CDATA #REQUIRED>
+<!ELEMENT baseRule EMPTY>
+<!ATTLIST baseRule
+  repeat CDATA 'P1Y'
+  fromYear CDATA #IMPLIED
+  toYear CDATA #IMPLIED
+  year CDATA #IMPLIED
+  basedOn CDATA #IMPLIED
+  relativeDays CDATA #IMPLIED
+  monthOfYear CDATA #IMPLIED
+  dayOfMonth CDATA #IMPLIED
+  weekOfMonth CDATA #IMPLIED
+  dayOfWeek CDATA #IMPLIED
+  weekendAdjust (NextWeekday|PreviousWeekday|NearestWeekday) #IMPLIED>
+<!ELEMENT dayRule EMPTY>
+<!ATTLIST dayRule
+  repeat CDATA 'P1Y'
+  fromYear CDATA #IMPLIED
+  toYear CDATA #IMPLIED
+  year CDATA #IMPLIED
+  basedOn CDATA #IMPLIED
+  relativeDays CDATA #IMPLIED
+  monthOfYear CDATA #IMPLIED
+  dayOfMonth CDATA #IMPLIED
+  weekOfMonth CDATA #IMPLIED
+  dayOfWeek CDATA #IMPLIED
+  weekendAdjust (NextWeekday|PreviousWeekday|NearestWeekday) #IMPLIED>

From dea27d4f6b551f697009b855bebd636431cf1bc1 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 8 Oct 2005 23:11:00 +0000
Subject: [PATCH 053/130] Change docs for ChronologyType

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@910 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/chrono/package.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/JodaTime/src/java/org/joda/time/chrono/package.html b/JodaTime/src/java/org/joda/time/chrono/package.html
index 244e126cb..a42f985ef 100644
--- a/JodaTime/src/java/org/joda/time/chrono/package.html
+++ b/JodaTime/src/java/org/joda/time/chrono/package.html
@@ -28,7 +28,7 @@
 This package contains all of the chronology implementations within the library.
 It also contains all of the specialised field implementations.
 Most applications will create chronologies using the static factory methods on
-the Chronology class itself in the main package.
+the ChronologyType class in the main package.
 </p>
 </body>
 </html>

From ceafd889473600be23cff5f0f904a01a69eda299 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 8 Oct 2005 23:13:07 +0000
Subject: [PATCH 054/130] Add Ethipoic Chronology

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@911 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../java/org/joda/time/ChronologyType.java    |  29 +-
 ...> BasicFixedMonthOfYearDateTimeField.java} |  21 +-
 .../chrono/CommonFixedMonthChronology.java    | 167 ++++++++
 .../joda/time/chrono/CopticChronology.java    | 126 +-----
 .../joda/time/chrono/EthiopicChronology.java  | 281 +++++++++++++
 JodaTime/src/java/org/joda/time/package.html  |   2 +-
 .../org/joda/time/TestChronologyType.java     |  14 +-
 .../test/org/joda/time/chrono/TestAll.java    |   3 +-
 .../time/chrono/TestCopticChronology.java     |   5 +-
 .../time/chrono/TestEthiopicChronology.java   | 382 ++++++++++++++++++
 JodaTime/xdocs/index.xml                      |   2 +-
 11 files changed, 900 insertions(+), 132 deletions(-)
 rename JodaTime/src/java/org/joda/time/chrono/{CopticMonthOfYearDateTimeField.java => BasicFixedMonthOfYearDateTimeField.java} (76%)
 create mode 100644 JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java
 create mode 100644 JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java
 create mode 100644 JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java

diff --git a/JodaTime/src/java/org/joda/time/ChronologyType.java b/JodaTime/src/java/org/joda/time/ChronologyType.java
index 504cc4ce1..46e6a04ca 100644
--- a/JodaTime/src/java/org/joda/time/ChronologyType.java
+++ b/JodaTime/src/java/org/joda/time/ChronologyType.java
@@ -23,6 +23,7 @@
 
 import org.joda.time.chrono.BuddhistChronology;
 import org.joda.time.chrono.CopticChronology;
+import org.joda.time.chrono.EthiopicChronology;
 import org.joda.time.chrono.GJChronology;
 import org.joda.time.chrono.GregorianChronology;
 import org.joda.time.chrono.ISOChronology;
@@ -48,6 +49,7 @@
  * <li>Julian - The Julian calendar system used for all time (proleptic)
  * <li>Buddhist - The Buddhist calendar system which is an offset in years from GJ
  * <li>Coptic - The Coptic calendar system which defines 30 day months
+ * <li>Ethiopic - The Ethiopic calendar system which defines 30 day months
  * </ul>
  * Hopefully future releases will contain more chronologies.
  *
@@ -55,8 +57,9 @@
  * @see org.joda.time.chrono.GJChronology
  * @see org.joda.time.chrono.GregorianChronology
  * @see org.joda.time.chrono.JulianChronology
- * @see org.joda.time.chrono.CopticChronology
  * @see org.joda.time.chrono.BuddhistChronology
+ * @see org.joda.time.chrono.CopticChronology
+ * @see org.joda.time.chrono.EthiopicChronology
  *
  * @author Stephen Colebourne
  * @since 1.2
@@ -76,7 +79,8 @@
         GREGORIAN = 3,
         JULIAN = 4,
         BUDDHIST = 5,
-        COPTIC = 6;
+        COPTIC = 6,
+        ETHIOPIC = 7;
 
     /** The iso chronology type. */
     private static final ChronologyType ISO_TYPE = new StandardChronologyType("ISO", ISO);
@@ -90,6 +94,8 @@
     private static final ChronologyType BUDDHIST_TYPE = new StandardChronologyType("Buddhist", BUDDHIST);
     /** The iso chronology type. */
     private static final ChronologyType COPTIC_TYPE = new StandardChronologyType("Coptic", COPTIC);
+    /** The iso chronology type. */
+    private static final ChronologyType ETHIOPIC_TYPE = new StandardChronologyType("Ethiopic", ETHIOPIC);
 
     /** The id of the field. */
     private final String iID;
@@ -232,6 +238,23 @@ public static ChronologyType coptic() {
         return COPTIC_TYPE;
     }
 
+    /**
+     * Get the Ethiopic chronology type.
+     * <p>
+     * {@link EthiopicChronology} defines fields sensibly for the Ethiopic calendar system.
+     * The Ethiopic calendar system defines every fourth year as leap.
+     * The year is broken down into 12 months, each 30 days in length.
+     * An extra period at the end of the year is either 5 or 6 days in length
+     * and is returned as a 13th month.
+     * Year 1 in the Coptic calendar began on August 29, 8 CE (Julian).
+     * The chronology cannot be used before the first Ethiopic year.
+     *
+     * @return the ChronologyType constant
+     */
+    public static ChronologyType ethiopic() {
+        return ETHIOPIC_TYPE;
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Get the id of the chronology.
@@ -307,6 +330,8 @@ public Chronology getChronology(DateTimeZone zone) {
                     return BuddhistChronology.getInstance(zone);
                 case COPTIC:
                     return CopticChronology.getInstance(zone);
+                case ETHIOPIC:
+                    return EthiopicChronology.getInstance(zone);
                 default:
                     // Shouldn't happen.
                     throw new InternalError();
diff --git a/JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java b/JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java
similarity index 76%
rename from JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java
rename to JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java
index 7b0332786..8d4409653 100644
--- a/JodaTime/src/java/org/joda/time/chrono/CopticMonthOfYearDateTimeField.java
+++ b/JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java
@@ -21,34 +21,43 @@
 import org.joda.time.field.PreciseDurationDateTimeField;
 
 /**
- * 
+ * Month of year implementation where the month length is fixed.
  *
  * @author Brian S O'Neill
- * @since 1.0
+ * @author Stephen Colebourne
+ * @since 1.2, refactored from CopticMonthOfYearDateTimeField
  */
-final class CopticMonthOfYearDateTimeField extends PreciseDurationDateTimeField {
+final class BasicFixedMonthOfYearDateTimeField extends PreciseDurationDateTimeField {
 
+    /** Serialization version. */
     private static final long serialVersionUID = 7741038885247700323L;
 
+    /** The base chronology. */
     private final BaseGJChronology iChronology;
 
+    /** The fixed month length. */
+    private static final int MONTH_LENGTH = 30;
+
     /**
      * Restricted constructor.
+     *
+     * @param chronology  the base chronology
+     * @param months  the months duration field
      */
-    CopticMonthOfYearDateTimeField(BaseGJChronology chronology, DurationField months) {
+    BasicFixedMonthOfYearDateTimeField(BaseGJChronology chronology, DurationField months) {
         super(DateTimeFieldType.monthOfYear(), months);
         iChronology = chronology;
     }
 
     public int get(long instant) {
-        return (iChronology.getDayOfYear(instant) - 1) / 30 + 1;
+        return (iChronology.getDayOfYear(instant) - 1) / MONTH_LENGTH + 1;
     }
 
     public long set(long instant, int value) {
         instant = super.set(instant, value);
         if (value == 13) {
             int day = iChronology.getDayOfYear(instant);
-            if (day < 30) {
+            if (day < MONTH_LENGTH) {
                 // Move back a few days to the end of the 13th "month".
                 instant -= (long)DateTimeConstants.MILLIS_PER_DAY * day;
             }
diff --git a/JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java b/JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java
new file mode 100644
index 000000000..92562f036
--- /dev/null
+++ b/JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java
@@ -0,0 +1,167 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.chrono;
+
+import org.joda.time.Chronology;
+import org.joda.time.DateTimeConstants;
+import org.joda.time.DateTimeFieldType;
+import org.joda.time.DurationField;
+import org.joda.time.DurationFieldType;
+import org.joda.time.field.FieldUtils;
+import org.joda.time.field.PreciseDurationField;
+
+/**
+ * Abstract implementation of a calendar system based around fixed length months.
+ * <p>
+ * As the month length is fixed various calculations can be optimised.
+ * This implementation assumes any additional days after twelve
+ * months fall into a thirteenth month.
+ * <p>
+ * CommonFixedMonthChronology is thread-safe and immutable, and all
+ * subclasses must be as well.
+ *
+ * @author Brian S O'Neill
+ * @author Stephen Colebourne
+ * @since 1.2, refactored from CopticChronology
+ */
+public abstract class CommonFixedMonthChronology extends BaseGJChronology {
+
+    /** Serialization lock */
+    private static final long serialVersionUID = 261387371998L;
+
+    /** The length of the month. */
+    static final int MONTH_LENGTH = 30;
+
+    /** The typical millis per year. */
+    static final long MILLIS_PER_YEAR =
+        (long) (365.25 * DateTimeConstants.MILLIS_PER_DAY);
+
+    /** The length of the month in millis. */
+    static final long MILLIS_PER_MONTH = ((long) MONTH_LENGTH) * DateTimeConstants.MILLIS_PER_DAY;
+
+    /** Singleton fixed length month field used to build the monthOfYear field. */
+    static final DurationField MONTH_DURATION_FIELD;
+    static {
+        // init after other static fields
+        MONTH_DURATION_FIELD =  new PreciseDurationField
+            (DurationFieldType.months(), MILLIS_PER_MONTH);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Restricted constructor.
+     *
+     * @param base  the base chronology
+     * @param param  the init parameter
+     * @param minDaysInFirstWeek  the minimum days in the first week
+     */
+    CommonFixedMonthChronology(Chronology base, Object param, int minDaysInFirstWeek) {
+        super(base, param, minDaysInFirstWeek);
+    }
+
+    //-----------------------------------------------------------------------
+    long setYear(long instant, int year) {
+        // optimsed implementation of set, due to fixed months
+        int thisYear = getYear(instant);
+        int dayOfYear = getDayOfYear(instant, thisYear);
+        int millisOfDay = getMillisOfDay(instant);
+
+        if (dayOfYear > 365) {
+            // Current year is leap, and day is leap.
+            if (!isLeapYear(year)) {
+                // Moving to a non-leap year, leap day doesn't exist.
+                dayOfYear--;
+            }
+        }
+
+        instant = getYearMonthDayMillis(year, 1, dayOfYear);
+        instant += millisOfDay;
+        return instant;
+    }
+
+    //-----------------------------------------------------------------------
+    long getYearDifference(long minuendInstant, long subtrahendInstant) {
+        // optimsed implementation of getDifference, due to fixed months
+        int minuendYear = getYear(minuendInstant);
+        int subtrahendYear = getYear(subtrahendInstant);
+
+        // Inlined remainder method to avoid duplicate calls to get.
+        long minuendRem = minuendInstant - getYearMillis(minuendYear);
+        long subtrahendRem = subtrahendInstant - getYearMillis(subtrahendYear);
+
+        int difference = minuendYear - subtrahendYear;
+        if (minuendRem < subtrahendRem) {
+            difference--;
+        }
+        return difference;
+    }
+
+    //-----------------------------------------------------------------------
+    long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {
+        FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());
+        FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, 13);
+        FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));
+        return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);
+    }
+
+    //-----------------------------------------------------------------------
+    long getTotalMillisByYearMonth(int year, int month) {
+        return (month * MILLIS_PER_MONTH);
+    }
+
+    //-----------------------------------------------------------------------
+    int getDayOfMonth(long millis) {
+        // optimised for fixed months
+        return (getDayOfYear(millis) - 1) % MONTH_LENGTH + 1;
+    }
+
+    //-----------------------------------------------------------------------
+    boolean isLeapYear(int year) {
+        return (year & 3) == 3;
+    }
+
+    //-----------------------------------------------------------------------
+    int getDaysInYearMonth(int year, int month) {
+        return (month != 13) ? MONTH_LENGTH : (isLeapYear(year) ? 6 : 5);
+    }
+
+    //-----------------------------------------------------------------------
+    int getDaysInMonthMax() {
+        return MONTH_LENGTH;
+    }
+
+    //-----------------------------------------------------------------------
+    int getDaysInMonthMax(int month) {
+        return (month != 13 ? MONTH_LENGTH : 6);
+    }
+
+    //-----------------------------------------------------------------------
+    int getMonthOfYear(long millis, int year) {
+        long monthZeroBased = (millis - getYearMillis(year)) / MILLIS_PER_MONTH;
+        return ((int) monthZeroBased) + 1;
+    }
+
+    //-----------------------------------------------------------------------
+    long getAverageMillisPerYear() {
+        return MILLIS_PER_YEAR;
+    }
+
+    //-----------------------------------------------------------------------
+    long getAverageMillisPerMonth() {
+        return MILLIS_PER_MONTH;
+    }
+
+}
diff --git a/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java b/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java
index 517ac1de1..b69c79dd5 100644
--- a/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java
@@ -23,12 +23,7 @@
 import org.joda.time.DateTime;
 import org.joda.time.DateTimeConstants;
 import org.joda.time.DateTimeField;
-import org.joda.time.DateTimeFieldType;
 import org.joda.time.DateTimeZone;
-import org.joda.time.DurationField;
-import org.joda.time.DurationFieldType;
-import org.joda.time.field.FieldUtils;
-import org.joda.time.field.PreciseDurationField;
 import org.joda.time.field.SkipDateTimeField;
 
 /**
@@ -54,7 +49,7 @@
  * @author Brian S O'Neill
  * @since 1.0
  */
-public final class CopticChronology extends BaseGJChronology {
+public final class CopticChronology extends CommonFixedMonthChronology {
 
     /** Serialization lock */
     private static final long serialVersionUID = -5972804258688333942L;
@@ -68,12 +63,6 @@
     /** A singleton era field. */
     private static final DateTimeField ERA_FIELD = new BasicSingleEraDateTimeField("AM");
 
-    private static final long MILLIS_PER_YEAR =
-        (long) (365.25 * DateTimeConstants.MILLIS_PER_DAY);
-
-    private static final long MILLIS_PER_MONTH =
-        (long) (365.25 * DateTimeConstants.MILLIS_PER_DAY / 12);
-
     /** The lowest year that can be fully supported. */
     private static final int MIN_YEAR = -292269337;
 
@@ -85,21 +74,17 @@
      */
     private static final int MAX_YEAR = 292271022;
 
-    /** Singleton 30 day month field used to build the monthOfYear field. */
-    private static final DurationField cMonthsField;
-
-    /** Singleton instance of a UTC CopticChronology */
-    private static final CopticChronology INSTANCE_UTC;
-
     /** Cache of zone to chronology arrays */
     private static final Map cCache = new HashMap();
 
+    /** Singleton instance of a UTC CopticChronology */
+    private static final CopticChronology INSTANCE_UTC;
     static {
-        cMonthsField =  new PreciseDurationField
-            (DurationFieldType.months(), 30L * DateTimeConstants.MILLIS_PER_DAY);
+        // init after static fields
         INSTANCE_UTC = getInstance(DateTimeZone.UTC);
     }
 
+    //-----------------------------------------------------------------------
     /**
      * Gets an instance of the CopticChronology.
      * The time zone of the returned instance is UTC.
@@ -175,16 +160,15 @@ public static CopticChronology getInstance(DateTimeZone zone, int minDaysInFirst
 
     // Constructors and instance variables
     //-----------------------------------------------------------------------
-
     /**
-     * Restricted constructor
+     * Restricted constructor.
      */
     CopticChronology(Chronology base, Object param, int minDaysInFirstWeek) {
         super(base, param, minDaysInFirstWeek);
     }
 
     /**
-     * Serialization singleton
+     * Serialization singleton.
      */
     private Object readResolve() {
         Chronology base = getBase();
@@ -229,88 +213,6 @@ public Chronology withZone(DateTimeZone zone) {
         return getInstance(zone);
     }
 
-    //-----------------------------------------------------------------------
-    long setYear(long instant, int year) {
-        // optimsed implementation of set, due to 30 day months
-        int thisYear = getYear(instant);
-        int dayOfYear = getDayOfYear(instant, thisYear);
-        int millisOfDay = getMillisOfDay(instant);
-
-        if (dayOfYear > 365) {
-            // Current year is leap, and day is leap.
-            if (!isLeapYear(year)) {
-                // Moving to a non-leap year, leap day doesn't exist.
-                dayOfYear--;
-            }
-        }
-
-        instant = getYearMonthDayMillis(year, 1, dayOfYear);
-        instant += millisOfDay;
-        return instant;
-    }
-
-    //-----------------------------------------------------------------------
-    long getYearDifference(long minuendInstant, long subtrahendInstant) {
-        // optimsed implementation of getDifference, due to 30 day months
-        int minuendYear = getYear(minuendInstant);
-        int subtrahendYear = getYear(subtrahendInstant);
-
-        // Inlined remainder method to avoid duplicate calls to get.
-        long minuendRem = minuendInstant - getYearMillis(minuendYear);
-        long subtrahendRem = subtrahendInstant - getYearMillis(subtrahendYear);
-
-        int difference = minuendYear - subtrahendYear;
-        if (minuendRem < subtrahendRem) {
-            difference--;
-        }
-        return difference;
-    }
-
-    //-----------------------------------------------------------------------
-    long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {
-        FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());
-        FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, 13);
-        FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));
-        return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);
-    }
-
-    //-----------------------------------------------------------------------
-    long getTotalMillisByYearMonth(int year, int month) {
-        return (month * 30L * DateTimeConstants.MILLIS_PER_DAY);
-    }
-
-    //-----------------------------------------------------------------------
-    int getDayOfMonth(long millis) {
-        // optimised for 30 day months
-        return (getDayOfYear(millis) - 1) % 30 + 1;
-    }
-
-    //-----------------------------------------------------------------------
-    boolean isLeapYear(int year) {
-        return (year & 3) == 3;
-    }
-
-    //-----------------------------------------------------------------------
-    int getDaysInYearMonth(int year, int month) {
-        return (month != 13) ? 30 : (isLeapYear(year) ? 6 : 5);
-    }
-
-    //-----------------------------------------------------------------------
-    int getDaysInMonthMax() {
-        return 30;
-    }
-
-    //-----------------------------------------------------------------------
-    int getDaysInMonthMax(int month) {
-        return (month != 13 ? 30 : 6);
-    }
-
-    //-----------------------------------------------------------------------
-    int getMonthOfYear(long millis, int year) {
-        return ((int) ((millis - getYearMillis(year))
-                       / (30L * DateTimeConstants.MILLIS_PER_DAY))) + 1;
-    }
-    
     //-----------------------------------------------------------------------
     long calculateFirstDayOfYearMillis(int year) {
         if (year > MAX_YEAR) {
@@ -356,16 +258,6 @@ int getMaxYear() {
         return MAX_YEAR;
     }
 
-    //-----------------------------------------------------------------------
-    long getAverageMillisPerYear() {
-        return MILLIS_PER_YEAR;
-    }
-
-    //-----------------------------------------------------------------------
-    long getAverageMillisPerMonth() {
-        return MILLIS_PER_MONTH;
-    }
-
     //-----------------------------------------------------------------------
     long getApproxMillisAtEpoch() {
         return 1686L * MILLIS_PER_YEAR + 112L * DateTimeConstants.MILLIS_PER_DAY;
@@ -381,8 +273,8 @@ protected void assemble(Fields fields) {
             fields.weekyear = new SkipDateTimeField(this, fields.weekyear);
             
             fields.era = ERA_FIELD;
-            fields.months = cMonthsField;
-            fields.monthOfYear = new CopticMonthOfYearDateTimeField(this, cMonthsField);
+            fields.months = MONTH_DURATION_FIELD;
+            fields.monthOfYear = new BasicFixedMonthOfYearDateTimeField(this, MONTH_DURATION_FIELD);
             fields.dayOfMonth = new BasicDayOfMonthDateTimeField(this, fields.days);
         }
     }
diff --git a/JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java b/JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java
new file mode 100644
index 000000000..51c192fc2
--- /dev/null
+++ b/JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java
@@ -0,0 +1,281 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.chrono;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import org.joda.time.Chronology;
+import org.joda.time.ChronologyType;
+import org.joda.time.DateTime;
+import org.joda.time.DateTimeConstants;
+import org.joda.time.DateTimeField;
+import org.joda.time.DateTimeZone;
+import org.joda.time.field.SkipDateTimeField;
+
+/**
+ * Implements the Ethiopic calendar system, which defines every fourth year as
+ * leap, much like the Julian calendar. The year is broken down into 12 months,
+ * each 30 days in length. An extra period at the end of the year is either 5
+ * or 6 days in length. In this implementation, it is considered a 13th month.
+ * <p>
+ * Year 1 in the Ethiopic calendar began on August 29, 8 CE (Julian), thus
+ * Ethiopic years do not begin at the same time as Julian years. This chronology
+ * is not proleptic, as it does not allow dates before the first Ethiopic year.
+ * <p>
+ * This implementation defines a day as midnight to midnight exactly as per
+ * the ISO chronology. Some references indicate that a coptic day starts at
+ * sunset on the previous ISO day, but this has not been confirmed and is not
+ * implemented.
+ * <p>
+ * EthiopicChronology is thread-safe and immutable.
+ *
+ * @see <a href="http://en.wikipedia.org/wiki/Ethiopian_calendar">Wikipedia</a>
+ *
+ * @author Brian S O'Neill
+ * @author Stephen Colebourne
+ * @since 1.2
+ */
+public final class EthiopicChronology extends CommonFixedMonthChronology {
+
+    /** Serialization lock */
+    private static final long serialVersionUID = -5972804258688333942L;
+
+    /**
+     * Constant value for 'Ethiopean Era', equivalent
+     * to the value returned for AD/CE.
+     */
+    public static final int EE = DateTimeConstants.CE;
+
+    /** A singleton era field. */
+    private static final DateTimeField ERA_FIELD = new BasicSingleEraDateTimeField("EE");
+
+    /** The lowest year that can be fully supported. */
+    private static final int MIN_YEAR = -292269337;
+
+    /**
+     * The highest year that can be fully supported.
+     * Although calculateFirstDayOfYearMillis can go higher without
+     * overflowing, the getYear method overflows when it adds the
+     * approximate millis at the epoch.
+     */
+    private static final int MAX_YEAR = 292271022;
+
+    /** Cache of zone to chronology arrays */
+    private static final Map cCache = new HashMap();
+
+    /** Singleton instance of a UTC EthiopicChronology */
+    private static final EthiopicChronology INSTANCE_UTC;
+    static {
+        // init after static fields
+        INSTANCE_UTC = getInstance(DateTimeZone.UTC);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets an instance of the EthiopicChronology.
+     * The time zone of the returned instance is UTC.
+     * 
+     * @return a singleton UTC instance of the chronology
+     */
+    public static EthiopicChronology getInstanceUTC() {
+        return INSTANCE_UTC;
+    }
+
+    /**
+     * Gets an instance of the EthiopicChronology in the default time zone.
+     * 
+     * @return a chronology in the default time zone
+     */
+    public static EthiopicChronology getInstance() {
+        return getInstance(DateTimeZone.getDefault(), 4);
+    }
+
+    /**
+     * Gets an instance of the EthiopicChronology in the given time zone.
+     * 
+     * @param zone  the time zone to get the chronology in, null is default
+     * @return a chronology in the specified time zone
+     */
+    public static EthiopicChronology getInstance(DateTimeZone zone) {
+        return getInstance(zone, 4);
+    }
+
+    /**
+     * Gets an instance of the EthiopicChronology in the given time zone.
+     * 
+     * @param zone  the time zone to get the chronology in, null is default
+     * @param minDaysInFirstWeek  minimum number of days in first week of the year; default is 4
+     * @return a chronology in the specified time zone
+     */
+    public static EthiopicChronology getInstance(DateTimeZone zone, int minDaysInFirstWeek) {
+        if (zone == null) {
+            zone = DateTimeZone.getDefault();
+        }
+        EthiopicChronology chrono;
+        synchronized (cCache) {
+            EthiopicChronology[] chronos = (EthiopicChronology[]) cCache.get(zone);
+            if (chronos == null) {
+                chronos = new EthiopicChronology[7];
+                cCache.put(zone, chronos);
+            }
+            try {
+                chrono = chronos[minDaysInFirstWeek - 1];
+            } catch (ArrayIndexOutOfBoundsException e) {
+                throw new IllegalArgumentException
+                    ("Invalid min days in first week: " + minDaysInFirstWeek);
+            }
+            if (chrono == null) {
+                if (zone == DateTimeZone.UTC) {
+                    // First create without a lower limit.
+                    chrono = new EthiopicChronology(null, null, minDaysInFirstWeek);
+                    // Impose lower limit and make another EthiopicChronology.
+                    DateTime lowerLimit = new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);
+                    chrono = new EthiopicChronology
+                        (LimitChronology.getInstance(chrono, lowerLimit, null),
+                         null, minDaysInFirstWeek);
+                } else {
+                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);
+                    chrono = new EthiopicChronology
+                        (ZonedChronology.getInstance(chrono, zone), null, minDaysInFirstWeek);
+                }
+                chronos[minDaysInFirstWeek - 1] = chrono;
+            }
+        }
+        return chrono;
+    }
+
+    // Constructors and instance variables
+    //-----------------------------------------------------------------------
+    /**
+     * Restricted constructor.
+     */
+    EthiopicChronology(Chronology base, Object param, int minDaysInFirstWeek) {
+        super(base, param, minDaysInFirstWeek);
+    }
+
+    /**
+     * Serialization singleton.
+     */
+    private Object readResolve() {
+        Chronology base = getBase();
+        return base == null ? getInstanceUTC() : getInstance(base.getZone());
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Returns the ChronologyType constant for this Chronology.
+     *
+     * @return the chronology type
+     */
+    public ChronologyType getType() {
+        return ChronologyType.ethiopic();
+    }
+
+    // Conversion
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the Chronology in the UTC time zone.
+     * 
+     * @return the chronology in UTC
+     */
+    public Chronology withUTC() {
+        return INSTANCE_UTC;
+    }
+
+    /**
+     * Gets the Chronology in a specific time zone.
+     * 
+     * @param zone  the zone to get the chronology in, null is default
+     * @return the chronology
+     */
+    public Chronology withZone(DateTimeZone zone) {
+        if (zone == null) {
+            zone = DateTimeZone.getDefault();
+        }
+        if (zone == getZone()) {
+            return this;
+        }
+        return getInstance(zone);
+    }
+
+    //-----------------------------------------------------------------------
+    long calculateFirstDayOfYearMillis(int year) {
+        if (year > MAX_YEAR) {
+            throw new ArithmeticException("Year is too large: " + year + " > " + MAX_YEAR);
+        }
+        if (year < MIN_YEAR) {
+            throw new ArithmeticException("Year is too small: " + year + " < " + MIN_YEAR);
+        }
+
+        // Java epoch is 1970-01-01 Gregorian which is 1962-04-23 Ethiopic.
+        // Calculate relative to the nearest leap year and account for the
+        // difference later.
+
+        int relativeYear = year - 1963;
+        int leapYears;
+        if (relativeYear <= 0) {
+            // Add 3 before shifting right since /4 and >>2 behave differently
+            // on negative numbers.
+            leapYears = (relativeYear + 3) >> 2;
+        } else {
+            leapYears = relativeYear >> 2;
+            // For post 1963 an adjustment is needed as jan1st is before leap day
+            if (!isLeapYear(year)) {
+                leapYears++;
+            }
+        }
+        
+        long millis = (relativeYear * 365L + leapYears)
+            * (long)DateTimeConstants.MILLIS_PER_DAY;
+
+        // Adjust to account for difference between 1963-01-01 and 1962-04-23.
+
+        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;
+    }
+
+    //-----------------------------------------------------------------------
+    int getMinYear() {
+        return MIN_YEAR;
+    }
+
+    //-----------------------------------------------------------------------
+    int getMaxYear() {
+        return MAX_YEAR;
+    }
+
+    //-----------------------------------------------------------------------
+    long getApproxMillisAtEpoch() {
+        return 1962L * MILLIS_PER_YEAR + 112L * DateTimeConstants.MILLIS_PER_DAY;
+    }
+
+    //-----------------------------------------------------------------------
+    protected void assemble(Fields fields) {
+        if (getBase() == null) {
+            super.assemble(fields);
+
+            // Ethiopic, like Julian, has no year zero.
+            fields.year = new SkipDateTimeField(this, fields.year);
+            fields.weekyear = new SkipDateTimeField(this, fields.weekyear);
+            
+            fields.era = ERA_FIELD;
+            fields.months = MONTH_DURATION_FIELD;
+            fields.monthOfYear = new BasicFixedMonthOfYearDateTimeField(this, MONTH_DURATION_FIELD);
+            fields.dayOfMonth = new BasicDayOfMonthDateTimeField(this, fields.days);
+        }
+    }
+
+}
diff --git a/JodaTime/src/java/org/joda/time/package.html b/JodaTime/src/java/org/joda/time/package.html
index 59f1d42c1..86cd2a270 100644
--- a/JodaTime/src/java/org/joda/time/package.html
+++ b/JodaTime/src/java/org/joda/time/package.html
@@ -125,7 +125,7 @@ <h4>Chronologies and Fields</h4>
 grouped into a <code>Chronology</code>. The chronology represents all the
 information to convert from a millisecond value to human understandable fields
 in a specific calendar system. Chronologies are provided for ISO,
-Gregorian/Julian (GJ), Coptic and Buddhist.
+Gregorian/Julian (GJ), Buddhist, Coptic and Ethiopic.
 More implementations are sought from the community.
 </p>
 <p>
diff --git a/JodaTime/src/test/org/joda/time/TestChronologyType.java b/JodaTime/src/test/org/joda/time/TestChronologyType.java
index 439678588..66db96525 100644
--- a/JodaTime/src/test/org/joda/time/TestChronologyType.java
+++ b/JodaTime/src/test/org/joda/time/TestChronologyType.java
@@ -27,6 +27,7 @@
 
 import org.joda.time.chrono.BuddhistChronology;
 import org.joda.time.chrono.CopticChronology;
+import org.joda.time.chrono.EthiopicChronology;
 import org.joda.time.chrono.GJChronology;
 import org.joda.time.chrono.GregorianChronology;
 import org.joda.time.chrono.ISOChronology;
@@ -70,13 +71,14 @@ public void test_forName() throws Exception {
     //-----------------------------------------------------------------------
     public void test_getAvailableIDs() throws Exception {
         Set set = ChronologyType.getAvailableIDs();
-        assertEquals(6, set.size());
+        assertEquals(7, set.size());
         assertEquals(true, set.contains("ISO"));
         assertEquals(true, set.contains("GJ"));
         assertEquals(true, set.contains("Gregorian"));
         assertEquals(true, set.contains("Julian"));
         assertEquals(true, set.contains("Buddhist"));
         assertEquals(true, set.contains("Coptic"));
+        assertEquals(true, set.contains("Ethiopic"));
     }
 
     //-----------------------------------------------------------------------
@@ -140,6 +142,16 @@ public void test_coptic() throws Exception {
         assertSerialization(ChronologyType.coptic());
     }
 
+    public void test_ethiopic() throws Exception {
+        assertEquals(ChronologyType.ethiopic(), ChronologyType.ethiopic());
+        assertEquals("Ethiopic", ChronologyType.ethiopic().getID());
+        assertEquals(EthiopicChronology.getInstance(), ChronologyType.ethiopic().getChronology());
+        assertEquals(EthiopicChronology.getInstanceUTC(), ChronologyType.ethiopic().getChronologyUTC());
+        assertEquals(EthiopicChronology.getInstance(PARIS), ChronologyType.ethiopic().getChronology(PARIS));
+        assertEquals("Ethiopic", ChronologyType.ethiopic().toString());
+        assertSerialization(ChronologyType.ethiopic());
+    }
+
     public void test_other() throws Exception {
         assertEquals(1, ChronologyType.class.getDeclaredClasses().length);
         Class cls = ChronologyType.class.getDeclaredClasses()[0];
diff --git a/JodaTime/src/test/org/joda/time/chrono/TestAll.java b/JodaTime/src/test/org/joda/time/chrono/TestAll.java
index b6afcd2da..07c79004e 100644
--- a/JodaTime/src/test/org/joda/time/chrono/TestAll.java
+++ b/JodaTime/src/test/org/joda/time/chrono/TestAll.java
@@ -29,7 +29,7 @@
  */
 public class TestAll extends TestCase {
 
-    public static boolean FAST = true;
+    public static boolean FAST = false;
 
     public TestAll(String testName) {
         super(testName);
@@ -40,6 +40,7 @@ public static Test suite() {
         
         suite.addTest(TestBuddhistChronology.suite());
         suite.addTest(TestCopticChronology.suite());
+        suite.addTest(TestEthiopicChronology.suite());
         suite.addTest(TestGJChronology.suite());
         suite.addTest(TestGregorianChronology.suite());
         suite.addTest(TestJulianChronology.suite());
diff --git a/JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java b/JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java
index 45a87887a..05c31b251 100644
--- a/JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java
+++ b/JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java
@@ -35,7 +35,7 @@
  */
 public class TestCopticChronology extends TestCase {
 
-    private static int SKIP = 1 * DateTimeConstants.MILLIS_PER_DAY;
+    private static long SKIP = 1 * DateTimeConstants.MILLIS_PER_DAY;
 
     private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
     private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
@@ -279,7 +279,7 @@ public void testCalendar() {
         DateTimeField year = COPTIC_UTC.year();
         DateTimeField yearOfEra = COPTIC_UTC.yearOfEra();
         DateTimeField era = COPTIC_UTC.era();
-        int expectedDOW = 5;
+        int expectedDOW = new DateTime(284, 8, 29, 0, 0, 0, 0, JULIAN_UTC).getDayOfWeek();
         int expectedDOY = 1;
         int expectedDay = 1;
         int expectedMonth = 1;
@@ -291,7 +291,6 @@ public void testCalendar() {
             int monthValue = monthOfYear.get(millis);
             int yearValue = year.get(millis);
             int yearOfEraValue = yearOfEra.get(millis);
-            int eraValue = era.get(millis);
             int monthLen = dayOfMonth.getMaximumValue(millis);
             if (monthValue < 1 || monthValue > 13) {
                 fail("Bad month: " + millis);
diff --git a/JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java b/JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java
new file mode 100644
index 000000000..bcf8e0629
--- /dev/null
+++ b/JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java
@@ -0,0 +1,382 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.chrono;
+
+import java.util.Locale;
+import java.util.TimeZone;
+
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+import org.joda.time.Chronology;
+import org.joda.time.DateTime;
+import org.joda.time.DateTimeConstants;
+import org.joda.time.DateTimeField;
+import org.joda.time.DateTimeUtils;
+import org.joda.time.DateTimeZone;
+
+/**
+ * This class is a Junit unit test for EthiopicChronology.
+ *
+ * @author Stephen Colebourne
+ */
+public class TestEthiopicChronology extends TestCase {
+
+    private static long SKIP = 1 * DateTimeConstants.MILLIS_PER_DAY;
+
+    private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
+    private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
+    private static final DateTimeZone TOKYO = DateTimeZone.forID("Asia/Tokyo");
+    private static final Chronology ETHIOPIC_UTC = EthiopicChronology.getInstanceUTC();
+    private static final Chronology JULIAN_UTC = JulianChronology.getInstanceUTC();
+    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
+
+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 
+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 
+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
+                     366 + 365;
+    // 2002-06-09
+    private long TEST_TIME_NOW =
+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
+
+    private DateTimeZone originalDateTimeZone = null;
+    private TimeZone originalTimeZone = null;
+    private Locale originalLocale = null;
+
+    public static void main(String[] args) {
+        junit.textui.TestRunner.run(suite());
+    }
+
+    public static TestSuite suite() {
+        SKIP = 1 * DateTimeConstants.MILLIS_PER_DAY;
+        return new TestSuite(TestEthiopicChronology.class);
+    }
+
+    public TestEthiopicChronology(String name) {
+        super(name);
+    }
+
+    protected void setUp() throws Exception {
+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
+        originalDateTimeZone = DateTimeZone.getDefault();
+        originalTimeZone = TimeZone.getDefault();
+        originalLocale = Locale.getDefault();
+        DateTimeZone.setDefault(LONDON);
+        TimeZone.setDefault(TimeZone.getTimeZone("Europe/London"));
+        Locale.setDefault(Locale.UK);
+    }
+
+    protected void tearDown() throws Exception {
+        DateTimeUtils.setCurrentMillisSystem();
+        DateTimeZone.setDefault(originalDateTimeZone);
+        TimeZone.setDefault(originalTimeZone);
+        Locale.setDefault(originalLocale);
+        originalDateTimeZone = null;
+        originalTimeZone = null;
+        originalLocale = null;
+    }
+
+    //-----------------------------------------------------------------------
+    public void testFactoryUTC() {
+        assertEquals(DateTimeZone.UTC, EthiopicChronology.getInstanceUTC().getZone());
+        assertSame(EthiopicChronology.class, EthiopicChronology.getInstanceUTC().getClass());
+    }
+
+    public void testFactory() {
+        assertEquals(LONDON, EthiopicChronology.getInstance().getZone());
+        assertSame(EthiopicChronology.class, EthiopicChronology.getInstance().getClass());
+    }
+
+    public void testFactory_Zone() {
+        assertEquals(TOKYO, EthiopicChronology.getInstance(TOKYO).getZone());
+        assertEquals(PARIS, EthiopicChronology.getInstance(PARIS).getZone());
+        assertEquals(LONDON, EthiopicChronology.getInstance(null).getZone());
+        assertSame(EthiopicChronology.class, EthiopicChronology.getInstance(TOKYO).getClass());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testEquality() {
+        assertSame(EthiopicChronology.getInstance(TOKYO), EthiopicChronology.getInstance(TOKYO));
+        assertSame(EthiopicChronology.getInstance(LONDON), EthiopicChronology.getInstance(LONDON));
+        assertSame(EthiopicChronology.getInstance(PARIS), EthiopicChronology.getInstance(PARIS));
+        assertSame(EthiopicChronology.getInstanceUTC(), EthiopicChronology.getInstanceUTC());
+        assertSame(EthiopicChronology.getInstance(), EthiopicChronology.getInstance(LONDON));
+    }
+
+    public void testWithUTC() {
+        assertSame(EthiopicChronology.getInstanceUTC(), EthiopicChronology.getInstance(LONDON).withUTC());
+        assertSame(EthiopicChronology.getInstanceUTC(), EthiopicChronology.getInstance(TOKYO).withUTC());
+        assertSame(EthiopicChronology.getInstanceUTC(), EthiopicChronology.getInstanceUTC().withUTC());
+        assertSame(EthiopicChronology.getInstanceUTC(), EthiopicChronology.getInstance().withUTC());
+    }
+
+    public void testWithZone() {
+        assertSame(EthiopicChronology.getInstance(TOKYO), EthiopicChronology.getInstance(TOKYO).withZone(TOKYO));
+        assertSame(EthiopicChronology.getInstance(LONDON), EthiopicChronology.getInstance(TOKYO).withZone(LONDON));
+        assertSame(EthiopicChronology.getInstance(PARIS), EthiopicChronology.getInstance(TOKYO).withZone(PARIS));
+        assertSame(EthiopicChronology.getInstance(LONDON), EthiopicChronology.getInstance(TOKYO).withZone(null));
+        assertSame(EthiopicChronology.getInstance(PARIS), EthiopicChronology.getInstance().withZone(PARIS));
+        assertSame(EthiopicChronology.getInstance(PARIS), EthiopicChronology.getInstanceUTC().withZone(PARIS));
+    }
+
+    public void testToString() {
+        assertEquals("EthiopicChronology[Europe/London]", EthiopicChronology.getInstance(LONDON).toString());
+        assertEquals("EthiopicChronology[Asia/Tokyo]", EthiopicChronology.getInstance(TOKYO).toString());
+        assertEquals("EthiopicChronology[Europe/London]", EthiopicChronology.getInstance().toString());
+        assertEquals("EthiopicChronology[UTC]", EthiopicChronology.getInstanceUTC().toString());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testDurationFields() {
+        assertEquals("eras", EthiopicChronology.getInstance().eras().getName());
+        assertEquals("centuries", EthiopicChronology.getInstance().centuries().getName());
+        assertEquals("years", EthiopicChronology.getInstance().years().getName());
+        assertEquals("weekyears", EthiopicChronology.getInstance().weekyears().getName());
+        assertEquals("months", EthiopicChronology.getInstance().months().getName());
+        assertEquals("weeks", EthiopicChronology.getInstance().weeks().getName());
+        assertEquals("days", EthiopicChronology.getInstance().days().getName());
+        assertEquals("halfdays", EthiopicChronology.getInstance().halfdays().getName());
+        assertEquals("hours", EthiopicChronology.getInstance().hours().getName());
+        assertEquals("minutes", EthiopicChronology.getInstance().minutes().getName());
+        assertEquals("seconds", EthiopicChronology.getInstance().seconds().getName());
+        assertEquals("millis", EthiopicChronology.getInstance().millis().getName());
+        
+        assertEquals(false, EthiopicChronology.getInstance().eras().isSupported());
+        assertEquals(true, EthiopicChronology.getInstance().centuries().isSupported());
+        assertEquals(true, EthiopicChronology.getInstance().years().isSupported());
+        assertEquals(true, EthiopicChronology.getInstance().weekyears().isSupported());
+        assertEquals(true, EthiopicChronology.getInstance().months().isSupported());
+        assertEquals(true, EthiopicChronology.getInstance().weeks().isSupported());
+        assertEquals(true, EthiopicChronology.getInstance().days().isSupported());
+        assertEquals(true, EthiopicChronology.getInstance().halfdays().isSupported());
+        assertEquals(true, EthiopicChronology.getInstance().hours().isSupported());
+        assertEquals(true, EthiopicChronology.getInstance().minutes().isSupported());
+        assertEquals(true, EthiopicChronology.getInstance().seconds().isSupported());
+        assertEquals(true, EthiopicChronology.getInstance().millis().isSupported());
+        
+        assertEquals(false, EthiopicChronology.getInstance().centuries().isPrecise());
+        assertEquals(false, EthiopicChronology.getInstance().years().isPrecise());
+        assertEquals(false, EthiopicChronology.getInstance().weekyears().isPrecise());
+        assertEquals(false, EthiopicChronology.getInstance().months().isPrecise());
+        assertEquals(false, EthiopicChronology.getInstance().weeks().isPrecise());
+        assertEquals(false, EthiopicChronology.getInstance().days().isPrecise());
+        assertEquals(false, EthiopicChronology.getInstance().halfdays().isPrecise());
+        assertEquals(true, EthiopicChronology.getInstance().hours().isPrecise());
+        assertEquals(true, EthiopicChronology.getInstance().minutes().isPrecise());
+        assertEquals(true, EthiopicChronology.getInstance().seconds().isPrecise());
+        assertEquals(true, EthiopicChronology.getInstance().millis().isPrecise());
+        
+        assertEquals(false, EthiopicChronology.getInstanceUTC().centuries().isPrecise());
+        assertEquals(false, EthiopicChronology.getInstanceUTC().years().isPrecise());
+        assertEquals(false, EthiopicChronology.getInstanceUTC().weekyears().isPrecise());
+        assertEquals(true, EthiopicChronology.getInstanceUTC().months().isPrecise());
+        assertEquals(true, EthiopicChronology.getInstanceUTC().weeks().isPrecise());
+        assertEquals(true, EthiopicChronology.getInstanceUTC().days().isPrecise());
+        assertEquals(true, EthiopicChronology.getInstanceUTC().halfdays().isPrecise());
+        assertEquals(true, EthiopicChronology.getInstanceUTC().hours().isPrecise());
+        assertEquals(true, EthiopicChronology.getInstanceUTC().minutes().isPrecise());
+        assertEquals(true, EthiopicChronology.getInstanceUTC().seconds().isPrecise());
+        assertEquals(true, EthiopicChronology.getInstanceUTC().millis().isPrecise());
+    }
+
+    public void testDateFields() {
+        assertEquals("era", EthiopicChronology.getInstance().era().getName());
+        assertEquals("centuryOfEra", EthiopicChronology.getInstance().centuryOfEra().getName());
+        assertEquals("yearOfCentury", EthiopicChronology.getInstance().yearOfCentury().getName());
+        assertEquals("yearOfEra", EthiopicChronology.getInstance().yearOfEra().getName());
+        assertEquals("year", EthiopicChronology.getInstance().year().getName());
+        assertEquals("monthOfYear", EthiopicChronology.getInstance().monthOfYear().getName());
+        assertEquals("weekyearOfCentury", EthiopicChronology.getInstance().weekyearOfCentury().getName());
+        assertEquals("weekyear", EthiopicChronology.getInstance().weekyear().getName());
+        assertEquals("weekOfWeekyear", EthiopicChronology.getInstance().weekOfWeekyear().getName());
+        assertEquals("dayOfYear", EthiopicChronology.getInstance().dayOfYear().getName());
+        assertEquals("dayOfMonth", EthiopicChronology.getInstance().dayOfMonth().getName());
+        assertEquals("dayOfWeek", EthiopicChronology.getInstance().dayOfWeek().getName());
+        
+        assertEquals(true, EthiopicChronology.getInstance().era().isSupported());
+        assertEquals(true, EthiopicChronology.getInstance().centuryOfEra().isSupported());
+        assertEquals(true, EthiopicChronology.getInstance().yearOfCentury().isSupported());
+        assertEquals(true, EthiopicChronology.getInstance().yearOfEra().isSupported());
+        assertEquals(true, EthiopicChronology.getInstance().year().isSupported());
+        assertEquals(true, EthiopicChronology.getInstance().monthOfYear().isSupported());
+        assertEquals(true, EthiopicChronology.getInstance().weekyearOfCentury().isSupported());
+        assertEquals(true, EthiopicChronology.getInstance().weekyear().isSupported());
+        assertEquals(true, EthiopicChronology.getInstance().weekOfWeekyear().isSupported());
+        assertEquals(true, EthiopicChronology.getInstance().dayOfYear().isSupported());
+        assertEquals(true, EthiopicChronology.getInstance().dayOfMonth().isSupported());
+        assertEquals(true, EthiopicChronology.getInstance().dayOfWeek().isSupported());
+    }
+
+    public void testTimeFields() {
+        assertEquals("halfdayOfDay", EthiopicChronology.getInstance().halfdayOfDay().getName());
+        assertEquals("clockhourOfHalfday", EthiopicChronology.getInstance().clockhourOfHalfday().getName());
+        assertEquals("hourOfHalfday", EthiopicChronology.getInstance().hourOfHalfday().getName());
+        assertEquals("clockhourOfDay", EthiopicChronology.getInstance().clockhourOfDay().getName());
+        assertEquals("hourOfDay", EthiopicChronology.getInstance().hourOfDay().getName());
+        assertEquals("minuteOfDay", EthiopicChronology.getInstance().minuteOfDay().getName());
+        assertEquals("minuteOfHour", EthiopicChronology.getInstance().minuteOfHour().getName());
+        assertEquals("secondOfDay", EthiopicChronology.getInstance().secondOfDay().getName());
+        assertEquals("secondOfMinute", EthiopicChronology.getInstance().secondOfMinute().getName());
+        assertEquals("millisOfDay", EthiopicChronology.getInstance().millisOfDay().getName());
+        assertEquals("millisOfSecond", EthiopicChronology.getInstance().millisOfSecond().getName());
+        
+        assertEquals(true, EthiopicChronology.getInstance().halfdayOfDay().isSupported());
+        assertEquals(true, EthiopicChronology.getInstance().clockhourOfHalfday().isSupported());
+        assertEquals(true, EthiopicChronology.getInstance().hourOfHalfday().isSupported());
+        assertEquals(true, EthiopicChronology.getInstance().clockhourOfDay().isSupported());
+        assertEquals(true, EthiopicChronology.getInstance().hourOfDay().isSupported());
+        assertEquals(true, EthiopicChronology.getInstance().minuteOfDay().isSupported());
+        assertEquals(true, EthiopicChronology.getInstance().minuteOfHour().isSupported());
+        assertEquals(true, EthiopicChronology.getInstance().secondOfDay().isSupported());
+        assertEquals(true, EthiopicChronology.getInstance().secondOfMinute().isSupported());
+        assertEquals(true, EthiopicChronology.getInstance().millisOfDay().isSupported());
+        assertEquals(true, EthiopicChronology.getInstance().millisOfSecond().isSupported());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testEpoch() {
+        DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, ETHIOPIC_UTC);
+        assertEquals(new DateTime(8, 8, 29, 0, 0, 0, 0, JULIAN_UTC), epoch.withChronology(JULIAN_UTC));
+    }
+
+    public void testEra() {
+        assertEquals(1, EthiopicChronology.EE);
+        try {
+            new DateTime(-1, 13, 5, 0, 0, 0, 0, ETHIOPIC_UTC);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Tests era, year, monthOfYear, dayOfMonth and dayOfWeek.
+     */
+    public void testCalendar() {
+        if (TestAll.FAST) {
+            return;
+        }
+        System.out.println("\nTestEthiopicChronology.testCalendar");
+        DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, ETHIOPIC_UTC);
+        long millis = epoch.getMillis();
+        long end = new DateTime(3000, 1, 1, 0, 0, 0, 0, ISO_UTC).getMillis();
+        DateTimeField dayOfWeek = ETHIOPIC_UTC.dayOfWeek();
+        DateTimeField dayOfYear = ETHIOPIC_UTC.dayOfYear();
+        DateTimeField dayOfMonth = ETHIOPIC_UTC.dayOfMonth();
+        DateTimeField monthOfYear = ETHIOPIC_UTC.monthOfYear();
+        DateTimeField year = ETHIOPIC_UTC.year();
+        DateTimeField yearOfEra = ETHIOPIC_UTC.yearOfEra();
+        DateTimeField era = ETHIOPIC_UTC.era();
+        int expectedDOW = new DateTime(8, 8, 29, 0, 0, 0, 0, JULIAN_UTC).getDayOfWeek();
+        int expectedDOY = 1;
+        int expectedDay = 1;
+        int expectedMonth = 1;
+        int expectedYear = 1;
+        while (millis < end) {
+            int dowValue = dayOfWeek.get(millis);
+            int doyValue = dayOfYear.get(millis);
+            int dayValue = dayOfMonth.get(millis);
+            int monthValue = monthOfYear.get(millis);
+            int yearValue = year.get(millis);
+            int yearOfEraValue = yearOfEra.get(millis);
+            int monthLen = dayOfMonth.getMaximumValue(millis);
+            if (monthValue < 1 || monthValue > 13) {
+                fail("Bad month: " + millis);
+            }
+            
+            // test era
+            assertEquals(1, era.get(millis));
+            assertEquals("EE", era.getAsText(millis));
+            assertEquals("EE", era.getAsShortText(millis));
+            
+            // test date
+            assertEquals(expectedYear, yearValue);
+            assertEquals(expectedYear, yearOfEraValue);
+            assertEquals(expectedMonth, monthValue);
+            assertEquals(expectedDay, dayValue);
+            assertEquals(expectedDOW, dowValue);
+            assertEquals(expectedDOY, doyValue);
+            
+            // test leap year
+            assertEquals(yearValue % 4 == 3, year.isLeap(millis));
+            
+            // test month length
+            if (monthValue == 13) {
+                assertEquals(yearValue % 4 == 3, monthOfYear.isLeap(millis));
+                if (yearValue % 4 == 3) {
+                    assertEquals(6, monthLen);
+                } else {
+                    assertEquals(5, monthLen);
+                }
+            } else {
+                assertEquals(30, monthLen);
+            }
+            
+            // recalculate date
+            expectedDOW = (((expectedDOW + 1) - 1) % 7) + 1;
+            expectedDay++;
+            expectedDOY++;
+            if (expectedDay == 31 && expectedMonth < 13) {
+                expectedDay = 1;
+                expectedMonth++;
+            } else if (expectedMonth == 13) {
+                if (expectedYear % 4 == 3 && expectedDay == 7) {
+                    expectedDay = 1;
+                    expectedMonth = 1;
+                    expectedYear++;
+                    expectedDOY = 1;
+                } else if (expectedYear % 4 != 3 && expectedDay == 6) {
+                    expectedDay = 1;
+                    expectedMonth = 1;
+                    expectedYear++;
+                    expectedDOY = 1;
+                }
+            }
+            millis += SKIP;
+        }
+    }
+
+    public void testSampleDate() {
+        DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0, ISO_UTC).withChronology(ETHIOPIC_UTC);
+        System.out.println(dt);
+        assertEquals(EthiopicChronology.EE, dt.getEra());
+        assertEquals(20, dt.getCenturyOfEra());  // TODO confirm
+        assertEquals(96, dt.getYearOfCentury());
+        assertEquals(1996, dt.getYear());
+        assertEquals(1996, dt.getYearOfEra());
+        assertEquals(10, dt.getMonthOfYear());
+        assertEquals(2, dt.getDayOfMonth());
+        assertEquals(DateTimeConstants.WEDNESDAY, dt.getDayOfWeek());
+        assertEquals(9 * 30 + 2, dt.getDayOfYear());
+        assertEquals(0, dt.getHourOfDay());
+        assertEquals(0, dt.getMinuteOfHour());
+        assertEquals(0, dt.getSecondOfMinute());
+        assertEquals(0, dt.getMillisOfSecond());
+    }
+
+    public void testSampleDateWithZone() {
+        DateTime dt = new DateTime(2004, 6, 9, 12, 0, 0, 0, PARIS).withChronology(ETHIOPIC_UTC);
+        assertEquals(EthiopicChronology.EE, dt.getEra());
+        assertEquals(1996, dt.getYear());
+        assertEquals(1996, dt.getYearOfEra());
+        assertEquals(10, dt.getMonthOfYear());
+        assertEquals(2, dt.getDayOfMonth());
+        assertEquals(10, dt.getHourOfDay());  // PARIS is UTC+2 in summer (12-2=10)
+        assertEquals(0, dt.getMinuteOfHour());
+        assertEquals(0, dt.getSecondOfMinute());
+        assertEquals(0, dt.getMillisOfSecond());
+    }
+
+}
diff --git a/JodaTime/xdocs/index.xml b/JodaTime/xdocs/index.xml
index 8269d8d09..cc63e311b 100644
--- a/JodaTime/xdocs/index.xml
+++ b/JodaTime/xdocs/index.xml
@@ -16,7 +16,7 @@ Joda-Time provides a quality replacement for the Java <em>date</em>
 and <em>time</em> classes. The design allows for multiple <em>calendar</em>
 systems, while still providing a simple API.
 The 'default' calendar is the <a href="cal_iso.html">ISO8601</a> standard which
-is used by XML. The Gregorian, Julian, Buddhist and Coptic systems are also
+is used by XML. The Gregorian, Julian, Buddhist, Coptic and Ethiopic systems are also
 included, and we welcome further additions. Supporting classes include time zone,
 duration, format and parsing.
 </p>

From 528c7f7a530b7bfd357a9dc420548aa664e9e781 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 8 Oct 2005 23:17:14 +0000
Subject: [PATCH 055/130] Add toString to performance checks

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@912 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../example/time/DateTimePerformance.java     | 121 ++++++++++++++++--
 1 file changed, 107 insertions(+), 14 deletions(-)

diff --git a/JodaTime/src/example/org/joda/example/time/DateTimePerformance.java b/JodaTime/src/example/org/joda/example/time/DateTimePerformance.java
index ac2ce768f..cbc50b17c 100644
--- a/JodaTime/src/example/org/joda/example/time/DateTimePerformance.java
+++ b/JodaTime/src/example/org/joda/example/time/DateTimePerformance.java
@@ -15,6 +15,7 @@
  */
 package org.joda.example.time;
 
+import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Date;
 import java.util.GregorianCalendar;
@@ -26,6 +27,8 @@
 import org.joda.time.DateTime;
 import org.joda.time.MutableDateTime;
 import org.joda.time.chrono.GJChronology;
+import org.joda.time.format.DateTimeFormat;
+import org.joda.time.format.DateTimeFormatter;
 
 /**
  * DateTimePerformance provides various comparisons between the Java supplied
@@ -43,10 +46,10 @@
         int runs = 0;
     }
     
-    private static int AVERAGE = 1;
+    private static int AVERAGE = 3;
     private static int COUNT_VERY_FAST = 5000000;
     private static int COUNT_FAST = 200000;
-    private static int COUNT_SLOW = 50000;
+    private static int COUNT_SLOW = 20000;
     
     private Map results = new HashMap();
     private List resultList = new ArrayList();
@@ -126,6 +129,11 @@ public DateTimePerformance() throws Exception {
         checkGCalSetGetHour();
         checkDateSetGetHour();
         
+        checkJodaToString();
+        checkJISOToString();
+        checkGCalToString();
+        checkDateToString();
+        
         System.out.println("");
         long jodaTotal = 0;
         long jisoTotal = 0;
@@ -157,11 +165,12 @@ public DateTimePerformance() throws Exception {
     private void checkJodaConstructor1() {
         int COUNT = COUNT_SLOW;
         DateTime dt = new DateTime(GJChronology.getInstance());
+        int count = 0;
         for (int i = 0; i < AVERAGE; i++) {
             start("Joda", "new()");
             for (int j = 0; j < COUNT; j++) {
                 dt = new DateTime(GJChronology.getInstance());
-                if (dt == null) {System.out.println("Anti optimise");}
+                if (count++ < 0) {System.out.println("Anti optimise");}
             }
             end(COUNT);
         }
@@ -170,11 +179,12 @@ private void checkJodaConstructor1() {
     private void checkJISOConstructor1() {
         int COUNT = COUNT_SLOW;
         DateTime dt = new DateTime();
+        int count = 0;
         for (int i = 0; i < AVERAGE; i++) {
             start("JISO", "new()");
             for (int j = 0; j < COUNT; j++) {
                 dt = new DateTime();
-                if (dt == null) {System.out.println("Anti optimise");}
+                if (count++ < 0) {System.out.println("Anti optimise");}
             }
             end(COUNT);
         }
@@ -183,11 +193,12 @@ private void checkJISOConstructor1() {
     private void checkGCalConstructor1() {
         int COUNT = COUNT_SLOW;
         GregorianCalendar dt = new GregorianCalendar();
+        int count = 0;
         for (int i = 0; i < AVERAGE; i++) {
             start("GCal", "new()");
             for (int j = 0; j < COUNT; j++) {
                 dt = new GregorianCalendar();
-                if (dt == null) {System.out.println("Anti optimise");}
+                if (count++ < 0) {System.out.println("Anti optimise");}
             }
             end(COUNT);
         }
@@ -196,11 +207,12 @@ private void checkGCalConstructor1() {
     private void checkDateConstructor1() {
         int COUNT = COUNT_SLOW;
         Date dt = new Date();
+        int count = 0;
         for (int i = 0; i < AVERAGE; i++) {
             start("Date", "new()");
             for (int j = 0; j < COUNT; j++) {
                 dt = new Date();
-                if (dt == null) {System.out.println("Anti optimise");}
+                if (count++ < 0) {System.out.println("Anti optimise");}
             }
             end(COUNT);
         }
@@ -602,13 +614,23 @@ private void checkDateSetYear() {
     private void checkJodaSetGetYear() {
         int COUNT = COUNT_FAST;
         // Is it fair to use only MutableDateTime here? You decide.
-        MutableDateTime dt = new MutableDateTime(GJChronology.getInstance());
+//        MutableDateTime dt = new MutableDateTime(GJChronology.getInstance());
+//        for (int i = 0; i < AVERAGE; i++) {
+//            start("Joda", "setGetYear");
+//            for (int j = 0; j < COUNT; j++) {
+//                dt.setYear(1972);
+//                int val = dt.getYear();
+//                if (val < 0) {System.out.println("Anti optimise");}
+//            }
+//            end(COUNT);
+//        }
+        DateTime dt = new DateTime(GJChronology.getInstance());
         for (int i = 0; i < AVERAGE; i++) {
             start("Joda", "setGetYear");
             for (int j = 0; j < COUNT; j++) {
-                dt.setYear(1972);
+                dt = dt.year().setCopy(1972);
                 int val = dt.getYear();
-                if (dt == null) {System.out.println("Anti optimise");}
+                if (val < 0) {System.out.println("Anti optimise");}
             }
             end(COUNT);
         }
@@ -617,13 +639,23 @@ private void checkJodaSetGetYear() {
     private void checkJISOSetGetYear() {
         int COUNT = COUNT_FAST;
         // Is it fair to use only MutableDateTime here? You decide.
-        MutableDateTime dt = new MutableDateTime();
+//        MutableDateTime dt = new MutableDateTime();
+//        for (int i = 0; i < AVERAGE; i++) {
+//            start("JISO", "setGetYear");
+//            for (int j = 0; j < COUNT; j++) {
+//                dt.setYear(1972);
+//                int val = dt.getYear();
+//                if (val < 0) {System.out.println("Anti optimise");}
+//            }
+//            end(COUNT);
+//        }
+        DateTime dt = new DateTime();
         for (int i = 0; i < AVERAGE; i++) {
             start("JISO", "setGetYear");
             for (int j = 0; j < COUNT; j++) {
-                dt.setYear(1972);
+                dt = dt.year().setCopy(1972);
                 int val = dt.getYear();
-                if (dt == null) {System.out.println("Anti optimise");}
+                if (val < 0) {System.out.println("Anti optimise");}
             }
             end(COUNT);
         }
@@ -637,7 +669,7 @@ private void checkGCalSetGetYear() {
             for (int j = 0; j < COUNT; j++) {
                 dt.set(GregorianCalendar.YEAR, 1972);
                 int val = dt.get(GregorianCalendar.YEAR);
-                if (dt == null) {System.out.println("Anti optimise");}
+                if (val < 0) {System.out.println("Anti optimise");}
             }
             end(COUNT);
         }
@@ -651,7 +683,7 @@ private void checkDateSetGetYear() {
             for (int j = 0; j < COUNT; j++) {
                 dt.setYear(1972);
                 int val = dt.getYear();
-                if (dt == null) {System.out.println("Anti optimise");}
+                if (val < 0) {System.out.println("Anti optimise");}
             }
             end(COUNT);
         }
@@ -775,6 +807,67 @@ private void checkDateSetGetHour() {
         }
     }
 
+    // To formatted string
+    //------------------------------------------------------------------------
+    
+    private void checkJodaToString() {
+        int COUNT = COUNT_SLOW;
+        DateTime dt = new DateTime(GJChronology.getInstance());
+        DateTimeFormatter f = DateTimeFormat.forPattern("dd MMM yyyy");
+        for (int i = 0; i < AVERAGE; i++) {
+            start("Joda", "toString");
+            for (int j = 0; j < COUNT; j++) {
+                String str = dt.toString("dd MMM yyyy");
+//                String str = dt.toString(f);
+                if (str == null) {System.out.println("Anti optimise");}
+            }
+            end(COUNT);
+        }
+    }
+
+    private void checkJISOToString() {
+        int COUNT = COUNT_SLOW;
+        DateTime dt = new DateTime();
+        DateTimeFormatter f = DateTimeFormat.forPattern("dd MMM yyyy");
+        for (int i = 0; i < AVERAGE; i++) {
+            start("JISO", "toString");
+            for (int j = 0; j < COUNT; j++) {
+                String str = dt.toString("dd MMM yyyy");
+//                String str = dt.toString(f);
+                if (str == null) {System.out.println("Anti optimise");}
+            }
+            end(COUNT);
+        }
+    }
+
+    private void checkGCalToString() {
+        int COUNT = COUNT_SLOW;
+        GregorianCalendar dt = new GregorianCalendar();
+        for (int i = 0; i < AVERAGE; i++) {
+            start("GCal", "toString");
+            for (int j = 0; j < COUNT; j++) {
+                SimpleDateFormat sdf = new SimpleDateFormat("dd MMM yyyy");
+                String str = sdf.format(dt.getTime());
+                if (str == null) {System.out.println("Anti optimise");}
+            }
+            end(COUNT);
+        }
+    }
+
+    private void checkDateToString() {
+        int COUNT = COUNT_SLOW;
+        Date dt = new Date();
+        for (int i = 0; i < AVERAGE; i++) {
+            start("Date", "toString");
+            for (int j = 0; j < COUNT; j++) {
+                SimpleDateFormat sdf = new SimpleDateFormat("dd MMM yyyy");
+                String str = sdf.format(dt);
+                if (str == null) {System.out.println("Anti optimise");}
+            }
+            end(COUNT);
+        }
+    }
+
     //------------------------------------------------------------------------
     
     /**

From df96735bcc7c3718335bb91ce1571ee69f1bc168 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 8 Oct 2005 23:19:41 +0000
Subject: [PATCH 056/130] Ignore release folder

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@913 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/.cvsignore | 1 +
 1 file changed, 1 insertion(+)

diff --git a/JodaTime/.cvsignore b/JodaTime/.cvsignore
index a0341bd49..13b1a1952 100644
--- a/JodaTime/.cvsignore
+++ b/JodaTime/.cvsignore
@@ -10,3 +10,4 @@ build
 junit*.properties
 lib
 .dj*
+release

From 786e06e6c4ddf63e39b6b6095fbceb167b9d53ae Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 8 Oct 2005 23:21:58 +0000
Subject: [PATCH 057/130] Fix grammer

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@914 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/cal_coptic.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/JodaTime/xdocs/cal_coptic.xml b/JodaTime/xdocs/cal_coptic.xml
index c162c5daa..1c6f8ba04 100644
--- a/JodaTime/xdocs/cal_coptic.xml
+++ b/JodaTime/xdocs/cal_coptic.xml
@@ -11,7 +11,7 @@
 
 <section name="Coptic calendar system">
 <p>
-The Coptic calendar system is based on those used in ancient Egypt.
+The Coptic calendar system is based on that used in ancient Egypt.
 It is sometimes referred to as the Alexandrian Calendar.
 The calendar system is in use today by the Coptic Orthodox Church and by farmers
 tracking the seasons in Egypt.

From 3920f45c67ee3863820257c4c9550bf3b538e66a Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 9 Oct 2005 15:06:06 +0000
Subject: [PATCH 058/130] Proposal for core Holiday representation classes

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@915 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../joda/time/contrib/holiday/Holiday.java    | 106 +++++++
 .../time/contrib/holiday/HolidayRule.java     | 259 ++++++++++++++++++
 2 files changed, 365 insertions(+)
 create mode 100644 JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/Holiday.java
 create mode 100644 JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/HolidayRule.java

diff --git a/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/Holiday.java b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/Holiday.java
new file mode 100644
index 000000000..a2b80a1ca
--- /dev/null
+++ b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/Holiday.java
@@ -0,0 +1,106 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.contrib.holiday;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Locale;
+import java.util.Map;
+
+import org.joda.time.DateTimeZone;
+import org.joda.time.MutableDateTime;
+import org.joda.time.YearMonthDay;
+
+/**
+ * Holiday defines a specially named day and the rules for creating it.
+ * The named day may be a holiday, anniversary or other day with
+ * particular meaning.
+ *
+ * @author Al Major
+ * @author Stephen Colebourne
+ * @version $Id$
+ */
+public class Holiday {
+
+    /** The id of the holiday. */
+    private String iId;
+    /** The name of the holiday. */
+    private Map iNames;
+    /** The list of HolidayRule objects. */
+    private List iHolidayRules = new ArrayList();
+
+    /**
+     * Constructor.
+     */
+    Holiday() {
+        super();
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the ID of the holiday.
+     *
+     * @return the id of the holiday
+     */
+    public String getID() {
+        return iId;
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the name of the holiday.
+     * This method supports intelligent name lookup by locale.
+     *
+     * @param locale  the locale to get the name in
+     * @return the name of the holiday
+     */
+    public String getName(Locale locale) {
+        String localeStr = locale.toString();
+        String name = (String) iNames.get(localeStr);
+        if (name == null && locale.getVariant().length() > 0) {
+            name = (String) iNames.get(localeStr.substring(0, 5));
+        }
+        if (name == null && locale.getCountry().length() > 0) {
+            name = (String) iNames.get(localeStr.substring(0, 2));
+        }
+        if (name == null) {
+            name = (String) iNames.get("en");
+        }
+        if (name == null && iNames.size() > 0) {
+            name = (String) iNames.values().iterator().next();
+        }
+        return name;
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the YearMonthDay object for the specified year.
+     *
+     * @param year  the year
+     * @return the YearMonthDay, null if day does not exist for this year
+     */
+    public YearMonthDay yearMonthDayForYear(int year) {
+        MutableDateTime mdt = new MutableDateTime(0L, DateTimeZone.UTC);
+        for (int i = 0; i < iHolidayRules.size(); i++) {
+            HolidayRule rule = (HolidayRule) iHolidayRules.get(i);
+            if (rule.appliesForYear(mdt, year)) {
+                return new YearMonthDay(rule.applyForYear(mdt, year));
+            }
+        }
+        return null;
+    }
+
+}
diff --git a/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/HolidayRule.java b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/HolidayRule.java
new file mode 100644
index 000000000..9dbe41025
--- /dev/null
+++ b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/HolidayRule.java
@@ -0,0 +1,259 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.contrib.holiday;
+
+import org.joda.time.DateTimeConstants;
+import org.joda.time.MutableDateTime;
+
+/**
+ * HolidayRule defines the rules to create a specially named day.
+ * The named day may be a holiday, anniversary or other day with
+ * particular meaning.
+ *
+ * @author Al Major
+ * @author Stephen Colebourne
+ * @version $Id$
+ */
+public class HolidayRule {
+
+    /** The from year, when the rule begins, inclusive. */
+    private int iFromYear;
+    /** The to year, when the rule ends, inclusive. */
+    private int iToYear;
+    /** The month. */
+    private int iMonthOfYear;
+    /** The day of month. */
+    private int iDayOfMonth;
+    /** The day of week. */
+    private int iDayOfWeek;
+    /** The field week of month. */
+    private int iWeekOfMonth;
+    /** The relative days. */
+    private int iRelativeDays;
+    /** The weekend adjust. */
+    private int iWeekendAdjust;
+
+    /** The weekend adjust value, to move to the next weekday. */
+    private static final int WEEKEND_ADJUST_NEXT_WEEKDAY = 0;
+    /** The weekend adjust value, to move to the next weekday. */
+    private static final int WEEKEND_ADJUST_PREVIOUS_WEEKDAY = 1;
+    /** The weekend adjust value, to move to the next weekday. */
+    private static final int WEEKEND_ADJUST_NEAREST_WEEKDAY = 2;
+
+    /**
+     * Constructor.
+     */
+    HolidayRule() {
+        super();
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the year that the rule commences (inclusive).
+     *
+     * @return the from year, Integer.MIN_VALUE if not used
+     */
+    public int getFromYear() {
+        return iFromYear;
+    }
+
+    /**
+     * Sets the year that the rule commences (inclusive).
+     *
+     * @param year  the from year, Integer.MIN_VALUE if not used
+     */
+    void setFromYear(int year) {
+        iFromYear = year;
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the year that the rule ends (inclusive).
+     *
+     * @return the to year, Integer.MAX_VALUE if not used
+     */
+    public int getToYear() {
+        return iToYear;
+    }
+
+    /**
+     * Sets the year that the rule ends (inclusive).
+     *
+     * @param year  the to year, Integer.MIN_VALUE if not used
+     */
+    void setToYear(int year) {
+        iToYear = year;
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the month of the year of the rule.
+     *
+     * @return the month of year, Integer.MIN_VALUE if not used
+     */
+    public int getMonthOfYear() {
+        return iMonthOfYear;
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the day of the month of the rule.
+     *
+     * @return the day of month, Integer.MIN_VALUE if not used
+     */
+    public int getDayOfMonth() {
+        return iDayOfMonth;
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the day of the week of the rule.
+     *
+     * @return the day of week, Integer.MIN_VALUE if not used
+     */
+    public int getDayOfWeek() {
+        return iDayOfWeek;
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the week of the month of the rule.
+     * -1 indicates the last.
+     *
+     * @return the week of month, Integer.MIN_VALUE if not used
+     */
+    public int getWeekOfMonth() {
+        return iWeekOfMonth;
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the relative days of the rule.
+     *
+     * @return the relative days, Integer.MIN_VALUE if not used
+     */
+    public int getRelativeDays() {
+        return iRelativeDays;
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the day of the month of the rule.
+     *
+     * @return the weekend adjustment rule, Integer.MIN_VALUE if not used
+     */
+    public int getWeekendAdjust() {
+        return iWeekendAdjust;
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Does this rule apply for the specified year.
+     *
+     * @param mdt  working copy MutableDateTime, may be altered, not null
+     * @param year  the year
+     * @return true if this rule applies for the specified year
+     */
+    boolean appliesForYear(MutableDateTime mdt, int year) {
+        return (iFromYear <= year && iToYear >= year);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Applies the rules for the specified year.
+     *
+     * @param mdt  working copy MutableDateTime, may be altered, not null
+     * @param year  the year
+     * @return the MutableDateTime
+     */
+    MutableDateTime applyForYear(MutableDateTime mdt, int year) {
+        mdt.setDate(year, 1, 1);
+        if (iMonthOfYear != Integer.MIN_VALUE) {
+            mdt.setMonthOfYear(iMonthOfYear);
+        }
+        if (iDayOfMonth != Integer.MIN_VALUE) {
+            mdt.setDayOfMonth(iDayOfMonth);
+        }
+        if (iDayOfWeek != Integer.MIN_VALUE) {
+            mdt.setDayOfWeek(iDayOfWeek);
+        }
+        if (iWeekOfMonth != Integer.MIN_VALUE) {
+            calculateWeekOfMonth(mdt, iMonthOfYear, iWeekOfMonth);
+        }
+        if (iRelativeDays != Integer.MIN_VALUE) {
+            mdt.addDays(iRelativeDays);
+        }
+        if (iWeekendAdjust != Integer.MIN_VALUE) {
+            calculateWeekendAdjust(mdt, iWeekendAdjust);
+        }
+        return mdt;
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Perform the weekk of month calculation.
+     * TODO, move this to a DateTimeField.
+     *
+     * @param mdt  the datetime to update
+     * @param month  the month it should be
+     * @param week  the week of month
+     */
+    private void calculateWeekOfMonth(MutableDateTime mdt, int month, int week) {
+        if (week > 0) {
+            while (mdt.getMonthOfYear() >= month) {
+                mdt.addWeeks(-1);
+            }
+            mdt.addWeeks(week);
+        } else {
+            while (mdt.getMonthOfYear() <= month) {
+                mdt.addWeeks(1);
+            }
+            mdt.addWeeks(-week);
+        }
+    }
+
+    /**
+     * Calculates the weekend adjust field.
+     *
+     * @param mdt  the datetime to update
+     * @param adjust  the adjust value
+     */
+    private void calculateWeekendAdjust(MutableDateTime mdt, int adjust) {
+        // TODO, use proper weekend calculation, not hard coded SatSun
+        if (mdt.getDayOfWeek() == DateTimeConstants.SATURDAY) {
+            switch (adjust) {
+                case WEEKEND_ADJUST_NEXT_WEEKDAY:
+                    mdt.addDays(2);
+                    break;
+                case WEEKEND_ADJUST_PREVIOUS_WEEKDAY:
+                case WEEKEND_ADJUST_NEAREST_WEEKDAY:
+                    mdt.addDays(-1);
+                    break;
+            }
+        } else if (mdt.getDayOfWeek() == DateTimeConstants.SUNDAY) {
+            switch (adjust) {
+                case WEEKEND_ADJUST_NEXT_WEEKDAY:
+                case WEEKEND_ADJUST_NEAREST_WEEKDAY:
+                    mdt.addDays(1);
+                    break;
+                case WEEKEND_ADJUST_PREVIOUS_WEEKDAY:
+                    mdt.addDays(-2);
+                    break;
+            }
+        }
+    }
+
+}

From feeee08603b5a3ed0871cd7d6985c825b71c3fc6 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Sun, 9 Oct 2005 20:01:23 +0000
Subject: [PATCH 059/130] In ZonedChronology, fixed getting text values for
 fields from getAs[Short]Text(int value, Locale locale).

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@916 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                         |  2 ++
 .../java/org/joda/time/chrono/ZonedChronology.java |  8 ++++++++
 .../org/joda/time/TestDateTime_Properties.java     | 14 ++++++++++++++
 3 files changed, 24 insertions(+)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 120589320..3ed7ac0b5 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -67,6 +67,8 @@ Bug fixes since 1.1
   Fixed regression in month of year calculation which affected getMaximumValue
   on dayOfMonth field.
 
+- ZonedChronology
+  Fixed getting text values for fields from getAs[Short]Text(int value, Locale locale).
 
 Enhancements since 1.1
 ----------------------
diff --git a/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java b/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java
index 7bbed04d4..4cce7d9fc 100644
--- a/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java
@@ -380,6 +380,14 @@ public String getAsShortText(long instant, Locale locale) {
             return iField.getAsShortText(addOffset(instant), locale);
         }
 
+        public String getAsText(int fieldValue, Locale locale) {
+            return iField.getAsText(fieldValue, locale);
+        }
+
+        public String getAsShortText(int fieldValue, Locale locale) {
+            return iField.getAsShortText(fieldValue, locale);
+        }
+
         public long add(long instant, int value) {
             int offset = getOffsetToAdd(instant);
             instant = iField.add(instant + offset, value);
diff --git a/JodaTime/src/test/org/joda/time/TestDateTime_Properties.java b/JodaTime/src/test/org/joda/time/TestDateTime_Properties.java
index 346c52764..87446bff8 100644
--- a/JodaTime/src/test/org/joda/time/TestDateTime_Properties.java
+++ b/JodaTime/src/test/org/joda/time/TestDateTime_Properties.java
@@ -107,9 +107,13 @@ public void testPropertyGetEra() {
         assertEquals(1, test.era().get());
         assertEquals("1", test.era().getAsString());
         assertEquals("AD", test.era().getAsText());
+        assertEquals("AD", test.era().getField().getAsText(1, Locale.ENGLISH));
         assertEquals("ap. J.-C.", test.era().getAsText(Locale.FRENCH));
+        assertEquals("ap. J.-C.", test.era().getField().getAsText(1, Locale.FRENCH));
         assertEquals("AD", test.era().getAsShortText());
+        assertEquals("AD", test.era().getField().getAsShortText(1, Locale.ENGLISH));
         assertEquals("ap. J.-C.", test.era().getAsShortText(Locale.FRENCH));
+        assertEquals("ap. J.-C.", test.era().getField().getAsShortText(1, Locale.FRENCH));
         assertEquals(test.getChronology().eras(), test.era().getDurationField());
         assertEquals(null, test.era().getRangeDurationField());
         assertEquals(2, test.era().getMaximumTextLength(null));
@@ -336,16 +340,22 @@ public void testPropertyGetMonthOfYear() {
         assertEquals(6, test.monthOfYear().get());
         assertEquals("6", test.monthOfYear().getAsString());
         assertEquals("June", test.monthOfYear().getAsText());
+        assertEquals("June", test.monthOfYear().getField().getAsText(6, Locale.ENGLISH));
         assertEquals("juin", test.monthOfYear().getAsText(Locale.FRENCH));
+        assertEquals("juin", test.monthOfYear().getField().getAsText(6, Locale.FRENCH));
         assertEquals("Jun", test.monthOfYear().getAsShortText());
+        assertEquals("Jun", test.monthOfYear().getField().getAsShortText(6, Locale.ENGLISH));
         assertEquals("juin", test.monthOfYear().getAsShortText(Locale.FRENCH));
+        assertEquals("juin", test.monthOfYear().getField().getAsShortText(6, Locale.FRENCH));
         assertEquals(test.getChronology().months(), test.monthOfYear().getDurationField());
         assertEquals(test.getChronology().years(), test.monthOfYear().getRangeDurationField());
         assertEquals(9, test.monthOfYear().getMaximumTextLength(null));
         assertEquals(3, test.monthOfYear().getMaximumShortTextLength(null));
         test = new DateTime(2004, 7, 9, 0, 0, 0, 0);
         assertEquals("juillet", test.monthOfYear().getAsText(Locale.FRENCH));
+        assertEquals("juillet", test.monthOfYear().getField().getAsText(7, Locale.FRENCH));
         assertEquals("juil.", test.monthOfYear().getAsShortText(Locale.FRENCH));
+        assertEquals("juil.", test.monthOfYear().getField().getAsShortText(7, Locale.FRENCH));
         assertEquals(1, test.monthOfYear().getMinimumValue());
         assertEquals(1, test.monthOfYear().getMinimumValueOverall());
         assertEquals(12, test.monthOfYear().getMaximumValue());
@@ -914,9 +924,13 @@ public void testPropertyGetDayOfWeek() {
         assertEquals(3, test.dayOfWeek().get());
         assertEquals("3", test.dayOfWeek().getAsString());
         assertEquals("Wednesday", test.dayOfWeek().getAsText());
+        assertEquals("Wednesday", test.dayOfWeek().getField().getAsText(3, Locale.ENGLISH));
         assertEquals("mercredi", test.dayOfWeek().getAsText(Locale.FRENCH));
+        assertEquals("mercredi", test.dayOfWeek().getField().getAsText(3, Locale.FRENCH));
         assertEquals("Wed", test.dayOfWeek().getAsShortText());
+        assertEquals("Wed", test.dayOfWeek().getField().getAsShortText(3, Locale.ENGLISH));
         assertEquals("mer.", test.dayOfWeek().getAsShortText(Locale.FRENCH));
+        assertEquals("mer.", test.dayOfWeek().getField().getAsShortText(3, Locale.FRENCH));
         assertEquals(test.getChronology().days(), test.dayOfWeek().getDurationField());
         assertEquals(test.getChronology().weeks(), test.dayOfWeek().getRangeDurationField());
         assertEquals(9, test.dayOfWeek().getMaximumTextLength(null));

From a09523a2b7453645fd7be3a880cfde1712af1dd0 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Tue, 11 Oct 2005 07:51:47 +0000
Subject: [PATCH 060/130] Performance enhancement of critical method, when
 running in server JVM.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@917 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../joda/time/chrono/BaseGJChronology.java    | 37 +++----------------
 1 file changed, 6 insertions(+), 31 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java b/JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java
index 53d68cfe8..a8aad215b 100644
--- a/JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java
@@ -119,8 +119,10 @@
         cHalfdayOfDayField = new HalfdayField();
     }
 
-    private transient YearInfo[] iYearInfoCache;
-    private transient int iYearInfoCacheMask;
+    private static final int CACHE_SIZE = 1;
+    private static final int CACHE_MASK = CACHE_SIZE - 1;
+
+    private final YearInfo[] iYearInfoCache = new YearInfo[CACHE_SIZE];
 
     private final int iMinDaysInFirstWeek;
 
@@ -133,31 +135,6 @@
         }
 
         iMinDaysInFirstWeek = minDaysInFirstWeek;
-
-        Integer i;
-        try {
-            i = Integer.getInteger(getClass().getName().concat(".yearInfoCacheSize"));
-        } catch (SecurityException e) {
-            i = null;
-        }
-
-        int cacheSize;
-        if (i == null) {
-            cacheSize = 1024; // (1 << 10)
-        } else {
-            cacheSize = i.intValue();
-            // Ensure cache size is even power of 2.
-            cacheSize--;
-            int shift = 0;
-            while (cacheSize > 0) {
-                shift++;
-                cacheSize >>= 1;
-            }
-            cacheSize = 1 << shift;
-        }
-
-        iYearInfoCache = new YearInfo[cacheSize];
-        iYearInfoCacheMask = cacheSize - 1;
     }
 
     public DateTimeZone getZone() {
@@ -684,12 +661,10 @@ int getDaysInMonthMaxForSet(long instant, int value) {
     //-----------------------------------------------------------------------
     // Although accessed by multiple threads, this method doesn't need to be synchronized.
     private YearInfo getYearInfo(int year) {
-        YearInfo[] cache = iYearInfoCache;
-        int index = year & iYearInfoCacheMask;
-        YearInfo info = cache[index];
+        YearInfo info = iYearInfoCache[year & CACHE_MASK];
         if (info == null || info.iYear != year) {
             info = new YearInfo(year, calculateFirstDayOfYearMillis(year));
-            cache[index] = info;
+            iYearInfoCache[year & CACHE_MASK] = info;
         }
         return info;
     }

From 53438f4161767d03999ac0a388b9fb1d1e426c4d Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Thu, 13 Oct 2005 06:25:48 +0000
Subject: [PATCH 061/130] Fix serialization bug introduced with last commit.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@918 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java b/JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java
index a8aad215b..e0e42bf35 100644
--- a/JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java
@@ -122,7 +122,7 @@
     private static final int CACHE_SIZE = 1;
     private static final int CACHE_MASK = CACHE_SIZE - 1;
 
-    private final YearInfo[] iYearInfoCache = new YearInfo[CACHE_SIZE];
+    private transient final YearInfo[] iYearInfoCache = new YearInfo[CACHE_SIZE];
 
     private final int iMinDaysInFirstWeek;
 

From 257fbbcdc2b458f9854e23fa885d5a379cd5ca34 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Thu, 13 Oct 2005 06:54:39 +0000
Subject: [PATCH 062/130] Fixed conversions to and from java.util.Date and
 java.util.Calendar where time zone rules differ between JDK and Joda-Time.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@919 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  4 ++++
 .../org/joda/time/base/AbstractDateTime.java  | 24 +++++++++++++++++--
 .../joda/time/convert/CalendarConverter.java  |  6 ++++-
 .../org/joda/time/convert/DateConverter.java  |  5 +++-
 .../joda/time/TestDateTime_Constructors.java  |  2 ++
 .../joda/time/TestInstant_Constructors.java   |  2 ++
 .../TestMutableDateTime_Constructors.java     |  2 ++
 .../joda/time/TestTimeOfDay_Constructors.java |  2 ++
 8 files changed, 43 insertions(+), 4 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 3ed7ac0b5..af5864bbf 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -70,6 +70,10 @@ Bug fixes since 1.1
 - ZonedChronology
   Fixed getting text values for fields from getAs[Short]Text(int value, Locale locale).
 
+- DateConverter, CalendarConverter, AbstractDateTime
+  Fixed conversions to and from java.util.Date and java.util.Calendar where
+  time zone rules differ between JDK and Joda-Time.
+
 Enhancements since 1.1
 ----------------------
 - ChronologyType
diff --git a/JodaTime/src/java/org/joda/time/base/AbstractDateTime.java b/JodaTime/src/java/org/joda/time/base/AbstractDateTime.java
index fbbf1bd1b..f867c78a5 100644
--- a/JodaTime/src/java/org/joda/time/base/AbstractDateTime.java
+++ b/JodaTime/src/java/org/joda/time/base/AbstractDateTime.java
@@ -16,8 +16,10 @@
 package org.joda.time.base;
 
 import java.util.Calendar;
+import java.util.Date;
 import java.util.GregorianCalendar;
 import java.util.Locale;
+import java.util.TimeZone;
 
 import org.joda.time.DateTimeFieldType;
 import org.joda.time.DateTimeZone;
@@ -239,6 +241,17 @@ public int getMillisOfSecond() {
     }
 
     //-----------------------------------------------------------------------
+    /**
+     * Get the date time as a <code>java.util.Date</code>.
+     * 
+     * @return a Date initialised with this datetime
+     */
+    public Date toDate() {
+        long millis = getMillis();
+        long millisLocal = millis - TimeZone.getDefault().getOffset(millis);
+        return new Date(millisLocal + getZone().getOffsetFromLocal(millisLocal));
+    }
+
     /**
      * Get the date time as a <code>java.util.Calendar</code>.
      * The locale is passed in, enabling Calendar to select the correct
@@ -253,7 +266,7 @@ public Calendar toCalendar(Locale locale) {
         }
         DateTimeZone zone = getZone();
         Calendar cal = Calendar.getInstance(zone.toTimeZone(), locale);
-        cal.setTime(toDate());
+        cal.setTime(convertToDate(cal));
         return cal;
     }
 
@@ -265,10 +278,17 @@ public Calendar toCalendar(Locale locale) {
     public GregorianCalendar toGregorianCalendar() {
         DateTimeZone zone = getZone();
         GregorianCalendar cal = new GregorianCalendar(zone.toTimeZone());
-        cal.setTime(toDate());
+        cal.setTime(convertToDate(cal));
         return cal;
     }
 
+    private Date convertToDate(Calendar cal) {
+        long millis = getMillis();
+        long millisLocal = millis - cal.getTimeZone().getOffset(millis);
+        millis = millisLocal + getZone().getOffsetFromLocal(millisLocal);
+        return new Date(millis);
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Output the instant using the specified format pattern.
diff --git a/JodaTime/src/java/org/joda/time/convert/CalendarConverter.java b/JodaTime/src/java/org/joda/time/convert/CalendarConverter.java
index f7c15f768..9aaf111ab 100644
--- a/JodaTime/src/java/org/joda/time/convert/CalendarConverter.java
+++ b/JodaTime/src/java/org/joda/time/convert/CalendarConverter.java
@@ -118,7 +118,11 @@ public Chronology getChronology(Object object, DateTimeZone zone) {
      * @throws ClassCastException if the object is an invalid type
      */
     public long getInstantMillis(Object object, Chronology chrono) {
-        return ((Calendar) object).getTime().getTime();
+        Calendar calendar = (Calendar) object;
+        long millisLocal = calendar.getTime().getTime() +
+            calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET);
+        DateTimeZone tz = DateTimeZone.forTimeZone(calendar.getTimeZone());
+        return millisLocal - tz.getOffsetFromLocal(millisLocal);
     }
 
     //-----------------------------------------------------------------------
diff --git a/JodaTime/src/java/org/joda/time/convert/DateConverter.java b/JodaTime/src/java/org/joda/time/convert/DateConverter.java
index 6263d3973..468baaa01 100644
--- a/JodaTime/src/java/org/joda/time/convert/DateConverter.java
+++ b/JodaTime/src/java/org/joda/time/convert/DateConverter.java
@@ -18,6 +18,7 @@
 import java.util.Date;
 
 import org.joda.time.Chronology;
+import org.joda.time.DateTimeZone;
 
 /**
  * DateConverter converts a java util Date to an instant or partial.
@@ -52,7 +53,9 @@ protected DateConverter() {
      * @throws ClassCastException if the object is an invalid type
      */
     public long getInstantMillis(Object object, Chronology chrono) {
-        return ((Date) object).getTime();
+        Date date = (Date) object;
+        long millisLocal = date.getTime() - date.getTimezoneOffset() * 60000;
+        return millisLocal - DateTimeZone.getDefault().getOffsetFromLocal(millisLocal);
     }
 
     //-----------------------------------------------------------------------
diff --git a/JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java b/JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java
index 5b871ae7d..3c52ec18e 100644
--- a/JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java
+++ b/JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java
@@ -83,12 +83,14 @@ protected void setUp() throws Exception {
         zone = DateTimeZone.getDefault();
         locale = Locale.getDefault();
         DateTimeZone.setDefault(LONDON);
+        java.util.TimeZone.setDefault(LONDON.toTimeZone());
         Locale.setDefault(Locale.UK);
     }
 
     protected void tearDown() throws Exception {
         DateTimeUtils.setCurrentMillisSystem();
         DateTimeZone.setDefault(zone);
+        java.util.TimeZone.setDefault(zone.toTimeZone());
         Locale.setDefault(locale);
         zone = null;
     }
diff --git a/JodaTime/src/test/org/joda/time/TestInstant_Constructors.java b/JodaTime/src/test/org/joda/time/TestInstant_Constructors.java
index 901482b74..830dcaa49 100644
--- a/JodaTime/src/test/org/joda/time/TestInstant_Constructors.java
+++ b/JodaTime/src/test/org/joda/time/TestInstant_Constructors.java
@@ -71,12 +71,14 @@ protected void setUp() throws Exception {
         zone = DateTimeZone.getDefault();
         locale = Locale.getDefault();
         DateTimeZone.setDefault(LONDON);
+        java.util.TimeZone.setDefault(LONDON.toTimeZone());
         Locale.setDefault(Locale.UK);
     }
 
     protected void tearDown() throws Exception {
         DateTimeUtils.setCurrentMillisSystem();
         DateTimeZone.setDefault(zone);
+        java.util.TimeZone.setDefault(zone.toTimeZone());
         Locale.setDefault(locale);
         zone = null;
     }
diff --git a/JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java b/JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java
index fb4313ba8..ab3762681 100644
--- a/JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java
+++ b/JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java
@@ -83,12 +83,14 @@ protected void setUp() throws Exception {
         zone = DateTimeZone.getDefault();
         locale = Locale.getDefault();
         DateTimeZone.setDefault(LONDON);
+        java.util.TimeZone.setDefault(LONDON.toTimeZone());
         Locale.setDefault(Locale.UK);
     }
 
     protected void tearDown() throws Exception {
         DateTimeUtils.setCurrentMillisSystem();
         DateTimeZone.setDefault(zone);
+        java.util.TimeZone.setDefault(zone.toTimeZone());
         Locale.setDefault(locale);
         zone = null;
     }
diff --git a/JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java b/JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java
index 810ed526e..12b820f42 100644
--- a/JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java
+++ b/JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java
@@ -73,11 +73,13 @@ protected void setUp() throws Exception {
         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
         zone = DateTimeZone.getDefault();
         DateTimeZone.setDefault(LONDON);
+        java.util.TimeZone.setDefault(LONDON.toTimeZone());
     }
 
     protected void tearDown() throws Exception {
         DateTimeUtils.setCurrentMillisSystem();
         DateTimeZone.setDefault(zone);
+        java.util.TimeZone.setDefault(zone.toTimeZone());
         zone = null;
     }
 

From eee6a92a4d2623cad2c090e9b858db7115cf335e Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Sat, 22 Oct 2005 15:53:19 +0000
Subject: [PATCH 063/130] Fixed formatting of time zone name near DST
 transition.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@920 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  3 ++
 .../time/format/DateTimeFormatterBuilder.java |  4 +--
 .../time/format/TestDateTimeFormatter.java    | 32 +++++++++++++++++++
 3 files changed, 37 insertions(+), 2 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index af5864bbf..3a8c138d2 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -74,6 +74,9 @@ Bug fixes since 1.1
   Fixed conversions to and from java.util.Date and java.util.Calendar where
   time zone rules differ between JDK and Joda-Time.
 
+- DateTimeFormatter
+  Fixed printing of time zone name near DST transition.
+
 Enhancements since 1.1
 ----------------------
 - ChronologyType
diff --git a/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java b/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java
index 6a290a840..3372c2bcb 100644
--- a/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java
+++ b/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java
@@ -2229,13 +2229,13 @@ public int estimatePrintedLength() {
         public void printTo(
                 StringBuffer buf, long instant, Chronology chrono,
                 int displayOffset, DateTimeZone displayZone, Locale locale) {
-            buf.append(print(instant, displayZone, locale));
+            buf.append(print(instant - displayOffset, displayZone, locale));
         }
 
         public void printTo(
                 Writer out, long instant, Chronology chrono,
                 int displayOffset, DateTimeZone displayZone, Locale locale) throws IOException {
-            out.write(print(instant, displayZone, locale));
+            out.write(print(instant - displayOffset, displayZone, locale));
         }
 
         private String print(long instant, DateTimeZone displayZone, Locale locale) {
diff --git a/JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java b/JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java
index 6eb533096..6743aa146 100644
--- a/JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java
+++ b/JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java
@@ -660,4 +660,36 @@ public void testParseInto_chrono() {
         assertEquals(expect, result);
     }
 
+    // Ensure time zone name switches properly at the zone DST transition.
+    public void testZoneNameNearTransition() {
+        DateTime inDST_1  = new DateTime(2005, 10, 30, 1, 0, 0, 0, NEWYORK);
+        DateTime inDST_2  = new DateTime(2005, 10, 30, 1, 59, 59, 999, NEWYORK);
+        DateTime onDST    = new DateTime(2005, 10, 30, 2, 0, 0, 0, NEWYORK);
+        DateTime outDST   = new DateTime(2005, 10, 30, 2, 0, 0, 1, NEWYORK);
+        DateTime outDST_2 = new DateTime(2005, 10, 30, 2, 0, 1, 0, NEWYORK);
+
+        DateTimeFormatter fmt = DateTimeFormat.forPattern("yyy-MM-dd HH:mm:ss.S zzzz");
+        assertEquals("2005-10-30 01:00:00.0 Eastern Daylight Time", fmt.print(inDST_1));
+        assertEquals("2005-10-30 01:59:59.9 Eastern Daylight Time", fmt.print(inDST_2));
+        assertEquals("2005-10-30 02:00:00.0 Eastern Standard Time", fmt.print(onDST));
+        assertEquals("2005-10-30 02:00:00.0 Eastern Standard Time", fmt.print(outDST));
+        assertEquals("2005-10-30 02:00:01.0 Eastern Standard Time", fmt.print(outDST_2));
+    }
+
+    // Ensure time zone name switches properly at the zone DST transition.
+    public void testZoneShortNameNearTransition() {
+        DateTime inDST_1  = new DateTime(2005, 10, 30, 1, 0, 0, 0, NEWYORK);
+        DateTime inDST_2  = new DateTime(2005, 10, 30, 1, 59, 59, 999, NEWYORK);
+        DateTime onDST    = new DateTime(2005, 10, 30, 2, 0, 0, 0, NEWYORK);
+        DateTime outDST   = new DateTime(2005, 10, 30, 2, 0, 0, 1, NEWYORK);
+        DateTime outDST_2 = new DateTime(2005, 10, 30, 2, 0, 1, 0, NEWYORK);
+
+        DateTimeFormatter fmt = DateTimeFormat.forPattern("yyy-MM-dd HH:mm:ss.S z");
+        assertEquals("2005-10-30 01:00:00.0 EDT", fmt.print(inDST_1));
+        assertEquals("2005-10-30 01:59:59.9 EDT", fmt.print(inDST_2));
+        assertEquals("2005-10-30 02:00:00.0 EST", fmt.print(onDST));
+        assertEquals("2005-10-30 02:00:00.0 EST", fmt.print(outDST));
+        assertEquals("2005-10-30 02:00:01.0 EST", fmt.print(outDST_2));
+    }
+
 }

From 63c28bcbcbaa1c1b1e5ec3c723571210d6cf0f30 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 22 Oct 2005 21:52:34 +0000
Subject: [PATCH 064/130] Add Ethipoic Chronology

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@921 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/cal_ethiopic.xml | 60 +++++++++++++++++++++++++++++++++
 JodaTime/xdocs/navigation.xml   |  1 +
 2 files changed, 61 insertions(+)
 create mode 100644 JodaTime/xdocs/cal_ethiopic.xml

diff --git a/JodaTime/xdocs/cal_ethiopic.xml b/JodaTime/xdocs/cal_ethiopic.xml
new file mode 100644
index 000000000..762e1c66d
--- /dev/null
+++ b/JodaTime/xdocs/cal_ethiopic.xml
@@ -0,0 +1,60 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+
+<document>
+
+ <properties>
+  <title>Java date and time API - Coptic calendar system</title>
+  <author email="scolebourne@users.sourceforge.net">Stephen Colebourne</author>
+ </properties>
+
+ <body>
+
+<section name="Ethiopic calendar system">
+<p>
+The Ethiopic calendar system is similiar to the
+<a href="cal_coptic.html">Coptic</a> calendar and based on that used in ancient Egypt.
+The calendar system is in use today in Ethiopia.
+</p>
+<p>
+The Ethiopic calendar system consists of 12 months of exactly 30 days, followed by
+a 5 or 6 day intercalary month making a year of 365 or 366 days.
+Leap years (6 day intercalary month) occur every 4 years without exception (as per the Julian calendar).
+They occur when the remainder left after dividing the Ethiopic year by four is 3.
+The Ethiopic year starts on Septamber 11th/12th depending on leap years.
+The epoch date for the calendar is 0008-08-29 (Julian), which therefore is 0001-01-01 (Ethiopic).
+The current era is 'EE' (Ethiopian Era).
+</p>
+<p>
+Joda-Time implements the rules described above.
+We model the 5 or 6 day intercalary month as month 13.
+We also prevent the entry of dates before year 1.
+</p>
+<p>
+References
+<ul>
+<li>Calendrical Calculations - Millenium Edition - ISBN 0521777526</li>
+<li><a href="http://en.wikipedia.org/wiki/Ethiopian_calendar">Wikipedia - Ethiopic Calendar</a></li>
+</ul>
+</p>
+</section>
+
+<section name="Using Ethiopic chronology in Joda-Time">
+<p>
+Within Joda-Time the Ethiopic calendar system can be used by obtaining an
+instance of <a href="apidocs/org/joda/time/chrono/EthiopicChronology.html">EthiopicChronology</a>.
+This is normally created via the
+<a href="apidocs/org/joda/time/ChronologyType.html#ethiopic()">ChronologyType.ethiopic()</a> factory.
+The chronology is then passed into the constructors of the main date and time classes.
+</p>
+<source>
+// setup date object for midday on May Day 2004 (ISO year 2004)
+DateTime dtISO = new DateTime(2004, 5, 1, 12, 0, 0, 0);
+
+// find out what the same instant is using the Ethiopic Chronology
+DateTime dtEthiopic = dtISO.withChronology(ChronologyType.ethiopic());
+</source>
+
+</section>
+
+</body>
+</document>
diff --git a/JodaTime/xdocs/navigation.xml b/JodaTime/xdocs/navigation.xml
index 4b8f441a3..29f84a8d4 100644
--- a/JodaTime/xdocs/navigation.xml
+++ b/JodaTime/xdocs/navigation.xml
@@ -35,6 +35,7 @@
       <item name="ISO8601" href="/cal_iso.html"/>
       <item name="Buddhist" href="/cal_buddhist.html"/>
       <item name="Coptic" href="/cal_coptic.html"/>
+      <item name="Ethoipic" href="/cal_ethiopic.html"/>
       <item name="Gregorian" href="/cal_gregorian.html"/>
       <item name="GregorianJulian" href="/cal_gj.html"/>
       <item name="Julian" href="/cal_julian.html"/>

From c4204ecd76fc88245e5a45d0f41fb5b22bb51599 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 22 Oct 2005 21:57:32 +0000
Subject: [PATCH 065/130] Remove completed tasks

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@922 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/ToDo.txt        | 4 ----
 JodaTime/xdocs/tasks.xml | 3 +--
 2 files changed, 1 insertion(+), 6 deletions(-)

diff --git a/JodaTime/ToDo.txt b/JodaTime/ToDo.txt
index 5891f3870..e532c8f24 100644
--- a/JodaTime/ToDo.txt
+++ b/JodaTime/ToDo.txt
@@ -47,10 +47,6 @@ Ideas longer term
 - Factories for DateTime classes?
     Perhaps, but the constructors cover this now.
 
-- ChronologyType:
-    An enumerated type for chronologies to replace the static methods on Chronology
-    This will also help with serialization
-
 - Chronology:
     Add daysFrom(year)
     This would be a DateTimeField that, given a base year, returns the number of
diff --git a/JodaTime/xdocs/tasks.xml b/JodaTime/xdocs/tasks.xml
index 7620f4fc8..b4d181e6d 100644
--- a/JodaTime/xdocs/tasks.xml
+++ b/JodaTime/xdocs/tasks.xml
@@ -16,12 +16,11 @@ The following tasks are on the possible TODO list - contact the mailing lists fo
 </p>
 
 <ul>
-<li>Add more chronologies - Ethiopian, Hebrew, Islamic, Persian, Hindu, Thai, Chinese, Japanese,...</li>
+<li>Add more chronologies - Hebrew, Islamic, Persian, Hindu, Thai, Chinese, Japanese,...</li>
 <li>Consider methods to easily get to the last day in a month</li>
 <li>Consider formatting ordinal numbers, like 1st, 2nd, 3rd</li>
 <li>Consider allowing the text output to be altered</li>
 <li>Formatter switching by locale</li>
-<li>ChronologyType to better represent chronologies in partials (no time zone)</li>
 <li>Date matching methods to find next date matching search criteria</li>
 </ul>
 

From d08ed4b75b924bfe3a583561ba9941897b36b39f Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 22 Oct 2005 21:57:55 +0000
Subject: [PATCH 066/130] Version 1.2 preparation

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@923 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/upgradeto120.xml | 21 +++++++++++++++++++++
 1 file changed, 21 insertions(+)
 create mode 100644 JodaTime/xdocs/upgradeto120.xml

diff --git a/JodaTime/xdocs/upgradeto120.xml b/JodaTime/xdocs/upgradeto120.xml
new file mode 100644
index 000000000..222d6a8bc
--- /dev/null
+++ b/JodaTime/xdocs/upgradeto120.xml
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+
+<document>
+ <properties>
+  <title>Java date and time API - Upgrade from 1.1 to 1.2</title>
+  <author email="scolebourne@joda.org">Stephen Colebourne</author>
+ </properties>
+
+<body>
+
+<section name="Upgrade">
+<p>
+These are the release notes and advice for upgrading Joda-Time from
+version 1.1 to version 1.2.
+<source>
+</source>
+</p>
+</section>
+
+</body>
+</document>

From 5ba9aa47f2836e195512bf89fcf68c51b6bedc16 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 22 Oct 2005 21:58:29 +0000
Subject: [PATCH 067/130] Add ChronologyType methods

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@924 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/java/org/joda/time/DateMidnight.java  | 27 +++++++++++++++++++
 JodaTime/src/java/org/joda/time/DateTime.java | 21 ++++++++++++---
 .../src/java/org/joda/time/DateTimeUtils.java | 17 ++++++++++++
 .../java/org/joda/time/MutableDateTime.java   | 15 +++++++++++
 .../org/joda/time/base/AbstractDateTime.java  | 11 ++++++++
 .../joda/time/TestDateMidnight_Basics.java    | 19 +++++++++++--
 .../test/org/joda/time/TestDateTimeUtils.java |  6 +++++
 .../org/joda/time/TestDateTime_Basics.java    | 17 ++++++++++++
 .../joda/time/TestMutableDateTime_Basics.java |  1 +
 .../joda/time/TestMutableDateTime_Sets.java   | 15 +++++++++++
 10 files changed, 143 insertions(+), 6 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/DateMidnight.java b/JodaTime/src/java/org/joda/time/DateMidnight.java
index ad64bb9ef..8ce993367 100644
--- a/JodaTime/src/java/org/joda/time/DateMidnight.java
+++ b/JodaTime/src/java/org/joda/time/DateMidnight.java
@@ -317,6 +317,33 @@ public DateMidnight withChronology(Chronology newChronology) {
         return (newChronology == getChronology() ? this : new DateMidnight(getMillis(), newChronology));
     }
 
+    /**
+     * Gets a copy of this instant with a different chronology, potentially
+     * changing the day in unexpected ways.
+     * <p>
+     * This method creates a new DateMidnight using the midnight millisecond value
+     * and the new chronology. If the same or similar chronology is specified, but
+     * with a different time zone, the day may change. This occurs because the new
+     * DateMidnight rounds down the millisecond value to get to midnight, and the
+     * time zone change may result in a rounding down to a different day.
+     * <p>
+     * For example, changing time zone from London (+00:00) to Paris (+01:00) will
+     * retain the same day, but changing from Paris to London will change the day.
+     * (When its midnight in London its the same day in Paris, but when its midnight
+     * in Paris its still the previous day in London)
+     * <p>
+     * To avoid these unusual effects, use {@link #withZoneRetainFields(DateTimeZone)}
+     * to change time zones.
+     *
+     * @param newChronologyType  the new chronology type, null means ISO
+     * @return a copy of this datetime with a different chronology
+     */
+    public DateMidnight withChronologyType(ChronologyType newChronologyType) {
+        newChronologyType = DateTimeUtils.getChronologyType(newChronologyType);
+        return (newChronologyType == getChronologyType() ? this :
+            new DateMidnight(getMillis(), newChronologyType.getChronology(getZone())));
+    }
+
     /**
      * Gets a copy of this instant with a different time zone, preserving the day
      * The returned object will have a local time of midnight in the new zone on
diff --git a/JodaTime/src/java/org/joda/time/DateTime.java b/JodaTime/src/java/org/joda/time/DateTime.java
index 5faa1ec0e..fc925bab2 100644
--- a/JodaTime/src/java/org/joda/time/DateTime.java
+++ b/JodaTime/src/java/org/joda/time/DateTime.java
@@ -339,9 +339,8 @@ public DateTime toDateTime(Chronology chronology) {
     /**
      * Gets a copy of this datetime with different millis.
      * <p>
-     * The returned object will be a new instance of the same implementation type.
-     * Only the millis will change, the chronology and time zone are kept.
      * The returned object will be either be a new instance or <code>this</code>.
+     * Only the millis will change, the chronology and time zone are kept.
      *
      * @param newMillis  the new millis, from 1970-01-01T00:00:00Z
      * @return a copy of this datetime with different millis
@@ -353,9 +352,8 @@ public DateTime withMillis(long newMillis) {
     /**
      * Gets a copy of this datetime with a different chronology.
      * <p>
-     * The returned object will be a new instance of the same implementation type.
-     * Only the chronology will change, the millis are kept.
      * The returned object will be either be a new instance or <code>this</code>.
+     * Only the chronology will change, the millis are kept.
      *
      * @param newChronology  the new chronology, null means ISO default
      * @return a copy of this datetime with a different chronology
@@ -365,6 +363,21 @@ public DateTime withChronology(Chronology newChronology) {
         return (newChronology == getChronology() ? this : new DateTime(getMillis(), newChronology));
     }
 
+    /**
+     * Gets a copy of this datetime with a different chronology.
+     * <p>
+     * The returned object will be either be a new instance or <code>this</code>.
+     * Only the chronology will change, the millis and time zone are kept.
+     *
+     * @param newChronologyType  the new chronology type, null means ISO
+     * @return a copy of this datetime with a different chronology
+     */
+    public DateTime withChronologyType(ChronologyType newChronologyType) {
+        newChronologyType = DateTimeUtils.getChronologyType(newChronologyType);
+        return (newChronologyType == getChronologyType() ? this :
+            new DateTime(getMillis(), newChronologyType.getChronology(getZone())));
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Gets a copy of this datetime with a different time zone, preserving the
diff --git a/JodaTime/src/java/org/joda/time/DateTimeUtils.java b/JodaTime/src/java/org/joda/time/DateTimeUtils.java
index 8a84d83bd..d936ed718 100644
--- a/JodaTime/src/java/org/joda/time/DateTimeUtils.java
+++ b/JodaTime/src/java/org/joda/time/DateTimeUtils.java
@@ -234,6 +234,23 @@ public static final Chronology getChronology(Chronology chrono) {
         return chrono;
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the chronology type handling null.
+     * <p>
+     * If the chronology type is <code>null</code>, {@link ChronologyType#iso()}
+     * will be returned. Otherwise, the chronology type is returned.
+     * 
+     * @param type  the chronology type to use, null means ISO
+     * @return the chronology type, never null
+     */
+    public static final ChronologyType getChronologyType(ChronologyType type) {
+        if (type == null) {
+            return ChronologyType.iso();
+        }
+        return type;
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Gets the zone handling null.
diff --git a/JodaTime/src/java/org/joda/time/MutableDateTime.java b/JodaTime/src/java/org/joda/time/MutableDateTime.java
index 0e4782299..5b8ecdaed 100644
--- a/JodaTime/src/java/org/joda/time/MutableDateTime.java
+++ b/JodaTime/src/java/org/joda/time/MutableDateTime.java
@@ -490,6 +490,21 @@ public void setChronology(Chronology chronology) {
         super.setChronology(chronology);
     }
 
+    /**
+     * Set the chronology of the datetime.
+     * <p>
+     * This method does not affect the millis or the zone.
+     * The chronology is only changed if the type is different.
+     *
+     * @param type  the type to use, null means ISO
+     */
+    public void setChronologyType(ChronologyType type) {
+        type = DateTimeUtils.getChronologyType(type);
+        if (type != getChronologyType()) {
+            setChronology(type.getChronology(getZone()));
+        }
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Sets the time zone of the datetime, changing the chronology and field values.
diff --git a/JodaTime/src/java/org/joda/time/base/AbstractDateTime.java b/JodaTime/src/java/org/joda/time/base/AbstractDateTime.java
index f867c78a5..26c568e4d 100644
--- a/JodaTime/src/java/org/joda/time/base/AbstractDateTime.java
+++ b/JodaTime/src/java/org/joda/time/base/AbstractDateTime.java
@@ -21,6 +21,7 @@
 import java.util.Locale;
 import java.util.TimeZone;
 
+import org.joda.time.ChronologyType;
 import org.joda.time.DateTimeFieldType;
 import org.joda.time.DateTimeZone;
 import org.joda.time.ReadableDateTime;
@@ -54,6 +55,16 @@ protected AbstractDateTime() {
         super();
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the type of the chronology.
+     *
+     * @return the type of the chronology
+     */
+    public ChronologyType getChronologyType() {
+        return getChronology().getType();
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Get the value of one of the fields of a datetime.
diff --git a/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java b/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java
index 4f735d48d..380688eb1 100644
--- a/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java
@@ -65,8 +65,8 @@
             (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
     private long TEST_TIME_NOW_LONDON =
             TEST_TIME_NOW_UTC - DateTimeConstants.MILLIS_PER_HOUR;
-    private long TEST_TIME_NOW_PARIS =
-            TEST_TIME_NOW_UTC - 2*DateTimeConstants.MILLIS_PER_HOUR;
+//    private long TEST_TIME_NOW_PARIS =
+//            TEST_TIME_NOW_UTC - 2*DateTimeConstants.MILLIS_PER_HOUR;
             
     // 2002-04-05
     private long TEST_TIME1_UTC =
@@ -200,6 +200,7 @@ public void testGetMethods() {
         DateMidnight test = new DateMidnight();
         
         assertEquals(ISOChronology.getInstance(), test.getChronology());
+        assertEquals(ChronologyType.iso(), test.getChronologyType());
         assertEquals(LONDON, test.getZone());
         assertEquals(TEST_TIME_NOW_LONDON, test.getMillis());
         
@@ -653,6 +654,20 @@ public void testWithChronology_Chronology() {
         assertSame(test, result);
     }
 
+    public void testWithChronologyType_ChronologyType() {
+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC);
+        DateMidnight result = test.withChronologyType(ChronologyType.gregorian());
+        assertEquals(GregorianChronology.getInstance(LONDON), result.getChronology());
+        
+        test = new DateMidnight(TEST_TIME1_UTC, GregorianChronology.getInstance(PARIS));
+        result = test.withChronologyType(null);
+        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());
+        
+        test = new DateMidnight(TEST_TIME1_UTC);
+        result = test.withChronologyType(ChronologyType.iso());
+        assertSame(test, result);
+    }
+
     public void testWithZoneRetainFields_DateTimeZone() {
         DateMidnight test = new DateMidnight(TEST_TIME1_UTC);
         DateMidnight result = test.withZoneRetainFields(PARIS);
diff --git a/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java b/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java
index 1c0576306..fcfe3aee0 100644
--- a/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java
+++ b/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java
@@ -351,6 +351,12 @@ public void testGetChronology_Chronology() {
         assertEquals(ISOChronology.getInstance(), DateTimeUtils.getChronology(null));
     }
 
+    //-----------------------------------------------------------------------
+    public void testGetChronologyType_ChronologyType() {
+        assertEquals(ChronologyType.buddhist(), DateTimeUtils.getChronologyType(ChronologyType.buddhist()));
+        assertEquals(ChronologyType.iso(), DateTimeUtils.getChronologyType(null));
+    }
+
     //-----------------------------------------------------------------------
     public void testGetZone_Zone() {
         assertEquals(PARIS, DateTimeUtils.getZone(PARIS));
diff --git a/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java b/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java
index bfa1cb25c..ea7e681e3 100644
--- a/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java
@@ -211,6 +211,7 @@ public void testGetMethods() {
         DateTime test = new DateTime();
         
         assertEquals(ISOChronology.getInstance(), test.getChronology());
+        assertEquals(ChronologyType.iso(), test.getChronologyType());
         assertEquals(LONDON, test.getZone());
         assertEquals(TEST_TIME_NOW, test.getMillis());
         
@@ -717,6 +718,22 @@ public void testWithChronology_Chronology() {
         assertSame(test, result);
     }
 
+    public void testWithChronologyType_ChronologyType() {
+        DateTime test = new DateTime(TEST_TIME1, PARIS);
+        DateTime result = test.withChronologyType(ChronologyType.gregorian());
+        assertEquals(test.getMillis(), result.getMillis());
+        assertEquals(GregorianChronology.getInstance(PARIS), result.getChronology());
+        
+        test = new DateTime(TEST_TIME1, GregorianChronology.getInstance(PARIS));
+        result = test.withChronologyType(null);
+        assertEquals(test.getMillis(), result.getMillis());
+        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());
+        
+        test = new DateTime(TEST_TIME1);
+        result = test.withChronologyType(ChronologyType.iso());
+        assertSame(test, result);
+    }
+
     public void testWithZone_DateTimeZone() {
         DateTime test = new DateTime(TEST_TIME1);
         DateTime result = test.withZone(PARIS);
diff --git a/JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java b/JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java
index 180e59d7b..ee6b46d91 100644
--- a/JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java
@@ -182,6 +182,7 @@ public void testGetMethods() {
         MutableDateTime test = new MutableDateTime();
         
         assertEquals(ISOChronology.getInstance(), test.getChronology());
+        assertEquals(ChronologyType.iso(), test.getChronologyType());
         assertEquals(LONDON, test.getZone());
         assertEquals(TEST_TIME_NOW, test.getMillis());
         
diff --git a/JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java b/JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java
index 7ce9c8200..219377403 100644
--- a/JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java
+++ b/JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java
@@ -128,6 +128,21 @@ public void testSetChronology_Chronology2() {
         assertEquals(ISOChronology.getInstance(), test.getChronology());
     }
 
+    //-----------------------------------------------------------------------
+    public void testSetChronologyType_ChronologyType1() {
+        MutableDateTime test = new MutableDateTime(TEST_TIME1, PARIS);
+        test.setChronologyType(ChronologyType.gregorian());
+        assertEquals(TEST_TIME1, test.getMillis());
+        assertEquals(GregorianChronology.getInstance(PARIS), test.getChronology());
+    }        
+
+    public void testSetChronologyType_ChronologyType2() {
+        MutableDateTime test = new MutableDateTime(TEST_TIME1, PARIS);
+        test.setChronologyType(null);
+        assertEquals(TEST_TIME1, test.getMillis());
+        assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());
+    }
+
     //-----------------------------------------------------------------------
     public void testSetZone_DateTimeZone1() {
         MutableDateTime test = new MutableDateTime(TEST_TIME1);

From 76d7f552a3f87de7e685ce5736fedfaf516e7f89 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 22 Oct 2005 21:59:14 +0000
Subject: [PATCH 068/130] ChronologyType methods and Ethiopic chronology

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@925 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt | 11 ++++++++++-
 1 file changed, 10 insertions(+), 1 deletion(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 3a8c138d2..f2d75a9f0 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -32,7 +32,7 @@ Warnings since 1.1
 - ChronologyType
   If you have created your own subclass of Chronology, you should create
   a ChronologyType subclass to define a type for your chronology, and
-  override the Chronology.getType() to return it.
+  override Chronology.getType() to return it.
 
 
 Deprecations since 1.1
@@ -77,12 +77,21 @@ Bug fixes since 1.1
 - DateTimeFormatter
   Fixed printing of time zone name near DST transition.
 
+
 Enhancements since 1.1
 ----------------------
+- EthiopicChronology
+  New Chronology which implements similar rules to Coptic
+
 - ChronologyType
   New type that acts as a factory for creating Chronology instances
   Chronology.getType() returns the type
 
+- DateTime/DateMidnight/MutableDateTime.getChronologyType
+- DateTime/DateMidnight.withChronologyType
+- MutableDateTime.setChronologyType
+  Gets and sets the chronology type
+
 - DateTime.Property.toInterval() (also DateMidnight/MutableDateTime)
   New method to convert return an Interval object over the span of the property
   Thus dt.monthOfYear().toInterval() returns an interval from the start to

From c196026b6845b678d16b5b84a2efc979391907f3 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 22 Oct 2005 22:39:42 +0000
Subject: [PATCH 069/130] Add DateTime.Property
 withMaximumValue/withMinimumValue

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@926 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  6 ++++
 .../src/java/org/joda/time/DateMidnight.java  | 31 +++++++++++++++++++
 JodaTime/src/java/org/joda/time/DateTime.java | 31 +++++++++++++++++++
 JodaTime/src/java/org/joda/time/Partial.java  | 25 +++++++++++++++
 .../src/java/org/joda/time/TimeOfDay.java     | 25 +++++++++++++++
 .../src/java/org/joda/time/YearMonthDay.java  | 31 +++++++++++++++++++
 .../time/TestDateMidnight_Properties.java     | 14 +++++++++
 .../joda/time/TestDateTime_Properties.java    | 14 +++++++++
 .../org/joda/time/TestPartial_Properties.java | 14 +++++++++
 .../joda/time/TestTimeOfDay_Properties.java   | 14 +++++++++
 .../time/TestYearMonthDay_Properties.java     | 14 +++++++++
 JodaTime/xdocs/tasks.xml                      |  1 -
 12 files changed, 219 insertions(+), 1 deletion(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index f2d75a9f0..8b707a090 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -92,6 +92,12 @@ Enhancements since 1.1
 - MutableDateTime.setChronologyType
   Gets and sets the chronology type
 
+- DateTime.Property.withMaximumValue() (also DateMidnight/YearMonthDay etc)
+- DateTime.Property.withMinimumValue()
+  Returns a copy of the base datetime with the specified field set to
+  the maximum or minimum value. This is useful to get the last day of the month.
+  - DateTime lastDayOfMonth = dt.dayOfMonth().withMaximumValue();
+
 - DateTime.Property.toInterval() (also DateMidnight/MutableDateTime)
   New method to convert return an Interval object over the span of the property
   Thus dt.monthOfYear().toInterval() returns an interval from the start to
diff --git a/JodaTime/src/java/org/joda/time/DateMidnight.java b/JodaTime/src/java/org/joda/time/DateMidnight.java
index 8ce993367..fb9f783e7 100644
--- a/JodaTime/src/java/org/joda/time/DateMidnight.java
+++ b/JodaTime/src/java/org/joda/time/DateMidnight.java
@@ -1122,6 +1122,37 @@ public DateMidnight setCopy(String text) {
             return setCopy(text, null);
         }
 
+        //-----------------------------------------------------------------------
+        /**
+         * Returns a new DateMidnight with this field set to the maximum value
+         * for this field.
+         * <p>
+         * This operation is useful for obtaining a DateTime on the last day
+         * of the month, as month lengths vary.
+         * <pre>
+         * DateMidnight lastDayOfMonth = dt.dayOfMonth().withMaximumValue();
+         * </pre>
+         * <p>
+         * The DateMidnight attached to this property is unchanged by this call.
+         *
+         * @return a copy of the DateMidnight with this field set to its maximum
+         */
+        public DateMidnight withMaximumValue() {
+            return setCopy(getMaximumValue());
+        }
+        
+        /**
+         * Returns a new DateMidnight with this field set to the minimum value
+         * for this field.
+         * <p>
+         * The DateMidnight attached to this property is unchanged by this call.
+         *
+         * @return a copy of the DateMidnight with this field set to its minimum
+         */
+        public DateMidnight withMinimumValue() {
+            return setCopy(getMinimumValue());
+        }
+        
         //-----------------------------------------------------------------------
         /**
          * Rounds to the lowest whole unit of this field on a copy of this DateMidnight.
diff --git a/JodaTime/src/java/org/joda/time/DateTime.java b/JodaTime/src/java/org/joda/time/DateTime.java
index fc925bab2..e2b2af00c 100644
--- a/JodaTime/src/java/org/joda/time/DateTime.java
+++ b/JodaTime/src/java/org/joda/time/DateTime.java
@@ -1501,6 +1501,37 @@ public DateTime setCopy(String text) {
             return setCopy(text, null);
         }
         
+        //-----------------------------------------------------------------------
+        /**
+         * Returns a new DateTime with this field set to the maximum value
+         * for this field.
+         * <p>
+         * This operation is useful for obtaining a DateTime on the last day
+         * of the month, as month lengths vary.
+         * <pre>
+         * DateTime lastDayOfMonth = dt.dayOfMonth().withMaximumValue();
+         * </pre>
+         * <p>
+         * The DateTime attached to this property is unchanged by this call.
+         *
+         * @return a copy of the DateTime with this field set to its maximum
+         */
+        public DateTime withMaximumValue() {
+            return setCopy(getMaximumValue());
+        }
+        
+        /**
+         * Returns a new DateTime with this field set to the minimum value
+         * for this field.
+         * <p>
+         * The DateTime attached to this property is unchanged by this call.
+         *
+         * @return a copy of the DateTime with this field set to its minimum
+         */
+        public DateTime withMinimumValue() {
+            return setCopy(getMinimumValue());
+        }
+        
         //-----------------------------------------------------------------------
         /**
          * Rounds to the lowest whole unit of this field on a copy of this DateTime.
diff --git a/JodaTime/src/java/org/joda/time/Partial.java b/JodaTime/src/java/org/joda/time/Partial.java
index 095e88b69..347ef7275 100644
--- a/JodaTime/src/java/org/joda/time/Partial.java
+++ b/JodaTime/src/java/org/joda/time/Partial.java
@@ -940,6 +940,31 @@ public Partial setCopy(String text, Locale locale) {
         public Partial setCopy(String text) {
             return setCopy(text, null);
         }
+
+        //-----------------------------------------------------------------------
+        /**
+         * Returns a new Partial with this field set to the maximum value
+         * for this field.
+         * <p>
+         * The Partial attached to this property is unchanged by this call.
+         *
+         * @return a copy of the Partial with this field set to its maximum
+         */
+        public Partial withMaximumValue() {
+            return setCopy(getMaximumValue());
+        }
+
+        /**
+         * Returns a new Partial with this field set to the minimum value
+         * for this field.
+         * <p>
+         * The Partial attached to this property is unchanged by this call.
+         *
+         * @return a copy of the Partial with this field set to its minimum
+         */
+        public Partial withMinimumValue() {
+            return setCopy(getMinimumValue());
+        }
     }
 
 }
diff --git a/JodaTime/src/java/org/joda/time/TimeOfDay.java b/JodaTime/src/java/org/joda/time/TimeOfDay.java
index 47f6a5b21..d6c8c6d84 100644
--- a/JodaTime/src/java/org/joda/time/TimeOfDay.java
+++ b/JodaTime/src/java/org/joda/time/TimeOfDay.java
@@ -1033,6 +1033,31 @@ public TimeOfDay setCopy(String text, Locale locale) {
         public TimeOfDay setCopy(String text) {
             return setCopy(text, null);
         }
+
+        //-----------------------------------------------------------------------
+        /**
+         * Returns a new TimeOfDay with this field set to the maximum value
+         * for this field.
+         * <p>
+         * The TimeOfDay attached to this property is unchanged by this call.
+         *
+         * @return a copy of the TimeOfDay with this field set to its maximum
+         */
+        public TimeOfDay withMaximumValue() {
+            return setCopy(getMaximumValue());
+        }
+
+        /**
+         * Returns a new TimeOfDay with this field set to the minimum value
+         * for this field.
+         * <p>
+         * The TimeOfDay attached to this property is unchanged by this call.
+         *
+         * @return a copy of the TimeOfDay with this field set to its minimum
+         */
+        public TimeOfDay withMinimumValue() {
+            return setCopy(getMinimumValue());
+        }
     }
 
 }
diff --git a/JodaTime/src/java/org/joda/time/YearMonthDay.java b/JodaTime/src/java/org/joda/time/YearMonthDay.java
index 96bd0e4fb..d3a5b1ce7 100644
--- a/JodaTime/src/java/org/joda/time/YearMonthDay.java
+++ b/JodaTime/src/java/org/joda/time/YearMonthDay.java
@@ -940,6 +940,37 @@ public YearMonthDay setCopy(String text, Locale locale) {
         public YearMonthDay setCopy(String text) {
             return setCopy(text, null);
         }
+
+        //-----------------------------------------------------------------------
+        /**
+         * Returns a new YearMonthDay with this field set to the maximum value
+         * for this field.
+         * <p>
+         * This operation is useful for obtaining a DateTime on the last day
+         * of the month, as month lengths vary.
+         * <pre>
+         * YearMonthDay lastDayOfMonth = dt.dayOfMonth().withMaximumValue();
+         * </pre>
+         * <p>
+         * The YearMonthDay attached to this property is unchanged by this call.
+         *
+         * @return a copy of the YearMonthDay with this field set to its maximum
+         */
+        public YearMonthDay withMaximumValue() {
+            return setCopy(getMaximumValue());
+        }
+
+        /**
+         * Returns a new YearMonthDay with this field set to the minimum value
+         * for this field.
+         * <p>
+         * The YearMonthDay attached to this property is unchanged by this call.
+         *
+         * @return a copy of the YearMonthDay with this field set to its minimum
+         */
+        public YearMonthDay withMinimumValue() {
+            return setCopy(getMinimumValue());
+        }
     }
 
 }
diff --git a/JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java b/JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java
index 878af7064..ac85bf3ec 100644
--- a/JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java
+++ b/JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java
@@ -384,6 +384,20 @@ public void testPropertyGetDayOfMonth() {
         assertEquals(null, test.dayOfMonth().getLeapDurationField());
     }
 
+    public void testPropertyWithMaximumValueDayOfMonth() {
+        DateMidnight test = new DateMidnight(2004, 6, 9);
+        DateMidnight copy = test.dayOfMonth().withMaximumValue();
+        assertEquals("2004-06-09T00:00:00.000+01:00", test.toString());
+        assertEquals("2004-06-30T00:00:00.000+01:00", copy.toString());
+    }
+
+    public void testPropertyWithMinimumValueDayOfMonth() {
+        DateMidnight test = new DateMidnight(2004, 6, 9);
+        DateMidnight copy = test.dayOfMonth().withMinimumValue();
+        assertEquals("2004-06-09T00:00:00.000+01:00", test.toString());
+        assertEquals("2004-06-01T00:00:00.000+01:00", copy.toString());
+    }
+
     //-----------------------------------------------------------------------
     public void testPropertyGetDayOfYear() {
         // 31+29+31+30+31+9 = 161
diff --git a/JodaTime/src/test/org/joda/time/TestDateTime_Properties.java b/JodaTime/src/test/org/joda/time/TestDateTime_Properties.java
index 87446bff8..b918fec30 100644
--- a/JodaTime/src/test/org/joda/time/TestDateTime_Properties.java
+++ b/JodaTime/src/test/org/joda/time/TestDateTime_Properties.java
@@ -631,6 +631,20 @@ public void testPropertySetTextDayOfMonth() {
         assertEquals("2004-06-12T00:00:00.000+01:00", copy.toString());
     }
 
+    public void testPropertyWithMaximumValueDayOfMonth() {
+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);
+        DateTime copy = test.dayOfMonth().withMaximumValue();
+        assertEquals("2004-06-09T00:00:00.000+01:00", test.toString());
+        assertEquals("2004-06-30T00:00:00.000+01:00", copy.toString());
+    }
+
+    public void testPropertyWithMinimumValueDayOfMonth() {
+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);
+        DateTime copy = test.dayOfMonth().withMinimumValue();
+        assertEquals("2004-06-09T00:00:00.000+01:00", test.toString());
+        assertEquals("2004-06-01T00:00:00.000+01:00", copy.toString());
+    }
+
     public void testPropertyCompareToDayOfMonth() {
         DateTime test1 = new DateTime(TEST_TIME1);
         DateTime test2 = new DateTime(TEST_TIME2);
diff --git a/JodaTime/src/test/org/joda/time/TestPartial_Properties.java b/JodaTime/src/test/org/joda/time/TestPartial_Properties.java
index 283ab06e8..d26298ab1 100644
--- a/JodaTime/src/test/org/joda/time/TestPartial_Properties.java
+++ b/JodaTime/src/test/org/joda/time/TestPartial_Properties.java
@@ -198,6 +198,20 @@ public void testPropertySetTextHour() {
         check(copy, 12, 20, 30, 40);
     }
 
+    public void testPropertyWithMaximumValueHour() {
+        Partial test = new Partial(TYPES, VALUES);
+        Partial copy = test.property(DateTimeFieldType.hourOfDay()).withMaximumValue();
+        check(test, 10, 20, 30, 40);
+        check(copy, 23, 20, 30, 40);
+    }
+
+    public void testPropertyWithMinimumValueHour() {
+        Partial test = new Partial(TYPES, VALUES);
+        Partial copy = test.property(DateTimeFieldType.hourOfDay()).withMinimumValue();
+        check(test, 10, 20, 30, 40);
+        check(copy, 0, 20, 30, 40);
+    }
+
     public void testPropertyCompareToHour() {
         Partial test1 = new Partial(TYPES, VALUES1);
         Partial test2 = new Partial(TYPES, VALUES2);
diff --git a/JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java b/JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java
index 4d44a02b8..68d63a331 100644
--- a/JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java
+++ b/JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java
@@ -192,6 +192,20 @@ public void testPropertySetTextHour() {
         check(copy, 12, 20, 30, 40);
     }
 
+    public void testPropertyWithMaximumValueHour() {
+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);
+        TimeOfDay copy = test.hourOfDay().withMaximumValue();
+        check(test, 10, 20, 30, 40);
+        check(copy, 23, 20, 30, 40);
+    }
+
+    public void testPropertyWithMinimumValueHour() {
+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);
+        TimeOfDay copy = test.hourOfDay().withMinimumValue();
+        check(test, 10, 20, 30, 40);
+        check(copy, 0, 20, 30, 40);
+    }
+
     public void testPropertyCompareToHour() {
         TimeOfDay test1 = new TimeOfDay(TEST_TIME1);
         TimeOfDay test2 = new TimeOfDay(TEST_TIME2);
diff --git a/JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java b/JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java
index a77db27f9..55f7b9c7b 100644
--- a/JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java
+++ b/JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java
@@ -444,6 +444,20 @@ public void testPropertySetTextDay() {
         check(copy, 1972, 6, 12);
     }
 
+    public void testPropertyWithMaximumValueDayOfMonth() {
+        YearMonthDay test = new YearMonthDay(1972, 6, 9);
+        YearMonthDay copy = test.dayOfMonth().withMaximumValue();
+        check(test, 1972, 6, 9);
+        check(copy, 1972, 6, 30);
+    }
+
+    public void testPropertyWithMinimumValueDayOfMonth() {
+        YearMonthDay test = new YearMonthDay(1972, 6, 9);
+        YearMonthDay copy = test.dayOfMonth().withMinimumValue();
+        check(test, 1972, 6, 9);
+        check(copy, 1972, 6, 1);
+    }
+
     public void testPropertyCompareToDay() {
         YearMonthDay test1 = new YearMonthDay(TEST_TIME1);
         YearMonthDay test2 = new YearMonthDay(TEST_TIME2);
diff --git a/JodaTime/xdocs/tasks.xml b/JodaTime/xdocs/tasks.xml
index b4d181e6d..b55b43fb7 100644
--- a/JodaTime/xdocs/tasks.xml
+++ b/JodaTime/xdocs/tasks.xml
@@ -17,7 +17,6 @@ The following tasks are on the possible TODO list - contact the mailing lists fo
 
 <ul>
 <li>Add more chronologies - Hebrew, Islamic, Persian, Hindu, Thai, Chinese, Japanese,...</li>
-<li>Consider methods to easily get to the last day in a month</li>
 <li>Consider formatting ordinal numbers, like 1st, 2nd, 3rd</li>
 <li>Consider allowing the text output to be altered</li>
 <li>Formatter switching by locale</li>

From beec594614e14f83c57ca24414179de8f9b564ea Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 2 Nov 2005 17:26:37 +0000
Subject: [PATCH 070/130] Remove ChronologyType - it created more issues than
 it solved

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@927 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  25 +-
 .../src/java/org/joda/time/Chronology.java    |  58 ++-
 .../java/org/joda/time/ChronologyType.java    | 351 ------------------
 .../src/java/org/joda/time/DateMidnight.java  |  27 --
 JodaTime/src/java/org/joda/time/DateTime.java |  15 -
 .../src/java/org/joda/time/DateTimeUtils.java |  17 -
 JodaTime/src/java/org/joda/time/Instant.java  |   5 +-
 .../java/org/joda/time/MutableDateTime.java   |  15 -
 .../src/java/org/joda/time/TimeOfDay.java     |   3 +-
 .../src/java/org/joda/time/YearMonthDay.java  |   3 +-
 .../org/joda/time/base/AbstractDateTime.java  |  11 -
 .../java/org/joda/time/base/BaseInterval.java |   4 +-
 .../joda/time/chrono/BuddhistChronology.java  |  12 -
 .../joda/time/chrono/CopticChronology.java    |  12 -
 .../joda/time/chrono/EthiopicChronology.java  |  11 -
 .../org/joda/time/chrono/GJChronology.java    |  12 -
 .../joda/time/chrono/GregorianChronology.java |  12 -
 .../org/joda/time/chrono/ISOChronology.java   |  12 -
 .../joda/time/chrono/JulianChronology.java    |  12 -
 .../java/org/joda/time/chrono/package.html    |   6 +-
 .../joda/time/convert/AbstractConverter.java  |   4 +-
 .../joda/time/convert/CalendarConverter.java  |   4 +-
 JodaTime/src/test/org/joda/time/TestAll.java  |   1 -
 .../org/joda/time/TestChronologyType.java     | 191 ----------
 .../joda/time/TestDateMidnight_Basics.java    |  15 -
 .../test/org/joda/time/TestDateTimeUtils.java |   6 -
 .../org/joda/time/TestDateTime_Basics.java    |  17 -
 .../joda/time/TestMutableDateTime_Basics.java |   1 -
 .../joda/time/TestMutableDateTime_Sets.java   |  15 -
 JodaTime/xdocs/cal_ethiopic.xml               |   4 +-
 30 files changed, 44 insertions(+), 837 deletions(-)
 delete mode 100644 JodaTime/src/java/org/joda/time/ChronologyType.java
 delete mode 100644 JodaTime/src/test/org/joda/time/TestChronologyType.java

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 8b707a090..4bdd73f84 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -27,22 +27,14 @@ Serialization compatible - Yes
 Data compatible - Yes
 
 
-Warnings since 1.1
-------------------
-- ChronologyType
-  If you have created your own subclass of Chronology, you should create
-  a ChronologyType subclass to define a type for your chronology, and
-  override Chronology.getType() to return it.
-
-
 Deprecations since 1.1
 ----------------------
 - Chronology factory methods, such as getISO() and getCopticUTC()
-  The ChronologyType class contains suitable replacement methods
+  You should now use the chrono package directly:
     Chronology.getCoptic(zone)   is replaced by
-    ChronologyType.coptic().getChronology(zone)
-  These factory methods have been removed as they were a poor substitute
-  for a proper type class, and confused the role of the Chronology class
+    CopticChronology.getInstance(zone)
+  These factory methods have been removed as they were unable to scale
+  suitably as more and more chronologies are added
 
 
 Bug fixes since 1.1
@@ -83,15 +75,6 @@ Enhancements since 1.1
 - EthiopicChronology
   New Chronology which implements similar rules to Coptic
 
-- ChronologyType
-  New type that acts as a factory for creating Chronology instances
-  Chronology.getType() returns the type
-
-- DateTime/DateMidnight/MutableDateTime.getChronologyType
-- DateTime/DateMidnight.withChronologyType
-- MutableDateTime.setChronologyType
-  Gets and sets the chronology type
-
 - DateTime.Property.withMaximumValue() (also DateMidnight/YearMonthDay etc)
 - DateTime.Property.withMinimumValue()
   Returns a copy of the base datetime with the specified field set to
diff --git a/JodaTime/src/java/org/joda/time/Chronology.java b/JodaTime/src/java/org/joda/time/Chronology.java
index ce5fb0144..0f380e7eb 100644
--- a/JodaTime/src/java/org/joda/time/Chronology.java
+++ b/JodaTime/src/java/org/joda/time/Chronology.java
@@ -28,12 +28,11 @@
  * <p>
  * Various chronologies are supported by subclasses including ISO
  * and GregorianJulian. To construct a Chronology you should use the
- * factory methods on {@link ChronologyType}. If you require full
- * control of the factory, then you should use the method on each subclass.
+ * factory methods on the chronology subclass in the chrono package.
  * <p>
  * For example, to obtain the current time in the coptic calendar system:
  * <pre>
- * DateTime dt = new DateTime(ChronologyType.coptic().getChronology());
+ * DateTime dt = new DateTime(CopticChronology.getInstance());
  * </pre>
  * <p>
  * The provided chronology implementations are:
@@ -44,6 +43,7 @@
  * <li>Julian - The Julian calendar system used for all time (proleptic)
  * <li>Buddhist - The Buddhist calendar system which is an offset in years from GJ
  * <li>Coptic - The Coptic calendar system which defines 30 day months
+ * <li>Ethiopic - The Ethiopic calendar system which defines 30 day months
  * </ul>
  * Hopefully future releases will contain more chronologies.
  * <p>
@@ -60,6 +60,7 @@
  * @see org.joda.time.chrono.JulianChronology
  * @see org.joda.time.chrono.CopticChronology
  * @see org.joda.time.chrono.BuddhistChronology
+ * @see org.joda.time.chrono.EthiopicChronology
  *
  * @author Stephen Colebourne
  * @author Brian S O'Neill
@@ -76,7 +77,7 @@
      * as it applies the modern Gregorian calendar rules before that date.
      *
      * @return the ISO chronology
-     * @deprecated Use ChronologyType.iso().getChronology()
+     * @deprecated Use ISOChronology.getInstance()
      */
     public static Chronology getISO() {
         return ISOChronology.getInstance();
@@ -91,7 +92,7 @@ public static Chronology getISO() {
      * as it applies the modern Gregorian calendar rules before that date.
      *
      * @return the ISO chronology
-     * @deprecated Use ChronologyType.iso().getChronologyUTC()
+     * @deprecated Use ISOChronology.getInstanceUTC()
      */
     public static Chronology getISOUTC() {
         return ISOChronology.getInstanceUTC();
@@ -107,7 +108,7 @@ public static Chronology getISOUTC() {
      *
      * @param zone  the zone to use, null means default zone
      * @return the ISO chronology
-     * @deprecated Use ChronologyType.iso().getChronology(zone)
+     * @deprecated Use ISOChronology.getInstance(zone)
      */
     public static Chronology getISO(DateTimeZone zone) {
         return ISOChronology.getInstance(zone);
@@ -133,7 +134,7 @@ public static Chronology getISO(DateTimeZone zone) {
      * we recommend using ISOChronology, which is the default.
      *
      * @return the GJ chronology
-     * @deprecated Use ChronologyType.gj().getChronology()
+     * @deprecated Use GJChronology.getInstance()
      */
     public static Chronology getGJ() {
         return GJChronology.getInstance();
@@ -158,7 +159,7 @@ public static Chronology getGJ() {
      * we recommend using ISOChronology, which is the default.
      *
      * @return the GJ chronology
-     * @deprecated Use ChronologyType.gj().getChronologyUTC()
+     * @deprecated Use GJChronology.getInstanceUTC()
      */
     public static Chronology getGJUTC() {
         return GJChronology.getInstanceUTC();
@@ -184,7 +185,7 @@ public static Chronology getGJUTC() {
      *
      * @param zone  the zone to use, null means default zone
      * @return the GJ chronology
-     * @deprecated Use ChronologyType.gj().getChronology(zone)
+     * @deprecated Use GJChronology.getInstance(zone)
      */
     public static Chronology getGJ(DateTimeZone zone) {
         return GJChronology.getInstance(zone);
@@ -206,7 +207,7 @@ public static Chronology getGJ(DateTimeZone zone) {
      * thus we recommend using ISOChronology instead, which is the default.
      *
      * @return the Gregorian chronology
-     * @deprecated Use ChronologyType.gregorian().getChronology()
+     * @deprecated Use GregorianChronology.getInstance()
      */
     public static Chronology getGregorian() {
         return GregorianChronology.getInstance();
@@ -227,7 +228,7 @@ public static Chronology getGregorian() {
      * thus we recommend using ISOChronology instead, which is the default.
      *
      * @return the Gregorian chronology
-     * @deprecated Use ChronologyType.gregorian().getChronologyUTC()
+     * @deprecated Use GregorianChronology.getInstanceUTC()
      */
     public static Chronology getGregorianUTC() {
         return GregorianChronology.getInstanceUTC();
@@ -249,7 +250,7 @@ public static Chronology getGregorianUTC() {
      *
      * @param zone  the zone to use, null means default zone
      * @return the Gregorian chronology
-     * @deprecated Use ChronologyType.gregorian().getChronology(zone)
+     * @deprecated Use GregorianChronology.getInstance(zone)
      */
     public static Chronology getGregorian(DateTimeZone zone) {
         return GregorianChronology.getInstance(zone);
@@ -264,7 +265,7 @@ public static Chronology getGregorian(DateTimeZone zone) {
      * The Julian calendar system defines a leap year every four years.
      *
      * @return the Julian chronology
-     * @deprecated Use ChronologyType.julian().getChronology()
+     * @deprecated Use JulianChronology.getInstance()
      */
     public static Chronology getJulian() {
         return JulianChronology.getInstance();
@@ -278,7 +279,7 @@ public static Chronology getJulian() {
      * The Julian calendar system defines a leap year every four years.
      *
      * @return the Julian chronology
-     * @deprecated Use ChronologyType.julian().getChronologyUTC()
+     * @deprecated Use JulianChronology.getInstanceUTC()
      */
     public static Chronology getJulianUTC() {
         return JulianChronology.getInstanceUTC();
@@ -293,7 +294,7 @@ public static Chronology getJulianUTC() {
      *
      * @param zone  the zone to use, null means default zone
      * @return the Julian chronology
-     * @deprecated Use ChronologyType.julian().getChronology(zone)
+     * @deprecated Use JulianChronology.getInstance(zone)
      */
     public static Chronology getJulian(DateTimeZone zone) {
         return JulianChronology.getInstance(zone);
@@ -308,7 +309,7 @@ public static Chronology getJulian(DateTimeZone zone) {
      * year 1 in the Buddhist calendar.
      *
      * @return the Buddhist chronology
-     * @deprecated Use ChronologyType.buddhist().getChronology()
+     * @deprecated Use BuddhistChronology.getInstance()
      */
     public static Chronology getBuddhist() {
         return BuddhistChronology.getInstance();
@@ -322,7 +323,7 @@ public static Chronology getBuddhist() {
      * year 1 in the Buddhist calendar.
      *
      * @return the Buddhist chronology
-     * @deprecated Use ChronologyType.buddhist().getChronologyUTC()
+     * @deprecated Use BuddhistChronology.getInstanceUTC()
      */
     public static Chronology getBuddhistUTC() {
         return BuddhistChronology.getInstanceUTC();
@@ -337,7 +338,7 @@ public static Chronology getBuddhistUTC() {
      *
      * @param zone  the zone to use, null means default zone
      * @return the Buddhist chronology
-     * @deprecated Use ChronologyType.buddhist().getChronology(zone)
+     * @deprecated Use BuddhistChronology.getInstance(zone)
      */
     public static Chronology getBuddhist(DateTimeZone zone) {
         return BuddhistChronology.getInstance(zone);
@@ -356,7 +357,7 @@ public static Chronology getBuddhist(DateTimeZone zone) {
      * The chronology cannot be used before the first Coptic year.
      *
      * @return the Coptic chronology
-     * @deprecated Use ChronologyType.coptic().getChronology()
+     * @deprecated Use CopticChronology.getInstance()
      */
     public static Chronology getCoptic() {
         return CopticChronology.getInstance();
@@ -374,7 +375,7 @@ public static Chronology getCoptic() {
      * The chronology cannot be used before the first Coptic year.
      *
      * @return the Coptic chronology
-     * @deprecated Use ChronologyType.coptic().getChronologyUTC()
+     * @deprecated Use CopticChronology.getInstanceUTC()
      */
     public static Chronology getCopticUTC() {
         return CopticChronology.getInstanceUTC();
@@ -393,28 +394,13 @@ public static Chronology getCopticUTC() {
      *
      * @param zone  the zone to use, null means default zone
      * @return the Coptic chronology
-     * @deprecated Use ChronologyType.coptic().getChronology(zone)
+     * @deprecated Use CopticChronology.getInstance(zone)
      */
     public static Chronology getCoptic(DateTimeZone zone) {
         return CopticChronology.getInstance(zone);
     }
 
     //-----------------------------------------------------------------------
-    /**
-     * Returns the ChronologyType constant for this Chronology.
-     * <p>
-     * This method should ideally never return null. However ChronologyType
-     * was only added in v1.2, and any chronology written before then
-     * will not correctly override this method to return the type.
-     *
-     * @return the chronology type, correct implementations never return null
-     * @since 1.2
-     */
-    public ChronologyType getType() {
-        // all subclasses should override this method
-        return null;
-    }
-
     /**
      * Returns the DateTimeZone that this Chronology operates in, or null if
      * unspecified.
diff --git a/JodaTime/src/java/org/joda/time/ChronologyType.java b/JodaTime/src/java/org/joda/time/ChronologyType.java
deleted file mode 100644
index 46e6a04ca..000000000
--- a/JodaTime/src/java/org/joda/time/ChronologyType.java
+++ /dev/null
@@ -1,351 +0,0 @@
-/*
- *  Copyright 2001-2005 Stephen Colebourne
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.joda.time;
-
-import java.io.Serializable;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.Map;
-import java.util.Set;
-
-import org.joda.time.chrono.BuddhistChronology;
-import org.joda.time.chrono.CopticChronology;
-import org.joda.time.chrono.EthiopicChronology;
-import org.joda.time.chrono.GJChronology;
-import org.joda.time.chrono.GregorianChronology;
-import org.joda.time.chrono.ISOChronology;
-import org.joda.time.chrono.JulianChronology;
-
-/**
- * Identifies a type of chronology, which represents the calendar system.
- * <p>
- * Various chronologies are supported by Joda-Time, including ISO and
- * GregorianJulian. This class defines static methods to obtain the
- * different kinds of chronology that are supported. Each instance then
- * defines methods to obtain a Chronology by specifying the time zone.
- * For example, to obtain the coptic chronology in the default zone:
- * <pre>
- * Chronology c = ChronologyType.coptic().getChronology();
- * </pre>
- * <p>
- * The provided chronology types are:
- * <ul>
- * <li>ISO - Based on the ISO8601 standard and suitable for use after about 1600
- * <li>GJ - Historically accurate calendar with Julian followed by Gregorian
- * <li>Gregorian - The Gregorian calendar system used for all time (proleptic)
- * <li>Julian - The Julian calendar system used for all time (proleptic)
- * <li>Buddhist - The Buddhist calendar system which is an offset in years from GJ
- * <li>Coptic - The Coptic calendar system which defines 30 day months
- * <li>Ethiopic - The Ethiopic calendar system which defines 30 day months
- * </ul>
- * Hopefully future releases will contain more chronologies.
- *
- * @see org.joda.time.chrono.ISOChronology
- * @see org.joda.time.chrono.GJChronology
- * @see org.joda.time.chrono.GregorianChronology
- * @see org.joda.time.chrono.JulianChronology
- * @see org.joda.time.chrono.BuddhistChronology
- * @see org.joda.time.chrono.CopticChronology
- * @see org.joda.time.chrono.EthiopicChronology
- *
- * @author Stephen Colebourne
- * @since 1.2
- */
-public abstract class ChronologyType implements Serializable {
-
-    /** Serialization version */
-    private static final long serialVersionUID = 83923682285389L;
-
-    /** The map of id to type. */
-    private static final Map cTypes = Collections.synchronizedMap(new HashMap());
-
-    /** Ordinal values for standard chronology types. */
-    static final byte  // do not change - values matter for serialization
-        ISO = 1,
-        GJ = 2,
-        GREGORIAN = 3,
-        JULIAN = 4,
-        BUDDHIST = 5,
-        COPTIC = 6,
-        ETHIOPIC = 7;
-
-    /** The iso chronology type. */
-    private static final ChronologyType ISO_TYPE = new StandardChronologyType("ISO", ISO);
-    /** The iso chronology type. */
-    private static final ChronologyType GJ_TYPE = new StandardChronologyType("GJ", GJ);
-    /** The iso chronology type. */
-    private static final ChronologyType GREGORIAN_TYPE = new StandardChronologyType("Gregorian", GREGORIAN);
-    /** The iso chronology type. */
-    private static final ChronologyType JULIAN_TYPE = new StandardChronologyType("Julian", JULIAN);
-    /** The iso chronology type. */
-    private static final ChronologyType BUDDHIST_TYPE = new StandardChronologyType("Buddhist", BUDDHIST);
-    /** The iso chronology type. */
-    private static final ChronologyType COPTIC_TYPE = new StandardChronologyType("Coptic", COPTIC);
-    /** The iso chronology type. */
-    private static final ChronologyType ETHIOPIC_TYPE = new StandardChronologyType("Ethiopic", ETHIOPIC);
-
-    /** The id of the field. */
-    private final String iID;
-
-    //-----------------------------------------------------------------------
-    /**
-     * Constructor.
-     * 
-     * @param id  the id to use
-     */
-    protected ChronologyType(String id) {
-        super();
-        iID = id;
-        cTypes.put(id, this);
-    }
-
-    //-----------------------------------------------------------------------
-    /**
-     * Gets a ChronologyType by id.
-     * <p>
-     * Note that this method will work with your own subclasses of
-     * ChronologyType, so long as an instance of the subclass has been
-     * class-loaded.
-     *
-     * @param id  the id to get
-     * @return the chronology type, null if no known chronology
-     */
-    public static ChronologyType forID(String id) {
-        return (ChronologyType) cTypes.get(id);
-    }
-
-    /**
-     * Gets all the available ids supported.
-     * 
-     * @return an unmodifiable Set of String ids
-     */
-    public static Set getAvailableIDs() {
-        return Collections.unmodifiableSet(cTypes.keySet());
-    }
-
-    //-----------------------------------------------------------------------
-    /**
-     * Get the ISO chronology type.
-     * <p>
-     * {@link ISOChronology} defines all fields in line with the ISO8601 standard.
-     * This chronology is the default, and is suitable for all normal datetime processing.
-     * It is <i>unsuitable</i> for historical datetimes before October 15, 1582
-     * as it applies the modern Gregorian calendar rules before that date.
-     *
-     * @return the ChronologyType constant
-     */
-    public static ChronologyType iso() {
-        return ISO_TYPE;
-    }
-
-    /**
-     * Get the GJ chronology type.
-     * <p>
-     * {@link GJChronology} defines all fields using standard meanings.
-     * This chronology is intended to be used as a replacement for <code>GregorianCalendar</code>.
-     * The Gregorian calendar system is used after October 15, 1582, while the
-     * Julian calendar system is used before.
-     * <p>
-     * Unlike <code>GregorianCalendar</code>, this chronology returns a year of -1
-     * for 1 BCE, -2 for 2 BCE and so on. Thus there is no year zero.
-     * <p>
-     * This method uses the standard Julian to Gregorian cutover date of
-     * October 15th 1582. If you require a cutover on a different date, then use
-     * the factory methods on <code>GJChronology</code> itself.
-     * <p>
-     * When dealing solely with dates in the modern era, from 1600 onwards,
-     * we recommend using ISOChronology, which is the default.
-     *
-     * @return the ChronologyType constant
-     */
-    public static ChronologyType gj() {
-        return GJ_TYPE;
-    }
-
-    /**
-     * Get the Gregorian chronology type.
-     * <p>
-     * {@link GregorianChronology} defines all fields using standard meanings.
-     * It uses the Gregorian calendar rules <i>for all time</i> (proleptic)
-     * thus it is NOT a replacement for <code>GregorianCalendar</code>.
-     * For that purpose, you should use {@link #gj()}.
-     * <p>
-     * The Gregorian calendar system defines a leap year every four years,
-     * except that every 100 years is not leap, but every 400 is leap.
-     * <p>
-     * Technically, this chronology is almost identical to the ISO chronology,
-     * thus we recommend using ISOChronology instead, which is the default.
-     *
-     * @return the ChronologyType constant
-     */
-    public static ChronologyType gregorian() {
-        return GREGORIAN_TYPE;
-    }
-
-    /**
-     * Get the Julian chronology type.
-     * <p>
-     * {@link JulianChronology} defines all fields using standard meanings.
-     * It uses the Julian calendar rules <i>for all time</i> (proleptic).
-     * The Julian calendar system defines a leap year every four years.
-     *
-     * @return the ChronologyType constant
-     */
-    public static ChronologyType julian() {
-        return JULIAN_TYPE;
-    }
-
-    /**
-     * Get the Buddhist chronology type.
-     * <p>
-     * {@link BuddhistChronology} defines all fields using standard meanings,
-     * however the year is offset by 543. The chronology cannot be used before
-     * year 1 in the Buddhist calendar.
-     *
-     * @return the ChronologyType constant
-     */
-    public static ChronologyType buddhist() {
-        return BUDDHIST_TYPE;
-    }
-
-    /**
-     * Get the Coptic chronology type.
-     * <p>
-     * {@link CopticChronology} defines fields sensibly for the Coptic calendar system.
-     * The Coptic calendar system defines every fourth year as leap.
-     * The year is broken down into 12 months, each 30 days in length.
-     * An extra period at the end of the year is either 5 or 6 days in length
-     * and is returned as a 13th month.
-     * Year 1 in the Coptic calendar began on August 29, 284 CE (Julian).
-     * The chronology cannot be used before the first Coptic year.
-     *
-     * @return the ChronologyType constant
-     */
-    public static ChronologyType coptic() {
-        return COPTIC_TYPE;
-    }
-
-    /**
-     * Get the Ethiopic chronology type.
-     * <p>
-     * {@link EthiopicChronology} defines fields sensibly for the Ethiopic calendar system.
-     * The Ethiopic calendar system defines every fourth year as leap.
-     * The year is broken down into 12 months, each 30 days in length.
-     * An extra period at the end of the year is either 5 or 6 days in length
-     * and is returned as a 13th month.
-     * Year 1 in the Coptic calendar began on August 29, 8 CE (Julian).
-     * The chronology cannot be used before the first Ethiopic year.
-     *
-     * @return the ChronologyType constant
-     */
-    public static ChronologyType ethiopic() {
-        return ETHIOPIC_TYPE;
-    }
-
-    //-----------------------------------------------------------------------
-    /**
-     * Get the id of the chronology.
-     * 
-     * @return the id of the chronology
-     */
-    public String getID() {
-        return iID;
-    }
-
-    /**
-     * Get an instance of the Chronology in the default time zone.
-     * 
-     * @return the Chronology
-     */
-    public Chronology getChronology() {
-        return getChronology(null);
-    }
-
-    /**
-     * Get an instance of the Chronology in the UTC time zone.
-     * 
-     * @return the Chronology
-     */
-    public Chronology getChronologyUTC() {
-        return getChronology(DateTimeZone.UTC);
-    }
-
-    /**
-     * Get an instance of the Chronology in the specified time zone.
-     * 
-     * @param zone  the time zone, null means default
-     */
-    public abstract Chronology getChronology(DateTimeZone zone);
-
-    /**
-     * Gets the chronology as a string, which is simply its id.
-     *
-     * @return the id of the chronology
-     */
-    public String toString() {
-        return getID();
-    }
-
-    //-----------------------------------------------------------------------
-    private static class StandardChronologyType extends ChronologyType {
-        /** Serialization version */
-        private static final long serialVersionUID = -562289176239L;
-
-        /** The ordinal of the standard field type, for switch statements */
-        private final byte iOrdinal;
-
-        /**
-         * Constructor.
-         */
-        StandardChronologyType(String id, byte ordinal) {
-            super(id);
-            iOrdinal = ordinal;
-        }
-
-        /** @inheritdoc */
-        public Chronology getChronology(DateTimeZone zone) {
-            switch (iOrdinal) {
-                case ISO:
-                    return ISOChronology.getInstance(zone);
-                case GJ:
-                    return GJChronology.getInstance(zone);
-                case GREGORIAN:
-                    return GregorianChronology.getInstance(zone);
-                case JULIAN:
-                    return JulianChronology.getInstance(zone);
-                case BUDDHIST:
-                    return BuddhistChronology.getInstance(zone);
-                case COPTIC:
-                    return CopticChronology.getInstance(zone);
-                case ETHIOPIC:
-                    return EthiopicChronology.getInstance(zone);
-                default:
-                    // Shouldn't happen.
-                    throw new InternalError();
-            }
-        }
-
-        /**
-         * Ensure a singleton is returned.
-         * 
-         * @return the singleton type
-         */
-        private Object readResolve() {
-        	return (ChronologyType) forID(getID());
-        }
-    }
-
-}
diff --git a/JodaTime/src/java/org/joda/time/DateMidnight.java b/JodaTime/src/java/org/joda/time/DateMidnight.java
index fb9f783e7..2e4bf7c7c 100644
--- a/JodaTime/src/java/org/joda/time/DateMidnight.java
+++ b/JodaTime/src/java/org/joda/time/DateMidnight.java
@@ -317,33 +317,6 @@ public DateMidnight withChronology(Chronology newChronology) {
         return (newChronology == getChronology() ? this : new DateMidnight(getMillis(), newChronology));
     }
 
-    /**
-     * Gets a copy of this instant with a different chronology, potentially
-     * changing the day in unexpected ways.
-     * <p>
-     * This method creates a new DateMidnight using the midnight millisecond value
-     * and the new chronology. If the same or similar chronology is specified, but
-     * with a different time zone, the day may change. This occurs because the new
-     * DateMidnight rounds down the millisecond value to get to midnight, and the
-     * time zone change may result in a rounding down to a different day.
-     * <p>
-     * For example, changing time zone from London (+00:00) to Paris (+01:00) will
-     * retain the same day, but changing from Paris to London will change the day.
-     * (When its midnight in London its the same day in Paris, but when its midnight
-     * in Paris its still the previous day in London)
-     * <p>
-     * To avoid these unusual effects, use {@link #withZoneRetainFields(DateTimeZone)}
-     * to change time zones.
-     *
-     * @param newChronologyType  the new chronology type, null means ISO
-     * @return a copy of this datetime with a different chronology
-     */
-    public DateMidnight withChronologyType(ChronologyType newChronologyType) {
-        newChronologyType = DateTimeUtils.getChronologyType(newChronologyType);
-        return (newChronologyType == getChronologyType() ? this :
-            new DateMidnight(getMillis(), newChronologyType.getChronology(getZone())));
-    }
-
     /**
      * Gets a copy of this instant with a different time zone, preserving the day
      * The returned object will have a local time of midnight in the new zone on
diff --git a/JodaTime/src/java/org/joda/time/DateTime.java b/JodaTime/src/java/org/joda/time/DateTime.java
index e2b2af00c..95771c99f 100644
--- a/JodaTime/src/java/org/joda/time/DateTime.java
+++ b/JodaTime/src/java/org/joda/time/DateTime.java
@@ -363,21 +363,6 @@ public DateTime withChronology(Chronology newChronology) {
         return (newChronology == getChronology() ? this : new DateTime(getMillis(), newChronology));
     }
 
-    /**
-     * Gets a copy of this datetime with a different chronology.
-     * <p>
-     * The returned object will be either be a new instance or <code>this</code>.
-     * Only the chronology will change, the millis and time zone are kept.
-     *
-     * @param newChronologyType  the new chronology type, null means ISO
-     * @return a copy of this datetime with a different chronology
-     */
-    public DateTime withChronologyType(ChronologyType newChronologyType) {
-        newChronologyType = DateTimeUtils.getChronologyType(newChronologyType);
-        return (newChronologyType == getChronologyType() ? this :
-            new DateTime(getMillis(), newChronologyType.getChronology(getZone())));
-    }
-
     //-----------------------------------------------------------------------
     /**
      * Gets a copy of this datetime with a different time zone, preserving the
diff --git a/JodaTime/src/java/org/joda/time/DateTimeUtils.java b/JodaTime/src/java/org/joda/time/DateTimeUtils.java
index d936ed718..8a84d83bd 100644
--- a/JodaTime/src/java/org/joda/time/DateTimeUtils.java
+++ b/JodaTime/src/java/org/joda/time/DateTimeUtils.java
@@ -234,23 +234,6 @@ public static final Chronology getChronology(Chronology chrono) {
         return chrono;
     }
 
-    //-----------------------------------------------------------------------
-    /**
-     * Gets the chronology type handling null.
-     * <p>
-     * If the chronology type is <code>null</code>, {@link ChronologyType#iso()}
-     * will be returned. Otherwise, the chronology type is returned.
-     * 
-     * @param type  the chronology type to use, null means ISO
-     * @return the chronology type, never null
-     */
-    public static final ChronologyType getChronologyType(ChronologyType type) {
-        if (type == null) {
-            return ChronologyType.iso();
-        }
-        return type;
-    }
-
     //-----------------------------------------------------------------------
     /**
      * Gets the zone handling null.
diff --git a/JodaTime/src/java/org/joda/time/Instant.java b/JodaTime/src/java/org/joda/time/Instant.java
index 467b9ec86..f63a3217b 100644
--- a/JodaTime/src/java/org/joda/time/Instant.java
+++ b/JodaTime/src/java/org/joda/time/Instant.java
@@ -18,6 +18,7 @@
 import java.io.Serializable;
 
 import org.joda.time.base.AbstractInstant;
+import org.joda.time.chrono.ISOChronology;
 import org.joda.time.convert.ConverterManager;
 import org.joda.time.convert.InstantConverter;
 
@@ -86,7 +87,7 @@ public Instant(long instant) {
     public Instant(Object instant) {
         super();
         InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
-        iMillis = converter.getInstantMillis(instant, ChronologyType.iso().getChronologyUTC());
+        iMillis = converter.getInstantMillis(instant, ISOChronology.getInstanceUTC());
     }
 
     //-----------------------------------------------------------------------
@@ -217,7 +218,7 @@ public long getMillis() {
      * @return ISO in the UTC zone
      */
     public Chronology getChronology() {
-        return ChronologyType.iso().getChronologyUTC();
+        return ISOChronology.getInstanceUTC();
     }
 
 }
diff --git a/JodaTime/src/java/org/joda/time/MutableDateTime.java b/JodaTime/src/java/org/joda/time/MutableDateTime.java
index 5b8ecdaed..0e4782299 100644
--- a/JodaTime/src/java/org/joda/time/MutableDateTime.java
+++ b/JodaTime/src/java/org/joda/time/MutableDateTime.java
@@ -490,21 +490,6 @@ public void setChronology(Chronology chronology) {
         super.setChronology(chronology);
     }
 
-    /**
-     * Set the chronology of the datetime.
-     * <p>
-     * This method does not affect the millis or the zone.
-     * The chronology is only changed if the type is different.
-     *
-     * @param type  the type to use, null means ISO
-     */
-    public void setChronologyType(ChronologyType type) {
-        type = DateTimeUtils.getChronologyType(type);
-        if (type != getChronologyType()) {
-            setChronology(type.getChronology(getZone()));
-        }
-    }
-
     //-----------------------------------------------------------------------
     /**
      * Sets the time zone of the datetime, changing the chronology and field values.
diff --git a/JodaTime/src/java/org/joda/time/TimeOfDay.java b/JodaTime/src/java/org/joda/time/TimeOfDay.java
index d6c8c6d84..e8d3a1e68 100644
--- a/JodaTime/src/java/org/joda/time/TimeOfDay.java
+++ b/JodaTime/src/java/org/joda/time/TimeOfDay.java
@@ -19,6 +19,7 @@
 import java.util.Locale;
 
 import org.joda.time.base.BasePartial;
+import org.joda.time.chrono.ISOChronology;
 import org.joda.time.field.AbstractPartialFieldProperty;
 import org.joda.time.field.FieldUtils;
 import org.joda.time.format.ISODateTimeFormat;
@@ -139,7 +140,7 @@ public TimeOfDay() {
      * @since 1.1
      */
     public TimeOfDay(DateTimeZone zone) {
-        super(ChronologyType.iso().getChronology(zone));
+        super(ISOChronology.getInstance(zone));
     }
 
     /**
diff --git a/JodaTime/src/java/org/joda/time/YearMonthDay.java b/JodaTime/src/java/org/joda/time/YearMonthDay.java
index d3a5b1ce7..52072f017 100644
--- a/JodaTime/src/java/org/joda/time/YearMonthDay.java
+++ b/JodaTime/src/java/org/joda/time/YearMonthDay.java
@@ -19,6 +19,7 @@
 import java.util.Locale;
 
 import org.joda.time.base.BasePartial;
+import org.joda.time.chrono.ISOChronology;
 import org.joda.time.field.AbstractPartialFieldProperty;
 import org.joda.time.field.FieldUtils;
 import org.joda.time.format.ISODateTimeFormat;
@@ -98,7 +99,7 @@ public YearMonthDay() {
      * @since 1.1
      */
     public YearMonthDay(DateTimeZone zone) {
-        super(ChronologyType.iso().getChronology(zone));
+        super(ISOChronology.getInstance(zone));
     }
 
     /**
diff --git a/JodaTime/src/java/org/joda/time/base/AbstractDateTime.java b/JodaTime/src/java/org/joda/time/base/AbstractDateTime.java
index 26c568e4d..f867c78a5 100644
--- a/JodaTime/src/java/org/joda/time/base/AbstractDateTime.java
+++ b/JodaTime/src/java/org/joda/time/base/AbstractDateTime.java
@@ -21,7 +21,6 @@
 import java.util.Locale;
 import java.util.TimeZone;
 
-import org.joda.time.ChronologyType;
 import org.joda.time.DateTimeFieldType;
 import org.joda.time.DateTimeZone;
 import org.joda.time.ReadableDateTime;
@@ -55,16 +54,6 @@ protected AbstractDateTime() {
         super();
     }
 
-    //-----------------------------------------------------------------------
-    /**
-     * Gets the type of the chronology.
-     *
-     * @return the type of the chronology
-     */
-    public ChronologyType getChronologyType() {
-        return getChronology().getType();
-    }
-
     //-----------------------------------------------------------------------
     /**
      * Get the value of one of the fields of a datetime.
diff --git a/JodaTime/src/java/org/joda/time/base/BaseInterval.java b/JodaTime/src/java/org/joda/time/base/BaseInterval.java
index 99e516bf7..d9648ec08 100644
--- a/JodaTime/src/java/org/joda/time/base/BaseInterval.java
+++ b/JodaTime/src/java/org/joda/time/base/BaseInterval.java
@@ -18,7 +18,6 @@
 import java.io.Serializable;
 
 import org.joda.time.Chronology;
-import org.joda.time.ChronologyType;
 import org.joda.time.DateTimeUtils;
 import org.joda.time.MutableInterval;
 import org.joda.time.ReadWritableInterval;
@@ -26,6 +25,7 @@
 import org.joda.time.ReadableInstant;
 import org.joda.time.ReadableInterval;
 import org.joda.time.ReadablePeriod;
+import org.joda.time.chrono.ISOChronology;
 import org.joda.time.convert.ConverterManager;
 import org.joda.time.convert.IntervalConverter;
 import org.joda.time.field.FieldUtils;
@@ -86,7 +86,7 @@ protected BaseInterval(ReadableInstant start, ReadableInstant end) {
         super();
         if (start == null && end == null) {
             iStartMillis = iEndMillis = DateTimeUtils.currentTimeMillis();
-            iChronology = ChronologyType.iso().getChronology();
+            iChronology = ISOChronology.getInstance();
         } else {
             iChronology = DateTimeUtils.getInstantChronology(start);
             iStartMillis = DateTimeUtils.getInstantMillis(start);
diff --git a/JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java b/JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java
index 93c6a12eb..734a4031c 100644
--- a/JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java
@@ -19,7 +19,6 @@
 import java.util.Map;
 
 import org.joda.time.Chronology;
-import org.joda.time.ChronologyType;
 import org.joda.time.DateTime;
 import org.joda.time.DateTimeConstants;
 import org.joda.time.DateTimeField;
@@ -137,17 +136,6 @@ private Object readResolve() {
         return base == null ? getInstanceUTC() : getInstance(base.getZone());
     }
 
-    //-----------------------------------------------------------------------
-    /**
-     * Returns the ChronologyType constant for this Chronology.
-     *
-     * @return the chronology type
-     * @since 1.2
-     */
-    public ChronologyType getType() {
-        return ChronologyType.buddhist();
-    }
-
     // Conversion
     //-----------------------------------------------------------------------
     /**
diff --git a/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java b/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java
index b69c79dd5..d0491648b 100644
--- a/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java
@@ -19,7 +19,6 @@
 import java.util.Map;
 
 import org.joda.time.Chronology;
-import org.joda.time.ChronologyType;
 import org.joda.time.DateTime;
 import org.joda.time.DateTimeConstants;
 import org.joda.time.DateTimeField;
@@ -175,17 +174,6 @@ private Object readResolve() {
         return base == null ? getInstanceUTC() : getInstance(base.getZone());
     }
 
-    //-----------------------------------------------------------------------
-    /**
-     * Returns the ChronologyType constant for this Chronology.
-     *
-     * @return the chronology type
-     * @since 1.2
-     */
-    public ChronologyType getType() {
-        return ChronologyType.coptic();
-    }
-
     // Conversion
     //-----------------------------------------------------------------------
     /**
diff --git a/JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java b/JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java
index 51c192fc2..47b0e16f5 100644
--- a/JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java
@@ -19,7 +19,6 @@
 import java.util.Map;
 
 import org.joda.time.Chronology;
-import org.joda.time.ChronologyType;
 import org.joda.time.DateTime;
 import org.joda.time.DateTimeConstants;
 import org.joda.time.DateTimeField;
@@ -175,16 +174,6 @@ private Object readResolve() {
         return base == null ? getInstanceUTC() : getInstance(base.getZone());
     }
 
-    //-----------------------------------------------------------------------
-    /**
-     * Returns the ChronologyType constant for this Chronology.
-     *
-     * @return the chronology type
-     */
-    public ChronologyType getType() {
-        return ChronologyType.ethiopic();
-    }
-
     // Conversion
     //-----------------------------------------------------------------------
     /**
diff --git a/JodaTime/src/java/org/joda/time/chrono/GJChronology.java b/JodaTime/src/java/org/joda/time/chrono/GJChronology.java
index 72fe71d7a..411a4c689 100644
--- a/JodaTime/src/java/org/joda/time/chrono/GJChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/GJChronology.java
@@ -21,7 +21,6 @@
 import java.util.Map;
 
 import org.joda.time.Chronology;
-import org.joda.time.ChronologyType;
 import org.joda.time.DateTimeField;
 import org.joda.time.DateTimeUtils;
 import org.joda.time.DateTimeZone;
@@ -296,17 +295,6 @@ public DateTimeZone getZone() {
         return DateTimeZone.UTC;
     }
 
-    //-----------------------------------------------------------------------
-    /**
-     * Returns the ChronologyType constant for this Chronology.
-     *
-     * @return the chronology type
-     * @since 1.2
-     */
-    public ChronologyType getType() {
-        return ChronologyType.gj();
-    }
-
     // Conversion
     //-----------------------------------------------------------------------
     /**
diff --git a/JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java b/JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java
index 5165e225e..c8956da99 100644
--- a/JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java
@@ -19,7 +19,6 @@
 import java.util.Map;
 
 import org.joda.time.Chronology;
-import org.joda.time.ChronologyType;
 import org.joda.time.DateTimeConstants;
 import org.joda.time.DateTimeZone;
 
@@ -160,17 +159,6 @@ private Object readResolve() {
         return base == null ? getInstanceUTC() : getInstance(base.getZone());
     }
 
-    //-----------------------------------------------------------------------
-    /**
-     * Returns the ChronologyType constant for this Chronology.
-     *
-     * @return the chronology type
-     * @since 1.2
-     */
-    public ChronologyType getType() {
-        return ChronologyType.gregorian();
-    }
-
     // Conversion
     //-----------------------------------------------------------------------
     /**
diff --git a/JodaTime/src/java/org/joda/time/chrono/ISOChronology.java b/JodaTime/src/java/org/joda/time/chrono/ISOChronology.java
index cd5c93afe..34db26da4 100644
--- a/JodaTime/src/java/org/joda/time/chrono/ISOChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/ISOChronology.java
@@ -23,7 +23,6 @@
 import java.util.Map;
 
 import org.joda.time.Chronology;
-import org.joda.time.ChronologyType;
 import org.joda.time.DateTimeFieldType;
 import org.joda.time.DateTimeZone;
 import org.joda.time.field.DividedDateTimeField;
@@ -123,17 +122,6 @@ private ISOChronology(Chronology base) {
         super(base, null);
     }
 
-    //-----------------------------------------------------------------------
-    /**
-     * Returns the ChronologyType constant for this Chronology.
-     *
-     * @return the chronology type
-     * @since 1.2
-     */
-    public ChronologyType getType() {
-        return ChronologyType.iso();
-    }
-
     // Conversion
     //-----------------------------------------------------------------------
     /**
diff --git a/JodaTime/src/java/org/joda/time/chrono/JulianChronology.java b/JodaTime/src/java/org/joda/time/chrono/JulianChronology.java
index 88e214032..4ca81769a 100644
--- a/JodaTime/src/java/org/joda/time/chrono/JulianChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/JulianChronology.java
@@ -19,7 +19,6 @@
 import java.util.Map;
 
 import org.joda.time.Chronology;
-import org.joda.time.ChronologyType;
 import org.joda.time.DateTimeConstants;
 import org.joda.time.DateTimeFieldType;
 import org.joda.time.DateTimeZone;
@@ -174,17 +173,6 @@ private Object readResolve() {
         return base == null ? getInstanceUTC() : getInstance(base.getZone());
     }
 
-    //-----------------------------------------------------------------------
-    /**
-     * Returns the ChronologyType constant for this Chronology.
-     *
-     * @return the chronology type
-     * @since 1.2
-     */
-    public ChronologyType getType() {
-        return ChronologyType.julian();
-    }
-
     // Conversion
     //-----------------------------------------------------------------------
     /**
diff --git a/JodaTime/src/java/org/joda/time/chrono/package.html b/JodaTime/src/java/org/joda/time/chrono/package.html
index a42f985ef..ddb47eb64 100644
--- a/JodaTime/src/java/org/joda/time/chrono/package.html
+++ b/JodaTime/src/java/org/joda/time/chrono/package.html
@@ -22,13 +22,13 @@
 </head>
 <body>
 <p>
-Implementation package providing the Chronology implementaions.
+Package containing the chronology classes which define the calendar systems.
 </p>
 <p>
 This package contains all of the chronology implementations within the library.
 It also contains all of the specialised field implementations.
-Most applications will create chronologies using the static factory methods on
-the ChronologyType class in the main package.
+Applications will create chronologies using the static factory methods on
+each specific Chronology class - getInstance.
 </p>
 </body>
 </html>
diff --git a/JodaTime/src/java/org/joda/time/convert/AbstractConverter.java b/JodaTime/src/java/org/joda/time/convert/AbstractConverter.java
index 5b89d5633..cfd4e8ed6 100644
--- a/JodaTime/src/java/org/joda/time/convert/AbstractConverter.java
+++ b/JodaTime/src/java/org/joda/time/convert/AbstractConverter.java
@@ -16,11 +16,11 @@
 package org.joda.time.convert;
 
 import org.joda.time.Chronology;
-import org.joda.time.ChronologyType;
 import org.joda.time.DateTimeUtils;
 import org.joda.time.DateTimeZone;
 import org.joda.time.PeriodType;
 import org.joda.time.ReadablePartial;
+import org.joda.time.chrono.ISOChronology;
 
 /**
  * AbstractConverter simplifies the process of implementing a converter.
@@ -63,7 +63,7 @@ public long getInstantMillis(Object object, Chronology chrono) {
      * @return the chronology, never null
      */
     public Chronology getChronology(Object object, DateTimeZone zone) {
-        return ChronologyType.iso().getChronology(zone);
+        return ISOChronology.getInstance(zone);
     }
 
     /**
diff --git a/JodaTime/src/java/org/joda/time/convert/CalendarConverter.java b/JodaTime/src/java/org/joda/time/convert/CalendarConverter.java
index 9aaf111ab..2c675674a 100644
--- a/JodaTime/src/java/org/joda/time/convert/CalendarConverter.java
+++ b/JodaTime/src/java/org/joda/time/convert/CalendarConverter.java
@@ -19,11 +19,11 @@
 import java.util.GregorianCalendar;
 
 import org.joda.time.Chronology;
-import org.joda.time.ChronologyType;
 import org.joda.time.DateTimeZone;
 import org.joda.time.chrono.BuddhistChronology;
 import org.joda.time.chrono.GJChronology;
 import org.joda.time.chrono.GregorianChronology;
+import org.joda.time.chrono.ISOChronology;
 import org.joda.time.chrono.JulianChronology;
 
 /**
@@ -104,7 +104,7 @@ public Chronology getChronology(Object object, DateTimeZone zone) {
                 return GJChronology.getInstance(zone, cutover, 4);
             }
         } else {
-            return ChronologyType.iso().getChronology(zone);
+            return ISOChronology.getInstance(zone);
         }
     }
 
diff --git a/JodaTime/src/test/org/joda/time/TestAll.java b/JodaTime/src/test/org/joda/time/TestAll.java
index 3715c1913..c87269298 100644
--- a/JodaTime/src/test/org/joda/time/TestAll.java
+++ b/JodaTime/src/test/org/joda/time/TestAll.java
@@ -35,7 +35,6 @@ public TestAll(String testName) {
     public static Test suite() {
         TestSuite suite = new TestSuite();
         suite.addTest(TestChronology.suite());
-        suite.addTest(TestChronologyType.suite());
         suite.addTest(TestDateTimeFieldType.suite());
         suite.addTest(TestDurationFieldType.suite());
         
diff --git a/JodaTime/src/test/org/joda/time/TestChronologyType.java b/JodaTime/src/test/org/joda/time/TestChronologyType.java
deleted file mode 100644
index 66db96525..000000000
--- a/JodaTime/src/test/org/joda/time/TestChronologyType.java
+++ /dev/null
@@ -1,191 +0,0 @@
-/*
- *  Copyright 2001-2005 Stephen Colebourne
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.joda.time;
-
-import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
-import java.io.ObjectInputStream;
-import java.io.ObjectOutputStream;
-import java.lang.reflect.Constructor;
-import java.util.Set;
-
-import junit.framework.TestCase;
-import junit.framework.TestSuite;
-
-import org.joda.time.chrono.BuddhistChronology;
-import org.joda.time.chrono.CopticChronology;
-import org.joda.time.chrono.EthiopicChronology;
-import org.joda.time.chrono.GJChronology;
-import org.joda.time.chrono.GregorianChronology;
-import org.joda.time.chrono.ISOChronology;
-import org.joda.time.chrono.JulianChronology;
-
-/**
- * This class is a Junit unit test for ChronologyType.
- *
- * @author Stephen Colebourne
- */
-public class TestChronologyType extends TestCase {
-
-    private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
-
-    public static void main(String[] args) {
-        junit.textui.TestRunner.run(suite());
-    }
-
-    public static TestSuite suite() {
-        return new TestSuite(TestChronologyType.class);
-    }
-
-    public TestChronologyType(String name) {
-        super(name);
-    }
-
-    protected void setUp() throws Exception {
-    }
-
-    protected void tearDown() throws Exception {
-    }
-
-    //-----------------------------------------------------------------------
-    public void test_forName() throws Exception {
-        assertSame(ChronologyType.iso(), ChronologyType.forID("ISO"));
-        assertSame(null, ChronologyType.forID("rubbish"));
-        assertSame(null, ChronologyType.forID(""));
-        assertSame(null, ChronologyType.forID(null));
-    }
-
-    //-----------------------------------------------------------------------
-    public void test_getAvailableIDs() throws Exception {
-        Set set = ChronologyType.getAvailableIDs();
-        assertEquals(7, set.size());
-        assertEquals(true, set.contains("ISO"));
-        assertEquals(true, set.contains("GJ"));
-        assertEquals(true, set.contains("Gregorian"));
-        assertEquals(true, set.contains("Julian"));
-        assertEquals(true, set.contains("Buddhist"));
-        assertEquals(true, set.contains("Coptic"));
-        assertEquals(true, set.contains("Ethiopic"));
-    }
-
-    //-----------------------------------------------------------------------
-    public void test_iso() throws Exception {
-        assertEquals(ChronologyType.iso(), ChronologyType.iso());
-        assertEquals("ISO", ChronologyType.iso().getID());
-        assertEquals(ISOChronology.getInstance(), ChronologyType.iso().getChronology());
-        assertEquals(ISOChronology.getInstanceUTC(), ChronologyType.iso().getChronologyUTC());
-        assertEquals(ISOChronology.getInstance(PARIS), ChronologyType.iso().getChronology(PARIS));
-        assertEquals("ISO", ChronologyType.iso().toString());
-        assertSerialization(ChronologyType.iso());
-    }
-
-    public void test_gj() throws Exception {
-        assertEquals(ChronologyType.gj(), ChronologyType.gj());
-        assertEquals("GJ", ChronologyType.gj().getID());
-        assertEquals(GJChronology.getInstance(), ChronologyType.gj().getChronology());
-        assertEquals(GJChronology.getInstanceUTC(), ChronologyType.gj().getChronologyUTC());
-        assertEquals(GJChronology.getInstance(PARIS), ChronologyType.gj().getChronology(PARIS));
-        assertEquals("GJ", ChronologyType.gj().toString());
-        assertSerialization(ChronologyType.gj());
-    }
-
-    public void test_gregorian() throws Exception {
-        assertEquals(ChronologyType.gregorian(), ChronologyType.gregorian());
-        assertEquals("Gregorian", ChronologyType.gregorian().getID());
-        assertEquals(GregorianChronology.getInstance(), ChronologyType.gregorian().getChronology());
-        assertEquals(GregorianChronology.getInstanceUTC(), ChronologyType.gregorian().getChronologyUTC());
-        assertEquals(GregorianChronology.getInstance(PARIS), ChronologyType.gregorian().getChronology(PARIS));
-        assertEquals("Gregorian", ChronologyType.gregorian().toString());
-        assertSerialization(ChronologyType.gregorian());
-    }
-
-    public void test_julian() throws Exception {
-        assertEquals(ChronologyType.julian(), ChronologyType.julian());
-        assertEquals("Julian", ChronologyType.julian().getID());
-        assertEquals(JulianChronology.getInstance(), ChronologyType.julian().getChronology());
-        assertEquals(JulianChronology.getInstanceUTC(), ChronologyType.julian().getChronologyUTC());
-        assertEquals(JulianChronology.getInstance(PARIS), ChronologyType.julian().getChronology(PARIS));
-        assertEquals("Julian", ChronologyType.julian().toString());
-        assertSerialization(ChronologyType.julian());
-    }
-
-    public void test_buddhist() throws Exception {
-        assertEquals(ChronologyType.buddhist(), ChronologyType.buddhist());
-        assertEquals("Buddhist", ChronologyType.buddhist().getID());
-        assertEquals(BuddhistChronology.getInstance(), ChronologyType.buddhist().getChronology());
-        assertEquals(BuddhistChronology.getInstanceUTC(), ChronologyType.buddhist().getChronologyUTC());
-        assertEquals(BuddhistChronology.getInstance(PARIS), ChronologyType.buddhist().getChronology(PARIS));
-        assertEquals("Buddhist", ChronologyType.buddhist().toString());
-        assertSerialization(ChronologyType.buddhist());
-    }
-
-    public void test_coptic() throws Exception {
-        assertEquals(ChronologyType.coptic(), ChronologyType.coptic());
-        assertEquals("Coptic", ChronologyType.coptic().getID());
-        assertEquals(CopticChronology.getInstance(), ChronologyType.coptic().getChronology());
-        assertEquals(CopticChronology.getInstanceUTC(), ChronologyType.coptic().getChronologyUTC());
-        assertEquals(CopticChronology.getInstance(PARIS), ChronologyType.coptic().getChronology(PARIS));
-        assertEquals("Coptic", ChronologyType.coptic().toString());
-        assertSerialization(ChronologyType.coptic());
-    }
-
-    public void test_ethiopic() throws Exception {
-        assertEquals(ChronologyType.ethiopic(), ChronologyType.ethiopic());
-        assertEquals("Ethiopic", ChronologyType.ethiopic().getID());
-        assertEquals(EthiopicChronology.getInstance(), ChronologyType.ethiopic().getChronology());
-        assertEquals(EthiopicChronology.getInstanceUTC(), ChronologyType.ethiopic().getChronologyUTC());
-        assertEquals(EthiopicChronology.getInstance(PARIS), ChronologyType.ethiopic().getChronology(PARIS));
-        assertEquals("Ethiopic", ChronologyType.ethiopic().toString());
-        assertSerialization(ChronologyType.ethiopic());
-    }
-
-    public void test_other() throws Exception {
-        assertEquals(1, ChronologyType.class.getDeclaredClasses().length);
-        Class cls = ChronologyType.class.getDeclaredClasses()[0];
-        assertEquals(1, cls.getDeclaredConstructors().length);
-        Constructor con = cls.getDeclaredConstructors()[0];
-        Object[] params = new Object[] { "other", new Byte((byte) 128) };
-        ChronologyType type = (ChronologyType) con.newInstance(params);
-        
-        assertEquals("other", type.getID());
-        try {
-            type.getChronology(PARIS);
-            fail();
-        } catch (InternalError ex) {}
-        assertSerialization(type);   // same because of ID map
-    }
-
-    //-----------------------------------------------------------------------
-    private void assertSerialization(ChronologyType type) throws Exception {
-        ChronologyType result = doSerialization(type);
-        assertSame(type, result);
-    }
-
-    private ChronologyType doSerialization(ChronologyType type) throws Exception {
-        ByteArrayOutputStream baos = new ByteArrayOutputStream();
-        ObjectOutputStream oos = new ObjectOutputStream(baos);
-        oos.writeObject(type);
-        byte[] bytes = baos.toByteArray();
-        oos.close();
-        
-        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
-        ObjectInputStream ois = new ObjectInputStream(bais);
-        ChronologyType result = (ChronologyType) ois.readObject();
-        ois.close();
-        return result;
-    }
-
-}
diff --git a/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java b/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java
index 380688eb1..04f05e03f 100644
--- a/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java
@@ -200,7 +200,6 @@ public void testGetMethods() {
         DateMidnight test = new DateMidnight();
         
         assertEquals(ISOChronology.getInstance(), test.getChronology());
-        assertEquals(ChronologyType.iso(), test.getChronologyType());
         assertEquals(LONDON, test.getZone());
         assertEquals(TEST_TIME_NOW_LONDON, test.getMillis());
         
@@ -654,20 +653,6 @@ public void testWithChronology_Chronology() {
         assertSame(test, result);
     }
 
-    public void testWithChronologyType_ChronologyType() {
-        DateMidnight test = new DateMidnight(TEST_TIME1_UTC);
-        DateMidnight result = test.withChronologyType(ChronologyType.gregorian());
-        assertEquals(GregorianChronology.getInstance(LONDON), result.getChronology());
-        
-        test = new DateMidnight(TEST_TIME1_UTC, GregorianChronology.getInstance(PARIS));
-        result = test.withChronologyType(null);
-        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());
-        
-        test = new DateMidnight(TEST_TIME1_UTC);
-        result = test.withChronologyType(ChronologyType.iso());
-        assertSame(test, result);
-    }
-
     public void testWithZoneRetainFields_DateTimeZone() {
         DateMidnight test = new DateMidnight(TEST_TIME1_UTC);
         DateMidnight result = test.withZoneRetainFields(PARIS);
diff --git a/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java b/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java
index fcfe3aee0..1c0576306 100644
--- a/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java
+++ b/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java
@@ -351,12 +351,6 @@ public void testGetChronology_Chronology() {
         assertEquals(ISOChronology.getInstance(), DateTimeUtils.getChronology(null));
     }
 
-    //-----------------------------------------------------------------------
-    public void testGetChronologyType_ChronologyType() {
-        assertEquals(ChronologyType.buddhist(), DateTimeUtils.getChronologyType(ChronologyType.buddhist()));
-        assertEquals(ChronologyType.iso(), DateTimeUtils.getChronologyType(null));
-    }
-
     //-----------------------------------------------------------------------
     public void testGetZone_Zone() {
         assertEquals(PARIS, DateTimeUtils.getZone(PARIS));
diff --git a/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java b/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java
index ea7e681e3..bfa1cb25c 100644
--- a/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java
@@ -211,7 +211,6 @@ public void testGetMethods() {
         DateTime test = new DateTime();
         
         assertEquals(ISOChronology.getInstance(), test.getChronology());
-        assertEquals(ChronologyType.iso(), test.getChronologyType());
         assertEquals(LONDON, test.getZone());
         assertEquals(TEST_TIME_NOW, test.getMillis());
         
@@ -718,22 +717,6 @@ public void testWithChronology_Chronology() {
         assertSame(test, result);
     }
 
-    public void testWithChronologyType_ChronologyType() {
-        DateTime test = new DateTime(TEST_TIME1, PARIS);
-        DateTime result = test.withChronologyType(ChronologyType.gregorian());
-        assertEquals(test.getMillis(), result.getMillis());
-        assertEquals(GregorianChronology.getInstance(PARIS), result.getChronology());
-        
-        test = new DateTime(TEST_TIME1, GregorianChronology.getInstance(PARIS));
-        result = test.withChronologyType(null);
-        assertEquals(test.getMillis(), result.getMillis());
-        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());
-        
-        test = new DateTime(TEST_TIME1);
-        result = test.withChronologyType(ChronologyType.iso());
-        assertSame(test, result);
-    }
-
     public void testWithZone_DateTimeZone() {
         DateTime test = new DateTime(TEST_TIME1);
         DateTime result = test.withZone(PARIS);
diff --git a/JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java b/JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java
index ee6b46d91..180e59d7b 100644
--- a/JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java
@@ -182,7 +182,6 @@ public void testGetMethods() {
         MutableDateTime test = new MutableDateTime();
         
         assertEquals(ISOChronology.getInstance(), test.getChronology());
-        assertEquals(ChronologyType.iso(), test.getChronologyType());
         assertEquals(LONDON, test.getZone());
         assertEquals(TEST_TIME_NOW, test.getMillis());
         
diff --git a/JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java b/JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java
index 219377403..7ce9c8200 100644
--- a/JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java
+++ b/JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java
@@ -128,21 +128,6 @@ public void testSetChronology_Chronology2() {
         assertEquals(ISOChronology.getInstance(), test.getChronology());
     }
 
-    //-----------------------------------------------------------------------
-    public void testSetChronologyType_ChronologyType1() {
-        MutableDateTime test = new MutableDateTime(TEST_TIME1, PARIS);
-        test.setChronologyType(ChronologyType.gregorian());
-        assertEquals(TEST_TIME1, test.getMillis());
-        assertEquals(GregorianChronology.getInstance(PARIS), test.getChronology());
-    }        
-
-    public void testSetChronologyType_ChronologyType2() {
-        MutableDateTime test = new MutableDateTime(TEST_TIME1, PARIS);
-        test.setChronologyType(null);
-        assertEquals(TEST_TIME1, test.getMillis());
-        assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());
-    }
-
     //-----------------------------------------------------------------------
     public void testSetZone_DateTimeZone1() {
         MutableDateTime test = new MutableDateTime(TEST_TIME1);
diff --git a/JodaTime/xdocs/cal_ethiopic.xml b/JodaTime/xdocs/cal_ethiopic.xml
index 762e1c66d..f717019fe 100644
--- a/JodaTime/xdocs/cal_ethiopic.xml
+++ b/JodaTime/xdocs/cal_ethiopic.xml
@@ -43,7 +43,7 @@ References
 Within Joda-Time the Ethiopic calendar system can be used by obtaining an
 instance of <a href="apidocs/org/joda/time/chrono/EthiopicChronology.html">EthiopicChronology</a>.
 This is normally created via the
-<a href="apidocs/org/joda/time/ChronologyType.html#ethiopic()">ChronologyType.ethiopic()</a> factory.
+<a href="apidocs/org/joda/time/chrono/EthiopicChronology.html#getInstance()">EthiopicChronology.getInstance()</a> factory.
 The chronology is then passed into the constructors of the main date and time classes.
 </p>
 <source>
@@ -51,7 +51,7 @@ The chronology is then passed into the constructors of the main date and time cl
 DateTime dtISO = new DateTime(2004, 5, 1, 12, 0, 0, 0);
 
 // find out what the same instant is using the Ethiopic Chronology
-DateTime dtEthiopic = dtISO.withChronology(ChronologyType.ethiopic());
+DateTime dtEthiopic = dtISO.withChronology(EthiopicChronology.getInstance());
 </source>
 
 </section>

From b501bed838191e3fb64fca2eb3e62d0407861dc3 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 2 Nov 2005 21:52:58 +0000
Subject: [PATCH 071/130] Refactor abstract chronology classes to be package
 scoped and better named

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@928 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/java/org/joda/time/chrono/BaseGJChronology.java   | 5 +++--
 ...onthChronology.java => BasicFixedMonthChronology.java} | 6 +++---
 .../{CommonGJChronology.java => BasicGJChronology.java}   | 8 ++++----
 .../src/java/org/joda/time/chrono/CopticChronology.java   | 2 +-
 .../src/java/org/joda/time/chrono/EthiopicChronology.java | 2 +-
 .../java/org/joda/time/chrono/GregorianChronology.java    | 2 +-
 .../src/java/org/joda/time/chrono/JulianChronology.java   | 2 +-
 7 files changed, 14 insertions(+), 13 deletions(-)
 rename JodaTime/src/java/org/joda/time/chrono/{CommonFixedMonthChronology.java => BasicFixedMonthChronology.java} (96%)
 rename JodaTime/src/java/org/joda/time/chrono/{CommonGJChronology.java => BasicGJChronology.java} (96%)

diff --git a/JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java b/JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java
index e0e42bf35..ba3adc98e 100644
--- a/JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java
@@ -34,7 +34,8 @@
 import org.joda.time.field.RemainderDateTimeField;
 
 /**
- * Abstract Chronology for implementing chronologies based on Gregorian/Julian formulae.
+ * Abstract implementation for calendar systems that use a typical
+ * day/month/year/leapYear model.
  * Most of the utility methods required by subclasses are package-private,
  * reflecting the intention that they be defined in the same package.
  * <p>
@@ -46,7 +47,7 @@
  * @author Guy Allard
  * @since 1.0
  */
-public abstract class BaseGJChronology extends AssembledChronology {
+abstract class BaseGJChronology extends AssembledChronology {
 
     /** Serialization lock */
     private static final long serialVersionUID = 8283225332206808863L;
diff --git a/JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java b/JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java
similarity index 96%
rename from JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java
rename to JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java
index 92562f036..1bd6a728c 100644
--- a/JodaTime/src/java/org/joda/time/chrono/CommonFixedMonthChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java
@@ -30,14 +30,14 @@
  * This implementation assumes any additional days after twelve
  * months fall into a thirteenth month.
  * <p>
- * CommonFixedMonthChronology is thread-safe and immutable, and all
+ * BasicFixedMonthChronology is thread-safe and immutable, and all
  * subclasses must be as well.
  *
  * @author Brian S O'Neill
  * @author Stephen Colebourne
  * @since 1.2, refactored from CopticChronology
  */
-public abstract class CommonFixedMonthChronology extends BaseGJChronology {
+abstract class BasicFixedMonthChronology extends BaseGJChronology {
 
     /** Serialization lock */
     private static final long serialVersionUID = 261387371998L;
@@ -68,7 +68,7 @@
      * @param param  the init parameter
      * @param minDaysInFirstWeek  the minimum days in the first week
      */
-    CommonFixedMonthChronology(Chronology base, Object param, int minDaysInFirstWeek) {
+    BasicFixedMonthChronology(Chronology base, Object param, int minDaysInFirstWeek) {
         super(base, param, minDaysInFirstWeek);
     }
 
diff --git a/JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java b/JodaTime/src/java/org/joda/time/chrono/BasicGJChronology.java
similarity index 96%
rename from JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java
rename to JodaTime/src/java/org/joda/time/chrono/BasicGJChronology.java
index 677eaf27c..644bffd85 100644
--- a/JodaTime/src/java/org/joda/time/chrono/CommonGJChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/BasicGJChronology.java
@@ -25,15 +25,15 @@
  * Most of the utility methods required by subclasses are package-private,
  * reflecting the intention that they be defined in the same package.
  * <p>
- * CommonGJChronology is thread-safe and immutable, and all subclasses must
+ * BasicGJChronology is thread-safe and immutable, and all subclasses must
  * be as well.
  *
  * @author Stephen Colebourne
  * @author Brian S O'Neill
  * @author Guy Allard
- * @since 1.0
+ * @since 1.2, refactored from CommonGJChronology
  */
-public abstract class CommonGJChronology extends BaseGJChronology {
+abstract class BasicGJChronology extends BaseGJChronology {
 
     /** Serialization lock */
     private static final long serialVersionUID = 538276888268L;
@@ -73,7 +73,7 @@
     /**
      * Constructor.
      */
-    CommonGJChronology(Chronology base, Object param, int minDaysInFirstWeek) {
+    BasicGJChronology(Chronology base, Object param, int minDaysInFirstWeek) {
         super(base, param, minDaysInFirstWeek);
     }
 
diff --git a/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java b/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java
index d0491648b..c0f2ada5a 100644
--- a/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java
@@ -48,7 +48,7 @@
  * @author Brian S O'Neill
  * @since 1.0
  */
-public final class CopticChronology extends CommonFixedMonthChronology {
+public final class CopticChronology extends BasicFixedMonthChronology {
 
     /** Serialization lock */
     private static final long serialVersionUID = -5972804258688333942L;
diff --git a/JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java b/JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java
index 47b0e16f5..df073c452 100644
--- a/JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java
@@ -48,7 +48,7 @@
  * @author Stephen Colebourne
  * @since 1.2
  */
-public final class EthiopicChronology extends CommonFixedMonthChronology {
+public final class EthiopicChronology extends BasicFixedMonthChronology {
 
     /** Serialization lock */
     private static final long serialVersionUID = -5972804258688333942L;
diff --git a/JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java b/JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java
index c8956da99..d863dbe61 100644
--- a/JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java
@@ -42,7 +42,7 @@
  * @author Brian S O'Neill
  * @since 1.0
  */
-public final class GregorianChronology extends CommonGJChronology {
+public final class GregorianChronology extends BasicGJChronology {
 
     /** Serialization lock */
     private static final long serialVersionUID = -861407383323710522L;
diff --git a/JodaTime/src/java/org/joda/time/chrono/JulianChronology.java b/JodaTime/src/java/org/joda/time/chrono/JulianChronology.java
index 4ca81769a..5c8fc5082 100644
--- a/JodaTime/src/java/org/joda/time/chrono/JulianChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/JulianChronology.java
@@ -47,7 +47,7 @@
  * @author Stephen Colebourne
  * @since 1.0
  */
-public final class JulianChronology extends CommonGJChronology {
+public final class JulianChronology extends BasicGJChronology {
 
     /** Serialization lock */
     private static final long serialVersionUID = -8731039522547897247L;

From 7a57b8aa22b4392c103ee491e95af7d74b44378f Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 6 Nov 2005 13:46:51 +0000
Subject: [PATCH 072/130] Currency holiday information, originally for
 financial trading organisations donated by Scott R. Duchin

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@929 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../holiday/currency/AbstractChoice.java      |   46 +
 .../time/contrib/holiday/currency/Choice.java |   40 +
 .../contrib/holiday/currency/ChoiceList.java  |   46 +
 .../holiday/currency/CurrencyHoliday.java     | 1132 +++++++++++++++++
 .../time/contrib/holiday/currency/Date.java   |   37 +
 .../contrib/holiday/currency/DateFactory.java |   29 +
 .../contrib/holiday/currency/DateUtil.java    |   29 +
 .../time/contrib/holiday/currency/Month.java  |  194 +++
 .../holiday/currency/RawHolidayChoice.java    |   43 +
 .../currency/RawHolidayChoiceImpl.java        |  673 ++++++++++
 .../contrib/holiday/currency/Weekday.java     |  161 +++
 11 files changed, 2430 insertions(+)
 create mode 100644 JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/currency/AbstractChoice.java
 create mode 100644 JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/currency/Choice.java
 create mode 100644 JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/currency/ChoiceList.java
 create mode 100644 JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/currency/CurrencyHoliday.java
 create mode 100644 JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/currency/Date.java
 create mode 100644 JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/currency/DateFactory.java
 create mode 100644 JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/currency/DateUtil.java
 create mode 100644 JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/currency/Month.java
 create mode 100644 JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/currency/RawHolidayChoice.java
 create mode 100644 JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/currency/RawHolidayChoiceImpl.java
 create mode 100644 JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/currency/Weekday.java

diff --git a/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/currency/AbstractChoice.java b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/currency/AbstractChoice.java
new file mode 100644
index 000000000..575a8be6e
--- /dev/null
+++ b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/currency/AbstractChoice.java
@@ -0,0 +1,46 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.contrib.holiday.currency;
+
+/**
+ * Abstract choice implementation.
+ *
+ * @author Scott R. Duchin
+ */
+public abstract class AbstractChoice {
+
+    private final ChoiceList _choices;
+    private final String _label;
+
+    public AbstractChoice(ChoiceList list, String label) {
+        super();
+        _choices = list;
+        _label = label;
+    }
+
+    public Class choiceClass() {
+        return _choices.choiceClass();
+    }
+
+    public ChoiceList choiceList() {
+        return _choices;
+    }
+
+    public String getLabel() {
+        return _label;
+    }
+
+}
diff --git a/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/currency/Choice.java b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/currency/Choice.java
new file mode 100644
index 000000000..1113de9ba
--- /dev/null
+++ b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/currency/Choice.java
@@ -0,0 +1,40 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.contrib.holiday.currency;
+
+/**
+ * Choice interface.
+ *
+ * @author Scott R. Duchin
+ */
+public interface Choice {
+
+    /**
+     * 
+     */
+    String getLabel();
+
+    /**
+     * 
+     */
+    ChoiceList choiceList();
+
+    /**
+     * 
+     */
+    Class choiceClass();
+
+}
diff --git a/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/currency/ChoiceList.java b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/currency/ChoiceList.java
new file mode 100644
index 000000000..26654a4e7
--- /dev/null
+++ b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/currency/ChoiceList.java
@@ -0,0 +1,46 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.contrib.holiday.currency;
+
+import java.util.ArrayList;
+
+/**
+ * Choice list.
+ *
+ * @author Scott R. Duchin
+ */
+public class ChoiceList extends ArrayList<Choice> {
+
+    private final Class cls;
+
+    public static ChoiceList choiceList(Class cls) {
+        return new ChoiceList(cls);
+    }
+
+    public ChoiceList(Class cls) {
+        super();
+        this.cls = cls;
+    }
+
+    public RawHolidayChoice choice(String holi) {
+        return null;
+    }
+
+    public Class choiceClass() {
+        return cls;
+    }
+
+}
diff --git a/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/currency/CurrencyHoliday.java b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/currency/CurrencyHoliday.java
new file mode 100644
index 000000000..ee7e50743
--- /dev/null
+++ b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/currency/CurrencyHoliday.java
@@ -0,0 +1,1132 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.contrib.holiday.currency;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.TreeMap;
+import java.util.logging.Logger;
+
+/**
+ * Private class to hold weekend rules with holiday.
+ *
+ * @author Scott R. Duchin
+ */
+class CcyHoli implements RawHolidayChoice {
+
+    static final long serialVersionUID = 1001L;             // version 1 for serialization
+
+    // private fields
+    private RawHolidayChoice _rawHoli;   // raw holiday
+    private int                         _sat;               // saturday rule (days adjustment)
+    private int                         _sun;               // sunday rule (days adjustment)
+
+    /**
+     * Constructor.
+     * @param raw Raw holiday.
+     * @param sat Saturday adjustment.
+     * @param sun Sunday adjustment.
+     */
+    CcyHoli(RawHolidayChoice raw, int sat, int sun) {
+        _rawHoli = raw;
+        _sat = sat;
+        _sun = sun;
+    }
+
+    /**
+     * Returns the interface associated with this choice.
+     * @return The interface associated with this choice.
+     */
+    public Class choiceClass() {
+        return _rawHoli.choiceClass();
+    }
+
+    /**
+     * Returns the list containing this choice.
+     * @return The list containing this choice.
+     */
+    public ChoiceList choiceList() {
+        return _rawHoli.choiceList();
+    }
+
+    /**
+     * Returns the name associated with this choice.
+     * @return The name associated with this choice.
+     */
+    public String getLabel() {
+        return _rawHoli.getLabel();
+    }
+
+    /**
+     * Returns the date of the particular holiday for the specified year.
+     * Note: the holiday returned is pure; not adjusted for Saturday or Sunday local behavior.
+     * @param year Year the holiday is requested for.
+     * @return Date of holiday in specified year; <code>null</code> if no holiday in specified year.
+     */
+    public Date date(/*year*/int year) {
+        Date holi = _rawHoli.date(year);
+        if (holi != null) {
+            Weekday wkdy = holi.weekday();
+            if (_sun != 0 && wkdy.equals(Weekday.SUN)) {
+                holi = holi.addDays(_sun);
+            } else if (_sat != 0 && wkdy.equals(Weekday.SAT)) {
+                holi = holi.addDays(_sat);
+            }
+        }
+        return holi;
+    }
+
+    /**
+     * Returns a list of dates of the particular holiday for the specified years.
+     * Note: the holiday returned is pure; not adjusted for Saturday or Sunday local behavior.
+     * @param start Starting year.
+     * @param end   Ending year.
+     * @return List of dates of holidays in specified years, inclusive.
+     */
+    public List<Date> dates(/*year*/int start, /*year*/int end) {
+        List<Date> list = new ArrayList<Date>(end - start + 1);
+        for (/*year*/int year = start; year <= end; year++) {
+            list.add(date(year));
+        }
+        return list;
+    }
+}
+
+///////////////////////////////////////////////////////////////////////////////////////////////////
+
+/**
+ * The list of holidays per currency implementations.
+ *
+ * @author Scott R. Duchin
+ */
+public final class CurrencyHoliday {
+
+    // static variables
+    private static final Logger         _logger = Logger.getLogger("com.swvi.financial.instrument.CurrencyHoliday");
+
+    /**
+     * A map containing all currencies pointing to list of their corresponding holidays.
+     */
+    private static Map<String, Map<String, RawHolidayChoice>> _ccys =
+      Collections.synchronizedSortedMap(new TreeMap<String, Map<String, RawHolidayChoice>>());
+
+    /**
+     * Choice list of the raw holidays.
+     */
+    private static ChoiceList _raws =
+      ChoiceList.choiceList(RawHolidayChoiceImpl.klass());
+
+    /**
+     * Private constructor.
+     */
+    private CurrencyHoliday() {
+    }
+
+    /*
+     * Variable representing that a Saturday holiday is observed on Saturday.
+     */
+    private static final int ON_SAT = 0;
+    /*
+     * Variable representing that a Sunday holiday is observed on Sunday.
+     */
+    private static final int ON_SUN = 0;
+    /*
+     * Variable representing that a Saturday holiday is observed on Friday.
+     */
+    private static final int SAT_FRI = -1;
+    /*
+     * Variable representing that a Saturday holiday is observed on Monday.
+     */
+    private static final int SAT_MON = 2;
+    /*
+     * Variable representing that a Sunday holiday is observed on Monday.
+     */
+    private static final int SUN_MON = 1;
+    /*
+     * Variable representing that a Sunday holiday is observed on Tuesday.
+     */
+    private static final int SUN_TUE = 2;
+
+    /**
+     * Static initializer.
+     */
+    static {
+        // argentina peso
+        addHoliday("ARS", "Argentina Flag Day");
+        addHoliday("ARS", "Argentina Independence",         ON_SAT, ON_SUN);
+        addHoliday("ARS", "Argentina May Revolution",       ON_SAT, ON_SUN);
+        addHoliday("ARS", "Christmas",                      ON_SAT, ON_SUN);
+        addHoliday("ARS", "Columbus Day",                   ON_SAT, ON_SUN);
+        addHoliday("ARS", "Easter Monday");
+        addHoliday("ARS", "General San Martin Memorial");
+        addHoliday("ARS", "Good Friday");
+        addHoliday("ARS", "Holy Thursday");
+        addHoliday("ARS", "Immaculate Conception",          ON_SAT, ON_SUN);
+        addHoliday("ARS", "May Labour Day",                 ON_SAT, ON_SUN);
+        addHoliday("ARS", "New Year Day",                   ON_SAT, ON_SUN);
+        addHoliday("ARS", "New Year Eve",                   ON_SAT, ON_SUN);
+//      ARS 06/14/1999 Malvinas Day
+//      ARS 06/05/2000 Malvinas Day
+//      ARS 06/04/2001 Malvinas Day
+
+        // austria schilling
+        addHoliday("ATS", "All Saints Day",                 ON_SAT, ON_SUN);
+        addHoliday("ATS", "Ascension");
+        addHoliday("ATS", "Assumption",                     ON_SAT, ON_SUN);
+        addHoliday("ATS", "Austria National Day",           ON_SAT, ON_SUN);
+        addHoliday("ATS", "Boxing Day",                     ON_SAT, ON_SUN);
+        addHoliday("ATS", "Christmas",                      ON_SAT, ON_SUN);
+        addHoliday("ATS", "Corpus Christi");
+        addHoliday("ATS", "Easter Monday");
+        addHoliday("ATS", "Epiphany",                       ON_SAT, ON_SUN);
+//      addHoliday("ATS", "Good Friday");                                     // TODO: check if observed
+        addHoliday("ATS", "Immaculate Conception",          ON_SAT, ON_SUN);
+        addHoliday("ATS", "May Labour Day",                 ON_SAT, ON_SUN);
+        addHoliday("ATS", "New Year Day",                   ON_SAT, ON_SUN);
+        addHoliday("ATS", "Pentecost");
+
+        // australia dollar
+        addHoliday("AUD", "Anzac Day",                      ON_SAT, ON_SUN);
+        addHoliday("AUD", "Australia Day",                  ON_SAT, ON_SUN);
+        addHoliday("AUD", "Australia Labour Day",           ON_SAT, ON_SUN);
+        addHoliday("AUD", "Australia Queen Day");
+        addHoliday("AUD", "Autumn Bank Holiday");
+        addHoliday("AUD", "Boxing Day",                     ON_SAT, ON_SUN);
+        addHoliday("AUD", "Christmas",                      ON_SAT, ON_SUN);
+        addHoliday("AUD", "Easter Monday");
+        addHoliday("AUD", "Good Friday");
+//      addHoliday("AUD", "May Monday");                                      // TODO: check if observed
+        addHoliday("AUD", "New Year Day",                   SAT_MON, SUN_MON);
+
+        // barbados dollar
+        addHoliday("BBD", "Barbados Heroes Day",            ON_SAT, ON_SUN);
+        addHoliday("BBD", "Barbados Independence",          ON_SAT, ON_SUN);
+        addHoliday("BBD", "Boxing Day",                     ON_SAT, ON_SUN);
+        addHoliday("BBD", "Christmas",                      ON_SAT, ON_SUN);
+        addHoliday("BBD", "December Bank Holiday",          ON_SAT, ON_SUN);
+        addHoliday("BBD", "Errol Barrow Day",               ON_SAT, ON_SUN);
+        addHoliday("BBD", "Emancipation Day",               ON_SAT, ON_SUN);
+        addHoliday("BBD", "Good Friday");
+        addHoliday("BBD", "Kadooment Day",                  ON_SAT, ON_SUN);
+        addHoliday("BBD", "May Labour Day",                 ON_SAT, ON_SUN);
+        addHoliday("BBD", "New Year Day",                   ON_SAT, ON_SUN);
+
+        // belgium franc
+        addHoliday("BEF", "All Saints Day",                 ON_SAT, ON_SUN);
+        addHoliday("BEF", "Armistice Day",                  ON_SAT, ON_SUN);
+        addHoliday("BEF", "Ascension");
+        addHoliday("BEF", "Assumption",                     ON_SAT, ON_SUN);
+        addHoliday("BEF", "Belgium National Day",           ON_SAT, ON_SUN);
+        addHoliday("BEF", "Christmas",                      ON_SAT, ON_SUN);
+        addHoliday("BEF", "Easter Monday");
+        addHoliday("BEF", "May Labour Day",                 ON_SAT, ON_SUN);
+        addHoliday("BEF", "New Year Day",                   ON_SAT, ON_SUN);
+        addHoliday("BEF", "Pentecost");
+
+        // bermuda dollar
+        addHoliday("BMD", "Bermuda Cup Match");
+        addHoliday("BMD", "Bermuda Labour Day");
+        addHoliday("BMD", "Bermuda Queen Day");
+        addHoliday("BMD", "Bermuda Somers Day");
+        addHoliday("BMD", "Boxing Day",                     ON_SAT, ON_SUN);
+        addHoliday("BMD", "Christmas",                      ON_SAT, ON_SUN);
+        addHoliday("BMD", "Christmas Eve",                  ON_SAT, ON_SUN);
+        addHoliday("BMD", "Good Friday");
+        addHoliday("BMD", "Remembrance Day",                ON_SAT, ON_SUN);
+
+        // bolivia boliviano
+        addHoliday("BOB", "All Saints Day",                 ON_SAT, ON_SUN);
+        addHoliday("BOB", "Bolivia Independence",           ON_SAT, ON_SUN);
+        addHoliday("BOB", "Carnival Thursday");
+        addHoliday("BOB", "Carnival Wednesday");
+        addHoliday("BOB", "Christmas",                      ON_SAT, ON_SUN);
+        addHoliday("BOB", "Corpus Christi");
+        addHoliday("BOB", "Good Friday");
+        addHoliday("BOB", "La Paz",                         ON_SAT, ON_SUN);
+        addHoliday("BOB", "New Year Day",                   ON_SAT, ON_SUN);
+
+        // brazil real
+        addHoliday("BRL", "All Souls Day",                  ON_SAT, ON_SUN);
+        addHoliday("BRL", "Brazil Independence",            ON_SAT, ON_SUN);
+        addHoliday("BRL", "Carnival Monday");
+        addHoliday("BRL", "Carnival Tuesday");
+        addHoliday("BRL", "Christmas",                      ON_SAT, ON_SUN);
+        addHoliday("BRL", "Corpus Christi");
+        addHoliday("BRL", "Good Friday");
+        addHoliday("BRL", "May Labour Day",                 ON_SAT, ON_SUN);
+        addHoliday("BRL", "New Year Day",                   ON_SAT, ON_SUN);
+        addHoliday("BRL", "Nossa Senhora",                  ON_SAT, ON_SUN);
+        addHoliday("BRL", "Brazil Republic Day",            ON_SAT, ON_SUN);
+        addHoliday("BRL", "Tiradentes",                     ON_SAT, ON_SUN);
+
+        // bahamas dollar
+        addHoliday("BSD", "Bahamas Independence",           ON_SAT, ON_SUN);
+        addHoliday("BSD", "Bahamas Labour Day",             ON_SAT, ON_SUN);
+        addHoliday("BSD", "Boxing Day",                     ON_SAT, ON_SUN);
+        addHoliday("BSD", "Christmas",                      ON_SAT, ON_SUN);
+        addHoliday("BSD", "Columbus Day",                   ON_SAT, ON_SUN);
+        addHoliday("BSD", "Emancipation Monday");
+        addHoliday("BSD", "New Year Day",                   ON_SAT, ON_SUN);
+
+        // belize dollar
+        addHoliday("BZD", "Belize Emancipation",            ON_SAT, ON_SUN);
+        addHoliday("BZD", "Belize Independence",            ON_SAT, ON_SUN);
+        addHoliday("BZD", "Boxing Day",                     ON_SAT, ON_SUN);
+        addHoliday("BZD", "Christmas",                      ON_SAT, ON_SUN);
+        addHoliday("BZD", "Commonwealth Day",               ON_SAT, ON_SUN);
+        addHoliday("BZD", "December Bank Holiday",          ON_SAT, ON_SUN);
+        addHoliday("BZD", "Garifuna Day",                   ON_SAT, ON_SUN);
+        addHoliday("BZD", "May Labour Day",                 ON_SAT, ON_SUN);
+        addHoliday("BZD", "New Year Day",                   ON_SAT, ON_SUN);
+        addHoliday("BZD", "St. Georges Caye Day",           ON_SAT, ON_SUN);
+
+        // canada dollar
+        addHoliday("CAD", "Boxing Day",                     SAT_MON, SUN_MON);
+        addHoliday("CAD", "Canada Independence",            SAT_MON, SUN_MON);
+        addHoliday("CAD", "Canada Labour Day");
+        addHoliday("CAD", "Canada Thanksgiving Day");
+        addHoliday("CAD", "Christmas",                      SAT_FRI, SUN_TUE); // skip over boxing day on monday
+        addHoliday("CAD", "Easter Monday");
+        addHoliday("CAD", "Good Friday");
+        addHoliday("CAD", "New Year Day",                   ON_SAT, ON_SUN); // TODO: check this
+        addHoliday("CAD", "Remembrance Day",                ON_SAT, ON_SUN);
+        addHoliday("CAD", "Queen Victoria Day");
+
+        // switzerland franc
+        addHoliday("CHF", "Ascension");
+        addHoliday("CHF", "Assumption",                     ON_SAT, ON_SUN);
+        addHoliday("CHF", "Boxing Day",                     ON_SAT, ON_SUN);
+        addHoliday("CHF", "Christmas",                      ON_SAT, ON_SUN);
+        addHoliday("CHF", "Easter Monday");
+        addHoliday("CHF", "Good Friday");
+        addHoliday("CHF", "May Labour Day",                 ON_SAT, ON_SUN);
+        addHoliday("CHF", "New Year Day",                   ON_SAT, ON_SUN);
+        addHoliday("CHF", "New Year Day II",                ON_SAT, ON_SUN);
+        addHoliday("CHF", "New Year Eve",                   ON_SAT, ON_SUN);
+        addHoliday("CHF", "Pentecost");
+        addHoliday("CHF", "Swiss National Day",             ON_SAT, ON_SUN);
+
+        // chile peso
+        addHoliday("CLP", "All Saints Day",                 ON_SAT, ON_SUN);
+        addHoliday("CLP", "Assumption",                     ON_SAT, ON_SUN);
+        addHoliday("CLP", "Chile Army Day",                 ON_SAT, ON_SUN);
+        addHoliday("CLP", "Chile Commemoration Day",        ON_SAT, ON_SUN);
+        addHoliday("CLP", "Chile Marine Day",               ON_SAT, ON_SUN);
+        addHoliday("CLP", "Chile National Day",             ON_SAT, ON_SUN);
+        addHoliday("CLP", "Chile Unity Day",                ON_SAT, ON_SUN);
+        addHoliday("CLP", "Christmas",                      ON_SAT, ON_SUN);
+        addHoliday("CLP", "Columbus Day",                   ON_SAT, ON_SUN);
+        addHoliday("CLP", "Corpus Christi");
+        addHoliday("CLP", "Good Friday");
+        addHoliday("CLP", "Immaculate Conception",          ON_SAT, ON_SUN);
+        addHoliday("CLP", "May Labour Day",                 ON_SAT, ON_SUN);
+        addHoliday("CLP", "New Year Day",                   ON_SAT, ON_SUN);
+        addHoliday("CLP", "New Year Eve",                   ON_SAT, ON_SUN);
+
+        // columbia peso
+        addHoliday("COP", "All Saints Day",                 ON_SAT, ON_SUN);
+        addHoliday("COP", "Ascension");
+        addHoliday("COP", "Assumption",                     ON_SAT, ON_SUN);
+        addHoliday("COP", "Battle of Boyaca Day",           ON_SAT, ON_SUN);
+        addHoliday("COP", "Christmas",                      ON_SAT, ON_SUN);
+        addHoliday("COP", "Columbia Independence",          ON_SAT, ON_SUN);
+        addHoliday("COP", "Columbus Day",                   ON_SAT, ON_SUN);
+        addHoliday("COP", "Corpus Christi");
+        addHoliday("COP", "Epiphany",                       ON_SAT, ON_SUN);
+        addHoliday("COP", "Friendship Day",                 ON_SAT, ON_SUN);
+        addHoliday("COP", "Good Friday");
+        addHoliday("COP", "Holy Thursday");
+        addHoliday("COP", "Immaculate Conception",          ON_SAT, ON_SUN);
+        addHoliday("COP", "May Labour Day",                 ON_SAT, ON_SUN);
+        addHoliday("COP", "New Year Day",                   ON_SAT, ON_SUN); // TODO: check this
+        addHoliday("COP", "St. Josephs Day",                ON_SAT, ON_SUN);
+        addHoliday("COP", "St. Peter & St. Paul Day",       ON_SAT, ON_SUN);
+
+        // costa rica colon
+        addHoliday("CRC", "Assumption",                     ON_SAT, ON_SUN);
+        addHoliday("CRC", "Christmas",                      ON_SAT, ON_SUN);
+        addHoliday("CRC", "Christmas VI",                   ON_SAT, ON_SUN);
+        addHoliday("CRC", "Christmas V",                    ON_SAT, ON_SUN);
+        addHoliday("CRC", "Christmas VI",                   ON_SAT, ON_SUN);
+        addHoliday("CRC", "Columbus Day",                   ON_SAT, ON_SUN);
+        addHoliday("CRC", "Costa Rica Independence",        ON_SAT, ON_SUN);
+        addHoliday("CRC", "Good Friday");
+        addHoliday("CRC", "Holy Thursday");
+        addHoliday("CRC", "New Year Day",                   ON_SAT, ON_SUN);
+        addHoliday("CRC", "New Year Eve",                   ON_SAT, ON_SUN);
+        addHoliday("CRC", "May Labour Day",                 ON_SAT, ON_SUN);
+
+        // czech koruna
+        addHoliday("CZK", "Boxing Day",                     ON_SAT, ON_SUN);
+        addHoliday("CZK", "Christmas",                      ON_SAT, ON_SUN);
+        addHoliday("CZK", "Czech Liberation",               ON_SAT, ON_SUN);
+        addHoliday("CZK", "Czech National Day",             ON_SAT, ON_SUN);
+        addHoliday("CZK", "Easter Monday");
+        addHoliday("CZK", "Jan Hus",                        ON_SAT, ON_SUN);
+        addHoliday("CZK", "May Labour Day",                 ON_SAT, ON_SUN);
+        addHoliday("CZK", "New Year Day",                   ON_SAT, ON_SUN);
+        addHoliday("CZK", "St. Cyril & Methodius",          ON_SAT, ON_SUN);
+
+        // germany mark
+        addHoliday("DEM", "Ascension");
+        addHoliday("DEM", "Boxing Day",                     ON_SAT, ON_SUN);
+        addHoliday("DEM", "Christmas",                      ON_SAT, ON_SUN);
+        addHoliday("DEM", "Easter Monday");
+        addHoliday("DEM", "German Unity Day",               ON_SAT, ON_SUN);
+        addHoliday("DEM", "Good Friday");
+        addHoliday("DEM", "May Labour Day",                 ON_SAT, ON_SUN);
+        addHoliday("DEM", "New Year Day",                   ON_SAT, ON_SUN);
+        addHoliday("DEM", "Pentecost");
+
+        // denmark krone
+        addHoliday("DKK", "Ascension");
+        addHoliday("DKK", "Boxing Day",                     ON_SAT, ON_SUN);
+        addHoliday("DKK", "Christmas",                      ON_SAT, ON_SUN);
+        addHoliday("DKK", "Christmas Eve",                  ON_SAT, ON_SUN);
+        addHoliday("DKK", "Denmark National Day",           ON_SAT, ON_SUN);
+        addHoliday("DKK", "Easter Monday");
+        addHoliday("DKK", "Good Friday");
+        addHoliday("DKK", "Holy Thursday");
+        addHoliday("DKK", "New Year Day",                   ON_SAT, ON_SUN);
+        addHoliday("DKK", "Pentecost");
+        addHoliday("DKK", "Prayer Day");
+
+        // ecuador sucre
+        addHoliday("ECS", "All Souls Day",                  ON_SAT, ON_SUN);
+        addHoliday("ECS", "Christmas",                      ON_SAT, ON_SUN);
+        addHoliday("ECS", "Columbus Day",                   ON_SAT, ON_SUN);
+        addHoliday("ECS", "Cuencas Independence",           ON_SAT, ON_SUN);
+        addHoliday("ECS", "Ecuador Bank Holiday");
+        addHoliday("ECS", "Ecuador Independence",           ON_SAT, ON_SUN);
+        addHoliday("ECS", "Guayaquils Independence",        ON_SAT, ON_SUN);
+        addHoliday("ECS", "May Labour Day",                 ON_SAT, ON_SUN);
+        addHoliday("ECS", "New Year Day",                   ON_SAT, ON_SUN);
+        addHoliday("ECS", "Pichincha Battle",               ON_SAT, ON_SUN);
+        addHoliday("ECS", "Quitos Foundation",              ON_SAT, ON_SUN);
+        addHoliday("ECS", "Simon Bolivar Day",              ON_SAT, ON_SUN);
+
+        // egypt pound
+        addHoliday("EGP", "Birth of the Prophet",           ON_SAT, ON_SUN);
+        addHoliday("EGP", "Egypt Army Day",                 ON_SAT, ON_SUN);
+        addHoliday("EGP", "Egypt Liberation",               ON_SAT, ON_SUN);
+        addHoliday("EGP", "Egypt National Day",             ON_SAT, ON_SUN);
+        addHoliday("EGP", "Egypt Union Day",                ON_SAT, ON_SUN);
+        addHoliday("EGP", "Egypt Victory Day",              ON_SAT, ON_SUN);
+        addHoliday("EGP", "Eid Al Fitr",                    ON_SAT, ON_SUN);
+        addHoliday("EGP", "Eid El Adha",                    ON_SAT, ON_SUN);
+        addHoliday("EGP", "Islamic New Year",               ON_SAT, ON_SUN);
+        addHoliday("EGP", "May Labour Day",                 ON_SAT, ON_SUN);
+        addHoliday("EGP", "Mid Year Day",                   ON_SAT, ON_SUN);
+        addHoliday("EGP", "Sham El Nessim",                 ON_SAT, ON_SUN);
+        addHoliday("EGP", "Sinai Day",                      ON_SAT, ON_SUN);
+        addHoliday("EGP", "Suez Victory Day",               ON_SAT, ON_SUN);
+
+        // spain peseta
+        addHoliday("ESP", "All Saints Day",                 ON_SAT, ON_SUN);
+        addHoliday("ESP", "Assumption",                     ON_SAT, ON_SUN);
+        addHoliday("ESP", "Christmas",                      ON_SAT, ON_SUN);
+        addHoliday("ESP", "Easter Monday");
+        addHoliday("ESP", "Epiphany",                       ON_SAT, ON_SUN);
+        addHoliday("ESP", "Holy Thursday");
+        addHoliday("ESP", "Immaculate Conception",          ON_SAT, ON_SUN);
+        addHoliday("ESP", "May Labour Day",                 ON_SAT, ON_SUN);
+        addHoliday("ESP", "New Year Day",                   ON_SAT, ON_SUN);
+        addHoliday("ESP", "Spain Constitution Day",         ON_SAT, ON_SUN);
+        addHoliday("ESP", "Spain National Day",             ON_SAT, ON_SUN);
+
+        // euro
+        addHoliday("EUR", "Christmas",                      ON_SAT, ON_SUN);
+        addHoliday("EUR", "New Year Day",                   ON_SAT, ON_SUN);
+
+        // finland markka
+        addHoliday("FIM", "Ascension");
+        addHoliday("FIM", "Boxing Day",                     ON_SAT, ON_SUN);
+        addHoliday("FIM", "Christmas",                      ON_SAT, ON_SUN);
+        addHoliday("FIM", "Christmas Eve",                  ON_SAT, ON_SUN);
+        addHoliday("FIM", "Easter Monday");
+        addHoliday("FIM", "Epiphany",                       ON_SAT, ON_SUN);
+        addHoliday("FIM", "Finland Independence",           ON_SAT, ON_SUN);
+        addHoliday("FIM", "Good Friday");
+        addHoliday("FIM", "May Day",                        ON_SAT, ON_SUN);
+        addHoliday("FIM", "May Day Eve",                    ON_SAT, ON_SUN);
+        addHoliday("FIM", "Midsummer",                      ON_SAT, ON_SUN);
+        addHoliday("FIM", "Midsummer Eve",                  ON_SAT, ON_SUN);
+        addHoliday("FIM", "New Year Day",                   ON_SAT, ON_SUN);
+        addHoliday("FIM", "Pentecost");
+
+        // france franc
+        addHoliday("FRF", "All Saints Day",                 ON_SAT, ON_SUN);
+        addHoliday("FRF", "Armistice Day",                  ON_SAT, ON_SUN);
+        addHoliday("FRF", "Ascension");
+        addHoliday("FRF", "Assumption",                     ON_SAT, ON_SUN);
+        addHoliday("FRF", "Bastille Day",                   ON_SAT, ON_SUN);
+        addHoliday("FRF", "Christmas",                      ON_SAT, ON_SUN);
+        addHoliday("FRF", "Easter Monday");
+        addHoliday("FRF", "Fete De La Victoire",            ON_SAT, ON_SUN);
+//      addHoliday("FRF", "Good Friday");                                    // TODO: check if observed
+        addHoliday("FRF", "May Labour Day",                 ON_SAT, ON_SUN);
+        addHoliday("FRF", "New Year Day",                   ON_SAT, ON_SUN);
+        addHoliday("FRF", "Pentecost");
+
+        // great britain pound
+        addHoliday("GBP", "Boxing Day",                     SAT_MON, SUN_MON);
+        addHoliday("GBP", "Christmas",                      SAT_FRI, SUN_TUE); // skip over boxing day on monday
+        addHoliday("GBP", "Easter Monday");
+        addHoliday("GBP", "Good Friday");
+        addHoliday("GBP", "May Monday");
+        addHoliday("GBP", "New Year Day",                   SAT_MON, SUN_MON);
+        addHoliday("GBP", "New Year Eve",                   SAT_FRI, SUN_TUE);
+        addHoliday("GBP", "Spring Bank Holiday");
+        addHoliday("GBP", "Summer Bank Holiday");
+
+        // greece drachma
+        addHoliday("GRD", "Assumption",                     ON_SAT, ON_SUN);
+        addHoliday("GRD", "Boxing Day",                     ON_SAT, ON_SUN);
+        addHoliday("GRD", "Epiphany",                       ON_SAT, ON_SUN);
+        addHoliday("GRD", "Christmas",                      ON_SAT, ON_SUN);
+        addHoliday("GRD", "Good Friday");
+        addHoliday("GRD", "Fasting Day",                    ON_SAT, ON_SUN);
+        addHoliday("GRD", "Greece National Day I",          ON_SAT, ON_SUN);
+        addHoliday("GRD", "Greece National Day II",         ON_SAT, ON_SUN);
+        addHoliday("GRD", "May Labour Day",                 ON_SAT, ON_SUN);
+        addHoliday("GRD", "New Year Day",                   ON_SAT, ON_SUN);
+        addHoliday("GRD", "Pentecost");
+//      GRD 04/11/1999 Orthodox Easter
+//      GRD 04/12/1999 Orthodox Easter Monday
+//      GRD 04/11/2000 Orthodox Easter
+//      GRD 04/12/2000 Orthodox Easter Monday
+//      GRD 04/15/2001 Orthodox Easter
+//      GRD 04/16/2001 Orthodox Easter Monday
+
+        // hong kong dollar
+        addHoliday("HKD", "Boxing Day",                     ON_SAT, SUN_MON);
+        addHoliday("KRW", "Buddha Birthday",                ON_SAT, ON_SUN);
+        addHoliday("HKD", "Chinese National Day I",         ON_SAT, SUN_TUE);
+        addHoliday("HKD", "Chinese National Day II",        ON_SAT, SUN_MON);
+        addHoliday("HKD", "Ching Ming Festival",            ON_SAT, ON_SUN);
+        addHoliday("HKD", "Christmas",                      ON_SAT, ON_SUN);
+        addHoliday("HKD", "Easter Monday");
+        addHoliday("HKD", "Good Friday");
+        addHoliday("HKD", "Lunar New Year",                 ON_SAT, ON_SUN);
+        addHoliday("HKD", "Lunar New Year II",              ON_SAT, ON_SUN);
+        addHoliday("HKD", "Lunar New Year III",             ON_SAT, ON_SUN);
+        addHoliday("HKD", "May Labour Day",                 ON_SAT, ON_SUN);
+        addHoliday("TWD", "Mid Autumn Festival",            ON_SAT, ON_SUN);
+        addHoliday("HKD", "Mid Year Day",                   ON_SAT, ON_SUN);
+        addHoliday("HKD", "New Year Day",                   ON_SAT, ON_SUN);
+//      HKD 06/18/1999 Tuen Ng Festival
+//      HKD 08/16/1999 Sino-JapaneseWar Victory Day
+//      HKD 10/18/1999 Chung Yeung Festival
+//      HKD 06/06/2000 Tuen Ng Day
+//      HKD 08/21/2000 Sino-Japanese War Victory Day
+//      HKD 10/06/2000 Chung Yeung Day
+
+        // honduras limpira
+        addHoliday("HNL", "Christmas",                      ON_SAT, ON_SUN);
+        addHoliday("HNL", "Columbus Day",                   ON_SAT, ON_SUN);
+        addHoliday("HNL", "Honduras Army Day",              ON_SAT, ON_SUN);
+        addHoliday("HNL", "Honduras Independence",          ON_SAT, ON_SUN);
+        addHoliday("HNL", "May Labour Day",                 ON_SAT, ON_SUN);
+        addHoliday("HNL", "Morazan Day",                    ON_SAT, ON_SUN);
+        addHoliday("HNL", "New Year Day",                   ON_SAT, ON_SUN);
+        addHoliday("HNL", "Panamerican Day",                ON_SAT, ON_SUN);
+
+        // hungary forint
+        addHoliday("HUF", "Ascension");
+        addHoliday("HUF", "Boxing Day",                     ON_SAT, ON_SUN);
+        addHoliday("HUF", "Christmas",                      ON_SAT, ON_SUN);
+        addHoliday("HUF", "Easter Monday");
+        addHoliday("HUF", "Hungary Constitution Day",       ON_SAT, ON_SUN);
+        addHoliday("HUF", "Hungary National Day",           ON_SAT, ON_SUN);
+        addHoliday("HUF", "Hungary Republic Day",           ON_SAT, ON_SUN);
+        addHoliday("HUF", "May Labour Day",                 ON_SAT, ON_SUN);
+        addHoliday("HUF", "New Year Day",                   ON_SAT, ON_SUN);
+        addHoliday("HUF", "Pentecost");
+
+        // indonesia rupiah
+        addHoliday("IDR", "Ascension");
+        addHoliday("IDR", "Birth of the Prophet",           ON_SAT, ON_SUN);
+        addHoliday("IDR", "Christmas",                      ON_SAT, ON_SUN);
+        addHoliday("IDR", "Good Friday");
+        addHoliday("IDR", "Indonesia Independence",         ON_SAT, ON_SUN);
+        addHoliday("IDR", "Islamic New Year",               ON_SAT, ON_SUN);
+        addHoliday("IDR", "Muttons Feast",                  ON_SAT, ON_SUN);
+        addHoliday("IDR", "New Year Day",                   ON_SAT, ON_SUN);
+        addHoliday("IDR", "Wesak Day",                      ON_SAT, ON_SUN);
+
+        // ireland punt
+        addHoliday("IEP", "Autumn Bank Holiday");
+        addHoliday("IEP", "Boxing Day",                     ON_SAT, ON_SUN);
+        addHoliday("IEP", "Christmas",                      ON_SAT, ON_SUN);
+        addHoliday("IEP", "Easter Monday");
+        addHoliday("IEP", "Good Friday");
+        addHoliday("IEP", "Halloween Day");
+        addHoliday("IEP", "June Bank Holiday");
+        addHoliday("IEP", "May Monday");
+        addHoliday("IEP", "New Year Day",                   ON_SAT, ON_SUN);
+        addHoliday("IEP", "St. Patrick Day",                ON_SAT, ON_SUN);
+
+        // india rupee
+        addHoliday("INR", "Buddha Purnima",                 ON_SAT, ON_SUN);
+        addHoliday("INR", "Christmas",                      ON_SAT, ON_SUN);
+        addHoliday("INR", "Diwali",                         ON_SAT, ON_SUN);
+        addHoliday("INR", "Dussehra",                       ON_SAT, ON_SUN);
+        addHoliday("INR", "Eid Al Fitr",                    ON_SAT, ON_SUN);
+        addHoliday("INR", "Good Friday");
+        addHoliday("INR", "Guru Nanak",                     ON_SAT, ON_SUN);
+        addHoliday("INR", "India Independence",             ON_SAT, ON_SUN);
+        addHoliday("INR", "India Republic Day",             ON_SAT, ON_SUN);
+        addHoliday("INR", "Mahatma Gandhis Birthday",       ON_SAT, ON_SUN);
+        addHoliday("INR", "Mahavir Jayanti",                ON_SAT, ON_SUN);
+        addHoliday("INR", "Muharram",                       ON_SAT, ON_SUN);
+        addHoliday("INR", "New Year Day",                   ON_SAT, ON_SUN);
+//      INR 03/29/1999 Idul Zuha
+//      INR 06/27/1999 Id-el-Milad
+
+        // iceland krona
+        addHoliday("ISK", "Ascension");
+        addHoliday("ISK", "Christmas",                      ON_SAT, ON_SUN);
+        addHoliday("ISK", "Easter Monday");
+        addHoliday("ISK", "Good Friday");
+        addHoliday("ISK", "Holy Thursday");
+        addHoliday("ISK", "Iceland Commerce Day");
+        addHoliday("ISK", "Iceland National Day",           ON_SAT, ON_SUN);
+        addHoliday("ISK", "New Year Day",                   ON_SAT, ON_SUN);
+        addHoliday("ISK", "Pentecost");
+
+        // italy lira
+        addHoliday("ITL", "All Saints Day",                 ON_SAT, ON_SUN);
+        addHoliday("ITL", "Assumption",                     ON_SAT, ON_SUN);
+        addHoliday("ITL", "Boxing Day",                     ON_SAT, ON_SUN);
+        addHoliday("ITL", "Christmas",                      ON_SAT, ON_SUN);
+        addHoliday("ITL", "Easter Monday");
+        addHoliday("ITL", "Epiphany",                       ON_SAT, ON_SUN);
+        addHoliday("ITL", "Immaculate Conception",          ON_SAT, ON_SUN);
+        addHoliday("ITL", "Italy Liberation Day",           ON_SAT, ON_SUN);
+        addHoliday("ITL", "May Labour Day",                 ON_SAT, ON_SUN);
+        addHoliday("ITL", "New Year Day",                   ON_SAT, ON_SUN);
+
+        // japan yen -- since Saturday is Friday evening in the West and mostly worked, Saturdays do not roll but are taken directly
+        addHoliday("JPY", "Autumnal Equinox",               ON_SAT, ON_SUN); // TODO: equinox algorithms not working yet
+        addHoliday("JPY", "Japan Bank Holiday",             ON_SAT, ON_SUN);
+        addHoliday("JPY", "Japan Children Day",             ON_SAT, ON_SUN);
+        addHoliday("JPY", "Japan Coming of Age Day",        ON_SAT, ON_SUN);
+        addHoliday("JPY", "Japan Culture Day",              ON_SAT, ON_SUN);
+        addHoliday("JPY", "Japan Emperor Birthday",         ON_SAT, ON_SUN);
+        addHoliday("JPY", "Japan Foundation Day",           ON_SAT, ON_SUN);
+        addHoliday("JPY", "Japan Greenery Day",             ON_SAT, ON_SUN);
+        addHoliday("JPY", "Japan Sports Day",               ON_SAT, SUN_MON);
+        addHoliday("JPY", "Japan Marine Day",               ON_SAT, ON_SUN);
+        addHoliday("JPY", "Japan Memorial Day",             ON_SAT, ON_SUN);
+        addHoliday("JPY", "Japan Respect Aged Day",         ON_SAT, ON_SUN);
+        addHoliday("JPY", "Japan Thanksgiving Day",         ON_SAT, ON_SUN);
+        addHoliday("JPY", "New Year Day",                   ON_SAT, ON_SUN);
+        addHoliday("JPY", "New Year Day II",                ON_SAT, ON_SUN);
+        addHoliday("JPY", "New Year Day III",               ON_SAT, ON_SUN);
+        addHoliday("JPY", "New Year Eve",                   ON_SAT, ON_SUN);
+        addHoliday("JPY", "Vernal Equinox",                 ON_SAT, ON_SUN); // TODO: equinox algorithms not working yet
+        addHoliday("JPY", "Vernal Equinox II",              ON_SAT, ON_SUN); // TODO: equinox algorithms not working yet
+
+        // south korea won
+        addHoliday("KRW", "Buddha Birthday",                ON_SAT, ON_SUN);
+        addHoliday("KRW", "Lunar New Year",                 ON_SAT, ON_SUN);
+        addHoliday("KRW", "Lunar New Year II",              ON_SAT, ON_SUN);
+        addHoliday("KRW", "Christmas",                      ON_SAT, ON_SUN);
+        addHoliday("KRW", "New Year Day",                   ON_SAT, ON_SUN);
+        addHoliday("KRW", "New Year Day II",                ON_SAT, ON_SUN);
+        addHoliday("KRW", "South Korean Constitution",      ON_SAT, ON_SUN);
+        addHoliday("KRW", "South Korean Independence",      ON_SAT, ON_SUN);
+        addHoliday("KRW", "South Korean Liberation",        ON_SAT, ON_SUN);
+        addHoliday("KRW", "South Korean Memorial Day",      ON_SAT, ON_SUN);
+        addHoliday("KRW", "South Korean National Day",      ON_SAT, ON_SUN);
+//      KRW 09/23/1999 Harvest Moon Festival Eve
+//      KRW 09/24/1999 Harvest Moon Festival Day
+//      KRW 09/11/2000 Harvest Moon Festival Eve
+//      KRW 09/12/2000 Harvest Moon Festival Day
+//      KRW 09/13/2000 Harvest Moon Festival Holiday
+//      KRW 09/30/2001 Harvest Moon Festival Eve
+//      KRW 10/01/2001 Harvest Moon Festival Day
+//      KRW 10/02/2001 Harvest Moon Festival Holiday
+
+        // kuwait dinar
+        addHoliday("KWD", "Birth of the Prophet",           ON_SAT, ON_SUN);
+        addHoliday("KWD", "Eid Al Fitr",                    ON_SAT, ON_SUN);
+        addHoliday("KWD", "Eid El Adha",                    ON_SAT, ON_SUN);
+        addHoliday("KWD", "Islamic New Year",               ON_SAT, ON_SUN);
+        addHoliday("KWD", "Kuwait Liberation Day",          ON_SAT, ON_SUN);
+        addHoliday("KWD", "Kuwait National Day",            ON_SAT, ON_SUN);
+        addHoliday("KWD", "New Year Day",                   ON_SAT, ON_SUN);
+
+        // cayman islands dollar
+        addHoliday("KYD", "Cayman Constitution Day");
+        addHoliday("KYD", "Cayman Discovery Day");
+        addHoliday("KYD", "Cayman Queen Day");
+        addHoliday("KYD", "Boxing Day",                     ON_SAT, ON_SUN);
+        addHoliday("KYD", "Christmas",                      ON_SAT, ON_SUN);
+        addHoliday("KYD", "Christmas Eve",                  ON_SAT, ON_SUN);
+        addHoliday("KYD", "New Year Day",                   ON_SAT, ON_SUN);
+        addHoliday("KYD", "Remembrance Day",                ON_SAT, ON_SUN);
+
+        // luxemburg franc
+        addHoliday("LUF", "All Saints Day",                 ON_SAT, ON_SUN);
+        addHoliday("LUF", "Ascension");
+        addHoliday("LUF", "Assumption",                     ON_SAT, ON_SUN);
+        addHoliday("LUF", "Boxing Day",                     ON_SAT, ON_SUN);
+        addHoliday("LUF", "Christmas",                      ON_SAT, ON_SUN);
+        addHoliday("LUF", "Easter Monday");
+        addHoliday("LUF", "Luxemburg National Day",         ON_SAT, ON_SUN);
+        addHoliday("LUF", "May Labour Day",                 ON_SAT, ON_SUN);
+        addHoliday("LUF", "New Year Day",                   ON_SAT, ON_SUN);
+        addHoliday("LUF", "Pentecost");
+
+        // mexico peso
+        addHoliday("MXN", "All Souls Day",                  ON_SAT, ON_SUN);
+        addHoliday("MXN", "Christmas",                      ON_SAT, ON_SUN);
+        addHoliday("MXN", "Cinco De Mayo",                  ON_SAT, ON_SUN);
+        addHoliday("MXN", "Columbus Day",                   ON_SAT, ON_SUN);
+        addHoliday("MXN", "Easter Monday");
+        addHoliday("MXN", "Good Friday");
+        addHoliday("MXN", "Guadalupes Day",                 ON_SAT, ON_SUN);
+        addHoliday("MXN", "Holy Thursday");
+        addHoliday("MXN", "Juarez Birthday",                ON_SAT, ON_SUN);
+        addHoliday("MXN", "May Labour Day",                 ON_SAT, ON_SUN);
+        addHoliday("MXN", "Mexico Constitution Day",        ON_SAT, ON_SUN);
+        addHoliday("MXN", "Mexico Independence",            ON_SAT, ON_SUN);
+        addHoliday("MXN", "Mexico Revolution",              ON_SAT, ON_SUN);
+        addHoliday("MXN", "New Year Day",                   ON_SAT, ON_SUN); // TODO: check this
+
+        // malaysia ringgit
+        addHoliday("MYR", "Birth of the Prophet",           ON_SAT, ON_SUN);
+        addHoliday("MYR", "Christmas",                      ON_SAT, ON_SUN);
+        addHoliday("MYR", "Islamic New Year",               ON_SAT, ON_SUN);
+        addHoliday("MYR", "Lunar New Year",                 ON_SAT, ON_SUN);
+        addHoliday("MYR", "Lunar New Year II",              ON_SAT, ON_SUN);
+        addHoliday("MYR", "Malaysia Federal Territory",     ON_SAT, ON_SUN);
+        addHoliday("MYR", "Malaysia National Day",          ON_SAT, ON_SUN);
+        addHoliday("MYR", "May Labour Day",                 ON_SAT, ON_SUN);
+        addHoliday("MYR", "New Year Day",                   ON_SAT, ON_SUN);
+        addHoliday("MYR", "Wesak Day",                      ON_SAT, ON_SUN);
+//      MYR 01/19/1999 Hari Raya Puasa
+//      MYY 01/20/1999 Hari Raya Puasa
+//      MYR 11/07/1999 Deepavally Day
+//      MYR 01/08/2000 Hari Raya Puasa
+//      MYR 01/09/2000 Hari Raya Puasa
+//      MYR 10/26/2000 Deepavally Day
+//      MYR 12/27/2000 Hari Raya Puasa
+//      MYR 12/28/2000 Hari Raya Puasa
+//      MYR 12/16/2001 Hari Raya Puasa
+//      MYR 12/17/2001 Hari Raya Puasa
+
+        // netherlands guilder
+        addHoliday("NLG", "Ascension");
+        addHoliday("NLG", "Boxing Day",                     ON_SAT, ON_SUN);
+        addHoliday("NLG", "Christmas",                      ON_SAT, ON_SUN);
+        addHoliday("NLG", "Easter Monday");
+        addHoliday("NLG", "Good Friday");
+        addHoliday("NLG", "Netherland Liberation",          ON_SAT, ON_SUN);
+        addHoliday("NLG", "Netherland Queen Birthday",      ON_SAT, ON_SUN);
+        addHoliday("NLG", "New Year Day",                   ON_SAT, ON_SUN);
+        addHoliday("NLG", "Pentecost");
+
+        // norway krone
+        addHoliday("NOK", "Ascension");
+        addHoliday("NOK", "Boxing Day",                     ON_SAT, ON_SUN);
+        addHoliday("NOK", "Christmas",                      ON_SAT, ON_SUN);
+        addHoliday("NOK", "Easter Monday");
+        addHoliday("NOK", "Good Friday");
+        addHoliday("NOK", "Holy Thursday");
+        addHoliday("NOK", "May Labour Day",                 ON_SAT, ON_SUN);
+        addHoliday("NOK", "New Year Day",                   ON_SAT, ON_SUN);
+        addHoliday("NOK", "Norway Constitution Day",        ON_SAT, ON_SUN);
+        addHoliday("NOK", "Pentecost");
+
+        // new zealand dollar
+        addHoliday("NZD", "Anzac Day",                      ON_SAT, ON_SUN);
+        addHoliday("NZD", "Boxing Day",                     ON_SAT, ON_SUN);
+        addHoliday("NZD", "Christmas",                      ON_SAT, ON_SUN);
+        addHoliday("NZD", "Easter Monday");
+        addHoliday("NZD", "Good Friday");
+        addHoliday("NZD", "New Year Day",                   SAT_MON, SUN_TUE);
+        addHoliday("NZD", "New Year Day II",                SAT_MON, SUN_TUE);
+        addHoliday("NZD", "New Zealand Labour Day");
+        addHoliday("NZD", "New Zealand Queen Day");
+        addHoliday("NZD", "Waitangi Day",                   ON_SAT, ON_SUN);
+
+        // panama balboa
+        addHoliday("PAB", "Assumption",                     ON_SAT, ON_SUN);
+        addHoliday("PAB", "Carnival Monday");
+        addHoliday("PAB", "Carnival Tuesday");
+        addHoliday("PAB", "Christmas",                      ON_SAT, ON_SUN);
+        addHoliday("PAB", "Good Friday");
+        addHoliday("PAB", "Martyrs Day",                    ON_SAT, ON_SUN);
+        addHoliday("PAB", "May Labour Day",                 ON_SAT, ON_SUN);
+        addHoliday("PAB", "New Year Day",                   ON_SAT, ON_SUN);
+        addHoliday("PAB", "Panama Announcement",            ON_SAT, ON_SUN);
+        addHoliday("PAB", "Panama Break From Spain",        ON_SAT, ON_SUN);
+        addHoliday("PAB", "Panama Independence I",          ON_SAT, ON_SUN);
+        addHoliday("PAB", "Panama Independence II",         ON_SAT, ON_SUN);
+        addHoliday("PAB", "Panama Mothers Day",             ON_SAT, ON_SUN);
+
+        // peru sol
+        addHoliday("PEN", "All Saints Day",                 ON_SAT, ON_SUN);
+        addHoliday("PEN", "Angamos Battle",                 ON_SAT, ON_SUN);
+        addHoliday("PEN", "Christmas",                      ON_SAT, ON_SUN);
+        addHoliday("PEN", "Good Friday");
+        addHoliday("PEN", "Holy Thursday");
+        addHoliday("PEN", "Immaculate Conception",          ON_SAT, ON_SUN);
+        addHoliday("PEN", "May Labour Day",                 ON_SAT, ON_SUN);
+        addHoliday("PEN", "New Year Day",                   ON_SAT, ON_SUN);
+        addHoliday("PEN", "Peru Independence I",            ON_SAT, ON_SUN);
+        addHoliday("PEN", "Peru Independence II",           ON_SAT, ON_SUN);
+        addHoliday("PEN", "St. Peter & St. Paul Day",       ON_SAT, ON_SUN);
+        addHoliday("PEN", "St. Rose of Lima",               ON_SAT, ON_SUN);
+
+        // philippine peso
+        addHoliday("PHP", "All Saints Day",                 ON_SAT, ON_SUN);
+        addHoliday("PHP", "Bonifacio Day",                  ON_SAT, ON_SUN);
+        addHoliday("PHP", "Christmas",                      ON_SAT, ON_SUN);
+        addHoliday("PHP", "Good Friday");
+        addHoliday("PHP", "Holy Thursday");
+        addHoliday("PHP", "May Labour Day",                 ON_SAT, ON_SUN);
+        addHoliday("PHP", "New Year Day",                   ON_SAT, ON_SUN);
+        addHoliday("PHP", "New Year Eve",                   ON_SAT, ON_SUN);
+        addHoliday("PHP", "New Year Eve Eve",               ON_SAT, ON_SUN);
+        addHoliday("PHP", "Philippine Heroes Day I",        ON_SAT, ON_SUN);
+        addHoliday("PHP", "Philippine Heroes Day II",       ON_SAT, ON_SUN);
+        addHoliday("PHP", "Philippine Heroes Day III",      ON_SAT, ON_SUN);
+        addHoliday("PHP", "Philippine Independence",        ON_SAT, ON_SUN);
+
+        // poland zloty
+        addHoliday("PLN", "All Saints Day",                 ON_SAT, ON_SUN);
+        addHoliday("PLN", "Assumption",                     ON_SAT, ON_SUN);
+        addHoliday("PLN", "Boxing Day",                     ON_SAT, ON_SUN);
+        addHoliday("PLN", "Christmas",                      ON_SAT, ON_SUN);
+        addHoliday("PLN", "Corpus Christi");
+        addHoliday("PLN", "Easter Monday");
+        addHoliday("PLN", "May Labour Day",                 ON_SAT, ON_SUN);
+        addHoliday("PLN", "New Year Day",                   ON_SAT, ON_SUN);
+        addHoliday("PLN", "Poland Constitution Day",        ON_SAT, ON_SUN);
+        addHoliday("PLN", "Poland Independence",            ON_SAT, ON_SUN);
+
+        // portugal escudo
+        addHoliday("PTE", "All Saints Day",                 ON_SAT, ON_SUN);
+        addHoliday("PTE", "Assumption",                     ON_SAT, ON_SUN);
+        addHoliday("PTE", "Carnival Monday");                                // TODO: or tuesday
+        addHoliday("PTE", "Christmas",                      ON_SAT, ON_SUN);
+        addHoliday("PTE", "Christmas Eve",                  ON_SAT, ON_SUN);
+        addHoliday("PTE", "Corpus Christi");
+        addHoliday("PTE", "Good Friday");
+        addHoliday("PTE", "Immaculate Conception",          ON_SAT, ON_SUN);
+        addHoliday("PTE", "May Labour Day",                 ON_SAT, ON_SUN);
+        addHoliday("PTE", "New Year Day",                   ON_SAT, ON_SUN);
+        addHoliday("PTE", "Portugal Day",                   ON_SAT, ON_SUN);
+        addHoliday("PTE", "Portugal Independence",          ON_SAT, ON_SUN);
+        addHoliday("PTE", "Portugal Liberty Day",           ON_SAT, ON_SUN);
+        addHoliday("PTE", "Portugal Republic Day",          ON_SAT, ON_SUN);
+
+        // russia ruble
+        addHoliday("RUB", "Defenders of Motherland",        ON_SAT, ON_SUN);
+        addHoliday("RUB", "May Labour Day",                 ON_SAT, ON_SUN);
+        addHoliday("RUB", "May Labour Day II",              ON_SAT, ON_SUN);
+        addHoliday("RUB", "New Year Day",                   ON_SAT, ON_SUN);
+        addHoliday("RUB", "New Year Day II",                ON_SAT, ON_SUN);
+        addHoliday("RUB", "Orthodox Christmas",             ON_SAT, ON_SUN);
+        addHoliday("RUB", "Russia Constitution Day",        ON_SAT, ON_SUN);
+        addHoliday("RUB", "Russia National Day",            ON_SAT, ON_SUN);
+        addHoliday("RUB", "Russia Revolution Day",          ON_SAT, ON_SUN);
+        addHoliday("RUB", "Russia Victory Day",             ON_SAT, ON_SUN);
+        addHoliday("RUB", "Russia Womans Day",              ON_SAT, ON_SUN);
+
+        // saudi arabia riyal
+        addHoliday("SAR", "Eid Al Fitr",                    ON_SAT, ON_SUN);
+        addHoliday("SAR", "Eid El Adha",                    ON_SAT, ON_SUN);
+        addHoliday("SAR", "Saudi Arabia Nature Day",        ON_SAT, ON_SUN);
+        addHoliday("SAR", "Saudi Arabia Nature Day II",     ON_SAT, ON_SUN);
+        addHoliday("SAR", "Saudi Arabia Unification",       ON_SAT, ON_SUN);
+
+        // sweden krona
+        addHoliday("SEK", "All Saints Day",                 ON_SAT, ON_SUN);
+        addHoliday("SEK", "Ascension");
+        addHoliday("SEK", "Boxing Day",                     ON_SAT, ON_SUN);
+        addHoliday("SEK", "Christmas",                      ON_SAT, ON_SUN);
+        addHoliday("SEK", "Christmas Eve",                  ON_SAT, ON_SUN);
+        addHoliday("SEK", "Easter Monday");
+        addHoliday("SEK", "Epiphany",                       ON_SAT, ON_SUN);
+        addHoliday("SEK", "Good Friday");
+        addHoliday("SEK", "May Labour Day",                 ON_SAT, ON_SUN);
+        addHoliday("SEK", "Midsummer");
+        addHoliday("SEK", "New Year Day",                   ON_SAT, ON_SUN);
+        addHoliday("SEK", "New Year Eve",                   ON_SAT, ON_SUN);
+        addHoliday("SEK", "Pentecost");
+        addHoliday("SEK", "St. Walpurgis Day",              ON_SAT, ON_SUN);
+        addHoliday("SEK", "Sweden Flag Day",                ON_SAT, ON_SUN);
+
+        // singapore dollar
+        addHoliday("SGD", "Lunar New Year",                 ON_SAT, ON_SUN);
+        addHoliday("SGD", "Lunar New Year II",              ON_SAT, ON_SUN);
+        addHoliday("SGD", "Lunar New Year III",             ON_SAT, ON_SUN);
+        addHoliday("SGD", "Christmas",                      ON_SAT, ON_SUN);
+        addHoliday("SGD", "Good Friday");
+        addHoliday("SGD", "May Labour Day",                 ON_SAT, ON_SUN);
+        addHoliday("SGD", "New Year Day",                   ON_SAT, ON_SUN);
+        addHoliday("SGD", "Singapore National Day",         ON_SAT, ON_SUN);
+        addHoliday("SGD", "Wesak Day",                      ON_SAT, ON_SUN);
+//      SGD 01/19/1999 Hari Raya Puasa
+//      SGD 03/28/1999 Hari Raya Haji
+//      SGD 11/07/1999 Deepavali
+//      SGD 01/08/2000 Hari Raya Puasa
+//      SGD 03/16/2000 Hari Raya Haji
+//      SGD 10/26/2000 Deepavali
+//      SGD 12/27/2000 Hari Raya Puasa
+//      SGD 03/06/2001 Hari Raya Haji
+//      SGD 12/16/2001 Hari Raya Puasa
+
+        // slovakia koruna
+        addHoliday("SGD", "All Saints Day",                 ON_SAT, ON_SUN);
+        addHoliday("SGD", "Boxing Day",                     ON_SAT, ON_SUN);
+        addHoliday("SGD", "Christmas",                      ON_SAT, ON_SUN);
+        addHoliday("SGD", "Christmas Eve",                  ON_SAT, ON_SUN);
+        addHoliday("SGD", "Epiphany",                       ON_SAT, ON_SUN);
+        addHoliday("SGD", "Good Friday");
+        addHoliday("SGD", "May Labour Day",                 ON_SAT, ON_SUN);
+        addHoliday("SGD", "New Year Day",                   ON_SAT, ON_SUN);
+        addHoliday("SGD", "Our Lady of Seven Sorrows",      ON_SAT, ON_SUN);
+        addHoliday("SGD", "Slovakia Constitution Day",      ON_SAT, ON_SUN);
+        addHoliday("SGD", "Slovakia Liberation",            ON_SAT, ON_SUN);
+        addHoliday("SGD", "Slovakia National Day",          ON_SAT, ON_SUN);
+        addHoliday("SGD", "St. Cyril & Methodius",          ON_SAT, ON_SUN);
+
+        // el salvador colon
+        addHoliday("SVC", "All Souls Day",                  ON_SAT, ON_SUN);
+        addHoliday("SVC", "Bank Balance I",                 ON_SAT, ON_SUN);
+        addHoliday("SVC", "Bank Balance II",                ON_SAT, ON_SUN);
+        addHoliday("SVC", "Christmas",                      ON_SAT, ON_SUN);
+        addHoliday("SVC", "Easter Monday");
+        addHoliday("SVC", "El Salvador Independence",       ON_SAT, ON_SUN);
+        addHoliday("SVC", "Good Friday");
+        addHoliday("SVC", "Holy Thursday");
+        addHoliday("SVC", "May Labour Day",                 ON_SAT, ON_SUN);
+        addHoliday("SVC", "New Year Day",                   ON_SAT, ON_SUN);
+        addHoliday("SVC", "New Year Eve",                   ON_SAT, ON_SUN);
+        addHoliday("SVC", "New Year Eve Eve",               ON_SAT, ON_SUN);
+        addHoliday("SVC", "Transfiguration I",              ON_SAT, ON_SUN);
+        addHoliday("SVC", "Transfiguration II",             ON_SAT, ON_SUN);
+        addHoliday("SVC", "Transfiguration III",            ON_SAT, ON_SUN);
+
+        // thailand baht
+        addHoliday("THB", "King Chulalongkorn Memorial",    ON_SAT, ON_SUN);
+        addHoliday("THB", "May Labour Day",                 ON_SAT, ON_SUN);
+        addHoliday("THB", "Mid Year Day",                   ON_SAT, ON_SUN);
+        addHoliday("THB", "New Year Day",                   SAT_MON, SUN_MON);
+        addHoliday("THB", "New Year Eve",                   ON_SAT, ON_SUN);
+        addHoliday("THB", "Shakri Dynasty Day",             ON_SAT, ON_SUN);
+        addHoliday("THB", "Songkran Festival I",            ON_SAT, ON_SUN);
+        addHoliday("THB", "Songkran Festival II",           ON_SAT, ON_SUN);
+        addHoliday("THB", "Songkran Festival III",          ON_SAT, ON_SUN);
+        addHoliday("THB", "Thailand Constitution Day",      SAT_MON, SUN_MON);
+        addHoliday("THB", "Thailand Crowning Day",          ON_SAT, ON_SUN);
+        addHoliday("THB", "Thailand King Day",              ON_SAT, ON_SUN);
+        addHoliday("THB", "Thailand Queen Day",             ON_SAT, ON_SUN);
+//      THB 01/01/1999 Makha Bucha Day (?)
+//      THB 05/29/1999 Visakha Bucha Day
+//      THB 07/28/1999 Buddisht Lent
+//      THB 05/18/2000 Vishaka Bucha Day
+//      THB 07/17/2000 Buddisht Lent
+
+        // turkey lira
+        addHoliday("TRL", "Eid Al Fitr",                    ON_SAT, ON_SUN);
+        addHoliday("TRL", "Eid El Adha",                    ON_SAT, ON_SUN);
+        addHoliday("TRL", "New Year Day",                   ON_SAT, ON_SUN);
+        addHoliday("TRL", "Turkey Children & Sovereign",    ON_SAT, ON_SUN);
+        addHoliday("TRL", "Turkey Republic Day",            ON_SAT, ON_SUN);
+        addHoliday("TRL", "Turkey Victory Day",             ON_SAT, ON_SUN);
+        addHoliday("TRL", "Turkey Youth & Sports",          ON_SAT, ON_SUN);
+//      TRL 03/16/2000 Day of the Sacrifice
+//      TRL 03/17/2000 Day of the Sacrifice
+//      TRL 03/18/2000 Day of the Sacrifice
+//      TRL 03/19/2000 Day of the Sacrifice
+//      TRL 03/05/2001 Day of the Sacrifice
+//      TRL 03/06/2001 Day of the Sacrifice
+//      TRL 03/07/2001 Day of the Sacrifice
+//      TRL 03/08/2001 Day of the Sacrifice
+
+        // taiwan dollar
+        addHoliday("TWD", "Ching Ming Eve",                 ON_SAT, ON_SUN);
+        addHoliday("TWD", "Confucius Birthday",             ON_SAT, ON_SUN);
+        addHoliday("TWD", "Dragon Boat Day",                ON_SAT, ON_SUN);
+        addHoliday("TWD", "Dr. Sun Yat Sen Birthday",       ON_SAT, ON_SUN);
+        addHoliday("TWD", "Lunar New Year Eve",             ON_SAT, ON_SUN);
+        addHoliday("TWD", "Lunar New Year",                 ON_SAT, ON_SUN);
+        addHoliday("TWD", "Lunar New Year II",              ON_SAT, ON_SUN);
+        addHoliday("TWD", "Lunar New Year III",             ON_SAT, ON_SUN);
+        addHoliday("TWD", "Mid Autumn Festival",            ON_SAT, ON_SUN);
+        addHoliday("TWD", "Mid Year Day",                   ON_SAT, ON_SUN);
+        addHoliday("TWD", "New Year Day",                   SAT_MON, SUN_TUE);
+        addHoliday("TWD", "New Year Day II",                SAT_MON, SUN_TUE);
+        addHoliday("TWD", "President Tchiang Kai Sek",      ON_SAT, ON_SUN);
+        addHoliday("TWD", "Taiwan Constitution Day",        ON_SAT, ON_SUN);
+        addHoliday("TWD", "Taiwan National Day",            ON_SAT, ON_SUN);
+        addHoliday("TWD", "Taiwan Peace Day",               ON_SAT, ON_SUN);
+        addHoliday("TWD", "Taiwan Retrocession",            ON_SAT, ON_SUN);
+        addHoliday("TWD", "Taiwan Woman Day",               ON_SAT, ON_SUN);
+        addHoliday("TWD", "Taiwan Youth Day",               ON_SAT, ON_SUN);
+
+        // united states dollar
+        addHoliday("USD", "Christmas",                      SAT_FRI, SUN_MON);
+        addHoliday("USD", "Fourth Of July",                 SAT_FRI, SUN_MON);
+        addHoliday("USD", "Martin Luther King");
+        addHoliday("USD", "New Year Day",                   SAT_FRI, SUN_MON);
+        addHoliday("USD", "Presidents Day");
+        addHoliday("USD", "Thanksgiving Day");
+        addHoliday("USD", "USA Columbus Day");
+        addHoliday("USD", "USA Labor Day");
+        addHoliday("USD", "USA Memorial Day");
+        addHoliday("USD", "USA Veterans Day",               SAT_FRI, SUN_MON); // TODO: unsure if this is a currency
+
+        // venezuela bolivar
+        addHoliday("VEB", "All Saints Day",                 ON_SAT, ON_SUN);
+        addHoliday("VEB", "Ascension");
+        addHoliday("VEB", "Assumption",                     ON_SAT, ON_SUN);
+        addHoliday("VEB", "Battle of Carabobo",             ON_SAT, ON_SUN);
+        addHoliday("VEB", "Christmas",                      ON_SAT, ON_SUN);
+        addHoliday("VEB", "Columbus Day",                   ON_SAT, ON_SUN);
+        addHoliday("VEB", "Epiphany Monday");
+        addHoliday("VEB", "Immaculate Conception",          ON_SAT, ON_SUN);
+        addHoliday("VEB", "May Labour Day",                 ON_SAT, ON_SUN);
+        addHoliday("VEB", "New Year Day",                   ON_SAT, ON_SUN);
+        addHoliday("VEB", "San Jose",                       ON_SAT, ON_SUN);
+        addHoliday("VEB", "St. Peter & St. Paul Day",       ON_SAT, ON_SUN);
+        addHoliday("VEB", "Simon Bolivar Day",              ON_SAT, ON_SUN);
+        addHoliday("VEB", "Venezuela Independence",         ON_SAT, ON_SUN);
+        addHoliday("VEB", "Venezuela Independence II",      ON_SAT, ON_SUN);
+
+        // south africa rand
+        addHoliday("ZAR", "Ascension");
+        addHoliday("ZAR", "Boxing Day",                     ON_SAT, ON_SUN);
+        addHoliday("ZAR", "Christmas",                      ON_SAT, ON_SUN);
+        addHoliday("ZAR", "Easter Monday");
+        addHoliday("ZAR", "Good Friday");
+        addHoliday("ZAR", "May Labour Day",                 ON_SAT, ON_SUN);
+        addHoliday("ZAR", "New Year Day",                   ON_SAT, ON_SUN);
+        addHoliday("ZAR", "South Africa Freedom Day",       ON_SAT, ON_SUN);
+        addHoliday("ZAR", "South Africa Heritage Day",      ON_SAT, ON_SUN);
+        addHoliday("ZAR", "South Africa Human Rights",      ON_SAT, SUN_MON);
+        addHoliday("ZAR", "South Africa Reconciliation",    ON_SAT, ON_SUN);
+        addHoliday("ZAR", "South Africa Womans Day",        ON_SAT, ON_SUN);
+        addHoliday("ZAR", "South Africa Youth Day",         ON_SAT, ON_SUN);
+
+        // zimbabwe dollar
+        addHoliday("ZWD", "Africa Day",                     ON_SAT, ON_SUN);
+        addHoliday("ZWD", "Boxing Day",                     ON_SAT, ON_SUN);
+        addHoliday("ZWD", "Christmas",                      ON_SAT, ON_SUN);
+        addHoliday("ZWD", "May Labour Day",                 ON_SAT, ON_SUN);
+        addHoliday("ZWD", "New Year Day",                   ON_SAT, ON_SUN);
+        addHoliday("ZWD", "Zimbabwe Armed Forces Day",      ON_SAT, ON_SUN);
+        addHoliday("ZWD", "Zimbabwe Heroes Day",            ON_SAT, ON_SUN);
+        addHoliday("ZWD", "Zimbabwe Independence",          ON_SAT, ON_SUN);
+        addHoliday("ZWD", "Zimbabwe Public Holiday",        ON_SAT, ON_SUN);
+        addHoliday("ZWD", "Zimbabwe Unity Day",             ON_SAT, ON_SUN);
+    }
+
+    /**
+     * Returns an iterator for all the currencies handled by this class.
+     * @return Iterator of currency keys.
+     */
+    public static Iterator<String> currencies() {
+        return _ccys.keySet().iterator();
+    }
+
+    /**
+     * Returns an iterator for all the holidays for specified currency.
+     * @param ccy Name of the currency.
+     * @return Iterator of currency keys.
+     */
+    public static Iterator<RawHolidayChoice> holidays(String ccy) {
+        Map<String, RawHolidayChoice> ccyMap = _ccys.get(ccy);
+        return ccyMap.values().iterator();
+    }
+
+    /**
+     * Prints holidays for currency between years specified, inclusive.
+     * @param ccy   Name of the currency.
+     * @param start Starting year.
+     * @param end   Ending year.
+     */
+    public static void print(String ccy, /*year*/int start, /*year*/int end) {
+        RawHolidayChoice holi;
+        Date date;
+        /*year*/int year;
+        for (Iterator<RawHolidayChoice> ih = holidays(ccy); ih.hasNext();) {
+            holi = ih.next();
+            _logger.info("  " + holi.getLabel());
+            for (year = start; year <= end; year++) {
+                date = holi.date(year);
+                if (date != null) {
+                    _logger.info("    " + date);
+                }
+            }
+        }
+    }
+
+///////////////////////////////////////////////////////////////////////////////////////////////////
+
+    /**
+     * Stores a holiday for a currency on the currency's list.
+     * @param ccy  Name of the currency.
+     * @param holi Name of the holiday.
+     */
+    public static void addHoliday(String ccy, String holi) {
+        RawHolidayChoice raw = (RawHolidayChoice) _raws.choice(holi);
+        if (raw != null) {
+            putHoliday(ccy, raw);
+        }
+    }
+
+    /**
+     * Stores a holiday for a currency on the currency's list.
+     * @param ccy  Name of the currency.
+     * @param holi Name of the holiday.
+     * @param sat  Saturday adjustment.
+     * @param sun  Sunday adjustment.
+     */
+    public static void addHoliday(String ccy, String holi, int sat, int sun) {
+        if (sat == 0 && sun == 0) {
+            addHoliday(ccy, holi);
+        } else {
+            RawHolidayChoice raw = (RawHolidayChoice) _raws.choice(holi);
+            if (raw != null) {
+                putHoliday(ccy, new CcyHoli(raw, sat, sun));
+            }
+        }
+    }
+
+    /**
+     * Stores a holiday for a currency on the currency's list.
+     * @param ccy Name of the currency.
+     * @param raw Raw holiday object.
+     */
+    public static void putHoliday(String ccy, RawHolidayChoice raw) {
+        Map<String, RawHolidayChoice> ccyMap = _ccys.get(ccy);
+        if (ccyMap == null) {
+            ccyMap = new TreeMap<String, RawHolidayChoice>();
+            _ccys.put(ccy, ccyMap);
+        }
+        ccyMap.put(raw.getLabel(), raw);
+    }
+}
diff --git a/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/currency/Date.java b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/currency/Date.java
new file mode 100644
index 000000000..f583352a5
--- /dev/null
+++ b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/currency/Date.java
@@ -0,0 +1,37 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.contrib.holiday.currency;
+
+/**
+ * Date wrapper.
+ *
+ * @author Scott R. Duchin
+ */
+public class Date {
+
+    public Date addDays(int _sun) {
+        return null;
+    }
+
+    public Weekday weekday() {
+        return null;
+    }
+
+    public Date nextWeekday(Weekday _weekday) {
+        return null;
+    }
+
+}
diff --git a/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/currency/DateFactory.java b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/currency/DateFactory.java
new file mode 100644
index 000000000..d55e92545
--- /dev/null
+++ b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/currency/DateFactory.java
@@ -0,0 +1,29 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.contrib.holiday.currency;
+
+/**
+ * Date factory.
+ *
+ * @author Scott R. Duchin
+ */
+public class DateFactory {
+
+    public static Date date(int year, Month _month, int _day) {
+        return null;
+    }
+
+}
diff --git a/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/currency/DateUtil.java b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/currency/DateUtil.java
new file mode 100644
index 000000000..0dec7f42a
--- /dev/null
+++ b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/currency/DateUtil.java
@@ -0,0 +1,29 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.contrib.holiday.currency;
+
+/**
+ * Date utilities.
+ *
+ * @author Scott R. Duchin
+ */
+public class DateUtil {
+
+    public static boolean isLeapYear(int year) {
+        return false;
+    }
+
+}
diff --git a/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/currency/Month.java b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/currency/Month.java
new file mode 100644
index 000000000..dbdd4ecbd
--- /dev/null
+++ b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/currency/Month.java
@@ -0,0 +1,194 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.contrib.holiday.currency;
+
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * This enumeration is for the months of a year.
+ *
+ * @author Scott R. Duchin
+ */
+public enum Month {
+
+///////////////////////////////////////////////////////////////////////////////////////////////////
+// Static Variables & Methods
+
+    /**
+     * Defines the twelve months.
+     */
+    JAN(1), FEB(2), MAR(3), APR(4), MAY(5), JUN(6), JUL(7), AUG(8), SEP(9), OCT(10), NOV(11), DEC(12);
+
+    // static variables
+    private static Month[]              _months = new Month[] { null, JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC };
+    private static Map<String, Month>   _names = new HashMap<String, Month>(12); // lower case names to months
+
+    /**
+     * Numeric value representing number of months in the year.
+     */
+    public static int MONTHS_PER_YEAR = 12;
+
+    /**
+     * Array of month full names.
+     */
+    private static final String[] FULL_NAME = {
+        null,
+        "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"
+    };
+
+    /**
+     * Array of days per month in non-leap year.
+     */
+    private static final /*day*/int[] MAX_DAYS = {
+        0,
+        31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
+    };
+
+    /**
+     * Array of days per month in year.
+     */
+    private static final int[] START_WITHIN_YEAR = {
+        0,
+        0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334
+    };
+    private static final int[] START_WITHIN_LEAP_YEAR = {
+        0,
+        0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335
+    };
+
+    static {
+        _names.put("january",   Month.JAN);
+        _names.put("february",  Month.FEB);
+        _names.put("march",     Month.MAR);
+        _names.put("april",     Month.APR);
+        _names.put("may",       Month.MAY);
+        _names.put("june",      Month.JUN);
+        _names.put("july",      Month.JUL);
+        _names.put("august",    Month.AUG);
+        _names.put("september", Month.SEP);
+        _names.put("october",   Month.OCT);
+        _names.put("november",  Month.NOV);
+        _names.put("december",  Month.DEC);
+    }
+
+    /**
+     * Returns the month associated with the index.
+     * @param index Index of the month (1...12).
+     * @return Associated month.
+     */
+    public static Month month(int index) {
+        return _months[index];
+    }
+
+    /**
+     * Returns the month associated with the name.
+     * @param str Month name.
+     * @return Associated month; <code>null</code> if invalid string.
+     */
+    public static Month month(String str) {
+        Month month;
+        if (str.length() == 3) {
+            try {
+                month = Enum.valueOf(Month.class, str.toUpperCase());
+            } catch (IllegalArgumentException iae) {
+                month = null;
+            }
+        } else {
+            month = _names.get(str.toLowerCase());
+        }
+        return month;
+    }
+
+///////////////////////////////////////////////////////////////////////////////////////////////////
+// Field Variables & Constructor
+
+    // private field variables
+    private final int                   _month;             // index of the month
+
+    /**
+     * Constructor.
+     * @param   month   Month index.
+     */
+    private Month(int month) {
+        _month = month;
+    }
+
+///////////////////////////////////////////////////////////////////////////////////////////////////
+// Business Logic
+
+    /**
+     * Returns the number of days in the year.
+     * @param leapYear <code>true</code> if leap year; <code>false</code> otherwise.
+     * @return Number of days in month for year; inclusive range of 28 thru 31.
+     */
+    public /*day*/int maxDays(boolean leapYear) {
+        return (this == FEB && leapYear) ? 29 : MAX_DAYS[_month];
+    }
+
+    /**
+     * Returns the number of days in the year.
+     * @param year  Year (1...3000).
+     * @return Number of days in month for year; inclusive range of 28 thru 31.
+     */
+    public /*day*/int maxDays(/*year*/int year) {
+        return maxDays(DateUtil.isLeapYear(year));
+    }
+
+    /**
+     * Calculates the starting day of the year.
+     * @param leapYear <code>true</code> if leap year; <code>false</code> otherwise.
+     * @return Day number (1...366) of the year.
+     */
+    public int startDayInYear(boolean leapYear) {
+        return leapYear ? START_WITHIN_LEAP_YEAR[_month] : START_WITHIN_YEAR[_month];
+    }
+
+    /**
+     * Returns a string representation of the month.
+     * @return Month abbreviation.
+     */
+    public String toString() {
+        return name();
+    }
+
+///////////////////////////////////////////////////////////////////////////////////////////////////
+// Get & Set Methods
+
+    /**
+     * Returns the month abbreviated name.
+     * @return Month abbreviation (JAN, FEB, ..., DEC).
+     */
+    public String getAbbrev() {
+        return name();
+    }
+
+    /**
+     * Returns the month full name.
+     * @return Month name (January, February, ..., December).
+     */
+    public String getFullName() {
+        return FULL_NAME[_month];
+    }
+
+    /**
+     * Returns the month index.
+     * @return Index of the month (1...12).
+     */
+    public int getValue() {
+        return _month;
+    }
+}
diff --git a/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/currency/RawHolidayChoice.java b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/currency/RawHolidayChoice.java
new file mode 100644
index 000000000..2803917ac
--- /dev/null
+++ b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/currency/RawHolidayChoice.java
@@ -0,0 +1,43 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.contrib.holiday.currency;
+
+import java.util.List;
+
+/**
+ * The interface for specifying a raw holiday; the Saturday and Sunday behavior is not specified at this level.
+ *
+ * @author Scott R. Duchin
+ */
+public interface RawHolidayChoice extends Choice {
+
+    /**
+     * Returns the date of the particular holiday for the specified year.
+     * Note: the holiday returned is pure; not adjusted for Saturday or Sunday local behavior.
+     * @param year Year the holiday is requested for.
+     * @return Date of holiday in specified year; <code>null</code> if no holiday in specified year.
+     */
+    Date date(/*year*/int year);
+
+    /**
+     * Returns a list of dates of the particular holiday for the specified years.
+     * Note: the holiday returned is pure; not adjusted for Saturday or Sunday local behavior.
+     * @param start Starting year.
+     * @param end   Ending year.
+     * @return List of dates of holidays in specified years, inclusive.
+     */
+    List<Date> dates(/*year*/int start, /*year*/int end);
+}
diff --git a/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/currency/RawHolidayChoiceImpl.java b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/currency/RawHolidayChoiceImpl.java
new file mode 100644
index 000000000..c0b46abf1
--- /dev/null
+++ b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/currency/RawHolidayChoiceImpl.java
@@ -0,0 +1,673 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.contrib.holiday.currency;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * Abstract Holidays.
+ *
+ * @author Scott R. Duchin
+ */
+abstract class AbstractHoliday extends AbstractChoice implements RawHolidayChoice {
+
+    static final long serialVersionUID = 1001L;             // version 1 for serialization
+
+    // state fields
+    protected /*day*/int                _day;               // day (or days from easter, etc...)
+    protected /*year*/int               _end = 2100;        // ending year for holidays
+    protected int                       _every = 1;         // the number of years between holidays
+    protected Month                     _month;             // month of holiday
+    protected /*year*/int               _start = 1;         // starting year for holidays
+    protected Weekday                   _weekday;           // day of the week
+
+    /**
+     * Constructor for holiday.
+     * @param label The holiday convention.
+     * @param month Month holiday is in.
+     * @param day   Day holiday is on.
+     */
+    public AbstractHoliday(String label, Month month, /*day*/int day) {
+        super(RawHolidayChoiceImpl.choices(), label);
+        _day = day;
+        _month = month;
+    }
+
+    /**
+     * Constructor for holiday.
+     * @param label The holiday convention.
+     * @param month Month holiday is in.
+     * @param day   Day holiday is on.
+     * @param start Starting year.
+     * @param end   Ending year.
+     * @param every Number of years between holidays.
+     */
+    public AbstractHoliday(String label, Month month, /*day*/int day, /*year*/int start, /*year*/int end, int every) {
+        super(RawHolidayChoiceImpl.choices(), label);
+        _day = day;
+        _month = month;
+        _start = start;
+        _end = end;
+        _every = every;
+    }
+
+    /**
+     * Returns a list of dates of the particular holiday for the specified years.
+     * Note: the holiday returned is pure; not adjusted for Saturday or Sunday local behavior.
+     * @param start Starting year.
+     * @param end   Ending year.
+     * @return List of dates of holidays in specified years, inclusive.
+     */
+    public List<Date> dates(/*year*/int start, /*year*/int end) {
+        List<Date> list = new ArrayList<Date>(end - start + 1);
+        for (/*year*/int year = start; year <= end; year++) {
+            list.add(date(year));
+        }
+        return list;
+    }
+}
+
+/**
+ * Easter Holidays.
+ *
+ * @author Scott R. Duchin
+ */
+class HolidayEaster extends AbstractHoliday {
+
+    static final long serialVersionUID = 1001L;             // version 1 for serialization
+
+    /**
+     * Constructor for holiday.
+     * @param label The holiday convention.
+     * @param days  Days from Easter Sunday.
+     */
+    public HolidayEaster(String label, int days) {
+        super(label, null, days);
+    }
+
+    private static final /*day*/int[] EASTER = {
+        14, 3, 23, 11, 31, 18, 8, 28, 16, 5, 25, 13, 2, 22, 10, 30, 17, 7, 27
+    };
+
+    /**
+     * Returns the date of the particular holiday for the specified year.
+     * Note: the holiday returned is pure; not adjusted for Saturday or Sunday local behavior.
+     * @param year Year the holiday is requested for.
+     * @return Date of holiday in specified year; <code>null</code> if no holiday in specified year.
+     */
+    public Date date(/*year*/int year) {
+        int day = EASTER[year % 19];
+        Date easter = DateFactory.date(year, (day < 20) ? Month.APR : Month.MAR, day).addDays(1).nextWeekday(Weekday.SUN);
+        Date holi = easter.addDays(_day);
+        return holi;
+    }
+}
+
+/**
+ * Equinox Holidays.
+ *
+ * @author Scott R. Duchin
+ */
+class HolidayEquinox extends AbstractHoliday {
+
+    static final long serialVersionUID = 1001L;             // version 1 for serialization
+
+    /**
+     * Constructor for holiday.
+     * @param label  The holiday convention.
+     * @param spring <code>true</code> for Spring; <code>false</code> for Autumn.
+     * @param days   Days from Equinox.
+     */
+    public HolidayEquinox(String label, boolean spring, int days) {
+        super(label, spring ? Month.MAR : Month.SEP, days);
+    }
+
+    /**
+     * Returns the date of the particular holiday for the specified year.
+     * Note: the holiday returned is pure; not adjusted for Saturday or Sunday local behavior.
+     * @param year Year the holiday is requested for.
+     * @return Date of holiday in specified year; <code>null</code> if no holiday in specified year.
+     */
+    public Date date(/*year*/int year) {
+        // TODO: must get starting seconds and add seconds per year to derive actual time of equinox
+        Date equinox;
+        if (_month == Month.MAR) {
+            equinox = DateFactory.date(year, _month, 21);
+        } else {
+            equinox = DateFactory.date(year, _month, 23);
+        }
+        Date holi = equinox.addDays(_day);
+        return holi;
+    }
+}
+
+/**
+ * Islamic Holidays.
+ *
+ * @author Scott R. Duchin
+ */
+class HolidayIslamic extends AbstractHoliday {
+
+    static final long serialVersionUID = 1001L;             // version 1 for serialization
+
+    /**
+     * Constructor for holiday.
+     * @param label The holiday convention.
+     * @param days  Days from Islamic new year.
+     */
+    public HolidayIslamic(String label, int days) {
+        super(label, null, days);
+    }
+
+    private static final int[][] ISLAMIC = {
+        {1999, 4, 18}, {2000, 4, 6}, {2001, 3, 26}, {2002, 3, 15}
+    };
+
+    /**
+     * Returns the date of the particular holiday for the specified year.
+     * Note: the holiday returned is pure; not adjusted for Saturday or Sunday local behavior.
+     * @param year Year the holiday is requested for.
+     * @return Date of holiday in specified year; <code>null</code> if no holiday in specified year.
+     */
+    public Date date(/*year*/int year) {
+        Date holi = null;
+        if (1999 <= year && year <= 2002) {
+            int yr = year - 1999;
+            Date islamic = DateFactory.date(year, Month.month(ISLAMIC[yr][1]), ISLAMIC[yr][2]);
+            holi = islamic.addDays(_day);
+        }
+        return holi;
+    }
+}
+
+/**
+ * Lunar New Year Holidays.
+ *
+ * @author Scott R. Duchin
+ */
+class HolidayLunar extends AbstractHoliday {
+
+    static final long serialVersionUID = 1001L;             // version 1 for serialization
+
+    /**
+     * Constructor for holiday.
+     * @param label The holiday convention.
+     * @param days  Days from lunar new year.
+     */
+    public HolidayLunar(String label, int days) {
+        super(label, null, days);
+    }
+
+    private static final int[][] LUNAR = {
+        {1999, 2, 16}, {2000, 2,  5}, {2001, 1, 24}, {2002, 2, 12}, {2003, 2,  1}, {2004, 1, 22},
+        {2005, 2,  9}, {2006, 1, 29}, {2007, 2, 18}, {2008, 2,  7}, {2009, 1, 26}, {2010, 2, 14}
+    };
+
+    /**
+     * Returns the date of the particular holiday for the specified year.
+     * Note: the holiday returned is pure; not adjusted for Saturday or Sunday local behavior.
+     * @param year Year the holiday is requested for.
+     * @return Date of holiday in specified year; <code>null</code> if no holiday in specified year.
+     */
+    public Date date(/*year*/int year) {
+        Date holi = null;
+        if (1999 <= year && year <= 2010) {
+            int yr = year - 1999;
+            Date lunar = DateFactory.date(year, Month.month(LUNAR[yr][1]), LUNAR[yr][2]);
+            holi = lunar.addDays(_day);
+        }
+        return holi;
+    }
+}
+
+/**
+ * Day Of Month Holidays.
+ *
+ * @author Scott R. Duchin
+ */
+class HolidayMonthDay extends AbstractHoliday {
+
+    static final long serialVersionUID = 1001L;             // version 1 for serialization
+
+    /**
+     * Constructor for holiday.
+     * @param label The holiday convention.
+     * @param month Month holiday is in.
+     * @param day   Day holiday is on.
+     */
+    public HolidayMonthDay(String label, Month month, /*day*/int day) {
+        super(label, month, day);
+    }
+
+    /**
+     * Constructor for holiday.
+     * @param label The holiday convention.
+     * @param month Month holiday is in.
+     * @param day   Day holiday is on.
+     * @param start Starting year.
+     * @param end   Ending year.
+     * @param every Number of years between holidays.
+     */
+    public HolidayMonthDay(String label, Month month, /*day*/int day, /*year*/int start, /*year*/int end, int every) {
+        super(label, month, day, start, end, every);
+    }
+
+    /**
+     * Returns the date of the particular holiday for the specified year.
+     * Note: the holiday returned is pure; not adjusted for Saturday or Sunday local behavior.
+     * @param year Year the holiday is requested for.
+     * @return Date of holiday in specified year; <code>null</code> if no holiday in specified year.
+     */
+    public Date date(/*year*/int year) {
+        Date holi = null;
+        if (_every == 1 || (_start <= year && year <= _end && ((year - _start) % _every == 0))) {
+            holi = DateFactory.date(year, _month, _day);
+        }
+        return holi;
+    }
+}
+
+/**
+ * Weekday Holidays.
+ *
+ * @author Scott R. Duchin
+ */
+class HolidayWeekday extends AbstractHoliday {
+
+    static final long serialVersionUID = 1001L;             // version 1 for serialization
+
+    /**
+     * Constructor for holiday.
+     * @param label   The holiday convention.
+     * @param month   Month holiday is in.
+     * @param day     First possible day for holiday.
+     * @param weekday Day of the week holiday is on.
+     */
+    public HolidayWeekday(String label, Month month, /*day*/int day, Weekday weekday) {
+        super(label, month, day);
+        _weekday = weekday;
+    }
+
+    /**
+     * Returns the date of the particular holiday for the specified year.
+     * Note: the holiday returned is pure; not adjusted for Saturday or Sunday local behavior.
+     * @param year Year the holiday is requested for.
+     * @return Date of holiday in specified year; <code>null</code> if no holiday in specified year.
+     */
+    public Date date(/*year*/int year) {
+        Date holi = DateFactory.date(year, _month, _day);
+        return holi.nextWeekday(_weekday);
+    }
+}
+
+///////////////////////////////////////////////////////////////////////////////////////////////////
+
+/**
+ * The choice list for holiday implementations.
+ *
+ * @author Scott R. Duchin
+ */
+public final class RawHolidayChoiceImpl {
+
+///////////////////////////////////////////////////////////////////////////////////////////////////
+// Static Variables & Methods
+
+    // static variables
+    private static ChoiceList _choices;
+
+    /**
+     * Static initializer to create the holiday convention list.
+     */
+    static {
+        _choices = new ChoiceList(klass());
+
+        new HolidayMonthDay("Africa Day",                   Month.MAY,  25);
+        new HolidayMonthDay("All Saints Day",               Month.NOV,   1);
+        new HolidayMonthDay("All Souls Day",                Month.NOV,   2);
+        new HolidayMonthDay("Angamos Battle",               Month.OCT,   8);
+        new HolidayMonthDay("Annunciation",                 Month.MAR,  25);
+        new HolidayMonthDay("Anzac Day",                    Month.APR,  25);
+        new HolidayWeekday("Argentina Flag Day",            Month.JUN,  18,  Weekday.MON); // TODO: starting date
+        new HolidayMonthDay("Argentina Independence",       Month.JUL,   9);
+        new HolidayMonthDay("Argentina May Revolution",     Month.MAY,  25);
+        new HolidayMonthDay("Armistice Day",                Month.NOV,  11);
+        new HolidayEaster("Ascension",                       39);
+        new HolidayEaster("Ash Wednesday",                  -46);
+        new HolidayMonthDay("Assumption",                   Month.AUG,  15);
+        new HolidayMonthDay("Australia Day",                Month.JAN,  26);
+        new HolidayMonthDay("Australia Labour Day",         Month.MAR,   1);
+        new HolidayWeekday("Australia Queen Day",           Month.JUN,   8,  Weekday.MON);
+        new HolidayMonthDay("Austria National Day",         Month.OCT,  26);
+        new HolidayWeekday("Autumn Bank Holiday",           Month.AUG,   1,  Weekday.MON);
+        new HolidayEquinox("Autumnal Equinox",              false, 0);
+        new HolidayMonthDay("Bahamas Independence",         Month.JUL,  10);
+        new HolidayWeekday("Bahamas Labour Day",            Month.JUN,   1,  Weekday.FRI);
+        new HolidayMonthDay("Bank Balance I",               Month.JUN,  29);
+        new HolidayMonthDay("Bank Balance II",              Month.JUN,  30);
+        new HolidayMonthDay("Barbados Heroes Day",          Month.APR,  28);
+        new HolidayMonthDay("Barbados Independence",        Month.NOV,  30);
+        new HolidayMonthDay("Bastille Day",                 Month.JUL,  14);
+        new HolidayMonthDay("Battle of Boyaca Day",         Month.AUG,   7);
+        new HolidayMonthDay("Battle of Carabobo",           Month.JUN,  24);
+        new HolidayMonthDay("Belgium National Day",         Month.JUL,  21);
+        new HolidayMonthDay("Belize Emancipation",          Month.MAY,  24);
+        new HolidayMonthDay("Belize Independence",          Month.SEP,  21);
+        new HolidayWeekday("Bermuda Cup Match",             Month.JUL,  30,  Weekday.THU); // TODO: starting date
+        new HolidayWeekday("Bermuda Labour Day",            Month.SEP,   1,  Weekday.MON);
+        new HolidayWeekday("Bermuda Queen Day",             Month.JUN,  15,  Weekday.MON); // TODO: starting date
+        new HolidayWeekday("Bermuda Somers Day",            Month.JUL,  31,  Weekday.FRI); // TODO: starting date
+        new HolidayIslamic("Birth of the Prophet",           69);
+        new HolidayMonthDay("Bolivia Independence",         Month.AUG,   6);
+        new HolidayMonthDay("Bonifacio Day",                Month.NOV,  30);
+        new HolidayMonthDay("Brazil Independence",          Month.SEP,   7);
+        new HolidayMonthDay("Brazil Republic Day",          Month.NOV,  15);
+        new HolidayMonthDay("Boxing Day",                   Month.DEC,  26);
+        new HolidayMonthDay("Buddha Purnima",               Month.APR,  30);
+        new HolidayLunar("Buddha Birthday",                  95);
+        new HolidayWeekday("Canada Civic Day",              Month.AUG,   1,  Weekday.MON);
+        new HolidayMonthDay("Canada Independence",          Month.JUL,   1);
+        new HolidayWeekday("Canada Labour Day",             Month.SEP,   1,  Weekday.MON);
+        new HolidayWeekday("Canada Thanksgiving Day",       Month.OCT,   8,  Weekday.MON);
+        new HolidayEaster("Carnival Monday",                -48);
+        new HolidayEaster("Carnival Thursday",              -52);
+        new HolidayEaster("Carnival Tuesday",               -47);
+        new HolidayEaster("Carnival Wednesday",             -53);
+        new HolidayWeekday("Cayman Constitution Day",       Month.JUL,   1,  Weekday.MON); // TODO: starting date
+        new HolidayWeekday("Cayman Discovery Day",          Month.MAY,  15,  Weekday.MON); // TODO: starting date
+        new HolidayWeekday("Cayman Queen Day",              Month.JUN,   8,  Weekday.MON); // TODO: starting date
+        new HolidayMonthDay("Chile Army Day",               Month.SEP,  19);
+        new HolidayMonthDay("Chile Commemoration Day",      Month.SEP,  11);
+        new HolidayMonthDay("Chile Marine Day",             Month.MAY,  21);
+        new HolidayMonthDay("Chile National Day",           Month.SEP,  18);
+        new HolidayMonthDay("Chile Unity Day",              Month.SEP,   6);
+        new HolidayMonthDay("Chinese National Day I",       Month.OCT,   1);
+        new HolidayMonthDay("Chinese National Day II",      Month.OCT,   2);
+        new HolidayMonthDay("Ching Ming Eve",               Month.APR,   5); // TODO: check this with next
+        new HolidayMonthDay("Ching Ming Festival",          Month.APR,   6);
+        new HolidayMonthDay("Christmas",                    Month.DEC,  25);
+        new HolidayMonthDay("Christmas Eve",                Month.DEC,  24);
+        new HolidayMonthDay("Christmas IV",                 Month.DEC,  28);
+        new HolidayMonthDay("Christmas V",                  Month.DEC,  29);
+        new HolidayMonthDay("Christmas VI",                 Month.DEC,  30);
+        new HolidayMonthDay("Cinco De Mayo",                Month.MAY,   5);
+        new HolidayMonthDay("Columbia Independence",        Month.JUL,  20);
+        new HolidayMonthDay("Columbus Day",                 Month.OCT,  12);
+        new HolidayMonthDay("Commonwealth Day",             Month.MAR,   9);
+        new HolidayMonthDay("Confucius Birthday",           Month.SEP,  28);
+        new HolidayEaster("Corpus Christi",                  60);
+        new HolidayMonthDay("Costa Rica Independence",      Month.SEP,  15);
+        new HolidayMonthDay("Cuencas Independence",         Month.NOV,   3);
+        new HolidayMonthDay("Czech Liberation",             Month.MAY,   8);
+        new HolidayMonthDay("Czech National Day",           Month.OCT,  28);
+        new HolidayMonthDay("December Bank Holiday",        Month.DEC,   1);
+        new HolidayMonthDay("Denmark National Day",         Month.JUN,   5);
+        new HolidayMonthDay("Defenders of Motherland",      Month.FEB,  23);
+        new HolidayMonthDay("Diwali",                       Month.NOV,   7);
+        new HolidayMonthDay("Dr. Sun Yat Sen Birthday",     Month.NOV,  12);
+        new HolidayLunar("Dragon Boat Day",                 122);
+        new HolidayMonthDay("Dussehra",                     Month.OCT,  19);
+        new HolidayEaster("Easter Monday",                    1);
+        new HolidayMonthDay("Ecuador Independence",         Month.AUG,  10);
+        new HolidayWeekday("Ecuador Bank Holiday",          Month.JUN,  24,  Weekday.FRI);
+        new HolidayIslamic("Eid Al Fitr",                   -89);
+        new HolidayIslamic("Eid El Adha",                   -20);
+        new HolidayMonthDay("Egypt Army Day",               Month.OCT,   6);
+        new HolidayMonthDay("Egypt Liberation",             Month.OCT,  23);
+        new HolidayMonthDay("Egypt National Day",           Month.JUL,  23);
+        new HolidayMonthDay("Egypt Union Day",              Month.FEB,  22);
+        new HolidayMonthDay("Egypt Victory Day",            Month.DEC,  23);
+        new HolidayMonthDay("El Salvador Independence",     Month.SEP,  15);
+        new HolidayWeekday("Election Day",                  Month.NOV,   2,  Weekday.TUE);
+        new HolidayMonthDay("Emancipation Day",             Month.AUG,   1);
+        new HolidayWeekday("Emancipation Monday",           Month.AUG,   1,  Weekday.MON);
+        new HolidayMonthDay("Epiphany",                     Month.JAN,   6);
+        new HolidayWeekday("Epiphany Monday",               Month.JAN,   2,  Weekday.MON);
+        new HolidayMonthDay("Elevation",                    Month.SEP,  14);
+        new HolidayMonthDay("Errol Barrow Day",             Month.JAN,  21);
+        new HolidayMonthDay("Fasting Day",                  Month.FEB,  22);
+        new HolidayMonthDay("Fete De La Victoire",          Month.MAY,   8);
+        new HolidayMonthDay("Finland Independence",         Month.DEC,   6);
+        new HolidayMonthDay("Foundation Day",               Month.JUN,   7);
+        new HolidayMonthDay("Fourth Of July",               Month.JUL,   4);
+        new HolidayMonthDay("Friendship Day",               Month.SEP,  20);
+        new HolidayMonthDay("Garifuna Day",                 Month.NOV,  19);
+        new HolidayWeekday("General San Martin Memorial",   Month.AUG,  13,  Weekday.MON); // TODO: starting date
+        new HolidayMonthDay("German Unity Day",             Month.OCT,   3);
+        new HolidayEaster("Good Friday",                    -2);
+        new HolidayMonthDay("Greece National Day I",        Month.MAR,  25);
+        new HolidayMonthDay("Greece National Day II",       Month.OCT,  28);
+        new HolidayMonthDay("Guadalupes Day",               Month.DEC,  12);
+        new HolidayMonthDay("Guayaquils Independence",      Month.OCT,   9);
+        new HolidayMonthDay("Guru Nanak",                   Month.NOV,  23);
+        new HolidayWeekday("Halloween Day",                 Month.OCT,  25,  Weekday.MON);
+        new HolidayIslamic("Hari Raya Haji",                -20);
+        new HolidayEaster("Holy Thursday",                  -3);
+        new HolidayMonthDay("Honduras Army Day",            Month.OCT,  21);
+        new HolidayMonthDay("Honduras Independence",        Month.SEP,  15);
+        new HolidayMonthDay("Hungary Constitution Day",     Month.AUG,  20);
+        new HolidayMonthDay("Hungary National Day",         Month.MAR,  15);
+        new HolidayMonthDay("Hungary Republic Day",         Month.OCT,  23);
+        new HolidayWeekday("Iceland Commerce Day",          Month.AUG,   1,  Weekday.MON);
+        new HolidayMonthDay("Iceland National Day",         Month.JUL,  17);
+        new HolidayMonthDay("Immaculate Conception",        Month.DEC,   8);
+        new HolidayMonthDay("Inauguration Day",             Month.JAN,  20,  1937, 3000, 4);
+        new HolidayMonthDay("India Independence",           Month.AUG,  15);
+        new HolidayMonthDay("India Republic Day",           Month.JAN,  26);
+        new HolidayMonthDay("Indonesia Independence",       Month.AUG,  17);
+        new HolidayIslamic("Islamic New Year",               0);
+        new HolidayMonthDay("Italy Liberation Day",         Month.APR,  25);
+        new HolidayMonthDay("Jan Hus",                      Month.JUL,   6); // TODO: sometimes june?
+        new HolidayMonthDay("Japan Bank Holiday",           Month.MAY,   4);
+        new HolidayMonthDay("Japan Children Day",           Month.MAY,   5);
+        new HolidayMonthDay("Japan Coming of Age Day",      Month.JAN,  15);
+        new HolidayMonthDay("Japan Culture Day",            Month.NOV,   3);
+        new HolidayMonthDay("Japan Emperor Birthday",       Month.DEC,  23);
+        new HolidayMonthDay("Japan Foundation Day",         Month.FEB,  11);
+        new HolidayMonthDay("Japan Greenery Day",           Month.APR,  29);
+        new HolidayMonthDay("Japan Sports Day",             Month.OCT,  10);
+        new HolidayMonthDay("Japan Marine Day",             Month.JUL,  20);
+        new HolidayMonthDay("Japan Memorial Day",           Month.MAY,   3);
+        new HolidayMonthDay("Japan Respect Aged Day",       Month.SEP,  15);
+        new HolidayMonthDay("Japan Thanksgiving Day",       Month.NOV,  23);
+        new HolidayMonthDay("Juarez Birthday",              Month.MAR,  21);
+        new HolidayWeekday("June Bank Holiday",             Month.JUN,   1,  Weekday.MON);
+        new HolidayWeekday("Kadooment Day",                 Month.AUG,   2,  Weekday.MON); // TODO: start date?
+        new HolidayMonthDay("King Chulalongkorn Memorial",  Month.OCT,  23);
+        new HolidayMonthDay("Kuwait Liberation Day",        Month.FEB,  26);
+        new HolidayMonthDay("Kuwait National Day",          Month.FEB,  25);
+        new HolidayMonthDay("La Paz",                       Month.JUL,  16);
+        new HolidayWeekday("Labour Day",                    Month.OCT,   1,  Weekday.MON);
+        new HolidayLunar("Lunar New Year Eve",              -1);
+        new HolidayLunar("Lunar New Year",                   0);
+        new HolidayLunar("Lunar New Year II",                1);
+        new HolidayLunar("Lunar New Year III",               2);
+        new HolidayMonthDay("Luxemburg National Day",       Month.JUN,  23);
+        new HolidayMonthDay("Mahatma Gandhis Birthday",     Month.OCT,   2);
+        new HolidayMonthDay("Mahavir Jayanti",              Month.MAR,  29);
+        new HolidayMonthDay("Malaysia Federal Territory",   Month.FEB,   1);
+        new HolidayMonthDay("Malaysia National Day",        Month.AUG,  31);
+        new HolidayWeekday("Martin Luther King",            Month.JAN,  15,  Weekday.MON);
+        new HolidayMonthDay("Martyrs Day",                  Month.JAN,   9);
+        new HolidayMonthDay("May Day",                      Month.MAY,   1);
+        new HolidayMonthDay("May Day Eve",                  Month.APR,  30);
+        new HolidayWeekday("May Monday",                    Month.MAY,   1,  Weekday.MON);
+        new HolidayMonthDay("May Labour Day",               Month.MAY,   1);
+        new HolidayMonthDay("May Labour Day II",            Month.MAY,   2);
+        new HolidayMonthDay("Mexico Constitution Day",      Month.FEB,   5);
+        new HolidayMonthDay("Mexico Independence",          Month.SEP,  16);
+        new HolidayMonthDay("Mexico Revolution",            Month.NOV,  20);
+        new HolidayLunar("Mid Autumn Festival",             220);
+        new HolidayMonthDay("Mid Year Day",                 Month.JUL,   1);
+        new HolidayWeekday("Midsummer",                     Month.JUN,  22,  Weekday.TUE); // TODO: start - saw 15th & 23rd (SEK)
+        new HolidayWeekday("Midsummer Eve",                 Month.JUN,  21,  Weekday.MON); // TODO: ditto
+        new HolidayMonthDay("Morazan Day",                  Month.OCT,   3);
+        new HolidayMonthDay("Muharram",                     Month.APR,  27);
+        new HolidayMonthDay("Muttons Feast",                Month.MAR,  28);
+        new HolidayMonthDay("Nativity",                     Month.SEP,   8);
+        new HolidayMonthDay("Netherland Liberation",        Month.MAY,   5);
+        new HolidayMonthDay("Netherland Queen Birthday",    Month.APR,  30);
+        new HolidayMonthDay("New Year Day",                 Month.JAN,   1);
+        new HolidayMonthDay("New Year Day II",              Month.JAN,   2);
+        new HolidayMonthDay("New Year Day III",             Month.JAN,   3);
+        new HolidayMonthDay("New Year Eve",                 Month.DEC,  31);
+        new HolidayMonthDay("New Year Eve Eve",             Month.DEC,  30);
+        new HolidayWeekday("New Zealand Labour Day",        Month.OCT,  22,  Weekday.MON); // TODO: starting date
+        new HolidayWeekday("New Zealand Queen Day",         Month.JUN,   1,  Weekday.MON); // TODO: starting date
+        new HolidayMonthDay("Norway Constitution Day",      Month.MAY,  17);
+        new HolidayMonthDay("Nossa Senhora",                Month.OCT,  12);
+        new HolidayMonthDay("Orthodox Christmas",           Month.JAN,   7);
+        new HolidayMonthDay("Orthodox Christmas Eve",       Month.JAN,   6);
+        new HolidayMonthDay("Orthodox New Year",            Month.JAN,  14);
+        new HolidayMonthDay("Our Lady of Seven Sorrows",    Month.SEP,  15);
+        new HolidayMonthDay("Panama Announcement",          Month.NOV,  10);
+        new HolidayMonthDay("Panama Break From Spain",      Month.NOV,  28);
+        new HolidayMonthDay("Panama Independence I",        Month.NOV,   3);
+        new HolidayMonthDay("Panama Independence II",       Month.NOV,   4);
+        new HolidayMonthDay("Panama Mothers Day",           Month.DEC,   8);
+        new HolidayMonthDay("Panamerican Day",              Month.APR,  14);
+        new HolidayEaster("Pentecost",                       50);
+        new HolidayMonthDay("Peru Independence I",          Month.JUL,  28);
+        new HolidayMonthDay("Peru Independence II",         Month.JUL,  29);
+        new HolidayMonthDay("Philippine Heroes Day I",      Month.APR,   9);
+        new HolidayMonthDay("Philippine Heroes Day II",     Month.AUG,  27);
+        new HolidayMonthDay("Philippine Heroes Day III",    Month.AUG,  31);
+        new HolidayMonthDay("Philippine Independence",      Month.JUN,  12);
+        new HolidayMonthDay("Pichincha Battle",             Month.MAY,  24);
+        new HolidayMonthDay("Poland Constitution Day",      Month.MAY,   3); // TODO: is this 1st wednesday of each month
+        new HolidayMonthDay("Poland Independence",          Month.NOV,  11);
+        new HolidayMonthDay("Portugal Day",                 Month.JUN,  10);
+        new HolidayMonthDay("Portugal Independence",        Month.DEC,   1);
+        new HolidayMonthDay("Portugal Liberty Day",         Month.APR,  25);
+        new HolidayMonthDay("Portugal Republic Day",        Month.OCT,   5);
+        new HolidayEaster("Prayer Day",                      26);
+        new HolidayWeekday("Presidents Day",                Month.FEB,  15,  Weekday.MON);
+        new HolidayMonthDay("President Tchiang Kai Sek",    Month.OCT,  31);
+        new HolidayWeekday("Queen Victoria Day",            Month.MAY,  18,  Weekday.MON);
+        new HolidayMonthDay("Quitos Foundation",            Month.DEC,   6);
+        new HolidayMonthDay("Remembrance Day",              Month.NOV,  11);
+        new HolidayMonthDay("Russia Constitution Day",      Month.DEC,  12);
+        new HolidayMonthDay("Russia National Day",          Month.JUN,  12);
+        new HolidayMonthDay("Russia Revolution Day",        Month.NOV,   7);
+        new HolidayMonthDay("Russia Victory Day",           Month.MAY,   9);
+        new HolidayMonthDay("Russia Womans Day",            Month.MAR,   8);
+        new HolidayMonthDay("San Jose",                     Month.MAR,  19);
+        new HolidayMonthDay("Saudi Arabia Nature Day",      Month.APR,   1);
+        new HolidayMonthDay("Saudi Arabia Nature Day II",   Month.APR,   2);
+        new HolidayMonthDay("Saudi Arabia Unification",     Month.SEP,  24);
+        new HolidayMonthDay("Sham El Nessim",               Month.APR,  12);
+        new HolidayMonthDay("Shakri Dynasty Day",           Month.APR,   6);
+        new HolidayMonthDay("Simon Bolivar Day",            Month.JUL,  24);
+        new HolidayMonthDay("Sinai Day",                    Month.APR,  25);
+        new HolidayMonthDay("Singapore National Day",       Month.AUG,   9);
+        new HolidayMonthDay("Slovakia Constitution Day",    Month.SEP,   1);
+        new HolidayMonthDay("Slovakia Liberation",          Month.MAY,   8);
+        new HolidayMonthDay("Slovakia National Day",        Month.AUG,  29);
+        new HolidayMonthDay("Songkran Festival I",          Month.APR,  12);
+        new HolidayMonthDay("Songkran Festival II",         Month.APR,  13);
+        new HolidayMonthDay("Songkran Festival III",        Month.APR,  14);
+        new HolidayMonthDay("South Africa Freedom Day",     Month.APR,  27);
+        new HolidayMonthDay("South Africa Heritage Day",    Month.SEP,  24);
+        new HolidayMonthDay("South Africa Human Rights",    Month.MAR,  21);
+        new HolidayMonthDay("South Africa Reconciliation",  Month.DEC,  16);
+        new HolidayMonthDay("South Africa Womans Day",      Month.AUG,   9);
+        new HolidayMonthDay("South Africa Youth Day",       Month.JUN,  16);
+        new HolidayMonthDay("South Korean Constitution",    Month.JUL,  17);
+        new HolidayMonthDay("South Korean Independence",    Month.MAR,  1);
+        new HolidayMonthDay("South Korean Liberation",      Month.AUG,  15);
+        new HolidayMonthDay("South Korean Memorial Day",    Month.JUN,   6);
+        new HolidayMonthDay("South Korean National Day",    Month.OCT,   3);
+        new HolidayMonthDay("Spain Constitution Day",       Month.DEC,   6);
+        new HolidayMonthDay("Spain National Day",           Month.OCT,  12);
+        new HolidayWeekday("Spring Bank Holiday",           Month.MAY,  25,  Weekday.MON);
+        new HolidayMonthDay("St. Cyril & Methodius",        Month.JUL,   5); // TODO: sometimes june?
+        new HolidayMonthDay("St. Georges Caye Day",         Month.SEP,  10);
+        new HolidayMonthDay("St. Josephs Day",              Month.MAR,  19);
+        new HolidayMonthDay("St. Patrick Day",              Month.MAR,  17);
+        new HolidayMonthDay("St. Peter & St. Paul Day",     Month.JUN,  29);
+        new HolidayMonthDay("St. Rose of Lima",             Month.AUG,  30);
+        new HolidayMonthDay("St. Walpurgis Day",            Month.APR,  30);
+        new HolidayMonthDay("Suez Victory Day",             Month.OCT,  24);
+        new HolidayWeekday("Summer Bank Holiday",           Month.AUG,  25,  Weekday.MON);
+        new HolidayMonthDay("Sweden Flag Day",              Month.JUN,   6);
+        new HolidayMonthDay("Swiss National Day",           Month.AUG,   1);
+        new HolidayMonthDay("Taiwan Constitution Day",      Month.DEC,  25);
+        new HolidayMonthDay("Taiwan National Day",          Month.OCT,  10);
+        new HolidayMonthDay("Taiwan Peace Day",             Month.FEB,  28);
+        new HolidayMonthDay("Taiwan Retrocession",          Month.OCT,  25);
+        new HolidayMonthDay("Taiwan Woman Day",             Month.APR,   4);
+        new HolidayMonthDay("Taiwan Youth Day",             Month.MAR,  29);
+        new HolidayMonthDay("Thailand Constitution Day",    Month.DEC,  10);
+        new HolidayMonthDay("Thailand Crowning Day",        Month.MAY,   5);
+        new HolidayMonthDay("Thailand King Day",            Month.DEC,   5);
+        new HolidayMonthDay("Thailand Queen Day",           Month.AUG,  12);
+        new HolidayWeekday("Thanksgiving Day",              Month.NOV,  22,  Weekday.THU);
+        new HolidayWeekday("Thanksgiving Friday",           Month.NOV,  23,  Weekday.FRI);
+        new HolidayMonthDay("Tiradentes",                   Month.APR,  21);
+        new HolidayMonthDay("Transfiguration I",            Month.AUG,   4);
+        new HolidayMonthDay("Transfiguration II",           Month.AUG,   5);
+        new HolidayMonthDay("Transfiguration III",          Month.AUG,   6);
+        new HolidayMonthDay("Turkey Children & Sovereign",  Month.APR,  23);
+        new HolidayMonthDay("Turkey Republic Day",          Month.OCT,  29);
+        new HolidayMonthDay("Turkey Victory Day",           Month.AUG,  30);
+        new HolidayMonthDay("Turkey Youth & Sports",        Month.MAY,  19);
+        new HolidayMonthDay("United Nation Day",            Month.OCT,  24);
+        new HolidayWeekday("USA Columbus Day",              Month.OCT,   8,  Weekday.MON);
+        new HolidayMonthDay("USA Flag Day",                 Month.JUN,   1);
+        new HolidayWeekday("USA Labor Day",                 Month.SEP,   1,  Weekday.MON);
+        new HolidayWeekday("USA Memorial Day",              Month.MAY,  25,  Weekday.MON);
+        new HolidayMonthDay("USA Veterans Day",             Month.NOV,  11);
+        new HolidayMonthDay("Venezuela Independence",       Month.JUL,   5);
+        new HolidayMonthDay("Venezuela Independence II",    Month.APR,  19);
+        new HolidayEquinox("Vernal Equinox",                true, 0);
+        new HolidayEquinox("Vernal Equinox II",             true, 1);
+        new HolidayMonthDay("Waitangi Day",                 Month.FEB,   6);
+        new HolidayIslamic("Wesak Day",                      42);
+        new HolidayMonthDay("Zimbabwe Armed Forces Day",    Month.AUG,  12);
+        new HolidayMonthDay("Zimbabwe Heroes Day",          Month.AUG,  11);
+        new HolidayMonthDay("Zimbabwe Independence",        Month.APR,  18);
+        new HolidayMonthDay("Zimbabwe Public Holiday",      Month.AUG,  13);
+        new HolidayMonthDay("Zimbabwe Unity Day",           Month.DEC,  22);
+    }
+
+    /**
+     * Returns the class used to reference choices.
+     * @return Choice reference class.
+     */
+    public static Class klass() {
+        return RawHolidayChoice.class;
+    }
+
+///////////////////////////////////////////////////////////////////////////////////////////////////
+// Field Variables & Constructor
+
+    /**
+     * Invalid constructor to choice list.
+     */
+    private RawHolidayChoiceImpl() {
+    }
+
+///////////////////////////////////////////////////////////////////////////////////////////////////
+// Get & Set Methods
+
+    /**
+     * Returns the choice list for this implementation.
+     * @return Choice list.
+     */
+    public static ChoiceList choices() {
+        return _choices;
+    }
+}
diff --git a/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/currency/Weekday.java b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/currency/Weekday.java
new file mode 100644
index 000000000..b06b412df
--- /dev/null
+++ b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/currency/Weekday.java
@@ -0,0 +1,161 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.contrib.holiday.currency;
+
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * This enumeration is for the weekdays of a week.
+ *
+ * @author Scott R. Duchin
+ */
+public enum Weekday {
+
+///////////////////////////////////////////////////////////////////////////////////////////////////
+// Static Variables & Methods
+
+    /**
+     * Defines the seven weekdays.
+     */
+    SUN(1, true), MON(2, false), TUE(3, false), WED(4, false), THU(5, false), FRI(6, false), SAT(7, true);
+
+    // static variables
+    private static Weekday[]            _weekdays = new Weekday[] { null, SUN, MON, TUE, WED, THU, FRI, SAT };
+    private static Map<String, Weekday> _names = new HashMap<String, Weekday>(7); // lower case names to weekdays
+
+    /**
+     * Numeric value representing number of days in the week.
+     */
+    public static int DAYS_PER_WEEK = 7;
+
+    /**
+     * Array of weekday full names.
+     */
+    private static final String[] FULL_NAME = {
+        null,
+        "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday"
+    };
+
+    static {
+        _names.put("Sunday",    Weekday.SUN);
+        _names.put("Monday",    Weekday.MON);
+        _names.put("Tuesday",   Weekday.TUE);
+        _names.put("Wednesday", Weekday.WED);
+        _names.put("Thursday",  Weekday.THU);
+        _names.put("Friday",    Weekday.FRI);
+        _names.put("Saturday",  Weekday.SAT);
+    }
+
+    /**
+     * Returns the weekday associated with the index.
+     * @param index Index of the weekday (1...7).
+     * @return Associated weekday.
+     */
+    public static Weekday weekday(int index) {
+        return _weekdays[index];
+    }
+
+    /**
+     * Returns the weekday associated with the name.
+     * @param str Weekday name.
+     * @return Associated weekday; <code>null</code> if invalid string.
+     */
+    public static Weekday weekday(String str) {
+        Weekday weekday;
+        if (str.length() == 3) {
+            try {
+                weekday = Enum.valueOf(Weekday.class, str.toUpperCase());
+            } catch (IllegalArgumentException iae) {
+                weekday = null;
+            }
+        } else {
+            weekday = _names.get(str.toLowerCase());
+        }
+        return weekday;
+    }
+
+///////////////////////////////////////////////////////////////////////////////////////////////////
+// Field Variables & Constructor
+
+    // private field variables
+    private final boolean               _isWeekend;         // true if weekend; false otherwise
+    private final int                   _weekday;           // index of the weekday
+
+    /**
+     * Constructor.
+     * @param   weekday     Weekday index.
+     * @param   isWeekend   <code>true</code> if weekend; <code>false</code> otherwise.
+     */
+    private Weekday(int weekday, boolean isWeekend) {
+        _weekday = weekday;
+        _isWeekend = isWeekend;
+    }
+
+///////////////////////////////////////////////////////////////////////////////////////////////////
+// Business Logic
+
+    /**
+     * Indicates if day is a weekday.
+     * @return  <code>true</code> if weekday; <code>false</code> if weekend.
+     */
+    public boolean isWeekday() {
+        return ! _isWeekend;
+    }
+
+    /**
+     * Indicates if day is a weekend.
+     * @return  <code>true</code> if weekend; <code>false</code> if weekday.
+     */
+    public boolean isWeekend() {
+        return _isWeekend;
+    }
+
+    /**
+     * Returns a string representation of the weekday.
+     * @return Weekday abbreviation.
+     */
+    public String toString() {
+        return name();
+    }
+
+///////////////////////////////////////////////////////////////////////////////////////////////////
+// Get & Set Methods
+
+    /**
+     * Returns the weekday abbreviated name.
+     * @return Weekday abbreviation (SUN, MON, ..., SAT).
+     */
+    public String getAbbrev() {
+        return name();
+    }
+
+    /**
+     * Returns the weekday full name.
+     * @return Weekday name (Sunday, Monday, ..., Saturday).
+     */
+    public String getFullName() {
+        return FULL_NAME[_weekday];
+    }
+
+    /**
+     * Returns the weekday index.
+     * @return Index of the weekday (1...7).
+     */
+    public int getValue() {
+        return _weekday;
+    }
+}

From 029d7d1483c7c80d66a3a789b2b65150a1e4cdca Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 6 Nov 2005 13:57:45 +0000
Subject: [PATCH 073/130] Holiday rules version 2

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@930 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../org/joda/time/contrib/holiday/src/GB.xml  | 162 ++++++++++++------
 .../time/contrib/holiday/src/joda-holiday.dtd |  28 +--
 2 files changed, 115 insertions(+), 75 deletions(-)

diff --git a/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/src/GB.xml b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/src/GB.xml
index 8ceb0dacb..3a7eda0a1 100644
--- a/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/src/GB.xml
+++ b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/src/GB.xml
@@ -16,37 +16,102 @@
   -->
 <!--
   - Holiday information for GB locale.
+  - GB is divided into 4 nations:
+  - - GB-ENG - England
+  - - GB-WLS - Wales
+  - - GB-SCT - Scotland
+  - - GB-NIR - Northern Ireland
   -
   - This data is by no means authoritative, and has been collated from various
   - sources. If you think you know better feel free to edit the file.
   - Please send any changes or information to
-  - joda-time-holiday@lists.sourceforge.net to benefit other users.
+  - joda-time@lists.sourceforge.net to benefit other users.
   -->
 <!DOCTYPE joda-holiday-information SYSTEM "joda-holiday.dtd">
 <joda-holiday-information>
   <!-- GB -->
   <!-- Source: http://www.dti.gov.uk/er/bankhol.htm -->
   <!-- Source: http://www.dti.gov.uk/er/bankhis.htm -->
-  <locale-holiday-information visible="false">
-    <country>GB</country>
+  <holiday-information id="GB">
     <week>
       <weekendStart>6</weekendStart>
       <weekendEnd>7</weekendEnd>
     </week>
-    <days type="State">
-      <name lang="en">Bank Holiday</name>
+    <days type="Named">
+      <day type="NewYear">
+        <name lang="en">New Year's Day</name>
+        <dayRule monthOfYear="1" dayOfMonth="1" />
+      </day>
+      <day type="ValentinesDay">
+        <name lang="en">Valentines Day</name>
+        <dayRule monthOfYear="2" dayOfMonth="14" />
+      </day>
+      <day type="ShroveTuesday">
+        <name lang="en">Shrove Tuesday</name>
+        <dayRule basedOn="GregorianEaster" relativeDays="-47" />
+      </day>
+      <day type="MothersDay">
+        <name lang="en">Mother's Day</name>
+        <dayRule basedOn="GregorianEaster" relativeDays="-21" />
+      </day>
       <day type="GoodFriday">
         <name lang="en">Good Friday</name>
-        <dayRule fromYear="1871" basedOn="GregorianEaster" relativeDays="-2" />
+        <dayRule basedOn="GregorianEaster" relativeDays="-2" />
       </day>
       <day type="Easter">
-        <name lang="en">Easter Day</name>
-        <dayRule fromYear="1871" basedOn="GregorianEaster" />
+        <name lang="en">Easter</name>
+        <dayRule basedOn="GregorianEaster" />
+      </day>
+      <day type="AprilFoolsDay">
+        <name lang="en">April Fool's Day</name>
+        <dayRule monthOfYear="4" dayOfMonth="1" />
+      </day>
+      <day type="MayDay">
+        <name lang="en">May Day</name>
+        <dayRule monthOfYear="5" dayOfMonth="1" />
+      </day>
+      <day type="Halloween">
+        <name lang="en">Halloween</name>
+        <dayRule monthOfYear="10" dayOfMonth="31" />
+      </day>
+      <day type="GuyFawkesNight">
+        <name lang="en">Guy Fawkes Night</name>
+        <dayRule monthOfYear="11" dayOfMonth="5" />
+      </day>
+      <day type="RemembranceSunday">
+        <name lang="en">Remembrance Sunday</name>
+        <dayRule monthOfYear="11" weekOfMonth="2" dayOfWeek="7" />
+      </day>
+      <day type="RemembranceDay">
+        <name lang="en">Remembrance Day</name>
+        <dayRule monthOfYear="11" dayOfMonth="11" />
+      </day>
+      <day type="ChristmasEve">
+        <name lang="en">Christmas Eve</name>
+        <dayRule monthOfYear="12" dayOfMonth="24" />
+      </day>
+      <day type="ChristmasDay">
+        <name lang="en">Christmas Day</name>
+        <dayRule monthOfYear="12" dayOfMonth="25" />
+      </day>
+      <day type="BoxingDay">
+        <name lang="en">Boxing Day</name>
+        <dayRule monthOfYear="12" dayOfMonth="26" />
+      </day>
+      <day type="NewYearsEve">
+        <name lang="en">New Year's Eve</name>
+        <dayRule monthOfYear="12" dayOfMonth="31" />
+      </day>
+    </days>
+    <days type="Public">
+      <name lang="en">Bank Holiday</name>
+      <day type="GoodFriday">
+        <name lang="en">Good Friday</name>
+        <dayRule fromYear="1871" basedOn="GregorianEaster" relativeDays="-2" />
       </day>
       <day type="ChristmasDay">
         <name lang="en">Christmas Day</name>
-        <baseRule monthOfYear="12" dayOfMonth="25" />
-        <dayRule fromYear="1871" weekendAdjust="NextWeekday" />
+        <dayRule fromYear="1871" monthOfYear="12" dayOfMonth="25" weekendAdjust="NextWeekday" />
       </day>
       <day type="MilleniumDay">
         <name lang="en">Millenium Day</name>
@@ -61,34 +126,31 @@
         <dayRule year="1981" monthOfYear="7" dayOfMonth="29" />
       </day>
     </days>
-  </locale-holiday-information>
+  </holiday-information>
   
   <!-- GB/England -->
-  <locale-holiday-information>
-    <country>GB</country>
-    <region>England</region>
-    <days type="State">
+  <holiday-information id="GB-ENG" base="GB">
+    <days type="Public">
       <day type="NewYear">
         <name lang="en">New Year's Day</name>
-        <baseRule monthOfYear="1" dayOfMonth="1" />
-        <dayRule fromYear="1974" weekendAdjust="NextWeekday" />
+        <dayRule fromYear="1974" monthOfYear="1" dayOfMonth="1" weekendAdjust="NextWeekday" />
       </day>
       <day type="EasterMonday">
         <name lang="en">Easter Monday</name>
         <dayRule fromYear="1871" basedOn="GregorianEaster" relativeDays="1" />
       </day>
-      <day type="MayDay">
-        <name lang="en">May Day Bank Holiday</name>
+      <day type="EarlyMay">
+        <name lang="en">Early May Bank Holiday</name>
         <dayRule fromYear="1978" monthOfYear="5" weekOfMonth="1" dayOfWeek="1" />
         <dayRule year="1995" monthOfYear="5" dayOfMonth="8" />
       </day>
       <day type="WhitMonday">
         <name lang="en">Whit Monday</name>
-        <dayRule fromYear="1871" toYear="1964" basedOn="GregorianEaster" relativeDays="50" />
+        <dayRule fromYear="1871" toYear="1966" basedOn="GregorianEaster" relativeDays="50" />
       </day>
       <day type="Spring">
         <name lang="en">Spring Bank Holiday</name>
-        <dayRule fromYear="1965" monthOfYear="5" weekOfMonth="-1" dayOfWeek="1" />
+        <dayRule fromYear="1967" monthOfYear="5" weekOfMonth="-1" dayOfWeek="1" />
         <dayRule year="2002" monthOfYear="6" dayOfMonth="4" />
       </day>
       <day type="Summer">
@@ -101,66 +163,56 @@
         <dayRule fromYear="1871" basedOn="ChristmasDay" relativeDays="1" />
       </day>
     </days>
-  </locale-holiday-information>
+  </holiday-information>
   
   <!-- GB/Wales -->
-  <locale-holiday-information baseRegion="England">
-    <country>GB</country>
-    <region>Wales</region>
-  </locale-holiday-information>
+  <holiday-information id="GB-WLS" base="GB-ENG">
+  </holiday-information>
   
   <!-- GB/Scotland -->
-  <locale-holiday-information>
-    <country>GB</country>
-    <region>Scotland</region>
-    <days type="State">
+  <holiday-information id="GB-SCT" base="GB">
+    <days type="Public">
       <day type="NewYear">
         <name lang="en">New Year's Day</name>
-        <baseRule monthOfYear="1" dayOfMonth="1" />
-        <dayRule fromYear="1871" weekendAdjust="NextWeekday" />
+        <dayRule fromYear="1871" monthOfYear="1" dayOfMonth="1" weekendAdjust="NextWeekday" />
       </day>
-      <day type="MayDay">
-        <name lang="en">May Day Bank Holiday</name>
+      <day type="Hogmanay">
+        <name lang="en">Hogmanay</name>
+        <dayRule fromYear="1973" basedOn="NewYear" relativeDays="1" />
+      </day>
+      <day type="EarlyMay">
+        <name lang="en">Early May Bank Holiday</name>
         <dayRule fromYear="1871" monthOfYear="5" weekOfMonth="1" dayOfWeek="1" />
         <dayRule year="1995" monthOfYear="5" dayOfMonth="8" />
       </day>
+      <day type="Spring">
+        <name lang="en">Spring Bank Holiday</name>
+        <dayRule fromYear="1978" monthOfYear="5" weekOfMonth="-1" dayOfWeek="1" />
+        <dayRule year="2002" monthOfYear="6" dayOfMonth="4" />
+      </day>
       <day type="Summer">
         <name lang="en">Summer Bank Holiday</name>
         <dayRule fromYear="1871" monthOfYear="8" weekOfMonth="1" dayOfWeek="1" />
       </day>
-      <day type="Hogmanay">
-        <name lang="en">Hogmanay</name>
-        <baseRule monthOfYear="1" dayOfMonth="2" />
-        <dayRule fromYear="1973" basedOn="NewYear" relativeDays="1" />
-      </day>
       <day type="BoxingDay">
         <name lang="en">Boxing Day</name>
         <dayRule fromYear="1974" basedOn="ChristmasDay" relativeDays="1" />
       </day>
-      <day type="Spring">
-        <name lang="en">Spring Bank Holiday</name>
-        <dayRule fromYear="1978" monthOfYear="5" weekOfMonth="-1" dayOfWeek="1" />
-        <dayRule year="2002" monthOfYear="6" dayOfMonth="4" />
-      </day>
     </days>
-  </locale-holiday-information>
+  </holiday-information>
   
   <!-- GB/NorthernIreland -->
-  <locale-holiday-information baseRegion="England">
-    <country>GB</country>
-    <region>NorthernIreland</region>
-    <days type="State">
+  <holiday-information id="GB-NIR" base="GB-ENG">
+    <days type="Public">
       <day type="StPatricksDay">
         <name lang="en">St Patrick's Day</name>
-        <baseRule monthOfYear="3" dayOfMonth="17" />
-        <dayRule fromYear="1903" weekendAdjust="NextWeekday" />
+        <dayRule fromYear="1903" monthOfYear="3" dayOfMonth="17" weekendAdjust="NextWeekday" />
       </day>
       <day type="BattleOfTheBoyne">
         <name lang="en">Battle of the Boyne</name>
-        <baseRule monthOfYear="7" dayOfMonth="12" />
-        <dayRule fromYear="1926" weekendAdjust="NextWeekday" />
+        <dayRule fromYear="1926" monthOfYear="7" dayOfMonth="12" weekendAdjust="NextWeekday" />
       </day>
     </days>
-  </locale-holiday-information>
-  
+  </holiday-information>
+
 </joda-holiday-information>
diff --git a/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/src/joda-holiday.dtd b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/src/joda-holiday.dtd
index 0997a84af..9a34f5e58 100644
--- a/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/src/joda-holiday.dtd
+++ b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/src/joda-holiday.dtd
@@ -1,10 +1,9 @@
 <!ELEMENT joda-holiday-information (locale-holiday-information*)>
-<!ELEMENT locale-holiday-information (country,region?,week?,days*)>
-<!ATTLIST locale-holiday-information
-  visible (true|false) 'true'
-  baseRegion CDATA #IMPLIED>
-<!ELEMENT country (#PCDATA)>
-<!ELEMENT region (#PCDATA)>
+<!ELEMENT holiday-information (id,week?,days*)>
+<!ATTLIST holiday-information
+  id CDATA #REQUIRED
+  base CDATA #IMPLIED
+  visible (true|false) 'true'>
 <!ELEMENT week (weekendStart,weekendEnd)>
 <!ELEMENT weekendStart (#PCDATA)>
 <!ELEMENT weekendEnd (#PCDATA)>
@@ -12,21 +11,9 @@
 <!ATTLIST days type CDATA #REQUIRED>
 <!ELEMENT name (#PCDATA)>
 <!ATTLIST name lang CDATA #REQUIRED>
-<!ELEMENT day (name*,baseRule?,dayRule*)>
+<!ELEMENT day (name*,dayRule*)>
 <!ATTLIST day type CDATA #REQUIRED>
 <!ELEMENT baseRule EMPTY>
-<!ATTLIST baseRule
-  repeat CDATA 'P1Y'
-  fromYear CDATA #IMPLIED
-  toYear CDATA #IMPLIED
-  year CDATA #IMPLIED
-  basedOn CDATA #IMPLIED
-  relativeDays CDATA #IMPLIED
-  monthOfYear CDATA #IMPLIED
-  dayOfMonth CDATA #IMPLIED
-  weekOfMonth CDATA #IMPLIED
-  dayOfWeek CDATA #IMPLIED
-  weekendAdjust (NextWeekday|PreviousWeekday|NearestWeekday) #IMPLIED>
 <!ELEMENT dayRule EMPTY>
 <!ATTLIST dayRule
   repeat CDATA 'P1Y'
@@ -39,4 +26,5 @@
   dayOfMonth CDATA #IMPLIED
   weekOfMonth CDATA #IMPLIED
   dayOfWeek CDATA #IMPLIED
-  weekendAdjust (NextWeekday|PreviousWeekday|NearestWeekday) #IMPLIED>
+  weekendAdjust (NextWeekday|PreviousWeekday|NearestWeekday) #IMPLIED
+  duration CDATA 'P1D'>

From d9e778cf024d28b51899275f28a83267296a5de5 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Thu, 24 Nov 2005 23:07:05 +0000
Subject: [PATCH 074/130] Add since tags

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@931 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/DateTime.java | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/JodaTime/src/java/org/joda/time/DateTime.java b/JodaTime/src/java/org/joda/time/DateTime.java
index 95771c99f..68636eafa 100644
--- a/JodaTime/src/java/org/joda/time/DateTime.java
+++ b/JodaTime/src/java/org/joda/time/DateTime.java
@@ -1500,6 +1500,7 @@ public DateTime setCopy(String text) {
          * The DateTime attached to this property is unchanged by this call.
          *
          * @return a copy of the DateTime with this field set to its maximum
+         * @since 1.2
          */
         public DateTime withMaximumValue() {
             return setCopy(getMaximumValue());
@@ -1512,6 +1513,7 @@ public DateTime withMaximumValue() {
          * The DateTime attached to this property is unchanged by this call.
          *
          * @return a copy of the DateTime with this field set to its minimum
+         * @since 1.2
          */
         public DateTime withMinimumValue() {
             return setCopy(getMinimumValue());

From c4788d953b68641523da625111e352132cafe90e Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 26 Nov 2005 15:26:53 +0000
Subject: [PATCH 075/130] Refactor getDateMidnightMillis to use getMaxMonth

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@932 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../joda/time/chrono/BaseGJChronology.java    | 52 ++++++++++++++++++-
 .../chrono/BasicFixedMonthChronology.java     | 15 ++----
 .../joda/time/chrono/BasicGJChronology.java   |  8 ---
 3 files changed, 56 insertions(+), 19 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java b/JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java
index ba3adc98e..326472a1c 100644
--- a/JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java
@@ -583,7 +583,12 @@ int getDaysInMonthMaxForSet(long instant, int value) {
      * @param dayOfMonth  the day
      * @return the milliseconds
      */
-    abstract long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth);
+    long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {
+        FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());
+        FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));
+        FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));
+        return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);
+    }
 
     /**
      * Gets the difference between the two instants in years.
@@ -629,14 +634,59 @@ int getDaysInMonthMaxForSet(long instant, int value) {
      */
     abstract long getTotalMillisByYearMonth(int year, int month);
 
+    /**
+     * Gets the millisecond value of the first day of the year.
+     * 
+     * @return the milliseconds for the first of the year
+     */
     abstract long calculateFirstDayOfYearMillis(int year);
 
+    /**
+     * Gets the minimum supported year.
+     * 
+     * @return the year
+     */
     abstract int getMinYear();
 
+    /**
+     * Gets the maximum supported year.
+     * 
+     * @return the year
+     */
     abstract int getMaxYear();
 
+    /**
+     * Gets the maximum month for the specified year.
+     * This implementation calls getMaxMonth().
+     * 
+     * @param year  the year
+     * @return the maximum month value
+     */
+    int getMaxMonth(int year) {
+        return getMaxMonth();
+    }
+
+    /**
+     * Gets the maximum number of months.
+     * 
+     * @return 12
+     */
+    int getMaxMonth() {
+        return 12;
+    }
+
+    /**
+     * Gets an average value for the milliseconds per year.
+     * 
+     * @return the millis per year
+     */
     abstract long getAverageMillisPerYear();
 
+    /**
+     * Gets an average value for the milliseconds per month.
+     * 
+     * @return the millis per month
+     */
     abstract long getAverageMillisPerMonth();
 
     /**
diff --git a/JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java b/JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java
index 1bd6a728c..e401b3442 100644
--- a/JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java
@@ -17,10 +17,8 @@
 
 import org.joda.time.Chronology;
 import org.joda.time.DateTimeConstants;
-import org.joda.time.DateTimeFieldType;
 import org.joda.time.DurationField;
 import org.joda.time.DurationFieldType;
-import org.joda.time.field.FieldUtils;
 import org.joda.time.field.PreciseDurationField;
 
 /**
@@ -109,14 +107,6 @@ long getYearDifference(long minuendInstant, long subtrahendInstant) {
         return difference;
     }
 
-    //-----------------------------------------------------------------------
-    long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {
-        FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());
-        FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, 13);
-        FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));
-        return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);
-    }
-
     //-----------------------------------------------------------------------
     long getTotalMillisByYearMonth(int year, int month) {
         return (month * MILLIS_PER_MONTH);
@@ -154,6 +144,11 @@ int getMonthOfYear(long millis, int year) {
         return ((int) monthZeroBased) + 1;
     }
 
+    //-----------------------------------------------------------------------
+    int getMaxMonth() {
+        return 13;
+    }
+
     //-----------------------------------------------------------------------
     long getAverageMillisPerYear() {
         return MILLIS_PER_YEAR;
diff --git a/JodaTime/src/java/org/joda/time/chrono/BasicGJChronology.java b/JodaTime/src/java/org/joda/time/chrono/BasicGJChronology.java
index 644bffd85..a2f650e27 100644
--- a/JodaTime/src/java/org/joda/time/chrono/BasicGJChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/BasicGJChronology.java
@@ -136,14 +136,6 @@ int getDaysInMonthMaxForSet(long instant, int value) {
         return (value > 28 ? getDaysInMonthMax(instant) : 28);
     }
 
-    //-----------------------------------------------------------------------
-    long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {
-        FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());
-        FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, 12);
-        FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));
-        return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);
-    }
-
     //-----------------------------------------------------------------------
     long getTotalMillisByYearMonth(int year, int month) {
         if (isLeapYear(year)) {

From 82cf7fe2bd1a9e8eebda02b1e183ccf50fbdea13 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 26 Nov 2005 22:37:56 +0000
Subject: [PATCH 076/130] Refactoring in advance of Islamic Chronology

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@933 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../joda/time/chrono/BaseGJChronology.java    |  44 +--
 .../chrono/BasicDayOfYearDateTimeField.java   |   9 +-
 .../chrono/BasicFixedMonthChronology.java     |   2 +-
 .../joda/time/chrono/BasicGJChronology.java   |   8 +-
 .../chrono/BasicMonthOfYearDateTimeField.java | 340 ++++++++++++++++++
 .../chrono/GJMonthOfYearDateTimeField.java    | 299 +--------------
 6 files changed, 380 insertions(+), 322 deletions(-)
 create mode 100644 JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java

diff --git a/JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java b/JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java
index 326472a1c..954f93b3a 100644
--- a/JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java
@@ -276,10 +276,21 @@ protected void assemble(Fields fields) {
         fields.weekyears = fields.weekyear.getDurationField();
     }
 
+    //-----------------------------------------------------------------------
     /**
      * Get the number of days in the year.
-     * @param year The year to use.
-     * @return 366 if a leap year, otherwise 365.
+     *
+     * @return 366
+     */
+    int getDaysInYearMax() {
+        return 366;
+    }
+
+    /**
+     * Get the number of days in the year.
+     *
+     * @param year  the year to use
+     * @return 366 if a leap year, otherwise 365
      */
     int getDaysInYear(int year) {
         return isLeapYear(year) ? 366 : 365;
@@ -287,8 +298,9 @@ int getDaysInYear(int year) {
 
     /**
      * Get the number of weeks in the year.
-     * @param year  the year to use.
-     * @return number of weeks in the year.
+     *
+     * @param year  the year to use
+     * @return number of weeks in the year
      */
     int getWeeksInYear(int year) {
         long firstWeekMillis1 = getFirstWeekOfYearMillis(year);
@@ -298,7 +310,8 @@ int getWeeksInYear(int year) {
 
     /**
      * Get the millis for the first week of a year.
-     * @param year  the year to use.
+     *
+     * @param year  the year to use
      * @return millis
      */
     long getFirstWeekOfYearMillis(int year) {
@@ -335,10 +348,7 @@ long getYearMillis(int year) {
      */
     long getYearMonthMillis(int year, int month) {
         long millis = getYearMillis(year);
-        // month
-        if (month > 1) {
-            millis += getTotalMillisByYearMonth(year, month - 1);
-        }
+        millis += getTotalMillisByYearMonth(year, month);
         return millis;
     }
 
@@ -352,11 +362,7 @@ long getYearMonthMillis(int year, int month) {
      */
     long getYearMonthDayMillis(int year, int month, int dayOfMonth) {
         long millis = getYearMillis(year);
-        // month
-        if (month > 1) {
-            millis += getTotalMillisByYearMonth(year, month - 1);
-        }
-        // day
+        millis += getTotalMillisByYearMonth(year, month);
         return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;
     }
     
@@ -448,9 +454,7 @@ int getDayOfMonth(long millis, int year) {
      */
     int getDayOfMonth(long millis, int year, int month) {
         long dateMillis = getYearMillis(year);
-        if (month > 1) {
-            dateMillis += getTotalMillisByYearMonth(year, month - 1);
-        }
+        dateMillis += getTotalMillisByYearMonth(year, month);
         return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;
     }
 
@@ -625,12 +629,12 @@ long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth) {
     abstract int getDaysInMonthMax(int month);
 
     /**
-     * Gets the total number of millis elapsed in this year at the end
-     * of the specified month.
+     * Gets the total number of millis elapsed in this year at the start
+     * of the specified month, such as zero for month 1.
      * 
      * @param year  the year
      * @param month  the month
-     * @return the elapsed millis
+     * @return the elapsed millis at the start of the month
      */
     abstract long getTotalMillisByYearMonth(int year, int month);
 
diff --git a/JodaTime/src/java/org/joda/time/chrono/BasicDayOfYearDateTimeField.java b/JodaTime/src/java/org/joda/time/chrono/BasicDayOfYearDateTimeField.java
index 14c8dfc3d..94714a21c 100644
--- a/JodaTime/src/java/org/joda/time/chrono/BasicDayOfYearDateTimeField.java
+++ b/JodaTime/src/java/org/joda/time/chrono/BasicDayOfYearDateTimeField.java
@@ -61,7 +61,7 @@ public int getMinimumValue() {
     }
 
     public int getMaximumValue() {
-        return 366;
+        return iChronology.getDaysInYearMax();
     }
 
     public int getMaximumValue(long instant) {
@@ -74,7 +74,7 @@ public int getMaximumValue(ReadablePartial partial) {
             int year = partial.get(DateTimeFieldType.year());
             return iChronology.getDaysInYear(year);
         }
-        return 366;
+        return iChronology.getDaysInYearMax();
     }
 
     public int getMaximumValue(ReadablePartial partial, int[] values) {
@@ -85,11 +85,12 @@ public int getMaximumValue(ReadablePartial partial, int[] values) {
                 return iChronology.getDaysInYear(year);
             }
         }
-        return 366;
+        return iChronology.getDaysInYearMax();
     }
 
     protected int getMaximumValueForSet(long instant, int value) {
-        return value > 365 ? getMaximumValue(instant) : 365;
+        int maxLessOne = iChronology.getDaysInYearMax() - 1;
+        return value > maxLessOne ? getMaximumValue(instant) : maxLessOne;
     }
 
     /**
diff --git a/JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java b/JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java
index e401b3442..99530ca33 100644
--- a/JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java
@@ -109,7 +109,7 @@ long getYearDifference(long minuendInstant, long subtrahendInstant) {
 
     //-----------------------------------------------------------------------
     long getTotalMillisByYearMonth(int year, int month) {
-        return (month * MILLIS_PER_MONTH);
+        return ((month - 1) * MILLIS_PER_MONTH);
     }
 
     //-----------------------------------------------------------------------
diff --git a/JodaTime/src/java/org/joda/time/chrono/BasicGJChronology.java b/JodaTime/src/java/org/joda/time/chrono/BasicGJChronology.java
index a2f650e27..1cf2a941e 100644
--- a/JodaTime/src/java/org/joda/time/chrono/BasicGJChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/BasicGJChronology.java
@@ -17,8 +17,6 @@
 
 import org.joda.time.Chronology;
 import org.joda.time.DateTimeConstants;
-import org.joda.time.DateTimeFieldType;
-import org.joda.time.field.FieldUtils;
 
 /**
  * Abstract Chronology for implementing chronologies based on Gregorian/Julian formulae.
@@ -57,16 +55,16 @@
 
         long minSum = 0;
         long maxSum = 0;
-        for (int i=0; i<12; i++) {
+        for (int i = 0; i < 11; i++) {
             long millis = MIN_DAYS_PER_MONTH_ARRAY[i]
                 * (long)DateTimeConstants.MILLIS_PER_DAY;
             minSum += millis;
-            MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[i] = minSum;
+            MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = minSum;
 
             millis = MAX_DAYS_PER_MONTH_ARRAY[i]
                 * (long)DateTimeConstants.MILLIS_PER_DAY;
             maxSum += millis;
-            MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[i] = maxSum;
+            MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = maxSum;
         }
     }
 
diff --git a/JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java
new file mode 100644
index 000000000..1f7d42dd5
--- /dev/null
+++ b/JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java
@@ -0,0 +1,340 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.chrono;
+
+import org.joda.time.DateTimeConstants;
+import org.joda.time.DateTimeFieldType;
+import org.joda.time.DurationField;
+import org.joda.time.field.FieldUtils;
+import org.joda.time.field.ImpreciseDateTimeField;
+
+/**
+ * Provides time calculations for the month of the year component of time.
+ * <p>
+ * This implementation assumes 12 months at present.
+ *
+ * @author Guy Allard
+ * @author Stephen Colebourne
+ * @author Brian S O'Neill
+ * @since 1.0
+ */
+class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {
+
+    /** Serialization version */
+    private static final long serialVersionUID = -8258715387168736L;
+
+    private static final int MIN = DateTimeConstants.JANUARY;
+    private static final int MAX = DateTimeConstants.DECEMBER;
+
+    private final BaseGJChronology iChronology;
+    private final int iLeapMonth;
+
+    /**
+     * Restricted constructor.
+     * 
+     * @param the dayOfYear that is the leap day
+     */
+    BasicMonthOfYearDateTimeField(BaseGJChronology chronology, int leapMonth) {
+        super(DateTimeFieldType.monthOfYear(), chronology.getAverageMillisPerMonth());
+        iChronology = chronology;
+        iLeapMonth = leapMonth;
+    }
+
+    //-----------------------------------------------------------------------
+    public boolean isLenient() {
+        return false;
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Get the Month component of the specified time instant.
+     *
+     * @see org.joda.time.DateTimeField#get(long)
+     * @see org.joda.time.ReadableDateTime#getMonthOfYear()
+     * @param instant  the time instant in millis to query.
+     * @return the month extracted from the input.
+     */
+    public int get(long instant) {
+        return iChronology.getMonthOfYear(instant);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Add the specified month to the specified time instant.
+     * The amount added may be negative.<p>
+     * If the new month has less total days than the specified
+     * day of the month, this value is coerced to the nearest
+     * sane value. e.g.<p>
+     * 07-31 - (1 month) = 06-30<p>
+     * 03-31 - (1 month) = 02-28 or 02-29 depending<p>
+     * 
+     * @see org.joda.time.DateTimeField#add
+     * @see org.joda.time.ReadWritableDateTime#addMonths(int)
+     * @param instant  the time instant in millis to update.
+     * @param months  the months to add (can be negative).
+     * @return the updated time instant.
+     */
+    public long add(long instant, int months) {
+        if (months == 0) {
+            return instant; // the easy case
+        }
+        //
+        // Save time part first.
+        //
+        long timePart = iChronology.getMillisOfDay(instant);
+        //
+        //
+        // Get this year and month.
+        //
+        int thisYear = iChronology.getYear(instant);
+        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);
+        // ----------------------------------------------------------
+        //
+        // Do not refactor without careful consideration.
+        // Order of calculation is important.
+        //
+        int yearToUse;
+        // Initially, monthToUse is zero-based
+        int monthToUse = thisMonth - 1 + months;
+        if (monthToUse >= 0) {
+            yearToUse = thisYear + (monthToUse / MAX);
+            monthToUse = (monthToUse % MAX) + 1;
+        } else {
+            yearToUse = thisYear + (monthToUse / MAX) - 1;
+            monthToUse = Math.abs(monthToUse);
+            int remMonthToUse = monthToUse % MAX;
+            // Take care of the boundary condition
+            if (remMonthToUse == 0) {
+                remMonthToUse = MAX;
+            }
+            monthToUse = MAX - remMonthToUse + 1;
+            // Take care of the boundary condition
+            if (monthToUse == 1) {
+                yearToUse += 1;
+            }
+        }
+        // End of do not refactor.
+        // ----------------------------------------------------------
+
+        //
+        // Quietly force DOM to nearest sane value.
+        //
+        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);
+        int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);
+        if (dayToUse > maxDay) {
+            dayToUse = maxDay;
+        }
+        //
+        // get proper date part, and return result
+        //
+        long datePart =
+            iChronology.getYearMonthDayMillis(yearToUse, monthToUse, dayToUse);
+        return datePart + timePart;
+    }
+
+    //-----------------------------------------------------------------------
+    public long add(long instant, long months) {
+        int i_months = (int)months;
+        if (i_months == months) {
+            return add(instant, i_months);
+        }
+
+        // Copied from add(long, int) and modified slightly:
+
+        long timePart = iChronology.getMillisOfDay(instant);
+
+        int thisYear = iChronology.getYear(instant);
+        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);
+
+        long yearToUse;
+        long monthToUse = thisMonth - 1 + months;
+        if (monthToUse >= 0) {
+            yearToUse = thisYear + (monthToUse / MAX);
+            monthToUse = (monthToUse % MAX) + 1;
+        } else {
+            yearToUse = thisYear + (monthToUse / MAX) - 1;
+            monthToUse = Math.abs(monthToUse);
+            int remMonthToUse = (int)(monthToUse % MAX);
+            if (remMonthToUse == 0) {
+                remMonthToUse = MAX;
+            }
+            monthToUse = MAX - remMonthToUse + 1;
+            if (monthToUse == 1) {
+                yearToUse += 1;
+            }
+        }
+
+        if (yearToUse < iChronology.getMinYear() ||
+            yearToUse > iChronology.getMaxYear()) {
+
+            throw new IllegalArgumentException
+                ("Magnitude of add amount is too large: " + months);
+        }
+
+        int i_yearToUse = (int)yearToUse;
+        int i_monthToUse = (int)monthToUse;
+
+        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);
+        int maxDay = iChronology.getDaysInYearMonth(i_yearToUse, i_monthToUse);
+        if (dayToUse > maxDay) {
+            dayToUse = maxDay;
+        }
+
+        long datePart =
+            iChronology.getYearMonthDayMillis(i_yearToUse, i_monthToUse, dayToUse);
+        return datePart + timePart;
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Add to the Month component of the specified time instant
+     * wrapping around within that component if necessary.
+     * 
+     * @see org.joda.time.DateTimeField#addWrapField
+     * @param instant  the time instant in millis to update.
+     * @param months  the months to add (can be negative).
+     * @return the updated time instant.
+     */
+    public long addWrapField(long instant, int months) {
+        return set(instant, FieldUtils.getWrappedValue(get(instant), months, MIN, MAX));
+    }
+
+    //-----------------------------------------------------------------------
+    public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {
+        if (minuendInstant < subtrahendInstant) {
+            return -getDifference(subtrahendInstant, minuendInstant);
+        }
+
+        int minuendYear = iChronology.getYear(minuendInstant);
+        int minuendMonth = iChronology.getMonthOfYear(minuendInstant, minuendYear);
+        int subtrahendYear = iChronology.getYear(subtrahendInstant);
+        int subtrahendMonth = iChronology.getMonthOfYear(subtrahendInstant, subtrahendYear);
+
+        long difference = (minuendYear - subtrahendYear) * 12L + minuendMonth - subtrahendMonth;
+
+        // Before adjusting for remainder, account for special case of add
+        // where the day-of-month is forced to the nearest sane value.
+        int minuendDom = iChronology.getDayOfMonth
+            (minuendInstant, minuendYear, minuendMonth);
+        if (minuendDom == iChronology.getDaysInYearMonth(minuendYear, minuendMonth)) {
+            // Last day of the minuend month...
+            int subtrahendDom = iChronology.getDayOfMonth
+                (subtrahendInstant, subtrahendYear, subtrahendMonth);
+            if (subtrahendDom > minuendDom) {
+                // ...and day of subtrahend month is larger.
+                // Note: This works fine, but it ideally shouldn't invoke other
+                // fields from within a field.
+                subtrahendInstant = iChronology.dayOfMonth().set(subtrahendInstant, minuendDom);
+            }
+        }
+
+        // Inlined remainder method to avoid duplicate calls.
+        long minuendRem = minuendInstant
+            - iChronology.getYearMonthMillis(minuendYear, minuendMonth);
+        long subtrahendRem = subtrahendInstant
+            - iChronology.getYearMonthMillis(subtrahendYear, subtrahendMonth);
+
+        if (minuendRem < subtrahendRem) {
+            difference--;
+        }
+
+        return difference;
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Set the Month component of the specified time instant.<p>
+     * If the new month has less total days than the specified
+     * day of the month, this value is coerced to the nearest
+     * sane value. e.g.<p>
+     * 07-31 to month 6 = 06-30<p>
+     * 03-31 to month 2 = 02-28 or 02-29 depending<p>
+     * 
+     * @param instant  the time instant in millis to update.
+     * @param month  the month (1,12) to update the time to.
+     * @return the updated time instant.
+     * @throws IllegalArgumentException  if month is invalid
+     */
+    public long set(long instant, int month) {
+        FieldUtils.verifyValueBounds(this, month, MIN, MAX);
+        //
+        int thisYear = iChronology.getYear(instant);
+        //
+        int thisDom = iChronology.getDayOfMonth(instant, thisYear);
+        int maxDom = iChronology.getDaysInYearMonth(thisYear, month);
+        if (thisDom > maxDom) {
+            // Quietly force DOM to nearest sane value.
+            thisDom = maxDom;
+        }
+        // Return newly calculated millis value
+        return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +
+            iChronology.getMillisOfDay(instant);
+    }
+
+    //-----------------------------------------------------------------------
+    public DurationField getRangeDurationField() {
+        return iChronology.years();
+    }
+
+    //-----------------------------------------------------------------------
+    public boolean isLeap(long instant) {
+        int thisYear = iChronology.getYear(instant);
+        if (iChronology.isLeapYear(thisYear)) {
+            return (iChronology.getMonthOfYear(instant, thisYear) == iLeapMonth);
+        }
+        return false;
+    }
+
+    //-----------------------------------------------------------------------
+    public int getLeapAmount(long instant) {
+        return isLeap(instant) ? 1 : 0;
+    }
+
+    //-----------------------------------------------------------------------
+    public DurationField getLeapDurationField() {
+        return iChronology.days();
+    }
+
+    //-----------------------------------------------------------------------
+    public int getMinimumValue() {
+        return MIN;
+    }
+
+    //-----------------------------------------------------------------------
+    public int getMaximumValue() {
+        return MAX;
+    }
+
+    //-----------------------------------------------------------------------
+    public long roundFloor(long instant) {
+        int year = iChronology.getYear(instant);
+        int month = iChronology.getMonthOfYear(instant, year);
+        return iChronology.getYearMonthMillis(year, month);
+    }
+
+    //-----------------------------------------------------------------------
+    public long remainder(long instant) {
+        return instant - roundFloor(instant);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Serialization singleton
+     */
+    private Object readResolve() {
+        return iChronology.monthOfYear();
+    }
+}
diff --git a/JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java b/JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java
index caa3c8d98..5e9ef7e5a 100644
--- a/JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java
+++ b/JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java
@@ -17,12 +17,6 @@
 
 import java.util.Locale;
 
-import org.joda.time.DateTimeConstants;
-import org.joda.time.DateTimeFieldType;
-import org.joda.time.DurationField;
-import org.joda.time.field.FieldUtils;
-import org.joda.time.field.ImpreciseDateTimeField;
-
 /**
  * Provides time calculations for the month of the year component of time.
  *
@@ -31,320 +25,41 @@
  * @author Brian S O'Neill
  * @since 1.0
  */
-final class GJMonthOfYearDateTimeField extends ImpreciseDateTimeField {
+final class GJMonthOfYearDateTimeField extends BasicMonthOfYearDateTimeField {
 
     /** Serialization version */
     private static final long serialVersionUID = -4748157875845286249L;
 
-    private static final int MIN = DateTimeConstants.JANUARY;
-    private static final int MAX = DateTimeConstants.DECEMBER;
-
-    private final BaseGJChronology iChronology;
-
     /**
      * Restricted constructor
      */
     GJMonthOfYearDateTimeField(BaseGJChronology chronology) {
-        super(DateTimeFieldType.monthOfYear(), chronology.getAverageMillisPerMonth());
-        iChronology = chronology;
-    }
-
-    public boolean isLenient() {
-        return false;
-    }
-
-    /**
-     * Get the Month component of the specified time instant.
-     *
-     * @see org.joda.time.DateTimeField#get(long)
-     * @see org.joda.time.ReadableDateTime#getMonthOfYear()
-     * @param instant  the time instant in millis to query.
-     * @return the month extracted from the input.
-     */
-    public int get(long instant) {
-        return iChronology.getMonthOfYear(instant);
+        super(chronology, 2);
     }
 
+    //-----------------------------------------------------------------------
     public String getAsText(int fieldValue, Locale locale) {
         return GJLocaleSymbols.forLocale(locale).monthOfYearValueToText(fieldValue);
     }
 
+    //-----------------------------------------------------------------------
     public String getAsShortText(int fieldValue, Locale locale) {
         return GJLocaleSymbols.forLocale(locale).monthOfYearValueToShortText(fieldValue);
     }
 
-    /**
-     * Add the specified month to the specified time instant.
-     * The amount added may be negative.<p>
-     * If the new month has less total days than the specified
-     * day of the month, this value is coerced to the nearest
-     * sane value. e.g.<p>
-     * 07-31 - (1 month) = 06-30<p>
-     * 03-31 - (1 month) = 02-28 or 02-29 depending<p>
-     * 
-     * @see org.joda.time.DateTimeField#add
-     * @see org.joda.time.ReadWritableDateTime#addMonths(int)
-     * @param instant  the time instant in millis to update.
-     * @param months  the months to add (can be negative).
-     * @return the updated time instant.
-     */
-    public long add(long instant, int months) {
-        if (months == 0) {
-            return instant; // the easy case
-        }
-        //
-        // Save time part first.
-        //
-        long timePart = iChronology.getMillisOfDay(instant);
-        //
-        //
-        // Get this year and month.
-        //
-        int thisYear = iChronology.getYear(instant);
-        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);
-        // ----------------------------------------------------------
-        //
-        // Do not refactor without careful consideration.
-        // Order of calculation is important.
-        //
-        int yearToUse;
-        // Initially, monthToUse is zero-based
-        int monthToUse = thisMonth - 1 + months;
-        if (monthToUse >= 0) {
-            yearToUse = thisYear + (monthToUse / MAX);
-            monthToUse = (monthToUse % MAX) + 1;
-        } else {
-            yearToUse = thisYear + (monthToUse / MAX) - 1;
-            monthToUse = Math.abs(monthToUse);
-            int remMonthToUse = monthToUse % MAX;
-            // Take care of the boundary condition
-            if (remMonthToUse == 0) {
-                remMonthToUse = MAX;
-            }
-            monthToUse = MAX - remMonthToUse + 1;
-            // Take care of the boundary condition
-            if (monthToUse == 1) {
-                yearToUse += 1;
-            }
-        }
-        // End of do not refactor.
-        // ----------------------------------------------------------
-
-        //
-        // Quietly force DOM to nearest sane value.
-        //
-        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);
-        int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);
-        if (dayToUse > maxDay) {
-            dayToUse = maxDay;
-        }
-        //
-        // get proper date part, and return result
-        //
-        long datePart =
-            iChronology.getYearMonthDayMillis(yearToUse, monthToUse, dayToUse);
-        return datePart + timePart;
-    }
-
-    public long add(long instant, long months) {
-        int i_months = (int)months;
-        if (i_months == months) {
-            return add(instant, i_months);
-        }
-
-        // Copied from add(long, int) and modified slightly:
-
-        long timePart = iChronology.getMillisOfDay(instant);
-
-        int thisYear = iChronology.getYear(instant);
-        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);
-
-        long yearToUse;
-        long monthToUse = thisMonth - 1 + months;
-        if (monthToUse >= 0) {
-            yearToUse = thisYear + (monthToUse / MAX);
-            monthToUse = (monthToUse % MAX) + 1;
-        } else {
-            yearToUse = thisYear + (monthToUse / MAX) - 1;
-            monthToUse = Math.abs(monthToUse);
-            int remMonthToUse = (int)(monthToUse % MAX);
-            if (remMonthToUse == 0) {
-                remMonthToUse = MAX;
-            }
-            monthToUse = MAX - remMonthToUse + 1;
-            if (monthToUse == 1) {
-                yearToUse += 1;
-            }
-        }
-
-        if (yearToUse < iChronology.getMinYear() ||
-            yearToUse > iChronology.getMaxYear()) {
-
-            throw new IllegalArgumentException
-                ("Magnitude of add amount is too large: " + months);
-        }
-
-        int i_yearToUse = (int)yearToUse;
-        int i_monthToUse = (int)monthToUse;
-
-        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);
-        int maxDay = iChronology.getDaysInYearMonth(i_yearToUse, i_monthToUse);
-        if (dayToUse > maxDay) {
-            dayToUse = maxDay;
-        }
-
-        long datePart =
-            iChronology.getYearMonthDayMillis(i_yearToUse, i_monthToUse, dayToUse);
-        return datePart + timePart;
-    }
-
-    /**
-     * Add to the Month component of the specified time instant
-     * wrapping around within that component if necessary.
-     * 
-     * @see org.joda.time.DateTimeField#addWrapField
-     * @param instant  the time instant in millis to update.
-     * @param months  the months to add (can be negative).
-     * @return the updated time instant.
-     */
-    public long addWrapField(long instant, int months) {
-        return set(instant, FieldUtils.getWrappedValue(get(instant), months, MIN, MAX));
-    }
-
-    public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {
-        if (minuendInstant < subtrahendInstant) {
-            return -getDifference(subtrahendInstant, minuendInstant);
-        }
-
-        int minuendYear = iChronology.getYear(minuendInstant);
-        int minuendMonth = iChronology.getMonthOfYear(minuendInstant, minuendYear);
-        int subtrahendYear = iChronology.getYear(subtrahendInstant);
-        int subtrahendMonth = iChronology.getMonthOfYear(subtrahendInstant, subtrahendYear);
-
-        long difference = (minuendYear - subtrahendYear) * 12L + minuendMonth - subtrahendMonth;
-
-        // Before adjusting for remainder, account for special case of add
-        // where the day-of-month is forced to the nearest sane value.
-        int minuendDom = iChronology.getDayOfMonth
-            (minuendInstant, minuendYear, minuendMonth);
-        if (minuendDom == iChronology.getDaysInYearMonth(minuendYear, minuendMonth)) {
-            // Last day of the minuend month...
-            int subtrahendDom = iChronology.getDayOfMonth
-                (subtrahendInstant, subtrahendYear, subtrahendMonth);
-            if (subtrahendDom > minuendDom) {
-                // ...and day of subtrahend month is larger.
-                // Note: This works fine, but it ideally shouldn't invoke other
-                // fields from within a field.
-                subtrahendInstant = iChronology.dayOfMonth().set(subtrahendInstant, minuendDom);
-            }
-        }
-
-        // Inlined remainder method to avoid duplicate calls.
-        long minuendRem = minuendInstant
-            - iChronology.getYearMonthMillis(minuendYear, minuendMonth);
-        long subtrahendRem = subtrahendInstant
-            - iChronology.getYearMonthMillis(subtrahendYear, subtrahendMonth);
-
-        if (minuendRem < subtrahendRem) {
-            difference--;
-        }
-
-        return difference;
-    }
-
-    /**
-     * Set the Month component of the specified time instant.<p>
-     * If the new month has less total days than the specified
-     * day of the month, this value is coerced to the nearest
-     * sane value. e.g.<p>
-     * 07-31 to month 6 = 06-30<p>
-     * 03-31 to month 2 = 02-28 or 02-29 depending<p>
-     * 
-     * @param instant  the time instant in millis to update.
-     * @param month  the month (1,12) to update the time to.
-     * @return the updated time instant.
-     * @throws IllegalArgumentException  if month is invalid
-     */
-    public long set(long instant, int month) {
-        FieldUtils.verifyValueBounds(this, month, MIN, MAX);
-        //
-        int thisYear = iChronology.getYear(instant);
-        //
-        int thisDom = iChronology.getDayOfMonth(instant, thisYear);
-        int maxDom = iChronology.getDaysInYearMonth(thisYear, month);
-        if (thisDom > maxDom) {
-            // Quietly force DOM to nearest sane value.
-            thisDom = maxDom;
-        }
-        // Return newly calculated millis value
-        return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +
-            iChronology.getMillisOfDay(instant);
-    }
-
-    /**
-     * Convert the specified text and locale into a value.
-     * 
-     * @param text  the text to convert
-     * @param locale  the locale to convert using
-     * @return the value extracted from the text
-     * @throws IllegalArgumentException if the text is invalid
-     */
+    //-----------------------------------------------------------------------
     protected int convertText(String text, Locale locale) {
         return GJLocaleSymbols.forLocale(locale).monthOfYearTextToValue(text);
     }
 
-    public DurationField getRangeDurationField() {
-        return iChronology.years();
-    }
-
-    public boolean isLeap(long instant) {
-        int thisYear = iChronology.getYear(instant);
-        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);
-        if (thisMonth != 2) {
-            return false;
-        } else {
-            return 29 == iChronology.getDaysInYearMonth(thisYear, thisMonth);
-        }
-    }
-
-    public int getLeapAmount(long instant) {
-        return isLeap(instant) ? 1 : 0;
-    }
-
-    public DurationField getLeapDurationField() {
-        return iChronology.days();
-    }
-
-    public int getMinimumValue() {
-        return MIN;
-    }
-
-    public int getMaximumValue() {
-        return MAX;
-    }
-
+    //-----------------------------------------------------------------------
     public int getMaximumTextLength(Locale locale) {
         return GJLocaleSymbols.forLocale(locale).getMonthMaxTextLength();
     }
 
+    //-----------------------------------------------------------------------
     public int getMaximumShortTextLength(Locale locale) {
         return GJLocaleSymbols.forLocale(locale).getMonthMaxShortTextLength();
     }
 
-    public long roundFloor(long instant) {
-        int year = iChronology.getYear(instant);
-        int month = iChronology.getMonthOfYear(instant, year);
-        return iChronology.getYearMonthMillis(year, month);
-    }
-
-    public long remainder(long instant) {
-        return instant - roundFloor(instant);
-    }
-
-    /**
-     * Serialization singleton
-     */
-    private Object readResolve() {
-        return iChronology.monthOfYear();
-    }
 }

From 6ca2038820082b2f0b739cc4048d02e3d83b4412 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 26 Nov 2005 22:38:23 +0000
Subject: [PATCH 077/130] Add Islamic Chronology

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@934 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |   3 +-
 .../joda/time/chrono/IslamicChronology.java   | 526 +++++++++++++
 .../test/org/joda/time/chrono/TestAll.java    |   1 +
 .../time/chrono/TestIslamicChronology.java    | 695 ++++++++++++++++++
 4 files changed, 1224 insertions(+), 1 deletion(-)
 create mode 100644 JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java
 create mode 100644 JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 4bdd73f84..2552819ef 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -72,8 +72,9 @@ Bug fixes since 1.1
 
 Enhancements since 1.1
 ----------------------
+- IslamicChronology
 - EthiopicChronology
-  New Chronology which implements similar rules to Coptic
+  New Chronologies
 
 - DateTime.Property.withMaximumValue() (also DateMidnight/YearMonthDay etc)
 - DateTime.Property.withMinimumValue()
diff --git a/JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java b/JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java
new file mode 100644
index 000000000..44be989cb
--- /dev/null
+++ b/JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java
@@ -0,0 +1,526 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.chrono;
+
+import java.io.Serializable;
+import java.util.HashMap;
+import java.util.Map;
+
+import org.joda.time.Chronology;
+import org.joda.time.DateTime;
+import org.joda.time.DateTimeConstants;
+import org.joda.time.DateTimeField;
+import org.joda.time.DateTimeZone;
+
+/**
+ * Implements the Islamic, or Hijri, calendar system using arithmetic rules.
+ * <p>
+ * This calendar is a lunar calendar with a shorter year than ISO.
+ * Year 1 in the Islamic calendar began on July 16, 622 CE (Julian), thus
+ * Islamic years do not begin at the same time as Julian years. This chronology
+ * is not proleptic, as it does not allow dates before the first Islamic year.
+ * <p>
+ * There are two basic forms of the Islamic calendar, the tabular and the
+ * observed. The observed form cannot easily be used by computers as it
+ * relies on human observation of the new moon.
+ * The tabular calendar, implemented here, is an arithmetical approximation
+ * of the observed form that follows relatively simple rules.
+ * <p>
+ * The tabular form of the calendar defines 12 months of alternately
+ * 30 and 29 days. The last month is extended to 30 days in a leap year.
+ * Leap years occur according to a 30 year cycle. There are four recognised
+ * patterns of leap years in the 30 year cycle:
+ * <pre>
+ * Years 2, 5, 7, 10, 13, 15, 18, 21, 24, 26 & 29 - 15-based, used by Microsoft
+ * Years 2, 5, 7, 10, 13, 16, 18, 21, 24, 26 & 29 - 16-based, most commonly used
+ * Years 2, 5, 8, 10, 13, 16, 19, 21, 24, 27 & 29 - Indian
+ * Years 2, 5, 8, 11, 13, 16, 19, 21, 24, 27 & 30 - Habash al-Hasib
+ * </pre>
+ * You can select which pattern to use via the factory methods, or use the
+ * default (16-based).
+ * <p>
+ * This implementation defines a day as midnight to midnight exactly as per
+ * the ISO chronology. This correct start of day is at sunset on the previous
+ * day, however this cannot readily be modelled and has been ignored.
+ * <p>
+ * IslamicChronology is thread-safe and immutable.
+ *
+ * @see <a href="http://en.wikipedia.org/wiki/Islamic_calendar">Wikipedia</a>
+ *
+ * @author Stephen Colebourne
+ * @since 1.2
+ */
+public final class IslamicChronology extends BaseGJChronology {
+
+    /** Serialization lock */
+    private static final long serialVersionUID = -3663823829888L;
+
+    /**
+     * Constant value for 'Anno Hegirae', equivalent
+     * to the value returned for AD/CE.
+     */
+    public static final int AH = DateTimeConstants.CE;
+
+    /** A singleton era field. */
+    private static final DateTimeField ERA_FIELD = new BasicSingleEraDateTimeField("AH");
+
+    /** Leap year 15-based pattern. */
+    public static final LeapYearPatternType LEAP_YEAR_15_BASED = new LeapYearPatternType(0, 623158436);
+    /** Leap year 16-based pattern. */
+    public static final LeapYearPatternType LEAP_YEAR_16_BASED = new LeapYearPatternType(1, 623191204);
+    /** Leap year Indian pattern. */
+    public static final LeapYearPatternType LEAP_YEAR_INDIAN = new LeapYearPatternType(2, 690562340);
+    /** Leap year Habash al-Hasib pattern. */
+    public static final LeapYearPatternType LEAP_YEAR_HABASH_AL_HASIB = new LeapYearPatternType(3, 153692453);
+
+    /** The lowest year that can be fully supported. */
+    private static final int MIN_YEAR = -292269337;
+
+    /**
+     * The highest year that can be fully supported.
+     * Although calculateFirstDayOfYearMillis can go higher without
+     * overflowing, the getYear method overflows when it adds the
+     * approximate millis at the epoch.
+     */
+    private static final int MAX_YEAR = 292271022;
+
+    /** The days in a pair of months. */
+    private static final int MONTH_PAIR_LENGTH = 59;
+
+    /** The length of the long month. */
+    private static final int LONG_MONTH_LENGTH = 30;
+
+    /** The length of the short month. */
+    private static final int SHORT_MONTH_LENGTH = 29;
+
+    /** The length of the long month in millis. */
+    private static final long MILLIS_PER_MONTH_PAIR = 59L * DateTimeConstants.MILLIS_PER_DAY;
+
+    /** The length of the long month in millis. */
+    private static final long MILLIS_PER_MONTH = (long) (29.53056 * DateTimeConstants.MILLIS_PER_DAY);
+
+    /** The length of the long month in millis. */
+    private static final long MILLIS_PER_LONG_MONTH = 30L * DateTimeConstants.MILLIS_PER_DAY;
+
+    /** The typical millis per year. */
+    private static final long MILLIS_PER_YEAR = (long) (354.36667 * DateTimeConstants.MILLIS_PER_DAY);
+
+    /** The typical millis per year. */
+    private static final long MILLIS_PER_SHORT_YEAR = 354L * DateTimeConstants.MILLIS_PER_DAY;
+
+    /** The typical millis per year. */
+    private static final long MILLIS_PER_LONG_YEAR = 355L * DateTimeConstants.MILLIS_PER_DAY;
+
+    /** The millis of 0001-01-01. */
+    private static final long MILLIS_YEAR_1 = -42521587200000L;
+                                    //        -42520809600000L;
+//    long start = 0L - 278L * DateTimeConstants.MILLIS_PER_DAY;
+//    long cy = 46L * MILLIS_PER_CYCLE;  // 1381-01-01
+//    long rem = 5L * MILLIS_PER_SHORT_YEAR +
+//            3L * MILLIS_PER_LONG_YEAR;  // 1389-01-01
+
+    /** The length of the cycle of leap years. */
+    private static final int CYCLE = 30;
+
+    /** The millis of a 30 year cycle. */
+    private static final long MILLIS_PER_CYCLE = ((19L * 354L + 11L * 355L) * DateTimeConstants.MILLIS_PER_DAY);
+
+    /** Cache of zone to chronology arrays */
+    private static final Map cCache = new HashMap();
+
+    /** Singleton instance of a UTC CopticChronology */
+    private static final IslamicChronology INSTANCE_UTC;
+    static {
+        // init after static fields
+        INSTANCE_UTC = getInstance(DateTimeZone.UTC);
+    }
+
+    /** The leap years to use. */
+    private final LeapYearPatternType iLeapYears;
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets an instance of the CopticChronology.
+     * The time zone of the returned instance is UTC.
+     * 
+     * @return a singleton UTC instance of the chronology
+     */
+    public static IslamicChronology getInstanceUTC() {
+        return INSTANCE_UTC;
+    }
+
+    /**
+     * Gets an instance of the CopticChronology in the default time zone.
+     * 
+     * @return a chronology in the default time zone
+     */
+    public static IslamicChronology getInstance() {
+        return getInstance(DateTimeZone.getDefault(), LEAP_YEAR_16_BASED);
+    }
+
+    /**
+     * Gets an instance of the CopticChronology in the given time zone.
+     * 
+     * @param zone  the time zone to get the chronology in, null is default
+     * @return a chronology in the specified time zone
+     */
+    public static IslamicChronology getInstance(DateTimeZone zone) {
+        return getInstance(zone, LEAP_YEAR_16_BASED);
+    }
+
+    /**
+     * Gets an instance of the CopticChronology in the given time zone.
+     * 
+     * @param zone  the time zone to get the chronology in, null is default
+     * @param leapYears  the type defining the leap year pattern
+     * @return a chronology in the specified time zone
+     */
+    public static IslamicChronology getInstance(DateTimeZone zone, LeapYearPatternType leapYears) {
+        if (zone == null) {
+            zone = DateTimeZone.getDefault();
+        }
+        IslamicChronology chrono;
+        synchronized (cCache) {
+            IslamicChronology[] chronos = (IslamicChronology[]) cCache.get(zone);
+            if (chronos == null) {
+                chronos = new IslamicChronology[4];
+                cCache.put(zone, chronos);
+            }
+            chrono = chronos[leapYears.index];
+            if (chrono == null) {
+                if (zone == DateTimeZone.UTC) {
+                    // First create without a lower limit.
+                    chrono = new IslamicChronology(null, null, leapYears);
+                    // Impose lower limit and make another IslamicChronology.
+                    DateTime lowerLimit = new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);
+                    chrono = new IslamicChronology(
+                        LimitChronology.getInstance(chrono, lowerLimit, null),
+                         null, leapYears);
+                } else {
+                    chrono = getInstance(DateTimeZone.UTC, leapYears);
+                    chrono = new IslamicChronology
+                        (ZonedChronology.getInstance(chrono, zone), null, leapYears);
+                }
+                chronos[leapYears.index] = chrono;
+            }
+        }
+        return chrono;
+    }
+
+    // Constructors and instance variables
+    //-----------------------------------------------------------------------
+    /**
+     * Restricted constructor.
+     */
+    IslamicChronology(Chronology base, Object param, LeapYearPatternType leapYears) {
+        super(base, param, 4);
+        this.iLeapYears = leapYears;
+    }
+
+    /**
+     * Serialization singleton.
+     */
+    private Object readResolve() {
+        Chronology base = getBase();
+        return base == null ? getInstanceUTC() : getInstance(base.getZone());
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the leap year pattern type.
+     *
+     * @return the pattern type
+     */
+    public LeapYearPatternType getLeapYearPatternType() {
+        return iLeapYears;
+    }
+
+    // Conversion
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the Chronology in the UTC time zone.
+     * 
+     * @return the chronology in UTC
+     */
+    public Chronology withUTC() {
+        return INSTANCE_UTC;
+    }
+
+    /**
+     * Gets the Chronology in a specific time zone.
+     * 
+     * @param zone  the zone to get the chronology in, null is default
+     * @return the chronology
+     */
+    public Chronology withZone(DateTimeZone zone) {
+        if (zone == null) {
+            zone = DateTimeZone.getDefault();
+        }
+        if (zone == getZone()) {
+            return this;
+        }
+        return getInstance(zone);
+    }
+
+    //-----------------------------------------------------------------------
+    int getYear(long instant) {
+        long millisIslamic = instant - MILLIS_YEAR_1;
+        long cycles = millisIslamic / MILLIS_PER_CYCLE;
+        long cycleRemainder = millisIslamic % MILLIS_PER_CYCLE;
+        
+        int year = (int) ((cycles * CYCLE) + 1L);
+        long yearMillis = (isLeapYear(year) ? MILLIS_PER_LONG_YEAR : MILLIS_PER_SHORT_YEAR);
+        while (cycleRemainder >= yearMillis) {
+            cycleRemainder -= yearMillis;
+            yearMillis = (isLeapYear(++year) ? MILLIS_PER_LONG_YEAR : MILLIS_PER_SHORT_YEAR);
+        }
+        return year;
+    }
+
+    long setYear(long instant, int year) {
+        // optimsed implementation of set, due to fixed months
+        int thisYear = getYear(instant);
+        int dayOfYear = getDayOfYear(instant, thisYear);
+        int millisOfDay = getMillisOfDay(instant);
+
+        if (dayOfYear > 354) {
+            // Current year is leap, and day is leap.
+            if (!isLeapYear(year)) {
+                // Moving to a non-leap year, leap day doesn't exist.
+                dayOfYear--;
+            }
+        }
+
+        instant = getYearMonthDayMillis(year, 1, dayOfYear);
+        instant += millisOfDay;
+        return instant;
+    }
+
+    //-----------------------------------------------------------------------
+    long getYearDifference(long minuendInstant, long subtrahendInstant) {
+        // optimsed implementation of getDifference, due to fixed months
+        int minuendYear = getYear(minuendInstant);
+        int subtrahendYear = getYear(subtrahendInstant);
+
+        // Inlined remainder method to avoid duplicate calls to get.
+        long minuendRem = minuendInstant - getYearMillis(minuendYear);
+        long subtrahendRem = subtrahendInstant - getYearMillis(subtrahendYear);
+
+        int difference = minuendYear - subtrahendYear;
+        if (minuendRem < subtrahendRem) {
+            difference--;
+        }
+        return difference;
+    }
+
+    //-----------------------------------------------------------------------
+    long getTotalMillisByYearMonth(int year, int month) {
+        if (--month % 2 == 1) {
+            month /= 2;
+            return month * MILLIS_PER_MONTH_PAIR + MILLIS_PER_LONG_MONTH;
+        } else {
+            month /= 2;
+            return month * MILLIS_PER_MONTH_PAIR;
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    int getDayOfMonth(long millis) {
+        // optimised for simple months
+        int doy = getDayOfYear(millis) - 1;
+        if (doy == 354) {
+            return 30;
+        }
+        return (doy % MONTH_PAIR_LENGTH) % LONG_MONTH_LENGTH + 1;
+    }
+
+    //-----------------------------------------------------------------------
+    boolean isLeapYear(int year) {
+        return iLeapYears.isLeapYear(year);
+    }
+
+    //-----------------------------------------------------------------------
+    int getDaysInYearMax() {
+        return 355;
+    }
+
+    //-----------------------------------------------------------------------
+    int getDaysInYear(int year) {
+        return isLeapYear(year) ? 355 : 354;
+    }
+
+    //-----------------------------------------------------------------------
+    int getDaysInYearMonth(int year, int month) {
+        if (month == 12 && isLeapYear(year)) {
+            return LONG_MONTH_LENGTH;
+        }
+        return (--month % 2 == 0 ? LONG_MONTH_LENGTH : SHORT_MONTH_LENGTH);
+    }
+
+    //-----------------------------------------------------------------------
+    int getDaysInMonthMax() {
+        return LONG_MONTH_LENGTH;
+    }
+
+    //-----------------------------------------------------------------------
+    int getDaysInMonthMax(int month) {
+        if (month == 12) {
+            return LONG_MONTH_LENGTH;
+        }
+        return (--month % 2 == 0 ? LONG_MONTH_LENGTH : SHORT_MONTH_LENGTH);
+    }
+
+    //-----------------------------------------------------------------------
+    int getMonthOfYear(long millis, int year) {
+        int doyZeroBased = (int) ((millis - getYearMillis(year)) / DateTimeConstants.MILLIS_PER_DAY);
+        if (doyZeroBased == 354) {
+            return 12;
+        }
+        return ((doyZeroBased * 2) / MONTH_PAIR_LENGTH) + 1;
+//        return (int) (doyZeroBased / 29.9f) + 1;
+//        
+//        int monthPairZeroBased = doyZeroBased / MONTH_PAIR_LENGTH;
+//        int monthPairRemainder = doyZeroBased % MONTH_PAIR_LENGTH;
+//        return (monthPairZeroBased * 2) + 1 + (monthPairRemainder >= LONG_MONTH_LENGTH ? 1 : 0);
+    }
+
+    //-----------------------------------------------------------------------
+    long getAverageMillisPerYear() {
+        return MILLIS_PER_YEAR;
+    }
+
+    //-----------------------------------------------------------------------
+    long getAverageMillisPerMonth() {
+        return MILLIS_PER_MONTH;
+    }
+
+    //-----------------------------------------------------------------------
+    long calculateFirstDayOfYearMillis(int year) {
+        if (year > MAX_YEAR) {
+            throw new ArithmeticException("Year is too large: " + year + " > " + MAX_YEAR);
+        }
+        if (year < MIN_YEAR) {
+            throw new ArithmeticException("Year is too small: " + year + " < " + MIN_YEAR);
+        }
+
+        // Java epoch is 1970-01-01 Gregorian which is 0622-07-16 Islamic.
+        // 0001-01-01 Islamic is -42520809600000L
+        // would prefer to calculate against year zero, but leap year
+        // can be in that year so it doesn't work
+        year--;
+        long cycle = year / CYCLE;
+        long millis = MILLIS_YEAR_1 + cycle * MILLIS_PER_CYCLE;
+        int cycleRemainder = (year % CYCLE) + 1;
+        
+        for (int i = 1; i < cycleRemainder; i++) {
+            millis += (isLeapYear(i) ? MILLIS_PER_LONG_YEAR : MILLIS_PER_SHORT_YEAR);
+        }
+        
+        return millis;
+    }
+
+    //-----------------------------------------------------------------------
+    int getMinYear() {
+        return 1; //MIN_YEAR;
+    }
+
+    //-----------------------------------------------------------------------
+    int getMaxYear() {
+        return MAX_YEAR;
+    }
+
+    //-----------------------------------------------------------------------
+    long getApproxMillisAtEpoch() {
+        // Epoch 1970-01-01 ISO = 1389-10-22 Islamic
+        return -MILLIS_YEAR_1;
+    }
+
+    //-----------------------------------------------------------------------
+    protected void assemble(Fields fields) {
+        if (getBase() == null) {
+            super.assemble(fields);
+
+            fields.era = ERA_FIELD;
+            fields.monthOfYear = new BasicMonthOfYearDateTimeField(this, 12);
+            fields.months = fields.monthOfYear.getDurationField();
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Leap year patterns for the Islamic Chronology.
+     */
+    public static class LeapYearPatternType implements Serializable {
+        /** Serialization lock */
+        private static final long serialVersionUID = 26581275372698L;
+//        /** Leap year raw data encoded into bits. */
+//        private static final int[][] LEAP_YEARS = {
+//            {2, 5, 7, 10, 13, 15, 18, 21, 24, 26, 29},  // 623158436
+//            {2, 5, 7, 10, 13, 16, 18, 21, 24, 26, 29},  // 623191204
+//            {2, 5, 8, 10, 13, 16, 19, 21, 24, 27, 29},  // 690562340
+//            {0, 2, 5, 8, 11, 13, 16, 19, 21, 24, 27},   // 153692453
+//        };
+        
+        /** The index. */
+        final byte index;
+        /** The leap year pattern, a bit-based 1=true pattern. */
+        final int pattern;
+        
+        /**
+         * Constructor.
+         * This constructor takes a bit pattern where bits 0-29 correspond
+         * to years 0-29 in the 30 year Islamic cycle of years. This allows
+         * a highly efficient lookup by bit-matching.
+         *
+         * @param index  the index
+         * @param pattern  the bit pattern
+         */
+        protected LeapYearPatternType(int index, int pattern) {
+            super();
+            this.index = (byte) index;
+            this.pattern = pattern;
+        }
+        
+        /**
+         * Is the year a leap year.
+         * @param year  the year to query
+         * @return true if leap
+         */
+        public boolean isLeapYear(int year) {
+            int key = 1 << (year % 30);
+            return ((pattern & key) > 0);
+        }
+        
+        /**
+         * Ensure a singleton is returned if possible.
+         * @return the singleton instance
+         */
+        private Object readResolve() {
+            switch (index) {
+                case 0:
+                    return LEAP_YEAR_15_BASED;
+                case 1:
+                    return LEAP_YEAR_16_BASED;
+                case 2:
+                    return LEAP_YEAR_INDIAN;
+                case 3:
+                    return LEAP_YEAR_HABASH_AL_HASIB;
+                default:
+                    return this;
+            }
+        }
+    }
+}
diff --git a/JodaTime/src/test/org/joda/time/chrono/TestAll.java b/JodaTime/src/test/org/joda/time/chrono/TestAll.java
index 07c79004e..fc1930ebf 100644
--- a/JodaTime/src/test/org/joda/time/chrono/TestAll.java
+++ b/JodaTime/src/test/org/joda/time/chrono/TestAll.java
@@ -43,6 +43,7 @@ public static Test suite() {
         suite.addTest(TestEthiopicChronology.suite());
         suite.addTest(TestGJChronology.suite());
         suite.addTest(TestGregorianChronology.suite());
+        suite.addTest(TestIslamicChronology.suite());
         suite.addTest(TestJulianChronology.suite());
         suite.addTest(TestISOChronology.suite());
         
diff --git a/JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java b/JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java
new file mode 100644
index 000000000..29d98090a
--- /dev/null
+++ b/JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java
@@ -0,0 +1,695 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.chrono;
+
+import java.util.Locale;
+import java.util.TimeZone;
+
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+import org.joda.time.Chronology;
+import org.joda.time.DateTime;
+import org.joda.time.DateTimeConstants;
+import org.joda.time.DateTimeField;
+import org.joda.time.DateTimeUtils;
+import org.joda.time.DateTimeZone;
+import org.joda.time.DurationFieldType;
+import org.joda.time.DateTime.Property;
+
+/**
+ * This class is a Junit unit test for IslamicChronology.
+ *
+ * @author Stephen Colebourne
+ */
+public class TestIslamicChronology extends TestCase {
+
+    private static long SKIP = 1 * DateTimeConstants.MILLIS_PER_DAY;
+
+    private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
+    private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
+    private static final DateTimeZone TOKYO = DateTimeZone.forID("Asia/Tokyo");
+    private static final Chronology ISLAMIC_UTC = IslamicChronology.getInstanceUTC();
+    private static final Chronology JULIAN_UTC = JulianChronology.getInstanceUTC();
+    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
+
+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 
+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 
+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
+                     366 + 365;
+    // 2002-06-09
+    private long TEST_TIME_NOW =
+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
+
+    private DateTimeZone originalDateTimeZone = null;
+    private TimeZone originalTimeZone = null;
+    private Locale originalLocale = null;
+
+    public static void main(String[] args) {
+        junit.textui.TestRunner.run(suite());
+    }
+
+    public static TestSuite suite() {
+        SKIP = 1 * DateTimeConstants.MILLIS_PER_DAY;
+        return new TestSuite(TestIslamicChronology.class);
+    }
+
+    public TestIslamicChronology(String name) {
+        super(name);
+    }
+
+    protected void setUp() throws Exception {
+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
+        originalDateTimeZone = DateTimeZone.getDefault();
+        originalTimeZone = TimeZone.getDefault();
+        originalLocale = Locale.getDefault();
+        DateTimeZone.setDefault(LONDON);
+        TimeZone.setDefault(TimeZone.getTimeZone("Europe/London"));
+        Locale.setDefault(Locale.UK);
+    }
+
+    protected void tearDown() throws Exception {
+        DateTimeUtils.setCurrentMillisSystem();
+        DateTimeZone.setDefault(originalDateTimeZone);
+        TimeZone.setDefault(originalTimeZone);
+        Locale.setDefault(originalLocale);
+        originalDateTimeZone = null;
+        originalTimeZone = null;
+        originalLocale = null;
+    }
+
+    //-----------------------------------------------------------------------
+    public void testFactoryUTC() {
+        assertEquals(DateTimeZone.UTC, IslamicChronology.getInstanceUTC().getZone());
+        assertSame(IslamicChronology.class, IslamicChronology.getInstanceUTC().getClass());
+    }
+
+    public void testFactory() {
+        assertEquals(LONDON, IslamicChronology.getInstance().getZone());
+        assertSame(IslamicChronology.class, IslamicChronology.getInstance().getClass());
+    }
+
+    public void testFactory_Zone() {
+        assertEquals(TOKYO, IslamicChronology.getInstance(TOKYO).getZone());
+        assertEquals(PARIS, IslamicChronology.getInstance(PARIS).getZone());
+        assertEquals(LONDON, IslamicChronology.getInstance(null).getZone());
+        assertSame(IslamicChronology.class, IslamicChronology.getInstance(TOKYO).getClass());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testEquality() {
+        assertSame(IslamicChronology.getInstance(TOKYO), IslamicChronology.getInstance(TOKYO));
+        assertSame(IslamicChronology.getInstance(LONDON), IslamicChronology.getInstance(LONDON));
+        assertSame(IslamicChronology.getInstance(PARIS), IslamicChronology.getInstance(PARIS));
+        assertSame(IslamicChronology.getInstanceUTC(), IslamicChronology.getInstanceUTC());
+        assertSame(IslamicChronology.getInstance(), IslamicChronology.getInstance(LONDON));
+    }
+
+    public void testWithUTC() {
+        assertSame(IslamicChronology.getInstanceUTC(), IslamicChronology.getInstance(LONDON).withUTC());
+        assertSame(IslamicChronology.getInstanceUTC(), IslamicChronology.getInstance(TOKYO).withUTC());
+        assertSame(IslamicChronology.getInstanceUTC(), IslamicChronology.getInstanceUTC().withUTC());
+        assertSame(IslamicChronology.getInstanceUTC(), IslamicChronology.getInstance().withUTC());
+    }
+
+    public void testWithZone() {
+        assertSame(IslamicChronology.getInstance(TOKYO), IslamicChronology.getInstance(TOKYO).withZone(TOKYO));
+        assertSame(IslamicChronology.getInstance(LONDON), IslamicChronology.getInstance(TOKYO).withZone(LONDON));
+        assertSame(IslamicChronology.getInstance(PARIS), IslamicChronology.getInstance(TOKYO).withZone(PARIS));
+        assertSame(IslamicChronology.getInstance(LONDON), IslamicChronology.getInstance(TOKYO).withZone(null));
+        assertSame(IslamicChronology.getInstance(PARIS), IslamicChronology.getInstance().withZone(PARIS));
+        assertSame(IslamicChronology.getInstance(PARIS), IslamicChronology.getInstanceUTC().withZone(PARIS));
+    }
+
+    public void testToString() {
+        assertEquals("IslamicChronology[Europe/London]", IslamicChronology.getInstance(LONDON).toString());
+        assertEquals("IslamicChronology[Asia/Tokyo]", IslamicChronology.getInstance(TOKYO).toString());
+        assertEquals("IslamicChronology[Europe/London]", IslamicChronology.getInstance().toString());
+        assertEquals("IslamicChronology[UTC]", IslamicChronology.getInstanceUTC().toString());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testDurationFields() {
+        assertEquals("eras", IslamicChronology.getInstance().eras().getName());
+        assertEquals("centuries", IslamicChronology.getInstance().centuries().getName());
+        assertEquals("years", IslamicChronology.getInstance().years().getName());
+        assertEquals("weekyears", IslamicChronology.getInstance().weekyears().getName());
+        assertEquals("months", IslamicChronology.getInstance().months().getName());
+        assertEquals("weeks", IslamicChronology.getInstance().weeks().getName());
+        assertEquals("days", IslamicChronology.getInstance().days().getName());
+        assertEquals("halfdays", IslamicChronology.getInstance().halfdays().getName());
+        assertEquals("hours", IslamicChronology.getInstance().hours().getName());
+        assertEquals("minutes", IslamicChronology.getInstance().minutes().getName());
+        assertEquals("seconds", IslamicChronology.getInstance().seconds().getName());
+        assertEquals("millis", IslamicChronology.getInstance().millis().getName());
+        
+        assertEquals(false, IslamicChronology.getInstance().eras().isSupported());
+        assertEquals(true, IslamicChronology.getInstance().centuries().isSupported());
+        assertEquals(true, IslamicChronology.getInstance().years().isSupported());
+        assertEquals(true, IslamicChronology.getInstance().weekyears().isSupported());
+        assertEquals(true, IslamicChronology.getInstance().months().isSupported());
+        assertEquals(true, IslamicChronology.getInstance().weeks().isSupported());
+        assertEquals(true, IslamicChronology.getInstance().days().isSupported());
+        assertEquals(true, IslamicChronology.getInstance().halfdays().isSupported());
+        assertEquals(true, IslamicChronology.getInstance().hours().isSupported());
+        assertEquals(true, IslamicChronology.getInstance().minutes().isSupported());
+        assertEquals(true, IslamicChronology.getInstance().seconds().isSupported());
+        assertEquals(true, IslamicChronology.getInstance().millis().isSupported());
+        
+        assertEquals(false, IslamicChronology.getInstance().centuries().isPrecise());
+        assertEquals(false, IslamicChronology.getInstance().years().isPrecise());
+        assertEquals(false, IslamicChronology.getInstance().weekyears().isPrecise());
+        assertEquals(false, IslamicChronology.getInstance().months().isPrecise());
+        assertEquals(false, IslamicChronology.getInstance().weeks().isPrecise());
+        assertEquals(false, IslamicChronology.getInstance().days().isPrecise());
+        assertEquals(false, IslamicChronology.getInstance().halfdays().isPrecise());
+        assertEquals(true, IslamicChronology.getInstance().hours().isPrecise());
+        assertEquals(true, IslamicChronology.getInstance().minutes().isPrecise());
+        assertEquals(true, IslamicChronology.getInstance().seconds().isPrecise());
+        assertEquals(true, IslamicChronology.getInstance().millis().isPrecise());
+        
+        assertEquals(false, IslamicChronology.getInstanceUTC().centuries().isPrecise());
+        assertEquals(false, IslamicChronology.getInstanceUTC().years().isPrecise());
+        assertEquals(false, IslamicChronology.getInstanceUTC().weekyears().isPrecise());
+        assertEquals(false, IslamicChronology.getInstanceUTC().months().isPrecise());
+        assertEquals(true, IslamicChronology.getInstanceUTC().weeks().isPrecise());
+        assertEquals(true, IslamicChronology.getInstanceUTC().days().isPrecise());
+        assertEquals(true, IslamicChronology.getInstanceUTC().halfdays().isPrecise());
+        assertEquals(true, IslamicChronology.getInstanceUTC().hours().isPrecise());
+        assertEquals(true, IslamicChronology.getInstanceUTC().minutes().isPrecise());
+        assertEquals(true, IslamicChronology.getInstanceUTC().seconds().isPrecise());
+        assertEquals(true, IslamicChronology.getInstanceUTC().millis().isPrecise());
+    }
+
+    public void testDateFields() {
+        assertEquals("era", IslamicChronology.getInstance().era().getName());
+        assertEquals("centuryOfEra", IslamicChronology.getInstance().centuryOfEra().getName());
+        assertEquals("yearOfCentury", IslamicChronology.getInstance().yearOfCentury().getName());
+        assertEquals("yearOfEra", IslamicChronology.getInstance().yearOfEra().getName());
+        assertEquals("year", IslamicChronology.getInstance().year().getName());
+        assertEquals("monthOfYear", IslamicChronology.getInstance().monthOfYear().getName());
+        assertEquals("weekyearOfCentury", IslamicChronology.getInstance().weekyearOfCentury().getName());
+        assertEquals("weekyear", IslamicChronology.getInstance().weekyear().getName());
+        assertEquals("weekOfWeekyear", IslamicChronology.getInstance().weekOfWeekyear().getName());
+        assertEquals("dayOfYear", IslamicChronology.getInstance().dayOfYear().getName());
+        assertEquals("dayOfMonth", IslamicChronology.getInstance().dayOfMonth().getName());
+        assertEquals("dayOfWeek", IslamicChronology.getInstance().dayOfWeek().getName());
+        
+        assertEquals(true, IslamicChronology.getInstance().era().isSupported());
+        assertEquals(true, IslamicChronology.getInstance().centuryOfEra().isSupported());
+        assertEquals(true, IslamicChronology.getInstance().yearOfCentury().isSupported());
+        assertEquals(true, IslamicChronology.getInstance().yearOfEra().isSupported());
+        assertEquals(true, IslamicChronology.getInstance().year().isSupported());
+        assertEquals(true, IslamicChronology.getInstance().monthOfYear().isSupported());
+        assertEquals(true, IslamicChronology.getInstance().weekyearOfCentury().isSupported());
+        assertEquals(true, IslamicChronology.getInstance().weekyear().isSupported());
+        assertEquals(true, IslamicChronology.getInstance().weekOfWeekyear().isSupported());
+        assertEquals(true, IslamicChronology.getInstance().dayOfYear().isSupported());
+        assertEquals(true, IslamicChronology.getInstance().dayOfMonth().isSupported());
+        assertEquals(true, IslamicChronology.getInstance().dayOfWeek().isSupported());
+    }
+
+    public void testTimeFields() {
+        assertEquals("halfdayOfDay", IslamicChronology.getInstance().halfdayOfDay().getName());
+        assertEquals("clockhourOfHalfday", IslamicChronology.getInstance().clockhourOfHalfday().getName());
+        assertEquals("hourOfHalfday", IslamicChronology.getInstance().hourOfHalfday().getName());
+        assertEquals("clockhourOfDay", IslamicChronology.getInstance().clockhourOfDay().getName());
+        assertEquals("hourOfDay", IslamicChronology.getInstance().hourOfDay().getName());
+        assertEquals("minuteOfDay", IslamicChronology.getInstance().minuteOfDay().getName());
+        assertEquals("minuteOfHour", IslamicChronology.getInstance().minuteOfHour().getName());
+        assertEquals("secondOfDay", IslamicChronology.getInstance().secondOfDay().getName());
+        assertEquals("secondOfMinute", IslamicChronology.getInstance().secondOfMinute().getName());
+        assertEquals("millisOfDay", IslamicChronology.getInstance().millisOfDay().getName());
+        assertEquals("millisOfSecond", IslamicChronology.getInstance().millisOfSecond().getName());
+        
+        assertEquals(true, IslamicChronology.getInstance().halfdayOfDay().isSupported());
+        assertEquals(true, IslamicChronology.getInstance().clockhourOfHalfday().isSupported());
+        assertEquals(true, IslamicChronology.getInstance().hourOfHalfday().isSupported());
+        assertEquals(true, IslamicChronology.getInstance().clockhourOfDay().isSupported());
+        assertEquals(true, IslamicChronology.getInstance().hourOfDay().isSupported());
+        assertEquals(true, IslamicChronology.getInstance().minuteOfDay().isSupported());
+        assertEquals(true, IslamicChronology.getInstance().minuteOfHour().isSupported());
+        assertEquals(true, IslamicChronology.getInstance().secondOfDay().isSupported());
+        assertEquals(true, IslamicChronology.getInstance().secondOfMinute().isSupported());
+        assertEquals(true, IslamicChronology.getInstance().millisOfDay().isSupported());
+        assertEquals(true, IslamicChronology.getInstance().millisOfSecond().isSupported());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testEpoch() {
+        DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, ISLAMIC_UTC);
+        DateTime expectedEpoch = new DateTime(622, 7, 16, 0, 0, 0, 0, JULIAN_UTC);
+        assertEquals(expectedEpoch.getMillis(), epoch.getMillis());
+    }
+
+    public void testEra() {
+        assertEquals(1, IslamicChronology.AH);
+        try {
+            new DateTime(-1, 13, 5, 0, 0, 0, 0, ISLAMIC_UTC);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
+    public void testFieldConstructor() {
+        DateTime date = new DateTime(1364, 12, 6, 0, 0, 0, 0, ISLAMIC_UTC);
+        DateTime expectedDate = new DateTime(1945, 11, 12, 0, 0, 0, 0, ISO_UTC);
+        assertEquals(expectedDate.getMillis(), date.getMillis());
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Tests era, year, monthOfYear, dayOfMonth and dayOfWeek.
+     */
+    public void testCalendar() {
+        if (TestAll.FAST) {
+            return;
+        }
+        System.out.println("\nTestIslamicChronology.testCalendar");
+        DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, ISLAMIC_UTC);
+        long millis = epoch.getMillis();
+        long end = new DateTime(3000, 1, 1, 0, 0, 0, 0, ISO_UTC).getMillis();
+        DateTimeField dayOfWeek = ISLAMIC_UTC.dayOfWeek();
+        DateTimeField dayOfYear = ISLAMIC_UTC.dayOfYear();
+        DateTimeField dayOfMonth = ISLAMIC_UTC.dayOfMonth();
+        DateTimeField monthOfYear = ISLAMIC_UTC.monthOfYear();
+        DateTimeField year = ISLAMIC_UTC.year();
+        DateTimeField yearOfEra = ISLAMIC_UTC.yearOfEra();
+        DateTimeField era = ISLAMIC_UTC.era();
+        int expectedDOW = new DateTime(622, 7, 16, 0, 0, 0, 0, JULIAN_UTC).getDayOfWeek();
+        int expectedDOY = 1;
+        int expectedDay = 1;
+        int expectedMonth = 1;
+        int expectedYear = 1;
+        while (millis < end) {
+            int dowValue = dayOfWeek.get(millis);
+            int doyValue = dayOfYear.get(millis);
+            int dayValue = dayOfMonth.get(millis);
+            int monthValue = monthOfYear.get(millis);
+            int yearValue = year.get(millis);
+            int yearOfEraValue = yearOfEra.get(millis);
+            int dayOfYearLen = dayOfYear.getMaximumValue(millis);
+            int monthLen = dayOfMonth.getMaximumValue(millis);
+            if (monthValue < 1 || monthValue > 12) {
+                fail("Bad month: " + millis);
+            }
+            
+            // test era
+            assertEquals(1, era.get(millis));
+            assertEquals("AH", era.getAsText(millis));
+            assertEquals("AH", era.getAsShortText(millis));
+            
+            // test date
+            assertEquals(expectedDOY, doyValue);
+            assertEquals(expectedMonth, monthValue);
+            assertEquals(expectedDay, dayValue);
+            assertEquals(expectedDOW, dowValue);
+            assertEquals(expectedYear, yearValue);
+            assertEquals(expectedYear, yearOfEraValue);
+            
+            // test leap year
+            boolean leap = ((11 * yearValue + 14) % 30) < 11;
+            assertEquals(leap, year.isLeap(millis));
+            
+            // test month length
+            switch (monthValue) {
+                case 1:
+                case 3:
+                case 5:
+                case 7:
+                case 9:
+                case 11:
+                    assertEquals(30, monthLen);
+                    break;
+                case 2:
+                case 4:
+                case 6:
+                case 8:
+                case 10:
+                    assertEquals(29, monthLen);
+                    break;
+                case 12:
+                    assertEquals((leap ? 30 : 29), monthLen);
+                    break;
+            }
+            
+            // test year length
+            assertEquals((leap ? 355 : 354), dayOfYearLen);
+            
+            // recalculate date
+            expectedDOW = (((expectedDOW + 1) - 1) % 7) + 1;
+            expectedDay++;
+            expectedDOY++;
+            if (expectedDay > monthLen) {
+                expectedDay = 1;
+                expectedMonth++;
+                if (expectedMonth == 13) {
+                    expectedMonth = 1;
+                    expectedDOY = 1;
+                    expectedYear++;
+                }
+            }
+            millis += SKIP;
+        }
+    }
+
+    public void testSampleDate1() {
+        DateTime dt = new DateTime(1945, 11, 12, 0, 0, 0, 0, ISO_UTC);
+        dt = dt.withChronology(ISLAMIC_UTC);
+        assertEquals(IslamicChronology.AH, dt.getEra());
+        assertEquals(14, dt.getCenturyOfEra());  // TODO confirm
+        assertEquals(64, dt.getYearOfCentury());
+        assertEquals(1364, dt.getYearOfEra());
+        
+        assertEquals(1364, dt.getYear());
+        Property fld = dt.year();
+        assertEquals(false, fld.isLeap());
+        assertEquals(0, fld.getLeapAmount());
+        assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType());
+        assertEquals(new DateTime(1365, 12, 6, 0, 0, 0, 0, ISLAMIC_UTC), fld.addToCopy(1));
+        
+        assertEquals(12, dt.getMonthOfYear());
+        fld = dt.monthOfYear();
+        assertEquals(false, fld.isLeap());
+        assertEquals(0, fld.getLeapAmount());
+        assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType());
+        assertEquals(1, fld.getMinimumValue());
+        assertEquals(1, fld.getMinimumValueOverall());
+        assertEquals(12, fld.getMaximumValue());
+        assertEquals(12, fld.getMaximumValueOverall());
+        assertEquals(new DateTime(1365, 1, 6, 0, 0, 0, 0, ISLAMIC_UTC), fld.addToCopy(1));
+        assertEquals(new DateTime(1364, 1, 6, 0, 0, 0, 0, ISLAMIC_UTC), fld.addWrapFieldToCopy(1));
+        
+        assertEquals(6, dt.getDayOfMonth());
+        fld = dt.dayOfMonth();
+        assertEquals(false, fld.isLeap());
+        assertEquals(0, fld.getLeapAmount());
+        assertEquals(null, fld.getLeapDurationField());
+        assertEquals(1, fld.getMinimumValue());
+        assertEquals(1, fld.getMinimumValueOverall());
+        assertEquals(29, fld.getMaximumValue());
+        assertEquals(30, fld.getMaximumValueOverall());
+        assertEquals(new DateTime(1364, 12, 7, 0, 0, 0, 0, ISLAMIC_UTC), fld.addToCopy(1));
+        
+        assertEquals(DateTimeConstants.MONDAY, dt.getDayOfWeek());
+        fld = dt.dayOfWeek();
+        assertEquals(false, fld.isLeap());
+        assertEquals(0, fld.getLeapAmount());
+        assertEquals(null, fld.getLeapDurationField());
+        assertEquals(1, fld.getMinimumValue());
+        assertEquals(1, fld.getMinimumValueOverall());
+        assertEquals(7, fld.getMaximumValue());
+        assertEquals(7, fld.getMaximumValueOverall());
+        assertEquals(new DateTime(1364, 12, 7, 0, 0, 0, 0, ISLAMIC_UTC), fld.addToCopy(1));
+        
+        assertEquals(6 * 30 + 5 * 29 + 6, dt.getDayOfYear());
+        fld = dt.dayOfYear();
+        assertEquals(false, fld.isLeap());
+        assertEquals(0, fld.getLeapAmount());
+        assertEquals(null, fld.getLeapDurationField());
+        assertEquals(1, fld.getMinimumValue());
+        assertEquals(1, fld.getMinimumValueOverall());
+        assertEquals(354, fld.getMaximumValue());
+        assertEquals(355, fld.getMaximumValueOverall());
+        assertEquals(new DateTime(1364, 12, 7, 0, 0, 0, 0, ISLAMIC_UTC), fld.addToCopy(1));
+        
+        assertEquals(0, dt.getHourOfDay());
+        assertEquals(0, dt.getMinuteOfHour());
+        assertEquals(0, dt.getSecondOfMinute());
+        assertEquals(0, dt.getMillisOfSecond());
+    }
+
+    public void testSampleDate2() {
+        DateTime dt = new DateTime(2005, 11, 26, 0, 0, 0, 0, ISO_UTC);
+        dt = dt.withChronology(ISLAMIC_UTC);
+        assertEquals(IslamicChronology.AH, dt.getEra());
+        assertEquals(15, dt.getCenturyOfEra());  // TODO confirm
+        assertEquals(26, dt.getYearOfCentury());
+        assertEquals(1426, dt.getYearOfEra());
+        
+        assertEquals(1426, dt.getYear());
+        Property fld = dt.year();
+        assertEquals(true, fld.isLeap());
+        assertEquals(1, fld.getLeapAmount());
+        assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType());
+        
+        assertEquals(10, dt.getMonthOfYear());
+        fld = dt.monthOfYear();
+        assertEquals(false, fld.isLeap());
+        assertEquals(0, fld.getLeapAmount());
+        assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType());
+        assertEquals(1, fld.getMinimumValue());
+        assertEquals(1, fld.getMinimumValueOverall());
+        assertEquals(12, fld.getMaximumValue());
+        assertEquals(12, fld.getMaximumValueOverall());
+        
+        assertEquals(24, dt.getDayOfMonth());
+        fld = dt.dayOfMonth();
+        assertEquals(false, fld.isLeap());
+        assertEquals(0, fld.getLeapAmount());
+        assertEquals(null, fld.getLeapDurationField());
+        assertEquals(1, fld.getMinimumValue());
+        assertEquals(1, fld.getMinimumValueOverall());
+        assertEquals(29, fld.getMaximumValue());
+        assertEquals(30, fld.getMaximumValueOverall());
+        
+        assertEquals(DateTimeConstants.SATURDAY, dt.getDayOfWeek());
+        fld = dt.dayOfWeek();
+        assertEquals(false, fld.isLeap());
+        assertEquals(0, fld.getLeapAmount());
+        assertEquals(null, fld.getLeapDurationField());
+        assertEquals(1, fld.getMinimumValue());
+        assertEquals(1, fld.getMinimumValueOverall());
+        assertEquals(7, fld.getMaximumValue());
+        assertEquals(7, fld.getMaximumValueOverall());
+        
+        assertEquals(5 * 30 + 4 * 29 + 24, dt.getDayOfYear());
+        fld = dt.dayOfYear();
+        assertEquals(false, fld.isLeap());
+        assertEquals(0, fld.getLeapAmount());
+        assertEquals(null, fld.getLeapDurationField());
+        assertEquals(1, fld.getMinimumValue());
+        assertEquals(1, fld.getMinimumValueOverall());
+        assertEquals(355, fld.getMaximumValue());
+        assertEquals(355, fld.getMaximumValueOverall());
+        
+        assertEquals(0, dt.getHourOfDay());
+        assertEquals(0, dt.getMinuteOfHour());
+        assertEquals(0, dt.getSecondOfMinute());
+        assertEquals(0, dt.getMillisOfSecond());
+    }
+
+    public void testSampleDate3() {
+        DateTime dt = new DateTime(1426, 12, 24, 0, 0, 0, 0, ISLAMIC_UTC);
+        assertEquals(IslamicChronology.AH, dt.getEra());
+        
+        assertEquals(1426, dt.getYear());
+        Property fld = dt.year();
+        assertEquals(true, fld.isLeap());
+        assertEquals(1, fld.getLeapAmount());
+        assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType());
+        
+        assertEquals(12, dt.getMonthOfYear());
+        fld = dt.monthOfYear();
+        assertEquals(true, fld.isLeap());
+        assertEquals(1, fld.getLeapAmount());
+        assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType());
+        assertEquals(1, fld.getMinimumValue());
+        assertEquals(1, fld.getMinimumValueOverall());
+        assertEquals(12, fld.getMaximumValue());
+        assertEquals(12, fld.getMaximumValueOverall());
+        
+        assertEquals(24, dt.getDayOfMonth());
+        fld = dt.dayOfMonth();
+        assertEquals(false, fld.isLeap());
+        assertEquals(0, fld.getLeapAmount());
+        assertEquals(null, fld.getLeapDurationField());
+        assertEquals(1, fld.getMinimumValue());
+        assertEquals(1, fld.getMinimumValueOverall());
+        assertEquals(30, fld.getMaximumValue());
+        assertEquals(30, fld.getMaximumValueOverall());
+        
+        assertEquals(DateTimeConstants.TUESDAY, dt.getDayOfWeek());
+        fld = dt.dayOfWeek();
+        assertEquals(false, fld.isLeap());
+        assertEquals(0, fld.getLeapAmount());
+        assertEquals(null, fld.getLeapDurationField());
+        assertEquals(1, fld.getMinimumValue());
+        assertEquals(1, fld.getMinimumValueOverall());
+        assertEquals(7, fld.getMaximumValue());
+        assertEquals(7, fld.getMaximumValueOverall());
+        
+        assertEquals(6 * 30 + 5 * 29 + 24, dt.getDayOfYear());
+        fld = dt.dayOfYear();
+        assertEquals(false, fld.isLeap());
+        assertEquals(0, fld.getLeapAmount());
+        assertEquals(null, fld.getLeapDurationField());
+        assertEquals(1, fld.getMinimumValue());
+        assertEquals(1, fld.getMinimumValueOverall());
+        assertEquals(355, fld.getMaximumValue());
+        assertEquals(355, fld.getMaximumValueOverall());
+        
+        assertEquals(0, dt.getHourOfDay());
+        assertEquals(0, dt.getMinuteOfHour());
+        assertEquals(0, dt.getSecondOfMinute());
+        assertEquals(0, dt.getMillisOfSecond());
+    }
+
+    public void testSampleDateWithZone() {
+        DateTime dt = new DateTime(2005, 11, 26, 12, 0, 0, 0, PARIS).withChronology(ISLAMIC_UTC);
+        assertEquals(IslamicChronology.AH, dt.getEra());
+        assertEquals(1426, dt.getYear());
+        assertEquals(10, dt.getMonthOfYear());
+        assertEquals(24, dt.getDayOfMonth());
+        assertEquals(11, dt.getHourOfDay());  // PARIS is UTC+1 in summer (12-1=11)
+        assertEquals(0, dt.getMinuteOfHour());
+        assertEquals(0, dt.getSecondOfMinute());
+        assertEquals(0, dt.getMillisOfSecond());
+    }
+
+    public void test15BasedLeapYear() {
+        assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(1));
+        assertEquals(true, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(2));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(3));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(4));
+        assertEquals(true, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(5));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(6));
+        assertEquals(true, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(7));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(8));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(9));
+        assertEquals(true, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(10));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(11));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(12));
+        assertEquals(true, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(13));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(14));
+        assertEquals(true, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(15));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(16));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(17));
+        assertEquals(true, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(18));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(19));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(20));
+        assertEquals(true, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(21));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(22));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(23));
+        assertEquals(true, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(24));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(25));
+        assertEquals(true, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(26));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(27));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(28));
+        assertEquals(true, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(29));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_15_BASED.isLeapYear(30));
+    }
+
+    public void test16BasedLeapYear() {
+        assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(1));
+        assertEquals(true, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(2));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(3));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(4));
+        assertEquals(true, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(5));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(6));
+        assertEquals(true, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(7));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(8));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(9));
+        assertEquals(true, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(10));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(11));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(12));
+        assertEquals(true, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(13));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(14));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(15));
+        assertEquals(true, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(16));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(17));
+        assertEquals(true, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(18));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(19));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(20));
+        assertEquals(true, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(21));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(22));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(23));
+        assertEquals(true, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(24));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(25));
+        assertEquals(true, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(26));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(27));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(28));
+        assertEquals(true, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(29));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_16_BASED.isLeapYear(30));
+    }
+
+    public void testIndianBasedLeapYear() {
+        assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(1));
+        assertEquals(true, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(2));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(3));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(4));
+        assertEquals(true, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(5));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(6));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(7));
+        assertEquals(true, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(8));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(9));
+        assertEquals(true, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(10));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(11));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(12));
+        assertEquals(true, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(13));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(14));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(15));
+        assertEquals(true, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(16));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(17));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(18));
+        assertEquals(true, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(19));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(20));
+        assertEquals(true, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(21));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(22));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(23));
+        assertEquals(true, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(24));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(25));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(26));
+        assertEquals(true, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(27));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(28));
+        assertEquals(true, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(29));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_INDIAN.isLeapYear(30));
+    }
+
+    public void testHabashAlHasibBasedLeapYear() {
+        assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(1));
+        assertEquals(true, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(2));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(3));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(4));
+        assertEquals(true, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(5));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(6));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(7));
+        assertEquals(true, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(8));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(9));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(10));
+        assertEquals(true, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(11));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(12));
+        assertEquals(true, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(13));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(14));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(15));
+        assertEquals(true, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(16));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(17));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(18));
+        assertEquals(true, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(19));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(20));
+        assertEquals(true, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(21));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(22));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(23));
+        assertEquals(true, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(24));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(25));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(26));
+        assertEquals(true, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(27));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(28));
+        assertEquals(false, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(29));
+        assertEquals(true, IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(30));
+    }
+
+}

From 638abee397a254ce348b8500f089a781395f3349 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 27 Nov 2005 00:51:34 +0000
Subject: [PATCH 078/130] Add tests and fix duration/add bugs in Coptic and
 Ethiopic chronology

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@935 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |   5 +-
 .../chrono/BasicFixedMonthChronology.java     |  16 +-
 .../BasicFixedMonthOfYearDateTimeField.java   |  99 -----------
 .../chrono/BasicMonthOfYearDateTimeField.java |  39 ++---
 .../joda/time/chrono/CopticChronology.java    |   5 +-
 .../joda/time/chrono/EthiopicChronology.java  |   5 +-
 .../time/chrono/TestCopticChronology.java     | 164 ++++++++++++++++-
 .../time/chrono/TestEthiopicChronology.java   | 165 +++++++++++++++++-
 8 files changed, 350 insertions(+), 148 deletions(-)
 delete mode 100644 JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 2552819ef..2f8cad24c 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -11,7 +11,7 @@ We recommend JDK 1.3 or later, and have performed no testing on earlier JDKs.
 Joda-Time is licensed under the business-friendly Apache License Version 2.
 This is the same license as all of Apache, plus other open source projects such as Spring.
 The intent is to make the code available to the Java community with the minimum
-of restrictions. If the license cause you problems please contact the mailing list.
+of restrictions. If the license causes you problems please contact the mailing list.
 
 
 Incompatible changes since 1.1
@@ -59,6 +59,9 @@ Bug fixes since 1.1
   Fixed regression in month of year calculation which affected getMaximumValue
   on dayOfMonth field.
 
+- CopticChronology
+  Fixed month duration field to handle short 13th month correctly.
+
 - ZonedChronology
   Fixed getting text values for fields from getAs[Short]Text(int value, Locale locale).
 
diff --git a/JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java b/JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java
index 99530ca33..fc84b2f17 100644
--- a/JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java
@@ -17,9 +17,6 @@
 
 import org.joda.time.Chronology;
 import org.joda.time.DateTimeConstants;
-import org.joda.time.DurationField;
-import org.joda.time.DurationFieldType;
-import org.joda.time.field.PreciseDurationField;
 
 /**
  * Abstract implementation of a calendar system based around fixed length months.
@@ -50,14 +47,6 @@
     /** The length of the month in millis. */
     static final long MILLIS_PER_MONTH = ((long) MONTH_LENGTH) * DateTimeConstants.MILLIS_PER_DAY;
 
-    /** Singleton fixed length month field used to build the monthOfYear field. */
-    static final DurationField MONTH_DURATION_FIELD;
-    static {
-        // init after other static fields
-        MONTH_DURATION_FIELD =  new PreciseDurationField
-            (DurationFieldType.months(), MILLIS_PER_MONTH);
-    }
-
     //-----------------------------------------------------------------------
     /**
      * Restricted constructor.
@@ -138,6 +127,11 @@ int getDaysInMonthMax(int month) {
         return (month != 13 ? MONTH_LENGTH : 6);
     }
 
+    //-----------------------------------------------------------------------
+    int getMonthOfYear(long millis) {
+        return (getDayOfYear(millis) - 1) / MONTH_LENGTH + 1;
+    }
+
     //-----------------------------------------------------------------------
     int getMonthOfYear(long millis, int year) {
         long monthZeroBased = (millis - getYearMillis(year)) / MILLIS_PER_MONTH;
diff --git a/JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java b/JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java
deleted file mode 100644
index 8d4409653..000000000
--- a/JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthOfYearDateTimeField.java
+++ /dev/null
@@ -1,99 +0,0 @@
-/*
- *  Copyright 2001-2005 Stephen Colebourne
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.joda.time.chrono;
-
-import org.joda.time.DateTimeConstants;
-import org.joda.time.DateTimeFieldType;
-import org.joda.time.DurationField;
-import org.joda.time.field.PreciseDurationDateTimeField;
-
-/**
- * Month of year implementation where the month length is fixed.
- *
- * @author Brian S O'Neill
- * @author Stephen Colebourne
- * @since 1.2, refactored from CopticMonthOfYearDateTimeField
- */
-final class BasicFixedMonthOfYearDateTimeField extends PreciseDurationDateTimeField {
-
-    /** Serialization version. */
-    private static final long serialVersionUID = 7741038885247700323L;
-
-    /** The base chronology. */
-    private final BaseGJChronology iChronology;
-
-    /** The fixed month length. */
-    private static final int MONTH_LENGTH = 30;
-
-    /**
-     * Restricted constructor.
-     *
-     * @param chronology  the base chronology
-     * @param months  the months duration field
-     */
-    BasicFixedMonthOfYearDateTimeField(BaseGJChronology chronology, DurationField months) {
-        super(DateTimeFieldType.monthOfYear(), months);
-        iChronology = chronology;
-    }
-
-    public int get(long instant) {
-        return (iChronology.getDayOfYear(instant) - 1) / MONTH_LENGTH + 1;
-    }
-
-    public long set(long instant, int value) {
-        instant = super.set(instant, value);
-        if (value == 13) {
-            int day = iChronology.getDayOfYear(instant);
-            if (day < MONTH_LENGTH) {
-                // Move back a few days to the end of the 13th "month".
-                instant -= (long)DateTimeConstants.MILLIS_PER_DAY * day;
-            }
-        }
-        return instant;
-    }
-
-    public DurationField getRangeDurationField() {
-        return iChronology.years();
-    }
-
-    public boolean isLeap(long instant) {
-        return get(instant) > 12 && iChronology.isLeapYear(iChronology.getYear(instant));
-    }
-
-    public int getLeapAmount(long instant) {
-        return isLeap(instant) ? 1 : 0;
-    }
-
-    public DurationField getLeapDurationField() {
-        return iChronology.days();
-    }
-
-    public int getMinimumValue() {
-        return 1;
-    }
-
-    public int getMaximumValue() {
-        return 13;
-    }
-
-    /**
-     * Serialization singleton
-     */
-    private Object readResolve() {
-        return iChronology.monthOfYear();
-    }
-
-}
diff --git a/JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java
index 1f7d42dd5..1edb2f2e2 100644
--- a/JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java
+++ b/JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java
@@ -23,13 +23,11 @@
 
 /**
  * Provides time calculations for the month of the year component of time.
- * <p>
- * This implementation assumes 12 months at present.
  *
  * @author Guy Allard
  * @author Stephen Colebourne
  * @author Brian S O'Neill
- * @since 1.0
+ * @since 1.2, refactored from GJMonthOfYearDateTimeField
  */
 class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {
 
@@ -37,9 +35,9 @@
     private static final long serialVersionUID = -8258715387168736L;
 
     private static final int MIN = DateTimeConstants.JANUARY;
-    private static final int MAX = DateTimeConstants.DECEMBER;
 
     private final BaseGJChronology iChronology;
+    private final int iMax;
     private final int iLeapMonth;
 
     /**
@@ -50,6 +48,7 @@
     BasicMonthOfYearDateTimeField(BaseGJChronology chronology, int leapMonth) {
         super(DateTimeFieldType.monthOfYear(), chronology.getAverageMillisPerMonth());
         iChronology = chronology;
+        iMax = iChronology.getMaxMonth();
         iLeapMonth = leapMonth;
     }
 
@@ -110,17 +109,17 @@ public long add(long instant, int months) {
         // Initially, monthToUse is zero-based
         int monthToUse = thisMonth - 1 + months;
         if (monthToUse >= 0) {
-            yearToUse = thisYear + (monthToUse / MAX);
-            monthToUse = (monthToUse % MAX) + 1;
+            yearToUse = thisYear + (monthToUse / iMax);
+            monthToUse = (monthToUse % iMax) + 1;
         } else {
-            yearToUse = thisYear + (monthToUse / MAX) - 1;
+            yearToUse = thisYear + (monthToUse / iMax) - 1;
             monthToUse = Math.abs(monthToUse);
-            int remMonthToUse = monthToUse % MAX;
+            int remMonthToUse = monthToUse % iMax;
             // Take care of the boundary condition
             if (remMonthToUse == 0) {
-                remMonthToUse = MAX;
+                remMonthToUse = iMax;
             }
-            monthToUse = MAX - remMonthToUse + 1;
+            monthToUse = iMax - remMonthToUse + 1;
             // Take care of the boundary condition
             if (monthToUse == 1) {
                 yearToUse += 1;
@@ -162,16 +161,16 @@ public long add(long instant, long months) {
         long yearToUse;
         long monthToUse = thisMonth - 1 + months;
         if (monthToUse >= 0) {
-            yearToUse = thisYear + (monthToUse / MAX);
-            monthToUse = (monthToUse % MAX) + 1;
+            yearToUse = thisYear + (monthToUse / iMax);
+            monthToUse = (monthToUse % iMax) + 1;
         } else {
-            yearToUse = thisYear + (monthToUse / MAX) - 1;
+            yearToUse = thisYear + (monthToUse / iMax) - 1;
             monthToUse = Math.abs(monthToUse);
-            int remMonthToUse = (int)(monthToUse % MAX);
+            int remMonthToUse = (int)(monthToUse % iMax);
             if (remMonthToUse == 0) {
-                remMonthToUse = MAX;
+                remMonthToUse = iMax;
             }
-            monthToUse = MAX - remMonthToUse + 1;
+            monthToUse = iMax - remMonthToUse + 1;
             if (monthToUse == 1) {
                 yearToUse += 1;
             }
@@ -209,7 +208,7 @@ public long add(long instant, long months) {
      * @return the updated time instant.
      */
     public long addWrapField(long instant, int months) {
-        return set(instant, FieldUtils.getWrappedValue(get(instant), months, MIN, MAX));
+        return set(instant, FieldUtils.getWrappedValue(get(instant), months, MIN, iMax));
     }
 
     //-----------------------------------------------------------------------
@@ -223,7 +222,7 @@ public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {
         int subtrahendYear = iChronology.getYear(subtrahendInstant);
         int subtrahendMonth = iChronology.getMonthOfYear(subtrahendInstant, subtrahendYear);
 
-        long difference = (minuendYear - subtrahendYear) * 12L + minuendMonth - subtrahendMonth;
+        long difference = (minuendYear - subtrahendYear) * ((long) iMax) + minuendMonth - subtrahendMonth;
 
         // Before adjusting for remainder, account for special case of add
         // where the day-of-month is forced to the nearest sane value.
@@ -269,7 +268,7 @@ public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {
      * @throws IllegalArgumentException  if month is invalid
      */
     public long set(long instant, int month) {
-        FieldUtils.verifyValueBounds(this, month, MIN, MAX);
+        FieldUtils.verifyValueBounds(this, month, MIN, iMax);
         //
         int thisYear = iChronology.getYear(instant);
         //
@@ -315,7 +314,7 @@ public int getMinimumValue() {
 
     //-----------------------------------------------------------------------
     public int getMaximumValue() {
-        return MAX;
+        return iMax;
     }
 
     //-----------------------------------------------------------------------
diff --git a/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java b/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java
index c0f2ada5a..72ab453ce 100644
--- a/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java
@@ -261,9 +261,8 @@ protected void assemble(Fields fields) {
             fields.weekyear = new SkipDateTimeField(this, fields.weekyear);
             
             fields.era = ERA_FIELD;
-            fields.months = MONTH_DURATION_FIELD;
-            fields.monthOfYear = new BasicFixedMonthOfYearDateTimeField(this, MONTH_DURATION_FIELD);
-            fields.dayOfMonth = new BasicDayOfMonthDateTimeField(this, fields.days);
+            fields.monthOfYear = new BasicMonthOfYearDateTimeField(this, 13);
+            fields.months = fields.monthOfYear.getDurationField();
         }
     }
 
diff --git a/JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java b/JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java
index df073c452..8034610a8 100644
--- a/JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java
@@ -261,9 +261,8 @@ protected void assemble(Fields fields) {
             fields.weekyear = new SkipDateTimeField(this, fields.weekyear);
             
             fields.era = ERA_FIELD;
-            fields.months = MONTH_DURATION_FIELD;
-            fields.monthOfYear = new BasicFixedMonthOfYearDateTimeField(this, MONTH_DURATION_FIELD);
-            fields.dayOfMonth = new BasicDayOfMonthDateTimeField(this, fields.days);
+            fields.monthOfYear = new BasicMonthOfYearDateTimeField(this, 13);
+            fields.months = fields.monthOfYear.getDurationField();
         }
     }
 
diff --git a/JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java b/JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java
index 05c31b251..65a2494c5 100644
--- a/JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java
+++ b/JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java
@@ -27,6 +27,9 @@
 import org.joda.time.DateTimeField;
 import org.joda.time.DateTimeUtils;
 import org.joda.time.DateTimeZone;
+import org.joda.time.DurationField;
+import org.joda.time.DurationFieldType;
+import org.joda.time.DateTime.Property;
 
 /**
  * This class is a Junit unit test for CopticChronology.
@@ -35,7 +38,9 @@
  */
 public class TestCopticChronology extends TestCase {
 
-    private static long SKIP = 1 * DateTimeConstants.MILLIS_PER_DAY;
+    private static final int MILLIS_PER_DAY = DateTimeConstants.MILLIS_PER_DAY;
+
+    private static long SKIP = 1 * MILLIS_PER_DAY;
 
     private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
     private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
@@ -50,7 +55,7 @@
                      366 + 365;
     // 2002-06-09
     private long TEST_TIME_NOW =
-            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * MILLIS_PER_DAY;
 
     private DateTimeZone originalDateTimeZone = null;
     private TimeZone originalTimeZone = null;
@@ -61,7 +66,7 @@ public static void main(String[] args) {
     }
 
     public static TestSuite suite() {
-        SKIP = 1 * DateTimeConstants.MILLIS_PER_DAY;
+        SKIP = 1 * MILLIS_PER_DAY;
         return new TestSuite(TestCopticChronology.class);
     }
 
@@ -182,7 +187,7 @@ public void testDurationFields() {
         assertEquals(false, CopticChronology.getInstanceUTC().centuries().isPrecise());
         assertEquals(false, CopticChronology.getInstanceUTC().years().isPrecise());
         assertEquals(false, CopticChronology.getInstanceUTC().weekyears().isPrecise());
-        assertEquals(true, CopticChronology.getInstanceUTC().months().isPrecise());
+        assertEquals(false, CopticChronology.getInstanceUTC().months().isPrecise());
         assertEquals(true, CopticChronology.getInstanceUTC().weeks().isPrecise());
         assertEquals(true, CopticChronology.getInstanceUTC().days().isPrecise());
         assertEquals(true, CopticChronology.getInstanceUTC().halfdays().isPrecise());
@@ -353,12 +358,60 @@ public void testSampleDate() {
         assertEquals(CopticChronology.AM, dt.getEra());
         assertEquals(18, dt.getCenturyOfEra());  // TODO confirm
         assertEquals(20, dt.getYearOfCentury());
-        assertEquals(1720, dt.getYear());
         assertEquals(1720, dt.getYearOfEra());
+        
+        assertEquals(1720, dt.getYear());
+        Property fld = dt.year();
+        assertEquals(false, fld.isLeap());
+        assertEquals(0, fld.getLeapAmount());
+        assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType());
+        assertEquals(new DateTime(1721, 10, 2, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(1));
+        
         assertEquals(10, dt.getMonthOfYear());
+        fld = dt.monthOfYear();
+        assertEquals(false, fld.isLeap());
+        assertEquals(0, fld.getLeapAmount());
+        assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType());
+        assertEquals(1, fld.getMinimumValue());
+        assertEquals(1, fld.getMinimumValueOverall());
+        assertEquals(13, fld.getMaximumValue());
+        assertEquals(13, fld.getMaximumValueOverall());
+        assertEquals(new DateTime(1721, 1, 2, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(4));
+        assertEquals(new DateTime(1720, 1, 2, 0, 0, 0, 0, COPTIC_UTC), fld.addWrapFieldToCopy(4));
+        
         assertEquals(2, dt.getDayOfMonth());
+        fld = dt.dayOfMonth();
+        assertEquals(false, fld.isLeap());
+        assertEquals(0, fld.getLeapAmount());
+        assertEquals(null, fld.getLeapDurationField());
+        assertEquals(1, fld.getMinimumValue());
+        assertEquals(1, fld.getMinimumValueOverall());
+        assertEquals(30, fld.getMaximumValue());
+        assertEquals(30, fld.getMaximumValueOverall());
+        assertEquals(new DateTime(1720, 10, 3, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(1));
+        
         assertEquals(DateTimeConstants.WEDNESDAY, dt.getDayOfWeek());
+        fld = dt.dayOfWeek();
+        assertEquals(false, fld.isLeap());
+        assertEquals(0, fld.getLeapAmount());
+        assertEquals(null, fld.getLeapDurationField());
+        assertEquals(1, fld.getMinimumValue());
+        assertEquals(1, fld.getMinimumValueOverall());
+        assertEquals(7, fld.getMaximumValue());
+        assertEquals(7, fld.getMaximumValueOverall());
+        assertEquals(new DateTime(1720, 10, 3, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(1));
+        
         assertEquals(9 * 30 + 2, dt.getDayOfYear());
+        fld = dt.dayOfYear();
+        assertEquals(false, fld.isLeap());
+        assertEquals(0, fld.getLeapAmount());
+        assertEquals(null, fld.getLeapDurationField());
+        assertEquals(1, fld.getMinimumValue());
+        assertEquals(1, fld.getMinimumValueOverall());
+        assertEquals(365, fld.getMaximumValue());
+        assertEquals(366, fld.getMaximumValueOverall());
+        assertEquals(new DateTime(1720, 10, 3, 0, 0, 0, 0, COPTIC_UTC), fld.addToCopy(1));
+        
         assertEquals(0, dt.getHourOfDay());
         assertEquals(0, dt.getMinuteOfHour());
         assertEquals(0, dt.getSecondOfMinute());
@@ -378,4 +431,105 @@ public void testSampleDateWithZone() {
         assertEquals(0, dt.getMillisOfSecond());
     }
 
+    public void testDurationYear() {
+        // Leap 1723
+        DateTime dt20 = new DateTime(1720, 10, 2, 0, 0, 0, 0, COPTIC_UTC);
+        DateTime dt21 = new DateTime(1721, 10, 2, 0, 0, 0, 0, COPTIC_UTC);
+        DateTime dt22 = new DateTime(1722, 10, 2, 0, 0, 0, 0, COPTIC_UTC);
+        DateTime dt23 = new DateTime(1723, 10, 2, 0, 0, 0, 0, COPTIC_UTC);
+        DateTime dt24 = new DateTime(1724, 10, 2, 0, 0, 0, 0, COPTIC_UTC);
+        
+        DurationField fld = dt20.year().getDurationField();
+        assertEquals(COPTIC_UTC.years(), fld);
+        assertEquals(1L * 365L * MILLIS_PER_DAY, fld.getMillis(1, dt20.getMillis()));
+        assertEquals(2L * 365L * MILLIS_PER_DAY, fld.getMillis(2, dt20.getMillis()));
+        assertEquals(3L * 365L * MILLIS_PER_DAY, fld.getMillis(3, dt20.getMillis()));
+        assertEquals((4L * 365L + 1L) * MILLIS_PER_DAY, fld.getMillis(4, dt20.getMillis()));
+        
+        assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 4, fld.getMillis(1));
+        assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 2, fld.getMillis(2));
+        
+        assertEquals(1L * 365L * MILLIS_PER_DAY, fld.getMillis(1L, dt20.getMillis()));
+        assertEquals(2L * 365L * MILLIS_PER_DAY, fld.getMillis(2L, dt20.getMillis()));
+        assertEquals(3L * 365L * MILLIS_PER_DAY, fld.getMillis(3L, dt20.getMillis()));
+        assertEquals((4L * 365L + 1L) * MILLIS_PER_DAY, fld.getMillis(4L, dt20.getMillis()));
+        
+        assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 4, fld.getMillis(1L));
+        assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 2, fld.getMillis(2L));
+        
+        assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 4, fld.getUnitMillis());
+        
+        assertEquals(0, fld.getValue(1L * 365L * MILLIS_PER_DAY - 1L, dt20.getMillis()));
+        assertEquals(1, fld.getValue(1L * 365L * MILLIS_PER_DAY, dt20.getMillis()));
+        assertEquals(1, fld.getValue(1L * 365L * MILLIS_PER_DAY + 1L, dt20.getMillis()));
+        assertEquals(1, fld.getValue(2L * 365L * MILLIS_PER_DAY - 1L, dt20.getMillis()));
+        assertEquals(2, fld.getValue(2L * 365L * MILLIS_PER_DAY, dt20.getMillis()));
+        assertEquals(2, fld.getValue(2L * 365L * MILLIS_PER_DAY + 1L, dt20.getMillis()));
+        assertEquals(2, fld.getValue(3L * 365L * MILLIS_PER_DAY - 1L, dt20.getMillis()));
+        assertEquals(3, fld.getValue(3L * 365L * MILLIS_PER_DAY, dt20.getMillis()));
+        assertEquals(3, fld.getValue(3L * 365L * MILLIS_PER_DAY + 1L, dt20.getMillis()));
+        assertEquals(3, fld.getValue((4L * 365L + 1L) * MILLIS_PER_DAY - 1L, dt20.getMillis()));
+        assertEquals(4, fld.getValue((4L * 365L + 1L) * MILLIS_PER_DAY, dt20.getMillis()));
+        assertEquals(4, fld.getValue((4L * 365L + 1L) * MILLIS_PER_DAY + 1L, dt20.getMillis()));
+        
+        assertEquals(dt21.getMillis(), fld.add(dt20.getMillis(), 1));
+        assertEquals(dt22.getMillis(), fld.add(dt20.getMillis(), 2));
+        assertEquals(dt23.getMillis(), fld.add(dt20.getMillis(), 3));
+        assertEquals(dt24.getMillis(), fld.add(dt20.getMillis(), 4));
+        
+        assertEquals(dt21.getMillis(), fld.add(dt20.getMillis(), 1L));
+        assertEquals(dt22.getMillis(), fld.add(dt20.getMillis(), 2L));
+        assertEquals(dt23.getMillis(), fld.add(dt20.getMillis(), 3L));
+        assertEquals(dt24.getMillis(), fld.add(dt20.getMillis(), 4L));
+    }
+
+    public void testDurationMonth() {
+        // Leap 1723
+        DateTime dt11 = new DateTime(1723, 11, 2, 0, 0, 0, 0, COPTIC_UTC);
+        DateTime dt12 = new DateTime(1723, 12, 2, 0, 0, 0, 0, COPTIC_UTC);
+        DateTime dt13 = new DateTime(1723, 13, 2, 0, 0, 0, 0, COPTIC_UTC);
+        DateTime dt01 = new DateTime(1724, 1, 2, 0, 0, 0, 0, COPTIC_UTC);
+        
+        DurationField fld = dt11.monthOfYear().getDurationField();
+        assertEquals(COPTIC_UTC.months(), fld);
+        assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1, dt11.getMillis()));
+        assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2, dt11.getMillis()));
+        assertEquals((2L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(3, dt11.getMillis()));
+        assertEquals((3L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(4, dt11.getMillis()));
+        
+        assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1));
+        assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2));
+        assertEquals(13L * 30L * MILLIS_PER_DAY, fld.getMillis(13));
+        
+        assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1L, dt11.getMillis()));
+        assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2L, dt11.getMillis()));
+        assertEquals((2L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(3L, dt11.getMillis()));
+        assertEquals((3L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(4L, dt11.getMillis()));
+        
+        assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1L));
+        assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2L));
+        assertEquals(13L * 30L * MILLIS_PER_DAY, fld.getMillis(13L));
+        
+        assertEquals(0, fld.getValue(1L * 30L * MILLIS_PER_DAY - 1L, dt11.getMillis()));
+        assertEquals(1, fld.getValue(1L * 30L * MILLIS_PER_DAY, dt11.getMillis()));
+        assertEquals(1, fld.getValue(1L * 30L * MILLIS_PER_DAY + 1L, dt11.getMillis()));
+        assertEquals(1, fld.getValue(2L * 30L * MILLIS_PER_DAY - 1L, dt11.getMillis()));
+        assertEquals(2, fld.getValue(2L * 30L * MILLIS_PER_DAY, dt11.getMillis()));
+        assertEquals(2, fld.getValue(2L * 30L * MILLIS_PER_DAY + 1L, dt11.getMillis()));
+        assertEquals(2, fld.getValue((2L * 30L + 6L) * MILLIS_PER_DAY - 1L, dt11.getMillis()));
+        assertEquals(3, fld.getValue((2L * 30L + 6L) * MILLIS_PER_DAY, dt11.getMillis()));
+        assertEquals(3, fld.getValue((2L * 30L + 6L) * MILLIS_PER_DAY + 1L, dt11.getMillis()));
+        assertEquals(3, fld.getValue((3L * 30L + 6L) * MILLIS_PER_DAY - 1L, dt11.getMillis()));
+        assertEquals(4, fld.getValue((3L * 30L + 6L) * MILLIS_PER_DAY, dt11.getMillis()));
+        assertEquals(4, fld.getValue((3L * 30L + 6L) * MILLIS_PER_DAY + 1L, dt11.getMillis()));
+        
+        assertEquals(dt12.getMillis(), fld.add(dt11.getMillis(), 1));
+        assertEquals(dt13.getMillis(), fld.add(dt11.getMillis(), 2));
+        assertEquals(dt01.getMillis(), fld.add(dt11.getMillis(), 3));
+        
+        assertEquals(dt12.getMillis(), fld.add(dt11.getMillis(), 1L));
+        assertEquals(dt13.getMillis(), fld.add(dt11.getMillis(), 2L));
+        assertEquals(dt01.getMillis(), fld.add(dt11.getMillis(), 3L));
+    }
+
 }
diff --git a/JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java b/JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java
index bcf8e0629..fe0434a2d 100644
--- a/JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java
+++ b/JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java
@@ -27,6 +27,9 @@
 import org.joda.time.DateTimeField;
 import org.joda.time.DateTimeUtils;
 import org.joda.time.DateTimeZone;
+import org.joda.time.DurationField;
+import org.joda.time.DurationFieldType;
+import org.joda.time.DateTime.Property;
 
 /**
  * This class is a Junit unit test for EthiopicChronology.
@@ -35,7 +38,9 @@
  */
 public class TestEthiopicChronology extends TestCase {
 
-    private static long SKIP = 1 * DateTimeConstants.MILLIS_PER_DAY;
+    private static final int MILLIS_PER_DAY = DateTimeConstants.MILLIS_PER_DAY;
+
+    private static long SKIP = 1 * MILLIS_PER_DAY;
 
     private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
     private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
@@ -50,7 +55,7 @@
                      366 + 365;
     // 2002-06-09
     private long TEST_TIME_NOW =
-            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * MILLIS_PER_DAY;
 
     private DateTimeZone originalDateTimeZone = null;
     private TimeZone originalTimeZone = null;
@@ -61,7 +66,7 @@ public static void main(String[] args) {
     }
 
     public static TestSuite suite() {
-        SKIP = 1 * DateTimeConstants.MILLIS_PER_DAY;
+        SKIP = 1 * MILLIS_PER_DAY;
         return new TestSuite(TestEthiopicChronology.class);
     }
 
@@ -182,7 +187,7 @@ public void testDurationFields() {
         assertEquals(false, EthiopicChronology.getInstanceUTC().centuries().isPrecise());
         assertEquals(false, EthiopicChronology.getInstanceUTC().years().isPrecise());
         assertEquals(false, EthiopicChronology.getInstanceUTC().weekyears().isPrecise());
-        assertEquals(true, EthiopicChronology.getInstanceUTC().months().isPrecise());
+        assertEquals(false, EthiopicChronology.getInstanceUTC().months().isPrecise());
         assertEquals(true, EthiopicChronology.getInstanceUTC().weeks().isPrecise());
         assertEquals(true, EthiopicChronology.getInstanceUTC().days().isPrecise());
         assertEquals(true, EthiopicChronology.getInstanceUTC().halfdays().isPrecise());
@@ -350,16 +355,63 @@ public void testCalendar() {
 
     public void testSampleDate() {
         DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0, ISO_UTC).withChronology(ETHIOPIC_UTC);
-        System.out.println(dt);
         assertEquals(EthiopicChronology.EE, dt.getEra());
         assertEquals(20, dt.getCenturyOfEra());  // TODO confirm
         assertEquals(96, dt.getYearOfCentury());
-        assertEquals(1996, dt.getYear());
         assertEquals(1996, dt.getYearOfEra());
+        
+        assertEquals(1996, dt.getYear());
+        Property fld = dt.year();
+        assertEquals(false, fld.isLeap());
+        assertEquals(0, fld.getLeapAmount());
+        assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType());
+        assertEquals(new DateTime(1997, 10, 2, 0, 0, 0, 0, ETHIOPIC_UTC), fld.addToCopy(1));
+        
         assertEquals(10, dt.getMonthOfYear());
+        fld = dt.monthOfYear();
+        assertEquals(false, fld.isLeap());
+        assertEquals(0, fld.getLeapAmount());
+        assertEquals(DurationFieldType.days(), fld.getLeapDurationField().getType());
+        assertEquals(1, fld.getMinimumValue());
+        assertEquals(1, fld.getMinimumValueOverall());
+        assertEquals(13, fld.getMaximumValue());
+        assertEquals(13, fld.getMaximumValueOverall());
+        assertEquals(new DateTime(1997, 1, 2, 0, 0, 0, 0, ETHIOPIC_UTC), fld.addToCopy(4));
+        assertEquals(new DateTime(1996, 1, 2, 0, 0, 0, 0, ETHIOPIC_UTC), fld.addWrapFieldToCopy(4));
+        
         assertEquals(2, dt.getDayOfMonth());
+        fld = dt.dayOfMonth();
+        assertEquals(false, fld.isLeap());
+        assertEquals(0, fld.getLeapAmount());
+        assertEquals(null, fld.getLeapDurationField());
+        assertEquals(1, fld.getMinimumValue());
+        assertEquals(1, fld.getMinimumValueOverall());
+        assertEquals(30, fld.getMaximumValue());
+        assertEquals(30, fld.getMaximumValueOverall());
+        assertEquals(new DateTime(1996, 10, 3, 0, 0, 0, 0, ETHIOPIC_UTC), fld.addToCopy(1));
+        
         assertEquals(DateTimeConstants.WEDNESDAY, dt.getDayOfWeek());
+        fld = dt.dayOfWeek();
+        assertEquals(false, fld.isLeap());
+        assertEquals(0, fld.getLeapAmount());
+        assertEquals(null, fld.getLeapDurationField());
+        assertEquals(1, fld.getMinimumValue());
+        assertEquals(1, fld.getMinimumValueOverall());
+        assertEquals(7, fld.getMaximumValue());
+        assertEquals(7, fld.getMaximumValueOverall());
+        assertEquals(new DateTime(1996, 10, 3, 0, 0, 0, 0, ETHIOPIC_UTC), fld.addToCopy(1));
+        
         assertEquals(9 * 30 + 2, dt.getDayOfYear());
+        fld = dt.dayOfYear();
+        assertEquals(false, fld.isLeap());
+        assertEquals(0, fld.getLeapAmount());
+        assertEquals(null, fld.getLeapDurationField());
+        assertEquals(1, fld.getMinimumValue());
+        assertEquals(1, fld.getMinimumValueOverall());
+        assertEquals(365, fld.getMaximumValue());
+        assertEquals(366, fld.getMaximumValueOverall());
+        assertEquals(new DateTime(1996, 10, 3, 0, 0, 0, 0, ETHIOPIC_UTC), fld.addToCopy(1));
+        
         assertEquals(0, dt.getHourOfDay());
         assertEquals(0, dt.getMinuteOfHour());
         assertEquals(0, dt.getSecondOfMinute());
@@ -379,4 +431,105 @@ public void testSampleDateWithZone() {
         assertEquals(0, dt.getMillisOfSecond());
     }
 
+    public void testDurationYear() {
+        // Leap 1999, NotLeap 1996,97,98
+        DateTime dt96 = new DateTime(1996, 10, 2, 0, 0, 0, 0, ETHIOPIC_UTC);
+        DateTime dt97 = new DateTime(1997, 10, 2, 0, 0, 0, 0, ETHIOPIC_UTC);
+        DateTime dt98 = new DateTime(1998, 10, 2, 0, 0, 0, 0, ETHIOPIC_UTC);
+        DateTime dt99 = new DateTime(1999, 10, 2, 0, 0, 0, 0, ETHIOPIC_UTC);
+        DateTime dt00 = new DateTime(2000, 10, 2, 0, 0, 0, 0, ETHIOPIC_UTC);
+        
+        DurationField fld = dt96.year().getDurationField();
+        assertEquals(ETHIOPIC_UTC.years(), fld);
+        assertEquals(1L * 365L * MILLIS_PER_DAY, fld.getMillis(1, dt96.getMillis()));
+        assertEquals(2L * 365L * MILLIS_PER_DAY, fld.getMillis(2, dt96.getMillis()));
+        assertEquals(3L * 365L * MILLIS_PER_DAY, fld.getMillis(3, dt96.getMillis()));
+        assertEquals((4L * 365L + 1L) * MILLIS_PER_DAY, fld.getMillis(4, dt96.getMillis()));
+        
+        assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 4, fld.getMillis(1));
+        assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 2, fld.getMillis(2));
+        
+        assertEquals(1L * 365L * MILLIS_PER_DAY, fld.getMillis(1L, dt96.getMillis()));
+        assertEquals(2L * 365L * MILLIS_PER_DAY, fld.getMillis(2L, dt96.getMillis()));
+        assertEquals(3L * 365L * MILLIS_PER_DAY, fld.getMillis(3L, dt96.getMillis()));
+        assertEquals((4L * 365L + 1L) * MILLIS_PER_DAY, fld.getMillis(4L, dt96.getMillis()));
+        
+        assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 4, fld.getMillis(1L));
+        assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 2, fld.getMillis(2L));
+        
+        assertEquals(((4L * 365L + 1L) * MILLIS_PER_DAY) / 4, fld.getUnitMillis());
+        
+        assertEquals(0, fld.getValue(1L * 365L * MILLIS_PER_DAY - 1L, dt96.getMillis()));
+        assertEquals(1, fld.getValue(1L * 365L * MILLIS_PER_DAY, dt96.getMillis()));
+        assertEquals(1, fld.getValue(1L * 365L * MILLIS_PER_DAY + 1L, dt96.getMillis()));
+        assertEquals(1, fld.getValue(2L * 365L * MILLIS_PER_DAY - 1L, dt96.getMillis()));
+        assertEquals(2, fld.getValue(2L * 365L * MILLIS_PER_DAY, dt96.getMillis()));
+        assertEquals(2, fld.getValue(2L * 365L * MILLIS_PER_DAY + 1L, dt96.getMillis()));
+        assertEquals(2, fld.getValue(3L * 365L * MILLIS_PER_DAY - 1L, dt96.getMillis()));
+        assertEquals(3, fld.getValue(3L * 365L * MILLIS_PER_DAY, dt96.getMillis()));
+        assertEquals(3, fld.getValue(3L * 365L * MILLIS_PER_DAY + 1L, dt96.getMillis()));
+        assertEquals(3, fld.getValue((4L * 365L + 1L) * MILLIS_PER_DAY - 1L, dt96.getMillis()));
+        assertEquals(4, fld.getValue((4L * 365L + 1L) * MILLIS_PER_DAY, dt96.getMillis()));
+        assertEquals(4, fld.getValue((4L * 365L + 1L) * MILLIS_PER_DAY + 1L, dt96.getMillis()));
+        
+        assertEquals(dt97.getMillis(), fld.add(dt96.getMillis(), 1));
+        assertEquals(dt98.getMillis(), fld.add(dt96.getMillis(), 2));
+        assertEquals(dt99.getMillis(), fld.add(dt96.getMillis(), 3));
+        assertEquals(dt00.getMillis(), fld.add(dt96.getMillis(), 4));
+        
+        assertEquals(dt97.getMillis(), fld.add(dt96.getMillis(), 1L));
+        assertEquals(dt98.getMillis(), fld.add(dt96.getMillis(), 2L));
+        assertEquals(dt99.getMillis(), fld.add(dt96.getMillis(), 3L));
+        assertEquals(dt00.getMillis(), fld.add(dt96.getMillis(), 4L));
+    }
+
+    public void testDurationMonth() {
+        // Leap 1999, NotLeap 1996,97,98
+        DateTime dt11 = new DateTime(1999, 11, 2, 0, 0, 0, 0, ETHIOPIC_UTC);
+        DateTime dt12 = new DateTime(1999, 12, 2, 0, 0, 0, 0, ETHIOPIC_UTC);
+        DateTime dt13 = new DateTime(1999, 13, 2, 0, 0, 0, 0, ETHIOPIC_UTC);
+        DateTime dt01 = new DateTime(2000, 1, 2, 0, 0, 0, 0, ETHIOPIC_UTC);
+        
+        DurationField fld = dt11.monthOfYear().getDurationField();
+        assertEquals(ETHIOPIC_UTC.months(), fld);
+        assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1, dt11.getMillis()));
+        assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2, dt11.getMillis()));
+        assertEquals((2L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(3, dt11.getMillis()));
+        assertEquals((3L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(4, dt11.getMillis()));
+        
+        assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1));
+        assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2));
+        assertEquals(13L * 30L * MILLIS_PER_DAY, fld.getMillis(13));
+        
+        assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1L, dt11.getMillis()));
+        assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2L, dt11.getMillis()));
+        assertEquals((2L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(3L, dt11.getMillis()));
+        assertEquals((3L * 30L + 6L) * MILLIS_PER_DAY, fld.getMillis(4L, dt11.getMillis()));
+        
+        assertEquals(1L * 30L * MILLIS_PER_DAY, fld.getMillis(1L));
+        assertEquals(2L * 30L * MILLIS_PER_DAY, fld.getMillis(2L));
+        assertEquals(13L * 30L * MILLIS_PER_DAY, fld.getMillis(13L));
+        
+        assertEquals(0, fld.getValue(1L * 30L * MILLIS_PER_DAY - 1L, dt11.getMillis()));
+        assertEquals(1, fld.getValue(1L * 30L * MILLIS_PER_DAY, dt11.getMillis()));
+        assertEquals(1, fld.getValue(1L * 30L * MILLIS_PER_DAY + 1L, dt11.getMillis()));
+        assertEquals(1, fld.getValue(2L * 30L * MILLIS_PER_DAY - 1L, dt11.getMillis()));
+        assertEquals(2, fld.getValue(2L * 30L * MILLIS_PER_DAY, dt11.getMillis()));
+        assertEquals(2, fld.getValue(2L * 30L * MILLIS_PER_DAY + 1L, dt11.getMillis()));
+        assertEquals(2, fld.getValue((2L * 30L + 6L) * MILLIS_PER_DAY - 1L, dt11.getMillis()));
+        assertEquals(3, fld.getValue((2L * 30L + 6L) * MILLIS_PER_DAY, dt11.getMillis()));
+        assertEquals(3, fld.getValue((2L * 30L + 6L) * MILLIS_PER_DAY + 1L, dt11.getMillis()));
+        assertEquals(3, fld.getValue((3L * 30L + 6L) * MILLIS_PER_DAY - 1L, dt11.getMillis()));
+        assertEquals(4, fld.getValue((3L * 30L + 6L) * MILLIS_PER_DAY, dt11.getMillis()));
+        assertEquals(4, fld.getValue((3L * 30L + 6L) * MILLIS_PER_DAY + 1L, dt11.getMillis()));
+        
+        assertEquals(dt12.getMillis(), fld.add(dt11.getMillis(), 1));
+        assertEquals(dt13.getMillis(), fld.add(dt11.getMillis(), 2));
+        assertEquals(dt01.getMillis(), fld.add(dt11.getMillis(), 3));
+        
+        assertEquals(dt12.getMillis(), fld.add(dt11.getMillis(), 1L));
+        assertEquals(dt13.getMillis(), fld.add(dt11.getMillis(), 2L));
+        assertEquals(dt01.getMillis(), fld.add(dt11.getMillis(), 3L));
+    }
+
 }

From ad90fd587fe0920f070f8346ec74b48cd9886df0 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 29 Nov 2005 01:06:28 +0000
Subject: [PATCH 079/130] Remove leap year pattern type from public API

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@936 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/java/org/joda/time/chrono/IslamicChronology.java    | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java b/JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java
index 44be989cb..7e90d2006 100644
--- a/JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java
@@ -463,7 +463,7 @@ protected void assemble(Fields fields) {
     /**
      * Leap year patterns for the Islamic Chronology.
      */
-    public static class LeapYearPatternType implements Serializable {
+    static class LeapYearPatternType implements Serializable {
         /** Serialization lock */
         private static final long serialVersionUID = 26581275372698L;
 //        /** Leap year raw data encoded into bits. */
@@ -488,7 +488,7 @@ protected void assemble(Fields fields) {
          * @param index  the index
          * @param pattern  the bit pattern
          */
-        protected LeapYearPatternType(int index, int pattern) {
+        LeapYearPatternType(int index, int pattern) {
             super();
             this.index = (byte) index;
             this.pattern = pattern;
@@ -499,7 +499,7 @@ protected LeapYearPatternType(int index, int pattern) {
          * @param year  the year to query
          * @return true if leap
          */
-        public boolean isLeapYear(int year) {
+        boolean isLeapYear(int year) {
             int key = 1 << (year % 30);
             return ((pattern & key) > 0);
         }

From f1e237c4838d03906aecf68632bf580c481aac75 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 29 Nov 2005 01:07:38 +0000
Subject: [PATCH 080/130] Fix to compile on JDK1.3 by use of reflection

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@937 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../org/joda/time/base/AbstractDateTime.java  | 53 +++++++++++++++++--
 1 file changed, 49 insertions(+), 4 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/base/AbstractDateTime.java b/JodaTime/src/java/org/joda/time/base/AbstractDateTime.java
index f867c78a5..898f47f01 100644
--- a/JodaTime/src/java/org/joda/time/base/AbstractDateTime.java
+++ b/JodaTime/src/java/org/joda/time/base/AbstractDateTime.java
@@ -15,6 +15,8 @@
  */
 package org.joda.time.base;
 
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
 import java.util.Calendar;
 import java.util.Date;
 import java.util.GregorianCalendar;
@@ -46,6 +48,27 @@
         extends AbstractInstant
         implements ReadableDateTime {
 
+    /** The method to call as TimeZone.getOffset is only from JDK 1.4. */
+    private static final Method OFFSET_METHOD;
+    static {
+        Method m = null;
+        try {
+            m = TimeZone.class.getDeclaredMethod("getOffset", new Class[] {Long.TYPE});
+        } catch (SecurityException ex) {
+            // ignore
+        } catch (NoSuchMethodException ex) {
+            try {
+                m = TimeZone.class.getDeclaredMethod("getOffsets", new Class[] {Long.TYPE, int[].class});
+                m.setAccessible(true);
+            } catch (SecurityException e) {
+                // ignore
+            } catch (NoSuchMethodException e) {
+                // ignore
+            }
+        }
+        OFFSET_METHOD = m;
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Constructor.
@@ -248,8 +271,8 @@ public int getMillisOfSecond() {
      */
     public Date toDate() {
         long millis = getMillis();
-        long millisLocal = millis - TimeZone.getDefault().getOffset(millis);
-        return new Date(millisLocal + getZone().getOffsetFromLocal(millisLocal));
+        millis = fixMillisForTimeZone(millis, TimeZone.getDefault());
+        return new Date(millis);
     }
 
     /**
@@ -284,11 +307,33 @@ public GregorianCalendar toGregorianCalendar() {
 
     private Date convertToDate(Calendar cal) {
         long millis = getMillis();
-        long millisLocal = millis - cal.getTimeZone().getOffset(millis);
-        millis = millisLocal + getZone().getOffsetFromLocal(millisLocal);
+        millis = fixMillisForTimeZone(millis, cal.getTimeZone());
         return new Date(millis);
     }
 
+    private long fixMillisForTimeZone(long millis, TimeZone zone) {
+        if (OFFSET_METHOD == null) {
+            return millis;
+        }
+        Integer val;
+        try {
+            if ("getOffset".equals(OFFSET_METHOD.getName())) {
+                val = (Integer) OFFSET_METHOD.invoke(
+                        zone, new Object[] {new Long(millis)});
+            } else {
+                val = (Integer) OFFSET_METHOD.invoke(
+                        zone, new Object[] {new Long(millis), null});
+            }
+        } catch (IllegalAccessException ex) {
+            return millis;
+        } catch (InvocationTargetException ex) {
+            return millis;
+        }
+        
+        long millisLocal = millis - val.intValue();
+        return millisLocal + getZone().getOffsetFromLocal(millisLocal);
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Output the instant using the specified format pattern.

From e487e0160b4195f38d9d06dc68dcecda94d5a968 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Tue, 29 Nov 2005 06:01:14 +0000
Subject: [PATCH 081/130] Updated to version 2005o.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@938 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/java/org/joda/time/tz/src/Readme.txt  |  2 +-
 JodaTime/src/java/org/joda/time/tz/src/asia   | 38 ++++++++++++++++---
 .../java/org/joda/time/tz/src/northamerica    | 18 +++++++--
 .../java/org/joda/time/tz/src/southamerica    |  9 +++--
 4 files changed, 52 insertions(+), 15 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
index 809543ce3..3b20d5e2d 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
+++ b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
@@ -1,2 +1,2 @@
 The data files in this directory were obtained from the public tz database,
-http://www.twinsun.com/tz/tz-link.htm, version 2005n.
+http://www.twinsun.com/tz/tz-link.htm, version 2005o.
diff --git a/JodaTime/src/java/org/joda/time/tz/src/asia b/JodaTime/src/java/org/joda/time/tz/src/asia
index 9e4087bd5..d885534dd 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/asia
+++ b/JodaTime/src/java/org/joda/time/tz/src/asia
@@ -1,4 +1,4 @@
-# @(#)asia	7.86
+# @(#)asia	7.88
 
 # This data is by no means authoritative; if you think you know better,
 # go ahead and edit the file (and please send any changes to
@@ -99,9 +99,12 @@ Zone	Asia/Yerevan	2:58:00 -	LMT	1924 May  2
 			4:00 RussiaAsia	AM%sT
 
 # Azerbaijan
+# From Rustam Aliyev of the Azerbaijan Internet Forum (2005-10-23):
+# According to the resolution of Cabinet of Ministers, 1997
+# Resolution available at: http://aif.az/docs/daylight_res.pdf
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Azer	1997	max	-	Mar	lastSun	 1:00	1:00	S
-Rule	Azer	1997	max	-	Oct	lastSun	 1:00	0	-
+Rule	Azer	1997	max	-	Mar	lastSun	 4:00	1:00	S
+Rule	Azer	1997	max	-	Oct	lastSun	 5:00	0	-
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Asia/Baku	3:19:24 -	LMT	1924 May  2
 			3:00	-	BAKT	1957 Mar    # Baku Time
@@ -348,6 +351,17 @@ Link	Asia/Nicosia	Europe/Nicosia
 # Mikhail Saakashvili, who said the change was partly prompted by the process
 # of integration into Europe.
 
+# From Teimuraz Abashidze (2005-11-07):
+# Government of Georgia ... decided to NOT CHANGE daylight savings time on
+# [Oct.] 30, as it was done before during last more than 10 years.
+# Currently, we are in fact GMT +4:00, as before 30 October it was GMT
+# +3:00.... The problem is, there is NO FORMAL LAW or governmental document
+# about it.  As far as I can find, I was told, that there is no document,
+# because we just DIDN'T ISSUE document about switching to winter time....
+# I don't know what can be done, especially knowing that some years ago our
+# DST rules where changed THREE TIMES during one month.
+
+
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Asia/Tbilisi	2:59:16 -	LMT	1880
 			2:59:16	-	TBMT	1924 May  2 # Tbilisi Mean Time
@@ -359,7 +373,8 @@ Zone	Asia/Tbilisi	2:59:16 -	LMT	1880
 			4:00 E-EurAsia	GE%sT	1996 Oct lastSun
 			4:00	1:00	GEST	1997 Mar lastSun
 			4:00 E-EurAsia	GE%sT	2004 Jun 27
-			3:00 RussiaAsia	GE%sT
+			3:00 RussiaAsia	GE%sT	2005 Mar lastSun 2:00
+			4:00	-	GET
 
 # East Timor
 
@@ -915,6 +930,9 @@ Zone	Asia/Tokyo	9:18:59	-	LMT	1887 Dec 31 15:00u
 # The decision was taken because of the increase in working hours in
 # government's departments from six to seven hours.
 #
+# From Paul Eggert (2005-11-22):
+# Starting 2003 transitions are from Steffen Thorsen's web site timeanddate.com.
+#
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Jordan	1973	only	-	Jun	6	0:00	1:00	S
 Rule	Jordan	1973	1975	-	Oct	1	0:00	0	-
@@ -937,8 +955,11 @@ Rule	Jordan	1993	1998	-	Apr	Fri>=1	0:00	1:00	S
 Rule	Jordan	1994	only	-	Sep	Fri>=15	0:00	0	-
 Rule	Jordan	1995	1998	-	Sep	Fri>=15	0:00s	0	-
 Rule	Jordan	1999	only	-	Jul	 1	0:00s	1:00	S
-Rule	Jordan	1999	max	-	Sep	lastThu	0:00s	0	-
+Rule	Jordan	1999	2002	-	Sep	lastThu	0:00s	0	-
 Rule	Jordan	2000	max	-	Mar	lastThu	0:00s	1:00	S
+Rule	Jordan	2003	only	-	Oct	24	0:00s	0	-
+Rule	Jordan	2004	only	-	Oct	15	0:00s	0	-
+Rule	Jordan	2005	max	-	Sep	lastFri	0:00s	0	-
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Asia/Amman	2:23:44 -	LMT	1931
 			2:00	Jordan	EE%sT
@@ -1408,6 +1429,9 @@ Zone	Asia/Karachi	4:28:12 -	LMT	1907
 # For now, let's assume that the spring switch was at 24:00,
 # and that they switch at 0:00 on the 3rd Fridays of April and October.
 
+# From Paul Eggert (2005-11-22):
+# Starting 2004 transitions are from Steffen Thorsen's web site timeanddate.com.
+
 # The rules for Egypt are stolen from the `africa' file.
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule EgyptAsia	1957	only	-	May	10	0:00	1:00	S
@@ -1418,7 +1442,9 @@ Rule EgyptAsia	1959	1965	-	Sep	30	3:00	0	-
 Rule EgyptAsia	1966	only	-	Oct	 1	3:00	0	-
 
 Rule Palestine	1999	max	-	Apr	Fri>=15	0:00	1:00	S
-Rule Palestine	1999	max	-	Oct	Fri>=15	0:00	0	-
+Rule Palestine	1999	2003	-	Oct	Fri>=15	0:00	0	-
+Rule Palestine	2004	only	-	Oct	 1	1:00	0	-
+Rule Palestine	2005	max	-	Oct	 4	1:00	0	-
 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Asia/Gaza	2:17:52	-	LMT	1900 Oct
diff --git a/JodaTime/src/java/org/joda/time/tz/src/northamerica b/JodaTime/src/java/org/joda/time/tz/src/northamerica
index 52f64826f..d1984d944 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/northamerica
+++ b/JodaTime/src/java/org/joda/time/tz/src/northamerica
@@ -1,4 +1,4 @@
-# @(#)northamerica	7.80
+# @(#)northamerica	7.82
 # also includes Central America and the Caribbean
 
 # This data is by no means authoritative; if you think you know better,
@@ -1815,6 +1815,11 @@ Zone America/Costa_Rica	-5:36:20 -	LMT	1890		# San Jose
 # to normal hours (after daylight saving time)".
 # For now, let's assume that it's a one-year temporary measure.
 
+# From Carlos A. Carnero Delgado (2005-11-12):
+# This year (just like in 2004-2005) there's no change in time zone
+# adjustment in Cuba.  We will stay in daylight saving time:
+# http://www.granma.cu/espanol/2005/noviembre/mier9/horario.html
+
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Cuba	1928	only	-	Jun	10	0:00	1:00	D
 Rule	Cuba	1928	only	-	Oct	10	0:00	0	S
@@ -1845,7 +1850,7 @@ Rule	Cuba	1997	only	-	Oct	12	0:00s	0	S
 Rule	Cuba	1998	1999	-	Mar	lastSun	0:00s	1:00	D
 Rule	Cuba	1998	2003	-	Oct	lastSun	0:00s	0	S
 Rule	Cuba	2000	max	-	Apr	Sun>=1	0:00s	1:00	D
-Rule	Cuba	2005	max	-	Oct	lastSun	0:00s	0	S
+Rule	Cuba	2006	max	-	Oct	lastSun	0:00s	0	S
 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	America/Havana	-5:29:28 -	LMT	1890
@@ -2031,13 +2036,18 @@ Zone America/Montserrat	-4:08:52 -	LMT	1911 Jul 1 0:01   # Olveston
 # changes in 2000.  Perhaps a note could be added to the northamerica file, to
 # the effect that we have indirect evidence that DST was observed in 2000.
 #
+# From Jesper Norgaard Welen (2005-11-02):
+# Nicaragua left DST the 2005-10-02 at 00:00 (local time).
+# http://www.presidencia.gob.ni/presidencia/files_index/secretaria/comunicados/2005/septiembre/26septiembre-cambio-hora.htm
+# (2005-09-26)
+#
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Nic	1979	1980	-	Mar	Sun>=16	0:00	1:00	D
 Rule	Nic	1979	1980	-	Jun	Mon>=23	0:00	0	S
-Rule	Nic	1992	only	-	Jan	1	4:00	1:00	D
+Rule	Nic	1992	only	-	Jan	 1	4:00	1:00	D
 Rule	Nic	1992	only	-	Sep	24	0:00	0	S
 Rule	Nic	2005	only	-	Apr	10	0:00	1:00	D
-Rule	Nic	2005	only	-	Sep	18	0:00	0	S
+Rule	Nic	2005	only	-	Oct	 2	0:00	0	S
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	America/Managua	-5:45:08 -	LMT	1890
 			-5:45:12 -	MMT	1934 Jun 23 # Managua Mean Time?
diff --git a/JodaTime/src/java/org/joda/time/tz/src/southamerica b/JodaTime/src/java/org/joda/time/tz/src/southamerica
index 74c4bf2b5..462a253d6 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/southamerica
+++ b/JodaTime/src/java/org/joda/time/tz/src/southamerica
@@ -1,4 +1,4 @@
-# @(#)southamerica	7.62
+# @(#)southamerica	7.63
 
 # This data is by no means authoritative; if you think you know better,
 # go ahead and edit the file (and please send any changes to
@@ -565,11 +565,12 @@ Rule	Brazil	2003	only	-	Oct	19	 0:00	1:00	S
 # Decree 5,223 (2004-10-01) reestablishes DST in MT.
 # <a href="http://www.planalto.gov.br/ccivil_03/_Ato2004-2006/2004/Decreto/D5223.htm"></a>
 Rule	Brazil	2004	only	-	Nov	 2	 0:00	1:00	S
+# Decree <a href="http://pcdsh01.on.br/DecHV5539.gif">5,539</a> (2005-09-19),
+# adopted by the same states as before.
+Rule	Brazil	2005	max	-	Oct	Sun>=15	 0:00	1:00	S
 # The latest ruleset listed above says that the following states observe DST:
 # DF, ES, GO, MG, MS, MT, PR, RJ, RS, SC, SP.
-#
-Rule	Brazil	2005	max	-	Oct	Sun>=15	 0:00	1:00	S
-# For dates after mid-2005, the above rules with TO="max" are guesses
+# For dates after mid-2006, the above rules with TO="max" are guesses
 # and are quite possibly wrong, but are more likely than no DST at all.
 
 

From 3e0ac4e40b40fbefb2bccd6b3308c1931251c3fe Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 30 Nov 2005 00:52:51 +0000
Subject: [PATCH 082/130] Make chrono a user package

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@939 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/build.xml   | 4 ++--
 JodaTime/project.xml | 4 ++--
 2 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/JodaTime/build.xml b/JodaTime/build.xml
index 2e7d79d4b..35fd3ef66 100644
--- a/JodaTime/build.xml
+++ b/JodaTime/build.xml
@@ -250,9 +250,9 @@
                  bottom="Copyright (c) 2001-2005 - Joda.org"
                Overview="${source.home}/org/joda/time/overview.html">
       <classpath refid="compile.classpath"/>
-      <group title="User Packages" packages="org.joda.time:org.joda.time.format">
+      <group title="User Packages" packages="org.joda.time:org.joda.time.format:org.joda.time.chrono">
       </group>
-      <group title="Implementation Packages" packages="org.joda.time.chrono:org.joda.time.base:org.joda.time.convert:org.joda.time.field:org.joda.time.tz">
+      <group title="Implementation Packages" packages="org.joda.time.base:org.joda.time.convert:org.joda.time.field:org.joda.time.tz">
       </group>
     </javadoc>
   </target>
diff --git a/JodaTime/project.xml b/JodaTime/project.xml
index 49a3287c4..34e9802a7 100644
--- a/JodaTime/project.xml
+++ b/JodaTime/project.xml
@@ -18,11 +18,11 @@
   <packageGroups>
     <packageGroup>
       <title>User Packages</title>
-      <packages>org.joda.time:org.joda.time.format</packages>
+      <packages>org.joda.time:org.joda.time.format:org.joda.time.chrono</packages>
     </packageGroup>
     <packageGroup>
       <title>Implementation Packages</title>
-      <packages>org.joda.time.chrono:org.joda.time.base:org.joda.time.convert:org.joda.time.field:org.joda.time.tz</packages>
+      <packages>org.joda.time.base:org.joda.time.convert:org.joda.time.field:org.joda.time.tz</packages>
     </packageGroup>
   </packageGroups>  
   <logo>/images/jodatime.png</logo>

From a33793029b3ad818f842a99e6d69880181081aa0 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 30 Nov 2005 00:53:44 +0000
Subject: [PATCH 083/130] Add Islamic Chronology documentation

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@940 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/cal_islamic.xml | 104 +++++++++++++++++++++++++++++++++
 JodaTime/xdocs/navigation.xml  |   1 +
 2 files changed, 105 insertions(+)
 create mode 100644 JodaTime/xdocs/cal_islamic.xml

diff --git a/JodaTime/xdocs/cal_islamic.xml b/JodaTime/xdocs/cal_islamic.xml
new file mode 100644
index 000000000..200629dd7
--- /dev/null
+++ b/JodaTime/xdocs/cal_islamic.xml
@@ -0,0 +1,104 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+
+<document>
+
+ <properties>
+  <title>Java date and time API - Islamic calendar system</title>
+  <author email="scolebourne@users.sourceforge.net">Stephen Colebourne</author>
+ </properties>
+
+ <body>
+
+<section name="Islamic calendar system">
+<p>
+The Islamic, or Hijri, calendar system is a Lunar calendar used
+in many Muslim countries.
+</p>
+<p>
+The Islamic calendar system is a lunar calendar based on observation.
+The observation aspect of the calendar means that a new month can only
+be declared based on human observations of the moon, something
+which can obviously vary and is unsuited to computer calculation.
+</p>
+<p>
+Joda-Time implements the arithmetic Islamic calendar, which is an 
+approximation of the actual calendar.
+There are 12 months, each of 29 or 30 days, making a year of 354 days, or 355 in a leap year.
+The days in the month alternate, with the first month having 30 days,
+the second 29 days and so on.
+In a leap year, the twelfth month has 30 days instead of the normal 29.
+</p>
+<p>
+There definition of a leap year in the Islamic calendar varies.
+All agree on a 30 year cycle, however which years within the 30 are leap
+varies by the leap year pattern:
+</p>
+<table>
+<tr>
+<td>15-based</td>
+<td>2, 5, 7, 10, 13, 15, 18, 21, 24, 26, 29</td>
+</tr>
+<tr>
+<td>16-based</td>
+<td>2, 5, 7, 10, 13, 16, 18, 21, 24, 26, 29</td>
+</tr>
+<tr>
+<td>Indian</td>
+<td>2, 5, 8, 10, 13, 16, 19, 21, 24, 27, 29</td>
+</tr>
+<tr>
+<td>Habash al-Hasib</td>
+<td>2, 5, 8, 11, 13, 16, 19, 21, 24, 27, 30</td>
+</tr>
+</table>
+<p>
+Joda-Time allows you to choose between these leap year patterns.
+The 16-based algorithm is the most commonly used, and is the default.
+Note that Microsoft uses the 15-based pattern, and calls it the 'Kuwaiti algorithm'.
+</p>
+<p>
+The epoch of the calendar system is 0622-07-16 (Julian) which is therefore 0001-01-01 (Islamic).
+The current (and only implemented) era is 'AH' (Anno Hegirae).
+</p>
+<p>
+Days of the week are named 'the first day', 'the second day' and so on, where
+Sunday is the first day.
+The day of the week value (numeric) returned by Joda-Time however, is the same
+as the ISO day of week definition.
+Thus Sunday will return the numeric value 7, and Monday will return the numeric value 1.
+</p>
+<p>
+A day in the Islamic calendar begins at sunset on the previous 'day'.
+Joda-Time does not model this, thus times and date rollover follow standard
+ISO definitions, in other words starting at midnight.
+</p>
+<p>
+References
+<ul>
+<li>Calendrical Calculations - Millenium Edition - ISBN 0521777526</li>
+<li><a href="http://en.wikipedia.org/wiki/Islamic_calendar">Wikipedia - Islamic Calendar</a></li>
+<li><a href="http://www.phys.uu.nl/~vgent/islam/islamyear_en.htm">Islamic calendar converter</a></li>
+</ul>
+</p>
+</section>
+
+<section name="Using Islamic chronology in Joda-Time">
+<p>
+Within Joda-Time the Islamic calendar system can be used by obtaining an
+instance of <a href="apidocs/org/joda/time/chrono/IslamicChronology.html">IslamicChronology</a>.
+This is normally created via the
+<a href="apidocs/org/joda/time/chrono/IslamicChronology.html#getInstance()">IslamicChronology.getInstance()</a> factory.
+The chronology is then passed into the constructors of the main date and time classes.
+</p>
+<source>
+// setup date object for midday on May Day 2004 (ISO year 2004)
+DateTime dtISO = new DateTime(2004, 5, 1, 12, 0, 0, 0);
+
+// find out what the same instant is using the Islamic Chronology
+DateTime dtIslamic = dtISO.withChronology(IslamicChronology.getInstance());
+</source>
+
+</section>
+
+</body>
+</document>
diff --git a/JodaTime/xdocs/navigation.xml b/JodaTime/xdocs/navigation.xml
index 29f84a8d4..ffd9ddd57 100644
--- a/JodaTime/xdocs/navigation.xml
+++ b/JodaTime/xdocs/navigation.xml
@@ -38,6 +38,7 @@
       <item name="Ethoipic" href="/cal_ethiopic.html"/>
       <item name="Gregorian" href="/cal_gregorian.html"/>
       <item name="GregorianJulian" href="/cal_gj.html"/>
+      <item name="Islamic" href="/cal_islamic.html"/>
       <item name="Julian" href="/cal_julian.html"/>
     </menu>
     

From 52f9186f51f89239a02bba25cf053a6120e93f1d Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 30 Nov 2005 00:55:09 +0000
Subject: [PATCH 084/130] Rewrite documentation to avoid deprecated methods

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@941 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/cal_buddhist.xml  | 4 ++--
 JodaTime/xdocs/cal_coptic.xml    | 4 ++--
 JodaTime/xdocs/cal_gj.xml        | 6 +++---
 JodaTime/xdocs/cal_gregorian.xml | 4 ++--
 JodaTime/xdocs/cal_iso.xml       | 4 ++--
 JodaTime/xdocs/cal_julian.xml    | 4 ++--
 6 files changed, 13 insertions(+), 13 deletions(-)

diff --git a/JodaTime/xdocs/cal_buddhist.xml b/JodaTime/xdocs/cal_buddhist.xml
index b61826dbb..03add5a0f 100644
--- a/JodaTime/xdocs/cal_buddhist.xml
+++ b/JodaTime/xdocs/cal_buddhist.xml
@@ -40,7 +40,7 @@ References
 Within Joda-Time the Buddhist calendar system can be used by obtaining an
 instance of <a href="apidocs/org/joda/time/chrono/BuddhistChronology.html">BuddhistChronology</a>.
 This is normally created using the factory method
-<a href="apidocs/org/joda/time/Chronology.html#getBuddhist()">Chronology.getBuddhist()</a>.
+<a href="apidocs/org/joda/time/chrono/BuddhistChronology.html#getInstance()">BuddhistChronology.getInstance()</a>.
 This is then passed into the constructors of the main date and time classes.
 </p>
 <source>
@@ -48,7 +48,7 @@ This is then passed into the constructors of the main date and time classes.
 DateTime dtISO = new DateTime(2004, 5, 1, 12, 0, 0, 0);
 
 // find out what the same instant is using the Buddhist Chronology
-DateTime dtBudd = dtISO.withChronology(Chronology.getBuddhist());
+DateTime dtBudd = dtISO.withChronology(BuddhistChronology.getInstance());
 </source>
 
 </section>
diff --git a/JodaTime/xdocs/cal_coptic.xml b/JodaTime/xdocs/cal_coptic.xml
index 1c6f8ba04..842dea826 100644
--- a/JodaTime/xdocs/cal_coptic.xml
+++ b/JodaTime/xdocs/cal_coptic.xml
@@ -44,7 +44,7 @@ References
 Within Joda-Time the Coptic calendar system can be used by obtaining an
 instance of <a href="apidocs/org/joda/time/chrono/CopticChronology.html">CopticChronology</a>.
 This is normally created using the factory method
-<a href="apidocs/org/joda/time/Chronology.html#getCoptic()">Chronology.getCoptic()</a>.
+<a href="apidocs/org/joda/time/chrono/CopticChronology.html#getInstance()">CopticChronology.getInstance()</a>.
 This is then passed into the constructors of the main date and time classes.
 </p>
 <source>
@@ -52,7 +52,7 @@ This is then passed into the constructors of the main date and time classes.
 DateTime dtISO = new DateTime(2004, 5, 1, 12, 0, 0, 0);
 
 // find out what the same instant is using the Coptic Chronology
-DateTime dtCopt = dtISO.withChronology(Chronology.getCoptic());
+DateTime dtCopt = dtISO.withChronology(CopticChronology.getInstance());
 </source>
 
 </section>
diff --git a/JodaTime/xdocs/cal_gj.xml b/JodaTime/xdocs/cal_gj.xml
index e5eba34a4..b26be26eb 100644
--- a/JodaTime/xdocs/cal_gj.xml
+++ b/JodaTime/xdocs/cal_gj.xml
@@ -47,17 +47,17 @@ References
 Within Joda-Time the GregorianJulian calendar system can be used by obtaining an
 instance of <a href="apidocs/org/joda/time/chrono/GJChronology.html">GJChronology</a>.
 This is normally created using the factory method
-<a href="apidocs/org/joda/time/Chronology.html#getGJ()">Chronology.getGJ()</a>.
+<a href="apidocs/org/joda/time/chrono/GJChronology.html#getInstance()">GJChronology.getInstance()</a>.
 This is then passed into the constructors of the main date and time classes.
 </p>
 <source>
 // setup date object for the Battle of Hastings in 1066
-Chronology chrono = Chronology.getGJ();
+Chronology chrono = GJChronology.getInstance();
 DateTime dt = new DateTime(1066, 10, 14, 10, 0, 0, 0, chrono);
 </source>
 <p>
 If you want to change the cutover date between Julian and Gregorian, you will need
-to look at the factory methods on the GJChronology class itself.
+to use the other factory methods on GJChronology.
 </p>
 
 </section>
diff --git a/JodaTime/xdocs/cal_gregorian.xml b/JodaTime/xdocs/cal_gregorian.xml
index f7e25131a..b5631c543 100644
--- a/JodaTime/xdocs/cal_gregorian.xml
+++ b/JodaTime/xdocs/cal_gregorian.xml
@@ -43,12 +43,12 @@ References
 Within Joda-Time the Gregorian calendar system can be used by obtaining an
 instance of <a href="apidocs/org/joda/time/chrono/GregorianChronology.html">GregorianChronology</a>.
 This is normally created using the factory method
-<a href="apidocs/org/joda/time/Chronology.html#getGregorian()">Chronology.getGregorian()</a>.
+<a href="apidocs/org/joda/time/chrono/GregorianChronology.html#getInstance()">GregorianChronology.getInstance()</a>.
 This is then passed into the constructors of the main date and time classes.
 </p>
 <source>
 // setup date object for midday on Christmas 2004
-Chronology chrono = Chronology.getGregorian();
+Chronology chrono = GregorianChronology.getInstance();
 DateTime dt = new DateTime(2004, 12, 25, 12, 0, 0, 0, chrono);
 </source>
 
diff --git a/JodaTime/xdocs/cal_iso.xml b/JodaTime/xdocs/cal_iso.xml
index 3bdb14331..69030bf07 100644
--- a/JodaTime/xdocs/cal_iso.xml
+++ b/JodaTime/xdocs/cal_iso.xml
@@ -108,14 +108,14 @@ will default to ISO chronology.
 The actual chronology class is
 <a href="apidocs/org/joda/time/chrono/ISOChronology.html">ISOChronology</a>.
 This is normally created if required using the factory method
-<a href="apidocs/org/joda/time/Chronology.html#getISO()">Chronology.getISO()</a>.
+<a href="apidocs/org/joda/time/chrono/ISOChronology.html#getInstance()">ISOChronology.getInstance()</a>.
 </p>
 <source>
 // setup date object for midday on Christmas 2004 (default time zone)
 DateTime dt = new DateTime(2004, 12, 25, 12, 0, 0, 0);
 
 // or specify the chronology explicitly
-Chronology chrono = Chronology.getISO();
+Chronology chrono = ISOChronology.getInstance();
 DateTime dt = new DateTime(2004, 12, 25, 12, 0, 0, 0, chrono);
 
 // or use the default null handling behaviour
diff --git a/JodaTime/xdocs/cal_julian.xml b/JodaTime/xdocs/cal_julian.xml
index 4e69094ed..263661db0 100644
--- a/JodaTime/xdocs/cal_julian.xml
+++ b/JodaTime/xdocs/cal_julian.xml
@@ -37,12 +37,12 @@ References
 Within Joda-Time the Julian calendar system can be used by obtaining an
 instance of <a href="apidocs/org/joda/time/chrono/JulianChronology.html">JulianChronology</a>.
 This is normally created using the factory method
-<a href="apidocs/org/joda/time/Chronology.html#getJulian()">Chronology.getJulian()</a>.
+<a href="apidocs/org/joda/time/chrono/JulianChronology.html#getInstance()">JulianChronology.getInstance()</a>.
 This is then passed into the constructors of the main date and time classes.
 </p>
 <source>
 // setup date object for the Battle of Hastings in 1066
-Chronology chrono = Chronology.getJulian();
+Chronology chrono = JulianChronology.getInstance();
 DateTime dt = new DateTime(1066, 10, 14, 10, 0, 0, 0, chrono);
 </source>
 

From 4a84c9485d9c977ca30f72848f7cb6cae73ad485 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 30 Nov 2005 00:56:02 +0000
Subject: [PATCH 085/130] Improve docs now chrono is a user package

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@942 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../java/org/joda/time/chrono/package.html    | 19 ++++++++++++++++++-
 1 file changed, 18 insertions(+), 1 deletion(-)

diff --git a/JodaTime/src/java/org/joda/time/chrono/package.html b/JodaTime/src/java/org/joda/time/chrono/package.html
index ddb47eb64..4974ca347 100644
--- a/JodaTime/src/java/org/joda/time/chrono/package.html
+++ b/JodaTime/src/java/org/joda/time/chrono/package.html
@@ -26,9 +26,26 @@
 </p>
 <p>
 This package contains all of the chronology implementations within the library.
-It also contains all of the specialised field implementations.
+A chronology represents all the rules of a calendar system.
 Applications will create chronologies using the static factory methods on
 each specific Chronology class - getInstance.
+The currently provided chronology implementations are:
+<ul>
+  <li>ISO</li>
+  <li>GJ (GregorianJulian)</li>
+  <li>Gregorian</li>
+  <li>Julian</li>
+  <li>Buddhist</li>
+  <li>Coptic</li>
+  <li>Ethiopic</li>
+  <li>Islamic</li>
+</ul>
+</p>
+<p>
+The package also contains all of the specialised field implementations.
+These classes are package scoped, along with various other chronology helper classes.
+The package scoped classes do not form part of the public API of Joda-Time
+and may change at any time.
 </p>
 </body>
 </html>

From 2931c1d25c1ebe97c1665a585d83105d5f6932ad Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Wed, 30 Nov 2005 07:00:23 +0000
Subject: [PATCH 086/130] Made LeapYearPatternType class a public object.
 Otherwise, it is impossible for users to reference it in a local variable or
 cast it.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@943 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java b/JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java
index 7e90d2006..c00e7d6e6 100644
--- a/JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java
@@ -461,9 +461,9 @@ protected void assemble(Fields fields) {
 
     //-----------------------------------------------------------------------
     /**
-     * Leap year patterns for the Islamic Chronology.
+     * Opaque object describing a leap year pattern for the Islamic Chronology.
      */
-    static class LeapYearPatternType implements Serializable {
+    public static class LeapYearPatternType implements Serializable {
         /** Serialization lock */
         private static final long serialVersionUID = 26581275372698L;
 //        /** Leap year raw data encoded into bits. */

From 60d2c70fb2e9bb8675859167f0852baeb85ffb26 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Wed, 30 Nov 2005 08:37:21 +0000
Subject: [PATCH 087/130] Added limited localization support for
 IslamicChronology month names.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@944 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../chrono/BasicMonthOfYearDateTimeField.java |   2 +-
 .../joda/time/chrono/IslamicChronology.java   |   2 +-
 .../IslamicMonthOfYearDateTimeField.java      | 107 ++++++++++++++++++
 3 files changed, 109 insertions(+), 2 deletions(-)
 create mode 100644 JodaTime/src/java/org/joda/time/chrono/IslamicMonthOfYearDateTimeField.java

diff --git a/JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java
index 1edb2f2e2..7aa8b0761 100644
--- a/JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java
+++ b/JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java
@@ -43,7 +43,7 @@
     /**
      * Restricted constructor.
      * 
-     * @param the dayOfYear that is the leap day
+     * @param leapMonth the month of year that leaps
      */
     BasicMonthOfYearDateTimeField(BaseGJChronology chronology, int leapMonth) {
         super(DateTimeFieldType.monthOfYear(), chronology.getAverageMillisPerMonth());
diff --git a/JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java b/JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java
index c00e7d6e6..e31cf74f8 100644
--- a/JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java
@@ -454,7 +454,7 @@ protected void assemble(Fields fields) {
             super.assemble(fields);
 
             fields.era = ERA_FIELD;
-            fields.monthOfYear = new BasicMonthOfYearDateTimeField(this, 12);
+            fields.monthOfYear = new IslamicMonthOfYearDateTimeField(this);
             fields.months = fields.monthOfYear.getDurationField();
         }
     }
diff --git a/JodaTime/src/java/org/joda/time/chrono/IslamicMonthOfYearDateTimeField.java b/JodaTime/src/java/org/joda/time/chrono/IslamicMonthOfYearDateTimeField.java
new file mode 100644
index 000000000..eafcff8fa
--- /dev/null
+++ b/JodaTime/src/java/org/joda/time/chrono/IslamicMonthOfYearDateTimeField.java
@@ -0,0 +1,107 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.chrono;
+
+import java.util.Locale;
+
+/**
+ * Provides month names for IslamicChronology. This implementation is crude and
+ * only supports locale language of "ar". For all other locales, names are
+ * numbers.
+ *
+ * @author Brian S O'Neill
+ * @since 1.2
+ */
+final class IslamicMonthOfYearDateTimeField extends BasicMonthOfYearDateTimeField {
+
+    /** Serialization version */
+    private static final long serialVersionUID = -4748157875845286249L;
+
+    private static final Locale AR = new Locale("ar", "", "");
+
+    private static final String[] AR_MONTH_NAMES = {
+        "\u0645\u062d\u0631\u0645",
+        "\u0635\u0641\u0631",
+        "\u0631\u0628\u064a\u0639 \u0627\u0644\u0623\u0648\u0644",
+        "\u0631\u0628\u064a\u0639 \u0627\u0644\u0622\u062e\u0631",
+        "\u062c\u0645\u0627\u062f\u0649 \u0627\u0644\u0623\u0648\u0644\u0649",
+        "\u062c\u0645\u0627\u062f\u0649 \u0627\u0644\u0622\u062e\u0631\u0629",
+        "\u0631\u062c\u0628",
+        "\u0634\u0639\u0628\u0627\u0646",
+        "\u0631\u0645\u0636\u0627\u0646",
+        "\u0634\u0648\u0627\u0644",
+        "\u0630\u0648 \u0627\u0644\u0642\u0639\u062f\u0629",
+        "\u0630\u0648 \u0627\u0644\u062d\u062c\u0629"
+    };
+
+    private static final int AR_MAX_MONTH_NAME_LENGTH;
+
+    static {
+        int max = 0;
+        for (int i=0; i<AR_MONTH_NAMES.length; i++) {
+            int len = AR_MONTH_NAMES[i].length();
+            if (len > max) {
+                len = max;
+            }
+        }
+        AR_MAX_MONTH_NAME_LENGTH = max;
+    }
+
+    /**
+     * Restricted constructor
+     */
+    IslamicMonthOfYearDateTimeField(IslamicChronology chronology) {
+        super(chronology, 12);
+    }
+
+    public String getAsText(int fieldValue, Locale locale) {
+        if (locale == null) {
+            locale = Locale.getDefault();
+        }
+        if (isSupported(locale) && fieldValue >= 1 && fieldValue <= 12) {
+            return AR_MONTH_NAMES[fieldValue - 1];
+        }
+        return super.getAsText(fieldValue, locale);
+    }
+
+    protected int convertText(String text, Locale locale) {
+        if (locale == null) {
+            locale = Locale.getDefault();
+        }
+        if (isSupported(locale)) {
+            for (int i=0; i<AR_MONTH_NAMES.length; i++) {
+                if (AR_MONTH_NAMES[i].equals(text)) {
+                    return i + 1;
+                }
+            }
+        }
+        return super.convertText(text, locale);
+    }
+
+    public int getMaximumTextLength(Locale locale) {
+        if (locale == null) {
+            locale = Locale.getDefault();
+        }
+        if (isSupported(locale)) {
+            return AR_MAX_MONTH_NAME_LENGTH;
+        }
+        return super.getMaximumTextLength(locale);
+    }
+
+    private boolean isSupported(Locale locale) {
+        return locale.getLanguage().equals(AR.getLanguage());
+    }
+}

From a14ace7f3ca5c8b9dba675d99db1b253eb7004c4 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Thu, 1 Dec 2005 23:25:21 +0000
Subject: [PATCH 088/130] Fix Date and Calendar conversion (tests) on JDK1.3

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@945 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/java/org/joda/time/TimeOfDay.java     | 14 ++++++++
 .../org/joda/time/base/AbstractDateTime.java  | 19 +++++++++--
 .../java/org/joda/time/base/BasePartial.java  |  5 +++
 .../joda/time/TestTimeOfDay_Constructors.java | 33 ++++++++++++++++---
 .../time/convert/TestCalendarConverter.java   | 14 ++++++--
 .../joda/time/convert/TestDateConverter.java  | 19 ++++++++---
 6 files changed, 91 insertions(+), 13 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/TimeOfDay.java b/JodaTime/src/java/org/joda/time/TimeOfDay.java
index e8d3a1e68..9f049f1d1 100644
--- a/JodaTime/src/java/org/joda/time/TimeOfDay.java
+++ b/JodaTime/src/java/org/joda/time/TimeOfDay.java
@@ -196,6 +196,13 @@ public TimeOfDay(long instant, Chronology chronology) {
      * The string format must begin with a 'T' to be recognised, such as 'T10:20'.
      * <p>
      * The chronology used will be derived from the object, defaulting to ISO.
+     * <p>
+     * Note that as from version 1.2, the default converters go to extra
+     * effort to maintain the field values of the input Date or Calendar.
+     * This means that the differences in timezone data between Joda-Time
+     * and each JDK version are now handled correctly. If you just want to
+     * use the milliseconds value without conversion you must use
+     * {@link #TimeOfDay(long, Chronology)}.
      *
      * @param instant  the datetime object, null means now
      * @throws IllegalArgumentException if the instant is invalid
@@ -218,6 +225,13 @@ public TimeOfDay(Object instant) {
      * Once the constructor is complete, all further calculations are performed
      * without reference to a timezone (by switching to UTC).
      * The specified chronology overrides that of the object.
+     * <p>
+     * Note that as from version 1.2, the default converters go to extra
+     * effort to maintain the field values of the input Date or Calendar.
+     * This means that the differences in timezone data between Joda-Time
+     * and each JDK version are now handled correctly. If you just want to
+     * use the milliseconds value without conversion you must use
+     * {@link #TimeOfDay(long, Chronology)}.
      *
      * @param instant  the datetime object, null means now
      * @param chronology  the chronology, null means ISO default
diff --git a/JodaTime/src/java/org/joda/time/base/AbstractDateTime.java b/JodaTime/src/java/org/joda/time/base/AbstractDateTime.java
index 898f47f01..3242ebff6 100644
--- a/JodaTime/src/java/org/joda/time/base/AbstractDateTime.java
+++ b/JodaTime/src/java/org/joda/time/base/AbstractDateTime.java
@@ -266,7 +266,12 @@ public int getMillisOfSecond() {
     //-----------------------------------------------------------------------
     /**
      * Get the date time as a <code>java.util.Date</code>.
-     * 
+     * <p>
+     * Note that as from version 1.2, this method goes to extra effort to
+     * maintain the field values on the created Date object.
+     * This means that the differences in timezone data between Joda-Time
+     * and each JDK version are now handled correctly.
+     *
      * @return a Date initialised with this datetime
      */
     public Date toDate() {
@@ -279,6 +284,11 @@ public Date toDate() {
      * Get the date time as a <code>java.util.Calendar</code>.
      * The locale is passed in, enabling Calendar to select the correct
      * localized subclass.
+     * <p>
+     * Note that as from version 1.2, this method goes to extra effort to
+     * maintain the field values on the created Calendar object.
+     * This means that the differences in timezone data between Joda-Time
+     * and each JDK version are now handled correctly.
      * 
      * @param locale  the locale to get the Calendar for, or default if null
      * @return a localized Calendar initialised with this datetime
@@ -295,7 +305,12 @@ public Calendar toCalendar(Locale locale) {
 
     /**
      * Get the date time as a <code>java.util.GregorianCalendar</code>.
-     * 
+     * <p>
+     * Note that as from version 1.2, this method goes to extra effort to
+     * maintain the field values on the created Calendar object.
+     * This means that the differences in timezone data between Joda-Time
+     * and each JDK version are now handled correctly.
+     *
      * @return a GregorianCalendar initialised with this datetime
      */
     public GregorianCalendar toGregorianCalendar() {
diff --git a/JodaTime/src/java/org/joda/time/base/BasePartial.java b/JodaTime/src/java/org/joda/time/base/BasePartial.java
index 53e61e114..758a0d553 100644
--- a/JodaTime/src/java/org/joda/time/base/BasePartial.java
+++ b/JodaTime/src/java/org/joda/time/base/BasePartial.java
@@ -121,6 +121,11 @@ protected BasePartial(long instant, Chronology chronology) {
      * The constructor uses the time zone of the chronology specified.
      * Once the constructor is complete, all further calculations are performed
      * without reference to a timezone (by switching to UTC).
+     * <p>
+     * Note that as from version 1.2, the default converters go to extra
+     * effort to maintain the field values of the input Date or Calendar.
+     * This means that the differences in timezone data between Joda-Time
+     * and each JDK version are now handled correctly.
      *
      * @param instant  the datetime object
      * @param chronology  the chronology, null means use converter
diff --git a/JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java b/JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java
index 12b820f42..228946ad0 100644
--- a/JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java
+++ b/JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java
@@ -15,12 +15,15 @@
  */
 package org.joda.time;
 
+import java.util.Calendar;
 import java.util.Date;
+import java.util.GregorianCalendar;
 
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
 
 import org.joda.time.chrono.CopticChronology;
+import org.joda.time.chrono.GJChronology;
 import org.joda.time.chrono.ISOChronology;
 import org.joda.time.chrono.JulianChronology;
 
@@ -274,11 +277,29 @@ public void testConstructor_long_nullChronology() throws Throwable {
     /**
      * Test constructor (Object)
      */
-    public void testConstructor_Object() throws Throwable {
+    public void testConstructor_Object1() throws Throwable {
         Date date = new Date(TEST_TIME1);
         TimeOfDay test = new TimeOfDay(date);
         assertEquals(ISO_UTC, test.getChronology());
-        assertEquals(1 + OFFSET, test.getHourOfDay());
+        // JDK1.3 has no historical time zone, so hour differs from JDK1.4
+        // This method is now defined to copy the fields from the Date
+        assertEquals(date.getHours(), test.getHourOfDay());
+        assertEquals(2, test.getMinuteOfHour());
+        assertEquals(3, test.getSecondOfMinute());
+        assertEquals(4, test.getMillisOfSecond());
+    }
+
+    /**
+     * Test constructor (Object)
+     */
+    public void testConstructor_Object2() throws Throwable {
+        Calendar cal = new GregorianCalendar();
+        cal.setTime(new Date(TEST_TIME1));
+        TimeOfDay test = new TimeOfDay(cal);
+        assertEquals(GJChronology.getInstanceUTC(), test.getChronology());
+        // JDK1.3 has no historical time zone, so hour differs from JDK1.4
+        // This method is now defined to copy the fields from the Date
+        assertEquals(cal.get(Calendar.HOUR_OF_DAY), test.getHourOfDay());
         assertEquals(2, test.getMinuteOfHour());
         assertEquals(3, test.getSecondOfMinute());
         assertEquals(4, test.getMillisOfSecond());
@@ -317,7 +338,9 @@ public void testConstructor_Object_Chronology() throws Throwable {
         Date date = new Date(TEST_TIME1);
         TimeOfDay test = new TimeOfDay(date, JulianChronology.getInstance());
         assertEquals(JulianChronology.getInstanceUTC(), test.getChronology());
-        assertEquals(1 + OFFSET, test.getHourOfDay());
+        // JDK1.3 has no historical time zone, so hour differs from JDK1.4
+        // This method is now defined to copy the fields from the Date
+        assertEquals(date.getHours(), test.getHourOfDay());
         assertEquals(2, test.getMinuteOfHour());
         assertEquals(3, test.getSecondOfMinute());
         assertEquals(4, test.getMillisOfSecond());
@@ -358,7 +381,9 @@ public void testConstructor_Object_nullChronology() throws Throwable {
         Date date = new Date(TEST_TIME1);
         TimeOfDay test = new TimeOfDay(date, null);
         assertEquals(ISO_UTC, test.getChronology());
-        assertEquals(1 + OFFSET, test.getHourOfDay());
+        // JDK1.3 has no historical time zone, so hour differs from JDK1.4
+        // This method is now defined to copy the fields from the Date
+        assertEquals(date.getHours(), test.getHourOfDay());
         assertEquals(2, test.getMinuteOfHour());
         assertEquals(3, test.getSecondOfMinute());
         assertEquals(4, test.getMillisOfSecond());
diff --git a/JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java b/JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java
index 1d4fd1a57..b4fba1a8f 100644
--- a/JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java
+++ b/JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java
@@ -28,6 +28,7 @@
 import junit.framework.TestSuite;
 
 import org.joda.time.Chronology;
+import org.joda.time.DateTime;
 import org.joda.time.DateTimeZone;
 import org.joda.time.TimeOfDay;
 import org.joda.time.chrono.BuddhistChronology;
@@ -94,7 +95,14 @@ public void testSupportedType() throws Exception {
     public void testGetInstantMillis_Object_Chronology() throws Exception {
         GregorianCalendar cal = new GregorianCalendar();
         cal.setTime(new Date(123L));
-        assertEquals(123L, CalendarConverter.INSTANCE.getInstantMillis(cal, JULIAN));
+        long millis = CalendarConverter.INSTANCE.getInstantMillis(cal, JULIAN);
+        long expected = 123L + cal.get(Calendar.DST_OFFSET) + cal.get(Calendar.ZONE_OFFSET);
+        expected = expected - DateTimeZone.getDefault().getOffsetFromLocal(expected);
+        assertEquals(expected, millis);
+        assertEquals(cal.get(Calendar.DAY_OF_MONTH), new DateTime(millis).getDayOfMonth());
+        assertEquals(cal.get(Calendar.HOUR_OF_DAY), new DateTime(millis).getHourOfDay());
+        assertEquals(cal.get(Calendar.MINUTE), new DateTime(millis).getMinuteOfHour());
+        
         assertEquals(123L, cal.getTime().getTime());
     }
 
@@ -169,9 +177,9 @@ public void testGetChronology_Object_Chronology() throws Exception {
     //-----------------------------------------------------------------------
     public void testGetPartialValues() throws Exception {
         GregorianCalendar cal = new GregorianCalendar();
-        cal.setTime(new Date(12345678L));
+        cal.setTime(new Date(70, 2, 3, 4, 5, 6));
         TimeOfDay tod = new TimeOfDay();
-        int[] expected = ISOChronology.getInstance().get(tod, 12345678L);
+        int[] expected = new int[] {4, 5, 6, 0};
         int[] actual = CalendarConverter.INSTANCE.getPartialValues(tod, cal, ISOChronology.getInstance());
         assertEquals(true, Arrays.equals(expected, actual));
     }
diff --git a/JodaTime/src/test/org/joda/time/convert/TestDateConverter.java b/JodaTime/src/test/org/joda/time/convert/TestDateConverter.java
index acc9f2e63..12d8d2d71 100644
--- a/JodaTime/src/test/org/joda/time/convert/TestDateConverter.java
+++ b/JodaTime/src/test/org/joda/time/convert/TestDateConverter.java
@@ -20,11 +20,13 @@
 import java.lang.reflect.Modifier;
 import java.util.Arrays;
 import java.util.Date;
+import java.util.GregorianCalendar;
 
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
 
 import org.joda.time.Chronology;
+import org.joda.time.DateTime;
 import org.joda.time.DateTimeZone;
 import org.joda.time.TimeOfDay;
 import org.joda.time.chrono.CopticChronology;
@@ -87,8 +89,16 @@ public void testSupportedType() throws Exception {
 
     //-----------------------------------------------------------------------
     public void testGetInstantMillis_Object_Chronology() throws Exception {
-        assertEquals(123L, DateConverter.INSTANCE.getInstantMillis(new Date(123L), JULIAN));
-        assertEquals(123L, DateConverter.INSTANCE.getInstantMillis(new Date(123L), (Chronology) null));
+        Date date = new Date(123L);
+        long millis = DateConverter.INSTANCE.getInstantMillis(date, JULIAN);
+        long expected = 123L - date.getTimezoneOffset() * 60000;
+        expected = expected - DateTimeZone.getDefault().getOffsetFromLocal(expected);
+        assertEquals(expected, millis);
+        assertEquals(date.getDate(), new DateTime(millis).getDayOfMonth());
+        assertEquals(date.getHours(), new DateTime(millis).getHourOfDay());
+        assertEquals(date.getMinutes(), new DateTime(millis).getMinuteOfHour());
+        
+        assertEquals(expected, DateConverter.INSTANCE.getInstantMillis(date, (Chronology) null));
     }
 
     //-----------------------------------------------------------------------
@@ -104,9 +114,10 @@ public void testGetChronology_Object_Chronology() throws Exception {
 
     //-----------------------------------------------------------------------
     public void testGetPartialValues() throws Exception {
+        Date date = new Date(70, 2, 3, 4, 5, 6);
         TimeOfDay tod = new TimeOfDay();
-        int[] expected = CopticChronology.getInstance().get(tod, 12345678L);
-        int[] actual = DateConverter.INSTANCE.getPartialValues(tod, new Date(12345678L), CopticChronology.getInstance());
+        int[] expected = new int[] {4, 5, 6, 0};
+        int[] actual = DateConverter.INSTANCE.getPartialValues(tod, date, ISOChronology.getInstance());
         assertEquals(true, Arrays.equals(expected, actual));
     }
 

From ec3625b547dcb56631103d4fba528ba1553adfa2 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 2 Dec 2005 22:39:58 +0000
Subject: [PATCH 089/130] Remove Islamic month of year until we have a proper
 test implementation using CLDR

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@946 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../joda/time/chrono/IslamicChronology.java   |   2 +-
 .../IslamicMonthOfYearDateTimeField.java      | 107 ------------------
 2 files changed, 1 insertion(+), 108 deletions(-)
 delete mode 100644 JodaTime/src/java/org/joda/time/chrono/IslamicMonthOfYearDateTimeField.java

diff --git a/JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java b/JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java
index e31cf74f8..c00e7d6e6 100644
--- a/JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java
@@ -454,7 +454,7 @@ protected void assemble(Fields fields) {
             super.assemble(fields);
 
             fields.era = ERA_FIELD;
-            fields.monthOfYear = new IslamicMonthOfYearDateTimeField(this);
+            fields.monthOfYear = new BasicMonthOfYearDateTimeField(this, 12);
             fields.months = fields.monthOfYear.getDurationField();
         }
     }
diff --git a/JodaTime/src/java/org/joda/time/chrono/IslamicMonthOfYearDateTimeField.java b/JodaTime/src/java/org/joda/time/chrono/IslamicMonthOfYearDateTimeField.java
deleted file mode 100644
index eafcff8fa..000000000
--- a/JodaTime/src/java/org/joda/time/chrono/IslamicMonthOfYearDateTimeField.java
+++ /dev/null
@@ -1,107 +0,0 @@
-/*
- *  Copyright 2001-2005 Stephen Colebourne
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.joda.time.chrono;
-
-import java.util.Locale;
-
-/**
- * Provides month names for IslamicChronology. This implementation is crude and
- * only supports locale language of "ar". For all other locales, names are
- * numbers.
- *
- * @author Brian S O'Neill
- * @since 1.2
- */
-final class IslamicMonthOfYearDateTimeField extends BasicMonthOfYearDateTimeField {
-
-    /** Serialization version */
-    private static final long serialVersionUID = -4748157875845286249L;
-
-    private static final Locale AR = new Locale("ar", "", "");
-
-    private static final String[] AR_MONTH_NAMES = {
-        "\u0645\u062d\u0631\u0645",
-        "\u0635\u0641\u0631",
-        "\u0631\u0628\u064a\u0639 \u0627\u0644\u0623\u0648\u0644",
-        "\u0631\u0628\u064a\u0639 \u0627\u0644\u0622\u062e\u0631",
-        "\u062c\u0645\u0627\u062f\u0649 \u0627\u0644\u0623\u0648\u0644\u0649",
-        "\u062c\u0645\u0627\u062f\u0649 \u0627\u0644\u0622\u062e\u0631\u0629",
-        "\u0631\u062c\u0628",
-        "\u0634\u0639\u0628\u0627\u0646",
-        "\u0631\u0645\u0636\u0627\u0646",
-        "\u0634\u0648\u0627\u0644",
-        "\u0630\u0648 \u0627\u0644\u0642\u0639\u062f\u0629",
-        "\u0630\u0648 \u0627\u0644\u062d\u062c\u0629"
-    };
-
-    private static final int AR_MAX_MONTH_NAME_LENGTH;
-
-    static {
-        int max = 0;
-        for (int i=0; i<AR_MONTH_NAMES.length; i++) {
-            int len = AR_MONTH_NAMES[i].length();
-            if (len > max) {
-                len = max;
-            }
-        }
-        AR_MAX_MONTH_NAME_LENGTH = max;
-    }
-
-    /**
-     * Restricted constructor
-     */
-    IslamicMonthOfYearDateTimeField(IslamicChronology chronology) {
-        super(chronology, 12);
-    }
-
-    public String getAsText(int fieldValue, Locale locale) {
-        if (locale == null) {
-            locale = Locale.getDefault();
-        }
-        if (isSupported(locale) && fieldValue >= 1 && fieldValue <= 12) {
-            return AR_MONTH_NAMES[fieldValue - 1];
-        }
-        return super.getAsText(fieldValue, locale);
-    }
-
-    protected int convertText(String text, Locale locale) {
-        if (locale == null) {
-            locale = Locale.getDefault();
-        }
-        if (isSupported(locale)) {
-            for (int i=0; i<AR_MONTH_NAMES.length; i++) {
-                if (AR_MONTH_NAMES[i].equals(text)) {
-                    return i + 1;
-                }
-            }
-        }
-        return super.convertText(text, locale);
-    }
-
-    public int getMaximumTextLength(Locale locale) {
-        if (locale == null) {
-            locale = Locale.getDefault();
-        }
-        if (isSupported(locale)) {
-            return AR_MAX_MONTH_NAME_LENGTH;
-        }
-        return super.getMaximumTextLength(locale);
-    }
-
-    private boolean isSupported(Locale locale) {
-        return locale.getLanguage().equals(AR.getLanguage());
-    }
-}

From 5c27db0d706efb3b66c9cacf87de667f3fe6704b Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 4 Dec 2005 19:47:40 +0000
Subject: [PATCH 090/130] Revert change to handle time zones as it still has
 issues

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@947 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../org/joda/time/base/AbstractDateTime.java  | 105 ++++--------------
 .../org/joda/time/base/AbstractInstant.java   |   5 +-
 .../joda/time/convert/CalendarConverter.java  |   5 +-
 .../org/joda/time/convert/DateConverter.java  |   4 +-
 4 files changed, 27 insertions(+), 92 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/base/AbstractDateTime.java b/JodaTime/src/java/org/joda/time/base/AbstractDateTime.java
index 3242ebff6..9e9d7b99a 100644
--- a/JodaTime/src/java/org/joda/time/base/AbstractDateTime.java
+++ b/JodaTime/src/java/org/joda/time/base/AbstractDateTime.java
@@ -15,13 +15,9 @@
  */
 package org.joda.time.base;
 
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
 import java.util.Calendar;
-import java.util.Date;
 import java.util.GregorianCalendar;
 import java.util.Locale;
-import java.util.TimeZone;
 
 import org.joda.time.DateTimeFieldType;
 import org.joda.time.DateTimeZone;
@@ -48,28 +44,6 @@
         extends AbstractInstant
         implements ReadableDateTime {
 
-    /** The method to call as TimeZone.getOffset is only from JDK 1.4. */
-    private static final Method OFFSET_METHOD;
-    static {
-        Method m = null;
-        try {
-            m = TimeZone.class.getDeclaredMethod("getOffset", new Class[] {Long.TYPE});
-        } catch (SecurityException ex) {
-            // ignore
-        } catch (NoSuchMethodException ex) {
-            try {
-                m = TimeZone.class.getDeclaredMethod("getOffsets", new Class[] {Long.TYPE, int[].class});
-                m.setAccessible(true);
-            } catch (SecurityException e) {
-                // ignore
-            } catch (NoSuchMethodException e) {
-                // ignore
-            }
-        }
-        OFFSET_METHOD = m;
-    }
-
-    //-----------------------------------------------------------------------
     /**
      * Constructor.
      */
@@ -265,31 +239,19 @@ public int getMillisOfSecond() {
 
     //-----------------------------------------------------------------------
     /**
-     * Get the date time as a <code>java.util.Date</code>.
-     * <p>
-     * Note that as from version 1.2, this method goes to extra effort to
-     * maintain the field values on the created Date object.
-     * This means that the differences in timezone data between Joda-Time
-     * and each JDK version are now handled correctly.
-     *
-     * @return a Date initialised with this datetime
-     */
-    public Date toDate() {
-        long millis = getMillis();
-        millis = fixMillisForTimeZone(millis, TimeZone.getDefault());
-        return new Date(millis);
-    }
-
-    /**
-     * Get the date time as a <code>java.util.Calendar</code>.
+     * Get the date time as a <code>java.util.Calendar</code>, assigning
+     * exactly the same millisecond instant.
      * The locale is passed in, enabling Calendar to select the correct
      * localized subclass.
      * <p>
-     * Note that as from version 1.2, this method goes to extra effort to
-     * maintain the field values on the created Calendar object.
-     * This means that the differences in timezone data between Joda-Time
-     * and each JDK version are now handled correctly.
-     * 
+     * The JDK and Joda-Time both have time zone implementations and these
+     * differ in accuracy. Joda-Time's implementation is generally more up to
+     * date and thus more accurate - for example JDK1.3 has no historical data.
+     * The effect of this is that the field values of the <code>Calendar</code>
+     * may differ from those of this object, even though the milliseond value
+     * is the same. Most of the time this just means that the JDK field values
+     * are wrong, as our time zone information is more up to date.
+     *
      * @param locale  the locale to get the Calendar for, or default if null
      * @return a localized Calendar initialised with this datetime
      */
@@ -299,56 +261,31 @@ public Calendar toCalendar(Locale locale) {
         }
         DateTimeZone zone = getZone();
         Calendar cal = Calendar.getInstance(zone.toTimeZone(), locale);
-        cal.setTime(convertToDate(cal));
+        cal.setTime(toDate());
         return cal;
     }
 
     /**
-     * Get the date time as a <code>java.util.GregorianCalendar</code>.
+     * Get the date time as a <code>java.util.GregorianCalendar</code>,
+     * assigning exactly the same millisecond instant.
      * <p>
-     * Note that as from version 1.2, this method goes to extra effort to
-     * maintain the field values on the created Calendar object.
-     * This means that the differences in timezone data between Joda-Time
-     * and each JDK version are now handled correctly.
+     * The JDK and Joda-Time both have time zone implementations and these
+     * differ in accuracy. Joda-Time's implementation is generally more up to
+     * date and thus more accurate - for example JDK1.3 has no historical data.
+     * The effect of this is that the field values of the <code>Calendar</code>
+     * may differ from those of this object, even though the milliseond value
+     * is the same. Most of the time this just means that the JDK field values
+     * are wrong, as our time zone information is more up to date.
      *
      * @return a GregorianCalendar initialised with this datetime
      */
     public GregorianCalendar toGregorianCalendar() {
         DateTimeZone zone = getZone();
         GregorianCalendar cal = new GregorianCalendar(zone.toTimeZone());
-        cal.setTime(convertToDate(cal));
+        cal.setTime(toDate());
         return cal;
     }
 
-    private Date convertToDate(Calendar cal) {
-        long millis = getMillis();
-        millis = fixMillisForTimeZone(millis, cal.getTimeZone());
-        return new Date(millis);
-    }
-
-    private long fixMillisForTimeZone(long millis, TimeZone zone) {
-        if (OFFSET_METHOD == null) {
-            return millis;
-        }
-        Integer val;
-        try {
-            if ("getOffset".equals(OFFSET_METHOD.getName())) {
-                val = (Integer) OFFSET_METHOD.invoke(
-                        zone, new Object[] {new Long(millis)});
-            } else {
-                val = (Integer) OFFSET_METHOD.invoke(
-                        zone, new Object[] {new Long(millis), null});
-            }
-        } catch (IllegalAccessException ex) {
-            return millis;
-        } catch (InvocationTargetException ex) {
-            return millis;
-        }
-        
-        long millisLocal = millis - val.intValue();
-        return millisLocal + getZone().getOffsetFromLocal(millisLocal);
-    }
-
     //-----------------------------------------------------------------------
     /**
      * Output the instant using the specified format pattern.
diff --git a/JodaTime/src/java/org/joda/time/base/AbstractInstant.java b/JodaTime/src/java/org/joda/time/base/AbstractInstant.java
index 80ee37c95..06e024716 100644
--- a/JodaTime/src/java/org/joda/time/base/AbstractInstant.java
+++ b/JodaTime/src/java/org/joda/time/base/AbstractInstant.java
@@ -223,7 +223,10 @@ public MutableDateTime toMutableDateTime(Chronology chronology) {
     //-----------------------------------------------------------------------
     /**
      * Get the date time as a <code>java.util.Date</code>.
-     * 
+     * <p>
+     * The <code>Date</code> object created has exactly the same millisecond
+     * instant as this object.
+     *
      * @return a Date initialised with this datetime
      */
     public Date toDate() {
diff --git a/JodaTime/src/java/org/joda/time/convert/CalendarConverter.java b/JodaTime/src/java/org/joda/time/convert/CalendarConverter.java
index 2c675674a..1412cdd23 100644
--- a/JodaTime/src/java/org/joda/time/convert/CalendarConverter.java
+++ b/JodaTime/src/java/org/joda/time/convert/CalendarConverter.java
@@ -119,10 +119,7 @@ public Chronology getChronology(Object object, DateTimeZone zone) {
      */
     public long getInstantMillis(Object object, Chronology chrono) {
         Calendar calendar = (Calendar) object;
-        long millisLocal = calendar.getTime().getTime() +
-            calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET);
-        DateTimeZone tz = DateTimeZone.forTimeZone(calendar.getTimeZone());
-        return millisLocal - tz.getOffsetFromLocal(millisLocal);
+        return calendar.getTime().getTime();
     }
 
     //-----------------------------------------------------------------------
diff --git a/JodaTime/src/java/org/joda/time/convert/DateConverter.java b/JodaTime/src/java/org/joda/time/convert/DateConverter.java
index 468baaa01..1b5e2ce4b 100644
--- a/JodaTime/src/java/org/joda/time/convert/DateConverter.java
+++ b/JodaTime/src/java/org/joda/time/convert/DateConverter.java
@@ -18,7 +18,6 @@
 import java.util.Date;
 
 import org.joda.time.Chronology;
-import org.joda.time.DateTimeZone;
 
 /**
  * DateConverter converts a java util Date to an instant or partial.
@@ -54,8 +53,7 @@ protected DateConverter() {
      */
     public long getInstantMillis(Object object, Chronology chrono) {
         Date date = (Date) object;
-        long millisLocal = date.getTime() - date.getTimezoneOffset() * 60000;
-        return millisLocal - DateTimeZone.getDefault().getOffsetFromLocal(millisLocal);
+        return date.getTime();
     }
 
     //-----------------------------------------------------------------------

From a046bf4d807234b129717340e25786002037ffef Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 4 Dec 2005 19:47:51 +0000
Subject: [PATCH 091/130] Ignores

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@948 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/.cvsignore | 1 +
 1 file changed, 1 insertion(+)

diff --git a/JodaTime/.cvsignore b/JodaTime/.cvsignore
index 13b1a1952..a6b445cc2 100644
--- a/JodaTime/.cvsignore
+++ b/JodaTime/.cvsignore
@@ -11,3 +11,4 @@ junit*.properties
 lib
 .dj*
 release
+.settings

From 787ba41db161299e2f18cf026729214ecb1d6b4b Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 4 Dec 2005 19:49:31 +0000
Subject: [PATCH 092/130] Add methods to handle time zone differences

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@949 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/java/org/joda/time/DateTimeUtils.java | 89 ++++++++++++++++++
 .../src/java/org/joda/time/DateTimeZone.java  | 93 +++++++++++++++++++
 .../test/org/joda/time/TestDateTimeZone.java  | 33 +++++++
 3 files changed, 215 insertions(+)

diff --git a/JodaTime/src/java/org/joda/time/DateTimeUtils.java b/JodaTime/src/java/org/joda/time/DateTimeUtils.java
index 8a84d83bd..845677fd2 100644
--- a/JodaTime/src/java/org/joda/time/DateTimeUtils.java
+++ b/JodaTime/src/java/org/joda/time/DateTimeUtils.java
@@ -15,6 +15,11 @@
  */
 package org.joda.time;
 
+import java.util.Calendar;
+import java.util.Date;
+import java.util.GregorianCalendar;
+import java.util.TimeZone;
+
 import org.joda.time.chrono.ISOChronology;
 
 /**
@@ -327,6 +332,90 @@ public static final boolean isContiguous(ReadablePartial partial) {
         return true;
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Converts the instant value to a <code>GregorianCalendar</code>
+     * adjusting to take into account the different time zone rules.
+     * <p>
+     * Note that this method may not be reversible if the zone rules differ
+     * around a daylight savings, or other, change.
+     *
+     * @param instant  the instant to convert
+     * @return the offset to add to UTC
+     * @throws IllegalArgumentException if the instant is null
+     * @since 1.2
+     */
+    public static GregorianCalendar toGregorianCalendar(ReadableInstant instant) {
+        if (instant == null) {
+            throw new IllegalArgumentException("The zone must not be null");
+        }
+        DateTimeZone zone = instant.getZone();
+        TimeZone jdkZone = zone.toTimeZone();
+        GregorianCalendar cal = new GregorianCalendar(jdkZone);
+        long jdkMillis = zone.getMillisJDKKeepLocal(jdkZone, instant.getMillis());
+        cal.setTime(new Date(jdkMillis));
+        return cal;
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Converts a <code>Calendar</code> to a <code>DateTime</code> adjusting
+     * the millisecond value to preserve the local time.
+     * <p>
+     * <code>DateTimeZone</code> and JDK <code>TimeZone</code> have
+     * different time zone rules. When converting to and from the JDK this
+     * can cause unexpected and undesired consequences. This method seeks
+     * to adjust for the differences in the rules by maintaining the same
+     * field values in the resultant <code>DateTime</code>.
+     * <p>
+     * Note that this method may not be reversible if the zone rules differ
+     * around a daylight savings, or other, change.
+     *
+     * @param calendar  the JDK calendar to convert
+     * @return the converted datetime
+     * @throws IllegalArgumentException if the calendar is null
+     * @since 1.2
+     */
+    public static DateTime toDateTime(Calendar calendar) {
+        if (calendar == null) {
+            throw new IllegalArgumentException("The calendar must not be null");
+        }
+        long millisLocal = calendar.getTime().getTime() +
+            calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET);
+        DateTimeZone zone = DateTimeZone.forTimeZone(calendar.getTimeZone());
+        long millis = millisLocal - zone.getOffsetFromLocal(millisLocal);
+        return new DateTime(millis, zone);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Converts a <code>Date</code> to a <code>DateTime</code> adjusting
+     * the millisecond value to preserve the local time.
+     * <p>
+     * <code>DateTimeZone</code> and JDK <code>TimeZone</code> have
+     * different time zone rules. When converting to and from the JDK this
+     * can cause unexpected and undesired consequences. This method seeks
+     * to adjust for the differences in the rules by maintaining the same
+     * field values in the resultant <code>DateTime</code>.
+     * <p>
+     * Note that this method may not be reversible if the zone rules differ
+     * around a daylight savings, or other, change.
+     *
+     * @param date  the JDK date to convert
+     * @return the converted datetime
+     * @throws IllegalArgumentException if the calendar is null
+     * @since 1.2
+     */
+    public static DateTime toDateTime(Date date) {
+        if (date == null) {
+            throw new IllegalArgumentException("The date must not be null");
+        }
+        long millisLocal = date.getTime() - date.getTimezoneOffset() * 60000;
+        DateTimeZone zone = DateTimeZone.forTimeZone(TimeZone.getDefault());
+        long millis = millisLocal - zone.getOffsetFromLocal(millisLocal);
+        return new DateTime(millis, zone);
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Base class defining a millisecond provider.
diff --git a/JodaTime/src/java/org/joda/time/DateTimeZone.java b/JodaTime/src/java/org/joda/time/DateTimeZone.java
index f996f10c8..464121b8a 100644
--- a/JodaTime/src/java/org/joda/time/DateTimeZone.java
+++ b/JodaTime/src/java/org/joda/time/DateTimeZone.java
@@ -22,10 +22,14 @@
 import java.io.Serializable;
 import java.lang.ref.Reference;
 import java.lang.ref.SoftReference;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.util.Date;
 import java.util.HashMap;
 import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
+import java.util.SimpleTimeZone;
 import java.util.TimeZone;
 
 import org.joda.time.chrono.BaseChronology;
@@ -131,6 +135,28 @@
         }
     }
 
+    /** The method to call as TimeZone.getOffset is only from JDK 1.4. */
+    private static final Method OFFSET_METHOD;
+    static {
+        Method m = null;
+        try {
+            m = TimeZone.class.getDeclaredMethod("getOffset", new Class[] {Long.TYPE});
+        } catch (SecurityException ex) {
+            // ignore
+        } catch (NoSuchMethodException ex) {
+            try {
+                Method[] ms = TimeZone.class.getDeclaredMethods();
+                m = TimeZone.class.getDeclaredMethod("getOffsets", new Class[] {Long.TYPE, int[].class});
+                m.setAccessible(true);
+            } catch (SecurityException e) {
+                // ignore
+            } catch (NoSuchMethodException e) {
+                // ignore
+            }
+        }
+        OFFSET_METHOD = m;
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Gets the default time zone.
@@ -841,6 +867,73 @@ public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant) {
         return instantLocal - newZone.getOffsetFromLocal(instantLocal);
     }
 
+    /**
+     * Gets the millisecond instant in the equivalent JDK <code>TimeZone</code>
+     * keeping the same local time.
+     * <p>
+     * This method adjusts for time zone difference between the JDK and
+     * Joda-Time zone rules. The aim of this method is to keep the same
+     * local time but using the JDK time zone class. The result of this
+     * method should be used to pass into a <code>Date</code>,
+     * <code>Calendar</code> or other JDK class.
+     * See the <a href="http://joda-time.sourceforge.net/jdk_conversion.html">JDK conversion reference</a> for details.
+     *
+     * @param instant  the Joda-Time millisecond instant to convert
+     * @return the JDK millisecond instant with the same local time
+     * @since 1.2
+     */
+    public long getMillisJDKKeepLocal(long instant) {
+        return getMillisJDKKeepLocal(toTimeZone(), instant);
+    }
+
+    /**
+     * Gets the millisecond instant in the specified JDK <code>TimeZone</code>
+     * keeping the same local time. You should typically pass in the
+     * JDK zone that is returned by {@link #toTimeZone()}.
+     * <p>
+     * This method adjusts for time zone difference between the JDK and
+     * Joda-Time zone rules. The aim of this method is to keep the same
+     * local time but using the JDK time zone class. The result of this
+     * method should be used to pass into a <code>Date</code>,
+     * <code>Calendar</code> or other JDK class.
+     * See the <a href="http://joda-time.sourceforge.net/jdk_conversion.html">JDK conversion reference</a> for details.
+     *
+     * @param jdkZone  the JDK zone to convert to, normally as per toTimezone()
+     * @param instant  the Joda-Time millisecond instant to convert
+     * @return the JDK millisecond instant with the same local time
+     * @since 1.2
+     */
+    public long getMillisJDKKeepLocal(TimeZone jdkZone, long instant) {
+        if (jdkZone == null) {
+            jdkZone = toTimeZone();
+        }
+        Integer val;
+        if (OFFSET_METHOD == null) {
+            if (jdkZone instanceof SimpleTimeZone) {
+                SimpleTimeZone zone = (SimpleTimeZone) jdkZone;
+                long offset = zone.getRawOffset();
+                if (zone.inDaylightTime(new Date(instant)))  {
+                    offset += zone.getDSTSavings();
+                }
+                long millisLocal = instant - offset;
+                return millisLocal + getOffsetFromLocal(millisLocal);
+            }
+            return instant;
+        } else {
+            try {
+                val = (Integer) OFFSET_METHOD.invoke(
+                        jdkZone, new Object[] {new Long(instant)});
+            } catch (IllegalAccessException ex) {
+                return instant;
+            } catch (InvocationTargetException ex) {
+                return instant;
+            }
+        }
+        long millisLocal = instant - val.intValue();
+        return millisLocal + getOffsetFromLocal(millisLocal);
+    }
+
+    //-----------------------------------------------------------------------
     /**
      * Returns true if this time zone has no transitions.
      *
diff --git a/JodaTime/src/test/org/joda/time/TestDateTimeZone.java b/JodaTime/src/test/org/joda/time/TestDateTimeZone.java
index 3e4cc66ae..c13019cd9 100644
--- a/JodaTime/src/test/org/joda/time/TestDateTimeZone.java
+++ b/JodaTime/src/test/org/joda/time/TestDateTimeZone.java
@@ -28,6 +28,7 @@
 import java.security.Permissions;
 import java.security.Policy;
 import java.security.ProtectionDomain;
+import java.util.Date;
 import java.util.HashSet;
 import java.util.Locale;
 import java.util.Set;
@@ -688,6 +689,37 @@ public void testGetMillisKeepLocal() {
         }
     }
 
+    //-----------------------------------------------------------------------
+    public void testGetMillisJDKKeepLocal() {
+        TimeZone jdkZone = TimeZone.getDefault();
+        try {
+            TimeZone.setDefault(TimeZone.getTimeZone("Europe/Paris"));
+            DateTime dt = new DateTime(1970, 1, 1, 2, 30, 0, 0, PARIS);
+            Date date = new Date(70, 0, 1, 2, 30, 0);  // same field values
+            
+            System.out.println(dt.getMillis());
+            System.out.println(date.getTime());
+            
+            assertEquals(date.getTime(), PARIS.getMillisJDKKeepLocal(dt.getMillis()));
+            assertEquals(date.getTime(), PARIS.getMillisJDKKeepLocal(PARIS.toTimeZone(), dt.getMillis()));
+            assertEquals(date.getTime(), PARIS.getMillisJDKKeepLocal(null, dt.getMillis()));
+            
+            TimeZone.setDefault(TimeZone.getTimeZone("Europe/London"));
+            dt = new DateTime(1970, 1, 1, 2, 30, 0, 0, LONDON);
+            date = new Date(70, 0, 1, 2, 30, 0);  // same field values
+            
+            System.out.println(dt.getMillis());
+            System.out.println(date.getTime());
+            
+            assertEquals(date.getTime(), LONDON.getMillisJDKKeepLocal(dt.getMillis()));
+            assertEquals(date.getTime(), LONDON.getMillisJDKKeepLocal(LONDON.toTimeZone(), dt.getMillis()));
+            assertEquals(date.getTime(), LONDON.getMillisJDKKeepLocal(null, dt.getMillis()));
+            
+        } finally {
+            TimeZone.setDefault(jdkZone);
+        }
+    }
+
     //-----------------------------------------------------------------------
     public void testIsFixed() {
         DateTimeZone zone = DateTimeZone.forID("Europe/Paris");
@@ -806,4 +838,5 @@ public void testCommentParse() throws Exception {
         DateTime dt = new DateTime(2005, 5, 5, 20, 10, 15, 0, zone);
         assertEquals(1115313015000L, dt.getMillis());
     }
+
 }

From e1198a87e2c02d67ed41f99996c09fb777b5f39e Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 4 Dec 2005 21:55:46 +0000
Subject: [PATCH 093/130] Improve invalid instant error message

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@950 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java | 5 ++++-
 1 file changed, 4 insertions(+), 1 deletion(-)

diff --git a/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java b/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java
index 4cce7d9fc..b434586f5 100644
--- a/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java
@@ -24,9 +24,11 @@
 import org.joda.time.DateTimeZone;
 import org.joda.time.DurationField;
 import org.joda.time.IllegalFieldValueException;
+import org.joda.time.Instant;
 import org.joda.time.ReadablePartial;
 import org.joda.time.field.BaseDateTimeField;
 import org.joda.time.field.BaseDurationField;
+import org.joda.time.format.DateTimeFormat;
 
 /**
  * Wraps another Chronology to add support for time zones.
@@ -139,7 +141,8 @@ private long localToUTC(long instant) {
         instant -= offset;
         if (offset != zone.getOffset(instant)) {
             throw new IllegalArgumentException
-                ("Illegal instant due to time zone offset transition");
+                ("Illegal instant due to time zone offset transition: " +
+                    DateTimeFormat.forPattern("yyyy-MM-dd'T'HH:mm:ss.SSS").print(new Instant(instant)));
         }
         return instant;
     }

From 131cef795b3949db7c4913d17619ecfc6ce9d4ae Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 4 Dec 2005 21:57:02 +0000
Subject: [PATCH 094/130] Revert change to handle time zones as it still has
 issues

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@951 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../joda/time/TestTimeOfDay_Constructors.java    | 16 ++++------------
 1 file changed, 4 insertions(+), 12 deletions(-)

diff --git a/JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java b/JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java
index 228946ad0..fa475bf86 100644
--- a/JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java
+++ b/JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java
@@ -281,9 +281,7 @@ public void testConstructor_Object1() throws Throwable {
         Date date = new Date(TEST_TIME1);
         TimeOfDay test = new TimeOfDay(date);
         assertEquals(ISO_UTC, test.getChronology());
-        // JDK1.3 has no historical time zone, so hour differs from JDK1.4
-        // This method is now defined to copy the fields from the Date
-        assertEquals(date.getHours(), test.getHourOfDay());
+        assertEquals(1 + OFFSET, test.getHourOfDay());
         assertEquals(2, test.getMinuteOfHour());
         assertEquals(3, test.getSecondOfMinute());
         assertEquals(4, test.getMillisOfSecond());
@@ -297,9 +295,7 @@ public void testConstructor_Object2() throws Throwable {
         cal.setTime(new Date(TEST_TIME1));
         TimeOfDay test = new TimeOfDay(cal);
         assertEquals(GJChronology.getInstanceUTC(), test.getChronology());
-        // JDK1.3 has no historical time zone, so hour differs from JDK1.4
-        // This method is now defined to copy the fields from the Date
-        assertEquals(cal.get(Calendar.HOUR_OF_DAY), test.getHourOfDay());
+        assertEquals(1 + OFFSET, test.getHourOfDay());
         assertEquals(2, test.getMinuteOfHour());
         assertEquals(3, test.getSecondOfMinute());
         assertEquals(4, test.getMillisOfSecond());
@@ -338,9 +334,7 @@ public void testConstructor_Object_Chronology() throws Throwable {
         Date date = new Date(TEST_TIME1);
         TimeOfDay test = new TimeOfDay(date, JulianChronology.getInstance());
         assertEquals(JulianChronology.getInstanceUTC(), test.getChronology());
-        // JDK1.3 has no historical time zone, so hour differs from JDK1.4
-        // This method is now defined to copy the fields from the Date
-        assertEquals(date.getHours(), test.getHourOfDay());
+        assertEquals(1 + OFFSET, test.getHourOfDay());
         assertEquals(2, test.getMinuteOfHour());
         assertEquals(3, test.getSecondOfMinute());
         assertEquals(4, test.getMillisOfSecond());
@@ -381,9 +375,7 @@ public void testConstructor_Object_nullChronology() throws Throwable {
         Date date = new Date(TEST_TIME1);
         TimeOfDay test = new TimeOfDay(date, null);
         assertEquals(ISO_UTC, test.getChronology());
-        // JDK1.3 has no historical time zone, so hour differs from JDK1.4
-        // This method is now defined to copy the fields from the Date
-        assertEquals(date.getHours(), test.getHourOfDay());
+        assertEquals(1 + OFFSET, test.getHourOfDay());
         assertEquals(2, test.getMinuteOfHour());
         assertEquals(3, test.getSecondOfMinute());
         assertEquals(4, test.getMillisOfSecond());

From 78518374ee54d9816d7147099a6ef3aedbded479 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 4 Dec 2005 21:57:22 +0000
Subject: [PATCH 095/130] Remove System.out

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@952 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/test/org/joda/time/TestDateTimeZone.java | 6 ------
 1 file changed, 6 deletions(-)

diff --git a/JodaTime/src/test/org/joda/time/TestDateTimeZone.java b/JodaTime/src/test/org/joda/time/TestDateTimeZone.java
index c13019cd9..0f594fc87 100644
--- a/JodaTime/src/test/org/joda/time/TestDateTimeZone.java
+++ b/JodaTime/src/test/org/joda/time/TestDateTimeZone.java
@@ -697,9 +697,6 @@ public void testGetMillisJDKKeepLocal() {
             DateTime dt = new DateTime(1970, 1, 1, 2, 30, 0, 0, PARIS);
             Date date = new Date(70, 0, 1, 2, 30, 0);  // same field values
             
-            System.out.println(dt.getMillis());
-            System.out.println(date.getTime());
-            
             assertEquals(date.getTime(), PARIS.getMillisJDKKeepLocal(dt.getMillis()));
             assertEquals(date.getTime(), PARIS.getMillisJDKKeepLocal(PARIS.toTimeZone(), dt.getMillis()));
             assertEquals(date.getTime(), PARIS.getMillisJDKKeepLocal(null, dt.getMillis()));
@@ -708,9 +705,6 @@ public void testGetMillisJDKKeepLocal() {
             dt = new DateTime(1970, 1, 1, 2, 30, 0, 0, LONDON);
             date = new Date(70, 0, 1, 2, 30, 0);  // same field values
             
-            System.out.println(dt.getMillis());
-            System.out.println(date.getTime());
-            
             assertEquals(date.getTime(), LONDON.getMillisJDKKeepLocal(dt.getMillis()));
             assertEquals(date.getTime(), LONDON.getMillisJDKKeepLocal(LONDON.toTimeZone(), dt.getMillis()));
             assertEquals(date.getTime(), LONDON.getMillisJDKKeepLocal(null, dt.getMillis()));

From ee0a30f6db2d9d1b0b34294990f7f6a01e6352c1 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 4 Dec 2005 21:57:46 +0000
Subject: [PATCH 096/130] Add methods to handle time zone differences

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@953 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/java/org/joda/time/DateTimeUtils.java | 22 ++++-
 .../src/java/org/joda/time/DateTimeZone.java  | 33 ++++----
 .../test/org/joda/time/TestDateTimeUtils.java | 80 +++++++++++++++++++
 3 files changed, 116 insertions(+), 19 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/DateTimeUtils.java b/JodaTime/src/java/org/joda/time/DateTimeUtils.java
index 845677fd2..6d57d4432 100644
--- a/JodaTime/src/java/org/joda/time/DateTimeUtils.java
+++ b/JodaTime/src/java/org/joda/time/DateTimeUtils.java
@@ -337,8 +337,17 @@ public static final boolean isContiguous(ReadablePartial partial) {
      * Converts the instant value to a <code>GregorianCalendar</code>
      * adjusting to take into account the different time zone rules.
      * <p>
-     * Note that this method may not be reversible if the zone rules differ
-     * around a daylight savings, or other, change.
+     * This method is the equivalent of creating a calendar object and
+     * calling set using each field in turn. The result is a calendar that
+     * reflects the fields of the instant, rather than millisecond value.
+     * <p>
+     * This method can 'lose' data depending on the date and zone rules.
+     * If a datetime exists in the specified instant that cannot be
+     * represented in a calendar (due to differences in the time zone rules)
+     * the JDK chooses to move the hour backwards. For example, 1972-03-26
+     * 01:30  in Europe/London cannot be represented in <code>Calendar</code>
+     * in JDK1.3 due to an incorrect time zone definition in the JDK.
+     * Instead, the JDK sets the time to 00:30.
      *
      * @param instant  the instant to convert
      * @return the offset to add to UTC
@@ -349,11 +358,16 @@ public static GregorianCalendar toGregorianCalendar(ReadableInstant instant) {
         if (instant == null) {
             throw new IllegalArgumentException("The zone must not be null");
         }
+        Chronology chrono = instant.getChronology();
         DateTimeZone zone = instant.getZone();
+        long millis = instant.getMillis();
         TimeZone jdkZone = zone.toTimeZone();
         GregorianCalendar cal = new GregorianCalendar(jdkZone);
-        long jdkMillis = zone.getMillisJDKKeepLocal(jdkZone, instant.getMillis());
-        cal.setTime(new Date(jdkMillis));
+        cal.clear();
+        cal.set(Calendar.YEAR, chrono.year().get(millis));
+        cal.set(Calendar.DAY_OF_YEAR, chrono.dayOfYear().get(millis));
+        cal.set(Calendar.MILLISECOND, chrono.millisOfDay().get(millis));
+        cal.get(Calendar.ERA);  // force calculation
         return cal;
     }
 
diff --git a/JodaTime/src/java/org/joda/time/DateTimeZone.java b/JodaTime/src/java/org/joda/time/DateTimeZone.java
index 464121b8a..22ab00c3a 100644
--- a/JodaTime/src/java/org/joda/time/DateTimeZone.java
+++ b/JodaTime/src/java/org/joda/time/DateTimeZone.java
@@ -144,15 +144,7 @@
         } catch (SecurityException ex) {
             // ignore
         } catch (NoSuchMethodException ex) {
-            try {
-                Method[] ms = TimeZone.class.getDeclaredMethods();
-                m = TimeZone.class.getDeclaredMethod("getOffsets", new Class[] {Long.TYPE, int[].class});
-                m.setAccessible(true);
-            } catch (SecurityException e) {
-                // ignore
-            } catch (NoSuchMethodException e) {
-                // ignore
-            }
+            // ignore
         }
         OFFSET_METHOD = m;
     }
@@ -911,12 +903,9 @@ public long getMillisJDKKeepLocal(TimeZone jdkZone, long instant) {
         if (OFFSET_METHOD == null) {
             if (jdkZone instanceof SimpleTimeZone) {
                 SimpleTimeZone zone = (SimpleTimeZone) jdkZone;
-                long offset = zone.getRawOffset();
-                if (zone.inDaylightTime(new Date(instant)))  {
-                    offset += zone.getDSTSavings();
-                }
-                long millisLocal = instant - offset;
-                return millisLocal + getOffsetFromLocal(millisLocal);
+                long millisLocal = instant + getOffset(instant);
+                long jdkOffset = getJDKOffset(zone, millisLocal - getJDKOffset(zone, millisLocal));
+                return millisLocal - jdkOffset;
             }
             return instant;
         } else {
@@ -929,10 +918,24 @@ public long getMillisJDKKeepLocal(TimeZone jdkZone, long instant) {
                 return instant;
             }
         }
+        // TODO: this conversion is wrong
         long millisLocal = instant - val.intValue();
         return millisLocal + getOffsetFromLocal(millisLocal);
     }
 
+    /**
+     * @param zone
+     * @param instant
+     * @return
+     */
+    private long getJDKOffset(SimpleTimeZone zone, long instant) {
+        long offset = zone.getRawOffset();
+        if (zone.inDaylightTime(new Date(instant)))  {
+            offset += zone.getDSTSavings();
+        }
+        return offset;
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Returns true if this time zone has no transitions.
diff --git a/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java b/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java
index 1c0576306..72910afe4 100644
--- a/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java
+++ b/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java
@@ -23,6 +23,10 @@
 import java.security.Permissions;
 import java.security.Policy;
 import java.security.ProtectionDomain;
+import java.util.Calendar;
+import java.util.Date;
+import java.util.GregorianCalendar;
+import java.util.TimeZone;
 
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
@@ -31,6 +35,7 @@
 import org.joda.time.chrono.BuddhistChronology;
 import org.joda.time.chrono.CopticChronology;
 import org.joda.time.chrono.ISOChronology;
+import org.joda.time.chrono.LenientChronology;
 
 /**
  * This class is a Junit unit test for Instant.
@@ -393,4 +398,79 @@ public void testIsContiguous_RP() {
         } catch (IllegalArgumentException ex) {}
     }
 
+    //-----------------------------------------------------------------------
+    public void testToGregorianCalendar() {
+        TimeZone jdkZone = TimeZone.getDefault();
+        try {
+            TimeZone.setDefault(TimeZone.getTimeZone("Europe/Paris"));
+            DateTime dt = new DateTime(1970, 1, 1, 2, 30, 0, 0, PARIS);
+            Calendar cal = new GregorianCalendar(1970, 0, 1, 2, 30);  // same field values
+            
+            assertEquals(cal, DateTimeUtils.toGregorianCalendar(dt));
+            
+            TimeZone.setDefault(TimeZone.getTimeZone("Europe/London"));
+            dt = new DateTime(1970, 1, 1, 2, 30, 0, 0, LONDON);
+            cal = new GregorianCalendar(1970, 0, 1, 2, 30);  // same field values
+            
+            assertEquals(cal, DateTimeUtils.toGregorianCalendar(dt));
+            
+            dt = new DateTime(1800, 1, 1, 0, 30, 0, 0, LONDON);
+            int year = dt.getYear();
+            while (year < 2000) {
+                dt = dt.plusHours(1);
+                int hourOfDay = dt.getHourOfDay();
+                if (hourOfDay == 4) {
+                    dt = dt.plusHours(18);  // speed up test
+                } else {
+                    year = dt.getYear();
+                    cal.clear();
+                    cal.set(year, dt.getMonthOfYear() - 1, dt.getDayOfMonth(),
+                        hourOfDay, dt.getMinuteOfHour(), dt.getSecondOfMinute());
+                    //cal.get(Calendar.ERA);
+                    assertEquals(cal, DateTimeUtils.toGregorianCalendar(dt));
+                }
+            }
+            
+        } finally {
+            TimeZone.setDefault(jdkZone);
+        }
+        try {
+            DateTimeUtils.toGregorianCalendar(null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToDateTime_Calendar() {
+        TimeZone jdkZone = TimeZone.getDefault();
+        try {
+            TimeZone.setDefault(TimeZone.getTimeZone("Europe/London"));
+            GregorianCalendar cal = new GregorianCalendar(1800, 0, 1, 0, 30, 0);
+            int year = cal.get(Calendar.YEAR);
+            while (year < 2000) {
+                cal.add(Calendar.HOUR_OF_DAY, 1);
+                int hourOfDay = cal.get(Calendar.HOUR_OF_DAY);
+                if (hourOfDay == 4) {
+                    cal.add(Calendar.HOUR_OF_DAY, 18);  // speed up test
+                } else {
+                    year = cal.get(Calendar.YEAR);
+                    DateTime dt = new DateTime(
+                        year, cal.get(Calendar.MONTH) + 1, cal.get(Calendar.DAY_OF_MONTH),
+                        cal.get(Calendar.HOUR_OF_DAY), cal.get(Calendar.MINUTE),
+                        cal.get(Calendar.SECOND), 0,
+                        LenientChronology.getInstance(ISOChronology.getInstance(LONDON)))
+                        .withChronology(ISOChronology.getInstance(LONDON));
+                    assertEquals(dt, DateTimeUtils.toDateTime(cal));
+                }
+            }
+            
+        } finally {
+            TimeZone.setDefault(jdkZone);
+        }
+        try {
+            DateTimeUtils.toDateTime((Calendar) null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
 }

From 8c5d6902ca81488fc8c9ffce33bfc0774afc2194 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 4 Dec 2005 22:02:08 +0000
Subject: [PATCH 097/130] Remove methods to handle time zone differences

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@954 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |   4 -
 .../src/java/org/joda/time/DateTimeUtils.java | 103 ------------------
 .../src/java/org/joda/time/DateTimeZone.java  |  96 ----------------
 .../test/org/joda/time/TestDateTimeUtils.java |  80 --------------
 .../test/org/joda/time/TestDateTimeZone.java  |  26 -----
 5 files changed, 309 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 2f8cad24c..1778262a8 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -65,10 +65,6 @@ Bug fixes since 1.1
 - ZonedChronology
   Fixed getting text values for fields from getAs[Short]Text(int value, Locale locale).
 
-- DateConverter, CalendarConverter, AbstractDateTime
-  Fixed conversions to and from java.util.Date and java.util.Calendar where
-  time zone rules differ between JDK and Joda-Time.
-
 - DateTimeFormatter
   Fixed printing of time zone name near DST transition.
 
diff --git a/JodaTime/src/java/org/joda/time/DateTimeUtils.java b/JodaTime/src/java/org/joda/time/DateTimeUtils.java
index 6d57d4432..8a84d83bd 100644
--- a/JodaTime/src/java/org/joda/time/DateTimeUtils.java
+++ b/JodaTime/src/java/org/joda/time/DateTimeUtils.java
@@ -15,11 +15,6 @@
  */
 package org.joda.time;
 
-import java.util.Calendar;
-import java.util.Date;
-import java.util.GregorianCalendar;
-import java.util.TimeZone;
-
 import org.joda.time.chrono.ISOChronology;
 
 /**
@@ -332,104 +327,6 @@ public static final boolean isContiguous(ReadablePartial partial) {
         return true;
     }
 
-    //-----------------------------------------------------------------------
-    /**
-     * Converts the instant value to a <code>GregorianCalendar</code>
-     * adjusting to take into account the different time zone rules.
-     * <p>
-     * This method is the equivalent of creating a calendar object and
-     * calling set using each field in turn. The result is a calendar that
-     * reflects the fields of the instant, rather than millisecond value.
-     * <p>
-     * This method can 'lose' data depending on the date and zone rules.
-     * If a datetime exists in the specified instant that cannot be
-     * represented in a calendar (due to differences in the time zone rules)
-     * the JDK chooses to move the hour backwards. For example, 1972-03-26
-     * 01:30  in Europe/London cannot be represented in <code>Calendar</code>
-     * in JDK1.3 due to an incorrect time zone definition in the JDK.
-     * Instead, the JDK sets the time to 00:30.
-     *
-     * @param instant  the instant to convert
-     * @return the offset to add to UTC
-     * @throws IllegalArgumentException if the instant is null
-     * @since 1.2
-     */
-    public static GregorianCalendar toGregorianCalendar(ReadableInstant instant) {
-        if (instant == null) {
-            throw new IllegalArgumentException("The zone must not be null");
-        }
-        Chronology chrono = instant.getChronology();
-        DateTimeZone zone = instant.getZone();
-        long millis = instant.getMillis();
-        TimeZone jdkZone = zone.toTimeZone();
-        GregorianCalendar cal = new GregorianCalendar(jdkZone);
-        cal.clear();
-        cal.set(Calendar.YEAR, chrono.year().get(millis));
-        cal.set(Calendar.DAY_OF_YEAR, chrono.dayOfYear().get(millis));
-        cal.set(Calendar.MILLISECOND, chrono.millisOfDay().get(millis));
-        cal.get(Calendar.ERA);  // force calculation
-        return cal;
-    }
-
-    //-----------------------------------------------------------------------
-    /**
-     * Converts a <code>Calendar</code> to a <code>DateTime</code> adjusting
-     * the millisecond value to preserve the local time.
-     * <p>
-     * <code>DateTimeZone</code> and JDK <code>TimeZone</code> have
-     * different time zone rules. When converting to and from the JDK this
-     * can cause unexpected and undesired consequences. This method seeks
-     * to adjust for the differences in the rules by maintaining the same
-     * field values in the resultant <code>DateTime</code>.
-     * <p>
-     * Note that this method may not be reversible if the zone rules differ
-     * around a daylight savings, or other, change.
-     *
-     * @param calendar  the JDK calendar to convert
-     * @return the converted datetime
-     * @throws IllegalArgumentException if the calendar is null
-     * @since 1.2
-     */
-    public static DateTime toDateTime(Calendar calendar) {
-        if (calendar == null) {
-            throw new IllegalArgumentException("The calendar must not be null");
-        }
-        long millisLocal = calendar.getTime().getTime() +
-            calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET);
-        DateTimeZone zone = DateTimeZone.forTimeZone(calendar.getTimeZone());
-        long millis = millisLocal - zone.getOffsetFromLocal(millisLocal);
-        return new DateTime(millis, zone);
-    }
-
-    //-----------------------------------------------------------------------
-    /**
-     * Converts a <code>Date</code> to a <code>DateTime</code> adjusting
-     * the millisecond value to preserve the local time.
-     * <p>
-     * <code>DateTimeZone</code> and JDK <code>TimeZone</code> have
-     * different time zone rules. When converting to and from the JDK this
-     * can cause unexpected and undesired consequences. This method seeks
-     * to adjust for the differences in the rules by maintaining the same
-     * field values in the resultant <code>DateTime</code>.
-     * <p>
-     * Note that this method may not be reversible if the zone rules differ
-     * around a daylight savings, or other, change.
-     *
-     * @param date  the JDK date to convert
-     * @return the converted datetime
-     * @throws IllegalArgumentException if the calendar is null
-     * @since 1.2
-     */
-    public static DateTime toDateTime(Date date) {
-        if (date == null) {
-            throw new IllegalArgumentException("The date must not be null");
-        }
-        long millisLocal = date.getTime() - date.getTimezoneOffset() * 60000;
-        DateTimeZone zone = DateTimeZone.forTimeZone(TimeZone.getDefault());
-        long millis = millisLocal - zone.getOffsetFromLocal(millisLocal);
-        return new DateTime(millis, zone);
-    }
-
     //-----------------------------------------------------------------------
     /**
      * Base class defining a millisecond provider.
diff --git a/JodaTime/src/java/org/joda/time/DateTimeZone.java b/JodaTime/src/java/org/joda/time/DateTimeZone.java
index 22ab00c3a..f996f10c8 100644
--- a/JodaTime/src/java/org/joda/time/DateTimeZone.java
+++ b/JodaTime/src/java/org/joda/time/DateTimeZone.java
@@ -22,14 +22,10 @@
 import java.io.Serializable;
 import java.lang.ref.Reference;
 import java.lang.ref.SoftReference;
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
-import java.util.Date;
 import java.util.HashMap;
 import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
-import java.util.SimpleTimeZone;
 import java.util.TimeZone;
 
 import org.joda.time.chrono.BaseChronology;
@@ -135,20 +131,6 @@
         }
     }
 
-    /** The method to call as TimeZone.getOffset is only from JDK 1.4. */
-    private static final Method OFFSET_METHOD;
-    static {
-        Method m = null;
-        try {
-            m = TimeZone.class.getDeclaredMethod("getOffset", new Class[] {Long.TYPE});
-        } catch (SecurityException ex) {
-            // ignore
-        } catch (NoSuchMethodException ex) {
-            // ignore
-        }
-        OFFSET_METHOD = m;
-    }
-
     //-----------------------------------------------------------------------
     /**
      * Gets the default time zone.
@@ -859,84 +841,6 @@ public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant) {
         return instantLocal - newZone.getOffsetFromLocal(instantLocal);
     }
 
-    /**
-     * Gets the millisecond instant in the equivalent JDK <code>TimeZone</code>
-     * keeping the same local time.
-     * <p>
-     * This method adjusts for time zone difference between the JDK and
-     * Joda-Time zone rules. The aim of this method is to keep the same
-     * local time but using the JDK time zone class. The result of this
-     * method should be used to pass into a <code>Date</code>,
-     * <code>Calendar</code> or other JDK class.
-     * See the <a href="http://joda-time.sourceforge.net/jdk_conversion.html">JDK conversion reference</a> for details.
-     *
-     * @param instant  the Joda-Time millisecond instant to convert
-     * @return the JDK millisecond instant with the same local time
-     * @since 1.2
-     */
-    public long getMillisJDKKeepLocal(long instant) {
-        return getMillisJDKKeepLocal(toTimeZone(), instant);
-    }
-
-    /**
-     * Gets the millisecond instant in the specified JDK <code>TimeZone</code>
-     * keeping the same local time. You should typically pass in the
-     * JDK zone that is returned by {@link #toTimeZone()}.
-     * <p>
-     * This method adjusts for time zone difference between the JDK and
-     * Joda-Time zone rules. The aim of this method is to keep the same
-     * local time but using the JDK time zone class. The result of this
-     * method should be used to pass into a <code>Date</code>,
-     * <code>Calendar</code> or other JDK class.
-     * See the <a href="http://joda-time.sourceforge.net/jdk_conversion.html">JDK conversion reference</a> for details.
-     *
-     * @param jdkZone  the JDK zone to convert to, normally as per toTimezone()
-     * @param instant  the Joda-Time millisecond instant to convert
-     * @return the JDK millisecond instant with the same local time
-     * @since 1.2
-     */
-    public long getMillisJDKKeepLocal(TimeZone jdkZone, long instant) {
-        if (jdkZone == null) {
-            jdkZone = toTimeZone();
-        }
-        Integer val;
-        if (OFFSET_METHOD == null) {
-            if (jdkZone instanceof SimpleTimeZone) {
-                SimpleTimeZone zone = (SimpleTimeZone) jdkZone;
-                long millisLocal = instant + getOffset(instant);
-                long jdkOffset = getJDKOffset(zone, millisLocal - getJDKOffset(zone, millisLocal));
-                return millisLocal - jdkOffset;
-            }
-            return instant;
-        } else {
-            try {
-                val = (Integer) OFFSET_METHOD.invoke(
-                        jdkZone, new Object[] {new Long(instant)});
-            } catch (IllegalAccessException ex) {
-                return instant;
-            } catch (InvocationTargetException ex) {
-                return instant;
-            }
-        }
-        // TODO: this conversion is wrong
-        long millisLocal = instant - val.intValue();
-        return millisLocal + getOffsetFromLocal(millisLocal);
-    }
-
-    /**
-     * @param zone
-     * @param instant
-     * @return
-     */
-    private long getJDKOffset(SimpleTimeZone zone, long instant) {
-        long offset = zone.getRawOffset();
-        if (zone.inDaylightTime(new Date(instant)))  {
-            offset += zone.getDSTSavings();
-        }
-        return offset;
-    }
-
-    //-----------------------------------------------------------------------
     /**
      * Returns true if this time zone has no transitions.
      *
diff --git a/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java b/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java
index 72910afe4..1c0576306 100644
--- a/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java
+++ b/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java
@@ -23,10 +23,6 @@
 import java.security.Permissions;
 import java.security.Policy;
 import java.security.ProtectionDomain;
-import java.util.Calendar;
-import java.util.Date;
-import java.util.GregorianCalendar;
-import java.util.TimeZone;
 
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
@@ -35,7 +31,6 @@
 import org.joda.time.chrono.BuddhistChronology;
 import org.joda.time.chrono.CopticChronology;
 import org.joda.time.chrono.ISOChronology;
-import org.joda.time.chrono.LenientChronology;
 
 /**
  * This class is a Junit unit test for Instant.
@@ -398,79 +393,4 @@ public void testIsContiguous_RP() {
         } catch (IllegalArgumentException ex) {}
     }
 
-    //-----------------------------------------------------------------------
-    public void testToGregorianCalendar() {
-        TimeZone jdkZone = TimeZone.getDefault();
-        try {
-            TimeZone.setDefault(TimeZone.getTimeZone("Europe/Paris"));
-            DateTime dt = new DateTime(1970, 1, 1, 2, 30, 0, 0, PARIS);
-            Calendar cal = new GregorianCalendar(1970, 0, 1, 2, 30);  // same field values
-            
-            assertEquals(cal, DateTimeUtils.toGregorianCalendar(dt));
-            
-            TimeZone.setDefault(TimeZone.getTimeZone("Europe/London"));
-            dt = new DateTime(1970, 1, 1, 2, 30, 0, 0, LONDON);
-            cal = new GregorianCalendar(1970, 0, 1, 2, 30);  // same field values
-            
-            assertEquals(cal, DateTimeUtils.toGregorianCalendar(dt));
-            
-            dt = new DateTime(1800, 1, 1, 0, 30, 0, 0, LONDON);
-            int year = dt.getYear();
-            while (year < 2000) {
-                dt = dt.plusHours(1);
-                int hourOfDay = dt.getHourOfDay();
-                if (hourOfDay == 4) {
-                    dt = dt.plusHours(18);  // speed up test
-                } else {
-                    year = dt.getYear();
-                    cal.clear();
-                    cal.set(year, dt.getMonthOfYear() - 1, dt.getDayOfMonth(),
-                        hourOfDay, dt.getMinuteOfHour(), dt.getSecondOfMinute());
-                    //cal.get(Calendar.ERA);
-                    assertEquals(cal, DateTimeUtils.toGregorianCalendar(dt));
-                }
-            }
-            
-        } finally {
-            TimeZone.setDefault(jdkZone);
-        }
-        try {
-            DateTimeUtils.toGregorianCalendar(null);
-            fail();
-        } catch (IllegalArgumentException ex) {}
-    }
-
-    //-----------------------------------------------------------------------
-    public void testToDateTime_Calendar() {
-        TimeZone jdkZone = TimeZone.getDefault();
-        try {
-            TimeZone.setDefault(TimeZone.getTimeZone("Europe/London"));
-            GregorianCalendar cal = new GregorianCalendar(1800, 0, 1, 0, 30, 0);
-            int year = cal.get(Calendar.YEAR);
-            while (year < 2000) {
-                cal.add(Calendar.HOUR_OF_DAY, 1);
-                int hourOfDay = cal.get(Calendar.HOUR_OF_DAY);
-                if (hourOfDay == 4) {
-                    cal.add(Calendar.HOUR_OF_DAY, 18);  // speed up test
-                } else {
-                    year = cal.get(Calendar.YEAR);
-                    DateTime dt = new DateTime(
-                        year, cal.get(Calendar.MONTH) + 1, cal.get(Calendar.DAY_OF_MONTH),
-                        cal.get(Calendar.HOUR_OF_DAY), cal.get(Calendar.MINUTE),
-                        cal.get(Calendar.SECOND), 0,
-                        LenientChronology.getInstance(ISOChronology.getInstance(LONDON)))
-                        .withChronology(ISOChronology.getInstance(LONDON));
-                    assertEquals(dt, DateTimeUtils.toDateTime(cal));
-                }
-            }
-            
-        } finally {
-            TimeZone.setDefault(jdkZone);
-        }
-        try {
-            DateTimeUtils.toDateTime((Calendar) null);
-            fail();
-        } catch (IllegalArgumentException ex) {}
-    }
-
 }
diff --git a/JodaTime/src/test/org/joda/time/TestDateTimeZone.java b/JodaTime/src/test/org/joda/time/TestDateTimeZone.java
index 0f594fc87..9b5a44677 100644
--- a/JodaTime/src/test/org/joda/time/TestDateTimeZone.java
+++ b/JodaTime/src/test/org/joda/time/TestDateTimeZone.java
@@ -28,7 +28,6 @@
 import java.security.Permissions;
 import java.security.Policy;
 import java.security.ProtectionDomain;
-import java.util.Date;
 import java.util.HashSet;
 import java.util.Locale;
 import java.util.Set;
@@ -689,31 +688,6 @@ public void testGetMillisKeepLocal() {
         }
     }
 
-    //-----------------------------------------------------------------------
-    public void testGetMillisJDKKeepLocal() {
-        TimeZone jdkZone = TimeZone.getDefault();
-        try {
-            TimeZone.setDefault(TimeZone.getTimeZone("Europe/Paris"));
-            DateTime dt = new DateTime(1970, 1, 1, 2, 30, 0, 0, PARIS);
-            Date date = new Date(70, 0, 1, 2, 30, 0);  // same field values
-            
-            assertEquals(date.getTime(), PARIS.getMillisJDKKeepLocal(dt.getMillis()));
-            assertEquals(date.getTime(), PARIS.getMillisJDKKeepLocal(PARIS.toTimeZone(), dt.getMillis()));
-            assertEquals(date.getTime(), PARIS.getMillisJDKKeepLocal(null, dt.getMillis()));
-            
-            TimeZone.setDefault(TimeZone.getTimeZone("Europe/London"));
-            dt = new DateTime(1970, 1, 1, 2, 30, 0, 0, LONDON);
-            date = new Date(70, 0, 1, 2, 30, 0);  // same field values
-            
-            assertEquals(date.getTime(), LONDON.getMillisJDKKeepLocal(dt.getMillis()));
-            assertEquals(date.getTime(), LONDON.getMillisJDKKeepLocal(LONDON.toTimeZone(), dt.getMillis()));
-            assertEquals(date.getTime(), LONDON.getMillisJDKKeepLocal(null, dt.getMillis()));
-            
-        } finally {
-            TimeZone.setDefault(jdkZone);
-        }
-    }
-
     //-----------------------------------------------------------------------
     public void testIsFixed() {
         DateTimeZone zone = DateTimeZone.forID("Europe/Paris");

From ae7e8d97e8b3df62a40927fbbaf799b5ba9c144b Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 5 Dec 2005 00:55:30 +0000
Subject: [PATCH 098/130] Remove methods to handle time zone differences

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@955 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../time/convert/TestCalendarConverter.java   | 19 ++++------------
 .../joda/time/convert/TestDateConverter.java  | 22 +++++--------------
 2 files changed, 10 insertions(+), 31 deletions(-)

diff --git a/JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java b/JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java
index b4fba1a8f..c49f3f0a7 100644
--- a/JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java
+++ b/JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java
@@ -28,7 +28,6 @@
 import junit.framework.TestSuite;
 
 import org.joda.time.Chronology;
-import org.joda.time.DateTime;
 import org.joda.time.DateTimeZone;
 import org.joda.time.TimeOfDay;
 import org.joda.time.chrono.BuddhistChronology;
@@ -44,13 +43,10 @@
  */
 public class TestCalendarConverter extends TestCase {
 
-    private static final DateTimeZone UTC = DateTimeZone.UTC;
     private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
     private static final DateTimeZone MOSCOW = DateTimeZone.forID("Europe/Moscow");
     private static Chronology JULIAN;
     private static Chronology ISO;
-    
-    private DateTimeZone zone = null;
 
     public static void main(String[] args) {
         junit.textui.TestRunner.run(suite());
@@ -95,14 +91,7 @@ public void testSupportedType() throws Exception {
     public void testGetInstantMillis_Object_Chronology() throws Exception {
         GregorianCalendar cal = new GregorianCalendar();
         cal.setTime(new Date(123L));
-        long millis = CalendarConverter.INSTANCE.getInstantMillis(cal, JULIAN);
-        long expected = 123L + cal.get(Calendar.DST_OFFSET) + cal.get(Calendar.ZONE_OFFSET);
-        expected = expected - DateTimeZone.getDefault().getOffsetFromLocal(expected);
-        assertEquals(expected, millis);
-        assertEquals(cal.get(Calendar.DAY_OF_MONTH), new DateTime(millis).getDayOfMonth());
-        assertEquals(cal.get(Calendar.HOUR_OF_DAY), new DateTime(millis).getHourOfDay());
-        assertEquals(cal.get(Calendar.MINUTE), new DateTime(millis).getMinuteOfHour());
-        
+        assertEquals(123L, CalendarConverter.INSTANCE.getInstantMillis(cal, JULIAN));
         assertEquals(123L, cal.getTime().getTime());
     }
 
@@ -177,10 +166,10 @@ public void testGetChronology_Object_Chronology() throws Exception {
     //-----------------------------------------------------------------------
     public void testGetPartialValues() throws Exception {
         GregorianCalendar cal = new GregorianCalendar();
-        cal.setTime(new Date(70, 2, 3, 4, 5, 6));
+        cal.setTime(new Date(12345678L));
         TimeOfDay tod = new TimeOfDay();
-        int[] expected = new int[] {4, 5, 6, 0};
-        int[] actual = CalendarConverter.INSTANCE.getPartialValues(tod, cal, ISOChronology.getInstance());
+        int[] expected = ISO.get(tod, 12345678L);
+        int[] actual = CalendarConverter.INSTANCE.getPartialValues(tod, cal, ISO);
         assertEquals(true, Arrays.equals(expected, actual));
     }
 
diff --git a/JodaTime/src/test/org/joda/time/convert/TestDateConverter.java b/JodaTime/src/test/org/joda/time/convert/TestDateConverter.java
index 12d8d2d71..0a4198362 100644
--- a/JodaTime/src/test/org/joda/time/convert/TestDateConverter.java
+++ b/JodaTime/src/test/org/joda/time/convert/TestDateConverter.java
@@ -20,13 +20,11 @@
 import java.lang.reflect.Modifier;
 import java.util.Arrays;
 import java.util.Date;
-import java.util.GregorianCalendar;
 
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
 
 import org.joda.time.Chronology;
-import org.joda.time.DateTime;
 import org.joda.time.DateTimeZone;
 import org.joda.time.TimeOfDay;
 import org.joda.time.chrono.CopticChronology;
@@ -40,14 +38,12 @@
  */
 public class TestDateConverter extends TestCase {
 
-    private static final DateTimeZone UTC = DateTimeZone.UTC;
     private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
     private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);
     private static Chronology ISO;
     private static Chronology JULIAN;
+    private static Chronology COPTIC;
     
-    private DateTimeZone zone = null;
-
     public static void main(String[] args) {
         junit.textui.TestRunner.run(suite());
     }
@@ -62,6 +58,7 @@ public TestDateConverter(String name) {
 
     protected void setUp() throws Exception {
         JULIAN = JulianChronology.getInstance();
+        COPTIC = CopticChronology.getInstance();
         ISO = ISOChronology.getInstance();
     }
 
@@ -91,14 +88,8 @@ public void testSupportedType() throws Exception {
     public void testGetInstantMillis_Object_Chronology() throws Exception {
         Date date = new Date(123L);
         long millis = DateConverter.INSTANCE.getInstantMillis(date, JULIAN);
-        long expected = 123L - date.getTimezoneOffset() * 60000;
-        expected = expected - DateTimeZone.getDefault().getOffsetFromLocal(expected);
-        assertEquals(expected, millis);
-        assertEquals(date.getDate(), new DateTime(millis).getDayOfMonth());
-        assertEquals(date.getHours(), new DateTime(millis).getHourOfDay());
-        assertEquals(date.getMinutes(), new DateTime(millis).getMinuteOfHour());
-        
-        assertEquals(expected, DateConverter.INSTANCE.getInstantMillis(date, (Chronology) null));
+        assertEquals(123L, millis);
+        assertEquals(123L, DateConverter.INSTANCE.getInstantMillis(date, (Chronology) null));
     }
 
     //-----------------------------------------------------------------------
@@ -114,10 +105,9 @@ public void testGetChronology_Object_Chronology() throws Exception {
 
     //-----------------------------------------------------------------------
     public void testGetPartialValues() throws Exception {
-        Date date = new Date(70, 2, 3, 4, 5, 6);
         TimeOfDay tod = new TimeOfDay();
-        int[] expected = new int[] {4, 5, 6, 0};
-        int[] actual = DateConverter.INSTANCE.getPartialValues(tod, date, ISOChronology.getInstance());
+        int[] expected = COPTIC.get(tod, 12345678L);
+        int[] actual = DateConverter.INSTANCE.getPartialValues(tod, new Date(12345678L), COPTIC);
         assertEquals(true, Arrays.equals(expected, actual));
     }
 

From fa5d6d512c23923870b575feb4b71fe884b71705 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 5 Dec 2005 01:02:57 +0000
Subject: [PATCH 099/130] New factory methods to create YearMonthDay/TimeOfDay
 from Date/Calendar fields

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@956 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  7 ++
 .../src/java/org/joda/time/TimeOfDay.java     | 64 +++++++++++++++++++
 .../src/java/org/joda/time/YearMonthDay.java  | 61 +++++++++++++++++-
 .../joda/time/TestTimeOfDay_Constructors.java | 24 +++++++
 .../time/TestYearMonthDay_Constructors.java   | 26 ++++++++
 5 files changed, 181 insertions(+), 1 deletion(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 1778262a8..b298e841c 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -89,6 +89,13 @@ Enhancements since 1.1
 - MutableDateTime.property(DateTimeFieldType)
   Gets the property by type. Complements the method already on DateTime/DateMidnight.
 
+- YearMonthDay.fromCalendarFields()
+- YearMonthDay.fromDateFields()
+- TimeOfDay.fromCalendarFields()
+- TimeOfDay.fromDateFields()
+  New factory methods to create a YearMonthDay/TimeOfDay using exactly the same
+  field values as the JDK objects, thus ignoring time zone effects
+
 - FieldUtils
   Performance optimization when adding by scalars of one or negative one. The
   overflow detecting multiplication skips the multiply and divide check for
diff --git a/JodaTime/src/java/org/joda/time/TimeOfDay.java b/JodaTime/src/java/org/joda/time/TimeOfDay.java
index 9f049f1d1..bc85658cc 100644
--- a/JodaTime/src/java/org/joda/time/TimeOfDay.java
+++ b/JodaTime/src/java/org/joda/time/TimeOfDay.java
@@ -16,6 +16,8 @@
 package org.joda.time;
 
 import java.io.Serializable;
+import java.util.Calendar;
+import java.util.Date;
 import java.util.Locale;
 
 import org.joda.time.base.BasePartial;
@@ -82,6 +84,68 @@
     /** The index of the millisOfSecond field in the field array */
     public static final int MILLIS_OF_SECOND = 3;
 
+    //-----------------------------------------------------------------------
+    /**
+     * Constructs a TimeOfDay from a <code>java.util.Calendar</code>
+     * using exactly the same field values avoiding any time zone effects.
+     * <p>
+     * Each field is queried from the Calendar and assigned to the TimeOfDay.
+     * This is useful to ensure that the field values are the same in the
+     * created TimeOfDay no matter what the time zone is. For example, if
+     * the Calendar states that the time is 04:29, then the created TimeOfDay
+     * will always have the time 04:29 irrespective of time zone issues.
+     * <p>
+     * This factory method ignores the type of the calendar and always
+     * creates a TimeOfDay with ISO chronology.
+     *
+     * @param calendar  the Calendar to extract fields from
+     * @return the created TimeOfDay
+     * @throws IllegalArgumentException if the calendar is null
+     * @throws IllegalArgumentException if the time is invalid for the ISO chronology
+     * @since 1.2
+     */
+    public static TimeOfDay fromCalendarFields(Calendar calendar) {
+        if (calendar == null) {
+            throw new IllegalArgumentException("The calendar must not be null");
+        }
+        return new TimeOfDay(
+            calendar.get(Calendar.HOUR_OF_DAY),
+            calendar.get(Calendar.MINUTE),
+            calendar.get(Calendar.SECOND),
+            calendar.get(Calendar.MILLISECOND)
+        );
+    }
+
+    /**
+     * Constructs a TimeOfDay from a <code>java.util.Date</code>
+     * using exactly the same field values avoiding any time zone effects.
+     * <p>
+     * Each field is queried from the Date and assigned to the TimeOfDay.
+     * This is useful to ensure that the field values are the same in the
+     * created TimeOfDay no matter what the time zone is. For example, if
+     * the Calendar states that the time is 04:29, then the created TimeOfDay
+     * will always have the time 04:29 irrespective of time zone issues.
+     * <p>
+     * This factory method always creates a TimeOfDay with ISO chronology.
+     *
+     * @param date  the Date to extract fields from
+     * @return the created TimeOfDay
+     * @throws IllegalArgumentException if the calendar is null
+     * @throws IllegalArgumentException if the date is invalid for the ISO chronology
+     * @since 1.2
+     */
+    public static TimeOfDay fromDateFields(Date date) {
+        if (date == null) {
+            throw new IllegalArgumentException("The date must not be null");
+        }
+        return new TimeOfDay(
+            date.getHours(),
+            date.getMinutes(),
+            date.getSeconds(),
+            (int) (date.getTime() % 1000)
+        );
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Constructs a TimeOfDay from the specified millis of day using the
diff --git a/JodaTime/src/java/org/joda/time/YearMonthDay.java b/JodaTime/src/java/org/joda/time/YearMonthDay.java
index 52072f017..f269a7061 100644
--- a/JodaTime/src/java/org/joda/time/YearMonthDay.java
+++ b/JodaTime/src/java/org/joda/time/YearMonthDay.java
@@ -16,6 +16,8 @@
 package org.joda.time;
 
 import java.io.Serializable;
+import java.util.Calendar;
+import java.util.Date;
 import java.util.Locale;
 
 import org.joda.time.base.BasePartial;
@@ -73,7 +75,64 @@
     /** The index of the dayOfMonth field in the field array */
     public static final int DAY_OF_MONTH = 2;
 
-    // Constructors
+    //-----------------------------------------------------------------------
+    /**
+     * Constructs a YearMonthDay from a <code>java.util.Calendar</code>
+     * using exactly the same field values avoiding any time zone effects.
+     * <p>
+     * Each field is queried from the Calendar and assigned to the YearMonthDay.
+     * This is useful if you have been using the Calendar as a local date,
+     * ignoing the zone.
+     * <p>
+     * This factory method ignores the type of the calendar and always
+     * creates a YearMonthDay with ISO chronology. It is expected that you
+     * will only pass in instances of <code>GregorianCalendar</code> however
+     * this is not validated.
+     *
+     * @param calendar  the Calendar to extract fields from
+     * @return the created YearMonthDay
+     * @throws IllegalArgumentException if the calendar is null
+     * @throws IllegalArgumentException if the date is invalid for the ISO chronology
+     * @since 1.2
+     */
+    public static YearMonthDay fromCalendarFields(Calendar calendar) {
+        if (calendar == null) {
+            throw new IllegalArgumentException("The calendar must not be null");
+        }
+        return new YearMonthDay(
+            calendar.get(Calendar.YEAR),
+            calendar.get(Calendar.MONTH) + 1,
+            calendar.get(Calendar.DAY_OF_MONTH)
+        );
+    }
+
+    /**
+     * Constructs a YearMonthDay from a <code>java.util.Date</code>
+     * using exactly the same field values avoiding any time zone effects.
+     * <p>
+     * Each field is queried from the Date and assigned to the YearMonthDay.
+     * This is useful if you have been using the Date as a local date,
+     * ignoing the zone.
+     * <p>
+     * This factory method always creates a YearMonthDay with ISO chronology.
+     *
+     * @param date  the Date to extract fields from
+     * @return the created YearMonthDay
+     * @throws IllegalArgumentException if the calendar is null
+     * @throws IllegalArgumentException if the date is invalid for the ISO chronology
+     * @since 1.2
+     */
+    public static YearMonthDay fromDateFields(Date date) {
+        if (date == null) {
+            throw new IllegalArgumentException("The date must not be null");
+        }
+        return new YearMonthDay(
+            date.getYear() + 1900,
+            date.getMonth() + 1,
+            date.getDate()
+        );
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Constructs a YearMonthDay with the current date, using ISOChronology in
diff --git a/JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java b/JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java
index fa475bf86..2b8add1b3 100644
--- a/JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java
+++ b/JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java
@@ -99,6 +99,30 @@ public void testConstantMidnight() throws Throwable {
         assertEquals(0, test.getMillisOfSecond());
     }
 
+    //-----------------------------------------------------------------------
+    public void testFactory_FromCalendarFields() throws Exception {
+        GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);
+        cal.set(Calendar.MILLISECOND, 7);
+        TimeOfDay expected = new TimeOfDay(4, 5, 6, 7);
+        assertEquals(expected, TimeOfDay.fromCalendarFields(cal));
+        try {
+            TimeOfDay.fromCalendarFields(null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
+    public void testFactory_FromDateFields() throws Exception {
+        GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);
+        cal.set(Calendar.MILLISECOND, 7);
+        TimeOfDay expected = new TimeOfDay(4, 5, 6, 7);
+        assertEquals(expected, TimeOfDay.fromDateFields(cal.getTime()));
+        try {
+            TimeOfDay.fromDateFields(null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Test factory (long)
diff --git a/JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java b/JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java
index 06a70d36c..2aa760a0b 100644
--- a/JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java
+++ b/JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java
@@ -15,7 +15,9 @@
  */
 package org.joda.time;
 
+import java.util.Calendar;
 import java.util.Date;
+import java.util.GregorianCalendar;
 
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
@@ -79,6 +81,30 @@ protected void tearDown() throws Exception {
         zone = null;
     }
 
+    //-----------------------------------------------------------------------
+    public void testFactory_FromCalendarFields() throws Exception {
+        GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);
+        cal.set(Calendar.MILLISECOND, 7);
+        YearMonthDay expected = new YearMonthDay(1970, 2, 3);
+        assertEquals(expected, YearMonthDay.fromCalendarFields(cal));
+        try {
+            YearMonthDay.fromCalendarFields(null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
+    public void testFactory_FromDateFields() throws Exception {
+        GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);
+        cal.set(Calendar.MILLISECOND, 7);
+        YearMonthDay expected = new YearMonthDay(1970, 2, 3);
+        assertEquals(expected, YearMonthDay.fromDateFields(cal.getTime()));
+        try {
+            YearMonthDay.fromDateFields(null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Test constructor ()

From 2ceebab9c3f7dd65006836346f2030206772d60a Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 5 Dec 2005 21:19:22 +0000
Subject: [PATCH 100/130] Add clirr to ant build as maven didn't work

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@957 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/build.xml | 14 ++++++++++++++
 1 file changed, 14 insertions(+)

diff --git a/JodaTime/build.xml b/JodaTime/build.xml
index 35fd3ef66..66b2f8736 100644
--- a/JodaTime/build.xml
+++ b/JodaTime/build.xml
@@ -28,6 +28,7 @@
 
   <!-- The current version number of this component -->
   <property name="component.version"       value="1.2-dev"/>
+  <property name="previous.version"        value="1.1"/>
 
   <!-- The current version number of this component -->
   <property name="component.fullname"      value="${component.name}-${component.version}"/>
@@ -60,6 +61,7 @@
   <property name="build.fullname"          value="${build}/${component.fullname}"/>
   <property name="build.dist.fullname"     value="${build.dist}/${component.fullname}"/>
 
+  <property name="repo" value="${user.home}/.maven/repository" />
 
 <!-- ========== Compiler Defaults ========================================= -->
 
@@ -362,4 +364,16 @@
     </junit>
   </target>
 
+  <target name="clirr" depends="jar" description="clirr binary compatibility">
+  	<echo message="${repo}/clirr/jars/clirr-core-0.6-uber.jar"></echo>
+    <taskdef classpath="${repo}/clirr/jars/clirr-core-0.6-uber.jar"
+        resource="clirrtask.properties"/>
+
+    <clirr>
+      <origfiles dir="${repo}/${component.name}/jars" includes="${component.name}-${previous.version}.jar"/>
+      <newfiles dir="." includes="${build.fullname}.jar"/>
+      <formatter type="xml" outfile="build/clirr.xml" />
+    </clirr>
+  </target>
+
 </project>

From ae225a242b4271d8072bfb3c7f98aad08cb97fd3 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 5 Dec 2005 22:16:22 +0000
Subject: [PATCH 101/130] Respect minimum days in week when deserializing

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@958 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/chrono/CopticChronology.java  | 4 +++-
 .../src/java/org/joda/time/chrono/EthiopicChronology.java     | 4 +++-
 .../src/java/org/joda/time/chrono/GregorianChronology.java    | 4 +++-
 JodaTime/src/java/org/joda/time/chrono/JulianChronology.java  | 4 +++-
 4 files changed, 12 insertions(+), 4 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java b/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java
index 72ab453ce..da273daba 100644
--- a/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java
@@ -171,7 +171,9 @@ public static CopticChronology getInstance(DateTimeZone zone, int minDaysInFirst
      */
     private Object readResolve() {
         Chronology base = getBase();
-        return base == null ? getInstanceUTC() : getInstance(base.getZone());
+        return base == null ?
+                getInstance(DateTimeZone.UTC, getMinimumDaysInFirstWeek()) :
+                    getInstance(base.getZone(), getMinimumDaysInFirstWeek());
     }
 
     // Conversion
diff --git a/JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java b/JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java
index 8034610a8..dea2bb980 100644
--- a/JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java
@@ -171,7 +171,9 @@ public static EthiopicChronology getInstance(DateTimeZone zone, int minDaysInFir
      */
     private Object readResolve() {
         Chronology base = getBase();
-        return base == null ? getInstanceUTC() : getInstance(base.getZone());
+        return base == null ?
+                getInstance(DateTimeZone.UTC, getMinimumDaysInFirstWeek()) :
+                    getInstance(base.getZone(), getMinimumDaysInFirstWeek());
     }
 
     // Conversion
diff --git a/JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java b/JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java
index d863dbe61..2d04c01db 100644
--- a/JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java
@@ -156,7 +156,9 @@ private GregorianChronology(Chronology base, Object param, int minDaysInFirstWee
      */
     private Object readResolve() {
         Chronology base = getBase();
-        return base == null ? getInstanceUTC() : getInstance(base.getZone());
+        return base == null ?
+                getInstance(DateTimeZone.UTC, getMinimumDaysInFirstWeek()) :
+                    getInstance(base.getZone(), getMinimumDaysInFirstWeek());
     }
 
     // Conversion
diff --git a/JodaTime/src/java/org/joda/time/chrono/JulianChronology.java b/JodaTime/src/java/org/joda/time/chrono/JulianChronology.java
index 5c8fc5082..3816a30f6 100644
--- a/JodaTime/src/java/org/joda/time/chrono/JulianChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/JulianChronology.java
@@ -170,7 +170,9 @@ public static JulianChronology getInstance(DateTimeZone zone, int minDaysInFirst
      */
     private Object readResolve() {
         Chronology base = getBase();
-        return base == null ? getInstanceUTC() : getInstance(base.getZone());
+        return base == null ?
+                getInstance(DateTimeZone.UTC, getMinimumDaysInFirstWeek()) :
+                    getInstance(base.getZone(), getMinimumDaysInFirstWeek());
     }
 
     // Conversion

From b947d2de15ad63651dbc40e496187ac7743a69f8 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 5 Dec 2005 22:37:27 +0000
Subject: [PATCH 102/130] Add serialized object for v1.1 GJChronology with min
 days in first week of 2

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@959 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../testdata/GJChronologyChangedInternals.dat    | Bin 0 -> 1003 bytes
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 JodaTime/src/testdata/GJChronologyChangedInternals.dat

diff --git a/JodaTime/src/testdata/GJChronologyChangedInternals.dat b/JodaTime/src/testdata/GJChronologyChangedInternals.dat
new file mode 100644
index 0000000000000000000000000000000000000000..0fa4c559285d0ddef4ed1bf71fee3708c9232af3
GIT binary patch
literal 1003
zcmZvbPiPZC6vkgSMnOZ`8bhHdMXc5e?n19U*+fH@4HhaW^)zXQIO*=pIx|}n)Zod3
zD0uQvgh~z`B;Y|oPacb)m0mmu-n?3<e=gpfNz!J!%p7J0X5RPv=Dj!F9Y_lfrx~x?
z4OT<8BmuTpZgEDLU2+S(jnC?>@7;=xm(R^wkai(U3Xx=Mm{*AJ6X8OJlu%fVIFf`>
z4@URS%T!22rGyDj5gbi$G{G4h%zJQxlsK+4P7oc^BwR=Y^es7tyGmo6xRIX_m@x|^
zFU~hPoHxGyk`Oqk`nWc<)!BIct@G~vKMO1m(qsV%EMYPM8eUh<4wFU1Q6S;C*FbB?
z@e!>%SE~)YA~pGpk*sxxD(jD)om|{KTC)I}p{muiF=m<3xYJ+hH=lM}V-IxDZD_+G
zp=Ssq4!N5>E4H>`53D@>a${pm%=$eB0HhS>tdWz<-@~t`w&yxOk&fgrV~i=VAYe4!
zO$u>;X{-IYA7v)#EW~5@pPeT!-a1njjFcfqDufnMOO)vq!iBt!@oN8}VW`9{<=<RY
zLj(Oi_UdtaVs&#bSEKt9`Ge0HH0{NYAGSBM&$pBj7mg?+`VTZUR*$>=rN1ux?t)Hy
zUQanajVotU2W5*$;%n+t=n_sZ$*B6$8CkzKH~Ax_D}E;nnadGpA$C+NDNv+kGK!Mw
P>Fq1$<6ynlCo%AUsa#P7

literal 0
HcmV?d00001


From 9c0781d414b9eee98f78d168b5db6c2cdda5147d Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 5 Dec 2005 22:46:45 +0000
Subject: [PATCH 103/130] Rename BaseGJChronology to BasicChronology, ensuring
 serialization OK

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@960 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |   7 ++++
 ...GJChronology.java => BasicChronology.java} |   8 ++--
 .../chrono/BasicDayOfMonthDateTimeField.java  |   4 +-
 .../chrono/BasicDayOfYearDateTimeField.java   |   4 +-
 .../chrono/BasicFixedMonthChronology.java     |   2 +-
 .../joda/time/chrono/BasicGJChronology.java   |   2 +-
 .../chrono/BasicMonthOfYearDateTimeField.java |   4 +-
 .../BasicWeekOfWeekyearDateTimeField.java     |   4 +-
 .../chrono/BasicWeekyearDateTimeField.java    |   4 +-
 .../time/chrono/BasicYearDateTimeField.java   |   4 +-
 .../joda/time/chrono/CopticChronology.java    |   6 ++-
 .../time/chrono/GJDayOfWeekDateTimeField.java |   4 +-
 .../joda/time/chrono/GJEraDateTimeField.java  |   4 +-
 .../chrono/GJMonthOfYearDateTimeField.java    |   2 +-
 .../time/chrono/GJYearOfEraDateTimeField.java |   4 +-
 .../joda/time/chrono/GregorianChronology.java |   6 ++-
 .../joda/time/chrono/IslamicChronology.java   |   2 +-
 .../joda/time/chrono/JulianChronology.java    |   6 ++-
 .../test/org/joda/time/TestSerialization.java |  35 ++++++++++++------
 .../testdata/GJChronologyChangedInternals.dat | Bin 1003 -> 1001 bytes
 20 files changed, 69 insertions(+), 43 deletions(-)
 rename JodaTime/src/java/org/joda/time/chrono/{BaseGJChronology.java => BasicChronology.java} (99%)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index b298e841c..0d4e00a1a 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -23,8 +23,11 @@ Source compatible - Yes
   - v1.1 and v1.2 are source compatible in their public and protected API
 
 Serialization compatible - Yes
+  - Chronology serialization has changed, however the two formats are compatible
+  - v1.1 did not serialize the Chronology minimum days in first week field properly, v1.2 does
 
 Data compatible - Yes
+  - DateTimeZone data updated to 2005o
 
 
 Deprecations since 1.1
@@ -65,6 +68,10 @@ Bug fixes since 1.1
 - ZonedChronology
   Fixed getting text values for fields from getAs[Short]Text(int value, Locale locale).
 
+- Gregorian, Julian, GJ and Coptic
+  These Chronology classes did not correctly store the minimum days in first week
+  during serialization
+
 - DateTimeFormatter
   Fixed printing of time zone name near DST transition.
 
diff --git a/JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java b/JodaTime/src/java/org/joda/time/chrono/BasicChronology.java
similarity index 99%
rename from JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java
rename to JodaTime/src/java/org/joda/time/chrono/BasicChronology.java
index 954f93b3a..c8874dbdf 100644
--- a/JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/BasicChronology.java
@@ -39,15 +39,15 @@
  * Most of the utility methods required by subclasses are package-private,
  * reflecting the intention that they be defined in the same package.
  * <p>
- * BaseGJChronology is thread-safe and immutable, and all subclasses must
+ * BasicChronology is thread-safe and immutable, and all subclasses must
  * be as well.
  *
  * @author Stephen Colebourne
  * @author Brian S O'Neill
  * @author Guy Allard
- * @since 1.0
+ * @since 1.2, renamed from BaseGJChronology
  */
-abstract class BaseGJChronology extends AssembledChronology {
+abstract class BasicChronology extends AssembledChronology {
 
     /** Serialization lock */
     private static final long serialVersionUID = 8283225332206808863L;
@@ -127,7 +127,7 @@
 
     private final int iMinDaysInFirstWeek;
 
-    BaseGJChronology(Chronology base, Object param, int minDaysInFirstWeek) {
+    BasicChronology(Chronology base, Object param, int minDaysInFirstWeek) {
         super(base, param);
 
         if (minDaysInFirstWeek < 1 || minDaysInFirstWeek > 7) {
diff --git a/JodaTime/src/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java b/JodaTime/src/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java
index 79e778c10..2fd054cd0 100644
--- a/JodaTime/src/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java
+++ b/JodaTime/src/java/org/joda/time/chrono/BasicDayOfMonthDateTimeField.java
@@ -32,12 +32,12 @@
 
     private static final long serialVersionUID = -4677223814028011723L;
 
-    private final BaseGJChronology iChronology;
+    private final BasicChronology iChronology;
 
     /**
      * Restricted constructor.
      */
-    BasicDayOfMonthDateTimeField(BaseGJChronology chronology, DurationField days) {
+    BasicDayOfMonthDateTimeField(BasicChronology chronology, DurationField days) {
         super(DateTimeFieldType.dayOfMonth(), days);
         iChronology = chronology;
     }
diff --git a/JodaTime/src/java/org/joda/time/chrono/BasicDayOfYearDateTimeField.java b/JodaTime/src/java/org/joda/time/chrono/BasicDayOfYearDateTimeField.java
index 94714a21c..58cd02677 100644
--- a/JodaTime/src/java/org/joda/time/chrono/BasicDayOfYearDateTimeField.java
+++ b/JodaTime/src/java/org/joda/time/chrono/BasicDayOfYearDateTimeField.java
@@ -32,12 +32,12 @@
 
     private static final long serialVersionUID = -6821236822336841037L;
 
-    private final BaseGJChronology iChronology;
+    private final BasicChronology iChronology;
 
     /**
      * Restricted constructor
      */
-    BasicDayOfYearDateTimeField(BaseGJChronology chronology, DurationField days) {
+    BasicDayOfYearDateTimeField(BasicChronology chronology, DurationField days) {
         super(DateTimeFieldType.dayOfYear(), days);
         iChronology = chronology;
     }
diff --git a/JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java b/JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java
index fc84b2f17..b8644152d 100644
--- a/JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java
@@ -32,7 +32,7 @@
  * @author Stephen Colebourne
  * @since 1.2, refactored from CopticChronology
  */
-abstract class BasicFixedMonthChronology extends BaseGJChronology {
+abstract class BasicFixedMonthChronology extends BasicChronology {
 
     /** Serialization lock */
     private static final long serialVersionUID = 261387371998L;
diff --git a/JodaTime/src/java/org/joda/time/chrono/BasicGJChronology.java b/JodaTime/src/java/org/joda/time/chrono/BasicGJChronology.java
index 1cf2a941e..3c34c9960 100644
--- a/JodaTime/src/java/org/joda/time/chrono/BasicGJChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/BasicGJChronology.java
@@ -31,7 +31,7 @@
  * @author Guy Allard
  * @since 1.2, refactored from CommonGJChronology
  */
-abstract class BasicGJChronology extends BaseGJChronology {
+abstract class BasicGJChronology extends BasicChronology {
 
     /** Serialization lock */
     private static final long serialVersionUID = 538276888268L;
diff --git a/JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java
index 7aa8b0761..47d2ef36b 100644
--- a/JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java
+++ b/JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java
@@ -36,7 +36,7 @@
 
     private static final int MIN = DateTimeConstants.JANUARY;
 
-    private final BaseGJChronology iChronology;
+    private final BasicChronology iChronology;
     private final int iMax;
     private final int iLeapMonth;
 
@@ -45,7 +45,7 @@
      * 
      * @param leapMonth the month of year that leaps
      */
-    BasicMonthOfYearDateTimeField(BaseGJChronology chronology, int leapMonth) {
+    BasicMonthOfYearDateTimeField(BasicChronology chronology, int leapMonth) {
         super(DateTimeFieldType.monthOfYear(), chronology.getAverageMillisPerMonth());
         iChronology = chronology;
         iMax = iChronology.getMaxMonth();
diff --git a/JodaTime/src/java/org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField.java b/JodaTime/src/java/org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField.java
index 26e80282b..200231fda 100644
--- a/JodaTime/src/java/org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField.java
+++ b/JodaTime/src/java/org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField.java
@@ -33,12 +33,12 @@
 
     private static final long serialVersionUID = -1587436826395135328L;
 
-    private final BaseGJChronology iChronology;
+    private final BasicChronology iChronology;
 
     /**
      * Restricted constructor
      */
-    BasicWeekOfWeekyearDateTimeField(BaseGJChronology chronology, DurationField weeks) {
+    BasicWeekOfWeekyearDateTimeField(BasicChronology chronology, DurationField weeks) {
         super(DateTimeFieldType.weekOfWeekyear(), weeks);
         iChronology = chronology;
     }
diff --git a/JodaTime/src/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java b/JodaTime/src/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java
index cd8998fdc..85abc2bf1 100644
--- a/JodaTime/src/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java
+++ b/JodaTime/src/java/org/joda/time/chrono/BasicWeekyearDateTimeField.java
@@ -35,12 +35,12 @@
 
     private static final long WEEK_53 = (53L - 1) * DateTimeConstants.MILLIS_PER_WEEK;
 
-    private final BaseGJChronology iChronology;
+    private final BasicChronology iChronology;
 
     /**
      * Restricted constructor
      */
-    BasicWeekyearDateTimeField(BaseGJChronology chronology) {
+    BasicWeekyearDateTimeField(BasicChronology chronology) {
         super(DateTimeFieldType.weekyear(), chronology.getAverageMillisPerYear());
         iChronology = chronology;
     }
diff --git a/JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java b/JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java
index 5f11f85ad..595e61ab3 100644
--- a/JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java
+++ b/JodaTime/src/java/org/joda/time/chrono/BasicYearDateTimeField.java
@@ -34,14 +34,14 @@
     private static final long serialVersionUID = -98628754872287L;
 
     /** The underlying basic chronology. */
-    protected final BaseGJChronology iChronology;
+    protected final BasicChronology iChronology;
 
     /**
      * Restricted constructor.
      * 
      * @param chronology  the chronology this field belogs to
      */
-    BasicYearDateTimeField(BaseGJChronology chronology) {
+    BasicYearDateTimeField(BasicChronology chronology) {
         super(DateTimeFieldType.year(), chronology.getAverageMillisPerYear());
         iChronology = chronology;
     }
diff --git a/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java b/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java
index da273daba..3af2ad39d 100644
--- a/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java
@@ -171,9 +171,11 @@ public static CopticChronology getInstance(DateTimeZone zone, int minDaysInFirst
      */
     private Object readResolve() {
         Chronology base = getBase();
+        int minDays = getMinimumDaysInFirstWeek();
+        minDays = (minDays == 0 ? 4 : minDays);  // handle rename of BaseGJChronology
         return base == null ?
-                getInstance(DateTimeZone.UTC, getMinimumDaysInFirstWeek()) :
-                    getInstance(base.getZone(), getMinimumDaysInFirstWeek());
+                getInstance(DateTimeZone.UTC, minDays) :
+                    getInstance(base.getZone(), minDays);
     }
 
     // Conversion
diff --git a/JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java b/JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java
index b915490c0..8137181b0 100644
--- a/JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java
+++ b/JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java
@@ -36,12 +36,12 @@
     /** Serialization version */
     private static final long serialVersionUID = -3857947176719041436L;
 
-    private final BaseGJChronology iChronology;
+    private final BasicChronology iChronology;
 
     /**
      * Restricted constructor.
      */
-    GJDayOfWeekDateTimeField(BaseGJChronology chronology, DurationField days) {
+    GJDayOfWeekDateTimeField(BasicChronology chronology, DurationField days) {
         super(DateTimeFieldType.dayOfWeek(), days);
         iChronology = chronology;
     }
diff --git a/JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java b/JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java
index 2768fa78e..b2f91a25e 100644
--- a/JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java
+++ b/JodaTime/src/java/org/joda/time/chrono/GJEraDateTimeField.java
@@ -37,12 +37,12 @@
     /** Serialization version */
     private static final long serialVersionUID = 4240986525305515528L;
 
-    private final BaseGJChronology iChronology;
+    private final BasicChronology iChronology;
 
     /**
      * Restricted constructor
      */
-    GJEraDateTimeField(BaseGJChronology chronology) {
+    GJEraDateTimeField(BasicChronology chronology) {
         super(DateTimeFieldType.era());
         iChronology = chronology;
     }
diff --git a/JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java b/JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java
index 5e9ef7e5a..19c9e6bbb 100644
--- a/JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java
+++ b/JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java
@@ -33,7 +33,7 @@
     /**
      * Restricted constructor
      */
-    GJMonthOfYearDateTimeField(BaseGJChronology chronology) {
+    GJMonthOfYearDateTimeField(BasicChronology chronology) {
         super(chronology, 2);
     }
 
diff --git a/JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java b/JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java
index f4b981842..c080c6bb2 100644
--- a/JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java
+++ b/JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java
@@ -31,12 +31,12 @@
 
     private static final long serialVersionUID = -5961050944769862059L;
 
-    private final BaseGJChronology iChronology;
+    private final BasicChronology iChronology;
 
     /**
      * Restricted constructor.
      */
-    GJYearOfEraDateTimeField(DateTimeField yearField, BaseGJChronology chronology) {
+    GJYearOfEraDateTimeField(DateTimeField yearField, BasicChronology chronology) {
         super(yearField, DateTimeFieldType.yearOfEra());
         iChronology = chronology;
     }
diff --git a/JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java b/JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java
index 2d04c01db..862901dcc 100644
--- a/JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java
@@ -156,9 +156,11 @@ private GregorianChronology(Chronology base, Object param, int minDaysInFirstWee
      */
     private Object readResolve() {
         Chronology base = getBase();
+        int minDays = getMinimumDaysInFirstWeek();
+        minDays = (minDays == 0 ? 4 : minDays);  // handle rename of BaseGJChronology
         return base == null ?
-                getInstance(DateTimeZone.UTC, getMinimumDaysInFirstWeek()) :
-                    getInstance(base.getZone(), getMinimumDaysInFirstWeek());
+                getInstance(DateTimeZone.UTC, minDays) :
+                    getInstance(base.getZone(), minDays);
     }
 
     // Conversion
diff --git a/JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java b/JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java
index c00e7d6e6..49c83af7b 100644
--- a/JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java
@@ -63,7 +63,7 @@
  * @author Stephen Colebourne
  * @since 1.2
  */
-public final class IslamicChronology extends BaseGJChronology {
+public final class IslamicChronology extends BasicChronology {
 
     /** Serialization lock */
     private static final long serialVersionUID = -3663823829888L;
diff --git a/JodaTime/src/java/org/joda/time/chrono/JulianChronology.java b/JodaTime/src/java/org/joda/time/chrono/JulianChronology.java
index 3816a30f6..9da768fdb 100644
--- a/JodaTime/src/java/org/joda/time/chrono/JulianChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/JulianChronology.java
@@ -170,9 +170,11 @@ public static JulianChronology getInstance(DateTimeZone zone, int minDaysInFirst
      */
     private Object readResolve() {
         Chronology base = getBase();
+        int minDays = getMinimumDaysInFirstWeek();
+        minDays = (minDays == 0 ? 4 : minDays);  // handle rename of BaseGJChronology
         return base == null ?
-                getInstance(DateTimeZone.UTC, getMinimumDaysInFirstWeek()) :
-                    getInstance(base.getZone(), getMinimumDaysInFirstWeek());
+                getInstance(DateTimeZone.UTC, minDays) :
+                    getInstance(base.getZone(), minDays);
     }
 
     // Conversion
diff --git a/JodaTime/src/test/org/joda/time/TestSerialization.java b/JodaTime/src/test/org/joda/time/TestSerialization.java
index 80d7b29a4..ccfc9bc8e 100644
--- a/JodaTime/src/test/org/joda/time/TestSerialization.java
+++ b/JodaTime/src/test/org/joda/time/TestSerialization.java
@@ -18,6 +18,7 @@
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.FileInputStream;
+import java.io.FileOutputStream;
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
 import java.io.Serializable;
@@ -213,6 +214,12 @@ public void testSerializedGJChronology() throws Exception {
         inlineCompare(test, true);
     }
 
+    public void testSerializedGJChronologyChangedInternals() throws Exception {
+        GJChronology test = GJChronology.getInstance(PARIS, 123L, 2);
+        loadAndCompare(test, "GJChronologyChangedInternals.dat", true);
+        inlineCompare(test, true);
+    }
+
     public void testSerializedGregorianChronology() throws Exception {
         GregorianChronology test = GregorianChronology.getInstance(PARIS);
         loadAndCompare(test, "GregorianChronology.dat", true);
@@ -347,6 +354,12 @@ public void inlineCompare(Serializable test, boolean same) throws Exception {
 //        store(test, "GJChronology.dat");
 //    }
 //
+//    // Format changed in v1.2 - min days in first week not deserialized in v1.0/1.1
+//    public void testStoreSerializedGJChronologyChangedInternals() throws Exception {
+//        GJChronology test = GJChronology.getInstance(PARIS, 123L, 2);
+//        store(test, "GJChronologyChangedInternals.dat");
+//    }
+//
 //    public void testStoreSerializedGregorianChronology() throws Exception {
 //        GregorianChronology test = GregorianChronology.getInstance(PARIS);
 //        store(test, "GregorianChronology.dat");
@@ -415,15 +428,15 @@ public void inlineCompare(Serializable test, boolean same) throws Exception {
 //        store(test, "DateMidnightProperty.dat");
 //    }
 
-//    private void store(Serializable test, String filename) throws Exception {
-//        FileOutputStream fos = new FileOutputStream("src/testdata/" + filename);
-//        ObjectOutputStream oos = new ObjectOutputStream(fos);
-//        try {
-//            oos.writeObject(test);
-//        } finally {
-//            oos.close();
-//        }
-//        oos.close();
-//    }
-//
+    private void store(Serializable test, String filename) throws Exception {
+        FileOutputStream fos = new FileOutputStream("src/testdata/" + filename);
+        ObjectOutputStream oos = new ObjectOutputStream(fos);
+        try {
+            oos.writeObject(test);
+        } finally {
+            oos.close();
+        }
+        oos.close();
+    }
+
 }
diff --git a/JodaTime/src/testdata/GJChronologyChangedInternals.dat b/JodaTime/src/testdata/GJChronologyChangedInternals.dat
index 0fa4c559285d0ddef4ed1bf71fee3708c9232af3..d7cf169c7c625728290489d4dd3c33cd36c099ec 100644
GIT binary patch
delta 35
rcmaFO{*rxzKNF+c<OW6wrp)BY*-TQCH#3T{IwcloCU0KI<i!X8&VUO9

delta 38
scmaFK{+fM*KNF++<OW7jHs}1@-2A-BSxi!lsz3orCU>vR^O?LD0qwU7LI3~&


From b2f337a8812ca3b28420cee0c0651e5397370f6c Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 5 Dec 2005 23:05:11 +0000
Subject: [PATCH 104/130] Clarify compatibility

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@961 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt | 9 +++++++--
 1 file changed, 7 insertions(+), 2 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 0d4e00a1a..5326f3196 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -5,6 +5,7 @@ Joda-Time is a date and time handling library that seeks to replace the JDK
 Date and Calendar classes.
 
 This is the third full release of Joda-Time.
+This release focuses on bug fixes, with a few new features.
 
 We recommend JDK 1.3 or later, and have performed no testing on earlier JDKs.
 
@@ -13,11 +14,15 @@ This is the same license as all of Apache, plus other open source projects such
 The intent is to make the code available to the Java community with the minimum
 of restrictions. If the license causes you problems please contact the mailing list.
 
+** Please also check out the JSP and Hibernate contributed projects **
+
 
 Incompatible changes since 1.1
 ------------------------------
-Binary compatible - Yes
-  - v1.1 and v1.2 are binary compatible in their public and protected API
+Binary compatible - Yes, except
+  - The internal classes BaseGJChronology and CommonGJChronology have been removed
+    They were implementation classes and you should not have been using them
+    Please contact the mailing list if this causes you problems
 
 Source compatible - Yes
   - v1.1 and v1.2 are source compatible in their public and protected API

From d5520b098f1a3c83a60af7c6947740e18f7d25a6 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 6 Dec 2005 00:16:38 +0000
Subject: [PATCH 105/130] Upgrade previous version for jdiff

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@962 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/project.properties | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/JodaTime/project.properties b/JodaTime/project.properties
index cbaa9aaa7..10dd48422 100644
--- a/JodaTime/project.properties
+++ b/JodaTime/project.properties
@@ -14,4 +14,4 @@ maven.javadoc.public=true
 maven.javadoc.package=false
 maven.javadoc.private=false
 
-maven.jdiff.old.tag=v1_0_000
+maven.jdiff.old.tag=v1_1_000

From f41449ed25f4d8e220c90446764aa0554750ad8e Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 6 Dec 2005 00:17:06 +0000
Subject: [PATCH 106/130] Upgrade version number for release 1.2

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@963 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/ToDo.txt | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/JodaTime/ToDo.txt b/JodaTime/ToDo.txt
index e532c8f24..21ef1c57b 100644
--- a/JodaTime/ToDo.txt
+++ b/JodaTime/ToDo.txt
@@ -1,17 +1,17 @@
 JodaTime ToDo list
 ==================
 
-For 1.2
+For 1.3
 -------
 
-The TODO list for 1.2 has not been set yet.
+The TODO list for 1.3 has not been set yet.
 Some of the following are likely targets, as they are interesting ideas.
 
 Join joda-interest@lists.sourceforge.net to help out!
 
 
-Ideas longer term
------------------
+Ideas
+-----
 - Pluggable text providers:
    Allow all text output to be controlled and updated.
    Probably use the CLDR files.

From f062952041e1f18a7ddb87832f636bd571cc0d6a Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 6 Dec 2005 00:18:15 +0000
Subject: [PATCH 107/130] Enhance build to add src-ide.zip, apply crlf fully
 and separate src and bin folders

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@964 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/build.xml | 60 ++++++++++++++++++++++++++++++++++------------
 1 file changed, 45 insertions(+), 15 deletions(-)

diff --git a/JodaTime/build.xml b/JodaTime/build.xml
index 66b2f8736..c49e0a17d 100644
--- a/JodaTime/build.xml
+++ b/JodaTime/build.xml
@@ -57,9 +57,11 @@
   <property name="build.tz"                value="${build.classes}/org/joda/time/tz/data"/>
   <property name="build.tests"             value="${build}/tests"/>
   <property name="build.docs"              value="${build}/docs"/>
+  <property name="build.srcide"            value="${build}/srcide"/>
   <property name="build.dist"              value="${build}/dist"/>
   <property name="build.fullname"          value="${build}/${component.fullname}"/>
   <property name="build.dist.fullname"     value="${build.dist}/${component.fullname}"/>
+  <property name="build.dist.src.fullname" value="${build.dist.fullname}-src"/>
 
   <property name="repo" value="${user.home}/.maven/repository" />
 
@@ -275,48 +277,76 @@
 
 <!-- ====================================================================== -->
 
-  <target name="dist" depends="compile,jar,test.jar,javadoc"
+  <target name="src.ide.zip">
+    <mkdir      dir="${build.srcide}"/>
+    <copy     todir="${build.srcide}">
+  	  <fileset dir="${source.home}" includes="**/*.java" />
+  	</copy>
+    <mkdir      dir="${build.srcide}/META-INF"/>
+    <copy      file="LICENSE.txt"
+             tofile="${build.srcide}/META-INF/LICENSE.txt"/>
+    <copy      file="NOTICE.txt"
+             tofile="${build.srcide}/META-INF/NOTICE.txt"/>
+    <jar    jarfile="${build.fullname}-src-ide.zip"
+            basedir="${build.srcide}" />
+  </target>
+
+<!-- ====================================================================== -->
+
+  <target name="dist" depends="compile,jar,test.jar,javadoc,src.ide.zip"
           description="Create binary distribution">
-    <delete     dir="${build.dist.fullname}"/>
-    <mkdir      dir="${build.dist.fullname}"/>
     
 	<!-- binary -->
+    <delete     dir="${build.dist.fullname}"/>
+    <mkdir      dir="${build.dist.fullname}"/>
     <copy      file="LICENSE.txt" todir="${build.dist.fullname}"/>
     <copy      file="NOTICE.txt" todir="${build.dist.fullname}"/>
     <copy      file="RELEASE-NOTES.txt" todir="${build.dist.fullname}"/>
     <copy      file="${build.fullname}.jar"
               todir="${build.dist.fullname}"/>
+    <copy      file="${build.fullname}-src-ide.zip"
+              todir="${build.dist.fullname}"/>
     <copy     todir="${build.dist.fullname}">
       <fileset  dir="${build}" includes="docs/**/*.*"/>
     </copy>
     
+	<fixcrlf srcdir="${build.dist.fullname}" eol="lf" includes="*.txt"/>
 	<tar   destfile="${build.fullname}.tar" basedir="${build.dist}"/>
 	<gzip   zipfile="${build.fullname}.tar.gz" src="${build.fullname}.tar"/>
 	<delete    file="${build.fullname}.tar"/>
-	<fixcrlf srcdir="${build.dist}" eol="crlf" includes="**/*.txt"/>
+	<fixcrlf srcdir="${build.dist.fullname}" eol="crlf" includes="*.txt"/>
 	<zip   destfile="${build.fullname}.zip" basedir="${build.dist}"/>
+    <delete     dir="${build.dist.fullname}"/>
 	
 	<!-- source -->
-	<delete     dir="${build.dist.fullname}/docs"/>
-    <copy     todir="${build.dist.fullname}">
+    <delete     dir="${build.dist.src.fullname}"/>
+    <mkdir      dir="${build.dist.src.fullname}"/>
+    <copy      file="LICENSE.txt" todir="${build.dist.src.fullname}"/>
+    <copy      file="NOTICE.txt" todir="${build.dist.src.fullname}"/>
+    <copy      file="RELEASE-NOTES.txt" todir="${build.dist.src.fullname}"/>
+    <copy      file="${build.fullname}.jar"
+              todir="${build.dist.src.fullname}"/>
+    <copy     todir="${build.dist.src.fullname}">
       <fileset  dir="." includes="${source}/**/*" excludes="CVS/**/*"/>
     </copy>
-    <copy     todir="${build.dist.fullname}">
+    <copy     todir="${build.dist.src.fullname}">
       <fileset  dir="." includes="${xdocs}/**/*" excludes="CVS/**/*"/>
     </copy>
-	<delete     dir="${build.dist.fullname}/src/tzdata"/>
-    <copy      file="build.xml" todir="${build.dist.fullname}"/>
-    <copy      file="maven.xml" todir="${build.dist.fullname}"/>
-    <copy      file="project.xml" todir="${build.dist.fullname}"/>
-    <copy      file="project.properties" todir="${build.dist.fullname}"/>
-    <copy      file="checkstyle.xml" todir="${build.dist.fullname}"/>
-    <copy      file="ToDo.txt" todir="${build.dist.fullname}"/>
+	<delete     dir="${build.dist.src.fullname}/src/tzdata"/>
+    <copy      file="build.xml" todir="${build.dist.src.fullname}"/>
+    <copy      file="maven.xml" todir="${build.dist.src.fullname}"/>
+    <copy      file="project.xml" todir="${build.dist.src.fullname}"/>
+    <copy      file="project.properties" todir="${build.dist.src.fullname}"/>
+    <copy      file="checkstyle.xml" todir="${build.dist.src.fullname}"/>
+    <copy      file="ToDo.txt" todir="${build.dist.src.fullname}"/>
 	
+	<fixcrlf srcdir="${build.dist.src.fullname}" eol="lf" includes="*.txt,*.properties,*.xml"/>
 	<tar   destfile="${build.fullname}-src.tar" basedir="${build.dist}"/>
 	<gzip   zipfile="${build.fullname}-src.tar.gz" src="${build.fullname}-src.tar"/>
 	<delete    file="${build.fullname}-src.tar"/>
-	<fixcrlf srcdir="${build.dist}" eol="crlf" includes="**/*.txt"/>
+	<fixcrlf srcdir="${build.dist.src.fullname}" eol="crlf" includes="*.txt,*.properties,*.xml"/>
 	<zip   destfile="${build.fullname}-src.zip" basedir="${build.dist}"/>
+    <delete     dir="${build.dist.src.fullname}"/>
   </target>
 
 <!-- ====================================================================== -->

From 9cf8aa32ffd492f437db0c5da6076ccd09ffb109 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Tue, 6 Dec 2005 06:27:17 +0000
Subject: [PATCH 108/130] Updated tz data to version 2005p.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@965 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  2 +-
 .../src/java/org/joda/time/tz/src/Readme.txt  |  2 +-
 .../src/java/org/joda/time/tz/src/systemv     | 34 ++++--------
 JodaTime/xdocs/timezones.xml                  | 54 +++++++++----------
 4 files changed, 38 insertions(+), 54 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 5326f3196..2911ca943 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -32,7 +32,7 @@ Serialization compatible - Yes
   - v1.1 did not serialize the Chronology minimum days in first week field properly, v1.2 does
 
 Data compatible - Yes
-  - DateTimeZone data updated to 2005o
+  - DateTimeZone data updated to version 2005p
 
 
 Deprecations since 1.1
diff --git a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
index 3b20d5e2d..f82c36d61 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
+++ b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
@@ -1,2 +1,2 @@
 The data files in this directory were obtained from the public tz database,
-http://www.twinsun.com/tz/tz-link.htm, version 2005o.
+http://www.twinsun.com/tz/tz-link.htm, version 2005p.
diff --git a/JodaTime/src/java/org/joda/time/tz/src/systemv b/JodaTime/src/java/org/joda/time/tz/src/systemv
index 2f75312e7..31f0224b2 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/systemv
+++ b/JodaTime/src/java/org/joda/time/tz/src/systemv
@@ -1,4 +1,4 @@
-# @(#)systemv	7.3
+# @(#)systemv	7.4
 
 # Old rules, should the need arise.
 # No attempt is made to handle Newfoundland, since it cannot be expressed
@@ -7,18 +7,18 @@
 # the change in the DST rules in the US in 1987 (which occurred before
 # the old rules were written).
 #
-# If you need the old rules, uncomment ## lines and comment-out Link lines.
+# If you need the old rules, uncomment ## lines.
 # Compile this *without* leap second correction for true conformance.
 
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-## Rule	SystemV	min	1973	-	Apr	lastSun	2:00	1:00	D
-## Rule	SystemV	min	1973	-	Oct	lastSun	2:00	0	S
-## Rule	SystemV	1974	only	-	Jan	6	2:00	1:00	D
-## Rule	SystemV	1974	only	-	Nov	lastSun	2:00	0	S
-## Rule	SystemV	1975	only	-	Feb	23	2:00	1:00	D
-## Rule	SystemV	1975	only	-	Oct	lastSun	2:00	0	S
-## Rule	SystemV	1976	max	-	Apr	lastSun	2:00	1:00	D
-## Rule	SystemV	1976	max	-	Oct	lastSun	2:00	0	S
+Rule	SystemV	min	1973	-	Apr	lastSun	2:00	1:00	D
+Rule	SystemV	min	1973	-	Oct	lastSun	2:00	0	S
+Rule	SystemV	1974	only	-	Jan	6	2:00	1:00	D
+Rule	SystemV	1974	only	-	Nov	lastSun	2:00	0	S
+Rule	SystemV	1975	only	-	Feb	23	2:00	1:00	D
+Rule	SystemV	1975	only	-	Oct	lastSun	2:00	0	S
+Rule	SystemV	1976	max	-	Apr	lastSun	2:00	1:00	D
+Rule	SystemV	1976	max	-	Oct	lastSun	2:00	0	S
 
 # Zone	NAME		GMTOFF	RULES/SAVE	FORMAT	[UNTIL]
 ## Zone	SystemV/AST4ADT	-4:00	SystemV		A%sT
@@ -34,17 +34,3 @@
 ## Zone	SystemV/PST8	-8:00	-		PST
 ## Zone	SystemV/YST9	-9:00	-		YST
 ## Zone	SystemV/HST10	-10:00	-		HST
-# For now...
-Link	America/Halifax		SystemV/AST4ADT
-Link	America/New_York	SystemV/EST5EDT
-Link	America/Chicago		SystemV/CST6CDT
-Link	America/Denver		SystemV/MST7MDT
-Link	America/Los_Angeles	SystemV/PST8PDT
-Link	America/Anchorage	SystemV/YST9YDT
-Link	America/Puerto_Rico	SystemV/AST4
-Link	America/Indianapolis	SystemV/EST5
-Link	America/Regina		SystemV/CST6
-Link	America/Phoenix		SystemV/MST7
-Link	Pacific/Pitcairn	SystemV/PST8
-Link	Pacific/Gambier		SystemV/YST9
-Link	Pacific/Honolulu	SystemV/HST10
diff --git a/JodaTime/xdocs/timezones.xml b/JodaTime/xdocs/timezones.xml
index 9ca47c1f9..a263bbe48 100644
--- a/JodaTime/xdocs/timezones.xml
+++ b/JodaTime/xdocs/timezones.xml
@@ -13,7 +13,7 @@
 <p>
 Time zone data is provided by the public <a href="http://www.twinsun.com/tz/tz-link.htm">tz</a>
 database, otherwise known as the Olson database. The following table shows all the time zones
-supported by Joda-Time, using version 2005i of the tz database. This table can be rebuilt
+supported by Joda-Time, using version 2005p of the tz database. This table can be rebuilt
 by running <code>org.joda.example.time.TimeZoneTable</code>.
 </p>
 <p>
@@ -28,39 +28,39 @@ by running <code>org.joda.example.time.TimeZoneTable</code>.
 <tr><td align="left" valign="top">-10:00</td><td align="left" valign="top">America/Adak</td><td align="left" valign="top">America/Atka, US/Aleutian</td></tr>
 <tr><td align="left" valign="top">-10:00</td><td align="left" valign="top">Etc/GMT+10</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-10:00</td><td align="left" valign="top">Pacific/Fakaofo</td><td align="left" valign="top"></td></tr>
-<tr><td align="left" valign="top">-10:00</td><td align="left" valign="top">Pacific/Honolulu</td><td align="left" valign="top">HST, SystemV/HST10, US/Hawaii</td></tr>
+<tr><td align="left" valign="top">-10:00</td><td align="left" valign="top">Pacific/Honolulu</td><td align="left" valign="top">HST, US/Hawaii</td></tr>
 <tr><td align="left" valign="top">-10:00</td><td align="left" valign="top">Pacific/Johnston</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-10:00</td><td align="left" valign="top">Pacific/Rarotonga</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-10:00</td><td align="left" valign="top">Pacific/Tahiti</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-09:30</td><td align="left" valign="top">Pacific/Marquesas</td><td align="left" valign="top"></td></tr>
-<tr><td align="left" valign="top">-09:00</td><td align="left" valign="top">America/Anchorage</td><td align="left" valign="top">SystemV/YST9YDT, US/Alaska</td></tr>
+<tr><td align="left" valign="top">-09:00</td><td align="left" valign="top">America/Anchorage</td><td align="left" valign="top">US/Alaska</td></tr>
 <tr><td align="left" valign="top">-09:00</td><td align="left" valign="top">America/Juneau</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-09:00</td><td align="left" valign="top">America/Nome</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-09:00</td><td align="left" valign="top">America/Yakutat</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-09:00</td><td align="left" valign="top">Etc/GMT+9</td><td align="left" valign="top"></td></tr>
-<tr><td align="left" valign="top">-09:00</td><td align="left" valign="top">Pacific/Gambier</td><td align="left" valign="top">SystemV/YST9</td></tr>
+<tr><td align="left" valign="top">-09:00</td><td align="left" valign="top">Pacific/Gambier</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-08:00</td><td align="left" valign="top">America/Dawson</td><td align="left" valign="top"></td></tr>
-<tr><td align="left" valign="top">-08:00</td><td align="left" valign="top">America/Los_Angeles</td><td align="left" valign="top">PST8PDT, SystemV/PST8PDT, US/Pacific, US/Pacific-New</td></tr>
+<tr><td align="left" valign="top">-08:00</td><td align="left" valign="top">America/Los_Angeles</td><td align="left" valign="top">PST8PDT, US/Pacific, US/Pacific-New</td></tr>
 <tr><td align="left" valign="top">-08:00</td><td align="left" valign="top">America/Tijuana</td><td align="left" valign="top">America/Ensenada, Mexico/BajaNorte</td></tr>
 <tr><td align="left" valign="top">-08:00</td><td align="left" valign="top">America/Vancouver</td><td align="left" valign="top">Canada/Pacific</td></tr>
 <tr><td align="left" valign="top">-08:00</td><td align="left" valign="top">America/Whitehorse</td><td align="left" valign="top">Canada/Yukon</td></tr>
 <tr><td align="left" valign="top">-08:00</td><td align="left" valign="top">Etc/GMT+8</td><td align="left" valign="top"></td></tr>
-<tr><td align="left" valign="top">-08:00</td><td align="left" valign="top">Pacific/Pitcairn</td><td align="left" valign="top">SystemV/PST8</td></tr>
+<tr><td align="left" valign="top">-08:00</td><td align="left" valign="top">Pacific/Pitcairn</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-07:00</td><td align="left" valign="top">America/Boise</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-07:00</td><td align="left" valign="top">America/Cambridge_Bay</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-07:00</td><td align="left" valign="top">America/Chihuahua</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-07:00</td><td align="left" valign="top">America/Dawson_Creek</td><td align="left" valign="top"></td></tr>
-<tr><td align="left" valign="top">-07:00</td><td align="left" valign="top">America/Denver</td><td align="left" valign="top">America/Shiprock, MST7MDT, Navajo, SystemV/MST7MDT, US/Mountain</td></tr>
+<tr><td align="left" valign="top">-07:00</td><td align="left" valign="top">America/Denver</td><td align="left" valign="top">America/Shiprock, MST7MDT, Navajo, US/Mountain</td></tr>
 <tr><td align="left" valign="top">-07:00</td><td align="left" valign="top">America/Edmonton</td><td align="left" valign="top">Canada/Mountain</td></tr>
 <tr><td align="left" valign="top">-07:00</td><td align="left" valign="top">America/Hermosillo</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-07:00</td><td align="left" valign="top">America/Inuvik</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-07:00</td><td align="left" valign="top">America/Mazatlan</td><td align="left" valign="top">Mexico/BajaSur</td></tr>
-<tr><td align="left" valign="top">-07:00</td><td align="left" valign="top">America/Phoenix</td><td align="left" valign="top">MST, SystemV/MST7, US/Arizona</td></tr>
+<tr><td align="left" valign="top">-07:00</td><td align="left" valign="top">America/Phoenix</td><td align="left" valign="top">MST, US/Arizona</td></tr>
 <tr><td align="left" valign="top">-07:00</td><td align="left" valign="top">America/Yellowknife</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-07:00</td><td align="left" valign="top">Etc/GMT+7</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-06:00</td><td align="left" valign="top">America/Belize</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-06:00</td><td align="left" valign="top">America/Cancun</td><td align="left" valign="top"></td></tr>
-<tr><td align="left" valign="top">-06:00</td><td align="left" valign="top">America/Chicago</td><td align="left" valign="top">CST6CDT, SystemV/CST6CDT, US/Central</td></tr>
+<tr><td align="left" valign="top">-06:00</td><td align="left" valign="top">America/Chicago</td><td align="left" valign="top">CST6CDT, US/Central</td></tr>
 <tr><td align="left" valign="top">-06:00</td><td align="left" valign="top">America/Costa_Rica</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-06:00</td><td align="left" valign="top">America/El_Salvador</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-06:00</td><td align="left" valign="top">America/Guatemala</td><td align="left" valign="top"></td></tr>
@@ -72,7 +72,7 @@ by running <code>org.joda.example.time.TimeZoneTable</code>.
 <tr><td align="left" valign="top">-06:00</td><td align="left" valign="top">America/North_Dakota/Center</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-06:00</td><td align="left" valign="top">America/Rainy_River</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-06:00</td><td align="left" valign="top">America/Rankin_Inlet</td><td align="left" valign="top"></td></tr>
-<tr><td align="left" valign="top">-06:00</td><td align="left" valign="top">America/Regina</td><td align="left" valign="top">Canada/East-Saskatchewan, Canada/Saskatchewan, SystemV/CST6</td></tr>
+<tr><td align="left" valign="top">-06:00</td><td align="left" valign="top">America/Regina</td><td align="left" valign="top">Canada/East-Saskatchewan, Canada/Saskatchewan</td></tr>
 <tr><td align="left" valign="top">-06:00</td><td align="left" valign="top">America/Swift_Current</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-06:00</td><td align="left" valign="top">America/Tegucigalpa</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-06:00</td><td align="left" valign="top">America/Winnipeg</td><td align="left" valign="top">Canada/Central</td></tr>
@@ -81,25 +81,26 @@ by running <code>org.joda.example.time.TimeZoneTable</code>.
 <tr><td align="left" valign="top">-06:00</td><td align="left" valign="top">Pacific/Galapagos</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Bogota</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Cayman</td><td align="left" valign="top"></td></tr>
+<tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Coral_Harbour</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Detroit</td><td align="left" valign="top">US/Michigan</td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Eirunepe</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Grand_Turk</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Guayaquil</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Havana</td><td align="left" valign="top">Cuba</td></tr>
+<tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Indiana/Indianapolis</td><td align="left" valign="top">America/Fort_Wayne, America/Indianapolis, US/East-Indiana</td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Indiana/Knox</td><td align="left" valign="top">America/Knox_IN, US/Indiana-Starke</td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Indiana/Marengo</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Indiana/Vevay</td><td align="left" valign="top"></td></tr>
-<tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Indianapolis</td><td align="left" valign="top">America/Fort_Wayne, America/Indiana/Indianapolis, EST, SystemV/EST5, US/East-Indiana</td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Iqaluit</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Jamaica</td><td align="left" valign="top">Jamaica</td></tr>
+<tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Kentucky/Louisville</td><td align="left" valign="top">America/Louisville</td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Kentucky/Monticello</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Lima</td><td align="left" valign="top"></td></tr>
-<tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Louisville</td><td align="left" valign="top">America/Kentucky/Louisville</td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Montreal</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Nassau</td><td align="left" valign="top"></td></tr>
-<tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/New_York</td><td align="left" valign="top">EST5EDT, SystemV/EST5EDT, US/Eastern</td></tr>
+<tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/New_York</td><td align="left" valign="top">EST5EDT, US/Eastern</td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Nipigon</td><td align="left" valign="top"></td></tr>
-<tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Panama</td><td align="left" valign="top"></td></tr>
+<tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Panama</td><td align="left" valign="top">EST</td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Pangnirtung</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Port-au-Prince</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Rio_Branco</td><td align="left" valign="top">America/Porto_Acre, Brazil/Acre</td></tr>
@@ -122,14 +123,14 @@ by running <code>org.joda.example.time.TimeZoneTable</code>.
 <tr><td align="left" valign="top">-04:00</td><td align="left" valign="top">America/Grenada</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-04:00</td><td align="left" valign="top">America/Guadeloupe</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-04:00</td><td align="left" valign="top">America/Guyana</td><td align="left" valign="top"></td></tr>
-<tr><td align="left" valign="top">-04:00</td><td align="left" valign="top">America/Halifax</td><td align="left" valign="top">Canada/Atlantic, SystemV/AST4ADT</td></tr>
+<tr><td align="left" valign="top">-04:00</td><td align="left" valign="top">America/Halifax</td><td align="left" valign="top">Canada/Atlantic</td></tr>
 <tr><td align="left" valign="top">-04:00</td><td align="left" valign="top">America/La_Paz</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-04:00</td><td align="left" valign="top">America/Manaus</td><td align="left" valign="top">Brazil/West</td></tr>
 <tr><td align="left" valign="top">-04:00</td><td align="left" valign="top">America/Martinique</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-04:00</td><td align="left" valign="top">America/Montserrat</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-04:00</td><td align="left" valign="top">America/Port_of_Spain</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-04:00</td><td align="left" valign="top">America/Porto_Velho</td><td align="left" valign="top"></td></tr>
-<tr><td align="left" valign="top">-04:00</td><td align="left" valign="top">America/Puerto_Rico</td><td align="left" valign="top">SystemV/AST4</td></tr>
+<tr><td align="left" valign="top">-04:00</td><td align="left" valign="top">America/Puerto_Rico</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-04:00</td><td align="left" valign="top">America/Santiago</td><td align="left" valign="top">Chile/Continental</td></tr>
 <tr><td align="left" valign="top">-04:00</td><td align="left" valign="top">America/Santo_Domingo</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-04:00</td><td align="left" valign="top">America/St_Kitts</td><td align="left" valign="top"></td></tr>
@@ -145,8 +146,7 @@ by running <code>org.joda.example.time.TimeZoneTable</code>.
 <tr><td align="left" valign="top">-03:30</td><td align="left" valign="top">America/St_Johns</td><td align="left" valign="top">Canada/Newfoundland</td></tr>
 <tr><td align="left" valign="top">-03:00</td><td align="left" valign="top">America/Araguaina</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-03:00</td><td align="left" valign="top">America/Argentina/Buenos_Aires</td><td align="left" valign="top">America/Buenos_Aires</td></tr>
-<tr><td align="left" valign="top">-03:00</td><td align="left" valign="top">America/Argentina/Catamarca</td><td align="left" valign="top">America/Catamarca</td></tr>
-<tr><td align="left" valign="top">-03:00</td><td align="left" valign="top">America/Argentina/ComodRivadavia</td><td align="left" valign="top"></td></tr>
+<tr><td align="left" valign="top">-03:00</td><td align="left" valign="top">America/Argentina/Catamarca</td><td align="left" valign="top">America/Argentina/ComodRivadavia, America/Catamarca</td></tr>
 <tr><td align="left" valign="top">-03:00</td><td align="left" valign="top">America/Argentina/Cordoba</td><td align="left" valign="top">America/Cordoba, America/Rosario</td></tr>
 <tr><td align="left" valign="top">-03:00</td><td align="left" valign="top">America/Argentina/Jujuy</td><td align="left" valign="top">America/Jujuy</td></tr>
 <tr><td align="left" valign="top">-03:00</td><td align="left" valign="top">America/Argentina/La_Rioja</td><td align="left" valign="top"></td></tr>
@@ -177,7 +177,7 @@ by running <code>org.joda.example.time.TimeZoneTable</code>.
 <tr><td align="left" valign="top">-01:00</td><td align="left" valign="top">Etc/GMT+1</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+00:00</td><td align="left" valign="top">Africa/Abidjan</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+00:00</td><td align="left" valign="top">Africa/Accra</td><td align="left" valign="top"></td></tr>
-<tr><td align="left" valign="top">+00:00</td><td align="left" valign="top">Africa/Bamako</td><td align="left" valign="top"></td></tr>
+<tr><td align="left" valign="top">+00:00</td><td align="left" valign="top">Africa/Bamako</td><td align="left" valign="top">Africa/Timbuktu</td></tr>
 <tr><td align="left" valign="top">+00:00</td><td align="left" valign="top">Africa/Banjul</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+00:00</td><td align="left" valign="top">Africa/Bissau</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+00:00</td><td align="left" valign="top">Africa/Casablanca</td><td align="left" valign="top"></td></tr>
@@ -190,7 +190,6 @@ by running <code>org.joda.example.time.TimeZoneTable</code>.
 <tr><td align="left" valign="top">+00:00</td><td align="left" valign="top">Africa/Nouakchott</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+00:00</td><td align="left" valign="top">Africa/Ouagadougou</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+00:00</td><td align="left" valign="top">Africa/Sao_Tome</td><td align="left" valign="top"></td></tr>
-<tr><td align="left" valign="top">+00:00</td><td align="left" valign="top">Africa/Timbuktu</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+00:00</td><td align="left" valign="top">America/Danmarkshavn</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+00:00</td><td align="left" valign="top">Atlantic/Canary</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+00:00</td><td align="left" valign="top">Atlantic/Faeroe</td><td align="left" valign="top"></td></tr>
@@ -200,10 +199,9 @@ by running <code>org.joda.example.time.TimeZoneTable</code>.
 <tr><td align="left" valign="top">+00:00</td><td align="left" valign="top">Etc/GMT</td><td align="left" valign="top">Etc/GMT+0, Etc/GMT-0, Etc/GMT0, Etc/Greenwich, GMT, GMT+0, GMT-0, GMT0, Greenwich</td></tr>
 <tr><td align="left" valign="top">+00:00</td><td align="left" valign="top">Etc/UCT</td><td align="left" valign="top">UCT</td></tr>
 <tr><td align="left" valign="top">+00:00</td><td align="left" valign="top">Etc/UTC</td><td align="left" valign="top">Etc/Universal, Etc/Zulu, Universal, Zulu</td></tr>
-<tr><td align="left" valign="top">+00:00</td><td align="left" valign="top">Europe/Belfast</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+00:00</td><td align="left" valign="top">Europe/Dublin</td><td align="left" valign="top">Eire</td></tr>
 <tr><td align="left" valign="top">+00:00</td><td align="left" valign="top">Europe/Lisbon</td><td align="left" valign="top">Portugal</td></tr>
-<tr><td align="left" valign="top">+00:00</td><td align="left" valign="top">Europe/London</td><td align="left" valign="top">GB, GB-Eire</td></tr>
+<tr><td align="left" valign="top">+00:00</td><td align="left" valign="top">Europe/London</td><td align="left" valign="top">Europe/Belfast, GB, GB-Eire</td></tr>
 <tr><td align="left" valign="top">+00:00</td><td align="left" valign="top">UTC</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+00:00</td><td align="left" valign="top">WET</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+01:00</td><td align="left" valign="top">Africa/Algiers</td><td align="left" valign="top"></td></tr>
@@ -297,18 +295,16 @@ by running <code>org.joda.example.time.TimeZoneTable</code>.
 <tr><td align="left" valign="top">+03:00</td><td align="left" valign="top">Asia/Kuwait</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+03:00</td><td align="left" valign="top">Asia/Qatar</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+03:00</td><td align="left" valign="top">Asia/Riyadh</td><td align="left" valign="top"></td></tr>
-<tr><td align="left" valign="top">+03:00</td><td align="left" valign="top">Asia/Tbilisi</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+03:00</td><td align="left" valign="top">Etc/GMT-3</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+03:00</td><td align="left" valign="top">Europe/Moscow</td><td align="left" valign="top">W-SU</td></tr>
 <tr><td align="left" valign="top">+03:00</td><td align="left" valign="top">Indian/Antananarivo</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+03:00</td><td align="left" valign="top">Indian/Comoro</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+03:00</td><td align="left" valign="top">Indian/Mayotte</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+03:30</td><td align="left" valign="top">Asia/Tehran</td><td align="left" valign="top">Iran</td></tr>
-<tr><td align="left" valign="top">+04:00</td><td align="left" valign="top">Asia/Aqtau</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+04:00</td><td align="left" valign="top">Asia/Baku</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+04:00</td><td align="left" valign="top">Asia/Dubai</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+04:00</td><td align="left" valign="top">Asia/Muscat</td><td align="left" valign="top"></td></tr>
-<tr><td align="left" valign="top">+04:00</td><td align="left" valign="top">Asia/Oral</td><td align="left" valign="top"></td></tr>
+<tr><td align="left" valign="top">+04:00</td><td align="left" valign="top">Asia/Tbilisi</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+04:00</td><td align="left" valign="top">Asia/Yerevan</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+04:00</td><td align="left" valign="top">Etc/GMT-4</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+04:00</td><td align="left" valign="top">Europe/Samara</td><td align="left" valign="top"></td></tr>
@@ -316,11 +312,12 @@ by running <code>org.joda.example.time.TimeZoneTable</code>.
 <tr><td align="left" valign="top">+04:00</td><td align="left" valign="top">Indian/Mauritius</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+04:00</td><td align="left" valign="top">Indian/Reunion</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+04:30</td><td align="left" valign="top">Asia/Kabul</td><td align="left" valign="top"></td></tr>
+<tr><td align="left" valign="top">+05:00</td><td align="left" valign="top">Asia/Aqtau</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+05:00</td><td align="left" valign="top">Asia/Aqtobe</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+05:00</td><td align="left" valign="top">Asia/Ashgabat</td><td align="left" valign="top">Asia/Ashkhabad</td></tr>
-<tr><td align="left" valign="top">+05:00</td><td align="left" valign="top">Asia/Bishkek</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+05:00</td><td align="left" valign="top">Asia/Dushanbe</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+05:00</td><td align="left" valign="top">Asia/Karachi</td><td align="left" valign="top"></td></tr>
+<tr><td align="left" valign="top">+05:00</td><td align="left" valign="top">Asia/Oral</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+05:00</td><td align="left" valign="top">Asia/Samarkand</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+05:00</td><td align="left" valign="top">Asia/Tashkent</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+05:00</td><td align="left" valign="top">Asia/Yekaterinburg</td><td align="left" valign="top"></td></tr>
@@ -332,6 +329,7 @@ by running <code>org.joda.example.time.TimeZoneTable</code>.
 <tr><td align="left" valign="top">+06:00</td><td align="left" valign="top">Antarctica/Mawson</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+06:00</td><td align="left" valign="top">Antarctica/Vostok</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+06:00</td><td align="left" valign="top">Asia/Almaty</td><td align="left" valign="top"></td></tr>
+<tr><td align="left" valign="top">+06:00</td><td align="left" valign="top">Asia/Bishkek</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+06:00</td><td align="left" valign="top">Asia/Colombo</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+06:00</td><td align="left" valign="top">Asia/Dhaka</td><td align="left" valign="top">Asia/Dacca</td></tr>
 <tr><td align="left" valign="top">+06:00</td><td align="left" valign="top">Asia/Novosibirsk</td><td align="left" valign="top"></td></tr>
@@ -388,6 +386,7 @@ by running <code>org.joda.example.time.TimeZoneTable</code>.
 <tr><td align="left" valign="top">+10:00</td><td align="left" valign="top">Asia/Sakhalin</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+10:00</td><td align="left" valign="top">Asia/Vladivostok</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+10:00</td><td align="left" valign="top">Australia/Brisbane</td><td align="left" valign="top">Australia/Queensland</td></tr>
+<tr><td align="left" valign="top">+10:00</td><td align="left" valign="top">Australia/Currie</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+10:00</td><td align="left" valign="top">Australia/Hobart</td><td align="left" valign="top">Australia/Tasmania</td></tr>
 <tr><td align="left" valign="top">+10:00</td><td align="left" valign="top">Australia/Lindeman</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+10:00</td><td align="left" valign="top">Australia/Melbourne</td><td align="left" valign="top">Australia/Victoria</td></tr>
@@ -396,8 +395,7 @@ by running <code>org.joda.example.time.TimeZoneTable</code>.
 <tr><td align="left" valign="top">+10:00</td><td align="left" valign="top">Pacific/Guam</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+10:00</td><td align="left" valign="top">Pacific/Port_Moresby</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+10:00</td><td align="left" valign="top">Pacific/Saipan</td><td align="left" valign="top"></td></tr>
-<tr><td align="left" valign="top">+10:00</td><td align="left" valign="top">Pacific/Truk</td><td align="left" valign="top"></td></tr>
-<tr><td align="left" valign="top">+10:00</td><td align="left" valign="top">Pacific/Yap</td><td align="left" valign="top"></td></tr>
+<tr><td align="left" valign="top">+10:00</td><td align="left" valign="top">Pacific/Truk</td><td align="left" valign="top">Pacific/Yap</td></tr>
 <tr><td align="left" valign="top">+10:30</td><td align="left" valign="top">Australia/Lord_Howe</td><td align="left" valign="top">Australia/LHI</td></tr>
 <tr><td align="left" valign="top">+11:00</td><td align="left" valign="top">Asia/Magadan</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+11:00</td><td align="left" valign="top">Etc/GMT-11</td><td align="left" valign="top"></td></tr>

From 68f5265689941b2a3d2251cba5dcec557ef8f7cb Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 6 Dec 2005 22:43:46 +0000
Subject: [PATCH 109/130] Help tests compile on JDK1.5 without warnings

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@966 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../test/org/joda/time/convert/MockUnknownCalendar.java   | 8 +-------
 .../test/org/joda/time/convert/TestCalendarConverter.java | 2 +-
 .../test/org/joda/time/convert/TestConverterManager.java  | 2 +-
 .../src/test/org/joda/time/convert/TestDateConverter.java | 2 +-
 .../src/test/org/joda/time/convert/TestLongConverter.java | 2 +-
 .../src/test/org/joda/time/convert/TestNullConverter.java | 2 +-
 .../joda/time/convert/TestReadableDurationConverter.java  | 2 +-
 .../joda/time/convert/TestReadableInstantConverter.java   | 2 +-
 .../joda/time/convert/TestReadableIntervalConverter.java  | 2 +-
 .../joda/time/convert/TestReadablePartialConverter.java   | 2 +-
 .../joda/time/convert/TestReadablePeriodConverter.java    | 2 +-
 .../test/org/joda/time/convert/TestStringConverter.java   | 2 +-
 JodaTime/src/test/org/joda/time/tz/TestUTCProvider.java   | 2 +-
 13 files changed, 13 insertions(+), 19 deletions(-)

diff --git a/JodaTime/src/test/org/joda/time/convert/MockUnknownCalendar.java b/JodaTime/src/test/org/joda/time/convert/MockUnknownCalendar.java
index 8c30a41f5..c3f96620e 100644
--- a/JodaTime/src/test/org/joda/time/convert/MockUnknownCalendar.java
+++ b/JodaTime/src/test/org/joda/time/convert/MockUnknownCalendar.java
@@ -62,11 +62,5 @@ public int getGreatestMinimum(int field) {
     public int getLeastMaximum(int field) {
         return 0;
     }
-    public int compareTo(Object arg0) {
-        return 0;
-    }
-    public int compareTo(Calendar arg0) {
-        return 0;
-    }
-    
+
 }
diff --git a/JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java b/JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java
index c49f3f0a7..3c41c4b1c 100644
--- a/JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java
+++ b/JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java
@@ -72,7 +72,7 @@ public void testSingleton() throws Exception {
         assertEquals(false, Modifier.isProtected(cls.getModifiers()));
         assertEquals(false, Modifier.isPrivate(cls.getModifiers()));
         
-        Constructor con = cls.getDeclaredConstructor(null);
+        Constructor con = cls.getDeclaredConstructor((Class[]) null);
         assertEquals(1, cls.getDeclaredConstructors().length);
         assertEquals(true, Modifier.isProtected(con.getModifiers()));
         
diff --git a/JodaTime/src/test/org/joda/time/convert/TestConverterManager.java b/JodaTime/src/test/org/joda/time/convert/TestConverterManager.java
index cfb81975e..039033ba1 100644
--- a/JodaTime/src/test/org/joda/time/convert/TestConverterManager.java
+++ b/JodaTime/src/test/org/joda/time/convert/TestConverterManager.java
@@ -118,7 +118,7 @@ public void testSingleton() throws Exception {
         Class cls = ConverterManager.class;
         assertEquals(true, Modifier.isPublic(cls.getModifiers()));
         
-        Constructor con = cls.getDeclaredConstructor(null);
+        Constructor con = cls.getDeclaredConstructor((Class[]) null);
         assertEquals(1, cls.getDeclaredConstructors().length);
         assertEquals(true, Modifier.isProtected(con.getModifiers()));
         
diff --git a/JodaTime/src/test/org/joda/time/convert/TestDateConverter.java b/JodaTime/src/test/org/joda/time/convert/TestDateConverter.java
index 0a4198362..ba4d1b5ee 100644
--- a/JodaTime/src/test/org/joda/time/convert/TestDateConverter.java
+++ b/JodaTime/src/test/org/joda/time/convert/TestDateConverter.java
@@ -69,7 +69,7 @@ public void testSingleton() throws Exception {
         assertEquals(false, Modifier.isProtected(cls.getModifiers()));
         assertEquals(false, Modifier.isPrivate(cls.getModifiers()));
         
-        Constructor con = cls.getDeclaredConstructor(null);
+        Constructor con = cls.getDeclaredConstructor((Class[]) null);
         assertEquals(1, cls.getDeclaredConstructors().length);
         assertEquals(true, Modifier.isProtected(con.getModifiers()));
         
diff --git a/JodaTime/src/test/org/joda/time/convert/TestLongConverter.java b/JodaTime/src/test/org/joda/time/convert/TestLongConverter.java
index ad45b1854..e7cbe49c9 100644
--- a/JodaTime/src/test/org/joda/time/convert/TestLongConverter.java
+++ b/JodaTime/src/test/org/joda/time/convert/TestLongConverter.java
@@ -68,7 +68,7 @@ public void testSingleton() throws Exception {
         assertEquals(false, Modifier.isProtected(cls.getModifiers()));
         assertEquals(false, Modifier.isPrivate(cls.getModifiers()));
         
-        Constructor con = cls.getDeclaredConstructor(null);
+        Constructor con = cls.getDeclaredConstructor((Class[]) null);
         assertEquals(1, cls.getDeclaredConstructors().length);
         assertEquals(true, Modifier.isProtected(con.getModifiers()));
         
diff --git a/JodaTime/src/test/org/joda/time/convert/TestNullConverter.java b/JodaTime/src/test/org/joda/time/convert/TestNullConverter.java
index 26373c0ac..2319fe0f6 100644
--- a/JodaTime/src/test/org/joda/time/convert/TestNullConverter.java
+++ b/JodaTime/src/test/org/joda/time/convert/TestNullConverter.java
@@ -105,7 +105,7 @@ public void testSingleton() throws Exception {
         assertEquals(false, Modifier.isProtected(cls.getModifiers()));
         assertEquals(false, Modifier.isPrivate(cls.getModifiers()));
         
-        Constructor con = cls.getDeclaredConstructor(null);
+        Constructor con = cls.getDeclaredConstructor((Class[]) null);
         assertEquals(1, cls.getDeclaredConstructors().length);
         assertEquals(true, Modifier.isProtected(con.getModifiers()));
         
diff --git a/JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java b/JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java
index 5daa2d928..25143ba42 100644
--- a/JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java
+++ b/JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java
@@ -71,7 +71,7 @@ public void testSingleton() throws Exception {
         assertEquals(false, Modifier.isProtected(cls.getModifiers()));
         assertEquals(false, Modifier.isPrivate(cls.getModifiers()));
         
-        Constructor con = cls.getDeclaredConstructor(null);
+        Constructor con = cls.getDeclaredConstructor((Class[]) null);
         assertEquals(1, cls.getDeclaredConstructors().length);
         assertEquals(true, Modifier.isProtected(con.getModifiers()));
         
diff --git a/JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java b/JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java
index d3860ec80..8b73241cb 100644
--- a/JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java
+++ b/JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java
@@ -72,7 +72,7 @@ public void testSingleton() throws Exception {
         assertEquals(false, Modifier.isProtected(cls.getModifiers()));
         assertEquals(false, Modifier.isPrivate(cls.getModifiers()));
         
-        Constructor con = cls.getDeclaredConstructor(null);
+        Constructor con = cls.getDeclaredConstructor((Class[]) null);
         assertEquals(1, cls.getDeclaredConstructors().length);
         assertEquals(true, Modifier.isProtected(con.getModifiers()));
         
diff --git a/JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java b/JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java
index e650ff6a1..709d6a902 100644
--- a/JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java
+++ b/JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java
@@ -74,7 +74,7 @@ public void testSingleton() throws Exception {
         assertEquals(false, Modifier.isProtected(cls.getModifiers()));
         assertEquals(false, Modifier.isPrivate(cls.getModifiers()));
         
-        Constructor con = cls.getDeclaredConstructor(null);
+        Constructor con = cls.getDeclaredConstructor((Class[]) null);
         assertEquals(1, cls.getDeclaredConstructors().length);
         assertEquals(true, Modifier.isProtected(con.getModifiers()));
         
diff --git a/JodaTime/src/test/org/joda/time/convert/TestReadablePartialConverter.java b/JodaTime/src/test/org/joda/time/convert/TestReadablePartialConverter.java
index 47db9b789..285099b19 100644
--- a/JodaTime/src/test/org/joda/time/convert/TestReadablePartialConverter.java
+++ b/JodaTime/src/test/org/joda/time/convert/TestReadablePartialConverter.java
@@ -75,7 +75,7 @@ public void testSingleton() throws Exception {
         assertEquals(false, Modifier.isProtected(cls.getModifiers()));
         assertEquals(false, Modifier.isPrivate(cls.getModifiers()));
         
-        Constructor con = cls.getDeclaredConstructor(null);
+        Constructor con = cls.getDeclaredConstructor((Class[]) null);
         assertEquals(1, cls.getDeclaredConstructors().length);
         assertEquals(true, Modifier.isProtected(con.getModifiers()));
         
diff --git a/JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java b/JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java
index 1f705c886..8ec081857 100644
--- a/JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java
+++ b/JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java
@@ -70,7 +70,7 @@ public void testSingleton() throws Exception {
         assertEquals(false, Modifier.isProtected(cls.getModifiers()));
         assertEquals(false, Modifier.isPrivate(cls.getModifiers()));
         
-        Constructor con = cls.getDeclaredConstructor(null);
+        Constructor con = cls.getDeclaredConstructor((Class[]) null);
         assertEquals(1, cls.getDeclaredConstructors().length);
         assertEquals(true, Modifier.isProtected(con.getModifiers()));
         
diff --git a/JodaTime/src/test/org/joda/time/convert/TestStringConverter.java b/JodaTime/src/test/org/joda/time/convert/TestStringConverter.java
index a3c9e49f1..af7f9cff9 100644
--- a/JodaTime/src/test/org/joda/time/convert/TestStringConverter.java
+++ b/JodaTime/src/test/org/joda/time/convert/TestStringConverter.java
@@ -93,7 +93,7 @@ public void testSingleton() throws Exception {
         assertEquals(false, Modifier.isProtected(cls.getModifiers()));
         assertEquals(false, Modifier.isPrivate(cls.getModifiers()));
         
-        Constructor con = cls.getDeclaredConstructor(null);
+        Constructor con = cls.getDeclaredConstructor((Class[]) null);
         assertEquals(1, cls.getDeclaredConstructors().length);
         assertEquals(true, Modifier.isProtected(con.getModifiers()));
         
diff --git a/JodaTime/src/test/org/joda/time/tz/TestUTCProvider.java b/JodaTime/src/test/org/joda/time/tz/TestUTCProvider.java
index fa9f3e47e..6d23287b3 100644
--- a/JodaTime/src/test/org/joda/time/tz/TestUTCProvider.java
+++ b/JodaTime/src/test/org/joda/time/tz/TestUTCProvider.java
@@ -50,7 +50,7 @@ public void testClass() throws Exception {
         Class cls = UTCProvider.class;
         assertEquals(true, Modifier.isPublic(cls.getModifiers()));
         
-        Constructor con = cls.getDeclaredConstructor(null);
+        Constructor con = cls.getDeclaredConstructor((Class[]) null);
         assertEquals(1, cls.getDeclaredConstructors().length);
         assertEquals(true, Modifier.isPublic(con.getModifiers()));
     }

From 9101878f2212dc20393acf30a025b6e69d82fbc3 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Thu, 8 Dec 2005 21:21:52 +0000
Subject: [PATCH 110/130] Fix docs from Chronology change

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@967 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/key_chronology.xml | 2 +-
 JodaTime/xdocs/quickstart.xml     | 4 ++--
 JodaTime/xdocs/userguide.xml      | 2 +-
 3 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/JodaTime/xdocs/key_chronology.xml b/JodaTime/xdocs/key_chronology.xml
index f4f7e118d..0cc2298f5 100644
--- a/JodaTime/xdocs/key_chronology.xml
+++ b/JodaTime/xdocs/key_chronology.xml
@@ -56,7 +56,7 @@ garbage collector costs.
 A Chronology is obtained and used in Joda-Time as a singleton:
 <source>
 DateTimeZone zone = DateTimeZone.forID("Europe/London");
-Chronology coptic = Chronology.getCoptic(zone);
+Chronology coptic = CopticChronology.getInstance(zone);
 
 // current time with coptic chronology
 DateTime dt = new DateTime(coptic);
diff --git a/JodaTime/xdocs/quickstart.xml b/JodaTime/xdocs/quickstart.xml
index 7b7e7055b..4a81ce659 100644
--- a/JodaTime/xdocs/quickstart.xml
+++ b/JodaTime/xdocs/quickstart.xml
@@ -96,7 +96,7 @@ Joda-Time uses a pluggable mechanism for calendars. (The JDK uses subclasses
 such as <code>GregorianCalendar</code>.)
 To obtain a Joda-Time calendar, use one of the factory methods on <code>Chronology</code>.
 <source>
-  Chronology coptic = Chronology.getCoptic();
+  Chronology coptic = CopticChronology.getInstance();
 </source>
 </p>
 <p>
@@ -104,7 +104,7 @@ Time zones are implemented as part of the chronology.
 To obtain a Joda-Time chronology in the Tokyo time zone, you can use.
 <source>
   DateTimeZone zone = DateTimeZone.forID("Asia/Tokyo");
-  Chronology gregorianJuian = Chronology.getGJ(zone);
+  Chronology gregorianJuian = GJChronology.getInstance(zone);
 </source>
 </p>
 </subsection>
diff --git a/JodaTime/xdocs/userguide.xml b/JodaTime/xdocs/userguide.xml
index dcc0b0654..398332b98 100644
--- a/JodaTime/xdocs/userguide.xml
+++ b/JodaTime/xdocs/userguide.xml
@@ -287,7 +287,7 @@ in the library.
 Most users will never need to use or refer directly to the subclasses.
 Instead, they will simply obtain the chronology and use it as a singleton, as follows:
 <source>
-Chronology coptic = Chronology.getCoptic();
+Chronology coptic = CopticChronology.getInstance();
 </source>
 </p>
 <p>

From ada2370cd492338a4de5e0b9cf260c82d0f5985d Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Thu, 8 Dec 2005 22:35:46 +0000
Subject: [PATCH 111/130] Fix bug where wrong month length was being returned

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@968 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../org/joda/time/chrono/GJChronology.java    | 19 ++++++++++++++++++-
 1 file changed, 18 insertions(+), 1 deletion(-)

diff --git a/JodaTime/src/java/org/joda/time/chrono/GJChronology.java b/JodaTime/src/java/org/joda/time/chrono/GJChronology.java
index 411a4c689..b3e9cd47b 100644
--- a/JodaTime/src/java/org/joda/time/chrono/GJChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/GJChronology.java
@@ -28,6 +28,7 @@
 import org.joda.time.IllegalFieldValueException;
 import org.joda.time.Instant;
 import org.joda.time.ReadableInstant;
+import org.joda.time.ReadablePartial;
 import org.joda.time.field.BaseDateTimeField;
 import org.joda.time.field.DecoratedDurationField;
 import org.joda.time.format.DateTimeFormatter;
@@ -732,7 +733,15 @@ public int getMinimumValue() {
             // identical. Choose Julian to tighten up the year limits.
             return iJulianField.getMinimumValue();
         }
-        
+
+        public int getMinimumValue(ReadablePartial partial) {
+            return iJulianField.getMinimumValue(partial);
+        }
+
+        public int getMinimumValue(ReadablePartial partial, int[] values) {
+            return iJulianField.getMinimumValue(partial, values);
+        }
+
         public int getMinimumValue(long instant) {
             if (instant < iCutover) {
                 return iJulianField.getMinimumValue(instant);
@@ -773,6 +782,14 @@ public int getMaximumValue(long instant) {
             return max;
         }
 
+        public int getMaximumValue(ReadablePartial partial) {
+            return iGregorianField.getMaximumValue(partial);
+        }
+
+        public int getMaximumValue(ReadablePartial partial, int[] values) {
+            return iGregorianField.getMaximumValue(partial, values);
+        }
+
         public long roundFloor(long instant) {
             if (instant >= iCutover) {
                 instant = iGregorianField.roundFloor(instant);

From 1a7538acfa128a32b7d977d8936a60e60598fb24 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 9 Dec 2005 00:39:19 +0000
Subject: [PATCH 112/130] Extra testing of isContiguous with GJChrono

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@969 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../test/org/joda/time/TestDateTimeUtils.java | 26 +++++++++++++++++++
 1 file changed, 26 insertions(+)

diff --git a/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java b/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java
index 1c0576306..da2a24ddf 100644
--- a/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java
+++ b/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java
@@ -30,6 +30,7 @@
 import org.joda.time.base.AbstractInstant;
 import org.joda.time.chrono.BuddhistChronology;
 import org.joda.time.chrono.CopticChronology;
+import org.joda.time.chrono.GJChronology;
 import org.joda.time.chrono.ISOChronology;
 
 /**
@@ -38,6 +39,8 @@
  * @author Stephen Colebourne
  */
 public class TestDateTimeUtils extends TestCase {
+
+    private static final GJChronology GJ = GJChronology.getInstance();
     private static final boolean OLD_JDK;
     static {
         String str = System.getProperty("java.version");
@@ -393,4 +396,27 @@ public void testIsContiguous_RP() {
         } catch (IllegalArgumentException ex) {}
     }
 
+    //-----------------------------------------------------------------------
+    public void testIsContiguous_RP_GJChronology() {
+        YearMonthDay ymd = new YearMonthDay(2005, 6, 9, GJ);
+        assertEquals(true, DateTimeUtils.isContiguous(ymd));
+        TimeOfDay tod = new TimeOfDay(12, 20, 30, 0, GJ);
+        assertEquals(true, DateTimeUtils.isContiguous(tod));
+        Partial year = new Partial(DateTimeFieldType.year(), 2005, GJ);
+        assertEquals(true, DateTimeUtils.isContiguous(year));
+        Partial hourOfDay = new Partial(DateTimeFieldType.hourOfDay(), 12, GJ);
+        assertEquals(true, DateTimeUtils.isContiguous(hourOfDay));
+        Partial yearHour = year.with(DateTimeFieldType.hourOfDay(), 12);
+        assertEquals(false, DateTimeUtils.isContiguous(yearHour));
+        Partial ymdd = new Partial(ymd).with(DateTimeFieldType.dayOfWeek(), 2);
+        assertEquals(false, DateTimeUtils.isContiguous(ymdd));
+        Partial dd = new Partial(DateTimeFieldType.dayOfMonth(), 13).with(DateTimeFieldType.dayOfWeek(), 5);
+        assertEquals(false, DateTimeUtils.isContiguous(dd));
+        
+        try {
+            DateTimeUtils.isContiguous((ReadablePartial) null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
 }

From 50c61e214b26485d2de5afd9f71d76c65d1f2478 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 9 Dec 2005 01:04:14 +0000
Subject: [PATCH 113/130] Fix bugs in partial add methods when starting from a
 leap day

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@970 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  4 +
 .../chrono/BasicMonthOfYearDateTimeField.java | 21 +++++
 .../org/joda/time/chrono/GJChronology.java    | 31 ++++++-
 .../joda/time/field/BaseDateTimeField.java    |  8 +-
 .../time/TestYearMonthDay_Properties.java     | 10 +--
 .../joda/time/chrono/TestGJChronology.java    | 40 +++++++++
 .../joda/time/chrono/TestISOChronology.java   | 89 +++++++++++++++++++
 7 files changed, 191 insertions(+), 12 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 2911ca943..f4695e5f4 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -80,6 +80,10 @@ Bug fixes since 1.1
 - DateTimeFormatter
   Fixed printing of time zone name near DST transition.
 
+- YearMonthDay
+  Fixed addition where date starts on a leap day
+  Fixed addition in the GJChronology
+
 
 Enhancements since 1.1
 ----------------------
diff --git a/JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java
index 47d2ef36b..42a32e7ee 100644
--- a/JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java
+++ b/JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java
@@ -17,7 +17,9 @@
 
 import org.joda.time.DateTimeConstants;
 import org.joda.time.DateTimeFieldType;
+import org.joda.time.DateTimeUtils;
 import org.joda.time.DurationField;
+import org.joda.time.ReadablePartial;
 import org.joda.time.field.FieldUtils;
 import org.joda.time.field.ImpreciseDateTimeField;
 
@@ -197,6 +199,25 @@ public long add(long instant, long months) {
         return datePart + timePart;
     }
 
+    //-----------------------------------------------------------------------
+    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
+        // overridden as superclass algorithm can't handle
+        // 2004-02-29 + 48 months -> 2008-02-29 type dates
+        if (valueToAdd == 0) {
+            return values;
+        }
+        if (DateTimeUtils.isContiguous(partial)) {
+            long instant = 0L;
+            for (int i = 0, isize = partial.size(); i < isize; i++) {
+                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);
+            }
+            instant = add(instant, valueToAdd);
+            return iChronology.get(partial, instant);
+        } else {
+            return super.add(partial, fieldIndex, values, valueToAdd);
+        }
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Add to the Month component of the specified time instant
diff --git a/JodaTime/src/java/org/joda/time/chrono/GJChronology.java b/JodaTime/src/java/org/joda/time/chrono/GJChronology.java
index b3e9cd47b..47851fb43 100644
--- a/JodaTime/src/java/org/joda/time/chrono/GJChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/GJChronology.java
@@ -637,6 +637,24 @@ public long add(long instant, long value) {
             return iGregorianField.add(instant, value);
         }
 
+        public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {
+            // overridden as superclass algorithm can't handle
+            // 2004-02-29 + 48 months -> 2008-02-29 type dates
+            if (valueToAdd == 0) {
+                return values;
+            }
+            if (DateTimeUtils.isContiguous(partial)) {
+                long instant = 0L;
+                for (int i = 0, isize = partial.size(); i < isize; i++) {
+                    instant = partial.getFieldType(i).getField(GJChronology.this).set(instant, values[i]);
+                }
+                instant = add(instant, valueToAdd);
+                return GJChronology.this.get(partial, instant);
+            } else {
+                return super.add(partial, fieldIndex, values, valueToAdd);
+            }
+        }
+
         public int getDifference(long minuendInstant, long subtrahendInstant) {
             return iGregorianField.getDifference(minuendInstant, subtrahendInstant);
         }
@@ -783,11 +801,20 @@ public int getMaximumValue(long instant) {
         }
 
         public int getMaximumValue(ReadablePartial partial) {
-            return iGregorianField.getMaximumValue(partial);
+            long instant = GJChronology.getInstanceUTC().set(partial, 0L);
+            return getMaximumValue(instant);
         }
 
         public int getMaximumValue(ReadablePartial partial, int[] values) {
-            return iGregorianField.getMaximumValue(partial, values);
+            Chronology chrono = GJChronology.getInstanceUTC();
+            long instant = 0L;
+            for (int i = 0, isize = partial.size(); i < isize; i++) {
+                DateTimeField field = partial.getFieldType(i).getField(chrono);
+                if (values[i] <= field.getMaximumValue(instant)) {
+                    instant = field.set(instant, values[i]);
+                }
+            }
+            return getMaximumValue(instant);
         }
 
         public long roundFloor(long instant) {
diff --git a/JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java b/JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java
index 3a4df3362..c86bf1c3a 100644
--- a/JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java
+++ b/JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java
@@ -316,7 +316,7 @@ public long add(long instant, long value) {
                 }
                 nextField = instant.getField(fieldIndex - 1);
                 // test only works if this field is UTC (ie. local)
-                if (getRangeDurationField() != nextField.getDurationField()) {
+                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {
                     throw new IllegalArgumentException("Fields invalid for add");
                 }
             }
@@ -336,7 +336,7 @@ public long add(long instant, long value) {
                     throw new IllegalArgumentException("Maximum value exceeded for add");
                 }
                 nextField = instant.getField(fieldIndex - 1);
-                if (getRangeDurationField() != nextField.getDurationField()) {
+                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {
                     throw new IllegalArgumentException("Fields invalid for add");
                 }
             }
@@ -399,7 +399,7 @@ public long add(long instant, long value) {
                 }
                 nextField = instant.getField(fieldIndex - 1);
                 // test only works if this field is UTC (ie. local)
-                if (getRangeDurationField() != nextField.getDurationField()) {
+                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {
                     throw new IllegalArgumentException("Fields invalid for add");
                 }
             }
@@ -421,7 +421,7 @@ public long add(long instant, long value) {
                     continue;
                 }
                 nextField = instant.getField(fieldIndex - 1);
-                if (getRangeDurationField() != nextField.getDurationField()) {
+                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {
                     throw new IllegalArgumentException("Fields invalid for add");
                 }
             }
diff --git a/JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java b/JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java
index 55f7b9c7b..51bb8d78b 100644
--- a/JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java
+++ b/JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java
@@ -27,8 +27,6 @@
  */
 public class TestYearMonthDay_Properties extends TestCase {
 
-    private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
-    
     private long TEST_TIME_NOW =
             (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
             
@@ -481,9 +479,9 @@ public void testPropertyCompareToDay() {
     }
 
     //-----------------------------------------------------------------------
-    private void check(YearMonthDay test, int hour, int min, int sec) {
-        assertEquals(hour, test.getYear());
-        assertEquals(min, test.getMonthOfYear());
-        assertEquals(sec, test.getDayOfMonth());
+    private void check(YearMonthDay test, int year, int month, int day) {
+        assertEquals(year, test.getYear());
+        assertEquals(month, test.getMonthOfYear());
+        assertEquals(day, test.getDayOfMonth());
     }
 }
diff --git a/JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java b/JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java
index 2f39d2262..72c8695b0 100644
--- a/JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java
+++ b/JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java
@@ -21,6 +21,7 @@
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
 
+import org.joda.time.DateMidnight;
 import org.joda.time.DateTime;
 import org.joda.time.DateTimeConstants;
 import org.joda.time.DateTimeUtils;
@@ -29,6 +30,7 @@
 import org.joda.time.DurationFieldType;
 import org.joda.time.Instant;
 import org.joda.time.Period;
+import org.joda.time.TimeOfDay;
 import org.joda.time.YearMonthDay;
 
 /**
@@ -409,6 +411,14 @@ public void testCutoverAddDays() {
         testAdd("1582-10-15", DurationFieldType.days(), 10, "1582-10-25");
     }
 
+    public void testYearEndAddDays() {
+        testAdd("1582-11-05", DurationFieldType.days(), 28, "1582-12-03");
+        testAdd("1582-12-05", DurationFieldType.days(), 28, "1583-01-02");
+        
+        testAdd("2005-11-05", DurationFieldType.days(), 28, "2005-12-03");
+        testAdd("2005-12-05", DurationFieldType.days(), 28, "2006-01-02");
+    }
+
     public void testSubtractDays() {
         // This is a test for a bug in version 1.0. The dayOfMonth range
         // duration field did not match the monthOfYear duration field. This
@@ -430,5 +440,35 @@ private void testAdd(String start, DurationFieldType type, int amt, String end)
         DurationField field = type.getField(GJChronology.getInstance(DateTimeZone.UTC));
         int diff = field.getDifference(dtEnd.getMillis(), dtStart.getMillis());
         assertEquals(amt, diff);
+        
+        if (type == DurationFieldType.years() ||
+            type == DurationFieldType.months() ||
+            type == DurationFieldType.days()) {
+            YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC));
+            YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC));
+            assertEquals(ymdEnd, ymdStart.withFieldAdded(type, amt));
+            assertEquals(ymdStart, ymdEnd.withFieldAdded(type, -amt));
+        }
     }
+
+    public void testTimeOfDayAdd() {
+        TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance());
+        TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance());
+        assertEquals(end, start.plusHours(22));
+        assertEquals(start, end.minusHours(22));
+        assertEquals(end, start.plusMinutes(22 * 60));
+        assertEquals(start, end.minusMinutes(22 * 60));
+    }
+
+    public void testMaximumValue() {
+        DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance());
+        while (dt.getYear() < 1590) {
+            dt = dt.plusDays(1);
+            YearMonthDay ymd = dt.toYearMonthDay();
+            assertEquals(dt.year().getMaximumValue(), ymd.year().getMaximumValue());
+            assertEquals(dt.monthOfYear().getMaximumValue(), ymd.monthOfYear().getMaximumValue());
+            assertEquals(dt.dayOfMonth().getMaximumValue(), ymd.dayOfMonth().getMaximumValue());
+        }
+    }
+
 }
diff --git a/JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java b/JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java
index 348196c64..c77ff55cc 100644
--- a/JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java
+++ b/JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java
@@ -21,11 +21,18 @@
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
 
+import org.joda.time.DateMidnight;
 import org.joda.time.DateTime;
 import org.joda.time.DateTimeConstants;
+import org.joda.time.DateTimeFieldType;
 import org.joda.time.DateTimeUtils;
 import org.joda.time.DateTimeZone;
+import org.joda.time.DurationField;
+import org.joda.time.DurationFieldType;
 import org.joda.time.IllegalFieldValueException;
+import org.joda.time.Partial;
+import org.joda.time.TimeOfDay;
+import org.joda.time.YearMonthDay;
 
 /**
  * This class is a Junit unit test for ISOChronology.
@@ -313,4 +320,86 @@ public void testMinYear() {
         }
     }
 
+    public void testCutoverAddYears() {
+        testAdd("1582-01-01", DurationFieldType.years(), 1, "1583-01-01");
+        testAdd("1582-02-15", DurationFieldType.years(), 1, "1583-02-15");
+        testAdd("1582-02-28", DurationFieldType.years(), 1, "1583-02-28");
+        testAdd("1582-03-01", DurationFieldType.years(), 1, "1583-03-01");
+        testAdd("1582-09-30", DurationFieldType.years(), 1, "1583-09-30");
+        testAdd("1582-10-01", DurationFieldType.years(), 1, "1583-10-01");
+        testAdd("1582-10-04", DurationFieldType.years(), 1, "1583-10-04");
+        testAdd("1582-10-15", DurationFieldType.years(), 1, "1583-10-15");
+        testAdd("1582-10-16", DurationFieldType.years(), 1, "1583-10-16");
+        testAdd("1580-01-01", DurationFieldType.years(), 4, "1584-01-01");
+        testAdd("1580-02-29", DurationFieldType.years(), 4, "1584-02-29");
+        testAdd("1580-10-01", DurationFieldType.years(), 4, "1584-10-01");
+        testAdd("1580-10-10", DurationFieldType.years(), 4, "1584-10-10");
+        testAdd("1580-10-15", DurationFieldType.years(), 4, "1584-10-15");
+        testAdd("1580-12-31", DurationFieldType.years(), 4, "1584-12-31");
+    }
+
+    public void testAddMonths() {
+        testAdd("1582-01-01", DurationFieldType.months(), 1, "1582-02-01");
+        testAdd("1582-01-01", DurationFieldType.months(), 6, "1582-07-01");
+        testAdd("1582-01-01", DurationFieldType.months(), 12, "1583-01-01");
+        testAdd("1582-11-15", DurationFieldType.months(), 1, "1582-12-15");
+        testAdd("1582-09-04", DurationFieldType.months(), 2, "1582-11-04");
+        testAdd("1582-09-05", DurationFieldType.months(), 2, "1582-11-05");
+        testAdd("1582-09-10", DurationFieldType.months(), 2, "1582-11-10");
+        testAdd("1582-09-15", DurationFieldType.months(), 2, "1582-11-15");
+        testAdd("1580-01-01", DurationFieldType.months(), 48, "1584-01-01");
+        testAdd("1580-02-29", DurationFieldType.months(), 48, "1584-02-29");
+        testAdd("1580-10-01", DurationFieldType.months(), 48, "1584-10-01");
+        testAdd("1580-10-10", DurationFieldType.months(), 48, "1584-10-10");
+        testAdd("1580-10-15", DurationFieldType.months(), 48, "1584-10-15");
+        testAdd("1580-12-31", DurationFieldType.months(), 48, "1584-12-31");
+    }
+
+    private void testAdd(String start, DurationFieldType type, int amt, String end) {
+        DateTime dtStart = new DateTime(start, ISOChronology.getInstanceUTC());
+        DateTime dtEnd = new DateTime(end, ISOChronology.getInstanceUTC());
+        assertEquals(dtEnd, dtStart.withFieldAdded(type, amt));
+        assertEquals(dtStart, dtEnd.withFieldAdded(type, -amt));
+
+        DurationField field = type.getField(ISOChronology.getInstanceUTC());
+        int diff = field.getDifference(dtEnd.getMillis(), dtStart.getMillis());
+        assertEquals(amt, diff);
+        
+        if (type == DurationFieldType.years() ||
+            type == DurationFieldType.months() ||
+            type == DurationFieldType.days()) {
+            YearMonthDay ymdStart = new YearMonthDay(start, ISOChronology.getInstanceUTC());
+            YearMonthDay ymdEnd = new YearMonthDay(end, ISOChronology.getInstanceUTC());
+            assertEquals(ymdEnd, ymdStart.withFieldAdded(type, amt));
+            assertEquals(ymdStart, ymdEnd.withFieldAdded(type, -amt));
+        }
+    }
+
+    public void testTimeOfDayAdd() {
+        TimeOfDay start = new TimeOfDay(12, 30);
+        TimeOfDay end = new TimeOfDay(10, 30);
+        assertEquals(end, start.plusHours(22));
+        assertEquals(start, end.minusHours(22));
+        assertEquals(end, start.plusMinutes(22 * 60));
+        assertEquals(start, end.minusMinutes(22 * 60));
+    }
+
+    public void testPartialDayOfYearAdd() {
+        Partial start = new Partial().with(DateTimeFieldType.year(), 2000).with(DateTimeFieldType.dayOfYear(), 366);
+        Partial end = new Partial().with(DateTimeFieldType.year(), 2004).with(DateTimeFieldType.dayOfYear(), 366);
+        assertEquals(end, start.withFieldAdded(DurationFieldType.days(), 365 + 365 + 365 + 366));
+        assertEquals(start, end.withFieldAdded(DurationFieldType.days(), -(365 + 365 + 365 + 366)));
+    }
+
+    public void testMaximumValue() {
+        DateMidnight dt = new DateMidnight(1570, 1, 1);
+        while (dt.getYear() < 1590) {
+            dt = dt.plusDays(1);
+            YearMonthDay ymd = dt.toYearMonthDay();
+            assertEquals(dt.year().getMaximumValue(), ymd.year().getMaximumValue());
+            assertEquals(dt.monthOfYear().getMaximumValue(), ymd.monthOfYear().getMaximumValue());
+            assertEquals(dt.dayOfMonth().getMaximumValue(), ymd.dayOfMonth().getMaximumValue());
+        }
+    }
+
 }

From dd29ec2c33a10fc856dd4f7777f819f7ef56f3dc Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 9 Dec 2005 21:42:38 +0000
Subject: [PATCH 114/130] Fix and enhance javadoc

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@971 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../java/org/joda/time/DateTimeConstants.java | 20 +++++++++----------
 1 file changed, 10 insertions(+), 10 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/DateTimeConstants.java b/JodaTime/src/java/org/joda/time/DateTimeConstants.java
index 8a0a34918..1f6437f3e 100644
--- a/JodaTime/src/java/org/joda/time/DateTimeConstants.java
+++ b/JodaTime/src/java/org/joda/time/DateTimeConstants.java
@@ -69,22 +69,22 @@
     /** Constant (1) representing Monday, the first day of the week (ISO) */
     public static final int MONDAY = 1;
 
-    /** Constant (2) representing Monday, the second day of the week (ISO) */
+    /** Constant (2) representing Tuesday, the second day of the week (ISO) */
     public static final int TUESDAY = 2;
 
-    /** Constant (3) representing Monday, the third day of the week (ISO) */
+    /** Constant (3) representing Wednesday, the third day of the week (ISO) */
     public static final int WEDNESDAY = 3;
 
-    /** Constant (4) representing Monday, the fourth day of the week (ISO) */
+    /** Constant (4) representing Thursday, the fourth day of the week (ISO) */
     public static final int THURSDAY = 4;
 
-    /** Constant (5) representing Monday, the fifth day of the week (ISO) */
+    /** Constant (5) representing Friday, the fifth day of the week (ISO) */
     public static final int FRIDAY = 5;
 
-    /** Constant (6) representing Monday, the sixth day of the week (ISO) */
+    /** Constant (6) representing Saturday, the sixth day of the week (ISO) */
     public static final int SATURDAY = 6;
 
-    /** Constant (7) representing Monday, the seventh day of the week (ISO) */
+    /** Constant (7) representing Sunday, the seventh day of the week (ISO) */
     public static final int SUNDAY = 7;
 
 
@@ -105,8 +105,8 @@
      * <p>
      * All new chronologies with differrent Era values should try to assign
      * eras as follows. The era that was in force at 1970-01-01 (ISO) is assigned
-     * the value 1. Earlier eras are assigned sequentially earlier numbers.
-     * Later eras are assigned sequentially later numbers.
+     * the value 1. Earlier eras are assigned sequentially smaller numbers.
+     * Later eras are assigned sequentially greater numbers.
      */
     public static final int AD = 1;
     /**
@@ -114,8 +114,8 @@
      * <p>
      * All new chronologies with differrent Era values should try to assign
      * eras as follows. The era that was in force at 1970-01-01 (ISO) is assigned
-     * the value 1. Earlier eras are assigned sequentially earlier numbers.
-     * Later eras are assigned sequentially later numbers.
+     * the value 1. Earlier eras are assigned sequentially smaller numbers.
+     * Later eras are assigned sequentially greater numbers.
      */
     public static final int CE = 1;
 

From d36a6f8494673a7ce3a94a77b877af512d697c75 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 11 Dec 2005 00:30:14 +0000
Subject: [PATCH 115/130] Change XML format

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@972 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../org/joda/time/contrib/holiday/src/GB.xml  | 325 +++++++++---------
 .../time/contrib/holiday/src/joda-holiday.dtd |  23 +-
 2 files changed, 179 insertions(+), 169 deletions(-)

diff --git a/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/src/GB.xml b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/src/GB.xml
index 3a7eda0a1..09f3c9772 100644
--- a/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/src/GB.xml
+++ b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/src/GB.xml
@@ -37,182 +37,181 @@
       <weekendStart>6</weekendStart>
       <weekendEnd>7</weekendEnd>
     </week>
-    <days type="Named">
-      <day type="NewYear">
-        <name lang="en">New Year's Day</name>
-        <dayRule monthOfYear="1" dayOfMonth="1" />
-      </day>
-      <day type="ValentinesDay">
-        <name lang="en">Valentines Day</name>
-        <dayRule monthOfYear="2" dayOfMonth="14" />
-      </day>
-      <day type="ShroveTuesday">
-        <name lang="en">Shrove Tuesday</name>
-        <dayRule basedOn="GregorianEaster" relativeDays="-47" />
-      </day>
-      <day type="MothersDay">
-        <name lang="en">Mother's Day</name>
-        <dayRule basedOn="GregorianEaster" relativeDays="-21" />
-      </day>
-      <day type="GoodFriday">
-        <name lang="en">Good Friday</name>
-        <dayRule basedOn="GregorianEaster" relativeDays="-2" />
-      </day>
-      <day type="Easter">
-        <name lang="en">Easter</name>
-        <dayRule basedOn="GregorianEaster" />
-      </day>
-      <day type="AprilFoolsDay">
-        <name lang="en">April Fool's Day</name>
-        <dayRule monthOfYear="4" dayOfMonth="1" />
-      </day>
-      <day type="MayDay">
-        <name lang="en">May Day</name>
-        <dayRule monthOfYear="5" dayOfMonth="1" />
-      </day>
-      <day type="Halloween">
-        <name lang="en">Halloween</name>
-        <dayRule monthOfYear="10" dayOfMonth="31" />
-      </day>
-      <day type="GuyFawkesNight">
-        <name lang="en">Guy Fawkes Night</name>
-        <dayRule monthOfYear="11" dayOfMonth="5" />
-      </day>
-      <day type="RemembranceSunday">
-        <name lang="en">Remembrance Sunday</name>
-        <dayRule monthOfYear="11" weekOfMonth="2" dayOfWeek="7" />
-      </day>
-      <day type="RemembranceDay">
-        <name lang="en">Remembrance Day</name>
-        <dayRule monthOfYear="11" dayOfMonth="11" />
-      </day>
-      <day type="ChristmasEve">
-        <name lang="en">Christmas Eve</name>
-        <dayRule monthOfYear="12" dayOfMonth="24" />
-      </day>
-      <day type="ChristmasDay">
-        <name lang="en">Christmas Day</name>
-        <dayRule monthOfYear="12" dayOfMonth="25" />
-      </day>
-      <day type="BoxingDay">
-        <name lang="en">Boxing Day</name>
-        <dayRule monthOfYear="12" dayOfMonth="26" />
-      </day>
-      <day type="NewYearsEve">
-        <name lang="en">New Year's Eve</name>
-        <dayRule monthOfYear="12" dayOfMonth="31" />
-      </day>
-    </days>
-    <days type="Public">
-      <name lang="en">Bank Holiday</name>
-      <day type="GoodFriday">
-        <name lang="en">Good Friday</name>
-        <dayRule fromYear="1871" basedOn="GregorianEaster" relativeDays="-2" />
-      </day>
-      <day type="ChristmasDay">
-        <name lang="en">Christmas Day</name>
-        <dayRule fromYear="1871" monthOfYear="12" dayOfMonth="25" weekendAdjust="NextWeekday" />
-      </day>
-      <day type="MilleniumDay">
-        <name lang="en">Millenium Day</name>
-        <dayRule year="1999" monthOfYear="12" dayOfMonth="31" />
-      </day>
-      <day type="GoldenJubilee">
-        <name lang="en">Golden Jubilee Bank Holiday</name>
-        <dayRule year="2002" monthOfYear="6" dayOfMonth="3" />
-      </day>
-      <day type="RoyalWeddingOfCharlesAndDiana">
-        <name lang="en">Royal Wedding of Charles and Diana</name>
-        <dayRule year="1981" monthOfYear="7" dayOfMonth="29" />
-      </day>
-    </days>
+    <day id="NewYear">
+      <name lang="en">New Year's Day</name>
+      <dayRule monthOfYear="1" dayOfMonth="1" />
+      <holidayRule fromYear="1974" monthOfYear="1" dayOfMonth="1" weekendAdjust="NextWeekday" />
+    </day>
+    <day id="ValentinesDay">
+      <name lang="en">Valentines Day</name>
+      <dayRule monthOfYear="2" dayOfMonth="14" />
+    </day>
+    <day id="ShroveTuesday">
+      <name lang="en">Shrove Tuesday</name>
+      <dayRule basedOn="GregorianEaster" relativeDays="-47" />
+    </day>
+    <day id="AshWednesday">
+      <name lang="en">Ash Wednesday</name>
+      <dayRule basedOn="GregorianEaster" relativeDays="-46" />
+    </day>
+    <day id="MothersDay">
+      <name lang="en">Mother's Day</name>
+      <dayRule basedOn="GregorianEaster" relativeDays="-21" />
+    </day>
+    <day id="MaundyThursday">
+      <name lang="en">Maundy Thursday</name>
+      <dayRule basedOn="GregorianEaster" relativeDays="-3" />
+    </day>
+    <day id="GoodFriday">
+      <name lang="en">Good Friday</name>
+      <dayRule basedOn="GregorianEaster" relativeDays="-2" />
+      <holidayRule fromYear="1871" />
+    </day>
+    <day id="Easter">
+      <name lang="en">Easter</name>
+      <dayRule basedOn="GregorianEaster" />
+    </day>
+    <day id="EasterMonday">
+      <name lang="en">Easter Monday</name>
+      <dayRule basedOn="GregorianEaster" relativeDays="1" />
+    </day>
+    <day id="WhitMonday">
+      <name lang="en">Whit Monday</name>
+      <dayRule basedOn="GregorianEaster" relativeDays="50" />
+    </day>
+    <day id="AprilFoolsDay">
+      <name lang="en">April Fool's Day</name>
+      <dayRule monthOfYear="4" dayOfMonth="1" />
+    </day>
+    <day id="MayDay">
+      <name lang="en">May Day</name>
+      <dayRule monthOfYear="5" dayOfMonth="1" />
+    </day>
+    <day id="EarlyMayBankHoliday">
+      <name lang="en">Early May Bank Holiday</name>
+      <holidayRule fromYear="1978" monthOfYear="5" weekOfMonth="1" dayOfWeek="1" />
+      <holidayRule year="1995" monthOfYear="5" dayOfMonth="8" />
+    </day>
+    <day id="SpringBankHoliday">
+      <name lang="en">Spring Bank Holiday</name>
+      <holidayRule fromYear="1978" monthOfYear="5" weekOfMonth="-1" dayOfWeek="1" />
+      <holidayRule year="2002" monthOfYear="6" dayOfMonth="4" />
+    </day>
+    <day id="SummerBankHoliday">
+      <name lang="en">Summer Bank Holiday</name>
+    </day>
+    <day id="Halloween">
+      <name lang="en">Halloween</name>
+      <dayRule monthOfYear="10" dayOfMonth="31" />
+    </day>
+    <day id="GuyFawkesNight">
+      <name lang="en">Guy Fawkes Night</name>
+      <dayRule monthOfYear="11" dayOfMonth="5" />
+    </day>
+    <day id="RemembranceSunday">
+      <name lang="en">Remembrance Sunday</name>
+      <dayRule monthOfYear="11" weekOfMonth="2" dayOfWeek="7" />
+    </day>
+    <day id="RemembranceDay">
+      <name lang="en">Remembrance Day</name>
+      <dayRule monthOfYear="11" dayOfMonth="11" />
+    </day>
+    <day id="ChristmasEve">
+      <name lang="en">Christmas Eve</name>
+      <dayRule monthOfYear="12" dayOfMonth="24" />
+    </day>
+    <day id="ChristmasDay">
+      <name lang="en">Christmas Day</name>
+      <dayRule monthOfYear="12" dayOfMonth="25" />
+      <holidayRule fromYear="1871" weekendAdjust="NextWeekday" />
+    </day>
+    <day id="BoxingDay">
+      <name lang="en">Boxing Day</name>
+      <dayRule monthOfYear="12" dayOfMonth="26" />
+      <holidayRule fromYear="1974" basedOn="ChristmasDay" relativeDays="1" weekendAdjust="NextWeekday" />
+    </day>
+    <day id="NewYearsEve">
+      <name lang="en">New Year's Eve</name>
+      <dayRule monthOfYear="12" dayOfMonth="31" />
+    </day>
+    <day id="MilleniumDay">
+      <name lang="en">Millenium Day</name>
+      <dayRule year="1999" monthOfYear="12" dayOfMonth="31" />
+    </day>
+    <day id="QueenElizabethGoldenJubilee">
+      <name lang="en">Queen Elizabeth II Golden Jubilee</name>
+      <dayRule year="2002" monthOfYear="6" dayOfMonth="3" />
+    </day>
+    <day id="RoyalWeddingOfCharlesAndDiana">
+      <name lang="en">Royal Wedding of Charles and Diana</name>
+      <dayRule year="1981" monthOfYear="7" dayOfMonth="29" />
+    </day>
   </holiday-information>
   
   <!-- GB/England -->
   <holiday-information id="GB-ENG" base="GB">
-    <days type="Public">
-      <day type="NewYear">
-        <name lang="en">New Year's Day</name>
-        <dayRule fromYear="1974" monthOfYear="1" dayOfMonth="1" weekendAdjust="NextWeekday" />
-      </day>
-      <day type="EasterMonday">
-        <name lang="en">Easter Monday</name>
-        <dayRule fromYear="1871" basedOn="GregorianEaster" relativeDays="1" />
-      </day>
-      <day type="EarlyMay">
-        <name lang="en">Early May Bank Holiday</name>
-        <dayRule fromYear="1978" monthOfYear="5" weekOfMonth="1" dayOfWeek="1" />
-        <dayRule year="1995" monthOfYear="5" dayOfMonth="8" />
-      </day>
-      <day type="WhitMonday">
-        <name lang="en">Whit Monday</name>
-        <dayRule fromYear="1871" toYear="1966" basedOn="GregorianEaster" relativeDays="50" />
-      </day>
-      <day type="Spring">
-        <name lang="en">Spring Bank Holiday</name>
-        <dayRule fromYear="1967" monthOfYear="5" weekOfMonth="-1" dayOfWeek="1" />
-        <dayRule year="2002" monthOfYear="6" dayOfMonth="4" />
-      </day>
-      <day type="Summer">
-        <name lang="en">Summer Bank Holiday</name>
-        <dayRule fromYear="1871" toYear="1964" monthOfYear="8" weekOfMonth="1" dayOfWeek="1" />
-        <dayRule fromYear="1965" monthOfYear="8" weekOfMonth="-1" dayOfWeek="1" />
-      </day>
-      <day type="BoxingDay">
-        <name lang="en">Boxing Day</name>
-        <dayRule fromYear="1871" basedOn="ChristmasDay" relativeDays="1" />
-      </day>
-    </days>
+    <day id="EasterMonday">
+      <holidayRule fromYear="1871" />
+    </day>
+    <day id="WhitMonday">
+      <holidayRule fromYear="1871" toYear="1966" />
+    </day>
+    <day id="StGeorgesDay">
+      <name lang="en">St George's Day</name>
+      <dayRule monthOfYear="4" dayOfMonth="23" />
+    </day>
+    <day id="SpringBankHoliday">
+      <holidayRule fromYear="1967" monthOfYear="5" weekOfMonth="-1" dayOfWeek="1" />
+      <holidayRule year="2002" monthOfYear="6" dayOfMonth="4" />
+    </day>
+    <day id="SummerBankHoliday">
+      <holidayRule fromYear="1871" toYear="1964" monthOfYear="8" weekOfMonth="1" dayOfWeek="1" />
+      <holidayRule fromYear="1965" monthOfYear="8" weekOfMonth="-1" dayOfWeek="1" />
+    </day>
+    <day id="BoxingDay">
+      <holidayRule fromYear="1871" basedOn="ChristmasDay" relativeDays="1" weekendAdjust="NextWeekday" />
+    </day>
   </holiday-information>
-  
+
   <!-- GB/Wales -->
   <holiday-information id="GB-WLS" base="GB-ENG">
+    <day id="StDavidsDay">
+      <name lang="en">St David's Day</name>
+      <dayRule monthOfYear="3" dayOfMonth="1" />
+    </day>
   </holiday-information>
-  
+
   <!-- GB/Scotland -->
   <holiday-information id="GB-SCT" base="GB">
-    <days type="Public">
-      <day type="NewYear">
-        <name lang="en">New Year's Day</name>
-        <dayRule fromYear="1871" monthOfYear="1" dayOfMonth="1" weekendAdjust="NextWeekday" />
-      </day>
-      <day type="Hogmanay">
-        <name lang="en">Hogmanay</name>
-        <dayRule fromYear="1973" basedOn="NewYear" relativeDays="1" />
-      </day>
-      <day type="EarlyMay">
-        <name lang="en">Early May Bank Holiday</name>
-        <dayRule fromYear="1871" monthOfYear="5" weekOfMonth="1" dayOfWeek="1" />
-        <dayRule year="1995" monthOfYear="5" dayOfMonth="8" />
-      </day>
-      <day type="Spring">
-        <name lang="en">Spring Bank Holiday</name>
-        <dayRule fromYear="1978" monthOfYear="5" weekOfMonth="-1" dayOfWeek="1" />
-        <dayRule year="2002" monthOfYear="6" dayOfMonth="4" />
-      </day>
-      <day type="Summer">
-        <name lang="en">Summer Bank Holiday</name>
-        <dayRule fromYear="1871" monthOfYear="8" weekOfMonth="1" dayOfWeek="1" />
-      </day>
-      <day type="BoxingDay">
-        <name lang="en">Boxing Day</name>
-        <dayRule fromYear="1974" basedOn="ChristmasDay" relativeDays="1" />
-      </day>
-    </days>
+    <day id="NewYear">
+      <holidayRule fromYear="1871" weekendAdjust="NextWeekday" />
+      <holidayRule fromYear="1973" weekendAdjust="NextWeekday" duration="P2D" />
+    </day>
+    <day id="EarlyMayBankHoliday">
+      <holidayRule fromYear="1871" monthOfYear="5" weekOfMonth="1" dayOfWeek="1" />
+      <holidayRule year="1995" monthOfYear="5" dayOfMonth="8" />
+    </day>
+    <day id="SummerBankHoliday">
+      <holidayRule fromYear="1871" monthOfYear="8" weekOfMonth="1" dayOfWeek="1" />
+    </day>
+    <day id="StAndrewsDay">
+      <name lang="en">St Andrew's Day</name>
+      <dayRule monthOfYear="11" dayOfMonth="30" />
+    </day>
   </holiday-information>
-  
+
   <!-- GB/NorthernIreland -->
   <holiday-information id="GB-NIR" base="GB-ENG">
-    <days type="Public">
-      <day type="StPatricksDay">
-        <name lang="en">St Patrick's Day</name>
-        <dayRule fromYear="1903" monthOfYear="3" dayOfMonth="17" weekendAdjust="NextWeekday" />
-      </day>
-      <day type="BattleOfTheBoyne">
-        <name lang="en">Battle of the Boyne</name>
-        <dayRule fromYear="1926" monthOfYear="7" dayOfMonth="12" weekendAdjust="NextWeekday" />
-      </day>
-    </days>
+    <day id="StPatricksDay">
+      <name lang="en">St Patrick's Day</name>
+      <dayRule monthOfYear="3" dayOfMonth="17" />
+      <holidayRule fromYear="1903" weekendAdjust="NextWeekday" />
+    </day>
+    <day id="BattleOfTheBoyne">
+      <name lang="en">Battle of the Boyne</name>
+      <dayRule monthOfYear="7" dayOfMonth="12" />
+      <holidayRule fromYear="1926" weekendAdjust="NextWeekday" />
+    </day>
   </holiday-information>
 
 </joda-holiday-information>
diff --git a/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/src/joda-holiday.dtd b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/src/joda-holiday.dtd
index 9a34f5e58..1442ea19c 100644
--- a/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/src/joda-holiday.dtd
+++ b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/src/joda-holiday.dtd
@@ -1,5 +1,5 @@
 <!ELEMENT joda-holiday-information (locale-holiday-information*)>
-<!ELEMENT holiday-information (id,week?,days*)>
+<!ELEMENT holiday-information (id,week?,day*)>
 <!ATTLIST holiday-information
   id CDATA #REQUIRED
   base CDATA #IMPLIED
@@ -7,13 +7,10 @@
 <!ELEMENT week (weekendStart,weekendEnd)>
 <!ELEMENT weekendStart (#PCDATA)>
 <!ELEMENT weekendEnd (#PCDATA)>
-<!ELEMENT days (name?,day*)>
-<!ATTLIST days type CDATA #REQUIRED>
 <!ELEMENT name (#PCDATA)>
 <!ATTLIST name lang CDATA #REQUIRED>
-<!ELEMENT day (name*,dayRule*)>
-<!ATTLIST day type CDATA #REQUIRED>
-<!ELEMENT baseRule EMPTY>
+<!ELEMENT day (name*,dayRule*,holidayRule*)>
+<!ATTLIST day id CDATA #REQUIRED>
 <!ELEMENT dayRule EMPTY>
 <!ATTLIST dayRule
   repeat CDATA 'P1Y'
@@ -28,3 +25,17 @@
   dayOfWeek CDATA #IMPLIED
   weekendAdjust (NextWeekday|PreviousWeekday|NearestWeekday) #IMPLIED
   duration CDATA 'P1D'>
+<!ELEMENT holidayRule EMPTY>
+<!ATTLIST holidayRule
+  repeat CDATA 'P1Y'
+  fromYear CDATA #IMPLIED
+  toYear CDATA #IMPLIED
+  year CDATA #IMPLIED
+  basedOn CDATA #IMPLIED
+  relativeDays CDATA #IMPLIED
+  monthOfYear CDATA #IMPLIED
+  dayOfMonth CDATA #IMPLIED
+  weekOfMonth CDATA #IMPLIED
+  dayOfWeek CDATA #IMPLIED
+  weekendAdjust (NextWeekday|PreviousWeekday|NearestWeekday) #IMPLIED
+  duration CDATA 'P1D'>

From 2c0de71d20719c4aebf7f848006410c8a418613f Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 11 Dec 2005 10:38:44 +0000
Subject: [PATCH 116/130] Fix version for 1.2

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@973 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/conf/MANIFEST.MF | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/JodaTime/src/conf/MANIFEST.MF b/JodaTime/src/conf/MANIFEST.MF
index c3fd588f0..76804f8d4 100644
--- a/JodaTime/src/conf/MANIFEST.MF
+++ b/JodaTime/src/conf/MANIFEST.MF
@@ -1,7 +1,7 @@
 Extension-Name: @name@
 Specification-Title: Joda Time
 Specification-Vendor: Joda.org
-Specification-Version: 1.1
+Specification-Version: @version@
 Implementation-Vendor: Joda.org
 Implementation-Title: org.joda.time
 Implementation-Version: @version@

From 3db8722d8815af744f39325f9368059a9e493972 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 11 Dec 2005 10:40:24 +0000
Subject: [PATCH 117/130] Clarify meaning of package scoped

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@974 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/chrono/package.html | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/chrono/package.html b/JodaTime/src/java/org/joda/time/chrono/package.html
index 4974ca347..a9cc0d589 100644
--- a/JodaTime/src/java/org/joda/time/chrono/package.html
+++ b/JodaTime/src/java/org/joda/time/chrono/package.html
@@ -44,8 +44,8 @@
 <p>
 The package also contains all of the specialised field implementations.
 These classes are package scoped, along with various other chronology helper classes.
-The package scoped classes do not form part of the public API of Joda-Time
-and may change at any time.
+The package scoped classes (which are not shown in the javadoc) do not form part
+of the public API of Joda-Time and may change at any time.
 </p>
 </body>
 </html>

From 46bc210597874bc817a7e4a1339b395c8d329958 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Sat, 17 Dec 2005 21:31:10 +0000
Subject: [PATCH 118/130] Minor comment fix.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@975 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/chrono/BasicChronology.java | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/JodaTime/src/java/org/joda/time/chrono/BasicChronology.java b/JodaTime/src/java/org/joda/time/chrono/BasicChronology.java
index c8874dbdf..3e0e82ab1 100644
--- a/JodaTime/src/java/org/joda/time/chrono/BasicChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/BasicChronology.java
@@ -699,7 +699,7 @@ int getMaxMonth() {
      * defined as:
      * <pre>
      *    yearAtEpoch * averageMillisPerYear + millisOfYearAtEpoch
-     * <pre>
+     * </pre>
      * where epoch is 1970-01-01 (Gregorian).
      */
     abstract long getApproxMillisAtEpoch();

From f6cc33563292500c449789d27ddca270c87eba29 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 19 Dec 2005 00:32:17 +0000
Subject: [PATCH 119/130] Improve POM standards

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@976 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/project.xml | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/JodaTime/project.xml b/JodaTime/project.xml
index 34e9802a7..da8cb4390 100644
--- a/JodaTime/project.xml
+++ b/JodaTime/project.xml
@@ -2,11 +2,11 @@
 <!-- You are strongly recommended to use ant for compiling and building -->
 <!-- We only use and test maven for website construction -->
 
-<maven:project xmlns:maven="http://maven.apache.org/maven-v3_0_0.xsd">
+<project>
   <pomVersion>3</pomVersion>
-  <id>joda-time</id>
-  <name>Joda time</name>
   <groupId>joda-time</groupId>
+  <artifactId>joda-time</artifactId>
+  <name>Joda time</name>
   <currentVersion>1.2-dev</currentVersion>
   <organization>
     <name>Joda.org</name>
@@ -197,4 +197,4 @@
      <!--report>maven-tasklist-plugin</report-->
   </reports>
 
-</maven:project>
+</project>

From ab6b7a46049bba471d8cb9d2f85f31b77e67e293 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 19 Dec 2005 00:37:20 +0000
Subject: [PATCH 120/130] Fix DateTimeFormat pattern letter K from Maxim Zhao

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@977 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  5 ++++-
 JodaTime/project.xml                          |  3 +++
 .../org/joda/time/format/DateTimeFormat.java  | 21 ++++++++++---------
 .../joda/time/format/TestDateTimeFormat.java  | 12 +++++++++++
 4 files changed, 30 insertions(+), 11 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index f4695e5f4..2ccd7fb89 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -78,12 +78,15 @@ Bug fixes since 1.1
   during serialization
 
 - DateTimeFormatter
-  Fixed printing of time zone name near DST transition.
+  Fixed printing of time zone name near DST transition
 
 - YearMonthDay
   Fixed addition where date starts on a leap day
   Fixed addition in the GJChronology
 
+- DateTimeFormat
+  Pattern letter 'K' was using the wrong underlying implementation
+
 
 Enhancements since 1.1
 ----------------------
diff --git a/JodaTime/project.xml b/JodaTime/project.xml
index da8cb4390..7f02adadf 100644
--- a/JodaTime/project.xml
+++ b/JodaTime/project.xml
@@ -141,6 +141,9 @@
     <contributor>
       <name>Kandarp Shah</name>
     </contributor>
+    <contributor>
+      <name>Maxim Zhao</name>
+    </contributor>
   </contributors>
 
   <dependencies>
diff --git a/JodaTime/src/java/org/joda/time/format/DateTimeFormat.java b/JodaTime/src/java/org/joda/time/format/DateTimeFormat.java
index b94daab53..3d178718b 100644
--- a/JodaTime/src/java/org/joda/time/format/DateTimeFormat.java
+++ b/JodaTime/src/java/org/joda/time/format/DateTimeFormat.java
@@ -116,6 +116,7 @@
  * are as well.
  *
  * @author Brian S O'Neill
+ * @author Maxim Zhao
  * @since 1.0
  * @see ISODateTimeFormat
  * @see DateTimeFormatterBuilder
@@ -462,12 +463,21 @@ private static void parsePatternTo(DateTimeFormatterBuilder builder, String patt
             case 'd': // day of month (number)
                 builder.appendDayOfMonth(tokenLen);
                 break;
-            case 'h': // hour of day (number, 1..12)
+            case 'a': // am/pm marker (text)
+                builder.appendHalfdayOfDayText();
+                break;
+            case 'h': // clockhour of halfday (number, 1..12)
                 builder.appendClockhourOfHalfday(tokenLen);
                 break;
             case 'H': // hour of day (number, 0..23)
                 builder.appendHourOfDay(tokenLen);
                 break;
+            case 'k': // clockhour of day (1..24)
+                builder.appendClockhourOfDay(tokenLen);
+                break;
+            case 'K': // hour of halfday (0..11)
+                builder.appendHourOfHalfday(tokenLen);
+                break;
             case 'm': // minute of hour (number)
                 builder.appendMinuteOfHour(tokenLen);
                 break;
@@ -493,15 +503,6 @@ private static void parsePatternTo(DateTimeFormatterBuilder builder, String patt
             case 'w': // week of weekyear (number)
                 builder.appendWeekOfWeekyear(tokenLen);
                 break;
-            case 'a': // am/pm marker (text)
-                builder.appendHalfdayOfDayText();
-                break;
-            case 'k': // hour of day (1..24)
-                builder.appendClockhourOfDay(tokenLen);
-                break;
-            case 'K': // hour of day (0..11)
-                builder.appendClockhourOfHalfday(tokenLen);
-                break;
             case 'z': // time zone (text)
                 if (tokenLen >= 4) {
                     builder.appendTimeZoneName();
diff --git a/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java b/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java
index e497490b2..23e5cbb79 100644
--- a/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java
+++ b/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java
@@ -644,6 +644,9 @@ public void testFormat_hourOfHalfday() {
         
         dt = dt.withZone(TOKYO);
         assertEquals(dt.toString(), "7", f.print(dt));
+        
+        dt = new DateTime(2004, 6, 9, 0, 0, 0, 0, UTC);
+        assertEquals(dt.toString(), "0", f.print(dt));
     }
 
     //-----------------------------------------------------------------------
@@ -657,6 +660,9 @@ public void testFormat_clockhourOfHalfday() {
         
         dt = dt.withZone(TOKYO);
         assertEquals(dt.toString(), "7", f.print(dt));
+        
+        dt = new DateTime(2004, 6, 9, 0, 0, 0, 0, UTC);
+        assertEquals(dt.toString(), "12", f.print(dt));
     }
 
     //-----------------------------------------------------------------------
@@ -670,6 +676,9 @@ public void testFormat_hourOfDay() {
         
         dt = dt.withZone(TOKYO);
         assertEquals(dt.toString(), "19", f.print(dt));
+        
+        dt = new DateTime(2004, 6, 9, 0, 0, 0, 0, UTC);
+        assertEquals(dt.toString(), "0", f.print(dt));
     }
 
     //-----------------------------------------------------------------------
@@ -683,6 +692,9 @@ public void testFormat_clockhourOfDay() {
         
         dt = dt.withZone(TOKYO);
         assertEquals(dt.toString(), "19", f.print(dt));
+        
+        dt = new DateTime(2004, 6, 9, 0, 0, 0, 0, UTC);
+        assertEquals(dt.toString(), "24", f.print(dt));
     }
 
     //-----------------------------------------------------------------------

From e0b2d38169b2ede825dab02d035a59ba23a723af Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 20 Dec 2005 00:01:52 +0000
Subject: [PATCH 121/130] Ignores

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@978 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/jsptags/.cvsignore | 1 +
 1 file changed, 1 insertion(+)

diff --git a/JodaTimeContrib/jsptags/.cvsignore b/JodaTimeContrib/jsptags/.cvsignore
index d567ba01e..9b32845b6 100644
--- a/JodaTimeContrib/jsptags/.cvsignore
+++ b/JodaTimeContrib/jsptags/.cvsignore
@@ -1,2 +1,3 @@
 bin
 target
+.settings

From 4612e2286273c5bc68b43abd947dd91fc69eca23 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 20 Dec 2005 00:02:35 +0000
Subject: [PATCH 122/130] Update build following ideas from Jakarta Commons

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@979 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/jsptags/build.xml              | 18 ++++++++++++------
 JodaTimeContrib/jsptags/project.properties     |  2 ++
 JodaTimeContrib/jsptags/project.xml            |  2 +-
 .../jsptags/src/conf/manifest-additions.txt    |  2 ++
 4 files changed, 17 insertions(+), 7 deletions(-)
 create mode 100644 JodaTimeContrib/jsptags/src/conf/manifest-additions.txt

diff --git a/JodaTimeContrib/jsptags/build.xml b/JodaTimeContrib/jsptags/build.xml
index 923b6035f..a198e6281 100644
--- a/JodaTimeContrib/jsptags/build.xml
+++ b/JodaTimeContrib/jsptags/build.xml
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 
-<!--build.xml generated by maven from project.xml version 0.8
-  on date August 19 2005, time 2215-->
+<!--build.xml generated by maven from project.xml version 0.9-dev
+  on date December 19 2005, time 2348-->
 
 <project default="jar" name="joda-time-jsptags" basedir=".">
   <!--Load local and user build preferences-->
@@ -22,7 +22,7 @@
   </property>
   <property name="javadocdir" value="${basedir}/dist/docs/api">
   </property>
-  <property name="final.name" value="joda-time-jsptags-0.9">
+  <property name="final.name" value="joda-time-jsptags-0.9-dev">
   </property>
   <property name="proxy.host" value="">
   </property>
@@ -81,12 +81,18 @@
     </mkdir>
     <copy todir="${classesdir}/META-INF">
       <fileset dir="${basedir}/.">
-        <include name="LICENSE.txt">
-        </include>
         <include name="NOTICE.txt">
         </include>
       </fileset>
     </copy>
+    <mkdir dir="${classesdir}/META-INF">
+    </mkdir>
+    <copy todir="${classesdir}/META-INF">
+      <fileset dir="${basedir}/src/conf">
+        <include name="joda.tld">
+        </include>
+      </fileset>
+    </copy>
   </target>
   <target name="jar" description="o Create the jar" depends="compile,test">
     <jar jarfile="${defaulttargetdir}/${final.name}.jar" excludes="**/package.html" basedir="${classesdir}">
@@ -130,7 +136,7 @@
     </tstamp>
     <property name="copyright" value="Copyright &amp;copy;  Joda.org. All Rights Reserved.">
     </property>
-    <property name="title" value="Joda time JSP tags support 0.9 API">
+    <property name="title" value="Joda time JSP tags support 0.9-dev API">
     </property>
     <javadoc use="true" private="true" destdir="${javadocdir}" author="true" version="true" sourcepath="${basedir}/src/java" packagenames="org.joda.time.contrib.jsptag.*">
       <classpath>
diff --git a/JodaTimeContrib/jsptags/project.properties b/JodaTimeContrib/jsptags/project.properties
index 2c82288b7..095e4504c 100644
--- a/JodaTimeContrib/jsptags/project.properties
+++ b/JodaTimeContrib/jsptags/project.properties
@@ -13,3 +13,5 @@ maven.javadoc.public=true
 maven.javadoc.package=false
 maven.javadoc.private=false
 
+maven.jar.manifest=src/conf/manifest-additions.txt
+maven.dist.src.assembly.dir=${maven.dist.assembly.dir}/src/${maven.final.name}-src
diff --git a/JodaTimeContrib/jsptags/project.xml b/JodaTimeContrib/jsptags/project.xml
index 0ff867fba..961417717 100644
--- a/JodaTimeContrib/jsptags/project.xml
+++ b/JodaTimeContrib/jsptags/project.xml
@@ -5,7 +5,7 @@
   <groupId>joda-time</groupId>
   <name>Joda time JSP tags support</name>
   <currentVersion>0.9-dev</currentVersion>
-  <shortDescription>Joda time JSP tags support</shortDescription>
+  <shortDescription>Joda-Time JSP tags support</shortDescription>
   <description>
     Contribution to Joda-Time that adds JSP tags support
   </description>
diff --git a/JodaTimeContrib/jsptags/src/conf/manifest-additions.txt b/JodaTimeContrib/jsptags/src/conf/manifest-additions.txt
new file mode 100644
index 000000000..43ee15558
--- /dev/null
+++ b/JodaTimeContrib/jsptags/src/conf/manifest-additions.txt
@@ -0,0 +1,2 @@
+Specification-Version: 1.0
+Implementation-Vendor-Id: org.joda
\ No newline at end of file

From f8d3b7adb905fb06dee1945a6f72b95cbc01f99c Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 20 Dec 2005 00:09:16 +0000
Subject: [PATCH 123/130] Produce a better error message if unknown type

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@980 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/jsptags/RELEASE-NOTES.txt                 | 8 ++++++--
 .../java/org/joda/time/contrib/jsptag/FormatSupport.java  | 6 +++++-
 2 files changed, 11 insertions(+), 3 deletions(-)

diff --git a/JodaTimeContrib/jsptags/RELEASE-NOTES.txt b/JodaTimeContrib/jsptags/RELEASE-NOTES.txt
index 62597c0d6..54f00b313 100644
--- a/JodaTimeContrib/jsptags/RELEASE-NOTES.txt
+++ b/JodaTimeContrib/jsptags/RELEASE-NOTES.txt
@@ -1,10 +1,10 @@
-Joda-Time JSP tags contributed project version 0.8
+Joda-Time JSP tags contributed project version 1.0
 --------------------------------------------------
 
 Joda-Time is a date and time handling library that seeks to replace the JDK
 Date and Calendar classes.
 
-This is the 0.8 release of the JSP tag library support classes.
+This is the 1.0 release of the JSP tag library support classes.
 These classes were converted from code at Jakarta Taglibs by Jim Newsham.
 Please check the NOTICE.txt for the Apache credit.
 
@@ -21,6 +21,10 @@ Unlike the fmt tags which work with java.util.Date and java.util.TimeZone object
 the Joda tags work with Joda DateTime, ReadableInstant, ReadablePartial,
 and DateTimeZone objects.  
 
+Changes since 0.8
+-----------------
+Better error message in FormatSupport when object specified is of an incorrect type
+
 Build
 -----
 
diff --git a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/FormatSupport.java b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/FormatSupport.java
index 96da2526a..84eb2594e 100644
--- a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/FormatSupport.java
+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/FormatSupport.java
@@ -126,8 +126,12 @@ public int doEndTag() throws JspException {
         String formatted;
         if (value instanceof ReadableInstant) {
             formatted = formatter.print((ReadableInstant) value);
-        } else {
+        } else if (value instanceof ReadablePartial) {
             formatted = formatter.print((ReadablePartial) value);
+        } else {
+            throw new JspException(
+                "value attribute of format tag must be a ReadableInstant or ReadablePartial," +
+                " was: " + value.getClass().getName()); 
         }
 
         if (var != null) {

From b206d0a2d8fd75e56af991e4985b7876cbe98aae Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 20 Dec 2005 00:15:12 +0000
Subject: [PATCH 124/130] Fix licensing statements pre 1.0

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@981 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/jsptags/NOTICE.txt                           | 5 +++--
 .../org/joda/time/contrib/jsptag/DateTimeZoneSupport.java    | 2 +-
 .../java/org/joda/time/contrib/jsptag/DateTimeZoneTag.java   | 2 +-
 .../src/java/org/joda/time/contrib/jsptag/FormatSupport.java | 2 +-
 .../src/java/org/joda/time/contrib/jsptag/FormatTag.java     | 2 +-
 .../joda/time/contrib/jsptag/JodaTagLibraryValidator.java    | 2 +-
 .../org/joda/time/contrib/jsptag/ParseDateTimeSupport.java   | 2 +-
 .../java/org/joda/time/contrib/jsptag/ParseDateTimeTag.java  | 2 +-
 .../src/java/org/joda/time/contrib/jsptag/Resources.java     | 2 +-
 .../org/joda/time/contrib/jsptag/SetDateTimeZoneSupport.java | 2 +-
 .../org/joda/time/contrib/jsptag/SetDateTimeZoneTag.java     | 2 +-
 .../jsptags/src/java/org/joda/time/contrib/jsptag/Util.java  | 2 +-
 12 files changed, 14 insertions(+), 13 deletions(-)

diff --git a/JodaTimeContrib/jsptags/NOTICE.txt b/JodaTimeContrib/jsptags/NOTICE.txt
index 052aaf0fc..a82c77558 100644
--- a/JodaTimeContrib/jsptags/NOTICE.txt
+++ b/JodaTimeContrib/jsptags/NOTICE.txt
@@ -2,6 +2,7 @@
 = NOTICE file corresponding to section 4d of the Apache License Version 2.0 =
 =============================================================================
 This product includes software developed by
-The Apache Software Foundation (http://www.apache.org/).
-This product includes software developed by
 Joda.org (http://www.joda.org/).
+
+This product includes software developed by
+The Apache Software Foundation (http://www.apache.org/).
diff --git a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/DateTimeZoneSupport.java b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/DateTimeZoneSupport.java
index 1e25e6f73..e1c5927ec 100644
--- a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/DateTimeZoneSupport.java
+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/DateTimeZoneSupport.java
@@ -1,6 +1,6 @@
 /*
  * Copyright 1999-2004 The Apache Software Foundation.
- * Modifications, Copyright 2005 Joda.org
+ * Modifications, Copyright 2005 Stephen Colebourne
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
diff --git a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/DateTimeZoneTag.java b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/DateTimeZoneTag.java
index 6b4081a99..3b6a5d425 100644
--- a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/DateTimeZoneTag.java
+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/DateTimeZoneTag.java
@@ -1,6 +1,6 @@
 /*
  * Copyright 1999-2004 The Apache Software Foundation.
- * Modifications, Copyright 2005 Joda.org
+ * Modifications, Copyright 2005 Stephen Colebourne
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
diff --git a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/FormatSupport.java b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/FormatSupport.java
index 84eb2594e..a4f3eeb7e 100644
--- a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/FormatSupport.java
+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/FormatSupport.java
@@ -1,6 +1,6 @@
 /*
  * Copyright 1999-2004 The Apache Software Foundation.
- * Modifications, Copyright 2005 Joda.org
+ * Modifications, Copyright 2005 Stephen Colebourne
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
diff --git a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/FormatTag.java b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/FormatTag.java
index 3d86de5aa..5e3f37516 100644
--- a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/FormatTag.java
+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/FormatTag.java
@@ -1,6 +1,6 @@
 /*
  * Copyright 1999-2004 The Apache Software Foundation.
- * Modifications, Copyright 2005 Joda.org
+ * Modifications, Copyright 2005 Stephen Colebourne
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
diff --git a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/JodaTagLibraryValidator.java b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/JodaTagLibraryValidator.java
index 4f98d4aee..d6ad384ed 100644
--- a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/JodaTagLibraryValidator.java
+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/JodaTagLibraryValidator.java
@@ -1,6 +1,6 @@
 /*
  * Copyright 1999-2004 The Apache Software Foundation.
- * Modifications, Copyright 2005 Joda.org
+ * Modifications, Copyright 2005 Stephen Colebourne
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
diff --git a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/ParseDateTimeSupport.java b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/ParseDateTimeSupport.java
index aac4ae94c..d452738ee 100644
--- a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/ParseDateTimeSupport.java
+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/ParseDateTimeSupport.java
@@ -1,6 +1,6 @@
 /*
  * Copyright 1999-2004 The Apache Software Foundation.
- * Modifications, Copyright 2005 Joda.org
+ * Modifications, Copyright 2005 Stephen Colebourne
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
diff --git a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/ParseDateTimeTag.java b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/ParseDateTimeTag.java
index b1ec30355..27cf44755 100644
--- a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/ParseDateTimeTag.java
+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/ParseDateTimeTag.java
@@ -1,6 +1,6 @@
 /*
  * Copyright 1999-2004 The Apache Software Foundation.
- * Modifications, Copyright 2005 Joda.org
+ * Modifications, Copyright 2005 Stephen Colebourne
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
diff --git a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/Resources.java b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/Resources.java
index e7fd0c8ab..bf05b9b71 100644
--- a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/Resources.java
+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/Resources.java
@@ -1,6 +1,6 @@
 /*
  * Copyright 1999-2004 The Apache Software Foundation.
- * Modifications, Copyright 2005 Joda.org
+ * Modifications, Copyright 2005 Stephen Colebourne
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
diff --git a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/SetDateTimeZoneSupport.java b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/SetDateTimeZoneSupport.java
index 72ad2530f..6148b28b8 100644
--- a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/SetDateTimeZoneSupport.java
+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/SetDateTimeZoneSupport.java
@@ -1,6 +1,6 @@
 /*
  * Copyright 1999-2004 The Apache Software Foundation.
- * Modifications, Copyright 2005 Joda.org
+ * Modifications, Copyright 2005 Stephen Colebourne
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
diff --git a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/SetDateTimeZoneTag.java b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/SetDateTimeZoneTag.java
index 2afb147bd..4fd804f2f 100644
--- a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/SetDateTimeZoneTag.java
+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/SetDateTimeZoneTag.java
@@ -1,6 +1,6 @@
 /*
  * Copyright 1999-2004 The Apache Software Foundation.
- * Modifications, Copyright 2005 Joda.org
+ * Modifications, Copyright 2005 Stephen Colebourne
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
diff --git a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/Util.java b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/Util.java
index a9cda5e33..8740c8de5 100644
--- a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/Util.java
+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/Util.java
@@ -1,6 +1,6 @@
 /*
  * Copyright 1999-2004 The Apache Software Foundation.
- * Modifications, Copyright 2005 Joda.org
+ * Modifications, Copyright 2005 Stephen Colebourne
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

From 25c14085ae34ed148e7c7e311d2296abda5a011b Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 20 Dec 2005 00:22:18 +0000
Subject: [PATCH 125/130] Fix grammer

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@982 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/jsptags/xdocs/navigation.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/JodaTimeContrib/jsptags/xdocs/navigation.xml b/JodaTimeContrib/jsptags/xdocs/navigation.xml
index 682ad451a..3bd4f2313 100644
--- a/JodaTimeContrib/jsptags/xdocs/navigation.xml
+++ b/JodaTimeContrib/jsptags/xdocs/navigation.xml
@@ -13,7 +13,7 @@
     </links>
     <menu name="Joda Time JSP tags">
       <item name="Overview" href="index.html"/>
-      <item name="Users guide" href="userguide.html"/>
+      <item name="User guide" href="userguide.html"/>
       <item name="Javadoc (Release)" href="/api-release/index.html"/>
       <item name="License" href="licensecover.html"/>
       <item name="Download" href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=161360"/>

From 9f6fa529b0d8406f358fcd3a6a9f3b21fa26c3ff Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 20 Dec 2005 23:21:14 +0000
Subject: [PATCH 126/130] Remove incorrect comments

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@983 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/TimeOfDay.java        | 7 -------
 JodaTime/src/java/org/joda/time/base/BasePartial.java | 5 -----
 2 files changed, 12 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/TimeOfDay.java b/JodaTime/src/java/org/joda/time/TimeOfDay.java
index bc85658cc..8bdbff189 100644
--- a/JodaTime/src/java/org/joda/time/TimeOfDay.java
+++ b/JodaTime/src/java/org/joda/time/TimeOfDay.java
@@ -260,13 +260,6 @@ public TimeOfDay(long instant, Chronology chronology) {
      * The string format must begin with a 'T' to be recognised, such as 'T10:20'.
      * <p>
      * The chronology used will be derived from the object, defaulting to ISO.
-     * <p>
-     * Note that as from version 1.2, the default converters go to extra
-     * effort to maintain the field values of the input Date or Calendar.
-     * This means that the differences in timezone data between Joda-Time
-     * and each JDK version are now handled correctly. If you just want to
-     * use the milliseconds value without conversion you must use
-     * {@link #TimeOfDay(long, Chronology)}.
      *
      * @param instant  the datetime object, null means now
      * @throws IllegalArgumentException if the instant is invalid
diff --git a/JodaTime/src/java/org/joda/time/base/BasePartial.java b/JodaTime/src/java/org/joda/time/base/BasePartial.java
index 758a0d553..53e61e114 100644
--- a/JodaTime/src/java/org/joda/time/base/BasePartial.java
+++ b/JodaTime/src/java/org/joda/time/base/BasePartial.java
@@ -121,11 +121,6 @@ protected BasePartial(long instant, Chronology chronology) {
      * The constructor uses the time zone of the chronology specified.
      * Once the constructor is complete, all further calculations are performed
      * without reference to a timezone (by switching to UTC).
-     * <p>
-     * Note that as from version 1.2, the default converters go to extra
-     * effort to maintain the field values of the input Date or Calendar.
-     * This means that the differences in timezone data between Joda-Time
-     * and each JDK version are now handled correctly.
      *
      * @param instant  the datetime object
      * @param chronology  the chronology, null means use converter

From acf0ea001ae9f08c75bcd9db84c672ac78fe1b33 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 20 Dec 2005 23:47:23 +0000
Subject: [PATCH 127/130] Update to include more manifest fields

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@984 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/conf/MANIFEST.MF | 6 ++++--
 1 file changed, 4 insertions(+), 2 deletions(-)

diff --git a/JodaTime/src/conf/MANIFEST.MF b/JodaTime/src/conf/MANIFEST.MF
index 76804f8d4..481758153 100644
--- a/JodaTime/src/conf/MANIFEST.MF
+++ b/JodaTime/src/conf/MANIFEST.MF
@@ -1,7 +1,9 @@
+Package: org.joda.time
 Extension-Name: @name@
-Specification-Title: Joda Time
+Specification-Title: Joda-Time
 Specification-Vendor: Joda.org
-Specification-Version: @version@
+Specification-Version: 1.2
 Implementation-Vendor: Joda.org
 Implementation-Title: org.joda.time
 Implementation-Version: @version@
+Implementation-Vendor-Id: org.joda

From 5f182d305f18317af0342263516a34dfa530a53a Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 20 Dec 2005 23:48:39 +0000
Subject: [PATCH 128/130] Upgrade to time zone data 2005q

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@985 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  2 +-
 .../src/java/org/joda/time/tz/src/Readme.txt  |  2 +-
 .../src/java/org/joda/time/tz/src/antarctica  | 17 +++++------
 JodaTime/src/java/org/joda/time/tz/src/asia   |  4 +--
 .../src/java/org/joda/time/tz/src/australasia | 29 ++++++++-----------
 .../java/org/joda/time/tz/src/southamerica    |  8 +----
 .../src/java/org/joda/time/tz/src/systemv     |  4 +--
 JodaTime/xdocs/timezones.xml                  |  2 +-
 8 files changed, 27 insertions(+), 41 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 2ccd7fb89..c1c878fa8 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -32,7 +32,7 @@ Serialization compatible - Yes
   - v1.1 did not serialize the Chronology minimum days in first week field properly, v1.2 does
 
 Data compatible - Yes
-  - DateTimeZone data updated to version 2005p
+  - DateTimeZone data updated to version 2005q
 
 
 Deprecations since 1.1
diff --git a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
index f82c36d61..02d90ee3b 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
+++ b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
@@ -1,2 +1,2 @@
 The data files in this directory were obtained from the public tz database,
-http://www.twinsun.com/tz/tz-link.htm, version 2005p.
+http://www.twinsun.com/tz/tz-link.htm, version 2005q.
diff --git a/JodaTime/src/java/org/joda/time/tz/src/antarctica b/JodaTime/src/java/org/joda/time/tz/src/antarctica
index 165900c6c..835a14ba0 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/antarctica
+++ b/JodaTime/src/java/org/joda/time/tz/src/antarctica
@@ -1,4 +1,4 @@
-# @(#)antarctica	7.25
+# @(#)antarctica	7.29
 
 # From Paul Eggert (1999-11-15):
 # To keep things manageable, we list only locations occupied year-round; see
@@ -59,7 +59,7 @@ Rule	ChileAQ	2000	max	-	Mar	Sun>=9	0:00	0	-
 # Australia - territories
 # Heard Island, McDonald Islands (uninhabited)
 #	previously sealers and scientific personnel wintered
-#	<a href="http://www.dstc.qut.edu.au/DST/marg/daylight.html">
+#	<a href="http://web.archive.org/web/20021204222245/http://www.dstc.qut.edu.au/DST/marg/daylight.html">
 #	Margaret Turner reports
 #	</a> (1999-09-30) that they're UTC+5, with no DST;
 #	presumably this is when they have visitors.
@@ -106,7 +106,7 @@ Zone Antarctica/Mawson	0	-	zzz	1954 Feb 13
 
 # France - year-round bases
 #
-# From Antoine Leca <Antoine.Leca@Renault.FR> (1997-01-20):
+# From Antoine Leca (1997-01-20):
 # Time data are from Nicole Pailleau at the IFRTP
 # (French Institute for Polar Research and Technology).
 # She confirms that French Southern Territories and Terre Adelie bases
@@ -139,11 +139,10 @@ Zone Antarctica/DumontDUrville 0 -	zzz	1947
 			0	-	zzz	1956 Nov
 			10:00	-	DDUT	# Dumont-d'Urville Time
 # Reference:
-# <a href="http://www.icair.iac.org.nz/science/reports/fr/IFRTP.html">
-# Support and Development of Polar Research and Technology (1997-02-03)
+# <a href="http://en.wikipedia.org/wiki/Dumont_d'Urville_Station">
+# Dumont d'Urville Station (2005-12-05)
 # </a>
 
-
 # Germany - year-round base
 # Georg von Neumayer, -7039-00815
 
@@ -155,9 +154,7 @@ Zone Antarctica/DumontDUrville 0 -	zzz	1947
 # Syowa, -690022+0393524
 #
 # From Hideyuki Suzuki (1999-02-06):
-# In all Japanese stations, +0300 is used as the standard time.  [See]
-# <a href="http://www.crl.go.jp/uk/uk201/basyo.htm">[reference in Japanese]</a>
-# and information from KAMO Hiroyasu.
+# In all Japanese stations, +0300 is used as the standard time.
 #
 # Syowa station, which is the first antarctic station of Japan,
 # was established on 1957-01-29.  Since Syowa station is still the main
@@ -296,7 +293,7 @@ Zone Antarctica/McMurdo	0	-	zzz	1956
 # Normally it wouldn't have a separate entry, since it's like the
 # larger Antarctica/McMurdo since 1970, but it's too famous to omit.
 #
-# From Chris Carrier <72157.3334@CompuServe.COM> (1996-06-27):
+# From Chris Carrier (1996-06-27):
 # Siple, the first commander of the South Pole station,
 # stated that he would have liked to have kept GMT at the station,
 # but that he found it more convenient to keep GMT+12
diff --git a/JodaTime/src/java/org/joda/time/tz/src/asia b/JodaTime/src/java/org/joda/time/tz/src/asia
index d885534dd..c4d543b9e 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/asia
+++ b/JodaTime/src/java/org/joda/time/tz/src/asia
@@ -1,4 +1,4 @@
-# @(#)asia	7.88
+# @(#)asia	7.89
 
 # This data is by no means authoritative; if you think you know better,
 # go ahead and edit the file (and please send any changes to
@@ -85,7 +85,7 @@ Zone	Asia/Kabul	4:36:48 -	LMT	1890
 # Shanks has Yerevan switching to 3:00 (with Russian DST) in spring 1991,
 # then to 4:00 with no DST in fall 1995, then readopting Russian DST in 1997.
 # Go with Shanks, even when he disagrees with others.  Edgar Der-Danieliantz
-# <edd@AIC.NET> reported (1996-05-04) that Yerevan probably wouldn't use DST
+# reported (1996-05-04) that Yerevan probably wouldn't use DST
 # in 1996, though it did use DST in 1995.  IATA SSIM (1991/1998) reports that
 # Armenia switched from 3:00 to 4:00 in 1998 and observed DST after 1991,
 # but started switching at 3:00s in 1998.
diff --git a/JodaTime/src/java/org/joda/time/tz/src/australasia b/JodaTime/src/java/org/joda/time/tz/src/australasia
index 55b55def4..f5addd40f 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/australasia
+++ b/JodaTime/src/java/org/joda/time/tz/src/australasia
@@ -1,4 +1,4 @@
-# @(#)australasia	7.74
+# @(#)australasia	7.77
 # This file also includes Pacific islands.
 
 # Notes are at the end of this file
@@ -551,9 +551,15 @@ Zone	Pacific/Wallis	12:15:20 -	LMT	1901
 
 # Australia
 
-# <a href="http://www.dstc.qut.edu.au/DST/marg/daylight.html">
-# Australia's Daylight Saving Times
-# </a>, by Margaret Turner, summarizes daylight saving issues in Australia.
+# From Paul Eggert (2005-12-08):
+# <a href="http://www.bom.gov.au/climate/averages/tables/dst_times.shtml">
+# Implementation Dates of Daylight Saving Time within Australia
+# </a> summarizes daylight saving issues in Australia.
+
+# From Arthur David Olson (2005-12-12):
+# <a href="http://www.lawlink.nsw.gov.au/lawlink/Corporate/ll_agdinfo.nsf/pages/community_relations_daylight_saving">
+# Lawlink NSW:Daylight Saving in New South Wales
+# </a> covers New South Wales in particular.
 
 # From John Mackin (1991-03-06):
 # We in Australia have _never_ referred to DST as `daylight' time.
@@ -960,17 +966,6 @@ Zone	Pacific/Wallis	12:15:20 -	LMT	1901
 #	legislation.  This is very important to understand.
 #	I have researched New South Wales time only...
 
-# From Paul Eggert (1999-09-27):
-# The Information Service of the Australian National Standards Commission
-# <a href="http://www.nsc.gov.au/InfoServ/Ileaflet/il27.htm">
-# Daylight Saving
-# </a> page (1995-04) has an excellent overall history of Australian DST.
-# The Community Relations Division of the NSW Attorney General's Department
-# publishes a history of daylight saving in NSW.  See:
-# <a href="http://www.lawlink.nsw.gov.au/crd.nsf/pages/time2">
-# Lawlink NSW: Daylight Saving in New South Wales
-# </a>
-
 # From Eric Ulevik (1999-05-26):
 # DST will start in NSW on the last Sunday of August, rather than the usual
 # October in 2000.  [See: Matthew Moore,
@@ -1048,7 +1043,7 @@ Zone	Pacific/Wallis	12:15:20 -	LMT	1901
 # Lord Howe Island
 
 # From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
-# LHI...		[ Courtesy of Pauline Van Winsen.. pauline@Aus ]
+# LHI...		[ Courtesy of Pauline Van Winsen ]
 #					[ Dec 1990 ]
 # Lord Howe Island is located off the New South Wales coast, and is half an
 # hour ahead of NSW time.
@@ -1088,7 +1083,7 @@ Zone	Pacific/Wallis	12:15:20 -	LMT	1901
 # From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
 # # The Country of New Zealand   (Australia's east island -) Gee they hate that!
 # #				   or is Australia the west island of N.Z.
-# #	[ courtesy of Geoff Tribble.. Geofft@Aus.. Auckland N.Z. ]
+# #	[ courtesy of Geoff Tribble.. Auckland N.Z. ]
 # #				[ Nov 1990 ]
 # ...
 # Rule	NZ      1974    1988	-	Oct	lastSun	2:00	1:00	D
diff --git a/JodaTime/src/java/org/joda/time/tz/src/southamerica b/JodaTime/src/java/org/joda/time/tz/src/southamerica
index 462a253d6..be2602916 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/southamerica
+++ b/JodaTime/src/java/org/joda/time/tz/src/southamerica
@@ -1,4 +1,4 @@
-# @(#)southamerica	7.63
+# @(#)southamerica	7.65
 
 # This data is by no means authoritative; if you think you know better,
 # go ahead and edit the file (and please send any changes to
@@ -525,12 +525,6 @@ Rule	Brazil	1997	only	-	Feb	16	 0:00	0	-
 # This year, the ending date of DS was postponed to March 1
 # to help dealing with the shortages of electric power.
 #
-# From Paul Eggert (1998-02-25):
-# <a href="http://churchnet.ucsm.ac.uk/news/files2/news165.htm">
-# Brazil Prepares for Papal Visit
-# </a>,
-# Church Net UK (1997-10-02).
-#
 # Decree 2,317 (1997-09-04), adopted by same states.
 Rule	Brazil	1997	only	-	Oct	 6	 0:00	1:00	S
 # Decree <a href="http://pcdsh01.on.br/figuras/HV2495.JPG">2,495</a>
diff --git a/JodaTime/src/java/org/joda/time/tz/src/systemv b/JodaTime/src/java/org/joda/time/tz/src/systemv
index 31f0224b2..13a67fca0 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/systemv
+++ b/JodaTime/src/java/org/joda/time/tz/src/systemv
@@ -1,10 +1,10 @@
-# @(#)systemv	7.4
+# @(#)systemv	7.5
 
 # Old rules, should the need arise.
 # No attempt is made to handle Newfoundland, since it cannot be expressed
 # using the System V "TZ" scheme (half-hour offset), or anything outside
 # North America (no support for non-standard DST start/end dates), nor
-# the change in the DST rules in the US in 1987 (which occurred before
+# the changes in the DST rules in the US after 1976 (which occurred after
 # the old rules were written).
 #
 # If you need the old rules, uncomment ## lines.
diff --git a/JodaTime/xdocs/timezones.xml b/JodaTime/xdocs/timezones.xml
index a263bbe48..2e59d6b66 100644
--- a/JodaTime/xdocs/timezones.xml
+++ b/JodaTime/xdocs/timezones.xml
@@ -13,7 +13,7 @@
 <p>
 Time zone data is provided by the public <a href="http://www.twinsun.com/tz/tz-link.htm">tz</a>
 database, otherwise known as the Olson database. The following table shows all the time zones
-supported by Joda-Time, using version 2005p of the tz database. This table can be rebuilt
+supported by Joda-Time, using version 2005q of the tz database. This table can be rebuilt
 by running <code>org.joda.example.time.TimeZoneTable</code>.
 </p>
 <p>

From e17bbe64c6cf3294980d17b1bee2b7d61f999b0c Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 21 Dec 2005 20:41:47 +0000
Subject: [PATCH 129/130] Add since tags

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@986 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/DateMidnight.java             | 2 ++
 JodaTime/src/java/org/joda/time/Partial.java                  | 2 ++
 JodaTime/src/java/org/joda/time/TimeOfDay.java                | 2 ++
 JodaTime/src/java/org/joda/time/YearMonthDay.java             | 2 ++
 JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java | 2 ++
 5 files changed, 10 insertions(+)

diff --git a/JodaTime/src/java/org/joda/time/DateMidnight.java b/JodaTime/src/java/org/joda/time/DateMidnight.java
index 2e4bf7c7c..3986d7915 100644
--- a/JodaTime/src/java/org/joda/time/DateMidnight.java
+++ b/JodaTime/src/java/org/joda/time/DateMidnight.java
@@ -1109,6 +1109,7 @@ public DateMidnight setCopy(String text) {
          * The DateMidnight attached to this property is unchanged by this call.
          *
          * @return a copy of the DateMidnight with this field set to its maximum
+         * @since 1.2
          */
         public DateMidnight withMaximumValue() {
             return setCopy(getMaximumValue());
@@ -1121,6 +1122,7 @@ public DateMidnight withMaximumValue() {
          * The DateMidnight attached to this property is unchanged by this call.
          *
          * @return a copy of the DateMidnight with this field set to its minimum
+         * @since 1.2
          */
         public DateMidnight withMinimumValue() {
             return setCopy(getMinimumValue());
diff --git a/JodaTime/src/java/org/joda/time/Partial.java b/JodaTime/src/java/org/joda/time/Partial.java
index 347ef7275..038735174 100644
--- a/JodaTime/src/java/org/joda/time/Partial.java
+++ b/JodaTime/src/java/org/joda/time/Partial.java
@@ -949,6 +949,7 @@ public Partial setCopy(String text) {
          * The Partial attached to this property is unchanged by this call.
          *
          * @return a copy of the Partial with this field set to its maximum
+         * @since 1.2
          */
         public Partial withMaximumValue() {
             return setCopy(getMaximumValue());
@@ -961,6 +962,7 @@ public Partial withMaximumValue() {
          * The Partial attached to this property is unchanged by this call.
          *
          * @return a copy of the Partial with this field set to its minimum
+         * @since 1.2
          */
         public Partial withMinimumValue() {
             return setCopy(getMinimumValue());
diff --git a/JodaTime/src/java/org/joda/time/TimeOfDay.java b/JodaTime/src/java/org/joda/time/TimeOfDay.java
index 8bdbff189..979a335cd 100644
--- a/JodaTime/src/java/org/joda/time/TimeOfDay.java
+++ b/JodaTime/src/java/org/joda/time/TimeOfDay.java
@@ -1114,6 +1114,7 @@ public TimeOfDay setCopy(String text) {
          * The TimeOfDay attached to this property is unchanged by this call.
          *
          * @return a copy of the TimeOfDay with this field set to its maximum
+         * @since 1.2
          */
         public TimeOfDay withMaximumValue() {
             return setCopy(getMaximumValue());
@@ -1126,6 +1127,7 @@ public TimeOfDay withMaximumValue() {
          * The TimeOfDay attached to this property is unchanged by this call.
          *
          * @return a copy of the TimeOfDay with this field set to its minimum
+         * @since 1.2
          */
         public TimeOfDay withMinimumValue() {
             return setCopy(getMinimumValue());
diff --git a/JodaTime/src/java/org/joda/time/YearMonthDay.java b/JodaTime/src/java/org/joda/time/YearMonthDay.java
index f269a7061..22089cb1a 100644
--- a/JodaTime/src/java/org/joda/time/YearMonthDay.java
+++ b/JodaTime/src/java/org/joda/time/YearMonthDay.java
@@ -1015,6 +1015,7 @@ public YearMonthDay setCopy(String text) {
          * The YearMonthDay attached to this property is unchanged by this call.
          *
          * @return a copy of the YearMonthDay with this field set to its maximum
+         * @since 1.2
          */
         public YearMonthDay withMaximumValue() {
             return setCopy(getMaximumValue());
@@ -1027,6 +1028,7 @@ public YearMonthDay withMaximumValue() {
          * The YearMonthDay attached to this property is unchanged by this call.
          *
          * @return a copy of the YearMonthDay with this field set to its minimum
+         * @since 1.2
          */
         public YearMonthDay withMinimumValue() {
             return setCopy(getMinimumValue());
diff --git a/JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java b/JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java
index 49c83af7b..b5f916d8e 100644
--- a/JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java
@@ -462,6 +462,8 @@ protected void assemble(Fields fields) {
     //-----------------------------------------------------------------------
     /**
      * Opaque object describing a leap year pattern for the Islamic Chronology.
+     *
+     * @since 1.2
      */
     public static class LeapYearPatternType implements Serializable {
         /** Serialization lock */

From 0388a5a28319a3253ee50041ffc50d0a6e29c580 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 21 Dec 2005 23:15:13 +0000
Subject: [PATCH 130/130] Prepare for v1.2

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@987 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/build.xml              |   2 +-
 JodaTime/project.xml            |   4 +-
 JodaTime/xdocs/index.xml        |   4 +-
 JodaTime/xdocs/installation.xml |   8 ++-
 JodaTime/xdocs/upgradeto120.xml | 121 ++++++++++++++++++++++++++++++++
 5 files changed, 133 insertions(+), 6 deletions(-)

diff --git a/JodaTime/build.xml b/JodaTime/build.xml
index c49e0a17d..0e07a8559 100644
--- a/JodaTime/build.xml
+++ b/JodaTime/build.xml
@@ -27,7 +27,7 @@
   <property name="component.title"         value="Joda date and time"/>
 
   <!-- The current version number of this component -->
-  <property name="component.version"       value="1.2-dev"/>
+  <property name="component.version"       value="1.2"/>
   <property name="previous.version"        value="1.1"/>
 
   <!-- The current version number of this component -->
diff --git a/JodaTime/project.xml b/JodaTime/project.xml
index 7f02adadf..a11443fa0 100644
--- a/JodaTime/project.xml
+++ b/JodaTime/project.xml
@@ -7,7 +7,7 @@
   <groupId>joda-time</groupId>
   <artifactId>joda-time</artifactId>
   <name>Joda time</name>
-  <currentVersion>1.2-dev</currentVersion>
+  <currentVersion>1.2</currentVersion>
   <organization>
     <name>Joda.org</name>
     <url>http://www.joda.org</url>
@@ -187,7 +187,7 @@
      <report>maven-checkstyle-plugin</report>
      <!-- <report>maven-clover-plugin</report> -->
      <report>maven-jdiff-plugin</report>
-     <report>maven-jcoverage-plugin</report>
+     <!--report>maven-jcoverage-plugin</report-->
      <report>maven-developer-activity-plugin</report>
      <report>maven-file-activity-plugin</report>
      <report>maven-javadoc-plugin</report>
diff --git a/JodaTime/xdocs/index.xml b/JodaTime/xdocs/index.xml
index cc63e311b..175ada87d 100644
--- a/JodaTime/xdocs/index.xml
+++ b/JodaTime/xdocs/index.xml
@@ -35,7 +35,7 @@ public String getBirthMonthText(<b>YearMonthDay</b> dateOfBirth) {
   return dateOfBirth.monthOfYear().getAsText(Locale.ENGLISH);
 }
 </source>
-Version 1.1 was released on 2005-08-10 -
+Version 1.2 was released on 2005-12-21 -
 <a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=104212">Download now</a>
 </p>
 </section>
@@ -105,7 +105,7 @@ Various documentation is available:
 
 <section name="Releases">
 <p>
-<a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=104212">Release 1.1</a>
+<a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=104212">Release 1.2</a>
 is the current latest release.
 This release is considered stable and worthy of the 1.x tag.
 It has extensive testing suites and has been used in production.
diff --git a/JodaTime/xdocs/installation.xml b/JodaTime/xdocs/installation.xml
index 2eec5e338..14f533d32 100644
--- a/JodaTime/xdocs/installation.xml
+++ b/JodaTime/xdocs/installation.xml
@@ -12,11 +12,17 @@
 <p>
 To use Joda-Time you need to
 <a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=104212">download the latest version</a>.
-The download will contain the joda-time-1.1.jar. Once you add this to your classpath you will be able to use Joda-Time.
+The download will contain the joda-time-1.2.jar.
+Once you add this to your classpath you will be able to use Joda-Time.
+</p>
+<p>
+The binary download also includes joda-time-1.2-src-ide.zip, which is a zip file
+of the source code suitable for linking to the jar file in IDEs such as Eclipse.
 </p>
 <p>
 The release notes for upgraders can be found here:
 <ul>
+<li><a href="upgradeto120.html">Version 1.1 to Version 1.2</a></li>
 <li><a href="upgradeto110.html">Version 1.0 to Version 1.1</a></li>
 <li><a href="upgradeto100.html">Version 0.99 to Version 1.0</a></li>
 <li><a href="upgradeto099.html">Version 0.98 to Version 0.99</a></li>
diff --git a/JodaTime/xdocs/upgradeto120.xml b/JodaTime/xdocs/upgradeto120.xml
index 222d6a8bc..099e5dd4b 100644
--- a/JodaTime/xdocs/upgradeto120.xml
+++ b/JodaTime/xdocs/upgradeto120.xml
@@ -13,6 +13,127 @@
 These are the release notes and advice for upgrading Joda-Time from
 version 1.1 to version 1.2.
 <source>
+Joda-Time version 1.2
+---------------------
+
+Joda-Time is a date and time handling library that seeks to replace the JDK
+Date and Calendar classes.
+
+This is the third full release of Joda-Time.
+This release focuses on bug fixes, with a few new features.
+
+We recommend JDK 1.3 or later, and have performed no testing on earlier JDKs.
+
+Joda-Time is licensed under the business-friendly Apache License Version 2.
+This is the same license as all of Apache, plus other open source projects such as Spring.
+The intent is to make the code available to the Java community with the minimum
+of restrictions. If the license causes you problems please contact the mailing list.
+
+** Please also check out the JSP and Hibernate contributed projects **
+
+
+Incompatible changes since 1.1
+------------------------------
+Binary compatible - Yes, except
+  - The internal classes BaseGJChronology and CommonGJChronology have been removed
+    They were implementation classes and you should not have been using them
+    Please contact the mailing list if this causes you problems
+
+Source compatible - Yes
+  - v1.1 and v1.2 are source compatible in their public and protected API
+
+Serialization compatible - Yes
+  - Chronology serialization has changed, however the two formats are compatible
+  - v1.1 did not serialize the Chronology minimum days in first week field properly, v1.2 does
+
+Data compatible - Yes
+  - DateTimeZone data updated to version 2005q
+
+
+Deprecations since 1.1
+----------------------
+- Chronology factory methods, such as getISO() and getCopticUTC()
+  You should now use the chrono package directly:
+    Chronology.getCoptic(zone)   is replaced by
+    CopticChronology.getInstance(zone)
+  These factory methods have been removed as they were unable to scale
+  suitably as more and more chronologies are added
+
+
+Bug fixes since 1.1
+-------------------
+- ZonedChronology
+  getMaximumValue(ReadablePartial)/getMinimumValue(ReadablePartial)
+  Methods returned incorrect result
+
+- ZonedChronology
+  Better detection and handling of offset calculation overflow, throwing
+  an ArithmeticException.
+
+- DateTimeZone
+  Handles offset calculation overflow errors for instants near Long.MAX_VALUE,
+  ending the offset transition sequence.
+
+- DateTimeFormatter
+  Reverts to UTC if time zone offset calculation causes overflow. This allows at least
+  the time of day fields to be printed for instants near Long.MIN_VALUE or Long.MAX_VALUE.
+
+- CopticChronology
+  Fixed regression in month of year calculation which affected getMaximumValue
+  on dayOfMonth field.
+
+- CopticChronology
+  Fixed month duration field to handle short 13th month correctly.
+
+- ZonedChronology
+  Fixed getting text values for fields from getAs[Short]Text(int value, Locale locale).
+
+- Gregorian, Julian, GJ and Coptic
+  These Chronology classes did not correctly store the minimum days in first week
+  during serialization
+
+- DateTimeFormatter
+  Fixed printing of time zone name near DST transition
+
+- YearMonthDay
+  Fixed addition where date starts on a leap day
+  Fixed addition in the GJChronology
+
+- DateTimeFormat
+  Pattern letter 'K' was using the wrong underlying implementation
+
+
+Enhancements since 1.1
+----------------------
+- IslamicChronology
+- EthiopicChronology
+  New Chronologies
+
+- DateTime.Property.withMaximumValue() (also DateMidnight/YearMonthDay etc)
+- DateTime.Property.withMinimumValue()
+  Returns a copy of the base datetime with the specified field set to
+  the maximum or minimum value. This is useful to get the last day of the month.
+  - DateTime lastDayOfMonth = dt.dayOfMonth().withMaximumValue();
+
+- DateTime.Property.toInterval() (also DateMidnight/MutableDateTime)
+  New method to convert return an Interval object over the span of the property
+  Thus dt.monthOfYear().toInterval() returns an interval from the start to
+  the end of the month
+
+- MutableDateTime.property(DateTimeFieldType)
+  Gets the property by type. Complements the method already on DateTime/DateMidnight.
+
+- YearMonthDay.fromCalendarFields()
+- YearMonthDay.fromDateFields()
+- TimeOfDay.fromCalendarFields()
+- TimeOfDay.fromDateFields()
+  New factory methods to create a YearMonthDay/TimeOfDay using exactly the same
+  field values as the JDK objects, thus ignoring time zone effects
+
+- FieldUtils
+  Performance optimization when adding by scalars of one or negative one. The
+  overflow detecting multiplication skips the multiply and divide check for
+  these values.
 </source>
 </p>
 </section>