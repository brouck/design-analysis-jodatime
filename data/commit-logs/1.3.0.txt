From e02e706fb6832e896550d9d0ee2d1e33fd05df4f Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Thu, 22 Dec 2005 00:30:20 +0000
Subject: [PATCH 001/115] Update dependency to joda-time-1.2

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@990 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/jsptags/RELEASE-NOTES.txt   | 4 ++--
 JodaTimeContrib/jsptags/xdocs/userguide.xml | 2 +-
 2 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/JodaTimeContrib/jsptags/RELEASE-NOTES.txt b/JodaTimeContrib/jsptags/RELEASE-NOTES.txt
index 54f00b313..6ef7e02b6 100644
--- a/JodaTimeContrib/jsptags/RELEASE-NOTES.txt
+++ b/JodaTimeContrib/jsptags/RELEASE-NOTES.txt
@@ -28,14 +28,14 @@ Better error message in FormatSupport when object specified is of an incorrect t
 Build
 -----
 
-Build-time dependencies are Joda 1.1, the Servlet 2.4 API, the
+Build-time dependencies are Joda 1.0 or later, the Servlet 2.4 API, the
 JSP 2.0 API, and JSTL 1.1 API. A source build can be achieved from ant or maven.
 
 Setup
 -----
 
 You'll need a servlet container which supports Servlet 2.4, JSP 2.0, JSTL 1.1.
-Copy the joda-time-1.1.jar and joda-time-tags.jar to the WEB-INF/lib directory of
+Copy the joda-time-1.2.jar and joda-time-tags.jar to the WEB-INF/lib directory of
 your web application.  Declare the library as follows in your jsp pages:
 
 <%@taglib prefix="joda" uri="http://www.joda.org/joda/time/tags"%>
diff --git a/JodaTimeContrib/jsptags/xdocs/userguide.xml b/JodaTimeContrib/jsptags/xdocs/userguide.xml
index 6badaebff..6a7f3655c 100644
--- a/JodaTimeContrib/jsptags/xdocs/userguide.xml
+++ b/JodaTimeContrib/jsptags/xdocs/userguide.xml
@@ -31,7 +31,7 @@ You will need a servlet container which supports Servlet 2.4, JSP 2.0, JSTL 1.1.
 One such container is <a href="http://tomcat.apache.org">Tomcat 5</a>.
 </p>
 <p>
-The simplest setup is to copy the joda-time-1.1.jar and joda-time-jsptags-0.8.jar
+The simplest setup is to copy the joda-time-1.2.jar and joda-time-jsptags-1.0.jar
 to the WEB-INF/lib directory of your web application.
 </p>
 <p>

From f2ba0364875a1310fd14c051735665a0fe4efa6a Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Thu, 22 Dec 2005 23:06:54 +0000
Subject: [PATCH 002/115] Increase version to 1.3 SNAPSHOT

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@991 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/build.xml   | 4 ++--
 JodaTime/project.xml | 2 +-
 2 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/JodaTime/build.xml b/JodaTime/build.xml
index 0e07a8559..86d3683dc 100644
--- a/JodaTime/build.xml
+++ b/JodaTime/build.xml
@@ -27,8 +27,8 @@
   <property name="component.title"         value="Joda date and time"/>
 
   <!-- The current version number of this component -->
-  <property name="component.version"       value="1.2"/>
-  <property name="previous.version"        value="1.1"/>
+  <property name="component.version"       value="1.3-SNAPSHOT"/>
+  <property name="previous.version"        value="1.2"/>
 
   <!-- The current version number of this component -->
   <property name="component.fullname"      value="${component.name}-${component.version}"/>
diff --git a/JodaTime/project.xml b/JodaTime/project.xml
index a11443fa0..61e46e60e 100644
--- a/JodaTime/project.xml
+++ b/JodaTime/project.xml
@@ -7,7 +7,7 @@
   <groupId>joda-time</groupId>
   <artifactId>joda-time</artifactId>
   <name>Joda time</name>
-  <currentVersion>1.2</currentVersion>
+  <currentVersion>1.3-SNAPSHOT</currentVersion>
   <organization>
     <name>Joda.org</name>
     <url>http://www.joda.org</url>

From 7bd8f09da0737948e428654e83a18998c4bf8cc3 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Thu, 22 Dec 2005 23:08:56 +0000
Subject: [PATCH 003/115] Normalise plugins for users

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@992 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/project.xml | 7 ++++---
 1 file changed, 4 insertions(+), 3 deletions(-)

diff --git a/JodaTime/project.xml b/JodaTime/project.xml
index 61e46e60e..77e625538 100644
--- a/JodaTime/project.xml
+++ b/JodaTime/project.xml
@@ -185,13 +185,14 @@
      <report>maven-changelog-plugin</report>
      <report>maven-changes-plugin</report>
      <report>maven-checkstyle-plugin</report>
+     <!-- <report>maven-findbugs-plugin</report> -->
+     <!-- <report>maven-jdiff-plugin</report> -->
      <!-- <report>maven-clover-plugin</report> -->
-     <report>maven-jdiff-plugin</report>
-     <!--report>maven-jcoverage-plugin</report-->
+     <!-- <report>maven-jcoverage-plugin</report> -->
+     <!-- <report>maven-cobertura-plugin</report> -->
      <report>maven-developer-activity-plugin</report>
      <report>maven-file-activity-plugin</report>
      <report>maven-javadoc-plugin</report>
-     <!-- <report>maven-jellydoc-plugin</report> -->
      <report>maven-junit-report-plugin</report>
      <report>maven-jxr-plugin</report>
      <report>maven-license-plugin</report>

From 79c63c419bad3a8d53265299e3a9120d6c3de3a0 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Thu, 22 Dec 2005 23:09:45 +0000
Subject: [PATCH 004/115] We now have 8 calendars

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@993 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/index.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/JodaTime/xdocs/index.xml b/JodaTime/xdocs/index.xml
index 175ada87d..cf1ecc341 100644
--- a/JodaTime/xdocs/index.xml
+++ b/JodaTime/xdocs/index.xml
@@ -65,7 +65,7 @@ the public <a href="http://www.twinsun.com/tz/tz-link.htm">tz database</a>, whic
 updated several times a year. New Joda-Time releases incorporate all changes
 made to this database. Should the changes be needed earlier, manually updating
 and building Joda-Time is easy.</li>
-<li><b>Calendar support</b>. The library currently provides 6 calendar systems. More
+<li><b>Calendar support</b>. The library currently provides 8 calendar systems. More
 will be added in the future.</li>
 <li><b>Easy interoperability</b>. The library internally uses a millisecond instant
 which is identical to the JDK and similar to other common time representations. This makes

From eda247ae0f4280d0276678822ebf4d6aeba9895b Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Thu, 22 Dec 2005 23:10:35 +0000
Subject: [PATCH 005/115] Switch to cobertura

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@994 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/navigation.xml | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

diff --git a/JodaTime/xdocs/navigation.xml b/JodaTime/xdocs/navigation.xml
index ffd9ddd57..cb0be0335 100644
--- a/JodaTime/xdocs/navigation.xml
+++ b/JodaTime/xdocs/navigation.xml
@@ -45,8 +45,7 @@
     <menu name="Development">
       <item name="Sourceforge" href="http://sourceforge.net/projects/joda-time/"/>
       <item name="Test results" href="/junit-report.html"/>
-      <!--item name="Test coverage" href="/clover/index.html"/-->
-      <item name="Test coverage" href="/jcoverage/index.html"/>
+      <item name="Test coverage" href="/cobertura/index.html"/>
       <item name="Mailing lists" href="/mail-lists.html"/>
       <item name="Tasks" href="/tasks.html"/>
       <item name="CVS" href="http://cvs.sourceforge.net/viewcvs.py/joda-time/JodaTime/"/>

From 4f77bfc115870fecec08de2b762ba4ac3642a0d2 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Thu, 22 Dec 2005 23:42:46 +0000
Subject: [PATCH 006/115] Minor typo in error message

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@995 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/field/FieldUtils.java | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/JodaTime/src/java/org/joda/time/field/FieldUtils.java b/JodaTime/src/java/org/joda/time/field/FieldUtils.java
index 8fd0be239..7859c3a19 100644
--- a/JodaTime/src/java/org/joda/time/field/FieldUtils.java
+++ b/JodaTime/src/java/org/joda/time/field/FieldUtils.java
@@ -47,7 +47,7 @@ private FieldUtils() {
      */
     public static int safeNegate(int value) {
         if (value == Integer.MIN_VALUE) {
-            throw new ArithmeticException("Integer.MIN_VALUE cannoy be negated");
+            throw new ArithmeticException("Integer.MIN_VALUE cannot be negated");
         }
         return -value;
     }

From 386da71584b2390f47d116389fe2f7802f626f5e Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 23 Dec 2005 00:05:47 +0000
Subject: [PATCH 007/115] Post release 1.2

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@996 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt | 95 ++++----------------------------------
 1 file changed, 8 insertions(+), 87 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index c1c878fa8..7875a11d3 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -1,10 +1,10 @@
-Joda-Time version 1.2
+Joda-Time version 1.3
 ---------------------
 
 Joda-Time is a date and time handling library that seeks to replace the JDK
 Date and Calendar classes.
 
-This is the third full release of Joda-Time.
+This is the fourth full release of Joda-Time.
 This release focuses on bug fixes, with a few new features.
 
 We recommend JDK 1.3 or later, and have performed no testing on earlier JDKs.
@@ -17,108 +17,29 @@ of restrictions. If the license causes you problems please contact the mailing l
 ** Please also check out the JSP and Hibernate contributed projects **
 
 
-Incompatible changes since 1.1
+Incompatible changes since 1.2
 ------------------------------
-Binary compatible - Yes, except
-  - The internal classes BaseGJChronology and CommonGJChronology have been removed
-    They were implementation classes and you should not have been using them
-    Please contact the mailing list if this causes you problems
+Binary compatible - Yes
 
 Source compatible - Yes
-  - v1.1 and v1.2 are source compatible in their public and protected API
+  - v1.2 and v1.3 are source compatible in their public and protected API
 
 Serialization compatible - Yes
-  - Chronology serialization has changed, however the two formats are compatible
-  - v1.1 did not serialize the Chronology minimum days in first week field properly, v1.2 does
 
 Data compatible - Yes
   - DateTimeZone data updated to version 2005q
 
 
-Deprecations since 1.1
+Deprecations since 1.2
 ----------------------
-- Chronology factory methods, such as getISO() and getCopticUTC()
-  You should now use the chrono package directly:
-    Chronology.getCoptic(zone)   is replaced by
-    CopticChronology.getInstance(zone)
-  These factory methods have been removed as they were unable to scale
-  suitably as more and more chronologies are added
 
 
-Bug fixes since 1.1
+Bug fixes since 1.2
 -------------------
-- ZonedChronology
-  getMaximumValue(ReadablePartial)/getMinimumValue(ReadablePartial)
-  Methods returned incorrect result
 
-- ZonedChronology
-  Better detection and handling of offset calculation overflow, throwing
-  an ArithmeticException.
 
-- DateTimeZone
-  Handles offset calculation overflow errors for instants near Long.MAX_VALUE,
-  ending the offset transition sequence.
-
-- DateTimeFormatter
-  Reverts to UTC if time zone offset calculation causes overflow. This allows at least
-  the time of day fields to be printed for instants near Long.MIN_VALUE or Long.MAX_VALUE.
-
-- CopticChronology
-  Fixed regression in month of year calculation which affected getMaximumValue
-  on dayOfMonth field.
-
-- CopticChronology
-  Fixed month duration field to handle short 13th month correctly.
-
-- ZonedChronology
-  Fixed getting text values for fields from getAs[Short]Text(int value, Locale locale).
-
-- Gregorian, Julian, GJ and Coptic
-  These Chronology classes did not correctly store the minimum days in first week
-  during serialization
-
-- DateTimeFormatter
-  Fixed printing of time zone name near DST transition
-
-- YearMonthDay
-  Fixed addition where date starts on a leap day
-  Fixed addition in the GJChronology
-
-- DateTimeFormat
-  Pattern letter 'K' was using the wrong underlying implementation
-
-
-Enhancements since 1.1
+Enhancements since 1.2
 ----------------------
-- IslamicChronology
-- EthiopicChronology
-  New Chronologies
-
-- DateTime.Property.withMaximumValue() (also DateMidnight/YearMonthDay etc)
-- DateTime.Property.withMinimumValue()
-  Returns a copy of the base datetime with the specified field set to
-  the maximum or minimum value. This is useful to get the last day of the month.
-  - DateTime lastDayOfMonth = dt.dayOfMonth().withMaximumValue();
-
-- DateTime.Property.toInterval() (also DateMidnight/MutableDateTime)
-  New method to convert return an Interval object over the span of the property
-  Thus dt.monthOfYear().toInterval() returns an interval from the start to
-  the end of the month
-
-- MutableDateTime.property(DateTimeFieldType)
-  Gets the property by type. Complements the method already on DateTime/DateMidnight.
-
-- YearMonthDay.fromCalendarFields()
-- YearMonthDay.fromDateFields()
-- TimeOfDay.fromCalendarFields()
-- TimeOfDay.fromDateFields()
-  New factory methods to create a YearMonthDay/TimeOfDay using exactly the same
-  field values as the JDK objects, thus ignoring time zone effects
-
-- FieldUtils
-  Performance optimization when adding by scalars of one or negative one. The
-  overflow detecting multiplication skips the multiply and divide check for
-  these values.
 
 
 Feedback

From e38e7ad1ec59174a75b496a159b34a788a3c5b31 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 23 Dec 2005 00:05:57 +0000
Subject: [PATCH 008/115] Switch to cobertura

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@997 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/.cvsignore | 1 +
 1 file changed, 1 insertion(+)

diff --git a/JodaTime/.cvsignore b/JodaTime/.cvsignore
index a6b445cc2..ab626be16 100644
--- a/JodaTime/.cvsignore
+++ b/JodaTime/.cvsignore
@@ -12,3 +12,4 @@ lib
 .dj*
 release
 .settings
+*.ser

From 87ac8e95c4317d1fd366cb2d5484a6024d3474b7 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 23 Dec 2005 00:06:57 +0000
Subject: [PATCH 009/115] Fix parser to correctly estimate parsed length from
 FindBugs

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@998 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                                     | 3 +++
 .../java/org/joda/time/format/DateTimeFormatterBuilder.java    | 2 +-
 2 files changed, 4 insertions(+), 1 deletion(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 7875a11d3..de6285f02 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -36,6 +36,9 @@ Deprecations since 1.2
 
 Bug fixes since 1.2
 -------------------
+- DateTimeFormatterBuilder.MatchingParser
+  Previously didn't estimate parsed length correctly
+
 
 
 Enhancements since 1.2
diff --git a/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java b/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java
index 3372c2bcb..a19c7f8e6 100644
--- a/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java
+++ b/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java
@@ -2444,7 +2444,7 @@ private void addArrayToList(List list, Object[] array) {
                 if (parser != null) {
                     int len = parser.estimateParsedLength();
                     if (len > est) {
-                        len = est;
+                        est = len;
                     }
                 }
             }

From a7236b6d711d55fedec812d4188801c6d6d5a378 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 23 Dec 2005 00:08:09 +0000
Subject: [PATCH 010/115] Fix hashcode on partial property classes from
 FindBugs

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@999 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  2 ++
 .../field/AbstractPartialFieldProperty.java   | 14 ++++++++
 .../time/TestYearMonthDay_Properties.java     | 36 +++++++++++++++++++
 3 files changed, 52 insertions(+)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index de6285f02..100b50ef5 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -39,6 +39,8 @@ Bug fixes since 1.2
 - DateTimeFormatterBuilder.MatchingParser
   Previously didn't estimate parsed length correctly
 
+- YearMonthDay/TimeOfDay/Partial.Property
+  Hashcode was not defined
 
 
 Enhancements since 1.2
diff --git a/JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java b/JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java
index c13e21bea..237356425 100644
--- a/JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java
+++ b/JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java
@@ -333,6 +333,20 @@ public boolean equals(Object object) {
         return false;
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Gets a suitable hashcode for the object.
+     * 
+     * @return the hashcode
+     */
+    public int hashCode() {
+        int hash = 19;
+        hash = 13 * hash + get();
+        hash = 13 * hash + getFieldType().hashCode();
+        hash = 13 * hash + getReadablePartial().getChronology().hashCode();
+        return hash;
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Output a debugging string.
diff --git a/JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java b/JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java
index 51bb8d78b..dda62747b 100644
--- a/JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java
+++ b/JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java
@@ -20,6 +20,8 @@
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
 
+import org.joda.time.chrono.CopticChronology;
+
 /**
  * This class is a Junit unit test for YearMonthDay.
  *
@@ -478,6 +480,40 @@ public void testPropertyCompareToDay() {
         } catch (IllegalArgumentException ex) {}
     }
 
+    public void testPropertyEquals() {
+        YearMonthDay test1 = new YearMonthDay(2005, 11, 8);
+        YearMonthDay test2 = new YearMonthDay(2005, 11, 9);
+        YearMonthDay test3 = new YearMonthDay(2005, 11, 8, CopticChronology.getInstanceUTC());
+        assertEquals(false, test1.dayOfMonth().equals(test1.year()));
+        assertEquals(false, test1.dayOfMonth().equals(test1.monthOfYear()));
+        assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth()));
+        assertEquals(false, test1.dayOfMonth().equals(test2.year()));
+        assertEquals(false, test1.dayOfMonth().equals(test2.monthOfYear()));
+        assertEquals(false, test1.dayOfMonth().equals(test2.dayOfMonth()));
+        
+        assertEquals(false, test1.monthOfYear().equals(test1.year()));
+        assertEquals(true, test1.monthOfYear().equals(test1.monthOfYear()));
+        assertEquals(false, test1.monthOfYear().equals(test1.dayOfMonth()));
+        assertEquals(false, test1.monthOfYear().equals(test2.year()));
+        assertEquals(true, test1.monthOfYear().equals(test2.monthOfYear()));
+        assertEquals(false, test1.monthOfYear().equals(test2.dayOfMonth()));
+        
+        assertEquals(false, test1.dayOfMonth().equals(null));
+        assertEquals(false, test1.dayOfMonth().equals("any"));
+        
+        // chrono
+        assertEquals(false, test1.dayOfMonth().equals(test3.dayOfMonth()));
+    }
+
+    public void testPropertyHashCode() {
+        YearMonthDay test1 = new YearMonthDay(2005, 11, 8);
+        YearMonthDay test2 = new YearMonthDay(2005, 11, 9);
+        assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode());
+        assertEquals(false, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());
+        assertEquals(true, test1.monthOfYear().hashCode() == test1.monthOfYear().hashCode());
+        assertEquals(true, test1.monthOfYear().hashCode() == test2.monthOfYear().hashCode());
+    }
+
     //-----------------------------------------------------------------------
     private void check(YearMonthDay test, int year, int month, int day) {
         assertEquals(year, test.getYear());

From 5757bcc8944ec6a661a08f8c9329e81c000e9f30 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 23 Dec 2005 00:17:52 +0000
Subject: [PATCH 011/115] Fix date time zone hashcode from FindBugs

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1000 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  3 +
 .../org/joda/time/tz/FixedDateTimeZone.java   |  5 ++
 .../src/test/org/joda/time/tz/TestAll.java    |  1 +
 .../joda/time/tz/TestFixedDateTimeZone.java   | 81 +++++++++++++++++++
 4 files changed, 90 insertions(+)
 create mode 100644 JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 100b50ef5..e79b4d79c 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -42,6 +42,9 @@ Bug fixes since 1.2
 - YearMonthDay/TimeOfDay/Partial.Property
   Hashcode was not defined
 
+- FixedDateTimeZone
+  Hashcode was not defined
+
 
 Enhancements since 1.2
 ----------------------
diff --git a/JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java b/JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java
index f6be380cc..468f1a331 100644
--- a/JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java
+++ b/JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java
@@ -82,4 +82,9 @@ public boolean equals(Object obj) {
         }
         return false;
     }
+
+    public int hashCode() {
+        return getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;
+    }
+
 }
diff --git a/JodaTime/src/test/org/joda/time/tz/TestAll.java b/JodaTime/src/test/org/joda/time/tz/TestAll.java
index 766db1d43..a59078ce9 100644
--- a/JodaTime/src/test/org/joda/time/tz/TestAll.java
+++ b/JodaTime/src/test/org/joda/time/tz/TestAll.java
@@ -37,6 +37,7 @@ public static Test suite() {
         suite.addTest(TestUTCProvider.suite());
         suite.addTest(TestBuilder.suite());
         suite.addTest(TestCompiler.suite());
+        suite.addTest(TestFixedDateTimeZone.suite());
         return suite;
     }
 
diff --git a/JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java b/JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java
new file mode 100644
index 000000000..8e84c95b7
--- /dev/null
+++ b/JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java
@@ -0,0 +1,81 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.tz;
+
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+import org.joda.time.DateTimeZone;
+
+/**
+ * Test cases for FixedDateTimeZone.
+ *
+ * @author Stephen Colebourne
+ */
+public class TestFixedDateTimeZone extends TestCase {
+
+    public static void main(String[] args) {
+        junit.textui.TestRunner.run(suite());
+    }
+
+    public static TestSuite suite() {
+        return new TestSuite(TestFixedDateTimeZone.class);
+    }
+
+    private DateTimeZone originalDateTimeZone = null;
+
+    public TestFixedDateTimeZone(String name) {
+        super(name);
+    }
+
+    protected void setUp() throws Exception {
+        originalDateTimeZone = DateTimeZone.getDefault();
+        DateTimeZone.setDefault(DateTimeZone.UTC);
+    }
+
+    protected void tearDown() throws Exception {
+        DateTimeZone.setDefault(originalDateTimeZone);
+    }
+
+    public void testEquals() throws Exception {
+        FixedDateTimeZone zone1 = new FixedDateTimeZone("A", "B", 1, 5);
+        FixedDateTimeZone zone1b = new FixedDateTimeZone("A", "B", 1, 5);
+        FixedDateTimeZone zone2 = new FixedDateTimeZone("A", "C", 1, 5);
+        FixedDateTimeZone zone3 = new FixedDateTimeZone("A", "B", 2, 5);
+        FixedDateTimeZone zone4 = new FixedDateTimeZone("A", "B", 1, 6);
+        
+        assertEquals(true, zone1.equals(zone1));
+        assertEquals(true, zone1.equals(zone1b));
+        assertEquals(true, zone1.equals(zone2));  // second arg ignored
+        assertEquals(false, zone1.equals(zone3));
+        assertEquals(false, zone1.equals(zone4));
+    }
+
+    public void testHashCode() throws Exception {
+        FixedDateTimeZone zone1 = new FixedDateTimeZone("A", "B", 1, 5);
+        FixedDateTimeZone zone1b = new FixedDateTimeZone("A", "B", 1, 5);
+        FixedDateTimeZone zone2 = new FixedDateTimeZone("A", "C", 1, 5);
+        FixedDateTimeZone zone3 = new FixedDateTimeZone("A", "B", 2, 5);
+        FixedDateTimeZone zone4 = new FixedDateTimeZone("A", "B", 1, 6);
+        
+        assertEquals(true, zone1.hashCode() == zone1.hashCode());
+        assertEquals(true, zone1.hashCode() == zone1b.hashCode());
+        assertEquals(true, zone1.hashCode() == zone2.hashCode());  // second arg ignored
+        assertEquals(false, zone1.hashCode() == zone3.hashCode());
+        assertEquals(false, zone1.hashCode() == zone4.hashCode());
+    }
+
+}

From 2e6b5ce03c73eef4b4639fe9f8f356cc919ff1c3 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Tue, 27 Dec 2005 17:03:05 +0000
Subject: [PATCH 012/115] Updated tz data to version 2005r.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1001 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/java/org/joda/time/tz/src/Readme.txt  |    2 +-
 JodaTime/src/java/org/joda/time/tz/src/africa | 1243 ++---
 .../src/java/org/joda/time/tz/src/antarctica  |  633 +--
 JodaTime/src/java/org/joda/time/tz/src/asia   | 3283 +++++------
 .../src/java/org/joda/time/tz/src/australasia | 2800 +++++-----
 .../src/java/org/joda/time/tz/src/backward    |  219 +-
 JodaTime/src/java/org/joda/time/tz/src/europe | 4893 +++++++++--------
 .../java/org/joda/time/tz/src/northamerica    | 4285 ++++++++-------
 .../java/org/joda/time/tz/src/southamerica    | 2141 ++++----
 9 files changed, 9772 insertions(+), 9727 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
index 02d90ee3b..283485db1 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
+++ b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
@@ -1,2 +1,2 @@
 The data files in this directory were obtained from the public tz database,
-http://www.twinsun.com/tz/tz-link.htm, version 2005q.
+http://www.twinsun.com/tz/tz-link.htm, version 2005r.
diff --git a/JodaTime/src/java/org/joda/time/tz/src/africa b/JodaTime/src/java/org/joda/time/tz/src/africa
index 88a1e4280..153e2546b 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/africa
+++ b/JodaTime/src/java/org/joda/time/tz/src/africa
@@ -1,621 +1,622 @@
-# @(#)africa	7.39
-
-# This data is by no means authoritative; if you think you know better,
-# go ahead and edit the file (and please send any changes to
-# tz@elsie.nci.nih.gov for general use in the future).
-
-# From Paul Eggert (1999-03-22):
-#
-# A good source for time zone historical data outside the U.S. is
-# Thomas G. Shanks, The International Atlas (5th edition),
-# San Diego: ACS Publications, Inc. (1999).
-#
-# Gwillim Law writes that a good source
-# for recent time zone data is the International Air Transport
-# Association's Standard Schedules Information Manual (IATA SSIM),
-# published semiannually.  Law sent in several helpful summaries
-# of the IATA's data after 1990.
-#
-# Except where otherwise noted, Shanks is the source for entries through 1990,
-# and IATA SSIM is the source for entries after 1990.
-#
-# Another source occasionally used is Edward W. Whitman, World Time Differences,
-# Whitman Publishing Co, 2 Niagara Av, Ealing, London (undated), which
-# I found in the UCLA library.
-#
-# A reliable and entertaining source about time zones is
-# Derek Howse, Greenwich time and longitude, Philip Wilson Publishers (1997).
-#
-# Previous editions of this database used WAT, CAT, SAT, and EAT
-# for +0:00 through +3:00, respectively,
-# but Mark R V Murray reports that
-# `SAST' is the official abbreviation for +2:00 in the country of South Africa,
-# `CAT' is commonly used for +2:00 in countries north of South Africa, and
-# `WAT' is probably the best name for +1:00, as the common phrase for
-# the area that includes Nigeria is ``West Africa''.
-# He has heard of ``Western Sahara Time'' for +0:00 but can find no reference.
-#
-# To make things confusing, `WAT' seems to have been used for -1:00 long ago;
-# I'd guess that this was because people needed _some_ name for -1:00,
-# and at the time, far west Africa was the only major land area in -1:00.
-# This usage is now obsolete, as the last use of -1:00 on the African
-# mainland seems to have been 1976 in Western Sahara.
-#
-# To summarize, the following abbreviations seem to have some currency:
-#	-1:00	WAT	West Africa Time (no longer used)
-#	 0:00	GMT	Greenwich Mean Time
-#	 2:00	CAT	Central Africa Time
-#	 2:00	SAST	South Africa Standard Time
-# and Murray suggests the following abbreviation:
-#	 1:00	WAT	West Africa Time
-# I realize that this leads to `WAT' being used for both -1:00 and 1:00
-# for times before 1976, but this is the best I can think of
-# until we get more information.
-#
-# I invented the following abbreviations; corrections are welcome!
-#	 2:00	WAST	West Africa Summer Time
-#	 2:30	BEAT	British East Africa Time (no longer used)
-#	 2:44:45 BEAUT	British East Africa Unified Time (no longer used)
-#	 3:00	CAST	Central Africa Summer Time (no longer used)
-#	 3:00	SAST	South Africa Summer Time (no longer used)
-#	 3:00	EAT	East Africa Time
-#	 4:00	EAST	East Africa Summer Time (no longer used)
-
-# Algeria
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Algeria	1916	only	-	Jun	14	23:00s	1:00	S
-Rule	Algeria	1916	1919	-	Oct	Sun<=7	23:00s	0	-
-Rule	Algeria	1917	only	-	Mar	24	23:00s	1:00	S
-Rule	Algeria	1918	only	-	Mar	 9	23:00s	1:00	S
-Rule	Algeria	1919	only	-	Mar	 1	23:00s	1:00	S
-Rule	Algeria	1920	only	-	Feb	14	23:00s	1:00	S
-Rule	Algeria	1920	only	-	Oct	23	23:00s	0	-
-Rule	Algeria	1921	only	-	Mar	14	23:00s	1:00	S
-Rule	Algeria	1921	only	-	Jun	21	23:00s	0	-
-Rule	Algeria	1939	only	-	Sep	11	23:00s	1:00	S
-Rule	Algeria	1939	only	-	Nov	19	 1:00	0	-
-Rule	Algeria	1944	1945	-	Apr	Mon<=7	 2:00	1:00	S
-Rule	Algeria	1944	only	-	Oct	 8	 2:00	0	-
-Rule	Algeria	1945	only	-	Sep	16	 1:00	0	-
-Rule	Algeria	1971	only	-	Apr	25	23:00s	1:00	S
-Rule	Algeria	1971	only	-	Sep	26	23:00s	0	-
-Rule	Algeria	1977	only	-	May	 6	 0:00	1:00	S
-Rule	Algeria	1977	only	-	Oct	21	 0:00	0	-
-Rule	Algeria	1978	only	-	Mar	24	 1:00	1:00	S
-Rule	Algeria	1978	only	-	Sep	22	 3:00	0	-
-Rule	Algeria	1980	only	-	Apr	25	 0:00	1:00	S
-Rule	Algeria	1980	only	-	Oct	31	 2:00	0	-
-# Shanks gives 0:09 for Paris Mean Time; go with Howse's more precise 0:09:21.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Algiers	0:12:12 -	LMT	1891 Mar 15 0:01
-			0:09:21	-	PMT	1911 Mar 11    # Paris Mean Time
-			0:00	Algeria	WE%sT	1940 Feb 25 2:00
-			1:00	Algeria	CE%sT	1946 Oct  7
-			0:00	-	WET	1956 Jan 29
-			1:00	-	CET	1963 Apr 14
-			0:00	Algeria	WE%sT	1977 Oct 21
-			1:00	Algeria	CE%sT	1979 Oct 26
-			0:00	Algeria	WE%sT	1981 May
-			1:00	-	CET
-
-# Angola
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Luanda	0:52:56	-	LMT	1892
-			0:52:04	-	AOT	1911 May 26 # Angola Time
-			1:00	-	WAT
-
-# Benin
-# Whitman says they switched to 1:00 in 1946, not 1934; go with Shanks.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Africa/Porto-Novo	0:10:28	-	LMT	1912
-			0:00	-	GMT	1934 Feb 26
-			1:00	-	WAT
-
-# Botswana
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Gaborone	1:43:40 -	LMT	1885
-			2:00	-	CAT	1943 Sep 19 2:00
-			2:00	1:00	CAST	1944 Mar 19 2:00
-			2:00	-	CAT
-
-# Burkina Faso
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Africa/Ouagadougou	-0:06:04 -	LMT	1912
-			 0:00	-	GMT
-
-# Burundi
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Africa/Bujumbura	1:57:28	-	LMT	1890
-			2:00	-	CAT
-
-# Cameroon
-# Whitman says they switched to 1:00 in 1920; go with Shanks.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Douala	0:38:48	-	LMT	1912
-			1:00	-	WAT
-
-# Cape Verde
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Atlantic/Cape_Verde -1:34:04 -	LMT	1907			# Praia
-			-2:00	-	CVT	1942 Sep
-			-2:00	1:00	CVST	1945 Oct 15
-			-2:00	-	CVT	1975 Nov 25 2:00
-			-1:00	-	CVT
-
-# Central African Republic
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Bangui	1:14:20	-	LMT	1912
-			1:00	-	WAT
-
-# Chad
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Ndjamena	1:00:12 -	LMT	1912
-			1:00	-	WAT	1979 Oct 14
-			1:00	1:00	WAST	1980 Mar  8
-			1:00	-	WAT
-
-# Comoros
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Indian/Comoro	2:53:04 -	LMT	1911 Jul   # Moroni, Gran Comoro
-			3:00	-	EAT
-
-# Democratic Republic of Congo
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Africa/Kinshasa	1:01:12 -	LMT	1897 Nov 9
-			1:00	-	WAT
-Zone Africa/Lubumbashi	1:49:52 -	LMT	1897 Nov 9
-			2:00	-	CAT
-
-# Republic of the Congo
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Africa/Brazzaville	1:01:08 -	LMT	1912
-			1:00	-	WAT
-
-# Cote D'Ivoire
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Abidjan	-0:16:08 -	LMT	1912
-			 0:00	-	GMT
-
-# Djibouti
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Djibouti	2:52:36 -	LMT	1911 Jul
-			3:00	-	EAT
-
-###############################################################################
-
-# Egypt
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Egypt	1940	only	-	Jul	15	0:00	1:00	S
-Rule	Egypt	1940	only	-	Oct	 1	0:00	0	-
-Rule	Egypt	1941	only	-	Apr	15	0:00	1:00	S
-Rule	Egypt	1941	only	-	Sep	16	0:00	0	-
-Rule	Egypt	1942	1944	-	Apr	 1	0:00	1:00	S
-Rule	Egypt	1942	only	-	Oct	27	0:00	0	-
-Rule	Egypt	1943	1945	-	Nov	 1	0:00	0	-
-Rule	Egypt	1945	only	-	Apr	16	0:00	1:00	S
-Rule	Egypt	1957	only	-	May	10	0:00	1:00	S
-Rule	Egypt	1957	1958	-	Oct	 1	0:00	0	-
-Rule	Egypt	1958	only	-	May	 1	0:00	1:00	S
-Rule	Egypt	1959	1981	-	May	 1	1:00	1:00	S
-Rule	Egypt	1959	1965	-	Sep	30	3:00	0	-
-Rule	Egypt	1966	1994	-	Oct	 1	3:00	0	-
-Rule	Egypt	1982	only	-	Jul	25	1:00	1:00	S
-Rule	Egypt	1983	only	-	Jul	12	1:00	1:00	S
-Rule	Egypt	1984	1988	-	May	 1	1:00	1:00	S
-Rule	Egypt	1989	only	-	May	 6	1:00	1:00	S
-Rule	Egypt	1990	1994	-	May	 1	1:00	1:00	S
-# IATA (after 1990) says transitions are at 0:00.
-# Go with IATA starting in 1995, except correct 1995 entry from 09-30 to 09-29.
-Rule	Egypt	1995	max	-	Apr	lastFri	 0:00s	1:00	S
-Rule	Egypt	1995	max	-	Sep	lastThu	23:00s	0	-
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Cairo	2:05:00 -	LMT	1900 Oct
-			2:00	Egypt	EE%sT
-
-# Equatorial Guinea
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Malabo	0:35:08 -	LMT	1912
-			0:00	-	GMT	1963 Dec 15
-			1:00	-	WAT
-
-# Eritrea
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Asmera	2:35:32 -	LMT	1870
-			2:35:32	-	AMT	1890	      # Asmera Mean Time
-			2:35:20	-	ADMT	1936 May 5    # Adis Dera MT
-			3:00	-	EAT
-
-# Ethiopia
-# From Paul Eggert (1997-10-05):
-# Shanks writes that Ethiopia had six narrowly-spaced time zones between
-# 1870 and 1890, and that they merged to 38E50 (2:35:20) in 1890.
-# We'll guess that 38E50 is for Adis Dera.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Africa/Addis_Ababa	2:34:48 -	LMT	1870
-			2:35:20	-	ADMT	1936 May 5    # Adis Dera MT
-			3:00	-	EAT
-
-# Gabon
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Africa/Libreville	0:37:48 -	LMT	1912
-			1:00	-	WAT
-
-# Gambia
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Banjul	-1:06:36 -	LMT	1912
-			-1:06:36 -	BMT	1935	# Banjul Mean Time
-			-1:00	-	WAT	1964
-			 0:00	-	GMT
-
-# Ghana
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-# Whitman says DST was observed from 1931 to ``the present''; go with Shanks.
-Rule	Ghana	1936	1942	-	Sep	 1	0:00	0:20	GHST
-Rule	Ghana	1936	1942	-	Dec	31	0:00	0	GMT
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Accra	-0:00:52 -	LMT	1918
-			 0:00	Ghana	%s
-
-# Guinea
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Conakry	-0:54:52 -	LMT	1912
-			 0:00	-	GMT	1934 Feb 26
-			-1:00	-	WAT	1960
-			 0:00	-	GMT
-
-# Guinea-Bissau
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Bissau	-1:02:20 -	LMT	1911 May 26
-			-1:00	-	WAT	1975
-			 0:00	-	GMT
-
-# Kenya
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Nairobi	2:27:16	-	LMT	1928 Jul
-			3:00	-	EAT	1930
-			2:30	-	BEAT	1940
-			2:44:45	-	BEAUT	1960
-			3:00	-	EAT
-
-# Lesotho
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Maseru	1:50:00 -	LMT	1903 Mar
-			2:00	-	SAST	1943 Sep 19 2:00
-			2:00	1:00	SAST	1944 Mar 19 2:00
-			2:00	-	SAST
-
-# Liberia
-# From Paul Eggert (2001-07-17):
-# In 1972 Liberia was the last country to switch
-# from a UTC offset that was not a multiple of 15 or 20 minutes.
-# Howse reports that it was in honor of their president's birthday.
-# Shanks reports the date as May 1, whereas Howse reports Jan; go with Shanks.
-# For Liberia before 1972, Shanks reports -0:44, whereas Howse and Whitman
-# each report -0:44:30; go with the more precise figure.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Monrovia	-0:43:08 -	LMT	1882
-			-0:43:08 -	MMT	1919 Mar # Monrovia Mean Time
-			-0:44:30 -	LRT	1972 May # Liberia Time
-			 0:00	-	GMT
-
-###############################################################################
-
-# Libya
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Libya	1951	only	-	Oct	14	2:00	1:00	S
-Rule	Libya	1952	only	-	Jan	 1	0:00	0	-
-Rule	Libya	1953	only	-	Oct	 9	2:00	1:00	S
-Rule	Libya	1954	only	-	Jan	 1	0:00	0	-
-Rule	Libya	1955	only	-	Sep	30	0:00	1:00	S
-Rule	Libya	1956	only	-	Jan	 1	0:00	0	-
-Rule	Libya	1982	1984	-	Apr	 1	0:00	1:00	S
-Rule	Libya	1982	1985	-	Oct	 1	0:00	0	-
-Rule	Libya	1985	only	-	Apr	 6	0:00	1:00	S
-Rule	Libya	1986	only	-	Apr	 4	0:00	1:00	S
-Rule	Libya	1986	only	-	Oct	 3	0:00	0	-
-Rule	Libya	1987	1989	-	Apr	 1	0:00	1:00	S
-Rule	Libya	1987	1989	-	Oct	 1	0:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Tripoli	0:52:44 -	LMT	1920
-			1:00	Libya	CE%sT	1959
-			2:00	-	EET	1982
-			1:00	Libya	CE%sT	1990 May  4
-# The following entries are all from Shanks;
-# the IATA SSIM data contain some obvious errors.
-			2:00	-	EET	1996 Sep 30
-			1:00	-	CET	1997 Apr  4
-			1:00	1:00	CEST	1997 Oct  4
-			2:00	-	EET
-
-# Madagascar
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Indian/Antananarivo 3:10:04 -	LMT	1911 Jul
-			3:00	-	EAT	1954 Feb 27 23:00s
-			3:00	1:00	EAST	1954 May 29 23:00s
-			3:00	-	EAT
-
-# Malawi
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Blantyre	2:20:00 -	LMT	1903 Mar
-			2:00	-	CAT
-
-# Mali
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Bamako	-0:32:00 -	LMT	1912
-			 0:00	-	GMT	1934 Feb 26
-			-1:00	-	WAT	1960 Jun 20
-			 0:00	-	GMT
-
-# Mauritania
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Africa/Nouakchott	-1:03:48 -	LMT	1912
-			 0:00	-	GMT	1934 Feb 26
-			-1:00	-	WAT	1960 Nov 28
-			 0:00	-	GMT
-
-# Mauritius
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Indian/Mauritius	3:50:00 -	LMT	1907		# Port Louis
-			4:00	-	MUT	# Mauritius Time
-# Agalega Is, Rodriguez
-# no information; probably like Indian/Mauritius
-
-# Mayotte
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Indian/Mayotte	3:00:56 -	LMT	1911 Jul	# Mamoutzou
-			3:00	-	EAT
-
-# Morocco
-# See the `europe' file for Spanish Morocco (Africa/Ceuta).
-# RULE	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Morocco	1939	only	-	Sep	12	 0:00	1:00	S
-Rule	Morocco	1939	only	-	Nov	19	 0:00	0	-
-Rule	Morocco	1940	only	-	Feb	25	 0:00	1:00	S
-Rule	Morocco	1945	only	-	Nov	18	 0:00	0	-
-Rule	Morocco	1950	only	-	Jun	11	 0:00	1:00	S
-Rule	Morocco	1950	only	-	Oct	29	 0:00	0	-
-Rule	Morocco	1967	only	-	Jun	 3	12:00	1:00	S
-Rule	Morocco	1967	only	-	Oct	 1	 0:00	0	-
-Rule	Morocco	1974	only	-	Jun	24	 0:00	1:00	S
-Rule	Morocco	1974	only	-	Sep	 1	 0:00	0	-
-Rule	Morocco	1976	1977	-	May	 1	 0:00	1:00	S
-Rule	Morocco	1976	only	-	Aug	 1	 0:00	0	-
-Rule	Morocco	1977	only	-	Sep	28	 0:00	0	-
-Rule	Morocco	1978	only	-	Jun	 1	 0:00	1:00	S
-Rule	Morocco	1978	only	-	Aug	 4	 0:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Africa/Casablanca	-0:30:20 -	LMT	1913 Oct 26
-			 0:00	Morocco	WE%sT	1984 Mar 16
-			 1:00	-	CET	1986
-			 0:00	-	WET
-# Western Sahara
-Zone Africa/El_Aaiun	-0:52:48 -	LMT	1934 Jan
-			-1:00	-	WAT	1976 Apr 14
-			 0:00	-	WET
-
-# Mozambique
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Maputo	2:10:20 -	LMT	1903 Mar
-			2:00	-	CAT
-
-# Namibia
-# The 1994-04-03 transition is from Shanks.
-# Shanks reports no DST after 1998-04; go with IATA.
-# RULE	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Namibia	1994	max	-	Sep	Sun>=1	2:00	1:00	S
-Rule	Namibia	1995	max	-	Apr	Sun>=1	2:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Windhoek	1:08:24 -	LMT	1892 Feb 8
-			1:30	-	SWAT	1903 Mar	# SW Africa Time
-			2:00	-	SAST	1942 Sep 20 2:00
-			2:00	1:00	SAST	1943 Mar 21 2:00
-			2:00	-	SAST	1990 Mar 21 # independence
-			2:00	-	CAT	1994 Apr  3
-			1:00	Namibia	WA%sT
-
-# Niger
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Niamey	 0:08:28 -	LMT	1912
-			-1:00	-	WAT	1934 Feb 26
-			 0:00	-	GMT	1960
-			 1:00	-	WAT
-
-# Nigeria
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Lagos	0:13:36 -	LMT	1919 Sep
-			1:00	-	WAT
-
-# Reunion
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Indian/Reunion	3:41:52 -	LMT	1911 Jun	# Saint-Denis
-			4:00	-	RET	# Reunion Time
-#
-# Scattered Islands (Iles Eparses) administered from Reunion are as follows.
-# The following information about them is taken from
-# Iles Eparses (www.outre-mer.gouv.fr/domtom/ile.htm, 1997-07-22, in French;
-# no longer available as of 1999-08-17).
-# We have no info about their time zone histories.
-#
-# Bassas da India - uninhabited
-# Europa Island - inhabited from 1905 to 1910 by two families
-# Glorioso Is - inhabited until at least 1958
-# Juan de Nova - uninhabited
-# Tromelin - inhabited until at least 1958
-
-# Rwanda
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Kigali	2:00:16 -	LMT	1935 Jun
-			2:00	-	CAT
-
-# St Helena
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Atlantic/St_Helena	-0:22:48 -	LMT	1890		# Jamestown
-			-0:22:48 -	JMT	1951	# Jamestown Mean Time
-			 0:00	-	GMT
-# The other parts of the St Helena territory are similar:
-#	Tristan da Cunha: on GMT, say Whitman and the CIA
-#	Ascension: on GMT, says usno1995 and the CIA
-#	Gough (scientific station since 1955; sealers wintered previously):
-#		on GMT, says the CIA
-#	Inaccessible, Nightingale: no information, but probably GMT
-
-# Sao Tome and Principe
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Sao_Tome	 0:26:56 -	LMT	1884
-			-0:36:32 -	LMT	1912	# Lisbon Mean Time
-			 0:00	-	GMT
-
-# Senegal
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Dakar	-1:09:44 -	LMT	1912
-			-1:00	-	WAT	1941 Jun
-			 0:00	-	GMT
-
-# Seychelles
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Indian/Mahe	3:41:48 -	LMT	1906 Jun	# Victoria
-			4:00	-	SCT	# Seychelles Time
-# From Paul Eggert (2001-05-30):
-# Aldabra, Farquhar, and Desroches, originally dependencies of the
-# Seychelles, were transferred to the British Indian Ocean Territory
-# in 1965 and returned to Seychelles control in 1976.  We don't know
-# whether this affected their time zone, so omit this for now.
-# Possibly the islands were uninhabited.
-
-# Sierra Leone
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-# Whitman gives Mar 31 - Aug 31 for 1931 on; go with Shanks.
-Rule	SL	1935	1942	-	Jun	 1	0:00	0:40	SLST
-Rule	SL	1935	1942	-	Oct	 1	0:00	0	WAT
-Rule	SL	1957	1962	-	Jun	 1	0:00	1:00	SLST
-Rule	SL	1957	1962	-	Sep	 1	0:00	0	GMT
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Freetown	-0:53:00 -	LMT	1882
-			-0:53:00 -	FMT	1913 Jun # Freetown Mean Time
-			-1:00	SL	%s	1957
-			 0:00	SL	%s
-
-# Somalia
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Africa/Mogadishu	3:01:28 -	LMT	1893 Nov
-			3:00	-	EAT	1931
-			2:30	-	BEAT	1957
-			3:00	-	EAT
-
-# South Africa
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	SA	1942	1943	-	Sep	Sun>=15	2:00	1:00	-
-Rule	SA	1943	1944	-	Mar	Sun>=15	2:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Africa/Johannesburg 1:52:00 -	LMT	1892 Feb 8
-			1:30	-	SAST	1903 Mar
-			2:00	SA	SAST
-# Marion and Prince Edward Is
-# scientific station since 1947
-# no information
-
-# Sudan
-#
-# From <a href="http://www.sunanews.net/sn13jane.html">
-# Sudan News Agency (2000-01-13)
-# </a>, also reported by Michael De Beukelaer-Dossche via Steffen Thorsen:
-# Clocks will be moved ahead for 60 minutes all over the Sudan as of noon
-# Saturday....  This was announced Thursday by Caretaker State Minister for
-# Manpower Abdul-Rahman Nur-Eddin.
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Sudan	1970	only	-	May	 1	0:00	1:00	S
-Rule	Sudan	1970	1985	-	Oct	15	0:00	0	-
-Rule	Sudan	1971	only	-	Apr	30	0:00	1:00	S
-Rule	Sudan	1972	1985	-	Apr	lastSun	0:00	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Khartoum	2:10:08 -	LMT	1931
-			2:00	Sudan	CA%sT	2000 Jan 15 12:00
-			3:00	-	EAT
-
-# Swaziland
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Mbabane	2:04:24 -	LMT	1903 Mar
-			2:00	-	SAST
-
-# Tanzania
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Africa/Dar_es_Salaam 2:37:08 -	LMT	1931
-			3:00	-	EAT	1948
-			2:44:45	-	BEAUT	1961
-			3:00	-	EAT
-
-# Togo
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Lome	0:04:52 -	LMT	1893
-			0:00	-	GMT
-
-# Tunisia
-
-# From Gwillim Law (2005-04-30):
-#
-# My correspondent, Risto Nykanen, has alerted me to another adoption of DST,
-# this time in Tunisia.  According to Yahoo France News
-# <http://fr.news.yahoo.com/050426/5/4dumk.html>, in a story attributed to AP
-# and dated 2005-04-26, "Tunisia has decided to advance its official time by
-# one hour, starting on Sunday, May 1.  Henceforth, Tunisian time will be
-# UTC+2 instead of UTC+1.  The change will take place at 23:00 UTC next
-# Saturday."  (My translation)
-#
-# From Oscar van Vlijmen (2005-05-02):
-# LaPresse, the first national daily newspaper ...
-# <http://www.lapresse.tn/archives/archives280405/actualites/lheure.html>
-# ... DST for 2005: on: Sun May 1 0h standard time, off: Fri Sept. 30,
-# 1h standard time.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Tunisia	1939	only	-	Apr	15	23:00s	1:00	S
-Rule	Tunisia	1939	only	-	Nov	18	23:00s	0	-
-Rule	Tunisia	1940	only	-	Feb	25	23:00s	1:00	S
-Rule	Tunisia	1941	only	-	Oct	 6	 0:00	0	-
-Rule	Tunisia	1942	only	-	Mar	 9	 0:00	1:00	S
-Rule	Tunisia	1942	only	-	Nov	 2	 3:00	0	-
-Rule	Tunisia	1943	only	-	Mar	29	 2:00	1:00	S
-Rule	Tunisia	1943	only	-	Apr	17	 2:00	0	-
-Rule	Tunisia	1943	only	-	Apr	25	 2:00	1:00	S
-Rule	Tunisia	1943	only	-	Oct	 4	 2:00	0	-
-Rule	Tunisia	1944	1945	-	Apr	Mon>=1	 2:00	1:00	S
-Rule	Tunisia	1944	only	-	Oct	 8	 0:00	0	-
-Rule	Tunisia	1945	only	-	Sep	16	 0:00	0	-
-Rule	Tunisia	1977	only	-	Apr	30	 0:00s	1:00	S
-Rule	Tunisia	1977	only	-	Sep	24	 0:00s	0	-
-Rule	Tunisia	1978	only	-	May	 1	 0:00s	1:00	S
-Rule	Tunisia	1978	only	-	Oct	 1	 0:00s	0	-
-Rule	Tunisia	1988	only	-	Jun	 1	 0:00s	1:00	S
-Rule	Tunisia	1988	1990	-	Sep	lastSun	 0:00s	0	-
-Rule	Tunisia	1989	only	-	Mar	26	 0:00s	1:00	S
-Rule	Tunisia	1990	only	-	May	 1	 0:00s	1:00	S
-Rule	Tunisia	2005	only	-	May	 1	 0:00s	1:00	S
-Rule	Tunisia	2005	only	-	Sep	30	 1:00s	0	-
-# Shanks gives 0:09 for Paris Mean Time; go with Howse's more precise 0:09:21.
-# Shanks says the 1911 switch occurred on Mar 9; go with Howse's Mar 11.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Tunis	0:40:44 -	LMT	1881 May 12
-			0:09:21	-	PMT	1911 Mar 11    # Paris Mean Time
-			1:00	Tunisia	CE%sT
-
-# Uganda
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Kampala	2:09:40 -	LMT	1928 Jul
-			3:00	-	EAT	1930
-			2:30	-	BEAT	1948
-			2:44:45	-	BEAUT	1957
-			3:00	-	EAT
-
-# Zambia
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Lusaka	1:53:08 -	LMT	1903 Mar
-			2:00	-	CAT
-
-# Zimbabwe
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Harare	2:04:12 -	LMT	1903 Mar
-			2:00	-	CAT
+# @(#)africa	7.40
+# <pre>
+
+# This data is by no means authoritative; if you think you know better,
+# go ahead and edit the file (and please send any changes to
+# tz@elsie.nci.nih.gov for general use in the future).
+
+# From Paul Eggert (1999-03-22):
+#
+# A good source for time zone historical data outside the U.S. is
+# Thomas G. Shanks, The International Atlas (5th edition),
+# San Diego: ACS Publications, Inc. (1999).
+#
+# Gwillim Law writes that a good source
+# for recent time zone data is the International Air Transport
+# Association's Standard Schedules Information Manual (IATA SSIM),
+# published semiannually.  Law sent in several helpful summaries
+# of the IATA's data after 1990.
+#
+# Except where otherwise noted, Shanks is the source for entries through 1990,
+# and IATA SSIM is the source for entries after 1990.
+#
+# Another source occasionally used is Edward W. Whitman, World Time Differences,
+# Whitman Publishing Co, 2 Niagara Av, Ealing, London (undated), which
+# I found in the UCLA library.
+#
+# A reliable and entertaining source about time zones is
+# Derek Howse, Greenwich time and longitude, Philip Wilson Publishers (1997).
+#
+# Previous editions of this database used WAT, CAT, SAT, and EAT
+# for +0:00 through +3:00, respectively,
+# but Mark R V Murray reports that
+# `SAST' is the official abbreviation for +2:00 in the country of South Africa,
+# `CAT' is commonly used for +2:00 in countries north of South Africa, and
+# `WAT' is probably the best name for +1:00, as the common phrase for
+# the area that includes Nigeria is ``West Africa''.
+# He has heard of ``Western Sahara Time'' for +0:00 but can find no reference.
+#
+# To make things confusing, `WAT' seems to have been used for -1:00 long ago;
+# I'd guess that this was because people needed _some_ name for -1:00,
+# and at the time, far west Africa was the only major land area in -1:00.
+# This usage is now obsolete, as the last use of -1:00 on the African
+# mainland seems to have been 1976 in Western Sahara.
+#
+# To summarize, the following abbreviations seem to have some currency:
+#	-1:00	WAT	West Africa Time (no longer used)
+#	 0:00	GMT	Greenwich Mean Time
+#	 2:00	CAT	Central Africa Time
+#	 2:00	SAST	South Africa Standard Time
+# and Murray suggests the following abbreviation:
+#	 1:00	WAT	West Africa Time
+# I realize that this leads to `WAT' being used for both -1:00 and 1:00
+# for times before 1976, but this is the best I can think of
+# until we get more information.
+#
+# I invented the following abbreviations; corrections are welcome!
+#	 2:00	WAST	West Africa Summer Time
+#	 2:30	BEAT	British East Africa Time (no longer used)
+#	 2:44:45 BEAUT	British East Africa Unified Time (no longer used)
+#	 3:00	CAST	Central Africa Summer Time (no longer used)
+#	 3:00	SAST	South Africa Summer Time (no longer used)
+#	 3:00	EAT	East Africa Time
+#	 4:00	EAST	East Africa Summer Time (no longer used)
+
+# Algeria
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Algeria	1916	only	-	Jun	14	23:00s	1:00	S
+Rule	Algeria	1916	1919	-	Oct	Sun<=7	23:00s	0	-
+Rule	Algeria	1917	only	-	Mar	24	23:00s	1:00	S
+Rule	Algeria	1918	only	-	Mar	 9	23:00s	1:00	S
+Rule	Algeria	1919	only	-	Mar	 1	23:00s	1:00	S
+Rule	Algeria	1920	only	-	Feb	14	23:00s	1:00	S
+Rule	Algeria	1920	only	-	Oct	23	23:00s	0	-
+Rule	Algeria	1921	only	-	Mar	14	23:00s	1:00	S
+Rule	Algeria	1921	only	-	Jun	21	23:00s	0	-
+Rule	Algeria	1939	only	-	Sep	11	23:00s	1:00	S
+Rule	Algeria	1939	only	-	Nov	19	 1:00	0	-
+Rule	Algeria	1944	1945	-	Apr	Mon<=7	 2:00	1:00	S
+Rule	Algeria	1944	only	-	Oct	 8	 2:00	0	-
+Rule	Algeria	1945	only	-	Sep	16	 1:00	0	-
+Rule	Algeria	1971	only	-	Apr	25	23:00s	1:00	S
+Rule	Algeria	1971	only	-	Sep	26	23:00s	0	-
+Rule	Algeria	1977	only	-	May	 6	 0:00	1:00	S
+Rule	Algeria	1977	only	-	Oct	21	 0:00	0	-
+Rule	Algeria	1978	only	-	Mar	24	 1:00	1:00	S
+Rule	Algeria	1978	only	-	Sep	22	 3:00	0	-
+Rule	Algeria	1980	only	-	Apr	25	 0:00	1:00	S
+Rule	Algeria	1980	only	-	Oct	31	 2:00	0	-
+# Shanks gives 0:09 for Paris Mean Time; go with Howse's more precise 0:09:21.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Algiers	0:12:12 -	LMT	1891 Mar 15 0:01
+			0:09:21	-	PMT	1911 Mar 11    # Paris Mean Time
+			0:00	Algeria	WE%sT	1940 Feb 25 2:00
+			1:00	Algeria	CE%sT	1946 Oct  7
+			0:00	-	WET	1956 Jan 29
+			1:00	-	CET	1963 Apr 14
+			0:00	Algeria	WE%sT	1977 Oct 21
+			1:00	Algeria	CE%sT	1979 Oct 26
+			0:00	Algeria	WE%sT	1981 May
+			1:00	-	CET
+
+# Angola
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Luanda	0:52:56	-	LMT	1892
+			0:52:04	-	AOT	1911 May 26 # Angola Time
+			1:00	-	WAT
+
+# Benin
+# Whitman says they switched to 1:00 in 1946, not 1934; go with Shanks.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Africa/Porto-Novo	0:10:28	-	LMT	1912
+			0:00	-	GMT	1934 Feb 26
+			1:00	-	WAT
+
+# Botswana
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Gaborone	1:43:40 -	LMT	1885
+			2:00	-	CAT	1943 Sep 19 2:00
+			2:00	1:00	CAST	1944 Mar 19 2:00
+			2:00	-	CAT
+
+# Burkina Faso
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Africa/Ouagadougou	-0:06:04 -	LMT	1912
+			 0:00	-	GMT
+
+# Burundi
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Africa/Bujumbura	1:57:28	-	LMT	1890
+			2:00	-	CAT
+
+# Cameroon
+# Whitman says they switched to 1:00 in 1920; go with Shanks.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Douala	0:38:48	-	LMT	1912
+			1:00	-	WAT
+
+# Cape Verde
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Atlantic/Cape_Verde -1:34:04 -	LMT	1907			# Praia
+			-2:00	-	CVT	1942 Sep
+			-2:00	1:00	CVST	1945 Oct 15
+			-2:00	-	CVT	1975 Nov 25 2:00
+			-1:00	-	CVT
+
+# Central African Republic
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Bangui	1:14:20	-	LMT	1912
+			1:00	-	WAT
+
+# Chad
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Ndjamena	1:00:12 -	LMT	1912
+			1:00	-	WAT	1979 Oct 14
+			1:00	1:00	WAST	1980 Mar  8
+			1:00	-	WAT
+
+# Comoros
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Indian/Comoro	2:53:04 -	LMT	1911 Jul   # Moroni, Gran Comoro
+			3:00	-	EAT
+
+# Democratic Republic of Congo
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Africa/Kinshasa	1:01:12 -	LMT	1897 Nov 9
+			1:00	-	WAT
+Zone Africa/Lubumbashi	1:49:52 -	LMT	1897 Nov 9
+			2:00	-	CAT
+
+# Republic of the Congo
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Africa/Brazzaville	1:01:08 -	LMT	1912
+			1:00	-	WAT
+
+# Cote D'Ivoire
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Abidjan	-0:16:08 -	LMT	1912
+			 0:00	-	GMT
+
+# Djibouti
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Djibouti	2:52:36 -	LMT	1911 Jul
+			3:00	-	EAT
+
+###############################################################################
+
+# Egypt
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Egypt	1940	only	-	Jul	15	0:00	1:00	S
+Rule	Egypt	1940	only	-	Oct	 1	0:00	0	-
+Rule	Egypt	1941	only	-	Apr	15	0:00	1:00	S
+Rule	Egypt	1941	only	-	Sep	16	0:00	0	-
+Rule	Egypt	1942	1944	-	Apr	 1	0:00	1:00	S
+Rule	Egypt	1942	only	-	Oct	27	0:00	0	-
+Rule	Egypt	1943	1945	-	Nov	 1	0:00	0	-
+Rule	Egypt	1945	only	-	Apr	16	0:00	1:00	S
+Rule	Egypt	1957	only	-	May	10	0:00	1:00	S
+Rule	Egypt	1957	1958	-	Oct	 1	0:00	0	-
+Rule	Egypt	1958	only	-	May	 1	0:00	1:00	S
+Rule	Egypt	1959	1981	-	May	 1	1:00	1:00	S
+Rule	Egypt	1959	1965	-	Sep	30	3:00	0	-
+Rule	Egypt	1966	1994	-	Oct	 1	3:00	0	-
+Rule	Egypt	1982	only	-	Jul	25	1:00	1:00	S
+Rule	Egypt	1983	only	-	Jul	12	1:00	1:00	S
+Rule	Egypt	1984	1988	-	May	 1	1:00	1:00	S
+Rule	Egypt	1989	only	-	May	 6	1:00	1:00	S
+Rule	Egypt	1990	1994	-	May	 1	1:00	1:00	S
+# IATA (after 1990) says transitions are at 0:00.
+# Go with IATA starting in 1995, except correct 1995 entry from 09-30 to 09-29.
+Rule	Egypt	1995	max	-	Apr	lastFri	 0:00s	1:00	S
+Rule	Egypt	1995	max	-	Sep	lastThu	23:00s	0	-
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Cairo	2:05:00 -	LMT	1900 Oct
+			2:00	Egypt	EE%sT
+
+# Equatorial Guinea
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Malabo	0:35:08 -	LMT	1912
+			0:00	-	GMT	1963 Dec 15
+			1:00	-	WAT
+
+# Eritrea
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Asmera	2:35:32 -	LMT	1870
+			2:35:32	-	AMT	1890	      # Asmera Mean Time
+			2:35:20	-	ADMT	1936 May 5    # Adis Dera MT
+			3:00	-	EAT
+
+# Ethiopia
+# From Paul Eggert (1997-10-05):
+# Shanks writes that Ethiopia had six narrowly-spaced time zones between
+# 1870 and 1890, and that they merged to 38E50 (2:35:20) in 1890.
+# We'll guess that 38E50 is for Adis Dera.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Africa/Addis_Ababa	2:34:48 -	LMT	1870
+			2:35:20	-	ADMT	1936 May 5    # Adis Dera MT
+			3:00	-	EAT
+
+# Gabon
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Africa/Libreville	0:37:48 -	LMT	1912
+			1:00	-	WAT
+
+# Gambia
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Banjul	-1:06:36 -	LMT	1912
+			-1:06:36 -	BMT	1935	# Banjul Mean Time
+			-1:00	-	WAT	1964
+			 0:00	-	GMT
+
+# Ghana
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+# Whitman says DST was observed from 1931 to ``the present''; go with Shanks.
+Rule	Ghana	1936	1942	-	Sep	 1	0:00	0:20	GHST
+Rule	Ghana	1936	1942	-	Dec	31	0:00	0	GMT
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Accra	-0:00:52 -	LMT	1918
+			 0:00	Ghana	%s
+
+# Guinea
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Conakry	-0:54:52 -	LMT	1912
+			 0:00	-	GMT	1934 Feb 26
+			-1:00	-	WAT	1960
+			 0:00	-	GMT
+
+# Guinea-Bissau
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Bissau	-1:02:20 -	LMT	1911 May 26
+			-1:00	-	WAT	1975
+			 0:00	-	GMT
+
+# Kenya
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Nairobi	2:27:16	-	LMT	1928 Jul
+			3:00	-	EAT	1930
+			2:30	-	BEAT	1940
+			2:44:45	-	BEAUT	1960
+			3:00	-	EAT
+
+# Lesotho
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Maseru	1:50:00 -	LMT	1903 Mar
+			2:00	-	SAST	1943 Sep 19 2:00
+			2:00	1:00	SAST	1944 Mar 19 2:00
+			2:00	-	SAST
+
+# Liberia
+# From Paul Eggert (2001-07-17):
+# In 1972 Liberia was the last country to switch
+# from a UTC offset that was not a multiple of 15 or 20 minutes.
+# Howse reports that it was in honor of their president's birthday.
+# Shanks reports the date as May 1, whereas Howse reports Jan; go with Shanks.
+# For Liberia before 1972, Shanks reports -0:44, whereas Howse and Whitman
+# each report -0:44:30; go with the more precise figure.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Monrovia	-0:43:08 -	LMT	1882
+			-0:43:08 -	MMT	1919 Mar # Monrovia Mean Time
+			-0:44:30 -	LRT	1972 May # Liberia Time
+			 0:00	-	GMT
+
+###############################################################################
+
+# Libya
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Libya	1951	only	-	Oct	14	2:00	1:00	S
+Rule	Libya	1952	only	-	Jan	 1	0:00	0	-
+Rule	Libya	1953	only	-	Oct	 9	2:00	1:00	S
+Rule	Libya	1954	only	-	Jan	 1	0:00	0	-
+Rule	Libya	1955	only	-	Sep	30	0:00	1:00	S
+Rule	Libya	1956	only	-	Jan	 1	0:00	0	-
+Rule	Libya	1982	1984	-	Apr	 1	0:00	1:00	S
+Rule	Libya	1982	1985	-	Oct	 1	0:00	0	-
+Rule	Libya	1985	only	-	Apr	 6	0:00	1:00	S
+Rule	Libya	1986	only	-	Apr	 4	0:00	1:00	S
+Rule	Libya	1986	only	-	Oct	 3	0:00	0	-
+Rule	Libya	1987	1989	-	Apr	 1	0:00	1:00	S
+Rule	Libya	1987	1989	-	Oct	 1	0:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Tripoli	0:52:44 -	LMT	1920
+			1:00	Libya	CE%sT	1959
+			2:00	-	EET	1982
+			1:00	Libya	CE%sT	1990 May  4
+# The following entries are all from Shanks;
+# the IATA SSIM data contain some obvious errors.
+			2:00	-	EET	1996 Sep 30
+			1:00	-	CET	1997 Apr  4
+			1:00	1:00	CEST	1997 Oct  4
+			2:00	-	EET
+
+# Madagascar
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Indian/Antananarivo 3:10:04 -	LMT	1911 Jul
+			3:00	-	EAT	1954 Feb 27 23:00s
+			3:00	1:00	EAST	1954 May 29 23:00s
+			3:00	-	EAT
+
+# Malawi
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Blantyre	2:20:00 -	LMT	1903 Mar
+			2:00	-	CAT
+
+# Mali
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Bamako	-0:32:00 -	LMT	1912
+			 0:00	-	GMT	1934 Feb 26
+			-1:00	-	WAT	1960 Jun 20
+			 0:00	-	GMT
+
+# Mauritania
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Africa/Nouakchott	-1:03:48 -	LMT	1912
+			 0:00	-	GMT	1934 Feb 26
+			-1:00	-	WAT	1960 Nov 28
+			 0:00	-	GMT
+
+# Mauritius
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Indian/Mauritius	3:50:00 -	LMT	1907		# Port Louis
+			4:00	-	MUT	# Mauritius Time
+# Agalega Is, Rodriguez
+# no information; probably like Indian/Mauritius
+
+# Mayotte
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Indian/Mayotte	3:00:56 -	LMT	1911 Jul	# Mamoutzou
+			3:00	-	EAT
+
+# Morocco
+# See the `europe' file for Spanish Morocco (Africa/Ceuta).
+# RULE	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Morocco	1939	only	-	Sep	12	 0:00	1:00	S
+Rule	Morocco	1939	only	-	Nov	19	 0:00	0	-
+Rule	Morocco	1940	only	-	Feb	25	 0:00	1:00	S
+Rule	Morocco	1945	only	-	Nov	18	 0:00	0	-
+Rule	Morocco	1950	only	-	Jun	11	 0:00	1:00	S
+Rule	Morocco	1950	only	-	Oct	29	 0:00	0	-
+Rule	Morocco	1967	only	-	Jun	 3	12:00	1:00	S
+Rule	Morocco	1967	only	-	Oct	 1	 0:00	0	-
+Rule	Morocco	1974	only	-	Jun	24	 0:00	1:00	S
+Rule	Morocco	1974	only	-	Sep	 1	 0:00	0	-
+Rule	Morocco	1976	1977	-	May	 1	 0:00	1:00	S
+Rule	Morocco	1976	only	-	Aug	 1	 0:00	0	-
+Rule	Morocco	1977	only	-	Sep	28	 0:00	0	-
+Rule	Morocco	1978	only	-	Jun	 1	 0:00	1:00	S
+Rule	Morocco	1978	only	-	Aug	 4	 0:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Africa/Casablanca	-0:30:20 -	LMT	1913 Oct 26
+			 0:00	Morocco	WE%sT	1984 Mar 16
+			 1:00	-	CET	1986
+			 0:00	-	WET
+# Western Sahara
+Zone Africa/El_Aaiun	-0:52:48 -	LMT	1934 Jan
+			-1:00	-	WAT	1976 Apr 14
+			 0:00	-	WET
+
+# Mozambique
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Maputo	2:10:20 -	LMT	1903 Mar
+			2:00	-	CAT
+
+# Namibia
+# The 1994-04-03 transition is from Shanks.
+# Shanks reports no DST after 1998-04; go with IATA.
+# RULE	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Namibia	1994	max	-	Sep	Sun>=1	2:00	1:00	S
+Rule	Namibia	1995	max	-	Apr	Sun>=1	2:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Windhoek	1:08:24 -	LMT	1892 Feb 8
+			1:30	-	SWAT	1903 Mar	# SW Africa Time
+			2:00	-	SAST	1942 Sep 20 2:00
+			2:00	1:00	SAST	1943 Mar 21 2:00
+			2:00	-	SAST	1990 Mar 21 # independence
+			2:00	-	CAT	1994 Apr  3
+			1:00	Namibia	WA%sT
+
+# Niger
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Niamey	 0:08:28 -	LMT	1912
+			-1:00	-	WAT	1934 Feb 26
+			 0:00	-	GMT	1960
+			 1:00	-	WAT
+
+# Nigeria
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Lagos	0:13:36 -	LMT	1919 Sep
+			1:00	-	WAT
+
+# Reunion
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Indian/Reunion	3:41:52 -	LMT	1911 Jun	# Saint-Denis
+			4:00	-	RET	# Reunion Time
+#
+# Scattered Islands (Iles Eparses) administered from Reunion are as follows.
+# The following information about them is taken from
+# Iles Eparses (www.outre-mer.gouv.fr/domtom/ile.htm, 1997-07-22, in French;
+# no longer available as of 1999-08-17).
+# We have no info about their time zone histories.
+#
+# Bassas da India - uninhabited
+# Europa Island - inhabited from 1905 to 1910 by two families
+# Glorioso Is - inhabited until at least 1958
+# Juan de Nova - uninhabited
+# Tromelin - inhabited until at least 1958
+
+# Rwanda
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Kigali	2:00:16 -	LMT	1935 Jun
+			2:00	-	CAT
+
+# St Helena
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Atlantic/St_Helena	-0:22:48 -	LMT	1890		# Jamestown
+			-0:22:48 -	JMT	1951	# Jamestown Mean Time
+			 0:00	-	GMT
+# The other parts of the St Helena territory are similar:
+#	Tristan da Cunha: on GMT, say Whitman and the CIA
+#	Ascension: on GMT, says usno1995 and the CIA
+#	Gough (scientific station since 1955; sealers wintered previously):
+#		on GMT, says the CIA
+#	Inaccessible, Nightingale: no information, but probably GMT
+
+# Sao Tome and Principe
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Sao_Tome	 0:26:56 -	LMT	1884
+			-0:36:32 -	LMT	1912	# Lisbon Mean Time
+			 0:00	-	GMT
+
+# Senegal
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Dakar	-1:09:44 -	LMT	1912
+			-1:00	-	WAT	1941 Jun
+			 0:00	-	GMT
+
+# Seychelles
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Indian/Mahe	3:41:48 -	LMT	1906 Jun	# Victoria
+			4:00	-	SCT	# Seychelles Time
+# From Paul Eggert (2001-05-30):
+# Aldabra, Farquhar, and Desroches, originally dependencies of the
+# Seychelles, were transferred to the British Indian Ocean Territory
+# in 1965 and returned to Seychelles control in 1976.  We don't know
+# whether this affected their time zone, so omit this for now.
+# Possibly the islands were uninhabited.
+
+# Sierra Leone
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+# Whitman gives Mar 31 - Aug 31 for 1931 on; go with Shanks.
+Rule	SL	1935	1942	-	Jun	 1	0:00	0:40	SLST
+Rule	SL	1935	1942	-	Oct	 1	0:00	0	WAT
+Rule	SL	1957	1962	-	Jun	 1	0:00	1:00	SLST
+Rule	SL	1957	1962	-	Sep	 1	0:00	0	GMT
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Freetown	-0:53:00 -	LMT	1882
+			-0:53:00 -	FMT	1913 Jun # Freetown Mean Time
+			-1:00	SL	%s	1957
+			 0:00	SL	%s
+
+# Somalia
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Africa/Mogadishu	3:01:28 -	LMT	1893 Nov
+			3:00	-	EAT	1931
+			2:30	-	BEAT	1957
+			3:00	-	EAT
+
+# South Africa
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	SA	1942	1943	-	Sep	Sun>=15	2:00	1:00	-
+Rule	SA	1943	1944	-	Mar	Sun>=15	2:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Africa/Johannesburg 1:52:00 -	LMT	1892 Feb 8
+			1:30	-	SAST	1903 Mar
+			2:00	SA	SAST
+# Marion and Prince Edward Is
+# scientific station since 1947
+# no information
+
+# Sudan
+#
+# From <a href="http://www.sunanews.net/sn13jane.html">
+# Sudan News Agency (2000-01-13)
+# </a>, also reported by Michael De Beukelaer-Dossche via Steffen Thorsen:
+# Clocks will be moved ahead for 60 minutes all over the Sudan as of noon
+# Saturday....  This was announced Thursday by Caretaker State Minister for
+# Manpower Abdul-Rahman Nur-Eddin.
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Sudan	1970	only	-	May	 1	0:00	1:00	S
+Rule	Sudan	1970	1985	-	Oct	15	0:00	0	-
+Rule	Sudan	1971	only	-	Apr	30	0:00	1:00	S
+Rule	Sudan	1972	1985	-	Apr	lastSun	0:00	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Khartoum	2:10:08 -	LMT	1931
+			2:00	Sudan	CA%sT	2000 Jan 15 12:00
+			3:00	-	EAT
+
+# Swaziland
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Mbabane	2:04:24 -	LMT	1903 Mar
+			2:00	-	SAST
+
+# Tanzania
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Africa/Dar_es_Salaam 2:37:08 -	LMT	1931
+			3:00	-	EAT	1948
+			2:44:45	-	BEAUT	1961
+			3:00	-	EAT
+
+# Togo
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Lome	0:04:52 -	LMT	1893
+			0:00	-	GMT
+
+# Tunisia
+
+# From Gwillim Law (2005-04-30):
+#
+# My correspondent, Risto Nykanen, has alerted me to another adoption of DST,
+# this time in Tunisia.  According to Yahoo France News
+# <http://fr.news.yahoo.com/050426/5/4dumk.html>, in a story attributed to AP
+# and dated 2005-04-26, "Tunisia has decided to advance its official time by
+# one hour, starting on Sunday, May 1.  Henceforth, Tunisian time will be
+# UTC+2 instead of UTC+1.  The change will take place at 23:00 UTC next
+# Saturday."  (My translation)
+#
+# From Oscar van Vlijmen (2005-05-02):
+# LaPresse, the first national daily newspaper ...
+# <http://www.lapresse.tn/archives/archives280405/actualites/lheure.html>
+# ... DST for 2005: on: Sun May 1 0h standard time, off: Fri Sept. 30,
+# 1h standard time.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Tunisia	1939	only	-	Apr	15	23:00s	1:00	S
+Rule	Tunisia	1939	only	-	Nov	18	23:00s	0	-
+Rule	Tunisia	1940	only	-	Feb	25	23:00s	1:00	S
+Rule	Tunisia	1941	only	-	Oct	 6	 0:00	0	-
+Rule	Tunisia	1942	only	-	Mar	 9	 0:00	1:00	S
+Rule	Tunisia	1942	only	-	Nov	 2	 3:00	0	-
+Rule	Tunisia	1943	only	-	Mar	29	 2:00	1:00	S
+Rule	Tunisia	1943	only	-	Apr	17	 2:00	0	-
+Rule	Tunisia	1943	only	-	Apr	25	 2:00	1:00	S
+Rule	Tunisia	1943	only	-	Oct	 4	 2:00	0	-
+Rule	Tunisia	1944	1945	-	Apr	Mon>=1	 2:00	1:00	S
+Rule	Tunisia	1944	only	-	Oct	 8	 0:00	0	-
+Rule	Tunisia	1945	only	-	Sep	16	 0:00	0	-
+Rule	Tunisia	1977	only	-	Apr	30	 0:00s	1:00	S
+Rule	Tunisia	1977	only	-	Sep	24	 0:00s	0	-
+Rule	Tunisia	1978	only	-	May	 1	 0:00s	1:00	S
+Rule	Tunisia	1978	only	-	Oct	 1	 0:00s	0	-
+Rule	Tunisia	1988	only	-	Jun	 1	 0:00s	1:00	S
+Rule	Tunisia	1988	1990	-	Sep	lastSun	 0:00s	0	-
+Rule	Tunisia	1989	only	-	Mar	26	 0:00s	1:00	S
+Rule	Tunisia	1990	only	-	May	 1	 0:00s	1:00	S
+Rule	Tunisia	2005	only	-	May	 1	 0:00s	1:00	S
+Rule	Tunisia	2005	only	-	Sep	30	 1:00s	0	-
+# Shanks gives 0:09 for Paris Mean Time; go with Howse's more precise 0:09:21.
+# Shanks says the 1911 switch occurred on Mar 9; go with Howse's Mar 11.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Tunis	0:40:44 -	LMT	1881 May 12
+			0:09:21	-	PMT	1911 Mar 11    # Paris Mean Time
+			1:00	Tunisia	CE%sT
+
+# Uganda
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Kampala	2:09:40 -	LMT	1928 Jul
+			3:00	-	EAT	1930
+			2:30	-	BEAT	1948
+			2:44:45	-	BEAUT	1957
+			3:00	-	EAT
+
+# Zambia
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Lusaka	1:53:08 -	LMT	1903 Mar
+			2:00	-	CAT
+
+# Zimbabwe
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Harare	2:04:12 -	LMT	1903 Mar
+			2:00	-	CAT
diff --git a/JodaTime/src/java/org/joda/time/tz/src/antarctica b/JodaTime/src/java/org/joda/time/tz/src/antarctica
index 835a14ba0..f3efe19b6 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/antarctica
+++ b/JodaTime/src/java/org/joda/time/tz/src/antarctica
@@ -1,316 +1,317 @@
-# @(#)antarctica	7.29
-
-# From Paul Eggert (1999-11-15):
-# To keep things manageable, we list only locations occupied year-round; see
-# <a href="http://www.comnap.aq/comnap/comnap.nsf/P/Stations/">
-# COMNAP - Stations and Bases
-# </a>
-# and
-# <a href="http://www.spri.cam.ac.uk/bob/periant.htm">
-# Summary of the Peri-Antarctic Islands (1998-07-23)
-# </a>
-# for information.
-# Unless otherwise specified, we have no time zone information.
-#
-# Except for the French entries,
-# I made up all time zone abbreviations mentioned here; corrections welcome!
-# FORMAT is `zzz' and GMTOFF is 0 for locations while uninhabited.
-
-# These rules are stolen from the `europe' file.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	RussAQ	1981	1984	-	Apr	 1	 0:00	1:00	S
-Rule	RussAQ	1981	1983	-	Oct	 1	 0:00	0	-
-Rule	RussAQ	1984	1991	-	Sep	lastSun	 2:00s	0	-
-Rule	RussAQ	1985	1991	-	Mar	lastSun	 2:00s	1:00	S
-Rule	RussAQ	1992	only	-	Mar	lastSat	 23:00	1:00	S
-Rule	RussAQ	1992	only	-	Sep	lastSat	 23:00	0	-
-Rule	RussAQ	1993	max	-	Mar	lastSun	 2:00s	1:00	S
-Rule	RussAQ	1993	1995	-	Sep	lastSun	 2:00s	0	-
-Rule	RussAQ	1996	max	-	Oct	lastSun	 2:00s	0	-
-
-# These rules are stolen from the `southamerica' file.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	ArgAQ	1964	1966	-	Mar	 1	0:00	0	-
-Rule	ArgAQ	1964	1966	-	Oct	15	0:00	1:00	S
-Rule	ArgAQ	1967	only	-	Apr	 1	0:00	0	-
-Rule	ArgAQ	1967	1968	-	Oct	Sun<=7	0:00	1:00	S
-Rule	ArgAQ	1968	1969	-	Apr	Sun<=7	0:00	0	-
-Rule	ArgAQ	1974	only	-	Jan	23	0:00	1:00	S
-Rule	ArgAQ	1974	only	-	May	 1	0:00	0	-
-Rule	ArgAQ	1974	1976	-	Oct	Sun<=7	0:00	1:00	S
-Rule	ArgAQ	1975	1977	-	Apr	Sun<=7	0:00	0	-
-Rule	ChileAQ	1966	1997	-	Oct	Sun>=9	0:00	1:00	S
-Rule	ChileAQ	1967	1998	-	Mar	Sun>=9	0:00	0	-
-Rule	ChileAQ	1998	only	-	Sep	27	0:00	1:00	S
-Rule	ChileAQ	1999	only	-	Apr	 4	0:00	0	-
-Rule	ChileAQ	1999	max	-	Oct	Sun>=9	0:00	1:00	S
-Rule	ChileAQ	2000	max	-	Mar	Sun>=9	0:00	0	-
-
-
-# Argentina - year-round bases
-# Belgrano II, Confin Coast, -770227-0343737, since 1972-02-05
-# Esperanza, San Martin Land, -6323-05659, since 1952-12-17
-# Jubany, Potter Peninsula, King George Island, -6414-0602320, since 1982-01
-# Marambio, Seymour I, -6414-05637, since 1969-10-29
-# Orcadas, Laurie I, -6016-04444, since 1904-02-22
-# San Martin, Debenham I, -6807-06708, since 1951-03-21
-#	(except 1960-03 / 1976-03-21)
-
-# Australia - territories
-# Heard Island, McDonald Islands (uninhabited)
-#	previously sealers and scientific personnel wintered
-#	<a href="http://web.archive.org/web/20021204222245/http://www.dstc.qut.edu.au/DST/marg/daylight.html">
-#	Margaret Turner reports
-#	</a> (1999-09-30) that they're UTC+5, with no DST;
-#	presumably this is when they have visitors.
-#
-# year-round bases
-# Casey, Bailey Peninsula, -6617+11032, since 1969
-# Davis, Vestfold Hills, -6835+07759, since 1957-01-13
-#	(except 1964-11 - 1969-02)
-# Mawson, Holme Bay, -6736+06253, since 1954-02-13
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Antarctica/Casey	0	-	zzz	1969
-			8:00	-	WST	# Western (Aus) Standard Time
-Zone Antarctica/Davis	0	-	zzz	1957 Jan 13
-			7:00	-	DAVT	1964 Nov # Davis Time
-			0	-	zzz	1969 Feb
-			7:00	-	DAVT
-Zone Antarctica/Mawson	0	-	zzz	1954 Feb 13
-			6:00	-	MAWT	# Mawson Time
-# References:
-# <a href="http://www.antdiv.gov.au/aad/exop/sfo/casey/casey_aws.html">
-# Casey Weather (1998-02-26)
-# </a>
-# <a href="http://www.antdiv.gov.au/aad/exop/sfo/davis/video.html">
-# Davis Station, Antarctica (1998-02-26)
-# </a>
-# <a href="http://www.antdiv.gov.au/aad/exop/sfo/mawson/video.html">
-# Mawson Station, Antarctica (1998-02-25)
-# </a>
-
-# Brazil - year-round base
-# Comandante Ferraz, King George Island, -6205+05824, since 1983/4
-
-# Chile - year-round bases and towns
-# Escudero, South Shetland Is, -621157-0585735, since 1994
-# Presidente Eduadro Frei, King George Island, -6214-05848, since 1969-03-07
-# General Bernardo O'Higgins, Antarctic Peninsula, -6319-05704, since 1948-02
-# Capitan Arturo Prat, -6230-05941
-# Villa Las Estrellas (a town), around the Frei base, since 1984-04-09
-# These locations have always used Santiago time; use TZ='America/Santiago'.
-
-# China - year-round bases
-# Great Wall, King George Island, -6213-05858, since 1985-02-20
-# Zhongshan, Larsemann Hills, Prydz Bay, -6922+07623, since 1989-02-26
-
-# France - year-round bases
-#
-# From Antoine Leca (1997-01-20):
-# Time data are from Nicole Pailleau at the IFRTP
-# (French Institute for Polar Research and Technology).
-# She confirms that French Southern Territories and Terre Adelie bases
-# don't observe daylight saving time, even if Terre Adelie supplies came
-# from Tasmania.
-#
-# French Southern Territories with year-round inhabitants
-#
-# Martin-de-Vivies Base, Amsterdam Island, -374105+0773155, since 1950
-# Alfred-Faure Base, Crozet Islands, -462551+0515152, since 1964
-# Port-aux-Francais, Kerguelen Islands, -492110+0701303, since 1951;
-#	whaling & sealing station operated 1908/1914, 1920/1929, and 1951/1956
-#
-# St Paul Island - near Amsterdam, uninhabited
-#	fishing stations operated variously 1819/1931
-#
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Indian/Kerguelen	0	-	zzz	1950	# Port-aux-Francais
-			5:00	-	TFT	# ISO code TF Time
-#
-# year-round base in the main continent
-# Dumont-d'Urville, Ile des Petrels, -6640+14001, since 1956-11
-#
-# Another base at Port-Martin, 50km east, began operation in 1947.
-# It was destroyed by fire on 1952-01-14.
-#
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Antarctica/DumontDUrville 0 -	zzz	1947
-			10:00	-	PMT	1952 Jan 14 # Port-Martin Time
-			0	-	zzz	1956 Nov
-			10:00	-	DDUT	# Dumont-d'Urville Time
-# Reference:
-# <a href="http://en.wikipedia.org/wiki/Dumont_d'Urville_Station">
-# Dumont d'Urville Station (2005-12-05)
-# </a>
-
-# Germany - year-round base
-# Georg von Neumayer, -7039-00815
-
-# India - year-round base
-# Dakshin Gangotri, -7005+01200
-
-# Japan - year-round bases
-# Dome Fuji, -7719+03942
-# Syowa, -690022+0393524
-#
-# From Hideyuki Suzuki (1999-02-06):
-# In all Japanese stations, +0300 is used as the standard time.
-#
-# Syowa station, which is the first antarctic station of Japan,
-# was established on 1957-01-29.  Since Syowa station is still the main
-# station of Japan, it's appropriate for the principal location.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Antarctica/Syowa	0	-	zzz	1957 Jan 29
-			3:00	-	SYOT	# Syowa Time
-# See:
-# <a href="http://www.nipr.ac.jp/english/ara01.html">
-# NIPR Antarctic Research Activities (1999-08-17)
-# </a>
-
-# S Korea - year-round base
-# King Sejong, King George Island, -6213-05847, since 1988
-
-# New Zealand - claims
-# Balleny Islands (never inhabited)
-# Scott Island (never inhabited)
-#
-# year-round base
-# Scott, Ross Island, since 1957-01, is like Antarctica/McMurdo.
-#
-# These rules for New Zealand are stolen from the `australasia' file.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	NZAQ	1974	only	-	Nov	 3	2:00s	1:00	D
-Rule	NZAQ	1975	1988	-	Oct	lastSun	2:00s	1:00	D
-Rule	NZAQ	1989	only	-	Oct	 8	2:00s	1:00	D
-Rule	NZAQ	1990	max	-	Oct	Sun>=1	2:00s	1:00	D
-Rule	NZAQ	1975	only	-	Feb	23	2:00s	0	S
-Rule	NZAQ	1976	1989	-	Mar	Sun>=1	2:00s	0	S
-Rule	NZAQ	1990	max	-	Mar	Sun>=15	2:00s	0	S
-
-# Norway - territories
-# Bouvet (never inhabited)
-#
-# claims
-# Peter I Island (never inhabited)
-
-# Poland - year-round base
-# Arctowski, King George Island, -620945-0582745, since 1977
-
-# Russia - year-round bases
-# Bellingshausen, King George Island, -621159-0585337, since 1968-02-22
-# Mirny, Davis coast, -6633+09301, since 1956-02
-# Molodezhnaya, Alasheyev Bay, -6740+04551,
-#	year-round from 1962-02 to 1999-07-01
-# Novolazarevskaya, Queen Maud Land, -7046+01150,
-#	year-round from 1960/61 to 1992
-
-# Vostok, since 1957-12-16, temporarily closed 1994-02/1994-11
-# <a href="http://quest.arc.nasa.gov/antarctica/QA/computers/Directions,Time,ZIP">
-# From Craig Mundell (1994-12-15)</a>:
-# Vostok, which is one of the Russian stations, is set on the same
-# time as Moscow, Russia.
-#
-# From Lee Hotz (2001-03-08):
-# I queried the folks at Columbia who spent the summer at Vostok and this is
-# what they had to say about time there:
-# ``in the US Camp (East Camp) we have been on New Zealand (McMurdo)
-# time, which is 12 hours ahead of GMT. The Russian Station Vostok was
-# 6 hours behind that (although only 2 miles away, i.e. 6 hours ahead
-# of GMT). This is a time zone I think two hours east of Moscow. The
-# natural time zone is in between the two: 8 hours ahead of GMT.''
-#
-# From Paul Eggert (2001-05-04):
-# This seems to be hopelessly confusing, so I asked Lee Hotz about it
-# in person.  He said that some Antartic locations set their local
-# time so that noon is the warmest part of the day, and that this
-# changes during the year and does not necessarily correspond to mean
-# solar noon.  So the Vostok time might have been whatever the clocks
-# happened to be during their visit.  So we still don't really know what time
-# it is at Vostok.  But we'll guess UTC+6.
-#
-Zone Antarctica/Vostok	0	-	zzz	1957 Dec 16
-			6:00	-	VOST	# Vostok time
-
-# S Africa - year-round bases
-# Marion Island, -4653+03752
-# Sanae, -7141-00250
-
-# UK
-#
-# British Antarctic Territories (BAT) claims
-# South Orkney Islands
-#	scientific station from 1903
-#	whaling station at Signy I 1920/1926
-# South Shetland Islands
-#
-# year-round bases
-# Bird Island, South Georgia, -5400-03803, since 1983
-# Deception Island, -6259-06034, whaling station 1912/1931,
-#	scientific station 1943/1967,
-#	previously sealers and a scientific expedition wintered by accident,
-#	and a garrison was deployed briefly
-# Halley, Coates Land, -7535-02604, since 1956-01-06
-#	Halley is on a moving ice shelf and is periodically relocated
-#	so that it is never more than 10km from its nominal location.
-# Rothera, Adelaide Island, -6734-6808, since 1976-12-01
-#
-# From Paul Eggert (2002-10-22)
-# <http://webexhibits.org/daylightsaving/g.html> says Rothera is -03 all year.
-#
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Antarctica/Rothera	0	-	zzz	1976 Dec  1
-			-3:00	-	ROTT	# Rothera time
-
-# Uruguay - year round base
-# Artigas, King George Island, -621104-0585107
-
-# USA - year-round bases
-#
-# Palmer, Anvers Island, since 1965 (moved 2 miles in 1968)
-#
-# From Ethan Dicks (1996-10-06):
-# It keeps the same time as Punta Arenas, Chile, because, just like us
-# and the South Pole, that's the other end of their supply line....
-# I verified with someone who was there that since 1980,
-# Palmer has followed Chile.  Prior to that, before the Falklands War,
-# Palmer used to be supplied from Argentina.
-#
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Antarctica/Palmer	0	-	zzz	1965
-			-4:00	ArgAQ	AR%sT	1969 Oct 5
-			-3:00	ArgAQ	AR%sT	1982 May
-			-4:00	ChileAQ	CL%sT
-#
-#
-# McMurdo, Ross Island, since 1955-12
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Antarctica/McMurdo	0	-	zzz	1956
-			12:00	NZAQ	NZ%sT
-#
-# Amundsen-Scott, South Pole, continuously occupied since 1956-11-20
-#
-# From Paul Eggert (1996-09-03):
-# Normally it wouldn't have a separate entry, since it's like the
-# larger Antarctica/McMurdo since 1970, but it's too famous to omit.
-#
-# From Chris Carrier (1996-06-27):
-# Siple, the first commander of the South Pole station,
-# stated that he would have liked to have kept GMT at the station,
-# but that he found it more convenient to keep GMT+12
-# as supplies for the station were coming from McMurdo Sound,
-# which was on GMT+12 because New Zealand was on GMT+12 all year
-# at that time (1957).  (Source: Siple's book 90 degrees SOUTH.)
-#
-# From Susan Smith
-# http://www.cybertours.com/whs/pole10.html
-# (1995-11-13 16:24:56 +1300, no longer available):
-# We use the same time as McMurdo does.
-# And they use the same time as Christchurch, NZ does....
-# One last quirk about South Pole time.
-# All the electric clocks are usually wrong.
-# Something about the generators running at 60.1hertz or something
-# makes all of the clocks run fast.  So every couple of days,
-# we have to go around and set them back 5 minutes or so.
-# Maybe if we let them run fast all of the time, we'd get to leave here sooner!!
-#
-Link	Antarctica/McMurdo	Antarctica/South_Pole
+# @(#)antarctica	7.30
+# <pre>
+
+# From Paul Eggert (1999-11-15):
+# To keep things manageable, we list only locations occupied year-round; see
+# <a href="http://www.comnap.aq/comnap/comnap.nsf/P/Stations/">
+# COMNAP - Stations and Bases
+# </a>
+# and
+# <a href="http://www.spri.cam.ac.uk/bob/periant.htm">
+# Summary of the Peri-Antarctic Islands (1998-07-23)
+# </a>
+# for information.
+# Unless otherwise specified, we have no time zone information.
+#
+# Except for the French entries,
+# I made up all time zone abbreviations mentioned here; corrections welcome!
+# FORMAT is `zzz' and GMTOFF is 0 for locations while uninhabited.
+
+# These rules are stolen from the `europe' file.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	RussAQ	1981	1984	-	Apr	 1	 0:00	1:00	S
+Rule	RussAQ	1981	1983	-	Oct	 1	 0:00	0	-
+Rule	RussAQ	1984	1991	-	Sep	lastSun	 2:00s	0	-
+Rule	RussAQ	1985	1991	-	Mar	lastSun	 2:00s	1:00	S
+Rule	RussAQ	1992	only	-	Mar	lastSat	 23:00	1:00	S
+Rule	RussAQ	1992	only	-	Sep	lastSat	 23:00	0	-
+Rule	RussAQ	1993	max	-	Mar	lastSun	 2:00s	1:00	S
+Rule	RussAQ	1993	1995	-	Sep	lastSun	 2:00s	0	-
+Rule	RussAQ	1996	max	-	Oct	lastSun	 2:00s	0	-
+
+# These rules are stolen from the `southamerica' file.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	ArgAQ	1964	1966	-	Mar	 1	0:00	0	-
+Rule	ArgAQ	1964	1966	-	Oct	15	0:00	1:00	S
+Rule	ArgAQ	1967	only	-	Apr	 1	0:00	0	-
+Rule	ArgAQ	1967	1968	-	Oct	Sun<=7	0:00	1:00	S
+Rule	ArgAQ	1968	1969	-	Apr	Sun<=7	0:00	0	-
+Rule	ArgAQ	1974	only	-	Jan	23	0:00	1:00	S
+Rule	ArgAQ	1974	only	-	May	 1	0:00	0	-
+Rule	ArgAQ	1974	1976	-	Oct	Sun<=7	0:00	1:00	S
+Rule	ArgAQ	1975	1977	-	Apr	Sun<=7	0:00	0	-
+Rule	ChileAQ	1966	1997	-	Oct	Sun>=9	0:00	1:00	S
+Rule	ChileAQ	1967	1998	-	Mar	Sun>=9	0:00	0	-
+Rule	ChileAQ	1998	only	-	Sep	27	0:00	1:00	S
+Rule	ChileAQ	1999	only	-	Apr	 4	0:00	0	-
+Rule	ChileAQ	1999	max	-	Oct	Sun>=9	0:00	1:00	S
+Rule	ChileAQ	2000	max	-	Mar	Sun>=9	0:00	0	-
+
+
+# Argentina - year-round bases
+# Belgrano II, Confin Coast, -770227-0343737, since 1972-02-05
+# Esperanza, San Martin Land, -6323-05659, since 1952-12-17
+# Jubany, Potter Peninsula, King George Island, -6414-0602320, since 1982-01
+# Marambio, Seymour I, -6414-05637, since 1969-10-29
+# Orcadas, Laurie I, -6016-04444, since 1904-02-22
+# San Martin, Debenham I, -6807-06708, since 1951-03-21
+#	(except 1960-03 / 1976-03-21)
+
+# Australia - territories
+# Heard Island, McDonald Islands (uninhabited)
+#	previously sealers and scientific personnel wintered
+#	<a href="http://web.archive.org/web/20021204222245/http://www.dstc.qut.edu.au/DST/marg/daylight.html">
+#	Margaret Turner reports
+#	</a> (1999-09-30) that they're UTC+5, with no DST;
+#	presumably this is when they have visitors.
+#
+# year-round bases
+# Casey, Bailey Peninsula, -6617+11032, since 1969
+# Davis, Vestfold Hills, -6835+07759, since 1957-01-13
+#	(except 1964-11 - 1969-02)
+# Mawson, Holme Bay, -6736+06253, since 1954-02-13
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Antarctica/Casey	0	-	zzz	1969
+			8:00	-	WST	# Western (Aus) Standard Time
+Zone Antarctica/Davis	0	-	zzz	1957 Jan 13
+			7:00	-	DAVT	1964 Nov # Davis Time
+			0	-	zzz	1969 Feb
+			7:00	-	DAVT
+Zone Antarctica/Mawson	0	-	zzz	1954 Feb 13
+			6:00	-	MAWT	# Mawson Time
+# References:
+# <a href="http://www.antdiv.gov.au/aad/exop/sfo/casey/casey_aws.html">
+# Casey Weather (1998-02-26)
+# </a>
+# <a href="http://www.antdiv.gov.au/aad/exop/sfo/davis/video.html">
+# Davis Station, Antarctica (1998-02-26)
+# </a>
+# <a href="http://www.antdiv.gov.au/aad/exop/sfo/mawson/video.html">
+# Mawson Station, Antarctica (1998-02-25)
+# </a>
+
+# Brazil - year-round base
+# Comandante Ferraz, King George Island, -6205+05824, since 1983/4
+
+# Chile - year-round bases and towns
+# Escudero, South Shetland Is, -621157-0585735, since 1994
+# Presidente Eduadro Frei, King George Island, -6214-05848, since 1969-03-07
+# General Bernardo O'Higgins, Antarctic Peninsula, -6319-05704, since 1948-02
+# Capitan Arturo Prat, -6230-05941
+# Villa Las Estrellas (a town), around the Frei base, since 1984-04-09
+# These locations have always used Santiago time; use TZ='America/Santiago'.
+
+# China - year-round bases
+# Great Wall, King George Island, -6213-05858, since 1985-02-20
+# Zhongshan, Larsemann Hills, Prydz Bay, -6922+07623, since 1989-02-26
+
+# France - year-round bases
+#
+# From Antoine Leca (1997-01-20):
+# Time data are from Nicole Pailleau at the IFRTP
+# (French Institute for Polar Research and Technology).
+# She confirms that French Southern Territories and Terre Adelie bases
+# don't observe daylight saving time, even if Terre Adelie supplies came
+# from Tasmania.
+#
+# French Southern Territories with year-round inhabitants
+#
+# Martin-de-Vivies Base, Amsterdam Island, -374105+0773155, since 1950
+# Alfred-Faure Base, Crozet Islands, -462551+0515152, since 1964
+# Port-aux-Francais, Kerguelen Islands, -492110+0701303, since 1951;
+#	whaling & sealing station operated 1908/1914, 1920/1929, and 1951/1956
+#
+# St Paul Island - near Amsterdam, uninhabited
+#	fishing stations operated variously 1819/1931
+#
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Indian/Kerguelen	0	-	zzz	1950	# Port-aux-Francais
+			5:00	-	TFT	# ISO code TF Time
+#
+# year-round base in the main continent
+# Dumont-d'Urville, Ile des Petrels, -6640+14001, since 1956-11
+#
+# Another base at Port-Martin, 50km east, began operation in 1947.
+# It was destroyed by fire on 1952-01-14.
+#
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Antarctica/DumontDUrville 0 -	zzz	1947
+			10:00	-	PMT	1952 Jan 14 # Port-Martin Time
+			0	-	zzz	1956 Nov
+			10:00	-	DDUT	# Dumont-d'Urville Time
+# Reference:
+# <a href="http://en.wikipedia.org/wiki/Dumont_d'Urville_Station">
+# Dumont d'Urville Station (2005-12-05)
+# </a>
+
+# Germany - year-round base
+# Georg von Neumayer, -7039-00815
+
+# India - year-round base
+# Dakshin Gangotri, -7005+01200
+
+# Japan - year-round bases
+# Dome Fuji, -7719+03942
+# Syowa, -690022+0393524
+#
+# From Hideyuki Suzuki (1999-02-06):
+# In all Japanese stations, +0300 is used as the standard time.
+#
+# Syowa station, which is the first antarctic station of Japan,
+# was established on 1957-01-29.  Since Syowa station is still the main
+# station of Japan, it's appropriate for the principal location.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Antarctica/Syowa	0	-	zzz	1957 Jan 29
+			3:00	-	SYOT	# Syowa Time
+# See:
+# <a href="http://www.nipr.ac.jp/english/ara01.html">
+# NIPR Antarctic Research Activities (1999-08-17)
+# </a>
+
+# S Korea - year-round base
+# King Sejong, King George Island, -6213-05847, since 1988
+
+# New Zealand - claims
+# Balleny Islands (never inhabited)
+# Scott Island (never inhabited)
+#
+# year-round base
+# Scott, Ross Island, since 1957-01, is like Antarctica/McMurdo.
+#
+# These rules for New Zealand are stolen from the `australasia' file.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	NZAQ	1974	only	-	Nov	 3	2:00s	1:00	D
+Rule	NZAQ	1975	1988	-	Oct	lastSun	2:00s	1:00	D
+Rule	NZAQ	1989	only	-	Oct	 8	2:00s	1:00	D
+Rule	NZAQ	1990	max	-	Oct	Sun>=1	2:00s	1:00	D
+Rule	NZAQ	1975	only	-	Feb	23	2:00s	0	S
+Rule	NZAQ	1976	1989	-	Mar	Sun>=1	2:00s	0	S
+Rule	NZAQ	1990	max	-	Mar	Sun>=15	2:00s	0	S
+
+# Norway - territories
+# Bouvet (never inhabited)
+#
+# claims
+# Peter I Island (never inhabited)
+
+# Poland - year-round base
+# Arctowski, King George Island, -620945-0582745, since 1977
+
+# Russia - year-round bases
+# Bellingshausen, King George Island, -621159-0585337, since 1968-02-22
+# Mirny, Davis coast, -6633+09301, since 1956-02
+# Molodezhnaya, Alasheyev Bay, -6740+04551,
+#	year-round from 1962-02 to 1999-07-01
+# Novolazarevskaya, Queen Maud Land, -7046+01150,
+#	year-round from 1960/61 to 1992
+
+# Vostok, since 1957-12-16, temporarily closed 1994-02/1994-11
+# <a href="http://quest.arc.nasa.gov/antarctica/QA/computers/Directions,Time,ZIP">
+# From Craig Mundell (1994-12-15)</a>:
+# Vostok, which is one of the Russian stations, is set on the same
+# time as Moscow, Russia.
+#
+# From Lee Hotz (2001-03-08):
+# I queried the folks at Columbia who spent the summer at Vostok and this is
+# what they had to say about time there:
+# ``in the US Camp (East Camp) we have been on New Zealand (McMurdo)
+# time, which is 12 hours ahead of GMT. The Russian Station Vostok was
+# 6 hours behind that (although only 2 miles away, i.e. 6 hours ahead
+# of GMT). This is a time zone I think two hours east of Moscow. The
+# natural time zone is in between the two: 8 hours ahead of GMT.''
+#
+# From Paul Eggert (2001-05-04):
+# This seems to be hopelessly confusing, so I asked Lee Hotz about it
+# in person.  He said that some Antartic locations set their local
+# time so that noon is the warmest part of the day, and that this
+# changes during the year and does not necessarily correspond to mean
+# solar noon.  So the Vostok time might have been whatever the clocks
+# happened to be during their visit.  So we still don't really know what time
+# it is at Vostok.  But we'll guess UTC+6.
+#
+Zone Antarctica/Vostok	0	-	zzz	1957 Dec 16
+			6:00	-	VOST	# Vostok time
+
+# S Africa - year-round bases
+# Marion Island, -4653+03752
+# Sanae, -7141-00250
+
+# UK
+#
+# British Antarctic Territories (BAT) claims
+# South Orkney Islands
+#	scientific station from 1903
+#	whaling station at Signy I 1920/1926
+# South Shetland Islands
+#
+# year-round bases
+# Bird Island, South Georgia, -5400-03803, since 1983
+# Deception Island, -6259-06034, whaling station 1912/1931,
+#	scientific station 1943/1967,
+#	previously sealers and a scientific expedition wintered by accident,
+#	and a garrison was deployed briefly
+# Halley, Coates Land, -7535-02604, since 1956-01-06
+#	Halley is on a moving ice shelf and is periodically relocated
+#	so that it is never more than 10km from its nominal location.
+# Rothera, Adelaide Island, -6734-6808, since 1976-12-01
+#
+# From Paul Eggert (2002-10-22)
+# <http://webexhibits.org/daylightsaving/g.html> says Rothera is -03 all year.
+#
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Antarctica/Rothera	0	-	zzz	1976 Dec  1
+			-3:00	-	ROTT	# Rothera time
+
+# Uruguay - year round base
+# Artigas, King George Island, -621104-0585107
+
+# USA - year-round bases
+#
+# Palmer, Anvers Island, since 1965 (moved 2 miles in 1968)
+#
+# From Ethan Dicks (1996-10-06):
+# It keeps the same time as Punta Arenas, Chile, because, just like us
+# and the South Pole, that's the other end of their supply line....
+# I verified with someone who was there that since 1980,
+# Palmer has followed Chile.  Prior to that, before the Falklands War,
+# Palmer used to be supplied from Argentina.
+#
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Antarctica/Palmer	0	-	zzz	1965
+			-4:00	ArgAQ	AR%sT	1969 Oct 5
+			-3:00	ArgAQ	AR%sT	1982 May
+			-4:00	ChileAQ	CL%sT
+#
+#
+# McMurdo, Ross Island, since 1955-12
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Antarctica/McMurdo	0	-	zzz	1956
+			12:00	NZAQ	NZ%sT
+#
+# Amundsen-Scott, South Pole, continuously occupied since 1956-11-20
+#
+# From Paul Eggert (1996-09-03):
+# Normally it wouldn't have a separate entry, since it's like the
+# larger Antarctica/McMurdo since 1970, but it's too famous to omit.
+#
+# From Chris Carrier (1996-06-27):
+# Siple, the first commander of the South Pole station,
+# stated that he would have liked to have kept GMT at the station,
+# but that he found it more convenient to keep GMT+12
+# as supplies for the station were coming from McMurdo Sound,
+# which was on GMT+12 because New Zealand was on GMT+12 all year
+# at that time (1957).  (Source: Siple's book 90 degrees SOUTH.)
+#
+# From Susan Smith
+# http://www.cybertours.com/whs/pole10.html
+# (1995-11-13 16:24:56 +1300, no longer available):
+# We use the same time as McMurdo does.
+# And they use the same time as Christchurch, NZ does....
+# One last quirk about South Pole time.
+# All the electric clocks are usually wrong.
+# Something about the generators running at 60.1hertz or something
+# makes all of the clocks run fast.  So every couple of days,
+# we have to go around and set them back 5 minutes or so.
+# Maybe if we let them run fast all of the time, we'd get to leave here sooner!!
+#
+Link	Antarctica/McMurdo	Antarctica/South_Pole
diff --git a/JodaTime/src/java/org/joda/time/tz/src/asia b/JodaTime/src/java/org/joda/time/tz/src/asia
index c4d543b9e..59e62dde4 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/asia
+++ b/JodaTime/src/java/org/joda/time/tz/src/asia
@@ -1,1641 +1,1642 @@
-# @(#)asia	7.89
-
-# This data is by no means authoritative; if you think you know better,
-# go ahead and edit the file (and please send any changes to
-# tz@elsie.nci.nih.gov for general use in the future).
-
-# From Paul Eggert (1999-03-22):
-#
-# A good source for time zone historical data outside the U.S. is
-# Thomas G. Shanks, The International Atlas (5th edition),
-# San Diego: ACS Publications, Inc. (1999).
-#
-# Gwillim Law writes that a good source
-# for recent time zone data is the International Air Transport
-# Association's Standard Schedules Information Manual (IATA SSIM),
-# published semiannually.  Law sent in several helpful summaries
-# of the IATA's data after 1990.
-#
-# Except where otherwise noted, Shanks is the source for entries through 1990,
-# and IATA SSIM is the source for entries after 1990.
-#
-# Another source occasionally used is Edward W. Whitman, World Time Differences,
-# Whitman Publishing Co, 2 Niagara Av, Ealing, London (undated), which
-# I found in the UCLA library.
-#
-# A reliable and entertaining source about time zones is
-# Derek Howse, Greenwich time and longitude, Philip Wilson Publishers (1997).
-#
-# I invented the abbreviations marked `*' in the following table;
-# the rest are from earlier versions of this file, or from other sources.
-# Corrections are welcome!
-#	     std  dst
-#	     LMT	Local Mean Time
-#	2:00 EET  EEST	Eastern European Time
-#	2:00 IST  IDT	Israel
-#	3:00 AST  ADT	Arabia*
-#	3:30 IRST IRDT	Iran
-#	4:00 GST	Gulf*
-#	5:30 IST	India
-#	7:00 ICT	Indochina*
-#	7:00 WIT	west Indonesia
-#	8:00 CIT	central Indonesia
-#	8:00 CST	China
-#	9:00 CJT	Central Japanese Time (1896/1937)*
-#	9:00 EIT	east Indonesia
-#	9:00 JST  JDT	Japan
-#	9:00 KST  KDT	Korea
-#	9:30 CST	(Australian) Central Standard Time
-#
-# See the `europe' file for Russia and Turkey in Asia.
-
-# From Guy Harris:
-# Incorporates data for Singapore from Robert Elz' asia 1.1, as well as
-# additional information from Tom Yap, Sun Microsystems Intercontinental
-# Technical Support (including a page from the Official Airline Guide -
-# Worldwide Edition).  The names for time zones are guesses.
-
-###############################################################################
-
-# These rules are stolen from the `europe' file.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	EUAsia	1981	max	-	Mar	lastSun	 1:00u	1:00	S
-Rule	EUAsia	1996	max	-	Oct	lastSun	 1:00u	0	-
-Rule E-EurAsia	1981	max	-	Mar	lastSun	 0:00	1:00	S
-Rule E-EurAsia	1979	1995	-	Sep	lastSun	 0:00	0	-
-Rule E-EurAsia	1996	max	-	Oct	lastSun	 0:00	0	-
-Rule RussiaAsia	1981	1984	-	Apr	1	 0:00	1:00	S
-Rule RussiaAsia	1981	1983	-	Oct	1	 0:00	0	-
-Rule RussiaAsia	1984	1991	-	Sep	lastSun	 2:00s	0	-
-Rule RussiaAsia	1985	1991	-	Mar	lastSun	 2:00s	1:00	S
-Rule RussiaAsia	1992	only	-	Mar	lastSat	23:00	1:00	S
-Rule RussiaAsia	1992	only	-	Sep	lastSat	23:00	0	-
-Rule RussiaAsia	1993	max	-	Mar	lastSun	 2:00s	1:00	S
-Rule RussiaAsia	1993	1995	-	Sep	lastSun	 2:00s	0	-
-Rule RussiaAsia	1996	max	-	Oct	lastSun	 2:00s	0	-
-
-# Afghanistan
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Kabul	4:36:48 -	LMT	1890
-			4:00	-	AFT	1945
-			4:30	-	AFT
-
-# Armenia
-# From Paul Eggert (1999-10-29):
-# Shanks has Yerevan switching to 3:00 (with Russian DST) in spring 1991,
-# then to 4:00 with no DST in fall 1995, then readopting Russian DST in 1997.
-# Go with Shanks, even when he disagrees with others.  Edgar Der-Danieliantz
-# reported (1996-05-04) that Yerevan probably wouldn't use DST
-# in 1996, though it did use DST in 1995.  IATA SSIM (1991/1998) reports that
-# Armenia switched from 3:00 to 4:00 in 1998 and observed DST after 1991,
-# but started switching at 3:00s in 1998.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Yerevan	2:58:00 -	LMT	1924 May  2
-			3:00	-	YERT	1957 Mar    # Yerevan Time
-			4:00 RussiaAsia YER%sT	1991 Mar 31 2:00s
-			3:00	1:00	YERST	1991 Sep 23 # independence
-			3:00 RussiaAsia	AM%sT	1995 Sep 24 2:00s
-			4:00	-	AMT	1997
-			4:00 RussiaAsia	AM%sT
-
-# Azerbaijan
-# From Rustam Aliyev of the Azerbaijan Internet Forum (2005-10-23):
-# According to the resolution of Cabinet of Ministers, 1997
-# Resolution available at: http://aif.az/docs/daylight_res.pdf
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Azer	1997	max	-	Mar	lastSun	 4:00	1:00	S
-Rule	Azer	1997	max	-	Oct	lastSun	 5:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Baku	3:19:24 -	LMT	1924 May  2
-			3:00	-	BAKT	1957 Mar    # Baku Time
-			4:00 RussiaAsia BAK%sT	1991 Mar 31 2:00s
-			3:00	1:00	BAKST	1991 Aug 30 # independence
-			3:00 RussiaAsia	AZ%sT	1992 Sep lastSat 23:00
-			4:00	-	AZT	1996 # Azerbaijan time
-			4:00	EUAsia	AZ%sT	1997
-			4:00	Azer	AZ%sT
-
-# Bahrain
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Bahrain	3:22:20 -	LMT	1920		# Al Manamah
-			4:00	-	GST	1972 Jun
-			3:00	-	AST
-
-# Bangladesh
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Dhaka	6:01:40 -	LMT	1890
-			5:53:20	-	HMT	1941 Oct    # Howrah Mean Time?
-			6:30	-	BURT	1942 May 15 # Burma Time
-			5:30	-	IST	1942 Sep
-			6:30	-	BURT	1951 Sep 30
-			6:00	-	DACT	1971 Mar 26 # Dacca Time
-			6:00	-	BDT	# Bangladesh Time
-
-# Bhutan
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Thimphu	5:58:36 -	LMT	1947 Aug 15 # or Thimbu
-			5:30	-	IST	1987 Oct
-			6:00	-	BTT	# Bhutan Time
-
-# British Indian Ocean Territory
-# Whitman and the 1995 CIA time zone map say 5:00, but the
-# 1997 and later maps say 6:00.  Assume the switch occurred in 1996.
-# We have no information as to when standard time was introduced;
-# assume it occurred in 1907, the same year as Mauritius (which
-# then contained the Chagos Archipelago).
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Indian/Chagos	4:49:40	-	LMT	1907
-			5:00	-	IOT	1996 # BIOT Time
-			6:00	-	IOT
-
-# Brunei
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Brunei	7:39:40 -	LMT	1926 Mar   # Bandar Seri Begawan
-			7:30	-	BNT	1933
-			8:00	-	BNT
-
-# Burma / Myanmar
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Rangoon	6:24:40 -	LMT	1880		# or Yangon
-			6:24:36	-	RMT	1920	   # Rangoon Mean Time?
-			6:30	-	BURT	1942 May   # Burma Time
-			9:00	-	JST	1945 May 3
-			6:30	-	MMT		   # Myanmar Time
-
-# Cambodia
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Phnom_Penh	6:59:40 -	LMT	1906 Jun  9
-			7:06:20	-	SMT	1911 Mar 11 0:01 # Saigon MT?
-			7:00	-	ICT	1912 May
-			8:00	-	ICT	1931 May
-			7:00	-	ICT
-
-# China
-
-# From Guy Harris:
-# People's Republic of China.  Yes, they really have only one time zone.
-
-# From Bob Devine (1988-01-28):
-# No they don't.  See TIME mag, 1986-02-17 p.52.  Even though
-# China is across 4 physical time zones, before Feb 1, 1986 only the
-# Peking (Bejing) time zone was recognized.  Since that date, China
-# has two of 'em -- Peking's and Urumqi (named after the capital of
-# the Xinjiang Uyghur Autonomous Region).  I don't know about DST for it.
-#
-# . . .I just deleted the DST table and this editor makes it too
-# painful to suck in another copy..  So, here is what I have for
-# DST start/end dates for Peking's time zone (info from AP):
-#
-#     1986 May 4 - Sept 14
-#     1987 mid-April - ??
-
-# From U. S. Naval Observatory (1989-01-19):
-# CHINA               8 H  AHEAD OF UTC  ALL OF CHINA, INCL TAIWAN
-# CHINA               9 H  AHEAD OF UTC  APR 17 - SEP 10
-
-# From Paul Eggert (1995-12-19):
-# Shanks writes that China has had a single time zone since 1980 May 1,
-# observing summer DST from 1986 through 1991; this contradicts Devine's
-# note about Time magazine, though apparently _something_ happened in 1986.
-# Go with Shanks for now.  I made up names for the other pre-1980 time zones.
-
-# From Shanks:
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Shang	1940	only	-	Jun	 3	0:00	1:00	D
-Rule	Shang	1940	1941	-	Oct	 1	0:00	0	S
-Rule	Shang	1941	only	-	Mar	16	0:00	1:00	D
-Rule	PRC	1986	only	-	May	 4	0:00	1:00	D
-Rule	PRC	1986	1991	-	Sep	Sun>=11	0:00	0	S
-Rule	PRC	1987	1991	-	Apr	Sun>=10	0:00	1:00	D
-#
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-#
-# From Anthony Fok (2001-12-20):
-# BTW, I did some research on-line and found some info regarding these five
-# historic timezones from some Taiwan websites.  And yes, there are official
-# Chinese names for these locales (before 1949):
-# Changbai Time ("Long-white Time", Long-white = Heilongjiang area)
-Zone	Asia/Harbin	8:26:44	-	LMT	1928 # or Haerbin
-			8:30	-	CHAT	1932 Mar # Changbai Time
-			8:00	-	CST	1940
-			9:00	-	CHAT	1966 May
-			8:30	-	CHAT	1980 May
-			8:00	PRC	C%sT
-# Zhongyuan Time ("Central plain Time")
-Zone	Asia/Shanghai	8:05:52	-	LMT	1928
-			8:00	Shang	C%sT	1949
-			8:00	PRC	C%sT
-# Long-shu Time (probably due to Long and Shu being two names of that area)
-Zone	Asia/Chongqing	7:06:20	-	LMT	1928 # or Chungking
-			7:00	-	LONT	1980 May # Long-shu Time
-			8:00	PRC	C%sT
-# Xin-zang Time ("Xinjiang-Tibet Time")
-Zone	Asia/Urumqi	5:50:20	-	LMT	1928 # or Urumchi
-			6:00	-	URUT	1980 May # Urumqi Time
-			8:00	PRC	C%sT
-# Kunlun Time
-Zone	Asia/Kashgar	5:03:56	-	LMT	1928 # or Kashi or Kaxgar
-			5:30	-	KAST	1940	 # Kashgar Time
-			5:00	-	KAST	1980 May
-			8:00	PRC	C%sT
-
-# Hong Kong (Xianggang)
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	HK	1946	only	-	Apr	20	3:30	1:00	S
-Rule	HK	1946	only	-	Dec	1	3:30	0	-
-Rule	HK	1947	only	-	Apr	13	3:30	1:00	S
-Rule	HK	1947	only	-	Dec	30	3:30	0	-
-Rule	HK	1948	only	-	May	2	3:30	1:00	S
-Rule	HK	1948	1952	-	Oct	lastSun	3:30	0	-
-Rule	HK	1949	1953	-	Apr	Sun>=1	3:30	1:00	S
-Rule	HK	1953	only	-	Nov	1	3:30	0	-
-Rule	HK	1954	1964	-	Mar	Sun>=18	3:30	1:00	S
-Rule	HK	1954	only	-	Oct	31	3:30	0	-
-Rule	HK	1955	1964	-	Nov	Sun>=1	3:30	0	-
-Rule	HK	1965	1977	-	Apr	Sun>=16	3:30	1:00	S
-Rule	HK	1965	1977	-	Oct	Sun>=16	3:30	0	-
-Rule	HK	1979	1980	-	May	Sun>=8	3:30	1:00	S
-Rule	HK	1979	1980	-	Oct	Sun>=16	3:30	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Hong_Kong	7:36:36 -	LMT	1904 Oct 30
-			8:00	HK	HK%sT
-
-
-###############################################################################
-
-# Taiwan
-
-# Shanks writes that Taiwan observed DST during 1945, when it
-# was still controlled by Japan.  This is hard to believe, but we don't
-# have any other information.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Taiwan	1945	1951	-	May	1	0:00	1:00	D
-Rule	Taiwan	1945	1951	-	Oct	1	0:00	0	S
-Rule	Taiwan	1952	only	-	Mar	1	0:00	1:00	D
-Rule	Taiwan	1952	1954	-	Nov	1	0:00	0	S
-Rule	Taiwan	1953	1959	-	Apr	1	0:00	1:00	D
-Rule	Taiwan	1955	1961	-	Oct	1	0:00	0	S
-Rule	Taiwan	1960	1961	-	Jun	1	0:00	1:00	D
-Rule	Taiwan	1974	1975	-	Apr	1	0:00	1:00	D
-Rule	Taiwan	1974	1975	-	Oct	1	0:00	0	S
-Rule	Taiwan	1980	only	-	Jun	30	0:00	1:00	D
-Rule	Taiwan	1980	only	-	Sep	30	0:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Taipei	8:06:00 -	LMT	1896 # or Taibei or T'ai-pei
-			8:00	Taiwan	C%sT
-
-# Macau (Macao, Aomen)
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Macau	1961	1962	-	Mar	Sun>=16	3:30	1:00	S
-Rule	Macau	1961	1964	-	Nov	Sun>=1	3:30	0	-
-Rule	Macau	1963	only	-	Mar	Sun>=16	0:00	1:00	S
-Rule	Macau	1964	only	-	Mar	Sun>=16	3:30	1:00	S
-Rule	Macau	1965	only	-	Mar	Sun>=16	0:00	1:00	S
-Rule	Macau	1965	only	-	Oct	31	0:00	0	-
-Rule	Macau	1966	1971	-	Apr	Sun>=16	3:30	1:00	S
-Rule	Macau	1966	1971	-	Oct	Sun>=16	3:30	0	-
-Rule	Macau	1972	1974	-	Apr	Sun>=15	0:00	1:00	S
-Rule	Macau	1972	1973	-	Oct	Sun>=15	0:00	0	-
-Rule	Macau	1974	1977	-	Oct	Sun>=15	3:30	0	-
-Rule	Macau	1975	1977	-	Apr	Sun>=15	3:30	1:00	S
-Rule	Macau	1978	1980	-	Apr	Sun>=15	0:00	1:00	S
-Rule	Macau	1978	1980	-	Oct	Sun>=15	0:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Macau	7:34:20 -	LMT	1912
-			8:00	Macau	MO%sT	1999 Dec 20 # return to China
-			8:00	PRC	C%sT
-
-
-###############################################################################
-
-# Cyprus
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Cyprus	1975	only	-	Apr	13	0:00	1:00	S
-Rule	Cyprus	1975	only	-	Oct	12	0:00	0	-
-Rule	Cyprus	1976	only	-	May	15	0:00	1:00	S
-Rule	Cyprus	1976	only	-	Oct	11	0:00	0	-
-Rule	Cyprus	1977	1980	-	Apr	Sun>=1	0:00	1:00	S
-Rule	Cyprus	1977	only	-	Sep	25	0:00	0	-
-Rule	Cyprus	1978	only	-	Oct	2	0:00	0	-
-Rule	Cyprus	1979	1997	-	Sep	lastSun	0:00	0	-
-Rule	Cyprus	1981	1998	-	Mar	lastSun	0:00	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Nicosia	2:13:28 -	LMT	1921 Nov 14
-			2:00	Cyprus	EE%sT	1998 Sep
-			2:00	EUAsia	EE%sT
-# IATA SSIM (1998-09) has Cyprus using EU rules for the first time.
-
-# Classically, Cyprus belongs to Asia; e.g. see Herodotus, Histories, I.72.
-# However, for various reasons many users expect to find it under Europe.
-Link	Asia/Nicosia	Europe/Nicosia
-
-# Georgia
-# From Paul Eggert (1994-11-19):
-# Today's _Economist_ (p 60) reports that Georgia moved its clocks forward
-# an hour recently, due to a law proposed by Zurab Murvanidze,
-# an MP who went on a hunger strike for 11 days to force discussion about it!
-# We have no details, but we'll guess they didn't move the clocks back in fall.
-#
-# From Mathew Englander, quoting AP (1996-10-23 13:05-04):
-# Instead of putting back clocks at the end of October, Georgia
-# will stay on daylight savings time this winter to save energy,
-# President Eduard Shevardnadze decreed Wednesday.
-#
-# From the BBC via Joseph S. Myers (2004-06-27):
-#
-# Georgia moved closer to Western Europe on Sunday...  The former Soviet
-# republic has changed its time zone back to that of Moscow.  As a result it
-# is now just four hours ahead of Greenwich Mean Time, rather than five hours
-# ahead.  The switch was decreed by the pro-Western president of Georgia,
-# Mikhail Saakashvili, who said the change was partly prompted by the process
-# of integration into Europe.
-
-# From Teimuraz Abashidze (2005-11-07):
-# Government of Georgia ... decided to NOT CHANGE daylight savings time on
-# [Oct.] 30, as it was done before during last more than 10 years.
-# Currently, we are in fact GMT +4:00, as before 30 October it was GMT
-# +3:00.... The problem is, there is NO FORMAL LAW or governmental document
-# about it.  As far as I can find, I was told, that there is no document,
-# because we just DIDN'T ISSUE document about switching to winter time....
-# I don't know what can be done, especially knowing that some years ago our
-# DST rules where changed THREE TIMES during one month.
-
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Tbilisi	2:59:16 -	LMT	1880
-			2:59:16	-	TBMT	1924 May  2 # Tbilisi Mean Time
-			3:00	-	TBIT	1957 Mar    # Tbilisi Time
-			4:00 RussiaAsia TBI%sT	1991 Mar 31 2:00s
-			3:00	1:00	TBIST	1991 Apr  9 # independence
-			3:00 RussiaAsia GE%sT	1992 # Georgia Time
-			3:00 E-EurAsia	GE%sT	1994 Sep lastSun
-			4:00 E-EurAsia	GE%sT	1996 Oct lastSun
-			4:00	1:00	GEST	1997 Mar lastSun
-			4:00 E-EurAsia	GE%sT	2004 Jun 27
-			3:00 RussiaAsia	GE%sT	2005 Mar lastSun 2:00
-			4:00	-	GET
-
-# East Timor
-
-# From Joao Carrascalao, brother of the former governor of East Timor, in
-# <a href="http://etan.org/et99c/december/26-31/30ETMAY.htm">
-# East Timor may be late for its millennium
-# </a> (1999-12-26/31):
-# Portugal tried to change the time forward in 1974 because the sun
-# rises too early but the suggestion raised a lot of problems with the
-# Timorese and I still don't think it would work today because it
-# conflicts with their way of life.
-
-# From Paul Eggert (2000-12-04):
-# We don't have any record of the above attempt.
-# Most likely our records are incomplete, but we have no better data.
-
-# <a href="http://www.hri.org/news/world/undh/last/00-08-16.undh.html">
-# From Manoel de Almeida e Silva, Deputy Spokesman for the UN Secretary-General
-# (2000-08-16)</a>:
-# The Cabinet of the East Timor Transition Administration decided
-# today to advance East Timor's time by one hour.  The time change,
-# which will be permanent, with no seasonal adjustment, will happen at
-# midnight on Saturday, September 16.
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Dili	8:22:20 -	LMT	1912
-			8:00	-	TLT	1942 Feb 21 23:00 # E Timor Time
-			9:00	-	JST	1945 Aug
-			9:00	-	TLT	1976 May  3
-			8:00	-	CIT	2000 Sep 17 00:00
-			9:00	-	TLT
-
-# India
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Calcutta	5:53:28 -	LMT	1880	# Kolkata
-			5:53:20	-	HMT	1941 Oct    # Howrah Mean Time?
-			6:30	-	BURT	1942 May 15 # Burma Time
-			5:30	-	IST	1942 Sep
-			5:30	1:00	IST	1945 Oct 15
-			5:30	-	IST
-# The following are like Asia/Calcutta:
-#	Andaman Is
-#	Lakshadweep (Laccadive, Minicoy and Amindivi Is)
-#	Nicobar Is
-
-# Indonesia
-#
-# From Gwillim Law (2001-05-28), overriding Shanks:
-# <http://www.sumatera-inc.com/go_to_invest/about_indonesia.asp#standtime>
-# says that Indonesia's time zones changed on 1988-01-01.  Looking at some
-# time zone maps, I think that must refer to Western Borneo (Kalimantan Barat
-# and Kalimantan Tengah) switching from UTC+8 to UTC+7.
-#
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Asia/Jakarta	7:07:12 -	LMT	1867 Aug 10
-# Shanks says the next transition was at 1924 Jan 1 0:13,
-# but this must be a typo.
-			7:07:12	-	JMT	1923 Dec 31 23:47:12 # Jakarta
-			7:20	-	JAVT	1932 Nov	 # Java Time
-			7:30	-	WIT	1942 Mar 23
-			9:00	-	JST	1945 Aug
-			7:30	-	WIT	1948 May
-			8:00	-	WIT	1950 May
-			7:30	-	WIT	1964
-			7:00	-	WIT
-Zone Asia/Pontianak	7:17:20	-	LMT	1908 May
-			7:17:20	-	PMT	1932 Nov    # Pontianak MT
-			7:30	-	WIT	1942 Jan 29
-			9:00	-	JST	1945 Aug
-			7:30	-	WIT	1948 May
-			8:00	-	WIT	1950 May
-			7:30	-	WIT	1964
-			8:00	-	CIT	1988 Jan  1
-			7:00	-	WIT
-Zone Asia/Makassar	7:57:36 -	LMT	1920
-			7:57:36	-	MMT	1932 Nov    # Macassar MT
-			8:00	-	CIT	1942 Feb  9
-			9:00	-	JST	1945 Aug
-			8:00	-	CIT
-Zone Asia/Jayapura	9:22:48 -	LMT	1932 Nov
-			9:00	-	EIT	1944
-			9:30	-	CST	1964
-			9:00	-	EIT
-
-# Iran
-
-# From Roozbeh Pournader (2003-03-15):
-# This is an English translation of what I just found (originally in Persian).
-# The Gregorian dates in brackets are mine:
-#
-#	Official Newspaper No. 13548-1370/6/25 [1991-09-16]
-#	No. 16760/T233 H				1370/6/10 [1991-09-01]
-#
-#	The Rule About Change of the Official Time of the Country
-#
-#	The Board of Ministers, in the meeting dated 1370/5/23 [1991-08-14],
-#	based on the suggestion number 2221/D dated 1370/4/22 [1991-07-13]
-#	of the Country's Organization for Official and Employment Affairs,
-#	and referring to the law for equating the working hours of workers
-#	and officers in the whole country dated 1359/4/23 [1980-07-14], and
-#	for synchronizing the official times of the country, agreed that:
-#
-#	The official time of the country will should move forward one hour
-#	at the 24[:00] hours of the first day of Farvardin and should return
-#	to its previous state at the 24[:00] hours of the 30th day of
-#	Shahrivar.
-#
-#	First Deputy to the President - Hassan Habibi
-#
-# From personal experience, that agrees with what has been followed
-# for at least the last 5 years.  Before that, for a few years, the
-# date used was the first Thursday night of Farvardin and the last
-# Thursday night of Shahrivar, but I can't give exact dates....
-# I have also changed the abbreviations to what is considered correct
-# here in Iran, IRST for regular time and IRDT for daylight saving time.
-#
-# From Roozbeh Pournader (2005-04-05):
-# The text of the Iranian law, in effect since 1925, clearly mentions
-# that the true solar year is the measure, and there is no arithmetic
-# leap year calculation involved.  There has never been any serious
-# plan to change that law....
-#
-# From Paul Eggert (2005-04-05):
-# Go with Shanks before September 1991, and with Pournader thereafter.
-# I used Ed Reingold's cal-persia in GNU Emacs 21.2 to check Persian dates,
-# stopping after 2037 when 32-bit time_t's overflow.
-# That cal-persia used Birashk's approximation, which disagrees with the solar
-# calendar predictions for the year 2025, so I corrected those dates by hand.
-#
-# From Oscar van Vlijmen (2005-03-30), writing about future
-# discrepancies between cal-persia and the Iranian calendar:
-# For 2091 solar-longitude-after yields 2091-03-20 08:40:07.7 UT for
-# the vernal equinox and that gets so close to 12:00 some local
-# Iranian time that the definition of the correct location needs to be
-# known exactly, amongst other factors.  2157 is even closer:
-# 2157-03-20 08:37:15.5 UT.  But the Gregorian year 2025 should give
-# no interpretation problem whatsoever.  By the way, another instant
-# in the near future where there will be a discrepancy between
-# arithmetical and astronomical Iranian calendars will be in 2058:
-# vernal equinox on 2058-03-20 09:03:05.9 UT.  The Java version of
-# Reingold's/Dershowitz' calculator gives correctly the Gregorian date
-# 2058-03-21 for 1 Farvardin 1437 (astronomical).
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Iran	1978	1980	-	Mar	21	0:00	1:00	D
-Rule	Iran	1978	only	-	Oct	21	0:00	0	S
-Rule	Iran	1979	only	-	Sep	19	0:00	0	S
-Rule	Iran	1980	only	-	Sep	23	0:00	0	S
-Rule	Iran	1991	only	-	May	 3	0:00	1:00	D
-Rule	Iran	1992	1995	-	Mar	22	0:00	1:00	D
-Rule	Iran	1991	1995	-	Sep	22	0:00	0	S
-Rule	Iran	1996	only	-	Mar	21	0:00	1:00	D
-Rule	Iran	1996	only	-	Sep	21	0:00	0	S
-Rule	Iran	1997	1999	-	Mar	22	0:00	1:00	D
-Rule	Iran	1997	1999	-	Sep	22	0:00	0	S
-Rule	Iran	2000	only	-	Mar	21	0:00	1:00	D
-Rule	Iran	2000	only	-	Sep	21	0:00	0	S
-Rule	Iran	2001	2003	-	Mar	22	0:00	1:00	D
-Rule	Iran	2001	2003	-	Sep	22	0:00	0	S
-Rule	Iran	2004	only	-	Mar	21	0:00	1:00	D
-Rule	Iran	2004	only	-	Sep	21	0:00	0	S
-Rule	Iran	2005	2007	-	Mar	22	0:00	1:00	D
-Rule	Iran	2005	2007	-	Sep	22	0:00	0	S
-Rule	Iran	2008	only	-	Mar	21	0:00	1:00	D
-Rule	Iran	2008	only	-	Sep	21	0:00	0	S
-Rule	Iran	2009	2011	-	Mar	22	0:00	1:00	D
-Rule	Iran	2009	2011	-	Sep	22	0:00	0	S
-Rule	Iran	2012	only	-	Mar	21	0:00	1:00	D
-Rule	Iran	2012	only	-	Sep	21	0:00	0	S
-Rule	Iran	2013	2015	-	Mar	22	0:00	1:00	D
-Rule	Iran	2013	2015	-	Sep	22	0:00	0	S
-Rule	Iran	2016	only	-	Mar	21	0:00	1:00	D
-Rule	Iran	2016	only	-	Sep	21	0:00	0	S
-Rule	Iran	2017	2019	-	Mar	22	0:00	1:00	D
-Rule	Iran	2017	2019	-	Sep	22	0:00	0	S
-Rule	Iran	2020	only	-	Mar	21	0:00	1:00	D
-Rule	Iran	2020	only	-	Sep	21	0:00	0	S
-Rule	Iran	2021	2023	-	Mar	22	0:00	1:00	D
-Rule	Iran	2021	2023	-	Sep	22	0:00	0	S
-Rule	Iran	2024	only	-	Mar	21	0:00	1:00	D
-Rule	Iran	2024	only	-	Sep	21	0:00	0	S
-Rule	Iran	2025	2027	-	Mar	22	0:00	1:00	D
-Rule	Iran	2025	2027	-	Sep	22	0:00	0	S
-Rule	Iran	2028	2029	-	Mar	21	0:00	1:00	D
-Rule	Iran	2028	2029	-	Sep	21	0:00	0	S
-Rule	Iran	2030	2031	-	Mar	22	0:00	1:00	D
-Rule	Iran	2030	2031	-	Sep	22	0:00	0	S
-Rule	Iran	2032	2033	-	Mar	21	0:00	1:00	D
-Rule	Iran	2032	2033	-	Sep	21	0:00	0	S
-Rule	Iran	2034	2035	-	Mar	22	0:00	1:00	D
-Rule	Iran	2034	2035	-	Sep	22	0:00	0	S
-Rule	Iran	2036	2037	-	Mar	21	0:00	1:00	D
-Rule	Iran	2036	2037	-	Sep	21	0:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Tehran	3:25:44	-	LMT	1916
-			3:25:44	-	TMT	1946	# Tehran Mean Time
-			3:30	-	IRST	1977 Nov
-			4:00	Iran	IR%sT	1979
-			3:30	Iran	IR%sT
-
-
-# Iraq
-#
-# From Jonathan Lennox (2000-06-12):
-# An article in this week's Economist ("Inside the Saddam-free zone", p. 50 in
-# the U.S. edition) on the Iraqi Kurds contains a paragraph:
-# "The three northern provinces ... switched their clocks this spring and
-# are an hour ahead of Baghdad."
-#
-# But Rives McDow (2000-06-18) quotes a contact in Iraqi-Kurdistan as follows:
-# In the past, some Kurdish nationalists, as a protest to the Iraqi
-# Government, did not adhere to daylight saving time.  They referred
-# to daylight saving as Saddam time.  But, as of today, the time zone
-# in Iraqi-Kurdistan is on standard time with Baghdad, Iraq.
-#
-# So we'll ignore the Economist's claim.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Iraq	1982	only	-	May	1	0:00	1:00	D
-Rule	Iraq	1982	1984	-	Oct	1	0:00	0	S
-Rule	Iraq	1983	only	-	Mar	31	0:00	1:00	D
-Rule	Iraq	1984	1985	-	Apr	1	0:00	1:00	D
-Rule	Iraq	1985	1990	-	Sep	lastSun	1:00s	0	S
-Rule	Iraq	1986	1990	-	Mar	lastSun	1:00s	1:00	D
-# IATA SSIM (1991/1996) says Apr 1 12:01am UTC; guess the `:01' is a typo.
-# Shanks says Iraq did not observe DST 1992/1997 or 1999 on; ignore this.
-Rule	Iraq	1991	max	-	Apr	 1	3:00s	1:00	D
-Rule	Iraq	1991	max	-	Oct	 1	3:00s	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Baghdad	2:57:40	-	LMT	1890
-			2:57:36	-	BMT	1918	    # Baghdad Mean Time?
-			3:00	-	AST	1982 May
-			3:00	Iraq	A%sT
-
-
-###############################################################################
-
-# Israel
-
-# From Ephraim Silverberg (2001-01-11):
-#
-# I coined "IST/IDT" circa 1988.  Until then there were three
-# different abbreviations in use:
-#
-# JST  Jerusalem Standard Time [Danny Braniss, Hebrew University]
-# IZT  Israel Zonal (sic) Time [Prof. Haim Papo, Technion]
-# EEST Eastern Europe Standard Time [used by almost everyone else]
-#
-# Since timezones should be called by country and not capital cities,
-# I ruled out JST.  As Israel is in Asia Minor and not Eastern Europe,
-# EEST was equally unacceptable.  Since "zonal" was not compatible with
-# any other timezone abbreviation, I felt that 'IST' was the way to go
-# and, indeed, it has received almost universal acceptance in timezone
-# settings in Israeli computers.
-#
-# In any case, I am happy to share timezone abbreviations with India,
-# high on my favorite-country list (and not only because my wife's
-# family is from India).
-
-# From Shanks:
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Zion	1940	only	-	Jun	 1	0:00	1:00	D
-Rule	Zion	1942	1944	-	Nov	 1	0:00	0	S
-Rule	Zion	1943	only	-	Apr	 1	2:00	1:00	D
-Rule	Zion	1944	only	-	Apr	 1	0:00	1:00	D
-Rule	Zion	1945	only	-	Apr	16	0:00	1:00	D
-Rule	Zion	1945	only	-	Nov	 1	2:00	0	S
-Rule	Zion	1946	only	-	Apr	16	2:00	1:00	D
-Rule	Zion	1946	only	-	Nov	 1	0:00	0	S
-Rule	Zion	1948	only	-	May	23	0:00	2:00	DD
-Rule	Zion	1948	only	-	Sep	 1	0:00	1:00	D
-Rule	Zion	1948	1949	-	Nov	 1	2:00	0	S
-Rule	Zion	1949	only	-	May	 1	0:00	1:00	D
-Rule	Zion	1950	only	-	Apr	16	0:00	1:00	D
-Rule	Zion	1950	only	-	Sep	15	3:00	0	S
-Rule	Zion	1951	only	-	Apr	 1	0:00	1:00	D
-Rule	Zion	1951	only	-	Nov	11	3:00	0	S
-Rule	Zion	1952	only	-	Apr	20	2:00	1:00	D
-Rule	Zion	1952	only	-	Oct	19	3:00	0	S
-Rule	Zion	1953	only	-	Apr	12	2:00	1:00	D
-Rule	Zion	1953	only	-	Sep	13	3:00	0	S
-Rule	Zion	1954	only	-	Jun	13	0:00	1:00	D
-Rule	Zion	1954	only	-	Sep	12	0:00	0	S
-Rule	Zion	1955	only	-	Jun	11	2:00	1:00	D
-Rule	Zion	1955	only	-	Sep	11	0:00	0	S
-Rule	Zion	1956	only	-	Jun	 3	0:00	1:00	D
-Rule	Zion	1956	only	-	Sep	30	3:00	0	S
-Rule	Zion	1957	only	-	Apr	29	2:00	1:00	D
-Rule	Zion	1957	only	-	Sep	22	0:00	0	S
-Rule	Zion	1974	only	-	Jul	 7	0:00	1:00	D
-Rule	Zion	1974	only	-	Oct	13	0:00	0	S
-Rule	Zion	1975	only	-	Apr	20	0:00	1:00	D
-Rule	Zion	1975	only	-	Aug	31	0:00	0	S
-Rule	Zion	1985	only	-	Apr	14	0:00	1:00	D
-Rule	Zion	1985	only	-	Sep	15	0:00	0	S
-Rule	Zion	1986	only	-	May	18	0:00	1:00	D
-Rule	Zion	1986	only	-	Sep	 7	0:00	0	S
-Rule	Zion	1987	only	-	Apr	15	0:00	1:00	D
-Rule	Zion	1987	only	-	Sep	13	0:00	0	S
-Rule	Zion	1988	only	-	Apr	 9	0:00	1:00	D
-Rule	Zion	1988	only	-	Sep	 3	0:00	0	S
-
-# From Ephraim Silverberg
-# (1997-03-04, 1998-03-16, 1998-12-28, 2000-01-17, 2000-07-25, 2004-12-22,
-# and 2005-02-17):
-
-# According to the Office of the Secretary General of the Ministry of
-# Interior, there is NO set rule for Daylight-Savings/Standard time changes.
-# One thing is entrenched in law, however: that there must be at least 150
-# days of daylight savings time annually.  From 1993-1998, the change to
-# daylight savings time was on a Friday morning from midnight IST to
-# 1 a.m IDT; up until 1998, the change back to standard time was on a
-# Saturday night from midnight daylight savings time to 11 p.m. standard
-# time.  1996 is an exception to this rule where the change back to standard
-# time took place on Sunday night instead of Saturday night to avoid
-# conflicts with the Jewish New Year.  In 1999, the change to
-# daylight savings time was still on a Friday morning but from
-# 2 a.m. IST to 3 a.m. IDT; furthermore, the change back to standard time
-# was also on a Friday morning from 2 a.m. IDT to 1 a.m. IST for
-# 1999 only.  In the year 2000, the change to daylight savings time was
-# similar to 1999, but although the change back will be on a Friday, it
-# will take place from 1 a.m. IDT to midnight IST.  Starting in 2001, all
-# changes to/from will take place at 1 a.m. old time, but now there is no
-# rule as to what day of the week it will take place in as the start date
-# (except in 2003) is the night after the Passover Seder (i.e. the eve
-# of the 16th of Nisan in the lunar Hebrew calendar) and the end date
-# (except in 2002) is three nights before Yom Kippur [Day of Atonement]
-# (the eve of the 7th of Tishrei in the lunar Hebrew calendar).
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Zion	1989	only	-	Apr	30	0:00	1:00	D
-Rule	Zion	1989	only	-	Sep	 3	0:00	0	S
-Rule	Zion	1990	only	-	Mar	25	0:00	1:00	D
-Rule	Zion	1990	only	-	Aug	26	0:00	0	S
-Rule	Zion	1991	only	-	Mar	24	0:00	1:00	D
-Rule	Zion	1991	only	-	Sep	 1	0:00	0	S
-Rule	Zion	1992	only	-	Mar	29	0:00	1:00	D
-Rule	Zion	1992	only	-	Sep	 6	0:00	0	S
-Rule	Zion	1993	only	-	Apr	 2	0:00	1:00	D
-Rule	Zion	1993	only	-	Sep	 5	0:00	0	S
-
-# The dates for 1994-1995 were obtained from Office of the Spokeswoman for the
-# Ministry of Interior, Jerusalem, Israel.  The spokeswoman can be reached by
-# calling the office directly at 972-2-6701447 or 972-2-6701448.
-
-# Rule	NAME    FROM    TO      TYPE    IN      ON      AT      SAVE    LETTER/S
-Rule	Zion	1994	only	-	Apr	 1	0:00	1:00	D
-Rule	Zion	1994	only	-	Aug	28	0:00	0	S
-Rule	Zion	1995	only	-	Mar	31	0:00	1:00	D
-Rule	Zion	1995	only	-	Sep	 3	0:00	0	S
-
-# The dates for 1996 were determined by the Minister of Interior of the
-# time, Haim Ramon.  The official announcement regarding 1996-1998
-# (with the dates for 1997-1998 no longer being relevant) can be viewed at:
-#
-#   ftp://ftp.cs.huji.ac.il/pub/tz/announcements/1996-1998.ramon.ps.gz
-#
-# The dates for 1997-1998 were altered by his successor, Rabbi Eli Suissa.
-#
-# The official announcements for the years 1997-1999 can be viewed at:
-#
-#   ftp://ftp.cs.huji.ac.il/pub/tz/announcements/YYYY.ps.gz
-#
-#       where YYYY is the relevant year.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Zion	1996	only	-	Mar	15	0:00	1:00	D
-Rule	Zion	1996	only	-	Sep	16	0:00	0	S
-Rule	Zion	1997	only	-	Mar	21	0:00	1:00	D
-Rule	Zion	1997	only	-	Sep	14	0:00	0	S
-Rule	Zion	1998	only	-	Mar	20	0:00	1:00	D
-Rule	Zion	1998	only	-	Sep	 6	0:00	0	S
-Rule	Zion	1999	only	-	Apr	 2	2:00	1:00	D
-Rule	Zion	1999	only	-	Sep	 3	2:00	0	S
-
-# The Knesset Interior Committee has changed the dates for 2000 for
-# the third time in just over a year and have set new dates for the
-# years 2001-2004 as well.
-#
-# The official announcement for the start date of 2000 can be viewed at:
-#
-#	ftp://ftp.cs.huji.ac.il/pub/tz/announcements/2000-start.ps.gz
-#
-# The official announcement for the end date of 2000 and the dates
-# for the years 2001-2004 can be viewed at:
-#
-#	ftp://ftp.cs.huji.ac.il/pub/tz/announcements/2000-2004.ps.gz
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Zion	2000	only	-	Apr	14	2:00	1:00	D
-Rule	Zion	2000	only	-	Oct	 6	1:00	0	S
-Rule	Zion	2001	only	-	Apr	 9	1:00	1:00	D
-Rule	Zion	2001	only	-	Sep	24	1:00	0	S
-Rule	Zion	2002	only	-	Mar	29	1:00	1:00	D
-Rule	Zion	2002	only	-	Oct	 7	1:00	0	S
-Rule	Zion	2003	only	-	Mar	28	1:00	1:00	D
-Rule	Zion	2003	only	-	Oct	 3	1:00	0	S
-Rule	Zion	2004	only	-	Apr	 7	1:00	1:00	D
-Rule	Zion	2004	only	-	Sep	22	1:00	0	S
-
-# The proposed law agreed upon by the Knesset Interior Committee on
-# 2005-02-14 is that, for 2005 and beyond, DST starts at 02:00 the
-# last Friday before April 2nd (i.e. the last Friday in March or April
-# 1st itself if it falls on a Friday) and ends at 02:00 on the Saturday
-# night _before_ the fast of Yom Kippur.
-#
-# Those who can read Hebrew can view the announcement at:
-#
-#	ftp://ftp.cs.huji.ac.il/pub/tz/announcements/2005+beyond.ps
-
-# From Paul Eggert (2005-02-22):
-# I used Ephraim Silverberg's dst-israel.el program
-# <ftp://ftp.cs.huji.ac.il/pub/tz/software/dst-israel.el> (2005-02-20)
-# along with Ed Reingold's cal-hebrew in GNU Emacs 21.4,
-# to generate the transitions in this list.
-# (I replaced "lastFri" with "Fri>=26" by hand.)
-# The spring transitions below all correspond to the following Rule:
-#
-# Rule	Zion	2005	max	-	Mar	Fri>=26	2:00	1:00	D
-#
-# but older zic implementations (e.g., Solaris 8) do not support
-# "Fri>=26" to mean April 1 in years like 2005, so for now we list the
-# springtime transitions explicitly.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Zion	2005	only	-	Apr	 1	2:00	1:00	D
-Rule	Zion	2005	only	-	Oct	 9	2:00	0	S
-Rule	Zion	2006	2010	-	Mar	Fri>=26	2:00	1:00	D
-Rule	Zion	2006	only	-	Oct	 1	2:00	0	S
-Rule	Zion	2007	only	-	Sep	16	2:00	0	S
-Rule	Zion	2008	only	-	Oct	 5	2:00	0	S
-Rule	Zion	2009	only	-	Sep	27	2:00	0	S
-Rule	Zion	2010	only	-	Sep	12	2:00	0	S
-Rule	Zion	2011	only	-	Apr	 1	2:00	1:00	D
-Rule	Zion	2011	only	-	Oct	 2	2:00	0	S
-Rule	Zion	2012	2015	-	Mar	Fri>=26	2:00	1:00	D
-Rule	Zion	2012	only	-	Sep	23	2:00	0	S
-Rule	Zion	2013	only	-	Sep	 8	2:00	0	S
-Rule	Zion	2014	only	-	Sep	28	2:00	0	S
-Rule	Zion	2015	only	-	Sep	20	2:00	0	S
-Rule	Zion	2016	only	-	Apr	 1	2:00	1:00	D
-Rule	Zion	2016	only	-	Oct	 9	2:00	0	S
-Rule	Zion	2017	2021	-	Mar	Fri>=26	2:00	1:00	D
-Rule	Zion	2017	only	-	Sep	24	2:00	0	S
-Rule	Zion	2018	only	-	Sep	16	2:00	0	S
-Rule	Zion	2019	only	-	Oct	 6	2:00	0	S
-Rule	Zion	2020	only	-	Sep	27	2:00	0	S
-Rule	Zion	2021	only	-	Sep	12	2:00	0	S
-Rule	Zion	2022	only	-	Apr	 1	2:00	1:00	D
-Rule	Zion	2022	only	-	Oct	 2	2:00	0	S
-Rule	Zion	2023	2032	-	Mar	Fri>=26	2:00	1:00	D
-Rule	Zion	2023	only	-	Sep	24	2:00	0	S
-Rule	Zion	2024	only	-	Oct	 6	2:00	0	S
-Rule	Zion	2025	only	-	Sep	28	2:00	0	S
-Rule	Zion	2026	only	-	Sep	20	2:00	0	S
-Rule	Zion	2027	only	-	Oct	10	2:00	0	S
-Rule	Zion	2028	only	-	Sep	24	2:00	0	S
-Rule	Zion	2029	only	-	Sep	16	2:00	0	S
-Rule	Zion	2030	only	-	Oct	 6	2:00	0	S
-Rule	Zion	2031	only	-	Sep	21	2:00	0	S
-Rule	Zion	2032	only	-	Sep	12	2:00	0	S
-Rule	Zion	2033	only	-	Apr	 1	2:00	1:00	D
-Rule	Zion	2033	only	-	Oct	 2	2:00	0	S
-Rule	Zion	2034	2037	-	Mar	Fri>=26	2:00	1:00	D
-Rule	Zion	2034	only	-	Sep	17	2:00	0	S
-Rule	Zion	2035	only	-	Oct	 7	2:00	0	S
-Rule	Zion	2036	only	-	Sep	28	2:00	0	S
-Rule	Zion	2037	only	-	Sep	13	2:00	0	S
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Jerusalem	2:20:56 -	LMT	1880
-			2:20:40	-	JMT	1918	# Jerusalem Mean Time?
-			2:00	Zion	I%sT
-
-
-
-###############################################################################
-
-# Japan
-
-# `9:00' and `JST' is from Guy Harris.
-
-# From Paul Eggert (1995-03-06):
-# Today's _Asahi Evening News_ (page 4) reports that Japan had
-# daylight saving between 1948 and 1951, but ``the system was discontinued
-# because the public believed it would lead to longer working hours.''
-
-# From Mayumi Negishi in the 2005-08-10 Japan Times
-# <http://www.japantimes.co.jp/cgi-bin/getarticle.pl5?nn20050810f2.htm>:
-# Occupation authorities imposed daylight-saving time on Japan on
-# [1948-05-01]....  But lack of prior debate and the execution of
-# daylight-saving time just three days after the bill was passed generated
-# deep hatred of the concept....  The Diet unceremoniously passed a bill to
-# dump the unpopular system in October 1951, less than a month after the San
-# Francisco Peace Treaty was signed.  (A government poll in 1951 showed 53%
-# of the Japanese wanted to scrap daylight-saving time, as opposed to 30% who
-# wanted to keep it.)
-
-# Shanks writes that daylight saving in Japan during those years was as follows:
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Japan	1948	only	-	May	Sun>=1	2:00	1:00	D
-Rule	Japan	1948	1951	-	Sep	Sat>=8	2:00	0	S
-Rule	Japan	1949	only	-	Apr	Sun>=1	2:00	1:00	D
-Rule	Japan	1950	1951	-	May	Sun>=1	2:00	1:00	D
-# but the only locations using it (for birth certificates, presumably, since
-# Shanks's audience is astrologers) were US military bases.  For now, assume
-# that for most purposes daylight-saving time was observed; otherwise, what
-# would have been the point of the 1951 poll?
-
-# From Hideyuki Suzuki (1998-11-09):
-# 'Tokyo' usually stands for the former location of Tokyo Astronomical
-# Observatory: E 139 44' 40".90 (9h 18m 58s.727), N 35 39' 16".0.
-# This data is from 'Rika Nenpyou (Chronological Scientific Tables) 1996'
-# edited by National Astronomical Observatory of Japan....
-# JST (Japan Standard Time) has been used since 1888-01-01 00:00 (JST).
-# The law is enacted on 1886-07-07.
-
-# From Hideyuki Suzuki (1998-11-16):
-# The ordinance No. 51 (1886) established "standard time" in Japan,
-# which stands for the time on E 135 degree.
-# In the ordinance No. 167 (1895), "standard time" was renamed to "central
-# standard time".  And the same ordinance also established "western standard
-# time", which stands for the time on E 120 degree....  But "western standard
-# time" was abolished in the ordinance No. 529 (1937).  In the ordinance No.
-# 167, there is no mention regarding for what place western standard time is
-# standard....
-#
-# I wrote "ordinance" above, but I don't know how to translate.
-# In Japanese it's "chokurei", which means ordinance from emperor.
-
-# Shanks claims JST in use since 1896, and that a few places (e.g. Ishigaki)
-# use +0800; go with Suzuki.  Guess that all ordinances took effect on Jan 1.
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Tokyo	9:18:59	-	LMT	1887 Dec 31 15:00u
-			9:00	-	JST	1896
-			9:00	-	CJT	1938
-			9:00	Japan	J%sT
-# Since 1938, all Japanese possessions have been like Asia/Tokyo.
-
-# Jordan
-#
-# From <a href="http://star.arabia.com/990701/JO9.html">
-# Jordan Week (1999-07-01) </a> via Steffen Thorsen (1999-09-09):
-# Clocks in Jordan were forwarded one hour on Wednesday at midnight,
-# in accordance with the government's decision to implement summer time
-# all year round.
-#
-# From <a href="http://star.arabia.com/990930/JO9.html">
-# Jordan Week (1999-09-30) </a> via Steffen Thorsen (1999-11-09):
-# Winter time starts today Thursday, 30 September. Clocks will be turned back
-# by one hour.  This is the latest government decision and it's final!
-# The decision was taken because of the increase in working hours in
-# government's departments from six to seven hours.
-#
-# From Paul Eggert (2005-11-22):
-# Starting 2003 transitions are from Steffen Thorsen's web site timeanddate.com.
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Jordan	1973	only	-	Jun	6	0:00	1:00	S
-Rule	Jordan	1973	1975	-	Oct	1	0:00	0	-
-Rule	Jordan	1974	1977	-	May	1	0:00	1:00	S
-Rule	Jordan	1976	only	-	Nov	1	0:00	0	-
-Rule	Jordan	1977	only	-	Oct	1	0:00	0	-
-Rule	Jordan	1978	only	-	Apr	30	0:00	1:00	S
-Rule	Jordan	1978	only	-	Sep	30	0:00	0	-
-Rule	Jordan	1985	only	-	Apr	1	0:00	1:00	S
-Rule	Jordan	1985	only	-	Oct	1	0:00	0	-
-Rule	Jordan	1986	1988	-	Apr	Fri>=1	0:00	1:00	S
-Rule	Jordan	1986	1990	-	Oct	Fri>=1	0:00	0	-
-Rule	Jordan	1989	only	-	May	8	0:00	1:00	S
-Rule	Jordan	1990	only	-	Apr	27	0:00	1:00	S
-Rule	Jordan	1991	only	-	Apr	17	0:00	1:00	S
-Rule	Jordan	1991	only	-	Sep	27	0:00	0	-
-Rule	Jordan	1992	only	-	Apr	10	0:00	1:00	S
-Rule	Jordan	1992	1993	-	Oct	Fri>=1	0:00	0	-
-Rule	Jordan	1993	1998	-	Apr	Fri>=1	0:00	1:00	S
-Rule	Jordan	1994	only	-	Sep	Fri>=15	0:00	0	-
-Rule	Jordan	1995	1998	-	Sep	Fri>=15	0:00s	0	-
-Rule	Jordan	1999	only	-	Jul	 1	0:00s	1:00	S
-Rule	Jordan	1999	2002	-	Sep	lastThu	0:00s	0	-
-Rule	Jordan	2000	max	-	Mar	lastThu	0:00s	1:00	S
-Rule	Jordan	2003	only	-	Oct	24	0:00s	0	-
-Rule	Jordan	2004	only	-	Oct	15	0:00s	0	-
-Rule	Jordan	2005	max	-	Sep	lastFri	0:00s	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Amman	2:23:44 -	LMT	1931
-			2:00	Jordan	EE%sT
-
-
-# Kazakhstan
-
-# From Paul Eggert (1996-11-22):
-# Andrew Evtichov (1996-04-13) writes that Kazakhstan
-# stayed in sync with Moscow after 1990, and that Aqtobe (formerly Aktyubinsk)
-# and Aqtau (formerly Shevchenko) are the largest cities in their zones.
-# Guess that Aqtau and Aqtobe diverged in 1995, since that's the first time
-# IATA SSIM mentions a third time zone in Kazakhstan.
-
-# From Paul Eggert (2001-10-18):
-# German Iofis, ELSI, Almaty (2001-10-09) reports that Kazakhstan uses
-# RussiaAsia rules, instead of switching at 00:00 as the IATA has it.
-# Go with Shanks, who has them always using RussiaAsia rules.
-# Also go with the following claims of Shanks:
-#
-# - Kazakhstan did not observe DST in 1991.
-# - Qyzylorda switched from +5:00 to +6:00 on 1992-01-19 02:00.
-# - Oral switched from +5:00 to +4:00 in spring 1989.
-
-# <a href="http://www.kazsociety.org.uk/news/2005/03/30.htm">
-# From Kazakhstan Embassy's News Bulletin #11 (2005-03-21):
-# </a>
-# The Government of Kazakhstan passed a resolution March 15 abolishing
-# daylight saving time citing lack of economic benefits and health
-# complications coupled with a decrease in productivity.
-#
-# From Branislav Kojic (in Astana) via Gwillim Law (2005-06-28):
-# ... what happened was that the former Kazakhstan Eastern time zone
-# was "blended" with the Central zone.  Therefore, Kazakhstan now has
-# two time zones, and difference between them is one hour.  The zone
-# closer to UTC is the former Western zone (probably still called the
-# same), encompassing four provinces in the west: Aqtobe, Atyrau,
-# Mangghystau, and West Kazakhstan.  The other zone encompasses
-# everything else....  I guess that would make Kazakhstan time zones
-# de jure UTC+5 and UTC+6 respectively.
-
-#
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-#
-# Almaty (formerly Alma-Ata), representing most locations in Kazakhstan
-Zone	Asia/Almaty	5:07:48 -	LMT	1924 May  2 # or Alma-Ata
-			5:00	-	ALMT	1930 Jun 21 # Alma-Ata Time
-			6:00 RussiaAsia ALM%sT	1991
-			6:00	-	ALMT	1992
-			6:00 RussiaAsia	ALM%sT	2005 Mar 15
-			6:00	-	ALMT
-# Qyzylorda (aka Kyzylorda, Kizilorda, Kzyl-Orda, etc.)
-Zone	Asia/Qyzylorda	4:21:52 -	LMT	1924 May  2
-			4:00	-	KIZT	1930 Jun 21 # Kizilorda Time
-			5:00	-	KIZT	1981 Apr  1
-			5:00	1:00	KIZST	1981 Oct  1
-			6:00	-	KIZT	1982 Apr  1
-			5:00 RussiaAsia	KIZ%sT	1991
-			5:00	-	KIZT	1991 Dec 16 # independence
-			5:00	-	QYZT	1992 Jan 19 2:00
-			6:00 RussiaAsia	QYZ%sT	2005 Mar 15
-			6:00	-	QYZT
-# Aqtobe (aka Aktobe, formerly Akt'ubinsk)
-Zone	Asia/Aqtobe	3:48:40	-	LMT	1924 May  2
-			4:00	-	AKTT	1930 Jun 21 # Aktyubinsk Time
-			5:00	-	AKTT	1981 Apr  1
-			5:00	1:00	AKTST	1981 Oct  1
-			6:00	-	AKTT	1982 Apr  1
-			5:00 RussiaAsia	AKT%sT	1991
-			5:00	-	AKTT	1991 Dec 16 # independence
-			5:00 RussiaAsia	AQT%sT	2005 Mar 15 # Aqtobe Time
-			5:00	-	AQTT
-# Mangghystau
-# Aqtau was not founded until 1963, but it represents an inhabited region,
-# so include time stamps before 1963.
-Zone	Asia/Aqtau	3:21:04	-	LMT	1924 May  2
-			4:00	-	FORT	1930 Jun 21 # Fort Shevchenko T
-			5:00	-	FORT	1963
-			5:00	-	SHET	1981 Oct  1 # Shevchenko Time
-			6:00	-	SHET	1982 Apr  1
-			5:00 RussiaAsia	SHE%sT	1991
-			5:00	-	SHET	1991 Dec 16 # independence
-			5:00 RussiaAsia	AQT%sT	1995 Mar lastSun 2:00 # Aqtau Time
-			4:00 RussiaAsia	AQT%sT	2005 Mar 15
-			5:00	-	AQTT
-# West Kazakhstan
-Zone	Asia/Oral	3:25:24	-	LMT	1924 May  2 # or Ural'sk
-			4:00	-	URAT	1930 Jun 21 # Ural'sk time
-			5:00	-	URAT	1981 Apr  1
-			5:00	1:00	URAST	1981 Oct  1
-			6:00	-	URAT	1982 Apr  1
-			5:00 RussiaAsia	URA%sT	1989 Mar 26 2:00
-			4:00 RussiaAsia	URA%sT	1991
-			4:00	-	URAT	1991 Dec 16 # independence
-			4:00 RussiaAsia	ORA%sT	2005 Mar 15 # Oral Time
-			5:00	-	ORAT
-
-# Kyrgyzstan (Kirgizstan)
-# Transitions through 1991 are from Shanks.
-
-# From Paul Eggert (2005-08-15):
-# According to an article dated today in the Kyrgyzstan Development Gateway
-# <http://eng.gateway.kg/cgi-bin/page.pl?id=1&story_name=doc9979.shtml>
-# Kyrgyzstan is canceling the daylight saving time system.  I take the article
-# to mean that they will leave their clocks at 6 hours ahead of UTC.
-# From Malik Abdugaliev (2005-09-21):
-# Our government cancels daylight saving time 6th of August 2005.
-# From 2005-08-12 our GMT-offset is +6, w/o any daylight saving.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Kyrgyz	1992	1996	-	Apr	Sun>=7	0:00s	1:00	S
-Rule	Kyrgyz	1992	1996	-	Sep	lastSun	0:00	0	-
-Rule	Kyrgyz	1997	2005	-	Mar	lastSun	2:30	1:00	S
-Rule	Kyrgyz	1997	2004	-	Oct	lastSun	2:30	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Bishkek	4:58:24 -	LMT	1924 May  2
-			5:00	-	FRUT	1930 Jun 21 # Frunze Time
-			6:00 RussiaAsia FRU%sT	1991 Mar 31 2:00s
-			5:00	1:00	FRUST	1991 Aug 31 2:00 # independence
-			5:00	Kyrgyz	KG%sT	2005 Aug 12    # Kyrgyzstan Time
-			6:00	-	KGT
-
-###############################################################################
-
-# Korea (North and South)
-
-# From Guy Harris:
-# According to someone at the Korean Times in San Francisco,
-# Daylight Savings Time was not observed until 1987.  He did not know
-# at what time of day DST starts or ends.
-
-# From Shanks:
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	ROK	1960	only	-	May	15	0:00	1:00	D
-Rule	ROK	1960	only	-	Sep	13	0:00	0	S
-Rule	ROK	1987	1988	-	May	Sun<=14	0:00	1:00	D
-Rule	ROK	1987	1988	-	Oct	Sun<=14	0:00	0	S
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Seoul	8:27:52	-	LMT	1890
-			8:30	-	KST	1904 Dec
-			9:00	-	KST	1928
-			8:30	-	KST	1932
-			9:00	-	KST	1954 Mar 21
-			8:00	ROK	K%sT	1961 Aug 10
-			8:30	-	KST	1968 Oct
-			9:00	ROK	K%sT
-Zone	Asia/Pyongyang	8:23:00 -	LMT	1890
-			8:30	-	KST	1904 Dec
-			9:00	-	KST	1928
-			8:30	-	KST	1932
-			9:00	-	KST	1954 Mar 21
-			8:00	-	KST	1961 Aug 10
-			9:00	-	KST
-
-###############################################################################
-
-# Kuwait
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Kuwait	3:11:56 -	LMT	1950
-			3:00	-	AST
-
-# Laos
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Vientiane	6:50:24 -	LMT	1906 Jun  9 # or Viangchan
-			7:06:20	-	SMT	1911 Mar 11 0:01 # Saigon MT?
-			7:00	-	ICT	1912 May
-			8:00	-	ICT	1931 May
-			7:00	-	ICT
-
-# Lebanon
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Lebanon	1920	only	-	Mar	28	0:00	1:00	S
-Rule	Lebanon	1920	only	-	Oct	25	0:00	0	-
-Rule	Lebanon	1921	only	-	Apr	3	0:00	1:00	S
-Rule	Lebanon	1921	only	-	Oct	3	0:00	0	-
-Rule	Lebanon	1922	only	-	Mar	26	0:00	1:00	S
-Rule	Lebanon	1922	only	-	Oct	8	0:00	0	-
-Rule	Lebanon	1923	only	-	Apr	22	0:00	1:00	S
-Rule	Lebanon	1923	only	-	Sep	16	0:00	0	-
-Rule	Lebanon	1957	1961	-	May	1	0:00	1:00	S
-Rule	Lebanon	1957	1961	-	Oct	1	0:00	0	-
-Rule	Lebanon	1972	only	-	Jun	22	0:00	1:00	S
-Rule	Lebanon	1972	1977	-	Oct	1	0:00	0	-
-Rule	Lebanon	1973	1977	-	May	1	0:00	1:00	S
-Rule	Lebanon	1978	only	-	Apr	30	0:00	1:00	S
-Rule	Lebanon	1978	only	-	Sep	30	0:00	0	-
-Rule	Lebanon	1984	1987	-	May	1	0:00	1:00	S
-Rule	Lebanon	1984	1991	-	Oct	16	0:00	0	-
-Rule	Lebanon	1988	only	-	Jun	1	0:00	1:00	S
-Rule	Lebanon	1989	only	-	May	10	0:00	1:00	S
-Rule	Lebanon	1990	1992	-	May	1	0:00	1:00	S
-Rule	Lebanon	1992	only	-	Oct	4	0:00	0	-
-Rule	Lebanon	1993	max	-	Mar	lastSun	0:00	1:00	S
-Rule	Lebanon	1993	1998	-	Sep	lastSun	0:00	0	-
-Rule	Lebanon	1999	max	-	Oct	lastSun	0:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Beirut	2:22:00 -	LMT	1880
-			2:00	Lebanon	EE%sT
-
-# Malaysia
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	NBorneo	1935	1941	-	Sep	14	0:00	0:20	TS # one-Third Summer
-Rule	NBorneo	1935	1941	-	Dec	14	0:00	0	-
-#
-# peninsular Malaysia
-# The data here are taken from Mok Ly Yng (2003-10-30)
-# <http://www.math.nus.edu.sg/aslaksen/teaching/timezone.html>.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Asia/Kuala_Lumpur	6:46:46 -	LMT	1901 Jan  1
-			6:55:25	-	SMT	1905 Jun  1 # Singapore M.T.
-			7:00	-	MALT	1933 Jan  1 # Malaya Time
-			7:00	0:20	MALST	1936 Jan  1
-			7:20	-	MALT	1941 Sep  1
-			7:30	-	MALT	1942 Feb 16
-			9:00	-	JST	1945 Sep 12
-			7:30	-	MALT	1982 Jan  1
-			8:00	-	MYT	# Malaysia Time
-# Sabah & Sarawak
-# From Paul Eggert (2003-11-01):
-# The data here are mostly from Shanks, but the 1942, 1945 and 1982
-# transition dates are from Mok Ly Yng.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Asia/Kuching	7:21:20	-	LMT	1926 Mar
-			7:30	-	BORT	1933	# Borneo Time
-			8:00	NBorneo	BOR%sT	1942 Feb 16
-			9:00	-	JST	1945 Sep 12
-			8:00	-	BORT	1982 Jan  1
-			8:00	-	MYT
-
-# Maldives
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Indian/Maldives	4:54:00 -	LMT	1880	# Male
-			4:54:00	-	MMT	1960	# Male Mean Time
-			5:00	-	MVT		# Maldives Time
-
-# Mongolia
-
-# Shanks says that Mongolia has three time zones, but usno1995 and the CIA map
-# Standard Time Zones of the World (1997-01)
-# both say that it has just one.
-
-# From Oscar van Vlijmen (1999-12-11):
-# <a href="http://www.mongoliatourism.gov.mn/general.htm">
-# General Information Mongolia
-# </a> (1999-09)
-# "Time: Mongolia has two time zones. Three westernmost provinces of
-# Bayan-Ulgii, Uvs, and Hovd are one hour earlier than the capital city, and
-# the rest of the country follows the Ulaanbaatar time, which is UTC/GMT plus
-# eight hours."
-
-# From Rives McDow (1999-12-13):
-# Mongolia discontinued the use of daylight savings time in 1999; 1998
-# being the last year it was implemented.  The dates of implementation I am
-# unsure of, but most probably it was similar to Russia, except for the time
-# of implementation may have been different....
-# Some maps in the past have indicated that there was an additional time
-# zone in the eastern part of Mongolia, including the provinces of Dornod,
-# Suhbaatar, and possibly Khentij.
-
-# From Paul Eggert (1999-12-15):
-# Naming and spelling is tricky in Mongolia.
-# We'll use Hovd (also spelled Chovd and Khovd) to represent the west zone;
-# the capital of the Hovd province is sometimes called Hovd, sometimes Dund-Us,
-# and sometimes Jirgalanta (with variant spellings), but the name Hovd
-# is good enough for our purposes.
-
-# From Rives McDow (2001-05-13):
-# In addition to Mongolia starting daylight savings as reported earlier
-# (adopted DST on 2001-04-27 02:00 local time, ending 2001-09-28),
-# there are three time zones.
-#
-# Provinces [at 7:00]: Bayan-ulgii, Uvs, Khovd, Zavkhan, Govi-Altai
-# Provinces [at 8:00]: Khovsgol, Bulgan, Arkhangai, Khentii, Tov,
-#	Bayankhongor, Ovorkhangai, Dundgovi, Dornogovi, Omnogovi
-# Provinces [at 9:00]: Dornod, Sukhbaatar
-#
-# [The province of Selenge is omitted from the above lists.]
-
-# From Ganbold Ts., Ulaanbaatar (2004-04-17):
-# Daylight saving occurs at 02:00 local time last Saturday of March.
-# It will change back to normal at 02:00 local time last Saturday of
-# September.... As I remember this rule was changed in 2001.
-#
-# From Paul Eggert (2004-04-17):
-# For now, assume Rives McDow's informant got confused about Friday vs
-# Saturday, and that his 2001 dates should have 1 added to them.
-
-# From Paul Eggert (2005-07-26):
-# We have wildly conflicting information about Mongolia's time zones.
-# Bill Bonnet (2005-05-19) reports that the US Embassy in Ulaanbaatar says
-# there is only one time zone and that DST is observed, citing Microsoft
-# Windows XP as the source.  Risto Nykanen (2005-05-16) reports that
-# travelmongolia.org says there are two time zones (UTC+7, UTC+8) with no DST.
-# Oscar van Vlijmen (2005-05-20) reports that the Mongolian Embassy in
-# Washington, DC says there are two time zones, with DST observed.
-# He also found
-# <http://ubpost.mongolnews.mn/index.php?subaction=showcomments&id=1111634894&archive=&start_from=&ucat=1&>
-# which also says that there is DST, and which has a comment by "Toddius"
-# (2005-03-31 06:05 +0700) saying "Mongolia actually has 3.5 time zones.
-# The West (OLGII) is +7 GMT, most of the country is ULAT is +8 GMT
-# and some Eastern provinces are +9 GMT but Sukhbaatar Aimag is SUHK +8.5 GMT.
-# The SUKH timezone is new this year, it is one of the few things the
-# parliament passed during the tumultuous winter session."
-# For now, let's ignore this information, until we have more confirmation.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Mongol	1983	1984	-	Apr	1	0:00	1:00	S
-Rule	Mongol	1983	only	-	Oct	1	0:00	0	-
-# IATA SSIM says 1990s switches occurred at 00:00, but Shanks (1995) lists
-# them at 02:00s, and McDow says the 2001 switches also occurred at 02:00.
-# Also, IATA SSIM (1996-09) says 1996-10-25.  Go with Shanks through 1998.
-Rule	Mongol	1985	1998	-	Mar	lastSun	2:00s	1:00	S
-Rule	Mongol	1984	1998	-	Sep	lastSun	2:00s	0	-
-# IATA SSIM (1999-09) says Mongolia no longer observes DST.
-Rule	Mongol	2001	only	-	Apr	lastSat	2:00	1:00	S
-Rule	Mongol	2001	max	-	Sep	lastSat	2:00	0	-
-Rule	Mongol	2002	max	-	Mar	lastSat	2:00	1:00	S
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-# Hovd, a.k.a. Chovd, Dund-Us, Dzhargalant, Khovd, Jirgalanta
-Zone	Asia/Hovd	6:06:36 -	LMT	1905 Aug
-			6:00	-	HOVT	1978	# Hovd Time
-			7:00	Mongol	HOV%sT
-# Ulaanbaatar, a.k.a. Ulan Bataar, Ulan Bator, Urga
-Zone	Asia/Ulaanbaatar 7:07:32 -	LMT	1905 Aug
-			7:00	-	ULAT	1978	# Ulaanbaatar Time
-			8:00	Mongol	ULA%sT
-# Choibalsan, a.k.a. Bajan Tuemen, Bajan Tumen, Chojbalsan,
-# Choybalsan, Sanbejse, Tchoibalsan
-Zone	Asia/Choibalsan	7:38:00 -	LMT	1905 Aug
-			7:00	-	ULAT	1978
-			8:00	-	ULAT	1983 Apr
-			9:00	Mongol	CHO%sT	# Choibalsan Time
-
-# Nepal
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Katmandu	5:41:16 -	LMT	1920
-			5:30	-	IST	1986
-			5:45	-	NPT	# Nepal Time
-
-# Oman
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Muscat	3:54:20 -	LMT	1920
-			4:00	-	GST
-
-# Pakistan
-
-# From Rives McDow (2002-03-13):
-# I have been advised that Pakistan has decided to adopt dst on a
-# TRIAL basis for one year, starting 00:01 local time on April 7, 2002
-# and ending at 00:01 local time October 6, 2002.  This is what I was
-# told, but I believe that the actual time of change may be 00:00; the
-# 00:01 was to make it clear which day it was on.
-
-# From Paul Eggert (2002-03-15):
-# Jesper Norgaard found this URL:
-# http://www.pak.gov.pk/public/news/app/app06_dec.htm
-# (dated 2001-12-06) which says that the Cabinet adopted a scheme "to
-# advance the clocks by one hour on the night between the first
-# Saturday and Sunday of April and revert to the original position on
-# 15th October each year".  This agrees with McDow's 04-07 at 00:00,
-# but disagrees about the October transition, and makes it sound like
-# it's not on a trial basis.  Also, the "between the first Saturday
-# and Sunday of April" phrase, if taken literally, means that the
-# transition takes place at 00:00 on the first Sunday on or after 04-02.
-
-# From Paul Eggert (2003-02-09):
-# DAWN <http://www.dawn.com/2002/10/06/top13.htm> reported on 2002-10-05
-# that 2002 DST ended that day at midnight.  Go with McDow for now.
-
-# From Steffen Thorsen (2003-03-14):
-# According to http://www.dawn.com/2003/03/07/top15.htm
-# there will be no DST in Pakistan this year:
-#
-# ISLAMABAD, March 6: Information and Media Development Minister Sheikh
-# Rashid Ahmed on Thursday said the cabinet had reversed a previous
-# decision to advance clocks by one hour in summer and put them back by
-# one hour in winter with the aim of saving light hours and energy.
-#
-# The minister told a news conference that the experiment had rather
-# shown 8 per cent higher consumption of electricity.
-
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule Pakistan	2002	only	-	Apr	Sun>=2	0:01	1:00	S
-Rule Pakistan	2002	only	-	Oct	Sun>=2	0:01	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Karachi	4:28:12 -	LMT	1907
-			5:30	-	IST	1942 Sep
-			5:30	1:00	IST	1945 Oct 15
-			5:30	-	IST	1951 Sep 30
-			5:00	-	KART	1971 Mar 26 # Karachi Time
-			5:00 Pakistan	PK%sT	# Pakistan Time
-
-# Palestine
-
-# From Amos Shapir (1998-02-15):
-#
-# From 1917 until 1948-05-15, all of Palestine, including the parts now
-# known as the Gaza Strip and the West Bank, was under British rule.
-# Therefore the rules given for Israel for that period, apply there too...
-#
-# The Gaza Strip was under Egyptian rule between 1948-05-15 until 1967-06-05
-# (except a short occupation by Israel from 1956-11 till 1957-03, but no
-# time zone was affected then).  It was never formally annexed to Egypt,
-# though.
-#
-# The rest of Palestine was under Jordanian rule at that time, formally
-# annexed in 1950 as the West Bank (and the word "Trans" was dropped from
-# the country's previous name of "the Hashemite Kingdom of the
-# Trans-Jordan").  So the rules for Jordan for that time apply.  Major
-# towns in that area are Nablus (Shchem), El-Halil (Hebron), Ramallah, and
-# East Jerusalem.
-#
-# Both areas were occupied by Israel in June 1967, but not annexed (except
-# for East Jerusalem).  They were on Israel time since then; there might
-# have been a Military Governor's order about time zones, but I'm not aware
-# of any (such orders may have been issued semi-annually whenever summer
-# time was in effect, but maybe the legal aspect of time was just neglected).
-#
-# The Palestinian Authority was established in 1993, and got hold of most
-# towns in the West Bank and Gaza by 1995.  I know that in order to
-# demonstrate...independence, they have been switching to
-# summer time and back on a different schedule than Israel's, but I don't
-# know when this was started, or what algorithm is used (most likely the
-# Jordanian one).
-#
-# To summarize, the table should probably look something like that:
-#
-# Area \ when | 1918-1947 | 1948-1967 | 1967-1995 | 1996-
-# ------------+-----------+-----------+-----------+-----------
-# Israel      | Zion      | Zion      | Zion      | Zion
-# West bank   | Zion      | Jordan    | Zion      | Jordan
-# Gaza        | Zion      | Egypt     | Zion      | Jordan
-#
-# I guess more info may be available from the PA's web page (if/when they
-# have one).
-
-# From Paul Eggert (1998-02-25):
-# Shanks writes that Gaza did not observe DST until 1957, but we'll go
-# with Shapir and assume that it observed DST from 1940 through 1947,
-# and that it used Jordanian rules starting in 1996.
-# We don't yet need a separate entry for the West Bank, since
-# the only differences between it and Gaza that we know about
-# occurred before our cutoff date of 1970.
-# However, as we get more information, we may need to add entries
-# for parts of the West Bank as they transitioned from Israel's rules
-# to Palestine's rules.  If you have more info about this, please
-# send it to tz@elsie.nci.nih.gov for incorporation into future editions.
-
-# From IINS News Service - Israel - 1998-03-23 10:38:07 Israel time,
-# forwarded by Ephraim Silverberg:
-#
-# Despite the fact that Israel changed over to daylight savings time
-# last week, the PLO Authority (PA) has decided not to turn its clocks
-# one-hour forward at this time.  As a sign of independence from Israeli rule,
-# the PA has decided to implement DST in April.
-
-# From Paul Eggert (1999-09-20):
-# Daoud Kuttab writes in
-# <a href="http://www.jpost.com/com/Archive/22.Apr.1999/Opinion/Article-2.html">
-# Holiday havoc
-# </a> (Jerusalem Post, 1999-04-22) that
-# the Palestinian National Authority changed to DST on 1999-04-15.
-# I vaguely recall that they switch back in October (sorry, forgot the source).
-# For now, let's assume that the spring switch was at 24:00,
-# and that they switch at 0:00 on the 3rd Fridays of April and October.
-
-# From Paul Eggert (2005-11-22):
-# Starting 2004 transitions are from Steffen Thorsen's web site timeanddate.com.
-
-# The rules for Egypt are stolen from the `africa' file.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule EgyptAsia	1957	only	-	May	10	0:00	1:00	S
-Rule EgyptAsia	1957	1958	-	Oct	 1	0:00	0	-
-Rule EgyptAsia	1958	only	-	May	 1	0:00	1:00	S
-Rule EgyptAsia	1959	1967	-	May	 1	1:00	1:00	S
-Rule EgyptAsia	1959	1965	-	Sep	30	3:00	0	-
-Rule EgyptAsia	1966	only	-	Oct	 1	3:00	0	-
-
-Rule Palestine	1999	max	-	Apr	Fri>=15	0:00	1:00	S
-Rule Palestine	1999	2003	-	Oct	Fri>=15	0:00	0	-
-Rule Palestine	2004	only	-	Oct	 1	1:00	0	-
-Rule Palestine	2005	max	-	Oct	 4	1:00	0	-
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Gaza	2:17:52	-	LMT	1900 Oct
-			2:00	Zion	EET	1948 May 15
-			2:00 EgyptAsia	EE%sT	1967 Jun  5
-			2:00	Zion	I%sT	1996
-			2:00	Jordan	EE%sT	1999
-			2:00 Palestine	EE%sT
-
-# Paracel Is
-# no information
-
-# Philippines
-# On 1844-08-16, Narciso Claveria, governor-general of the
-# Philippines, issued a proclamation announcing that 1844-12-30 was to
-# be immediately followed by 1845-01-01.  Robert H. van Gent has a
-# transcript of the decree in <http://www.phys.uu.nl/~vgent/idl/idl.htm>.
-# The rest of this data is from Shanks.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Phil	1936	only	-	Nov	1	0:00	1:00	S
-Rule	Phil	1937	only	-	Feb	1	0:00	0	-
-Rule	Phil	1954	only	-	Apr	12	0:00	1:00	S
-Rule	Phil	1954	only	-	Jul	1	0:00	0	-
-Rule	Phil	1978	only	-	Mar	22	0:00	1:00	S
-Rule	Phil	1978	only	-	Sep	21	0:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Manila	-15:56:00 -	LMT	1844 Dec 31
-			8:04:00 -	LMT	1899 May 11
-			8:00	Phil	PH%sT	1942 May
-			9:00	-	JST	1944 Nov
-			8:00	Phil	PH%sT
-
-# Qatar
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Qatar	3:26:08 -	LMT	1920	# Al Dawhah / Doha
-			4:00	-	GST	1972 Jun
-			3:00	-	AST
-
-# Saudi Arabia
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Riyadh	3:06:52 -	LMT	1950
-			3:00	-	AST
-
-# Singapore
-# The data here are taken from Mok Ly Yng (2003-10-30)
-# <http://www.math.nus.edu.sg/aslaksen/teaching/timezone.html>.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Singapore	6:55:25 -	LMT	1901 Jan  1
-			6:55:25	-	SMT	1905 Jun  1 # Singapore M.T.
-			7:00	-	MALT	1933 Jan  1 # Malaya Time
-			7:00	0:20	MALST	1936 Jan  1
-			7:20	-	MALT	1941 Sep  1
-			7:30	-	MALT	1942 Feb 16
-			9:00	-	JST	1945 Sep 12
-			7:30	-	MALT	1965 Aug  9 # independence
-			7:30	-	SGT	1982 Jan  1 # Singapore Time
-			8:00	-	SGT
-
-# Spratly Is
-# no information
-
-# Sri Lanka
-# From Paul Eggert (1996-09-03):
-# "Sri Lanka advances clock by an hour to avoid blackout"
-# (www.virtual-pc.com/lankaweb/news/items/240596-2.html, 1996-05-24,
-# no longer available as of 1999-08-17)
-# reported ``the country's standard time will be put forward by one hour at
-# midnight Friday (1830 GMT) `in the light of the present power crisis'.''
-#
-# From Dharmasiri Senanayake, Sri Lanka Media Minister (1996-10-24), as quoted
-# by Shamindra in
-# <a href="news:54rka5$m5h@mtinsc01-mgt.ops.worldnet.att.net">
-# Daily News - Hot News Section (1996-10-26)
-# </a>:
-# With effect from 12.30 a.m. on 26th October 1996
-# Sri Lanka will be six (06) hours ahead of GMT.
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Colombo	5:19:24 -	LMT	1880
-			5:19:32	-	MMT	1906	# Moratuwa Mean Time
-			5:30	-	IST	1942 Jan  5
-			5:30	0:30	IHST	1942 Sep
-			5:30	1:00	IST	1945 Oct 16 2:00
-			5:30	-	IST	1996 May 25 0:00
-			6:30	-	LKT	1996 Oct 26 0:30
-			6:00	-	LKT
-
-# Syria
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Syria	1920	1923	-	Apr	Sun>=15	2:00	1:00	S
-Rule	Syria	1920	1923	-	Oct	Sun>=1	2:00	0	-
-Rule	Syria	1962	only	-	Apr	29	2:00	1:00	S
-Rule	Syria	1962	only	-	Oct	1	2:00	0	-
-Rule	Syria	1963	1965	-	May	1	2:00	1:00	S
-Rule	Syria	1963	only	-	Sep	30	2:00	0	-
-Rule	Syria	1964	only	-	Oct	1	2:00	0	-
-Rule	Syria	1965	only	-	Sep	30	2:00	0	-
-Rule	Syria	1966	only	-	Apr	24	2:00	1:00	S
-Rule	Syria	1966	1976	-	Oct	1	2:00	0	-
-Rule	Syria	1967	1978	-	May	1	2:00	1:00	S
-Rule	Syria	1977	1978	-	Sep	1	2:00	0	-
-Rule	Syria	1983	1984	-	Apr	9	2:00	1:00	S
-Rule	Syria	1983	1984	-	Oct	1	2:00	0	-
-Rule	Syria	1986	only	-	Feb	16	2:00	1:00	S
-Rule	Syria	1986	only	-	Oct	9	2:00	0	-
-Rule	Syria	1987	only	-	Mar	1	2:00	1:00	S
-Rule	Syria	1987	1988	-	Oct	31	2:00	0	-
-Rule	Syria	1988	only	-	Mar	15	2:00	1:00	S
-Rule	Syria	1989	only	-	Mar	31	2:00	1:00	S
-Rule	Syria	1989	only	-	Oct	1	2:00	0	-
-Rule	Syria	1990	only	-	Apr	1	2:00	1:00	S
-Rule	Syria	1990	only	-	Sep	30	2:00	0	-
-Rule	Syria	1991	only	-	Apr	 1	0:00	1:00	S
-Rule	Syria	1991	1992	-	Oct	 1	0:00	0	-
-Rule	Syria	1992	only	-	Apr	 8	0:00	1:00	S
-Rule	Syria	1993	only	-	Mar	26	0:00	1:00	S
-Rule	Syria	1993	only	-	Sep	25	0:00	0	-
-# IATA SSIM (1998-02) says 1998-04-02;
-# (1998-09) says 1999-03-29 and 1999-09-29; (1999-02) says 1999-04-02,
-# 2000-04-02, and 2001-04-02; (1999-09) says 2000-03-31 and 2001-03-31;
-# ignore all these claims and go with Shanks.
-Rule	Syria	1994	1996	-	Apr	 1	0:00	1:00	S
-Rule	Syria	1994	max	-	Oct	 1	0:00	0	-
-Rule	Syria	1997	1998	-	Mar	lastMon	0:00	1:00	S
-Rule	Syria	1999	max	-	Apr	 1	0:00	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Damascus	2:25:12 -	LMT	1920	# Dimashq
-			2:00	Syria	EE%sT
-
-# Tajikistan
-# From Shanks.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Dushanbe	4:35:12 -	LMT	1924 May  2
-			5:00	-	DUST	1930 Jun 21 # Dushanbe Time
-			6:00 RussiaAsia DUS%sT	1991 Mar 31 2:00s
-			5:00	1:00	DUSST	1991 Sep  9 2:00s
-			5:00	-	TJT		    # Tajikistan Time
-
-# Thailand
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Bangkok	6:42:04	-	LMT	1880
-			6:42:04	-	BMT	1920 Apr # Bangkok Mean Time
-			7:00	-	ICT
-
-# Turkmenistan
-# From Shanks.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Ashgabat	3:53:32 -	LMT	1924 May  2 # or Ashkhabad
-			4:00	-	ASHT	1930 Jun 21 # Ashkhabad Time
-			5:00 RussiaAsia	ASH%sT	1991 Mar 31 2:00
-			4:00 RussiaAsia	ASH%sT	1991 Oct 27 # independence
-			4:00 RussiaAsia TM%sT	1992 Jan 19 2:00
-			5:00	-	TMT
-
-# United Arab Emirates
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Dubai	3:41:12 -	LMT	1920
-			4:00	-	GST
-
-# Uzbekistan
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Samarkand	4:27:12 -	LMT	1924 May  2
-			4:00	-	SAMT	1930 Jun 21 # Samarkand Time
-			5:00	-	SAMT	1981 Apr  1
-			5:00	1:00	SAMST	1981 Oct  1
-			6:00 RussiaAsia TAS%sT	1991 Mar 31 2:00 # Tashkent Time
-			5:00 RussiaAsia	TAS%sT	1991 Sep  1 # independence
-			5:00 RussiaAsia	UZ%sT	1992
-			5:00 RussiaAsia	UZ%sT	1993
-			5:00	-	UZT
-Zone	Asia/Tashkent	4:37:12 -	LMT	1924 May  2
-			5:00	-	TAST	1930 Jun 21 # Tashkent Time
-			6:00 RussiaAsia TAS%sT	1991 Mar 31 2:00s
-			5:00 RussiaAsia	TAS%sT	1991 Sep  1 # independence
-			5:00 RussiaAsia	UZ%sT	1992
-			5:00 RussiaAsia	UZ%sT	1993
-			5:00	-	UZT
-
-# Vietnam
-# From Paul Eggert (1993-11-18):
-# Saigon's official name is Thanh-Pho Ho Chi Minh, but it's too long.
-# We'll stick with the traditional name for now.
-# From Shanks:
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Saigon	7:06:40 -	LMT	1906 Jun  9
-			7:06:20	-	SMT	1911 Mar 11 0:01 # Saigon MT?
-			7:00	-	ICT	1912 May
-			8:00	-	ICT	1931 May
-			7:00	-	ICT
-
-# Yemen
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Aden	3:00:48	-	LMT	1950
-			3:00	-	AST
+# @(#)asia	7.90
+# <pre>
+
+# This data is by no means authoritative; if you think you know better,
+# go ahead and edit the file (and please send any changes to
+# tz@elsie.nci.nih.gov for general use in the future).
+
+# From Paul Eggert (1999-03-22):
+#
+# A good source for time zone historical data outside the U.S. is
+# Thomas G. Shanks, The International Atlas (5th edition),
+# San Diego: ACS Publications, Inc. (1999).
+#
+# Gwillim Law writes that a good source
+# for recent time zone data is the International Air Transport
+# Association's Standard Schedules Information Manual (IATA SSIM),
+# published semiannually.  Law sent in several helpful summaries
+# of the IATA's data after 1990.
+#
+# Except where otherwise noted, Shanks is the source for entries through 1990,
+# and IATA SSIM is the source for entries after 1990.
+#
+# Another source occasionally used is Edward W. Whitman, World Time Differences,
+# Whitman Publishing Co, 2 Niagara Av, Ealing, London (undated), which
+# I found in the UCLA library.
+#
+# A reliable and entertaining source about time zones is
+# Derek Howse, Greenwich time and longitude, Philip Wilson Publishers (1997).
+#
+# I invented the abbreviations marked `*' in the following table;
+# the rest are from earlier versions of this file, or from other sources.
+# Corrections are welcome!
+#	     std  dst
+#	     LMT	Local Mean Time
+#	2:00 EET  EEST	Eastern European Time
+#	2:00 IST  IDT	Israel
+#	3:00 AST  ADT	Arabia*
+#	3:30 IRST IRDT	Iran
+#	4:00 GST	Gulf*
+#	5:30 IST	India
+#	7:00 ICT	Indochina*
+#	7:00 WIT	west Indonesia
+#	8:00 CIT	central Indonesia
+#	8:00 CST	China
+#	9:00 CJT	Central Japanese Time (1896/1937)*
+#	9:00 EIT	east Indonesia
+#	9:00 JST  JDT	Japan
+#	9:00 KST  KDT	Korea
+#	9:30 CST	(Australian) Central Standard Time
+#
+# See the `europe' file for Russia and Turkey in Asia.
+
+# From Guy Harris:
+# Incorporates data for Singapore from Robert Elz' asia 1.1, as well as
+# additional information from Tom Yap, Sun Microsystems Intercontinental
+# Technical Support (including a page from the Official Airline Guide -
+# Worldwide Edition).  The names for time zones are guesses.
+
+###############################################################################
+
+# These rules are stolen from the `europe' file.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	EUAsia	1981	max	-	Mar	lastSun	 1:00u	1:00	S
+Rule	EUAsia	1996	max	-	Oct	lastSun	 1:00u	0	-
+Rule E-EurAsia	1981	max	-	Mar	lastSun	 0:00	1:00	S
+Rule E-EurAsia	1979	1995	-	Sep	lastSun	 0:00	0	-
+Rule E-EurAsia	1996	max	-	Oct	lastSun	 0:00	0	-
+Rule RussiaAsia	1981	1984	-	Apr	1	 0:00	1:00	S
+Rule RussiaAsia	1981	1983	-	Oct	1	 0:00	0	-
+Rule RussiaAsia	1984	1991	-	Sep	lastSun	 2:00s	0	-
+Rule RussiaAsia	1985	1991	-	Mar	lastSun	 2:00s	1:00	S
+Rule RussiaAsia	1992	only	-	Mar	lastSat	23:00	1:00	S
+Rule RussiaAsia	1992	only	-	Sep	lastSat	23:00	0	-
+Rule RussiaAsia	1993	max	-	Mar	lastSun	 2:00s	1:00	S
+Rule RussiaAsia	1993	1995	-	Sep	lastSun	 2:00s	0	-
+Rule RussiaAsia	1996	max	-	Oct	lastSun	 2:00s	0	-
+
+# Afghanistan
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Kabul	4:36:48 -	LMT	1890
+			4:00	-	AFT	1945
+			4:30	-	AFT
+
+# Armenia
+# From Paul Eggert (1999-10-29):
+# Shanks has Yerevan switching to 3:00 (with Russian DST) in spring 1991,
+# then to 4:00 with no DST in fall 1995, then readopting Russian DST in 1997.
+# Go with Shanks, even when he disagrees with others.  Edgar Der-Danieliantz
+# reported (1996-05-04) that Yerevan probably wouldn't use DST
+# in 1996, though it did use DST in 1995.  IATA SSIM (1991/1998) reports that
+# Armenia switched from 3:00 to 4:00 in 1998 and observed DST after 1991,
+# but started switching at 3:00s in 1998.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Yerevan	2:58:00 -	LMT	1924 May  2
+			3:00	-	YERT	1957 Mar    # Yerevan Time
+			4:00 RussiaAsia YER%sT	1991 Mar 31 2:00s
+			3:00	1:00	YERST	1991 Sep 23 # independence
+			3:00 RussiaAsia	AM%sT	1995 Sep 24 2:00s
+			4:00	-	AMT	1997
+			4:00 RussiaAsia	AM%sT
+
+# Azerbaijan
+# From Rustam Aliyev of the Azerbaijan Internet Forum (2005-10-23):
+# According to the resolution of Cabinet of Ministers, 1997
+# Resolution available at: http://aif.az/docs/daylight_res.pdf
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Azer	1997	max	-	Mar	lastSun	 4:00	1:00	S
+Rule	Azer	1997	max	-	Oct	lastSun	 5:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Baku	3:19:24 -	LMT	1924 May  2
+			3:00	-	BAKT	1957 Mar    # Baku Time
+			4:00 RussiaAsia BAK%sT	1991 Mar 31 2:00s
+			3:00	1:00	BAKST	1991 Aug 30 # independence
+			3:00 RussiaAsia	AZ%sT	1992 Sep lastSat 23:00
+			4:00	-	AZT	1996 # Azerbaijan time
+			4:00	EUAsia	AZ%sT	1997
+			4:00	Azer	AZ%sT
+
+# Bahrain
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Bahrain	3:22:20 -	LMT	1920		# Al Manamah
+			4:00	-	GST	1972 Jun
+			3:00	-	AST
+
+# Bangladesh
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Dhaka	6:01:40 -	LMT	1890
+			5:53:20	-	HMT	1941 Oct    # Howrah Mean Time?
+			6:30	-	BURT	1942 May 15 # Burma Time
+			5:30	-	IST	1942 Sep
+			6:30	-	BURT	1951 Sep 30
+			6:00	-	DACT	1971 Mar 26 # Dacca Time
+			6:00	-	BDT	# Bangladesh Time
+
+# Bhutan
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Thimphu	5:58:36 -	LMT	1947 Aug 15 # or Thimbu
+			5:30	-	IST	1987 Oct
+			6:00	-	BTT	# Bhutan Time
+
+# British Indian Ocean Territory
+# Whitman and the 1995 CIA time zone map say 5:00, but the
+# 1997 and later maps say 6:00.  Assume the switch occurred in 1996.
+# We have no information as to when standard time was introduced;
+# assume it occurred in 1907, the same year as Mauritius (which
+# then contained the Chagos Archipelago).
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Indian/Chagos	4:49:40	-	LMT	1907
+			5:00	-	IOT	1996 # BIOT Time
+			6:00	-	IOT
+
+# Brunei
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Brunei	7:39:40 -	LMT	1926 Mar   # Bandar Seri Begawan
+			7:30	-	BNT	1933
+			8:00	-	BNT
+
+# Burma / Myanmar
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Rangoon	6:24:40 -	LMT	1880		# or Yangon
+			6:24:36	-	RMT	1920	   # Rangoon Mean Time?
+			6:30	-	BURT	1942 May   # Burma Time
+			9:00	-	JST	1945 May 3
+			6:30	-	MMT		   # Myanmar Time
+
+# Cambodia
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Phnom_Penh	6:59:40 -	LMT	1906 Jun  9
+			7:06:20	-	SMT	1911 Mar 11 0:01 # Saigon MT?
+			7:00	-	ICT	1912 May
+			8:00	-	ICT	1931 May
+			7:00	-	ICT
+
+# China
+
+# From Guy Harris:
+# People's Republic of China.  Yes, they really have only one time zone.
+
+# From Bob Devine (1988-01-28):
+# No they don't.  See TIME mag, 1986-02-17 p.52.  Even though
+# China is across 4 physical time zones, before Feb 1, 1986 only the
+# Peking (Bejing) time zone was recognized.  Since that date, China
+# has two of 'em -- Peking's and Urumqi (named after the capital of
+# the Xinjiang Uyghur Autonomous Region).  I don't know about DST for it.
+#
+# . . .I just deleted the DST table and this editor makes it too
+# painful to suck in another copy..  So, here is what I have for
+# DST start/end dates for Peking's time zone (info from AP):
+#
+#     1986 May 4 - Sept 14
+#     1987 mid-April - ??
+
+# From U. S. Naval Observatory (1989-01-19):
+# CHINA               8 H  AHEAD OF UTC  ALL OF CHINA, INCL TAIWAN
+# CHINA               9 H  AHEAD OF UTC  APR 17 - SEP 10
+
+# From Paul Eggert (1995-12-19):
+# Shanks writes that China has had a single time zone since 1980 May 1,
+# observing summer DST from 1986 through 1991; this contradicts Devine's
+# note about Time magazine, though apparently _something_ happened in 1986.
+# Go with Shanks for now.  I made up names for the other pre-1980 time zones.
+
+# From Shanks:
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Shang	1940	only	-	Jun	 3	0:00	1:00	D
+Rule	Shang	1940	1941	-	Oct	 1	0:00	0	S
+Rule	Shang	1941	only	-	Mar	16	0:00	1:00	D
+Rule	PRC	1986	only	-	May	 4	0:00	1:00	D
+Rule	PRC	1986	1991	-	Sep	Sun>=11	0:00	0	S
+Rule	PRC	1987	1991	-	Apr	Sun>=10	0:00	1:00	D
+#
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+#
+# From Anthony Fok (2001-12-20):
+# BTW, I did some research on-line and found some info regarding these five
+# historic timezones from some Taiwan websites.  And yes, there are official
+# Chinese names for these locales (before 1949):
+# Changbai Time ("Long-white Time", Long-white = Heilongjiang area)
+Zone	Asia/Harbin	8:26:44	-	LMT	1928 # or Haerbin
+			8:30	-	CHAT	1932 Mar # Changbai Time
+			8:00	-	CST	1940
+			9:00	-	CHAT	1966 May
+			8:30	-	CHAT	1980 May
+			8:00	PRC	C%sT
+# Zhongyuan Time ("Central plain Time")
+Zone	Asia/Shanghai	8:05:52	-	LMT	1928
+			8:00	Shang	C%sT	1949
+			8:00	PRC	C%sT
+# Long-shu Time (probably due to Long and Shu being two names of that area)
+Zone	Asia/Chongqing	7:06:20	-	LMT	1928 # or Chungking
+			7:00	-	LONT	1980 May # Long-shu Time
+			8:00	PRC	C%sT
+# Xin-zang Time ("Xinjiang-Tibet Time")
+Zone	Asia/Urumqi	5:50:20	-	LMT	1928 # or Urumchi
+			6:00	-	URUT	1980 May # Urumqi Time
+			8:00	PRC	C%sT
+# Kunlun Time
+Zone	Asia/Kashgar	5:03:56	-	LMT	1928 # or Kashi or Kaxgar
+			5:30	-	KAST	1940	 # Kashgar Time
+			5:00	-	KAST	1980 May
+			8:00	PRC	C%sT
+
+# Hong Kong (Xianggang)
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	HK	1946	only	-	Apr	20	3:30	1:00	S
+Rule	HK	1946	only	-	Dec	1	3:30	0	-
+Rule	HK	1947	only	-	Apr	13	3:30	1:00	S
+Rule	HK	1947	only	-	Dec	30	3:30	0	-
+Rule	HK	1948	only	-	May	2	3:30	1:00	S
+Rule	HK	1948	1952	-	Oct	lastSun	3:30	0	-
+Rule	HK	1949	1953	-	Apr	Sun>=1	3:30	1:00	S
+Rule	HK	1953	only	-	Nov	1	3:30	0	-
+Rule	HK	1954	1964	-	Mar	Sun>=18	3:30	1:00	S
+Rule	HK	1954	only	-	Oct	31	3:30	0	-
+Rule	HK	1955	1964	-	Nov	Sun>=1	3:30	0	-
+Rule	HK	1965	1977	-	Apr	Sun>=16	3:30	1:00	S
+Rule	HK	1965	1977	-	Oct	Sun>=16	3:30	0	-
+Rule	HK	1979	1980	-	May	Sun>=8	3:30	1:00	S
+Rule	HK	1979	1980	-	Oct	Sun>=16	3:30	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Hong_Kong	7:36:36 -	LMT	1904 Oct 30
+			8:00	HK	HK%sT
+
+
+###############################################################################
+
+# Taiwan
+
+# Shanks writes that Taiwan observed DST during 1945, when it
+# was still controlled by Japan.  This is hard to believe, but we don't
+# have any other information.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Taiwan	1945	1951	-	May	1	0:00	1:00	D
+Rule	Taiwan	1945	1951	-	Oct	1	0:00	0	S
+Rule	Taiwan	1952	only	-	Mar	1	0:00	1:00	D
+Rule	Taiwan	1952	1954	-	Nov	1	0:00	0	S
+Rule	Taiwan	1953	1959	-	Apr	1	0:00	1:00	D
+Rule	Taiwan	1955	1961	-	Oct	1	0:00	0	S
+Rule	Taiwan	1960	1961	-	Jun	1	0:00	1:00	D
+Rule	Taiwan	1974	1975	-	Apr	1	0:00	1:00	D
+Rule	Taiwan	1974	1975	-	Oct	1	0:00	0	S
+Rule	Taiwan	1980	only	-	Jun	30	0:00	1:00	D
+Rule	Taiwan	1980	only	-	Sep	30	0:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Taipei	8:06:00 -	LMT	1896 # or Taibei or T'ai-pei
+			8:00	Taiwan	C%sT
+
+# Macau (Macao, Aomen)
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Macau	1961	1962	-	Mar	Sun>=16	3:30	1:00	S
+Rule	Macau	1961	1964	-	Nov	Sun>=1	3:30	0	-
+Rule	Macau	1963	only	-	Mar	Sun>=16	0:00	1:00	S
+Rule	Macau	1964	only	-	Mar	Sun>=16	3:30	1:00	S
+Rule	Macau	1965	only	-	Mar	Sun>=16	0:00	1:00	S
+Rule	Macau	1965	only	-	Oct	31	0:00	0	-
+Rule	Macau	1966	1971	-	Apr	Sun>=16	3:30	1:00	S
+Rule	Macau	1966	1971	-	Oct	Sun>=16	3:30	0	-
+Rule	Macau	1972	1974	-	Apr	Sun>=15	0:00	1:00	S
+Rule	Macau	1972	1973	-	Oct	Sun>=15	0:00	0	-
+Rule	Macau	1974	1977	-	Oct	Sun>=15	3:30	0	-
+Rule	Macau	1975	1977	-	Apr	Sun>=15	3:30	1:00	S
+Rule	Macau	1978	1980	-	Apr	Sun>=15	0:00	1:00	S
+Rule	Macau	1978	1980	-	Oct	Sun>=15	0:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Macau	7:34:20 -	LMT	1912
+			8:00	Macau	MO%sT	1999 Dec 20 # return to China
+			8:00	PRC	C%sT
+
+
+###############################################################################
+
+# Cyprus
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Cyprus	1975	only	-	Apr	13	0:00	1:00	S
+Rule	Cyprus	1975	only	-	Oct	12	0:00	0	-
+Rule	Cyprus	1976	only	-	May	15	0:00	1:00	S
+Rule	Cyprus	1976	only	-	Oct	11	0:00	0	-
+Rule	Cyprus	1977	1980	-	Apr	Sun>=1	0:00	1:00	S
+Rule	Cyprus	1977	only	-	Sep	25	0:00	0	-
+Rule	Cyprus	1978	only	-	Oct	2	0:00	0	-
+Rule	Cyprus	1979	1997	-	Sep	lastSun	0:00	0	-
+Rule	Cyprus	1981	1998	-	Mar	lastSun	0:00	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Nicosia	2:13:28 -	LMT	1921 Nov 14
+			2:00	Cyprus	EE%sT	1998 Sep
+			2:00	EUAsia	EE%sT
+# IATA SSIM (1998-09) has Cyprus using EU rules for the first time.
+
+# Classically, Cyprus belongs to Asia; e.g. see Herodotus, Histories, I.72.
+# However, for various reasons many users expect to find it under Europe.
+Link	Asia/Nicosia	Europe/Nicosia
+
+# Georgia
+# From Paul Eggert (1994-11-19):
+# Today's _Economist_ (p 60) reports that Georgia moved its clocks forward
+# an hour recently, due to a law proposed by Zurab Murvanidze,
+# an MP who went on a hunger strike for 11 days to force discussion about it!
+# We have no details, but we'll guess they didn't move the clocks back in fall.
+#
+# From Mathew Englander, quoting AP (1996-10-23 13:05-04):
+# Instead of putting back clocks at the end of October, Georgia
+# will stay on daylight savings time this winter to save energy,
+# President Eduard Shevardnadze decreed Wednesday.
+#
+# From the BBC via Joseph S. Myers (2004-06-27):
+#
+# Georgia moved closer to Western Europe on Sunday...  The former Soviet
+# republic has changed its time zone back to that of Moscow.  As a result it
+# is now just four hours ahead of Greenwich Mean Time, rather than five hours
+# ahead.  The switch was decreed by the pro-Western president of Georgia,
+# Mikhail Saakashvili, who said the change was partly prompted by the process
+# of integration into Europe.
+
+# From Teimuraz Abashidze (2005-11-07):
+# Government of Georgia ... decided to NOT CHANGE daylight savings time on
+# [Oct.] 30, as it was done before during last more than 10 years.
+# Currently, we are in fact GMT +4:00, as before 30 October it was GMT
+# +3:00.... The problem is, there is NO FORMAL LAW or governmental document
+# about it.  As far as I can find, I was told, that there is no document,
+# because we just DIDN'T ISSUE document about switching to winter time....
+# I don't know what can be done, especially knowing that some years ago our
+# DST rules where changed THREE TIMES during one month.
+
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Tbilisi	2:59:16 -	LMT	1880
+			2:59:16	-	TBMT	1924 May  2 # Tbilisi Mean Time
+			3:00	-	TBIT	1957 Mar    # Tbilisi Time
+			4:00 RussiaAsia TBI%sT	1991 Mar 31 2:00s
+			3:00	1:00	TBIST	1991 Apr  9 # independence
+			3:00 RussiaAsia GE%sT	1992 # Georgia Time
+			3:00 E-EurAsia	GE%sT	1994 Sep lastSun
+			4:00 E-EurAsia	GE%sT	1996 Oct lastSun
+			4:00	1:00	GEST	1997 Mar lastSun
+			4:00 E-EurAsia	GE%sT	2004 Jun 27
+			3:00 RussiaAsia	GE%sT	2005 Mar lastSun 2:00
+			4:00	-	GET
+
+# East Timor
+
+# From Joao Carrascalao, brother of the former governor of East Timor, in
+# <a href="http://etan.org/et99c/december/26-31/30ETMAY.htm">
+# East Timor may be late for its millennium
+# </a> (1999-12-26/31):
+# Portugal tried to change the time forward in 1974 because the sun
+# rises too early but the suggestion raised a lot of problems with the
+# Timorese and I still don't think it would work today because it
+# conflicts with their way of life.
+
+# From Paul Eggert (2000-12-04):
+# We don't have any record of the above attempt.
+# Most likely our records are incomplete, but we have no better data.
+
+# <a href="http://www.hri.org/news/world/undh/last/00-08-16.undh.html">
+# From Manoel de Almeida e Silva, Deputy Spokesman for the UN Secretary-General
+# (2000-08-16)</a>:
+# The Cabinet of the East Timor Transition Administration decided
+# today to advance East Timor's time by one hour.  The time change,
+# which will be permanent, with no seasonal adjustment, will happen at
+# midnight on Saturday, September 16.
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Dili	8:22:20 -	LMT	1912
+			8:00	-	TLT	1942 Feb 21 23:00 # E Timor Time
+			9:00	-	JST	1945 Aug
+			9:00	-	TLT	1976 May  3
+			8:00	-	CIT	2000 Sep 17 00:00
+			9:00	-	TLT
+
+# India
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Calcutta	5:53:28 -	LMT	1880	# Kolkata
+			5:53:20	-	HMT	1941 Oct    # Howrah Mean Time?
+			6:30	-	BURT	1942 May 15 # Burma Time
+			5:30	-	IST	1942 Sep
+			5:30	1:00	IST	1945 Oct 15
+			5:30	-	IST
+# The following are like Asia/Calcutta:
+#	Andaman Is
+#	Lakshadweep (Laccadive, Minicoy and Amindivi Is)
+#	Nicobar Is
+
+# Indonesia
+#
+# From Gwillim Law (2001-05-28), overriding Shanks:
+# <http://www.sumatera-inc.com/go_to_invest/about_indonesia.asp#standtime>
+# says that Indonesia's time zones changed on 1988-01-01.  Looking at some
+# time zone maps, I think that must refer to Western Borneo (Kalimantan Barat
+# and Kalimantan Tengah) switching from UTC+8 to UTC+7.
+#
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Asia/Jakarta	7:07:12 -	LMT	1867 Aug 10
+# Shanks says the next transition was at 1924 Jan 1 0:13,
+# but this must be a typo.
+			7:07:12	-	JMT	1923 Dec 31 23:47:12 # Jakarta
+			7:20	-	JAVT	1932 Nov	 # Java Time
+			7:30	-	WIT	1942 Mar 23
+			9:00	-	JST	1945 Aug
+			7:30	-	WIT	1948 May
+			8:00	-	WIT	1950 May
+			7:30	-	WIT	1964
+			7:00	-	WIT
+Zone Asia/Pontianak	7:17:20	-	LMT	1908 May
+			7:17:20	-	PMT	1932 Nov    # Pontianak MT
+			7:30	-	WIT	1942 Jan 29
+			9:00	-	JST	1945 Aug
+			7:30	-	WIT	1948 May
+			8:00	-	WIT	1950 May
+			7:30	-	WIT	1964
+			8:00	-	CIT	1988 Jan  1
+			7:00	-	WIT
+Zone Asia/Makassar	7:57:36 -	LMT	1920
+			7:57:36	-	MMT	1932 Nov    # Macassar MT
+			8:00	-	CIT	1942 Feb  9
+			9:00	-	JST	1945 Aug
+			8:00	-	CIT
+Zone Asia/Jayapura	9:22:48 -	LMT	1932 Nov
+			9:00	-	EIT	1944
+			9:30	-	CST	1964
+			9:00	-	EIT
+
+# Iran
+
+# From Roozbeh Pournader (2003-03-15):
+# This is an English translation of what I just found (originally in Persian).
+# The Gregorian dates in brackets are mine:
+#
+#	Official Newspaper No. 13548-1370/6/25 [1991-09-16]
+#	No. 16760/T233 H				1370/6/10 [1991-09-01]
+#
+#	The Rule About Change of the Official Time of the Country
+#
+#	The Board of Ministers, in the meeting dated 1370/5/23 [1991-08-14],
+#	based on the suggestion number 2221/D dated 1370/4/22 [1991-07-13]
+#	of the Country's Organization for Official and Employment Affairs,
+#	and referring to the law for equating the working hours of workers
+#	and officers in the whole country dated 1359/4/23 [1980-07-14], and
+#	for synchronizing the official times of the country, agreed that:
+#
+#	The official time of the country will should move forward one hour
+#	at the 24[:00] hours of the first day of Farvardin and should return
+#	to its previous state at the 24[:00] hours of the 30th day of
+#	Shahrivar.
+#
+#	First Deputy to the President - Hassan Habibi
+#
+# From personal experience, that agrees with what has been followed
+# for at least the last 5 years.  Before that, for a few years, the
+# date used was the first Thursday night of Farvardin and the last
+# Thursday night of Shahrivar, but I can't give exact dates....
+# I have also changed the abbreviations to what is considered correct
+# here in Iran, IRST for regular time and IRDT for daylight saving time.
+#
+# From Roozbeh Pournader (2005-04-05):
+# The text of the Iranian law, in effect since 1925, clearly mentions
+# that the true solar year is the measure, and there is no arithmetic
+# leap year calculation involved.  There has never been any serious
+# plan to change that law....
+#
+# From Paul Eggert (2005-04-05):
+# Go with Shanks before September 1991, and with Pournader thereafter.
+# I used Ed Reingold's cal-persia in GNU Emacs 21.2 to check Persian dates,
+# stopping after 2037 when 32-bit time_t's overflow.
+# That cal-persia used Birashk's approximation, which disagrees with the solar
+# calendar predictions for the year 2025, so I corrected those dates by hand.
+#
+# From Oscar van Vlijmen (2005-03-30), writing about future
+# discrepancies between cal-persia and the Iranian calendar:
+# For 2091 solar-longitude-after yields 2091-03-20 08:40:07.7 UT for
+# the vernal equinox and that gets so close to 12:00 some local
+# Iranian time that the definition of the correct location needs to be
+# known exactly, amongst other factors.  2157 is even closer:
+# 2157-03-20 08:37:15.5 UT.  But the Gregorian year 2025 should give
+# no interpretation problem whatsoever.  By the way, another instant
+# in the near future where there will be a discrepancy between
+# arithmetical and astronomical Iranian calendars will be in 2058:
+# vernal equinox on 2058-03-20 09:03:05.9 UT.  The Java version of
+# Reingold's/Dershowitz' calculator gives correctly the Gregorian date
+# 2058-03-21 for 1 Farvardin 1437 (astronomical).
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Iran	1978	1980	-	Mar	21	0:00	1:00	D
+Rule	Iran	1978	only	-	Oct	21	0:00	0	S
+Rule	Iran	1979	only	-	Sep	19	0:00	0	S
+Rule	Iran	1980	only	-	Sep	23	0:00	0	S
+Rule	Iran	1991	only	-	May	 3	0:00	1:00	D
+Rule	Iran	1992	1995	-	Mar	22	0:00	1:00	D
+Rule	Iran	1991	1995	-	Sep	22	0:00	0	S
+Rule	Iran	1996	only	-	Mar	21	0:00	1:00	D
+Rule	Iran	1996	only	-	Sep	21	0:00	0	S
+Rule	Iran	1997	1999	-	Mar	22	0:00	1:00	D
+Rule	Iran	1997	1999	-	Sep	22	0:00	0	S
+Rule	Iran	2000	only	-	Mar	21	0:00	1:00	D
+Rule	Iran	2000	only	-	Sep	21	0:00	0	S
+Rule	Iran	2001	2003	-	Mar	22	0:00	1:00	D
+Rule	Iran	2001	2003	-	Sep	22	0:00	0	S
+Rule	Iran	2004	only	-	Mar	21	0:00	1:00	D
+Rule	Iran	2004	only	-	Sep	21	0:00	0	S
+Rule	Iran	2005	2007	-	Mar	22	0:00	1:00	D
+Rule	Iran	2005	2007	-	Sep	22	0:00	0	S
+Rule	Iran	2008	only	-	Mar	21	0:00	1:00	D
+Rule	Iran	2008	only	-	Sep	21	0:00	0	S
+Rule	Iran	2009	2011	-	Mar	22	0:00	1:00	D
+Rule	Iran	2009	2011	-	Sep	22	0:00	0	S
+Rule	Iran	2012	only	-	Mar	21	0:00	1:00	D
+Rule	Iran	2012	only	-	Sep	21	0:00	0	S
+Rule	Iran	2013	2015	-	Mar	22	0:00	1:00	D
+Rule	Iran	2013	2015	-	Sep	22	0:00	0	S
+Rule	Iran	2016	only	-	Mar	21	0:00	1:00	D
+Rule	Iran	2016	only	-	Sep	21	0:00	0	S
+Rule	Iran	2017	2019	-	Mar	22	0:00	1:00	D
+Rule	Iran	2017	2019	-	Sep	22	0:00	0	S
+Rule	Iran	2020	only	-	Mar	21	0:00	1:00	D
+Rule	Iran	2020	only	-	Sep	21	0:00	0	S
+Rule	Iran	2021	2023	-	Mar	22	0:00	1:00	D
+Rule	Iran	2021	2023	-	Sep	22	0:00	0	S
+Rule	Iran	2024	only	-	Mar	21	0:00	1:00	D
+Rule	Iran	2024	only	-	Sep	21	0:00	0	S
+Rule	Iran	2025	2027	-	Mar	22	0:00	1:00	D
+Rule	Iran	2025	2027	-	Sep	22	0:00	0	S
+Rule	Iran	2028	2029	-	Mar	21	0:00	1:00	D
+Rule	Iran	2028	2029	-	Sep	21	0:00	0	S
+Rule	Iran	2030	2031	-	Mar	22	0:00	1:00	D
+Rule	Iran	2030	2031	-	Sep	22	0:00	0	S
+Rule	Iran	2032	2033	-	Mar	21	0:00	1:00	D
+Rule	Iran	2032	2033	-	Sep	21	0:00	0	S
+Rule	Iran	2034	2035	-	Mar	22	0:00	1:00	D
+Rule	Iran	2034	2035	-	Sep	22	0:00	0	S
+Rule	Iran	2036	2037	-	Mar	21	0:00	1:00	D
+Rule	Iran	2036	2037	-	Sep	21	0:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Tehran	3:25:44	-	LMT	1916
+			3:25:44	-	TMT	1946	# Tehran Mean Time
+			3:30	-	IRST	1977 Nov
+			4:00	Iran	IR%sT	1979
+			3:30	Iran	IR%sT
+
+
+# Iraq
+#
+# From Jonathan Lennox (2000-06-12):
+# An article in this week's Economist ("Inside the Saddam-free zone", p. 50 in
+# the U.S. edition) on the Iraqi Kurds contains a paragraph:
+# "The three northern provinces ... switched their clocks this spring and
+# are an hour ahead of Baghdad."
+#
+# But Rives McDow (2000-06-18) quotes a contact in Iraqi-Kurdistan as follows:
+# In the past, some Kurdish nationalists, as a protest to the Iraqi
+# Government, did not adhere to daylight saving time.  They referred
+# to daylight saving as Saddam time.  But, as of today, the time zone
+# in Iraqi-Kurdistan is on standard time with Baghdad, Iraq.
+#
+# So we'll ignore the Economist's claim.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Iraq	1982	only	-	May	1	0:00	1:00	D
+Rule	Iraq	1982	1984	-	Oct	1	0:00	0	S
+Rule	Iraq	1983	only	-	Mar	31	0:00	1:00	D
+Rule	Iraq	1984	1985	-	Apr	1	0:00	1:00	D
+Rule	Iraq	1985	1990	-	Sep	lastSun	1:00s	0	S
+Rule	Iraq	1986	1990	-	Mar	lastSun	1:00s	1:00	D
+# IATA SSIM (1991/1996) says Apr 1 12:01am UTC; guess the `:01' is a typo.
+# Shanks says Iraq did not observe DST 1992/1997 or 1999 on; ignore this.
+Rule	Iraq	1991	max	-	Apr	 1	3:00s	1:00	D
+Rule	Iraq	1991	max	-	Oct	 1	3:00s	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Baghdad	2:57:40	-	LMT	1890
+			2:57:36	-	BMT	1918	    # Baghdad Mean Time?
+			3:00	-	AST	1982 May
+			3:00	Iraq	A%sT
+
+
+###############################################################################
+
+# Israel
+
+# From Ephraim Silverberg (2001-01-11):
+#
+# I coined "IST/IDT" circa 1988.  Until then there were three
+# different abbreviations in use:
+#
+# JST  Jerusalem Standard Time [Danny Braniss, Hebrew University]
+# IZT  Israel Zonal (sic) Time [Prof. Haim Papo, Technion]
+# EEST Eastern Europe Standard Time [used by almost everyone else]
+#
+# Since timezones should be called by country and not capital cities,
+# I ruled out JST.  As Israel is in Asia Minor and not Eastern Europe,
+# EEST was equally unacceptable.  Since "zonal" was not compatible with
+# any other timezone abbreviation, I felt that 'IST' was the way to go
+# and, indeed, it has received almost universal acceptance in timezone
+# settings in Israeli computers.
+#
+# In any case, I am happy to share timezone abbreviations with India,
+# high on my favorite-country list (and not only because my wife's
+# family is from India).
+
+# From Shanks:
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Zion	1940	only	-	Jun	 1	0:00	1:00	D
+Rule	Zion	1942	1944	-	Nov	 1	0:00	0	S
+Rule	Zion	1943	only	-	Apr	 1	2:00	1:00	D
+Rule	Zion	1944	only	-	Apr	 1	0:00	1:00	D
+Rule	Zion	1945	only	-	Apr	16	0:00	1:00	D
+Rule	Zion	1945	only	-	Nov	 1	2:00	0	S
+Rule	Zion	1946	only	-	Apr	16	2:00	1:00	D
+Rule	Zion	1946	only	-	Nov	 1	0:00	0	S
+Rule	Zion	1948	only	-	May	23	0:00	2:00	DD
+Rule	Zion	1948	only	-	Sep	 1	0:00	1:00	D
+Rule	Zion	1948	1949	-	Nov	 1	2:00	0	S
+Rule	Zion	1949	only	-	May	 1	0:00	1:00	D
+Rule	Zion	1950	only	-	Apr	16	0:00	1:00	D
+Rule	Zion	1950	only	-	Sep	15	3:00	0	S
+Rule	Zion	1951	only	-	Apr	 1	0:00	1:00	D
+Rule	Zion	1951	only	-	Nov	11	3:00	0	S
+Rule	Zion	1952	only	-	Apr	20	2:00	1:00	D
+Rule	Zion	1952	only	-	Oct	19	3:00	0	S
+Rule	Zion	1953	only	-	Apr	12	2:00	1:00	D
+Rule	Zion	1953	only	-	Sep	13	3:00	0	S
+Rule	Zion	1954	only	-	Jun	13	0:00	1:00	D
+Rule	Zion	1954	only	-	Sep	12	0:00	0	S
+Rule	Zion	1955	only	-	Jun	11	2:00	1:00	D
+Rule	Zion	1955	only	-	Sep	11	0:00	0	S
+Rule	Zion	1956	only	-	Jun	 3	0:00	1:00	D
+Rule	Zion	1956	only	-	Sep	30	3:00	0	S
+Rule	Zion	1957	only	-	Apr	29	2:00	1:00	D
+Rule	Zion	1957	only	-	Sep	22	0:00	0	S
+Rule	Zion	1974	only	-	Jul	 7	0:00	1:00	D
+Rule	Zion	1974	only	-	Oct	13	0:00	0	S
+Rule	Zion	1975	only	-	Apr	20	0:00	1:00	D
+Rule	Zion	1975	only	-	Aug	31	0:00	0	S
+Rule	Zion	1985	only	-	Apr	14	0:00	1:00	D
+Rule	Zion	1985	only	-	Sep	15	0:00	0	S
+Rule	Zion	1986	only	-	May	18	0:00	1:00	D
+Rule	Zion	1986	only	-	Sep	 7	0:00	0	S
+Rule	Zion	1987	only	-	Apr	15	0:00	1:00	D
+Rule	Zion	1987	only	-	Sep	13	0:00	0	S
+Rule	Zion	1988	only	-	Apr	 9	0:00	1:00	D
+Rule	Zion	1988	only	-	Sep	 3	0:00	0	S
+
+# From Ephraim Silverberg
+# (1997-03-04, 1998-03-16, 1998-12-28, 2000-01-17, 2000-07-25, 2004-12-22,
+# and 2005-02-17):
+
+# According to the Office of the Secretary General of the Ministry of
+# Interior, there is NO set rule for Daylight-Savings/Standard time changes.
+# One thing is entrenched in law, however: that there must be at least 150
+# days of daylight savings time annually.  From 1993-1998, the change to
+# daylight savings time was on a Friday morning from midnight IST to
+# 1 a.m IDT; up until 1998, the change back to standard time was on a
+# Saturday night from midnight daylight savings time to 11 p.m. standard
+# time.  1996 is an exception to this rule where the change back to standard
+# time took place on Sunday night instead of Saturday night to avoid
+# conflicts with the Jewish New Year.  In 1999, the change to
+# daylight savings time was still on a Friday morning but from
+# 2 a.m. IST to 3 a.m. IDT; furthermore, the change back to standard time
+# was also on a Friday morning from 2 a.m. IDT to 1 a.m. IST for
+# 1999 only.  In the year 2000, the change to daylight savings time was
+# similar to 1999, but although the change back will be on a Friday, it
+# will take place from 1 a.m. IDT to midnight IST.  Starting in 2001, all
+# changes to/from will take place at 1 a.m. old time, but now there is no
+# rule as to what day of the week it will take place in as the start date
+# (except in 2003) is the night after the Passover Seder (i.e. the eve
+# of the 16th of Nisan in the lunar Hebrew calendar) and the end date
+# (except in 2002) is three nights before Yom Kippur [Day of Atonement]
+# (the eve of the 7th of Tishrei in the lunar Hebrew calendar).
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Zion	1989	only	-	Apr	30	0:00	1:00	D
+Rule	Zion	1989	only	-	Sep	 3	0:00	0	S
+Rule	Zion	1990	only	-	Mar	25	0:00	1:00	D
+Rule	Zion	1990	only	-	Aug	26	0:00	0	S
+Rule	Zion	1991	only	-	Mar	24	0:00	1:00	D
+Rule	Zion	1991	only	-	Sep	 1	0:00	0	S
+Rule	Zion	1992	only	-	Mar	29	0:00	1:00	D
+Rule	Zion	1992	only	-	Sep	 6	0:00	0	S
+Rule	Zion	1993	only	-	Apr	 2	0:00	1:00	D
+Rule	Zion	1993	only	-	Sep	 5	0:00	0	S
+
+# The dates for 1994-1995 were obtained from Office of the Spokeswoman for the
+# Ministry of Interior, Jerusalem, Israel.  The spokeswoman can be reached by
+# calling the office directly at 972-2-6701447 or 972-2-6701448.
+
+# Rule	NAME    FROM    TO      TYPE    IN      ON      AT      SAVE    LETTER/S
+Rule	Zion	1994	only	-	Apr	 1	0:00	1:00	D
+Rule	Zion	1994	only	-	Aug	28	0:00	0	S
+Rule	Zion	1995	only	-	Mar	31	0:00	1:00	D
+Rule	Zion	1995	only	-	Sep	 3	0:00	0	S
+
+# The dates for 1996 were determined by the Minister of Interior of the
+# time, Haim Ramon.  The official announcement regarding 1996-1998
+# (with the dates for 1997-1998 no longer being relevant) can be viewed at:
+#
+#   ftp://ftp.cs.huji.ac.il/pub/tz/announcements/1996-1998.ramon.ps.gz
+#
+# The dates for 1997-1998 were altered by his successor, Rabbi Eli Suissa.
+#
+# The official announcements for the years 1997-1999 can be viewed at:
+#
+#   ftp://ftp.cs.huji.ac.il/pub/tz/announcements/YYYY.ps.gz
+#
+#       where YYYY is the relevant year.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Zion	1996	only	-	Mar	15	0:00	1:00	D
+Rule	Zion	1996	only	-	Sep	16	0:00	0	S
+Rule	Zion	1997	only	-	Mar	21	0:00	1:00	D
+Rule	Zion	1997	only	-	Sep	14	0:00	0	S
+Rule	Zion	1998	only	-	Mar	20	0:00	1:00	D
+Rule	Zion	1998	only	-	Sep	 6	0:00	0	S
+Rule	Zion	1999	only	-	Apr	 2	2:00	1:00	D
+Rule	Zion	1999	only	-	Sep	 3	2:00	0	S
+
+# The Knesset Interior Committee has changed the dates for 2000 for
+# the third time in just over a year and have set new dates for the
+# years 2001-2004 as well.
+#
+# The official announcement for the start date of 2000 can be viewed at:
+#
+#	ftp://ftp.cs.huji.ac.il/pub/tz/announcements/2000-start.ps.gz
+#
+# The official announcement for the end date of 2000 and the dates
+# for the years 2001-2004 can be viewed at:
+#
+#	ftp://ftp.cs.huji.ac.il/pub/tz/announcements/2000-2004.ps.gz
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Zion	2000	only	-	Apr	14	2:00	1:00	D
+Rule	Zion	2000	only	-	Oct	 6	1:00	0	S
+Rule	Zion	2001	only	-	Apr	 9	1:00	1:00	D
+Rule	Zion	2001	only	-	Sep	24	1:00	0	S
+Rule	Zion	2002	only	-	Mar	29	1:00	1:00	D
+Rule	Zion	2002	only	-	Oct	 7	1:00	0	S
+Rule	Zion	2003	only	-	Mar	28	1:00	1:00	D
+Rule	Zion	2003	only	-	Oct	 3	1:00	0	S
+Rule	Zion	2004	only	-	Apr	 7	1:00	1:00	D
+Rule	Zion	2004	only	-	Sep	22	1:00	0	S
+
+# The proposed law agreed upon by the Knesset Interior Committee on
+# 2005-02-14 is that, for 2005 and beyond, DST starts at 02:00 the
+# last Friday before April 2nd (i.e. the last Friday in March or April
+# 1st itself if it falls on a Friday) and ends at 02:00 on the Saturday
+# night _before_ the fast of Yom Kippur.
+#
+# Those who can read Hebrew can view the announcement at:
+#
+#	ftp://ftp.cs.huji.ac.il/pub/tz/announcements/2005+beyond.ps
+
+# From Paul Eggert (2005-02-22):
+# I used Ephraim Silverberg's dst-israel.el program
+# <ftp://ftp.cs.huji.ac.il/pub/tz/software/dst-israel.el> (2005-02-20)
+# along with Ed Reingold's cal-hebrew in GNU Emacs 21.4,
+# to generate the transitions in this list.
+# (I replaced "lastFri" with "Fri>=26" by hand.)
+# The spring transitions below all correspond to the following Rule:
+#
+# Rule	Zion	2005	max	-	Mar	Fri>=26	2:00	1:00	D
+#
+# but older zic implementations (e.g., Solaris 8) do not support
+# "Fri>=26" to mean April 1 in years like 2005, so for now we list the
+# springtime transitions explicitly.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Zion	2005	only	-	Apr	 1	2:00	1:00	D
+Rule	Zion	2005	only	-	Oct	 9	2:00	0	S
+Rule	Zion	2006	2010	-	Mar	Fri>=26	2:00	1:00	D
+Rule	Zion	2006	only	-	Oct	 1	2:00	0	S
+Rule	Zion	2007	only	-	Sep	16	2:00	0	S
+Rule	Zion	2008	only	-	Oct	 5	2:00	0	S
+Rule	Zion	2009	only	-	Sep	27	2:00	0	S
+Rule	Zion	2010	only	-	Sep	12	2:00	0	S
+Rule	Zion	2011	only	-	Apr	 1	2:00	1:00	D
+Rule	Zion	2011	only	-	Oct	 2	2:00	0	S
+Rule	Zion	2012	2015	-	Mar	Fri>=26	2:00	1:00	D
+Rule	Zion	2012	only	-	Sep	23	2:00	0	S
+Rule	Zion	2013	only	-	Sep	 8	2:00	0	S
+Rule	Zion	2014	only	-	Sep	28	2:00	0	S
+Rule	Zion	2015	only	-	Sep	20	2:00	0	S
+Rule	Zion	2016	only	-	Apr	 1	2:00	1:00	D
+Rule	Zion	2016	only	-	Oct	 9	2:00	0	S
+Rule	Zion	2017	2021	-	Mar	Fri>=26	2:00	1:00	D
+Rule	Zion	2017	only	-	Sep	24	2:00	0	S
+Rule	Zion	2018	only	-	Sep	16	2:00	0	S
+Rule	Zion	2019	only	-	Oct	 6	2:00	0	S
+Rule	Zion	2020	only	-	Sep	27	2:00	0	S
+Rule	Zion	2021	only	-	Sep	12	2:00	0	S
+Rule	Zion	2022	only	-	Apr	 1	2:00	1:00	D
+Rule	Zion	2022	only	-	Oct	 2	2:00	0	S
+Rule	Zion	2023	2032	-	Mar	Fri>=26	2:00	1:00	D
+Rule	Zion	2023	only	-	Sep	24	2:00	0	S
+Rule	Zion	2024	only	-	Oct	 6	2:00	0	S
+Rule	Zion	2025	only	-	Sep	28	2:00	0	S
+Rule	Zion	2026	only	-	Sep	20	2:00	0	S
+Rule	Zion	2027	only	-	Oct	10	2:00	0	S
+Rule	Zion	2028	only	-	Sep	24	2:00	0	S
+Rule	Zion	2029	only	-	Sep	16	2:00	0	S
+Rule	Zion	2030	only	-	Oct	 6	2:00	0	S
+Rule	Zion	2031	only	-	Sep	21	2:00	0	S
+Rule	Zion	2032	only	-	Sep	12	2:00	0	S
+Rule	Zion	2033	only	-	Apr	 1	2:00	1:00	D
+Rule	Zion	2033	only	-	Oct	 2	2:00	0	S
+Rule	Zion	2034	2037	-	Mar	Fri>=26	2:00	1:00	D
+Rule	Zion	2034	only	-	Sep	17	2:00	0	S
+Rule	Zion	2035	only	-	Oct	 7	2:00	0	S
+Rule	Zion	2036	only	-	Sep	28	2:00	0	S
+Rule	Zion	2037	only	-	Sep	13	2:00	0	S
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Jerusalem	2:20:56 -	LMT	1880
+			2:20:40	-	JMT	1918	# Jerusalem Mean Time?
+			2:00	Zion	I%sT
+
+
+
+###############################################################################
+
+# Japan
+
+# `9:00' and `JST' is from Guy Harris.
+
+# From Paul Eggert (1995-03-06):
+# Today's _Asahi Evening News_ (page 4) reports that Japan had
+# daylight saving between 1948 and 1951, but ``the system was discontinued
+# because the public believed it would lead to longer working hours.''
+
+# From Mayumi Negishi in the 2005-08-10 Japan Times
+# <http://www.japantimes.co.jp/cgi-bin/getarticle.pl5?nn20050810f2.htm>:
+# Occupation authorities imposed daylight-saving time on Japan on
+# [1948-05-01]....  But lack of prior debate and the execution of
+# daylight-saving time just three days after the bill was passed generated
+# deep hatred of the concept....  The Diet unceremoniously passed a bill to
+# dump the unpopular system in October 1951, less than a month after the San
+# Francisco Peace Treaty was signed.  (A government poll in 1951 showed 53%
+# of the Japanese wanted to scrap daylight-saving time, as opposed to 30% who
+# wanted to keep it.)
+
+# Shanks writes that daylight saving in Japan during those years was as follows:
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Japan	1948	only	-	May	Sun>=1	2:00	1:00	D
+Rule	Japan	1948	1951	-	Sep	Sat>=8	2:00	0	S
+Rule	Japan	1949	only	-	Apr	Sun>=1	2:00	1:00	D
+Rule	Japan	1950	1951	-	May	Sun>=1	2:00	1:00	D
+# but the only locations using it (for birth certificates, presumably, since
+# Shanks's audience is astrologers) were US military bases.  For now, assume
+# that for most purposes daylight-saving time was observed; otherwise, what
+# would have been the point of the 1951 poll?
+
+# From Hideyuki Suzuki (1998-11-09):
+# 'Tokyo' usually stands for the former location of Tokyo Astronomical
+# Observatory: E 139 44' 40".90 (9h 18m 58s.727), N 35 39' 16".0.
+# This data is from 'Rika Nenpyou (Chronological Scientific Tables) 1996'
+# edited by National Astronomical Observatory of Japan....
+# JST (Japan Standard Time) has been used since 1888-01-01 00:00 (JST).
+# The law is enacted on 1886-07-07.
+
+# From Hideyuki Suzuki (1998-11-16):
+# The ordinance No. 51 (1886) established "standard time" in Japan,
+# which stands for the time on E 135 degree.
+# In the ordinance No. 167 (1895), "standard time" was renamed to "central
+# standard time".  And the same ordinance also established "western standard
+# time", which stands for the time on E 120 degree....  But "western standard
+# time" was abolished in the ordinance No. 529 (1937).  In the ordinance No.
+# 167, there is no mention regarding for what place western standard time is
+# standard....
+#
+# I wrote "ordinance" above, but I don't know how to translate.
+# In Japanese it's "chokurei", which means ordinance from emperor.
+
+# Shanks claims JST in use since 1896, and that a few places (e.g. Ishigaki)
+# use +0800; go with Suzuki.  Guess that all ordinances took effect on Jan 1.
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Tokyo	9:18:59	-	LMT	1887 Dec 31 15:00u
+			9:00	-	JST	1896
+			9:00	-	CJT	1938
+			9:00	Japan	J%sT
+# Since 1938, all Japanese possessions have been like Asia/Tokyo.
+
+# Jordan
+#
+# From <a href="http://star.arabia.com/990701/JO9.html">
+# Jordan Week (1999-07-01) </a> via Steffen Thorsen (1999-09-09):
+# Clocks in Jordan were forwarded one hour on Wednesday at midnight,
+# in accordance with the government's decision to implement summer time
+# all year round.
+#
+# From <a href="http://star.arabia.com/990930/JO9.html">
+# Jordan Week (1999-09-30) </a> via Steffen Thorsen (1999-11-09):
+# Winter time starts today Thursday, 30 September. Clocks will be turned back
+# by one hour.  This is the latest government decision and it's final!
+# The decision was taken because of the increase in working hours in
+# government's departments from six to seven hours.
+#
+# From Paul Eggert (2005-11-22):
+# Starting 2003 transitions are from Steffen Thorsen's web site timeanddate.com.
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Jordan	1973	only	-	Jun	6	0:00	1:00	S
+Rule	Jordan	1973	1975	-	Oct	1	0:00	0	-
+Rule	Jordan	1974	1977	-	May	1	0:00	1:00	S
+Rule	Jordan	1976	only	-	Nov	1	0:00	0	-
+Rule	Jordan	1977	only	-	Oct	1	0:00	0	-
+Rule	Jordan	1978	only	-	Apr	30	0:00	1:00	S
+Rule	Jordan	1978	only	-	Sep	30	0:00	0	-
+Rule	Jordan	1985	only	-	Apr	1	0:00	1:00	S
+Rule	Jordan	1985	only	-	Oct	1	0:00	0	-
+Rule	Jordan	1986	1988	-	Apr	Fri>=1	0:00	1:00	S
+Rule	Jordan	1986	1990	-	Oct	Fri>=1	0:00	0	-
+Rule	Jordan	1989	only	-	May	8	0:00	1:00	S
+Rule	Jordan	1990	only	-	Apr	27	0:00	1:00	S
+Rule	Jordan	1991	only	-	Apr	17	0:00	1:00	S
+Rule	Jordan	1991	only	-	Sep	27	0:00	0	-
+Rule	Jordan	1992	only	-	Apr	10	0:00	1:00	S
+Rule	Jordan	1992	1993	-	Oct	Fri>=1	0:00	0	-
+Rule	Jordan	1993	1998	-	Apr	Fri>=1	0:00	1:00	S
+Rule	Jordan	1994	only	-	Sep	Fri>=15	0:00	0	-
+Rule	Jordan	1995	1998	-	Sep	Fri>=15	0:00s	0	-
+Rule	Jordan	1999	only	-	Jul	 1	0:00s	1:00	S
+Rule	Jordan	1999	2002	-	Sep	lastThu	0:00s	0	-
+Rule	Jordan	2000	max	-	Mar	lastThu	0:00s	1:00	S
+Rule	Jordan	2003	only	-	Oct	24	0:00s	0	-
+Rule	Jordan	2004	only	-	Oct	15	0:00s	0	-
+Rule	Jordan	2005	max	-	Sep	lastFri	0:00s	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Amman	2:23:44 -	LMT	1931
+			2:00	Jordan	EE%sT
+
+
+# Kazakhstan
+
+# From Paul Eggert (1996-11-22):
+# Andrew Evtichov (1996-04-13) writes that Kazakhstan
+# stayed in sync with Moscow after 1990, and that Aqtobe (formerly Aktyubinsk)
+# and Aqtau (formerly Shevchenko) are the largest cities in their zones.
+# Guess that Aqtau and Aqtobe diverged in 1995, since that's the first time
+# IATA SSIM mentions a third time zone in Kazakhstan.
+
+# From Paul Eggert (2001-10-18):
+# German Iofis, ELSI, Almaty (2001-10-09) reports that Kazakhstan uses
+# RussiaAsia rules, instead of switching at 00:00 as the IATA has it.
+# Go with Shanks, who has them always using RussiaAsia rules.
+# Also go with the following claims of Shanks:
+#
+# - Kazakhstan did not observe DST in 1991.
+# - Qyzylorda switched from +5:00 to +6:00 on 1992-01-19 02:00.
+# - Oral switched from +5:00 to +4:00 in spring 1989.
+
+# <a href="http://www.kazsociety.org.uk/news/2005/03/30.htm">
+# From Kazakhstan Embassy's News Bulletin #11 (2005-03-21):
+# </a>
+# The Government of Kazakhstan passed a resolution March 15 abolishing
+# daylight saving time citing lack of economic benefits and health
+# complications coupled with a decrease in productivity.
+#
+# From Branislav Kojic (in Astana) via Gwillim Law (2005-06-28):
+# ... what happened was that the former Kazakhstan Eastern time zone
+# was "blended" with the Central zone.  Therefore, Kazakhstan now has
+# two time zones, and difference between them is one hour.  The zone
+# closer to UTC is the former Western zone (probably still called the
+# same), encompassing four provinces in the west: Aqtobe, Atyrau,
+# Mangghystau, and West Kazakhstan.  The other zone encompasses
+# everything else....  I guess that would make Kazakhstan time zones
+# de jure UTC+5 and UTC+6 respectively.
+
+#
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+#
+# Almaty (formerly Alma-Ata), representing most locations in Kazakhstan
+Zone	Asia/Almaty	5:07:48 -	LMT	1924 May  2 # or Alma-Ata
+			5:00	-	ALMT	1930 Jun 21 # Alma-Ata Time
+			6:00 RussiaAsia ALM%sT	1991
+			6:00	-	ALMT	1992
+			6:00 RussiaAsia	ALM%sT	2005 Mar 15
+			6:00	-	ALMT
+# Qyzylorda (aka Kyzylorda, Kizilorda, Kzyl-Orda, etc.)
+Zone	Asia/Qyzylorda	4:21:52 -	LMT	1924 May  2
+			4:00	-	KIZT	1930 Jun 21 # Kizilorda Time
+			5:00	-	KIZT	1981 Apr  1
+			5:00	1:00	KIZST	1981 Oct  1
+			6:00	-	KIZT	1982 Apr  1
+			5:00 RussiaAsia	KIZ%sT	1991
+			5:00	-	KIZT	1991 Dec 16 # independence
+			5:00	-	QYZT	1992 Jan 19 2:00
+			6:00 RussiaAsia	QYZ%sT	2005 Mar 15
+			6:00	-	QYZT
+# Aqtobe (aka Aktobe, formerly Akt'ubinsk)
+Zone	Asia/Aqtobe	3:48:40	-	LMT	1924 May  2
+			4:00	-	AKTT	1930 Jun 21 # Aktyubinsk Time
+			5:00	-	AKTT	1981 Apr  1
+			5:00	1:00	AKTST	1981 Oct  1
+			6:00	-	AKTT	1982 Apr  1
+			5:00 RussiaAsia	AKT%sT	1991
+			5:00	-	AKTT	1991 Dec 16 # independence
+			5:00 RussiaAsia	AQT%sT	2005 Mar 15 # Aqtobe Time
+			5:00	-	AQTT
+# Mangghystau
+# Aqtau was not founded until 1963, but it represents an inhabited region,
+# so include time stamps before 1963.
+Zone	Asia/Aqtau	3:21:04	-	LMT	1924 May  2
+			4:00	-	FORT	1930 Jun 21 # Fort Shevchenko T
+			5:00	-	FORT	1963
+			5:00	-	SHET	1981 Oct  1 # Shevchenko Time
+			6:00	-	SHET	1982 Apr  1
+			5:00 RussiaAsia	SHE%sT	1991
+			5:00	-	SHET	1991 Dec 16 # independence
+			5:00 RussiaAsia	AQT%sT	1995 Mar lastSun 2:00 # Aqtau Time
+			4:00 RussiaAsia	AQT%sT	2005 Mar 15
+			5:00	-	AQTT
+# West Kazakhstan
+Zone	Asia/Oral	3:25:24	-	LMT	1924 May  2 # or Ural'sk
+			4:00	-	URAT	1930 Jun 21 # Ural'sk time
+			5:00	-	URAT	1981 Apr  1
+			5:00	1:00	URAST	1981 Oct  1
+			6:00	-	URAT	1982 Apr  1
+			5:00 RussiaAsia	URA%sT	1989 Mar 26 2:00
+			4:00 RussiaAsia	URA%sT	1991
+			4:00	-	URAT	1991 Dec 16 # independence
+			4:00 RussiaAsia	ORA%sT	2005 Mar 15 # Oral Time
+			5:00	-	ORAT
+
+# Kyrgyzstan (Kirgizstan)
+# Transitions through 1991 are from Shanks.
+
+# From Paul Eggert (2005-08-15):
+# According to an article dated today in the Kyrgyzstan Development Gateway
+# <http://eng.gateway.kg/cgi-bin/page.pl?id=1&story_name=doc9979.shtml>
+# Kyrgyzstan is canceling the daylight saving time system.  I take the article
+# to mean that they will leave their clocks at 6 hours ahead of UTC.
+# From Malik Abdugaliev (2005-09-21):
+# Our government cancels daylight saving time 6th of August 2005.
+# From 2005-08-12 our GMT-offset is +6, w/o any daylight saving.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Kyrgyz	1992	1996	-	Apr	Sun>=7	0:00s	1:00	S
+Rule	Kyrgyz	1992	1996	-	Sep	lastSun	0:00	0	-
+Rule	Kyrgyz	1997	2005	-	Mar	lastSun	2:30	1:00	S
+Rule	Kyrgyz	1997	2004	-	Oct	lastSun	2:30	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Bishkek	4:58:24 -	LMT	1924 May  2
+			5:00	-	FRUT	1930 Jun 21 # Frunze Time
+			6:00 RussiaAsia FRU%sT	1991 Mar 31 2:00s
+			5:00	1:00	FRUST	1991 Aug 31 2:00 # independence
+			5:00	Kyrgyz	KG%sT	2005 Aug 12    # Kyrgyzstan Time
+			6:00	-	KGT
+
+###############################################################################
+
+# Korea (North and South)
+
+# From Guy Harris:
+# According to someone at the Korean Times in San Francisco,
+# Daylight Savings Time was not observed until 1987.  He did not know
+# at what time of day DST starts or ends.
+
+# From Shanks:
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	ROK	1960	only	-	May	15	0:00	1:00	D
+Rule	ROK	1960	only	-	Sep	13	0:00	0	S
+Rule	ROK	1987	1988	-	May	Sun<=14	0:00	1:00	D
+Rule	ROK	1987	1988	-	Oct	Sun<=14	0:00	0	S
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Seoul	8:27:52	-	LMT	1890
+			8:30	-	KST	1904 Dec
+			9:00	-	KST	1928
+			8:30	-	KST	1932
+			9:00	-	KST	1954 Mar 21
+			8:00	ROK	K%sT	1961 Aug 10
+			8:30	-	KST	1968 Oct
+			9:00	ROK	K%sT
+Zone	Asia/Pyongyang	8:23:00 -	LMT	1890
+			8:30	-	KST	1904 Dec
+			9:00	-	KST	1928
+			8:30	-	KST	1932
+			9:00	-	KST	1954 Mar 21
+			8:00	-	KST	1961 Aug 10
+			9:00	-	KST
+
+###############################################################################
+
+# Kuwait
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Kuwait	3:11:56 -	LMT	1950
+			3:00	-	AST
+
+# Laos
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Vientiane	6:50:24 -	LMT	1906 Jun  9 # or Viangchan
+			7:06:20	-	SMT	1911 Mar 11 0:01 # Saigon MT?
+			7:00	-	ICT	1912 May
+			8:00	-	ICT	1931 May
+			7:00	-	ICT
+
+# Lebanon
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Lebanon	1920	only	-	Mar	28	0:00	1:00	S
+Rule	Lebanon	1920	only	-	Oct	25	0:00	0	-
+Rule	Lebanon	1921	only	-	Apr	3	0:00	1:00	S
+Rule	Lebanon	1921	only	-	Oct	3	0:00	0	-
+Rule	Lebanon	1922	only	-	Mar	26	0:00	1:00	S
+Rule	Lebanon	1922	only	-	Oct	8	0:00	0	-
+Rule	Lebanon	1923	only	-	Apr	22	0:00	1:00	S
+Rule	Lebanon	1923	only	-	Sep	16	0:00	0	-
+Rule	Lebanon	1957	1961	-	May	1	0:00	1:00	S
+Rule	Lebanon	1957	1961	-	Oct	1	0:00	0	-
+Rule	Lebanon	1972	only	-	Jun	22	0:00	1:00	S
+Rule	Lebanon	1972	1977	-	Oct	1	0:00	0	-
+Rule	Lebanon	1973	1977	-	May	1	0:00	1:00	S
+Rule	Lebanon	1978	only	-	Apr	30	0:00	1:00	S
+Rule	Lebanon	1978	only	-	Sep	30	0:00	0	-
+Rule	Lebanon	1984	1987	-	May	1	0:00	1:00	S
+Rule	Lebanon	1984	1991	-	Oct	16	0:00	0	-
+Rule	Lebanon	1988	only	-	Jun	1	0:00	1:00	S
+Rule	Lebanon	1989	only	-	May	10	0:00	1:00	S
+Rule	Lebanon	1990	1992	-	May	1	0:00	1:00	S
+Rule	Lebanon	1992	only	-	Oct	4	0:00	0	-
+Rule	Lebanon	1993	max	-	Mar	lastSun	0:00	1:00	S
+Rule	Lebanon	1993	1998	-	Sep	lastSun	0:00	0	-
+Rule	Lebanon	1999	max	-	Oct	lastSun	0:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Beirut	2:22:00 -	LMT	1880
+			2:00	Lebanon	EE%sT
+
+# Malaysia
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	NBorneo	1935	1941	-	Sep	14	0:00	0:20	TS # one-Third Summer
+Rule	NBorneo	1935	1941	-	Dec	14	0:00	0	-
+#
+# peninsular Malaysia
+# The data here are taken from Mok Ly Yng (2003-10-30)
+# <http://www.math.nus.edu.sg/aslaksen/teaching/timezone.html>.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Asia/Kuala_Lumpur	6:46:46 -	LMT	1901 Jan  1
+			6:55:25	-	SMT	1905 Jun  1 # Singapore M.T.
+			7:00	-	MALT	1933 Jan  1 # Malaya Time
+			7:00	0:20	MALST	1936 Jan  1
+			7:20	-	MALT	1941 Sep  1
+			7:30	-	MALT	1942 Feb 16
+			9:00	-	JST	1945 Sep 12
+			7:30	-	MALT	1982 Jan  1
+			8:00	-	MYT	# Malaysia Time
+# Sabah & Sarawak
+# From Paul Eggert (2003-11-01):
+# The data here are mostly from Shanks, but the 1942, 1945 and 1982
+# transition dates are from Mok Ly Yng.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Asia/Kuching	7:21:20	-	LMT	1926 Mar
+			7:30	-	BORT	1933	# Borneo Time
+			8:00	NBorneo	BOR%sT	1942 Feb 16
+			9:00	-	JST	1945 Sep 12
+			8:00	-	BORT	1982 Jan  1
+			8:00	-	MYT
+
+# Maldives
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Indian/Maldives	4:54:00 -	LMT	1880	# Male
+			4:54:00	-	MMT	1960	# Male Mean Time
+			5:00	-	MVT		# Maldives Time
+
+# Mongolia
+
+# Shanks says that Mongolia has three time zones, but usno1995 and the CIA map
+# Standard Time Zones of the World (1997-01)
+# both say that it has just one.
+
+# From Oscar van Vlijmen (1999-12-11):
+# <a href="http://www.mongoliatourism.gov.mn/general.htm">
+# General Information Mongolia
+# </a> (1999-09)
+# "Time: Mongolia has two time zones. Three westernmost provinces of
+# Bayan-Ulgii, Uvs, and Hovd are one hour earlier than the capital city, and
+# the rest of the country follows the Ulaanbaatar time, which is UTC/GMT plus
+# eight hours."
+
+# From Rives McDow (1999-12-13):
+# Mongolia discontinued the use of daylight savings time in 1999; 1998
+# being the last year it was implemented.  The dates of implementation I am
+# unsure of, but most probably it was similar to Russia, except for the time
+# of implementation may have been different....
+# Some maps in the past have indicated that there was an additional time
+# zone in the eastern part of Mongolia, including the provinces of Dornod,
+# Suhbaatar, and possibly Khentij.
+
+# From Paul Eggert (1999-12-15):
+# Naming and spelling is tricky in Mongolia.
+# We'll use Hovd (also spelled Chovd and Khovd) to represent the west zone;
+# the capital of the Hovd province is sometimes called Hovd, sometimes Dund-Us,
+# and sometimes Jirgalanta (with variant spellings), but the name Hovd
+# is good enough for our purposes.
+
+# From Rives McDow (2001-05-13):
+# In addition to Mongolia starting daylight savings as reported earlier
+# (adopted DST on 2001-04-27 02:00 local time, ending 2001-09-28),
+# there are three time zones.
+#
+# Provinces [at 7:00]: Bayan-ulgii, Uvs, Khovd, Zavkhan, Govi-Altai
+# Provinces [at 8:00]: Khovsgol, Bulgan, Arkhangai, Khentii, Tov,
+#	Bayankhongor, Ovorkhangai, Dundgovi, Dornogovi, Omnogovi
+# Provinces [at 9:00]: Dornod, Sukhbaatar
+#
+# [The province of Selenge is omitted from the above lists.]
+
+# From Ganbold Ts., Ulaanbaatar (2004-04-17):
+# Daylight saving occurs at 02:00 local time last Saturday of March.
+# It will change back to normal at 02:00 local time last Saturday of
+# September.... As I remember this rule was changed in 2001.
+#
+# From Paul Eggert (2004-04-17):
+# For now, assume Rives McDow's informant got confused about Friday vs
+# Saturday, and that his 2001 dates should have 1 added to them.
+
+# From Paul Eggert (2005-07-26):
+# We have wildly conflicting information about Mongolia's time zones.
+# Bill Bonnet (2005-05-19) reports that the US Embassy in Ulaanbaatar says
+# there is only one time zone and that DST is observed, citing Microsoft
+# Windows XP as the source.  Risto Nykanen (2005-05-16) reports that
+# travelmongolia.org says there are two time zones (UTC+7, UTC+8) with no DST.
+# Oscar van Vlijmen (2005-05-20) reports that the Mongolian Embassy in
+# Washington, DC says there are two time zones, with DST observed.
+# He also found
+# <http://ubpost.mongolnews.mn/index.php?subaction=showcomments&id=1111634894&archive=&start_from=&ucat=1&>
+# which also says that there is DST, and which has a comment by "Toddius"
+# (2005-03-31 06:05 +0700) saying "Mongolia actually has 3.5 time zones.
+# The West (OLGII) is +7 GMT, most of the country is ULAT is +8 GMT
+# and some Eastern provinces are +9 GMT but Sukhbaatar Aimag is SUHK +8.5 GMT.
+# The SUKH timezone is new this year, it is one of the few things the
+# parliament passed during the tumultuous winter session."
+# For now, let's ignore this information, until we have more confirmation.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Mongol	1983	1984	-	Apr	1	0:00	1:00	S
+Rule	Mongol	1983	only	-	Oct	1	0:00	0	-
+# IATA SSIM says 1990s switches occurred at 00:00, but Shanks (1995) lists
+# them at 02:00s, and McDow says the 2001 switches also occurred at 02:00.
+# Also, IATA SSIM (1996-09) says 1996-10-25.  Go with Shanks through 1998.
+Rule	Mongol	1985	1998	-	Mar	lastSun	2:00s	1:00	S
+Rule	Mongol	1984	1998	-	Sep	lastSun	2:00s	0	-
+# IATA SSIM (1999-09) says Mongolia no longer observes DST.
+Rule	Mongol	2001	only	-	Apr	lastSat	2:00	1:00	S
+Rule	Mongol	2001	max	-	Sep	lastSat	2:00	0	-
+Rule	Mongol	2002	max	-	Mar	lastSat	2:00	1:00	S
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+# Hovd, a.k.a. Chovd, Dund-Us, Dzhargalant, Khovd, Jirgalanta
+Zone	Asia/Hovd	6:06:36 -	LMT	1905 Aug
+			6:00	-	HOVT	1978	# Hovd Time
+			7:00	Mongol	HOV%sT
+# Ulaanbaatar, a.k.a. Ulan Bataar, Ulan Bator, Urga
+Zone	Asia/Ulaanbaatar 7:07:32 -	LMT	1905 Aug
+			7:00	-	ULAT	1978	# Ulaanbaatar Time
+			8:00	Mongol	ULA%sT
+# Choibalsan, a.k.a. Bajan Tuemen, Bajan Tumen, Chojbalsan,
+# Choybalsan, Sanbejse, Tchoibalsan
+Zone	Asia/Choibalsan	7:38:00 -	LMT	1905 Aug
+			7:00	-	ULAT	1978
+			8:00	-	ULAT	1983 Apr
+			9:00	Mongol	CHO%sT	# Choibalsan Time
+
+# Nepal
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Katmandu	5:41:16 -	LMT	1920
+			5:30	-	IST	1986
+			5:45	-	NPT	# Nepal Time
+
+# Oman
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Muscat	3:54:20 -	LMT	1920
+			4:00	-	GST
+
+# Pakistan
+
+# From Rives McDow (2002-03-13):
+# I have been advised that Pakistan has decided to adopt dst on a
+# TRIAL basis for one year, starting 00:01 local time on April 7, 2002
+# and ending at 00:01 local time October 6, 2002.  This is what I was
+# told, but I believe that the actual time of change may be 00:00; the
+# 00:01 was to make it clear which day it was on.
+
+# From Paul Eggert (2002-03-15):
+# Jesper Norgaard found this URL:
+# http://www.pak.gov.pk/public/news/app/app06_dec.htm
+# (dated 2001-12-06) which says that the Cabinet adopted a scheme "to
+# advance the clocks by one hour on the night between the first
+# Saturday and Sunday of April and revert to the original position on
+# 15th October each year".  This agrees with McDow's 04-07 at 00:00,
+# but disagrees about the October transition, and makes it sound like
+# it's not on a trial basis.  Also, the "between the first Saturday
+# and Sunday of April" phrase, if taken literally, means that the
+# transition takes place at 00:00 on the first Sunday on or after 04-02.
+
+# From Paul Eggert (2003-02-09):
+# DAWN <http://www.dawn.com/2002/10/06/top13.htm> reported on 2002-10-05
+# that 2002 DST ended that day at midnight.  Go with McDow for now.
+
+# From Steffen Thorsen (2003-03-14):
+# According to http://www.dawn.com/2003/03/07/top15.htm
+# there will be no DST in Pakistan this year:
+#
+# ISLAMABAD, March 6: Information and Media Development Minister Sheikh
+# Rashid Ahmed on Thursday said the cabinet had reversed a previous
+# decision to advance clocks by one hour in summer and put them back by
+# one hour in winter with the aim of saving light hours and energy.
+#
+# The minister told a news conference that the experiment had rather
+# shown 8 per cent higher consumption of electricity.
+
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule Pakistan	2002	only	-	Apr	Sun>=2	0:01	1:00	S
+Rule Pakistan	2002	only	-	Oct	Sun>=2	0:01	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Karachi	4:28:12 -	LMT	1907
+			5:30	-	IST	1942 Sep
+			5:30	1:00	IST	1945 Oct 15
+			5:30	-	IST	1951 Sep 30
+			5:00	-	KART	1971 Mar 26 # Karachi Time
+			5:00 Pakistan	PK%sT	# Pakistan Time
+
+# Palestine
+
+# From Amos Shapir (1998-02-15):
+#
+# From 1917 until 1948-05-15, all of Palestine, including the parts now
+# known as the Gaza Strip and the West Bank, was under British rule.
+# Therefore the rules given for Israel for that period, apply there too...
+#
+# The Gaza Strip was under Egyptian rule between 1948-05-15 until 1967-06-05
+# (except a short occupation by Israel from 1956-11 till 1957-03, but no
+# time zone was affected then).  It was never formally annexed to Egypt,
+# though.
+#
+# The rest of Palestine was under Jordanian rule at that time, formally
+# annexed in 1950 as the West Bank (and the word "Trans" was dropped from
+# the country's previous name of "the Hashemite Kingdom of the
+# Trans-Jordan").  So the rules for Jordan for that time apply.  Major
+# towns in that area are Nablus (Shchem), El-Halil (Hebron), Ramallah, and
+# East Jerusalem.
+#
+# Both areas were occupied by Israel in June 1967, but not annexed (except
+# for East Jerusalem).  They were on Israel time since then; there might
+# have been a Military Governor's order about time zones, but I'm not aware
+# of any (such orders may have been issued semi-annually whenever summer
+# time was in effect, but maybe the legal aspect of time was just neglected).
+#
+# The Palestinian Authority was established in 1993, and got hold of most
+# towns in the West Bank and Gaza by 1995.  I know that in order to
+# demonstrate...independence, they have been switching to
+# summer time and back on a different schedule than Israel's, but I don't
+# know when this was started, or what algorithm is used (most likely the
+# Jordanian one).
+#
+# To summarize, the table should probably look something like that:
+#
+# Area \ when | 1918-1947 | 1948-1967 | 1967-1995 | 1996-
+# ------------+-----------+-----------+-----------+-----------
+# Israel      | Zion      | Zion      | Zion      | Zion
+# West bank   | Zion      | Jordan    | Zion      | Jordan
+# Gaza        | Zion      | Egypt     | Zion      | Jordan
+#
+# I guess more info may be available from the PA's web page (if/when they
+# have one).
+
+# From Paul Eggert (1998-02-25):
+# Shanks writes that Gaza did not observe DST until 1957, but we'll go
+# with Shapir and assume that it observed DST from 1940 through 1947,
+# and that it used Jordanian rules starting in 1996.
+# We don't yet need a separate entry for the West Bank, since
+# the only differences between it and Gaza that we know about
+# occurred before our cutoff date of 1970.
+# However, as we get more information, we may need to add entries
+# for parts of the West Bank as they transitioned from Israel's rules
+# to Palestine's rules.  If you have more info about this, please
+# send it to tz@elsie.nci.nih.gov for incorporation into future editions.
+
+# From IINS News Service - Israel - 1998-03-23 10:38:07 Israel time,
+# forwarded by Ephraim Silverberg:
+#
+# Despite the fact that Israel changed over to daylight savings time
+# last week, the PLO Authority (PA) has decided not to turn its clocks
+# one-hour forward at this time.  As a sign of independence from Israeli rule,
+# the PA has decided to implement DST in April.
+
+# From Paul Eggert (1999-09-20):
+# Daoud Kuttab writes in
+# <a href="http://www.jpost.com/com/Archive/22.Apr.1999/Opinion/Article-2.html">
+# Holiday havoc
+# </a> (Jerusalem Post, 1999-04-22) that
+# the Palestinian National Authority changed to DST on 1999-04-15.
+# I vaguely recall that they switch back in October (sorry, forgot the source).
+# For now, let's assume that the spring switch was at 24:00,
+# and that they switch at 0:00 on the 3rd Fridays of April and October.
+
+# From Paul Eggert (2005-11-22):
+# Starting 2004 transitions are from Steffen Thorsen's web site timeanddate.com.
+
+# The rules for Egypt are stolen from the `africa' file.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule EgyptAsia	1957	only	-	May	10	0:00	1:00	S
+Rule EgyptAsia	1957	1958	-	Oct	 1	0:00	0	-
+Rule EgyptAsia	1958	only	-	May	 1	0:00	1:00	S
+Rule EgyptAsia	1959	1967	-	May	 1	1:00	1:00	S
+Rule EgyptAsia	1959	1965	-	Sep	30	3:00	0	-
+Rule EgyptAsia	1966	only	-	Oct	 1	3:00	0	-
+
+Rule Palestine	1999	max	-	Apr	Fri>=15	0:00	1:00	S
+Rule Palestine	1999	2003	-	Oct	Fri>=15	0:00	0	-
+Rule Palestine	2004	only	-	Oct	 1	1:00	0	-
+Rule Palestine	2005	max	-	Oct	 4	1:00	0	-
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Gaza	2:17:52	-	LMT	1900 Oct
+			2:00	Zion	EET	1948 May 15
+			2:00 EgyptAsia	EE%sT	1967 Jun  5
+			2:00	Zion	I%sT	1996
+			2:00	Jordan	EE%sT	1999
+			2:00 Palestine	EE%sT
+
+# Paracel Is
+# no information
+
+# Philippines
+# On 1844-08-16, Narciso Claveria, governor-general of the
+# Philippines, issued a proclamation announcing that 1844-12-30 was to
+# be immediately followed by 1845-01-01.  Robert H. van Gent has a
+# transcript of the decree in <http://www.phys.uu.nl/~vgent/idl/idl.htm>.
+# The rest of this data is from Shanks.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Phil	1936	only	-	Nov	1	0:00	1:00	S
+Rule	Phil	1937	only	-	Feb	1	0:00	0	-
+Rule	Phil	1954	only	-	Apr	12	0:00	1:00	S
+Rule	Phil	1954	only	-	Jul	1	0:00	0	-
+Rule	Phil	1978	only	-	Mar	22	0:00	1:00	S
+Rule	Phil	1978	only	-	Sep	21	0:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Manila	-15:56:00 -	LMT	1844 Dec 31
+			8:04:00 -	LMT	1899 May 11
+			8:00	Phil	PH%sT	1942 May
+			9:00	-	JST	1944 Nov
+			8:00	Phil	PH%sT
+
+# Qatar
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Qatar	3:26:08 -	LMT	1920	# Al Dawhah / Doha
+			4:00	-	GST	1972 Jun
+			3:00	-	AST
+
+# Saudi Arabia
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Riyadh	3:06:52 -	LMT	1950
+			3:00	-	AST
+
+# Singapore
+# The data here are taken from Mok Ly Yng (2003-10-30)
+# <http://www.math.nus.edu.sg/aslaksen/teaching/timezone.html>.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Singapore	6:55:25 -	LMT	1901 Jan  1
+			6:55:25	-	SMT	1905 Jun  1 # Singapore M.T.
+			7:00	-	MALT	1933 Jan  1 # Malaya Time
+			7:00	0:20	MALST	1936 Jan  1
+			7:20	-	MALT	1941 Sep  1
+			7:30	-	MALT	1942 Feb 16
+			9:00	-	JST	1945 Sep 12
+			7:30	-	MALT	1965 Aug  9 # independence
+			7:30	-	SGT	1982 Jan  1 # Singapore Time
+			8:00	-	SGT
+
+# Spratly Is
+# no information
+
+# Sri Lanka
+# From Paul Eggert (1996-09-03):
+# "Sri Lanka advances clock by an hour to avoid blackout"
+# (www.virtual-pc.com/lankaweb/news/items/240596-2.html, 1996-05-24,
+# no longer available as of 1999-08-17)
+# reported ``the country's standard time will be put forward by one hour at
+# midnight Friday (1830 GMT) `in the light of the present power crisis'.''
+#
+# From Dharmasiri Senanayake, Sri Lanka Media Minister (1996-10-24), as quoted
+# by Shamindra in
+# <a href="news:54rka5$m5h@mtinsc01-mgt.ops.worldnet.att.net">
+# Daily News - Hot News Section (1996-10-26)
+# </a>:
+# With effect from 12.30 a.m. on 26th October 1996
+# Sri Lanka will be six (06) hours ahead of GMT.
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Colombo	5:19:24 -	LMT	1880
+			5:19:32	-	MMT	1906	# Moratuwa Mean Time
+			5:30	-	IST	1942 Jan  5
+			5:30	0:30	IHST	1942 Sep
+			5:30	1:00	IST	1945 Oct 16 2:00
+			5:30	-	IST	1996 May 25 0:00
+			6:30	-	LKT	1996 Oct 26 0:30
+			6:00	-	LKT
+
+# Syria
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Syria	1920	1923	-	Apr	Sun>=15	2:00	1:00	S
+Rule	Syria	1920	1923	-	Oct	Sun>=1	2:00	0	-
+Rule	Syria	1962	only	-	Apr	29	2:00	1:00	S
+Rule	Syria	1962	only	-	Oct	1	2:00	0	-
+Rule	Syria	1963	1965	-	May	1	2:00	1:00	S
+Rule	Syria	1963	only	-	Sep	30	2:00	0	-
+Rule	Syria	1964	only	-	Oct	1	2:00	0	-
+Rule	Syria	1965	only	-	Sep	30	2:00	0	-
+Rule	Syria	1966	only	-	Apr	24	2:00	1:00	S
+Rule	Syria	1966	1976	-	Oct	1	2:00	0	-
+Rule	Syria	1967	1978	-	May	1	2:00	1:00	S
+Rule	Syria	1977	1978	-	Sep	1	2:00	0	-
+Rule	Syria	1983	1984	-	Apr	9	2:00	1:00	S
+Rule	Syria	1983	1984	-	Oct	1	2:00	0	-
+Rule	Syria	1986	only	-	Feb	16	2:00	1:00	S
+Rule	Syria	1986	only	-	Oct	9	2:00	0	-
+Rule	Syria	1987	only	-	Mar	1	2:00	1:00	S
+Rule	Syria	1987	1988	-	Oct	31	2:00	0	-
+Rule	Syria	1988	only	-	Mar	15	2:00	1:00	S
+Rule	Syria	1989	only	-	Mar	31	2:00	1:00	S
+Rule	Syria	1989	only	-	Oct	1	2:00	0	-
+Rule	Syria	1990	only	-	Apr	1	2:00	1:00	S
+Rule	Syria	1990	only	-	Sep	30	2:00	0	-
+Rule	Syria	1991	only	-	Apr	 1	0:00	1:00	S
+Rule	Syria	1991	1992	-	Oct	 1	0:00	0	-
+Rule	Syria	1992	only	-	Apr	 8	0:00	1:00	S
+Rule	Syria	1993	only	-	Mar	26	0:00	1:00	S
+Rule	Syria	1993	only	-	Sep	25	0:00	0	-
+# IATA SSIM (1998-02) says 1998-04-02;
+# (1998-09) says 1999-03-29 and 1999-09-29; (1999-02) says 1999-04-02,
+# 2000-04-02, and 2001-04-02; (1999-09) says 2000-03-31 and 2001-03-31;
+# ignore all these claims and go with Shanks.
+Rule	Syria	1994	1996	-	Apr	 1	0:00	1:00	S
+Rule	Syria	1994	max	-	Oct	 1	0:00	0	-
+Rule	Syria	1997	1998	-	Mar	lastMon	0:00	1:00	S
+Rule	Syria	1999	max	-	Apr	 1	0:00	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Damascus	2:25:12 -	LMT	1920	# Dimashq
+			2:00	Syria	EE%sT
+
+# Tajikistan
+# From Shanks.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Dushanbe	4:35:12 -	LMT	1924 May  2
+			5:00	-	DUST	1930 Jun 21 # Dushanbe Time
+			6:00 RussiaAsia DUS%sT	1991 Mar 31 2:00s
+			5:00	1:00	DUSST	1991 Sep  9 2:00s
+			5:00	-	TJT		    # Tajikistan Time
+
+# Thailand
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Bangkok	6:42:04	-	LMT	1880
+			6:42:04	-	BMT	1920 Apr # Bangkok Mean Time
+			7:00	-	ICT
+
+# Turkmenistan
+# From Shanks.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Ashgabat	3:53:32 -	LMT	1924 May  2 # or Ashkhabad
+			4:00	-	ASHT	1930 Jun 21 # Ashkhabad Time
+			5:00 RussiaAsia	ASH%sT	1991 Mar 31 2:00
+			4:00 RussiaAsia	ASH%sT	1991 Oct 27 # independence
+			4:00 RussiaAsia TM%sT	1992 Jan 19 2:00
+			5:00	-	TMT
+
+# United Arab Emirates
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Dubai	3:41:12 -	LMT	1920
+			4:00	-	GST
+
+# Uzbekistan
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Samarkand	4:27:12 -	LMT	1924 May  2
+			4:00	-	SAMT	1930 Jun 21 # Samarkand Time
+			5:00	-	SAMT	1981 Apr  1
+			5:00	1:00	SAMST	1981 Oct  1
+			6:00 RussiaAsia TAS%sT	1991 Mar 31 2:00 # Tashkent Time
+			5:00 RussiaAsia	TAS%sT	1991 Sep  1 # independence
+			5:00 RussiaAsia	UZ%sT	1992
+			5:00 RussiaAsia	UZ%sT	1993
+			5:00	-	UZT
+Zone	Asia/Tashkent	4:37:12 -	LMT	1924 May  2
+			5:00	-	TAST	1930 Jun 21 # Tashkent Time
+			6:00 RussiaAsia TAS%sT	1991 Mar 31 2:00s
+			5:00 RussiaAsia	TAS%sT	1991 Sep  1 # independence
+			5:00 RussiaAsia	UZ%sT	1992
+			5:00 RussiaAsia	UZ%sT	1993
+			5:00	-	UZT
+
+# Vietnam
+# From Paul Eggert (1993-11-18):
+# Saigon's official name is Thanh-Pho Ho Chi Minh, but it's too long.
+# We'll stick with the traditional name for now.
+# From Shanks:
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Saigon	7:06:40 -	LMT	1906 Jun  9
+			7:06:20	-	SMT	1911 Mar 11 0:01 # Saigon MT?
+			7:00	-	ICT	1912 May
+			8:00	-	ICT	1931 May
+			7:00	-	ICT
+
+# Yemen
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Aden	3:00:48	-	LMT	1950
+			3:00	-	AST
diff --git a/JodaTime/src/java/org/joda/time/tz/src/australasia b/JodaTime/src/java/org/joda/time/tz/src/australasia
index f5addd40f..6cf976101 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/australasia
+++ b/JodaTime/src/java/org/joda/time/tz/src/australasia
@@ -1,1399 +1,1401 @@
-# @(#)australasia	7.77
-# This file also includes Pacific islands.
-
-# Notes are at the end of this file
-
-###############################################################################
-
-# Australia
-
-# Please see the notes below for the controversy about "EST" versus "AEST" etc.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Aus	1917	only	-	Jan	 1	0:01	1:00	-
-Rule	Aus	1917	only	-	Mar	25	2:00	0	-
-Rule	Aus	1942	only	-	Jan	 1	2:00	1:00	-
-Rule	Aus	1942	only	-	Mar	29	2:00	0	-
-Rule	Aus	1942	only	-	Sep	27	2:00	1:00	-
-Rule	Aus	1943	1944	-	Mar	lastSun	2:00	0	-
-Rule	Aus	1943	only	-	Oct	 3	2:00	1:00	-
-# Go with Whitman and the Australian National Standards Commission, which
-# says W Australia didn't use DST in 1943/1944.  Ignore Whitman's claim that
-# 1944/1945 was just like 1943/1944.
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-# Northern Territory
-Zone Australia/Darwin	 8:43:20 -	LMT	1895 Feb
-			 9:00	-	CST	1899 May
-			 9:30	Aus	CST
-# Western Australia
-Zone Australia/Perth	 7:43:24 -	LMT	1895 Dec
-			 8:00	Aus	WST	1943 Jul
-			 8:00	-	WST	1974 Oct lastSun 2:00s
-			 8:00	1:00	WST	1975 Mar Sun>=1 2:00s
-			 8:00	-	WST	1983 Oct lastSun 2:00s
-			 8:00	1:00	WST	1984 Mar Sun>=1 2:00s
-			 8:00	-	WST	1991 Nov 17 2:00s
-			 8:00	1:00	WST	1992 Mar Sun>=1 2:00s
-			 8:00	-	WST
-# Queensland
-#
-# From Alex Livingston (1996-11-01):
-# I have heard or read more than once that some resort islands off the coast
-# of Queensland chose to keep observing daylight-saving time even after
-# Queensland ceased to.
-#
-# From Paul Eggert (1996-11-22):
-# IATA SSIM (1993-02/1994-09) say that the Holiday Islands (Hayman, Lindeman,
-# Hamilton) observed DST for two years after the rest of Queensland stopped.
-# Hamilton is the largest, but there is also a Hamilton in Victoria,
-# so use Lindeman.
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	AQ	1971	only	-	Oct	lastSun	2:00s	1:00	-
-Rule	AQ	1972	only	-	Feb	lastSun	2:00s	0	-
-Rule	AQ	1989	1991	-	Oct	lastSun	2:00s	1:00	-
-Rule	AQ	1990	1992	-	Mar	Sun>=1	2:00s	0	-
-Rule	Holiday	1992	1993	-	Oct	lastSun	2:00s	1:00	-
-Rule	Holiday	1993	1994	-	Mar	Sun>=1	2:00s	0	-
-Zone Australia/Brisbane	10:12:08 -	LMT	1895
-			10:00	Aus	EST	1971
-			10:00	AQ	EST
-Zone Australia/Lindeman  9:55:56 -	LMT	1895
-			10:00	Aus	EST	1971
-			10:00	AQ	EST	1992 Jul
-			10:00	Holiday	EST
-
-# South Australia
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	AS	1971	1985	-	Oct	lastSun	2:00s	1:00	-
-Rule	AS	1986	only	-	Oct	19	2:00s	1:00	-
-Rule	AS	1987	max	-	Oct	lastSun	2:00s	1:00	-
-Rule	AS	1972	only	-	Feb	27	2:00s	0	-
-Rule	AS	1973	1985	-	Mar	Sun>=1	2:00s	0	-
-Rule	AS	1986	1989	-	Mar	Sun>=15	2:00s	0	-
-Rule	AS	1990	only	-	Mar	Sun>=18	2:00s	0	-
-Rule	AS	1991	only	-	Mar	Sun>=1	2:00s	0	-
-Rule	AS	1992	only	-	Mar	Sun>=18	2:00s	0	-
-Rule	AS	1993	only	-	Mar	Sun>=1	2:00s	0	-
-Rule	AS	1994	only	-	Mar	Sun>=18	2:00s	0	-
-Rule	AS	1995	2005	-	Mar	lastSun	2:00s	0	-
-Rule	AS	2006	only	-	Apr	Sun>=1	2:00s	0	-
-Rule	AS	2007	max	-	Mar	lastSun	2:00s	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Australia/Adelaide	9:14:20 -	LMT	1895 Feb
-			9:00	-	CST	1899 May
-			9:30	Aus	CST	1971
-			9:30	AS	CST
-
-# Tasmania
-#
-# From Paul Eggert (2005-08-16):
-# <http://www.bom.gov.au/climate/averages/tables/dst_times.shtml>
-# says King Island didn't observe DST from WWII until late 1971.
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	AT	1967	only	-	Oct	Sun>=1	2:00s	1:00	-
-Rule	AT	1968	only	-	Mar	lastSun	2:00s	0	-
-Rule	AT	1968	1985	-	Oct	lastSun	2:00s	1:00	-
-Rule	AT	1969	1971	-	Mar	Sun>=8	2:00s	0	-
-Rule	AT	1972	only	-	Feb	lastSun	2:00s	0	-
-Rule	AT	1973	1981	-	Mar	Sun>=1	2:00s	0	-
-Rule	AT	1982	1983	-	Mar	lastSun	2:00s	0	-
-Rule	AT	1984	1986	-	Mar	Sun>=1	2:00s	0	-
-Rule	AT	1986	only	-	Oct	Sun>=15	2:00s	1:00	-
-Rule	AT	1987	1990	-	Mar	Sun>=15	2:00s	0	-
-Rule	AT	1987	only	-	Oct	Sun>=22	2:00s	1:00	-
-Rule	AT	1988	1990	-	Oct	lastSun	2:00s	1:00	-
-Rule	AT	1991	1999	-	Oct	Sun>=1	2:00s	1:00	-
-Rule	AT	1991	2005	-	Mar	lastSun	2:00s	0	-
-Rule	AT	2000	only	-	Aug	lastSun	2:00s	1:00	-
-Rule	AT	2001	max	-	Oct	Sun>=1	2:00s	1:00	-
-Rule	AT	2006	only	-	Apr	Sun>=1	2:00s	0	-
-Rule	AT	2007	max	-	Mar	lastSun	2:00s	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Australia/Hobart	9:49:16	-	LMT	1895 Sep
-			10:00	-	EST	1916 Oct 1 2:00
-			10:00	1:00	EST	1917 Feb
-			10:00	Aus	EST	1967
-			10:00	AT	EST
-Zone Australia/Currie	9:35:28	-	LMT	1895 Sep
-			10:00	-	EST	1916 Oct 1 2:00
-			10:00	1:00	EST	1917 Feb
-			10:00	Aus	EST	1971 Jul
-			10:00	AT	EST
-
-# Victoria
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	AV	1971	1985	-	Oct	lastSun	2:00s	1:00	-
-Rule	AV	1972	only	-	Feb	lastSun	2:00s	0	-
-Rule	AV	1973	1985	-	Mar	Sun>=1	2:00s	0	-
-Rule	AV	1986	1990	-	Mar	Sun>=15	2:00s	0	-
-Rule	AV	1986	1987	-	Oct	Sun>=15	2:00s	1:00	-
-Rule	AV	1988	1999	-	Oct	lastSun	2:00s	1:00	-
-Rule	AV	1991	1994	-	Mar	Sun>=1	2:00s	0	-
-Rule	AV	1995	2005	-	Mar	lastSun	2:00s	0	-
-Rule	AV	2000	only	-	Aug	lastSun	2:00s	1:00	-
-Rule	AV	2001	max	-	Oct	lastSun	2:00s	1:00	-
-Rule	AV	2006	only	-	Apr	Sun>=1	2:00s	0	-
-Rule	AV	2007	max	-	Mar	lastSun	2:00s	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Australia/Melbourne 9:39:52 -	LMT	1895 Feb
-			10:00	Aus	EST	1971
-			10:00	AV	EST
-
-# New South Wales
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	AN	1971	1985	-	Oct	lastSun	2:00s	1:00	-
-Rule	AN	1972	only	-	Feb	27	2:00s	0	-
-Rule	AN	1973	1981	-	Mar	Sun>=1	2:00s	0	-
-Rule	AN	1982	only	-	Apr	Sun>=1	2:00s	0	-
-Rule	AN	1983	1985	-	Mar	Sun>=1	2:00s	0	-
-Rule	AN	1986	1989	-	Mar	Sun>=15	2:00s	0	-
-Rule	AN	1986	only	-	Oct	19	2:00s	1:00	-
-Rule	AN	1987	1999	-	Oct	lastSun	2:00s	1:00	-
-Rule	AN	1990	1995	-	Mar	Sun>=1	2:00s	0	-
-Rule	AN	1996	2005	-	Mar	lastSun	2:00s	0	-
-Rule	AN	2000	only	-	Aug	lastSun	2:00s	1:00	-
-Rule	AN	2001	max	-	Oct	lastSun	2:00s	1:00	-
-Rule	AN	2006	only	-	Apr	Sun>=1	2:00s	0	-
-Rule	AN	2007	max	-	Mar	lastSun	2:00s	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Australia/Sydney	10:04:52 -	LMT	1895 Feb
-			10:00	Aus	EST	1971
-			10:00	AN	EST
-Zone Australia/Broken_Hill 9:25:48 -	LMT	1895 Feb
-			10:00	-	EST	1896 Aug 23
-			9:00	-	CST	1899 May
-			9:30	Aus	CST	1971
-			9:30	AN	CST	2000
-			9:30	AS	CST
-
-# Lord Howe Island
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	LH	1981	1984	-	Oct	lastSun	2:00	1:00	-
-Rule	LH	1982	1985	-	Mar	Sun>=1	2:00	0	-
-Rule	LH	1985	only	-	Oct	lastSun	2:00	0:30	-
-Rule	LH	1986	1989	-	Mar	Sun>=15	2:00	0	-
-Rule	LH	1986	only	-	Oct	19	2:00	0:30	-
-Rule	LH	1987	1999	-	Oct	lastSun	2:00	0:30	-
-Rule	LH	1990	1995	-	Mar	Sun>=1	2:00	0	-
-Rule	LH	1996	2005	-	Mar	lastSun	2:00	0	-
-Rule	LH	2000	only	-	Aug	lastSun	2:00	0:30	-
-Rule	LH	2001	max	-	Oct	lastSun	2:00	0:30	-
-Rule	LH	2006	only	-	Apr	Sun>=1	2:00	0	-
-Rule	LH	2007	max	-	Mar	lastSun	2:00	0	-
-Zone Australia/Lord_Howe 10:36:20 -	LMT	1895 Feb
-			10:00	-	EST	1981 Mar
-			10:30	LH	LHST
-
-# Australian miscellany
-#
-# Ashmore Is, Cartier
-# no indigenous inhabitants; only seasonal caretakers
-# like Australia/Perth, says Turner
-#
-# Coral Sea Is
-# no indigenous inhabitants; only meteorologists
-# no information
-#
-# Macquarie
-# permanent occupation (scientific station) since 1948;
-# sealing and penguin oil station operated 1888/1917
-# like Australia/Hobart, says Turner
-
-# Christmas
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Indian/Christmas	7:02:52 -	LMT	1895 Feb
-			7:00	-	CXT	# Christmas Island Time
-
-# Cook Is
-# From Shanks:
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Cook	1978	only	-	Nov	12	0:00	0:30	HS
-Rule	Cook	1979	1991	-	Mar	Sun>=1	0:00	0	-
-Rule	Cook	1979	1990	-	Oct	lastSun	0:00	0:30	HS
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Pacific/Rarotonga	-10:39:04 -	LMT	1901		# Avarua
-			-10:30	-	CKT	1978 Nov 12	# Cook Is Time
-			-10:00	Cook	CK%sT
-
-# Cocos
-# These islands were ruled by the Ross family from about 1830 to 1978.
-# We don't know when standard time was introduced; for now, we guess 1900.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Indian/Cocos	6:27:40	-	LMT	1900
-			6:30	-	CCT	# Cocos Islands Time
-
-# Fiji
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Fiji	1998	1999	-	Nov	Sun>=1	2:00	1:00	S
-Rule	Fiji	1999	2000	-	Feb	lastSun	3:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Pacific/Fiji	11:53:40 -	LMT	1915 Oct 26	# Suva
-			12:00	Fiji	FJ%sT	# Fiji Time
-
-# French Polynesia
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Pacific/Gambier	 -8:59:48 -	LMT	1912 Oct	# Rikitea
-			 -9:00	-	GAMT	# Gambier Time
-Zone	Pacific/Marquesas -9:18:00 -	LMT	1912 Oct
-			 -9:30	-	MART	# Marquesas Time
-Zone	Pacific/Tahiti	 -9:58:16 -	LMT	1912 Oct	# Papeete
-			-10:00	-	TAHT	# Tahiti Time
-# Clipperton (near North America) is administered from French Polynesia;
-# it is uninhabited.
-
-# Guam
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Pacific/Guam	-14:21:00 -	LMT	1844 Dec 31
-			 9:39:00 -	LMT	1901		# Agana
-			10:00	-	GST	2000 Dec 23	# Guam
-			10:00	-	ChST	# Chamorro Standard Time
-
-# Kiribati
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Pacific/Tarawa	 11:32:04 -	LMT	1901		# Bairiki
-			 12:00	-	GILT		 # Gilbert Is Time
-Zone Pacific/Enderbury	-11:24:20 -	LMT	1901
-			-12:00	-	PHOT	1979 Oct # Phoenix Is Time
-			-11:00	-	PHOT	1995
-			 13:00	-	PHOT
-Zone Pacific/Kiritimati	-10:29:20 -	LMT	1901
-			-10:40	-	LINT	1979 Oct # Line Is Time
-			-10:00	-	LINT	1995
-			 14:00	-	LINT
-
-# N Mariana Is
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Pacific/Saipan	-14:17:00 -	LMT	1844 Dec 31
-			 9:43:00 -	LMT	1901
-			 9:00	-	MPT	1969 Oct # N Mariana Is Time
-			10:00	-	MPT	2000 Dec 23
-			10:00	-	ChST	# Chamorro Standard Time
-
-# Marshall Is
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Pacific/Majuro	11:24:48 -	LMT	1901
-			11:00	-	MHT	1969 Oct # Marshall Islands Time
-			12:00	-	MHT
-Zone Pacific/Kwajalein	11:09:20 -	LMT	1901
-			11:00	-	MHT	1969 Oct
-			-12:00	-	KWAT	1993 Aug 20	# Kwajalein Time
-			12:00	-	MHT
-
-# Micronesia
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Pacific/Truk	10:07:08 -	LMT	1901
-			10:00	-	TRUT			# Truk Time
-Zone Pacific/Ponape	10:32:52 -	LMT	1901		# Kolonia
-			11:00	-	PONT			# Ponape Time
-Zone Pacific/Kosrae	10:51:56 -	LMT	1901
-			11:00	-	KOST	1969 Oct	# Kosrae Time
-			12:00	-	KOST	1999
-			11:00	-	KOST
-
-# Nauru
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Pacific/Nauru	11:07:40 -	LMT	1921 Jan 15	# Uaobe
-			11:30	-	NRT	1942 Mar 15	# Nauru Time
-			9:00	-	JST	1944 Aug 15
-			11:30	-	NRT	1979 May
-			12:00	-	NRT
-
-# New Caledonia
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	NC	1977	1978	-	Dec	Sun>=1	0:00	1:00	S
-Rule	NC	1978	1979	-	Feb	27	0:00	0	-
-Rule	NC	1996	only	-	Dec	 1	2:00s	1:00	S
-# Shanks says the following was at 2:00; go with IATA.
-Rule	NC	1997	only	-	Mar	 2	2:00s	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Pacific/Noumea	11:05:48 -	LMT	1912 Jan 13
-			11:00	NC	NC%sT
-
-
-###############################################################################
-
-# New Zealand
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	NZ	1927	only	-	Nov	 6	2:00	1:00	S
-Rule	NZ	1928	only	-	Mar	 4	2:00	0	M
-Rule	NZ	1928	1933	-	Oct	Sun>=8	2:00	0:30	S
-Rule	NZ	1929	1933	-	Mar	Sun>=15	2:00	0	M
-Rule	NZ	1934	1940	-	Apr	lastSun	2:00	0	M
-Rule	NZ	1934	1940	-	Sep	lastSun	2:00	0:30	S
-Rule	NZ	1946	only	-	Jan	 1	0:00	0	S
-# Since 1957 Chatham has been 45 minutes ahead of NZ, but there's no
-# convenient notation for this so we must duplicate the Rule lines.
-Rule	NZ	1974	only	-	Nov	Sun>=1	2:00s	1:00	D
-Rule	Chatham	1974	only	-	Nov	Sun>=1	2:45s	1:00	D
-Rule	NZ	1975	only	-	Feb	lastSun	2:00s	0	S
-Rule	Chatham	1975	only	-	Feb	lastSun	2:45s	0	S
-Rule	NZ	1975	1988	-	Oct	lastSun	2:00s	1:00	D
-Rule	Chatham	1975	1988	-	Oct	lastSun	2:45s	1:00	D
-Rule	NZ	1976	1989	-	Mar	Sun>=1	2:00s	0	S
-Rule	Chatham	1976	1989	-	Mar	Sun>=1	2:45s	0	S
-Rule	NZ	1989	only	-	Oct	Sun>=8	2:00s	1:00	D
-Rule	Chatham	1989	only	-	Oct	Sun>=8	2:45s	1:00	D
-Rule	NZ	1990	max	-	Oct	Sun>=1	2:00s	1:00	D
-Rule	Chatham	1990	max	-	Oct	Sun>=1	2:45s	1:00	D
-Rule	NZ	1990	max	-	Mar	Sun>=15	2:00s	0	S
-Rule	Chatham	1990	max	-	Mar	Sun>=15	2:45s	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Pacific/Auckland	11:39:04 -	LMT	1868 Nov  2
-			11:30	NZ	NZ%sT	1946 Jan  1
-			12:00	NZ	NZ%sT
-Zone Pacific/Chatham	12:13:48 -	LMT	1957 Jan  1
-			12:45	Chatham	CHA%sT
-
-
-# Auckland Is
-# uninhabited; Maori and Moriori, colonial settlers, pastoralists, sealers,
-# and scientific personnel have wintered
-
-# Campbell I
-# minor whaling stations operated 1909/1914
-# scientific station operated 1941/1995;
-# previously whalers, sealers, pastoralists, and scientific personnel wintered
-# was probably like Pacific/Auckland
-
-###############################################################################
-
-
-# Niue
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Pacific/Niue	-11:19:40 -	LMT	1901		# Alofi
-			-11:20	-	NUT	1951	# Niue Time
-			-11:30	-	NUT	1978 Oct 1
-			-11:00	-	NUT
-
-# Norfolk
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Pacific/Norfolk	11:11:52 -	LMT	1901		# Kingston
-			11:12	-	NMT	1951	# Norfolk Mean Time
-			11:30	-	NFT		# Norfolk Time
-
-# Palau (Belau)
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Pacific/Palau	8:57:56 -	LMT	1901		# Koror
-			9:00	-	PWT	# Palau Time
-
-# Papua New Guinea
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Pacific/Port_Moresby 9:48:40 -	LMT	1880
-			9:48:32	-	PMMT	1895	# Port Moresby Mean Time
-			10:00	-	PGT		# Papua New Guinea Time
-
-# Pitcairn
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Pacific/Pitcairn	-8:40:20 -	LMT	1901		# Adamstown
-			-8:30	-	PNT	1998 Apr 27 00:00
-			-8:00	-	PST	# Pitcairn Standard Time
-
-# American Samoa
-Zone Pacific/Pago_Pago	 12:37:12 -	LMT	1879 Jul  5
-			-11:22:48 -	LMT	1911
-			-11:30	-	SAMT	1950		# Samoa Time
-			-11:00	-	NST	1967 Apr	# N=Nome
-			-11:00	-	BST	1983 Nov 30	# B=Bering
-			-11:00	-	SST			# S=Samoa
-
-# Samoa
-Zone Pacific/Apia	 12:33:04 -	LMT	1879 Jul  5
-			-11:26:56 -	LMT	1911
-			-11:30	-	SAMT	1950		# Samoa Time
-			-11:00	-	WST			# Samoa Time
-
-# Solomon Is
-# excludes Bougainville, for which see Papua New Guinea
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Pacific/Guadalcanal 10:39:48 -	LMT	1912 Oct	# Honiara
-			11:00	-	SBT	# Solomon Is Time
-
-# Tokelau Is
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Pacific/Fakaofo	-11:24:56 -	LMT	1901
-			-10:00	-	TKT	# Tokelau Time
-
-# Tonga
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Tonga	1999	only	-	Oct	 7	2:00s	1:00	S
-Rule	Tonga	2000	only	-	Mar	19	2:00s	0	-
-Rule	Tonga	2000	2001	-	Nov	Sun>=1	2:00	1:00	S
-Rule	Tonga	2001	2002	-	Jan	lastSun	2:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Pacific/Tongatapu	12:19:20 -	LMT	1901
-			12:20	-	TOT	1941 # Tonga Time
-			13:00	-	TOT	1999
-			13:00	Tonga	TO%sT
-
-# Tuvalu
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Pacific/Funafuti	11:56:52 -	LMT	1901
-			12:00	-	TVT	# Tuvalu Time
-
-
-# US minor outlying islands
-
-# Howland, Baker
-# uninhabited since World War II
-# no information; was probably like Pacific/Pago_Pago
-
-# Jarvis
-# uninhabited since 1958
-# no information; was probably like Pacific/Kiritimati
-
-# Johnston
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Pacific/Johnston	-10:00	-	HST
-
-# Kingman
-# uninhabited
-
-# Midway
-#
-# From Mark Brader (2005-01-23):
-# [Fallacies and Fantasies of Air Transport History, by R.E.G. Davies,
-# published 1994 by Paladwr Press, McLean, VA, USA; ISBN 0-9626483-5-3]
-# reproduced a Pan American Airways timeables from 1936, for their weekly
-# "Orient Express" flights between San Francisco and Manila, and connecting
-# flights to Chicago and the US East Coast.  As it uses some time zone
-# designations that I've never seen before:....
-# Fri. 6:30A Lv. HONOLOLU (Pearl Harbor), H.I.   H.L.T. Ar. 5:30P Sun.
-#  "   3:00P Ar. MIDWAY ISLAND . . . . . . . . . M.L.T. Lv. 6:00A  "
-#
-Zone Pacific/Midway	-11:49:28 -	LMT	1901
-			-11:00	-	NST	1956 Jun  3
-			-11:00	1:00	NDT	1956 Sep  2
-			-11:00	-	NST	1967 Apr	# N=Nome
-			-11:00	-	BST	1983 Nov 30	# B=Bering
-			-11:00	-	SST			# S=Samoa
-
-# Palmyra
-# uninhabited since World War II; was probably like Pacific/Kiritimati
-
-# Wake
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Pacific/Wake	11:06:28 -	LMT	1901
-			12:00	-	WAKT	# Wake Time
-
-
-# Vanuatu
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Vanuatu	1983	only	-	Sep	25	0:00	1:00	S
-Rule	Vanuatu	1984	1991	-	Mar	Sun>=23	0:00	0	-
-Rule	Vanuatu	1984	only	-	Oct	23	0:00	1:00	S
-Rule	Vanuatu	1985	1991	-	Sep	Sun>=23	0:00	1:00	S
-Rule	Vanuatu	1992	1993	-	Jan	Sun>=23	0:00	0	-
-Rule	Vanuatu	1992	only	-	Oct	Sun>=23	0:00	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Pacific/Efate	11:13:16 -	LMT	1912 Jan 13		# Vila
-			11:00	Vanuatu	VU%sT	# Vanuatu Time
-
-# Wallis and Futuna
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Pacific/Wallis	12:15:20 -	LMT	1901
-			12:00	-	WFT	# Wallis & Futuna Time
-
-###############################################################################
-
-# NOTES
-
-# This data is by no means authoritative; if you think you know better,
-# go ahead and edit the file (and please send any changes to
-# tz@elsie.nci.nih.gov for general use in the future).
-
-# From Paul Eggert (1999-10-29):
-# A good source for time zone historical data outside the U.S. is
-# Thomas G. Shanks, The International Atlas (5th edition),
-# San Diego: ACS Publications, Inc. (1999).
-#
-# Gwillim Law writes that a good source
-# for recent time zone data is the International Air Transport
-# Association's Standard Schedules Information Manual (IATA SSIM),
-# published semiannually.  Law sent in several helpful summaries
-# of the IATA's data after 1990.
-#
-# Except where otherwise noted, Shanks is the source for entries through 1990,
-# and IATA SSIM is the source for entries after 1990.
-#
-# Another source occasionally used is Edward W. Whitman, World Time Differences,
-# Whitman Publishing Co, 2 Niagara Av, Ealing, London (undated), which
-# I found in the UCLA library.
-#
-# A reliable and entertaining source about time zones is
-# Derek Howse, Greenwich time and longitude, Philip Wilson Publishers (1997).
-#
-# I invented the abbreviations marked `*' in the following table;
-# the rest are from earlier versions of this file, or from other sources.
-# Corrections are welcome!
-#		std dst
-#		LMT	Local Mean Time
-#	  8:00	WST WST	Western Australia
-#	  9:00	JST	Japan
-#	  9:30	CST CST	Central Australia
-#	 10:00	EST EST	Eastern Australia
-#	 10:00	ChST	Chamorro
-#	 10:30	LHST LHST Lord Howe*
-#	 11:30	NZMT NZST New Zealand through 1945
-#	 12:00	NZST NZDT New Zealand 1946-present
-#	 12:45	CHAST CHADT Chatham*
-#	-11:00	SST	Samoa
-#	-10:00	HST	Hawaii
-#	- 8:00	PST	Pitcairn*
-#
-# See the `northamerica' file for Hawaii.
-# See the `southamerica' file for Easter I and the Galapagos Is.
-
-###############################################################################
-
-# Australia
-
-# From Paul Eggert (2005-12-08):
-# <a href="http://www.bom.gov.au/climate/averages/tables/dst_times.shtml">
-# Implementation Dates of Daylight Saving Time within Australia
-# </a> summarizes daylight saving issues in Australia.
-
-# From Arthur David Olson (2005-12-12):
-# <a href="http://www.lawlink.nsw.gov.au/lawlink/Corporate/ll_agdinfo.nsf/pages/community_relations_daylight_saving">
-# Lawlink NSW:Daylight Saving in New South Wales
-# </a> covers New South Wales in particular.
-
-# From John Mackin (1991-03-06):
-# We in Australia have _never_ referred to DST as `daylight' time.
-# It is called `summer' time.  Now by a happy coincidence, `summer'
-# and `standard' happen to start with the same letter; hence, the
-# abbreviation does _not_ change...
-# The legislation does not actually define abbreviations, at least
-# in this State, but the abbreviation is just commonly taken to be the
-# initials of the phrase, and the legislation here uniformly uses
-# the phrase `summer time' and does not use the phrase `daylight
-# time'.
-# Announcers on the Commonwealth radio network, the ABC (for Australian
-# Broadcasting Commission), use the phrases `Eastern Standard Time'
-# or `Eastern Summer Time'.  (Note, though, that as I say in the
-# current australasia file, there is really no such thing.)  Announcers
-# on its overseas service, Radio Australia, use the same phrases
-# prefixed by the word `Australian' when referring to local times;
-# time announcements on that service, naturally enough, are made in UTC.
-
-# From Arthur David Olson (1992-03-08):
-# Given the above, what's chosen for year-round use is:
-#	CST	for any place operating at a GMTOFF of 9:30
-#	WST	for any place operating at a GMTOFF of 8:00
-#	EST	for any place operating at a GMTOFF of 10:00
-
-# From Paul Eggert (2001-04-05), summarizing a long discussion about "EST"
-# versus "AEST" etc.:
-#
-# I see the following points of dispute:
-#
-# * How important are unique time zone abbreviations?
-#
-#   Here I tend to agree with the point (most recently made by Chris
-#   Newman) that unique abbreviations should not be essential for proper
-#   operation of software.  We have other instances of ambiguity
-#   (e.g. "IST" denoting both "Israel Standard Time" and "Indian
-#   Standard Time"), and they are not likely to go away any time soon.
-#   In the old days, some software mistakenly relied on unique
-#   abbreviations, but this is becoming less true with time, and I don't
-#   think it's that important to cater to such software these days.
-#
-#   On the other hand, there is another motivation for unambiguous
-#   abbreviations: it cuts down on human confusion.  This is
-#   particularly true for Australia, where "EST" can mean one thing for
-#   time T and a different thing for time T plus 1 second.
-#
-# * Does the relevant legislation indicate which abbreviations should be used?
-#
-#   Here I tend to think that things are a mess, just as they are in
-#   many other countries.  We Americans are currently disagreeing about
-#   which abbreviation to use for the newly legislated Chamorro Standard
-#   Time, for example.
-#
-#   Personally, I would prefer to use common practice; I would like to
-#   refer to legislation only for examples of common practice, or as a
-#   tiebreaker.
-#
-# * Do Australians more often use "Eastern Daylight Time" or "Eastern
-#   Summer Time"?  Do they typically prefix the time zone names with
-#   the word "Australian"?
-#
-#   My own impression is that both "Daylight Time" and "Summer Time" are
-#   common and are widely understood, but that "Summer Time" is more
-#   popular; and that the leading "A" is also common but is omitted more
-#   often than not.  I just used AltaVista advanced search and got the
-#   following count of page hits:
-#
-#     1,103 "Eastern Summer Time" AND domain:au
-#       971 "Australian Eastern Summer Time" AND domain:au
-#       613 "Eastern Daylight Time" AND domain:au
-#       127 "Australian Eastern Daylight Time" AND domain:au
-#
-#   Here "Summer" seems quite a bit more popular than "Daylight",
-#   particularly when we know the time zone is Australian and not US,
-#   say.  The "Australian" prefix seems to be popular for Eastern Summer
-#   Time, but unpopular for Eastern Daylight Time.
-#
-#   For abbreviations, tools like AltaVista are less useful because of
-#   ambiguity.  Many hits are not really time zones, unfortunately, and
-#   many hits denote US time zones and not Australian ones.  But here
-#   are the hit counts anyway:
-#
-#     161,304 "EST" and domain:au
-#      25,156 "EDT" and domain:au
-#      18,263 "AEST" and domain:au
-#      10,416 "AEDT" and domain:au
-#
-#      14,538 "CST" and domain:au
-#       5,728 "CDT" and domain:au
-#         176 "ACST" and domain:au
-#          29 "ACDT" and domain:au
-#
-#       7,539 "WST" and domain:au
-#          68 "AWST" and domain:au
-#
-#   This data suggest that Australians tend to omit the "A" prefix in
-#   practice.  The situation for "ST" versus "DT" is less clear, given
-#   the ambiguities involved.
-#
-# * How do Australians feel about the abbreviations in the tz database?
-#
-#   If you just count Australians on this list, I count 2 in favor and 3
-#   against.  One of the "against" votes (David Keegel) counseled delay,
-#   saying that both AEST/AEDT and EST/EST are widely used and
-#   understood in Australia.
-
-# From Paul Eggert (1995-12-19):
-# Shanks reports 2:00 for all autumn changes in Australia and New Zealand.
-# Mark Prior writes that his newspaper
-# reports that NSW's fall 1995 change will occur at 2:00,
-# but Robert Elz says it's been 3:00 in Victoria since 1970
-# and perhaps the newspaper's `2:00' is referring to standard time.
-# For now we'll continue to assume 2:00s for changes since 1960.
-
-# From Eric Ulevik (1998-01-05):
-#
-# Here are some URLs to Australian time legislation. These URLs are stable,
-# and should probably be included in the data file. There are probably more
-# relevant entries in this database.
-#
-# NSW (including LHI and Broken Hill):
-# <a href="http://www.austlii.edu.au/au/legis/nsw/consol_act/sta1987137/index.html">
-# Standard Time Act 1987 (updated 1995-04-04)
-# </a>
-# ACT
-# <a href="http://www.austlii.edu.au/au/legis/act/consol_act/stasta1972279/index.html">
-# Standard Time and Summer Time Act 1972
-# </a>
-# SA
-# <a href="http://www.austlii.edu.au/au/legis/sa/consol_act/sta1898137/index.html">
-# Standard Time Act, 1898
-# </a>
-
-# From David Grosz (2005-06-13):
-# It was announced last week that Daylight Saving would be extended by
-# one week next year to allow for the 2006 Commonwealth Games.
-# Daylight Saving is now to end for next year only on the first Sunday
-# in April instead of the last Sunday in March.
-#
-# From Gwillim Law (2005-06-14):
-# I did some Googling and found that all of those states (and territory) plan
-# to extend DST together in 2006.
-# ACT: http://www.cmd.act.gov.au/mediareleases/fileread.cfm?file=86.txt
-# New South Wales: http://www.thecouriermail.news.com.au/common/story_page/0,5936,15538869%255E1702,00.html
-# South Australia: http://www.news.com.au/story/0,10117,15555031-1246,00.html
-# Tasmania: http://www.media.tas.gov.au/release.php?id=14772
-# Victoria: I wasn't able to find anything separate, but the other articles
-# allude to it.
-# But not Queensland
-# http://www.news.com.au/story/0,10117,15564030-1248,00.html.
-
-# Northern Territory
-
-# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
-# # The NORTHERN TERRITORY..  [ Courtesy N.T. Dept of the Chief Minister ]
-# #					[ Nov 1990 ]
-# #	N.T. have never utilised any DST due to sub-tropical/tropical location.
-# ...
-# Zone        Australia/North         9:30    -       CST
-
-# From Bradley White (1991-03-04):
-# A recent excerpt from an Australian newspaper...
-# the Northern Territory do[es] not have daylight saving.
-
-# Western Australia
-
-# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
-# #  The state of WESTERN AUSTRALIA..  [ Courtesy W.A. dept Premier+Cabinet ]
-# #						[ Nov 1990 ]
-# #	W.A. suffers from a great deal of public and political opposition to
-# #	DST in principle. A bill is brought before parliament in most years, but
-# #	usually defeated either in the upper house, or in party caucus
-# #	before reaching parliament.
-# ...
-# Zone	Australia/West		8:00	AW	%sST
-# ...
-# Rule	AW	1974	only	-	Oct	lastSun	2:00	1:00	D
-# Rule	AW	1975	only	-	Mar	Sun>=1	3:00	0	W
-# Rule	AW	1983	only	-	Oct	lastSun	2:00	1:00	D
-# Rule	AW	1984	only	-	Mar	Sun>=1	3:00	0	W
-
-# From Bradley White (1991-03-04):
-# A recent excerpt from an Australian newspaper...
-# Western Australia...do[es] not have daylight saving.
-
-# From John D. Newman via Bradley White (1991-11-02):
-# Western Australia is still on "winter time". Some DH in Sydney
-# rang me at home a few days ago at 6.00am. (He had just arrived at
-# work at 9.00am.)
-# W.A. is switching to Summer Time on Nov 17th just to confuse
-# everybody again.
-
-# From Arthur David Olson (1992-03-08):
-# The 1992 ending date used in the rules is a best guess;
-# it matches what was used in the past.
-
-# <a href="http://www.bom.gov.au/faq/faqgen.htm">
-# The Australian Bureau of Meteorology FAQ
-# </a> (1999-09-27) writes that Giles Meteorological Station uses
-# South Australian time even though it's located in Western Australia.
-
-# Queensland
-# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
-# #   The state of QUEENSLAND.. [ Courtesy Qld. Dept Premier Econ&Trade Devel ]
-# #						[ Dec 1990 ]
-# ...
-# Zone	Australia/Queensland	10:00	AQ	%sST
-# ...
-# Rule	AQ	1971	only	-	Oct	lastSun	2:00	1:00	D
-# Rule	AQ	1972	only	-	Feb	lastSun	3:00	0	E
-# Rule	AQ	1989	max	-	Oct	lastSun	2:00	1:00	D
-# Rule	AQ	1990	max	-	Mar	Sun>=1	3:00	0	E
-
-# From Bradley White (1989-12-24):
-# "Australia/Queensland" now observes daylight time (i.e. from
-# October 1989).
-
-# From Bradley White (1991-03-04):
-# A recent excerpt from an Australian newspaper...
-# ...Queensland...[has] agreed to end daylight saving
-# at 3am tomorrow (March 3)...
-
-# From John Mackin (1991-03-06):
-# I can certainly confirm for my part that Daylight Saving in NSW did in fact
-# end on Sunday, 3 March.  I don't know at what hour, though.  (It surprised
-# me.)
-
-# From Bradley White (1992-03-08):
-# ...there was recently a referendum in Queensland which resulted
-# in the experimental daylight saving system being abandoned. So, ...
-# ...
-# Rule	QLD	1989	1991	-	Oct	lastSun	2:00	1:00	D
-# Rule	QLD	1990	1992	-	Mar	Sun>=1	3:00	0	S
-# ...
-
-# From Arthur David Olson (1992-03-08):
-# The chosen rules the union of the 1971/1972 change and the 1989-1992 changes.
-
-# From Rives McDow (2002-04-09):
-# The most interesting region I have found consists of three towns on the
-# southern coast of Australia, population 10 at last report, along with
-# 50,000 sheep, about 100 kilometers long and 40 kilometers into the
-# continent.  The primary town is Madura, with the other towns being
-# Mundrabilla and Eucla.  According to the sheriff of Madura, the
-# residents got tired of having to change the time so often, as they are
-# located in a strip overlapping the border of South Australia and Western
-# Australia.  South Australia observes daylight saving time; Western
-# Australia does not.  The two states are one and a half hours apart.  The
-# residents decided to forget about this nonsense of changing the clock so
-# much and set the local time 20 hours and 45 minutes from the
-# international date line, or right in the middle of the time of South
-# Australia and Western Australia.  As it only affects about 10 people and
-# tourists staying at the Madura Motel, it has never really made as big an
-# impact as Broken Hill.  However, as tourist visiting there or anyone
-# calling the local sheriff will attest, they do keep time in this way.
-#
-# From Paul Eggert (2002-04-09):
-# This is confirmed by the section entitled
-# "What's the deal with time zones???" in
-# <http://www.earthsci.unimelb.edu.au/~awatkins/null.html>,
-# which says a few other things:
-#
-# * Border Village, SA also is 45 minutes ahead of Perth.
-# * The locals call this time zone "central W.A. Time" (presumably "CWAT").
-# * The locals also call Western Australia time "Perth time".
-#
-# It's not clear from context whether everyone in Western Australia
-# knows of this naming convention, or whether it's just the people in
-# this subregion.
-
-# South Australia, Tasmania, Victoria
-
-# From Arthur David Olson (1992-03-08):
-# The rules from version 7.1 follow.
-# There are lots of differences between these rules and
-# the Shepherd et al. rules.  Since the Shepherd et al. rules
-# and Bradley White's newspaper article are in agreement on
-# current DST ending dates, no worries.
-#
-# Rule	Oz	1971	1985	-	Oct	lastSun	2:00	1:00	-
-# Rule	Oz	1986	max	-	Oct	Sun<=24	2:00	1:00	-
-# Rule	Oz	1972	only	-	Feb	27	3:00	0	-
-# Rule	Oz	1973	1986	-	Mar	Sun>=1	3:00	0	-
-# Rule	Oz	1987	max	-	Mar	Sun<=21	3:00	0	-
-# Zone	Australia/Tasmania	10:00	Oz	EST
-# Zone	Australia/South		9:30	Oz	CST
-# Zone	Australia/Victoria	10:00	Oz	EST	1985 Oct lastSun 2:00
-#				10:00	1:00	EST	1986 Mar Sun<=21 3:00
-#				10:00	Oz	EST
-
-# From Robert Elz (1991-03-06):
-# I believe that the current start date for DST is "lastSun" in Oct...
-# that changed Oct 89.  That is, we're back to the
-# original rule, and that rule currently applies in all the states
-# that have dst, incl Qld.  (Certainly it was true in Vic).
-# The file I'm including says that happened in 1988, I think
-# that's incorrect, but I'm not 100% certain.
-
-# South Australia
-
-# From Bradley White (1991-03-04):
-# A recent excerpt from an Australian newspaper...
-# ...South Australia...[has] agreed to end daylight saving
-# at 3am tomorrow (March 3)...
-
-# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
-# #   The state of SOUTH AUSTRALIA....[ Courtesy of S.A. Dept of Labour ]
-# #						[ Nov 1990 ]
-# ...
-# Zone	Australia/South		9:30	AS	%sST
-# ...
-# Rule	 AS	1971	max	-	Oct	lastSun	2:00	1:00	D
-# Rule	 AS	1972	1985	-	Mar	Sun>=1	3:00	0	C
-# Rule	 AS	1986	1990	-	Mar	Sun<=21	3:00	0	C
-# Rule	 AS	1991	max	-	Mar	Sun>=1	3:00	0	C
-
-# From Bradley White (1992-03-11):
-# Recent correspondence with a friend in Adelaide
-# contained the following exchange:  "Due to the Adelaide Festival,
-# South Australia delays setting back our clocks for a few weeks."
-
-# From Robert Elz (1992-03-13):
-# I heard that apparently (or at least, it appears that)
-# South Aus will have an extra 3 weeks daylight saving every even
-# numbered year (from 1990).  That's when the Adelaide Festival
-# is on...
-
-# From Robert Elz (1992-03-16, 00:57:07 +1000):
-# DST didn't end in Adelaide today (yesterday)....
-# But whether it's "4th Sunday" or "2nd last Sunday" I have no idea whatever...
-# (it's just as likely to be "the Sunday we pick for this year"...).
-
-# From Bradley White (1994-04-11):
-# If Sun, 15 March, 1992 was at +1030 as kre asserts, but yet Sun, 20 March,
-# 1994 was at +0930 as John Connolly's customer seems to assert, then I can
-# only conclude that the actual rule is more complicated....
-
-# From John Warburton (1994-10-07):
-# The new Daylight Savings dates for South Australia ...
-# was gazetted in the Government Hansard on Sep 26 1994....
-# start on last Sunday in October and end in last sunday in March.
-
-# Tasmania
-
-# The rules for 1967 through 1991 were reported by George Shepherd
-# via Simon Woodhead via Robert Elz (1991-03-06):
-# #  The state of TASMANIA.. [Courtesy Tasmanian Dept of Premier + Cabinet ]
-# #					[ Nov 1990 ]
-
-# From Bill Hart via Guy Harris (1991-10-10):
-# Oh yes, the new daylight savings rules are uniquely tasmanian, we have
-# 6 weeks a year now when we are out of sync with the rest of Australia
-# (but nothing new about that).
-
-# From Alex Livingston (1999-10-04):
-# I heard on the ABC (Australian Broadcasting Corporation) radio news on the
-# (long) weekend that Tasmania, which usually goes its own way in this regard,
-# has decided to join with most of NSW, the ACT, and most of Victoria
-# (Australia) and start daylight saving on the last Sunday in August in 2000
-# instead of the first Sunday in October.
-
-# Sim Alam (2000-07-03) reported a legal citation for the 2000/2001 rules:
-# http://www.thelaw.tas.gov.au/fragview/42++1968+GS3A@EN+2000070300
-
-# Victoria
-
-# The rules for 1971 through 1991 were reported by George Shepherd
-# via Simon Woodhead via Robert Elz (1991-03-06):
-# #   The state of VICTORIA.. [ Courtesy of Vic. Dept of Premier + Cabinet ]
-# #						[ Nov 1990 ]
-
-# From Scott Harrington (2001-08-29):
-# On KQED's "City Arts and Lectures" program last night I heard an
-# interesting story about daylight savings time.  Dr. John Heilbron was
-# discussing his book "The Sun in the Church: Cathedrals as Solar
-# Observatories"[1], and in particular the Shrine of Remembrance[2] located
-# in Melbourne, Australia.
-#
-# Apparently the shrine's main purpose is a beam of sunlight which
-# illuminates a special spot on the floor at the 11th hour of the 11th day
-# of the 11th month (Remembrance Day) every year in memory of Australia's
-# fallen WWI soldiers.  And if you go there on Nov. 11, at 11am local time,
-# you will indeed see the sunbeam illuminate the special spot at the
-# expected time.
-#
-# However, that is only because of some special mirror contraption that had
-# to be employed, since due to daylight savings time, the true solar time of
-# the remembrance moment occurs one hour later (or earlier?).  Perhaps
-# someone with more information on this jury-rig can tell us more.
-#
-# [1] http://www.hup.harvard.edu/catalog/HEISUN.html
-# [2] http://www.shrine.org.au
-
-# New South Wales
-
-# From Arthur David Olson:
-# New South Wales and subjurisdictions have their own ideas of a fun time.
-# Based on law library research by John Mackin,
-# who notes:
-#	In Australia, time is not legislated federally, but rather by the
-#	individual states.  Thus, while such terms as ``Eastern Standard Time''
-#	[I mean, of course, Australian EST, not any other kind] are in common
-#	use, _they have NO REAL MEANING_, as they are not defined in the
-#	legislation.  This is very important to understand.
-#	I have researched New South Wales time only...
-
-# From Eric Ulevik (1999-05-26):
-# DST will start in NSW on the last Sunday of August, rather than the usual
-# October in 2000.  [See: Matthew Moore,
-# <a href="http://www.smh.com.au/news/9905/26/pageone/pageone4.html">
-# Two months more daylight saving
-# </a>
-# Sydney Morning Herald (1999-05-26).]
-
-# From Paul Eggert (1999-09-27):
-# See the following official NSW source:
-# <a href="http://dir.gis.nsw.gov.au/cgi-bin/genobject/document/other/daylightsaving/tigGmZ">
-# Daylight Saving in New South Wales.
-# </a>
-#
-# Narrabri Shire (NSW) council has announced it will ignore the extension of
-# daylight saving next year.  See:
-# <a href="http://abc.net.au/news/regionals/neweng/monthly/regeng-22jul1999-1.htm">
-# Narrabri Council to ignore daylight saving
-# </a> (1999-07-22).  For now, we'll wait to see if this really happens.
-#
-# Victoria will following NSW.  See:
-# <a href="http://abc.net.au/local/news/olympics/1999/07/item19990728112314_1.htm">
-# Vic to extend daylight saving
-# </a> (1999-07-28).
-#
-# However, South Australia rejected the DST request.  See:
-# <a href="http://abc.net.au/news/olympics/1999/07/item19990719151754_1.htm">
-# South Australia rejects Olympics daylight savings request
-# </a> (1999-07-19).
-#
-# Queensland also will not observe DST for the Olympics.  See:
-# <a href="http://abc.net.au/news/olympics/1999/06/item19990601114608_1.htm">
-# Qld says no to daylight savings for Olympics
-# </a> (1999-06-01), which quotes Queensland Premier Peter Beattie as saying
-# ``Look you've got to remember in my family when this came up last time
-# I voted for it, my wife voted against it and she said to me it's all very
-# well for you, you don't have to worry about getting the children out of
-# bed, getting them to school, getting them to sleep at night.
-# I've been through all this argument domestically...my wife rules.''
-#
-# Broken Hill will stick with South Australian time in 2000.  See:
-# <a href="http://abc.net.au/news/regionals/brokenh/monthly/regbrok-21jul1999-6.htm">
-# Broken Hill to be behind the times
-# </a> (1999-07-21).
-
-# IATA SSIM (1998-09) says that the spring 2000 change for Australian
-# Capital Territory, New South Wales except Lord Howe Island and Broken
-# Hill, and Victoria will be August 27, presumably due to the Sydney Olympics.
-
-# From Eric Ulevik, referring to Sydney's Sun Herald (2000-08-13), page 29:
-# The Queensland Premier Peter Beattie is encouraging northern NSW
-# towns to use Queensland time.
-
-# Yancowinna
-
-# From John Mackin (1989-01-04):
-# `Broken Hill' means the County of Yancowinna.
-
-# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
-# # YANCOWINNA..  [ Confirmation courtesy of Broken Hill Postmaster ]
-# #					[ Dec 1990 ]
-# ...
-# # Yancowinna uses Central Standard Time, despite [its] location on the
-# # New South Wales side of the S.A. border. Most business and social dealings
-# # are with CST zones, therefore CST is legislated by local government
-# # although the switch to Summer Time occurs in line with N.S.W. There have
-# # been years when this did not apply, but the historical data is not
-# # presently available.
-# Zone	Australia/Yancowinna	9:30	 AY	%sST
-# ...
-# Rule	 AY	1971	1985	-	Oct	lastSun	2:00	1:00	D
-# Rule	 AY	1972	only	-	Feb	lastSun	3:00	0	C
-# [followed by other Rules]
-
-# Lord Howe Island
-
-# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
-# LHI...		[ Courtesy of Pauline Van Winsen ]
-#					[ Dec 1990 ]
-# Lord Howe Island is located off the New South Wales coast, and is half an
-# hour ahead of NSW time.
-
-# From James Lonergan, Secretary, Lord Howe Island Board (2000-01-27):
-# Lord Howe Island summer time in 2000/2001 will commence on the same
-# date as the rest of NSW (i.e. 2000-08-27).  For your information the
-# Lord Howe Island Board (controlling authority for the Island) is
-# seeking the community's views on various options for summer time
-# arrangements on the Island, e.g. advance clocks by 1 full hour
-# instead of only 30 minutes.  Dependant on the wishes of residents
-# the Board may approach the NSW government to change the existing
-# arrangements.  The starting date for summer time on the Island will
-# however always coincide with the rest of NSW.
-
-# From James Lonergan, Secretary, Lord Howe Island Board (2000-10-25):
-# Lord Howe Island advances clocks by 30 minutes during DST in NSW and retards
-# clocks by 30 minutes when DST finishes. Since DST was most recently
-# introduced in NSW, the "changeover" time on the Island has been 02:00 as
-# shown on clocks on LHI. I guess this means that for 30 minutes at the start
-# of DST, LHI is actually 1 hour ahead of the rest of NSW.
-
-# From Paul Eggert (2001-02-09):
-# For Lord Howe dates we use Shanks through 1989, and Lonergan thereafter.
-# For times we use Lonergan.
-
-###############################################################################
-
-# New Zealand
-
-# From Mark Davies (1990-10-03):
-# the 1989/90 year was a trial of an extended "daylight saving" period.
-# This trial was deemed successful and the extended period adopted for
-# subsequent years (with the addition of a further week at the start).
-# source -- phone call to Ministry of Internal Affairs Head Office.
-
-# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
-# # The Country of New Zealand   (Australia's east island -) Gee they hate that!
-# #				   or is Australia the west island of N.Z.
-# #	[ courtesy of Geoff Tribble.. Auckland N.Z. ]
-# #				[ Nov 1990 ]
-# ...
-# Rule	NZ      1974    1988	-	Oct	lastSun	2:00	1:00	D
-# Rule	NZ	1989	max	-	Oct	Sun>=1	2:00	1:00	D
-# Rule	NZ      1975    1989	-	Mar	Sun>=1	3:00	0	S
-# Rule	NZ	1990	max	-	Mar	lastSun	3:00	0	S
-# ...
-# Zone	NZ			12:00	NZ		NZ%sT	# New Zealand
-# Zone	NZ-CHAT			12:45	-		NZ-CHAT # Chatham Island
-
-# From Arthur David Olson (1992-03-08):
-# The chosen rules use the Davies October 8 values for the start of DST in 1989
-# rather than the October 1 value.
-
-# From Paul Eggert (1995-12-19);
-# Shanks reports 2:00 for all autumn changes in Australia and New Zealand.
-# Robert Uzgalis writes that the New Zealand Daylight
-# Savings Time Order in Council dated 1990-06-18 specifies 2:00 standard
-# time on both the first Sunday in October and the third Sunday in March.
-# As with Australia, we'll assume the tradition is 2:00s, not 2:00.
-#
-# From Paul Eggert (2003-05-26):
-# The Department of Internal Affairs (DIA) maintains a brief history,
-# as does Carol Squires; see tz-link.htm for the full references.
-# Use these sources in preference to Shanks.
-#
-# For Chatham, IATA SSIM (1991/1999) gives the NZ rules but with
-# transitions at 2:45 local standard time; this confirms that Chatham
-# is always exactly 45 minutes ahead of Auckland.
-
-###############################################################################
-
-
-# Fiji
-
-# Howse writes (p 153) that in 1879 the British governor of Fiji
-# enacted an ordinance standardizing the islands on Antipodean Time
-# instead of the American system (which was one day behind).
-
-# From Rives McDow (1998-10-08):
-# Fiji will introduce DST effective 0200 local time, 1998-11-01
-# until 0300 local time 1999-02-28.  Each year the DST period will
-# be from the first Sunday in November until the last Sunday in February.
-
-# From Paul Eggert (2000-01-08):
-# IATA SSIM (1999-09) says DST ends 0100 local time.  Go with McDow.
-
-# From the BBC World Service (1998-10-31 11:32 UTC):
-# The Fijiian government says the main reasons for the time change is to
-# improve productivity and reduce road accidents.  But correspondents say it
-# also hopes the move will boost Fiji's ability to compete with other pacific
-# islands in the effort to attract tourists to witness the dawning of the new
-# millenium.
-
-# http://www.fiji.gov.fj/press/2000_09/2000_09_13-05.shtml (2000-09-13)
-# reports that Fiji has discontinued DST.
-
-# Johnston
-
-# Johnston data is from usno1995.
-
-
-# Kiribati
-
-# From Paul Eggert (1996-01-22):
-# Today's _Wall Street Journal_ (page 1) reports that Kiribati
-# ``declared it the same day throught the country as of Jan. 1, 1995''
-# as part of the competition to be first into the 21st century.
-
-
-# Kwajalein
-
-# In comp.risks 14.87 (26 August 1993), Peter Neumann writes:
-# I wonder what happened in Kwajalein, where there was NO Friday,
-# 1993-08-20.  Thursday night at midnight Kwajalein switched sides with
-# respect to the International Date Line, to rejoin its fellow islands,
-# going from 11:59 p.m. Thursday to 12:00 m. Saturday in a blink.
-
-
-# N Mariana Is, Guam
-
-# Howse writes (p 153) ``The Spaniards, on the other hand, reached the
-# Philippines and the Ladrones from America,'' and implies that the Ladrones
-# (now called the Marianas) kept American date for quite some time.
-# For now, we assume the Ladrones switched at the same time as the Philippines;
-# see Asia/Manila.
-
-# US Public Law 106-564 (2000-12-23) made UTC+10 the official standard time,
-# under the name "Chamorro Standard Time".  There is no official abbreviation,
-# but Congressman Robert A. Underwood, author of the bill that became law,
-# wrote in a press release (2000-12-27) that he will seek the use of "ChST".
-
-
-# Micronesia
-
-# Alan Eugene Davis writes (1996-03-16),
-# ``I am certain, having lived there for the past decade, that "Truk"
-# (now properly known as Chuuk) ... is in the time zone GMT+10.''
-#
-# Shanks writes that Truk switched from UTC+10 to UTC+11 on 1978-10-01;
-# ignore this for now.
-
-# From Paul Eggert (1999-10-29):
-# The Federated States of Micronesia Visitors Board writes in
-# <a href="http://www.fsmgov.org/info/clocks.html">
-# The Federated States of Micronesia - Visitor Information
-# </a> (1999-01-26)
-# that Truk and Yap are UTC+10, and Ponape and Kosrae are UTC+11.
-# We don't know when Kosrae switched from UTC+12; assume January 1 for now.
-
-
-# Midway
-
-# From Charles T O'Connor, KMTH DJ (1956),
-# quoted in the KTMH section of the Radio Heritage Collection
-# <http://radiodx.com/spdxr/KMTH.htm> (2002-12-31):
-# For the past two months we've been on what is known as Daylight
-# Saving Time.  This time has put us on air at 5am in the morning,
-# your time down there in New Zealand.  Starting September 2, 1956
-# we'll again go back to Standard Time.  This'll mean that we'll go to
-# air at 6am your time.
-#
-# From Paul Eggert (2003-03-23):
-# We don't know the date of that quote, but we'll guess they
-# started DST on June 3.  Possibly DST was observed other years
-# in Midway, but we have no record of it.
-
-
-# Pitcairn
-
-# From Rives McDow (1999-11-08):
-# A Proclamation was signed by the Governor of Pitcairn on the 27th March 1998
-# with regard to Pitcairn Standard Time.  The Proclamation is as follows.
-#
-#	The local time for general purposes in the Islands shall be
-#	Co-ordinated Universal time minus 8 hours and shall be known
-#	as Pitcairn Standard Time.
-#
-# ... I have also seen Pitcairn listed as UTC minus 9 hours in several
-# references, and can only assume that this was an error in interpretation
-# somehow in light of this proclamation.
-
-# From Rives McDow (1999-11-09):
-# The Proclamation regarding Pitcairn time came into effect on 27 April 1998
-# ... at midnight.
-
-# From Howie Phelps (1999-11-10), who talked to a Pitcairner via shortwave:
-# Betty Christian told me yesterday that their local time is the same as
-# Pacific Standard Time. They used to be 1/2 hour different from us here in
-# Sacramento but it was changed a couple of years ago.
-
-
-# Samoa
-
-# Howse writes (p 153, citing p 10 of the 1883-11-18 New York Herald)
-# that in 1879 the King of Samoa decided to change
-# ``the date in his kingdom from the Antipodean to the American system,
-# ordaining -- by a masterpiece of diplomatic flattery -- that
-# the Fourth of July should be celebrated twice in that year.''
-
-
-# Tonga
-
-# From Paul Eggert (1996-01-22):
-# Today's _Wall Street Journal_ (p 1) reports that ``Tonga has been plotting
-# to sneak ahead of [New Zealanders] by introducing daylight-saving time.''
-# Since Kiribati has moved the Date Line it's not clear what Tonga will do.
-
-# Don Mundell writes in the 1997-02-20 Tonga Chronicle
-# <a href="http://www.tongatapu.net.to/tonga/homeland/timebegins.htm">
-# How Tonga became `The Land where Time Begins'
-# </a>:
-
-# Until 1941 Tonga maintained a standard time 50 minutes ahead of NZST
-# 12 hours and 20 minutes ahead of GMT.  When New Zealand adjusted its
-# standard time in 1940s, Tonga had the choice of subtracting from its
-# local time to come on the same standard time as New Zealand or of
-# advancing its time to maintain the differential of 13 degrees
-# (approximately 50 minutes ahead of New Zealand time).
-#
-# Because His Majesty King Taufa'ahau Tupou IV, then Crown Prince
-# Tungi, preferred to ensure Tonga's title as the land where time
-# begins, the Legislative Assembly approved the latter change.
-#
-# But some of the older, more conservative members from the outer
-# islands objected. "If at midnight on Dec. 31, we move ahead 40
-# minutes, as your Royal Highness wishes, what becomes of the 40
-# minutes we have lost?"
-#
-# The Crown Prince, presented an unanswerable argument: "Remember that
-# on the World Day of Prayer, you would be the first people on Earth
-# to say your prayers in the morning."
-
-# From Paul Eggert (1999-08-12):
-# Shanks says the transition was on 1968-10-01; go with Mundell.
-
-# From Eric Ulevik (1999-05-03):
-# Tonga's director of tourism, who is also secretary of the National Millenium
-# Committee, has a plan to get Tonga back in front.
-# He has proposed a one-off move to tropical daylight saving for Tonga from
-# October to March, which has won approval in principle from the Tongan
-# Government.
-
-# From Steffen Thorsen (1999-09-09):
-# * Tonga will introduce DST in November
-#
-# I was given this link by John Letts:
-# <a hef="http://news.bbc.co.uk/hi/english/world/asia-pacific/newsid_424000/424764.stm">
-# http://news.bbc.co.uk/hi/english/world/asia-pacific/newsid_424000/424764.stm
-# </a>
-#
-# I have not been able to find exact dates for the transition in November
-# yet. By reading this article it seems like Fiji will be 14 hours ahead
-# of UTC as well, but as far as I know Fiji will only be 13 hours ahead
-# (12 + 1 hour DST).
-
-# From Arthur David Olson (1999-09-20):
-# According to <a href="http://www.tongaonline.com/news/sept1799.html>
-# http://www.tongaonline.com/news/sept1799.html
-# </a>:
-# "Daylight Savings Time will take effect on Oct. 2 through April 15, 2000
-# and annually thereafter from the first Saturday in October through the
-# third Saturday of April.  Under the system approved by Privy Council on
-# Sept. 10, clocks must be turned ahead one hour on the opening day and
-# set back an hour on the closing date."
-# Alas, no indication of the time of day.
-
-# From Rives McDow (1999-10-06):
-# Tonga started its Daylight Saving on Saturday morning October 2nd at 0200am.
-# Daylight Saving ends on April 16 at 0300am which is Sunday morning.
-
-# From Steffen Thorsen (2000-10-31):
-# Back in March I found a notice on the website http://www.tongaonline.com
-# that Tonga changed back to standard time one month early, on March 19
-# instead of the original reported date April 16. Unfortunately, the article
-# is no longer available on the site, and I did not make a copy of the
-# text, and I have forgotten to report it here.
-# (Original URL was: http://www.tongaonline.com/news/march162000.htm )
-
-# From Rives McDow (2000-12-01):
-# Tonga is observing DST as of 2000-11-04 and will stop on 2001-01-27.
-
-# From Sione Moala-Mafi (2001-09-20) via Rives McDow:
-# At 2:00am on the first Sunday of November, the standard time in the Kingdom
-# shall be moved forward by one hour to 3:00am.  At 2:00am on the last Sunday
-# of January the standard time in the Kingdom shall be moved backward by one
-# hour to 1:00am.
-
-# From Pulu 'Anau (2002-11-05):
-# The law was for 3 years, supposedly to get renewed.  It wasn't.
-
-
-# Wake
-
-# From Vernice Anderson, Personal Secretary to Philip Jessup,
-# US Ambassador At Large (oral history interview, 1971-02-02):
-#
-# Saturday, the 14th [of October, 1950] -- ...  The time was all the
-# more confusing at that point, because we had crossed the
-# International Date Line, thus getting two Sundays.  Furthermore, we
-# discovered that Wake Island had two hours of daylight saving time
-# making calculation of time in Washington difficult if not almost
-# impossible.
-#
-# http://www.trumanlibrary.org/wake/meeting.htm
-
-# From Paul Eggert (2003-03-23):
-# We have no other report of DST in Wake Island, so omit this info for now.
-
-###############################################################################
-
-# The International Date Line
-
-# From Gwillim Law (2000-01-03):
-#
-# The International Date Line is not defined by any international standard,
-# convention, or treaty.  Mapmakers are free to draw it as they please.
-# Reputable mapmakers will simply ensure that every point of land appears on
-# the correct side of the IDL, according to the date legally observed there.
-#
-# When Kiribati adopted a uniform date in 1995, thereby moving the Phoenix and
-# Line Islands to the west side of the IDL (or, if you prefer, moving the IDL
-# to the east side of the Phoenix and Line Islands), I suppose that most
-# mapmakers redrew the IDL following the boundary of Kiribati.  Even that line
-# has a rather arbitrary nature.  The straight-line boundaries between Pacific
-# island nations that are shown on many maps are based on an international
-# convention, but are not legally binding national borders.... The date is
-# governed by the IDL; therefore, even on the high seas, there may be some
-# places as late as fourteen hours later than UTC.  And, since the IDL is not
-# an international standard, there are some places on the high seas where the
-# correct date is ambiguous.
-
-# From Wikipedia <http://en.wikipedia.org/wiki/Time_zone> (2005-08-31):
-# Before 1920, all ships kept local apparent time on the high seas by setting
-# their clocks at night or at the morning sight so that, given the ship's
-# speed and direction, it would be 12 o'clock when the Sun crossed the ship's
-# meridian (12 o'clock = local apparent noon).  During 1917, at the
-# Anglo-French Conference on Time-keeping at Sea, it was recommended that all
-# ships, both military and civilian, should adopt hourly standard time zones
-# on the high seas.  Whenever a ship was within the territorial waters of any
-# nation it would use that nation's standard time.  The captain was permitted
-# to change his ship's clocks at a time of his choice following his ship's
-# entry into another zone time--he often chose midnight.  These zones were
-# adopted by all major fleets between 1920 and 1925 but not by many
-# independent merchant ships until World War II.
-
-# From Paul Eggert, using references suggested by Oscar van Vlijmen
-# (2005-03-20):
-#
-# The American Practical Navigator (2002)
-# <http://pollux.nss.nima.mil/pubs/pubs_j_apn_sections.html?rid=187>
-# talks only about the 180-degree meridian with respect to ships in
-# international waters; it ignores the international date line.
+# @(#)australasia	7.78
+# <pre>
+
+# This file also includes Pacific islands.
+
+# Notes are at the end of this file
+
+###############################################################################
+
+# Australia
+
+# Please see the notes below for the controversy about "EST" versus "AEST" etc.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Aus	1917	only	-	Jan	 1	0:01	1:00	-
+Rule	Aus	1917	only	-	Mar	25	2:00	0	-
+Rule	Aus	1942	only	-	Jan	 1	2:00	1:00	-
+Rule	Aus	1942	only	-	Mar	29	2:00	0	-
+Rule	Aus	1942	only	-	Sep	27	2:00	1:00	-
+Rule	Aus	1943	1944	-	Mar	lastSun	2:00	0	-
+Rule	Aus	1943	only	-	Oct	 3	2:00	1:00	-
+# Go with Whitman and the Australian National Standards Commission, which
+# says W Australia didn't use DST in 1943/1944.  Ignore Whitman's claim that
+# 1944/1945 was just like 1943/1944.
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+# Northern Territory
+Zone Australia/Darwin	 8:43:20 -	LMT	1895 Feb
+			 9:00	-	CST	1899 May
+			 9:30	Aus	CST
+# Western Australia
+Zone Australia/Perth	 7:43:24 -	LMT	1895 Dec
+			 8:00	Aus	WST	1943 Jul
+			 8:00	-	WST	1974 Oct lastSun 2:00s
+			 8:00	1:00	WST	1975 Mar Sun>=1 2:00s
+			 8:00	-	WST	1983 Oct lastSun 2:00s
+			 8:00	1:00	WST	1984 Mar Sun>=1 2:00s
+			 8:00	-	WST	1991 Nov 17 2:00s
+			 8:00	1:00	WST	1992 Mar Sun>=1 2:00s
+			 8:00	-	WST
+# Queensland
+#
+# From Alex Livingston (1996-11-01):
+# I have heard or read more than once that some resort islands off the coast
+# of Queensland chose to keep observing daylight-saving time even after
+# Queensland ceased to.
+#
+# From Paul Eggert (1996-11-22):
+# IATA SSIM (1993-02/1994-09) say that the Holiday Islands (Hayman, Lindeman,
+# Hamilton) observed DST for two years after the rest of Queensland stopped.
+# Hamilton is the largest, but there is also a Hamilton in Victoria,
+# so use Lindeman.
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	AQ	1971	only	-	Oct	lastSun	2:00s	1:00	-
+Rule	AQ	1972	only	-	Feb	lastSun	2:00s	0	-
+Rule	AQ	1989	1991	-	Oct	lastSun	2:00s	1:00	-
+Rule	AQ	1990	1992	-	Mar	Sun>=1	2:00s	0	-
+Rule	Holiday	1992	1993	-	Oct	lastSun	2:00s	1:00	-
+Rule	Holiday	1993	1994	-	Mar	Sun>=1	2:00s	0	-
+Zone Australia/Brisbane	10:12:08 -	LMT	1895
+			10:00	Aus	EST	1971
+			10:00	AQ	EST
+Zone Australia/Lindeman  9:55:56 -	LMT	1895
+			10:00	Aus	EST	1971
+			10:00	AQ	EST	1992 Jul
+			10:00	Holiday	EST
+
+# South Australia
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	AS	1971	1985	-	Oct	lastSun	2:00s	1:00	-
+Rule	AS	1986	only	-	Oct	19	2:00s	1:00	-
+Rule	AS	1987	max	-	Oct	lastSun	2:00s	1:00	-
+Rule	AS	1972	only	-	Feb	27	2:00s	0	-
+Rule	AS	1973	1985	-	Mar	Sun>=1	2:00s	0	-
+Rule	AS	1986	1989	-	Mar	Sun>=15	2:00s	0	-
+Rule	AS	1990	only	-	Mar	Sun>=18	2:00s	0	-
+Rule	AS	1991	only	-	Mar	Sun>=1	2:00s	0	-
+Rule	AS	1992	only	-	Mar	Sun>=18	2:00s	0	-
+Rule	AS	1993	only	-	Mar	Sun>=1	2:00s	0	-
+Rule	AS	1994	only	-	Mar	Sun>=18	2:00s	0	-
+Rule	AS	1995	2005	-	Mar	lastSun	2:00s	0	-
+Rule	AS	2006	only	-	Apr	Sun>=1	2:00s	0	-
+Rule	AS	2007	max	-	Mar	lastSun	2:00s	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Australia/Adelaide	9:14:20 -	LMT	1895 Feb
+			9:00	-	CST	1899 May
+			9:30	Aus	CST	1971
+			9:30	AS	CST
+
+# Tasmania
+#
+# From Paul Eggert (2005-08-16):
+# <http://www.bom.gov.au/climate/averages/tables/dst_times.shtml>
+# says King Island didn't observe DST from WWII until late 1971.
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	AT	1967	only	-	Oct	Sun>=1	2:00s	1:00	-
+Rule	AT	1968	only	-	Mar	lastSun	2:00s	0	-
+Rule	AT	1968	1985	-	Oct	lastSun	2:00s	1:00	-
+Rule	AT	1969	1971	-	Mar	Sun>=8	2:00s	0	-
+Rule	AT	1972	only	-	Feb	lastSun	2:00s	0	-
+Rule	AT	1973	1981	-	Mar	Sun>=1	2:00s	0	-
+Rule	AT	1982	1983	-	Mar	lastSun	2:00s	0	-
+Rule	AT	1984	1986	-	Mar	Sun>=1	2:00s	0	-
+Rule	AT	1986	only	-	Oct	Sun>=15	2:00s	1:00	-
+Rule	AT	1987	1990	-	Mar	Sun>=15	2:00s	0	-
+Rule	AT	1987	only	-	Oct	Sun>=22	2:00s	1:00	-
+Rule	AT	1988	1990	-	Oct	lastSun	2:00s	1:00	-
+Rule	AT	1991	1999	-	Oct	Sun>=1	2:00s	1:00	-
+Rule	AT	1991	2005	-	Mar	lastSun	2:00s	0	-
+Rule	AT	2000	only	-	Aug	lastSun	2:00s	1:00	-
+Rule	AT	2001	max	-	Oct	Sun>=1	2:00s	1:00	-
+Rule	AT	2006	only	-	Apr	Sun>=1	2:00s	0	-
+Rule	AT	2007	max	-	Mar	lastSun	2:00s	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Australia/Hobart	9:49:16	-	LMT	1895 Sep
+			10:00	-	EST	1916 Oct 1 2:00
+			10:00	1:00	EST	1917 Feb
+			10:00	Aus	EST	1967
+			10:00	AT	EST
+Zone Australia/Currie	9:35:28	-	LMT	1895 Sep
+			10:00	-	EST	1916 Oct 1 2:00
+			10:00	1:00	EST	1917 Feb
+			10:00	Aus	EST	1971 Jul
+			10:00	AT	EST
+
+# Victoria
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	AV	1971	1985	-	Oct	lastSun	2:00s	1:00	-
+Rule	AV	1972	only	-	Feb	lastSun	2:00s	0	-
+Rule	AV	1973	1985	-	Mar	Sun>=1	2:00s	0	-
+Rule	AV	1986	1990	-	Mar	Sun>=15	2:00s	0	-
+Rule	AV	1986	1987	-	Oct	Sun>=15	2:00s	1:00	-
+Rule	AV	1988	1999	-	Oct	lastSun	2:00s	1:00	-
+Rule	AV	1991	1994	-	Mar	Sun>=1	2:00s	0	-
+Rule	AV	1995	2005	-	Mar	lastSun	2:00s	0	-
+Rule	AV	2000	only	-	Aug	lastSun	2:00s	1:00	-
+Rule	AV	2001	max	-	Oct	lastSun	2:00s	1:00	-
+Rule	AV	2006	only	-	Apr	Sun>=1	2:00s	0	-
+Rule	AV	2007	max	-	Mar	lastSun	2:00s	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Australia/Melbourne 9:39:52 -	LMT	1895 Feb
+			10:00	Aus	EST	1971
+			10:00	AV	EST
+
+# New South Wales
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	AN	1971	1985	-	Oct	lastSun	2:00s	1:00	-
+Rule	AN	1972	only	-	Feb	27	2:00s	0	-
+Rule	AN	1973	1981	-	Mar	Sun>=1	2:00s	0	-
+Rule	AN	1982	only	-	Apr	Sun>=1	2:00s	0	-
+Rule	AN	1983	1985	-	Mar	Sun>=1	2:00s	0	-
+Rule	AN	1986	1989	-	Mar	Sun>=15	2:00s	0	-
+Rule	AN	1986	only	-	Oct	19	2:00s	1:00	-
+Rule	AN	1987	1999	-	Oct	lastSun	2:00s	1:00	-
+Rule	AN	1990	1995	-	Mar	Sun>=1	2:00s	0	-
+Rule	AN	1996	2005	-	Mar	lastSun	2:00s	0	-
+Rule	AN	2000	only	-	Aug	lastSun	2:00s	1:00	-
+Rule	AN	2001	max	-	Oct	lastSun	2:00s	1:00	-
+Rule	AN	2006	only	-	Apr	Sun>=1	2:00s	0	-
+Rule	AN	2007	max	-	Mar	lastSun	2:00s	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Australia/Sydney	10:04:52 -	LMT	1895 Feb
+			10:00	Aus	EST	1971
+			10:00	AN	EST
+Zone Australia/Broken_Hill 9:25:48 -	LMT	1895 Feb
+			10:00	-	EST	1896 Aug 23
+			9:00	-	CST	1899 May
+			9:30	Aus	CST	1971
+			9:30	AN	CST	2000
+			9:30	AS	CST
+
+# Lord Howe Island
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	LH	1981	1984	-	Oct	lastSun	2:00	1:00	-
+Rule	LH	1982	1985	-	Mar	Sun>=1	2:00	0	-
+Rule	LH	1985	only	-	Oct	lastSun	2:00	0:30	-
+Rule	LH	1986	1989	-	Mar	Sun>=15	2:00	0	-
+Rule	LH	1986	only	-	Oct	19	2:00	0:30	-
+Rule	LH	1987	1999	-	Oct	lastSun	2:00	0:30	-
+Rule	LH	1990	1995	-	Mar	Sun>=1	2:00	0	-
+Rule	LH	1996	2005	-	Mar	lastSun	2:00	0	-
+Rule	LH	2000	only	-	Aug	lastSun	2:00	0:30	-
+Rule	LH	2001	max	-	Oct	lastSun	2:00	0:30	-
+Rule	LH	2006	only	-	Apr	Sun>=1	2:00	0	-
+Rule	LH	2007	max	-	Mar	lastSun	2:00	0	-
+Zone Australia/Lord_Howe 10:36:20 -	LMT	1895 Feb
+			10:00	-	EST	1981 Mar
+			10:30	LH	LHST
+
+# Australian miscellany
+#
+# Ashmore Is, Cartier
+# no indigenous inhabitants; only seasonal caretakers
+# like Australia/Perth, says Turner
+#
+# Coral Sea Is
+# no indigenous inhabitants; only meteorologists
+# no information
+#
+# Macquarie
+# permanent occupation (scientific station) since 1948;
+# sealing and penguin oil station operated 1888/1917
+# like Australia/Hobart, says Turner
+
+# Christmas
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Indian/Christmas	7:02:52 -	LMT	1895 Feb
+			7:00	-	CXT	# Christmas Island Time
+
+# Cook Is
+# From Shanks:
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Cook	1978	only	-	Nov	12	0:00	0:30	HS
+Rule	Cook	1979	1991	-	Mar	Sun>=1	0:00	0	-
+Rule	Cook	1979	1990	-	Oct	lastSun	0:00	0:30	HS
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Pacific/Rarotonga	-10:39:04 -	LMT	1901		# Avarua
+			-10:30	-	CKT	1978 Nov 12	# Cook Is Time
+			-10:00	Cook	CK%sT
+
+# Cocos
+# These islands were ruled by the Ross family from about 1830 to 1978.
+# We don't know when standard time was introduced; for now, we guess 1900.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Indian/Cocos	6:27:40	-	LMT	1900
+			6:30	-	CCT	# Cocos Islands Time
+
+# Fiji
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Fiji	1998	1999	-	Nov	Sun>=1	2:00	1:00	S
+Rule	Fiji	1999	2000	-	Feb	lastSun	3:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Pacific/Fiji	11:53:40 -	LMT	1915 Oct 26	# Suva
+			12:00	Fiji	FJ%sT	# Fiji Time
+
+# French Polynesia
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Pacific/Gambier	 -8:59:48 -	LMT	1912 Oct	# Rikitea
+			 -9:00	-	GAMT	# Gambier Time
+Zone	Pacific/Marquesas -9:18:00 -	LMT	1912 Oct
+			 -9:30	-	MART	# Marquesas Time
+Zone	Pacific/Tahiti	 -9:58:16 -	LMT	1912 Oct	# Papeete
+			-10:00	-	TAHT	# Tahiti Time
+# Clipperton (near North America) is administered from French Polynesia;
+# it is uninhabited.
+
+# Guam
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Pacific/Guam	-14:21:00 -	LMT	1844 Dec 31
+			 9:39:00 -	LMT	1901		# Agana
+			10:00	-	GST	2000 Dec 23	# Guam
+			10:00	-	ChST	# Chamorro Standard Time
+
+# Kiribati
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Pacific/Tarawa	 11:32:04 -	LMT	1901		# Bairiki
+			 12:00	-	GILT		 # Gilbert Is Time
+Zone Pacific/Enderbury	-11:24:20 -	LMT	1901
+			-12:00	-	PHOT	1979 Oct # Phoenix Is Time
+			-11:00	-	PHOT	1995
+			 13:00	-	PHOT
+Zone Pacific/Kiritimati	-10:29:20 -	LMT	1901
+			-10:40	-	LINT	1979 Oct # Line Is Time
+			-10:00	-	LINT	1995
+			 14:00	-	LINT
+
+# N Mariana Is
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Pacific/Saipan	-14:17:00 -	LMT	1844 Dec 31
+			 9:43:00 -	LMT	1901
+			 9:00	-	MPT	1969 Oct # N Mariana Is Time
+			10:00	-	MPT	2000 Dec 23
+			10:00	-	ChST	# Chamorro Standard Time
+
+# Marshall Is
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Pacific/Majuro	11:24:48 -	LMT	1901
+			11:00	-	MHT	1969 Oct # Marshall Islands Time
+			12:00	-	MHT
+Zone Pacific/Kwajalein	11:09:20 -	LMT	1901
+			11:00	-	MHT	1969 Oct
+			-12:00	-	KWAT	1993 Aug 20	# Kwajalein Time
+			12:00	-	MHT
+
+# Micronesia
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Pacific/Truk	10:07:08 -	LMT	1901
+			10:00	-	TRUT			# Truk Time
+Zone Pacific/Ponape	10:32:52 -	LMT	1901		# Kolonia
+			11:00	-	PONT			# Ponape Time
+Zone Pacific/Kosrae	10:51:56 -	LMT	1901
+			11:00	-	KOST	1969 Oct	# Kosrae Time
+			12:00	-	KOST	1999
+			11:00	-	KOST
+
+# Nauru
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Pacific/Nauru	11:07:40 -	LMT	1921 Jan 15	# Uaobe
+			11:30	-	NRT	1942 Mar 15	# Nauru Time
+			9:00	-	JST	1944 Aug 15
+			11:30	-	NRT	1979 May
+			12:00	-	NRT
+
+# New Caledonia
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	NC	1977	1978	-	Dec	Sun>=1	0:00	1:00	S
+Rule	NC	1978	1979	-	Feb	27	0:00	0	-
+Rule	NC	1996	only	-	Dec	 1	2:00s	1:00	S
+# Shanks says the following was at 2:00; go with IATA.
+Rule	NC	1997	only	-	Mar	 2	2:00s	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Pacific/Noumea	11:05:48 -	LMT	1912 Jan 13
+			11:00	NC	NC%sT
+
+
+###############################################################################
+
+# New Zealand
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	NZ	1927	only	-	Nov	 6	2:00	1:00	S
+Rule	NZ	1928	only	-	Mar	 4	2:00	0	M
+Rule	NZ	1928	1933	-	Oct	Sun>=8	2:00	0:30	S
+Rule	NZ	1929	1933	-	Mar	Sun>=15	2:00	0	M
+Rule	NZ	1934	1940	-	Apr	lastSun	2:00	0	M
+Rule	NZ	1934	1940	-	Sep	lastSun	2:00	0:30	S
+Rule	NZ	1946	only	-	Jan	 1	0:00	0	S
+# Since 1957 Chatham has been 45 minutes ahead of NZ, but there's no
+# convenient notation for this so we must duplicate the Rule lines.
+Rule	NZ	1974	only	-	Nov	Sun>=1	2:00s	1:00	D
+Rule	Chatham	1974	only	-	Nov	Sun>=1	2:45s	1:00	D
+Rule	NZ	1975	only	-	Feb	lastSun	2:00s	0	S
+Rule	Chatham	1975	only	-	Feb	lastSun	2:45s	0	S
+Rule	NZ	1975	1988	-	Oct	lastSun	2:00s	1:00	D
+Rule	Chatham	1975	1988	-	Oct	lastSun	2:45s	1:00	D
+Rule	NZ	1976	1989	-	Mar	Sun>=1	2:00s	0	S
+Rule	Chatham	1976	1989	-	Mar	Sun>=1	2:45s	0	S
+Rule	NZ	1989	only	-	Oct	Sun>=8	2:00s	1:00	D
+Rule	Chatham	1989	only	-	Oct	Sun>=8	2:45s	1:00	D
+Rule	NZ	1990	max	-	Oct	Sun>=1	2:00s	1:00	D
+Rule	Chatham	1990	max	-	Oct	Sun>=1	2:45s	1:00	D
+Rule	NZ	1990	max	-	Mar	Sun>=15	2:00s	0	S
+Rule	Chatham	1990	max	-	Mar	Sun>=15	2:45s	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Pacific/Auckland	11:39:04 -	LMT	1868 Nov  2
+			11:30	NZ	NZ%sT	1946 Jan  1
+			12:00	NZ	NZ%sT
+Zone Pacific/Chatham	12:13:48 -	LMT	1957 Jan  1
+			12:45	Chatham	CHA%sT
+
+
+# Auckland Is
+# uninhabited; Maori and Moriori, colonial settlers, pastoralists, sealers,
+# and scientific personnel have wintered
+
+# Campbell I
+# minor whaling stations operated 1909/1914
+# scientific station operated 1941/1995;
+# previously whalers, sealers, pastoralists, and scientific personnel wintered
+# was probably like Pacific/Auckland
+
+###############################################################################
+
+
+# Niue
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Pacific/Niue	-11:19:40 -	LMT	1901		# Alofi
+			-11:20	-	NUT	1951	# Niue Time
+			-11:30	-	NUT	1978 Oct 1
+			-11:00	-	NUT
+
+# Norfolk
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Pacific/Norfolk	11:11:52 -	LMT	1901		# Kingston
+			11:12	-	NMT	1951	# Norfolk Mean Time
+			11:30	-	NFT		# Norfolk Time
+
+# Palau (Belau)
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Pacific/Palau	8:57:56 -	LMT	1901		# Koror
+			9:00	-	PWT	# Palau Time
+
+# Papua New Guinea
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Pacific/Port_Moresby 9:48:40 -	LMT	1880
+			9:48:32	-	PMMT	1895	# Port Moresby Mean Time
+			10:00	-	PGT		# Papua New Guinea Time
+
+# Pitcairn
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Pacific/Pitcairn	-8:40:20 -	LMT	1901		# Adamstown
+			-8:30	-	PNT	1998 Apr 27 00:00
+			-8:00	-	PST	# Pitcairn Standard Time
+
+# American Samoa
+Zone Pacific/Pago_Pago	 12:37:12 -	LMT	1879 Jul  5
+			-11:22:48 -	LMT	1911
+			-11:30	-	SAMT	1950		# Samoa Time
+			-11:00	-	NST	1967 Apr	# N=Nome
+			-11:00	-	BST	1983 Nov 30	# B=Bering
+			-11:00	-	SST			# S=Samoa
+
+# Samoa
+Zone Pacific/Apia	 12:33:04 -	LMT	1879 Jul  5
+			-11:26:56 -	LMT	1911
+			-11:30	-	SAMT	1950		# Samoa Time
+			-11:00	-	WST			# Samoa Time
+
+# Solomon Is
+# excludes Bougainville, for which see Papua New Guinea
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Pacific/Guadalcanal 10:39:48 -	LMT	1912 Oct	# Honiara
+			11:00	-	SBT	# Solomon Is Time
+
+# Tokelau Is
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Pacific/Fakaofo	-11:24:56 -	LMT	1901
+			-10:00	-	TKT	# Tokelau Time
+
+# Tonga
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Tonga	1999	only	-	Oct	 7	2:00s	1:00	S
+Rule	Tonga	2000	only	-	Mar	19	2:00s	0	-
+Rule	Tonga	2000	2001	-	Nov	Sun>=1	2:00	1:00	S
+Rule	Tonga	2001	2002	-	Jan	lastSun	2:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Pacific/Tongatapu	12:19:20 -	LMT	1901
+			12:20	-	TOT	1941 # Tonga Time
+			13:00	-	TOT	1999
+			13:00	Tonga	TO%sT
+
+# Tuvalu
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Pacific/Funafuti	11:56:52 -	LMT	1901
+			12:00	-	TVT	# Tuvalu Time
+
+
+# US minor outlying islands
+
+# Howland, Baker
+# uninhabited since World War II
+# no information; was probably like Pacific/Pago_Pago
+
+# Jarvis
+# uninhabited since 1958
+# no information; was probably like Pacific/Kiritimati
+
+# Johnston
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Pacific/Johnston	-10:00	-	HST
+
+# Kingman
+# uninhabited
+
+# Midway
+#
+# From Mark Brader (2005-01-23):
+# [Fallacies and Fantasies of Air Transport History, by R.E.G. Davies,
+# published 1994 by Paladwr Press, McLean, VA, USA; ISBN 0-9626483-5-3]
+# reproduced a Pan American Airways timeables from 1936, for their weekly
+# "Orient Express" flights between San Francisco and Manila, and connecting
+# flights to Chicago and the US East Coast.  As it uses some time zone
+# designations that I've never seen before:....
+# Fri. 6:30A Lv. HONOLOLU (Pearl Harbor), H.I.   H.L.T. Ar. 5:30P Sun.
+#  "   3:00P Ar. MIDWAY ISLAND . . . . . . . . . M.L.T. Lv. 6:00A  "
+#
+Zone Pacific/Midway	-11:49:28 -	LMT	1901
+			-11:00	-	NST	1956 Jun  3
+			-11:00	1:00	NDT	1956 Sep  2
+			-11:00	-	NST	1967 Apr	# N=Nome
+			-11:00	-	BST	1983 Nov 30	# B=Bering
+			-11:00	-	SST			# S=Samoa
+
+# Palmyra
+# uninhabited since World War II; was probably like Pacific/Kiritimati
+
+# Wake
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Pacific/Wake	11:06:28 -	LMT	1901
+			12:00	-	WAKT	# Wake Time
+
+
+# Vanuatu
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Vanuatu	1983	only	-	Sep	25	0:00	1:00	S
+Rule	Vanuatu	1984	1991	-	Mar	Sun>=23	0:00	0	-
+Rule	Vanuatu	1984	only	-	Oct	23	0:00	1:00	S
+Rule	Vanuatu	1985	1991	-	Sep	Sun>=23	0:00	1:00	S
+Rule	Vanuatu	1992	1993	-	Jan	Sun>=23	0:00	0	-
+Rule	Vanuatu	1992	only	-	Oct	Sun>=23	0:00	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Pacific/Efate	11:13:16 -	LMT	1912 Jan 13		# Vila
+			11:00	Vanuatu	VU%sT	# Vanuatu Time
+
+# Wallis and Futuna
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Pacific/Wallis	12:15:20 -	LMT	1901
+			12:00	-	WFT	# Wallis & Futuna Time
+
+###############################################################################
+
+# NOTES
+
+# This data is by no means authoritative; if you think you know better,
+# go ahead and edit the file (and please send any changes to
+# tz@elsie.nci.nih.gov for general use in the future).
+
+# From Paul Eggert (1999-10-29):
+# A good source for time zone historical data outside the U.S. is
+# Thomas G. Shanks, The International Atlas (5th edition),
+# San Diego: ACS Publications, Inc. (1999).
+#
+# Gwillim Law writes that a good source
+# for recent time zone data is the International Air Transport
+# Association's Standard Schedules Information Manual (IATA SSIM),
+# published semiannually.  Law sent in several helpful summaries
+# of the IATA's data after 1990.
+#
+# Except where otherwise noted, Shanks is the source for entries through 1990,
+# and IATA SSIM is the source for entries after 1990.
+#
+# Another source occasionally used is Edward W. Whitman, World Time Differences,
+# Whitman Publishing Co, 2 Niagara Av, Ealing, London (undated), which
+# I found in the UCLA library.
+#
+# A reliable and entertaining source about time zones is
+# Derek Howse, Greenwich time and longitude, Philip Wilson Publishers (1997).
+#
+# I invented the abbreviations marked `*' in the following table;
+# the rest are from earlier versions of this file, or from other sources.
+# Corrections are welcome!
+#		std dst
+#		LMT	Local Mean Time
+#	  8:00	WST WST	Western Australia
+#	  9:00	JST	Japan
+#	  9:30	CST CST	Central Australia
+#	 10:00	EST EST	Eastern Australia
+#	 10:00	ChST	Chamorro
+#	 10:30	LHST LHST Lord Howe*
+#	 11:30	NZMT NZST New Zealand through 1945
+#	 12:00	NZST NZDT New Zealand 1946-present
+#	 12:45	CHAST CHADT Chatham*
+#	-11:00	SST	Samoa
+#	-10:00	HST	Hawaii
+#	- 8:00	PST	Pitcairn*
+#
+# See the `northamerica' file for Hawaii.
+# See the `southamerica' file for Easter I and the Galapagos Is.
+
+###############################################################################
+
+# Australia
+
+# From Paul Eggert (2005-12-08):
+# <a href="http://www.bom.gov.au/climate/averages/tables/dst_times.shtml">
+# Implementation Dates of Daylight Saving Time within Australia
+# </a> summarizes daylight saving issues in Australia.
+
+# From Arthur David Olson (2005-12-12):
+# <a href="http://www.lawlink.nsw.gov.au/lawlink/Corporate/ll_agdinfo.nsf/pages/community_relations_daylight_saving">
+# Lawlink NSW:Daylight Saving in New South Wales
+# </a> covers New South Wales in particular.
+
+# From John Mackin (1991-03-06):
+# We in Australia have _never_ referred to DST as `daylight' time.
+# It is called `summer' time.  Now by a happy coincidence, `summer'
+# and `standard' happen to start with the same letter; hence, the
+# abbreviation does _not_ change...
+# The legislation does not actually define abbreviations, at least
+# in this State, but the abbreviation is just commonly taken to be the
+# initials of the phrase, and the legislation here uniformly uses
+# the phrase `summer time' and does not use the phrase `daylight
+# time'.
+# Announcers on the Commonwealth radio network, the ABC (for Australian
+# Broadcasting Commission), use the phrases `Eastern Standard Time'
+# or `Eastern Summer Time'.  (Note, though, that as I say in the
+# current australasia file, there is really no such thing.)  Announcers
+# on its overseas service, Radio Australia, use the same phrases
+# prefixed by the word `Australian' when referring to local times;
+# time announcements on that service, naturally enough, are made in UTC.
+
+# From Arthur David Olson (1992-03-08):
+# Given the above, what's chosen for year-round use is:
+#	CST	for any place operating at a GMTOFF of 9:30
+#	WST	for any place operating at a GMTOFF of 8:00
+#	EST	for any place operating at a GMTOFF of 10:00
+
+# From Paul Eggert (2001-04-05), summarizing a long discussion about "EST"
+# versus "AEST" etc.:
+#
+# I see the following points of dispute:
+#
+# * How important are unique time zone abbreviations?
+#
+#   Here I tend to agree with the point (most recently made by Chris
+#   Newman) that unique abbreviations should not be essential for proper
+#   operation of software.  We have other instances of ambiguity
+#   (e.g. "IST" denoting both "Israel Standard Time" and "Indian
+#   Standard Time"), and they are not likely to go away any time soon.
+#   In the old days, some software mistakenly relied on unique
+#   abbreviations, but this is becoming less true with time, and I don't
+#   think it's that important to cater to such software these days.
+#
+#   On the other hand, there is another motivation for unambiguous
+#   abbreviations: it cuts down on human confusion.  This is
+#   particularly true for Australia, where "EST" can mean one thing for
+#   time T and a different thing for time T plus 1 second.
+#
+# * Does the relevant legislation indicate which abbreviations should be used?
+#
+#   Here I tend to think that things are a mess, just as they are in
+#   many other countries.  We Americans are currently disagreeing about
+#   which abbreviation to use for the newly legislated Chamorro Standard
+#   Time, for example.
+#
+#   Personally, I would prefer to use common practice; I would like to
+#   refer to legislation only for examples of common practice, or as a
+#   tiebreaker.
+#
+# * Do Australians more often use "Eastern Daylight Time" or "Eastern
+#   Summer Time"?  Do they typically prefix the time zone names with
+#   the word "Australian"?
+#
+#   My own impression is that both "Daylight Time" and "Summer Time" are
+#   common and are widely understood, but that "Summer Time" is more
+#   popular; and that the leading "A" is also common but is omitted more
+#   often than not.  I just used AltaVista advanced search and got the
+#   following count of page hits:
+#
+#     1,103 "Eastern Summer Time" AND domain:au
+#       971 "Australian Eastern Summer Time" AND domain:au
+#       613 "Eastern Daylight Time" AND domain:au
+#       127 "Australian Eastern Daylight Time" AND domain:au
+#
+#   Here "Summer" seems quite a bit more popular than "Daylight",
+#   particularly when we know the time zone is Australian and not US,
+#   say.  The "Australian" prefix seems to be popular for Eastern Summer
+#   Time, but unpopular for Eastern Daylight Time.
+#
+#   For abbreviations, tools like AltaVista are less useful because of
+#   ambiguity.  Many hits are not really time zones, unfortunately, and
+#   many hits denote US time zones and not Australian ones.  But here
+#   are the hit counts anyway:
+#
+#     161,304 "EST" and domain:au
+#      25,156 "EDT" and domain:au
+#      18,263 "AEST" and domain:au
+#      10,416 "AEDT" and domain:au
+#
+#      14,538 "CST" and domain:au
+#       5,728 "CDT" and domain:au
+#         176 "ACST" and domain:au
+#          29 "ACDT" and domain:au
+#
+#       7,539 "WST" and domain:au
+#          68 "AWST" and domain:au
+#
+#   This data suggest that Australians tend to omit the "A" prefix in
+#   practice.  The situation for "ST" versus "DT" is less clear, given
+#   the ambiguities involved.
+#
+# * How do Australians feel about the abbreviations in the tz database?
+#
+#   If you just count Australians on this list, I count 2 in favor and 3
+#   against.  One of the "against" votes (David Keegel) counseled delay,
+#   saying that both AEST/AEDT and EST/EST are widely used and
+#   understood in Australia.
+
+# From Paul Eggert (1995-12-19):
+# Shanks reports 2:00 for all autumn changes in Australia and New Zealand.
+# Mark Prior writes that his newspaper
+# reports that NSW's fall 1995 change will occur at 2:00,
+# but Robert Elz says it's been 3:00 in Victoria since 1970
+# and perhaps the newspaper's `2:00' is referring to standard time.
+# For now we'll continue to assume 2:00s for changes since 1960.
+
+# From Eric Ulevik (1998-01-05):
+#
+# Here are some URLs to Australian time legislation. These URLs are stable,
+# and should probably be included in the data file. There are probably more
+# relevant entries in this database.
+#
+# NSW (including LHI and Broken Hill):
+# <a href="http://www.austlii.edu.au/au/legis/nsw/consol_act/sta1987137/index.html">
+# Standard Time Act 1987 (updated 1995-04-04)
+# </a>
+# ACT
+# <a href="http://www.austlii.edu.au/au/legis/act/consol_act/stasta1972279/index.html">
+# Standard Time and Summer Time Act 1972
+# </a>
+# SA
+# <a href="http://www.austlii.edu.au/au/legis/sa/consol_act/sta1898137/index.html">
+# Standard Time Act, 1898
+# </a>
+
+# From David Grosz (2005-06-13):
+# It was announced last week that Daylight Saving would be extended by
+# one week next year to allow for the 2006 Commonwealth Games.
+# Daylight Saving is now to end for next year only on the first Sunday
+# in April instead of the last Sunday in March.
+#
+# From Gwillim Law (2005-06-14):
+# I did some Googling and found that all of those states (and territory) plan
+# to extend DST together in 2006.
+# ACT: http://www.cmd.act.gov.au/mediareleases/fileread.cfm?file=86.txt
+# New South Wales: http://www.thecouriermail.news.com.au/common/story_page/0,5936,15538869%255E1702,00.html
+# South Australia: http://www.news.com.au/story/0,10117,15555031-1246,00.html
+# Tasmania: http://www.media.tas.gov.au/release.php?id=14772
+# Victoria: I wasn't able to find anything separate, but the other articles
+# allude to it.
+# But not Queensland
+# http://www.news.com.au/story/0,10117,15564030-1248,00.html.
+
+# Northern Territory
+
+# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
+# # The NORTHERN TERRITORY..  [ Courtesy N.T. Dept of the Chief Minister ]
+# #					[ Nov 1990 ]
+# #	N.T. have never utilised any DST due to sub-tropical/tropical location.
+# ...
+# Zone        Australia/North         9:30    -       CST
+
+# From Bradley White (1991-03-04):
+# A recent excerpt from an Australian newspaper...
+# the Northern Territory do[es] not have daylight saving.
+
+# Western Australia
+
+# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
+# #  The state of WESTERN AUSTRALIA..  [ Courtesy W.A. dept Premier+Cabinet ]
+# #						[ Nov 1990 ]
+# #	W.A. suffers from a great deal of public and political opposition to
+# #	DST in principle. A bill is brought before parliament in most years, but
+# #	usually defeated either in the upper house, or in party caucus
+# #	before reaching parliament.
+# ...
+# Zone	Australia/West		8:00	AW	%sST
+# ...
+# Rule	AW	1974	only	-	Oct	lastSun	2:00	1:00	D
+# Rule	AW	1975	only	-	Mar	Sun>=1	3:00	0	W
+# Rule	AW	1983	only	-	Oct	lastSun	2:00	1:00	D
+# Rule	AW	1984	only	-	Mar	Sun>=1	3:00	0	W
+
+# From Bradley White (1991-03-04):
+# A recent excerpt from an Australian newspaper...
+# Western Australia...do[es] not have daylight saving.
+
+# From John D. Newman via Bradley White (1991-11-02):
+# Western Australia is still on "winter time". Some DH in Sydney
+# rang me at home a few days ago at 6.00am. (He had just arrived at
+# work at 9.00am.)
+# W.A. is switching to Summer Time on Nov 17th just to confuse
+# everybody again.
+
+# From Arthur David Olson (1992-03-08):
+# The 1992 ending date used in the rules is a best guess;
+# it matches what was used in the past.
+
+# <a href="http://www.bom.gov.au/faq/faqgen.htm">
+# The Australian Bureau of Meteorology FAQ
+# </a> (1999-09-27) writes that Giles Meteorological Station uses
+# South Australian time even though it's located in Western Australia.
+
+# Queensland
+# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
+# #   The state of QUEENSLAND.. [ Courtesy Qld. Dept Premier Econ&Trade Devel ]
+# #						[ Dec 1990 ]
+# ...
+# Zone	Australia/Queensland	10:00	AQ	%sST
+# ...
+# Rule	AQ	1971	only	-	Oct	lastSun	2:00	1:00	D
+# Rule	AQ	1972	only	-	Feb	lastSun	3:00	0	E
+# Rule	AQ	1989	max	-	Oct	lastSun	2:00	1:00	D
+# Rule	AQ	1990	max	-	Mar	Sun>=1	3:00	0	E
+
+# From Bradley White (1989-12-24):
+# "Australia/Queensland" now observes daylight time (i.e. from
+# October 1989).
+
+# From Bradley White (1991-03-04):
+# A recent excerpt from an Australian newspaper...
+# ...Queensland...[has] agreed to end daylight saving
+# at 3am tomorrow (March 3)...
+
+# From John Mackin (1991-03-06):
+# I can certainly confirm for my part that Daylight Saving in NSW did in fact
+# end on Sunday, 3 March.  I don't know at what hour, though.  (It surprised
+# me.)
+
+# From Bradley White (1992-03-08):
+# ...there was recently a referendum in Queensland which resulted
+# in the experimental daylight saving system being abandoned. So, ...
+# ...
+# Rule	QLD	1989	1991	-	Oct	lastSun	2:00	1:00	D
+# Rule	QLD	1990	1992	-	Mar	Sun>=1	3:00	0	S
+# ...
+
+# From Arthur David Olson (1992-03-08):
+# The chosen rules the union of the 1971/1972 change and the 1989-1992 changes.
+
+# From Rives McDow (2002-04-09):
+# The most interesting region I have found consists of three towns on the
+# southern coast of Australia, population 10 at last report, along with
+# 50,000 sheep, about 100 kilometers long and 40 kilometers into the
+# continent.  The primary town is Madura, with the other towns being
+# Mundrabilla and Eucla.  According to the sheriff of Madura, the
+# residents got tired of having to change the time so often, as they are
+# located in a strip overlapping the border of South Australia and Western
+# Australia.  South Australia observes daylight saving time; Western
+# Australia does not.  The two states are one and a half hours apart.  The
+# residents decided to forget about this nonsense of changing the clock so
+# much and set the local time 20 hours and 45 minutes from the
+# international date line, or right in the middle of the time of South
+# Australia and Western Australia.  As it only affects about 10 people and
+# tourists staying at the Madura Motel, it has never really made as big an
+# impact as Broken Hill.  However, as tourist visiting there or anyone
+# calling the local sheriff will attest, they do keep time in this way.
+#
+# From Paul Eggert (2002-04-09):
+# This is confirmed by the section entitled
+# "What's the deal with time zones???" in
+# <http://www.earthsci.unimelb.edu.au/~awatkins/null.html>,
+# which says a few other things:
+#
+# * Border Village, SA also is 45 minutes ahead of Perth.
+# * The locals call this time zone "central W.A. Time" (presumably "CWAT").
+# * The locals also call Western Australia time "Perth time".
+#
+# It's not clear from context whether everyone in Western Australia
+# knows of this naming convention, or whether it's just the people in
+# this subregion.
+
+# South Australia, Tasmania, Victoria
+
+# From Arthur David Olson (1992-03-08):
+# The rules from version 7.1 follow.
+# There are lots of differences between these rules and
+# the Shepherd et al. rules.  Since the Shepherd et al. rules
+# and Bradley White's newspaper article are in agreement on
+# current DST ending dates, no worries.
+#
+# Rule	Oz	1971	1985	-	Oct	lastSun	2:00	1:00	-
+# Rule	Oz	1986	max	-	Oct	Sun<=24	2:00	1:00	-
+# Rule	Oz	1972	only	-	Feb	27	3:00	0	-
+# Rule	Oz	1973	1986	-	Mar	Sun>=1	3:00	0	-
+# Rule	Oz	1987	max	-	Mar	Sun<=21	3:00	0	-
+# Zone	Australia/Tasmania	10:00	Oz	EST
+# Zone	Australia/South		9:30	Oz	CST
+# Zone	Australia/Victoria	10:00	Oz	EST	1985 Oct lastSun 2:00
+#				10:00	1:00	EST	1986 Mar Sun<=21 3:00
+#				10:00	Oz	EST
+
+# From Robert Elz (1991-03-06):
+# I believe that the current start date for DST is "lastSun" in Oct...
+# that changed Oct 89.  That is, we're back to the
+# original rule, and that rule currently applies in all the states
+# that have dst, incl Qld.  (Certainly it was true in Vic).
+# The file I'm including says that happened in 1988, I think
+# that's incorrect, but I'm not 100% certain.
+
+# South Australia
+
+# From Bradley White (1991-03-04):
+# A recent excerpt from an Australian newspaper...
+# ...South Australia...[has] agreed to end daylight saving
+# at 3am tomorrow (March 3)...
+
+# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
+# #   The state of SOUTH AUSTRALIA....[ Courtesy of S.A. Dept of Labour ]
+# #						[ Nov 1990 ]
+# ...
+# Zone	Australia/South		9:30	AS	%sST
+# ...
+# Rule	 AS	1971	max	-	Oct	lastSun	2:00	1:00	D
+# Rule	 AS	1972	1985	-	Mar	Sun>=1	3:00	0	C
+# Rule	 AS	1986	1990	-	Mar	Sun<=21	3:00	0	C
+# Rule	 AS	1991	max	-	Mar	Sun>=1	3:00	0	C
+
+# From Bradley White (1992-03-11):
+# Recent correspondence with a friend in Adelaide
+# contained the following exchange:  "Due to the Adelaide Festival,
+# South Australia delays setting back our clocks for a few weeks."
+
+# From Robert Elz (1992-03-13):
+# I heard that apparently (or at least, it appears that)
+# South Aus will have an extra 3 weeks daylight saving every even
+# numbered year (from 1990).  That's when the Adelaide Festival
+# is on...
+
+# From Robert Elz (1992-03-16, 00:57:07 +1000):
+# DST didn't end in Adelaide today (yesterday)....
+# But whether it's "4th Sunday" or "2nd last Sunday" I have no idea whatever...
+# (it's just as likely to be "the Sunday we pick for this year"...).
+
+# From Bradley White (1994-04-11):
+# If Sun, 15 March, 1992 was at +1030 as kre asserts, but yet Sun, 20 March,
+# 1994 was at +0930 as John Connolly's customer seems to assert, then I can
+# only conclude that the actual rule is more complicated....
+
+# From John Warburton (1994-10-07):
+# The new Daylight Savings dates for South Australia ...
+# was gazetted in the Government Hansard on Sep 26 1994....
+# start on last Sunday in October and end in last sunday in March.
+
+# Tasmania
+
+# The rules for 1967 through 1991 were reported by George Shepherd
+# via Simon Woodhead via Robert Elz (1991-03-06):
+# #  The state of TASMANIA.. [Courtesy Tasmanian Dept of Premier + Cabinet ]
+# #					[ Nov 1990 ]
+
+# From Bill Hart via Guy Harris (1991-10-10):
+# Oh yes, the new daylight savings rules are uniquely tasmanian, we have
+# 6 weeks a year now when we are out of sync with the rest of Australia
+# (but nothing new about that).
+
+# From Alex Livingston (1999-10-04):
+# I heard on the ABC (Australian Broadcasting Corporation) radio news on the
+# (long) weekend that Tasmania, which usually goes its own way in this regard,
+# has decided to join with most of NSW, the ACT, and most of Victoria
+# (Australia) and start daylight saving on the last Sunday in August in 2000
+# instead of the first Sunday in October.
+
+# Sim Alam (2000-07-03) reported a legal citation for the 2000/2001 rules:
+# http://www.thelaw.tas.gov.au/fragview/42++1968+GS3A@EN+2000070300
+
+# Victoria
+
+# The rules for 1971 through 1991 were reported by George Shepherd
+# via Simon Woodhead via Robert Elz (1991-03-06):
+# #   The state of VICTORIA.. [ Courtesy of Vic. Dept of Premier + Cabinet ]
+# #						[ Nov 1990 ]
+
+# From Scott Harrington (2001-08-29):
+# On KQED's "City Arts and Lectures" program last night I heard an
+# interesting story about daylight savings time.  Dr. John Heilbron was
+# discussing his book "The Sun in the Church: Cathedrals as Solar
+# Observatories"[1], and in particular the Shrine of Remembrance[2] located
+# in Melbourne, Australia.
+#
+# Apparently the shrine's main purpose is a beam of sunlight which
+# illuminates a special spot on the floor at the 11th hour of the 11th day
+# of the 11th month (Remembrance Day) every year in memory of Australia's
+# fallen WWI soldiers.  And if you go there on Nov. 11, at 11am local time,
+# you will indeed see the sunbeam illuminate the special spot at the
+# expected time.
+#
+# However, that is only because of some special mirror contraption that had
+# to be employed, since due to daylight savings time, the true solar time of
+# the remembrance moment occurs one hour later (or earlier?).  Perhaps
+# someone with more information on this jury-rig can tell us more.
+#
+# [1] http://www.hup.harvard.edu/catalog/HEISUN.html
+# [2] http://www.shrine.org.au
+
+# New South Wales
+
+# From Arthur David Olson:
+# New South Wales and subjurisdictions have their own ideas of a fun time.
+# Based on law library research by John Mackin,
+# who notes:
+#	In Australia, time is not legislated federally, but rather by the
+#	individual states.  Thus, while such terms as ``Eastern Standard Time''
+#	[I mean, of course, Australian EST, not any other kind] are in common
+#	use, _they have NO REAL MEANING_, as they are not defined in the
+#	legislation.  This is very important to understand.
+#	I have researched New South Wales time only...
+
+# From Eric Ulevik (1999-05-26):
+# DST will start in NSW on the last Sunday of August, rather than the usual
+# October in 2000.  [See: Matthew Moore,
+# <a href="http://www.smh.com.au/news/9905/26/pageone/pageone4.html">
+# Two months more daylight saving
+# </a>
+# Sydney Morning Herald (1999-05-26).]
+
+# From Paul Eggert (1999-09-27):
+# See the following official NSW source:
+# <a href="http://dir.gis.nsw.gov.au/cgi-bin/genobject/document/other/daylightsaving/tigGmZ">
+# Daylight Saving in New South Wales.
+# </a>
+#
+# Narrabri Shire (NSW) council has announced it will ignore the extension of
+# daylight saving next year.  See:
+# <a href="http://abc.net.au/news/regionals/neweng/monthly/regeng-22jul1999-1.htm">
+# Narrabri Council to ignore daylight saving
+# </a> (1999-07-22).  For now, we'll wait to see if this really happens.
+#
+# Victoria will following NSW.  See:
+# <a href="http://abc.net.au/local/news/olympics/1999/07/item19990728112314_1.htm">
+# Vic to extend daylight saving
+# </a> (1999-07-28).
+#
+# However, South Australia rejected the DST request.  See:
+# <a href="http://abc.net.au/news/olympics/1999/07/item19990719151754_1.htm">
+# South Australia rejects Olympics daylight savings request
+# </a> (1999-07-19).
+#
+# Queensland also will not observe DST for the Olympics.  See:
+# <a href="http://abc.net.au/news/olympics/1999/06/item19990601114608_1.htm">
+# Qld says no to daylight savings for Olympics
+# </a> (1999-06-01), which quotes Queensland Premier Peter Beattie as saying
+# ``Look you've got to remember in my family when this came up last time
+# I voted for it, my wife voted against it and she said to me it's all very
+# well for you, you don't have to worry about getting the children out of
+# bed, getting them to school, getting them to sleep at night.
+# I've been through all this argument domestically...my wife rules.''
+#
+# Broken Hill will stick with South Australian time in 2000.  See:
+# <a href="http://abc.net.au/news/regionals/brokenh/monthly/regbrok-21jul1999-6.htm">
+# Broken Hill to be behind the times
+# </a> (1999-07-21).
+
+# IATA SSIM (1998-09) says that the spring 2000 change for Australian
+# Capital Territory, New South Wales except Lord Howe Island and Broken
+# Hill, and Victoria will be August 27, presumably due to the Sydney Olympics.
+
+# From Eric Ulevik, referring to Sydney's Sun Herald (2000-08-13), page 29:
+# The Queensland Premier Peter Beattie is encouraging northern NSW
+# towns to use Queensland time.
+
+# Yancowinna
+
+# From John Mackin (1989-01-04):
+# `Broken Hill' means the County of Yancowinna.
+
+# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
+# # YANCOWINNA..  [ Confirmation courtesy of Broken Hill Postmaster ]
+# #					[ Dec 1990 ]
+# ...
+# # Yancowinna uses Central Standard Time, despite [its] location on the
+# # New South Wales side of the S.A. border. Most business and social dealings
+# # are with CST zones, therefore CST is legislated by local government
+# # although the switch to Summer Time occurs in line with N.S.W. There have
+# # been years when this did not apply, but the historical data is not
+# # presently available.
+# Zone	Australia/Yancowinna	9:30	 AY	%sST
+# ...
+# Rule	 AY	1971	1985	-	Oct	lastSun	2:00	1:00	D
+# Rule	 AY	1972	only	-	Feb	lastSun	3:00	0	C
+# [followed by other Rules]
+
+# Lord Howe Island
+
+# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
+# LHI...		[ Courtesy of Pauline Van Winsen ]
+#					[ Dec 1990 ]
+# Lord Howe Island is located off the New South Wales coast, and is half an
+# hour ahead of NSW time.
+
+# From James Lonergan, Secretary, Lord Howe Island Board (2000-01-27):
+# Lord Howe Island summer time in 2000/2001 will commence on the same
+# date as the rest of NSW (i.e. 2000-08-27).  For your information the
+# Lord Howe Island Board (controlling authority for the Island) is
+# seeking the community's views on various options for summer time
+# arrangements on the Island, e.g. advance clocks by 1 full hour
+# instead of only 30 minutes.  Dependant on the wishes of residents
+# the Board may approach the NSW government to change the existing
+# arrangements.  The starting date for summer time on the Island will
+# however always coincide with the rest of NSW.
+
+# From James Lonergan, Secretary, Lord Howe Island Board (2000-10-25):
+# Lord Howe Island advances clocks by 30 minutes during DST in NSW and retards
+# clocks by 30 minutes when DST finishes. Since DST was most recently
+# introduced in NSW, the "changeover" time on the Island has been 02:00 as
+# shown on clocks on LHI. I guess this means that for 30 minutes at the start
+# of DST, LHI is actually 1 hour ahead of the rest of NSW.
+
+# From Paul Eggert (2001-02-09):
+# For Lord Howe dates we use Shanks through 1989, and Lonergan thereafter.
+# For times we use Lonergan.
+
+###############################################################################
+
+# New Zealand
+
+# From Mark Davies (1990-10-03):
+# the 1989/90 year was a trial of an extended "daylight saving" period.
+# This trial was deemed successful and the extended period adopted for
+# subsequent years (with the addition of a further week at the start).
+# source -- phone call to Ministry of Internal Affairs Head Office.
+
+# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
+# # The Country of New Zealand   (Australia's east island -) Gee they hate that!
+# #				   or is Australia the west island of N.Z.
+# #	[ courtesy of Geoff Tribble.. Auckland N.Z. ]
+# #				[ Nov 1990 ]
+# ...
+# Rule	NZ      1974    1988	-	Oct	lastSun	2:00	1:00	D
+# Rule	NZ	1989	max	-	Oct	Sun>=1	2:00	1:00	D
+# Rule	NZ      1975    1989	-	Mar	Sun>=1	3:00	0	S
+# Rule	NZ	1990	max	-	Mar	lastSun	3:00	0	S
+# ...
+# Zone	NZ			12:00	NZ		NZ%sT	# New Zealand
+# Zone	NZ-CHAT			12:45	-		NZ-CHAT # Chatham Island
+
+# From Arthur David Olson (1992-03-08):
+# The chosen rules use the Davies October 8 values for the start of DST in 1989
+# rather than the October 1 value.
+
+# From Paul Eggert (1995-12-19);
+# Shanks reports 2:00 for all autumn changes in Australia and New Zealand.
+# Robert Uzgalis writes that the New Zealand Daylight
+# Savings Time Order in Council dated 1990-06-18 specifies 2:00 standard
+# time on both the first Sunday in October and the third Sunday in March.
+# As with Australia, we'll assume the tradition is 2:00s, not 2:00.
+#
+# From Paul Eggert (2003-05-26):
+# The Department of Internal Affairs (DIA) maintains a brief history,
+# as does Carol Squires; see tz-link.htm for the full references.
+# Use these sources in preference to Shanks.
+#
+# For Chatham, IATA SSIM (1991/1999) gives the NZ rules but with
+# transitions at 2:45 local standard time; this confirms that Chatham
+# is always exactly 45 minutes ahead of Auckland.
+
+###############################################################################
+
+
+# Fiji
+
+# Howse writes (p 153) that in 1879 the British governor of Fiji
+# enacted an ordinance standardizing the islands on Antipodean Time
+# instead of the American system (which was one day behind).
+
+# From Rives McDow (1998-10-08):
+# Fiji will introduce DST effective 0200 local time, 1998-11-01
+# until 0300 local time 1999-02-28.  Each year the DST period will
+# be from the first Sunday in November until the last Sunday in February.
+
+# From Paul Eggert (2000-01-08):
+# IATA SSIM (1999-09) says DST ends 0100 local time.  Go with McDow.
+
+# From the BBC World Service (1998-10-31 11:32 UTC):
+# The Fijiian government says the main reasons for the time change is to
+# improve productivity and reduce road accidents.  But correspondents say it
+# also hopes the move will boost Fiji's ability to compete with other pacific
+# islands in the effort to attract tourists to witness the dawning of the new
+# millenium.
+
+# http://www.fiji.gov.fj/press/2000_09/2000_09_13-05.shtml (2000-09-13)
+# reports that Fiji has discontinued DST.
+
+# Johnston
+
+# Johnston data is from usno1995.
+
+
+# Kiribati
+
+# From Paul Eggert (1996-01-22):
+# Today's _Wall Street Journal_ (page 1) reports that Kiribati
+# ``declared it the same day throught the country as of Jan. 1, 1995''
+# as part of the competition to be first into the 21st century.
+
+
+# Kwajalein
+
+# In comp.risks 14.87 (26 August 1993), Peter Neumann writes:
+# I wonder what happened in Kwajalein, where there was NO Friday,
+# 1993-08-20.  Thursday night at midnight Kwajalein switched sides with
+# respect to the International Date Line, to rejoin its fellow islands,
+# going from 11:59 p.m. Thursday to 12:00 m. Saturday in a blink.
+
+
+# N Mariana Is, Guam
+
+# Howse writes (p 153) ``The Spaniards, on the other hand, reached the
+# Philippines and the Ladrones from America,'' and implies that the Ladrones
+# (now called the Marianas) kept American date for quite some time.
+# For now, we assume the Ladrones switched at the same time as the Philippines;
+# see Asia/Manila.
+
+# US Public Law 106-564 (2000-12-23) made UTC+10 the official standard time,
+# under the name "Chamorro Standard Time".  There is no official abbreviation,
+# but Congressman Robert A. Underwood, author of the bill that became law,
+# wrote in a press release (2000-12-27) that he will seek the use of "ChST".
+
+
+# Micronesia
+
+# Alan Eugene Davis writes (1996-03-16),
+# ``I am certain, having lived there for the past decade, that "Truk"
+# (now properly known as Chuuk) ... is in the time zone GMT+10.''
+#
+# Shanks writes that Truk switched from UTC+10 to UTC+11 on 1978-10-01;
+# ignore this for now.
+
+# From Paul Eggert (1999-10-29):
+# The Federated States of Micronesia Visitors Board writes in
+# <a href="http://www.fsmgov.org/info/clocks.html">
+# The Federated States of Micronesia - Visitor Information
+# </a> (1999-01-26)
+# that Truk and Yap are UTC+10, and Ponape and Kosrae are UTC+11.
+# We don't know when Kosrae switched from UTC+12; assume January 1 for now.
+
+
+# Midway
+
+# From Charles T O'Connor, KMTH DJ (1956),
+# quoted in the KTMH section of the Radio Heritage Collection
+# <http://radiodx.com/spdxr/KMTH.htm> (2002-12-31):
+# For the past two months we've been on what is known as Daylight
+# Saving Time.  This time has put us on air at 5am in the morning,
+# your time down there in New Zealand.  Starting September 2, 1956
+# we'll again go back to Standard Time.  This'll mean that we'll go to
+# air at 6am your time.
+#
+# From Paul Eggert (2003-03-23):
+# We don't know the date of that quote, but we'll guess they
+# started DST on June 3.  Possibly DST was observed other years
+# in Midway, but we have no record of it.
+
+
+# Pitcairn
+
+# From Rives McDow (1999-11-08):
+# A Proclamation was signed by the Governor of Pitcairn on the 27th March 1998
+# with regard to Pitcairn Standard Time.  The Proclamation is as follows.
+#
+#	The local time for general purposes in the Islands shall be
+#	Co-ordinated Universal time minus 8 hours and shall be known
+#	as Pitcairn Standard Time.
+#
+# ... I have also seen Pitcairn listed as UTC minus 9 hours in several
+# references, and can only assume that this was an error in interpretation
+# somehow in light of this proclamation.
+
+# From Rives McDow (1999-11-09):
+# The Proclamation regarding Pitcairn time came into effect on 27 April 1998
+# ... at midnight.
+
+# From Howie Phelps (1999-11-10), who talked to a Pitcairner via shortwave:
+# Betty Christian told me yesterday that their local time is the same as
+# Pacific Standard Time. They used to be 1/2 hour different from us here in
+# Sacramento but it was changed a couple of years ago.
+
+
+# Samoa
+
+# Howse writes (p 153, citing p 10 of the 1883-11-18 New York Herald)
+# that in 1879 the King of Samoa decided to change
+# ``the date in his kingdom from the Antipodean to the American system,
+# ordaining -- by a masterpiece of diplomatic flattery -- that
+# the Fourth of July should be celebrated twice in that year.''
+
+
+# Tonga
+
+# From Paul Eggert (1996-01-22):
+# Today's _Wall Street Journal_ (p 1) reports that ``Tonga has been plotting
+# to sneak ahead of [New Zealanders] by introducing daylight-saving time.''
+# Since Kiribati has moved the Date Line it's not clear what Tonga will do.
+
+# Don Mundell writes in the 1997-02-20 Tonga Chronicle
+# <a href="http://www.tongatapu.net.to/tonga/homeland/timebegins.htm">
+# How Tonga became `The Land where Time Begins'
+# </a>:
+
+# Until 1941 Tonga maintained a standard time 50 minutes ahead of NZST
+# 12 hours and 20 minutes ahead of GMT.  When New Zealand adjusted its
+# standard time in 1940s, Tonga had the choice of subtracting from its
+# local time to come on the same standard time as New Zealand or of
+# advancing its time to maintain the differential of 13 degrees
+# (approximately 50 minutes ahead of New Zealand time).
+#
+# Because His Majesty King Taufa'ahau Tupou IV, then Crown Prince
+# Tungi, preferred to ensure Tonga's title as the land where time
+# begins, the Legislative Assembly approved the latter change.
+#
+# But some of the older, more conservative members from the outer
+# islands objected. "If at midnight on Dec. 31, we move ahead 40
+# minutes, as your Royal Highness wishes, what becomes of the 40
+# minutes we have lost?"
+#
+# The Crown Prince, presented an unanswerable argument: "Remember that
+# on the World Day of Prayer, you would be the first people on Earth
+# to say your prayers in the morning."
+
+# From Paul Eggert (1999-08-12):
+# Shanks says the transition was on 1968-10-01; go with Mundell.
+
+# From Eric Ulevik (1999-05-03):
+# Tonga's director of tourism, who is also secretary of the National Millenium
+# Committee, has a plan to get Tonga back in front.
+# He has proposed a one-off move to tropical daylight saving for Tonga from
+# October to March, which has won approval in principle from the Tongan
+# Government.
+
+# From Steffen Thorsen (1999-09-09):
+# * Tonga will introduce DST in November
+#
+# I was given this link by John Letts:
+# <a hef="http://news.bbc.co.uk/hi/english/world/asia-pacific/newsid_424000/424764.stm">
+# http://news.bbc.co.uk/hi/english/world/asia-pacific/newsid_424000/424764.stm
+# </a>
+#
+# I have not been able to find exact dates for the transition in November
+# yet. By reading this article it seems like Fiji will be 14 hours ahead
+# of UTC as well, but as far as I know Fiji will only be 13 hours ahead
+# (12 + 1 hour DST).
+
+# From Arthur David Olson (1999-09-20):
+# According to <a href="http://www.tongaonline.com/news/sept1799.html>
+# http://www.tongaonline.com/news/sept1799.html
+# </a>:
+# "Daylight Savings Time will take effect on Oct. 2 through April 15, 2000
+# and annually thereafter from the first Saturday in October through the
+# third Saturday of April.  Under the system approved by Privy Council on
+# Sept. 10, clocks must be turned ahead one hour on the opening day and
+# set back an hour on the closing date."
+# Alas, no indication of the time of day.
+
+# From Rives McDow (1999-10-06):
+# Tonga started its Daylight Saving on Saturday morning October 2nd at 0200am.
+# Daylight Saving ends on April 16 at 0300am which is Sunday morning.
+
+# From Steffen Thorsen (2000-10-31):
+# Back in March I found a notice on the website http://www.tongaonline.com
+# that Tonga changed back to standard time one month early, on March 19
+# instead of the original reported date April 16. Unfortunately, the article
+# is no longer available on the site, and I did not make a copy of the
+# text, and I have forgotten to report it here.
+# (Original URL was: http://www.tongaonline.com/news/march162000.htm )
+
+# From Rives McDow (2000-12-01):
+# Tonga is observing DST as of 2000-11-04 and will stop on 2001-01-27.
+
+# From Sione Moala-Mafi (2001-09-20) via Rives McDow:
+# At 2:00am on the first Sunday of November, the standard time in the Kingdom
+# shall be moved forward by one hour to 3:00am.  At 2:00am on the last Sunday
+# of January the standard time in the Kingdom shall be moved backward by one
+# hour to 1:00am.
+
+# From Pulu 'Anau (2002-11-05):
+# The law was for 3 years, supposedly to get renewed.  It wasn't.
+
+
+# Wake
+
+# From Vernice Anderson, Personal Secretary to Philip Jessup,
+# US Ambassador At Large (oral history interview, 1971-02-02):
+#
+# Saturday, the 14th [of October, 1950] -- ...  The time was all the
+# more confusing at that point, because we had crossed the
+# International Date Line, thus getting two Sundays.  Furthermore, we
+# discovered that Wake Island had two hours of daylight saving time
+# making calculation of time in Washington difficult if not almost
+# impossible.
+#
+# http://www.trumanlibrary.org/wake/meeting.htm
+
+# From Paul Eggert (2003-03-23):
+# We have no other report of DST in Wake Island, so omit this info for now.
+
+###############################################################################
+
+# The International Date Line
+
+# From Gwillim Law (2000-01-03):
+#
+# The International Date Line is not defined by any international standard,
+# convention, or treaty.  Mapmakers are free to draw it as they please.
+# Reputable mapmakers will simply ensure that every point of land appears on
+# the correct side of the IDL, according to the date legally observed there.
+#
+# When Kiribati adopted a uniform date in 1995, thereby moving the Phoenix and
+# Line Islands to the west side of the IDL (or, if you prefer, moving the IDL
+# to the east side of the Phoenix and Line Islands), I suppose that most
+# mapmakers redrew the IDL following the boundary of Kiribati.  Even that line
+# has a rather arbitrary nature.  The straight-line boundaries between Pacific
+# island nations that are shown on many maps are based on an international
+# convention, but are not legally binding national borders.... The date is
+# governed by the IDL; therefore, even on the high seas, there may be some
+# places as late as fourteen hours later than UTC.  And, since the IDL is not
+# an international standard, there are some places on the high seas where the
+# correct date is ambiguous.
+
+# From Wikipedia <http://en.wikipedia.org/wiki/Time_zone> (2005-08-31):
+# Before 1920, all ships kept local apparent time on the high seas by setting
+# their clocks at night or at the morning sight so that, given the ship's
+# speed and direction, it would be 12 o'clock when the Sun crossed the ship's
+# meridian (12 o'clock = local apparent noon).  During 1917, at the
+# Anglo-French Conference on Time-keeping at Sea, it was recommended that all
+# ships, both military and civilian, should adopt hourly standard time zones
+# on the high seas.  Whenever a ship was within the territorial waters of any
+# nation it would use that nation's standard time.  The captain was permitted
+# to change his ship's clocks at a time of his choice following his ship's
+# entry into another zone time--he often chose midnight.  These zones were
+# adopted by all major fleets between 1920 and 1925 but not by many
+# independent merchant ships until World War II.
+
+# From Paul Eggert, using references suggested by Oscar van Vlijmen
+# (2005-03-20):
+#
+# The American Practical Navigator (2002)
+# <http://pollux.nss.nima.mil/pubs/pubs_j_apn_sections.html?rid=187>
+# talks only about the 180-degree meridian with respect to ships in
+# international waters; it ignores the international date line.
diff --git a/JodaTime/src/java/org/joda/time/tz/src/backward b/JodaTime/src/java/org/joda/time/tz/src/backward
index e34f405e1..4ddfe41e9 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/backward
+++ b/JodaTime/src/java/org/joda/time/tz/src/backward
@@ -1,113 +1,106 @@
-# @(#)backward	7.29
-
-# This file provides links between current names for time zones
-# and their old names.  Many names changed in late 1993.
-
-Link	Africa/Bamako		Africa/Timbuktu
-Link	America/Argentina/Catamarca	America/Argentina/ComodRivadavia
-Link	America/Adak		America/Atka
-Link	America/Argentina/Buenos_Aires	America/Buenos_Aires
-Link	America/Argentina/Catamarca	America/Catamarca
-Link	America/Argentina/Cordoba	America/Cordoba
-Link	America/Tijuana		America/Ensenada
-Link	America/Indiana/Indianapolis	America/Fort_Wayne
-Link	America/Indiana/Indianapolis	America/Indianapolis
-Link	America/Argentina/Jujuy	America/Jujuy
-Link	America/Indiana/Knox	America/Knox_IN
-Link	America/Kentucky/Louisville	America/Louisville
-Link	America/Argentina/Mendoza	America/Mendoza
-Link	America/Rio_Branco	America/Porto_Acre
-Link	America/Argentina/Cordoba	America/Rosario
-Link	America/St_Thomas	America/Virgin
-Link	Asia/Ashgabat		Asia/Ashkhabad
-Link	Asia/Chongqing		Asia/Chungking
-Link	Asia/Dhaka		Asia/Dacca
-Link	Asia/Macau		Asia/Macao
-Link	Asia/Jerusalem		Asia/Tel_Aviv
-Link	Asia/Thimphu		Asia/Thimbu
-Link	Asia/Makassar		Asia/Ujung_Pandang
-Link	Asia/Ulaanbaatar	Asia/Ulan_Bator
-Link	Australia/Sydney	Australia/ACT
-Link	Australia/Sydney	Australia/Canberra
-Link	Australia/Lord_Howe	Australia/LHI
-Link	Australia/Sydney	Australia/NSW
-Link	Australia/Darwin	Australia/North
-Link	Australia/Brisbane	Australia/Queensland
-Link	Australia/Adelaide	Australia/South
-Link	Australia/Hobart	Australia/Tasmania
-Link	Australia/Melbourne	Australia/Victoria
-Link	Australia/Perth		Australia/West
-Link	Australia/Broken_Hill	Australia/Yancowinna
-Link	America/Rio_Branco	Brazil/Acre
-Link	America/Noronha		Brazil/DeNoronha
-Link	America/Sao_Paulo	Brazil/East
-Link	America/Manaus		Brazil/West
-Link	America/Chicago		CST6CDT
-Link	America/Halifax		Canada/Atlantic
-Link	America/Winnipeg	Canada/Central
-Link	America/Regina		Canada/East-Saskatchewan
-Link	America/Toronto		Canada/Eastern
-Link	America/Edmonton	Canada/Mountain
-Link	America/St_Johns	Canada/Newfoundland
-Link	America/Vancouver	Canada/Pacific
-Link	America/Regina		Canada/Saskatchewan
-Link	America/Whitehorse	Canada/Yukon
-Link	America/Santiago	Chile/Continental
-Link	Pacific/Easter		Chile/EasterIsland
-Link	America/Havana		Cuba
-Link	America/Panama		EST
-Link	America/New_York	EST5EDT
-Link	Africa/Cairo		Egypt
-Link	Europe/Dublin		Eire
-Link	Europe/London		Europe/Belfast
-Link	Europe/Chisinau		Europe/Tiraspol
-Link	Europe/London		GB
-Link	Europe/London		GB-Eire
-Link	Etc/GMT			GMT+0
-Link	Etc/GMT			GMT-0
-Link	Etc/GMT			GMT0
-Link	Etc/GMT			Greenwich
-Link	Pacific/Honolulu	HST
-Link	Asia/Hong_Kong		Hongkong
-Link	Atlantic/Reykjavik	Iceland
-Link	Asia/Tehran		Iran
-Link	Asia/Jerusalem		Israel
-Link	America/Jamaica		Jamaica
-Link	Asia/Tokyo		Japan
-Link	Pacific/Kwajalein	Kwajalein
-Link	Africa/Tripoli		Libya
-Link	America/Phoenix		MST
-Link	America/Denver		MST7MDT
-Link	America/Tijuana		Mexico/BajaNorte
-Link	America/Mazatlan	Mexico/BajaSur
-Link	America/Mexico_City	Mexico/General
-Link	Pacific/Auckland	NZ
-Link	Pacific/Chatham		NZ-CHAT
-Link	America/Denver		Navajo
-Link	Asia/Shanghai		PRC
-Link	America/Los_Angeles	PST8PDT
-Link	Pacific/Pago_Pago	Pacific/Samoa
-Link	Pacific/Truk		Pacific/Yap
-Link	Europe/Warsaw		Poland
-Link	Europe/Lisbon		Portugal
-Link	Asia/Taipei		ROC
-Link	Asia/Seoul		ROK
-Link	Asia/Singapore		Singapore
-Link	Europe/Istanbul		Turkey
-Link	Etc/UCT			UCT
-Link	America/Anchorage	US/Alaska
-Link	America/Adak		US/Aleutian
-Link	America/Phoenix		US/Arizona
-Link	America/Chicago		US/Central
-Link	America/Indiana/Indianapolis	US/East-Indiana
-Link	America/New_York	US/Eastern
-Link	Pacific/Honolulu	US/Hawaii
-Link	America/Indiana/Knox	US/Indiana-Starke
-Link	America/Detroit		US/Michigan
-Link	America/Denver		US/Mountain
-Link	America/Los_Angeles	US/Pacific
-Link	Pacific/Pago_Pago	US/Samoa
-Link	Etc/UTC			UTC
-Link	Etc/UTC			Universal
-Link	Europe/Moscow		W-SU
-Link	Etc/UTC			Zulu
+# @(#)backward	7.30
+
+# This file provides links between current names for time zones
+# and their old names.  Many names changed in late 1993.
+
+Link	Africa/Bamako		Africa/Timbuktu
+Link	America/Argentina/Catamarca	America/Argentina/ComodRivadavia
+Link	America/Adak		America/Atka
+Link	America/Argentina/Buenos_Aires	America/Buenos_Aires
+Link	America/Argentina/Catamarca	America/Catamarca
+Link	America/Argentina/Cordoba	America/Cordoba
+Link	America/Tijuana		America/Ensenada
+Link	America/Indiana/Indianapolis	America/Fort_Wayne
+Link	America/Indiana/Indianapolis	America/Indianapolis
+Link	America/Argentina/Jujuy	America/Jujuy
+Link	America/Indiana/Knox	America/Knox_IN
+Link	America/Kentucky/Louisville	America/Louisville
+Link	America/Argentina/Mendoza	America/Mendoza
+Link	America/Rio_Branco	America/Porto_Acre
+Link	America/Argentina/Cordoba	America/Rosario
+Link	America/St_Thomas	America/Virgin
+Link	Asia/Ashgabat		Asia/Ashkhabad
+Link	Asia/Chongqing		Asia/Chungking
+Link	Asia/Dhaka		Asia/Dacca
+Link	Asia/Macau		Asia/Macao
+Link	Asia/Jerusalem		Asia/Tel_Aviv
+Link	Asia/Thimphu		Asia/Thimbu
+Link	Asia/Makassar		Asia/Ujung_Pandang
+Link	Asia/Ulaanbaatar	Asia/Ulan_Bator
+Link	Australia/Sydney	Australia/ACT
+Link	Australia/Sydney	Australia/Canberra
+Link	Australia/Lord_Howe	Australia/LHI
+Link	Australia/Sydney	Australia/NSW
+Link	Australia/Darwin	Australia/North
+Link	Australia/Brisbane	Australia/Queensland
+Link	Australia/Adelaide	Australia/South
+Link	Australia/Hobart	Australia/Tasmania
+Link	Australia/Melbourne	Australia/Victoria
+Link	Australia/Perth		Australia/West
+Link	Australia/Broken_Hill	Australia/Yancowinna
+Link	America/Rio_Branco	Brazil/Acre
+Link	America/Noronha		Brazil/DeNoronha
+Link	America/Sao_Paulo	Brazil/East
+Link	America/Manaus		Brazil/West
+Link	America/Halifax		Canada/Atlantic
+Link	America/Winnipeg	Canada/Central
+Link	America/Regina		Canada/East-Saskatchewan
+Link	America/Toronto		Canada/Eastern
+Link	America/Edmonton	Canada/Mountain
+Link	America/St_Johns	Canada/Newfoundland
+Link	America/Vancouver	Canada/Pacific
+Link	America/Regina		Canada/Saskatchewan
+Link	America/Whitehorse	Canada/Yukon
+Link	America/Santiago	Chile/Continental
+Link	Pacific/Easter		Chile/EasterIsland
+Link	America/Havana		Cuba
+Link	Africa/Cairo		Egypt
+Link	Europe/Dublin		Eire
+Link	Europe/London		Europe/Belfast
+Link	Europe/Chisinau		Europe/Tiraspol
+Link	Europe/London		GB
+Link	Europe/London		GB-Eire
+Link	Etc/GMT			GMT+0
+Link	Etc/GMT			GMT-0
+Link	Etc/GMT			GMT0
+Link	Etc/GMT			Greenwich
+Link	Asia/Hong_Kong		Hongkong
+Link	Atlantic/Reykjavik	Iceland
+Link	Asia/Tehran		Iran
+Link	Asia/Jerusalem		Israel
+Link	America/Jamaica		Jamaica
+Link	Asia/Tokyo		Japan
+Link	Pacific/Kwajalein	Kwajalein
+Link	Africa/Tripoli		Libya
+Link	America/Tijuana		Mexico/BajaNorte
+Link	America/Mazatlan	Mexico/BajaSur
+Link	America/Mexico_City	Mexico/General
+Link	Pacific/Auckland	NZ
+Link	Pacific/Chatham		NZ-CHAT
+Link	America/Denver		Navajo
+Link	Asia/Shanghai		PRC
+Link	Pacific/Pago_Pago	Pacific/Samoa
+Link	Pacific/Truk		Pacific/Yap
+Link	Europe/Warsaw		Poland
+Link	Europe/Lisbon		Portugal
+Link	Asia/Taipei		ROC
+Link	Asia/Seoul		ROK
+Link	Asia/Singapore		Singapore
+Link	Europe/Istanbul		Turkey
+Link	Etc/UCT			UCT
+Link	America/Anchorage	US/Alaska
+Link	America/Adak		US/Aleutian
+Link	America/Phoenix		US/Arizona
+Link	America/Chicago		US/Central
+Link	America/Indiana/Indianapolis	US/East-Indiana
+Link	America/New_York	US/Eastern
+Link	Pacific/Honolulu	US/Hawaii
+Link	America/Indiana/Knox	US/Indiana-Starke
+Link	America/Detroit		US/Michigan
+Link	America/Denver		US/Mountain
+Link	America/Los_Angeles	US/Pacific
+Link	Pacific/Pago_Pago	US/Samoa
+Link	Etc/UTC			UTC
+Link	Etc/UTC			Universal
+Link	Europe/Moscow		W-SU
+Link	Etc/UTC			Zulu
diff --git a/JodaTime/src/java/org/joda/time/tz/src/europe b/JodaTime/src/java/org/joda/time/tz/src/europe
index 6f8f8d1e3..8782860e8 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/europe
+++ b/JodaTime/src/java/org/joda/time/tz/src/europe
@@ -1,2446 +1,2447 @@
-# @(#)europe	7.95
-
-# This data is by no means authoritative; if you think you know better,
-# go ahead and edit the file (and please send any changes to
-# tz@elsie.nci.nih.gov for general use in the future).
-
-# From Paul Eggert (1999-10-29):
-# A good source for time zone historical data outside the U.S. is
-# Thomas G. Shanks, The International Atlas (5th edition),
-# San Diego: ACS Publications, Inc. (1999).
-#
-# Gwillim Law writes that a good source
-# for recent time zone data is the International Air Transport
-# Association's Standard Schedules Information Manual (IATA SSIM),
-# published semiannually.  Law sent in several helpful summaries
-# of the IATA's data after 1990.
-#
-# Except where otherwise noted, Shanks is the source for entries through 1991,
-# and IATA SSIM is the source for entries afterwards.
-#
-# Other sources occasionally used include:
-#
-#	Edward W. Whitman, World Time Differences,
-#	Whitman Publishing Co, 2 Niagara Av, Ealing, London (undated),
-#	which I found in the UCLA library.
-#
-#	<a href="http://www.pettswoodvillage.co.uk/Daylight_Savings_William_Willett.pdf">
-#	William Willett, The Waste of Daylight, 19th edition
-#	</a> (1914-03)
-#
-#	Brazil's Departamento Servico da Hora (DSH),
-#	<a href="http://pcdsh01.on.br/HISTHV.htm">
-#	History of Summer Time
-#	</a> (1998-09-21, in Portuguese)
-
-#
-# I invented the abbreviations marked `*' in the following table;
-# the rest are from earlier versions of this file, or from other sources.
-# Corrections are welcome!
-#                   std dst  2dst
-#                   LMT           Local Mean Time
-#       -4:00       AST ADT       Atlantic
-#       -3:00       WGT WGST      Western Greenland*
-#       -1:00       EGT EGST      Eastern Greenland*
-#        0:00       GMT BST  BDST Greenwich, British Summer
-#        0:00       GMT IST       Greenwich, Irish Summer
-#        0:00       WET WEST WEMT Western Europe
-#        0:19:32.13 AMT NST       Amsterdam, Netherlands Summer (1835-1937)*
-#        0:20       NET NEST      Netherlands (1937-1940)*
-#        1:00       CET CEST CEMT Central Europe
-#        1:00:14    SET           Swedish (1879-1899)*
-#        2:00       EET EEST      Eastern Europe
-#        3:00       MSK MSD       Moscow
-#
-# A reliable and entertaining source about time zones, especially in Britain,
-# Derek Howse, Greenwich time and longitude, Philip Wilson Publishers (1997).
-
-# From Peter Ilieve (1994-12-04),
-# The original six [EU members]: Belgium, France, (West) Germany, Italy,
-# Luxembourg, the Netherlands.
-# Plus, from 1 Jan 73: Denmark, Ireland, United Kingdom.
-# Plus, from 1 Jan 81: Greece.
-# Plus, from 1 Jan 86: Spain, Portugal.
-# Plus, from 1 Jan 95: Austria, Finland, Sweden. (Norway negotiated terms for
-# entry but in a referendum on 28 Nov 94 the people voted No by 52.2% to 47.8%
-# on a turnout of 88.6%. This was almost the same result as Norway's previous
-# referendum in 1972, they are the only country to have said No twice.
-# Referendums in the other three countries voted Yes.)
-# ...
-# Estonia ... uses EU dates but not at 01:00 GMT, they use midnight GMT.
-# I don't think they know yet what they will do from 1996 onwards.
-# ...
-# There shouldn't be any [current members who are not using EU rules].
-# A Directive has the force of law, member states are obliged to enact
-# national law to implement it. The only contentious issue was the
-# different end date for the UK and Ireland, and this was always allowed
-# in the Directive.
-
-
-###############################################################################
-
-# Britain (United Kingdom) and Ireland (Eire)
-
-# From Peter Ilieve (1994-07-06):
-#
-# On 17 Jan 1994 the Independent, a UK quality newspaper, had a piece about
-# historical vistas along the Thames in west London. There was a photo
-# and a sketch map showing some of the sightlines involved. One paragraph
-# of the text said:
-#
-# `An old stone obelisk marking a forgotten terrestrial meridian stands
-# beside the river at Kew. In the 18th century, before time and longitude
-# was standardised by the Royal Observatory in Greenwich, scholars observed
-# this stone and the movement of stars from Kew Observatory nearby. They
-# made their calculations and set the time for the Horse Guards and Parliament,
-# but now the stone is obscured by scrubwood and can only be seen by walking
-# along the towpath within a few yards of it.'
-#
-# I have a one inch to one mile map of London and my estimate of the stone's
-# position is 51 deg. 28' 30" N, 0 deg. 18' 45" W. The longitude should
-# be within about +-2". The Ordnance Survey grid reference is TQ172761.
-#
-# [This yields GMTOFF = -0:01:15 for London LMT in the 18th century.]
-
-# From Paul Eggert (1993-11-18):
-#
-# Howse writes that Britain was the first country to use standard time.
-# The railways cared most about the inconsistencies of local mean time,
-# and it was they who forced a uniform time on the country.
-# The original idea was credited to Dr. William Hyde Wollaston (1766-1828)
-# and was popularized by Abraham Follett Osler (1808-1903).
-# The first railway to adopt London time was the Great Western Railway
-# in November 1840; other railways followed suit, and by 1847 most
-# (though not all) railways used London time.  On 1847-09-22 the
-# Railway Clearing House, an industry standards body, recommended that GMT be
-# adopted at all stations as soon as the General Post Office permitted it.
-# The transition occurred on 12-01 for the L&NW, the Caledonian,
-# and presumably other railways; the January 1848 Bradshaw's lists many
-# railways as using GMT.  By 1855 the vast majority of public
-# clocks in Britain were set to GMT (though some, like the great clock
-# on Tom Tower at Christ Church, Oxford, were fitted with two minute hands,
-# one for local time and one for GMT).  The last major holdout was the legal
-# system, which stubbornly stuck to local time for many years, leading
-# to oddities like polls opening at 08:13 and closing at 16:13.
-# The legal system finally switched to GMT when the Statutes (Definition
-# of Time) Act took effect; it received the Royal Assent on 1880-08-02.
-#
-# In the tables below, we condense this complicated story into a single
-# transition date for London, namely 1847-12-01.  We don't know as much
-# about Dublin, so we use 1880-08-02, the legal transition time.
-
-# From Paul Eggert (2003-09-27):
-# Summer Time was first seriously proposed by William Willett (1857-1915),
-# a London builder and member of the Royal Astronomical Society
-# who circulated a pamphlet ``The Waste of Daylight'' (1907)
-# that proposed advancing clocks 20 minutes on each of four Sundays in April,
-# and retarding them by the same amount on four Sundays in September.
-# A bill was drafted in 1909 and introduced in Parliament several times,
-# but it met with ridicule and opposition, especially from farming interests.
-# Later editions of the pamphlet proposed one-hour summer time, and
-# it was eventually adopted as a wartime measure in 1916.
-# See: Summer Time Arrives Early, The Times (2000-05-18).
-# A monument to Willett was unveiled on 1927-05-21, in an open space in
-# a 45-acre wood near Chislehurst, Kent that was purchased by popular
-# subscription and open to the public.  On the south face of the monolith,
-# designed by G. W. Miller, is the the William Willett Memorial Sundial,
-# which is permanently set to Summer Time.
-
-# From Winston Churchill (1934-04-28):
-# It is one of the paradoxes of history that we should owe the boon of
-# summer time, which gives every year to the people of this country
-# between 160 and 170 hours more daylight leisure, to a war which
-# plunged Europe into darkness for four years, and shook the
-# foundations of civilization throughout the world.
-#	-- <a href="http://www.winstonchurchill.org/fh114willett.htm">
-#	"A Silent Toast to William Willett", Pictorial Weekly
-#	</a>
-
-# From Paul Eggert (1996-09-03):
-# The OED Supplement says that the English originally said ``Daylight Saving''
-# when they were debating the adoption of DST in 1908; but by 1916 this
-# term appears only in quotes taken from DST's opponents, whereas the
-# proponents (who eventually won the argument) are quoted as using ``Summer''.
-
-# From Arthur David Olson (1989-01-19):
-#
-# A source at the British Information Office in New York avers that it's
-# known as "British" Summer Time in all parts of the United Kingdom.
-
-# Date: 4 Jan 89 08:57:25 GMT (Wed)
-# From: Jonathan Leffler
-# [British Summer Time] is fixed annually by Act of Parliament.
-# If you can predict what Parliament will do, you should be in
-# politics making a fortune, not computing.
-
-# From Chris Carrier (1996-06-14):
-# I remember reading in various wartime issues of the London Times the
-# acronym BDST for British Double Summer Time.  Look for the published
-# time of sunrise and sunset in The Times, when BDST was in effect, and
-# if you find a zone reference it will say, "All times B.D.S.T."
-
-# From Joseph S. Myers (1999-09-02):
-# ... some military cables (WO 219/4100 - this is a copy from the
-# main SHAEF archives held in the US National Archives, SHAEF/5252/8/516)
-# agree that the usage is BDST (this appears in a message dated 17 Feb 1945).
-
-# From Joseph S. Myers (2000-10-03):
-# On 18th April 1941, Sir Stephen Tallents of the BBC wrote to Sir
-# Alexander Maxwell of the Home Office asking whether there was any
-# official designation; the reply of the 21st was that there wasn't
-# but he couldn't think of anything better than the "Double British
-# Summer Time" that the BBC had been using informally.
-# http://student.cusu.cam.ac.uk/~jsm28/british-time/bbc-19410418.png
-# http://student.cusu.cam.ac.uk/~jsm28/british-time/ho-19410421.png
-
-# From Sir Alexander Maxwell in the above-mentioned letter (1941-04-21):
-# [N]o official designation has as far as I know been adopted for the time
-# which is to be introduced in May....
-# I cannot think of anything better than "Double British Summer Time"
-# which could not be said to run counter to any official description.
-
-# From Paul Eggert (2000-10-02):
-# Howse writes (p 157) `DBST' too, but `BDST' seems to have been common
-# and follows the more usual convention of putting the location name first,
-# so we use `BDST'.
-
-# Peter Ilieve (1998-04-19) described at length
-# the history of summer time legislation in the United Kingdom.
-# Since 1998 Joseph S. Myers has been updating
-# and extending this list, which can be found in
-# <a href="http://student.cusu.cam.ac.uk/~jsm28/british-time/">
-# History of legal time in Britain
-# </a>
-
-# From Joseph S. Myers (1998-01-06):
-#
-# The legal time in the UK outside of summer time is definitely GMT, not UTC;
-# see Lord Tanlaw's speech
-# <a href="http://www.parliament.the-stationery-office.co.uk/pa/ld199697/ldhansrd/pdvn/lds97/text/70611-20.htm#70611-20_head0">
-# (Lords Hansard 11 June 1997 columns 964 to 976)
-# </a>.
-
-# From Paul Eggert (2001-07-18):
-#
-# For lack of other data, we'll follow Shanks for Eire in 1940-1948.
-#
-# Given Ilieve and Myers's data, the following claims by Shanks are incorrect:
-#     * Wales did not switch from GMT to daylight saving time until
-#	1921 Apr 3, when they began to conform with the rest of Great Britain.
-# Actually, Wales was identical after 1880.
-#     * Eire had two transitions on 1916 Oct 1.
-# It actually just had one transition.
-#     * Northern Ireland used single daylight saving time throughout WW II.
-# Actually, it conformed to Britain.
-#     * GB-Eire changed standard time to 1 hour ahead of GMT on 1968-02-18.
-# Actually, that date saw the usual switch to summer time.
-# Standard time was not changed until 1968-10-27 (the clocks didn't change).
-#
-# Here is another incorrect claim by Shanks:
-#     * Jersey, Guernsey, and the Isle of Man did not switch from GMT
-#	to daylight saving time until 1921 Apr 3, when they began to
-#	conform with Great Britain.
-# S.R.&O. 1916, No. 382 and HO 45/10811/312364 (quoted above) say otherwise.
-#
-# The following claim by Shanks is possible though doubtful;
-# we'll ignore it for now.
-#     * Dublin's 1971-10-31 switch was at 02:00, even though London's was 03:00.
-#
-#
-# Whitman says Dublin Mean Time was -0:25:21, which is more precise than Shanks.
-# Perhaps this was Dunsink Observatory Time, as Dunsink Observatory
-# (8 km NW of Dublin's center) seemingly was to Dublin as Greenwich was
-# to London.  For example:
-#
-#   "Timeball on the ballast office is down.  Dunsink time."
-#   -- James Joyce, Ulysses
-
-# From Joseph S. Myers (2005-01-26):
-# Irish laws are available online at www.irishstatutebook.ie.  These include 
-# various relating to legal time, for example:
-# 
-# ZZA13Y1923.html ZZA12Y1924.html ZZA8Y1925.html ZZSIV20PG1267.html
-# 
-# ZZSI71Y1947.html ZZSI128Y1948.html ZZSI23Y1949.html ZZSI41Y1950.html
-# ZZSI27Y1951.html ZZSI73Y1952.html
-# 
-# ZZSI11Y1961.html ZZSI232Y1961.html ZZSI182Y1962.html
-# ZZSI167Y1963.html ZZSI257Y1964.html ZZSI198Y1967.html
-# ZZA23Y1968.html ZZA17Y1971.html
-# 
-# ZZSI67Y1981.html ZZSI212Y1982.html ZZSI45Y1986.html
-# ZZSI264Y1988.html ZZSI52Y1990.html ZZSI371Y1992.html
-# ZZSI395Y1994.html ZZSI484Y1997.html ZZSI506Y2001.html
-#
-# [These are all relative to the root, e.g., the first is
-# <http://www.irishstatutebook.ie/ZZA13Y1923.html>.]
-# 
-# (These are those I found, but there could be more.  In any case these 
-# should allow various updates to the comments in the europe file to cover 
-# the laws applicable in Ireland.)
-# 
-# (Note that the time in the Republic of Ireland since 1968 has been defined 
-# in terms of standard time being GMT+1 with a period of winter time when it 
-# is GMT, rather than standard time being GMT with a period of summer time 
-# being GMT+1.)
-
-# From Paul Eggert (1999-03-28):
-# Clive Feather (<news:859845706.26043.0@office.demon.net>, 1997-03-31)
-# reports that Folkestone (Cheriton) Shuttle Terminal uses Concession Time
-# (CT), equivalent to French civil time.
-# Julian Hill (<news:36118128.5A14@virgin.net>, 1998-09-30) reports that
-# trains between Dollands Moor (the freight facility next door)
-# and Frethun run in CT.
-# My admittedly uninformed guess is that the terminal has two authorities,
-# the French concession operators and the British civil authorities,
-# and that the time depends on who you're talking to.
-# If, say, the British police were called to the station for some reason,
-# I would expect the official police report to use GMT/BST and not CET/CEST.
-# This is a borderline case, but for now let's stick to GMT/BST.
-
-# From an anonymous contributor (1996-06-02):
-# The law governing time in Ireland is under Statutory Instrument SI 395/94,
-# which gives force to European Union 7th Council Directive # 94/21/EC.
-# Under this directive, the Minister for Justice in Ireland makes appropriate
-# regulations. I spoke this morning with the Secretary of the Department of
-# Justice (tel +353 1 678 9711) who confirmed to me that the correct name is
-# "Irish Summer Time", abbreviated to "IST".
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-# Summer Time Act, 1916
-Rule	GB-Eire	1916	only	-	May	21	2:00s	1:00	BST
-Rule	GB-Eire	1916	only	-	Oct	 1	2:00s	0	GMT
-# S.R.&O. 1917, No. 358
-Rule	GB-Eire	1917	only	-	Apr	 8	2:00s	1:00	BST
-Rule	GB-Eire	1917	only	-	Sep	17	2:00s	0	GMT
-# S.R.&O. 1918, No. 274
-Rule	GB-Eire	1918	only	-	Mar	24	2:00s	1:00	BST
-Rule	GB-Eire	1918	only	-	Sep	30	2:00s	0	GMT
-# S.R.&O. 1919, No. 297
-Rule	GB-Eire	1919	only	-	Mar	30	2:00s	1:00	BST
-Rule	GB-Eire	1919	only	-	Sep	29	2:00s	0	GMT
-# S.R.&O. 1920, No. 458
-Rule	GB-Eire	1920	only	-	Mar	28	2:00s	1:00	BST
-# S.R.&O. 1920, No. 1844
-Rule	GB-Eire	1920	only	-	Oct	25	2:00s	0	GMT
-# S.R.&O. 1921, No. 363
-Rule	GB-Eire	1921	only	-	Apr	 3	2:00s	1:00	BST
-Rule	GB-Eire	1921	only	-	Oct	 3	2:00s	0	GMT
-# S.R.&O. 1922, No. 264
-Rule	GB-Eire	1922	only	-	Mar	26	2:00s	1:00	BST
-Rule	GB-Eire	1922	only	-	Oct	 8	2:00s	0	GMT
-# The Summer Time Act, 1922
-Rule	GB-Eire	1923	only	-	Apr	Sun>=16	2:00s	1:00	BST
-Rule	GB-Eire	1923	1924	-	Sep	Sun>=16	2:00s	0	GMT
-Rule	GB-Eire	1924	only	-	Apr	Sun>=9	2:00s	1:00	BST
-Rule	GB-Eire	1925	1926	-	Apr	Sun>=16	2:00s	1:00	BST
-# The Summer Time Act, 1925
-Rule	GB-Eire	1925	1938	-	Oct	Sun>=2	2:00s	0	GMT
-Rule	GB-Eire	1927	only	-	Apr	Sun>=9	2:00s	1:00	BST
-Rule	GB-Eire	1928	1929	-	Apr	Sun>=16	2:00s	1:00	BST
-Rule	GB-Eire	1930	only	-	Apr	Sun>=9	2:00s	1:00	BST
-Rule	GB-Eire	1931	1932	-	Apr	Sun>=16	2:00s	1:00	BST
-Rule	GB-Eire	1933	only	-	Apr	Sun>=9	2:00s	1:00	BST
-Rule	GB-Eire	1934	only	-	Apr	Sun>=16	2:00s	1:00	BST
-Rule	GB-Eire	1935	only	-	Apr	Sun>=9	2:00s	1:00	BST
-Rule	GB-Eire	1936	1937	-	Apr	Sun>=16	2:00s	1:00	BST
-Rule	GB-Eire	1938	only	-	Apr	Sun>=9	2:00s	1:00	BST
-Rule	GB-Eire	1939	only	-	Apr	Sun>=16	2:00s	1:00	BST
-# S.R.&O. 1939, No. 1379
-Rule	GB-Eire	1939	only	-	Nov	Sun>=16	2:00s	0	GMT
-# S.R.&O. 1940, No. 172 and No. 1883
-Rule	GB-Eire	1940	only	-	Feb	Sun>=23	2:00s	1:00	BST
-# S.R.&O. 1941, No. 476
-Rule	GB-Eire	1941	only	-	May	Sun>=2	1:00s	2:00	BDST
-Rule	GB-Eire	1941	1943	-	Aug	Sun>=9	1:00s	1:00	BST
-# S.R.&O. 1942, No. 506
-Rule	GB-Eire	1942	1944	-	Apr	Sun>=2	1:00s	2:00	BDST
-# S.R.&O. 1944, No. 932
-Rule	GB-Eire	1944	only	-	Sep	Sun>=16	1:00s	1:00	BST
-# S.R.&O. 1945, No. 312
-Rule	GB-Eire	1945	only	-	Apr	Mon>=2	1:00s	2:00	BDST
-Rule	GB-Eire	1945	only	-	Jul	Sun>=9	1:00s	1:00	BST
-# S.R.&O. 1945, No. 1208
-Rule	GB-Eire	1945	1946	-	Oct	Sun>=2	2:00s	0	GMT
-Rule	GB-Eire	1946	only	-	Apr	Sun>=9	2:00s	1:00	BST
-# The Summer Time Act, 1947
-Rule	GB-Eire	1947	only	-	Mar	16	2:00s	1:00	BST
-Rule	GB-Eire	1947	only	-	Apr	13	1:00s	2:00	BDST
-Rule	GB-Eire	1947	only	-	Aug	10	1:00s	1:00	BST
-Rule	GB-Eire	1947	only	-	Nov	 2	2:00s	0	GMT
-# Summer Time Order, 1948 (S.I. 1948/495)
-Rule	GB-Eire	1948	only	-	Mar	14	2:00s	1:00	BST
-Rule	GB-Eire	1948	only	-	Oct	31	2:00s	0	GMT
-# Summer Time Order, 1949 (S.I. 1949/373)
-Rule	GB-Eire	1949	only	-	Apr	 3	2:00s	1:00	BST
-Rule	GB-Eire	1949	only	-	Oct	30	2:00s	0	GMT
-# Summer Time Order, 1950 (S.I. 1950/518)
-# Summer Time Order, 1951 (S.I. 1951/430)
-# Summer Time Order, 1952 (S.I. 1952/451)
-Rule	GB-Eire	1950	1952	-	Apr	Sun>=14	2:00s	1:00	BST
-Rule	GB-Eire	1950	1952	-	Oct	Sun>=21	2:00s	0	GMT
-# revert to the rules of the Summer Time Act, 1925
-Rule	GB-Eire	1953	only	-	Apr	Sun>=16	2:00s	1:00	BST
-Rule	GB-Eire	1953	1960	-	Oct	Sun>=2	2:00s	0	GMT
-Rule	GB-Eire	1954	only	-	Apr	Sun>=9	2:00s	1:00	BST
-Rule	GB-Eire	1955	1956	-	Apr	Sun>=16	2:00s	1:00	BST
-Rule	GB-Eire	1957	only	-	Apr	Sun>=9	2:00s	1:00	BST
-Rule	GB-Eire	1958	1959	-	Apr	Sun>=16	2:00s	1:00	BST
-Rule	GB-Eire	1960	only	-	Apr	Sun>=9	2:00s	1:00	BST
-# Summer Time Order, 1961 (S.I. 1961/71)
-# Summer Time (1962) Order, 1961 (S.I. 1961/2465)
-# Summer Time Order, 1963 (S.I. 1963/81)
-Rule	GB-Eire	1961	1963	-	Mar	lastSun	2:00s	1:00	BST
-Rule	GB-Eire	1961	1968	-	Oct	Sun>=23	2:00s	0	GMT
-# Summer Time (1964) Order, 1963 (S.I. 1963/2101)
-# Summer Time Order, 1964 (S.I. 1964/1201)
-# Summer Time Order, 1967 (S.I. 1967/1148)
-Rule	GB-Eire	1964	1967	-	Mar	Sun>=19	2:00s	1:00	BST
-# Summer Time Order, 1968 (S.I. 1968/117)
-Rule	GB-Eire	1968	only	-	Feb	18	2:00s	1:00	BST
-# The British Standard Time Act, 1968
-#	(no summer time)
-# The Summer Time Act, 1972
-Rule	GB-Eire	1972	1980	-	Mar	Sun>=16	2:00s	1:00	BST
-Rule	GB-Eire	1972	1980	-	Oct	Sun>=23	2:00s	0	GMT
-# Summer Time Order, 1980 (S.I. 1980/1089)
-# Summer Time Order, 1982 (S.I. 1982/1673)
-# Summer Time Order, 1986 (S.I. 1986/223)
-# Summer Time Order, 1988 (S.I. 1988/931)
-Rule	GB-Eire	1981	1995	-	Mar	lastSun	1:00u	1:00	BST
-Rule	GB-Eire 1981	1989	-	Oct	Sun>=23	1:00u	0	GMT
-# Summer Time Order, 1989 (S.I. 1989/985)
-# Summer Time Order, 1992 (S.I. 1992/1729)
-# Summer Time Order 1994 (S.I. 1994/2798)
-Rule	GB-Eire 1990	1995	-	Oct	Sun>=22	1:00u	0	GMT
-# Summer Time Order 1997 (S.I. 1997/2982)
-# See EU for rules starting in 1996.
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/London	-0:01:15 -	LMT	1847 Dec  1
-			 0:00	GB-Eire	%s	1968 Oct 27
-			 1:00	-	BST	1971 Oct 31 2:00u
-			 0:00	GB-Eire	%s	1996
-			 0:00	EU	GMT/BST
-Zone	Europe/Dublin	-0:25:00 -	LMT	1880 Aug  2
-			-0:25:21 -	DMT	1916 May 21 2:00
-			-0:25:21 1:00	IST	1916 Oct  1 2:00s
-			 0:00	GB-Eire	%s	1921 Dec  6 # independence
-			 0:00	GB-Eire	GMT/IST	1940 Feb 25 2:00
-			 0:00	1:00	IST	1946 Oct  6 2:00
-			 0:00	-	GMT	1947 Mar 16 2:00
-			 0:00	1:00	IST	1947 Nov  2 2:00
-			 0:00	-	GMT	1948 Apr 18 2:00
-			 0:00	GB-Eire	GMT/IST	1968 Oct 27
-			 1:00	-	IST	1971 Oct 31 2:00u
-			 0:00	GB-Eire	GMT/IST	1996
-			 0:00	EU	GMT/IST
-
-###############################################################################
-
-# Continental Europe
-
-# EU rules are for the European Union, previously known as the EC, EEC,
-# Common Market, etc.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	EU	1977	1980	-	Apr	Sun>=1	 1:00u	1:00	S
-Rule	EU	1977	only	-	Sep	lastSun	 1:00u	0	-
-Rule	EU	1978	only	-	Oct	 1	 1:00u	0	-
-Rule	EU	1979	1995	-	Sep	lastSun	 1:00u	0	-
-Rule	EU	1981	max	-	Mar	lastSun	 1:00u	1:00	S
-Rule	EU	1996	max	-	Oct	lastSun	 1:00u	0	-
-# The most recent directive covers the years starting in 2002.  See:
-# <a href="http://europa.eu.int/eur-lex/en/lif/dat/2000/en_300L0084.html"
-# Directive 2000/84/EC of the European Parliament and of the Council
-# of 19 January 2001 on summer-time arrangements.
-# </a>
-
-# W-Eur differs from EU only in that W-Eur uses standard time.
-Rule	W-Eur	1977	1980	-	Apr	Sun>=1	 1:00s	1:00	S
-Rule	W-Eur	1977	only	-	Sep	lastSun	 1:00s	0	-
-Rule	W-Eur	1978	only	-	Oct	 1	 1:00s	0	-
-Rule	W-Eur	1979	1995	-	Sep	lastSun	 1:00s	0	-
-Rule	W-Eur	1981	max	-	Mar	lastSun	 1:00s	1:00	S
-Rule	W-Eur	1996	max	-	Oct	lastSun	 1:00s	0	-
-
-# Older C-Eur rules are for convenience in the tables.
-# From 1977 on, C-Eur differs from EU only in that C-Eur uses standard time.
-Rule	C-Eur	1916	only	-	Apr	30	23:00	1:00	S
-Rule	C-Eur	1916	only	-	Oct	 1	 1:00	0	-
-Rule	C-Eur	1917	1918	-	Apr	Mon>=15	 2:00s	1:00	S
-Rule	C-Eur	1917	1918	-	Sep	Mon>=15	 2:00s	0	-
-Rule	C-Eur	1940	only	-	Apr	 1	 2:00s	1:00	S
-Rule	C-Eur	1942	only	-	Nov	 2	 2:00s	0	-
-Rule	C-Eur	1943	only	-	Mar	29	 2:00s	1:00	S
-Rule	C-Eur	1943	only	-	Oct	 4	 2:00s	0	-
-Rule	C-Eur	1944	only	-	Apr	 3	 2:00s	1:00	S
-# Whitman gives 1944 Oct 7; go with Shanks.
-Rule	C-Eur	1944	only	-	Oct	 2	 2:00s	0	-
-Rule	C-Eur	1977	1980	-	Apr	Sun>=1	 2:00s	1:00	S
-Rule	C-Eur	1977	only	-	Sep	lastSun	 2:00s	0	-
-Rule	C-Eur	1978	only	-	Oct	 1	 2:00s	0	-
-Rule	C-Eur	1979	1995	-	Sep	lastSun	 2:00s	0	-
-Rule	C-Eur	1981	max	-	Mar	lastSun	 2:00s	1:00	S
-Rule	C-Eur	1996	max	-	Oct	lastSun	 2:00s	0	-
-
-# E-Eur differs from EU only in that E-Eur switches at midnight local time.
-Rule	E-Eur	1977	1980	-	Apr	Sun>=1	 0:00	1:00	S
-Rule	E-Eur	1977	only	-	Sep	lastSun	 0:00	0	-
-Rule	E-Eur	1978	only	-	Oct	 1	 0:00	0	-
-Rule	E-Eur	1979	1995	-	Sep	lastSun	 0:00	0	-
-Rule	E-Eur	1981	max	-	Mar	lastSun	 0:00	1:00	S
-Rule	E-Eur	1996	max	-	Oct	lastSun	 0:00	0	-
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Russia	1917	only	-	Jul	 1	23:00	1:00	MST	# Moscow Summer Time
-Rule	Russia	1917	only	-	Dec	28	 0:00	0	MMT	# Moscow Mean Time
-Rule	Russia	1918	only	-	May	31	22:00	2:00	MDST	# Moscow Double Summer Time
-Rule	Russia	1918	only	-	Sep	16	 1:00	1:00	MST
-Rule	Russia	1919	only	-	May	31	23:00	2:00	MDST
-Rule	Russia	1919	only	-	Jul	 1	 2:00	1:00	S
-Rule	Russia	1919	only	-	Aug	16	 0:00	0	-
-Rule	Russia	1921	only	-	Feb	14	23:00	1:00	S
-Rule	Russia	1921	only	-	Mar	20	23:00	2:00	M # Midsummer
-Rule	Russia	1921	only	-	Sep	 1	 0:00	1:00	S
-Rule	Russia	1921	only	-	Oct	 1	 0:00	0	-
-# Act No.925 of the Council of Ministers of the USSR (1980-10-24):
-Rule	Russia	1981	1984	-	Apr	 1	 0:00	1:00	S
-Rule	Russia	1981	1983	-	Oct	 1	 0:00	0	-
-# Act No.967 of the Council of Ministers of the USSR (1984-09-13), repeated in
-# Act No.227 of the Council of Ministers of the USSR (1989-03-14):
-Rule	Russia	1984	1991	-	Sep	lastSun	 2:00s	0	-
-Rule	Russia	1985	1991	-	Mar	lastSun	 2:00s	1:00	S
-#
-Rule	Russia	1992	only	-	Mar	lastSat	 23:00	1:00	S
-Rule	Russia	1992	only	-	Sep	lastSat	 23:00	0	-
-Rule	Russia	1993	max	-	Mar	lastSun	 2:00s	1:00	S
-Rule	Russia	1993	1995	-	Sep	lastSun	 2:00s	0	-
-Rule	Russia	1996	max	-	Oct	lastSun	 2:00s	0	-
-
-# These are for backward compatibility with older versions.
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	WET		0:00	EU	WE%sT
-Zone	CET		1:00	C-Eur	CE%sT
-Zone	MET		1:00	C-Eur	ME%sT
-Zone	EET		2:00	EU	EE%sT
-
-# Previous editions of this database used abbreviations like MET DST
-# for Central European Summer Time, but this didn't agree with common usage.
-
-# From Markus Kuhn (1996-07-12):
-# The official German names ... are
-#
-#	Mitteleuropaeische Zeit (MEZ)         = UTC+01:00
-#	Mitteleuropaeische Sommerzeit (MESZ)  = UTC+02:00
-#
-# as defined in the German Time Act (Gesetz ueber die Zeitbestimmung (ZeitG),
-# 1978-07-25, Bundesgesetzblatt, Jahrgang 1978, Teil I, S. 1110-1111)....
-# I wrote ... to the German Federal Physical-Technical Institution
-#
-#	Physikalisch-Technische Bundesanstalt (PTB)
-#	Laboratorium 4.41 "Zeiteinheit"
-#	Postfach 3345
-#	D-38023 Braunschweig
-#	phone: +49 531 592-0
-#
-# ... I received today an answer letter from Dr. Peter Hetzel, head of the PTB
-# department for time and frequency transmission.  He explained that the
-# PTB translates MEZ and MESZ into English as
-#
-#	Central European Time (CET)         = UTC+01:00
-#	Central European Summer Time (CEST) = UTC+02:00
-
-
-# Albania
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Albania	1940	only	-	Jun	16	0:00	1:00	S
-Rule	Albania	1942	only	-	Nov	 2	3:00	0	-
-Rule	Albania	1943	only	-	Mar	29	2:00	1:00	S
-Rule	Albania	1943	only	-	Apr	10	3:00	0	-
-Rule	Albania	1974	only	-	May	 4	0:00	1:00	S
-Rule	Albania	1974	only	-	Oct	 2	0:00	0	-
-Rule	Albania	1975	only	-	May	 1	0:00	1:00	S
-Rule	Albania	1975	only	-	Oct	 2	0:00	0	-
-Rule	Albania	1976	only	-	May	 2	0:00	1:00	S
-Rule	Albania	1976	only	-	Oct	 3	0:00	0	-
-Rule	Albania	1977	only	-	May	 8	0:00	1:00	S
-Rule	Albania	1977	only	-	Oct	 2	0:00	0	-
-Rule	Albania	1978	only	-	May	 6	0:00	1:00	S
-Rule	Albania	1978	only	-	Oct	 1	0:00	0	-
-Rule	Albania	1979	only	-	May	 5	0:00	1:00	S
-Rule	Albania	1979	only	-	Sep	30	0:00	0	-
-Rule	Albania	1980	only	-	May	 3	0:00	1:00	S
-Rule	Albania	1980	only	-	Oct	 4	0:00	0	-
-Rule	Albania	1981	only	-	Apr	26	0:00	1:00	S
-Rule	Albania	1981	only	-	Sep	27	0:00	0	-
-Rule	Albania	1982	only	-	May	 2	0:00	1:00	S
-Rule	Albania	1982	only	-	Oct	 3	0:00	0	-
-Rule	Albania	1983	only	-	Apr	18	0:00	1:00	S
-Rule	Albania	1983	only	-	Oct	 1	0:00	0	-
-Rule	Albania	1984	only	-	Apr	 1	0:00	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Tirane	1:19:20 -	LMT	1914
-			1:00	-	CET	1940 Jun 16
-			1:00	Albania	CE%sT	1984 Jul
-			1:00	EU	CE%sT
-
-# Andorra
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Andorra	0:06:04 -	LMT	1901
-			0:00	-	WET	1946 Sep 30
-			1:00	-	CET	1985 Mar 31 2:00
-			1:00	EU	CE%sT
-
-# Austria
-
-# From Paul Eggert (2003-02-28): Shanks gives 1918-06-16 and
-# 1945-11-18, but the Austrian Federal Office of Metrology and
-# Surveying (BEV) gives 1918-09-16 and for Vienna gives the "alleged"
-# date of 1945-04-12 with no time.  For the 1980-04-06 transition
-# Shanks gives 02:00, the BEV 00:00.  Go with the BEV, and guess 02:00
-# for 1945-04-12.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Austria	1920	only	-	Apr	 5	2:00s	1:00	S
-Rule	Austria	1920	only	-	Sep	13	2:00s	0	-
-Rule	Austria	1946	only	-	Apr	14	2:00s	1:00	S
-Rule	Austria	1946	1948	-	Oct	Sun>=1	2:00s	0	-
-Rule	Austria	1947	only	-	Apr	 6	2:00s	1:00	S
-Rule	Austria	1948	only	-	Apr	18	2:00s	1:00	S
-Rule	Austria	1980	only	-	Apr	 6	0:00	1:00	S
-Rule	Austria	1980	only	-	Sep	28	0:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Vienna	1:05:20 -	LMT	1893 Apr
-			1:00	C-Eur	CE%sT	1920
-			1:00	Austria	CE%sT	1940 Apr  1 2:00s
-			1:00	C-Eur	CE%sT	1945 Apr  2 2:00s
-			1:00	1:00	CEST	1945 Apr 12 2:00s
-			1:00	-	CET	1946
-			1:00	Austria	CE%sT	1981
-			1:00	EU	CE%sT
-
-# Belarus
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Minsk	1:50:16 -	LMT	1880
-			1:50	-	MMT	1924 May 2 # Minsk Mean Time
-			2:00	-	EET	1930 Jun 21
-			3:00	-	MSK	1941 Jun 28
-			1:00	C-Eur	CE%sT	1944 Jul  3
-			3:00	Russia	MSK/MSD	1990
-			3:00	-	MSK	1991 Mar 31 2:00s
-			2:00	1:00	EEST	1991 Sep 29 2:00s
-			2:00	-	EET	1992 Mar 29 0:00s
-			2:00	1:00	EEST	1992 Sep 27 0:00s
-			2:00	Russia	EE%sT
-
-# Belgium
-#
-# From Paul Eggert (1997-07-02):
-# Entries from 1918 through 1991 are taken from:
-#	Annuaire de L'Observatoire Royal de Belgique,
-#	Avenue Circulaire, 3, B-1180 BRUXELLES, CLVIIe annee, 1991
-#	(Imprimerie HAYEZ, s.p.r.l., Rue Fin, 4, 1080 BRUXELLES, MCMXC),
-#	pp 8-9.
-# LMT before 1892 was 0:17:30, according to the official journal of Belgium:
-#	Moniteur Belge, Samedi 30 Avril 1892, N.121.
-# Thanks to Pascal Delmoitie for these references.
-# The 1918 rules are listed for completeness; they apply to unoccupied Belgium.
-# Assume Brussels switched to WET in 1918 when the armistice took effect.
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Belgium	1918	only	-	Mar	 9	 0:00s	1:00	S
-Rule	Belgium	1918	1919	-	Oct	Sat>=1	23:00s	0	-
-Rule	Belgium	1919	only	-	Mar	 1	23:00s	1:00	S
-Rule	Belgium	1920	only	-	Feb	14	23:00s	1:00	S
-Rule	Belgium	1920	only	-	Oct	23	23:00s	0	-
-Rule	Belgium	1921	only	-	Mar	14	23:00s	1:00	S
-Rule	Belgium	1921	only	-	Oct	25	23:00s	0	-
-Rule	Belgium	1922	only	-	Mar	25	23:00s	1:00	S
-Rule	Belgium	1922	1927	-	Oct	Sat>=1	23:00s	0	-
-Rule	Belgium	1923	only	-	Apr	21	23:00s	1:00	S
-Rule	Belgium	1924	only	-	Mar	29	23:00s	1:00	S
-Rule	Belgium	1925	only	-	Apr	 4	23:00s	1:00	S
-# DSH writes that a royal decree of 1926-02-22 specified the Sun following 3rd
-# Sat in Apr (except if it's Easter, in which case it's one Sunday earlier),
-# to Sun following 1st Sat in Oct, and that a royal decree of 1928-09-15
-# changed the transition times to 02:00 GMT.
-Rule	Belgium	1926	only	-	Apr	17	23:00s	1:00	S
-Rule	Belgium	1927	only	-	Apr	 9	23:00s	1:00	S
-Rule	Belgium	1928	only	-	Apr	14	23:00s	1:00	S
-Rule	Belgium	1928	1938	-	Oct	Sun>=2	 2:00s	0	-
-Rule	Belgium	1929	only	-	Apr	21	 2:00s	1:00	S
-Rule	Belgium	1930	only	-	Apr	13	 2:00s	1:00	S
-Rule	Belgium	1931	only	-	Apr	19	 2:00s	1:00	S
-Rule	Belgium	1932	only	-	Apr	 3	 2:00s	1:00	S
-Rule	Belgium	1933	only	-	Mar	26	 2:00s	1:00	S
-Rule	Belgium	1934	only	-	Apr	 8	 2:00s	1:00	S
-Rule	Belgium	1935	only	-	Mar	31	 2:00s	1:00	S
-Rule	Belgium	1936	only	-	Apr	19	 2:00s	1:00	S
-Rule	Belgium	1937	only	-	Apr	 4	 2:00s	1:00	S
-Rule	Belgium	1938	only	-	Mar	27	 2:00s	1:00	S
-Rule	Belgium	1939	only	-	Apr	16	 2:00s	1:00	S
-Rule	Belgium	1939	only	-	Nov	19	 2:00s	0	-
-Rule	Belgium	1940	only	-	Feb	25	 2:00s	1:00	S
-Rule	Belgium	1944	only	-	Sep	17	 2:00s	0	-
-Rule	Belgium	1945	only	-	Apr	 2	 2:00s	1:00	S
-Rule	Belgium	1945	only	-	Sep	16	 2:00s	0	-
-Rule	Belgium	1946	only	-	May	19	 2:00s	1:00	S
-Rule	Belgium	1946	only	-	Oct	 7	 2:00s	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Brussels	0:17:30 -	LMT	1880
-			0:17:30	-	BMT	1892 May  1 12:00 # Brussels MT
-			0:00	-	WET	1914 Nov  8
-			1:00	-	CET	1916 May  1  0:00
-			1:00	C-Eur	CE%sT	1918 Nov 11 11:00u
-			0:00	Belgium	WE%sT	1940 May 20  2:00s
-			1:00	C-Eur	CE%sT	1944 Sep  3
-			1:00	Belgium	CE%sT	1977
-			1:00	EU	CE%sT
-
-# Bosnia and Herzegovina
-# see Serbia and Montenegro
-
-# Bulgaria
-#
-# From Plamen Simenov via Steffen Thorsen (1999-09-09):
-# A document of Government of Bulgaria (No.94/1997) says:
-# EET --> EETDST is in 03:00 Local time in last Sunday of March ...
-# EETDST --> EET is in 04:00 Local time in last Sunday of October
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Bulg	1979	only	-	Mar	31	23:00	1:00	S
-Rule	Bulg	1979	only	-	Oct	 1	 1:00	0	-
-Rule	Bulg	1980	1982	-	Apr	Sat<=7	23:00	1:00	S
-Rule	Bulg	1980	only	-	Sep	29	 1:00	0	-
-Rule	Bulg	1981	only	-	Sep	27	 2:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Sofia	1:33:16 -	LMT	1880
-			1:56:56	-	IMT	1894 Nov 30 # Istanbul MT?
-			2:00	-	EET	1942 Nov  2  3:00
-			1:00	C-Eur	CE%sT	1945 Apr  2  3:00
-			2:00	-	EET	1979 Mar 31 23:00
-			2:00	Bulg	EE%sT	1982 Sep 26  2:00
-			2:00	C-Eur	EE%sT	1991
-			2:00	E-Eur	EE%sT	1997
-			2:00	EU	EE%sT
-
-# Croatia
-# see Serbia and Montenegro
-
-# Cyprus
-# Please see the `asia' file for Asia/Nicosia.
-
-# Czech Republic
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Czech	1945	only	-	Apr	 8	2:00s	1:00	S
-Rule	Czech	1945	only	-	Nov	18	2:00s	0	-
-Rule	Czech	1946	only	-	May	 6	2:00s	1:00	S
-Rule	Czech	1946	1949	-	Oct	Sun>=1	2:00s	0	-
-Rule	Czech	1947	only	-	Apr	20	2:00s	1:00	S
-Rule	Czech	1948	only	-	Apr	18	2:00s	1:00	S
-Rule	Czech	1949	only	-	Apr	 9	2:00s	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Prague	0:57:44 -	LMT	1850
-			0:57:44	-	PMT	1891 Oct     # Prague Mean Time
-			1:00	C-Eur	CE%sT	1944 Sep 17 2:00s
-			1:00	Czech	CE%sT	1979
-			1:00	EU	CE%sT
-
-# Denmark, Faeroe Islands, and Greenland
-
-# From Jesper Norgaard Welen (2005-04-26):
-# http://www.hum.aau.dk/~poe/tid/tine/DanskTid.htm says that the law
-# [introducing standard time] was in effect from 1894-01-01....
-# The page http://www.retsinfo.dk/_GETDOCI_/ACCN/A18930008330-REGL
-# confirms this, and states that the law was put forth 1893-03-29.
-#
-# The EU treaty with effect from 1973:
-# http://www.retsinfo.dk/_GETDOCI_/ACCN/A19722110030-REGL
-#
-# This provoked a new law from 1974 to make possible summer time changes
-# in subsequenet decrees with the law
-# http://www.retsinfo.dk/_GETDOCI_/ACCN/A19740022330-REGL
-#
-# It seems however that no decree was set forward until 1980.  I have
-# not found any decree, but in another related law, the effecting DST
-# changes are stated explicitly to be from 1980-04-06 at 02:00 to
-# 1980-09-28 at 02:00.  If this is true, this differs slightly from
-# the EU rule in that DST runs to 02:00, not 03:00.  We don't know
-# when Denmark began using the EU rule correctly, but we have only
-# confirmation of the 1980-time, so I presume it was correct in 1981:
-# The law is about the management of the extra hour, concerning
-# working hours reported and effect on obligatory-rest rules (which
-# was suspended on that night):
-# http://www.retsinfo.dk/_GETDOCI_/ACCN/C19801120554-REGL
-
-# From Jesper Norgaard Welen (2005-06-11):
-# The Herning Folkeblad (1980-09-26) reported that the night between
-# Saturday and Sunday the clock is set back from three to two.
-
-# From Paul Eggert (2005-06-11):
-# Hence the "02:00" of the 1980 law refers to standard time, not
-# wall-clock time, and so the EU rules were in effect in 1980.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Denmark	1916	only	-	May	14	23:00	1:00	S
-Rule	Denmark	1916	only	-	Sep	30	23:00	0	-
-Rule	Denmark	1940	only	-	May	15	 0:00	1:00	S
-Rule	Denmark	1945	only	-	Apr	 2	 2:00s	1:00	S
-Rule	Denmark	1945	only	-	Aug	15	 2:00s	0	-
-Rule	Denmark	1946	only	-	May	 1	 2:00s	1:00	S
-Rule	Denmark	1946	only	-	Sep	 1	 2:00s	0	-
-Rule	Denmark	1947	only	-	May	 4	 2:00s	1:00	S
-Rule	Denmark	1947	only	-	Aug	10	 2:00s	0	-
-Rule	Denmark	1948	only	-	May	 9	 2:00s	1:00	S
-Rule	Denmark	1948	only	-	Aug	 8	 2:00s	0	-
-#
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Europe/Copenhagen	 0:50:20 -	LMT	1890
-			 0:50:20 -	CMT	1894 Jan  1 # Copenhagen MT
-			 1:00	Denmark	CE%sT	1942 Nov  2 2:00s
-			 1:00	C-Eur	CE%sT	1945 Apr  2 2:00
-			 1:00	Denmark	CE%sT	1980
-			 1:00	EU	CE%sT
-Zone Atlantic/Faeroe	-0:27:04 -	LMT	1908 Jan 11	# Torshavn
-			 0:00	-	WET	1981
-			 0:00	EU	WE%sT
-#
-# From Paul Eggert (2004-10-31):
-# During World War II, Germany maintained secret manned weather stations in
-# East Greenland and Franz Josef Land, but we don't know their time zones.
-# My source for this is Wilhelm Dege's book mentioned under Svalbard.
-#
-# From Paul Eggert (1996-11-22):
-# Greenland joined the EU as part of Denmark, obtained home rule on 1979-05-01,
-# and left the EU on 1985-02-01.  It therefore should have been using EU
-# rules at least through 1984.  Shanks says Scoresbysund and Godthab
-# used C-Eur rules after 1980, but IATA SSIM (1991/1996) says they use EU
-# rules since at least 1991.  Assume EU rules since 1980.
-
-# From Gwillin Law (2001-06-06), citing
-# <http://www.statkart.no/efs/efshefter/2001/efs5-2001.pdf> (2001-03-15),
-# and with translations corrected by Steffen Thorsen:
-#
-# Greenland has four local times, and the relation to UTC
-# is according to the following time line:
-#
-# The military zone near Thule	UTC-4
-# Standard Greenland time	UTC-3
-# Scoresbysund			UTC-1
-# Danmarkshavn			UTC
-#
-# In the military area near Thule and in Danmarkshavn DST will not be
-# introduced.
-
-# From Rives McDow (2001-11-01):
-#
-# I correspond regularly with the Dansk Polarcenter, and wrote them at
-# the time to clarify the situation in Thule.  Unfortunately, I have
-# not heard back from them regarding my recent letter.  [But I have
-# info from earlier correspondence.]
-#
-# According to the center, a very small local time zone around Thule
-# Air Base keeps the time according to UTC-4, implementing daylight
-# savings using North America rules, changing the time at 02:00 local time....
-#
-# The east coast of Greenland north of the community of Scoresbysund
-# uses UTC in the same way as in Iceland, year round, with no dst.
-# There are just a few stations on this coast, including the
-# Danmarkshavn ICAO weather station mentioned in your September 29th
-# email.  The other stations are two sledge patrol stations in
-# Mestersvig and Daneborg, the air force base at Station Nord, and the
-# DPC research station at Zackenberg.
-#
-# Scoresbysund and two small villages nearby keep time UTC-1 and use
-# the same daylight savings time period as in West Greenland (Godthab).
-#
-# The rest of Greenland, including Godthab (this area, although it
-# includes central Greenland, is known as west Greenland), keeps time
-# UTC-3, with daylight savings methods according to European rules.
-#
-# It is common procedure to use UTC 0 in the wilderness of East and
-# North Greenland, because it is mainly Icelandic aircraft operators
-# maintaining traffic in these areas.  However, the official status of
-# this area is that it sticks with Godthab time.  This area might be
-# considered a dual time zone in some respects because of this.
-
-# From Rives McDow (2001-11-19):
-# I heard back from someone stationed at Thule; the time change took place
-# there at 2:00 AM.
-
-# From Paul Eggert (2001-11-19):
-# The 1997 CIA map shows Danmarkshavn on GMT; the 1995 map as like Godthab.
-# For lack of better info, assume they were like Godthab before 1996.
-# startkart.no says Thule does not observe DST, but this is clearly an error,
-# so go with Shanks for all Thule transitions.
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Thule	1991	1992	-	Mar	lastSun	2:00	1:00	D
-Rule	Thule	1991	1992	-	Sep	lastSun	2:00	0	S
-Rule	Thule	1993	max	-	Apr	Sun>=1	2:00	1:00	D
-Rule	Thule	1993	max	-	Oct	lastSun	2:00	0	S
-#
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Danmarkshavn -1:14:40 -	LMT	1916 Jul 28
-			-3:00	-	WGT	1980 Apr  6 2:00
-			-3:00	EU	WG%sT	1996
-			0:00	-	GMT
-Zone America/Scoresbysund -1:29:00 -	LMT	1916 Jul 28 # Ittoqqortoormiit
-			-2:00	-	CGT	1980 Apr  6 2:00
-			-2:00	C-Eur	CG%sT	1981 Mar 29
-			-1:00	EU	EG%sT
-Zone America/Godthab	-3:26:56 -	LMT	1916 Jul 28 # Nuuk
-			-3:00	-	WGT	1980 Apr  6 2:00
-			-3:00	EU	WG%sT
-Zone America/Thule	-4:35:08 -	LMT	1916 Jul 28 # Pituffik air base
-			-4:00	Thule	A%sT
-
-# Estonia
-# From Peter Ilieve (1994-10-15):
-# A relative in Tallinn confirms the accuracy of the data for 1989 onwards
-# [through 1994] and gives the legal authority for it,
-# a regulation of the Government of Estonia, No. 111 of 1989....
-#
-# From Peter Ilieve (1996-10-28):
-# [IATA SSIM (1992/1996) claims that the Baltic republics switch at 01:00s,
-# but a relative confirms that Estonia still switches at 02:00s, writing:]
-# ``I do not [know] exactly but there are some little different
-# (confusing) rules for International Air and Railway Transport Schedules
-# conversion in Sunday connected with end of summer time in Estonia....
-# A discussion is running about the summer time efficiency and effect on
-# human physiology.  It seems that Estonia maybe will not change to
-# summer time next spring.''
-
-# From Peter Ilieve (1998-11-04), heavily edited:
-# <a href="http://trip.rk.ee/cgi-bin/thw?${BASE}=akt&${OOHTML}=rtd&TA=1998&TO=1&AN=1390">
-# The 1998-09-22 Estonian time law
-# </a>
-# refers to the Eighth Directive and cites the association agreement between
-# the EU and Estonia, ratified by the Estonian law (RT II 1995, 22--27, 120).
-#
-# I also asked [my relative] whether they use any standard abbreviation
-# for their standard and summer times. He says no, they use "suveaeg"
-# (summer time) and "talveaeg" (winter time).
-
-# From <a href="http://www.baltictimes.com/">The Baltic Times</a> (1999-09-09)
-# via Steffen Thorsen:
-# This year will mark the last time Estonia shifts to summer time,
-# a council of the ruling coalition announced Sept. 6....
-# But what this could mean for Estonia's chances of joining the European
-# Union are still unclear.  In 1994, the EU declared summer time compulsory
-# for all member states until 2001.  Brussels has yet to decide what to do
-# after that.
-
-# From Mart Oruaas (2000-01-29):
-# Regulation no. 301 (1999-10-12) obsoletes previous regulation
-# no. 206 (1998-09-22) and thus sticks Estonia to +02:00 GMT for all
-# the year round.  The regulation is effective 1999-11-01.
-
-# From Toomas Soome (2002-02-21):
-# The Estonian government has changed once again timezone politics.
-# Now we are using again EU rules.
-#
-# From Urmet Jaanes (2002-03-28):
-# The legislative reference is Government decree No. 84 on 2002-02-21.
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Tallinn	1:39:00	-	LMT	1880
-			1:39:00	-	TMT	1918 Feb # Tallinn Mean Time
-			1:00	C-Eur	CE%sT	1919 Jul
-			1:39:00	-	TMT	1921 May
-			2:00	-	EET	1940 Aug  6
-			3:00	-	MSK	1941 Sep 15
-			1:00	C-Eur	CE%sT	1944 Sep 22
-			3:00	Russia	MSK/MSD	1989 Mar 26 2:00s
-			2:00	1:00	EEST	1989 Sep 24 2:00s
-			2:00	C-Eur	EE%sT	1998 Sep 22
-			2:00	EU	EE%sT	1999 Nov  1
-			2:00	-	EET	2002 Feb 21
-			2:00	EU	EE%sT
-
-# Finland
-#
-# From Hannu Strang (25 Sep 1994 06:03:37 UTC):
-# Well, here in Helsinki we're just changing from summer time to regular one,
-# and it's supposed to change at 4am...
-#
-# From Paul Eggert (25 Sep 1994):
-# Shanks says Finland has switched at 02:00 standard time since 1981.
-# Go with Strang instead.
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Finland	1942	only	-	Apr	3	0:00	1:00	S
-Rule	Finland	1942	only	-	Oct	3	0:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Helsinki	1:39:52 -	LMT	1878 May 31
-			1:39:52	-	HMT	1921 May    # Helsinki Mean Time
-			2:00	Finland	EE%sT	1981 Mar 29 2:00
-			2:00	EU	EE%sT
-
-# Aaland Is
-Link	Europe/Helsinki	Europe/Mariehamn
-
-
-# France
-
-# From Ciro Discepolo (2000-12-20):
-#
-# Henri Le Corre, Regimes Horaires pour le monde entier, Editions
-# Traditionnelles - Paris 2 books, 1993
-#
-# Gabriel, Traite de l'heure dans le monde, Guy Tredaniel editeur,
-# Paris, 1991
-#
-# Francoise Gauquelin, Problemes de l'heure resolus en astrologie,
-# Guy tredaniel, Paris 1987
-
-
-#
-# Shanks seems to use `24:00' ambiguously; we resolve it with Whitman.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	France	1916	only	-	Jun	14	23:00s	1:00	S
-Rule	France	1916	1919	-	Oct	Sun>=1	23:00s	0	-
-Rule	France	1917	only	-	Mar	24	23:00s	1:00	S
-Rule	France	1918	only	-	Mar	 9	23:00s	1:00	S
-Rule	France	1919	only	-	Mar	 1	23:00s	1:00	S
-Rule	France	1920	only	-	Feb	14	23:00s	1:00	S
-Rule	France	1920	only	-	Oct	23	23:00s	0	-
-Rule	France	1921	only	-	Mar	14	23:00s	1:00	S
-Rule	France	1921	only	-	Oct	25	23:00s	0	-
-Rule	France	1922	only	-	Mar	25	23:00s	1:00	S
-# DSH writes that a law of 1923-05-24 specified 3rd Sat in Apr at 23:00 to 1st
-# Sat in Oct at 24:00; and that in 1930, because of Easter, the transitions
-# were Apr 12 and Oct 5.  Go with Shanks.
-Rule	France	1922	1938	-	Oct	Sat>=1	23:00s	0	-
-Rule	France	1923	only	-	May	26	23:00s	1:00	S
-Rule	France	1924	only	-	Mar	29	23:00s	1:00	S
-Rule	France	1925	only	-	Apr	 4	23:00s	1:00	S
-Rule	France	1926	only	-	Apr	17	23:00s	1:00	S
-Rule	France	1927	only	-	Apr	 9	23:00s	1:00	S
-Rule	France	1928	only	-	Apr	14	23:00s	1:00	S
-Rule	France	1929	only	-	Apr	20	23:00s	1:00	S
-Rule	France	1930	only	-	Apr	12	23:00s	1:00	S
-Rule	France	1931	only	-	Apr	18	23:00s	1:00	S
-Rule	France	1932	only	-	Apr	 2	23:00s	1:00	S
-Rule	France	1933	only	-	Mar	25	23:00s	1:00	S
-Rule	France	1934	only	-	Apr	 7	23:00s	1:00	S
-Rule	France	1935	only	-	Mar	30	23:00s	1:00	S
-Rule	France	1936	only	-	Apr	18	23:00s	1:00	S
-Rule	France	1937	only	-	Apr	 3	23:00s	1:00	S
-Rule	France	1938	only	-	Mar	26	23:00s	1:00	S
-Rule	France	1939	only	-	Apr	15	23:00s	1:00	S
-Rule	France	1939	only	-	Nov	18	23:00s	0	-
-Rule	France	1940	only	-	Feb	25	 2:00	1:00	S
-# The French rules for 1941-1944 were not used in Paris, but Shanks writes
-# that they were used in Monaco and in many French locations.
-# Le Corre writes that the upper limit of the free zone was Arneguy, Orthez,
-# Mont-de-Marsan, Bazas, Langon, Lamotte-Montravel, Marouil, La
-# Rochefoucault, Champagne-Mouton, La Roche-Posay, La Haye-Decartes,
-# Loches, Montrichard, Vierzon, Bourges, Moulins, Digoin,
-# Paray-le-Monial, Montceau-les-Mines, Chalons-sur-Saone, Arbois,
-# Dole, Morez, St-Claude, and Collognes (Haute-Savioe).
-Rule	France	1941	only	-	May	 5	 0:00	2:00	M # Midsummer
-# Shanks says this transition occurred at Oct 6 1:00,
-# but go with Denis Excoffier (1997-12-12),
-# who quotes the Ephemerides Astronomiques for 1998 from Bureau des Longitudes
-# as saying 5/10/41 22hUT.
-Rule	France	1941	only	-	Oct	 6	 0:00	1:00	S
-Rule	France	1942	only	-	Mar	 9	 0:00	2:00	M
-Rule	France	1942	only	-	Nov	 2	 3:00	1:00	S
-Rule	France	1943	only	-	Mar	29	 2:00	2:00	M
-Rule	France	1943	only	-	Oct	 4	 3:00	1:00	S
-Rule	France	1944	only	-	Apr	 3	 2:00	2:00	M
-Rule	France	1944	only	-	Oct	 8	 1:00	1:00	S
-Rule	France	1945	only	-	Apr	 2	 2:00	2:00	M
-Rule	France	1945	only	-	Sep	16	 3:00	0	-
-# Shanks gives Mar 28 2:00 and Sep 26 3:00;
-# go with Excoffier's 28/3/76 0hUT and 25/9/76 23hUT.
-Rule	France	1976	only	-	Mar	28	 1:00	1:00	S
-Rule	France	1976	only	-	Sep	26	 1:00	0	-
-# Shanks gives 0:09 for Paris Mean Time, and Whitman gives 0:09:05,
-# but Howse quotes the actual French legislation as saying 0:09:21.
-# Go with Howse.  Howse writes that the time in France was officially based
-# on PMT-0:09:21 until 1978-08-09, when the time base finally switched to UTC.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Paris	0:09:21 -	LMT	1891 Mar 15  0:01
-			0:09:21	-	PMT	1911 Mar 11  0:01  # Paris MT
-# Shanks gives 1940 Jun 14 0:00; go with Excoffier and Le Corre.
-			0:00	France	WE%sT	1940 Jun 14 23:00
-# Le Corre says Paris stuck with occupied-France time after the liberation;
-# go with Shanks.
-			1:00	C-Eur	CE%sT	1944 Aug 25
-			0:00	France	WE%sT	1945 Sep 16  3:00
-			1:00	France	CE%sT	1977
-			1:00	EU	CE%sT
-
-# Germany
-
-# From Markus Kuhn (1998-09-29):
-# The German time zone web site by the Physikalisch-Technische
-# Bundesanstalt contains DST information back to 1916.
-# [See tz-link.htm for the URL.]
-
-# From Joerg Schilling (2002-10-23):
-# In 1945, Berlin was switched to Moscow Summer time (GMT+4) by <a
-# href="http://www.dhm.de/lemo/html/biografien/BersarinNikolai/">
-# General [Nikolai] Bersarin</a>.
-
-# From Paul Eggert (2003-03-08):
-# <a href="http://www.parlament-berlin.de/pds-fraktion.nsf/727459127c8b66ee8525662300459099/defc77cb784f180ac1256c2b0030274b/$FILE/bersarint.pdf">
-# says that Bersarin issued an order to use Moscow time on May 20.
-# However, Moscow did not observe daylight saving in 1945, so
-# this was equivalent to CEMT (GMT+3), not GMT+4.
-
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Germany	1945	only	-	Apr	 2	2:00s	1:00	S
-Rule	Germany	1945	only	-	May	24	2:00	2:00	M # Midsummer
-Rule	Germany	1945	only	-	Sep	24	3:00	1:00	S
-Rule	Germany	1945	only	-	Nov	18	2:00s	0	-
-Rule	Germany	1946	only	-	Apr	14	2:00s	1:00	S
-Rule	Germany	1946	only	-	Oct	 7	2:00s	0	-
-Rule	Germany	1947	1949	-	Oct	Sun>=1	2:00s	0	-
-Rule	Germany	1947	only	-	Apr	 6	2:00s	1:00	S
-Rule	Germany	1947	only	-	May	11	2:00s	2:00	M
-Rule	Germany	1947	only	-	Jun	29	3:00	1:00	S
-Rule	Germany	1948	only	-	Apr	18	2:00s	1:00	S
-Rule	Germany	1949	only	-	Apr	10	2:00s	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Berlin	0:53:28 -	LMT	1893 Apr
-			1:00	C-Eur	CE%sT	1945 Apr 2 2:00
-			1:00	Germany	CE%sT	1980
-			1:00	EU	CE%sT
-
-# Georgia
-# Please see the "asia" file for Asia/Tbilisi.
-# Herodotus (Histories, IV.45) says Georgia north of the Phasis (now Rioni)
-# is in Europe.  Our reference location Tbilisi is in the Asian part.
-
-# Gibraltar
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Europe/Gibraltar	-0:21:24 -	LMT	1880 Aug  2
-			0:00	GB-Eire	%s	1957 Apr 14 2:00
-			1:00	-	CET	1982
-			1:00	EU	CE%sT
-
-# Greece
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-# Whitman gives 1932 Jul 5 - Nov 1; go with Shanks.
-Rule	Greece	1932	only	-	Jul	 7	0:00	1:00	S
-Rule	Greece	1932	only	-	Sep	 1	0:00	0	-
-# Whitman gives 1941 Apr 25 - ?; go with Shanks.
-Rule	Greece	1941	only	-	Apr	 7	0:00	1:00	S
-# Whitman gives 1942 Feb 2 - ?; go with Shanks.
-Rule	Greece	1942	only	-	Nov	 2	3:00	0	-
-Rule	Greece	1943	only	-	Mar	30	0:00	1:00	S
-Rule	Greece	1943	only	-	Oct	 4	0:00	0	-
-# Whitman gives 1944 Oct 3 - Oct 31; go with Shanks.
-Rule	Greece	1952	only	-	Jul	 1	0:00	1:00	S
-Rule	Greece	1952	only	-	Nov	 2	0:00	0	-
-Rule	Greece	1975	only	-	Apr	12	0:00s	1:00	S
-Rule	Greece	1975	only	-	Nov	26	0:00s	0	-
-Rule	Greece	1976	only	-	Apr	11	2:00s	1:00	S
-Rule	Greece	1976	only	-	Oct	10	2:00s	0	-
-Rule	Greece	1977	1978	-	Apr	Sun>=1	2:00s	1:00	S
-Rule	Greece	1977	only	-	Sep	26	2:00s	0	-
-Rule	Greece	1978	only	-	Sep	24	4:00	0	-
-Rule	Greece	1979	only	-	Apr	 1	9:00	1:00	S
-Rule	Greece	1979	only	-	Sep	29	2:00	0	-
-Rule	Greece	1980	only	-	Apr	 1	0:00	1:00	S
-Rule	Greece	1980	only	-	Sep	28	0:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Athens	1:34:52 -	LMT	1895 Sep 14
-			1:34:52	-	AMT	1916 Jul 28 0:01     # Athens MT
-			2:00	Greece	EE%sT	1941 Apr 30
-			1:00	Greece	CE%sT	1944 Apr  4
-			2:00	Greece	EE%sT	1981
-			# Shanks says they switched to C-Eur in 1981;
-			# go with EU instead, since Greece joined it on Jan 1.
-			2:00	EU	EE%sT
-
-# Hungary
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Hungary	1918	only	-	Apr	 1	 3:00	1:00	S
-Rule	Hungary	1918	only	-	Sep	29	 3:00	0	-
-Rule	Hungary	1919	only	-	Apr	15	 3:00	1:00	S
-Rule	Hungary	1919	only	-	Sep	15	 3:00	0	-
-Rule	Hungary	1920	only	-	Apr	 5	 3:00	1:00	S
-Rule	Hungary	1920	only	-	Sep	30	 3:00	0	-
-Rule	Hungary	1945	only	-	May	 1	23:00	1:00	S
-Rule	Hungary	1945	only	-	Nov	 3	 0:00	0	-
-Rule	Hungary	1946	only	-	Mar	31	 2:00s	1:00	S
-Rule	Hungary	1946	1949	-	Oct	Sun>=1	 2:00s	0	-
-Rule	Hungary	1947	1949	-	Apr	Sun>=4	 2:00s	1:00	S
-Rule	Hungary	1950	only	-	Apr	17	 2:00s	1:00	S
-Rule	Hungary	1950	only	-	Oct	23	 2:00s	0	-
-Rule	Hungary	1954	1955	-	May	23	 0:00	1:00	S
-Rule	Hungary	1954	1955	-	Oct	 3	 0:00	0	-
-Rule	Hungary	1956	only	-	Jun	Sun>=1	 0:00	1:00	S
-Rule	Hungary	1956	only	-	Sep	lastSun	 0:00	0	-
-Rule	Hungary	1957	only	-	Jun	Sun>=1	 1:00	1:00	S
-Rule	Hungary	1957	only	-	Sep	lastSun	 3:00	0	-
-Rule	Hungary	1980	only	-	Apr	 6	 1:00	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Budapest	1:16:20 -	LMT	1890 Oct
-			1:00	C-Eur	CE%sT	1918
-			1:00	Hungary	CE%sT	1941 Apr  6  2:00
-			1:00	C-Eur	CE%sT	1945 May  1 23:00
-			1:00	Hungary	CE%sT	1980 Sep 28  2:00s
-			1:00	EU	CE%sT
-
-# Iceland
-#
-# From Adam David (1993-11-06):
-# The name of the timezone in Iceland for system / mail / news purposes is GMT.
-#
-# (1993-12-05):
-# This material is paraphrased from the 1988 edition of the University of
-# Iceland Almanak.
-#
-# From January 1st, 1908 the whole of Iceland was standardised at 1 hour
-# behind GMT. Previously, local mean solar time was used in different parts
-# of Iceland, the almanak had been based on Reykjavik mean solar time which
-# was 1 hour and 28 minutes behind GMT.
-#
-# "first day of winter" referred to [below] means the first day of the 26 weeks
-# of winter, according to the old icelandic calendar that dates back to the
-# time the norsemen first settled Iceland.  The first day of winter is always
-# Saturday, but is not dependent on the Julian or Gregorian calendars.
-#
-# (1993-12-10):
-# I have a reference from the Oxford Icelandic-English dictionary for the
-# beginning of winter, which ties it to the ecclesiastical calendar (and thus
-# to the julian/gregorian calendar) over the period in question.
-#	the winter begins on the Saturday next before St. Luke's day
-#	(old style), or on St. Luke's day, if a Saturday.
-# St. Luke's day ought to be traceable from ecclesiastical sources. "old style"
-# might be a reference to the Julian calendar as opposed to Gregorian, or it
-# might mean something else (???).
-#
-# From Paul Eggert (1999-10-29):
-# The Iceland Almanak, Shanks and Whitman disagree on many points.
-# We go with the Almanak, except for one claim from Shanks, namely that
-# Reykavik was 21W57 from 1837 to 1908, local mean time before that.
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Iceland	1917	1918	-	Feb	19	23:00	1:00	S
-Rule	Iceland	1917	only	-	Oct	21	 1:00	0	-
-Rule	Iceland	1918	only	-	Nov	16	 1:00	0	-
-Rule	Iceland	1939	only	-	Apr	29	23:00	1:00	S
-Rule	Iceland	1939	only	-	Nov	29	 2:00	0	-
-Rule	Iceland	1940	only	-	Feb	25	 2:00	1:00	S
-Rule	Iceland	1940	only	-	Nov	 3	 2:00	0	-
-Rule	Iceland	1941	only	-	Mar	 2	 1:00s	1:00	S
-Rule	Iceland	1941	only	-	Nov	 2	 1:00s	0	-
-Rule	Iceland	1942	only	-	Mar	 8	 1:00s	1:00	S
-Rule	Iceland	1942	only	-	Oct	25	 1:00s	0	-
-# 1943-1946 - first Sunday in March until first Sunday in winter
-Rule	Iceland	1943	1946	-	Mar	Sun>=1	 1:00s	1:00	S
-Rule	Iceland	1943	1948	-	Oct	Sun>=22	 1:00s	0	-
-# 1947-1967 - first Sunday in April until first Sunday in winter
-Rule	Iceland	1947	1967	-	Apr	Sun>=1	 1:00s	1:00	S
-# 1949 Oct transition delayed by 1 week
-Rule	Iceland	1949	only	-	Oct	30	 1:00s	0	-
-Rule	Iceland	1950	1966	-	Oct	Sun>=22	 1:00s	0	-
-Rule	Iceland	1967	only	-	Oct	29	 1:00s	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Atlantic/Reykjavik	-1:27:24 -	LMT	1837
-			-1:27:48 -	RMT	1908 # Reykjavik Mean Time?
-			-1:00	Iceland	IS%sT	1968 Apr 7 1:00s
-			 0:00	-	GMT
-
-# Italy
-#
-# From Paul Eggert (2001-03-06):
-# Sicily and Sardinia each had their own time zones from 1866 to 1893,
-# called Palermo Time (+00:53:28) and Cagliari Time (+00:36:32).
-# During World War II, German-controlled Italy used German time.
-# But these events all occurred before the 1970 cutoff,
-# so record only the time in Rome.
-#
-# From Paul Eggert (1996-05-06):
-# For Italian DST we have three sources: Shanks, Whitman, and F. Pollastri
-# <a href="http://toi.iriti.cnr.it/uk/ienitlt.html">
-# Day-light Saving Time in Italy (1996-03-14)
-# </a>
-# (`FP' below), taken from an Italian National Electrotechnical Institute
-# publication. When the three sources disagree, guess who's right, as follows:
-#
-# year	FP	Shanks (S)	Whitman (W)	Go with:
-# 1916	06-03	06-03 24:00	06-03 00:00	FP & W
-#	09-30	09-30 24:00	09-30 01:00	FP; guess 24:00s
-# 1917	04-01	03-31 24:00	03-31 00:00	FP & S
-#	09-30	09-29 24:00	09-30 01:00	FP & W
-# 1918	03-09	03-09 24:00	03-09 00:00	FP & S
-#	10-06	10-05 24:00	10-06 01:00	FP & W
-# 1919	03-01	03-01 24:00	03-01 00:00	FP & S
-#	10-04	10-04 24:00	10-04 01:00	FP; guess 24:00s
-# 1920	03-20	03-20 24:00	03-20 00:00	FP & S
-#	09-18	09-18 24:00	10-01 01:00	FP; guess 24:00s
-# 1944	04-02	04-03 02:00			S (see C-Eur)
-#	09-16	10-02 03:00			FP; guess 24:00s
-# 1945	09-14	09-16 24:00			FP; guess 24:00s
-# 1970	05-21	05-31 00:00			S
-#	09-20	09-27 00:00			S
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Italy	1916	only	-	Jun	 3	0:00s	1:00	S
-Rule	Italy	1916	only	-	Oct	 1	0:00s	0	-
-Rule	Italy	1917	only	-	Apr	 1	0:00s	1:00	S
-Rule	Italy	1917	only	-	Sep	30	0:00s	0	-
-Rule	Italy	1918	only	-	Mar	10	0:00s	1:00	S
-Rule	Italy	1918	1919	-	Oct	Sun>=1	0:00s	0	-
-Rule	Italy	1919	only	-	Mar	 2	0:00s	1:00	S
-Rule	Italy	1920	only	-	Mar	21	0:00s	1:00	S
-Rule	Italy	1920	only	-	Sep	19	0:00s	0	-
-Rule	Italy	1940	only	-	Jun	15	0:00s	1:00	S
-Rule	Italy	1944	only	-	Sep	17	0:00s	0	-
-Rule	Italy	1945	only	-	Apr	 2	2:00	1:00	S
-Rule	Italy	1945	only	-	Sep	15	0:00s	0	-
-Rule	Italy	1946	only	-	Mar	17	2:00s	1:00	S
-Rule	Italy	1946	only	-	Oct	 6	2:00s	0	-
-Rule	Italy	1947	only	-	Mar	16	0:00s	1:00	S
-Rule	Italy	1947	only	-	Oct	 5	0:00s	0	-
-Rule	Italy	1948	only	-	Feb	29	2:00s	1:00	S
-Rule	Italy	1948	only	-	Oct	 3	2:00s	0	-
-Rule	Italy	1966	1968	-	May	Sun>=22	0:00	1:00	S
-Rule	Italy	1966	1969	-	Sep	Sun>=22	0:00	0	-
-Rule	Italy	1969	only	-	Jun	 1	0:00	1:00	S
-Rule	Italy	1970	only	-	May	31	0:00	1:00	S
-Rule	Italy	1970	only	-	Sep	lastSun	0:00	0	-
-Rule	Italy	1971	1972	-	May	Sun>=22	0:00	1:00	S
-Rule	Italy	1971	only	-	Sep	lastSun	1:00	0	-
-Rule	Italy	1972	only	-	Oct	 1	0:00	0	-
-Rule	Italy	1973	only	-	Jun	 3	0:00	1:00	S
-Rule	Italy	1973	1974	-	Sep	lastSun	0:00	0	-
-Rule	Italy	1974	only	-	May	26	0:00	1:00	S
-Rule	Italy	1975	only	-	Jun	 1	0:00s	1:00	S
-Rule	Italy	1975	1977	-	Sep	lastSun	0:00s	0	-
-Rule	Italy	1976	only	-	May	30	0:00s	1:00	S
-Rule	Italy	1977	1979	-	May	Sun>=22	0:00s	1:00	S
-Rule	Italy	1978	only	-	Oct	 1	0:00s	0	-
-Rule	Italy	1979	only	-	Sep	30	0:00s	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Rome	0:49:56 -	LMT	1866 Sep 22
-			0:49:56	-	RMT	1893 Nov	# Rome Mean Time
-			1:00	Italy	CE%sT	1942 Nov  2 2:00s
-			1:00	C-Eur	CE%sT	1944 Jul
-			1:00	Italy	CE%sT	1980
-			1:00	EU	CE%sT
-
-Link	Europe/Rome	Europe/Vatican
-Link	Europe/Rome	Europe/San_Marino
-
-# Latvia
-
-# From Liene Kanepe (1998-09-17):
-
-# I asked about this matter Scientific Secretary of the Institute of Astronomy
-# of The University of Latvia Dr. paed Mr. Ilgonis Vilks. I also searched the
-# correct data in juridical acts and I found some juridical documents about
-# changes in the counting of time in Latvia from 1981....
-#
-# Act No.35 of the Council of Ministers of Latvian SSR of 1981-01-22 ...
-# according to the Act No.925 of the Council of Ministers of USSR of 1980-10-24
-# ...: all year round the time of 2nd time zone + 1 hour, in addition turning
-# the hands of the clock 1 hour forward on 1 April at 00:00 (GMT 31 March 21:00)
-# and 1 hour backward on the 1 October at 00:00 (GMT 30 September 20:00).
-#
-# Act No.592 of the Council of Ministers of Latvian SSR of 1984-09-24 ...
-# according to the Act No.967 of the Council of Ministers of USSR of 1984-09-13
-# ...: all year round the time of 2nd time zone + 1 hour, in addition turning
-# the hands of the clock 1 hour forward on the last Sunday of March at 02:00
-# (GMT 23:00 on the previous day) and 1 hour backward on the last Sunday of
-# September at 03:00 (GMT 23:00 on the previous day).
-#
-# Act No.81 of the Council of Ministers of Latvian SSR of 1989-03-22 ...
-# according to the Act No.227 of the Council of Ministers of USSR of 1989-03-14
-# ...: since the last Sunday of March 1989 in Lithuanian SSR, Latvian SSR,
-# Estonian SSR and Kaliningrad region of Russian Federation all year round the
-# time of 2nd time zone (Moscow time minus one hour). On the territory of Latvia
-# transition to summer time is performed on the last Sunday of March at 02:00
-# (GMT 00:00), turning the hands of the clock 1 hour forward.  The end of
-# daylight saving time is performed on the last Sunday of September at 03:00
-# (GMT 00:00), turning the hands of the clock 1 hour backward. Exception is
-# 1989-03-26, when we must not turn the hands of the clock....
-#
-# The Regulations of the Cabinet of Ministers of the Republic of Latvia of
-# 1997-01-21 on transition to Summer time ... established the same order of
-# daylight savings time settings as in the States of the European Union.
-
-# From Andrei Ivanov (2000-03-06):
-# This year Latvia will not switch to Daylight Savings Time (as specified in
-# <a href="http://www.lv-laiks.lv/wwwraksti/2000/071072/vd4.htm">
-# The Regulations of the Cabinet of Ministers of the Rep. of Latvia of
-# 29-Feb-2000 (#79)</a>, in Latvian for subscribers only).
-
-# <a href="http://www.rferl.org/newsline/2001/01/3-CEE/cee-030101.html">
-# From RFE/RL Newsline (2001-01-03), noted after a heads-up by Rives McDow:
-# </a>
-# The Latvian government on 2 January decided that the country will
-# institute daylight-saving time this spring, LETA reported.
-# Last February the three Baltic states decided not to turn back their
-# clocks one hour in the spring....
-# Minister of Economy Aigars Kalvitis noted that Latvia had too few
-# daylight hours and thus decided to comply with a draft European
-# Commission directive that provides for instituting daylight-saving
-# time in EU countries between 2002 and 2006. The Latvian government
-# urged Lithuania and Estonia to adopt a similar time policy, but it
-# appears that they will not do so....
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Latvia	1989	1996	-	Mar	lastSun	 2:00s	1:00	S
-Rule	Latvia	1989	1996	-	Sep	lastSun	 2:00s	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Riga	1:36:24	-	LMT	1880
-			1:36:24	-	RMT	1918 Apr 15 2:00 #Riga Mean Time
-			1:36:24	1:00	LST	1918 Sep 16 3:00 #Latvian Summer
-			1:36:24	-	RMT	1919 Apr  1 2:00
-			1:36:24	1:00	LST	1919 May 22 3:00
-			1:36:24	-	RMT	1926 May 11
-			2:00	-	EET	1940 Aug  5
-			3:00	-	MSK	1941 Jul
-			1:00	C-Eur	CE%sT	1944 Oct 13
-			3:00	Russia	MSK/MSD	1989 Mar lastSun 2:00s
-			2:00	1:00	EEST	1989 Sep lastSun 2:00s
-			2:00	Latvia	EE%sT	1997 Jan 21
-			2:00	EU	EE%sT	2000 Feb 29
-			2:00	-	EET	2001 Jan  2
-			2:00	EU	EE%sT
-
-# Liechtenstein
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Vaduz	0:38:04 -	LMT	1894 Jun
-			1:00	-	CET	1981
-			1:00	EU	CE%sT
-
-# Lithuania
-
-# From Paul Eggert (1996-11-22):
-# IATA SSIM (1992/1996) says Lithuania uses W-Eur rules, but since it is
-# known to be wrong about Estonia and Latvia, assume it's wrong here too.
-
-# From Marius Gedminas (1998-08-07):
-# I would like to inform that in this year Lithuanian time zone
-# (Europe/Vilnius) was changed.
-
-# From <a href="http://www.elta.lt/">ELTA</a> No. 972 (2582) (1999-09-29),
-# via Steffen Thorsen:
-# Lithuania has shifted back to the second time zone (GMT plus two hours)
-# to be valid here starting from October 31,
-# as decided by the national government on Wednesday....
-# The Lithuanian government also announced plans to consider a
-# motion to give up shifting to summer time in spring, as it was
-# already done by Estonia.
-
-# From the <a href="http://www.tourism.lt/informa/ff.htm">
-# Fact File, Lithuanian State Department of Tourism
-# </a> (2000-03-27): Local time is GMT+2 hours ..., no daylight saving.
-
-# From a user via Klaus Marten (2003-02-07):
-# As a candidate for membership of the European Union, Lithuania will
-# observe Summer Time in 2003, changing its clocks at the times laid
-# down in EU Directive 2000/84 of 19.I.01 (i.e. at the same times as its
-# neighbour Latvia). The text of the Lithuanian government Order of
-# 7.XI.02 to this effect can be found at
-# http://www.lrvk.lt/nut/11/n1749.htm
-
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Vilnius	1:41:16	-	LMT	1880
-			1:24:00	-	WMT	1917	    # Warsaw Mean Time
-			1:35:36	-	KMT	1919 Oct 10 # Kaunas Mean Time
-			1:00	-	CET	1920 Jul 12
-			2:00	-	EET	1920 Oct  9
-			1:00	-	CET	1940 Aug  3
-			3:00	-	MSK	1941 Jun 24
-			1:00	C-Eur	CE%sT	1944 Aug
-			3:00	Russia	MSK/MSD	1991 Mar 31 2:00s
-			2:00	1:00	EEST	1991 Sep 29 2:00s
-			2:00	C-Eur	EE%sT	1998
-			2:00	-	EET	1998 Mar 29 1:00u
-			1:00	EU	CE%sT	1999 Oct 31 1:00u
-			2:00	-	EET	2003 Jan  1
-			2:00	EU	EE%sT
-
-# Luxembourg
-# Whitman disagrees with most of these dates in minor ways; go with Shanks.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Lux	1916	only	-	May	14	23:00	1:00	S
-Rule	Lux	1916	only	-	Oct	 1	 1:00	0	-
-Rule	Lux	1917	only	-	Apr	28	23:00	1:00	S
-Rule	Lux	1917	only	-	Sep	17	 1:00	0	-
-Rule	Lux	1918	only	-	Apr	Mon>=15	 2:00s	1:00	S
-Rule	Lux	1918	only	-	Sep	Mon>=15	 2:00s	0	-
-Rule	Lux	1919	only	-	Mar	 1	23:00	1:00	S
-Rule	Lux	1919	only	-	Oct	 5	 3:00	0	-
-Rule	Lux	1920	only	-	Feb	14	23:00	1:00	S
-Rule	Lux	1920	only	-	Oct	24	 2:00	0	-
-Rule	Lux	1921	only	-	Mar	14	23:00	1:00	S
-Rule	Lux	1921	only	-	Oct	26	 2:00	0	-
-Rule	Lux	1922	only	-	Mar	25	23:00	1:00	S
-Rule	Lux	1922	only	-	Oct	Sun>=2	 1:00	0	-
-Rule	Lux	1923	only	-	Apr	21	23:00	1:00	S
-Rule	Lux	1923	only	-	Oct	Sun>=2	 2:00	0	-
-Rule	Lux	1924	only	-	Mar	29	23:00	1:00	S
-Rule	Lux	1924	1928	-	Oct	Sun>=2	 1:00	0	-
-Rule	Lux	1925	only	-	Apr	 5	23:00	1:00	S
-Rule	Lux	1926	only	-	Apr	17	23:00	1:00	S
-Rule	Lux	1927	only	-	Apr	 9	23:00	1:00	S
-Rule	Lux	1928	only	-	Apr	14	23:00	1:00	S
-Rule	Lux	1929	only	-	Apr	20	23:00	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Europe/Luxembourg	0:24:36 -	LMT	1904 Jun
-			1:00	Lux	CE%sT	1918 Nov 25
-			0:00	Lux	WE%sT	1929 Oct  6 2:00s
-			0:00	Belgium	WE%sT	1940 May 14 3:00
-			1:00	C-Eur	WE%sT	1944 Sep 18 3:00
-			1:00	Belgium	CE%sT	1977
-			1:00	EU	CE%sT
-
-# Macedonia
-# see Serbia and Montenegro
-
-# Malta
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Malta	1973	only	-	Mar	31	0:00s	1:00	S
-Rule	Malta	1973	only	-	Sep	29	0:00s	0	-
-Rule	Malta	1974	only	-	Apr	21	0:00s	1:00	S
-Rule	Malta	1974	only	-	Sep	16	0:00s	0	-
-Rule	Malta	1975	1979	-	Apr	Sun>=15	2:00	1:00	S
-Rule	Malta	1975	1980	-	Sep	Sun>=15	2:00	0	-
-Rule	Malta	1980	only	-	Mar	31	2:00	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Malta	0:58:04 -	LMT	1893 Nov  2	# Valletta
-			1:00	Italy	CE%sT	1942 Nov  2 2:00s
-			1:00	C-Eur	CE%sT	1945 Apr  2 2:00s
-			1:00	Italy	CE%sT	1973 Mar 31
-			1:00	Malta	CE%sT	1981
-			1:00	EU	CE%sT
-
-# Moldova
-
-# From Paul Eggert (2001-02-11):
-# A previous version of this database followed Shanks, who writes that
-# Tiraspol switched to Moscow time on 1992-01-19 at 02:00.
-# However, this is most likely an error, as Moldova declared independence
-# on 1991-08-27 (the 1992-01-19 date is that of a Russian decree).
-# In early 1992 there was large-scale interethnic violence in the area
-# and it's possible that some Russophones continued to observe Moscow time.
-# But [two people] separately reported via
-# Jesper Norgaard that as of 2001-01-24 Tiraspol was like Chisinau.
-# The Tiraspol entry has therefore been removed for now.
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Chisinau	1:55:20 -	LMT	1880
-			1:55	-	CMT	1918 Feb 15 # Chisinau MT
-			1:44:24	-	BMT	1931 Jul 24 # Bucharest MT
-			2:00	Romania	EE%sT	1940 Aug 15
-			2:00	1:00	EEST	1941 Jul 17
-			1:00	C-Eur	CE%sT	1944 Aug 24
-			3:00	Russia	MSK/MSD	1990
-			3:00	-	MSK	1990 May 6
-			2:00	-	EET	1991
-			2:00	Russia	EE%sT	1992
-			2:00	E-Eur	EE%sT	1997
-# See Romania commentary for the guessed 1997 transition to EU rules.
-			2:00	EU	EE%sT
-
-# Monaco
-# Shanks gives 0:09 for Paris Mean Time; go with Howse's more precise 0:09:21.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Monaco	0:29:32 -	LMT	1891 Mar 15
-			0:09:21	-	PMT	1911 Mar 11    # Paris Mean Time
-			0:00	France	WE%sT	1945 Sep 16 3:00
-			1:00	France	CE%sT	1977
-			1:00	EU	CE%sT
-
-# Netherlands
-
-# Howse writes that the Netherlands' railways used GMT between 1892 and 1940,
-# but for other purposes the Netherlands used Amsterdam mean time.
-
-# However, Robert H. van Gent writes (2001-04-01):
-# Howse's statement is only correct up to 1909. From 1909-05-01 (00:00:00
-# Amsterdam mean time) onwards, the whole of the Netherlands (including
-# the Dutch railways) was required by law to observe Amsterdam mean time
-# (19 minutes 32.13 seconds ahead of GMT). This had already been the
-# common practice (except for the railways) for many decades but it was
-# not until 1909 when the Dutch government finally defined this by law.
-# On 1937-07-01 this was changed to 20 minutes (exactly) ahead of GMT and
-# was generally known as Dutch Time ("Nederlandse Tijd").
-#
-# (2001-04-08):
-# 1892-05-01 was the date when the Dutch railways were by law required to
-# observe GMT while the remainder of the Netherlands adhered to the common
-# practice of following Amsterdam mean time.
-#
-# (2001-04-09):
-# In 1835 the authorities of the province of North Holland requested the
-# municipal authorities of the towns and cities in the province to observe
-# Amsterdam mean time but I do not know in how many cases this request was
-# actually followed.
-#
-# From 1852 onwards the Dutch telegraph offices were by law required to
-# observe Amsterdam mean time. As the time signals from the observatory of
-# Leiden were also distributed by the telegraph system, I assume that most
-# places linked up with the telegraph (and railway) system automatically
-# adopted Amsterdam mean time.
-#
-# Although the early Dutch railway companies initially observed a variety
-# of times, most of them had adopted Amsterdam mean time by 1858 but it
-# was not until 1866 when they were all required by law to observe
-# Amsterdam mean time.
-
-# The data before 1945 are taken from
-# <http://www.phys.uu.nl/~vgent/wettijd/wettijd.htm>.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Neth	1916	only	-	May	 1	0:00	1:00	NST	# Netherlands Summer Time
-Rule	Neth	1916	only	-	Oct	 1	0:00	0	AMT	# Amsterdam Mean Time
-Rule	Neth	1917	only	-	Apr	16	2:00s	1:00	NST
-Rule	Neth	1917	only	-	Sep	17	2:00s	0	AMT
-Rule	Neth	1918	1921	-	Apr	Mon>=1	2:00s	1:00	NST
-Rule	Neth	1918	1921	-	Sep	lastMon	2:00s	0	AMT
-Rule	Neth	1922	only	-	Mar	lastSun	2:00s	1:00	NST
-Rule	Neth	1922	1936	-	Oct	Sun>=2	2:00s	0	AMT
-Rule	Neth	1923	only	-	Jun	Fri>=1	2:00s	1:00	NST
-Rule	Neth	1924	only	-	Mar	lastSun	2:00s	1:00	NST
-Rule	Neth	1925	only	-	Jun	Fri>=1	2:00s	1:00	NST
-# From 1926 through 1939 DST began 05-15, except that it was delayed by a week
-# in years when 05-15 fell in the Pentecost weekend.
-Rule	Neth	1926	1931	-	May	15	2:00s	1:00	NST
-Rule	Neth	1932	only	-	May	22	2:00s	1:00	NST
-Rule	Neth	1933	1936	-	May	15	2:00s	1:00	NST
-Rule	Neth	1937	only	-	May	22	2:00s	1:00	NST
-Rule	Neth	1937	only	-	Jul	 1	0:00	1:00	S
-Rule	Neth	1937	1939	-	Oct	Sun>=2	2:00s	0	-
-Rule	Neth	1938	1939	-	May	15	2:00s	1:00	S
-Rule	Neth	1945	only	-	Apr	 2	2:00s	1:00	S
-Rule	Neth	1945	only	-	Sep	16	2:00s	0	-
-#
-# Amsterdam Mean Time was +00:19:32.13 exactly, but the .13 is omitted
-# below because the current format requires GMTOFF to be an integer.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Europe/Amsterdam	0:19:32 -	LMT	1835
-			0:19:32	Neth	%s	1937 Jul  1
-			0:20	Neth	NE%sT	1940 May 16 0:00 # Dutch Time
-			1:00	C-Eur	CE%sT	1945 Apr  2 2:00
-			1:00	Neth	CE%sT	1977
-			1:00	EU	CE%sT
-
-# Norway
-# http://met.no/met/met_lex/q_u/sommertid.html (2004-01) agrees with Shanks.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Norway	1916	only	-	May	22	1:00	1:00	S
-Rule	Norway	1916	only	-	Sep	30	0:00	0	-
-Rule	Norway	1945	only	-	Apr	 2	2:00s	1:00	S
-Rule	Norway	1945	only	-	Oct	 1	2:00s	0	-
-Rule	Norway	1959	1964	-	Mar	Sun>=15	2:00s	1:00	S
-Rule	Norway	1959	1965	-	Sep	Sun>=15	2:00s	0	-
-Rule	Norway	1965	only	-	Apr	25	2:00s	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Oslo	0:43:00 -	LMT	1895 Jan  1
-			1:00	Norway	CE%sT	1940 Aug 10 23:00
-			1:00	C-Eur	CE%sT	1945 Apr  2  2:00
-			1:00	Norway	CE%sT	1980
-			1:00	EU	CE%sT
-
-# Svalbard & Jan Mayen
-
-# From Steffen Thorsen (2001-05-01):
-# Although I could not find it explicitly, it seems that Jan Mayen and
-# Svalbard have been using the same time as Norway at least since the
-# time they were declared as parts of Norway.  Svalbard was declared
-# as a part of Norway by law of 1925-07-17 no 11, section 4 and Jan
-# Mayen by law of 1930-02-27 no 2, section 2. (From
-# http://www.lovdata.no/all/nl-19250717-011.html and
-# http://www.lovdata.no/all/nl-19300227-002.html).  The law/regulation
-# for normal/standard time in Norway is from 1894-06-29 no 1 (came
-# into operation on 1895-01-01) and Svalbard/Jan Mayen seem to be a
-# part of this law since 1925/1930. (From
-# http://www.lovdata.no/all/nl-18940629-001.html ) I have not been
-# able to find if Jan Mayen used a different time zone (e.g. -0100)
-# before 1930. Jan Mayen has only been "inhabitated" since 1921 by
-# Norwegian meteorologists and maybe used the same time as Norway ever
-# since 1921.  Svalbard (Arctic/Longyearbyen) has been inhabited since
-# before 1895, and therefore probably changed the local time somewhere
-# between 1895 and 1925 (inclusive).
-
-# From Paul Eggert (2001-05-01):
-#
-# Actually, Jan Mayen was never occupied by Germany during World War II,
-# so it must have diverged from Oslo time during the war, as Oslo was
-# keeping Berlin time.
-#
-# <http://home.no.net/janmayen/history.htm> says that the meteorologists
-# burned down their station in 1940 and left the island, but returned in
-# 1941 with a small Norwegian garrison and continued operations despite
-# frequent air ttacks from Germans.  In 1943 the Americans established a
-# radiolocating station on the island, called "Atlantic City".  Possibly
-# the UTC offset changed during the war, but I think it unlikely that
-# Jan Mayen used German daylight-saving rules.
-#
-# Svalbard is more complicated, as it was raided in August 1941 by an
-# Allied party that evacuated the civilian population to England (says
-# <http://www.bartleby.com/65/sv/Svalbard.html>).  The Svalbard FAQ
-# <http://www.svalbard.com/SvalbardFAQ.html> says that the Germans were
-# expelled on 1942-05-14.  However, small parties of Germans did return,
-# and according to Wilhelm Dege's book "War North of 80" (1954)
-# <http://www.ucalgary.ca/UofC/departments/UP/1-55238/1-55238-110-2.html>
-# the German armed forces at the Svalbard weather station code-named
-# Haudegen did not surrender to the Allies until September 1945.
-#
-# All these events predate our cutoff date of 1970.  Unless we can
-# come up with more definitive info about the timekeeping during the
-# war years it's probably best just do do the following for now:
-Link	Europe/Oslo	Arctic/Longyearbyen
-Link	Europe/Oslo	Atlantic/Jan_Mayen
-
-# Poland
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Poland	1918	1919	-	Sep	16	2:00s	0	-
-Rule	Poland	1919	only	-	Apr	15	2:00s	1:00	S
-# Whitman gives 1944 Nov 30; go with Shanks.
-Rule	Poland	1944	only	-	Oct	 4	2:00	0	-
-# For 1944-1948 Whitman gives the previous day; go with Shanks.
-Rule	Poland	1945	only	-	Apr	29	0:00	1:00	S
-Rule	Poland	1945	only	-	Nov	 1	0:00	0	-
-# For 1946 on the source is Kazimierz Borkowski,
-# Torun Center for Astronomy, Dept. of Radio Astronomy, Nicolaus Copernicus U.,
-# <http://www.astro.uni.torun.pl/~kb/Artykuly/U-PA/Czas2.htm#tth_tAb1>
-# Thanks to Przemyslaw Augustyniak (2005-05-28) for this reference.
-# He also gives these further references:
-# Mon Pol nr 13, poz 162 (1995) <http://www.abc.com.pl/serwis/mp/1995/0162.htm>
-# Druk nr 2180 (2003) <http://www.senat.gov.pl/k5/dok/sejm/053/2180.pdf>
-Rule	Poland	1946	only	-	Apr	14	0:00s	1:00	S
-Rule	Poland	1946	only	-	Oct	 7	2:00s	0	-
-Rule	Poland	1947	only	-	May	 4	2:00s	1:00	S
-Rule	Poland	1947	1949	-	Oct	Sun>=1	2:00s	0	-
-Rule	Poland	1948	only	-	Apr	18	2:00s	1:00	S
-Rule	Poland	1949	only	-	Apr	10	2:00s	1:00	S
-Rule	Poland	1957	only	-	Jun	 2	1:00s	1:00	S
-Rule	Poland	1957	1958	-	Sep	lastSun	1:00s	0	-
-Rule	Poland	1958	only	-	Mar	30	1:00s	1:00	S
-Rule	Poland	1959	only	-	May	31	1:00s	1:00	S
-Rule	Poland	1959	1961	-	Oct	Sun>=1	1:00s	0	-
-Rule	Poland	1960	only	-	Apr	 3	1:00s	1:00	S
-Rule	Poland	1961	1964	-	May	lastSun	1:00s	1:00	S
-Rule	Poland	1962	1964	-	Sep	lastSun	1:00s	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Warsaw	1:24:00 -	LMT	1880
-			1:24:00	-	WMT	1915 Aug  5   # Warsaw Mean Time
-			1:00	C-Eur	CE%sT	1918 Sep 16 3:00
-			2:00	Poland	EE%sT	1922 Jun
-			1:00	Poland	CE%sT	1940 Jun 23 2:00
-			1:00	C-Eur	CE%sT	1944 Oct
-			1:00	Poland	CE%sT	1977
-			1:00	W-Eur	CE%sT	1988
-			1:00	EU	CE%sT
-
-# Portugal
-#
-# From Rui Pedro Salgueiro (1992-11-12):
-# Portugal has recently (September, 27) changed timezone
-# (from WET to MET or CET) to harmonize with EEC.
-#
-# Martin Bruckmann (1996-02-29) reports via Peter Ilieve
-# that Portugal is reverting to 0:00 by not moving its clocks this spring.
-# The new Prime Minister was fed up with getting up in the dark in the winter.
-#
-# From Paul Eggert (1996-11-12):
-# IATA SSIM (1991-09) reports several 1991-09 and 1992-09 transitions
-# at 02:00u, not 01:00u.  Assume that these are typos.
-# IATA SSIM (1991/1992) reports that the Azores were at -1:00.
-# IATA SSIM (1993-02) says +0:00; later issues (through 1996-09) say -1:00.
-# Guess that the Azores changed to EU rules in 1992 (since that's when Portugal
-# harmonized with the EU), and that they stayed +0:00 that winter.
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-# DSH writes that despite Decree 1,469 (1915), the change to the clocks was not
-# done every year, depending on what Spain did, because of railroad schedules.
-# Go with Shanks.
-Rule	Port	1916	only	-	Jun	17	23:00	1:00	S
-# Whitman gives 1916 Oct 31; go with Shanks.
-Rule	Port	1916	only	-	Nov	 1	 1:00	0	-
-Rule	Port	1917	only	-	Feb	28	23:00s	1:00	S
-Rule	Port	1917	1921	-	Oct	14	23:00s	0	-
-Rule	Port	1918	only	-	Mar	 1	23:00s	1:00	S
-Rule	Port	1919	only	-	Feb	28	23:00s	1:00	S
-Rule	Port	1920	only	-	Feb	29	23:00s	1:00	S
-Rule	Port	1921	only	-	Feb	28	23:00s	1:00	S
-Rule	Port	1924	only	-	Apr	16	23:00s	1:00	S
-Rule	Port	1924	only	-	Oct	14	23:00s	0	-
-Rule	Port	1926	only	-	Apr	17	23:00s	1:00	S
-Rule	Port	1926	1929	-	Oct	Sat>=1	23:00s	0	-
-Rule	Port	1927	only	-	Apr	 9	23:00s	1:00	S
-Rule	Port	1928	only	-	Apr	14	23:00s	1:00	S
-Rule	Port	1929	only	-	Apr	20	23:00s	1:00	S
-Rule	Port	1931	only	-	Apr	18	23:00s	1:00	S
-# Whitman gives 1931 Oct 8; go with Shanks.
-Rule	Port	1931	1932	-	Oct	Sat>=1	23:00s	0	-
-Rule	Port	1932	only	-	Apr	 2	23:00s	1:00	S
-# Shanks gives 1934 Apr 4; go with Whitman.
-Rule	Port	1934	only	-	Apr	 7	23:00s	1:00	S
-# Whitman gives 1934 Oct 5; go with Shanks.
-Rule	Port	1934	1938	-	Oct	Sat>=1	23:00s	0	-
-# Shanks gives 1935 Apr 30; go with Whitman.
-Rule	Port	1935	only	-	Mar	30	23:00s	1:00	S
-Rule	Port	1936	only	-	Apr	18	23:00s	1:00	S
-# Whitman gives 1937 Apr 2; go with Shanks.
-Rule	Port	1937	only	-	Apr	 3	23:00s	1:00	S
-Rule	Port	1938	only	-	Mar	26	23:00s	1:00	S
-Rule	Port	1939	only	-	Apr	15	23:00s	1:00	S
-# Whitman gives 1939 Oct 7; go with Shanks.
-Rule	Port	1939	only	-	Nov	18	23:00s	0	-
-Rule	Port	1940	only	-	Feb	24	23:00s	1:00	S
-# Shanks gives 1940 Oct 7; go with Whitman.
-Rule	Port	1940	1941	-	Oct	 5	23:00s	0	-
-Rule	Port	1941	only	-	Apr	 5	23:00s	1:00	S
-Rule	Port	1942	1945	-	Mar	Sat>=8	23:00s	1:00	S
-Rule	Port	1942	only	-	Apr	25	22:00s	2:00	M # Midsummer
-Rule	Port	1942	only	-	Aug	15	22:00s	1:00	S
-Rule	Port	1942	1945	-	Oct	Sat>=24	23:00s	0	-
-Rule	Port	1943	only	-	Apr	17	22:00s	2:00	M
-Rule	Port	1943	1945	-	Aug	Sat>=25	22:00s	1:00	S
-Rule	Port	1944	1945	-	Apr	Sat>=21	22:00s	2:00	M
-Rule	Port	1946	only	-	Apr	Sat>=1	23:00s	1:00	S
-Rule	Port	1946	only	-	Oct	Sat>=1	23:00s	0	-
-Rule	Port	1947	1949	-	Apr	Sun>=1	 2:00s	1:00	S
-Rule	Port	1947	1949	-	Oct	Sun>=1	 2:00s	0	-
-# Shanks says DST was observed in 1950; go with Whitman.
-# Whitman gives Oct lastSun for 1952 on; go with Shanks.
-Rule	Port	1951	1965	-	Apr	Sun>=1	 2:00s	1:00	S
-Rule	Port	1951	1965	-	Oct	Sun>=1	 2:00s	0	-
-Rule	Port	1977	only	-	Mar	27	 0:00s	1:00	S
-Rule	Port	1977	only	-	Sep	25	 0:00s	0	-
-Rule	Port	1978	1979	-	Apr	Sun>=1	 0:00s	1:00	S
-Rule	Port	1978	only	-	Oct	 1	 0:00s	0	-
-Rule	Port	1979	1982	-	Sep	lastSun	 1:00s	0	-
-Rule	Port	1980	only	-	Mar	lastSun	 0:00s	1:00	S
-Rule	Port	1981	1982	-	Mar	lastSun	 1:00s	1:00	S
-Rule	Port	1983	only	-	Mar	lastSun	 2:00s	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-# Shanks says that the transition from LMT to WET occurred 1911-05-24;
-# Willett says 1912-01-01.  Go with Willett.
-Zone	Europe/Lisbon	-0:36:32 -	LMT	1884
-			-0:36:32 -	LMT	1912 Jan  1  # Lisbon Mean Time
-			 0:00	Port	WE%sT	1966 Apr  3 2:00
-			 1:00	-	CET	1976 Sep 26 1:00
-			 0:00	Port	WE%sT	1983 Sep 25 1:00s
-			 0:00	W-Eur	WE%sT	1992 Sep 27 1:00s
-			 1:00	EU	CE%sT	1996 Mar 31 1:00u
-			 0:00	EU	WE%sT
-Zone Atlantic/Azores	-1:42:40 -	LMT	1884		# Ponta Delgada
-			-1:54:32 -	HMT	1911 May 24  # Horta Mean Time
-			-2:00	Port	AZO%sT	1966 Apr  3 2:00 # Azores Time
-			-1:00	Port	AZO%sT	1983 Sep 25 1:00s
-			-1:00	W-Eur	AZO%sT	1992 Sep 27 1:00s
-			 0:00	EU	WE%sT	1993 Mar 28 1:00u
-			-1:00	EU	AZO%sT
-Zone Atlantic/Madeira	-1:07:36 -	LMT	1884		# Funchal
-			-1:07:36 -	FMT	1911 May 24  # Funchal Mean Time
-			-1:00	Port	MAD%sT	1966 Apr  3 2:00 # Madeira Time
-			 0:00	Port	WE%sT	1983 Sep 25 1:00s
-			 0:00	EU	WE%sT
-
-# Romania
-#
-# From Paul Eggert (1999-10-07):
-# <a href="http://www.nineoclock.ro/POL/1778pol.html">
-# Nine O'clock</a> (1998-10-23) reports that the switch occurred at
-# 04:00 local time in fall 1998.  For lack of better info,
-# assume that Romania and Moldova switched to EU rules in 1997,
-# the same year as Bulgaria.
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Romania	1932	only	-	May	21	 0:00s	1:00	S
-Rule	Romania	1932	1939	-	Oct	Sun>=1	 0:00s	0	-
-Rule	Romania	1933	1939	-	Apr	Sun>=2	 0:00s	1:00	S
-Rule	Romania	1979	only	-	May	27	 0:00	1:00	S
-Rule	Romania	1979	only	-	Sep	lastSun	 0:00	0	-
-Rule	Romania	1980	only	-	Apr	 5	23:00	1:00	S
-Rule	Romania	1980	only	-	Sep	lastSun	 1:00	0	-
-Rule	Romania	1991	1993	-	Mar	lastSun	 0:00s	1:00	S
-Rule	Romania	1991	1993	-	Sep	lastSun	 0:00s	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Europe/Bucharest	1:44:24 -	LMT	1891 Oct
-			1:44:24	-	BMT	1931 Jul 24	# Bucharest MT
-			2:00	Romania	EE%sT	1981 Mar 29 2:00s
-			2:00	C-Eur	EE%sT	1991
-			2:00	Romania	EE%sT	1994
-			2:00	E-Eur	EE%sT	1997
-			2:00	EU	EE%sT
-
-# Russia
-
-# From Paul Eggert (1999-11-12):
-# Except for Moscow after 1919-07-01, I invented the time zone abbreviations.
-# Moscow time zone abbreviations after 1919-07-01, and Moscow rules after 1991,
-# are from Andrey A. Chernov.  The rest is from Shanks, except we follow
-# Chernov's report that 1992 DST transitions were Sat 23:00, not Sun 02:00s.
-#
-# From Stanislaw A. Kuzikowski (1994-06-29):
-# But now it is some months since Novosibirsk is 3 hours ahead of Moscow!
-# I do not know why they have decided to make this change;
-# as far as I remember it was done exactly during winter->summer switching
-# so we (Novosibirsk) simply did not switch.
-#
-# From Andrey A. Chernov (1996-10-04):
-# `MSK' and `MSD' were born and used initially on Moscow computers with
-# UNIX-like OSes by several developer groups (e.g. Demos group, Kiae group)....
-# The next step was the UUCP network, the Relcom predecessor
-# (used mainly for mail), and MSK/MSD was actively used there.
-#
-# From Chris Carrier (1996-10-30):
-# According to a friend of mine who rode the Trans-Siberian Railroad from
-# Moscow to Irkutsk in 1995, public air and rail transport in Russia ...
-# still follows Moscow time, no matter where in Russia it is located.
-#
-# For Grozny, Chechnya, we have the following story from
-# John Daniszewski, "Scavengers in the Rubble", Los Angeles Times (2001-02-07):
-# News--often false--is spread by word of mouth.  A rumor that it was
-# time to move the clocks back put this whole city out of sync with
-# the rest of Russia for two weeks--even soldiers stationed here began
-# enforcing curfew at the wrong time.
-#
-# From Gwillim Law (2001-06-05):
-# There's considerable evidence that Sakhalin Island used to be in
-# UTC+11, and has changed to UTC+10, in this decade.  I start with the
-# SSIM, which listed Yuzhno-Sakhalinsk in zone RU10 along with Magadan
-# until February 1997, and then in RU9 with Khabarovsk and Vladivostok
-# since September 1997....  Although the Kuril Islands are
-# administratively part of Sakhalin oblast', they appear to have
-# remained on UTC+11 along with Magadan.
-#
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-#
-# Kaliningradskaya oblast'.
-Zone Europe/Kaliningrad	 1:22:00 -	LMT	1893 Apr
-			 1:00	C-Eur	CE%sT	1945
-			 2:00	Poland	CE%sT	1946
-			 3:00	Russia	MSK/MSD	1991 Mar 31 2:00s
-			 2:00	Russia	EE%sT
-#
-# From Oscar van Vlijmen (2001-08-25): [This region consists of]
-# Respublika Adygeya, Arkhangel'skaya oblast', Astrakhanskaya oblast',
-# Belgorodskaya oblast', Bryanskaya oblast', Vladimirskaya oblast',
-# Volgogradskaya oblast', Vologodskaya oblast', Voronezhskaya oblast',
-# Respublika Dagestan, Ivanovskaya oblast', Respublika Ingushetiya,
-# Kabarbino-Balkarskaya Respublika, Respublika Kalmykiya,
-# Kalyzhskaya oblast', Respublika Karachaevo-Cherkessiya,
-# Respublika Kareliya, Kirovskaya oblast', Respublika Komi,
-# Kostromskaya oblast', Krasnodarskij kraj, Kurskaya oblast',
-# Leningradskaya oblast', Lipetskaya oblast', Respublika Marij El,
-# Respublika Mordoviya, Moskva, Moskovskaya oblast',
-# Murmanskaya oblast', Nenetskij avtonomnyj okrug,
-# Nizhegorodskaya oblast', Novgorodskaya oblast', Orlovskaya oblast',
-# Penzenskaya oblast', Pskovskaya oblast', Rostovskaya oblast',
-# Ryazanskaya oblast', Sankt-Peterburg, Saratovskaya oblast',
-# Respublika Severnaya Osetiya, Smolenskaya oblast',
-# Stavropol'skij kraj, Tambovskaya oblast', Respublika Tatarstan,
-# Tverskaya oblast', Tyl'skaya oblast', Ul'yanovskaya oblast',
-# Chechenskaya Respublika, Chuvashskaya oblast',
-# Yaroslavskaya oblast'
-Zone Europe/Moscow	 2:30:20 -	LMT	1880
-			 2:30	-	MMT	1916 Jul  3 # Moscow Mean Time
-			 2:30:48 Russia	%s	1919 Jul  1 2:00
-			 3:00	Russia	MSK/MSD	1922 Oct
-			 2:00	-	EET	1930 Jun 21
-			 3:00	Russia	MSK/MSD	1991 Mar 31 2:00s
-			 2:00	Russia	EE%sT	1992 Jan 19 2:00s
-			 3:00	Russia	MSK/MSD
-#
-# From Oscar van Vlijmen (2001-08-25): [This region consists of]
-# Samarskaya oblast', Udmyrtskaya respublika
-Zone Europe/Samara	 3:20:36 -	LMT	1919 Jul  1 2:00
-			 3:00	-	KUYT	1930 Jun 21 # Kuybyshev
-			 4:00	Russia	KUY%sT	1989 Mar 26 2:00s
-			 3:00	Russia	KUY%sT	1991 Mar 31 2:00s
-			 2:00	Russia	KUY%sT	1991 Sep 29 2:00s
-			 3:00	-	KUYT	1991 Oct 20 3:00
-			 4:00	Russia	SAM%sT	# Samara Time
-#
-# From Oscar van Vlijmen (2001-08-25): [This region consists of]
-# Respublika Bashkortostan, Komi-Permyatskij avtonomnyj okrug,
-# Kurganskaya oblast', Orenburgskaya oblast', Permskaya oblast',
-# Sverdlovskaya oblast', Tyumenskaya oblast',
-# Khanty-Manskijskij avtonomnyj okrug, Chelyabinskaya oblast',
-# Yamalo-Nenetskij avtonomnyj okrug.
-Zone Asia/Yekaterinburg	 4:02:24 -	LMT	1919 Jul 15 4:00
-			 4:00	-	SVET	1930 Jun 21 # Sverdlovsk Time
-			 5:00	Russia	SVE%sT	1991 Mar 31 2:00s
-			 4:00	Russia	SVE%sT	1992 Jan 19 2:00s
-			 5:00	Russia	YEK%sT	# Yekaterinburg Time
-#
-# From Oscar van Vlijmen (2001-08-25): [This region consists of]
-# Respublika Altaj, Altajskij kraj, Omskaya oblast'.
-Zone Asia/Omsk		 4:53:36 -	LMT	1919 Nov 14
-			 5:00	-	OMST	1930 Jun 21 # Omsk TIme
-			 6:00	Russia	OMS%sT	1991 Mar 31 2:00s
-			 5:00	Russia	OMS%sT	1992 Jan 19 2:00s
-			 6:00	Russia	OMS%sT
-#
-# Novosibirskaya oblast'.
-Zone Asia/Novosibirsk	 5:31:40 -	LMT	1919 Dec 14 6:00
-			 6:00	-	NOVT	1930 Jun 21 # Novosibirsk Time
-			 7:00	Russia	NOV%sT	1991 Mar 31 2:00s
-			 6:00	Russia	NOV%sT	1992 Jan 19 2:00s
-			 7:00	Russia	NOV%sT	1993 May 23 # says Shanks
-			 6:00	Russia	NOV%sT
-#
-# From Oscar van Vlijmen (2001-08-25): [This region consists of]
-# Kemerovskaya oblast', Krasnoyarskij kraj,
-# Tajmyrskij (Dolgano-Nenetskij) avtonomnyj okrug, Tomskaya oblast',
-# Respublika Tuva, Respublika Khakasiya, Evenkijskij avtonomnyj okrug.
-Zone Asia/Krasnoyarsk	 6:11:20 -	LMT	1920 Jan  6
-			 6:00	-	KRAT	1930 Jun 21 # Krasnoyarsk Time
-			 7:00	Russia	KRA%sT	1991 Mar 31 2:00s
-			 6:00	Russia	KRA%sT	1992 Jan 19 2:00s
-			 7:00	Russia	KRA%sT
-#
-# From Oscar van Vlijmen (2001-08-25): [This region consists of]
-# Respublika Buryatiya, Irkutskaya oblast',
-# Ust'-Ordynskij Buryatskij avtonomnyj okrug.
-Zone Asia/Irkutsk	 6:57:20 -	LMT	1880
-			 6:57:20 -	IMT	1920 Jan 25 # Irkutsk Mean Time
-			 7:00	-	IRKT	1930 Jun 21 # Irkutsk Time
-			 8:00	Russia	IRK%sT	1991 Mar 31 2:00s
-			 7:00	Russia	IRK%sT	1992 Jan 19 2:00s
-			 8:00	Russia	IRK%sT
-#
-# From Oscar van Vlijmen (2003-10-18): [This region consists of]
-# Aginskij Buryatskij avtonomnyj okrug, Amurskaya oblast',
-# [parts of] Respublika Sakha (Yakutiya), Chitinskaya oblast'.
-# The Sakha districts are: Aldanskij, Amginskij, Anabarskij,
-# Bulunskij, Verkhnekolymskij, Verkhnevilyujskij, Vilyujskij, Gornyj,
-# Zhiganskij, Kobyajskij, Lenskij, Megino-Kangalasskij, Mirninskij,
-# Namskij, Nyurbinskij, Olenekskij, Olekminskij, Srednekolymskij,
-# Suntarskij, Tattinskij, Ust'-Aldanskij, Khangalasskij,
-# Churapchinskij, Eveno-Bytantajskij.
-Zone Asia/Yakutsk	 8:38:40 -	LMT	1919 Dec 15
-			 8:00	-	YAKT	1930 Jun 21 # Yakutsk Time
-			 9:00	Russia	YAK%sT	1991 Mar 31 2:00s
-			 8:00	Russia	YAK%sT	1992 Jan 19 2:00s
-			 9:00	Russia	YAK%sT
-#
-# From Oscar van Vlijmen (2003-10-18): [This region consists of]
-# Evrejskaya avtonomnaya oblast', Khabarovskij kraj, Primorskij kraj,
-# [parts of] Respublika Sakha (Yakutiya).
-# The Sakha districts are: Verkhoyanskij, Tomponskij, Ust'-Majskij,
-# Ust'-Yanskij.
-Zone Asia/Vladivostok	 8:47:44 -	LMT	1922 Nov 15
-			 9:00	-	VLAT	1930 Jun 21 # Vladivostok Time
-			10:00	Russia	VLA%sT	1991 Mar 31 2:00s
-			 9:00	Russia	VLA%sST	1992 Jan 19 2:00s
-			10:00	Russia	VLA%sT
-#
-# Sakhalinskaya oblast'.
-# The Zone name should be Yuzhno-Sakhalinsk, but that's too long.
-Zone Asia/Sakhalin	 9:30:48 -	LMT	1905 Aug 23
-			 9:00	-	CJT	1938
-			 9:00	-	JST	1945 Aug 25
-			11:00	Russia	SAK%sT	1991 Mar 31 2:00s # Sakhalin T.
-			10:00	Russia	SAK%sT	1992 Jan 19 2:00s
-			11:00	Russia	SAK%sT	1997 Mar lastSun 2:00s
-			10:00	Russia	SAK%sT
-#
-# From Oscar van Vlijmen (2003-10-18): [This region consists of]
-# Magadanskaya oblast', Respublika Sakha (Yakutiya).
-# Probably also: Kuril Islands.
-# The Sakha districts are: Abyjskij, Allaikhovskij, Momskij,
-# Nizhnekolymskij, Ojmyakonskij.
-Zone Asia/Magadan	10:03:12 -	LMT	1924 May  2
-			10:00	-	MAGT	1930 Jun 21 # Magadan Time
-			11:00	Russia	MAG%sT	1991 Mar 31 2:00s
-			10:00	Russia	MAG%sT	1992 Jan 19 2:00s
-			11:00	Russia	MAG%sT
-#
-# From Oscar van Vlijmen (2001-08-25): [This region consists of]
-# Kamchatskaya oblast', Koryakskij avtonomnyj okrug.
-#
-# The Zone name should be Asia/Petropavlovsk-Kamchatski, but that's too long.
-Zone Asia/Kamchatka	10:34:36 -	LMT	1922 Nov 10
-			11:00	-	PETT	1930 Jun 21 # P-K Time
-			12:00	Russia	PET%sT	1991 Mar 31 2:00s
-			11:00	Russia	PET%sT	1992 Jan 19 2:00s
-			12:00	Russia	PET%sT
-#
-# Chukotskij avtonomnyj okrug
-Zone Asia/Anadyr	11:49:56 -	LMT	1924 May  2
-			12:00	-	ANAT	1930 Jun 21 # Anadyr Time
-			13:00	Russia	ANA%sT	1982 Apr  1 0:00s
-			12:00	Russia	ANA%sT	1991 Mar 31 2:00s
-			11:00	Russia	ANA%sT	1992 Jan 19 2:00s
-			12:00	Russia	ANA%sT
-
-# Serbia and Montenegro
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Belgrade	1:22:00	-	LMT	1884
-			1:00	-	CET	1941 Apr 18 23:00
-			1:00	C-Eur	CE%sT	1945 May  8  2:00s
-			1:00	1:00	CEST	1945 Sep 16  2:00s
-# Metod Kozelj reports that the legal date of
-# transition to EU rules was 1982-11-27, for all of Yugoslavia at the time.
-# Shanks doesn't give as much detail, so go with Kozelj.
-			1:00	-	CET	1982 Nov 27
-			1:00	EU	CE%sT
-Link Europe/Belgrade Europe/Ljubljana	# Slovenia
-Link Europe/Belgrade Europe/Sarajevo	# Bosnia and Herzegovina
-Link Europe/Belgrade Europe/Skopje	# Macedonia
-Link Europe/Belgrade Europe/Zagreb	# Croatia
-
-# Slovakia
-Link Europe/Prague Europe/Bratislava
-
-# Slovenia
-# see Serbia and Montenegro
-
-# Spain
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-# For 1917-1919 Whitman gives Apr Sat>=1 - Oct Sat>=1; go with Shanks.
-Rule	Spain	1917	only	-	May	 5	23:00s	1:00	S
-Rule	Spain	1917	1919	-	Oct	 6	23:00s	0	-
-Rule	Spain	1918	only	-	Apr	15	23:00s	1:00	S
-Rule	Spain	1919	only	-	Apr	 5	23:00s	1:00	S
-# Whitman gives 1921 Feb 28 - Oct 14; go with Shanks.
-Rule	Spain	1924	only	-	Apr	16	23:00s	1:00	S
-# Whitman gives 1924 Oct 14; go with Shanks.
-Rule	Spain	1924	only	-	Oct	 4	23:00s	0	-
-Rule	Spain	1926	only	-	Apr	17	23:00s	1:00	S
-# Whitman says no DST in 1929; go with Shanks.
-Rule	Spain	1926	1929	-	Oct	Sat>=1	23:00s	0	-
-Rule	Spain	1927	only	-	Apr	 9	23:00s	1:00	S
-Rule	Spain	1928	only	-	Apr	14	23:00s	1:00	S
-Rule	Spain	1929	only	-	Apr	20	23:00s	1:00	S
-# Whitman gives 1937 Jun 16, 1938 Apr 16, 1940 Apr 13; go with Shanks.
-Rule	Spain	1937	only	-	May	22	23:00s	1:00	S
-Rule	Spain	1937	1939	-	Oct	Sat>=1	23:00s	0	-
-Rule	Spain	1938	only	-	Mar	22	23:00s	1:00	S
-Rule	Spain	1939	only	-	Apr	15	23:00s	1:00	S
-Rule	Spain	1940	only	-	Mar	16	23:00s	1:00	S
-# Whitman says no DST 1942-1945; go with Shanks.
-Rule	Spain	1942	only	-	May	 2	22:00s	2:00	M # Midsummer
-Rule	Spain	1942	only	-	Sep	 1	22:00s	1:00	S
-Rule	Spain	1943	1946	-	Apr	Sat>=13	22:00s	2:00	M
-Rule	Spain	1943	only	-	Oct	 3	22:00s	1:00	S
-Rule	Spain	1944	only	-	Oct	10	22:00s	1:00	S
-Rule	Spain	1945	only	-	Sep	30	 1:00	1:00	S
-Rule	Spain	1946	only	-	Sep	30	 0:00	0	-
-Rule	Spain	1949	only	-	Apr	30	23:00	1:00	S
-Rule	Spain	1949	only	-	Sep	30	 1:00	0	-
-Rule	Spain	1974	1975	-	Apr	Sat>=13	23:00	1:00	S
-Rule	Spain	1974	1975	-	Oct	Sun>=1	 1:00	0	-
-Rule	Spain	1976	only	-	Mar	27	23:00	1:00	S
-Rule	Spain	1976	1977	-	Sep	lastSun	 1:00	0	-
-Rule	Spain	1977	1978	-	Apr	 2	23:00	1:00	S
-Rule	Spain	1978	only	-	Oct	 1	 1:00	0	-
-# The following rules are copied from Morocco from 1967 through 1978.
-Rule SpainAfrica 1967	only	-	Jun	 3	12:00	1:00	S
-Rule SpainAfrica 1967	only	-	Oct	 1	 0:00	0	-
-Rule SpainAfrica 1974	only	-	Jun	24	 0:00	1:00	S
-Rule SpainAfrica 1974	only	-	Sep	 1	 0:00	0	-
-Rule SpainAfrica 1976	1977	-	May	 1	 0:00	1:00	S
-Rule SpainAfrica 1976	only	-	Aug	 1	 0:00	0	-
-Rule SpainAfrica 1977	only	-	Sep	28	 0:00	0	-
-Rule SpainAfrica 1978	only	-	Jun	 1	 0:00	1:00	S
-Rule SpainAfrica 1978	only	-	Aug	 4	 0:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Madrid	-0:14:44 -	LMT	1901
-			 0:00	Spain	WE%sT	1946 Sep 30
-			 1:00	Spain	CE%sT	1979
-			 1:00	EU	CE%sT
-Zone	Africa/Ceuta	-0:21:16 -	LMT	1901
-			 0:00	-	WET	1918 May  6 23:00
-			 0:00	1:00	WEST	1918 Oct  7 23:00
-			 0:00	-	WET	1924
-			 0:00	Spain	WE%sT	1929
-			 0:00 SpainAfrica WE%sT 1984 Mar 16
-			 1:00	-	CET	1986
-			 1:00	EU	CE%sT
-Zone	Atlantic/Canary	-1:01:36 -	LMT	1922 Mar # Las Palmas de Gran C.
-			-1:00	-	CANT	1946 Sep 30 1:00 # Canaries Time
-			 0:00	-	WET	1980 Apr  6 0:00s
-			 0:00	1:00	WEST	1980 Sep 28 0:00s
-			 0:00	EU	WE%sT
-# IATA SSIM (1996-09) says the Canaries switch at 2:00u, not 1:00u.
-# Ignore this for now, as the Canaries are part of the EU.
-
-# Sweden
-
-# From Ivan Nilsson (2001-04-13), superseding Shanks:
-#
-# The law "Svensk forfattningssamling 1878, no 14" about standard time in 1879:
-# From the beginning of 1879 (that is 01-01 00:00) the time for all
-# places in the country is "the mean solar time for the meridian at
-# three degrees, or twelve minutes of time, to the west of the
-# meridian of the Observatory of Stockholm".  The law is dated 1878-05-31.
-#
-# The observatory at that time had the meridian 18 degrees 03' 30"
-# eastern longitude = 01:12:14 in time.  Less 12 minutes gives the
-# national standard time as 01:00:14 ahead of GMT....
-#
-# About the beginning of CET in Sweden. The lawtext ("Svensk
-# forfattningssamling 1899, no 44") states, that "from the beginning
-# of 1900... ... the same as the mean solar time for the meridian at
-# the distance of one hour of time from the meridian of the English
-# observatory at Greenwich, or at 12 minutes 14 seconds to the west
-# from the meridian of the Observatory of Stockholm". The law is dated
-# 1899-06-16.  In short: At 1900-01-01 00:00:00 the new standard time
-# in Sweden is 01:00:00 ahead of GMT.
-#
-# 1916: The lawtext ("Svensk forfattningssamling 1916, no 124") states
-# that "1916-05-15 is considered to begin one hour earlier". It is
-# pretty obvious that at 05-14 23:00 the clocks are set to 05-15 00:00....
-# Further the law says, that "1916-09-30 is considered to end one hour later".
-#
-# The laws regulating [DST] are available on the site of the Swedish
-# Parliament beginning with 1985 - the laws regulating 1980/1984 are
-# not available on the site (to my knowledge they are only available
-# in Swedish): <http://www.riksdagen.se/english/work/sfst.asp> (type
-# "sommartid" without the quotes in the field "Fritext" and then click
-# the Sok-button).
-#
-# (2001-05-13):
-#
-# I have now found a newspaper stating that at 1916-10-01 01:00
-# summertime the church-clocks etc were set back one hour to show
-# 1916-10-01 00:00 standard time.  The article also reports that some
-# people thought the switch to standard time would take place already
-# at 1916-10-01 00:00 summer time, but they had to wait for another
-# hour before the event took place.
-#
-# Source: The newspaper "Dagens Nyheter", 1916-10-01, page 7 upper left.
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Europe/Stockholm	1:12:12 -	LMT	1879 Jan  1
-			1:00:14	-	SET	1900 Jan  1	# Swedish Time
-			1:00	-	CET	1916 May 14 23:00
-			1:00	1:00	CEST	1916 Oct  1 01:00
-			1:00	-	CET	1980
-			1:00	EU	CE%sT
-
-# Switzerland
-# From Howse:
-# By the end of the 18th century clocks and watches became commonplace
-# and their performance improved enormously.  Communities began to keep
-# mean time in preference to apparent time -- Geneva from 1780 ....
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-# From Whitman (who writes ``Midnight?''):
-Rule	Swiss	1940	only	-	Nov	 2	0:00	1:00	S
-Rule	Swiss	1940	only	-	Dec	31	0:00	0	-
-# From Shanks:
-Rule	Swiss	1941	1942	-	May	Sun>=1	2:00	1:00	S
-Rule	Swiss	1941	1942	-	Oct	Sun>=1	0:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Zurich	0:34:08 -	LMT	1848 Sep 12
-			0:29:44	-	BMT	1894 Jun # Bern Mean Time
-			1:00	Swiss	CE%sT	1981
-			1:00	EU	CE%sT
-
-# Turkey
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Turkey	1916	only	-	May	 1	0:00	1:00	S
-Rule	Turkey	1916	only	-	Oct	 1	0:00	0	-
-Rule	Turkey	1920	only	-	Mar	28	0:00	1:00	S
-Rule	Turkey	1920	only	-	Oct	25	0:00	0	-
-Rule	Turkey	1921	only	-	Apr	 3	0:00	1:00	S
-Rule	Turkey	1921	only	-	Oct	 3	0:00	0	-
-Rule	Turkey	1922	only	-	Mar	26	0:00	1:00	S
-Rule	Turkey	1922	only	-	Oct	 8	0:00	0	-
-# Whitman gives 1923 Apr 28 - Sep 16 and no DST in 1924-1925; go with Shanks.
-Rule	Turkey	1924	only	-	May	13	0:00	1:00	S
-Rule	Turkey	1924	1925	-	Oct	 1	0:00	0	-
-Rule	Turkey	1925	only	-	May	 1	0:00	1:00	S
-Rule	Turkey	1940	only	-	Jun	30	0:00	1:00	S
-Rule	Turkey	1940	only	-	Oct	 5	0:00	0	-
-Rule	Turkey	1940	only	-	Dec	 1	0:00	1:00	S
-Rule	Turkey	1941	only	-	Sep	21	0:00	0	-
-Rule	Turkey	1942	only	-	Apr	 1	0:00	1:00	S
-# Whitman omits the next two transition and gives 1945 Oct 1; go with Shanks.
-Rule	Turkey	1942	only	-	Nov	 1	0:00	0	-
-Rule	Turkey	1945	only	-	Apr	 2	0:00	1:00	S
-Rule	Turkey	1945	only	-	Oct	 8	0:00	0	-
-Rule	Turkey	1946	only	-	Jun	 1	0:00	1:00	S
-Rule	Turkey	1946	only	-	Oct	 1	0:00	0	-
-Rule	Turkey	1947	1948	-	Apr	Sun>=16	0:00	1:00	S
-Rule	Turkey	1947	1950	-	Oct	Sun>=2	0:00	0	-
-Rule	Turkey	1949	only	-	Apr	10	0:00	1:00	S
-Rule	Turkey	1950	only	-	Apr	19	0:00	1:00	S
-Rule	Turkey	1951	only	-	Apr	22	0:00	1:00	S
-Rule	Turkey	1951	only	-	Oct	 8	0:00	0	-
-Rule	Turkey	1962	only	-	Jul	15	0:00	1:00	S
-Rule	Turkey	1962	only	-	Oct	 8	0:00	0	-
-Rule	Turkey	1964	only	-	May	15	0:00	1:00	S
-Rule	Turkey	1964	only	-	Oct	 1	0:00	0	-
-Rule	Turkey	1970	1972	-	May	Sun>=2	0:00	1:00	S
-Rule	Turkey	1970	1972	-	Oct	Sun>=2	0:00	0	-
-Rule	Turkey	1973	only	-	Jun	 3	1:00	1:00	S
-Rule	Turkey	1973	only	-	Nov	 4	3:00	0	-
-Rule	Turkey	1974	only	-	Mar	31	2:00	1:00	S
-Rule	Turkey	1974	only	-	Nov	 3	5:00	0	-
-Rule	Turkey	1975	only	-	Mar	30	0:00	1:00	S
-Rule	Turkey	1975	1976	-	Oct	lastSun	0:00	0	-
-Rule	Turkey	1976	only	-	Jun	 1	0:00	1:00	S
-Rule	Turkey	1977	1978	-	Apr	Sun>=1	0:00	1:00	S
-Rule	Turkey	1977	only	-	Oct	16	0:00	0	-
-Rule	Turkey	1979	1980	-	Apr	Sun>=1	3:00	1:00	S
-Rule	Turkey	1979	1982	-	Oct	Mon>=11	0:00	0	-
-Rule	Turkey	1981	1982	-	Mar	lastSun	3:00	1:00	S
-Rule	Turkey	1983	only	-	Jul	31	0:00	1:00	S
-Rule	Turkey	1983	only	-	Oct	 2	0:00	0	-
-Rule	Turkey	1985	only	-	Apr	20	0:00	1:00	S
-Rule	Turkey	1985	only	-	Sep	28	0:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Istanbul	1:55:52 -	LMT	1880
-			1:56:56	-	IMT	1910 Oct # Istanbul Mean Time?
-			2:00	Turkey	EE%sT	1978 Oct 15
-			3:00	Turkey	TR%sT	1985 Apr 20 # Turkey Time
-			2:00	Turkey	EE%sT	1986
-			2:00	C-Eur	EE%sT	1991
-			2:00	EU	EE%sT
-Link	Europe/Istanbul	Asia/Istanbul	# Istanbul is in both continents.
-
-# Ukraine
-#
-# From Igor Karpov, who works for the Ukranian Ministry of Justice,
-# via Garrett Wollman (2003-01-27):
-# BTW, I've found the official document on this matter. It's goverment
-# regulations number 509, May 13, 1996. In my poor translation it says:
-# "Time in Ukraine is set to second timezone (Kiev time). Each last Sunday
-# of March at 3am the time is changing to 4am and each last Sunday of
-# October the time at 4am is changing to 3am"
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-# Most of Ukraine since 1970 has been like Kiev.
-Zone Europe/Kiev	2:02:04 -	LMT	1880
-			2:02:04	-	KMT	1924 May  2 # Kiev Mean Time
-			2:00	-	EET	1930 Jun 21
-			3:00	-	MSK	1941 Sep 20
-			1:00	C-Eur	CE%sT	1943 Nov  6
-			3:00	Russia	MSK/MSD	1990
-			3:00	-	MSK	1990 Jul  1 2:00
-			2:00	-	EET	1992
-			2:00	E-Eur	EE%sT	1995
-			2:00	EU	EE%sT
-# Ruthenia used CET 1990/1991.
-Zone Europe/Uzhgorod	1:29:12 -	LMT	1890 Oct
-			1:00	-	CET	1940
-			1:00	C-Eur	CE%sT	1944 Oct
-			1:00	1:00	CEST	1944 Oct 26
-			1:00	-	CET	1945 Jun 29
-			3:00	Russia	MSK/MSD	1990
-			3:00	-	MSK	1990 Jul  1 2:00
-			1:00	-	CET	1991 Mar 31 3:00
-			2:00	-	EET	1992
-			2:00	E-Eur	EE%sT	1995
-			2:00	EU	EE%sT
-# Zaporozh'ye and eastern Lugansk oblasts observed DST 1990/1991.
-# Zaporozh'ye has an apostrophe, but Posix file names can't have apostrophes.
-Zone Europe/Zaporozhye	2:20:40 -	LMT	1880
-			2:20	-	CUT	1924 May  2 # Central Ukraine T
-			2:00	-	EET	1930 Jun 21
-			3:00	-	MSK	1941 Aug 25
-			1:00	C-Eur	CE%sT	1943 Oct 25
-			3:00	Russia	MSK/MSD	1991 Mar 31 2:00
-			2:00	E-Eur	EE%sT	1995
-			2:00	EU	EE%sT
-# Central Crimea used Moscow time 1994/1997.
-Zone Europe/Simferopol	2:16:24 -	LMT	1880
-			2:16	-	SMT	1924 May  2 # Simferopol Mean T
-			2:00	-	EET	1930 Jun 21
-			3:00	-	MSK	1941 Nov
-			1:00	C-Eur	CE%sT	1944 Apr 13
-			3:00	Russia	MSK/MSD	1990
-			3:00	-	MSK	1990 Jul  1 2:00
-			2:00	-	EET	1992
-# From Paul Eggert (1999-11-12):
-# The _Economist_ (1994-05-28, p 45) reports that central Crimea switched
-# from Kiev to Moscow time sometime after the January 1994 elections.
-# Shanks says ``date of change uncertain'', but implies that it happened
-# sometime between the 1994 DST switches.  For now, guess it changed in May.
-			2:00	E-Eur	EE%sT	1994 May
-# From IATA SSIM (1994/1997), which also says that Kerch is still like Kiev.
-			3:00	E-Eur	MSK/MSD	1996 Mar 31 3:00s
-			3:00	1:00	MSD	1996 Oct 27 3:00s
-# IATA SSIM (1997-09) says Crimea switched to EET/EEST.
-# Assume it happened in March by not changing the clocks.
-			3:00	Russia	MSK/MSD	1997
-			3:00	-	MSK	1997 Mar lastSun 1:00u
-			2:00	EU	EE%sT
-
-###############################################################################
-
-# One source shows that Bulgaria, Cyprus, Finland, and Greece observe DST from
-# the last Sunday in March to the last Sunday in September in 1986.
-# The source shows Romania changing a day later than everybody else.
-#
-# According to Bernard Sieloff's source, Poland is in the MET time zone but
-# uses the WE DST rules.  The Western USSR uses EET+1 and ME DST rules.
-# Bernard Sieloff's source claims Romania switches on the same day, but at
-# 00:00 standard time (i.e., 01:00 DST).  It also claims that Turkey
-# switches on the same day, but switches on at 01:00 standard time
-# and off at 00:00 standard time (i.e., 01:00 DST)
-
-# ...
-# Date: Wed, 28 Jan 87 16:56:27 -0100
-# From: Tom Hofmann
-# ...
-#
-# ...the European time rules are...standardized since 1981, when
-# most European coun[tr]ies started DST.  Before that year, only
-# a few countries (UK, France, Italy) had DST, each according
-# to own national rules.  In 1981, however, DST started on
-# 'Apr firstSun', and not on 'Mar lastSun' as in the following
-# years...
-# But also since 1981 there are some more national exceptions
-# than listed in 'europe': Switzerland, for example, joined DST
-# one year later, Denmark ended DST on 'Oct 1' instead of 'Sep
-# lastSun' in 1981---I don't know how they handle now.
-#
-# Finally, DST ist always from 'Apr 1' to 'Oct 1' in the
-# Soviet Union (as far as I know).
-#
-# Tom Hofmann, Scientific Computer Center, CIBA-GEIGY AG,
-# 4002 Basle, Switzerland
-# ...
-
-# ...
-# Date: Wed, 4 Feb 87 22:35:22 +0100
-# From: Dik T. Winter
-# ...
-#
-# The information from Tom Hofmann is (as far as I know) not entirely correct.
-# After a request from chongo at amdahl I tried to retrieve all information
-# about DST in Europe.  I was able to find all from about 1969.
-#
-# ...standardization on DST in Europe started in about 1977 with switches on
-# first Sunday in April and last Sunday in September...
-# In 1981 UK joined Europe insofar that
-# the starting day for both shifted to last Sunday in March.  And from 1982
-# the whole of Europe used DST, with switch dates April 1 and October 1 in
-# the Sov[i]et Union.  In 1985 the SU reverted to standard Europe[a]n switch
-# dates...
-#
-# It should also be remembered that time-zones are not constants; e.g.
-# Portugal switched in 1976 from MET (or CET) to WET with DST...
-# Note also that though there were rules for switch dates not
-# all countries abided to these dates, and many individual deviations
-# occurred, though not since 1982 I believe.  Another note: it is always
-# assumed that DST is 1 hour ahead of normal time, this need not be the
-# case; at least in the Netherlands there have been times when DST was 2 hours
-# in advance of normal time.
-#
-# ...
-# dik t. winter, cwi, amsterdam, nederland
-# ...
-
-# From Bob Devine (1988-01-28):
-# ...
-# Greece: Last Sunday in April to last Sunday in September (iffy on dates).
-# Since 1978.  Change at midnight.
-# ...
-# Monaco: has same DST as France.
-# ...
+# @(#)europe	7.96
+# <pre>
+
+# This data is by no means authoritative; if you think you know better,
+# go ahead and edit the file (and please send any changes to
+# tz@elsie.nci.nih.gov for general use in the future).
+
+# From Paul Eggert (1999-10-29):
+# A good source for time zone historical data outside the U.S. is
+# Thomas G. Shanks, The International Atlas (5th edition),
+# San Diego: ACS Publications, Inc. (1999).
+#
+# Gwillim Law writes that a good source
+# for recent time zone data is the International Air Transport
+# Association's Standard Schedules Information Manual (IATA SSIM),
+# published semiannually.  Law sent in several helpful summaries
+# of the IATA's data after 1990.
+#
+# Except where otherwise noted, Shanks is the source for entries through 1991,
+# and IATA SSIM is the source for entries afterwards.
+#
+# Other sources occasionally used include:
+#
+#	Edward W. Whitman, World Time Differences,
+#	Whitman Publishing Co, 2 Niagara Av, Ealing, London (undated),
+#	which I found in the UCLA library.
+#
+#	<a href="http://www.pettswoodvillage.co.uk/Daylight_Savings_William_Willett.pdf">
+#	William Willett, The Waste of Daylight, 19th edition
+#	</a> (1914-03)
+#
+#	Brazil's Departamento Servico da Hora (DSH),
+#	<a href="http://pcdsh01.on.br/HISTHV.htm">
+#	History of Summer Time
+#	</a> (1998-09-21, in Portuguese)
+
+#
+# I invented the abbreviations marked `*' in the following table;
+# the rest are from earlier versions of this file, or from other sources.
+# Corrections are welcome!
+#                   std dst  2dst
+#                   LMT           Local Mean Time
+#       -4:00       AST ADT       Atlantic
+#       -3:00       WGT WGST      Western Greenland*
+#       -1:00       EGT EGST      Eastern Greenland*
+#        0:00       GMT BST  BDST Greenwich, British Summer
+#        0:00       GMT IST       Greenwich, Irish Summer
+#        0:00       WET WEST WEMT Western Europe
+#        0:19:32.13 AMT NST       Amsterdam, Netherlands Summer (1835-1937)*
+#        0:20       NET NEST      Netherlands (1937-1940)*
+#        1:00       CET CEST CEMT Central Europe
+#        1:00:14    SET           Swedish (1879-1899)*
+#        2:00       EET EEST      Eastern Europe
+#        3:00       MSK MSD       Moscow
+#
+# A reliable and entertaining source about time zones, especially in Britain,
+# Derek Howse, Greenwich time and longitude, Philip Wilson Publishers (1997).
+
+# From Peter Ilieve (1994-12-04),
+# The original six [EU members]: Belgium, France, (West) Germany, Italy,
+# Luxembourg, the Netherlands.
+# Plus, from 1 Jan 73: Denmark, Ireland, United Kingdom.
+# Plus, from 1 Jan 81: Greece.
+# Plus, from 1 Jan 86: Spain, Portugal.
+# Plus, from 1 Jan 95: Austria, Finland, Sweden. (Norway negotiated terms for
+# entry but in a referendum on 28 Nov 94 the people voted No by 52.2% to 47.8%
+# on a turnout of 88.6%. This was almost the same result as Norway's previous
+# referendum in 1972, they are the only country to have said No twice.
+# Referendums in the other three countries voted Yes.)
+# ...
+# Estonia ... uses EU dates but not at 01:00 GMT, they use midnight GMT.
+# I don't think they know yet what they will do from 1996 onwards.
+# ...
+# There shouldn't be any [current members who are not using EU rules].
+# A Directive has the force of law, member states are obliged to enact
+# national law to implement it. The only contentious issue was the
+# different end date for the UK and Ireland, and this was always allowed
+# in the Directive.
+
+
+###############################################################################
+
+# Britain (United Kingdom) and Ireland (Eire)
+
+# From Peter Ilieve (1994-07-06):
+#
+# On 17 Jan 1994 the Independent, a UK quality newspaper, had a piece about
+# historical vistas along the Thames in west London. There was a photo
+# and a sketch map showing some of the sightlines involved. One paragraph
+# of the text said:
+#
+# `An old stone obelisk marking a forgotten terrestrial meridian stands
+# beside the river at Kew. In the 18th century, before time and longitude
+# was standardised by the Royal Observatory in Greenwich, scholars observed
+# this stone and the movement of stars from Kew Observatory nearby. They
+# made their calculations and set the time for the Horse Guards and Parliament,
+# but now the stone is obscured by scrubwood and can only be seen by walking
+# along the towpath within a few yards of it.'
+#
+# I have a one inch to one mile map of London and my estimate of the stone's
+# position is 51 deg. 28' 30" N, 0 deg. 18' 45" W. The longitude should
+# be within about +-2". The Ordnance Survey grid reference is TQ172761.
+#
+# [This yields GMTOFF = -0:01:15 for London LMT in the 18th century.]
+
+# From Paul Eggert (1993-11-18):
+#
+# Howse writes that Britain was the first country to use standard time.
+# The railways cared most about the inconsistencies of local mean time,
+# and it was they who forced a uniform time on the country.
+# The original idea was credited to Dr. William Hyde Wollaston (1766-1828)
+# and was popularized by Abraham Follett Osler (1808-1903).
+# The first railway to adopt London time was the Great Western Railway
+# in November 1840; other railways followed suit, and by 1847 most
+# (though not all) railways used London time.  On 1847-09-22 the
+# Railway Clearing House, an industry standards body, recommended that GMT be
+# adopted at all stations as soon as the General Post Office permitted it.
+# The transition occurred on 12-01 for the L&NW, the Caledonian,
+# and presumably other railways; the January 1848 Bradshaw's lists many
+# railways as using GMT.  By 1855 the vast majority of public
+# clocks in Britain were set to GMT (though some, like the great clock
+# on Tom Tower at Christ Church, Oxford, were fitted with two minute hands,
+# one for local time and one for GMT).  The last major holdout was the legal
+# system, which stubbornly stuck to local time for many years, leading
+# to oddities like polls opening at 08:13 and closing at 16:13.
+# The legal system finally switched to GMT when the Statutes (Definition
+# of Time) Act took effect; it received the Royal Assent on 1880-08-02.
+#
+# In the tables below, we condense this complicated story into a single
+# transition date for London, namely 1847-12-01.  We don't know as much
+# about Dublin, so we use 1880-08-02, the legal transition time.
+
+# From Paul Eggert (2003-09-27):
+# Summer Time was first seriously proposed by William Willett (1857-1915),
+# a London builder and member of the Royal Astronomical Society
+# who circulated a pamphlet ``The Waste of Daylight'' (1907)
+# that proposed advancing clocks 20 minutes on each of four Sundays in April,
+# and retarding them by the same amount on four Sundays in September.
+# A bill was drafted in 1909 and introduced in Parliament several times,
+# but it met with ridicule and opposition, especially from farming interests.
+# Later editions of the pamphlet proposed one-hour summer time, and
+# it was eventually adopted as a wartime measure in 1916.
+# See: Summer Time Arrives Early, The Times (2000-05-18).
+# A monument to Willett was unveiled on 1927-05-21, in an open space in
+# a 45-acre wood near Chislehurst, Kent that was purchased by popular
+# subscription and open to the public.  On the south face of the monolith,
+# designed by G. W. Miller, is the the William Willett Memorial Sundial,
+# which is permanently set to Summer Time.
+
+# From Winston Churchill (1934-04-28):
+# It is one of the paradoxes of history that we should owe the boon of
+# summer time, which gives every year to the people of this country
+# between 160 and 170 hours more daylight leisure, to a war which
+# plunged Europe into darkness for four years, and shook the
+# foundations of civilization throughout the world.
+#	-- <a href="http://www.winstonchurchill.org/fh114willett.htm">
+#	"A Silent Toast to William Willett", Pictorial Weekly
+#	</a>
+
+# From Paul Eggert (1996-09-03):
+# The OED Supplement says that the English originally said ``Daylight Saving''
+# when they were debating the adoption of DST in 1908; but by 1916 this
+# term appears only in quotes taken from DST's opponents, whereas the
+# proponents (who eventually won the argument) are quoted as using ``Summer''.
+
+# From Arthur David Olson (1989-01-19):
+#
+# A source at the British Information Office in New York avers that it's
+# known as "British" Summer Time in all parts of the United Kingdom.
+
+# Date: 4 Jan 89 08:57:25 GMT (Wed)
+# From: Jonathan Leffler
+# [British Summer Time] is fixed annually by Act of Parliament.
+# If you can predict what Parliament will do, you should be in
+# politics making a fortune, not computing.
+
+# From Chris Carrier (1996-06-14):
+# I remember reading in various wartime issues of the London Times the
+# acronym BDST for British Double Summer Time.  Look for the published
+# time of sunrise and sunset in The Times, when BDST was in effect, and
+# if you find a zone reference it will say, "All times B.D.S.T."
+
+# From Joseph S. Myers (1999-09-02):
+# ... some military cables (WO 219/4100 - this is a copy from the
+# main SHAEF archives held in the US National Archives, SHAEF/5252/8/516)
+# agree that the usage is BDST (this appears in a message dated 17 Feb 1945).
+
+# From Joseph S. Myers (2000-10-03):
+# On 18th April 1941, Sir Stephen Tallents of the BBC wrote to Sir
+# Alexander Maxwell of the Home Office asking whether there was any
+# official designation; the reply of the 21st was that there wasn't
+# but he couldn't think of anything better than the "Double British
+# Summer Time" that the BBC had been using informally.
+# http://student.cusu.cam.ac.uk/~jsm28/british-time/bbc-19410418.png
+# http://student.cusu.cam.ac.uk/~jsm28/british-time/ho-19410421.png
+
+# From Sir Alexander Maxwell in the above-mentioned letter (1941-04-21):
+# [N]o official designation has as far as I know been adopted for the time
+# which is to be introduced in May....
+# I cannot think of anything better than "Double British Summer Time"
+# which could not be said to run counter to any official description.
+
+# From Paul Eggert (2000-10-02):
+# Howse writes (p 157) `DBST' too, but `BDST' seems to have been common
+# and follows the more usual convention of putting the location name first,
+# so we use `BDST'.
+
+# Peter Ilieve (1998-04-19) described at length
+# the history of summer time legislation in the United Kingdom.
+# Since 1998 Joseph S. Myers has been updating
+# and extending this list, which can be found in
+# <a href="http://student.cusu.cam.ac.uk/~jsm28/british-time/">
+# History of legal time in Britain
+# </a>
+
+# From Joseph S. Myers (1998-01-06):
+#
+# The legal time in the UK outside of summer time is definitely GMT, not UTC;
+# see Lord Tanlaw's speech
+# <a href="http://www.parliament.the-stationery-office.co.uk/pa/ld199697/ldhansrd/pdvn/lds97/text/70611-20.htm#70611-20_head0">
+# (Lords Hansard 11 June 1997 columns 964 to 976)
+# </a>.
+
+# From Paul Eggert (2001-07-18):
+#
+# For lack of other data, we'll follow Shanks for Eire in 1940-1948.
+#
+# Given Ilieve and Myers's data, the following claims by Shanks are incorrect:
+#     * Wales did not switch from GMT to daylight saving time until
+#	1921 Apr 3, when they began to conform with the rest of Great Britain.
+# Actually, Wales was identical after 1880.
+#     * Eire had two transitions on 1916 Oct 1.
+# It actually just had one transition.
+#     * Northern Ireland used single daylight saving time throughout WW II.
+# Actually, it conformed to Britain.
+#     * GB-Eire changed standard time to 1 hour ahead of GMT on 1968-02-18.
+# Actually, that date saw the usual switch to summer time.
+# Standard time was not changed until 1968-10-27 (the clocks didn't change).
+#
+# Here is another incorrect claim by Shanks:
+#     * Jersey, Guernsey, and the Isle of Man did not switch from GMT
+#	to daylight saving time until 1921 Apr 3, when they began to
+#	conform with Great Britain.
+# S.R.&O. 1916, No. 382 and HO 45/10811/312364 (quoted above) say otherwise.
+#
+# The following claim by Shanks is possible though doubtful;
+# we'll ignore it for now.
+#     * Dublin's 1971-10-31 switch was at 02:00, even though London's was 03:00.
+#
+#
+# Whitman says Dublin Mean Time was -0:25:21, which is more precise than Shanks.
+# Perhaps this was Dunsink Observatory Time, as Dunsink Observatory
+# (8 km NW of Dublin's center) seemingly was to Dublin as Greenwich was
+# to London.  For example:
+#
+#   "Timeball on the ballast office is down.  Dunsink time."
+#   -- James Joyce, Ulysses
+
+# From Joseph S. Myers (2005-01-26):
+# Irish laws are available online at www.irishstatutebook.ie.  These include 
+# various relating to legal time, for example:
+# 
+# ZZA13Y1923.html ZZA12Y1924.html ZZA8Y1925.html ZZSIV20PG1267.html
+# 
+# ZZSI71Y1947.html ZZSI128Y1948.html ZZSI23Y1949.html ZZSI41Y1950.html
+# ZZSI27Y1951.html ZZSI73Y1952.html
+# 
+# ZZSI11Y1961.html ZZSI232Y1961.html ZZSI182Y1962.html
+# ZZSI167Y1963.html ZZSI257Y1964.html ZZSI198Y1967.html
+# ZZA23Y1968.html ZZA17Y1971.html
+# 
+# ZZSI67Y1981.html ZZSI212Y1982.html ZZSI45Y1986.html
+# ZZSI264Y1988.html ZZSI52Y1990.html ZZSI371Y1992.html
+# ZZSI395Y1994.html ZZSI484Y1997.html ZZSI506Y2001.html
+#
+# [These are all relative to the root, e.g., the first is
+# <http://www.irishstatutebook.ie/ZZA13Y1923.html>.]
+# 
+# (These are those I found, but there could be more.  In any case these 
+# should allow various updates to the comments in the europe file to cover 
+# the laws applicable in Ireland.)
+# 
+# (Note that the time in the Republic of Ireland since 1968 has been defined 
+# in terms of standard time being GMT+1 with a period of winter time when it 
+# is GMT, rather than standard time being GMT with a period of summer time 
+# being GMT+1.)
+
+# From Paul Eggert (1999-03-28):
+# Clive Feather (<news:859845706.26043.0@office.demon.net>, 1997-03-31)
+# reports that Folkestone (Cheriton) Shuttle Terminal uses Concession Time
+# (CT), equivalent to French civil time.
+# Julian Hill (<news:36118128.5A14@virgin.net>, 1998-09-30) reports that
+# trains between Dollands Moor (the freight facility next door)
+# and Frethun run in CT.
+# My admittedly uninformed guess is that the terminal has two authorities,
+# the French concession operators and the British civil authorities,
+# and that the time depends on who you're talking to.
+# If, say, the British police were called to the station for some reason,
+# I would expect the official police report to use GMT/BST and not CET/CEST.
+# This is a borderline case, but for now let's stick to GMT/BST.
+
+# From an anonymous contributor (1996-06-02):
+# The law governing time in Ireland is under Statutory Instrument SI 395/94,
+# which gives force to European Union 7th Council Directive # 94/21/EC.
+# Under this directive, the Minister for Justice in Ireland makes appropriate
+# regulations. I spoke this morning with the Secretary of the Department of
+# Justice (tel +353 1 678 9711) who confirmed to me that the correct name is
+# "Irish Summer Time", abbreviated to "IST".
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+# Summer Time Act, 1916
+Rule	GB-Eire	1916	only	-	May	21	2:00s	1:00	BST
+Rule	GB-Eire	1916	only	-	Oct	 1	2:00s	0	GMT
+# S.R.&O. 1917, No. 358
+Rule	GB-Eire	1917	only	-	Apr	 8	2:00s	1:00	BST
+Rule	GB-Eire	1917	only	-	Sep	17	2:00s	0	GMT
+# S.R.&O. 1918, No. 274
+Rule	GB-Eire	1918	only	-	Mar	24	2:00s	1:00	BST
+Rule	GB-Eire	1918	only	-	Sep	30	2:00s	0	GMT
+# S.R.&O. 1919, No. 297
+Rule	GB-Eire	1919	only	-	Mar	30	2:00s	1:00	BST
+Rule	GB-Eire	1919	only	-	Sep	29	2:00s	0	GMT
+# S.R.&O. 1920, No. 458
+Rule	GB-Eire	1920	only	-	Mar	28	2:00s	1:00	BST
+# S.R.&O. 1920, No. 1844
+Rule	GB-Eire	1920	only	-	Oct	25	2:00s	0	GMT
+# S.R.&O. 1921, No. 363
+Rule	GB-Eire	1921	only	-	Apr	 3	2:00s	1:00	BST
+Rule	GB-Eire	1921	only	-	Oct	 3	2:00s	0	GMT
+# S.R.&O. 1922, No. 264
+Rule	GB-Eire	1922	only	-	Mar	26	2:00s	1:00	BST
+Rule	GB-Eire	1922	only	-	Oct	 8	2:00s	0	GMT
+# The Summer Time Act, 1922
+Rule	GB-Eire	1923	only	-	Apr	Sun>=16	2:00s	1:00	BST
+Rule	GB-Eire	1923	1924	-	Sep	Sun>=16	2:00s	0	GMT
+Rule	GB-Eire	1924	only	-	Apr	Sun>=9	2:00s	1:00	BST
+Rule	GB-Eire	1925	1926	-	Apr	Sun>=16	2:00s	1:00	BST
+# The Summer Time Act, 1925
+Rule	GB-Eire	1925	1938	-	Oct	Sun>=2	2:00s	0	GMT
+Rule	GB-Eire	1927	only	-	Apr	Sun>=9	2:00s	1:00	BST
+Rule	GB-Eire	1928	1929	-	Apr	Sun>=16	2:00s	1:00	BST
+Rule	GB-Eire	1930	only	-	Apr	Sun>=9	2:00s	1:00	BST
+Rule	GB-Eire	1931	1932	-	Apr	Sun>=16	2:00s	1:00	BST
+Rule	GB-Eire	1933	only	-	Apr	Sun>=9	2:00s	1:00	BST
+Rule	GB-Eire	1934	only	-	Apr	Sun>=16	2:00s	1:00	BST
+Rule	GB-Eire	1935	only	-	Apr	Sun>=9	2:00s	1:00	BST
+Rule	GB-Eire	1936	1937	-	Apr	Sun>=16	2:00s	1:00	BST
+Rule	GB-Eire	1938	only	-	Apr	Sun>=9	2:00s	1:00	BST
+Rule	GB-Eire	1939	only	-	Apr	Sun>=16	2:00s	1:00	BST
+# S.R.&O. 1939, No. 1379
+Rule	GB-Eire	1939	only	-	Nov	Sun>=16	2:00s	0	GMT
+# S.R.&O. 1940, No. 172 and No. 1883
+Rule	GB-Eire	1940	only	-	Feb	Sun>=23	2:00s	1:00	BST
+# S.R.&O. 1941, No. 476
+Rule	GB-Eire	1941	only	-	May	Sun>=2	1:00s	2:00	BDST
+Rule	GB-Eire	1941	1943	-	Aug	Sun>=9	1:00s	1:00	BST
+# S.R.&O. 1942, No. 506
+Rule	GB-Eire	1942	1944	-	Apr	Sun>=2	1:00s	2:00	BDST
+# S.R.&O. 1944, No. 932
+Rule	GB-Eire	1944	only	-	Sep	Sun>=16	1:00s	1:00	BST
+# S.R.&O. 1945, No. 312
+Rule	GB-Eire	1945	only	-	Apr	Mon>=2	1:00s	2:00	BDST
+Rule	GB-Eire	1945	only	-	Jul	Sun>=9	1:00s	1:00	BST
+# S.R.&O. 1945, No. 1208
+Rule	GB-Eire	1945	1946	-	Oct	Sun>=2	2:00s	0	GMT
+Rule	GB-Eire	1946	only	-	Apr	Sun>=9	2:00s	1:00	BST
+# The Summer Time Act, 1947
+Rule	GB-Eire	1947	only	-	Mar	16	2:00s	1:00	BST
+Rule	GB-Eire	1947	only	-	Apr	13	1:00s	2:00	BDST
+Rule	GB-Eire	1947	only	-	Aug	10	1:00s	1:00	BST
+Rule	GB-Eire	1947	only	-	Nov	 2	2:00s	0	GMT
+# Summer Time Order, 1948 (S.I. 1948/495)
+Rule	GB-Eire	1948	only	-	Mar	14	2:00s	1:00	BST
+Rule	GB-Eire	1948	only	-	Oct	31	2:00s	0	GMT
+# Summer Time Order, 1949 (S.I. 1949/373)
+Rule	GB-Eire	1949	only	-	Apr	 3	2:00s	1:00	BST
+Rule	GB-Eire	1949	only	-	Oct	30	2:00s	0	GMT
+# Summer Time Order, 1950 (S.I. 1950/518)
+# Summer Time Order, 1951 (S.I. 1951/430)
+# Summer Time Order, 1952 (S.I. 1952/451)
+Rule	GB-Eire	1950	1952	-	Apr	Sun>=14	2:00s	1:00	BST
+Rule	GB-Eire	1950	1952	-	Oct	Sun>=21	2:00s	0	GMT
+# revert to the rules of the Summer Time Act, 1925
+Rule	GB-Eire	1953	only	-	Apr	Sun>=16	2:00s	1:00	BST
+Rule	GB-Eire	1953	1960	-	Oct	Sun>=2	2:00s	0	GMT
+Rule	GB-Eire	1954	only	-	Apr	Sun>=9	2:00s	1:00	BST
+Rule	GB-Eire	1955	1956	-	Apr	Sun>=16	2:00s	1:00	BST
+Rule	GB-Eire	1957	only	-	Apr	Sun>=9	2:00s	1:00	BST
+Rule	GB-Eire	1958	1959	-	Apr	Sun>=16	2:00s	1:00	BST
+Rule	GB-Eire	1960	only	-	Apr	Sun>=9	2:00s	1:00	BST
+# Summer Time Order, 1961 (S.I. 1961/71)
+# Summer Time (1962) Order, 1961 (S.I. 1961/2465)
+# Summer Time Order, 1963 (S.I. 1963/81)
+Rule	GB-Eire	1961	1963	-	Mar	lastSun	2:00s	1:00	BST
+Rule	GB-Eire	1961	1968	-	Oct	Sun>=23	2:00s	0	GMT
+# Summer Time (1964) Order, 1963 (S.I. 1963/2101)
+# Summer Time Order, 1964 (S.I. 1964/1201)
+# Summer Time Order, 1967 (S.I. 1967/1148)
+Rule	GB-Eire	1964	1967	-	Mar	Sun>=19	2:00s	1:00	BST
+# Summer Time Order, 1968 (S.I. 1968/117)
+Rule	GB-Eire	1968	only	-	Feb	18	2:00s	1:00	BST
+# The British Standard Time Act, 1968
+#	(no summer time)
+# The Summer Time Act, 1972
+Rule	GB-Eire	1972	1980	-	Mar	Sun>=16	2:00s	1:00	BST
+Rule	GB-Eire	1972	1980	-	Oct	Sun>=23	2:00s	0	GMT
+# Summer Time Order, 1980 (S.I. 1980/1089)
+# Summer Time Order, 1982 (S.I. 1982/1673)
+# Summer Time Order, 1986 (S.I. 1986/223)
+# Summer Time Order, 1988 (S.I. 1988/931)
+Rule	GB-Eire	1981	1995	-	Mar	lastSun	1:00u	1:00	BST
+Rule	GB-Eire 1981	1989	-	Oct	Sun>=23	1:00u	0	GMT
+# Summer Time Order, 1989 (S.I. 1989/985)
+# Summer Time Order, 1992 (S.I. 1992/1729)
+# Summer Time Order 1994 (S.I. 1994/2798)
+Rule	GB-Eire 1990	1995	-	Oct	Sun>=22	1:00u	0	GMT
+# Summer Time Order 1997 (S.I. 1997/2982)
+# See EU for rules starting in 1996.
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/London	-0:01:15 -	LMT	1847 Dec  1
+			 0:00	GB-Eire	%s	1968 Oct 27
+			 1:00	-	BST	1971 Oct 31 2:00u
+			 0:00	GB-Eire	%s	1996
+			 0:00	EU	GMT/BST
+Zone	Europe/Dublin	-0:25:00 -	LMT	1880 Aug  2
+			-0:25:21 -	DMT	1916 May 21 2:00
+			-0:25:21 1:00	IST	1916 Oct  1 2:00s
+			 0:00	GB-Eire	%s	1921 Dec  6 # independence
+			 0:00	GB-Eire	GMT/IST	1940 Feb 25 2:00
+			 0:00	1:00	IST	1946 Oct  6 2:00
+			 0:00	-	GMT	1947 Mar 16 2:00
+			 0:00	1:00	IST	1947 Nov  2 2:00
+			 0:00	-	GMT	1948 Apr 18 2:00
+			 0:00	GB-Eire	GMT/IST	1968 Oct 27
+			 1:00	-	IST	1971 Oct 31 2:00u
+			 0:00	GB-Eire	GMT/IST	1996
+			 0:00	EU	GMT/IST
+
+###############################################################################
+
+# Continental Europe
+
+# EU rules are for the European Union, previously known as the EC, EEC,
+# Common Market, etc.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	EU	1977	1980	-	Apr	Sun>=1	 1:00u	1:00	S
+Rule	EU	1977	only	-	Sep	lastSun	 1:00u	0	-
+Rule	EU	1978	only	-	Oct	 1	 1:00u	0	-
+Rule	EU	1979	1995	-	Sep	lastSun	 1:00u	0	-
+Rule	EU	1981	max	-	Mar	lastSun	 1:00u	1:00	S
+Rule	EU	1996	max	-	Oct	lastSun	 1:00u	0	-
+# The most recent directive covers the years starting in 2002.  See:
+# <a href="http://europa.eu.int/eur-lex/en/lif/dat/2000/en_300L0084.html"
+# Directive 2000/84/EC of the European Parliament and of the Council
+# of 19 January 2001 on summer-time arrangements.
+# </a>
+
+# W-Eur differs from EU only in that W-Eur uses standard time.
+Rule	W-Eur	1977	1980	-	Apr	Sun>=1	 1:00s	1:00	S
+Rule	W-Eur	1977	only	-	Sep	lastSun	 1:00s	0	-
+Rule	W-Eur	1978	only	-	Oct	 1	 1:00s	0	-
+Rule	W-Eur	1979	1995	-	Sep	lastSun	 1:00s	0	-
+Rule	W-Eur	1981	max	-	Mar	lastSun	 1:00s	1:00	S
+Rule	W-Eur	1996	max	-	Oct	lastSun	 1:00s	0	-
+
+# Older C-Eur rules are for convenience in the tables.
+# From 1977 on, C-Eur differs from EU only in that C-Eur uses standard time.
+Rule	C-Eur	1916	only	-	Apr	30	23:00	1:00	S
+Rule	C-Eur	1916	only	-	Oct	 1	 1:00	0	-
+Rule	C-Eur	1917	1918	-	Apr	Mon>=15	 2:00s	1:00	S
+Rule	C-Eur	1917	1918	-	Sep	Mon>=15	 2:00s	0	-
+Rule	C-Eur	1940	only	-	Apr	 1	 2:00s	1:00	S
+Rule	C-Eur	1942	only	-	Nov	 2	 2:00s	0	-
+Rule	C-Eur	1943	only	-	Mar	29	 2:00s	1:00	S
+Rule	C-Eur	1943	only	-	Oct	 4	 2:00s	0	-
+Rule	C-Eur	1944	only	-	Apr	 3	 2:00s	1:00	S
+# Whitman gives 1944 Oct 7; go with Shanks.
+Rule	C-Eur	1944	only	-	Oct	 2	 2:00s	0	-
+Rule	C-Eur	1977	1980	-	Apr	Sun>=1	 2:00s	1:00	S
+Rule	C-Eur	1977	only	-	Sep	lastSun	 2:00s	0	-
+Rule	C-Eur	1978	only	-	Oct	 1	 2:00s	0	-
+Rule	C-Eur	1979	1995	-	Sep	lastSun	 2:00s	0	-
+Rule	C-Eur	1981	max	-	Mar	lastSun	 2:00s	1:00	S
+Rule	C-Eur	1996	max	-	Oct	lastSun	 2:00s	0	-
+
+# E-Eur differs from EU only in that E-Eur switches at midnight local time.
+Rule	E-Eur	1977	1980	-	Apr	Sun>=1	 0:00	1:00	S
+Rule	E-Eur	1977	only	-	Sep	lastSun	 0:00	0	-
+Rule	E-Eur	1978	only	-	Oct	 1	 0:00	0	-
+Rule	E-Eur	1979	1995	-	Sep	lastSun	 0:00	0	-
+Rule	E-Eur	1981	max	-	Mar	lastSun	 0:00	1:00	S
+Rule	E-Eur	1996	max	-	Oct	lastSun	 0:00	0	-
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Russia	1917	only	-	Jul	 1	23:00	1:00	MST	# Moscow Summer Time
+Rule	Russia	1917	only	-	Dec	28	 0:00	0	MMT	# Moscow Mean Time
+Rule	Russia	1918	only	-	May	31	22:00	2:00	MDST	# Moscow Double Summer Time
+Rule	Russia	1918	only	-	Sep	16	 1:00	1:00	MST
+Rule	Russia	1919	only	-	May	31	23:00	2:00	MDST
+Rule	Russia	1919	only	-	Jul	 1	 2:00	1:00	S
+Rule	Russia	1919	only	-	Aug	16	 0:00	0	-
+Rule	Russia	1921	only	-	Feb	14	23:00	1:00	S
+Rule	Russia	1921	only	-	Mar	20	23:00	2:00	M # Midsummer
+Rule	Russia	1921	only	-	Sep	 1	 0:00	1:00	S
+Rule	Russia	1921	only	-	Oct	 1	 0:00	0	-
+# Act No.925 of the Council of Ministers of the USSR (1980-10-24):
+Rule	Russia	1981	1984	-	Apr	 1	 0:00	1:00	S
+Rule	Russia	1981	1983	-	Oct	 1	 0:00	0	-
+# Act No.967 of the Council of Ministers of the USSR (1984-09-13), repeated in
+# Act No.227 of the Council of Ministers of the USSR (1989-03-14):
+Rule	Russia	1984	1991	-	Sep	lastSun	 2:00s	0	-
+Rule	Russia	1985	1991	-	Mar	lastSun	 2:00s	1:00	S
+#
+Rule	Russia	1992	only	-	Mar	lastSat	 23:00	1:00	S
+Rule	Russia	1992	only	-	Sep	lastSat	 23:00	0	-
+Rule	Russia	1993	max	-	Mar	lastSun	 2:00s	1:00	S
+Rule	Russia	1993	1995	-	Sep	lastSun	 2:00s	0	-
+Rule	Russia	1996	max	-	Oct	lastSun	 2:00s	0	-
+
+# These are for backward compatibility with older versions.
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	WET		0:00	EU	WE%sT
+Zone	CET		1:00	C-Eur	CE%sT
+Zone	MET		1:00	C-Eur	ME%sT
+Zone	EET		2:00	EU	EE%sT
+
+# Previous editions of this database used abbreviations like MET DST
+# for Central European Summer Time, but this didn't agree with common usage.
+
+# From Markus Kuhn (1996-07-12):
+# The official German names ... are
+#
+#	Mitteleuropaeische Zeit (MEZ)         = UTC+01:00
+#	Mitteleuropaeische Sommerzeit (MESZ)  = UTC+02:00
+#
+# as defined in the German Time Act (Gesetz ueber die Zeitbestimmung (ZeitG),
+# 1978-07-25, Bundesgesetzblatt, Jahrgang 1978, Teil I, S. 1110-1111)....
+# I wrote ... to the German Federal Physical-Technical Institution
+#
+#	Physikalisch-Technische Bundesanstalt (PTB)
+#	Laboratorium 4.41 "Zeiteinheit"
+#	Postfach 3345
+#	D-38023 Braunschweig
+#	phone: +49 531 592-0
+#
+# ... I received today an answer letter from Dr. Peter Hetzel, head of the PTB
+# department for time and frequency transmission.  He explained that the
+# PTB translates MEZ and MESZ into English as
+#
+#	Central European Time (CET)         = UTC+01:00
+#	Central European Summer Time (CEST) = UTC+02:00
+
+
+# Albania
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Albania	1940	only	-	Jun	16	0:00	1:00	S
+Rule	Albania	1942	only	-	Nov	 2	3:00	0	-
+Rule	Albania	1943	only	-	Mar	29	2:00	1:00	S
+Rule	Albania	1943	only	-	Apr	10	3:00	0	-
+Rule	Albania	1974	only	-	May	 4	0:00	1:00	S
+Rule	Albania	1974	only	-	Oct	 2	0:00	0	-
+Rule	Albania	1975	only	-	May	 1	0:00	1:00	S
+Rule	Albania	1975	only	-	Oct	 2	0:00	0	-
+Rule	Albania	1976	only	-	May	 2	0:00	1:00	S
+Rule	Albania	1976	only	-	Oct	 3	0:00	0	-
+Rule	Albania	1977	only	-	May	 8	0:00	1:00	S
+Rule	Albania	1977	only	-	Oct	 2	0:00	0	-
+Rule	Albania	1978	only	-	May	 6	0:00	1:00	S
+Rule	Albania	1978	only	-	Oct	 1	0:00	0	-
+Rule	Albania	1979	only	-	May	 5	0:00	1:00	S
+Rule	Albania	1979	only	-	Sep	30	0:00	0	-
+Rule	Albania	1980	only	-	May	 3	0:00	1:00	S
+Rule	Albania	1980	only	-	Oct	 4	0:00	0	-
+Rule	Albania	1981	only	-	Apr	26	0:00	1:00	S
+Rule	Albania	1981	only	-	Sep	27	0:00	0	-
+Rule	Albania	1982	only	-	May	 2	0:00	1:00	S
+Rule	Albania	1982	only	-	Oct	 3	0:00	0	-
+Rule	Albania	1983	only	-	Apr	18	0:00	1:00	S
+Rule	Albania	1983	only	-	Oct	 1	0:00	0	-
+Rule	Albania	1984	only	-	Apr	 1	0:00	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Tirane	1:19:20 -	LMT	1914
+			1:00	-	CET	1940 Jun 16
+			1:00	Albania	CE%sT	1984 Jul
+			1:00	EU	CE%sT
+
+# Andorra
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Andorra	0:06:04 -	LMT	1901
+			0:00	-	WET	1946 Sep 30
+			1:00	-	CET	1985 Mar 31 2:00
+			1:00	EU	CE%sT
+
+# Austria
+
+# From Paul Eggert (2003-02-28): Shanks gives 1918-06-16 and
+# 1945-11-18, but the Austrian Federal Office of Metrology and
+# Surveying (BEV) gives 1918-09-16 and for Vienna gives the "alleged"
+# date of 1945-04-12 with no time.  For the 1980-04-06 transition
+# Shanks gives 02:00, the BEV 00:00.  Go with the BEV, and guess 02:00
+# for 1945-04-12.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Austria	1920	only	-	Apr	 5	2:00s	1:00	S
+Rule	Austria	1920	only	-	Sep	13	2:00s	0	-
+Rule	Austria	1946	only	-	Apr	14	2:00s	1:00	S
+Rule	Austria	1946	1948	-	Oct	Sun>=1	2:00s	0	-
+Rule	Austria	1947	only	-	Apr	 6	2:00s	1:00	S
+Rule	Austria	1948	only	-	Apr	18	2:00s	1:00	S
+Rule	Austria	1980	only	-	Apr	 6	0:00	1:00	S
+Rule	Austria	1980	only	-	Sep	28	0:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Vienna	1:05:20 -	LMT	1893 Apr
+			1:00	C-Eur	CE%sT	1920
+			1:00	Austria	CE%sT	1940 Apr  1 2:00s
+			1:00	C-Eur	CE%sT	1945 Apr  2 2:00s
+			1:00	1:00	CEST	1945 Apr 12 2:00s
+			1:00	-	CET	1946
+			1:00	Austria	CE%sT	1981
+			1:00	EU	CE%sT
+
+# Belarus
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Minsk	1:50:16 -	LMT	1880
+			1:50	-	MMT	1924 May 2 # Minsk Mean Time
+			2:00	-	EET	1930 Jun 21
+			3:00	-	MSK	1941 Jun 28
+			1:00	C-Eur	CE%sT	1944 Jul  3
+			3:00	Russia	MSK/MSD	1990
+			3:00	-	MSK	1991 Mar 31 2:00s
+			2:00	1:00	EEST	1991 Sep 29 2:00s
+			2:00	-	EET	1992 Mar 29 0:00s
+			2:00	1:00	EEST	1992 Sep 27 0:00s
+			2:00	Russia	EE%sT
+
+# Belgium
+#
+# From Paul Eggert (1997-07-02):
+# Entries from 1918 through 1991 are taken from:
+#	Annuaire de L'Observatoire Royal de Belgique,
+#	Avenue Circulaire, 3, B-1180 BRUXELLES, CLVIIe annee, 1991
+#	(Imprimerie HAYEZ, s.p.r.l., Rue Fin, 4, 1080 BRUXELLES, MCMXC),
+#	pp 8-9.
+# LMT before 1892 was 0:17:30, according to the official journal of Belgium:
+#	Moniteur Belge, Samedi 30 Avril 1892, N.121.
+# Thanks to Pascal Delmoitie for these references.
+# The 1918 rules are listed for completeness; they apply to unoccupied Belgium.
+# Assume Brussels switched to WET in 1918 when the armistice took effect.
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Belgium	1918	only	-	Mar	 9	 0:00s	1:00	S
+Rule	Belgium	1918	1919	-	Oct	Sat>=1	23:00s	0	-
+Rule	Belgium	1919	only	-	Mar	 1	23:00s	1:00	S
+Rule	Belgium	1920	only	-	Feb	14	23:00s	1:00	S
+Rule	Belgium	1920	only	-	Oct	23	23:00s	0	-
+Rule	Belgium	1921	only	-	Mar	14	23:00s	1:00	S
+Rule	Belgium	1921	only	-	Oct	25	23:00s	0	-
+Rule	Belgium	1922	only	-	Mar	25	23:00s	1:00	S
+Rule	Belgium	1922	1927	-	Oct	Sat>=1	23:00s	0	-
+Rule	Belgium	1923	only	-	Apr	21	23:00s	1:00	S
+Rule	Belgium	1924	only	-	Mar	29	23:00s	1:00	S
+Rule	Belgium	1925	only	-	Apr	 4	23:00s	1:00	S
+# DSH writes that a royal decree of 1926-02-22 specified the Sun following 3rd
+# Sat in Apr (except if it's Easter, in which case it's one Sunday earlier),
+# to Sun following 1st Sat in Oct, and that a royal decree of 1928-09-15
+# changed the transition times to 02:00 GMT.
+Rule	Belgium	1926	only	-	Apr	17	23:00s	1:00	S
+Rule	Belgium	1927	only	-	Apr	 9	23:00s	1:00	S
+Rule	Belgium	1928	only	-	Apr	14	23:00s	1:00	S
+Rule	Belgium	1928	1938	-	Oct	Sun>=2	 2:00s	0	-
+Rule	Belgium	1929	only	-	Apr	21	 2:00s	1:00	S
+Rule	Belgium	1930	only	-	Apr	13	 2:00s	1:00	S
+Rule	Belgium	1931	only	-	Apr	19	 2:00s	1:00	S
+Rule	Belgium	1932	only	-	Apr	 3	 2:00s	1:00	S
+Rule	Belgium	1933	only	-	Mar	26	 2:00s	1:00	S
+Rule	Belgium	1934	only	-	Apr	 8	 2:00s	1:00	S
+Rule	Belgium	1935	only	-	Mar	31	 2:00s	1:00	S
+Rule	Belgium	1936	only	-	Apr	19	 2:00s	1:00	S
+Rule	Belgium	1937	only	-	Apr	 4	 2:00s	1:00	S
+Rule	Belgium	1938	only	-	Mar	27	 2:00s	1:00	S
+Rule	Belgium	1939	only	-	Apr	16	 2:00s	1:00	S
+Rule	Belgium	1939	only	-	Nov	19	 2:00s	0	-
+Rule	Belgium	1940	only	-	Feb	25	 2:00s	1:00	S
+Rule	Belgium	1944	only	-	Sep	17	 2:00s	0	-
+Rule	Belgium	1945	only	-	Apr	 2	 2:00s	1:00	S
+Rule	Belgium	1945	only	-	Sep	16	 2:00s	0	-
+Rule	Belgium	1946	only	-	May	19	 2:00s	1:00	S
+Rule	Belgium	1946	only	-	Oct	 7	 2:00s	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Brussels	0:17:30 -	LMT	1880
+			0:17:30	-	BMT	1892 May  1 12:00 # Brussels MT
+			0:00	-	WET	1914 Nov  8
+			1:00	-	CET	1916 May  1  0:00
+			1:00	C-Eur	CE%sT	1918 Nov 11 11:00u
+			0:00	Belgium	WE%sT	1940 May 20  2:00s
+			1:00	C-Eur	CE%sT	1944 Sep  3
+			1:00	Belgium	CE%sT	1977
+			1:00	EU	CE%sT
+
+# Bosnia and Herzegovina
+# see Serbia and Montenegro
+
+# Bulgaria
+#
+# From Plamen Simenov via Steffen Thorsen (1999-09-09):
+# A document of Government of Bulgaria (No.94/1997) says:
+# EET --> EETDST is in 03:00 Local time in last Sunday of March ...
+# EETDST --> EET is in 04:00 Local time in last Sunday of October
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Bulg	1979	only	-	Mar	31	23:00	1:00	S
+Rule	Bulg	1979	only	-	Oct	 1	 1:00	0	-
+Rule	Bulg	1980	1982	-	Apr	Sat<=7	23:00	1:00	S
+Rule	Bulg	1980	only	-	Sep	29	 1:00	0	-
+Rule	Bulg	1981	only	-	Sep	27	 2:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Sofia	1:33:16 -	LMT	1880
+			1:56:56	-	IMT	1894 Nov 30 # Istanbul MT?
+			2:00	-	EET	1942 Nov  2  3:00
+			1:00	C-Eur	CE%sT	1945 Apr  2  3:00
+			2:00	-	EET	1979 Mar 31 23:00
+			2:00	Bulg	EE%sT	1982 Sep 26  2:00
+			2:00	C-Eur	EE%sT	1991
+			2:00	E-Eur	EE%sT	1997
+			2:00	EU	EE%sT
+
+# Croatia
+# see Serbia and Montenegro
+
+# Cyprus
+# Please see the `asia' file for Asia/Nicosia.
+
+# Czech Republic
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Czech	1945	only	-	Apr	 8	2:00s	1:00	S
+Rule	Czech	1945	only	-	Nov	18	2:00s	0	-
+Rule	Czech	1946	only	-	May	 6	2:00s	1:00	S
+Rule	Czech	1946	1949	-	Oct	Sun>=1	2:00s	0	-
+Rule	Czech	1947	only	-	Apr	20	2:00s	1:00	S
+Rule	Czech	1948	only	-	Apr	18	2:00s	1:00	S
+Rule	Czech	1949	only	-	Apr	 9	2:00s	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Prague	0:57:44 -	LMT	1850
+			0:57:44	-	PMT	1891 Oct     # Prague Mean Time
+			1:00	C-Eur	CE%sT	1944 Sep 17 2:00s
+			1:00	Czech	CE%sT	1979
+			1:00	EU	CE%sT
+
+# Denmark, Faeroe Islands, and Greenland
+
+# From Jesper Norgaard Welen (2005-04-26):
+# http://www.hum.aau.dk/~poe/tid/tine/DanskTid.htm says that the law
+# [introducing standard time] was in effect from 1894-01-01....
+# The page http://www.retsinfo.dk/_GETDOCI_/ACCN/A18930008330-REGL
+# confirms this, and states that the law was put forth 1893-03-29.
+#
+# The EU treaty with effect from 1973:
+# http://www.retsinfo.dk/_GETDOCI_/ACCN/A19722110030-REGL
+#
+# This provoked a new law from 1974 to make possible summer time changes
+# in subsequenet decrees with the law
+# http://www.retsinfo.dk/_GETDOCI_/ACCN/A19740022330-REGL
+#
+# It seems however that no decree was set forward until 1980.  I have
+# not found any decree, but in another related law, the effecting DST
+# changes are stated explicitly to be from 1980-04-06 at 02:00 to
+# 1980-09-28 at 02:00.  If this is true, this differs slightly from
+# the EU rule in that DST runs to 02:00, not 03:00.  We don't know
+# when Denmark began using the EU rule correctly, but we have only
+# confirmation of the 1980-time, so I presume it was correct in 1981:
+# The law is about the management of the extra hour, concerning
+# working hours reported and effect on obligatory-rest rules (which
+# was suspended on that night):
+# http://www.retsinfo.dk/_GETDOCI_/ACCN/C19801120554-REGL
+
+# From Jesper Norgaard Welen (2005-06-11):
+# The Herning Folkeblad (1980-09-26) reported that the night between
+# Saturday and Sunday the clock is set back from three to two.
+
+# From Paul Eggert (2005-06-11):
+# Hence the "02:00" of the 1980 law refers to standard time, not
+# wall-clock time, and so the EU rules were in effect in 1980.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Denmark	1916	only	-	May	14	23:00	1:00	S
+Rule	Denmark	1916	only	-	Sep	30	23:00	0	-
+Rule	Denmark	1940	only	-	May	15	 0:00	1:00	S
+Rule	Denmark	1945	only	-	Apr	 2	 2:00s	1:00	S
+Rule	Denmark	1945	only	-	Aug	15	 2:00s	0	-
+Rule	Denmark	1946	only	-	May	 1	 2:00s	1:00	S
+Rule	Denmark	1946	only	-	Sep	 1	 2:00s	0	-
+Rule	Denmark	1947	only	-	May	 4	 2:00s	1:00	S
+Rule	Denmark	1947	only	-	Aug	10	 2:00s	0	-
+Rule	Denmark	1948	only	-	May	 9	 2:00s	1:00	S
+Rule	Denmark	1948	only	-	Aug	 8	 2:00s	0	-
+#
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Europe/Copenhagen	 0:50:20 -	LMT	1890
+			 0:50:20 -	CMT	1894 Jan  1 # Copenhagen MT
+			 1:00	Denmark	CE%sT	1942 Nov  2 2:00s
+			 1:00	C-Eur	CE%sT	1945 Apr  2 2:00
+			 1:00	Denmark	CE%sT	1980
+			 1:00	EU	CE%sT
+Zone Atlantic/Faeroe	-0:27:04 -	LMT	1908 Jan 11	# Torshavn
+			 0:00	-	WET	1981
+			 0:00	EU	WE%sT
+#
+# From Paul Eggert (2004-10-31):
+# During World War II, Germany maintained secret manned weather stations in
+# East Greenland and Franz Josef Land, but we don't know their time zones.
+# My source for this is Wilhelm Dege's book mentioned under Svalbard.
+#
+# From Paul Eggert (1996-11-22):
+# Greenland joined the EU as part of Denmark, obtained home rule on 1979-05-01,
+# and left the EU on 1985-02-01.  It therefore should have been using EU
+# rules at least through 1984.  Shanks says Scoresbysund and Godthab
+# used C-Eur rules after 1980, but IATA SSIM (1991/1996) says they use EU
+# rules since at least 1991.  Assume EU rules since 1980.
+
+# From Gwillin Law (2001-06-06), citing
+# <http://www.statkart.no/efs/efshefter/2001/efs5-2001.pdf> (2001-03-15),
+# and with translations corrected by Steffen Thorsen:
+#
+# Greenland has four local times, and the relation to UTC
+# is according to the following time line:
+#
+# The military zone near Thule	UTC-4
+# Standard Greenland time	UTC-3
+# Scoresbysund			UTC-1
+# Danmarkshavn			UTC
+#
+# In the military area near Thule and in Danmarkshavn DST will not be
+# introduced.
+
+# From Rives McDow (2001-11-01):
+#
+# I correspond regularly with the Dansk Polarcenter, and wrote them at
+# the time to clarify the situation in Thule.  Unfortunately, I have
+# not heard back from them regarding my recent letter.  [But I have
+# info from earlier correspondence.]
+#
+# According to the center, a very small local time zone around Thule
+# Air Base keeps the time according to UTC-4, implementing daylight
+# savings using North America rules, changing the time at 02:00 local time....
+#
+# The east coast of Greenland north of the community of Scoresbysund
+# uses UTC in the same way as in Iceland, year round, with no dst.
+# There are just a few stations on this coast, including the
+# Danmarkshavn ICAO weather station mentioned in your September 29th
+# email.  The other stations are two sledge patrol stations in
+# Mestersvig and Daneborg, the air force base at Station Nord, and the
+# DPC research station at Zackenberg.
+#
+# Scoresbysund and two small villages nearby keep time UTC-1 and use
+# the same daylight savings time period as in West Greenland (Godthab).
+#
+# The rest of Greenland, including Godthab (this area, although it
+# includes central Greenland, is known as west Greenland), keeps time
+# UTC-3, with daylight savings methods according to European rules.
+#
+# It is common procedure to use UTC 0 in the wilderness of East and
+# North Greenland, because it is mainly Icelandic aircraft operators
+# maintaining traffic in these areas.  However, the official status of
+# this area is that it sticks with Godthab time.  This area might be
+# considered a dual time zone in some respects because of this.
+
+# From Rives McDow (2001-11-19):
+# I heard back from someone stationed at Thule; the time change took place
+# there at 2:00 AM.
+
+# From Paul Eggert (2001-11-19):
+# The 1997 CIA map shows Danmarkshavn on GMT; the 1995 map as like Godthab.
+# For lack of better info, assume they were like Godthab before 1996.
+# startkart.no says Thule does not observe DST, but this is clearly an error,
+# so go with Shanks for all Thule transitions.
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Thule	1991	1992	-	Mar	lastSun	2:00	1:00	D
+Rule	Thule	1991	1992	-	Sep	lastSun	2:00	0	S
+Rule	Thule	1993	max	-	Apr	Sun>=1	2:00	1:00	D
+Rule	Thule	1993	max	-	Oct	lastSun	2:00	0	S
+#
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Danmarkshavn -1:14:40 -	LMT	1916 Jul 28
+			-3:00	-	WGT	1980 Apr  6 2:00
+			-3:00	EU	WG%sT	1996
+			0:00	-	GMT
+Zone America/Scoresbysund -1:29:00 -	LMT	1916 Jul 28 # Ittoqqortoormiit
+			-2:00	-	CGT	1980 Apr  6 2:00
+			-2:00	C-Eur	CG%sT	1981 Mar 29
+			-1:00	EU	EG%sT
+Zone America/Godthab	-3:26:56 -	LMT	1916 Jul 28 # Nuuk
+			-3:00	-	WGT	1980 Apr  6 2:00
+			-3:00	EU	WG%sT
+Zone America/Thule	-4:35:08 -	LMT	1916 Jul 28 # Pituffik air base
+			-4:00	Thule	A%sT
+
+# Estonia
+# From Peter Ilieve (1994-10-15):
+# A relative in Tallinn confirms the accuracy of the data for 1989 onwards
+# [through 1994] and gives the legal authority for it,
+# a regulation of the Government of Estonia, No. 111 of 1989....
+#
+# From Peter Ilieve (1996-10-28):
+# [IATA SSIM (1992/1996) claims that the Baltic republics switch at 01:00s,
+# but a relative confirms that Estonia still switches at 02:00s, writing:]
+# ``I do not [know] exactly but there are some little different
+# (confusing) rules for International Air and Railway Transport Schedules
+# conversion in Sunday connected with end of summer time in Estonia....
+# A discussion is running about the summer time efficiency and effect on
+# human physiology.  It seems that Estonia maybe will not change to
+# summer time next spring.''
+
+# From Peter Ilieve (1998-11-04), heavily edited:
+# <a href="http://trip.rk.ee/cgi-bin/thw?${BASE}=akt&${OOHTML}=rtd&TA=1998&TO=1&AN=1390">
+# The 1998-09-22 Estonian time law
+# </a>
+# refers to the Eighth Directive and cites the association agreement between
+# the EU and Estonia, ratified by the Estonian law (RT II 1995, 22--27, 120).
+#
+# I also asked [my relative] whether they use any standard abbreviation
+# for their standard and summer times. He says no, they use "suveaeg"
+# (summer time) and "talveaeg" (winter time).
+
+# From <a href="http://www.baltictimes.com/">The Baltic Times</a> (1999-09-09)
+# via Steffen Thorsen:
+# This year will mark the last time Estonia shifts to summer time,
+# a council of the ruling coalition announced Sept. 6....
+# But what this could mean for Estonia's chances of joining the European
+# Union are still unclear.  In 1994, the EU declared summer time compulsory
+# for all member states until 2001.  Brussels has yet to decide what to do
+# after that.
+
+# From Mart Oruaas (2000-01-29):
+# Regulation no. 301 (1999-10-12) obsoletes previous regulation
+# no. 206 (1998-09-22) and thus sticks Estonia to +02:00 GMT for all
+# the year round.  The regulation is effective 1999-11-01.
+
+# From Toomas Soome (2002-02-21):
+# The Estonian government has changed once again timezone politics.
+# Now we are using again EU rules.
+#
+# From Urmet Jaanes (2002-03-28):
+# The legislative reference is Government decree No. 84 on 2002-02-21.
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Tallinn	1:39:00	-	LMT	1880
+			1:39:00	-	TMT	1918 Feb # Tallinn Mean Time
+			1:00	C-Eur	CE%sT	1919 Jul
+			1:39:00	-	TMT	1921 May
+			2:00	-	EET	1940 Aug  6
+			3:00	-	MSK	1941 Sep 15
+			1:00	C-Eur	CE%sT	1944 Sep 22
+			3:00	Russia	MSK/MSD	1989 Mar 26 2:00s
+			2:00	1:00	EEST	1989 Sep 24 2:00s
+			2:00	C-Eur	EE%sT	1998 Sep 22
+			2:00	EU	EE%sT	1999 Nov  1
+			2:00	-	EET	2002 Feb 21
+			2:00	EU	EE%sT
+
+# Finland
+#
+# From Hannu Strang (25 Sep 1994 06:03:37 UTC):
+# Well, here in Helsinki we're just changing from summer time to regular one,
+# and it's supposed to change at 4am...
+#
+# From Paul Eggert (25 Sep 1994):
+# Shanks says Finland has switched at 02:00 standard time since 1981.
+# Go with Strang instead.
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Finland	1942	only	-	Apr	3	0:00	1:00	S
+Rule	Finland	1942	only	-	Oct	3	0:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Helsinki	1:39:52 -	LMT	1878 May 31
+			1:39:52	-	HMT	1921 May    # Helsinki Mean Time
+			2:00	Finland	EE%sT	1981 Mar 29 2:00
+			2:00	EU	EE%sT
+
+# Aaland Is
+Link	Europe/Helsinki	Europe/Mariehamn
+
+
+# France
+
+# From Ciro Discepolo (2000-12-20):
+#
+# Henri Le Corre, Regimes Horaires pour le monde entier, Editions
+# Traditionnelles - Paris 2 books, 1993
+#
+# Gabriel, Traite de l'heure dans le monde, Guy Tredaniel editeur,
+# Paris, 1991
+#
+# Francoise Gauquelin, Problemes de l'heure resolus en astrologie,
+# Guy tredaniel, Paris 1987
+
+
+#
+# Shanks seems to use `24:00' ambiguously; we resolve it with Whitman.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	France	1916	only	-	Jun	14	23:00s	1:00	S
+Rule	France	1916	1919	-	Oct	Sun>=1	23:00s	0	-
+Rule	France	1917	only	-	Mar	24	23:00s	1:00	S
+Rule	France	1918	only	-	Mar	 9	23:00s	1:00	S
+Rule	France	1919	only	-	Mar	 1	23:00s	1:00	S
+Rule	France	1920	only	-	Feb	14	23:00s	1:00	S
+Rule	France	1920	only	-	Oct	23	23:00s	0	-
+Rule	France	1921	only	-	Mar	14	23:00s	1:00	S
+Rule	France	1921	only	-	Oct	25	23:00s	0	-
+Rule	France	1922	only	-	Mar	25	23:00s	1:00	S
+# DSH writes that a law of 1923-05-24 specified 3rd Sat in Apr at 23:00 to 1st
+# Sat in Oct at 24:00; and that in 1930, because of Easter, the transitions
+# were Apr 12 and Oct 5.  Go with Shanks.
+Rule	France	1922	1938	-	Oct	Sat>=1	23:00s	0	-
+Rule	France	1923	only	-	May	26	23:00s	1:00	S
+Rule	France	1924	only	-	Mar	29	23:00s	1:00	S
+Rule	France	1925	only	-	Apr	 4	23:00s	1:00	S
+Rule	France	1926	only	-	Apr	17	23:00s	1:00	S
+Rule	France	1927	only	-	Apr	 9	23:00s	1:00	S
+Rule	France	1928	only	-	Apr	14	23:00s	1:00	S
+Rule	France	1929	only	-	Apr	20	23:00s	1:00	S
+Rule	France	1930	only	-	Apr	12	23:00s	1:00	S
+Rule	France	1931	only	-	Apr	18	23:00s	1:00	S
+Rule	France	1932	only	-	Apr	 2	23:00s	1:00	S
+Rule	France	1933	only	-	Mar	25	23:00s	1:00	S
+Rule	France	1934	only	-	Apr	 7	23:00s	1:00	S
+Rule	France	1935	only	-	Mar	30	23:00s	1:00	S
+Rule	France	1936	only	-	Apr	18	23:00s	1:00	S
+Rule	France	1937	only	-	Apr	 3	23:00s	1:00	S
+Rule	France	1938	only	-	Mar	26	23:00s	1:00	S
+Rule	France	1939	only	-	Apr	15	23:00s	1:00	S
+Rule	France	1939	only	-	Nov	18	23:00s	0	-
+Rule	France	1940	only	-	Feb	25	 2:00	1:00	S
+# The French rules for 1941-1944 were not used in Paris, but Shanks writes
+# that they were used in Monaco and in many French locations.
+# Le Corre writes that the upper limit of the free zone was Arneguy, Orthez,
+# Mont-de-Marsan, Bazas, Langon, Lamotte-Montravel, Marouil, La
+# Rochefoucault, Champagne-Mouton, La Roche-Posay, La Haye-Decartes,
+# Loches, Montrichard, Vierzon, Bourges, Moulins, Digoin,
+# Paray-le-Monial, Montceau-les-Mines, Chalons-sur-Saone, Arbois,
+# Dole, Morez, St-Claude, and Collognes (Haute-Savioe).
+Rule	France	1941	only	-	May	 5	 0:00	2:00	M # Midsummer
+# Shanks says this transition occurred at Oct 6 1:00,
+# but go with Denis Excoffier (1997-12-12),
+# who quotes the Ephemerides Astronomiques for 1998 from Bureau des Longitudes
+# as saying 5/10/41 22hUT.
+Rule	France	1941	only	-	Oct	 6	 0:00	1:00	S
+Rule	France	1942	only	-	Mar	 9	 0:00	2:00	M
+Rule	France	1942	only	-	Nov	 2	 3:00	1:00	S
+Rule	France	1943	only	-	Mar	29	 2:00	2:00	M
+Rule	France	1943	only	-	Oct	 4	 3:00	1:00	S
+Rule	France	1944	only	-	Apr	 3	 2:00	2:00	M
+Rule	France	1944	only	-	Oct	 8	 1:00	1:00	S
+Rule	France	1945	only	-	Apr	 2	 2:00	2:00	M
+Rule	France	1945	only	-	Sep	16	 3:00	0	-
+# Shanks gives Mar 28 2:00 and Sep 26 3:00;
+# go with Excoffier's 28/3/76 0hUT and 25/9/76 23hUT.
+Rule	France	1976	only	-	Mar	28	 1:00	1:00	S
+Rule	France	1976	only	-	Sep	26	 1:00	0	-
+# Shanks gives 0:09 for Paris Mean Time, and Whitman gives 0:09:05,
+# but Howse quotes the actual French legislation as saying 0:09:21.
+# Go with Howse.  Howse writes that the time in France was officially based
+# on PMT-0:09:21 until 1978-08-09, when the time base finally switched to UTC.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Paris	0:09:21 -	LMT	1891 Mar 15  0:01
+			0:09:21	-	PMT	1911 Mar 11  0:01  # Paris MT
+# Shanks gives 1940 Jun 14 0:00; go with Excoffier and Le Corre.
+			0:00	France	WE%sT	1940 Jun 14 23:00
+# Le Corre says Paris stuck with occupied-France time after the liberation;
+# go with Shanks.
+			1:00	C-Eur	CE%sT	1944 Aug 25
+			0:00	France	WE%sT	1945 Sep 16  3:00
+			1:00	France	CE%sT	1977
+			1:00	EU	CE%sT
+
+# Germany
+
+# From Markus Kuhn (1998-09-29):
+# The German time zone web site by the Physikalisch-Technische
+# Bundesanstalt contains DST information back to 1916.
+# [See tz-link.htm for the URL.]
+
+# From Joerg Schilling (2002-10-23):
+# In 1945, Berlin was switched to Moscow Summer time (GMT+4) by <a
+# href="http://www.dhm.de/lemo/html/biografien/BersarinNikolai/">
+# General [Nikolai] Bersarin</a>.
+
+# From Paul Eggert (2003-03-08):
+# <a href="http://www.parlament-berlin.de/pds-fraktion.nsf/727459127c8b66ee8525662300459099/defc77cb784f180ac1256c2b0030274b/$FILE/bersarint.pdf">
+# says that Bersarin issued an order to use Moscow time on May 20.
+# However, Moscow did not observe daylight saving in 1945, so
+# this was equivalent to CEMT (GMT+3), not GMT+4.
+
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Germany	1945	only	-	Apr	 2	2:00s	1:00	S
+Rule	Germany	1945	only	-	May	24	2:00	2:00	M # Midsummer
+Rule	Germany	1945	only	-	Sep	24	3:00	1:00	S
+Rule	Germany	1945	only	-	Nov	18	2:00s	0	-
+Rule	Germany	1946	only	-	Apr	14	2:00s	1:00	S
+Rule	Germany	1946	only	-	Oct	 7	2:00s	0	-
+Rule	Germany	1947	1949	-	Oct	Sun>=1	2:00s	0	-
+Rule	Germany	1947	only	-	Apr	 6	2:00s	1:00	S
+Rule	Germany	1947	only	-	May	11	2:00s	2:00	M
+Rule	Germany	1947	only	-	Jun	29	3:00	1:00	S
+Rule	Germany	1948	only	-	Apr	18	2:00s	1:00	S
+Rule	Germany	1949	only	-	Apr	10	2:00s	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Berlin	0:53:28 -	LMT	1893 Apr
+			1:00	C-Eur	CE%sT	1945 Apr 2 2:00
+			1:00	Germany	CE%sT	1980
+			1:00	EU	CE%sT
+
+# Georgia
+# Please see the "asia" file for Asia/Tbilisi.
+# Herodotus (Histories, IV.45) says Georgia north of the Phasis (now Rioni)
+# is in Europe.  Our reference location Tbilisi is in the Asian part.
+
+# Gibraltar
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Europe/Gibraltar	-0:21:24 -	LMT	1880 Aug  2
+			0:00	GB-Eire	%s	1957 Apr 14 2:00
+			1:00	-	CET	1982
+			1:00	EU	CE%sT
+
+# Greece
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+# Whitman gives 1932 Jul 5 - Nov 1; go with Shanks.
+Rule	Greece	1932	only	-	Jul	 7	0:00	1:00	S
+Rule	Greece	1932	only	-	Sep	 1	0:00	0	-
+# Whitman gives 1941 Apr 25 - ?; go with Shanks.
+Rule	Greece	1941	only	-	Apr	 7	0:00	1:00	S
+# Whitman gives 1942 Feb 2 - ?; go with Shanks.
+Rule	Greece	1942	only	-	Nov	 2	3:00	0	-
+Rule	Greece	1943	only	-	Mar	30	0:00	1:00	S
+Rule	Greece	1943	only	-	Oct	 4	0:00	0	-
+# Whitman gives 1944 Oct 3 - Oct 31; go with Shanks.
+Rule	Greece	1952	only	-	Jul	 1	0:00	1:00	S
+Rule	Greece	1952	only	-	Nov	 2	0:00	0	-
+Rule	Greece	1975	only	-	Apr	12	0:00s	1:00	S
+Rule	Greece	1975	only	-	Nov	26	0:00s	0	-
+Rule	Greece	1976	only	-	Apr	11	2:00s	1:00	S
+Rule	Greece	1976	only	-	Oct	10	2:00s	0	-
+Rule	Greece	1977	1978	-	Apr	Sun>=1	2:00s	1:00	S
+Rule	Greece	1977	only	-	Sep	26	2:00s	0	-
+Rule	Greece	1978	only	-	Sep	24	4:00	0	-
+Rule	Greece	1979	only	-	Apr	 1	9:00	1:00	S
+Rule	Greece	1979	only	-	Sep	29	2:00	0	-
+Rule	Greece	1980	only	-	Apr	 1	0:00	1:00	S
+Rule	Greece	1980	only	-	Sep	28	0:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Athens	1:34:52 -	LMT	1895 Sep 14
+			1:34:52	-	AMT	1916 Jul 28 0:01     # Athens MT
+			2:00	Greece	EE%sT	1941 Apr 30
+			1:00	Greece	CE%sT	1944 Apr  4
+			2:00	Greece	EE%sT	1981
+			# Shanks says they switched to C-Eur in 1981;
+			# go with EU instead, since Greece joined it on Jan 1.
+			2:00	EU	EE%sT
+
+# Hungary
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Hungary	1918	only	-	Apr	 1	 3:00	1:00	S
+Rule	Hungary	1918	only	-	Sep	29	 3:00	0	-
+Rule	Hungary	1919	only	-	Apr	15	 3:00	1:00	S
+Rule	Hungary	1919	only	-	Sep	15	 3:00	0	-
+Rule	Hungary	1920	only	-	Apr	 5	 3:00	1:00	S
+Rule	Hungary	1920	only	-	Sep	30	 3:00	0	-
+Rule	Hungary	1945	only	-	May	 1	23:00	1:00	S
+Rule	Hungary	1945	only	-	Nov	 3	 0:00	0	-
+Rule	Hungary	1946	only	-	Mar	31	 2:00s	1:00	S
+Rule	Hungary	1946	1949	-	Oct	Sun>=1	 2:00s	0	-
+Rule	Hungary	1947	1949	-	Apr	Sun>=4	 2:00s	1:00	S
+Rule	Hungary	1950	only	-	Apr	17	 2:00s	1:00	S
+Rule	Hungary	1950	only	-	Oct	23	 2:00s	0	-
+Rule	Hungary	1954	1955	-	May	23	 0:00	1:00	S
+Rule	Hungary	1954	1955	-	Oct	 3	 0:00	0	-
+Rule	Hungary	1956	only	-	Jun	Sun>=1	 0:00	1:00	S
+Rule	Hungary	1956	only	-	Sep	lastSun	 0:00	0	-
+Rule	Hungary	1957	only	-	Jun	Sun>=1	 1:00	1:00	S
+Rule	Hungary	1957	only	-	Sep	lastSun	 3:00	0	-
+Rule	Hungary	1980	only	-	Apr	 6	 1:00	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Budapest	1:16:20 -	LMT	1890 Oct
+			1:00	C-Eur	CE%sT	1918
+			1:00	Hungary	CE%sT	1941 Apr  6  2:00
+			1:00	C-Eur	CE%sT	1945 May  1 23:00
+			1:00	Hungary	CE%sT	1980 Sep 28  2:00s
+			1:00	EU	CE%sT
+
+# Iceland
+#
+# From Adam David (1993-11-06):
+# The name of the timezone in Iceland for system / mail / news purposes is GMT.
+#
+# (1993-12-05):
+# This material is paraphrased from the 1988 edition of the University of
+# Iceland Almanak.
+#
+# From January 1st, 1908 the whole of Iceland was standardised at 1 hour
+# behind GMT. Previously, local mean solar time was used in different parts
+# of Iceland, the almanak had been based on Reykjavik mean solar time which
+# was 1 hour and 28 minutes behind GMT.
+#
+# "first day of winter" referred to [below] means the first day of the 26 weeks
+# of winter, according to the old icelandic calendar that dates back to the
+# time the norsemen first settled Iceland.  The first day of winter is always
+# Saturday, but is not dependent on the Julian or Gregorian calendars.
+#
+# (1993-12-10):
+# I have a reference from the Oxford Icelandic-English dictionary for the
+# beginning of winter, which ties it to the ecclesiastical calendar (and thus
+# to the julian/gregorian calendar) over the period in question.
+#	the winter begins on the Saturday next before St. Luke's day
+#	(old style), or on St. Luke's day, if a Saturday.
+# St. Luke's day ought to be traceable from ecclesiastical sources. "old style"
+# might be a reference to the Julian calendar as opposed to Gregorian, or it
+# might mean something else (???).
+#
+# From Paul Eggert (1999-10-29):
+# The Iceland Almanak, Shanks and Whitman disagree on many points.
+# We go with the Almanak, except for one claim from Shanks, namely that
+# Reykavik was 21W57 from 1837 to 1908, local mean time before that.
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Iceland	1917	1918	-	Feb	19	23:00	1:00	S
+Rule	Iceland	1917	only	-	Oct	21	 1:00	0	-
+Rule	Iceland	1918	only	-	Nov	16	 1:00	0	-
+Rule	Iceland	1939	only	-	Apr	29	23:00	1:00	S
+Rule	Iceland	1939	only	-	Nov	29	 2:00	0	-
+Rule	Iceland	1940	only	-	Feb	25	 2:00	1:00	S
+Rule	Iceland	1940	only	-	Nov	 3	 2:00	0	-
+Rule	Iceland	1941	only	-	Mar	 2	 1:00s	1:00	S
+Rule	Iceland	1941	only	-	Nov	 2	 1:00s	0	-
+Rule	Iceland	1942	only	-	Mar	 8	 1:00s	1:00	S
+Rule	Iceland	1942	only	-	Oct	25	 1:00s	0	-
+# 1943-1946 - first Sunday in March until first Sunday in winter
+Rule	Iceland	1943	1946	-	Mar	Sun>=1	 1:00s	1:00	S
+Rule	Iceland	1943	1948	-	Oct	Sun>=22	 1:00s	0	-
+# 1947-1967 - first Sunday in April until first Sunday in winter
+Rule	Iceland	1947	1967	-	Apr	Sun>=1	 1:00s	1:00	S
+# 1949 Oct transition delayed by 1 week
+Rule	Iceland	1949	only	-	Oct	30	 1:00s	0	-
+Rule	Iceland	1950	1966	-	Oct	Sun>=22	 1:00s	0	-
+Rule	Iceland	1967	only	-	Oct	29	 1:00s	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Atlantic/Reykjavik	-1:27:24 -	LMT	1837
+			-1:27:48 -	RMT	1908 # Reykjavik Mean Time?
+			-1:00	Iceland	IS%sT	1968 Apr 7 1:00s
+			 0:00	-	GMT
+
+# Italy
+#
+# From Paul Eggert (2001-03-06):
+# Sicily and Sardinia each had their own time zones from 1866 to 1893,
+# called Palermo Time (+00:53:28) and Cagliari Time (+00:36:32).
+# During World War II, German-controlled Italy used German time.
+# But these events all occurred before the 1970 cutoff,
+# so record only the time in Rome.
+#
+# From Paul Eggert (1996-05-06):
+# For Italian DST we have three sources: Shanks, Whitman, and F. Pollastri
+# <a href="http://toi.iriti.cnr.it/uk/ienitlt.html">
+# Day-light Saving Time in Italy (1996-03-14)
+# </a>
+# (`FP' below), taken from an Italian National Electrotechnical Institute
+# publication. When the three sources disagree, guess who's right, as follows:
+#
+# year	FP	Shanks (S)	Whitman (W)	Go with:
+# 1916	06-03	06-03 24:00	06-03 00:00	FP & W
+#	09-30	09-30 24:00	09-30 01:00	FP; guess 24:00s
+# 1917	04-01	03-31 24:00	03-31 00:00	FP & S
+#	09-30	09-29 24:00	09-30 01:00	FP & W
+# 1918	03-09	03-09 24:00	03-09 00:00	FP & S
+#	10-06	10-05 24:00	10-06 01:00	FP & W
+# 1919	03-01	03-01 24:00	03-01 00:00	FP & S
+#	10-04	10-04 24:00	10-04 01:00	FP; guess 24:00s
+# 1920	03-20	03-20 24:00	03-20 00:00	FP & S
+#	09-18	09-18 24:00	10-01 01:00	FP; guess 24:00s
+# 1944	04-02	04-03 02:00			S (see C-Eur)
+#	09-16	10-02 03:00			FP; guess 24:00s
+# 1945	09-14	09-16 24:00			FP; guess 24:00s
+# 1970	05-21	05-31 00:00			S
+#	09-20	09-27 00:00			S
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Italy	1916	only	-	Jun	 3	0:00s	1:00	S
+Rule	Italy	1916	only	-	Oct	 1	0:00s	0	-
+Rule	Italy	1917	only	-	Apr	 1	0:00s	1:00	S
+Rule	Italy	1917	only	-	Sep	30	0:00s	0	-
+Rule	Italy	1918	only	-	Mar	10	0:00s	1:00	S
+Rule	Italy	1918	1919	-	Oct	Sun>=1	0:00s	0	-
+Rule	Italy	1919	only	-	Mar	 2	0:00s	1:00	S
+Rule	Italy	1920	only	-	Mar	21	0:00s	1:00	S
+Rule	Italy	1920	only	-	Sep	19	0:00s	0	-
+Rule	Italy	1940	only	-	Jun	15	0:00s	1:00	S
+Rule	Italy	1944	only	-	Sep	17	0:00s	0	-
+Rule	Italy	1945	only	-	Apr	 2	2:00	1:00	S
+Rule	Italy	1945	only	-	Sep	15	0:00s	0	-
+Rule	Italy	1946	only	-	Mar	17	2:00s	1:00	S
+Rule	Italy	1946	only	-	Oct	 6	2:00s	0	-
+Rule	Italy	1947	only	-	Mar	16	0:00s	1:00	S
+Rule	Italy	1947	only	-	Oct	 5	0:00s	0	-
+Rule	Italy	1948	only	-	Feb	29	2:00s	1:00	S
+Rule	Italy	1948	only	-	Oct	 3	2:00s	0	-
+Rule	Italy	1966	1968	-	May	Sun>=22	0:00	1:00	S
+Rule	Italy	1966	1969	-	Sep	Sun>=22	0:00	0	-
+Rule	Italy	1969	only	-	Jun	 1	0:00	1:00	S
+Rule	Italy	1970	only	-	May	31	0:00	1:00	S
+Rule	Italy	1970	only	-	Sep	lastSun	0:00	0	-
+Rule	Italy	1971	1972	-	May	Sun>=22	0:00	1:00	S
+Rule	Italy	1971	only	-	Sep	lastSun	1:00	0	-
+Rule	Italy	1972	only	-	Oct	 1	0:00	0	-
+Rule	Italy	1973	only	-	Jun	 3	0:00	1:00	S
+Rule	Italy	1973	1974	-	Sep	lastSun	0:00	0	-
+Rule	Italy	1974	only	-	May	26	0:00	1:00	S
+Rule	Italy	1975	only	-	Jun	 1	0:00s	1:00	S
+Rule	Italy	1975	1977	-	Sep	lastSun	0:00s	0	-
+Rule	Italy	1976	only	-	May	30	0:00s	1:00	S
+Rule	Italy	1977	1979	-	May	Sun>=22	0:00s	1:00	S
+Rule	Italy	1978	only	-	Oct	 1	0:00s	0	-
+Rule	Italy	1979	only	-	Sep	30	0:00s	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Rome	0:49:56 -	LMT	1866 Sep 22
+			0:49:56	-	RMT	1893 Nov	# Rome Mean Time
+			1:00	Italy	CE%sT	1942 Nov  2 2:00s
+			1:00	C-Eur	CE%sT	1944 Jul
+			1:00	Italy	CE%sT	1980
+			1:00	EU	CE%sT
+
+Link	Europe/Rome	Europe/Vatican
+Link	Europe/Rome	Europe/San_Marino
+
+# Latvia
+
+# From Liene Kanepe (1998-09-17):
+
+# I asked about this matter Scientific Secretary of the Institute of Astronomy
+# of The University of Latvia Dr. paed Mr. Ilgonis Vilks. I also searched the
+# correct data in juridical acts and I found some juridical documents about
+# changes in the counting of time in Latvia from 1981....
+#
+# Act No.35 of the Council of Ministers of Latvian SSR of 1981-01-22 ...
+# according to the Act No.925 of the Council of Ministers of USSR of 1980-10-24
+# ...: all year round the time of 2nd time zone + 1 hour, in addition turning
+# the hands of the clock 1 hour forward on 1 April at 00:00 (GMT 31 March 21:00)
+# and 1 hour backward on the 1 October at 00:00 (GMT 30 September 20:00).
+#
+# Act No.592 of the Council of Ministers of Latvian SSR of 1984-09-24 ...
+# according to the Act No.967 of the Council of Ministers of USSR of 1984-09-13
+# ...: all year round the time of 2nd time zone + 1 hour, in addition turning
+# the hands of the clock 1 hour forward on the last Sunday of March at 02:00
+# (GMT 23:00 on the previous day) and 1 hour backward on the last Sunday of
+# September at 03:00 (GMT 23:00 on the previous day).
+#
+# Act No.81 of the Council of Ministers of Latvian SSR of 1989-03-22 ...
+# according to the Act No.227 of the Council of Ministers of USSR of 1989-03-14
+# ...: since the last Sunday of March 1989 in Lithuanian SSR, Latvian SSR,
+# Estonian SSR and Kaliningrad region of Russian Federation all year round the
+# time of 2nd time zone (Moscow time minus one hour). On the territory of Latvia
+# transition to summer time is performed on the last Sunday of March at 02:00
+# (GMT 00:00), turning the hands of the clock 1 hour forward.  The end of
+# daylight saving time is performed on the last Sunday of September at 03:00
+# (GMT 00:00), turning the hands of the clock 1 hour backward. Exception is
+# 1989-03-26, when we must not turn the hands of the clock....
+#
+# The Regulations of the Cabinet of Ministers of the Republic of Latvia of
+# 1997-01-21 on transition to Summer time ... established the same order of
+# daylight savings time settings as in the States of the European Union.
+
+# From Andrei Ivanov (2000-03-06):
+# This year Latvia will not switch to Daylight Savings Time (as specified in
+# <a href="http://www.lv-laiks.lv/wwwraksti/2000/071072/vd4.htm">
+# The Regulations of the Cabinet of Ministers of the Rep. of Latvia of
+# 29-Feb-2000 (#79)</a>, in Latvian for subscribers only).
+
+# <a href="http://www.rferl.org/newsline/2001/01/3-CEE/cee-030101.html">
+# From RFE/RL Newsline (2001-01-03), noted after a heads-up by Rives McDow:
+# </a>
+# The Latvian government on 2 January decided that the country will
+# institute daylight-saving time this spring, LETA reported.
+# Last February the three Baltic states decided not to turn back their
+# clocks one hour in the spring....
+# Minister of Economy Aigars Kalvitis noted that Latvia had too few
+# daylight hours and thus decided to comply with a draft European
+# Commission directive that provides for instituting daylight-saving
+# time in EU countries between 2002 and 2006. The Latvian government
+# urged Lithuania and Estonia to adopt a similar time policy, but it
+# appears that they will not do so....
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Latvia	1989	1996	-	Mar	lastSun	 2:00s	1:00	S
+Rule	Latvia	1989	1996	-	Sep	lastSun	 2:00s	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Riga	1:36:24	-	LMT	1880
+			1:36:24	-	RMT	1918 Apr 15 2:00 #Riga Mean Time
+			1:36:24	1:00	LST	1918 Sep 16 3:00 #Latvian Summer
+			1:36:24	-	RMT	1919 Apr  1 2:00
+			1:36:24	1:00	LST	1919 May 22 3:00
+			1:36:24	-	RMT	1926 May 11
+			2:00	-	EET	1940 Aug  5
+			3:00	-	MSK	1941 Jul
+			1:00	C-Eur	CE%sT	1944 Oct 13
+			3:00	Russia	MSK/MSD	1989 Mar lastSun 2:00s
+			2:00	1:00	EEST	1989 Sep lastSun 2:00s
+			2:00	Latvia	EE%sT	1997 Jan 21
+			2:00	EU	EE%sT	2000 Feb 29
+			2:00	-	EET	2001 Jan  2
+			2:00	EU	EE%sT
+
+# Liechtenstein
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Vaduz	0:38:04 -	LMT	1894 Jun
+			1:00	-	CET	1981
+			1:00	EU	CE%sT
+
+# Lithuania
+
+# From Paul Eggert (1996-11-22):
+# IATA SSIM (1992/1996) says Lithuania uses W-Eur rules, but since it is
+# known to be wrong about Estonia and Latvia, assume it's wrong here too.
+
+# From Marius Gedminas (1998-08-07):
+# I would like to inform that in this year Lithuanian time zone
+# (Europe/Vilnius) was changed.
+
+# From <a href="http://www.elta.lt/">ELTA</a> No. 972 (2582) (1999-09-29),
+# via Steffen Thorsen:
+# Lithuania has shifted back to the second time zone (GMT plus two hours)
+# to be valid here starting from October 31,
+# as decided by the national government on Wednesday....
+# The Lithuanian government also announced plans to consider a
+# motion to give up shifting to summer time in spring, as it was
+# already done by Estonia.
+
+# From the <a href="http://www.tourism.lt/informa/ff.htm">
+# Fact File, Lithuanian State Department of Tourism
+# </a> (2000-03-27): Local time is GMT+2 hours ..., no daylight saving.
+
+# From a user via Klaus Marten (2003-02-07):
+# As a candidate for membership of the European Union, Lithuania will
+# observe Summer Time in 2003, changing its clocks at the times laid
+# down in EU Directive 2000/84 of 19.I.01 (i.e. at the same times as its
+# neighbour Latvia). The text of the Lithuanian government Order of
+# 7.XI.02 to this effect can be found at
+# http://www.lrvk.lt/nut/11/n1749.htm
+
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Vilnius	1:41:16	-	LMT	1880
+			1:24:00	-	WMT	1917	    # Warsaw Mean Time
+			1:35:36	-	KMT	1919 Oct 10 # Kaunas Mean Time
+			1:00	-	CET	1920 Jul 12
+			2:00	-	EET	1920 Oct  9
+			1:00	-	CET	1940 Aug  3
+			3:00	-	MSK	1941 Jun 24
+			1:00	C-Eur	CE%sT	1944 Aug
+			3:00	Russia	MSK/MSD	1991 Mar 31 2:00s
+			2:00	1:00	EEST	1991 Sep 29 2:00s
+			2:00	C-Eur	EE%sT	1998
+			2:00	-	EET	1998 Mar 29 1:00u
+			1:00	EU	CE%sT	1999 Oct 31 1:00u
+			2:00	-	EET	2003 Jan  1
+			2:00	EU	EE%sT
+
+# Luxembourg
+# Whitman disagrees with most of these dates in minor ways; go with Shanks.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Lux	1916	only	-	May	14	23:00	1:00	S
+Rule	Lux	1916	only	-	Oct	 1	 1:00	0	-
+Rule	Lux	1917	only	-	Apr	28	23:00	1:00	S
+Rule	Lux	1917	only	-	Sep	17	 1:00	0	-
+Rule	Lux	1918	only	-	Apr	Mon>=15	 2:00s	1:00	S
+Rule	Lux	1918	only	-	Sep	Mon>=15	 2:00s	0	-
+Rule	Lux	1919	only	-	Mar	 1	23:00	1:00	S
+Rule	Lux	1919	only	-	Oct	 5	 3:00	0	-
+Rule	Lux	1920	only	-	Feb	14	23:00	1:00	S
+Rule	Lux	1920	only	-	Oct	24	 2:00	0	-
+Rule	Lux	1921	only	-	Mar	14	23:00	1:00	S
+Rule	Lux	1921	only	-	Oct	26	 2:00	0	-
+Rule	Lux	1922	only	-	Mar	25	23:00	1:00	S
+Rule	Lux	1922	only	-	Oct	Sun>=2	 1:00	0	-
+Rule	Lux	1923	only	-	Apr	21	23:00	1:00	S
+Rule	Lux	1923	only	-	Oct	Sun>=2	 2:00	0	-
+Rule	Lux	1924	only	-	Mar	29	23:00	1:00	S
+Rule	Lux	1924	1928	-	Oct	Sun>=2	 1:00	0	-
+Rule	Lux	1925	only	-	Apr	 5	23:00	1:00	S
+Rule	Lux	1926	only	-	Apr	17	23:00	1:00	S
+Rule	Lux	1927	only	-	Apr	 9	23:00	1:00	S
+Rule	Lux	1928	only	-	Apr	14	23:00	1:00	S
+Rule	Lux	1929	only	-	Apr	20	23:00	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Europe/Luxembourg	0:24:36 -	LMT	1904 Jun
+			1:00	Lux	CE%sT	1918 Nov 25
+			0:00	Lux	WE%sT	1929 Oct  6 2:00s
+			0:00	Belgium	WE%sT	1940 May 14 3:00
+			1:00	C-Eur	WE%sT	1944 Sep 18 3:00
+			1:00	Belgium	CE%sT	1977
+			1:00	EU	CE%sT
+
+# Macedonia
+# see Serbia and Montenegro
+
+# Malta
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Malta	1973	only	-	Mar	31	0:00s	1:00	S
+Rule	Malta	1973	only	-	Sep	29	0:00s	0	-
+Rule	Malta	1974	only	-	Apr	21	0:00s	1:00	S
+Rule	Malta	1974	only	-	Sep	16	0:00s	0	-
+Rule	Malta	1975	1979	-	Apr	Sun>=15	2:00	1:00	S
+Rule	Malta	1975	1980	-	Sep	Sun>=15	2:00	0	-
+Rule	Malta	1980	only	-	Mar	31	2:00	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Malta	0:58:04 -	LMT	1893 Nov  2	# Valletta
+			1:00	Italy	CE%sT	1942 Nov  2 2:00s
+			1:00	C-Eur	CE%sT	1945 Apr  2 2:00s
+			1:00	Italy	CE%sT	1973 Mar 31
+			1:00	Malta	CE%sT	1981
+			1:00	EU	CE%sT
+
+# Moldova
+
+# From Paul Eggert (2001-02-11):
+# A previous version of this database followed Shanks, who writes that
+# Tiraspol switched to Moscow time on 1992-01-19 at 02:00.
+# However, this is most likely an error, as Moldova declared independence
+# on 1991-08-27 (the 1992-01-19 date is that of a Russian decree).
+# In early 1992 there was large-scale interethnic violence in the area
+# and it's possible that some Russophones continued to observe Moscow time.
+# But [two people] separately reported via
+# Jesper Norgaard that as of 2001-01-24 Tiraspol was like Chisinau.
+# The Tiraspol entry has therefore been removed for now.
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Chisinau	1:55:20 -	LMT	1880
+			1:55	-	CMT	1918 Feb 15 # Chisinau MT
+			1:44:24	-	BMT	1931 Jul 24 # Bucharest MT
+			2:00	Romania	EE%sT	1940 Aug 15
+			2:00	1:00	EEST	1941 Jul 17
+			1:00	C-Eur	CE%sT	1944 Aug 24
+			3:00	Russia	MSK/MSD	1990
+			3:00	-	MSK	1990 May 6
+			2:00	-	EET	1991
+			2:00	Russia	EE%sT	1992
+			2:00	E-Eur	EE%sT	1997
+# See Romania commentary for the guessed 1997 transition to EU rules.
+			2:00	EU	EE%sT
+
+# Monaco
+# Shanks gives 0:09 for Paris Mean Time; go with Howse's more precise 0:09:21.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Monaco	0:29:32 -	LMT	1891 Mar 15
+			0:09:21	-	PMT	1911 Mar 11    # Paris Mean Time
+			0:00	France	WE%sT	1945 Sep 16 3:00
+			1:00	France	CE%sT	1977
+			1:00	EU	CE%sT
+
+# Netherlands
+
+# Howse writes that the Netherlands' railways used GMT between 1892 and 1940,
+# but for other purposes the Netherlands used Amsterdam mean time.
+
+# However, Robert H. van Gent writes (2001-04-01):
+# Howse's statement is only correct up to 1909. From 1909-05-01 (00:00:00
+# Amsterdam mean time) onwards, the whole of the Netherlands (including
+# the Dutch railways) was required by law to observe Amsterdam mean time
+# (19 minutes 32.13 seconds ahead of GMT). This had already been the
+# common practice (except for the railways) for many decades but it was
+# not until 1909 when the Dutch government finally defined this by law.
+# On 1937-07-01 this was changed to 20 minutes (exactly) ahead of GMT and
+# was generally known as Dutch Time ("Nederlandse Tijd").
+#
+# (2001-04-08):
+# 1892-05-01 was the date when the Dutch railways were by law required to
+# observe GMT while the remainder of the Netherlands adhered to the common
+# practice of following Amsterdam mean time.
+#
+# (2001-04-09):
+# In 1835 the authorities of the province of North Holland requested the
+# municipal authorities of the towns and cities in the province to observe
+# Amsterdam mean time but I do not know in how many cases this request was
+# actually followed.
+#
+# From 1852 onwards the Dutch telegraph offices were by law required to
+# observe Amsterdam mean time. As the time signals from the observatory of
+# Leiden were also distributed by the telegraph system, I assume that most
+# places linked up with the telegraph (and railway) system automatically
+# adopted Amsterdam mean time.
+#
+# Although the early Dutch railway companies initially observed a variety
+# of times, most of them had adopted Amsterdam mean time by 1858 but it
+# was not until 1866 when they were all required by law to observe
+# Amsterdam mean time.
+
+# The data before 1945 are taken from
+# <http://www.phys.uu.nl/~vgent/wettijd/wettijd.htm>.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Neth	1916	only	-	May	 1	0:00	1:00	NST	# Netherlands Summer Time
+Rule	Neth	1916	only	-	Oct	 1	0:00	0	AMT	# Amsterdam Mean Time
+Rule	Neth	1917	only	-	Apr	16	2:00s	1:00	NST
+Rule	Neth	1917	only	-	Sep	17	2:00s	0	AMT
+Rule	Neth	1918	1921	-	Apr	Mon>=1	2:00s	1:00	NST
+Rule	Neth	1918	1921	-	Sep	lastMon	2:00s	0	AMT
+Rule	Neth	1922	only	-	Mar	lastSun	2:00s	1:00	NST
+Rule	Neth	1922	1936	-	Oct	Sun>=2	2:00s	0	AMT
+Rule	Neth	1923	only	-	Jun	Fri>=1	2:00s	1:00	NST
+Rule	Neth	1924	only	-	Mar	lastSun	2:00s	1:00	NST
+Rule	Neth	1925	only	-	Jun	Fri>=1	2:00s	1:00	NST
+# From 1926 through 1939 DST began 05-15, except that it was delayed by a week
+# in years when 05-15 fell in the Pentecost weekend.
+Rule	Neth	1926	1931	-	May	15	2:00s	1:00	NST
+Rule	Neth	1932	only	-	May	22	2:00s	1:00	NST
+Rule	Neth	1933	1936	-	May	15	2:00s	1:00	NST
+Rule	Neth	1937	only	-	May	22	2:00s	1:00	NST
+Rule	Neth	1937	only	-	Jul	 1	0:00	1:00	S
+Rule	Neth	1937	1939	-	Oct	Sun>=2	2:00s	0	-
+Rule	Neth	1938	1939	-	May	15	2:00s	1:00	S
+Rule	Neth	1945	only	-	Apr	 2	2:00s	1:00	S
+Rule	Neth	1945	only	-	Sep	16	2:00s	0	-
+#
+# Amsterdam Mean Time was +00:19:32.13 exactly, but the .13 is omitted
+# below because the current format requires GMTOFF to be an integer.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Europe/Amsterdam	0:19:32 -	LMT	1835
+			0:19:32	Neth	%s	1937 Jul  1
+			0:20	Neth	NE%sT	1940 May 16 0:00 # Dutch Time
+			1:00	C-Eur	CE%sT	1945 Apr  2 2:00
+			1:00	Neth	CE%sT	1977
+			1:00	EU	CE%sT
+
+# Norway
+# http://met.no/met/met_lex/q_u/sommertid.html (2004-01) agrees with Shanks.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Norway	1916	only	-	May	22	1:00	1:00	S
+Rule	Norway	1916	only	-	Sep	30	0:00	0	-
+Rule	Norway	1945	only	-	Apr	 2	2:00s	1:00	S
+Rule	Norway	1945	only	-	Oct	 1	2:00s	0	-
+Rule	Norway	1959	1964	-	Mar	Sun>=15	2:00s	1:00	S
+Rule	Norway	1959	1965	-	Sep	Sun>=15	2:00s	0	-
+Rule	Norway	1965	only	-	Apr	25	2:00s	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Oslo	0:43:00 -	LMT	1895 Jan  1
+			1:00	Norway	CE%sT	1940 Aug 10 23:00
+			1:00	C-Eur	CE%sT	1945 Apr  2  2:00
+			1:00	Norway	CE%sT	1980
+			1:00	EU	CE%sT
+
+# Svalbard & Jan Mayen
+
+# From Steffen Thorsen (2001-05-01):
+# Although I could not find it explicitly, it seems that Jan Mayen and
+# Svalbard have been using the same time as Norway at least since the
+# time they were declared as parts of Norway.  Svalbard was declared
+# as a part of Norway by law of 1925-07-17 no 11, section 4 and Jan
+# Mayen by law of 1930-02-27 no 2, section 2. (From
+# http://www.lovdata.no/all/nl-19250717-011.html and
+# http://www.lovdata.no/all/nl-19300227-002.html).  The law/regulation
+# for normal/standard time in Norway is from 1894-06-29 no 1 (came
+# into operation on 1895-01-01) and Svalbard/Jan Mayen seem to be a
+# part of this law since 1925/1930. (From
+# http://www.lovdata.no/all/nl-18940629-001.html ) I have not been
+# able to find if Jan Mayen used a different time zone (e.g. -0100)
+# before 1930. Jan Mayen has only been "inhabitated" since 1921 by
+# Norwegian meteorologists and maybe used the same time as Norway ever
+# since 1921.  Svalbard (Arctic/Longyearbyen) has been inhabited since
+# before 1895, and therefore probably changed the local time somewhere
+# between 1895 and 1925 (inclusive).
+
+# From Paul Eggert (2001-05-01):
+#
+# Actually, Jan Mayen was never occupied by Germany during World War II,
+# so it must have diverged from Oslo time during the war, as Oslo was
+# keeping Berlin time.
+#
+# <http://home.no.net/janmayen/history.htm> says that the meteorologists
+# burned down their station in 1940 and left the island, but returned in
+# 1941 with a small Norwegian garrison and continued operations despite
+# frequent air ttacks from Germans.  In 1943 the Americans established a
+# radiolocating station on the island, called "Atlantic City".  Possibly
+# the UTC offset changed during the war, but I think it unlikely that
+# Jan Mayen used German daylight-saving rules.
+#
+# Svalbard is more complicated, as it was raided in August 1941 by an
+# Allied party that evacuated the civilian population to England (says
+# <http://www.bartleby.com/65/sv/Svalbard.html>).  The Svalbard FAQ
+# <http://www.svalbard.com/SvalbardFAQ.html> says that the Germans were
+# expelled on 1942-05-14.  However, small parties of Germans did return,
+# and according to Wilhelm Dege's book "War North of 80" (1954)
+# <http://www.ucalgary.ca/UofC/departments/UP/1-55238/1-55238-110-2.html>
+# the German armed forces at the Svalbard weather station code-named
+# Haudegen did not surrender to the Allies until September 1945.
+#
+# All these events predate our cutoff date of 1970.  Unless we can
+# come up with more definitive info about the timekeeping during the
+# war years it's probably best just do do the following for now:
+Link	Europe/Oslo	Arctic/Longyearbyen
+Link	Europe/Oslo	Atlantic/Jan_Mayen
+
+# Poland
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Poland	1918	1919	-	Sep	16	2:00s	0	-
+Rule	Poland	1919	only	-	Apr	15	2:00s	1:00	S
+# Whitman gives 1944 Nov 30; go with Shanks.
+Rule	Poland	1944	only	-	Oct	 4	2:00	0	-
+# For 1944-1948 Whitman gives the previous day; go with Shanks.
+Rule	Poland	1945	only	-	Apr	29	0:00	1:00	S
+Rule	Poland	1945	only	-	Nov	 1	0:00	0	-
+# For 1946 on the source is Kazimierz Borkowski,
+# Torun Center for Astronomy, Dept. of Radio Astronomy, Nicolaus Copernicus U.,
+# <http://www.astro.uni.torun.pl/~kb/Artykuly/U-PA/Czas2.htm#tth_tAb1>
+# Thanks to Przemyslaw Augustyniak (2005-05-28) for this reference.
+# He also gives these further references:
+# Mon Pol nr 13, poz 162 (1995) <http://www.abc.com.pl/serwis/mp/1995/0162.htm>
+# Druk nr 2180 (2003) <http://www.senat.gov.pl/k5/dok/sejm/053/2180.pdf>
+Rule	Poland	1946	only	-	Apr	14	0:00s	1:00	S
+Rule	Poland	1946	only	-	Oct	 7	2:00s	0	-
+Rule	Poland	1947	only	-	May	 4	2:00s	1:00	S
+Rule	Poland	1947	1949	-	Oct	Sun>=1	2:00s	0	-
+Rule	Poland	1948	only	-	Apr	18	2:00s	1:00	S
+Rule	Poland	1949	only	-	Apr	10	2:00s	1:00	S
+Rule	Poland	1957	only	-	Jun	 2	1:00s	1:00	S
+Rule	Poland	1957	1958	-	Sep	lastSun	1:00s	0	-
+Rule	Poland	1958	only	-	Mar	30	1:00s	1:00	S
+Rule	Poland	1959	only	-	May	31	1:00s	1:00	S
+Rule	Poland	1959	1961	-	Oct	Sun>=1	1:00s	0	-
+Rule	Poland	1960	only	-	Apr	 3	1:00s	1:00	S
+Rule	Poland	1961	1964	-	May	lastSun	1:00s	1:00	S
+Rule	Poland	1962	1964	-	Sep	lastSun	1:00s	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Warsaw	1:24:00 -	LMT	1880
+			1:24:00	-	WMT	1915 Aug  5   # Warsaw Mean Time
+			1:00	C-Eur	CE%sT	1918 Sep 16 3:00
+			2:00	Poland	EE%sT	1922 Jun
+			1:00	Poland	CE%sT	1940 Jun 23 2:00
+			1:00	C-Eur	CE%sT	1944 Oct
+			1:00	Poland	CE%sT	1977
+			1:00	W-Eur	CE%sT	1988
+			1:00	EU	CE%sT
+
+# Portugal
+#
+# From Rui Pedro Salgueiro (1992-11-12):
+# Portugal has recently (September, 27) changed timezone
+# (from WET to MET or CET) to harmonize with EEC.
+#
+# Martin Bruckmann (1996-02-29) reports via Peter Ilieve
+# that Portugal is reverting to 0:00 by not moving its clocks this spring.
+# The new Prime Minister was fed up with getting up in the dark in the winter.
+#
+# From Paul Eggert (1996-11-12):
+# IATA SSIM (1991-09) reports several 1991-09 and 1992-09 transitions
+# at 02:00u, not 01:00u.  Assume that these are typos.
+# IATA SSIM (1991/1992) reports that the Azores were at -1:00.
+# IATA SSIM (1993-02) says +0:00; later issues (through 1996-09) say -1:00.
+# Guess that the Azores changed to EU rules in 1992 (since that's when Portugal
+# harmonized with the EU), and that they stayed +0:00 that winter.
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+# DSH writes that despite Decree 1,469 (1915), the change to the clocks was not
+# done every year, depending on what Spain did, because of railroad schedules.
+# Go with Shanks.
+Rule	Port	1916	only	-	Jun	17	23:00	1:00	S
+# Whitman gives 1916 Oct 31; go with Shanks.
+Rule	Port	1916	only	-	Nov	 1	 1:00	0	-
+Rule	Port	1917	only	-	Feb	28	23:00s	1:00	S
+Rule	Port	1917	1921	-	Oct	14	23:00s	0	-
+Rule	Port	1918	only	-	Mar	 1	23:00s	1:00	S
+Rule	Port	1919	only	-	Feb	28	23:00s	1:00	S
+Rule	Port	1920	only	-	Feb	29	23:00s	1:00	S
+Rule	Port	1921	only	-	Feb	28	23:00s	1:00	S
+Rule	Port	1924	only	-	Apr	16	23:00s	1:00	S
+Rule	Port	1924	only	-	Oct	14	23:00s	0	-
+Rule	Port	1926	only	-	Apr	17	23:00s	1:00	S
+Rule	Port	1926	1929	-	Oct	Sat>=1	23:00s	0	-
+Rule	Port	1927	only	-	Apr	 9	23:00s	1:00	S
+Rule	Port	1928	only	-	Apr	14	23:00s	1:00	S
+Rule	Port	1929	only	-	Apr	20	23:00s	1:00	S
+Rule	Port	1931	only	-	Apr	18	23:00s	1:00	S
+# Whitman gives 1931 Oct 8; go with Shanks.
+Rule	Port	1931	1932	-	Oct	Sat>=1	23:00s	0	-
+Rule	Port	1932	only	-	Apr	 2	23:00s	1:00	S
+# Shanks gives 1934 Apr 4; go with Whitman.
+Rule	Port	1934	only	-	Apr	 7	23:00s	1:00	S
+# Whitman gives 1934 Oct 5; go with Shanks.
+Rule	Port	1934	1938	-	Oct	Sat>=1	23:00s	0	-
+# Shanks gives 1935 Apr 30; go with Whitman.
+Rule	Port	1935	only	-	Mar	30	23:00s	1:00	S
+Rule	Port	1936	only	-	Apr	18	23:00s	1:00	S
+# Whitman gives 1937 Apr 2; go with Shanks.
+Rule	Port	1937	only	-	Apr	 3	23:00s	1:00	S
+Rule	Port	1938	only	-	Mar	26	23:00s	1:00	S
+Rule	Port	1939	only	-	Apr	15	23:00s	1:00	S
+# Whitman gives 1939 Oct 7; go with Shanks.
+Rule	Port	1939	only	-	Nov	18	23:00s	0	-
+Rule	Port	1940	only	-	Feb	24	23:00s	1:00	S
+# Shanks gives 1940 Oct 7; go with Whitman.
+Rule	Port	1940	1941	-	Oct	 5	23:00s	0	-
+Rule	Port	1941	only	-	Apr	 5	23:00s	1:00	S
+Rule	Port	1942	1945	-	Mar	Sat>=8	23:00s	1:00	S
+Rule	Port	1942	only	-	Apr	25	22:00s	2:00	M # Midsummer
+Rule	Port	1942	only	-	Aug	15	22:00s	1:00	S
+Rule	Port	1942	1945	-	Oct	Sat>=24	23:00s	0	-
+Rule	Port	1943	only	-	Apr	17	22:00s	2:00	M
+Rule	Port	1943	1945	-	Aug	Sat>=25	22:00s	1:00	S
+Rule	Port	1944	1945	-	Apr	Sat>=21	22:00s	2:00	M
+Rule	Port	1946	only	-	Apr	Sat>=1	23:00s	1:00	S
+Rule	Port	1946	only	-	Oct	Sat>=1	23:00s	0	-
+Rule	Port	1947	1949	-	Apr	Sun>=1	 2:00s	1:00	S
+Rule	Port	1947	1949	-	Oct	Sun>=1	 2:00s	0	-
+# Shanks says DST was observed in 1950; go with Whitman.
+# Whitman gives Oct lastSun for 1952 on; go with Shanks.
+Rule	Port	1951	1965	-	Apr	Sun>=1	 2:00s	1:00	S
+Rule	Port	1951	1965	-	Oct	Sun>=1	 2:00s	0	-
+Rule	Port	1977	only	-	Mar	27	 0:00s	1:00	S
+Rule	Port	1977	only	-	Sep	25	 0:00s	0	-
+Rule	Port	1978	1979	-	Apr	Sun>=1	 0:00s	1:00	S
+Rule	Port	1978	only	-	Oct	 1	 0:00s	0	-
+Rule	Port	1979	1982	-	Sep	lastSun	 1:00s	0	-
+Rule	Port	1980	only	-	Mar	lastSun	 0:00s	1:00	S
+Rule	Port	1981	1982	-	Mar	lastSun	 1:00s	1:00	S
+Rule	Port	1983	only	-	Mar	lastSun	 2:00s	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+# Shanks says that the transition from LMT to WET occurred 1911-05-24;
+# Willett says 1912-01-01.  Go with Willett.
+Zone	Europe/Lisbon	-0:36:32 -	LMT	1884
+			-0:36:32 -	LMT	1912 Jan  1  # Lisbon Mean Time
+			 0:00	Port	WE%sT	1966 Apr  3 2:00
+			 1:00	-	CET	1976 Sep 26 1:00
+			 0:00	Port	WE%sT	1983 Sep 25 1:00s
+			 0:00	W-Eur	WE%sT	1992 Sep 27 1:00s
+			 1:00	EU	CE%sT	1996 Mar 31 1:00u
+			 0:00	EU	WE%sT
+Zone Atlantic/Azores	-1:42:40 -	LMT	1884		# Ponta Delgada
+			-1:54:32 -	HMT	1911 May 24  # Horta Mean Time
+			-2:00	Port	AZO%sT	1966 Apr  3 2:00 # Azores Time
+			-1:00	Port	AZO%sT	1983 Sep 25 1:00s
+			-1:00	W-Eur	AZO%sT	1992 Sep 27 1:00s
+			 0:00	EU	WE%sT	1993 Mar 28 1:00u
+			-1:00	EU	AZO%sT
+Zone Atlantic/Madeira	-1:07:36 -	LMT	1884		# Funchal
+			-1:07:36 -	FMT	1911 May 24  # Funchal Mean Time
+			-1:00	Port	MAD%sT	1966 Apr  3 2:00 # Madeira Time
+			 0:00	Port	WE%sT	1983 Sep 25 1:00s
+			 0:00	EU	WE%sT
+
+# Romania
+#
+# From Paul Eggert (1999-10-07):
+# <a href="http://www.nineoclock.ro/POL/1778pol.html">
+# Nine O'clock</a> (1998-10-23) reports that the switch occurred at
+# 04:00 local time in fall 1998.  For lack of better info,
+# assume that Romania and Moldova switched to EU rules in 1997,
+# the same year as Bulgaria.
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Romania	1932	only	-	May	21	 0:00s	1:00	S
+Rule	Romania	1932	1939	-	Oct	Sun>=1	 0:00s	0	-
+Rule	Romania	1933	1939	-	Apr	Sun>=2	 0:00s	1:00	S
+Rule	Romania	1979	only	-	May	27	 0:00	1:00	S
+Rule	Romania	1979	only	-	Sep	lastSun	 0:00	0	-
+Rule	Romania	1980	only	-	Apr	 5	23:00	1:00	S
+Rule	Romania	1980	only	-	Sep	lastSun	 1:00	0	-
+Rule	Romania	1991	1993	-	Mar	lastSun	 0:00s	1:00	S
+Rule	Romania	1991	1993	-	Sep	lastSun	 0:00s	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Europe/Bucharest	1:44:24 -	LMT	1891 Oct
+			1:44:24	-	BMT	1931 Jul 24	# Bucharest MT
+			2:00	Romania	EE%sT	1981 Mar 29 2:00s
+			2:00	C-Eur	EE%sT	1991
+			2:00	Romania	EE%sT	1994
+			2:00	E-Eur	EE%sT	1997
+			2:00	EU	EE%sT
+
+# Russia
+
+# From Paul Eggert (1999-11-12):
+# Except for Moscow after 1919-07-01, I invented the time zone abbreviations.
+# Moscow time zone abbreviations after 1919-07-01, and Moscow rules after 1991,
+# are from Andrey A. Chernov.  The rest is from Shanks, except we follow
+# Chernov's report that 1992 DST transitions were Sat 23:00, not Sun 02:00s.
+#
+# From Stanislaw A. Kuzikowski (1994-06-29):
+# But now it is some months since Novosibirsk is 3 hours ahead of Moscow!
+# I do not know why they have decided to make this change;
+# as far as I remember it was done exactly during winter->summer switching
+# so we (Novosibirsk) simply did not switch.
+#
+# From Andrey A. Chernov (1996-10-04):
+# `MSK' and `MSD' were born and used initially on Moscow computers with
+# UNIX-like OSes by several developer groups (e.g. Demos group, Kiae group)....
+# The next step was the UUCP network, the Relcom predecessor
+# (used mainly for mail), and MSK/MSD was actively used there.
+#
+# From Chris Carrier (1996-10-30):
+# According to a friend of mine who rode the Trans-Siberian Railroad from
+# Moscow to Irkutsk in 1995, public air and rail transport in Russia ...
+# still follows Moscow time, no matter where in Russia it is located.
+#
+# For Grozny, Chechnya, we have the following story from
+# John Daniszewski, "Scavengers in the Rubble", Los Angeles Times (2001-02-07):
+# News--often false--is spread by word of mouth.  A rumor that it was
+# time to move the clocks back put this whole city out of sync with
+# the rest of Russia for two weeks--even soldiers stationed here began
+# enforcing curfew at the wrong time.
+#
+# From Gwillim Law (2001-06-05):
+# There's considerable evidence that Sakhalin Island used to be in
+# UTC+11, and has changed to UTC+10, in this decade.  I start with the
+# SSIM, which listed Yuzhno-Sakhalinsk in zone RU10 along with Magadan
+# until February 1997, and then in RU9 with Khabarovsk and Vladivostok
+# since September 1997....  Although the Kuril Islands are
+# administratively part of Sakhalin oblast', they appear to have
+# remained on UTC+11 along with Magadan.
+#
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+#
+# Kaliningradskaya oblast'.
+Zone Europe/Kaliningrad	 1:22:00 -	LMT	1893 Apr
+			 1:00	C-Eur	CE%sT	1945
+			 2:00	Poland	CE%sT	1946
+			 3:00	Russia	MSK/MSD	1991 Mar 31 2:00s
+			 2:00	Russia	EE%sT
+#
+# From Oscar van Vlijmen (2001-08-25): [This region consists of]
+# Respublika Adygeya, Arkhangel'skaya oblast', Astrakhanskaya oblast',
+# Belgorodskaya oblast', Bryanskaya oblast', Vladimirskaya oblast',
+# Volgogradskaya oblast', Vologodskaya oblast', Voronezhskaya oblast',
+# Respublika Dagestan, Ivanovskaya oblast', Respublika Ingushetiya,
+# Kabarbino-Balkarskaya Respublika, Respublika Kalmykiya,
+# Kalyzhskaya oblast', Respublika Karachaevo-Cherkessiya,
+# Respublika Kareliya, Kirovskaya oblast', Respublika Komi,
+# Kostromskaya oblast', Krasnodarskij kraj, Kurskaya oblast',
+# Leningradskaya oblast', Lipetskaya oblast', Respublika Marij El,
+# Respublika Mordoviya, Moskva, Moskovskaya oblast',
+# Murmanskaya oblast', Nenetskij avtonomnyj okrug,
+# Nizhegorodskaya oblast', Novgorodskaya oblast', Orlovskaya oblast',
+# Penzenskaya oblast', Pskovskaya oblast', Rostovskaya oblast',
+# Ryazanskaya oblast', Sankt-Peterburg, Saratovskaya oblast',
+# Respublika Severnaya Osetiya, Smolenskaya oblast',
+# Stavropol'skij kraj, Tambovskaya oblast', Respublika Tatarstan,
+# Tverskaya oblast', Tyl'skaya oblast', Ul'yanovskaya oblast',
+# Chechenskaya Respublika, Chuvashskaya oblast',
+# Yaroslavskaya oblast'
+Zone Europe/Moscow	 2:30:20 -	LMT	1880
+			 2:30	-	MMT	1916 Jul  3 # Moscow Mean Time
+			 2:30:48 Russia	%s	1919 Jul  1 2:00
+			 3:00	Russia	MSK/MSD	1922 Oct
+			 2:00	-	EET	1930 Jun 21
+			 3:00	Russia	MSK/MSD	1991 Mar 31 2:00s
+			 2:00	Russia	EE%sT	1992 Jan 19 2:00s
+			 3:00	Russia	MSK/MSD
+#
+# From Oscar van Vlijmen (2001-08-25): [This region consists of]
+# Samarskaya oblast', Udmyrtskaya respublika
+Zone Europe/Samara	 3:20:36 -	LMT	1919 Jul  1 2:00
+			 3:00	-	KUYT	1930 Jun 21 # Kuybyshev
+			 4:00	Russia	KUY%sT	1989 Mar 26 2:00s
+			 3:00	Russia	KUY%sT	1991 Mar 31 2:00s
+			 2:00	Russia	KUY%sT	1991 Sep 29 2:00s
+			 3:00	-	KUYT	1991 Oct 20 3:00
+			 4:00	Russia	SAM%sT	# Samara Time
+#
+# From Oscar van Vlijmen (2001-08-25): [This region consists of]
+# Respublika Bashkortostan, Komi-Permyatskij avtonomnyj okrug,
+# Kurganskaya oblast', Orenburgskaya oblast', Permskaya oblast',
+# Sverdlovskaya oblast', Tyumenskaya oblast',
+# Khanty-Manskijskij avtonomnyj okrug, Chelyabinskaya oblast',
+# Yamalo-Nenetskij avtonomnyj okrug.
+Zone Asia/Yekaterinburg	 4:02:24 -	LMT	1919 Jul 15 4:00
+			 4:00	-	SVET	1930 Jun 21 # Sverdlovsk Time
+			 5:00	Russia	SVE%sT	1991 Mar 31 2:00s
+			 4:00	Russia	SVE%sT	1992 Jan 19 2:00s
+			 5:00	Russia	YEK%sT	# Yekaterinburg Time
+#
+# From Oscar van Vlijmen (2001-08-25): [This region consists of]
+# Respublika Altaj, Altajskij kraj, Omskaya oblast'.
+Zone Asia/Omsk		 4:53:36 -	LMT	1919 Nov 14
+			 5:00	-	OMST	1930 Jun 21 # Omsk TIme
+			 6:00	Russia	OMS%sT	1991 Mar 31 2:00s
+			 5:00	Russia	OMS%sT	1992 Jan 19 2:00s
+			 6:00	Russia	OMS%sT
+#
+# Novosibirskaya oblast'.
+Zone Asia/Novosibirsk	 5:31:40 -	LMT	1919 Dec 14 6:00
+			 6:00	-	NOVT	1930 Jun 21 # Novosibirsk Time
+			 7:00	Russia	NOV%sT	1991 Mar 31 2:00s
+			 6:00	Russia	NOV%sT	1992 Jan 19 2:00s
+			 7:00	Russia	NOV%sT	1993 May 23 # says Shanks
+			 6:00	Russia	NOV%sT
+#
+# From Oscar van Vlijmen (2001-08-25): [This region consists of]
+# Kemerovskaya oblast', Krasnoyarskij kraj,
+# Tajmyrskij (Dolgano-Nenetskij) avtonomnyj okrug, Tomskaya oblast',
+# Respublika Tuva, Respublika Khakasiya, Evenkijskij avtonomnyj okrug.
+Zone Asia/Krasnoyarsk	 6:11:20 -	LMT	1920 Jan  6
+			 6:00	-	KRAT	1930 Jun 21 # Krasnoyarsk Time
+			 7:00	Russia	KRA%sT	1991 Mar 31 2:00s
+			 6:00	Russia	KRA%sT	1992 Jan 19 2:00s
+			 7:00	Russia	KRA%sT
+#
+# From Oscar van Vlijmen (2001-08-25): [This region consists of]
+# Respublika Buryatiya, Irkutskaya oblast',
+# Ust'-Ordynskij Buryatskij avtonomnyj okrug.
+Zone Asia/Irkutsk	 6:57:20 -	LMT	1880
+			 6:57:20 -	IMT	1920 Jan 25 # Irkutsk Mean Time
+			 7:00	-	IRKT	1930 Jun 21 # Irkutsk Time
+			 8:00	Russia	IRK%sT	1991 Mar 31 2:00s
+			 7:00	Russia	IRK%sT	1992 Jan 19 2:00s
+			 8:00	Russia	IRK%sT
+#
+# From Oscar van Vlijmen (2003-10-18): [This region consists of]
+# Aginskij Buryatskij avtonomnyj okrug, Amurskaya oblast',
+# [parts of] Respublika Sakha (Yakutiya), Chitinskaya oblast'.
+# The Sakha districts are: Aldanskij, Amginskij, Anabarskij,
+# Bulunskij, Verkhnekolymskij, Verkhnevilyujskij, Vilyujskij, Gornyj,
+# Zhiganskij, Kobyajskij, Lenskij, Megino-Kangalasskij, Mirninskij,
+# Namskij, Nyurbinskij, Olenekskij, Olekminskij, Srednekolymskij,
+# Suntarskij, Tattinskij, Ust'-Aldanskij, Khangalasskij,
+# Churapchinskij, Eveno-Bytantajskij.
+Zone Asia/Yakutsk	 8:38:40 -	LMT	1919 Dec 15
+			 8:00	-	YAKT	1930 Jun 21 # Yakutsk Time
+			 9:00	Russia	YAK%sT	1991 Mar 31 2:00s
+			 8:00	Russia	YAK%sT	1992 Jan 19 2:00s
+			 9:00	Russia	YAK%sT
+#
+# From Oscar van Vlijmen (2003-10-18): [This region consists of]
+# Evrejskaya avtonomnaya oblast', Khabarovskij kraj, Primorskij kraj,
+# [parts of] Respublika Sakha (Yakutiya).
+# The Sakha districts are: Verkhoyanskij, Tomponskij, Ust'-Majskij,
+# Ust'-Yanskij.
+Zone Asia/Vladivostok	 8:47:44 -	LMT	1922 Nov 15
+			 9:00	-	VLAT	1930 Jun 21 # Vladivostok Time
+			10:00	Russia	VLA%sT	1991 Mar 31 2:00s
+			 9:00	Russia	VLA%sST	1992 Jan 19 2:00s
+			10:00	Russia	VLA%sT
+#
+# Sakhalinskaya oblast'.
+# The Zone name should be Yuzhno-Sakhalinsk, but that's too long.
+Zone Asia/Sakhalin	 9:30:48 -	LMT	1905 Aug 23
+			 9:00	-	CJT	1938
+			 9:00	-	JST	1945 Aug 25
+			11:00	Russia	SAK%sT	1991 Mar 31 2:00s # Sakhalin T.
+			10:00	Russia	SAK%sT	1992 Jan 19 2:00s
+			11:00	Russia	SAK%sT	1997 Mar lastSun 2:00s
+			10:00	Russia	SAK%sT
+#
+# From Oscar van Vlijmen (2003-10-18): [This region consists of]
+# Magadanskaya oblast', Respublika Sakha (Yakutiya).
+# Probably also: Kuril Islands.
+# The Sakha districts are: Abyjskij, Allaikhovskij, Momskij,
+# Nizhnekolymskij, Ojmyakonskij.
+Zone Asia/Magadan	10:03:12 -	LMT	1924 May  2
+			10:00	-	MAGT	1930 Jun 21 # Magadan Time
+			11:00	Russia	MAG%sT	1991 Mar 31 2:00s
+			10:00	Russia	MAG%sT	1992 Jan 19 2:00s
+			11:00	Russia	MAG%sT
+#
+# From Oscar van Vlijmen (2001-08-25): [This region consists of]
+# Kamchatskaya oblast', Koryakskij avtonomnyj okrug.
+#
+# The Zone name should be Asia/Petropavlovsk-Kamchatski, but that's too long.
+Zone Asia/Kamchatka	10:34:36 -	LMT	1922 Nov 10
+			11:00	-	PETT	1930 Jun 21 # P-K Time
+			12:00	Russia	PET%sT	1991 Mar 31 2:00s
+			11:00	Russia	PET%sT	1992 Jan 19 2:00s
+			12:00	Russia	PET%sT
+#
+# Chukotskij avtonomnyj okrug
+Zone Asia/Anadyr	11:49:56 -	LMT	1924 May  2
+			12:00	-	ANAT	1930 Jun 21 # Anadyr Time
+			13:00	Russia	ANA%sT	1982 Apr  1 0:00s
+			12:00	Russia	ANA%sT	1991 Mar 31 2:00s
+			11:00	Russia	ANA%sT	1992 Jan 19 2:00s
+			12:00	Russia	ANA%sT
+
+# Serbia and Montenegro
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Belgrade	1:22:00	-	LMT	1884
+			1:00	-	CET	1941 Apr 18 23:00
+			1:00	C-Eur	CE%sT	1945 May  8  2:00s
+			1:00	1:00	CEST	1945 Sep 16  2:00s
+# Metod Kozelj reports that the legal date of
+# transition to EU rules was 1982-11-27, for all of Yugoslavia at the time.
+# Shanks doesn't give as much detail, so go with Kozelj.
+			1:00	-	CET	1982 Nov 27
+			1:00	EU	CE%sT
+Link Europe/Belgrade Europe/Ljubljana	# Slovenia
+Link Europe/Belgrade Europe/Sarajevo	# Bosnia and Herzegovina
+Link Europe/Belgrade Europe/Skopje	# Macedonia
+Link Europe/Belgrade Europe/Zagreb	# Croatia
+
+# Slovakia
+Link Europe/Prague Europe/Bratislava
+
+# Slovenia
+# see Serbia and Montenegro
+
+# Spain
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+# For 1917-1919 Whitman gives Apr Sat>=1 - Oct Sat>=1; go with Shanks.
+Rule	Spain	1917	only	-	May	 5	23:00s	1:00	S
+Rule	Spain	1917	1919	-	Oct	 6	23:00s	0	-
+Rule	Spain	1918	only	-	Apr	15	23:00s	1:00	S
+Rule	Spain	1919	only	-	Apr	 5	23:00s	1:00	S
+# Whitman gives 1921 Feb 28 - Oct 14; go with Shanks.
+Rule	Spain	1924	only	-	Apr	16	23:00s	1:00	S
+# Whitman gives 1924 Oct 14; go with Shanks.
+Rule	Spain	1924	only	-	Oct	 4	23:00s	0	-
+Rule	Spain	1926	only	-	Apr	17	23:00s	1:00	S
+# Whitman says no DST in 1929; go with Shanks.
+Rule	Spain	1926	1929	-	Oct	Sat>=1	23:00s	0	-
+Rule	Spain	1927	only	-	Apr	 9	23:00s	1:00	S
+Rule	Spain	1928	only	-	Apr	14	23:00s	1:00	S
+Rule	Spain	1929	only	-	Apr	20	23:00s	1:00	S
+# Whitman gives 1937 Jun 16, 1938 Apr 16, 1940 Apr 13; go with Shanks.
+Rule	Spain	1937	only	-	May	22	23:00s	1:00	S
+Rule	Spain	1937	1939	-	Oct	Sat>=1	23:00s	0	-
+Rule	Spain	1938	only	-	Mar	22	23:00s	1:00	S
+Rule	Spain	1939	only	-	Apr	15	23:00s	1:00	S
+Rule	Spain	1940	only	-	Mar	16	23:00s	1:00	S
+# Whitman says no DST 1942-1945; go with Shanks.
+Rule	Spain	1942	only	-	May	 2	22:00s	2:00	M # Midsummer
+Rule	Spain	1942	only	-	Sep	 1	22:00s	1:00	S
+Rule	Spain	1943	1946	-	Apr	Sat>=13	22:00s	2:00	M
+Rule	Spain	1943	only	-	Oct	 3	22:00s	1:00	S
+Rule	Spain	1944	only	-	Oct	10	22:00s	1:00	S
+Rule	Spain	1945	only	-	Sep	30	 1:00	1:00	S
+Rule	Spain	1946	only	-	Sep	30	 0:00	0	-
+Rule	Spain	1949	only	-	Apr	30	23:00	1:00	S
+Rule	Spain	1949	only	-	Sep	30	 1:00	0	-
+Rule	Spain	1974	1975	-	Apr	Sat>=13	23:00	1:00	S
+Rule	Spain	1974	1975	-	Oct	Sun>=1	 1:00	0	-
+Rule	Spain	1976	only	-	Mar	27	23:00	1:00	S
+Rule	Spain	1976	1977	-	Sep	lastSun	 1:00	0	-
+Rule	Spain	1977	1978	-	Apr	 2	23:00	1:00	S
+Rule	Spain	1978	only	-	Oct	 1	 1:00	0	-
+# The following rules are copied from Morocco from 1967 through 1978.
+Rule SpainAfrica 1967	only	-	Jun	 3	12:00	1:00	S
+Rule SpainAfrica 1967	only	-	Oct	 1	 0:00	0	-
+Rule SpainAfrica 1974	only	-	Jun	24	 0:00	1:00	S
+Rule SpainAfrica 1974	only	-	Sep	 1	 0:00	0	-
+Rule SpainAfrica 1976	1977	-	May	 1	 0:00	1:00	S
+Rule SpainAfrica 1976	only	-	Aug	 1	 0:00	0	-
+Rule SpainAfrica 1977	only	-	Sep	28	 0:00	0	-
+Rule SpainAfrica 1978	only	-	Jun	 1	 0:00	1:00	S
+Rule SpainAfrica 1978	only	-	Aug	 4	 0:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Madrid	-0:14:44 -	LMT	1901
+			 0:00	Spain	WE%sT	1946 Sep 30
+			 1:00	Spain	CE%sT	1979
+			 1:00	EU	CE%sT
+Zone	Africa/Ceuta	-0:21:16 -	LMT	1901
+			 0:00	-	WET	1918 May  6 23:00
+			 0:00	1:00	WEST	1918 Oct  7 23:00
+			 0:00	-	WET	1924
+			 0:00	Spain	WE%sT	1929
+			 0:00 SpainAfrica WE%sT 1984 Mar 16
+			 1:00	-	CET	1986
+			 1:00	EU	CE%sT
+Zone	Atlantic/Canary	-1:01:36 -	LMT	1922 Mar # Las Palmas de Gran C.
+			-1:00	-	CANT	1946 Sep 30 1:00 # Canaries Time
+			 0:00	-	WET	1980 Apr  6 0:00s
+			 0:00	1:00	WEST	1980 Sep 28 0:00s
+			 0:00	EU	WE%sT
+# IATA SSIM (1996-09) says the Canaries switch at 2:00u, not 1:00u.
+# Ignore this for now, as the Canaries are part of the EU.
+
+# Sweden
+
+# From Ivan Nilsson (2001-04-13), superseding Shanks:
+#
+# The law "Svensk forfattningssamling 1878, no 14" about standard time in 1879:
+# From the beginning of 1879 (that is 01-01 00:00) the time for all
+# places in the country is "the mean solar time for the meridian at
+# three degrees, or twelve minutes of time, to the west of the
+# meridian of the Observatory of Stockholm".  The law is dated 1878-05-31.
+#
+# The observatory at that time had the meridian 18 degrees 03' 30"
+# eastern longitude = 01:12:14 in time.  Less 12 minutes gives the
+# national standard time as 01:00:14 ahead of GMT....
+#
+# About the beginning of CET in Sweden. The lawtext ("Svensk
+# forfattningssamling 1899, no 44") states, that "from the beginning
+# of 1900... ... the same as the mean solar time for the meridian at
+# the distance of one hour of time from the meridian of the English
+# observatory at Greenwich, or at 12 minutes 14 seconds to the west
+# from the meridian of the Observatory of Stockholm". The law is dated
+# 1899-06-16.  In short: At 1900-01-01 00:00:00 the new standard time
+# in Sweden is 01:00:00 ahead of GMT.
+#
+# 1916: The lawtext ("Svensk forfattningssamling 1916, no 124") states
+# that "1916-05-15 is considered to begin one hour earlier". It is
+# pretty obvious that at 05-14 23:00 the clocks are set to 05-15 00:00....
+# Further the law says, that "1916-09-30 is considered to end one hour later".
+#
+# The laws regulating [DST] are available on the site of the Swedish
+# Parliament beginning with 1985 - the laws regulating 1980/1984 are
+# not available on the site (to my knowledge they are only available
+# in Swedish): <http://www.riksdagen.se/english/work/sfst.asp> (type
+# "sommartid" without the quotes in the field "Fritext" and then click
+# the Sok-button).
+#
+# (2001-05-13):
+#
+# I have now found a newspaper stating that at 1916-10-01 01:00
+# summertime the church-clocks etc were set back one hour to show
+# 1916-10-01 00:00 standard time.  The article also reports that some
+# people thought the switch to standard time would take place already
+# at 1916-10-01 00:00 summer time, but they had to wait for another
+# hour before the event took place.
+#
+# Source: The newspaper "Dagens Nyheter", 1916-10-01, page 7 upper left.
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Europe/Stockholm	1:12:12 -	LMT	1879 Jan  1
+			1:00:14	-	SET	1900 Jan  1	# Swedish Time
+			1:00	-	CET	1916 May 14 23:00
+			1:00	1:00	CEST	1916 Oct  1 01:00
+			1:00	-	CET	1980
+			1:00	EU	CE%sT
+
+# Switzerland
+# From Howse:
+# By the end of the 18th century clocks and watches became commonplace
+# and their performance improved enormously.  Communities began to keep
+# mean time in preference to apparent time -- Geneva from 1780 ....
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+# From Whitman (who writes ``Midnight?''):
+Rule	Swiss	1940	only	-	Nov	 2	0:00	1:00	S
+Rule	Swiss	1940	only	-	Dec	31	0:00	0	-
+# From Shanks:
+Rule	Swiss	1941	1942	-	May	Sun>=1	2:00	1:00	S
+Rule	Swiss	1941	1942	-	Oct	Sun>=1	0:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Zurich	0:34:08 -	LMT	1848 Sep 12
+			0:29:44	-	BMT	1894 Jun # Bern Mean Time
+			1:00	Swiss	CE%sT	1981
+			1:00	EU	CE%sT
+
+# Turkey
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Turkey	1916	only	-	May	 1	0:00	1:00	S
+Rule	Turkey	1916	only	-	Oct	 1	0:00	0	-
+Rule	Turkey	1920	only	-	Mar	28	0:00	1:00	S
+Rule	Turkey	1920	only	-	Oct	25	0:00	0	-
+Rule	Turkey	1921	only	-	Apr	 3	0:00	1:00	S
+Rule	Turkey	1921	only	-	Oct	 3	0:00	0	-
+Rule	Turkey	1922	only	-	Mar	26	0:00	1:00	S
+Rule	Turkey	1922	only	-	Oct	 8	0:00	0	-
+# Whitman gives 1923 Apr 28 - Sep 16 and no DST in 1924-1925; go with Shanks.
+Rule	Turkey	1924	only	-	May	13	0:00	1:00	S
+Rule	Turkey	1924	1925	-	Oct	 1	0:00	0	-
+Rule	Turkey	1925	only	-	May	 1	0:00	1:00	S
+Rule	Turkey	1940	only	-	Jun	30	0:00	1:00	S
+Rule	Turkey	1940	only	-	Oct	 5	0:00	0	-
+Rule	Turkey	1940	only	-	Dec	 1	0:00	1:00	S
+Rule	Turkey	1941	only	-	Sep	21	0:00	0	-
+Rule	Turkey	1942	only	-	Apr	 1	0:00	1:00	S
+# Whitman omits the next two transition and gives 1945 Oct 1; go with Shanks.
+Rule	Turkey	1942	only	-	Nov	 1	0:00	0	-
+Rule	Turkey	1945	only	-	Apr	 2	0:00	1:00	S
+Rule	Turkey	1945	only	-	Oct	 8	0:00	0	-
+Rule	Turkey	1946	only	-	Jun	 1	0:00	1:00	S
+Rule	Turkey	1946	only	-	Oct	 1	0:00	0	-
+Rule	Turkey	1947	1948	-	Apr	Sun>=16	0:00	1:00	S
+Rule	Turkey	1947	1950	-	Oct	Sun>=2	0:00	0	-
+Rule	Turkey	1949	only	-	Apr	10	0:00	1:00	S
+Rule	Turkey	1950	only	-	Apr	19	0:00	1:00	S
+Rule	Turkey	1951	only	-	Apr	22	0:00	1:00	S
+Rule	Turkey	1951	only	-	Oct	 8	0:00	0	-
+Rule	Turkey	1962	only	-	Jul	15	0:00	1:00	S
+Rule	Turkey	1962	only	-	Oct	 8	0:00	0	-
+Rule	Turkey	1964	only	-	May	15	0:00	1:00	S
+Rule	Turkey	1964	only	-	Oct	 1	0:00	0	-
+Rule	Turkey	1970	1972	-	May	Sun>=2	0:00	1:00	S
+Rule	Turkey	1970	1972	-	Oct	Sun>=2	0:00	0	-
+Rule	Turkey	1973	only	-	Jun	 3	1:00	1:00	S
+Rule	Turkey	1973	only	-	Nov	 4	3:00	0	-
+Rule	Turkey	1974	only	-	Mar	31	2:00	1:00	S
+Rule	Turkey	1974	only	-	Nov	 3	5:00	0	-
+Rule	Turkey	1975	only	-	Mar	30	0:00	1:00	S
+Rule	Turkey	1975	1976	-	Oct	lastSun	0:00	0	-
+Rule	Turkey	1976	only	-	Jun	 1	0:00	1:00	S
+Rule	Turkey	1977	1978	-	Apr	Sun>=1	0:00	1:00	S
+Rule	Turkey	1977	only	-	Oct	16	0:00	0	-
+Rule	Turkey	1979	1980	-	Apr	Sun>=1	3:00	1:00	S
+Rule	Turkey	1979	1982	-	Oct	Mon>=11	0:00	0	-
+Rule	Turkey	1981	1982	-	Mar	lastSun	3:00	1:00	S
+Rule	Turkey	1983	only	-	Jul	31	0:00	1:00	S
+Rule	Turkey	1983	only	-	Oct	 2	0:00	0	-
+Rule	Turkey	1985	only	-	Apr	20	0:00	1:00	S
+Rule	Turkey	1985	only	-	Sep	28	0:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Istanbul	1:55:52 -	LMT	1880
+			1:56:56	-	IMT	1910 Oct # Istanbul Mean Time?
+			2:00	Turkey	EE%sT	1978 Oct 15
+			3:00	Turkey	TR%sT	1985 Apr 20 # Turkey Time
+			2:00	Turkey	EE%sT	1986
+			2:00	C-Eur	EE%sT	1991
+			2:00	EU	EE%sT
+Link	Europe/Istanbul	Asia/Istanbul	# Istanbul is in both continents.
+
+# Ukraine
+#
+# From Igor Karpov, who works for the Ukranian Ministry of Justice,
+# via Garrett Wollman (2003-01-27):
+# BTW, I've found the official document on this matter. It's goverment
+# regulations number 509, May 13, 1996. In my poor translation it says:
+# "Time in Ukraine is set to second timezone (Kiev time). Each last Sunday
+# of March at 3am the time is changing to 4am and each last Sunday of
+# October the time at 4am is changing to 3am"
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+# Most of Ukraine since 1970 has been like Kiev.
+Zone Europe/Kiev	2:02:04 -	LMT	1880
+			2:02:04	-	KMT	1924 May  2 # Kiev Mean Time
+			2:00	-	EET	1930 Jun 21
+			3:00	-	MSK	1941 Sep 20
+			1:00	C-Eur	CE%sT	1943 Nov  6
+			3:00	Russia	MSK/MSD	1990
+			3:00	-	MSK	1990 Jul  1 2:00
+			2:00	-	EET	1992
+			2:00	E-Eur	EE%sT	1995
+			2:00	EU	EE%sT
+# Ruthenia used CET 1990/1991.
+Zone Europe/Uzhgorod	1:29:12 -	LMT	1890 Oct
+			1:00	-	CET	1940
+			1:00	C-Eur	CE%sT	1944 Oct
+			1:00	1:00	CEST	1944 Oct 26
+			1:00	-	CET	1945 Jun 29
+			3:00	Russia	MSK/MSD	1990
+			3:00	-	MSK	1990 Jul  1 2:00
+			1:00	-	CET	1991 Mar 31 3:00
+			2:00	-	EET	1992
+			2:00	E-Eur	EE%sT	1995
+			2:00	EU	EE%sT
+# Zaporozh'ye and eastern Lugansk oblasts observed DST 1990/1991.
+# Zaporozh'ye has an apostrophe, but Posix file names can't have apostrophes.
+Zone Europe/Zaporozhye	2:20:40 -	LMT	1880
+			2:20	-	CUT	1924 May  2 # Central Ukraine T
+			2:00	-	EET	1930 Jun 21
+			3:00	-	MSK	1941 Aug 25
+			1:00	C-Eur	CE%sT	1943 Oct 25
+			3:00	Russia	MSK/MSD	1991 Mar 31 2:00
+			2:00	E-Eur	EE%sT	1995
+			2:00	EU	EE%sT
+# Central Crimea used Moscow time 1994/1997.
+Zone Europe/Simferopol	2:16:24 -	LMT	1880
+			2:16	-	SMT	1924 May  2 # Simferopol Mean T
+			2:00	-	EET	1930 Jun 21
+			3:00	-	MSK	1941 Nov
+			1:00	C-Eur	CE%sT	1944 Apr 13
+			3:00	Russia	MSK/MSD	1990
+			3:00	-	MSK	1990 Jul  1 2:00
+			2:00	-	EET	1992
+# From Paul Eggert (1999-11-12):
+# The _Economist_ (1994-05-28, p 45) reports that central Crimea switched
+# from Kiev to Moscow time sometime after the January 1994 elections.
+# Shanks says ``date of change uncertain'', but implies that it happened
+# sometime between the 1994 DST switches.  For now, guess it changed in May.
+			2:00	E-Eur	EE%sT	1994 May
+# From IATA SSIM (1994/1997), which also says that Kerch is still like Kiev.
+			3:00	E-Eur	MSK/MSD	1996 Mar 31 3:00s
+			3:00	1:00	MSD	1996 Oct 27 3:00s
+# IATA SSIM (1997-09) says Crimea switched to EET/EEST.
+# Assume it happened in March by not changing the clocks.
+			3:00	Russia	MSK/MSD	1997
+			3:00	-	MSK	1997 Mar lastSun 1:00u
+			2:00	EU	EE%sT
+
+###############################################################################
+
+# One source shows that Bulgaria, Cyprus, Finland, and Greece observe DST from
+# the last Sunday in March to the last Sunday in September in 1986.
+# The source shows Romania changing a day later than everybody else.
+#
+# According to Bernard Sieloff's source, Poland is in the MET time zone but
+# uses the WE DST rules.  The Western USSR uses EET+1 and ME DST rules.
+# Bernard Sieloff's source claims Romania switches on the same day, but at
+# 00:00 standard time (i.e., 01:00 DST).  It also claims that Turkey
+# switches on the same day, but switches on at 01:00 standard time
+# and off at 00:00 standard time (i.e., 01:00 DST)
+
+# ...
+# Date: Wed, 28 Jan 87 16:56:27 -0100
+# From: Tom Hofmann
+# ...
+#
+# ...the European time rules are...standardized since 1981, when
+# most European coun[tr]ies started DST.  Before that year, only
+# a few countries (UK, France, Italy) had DST, each according
+# to own national rules.  In 1981, however, DST started on
+# 'Apr firstSun', and not on 'Mar lastSun' as in the following
+# years...
+# But also since 1981 there are some more national exceptions
+# than listed in 'europe': Switzerland, for example, joined DST
+# one year later, Denmark ended DST on 'Oct 1' instead of 'Sep
+# lastSun' in 1981---I don't know how they handle now.
+#
+# Finally, DST ist always from 'Apr 1' to 'Oct 1' in the
+# Soviet Union (as far as I know).
+#
+# Tom Hofmann, Scientific Computer Center, CIBA-GEIGY AG,
+# 4002 Basle, Switzerland
+# ...
+
+# ...
+# Date: Wed, 4 Feb 87 22:35:22 +0100
+# From: Dik T. Winter
+# ...
+#
+# The information from Tom Hofmann is (as far as I know) not entirely correct.
+# After a request from chongo at amdahl I tried to retrieve all information
+# about DST in Europe.  I was able to find all from about 1969.
+#
+# ...standardization on DST in Europe started in about 1977 with switches on
+# first Sunday in April and last Sunday in September...
+# In 1981 UK joined Europe insofar that
+# the starting day for both shifted to last Sunday in March.  And from 1982
+# the whole of Europe used DST, with switch dates April 1 and October 1 in
+# the Sov[i]et Union.  In 1985 the SU reverted to standard Europe[a]n switch
+# dates...
+#
+# It should also be remembered that time-zones are not constants; e.g.
+# Portugal switched in 1976 from MET (or CET) to WET with DST...
+# Note also that though there were rules for switch dates not
+# all countries abided to these dates, and many individual deviations
+# occurred, though not since 1982 I believe.  Another note: it is always
+# assumed that DST is 1 hour ahead of normal time, this need not be the
+# case; at least in the Netherlands there have been times when DST was 2 hours
+# in advance of normal time.
+#
+# ...
+# dik t. winter, cwi, amsterdam, nederland
+# ...
+
+# From Bob Devine (1988-01-28):
+# ...
+# Greece: Last Sunday in April to last Sunday in September (iffy on dates).
+# Since 1978.  Change at midnight.
+# ...
+# Monaco: has same DST as France.
+# ...
diff --git a/JodaTime/src/java/org/joda/time/tz/src/northamerica b/JodaTime/src/java/org/joda/time/tz/src/northamerica
index d1984d944..9f9b98b09 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/northamerica
+++ b/JodaTime/src/java/org/joda/time/tz/src/northamerica
@@ -1,2120 +1,2165 @@
-# @(#)northamerica	7.82
-# also includes Central America and the Caribbean
-
-# This data is by no means authoritative; if you think you know better,
-# go ahead and edit the file (and please send any changes to
-# tz@elsie.nci.nih.gov for general use in the future).
-
-# From Paul Eggert (1999-03-22):
-# A reliable and entertaining source about time zones is
-# Derek Howse, Greenwich time and longitude, Philip Wilson Publishers (1997).
-
-###############################################################################
-
-# United States
-
-# From Paul Eggert (1999-03-31):
-# Howse writes (pp 121-125) that time zones were invented by
-# Professor Charles Ferdinand Dowd (1825-1904),
-# Principal of Temple Grove Ladies' Seminary (Saratoga Springs, NY).
-# His pamphlet ``A System of National Time for Railroads'' (1870)
-# was the result of his proposals at the Convention of Railroad Trunk Lines
-# in New York City (1869-10).  His 1870 proposal was based on Washington, DC,
-# but in 1872-05 he moved the proposed origin to Greenwich.
-# His proposal was adopted by the railroads on 1883-11-18 at 12:00,
-# and the most of the country soon followed suit.
-
-# From Paul Eggert (2005-04-16):
-# That 1883 transition occurred at 12:00 new time, not at 12:00 old time.
-# See p 46 of David Prerau, Seize the daylight, Thunder's Mouth Press (2005).
-
-# From Paul Eggert (1995-12-19):
-# A good source for time zone historical data in the US is
-# Thomas G. Shanks, The American Atlas (5th edition),
-# San Diego: ACS Publications, Inc. (1991).
-# Make sure you have the errata sheet; the book is somewhat useless without it.
-# It is the source for most of the pre-1991 US and Puerto Rico entries below.
-
-# From Paul Eggert (2001-03-06):
-# Daylight Saving Time was first suggested as a joke by Benjamin Franklin
-# in his whimsical essay ``An Economical Project for Diminishing the Cost
-# of Light'' published in the Journal de Paris (1784-04-26).
-# Not everyone is happy with the results:
-#
-#	I don't really care how time is reckoned so long as there is some
-#	agreement about it, but I object to being told that I am saving
-#	daylight when my reason tells me that I am doing nothing of the kind.
-#	I even object to the implication that I am wasting something
-#	valuable if I stay in bed after the sun has risen.  As an admirer
-#	of moonlight I resent the bossy insistence of those who want to
-#	reduce my time for enjoying it.  At the back of the Daylight Saving
-#	scheme I detect the bony, blue-fingered hand of Puritanism, eager
-#	to push people into bed earlier, and get them up earlier, to make
-#	them healthy, wealthy and wise in spite of themselves.
-#
-#	-- Robertson Davies, The diary of Samuel Marchbanks,
-#	   Clarke, Irwin (1947), XIX, Sunday
-#
-# For more about the first ten years of DST in the United States, see
-# Robert Garland's <a href="http://www.clpgh.org/exhibit/dst.html">
-# Ten years of daylight saving from the Pittsburgh standpoint
-# (Carnegie Library of Pittsburgh, 1927)</a>.
-#
-# Shanks says that DST was called "War Time" in the US in 1918 and 1919.
-# However, DST was imposed by the Standard Time Act of 1918, which
-# was the first nationwide legal time standard, and apparently
-# time was just called "Standard Time" or "Daylight Saving Time".
-
-# From Arthur David Olson:
-# US Daylight Saving Time ended on the last Sunday of *October* in 1974.
-# See, for example, the front page of the Saturday, 1974-10-26
-# and Sunday, 1974-10-27 editions of the Washington Post.
-
-# From Arthur David Olson:
-# Before the Uniform Time Act of 1966 took effect in 1967, observance of
-# Daylight Saving Time in the US was by local option, except during wartime.
-
-# From Arthur David Olson (2000-09-25):
-# Last night I heard part of a rebroadcast of a 1945 Arch Oboler radio drama.
-# In the introduction, Oboler spoke of "Eastern Peace Time."
-# An AltaVista search turned up
-# <a href="http://rowayton.org/rhs/hstaug45.html">:
-# "When the time is announced over the radio now, it is 'Eastern Peace
-# Time' instead of the old familiar 'Eastern War Time.'  Peace is wonderful."
-# </a> (August 1945) by way of confirmation.
-
-# From Joseph Gallant citing
-# George H. Douglas, _The Early Days of Radio Broadcasting_ (1987):
-# At 7 P.M. (Eastern War Time) [on 1945-08-14], the networks were set
-# to switch to London for Attlee's address, but the American people
-# never got to hear his speech live. According to one press account,
-# CBS' Bob Trout was first to announce the word of Japan's surrender,
-# but a few seconds later, NBC, ABC and Mutual also flashed the word
-# of surrender, all of whom interrupting the bells of Big Ben in
-# London which were to precede Mr. Attlee's speech.
-
-# From Paul Eggert (2003-02-09): It was Robert St John, not Bob Trout.  From
-# Myrna Oliver's obituary of St John on page B16 of today's Los Angeles Times:
-#
-# ... a war-weary U.S. clung to radios, awaiting word of Japan's surrender.
-# Any announcement from Asia would reach St. John's New York newsroom on a
-# wire service teletype machine, which had prescribed signals for major news.
-# Associated Press, for example, would ring five bells before spewing out
-# typed copy of an important story, and 10 bells for news "of transcendental
-# importance."
-#
-# On Aug. 14, stalling while talking steadily into the NBC networks' open
-# microphone, St. John heard five bells and waited only to hear a sixth bell,
-# before announcing confidently: "Ladies and gentlemen, World War II is over.
-# The Japanese have agreed to our surrender terms."
-#
-# He had scored a 20-second scoop on other broadcasters.
-
-# From Arthur David Olson (2005-08-22):
-# Paul has been careful to use the "US" rules only in those locations
-# that are part of the United States; this reflects the real scope of
-# U.S. government action.  So even though the "US" rules have changed
-# in the latest release, other countries won't be affected.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	US	1918	1919	-	Mar	lastSun	2:00	1:00	D
-Rule	US	1918	1919	-	Oct	lastSun	2:00	0	S
-Rule	US	1942	only	-	Feb	9	2:00	1:00	W # War
-Rule	US	1945	only	-	Aug	14	23:00u	1:00	P # Peace
-Rule	US	1945	only	-	Sep	30	2:00	0	S
-Rule	US	1967	2006	-	Oct	lastSun	2:00	0	S
-Rule	US	1967	1973	-	Apr	lastSun	2:00	1:00	D
-Rule	US	1974	only	-	Jan	6	2:00	1:00	D
-Rule	US	1975	only	-	Feb	23	2:00	1:00	D
-Rule	US	1976	1986	-	Apr	lastSun	2:00	1:00	D
-Rule	US	1987	2006	-	Apr	Sun>=1	2:00	1:00	D
-Rule	US	2007	max	-	Mar	Sun>=8	2:00	1:00	D
-Rule	US	2007	max	-	Nov	Sun>=1	2:00	0	S
-
-# From Bob Devine (1988-01-28):
-# ...Alaska (and Hawaii) had the timezone names changed in 1967.
-#    old			 new
-#    Pacific Standard Time(PST)  -same-
-#    Yukon Standard Time(YST)    -same-
-#    Central Alaska S.T. (CAT)   Alaska-Hawaii St[an]dard Time (AHST)
-#    Nome Standard Time (NT)     Bering Standard Time (BST)
-#
-# ...Alaska's timezone lines were redrawn in 1983 to give only 2 tz.
-#    The YST zone now covers nearly all of the state, AHST just part
-#    of the Aleutian islands.   No DST.
-
-# From Paul Eggert (1995-12-19):
-# The tables below use `NST', not `NT', for Nome Standard Time.
-# I invented `CAWT' for Central Alaska War Time.
-
-# From U. S. Naval Observatory (1989-01-19):
-# USA  EASTERN       5 H  BEHIND UTC    NEW YORK, WASHINGTON
-# USA  EASTERN       4 H  BEHIND UTC    APR 3 - OCT 30
-# USA  CENTRAL       6 H  BEHIND UTC    CHICAGO, HOUSTON
-# USA  CENTRAL       5 H  BEHIND UTC    APR 3 - OCT 30
-# USA  MOUNTAIN      7 H  BEHIND UTC    DENVER
-# USA  MOUNTAIN      6 H  BEHIND UTC    APR 3 - OCT 30
-# USA  PACIFIC       8 H  BEHIND UTC    L.A., SAN FRANCISCO
-# USA  PACIFIC       7 H  BEHIND UTC    APR 3 - OCT 30
-# USA  ALASKA STD    9 H  BEHIND UTC    MOST OF ALASKA     (AKST)
-# USA  ALASKA STD    8 H  BEHIND UTC    APR 3 - OCT 30 (AKDT)
-# USA  ALEUTIAN     10 H  BEHIND UTC    ISLANDS WEST OF 170W
-# USA  - " -         9 H  BEHIND UTC    APR 3 - OCT 30
-# USA  HAWAII       10 H  BEHIND UTC
-# USA  BERING       11 H  BEHIND UTC    SAMOA, MIDWAY
-
-# From Arthur David Olson (1989-01-21):
-# The above dates are for 1988.
-# Note the "AKST" and "AKDT" abbreviations, the claim that there's
-# no DST in Samoa, and the claim that there is DST in Alaska and the
-# Aleutians.
-
-# From Arthur David Olson (1988-02-13):
-# Legal standard time zone names, from United States Code (1982 Edition and
-# Supplement III), Title 15, Chapter 6, Section 260 and forward.  First, names
-# up to 1967-04-01 (when most provisions of the Uniform Time Act of 1966
-# took effect), as explained in sections 263 and 261:
-#	(none)
-#	United States standard eastern time
-#	United States standard mountain time
-#	United States standard central time
-#	United States standard Pacific time
-#	(none)
-#	United States standard Alaska time
-#	(none)
-# Next, names from 1967-04-01 until 1983-11-30 (the date for
-# public law 98-181):
-#	Atlantic standard time
-#	eastern standard time
-#	central standard time
-#	mountain standard time
-#	Pacific standard time
-#	Yukon standard time
-#	Alaska-Hawaii standard time
-#	Bering standard time
-# And after 1983-11-30:
-#	Atlantic standard time
-#	eastern standard time
-#	central standard time
-#	mountain standard time
-#	Pacific standard time
-#	Alaska standard time
-#	Hawaii-Aleutian standard time
-#	Samoa standard time
-# The law doesn't give abbreviations.
-#
-# From Paul Eggert (2000-01-08), following a heads-up from Rives McDow:
-# Public law 106-564 (2000-12-23) introduced the abbreviation
-# "Chamorro Standard Time" for time in Guam and the Northern Marianas.
-# See the file "australasia".
- 
-# From Arthur David Olson, 2005-08-09
-# The following was signed into law on 2005-08-08.
-#
-# H.R. 6, Energy Policy Act of 2005, SEC. 110. DAYLIGHT SAVINGS.
-#   (a) Amendment- Section 3(a) of the Uniform Time Act of 1966 (15
-#   U.S.C. 260a(a)) is amended--
-#     (1) by striking `first Sunday of April' and inserting `second
-#     Sunday of March'; and
-#     (2) by striking `last Sunday of October' and inserting `first
-#     Sunday of November'.
-#   (b) Effective Date- Subsection (a) shall take effect 1 year after the
-#   date of enactment of this Act or March 1, 2007, whichever is later.
-#   (c) Report to Congress- Not later than 9 months after the effective
-#   date stated in subsection (b), the Secretary shall report to Congress
-#   on the impact of this section on energy consumption in the United
-#   States.
-#   (d) Right to Revert- Congress retains the right to revert the
-#   Daylight Saving Time back to the 2005 time schedules once the
-#   Department study is complete.
-
-# US eastern time, represented by New York
-
-# Connecticut, Delaware, District of Columbia, most of Florida,
-# Georgia, southeast Indiana (Dearborn and Ohio counties), eastern Kentucky
-# (except America/Kentucky/Louisville below), Maine, Maryland, Massachusetts,
-# New Hampshire, New Jersey, New York, North Carolina, Ohio,
-# Pennsylvania, Rhode Island, South Carolina, eastern Tennessee,
-# Vermont, Virginia, West Virginia
-
-# From Dave Cantor (2004-11-02):
-# Early this summer I had the occasion to visit the Mount Washington
-# Observatory weather station atop (of course!) Mount Washington [, NH]....
-# One of the staff members said that the station was on Eastern Standard Time
-# and didn't change their clocks for Daylight Saving ... so that their
-# reports will always have times which are 5 hours behind UTC.
-
-# From Paul Eggert (2005-08-26):
-# According to today's Huntsville Times
-# <http://www.al.com/news/huntsvilletimes/index.ssf?/base/news/1125047783228320.xml&coll=1>
-# a few towns on Alabama's "eastern border with Georgia, such as Phenix City
-# in Russell County, Lanett in Chambers County and some towns in Lee County,
-# set their watches and clocks on Eastern time."  It quotes H.H. "Bubba"
-# Roberts, city administrator in Phenix City. as saying "We are in the Central
-# time zone, but we do go by the Eastern time zone because so many people work
-# in Columbus." 
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
-Rule	NYC	1920	only	-	Mar	lastSun	2:00	1:00	D
-Rule	NYC	1920	only	-	Oct	lastSun	2:00	0	S
-Rule	NYC	1921	1966	-	Apr	lastSun	2:00	1:00	D
-Rule	NYC	1921	1954	-	Sep	lastSun	2:00	0	S
-Rule	NYC	1955	1966	-	Oct	lastSun	2:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/New_York	-4:56:02 -	LMT	1883 Nov 18 12:03:58
-			-5:00	US	E%sT	1920
-			-5:00	NYC	E%sT	1942
-			-5:00	US	E%sT	1946
-			-5:00	NYC	E%sT	1967
-			-5:00	US	E%sT
-
-# US central time, represented by Chicago
-
-# Alabama, Arkansas, Florida panhandle (Bay, Calhoun, Escambia,
-# Gulf, Holmes, Jackson, Okaloosa, Santa Rosa, Walton, and
-# Washington counties), Illinois, western Indiana
-# (Gibson, Jasper, Lake, LaPorte, Newton, Porter, Posey, Spencer,
-# Vanderburgh, and Warrick counties), Iowa, most of Kansas, western
-# Kentucky, Louisiana, Minnesota, Mississippi, Missouri, eastern
-# Nebraska, eastern North Dakota, Oklahoma, eastern South Dakota,
-# western Tennessee, most of Texas, Wisconsin
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
-Rule	Chicago	1920	only	-	Jun	13	2:00	1:00	D
-Rule	Chicago	1920	1921	-	Oct	lastSun	2:00	0	S
-Rule	Chicago	1921	only	-	Mar	lastSun	2:00	1:00	D
-Rule	Chicago	1922	1966	-	Apr	lastSun	2:00	1:00	D
-Rule	Chicago	1922	1954	-	Sep	lastSun	2:00	0	S
-Rule	Chicago	1955	1966	-	Oct	lastSun	2:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Chicago	-5:50:36 -	LMT	1883 Nov 18 12:09:24
-			-6:00	US	C%sT	1920
-			-6:00	Chicago	C%sT	1936 Mar  1 2:00
-			-5:00	-	EST	1936 Nov 15 2:00
-			-6:00	Chicago	C%sT	1942
-			-6:00	US	C%sT	1946
-			-6:00	Chicago	C%sT	1967
-			-6:00	US	C%sT
-# Oliver County, ND switched from mountain to central time on 1992-10-25.
-Zone America/North_Dakota/Center -6:45:12 - LMT	1883 Nov 18 12:14:48
-			-7:00	US	M%sT	1992 Oct 25 02:00
-			-6:00	US	C%sT
-
-# US mountain time, represented by Denver
-#
-# Colorado, far western Kansas, Montana, western
-# Nebraska, Nevada border (Jackpot, Owyhee, and Mountain City),
-# New Mexico, southwestern North Dakota, far eastern Oregon,
-# western South Dakota, far western Texas (El Paso County, Hudspeth County,
-# and Pine Springs and Nickel Creek in Culberson County), Utah, Wyoming
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
-Rule	Denver	1920	1921	-	Mar	lastSun	2:00	1:00	D
-Rule	Denver	1920	only	-	Oct	lastSun	2:00	0	S
-Rule	Denver	1921	only	-	May	22	2:00	0	S
-Rule	Denver	1965	1966	-	Apr	lastSun	2:00	1:00	D
-Rule	Denver	1965	1966	-	Oct	lastSun	2:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Denver	-6:59:56 -	LMT	1883 Nov 18 12:00:04
-			-7:00	US	M%sT	1920
-			-7:00	Denver	M%sT	1942
-			-7:00	US	M%sT	1946
-			-7:00	Denver	M%sT	1967
-			-7:00	US	M%sT
-
-# US Pacific time, represented by Los Angeles
-#
-# California, northern Idaho (Benewah, Bonner, Boundary, Clearwater,
-# Idaho, Kootenai, Latah, Lewis, Nez Perce, and Shoshone counties),
-# most of Nevada, most of Oregon, and Washington
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
-Rule	CA	1948	only	-	Mar	14	2:00	1:00	D
-Rule	CA	1949	only	-	Jan	 1	2:00	0	S
-Rule	CA	1950	1966	-	Apr	lastSun	2:00	1:00	D
-Rule	CA	1950	1961	-	Sep	lastSun	2:00	0	S
-Rule	CA	1962	1966	-	Oct	lastSun	2:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Los_Angeles -7:52:58 -	LMT	1883 Nov 18 12:07:02
-			-8:00	US	P%sT	1946
-			-8:00	CA	P%sT	1967
-			-8:00	US	P%sT
-
-# Alaska
-# AK%sT is the modern abbreviation for -9:00 per USNO.
-#
-# From Paul Eggert (2001-05-30):
-# Howse writes that Alaska switched from the Julian to the Gregorian calendar,
-# and from east-of-GMT to west-of-GMT days, when the US bought it from Russia.
-# This was on 1867-10-18, a Friday; the previous day was 1867-10-06 Julian,
-# also a Friday.  Include only the time zone part of this transition,
-# ignoring the switch from Julian to Gregorian, since we can't represent
-# the Julian calendar.
-#
-# As far as we know, none of the exact locations mentioned below were
-# permanently inhabited in 1867 by anyone using either calendar.
-# (Yakutat was colonized by the Russians in 1799, but the settlement
-# was destroyed in 1805 by a Yakutat-kon war party.)  However, there
-# were nearby inhabitants in some cases and for our purposes perhaps
-# it's best to simply use the official transition.
-#
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Juneau	 15:02:19 -	LMT	1867 Oct 18
-			 -8:57:41 -	LMT	1900 Aug 20 12:00
-			 -8:00	-	PST	1942
-			 -8:00	US	P%sT	1946
-			 -8:00	-	PST	1969
-			 -8:00	US	P%sT	1983 Oct 30 2:00
-			 -9:00	US	Y%sT	1983 Nov 30
-			 -9:00	US	AK%sT
-Zone America/Yakutat	 14:41:05 -	LMT	1867 Oct 18
-			 -9:18:55 -	LMT	1900 Aug 20 12:00
-			 -9:00	-	YST	1942
-			 -9:00	US	Y%sT	1946
-			 -9:00	-	YST	1969
-			 -9:00	US	Y%sT	1983 Nov 30
-			 -9:00	US	AK%sT
-Zone America/Anchorage	 14:00:24 -	LMT	1867 Oct 18
-			 -9:59:36 -	LMT	1900 Aug 20 12:00
-			-10:00	-	CAT	1942
-			-10:00	US	CAT/CAWT 1946
-			-10:00	-	CAT	1967 Apr
-			-10:00	-	AHST	1969
-			-10:00	US	AH%sT	1983 Oct 30 2:00
-			 -9:00	US	Y%sT	1983 Nov 30
-			 -9:00	US	AK%sT
-Zone America/Nome	 12:58:21 -	LMT	1867 Oct 18
-			-11:01:38 -	LMT	1900 Aug 20 12:00
-			-11:00	-	NST	1942
-			-11:00	US	N%sT	1946
-			-11:00	-	NST	1967 Apr
-			-11:00	-	BST	1969
-			-11:00	US	B%sT	1983 Oct 30 2:00
-			 -9:00	US	Y%sT	1983 Nov 30
-			 -9:00	US	AK%sT
-Zone America/Adak	 12:13:21 -	LMT	1867 Oct 18
-			-11:46:38 -	LMT	1900 Aug 20 12:00
-			-11:00	-	NST	1942
-			-11:00	US	N%sT	1946
-			-11:00	-	NST	1967 Apr
-			-11:00	-	BST	1969
-			-11:00	US	B%sT	1983 Oct 30 2:00
-			-10:00	US	AH%sT	1983 Nov 30
-			-10:00	US	HA%sT
-# The following switches don't quite make our 1970 cutoff.
-#
-# Shanks writes that part of southwest Alaska (e.g. Aniak)
-# switched from -11:00 to -10:00 on 1968-09-22 at 02:00,
-# and another part (e.g. Akiak) made the same switch five weeks later.
-#
-# From David Flater (2004-11-09):
-# In e-mail, 2004-11-02, Ray Hudson, historian/liaison to the Unalaska
-# Historic Preservation Commission, provided this information, which
-# suggests that Unalaska deviated from statutory time from early 1967
-# possibly until 1983:
-#
-#  Minutes of the Unalaska City Council Meeting, January 10, 1967:
-#  "Except for St. Paul and Akutan, Unalaska is the only important
-#  location not on Alaska Standard Time.  The following resolution was
-#  made by William Robinson and seconded by Henry Swanson:  Be it
-#  resolved that the City of Unalaska hereby goes to Alaska Standard
-#  Time as of midnight Friday, January 13, 1967 (1 A.M. Saturday,
-#  January 14, Alaska Standard Time.)  This resolution was passed with
-#  three votes for and one against."
-
-# Hawaii
-#
-# From Arthur David Olson:
-# And then there's Hawaii.
-# DST was observed for one day in 1933;
-# standard time was changed by half an hour in 1947;
-# it's always standard as of 1986.
-#
-# From Paul Eggert:
-# Shanks says the 1933 experiment lasted for three weeks.  Go with Shanks.
-#
-Zone Pacific/Honolulu	-10:31:26 -	LMT	1900 Jan  1 12:00
-			-10:30	-	HST	1933 Apr 30 2:00
-			-10:30	1:00	HDT	1933 May 21 2:00
-			-10:30	US	H%sT	1947 Jun  8 2:00
-			-10:00	-	HST
-
-# Now we turn to US areas that have diverged from the consensus since 1970.
-
-# Arizona mostly uses MST.
-
-# From Paul Eggert (2002-10-20):
-#
-# The information in the rest of this paragraph is derived from the
-# <a href="http://www.dlapr.lib.az.us/links/daylight.htm">
-# Daylight Saving Time web page (2002-01-23)</a> maintained by the
-# Arizona State Library, Archives and Public Records.
-# Between 1944-01-01 and 1944-04-01 the State of Arizona used standard
-# time, but by federal law railroads, airlines, bus lines, military
-# personnel, and some engaged in interstate commerce continued to
-# observe war (i.e., daylight saving) time.  The 1944-03-17 Phoenix
-# Gazette says that was the date the law changed, and that 04-01 was
-# the date the state's clocks would change.  In 1945 the State of
-# Arizona used standard time all year, again with exceptions only as
-# mandated by federal law.  Arizona observed DST in 1967, but Arizona
-# Laws 1968, ch. 183 (effective 1968-03-21) repealed DST.
-#
-# Shanks says the 1944 experiment came to an end on 1944-03-17.
-# Go with the Arizona State Library instead.
-
-Zone America/Phoenix	-7:28:18 -	LMT	1883 Nov 18 11:31:42
-			-7:00	US	M%sT	1944 Jan  1 00:01
-			-7:00	-	MST	1944 Apr  1 00:01
-			-7:00	US	M%sT	1944 Oct  1 00:01
-			-7:00	-	MST	1967
-			-7:00	US	M%sT	1968 Mar 21
-			-7:00	-	MST
-# From Arthur David Olson (1988-02-13):
-# A writer from the Inter Tribal Council of Arizona, Inc.,
-# notes in private correspondence dated 1987-12-28 that "Presently, only the
-# Navajo Nation participates in the Daylight Saving Time policy, due to its
-# large size and location in three states."  (The "only" means that other
-# tribal nations don't use DST.)
-
-Link America/Denver America/Shiprock
-
-# Southern Idaho (Ada, Adams, Bannock, Bear Lake, Bingham, Blaine,
-# Boise, Bonneville, Butte, Camas, Canyon, Caribou, Cassia, Clark,
-# Custer, Elmore, Franklin, Fremont, Gem, Gooding, Jefferson, Jerome,
-# Lemhi, Lincoln, Madison, Minidoka, Oneida, Owyhee, Payette, Power,
-# Teton, Twin Falls, Valley, Washington counties) and eastern Oregon
-# switched four weeks late in 1974.
-#
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Boise	-7:44:49 -	LMT	1883 Nov 18 12:15:11
-			-8:00	US	P%sT	1923 May 13 2:00
-			-7:00	US	M%sT	1974
-			-7:00	-	MST	1974 Feb  3 2:00
-			-7:00	US	M%sT
-
-# Indiana
-#
-# For a map of Indiana's time zone regions, see:
-# <a href="http://www.mccsc.edu/time.html">
-# What time is it in Indiana?
-# </a> (2005-05-03)
-#
-# From Paul Eggert (2005-08-22):
-# Since 1970, most of Indiana has been like America/Indiana/Indianapolis,
-# with the following exceptions:
-#
-# - Gibson, Jasper, Lake, LaPorte, Newton, Porter, Posey, Spencer,
-#   Vandenburgh, and Warrick counties have been like America/Chicago.
-#
-# - Dearborn and Ohio counties have been like America/New_York.
-#
-# - Clark, Floyd, and Harrison counties have been like
-#   America/Kentucky/Louisville.
-#
-# - Crawford, Starke, and Switzerland counties have their own time zone
-#   histories as noted below.
-#
-# Shanks partitions Indiana into 345 regions, each with its own time history,
-# and writes ``Even newspaper reports present contradictory information.''
-# Fortunately, most of the complexity occurred before our cutoff date of 1970.
-#
-# Other than Indianapolis, the Indiana place names are so nondescript
-# that they would be ambiguous if we left them at the `America' level.
-# So we reluctantly put them all in a subdirectory `America/Indiana'.
-
-# From Paul Eggert (2005-08-16):
-# http://www.mccsc.edu/time.html says that Indiana will use DST starting 2006,
-# and that many counties may switch either to Central or to Eastern time.
-# The county-by-county decisions have not been made yet, so for now assume
-# that no counties will switch: this assumption is most likely wrong,
-# but it's the best we can do for now.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
-Rule Indianapolis 1941	only	-	Jun	22	2:00	1:00	D
-Rule Indianapolis 1941	1954	-	Sep	lastSun	2:00	0	S
-Rule Indianapolis 1946	1954	-	Apr	lastSun	2:00	1:00	D
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Indiana/Indianapolis -5:44:38 - LMT 1883 Nov 18 12:15:22
-			-6:00	US	C%sT	1920
-			-6:00 Indianapolis C%sT	1942
-			-6:00	US	C%sT	1946
-			-6:00 Indianapolis C%sT	1955 Apr 24 2:00
-			-5:00	-	EST	1957 Sep 29 2:00
-			-6:00	-	CST	1958 Apr 27 2:00
-			-5:00	-	EST	1969
-			-5:00	US	E%sT	1971
-			-5:00	-	EST	2006
-			-5:00	US	E%sT
-#
-# Part of Crawford County, Indiana, last observed DST in 1975,
-# and left its clocks alone in 1974.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
-Rule	Marengo	1951	only	-	Apr	lastSun	2:00	1:00	D
-Rule	Marengo	1951	only	-	Sep	lastSun	2:00	0	S
-Rule	Marengo	1954	1960	-	Apr	lastSun	2:00	1:00	D
-Rule	Marengo	1954	1960	-	Sep	lastSun	2:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Indiana/Marengo -5:45:23 -	LMT	1883 Nov 18 12:14:37
-			-6:00	US	C%sT	1951
-			-6:00	Marengo	C%sT	1961 Apr 30 2:00
-			-5:00	-	EST	1969
-			-5:00	US	E%sT	1974 Jan  6 2:00
-			-6:00	1:00	CDT	1974 Oct 27 2:00
-			-5:00	US	E%sT	1976
-			-5:00	-	EST	2006
-			-5:00	US	E%sT
-#
-# Starke County, Indiana
-# From Arthur David Olson (1991-10-28):
-# An article on page A3 of the Sunday, 1991-10-27 Washington Post
-# notes that Starke County switched from Central time to Eastern time as of
-# 1991-10-27.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
-Rule	Starke	1947	1961	-	Apr	lastSun	2:00	1:00	D
-Rule	Starke	1947	1954	-	Sep	lastSun	2:00	0	S
-Rule	Starke	1955	1956	-	Oct	lastSun	2:00	0	S
-Rule	Starke	1957	1958	-	Sep	lastSun	2:00	0	S
-Rule	Starke	1959	1961	-	Oct	lastSun	2:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Indiana/Knox -5:46:30 -	LMT	1883 Nov 18 12:13:30
-			-6:00	US	C%sT	1947
-			-6:00	Starke	C%sT	1962 Apr 29 2:00
-			-5:00	-	EST	1963 Oct 27 2:00
-			-6:00	US	C%sT	1991 Oct 27 2:00
-			-5:00	-	EST	2006
-			-5:00	US	E%sT
-#
-# Switzerland County, Indiana, last observed DST in 1972.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Indiana/Vevay -5:40:16 -	LMT	1883 Nov 18 12:19:44
-			-6:00	US	C%sT	1954 Apr 25 2:00
-			-5:00	-	EST	1969
-			-5:00	US	E%sT	1973
-			-5:00	-	EST	2006
-			-5:00	US	E%sT
-
-# Part of Kentucky left its clocks alone in 1974.
-# This also includes Clark, Floyd, and Harrison counties in Indiana.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
-Rule Louisville	1921	only	-	May	1	2:00	1:00	D
-Rule Louisville	1921	only	-	Sep	1	2:00	0	S
-Rule Louisville	1941	1961	-	Apr	lastSun	2:00	1:00	D
-Rule Louisville	1941	only	-	Sep	lastSun	2:00	0	S
-Rule Louisville	1946	only	-	Jun	2	2:00	0	S
-Rule Louisville	1950	1955	-	Sep	lastSun	2:00	0	S
-Rule Louisville	1956	1960	-	Oct	lastSun	2:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Kentucky/Louisville -5:43:02 -	LMT	1883 Nov 18 12:16:58
-			-6:00	US	C%sT	1921
-			-6:00 Louisville C%sT	1942
-			-6:00	US	C%sT	1946
-			-6:00 Louisville C%sT	1961 Jul 23 2:00
-			-5:00	-	EST	1968
-			-5:00	US	E%sT	1974 Jan  6 2:00
-			-6:00	1:00	CDT	1974 Oct 27 2:00
-			-5:00	US	E%sT
-#
-# Wayne, Clinton, and Russell Counties, Kentucky
-#
-# From
-# <a href="http://www.lake-cumberland.com/life/archive/news990129time.shtml">
-# Lake Cumberland LIFE
-# </a> (1999-01-29) via WKYM-101.7:
-# Clinton County has joined Wayne County in asking the DoT to change from
-# the Central to the Eastern time zone....  The Wayne County government made
-# the same request in December.  And while Russell County officials have not
-# taken action, the majority of respondents to a poll conducted there in
-# August indicated they would like to change to "fast time" also.
-# The three Lake Cumberland counties are the farthest east of any U.S.
-# location in the Central time zone.
-#
-# From Rich Wales (2000-08-29):
-# After prolonged debate, and despite continuing deep differences of opinion,
-# Wayne County (central Kentucky) is switching from Central (-0600) to Eastern
-# (-0500) time.  They won't "fall back" this year.  See Sara Shipley,
-# The difference an hour makes, Nando Times (2000-08-29 15:33 -0400).
-#
-# From Paul Eggert (2001-07-16):
-# The final rule was published in the
-# <a href="http://frwebgate.access.gpo.gov/cgi-bin/getdoc.cgi?dbname=2000_register&docid=fr17au00-22">
-# Federal Register 65, 160 (2000-08-17), page 50154-50158.
-# </a>
-#
-Zone America/Kentucky/Monticello -5:39:24 - LMT	1883 Nov 18 12:20:36
-			-6:00	US	C%sT	1946
-			-6:00	-	CST	1968
-			-6:00	US	C%sT	2000 Oct 29  2:00
-			-5:00	US	E%sT
-
-
-# From Rives McDow (2000-08-30):
-# Here ... are all the changes in the US since 1985.
-# Kearny County, KS (put all of county on central;
-#	previously split between MST and CST) ... 1990-10
-# Starke County, IN (from CST to EST) ... 1991-10
-# Oliver County, ND (from MST to CST) ... 1992-10
-# West Wendover, NV (from PST TO MST) ... 1999-10
-# Wayne County, KY (from CST to EST) ... 2000-10
-#
-# From Paul Eggert (2001-07-17):
-# We don't know where the line used to be within Kearny County, KS,
-# so omit that change for now.
-# See America/Indiana/Knox for the Starke County, IN change.
-# See America/North_Dakota/Center for the Oliver County, ND change.
-# West Wendover, NV officially switched from Pacific to mountain time on
-# 1999-10-31.  See the
-# <a href="http://frwebgate.access.gpo.gov/cgi-bin/getdoc.cgi?dbname=1999_register&docid=fr21oc99-15">
-# Federal Register 64, 203 (1999-10-21), page 56705-56707.
-# </a>
-# However, the Federal Register says that West Wendover already operated
-# on mountain time, and the rule merely made this official;
-# hence a separate tz entry is not needed.
-
-# Michigan
-#
-# From Bob Devine (1988-01-28):
-# Michigan didn't observe DST from 1968 to 1973.
-#
-# From Paul Eggert (1999-03-31):
-# Shanks writes that Michigan started using standard time on 1885-09-18,
-# but Howse writes (pp 124-125, referring to Popular Astronomy, 1901-01)
-# that Detroit kept
-#
-#	local time until 1900 when the City Council decreed that clocks should
-#	be put back twenty-eight minutes to Central Standard Time.  Half the
-#	city obeyed, half refused.  After considerable debate, the decision
-#	was rescinded and the city reverted to Sun time.  A derisive offer to
-#	erect a sundial in front of the city hall was referred to the
-#	Committee on Sewers.  Then, in 1905, Central time was adopted
-#	by city vote.
-#
-# This story is too entertaining to be false, so go with Howse over Shanks.
-#
-# From Paul Eggert (2001-03-06):
-# Garland (1927) writes ``Cleveland and Detroit advanced their clocks
-# one hour in 1914.''  This change is not in Shanks.  We have no more
-# info, so omit this for now.
-#
-# Most of Michigan observed DST from 1973 on, but was a bit late in 1975.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
-Rule	Detroit	1948	only	-	Apr	lastSun	2:00	1:00	D
-Rule	Detroit	1948	only	-	Sep	lastSun	2:00	0	S
-Rule	Detroit	1967	only	-	Jun	14	2:00	1:00	D
-Rule	Detroit	1967	only	-	Oct	lastSun	2:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Detroit	-5:32:11 -	LMT	1905
-			-6:00	-	CST	1915 May 15 2:00
-			-5:00	-	EST	1942
-			-5:00	US	E%sT	1946
-			-5:00	Detroit	E%sT	1973
-			-5:00	US	E%sT	1975
-			-5:00	-	EST	1975 Apr 27 2:00
-			-5:00	US	E%sT
-#
-# The Michigan border with Wisconsin switched from EST to CST/CDT in 1973.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
-Rule Menominee	1946	only	-	Apr	lastSun	2:00	1:00	D
-Rule Menominee	1946	only	-	Sep	lastSun	2:00	0	S
-Rule Menominee	1966	only	-	Apr	lastSun	2:00	1:00	D
-Rule Menominee	1966	only	-	Oct	lastSun	2:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Menominee	-5:50:27 -	LMT	1885 Sep 18 12:00
-			-6:00	US	C%sT	1946
-			-6:00 Menominee	C%sT	1969 Apr 27 2:00
-			-5:00	-	EST	1973 Apr 29 2:00
-			-6:00	US	C%sT
-
-# Navassa
-# administered by the US Fish and Wildlife Service
-# claimed by US under the provisions of the 1856 Guano Islands Act
-# also claimed by Haiti
-# occupied 1857/1900 by the Navassa Phosphate Co
-# US lighthouse 1917/1996-09
-# currently uninhabited
-# see Mark Fineman, ``An Isle Rich in Guano and Discord'',
-# _Los Angeles Times_ (1998-11-10), A1, A10; it cites
-# Jimmy Skaggs, _The Great Guano Rush_ (1994).
-
-################################################################################
-
-
-# From Paul Eggert (1999-10-29):
-# A good source for time zone historical data outside the US is
-# Thomas G. Shanks, The International Atlas (5th edition),
-# San Diego: ACS Publications, Inc. (1999).
-#
-# Gwillim Law writes that a good source
-# for recent time zone data is the International Air Transport
-# Association's Standard Schedules Information Manual (IATA SSIM),
-# published semiannually.  Law sent in several helpful summaries
-# of the IATA's data after 1990.
-#
-# Except where otherwise noted, Shanks is the source for entries through 1990,
-# and IATA SSIM is the source for entries after 1990.
-#
-# Other sources occasionally used include:
-#
-#	Edward W. Whitman, World Time Differences,
-#	Whitman Publishing Co, 2 Niagara Av, Ealing, London (undated),
-#	which I found in the UCLA library.
-#
-#	<a href="http://www.pettswoodvillage.co.uk/Daylight_Savings_William_Willett.pdf">
-#	William Willett, The Waste of Daylight, 19th edition
-#	</a> (1914-03)
-#
-# See the `europe' file for Greenland.
-
-# Canada
-
-# From Alain LaBont<e'> (1994-11-14):
-# I post here the time zone abbreviations standardized in Canada
-# for both English and French in the CAN/CSA-Z234.4-89 standard....
-#
-#	UTC	Standard time	Daylight savings time
-#	offset	French	English	French	English
-#	-2:30	-	-	HAT	NDT
-#	-3	-	-	HAA	ADT
-#	-3:30	HNT	NST	-	-
-#	-4	HNA	AST	HAE	EDT
-#	-5	HNE	EST	HAC	CDT
-#	-6	HNC	CST	HAR	MDT
-#	-7	HNR	MST	HAP	PDT
-#	-8	HNP	PST	HAY	YDT
-#	-9	HNY	YST	-	-
-#
-#	HN: Heure Normale	ST: Standard Time
-#	HA: Heure Avanc<e'>e	DT: Daylight saving Time
-#
-#	A: de l'Atlantique	Atlantic
-#	C: du Centre		Central
-#	E: de l'Est		Eastern
-#	M:			Mountain
-#	N:			Newfoundland
-#	P: du Pacifique		Pacific
-#	R: des Rocheuses
-#	T: de Terre-Neuve
-#	Y: du Yukon		Yukon
-#
-# From Paul Eggert (1994-11-22):
-# Alas, this sort of thing must be handled by localization software.
-
-# Unless otherwise specified, the data for Canada are all from Shanks.
-
-# From Paul Eggert (2000-10-02):
-# H. David Matthews and Mary Vincent's map
-# <a href="http://www.canadiangeographic.ca/SO98/geomap.htm">
-# "It's about TIME", _Canadian Geographic_ (September-October 1998)
-# </a> contains detailed boundaries for regions observing nonstandard
-# time and daylight saving time arrangements in Canada circa 1998.
-#
-# INMS, the Institute for National Measurement Standards in Ottawa, has
-# <a href="http://www.nrc.ca/inms/time/tze.html">
-# information about standard and daylight saving time zones in Canada.
-# </a> (updated periodically).
-# Its unofficial information is often taken from Matthews and Vincent.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Canada	1918	only	-	Apr	14	2:00	1:00	D
-Rule	Canada	1918	only	-	Oct	31	2:00	0	S
-Rule	Canada	1942	only	-	Feb	 9	2:00	1:00	W # War
-Rule	Canada	1945	only	-	Aug	14	23:00u	1:00	P # Peace
-Rule	Canada	1945	only	-	Sep	30	2:00	0	S
-Rule	Canada	1974	1986	-	Apr	lastSun	2:00	1:00	D
-Rule	Canada	1974	max	-	Oct	lastSun	2:00	0	S
-Rule	Canada	1987	max	-	Apr	Sun>=1	2:00	1:00	D
-
-
-# Newfoundland (and far southeast Labrador)
-
-# From Paul Eggert (2000-10-02):
-# Matthews and Vincent (1998) write that Labrador should use NST/NDT,
-# but the only part of Labrador that follows the rules is the
-# southeast corner, including Port Hope Simpson and Mary's Harbour,
-# but excluding, say, Black Tickle.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	StJohns	1917	only	-	Apr	 8	2:00	1:00	D
-Rule	StJohns	1917	only	-	Sep	17	2:00	0	S
-# Whitman gives 1919 Apr 5 and 1920 Apr 5; go with Shanks.
-Rule	StJohns	1919	only	-	May	 5	23:00	1:00	D
-Rule	StJohns	1919	only	-	Aug	12	23:00	0	S
-# For 1931-1935 Whitman gives Apr same date; go with Shanks.
-Rule	StJohns	1920	1935	-	May	Sun>=1	23:00	1:00	D
-Rule	StJohns	1920	1935	-	Oct	lastSun	23:00	0	S
-# For 1936-1941 Whitman gives May Sun>=8 and Oct Sun>=1; go with Shanks.
-Rule	StJohns	1936	1941	-	May	Mon>=9	0:00	1:00	D
-Rule	StJohns	1936	1941	-	Oct	Mon>=2	0:00	0	S
-# Whitman gives the following transitions:
-# 1942 03-01/12-31, 1943 05-30/09-05, 1944 07-10/09-02, 1945 01-01/10-07
-# but go with Shanks and assume they used Canadian rules.
-# For 1946-9 Whitman gives May 5,4,9,1 - Oct 1,5,3,2, and for 1950 he gives
-# Apr 30 - Sep 24; go with Shanks.
-Rule	StJohns	1946	1950	-	May	Sun>=8	2:00	1:00	D
-Rule	StJohns	1946	1950	-	Oct	Sun>=2	2:00	0	S
-Rule	StJohns	1951	1986	-	Apr	lastSun	2:00	1:00	D
-Rule	StJohns	1951	1959	-	Sep	lastSun	2:00	0	S
-Rule	StJohns	1960	1986	-	Oct	lastSun	2:00	0	S
-# From Paul Eggert (2000-10-02):
-# INMS (2000-09-12) says that, since 1988 at least, Newfoundland switches
-# at 00:01 local time.  For now, assume it started in 1987.
-Rule	StJohns	1987	only	-	Apr	Sun>=1	0:01	1:00	D
-Rule	StJohns	1987	max	-	Oct	lastSun	0:01	0	S
-Rule	StJohns	1988	only	-	Apr	Sun>=1	0:01	2:00	DD
-Rule	StJohns	1989	max	-	Apr	Sun>=1	0:01	1:00	D
-# St John's has an apostrophe, but Posix file names can't have apostrophes.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/St_Johns	-3:30:52 -	LMT	1884
-			-3:30:52 StJohns N%sT	1918
-			-3:30:52 Canada	N%sT	1919
-			-3:30:52 StJohns N%sT	1935 Mar 30
-			-3:30	StJohns	N%sT	1942 May 11
-			-3:30	Canada	N%sT	1946
-			-3:30	StJohns	N%sT
-
-# most of east Labrador
-
-# The name `Happy Valley-Goose Bay' is too long; use `Goose Bay'.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Goose_Bay	-4:01:40 -	LMT	1884 # Happy Valley-Goose Bay
-			-3:30:52 -	NST	1918
-			-3:30:52 Canada N%sT	1919
-			-3:30:52 -	NST	1935 Mar 30
-			-3:30	-	NST	1936
-			-3:30	StJohns	N%sT	1942 May 11
-			-3:30	Canada	N%sT	1946
-			-3:30	StJohns	N%sT	1966 Mar 15 2:00
-			-4:00	StJohns	A%sT
-
-
-# west Labrador, New Brunswick, Nova Scotia, Prince Edward I
-
-# From Paul Eggert (1996-06-12):
-# Shanks writes that since 1970 most of this region has been like Halifax.
-# Many locales did not observe peacetime DST until 1972;
-# Glace Bay, NS is the largest that we know of.
-# Shanks also writes that Liverpool, NS was the only town in Canada to observe
-# DST in 1971 but not 1970; for now we'll assume this is a typo.
-
-# From Paul Eggert (2000-10-02):
-# INMS (2000-09-12) says that, since 1988 at least, New Brunswick switches
-# at 00:01 local time.  FIXME: verify and create a new Zone for this.
-
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule Halifax	1916	only	-	Apr	 1	0:00	1:00	D
-Rule Halifax	1916	only	-	Oct	 1	0:00	0	S
-Rule Halifax	1920	only	-	May	 9	0:00	1:00	D
-Rule Halifax	1920	only	-	Aug	29	0:00	0	S
-Rule Halifax	1921	only	-	May	 6	0:00	1:00	D
-Rule Halifax	1921	1922	-	Sep	 5	0:00	0	S
-Rule Halifax	1922	only	-	Apr	30	0:00	1:00	D
-Rule Halifax	1923	1925	-	May	Sun>=1	0:00	1:00	D
-Rule Halifax	1923	only	-	Sep	 4	0:00	0	S
-Rule Halifax	1924	only	-	Sep	15	0:00	0	S
-Rule Halifax	1925	only	-	Sep	28	0:00	0	S
-Rule Halifax	1926	only	-	May	16	0:00	1:00	D
-Rule Halifax	1926	only	-	Sep	13	0:00	0	S
-Rule Halifax	1927	only	-	May	 1	0:00	1:00	D
-Rule Halifax	1927	only	-	Sep	26	0:00	0	S
-Rule Halifax	1928	1931	-	May	Sun>=8	0:00	1:00	D
-Rule Halifax	1928	only	-	Sep	 9	0:00	0	S
-Rule Halifax	1929	only	-	Sep	 3	0:00	0	S
-Rule Halifax	1930	only	-	Sep	15	0:00	0	S
-Rule Halifax	1931	1932	-	Sep	Mon>=24	0:00	0	S
-Rule Halifax	1932	only	-	May	 1	0:00	1:00	D
-Rule Halifax	1933	only	-	Apr	30	0:00	1:00	D
-Rule Halifax	1933	only	-	Oct	 2	0:00	0	S
-Rule Halifax	1934	only	-	May	20	0:00	1:00	D
-Rule Halifax	1934	only	-	Sep	16	0:00	0	S
-Rule Halifax	1935	only	-	Jun	 2	0:00	1:00	D
-Rule Halifax	1935	only	-	Sep	30	0:00	0	S
-Rule Halifax	1936	only	-	Jun	 1	0:00	1:00	D
-Rule Halifax	1936	only	-	Sep	14	0:00	0	S
-Rule Halifax	1937	1938	-	May	Sun>=1	0:00	1:00	D
-Rule Halifax	1937	1941	-	Sep	Mon>=24	0:00	0	S
-Rule Halifax	1939	only	-	May	28	0:00	1:00	D
-Rule Halifax	1940	1941	-	May	Sun>=1	0:00	1:00	D
-Rule Halifax	1946	1949	-	Sep	lastSun	2:00	0	S
-Rule Halifax	1946	1949	-	Apr	lastSun	2:00	1:00	D
-Rule Halifax	1951	1954	-	Sep	lastSun	2:00	0	S
-Rule Halifax	1951	1954	-	Apr	lastSun	2:00	1:00	D
-Rule Halifax	1956	1959	-	Sep	lastSun	2:00	0	S
-Rule Halifax	1956	1959	-	Apr	lastSun	2:00	1:00	D
-Rule Halifax	1962	1973	-	Apr	lastSun	2:00	1:00	D
-Rule Halifax	1962	1973	-	Oct	lastSun	2:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Halifax	-4:14:24 -	LMT	1902 Jun 15
-			-4:00	Halifax	A%sT	1918
-			-4:00	Canada	A%sT	1919
-			-4:00	Halifax	A%sT	1942 Feb  9 2:00s
-			-4:00	Canada	A%sT	1946
-			-4:00	Halifax	A%sT	1974
-			-4:00	Canada	A%sT
-Zone America/Glace_Bay	-3:59:48 -	LMT	1902 Jun 15
-			-4:00	Canada	A%sT	1953
-			-4:00	Halifax	A%sT	1954
-			-4:00	-	AST	1972
-			-4:00	Halifax	A%sT	1974
-			-4:00	Canada	A%sT
-
-
-# Ontario, Quebec
-
-# From Paul Eggert (1996-06-12):
-# Shanks writes that since 1970 most of Ontario has been like Toronto,
-# and most of Quebec has been like Montreal.
-# Thunder Bay skipped DST in 1973.
-# Many smaller locales did not observe peacetime DST until 1974;
-# Nipigon (EST) and Rainy River (CST) are the largest that we know of.
-# Far west Ontario is like Winnipeg; far east Quebec is like Halifax.
-
-# From Mark Brader (2003-07-26):
-# [According to the Toronto Star] Orillia, Ontario, adopted DST
-# effective Saturday, 1912-06-22, 22:00; the article mentions that
-# Port Arthur (now part of Thunder Bay, Ontario) as well as Moose Jaw
-# have already done so.  In Orillia DST was to run until Saturday,
-# 1912-08-31 (no time mentioned), but it was met with considerable
-# hostility from certain segments of the public, and was revoked after
-# only two weeks -- I copied it as Saturday, 1912-07-07, 22:00, but
-# presumably that should be -07-06.  (1912-06-19, -07-12; also letters
-# earlier in June).
-#
-# Kenora, Ontario, was to abandon DST on 1914-06-01 (-05-21).
-
-# From Paul Eggert (1997-10-17):
-# Mark Brader writes that an article in the 1997-10-14 Toronto Star
-# says that Atikokan, Ontario currently does not observe DST,
-# but will vote on 11-10 whether to use EST/EDT.
-# He also writes that the
-# <a href="http://www.gov.on.ca/MBS/english/publications/statregs/conttext.html">
-# Ontario Time Act (1990, Chapter T.9)
-# </a>
-# says that Ontario east of 90W uses EST/EDT, and west of 90W uses CST/CDT.
-# Officially Atikokan is therefore on CST/CDT, and most likely this report
-# concerns a non-official time observed as a matter of local practice.
-# For what it's worth, Shanks says that Atikokan has agreed with
-# Rainy River ever since standard time was introduced.
-
-# From Paul Eggert (2000-10-02):
-# Matthews and Vincent (1998) write that Atikokan, Pickle Lake, and
-# New Osnaburgh observe CST all year, that Big Trout Lake observes
-# CST/CDT, and that Upsala and Shebandowan observe EST/EDT, all in
-# violation of the official Ontario rules.
-# They also write that Quebec east of the -63 meridian is supposed to
-# observe AST, but residents as far east as Natashquan use EST/EDT,
-# and residents east of Natashquan use AST.
-# We probably need Zones for far east Quebec and for Atikokan,
-# but we don't know when their practices started.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Mont	1917	only	-	Mar	25	2:00	1:00	D
-Rule	Mont	1917	only	-	Apr	24	0:00	0	S
-Rule	Mont	1919	only	-	Mar	31	2:30	1:00	D
-Rule	Mont	1919	only	-	Oct	25	2:30	0	S
-Rule	Mont	1920	only	-	May	 2	2:30	1:00	D
-Rule	Mont	1920	1922	-	Oct	Sun>=1	2:30	0	S
-Rule	Mont	1921	only	-	May	 1	2:00	1:00	D
-Rule	Mont	1922	only	-	Apr	30	2:00	1:00	D
-Rule	Mont	1924	only	-	May	17	2:00	1:00	D
-Rule	Mont	1924	1926	-	Sep	lastSun	2:30	0	S
-Rule	Mont	1925	1926	-	May	Sun>=1	2:00	1:00	D
-# The 1927-to-1937 rules can be expressed more simply as
-# Rule	Mont	1927	1937	-	Apr	lastSat	24:00	1:00	D
-# Rule	Mont	1927	1937	-	Sep	lastSat	24:00	0	S
-# The rules below avoid use of 24:00
-# (which pre-1998 versions of zic cannot handle).
-Rule	Mont	1927	only	-	May	1	0:00	1:00	D
-Rule	Mont	1927	1932	-	Sep	lastSun	0:00	0	S
-Rule	Mont	1928	1931	-	Apr	lastSun	0:00	1:00	D
-Rule	Mont	1932	only	-	May	1	0:00	1:00	D
-Rule	Mont	1933	1940	-	Apr	lastSun	0:00	1:00	D
-Rule	Mont	1933	only	-	Oct	1	0:00	0	S
-Rule	Mont	1934	1939	-	Sep	lastSun	0:00	0	S
-Rule	Mont	1946	1973	-	Apr	lastSun	2:00	1:00	D
-Rule	Mont	1945	1948	-	Sep	lastSun	2:00	0	S
-Rule	Mont	1949	1950	-	Oct	lastSun	2:00	0	S
-Rule	Mont	1951	1956	-	Sep	lastSun	2:00	0	S
-Rule	Mont	1957	1973	-	Oct	lastSun	2:00	0	S
-
-Rule	Toronto	1919	only	-	Mar	30	23:30	1:00	D
-Rule	Toronto	1919	only	-	Oct	26	0:00	0	S
-Rule	Toronto	1920	only	-	May	 2	2:00	1:00	D
-Rule	Toronto	1920	only	-	Sep	26	0:00	0	S
-Rule	Toronto	1921	only	-	May	15	2:00	1:00	D
-Rule	Toronto	1921	only	-	Sep	15	2:00	0	S
-Rule	Toronto	1922	1923	-	May	Sun>=8	2:00	1:00	D
-# Shanks says 1923-09-19; assume it's a typo and that "-16" was meant.
-Rule	Toronto	1922	1926	-	Sep	Sun>=15	2:00	0	S
-Rule	Toronto	1924	1927	-	May	Sun>=1	2:00	1:00	D
-# The 1927-to-1939 rules can be expressed more simply as
-# Rule	Toronto	1927	1937	-	Sep	Sun>=25	2:00	0	S
-# Rule	Toronto	1928	1937	-	Apr	Sun>=25	2:00	1:00	D
-# Rule	Toronto	1938	1940	-	Apr	lastSun	2:00	1:00	D
-# Rule	Toronto	1938	1939	-	Sep	lastSun	2:00	0	S
-# The rules below avoid use of Sun>=25
-# (which pre-2004 versions of zic cannot handle).
-Rule	Toronto	1927	1932	-	Sep	lastSun	2:00	0	S
-Rule	Toronto	1928	1931	-	Apr	lastSun	2:00	1:00	D
-Rule	Toronto	1932	only	-	May	1	2:00	1:00	D
-Rule	Toronto	1933	1940	-	Apr	lastSun	2:00	1:00	D
-Rule	Toronto	1933	only	-	Oct	1	2:00	0	S
-Rule	Toronto	1934	1939	-	Sep	lastSun	2:00	0	S
-Rule	Toronto	1945	1946	-	Sep	lastSun	2:00	0	S
-Rule	Toronto	1946	only	-	Apr	lastSun	2:00	1:00	D
-Rule	Toronto	1947	1949	-	Apr	lastSun	0:00	1:00	D
-Rule	Toronto	1947	1948	-	Sep	lastSun	0:00	0	S
-Rule	Toronto	1949	only	-	Nov	lastSun	0:00	0	S
-Rule	Toronto	1950	1973	-	Apr	lastSun	2:00	1:00	D
-Rule	Toronto	1950	only	-	Nov	lastSun	2:00	0	S
-Rule	Toronto	1951	1956	-	Sep	lastSun	2:00	0	S
-# Shanks says Toronto ended DST a week early in 1971, namely on 1971-10-24,
-# but Mark Brader wrote (2003-05-31) that he checked the 1971-10-30 issue
-# of the Toronto Star, and it said that DST ended 1971-10-31 as usual.
-Rule	Toronto	1957	1973	-	Oct	lastSun	2:00	0	S
-
-# From Paul Eggert (2003-07-27):
-# Willett (1914-03) writes (p. 17) "In the Cities of Fort William, and
-# Port Arthur, Ontario, the principle of the Bill has been in
-# operation for the past three years, and in the City of Moose Jaw,
-# Saskatchewan, for one year."
-
-# From David Bryan via Tory Tronrud, Director/Curator,
-# Thunder Bay Museum (2003-11-12):
-# There is some suggestion, however, that, by-law or not, daylight
-# savings time was being practiced in Fort William and Port Arthur
-# before 1909.... [I]n 1910, the line between the Eastern and Central
-# Time Zones was permanently moved about two hundred miles west to
-# include the Thunder Bay area....  When Canada adopted daylight
-# savings time in 1916, Fort William and Port Arthur, having done so
-# already, did not change their clocks....  During the Second World
-# War,... [t]he cities agreed to implement DST during the summer
-# months for the remainder of the war years.
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Montreal	-4:54:16 -	LMT	1884
-			-5:00	Mont	E%sT	1918
-			-5:00	Canada	E%sT	1919
-			-5:00	Mont	E%sT	1942 Feb  9 2:00s
-			-5:00	Canada	E%sT	1946
-			-5:00	Mont	E%sT	1974
-			-5:00	Canada	E%sT
-Zone America/Toronto	-5:17:32 -	LMT	1895
-			-5:00	Canada	E%sT	1919
-			-5:00	Toronto	E%sT	1942 Feb  9 2:00s
-			-5:00	Canada	E%sT	1946
-			-5:00	Toronto	E%sT	1974
-			-5:00	Canada	E%sT
-Zone America/Thunder_Bay -5:57:00 -	LMT	1895
-			-6:00	-	CST	1910
-			-5:00	-	EST	1942
-			-5:00	Canada	E%sT	1970
-			-5:00	Mont	E%sT	1973
-			-5:00	-	EST	1974
-			-5:00	Canada	E%sT
-Zone America/Nipigon	-5:53:04 -	LMT	1895
-			-5:00	Canada	E%sT	1940 Sep 29
-			-5:00	1:00	EDT	1942 Feb  9 2:00s
-			-5:00	Canada	E%sT
-Zone America/Rainy_River -6:17:56 -	LMT	1895
-			-6:00	Canada	C%sT	1940 Sep 29
-			-6:00	1:00	CDT	1942 Feb  9 2:00s
-			-6:00	Canada	C%sT
-
-
-# Manitoba
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Winn	1916	only	-	Apr	23	0:00	1:00	D
-Rule	Winn	1916	only	-	Sep	17	0:00	0	S
-Rule	Winn	1918	only	-	Apr	14	2:00	1:00	D
-Rule	Winn	1918	only	-	Oct	31	2:00	0	S
-Rule	Winn	1937	only	-	May	16	2:00	1:00	D
-Rule	Winn	1937	only	-	Sep	26	2:00	0	S
-Rule	Winn	1942	only	-	Feb	 9	2:00	1:00	W # War
-Rule	Winn	1945	only	-	Aug	14	23:00u	1:00	P # Peace
-Rule	Winn	1945	only	-	Sep	lastSun	2:00	0	S
-Rule	Winn	1946	only	-	May	12	2:00	1:00	D
-Rule	Winn	1946	only	-	Oct	13	2:00	0	S
-Rule	Winn	1947	1949	-	Apr	lastSun	2:00	1:00	D
-Rule	Winn	1947	1949	-	Sep	lastSun	2:00	0	S
-Rule	Winn	1950	only	-	May	 1	2:00	1:00	D
-Rule	Winn	1950	only	-	Sep	30	2:00	0	S
-Rule	Winn	1951	1960	-	Apr	lastSun	2:00	1:00	D
-Rule	Winn	1951	1958	-	Sep	lastSun	2:00	0	S
-Rule	Winn	1959	only	-	Oct	lastSun	2:00	0	S
-Rule	Winn	1960	only	-	Sep	lastSun	2:00	0	S
-Rule	Winn	1963	only	-	Apr	lastSun	2:00	1:00	D
-Rule	Winn	1963	only	-	Sep	22	2:00	0	S
-Rule	Winn	1966	1986	-	Apr	lastSun	2:00	1:00	D
-Rule	Winn	1966	1986	-	Oct	lastSun	2:00	0	S
-Rule	Winn	1987	max	-	Apr	Sun>=1	2:00	1:00	D
-# From Paul Eggert (2000-10-02):
-# INMS (2000-09-12) says that, since 1988 at least, Manitoba switches from
-# DST at 03:00 local time.  For now, assume it started in 1987.
-Rule	Winn	1987	max	-	Oct	lastSun	2:00s	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Winnipeg	-6:28:36 -	LMT	1887 Jul 16
-			-6:00	Winn	C%sT
-
-
-# Saskatchewan
-
-# From Mark Brader (2003-07-26):
-# The first actual adoption of DST in Canada was at the municipal
-# level.  As the [Toronto] Star put it (1912-06-07), "While people
-# elsewhere have long been talking of legislation to save daylight,
-# the city of Moose Jaw [Saskatchewan] has acted on its own hook."
-# DST in Moose Jaw began on Saturday, 1912-06-01 (no time mentioned:
-# presumably late evening, as below), and would run until "the end of
-# the summer".  The discrepancy between municipal time and railroad
-# time was noted.
-
-# From Paul Eggert (2003-07-27):
-# Willett (1914-03) notes that DST "has been in operation ... in the
-# City of Moose Jaw, Saskatchewan, for one year."
-
-# From Paul Eggert (2000-10-02):
-# Shanks writes that since 1970 most of this region has been like Regina.
-# Some western towns (e.g. Swift Current) switched from MST/MDT to CST in 1972.
-# Other western towns (e.g. Lloydminster) are like Edmonton.
-# Matthews and Vincent (1998) write that Denare Beach and Creighton
-# are like Winnipeg, in violation of Saskatchewan law.
-
-# From W. Jones (1992-11-06):
-# The. . .below is based on information I got from our law library, the
-# provincial archives, and the provincial Community Services department.
-# A precise history would require digging through newspaper archives, and
-# since you didn't say what you wanted, I didn't bother.
-#
-# Saskatchewan is split by a time zone meridian (105W) and over the years
-# the boundary became pretty ragged as communities near it reevaluated
-# their affiliations in one direction or the other.  In 1965 a provincial
-# referendum favoured legislating common time practices.
-#
-# On 15 April 1966 the Time Act (c. T-14, Revised Statutes of
-# Saskatchewan 1978) was proclaimed, and established that the eastern
-# part of Saskatchewan would use CST year round, that districts in
-# northwest Saskatchewan would by default follow CST but could opt to
-# follow Mountain Time rules (thus 1 hour difference in the winter and
-# zero in the summer), and that districts in southwest Saskatchewan would
-# by default follow MT but could opt to follow CST.
-#
-# It took a few years for the dust to settle (I know one story of a town
-# on one time zone having its school in another, such that a mom had to
-# serve her family lunch in two shifts), but presently it seems that only
-# a few towns on the border with Alberta (e.g. Lloydminster) follow MT
-# rules any more; all other districts appear to have used CST year round
-# since sometime in the 1960s.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Regina	1918	only	-	Apr	14	2:00	1:00	D
-Rule	Regina	1918	only	-	Oct	31	2:00	0	S
-Rule	Regina	1930	1934	-	May	Sun>=1	0:00	1:00	D
-Rule	Regina	1930	1934	-	Oct	Sun>=1	0:00	0	S
-Rule	Regina	1937	1941	-	Apr	Sun>=8	0:00	1:00	D
-Rule	Regina	1937	only	-	Oct	Sun>=8	0:00	0	S
-Rule	Regina	1938	only	-	Oct	Sun>=1	0:00	0	S
-Rule	Regina	1939	1941	-	Oct	Sun>=8	0:00	0	S
-Rule	Regina	1942	only	-	Feb	 9	2:00	1:00	W # War
-Rule	Regina	1945	only	-	Aug	14	23:00u	1:00	P # Peace
-Rule	Regina	1945	only	-	Sep	lastSun	2:00	0	S
-Rule	Regina	1946	only	-	Apr	Sun>=8	2:00	1:00	D
-Rule	Regina	1946	only	-	Oct	Sun>=8	2:00	0	S
-Rule	Regina	1947	1957	-	Apr	lastSun	2:00	1:00	D
-Rule	Regina	1947	1957	-	Sep	lastSun	2:00	0	S
-Rule	Regina	1959	only	-	Apr	lastSun	2:00	1:00	D
-Rule	Regina	1959	only	-	Oct	lastSun	2:00	0	S
-#
-Rule	Swift	1957	only	-	Apr	lastSun	2:00	1:00	D
-Rule	Swift	1957	only	-	Oct	lastSun	2:00	0	S
-Rule	Swift	1959	1961	-	Apr	lastSun	2:00	1:00	D
-Rule	Swift	1959	only	-	Oct	lastSun	2:00	0	S
-Rule	Swift	1960	1961	-	Sep	lastSun	2:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Regina	-6:58:36 -	LMT	1905 Sep
-			-7:00	Regina	M%sT	1960 Apr lastSun 2:00
-			-6:00	-	CST
-Zone America/Swift_Current -7:11:20 -	LMT	1905 Sep
-			-7:00	Canada	M%sT	1946 Apr lastSun 2:00
-			-7:00	Regina	M%sT	1950
-			-7:00	Swift	M%sT	1972 Apr lastSun 2:00
-			-6:00	-	CST
-
-
-# Alberta
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Edm	1918	1919	-	Apr	Sun>=8	2:00	1:00	D
-Rule	Edm	1918	only	-	Oct	31	2:00	0	S
-Rule	Edm	1919	only	-	May	27	2:00	0	S
-Rule	Edm	1920	1923	-	Apr	lastSun	2:00	1:00	D
-Rule	Edm	1920	only	-	Oct	lastSun	2:00	0	S
-Rule	Edm	1921	1923	-	Sep	lastSun	2:00	0	S
-Rule	Edm	1942	only	-	Feb	 9	2:00	1:00	W # War
-Rule	Edm	1945	only	-	Aug	14	23:00u	1:00	P # Peace
-Rule	Edm	1945	only	-	Sep	lastSun	2:00	0	S
-Rule	Edm	1947	only	-	Apr	lastSun	2:00	1:00	D
-Rule	Edm	1947	only	-	Sep	lastSun	2:00	0	S
-Rule	Edm	1967	only	-	Apr	lastSun	2:00	1:00	D
-Rule	Edm	1967	only	-	Oct	lastSun	2:00	0	S
-Rule	Edm	1969	only	-	Apr	lastSun	2:00	1:00	D
-Rule	Edm	1969	only	-	Oct	lastSun	2:00	0	S
-Rule	Edm	1972	1986	-	Apr	lastSun	2:00	1:00	D
-Rule	Edm	1972	max	-	Oct	lastSun	2:00	0	S
-Rule	Edm	1987	max	-	Apr	Sun>=1	2:00	1:00	D
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Edmonton	-7:33:52 -	LMT	1906 Sep
-			-7:00	Edm	M%sT
-
-
-# British Columbia
-
-# From Paul Eggert (2000-10-02):
-# Shanks writes that since 1970 most of this region has been like Vancouver.
-# Dawson Creek uses MST.  Much of east BC is like Edmonton.
-# Matthews and Vincent (1998) write that Creston is like Dawson Creek.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Vanc	1918	only	-	Apr	14	2:00	1:00	D
-Rule	Vanc	1918	only	-	Oct	31	2:00	0	S
-Rule	Vanc	1942	only	-	Feb	 9	2:00	1:00	W # War
-Rule	Vanc	1945	only	-	Aug	14	23:00u	1:00	P # Peace
-Rule	Vanc	1945	only	-	Sep	30	2:00	0	S
-Rule	Vanc	1946	1986	-	Apr	lastSun	2:00	1:00	D
-Rule	Vanc	1946	only	-	Oct	13	2:00	0	S
-Rule	Vanc	1947	1961	-	Sep	lastSun	2:00	0	S
-Rule	Vanc	1962	max	-	Oct	lastSun	2:00	0	S
-Rule	Vanc	1987	max	-	Apr	Sun>=1	2:00	1:00	D
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Vancouver	-8:12:28 -	LMT	1884
-			-8:00	Vanc	P%sT
-Zone America/Dawson_Creek -8:00:56 -	LMT	1884
-			-8:00	Canada	P%sT	1947
-			-8:00	Vanc	P%sT	1972 Aug 30 2:00
-			-7:00	-	MST
-
-
-# Northwest Territories, Nunavut, Yukon
-
-# From Paul Eggert (1999-10-29):
-# Dawson switched to PST in 1973.  Inuvik switched to MST in 1979.
-# Mathew Englander (1996-10-07) gives the following refs:
-#	* 1967. Paragraph 28(34)(g) of the Interpretation Act, S.C. 1967-68,
-#	c. 7 defines Yukon standard time as UTC-9.  This is still valid;
-#	see Interpretation Act, R.S.C. 1985, c. I-21, s. 35(1).
-#	* C.O. 1973/214 switched Yukon to PST on 1973-10-28 00:00.
-#	* O.I.C. 1980/02 established DST.
-#	* O.I.C. 1987/056 changed DST to Apr firstSun 2:00 to Oct lastSun 2:00.
-# Shanks says Yukon's 1973-10-28 switch was at 2:00; go with Englander.
-
-# From Rives McDow (1999-09-04):
-# Nunavut ... moved ... to incorporate the whole territory into one time zone.
-# <a href="http://www.nunatsiaq.com/nunavut/nvt90903_13.html">
-# Nunavut moves to single time zone Oct. 31
-# </a>
-#
-# From Antoine Leca (1999-09-06):
-# We then need to create a new timezone for the Kitikmeot region of Nunavut
-# to differentiate it from the Yellowknife region.
-
-# From Paul Eggert (1999-09-20):
-# <a href="http://www.nunavut.com/basicfacts/english/basicfacts_1territory.html">
-# Basic Facts: The New Territory
-# </a> (1999) reports that Pangnirtung operates on eastern time,
-# and that Coral Harbour does not observe DST.  We don't know when
-# Pangnirtung switched to eastern time; we'll guess 1995.
-
-# From Rives McDow (1999-11-08):
-# On October 31, when the rest of Nunavut went to Central time,
-# Pangnirtung wobbled.  Here is the result of their wobble:
-#
-# The following businesses and organizations in Pangnirtung use Central Time:
-#
-#	First Air, Power Corp, Nunavut Construction, Health Center, RCMP,
-#	Eastern Arctic National Parks, A & D Specialist
-#
-# The following businesses and organizations in Pangnirtung use Eastern Time:
-#
-#	Hamlet office, All other businesses, Both schools, Airport operator
-#
-# This has made for an interesting situation there, which warranted the news.
-# No one there that I spoke with seems concerned, or has plans to
-# change the local methods of keeping time, as it evidently does not
-# really interfere with any activities or make things difficult locally.
-# They plan to celebrate New Year's turn-over twice, one hour apart,
-# so it appears that the situation will last at least that long.
-# The Nunavut Intergovernmental Affairs hopes that they will "come to
-# their senses", but the locals evidently don't see any problem with
-# the current state of affairs.
-
-# From Michaela Rodrigue, writing in the
-# <a href="http://www.nunatsiaq.com/archives/nunavut991130/nvt91119_17.html">
-# Nunatsiaq News (1999-11-19)</a>:
-# Clyde River, Pangnirtung and Sanikiluaq now operate with two time zones,
-# central - or Nunavut time - for government offices, and eastern time
-# for municipal offices and schools....  Igloolik [was similar but then]
-# made the switch to central time on Saturday, Nov. 6.
-
-# From Paul Eggert (2000-10-02):
-# Matthews and Vincent (1998) say the following, but we lack histories
-# for these potential new Zones.
-#
-# The Canadian Forces station at Alert uses Eastern Time while the
-# handful of residents at the Eureka weather station [in the Central
-# zone] skip daylight savings.  Baffin Island, which is crossed by the
-# Central, Eastern and Atlantic Time zones only uses Eastern Time.
-# Gjoa Haven, Taloyoak and Pelly Bay all use Mountain instead of
-# Central Time and Southampton Island [in the Central zone] is not
-# required to use daylight savings.
-
-# From
-# <a href="http://www.nunatsiaq.com/archives/nunavut001130/nvt21110_02.html">
-# Nunavut now has two time zones
-# </a> (2000-11-10):
-# The Nunavut government would allow its employees in Kugluktuk and
-# Cambridge Bay to operate on central time year-round, putting them
-# one hour behind the rest of Nunavut for six months during the winter.
-# At the end of October the two communities had rebelled against
-# Nunavut's unified time zone, refusing to shift to eastern time with
-# the rest of the territory for the winter.  Cambridge Bay remained on
-# central time, while Kugluktuk, even farther west, reverted to
-# mountain time, which they had used before the advent of Nunavut's
-# unified time zone in 1999.
-#
-# From Rives McDow (2001-01-20), quoting the Nunavut government:
-# The preceding decision came into effect at midnight, Saturday Nov 4, 2000.
-
-# From Paul Eggert (2000-12-04):
-# Let's just keep track of the official times for now.
-
-# From Rives McDow (2001-03-07):
-# The premier of Nunavut has issued a ministerial statement advising
-# that effective 2001-04-01, the territory of Nunavut will revert
-# back to three time zones (mountain, central, and eastern).  Of the
-# cities in Nunavut, Coral Harbor is the only one that I know of that
-# has said it will not observe dst, staying on EST year round.  I'm
-# checking for more info, and will get back to you if I come up with
-# more.
-# [Also see <http://www.nunatsiaq.com/nunavut/nvt10309_06.html> (2001-03-09).]
-
-# From Gwillim Law (2005-05-21):
-# According to maps at
-# http://inms-ienm.nrc-cnrc.gc.ca/images/time_services/TZ01SWE.jpg
-# http://inms-ienm.nrc-cnrc.gc.ca/images/time_services/TZ01SSE.jpg
-# (both dated 2003), and
-# http://www.canadiangeographic.ca/Magazine/SO98/geomap.asp
-# (from a 1998 Canadian Geographic article), the de facto and de jure time
-# for Southampton Island (at the north end of Hudson Bay) is UTC-5 all year
-# round.  Using Google, it's easy to find other websites that confirm this.
-# I wasn't able to find how far back this time regimen goes, but since it
-# predates the creation of Nunavut, it probably goes back many years....
-# The Inuktitut name of Coral Harbour is Sallit, but it's rarely used.
-#
-# From Paul Eggert (2005-07-26):
-# For lack of better information, assume that Southampton Island observed
-# daylight saving only during wartime.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	NT_YK	1918	only	-	Apr	14	2:00	1:00	D
-Rule	NT_YK	1918	only	-	Oct	27	2:00	0	S
-Rule	NT_YK	1919	only	-	May	25	2:00	1:00	D
-Rule	NT_YK	1919	only	-	Nov	 1	0:00	0	S
-Rule	NT_YK	1942	only	-	Feb	 9	2:00	1:00	W # War
-Rule	NT_YK	1945	only	-	Aug	14	23:00u	1:00	P # Peace
-Rule	NT_YK	1945	only	-	Sep	30	2:00	0	S
-Rule	NT_YK	1965	only	-	Apr	lastSun	0:00	2:00	DD
-Rule	NT_YK	1965	only	-	Oct	lastSun	2:00	0	S
-Rule	NT_YK	1980	1986	-	Apr	lastSun	2:00	1:00	D
-Rule	NT_YK	1980	max	-	Oct	lastSun	2:00	0	S
-Rule	NT_YK	1987	max	-	Apr	Sun>=1	2:00	1:00	D
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Pangnirtung -4:22:56 -	LMT	1884
-			-4:00	NT_YK	A%sT	1995 Apr Sun>=1 2:00
-			-5:00	Canada	E%sT	1999 Oct 31 2:00
-			-6:00	Canada	C%sT	2000 Oct 29 2:00
-			-5:00	Canada	E%sT
-Zone America/Iqaluit	-4:33:52 -	LMT	1884 # Frobisher Bay before 1987
-			-5:00	NT_YK	E%sT	1999 Oct 31 2:00
-			-6:00	Canada	C%sT	2000 Oct 29 2:00
-			-5:00	Canada	E%sT
-Zone America/Coral_Harbour -5:32:40 -	LMT	1884
-			-5:00	NT_YK	E%sT	1946
-			-5:00	-	EST
-Zone America/Rankin_Inlet -6:08:40 -	LMT	1884
-			-6:00	NT_YK	C%sT	2000 Oct 29 2:00
-			-5:00	-	EST	2001 Apr  1 3:00
-			-6:00	Canada	C%sT
-Zone America/Cambridge_Bay -7:00:20 -	LMT	1884
-			-7:00	NT_YK	M%sT	1999 Oct 31 2:00
-			-6:00	Canada	C%sT	2000 Oct 29 2:00
-			-5:00	-	EST	2000 Nov  5 0:00
-			-6:00	-	CST	2001 Apr  1 3:00
-			-7:00	Canada	M%sT
-Zone America/Yellowknife -7:37:24 -	LMT	1884
-			-7:00	NT_YK	M%sT
-Zone America/Inuvik	-8:54:00 -	LMT	1884
-			-8:00	NT_YK	P%sT	1979 Apr lastSun 2:00
-			-7:00	NT_YK	M%sT
-Zone America/Whitehorse	-9:00:12 -	LMT	1900 Aug 20
-			-9:00	NT_YK	Y%sT	1966 Jul 1 2:00
-			-8:00	NT_YK	P%sT
-Zone America/Dawson	-9:17:40 -	LMT	1900 Aug 20
-			-9:00	NT_YK	Y%sT	1973 Oct 28 0:00
-			-8:00	NT_YK	P%sT
-
-
-###############################################################################
-
-# Mexico
-
-# From Paul Eggert (2001-03-05):
-# The Investigation and Analysis Service of the
-# Mexican Library of Congress (MLoC) has published a
-# <a href="http://www.cddhcu.gob.mx/bibliot/publica/inveyana/polisoc/horver/">
-# history of Mexican local time (in Spanish)
-# </a>.
-#
-# Here are the discrepancies between Shanks and the MLoC.
-# (In all cases we go with the MLoC.)
-# Shanks reports that Baja was at -8:00 in 1922/1923.
-# Shanks says the 1930 transition in Baja was 1930-11-16.
-# Shanks reports no DST during summer 1931.
-# Shanks reports a transition at 1932-03-30 23:00, not 1932-04-01.
-# Shanks does not report transitions for Baja in 1945 or 1948.
-# Shanks reports southern Mexico transitions on 1981-12-01, not 12-23.
-# Shanks says Quintana Roo switched to -6:00 on 1982-12-02, and to -5:00
-# on 1997-10-26 at 02:00.
-
-# From Gwillim Law (2001-02-20):
-# There are some other discrepancies between the Decrees page and the
-# tz database.  I think they can best be explained by supposing that
-# the researchers who prepared the Decrees page failed to find some of
-# the relevant documents.
-
-# From Paul Eggert (2000-07-26):
-# Shanks gives 1942-04-01 instead of 1942-04-24, and omits the 1981
-# and 1988 DST experiments.  Go with spin.com.mx.
-
-# From Alan Perry (1996-02-15):
-# A guy from our Mexico subsidiary finally found the Presidential Decree
-# outlining the timezone changes in Mexico.
-#
-# ------------- Begin Forwarded Message -------------
-#
-# I finally got my hands on the Official Presidential Decree that sets up the
-# rules for the DST changes. The rules are:
-#
-# 1. The country is divided in 3 timezones:
-#    - Baja California Norte (the Mexico/BajaNorte TZ)
-#    - Baja California Sur, Nayarit, Sinaloa and Sonora (the Mexico/BajaSur TZ)
-#    - The rest of the country (the Mexico/General TZ)
-#
-# 2. From the first Sunday in April at 2:00 AM to the last Sunday in October
-#    at 2:00 AM, the times in each zone are as follows:
-#    BajaNorte: GMT+7
-#    BajaSur:   GMT+6
-#    General:   GMT+5
-#
-# 3. The rest of the year, the times are as follows:
-#    BajaNorte: GMT+8
-#    BajaSur:   GMT+7
-#    General:   GMT+6
-#
-# The Decree was published in Mexico's Official Newspaper on January 4th.
-#
-# -------------- End Forwarded Message --------------
-# From Paul Eggert (1996-06-12):
-# For an English translation of the decree, see
-# <a href="http://mexico-travel.com/extra/timezone_eng.html">
-# ``Diario Oficial: Time Zone Changeover'' (1996-01-04).
-# </a>
-
-# From Rives McDow (1998-10-08):
-# The State of Quintana Roo has reverted back to central STD and DST times
-# (i.e. UTC -0600 and -0500 as of 1998-08-02).
-
-# From Rives McDow (2000-01-10):
-# Effective April 4, 1999 at 2:00 AM local time, Sonora changed to the time
-# zone 5 hours from the International Date Line, and will not observe daylight
-# savings time so as to stay on the same time zone as the southern part of
-# Arizona year round.
-
-# From Jesper Norgaard, translating
-# <http://www.reforma.com/nacional/articulo/064327/> (2001-01-17):
-# In Oaxaca, the 55.000 teachers from the Section 22 of the National
-# Syndicate of Education Workers, refuse to apply daylight saving each
-# year, so that the more than 10,000 schools work at normal hour the
-# whole year.
-
-# From Gwillim Law (2001-01-19):
-# <http://www.reforma.com/negocios_y_dinero/articulo/064481/> ... says
-# (translated):...
-# January 17, 2000 - The Energy Secretary, Ernesto Martens, announced
-# that Summer Time will be reduced from seven to five months, starting
-# this year....
-# <http://www.publico.com.mx/scripts/texto3.asp?action=pagina&pag=21&pos=p&secc=naci&date=01/17/2001>
-# [translated], says "summer time will ... take effect on the first Sunday
-# in May, and end on the last Sunday of September.
-
-# From Arthur David Olson (2001-01-25):
-# The 2001-01-24 traditional Washington Post contained the page one
-# story "Timely Issue Divides Mexicans."...
-# http://www.washingtonpost.com/wp-dyn/articles/A37383-2001Jan23.html
-# ... Mexico City Mayor Lopez Obrador "...is threatening to keep
-# Mexico City and its 20 million residents on a different time than
-# the rest of the country..." In particular, Lopez Obrador would abolish
-# observation of Daylight Saving Time.
-
-# <a href="http://www.conae.gob.mx/ahorro/decretohorver2001.html#decre">
-# Official statute published by the Energy Department
-# </a> (2001-02-01) shows Baja and Chihauhua as still using US DST rules,
-# and Sonora with no DST.  This was reported by Jesper Norgaard (2001-02-03).
-
-# From Paul Eggert (2001-03-03):
-#
-# <a href="http://www.latimes.com/news/nation/20010303/t000018766.html">
-# James F. Smith writes in today's LA Times
-# </a>
-# * Sonora will continue to observe standard time.
-# * Last week Mexico City's mayor Andres Manuel Lopez Obrador decreed that
-#   the Federal District will not adopt DST.
-# * 4 of 16 district leaders announced they'll ignore the decree.
-# * The decree does not affect federal-controlled facilities including
-#   the airport, banks, hospitals, and schools.
-#
-# For now we'll assume that the Federal District will bow to federal rules.
-
-# From Jesper Norgaard (2001-04-01):
-# I found some references to the Mexican application of daylight
-# saving, which modifies what I had already sent you, stating earlier
-# that a number of northern Mexican states would go on daylight
-# saving. The modification reverts this to only cover Baja California
-# (Norte), while all other states (except Sonora, who has no daylight
-# saving all year) will follow the original decree of president
-# Vicente Fox, starting daylight saving May 6, 2001 and ending
-# September 30, 2001.
-# References: "Diario de Monterrey" <www.diariodemonterrey.com/index.asp>
-# Palabra <http://palabra.infosel.com/010331/primera/ppri3101.pdf> (2001-03-31)
-
-# From Reuters (2001-09-04):
-# Mexico's Supreme Court on Tuesday declared that daylight savings was
-# unconstitutional in Mexico City, creating the possibility the
-# capital will be in a different time zone from the rest of the nation
-# next year....  The Supreme Court's ruling takes effect at 2:00
-# a.m. (0800 GMT) on Sept. 30, when Mexico is scheduled to revert to
-# standard time. "This is so residents of the Federal District are not
-# subject to unexpected time changes," a statement from the court said.
-
-# From Jesper Norgaard Welen (2002-03-12):
-# ... consulting my local grocery store(!) and my coworkers, they all insisted
-# that a new decision had been made to reinstate US style DST in Mexico....
-# http://www.conae.gob.mx/ahorro/horaver2001_m1_2002.html (2002-02-20)
-# confirms this.  Sonora as usual is the only state where DST is not applied.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Mexico	1939	only	-	Feb	5	0:00	1:00	D
-Rule	Mexico	1939	only	-	Jun	25	0:00	0	S
-Rule	Mexico	1940	only	-	Dec	9	0:00	1:00	D
-Rule	Mexico	1941	only	-	Apr	1	0:00	0	S
-Rule	Mexico	1943	only	-	Dec	16	0:00	1:00	W # War
-Rule	Mexico	1944	only	-	May	1	0:00	0	S
-Rule	Mexico	1950	only	-	Feb	12	0:00	1:00	D
-Rule	Mexico	1950	only	-	Jul	30	0:00	0	S
-Rule	Mexico	1996	2000	-	Apr	Sun>=1	2:00	1:00	D
-Rule	Mexico	1996	2000	-	Oct	lastSun	2:00	0	S
-Rule	Mexico	2001	only	-	May	Sun>=1	2:00	1:00	D
-Rule	Mexico	2001	only	-	Sep	lastSun	2:00	0	S
-Rule	Mexico	2002	max	-	Apr	Sun>=1	2:00	1:00	D
-Rule	Mexico	2002	max	-	Oct	lastSun	2:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-# Quintana Roo
-Zone America/Cancun	-5:47:04 -	LMT	1922 Jan  1  0:12:56
-			-6:00	-	CST	1981 Dec 23
-			-5:00	Mexico	E%sT	1998 Aug  2  2:00
-			-6:00	Mexico	C%sT
-# Campeche, Yucatan
-Zone America/Merida	-5:58:28 -	LMT	1922 Jan  1  0:01:32
-			-6:00	-	CST	1981 Dec 23
-			-5:00	-	EST	1982 Dec  2
-			-6:00	Mexico	C%sT
-# Coahuila, Durango, Nuevo Leon, Tamaulipas
-Zone America/Monterrey	-6:41:16 -	LMT	1921 Dec 31 23:18:44
-			-6:00	-	CST	1988
-			-6:00	US	C%sT	1989
-			-6:00	Mexico	C%sT
-# Central Mexico
-Zone America/Mexico_City -6:36:36 -	LMT	1922 Jan  1  0:23:24
-			-7:00	-	MST	1927 Jun 10 23:00
-			-6:00	-	CST	1930 Nov 15
-			-7:00	-	MST	1931 May  1 23:00
-			-6:00	-	CST	1931 Oct
-			-7:00	-	MST	1932 Apr  1
-			-6:00	Mexico	C%sT	2001 Sep 30 02:00
-			-6:00	-	CST	2002 Feb 20
-			-6:00	Mexico	C%sT
-# Chihuahua
-Zone America/Chihuahua	-7:04:20 -	LMT	1921 Dec 31 23:55:40
-			-7:00	-	MST	1927 Jun 10 23:00
-			-6:00	-	CST	1930 Nov 15
-			-7:00	-	MST	1931 May  1 23:00
-			-6:00	-	CST	1931 Oct
-			-7:00	-	MST	1932 Apr  1
-			-6:00	-	CST	1996
-			-6:00	Mexico	C%sT	1998
-			-6:00	-	CST	1998 Apr Sun>=1 3:00
-			-7:00	Mexico	M%sT
-# Sonora
-Zone America/Hermosillo	-7:23:52 -	LMT	1921 Dec 31 23:36:08
-			-7:00	-	MST	1927 Jun 10 23:00
-			-6:00	-	CST	1930 Nov 15
-			-7:00	-	MST	1931 May  1 23:00
-			-6:00	-	CST	1931 Oct
-			-7:00	-	MST	1932 Apr  1
-			-6:00	-	CST	1942 Apr 24
-			-7:00	-	MST	1949 Jan 14
-			-8:00	-	PST	1970
-			-7:00	Mexico	M%sT	1999
-			-7:00	-	MST
-# Baja California Sur, Nayarit, Sinaloa
-Zone America/Mazatlan	-7:05:40 -	LMT	1921 Dec 31 23:54:20
-			-7:00	-	MST	1927 Jun 10 23:00
-			-6:00	-	CST	1930 Nov 15
-			-7:00	-	MST	1931 May  1 23:00
-			-6:00	-	CST	1931 Oct
-			-7:00	-	MST	1932 Apr  1
-			-6:00	-	CST	1942 Apr 24
-			-7:00	-	MST	1949 Jan 14
-			-8:00	-	PST	1970
-			-7:00	Mexico	M%sT
-# Baja California
-Zone America/Tijuana	-7:48:04 -	LMT	1922 Jan  1  0:11:56
-			-7:00	-	MST	1924
-			-8:00	-	PST	1927 Jun 10 23:00
-			-7:00	-	MST	1930 Nov 15
-			-8:00	-	PST	1931 Apr  1
-			-8:00	1:00	PDT	1931 Sep 30
-			-8:00	-	PST	1942 Apr 24
-			-8:00	1:00	PWT	1945 Nov 12
-			-8:00	-	PST	1948 Apr  5
-			-8:00	1:00	PDT	1949 Jan 14
-			-8:00	-	PST	1954
-			-8:00	CA	P%sT	1961
-			-8:00	-	PST	1976
-			-8:00	US	P%sT	1996
-			-8:00	Mexico	P%sT	2001
-			-8:00	US	P%sT	2002 Feb 20
-			-8:00	Mexico	P%sT
-# From Paul Eggert (2001-03-05):
-# Formerly there was an America/Ensenada zone, which differed from
-# America/Tijuana only in that it did not observe DST from 1976
-# through 1995.  This was as per Shanks.  However, Guy Harris reports
-# that the 1987 OAG says "Only Ensenada, Mexicale, San Felipe and
-# Tijuana observe DST," which contradicts Shanks but does imply that
-# DST-observance was a town-by-town matter back then.  This concerns
-# data after 1970 so most likely there should be at least one Zone
-# other than America/Tijuana for Baja, but it's not clear yet what its
-# name or contents should be.
-#
-# Revillagigedo Is
-# no information
-
-###############################################################################
-
-# Anguilla
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Anguilla	-4:12:16 -	LMT	1912 Mar 2
-			-4:00	-	AST
-
-# Antigua and Barbuda
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Antigua	-4:07:12 -	LMT	1912 Mar 2
-			-5:00	-	EST	1951
-			-4:00	-	AST
-
-# Bahamas
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Bahamas	1964	max	-	Oct	lastSun	2:00	0	S
-Rule	Bahamas	1964	1986	-	Apr	lastSun	2:00	1:00	D
-Rule	Bahamas	1987	max	-	Apr	Sun>=1	2:00	1:00	D
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Nassau	-5:09:24 -	LMT	1912 Mar 2
-			-5:00	Bahamas	E%sT
-
-# Barbados
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Barb	1977	only	-	Jun	12	2:00	1:00	D
-Rule	Barb	1977	1978	-	Oct	Sun>=1	2:00	0	S
-Rule	Barb	1978	1980	-	Apr	Sun>=15	2:00	1:00	D
-Rule	Barb	1979	only	-	Sep	30	2:00	0	S
-Rule	Barb	1980	only	-	Sep	25	2:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Barbados	-3:58:28 -	LMT	1924		# Bridgetown
-			-3:58:28 -	BMT	1932	  # Bridgetown Mean Time
-			-4:00	Barb	A%sT
-
-# Belize
-# Whitman entirely disagrees with Shanks; go with Shanks.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Belize	1918	1942	-	Oct	Sun>=2	0:00	0:30	HD
-Rule	Belize	1919	1943	-	Feb	Sun>=9	0:00	0	S
-Rule	Belize	1973	only	-	Dec	 5	0:00	1:00	D
-Rule	Belize	1974	only	-	Feb	 9	0:00	0	S
-Rule	Belize	1982	only	-	Dec	18	0:00	1:00	D
-Rule	Belize	1983	only	-	Feb	12	0:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Belize	-5:52:48 -	LMT	1912 Apr
-			-6:00	Belize	C%sT
-
-# Bermuda
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Atlantic/Bermuda	-4:19:04 -	LMT	1930 Jan  1 2:00    # Hamilton
-			-4:00	-	AST	1974 Apr 28 2:00
-			-4:00	Bahamas	A%sT
-
-# Cayman Is
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Cayman	-5:25:32 -	LMT	1890		# Georgetown
-			-5:07:12 -	KMT	1912 Feb    # Kingston Mean Time
-			-5:00	-	EST
-
-# Costa Rica
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	CR	1979	1980	-	Feb	lastSun	0:00	1:00	D
-Rule	CR	1979	1980	-	Jun	Sun>=1	0:00	0	S
-Rule	CR	1991	1992	-	Jan	Sat>=15	0:00	1:00	D
-# IATA SSIM (1991-09) says the following was at 1:00; go with Shanks.
-Rule	CR	1991	only	-	Jul	 1	0:00	0	S
-Rule	CR	1992	only	-	Mar	15	0:00	0	S
-# There are too many San Joses elsewhere, so we'll use `Costa Rica'.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Costa_Rica	-5:36:20 -	LMT	1890		# San Jose
-			-5:36:20 -	SJMT	1921 Jan 15 # San Jose Mean Time
-			-6:00	CR	C%sT
-# Coco
-# no information; probably like America/Costa_Rica
-
-# Cuba
-
-# From Arthur David Olson (1999-03-29):
-# The 1999-03-28 exhibition baseball game held in Havana, Cuba, between
-# the Cuban National Team and the Baltimore Orioles was carried live on
-# the Orioles Radio Network, including affiliate WTOP in Washington, DC.
-# During the game, play-by-play announcer Jim Hunter noted that
-# "We'll be losing two hours of sleep...Cuba switched to Daylight Saving
-# Time today."  (The "two hour" remark referred to losing one hour of
-# sleep on 1999-03-28--when the announcers were in Cuba as it switched
-# to DST--and one more hour on 1999-04-04--when the announcers will have
-# returned to Baltimore, which switches on that date.)
-
-# From Evert van der Veer via Steffen Thorsen (2004-10-28):
-# Cuba is not going back to standard time this year.
-# From Paul Eggert (2004-10-28):
-# http://www.granma.cu/ingles/2004/septiembre/juev30/41medid-i.html
-# says that it's due to a problem at the Antonio Guiteras
-# thermoelectric plant, and says "This October there will be no return
-# to normal hours (after daylight saving time)".
-# For now, let's assume that it's a one-year temporary measure.
-
-# From Carlos A. Carnero Delgado (2005-11-12):
-# This year (just like in 2004-2005) there's no change in time zone
-# adjustment in Cuba.  We will stay in daylight saving time:
-# http://www.granma.cu/espanol/2005/noviembre/mier9/horario.html
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Cuba	1928	only	-	Jun	10	0:00	1:00	D
-Rule	Cuba	1928	only	-	Oct	10	0:00	0	S
-Rule	Cuba	1940	1942	-	Jun	Sun>=1	0:00	1:00	D
-Rule	Cuba	1940	1942	-	Sep	Sun>=1	0:00	0	S
-Rule	Cuba	1945	1946	-	Jun	Sun>=1	0:00	1:00	D
-Rule	Cuba	1945	1946	-	Sep	Sun>=1	0:00	0	S
-Rule	Cuba	1965	only	-	Jun	1	0:00	1:00	D
-Rule	Cuba	1965	only	-	Sep	30	0:00	0	S
-Rule	Cuba	1966	only	-	May	29	0:00	1:00	D
-Rule	Cuba	1966	only	-	Oct	2	0:00	0	S
-Rule	Cuba	1967	only	-	Apr	8	0:00	1:00	D
-Rule	Cuba	1967	1968	-	Sep	Sun>=8	0:00	0	S
-Rule	Cuba	1968	only	-	Apr	14	0:00	1:00	D
-Rule	Cuba	1969	1977	-	Apr	lastSun	0:00	1:00	D
-Rule	Cuba	1969	1971	-	Oct	lastSun	0:00	0	S
-Rule	Cuba	1972	1974	-	Oct	8	0:00	0	S
-Rule	Cuba	1975	1977	-	Oct	lastSun	0:00	0	S
-Rule	Cuba	1978	only	-	May	7	0:00	1:00	D
-Rule	Cuba	1978	1990	-	Oct	Sun>=8	0:00	0	S
-Rule	Cuba	1979	1980	-	Mar	Sun>=15	0:00	1:00	D
-Rule	Cuba	1981	1985	-	May	Sun>=5	0:00	1:00	D
-Rule	Cuba	1986	1989	-	Mar	Sun>=14	0:00	1:00	D
-Rule	Cuba	1990	1997	-	Apr	Sun>=1	0:00	1:00	D
-Rule	Cuba	1991	1995	-	Oct	Sun>=8	0:00s	0	S
-Rule	Cuba	1996	only	-	Oct	 6	0:00s	0	S
-Rule	Cuba	1997	only	-	Oct	12	0:00s	0	S
-Rule	Cuba	1998	1999	-	Mar	lastSun	0:00s	1:00	D
-Rule	Cuba	1998	2003	-	Oct	lastSun	0:00s	0	S
-Rule	Cuba	2000	max	-	Apr	Sun>=1	0:00s	1:00	D
-Rule	Cuba	2006	max	-	Oct	lastSun	0:00s	0	S
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Havana	-5:29:28 -	LMT	1890
-			-5:29:36 -	HMT	1925 Jul 19 12:00 # Havana MT
-			-5:00	Cuba	C%sT
-
-# Dominica
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Dominica	-4:05:36 -	LMT	1911 Jul 1 0:01		# Roseau
-			-4:00	-	AST
-
-# Dominican Republic
-
-# From Steffen Thorsen (2000-10-30):
-# Enrique Morales reported to me that the Dominican Republic has changed the
-# time zone to Eastern Standard Time as of Sunday 29 at 2 am....
-# http://www.listin.com.do/antes/261000/republica/princi.html
-
-# From Paul Eggert (2000-12-04):
-# That URL (2000-10-26, in Spanish) says they planned to use US-style DST.
-
-# From Rives McDow (2000-12-01):
-# Dominican Republic changed its mind and presidential decree on Tuesday,
-# November 28, 2000, with a new decree.  On Sunday, December 3 at 1:00 AM the
-# Dominican Republic will be reverting to 8 hours from the International Date
-# Line, and will not be using DST in the foreseeable future.  The reason they
-# decided to use DST was to be in synch with Puerto Rico, who was also going
-# to implement DST.  When Puerto Rico didn't implement DST, the president
-# decided to revert.
-
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	DR	1966	only	-	Oct	30	0:00	1:00	D
-Rule	DR	1967	only	-	Feb	28	0:00	0	S
-Rule	DR	1969	1973	-	Oct	lastSun	0:00	0:30	HD
-Rule	DR	1970	only	-	Feb	21	0:00	0	S
-Rule	DR	1971	only	-	Jan	20	0:00	0	S
-Rule	DR	1972	1974	-	Jan	21	0:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Santo_Domingo -4:39:36 -	LMT	1890
-			-4:40	-	SDMT	1933 Apr  1 12:00 # S. Dom. MT
-			-5:00	DR	E%sT	1974 Oct 27
-			-4:00	-	AST	2000 Oct 29 02:00
-			-5:00	US	E%sT	2000 Dec  3 01:00
-			-4:00	-	AST
-
-# El Salvador
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Salv	1987	1988	-	May	Sun>=1	0:00	1:00	D
-Rule	Salv	1987	1988	-	Sep	lastSun	0:00	0	S
-# There are too many San Salvadors elsewhere, so use America/El_Salvador
-# instead of America/San_Salvador.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/El_Salvador -5:56:48 -	LMT	1921		# San Salvador
-			-6:00	Salv	C%sT
-
-# Grenada
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Grenada	-4:07:00 -	LMT	1911 Jul	# St George's
-			-4:00	-	AST
-
-# Guadeloupe
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Guadeloupe	-4:06:08 -	LMT	1911 Jun 8	# Pointe a Pitre
-			-4:00	-	AST
-
-# Guatemala
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Guat	1973	only	-	Nov	25	0:00	1:00	D
-Rule	Guat	1974	only	-	Feb	24	0:00	0	S
-Rule	Guat	1983	only	-	May	21	0:00	1:00	D
-Rule	Guat	1983	only	-	Sep	22	0:00	0	S
-Rule	Guat	1991	only	-	Mar	23	0:00	1:00	D
-Rule	Guat	1991	only	-	Sep	 7	0:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Guatemala	-6:02:04 -	LMT	1918 Oct 5
-			-6:00	Guat	C%sT
-
-# Haiti
-# From Gwillim Law (2005-04-15):
-# Risto O. Nykanen wrote me that Haiti is now on DST.
-# I searched for confirmation, and I found a
-# <a href="http://www.haitianconsulate.org/time.doc"> press release
-# on the Web page of the Haitian Consulate in Chicago (2005-03-31),
-# </a>.  Translated from French, it says:
-#
-#  "The Prime Minister's Communication Office notifies the public in general
-#   and the press in particular that, following a decision of the Interior
-#   Ministry and the Territorial Collectivities [I suppose that means the
-#   provinces], Haiti will move to Eastern Daylight Time in the night from next
-#   Saturday the 2nd to Sunday the 3rd.
-#
-#  "Consequently, the Prime Minister's Communication Office wishes to inform
-#   the population that the country's clocks will be set forward one hour
-#   starting at midnight.  This provision will hold until the last Saturday in
-#   October 2005.
-#
-#  "Port-au-Prince, March 31, 2005"
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Haiti	1983	only	-	May	8	0:00	1:00	D
-Rule	Haiti	1984	1987	-	Apr	lastSun	0:00	1:00	D
-Rule	Haiti	1983	1987	-	Oct	lastSun	0:00	0	S
-# Shanks says AT is 2:00, but IATA SSIM (1991/1997) says 1:00s.  Go with IATA.
-Rule	Haiti	1988	1997	-	Apr	Sun>=1	1:00s	1:00	D
-Rule	Haiti	1988	1997	-	Oct	lastSun	1:00s	0	S
-Rule	Haiti	2005	only	-	Apr	Sun>=1	0:00	1:00	D
-Rule	Haiti	2005	only	-	Oct	lastSun	0:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Port-au-Prince -4:49:20 -	LMT	1890
-			-4:49	-	PPMT	1917 Jan 24 12:00 # P-a-P MT
-			-5:00	Haiti	E%sT
-
-# Honduras
-# Shanks says 1921 Jan 1; go with Whitman's more precise Apr 1.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Tegucigalpa -5:48:52 -	LMT	1921 Apr
-			-6:00	Salv	C%sT
-#
-# Great Swan I ceded by US to Honduras in 1972
-
-# Jamaica
-
-# From Bob Devine (1988-01-28):
-# Follows US rules.
-
-# From U. S. Naval Observatory (1989-01-19):
-# JAMAICA             5 H  BEHIND UTC
-
-# From Shanks:
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Jamaica	-5:07:12 -	LMT	1890		# Kingston
-			-5:07:12 -	KMT	1912 Feb    # Kingston Mean Time
-			-5:00	-	EST	1974 Apr 28 2:00
-			-5:00	US	E%sT	1984
-			-5:00	-	EST
-
-# Martinique
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Martinique	-4:04:20 -      LMT	1890		# Fort-de-France
-			-4:04:20 -	FFMT	1911 May     # Fort-de-France MT
-			-4:00	-	AST	1980 Apr  6
-			-4:00	1:00	ADT	1980 Sep 28
-			-4:00	-	AST
-
-# Montserrat
-# From Paul Eggert (1997-08-31):
-# Recent volcanic eruptions have forced evacuation of Plymouth, the capital.
-# Luckily, Olveston, the current de facto capital, has the same longitude.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Montserrat	-4:08:52 -	LMT	1911 Jul 1 0:01   # Olveston
-			-4:00	-	AST
-
-# Nicaragua
-#
-# From Steffen Thorsen (1998-12-29):
-# Nicaragua seems to be back at -6:00 but I have not been able to find when
-# they changed from -5:00.
-#
-# From Steffen Thorsen (2005-04-12):
-# I've got reports from 8 different people that Nicaragua just started
-# DST on Sunday 2005-04-10, in order to save energy because of
-# expensive petroleum.  The exact end date for DST is not yet
-# announced, only "September" but some sites also say "mid-September".
-# Some background information is available on the President's official site:
-# http://www.presidencia.gob.ni/Presidencia/Files_index/Secretaria/Notas%20de%20Prensa/Presidente/2005/ABRIL/Gobierno-de-nicaragua-adelanta-hora-oficial-06abril.htm
-# The Decree, no 23-2005 is available here:
-# http://www.presidencia.gob.ni/buscador_gaceta/BD/DECRETOS/2005/Decreto%2023-2005%20Se%20adelanta%20en%20una%20hora%20en%20todo%20el%20territorio%20nacional%20apartir%20de%20las%2024horas%20del%2009%20de%20Abril.pdf
-#
-# From Paul Eggert (2005-05-01):
-# The decree doesn't say anything about daylight saving, but for now let's
-# assume that it is daylight saving and that they'll switch back on the
-# 3rd Sunday in September.
-#
-# From Gwillim Law (2005-04-21):
-# The Associated Press story on the time change, which can be found at
-# http://www.lapalmainteractivo.com/guias/content/gen/ap/America_Latina/AMC_GEN_NICARAGUA_HORA.html
-# and elsewhere, says (fifth paragraph, translated from Spanish):  "The last
-# time that a change of clocks was applied to save energy was in the year 2000
-# during the Arnoldo Aleman administration."...
-# The northamerica file says that Nicaragua has been on UTC-6 continuously
-# since December 1998.  I wasn't able to find any details of Nicaraguan time
-# changes in 2000.  Perhaps a note could be added to the northamerica file, to
-# the effect that we have indirect evidence that DST was observed in 2000.
-#
-# From Jesper Norgaard Welen (2005-11-02):
-# Nicaragua left DST the 2005-10-02 at 00:00 (local time).
-# http://www.presidencia.gob.ni/presidencia/files_index/secretaria/comunicados/2005/septiembre/26septiembre-cambio-hora.htm
-# (2005-09-26)
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Nic	1979	1980	-	Mar	Sun>=16	0:00	1:00	D
-Rule	Nic	1979	1980	-	Jun	Mon>=23	0:00	0	S
-Rule	Nic	1992	only	-	Jan	 1	4:00	1:00	D
-Rule	Nic	1992	only	-	Sep	24	0:00	0	S
-Rule	Nic	2005	only	-	Apr	10	0:00	1:00	D
-Rule	Nic	2005	only	-	Oct	 2	0:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Managua	-5:45:08 -	LMT	1890
-			-5:45:12 -	MMT	1934 Jun 23 # Managua Mean Time?
-			-6:00	-	CST	1973 May
-			-5:00	-	EST	1975 Feb 16
-			-6:00	Nic	C%sT	1993 Jan 1 4:00
-			-5:00	-	EST	1998 Dec
-			-6:00	Nic	C%sT
-
-# Panama
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Panama	-5:18:08 -	LMT	1890
-			-5:19:36 -	CMT	1908 Apr 22   # Colon Mean Time
-			-5:00	-	EST
-
-# Puerto Rico
-# There are too many San Juans elsewhere, so we'll use `Puerto_Rico'.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Puerto_Rico -4:24:25 -	LMT	1899 Mar 28 12:00    # San Juan
-			-4:00	-	AST	1942 May  3
-			-4:00	1:00	AWT	1945 Sep 30  2:00
-			-4:00	-	AST
-
-# St Kitts-Nevis
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/St_Kitts	-4:10:52 -	LMT	1912 Mar 2	# Basseterre
-			-4:00	-	AST
-
-# St Lucia
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/St_Lucia	-4:04:00 -	LMT	1890		# Castries
-			-4:04:00 -	CMT	1912	    # Castries Mean Time
-			-4:00	-	AST
-
-# St Pierre and Miquelon
-# There are too many St Pierres elsewhere, so we'll use `Miquelon'.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Miquelon	-3:44:40 -	LMT	1911 May 15	# St Pierre
-			-4:00	-	AST	1980 May
-			-3:00	-	PMST	1987 # Pierre & Miquelon Time
-			-3:00	Canada	PM%sT
-
-# St Vincent and the Grenadines
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/St_Vincent	-4:04:56 -	LMT	1890		# Kingstown
-			-4:04:56 -	KMT	1912	   # Kingstown Mean Time
-			-4:00	-	AST
-
-# Turks and Caicos
-# From Paul Eggert (1998-08-06):
-# Shanks says they use US DST rules, but IATA SSIM (1991/1998)
-# says they switch at midnight.  Go with IATA SSIM.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	TC	1979	1986	-	Apr	lastSun	0:00	1:00	D
-Rule	TC	1979	max	-	Oct	lastSun	0:00	0	S
-Rule	TC	1987	max	-	Apr	Sun>=1	0:00	1:00	D
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Grand_Turk	-4:44:32 -	LMT	1890
-			-5:07:12 -	KMT	1912 Feb    # Kingston Mean Time
-			-5:00	TC	E%sT
-
-# British Virgin Is
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Tortola	-4:18:28 -	LMT	1911 Jul    # Road Town
-			-4:00	-	AST
-
-# Virgin Is
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/St_Thomas	-4:19:44 -	LMT	1911 Jul    # Charlotte Amalie
-			-4:00	-	AST
+# @(#)northamerica	7.87
+# <pre>
+
+# also includes Central America and the Caribbean
+
+# This data is by no means authoritative; if you think you know better,
+# go ahead and edit the file (and please send any changes to
+# tz@elsie.nci.nih.gov for general use in the future).
+
+# From Paul Eggert (1999-03-22):
+# A reliable and entertaining source about time zones is
+# Derek Howse, Greenwich time and longitude, Philip Wilson Publishers (1997).
+
+###############################################################################
+
+# United States
+
+# From Paul Eggert (1999-03-31):
+# Howse writes (pp 121-125) that time zones were invented by
+# Professor Charles Ferdinand Dowd (1825-1904),
+# Principal of Temple Grove Ladies' Seminary (Saratoga Springs, NY).
+# His pamphlet ``A System of National Time for Railroads'' (1870)
+# was the result of his proposals at the Convention of Railroad Trunk Lines
+# in New York City (1869-10).  His 1870 proposal was based on Washington, DC,
+# but in 1872-05 he moved the proposed origin to Greenwich.
+# His proposal was adopted by the railroads on 1883-11-18 at 12:00,
+# and the most of the country soon followed suit.
+
+# From Paul Eggert (2005-04-16):
+# That 1883 transition occurred at 12:00 new time, not at 12:00 old time.
+# See p 46 of David Prerau, Seize the daylight, Thunder's Mouth Press (2005).
+
+# From Paul Eggert (1995-12-19):
+# A good source for time zone historical data in the US is
+# Thomas G. Shanks, The American Atlas (5th edition),
+# San Diego: ACS Publications, Inc. (1991).
+# Make sure you have the errata sheet; the book is somewhat useless without it.
+# It is the source for most of the pre-1991 US and Puerto Rico entries below.
+
+# From Paul Eggert (2001-03-06):
+# Daylight Saving Time was first suggested as a joke by Benjamin Franklin
+# in his whimsical essay ``An Economical Project for Diminishing the Cost
+# of Light'' published in the Journal de Paris (1784-04-26).
+# Not everyone is happy with the results:
+#
+#	I don't really care how time is reckoned so long as there is some
+#	agreement about it, but I object to being told that I am saving
+#	daylight when my reason tells me that I am doing nothing of the kind.
+#	I even object to the implication that I am wasting something
+#	valuable if I stay in bed after the sun has risen.  As an admirer
+#	of moonlight I resent the bossy insistence of those who want to
+#	reduce my time for enjoying it.  At the back of the Daylight Saving
+#	scheme I detect the bony, blue-fingered hand of Puritanism, eager
+#	to push people into bed earlier, and get them up earlier, to make
+#	them healthy, wealthy and wise in spite of themselves.
+#
+#	-- Robertson Davies, The diary of Samuel Marchbanks,
+#	   Clarke, Irwin (1947), XIX, Sunday
+#
+# For more about the first ten years of DST in the United States, see
+# Robert Garland's <a href="http://www.clpgh.org/exhibit/dst.html">
+# Ten years of daylight saving from the Pittsburgh standpoint
+# (Carnegie Library of Pittsburgh, 1927)</a>.
+#
+# Shanks says that DST was called "War Time" in the US in 1918 and 1919.
+# However, DST was imposed by the Standard Time Act of 1918, which
+# was the first nationwide legal time standard, and apparently
+# time was just called "Standard Time" or "Daylight Saving Time".
+
+# From Arthur David Olson:
+# US Daylight Saving Time ended on the last Sunday of *October* in 1974.
+# See, for example, the front page of the Saturday, 1974-10-26
+# and Sunday, 1974-10-27 editions of the Washington Post.
+
+# From Arthur David Olson:
+# Before the Uniform Time Act of 1966 took effect in 1967, observance of
+# Daylight Saving Time in the US was by local option, except during wartime.
+
+# From Arthur David Olson (2000-09-25):
+# Last night I heard part of a rebroadcast of a 1945 Arch Oboler radio drama.
+# In the introduction, Oboler spoke of "Eastern Peace Time."
+# An AltaVista search turned up
+# <a href="http://rowayton.org/rhs/hstaug45.html">:
+# "When the time is announced over the radio now, it is 'Eastern Peace
+# Time' instead of the old familiar 'Eastern War Time.'  Peace is wonderful."
+# </a> (August 1945) by way of confirmation.
+
+# From Joseph Gallant citing
+# George H. Douglas, _The Early Days of Radio Broadcasting_ (1987):
+# At 7 P.M. (Eastern War Time) [on 1945-08-14], the networks were set
+# to switch to London for Attlee's address, but the American people
+# never got to hear his speech live. According to one press account,
+# CBS' Bob Trout was first to announce the word of Japan's surrender,
+# but a few seconds later, NBC, ABC and Mutual also flashed the word
+# of surrender, all of whom interrupting the bells of Big Ben in
+# London which were to precede Mr. Attlee's speech.
+
+# From Paul Eggert (2003-02-09): It was Robert St John, not Bob Trout.  From
+# Myrna Oliver's obituary of St John on page B16 of today's Los Angeles Times:
+#
+# ... a war-weary U.S. clung to radios, awaiting word of Japan's surrender.
+# Any announcement from Asia would reach St. John's New York newsroom on a
+# wire service teletype machine, which had prescribed signals for major news.
+# Associated Press, for example, would ring five bells before spewing out
+# typed copy of an important story, and 10 bells for news "of transcendental
+# importance."
+#
+# On Aug. 14, stalling while talking steadily into the NBC networks' open
+# microphone, St. John heard five bells and waited only to hear a sixth bell,
+# before announcing confidently: "Ladies and gentlemen, World War II is over.
+# The Japanese have agreed to our surrender terms."
+#
+# He had scored a 20-second scoop on other broadcasters.
+
+# From Arthur David Olson (2005-08-22):
+# Paul has been careful to use the "US" rules only in those locations
+# that are part of the United States; this reflects the real scope of
+# U.S. government action.  So even though the "US" rules have changed
+# in the latest release, other countries won't be affected.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	US	1918	1919	-	Mar	lastSun	2:00	1:00	D
+Rule	US	1918	1919	-	Oct	lastSun	2:00	0	S
+Rule	US	1942	only	-	Feb	9	2:00	1:00	W # War
+Rule	US	1945	only	-	Aug	14	23:00u	1:00	P # Peace
+Rule	US	1945	only	-	Sep	30	2:00	0	S
+Rule	US	1967	2006	-	Oct	lastSun	2:00	0	S
+Rule	US	1967	1973	-	Apr	lastSun	2:00	1:00	D
+Rule	US	1974	only	-	Jan	6	2:00	1:00	D
+Rule	US	1975	only	-	Feb	23	2:00	1:00	D
+Rule	US	1976	1986	-	Apr	lastSun	2:00	1:00	D
+Rule	US	1987	2006	-	Apr	Sun>=1	2:00	1:00	D
+Rule	US	2007	max	-	Mar	Sun>=8	2:00	1:00	D
+Rule	US	2007	max	-	Nov	Sun>=1	2:00	0	S
+
+# From Arthur David Olson, 2005-12-19
+# We generate the files specified below to guard against old files with
+# obsolete information being left in the time zone binary directory.
+# We limit the list to names that have appeared in previous versions of
+# this time zone package.
+# We do these as separate Zones rather than as Links to avoid problems if
+# a particular place changes whether it observes DST.
+# We put these specifications here in the northamerica file both to
+# increase the chances that they'll actually get compiled and to
+# avoid the need to duplicate the US rules in another file.
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	EST		 -5:00	-	EST
+Zone	MST		 -7:00	-	MST
+Zone	HST		-10:00	-	HST
+Zone	EST5EDT		 -5:00	US	E%sT
+Zone	CST6CDT		 -6:00	US	C%sT
+Zone	MST7MDT		 -7:00	US	M%sT
+Zone	PST8PDT		 -8:00	US	P%sT
+
+# From Bob Devine (1988-01-28):
+# ...Alaska (and Hawaii) had the timezone names changed in 1967.
+#    old			 new
+#    Pacific Standard Time(PST)  -same-
+#    Yukon Standard Time(YST)    -same-
+#    Central Alaska S.T. (CAT)   Alaska-Hawaii St[an]dard Time (AHST)
+#    Nome Standard Time (NT)     Bering Standard Time (BST)
+#
+# ...Alaska's timezone lines were redrawn in 1983 to give only 2 tz.
+#    The YST zone now covers nearly all of the state, AHST just part
+#    of the Aleutian islands.   No DST.
+
+# From Paul Eggert (1995-12-19):
+# The tables below use `NST', not `NT', for Nome Standard Time.
+# I invented `CAWT' for Central Alaska War Time.
+
+# From U. S. Naval Observatory (1989-01-19):
+# USA  EASTERN       5 H  BEHIND UTC    NEW YORK, WASHINGTON
+# USA  EASTERN       4 H  BEHIND UTC    APR 3 - OCT 30
+# USA  CENTRAL       6 H  BEHIND UTC    CHICAGO, HOUSTON
+# USA  CENTRAL       5 H  BEHIND UTC    APR 3 - OCT 30
+# USA  MOUNTAIN      7 H  BEHIND UTC    DENVER
+# USA  MOUNTAIN      6 H  BEHIND UTC    APR 3 - OCT 30
+# USA  PACIFIC       8 H  BEHIND UTC    L.A., SAN FRANCISCO
+# USA  PACIFIC       7 H  BEHIND UTC    APR 3 - OCT 30
+# USA  ALASKA STD    9 H  BEHIND UTC    MOST OF ALASKA     (AKST)
+# USA  ALASKA STD    8 H  BEHIND UTC    APR 3 - OCT 30 (AKDT)
+# USA  ALEUTIAN     10 H  BEHIND UTC    ISLANDS WEST OF 170W
+# USA  - " -         9 H  BEHIND UTC    APR 3 - OCT 30
+# USA  HAWAII       10 H  BEHIND UTC
+# USA  BERING       11 H  BEHIND UTC    SAMOA, MIDWAY
+
+# From Arthur David Olson (1989-01-21):
+# The above dates are for 1988.
+# Note the "AKST" and "AKDT" abbreviations, the claim that there's
+# no DST in Samoa, and the claim that there is DST in Alaska and the
+# Aleutians.
+
+# From Arthur David Olson (1988-02-13):
+# Legal standard time zone names, from United States Code (1982 Edition and
+# Supplement III), Title 15, Chapter 6, Section 260 and forward.  First, names
+# up to 1967-04-01 (when most provisions of the Uniform Time Act of 1966
+# took effect), as explained in sections 263 and 261:
+#	(none)
+#	United States standard eastern time
+#	United States standard mountain time
+#	United States standard central time
+#	United States standard Pacific time
+#	(none)
+#	United States standard Alaska time
+#	(none)
+# Next, names from 1967-04-01 until 1983-11-30 (the date for
+# public law 98-181):
+#	Atlantic standard time
+#	eastern standard time
+#	central standard time
+#	mountain standard time
+#	Pacific standard time
+#	Yukon standard time
+#	Alaska-Hawaii standard time
+#	Bering standard time
+# And after 1983-11-30:
+#	Atlantic standard time
+#	eastern standard time
+#	central standard time
+#	mountain standard time
+#	Pacific standard time
+#	Alaska standard time
+#	Hawaii-Aleutian standard time
+#	Samoa standard time
+# The law doesn't give abbreviations.
+#
+# From Paul Eggert (2000-01-08), following a heads-up from Rives McDow:
+# Public law 106-564 (2000-12-23) introduced the abbreviation
+# "Chamorro Standard Time" for time in Guam and the Northern Marianas.
+# See the file "australasia".
+ 
+# From Arthur David Olson, 2005-08-09
+# The following was signed into law on 2005-08-08.
+#
+# H.R. 6, Energy Policy Act of 2005, SEC. 110. DAYLIGHT SAVINGS.
+#   (a) Amendment- Section 3(a) of the Uniform Time Act of 1966 (15
+#   U.S.C. 260a(a)) is amended--
+#     (1) by striking `first Sunday of April' and inserting `second
+#     Sunday of March'; and
+#     (2) by striking `last Sunday of October' and inserting `first
+#     Sunday of November'.
+#   (b) Effective Date- Subsection (a) shall take effect 1 year after the
+#   date of enactment of this Act or March 1, 2007, whichever is later.
+#   (c) Report to Congress- Not later than 9 months after the effective
+#   date stated in subsection (b), the Secretary shall report to Congress
+#   on the impact of this section on energy consumption in the United
+#   States.
+#   (d) Right to Revert- Congress retains the right to revert the
+#   Daylight Saving Time back to the 2005 time schedules once the
+#   Department study is complete.
+
+# US eastern time, represented by New York
+
+# Connecticut, Delaware, District of Columbia, most of Florida,
+# Georgia, southeast Indiana (Dearborn and Ohio counties), eastern Kentucky
+# (except America/Kentucky/Louisville below), Maine, Maryland, Massachusetts,
+# New Hampshire, New Jersey, New York, North Carolina, Ohio,
+# Pennsylvania, Rhode Island, South Carolina, eastern Tennessee,
+# Vermont, Virginia, West Virginia
+
+# From Dave Cantor (2004-11-02):
+# Early this summer I had the occasion to visit the Mount Washington
+# Observatory weather station atop (of course!) Mount Washington [, NH]....
+# One of the staff members said that the station was on Eastern Standard Time
+# and didn't change their clocks for Daylight Saving ... so that their
+# reports will always have times which are 5 hours behind UTC.
+
+# From Paul Eggert (2005-08-26):
+# According to today's Huntsville Times
+# <http://www.al.com/news/huntsvilletimes/index.ssf?/base/news/1125047783228320.xml&coll=1>
+# a few towns on Alabama's "eastern border with Georgia, such as Phenix City
+# in Russell County, Lanett in Chambers County and some towns in Lee County,
+# set their watches and clocks on Eastern time."  It quotes H.H. "Bubba"
+# Roberts, city administrator in Phenix City. as saying "We are in the Central
+# time zone, but we do go by the Eastern time zone because so many people work
+# in Columbus." 
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
+Rule	NYC	1920	only	-	Mar	lastSun	2:00	1:00	D
+Rule	NYC	1920	only	-	Oct	lastSun	2:00	0	S
+Rule	NYC	1921	1966	-	Apr	lastSun	2:00	1:00	D
+Rule	NYC	1921	1954	-	Sep	lastSun	2:00	0	S
+Rule	NYC	1955	1966	-	Oct	lastSun	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/New_York	-4:56:02 -	LMT	1883 Nov 18 12:03:58
+			-5:00	US	E%sT	1920
+			-5:00	NYC	E%sT	1942
+			-5:00	US	E%sT	1946
+			-5:00	NYC	E%sT	1967
+			-5:00	US	E%sT
+
+# US central time, represented by Chicago
+
+# Alabama, Arkansas, Florida panhandle (Bay, Calhoun, Escambia,
+# Gulf, Holmes, Jackson, Okaloosa, Santa Rosa, Walton, and
+# Washington counties), Illinois, western Indiana
+# (Gibson, Jasper, Lake, LaPorte, Newton, Porter, Posey, Spencer,
+# Vanderburgh, and Warrick counties), Iowa, most of Kansas, western
+# Kentucky, Louisiana, Minnesota, Mississippi, Missouri, eastern
+# Nebraska, eastern North Dakota, Oklahoma, eastern South Dakota,
+# western Tennessee, most of Texas, Wisconsin
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
+Rule	Chicago	1920	only	-	Jun	13	2:00	1:00	D
+Rule	Chicago	1920	1921	-	Oct	lastSun	2:00	0	S
+Rule	Chicago	1921	only	-	Mar	lastSun	2:00	1:00	D
+Rule	Chicago	1922	1966	-	Apr	lastSun	2:00	1:00	D
+Rule	Chicago	1922	1954	-	Sep	lastSun	2:00	0	S
+Rule	Chicago	1955	1966	-	Oct	lastSun	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Chicago	-5:50:36 -	LMT	1883 Nov 18 12:09:24
+			-6:00	US	C%sT	1920
+			-6:00	Chicago	C%sT	1936 Mar  1 2:00
+			-5:00	-	EST	1936 Nov 15 2:00
+			-6:00	Chicago	C%sT	1942
+			-6:00	US	C%sT	1946
+			-6:00	Chicago	C%sT	1967
+			-6:00	US	C%sT
+# Oliver County, ND switched from mountain to central time on 1992-10-25.
+Zone America/North_Dakota/Center -6:45:12 - LMT	1883 Nov 18 12:14:48
+			-7:00	US	M%sT	1992 Oct 25 02:00
+			-6:00	US	C%sT
+
+# US mountain time, represented by Denver
+#
+# Colorado, far western Kansas, Montana, western
+# Nebraska, Nevada border (Jackpot, Owyhee, and Mountain City),
+# New Mexico, southwestern North Dakota, far eastern Oregon,
+# western South Dakota, far western Texas (El Paso County, Hudspeth County,
+# and Pine Springs and Nickel Creek in Culberson County), Utah, Wyoming
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
+Rule	Denver	1920	1921	-	Mar	lastSun	2:00	1:00	D
+Rule	Denver	1920	only	-	Oct	lastSun	2:00	0	S
+Rule	Denver	1921	only	-	May	22	2:00	0	S
+Rule	Denver	1965	1966	-	Apr	lastSun	2:00	1:00	D
+Rule	Denver	1965	1966	-	Oct	lastSun	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Denver	-6:59:56 -	LMT	1883 Nov 18 12:00:04
+			-7:00	US	M%sT	1920
+			-7:00	Denver	M%sT	1942
+			-7:00	US	M%sT	1946
+			-7:00	Denver	M%sT	1967
+			-7:00	US	M%sT
+
+# US Pacific time, represented by Los Angeles
+#
+# California, northern Idaho (Benewah, Bonner, Boundary, Clearwater,
+# Idaho, Kootenai, Latah, Lewis, Nez Perce, and Shoshone counties),
+# most of Nevada, most of Oregon, and Washington
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
+Rule	CA	1948	only	-	Mar	14	2:00	1:00	D
+Rule	CA	1949	only	-	Jan	 1	2:00	0	S
+Rule	CA	1950	1966	-	Apr	lastSun	2:00	1:00	D
+Rule	CA	1950	1961	-	Sep	lastSun	2:00	0	S
+Rule	CA	1962	1966	-	Oct	lastSun	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Los_Angeles -7:52:58 -	LMT	1883 Nov 18 12:07:02
+			-8:00	US	P%sT	1946
+			-8:00	CA	P%sT	1967
+			-8:00	US	P%sT
+
+# Alaska
+# AK%sT is the modern abbreviation for -9:00 per USNO.
+#
+# From Paul Eggert (2001-05-30):
+# Howse writes that Alaska switched from the Julian to the Gregorian calendar,
+# and from east-of-GMT to west-of-GMT days, when the US bought it from Russia.
+# This was on 1867-10-18, a Friday; the previous day was 1867-10-06 Julian,
+# also a Friday.  Include only the time zone part of this transition,
+# ignoring the switch from Julian to Gregorian, since we can't represent
+# the Julian calendar.
+#
+# As far as we know, none of the exact locations mentioned below were
+# permanently inhabited in 1867 by anyone using either calendar.
+# (Yakutat was colonized by the Russians in 1799, but the settlement
+# was destroyed in 1805 by a Yakutat-kon war party.)  However, there
+# were nearby inhabitants in some cases and for our purposes perhaps
+# it's best to simply use the official transition.
+#
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Juneau	 15:02:19 -	LMT	1867 Oct 18
+			 -8:57:41 -	LMT	1900 Aug 20 12:00
+			 -8:00	-	PST	1942
+			 -8:00	US	P%sT	1946
+			 -8:00	-	PST	1969
+			 -8:00	US	P%sT	1983 Oct 30 2:00
+			 -9:00	US	Y%sT	1983 Nov 30
+			 -9:00	US	AK%sT
+Zone America/Yakutat	 14:41:05 -	LMT	1867 Oct 18
+			 -9:18:55 -	LMT	1900 Aug 20 12:00
+			 -9:00	-	YST	1942
+			 -9:00	US	Y%sT	1946
+			 -9:00	-	YST	1969
+			 -9:00	US	Y%sT	1983 Nov 30
+			 -9:00	US	AK%sT
+Zone America/Anchorage	 14:00:24 -	LMT	1867 Oct 18
+			 -9:59:36 -	LMT	1900 Aug 20 12:00
+			-10:00	-	CAT	1942
+			-10:00	US	CAT/CAWT 1946
+			-10:00	-	CAT	1967 Apr
+			-10:00	-	AHST	1969
+			-10:00	US	AH%sT	1983 Oct 30 2:00
+			 -9:00	US	Y%sT	1983 Nov 30
+			 -9:00	US	AK%sT
+Zone America/Nome	 12:58:21 -	LMT	1867 Oct 18
+			-11:01:38 -	LMT	1900 Aug 20 12:00
+			-11:00	-	NST	1942
+			-11:00	US	N%sT	1946
+			-11:00	-	NST	1967 Apr
+			-11:00	-	BST	1969
+			-11:00	US	B%sT	1983 Oct 30 2:00
+			 -9:00	US	Y%sT	1983 Nov 30
+			 -9:00	US	AK%sT
+Zone America/Adak	 12:13:21 -	LMT	1867 Oct 18
+			-11:46:38 -	LMT	1900 Aug 20 12:00
+			-11:00	-	NST	1942
+			-11:00	US	N%sT	1946
+			-11:00	-	NST	1967 Apr
+			-11:00	-	BST	1969
+			-11:00	US	B%sT	1983 Oct 30 2:00
+			-10:00	US	AH%sT	1983 Nov 30
+			-10:00	US	HA%sT
+# The following switches don't quite make our 1970 cutoff.
+#
+# Shanks writes that part of southwest Alaska (e.g. Aniak)
+# switched from -11:00 to -10:00 on 1968-09-22 at 02:00,
+# and another part (e.g. Akiak) made the same switch five weeks later.
+#
+# From David Flater (2004-11-09):
+# In e-mail, 2004-11-02, Ray Hudson, historian/liaison to the Unalaska
+# Historic Preservation Commission, provided this information, which
+# suggests that Unalaska deviated from statutory time from early 1967
+# possibly until 1983:
+#
+#  Minutes of the Unalaska City Council Meeting, January 10, 1967:
+#  "Except for St. Paul and Akutan, Unalaska is the only important
+#  location not on Alaska Standard Time.  The following resolution was
+#  made by William Robinson and seconded by Henry Swanson:  Be it
+#  resolved that the City of Unalaska hereby goes to Alaska Standard
+#  Time as of midnight Friday, January 13, 1967 (1 A.M. Saturday,
+#  January 14, Alaska Standard Time.)  This resolution was passed with
+#  three votes for and one against."
+
+# Hawaii
+#
+# From Arthur David Olson:
+# And then there's Hawaii.
+# DST was observed for one day in 1933;
+# standard time was changed by half an hour in 1947;
+# it's always standard as of 1986.
+#
+# From Paul Eggert:
+# Shanks says the 1933 experiment lasted for three weeks.  Go with Shanks.
+#
+Zone Pacific/Honolulu	-10:31:26 -	LMT	1900 Jan  1 12:00
+			-10:30	-	HST	1933 Apr 30 2:00
+			-10:30	1:00	HDT	1933 May 21 2:00
+			-10:30	US	H%sT	1947 Jun  8 2:00
+			-10:00	-	HST
+
+# Now we turn to US areas that have diverged from the consensus since 1970.
+
+# Arizona mostly uses MST.
+
+# From Paul Eggert (2002-10-20):
+#
+# The information in the rest of this paragraph is derived from the
+# <a href="http://www.dlapr.lib.az.us/links/daylight.htm">
+# Daylight Saving Time web page (2002-01-23)</a> maintained by the
+# Arizona State Library, Archives and Public Records.
+# Between 1944-01-01 and 1944-04-01 the State of Arizona used standard
+# time, but by federal law railroads, airlines, bus lines, military
+# personnel, and some engaged in interstate commerce continued to
+# observe war (i.e., daylight saving) time.  The 1944-03-17 Phoenix
+# Gazette says that was the date the law changed, and that 04-01 was
+# the date the state's clocks would change.  In 1945 the State of
+# Arizona used standard time all year, again with exceptions only as
+# mandated by federal law.  Arizona observed DST in 1967, but Arizona
+# Laws 1968, ch. 183 (effective 1968-03-21) repealed DST.
+#
+# Shanks says the 1944 experiment came to an end on 1944-03-17.
+# Go with the Arizona State Library instead.
+
+Zone America/Phoenix	-7:28:18 -	LMT	1883 Nov 18 11:31:42
+			-7:00	US	M%sT	1944 Jan  1 00:01
+			-7:00	-	MST	1944 Apr  1 00:01
+			-7:00	US	M%sT	1944 Oct  1 00:01
+			-7:00	-	MST	1967
+			-7:00	US	M%sT	1968 Mar 21
+			-7:00	-	MST
+# From Arthur David Olson (1988-02-13):
+# A writer from the Inter Tribal Council of Arizona, Inc.,
+# notes in private correspondence dated 1987-12-28 that "Presently, only the
+# Navajo Nation participates in the Daylight Saving Time policy, due to its
+# large size and location in three states."  (The "only" means that other
+# tribal nations don't use DST.)
+
+Link America/Denver America/Shiprock
+
+# Southern Idaho (Ada, Adams, Bannock, Bear Lake, Bingham, Blaine,
+# Boise, Bonneville, Butte, Camas, Canyon, Caribou, Cassia, Clark,
+# Custer, Elmore, Franklin, Fremont, Gem, Gooding, Jefferson, Jerome,
+# Lemhi, Lincoln, Madison, Minidoka, Oneida, Owyhee, Payette, Power,
+# Teton, Twin Falls, Valley, Washington counties) and eastern Oregon
+# switched four weeks late in 1974.
+#
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Boise	-7:44:49 -	LMT	1883 Nov 18 12:15:11
+			-8:00	US	P%sT	1923 May 13 2:00
+			-7:00	US	M%sT	1974
+			-7:00	-	MST	1974 Feb  3 2:00
+			-7:00	US	M%sT
+
+# Indiana
+#
+# For a map of Indiana's time zone regions, see:
+# <a href="http://www.mccsc.edu/time.html">
+# What time is it in Indiana?
+# </a> (2005-05-03)
+#
+# From Paul Eggert (2005-08-22):
+# Since 1970, most of Indiana has been like America/Indiana/Indianapolis,
+# with the following exceptions:
+#
+# - Gibson, Jasper, Lake, LaPorte, Newton, Porter, Posey, Spencer,
+#   Vandenburgh, and Warrick counties have been like America/Chicago.
+#
+# - Dearborn and Ohio counties have been like America/New_York.
+#
+# - Clark, Floyd, and Harrison counties have been like
+#   America/Kentucky/Louisville.
+#
+# - Crawford, Starke, and Switzerland counties have their own time zone
+#   histories as noted below.
+#
+# Shanks partitions Indiana into 345 regions, each with its own time history,
+# and writes ``Even newspaper reports present contradictory information.''
+# Fortunately, most of the complexity occurred before our cutoff date of 1970.
+#
+# Other than Indianapolis, the Indiana place names are so nondescript
+# that they would be ambiguous if we left them at the `America' level.
+# So we reluctantly put them all in a subdirectory `America/Indiana'.
+
+# From Paul Eggert (2005-08-16):
+# http://www.mccsc.edu/time.html says that Indiana will use DST starting 2006,
+# and that many counties may switch either to Central or to Eastern time.
+# The county-by-county decisions have not been made yet, so for now assume
+# that no counties will switch: this assumption is most likely wrong,
+# but it's the best we can do for now.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
+Rule Indianapolis 1941	only	-	Jun	22	2:00	1:00	D
+Rule Indianapolis 1941	1954	-	Sep	lastSun	2:00	0	S
+Rule Indianapolis 1946	1954	-	Apr	lastSun	2:00	1:00	D
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Indiana/Indianapolis -5:44:38 - LMT 1883 Nov 18 12:15:22
+			-6:00	US	C%sT	1920
+			-6:00 Indianapolis C%sT	1942
+			-6:00	US	C%sT	1946
+			-6:00 Indianapolis C%sT	1955 Apr 24 2:00
+			-5:00	-	EST	1957 Sep 29 2:00
+			-6:00	-	CST	1958 Apr 27 2:00
+			-5:00	-	EST	1969
+			-5:00	US	E%sT	1971
+			-5:00	-	EST	2006
+			-5:00	US	E%sT
+#
+# Part of Crawford County, Indiana, last observed DST in 1975,
+# and left its clocks alone in 1974.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
+Rule	Marengo	1951	only	-	Apr	lastSun	2:00	1:00	D
+Rule	Marengo	1951	only	-	Sep	lastSun	2:00	0	S
+Rule	Marengo	1954	1960	-	Apr	lastSun	2:00	1:00	D
+Rule	Marengo	1954	1960	-	Sep	lastSun	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Indiana/Marengo -5:45:23 -	LMT	1883 Nov 18 12:14:37
+			-6:00	US	C%sT	1951
+			-6:00	Marengo	C%sT	1961 Apr 30 2:00
+			-5:00	-	EST	1969
+			-5:00	US	E%sT	1974 Jan  6 2:00
+			-6:00	1:00	CDT	1974 Oct 27 2:00
+			-5:00	US	E%sT	1976
+			-5:00	-	EST	2006
+			-5:00	US	E%sT
+#
+# Starke County, Indiana
+# From Arthur David Olson (1991-10-28):
+# An article on page A3 of the Sunday, 1991-10-27 Washington Post
+# notes that Starke County switched from Central time to Eastern time as of
+# 1991-10-27.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
+Rule	Starke	1947	1961	-	Apr	lastSun	2:00	1:00	D
+Rule	Starke	1947	1954	-	Sep	lastSun	2:00	0	S
+Rule	Starke	1955	1956	-	Oct	lastSun	2:00	0	S
+Rule	Starke	1957	1958	-	Sep	lastSun	2:00	0	S
+Rule	Starke	1959	1961	-	Oct	lastSun	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Indiana/Knox -5:46:30 -	LMT	1883 Nov 18 12:13:30
+			-6:00	US	C%sT	1947
+			-6:00	Starke	C%sT	1962 Apr 29 2:00
+			-5:00	-	EST	1963 Oct 27 2:00
+			-6:00	US	C%sT	1991 Oct 27 2:00
+			-5:00	-	EST	2006
+			-5:00	US	E%sT
+#
+# Switzerland County, Indiana, last observed DST in 1972.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Indiana/Vevay -5:40:16 -	LMT	1883 Nov 18 12:19:44
+			-6:00	US	C%sT	1954 Apr 25 2:00
+			-5:00	-	EST	1969
+			-5:00	US	E%sT	1973
+			-5:00	-	EST	2006
+			-5:00	US	E%sT
+
+# Part of Kentucky left its clocks alone in 1974.
+# This also includes Clark, Floyd, and Harrison counties in Indiana.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
+Rule Louisville	1921	only	-	May	1	2:00	1:00	D
+Rule Louisville	1921	only	-	Sep	1	2:00	0	S
+Rule Louisville	1941	1961	-	Apr	lastSun	2:00	1:00	D
+Rule Louisville	1941	only	-	Sep	lastSun	2:00	0	S
+Rule Louisville	1946	only	-	Jun	2	2:00	0	S
+Rule Louisville	1950	1955	-	Sep	lastSun	2:00	0	S
+Rule Louisville	1956	1960	-	Oct	lastSun	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Kentucky/Louisville -5:43:02 -	LMT	1883 Nov 18 12:16:58
+			-6:00	US	C%sT	1921
+			-6:00 Louisville C%sT	1942
+			-6:00	US	C%sT	1946
+			-6:00 Louisville C%sT	1961 Jul 23 2:00
+			-5:00	-	EST	1968
+			-5:00	US	E%sT	1974 Jan  6 2:00
+			-6:00	1:00	CDT	1974 Oct 27 2:00
+			-5:00	US	E%sT
+#
+# Wayne, Clinton, and Russell Counties, Kentucky
+#
+# From
+# <a href="http://www.lake-cumberland.com/life/archive/news990129time.shtml">
+# Lake Cumberland LIFE
+# </a> (1999-01-29) via WKYM-101.7:
+# Clinton County has joined Wayne County in asking the DoT to change from
+# the Central to the Eastern time zone....  The Wayne County government made
+# the same request in December.  And while Russell County officials have not
+# taken action, the majority of respondents to a poll conducted there in
+# August indicated they would like to change to "fast time" also.
+# The three Lake Cumberland counties are the farthest east of any U.S.
+# location in the Central time zone.
+#
+# From Rich Wales (2000-08-29):
+# After prolonged debate, and despite continuing deep differences of opinion,
+# Wayne County (central Kentucky) is switching from Central (-0600) to Eastern
+# (-0500) time.  They won't "fall back" this year.  See Sara Shipley,
+# The difference an hour makes, Nando Times (2000-08-29 15:33 -0400).
+#
+# From Paul Eggert (2001-07-16):
+# The final rule was published in the
+# <a href="http://frwebgate.access.gpo.gov/cgi-bin/getdoc.cgi?dbname=2000_register&docid=fr17au00-22">
+# Federal Register 65, 160 (2000-08-17), page 50154-50158.
+# </a>
+#
+Zone America/Kentucky/Monticello -5:39:24 - LMT	1883 Nov 18 12:20:36
+			-6:00	US	C%sT	1946
+			-6:00	-	CST	1968
+			-6:00	US	C%sT	2000 Oct 29  2:00
+			-5:00	US	E%sT
+
+
+# From Rives McDow (2000-08-30):
+# Here ... are all the changes in the US since 1985.
+# Kearny County, KS (put all of county on central;
+#	previously split between MST and CST) ... 1990-10
+# Starke County, IN (from CST to EST) ... 1991-10
+# Oliver County, ND (from MST to CST) ... 1992-10
+# West Wendover, NV (from PST TO MST) ... 1999-10
+# Wayne County, KY (from CST to EST) ... 2000-10
+#
+# From Paul Eggert (2001-07-17):
+# We don't know where the line used to be within Kearny County, KS,
+# so omit that change for now.
+# See America/Indiana/Knox for the Starke County, IN change.
+# See America/North_Dakota/Center for the Oliver County, ND change.
+# West Wendover, NV officially switched from Pacific to mountain time on
+# 1999-10-31.  See the
+# <a href="http://frwebgate.access.gpo.gov/cgi-bin/getdoc.cgi?dbname=1999_register&docid=fr21oc99-15">
+# Federal Register 64, 203 (1999-10-21), page 56705-56707.
+# </a>
+# However, the Federal Register says that West Wendover already operated
+# on mountain time, and the rule merely made this official;
+# hence a separate tz entry is not needed.
+
+# Michigan
+#
+# From Bob Devine (1988-01-28):
+# Michigan didn't observe DST from 1968 to 1973.
+#
+# From Paul Eggert (1999-03-31):
+# Shanks writes that Michigan started using standard time on 1885-09-18,
+# but Howse writes (pp 124-125, referring to Popular Astronomy, 1901-01)
+# that Detroit kept
+#
+#	local time until 1900 when the City Council decreed that clocks should
+#	be put back twenty-eight minutes to Central Standard Time.  Half the
+#	city obeyed, half refused.  After considerable debate, the decision
+#	was rescinded and the city reverted to Sun time.  A derisive offer to
+#	erect a sundial in front of the city hall was referred to the
+#	Committee on Sewers.  Then, in 1905, Central time was adopted
+#	by city vote.
+#
+# This story is too entertaining to be false, so go with Howse over Shanks.
+#
+# From Paul Eggert (2001-03-06):
+# Garland (1927) writes ``Cleveland and Detroit advanced their clocks
+# one hour in 1914.''  This change is not in Shanks.  We have no more
+# info, so omit this for now.
+#
+# Most of Michigan observed DST from 1973 on, but was a bit late in 1975.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
+Rule	Detroit	1948	only	-	Apr	lastSun	2:00	1:00	D
+Rule	Detroit	1948	only	-	Sep	lastSun	2:00	0	S
+Rule	Detroit	1967	only	-	Jun	14	2:00	1:00	D
+Rule	Detroit	1967	only	-	Oct	lastSun	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Detroit	-5:32:11 -	LMT	1905
+			-6:00	-	CST	1915 May 15 2:00
+			-5:00	-	EST	1942
+			-5:00	US	E%sT	1946
+			-5:00	Detroit	E%sT	1973
+			-5:00	US	E%sT	1975
+			-5:00	-	EST	1975 Apr 27 2:00
+			-5:00	US	E%sT
+#
+# The Michigan border with Wisconsin switched from EST to CST/CDT in 1973.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
+Rule Menominee	1946	only	-	Apr	lastSun	2:00	1:00	D
+Rule Menominee	1946	only	-	Sep	lastSun	2:00	0	S
+Rule Menominee	1966	only	-	Apr	lastSun	2:00	1:00	D
+Rule Menominee	1966	only	-	Oct	lastSun	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Menominee	-5:50:27 -	LMT	1885 Sep 18 12:00
+			-6:00	US	C%sT	1946
+			-6:00 Menominee	C%sT	1969 Apr 27 2:00
+			-5:00	-	EST	1973 Apr 29 2:00
+			-6:00	US	C%sT
+
+# Navassa
+# administered by the US Fish and Wildlife Service
+# claimed by US under the provisions of the 1856 Guano Islands Act
+# also claimed by Haiti
+# occupied 1857/1900 by the Navassa Phosphate Co
+# US lighthouse 1917/1996-09
+# currently uninhabited
+# see Mark Fineman, ``An Isle Rich in Guano and Discord'',
+# _Los Angeles Times_ (1998-11-10), A1, A10; it cites
+# Jimmy Skaggs, _The Great Guano Rush_ (1994).
+
+################################################################################
+
+
+# From Paul Eggert (1999-10-29):
+# A good source for time zone historical data outside the US is
+# Thomas G. Shanks, The International Atlas (5th edition),
+# San Diego: ACS Publications, Inc. (1999).
+#
+# Gwillim Law writes that a good source
+# for recent time zone data is the International Air Transport
+# Association's Standard Schedules Information Manual (IATA SSIM),
+# published semiannually.  Law sent in several helpful summaries
+# of the IATA's data after 1990.
+#
+# Except where otherwise noted, Shanks is the source for entries through 1990,
+# and IATA SSIM is the source for entries after 1990.
+#
+# Other sources occasionally used include:
+#
+#	Edward W. Whitman, World Time Differences,
+#	Whitman Publishing Co, 2 Niagara Av, Ealing, London (undated),
+#	which I found in the UCLA library.
+#
+#	<a href="http://www.pettswoodvillage.co.uk/Daylight_Savings_William_Willett.pdf">
+#	William Willett, The Waste of Daylight, 19th edition
+#	</a> (1914-03)
+#
+# See the `europe' file for Greenland.
+
+# Canada
+
+# From Alain LaBont<e'> (1994-11-14):
+# I post here the time zone abbreviations standardized in Canada
+# for both English and French in the CAN/CSA-Z234.4-89 standard....
+#
+#	UTC	Standard time	Daylight savings time
+#	offset	French	English	French	English
+#	-2:30	-	-	HAT	NDT
+#	-3	-	-	HAA	ADT
+#	-3:30	HNT	NST	-	-
+#	-4	HNA	AST	HAE	EDT
+#	-5	HNE	EST	HAC	CDT
+#	-6	HNC	CST	HAR	MDT
+#	-7	HNR	MST	HAP	PDT
+#	-8	HNP	PST	HAY	YDT
+#	-9	HNY	YST	-	-
+#
+#	HN: Heure Normale	ST: Standard Time
+#	HA: Heure Avanc<e'>e	DT: Daylight saving Time
+#
+#	A: de l'Atlantique	Atlantic
+#	C: du Centre		Central
+#	E: de l'Est		Eastern
+#	M:			Mountain
+#	N:			Newfoundland
+#	P: du Pacifique		Pacific
+#	R: des Rocheuses
+#	T: de Terre-Neuve
+#	Y: du Yukon		Yukon
+#
+# From Paul Eggert (1994-11-22):
+# Alas, this sort of thing must be handled by localization software.
+
+# Unless otherwise specified, the data for Canada are all from Shanks.
+
+# From Paul Eggert (2005-12-21):
+# H. David Matthews and Mary Vincent's map
+# <a href="http://www.canadiangeographic.ca/Magazine/SO98/geomap.asp">
+# "It's about TIME", _Canadian Geographic_ (September-October 1998)
+# </a> contains detailed boundaries for regions observing nonstandard
+# time and daylight saving time arrangements in Canada circa 1998.
+#
+# INMS, the Institute for National Measurement Standards in Ottawa, has <a
+# href="http://inms-ienm.nrc-cnrc.gc.ca/en/time_services/daylight_saving_e.php">
+# information about standard and daylight saving time zones in Canada.
+# </a> (updated periodically).
+# Its unofficial information is often taken from Matthews and Vincent.
+#
+# CBC News reported that Ontario and Manitoba have announced plans to
+# follow the US change, and that Nova Scotia is considering it; see
+# <http://www.cbc.ca/news/background/daylightsavingtime/> (2005-10-21).
+# CBC news also reported that Prince Edward Island is the first
+# province in Atlantic Canada to follow the US change, and that Quebec
+# had agreed; see <http://www.cbc.ca/pei/story/pe_daylight_20051207.html>
+# (2005-12-07).
+#
+# To reflect all this, the Canada and Winn rules have been adjusted to
+# agree with the 2007 US change.  This means we assume most of Canada
+# will fall into line.  However, Alberta, British Columbia,
+# Newfoundland, Northwest Territories, and Yukon already have separate
+# rules in our database, so for now we'll leave them alone, which
+# means that we currently assume these regions will not change their
+# rules and will disagree with the US starting in 2007.  This
+# assumption is probably incorrect, with the possible exception of
+# Newfoundland.  We plan to adjust the Edm, Vanc, StJohns, and NT_YK
+# rules as the corresponding provinces make their announcements.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Canada	1918	only	-	Apr	14	2:00	1:00	D
+Rule	Canada	1918	only	-	Oct	31	2:00	0	S
+Rule	Canada	1942	only	-	Feb	 9	2:00	1:00	W # War
+Rule	Canada	1945	only	-	Aug	14	23:00u	1:00	P # Peace
+Rule	Canada	1945	only	-	Sep	30	2:00	0	S
+Rule	Canada	1974	1986	-	Apr	lastSun	2:00	1:00	D
+Rule	Canada	1974	2006	-	Oct	lastSun	2:00	0	S
+Rule	Canada	1987	2006	-	Apr	Sun>=1	2:00	1:00	D
+Rule	Canada	2007	max	-	Mar	Sun>=8	2:00	1:00	D
+Rule	Canada	2007	max	-	Nov	Sun>=1	2:00	0	S
+
+
+# Newfoundland (and far southeast Labrador)
+
+# From Paul Eggert (2000-10-02):
+# Matthews and Vincent (1998) write that Labrador should use NST/NDT,
+# but the only part of Labrador that follows the rules is the
+# southeast corner, including Port Hope Simpson and Mary's Harbour,
+# but excluding, say, Black Tickle.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	StJohns	1917	only	-	Apr	 8	2:00	1:00	D
+Rule	StJohns	1917	only	-	Sep	17	2:00	0	S
+# Whitman gives 1919 Apr 5 and 1920 Apr 5; go with Shanks.
+Rule	StJohns	1919	only	-	May	 5	23:00	1:00	D
+Rule	StJohns	1919	only	-	Aug	12	23:00	0	S
+# For 1931-1935 Whitman gives Apr same date; go with Shanks.
+Rule	StJohns	1920	1935	-	May	Sun>=1	23:00	1:00	D
+Rule	StJohns	1920	1935	-	Oct	lastSun	23:00	0	S
+# For 1936-1941 Whitman gives May Sun>=8 and Oct Sun>=1; go with Shanks.
+Rule	StJohns	1936	1941	-	May	Mon>=9	0:00	1:00	D
+Rule	StJohns	1936	1941	-	Oct	Mon>=2	0:00	0	S
+# Whitman gives the following transitions:
+# 1942 03-01/12-31, 1943 05-30/09-05, 1944 07-10/09-02, 1945 01-01/10-07
+# but go with Shanks and assume they used Canadian rules.
+# For 1946-9 Whitman gives May 5,4,9,1 - Oct 1,5,3,2, and for 1950 he gives
+# Apr 30 - Sep 24; go with Shanks.
+Rule	StJohns	1946	1950	-	May	Sun>=8	2:00	1:00	D
+Rule	StJohns	1946	1950	-	Oct	Sun>=2	2:00	0	S
+Rule	StJohns	1951	1986	-	Apr	lastSun	2:00	1:00	D
+Rule	StJohns	1951	1959	-	Sep	lastSun	2:00	0	S
+Rule	StJohns	1960	1986	-	Oct	lastSun	2:00	0	S
+# From Paul Eggert (2000-10-02):
+# INMS (2000-09-12) says that, since 1988 at least, Newfoundland switches
+# at 00:01 local time.  For now, assume it started in 1987.
+Rule	StJohns	1987	only	-	Apr	Sun>=1	0:01	1:00	D
+Rule	StJohns	1987	max	-	Oct	lastSun	0:01	0	S
+Rule	StJohns	1988	only	-	Apr	Sun>=1	0:01	2:00	DD
+Rule	StJohns	1989	max	-	Apr	Sun>=1	0:01	1:00	D
+# St John's has an apostrophe, but Posix file names can't have apostrophes.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/St_Johns	-3:30:52 -	LMT	1884
+			-3:30:52 StJohns N%sT	1918
+			-3:30:52 Canada	N%sT	1919
+			-3:30:52 StJohns N%sT	1935 Mar 30
+			-3:30	StJohns	N%sT	1942 May 11
+			-3:30	Canada	N%sT	1946
+			-3:30	StJohns	N%sT
+
+# most of east Labrador
+
+# The name `Happy Valley-Goose Bay' is too long; use `Goose Bay'.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Goose_Bay	-4:01:40 -	LMT	1884 # Happy Valley-Goose Bay
+			-3:30:52 -	NST	1918
+			-3:30:52 Canada N%sT	1919
+			-3:30:52 -	NST	1935 Mar 30
+			-3:30	-	NST	1936
+			-3:30	StJohns	N%sT	1942 May 11
+			-3:30	Canada	N%sT	1946
+			-3:30	StJohns	N%sT	1966 Mar 15 2:00
+			-4:00	StJohns	A%sT
+
+
+# west Labrador, New Brunswick, Nova Scotia, Prince Edward I
+
+# From Paul Eggert (1996-06-12):
+# Shanks writes that since 1970 most of this region has been like Halifax.
+# Many locales did not observe peacetime DST until 1972;
+# Glace Bay, NS is the largest that we know of.
+# Shanks also writes that Liverpool, NS was the only town in Canada to observe
+# DST in 1971 but not 1970; for now we'll assume this is a typo.
+
+# From Paul Eggert (2000-10-02):
+# INMS (2000-09-12) says that, since 1988 at least, New Brunswick switches
+# at 00:01 local time.  FIXME: verify and create a new Zone for this.
+
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule Halifax	1916	only	-	Apr	 1	0:00	1:00	D
+Rule Halifax	1916	only	-	Oct	 1	0:00	0	S
+Rule Halifax	1920	only	-	May	 9	0:00	1:00	D
+Rule Halifax	1920	only	-	Aug	29	0:00	0	S
+Rule Halifax	1921	only	-	May	 6	0:00	1:00	D
+Rule Halifax	1921	1922	-	Sep	 5	0:00	0	S
+Rule Halifax	1922	only	-	Apr	30	0:00	1:00	D
+Rule Halifax	1923	1925	-	May	Sun>=1	0:00	1:00	D
+Rule Halifax	1923	only	-	Sep	 4	0:00	0	S
+Rule Halifax	1924	only	-	Sep	15	0:00	0	S
+Rule Halifax	1925	only	-	Sep	28	0:00	0	S
+Rule Halifax	1926	only	-	May	16	0:00	1:00	D
+Rule Halifax	1926	only	-	Sep	13	0:00	0	S
+Rule Halifax	1927	only	-	May	 1	0:00	1:00	D
+Rule Halifax	1927	only	-	Sep	26	0:00	0	S
+Rule Halifax	1928	1931	-	May	Sun>=8	0:00	1:00	D
+Rule Halifax	1928	only	-	Sep	 9	0:00	0	S
+Rule Halifax	1929	only	-	Sep	 3	0:00	0	S
+Rule Halifax	1930	only	-	Sep	15	0:00	0	S
+Rule Halifax	1931	1932	-	Sep	Mon>=24	0:00	0	S
+Rule Halifax	1932	only	-	May	 1	0:00	1:00	D
+Rule Halifax	1933	only	-	Apr	30	0:00	1:00	D
+Rule Halifax	1933	only	-	Oct	 2	0:00	0	S
+Rule Halifax	1934	only	-	May	20	0:00	1:00	D
+Rule Halifax	1934	only	-	Sep	16	0:00	0	S
+Rule Halifax	1935	only	-	Jun	 2	0:00	1:00	D
+Rule Halifax	1935	only	-	Sep	30	0:00	0	S
+Rule Halifax	1936	only	-	Jun	 1	0:00	1:00	D
+Rule Halifax	1936	only	-	Sep	14	0:00	0	S
+Rule Halifax	1937	1938	-	May	Sun>=1	0:00	1:00	D
+Rule Halifax	1937	1941	-	Sep	Mon>=24	0:00	0	S
+Rule Halifax	1939	only	-	May	28	0:00	1:00	D
+Rule Halifax	1940	1941	-	May	Sun>=1	0:00	1:00	D
+Rule Halifax	1946	1949	-	Sep	lastSun	2:00	0	S
+Rule Halifax	1946	1949	-	Apr	lastSun	2:00	1:00	D
+Rule Halifax	1951	1954	-	Sep	lastSun	2:00	0	S
+Rule Halifax	1951	1954	-	Apr	lastSun	2:00	1:00	D
+Rule Halifax	1956	1959	-	Sep	lastSun	2:00	0	S
+Rule Halifax	1956	1959	-	Apr	lastSun	2:00	1:00	D
+Rule Halifax	1962	1973	-	Apr	lastSun	2:00	1:00	D
+Rule Halifax	1962	1973	-	Oct	lastSun	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Halifax	-4:14:24 -	LMT	1902 Jun 15
+			-4:00	Halifax	A%sT	1918
+			-4:00	Canada	A%sT	1919
+			-4:00	Halifax	A%sT	1942 Feb  9 2:00s
+			-4:00	Canada	A%sT	1946
+			-4:00	Halifax	A%sT	1974
+			-4:00	Canada	A%sT
+Zone America/Glace_Bay	-3:59:48 -	LMT	1902 Jun 15
+			-4:00	Canada	A%sT	1953
+			-4:00	Halifax	A%sT	1954
+			-4:00	-	AST	1972
+			-4:00	Halifax	A%sT	1974
+			-4:00	Canada	A%sT
+
+
+# Ontario, Quebec
+
+# From Paul Eggert (1996-06-12):
+# Shanks writes that since 1970 most of Ontario has been like Toronto,
+# and most of Quebec has been like Montreal.
+# Thunder Bay skipped DST in 1973.
+# Many smaller locales did not observe peacetime DST until 1974;
+# Nipigon (EST) and Rainy River (CST) are the largest that we know of.
+# Far west Ontario is like Winnipeg; far east Quebec is like Halifax.
+
+# From Mark Brader (2003-07-26):
+# [According to the Toronto Star] Orillia, Ontario, adopted DST
+# effective Saturday, 1912-06-22, 22:00; the article mentions that
+# Port Arthur (now part of Thunder Bay, Ontario) as well as Moose Jaw
+# have already done so.  In Orillia DST was to run until Saturday,
+# 1912-08-31 (no time mentioned), but it was met with considerable
+# hostility from certain segments of the public, and was revoked after
+# only two weeks -- I copied it as Saturday, 1912-07-07, 22:00, but
+# presumably that should be -07-06.  (1912-06-19, -07-12; also letters
+# earlier in June).
+#
+# Kenora, Ontario, was to abandon DST on 1914-06-01 (-05-21).
+
+# From Paul Eggert (1997-10-17):
+# Mark Brader writes that an article in the 1997-10-14 Toronto Star
+# says that Atikokan, Ontario currently does not observe DST,
+# but will vote on 11-10 whether to use EST/EDT.
+# He also writes that the
+# <a href="http://www.gov.on.ca/MBS/english/publications/statregs/conttext.html">
+# Ontario Time Act (1990, Chapter T.9)
+# </a>
+# says that Ontario east of 90W uses EST/EDT, and west of 90W uses CST/CDT.
+# Officially Atikokan is therefore on CST/CDT, and most likely this report
+# concerns a non-official time observed as a matter of local practice.
+# For what it's worth, Shanks says that Atikokan has agreed with
+# Rainy River ever since standard time was introduced.
+
+# From Paul Eggert (2000-10-02):
+# Matthews and Vincent (1998) write that Atikokan, Pickle Lake, and
+# New Osnaburgh observe CST all year, that Big Trout Lake observes
+# CST/CDT, and that Upsala and Shebandowan observe EST/EDT, all in
+# violation of the official Ontario rules.
+# They also write that Quebec east of the -63 meridian is supposed to
+# observe AST, but residents as far east as Natashquan use EST/EDT,
+# and residents east of Natashquan use AST.
+# We probably need Zones for far east Quebec and for Atikokan,
+# but we don't know when their practices started.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Mont	1917	only	-	Mar	25	2:00	1:00	D
+Rule	Mont	1917	only	-	Apr	24	0:00	0	S
+Rule	Mont	1919	only	-	Mar	31	2:30	1:00	D
+Rule	Mont	1919	only	-	Oct	25	2:30	0	S
+Rule	Mont	1920	only	-	May	 2	2:30	1:00	D
+Rule	Mont	1920	1922	-	Oct	Sun>=1	2:30	0	S
+Rule	Mont	1921	only	-	May	 1	2:00	1:00	D
+Rule	Mont	1922	only	-	Apr	30	2:00	1:00	D
+Rule	Mont	1924	only	-	May	17	2:00	1:00	D
+Rule	Mont	1924	1926	-	Sep	lastSun	2:30	0	S
+Rule	Mont	1925	1926	-	May	Sun>=1	2:00	1:00	D
+# The 1927-to-1937 rules can be expressed more simply as
+# Rule	Mont	1927	1937	-	Apr	lastSat	24:00	1:00	D
+# Rule	Mont	1927	1937	-	Sep	lastSat	24:00	0	S
+# The rules below avoid use of 24:00
+# (which pre-1998 versions of zic cannot handle).
+Rule	Mont	1927	only	-	May	1	0:00	1:00	D
+Rule	Mont	1927	1932	-	Sep	lastSun	0:00	0	S
+Rule	Mont	1928	1931	-	Apr	lastSun	0:00	1:00	D
+Rule	Mont	1932	only	-	May	1	0:00	1:00	D
+Rule	Mont	1933	1940	-	Apr	lastSun	0:00	1:00	D
+Rule	Mont	1933	only	-	Oct	1	0:00	0	S
+Rule	Mont	1934	1939	-	Sep	lastSun	0:00	0	S
+Rule	Mont	1946	1973	-	Apr	lastSun	2:00	1:00	D
+Rule	Mont	1945	1948	-	Sep	lastSun	2:00	0	S
+Rule	Mont	1949	1950	-	Oct	lastSun	2:00	0	S
+Rule	Mont	1951	1956	-	Sep	lastSun	2:00	0	S
+Rule	Mont	1957	1973	-	Oct	lastSun	2:00	0	S
+
+Rule	Toronto	1919	only	-	Mar	30	23:30	1:00	D
+Rule	Toronto	1919	only	-	Oct	26	0:00	0	S
+Rule	Toronto	1920	only	-	May	 2	2:00	1:00	D
+Rule	Toronto	1920	only	-	Sep	26	0:00	0	S
+Rule	Toronto	1921	only	-	May	15	2:00	1:00	D
+Rule	Toronto	1921	only	-	Sep	15	2:00	0	S
+Rule	Toronto	1922	1923	-	May	Sun>=8	2:00	1:00	D
+# Shanks says 1923-09-19; assume it's a typo and that "-16" was meant.
+Rule	Toronto	1922	1926	-	Sep	Sun>=15	2:00	0	S
+Rule	Toronto	1924	1927	-	May	Sun>=1	2:00	1:00	D
+# The 1927-to-1939 rules can be expressed more simply as
+# Rule	Toronto	1927	1937	-	Sep	Sun>=25	2:00	0	S
+# Rule	Toronto	1928	1937	-	Apr	Sun>=25	2:00	1:00	D
+# Rule	Toronto	1938	1940	-	Apr	lastSun	2:00	1:00	D
+# Rule	Toronto	1938	1939	-	Sep	lastSun	2:00	0	S
+# The rules below avoid use of Sun>=25
+# (which pre-2004 versions of zic cannot handle).
+Rule	Toronto	1927	1932	-	Sep	lastSun	2:00	0	S
+Rule	Toronto	1928	1931	-	Apr	lastSun	2:00	1:00	D
+Rule	Toronto	1932	only	-	May	1	2:00	1:00	D
+Rule	Toronto	1933	1940	-	Apr	lastSun	2:00	1:00	D
+Rule	Toronto	1933	only	-	Oct	1	2:00	0	S
+Rule	Toronto	1934	1939	-	Sep	lastSun	2:00	0	S
+Rule	Toronto	1945	1946	-	Sep	lastSun	2:00	0	S
+Rule	Toronto	1946	only	-	Apr	lastSun	2:00	1:00	D
+Rule	Toronto	1947	1949	-	Apr	lastSun	0:00	1:00	D
+Rule	Toronto	1947	1948	-	Sep	lastSun	0:00	0	S
+Rule	Toronto	1949	only	-	Nov	lastSun	0:00	0	S
+Rule	Toronto	1950	1973	-	Apr	lastSun	2:00	1:00	D
+Rule	Toronto	1950	only	-	Nov	lastSun	2:00	0	S
+Rule	Toronto	1951	1956	-	Sep	lastSun	2:00	0	S
+# Shanks says Toronto ended DST a week early in 1971, namely on 1971-10-24,
+# but Mark Brader wrote (2003-05-31) that he checked the 1971-10-30 issue
+# of the Toronto Star, and it said that DST ended 1971-10-31 as usual.
+Rule	Toronto	1957	1973	-	Oct	lastSun	2:00	0	S
+
+# From Paul Eggert (2003-07-27):
+# Willett (1914-03) writes (p. 17) "In the Cities of Fort William, and
+# Port Arthur, Ontario, the principle of the Bill has been in
+# operation for the past three years, and in the City of Moose Jaw,
+# Saskatchewan, for one year."
+
+# From David Bryan via Tory Tronrud, Director/Curator,
+# Thunder Bay Museum (2003-11-12):
+# There is some suggestion, however, that, by-law or not, daylight
+# savings time was being practiced in Fort William and Port Arthur
+# before 1909.... [I]n 1910, the line between the Eastern and Central
+# Time Zones was permanently moved about two hundred miles west to
+# include the Thunder Bay area....  When Canada adopted daylight
+# savings time in 1916, Fort William and Port Arthur, having done so
+# already, did not change their clocks....  During the Second World
+# War,... [t]he cities agreed to implement DST during the summer
+# months for the remainder of the war years.
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Montreal	-4:54:16 -	LMT	1884
+			-5:00	Mont	E%sT	1918
+			-5:00	Canada	E%sT	1919
+			-5:00	Mont	E%sT	1942 Feb  9 2:00s
+			-5:00	Canada	E%sT	1946
+			-5:00	Mont	E%sT	1974
+			-5:00	Canada	E%sT
+Zone America/Toronto	-5:17:32 -	LMT	1895
+			-5:00	Canada	E%sT	1919
+			-5:00	Toronto	E%sT	1942 Feb  9 2:00s
+			-5:00	Canada	E%sT	1946
+			-5:00	Toronto	E%sT	1974
+			-5:00	Canada	E%sT
+Zone America/Thunder_Bay -5:57:00 -	LMT	1895
+			-6:00	-	CST	1910
+			-5:00	-	EST	1942
+			-5:00	Canada	E%sT	1970
+			-5:00	Mont	E%sT	1973
+			-5:00	-	EST	1974
+			-5:00	Canada	E%sT
+Zone America/Nipigon	-5:53:04 -	LMT	1895
+			-5:00	Canada	E%sT	1940 Sep 29
+			-5:00	1:00	EDT	1942 Feb  9 2:00s
+			-5:00	Canada	E%sT
+Zone America/Rainy_River -6:17:56 -	LMT	1895
+			-6:00	Canada	C%sT	1940 Sep 29
+			-6:00	1:00	CDT	1942 Feb  9 2:00s
+			-6:00	Canada	C%sT
+
+
+# Manitoba
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Winn	1916	only	-	Apr	23	0:00	1:00	D
+Rule	Winn	1916	only	-	Sep	17	0:00	0	S
+Rule	Winn	1918	only	-	Apr	14	2:00	1:00	D
+Rule	Winn	1918	only	-	Oct	31	2:00	0	S
+Rule	Winn	1937	only	-	May	16	2:00	1:00	D
+Rule	Winn	1937	only	-	Sep	26	2:00	0	S
+Rule	Winn	1942	only	-	Feb	 9	2:00	1:00	W # War
+Rule	Winn	1945	only	-	Aug	14	23:00u	1:00	P # Peace
+Rule	Winn	1945	only	-	Sep	lastSun	2:00	0	S
+Rule	Winn	1946	only	-	May	12	2:00	1:00	D
+Rule	Winn	1946	only	-	Oct	13	2:00	0	S
+Rule	Winn	1947	1949	-	Apr	lastSun	2:00	1:00	D
+Rule	Winn	1947	1949	-	Sep	lastSun	2:00	0	S
+Rule	Winn	1950	only	-	May	 1	2:00	1:00	D
+Rule	Winn	1950	only	-	Sep	30	2:00	0	S
+Rule	Winn	1951	1960	-	Apr	lastSun	2:00	1:00	D
+Rule	Winn	1951	1958	-	Sep	lastSun	2:00	0	S
+Rule	Winn	1959	only	-	Oct	lastSun	2:00	0	S
+Rule	Winn	1960	only	-	Sep	lastSun	2:00	0	S
+Rule	Winn	1963	only	-	Apr	lastSun	2:00	1:00	D
+Rule	Winn	1963	only	-	Sep	22	2:00	0	S
+Rule	Winn	1966	1986	-	Apr	lastSun	2:00	1:00	D
+Rule	Winn	1966	1986	-	Oct	lastSun	2:00	0	S
+Rule	Winn	1987	2006	-	Apr	Sun>=1	2:00s	1:00	D
+# From Paul Eggert (2000-10-02):
+# INMS (2000-09-12) says that, since 1988 at least, Manitoba switches from
+# DST at 03:00 local time.  For now, assume it started in 1987.
+Rule	Winn	1987	2006	-	Oct	lastSun	2:00s	0	S
+Rule	Winn	2007	max	-	Mar	Sun>=8	2:00s	1:00	D
+Rule	Winn	2007	max	-	Nov	Sun>=1	2:00s	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Winnipeg	-6:28:36 -	LMT	1887 Jul 16
+			-6:00	Winn	C%sT
+
+
+# Saskatchewan
+
+# From Mark Brader (2003-07-26):
+# The first actual adoption of DST in Canada was at the municipal
+# level.  As the [Toronto] Star put it (1912-06-07), "While people
+# elsewhere have long been talking of legislation to save daylight,
+# the city of Moose Jaw [Saskatchewan] has acted on its own hook."
+# DST in Moose Jaw began on Saturday, 1912-06-01 (no time mentioned:
+# presumably late evening, as below), and would run until "the end of
+# the summer".  The discrepancy between municipal time and railroad
+# time was noted.
+
+# From Paul Eggert (2003-07-27):
+# Willett (1914-03) notes that DST "has been in operation ... in the
+# City of Moose Jaw, Saskatchewan, for one year."
+
+# From Paul Eggert (2000-10-02):
+# Shanks writes that since 1970 most of this region has been like Regina.
+# Some western towns (e.g. Swift Current) switched from MST/MDT to CST in 1972.
+# Other western towns (e.g. Lloydminster) are like Edmonton.
+# Matthews and Vincent (1998) write that Denare Beach and Creighton
+# are like Winnipeg, in violation of Saskatchewan law.
+
+# From W. Jones (1992-11-06):
+# The. . .below is based on information I got from our law library, the
+# provincial archives, and the provincial Community Services department.
+# A precise history would require digging through newspaper archives, and
+# since you didn't say what you wanted, I didn't bother.
+#
+# Saskatchewan is split by a time zone meridian (105W) and over the years
+# the boundary became pretty ragged as communities near it reevaluated
+# their affiliations in one direction or the other.  In 1965 a provincial
+# referendum favoured legislating common time practices.
+#
+# On 15 April 1966 the Time Act (c. T-14, Revised Statutes of
+# Saskatchewan 1978) was proclaimed, and established that the eastern
+# part of Saskatchewan would use CST year round, that districts in
+# northwest Saskatchewan would by default follow CST but could opt to
+# follow Mountain Time rules (thus 1 hour difference in the winter and
+# zero in the summer), and that districts in southwest Saskatchewan would
+# by default follow MT but could opt to follow CST.
+#
+# It took a few years for the dust to settle (I know one story of a town
+# on one time zone having its school in another, such that a mom had to
+# serve her family lunch in two shifts), but presently it seems that only
+# a few towns on the border with Alberta (e.g. Lloydminster) follow MT
+# rules any more; all other districts appear to have used CST year round
+# since sometime in the 1960s.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Regina	1918	only	-	Apr	14	2:00	1:00	D
+Rule	Regina	1918	only	-	Oct	31	2:00	0	S
+Rule	Regina	1930	1934	-	May	Sun>=1	0:00	1:00	D
+Rule	Regina	1930	1934	-	Oct	Sun>=1	0:00	0	S
+Rule	Regina	1937	1941	-	Apr	Sun>=8	0:00	1:00	D
+Rule	Regina	1937	only	-	Oct	Sun>=8	0:00	0	S
+Rule	Regina	1938	only	-	Oct	Sun>=1	0:00	0	S
+Rule	Regina	1939	1941	-	Oct	Sun>=8	0:00	0	S
+Rule	Regina	1942	only	-	Feb	 9	2:00	1:00	W # War
+Rule	Regina	1945	only	-	Aug	14	23:00u	1:00	P # Peace
+Rule	Regina	1945	only	-	Sep	lastSun	2:00	0	S
+Rule	Regina	1946	only	-	Apr	Sun>=8	2:00	1:00	D
+Rule	Regina	1946	only	-	Oct	Sun>=8	2:00	0	S
+Rule	Regina	1947	1957	-	Apr	lastSun	2:00	1:00	D
+Rule	Regina	1947	1957	-	Sep	lastSun	2:00	0	S
+Rule	Regina	1959	only	-	Apr	lastSun	2:00	1:00	D
+Rule	Regina	1959	only	-	Oct	lastSun	2:00	0	S
+#
+Rule	Swift	1957	only	-	Apr	lastSun	2:00	1:00	D
+Rule	Swift	1957	only	-	Oct	lastSun	2:00	0	S
+Rule	Swift	1959	1961	-	Apr	lastSun	2:00	1:00	D
+Rule	Swift	1959	only	-	Oct	lastSun	2:00	0	S
+Rule	Swift	1960	1961	-	Sep	lastSun	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Regina	-6:58:36 -	LMT	1905 Sep
+			-7:00	Regina	M%sT	1960 Apr lastSun 2:00
+			-6:00	-	CST
+Zone America/Swift_Current -7:11:20 -	LMT	1905 Sep
+			-7:00	Canada	M%sT	1946 Apr lastSun 2:00
+			-7:00	Regina	M%sT	1950
+			-7:00	Swift	M%sT	1972 Apr lastSun 2:00
+			-6:00	-	CST
+
+
+# Alberta
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Edm	1918	1919	-	Apr	Sun>=8	2:00	1:00	D
+Rule	Edm	1918	only	-	Oct	31	2:00	0	S
+Rule	Edm	1919	only	-	May	27	2:00	0	S
+Rule	Edm	1920	1923	-	Apr	lastSun	2:00	1:00	D
+Rule	Edm	1920	only	-	Oct	lastSun	2:00	0	S
+Rule	Edm	1921	1923	-	Sep	lastSun	2:00	0	S
+Rule	Edm	1942	only	-	Feb	 9	2:00	1:00	W # War
+Rule	Edm	1945	only	-	Aug	14	23:00u	1:00	P # Peace
+Rule	Edm	1945	only	-	Sep	lastSun	2:00	0	S
+Rule	Edm	1947	only	-	Apr	lastSun	2:00	1:00	D
+Rule	Edm	1947	only	-	Sep	lastSun	2:00	0	S
+Rule	Edm	1967	only	-	Apr	lastSun	2:00	1:00	D
+Rule	Edm	1967	only	-	Oct	lastSun	2:00	0	S
+Rule	Edm	1969	only	-	Apr	lastSun	2:00	1:00	D
+Rule	Edm	1969	only	-	Oct	lastSun	2:00	0	S
+Rule	Edm	1972	1986	-	Apr	lastSun	2:00	1:00	D
+Rule	Edm	1972	max	-	Oct	lastSun	2:00	0	S
+Rule	Edm	1987	max	-	Apr	Sun>=1	2:00	1:00	D
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Edmonton	-7:33:52 -	LMT	1906 Sep
+			-7:00	Edm	M%sT
+
+
+# British Columbia
+
+# From Paul Eggert (2000-10-02):
+# Shanks writes that since 1970 most of this region has been like Vancouver.
+# Dawson Creek uses MST.  Much of east BC is like Edmonton.
+# Matthews and Vincent (1998) write that Creston is like Dawson Creek.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Vanc	1918	only	-	Apr	14	2:00	1:00	D
+Rule	Vanc	1918	only	-	Oct	31	2:00	0	S
+Rule	Vanc	1942	only	-	Feb	 9	2:00	1:00	W # War
+Rule	Vanc	1945	only	-	Aug	14	23:00u	1:00	P # Peace
+Rule	Vanc	1945	only	-	Sep	30	2:00	0	S
+Rule	Vanc	1946	1986	-	Apr	lastSun	2:00	1:00	D
+Rule	Vanc	1946	only	-	Oct	13	2:00	0	S
+Rule	Vanc	1947	1961	-	Sep	lastSun	2:00	0	S
+Rule	Vanc	1962	max	-	Oct	lastSun	2:00	0	S
+Rule	Vanc	1987	max	-	Apr	Sun>=1	2:00	1:00	D
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Vancouver	-8:12:28 -	LMT	1884
+			-8:00	Vanc	P%sT
+Zone America/Dawson_Creek -8:00:56 -	LMT	1884
+			-8:00	Canada	P%sT	1947
+			-8:00	Vanc	P%sT	1972 Aug 30 2:00
+			-7:00	-	MST
+
+
+# Northwest Territories, Nunavut, Yukon
+
+# From Paul Eggert (1999-10-29):
+# Dawson switched to PST in 1973.  Inuvik switched to MST in 1979.
+# Mathew Englander (1996-10-07) gives the following refs:
+#	* 1967. Paragraph 28(34)(g) of the Interpretation Act, S.C. 1967-68,
+#	c. 7 defines Yukon standard time as UTC-9.  This is still valid;
+#	see Interpretation Act, R.S.C. 1985, c. I-21, s. 35(1).
+#	* C.O. 1973/214 switched Yukon to PST on 1973-10-28 00:00.
+#	* O.I.C. 1980/02 established DST.
+#	* O.I.C. 1987/056 changed DST to Apr firstSun 2:00 to Oct lastSun 2:00.
+# Shanks says Yukon's 1973-10-28 switch was at 2:00; go with Englander.
+
+# From Rives McDow (1999-09-04):
+# Nunavut ... moved ... to incorporate the whole territory into one time zone.
+# <a href="http://www.nunatsiaq.com/nunavut/nvt90903_13.html">
+# Nunavut moves to single time zone Oct. 31
+# </a>
+#
+# From Antoine Leca (1999-09-06):
+# We then need to create a new timezone for the Kitikmeot region of Nunavut
+# to differentiate it from the Yellowknife region.
+
+# From Paul Eggert (1999-09-20):
+# <a href="http://www.nunavut.com/basicfacts/english/basicfacts_1territory.html">
+# Basic Facts: The New Territory
+# </a> (1999) reports that Pangnirtung operates on eastern time,
+# and that Coral Harbour does not observe DST.  We don't know when
+# Pangnirtung switched to eastern time; we'll guess 1995.
+
+# From Rives McDow (1999-11-08):
+# On October 31, when the rest of Nunavut went to Central time,
+# Pangnirtung wobbled.  Here is the result of their wobble:
+#
+# The following businesses and organizations in Pangnirtung use Central Time:
+#
+#	First Air, Power Corp, Nunavut Construction, Health Center, RCMP,
+#	Eastern Arctic National Parks, A & D Specialist
+#
+# The following businesses and organizations in Pangnirtung use Eastern Time:
+#
+#	Hamlet office, All other businesses, Both schools, Airport operator
+#
+# This has made for an interesting situation there, which warranted the news.
+# No one there that I spoke with seems concerned, or has plans to
+# change the local methods of keeping time, as it evidently does not
+# really interfere with any activities or make things difficult locally.
+# They plan to celebrate New Year's turn-over twice, one hour apart,
+# so it appears that the situation will last at least that long.
+# The Nunavut Intergovernmental Affairs hopes that they will "come to
+# their senses", but the locals evidently don't see any problem with
+# the current state of affairs.
+
+# From Michaela Rodrigue, writing in the
+# <a href="http://www.nunatsiaq.com/archives/nunavut991130/nvt91119_17.html">
+# Nunatsiaq News (1999-11-19)</a>:
+# Clyde River, Pangnirtung and Sanikiluaq now operate with two time zones,
+# central - or Nunavut time - for government offices, and eastern time
+# for municipal offices and schools....  Igloolik [was similar but then]
+# made the switch to central time on Saturday, Nov. 6.
+
+# From Paul Eggert (2000-10-02):
+# Matthews and Vincent (1998) say the following, but we lack histories
+# for these potential new Zones.
+#
+# The Canadian Forces station at Alert uses Eastern Time while the
+# handful of residents at the Eureka weather station [in the Central
+# zone] skip daylight savings.  Baffin Island, which is crossed by the
+# Central, Eastern and Atlantic Time zones only uses Eastern Time.
+# Gjoa Haven, Taloyoak and Pelly Bay all use Mountain instead of
+# Central Time and Southampton Island [in the Central zone] is not
+# required to use daylight savings.
+
+# From
+# <a href="http://www.nunatsiaq.com/archives/nunavut001130/nvt21110_02.html">
+# Nunavut now has two time zones
+# </a> (2000-11-10):
+# The Nunavut government would allow its employees in Kugluktuk and
+# Cambridge Bay to operate on central time year-round, putting them
+# one hour behind the rest of Nunavut for six months during the winter.
+# At the end of October the two communities had rebelled against
+# Nunavut's unified time zone, refusing to shift to eastern time with
+# the rest of the territory for the winter.  Cambridge Bay remained on
+# central time, while Kugluktuk, even farther west, reverted to
+# mountain time, which they had used before the advent of Nunavut's
+# unified time zone in 1999.
+#
+# From Rives McDow (2001-01-20), quoting the Nunavut government:
+# The preceding decision came into effect at midnight, Saturday Nov 4, 2000.
+
+# From Paul Eggert (2000-12-04):
+# Let's just keep track of the official times for now.
+
+# From Rives McDow (2001-03-07):
+# The premier of Nunavut has issued a ministerial statement advising
+# that effective 2001-04-01, the territory of Nunavut will revert
+# back to three time zones (mountain, central, and eastern).  Of the
+# cities in Nunavut, Coral Harbor is the only one that I know of that
+# has said it will not observe dst, staying on EST year round.  I'm
+# checking for more info, and will get back to you if I come up with
+# more.
+# [Also see <http://www.nunatsiaq.com/nunavut/nvt10309_06.html> (2001-03-09).]
+
+# From Gwillim Law (2005-05-21):
+# According to maps at
+# http://inms-ienm.nrc-cnrc.gc.ca/images/time_services/TZ01SWE.jpg
+# http://inms-ienm.nrc-cnrc.gc.ca/images/time_services/TZ01SSE.jpg
+# (both dated 2003), and
+# http://www.canadiangeographic.ca/Magazine/SO98/geomap.asp
+# (from a 1998 Canadian Geographic article), the de facto and de jure time
+# for Southampton Island (at the north end of Hudson Bay) is UTC-5 all year
+# round.  Using Google, it's easy to find other websites that confirm this.
+# I wasn't able to find how far back this time regimen goes, but since it
+# predates the creation of Nunavut, it probably goes back many years....
+# The Inuktitut name of Coral Harbour is Sallit, but it's rarely used.
+#
+# From Paul Eggert (2005-07-26):
+# For lack of better information, assume that Southampton Island observed
+# daylight saving only during wartime.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	NT_YK	1918	only	-	Apr	14	2:00	1:00	D
+Rule	NT_YK	1918	only	-	Oct	27	2:00	0	S
+Rule	NT_YK	1919	only	-	May	25	2:00	1:00	D
+Rule	NT_YK	1919	only	-	Nov	 1	0:00	0	S
+Rule	NT_YK	1942	only	-	Feb	 9	2:00	1:00	W # War
+Rule	NT_YK	1945	only	-	Aug	14	23:00u	1:00	P # Peace
+Rule	NT_YK	1945	only	-	Sep	30	2:00	0	S
+Rule	NT_YK	1965	only	-	Apr	lastSun	0:00	2:00	DD
+Rule	NT_YK	1965	only	-	Oct	lastSun	2:00	0	S
+Rule	NT_YK	1980	1986	-	Apr	lastSun	2:00	1:00	D
+Rule	NT_YK	1980	max	-	Oct	lastSun	2:00	0	S
+Rule	NT_YK	1987	max	-	Apr	Sun>=1	2:00	1:00	D
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Pangnirtung -4:22:56 -	LMT	1884
+			-4:00	NT_YK	A%sT	1995 Apr Sun>=1 2:00
+			-5:00	Canada	E%sT	1999 Oct 31 2:00
+			-6:00	Canada	C%sT	2000 Oct 29 2:00
+			-5:00	Canada	E%sT
+Zone America/Iqaluit	-4:33:52 -	LMT	1884 # Frobisher Bay before 1987
+			-5:00	NT_YK	E%sT	1999 Oct 31 2:00
+			-6:00	Canada	C%sT	2000 Oct 29 2:00
+			-5:00	Canada	E%sT
+Zone America/Coral_Harbour -5:32:40 -	LMT	1884
+			-5:00	NT_YK	E%sT	1946
+			-5:00	-	EST
+Zone America/Rankin_Inlet -6:08:40 -	LMT	1884
+			-6:00	NT_YK	C%sT	2000 Oct 29 2:00
+			-5:00	-	EST	2001 Apr  1 3:00
+			-6:00	Canada	C%sT
+Zone America/Cambridge_Bay -7:00:20 -	LMT	1884
+			-7:00	NT_YK	M%sT	1999 Oct 31 2:00
+			-6:00	Canada	C%sT	2000 Oct 29 2:00
+			-5:00	-	EST	2000 Nov  5 0:00
+			-6:00	-	CST	2001 Apr  1 3:00
+			-7:00	Canada	M%sT
+Zone America/Yellowknife -7:37:24 -	LMT	1884
+			-7:00	NT_YK	M%sT
+Zone America/Inuvik	-8:54:00 -	LMT	1884
+			-8:00	NT_YK	P%sT	1979 Apr lastSun 2:00
+			-7:00	NT_YK	M%sT
+Zone America/Whitehorse	-9:00:12 -	LMT	1900 Aug 20
+			-9:00	NT_YK	Y%sT	1966 Jul 1 2:00
+			-8:00	NT_YK	P%sT
+Zone America/Dawson	-9:17:40 -	LMT	1900 Aug 20
+			-9:00	NT_YK	Y%sT	1973 Oct 28 0:00
+			-8:00	NT_YK	P%sT
+
+
+###############################################################################
+
+# Mexico
+
+# From Paul Eggert (2001-03-05):
+# The Investigation and Analysis Service of the
+# Mexican Library of Congress (MLoC) has published a
+# <a href="http://www.cddhcu.gob.mx/bibliot/publica/inveyana/polisoc/horver/">
+# history of Mexican local time (in Spanish)
+# </a>.
+#
+# Here are the discrepancies between Shanks and the MLoC.
+# (In all cases we go with the MLoC.)
+# Shanks reports that Baja was at -8:00 in 1922/1923.
+# Shanks says the 1930 transition in Baja was 1930-11-16.
+# Shanks reports no DST during summer 1931.
+# Shanks reports a transition at 1932-03-30 23:00, not 1932-04-01.
+# Shanks does not report transitions for Baja in 1945 or 1948.
+# Shanks reports southern Mexico transitions on 1981-12-01, not 12-23.
+# Shanks says Quintana Roo switched to -6:00 on 1982-12-02, and to -5:00
+# on 1997-10-26 at 02:00.
+
+# From Gwillim Law (2001-02-20):
+# There are some other discrepancies between the Decrees page and the
+# tz database.  I think they can best be explained by supposing that
+# the researchers who prepared the Decrees page failed to find some of
+# the relevant documents.
+
+# From Paul Eggert (2000-07-26):
+# Shanks gives 1942-04-01 instead of 1942-04-24, and omits the 1981
+# and 1988 DST experiments.  Go with spin.com.mx.
+
+# From Alan Perry (1996-02-15):
+# A guy from our Mexico subsidiary finally found the Presidential Decree
+# outlining the timezone changes in Mexico.
+#
+# ------------- Begin Forwarded Message -------------
+#
+# I finally got my hands on the Official Presidential Decree that sets up the
+# rules for the DST changes. The rules are:
+#
+# 1. The country is divided in 3 timezones:
+#    - Baja California Norte (the Mexico/BajaNorte TZ)
+#    - Baja California Sur, Nayarit, Sinaloa and Sonora (the Mexico/BajaSur TZ)
+#    - The rest of the country (the Mexico/General TZ)
+#
+# 2. From the first Sunday in April at 2:00 AM to the last Sunday in October
+#    at 2:00 AM, the times in each zone are as follows:
+#    BajaNorte: GMT+7
+#    BajaSur:   GMT+6
+#    General:   GMT+5
+#
+# 3. The rest of the year, the times are as follows:
+#    BajaNorte: GMT+8
+#    BajaSur:   GMT+7
+#    General:   GMT+6
+#
+# The Decree was published in Mexico's Official Newspaper on January 4th.
+#
+# -------------- End Forwarded Message --------------
+# From Paul Eggert (1996-06-12):
+# For an English translation of the decree, see
+# <a href="http://mexico-travel.com/extra/timezone_eng.html">
+# ``Diario Oficial: Time Zone Changeover'' (1996-01-04).
+# </a>
+
+# From Rives McDow (1998-10-08):
+# The State of Quintana Roo has reverted back to central STD and DST times
+# (i.e. UTC -0600 and -0500 as of 1998-08-02).
+
+# From Rives McDow (2000-01-10):
+# Effective April 4, 1999 at 2:00 AM local time, Sonora changed to the time
+# zone 5 hours from the International Date Line, and will not observe daylight
+# savings time so as to stay on the same time zone as the southern part of
+# Arizona year round.
+
+# From Jesper Norgaard, translating
+# <http://www.reforma.com/nacional/articulo/064327/> (2001-01-17):
+# In Oaxaca, the 55.000 teachers from the Section 22 of the National
+# Syndicate of Education Workers, refuse to apply daylight saving each
+# year, so that the more than 10,000 schools work at normal hour the
+# whole year.
+
+# From Gwillim Law (2001-01-19):
+# <http://www.reforma.com/negocios_y_dinero/articulo/064481/> ... says
+# (translated):...
+# January 17, 2000 - The Energy Secretary, Ernesto Martens, announced
+# that Summer Time will be reduced from seven to five months, starting
+# this year....
+# <http://www.publico.com.mx/scripts/texto3.asp?action=pagina&pag=21&pos=p&secc=naci&date=01/17/2001>
+# [translated], says "summer time will ... take effect on the first Sunday
+# in May, and end on the last Sunday of September.
+
+# From Arthur David Olson (2001-01-25):
+# The 2001-01-24 traditional Washington Post contained the page one
+# story "Timely Issue Divides Mexicans."...
+# http://www.washingtonpost.com/wp-dyn/articles/A37383-2001Jan23.html
+# ... Mexico City Mayor Lopez Obrador "...is threatening to keep
+# Mexico City and its 20 million residents on a different time than
+# the rest of the country..." In particular, Lopez Obrador would abolish
+# observation of Daylight Saving Time.
+
+# <a href="http://www.conae.gob.mx/ahorro/decretohorver2001.html#decre">
+# Official statute published by the Energy Department
+# </a> (2001-02-01) shows Baja and Chihauhua as still using US DST rules,
+# and Sonora with no DST.  This was reported by Jesper Norgaard (2001-02-03).
+
+# From Paul Eggert (2001-03-03):
+#
+# <a href="http://www.latimes.com/news/nation/20010303/t000018766.html">
+# James F. Smith writes in today's LA Times
+# </a>
+# * Sonora will continue to observe standard time.
+# * Last week Mexico City's mayor Andres Manuel Lopez Obrador decreed that
+#   the Federal District will not adopt DST.
+# * 4 of 16 district leaders announced they'll ignore the decree.
+# * The decree does not affect federal-controlled facilities including
+#   the airport, banks, hospitals, and schools.
+#
+# For now we'll assume that the Federal District will bow to federal rules.
+
+# From Jesper Norgaard (2001-04-01):
+# I found some references to the Mexican application of daylight
+# saving, which modifies what I had already sent you, stating earlier
+# that a number of northern Mexican states would go on daylight
+# saving. The modification reverts this to only cover Baja California
+# (Norte), while all other states (except Sonora, who has no daylight
+# saving all year) will follow the original decree of president
+# Vicente Fox, starting daylight saving May 6, 2001 and ending
+# September 30, 2001.
+# References: "Diario de Monterrey" <www.diariodemonterrey.com/index.asp>
+# Palabra <http://palabra.infosel.com/010331/primera/ppri3101.pdf> (2001-03-31)
+
+# From Reuters (2001-09-04):
+# Mexico's Supreme Court on Tuesday declared that daylight savings was
+# unconstitutional in Mexico City, creating the possibility the
+# capital will be in a different time zone from the rest of the nation
+# next year....  The Supreme Court's ruling takes effect at 2:00
+# a.m. (0800 GMT) on Sept. 30, when Mexico is scheduled to revert to
+# standard time. "This is so residents of the Federal District are not
+# subject to unexpected time changes," a statement from the court said.
+
+# From Jesper Norgaard Welen (2002-03-12):
+# ... consulting my local grocery store(!) and my coworkers, they all insisted
+# that a new decision had been made to reinstate US style DST in Mexico....
+# http://www.conae.gob.mx/ahorro/horaver2001_m1_2002.html (2002-02-20)
+# confirms this.  Sonora as usual is the only state where DST is not applied.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Mexico	1939	only	-	Feb	5	0:00	1:00	D
+Rule	Mexico	1939	only	-	Jun	25	0:00	0	S
+Rule	Mexico	1940	only	-	Dec	9	0:00	1:00	D
+Rule	Mexico	1941	only	-	Apr	1	0:00	0	S
+Rule	Mexico	1943	only	-	Dec	16	0:00	1:00	W # War
+Rule	Mexico	1944	only	-	May	1	0:00	0	S
+Rule	Mexico	1950	only	-	Feb	12	0:00	1:00	D
+Rule	Mexico	1950	only	-	Jul	30	0:00	0	S
+Rule	Mexico	1996	2000	-	Apr	Sun>=1	2:00	1:00	D
+Rule	Mexico	1996	2000	-	Oct	lastSun	2:00	0	S
+Rule	Mexico	2001	only	-	May	Sun>=1	2:00	1:00	D
+Rule	Mexico	2001	only	-	Sep	lastSun	2:00	0	S
+Rule	Mexico	2002	max	-	Apr	Sun>=1	2:00	1:00	D
+Rule	Mexico	2002	max	-	Oct	lastSun	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+# Quintana Roo
+Zone America/Cancun	-5:47:04 -	LMT	1922 Jan  1  0:12:56
+			-6:00	-	CST	1981 Dec 23
+			-5:00	Mexico	E%sT	1998 Aug  2  2:00
+			-6:00	Mexico	C%sT
+# Campeche, Yucatan
+Zone America/Merida	-5:58:28 -	LMT	1922 Jan  1  0:01:32
+			-6:00	-	CST	1981 Dec 23
+			-5:00	-	EST	1982 Dec  2
+			-6:00	Mexico	C%sT
+# Coahuila, Durango, Nuevo Leon, Tamaulipas
+Zone America/Monterrey	-6:41:16 -	LMT	1921 Dec 31 23:18:44
+			-6:00	-	CST	1988
+			-6:00	US	C%sT	1989
+			-6:00	Mexico	C%sT
+# Central Mexico
+Zone America/Mexico_City -6:36:36 -	LMT	1922 Jan  1  0:23:24
+			-7:00	-	MST	1927 Jun 10 23:00
+			-6:00	-	CST	1930 Nov 15
+			-7:00	-	MST	1931 May  1 23:00
+			-6:00	-	CST	1931 Oct
+			-7:00	-	MST	1932 Apr  1
+			-6:00	Mexico	C%sT	2001 Sep 30 02:00
+			-6:00	-	CST	2002 Feb 20
+			-6:00	Mexico	C%sT
+# Chihuahua
+Zone America/Chihuahua	-7:04:20 -	LMT	1921 Dec 31 23:55:40
+			-7:00	-	MST	1927 Jun 10 23:00
+			-6:00	-	CST	1930 Nov 15
+			-7:00	-	MST	1931 May  1 23:00
+			-6:00	-	CST	1931 Oct
+			-7:00	-	MST	1932 Apr  1
+			-6:00	-	CST	1996
+			-6:00	Mexico	C%sT	1998
+			-6:00	-	CST	1998 Apr Sun>=1 3:00
+			-7:00	Mexico	M%sT
+# Sonora
+Zone America/Hermosillo	-7:23:52 -	LMT	1921 Dec 31 23:36:08
+			-7:00	-	MST	1927 Jun 10 23:00
+			-6:00	-	CST	1930 Nov 15
+			-7:00	-	MST	1931 May  1 23:00
+			-6:00	-	CST	1931 Oct
+			-7:00	-	MST	1932 Apr  1
+			-6:00	-	CST	1942 Apr 24
+			-7:00	-	MST	1949 Jan 14
+			-8:00	-	PST	1970
+			-7:00	Mexico	M%sT	1999
+			-7:00	-	MST
+# Baja California Sur, Nayarit, Sinaloa
+Zone America/Mazatlan	-7:05:40 -	LMT	1921 Dec 31 23:54:20
+			-7:00	-	MST	1927 Jun 10 23:00
+			-6:00	-	CST	1930 Nov 15
+			-7:00	-	MST	1931 May  1 23:00
+			-6:00	-	CST	1931 Oct
+			-7:00	-	MST	1932 Apr  1
+			-6:00	-	CST	1942 Apr 24
+			-7:00	-	MST	1949 Jan 14
+			-8:00	-	PST	1970
+			-7:00	Mexico	M%sT
+# Baja California
+Zone America/Tijuana	-7:48:04 -	LMT	1922 Jan  1  0:11:56
+			-7:00	-	MST	1924
+			-8:00	-	PST	1927 Jun 10 23:00
+			-7:00	-	MST	1930 Nov 15
+			-8:00	-	PST	1931 Apr  1
+			-8:00	1:00	PDT	1931 Sep 30
+			-8:00	-	PST	1942 Apr 24
+			-8:00	1:00	PWT	1945 Nov 12
+			-8:00	-	PST	1948 Apr  5
+			-8:00	1:00	PDT	1949 Jan 14
+			-8:00	-	PST	1954
+			-8:00	CA	P%sT	1961
+			-8:00	-	PST	1976
+			-8:00	US	P%sT	1996
+			-8:00	Mexico	P%sT	2001
+			-8:00	US	P%sT	2002 Feb 20
+			-8:00	Mexico	P%sT
+# From Paul Eggert (2001-03-05):
+# Formerly there was an America/Ensenada zone, which differed from
+# America/Tijuana only in that it did not observe DST from 1976
+# through 1995.  This was as per Shanks.  However, Guy Harris reports
+# that the 1987 OAG says "Only Ensenada, Mexicale, San Felipe and
+# Tijuana observe DST," which contradicts Shanks but does imply that
+# DST-observance was a town-by-town matter back then.  This concerns
+# data after 1970 so most likely there should be at least one Zone
+# other than America/Tijuana for Baja, but it's not clear yet what its
+# name or contents should be.
+#
+# Revillagigedo Is
+# no information
+
+###############################################################################
+
+# Anguilla
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Anguilla	-4:12:16 -	LMT	1912 Mar 2
+			-4:00	-	AST
+
+# Antigua and Barbuda
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Antigua	-4:07:12 -	LMT	1912 Mar 2
+			-5:00	-	EST	1951
+			-4:00	-	AST
+
+# Bahamas
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Bahamas	1964	max	-	Oct	lastSun	2:00	0	S
+Rule	Bahamas	1964	1986	-	Apr	lastSun	2:00	1:00	D
+Rule	Bahamas	1987	max	-	Apr	Sun>=1	2:00	1:00	D
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Nassau	-5:09:24 -	LMT	1912 Mar 2
+			-5:00	Bahamas	E%sT
+
+# Barbados
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Barb	1977	only	-	Jun	12	2:00	1:00	D
+Rule	Barb	1977	1978	-	Oct	Sun>=1	2:00	0	S
+Rule	Barb	1978	1980	-	Apr	Sun>=15	2:00	1:00	D
+Rule	Barb	1979	only	-	Sep	30	2:00	0	S
+Rule	Barb	1980	only	-	Sep	25	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Barbados	-3:58:28 -	LMT	1924		# Bridgetown
+			-3:58:28 -	BMT	1932	  # Bridgetown Mean Time
+			-4:00	Barb	A%sT
+
+# Belize
+# Whitman entirely disagrees with Shanks; go with Shanks.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Belize	1918	1942	-	Oct	Sun>=2	0:00	0:30	HD
+Rule	Belize	1919	1943	-	Feb	Sun>=9	0:00	0	S
+Rule	Belize	1973	only	-	Dec	 5	0:00	1:00	D
+Rule	Belize	1974	only	-	Feb	 9	0:00	0	S
+Rule	Belize	1982	only	-	Dec	18	0:00	1:00	D
+Rule	Belize	1983	only	-	Feb	12	0:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Belize	-5:52:48 -	LMT	1912 Apr
+			-6:00	Belize	C%sT
+
+# Bermuda
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Atlantic/Bermuda	-4:19:04 -	LMT	1930 Jan  1 2:00    # Hamilton
+			-4:00	-	AST	1974 Apr 28 2:00
+			-4:00	Bahamas	A%sT
+
+# Cayman Is
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Cayman	-5:25:32 -	LMT	1890		# Georgetown
+			-5:07:12 -	KMT	1912 Feb    # Kingston Mean Time
+			-5:00	-	EST
+
+# Costa Rica
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	CR	1979	1980	-	Feb	lastSun	0:00	1:00	D
+Rule	CR	1979	1980	-	Jun	Sun>=1	0:00	0	S
+Rule	CR	1991	1992	-	Jan	Sat>=15	0:00	1:00	D
+# IATA SSIM (1991-09) says the following was at 1:00; go with Shanks.
+Rule	CR	1991	only	-	Jul	 1	0:00	0	S
+Rule	CR	1992	only	-	Mar	15	0:00	0	S
+# There are too many San Joses elsewhere, so we'll use `Costa Rica'.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Costa_Rica	-5:36:20 -	LMT	1890		# San Jose
+			-5:36:20 -	SJMT	1921 Jan 15 # San Jose Mean Time
+			-6:00	CR	C%sT
+# Coco
+# no information; probably like America/Costa_Rica
+
+# Cuba
+
+# From Arthur David Olson (1999-03-29):
+# The 1999-03-28 exhibition baseball game held in Havana, Cuba, between
+# the Cuban National Team and the Baltimore Orioles was carried live on
+# the Orioles Radio Network, including affiliate WTOP in Washington, DC.
+# During the game, play-by-play announcer Jim Hunter noted that
+# "We'll be losing two hours of sleep...Cuba switched to Daylight Saving
+# Time today."  (The "two hour" remark referred to losing one hour of
+# sleep on 1999-03-28--when the announcers were in Cuba as it switched
+# to DST--and one more hour on 1999-04-04--when the announcers will have
+# returned to Baltimore, which switches on that date.)
+
+# From Evert van der Veer via Steffen Thorsen (2004-10-28):
+# Cuba is not going back to standard time this year.
+# From Paul Eggert (2004-10-28):
+# http://www.granma.cu/ingles/2004/septiembre/juev30/41medid-i.html
+# says that it's due to a problem at the Antonio Guiteras
+# thermoelectric plant, and says "This October there will be no return
+# to normal hours (after daylight saving time)".
+# For now, let's assume that it's a one-year temporary measure.
+
+# From Carlos A. Carnero Delgado (2005-11-12):
+# This year (just like in 2004-2005) there's no change in time zone
+# adjustment in Cuba.  We will stay in daylight saving time:
+# http://www.granma.cu/espanol/2005/noviembre/mier9/horario.html
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Cuba	1928	only	-	Jun	10	0:00	1:00	D
+Rule	Cuba	1928	only	-	Oct	10	0:00	0	S
+Rule	Cuba	1940	1942	-	Jun	Sun>=1	0:00	1:00	D
+Rule	Cuba	1940	1942	-	Sep	Sun>=1	0:00	0	S
+Rule	Cuba	1945	1946	-	Jun	Sun>=1	0:00	1:00	D
+Rule	Cuba	1945	1946	-	Sep	Sun>=1	0:00	0	S
+Rule	Cuba	1965	only	-	Jun	1	0:00	1:00	D
+Rule	Cuba	1965	only	-	Sep	30	0:00	0	S
+Rule	Cuba	1966	only	-	May	29	0:00	1:00	D
+Rule	Cuba	1966	only	-	Oct	2	0:00	0	S
+Rule	Cuba	1967	only	-	Apr	8	0:00	1:00	D
+Rule	Cuba	1967	1968	-	Sep	Sun>=8	0:00	0	S
+Rule	Cuba	1968	only	-	Apr	14	0:00	1:00	D
+Rule	Cuba	1969	1977	-	Apr	lastSun	0:00	1:00	D
+Rule	Cuba	1969	1971	-	Oct	lastSun	0:00	0	S
+Rule	Cuba	1972	1974	-	Oct	8	0:00	0	S
+Rule	Cuba	1975	1977	-	Oct	lastSun	0:00	0	S
+Rule	Cuba	1978	only	-	May	7	0:00	1:00	D
+Rule	Cuba	1978	1990	-	Oct	Sun>=8	0:00	0	S
+Rule	Cuba	1979	1980	-	Mar	Sun>=15	0:00	1:00	D
+Rule	Cuba	1981	1985	-	May	Sun>=5	0:00	1:00	D
+Rule	Cuba	1986	1989	-	Mar	Sun>=14	0:00	1:00	D
+Rule	Cuba	1990	1997	-	Apr	Sun>=1	0:00	1:00	D
+Rule	Cuba	1991	1995	-	Oct	Sun>=8	0:00s	0	S
+Rule	Cuba	1996	only	-	Oct	 6	0:00s	0	S
+Rule	Cuba	1997	only	-	Oct	12	0:00s	0	S
+Rule	Cuba	1998	1999	-	Mar	lastSun	0:00s	1:00	D
+Rule	Cuba	1998	2003	-	Oct	lastSun	0:00s	0	S
+Rule	Cuba	2000	max	-	Apr	Sun>=1	0:00s	1:00	D
+Rule	Cuba	2006	max	-	Oct	lastSun	0:00s	0	S
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Havana	-5:29:28 -	LMT	1890
+			-5:29:36 -	HMT	1925 Jul 19 12:00 # Havana MT
+			-5:00	Cuba	C%sT
+
+# Dominica
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Dominica	-4:05:36 -	LMT	1911 Jul 1 0:01		# Roseau
+			-4:00	-	AST
+
+# Dominican Republic
+
+# From Steffen Thorsen (2000-10-30):
+# Enrique Morales reported to me that the Dominican Republic has changed the
+# time zone to Eastern Standard Time as of Sunday 29 at 2 am....
+# http://www.listin.com.do/antes/261000/republica/princi.html
+
+# From Paul Eggert (2000-12-04):
+# That URL (2000-10-26, in Spanish) says they planned to use US-style DST.
+
+# From Rives McDow (2000-12-01):
+# Dominican Republic changed its mind and presidential decree on Tuesday,
+# November 28, 2000, with a new decree.  On Sunday, December 3 at 1:00 AM the
+# Dominican Republic will be reverting to 8 hours from the International Date
+# Line, and will not be using DST in the foreseeable future.  The reason they
+# decided to use DST was to be in synch with Puerto Rico, who was also going
+# to implement DST.  When Puerto Rico didn't implement DST, the president
+# decided to revert.
+
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	DR	1966	only	-	Oct	30	0:00	1:00	D
+Rule	DR	1967	only	-	Feb	28	0:00	0	S
+Rule	DR	1969	1973	-	Oct	lastSun	0:00	0:30	HD
+Rule	DR	1970	only	-	Feb	21	0:00	0	S
+Rule	DR	1971	only	-	Jan	20	0:00	0	S
+Rule	DR	1972	1974	-	Jan	21	0:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Santo_Domingo -4:39:36 -	LMT	1890
+			-4:40	-	SDMT	1933 Apr  1 12:00 # S. Dom. MT
+			-5:00	DR	E%sT	1974 Oct 27
+			-4:00	-	AST	2000 Oct 29 02:00
+			-5:00	US	E%sT	2000 Dec  3 01:00
+			-4:00	-	AST
+
+# El Salvador
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Salv	1987	1988	-	May	Sun>=1	0:00	1:00	D
+Rule	Salv	1987	1988	-	Sep	lastSun	0:00	0	S
+# There are too many San Salvadors elsewhere, so use America/El_Salvador
+# instead of America/San_Salvador.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/El_Salvador -5:56:48 -	LMT	1921		# San Salvador
+			-6:00	Salv	C%sT
+
+# Grenada
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Grenada	-4:07:00 -	LMT	1911 Jul	# St George's
+			-4:00	-	AST
+
+# Guadeloupe
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Guadeloupe	-4:06:08 -	LMT	1911 Jun 8	# Pointe a Pitre
+			-4:00	-	AST
+
+# Guatemala
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Guat	1973	only	-	Nov	25	0:00	1:00	D
+Rule	Guat	1974	only	-	Feb	24	0:00	0	S
+Rule	Guat	1983	only	-	May	21	0:00	1:00	D
+Rule	Guat	1983	only	-	Sep	22	0:00	0	S
+Rule	Guat	1991	only	-	Mar	23	0:00	1:00	D
+Rule	Guat	1991	only	-	Sep	 7	0:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Guatemala	-6:02:04 -	LMT	1918 Oct 5
+			-6:00	Guat	C%sT
+
+# Haiti
+# From Gwillim Law (2005-04-15):
+# Risto O. Nykanen wrote me that Haiti is now on DST.
+# I searched for confirmation, and I found a
+# <a href="http://www.haitianconsulate.org/time.doc"> press release
+# on the Web page of the Haitian Consulate in Chicago (2005-03-31),
+# </a>.  Translated from French, it says:
+#
+#  "The Prime Minister's Communication Office notifies the public in general
+#   and the press in particular that, following a decision of the Interior
+#   Ministry and the Territorial Collectivities [I suppose that means the
+#   provinces], Haiti will move to Eastern Daylight Time in the night from next
+#   Saturday the 2nd to Sunday the 3rd.
+#
+#  "Consequently, the Prime Minister's Communication Office wishes to inform
+#   the population that the country's clocks will be set forward one hour
+#   starting at midnight.  This provision will hold until the last Saturday in
+#   October 2005.
+#
+#  "Port-au-Prince, March 31, 2005"
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Haiti	1983	only	-	May	8	0:00	1:00	D
+Rule	Haiti	1984	1987	-	Apr	lastSun	0:00	1:00	D
+Rule	Haiti	1983	1987	-	Oct	lastSun	0:00	0	S
+# Shanks says AT is 2:00, but IATA SSIM (1991/1997) says 1:00s.  Go with IATA.
+Rule	Haiti	1988	1997	-	Apr	Sun>=1	1:00s	1:00	D
+Rule	Haiti	1988	1997	-	Oct	lastSun	1:00s	0	S
+Rule	Haiti	2005	only	-	Apr	Sun>=1	0:00	1:00	D
+Rule	Haiti	2005	only	-	Oct	lastSun	0:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Port-au-Prince -4:49:20 -	LMT	1890
+			-4:49	-	PPMT	1917 Jan 24 12:00 # P-a-P MT
+			-5:00	Haiti	E%sT
+
+# Honduras
+# Shanks says 1921 Jan 1; go with Whitman's more precise Apr 1.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Tegucigalpa -5:48:52 -	LMT	1921 Apr
+			-6:00	Salv	C%sT
+#
+# Great Swan I ceded by US to Honduras in 1972
+
+# Jamaica
+
+# From Bob Devine (1988-01-28):
+# Follows US rules.
+
+# From U. S. Naval Observatory (1989-01-19):
+# JAMAICA             5 H  BEHIND UTC
+
+# From Shanks:
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Jamaica	-5:07:12 -	LMT	1890		# Kingston
+			-5:07:12 -	KMT	1912 Feb    # Kingston Mean Time
+			-5:00	-	EST	1974 Apr 28 2:00
+			-5:00	US	E%sT	1984
+			-5:00	-	EST
+
+# Martinique
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Martinique	-4:04:20 -      LMT	1890		# Fort-de-France
+			-4:04:20 -	FFMT	1911 May     # Fort-de-France MT
+			-4:00	-	AST	1980 Apr  6
+			-4:00	1:00	ADT	1980 Sep 28
+			-4:00	-	AST
+
+# Montserrat
+# From Paul Eggert (1997-08-31):
+# Recent volcanic eruptions have forced evacuation of Plymouth, the capital.
+# Luckily, Olveston, the current de facto capital, has the same longitude.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Montserrat	-4:08:52 -	LMT	1911 Jul 1 0:01   # Olveston
+			-4:00	-	AST
+
+# Nicaragua
+#
+# From Steffen Thorsen (1998-12-29):
+# Nicaragua seems to be back at -6:00 but I have not been able to find when
+# they changed from -5:00.
+#
+# From Steffen Thorsen (2005-04-12):
+# I've got reports from 8 different people that Nicaragua just started
+# DST on Sunday 2005-04-10, in order to save energy because of
+# expensive petroleum.  The exact end date for DST is not yet
+# announced, only "September" but some sites also say "mid-September".
+# Some background information is available on the President's official site:
+# http://www.presidencia.gob.ni/Presidencia/Files_index/Secretaria/Notas%20de%20Prensa/Presidente/2005/ABRIL/Gobierno-de-nicaragua-adelanta-hora-oficial-06abril.htm
+# The Decree, no 23-2005 is available here:
+# http://www.presidencia.gob.ni/buscador_gaceta/BD/DECRETOS/2005/Decreto%2023-2005%20Se%20adelanta%20en%20una%20hora%20en%20todo%20el%20territorio%20nacional%20apartir%20de%20las%2024horas%20del%2009%20de%20Abril.pdf
+#
+# From Paul Eggert (2005-05-01):
+# The decree doesn't say anything about daylight saving, but for now let's
+# assume that it is daylight saving and that they'll switch back on the
+# 3rd Sunday in September.
+#
+# From Gwillim Law (2005-04-21):
+# The Associated Press story on the time change, which can be found at
+# http://www.lapalmainteractivo.com/guias/content/gen/ap/America_Latina/AMC_GEN_NICARAGUA_HORA.html
+# and elsewhere, says (fifth paragraph, translated from Spanish):  "The last
+# time that a change of clocks was applied to save energy was in the year 2000
+# during the Arnoldo Aleman administration."...
+# The northamerica file says that Nicaragua has been on UTC-6 continuously
+# since December 1998.  I wasn't able to find any details of Nicaraguan time
+# changes in 2000.  Perhaps a note could be added to the northamerica file, to
+# the effect that we have indirect evidence that DST was observed in 2000.
+#
+# From Jesper Norgaard Welen (2005-11-02):
+# Nicaragua left DST the 2005-10-02 at 00:00 (local time).
+# http://www.presidencia.gob.ni/presidencia/files_index/secretaria/comunicados/2005/septiembre/26septiembre-cambio-hora.htm
+# (2005-09-26)
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Nic	1979	1980	-	Mar	Sun>=16	0:00	1:00	D
+Rule	Nic	1979	1980	-	Jun	Mon>=23	0:00	0	S
+Rule	Nic	1992	only	-	Jan	 1	4:00	1:00	D
+Rule	Nic	1992	only	-	Sep	24	0:00	0	S
+Rule	Nic	2005	only	-	Apr	10	0:00	1:00	D
+Rule	Nic	2005	only	-	Oct	 2	0:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Managua	-5:45:08 -	LMT	1890
+			-5:45:12 -	MMT	1934 Jun 23 # Managua Mean Time?
+			-6:00	-	CST	1973 May
+			-5:00	-	EST	1975 Feb 16
+			-6:00	Nic	C%sT	1993 Jan 1 4:00
+			-5:00	-	EST	1998 Dec
+			-6:00	Nic	C%sT
+
+# Panama
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Panama	-5:18:08 -	LMT	1890
+			-5:19:36 -	CMT	1908 Apr 22   # Colon Mean Time
+			-5:00	-	EST
+
+# Puerto Rico
+# There are too many San Juans elsewhere, so we'll use `Puerto_Rico'.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Puerto_Rico -4:24:25 -	LMT	1899 Mar 28 12:00    # San Juan
+			-4:00	-	AST	1942 May  3
+			-4:00	1:00	AWT	1945 Sep 30  2:00
+			-4:00	-	AST
+
+# St Kitts-Nevis
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/St_Kitts	-4:10:52 -	LMT	1912 Mar 2	# Basseterre
+			-4:00	-	AST
+
+# St Lucia
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/St_Lucia	-4:04:00 -	LMT	1890		# Castries
+			-4:04:00 -	CMT	1912	    # Castries Mean Time
+			-4:00	-	AST
+
+# St Pierre and Miquelon
+# There are too many St Pierres elsewhere, so we'll use `Miquelon'.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Miquelon	-3:44:40 -	LMT	1911 May 15	# St Pierre
+			-4:00	-	AST	1980 May
+			-3:00	-	PMST	1987 # Pierre & Miquelon Time
+			-3:00	Canada	PM%sT
+
+# St Vincent and the Grenadines
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/St_Vincent	-4:04:56 -	LMT	1890		# Kingstown
+			-4:04:56 -	KMT	1912	   # Kingstown Mean Time
+			-4:00	-	AST
+
+# Turks and Caicos
+# From Paul Eggert (1998-08-06):
+# Shanks says they use US DST rules, but IATA SSIM (1991/1998)
+# says they switch at midnight.  Go with IATA SSIM.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	TC	1979	1986	-	Apr	lastSun	0:00	1:00	D
+Rule	TC	1979	max	-	Oct	lastSun	0:00	0	S
+Rule	TC	1987	max	-	Apr	Sun>=1	0:00	1:00	D
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Grand_Turk	-4:44:32 -	LMT	1890
+			-5:07:12 -	KMT	1912 Feb    # Kingston Mean Time
+			-5:00	TC	E%sT
+
+# British Virgin Is
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Tortola	-4:18:28 -	LMT	1911 Jul    # Road Town
+			-4:00	-	AST
+
+# Virgin Is
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/St_Thomas	-4:19:44 -	LMT	1911 Jul    # Charlotte Amalie
+			-4:00	-	AST
diff --git a/JodaTime/src/java/org/joda/time/tz/src/southamerica b/JodaTime/src/java/org/joda/time/tz/src/southamerica
index be2602916..eb7b5c7d8 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/southamerica
+++ b/JodaTime/src/java/org/joda/time/tz/src/southamerica
@@ -1,1070 +1,1071 @@
-# @(#)southamerica	7.65
-
-# This data is by no means authoritative; if you think you know better,
-# go ahead and edit the file (and please send any changes to
-# tz@elsie.nci.nih.gov for general use in the future).
-
-# From Paul Eggert (1999-07-07):
-# A good source for time zone historical data outside the U.S. is
-# Thomas G. Shanks, The International Atlas (5th edition),
-# San Diego: ACS Publications, Inc. (1999).
-#
-# Gwillim Law writes that a good source
-# for recent time zone data is the International Air Transport
-# Association's Standard Schedules Information Manual (IATA SSIM),
-# published semiannually.  Law sent in several helpful summaries
-# of the IATA's data after 1990.
-#
-# Except where otherwise noted, Shanks is the source for entries through 1990,
-# and IATA SSIM is the source for entries after 1990.
-#
-# Earlier editions of these tables used the North American style (e.g. ARST and
-# ARDT for Argentine Standard and Daylight Time), but the following quote
-# suggests that it's better to use European style (e.g. ART and ARST).
-#	I suggest the use of _Summer time_ instead of the more cumbersome
-#	_daylight-saving time_.  _Summer time_ seems to be in general use
-#	in Europe and South America.
-#	-- E O Cutler, _New York Times_ (1937-02-14), quoted in
-#	H L Mencken, _The American Language: Supplement I_ (1960), p 466
-#
-# Earlier editions of these tables also used the North American style
-# for time zones in Brazil, but this was incorrect, as Brazilians say
-# "summer time".  Reinaldo Goulart, a Sao Paulo businessman active in
-# the railroad sector, writes (1999-07-06):
-#	The subject of time zones is currently a matter of discussion/debate in
-#	Brazil.  Let's say that "the Brasilia time" is considered the
-#	"official time" because Brasilia is the capital city.
-#	The other three time zones are called "Brasilia time "minus one" or
-#	"plus one" or "plus two".  As far as I know there is no such
-#	name/designation as "Eastern Time" or "Central Time".
-# So I invented the following (English-language) abbreviations for now.
-# Corrections are welcome!
-#		std	dst
-#	-2:00	FNT	FNST	Fernando de Noronha
-#	-3:00	BRT	BRST	Brasilia
-#	-4:00	AMT	AMST	Amazon
-#	-5:00	ACT	ACST	Acre
-
-###############################################################################
-
-###############################################################################
-
-# Argentina
-
-# From Bob Devine (1988-01-28):
-# Argentina: first Sunday in October to first Sunday in April since 1976.
-# Double Summer time from 1969 to 1974.  Switches at midnight.
-
-# From U. S. Naval Observatory (1988-01-199):
-# ARGENTINA           3 H BEHIND   UTC
-
-# From Hernan G. Otero (1995-06-26):
-# I am sending modifications to the Argentine time zone table...
-# AR was chosen because they are the ISO letters that represent Argentina.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Arg	1930	only	-	Dec	 1	0:00	1:00	S
-Rule	Arg	1931	only	-	Apr	 1	0:00	0	-
-Rule	Arg	1931	only	-	Oct	15	0:00	1:00	S
-Rule	Arg	1932	1940	-	Mar	 1	0:00	0	-
-Rule	Arg	1932	1939	-	Nov	 1	0:00	1:00	S
-Rule	Arg	1940	only	-	Jul	 1	0:00	1:00	S
-Rule	Arg	1941	only	-	Jun	15	0:00	0	-
-Rule	Arg	1941	only	-	Oct	15	0:00	1:00	S
-Rule	Arg	1943	only	-	Aug	 1	0:00	0	-
-Rule	Arg	1943	only	-	Oct	15	0:00	1:00	S
-Rule	Arg	1946	only	-	Mar	 1	0:00	0	-
-Rule	Arg	1946	only	-	Oct	 1	0:00	1:00	S
-Rule	Arg	1963	only	-	Oct	 1	0:00	0	-
-Rule	Arg	1963	only	-	Dec	15	0:00	1:00	S
-Rule	Arg	1964	1966	-	Mar	 1	0:00	0	-
-Rule	Arg	1964	1966	-	Oct	15	0:00	1:00	S
-Rule	Arg	1967	only	-	Apr	 2	0:00	0	-
-Rule	Arg	1967	1968	-	Oct	Sun>=1	0:00	1:00	S
-Rule	Arg	1968	1969	-	Apr	Sun>=1	0:00	0	-
-Rule	Arg	1974	only	-	Jan	23	0:00	1:00	S
-Rule	Arg	1974	only	-	May	 1	0:00	0	-
-Rule	Arg	1988	only	-	Dec	 1	0:00	1:00	S
-#
-# From Hernan G. Otero (1995-06-26):
-# These corrections were contributed by InterSoft Argentina S.A.,
-# obtaining the data from the:
-# Talleres de Hidrografia Naval Argentina
-# (Argentine Naval Hydrography Institute)
-#
-# Shanks stops after 1992-03-01; go with Otero.
-Rule	Arg	1989	1993	-	Mar	Sun>=1	0:00	0	-
-Rule	Arg	1989	1992	-	Oct	Sun>=15	0:00	1:00	S
-#
-# From Hernan G. Otero (1995-06-26):
-# From this moment on, the law that mandated the daylight saving
-# time corrections was derogated and no more modifications
-# to the time zones (for daylight saving) are now made.
-#
-# From Rives McDow (2000-01-10):
-# On October 3, 1999, 0:00 local, Argentina implemented daylight savings time,
-# which did not result in the switch of a time zone, as they stayed 9 hours
-# from the International Date Line.
-Rule	Arg	1999	only	-	Oct	Sun>=1	0:00	1:00	S
-Rule	Arg	2000	only	-	Mar	Sun>=1	0:00	0	-
-#
-# From Peter Gradelski via Steffen Thorsen (2000-03-01):
-# We just checked with our Sao Paulo office and they say the government of
-# Argentina decided not to become one of the countries that go on or off DST.
-# So Buenos Aires should be -3 hours from GMT at all times.
-#
-# From Fabian L. Arce Jofre (2000-04-04):
-# The law that claimed DST for Argentina was derogated by President Fernando
-# de la Rua on March 2, 2000, because it would make people spend more energy
-# in the winter time, rather than less.  The change took effect on March 3.
-#
-# From Mariano Absatz (2001-06-06):
-# one of the major newspapers here in Argentina said that the 1999
-# Timezone Law (which never was effectively applied) will (would?) be
-# in effect.... The article is at
-# http://ar.clarin.com/diario/2001-06-06/e-01701.htm
-# ... The Law itself is "Ley No 25155", sanctioned on 1999-08-25, enacted
-# 1999-09-17, and published 1999-09-21.  The official publication is at:
-# http://www.boletin.jus.gov.ar/BON/Primera/1999/09-Septiembre/21/PDF/BO21-09-99LEG.PDF
-# Regretfully, you have to subscribe (and pay) for the on-line version....
-#
-# (2001-06-12):
-# the timezone for Argentina will not change next Sunday.
-# Apparently it will do so on Sunday 24th....
-# http://ar.clarin.com/diario/2001-06-12/s-03501.htm
-#
-# (2001-06-25):
-# Last Friday (yes, the last working day before the date of the change), the
-# Senate annulled the 1999 law that introduced the changes later postponed.
-# http://www.clarin.com.ar/diario/2001-06-22/s-03601.htm
-# It remains the vote of the Deputies..., but it will be the same....
-# This kind of things had always been done this way in Argentina.
-# We are still -03:00 all year round in all of the country.
-#
-# From Mariano Absatz (2004-05-21):
-# Today it was officially published that the Province of Mendoza is changing
-# its timezone this winter... starting tomorrow night....
-# http://www.gobernac.mendoza.gov.ar/boletin/pdf/20040521-27158-normas.pdf
-# From Paul Eggert (2004-05-24):
-# It's Law No. 7,210.  This change is due to a public power emergency, so for
-# now we'll assume it's for this year only.
-#
-# From Paul Eggert (2002-01-22):
-# <a href="http://www.spicasc.net/horvera.html">
-# Hora de verano para la Republica Argentina (2000-10-01)
-# </a> says that standard time in Argentina from 1894-10-31
-# to 1920-05-01 was -4:16:48.25.  Go with this more-precise value
-# over Shanks.
-#
-# From Mariano Absatz (2004-06-05):
-# These media articles from a major newspaper mostly cover the current state:
-# http://www.lanacion.com.ar/04/05/27/de_604825.asp
-# http://www.lanacion.com.ar/04/05/28/de_605203.asp
-#
-# The following eight (8) provinces pulled clocks back to UTC-04:00 at
-# midnight Monday May 31st. (that is, the night between 05/31 and 06/01).
-# Apparently, all nine provinces would go back to UTC-03:00 at the same
-# time in October 17th.
-#
-# Catamarca, Chubut, La Rioja, San Juan, San Luis, Santa Cruz,
-# Tierra del Fuego, Tucuman.
-#
-# From Mariano Absatz (2004-06-14):
-# ... this weekend, the Province of Tucuman decided it'd go back to UTC-03:00
-# yesterday midnight (that is, at 24:00 Saturday 12th), since the people's
-# annoyance with the change is much higher than the power savings obtained....
-#
-# From Gwillim Law (2004-06-14):
-# http://www.lanacion.com.ar/04/06/10/de_609078.asp ...
-#     "The time change in Tierra del Fuego was a conflicted decision from
-#   the start.  The government had decreed that the measure would take
-#   effect on June 1, but a normative error forced the new time to begin
-#   three days earlier, from a Saturday to a Sunday....
-# Our understanding was that the change was originally scheduled to take place
-# on June 1 at 00:00 in Chubut, Santa Cruz, Tierra del Fuego (and some other
-# provinces).  Sunday was May 30, only two days earlier.  So the article
-# contains a contradiction.  I would give more credence to the Saturday/Sunday
-# date than the "three days earlier" phrase, and conclude that Tierra del
-# Fuego set its clocks back at 2004-05-30 00:00.
-#
-# From Steffen Thorsen (2004-10-05):
-# The previous law 7210 which changed the province of Mendoza's time zone
-# back in May have been modified slightly in a new law 7277, which set the
-# new end date to 2004-09-26 (original date was 2004-10-17).
-# http://www.gobernac.mendoza.gov.ar/boletin/pdf/20040924-27244-normas.pdf
-#
-# From Mariano Absatz (2004-10-05):
-# San Juan changed from UTC-03:00 to UTC-04:00 at midnight between
-# Sunday, May 30th and Monday, May 31st.  It changed back to UTC-03:00
-# at midnight between Saturday, July 24th and Sunday, July 25th....
-# http://www.sanjuan.gov.ar/prensa/archivo/000329.html
-# http://www.sanjuan.gov.ar/prensa/archivo/000426.html
-# http://www.sanjuan.gov.ar/prensa/archivo/000441.html
-
-# Unless otherwise specified, data are from Shanks through 1992, from
-# the IATA otherwise.  As noted below, Shanks says that
-# America/Cordoba split into 6 subregions during 1991/1992, but we
-# haven't verified this yet so for now we'll keep it a single region.
-#
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-#
-# Buenos Aires (BA), Capital Federal (CF),
-Zone America/Argentina/Buenos_Aires -3:53:48 - LMT 1894 Oct 31
-			-4:16:48 -	CMT	1920 May # Cordoba Mean Time
-			-4:00	-	ART	1930 Dec
-			-4:00	Arg	AR%sT	1969 Oct  5
-			-3:00	Arg	AR%sT	1999 Oct  3
-			-4:00	Arg	AR%sT	2000 Mar  3
-			-3:00	-	ART
-#
-# Santa Fe (SF), Entre Rios (ER), Corrientes (CN), Misiones (MN), Chaco (CC),
-# Formosa (FM), Salta (SA), Santiago del Estero (SE), Cordoba (CB),
-# San Luis (SL), La Pampa (LP), Neuquen (NQ), Rio Negro (RN)
-#
-# Shanks also makes the following claims, which we haven't verified:
-# - Formosa switched to -3:00 on 1991-01-07.
-# - Misiones switched to -3:00 on 1990-12-29.
-# - Chaco switched to -3:00 on 1991-01-04.
-# - San Luis switched to -4:00 on 1990-03-14, then to -3:00 on 1990-10-15,
-#   then to -4:00 on 1991-03-01, then to -3:00 on 1991-06-01.
-# - Santiago del Estero switched to -4:00 on 1991-04-01,
-#   then to -3:00 on 1991-04-26.
-#
-Zone America/Argentina/Cordoba -4:16:48 - LMT	1894 Oct 31
-			-4:16:48 -	CMT	1920 May
-			-4:00	-	ART	1930 Dec
-			-4:00	Arg	AR%sT	1969 Oct  5
-			-3:00	Arg	AR%sT	1991 Mar  3
-			-4:00	-	WART	1991 Oct 20
-			-3:00	Arg	AR%sT	1999 Oct  3
-			-4:00	Arg	AR%sT	2000 Mar  3
-			-3:00	-	ART
-#
-# Tucuman (TM)
-Zone America/Argentina/Tucuman -4:20:52 - LMT	1894 Oct 31
-			-4:16:48 -	CMT	1920 May
-			-4:00	-	ART	1930 Dec
-			-4:00	Arg	AR%sT	1969 Oct  5
-			-3:00	Arg	AR%sT	1991 Mar  3
-			-4:00	-	WART	1991 Oct 20
-			-3:00	Arg	AR%sT	1999 Oct  3
-			-4:00	Arg	AR%sT	2000 Mar  3
-			-3:00	-	ART	2004 Jun  1
-			-4:00	-	WART	2004 Jun 13
-			-3:00	-	ART
-#
-# La Rioja (LR)
-Zone America/Argentina/La_Rioja -4:27:24 - LMT	1894 Oct 31
-			-4:16:48 -	CMT	1920 May
-			-4:00	-	ART	1930 Dec
-			-4:00	Arg	AR%sT	1969 Oct  5
-			-3:00	Arg	AR%sT	1991 Mar  1
-			-4:00	-	WART	1991 May  7
-			-3:00	Arg	AR%sT	1999 Oct  3
-			-4:00	Arg	AR%sT	2000 Mar  3
-			-3:00	-	ART	2004 Jun  1
-			-4:00	-	WART	2004 Jun 20
-			-3:00	-	ART
-#
-# San Juan (SJ)
-Zone America/Argentina/San_Juan -4:34:04 - LMT	1894 Oct 31
-			-4:16:48 -	CMT	1920 May
-			-4:00	-	ART	1930 Dec
-			-4:00	Arg	AR%sT	1969 Oct  5
-			-3:00	Arg	AR%sT	1991 Mar  1
-			-4:00	-	WART	1991 May  7
-			-3:00	Arg	AR%sT	1999 Oct  3
-			-4:00	Arg	AR%sT	2000 Mar  3
-			-3:00	-	ART	2004 May 31
-			-4:00	-	WART	2004 Jul 25
-			-3:00	-	ART
-#
-# Jujuy (JY)
-Zone America/Argentina/Jujuy -4:21:12 -	LMT	1894 Oct 31
-			-4:16:48 -	CMT	1920 May
-			-4:00	-	ART	1930 Dec
-			-4:00	Arg	AR%sT	1969 Oct  5
-			-3:00	Arg	AR%sT	1990 Mar  4
-			-4:00	-	WART	1990 Oct 28
-			-4:00	1:00	WARST	1991 Mar 17
-			-4:00	-	WART	1991 Oct  6
-			-3:00	1:00	ARST	1992
-			-3:00	Arg	AR%sT	1999 Oct  3
-			-4:00	Arg	AR%sT	2000 Mar  3
-			-3:00	-	ART
-#
-# Catamarca (CT), Chubut (CH)
-Zone America/Argentina/Catamarca -4:23:08 - LMT	1894 Oct 31
-			-4:16:48 -	CMT	1920 May
-			-4:00	-	ART	1930 Dec
-			-4:00	Arg	AR%sT	1969 Oct  5
-			-3:00	Arg	AR%sT	1991 Mar  3
-			-4:00	-	WART	1991 Oct 20
-			-3:00	Arg	AR%sT	1999 Oct  3
-			-4:00	Arg	AR%sT	2000 Mar  3
-			-3:00	-	ART	2004 Jun  1
-			-4:00	-	WART	2004 Jun 20
-			-3:00	-	ART
-#
-# Mendoza (MZ)
-Zone America/Argentina/Mendoza -4:35:16 - LMT	1894 Oct 31
-			-4:16:48 -	CMT	1920 May
-			-4:00	-	ART	1930 Dec
-			-4:00	Arg	AR%sT	1969 Oct  5
-			-3:00	Arg	AR%sT	1990 Mar  4
-			-4:00	-	WART	1990 Oct 15
-			-4:00	1:00	WARST	1991 Mar  1
-			-4:00	-	WART	1991 Oct 15
-			-4:00	1:00	WARST	1992 Mar  1
-			-4:00	-	WART	1992 Oct 18
-			-3:00	Arg	AR%sT	1999 Oct  3
-			-4:00	Arg	AR%sT	2000 Mar  3
-			-3:00	-	ART	2004 May 23
-			-4:00	-	WART	2004 Sep 26
-			-3:00	-	ART
-#
-# Santa Cruz (SC)
-Zone America/Argentina/Rio_Gallegos -4:36:52 - LMT 1894 Oct 31
-			-4:16:48 -	CMT	1920 May # Cordoba Mean Time
-			-4:00	-	ART	1930 Dec
-			-4:00	Arg	AR%sT	1969 Oct  5
-			-3:00	Arg	AR%sT	1999 Oct  3
-			-4:00	Arg	AR%sT	2000 Mar  3
-			-3:00	-	ART	2004 Jun  1
-			-4:00	-	WART	2004 Jun 20
-			-3:00	-	ART
-#
-# Tierra del Fuego, Antartida e Islas del Atlantico Sur (TF)
-Zone America/Argentina/Ushuaia -4:33:12 - LMT 1894 Oct 31
-			-4:16:48 -	CMT	1920 May # Cordoba Mean Time
-			-4:00	-	ART	1930 Dec
-			-4:00	Arg	AR%sT	1969 Oct  5
-			-3:00	Arg	AR%sT	1999 Oct  3
-			-4:00	Arg	AR%sT	2000 Mar  3
-			-3:00	-	ART	2004 May 30
-			-4:00	-	WART	2004 Jun 20
-			-3:00	-	ART
-
-# Aruba
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Aruba	-4:40:24 -	LMT	1912 Feb 12	# Oranjestad
-			-4:30	-	ANT	1965 # Netherlands Antilles Time
-			-4:00	-	AST
-
-# Bolivia
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/La_Paz	-4:32:36 -	LMT	1890
-			-4:32:36 -	CMT	1931 Oct 15 # Calamarca MT
-			-4:32:36 1:00	BOST	1932 Mar 21 # Bolivia ST
-			-4:00	-	BOT	# Bolivia Time
-
-# Brazil
-
-# From Paul Eggert (1993-11-18):
-# The mayor of Rio recently attempted to change the time zone rules
-# just in his city, in order to leave more summer time for the tourist trade.
-# The rule change lasted only part of the day;
-# the federal government refused to follow the city's rules, and business
-# was in a chaos, so the mayor backed down that afternoon.
-
-# From IATA SSIM (1996-02):
-# _Only_ the following states in BR1 observe DST: Rio Grande do Sul (RS),
-# Santa Catarina (SC), Parana (PR), Sao Paulo (SP), Rio de Janeiro (RJ),
-# Espirito Santo (ES), Minas Gerais (MG), Bahia (BA), Goias (GO),
-# Distrito Federal (DF), Tocantins (TO), Sergipe [SE] and Alagoas [AL].
-# [The last three states are new to this issue of the IATA SSIM.]
-
-# From Gwillim Law (1996-10-07):
-# Geography, history (Tocantins was part of Goias until 1989), and other
-# sources of time zone information lead me to believe that AL, SE, and TO were
-# always in BR1, and so the only change was whether or not they observed DST....
-# The earliest issue of the SSIM I have is 2/91.  Each issue from then until
-# 9/95 says that DST is observed only in the ten states I quoted from 9/95,
-# along with Mato Grosso (MT) and Mato Grosso do Sul (MS), which are in BR2
-# (UTC-4)....  The other two time zones given for Brazil are BR3, which is
-# UTC-5, no DST, and applies only in the state of Acre (AC); and BR4, which is
-# UTC-2, and applies to Fernando de Noronha (formerly FN, but I believe it's
-# become part of the state of Pernambuco).  The boundary between BR1 and BR2
-# has never been clearly stated.  They've simply been called East and West.
-# However, some conclusions can be drawn from another IATA manual: the Airline
-# Coding Directory, which lists close to 400 airports in Brazil.  For each
-# airport it gives a time zone which is coded to the SSIM.  From that
-# information, I'm led to conclude that the states of Amapa (AP), Ceara (CE),
-# Maranhao (MA), Paraiba (PR), Pernambuco (PE), Piaui (PI), and Rio Grande do
-# Norte (RN), and the eastern part of Para (PA) are all in BR1 without DST.
-
-# From Marcos Tadeu (1998-09-27):
-# <a href="http://pcdsh01.on.br/verao1.html">
-# Brazilian official page
-# </a>
-
-# From Jesper Norgaard (2000-11-03):
-# [For an official list of which regions in Brazil use which time zones, see:]
-# http://pcdsh01.on.br/Fusbr.htm
-# http://pcdsh01.on.br/Fusbrhv.htm
-
-# From Celso Doria via David Madeo (2002-10-09):
-# The reason for the delay this year has to do with elections in Brazil.
-#
-# Unlike in the United States, elections in Brazil are 100% computerized and
-# the results are known almost immediately.  Yesterday, it was the first
-# round of the elections when 115 million Brazilians voted for President,
-# Governor, Senators, Federal Deputies, and State Deputies.  Nobody is
-# counting (or re-counting) votes anymore and we know there will be a second
-# round for the Presidency and also for some Governors.  The 2nd round will
-# take place on October 27th.
-#
-# The reason why the DST will only begin November 3rd is that the thousands
-# of electoral machines used cannot have their time changed, and since the
-# Constitution says the elections must begin at 8:00 AM and end at 5:00 PM,
-# the Government decided to postpone DST, instead of changing the Constitution
-# (maybe, for the next elections, it will be possible to change the clock)...
-
-# From Rodrigo Severo (2004-10-04):
-# It's just the biannual change made necessary by the much hyped, supposedly
-# modern Brazilian eletronic voting machines which, apparently, can't deal
-# with a time change between the first and the second rounds of the elections.
-
-# From Paul Eggert (2002-10-10):
-# The official decrees referenced below are mostly taken from
-# <a href="http://pcdsh01.on.br/DecHV.html">
-# Decretos sobre o Horario de Verao no Brasil
-# </a> (2001-09-20, in Portuguese).
-# The official site for all decrees, including those not related to time, is
-# <a href="http://www.presidencia.gov.br/CCIVIL/decreto/principal_ano.htm">
-# Presidencia da Republica, Subchefia para Assuntos Juridicos, Decretos
-# </a> (in Portuguese).
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-# Decree <a href="http://pcdsh01.on.br/HV20466.htm">20,466</a> (1931-10-01)
-# Decree <a href="http://pcdsh01.on.br/HV21896.htm">21,896</a> (1932-01-10)
-Rule	Brazil	1931	only	-	Oct	 3	11:00	1:00	S
-Rule	Brazil	1932	1933	-	Apr	 1	 0:00	0	-
-Rule	Brazil	1932	only	-	Oct	 3	 0:00	1:00	S
-# Decree <a href="http://pcdsh01.on.br/HV23195.htm">23,195</a> (1933-10-10)
-# revoked DST.
-# Decree <a href="http://pcdsh01.on.br/HV27496.htm">27,496</a> (1949-11-24)
-# Decree <a href="http://pcdsh01.on.br/HV27998.htm">27,998</a> (1950-04-13)
-Rule	Brazil	1949	1952	-	Dec	 1	 0:00	1:00	S
-Rule	Brazil	1950	only	-	Apr	16	 1:00	0	-
-Rule	Brazil	1951	1952	-	Apr	 1	 0:00	0	-
-# Decree <a href="http://pcdsh01.on.br/HV32308.htm">32,308</a> (1953-02-24)
-Rule	Brazil	1953	only	-	Mar	 1	 0:00	0	-
-# Decree <a href="http://pcdsh01.on.br/HV34724.htm">34,724</a> (1953-11-30)
-# revoked DST.
-# Decree <a href="http://pcdsh01.on.br/HV52700.htm">52,700</a> (1963-10-18)
-# established DST from 1963-10-23 00:00 to 1964-02-29 00:00
-# in SP, RJ, GB, MG, ES, due to the prolongation of the drought.
-# Decree <a href="http://pcdsh01.on.br/HV53071.htm">53,071</a> (1963-12-03)
-# extended the above decree to all of the national territory on 12-09.
-Rule	Brazil	1963	only	-	Dec	 9	 0:00	1:00	S
-# Decree <a href="http://pcdsh01.on.br/HV53604.htm">53,604</a> (1964-02-25)
-# extended summer time by one day to 1964-03-01 00:00 (start of school).
-Rule	Brazil	1964	only	-	Mar	 1	 0:00	0	-
-# Decree <a href="http://pcdsh01.on.br/HV55639.htm">55,639</a> (1965-01-27)
-Rule	Brazil	1965	only	-	Jan	31	 0:00	1:00	S
-Rule	Brazil	1965	only	-	Mar	31	 0:00	0	-
-# Decree <a href="http://pcdsh01.on.br/HV57303.htm">57,303</a> (1965-11-22)
-Rule	Brazil	1965	only	-	Dec	 1	 0:00	1:00	S
-# Decree <a href="http://pcdsh01.on.br/HV57843.htm">57,843</a> (1966-02-18)
-Rule	Brazil	1966	1968	-	Mar	 1	 0:00	0	-
-Rule	Brazil	1966	1967	-	Nov	 1	 0:00	1:00	S
-# Decree <a href="http://pcdsh01.on.br/HV63429.htm">63,429</a> (1968-10-15)
-# revoked DST.
-# Decree <a href="http://pcdsh01.on.br/HV91698.htm">91,698</a> (1985-09-27)
-Rule	Brazil	1985	only	-	Nov	 2	 0:00	1:00	S
-# Decree 92,310 (1986-01-21)
-# Decree 92,463 (1986-03-13)
-Rule	Brazil	1986	only	-	Mar	15	 0:00	0	-
-# Decree 93,316 (1986-10-01)
-Rule	Brazil	1986	only	-	Oct	25	 0:00	1:00	S
-Rule	Brazil	1987	only	-	Feb	14	 0:00	0	-
-# Decree <a href="http://pcdsh01.on.br/HV94922.htm">94,922</a> (1987-09-22)
-Rule	Brazil	1987	only	-	Oct	25	 0:00	1:00	S
-Rule	Brazil	1988	only	-	Feb	 7	 0:00	0	-
-# Decree <a href="http://pcdsh01.on.br/HV96676.htm">96,676</a> (1988-09-12)
-# except for the states of AC, AM, PA, RR, RO, and AP (then a territory)
-Rule	Brazil	1988	only	-	Oct	16	 0:00	1:00	S
-Rule	Brazil	1989	only	-	Jan	29	 0:00	0	-
-# Decree <a href="http://pcdsh01.on.br/HV98077.htm">98,077</a> (1989-08-21)
-# with the same exceptions
-Rule	Brazil	1989	only	-	Oct	15	 0:00	1:00	S
-Rule	Brazil	1990	only	-	Feb	11	 0:00	0	-
-# Decree <a href="http://pcdsh01.on.br/HV99530.htm">99,530</a> (1990-09-17)
-# adopted by RS, SC, PR, SP, RJ, ES, MG, GO, MS, DF.
-# Decree 99,629 (1990-10-19) adds BA, MT.
-Rule	Brazil	1990	only	-	Oct	21	 0:00	1:00	S
-Rule	Brazil	1991	only	-	Feb	17	 0:00	0	-
-# <a href="http://pcdsh01.on.br/HV1991.htm">Unnumbered decree</a> (1991-09-25)
-# adopted by RS, SC, PR, SP, RJ, ES, MG, BA, GO, MT, MS, DF.
-Rule	Brazil	1991	only	-	Oct	20	 0:00	1:00	S
-Rule	Brazil	1992	only	-	Feb	 9	 0:00	0	-
-# <a href="http://pcdsh01.on.br/HV1992.htm">Unnumbered decree</a> (1992-10-16)
-# adopted by same states.
-Rule	Brazil	1992	only	-	Oct	25	 0:00	1:00	S
-Rule	Brazil	1993	only	-	Jan	31	 0:00	0	-
-# Decree <a href="http://pcdsh01.on.br/HV942.htm">942</a> (1993-09-28)
-# adopted by same states, plus AM.
-# Decree <a href="http://pcdsh01.on.br/HV1252.htm">1,252</a> (1994-09-22;
-# web page corrected 2004-01-07) adopted by same states, minus AM.
-# Decree <a href="http://pcdsh01.on.br/HV1636.htm">1,636</a> (1995-09-14)
-# adopted by same states, plus MT and TO.
-# Decree <a href="http://pcdsh01.on.br/HV1674.htm">1,674</a> (1995-10-13)
-# adds AL, SE.
-Rule	Brazil	1993	1995	-	Oct	Sun>=11	 0:00	1:00	S
-Rule	Brazil	1994	1995	-	Feb	Sun>=15	 0:00	0	-
-Rule	Brazil	1996	only	-	Feb	11	 0:00	0	-
-# Decree <a href="http://pcdsh01.on.br/HV2000.htm">2,000</a> (1996-09-04)
-# adopted by same states, minus AL, SE.
-Rule	Brazil	1996	only	-	Oct	 6	 0:00	1:00	S
-Rule	Brazil	1997	only	-	Feb	16	 0:00	0	-
-# From Daniel C. Sobral (1998-02-12):
-# In 1997, the DS began on October 6. The stated reason was that
-# because international television networks ignored Brazil's policy on DS,
-# they bought the wrong times on satellite for coverage of Pope's visit.
-# This year, the ending date of DS was postponed to March 1
-# to help dealing with the shortages of electric power.
-#
-# Decree 2,317 (1997-09-04), adopted by same states.
-Rule	Brazil	1997	only	-	Oct	 6	 0:00	1:00	S
-# Decree <a href="http://pcdsh01.on.br/figuras/HV2495.JPG">2,495</a>
-# (1998-02-10)
-Rule	Brazil	1998	only	-	Mar	 1	 0:00	0	-
-# Decree <a href="http://pcdsh01.on.br/figuras/Hv98.jpg">2,780</a> (1998-09-11)
-# adopted by the same states as before.
-Rule	Brazil	1998	only	-	Oct	11	 0:00	1:00	S
-Rule	Brazil	1999	only	-	Feb	21	 0:00	0	-
-# Decree <a href="http://pcdsh01.on.br/figuras/HV3150.gif">3,150</a>
-# (1999-08-23) adopted by same states.
-# Decree <a href="http://pcdsh01.on.br/DecHV99.gif">3,188</a> (1999-09-30)
-# adds SE, AL, PB, PE, RN, CE, PI, MA and RR.
-Rule	Brazil	1999	only	-	Oct	 3	 0:00	1:00	S
-Rule	Brazil	2000	only	-	Feb	27	 0:00	0	-
-# Decree <a href="http://pcdsh01.on.br/DEC3592.htm">3,592</a> (2000-09-06)
-# adopted by the same states as before.
-# Decree <a href="http://pcdsh01.on.br/Dec3630.jpg">3,630</a> (2000-10-13)
-# repeals DST in PE and RR, effective 2000-10-15 00:00.
-# Decree <a href="http://pcdsh01.on.br/Dec3632.jpg">3,632</a> (2000-10-17)
-# repeals DST in SE, AL, PB, RN, CE, PI and MA, effective 2000-10-22 00:00.
-# Decree <a href="http://pcdsh01.on.br/figuras/HV3916.gif">3,916</a>
-# (2001-09-13) reestablishes DST in AL, CE, MA, PB, PE, PI, RN, SE.
-Rule	Brazil	2000	2001	-	Oct	Sun>=8	 0:00	1:00	S
-Rule	Brazil	2001	max	-	Feb	Sun>=15	 0:00	0	-
-# Decree 4,399 (2002-10-01) repeals DST in AL, CE, MA, PB, PE, PI, RN, SE.
-# <a href="http://www.presidencia.gov.br/CCIVIL/decreto/2002/D4399.htm"></a>
-Rule	Brazil	2002	only	-	Nov	 3	 0:00	1:00	S
-# Decree 4,844 (2003-09-24; corrected 2003-09-26) repeals DST in BA, MT, TO.
-# <a href="http://www.presidencia.gov.br/CCIVIL/decreto/2003/D4844.htm"></a>
-Rule	Brazil	2003	only	-	Oct	19	 0:00	1:00	S
-# Decree 5,223 (2004-10-01) reestablishes DST in MT.
-# <a href="http://www.planalto.gov.br/ccivil_03/_Ato2004-2006/2004/Decreto/D5223.htm"></a>
-Rule	Brazil	2004	only	-	Nov	 2	 0:00	1:00	S
-# Decree <a href="http://pcdsh01.on.br/DecHV5539.gif">5,539</a> (2005-09-19),
-# adopted by the same states as before.
-Rule	Brazil	2005	max	-	Oct	Sun>=15	 0:00	1:00	S
-# The latest ruleset listed above says that the following states observe DST:
-# DF, ES, GO, MG, MS, MT, PR, RJ, RS, SC, SP.
-# For dates after mid-2006, the above rules with TO="max" are guesses
-# and are quite possibly wrong, but are more likely than no DST at all.
-
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-#
-# Fernando de Noronha (administratively part of PE)
-Zone America/Noronha	-2:09:40 -	LMT	1914
-			-2:00	Brazil	FN%sT	1990 Sep 17
-			-2:00	-	FNT	1999 Sep 30
-			-2:00	Brazil	FN%sT	2000 Oct 15
-			-2:00	-	FNT	2001 Sep 13
-			-2:00	Brazil	FN%sT	2002 Oct  1
-			-2:00	-	FNT
-# Other Atlantic islands have no permanent settlement.
-# These include Trindade and Martin Vaz (administratively part of ES),
-# Atol das Rocas (RN), and Penedos de Sao Pedro e Sao Paulo (PE).
-# Fernando de Noronha was a separate territory from 1942-09-02 to 1989-01-01;
-# it also included the Penedos.
-#
-# Amapa (AP), east Para (PA)
-# East Para includes Belem, Maraba, Serra Norte, and Sao Felix do Xingu.
-# The division between east and west Para is the river Xingu.
-# In the north a very small part from the river Javary (now Jari I guess,
-# the border with Amapa) to the Amazon, then to the Xingu.
-Zone America/Belem	-3:13:56 -	LMT	1914
-			-3:00	Brazil	BR%sT	1988 Sep 12
-			-3:00	-	BRT
-#
-# Maranhao (MA), Piaui (PI), Ceara (CE), Rio Grande do Norte (RN),
-# Paraiba (PB)
-Zone America/Fortaleza	-2:34:00 -	LMT	1914
-			-3:00	Brazil	BR%sT	1990 Sep 17
-			-3:00	-	BRT	1999 Sep 30
-			-3:00	Brazil	BR%sT	2000 Oct 22
-			-3:00	-	BRT	2001 Sep 13
-			-3:00	Brazil	BR%sT	2002 Oct  1
-			-3:00	-	BRT
-#
-# Pernambuco (PE) (except Atlantic islands)
-Zone America/Recife	-2:19:36 -	LMT	1914
-			-3:00	Brazil	BR%sT	1990 Sep 17
-			-3:00	-	BRT	1999 Sep 30
-			-3:00	Brazil	BR%sT	2000 Oct 15
-			-3:00	-	BRT	2001 Sep 13
-			-3:00	Brazil	BR%sT	2002 Oct  1
-			-3:00	-	BRT
-#
-# Tocantins (TO)
-Zone America/Araguaina	-3:12:48 -	LMT	1914
-			-3:00	Brazil	BR%sT	1990 Sep 17
-			-3:00	-	BRT	1995 Sep 14
-			-3:00	Brazil	BR%sT	2003 Sep 24
-			-3:00	-	BRT
-#
-# Alagoas (AL), Sergipe (SE)
-Zone America/Maceio	-2:22:52 -	LMT	1914
-			-3:00	Brazil	BR%sT	1990 Sep 17
-			-3:00	-	BRT	1995 Oct 13
-			-3:00	Brazil	BR%sT	1996 Sep  4
-			-3:00	-	BRT	1999 Sep 30
-			-3:00	Brazil	BR%sT	2000 Oct 22
-			-3:00	-	BRT	2001 Sep 13
-			-3:00	Brazil	BR%sT	2002 Oct  1
-			-3:00	-	BRT
-#
-# Bahia (BA)
-# There are too many Salvadors elsewhere, so use America/Bahia instead
-# of America/Salvador.
-Zone America/Bahia	-2:34:04 -	LMT	1914
-			-3:00	Brazil	BR%sT	2003 Sep 24
-			-3:00	-	BRT
-#
-# Goias (GO), Distrito Federal (DF), Minas Gerais (MG),
-# Espirito Santo (ES), Rio de Janeiro (RJ), Sao Paulo (SP), Parana (PR),
-# Santa Catarina (SC), Rio Grande do Sul (RS)
-Zone America/Sao_Paulo	-3:06:28 -	LMT	1914
-			-3:00	Brazil	BR%sT	1963 Oct 23 00:00
-			-3:00	1:00	BRST	1964
-			-3:00	Brazil	BR%sT
-#
-# Mato Grosso do Sul (MS)
-Zone America/Campo_Grande -3:38:28 -	LMT	1914
-			-4:00	Brazil	AM%sT
-#
-# Mato Grosso (MT)
-Zone America/Cuiaba	-3:44:20 -	LMT	1914
-			-4:00	Brazil	AM%sT	2003 Sep 24
-			-4:00	-	AMT	2004 Oct  1
-			-4:00	Brazil	AM%sT
-#
-# west Para (PA), Rondonia (RO)
-# West Para includes Altamira, Oribidos, Prainha, Oriximina, and Santarem.
-Zone America/Porto_Velho -4:15:36 -	LMT	1914
-			-4:00	Brazil	AM%sT	1988 Sep 12
-			-4:00	-	AMT
-#
-# Roraima (RR)
-Zone America/Boa_Vista	-4:02:40 -	LMT	1914
-			-4:00	Brazil	AM%sT	1988 Sep 12
-			-4:00	-	AMT	1999 Sep 30
-			-4:00	Brazil	AM%sT	2000 Oct 15
-			-4:00	-	AMT
-#
-# east Amazonas (AM): Boca do Acre, Jutai, Manaus, Floriano Peixoto
-# The great circle line from Tabatinga to Porto Acre divides
-# east from west Amazonas.
-Zone America/Manaus	-4:00:04 -	LMT	1914
-			-4:00	Brazil	AM%sT	1988 Sep 12
-			-4:00	-	AMT	1993 Sep 28
-			-4:00	Brazil	AM%sT	1994 Sep 22
-			-4:00	-	AMT
-#
-# west Amazonas (AM): Atalaia do Norte, Boca do Maoco, Benjamin Constant,
-#	Eirunepe, Envira, Ipixuna
-Zone America/Eirunepe	-4:39:28 -	LMT	1914
-			-5:00	Brazil	AC%sT	1988 Sep 12
-			-5:00	-	ACT	1993 Sep 28
-			-5:00	Brazil	AC%sT	1994 Sep 22
-			-5:00	-	ACT
-#
-# Acre (AC)
-Zone America/Rio_Branco	-4:31:12 -	LMT	1914
-			-5:00	Brazil	AC%sT	1988 Sep 12
-			-5:00	-	ACT
-
-
-# Chile
-
-# From Eduardo Krell (1995-10-19):
-# The law says to switch to DST at midnight [24:00] on the second SATURDAY
-# of October....  The law is the same for March and October.
-# (1998-09-29):
-# Because of the drought this year, the government decided to go into
-# DST earlier (saturday 9/26 at 24:00). This is a one-time change only ...
-# (unless there's another dry season next year, I guess).
-
-# From Julio I. Pacheco Troncoso (1999-03-18):
-# Because of the same drought, the government decided to end DST later,
-# on April 3, (one-time change).
-
-# From Gwillim Law (2001-05-04):
-# I came across another article in "La Tercera" about Chilean DST.
-# <http://www.tercera.cl/diario/2000/10/13/t-extras.html>
-# It clearly confirms my earlier suggestion, that DST begins at 22:00
-# on Easter Island....  But it also seems to be saying that the
-# observance of DST in Chile began in 1966, rather than 1969 as
-# ... [Shanks] has it....
-#
-# My translation:
-#
-# "The Chilean Army has announced that summer time will begin tomorrow,
-# Saturday, October 14 in continental Chile, insular Chile, and
-# Antarctica, as provided by Supreme Decree 25 of January 11, 1966.
-# By the preceding, official time in continental Chile and Chilean
-# Antarctic, and official time in Western Insular Chile, which applies
-# to Easter Island and Sala y Gomez Island, will be set forward at
-# midnight and at 22:00, respectively, by 20 minutes."
-
-# From Paul Eggert (2001-05-04):
-# Go with this article in preference to Shanks's 1969 date for modern DST.
-# Assume this rule has been used since DST was introduced in the islands.
-
-# From Paul Eggert (2002-10-24):
-# <http://www.shoa.cl/shoa/faqhoraoficial.htm> gives many details that
-# disagree with the following table, but we haven't had time to compare them.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Chile	1918	only	-	Sep	 1	0:00	1:00	S
-Rule	Chile	1919	only	-	Jul	 2	0:00	0	-
-Rule	Chile	1927	1931	-	Sep	 1	0:00	1:00	S
-Rule	Chile	1928	1932	-	Apr	 1	0:00	0	-
-Rule	Chile	1966	1997	-	Oct	Sun>=9	4:00u	1:00	S
-Rule	Chile	1967	1998	-	Mar	Sun>=9	3:00u	0	-
-Rule	Chile	1998	only	-	Sep	27	4:00u	1:00	S
-Rule	Chile	1999	only	-	Apr	 4	3:00u	0	-
-Rule	Chile	1999	max	-	Oct	Sun>=9	4:00u	1:00	S
-Rule	Chile	2000	max	-	Mar	Sun>=9	3:00u	0	-
-# IATA SSIM anomalies: (1990-09) says 1990-09-16; (1992-02) says 1992-03-14;
-# (1996-09) says 1998-03-08.  Ignore these.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Santiago	-4:42:40 -	LMT	1890
-			-4:42:40 -	SMT	1910	    # Santiago Mean Time
-			-5:00	Chile	CL%sT	1932 Sep    # Chile Time
-			-4:00	Chile	CL%sT
-Zone Pacific/Easter	-7:17:28 -	LMT	1890	    # Mataveri
-			-7:17:28 -	MMT	1932 Sep    # Mataveri Mean Time
-			-7:00	Chile	EAS%sT	1982 Mar 14 # Easter I Time
-			-6:00	Chile	EAS%sT
-#
-# Sala y Gomez Island is like Pacific/Easter.
-# Other Chilean locations, including Juan Fernandez Is, San Ambrosio,
-# San Felix, and Antarctic bases, are like America/Santiago.
-
-# Colombia
-# Shanks specifies 24:00 for 1992 transition times; go with IATA,
-# as it seems implausible to change clocks at midnight New Year's Eve.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	CO	1992	only	-	May	 2	0:00	1:00	S
-Rule	CO	1992	only	-	Dec	31	0:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Bogota	-4:56:20 -	LMT	1884 Mar 13
-			-4:56:20 -	BMT	1914 Nov 23 # Bogota Mean Time
-			-5:00	CO	CO%sT	# Colombia Time
-# Malpelo, Providencia, San Andres
-# no information; probably like America/Bogota
-
-# Curacao
-# Shanks says that Bottom and Oranjestad have been at -4:00 since
-# standard time was introduced on 1912-03-02; and that Kralendijk and Rincon
-# used Kralendijk Mean Time (-4:33:08) from 1912-02-02 to 1965-01-01.
-# This all predates our 1970 cutoff, though.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Curacao	-4:35:44 -	LMT	1912 Feb 12	# Willemstad
-			-4:30	-	ANT	1965 # Netherlands Antilles Time
-			-4:00	-	AST
-
-# Ecuador
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Guayaquil	-5:19:20 -	LMT	1890
-			-5:14:00 -	QMT	1931 # Quito Mean Time
-			-5:00	-	ECT	     # Ecuador Time
-Zone Pacific/Galapagos	-5:58:24 -	LMT	1931 # Puerto Baquerizo Moreno
-			-5:00	-	ECT	1986
-			-6:00	-	GALT	     # Galapagos Time
-
-# Falklands
-
-# From Paul Eggert (2001-03-05):
-# Between 1990 and 2000 inclusive, Shanks and the IATA agree except
-# the IATA gives 1996-09-08.  Go with Shanks.
-
-# From Falkland Islands Government Office, London (2001-01-22)
-# via Jesper Norgaard:
-# ... the clocks revert back to Local Mean Time at 2 am on Sunday 15
-# April 2001 and advance one hour to summer time at 2 am on Sunday 2
-# September.  It is anticipated that the clocks will revert back at 2
-# am on Sunday 21 April 2002 and advance to summer time at 2 am on
-# Sunday 1 September.
-
-# From Rives McDow (2001-02-13):
-#
-# I have communicated several times with people there, and the last
-# time I had communications that was helpful was in 1998.  Here is
-# what was said then:
-#
-# "The general rule was that Stanley used daylight saving and the Camp
-# did not. However for various reasons many people in the Camp have
-# started to use daylight saving (known locally as 'Stanley Time')
-# There is no rule as to who uses daylight saving - it is a matter of
-# personal choice and so it is impossible to draw a map showing who
-# uses it and who does not. Any list would be out of date as soon as
-# it was produced. This year daylight saving ended on April 18/19th
-# and started again on September 12/13th.  I do not know what the rule
-# is, but can find out if you like.  We do not change at the same time
-# as UK or Chile."
-#
-# I did have in my notes that the rule was "Second Saturday in Sep at
-# 0:00 until third Saturday in Apr at 0:00".  I think that this does
-# not agree in some cases with Shanks; is this true?
-#
-# Also, there is no mention in the list that some areas in the
-# Falklands do not use DST.  I have found in my communications there
-# that these areas are on the western half of East Falkland and all of
-# West Falkland.  Stanley is the only place that consistently observes
-# DST.  Again, as in other places in the world, the farmers don't like
-# it.  West Falkland is almost entirely sheep farmers.
-#
-# I know one lady there that keeps a list of which farm keeps DST and
-# which doesn't each year.  She runs a shop in Stanley, and says that
-# the list changes each year.  She uses it to communicate to her
-# customers, catching them when they are home for lunch or dinner.
-
-# From Paul Eggert (2001-03-05):
-# For now, we'll just record the time in Stanley, since we have no
-# better info.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Falk	1937	1938	-	Sep	lastSun	0:00	1:00	S
-Rule	Falk	1938	1942	-	Mar	Sun>=19	0:00	0	-
-Rule	Falk	1939	only	-	Oct	1	0:00	1:00	S
-Rule	Falk	1940	1942	-	Sep	lastSun	0:00	1:00	S
-Rule	Falk	1943	only	-	Jan	1	0:00	0	-
-Rule	Falk	1983	only	-	Sep	lastSun	0:00	1:00	S
-Rule	Falk	1984	1985	-	Apr	lastSun	0:00	0	-
-Rule	Falk	1984	only	-	Sep	16	0:00	1:00	S
-Rule	Falk	1985	2000	-	Sep	Sun>=9	0:00	1:00	S
-Rule	Falk	1986	2000	-	Apr	Sun>=16	0:00	0	-
-Rule	Falk	2001	max	-	Apr	Sun>=15	2:00	0	-
-Rule	Falk	2001	max	-	Sep	Sun>=1	2:00	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Atlantic/Stanley	-3:51:24 -	LMT	1890
-			-3:51:24 -	SMT	1912 Mar 12  # Stanley Mean Time
-			-4:00	Falk	FK%sT	1983 May     # Falkland Is Time
-			-3:00	Falk	FK%sT	1985 Sep 15
-			-4:00	Falk	FK%sT
-
-# French Guiana
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Cayenne	-3:29:20 -	LMT	1911 Jul
-			-4:00	-	GFT	1967 Oct # French Guiana Time
-			-3:00	-	GFT
-
-# Guyana
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Guyana	-3:52:40 -	LMT	1915 Mar	# Georgetown
-			-3:45	-	GBGT	1966 May 26 # Br Guiana Time
-			-3:45	-	GYT	1975 Jul 31 # Guyana Time
-			-3:00	-	GYT	1991
-# IATA SSIM (1996-06) says -4:00.  Assume a 1991 switch.
-			-4:00	-	GYT
-
-# Paraguay
-# From Paul Eggert (1999-10-29):
-# Shanks (1999) says that spring transitions are from 01:00 -> 02:00,
-# and autumn transitions are from 00:00 -> 23:00.  Go with earlier
-# editions of Shanks, and with the IATA, who say transitions occur at 00:00.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Para	1975	1988	-	Oct	 1	0:00	1:00	S
-Rule	Para	1975	1978	-	Mar	 1	0:00	0	-
-Rule	Para	1979	1991	-	Apr	 1	0:00	0	-
-Rule	Para	1989	only	-	Oct	22	0:00	1:00	S
-Rule	Para	1990	only	-	Oct	 1	0:00	1:00	S
-Rule	Para	1991	only	-	Oct	 6	0:00	1:00	S
-Rule	Para	1992	only	-	Mar	 1	0:00	0	-
-Rule	Para	1992	only	-	Oct	 5	0:00	1:00	S
-Rule	Para	1993	only	-	Mar	31	0:00	0	-
-Rule	Para	1993	1995	-	Oct	 1	0:00	1:00	S
-Rule	Para	1994	1995	-	Feb	lastSun	0:00	0	-
-Rule	Para	1996	only	-	Mar	 1	0:00	0	-
-# IATA SSIM (2000-02) says 1999-10-10; ignore this for now.
-# From Steffen Thorsen (2000-10-02):
-# I have three independent reports that Paraguay changed to DST this Sunday
-# (10-01).
-#
-# Translated by Gwillim Law (2001-02-27) from
-# <a href="http://www.diarionoticias.com.py/011000/nacional/naciona1.htm">
-# Noticias, a daily paper in Asuncion, Paraguay (2000-10-01)
-# </a>:
-# Starting at 0:00 today, the clock will be set forward 60 minutes, in
-# fulfillment of Decree No. 7,273 of the Executive Power....  The time change
-# system has been operating for several years.  Formerly there was a separate
-# decree each year; the new law has the same effect, but permanently.  Every
-# year, the time will change on the first Sunday of October; likewise, the
-# clock will be set back on the first Sunday of March.
-#
-# From Jesper Norgaard (2001-03-06) [an official URL saying similar things]:
-# http://gateway.abc.com.py:8000/pub/pag04.mbr/artic?FHA=2001-03-03-02.24.52.900592
-#
-Rule	Para	1996	2001	-	Oct	Sun>=1	0:00	1:00	S
-# IATA SSIM (1997-09) says Mar 1; go with Shanks.
-Rule	Para	1997	only	-	Feb	lastSun	0:00	0	-
-# Shanks says 1999-02-28; IATA SSIM (1999-02) says 1999-02-27, but
-# (1999-09) reports no date; go with above sources and Gerd Knops (2001-02-27).
-Rule	Para	1998	2001	-	Mar	Sun>=1	0:00	0	-
-# From Rives McDow (2002-02-28):
-# A decree was issued in Paraguay (no. 16350) on 2002-02-26 that changed the
-# dst method to be from the first Sunday in September to the first Sunday in
-# April.
-Rule	Para	2002	2004	-	Apr	Sun>=1	0:00	0	-
-Rule	Para	2002	2003	-	Sep	Sun>=1	0:00	1:00	S
-#
-# From Jesper Norgaard Welen (2005-01-02):
-# There are several sources that claim that Paraguay made
-# a timezone rule change in autumn 2004.
-# From Steffen Thorsen (2005-01-05):
-# Decree 1,867 (2004-03-05) <http://www.labor.com.py/noticias.asp?id=27>
-Rule	Para	2004	max	-	Oct	Sun>=15	0:00	1:00	S
-Rule	Para	2005	max	-	Mar	Sun>=8	0:00	0	-
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Asuncion	-3:50:40 -	LMT	1890
-			-3:50:40 -	AMT	1931 Oct 10 # Asuncion Mean Time
-			-4:00	-	PYT	1972 Oct # Paraguay Time
-			-3:00	-	PYT	1974 Apr
-			-4:00	Para	PY%sT
-
-# Peru
-#
-# <a href="news:xrGmb.39935$gA1.13896113@news4.srv.hcvlny.cv.net">
-# From Evelyn C. Leeper via Mark Brader (2003-10-26):</a>
-# When we were in Peru in 1985-1986, they apparently switched over
-# sometime between December 29 and January 3 while we were on the Amazon.
-#
-# From Paul Eggert (2003-11-02):
-# Shanks doesn't have this transition.  Assume 1986 was like 1987.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Peru	1938	only	-	Jan	 1	0:00	1:00	S
-Rule	Peru	1938	only	-	Apr	 1	0:00	0	-
-Rule	Peru	1938	1939	-	Sep	lastSun	0:00	1:00	S
-Rule	Peru	1939	1940	-	Mar	Sun>=24	0:00	0	-
-Rule	Peru	1986	1987	-	Jan	 1	0:00	1:00	S
-Rule	Peru	1986	1987	-	Apr	 1	0:00	0	-
-Rule	Peru	1990	only	-	Jan	 1	0:00	1:00	S
-Rule	Peru	1990	only	-	Apr	 1	0:00	0	-
-# IATA is ambiguous for 1993/1995; go with Shanks.
-Rule	Peru	1994	only	-	Jan	 1	0:00	1:00	S
-Rule	Peru	1994	only	-	Apr	 1	0:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Lima	-5:08:12 -	LMT	1890
-			-5:08:36 -	LMT	1908 Jul 28 # Lima Mean Time?
-			-5:00	Peru	PE%sT	# Peru Time
-
-# South Georgia
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Atlantic/South_Georgia -2:26:08 -	LMT	1890		# Grytviken
-			-2:00	-	GST	# South Georgia Time
-
-# South Sandwich Is
-# uninhabited; scientific personnel have wintered
-
-# Suriname
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Paramaribo	-3:40:40 -	LMT	1911
-			-3:40:52 -	PMT	1935     # Paramaribo Mean Time
-			-3:40:36 -	PMT	1945 Oct # The capital moved?
-			-3:30	-	NEGT	1975 Nov 20 # Dutch Guiana Time
-			-3:30	-	SRT	1984 Oct # Suriname Time
-			-3:00	-	SRT
-
-# Trinidad and Tobago
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Port_of_Spain -4:06:04 -	LMT	1912 Mar 2
-			-4:00	-	AST
-
-# Uruguay
-# From Paul Eggert (1993-11-18):
-# Uruguay wins the prize for the strangest peacetime manipulation of the rules.
-# From Shanks:
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-# Whitman gives 1923 Oct 1; go with Shanks.
-Rule	Uruguay	1923	only	-	Oct	 2	 0:00	0:30	HS
-Rule	Uruguay	1924	1926	-	Apr	 1	 0:00	0	-
-Rule	Uruguay	1924	1925	-	Oct	 1	 0:00	0:30	HS
-Rule	Uruguay	1933	1935	-	Oct	lastSun	 0:00	0:30	HS
-# Shanks gives 1935 Apr 1 0:00 and 1936 Mar 30 0:00; go with Whitman.
-Rule	Uruguay	1934	1936	-	Mar	Sat>=25	23:30s	0	-
-Rule	Uruguay	1936	only	-	Nov	 1	 0:00	0:30	HS
-Rule	Uruguay	1937	1941	-	Mar	lastSun	 0:00	0	-
-# Whitman gives 1937 Oct 3; go with Shanks.
-Rule	Uruguay	1937	1940	-	Oct	lastSun	 0:00	0:30	HS
-# Whitman gives 1941 Oct 24 - 1942 Mar 27, 1942 Dec 14 - 1943 Apr 13,
-# and 1943 Apr 13 ``to present time''; go with Shanks.
-Rule	Uruguay	1941	only	-	Aug	 1	 0:00	0	-
-Rule	Uruguay	1942	only	-	Jan	 1	 0:00	0:30	HS
-Rule	Uruguay	1942	only	-	Dec	14	 0:00	1:00	S
-Rule	Uruguay	1943	only	-	Mar	14	 0:00	0	-
-Rule	Uruguay	1959	only	-	May	24	 0:00	1:00	S
-Rule	Uruguay	1959	only	-	Nov	15	 0:00	0	-
-Rule	Uruguay	1960	only	-	Jan	17	 0:00	1:00	S
-Rule	Uruguay	1960	only	-	Mar	 6	 0:00	0	-
-Rule	Uruguay	1965	1967	-	Apr	Sun>=1	 0:00	1:00	S
-Rule	Uruguay	1965	only	-	Sep	26	 0:00	0	-
-Rule	Uruguay	1966	1967	-	Oct	31	 0:00	0	-
-Rule	Uruguay	1968	1970	-	May	27	 0:00	0:30	HS
-Rule	Uruguay	1968	1970	-	Dec	 2	 0:00	0	-
-Rule	Uruguay	1972	only	-	Apr	24	 0:00	1:00	S
-Rule	Uruguay	1972	only	-	Aug	15	 0:00	0	-
-Rule	Uruguay	1974	only	-	Mar	10	 0:00	0:30	HS
-Rule	Uruguay	1974	only	-	Dec	22	 0:00	1:00	S
-Rule	Uruguay	1976	only	-	Oct	 1	 0:00	0	-
-Rule	Uruguay	1977	only	-	Dec	 4	 0:00	1:00	S
-Rule	Uruguay	1978	only	-	Apr	 1	 0:00	0	-
-Rule	Uruguay	1979	only	-	Oct	 1	 0:00	1:00	S
-Rule	Uruguay	1980	only	-	May	 1	 0:00	0	-
-Rule	Uruguay	1987	only	-	Dec	14	 0:00	1:00	S
-Rule	Uruguay	1988	only	-	Mar	14	 0:00	0	-
-Rule	Uruguay	1988	only	-	Dec	11	 0:00	1:00	S
-Rule	Uruguay	1989	only	-	Mar	12	 0:00	0	-
-Rule	Uruguay	1989	only	-	Oct	29	 0:00	1:00	S
-# Shanks says no DST was observed in 1990/1 and 1991/2,
-# and that 1992/3's DST was from 10-25 to 03-01.  Go with IATA.
-Rule	Uruguay	1990	1992	-	Mar	Sun>=1	 0:00	0	-
-Rule	Uruguay	1990	1991	-	Oct	Sun>=21	 0:00	1:00	S
-Rule	Uruguay	1992	only	-	Oct	18	 0:00	1:00	S
-Rule	Uruguay	1993	only	-	Feb	28	 0:00	0	-
-# From Eduardo Cota (2004-09-20):
-# The uruguayan government has decreed a change in the local time....
-# http://www.presidencia.gub.uy/decretos/2004091502.htm
-Rule	Uruguay	2004	only	-	Sep	19	 0:00	1:00	S
-# From Steffen Thorsen (2005-03-11):
-# Uruguay's DST was scheduled to end on Sunday, 2005-03-13, but in order to
-# save energy ... it was postponed two weeks....
-# http://www.presidencia.gub.uy/_Web/noticias/2005/03/2005031005.htm
-Rule	Uruguay	2005	only	-	Mar	27	 2:00	0	-
-# From Eduardo Cota (2005-09-27):
-# http://www.presidencia.gub.uy/_Web/decretos/2005/09/CM%20119_09%2009%202005_00001.PDF
-# This means that from 2005-10-09 at 02:00 local time, until 2006-03-12 at
-# 02:00 local time, official time in Uruguay will be at GMT -2.
-Rule	Uruguay	2005	only	-	Oct	 9	 2:00	1:00	S
-Rule	Uruguay	2006	only	-	Mar	12	 2:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Montevideo	-3:44:44 -	LMT	1898 Jun 28
-			-3:44:44 -	MMT	1920 May  1	# Montevideo MT
-			-3:30	Uruguay	UY%sT	1942 Dec 14	# Uruguay Time
-			-3:00	Uruguay	UY%sT
-
-# Venezuela
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Caracas	-4:27:44 -	LMT	1890
-			-4:27:40 -	CMT	1912 Feb 12 # Caracas Mean Time?
-			-4:30	-	VET	1965	     # Venezuela Time
-			-4:00	-	VET
+# @(#)southamerica	7.66
+# <pre>
+
+# This data is by no means authoritative; if you think you know better,
+# go ahead and edit the file (and please send any changes to
+# tz@elsie.nci.nih.gov for general use in the future).
+
+# From Paul Eggert (1999-07-07):
+# A good source for time zone historical data outside the U.S. is
+# Thomas G. Shanks, The International Atlas (5th edition),
+# San Diego: ACS Publications, Inc. (1999).
+#
+# Gwillim Law writes that a good source
+# for recent time zone data is the International Air Transport
+# Association's Standard Schedules Information Manual (IATA SSIM),
+# published semiannually.  Law sent in several helpful summaries
+# of the IATA's data after 1990.
+#
+# Except where otherwise noted, Shanks is the source for entries through 1990,
+# and IATA SSIM is the source for entries after 1990.
+#
+# Earlier editions of these tables used the North American style (e.g. ARST and
+# ARDT for Argentine Standard and Daylight Time), but the following quote
+# suggests that it's better to use European style (e.g. ART and ARST).
+#	I suggest the use of _Summer time_ instead of the more cumbersome
+#	_daylight-saving time_.  _Summer time_ seems to be in general use
+#	in Europe and South America.
+#	-- E O Cutler, _New York Times_ (1937-02-14), quoted in
+#	H L Mencken, _The American Language: Supplement I_ (1960), p 466
+#
+# Earlier editions of these tables also used the North American style
+# for time zones in Brazil, but this was incorrect, as Brazilians say
+# "summer time".  Reinaldo Goulart, a Sao Paulo businessman active in
+# the railroad sector, writes (1999-07-06):
+#	The subject of time zones is currently a matter of discussion/debate in
+#	Brazil.  Let's say that "the Brasilia time" is considered the
+#	"official time" because Brasilia is the capital city.
+#	The other three time zones are called "Brasilia time "minus one" or
+#	"plus one" or "plus two".  As far as I know there is no such
+#	name/designation as "Eastern Time" or "Central Time".
+# So I invented the following (English-language) abbreviations for now.
+# Corrections are welcome!
+#		std	dst
+#	-2:00	FNT	FNST	Fernando de Noronha
+#	-3:00	BRT	BRST	Brasilia
+#	-4:00	AMT	AMST	Amazon
+#	-5:00	ACT	ACST	Acre
+
+###############################################################################
+
+###############################################################################
+
+# Argentina
+
+# From Bob Devine (1988-01-28):
+# Argentina: first Sunday in October to first Sunday in April since 1976.
+# Double Summer time from 1969 to 1974.  Switches at midnight.
+
+# From U. S. Naval Observatory (1988-01-199):
+# ARGENTINA           3 H BEHIND   UTC
+
+# From Hernan G. Otero (1995-06-26):
+# I am sending modifications to the Argentine time zone table...
+# AR was chosen because they are the ISO letters that represent Argentina.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Arg	1930	only	-	Dec	 1	0:00	1:00	S
+Rule	Arg	1931	only	-	Apr	 1	0:00	0	-
+Rule	Arg	1931	only	-	Oct	15	0:00	1:00	S
+Rule	Arg	1932	1940	-	Mar	 1	0:00	0	-
+Rule	Arg	1932	1939	-	Nov	 1	0:00	1:00	S
+Rule	Arg	1940	only	-	Jul	 1	0:00	1:00	S
+Rule	Arg	1941	only	-	Jun	15	0:00	0	-
+Rule	Arg	1941	only	-	Oct	15	0:00	1:00	S
+Rule	Arg	1943	only	-	Aug	 1	0:00	0	-
+Rule	Arg	1943	only	-	Oct	15	0:00	1:00	S
+Rule	Arg	1946	only	-	Mar	 1	0:00	0	-
+Rule	Arg	1946	only	-	Oct	 1	0:00	1:00	S
+Rule	Arg	1963	only	-	Oct	 1	0:00	0	-
+Rule	Arg	1963	only	-	Dec	15	0:00	1:00	S
+Rule	Arg	1964	1966	-	Mar	 1	0:00	0	-
+Rule	Arg	1964	1966	-	Oct	15	0:00	1:00	S
+Rule	Arg	1967	only	-	Apr	 2	0:00	0	-
+Rule	Arg	1967	1968	-	Oct	Sun>=1	0:00	1:00	S
+Rule	Arg	1968	1969	-	Apr	Sun>=1	0:00	0	-
+Rule	Arg	1974	only	-	Jan	23	0:00	1:00	S
+Rule	Arg	1974	only	-	May	 1	0:00	0	-
+Rule	Arg	1988	only	-	Dec	 1	0:00	1:00	S
+#
+# From Hernan G. Otero (1995-06-26):
+# These corrections were contributed by InterSoft Argentina S.A.,
+# obtaining the data from the:
+# Talleres de Hidrografia Naval Argentina
+# (Argentine Naval Hydrography Institute)
+#
+# Shanks stops after 1992-03-01; go with Otero.
+Rule	Arg	1989	1993	-	Mar	Sun>=1	0:00	0	-
+Rule	Arg	1989	1992	-	Oct	Sun>=15	0:00	1:00	S
+#
+# From Hernan G. Otero (1995-06-26):
+# From this moment on, the law that mandated the daylight saving
+# time corrections was derogated and no more modifications
+# to the time zones (for daylight saving) are now made.
+#
+# From Rives McDow (2000-01-10):
+# On October 3, 1999, 0:00 local, Argentina implemented daylight savings time,
+# which did not result in the switch of a time zone, as they stayed 9 hours
+# from the International Date Line.
+Rule	Arg	1999	only	-	Oct	Sun>=1	0:00	1:00	S
+Rule	Arg	2000	only	-	Mar	Sun>=1	0:00	0	-
+#
+# From Peter Gradelski via Steffen Thorsen (2000-03-01):
+# We just checked with our Sao Paulo office and they say the government of
+# Argentina decided not to become one of the countries that go on or off DST.
+# So Buenos Aires should be -3 hours from GMT at all times.
+#
+# From Fabian L. Arce Jofre (2000-04-04):
+# The law that claimed DST for Argentina was derogated by President Fernando
+# de la Rua on March 2, 2000, because it would make people spend more energy
+# in the winter time, rather than less.  The change took effect on March 3.
+#
+# From Mariano Absatz (2001-06-06):
+# one of the major newspapers here in Argentina said that the 1999
+# Timezone Law (which never was effectively applied) will (would?) be
+# in effect.... The article is at
+# http://ar.clarin.com/diario/2001-06-06/e-01701.htm
+# ... The Law itself is "Ley No 25155", sanctioned on 1999-08-25, enacted
+# 1999-09-17, and published 1999-09-21.  The official publication is at:
+# http://www.boletin.jus.gov.ar/BON/Primera/1999/09-Septiembre/21/PDF/BO21-09-99LEG.PDF
+# Regretfully, you have to subscribe (and pay) for the on-line version....
+#
+# (2001-06-12):
+# the timezone for Argentina will not change next Sunday.
+# Apparently it will do so on Sunday 24th....
+# http://ar.clarin.com/diario/2001-06-12/s-03501.htm
+#
+# (2001-06-25):
+# Last Friday (yes, the last working day before the date of the change), the
+# Senate annulled the 1999 law that introduced the changes later postponed.
+# http://www.clarin.com.ar/diario/2001-06-22/s-03601.htm
+# It remains the vote of the Deputies..., but it will be the same....
+# This kind of things had always been done this way in Argentina.
+# We are still -03:00 all year round in all of the country.
+#
+# From Mariano Absatz (2004-05-21):
+# Today it was officially published that the Province of Mendoza is changing
+# its timezone this winter... starting tomorrow night....
+# http://www.gobernac.mendoza.gov.ar/boletin/pdf/20040521-27158-normas.pdf
+# From Paul Eggert (2004-05-24):
+# It's Law No. 7,210.  This change is due to a public power emergency, so for
+# now we'll assume it's for this year only.
+#
+# From Paul Eggert (2002-01-22):
+# <a href="http://www.spicasc.net/horvera.html">
+# Hora de verano para la Republica Argentina (2000-10-01)
+# </a> says that standard time in Argentina from 1894-10-31
+# to 1920-05-01 was -4:16:48.25.  Go with this more-precise value
+# over Shanks.
+#
+# From Mariano Absatz (2004-06-05):
+# These media articles from a major newspaper mostly cover the current state:
+# http://www.lanacion.com.ar/04/05/27/de_604825.asp
+# http://www.lanacion.com.ar/04/05/28/de_605203.asp
+#
+# The following eight (8) provinces pulled clocks back to UTC-04:00 at
+# midnight Monday May 31st. (that is, the night between 05/31 and 06/01).
+# Apparently, all nine provinces would go back to UTC-03:00 at the same
+# time in October 17th.
+#
+# Catamarca, Chubut, La Rioja, San Juan, San Luis, Santa Cruz,
+# Tierra del Fuego, Tucuman.
+#
+# From Mariano Absatz (2004-06-14):
+# ... this weekend, the Province of Tucuman decided it'd go back to UTC-03:00
+# yesterday midnight (that is, at 24:00 Saturday 12th), since the people's
+# annoyance with the change is much higher than the power savings obtained....
+#
+# From Gwillim Law (2004-06-14):
+# http://www.lanacion.com.ar/04/06/10/de_609078.asp ...
+#     "The time change in Tierra del Fuego was a conflicted decision from
+#   the start.  The government had decreed that the measure would take
+#   effect on June 1, but a normative error forced the new time to begin
+#   three days earlier, from a Saturday to a Sunday....
+# Our understanding was that the change was originally scheduled to take place
+# on June 1 at 00:00 in Chubut, Santa Cruz, Tierra del Fuego (and some other
+# provinces).  Sunday was May 30, only two days earlier.  So the article
+# contains a contradiction.  I would give more credence to the Saturday/Sunday
+# date than the "three days earlier" phrase, and conclude that Tierra del
+# Fuego set its clocks back at 2004-05-30 00:00.
+#
+# From Steffen Thorsen (2004-10-05):
+# The previous law 7210 which changed the province of Mendoza's time zone
+# back in May have been modified slightly in a new law 7277, which set the
+# new end date to 2004-09-26 (original date was 2004-10-17).
+# http://www.gobernac.mendoza.gov.ar/boletin/pdf/20040924-27244-normas.pdf
+#
+# From Mariano Absatz (2004-10-05):
+# San Juan changed from UTC-03:00 to UTC-04:00 at midnight between
+# Sunday, May 30th and Monday, May 31st.  It changed back to UTC-03:00
+# at midnight between Saturday, July 24th and Sunday, July 25th....
+# http://www.sanjuan.gov.ar/prensa/archivo/000329.html
+# http://www.sanjuan.gov.ar/prensa/archivo/000426.html
+# http://www.sanjuan.gov.ar/prensa/archivo/000441.html
+
+# Unless otherwise specified, data are from Shanks through 1992, from
+# the IATA otherwise.  As noted below, Shanks says that
+# America/Cordoba split into 6 subregions during 1991/1992, but we
+# haven't verified this yet so for now we'll keep it a single region.
+#
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+#
+# Buenos Aires (BA), Capital Federal (CF),
+Zone America/Argentina/Buenos_Aires -3:53:48 - LMT 1894 Oct 31
+			-4:16:48 -	CMT	1920 May # Cordoba Mean Time
+			-4:00	-	ART	1930 Dec
+			-4:00	Arg	AR%sT	1969 Oct  5
+			-3:00	Arg	AR%sT	1999 Oct  3
+			-4:00	Arg	AR%sT	2000 Mar  3
+			-3:00	-	ART
+#
+# Santa Fe (SF), Entre Rios (ER), Corrientes (CN), Misiones (MN), Chaco (CC),
+# Formosa (FM), Salta (SA), Santiago del Estero (SE), Cordoba (CB),
+# San Luis (SL), La Pampa (LP), Neuquen (NQ), Rio Negro (RN)
+#
+# Shanks also makes the following claims, which we haven't verified:
+# - Formosa switched to -3:00 on 1991-01-07.
+# - Misiones switched to -3:00 on 1990-12-29.
+# - Chaco switched to -3:00 on 1991-01-04.
+# - San Luis switched to -4:00 on 1990-03-14, then to -3:00 on 1990-10-15,
+#   then to -4:00 on 1991-03-01, then to -3:00 on 1991-06-01.
+# - Santiago del Estero switched to -4:00 on 1991-04-01,
+#   then to -3:00 on 1991-04-26.
+#
+Zone America/Argentina/Cordoba -4:16:48 - LMT	1894 Oct 31
+			-4:16:48 -	CMT	1920 May
+			-4:00	-	ART	1930 Dec
+			-4:00	Arg	AR%sT	1969 Oct  5
+			-3:00	Arg	AR%sT	1991 Mar  3
+			-4:00	-	WART	1991 Oct 20
+			-3:00	Arg	AR%sT	1999 Oct  3
+			-4:00	Arg	AR%sT	2000 Mar  3
+			-3:00	-	ART
+#
+# Tucuman (TM)
+Zone America/Argentina/Tucuman -4:20:52 - LMT	1894 Oct 31
+			-4:16:48 -	CMT	1920 May
+			-4:00	-	ART	1930 Dec
+			-4:00	Arg	AR%sT	1969 Oct  5
+			-3:00	Arg	AR%sT	1991 Mar  3
+			-4:00	-	WART	1991 Oct 20
+			-3:00	Arg	AR%sT	1999 Oct  3
+			-4:00	Arg	AR%sT	2000 Mar  3
+			-3:00	-	ART	2004 Jun  1
+			-4:00	-	WART	2004 Jun 13
+			-3:00	-	ART
+#
+# La Rioja (LR)
+Zone America/Argentina/La_Rioja -4:27:24 - LMT	1894 Oct 31
+			-4:16:48 -	CMT	1920 May
+			-4:00	-	ART	1930 Dec
+			-4:00	Arg	AR%sT	1969 Oct  5
+			-3:00	Arg	AR%sT	1991 Mar  1
+			-4:00	-	WART	1991 May  7
+			-3:00	Arg	AR%sT	1999 Oct  3
+			-4:00	Arg	AR%sT	2000 Mar  3
+			-3:00	-	ART	2004 Jun  1
+			-4:00	-	WART	2004 Jun 20
+			-3:00	-	ART
+#
+# San Juan (SJ)
+Zone America/Argentina/San_Juan -4:34:04 - LMT	1894 Oct 31
+			-4:16:48 -	CMT	1920 May
+			-4:00	-	ART	1930 Dec
+			-4:00	Arg	AR%sT	1969 Oct  5
+			-3:00	Arg	AR%sT	1991 Mar  1
+			-4:00	-	WART	1991 May  7
+			-3:00	Arg	AR%sT	1999 Oct  3
+			-4:00	Arg	AR%sT	2000 Mar  3
+			-3:00	-	ART	2004 May 31
+			-4:00	-	WART	2004 Jul 25
+			-3:00	-	ART
+#
+# Jujuy (JY)
+Zone America/Argentina/Jujuy -4:21:12 -	LMT	1894 Oct 31
+			-4:16:48 -	CMT	1920 May
+			-4:00	-	ART	1930 Dec
+			-4:00	Arg	AR%sT	1969 Oct  5
+			-3:00	Arg	AR%sT	1990 Mar  4
+			-4:00	-	WART	1990 Oct 28
+			-4:00	1:00	WARST	1991 Mar 17
+			-4:00	-	WART	1991 Oct  6
+			-3:00	1:00	ARST	1992
+			-3:00	Arg	AR%sT	1999 Oct  3
+			-4:00	Arg	AR%sT	2000 Mar  3
+			-3:00	-	ART
+#
+# Catamarca (CT), Chubut (CH)
+Zone America/Argentina/Catamarca -4:23:08 - LMT	1894 Oct 31
+			-4:16:48 -	CMT	1920 May
+			-4:00	-	ART	1930 Dec
+			-4:00	Arg	AR%sT	1969 Oct  5
+			-3:00	Arg	AR%sT	1991 Mar  3
+			-4:00	-	WART	1991 Oct 20
+			-3:00	Arg	AR%sT	1999 Oct  3
+			-4:00	Arg	AR%sT	2000 Mar  3
+			-3:00	-	ART	2004 Jun  1
+			-4:00	-	WART	2004 Jun 20
+			-3:00	-	ART
+#
+# Mendoza (MZ)
+Zone America/Argentina/Mendoza -4:35:16 - LMT	1894 Oct 31
+			-4:16:48 -	CMT	1920 May
+			-4:00	-	ART	1930 Dec
+			-4:00	Arg	AR%sT	1969 Oct  5
+			-3:00	Arg	AR%sT	1990 Mar  4
+			-4:00	-	WART	1990 Oct 15
+			-4:00	1:00	WARST	1991 Mar  1
+			-4:00	-	WART	1991 Oct 15
+			-4:00	1:00	WARST	1992 Mar  1
+			-4:00	-	WART	1992 Oct 18
+			-3:00	Arg	AR%sT	1999 Oct  3
+			-4:00	Arg	AR%sT	2000 Mar  3
+			-3:00	-	ART	2004 May 23
+			-4:00	-	WART	2004 Sep 26
+			-3:00	-	ART
+#
+# Santa Cruz (SC)
+Zone America/Argentina/Rio_Gallegos -4:36:52 - LMT 1894 Oct 31
+			-4:16:48 -	CMT	1920 May # Cordoba Mean Time
+			-4:00	-	ART	1930 Dec
+			-4:00	Arg	AR%sT	1969 Oct  5
+			-3:00	Arg	AR%sT	1999 Oct  3
+			-4:00	Arg	AR%sT	2000 Mar  3
+			-3:00	-	ART	2004 Jun  1
+			-4:00	-	WART	2004 Jun 20
+			-3:00	-	ART
+#
+# Tierra del Fuego, Antartida e Islas del Atlantico Sur (TF)
+Zone America/Argentina/Ushuaia -4:33:12 - LMT 1894 Oct 31
+			-4:16:48 -	CMT	1920 May # Cordoba Mean Time
+			-4:00	-	ART	1930 Dec
+			-4:00	Arg	AR%sT	1969 Oct  5
+			-3:00	Arg	AR%sT	1999 Oct  3
+			-4:00	Arg	AR%sT	2000 Mar  3
+			-3:00	-	ART	2004 May 30
+			-4:00	-	WART	2004 Jun 20
+			-3:00	-	ART
+
+# Aruba
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Aruba	-4:40:24 -	LMT	1912 Feb 12	# Oranjestad
+			-4:30	-	ANT	1965 # Netherlands Antilles Time
+			-4:00	-	AST
+
+# Bolivia
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/La_Paz	-4:32:36 -	LMT	1890
+			-4:32:36 -	CMT	1931 Oct 15 # Calamarca MT
+			-4:32:36 1:00	BOST	1932 Mar 21 # Bolivia ST
+			-4:00	-	BOT	# Bolivia Time
+
+# Brazil
+
+# From Paul Eggert (1993-11-18):
+# The mayor of Rio recently attempted to change the time zone rules
+# just in his city, in order to leave more summer time for the tourist trade.
+# The rule change lasted only part of the day;
+# the federal government refused to follow the city's rules, and business
+# was in a chaos, so the mayor backed down that afternoon.
+
+# From IATA SSIM (1996-02):
+# _Only_ the following states in BR1 observe DST: Rio Grande do Sul (RS),
+# Santa Catarina (SC), Parana (PR), Sao Paulo (SP), Rio de Janeiro (RJ),
+# Espirito Santo (ES), Minas Gerais (MG), Bahia (BA), Goias (GO),
+# Distrito Federal (DF), Tocantins (TO), Sergipe [SE] and Alagoas [AL].
+# [The last three states are new to this issue of the IATA SSIM.]
+
+# From Gwillim Law (1996-10-07):
+# Geography, history (Tocantins was part of Goias until 1989), and other
+# sources of time zone information lead me to believe that AL, SE, and TO were
+# always in BR1, and so the only change was whether or not they observed DST....
+# The earliest issue of the SSIM I have is 2/91.  Each issue from then until
+# 9/95 says that DST is observed only in the ten states I quoted from 9/95,
+# along with Mato Grosso (MT) and Mato Grosso do Sul (MS), which are in BR2
+# (UTC-4)....  The other two time zones given for Brazil are BR3, which is
+# UTC-5, no DST, and applies only in the state of Acre (AC); and BR4, which is
+# UTC-2, and applies to Fernando de Noronha (formerly FN, but I believe it's
+# become part of the state of Pernambuco).  The boundary between BR1 and BR2
+# has never been clearly stated.  They've simply been called East and West.
+# However, some conclusions can be drawn from another IATA manual: the Airline
+# Coding Directory, which lists close to 400 airports in Brazil.  For each
+# airport it gives a time zone which is coded to the SSIM.  From that
+# information, I'm led to conclude that the states of Amapa (AP), Ceara (CE),
+# Maranhao (MA), Paraiba (PR), Pernambuco (PE), Piaui (PI), and Rio Grande do
+# Norte (RN), and the eastern part of Para (PA) are all in BR1 without DST.
+
+# From Marcos Tadeu (1998-09-27):
+# <a href="http://pcdsh01.on.br/verao1.html">
+# Brazilian official page
+# </a>
+
+# From Jesper Norgaard (2000-11-03):
+# [For an official list of which regions in Brazil use which time zones, see:]
+# http://pcdsh01.on.br/Fusbr.htm
+# http://pcdsh01.on.br/Fusbrhv.htm
+
+# From Celso Doria via David Madeo (2002-10-09):
+# The reason for the delay this year has to do with elections in Brazil.
+#
+# Unlike in the United States, elections in Brazil are 100% computerized and
+# the results are known almost immediately.  Yesterday, it was the first
+# round of the elections when 115 million Brazilians voted for President,
+# Governor, Senators, Federal Deputies, and State Deputies.  Nobody is
+# counting (or re-counting) votes anymore and we know there will be a second
+# round for the Presidency and also for some Governors.  The 2nd round will
+# take place on October 27th.
+#
+# The reason why the DST will only begin November 3rd is that the thousands
+# of electoral machines used cannot have their time changed, and since the
+# Constitution says the elections must begin at 8:00 AM and end at 5:00 PM,
+# the Government decided to postpone DST, instead of changing the Constitution
+# (maybe, for the next elections, it will be possible to change the clock)...
+
+# From Rodrigo Severo (2004-10-04):
+# It's just the biannual change made necessary by the much hyped, supposedly
+# modern Brazilian eletronic voting machines which, apparently, can't deal
+# with a time change between the first and the second rounds of the elections.
+
+# From Paul Eggert (2002-10-10):
+# The official decrees referenced below are mostly taken from
+# <a href="http://pcdsh01.on.br/DecHV.html">
+# Decretos sobre o Horario de Verao no Brasil
+# </a> (2001-09-20, in Portuguese).
+# The official site for all decrees, including those not related to time, is
+# <a href="http://www.presidencia.gov.br/CCIVIL/decreto/principal_ano.htm">
+# Presidencia da Republica, Subchefia para Assuntos Juridicos, Decretos
+# </a> (in Portuguese).
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+# Decree <a href="http://pcdsh01.on.br/HV20466.htm">20,466</a> (1931-10-01)
+# Decree <a href="http://pcdsh01.on.br/HV21896.htm">21,896</a> (1932-01-10)
+Rule	Brazil	1931	only	-	Oct	 3	11:00	1:00	S
+Rule	Brazil	1932	1933	-	Apr	 1	 0:00	0	-
+Rule	Brazil	1932	only	-	Oct	 3	 0:00	1:00	S
+# Decree <a href="http://pcdsh01.on.br/HV23195.htm">23,195</a> (1933-10-10)
+# revoked DST.
+# Decree <a href="http://pcdsh01.on.br/HV27496.htm">27,496</a> (1949-11-24)
+# Decree <a href="http://pcdsh01.on.br/HV27998.htm">27,998</a> (1950-04-13)
+Rule	Brazil	1949	1952	-	Dec	 1	 0:00	1:00	S
+Rule	Brazil	1950	only	-	Apr	16	 1:00	0	-
+Rule	Brazil	1951	1952	-	Apr	 1	 0:00	0	-
+# Decree <a href="http://pcdsh01.on.br/HV32308.htm">32,308</a> (1953-02-24)
+Rule	Brazil	1953	only	-	Mar	 1	 0:00	0	-
+# Decree <a href="http://pcdsh01.on.br/HV34724.htm">34,724</a> (1953-11-30)
+# revoked DST.
+# Decree <a href="http://pcdsh01.on.br/HV52700.htm">52,700</a> (1963-10-18)
+# established DST from 1963-10-23 00:00 to 1964-02-29 00:00
+# in SP, RJ, GB, MG, ES, due to the prolongation of the drought.
+# Decree <a href="http://pcdsh01.on.br/HV53071.htm">53,071</a> (1963-12-03)
+# extended the above decree to all of the national territory on 12-09.
+Rule	Brazil	1963	only	-	Dec	 9	 0:00	1:00	S
+# Decree <a href="http://pcdsh01.on.br/HV53604.htm">53,604</a> (1964-02-25)
+# extended summer time by one day to 1964-03-01 00:00 (start of school).
+Rule	Brazil	1964	only	-	Mar	 1	 0:00	0	-
+# Decree <a href="http://pcdsh01.on.br/HV55639.htm">55,639</a> (1965-01-27)
+Rule	Brazil	1965	only	-	Jan	31	 0:00	1:00	S
+Rule	Brazil	1965	only	-	Mar	31	 0:00	0	-
+# Decree <a href="http://pcdsh01.on.br/HV57303.htm">57,303</a> (1965-11-22)
+Rule	Brazil	1965	only	-	Dec	 1	 0:00	1:00	S
+# Decree <a href="http://pcdsh01.on.br/HV57843.htm">57,843</a> (1966-02-18)
+Rule	Brazil	1966	1968	-	Mar	 1	 0:00	0	-
+Rule	Brazil	1966	1967	-	Nov	 1	 0:00	1:00	S
+# Decree <a href="http://pcdsh01.on.br/HV63429.htm">63,429</a> (1968-10-15)
+# revoked DST.
+# Decree <a href="http://pcdsh01.on.br/HV91698.htm">91,698</a> (1985-09-27)
+Rule	Brazil	1985	only	-	Nov	 2	 0:00	1:00	S
+# Decree 92,310 (1986-01-21)
+# Decree 92,463 (1986-03-13)
+Rule	Brazil	1986	only	-	Mar	15	 0:00	0	-
+# Decree 93,316 (1986-10-01)
+Rule	Brazil	1986	only	-	Oct	25	 0:00	1:00	S
+Rule	Brazil	1987	only	-	Feb	14	 0:00	0	-
+# Decree <a href="http://pcdsh01.on.br/HV94922.htm">94,922</a> (1987-09-22)
+Rule	Brazil	1987	only	-	Oct	25	 0:00	1:00	S
+Rule	Brazil	1988	only	-	Feb	 7	 0:00	0	-
+# Decree <a href="http://pcdsh01.on.br/HV96676.htm">96,676</a> (1988-09-12)
+# except for the states of AC, AM, PA, RR, RO, and AP (then a territory)
+Rule	Brazil	1988	only	-	Oct	16	 0:00	1:00	S
+Rule	Brazil	1989	only	-	Jan	29	 0:00	0	-
+# Decree <a href="http://pcdsh01.on.br/HV98077.htm">98,077</a> (1989-08-21)
+# with the same exceptions
+Rule	Brazil	1989	only	-	Oct	15	 0:00	1:00	S
+Rule	Brazil	1990	only	-	Feb	11	 0:00	0	-
+# Decree <a href="http://pcdsh01.on.br/HV99530.htm">99,530</a> (1990-09-17)
+# adopted by RS, SC, PR, SP, RJ, ES, MG, GO, MS, DF.
+# Decree 99,629 (1990-10-19) adds BA, MT.
+Rule	Brazil	1990	only	-	Oct	21	 0:00	1:00	S
+Rule	Brazil	1991	only	-	Feb	17	 0:00	0	-
+# <a href="http://pcdsh01.on.br/HV1991.htm">Unnumbered decree</a> (1991-09-25)
+# adopted by RS, SC, PR, SP, RJ, ES, MG, BA, GO, MT, MS, DF.
+Rule	Brazil	1991	only	-	Oct	20	 0:00	1:00	S
+Rule	Brazil	1992	only	-	Feb	 9	 0:00	0	-
+# <a href="http://pcdsh01.on.br/HV1992.htm">Unnumbered decree</a> (1992-10-16)
+# adopted by same states.
+Rule	Brazil	1992	only	-	Oct	25	 0:00	1:00	S
+Rule	Brazil	1993	only	-	Jan	31	 0:00	0	-
+# Decree <a href="http://pcdsh01.on.br/HV942.htm">942</a> (1993-09-28)
+# adopted by same states, plus AM.
+# Decree <a href="http://pcdsh01.on.br/HV1252.htm">1,252</a> (1994-09-22;
+# web page corrected 2004-01-07) adopted by same states, minus AM.
+# Decree <a href="http://pcdsh01.on.br/HV1636.htm">1,636</a> (1995-09-14)
+# adopted by same states, plus MT and TO.
+# Decree <a href="http://pcdsh01.on.br/HV1674.htm">1,674</a> (1995-10-13)
+# adds AL, SE.
+Rule	Brazil	1993	1995	-	Oct	Sun>=11	 0:00	1:00	S
+Rule	Brazil	1994	1995	-	Feb	Sun>=15	 0:00	0	-
+Rule	Brazil	1996	only	-	Feb	11	 0:00	0	-
+# Decree <a href="http://pcdsh01.on.br/HV2000.htm">2,000</a> (1996-09-04)
+# adopted by same states, minus AL, SE.
+Rule	Brazil	1996	only	-	Oct	 6	 0:00	1:00	S
+Rule	Brazil	1997	only	-	Feb	16	 0:00	0	-
+# From Daniel C. Sobral (1998-02-12):
+# In 1997, the DS began on October 6. The stated reason was that
+# because international television networks ignored Brazil's policy on DS,
+# they bought the wrong times on satellite for coverage of Pope's visit.
+# This year, the ending date of DS was postponed to March 1
+# to help dealing with the shortages of electric power.
+#
+# Decree 2,317 (1997-09-04), adopted by same states.
+Rule	Brazil	1997	only	-	Oct	 6	 0:00	1:00	S
+# Decree <a href="http://pcdsh01.on.br/figuras/HV2495.JPG">2,495</a>
+# (1998-02-10)
+Rule	Brazil	1998	only	-	Mar	 1	 0:00	0	-
+# Decree <a href="http://pcdsh01.on.br/figuras/Hv98.jpg">2,780</a> (1998-09-11)
+# adopted by the same states as before.
+Rule	Brazil	1998	only	-	Oct	11	 0:00	1:00	S
+Rule	Brazil	1999	only	-	Feb	21	 0:00	0	-
+# Decree <a href="http://pcdsh01.on.br/figuras/HV3150.gif">3,150</a>
+# (1999-08-23) adopted by same states.
+# Decree <a href="http://pcdsh01.on.br/DecHV99.gif">3,188</a> (1999-09-30)
+# adds SE, AL, PB, PE, RN, CE, PI, MA and RR.
+Rule	Brazil	1999	only	-	Oct	 3	 0:00	1:00	S
+Rule	Brazil	2000	only	-	Feb	27	 0:00	0	-
+# Decree <a href="http://pcdsh01.on.br/DEC3592.htm">3,592</a> (2000-09-06)
+# adopted by the same states as before.
+# Decree <a href="http://pcdsh01.on.br/Dec3630.jpg">3,630</a> (2000-10-13)
+# repeals DST in PE and RR, effective 2000-10-15 00:00.
+# Decree <a href="http://pcdsh01.on.br/Dec3632.jpg">3,632</a> (2000-10-17)
+# repeals DST in SE, AL, PB, RN, CE, PI and MA, effective 2000-10-22 00:00.
+# Decree <a href="http://pcdsh01.on.br/figuras/HV3916.gif">3,916</a>
+# (2001-09-13) reestablishes DST in AL, CE, MA, PB, PE, PI, RN, SE.
+Rule	Brazil	2000	2001	-	Oct	Sun>=8	 0:00	1:00	S
+Rule	Brazil	2001	max	-	Feb	Sun>=15	 0:00	0	-
+# Decree 4,399 (2002-10-01) repeals DST in AL, CE, MA, PB, PE, PI, RN, SE.
+# <a href="http://www.presidencia.gov.br/CCIVIL/decreto/2002/D4399.htm"></a>
+Rule	Brazil	2002	only	-	Nov	 3	 0:00	1:00	S
+# Decree 4,844 (2003-09-24; corrected 2003-09-26) repeals DST in BA, MT, TO.
+# <a href="http://www.presidencia.gov.br/CCIVIL/decreto/2003/D4844.htm"></a>
+Rule	Brazil	2003	only	-	Oct	19	 0:00	1:00	S
+# Decree 5,223 (2004-10-01) reestablishes DST in MT.
+# <a href="http://www.planalto.gov.br/ccivil_03/_Ato2004-2006/2004/Decreto/D5223.htm"></a>
+Rule	Brazil	2004	only	-	Nov	 2	 0:00	1:00	S
+# Decree <a href="http://pcdsh01.on.br/DecHV5539.gif">5,539</a> (2005-09-19),
+# adopted by the same states as before.
+Rule	Brazil	2005	max	-	Oct	Sun>=15	 0:00	1:00	S
+# The latest ruleset listed above says that the following states observe DST:
+# DF, ES, GO, MG, MS, MT, PR, RJ, RS, SC, SP.
+# For dates after mid-2006, the above rules with TO="max" are guesses
+# and are quite possibly wrong, but are more likely than no DST at all.
+
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+#
+# Fernando de Noronha (administratively part of PE)
+Zone America/Noronha	-2:09:40 -	LMT	1914
+			-2:00	Brazil	FN%sT	1990 Sep 17
+			-2:00	-	FNT	1999 Sep 30
+			-2:00	Brazil	FN%sT	2000 Oct 15
+			-2:00	-	FNT	2001 Sep 13
+			-2:00	Brazil	FN%sT	2002 Oct  1
+			-2:00	-	FNT
+# Other Atlantic islands have no permanent settlement.
+# These include Trindade and Martin Vaz (administratively part of ES),
+# Atol das Rocas (RN), and Penedos de Sao Pedro e Sao Paulo (PE).
+# Fernando de Noronha was a separate territory from 1942-09-02 to 1989-01-01;
+# it also included the Penedos.
+#
+# Amapa (AP), east Para (PA)
+# East Para includes Belem, Maraba, Serra Norte, and Sao Felix do Xingu.
+# The division between east and west Para is the river Xingu.
+# In the north a very small part from the river Javary (now Jari I guess,
+# the border with Amapa) to the Amazon, then to the Xingu.
+Zone America/Belem	-3:13:56 -	LMT	1914
+			-3:00	Brazil	BR%sT	1988 Sep 12
+			-3:00	-	BRT
+#
+# Maranhao (MA), Piaui (PI), Ceara (CE), Rio Grande do Norte (RN),
+# Paraiba (PB)
+Zone America/Fortaleza	-2:34:00 -	LMT	1914
+			-3:00	Brazil	BR%sT	1990 Sep 17
+			-3:00	-	BRT	1999 Sep 30
+			-3:00	Brazil	BR%sT	2000 Oct 22
+			-3:00	-	BRT	2001 Sep 13
+			-3:00	Brazil	BR%sT	2002 Oct  1
+			-3:00	-	BRT
+#
+# Pernambuco (PE) (except Atlantic islands)
+Zone America/Recife	-2:19:36 -	LMT	1914
+			-3:00	Brazil	BR%sT	1990 Sep 17
+			-3:00	-	BRT	1999 Sep 30
+			-3:00	Brazil	BR%sT	2000 Oct 15
+			-3:00	-	BRT	2001 Sep 13
+			-3:00	Brazil	BR%sT	2002 Oct  1
+			-3:00	-	BRT
+#
+# Tocantins (TO)
+Zone America/Araguaina	-3:12:48 -	LMT	1914
+			-3:00	Brazil	BR%sT	1990 Sep 17
+			-3:00	-	BRT	1995 Sep 14
+			-3:00	Brazil	BR%sT	2003 Sep 24
+			-3:00	-	BRT
+#
+# Alagoas (AL), Sergipe (SE)
+Zone America/Maceio	-2:22:52 -	LMT	1914
+			-3:00	Brazil	BR%sT	1990 Sep 17
+			-3:00	-	BRT	1995 Oct 13
+			-3:00	Brazil	BR%sT	1996 Sep  4
+			-3:00	-	BRT	1999 Sep 30
+			-3:00	Brazil	BR%sT	2000 Oct 22
+			-3:00	-	BRT	2001 Sep 13
+			-3:00	Brazil	BR%sT	2002 Oct  1
+			-3:00	-	BRT
+#
+# Bahia (BA)
+# There are too many Salvadors elsewhere, so use America/Bahia instead
+# of America/Salvador.
+Zone America/Bahia	-2:34:04 -	LMT	1914
+			-3:00	Brazil	BR%sT	2003 Sep 24
+			-3:00	-	BRT
+#
+# Goias (GO), Distrito Federal (DF), Minas Gerais (MG),
+# Espirito Santo (ES), Rio de Janeiro (RJ), Sao Paulo (SP), Parana (PR),
+# Santa Catarina (SC), Rio Grande do Sul (RS)
+Zone America/Sao_Paulo	-3:06:28 -	LMT	1914
+			-3:00	Brazil	BR%sT	1963 Oct 23 00:00
+			-3:00	1:00	BRST	1964
+			-3:00	Brazil	BR%sT
+#
+# Mato Grosso do Sul (MS)
+Zone America/Campo_Grande -3:38:28 -	LMT	1914
+			-4:00	Brazil	AM%sT
+#
+# Mato Grosso (MT)
+Zone America/Cuiaba	-3:44:20 -	LMT	1914
+			-4:00	Brazil	AM%sT	2003 Sep 24
+			-4:00	-	AMT	2004 Oct  1
+			-4:00	Brazil	AM%sT
+#
+# west Para (PA), Rondonia (RO)
+# West Para includes Altamira, Oribidos, Prainha, Oriximina, and Santarem.
+Zone America/Porto_Velho -4:15:36 -	LMT	1914
+			-4:00	Brazil	AM%sT	1988 Sep 12
+			-4:00	-	AMT
+#
+# Roraima (RR)
+Zone America/Boa_Vista	-4:02:40 -	LMT	1914
+			-4:00	Brazil	AM%sT	1988 Sep 12
+			-4:00	-	AMT	1999 Sep 30
+			-4:00	Brazil	AM%sT	2000 Oct 15
+			-4:00	-	AMT
+#
+# east Amazonas (AM): Boca do Acre, Jutai, Manaus, Floriano Peixoto
+# The great circle line from Tabatinga to Porto Acre divides
+# east from west Amazonas.
+Zone America/Manaus	-4:00:04 -	LMT	1914
+			-4:00	Brazil	AM%sT	1988 Sep 12
+			-4:00	-	AMT	1993 Sep 28
+			-4:00	Brazil	AM%sT	1994 Sep 22
+			-4:00	-	AMT
+#
+# west Amazonas (AM): Atalaia do Norte, Boca do Maoco, Benjamin Constant,
+#	Eirunepe, Envira, Ipixuna
+Zone America/Eirunepe	-4:39:28 -	LMT	1914
+			-5:00	Brazil	AC%sT	1988 Sep 12
+			-5:00	-	ACT	1993 Sep 28
+			-5:00	Brazil	AC%sT	1994 Sep 22
+			-5:00	-	ACT
+#
+# Acre (AC)
+Zone America/Rio_Branco	-4:31:12 -	LMT	1914
+			-5:00	Brazil	AC%sT	1988 Sep 12
+			-5:00	-	ACT
+
+
+# Chile
+
+# From Eduardo Krell (1995-10-19):
+# The law says to switch to DST at midnight [24:00] on the second SATURDAY
+# of October....  The law is the same for March and October.
+# (1998-09-29):
+# Because of the drought this year, the government decided to go into
+# DST earlier (saturday 9/26 at 24:00). This is a one-time change only ...
+# (unless there's another dry season next year, I guess).
+
+# From Julio I. Pacheco Troncoso (1999-03-18):
+# Because of the same drought, the government decided to end DST later,
+# on April 3, (one-time change).
+
+# From Gwillim Law (2001-05-04):
+# I came across another article in "La Tercera" about Chilean DST.
+# <http://www.tercera.cl/diario/2000/10/13/t-extras.html>
+# It clearly confirms my earlier suggestion, that DST begins at 22:00
+# on Easter Island....  But it also seems to be saying that the
+# observance of DST in Chile began in 1966, rather than 1969 as
+# ... [Shanks] has it....
+#
+# My translation:
+#
+# "The Chilean Army has announced that summer time will begin tomorrow,
+# Saturday, October 14 in continental Chile, insular Chile, and
+# Antarctica, as provided by Supreme Decree 25 of January 11, 1966.
+# By the preceding, official time in continental Chile and Chilean
+# Antarctic, and official time in Western Insular Chile, which applies
+# to Easter Island and Sala y Gomez Island, will be set forward at
+# midnight and at 22:00, respectively, by 20 minutes."
+
+# From Paul Eggert (2001-05-04):
+# Go with this article in preference to Shanks's 1969 date for modern DST.
+# Assume this rule has been used since DST was introduced in the islands.
+
+# From Paul Eggert (2002-10-24):
+# <http://www.shoa.cl/shoa/faqhoraoficial.htm> gives many details that
+# disagree with the following table, but we haven't had time to compare them.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Chile	1918	only	-	Sep	 1	0:00	1:00	S
+Rule	Chile	1919	only	-	Jul	 2	0:00	0	-
+Rule	Chile	1927	1931	-	Sep	 1	0:00	1:00	S
+Rule	Chile	1928	1932	-	Apr	 1	0:00	0	-
+Rule	Chile	1966	1997	-	Oct	Sun>=9	4:00u	1:00	S
+Rule	Chile	1967	1998	-	Mar	Sun>=9	3:00u	0	-
+Rule	Chile	1998	only	-	Sep	27	4:00u	1:00	S
+Rule	Chile	1999	only	-	Apr	 4	3:00u	0	-
+Rule	Chile	1999	max	-	Oct	Sun>=9	4:00u	1:00	S
+Rule	Chile	2000	max	-	Mar	Sun>=9	3:00u	0	-
+# IATA SSIM anomalies: (1990-09) says 1990-09-16; (1992-02) says 1992-03-14;
+# (1996-09) says 1998-03-08.  Ignore these.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Santiago	-4:42:40 -	LMT	1890
+			-4:42:40 -	SMT	1910	    # Santiago Mean Time
+			-5:00	Chile	CL%sT	1932 Sep    # Chile Time
+			-4:00	Chile	CL%sT
+Zone Pacific/Easter	-7:17:28 -	LMT	1890	    # Mataveri
+			-7:17:28 -	MMT	1932 Sep    # Mataveri Mean Time
+			-7:00	Chile	EAS%sT	1982 Mar 14 # Easter I Time
+			-6:00	Chile	EAS%sT
+#
+# Sala y Gomez Island is like Pacific/Easter.
+# Other Chilean locations, including Juan Fernandez Is, San Ambrosio,
+# San Felix, and Antarctic bases, are like America/Santiago.
+
+# Colombia
+# Shanks specifies 24:00 for 1992 transition times; go with IATA,
+# as it seems implausible to change clocks at midnight New Year's Eve.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	CO	1992	only	-	May	 2	0:00	1:00	S
+Rule	CO	1992	only	-	Dec	31	0:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Bogota	-4:56:20 -	LMT	1884 Mar 13
+			-4:56:20 -	BMT	1914 Nov 23 # Bogota Mean Time
+			-5:00	CO	CO%sT	# Colombia Time
+# Malpelo, Providencia, San Andres
+# no information; probably like America/Bogota
+
+# Curacao
+# Shanks says that Bottom and Oranjestad have been at -4:00 since
+# standard time was introduced on 1912-03-02; and that Kralendijk and Rincon
+# used Kralendijk Mean Time (-4:33:08) from 1912-02-02 to 1965-01-01.
+# This all predates our 1970 cutoff, though.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Curacao	-4:35:44 -	LMT	1912 Feb 12	# Willemstad
+			-4:30	-	ANT	1965 # Netherlands Antilles Time
+			-4:00	-	AST
+
+# Ecuador
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Guayaquil	-5:19:20 -	LMT	1890
+			-5:14:00 -	QMT	1931 # Quito Mean Time
+			-5:00	-	ECT	     # Ecuador Time
+Zone Pacific/Galapagos	-5:58:24 -	LMT	1931 # Puerto Baquerizo Moreno
+			-5:00	-	ECT	1986
+			-6:00	-	GALT	     # Galapagos Time
+
+# Falklands
+
+# From Paul Eggert (2001-03-05):
+# Between 1990 and 2000 inclusive, Shanks and the IATA agree except
+# the IATA gives 1996-09-08.  Go with Shanks.
+
+# From Falkland Islands Government Office, London (2001-01-22)
+# via Jesper Norgaard:
+# ... the clocks revert back to Local Mean Time at 2 am on Sunday 15
+# April 2001 and advance one hour to summer time at 2 am on Sunday 2
+# September.  It is anticipated that the clocks will revert back at 2
+# am on Sunday 21 April 2002 and advance to summer time at 2 am on
+# Sunday 1 September.
+
+# From Rives McDow (2001-02-13):
+#
+# I have communicated several times with people there, and the last
+# time I had communications that was helpful was in 1998.  Here is
+# what was said then:
+#
+# "The general rule was that Stanley used daylight saving and the Camp
+# did not. However for various reasons many people in the Camp have
+# started to use daylight saving (known locally as 'Stanley Time')
+# There is no rule as to who uses daylight saving - it is a matter of
+# personal choice and so it is impossible to draw a map showing who
+# uses it and who does not. Any list would be out of date as soon as
+# it was produced. This year daylight saving ended on April 18/19th
+# and started again on September 12/13th.  I do not know what the rule
+# is, but can find out if you like.  We do not change at the same time
+# as UK or Chile."
+#
+# I did have in my notes that the rule was "Second Saturday in Sep at
+# 0:00 until third Saturday in Apr at 0:00".  I think that this does
+# not agree in some cases with Shanks; is this true?
+#
+# Also, there is no mention in the list that some areas in the
+# Falklands do not use DST.  I have found in my communications there
+# that these areas are on the western half of East Falkland and all of
+# West Falkland.  Stanley is the only place that consistently observes
+# DST.  Again, as in other places in the world, the farmers don't like
+# it.  West Falkland is almost entirely sheep farmers.
+#
+# I know one lady there that keeps a list of which farm keeps DST and
+# which doesn't each year.  She runs a shop in Stanley, and says that
+# the list changes each year.  She uses it to communicate to her
+# customers, catching them when they are home for lunch or dinner.
+
+# From Paul Eggert (2001-03-05):
+# For now, we'll just record the time in Stanley, since we have no
+# better info.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Falk	1937	1938	-	Sep	lastSun	0:00	1:00	S
+Rule	Falk	1938	1942	-	Mar	Sun>=19	0:00	0	-
+Rule	Falk	1939	only	-	Oct	1	0:00	1:00	S
+Rule	Falk	1940	1942	-	Sep	lastSun	0:00	1:00	S
+Rule	Falk	1943	only	-	Jan	1	0:00	0	-
+Rule	Falk	1983	only	-	Sep	lastSun	0:00	1:00	S
+Rule	Falk	1984	1985	-	Apr	lastSun	0:00	0	-
+Rule	Falk	1984	only	-	Sep	16	0:00	1:00	S
+Rule	Falk	1985	2000	-	Sep	Sun>=9	0:00	1:00	S
+Rule	Falk	1986	2000	-	Apr	Sun>=16	0:00	0	-
+Rule	Falk	2001	max	-	Apr	Sun>=15	2:00	0	-
+Rule	Falk	2001	max	-	Sep	Sun>=1	2:00	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Atlantic/Stanley	-3:51:24 -	LMT	1890
+			-3:51:24 -	SMT	1912 Mar 12  # Stanley Mean Time
+			-4:00	Falk	FK%sT	1983 May     # Falkland Is Time
+			-3:00	Falk	FK%sT	1985 Sep 15
+			-4:00	Falk	FK%sT
+
+# French Guiana
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Cayenne	-3:29:20 -	LMT	1911 Jul
+			-4:00	-	GFT	1967 Oct # French Guiana Time
+			-3:00	-	GFT
+
+# Guyana
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Guyana	-3:52:40 -	LMT	1915 Mar	# Georgetown
+			-3:45	-	GBGT	1966 May 26 # Br Guiana Time
+			-3:45	-	GYT	1975 Jul 31 # Guyana Time
+			-3:00	-	GYT	1991
+# IATA SSIM (1996-06) says -4:00.  Assume a 1991 switch.
+			-4:00	-	GYT
+
+# Paraguay
+# From Paul Eggert (1999-10-29):
+# Shanks (1999) says that spring transitions are from 01:00 -> 02:00,
+# and autumn transitions are from 00:00 -> 23:00.  Go with earlier
+# editions of Shanks, and with the IATA, who say transitions occur at 00:00.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Para	1975	1988	-	Oct	 1	0:00	1:00	S
+Rule	Para	1975	1978	-	Mar	 1	0:00	0	-
+Rule	Para	1979	1991	-	Apr	 1	0:00	0	-
+Rule	Para	1989	only	-	Oct	22	0:00	1:00	S
+Rule	Para	1990	only	-	Oct	 1	0:00	1:00	S
+Rule	Para	1991	only	-	Oct	 6	0:00	1:00	S
+Rule	Para	1992	only	-	Mar	 1	0:00	0	-
+Rule	Para	1992	only	-	Oct	 5	0:00	1:00	S
+Rule	Para	1993	only	-	Mar	31	0:00	0	-
+Rule	Para	1993	1995	-	Oct	 1	0:00	1:00	S
+Rule	Para	1994	1995	-	Feb	lastSun	0:00	0	-
+Rule	Para	1996	only	-	Mar	 1	0:00	0	-
+# IATA SSIM (2000-02) says 1999-10-10; ignore this for now.
+# From Steffen Thorsen (2000-10-02):
+# I have three independent reports that Paraguay changed to DST this Sunday
+# (10-01).
+#
+# Translated by Gwillim Law (2001-02-27) from
+# <a href="http://www.diarionoticias.com.py/011000/nacional/naciona1.htm">
+# Noticias, a daily paper in Asuncion, Paraguay (2000-10-01)
+# </a>:
+# Starting at 0:00 today, the clock will be set forward 60 minutes, in
+# fulfillment of Decree No. 7,273 of the Executive Power....  The time change
+# system has been operating for several years.  Formerly there was a separate
+# decree each year; the new law has the same effect, but permanently.  Every
+# year, the time will change on the first Sunday of October; likewise, the
+# clock will be set back on the first Sunday of March.
+#
+# From Jesper Norgaard (2001-03-06) [an official URL saying similar things]:
+# http://gateway.abc.com.py:8000/pub/pag04.mbr/artic?FHA=2001-03-03-02.24.52.900592
+#
+Rule	Para	1996	2001	-	Oct	Sun>=1	0:00	1:00	S
+# IATA SSIM (1997-09) says Mar 1; go with Shanks.
+Rule	Para	1997	only	-	Feb	lastSun	0:00	0	-
+# Shanks says 1999-02-28; IATA SSIM (1999-02) says 1999-02-27, but
+# (1999-09) reports no date; go with above sources and Gerd Knops (2001-02-27).
+Rule	Para	1998	2001	-	Mar	Sun>=1	0:00	0	-
+# From Rives McDow (2002-02-28):
+# A decree was issued in Paraguay (no. 16350) on 2002-02-26 that changed the
+# dst method to be from the first Sunday in September to the first Sunday in
+# April.
+Rule	Para	2002	2004	-	Apr	Sun>=1	0:00	0	-
+Rule	Para	2002	2003	-	Sep	Sun>=1	0:00	1:00	S
+#
+# From Jesper Norgaard Welen (2005-01-02):
+# There are several sources that claim that Paraguay made
+# a timezone rule change in autumn 2004.
+# From Steffen Thorsen (2005-01-05):
+# Decree 1,867 (2004-03-05) <http://www.labor.com.py/noticias.asp?id=27>
+Rule	Para	2004	max	-	Oct	Sun>=15	0:00	1:00	S
+Rule	Para	2005	max	-	Mar	Sun>=8	0:00	0	-
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Asuncion	-3:50:40 -	LMT	1890
+			-3:50:40 -	AMT	1931 Oct 10 # Asuncion Mean Time
+			-4:00	-	PYT	1972 Oct # Paraguay Time
+			-3:00	-	PYT	1974 Apr
+			-4:00	Para	PY%sT
+
+# Peru
+#
+# <a href="news:xrGmb.39935$gA1.13896113@news4.srv.hcvlny.cv.net">
+# From Evelyn C. Leeper via Mark Brader (2003-10-26):</a>
+# When we were in Peru in 1985-1986, they apparently switched over
+# sometime between December 29 and January 3 while we were on the Amazon.
+#
+# From Paul Eggert (2003-11-02):
+# Shanks doesn't have this transition.  Assume 1986 was like 1987.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Peru	1938	only	-	Jan	 1	0:00	1:00	S
+Rule	Peru	1938	only	-	Apr	 1	0:00	0	-
+Rule	Peru	1938	1939	-	Sep	lastSun	0:00	1:00	S
+Rule	Peru	1939	1940	-	Mar	Sun>=24	0:00	0	-
+Rule	Peru	1986	1987	-	Jan	 1	0:00	1:00	S
+Rule	Peru	1986	1987	-	Apr	 1	0:00	0	-
+Rule	Peru	1990	only	-	Jan	 1	0:00	1:00	S
+Rule	Peru	1990	only	-	Apr	 1	0:00	0	-
+# IATA is ambiguous for 1993/1995; go with Shanks.
+Rule	Peru	1994	only	-	Jan	 1	0:00	1:00	S
+Rule	Peru	1994	only	-	Apr	 1	0:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Lima	-5:08:12 -	LMT	1890
+			-5:08:36 -	LMT	1908 Jul 28 # Lima Mean Time?
+			-5:00	Peru	PE%sT	# Peru Time
+
+# South Georgia
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Atlantic/South_Georgia -2:26:08 -	LMT	1890		# Grytviken
+			-2:00	-	GST	# South Georgia Time
+
+# South Sandwich Is
+# uninhabited; scientific personnel have wintered
+
+# Suriname
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Paramaribo	-3:40:40 -	LMT	1911
+			-3:40:52 -	PMT	1935     # Paramaribo Mean Time
+			-3:40:36 -	PMT	1945 Oct # The capital moved?
+			-3:30	-	NEGT	1975 Nov 20 # Dutch Guiana Time
+			-3:30	-	SRT	1984 Oct # Suriname Time
+			-3:00	-	SRT
+
+# Trinidad and Tobago
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Port_of_Spain -4:06:04 -	LMT	1912 Mar 2
+			-4:00	-	AST
+
+# Uruguay
+# From Paul Eggert (1993-11-18):
+# Uruguay wins the prize for the strangest peacetime manipulation of the rules.
+# From Shanks:
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+# Whitman gives 1923 Oct 1; go with Shanks.
+Rule	Uruguay	1923	only	-	Oct	 2	 0:00	0:30	HS
+Rule	Uruguay	1924	1926	-	Apr	 1	 0:00	0	-
+Rule	Uruguay	1924	1925	-	Oct	 1	 0:00	0:30	HS
+Rule	Uruguay	1933	1935	-	Oct	lastSun	 0:00	0:30	HS
+# Shanks gives 1935 Apr 1 0:00 and 1936 Mar 30 0:00; go with Whitman.
+Rule	Uruguay	1934	1936	-	Mar	Sat>=25	23:30s	0	-
+Rule	Uruguay	1936	only	-	Nov	 1	 0:00	0:30	HS
+Rule	Uruguay	1937	1941	-	Mar	lastSun	 0:00	0	-
+# Whitman gives 1937 Oct 3; go with Shanks.
+Rule	Uruguay	1937	1940	-	Oct	lastSun	 0:00	0:30	HS
+# Whitman gives 1941 Oct 24 - 1942 Mar 27, 1942 Dec 14 - 1943 Apr 13,
+# and 1943 Apr 13 ``to present time''; go with Shanks.
+Rule	Uruguay	1941	only	-	Aug	 1	 0:00	0	-
+Rule	Uruguay	1942	only	-	Jan	 1	 0:00	0:30	HS
+Rule	Uruguay	1942	only	-	Dec	14	 0:00	1:00	S
+Rule	Uruguay	1943	only	-	Mar	14	 0:00	0	-
+Rule	Uruguay	1959	only	-	May	24	 0:00	1:00	S
+Rule	Uruguay	1959	only	-	Nov	15	 0:00	0	-
+Rule	Uruguay	1960	only	-	Jan	17	 0:00	1:00	S
+Rule	Uruguay	1960	only	-	Mar	 6	 0:00	0	-
+Rule	Uruguay	1965	1967	-	Apr	Sun>=1	 0:00	1:00	S
+Rule	Uruguay	1965	only	-	Sep	26	 0:00	0	-
+Rule	Uruguay	1966	1967	-	Oct	31	 0:00	0	-
+Rule	Uruguay	1968	1970	-	May	27	 0:00	0:30	HS
+Rule	Uruguay	1968	1970	-	Dec	 2	 0:00	0	-
+Rule	Uruguay	1972	only	-	Apr	24	 0:00	1:00	S
+Rule	Uruguay	1972	only	-	Aug	15	 0:00	0	-
+Rule	Uruguay	1974	only	-	Mar	10	 0:00	0:30	HS
+Rule	Uruguay	1974	only	-	Dec	22	 0:00	1:00	S
+Rule	Uruguay	1976	only	-	Oct	 1	 0:00	0	-
+Rule	Uruguay	1977	only	-	Dec	 4	 0:00	1:00	S
+Rule	Uruguay	1978	only	-	Apr	 1	 0:00	0	-
+Rule	Uruguay	1979	only	-	Oct	 1	 0:00	1:00	S
+Rule	Uruguay	1980	only	-	May	 1	 0:00	0	-
+Rule	Uruguay	1987	only	-	Dec	14	 0:00	1:00	S
+Rule	Uruguay	1988	only	-	Mar	14	 0:00	0	-
+Rule	Uruguay	1988	only	-	Dec	11	 0:00	1:00	S
+Rule	Uruguay	1989	only	-	Mar	12	 0:00	0	-
+Rule	Uruguay	1989	only	-	Oct	29	 0:00	1:00	S
+# Shanks says no DST was observed in 1990/1 and 1991/2,
+# and that 1992/3's DST was from 10-25 to 03-01.  Go with IATA.
+Rule	Uruguay	1990	1992	-	Mar	Sun>=1	 0:00	0	-
+Rule	Uruguay	1990	1991	-	Oct	Sun>=21	 0:00	1:00	S
+Rule	Uruguay	1992	only	-	Oct	18	 0:00	1:00	S
+Rule	Uruguay	1993	only	-	Feb	28	 0:00	0	-
+# From Eduardo Cota (2004-09-20):
+# The uruguayan government has decreed a change in the local time....
+# http://www.presidencia.gub.uy/decretos/2004091502.htm
+Rule	Uruguay	2004	only	-	Sep	19	 0:00	1:00	S
+# From Steffen Thorsen (2005-03-11):
+# Uruguay's DST was scheduled to end on Sunday, 2005-03-13, but in order to
+# save energy ... it was postponed two weeks....
+# http://www.presidencia.gub.uy/_Web/noticias/2005/03/2005031005.htm
+Rule	Uruguay	2005	only	-	Mar	27	 2:00	0	-
+# From Eduardo Cota (2005-09-27):
+# http://www.presidencia.gub.uy/_Web/decretos/2005/09/CM%20119_09%2009%202005_00001.PDF
+# This means that from 2005-10-09 at 02:00 local time, until 2006-03-12 at
+# 02:00 local time, official time in Uruguay will be at GMT -2.
+Rule	Uruguay	2005	only	-	Oct	 9	 2:00	1:00	S
+Rule	Uruguay	2006	only	-	Mar	12	 2:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Montevideo	-3:44:44 -	LMT	1898 Jun 28
+			-3:44:44 -	MMT	1920 May  1	# Montevideo MT
+			-3:30	Uruguay	UY%sT	1942 Dec 14	# Uruguay Time
+			-3:00	Uruguay	UY%sT
+
+# Venezuela
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Caracas	-4:27:44 -	LMT	1890
+			-4:27:40 -	CMT	1912 Feb 12 # Caracas Mean Time?
+			-4:30	-	VET	1965	     # Venezuela Time
+			-4:00	-	VET

From 4b92c37973e8aef0235d26a7dd3edbc5bd3dbd4b Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 28 Dec 2005 23:30:27 +0000
Subject: [PATCH 013/115] Ignore

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1002 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/hibernate/.cvsignore | 1 +
 1 file changed, 1 insertion(+)

diff --git a/JodaTimeContrib/hibernate/.cvsignore b/JodaTimeContrib/hibernate/.cvsignore
index d567ba01e..7b7985281 100644
--- a/JodaTimeContrib/hibernate/.cvsignore
+++ b/JodaTimeContrib/hibernate/.cvsignore
@@ -1,2 +1,3 @@
 bin
 target
+*.ser

From 09bad3e96e3c5903ece7c28c8496bab254fd6c15 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 28 Dec 2005 23:35:01 +0000
Subject: [PATCH 014/115] Release 0.9

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1003 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/jsptags/RELEASE-NOTES.txt     |  4 ++--
 JodaTimeContrib/jsptags/build.xml             | 14 +++++------
 JodaTimeContrib/jsptags/project.properties    | 13 ++++++++++
 JodaTimeContrib/jsptags/project.xml           | 10 +++++---
 .../jsptags/src/conf/manifest-additions.txt   |  2 +-
 JodaTimeContrib/jsptags/xdocs/changes.xml     | 24 +++++++++++++++++++
 JodaTimeContrib/jsptags/xdocs/index.xml       |  8 +++----
 .../jsptags/xdocs/licensecover.xml            |  5 ++--
 JodaTimeContrib/jsptags/xdocs/navigation.xml  |  1 +
 9 files changed, 62 insertions(+), 19 deletions(-)
 create mode 100644 JodaTimeContrib/jsptags/xdocs/changes.xml

diff --git a/JodaTimeContrib/jsptags/RELEASE-NOTES.txt b/JodaTimeContrib/jsptags/RELEASE-NOTES.txt
index 6ef7e02b6..2fc54f31f 100644
--- a/JodaTimeContrib/jsptags/RELEASE-NOTES.txt
+++ b/JodaTimeContrib/jsptags/RELEASE-NOTES.txt
@@ -1,10 +1,10 @@
-Joda-Time JSP tags contributed project version 1.0
+Joda-Time JSP tags contributed project version 0.9
 --------------------------------------------------
 
 Joda-Time is a date and time handling library that seeks to replace the JDK
 Date and Calendar classes.
 
-This is the 1.0 release of the JSP tag library support classes.
+This is the 0.9 release of the JSP tag library support classes.
 These classes were converted from code at Jakarta Taglibs by Jim Newsham.
 Please check the NOTICE.txt for the Apache credit.
 
diff --git a/JodaTimeContrib/jsptags/build.xml b/JodaTimeContrib/jsptags/build.xml
index a198e6281..ca25264c0 100644
--- a/JodaTimeContrib/jsptags/build.xml
+++ b/JodaTimeContrib/jsptags/build.xml
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 
-<!--build.xml generated by maven from project.xml version 0.9-dev
-  on date December 19 2005, time 2348-->
+<!--build.xml generated by maven from project.xml version 1.0
+  on date December 20 2005, time 0019-->
 
 <project default="jar" name="joda-time-jsptags" basedir=".">
   <!--Load local and user build preferences-->
@@ -22,7 +22,7 @@
   </property>
   <property name="javadocdir" value="${basedir}/dist/docs/api">
   </property>
-  <property name="final.name" value="joda-time-jsptags-0.9-dev">
+  <property name="final.name" value="joda-time-jsptags-0.9">
   </property>
   <property name="proxy.host" value="">
   </property>
@@ -33,7 +33,7 @@
   <property name="proxy.password" value="">
   </property>
   <path id="build.classpath">
-    <pathelement location="${libdir}/joda-time/jars/joda-time-1.1.jar">
+    <pathelement location="${libdir}/joda-time/jars/joda-time-1.2.jar">
     </pathelement>
     <pathelement location="${libdir}/servletapi/jars/servlet-api-2.4.jar">
     </pathelement>
@@ -136,7 +136,7 @@
     </tstamp>
     <property name="copyright" value="Copyright &amp;copy;  Joda.org. All Rights Reserved.">
     </property>
-    <property name="title" value="Joda time JSP tags support 0.9-dev API">
+    <property name="title" value="Joda time JSP tags support 0.9 API">
     </property>
     <javadoc use="true" private="true" destdir="${javadocdir}" author="true" version="true" sourcepath="${basedir}/src/java" packagenames="org.joda.time.contrib.jsptag.*">
       <classpath>
@@ -148,13 +148,13 @@
   <target name="get-dep-joda-time.jar" description="o Download the dependency : joda-time.jar" unless="joda-time.jar" depends="init,setProxy,noProxy,get-custom-dep-joda-time.jar">
     <mkdir dir="${libdir}/joda-time/jars/">
     </mkdir>
-    <get dest="${libdir}/joda-time/jars/joda-time-1.1.jar" usetimestamp="true" ignoreerrors="true" src="http://www.ibiblio.org/maven/joda-time/jars/joda-time-1.1.jar">
+    <get dest="${libdir}/joda-time/jars/joda-time-1.2.jar" usetimestamp="true" ignoreerrors="true" src="http://www.ibiblio.org/maven/joda-time/jars/joda-time-1.2.jar">
     </get>
   </target>
   <target name="get-custom-dep-joda-time.jar" if="joda-time.jar" depends="init,setProxy,noProxy">
     <mkdir dir="${libdir}/joda-time/jars/">
     </mkdir>
-    <get dest="${libdir}/joda-time/jars/joda-time-1.1.jar" usetimestamp="true" ignoreerrors="true" src="${joda-time.jar}">
+    <get dest="${libdir}/joda-time/jars/joda-time-1.2.jar" usetimestamp="true" ignoreerrors="true" src="${joda-time.jar}">
     </get>
   </target>
   <target name="get-dep-servlet-api.jar" description="o Download the dependency : servlet-api.jar" unless="servlet-api.jar" depends="init,setProxy,noProxy,get-custom-dep-servlet-api.jar">
diff --git a/JodaTimeContrib/jsptags/project.properties b/JodaTimeContrib/jsptags/project.properties
index 095e4504c..bcb1769e3 100644
--- a/JodaTimeContrib/jsptags/project.properties
+++ b/JodaTimeContrib/jsptags/project.properties
@@ -4,6 +4,10 @@ maven.xdoc.date.format = yyyy-MM-dd
 # maven.xdoc.version = ${pom.currentVersion}
 maven.xdoc.legend = false;
 maven.xdoc.theme.url = ./style/joda-theme.css
+maven.xdoc.locale.default=en
+
+maven.compile.target=1.3
+maven.compile.source=1.3
 
 maven.checkstyle.properties=checkstyle.xml
 maven.junit.fork=true
@@ -15,3 +19,12 @@ maven.javadoc.private=false
 
 maven.jar.manifest=src/conf/manifest-additions.txt
 maven.dist.src.assembly.dir=${maven.dist.assembly.dir}/src/${maven.final.name}-src
+
+maven.changes.issue.template=http://sourceforge.net/support/tracker.php?aid=%ISSUE%
+
+maven.sourceforge.project.name=joda-time
+maven.sourceforge.project.groupId=97367
+maven.sourceforge.project.packageName=joda-time-jsptags
+maven.sourceforge.project.releaseNotes=RELEASE-NOTES.txt
+maven.sourceforge.project.sendEmailNotice=false
+maven.sourceforge.project.submitNewsItem=false
diff --git a/JodaTimeContrib/jsptags/project.xml b/JodaTimeContrib/jsptags/project.xml
index 961417717..321405611 100644
--- a/JodaTimeContrib/jsptags/project.xml
+++ b/JodaTimeContrib/jsptags/project.xml
@@ -1,10 +1,10 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project>
   <pomVersion>3</pomVersion>
-  <id>joda-time-jsptags</id>
   <groupId>joda-time</groupId>
+  <artifactId>joda-time-jsptags</artifactId>
   <name>Joda time JSP tags support</name>
-  <currentVersion>0.9-dev</currentVersion>
+  <currentVersion>0.9</currentVersion>
   <shortDescription>Joda-Time JSP tags support</shortDescription>
   <description>
     Contribution to Joda-Time that adds JSP tags support
@@ -43,6 +43,7 @@
       <roles>
         <role>Website and Release manager</role>
       </roles>
+      <timezone>0</timezone>
     </developer>
   </developers>
 
@@ -103,7 +104,10 @@
     <dependency>
       <groupId>joda-time</groupId>
       <artifactId>joda-time</artifactId>
-      <version>1.1</version>
+      <version>1.2</version>
+      <properties>
+        <comment>Compatible with v1.0 or later</comment>
+      </properties>
     </dependency>
 
     <dependency>
diff --git a/JodaTimeContrib/jsptags/src/conf/manifest-additions.txt b/JodaTimeContrib/jsptags/src/conf/manifest-additions.txt
index 43ee15558..5cca26f0b 100644
--- a/JodaTimeContrib/jsptags/src/conf/manifest-additions.txt
+++ b/JodaTimeContrib/jsptags/src/conf/manifest-additions.txt
@@ -1,2 +1,2 @@
-Specification-Version: 1.0
+Specification-Version: 0.9
 Implementation-Vendor-Id: org.joda
\ No newline at end of file
diff --git a/JodaTimeContrib/jsptags/xdocs/changes.xml b/JodaTimeContrib/jsptags/xdocs/changes.xml
new file mode 100644
index 000000000..ce23bb420
--- /dev/null
+++ b/JodaTimeContrib/jsptags/xdocs/changes.xml
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+
+<document>
+  <properties>
+    <title>Java date and time API - JSP tags - Changes</title>
+    <author email="scolebourne@users.sourceforge.net">Stephen Colebourne</author>
+  </properties>
+  <body>
+
+    <!-- types are add, fix, remove, update -->
+    <release version="0.9" date="2005-12-24" description="Pre 1.0 version">
+      <action dev="scolebourne" type="fix" due-to="Robert Stevenson">
+        Better error message when unknown object type passed in.
+      </action>              
+    </release>
+
+    <release version="0.8" date="2005-08-21" description="Initial version">
+      <action dev="jimnewsham" type="add">
+        Initial version.
+      </action>              
+    </release>
+
+  </body>
+</document>
\ No newline at end of file
diff --git a/JodaTimeContrib/jsptags/xdocs/index.xml b/JodaTimeContrib/jsptags/xdocs/index.xml
index 3420b8910..ab3eb1597 100644
--- a/JodaTimeContrib/jsptags/xdocs/index.xml
+++ b/JodaTimeContrib/jsptags/xdocs/index.xml
@@ -28,7 +28,7 @@ As a flavour of the tags, here's how to format a Joda-Time object in JSP:
   &lt;% pageContext.setAttribute("now", new org.joda.time.DateTime()); %&gt;
   <b>&lt;joda:format value="${now}" style="SM" /&gt;</b>
 </source>
-Version 0.8 was released on 2005-08-21 -
+Version 0.9 was released on 2005-12-24 -
 <a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=161360">Download now</a>
 </p>
 </section>
@@ -50,12 +50,12 @@ Various documentation is available:
 
 <section name="Releases">
 <p>
-<a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=161360">Release 0.8</a>
+<a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=161360">Release 0.9</a>
 is the current latest release.
-This release is a beta release and may have bugs.
+This release is a beta and may have bugs.
 </p>
 <p>
-The dependencies are Joda-Time 1.1, the Servlet 2.4 API, the JSP 2.0 API,
+The dependencies are Joda-Time 1.0 or later, the Servlet 2.4 API, the JSP 2.0 API,
 and JSTL 1.1 API.
 We recommend JDK 1.4 or later, and have performed no testing on earlier JDKs.
 </p>
diff --git a/JodaTimeContrib/jsptags/xdocs/licensecover.xml b/JodaTimeContrib/jsptags/xdocs/licensecover.xml
index f697b44c7..a4db51c09 100644
--- a/JodaTimeContrib/jsptags/xdocs/licensecover.xml
+++ b/JodaTimeContrib/jsptags/xdocs/licensecover.xml
@@ -27,9 +27,10 @@ as well as the Joda-Time information clause as follows:
 = NOTICE file corresponding to section 4d of the Apache License Version 2.0 =
 =============================================================================
 This product includes software developed by
-The Apache Software Foundation (http://www.apache.org/).
-This product includes software developed by
 Joda.org (http://www.joda.org/).
+
+This product includes software developed by
+The Apache Software Foundation (http://www.apache.org/).
 </source>
 </p>
 </section>
diff --git a/JodaTimeContrib/jsptags/xdocs/navigation.xml b/JodaTimeContrib/jsptags/xdocs/navigation.xml
index 3bd4f2313..b0ad64ad1 100644
--- a/JodaTimeContrib/jsptags/xdocs/navigation.xml
+++ b/JodaTimeContrib/jsptags/xdocs/navigation.xml
@@ -16,6 +16,7 @@
       <item name="User guide" href="userguide.html"/>
       <item name="Javadoc (Release)" href="/api-release/index.html"/>
       <item name="License" href="licensecover.html"/>
+      <item name="Release notes" href="changes-report.html"/>
       <item name="Download" href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=161360"/>
     </menu>
     <menu name="Development">

From e0428fee1a45bcadaf4889b86d6a8f3095d6e432 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 28 Dec 2005 23:40:35 +0000
Subject: [PATCH 015/115] Post release 0.9

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1005 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/jsptags/RELEASE-NOTES.txt               | 6 +++---
 JodaTimeContrib/jsptags/build.xml                       | 4 ++--
 JodaTimeContrib/jsptags/project.xml                     | 2 +-
 JodaTimeContrib/jsptags/src/conf/manifest-additions.txt | 2 +-
 4 files changed, 7 insertions(+), 7 deletions(-)

diff --git a/JodaTimeContrib/jsptags/RELEASE-NOTES.txt b/JodaTimeContrib/jsptags/RELEASE-NOTES.txt
index 2fc54f31f..de8aa984b 100644
--- a/JodaTimeContrib/jsptags/RELEASE-NOTES.txt
+++ b/JodaTimeContrib/jsptags/RELEASE-NOTES.txt
@@ -1,10 +1,10 @@
-Joda-Time JSP tags contributed project version 0.9
+Joda-Time JSP tags contributed project version 1.0
 --------------------------------------------------
 
 Joda-Time is a date and time handling library that seeks to replace the JDK
 Date and Calendar classes.
 
-This is the 0.9 release of the JSP tag library support classes.
+This is the 1.0 release of the JSP tag library support classes.
 These classes were converted from code at Jakarta Taglibs by Jim Newsham.
 Please check the NOTICE.txt for the Apache credit.
 
@@ -21,7 +21,7 @@ Unlike the fmt tags which work with java.util.Date and java.util.TimeZone object
 the Joda tags work with Joda DateTime, ReadableInstant, ReadablePartial,
 and DateTimeZone objects.  
 
-Changes since 0.8
+Changes since 0.9
 -----------------
 Better error message in FormatSupport when object specified is of an incorrect type
 
diff --git a/JodaTimeContrib/jsptags/build.xml b/JodaTimeContrib/jsptags/build.xml
index ca25264c0..99c2704b9 100644
--- a/JodaTimeContrib/jsptags/build.xml
+++ b/JodaTimeContrib/jsptags/build.xml
@@ -22,7 +22,7 @@
   </property>
   <property name="javadocdir" value="${basedir}/dist/docs/api">
   </property>
-  <property name="final.name" value="joda-time-jsptags-0.9">
+  <property name="final.name" value="joda-time-jsptags-1.0-SNAPSHOT">
   </property>
   <property name="proxy.host" value="">
   </property>
@@ -136,7 +136,7 @@
     </tstamp>
     <property name="copyright" value="Copyright &amp;copy;  Joda.org. All Rights Reserved.">
     </property>
-    <property name="title" value="Joda time JSP tags support 0.9 API">
+    <property name="title" value="Joda time JSP tags support 1.0 API">
     </property>
     <javadoc use="true" private="true" destdir="${javadocdir}" author="true" version="true" sourcepath="${basedir}/src/java" packagenames="org.joda.time.contrib.jsptag.*">
       <classpath>
diff --git a/JodaTimeContrib/jsptags/project.xml b/JodaTimeContrib/jsptags/project.xml
index 321405611..f26ac2d27 100644
--- a/JodaTimeContrib/jsptags/project.xml
+++ b/JodaTimeContrib/jsptags/project.xml
@@ -4,7 +4,7 @@
   <groupId>joda-time</groupId>
   <artifactId>joda-time-jsptags</artifactId>
   <name>Joda time JSP tags support</name>
-  <currentVersion>0.9</currentVersion>
+  <currentVersion>1.0-SNAPSHOT</currentVersion>
   <shortDescription>Joda-Time JSP tags support</shortDescription>
   <description>
     Contribution to Joda-Time that adds JSP tags support
diff --git a/JodaTimeContrib/jsptags/src/conf/manifest-additions.txt b/JodaTimeContrib/jsptags/src/conf/manifest-additions.txt
index 5cca26f0b..43ee15558 100644
--- a/JodaTimeContrib/jsptags/src/conf/manifest-additions.txt
+++ b/JodaTimeContrib/jsptags/src/conf/manifest-additions.txt
@@ -1,2 +1,2 @@
-Specification-Version: 0.9
+Specification-Version: 1.0
 Implementation-Vendor-Id: org.joda
\ No newline at end of file

From 288308e07aeacf39751a8a327eee0e25f3fd961c Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Thu, 29 Dec 2005 00:05:56 +0000
Subject: [PATCH 016/115] Sort project xml

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1006 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/jsptags/project.xml | 114 ++++++++++++++--------------
 1 file changed, 58 insertions(+), 56 deletions(-)

diff --git a/JodaTimeContrib/jsptags/project.xml b/JodaTimeContrib/jsptags/project.xml
index f26ac2d27..c7f1f35e1 100644
--- a/JodaTimeContrib/jsptags/project.xml
+++ b/JodaTimeContrib/jsptags/project.xml
@@ -14,10 +14,19 @@
   <logo>/images/jodatime.png</logo>
   <issueTrackingUrl>http://sourceforge.net/tracker/?atid=617889&amp;group_id=97367&amp;func=browse</issueTrackingUrl>
   <inceptionYear>2005</inceptionYear>
+  <package>org.joda.time.contrib.jsptag</package>
 
   <siteAddress>shell.sourceforge.net</siteAddress>
   <siteDirectory>/home/groups/j/jo/joda-time/htdocs/contrib/jsptags</siteDirectory>
 
+  <licenses>
+    <license>
+      <name>Apache 2</name>
+      <url>http://www.apache.org/licenses/</url>
+      <distribution>repo</distribution>
+    </license>
+  </licenses>
+
   <mailingLists>
     <mailingList>
       <name>Joda Interest list</name>
@@ -27,6 +36,30 @@
     </mailingList>
   </mailingLists>
 
+  <organization>
+    <name>Joda.org</name>
+    <url>http://www.joda.org</url>
+    <logo>/images/joda.png</logo>
+  </organization>
+
+  <repository>
+    <connection>scm:cvs:pserver:anonymous@cvs.sourceforge.net:/cvsroot/joda-time:JodaTimeContrib/jsptags</connection>
+    <url>http://cvs.sourceforge.net/viewcvs.py/joda-time/JodaTimeContrib/jsptags/</url>
+  </repository>
+
+  <versions>
+    <version>
+      <id>0.8</id>
+      <name>0.8</name>
+      <tag>v0_8_000</tag>
+    </version>
+    <version>
+      <id>0.9</id>
+      <name>0.9</name>
+      <tag>v0_9_000</tag>
+    </version>
+  </versions>
+
   <developers>
     <developer>
       <name>Jim Newsham</name>
@@ -47,59 +80,6 @@
     </developer>
   </developers>
 
-  <licenses>
-    <license>
-      <name>Apache 2</name>
-      <url>http://www.apache.org/licenses/</url>
-      <distribution>repo</distribution>
-    </license>
-  </licenses>
-
-  <versions>
-    <version>
-      <id>0.8</id>
-      <name>0.8</name>
-      <tag>v0_8_000</tag>
-    </version>
-  </versions>
-
-  <repository>
-    <connection>scm:cvs:pserver:anonymous@cvs.sourceforge.net:/cvsroot/joda-time:JodaTimeContrib/jsptags</connection>
-    <url>http://cvs.sourceforge.net/viewcvs.py/joda-time/JodaTimeContrib/jsptags/</url>
-  </repository>
-
-  <organization>
-    <name>Joda.org</name>
-    <url>http://www.joda.org</url>
-    <logo>/images/joda.png</logo>
-  </organization>
-  <package>org.joda.time.contrib.jsptag</package>
-
-  <build>
-    <sourceDirectory>src/java</sourceDirectory>
-    <unitTestSourceDirectory>src/test</unitTestSourceDirectory>
-    <unitTest>
-      <includes>
-        <include>org/joda/time/contrib/jsptags/**/Test*.java</include>
-      </includes>
-    </unitTest>
-    <resources>
-      <resource>
-        <targetPath>META-INF</targetPath>
-        <includes>
-          <include>NOTICE.txt</include>
-        </includes>
-      </resource>
-      <resource>
-        <targetPath>META-INF</targetPath>
-        <directory>src/conf</directory>
-        <includes>
-          <include>joda.tld</include>
-        </includes>
-      </resource>
-    </resources>
-  </build>
-
   <dependencies>
     <dependency>
       <groupId>joda-time</groupId>
@@ -109,19 +89,16 @@
         <comment>Compatible with v1.0 or later</comment>
       </properties>
     </dependency>
-
     <dependency>
       <groupId>servletapi</groupId>
       <artifactId>servlet-api</artifactId>
       <version>2.4</version>
     </dependency>
-
     <dependency>
       <groupId>jspapi</groupId>
       <artifactId>jsp-api</artifactId>
       <version>2.0</version>
     </dependency>
-
     <dependency>
       <groupId>jstl</groupId>
       <artifactId>jstl</artifactId>
@@ -129,6 +106,31 @@
     </dependency>
   </dependencies>
 
+  <build>
+    <sourceDirectory>src/java</sourceDirectory>
+    <unitTestSourceDirectory>src/test</unitTestSourceDirectory>
+    <unitTest>
+      <includes>
+        <include>org/joda/time/contrib/jsptags/**/Test*.java</include>
+      </includes>
+    </unitTest>
+    <resources>
+      <resource>
+        <targetPath>META-INF</targetPath>
+        <includes>
+          <include>NOTICE.txt</include>
+        </includes>
+      </resource>
+      <resource>
+        <targetPath>META-INF</targetPath>
+        <directory>src/conf</directory>
+        <includes>
+          <include>joda.tld</include>
+        </includes>
+      </resource>
+    </resources>
+  </build>
+
   <reports>
      <report>maven-changelog-plugin</report>
      <report>maven-changes-plugin</report>

From 4bf537663b192035c0010e0a78535ea98f96d08e Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Thu, 29 Dec 2005 00:07:30 +0000
Subject: [PATCH 017/115] Pre 0.8 release

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1007 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/hibernate/project.properties  | 23 +++++++------
 JodaTimeContrib/hibernate/project.xml         | 34 +++++++++++--------
 .../hibernate/src/conf/MANIFEST.MF            |  2 +-
 .../hibernate/src/conf/manifest-additions.txt |  2 ++
 4 files changed, 36 insertions(+), 25 deletions(-)
 create mode 100644 JodaTimeContrib/hibernate/src/conf/manifest-additions.txt

diff --git a/JodaTimeContrib/hibernate/project.properties b/JodaTimeContrib/hibernate/project.properties
index 518ee544f..d8cf201e3 100644
--- a/JodaTimeContrib/hibernate/project.properties
+++ b/JodaTimeContrib/hibernate/project.properties
@@ -4,6 +4,10 @@ maven.xdoc.date.format = yyyy-MM-dd
 # maven.xdoc.version = ${pom.currentVersion}
 maven.xdoc.legend = false;
 maven.xdoc.theme.url = ./style/joda-theme.css
+maven.xdoc.locale.default=en
+
+maven.compile.target=1.3
+maven.compile.source=1.3
 
 maven.checkstyle.properties=checkstyle.xml
 maven.junit.fork=true
@@ -13,15 +17,14 @@ maven.javadoc.public=true
 maven.javadoc.package=false
 maven.javadoc.private=false
 
-# Generate class files for specific VM version (e.g., 1.1 or 1.2). 
-# Note that the default value depends on the JVM that is running Ant. 
-# In particular, if you use JDK 1.4+ the generated classes will not be usable
-# for a 1.1 Java VM unless you explicitly set this attribute to the value 1.1 
-# (which is the default value for JDK 1.1 to 1.3).
-maven.compile.target = 1.1
+maven.jar.manifest=src/conf/manifest-additions.txt
+maven.dist.src.assembly.dir=${maven.dist.assembly.dir}/src/${maven.final.name}-src
 
-# Specifies the source version for the Java compiler.
-# Corresponds to the source attribute for the ant javac task. 
-# Valid values are 1.3, 1.4, 1.5. 
-maven.compile.source = 1.3
+maven.changes.issue.template=http://sourceforge.net/support/tracker.php?aid=%ISSUE%
 
+maven.sourceforge.project.name=joda-time
+maven.sourceforge.project.groupId=97367
+maven.sourceforge.project.packageName=joda-time-hibernate
+maven.sourceforge.project.releaseNotes=RELEASE-NOTES.txt
+maven.sourceforge.project.sendEmailNotice=false
+maven.sourceforge.project.submitNewsItem=false
diff --git a/JodaTimeContrib/hibernate/project.xml b/JodaTimeContrib/hibernate/project.xml
index cf502c725..8b4613407 100644
--- a/JodaTimeContrib/hibernate/project.xml
+++ b/JodaTimeContrib/hibernate/project.xml
@@ -1,10 +1,10 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project>
   <pomVersion>3</pomVersion>
-  <id>joda-time-hibernate</id>
   <groupId>joda-time</groupId>
-  <name>Joda time Hibernate support</name>
-  <currentVersion>0.8-dev</currentVersion>
+  <artifactId>joda-time-hibernate</artifactId>
+  <name>Joda time JSP tags support</name>
+  <currentVersion>0.8-SNAPSHOT</currentVersion>
   <shortDescription>Joda time Hibernate support</shortDescription>
   <description>
     Contribution to Joda-Time that adds Hibernate support
@@ -13,12 +13,11 @@
   <url>http://joda-time.sourceforge.net/contrib/hibernate</url>
   <logo>/images/jodatime.png</logo>
   <issueTrackingUrl>http://sourceforge.net/tracker/?atid=617889&amp;group_id=97367&amp;func=browse</issueTrackingUrl>
-  <inceptionYear>2002</inceptionYear>
+  <inceptionYear>2005</inceptionYear>
   <package>org.joda.time.contrib.hibernate</package>
 
   <siteAddress>shell.sourceforge.net</siteAddress>
   <siteDirectory>/home/groups/j/jo/joda-time/htdocs/contrib/hibernate</siteDirectory>
-  <distributionDirectory>home/groups/j/jo/joda-time/htdocs/repository</distributionDirectory>
 
   <licenses>
     <license>
@@ -28,6 +27,15 @@
     </license>
   </licenses>
 
+  <mailingLists>
+    <mailingList>
+      <name>Joda Interest list</name>
+      <subscribe>http://sourceforge.net/mail/?group_id=47291</subscribe>
+      <unsubscribe>http://sourceforge.net/mail/?group_id=47291</unsubscribe>
+      <archive>http://sourceforge.net/mailarchive/forum.php?forum_id=8530</archive>
+    </mailingList>
+  </mailingLists>
+
   <organization>
     <name>Joda.org</name>
     <url>http://www.joda.org</url>
@@ -39,14 +47,8 @@
     <url>http://cvs.sourceforge.net/viewcvs.py/joda-time/JodaTimeContrib/hibernate/</url>
   </repository>
 
-  <mailingLists>
-    <mailingList>
-      <name>Joda Interest list</name>
-      <subscribe>http://sourceforge.net/mail/?group_id=47291</subscribe>
-      <unsubscribe>http://sourceforge.net/mail/?group_id=47291</unsubscribe>
-      <archive>http://sourceforge.net/mailarchive/forum.php?forum_id=8530</archive>
-    </mailingList>
-  </mailingLists>
+  <versions>
+  </versions>
 
   <developers>
     <developer>
@@ -64,6 +66,7 @@
       <roles>
         <role>Website and Release manager</role>
       </roles>
+      <timezone>0</timezone>
     </developer>
   </developers>
 
@@ -71,7 +74,10 @@
     <dependency>
       <groupId>joda-time</groupId>
       <artifactId>joda-time</artifactId>
-      <version>1.0</version>
+      <version>1.2</version>
+      <properties>
+        <comment>Compatible with v1.0 or later</comment>
+      </properties>
     </dependency>
     <dependency>
       <groupId>hibernate</groupId>
diff --git a/JodaTimeContrib/hibernate/src/conf/MANIFEST.MF b/JodaTimeContrib/hibernate/src/conf/MANIFEST.MF
index 043b4d7ce..f0fac7324 100644
--- a/JodaTimeContrib/hibernate/src/conf/MANIFEST.MF
+++ b/JodaTimeContrib/hibernate/src/conf/MANIFEST.MF
@@ -1,7 +1,7 @@
 Extension-Name: @name@
 Specification-Title: Joda Time Hibernate support
 Specification-Vendor: Joda.org
-Specification-Version: 0.1
+Specification-Version: 1.0
 Implementation-Vendor: Joda.org
 Implementation-Title: org.joda.time.contrib.hibernate
 Implementation-Version: @version@
diff --git a/JodaTimeContrib/hibernate/src/conf/manifest-additions.txt b/JodaTimeContrib/hibernate/src/conf/manifest-additions.txt
new file mode 100644
index 000000000..f671879f6
--- /dev/null
+++ b/JodaTimeContrib/hibernate/src/conf/manifest-additions.txt
@@ -0,0 +1,2 @@
+Specification-Version: 0.8
+Implementation-Vendor-Id: org.joda
\ No newline at end of file

From 7b20d021ea84006bbbc177192c26f35f0e2f5776 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Thu, 29 Dec 2005 20:48:39 +0000
Subject: [PATCH 018/115] Pre 0.8 release

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1008 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/hibernate/build.xml           | 24 ++++++++++++-------
 JodaTimeContrib/hibernate/project.xml         |  2 +-
 JodaTimeContrib/hibernate/xdocs/changes.xml   | 18 ++++++++++++++
 JodaTimeContrib/hibernate/xdocs/index.xml     | 11 ++++-----
 .../hibernate/xdocs/navigation.xml            |  3 ++-
 5 files changed, 42 insertions(+), 16 deletions(-)
 create mode 100644 JodaTimeContrib/hibernate/xdocs/changes.xml

diff --git a/JodaTimeContrib/hibernate/build.xml b/JodaTimeContrib/hibernate/build.xml
index 29135b2dc..573ad466a 100644
--- a/JodaTimeContrib/hibernate/build.xml
+++ b/JodaTimeContrib/hibernate/build.xml
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 
-<!--build.xml generated by maven from project.xml version 1.0
-  on date July 19 2005, time 0051-->
+<!--build.xml generated by maven from project.xml version 0.8-SNAPSHOT
+  on date December 29 2005, time 2047-->
 
 <project default="jar" name="joda-time-hibernate" basedir=".">
   <!--Load local and user build preferences-->
@@ -26,7 +26,7 @@
   </property>
   <property name="javadocdir" value="${basedir}/dist/docs/api">
   </property>
-  <property name="final.name" value="joda-time-hibernate-1.0">
+  <property name="final.name" value="joda-time-hibernate-0.8-SNAPSHOT">
   </property>
   <property name="proxy.host" value="">
   </property>
@@ -37,7 +37,7 @@
   <property name="proxy.password" value="">
   </property>
   <path id="build.classpath">
-    <pathelement location="${libdir}/joda-time/jars/joda-time-1.0.jar">
+    <pathelement location="${libdir}/joda-time/jars/joda-time-1.2.jar">
     </pathelement>
     <pathelement location="${libdir}/hibernate/jars/hibernate-3.0.5.jar">
     </pathelement>
@@ -91,6 +91,14 @@
       <classpath refid="build.classpath">
       </classpath>
     </javac>
+    <mkdir dir="${classesdir}/meta-inf">
+    </mkdir>
+    <copy todir="${classesdir}/meta-inf">
+      <fileset dir="${basedir}/.">
+        <include name="NOTICE.txt">
+        </include>
+      </fileset>
+    </copy>
   </target>
   <target name="jar" description="o Create the jar" depends="compile,test">
     <jar jarfile="${defaulttargetdir}/${final.name}.jar" excludes="**/package.html" basedir="${classesdir}">
@@ -167,12 +175,12 @@
     <mkdir dir="${javadocdir}">
     </mkdir>
     <tstamp>
-      <format pattern="2002-yyyy" property="year">
+      <format pattern="2005-yyyy" property="year">
       </format>
     </tstamp>
     <property name="copyright" value="Copyright &amp;copy;  Joda.org. All Rights Reserved.">
     </property>
-    <property name="title" value="Joda time Hibernate support 1.0 API">
+    <property name="title" value="Joda time JSP tags support 0.8-SNAPSHOT API">
     </property>
     <javadoc use="true" private="true" destdir="${javadocdir}" author="true" version="true" sourcepath="${basedir}/src/java" packagenames="org.joda.time.contrib.hibernate.*">
       <classpath>
@@ -184,13 +192,13 @@
   <target name="get-dep-joda-time.jar" description="o Download the dependency : joda-time.jar" unless="joda-time.jar" depends="init,setProxy,noProxy,get-custom-dep-joda-time.jar">
     <mkdir dir="${libdir}/joda-time/jars/">
     </mkdir>
-    <get dest="${libdir}/joda-time/jars/joda-time-1.0.jar" usetimestamp="true" ignoreerrors="true" src="http://www.ibiblio.org/maven/joda-time/jars/joda-time-1.0.jar">
+    <get dest="${libdir}/joda-time/jars/joda-time-1.2.jar" usetimestamp="true" ignoreerrors="true" src="http://www.ibiblio.org/maven/joda-time/jars/joda-time-1.2.jar">
     </get>
   </target>
   <target name="get-custom-dep-joda-time.jar" if="joda-time.jar" depends="init,setProxy,noProxy">
     <mkdir dir="${libdir}/joda-time/jars/">
     </mkdir>
-    <get dest="${libdir}/joda-time/jars/joda-time-1.0.jar" usetimestamp="true" ignoreerrors="true" src="${joda-time.jar}">
+    <get dest="${libdir}/joda-time/jars/joda-time-1.2.jar" usetimestamp="true" ignoreerrors="true" src="${joda-time.jar}">
     </get>
   </target>
   <target name="get-dep-hibernate.jar" description="o Download the dependency : hibernate.jar" unless="hibernate.jar" depends="init,setProxy,noProxy,get-custom-dep-hibernate.jar">
diff --git a/JodaTimeContrib/hibernate/project.xml b/JodaTimeContrib/hibernate/project.xml
index 8b4613407..0de7b0d71 100644
--- a/JodaTimeContrib/hibernate/project.xml
+++ b/JodaTimeContrib/hibernate/project.xml
@@ -143,7 +143,7 @@
   <reports>
      <report>maven-changelog-plugin</report>
      <report>maven-changes-plugin</report>
-     <report>maven-checkstyle-plugin</report>
+     <!--report>maven-checkstyle-plugin</report-->
      <!-- <report>maven-clover-plugin</report> -->
      <report>maven-jcoverage-plugin</report>
      <report>maven-developer-activity-plugin</report>
diff --git a/JodaTimeContrib/hibernate/xdocs/changes.xml b/JodaTimeContrib/hibernate/xdocs/changes.xml
new file mode 100644
index 000000000..e6f281dfb
--- /dev/null
+++ b/JodaTimeContrib/hibernate/xdocs/changes.xml
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+
+<document>
+  <properties>
+    <title>Java date and time API - JSP tags - Changes</title>
+    <author email="scolebourne@users.sourceforge.net">Stephen Colebourne</author>
+  </properties>
+  <body>
+
+    <!-- types are add, fix, remove, update -->
+    <release version="0.8" date="2005-12-29" description="Initial version">
+      <action dev="imario" type="add">
+        Initial version.
+      </action>              
+    </release>
+
+  </body>
+</document>
\ No newline at end of file
diff --git a/JodaTimeContrib/hibernate/xdocs/index.xml b/JodaTimeContrib/hibernate/xdocs/index.xml
index 17ff9296b..774c8d3ff 100644
--- a/JodaTimeContrib/hibernate/xdocs/index.xml
+++ b/JodaTimeContrib/hibernate/xdocs/index.xml
@@ -37,8 +37,8 @@ It aims to provide the classes necessary to persist Joda-Time objects.
 <p>
 Various documentation is available:
 <ul>
-<!--<li>The user guide - <a href="userguide.html">user guide</a></li>
-<li>The javadoc for the <a href="api-release/index.html">current release</a></li>-->
+<!--<li>The user guide - <a href="userguide.html">user guide</a></li>-->
+<li>The javadoc for the <a href="api-release/index.html">current release</a></li>
 <li>The javadoc for the <a href="apidocs/index.html">latest CVS</a></li>
 <!--li>A <a href="faq.html">FAQ</a> list</li-->
 <li>The <a href="http://cvs.sourceforge.net/viewcvs.py/joda-time/JodaTimeContrib/hibernate">CVS repository</a></li>
@@ -49,13 +49,12 @@ Various documentation is available:
 
 <section name="Releases">
 <p>
-None yet.
-<!--<a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=xxxx">Release 0.8</a>
+<a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=174357">Release 0.8</a>
 is the current latest release.
-This release is a beta release and may have bugs.-->
+This release is a beta release and may have bugs.
 </p>
 <p>
-The dependencies are Joda-Time 1.1 and Hibernate 3.0 (plus associated dependencies).
+The dependencies are Joda-Time 1.0 or later and Hibernate 3.0 (plus associated dependencies).
 We recommend JDK 1.4 or later, and have performed no testing on earlier JDKs.
 </p>
 </section>
diff --git a/JodaTimeContrib/hibernate/xdocs/navigation.xml b/JodaTimeContrib/hibernate/xdocs/navigation.xml
index 6af8af8ed..61775795f 100644
--- a/JodaTimeContrib/hibernate/xdocs/navigation.xml
+++ b/JodaTimeContrib/hibernate/xdocs/navigation.xml
@@ -14,8 +14,9 @@
     <menu name="Joda Time Hibernate">
       <item name="Overview" href="index.html"/>
       <item name="Users guide" href="userguide.html"/>
-<!--      <item name="Javadoc (Release)" href="/api-release/index.html"/>-->
+      <item name="Javadoc (Release)" href="/api-release/index.html"/>
       <item name="License" href="licensecover.html"/>
+      <item name="Release notes" href="changes-report.html"/>
       <item name="Download" href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=xxxxxx"/>
     </menu>
     <menu name="Development">

From 882f3bf97b708bf1eb504544cb219de8ed948426 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Thu, 29 Dec 2005 21:04:12 +0000
Subject: [PATCH 019/115] Pre 0.8 release

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1009 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/hibernate/RELEASE-NOTES.txt   |  2 +-
 JodaTimeContrib/hibernate/maven.xml           | 47 +++++++++++++++++++
 JodaTimeContrib/hibernate/xdocs/index.xml     |  4 +-
 .../hibernate/xdocs/navigation.xml            |  2 +-
 4 files changed, 51 insertions(+), 4 deletions(-)
 create mode 100644 JodaTimeContrib/hibernate/maven.xml

diff --git a/JodaTimeContrib/hibernate/RELEASE-NOTES.txt b/JodaTimeContrib/hibernate/RELEASE-NOTES.txt
index 02ccdd57d..5fd188daf 100644
--- a/JodaTimeContrib/hibernate/RELEASE-NOTES.txt
+++ b/JodaTimeContrib/hibernate/RELEASE-NOTES.txt
@@ -1,5 +1,5 @@
 
-Joda-Time Contributions area - Hibernate support  v0.1
+Joda-Time Contributions area - Hibernate support  v0.8
 ======================================================
 Joda-Time is a date and time library that vastly improves on the JDK.
 This release provides additional support for Hibernate database persistence.
diff --git a/JodaTimeContrib/hibernate/maven.xml b/JodaTimeContrib/hibernate/maven.xml
new file mode 100644
index 000000000..58eed5607
--- /dev/null
+++ b/JodaTimeContrib/hibernate/maven.xml
@@ -0,0 +1,47 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project
+    default="java:jar"
+    xmlns:j="jelly:core"
+    xmlns:license="license"
+    xmlns:maven="jelly:maven"
+    xmlns:util="jelly:util"
+    xmlns:ant="jelly:ant">
+
+  <postGoal name="dist:prepare-bin-filesystem">
+    <j:set var="maven.dist.bin.assembly.dir" value="${pom.getPluginContext('maven-dist-plugin').getVariable('maven.dist.bin.assembly.dir')}" />
+    
+    <!-- Copy Files -->
+    <ant:copy todir="${maven.dist.bin.assembly.dir}">
+      <ant:fileset dir=".">
+        <ant:include name="NOTICE.txt"/>
+        <ant:include name="RELEASE-NOTES.txt"/>
+      </ant:fileset>
+    </ant:copy>
+  </postGoal>
+
+  <postGoal name="dist:prepare-src-filesystem">
+    <j:set var="maven.dist.src.assembly.dir" value="${pom.getPluginContext('maven-dist-plugin').getVariable('maven.dist.src.assembly.dir')}" />
+    
+    <!-- Copy Files -->
+    <ant:copy todir="${maven.dist.src.assembly.dir}">
+      <ant:fileset dir=".">
+        <ant:include name="NOTICE.txt"/>
+        <ant:include name="RELEASE-NOTES.txt"/>
+        <ant:include name="checkstyle.xml"/>
+      </ant:fileset>
+    </ant:copy>
+    
+    <!-- Copy Jars -->
+    <ant:copy todir="${maven.dist.src.assembly.dir}">
+      <ant:fileset dir="${maven.build.dir}">
+        <ant:include name="*.jar"/>
+      </ant:fileset>
+    </ant:copy>
+    
+    <!-- Copy XDocs -->
+    <ant:copy todir="${maven.dist.src.assembly.dir}/xdocs">
+      <ant:fileset dir="xdocs" />
+    </ant:copy>
+  </postGoal>
+
+</project>
diff --git a/JodaTimeContrib/hibernate/xdocs/index.xml b/JodaTimeContrib/hibernate/xdocs/index.xml
index 774c8d3ff..e7e84bd23 100644
--- a/JodaTimeContrib/hibernate/xdocs/index.xml
+++ b/JodaTimeContrib/hibernate/xdocs/index.xml
@@ -27,8 +27,8 @@ It aims to provide the classes necessary to persist Joda-Time objects.
   &lt;% pageContext.setAttribute("now", new org.joda.time.DateTime()); %&gt;
   <b>&lt;joda:format value="${now}" style="SM" /&gt;</b>
 </source>-->
-<!--Version 0.8 was released on 2005-xxxx -
-<a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=xxxx">Download now</a>-->
+Version 0.8 was released on 2005-12-29 -
+<a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=174357">Download now</a>
 </p>
 </section>
 
diff --git a/JodaTimeContrib/hibernate/xdocs/navigation.xml b/JodaTimeContrib/hibernate/xdocs/navigation.xml
index 61775795f..cf6d629d2 100644
--- a/JodaTimeContrib/hibernate/xdocs/navigation.xml
+++ b/JodaTimeContrib/hibernate/xdocs/navigation.xml
@@ -17,7 +17,7 @@
       <item name="Javadoc (Release)" href="/api-release/index.html"/>
       <item name="License" href="licensecover.html"/>
       <item name="Release notes" href="changes-report.html"/>
-      <item name="Download" href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=xxxxxx"/>
+      <item name="Download" href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=174357"/>
     </menu>
     <menu name="Development">
       <item name="Sourceforge" href="http://sourceforge.net/projects/joda-time/"/>

From c77298639140d60f4be5b4172072d3b4000f467f Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Thu, 29 Dec 2005 21:09:38 +0000
Subject: [PATCH 020/115] Pre 0.8 release

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1010 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/hibernate/build.xml   | 6 +++---
 JodaTimeContrib/hibernate/project.xml | 2 +-
 2 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/JodaTimeContrib/hibernate/build.xml b/JodaTimeContrib/hibernate/build.xml
index 573ad466a..fc61e6976 100644
--- a/JodaTimeContrib/hibernate/build.xml
+++ b/JodaTimeContrib/hibernate/build.xml
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 
-<!--build.xml generated by maven from project.xml version 0.8-SNAPSHOT
+<!--build.xml generated by maven from project.xml version 0.8
   on date December 29 2005, time 2047-->
 
 <project default="jar" name="joda-time-hibernate" basedir=".">
@@ -26,7 +26,7 @@
   </property>
   <property name="javadocdir" value="${basedir}/dist/docs/api">
   </property>
-  <property name="final.name" value="joda-time-hibernate-0.8-SNAPSHOT">
+  <property name="final.name" value="joda-time-hibernate-0.8">
   </property>
   <property name="proxy.host" value="">
   </property>
@@ -180,7 +180,7 @@
     </tstamp>
     <property name="copyright" value="Copyright &amp;copy;  Joda.org. All Rights Reserved.">
     </property>
-    <property name="title" value="Joda time JSP tags support 0.8-SNAPSHOT API">
+    <property name="title" value="Joda time JSP tags support 0.8 API">
     </property>
     <javadoc use="true" private="true" destdir="${javadocdir}" author="true" version="true" sourcepath="${basedir}/src/java" packagenames="org.joda.time.contrib.hibernate.*">
       <classpath>
diff --git a/JodaTimeContrib/hibernate/project.xml b/JodaTimeContrib/hibernate/project.xml
index 0de7b0d71..d0e4fad0d 100644
--- a/JodaTimeContrib/hibernate/project.xml
+++ b/JodaTimeContrib/hibernate/project.xml
@@ -4,7 +4,7 @@
   <groupId>joda-time</groupId>
   <artifactId>joda-time-hibernate</artifactId>
   <name>Joda time JSP tags support</name>
-  <currentVersion>0.8-SNAPSHOT</currentVersion>
+  <currentVersion>0.8</currentVersion>
   <shortDescription>Joda time Hibernate support</shortDescription>
   <description>
     Contribution to Joda-Time that adds Hibernate support

From 5f435a322b83cee56b063635c708edaa225f4bc1 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 30 Dec 2005 00:12:37 +0000
Subject: [PATCH 021/115] Pre 0.8 release

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1011 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/hibernate/build.xml         | 2 +-
 JodaTimeContrib/hibernate/project.xml       | 2 +-
 JodaTimeContrib/hibernate/xdocs/changes.xml | 2 +-
 3 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/JodaTimeContrib/hibernate/build.xml b/JodaTimeContrib/hibernate/build.xml
index fc61e6976..74ed4d1e1 100644
--- a/JodaTimeContrib/hibernate/build.xml
+++ b/JodaTimeContrib/hibernate/build.xml
@@ -180,7 +180,7 @@
     </tstamp>
     <property name="copyright" value="Copyright &amp;copy;  Joda.org. All Rights Reserved.">
     </property>
-    <property name="title" value="Joda time JSP tags support 0.8 API">
+    <property name="title" value="Joda time Hibernate support 0.8 API">
     </property>
     <javadoc use="true" private="true" destdir="${javadocdir}" author="true" version="true" sourcepath="${basedir}/src/java" packagenames="org.joda.time.contrib.hibernate.*">
       <classpath>
diff --git a/JodaTimeContrib/hibernate/project.xml b/JodaTimeContrib/hibernate/project.xml
index d0e4fad0d..15daddcce 100644
--- a/JodaTimeContrib/hibernate/project.xml
+++ b/JodaTimeContrib/hibernate/project.xml
@@ -3,7 +3,7 @@
   <pomVersion>3</pomVersion>
   <groupId>joda-time</groupId>
   <artifactId>joda-time-hibernate</artifactId>
-  <name>Joda time JSP tags support</name>
+  <name>Joda time Hibernate support</name>
   <currentVersion>0.8</currentVersion>
   <shortDescription>Joda time Hibernate support</shortDescription>
   <description>
diff --git a/JodaTimeContrib/hibernate/xdocs/changes.xml b/JodaTimeContrib/hibernate/xdocs/changes.xml
index e6f281dfb..3a08c3928 100644
--- a/JodaTimeContrib/hibernate/xdocs/changes.xml
+++ b/JodaTimeContrib/hibernate/xdocs/changes.xml
@@ -2,7 +2,7 @@
 
 <document>
   <properties>
-    <title>Java date and time API - JSP tags - Changes</title>
+    <title>Java date and time API - Hibernate - Changes</title>
     <author email="scolebourne@users.sourceforge.net">Stephen Colebourne</author>
   </properties>
   <body>

From bc30ef2ff5b76c93e68598309544c47c1c6ba248 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 7 Jan 2006 22:03:14 +0000
Subject: [PATCH 022/115] Release v1.0

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1013 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/jsptags/RELEASE-NOTES.txt   | 2 +-
 JodaTimeContrib/jsptags/build.xml           | 2 +-
 JodaTimeContrib/jsptags/project.properties  | 3 +--
 JodaTimeContrib/jsptags/project.xml         | 2 +-
 JodaTimeContrib/jsptags/xdocs/changes.xml   | 6 ++++++
 JodaTimeContrib/jsptags/xdocs/index.xml     | 4 ++--
 JodaTimeContrib/jsptags/xdocs/userguide.xml | 5 +++++
 7 files changed, 17 insertions(+), 7 deletions(-)

diff --git a/JodaTimeContrib/jsptags/RELEASE-NOTES.txt b/JodaTimeContrib/jsptags/RELEASE-NOTES.txt
index de8aa984b..be21d4de4 100644
--- a/JodaTimeContrib/jsptags/RELEASE-NOTES.txt
+++ b/JodaTimeContrib/jsptags/RELEASE-NOTES.txt
@@ -23,7 +23,7 @@ and DateTimeZone objects.
 
 Changes since 0.9
 -----------------
-Better error message in FormatSupport when object specified is of an incorrect type
+Improved documentation about servlet specification required.
 
 Build
 -----
diff --git a/JodaTimeContrib/jsptags/build.xml b/JodaTimeContrib/jsptags/build.xml
index 99c2704b9..06c328c85 100644
--- a/JodaTimeContrib/jsptags/build.xml
+++ b/JodaTimeContrib/jsptags/build.xml
@@ -22,7 +22,7 @@
   </property>
   <property name="javadocdir" value="${basedir}/dist/docs/api">
   </property>
-  <property name="final.name" value="joda-time-jsptags-1.0-SNAPSHOT">
+  <property name="final.name" value="joda-time-jsptags-1.0">
   </property>
   <property name="proxy.host" value="">
   </property>
diff --git a/JodaTimeContrib/jsptags/project.properties b/JodaTimeContrib/jsptags/project.properties
index bcb1769e3..1243b8a3f 100644
--- a/JodaTimeContrib/jsptags/project.properties
+++ b/JodaTimeContrib/jsptags/project.properties
@@ -25,6 +25,5 @@ maven.changes.issue.template=http://sourceforge.net/support/tracker.php?aid=%ISS
 maven.sourceforge.project.name=joda-time
 maven.sourceforge.project.groupId=97367
 maven.sourceforge.project.packageName=joda-time-jsptags
-maven.sourceforge.project.releaseNotes=RELEASE-NOTES.txt
-maven.sourceforge.project.sendEmailNotice=false
+maven.sourceforge.project.sendEmailNotice=true
 maven.sourceforge.project.submitNewsItem=false
diff --git a/JodaTimeContrib/jsptags/project.xml b/JodaTimeContrib/jsptags/project.xml
index c7f1f35e1..ebe99fd6a 100644
--- a/JodaTimeContrib/jsptags/project.xml
+++ b/JodaTimeContrib/jsptags/project.xml
@@ -4,7 +4,7 @@
   <groupId>joda-time</groupId>
   <artifactId>joda-time-jsptags</artifactId>
   <name>Joda time JSP tags support</name>
-  <currentVersion>1.0-SNAPSHOT</currentVersion>
+  <currentVersion>1.0</currentVersion>
   <shortDescription>Joda-Time JSP tags support</shortDescription>
   <description>
     Contribution to Joda-Time that adds JSP tags support
diff --git a/JodaTimeContrib/jsptags/xdocs/changes.xml b/JodaTimeContrib/jsptags/xdocs/changes.xml
index ce23bb420..25f237953 100644
--- a/JodaTimeContrib/jsptags/xdocs/changes.xml
+++ b/JodaTimeContrib/jsptags/xdocs/changes.xml
@@ -8,6 +8,12 @@
   <body>
 
     <!-- types are add, fix, remove, update -->
+    <release version="1.0" date="2006-07-01" description="First full release">
+      <action dev="scolebourne" type="add">
+        Add documentation about servlet specification needed.
+      </action>              
+    </release>
+
     <release version="0.9" date="2005-12-24" description="Pre 1.0 version">
       <action dev="scolebourne" type="fix" due-to="Robert Stevenson">
         Better error message when unknown object type passed in.
diff --git a/JodaTimeContrib/jsptags/xdocs/index.xml b/JodaTimeContrib/jsptags/xdocs/index.xml
index ab3eb1597..b4990fa2d 100644
--- a/JodaTimeContrib/jsptags/xdocs/index.xml
+++ b/JodaTimeContrib/jsptags/xdocs/index.xml
@@ -28,7 +28,7 @@ As a flavour of the tags, here's how to format a Joda-Time object in JSP:
   &lt;% pageContext.setAttribute("now", new org.joda.time.DateTime()); %&gt;
   <b>&lt;joda:format value="${now}" style="SM" /&gt;</b>
 </source>
-Version 0.9 was released on 2005-12-24 -
+Version 1.0 was released on 2005-07-01 -
 <a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=161360">Download now</a>
 </p>
 </section>
@@ -50,7 +50,7 @@ Various documentation is available:
 
 <section name="Releases">
 <p>
-<a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=161360">Release 0.9</a>
+<a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=161360">Release 1.0</a>
 is the current latest release.
 This release is a beta and may have bugs.
 </p>
diff --git a/JodaTimeContrib/jsptags/xdocs/userguide.xml b/JodaTimeContrib/jsptags/xdocs/userguide.xml
index 6a7f3655c..9afbbfb25 100644
--- a/JodaTimeContrib/jsptags/xdocs/userguide.xml
+++ b/JodaTimeContrib/jsptags/xdocs/userguide.xml
@@ -40,6 +40,11 @@ You then need to declare the library as follows at the top of your jsp pages:
 &lt;%@taglib prefix="joda" uri="http://www.joda.org/joda/time/tags" %&gt;
 </source>
 </p>
+<p>
+In addition to these steps you should ensure that your application is using
+servlet specification 2.4. This is usually controlled by the web.xml file.
+If you do not do this then EL expressions will not work as expected.
+</p>
 </subsection>
 </section>
 

From e762ad0b0622f3c741e362551ce68e6b11e409d2 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 7 Jan 2006 22:39:26 +0000
Subject: [PATCH 023/115] Post release v1.0

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1015 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/jsptags/RELEASE-NOTES.txt | 8 ++++----
 JodaTimeContrib/jsptags/build.xml         | 4 ++--
 JodaTimeContrib/jsptags/project.xml       | 7 ++++++-
 3 files changed, 12 insertions(+), 7 deletions(-)

diff --git a/JodaTimeContrib/jsptags/RELEASE-NOTES.txt b/JodaTimeContrib/jsptags/RELEASE-NOTES.txt
index be21d4de4..3ff3c9d76 100644
--- a/JodaTimeContrib/jsptags/RELEASE-NOTES.txt
+++ b/JodaTimeContrib/jsptags/RELEASE-NOTES.txt
@@ -1,10 +1,10 @@
-Joda-Time JSP tags contributed project version 1.0
+Joda-Time JSP tags contributed project version 1.1
 --------------------------------------------------
 
 Joda-Time is a date and time handling library that seeks to replace the JDK
 Date and Calendar classes.
 
-This is the 1.0 release of the JSP tag library support classes.
+This is the 1.1 release of the JSP tag library support classes.
 These classes were converted from code at Jakarta Taglibs by Jim Newsham.
 Please check the NOTICE.txt for the Apache credit.
 
@@ -21,9 +21,9 @@ Unlike the fmt tags which work with java.util.Date and java.util.TimeZone object
 the Joda tags work with Joda DateTime, ReadableInstant, ReadablePartial,
 and DateTimeZone objects.  
 
-Changes since 0.9
+Changes since 1.0
 -----------------
-Improved documentation about servlet specification required.
+
 
 Build
 -----
diff --git a/JodaTimeContrib/jsptags/build.xml b/JodaTimeContrib/jsptags/build.xml
index 06c328c85..267824d4b 100644
--- a/JodaTimeContrib/jsptags/build.xml
+++ b/JodaTimeContrib/jsptags/build.xml
@@ -22,7 +22,7 @@
   </property>
   <property name="javadocdir" value="${basedir}/dist/docs/api">
   </property>
-  <property name="final.name" value="joda-time-jsptags-1.0">
+  <property name="final.name" value="joda-time-jsptags-1.1">
   </property>
   <property name="proxy.host" value="">
   </property>
@@ -136,7 +136,7 @@
     </tstamp>
     <property name="copyright" value="Copyright &amp;copy;  Joda.org. All Rights Reserved.">
     </property>
-    <property name="title" value="Joda time JSP tags support 1.0 API">
+    <property name="title" value="Joda time JSP tags support 1.1 API">
     </property>
     <javadoc use="true" private="true" destdir="${javadocdir}" author="true" version="true" sourcepath="${basedir}/src/java" packagenames="org.joda.time.contrib.jsptag.*">
       <classpath>
diff --git a/JodaTimeContrib/jsptags/project.xml b/JodaTimeContrib/jsptags/project.xml
index ebe99fd6a..7ded1f388 100644
--- a/JodaTimeContrib/jsptags/project.xml
+++ b/JodaTimeContrib/jsptags/project.xml
@@ -4,7 +4,7 @@
   <groupId>joda-time</groupId>
   <artifactId>joda-time-jsptags</artifactId>
   <name>Joda time JSP tags support</name>
-  <currentVersion>1.0</currentVersion>
+  <currentVersion>1.1-SNAPSHOT</currentVersion>
   <shortDescription>Joda-Time JSP tags support</shortDescription>
   <description>
     Contribution to Joda-Time that adds JSP tags support
@@ -58,6 +58,11 @@
       <name>0.9</name>
       <tag>v0_9_000</tag>
     </version>
+    <version>
+      <id>1.0</id>
+      <name>1.0</name>
+      <tag>v1_0_000</tag>
+    </version>
   </versions>
 
   <developers>

From 672fc2244038f0d45ccb6e9e9179f3e861b9fbea Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 8 Jan 2006 00:08:53 +0000
Subject: [PATCH 024/115] Initial versions of local datetime classes

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1016 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/java/org/joda/time/LocalDate.java     | 1429 +++++++++++++
 .../src/java/org/joda/time/LocalDateTime.java | 1794 +++++++++++++++++
 2 files changed, 3223 insertions(+)
 create mode 100644 JodaTime/src/java/org/joda/time/LocalDate.java
 create mode 100644 JodaTime/src/java/org/joda/time/LocalDateTime.java

diff --git a/JodaTime/src/java/org/joda/time/LocalDate.java b/JodaTime/src/java/org/joda/time/LocalDate.java
new file mode 100644
index 000000000..f26b2fdde
--- /dev/null
+++ b/JodaTime/src/java/org/joda/time/LocalDate.java
@@ -0,0 +1,1429 @@
+/*
+ *  Copyright 2001-2006 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time;
+
+import java.io.IOException;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+import java.io.Serializable;
+import java.util.Calendar;
+import java.util.Date;
+import java.util.HashSet;
+import java.util.Locale;
+import java.util.Set;
+
+import org.joda.time.base.AbstractPartial;
+import org.joda.time.chrono.ISOChronology;
+import org.joda.time.convert.ConverterManager;
+import org.joda.time.convert.InstantConverter;
+import org.joda.time.field.AbstractReadableInstantFieldProperty;
+import org.joda.time.format.DateTimeFormat;
+import org.joda.time.format.ISODateTimeFormat;
+
+/**
+ * LocalDate is an unmodifiable datetime class representing a
+ * datetime without a time zone.
+ * <p>
+ * LocalDate implements the {@link ReadablePartial} interface.
+ * To do this, the interface methods focus on the key fields -
+ * Year, MonthOfYear and DayOfMonth.
+ * However, <b>all</b> fields may in fact be queried.
+ * <p>
+ * LocalDate differs from DateMidnight in that this class does not
+ * have a time zone and does not represent a single instant in time.
+ * <p>
+ * Calculations on LocalDate are performed using a {@link Chronology}.
+ * This chronology will be set internally to be in the UTC time zone
+ * for all calculations.
+ *
+ * <p>Each individual field can be queried in two ways:
+ * <ul>
+ * <li><code>getMonthOfYear()</code>
+ * <li><code>monthOfYear().get()</code>
+ * </ul>
+ * The second technique also provides access to other useful methods on the
+ * field:
+ * <ul>
+ * <li>numeric value
+ * <li>text value
+ * <li>short text value
+ * <li>maximum/minimum values
+ * <li>add/subtract
+ * <li>set
+ * <li>rounding
+ * </ul>
+ *
+ * <p>
+ * LocalDate is thread-safe and immutable, provided that the Chronology is as well.
+ * All standard Chronology classes supplied are thread-safe and immutable.
+ *
+ * @author Stephen Colebourne
+ * @since 1.3
+ */
+public final class LocalDate
+        extends AbstractPartial
+        implements ReadablePartial, Serializable {
+
+    /** Serialization lock */
+    private static final long serialVersionUID = -8775358157899L;
+
+    /** The index of the year field in the field array */
+    private static final int YEAR = 0;
+    /** The index of the monthOfYear field in the field array */
+    private static final int MONTH_OF_YEAR = 1;
+    /** The index of the dayOfMonth field in the field array */
+    private static final int DAY_OF_MONTH = 2;
+    /** Set of known duration types. */
+    private static final Set DATE_DURATION_TYPES = new HashSet();
+    static {
+        DATE_DURATION_TYPES.add(DurationFieldType.days());
+        DATE_DURATION_TYPES.add(DurationFieldType.weeks());
+        DATE_DURATION_TYPES.add(DurationFieldType.months());
+        DATE_DURATION_TYPES.add(DurationFieldType.weekyears());
+        DATE_DURATION_TYPES.add(DurationFieldType.years());
+        DATE_DURATION_TYPES.add(DurationFieldType.centuries());
+        DATE_DURATION_TYPES.add(DurationFieldType.eras());
+    }
+
+    /** The local millis from 1970-01-01T00:00:00 */
+    private long iLocalMillis;
+    /** The chronology to use in UTC */
+    private Chronology iChronology;
+
+    //-----------------------------------------------------------------------
+    /**
+     * Constructs an instance set to the current local time evaluated using
+     * ISO chronology in the default zone.
+     * <p>
+     * Once the constructor is completed, the zone is no longer used.
+     */
+    public static LocalDate nowDefaultZone() {
+        return forInstant(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance());
+    }
+
+    /**
+     * Constructs an instance set to the current local time evaluated using
+     * ISO chronology in the specified zone.
+     * <p>
+     * If the specified time zone is null, the default zone is used.
+     * Once the constructor is completed, the zone is no longer used.
+     *
+     * @param zone  the time zone, null means default zone
+     */
+    public static LocalDate now(DateTimeZone zone) {
+        return forInstant(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(zone));
+    }
+
+    /**
+     * Constructs an instance set to the current local time evaluated using
+     * specified chronology.
+     * <p>
+     * If the chronology is null, ISO chronology in the default time zone is used.
+     * Once the constructor is completed, the zone is no longer used.
+     *
+     * @param chronology  the chronology, null means ISOChronology in default zone
+     */
+    public static LocalDate now(Chronology chronology) {
+        return forInstant(DateTimeUtils.currentTimeMillis(), chronology);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Constructs a LocalDate from a <code>java.util.Calendar</code>
+     * using exactly the same field values avoiding any time zone effects.
+     * <p>
+     * Each field is queried from the Calendar and assigned to the LocalDate.
+     * This is useful if you have been using the Calendar as a local date,
+     * ignoing the zone.
+     * <p>
+     * This factory method ignores the type of the calendar and always
+     * creates a LocalDate with ISO chronology. It is expected that you
+     * will only pass in instances of <code>GregorianCalendar</code> however
+     * this is not validated.
+     *
+     * @param calendar  the Calendar to extract fields from
+     * @return the created LocalDate
+     * @throws IllegalArgumentException if the calendar is null
+     * @throws IllegalArgumentException if the date is invalid for the ISO chronology
+     */
+    public static LocalDate forFields(Calendar calendar) {
+        if (calendar == null) {
+            throw new IllegalArgumentException("The calendar must not be null");
+        }
+        return new LocalDate(
+            calendar.get(Calendar.YEAR),
+            calendar.get(Calendar.MONTH) + 1,
+            calendar.get(Calendar.DAY_OF_MONTH)
+        );
+    }
+
+    /**
+     * Constructs a LocalDate from a <code>java.util.Date</code>
+     * using exactly the same field values avoiding any time zone effects.
+     * <p>
+     * Each field is queried from the Date and assigned to the LocalDate.
+     * This is useful if you have been using the Date as a local date,
+     * ignoing the zone.
+     * <p>
+     * This factory method always creates a LocalDate with ISO chronology.
+     *
+     * @param date  the Date to extract fields from
+     * @return the created LocalDate
+     * @throws IllegalArgumentException if the calendar is null
+     * @throws IllegalArgumentException if the date is invalid for the ISO chronology
+     */
+    public static LocalDate forFields(Date date) {
+        if (date == null) {
+            throw new IllegalArgumentException("The date must not be null");
+        }
+        return new LocalDate(
+            date.getYear() + 1900,
+            date.getMonth() + 1,
+            date.getDate()
+        );
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Constructs an instance set to the local time defined by the specified
+     * instant evaluated using ISO chronology in the default zone.
+     * <p>
+     * Once the constructor is completed, the zone is no longer used.
+     *
+     * @param instant  the milliseconds from 1970-01-01T00:00:00Z
+     */
+    public static LocalDate forInstantDefaultZone(long instant) {
+        return forInstant(instant, ISOChronology.getInstance());
+    }
+
+    /**
+     * Constructs an instance set to the local time defined by the specified
+     * instant evaluated using ISO chronology in the specified zone.
+     * <p>
+     * If the specified time zone is null, the default zone is used.
+     * Once the constructor is completed, the zone is no longer used.
+     *
+     * @param instant  the milliseconds from 1970-01-01T00:00:00Z
+     * @param zone  the time zone, null means default zone
+     */
+    public static LocalDate forInstant(long instant, DateTimeZone zone) {
+        return forInstant(instant, ISOChronology.getInstance(zone));
+    }
+
+    /**
+     * Constructs an instance set to the local time defined by the specified
+     * instant evaluated using the specified chronology.
+     * <p>
+     * If the chronology is null, ISO chronology in the default zone is used.
+     * Once the constructor is completed, the zone is no longer used.
+     *
+     * @param instant  the milliseconds from 1970-01-01T00:00:00Z
+     * @param chronology  the chronology, null means ISOChronology in default zone
+     */
+    public static LocalDate forInstant(long instant, Chronology chronology) {
+        chronology = DateTimeUtils.getChronology(chronology);
+        long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);
+        return new LocalDate(localMillis, chronology.withUTC());
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Constructs an instance from an Object that represents a datetime,
+     * forcing the time zone to that specified.
+     * <p>
+     * If the object contains no chronology, <code>ISOChronology</code> is used.
+     * If the specified time zone is null, the default zone is used.
+     * Once the constructor is completed, the zone is no longer used.
+     * <p>
+     * The recognised object types are defined in
+     * {@link org.joda.time.convert.ConverterManager ConverterManager} and
+     * include ReadableInstant, String, Calendar and Date.
+     *
+     * @param instant  the datetime object
+     * @param zone  the time zone
+     * @throws IllegalArgumentException if the instant is invalid
+     */
+    public static LocalDate forInstant(Object instant, DateTimeZone zone) {
+        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
+        Chronology chrono = converter.getChronology(instant, zone);
+        long millis = converter.getInstantMillis(instant, chrono);
+        chrono = DateTimeUtils.getChronology(chrono);
+        return forInstant(millis, chrono);
+    }
+
+    /**
+     * Constructs an instance from an Object that represents a datetime,
+     * using the specified chronology.
+     * <p>
+     * If the chronology is null, ISO in the default time zone is used.
+     * Once the constructor is completed, the zone is no longer used.
+     * <p>
+     * The recognised object types are defined in
+     * {@link org.joda.time.convert.ConverterManager ConverterManager} and
+     * include ReadableInstant, String, Calendar and Date.
+     *
+     * @param instant  the datetime object
+     * @param chronology  the chronology
+     * @throws IllegalArgumentException if the instant is invalid
+     */
+    public static LocalDate forInstant(Object instant, Chronology chronology) {
+        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
+        Chronology chrono = DateTimeUtils.getChronology(converter.getChronology(instant, chronology));
+        long millis = converter.getInstantMillis(instant, chronology);
+        return forInstant(millis, chrono);
+    }
+
+    /**
+     * Constructs an instance set to the local time defined by the specified
+     * instant evaluated using the specified local (UTC) chronology.
+     *
+     * @param localMillis  the local milliseconds from 1970-01-01T00:00:00
+     * @param chronology  the UTC chronology, not null
+     */
+    LocalDate(long localMillis, Chronology chronology) {
+        super();
+        chronology.dayOfMonth().roundFloor(localMillis);
+        iLocalMillis = localMillis;
+        iChronology = chronology;
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Constructs an instance set to the specified date and time
+     * using <code>ISOChronology</code>.
+     *
+     * @param year  the year
+     * @param monthOfYear  the month of the year
+     * @param dayOfMonth  the day of the month
+     */
+    public LocalDate(
+            int year,
+            int monthOfYear,
+            int dayOfMonth) {
+        this(year, monthOfYear, dayOfMonth, ISOChronology.getInstanceUTC());
+    }
+
+    /**
+     * Constructs an instance set to the specified date and time
+     * using the specified chronology, whose zone is ignored.
+     * <p>
+     * If the chronology is null, <code>ISOChronology</code> is used.
+     *
+     * @param year  the year
+     * @param monthOfYear  the month of the year
+     * @param dayOfMonth  the day of the month
+     * @param chronology  the chronology, null means ISOChronology in default zone
+     */
+    public LocalDate(
+            int year,
+            int monthOfYear,
+            int dayOfMonth,
+            Chronology chronology) {
+        super();
+        chronology = DateTimeUtils.getChronology(chronology).withUTC();
+        long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);
+        iChronology = chronology;
+        iLocalMillis = instant;
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the number of fields in this partial, which is three.
+     * The supported fields are Year, MonthOfYear and DayOfMonth.
+     * Note that all fields from day and above may in fact be queried via
+     * other methods.
+     *
+     * @return the field count, three
+     */
+    public int size() {
+        return 3;
+    }
+
+    /**
+     * Gets the field for a specific index in the chronology specified.
+     * <p>
+     * This method must not use any instance variables.
+     *
+     * @param index  the index to retrieve
+     * @param chrono  the chronology to use
+     * @return the field
+     */
+    protected DateTimeField getField(int index, Chronology chrono) {
+        switch (index) {
+            case YEAR:
+                return chrono.year();
+            case MONTH_OF_YEAR:
+                return chrono.monthOfYear();
+            case DAY_OF_MONTH:
+                return chrono.dayOfMonth();
+            default:
+                throw new IndexOutOfBoundsException("Invalid index: " + index);
+        }
+    }
+
+    /**
+     * Gets the value of the field at the specifed index.
+     * <p>
+     * This method is required to support the <code>ReadablePartial</code>
+     * interface. The supported fields are Year, MonthOfYear and DayOfMonth.
+     * Note that all fields from day and above may in fact be queried via
+     * other methods.
+     *
+     * @param index  the index, zero to two
+     * @return the value
+     * @throws IndexOutOfBoundsException if the index is invalid
+     */
+    public int getValue(int index) {
+        switch (index) {
+            case YEAR:
+                return getChronology().year().get(getLocalMillis());
+            case MONTH_OF_YEAR:
+                return getChronology().monthOfYear().get(getLocalMillis());
+            case DAY_OF_MONTH:
+                return getChronology().dayOfMonth().get(getLocalMillis());
+            default:
+                throw new IndexOutOfBoundsException("Invalid index: " + index);
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Get the value of one of the fields of a datetime.
+     * <p>
+     * This method gets the value of the specified field.
+     * For example:
+     * <pre>
+     * LocalDate dt = LocalDate.nowDefaultZone();
+     * int year = dt.get(DateTimeFieldType.year());
+     * </pre>
+     *
+     * @param fieldType  a field type, usually obtained from DateTimeFieldType, not null
+     * @return the value of that field
+     * @throws IllegalArgumentException if the field type is null or unsupported
+     */
+    public int get(DateTimeFieldType fieldType) {
+        if (fieldType == null) {
+            throw new IllegalArgumentException("The DateTimeFieldType must not be null");
+        }
+        if (isSupported(fieldType) == false) {
+            throw new IllegalArgumentException("Field '" + fieldType + "' is not supported");
+        }
+        return fieldType.getField(getChronology()).get(getLocalMillis());
+    }
+
+    /**
+     * Checks if the field type specified is supported by this
+     * local datetime and chronology.
+     * This can be used to avoid exceptions in {@link #get(DateTimeFieldType)}.
+     *
+     * @param type  a field type, usually obtained from DateTimeFieldType
+     * @return true if the field type is supported
+     */
+    public boolean isSupported(DateTimeFieldType type) {
+        if (type == null) {
+            return false;
+        }
+        DateTimeField field = type.getField(getChronology());
+        if (DATE_DURATION_TYPES.contains(type.getDurationType()) ||
+            field.getDurationField().getUnitMillis() >= getChronology().days().getUnitMillis()) {
+            return field.isSupported();
+        }
+        return false;
+    }
+
+    /**
+     * Checks if the duration type specified is supported by this
+     * local datetime and chronology.
+     *
+     * @param type  a duration type, usually obtained from DurationFieldType
+     * @return true if the field type is supported
+     */
+    public boolean isSupported(DurationFieldType type) {
+        if (type == null) {
+            return false;
+        }
+        DurationField field = type.getField(getChronology());
+        if (DATE_DURATION_TYPES.contains(type) ||
+            field.getUnitMillis() >= getChronology().days().getUnitMillis()) {
+            return field.isSupported();
+        }
+        return false;
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the milliseconds of the datetime instant from the Java epoch
+     * of 1970-01-01T00:00:00 (not fixed to any specific time zone).
+     * 
+     * @return the number of milliseconds since 1970-01-01T00:00:00
+     */
+    long getLocalMillis() {
+        return iLocalMillis;
+    }
+
+    /**
+     * Gets the chronology of the datetime.
+     * 
+     * @return the Chronology that the datetime is using
+     */
+    public Chronology getChronology() {
+        return iChronology;
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Converts this LocalDate to a full datetime at midnight using the
+     * default time zone.
+     *
+     * @return this date as a datetime at midnight
+     */
+    public DateTime toDateTimeAtMidnightDefaultZone() {
+        return toDateTimeAtMidnight(null);
+    }
+
+    /**
+     * Converts this LocalDate to a full datetime at midnight using the
+     * specified time zone.
+     * <p>
+     * This method uses the chronology from this instance plus the time zone
+     * specified.
+     *
+     * @param zone  the zone to use, null means default zone
+     * @return this date as a datetime at midnight
+     */
+    public DateTime toDateTimeAtMidnight(DateTimeZone zone) {
+        zone = DateTimeUtils.getZone(zone);
+        Chronology chrono = getChronology().withZone(zone);
+        return new DateTime(getYear(), getMonthOfYear(), getDayOfMonth(), 0, 0, 0, 0, chrono);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Converts this LocalDate to a full datetime using the default time zone
+     * setting the date fields from this instance and the time fields from
+     * the current time.
+     *
+     * @return this date as a datetime with the time as the current time
+     */
+    public DateTime toDateTimeAtCurrentTimeDefaultZone() {
+        return toDateTimeAtCurrentTime(null);
+    }
+
+    /**
+     * Converts this LocalDate to a full datetime using the specified time zone
+     * setting the date fields from this instance and the time fields from
+     * the current time.
+     * <p>
+     * This method uses the chronology from this instance plus the time zone
+     * specified.
+     *
+     * @param zone  the zone to use, null means default zone
+     * @return this date as a datetime with the time as the current time
+     */
+    public DateTime toDateTimeAtCurrentTime(DateTimeZone zone) {
+        zone = DateTimeUtils.getZone(zone);
+        Chronology chrono = getChronology().withZone(zone);
+        long instantMillis = DateTimeUtils.currentTimeMillis();
+        long resolved = chrono.set(this, instantMillis);
+        return new DateTime(resolved, chrono);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Converts this LocalDate to a DateMidnight in the default time zone.
+     *
+     * @return the DateMidnight instance in the default zone
+     */
+    public DateMidnight toDateMidnightDefaultZone() {
+        return toDateMidnight(null);
+    }
+
+    /**
+     * Converts this LocalDate to a DateMidnight.
+     *
+     * @param zone  the zone to get the DateMidnight in, null means default zone
+     * @return the DateMidnight instance
+     */
+    public DateMidnight toDateMidnight(DateTimeZone zone) {
+        zone = DateTimeUtils.getZone(zone);
+        Chronology chrono = getChronology().withZone(zone);
+        return new DateMidnight(getYear(), getMonthOfYear(), getDayOfMonth(), chrono);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets a copy of this date with different local millis.
+     * <p>
+     * The returned object will be a new instance of the same type.
+     * Only the millis will change, the chronology is kept.
+     * The returned object will be either be a new instance or <code>this</code>.
+     *
+     * @param newMillis  the new millis, from 1970-01-01T00:00:00
+     * @return a copy of this date with different millis
+     */
+    LocalDate withLocalMillis(long newMillis) {
+        newMillis = iChronology.dayOfMonth().roundFloor(newMillis);
+        return (newMillis == getLocalMillis() ? this : new LocalDate(newMillis, getChronology()));
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets a copy of this LocalDate with the partial set of fields replacing
+     * those from this instance.
+     * <p>
+     * For example, if the partial contains a year and a month then those two
+     * fields will be changed in the returned instance.
+     * Unsupported fields are ignored.
+     * If the partial is null, then <code>this</code> is returned.
+     *
+     * @param partial  the partial set of fields to apply to this datetime, null ignored
+     * @return a copy of this datetime with a different set of fields
+     * @throws IllegalArgumentException if any value is invalid
+     */
+    public LocalDate withFields(ReadablePartial partial) {
+        if (partial == null) {
+            return this;
+        }
+        return withLocalMillis(getChronology().set(partial, getLocalMillis()));
+    }
+
+    /**
+     * Gets a copy of this LocalDate with the specified field set to a new value.
+     * <p>
+     * For example, if the field type is <code>monthOfYear</code> then the
+     * month of year field will be changed in the returned instance.
+     * If the field type is null, then <code>this</code> is returned.
+     * <p>
+     * These three lines are equivalent:
+     * <pre>
+     * LocalDate updated = dt.withField(DateTimeFieldType.dayOfMonth(), 6);
+     * LocalDate updated = dt.dayOfMonth().withValue(6);
+     * </pre>
+     *
+     * @param fieldType  the field type to set, not null
+     * @param value  the value to set
+     * @return a copy of this datetime with the field set
+     * @throws IllegalArgumentException if the field is null or unsupported
+     */
+    public LocalDate withField(DateTimeFieldType fieldType, int value) {
+        if (fieldType == null) {
+            throw new IllegalArgumentException("Field must not be null");
+        }
+        if (isSupported(fieldType) == false) {
+            throw new IllegalArgumentException("Field '" + fieldType + "' is not supported");
+        }
+        long instant = fieldType.getField(getChronology()).set(getLocalMillis(), value);
+        return withLocalMillis(instant);
+    }
+
+    /**
+     * Gets a copy of this LocalDate with the value of the specified field increased.
+     * <p>
+     * If the addition is zero or the field is null, then <code>this</code> is returned.
+     * <p>
+     * These three lines are equivalent:
+     * <pre>
+     * LocalDate added = dt.withFieldAdded(DurationFieldType.years(), 6);
+     * LocalDate added = dt.plusYears(6);
+     * LocalDate added = dt.plus(Period.years(6));
+     * </pre>
+     *
+     * @param fieldType  the field type to add to, not null
+     * @param amount  the amount to add
+     * @return a copy of this datetime with the field updated
+     * @throws IllegalArgumentException if the field is null or unsupported
+     * @throws ArithmeticException if the new datetime exceeds the capacity of a long
+     */
+    public LocalDate withFieldAdded(DurationFieldType fieldType, int amount) {
+        if (fieldType == null) {
+            throw new IllegalArgumentException("Field must not be null");
+        }
+        if (isSupported(fieldType) == false) {
+            throw new IllegalArgumentException("Field '" + fieldType + "' is not supported");
+        }
+        if (amount == 0) {
+            return this;
+        }
+        long instant = fieldType.getField(getChronology()).add(getLocalMillis(), amount);
+        return withLocalMillis(instant);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets a copy of this LocalDate with the specified period added.
+     * <p>
+     * If the addition is zero, then <code>this</code> is returned.
+     * <p>
+     * This method is typically used to add multiple copies of complex
+     * period instances. Adding one field is best achieved using methods
+     * like {@link #withFieldAdded(DurationFieldType, int)}
+     * or {@link #plusYears(int)}.
+     * Unsupported fields are ignored.
+     *
+     * @param period  the period to add to this one, null means zero
+     * @param scalar  the amount of times to add, such as -1 to subtract once
+     * @return a copy of this datetime with the period added
+     * @throws ArithmeticException if the new datetime exceeds the capacity of a long
+     */
+    public LocalDate withPeriodAdded(ReadablePeriod period, int scalar) {
+        if (period == null || scalar == 0) {
+            return this;
+        }
+        long instant = getChronology().add(period, getLocalMillis(), scalar);
+        return withLocalMillis(instant);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets a copy of this LocalDate with the specified period added.
+     * <p>
+     * If the amount is zero or null, then <code>this</code> is returned.
+     * <p>
+     * This method is typically used to add complex period instances.
+     * Adding one field is best achieved using methods
+     * like {@link #plusYears(int)}.
+     * Unsupported fields are ignored.
+     *
+     * @param period  the duration to add to this one, null means zero
+     * @return a copy of this LocalDate with the period added
+     * @throws ArithmeticException if the new LocalDate exceeds the capacity of a long
+     */
+    public LocalDate plus(ReadablePeriod period) {
+        return withPeriodAdded(period, 1);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Returns a new LocalDate plus the specified number of years.
+     * <p>
+     * This LocalDate instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * LocalDate added = dt.plusYears(6);
+     * LocalDate added = dt.plus(Period.years(6));
+     * LocalDate added = dt.withFieldAdded(DurationFieldType.years(), 6);
+     * </pre>
+     *
+     * @param years  the amount of years to add, may be negative
+     * @return the new LocalDate plus the increased years
+     */
+    public LocalDate plusYears(int years) {
+        if (years == 0) {
+            return this;
+        }
+        long instant = getChronology().years().add(getLocalMillis(), years);
+        return withLocalMillis(instant);
+    }
+
+    /**
+     * Returns a new LocalDate plus the specified number of months.
+     * <p>
+     * This LocalDate instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * LocalDate added = dt.plusMonths(6);
+     * LocalDate added = dt.plus(Period.months(6));
+     * LocalDate added = dt.withFieldAdded(DurationFieldType.months(), 6);
+     * </pre>
+     *
+     * @param months  the amount of months to add, may be negative
+     * @return the new LocalDate plus the increased months
+     */
+    public LocalDate plusMonths(int months) {
+        if (months == 0) {
+            return this;
+        }
+        long instant = getChronology().months().add(getLocalMillis(), months);
+        return withLocalMillis(instant);
+    }
+
+    /**
+     * Returns a new LocalDate plus the specified number of weeks.
+     * <p>
+     * This LocalDate instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * LocalDate added = dt.plusWeeks(6);
+     * LocalDate added = dt.plus(Period.weeks(6));
+     * LocalDate added = dt.withFieldAdded(DurationFieldType.weeks(), 6);
+     * </pre>
+     *
+     * @param weeks  the amount of weeks to add, may be negative
+     * @return the new LocalDate plus the increased weeks
+     */
+    public LocalDate plusWeeks(int weeks) {
+        if (weeks == 0) {
+            return this;
+        }
+        long instant = getChronology().weeks().add(getLocalMillis(), weeks);
+        return withLocalMillis(instant);
+    }
+
+    /**
+     * Returns a new LocalDate plus the specified number of days.
+     * <p>
+     * This LocalDate instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * LocalDate added = dt.plusDays(6);
+     * LocalDate added = dt.plus(Period.days(6));
+     * LocalDate added = dt.withFieldAdded(DurationFieldType.days(), 6);
+     * </pre>
+     *
+     * @param days  the amount of days to add, may be negative
+     * @return the new LocalDate plus the increased days
+     */
+    public LocalDate plusDays(int days) {
+        if (days == 0) {
+            return this;
+        }
+        long instant = getChronology().days().add(getLocalMillis(), days);
+        return withLocalMillis(instant);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets a copy of this LocalDate with the specified period take away.
+     * <p>
+     * If the amount is zero or null, then <code>this</code> is returned.
+     * <p>
+     * This method is typically used to subtract complex period instances.
+     * Subtracting one field is best achieved using methods
+     * like {@link #minusYears(int)}.
+     *
+     * @param period  the period to reduce this instant by
+     * @return a copy of this LocalDate with the period taken away
+     * @throws ArithmeticException if the new LocalDate exceeds the capacity of a long
+     */
+    public LocalDate minus(ReadablePeriod period) {
+        return withPeriodAdded(period, -1);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Returns a new LocalDate minus the specified number of years.
+     * <p>
+     * This LocalDate instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * LocalDate subtracted = dt.minusYears(6);
+     * LocalDate subtracted = dt.minus(Period.years(6));
+     * LocalDate subtracted = dt.withFieldAdded(DurationFieldType.years(), -6);
+     * </pre>
+     *
+     * @param years  the amount of years to subtract, may be negative
+     * @return the new LocalDate minus the increased years
+     */
+    public LocalDate minusYears(int years) {
+        if (years == 0) {
+            return this;
+        }
+        long instant = getChronology().years().subtract(getLocalMillis(), years);
+        return withLocalMillis(instant);
+    }
+
+    /**
+     * Returns a new LocalDate minus the specified number of months.
+     * <p>
+     * This LocalDate instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * LocalDate subtracted = dt.minusMonths(6);
+     * LocalDate subtracted = dt.minus(Period.months(6));
+     * LocalDate subtracted = dt.withFieldAdded(DurationFieldType.months(), -6);
+     * </pre>
+     *
+     * @param months  the amount of months to subtract, may be negative
+     * @return the new LocalDate minus the increased months
+     */
+    public LocalDate minusMonths(int months) {
+        if (months == 0) {
+            return this;
+        }
+        long instant = getChronology().months().subtract(getLocalMillis(), months);
+        return withLocalMillis(instant);
+    }
+
+    /**
+     * Returns a new LocalDate minus the specified number of weeks.
+     * <p>
+     * This LocalDate instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * LocalDate subtracted = dt.minusWeeks(6);
+     * LocalDate subtracted = dt.minus(Period.weeks(6));
+     * LocalDate subtracted = dt.withFieldAdded(DurationFieldType.weeks(), -6);
+     * </pre>
+     *
+     * @param weeks  the amount of weeks to subtract, may be negative
+     * @return the new LocalDate minus the increased weeks
+     */
+    public LocalDate minusWeeks(int weeks) {
+        if (weeks == 0) {
+            return this;
+        }
+        long instant = getChronology().weeks().subtract(getLocalMillis(), weeks);
+        return withLocalMillis(instant);
+    }
+
+    /**
+     * Returns a new LocalDate minus the specified number of days.
+     * <p>
+     * This LocalDate instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * LocalDate subtracted = dt.minusDays(6);
+     * LocalDate subtracted = dt.minus(Period.days(6));
+     * LocalDate subtracted = dt.withFieldAdded(DurationFieldType.days(), -6);
+     * </pre>
+     *
+     * @param days  the amount of days to subtract, may be negative
+     * @return the new LocalDate minus the increased days
+     */
+    public LocalDate minusDays(int days) {
+        if (days == 0) {
+            return this;
+        }
+        long instant = getChronology().days().subtract(getLocalMillis(), days);
+        return withLocalMillis(instant);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the property object for the specified type, which contains many
+     * useful methods.
+     *
+     * @param fieldType  the field type to get the chronology for
+     * @return the property object
+     * @throws IllegalArgumentException if the field is null or unsupported
+     */
+    public Property property(DateTimeFieldType fieldType) {
+        if (fieldType == null) {
+            throw new IllegalArgumentException("The DateTimeFieldType must not be null");
+        }
+        if (isSupported(fieldType) == false) {
+            throw new IllegalArgumentException("Field '" + fieldType + "' is not supported");
+        }
+        return new Property(this, fieldType.getField(getChronology()));
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Get the era field value.
+     *
+     * @return the era
+     */
+    public int getEra() {
+        return getChronology().era().get(getLocalMillis());
+    }
+
+    /**
+     * Get the year of era field value.
+     *
+     * @return the year of era
+     */
+    public int getCenturyOfEra() {
+        return getChronology().centuryOfEra().get(getLocalMillis());
+    }
+
+    /**
+     * Get the year of era field value.
+     *
+     * @return the year of era
+     */
+    public int getYearOfEra() {
+        return getChronology().yearOfEra().get(getLocalMillis());
+    }
+
+    /**
+     * Get the year of century field value.
+     *
+     * @return the year of century
+     */
+    public int getYearOfCentury() {
+        return getChronology().yearOfCentury().get(getLocalMillis());
+    }
+
+    /**
+     * Get the year field value.
+     *
+     * @return the year
+     */
+    public int getYear() {
+        return getChronology().year().get(getLocalMillis());
+    }
+
+    /**
+     * Get the weekyear field value.
+     *
+     * @return the year of a week based year
+     */
+    public int getWeekyear() {
+        return getChronology().weekyear().get(getLocalMillis());
+    }
+
+    /**
+     * Get the month of year field value.
+     *
+     * @return the month of year
+     */
+    public int getMonthOfYear() {
+        return getChronology().monthOfYear().get(getLocalMillis());
+    }
+
+    /**
+     * Get the week of weekyear field value.
+     *
+     * @return the week of a week based year
+     */
+    public int getWeekOfWeekyear() {
+        return getChronology().weekOfWeekyear().get(getLocalMillis());
+    }
+
+    /**
+     * Get the day of year field value.
+     *
+     * @return the day of year
+     */
+    public int getDayOfYear() {
+        return getChronology().dayOfYear().get(getLocalMillis());
+    }
+
+    /**
+     * Get the day of month field value.
+     * <p>
+     * The values for the day of month are defined in {@link org.joda.time.DateTimeConstants}.
+     *
+     * @return the day of month
+     */
+    public int getDayOfMonth() {
+        return getChronology().dayOfMonth().get(getLocalMillis());
+    }
+
+    /**
+     * Get the day of week field value.
+     * <p>
+     * The values for the day of week are defined in {@link org.joda.time.DateTimeConstants}.
+     *
+     * @return the day of week
+     */
+    public int getDayOfWeek() {
+        return getChronology().dayOfWeek().get(getLocalMillis());
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Get the era property.
+     *
+     * @return the era property
+     */
+    public Property era() {
+        return new Property(this, getChronology().era());
+    }
+
+    /**
+     * Get the century of era property.
+     *
+     * @return the year of era property
+     */
+    public Property centuryOfEra() {
+        return new Property(this, getChronology().centuryOfEra());
+    }
+
+    /**
+     * Get the year of century property.
+     *
+     * @return the year of era property
+     */
+    public Property yearOfCentury() {
+        return new Property(this, getChronology().yearOfCentury());
+    }
+
+    /**
+     * Get the year of era property.
+     *
+     * @return the year of era property
+     */
+    public Property yearOfEra() {
+        return new Property(this, getChronology().yearOfEra());
+    }
+
+    /**
+     * Get the year property.
+     *
+     * @return the year property
+     */
+    public Property year() {
+        return new Property(this, getChronology().year());
+    }
+
+    /**
+     * Get the year of a week based year property.
+     *
+     * @return the year of a week based year property
+     */
+    public Property weekyear() {
+        return new Property(this, getChronology().weekyear());
+    }
+
+    /**
+     * Get the month of year property.
+     *
+     * @return the month of year property
+     */
+    public Property monthOfYear() {
+        return new Property(this, getChronology().monthOfYear());
+    }
+
+    /**
+     * Get the week of a week based year property.
+     *
+     * @return the week of a week based year property
+     */
+    public Property weekOfWeekyear() {
+        return new Property(this, getChronology().weekOfWeekyear());
+    }
+
+    /**
+     * Get the day of year property.
+     *
+     * @return the day of year property
+     */
+    public Property dayOfYear() {
+        return new Property(this, getChronology().dayOfYear());
+    }
+
+    /**
+     * Get the day of month property.
+     *
+     * @return the day of month property
+     */
+    public Property dayOfMonth() {
+        return new Property(this, getChronology().dayOfMonth());
+    }
+
+    /**
+     * Get the day of week property.
+     *
+     * @return the day of week property
+     */
+    public Property dayOfWeek() {
+        return new Property(this, getChronology().dayOfWeek());
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Output the date time in ISO8601 format (yyyy-MM-dd).
+     *
+     * @return ISO8601 time formatted string.
+     */
+    public String toString() {
+        return ISODateTimeFormat.date().print(this);
+    }
+
+    /**
+     * Output the date using the specified format pattern.
+     *
+     * @param pattern  the pattern specification, null means use <code>toString</code>
+     * @see org.joda.time.format.DateTimeFormat
+     */
+    public String toString(String pattern) {
+        if (pattern == null) {
+            return toString();
+        }
+        return DateTimeFormat.forPattern(pattern).print(this);
+    }
+
+    /**
+     * Output the date using the specified format pattern.
+     *
+     * @param pattern  the pattern specification, null means use <code>toString</code>
+     * @param locale  Locale to use, null means default
+     * @see org.joda.time.format.DateTimeFormat
+     */
+    public String toString(String pattern, Locale locale) throws IllegalArgumentException {
+        if (pattern == null) {
+            return toString();
+        }
+        return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * LocalDate.Property binds a LocalDate to a DateTimeField allowing
+     * powerful datetime functionality to be easily accessed.
+     * <p>
+     * The simplest use of this class is as an alternative get method, here used to
+     * get the year '1972' (as an int) and the month 'December' (as a String).
+     * <pre>
+     * LocalDate dt = new LocalDate(1972, 12, 3, 0, 0);
+     * int year = dt.year().get();
+     * String monthStr = dt.month().getAsText();
+     * </pre>
+     * <p>
+     * Methods are also provided that allow date modification. These return
+     * new instances of LocalDate - they do not modify the original.
+     * The example below yields two independent immutable date objects
+     * 20 years apart.
+     * <pre>
+     * LocalDate dt = new LocalDate(1972, 12, 3);
+     * LocalDate dt1920 = dt.year().withValue(1920);
+     * <p>
+     * LocalDate.Propery itself is thread-safe and immutable, as well as the
+     * LocalDate being operated on.
+     *
+     * @author Stephen Colebourne
+     * @author Brian S O'Neill
+     * @since 1.3
+     */
+    public static final class Property extends AbstractReadableInstantFieldProperty {
+        
+        /** Serialization version */
+        private static final long serialVersionUID = -3193829732634L;
+        
+        /** The instant this property is working against */
+        private transient LocalDate iInstant;
+        /** The field this property is working against */
+        private transient DateTimeField iField;
+        
+        /**
+         * Constructor.
+         * 
+         * @param instant  the instant to set
+         * @param field  the field to use
+         */
+        Property(LocalDate instant, DateTimeField field) {
+            super();
+            iInstant = instant;
+            iField = field;
+        }
+        
+        /**
+         * Writes the property in a safe serialization format.
+         */
+        private void writeObject(ObjectOutputStream oos) throws IOException {
+            oos.writeObject(iInstant);
+            oos.writeObject(iField.getType());
+        }
+
+        /**
+         * Reads the property from a safe serialization format.
+         */
+        private void readObject(ObjectInputStream oos) throws IOException, ClassNotFoundException {
+            iInstant = (LocalDate) oos.readObject();
+            DateTimeFieldType type = (DateTimeFieldType) oos.readObject();
+            iField = type.getField(iInstant.getChronology());
+        }
+
+        //-----------------------------------------------------------------------
+        /**
+         * Gets the field being used.
+         * 
+         * @return the field
+         */
+        public DateTimeField getField() {
+            return iField;
+        }
+        
+        /**
+         * Gets the milliseconds of the datetime that this property is linked to.
+         * 
+         * @return the milliseconds
+         */
+        protected long getMillis() {
+            return iInstant.getLocalMillis();
+        }
+        
+        /**
+         * Gets the LocalDate being used.
+         * 
+         * @return the LocalDate
+         */
+        public LocalDate getLocalDate() {
+            return iInstant;
+        }
+        
+        //-----------------------------------------------------------------------
+        /**
+         * Adds to this field in a copy of this LocalDate.
+         * <p>
+         * The LocalDate attached to this property is unchanged by this call.
+         *
+         * @param value  the value to add to the field in the copy
+         * @return a copy of the LocalDate with the field value changed
+         * @throws IllegalArgumentException if the value isn't valid
+         */
+        public LocalDate plus(int value) {
+            return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value));
+        }
+        
+        /**
+         * Adds to this field, possibly wrapped, in a copy of this LocalDate.
+         * A wrapped operation only changes this field.
+         * Thus 31st January plusWrapField one day goes to the 1st January.
+         * <p>
+         * The LocalDate attached to this property is unchanged by this call.
+         *
+         * @param value  the value to add to the field in the copy
+         * @return a copy of the LocalDate with the field value changed
+         * @throws IllegalArgumentException if the value isn't valid
+         */
+        public LocalDate plusWrapField(int value) {
+            return iInstant.withLocalMillis(iField.addWrapField(iInstant.getLocalMillis(), value));
+        }
+        
+        //-----------------------------------------------------------------------
+        /**
+         * Sets this field in a copy of the LocalDate.
+         * <p>
+         * The LocalDate attached to this property is unchanged by this call.
+         *
+         * @param value  the value to set the field in the copy to
+         * @return a copy of the LocalDate with the field value changed
+         * @throws IllegalArgumentException if the value isn't valid
+         */
+        public LocalDate withValue(int value) {
+            return iInstant.withLocalMillis(iField.set(iInstant.getLocalMillis(), value));
+        }
+        
+        /**
+         * Sets this field in a copy of the LocalDate to a parsed text value.
+         * <p>
+         * The LocalDate attached to this property is unchanged by this call.
+         *
+         * @param text  the text value to set
+         * @param locale  optional locale to use for selecting a text symbol
+         * @return a copy of the LocalDate with the field value changed
+         * @throws IllegalArgumentException if the text value isn't valid
+         */
+        public LocalDate withValue(String text, Locale locale) {
+            return iInstant.withLocalMillis(iField.set(iInstant.getLocalMillis(), text, locale));
+        }
+        
+        /**
+         * Sets this field in a copy of the LocalDate to a parsed text value.
+         * <p>
+         * The LocalDate attached to this property is unchanged by this call.
+         *
+         * @param text  the text value to set
+         * @return a copy of the LocalDate with the field value changed
+         * @throws IllegalArgumentException if the text value isn't valid
+         */
+        public LocalDate withValue(String text) {
+            return withValue(text, null);
+        }
+        
+        //-----------------------------------------------------------------------
+        /**
+         * Returns a new LocalDate with this field set to the maximum value
+         * for this field.
+         * <p>
+         * This operation is useful for obtaining a LocalDate on the last day
+         * of the month, as month lengths vary.
+         * <pre>
+         * LocalDate lastDayOfMonth = dt.dayOfMonth().withMaximumValue();
+         * </pre>
+         * <p>
+         * The LocalDate attached to this property is unchanged by this call.
+         *
+         * @return a copy of the LocalDate with this field set to its maximum
+         */
+        public LocalDate withMaximumValue() {
+            return withValue(getMaximumValue());
+        }
+        
+        /**
+         * Returns a new LocalDate with this field set to the minimum value
+         * for this field.
+         * <p>
+         * The LocalDate attached to this property is unchanged by this call.
+         *
+         * @return a copy of the LocalDate with this field set to its minimum
+         */
+        public LocalDate withMinimumValue() {
+            return withValue(getMinimumValue());
+        }
+        
+        //-----------------------------------------------------------------------
+        /**
+         * Rounds to the lowest whole unit of this field on a copy of this
+         * LocalDate.
+         * <p>
+         * For example, rounding floor on the hourOfDay field of a LocalDate
+         * where the time is 10:30 would result in new LocalDate with the
+         * time of 10:00.
+         *
+         * @return a copy of the LocalDate with the field value changed
+         */
+        public LocalDate withRoundedFloor() {
+            return iInstant.withLocalMillis(iField.roundFloor(iInstant.getLocalMillis()));
+        }
+        
+        /**
+         * Rounds to the highest whole unit of this field on a copy of this
+         * LocalDate.
+         * <p>
+         * For example, rounding floor on the hourOfDay field of a LocalDate
+         * where the time is 10:30 would result in new LocalDate with the
+         * time of 11:00.
+         *
+         * @return a copy of the LocalDate with the field value changed
+         */
+        public LocalDate withRoundedCeiling() {
+            return iInstant.withLocalMillis(iField.roundCeiling(iInstant.getLocalMillis()));
+        }
+        
+        /**
+         * Rounds to the nearest whole unit of this field on a copy of this
+         * LocalDate, favoring the floor if halfway.
+         *
+         * @return a copy of the LocalDate with the field value changed
+         */
+        public LocalDate withRoundedHalfFloor() {
+            return iInstant.withLocalMillis(iField.roundHalfFloor(iInstant.getLocalMillis()));
+        }
+        
+        /**
+         * Rounds to the nearest whole unit of this field on a copy of this
+         * LocalDate, favoring the ceiling if halfway.
+         *
+         * @return a copy of the LocalDate with the field value changed
+         */
+        public LocalDate withRoundedHalfCeiling() {
+            return iInstant.withLocalMillis(iField.roundHalfCeiling(iInstant.getLocalMillis()));
+        }
+        
+        /**
+         * Rounds to the nearest whole unit of this field on a copy of this
+         * LocalDate.  If halfway, the ceiling is favored over the floor
+         * only if it makes this field's value even.
+         *
+         * @return a copy of the LocalDate with the field value changed
+         */
+        public LocalDate withRoundedHalfEven() {
+            return iInstant.withLocalMillis(iField.roundHalfEven(iInstant.getLocalMillis()));
+        }
+    }
+
+}
diff --git a/JodaTime/src/java/org/joda/time/LocalDateTime.java b/JodaTime/src/java/org/joda/time/LocalDateTime.java
new file mode 100644
index 000000000..039364d76
--- /dev/null
+++ b/JodaTime/src/java/org/joda/time/LocalDateTime.java
@@ -0,0 +1,1794 @@
+/*
+ *  Copyright 2001-2006 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time;
+
+import java.io.IOException;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+import java.io.Serializable;
+import java.util.Calendar;
+import java.util.Date;
+import java.util.Locale;
+
+import org.joda.time.base.AbstractPartial;
+import org.joda.time.chrono.ISOChronology;
+import org.joda.time.convert.ConverterManager;
+import org.joda.time.convert.InstantConverter;
+import org.joda.time.field.AbstractReadableInstantFieldProperty;
+import org.joda.time.format.DateTimeFormat;
+import org.joda.time.format.ISODateTimeFormat;
+
+/**
+ * LocalDateTime is an unmodifiable datetime class representing a
+ * datetime without a time zone.
+ * <p>
+ * LocalDateTime implements the {@link ReadablePartial} interface.
+ * To do this, certain methods focus on key fields Year, MonthOfYear,
+ * DayOfYear, HourOfDay, MinuteOfHour, SecondOfMinute and MillisOfSecond.
+ * However, <b>all</b> fields may in fact be queried.
+ * <p>
+ * Internally, LocalDateTime holds the datetime as milliseconds
+ * from 1970-01-01T00:00:00. This represents the <i>local</i> millisecond
+ * count which differs from the epoch-based millisecond value in a
+ * <code>ReadableInstant</code> implementation by the amount of the zone offset.
+ * <p>
+ * Calculations on LocalDateTime are performed using a {@link Chronology}.
+ * This chronology will be set internally to be in the UTC time zone
+ * for all calculations.
+ *
+ * <p>Each individual field can be queried in two ways:
+ * <ul>
+ * <li><code>getHourOfDay()</code>
+ * <li><code>hourOfDay().get()</code>
+ * </ul>
+ * The second technique also provides access to other useful methods on the
+ * field:
+ * <ul>
+ * <li>numeric value
+ * <li>text value
+ * <li>short text value
+ * <li>maximum/minimum values
+ * <li>add/subtract
+ * <li>set
+ * <li>rounding
+ * </ul>
+ *
+ * <p>
+ * LocalDateTime is thread-safe and immutable, provided that the Chronology is as well.
+ * All standard Chronology classes supplied are thread-safe and immutable.
+ *
+ * @author Stephen Colebourne
+ * @since 1.0
+ */
+public final class LocalDateTime
+        extends AbstractPartial
+        implements ReadablePartial, Serializable {
+
+    /** Serialization lock */
+    private static final long serialVersionUID = -268716875315837168L;
+
+    /** The index of the year field in the field array */
+    private static final int YEAR = 0;
+    /** The index of the dayOfYear field in the field array */
+    private static final int DAY_OF_YEAR = 1;
+    /** The index of the millis field in the field array */
+    private static final int MILLIS_OF_DAY = 2;
+
+    /** The local millis from 1970-01-01T00:00:00 */
+    private long iLocalMillis;
+    /** The chronology to use in UTC */
+    private Chronology iChronology;
+
+    //-----------------------------------------------------------------------
+    /**
+     * Constructs an instance set to the current local time evaluated using
+     * ISO chronology in the default zone.
+     * <p>
+     * Once the constructor is completed, the zone is no longer used.
+     */
+    public static LocalDateTime nowDefaultZone() {
+        return forInstant(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance());
+    }
+
+    /**
+     * Constructs an instance set to the current local time evaluated using
+     * ISO chronology in the specified zone.
+     * <p>
+     * If the specified time zone is null, the default zone is used.
+     * Once the constructor is completed, the zone is no longer used.
+     *
+     * @param zone  the time zone, null means default zone
+     */
+    public static LocalDateTime now(DateTimeZone zone) {
+        return forInstant(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(zone));
+    }
+
+    /**
+     * Constructs an instance set to the current local time evaluated using
+     * specified chronology.
+     * <p>
+     * If the chronology is null, ISO chronology in the default time zone is used.
+     * Once the constructor is completed, the zone is no longer used.
+     *
+     * @param chronology  the chronology, null means ISOChronology in default zone
+     */
+    public static LocalDateTime now(Chronology chronology) {
+        return forInstant(DateTimeUtils.currentTimeMillis(), chronology);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Constructs a LocalDateTime from a <code>java.util.Calendar</code>
+     * using exactly the same field values avoiding any time zone effects.
+     * <p>
+     * Each field is queried from the Calendar and assigned to the LocalDateTime.
+     * This is useful if you have been using the Calendar as a local date,
+     * ignoing the zone.
+     * <p>
+     * This factory method ignores the type of the calendar and always
+     * creates a LocalDateTime with ISO chronology. It is expected that you
+     * will only pass in instances of <code>GregorianCalendar</code> however
+     * this is not validated.
+     *
+     * @param calendar  the Calendar to extract fields from
+     * @return the created LocalDateTime
+     * @throws IllegalArgumentException if the calendar is null
+     * @throws IllegalArgumentException if the date is invalid for the ISO chronology
+     */
+    public static LocalDateTime forFields(Calendar calendar) {
+        if (calendar == null) {
+            throw new IllegalArgumentException("The calendar must not be null");
+        }
+        return new LocalDateTime(
+            calendar.get(Calendar.YEAR),
+            calendar.get(Calendar.MONTH) + 1,
+            calendar.get(Calendar.DAY_OF_MONTH),
+            calendar.get(Calendar.HOUR_OF_DAY),
+            calendar.get(Calendar.MINUTE),
+            calendar.get(Calendar.SECOND),
+            calendar.get(Calendar.MILLISECOND)
+        );
+    }
+
+    /**
+     * Constructs a LocalDateTime from a <code>java.util.Date</code>
+     * using exactly the same field values avoiding any time zone effects.
+     * <p>
+     * Each field is queried from the Date and assigned to the LocalDateTime.
+     * This is useful if you have been using the Date as a local date,
+     * ignoing the zone.
+     * <p>
+     * This factory method always creates a LocalDateTime with ISO chronology.
+     *
+     * @param date  the Date to extract fields from
+     * @return the created LocalDateTime
+     * @throws IllegalArgumentException if the calendar is null
+     * @throws IllegalArgumentException if the date is invalid for the ISO chronology
+     */
+    public static LocalDateTime forFields(Date date) {
+        if (date == null) {
+            throw new IllegalArgumentException("The date must not be null");
+        }
+        return new LocalDateTime(
+            date.getYear() + 1900,
+            date.getMonth() + 1,
+            date.getDate(),
+            date.getHours(),
+            date.getMinutes(),
+            date.getSeconds(),
+            (int) (date.getTime() % 1000)
+        );
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Constructs an instance set to the local time defined by the specified
+     * instant evaluated using ISO chronology in the default zone.
+     * <p>
+     * Once the constructor is completed, the zone is no longer used.
+     *
+     * @param instant  the milliseconds from 1970-01-01T00:00:00Z
+     */
+    public static LocalDateTime forInstantDefaultZone(long instant) {
+        return forInstant(instant, ISOChronology.getInstance());
+    }
+
+    /**
+     * Constructs an instance set to the local time defined by the specified
+     * instant evaluated using ISO chronology in the specified zone.
+     * <p>
+     * If the specified time zone is null, the default zone is used.
+     * Once the constructor is completed, the zone is no longer used.
+     *
+     * @param instant  the milliseconds from 1970-01-01T00:00:00Z
+     * @param zone  the time zone, null means default zone
+     */
+    public static LocalDateTime forInstant(long instant, DateTimeZone zone) {
+        return forInstant(instant, ISOChronology.getInstance(zone));
+    }
+
+    /**
+     * Constructs an instance set to the local time defined by the specified
+     * instant evaluated using the specified chronology.
+     * <p>
+     * If the chronology is null, ISO chronology in the default zone is used.
+     * Once the constructor is completed, the zone is no longer used.
+     *
+     * @param instant  the milliseconds from 1970-01-01T00:00:00Z
+     * @param chronology  the chronology, null means ISOChronology in default zone
+     */
+    public static LocalDateTime forInstant(long instant, Chronology chronology) {
+        chronology = DateTimeUtils.getChronology(chronology);
+        long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);
+        return new LocalDateTime(localMillis, chronology.withUTC());
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Constructs an instance from an Object that represents a datetime.
+     * <p>
+     * If the object contains no chronology, <code>ISOChronology</code> is used.
+     * If the object contains no time zone, the default zone is used.
+     * Once the constructor is completed, the zone is no longer used.
+     * <p>
+     * The recognised object types are defined in
+     * {@link org.joda.time.convert.ConverterManager ConverterManager} and
+     * include ReadableInstant, String, Calendar and Date.
+     *
+     * @param instant  the datetime object
+     * @throws IllegalArgumentException if the instant is invalid
+     */
+    public static LocalDateTime forInstant(Object instant) {
+        return forInstant(instant, (Chronology) null);
+    }
+
+    /**
+     * Constructs an instance from an Object that represents a datetime,
+     * forcing the time zone to that specified.
+     * <p>
+     * If the object contains no chronology, <code>ISOChronology</code> is used.
+     * If the specified time zone is null, the default zone is used.
+     * Once the constructor is completed, the zone is no longer used.
+     * <p>
+     * The recognised object types are defined in
+     * {@link org.joda.time.convert.ConverterManager ConverterManager} and
+     * include ReadableInstant, String, Calendar and Date.
+     *
+     * @param instant  the datetime object
+     * @param zone  the time zone
+     * @throws IllegalArgumentException if the instant is invalid
+     */
+    public static LocalDateTime forInstant(Object instant, DateTimeZone zone) {
+        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
+        Chronology chrono = converter.getChronology(instant, zone);
+        long millis = converter.getInstantMillis(instant, chrono);
+        chrono = DateTimeUtils.getChronology(chrono);
+        return forInstant(millis, chrono);
+    }
+
+    /**
+     * Constructs an instance from an Object that represents a datetime,
+     * using the specified chronology.
+     * <p>
+     * If the chronology is null, ISO in the default time zone is used.
+     * Once the constructor is completed, the zone is no longer used.
+     * <p>
+     * The recognised object types are defined in
+     * {@link org.joda.time.convert.ConverterManager ConverterManager} and
+     * include ReadableInstant, String, Calendar and Date.
+     *
+     * @param instant  the datetime object
+     * @param chronology  the chronology
+     * @throws IllegalArgumentException if the instant is invalid
+     */
+    public static LocalDateTime forInstant(Object instant, Chronology chronology) {
+        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
+        Chronology chrono = DateTimeUtils.getChronology(converter.getChronology(instant, chronology));
+        long millis = converter.getInstantMillis(instant, chronology);
+        return forInstant(millis, chrono);
+    }
+
+    /**
+     * Constructs an instance set to the local time defined by the specified
+     * instant evaluated using the specified local (UTC) chronology.
+     *
+     * @param localMillis  the local milliseconds from 1970-01-01T00:00:00
+     * @param chronology  the UTC chronology, not null
+     */
+    LocalDateTime(long localMillis, Chronology chronology) {
+        super();
+        iLocalMillis = localMillis;
+        iChronology = chronology;
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Constructs an instance set to the specified date and time
+     * using <code>ISOChronology</code>.
+     *
+     * @param year  the year
+     * @param monthOfYear  the month of the year
+     * @param dayOfMonth  the day of the month
+     * @param hourOfDay  the hour of the day
+     * @param minuteOfHour  the minute of the hour
+     */
+    public LocalDateTime(
+            int year,
+            int monthOfYear,
+            int dayOfMonth,
+            int hourOfDay,
+            int minuteOfHour) {
+        this(year, monthOfYear, dayOfMonth, hourOfDay,
+            minuteOfHour, 0, 0, ISOChronology.getInstanceUTC());
+    }
+
+    /**
+     * Constructs an instance set to the specified date and time
+     * using <code>ISOChronology</code>.
+     *
+     * @param year  the year
+     * @param monthOfYear  the month of the year
+     * @param dayOfMonth  the day of the month
+     * @param hourOfDay  the hour of the day
+     * @param minuteOfHour  the minute of the hour
+     * @param secondOfMinute  the second of the minute
+     */
+    public LocalDateTime(
+            int year,
+            int monthOfYear,
+            int dayOfMonth,
+            int hourOfDay,
+            int minuteOfHour,
+            int secondOfMinute) {
+        this(year, monthOfYear, dayOfMonth, hourOfDay,
+            minuteOfHour, secondOfMinute, 0, ISOChronology.getInstanceUTC());
+    }
+
+    /**
+     * Constructs an instance set to the specified date and time
+     * using <code>ISOChronology</code>.
+     *
+     * @param year  the year
+     * @param monthOfYear  the month of the year
+     * @param dayOfMonth  the day of the month
+     * @param hourOfDay  the hour of the day
+     * @param minuteOfHour  the minute of the hour
+     * @param secondOfMinute  the second of the minute
+     * @param millisOfSecond  the millisecond of the second
+     */
+    public LocalDateTime(
+            int year,
+            int monthOfYear,
+            int dayOfMonth,
+            int hourOfDay,
+            int minuteOfHour,
+            int secondOfMinute,
+            int millisOfSecond) {
+        this(year, monthOfYear, dayOfMonth, hourOfDay,
+            minuteOfHour, secondOfMinute, millisOfSecond, ISOChronology.getInstanceUTC());
+    }
+
+    /**
+     * Constructs an instance set to the specified date and time
+     * using the specified chronology, whose zone is ignored.
+     * <p>
+     * If the chronology is null, <code>ISOChronology</code> is used.
+     *
+     * @param year  the year
+     * @param monthOfYear  the month of the year
+     * @param dayOfMonth  the day of the month
+     * @param hourOfDay  the hour of the day
+     * @param minuteOfHour  the minute of the hour
+     * @param secondOfMinute  the second of the minute
+     * @param millisOfSecond  the millisecond of the second
+     * @param chronology  the chronology, null means ISOChronology in default zone
+     */
+    public LocalDateTime(
+            int year,
+            int monthOfYear,
+            int dayOfMonth,
+            int hourOfDay,
+            int minuteOfHour,
+            int secondOfMinute,
+            int millisOfSecond,
+            Chronology chronology) {
+        super();
+        chronology = DateTimeUtils.getChronology(chronology).withUTC();
+        long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
+            hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+        iChronology = chronology;
+        iLocalMillis = instant;
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the number of fields in this partial, which is three.
+     * The supported fields are Year, DayOfYear and MillisOfDay.
+     *
+     * @return the field count, three
+     */
+    public int size() {
+        return 3;
+    }
+
+    /**
+     * Gets the field for a specific index in the chronology specified.
+     * <p>
+     * This method must not use any instance variables.
+     *
+     * @param index  the index to retrieve
+     * @param chrono  the chronology to use
+     * @return the field
+     */
+    protected DateTimeField getField(int index, Chronology chrono) {
+        switch (index) {
+            case YEAR:
+                return chrono.year();
+            case DAY_OF_YEAR:
+                return chrono.dayOfYear();
+            case MILLIS_OF_DAY:
+                return chrono.millisOfDay();
+            default:
+                throw new IndexOutOfBoundsException("Invalid index: " + index);
+        }
+    }
+
+    /**
+     * Gets the value of the field at the specifed index.
+     * <p>
+     * This method is required to support the <code>ReadablePartial</code>
+     * interface. The supported fields are Year, DayOfYear and MillisOfDay.
+     *
+     * @param index  the index, zero to two
+     * @return the value
+     * @throws IndexOutOfBoundsException if the index is invalid
+     */
+    public int getValue(int index) {
+        switch (index) {
+            case YEAR:
+                return getChronology().year().get(getLocalMillis());
+            case DAY_OF_YEAR:
+                return getChronology().dayOfYear().get(getLocalMillis());
+            case MILLIS_OF_DAY:
+                return getChronology().millisOfDay().get(getLocalMillis());
+            default:
+                throw new IndexOutOfBoundsException("Invalid index: " + index);
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Get the value of one of the fields of a datetime.
+     * <p>
+     * This method gets the value of the specified field.
+     * For example:
+     * <pre>
+     * DateTime dt = new DateTime();
+     * int year = dt.get(DateTimeFieldType.year());
+     * </pre>
+     *
+     * @param type  a field type, usually obtained from DateTimeFieldType, not null
+     * @return the value of that field
+     * @throws IllegalArgumentException if the field type is null
+     */
+    public int get(DateTimeFieldType type) {
+        if (type == null) {
+            throw new IllegalArgumentException("The DateTimeFieldType must not be null");
+        }
+        return type.getField(getChronology()).get(getLocalMillis());
+    }
+
+    /**
+     * Checks if the field type specified is supported by this
+     * local datetime and chronology.
+     * This can be used to avoid exceptions in {@link #get(DateTimeFieldType)}.
+     *
+     * @param type  a field type, usually obtained from DateTimeFieldType
+     * @return true if the field type is supported
+     */
+    public boolean isSupported(DateTimeFieldType type) {
+        if (type == null) {
+            return false;
+        }
+        return type.getField(getChronology()).isSupported();
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the milliseconds of the datetime instant from the Java epoch
+     * of 1970-01-01T00:00:00 (not fixed to any specific time zone).
+     * 
+     * @return the number of milliseconds since 1970-01-01T00:00:00
+     */
+    long getLocalMillis() {
+        return iLocalMillis;
+    }
+
+    /**
+     * Gets the chronology of the datetime.
+     * 
+     * @return the Chronology that the datetime is using
+     */
+    public Chronology getChronology() {
+        return iChronology;
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Get this object as a DateTime using the default zone.
+     * 
+     * @return <code>this</code>
+     */
+    public DateTime toDateTimeDefaultZone() {
+        return toDateTime((DateTimeZone) null);
+    }
+
+    /**
+     * Get this object as a DateTime using the specified zone.
+     * 
+     * @param zone time zone to apply, or default if null
+     * @return a DateTime using the same millis
+     */
+    public DateTime toDateTime(DateTimeZone zone) {
+        zone = DateTimeUtils.getZone(zone);
+        Chronology chrono = iChronology.withZone(zone);
+        return new DateTime(getLocalMillis(), chrono);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Converts this object to a LocalDate with the same date and chronology.
+     * 
+     * @return a LocalDate with the same date and chronology
+     */
+    public LocalDate getDate() {
+        return new LocalDate(
+                getYear(), getMonthOfYear(), getDayOfMonth(), getChronology());
+    }
+
+//    /**
+//     * Converts this object to a LocalTime with the same time and chronology.
+//     * 
+//     * @return a LocalTime with the same time and chronology
+//     */
+//    public LocalTime getTime() {
+//        return new LocalTime(
+//                getHourOfDay(), getMinuteOfHour(),
+//                getSecondOfMinute(), getMillisOfSecond(), getChronology());
+//    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets a copy of this datetime with different local millis.
+     * <p>
+     * The returned object will be a new instance of the same type.
+     * Only the millis will change, the chronology is kept.
+     * The returned object will be either be a new instance or <code>this</code>.
+     *
+     * @param newMillis  the new millis, from 1970-01-01T00:00:00
+     * @return a copy of this datetime with different millis
+     */
+    LocalDateTime withLocalMillis(long newMillis) {
+        return (newMillis == getLocalMillis() ? this : new LocalDateTime(newMillis, getChronology()));
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets a copy of this datetime with the specified date, retaining the time fields.
+     * <p>
+     * If the date is already the date passed in, then <code>this</code> is returned.
+     * <p>
+     * To set a single field use the properties, for example:
+     * <pre>
+     * DateTime set = dt.monthOfYear().setCopy(6);
+     * </pre>
+     *
+     * @param year  the new year value
+     * @param monthOfYear  the new monthOfYear value
+     * @param dayOfMonth  the new dayOfMonth value
+     * @return a copy of this datetime with a different date
+     * @throws IllegalArgumentException if any value if invalid
+     */
+    public LocalDateTime withDate(int year, int monthOfYear, int dayOfMonth) {
+        Chronology chrono = getChronology();
+        long instant = getLocalMillis();
+        instant = chrono.year().set(instant, year);
+        instant = chrono.monthOfYear().set(instant, monthOfYear);
+        instant = chrono.dayOfMonth().set(instant, dayOfMonth);
+        return withLocalMillis(instant);
+    }
+
+    /**
+     * Gets a copy of this datetime with the specified time, retaining the date fields.
+     * <p>
+     * If the time is already the time passed in, then <code>this</code> is returned.
+     * <p>
+     * To set a single field use the properties, for example:
+     * <pre>
+     * LocalDateTime set = dt.hourOfDay().setCopy(6);
+     * </pre>
+     *
+     * @param hourOfDay  the hour of the day
+     * @param minuteOfHour  the minute of the hour
+     * @param secondOfMinute  the second of the minute
+     * @param millisOfSecond  the millisecond of the second
+     * @return a copy of this datetime with a different time
+     * @throws IllegalArgumentException if any value if invalid
+     */
+    public LocalDateTime withTime(int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond) {
+        Chronology chrono = getChronology();
+        long instant = getLocalMillis();
+        instant = chrono.hourOfDay().set(instant, hourOfDay);
+        instant = chrono.minuteOfHour().set(instant, minuteOfHour);
+        instant = chrono.secondOfMinute().set(instant, secondOfMinute);
+        instant = chrono.millisOfSecond().set(instant, millisOfSecond);
+        return withLocalMillis(instant);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets a copy of this datetime with the partial set of fields replacing those
+     * from this instance.
+     * <p>
+     * For example, if the partial is a <code>TimeOfDay</code> then the time fields
+     * would be changed in the returned instance.
+     * If the partial is null, then <code>this</code> is returned.
+     *
+     * @param partial  the partial set of fields to apply to this datetime, null ignored
+     * @return a copy of this datetime with a different set of fields
+     * @throws IllegalArgumentException if any value is invalid
+     */
+    public LocalDateTime withFields(ReadablePartial partial) {
+        if (partial == null) {
+            return this;
+        }
+        return withLocalMillis(getChronology().set(partial, getLocalMillis()));
+    }
+
+    /**
+     * Gets a copy of this datetime with the specified field set to a new value.
+     * <p>
+     * For example, if the field type is <code>hourOfDay</code> then the hour of day
+     * field would be changed in the returned instance.
+     * If the field type is null, then <code>this</code> is returned.
+     * <p>
+     * These three lines are equivalent:
+     * <pre>
+     * LocalDateTime updated = dt.withField(DateTimeFieldType.dayOfMonth(), 6);
+     * LocalDateTime updated = dt.dayOfMonth().setCopy(6);
+     * LocalDateTime updated = dt.property(DateTimeFieldType.dayOfMonth()).setCopy(6);
+     * </pre>
+     *
+     * @param fieldType  the field type to set, not null
+     * @param value  the value to set
+     * @return a copy of this datetime with the field set
+     * @throws IllegalArgumentException if the value is null or invalid
+     */
+    public LocalDateTime withField(DateTimeFieldType fieldType, int value) {
+        if (fieldType == null) {
+            throw new IllegalArgumentException("Field must not be null");
+        }
+        long instant = fieldType.getField(getChronology()).set(getLocalMillis(), value);
+        return withLocalMillis(instant);
+    }
+
+    /**
+     * Gets a copy of this datetime with the value of the specified field increased.
+     * <p>
+     * If the addition is zero or the field is null, then <code>this</code> is returned.
+     * <p>
+     * These three lines are equivalent:
+     * <pre>
+     * LocalDateTime added = dt.withFieldAdded(DurationFieldType.years(), 6);
+     * LocalDateTime added = dt.plusYears(6);
+     * LocalDateTime added = dt.plus(Period.years(6));
+     * </pre>
+     * 
+     * @param fieldType  the field type to add to, not null
+     * @param amount  the amount to add
+     * @return a copy of this datetime with the field updated
+     * @throws IllegalArgumentException if the value is null or invalid
+     * @throws ArithmeticException if the new datetime exceeds the capacity of a long
+     */
+    public LocalDateTime withFieldAdded(DurationFieldType fieldType, int amount) {
+        if (fieldType == null) {
+            throw new IllegalArgumentException("Field must not be null");
+        }
+        if (amount == 0) {
+            return this;
+        }
+        long instant = fieldType.getField(getChronology()).add(getLocalMillis(), amount);
+        return withLocalMillis(instant);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets a copy of this datetime with the specified duration added.
+     * <p>
+     * If the addition is zero, then <code>this</code> is returned.
+     * 
+     * @param durationToAdd  the duration to add to this one, null means zero
+     * @param scalar  the amount of times to add, such as -1 to subtract once
+     * @return a copy of this datetime with the duration added
+     * @throws ArithmeticException if the new datetime exceeds the capacity of a long
+     */
+    public LocalDateTime withDurationAdded(ReadableDuration durationToAdd, int scalar) {
+        if (durationToAdd == null || scalar == 0) {
+            return this;
+        }
+        long instant = getChronology().add(getLocalMillis(), durationToAdd.getMillis(), scalar);
+        return withLocalMillis(instant);
+    }
+
+    /**
+     * Gets a copy of this datetime with the specified period added.
+     * <p>
+     * If the addition is zero, then <code>this</code> is returned.
+     * <p>
+     * This method is typically used to add multiple copies of complex
+     * period instances. Adding one field is best achieved using methods
+     * like {@link #withFieldAdded(DurationFieldType, int)}
+     * or {@link #plusYears(int)}.
+     * 
+     * @param period  the period to add to this one, null means zero
+     * @param scalar  the amount of times to add, such as -1 to subtract once
+     * @return a copy of this datetime with the period added
+     * @throws ArithmeticException if the new datetime exceeds the capacity of a long
+     */
+    public LocalDateTime withPeriodAdded(ReadablePeriod period, int scalar) {
+        if (period == null || scalar == 0) {
+            return this;
+        }
+        long instant = getChronology().add(period, getLocalMillis(), scalar);
+        return withLocalMillis(instant);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets a copy of this datetime with the specified duration added.
+     * <p>
+     * If the amount is zero or null, then <code>this</code> is returned.
+     * 
+     * @param duration  the duration to add to this one, null means zero
+     * @return a copy of this datetime with the duration added
+     * @throws ArithmeticException if the new datetime exceeds the capacity of a long
+     */
+    public LocalDateTime plus(ReadableDuration duration) {
+        return withDurationAdded(duration, 1);
+    }
+
+    /**
+     * Gets a copy of this datetime with the specified period added.
+     * <p>
+     * If the amount is zero or null, then <code>this</code> is returned.
+     * <p>
+     * This method is typically used to add complex period instances.
+     * Adding one field is best achieved using methods
+     * like {@link #plusYears(int)}.
+     * 
+     * @param period  the duration to add to this one, null means zero
+     * @return a copy of this datetime with the period added
+     * @throws ArithmeticException if the new datetime exceeds the capacity of a long
+     */
+    public LocalDateTime plus(ReadablePeriod period) {
+        return withPeriodAdded(period, 1);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Returns a new datetime plus the specified number of years.
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * LocalDateTime added = dt.plusYears(6);
+     * LocalDateTime added = dt.plus(Period.years(6));
+     * LocalDateTime added = dt.withFieldAdded(DurationFieldType.years(), 6);
+     * </pre>
+     *
+     * @param years  the amount of years to add, may be negative
+     * @return the new datetime plus the increased years
+     */
+    public LocalDateTime plusYears(int years) {
+        if (years == 0) {
+            return this;
+        }
+        long instant = getChronology().years().add(getLocalMillis(), years);
+        return withLocalMillis(instant);
+    }
+
+    /**
+     * Returns a new datetime plus the specified number of months.
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * LocalDateTime added = dt.plusMonths(6);
+     * LocalDateTime added = dt.plus(Period.months(6));
+     * LocalDateTime added = dt.withFieldAdded(DurationFieldType.months(), 6);
+     * </pre>
+     *
+     * @param months  the amount of months to add, may be negative
+     * @return the new datetime plus the increased months
+     */
+    public LocalDateTime plusMonths(int months) {
+        if (months == 0) {
+            return this;
+        }
+        long instant = getChronology().months().add(getLocalMillis(), months);
+        return withLocalMillis(instant);
+    }
+
+    /**
+     * Returns a new datetime plus the specified number of weeks.
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * LocalDateTime added = dt.plusWeeks(6);
+     * LocalDateTime added = dt.plus(Period.weeks(6));
+     * LocalDateTime added = dt.withFieldAdded(DurationFieldType.weeks(), 6);
+     * </pre>
+     *
+     * @param weeks  the amount of weeks to add, may be negative
+     * @return the new datetime plus the increased weeks
+     */
+    public LocalDateTime plusWeeks(int weeks) {
+        if (weeks == 0) {
+            return this;
+        }
+        long instant = getChronology().weeks().add(getLocalMillis(), weeks);
+        return withLocalMillis(instant);
+    }
+
+    /**
+     * Returns a new datetime plus the specified number of days.
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * LocalDateTime added = dt.plusDays(6);
+     * LocalDateTime added = dt.plus(Period.days(6));
+     * LocalDateTime added = dt.withFieldAdded(DurationFieldType.days(), 6);
+     * </pre>
+     *
+     * @param days  the amount of days to add, may be negative
+     * @return the new datetime plus the increased days
+     */
+    public LocalDateTime plusDays(int days) {
+        if (days == 0) {
+            return this;
+        }
+        long instant = getChronology().days().add(getLocalMillis(), days);
+        return withLocalMillis(instant);
+    }
+
+    /**
+     * Returns a new datetime plus the specified number of hours.
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * LocalDateTime added = dt.plusHours(6);
+     * LocalDateTime added = dt.plus(Period.hours(6));
+     * LocalDateTime added = dt.withFieldAdded(DurationFieldType.hours(), 6);
+     * </pre>
+     *
+     * @param hours  the amount of hours to add, may be negative
+     * @return the new datetime plus the increased hours
+     */
+    public LocalDateTime plusHours(int hours) {
+        if (hours == 0) {
+            return this;
+        }
+        long instant = getChronology().hours().add(getLocalMillis(), hours);
+        return withLocalMillis(instant);
+    }
+
+    /**
+     * Returns a new datetime plus the specified number of minutes.
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * LocalDateTime added = dt.plusMinutes(6);
+     * LocalDateTime added = dt.plus(Period.minutes(6));
+     * LocalDateTime added = dt.withFieldAdded(DurationFieldType.minutes(), 6);
+     * </pre>
+     *
+     * @param minutes  the amount of minutes to add, may be negative
+     * @return the new datetime plus the increased minutes
+     */
+    public LocalDateTime plusMinutes(int minutes) {
+        if (minutes == 0) {
+            return this;
+        }
+        long instant = getChronology().minutes().add(getLocalMillis(), minutes);
+        return withLocalMillis(instant);
+    }
+
+    /**
+     * Returns a new datetime plus the specified number of seconds.
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * LocalDateTime added = dt.plusSeconds(6);
+     * LocalDateTime added = dt.plus(Period.seconds(6));
+     * LocalDateTime added = dt.withFieldAdded(DurationFieldType.seconds(), 6);
+     * </pre>
+     *
+     * @param seconds  the amount of seconds to add, may be negative
+     * @return the new datetime plus the increased seconds
+     */
+    public LocalDateTime plusSeconds(int seconds) {
+        if (seconds == 0) {
+            return this;
+        }
+        long instant = getChronology().seconds().add(getLocalMillis(), seconds);
+        return withLocalMillis(instant);
+    }
+
+    /**
+     * Returns a new datetime plus the specified number of millis.
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * LocalDateTime added = dt.plusMillis(6);
+     * LocalDateTime added = dt.plus(Period.millis(6));
+     * LocalDateTime added = dt.withFieldAdded(DurationFieldType.millis(), 6);
+     * </pre>
+     *
+     * @param millis  the amount of millis to add, may be negative
+     * @return the new datetime plus the increased millis
+     */
+    public LocalDateTime plusMillis(int millis) {
+        if (millis == 0) {
+            return this;
+        }
+        long instant = getChronology().millis().add(getLocalMillis(), millis);
+        return withLocalMillis(instant);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets a copy of this datetime with the specified duration take away.
+     * <p>
+     * If the amount is zero or null, then <code>this</code> is returned.
+     * 
+     * @param duration  the duration to reduce this instant by
+     * @return a copy of this datetime with the duration taken away
+     * @throws ArithmeticException if the new datetime exceeds the capacity of a long
+     */
+    public LocalDateTime minus(ReadableDuration duration) {
+        return withDurationAdded(duration, -1);
+    }
+
+    /**
+     * Gets a copy of this datetime with the specified period take away.
+     * <p>
+     * If the amount is zero or null, then <code>this</code> is returned.
+     * <p>
+     * This method is typically used to subtract complex period instances.
+     * Subtracting one field is best achieved using methods
+     * like {@link #minusYears(int)}.
+     * 
+     * @param period  the period to reduce this instant by
+     * @return a copy of this datetime with the period taken away
+     * @throws ArithmeticException if the new datetime exceeds the capacity of a long
+     */
+    public LocalDateTime minus(ReadablePeriod period) {
+        return withPeriodAdded(period, -1);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Returns a new datetime minus the specified number of years.
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * LocalDateTime subtracted = dt.minusYears(6);
+     * LocalDateTime subtracted = dt.minus(Period.years(6));
+     * LocalDateTime subtracted = dt.withFieldAdded(DurationFieldType.years(), -6);
+     * </pre>
+     *
+     * @param years  the amount of years to subtract, may be negative
+     * @return the new datetime minus the increased years
+     */
+    public LocalDateTime minusYears(int years) {
+        if (years == 0) {
+            return this;
+        }
+        long instant = getChronology().years().subtract(getLocalMillis(), years);
+        return withLocalMillis(instant);
+    }
+
+    /**
+     * Returns a new datetime minus the specified number of months.
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * LocalDateTime subtracted = dt.minusMonths(6);
+     * LocalDateTime subtracted = dt.minus(Period.months(6));
+     * LocalDateTime subtracted = dt.withFieldAdded(DurationFieldType.months(), -6);
+     * </pre>
+     *
+     * @param months  the amount of months to subtract, may be negative
+     * @return the new datetime minus the increased months
+     */
+    public LocalDateTime minusMonths(int months) {
+        if (months == 0) {
+            return this;
+        }
+        long instant = getChronology().months().subtract(getLocalMillis(), months);
+        return withLocalMillis(instant);
+    }
+
+    /**
+     * Returns a new datetime minus the specified number of weeks.
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * LocalDateTime subtracted = dt.minusWeeks(6);
+     * LocalDateTime subtracted = dt.minus(Period.weeks(6));
+     * LocalDateTime subtracted = dt.withFieldAdded(DurationFieldType.weeks(), -6);
+     * </pre>
+     *
+     * @param weeks  the amount of weeks to subtract, may be negative
+     * @return the new datetime minus the increased weeks
+     */
+    public LocalDateTime minusWeeks(int weeks) {
+        if (weeks == 0) {
+            return this;
+        }
+        long instant = getChronology().weeks().subtract(getLocalMillis(), weeks);
+        return withLocalMillis(instant);
+    }
+
+    /**
+     * Returns a new datetime minus the specified number of days.
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * LocalDateTime subtracted = dt.minusDays(6);
+     * LocalDateTime subtracted = dt.minus(Period.days(6));
+     * LocalDateTime subtracted = dt.withFieldAdded(DurationFieldType.days(), -6);
+     * </pre>
+     *
+     * @param days  the amount of days to subtract, may be negative
+     * @return the new datetime minus the increased days
+     */
+    public LocalDateTime minusDays(int days) {
+        if (days == 0) {
+            return this;
+        }
+        long instant = getChronology().days().subtract(getLocalMillis(), days);
+        return withLocalMillis(instant);
+    }
+
+    /**
+     * Returns a new datetime minus the specified number of hours.
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * LocalDateTime subtracted = dt.minusHours(6);
+     * LocalDateTime subtracted = dt.minus(Period.hours(6));
+     * LocalDateTime subtracted = dt.withFieldAdded(DurationFieldType.hours(), -6);
+     * </pre>
+     *
+     * @param hours  the amount of hours to subtract, may be negative
+     * @return the new datetime minus the increased hours
+     */
+    public LocalDateTime minusHours(int hours) {
+        if (hours == 0) {
+            return this;
+        }
+        long instant = getChronology().hours().subtract(getLocalMillis(), hours);
+        return withLocalMillis(instant);
+    }
+
+    /**
+     * Returns a new datetime minus the specified number of minutes.
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * LocalDateTime subtracted = dt.minusMinutes(6);
+     * LocalDateTime subtracted = dt.minus(Period.minutes(6));
+     * LocalDateTime subtracted = dt.withFieldAdded(DurationFieldType.minutes(), -6);
+     * </pre>
+     *
+     * @param minutes  the amount of minutes to subtract, may be negative
+     * @return the new datetime minus the increased minutes
+     */
+    public LocalDateTime minusMinutes(int minutes) {
+        if (minutes == 0) {
+            return this;
+        }
+        long instant = getChronology().minutes().subtract(getLocalMillis(), minutes);
+        return withLocalMillis(instant);
+    }
+
+    /**
+     * Returns a new datetime minus the specified number of seconds.
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * LocalDateTime subtracted = dt.minusSeconds(6);
+     * LocalDateTime subtracted = dt.minus(Period.seconds(6));
+     * LocalDateTime subtracted = dt.withFieldAdded(DurationFieldType.seconds(), -6);
+     * </pre>
+     *
+     * @param seconds  the amount of seconds to subtract, may be negative
+     * @return the new datetime minus the increased seconds
+     */
+    public LocalDateTime minusSeconds(int seconds) {
+        if (seconds == 0) {
+            return this;
+        }
+        long instant = getChronology().seconds().subtract(getLocalMillis(), seconds);
+        return withLocalMillis(instant);
+    }
+
+    /**
+     * Returns a new datetime minus the specified number of millis.
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * LocalDateTime subtracted = dt.minusMillis(6);
+     * LocalDateTime subtracted = dt.minus(Period.millis(6));
+     * LocalDateTime subtracted = dt.withFieldAdded(DurationFieldType.millis(), -6);
+     * </pre>
+     *
+     * @param millis  the amount of millis to subtract, may be negative
+     * @return the new datetime minus the increased millis
+     */
+    public LocalDateTime minusMillis(int millis) {
+        if (millis == 0) {
+            return this;
+        }
+        long instant = getChronology().millis().subtract(getLocalMillis(), millis);
+        return withLocalMillis(instant);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the property object for the specified type, which contains many useful methods.
+     *
+     * @param type  the field type to get the chronology for
+     * @return the property object
+     * @throws IllegalArgumentException if the field is null or unsupported
+     */
+    public Property property(DateTimeFieldType type) {
+        if (type == null) {
+            throw new IllegalArgumentException("The DateTimeFieldType must not be null");
+        }
+        DateTimeField field = type.getField(getChronology());
+        if (field.isSupported() == false) {
+            throw new IllegalArgumentException("Field '" + type + "' is not supported");
+        }
+        return new Property(this, field);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Get the era field value.
+     * 
+     * @return the era
+     */
+    public int getEra() {
+        return getChronology().era().get(getLocalMillis());
+    }
+
+    /**
+     * Get the year of era field value.
+     * 
+     * @return the year of era
+     */
+    public int getCenturyOfEra() {
+        return getChronology().centuryOfEra().get(getLocalMillis());
+    }
+
+    /**
+     * Get the year of era field value.
+     * 
+     * @return the year of era
+     */
+    public int getYearOfEra() {
+        return getChronology().yearOfEra().get(getLocalMillis());
+    }
+
+    /**
+     * Get the year of century field value.
+     * 
+     * @return the year of century
+     */
+    public int getYearOfCentury() {
+        return getChronology().yearOfCentury().get(getLocalMillis());
+    }
+
+    /**
+     * Get the year field value.
+     * 
+     * @return the year
+     */
+    public int getYear() {
+        return getChronology().year().get(getLocalMillis());
+    }
+
+    /**
+     * Get the weekyear field value.
+     * 
+     * @return the year of a week based year
+     */
+    public int getWeekyear() {
+        return getChronology().weekyear().get(getLocalMillis());
+    }
+
+    /**
+     * Get the month of year field value.
+     * 
+     * @return the month of year
+     */
+    public int getMonthOfYear() {
+        return getChronology().monthOfYear().get(getLocalMillis());
+    }
+
+    /**
+     * Get the week of weekyear field value.
+     * 
+     * @return the week of a week based year
+     */
+    public int getWeekOfWeekyear() {
+        return getChronology().weekOfWeekyear().get(getLocalMillis());
+    }
+
+    /**
+     * Get the day of year field value.
+     * 
+     * @return the day of year
+     */
+    public int getDayOfYear() {
+        return getChronology().dayOfYear().get(getLocalMillis());
+    }
+
+    /**
+     * Get the day of month field value.
+     * <p>
+     * The values for the day of month are defined in {@link org.joda.time.DateTimeConstants}.
+     * 
+     * @return the day of month
+     */
+    public int getDayOfMonth() {
+        return getChronology().dayOfMonth().get(getLocalMillis());
+    }
+
+    /**
+     * Get the day of week field value.
+     * <p>
+     * The values for the day of week are defined in {@link org.joda.time.DateTimeConstants}.
+     * 
+     * @return the day of week
+     */
+    public int getDayOfWeek() {
+        return getChronology().dayOfWeek().get(getLocalMillis());
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Get the hour of day field value.
+     *
+     * @return the hour of day
+     */
+    public int getHourOfDay() {
+        return getChronology().hourOfDay().get(getLocalMillis());
+    }
+
+    /**
+     * Get the minute of hour field value.
+     *
+     * @return the minute of hour
+     */
+    public int getMinuteOfHour() {
+        return getChronology().minuteOfHour().get(getLocalMillis());
+    }
+
+    /**
+     * Get the second of minute field value.
+     *
+     * @return the second of minute
+     */
+    public int getSecondOfMinute() {
+        return getChronology().secondOfMinute().get(getLocalMillis());
+    }
+
+    /**
+     * Get the millis of second field value.
+     *
+     * @return the millis of second
+     */
+    public int getMillisOfSecond() {
+        return getChronology().millisOfSecond().get(getLocalMillis());
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Get the era property.
+     * 
+     * @return the era property
+     */
+    public Property era() {
+        return new Property(this, getChronology().era());
+    }
+
+    /**
+     * Get the century of era property.
+     * 
+     * @return the year of era property
+     */
+    public Property centuryOfEra() {
+        return new Property(this, getChronology().centuryOfEra());
+    }
+
+    /**
+     * Get the year of century property.
+     * 
+     * @return the year of era property
+     */
+    public Property yearOfCentury() {
+        return new Property(this, getChronology().yearOfCentury());
+    }
+
+    /**
+     * Get the year of era property.
+     * 
+     * @return the year of era property
+     */
+    public Property yearOfEra() {
+        return new Property(this, getChronology().yearOfEra());
+    }
+
+    /**
+     * Get the year property.
+     * 
+     * @return the year property
+     */
+    public Property year() {
+        return new Property(this, getChronology().year());
+    }
+
+    /**
+     * Get the year of a week based year property.
+     * 
+     * @return the year of a week based year property
+     */
+    public Property weekyear() {
+        return new Property(this, getChronology().weekyear());
+    }
+
+    /**
+     * Get the month of year property.
+     * 
+     * @return the month of year property
+     */
+    public Property monthOfYear() {
+        return new Property(this, getChronology().monthOfYear());
+    }
+
+    /**
+     * Get the week of a week based year property.
+     * 
+     * @return the week of a week based year property
+     */
+    public Property weekOfWeekyear() {
+        return new Property(this, getChronology().weekOfWeekyear());
+    }
+
+    /**
+     * Get the day of year property.
+     * 
+     * @return the day of year property
+     */
+    public Property dayOfYear() {
+        return new Property(this, getChronology().dayOfYear());
+    }
+
+    /**
+     * Get the day of month property.
+     * 
+     * @return the day of month property
+     */
+    public Property dayOfMonth() {
+        return new Property(this, getChronology().dayOfMonth());
+    }
+
+    /**
+     * Get the day of week property.
+     * 
+     * @return the day of week property
+     */
+    public Property dayOfWeek() {
+        return new Property(this, getChronology().dayOfWeek());
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Get the hour of day field property
+     * 
+     * @return the hour of day property
+     */
+    public Property hourOfDay() {
+        return new Property(this, getChronology().hourOfDay());
+    }
+
+    /**
+     * Get the minute of hour field property
+     * 
+     * @return the minute of hour property
+     */
+    public Property minuteOfHour() {
+        return new Property(this, getChronology().minuteOfHour());
+    }
+
+    /**
+     * Get the second of minute field property
+     * 
+     * @return the second of minute property
+     */
+    public Property secondOfMinute() {
+        return new Property(this, getChronology().secondOfMinute());
+    }
+
+    /**
+     * Get the millis of second property
+     * 
+     * @return the millis of second property
+     */
+    public Property millisOfSecond() {
+        return new Property(this, getChronology().millisOfSecond());
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Output the date time in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ).
+     * 
+     * @return ISO8601 time formatted string.
+     */
+    public String toString() {
+        return ISODateTimeFormat.dateTime().print(this);
+    }
+
+    /**
+     * Output the date using the specified format pattern.
+     *
+     * @param pattern  the pattern specification, null means use <code>toString</code>
+     * @see org.joda.time.format.DateTimeFormat
+     */
+    public String toString(String pattern) {
+        if (pattern == null) {
+            return toString();
+        }
+        return DateTimeFormat.forPattern(pattern).print(this);
+    }
+
+    /**
+     * Output the date using the specified format pattern.
+     *
+     * @param pattern  the pattern specification, null means use <code>toString</code>
+     * @param locale  Locale to use, null means default
+     * @see org.joda.time.format.DateTimeFormat
+     */
+    public String toString(String pattern, Locale locale) throws IllegalArgumentException {
+        if (pattern == null) {
+            return toString();
+        }
+        return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * LocalDateTime.Property binds a LocalDateTime to a DateTimeField allowing
+     * powerful datetime functionality to be easily accessed.
+     * <p>
+     * The simplest use of this class is as an alternative get method, here used to
+     * get the year '1972' (as an int) and the month 'December' (as a String).
+     * <pre>
+     * LocalDateTime dt = new LocalDateTime(1972, 12, 3, 0, 0);
+     * int year = dt.year().get();
+     * String monthStr = dt.month().getAsText();
+     * </pre>
+     * <p>
+     * Methods are also provided that allow date modification. These return new instances
+     * of DateTime - they do not modify the original. The example below yields two
+     * independent immutable date objects 20 years apart.
+     * <pre>
+     * DateTime dt = new DateTime(1972, 12, 3, 0, 0, 0, 0);
+     * DateTime dt1920 = dt.year().setCopy(1920);
+     * <p>
+     * LocalDateTime.Propery itself is thread-safe and immutable, as well as the
+     * LocalDateTime being operated on.
+     *
+     * @author Stephen Colebourne
+     * @author Brian S O'Neill
+     * @since 1.2
+     */
+    public static final class Property extends AbstractReadableInstantFieldProperty {
+        
+        /** Serialization version */
+        private static final long serialVersionUID = -358138762846288L;
+        
+        /** The instant this property is working against */
+        private transient LocalDateTime iInstant;
+        /** The field this property is working against */
+        private transient DateTimeField iField;
+        
+        /**
+         * Constructor.
+         * 
+         * @param instant  the instant to set
+         * @param field  the field to use
+         */
+        Property(LocalDateTime instant, DateTimeField field) {
+            super();
+            iInstant = instant;
+            iField = field;
+        }
+        
+        /**
+         * Writes the property in a safe serialization format.
+         */
+        private void writeObject(ObjectOutputStream oos) throws IOException {
+            oos.writeObject(iInstant);
+            oos.writeObject(iField.getType());
+        }
+
+        /**
+         * Reads the property from a safe serialization format.
+         */
+        private void readObject(ObjectInputStream oos) throws IOException, ClassNotFoundException {
+            iInstant = (LocalDateTime) oos.readObject();
+            DateTimeFieldType type = (DateTimeFieldType) oos.readObject();
+            iField = type.getField(iInstant.getChronology());
+        }
+
+        //-----------------------------------------------------------------------
+        /**
+         * Gets the field being used.
+         * 
+         * @return the field
+         */
+        public DateTimeField getField() {
+            return iField;
+        }
+        
+        /**
+         * Gets the milliseconds of the datetime that this property is linked to.
+         * 
+         * @return the milliseconds
+         */
+        protected long getMillis() {
+            return iInstant.getLocalMillis();
+        }
+        
+        /**
+         * Gets the datetime being used.
+         * 
+         * @return the datetime
+         */
+        public LocalDateTime getLocalDateTime() {
+            return iInstant;
+        }
+        
+        //-----------------------------------------------------------------------
+        /**
+         * Adds to this field in a copy of this LocalDateTime.
+         * <p>
+         * The LocalDateTime attached to this property is unchanged by this call.
+         *
+         * @param value  the value to add to the field in the copy
+         * @return a copy of the LocalDateTime with the field value changed
+         * @throws IllegalArgumentException if the value isn't valid
+         */
+        public LocalDateTime plus(int value) {
+            return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value));
+        }
+        
+        /**
+         * Adds to this field in a copy of this LocalDateTime.
+         * <p>
+         * The LocalDateTime attached to this property is unchanged by this call.
+         *
+         * @param value  the value to add to the field in the copy
+         * @return a copy of the LocalDateTime with the field value changed
+         * @throws IllegalArgumentException if the value isn't valid
+         */
+        public LocalDateTime plus(long value) {
+            return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value));
+        }
+        
+        /**
+         * Adds to this field, possibly wrapped, in a copy of this LocalDateTime.
+         * A wrapped operation only changes this field.
+         * Thus 31st January plusWrapField one day goes to the 1st January.
+         * <p>
+         * The LocalDateTime attached to this property is unchanged by this call.
+         *
+         * @param value  the value to add to the field in the copy
+         * @return a copy of the LocalDateTime with the field value changed
+         * @throws IllegalArgumentException if the value isn't valid
+         */
+        public LocalDateTime plusWrapField(int value) {
+            return iInstant.withLocalMillis(iField.addWrapField(iInstant.getLocalMillis(), value));
+        }
+        
+        //-----------------------------------------------------------------------
+        /**
+         * Sets this field in a copy of the LocalDateTime.
+         * <p>
+         * The LocalDateTime attached to this property is unchanged by this call.
+         *
+         * @param value  the value to set the field in the copy to
+         * @return a copy of the LocalDateTime with the field value changed
+         * @throws IllegalArgumentException if the value isn't valid
+         */
+        public LocalDateTime withValue(int value) {
+            return iInstant.withLocalMillis(iField.set(iInstant.getLocalMillis(), value));
+        }
+        
+        /**
+         * Sets this field in a copy of the LocalDateTime to a parsed text value.
+         * <p>
+         * The LocalDateTime attached to this property is unchanged by this call.
+         *
+         * @param text  the text value to set
+         * @param locale  optional locale to use for selecting a text symbol
+         * @return a copy of the LocalDateTime with the field value changed
+         * @throws IllegalArgumentException if the text value isn't valid
+         */
+        public LocalDateTime withValue(String text, Locale locale) {
+            return iInstant.withLocalMillis(iField.set(iInstant.getLocalMillis(), text, locale));
+        }
+        
+        /**
+         * Sets this field in a copy of the LocalDateTime to a parsed text value.
+         * <p>
+         * The LocalDateTime attached to this property is unchanged by this call.
+         *
+         * @param text  the text value to set
+         * @return a copy of the LocalDateTime with the field value changed
+         * @throws IllegalArgumentException if the text value isn't valid
+         */
+        public LocalDateTime withValue(String text) {
+            return withValue(text, null);
+        }
+        
+        //-----------------------------------------------------------------------
+        /**
+         * Returns a new LocalDateTime with this field set to the maximum value
+         * for this field.
+         * <p>
+         * This operation is useful for obtaining a LocalDateTime on the last day
+         * of the month, as month lengths vary.
+         * <pre>
+         * LocalDateTime lastDayOfMonth = dt.dayOfMonth().withMaximumValue();
+         * </pre>
+         * <p>
+         * The LocalDateTime attached to this property is unchanged by this call.
+         *
+         * @return a copy of the LocalDateTime with this field set to its maximum
+         */
+        public LocalDateTime withMaximumValue() {
+            return withValue(getMaximumValue());
+        }
+        
+        /**
+         * Returns a new LocalDateTime with this field set to the minimum value
+         * for this field.
+         * <p>
+         * The LocalDateTime attached to this property is unchanged by this call.
+         *
+         * @return a copy of the LocalDateTime with this field set to its minimum
+         */
+        public LocalDateTime withMinimumValue() {
+            return withValue(getMinimumValue());
+        }
+        
+        //-----------------------------------------------------------------------
+        /**
+         * Rounds to the lowest whole unit of this field on a copy of this
+         * LocalDateTime.
+         * <p>
+         * For example, rounding floor on the hourOfDay field of a LocalDateTime
+         * where the time is 10:30 would result in new LocalDateTime with the
+         * time of 10:00.
+         *
+         * @return a copy of the LocalDateTime with the field value changed
+         */
+        public LocalDateTime withRoundedFloor() {
+            return iInstant.withLocalMillis(iField.roundFloor(iInstant.getLocalMillis()));
+        }
+        
+        /**
+         * Rounds to the highest whole unit of this field on a copy of this
+         * LocalDateTime.
+         * <p>
+         * For example, rounding floor on the hourOfDay field of a LocalDateTime
+         * where the time is 10:30 would result in new LocalDateTime with the
+         * time of 11:00.
+         *
+         * @return a copy of the LocalDateTime with the field value changed
+         */
+        public LocalDateTime withRoundedCeiling() {
+            return iInstant.withLocalMillis(iField.roundCeiling(iInstant.getLocalMillis()));
+        }
+        
+        /**
+         * Rounds to the nearest whole unit of this field on a copy of this
+         * LocalDateTime, favoring the floor if halfway.
+         *
+         * @return a copy of the LocalDateTime with the field value changed
+         */
+        public LocalDateTime withRoundedHalfFloor() {
+            return iInstant.withLocalMillis(iField.roundHalfFloor(iInstant.getLocalMillis()));
+        }
+        
+        /**
+         * Rounds to the nearest whole unit of this field on a copy of this
+         * LocalDateTime, favoring the ceiling if halfway.
+         *
+         * @return a copy of the LocalDateTime with the field value changed
+         */
+        public LocalDateTime withRoundedHalfCeiling() {
+            return iInstant.withLocalMillis(iField.roundHalfCeiling(iInstant.getLocalMillis()));
+        }
+        
+        /**
+         * Rounds to the nearest whole unit of this field on a copy of this
+         * LocalDateTime.  If halfway, the ceiling is favored over the floor
+         * only if it makes this field's value even.
+         *
+         * @return a copy of the LocalDateTime with the field value changed
+         */
+        public LocalDateTime withRoundedHalfEven() {
+            return iInstant.withLocalMillis(iField.roundHalfEven(iInstant.getLocalMillis()));
+        }
+    }
+
+}

From 2492718480a58f036fd676b7fe0a150ddb8ea7ea Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 17 Jan 2006 23:48:37 +0000
Subject: [PATCH 025/115] First version of LocalTime

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1017 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/java/org/joda/time/LocalTime.java     | 1314 +++++++++++++++++
 1 file changed, 1314 insertions(+)
 create mode 100644 JodaTime/src/java/org/joda/time/LocalTime.java

diff --git a/JodaTime/src/java/org/joda/time/LocalTime.java b/JodaTime/src/java/org/joda/time/LocalTime.java
new file mode 100644
index 000000000..4a444f27a
--- /dev/null
+++ b/JodaTime/src/java/org/joda/time/LocalTime.java
@@ -0,0 +1,1314 @@
+/*
+ *  Copyright 2001-2006 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time;
+
+import java.io.IOException;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+import java.io.Serializable;
+import java.util.Calendar;
+import java.util.Date;
+import java.util.HashSet;
+import java.util.Locale;
+import java.util.Set;
+
+import org.joda.time.base.AbstractPartial;
+import org.joda.time.chrono.ISOChronology;
+import org.joda.time.convert.ConverterManager;
+import org.joda.time.convert.InstantConverter;
+import org.joda.time.field.AbstractReadableInstantFieldProperty;
+import org.joda.time.format.DateTimeFormat;
+import org.joda.time.format.ISODateTimeFormat;
+
+/**
+ * LocalTime is an immutable time class representing a time
+ * without a time zone.
+ * <p>
+ * LocalTime implements the {@link ReadablePartial} interface.
+ * To do this, the interface methods focus on the key fields -
+ * HourOfDay, MinuteOfHour, SecondOfMinute and MillisOfSecond.
+ * However, <b>all</b> time fields may in fact be queried.
+ * <p>
+ * Calculations on LocalTime are performed using a {@link Chronology}.
+ * This chronology will be set internally to be in the UTC time zone
+ * for all calculations.
+ *
+ * <p>Each individual field can be queried in two ways:
+ * <ul>
+ * <li><code>getHourOfDay()</code>
+ * <li><code>hourOfDay().get()</code>
+ * </ul>
+ * The second technique also provides access to other useful methods on the
+ * field:
+ * <ul>
+ * <li>numeric value
+ * <li>text value
+ * <li>short text value
+ * <li>maximum/minimum values
+ * <li>add/subtract
+ * <li>set
+ * <li>rounding
+ * </ul>
+ *
+ * <p>
+ * LocalTime is thread-safe and immutable, provided that the Chronology is as well.
+ * All standard Chronology classes supplied are thread-safe and immutable.
+ *
+ * @author Stephen Colebourne
+ * @since 1.0
+ */
+public final class LocalTime
+        extends AbstractPartial
+        implements ReadablePartial, Serializable {
+
+    /** Serialization lock */
+    private static final long serialVersionUID = -12873158713873L;
+
+    /** The index of the hourOfDay field in the field array */
+    private static final int HOUR_OF_DAY = 0;
+    /** The index of the minuteOfHour field in the field array */
+    private static final int MINUTE_OF_HOUR = 1;
+    /** The index of the secondOfMinute field in the field array */
+    private static final int SECOND_OF_MINUTE = 2;
+    /** The index of the millisOfSecond field in the field array */
+    private static final int MILLIS_OF_SECOND = 3;
+    /** Set of known duration types. */
+    private static final Set TIME_DURATION_TYPES = new HashSet();
+    static {
+        TIME_DURATION_TYPES.add(DurationFieldType.millis());
+        TIME_DURATION_TYPES.add(DurationFieldType.seconds());
+        TIME_DURATION_TYPES.add(DurationFieldType.minutes());
+        TIME_DURATION_TYPES.add(DurationFieldType.hours());
+    }
+
+    /** The local millis from 1970-01-01T00:00:00 */
+    private long iLocalMillis;
+    /** The chronology to use in UTC */
+    private Chronology iChronology;
+
+    //-----------------------------------------------------------------------
+    /**
+     * Constructs an instance set to the current local time evaluated using
+     * ISO chronology in the default zone.
+     * <p>
+     * Once the constructor is completed, the zone is no longer used.
+     */
+    public static LocalTime nowDefaultZone() {
+        return forInstant(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance());
+    }
+
+    /**
+     * Constructs an instance set to the current local time evaluated using
+     * ISO chronology in the specified zone.
+     * <p>
+     * If the specified time zone is null, the default zone is used.
+     * Once the constructor is completed, the zone is no longer used.
+     *
+     * @param zone  the time zone, null means default zone
+     */
+    public static LocalTime now(DateTimeZone zone) {
+        return forInstant(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(zone));
+    }
+
+    /**
+     * Constructs an instance set to the current local time evaluated using
+     * specified chronology and zone.
+     * <p>
+     * If the chronology is null, ISO chronology in the default time zone is used.
+     * Once the constructor is completed, the zone is no longer used.
+     *
+     * @param chronology  the chronology, null means ISOChronology in default zone
+     */
+    public static LocalTime now(Chronology chronology) {
+        return forInstant(DateTimeUtils.currentTimeMillis(), chronology);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Constructs a LocalTime from a <code>java.util.Calendar</code>
+     * using exactly the same field values avoiding any time zone effects.
+     * <p>
+     * Each field is queried from the Calendar and assigned to the LocalTime.
+     * This is useful if you have been using the Calendar as a local time,
+     * ignoing the zone.
+     * <p>
+     * This factory method ignores the type of the calendar and always
+     * creates a LocalTime with ISO chronology. It is expected that you
+     * will only pass in instances of <code>GregorianCalendar</code> however
+     * this is not validated.
+     *
+     * @param calendar  the Calendar to extract fields from
+     * @return the created LocalTime
+     * @throws IllegalArgumentException if the calendar is null
+     * @throws IllegalArgumentException if the date is invalid for the ISO chronology
+     */
+    public static LocalTime forFields(Calendar calendar) {
+        if (calendar == null) {
+            throw new IllegalArgumentException("The calendar must not be null");
+        }
+        return new LocalTime(
+            calendar.get(Calendar.HOUR_OF_DAY),
+            calendar.get(Calendar.MINUTE),
+            calendar.get(Calendar.SECOND),
+            calendar.get(Calendar.MILLISECOND)
+        );
+    }
+
+    /**
+     * Constructs a LocalTime from a <code>java.util.Date</code>
+     * using exactly the same field values avoiding any time zone effects.
+     * <p>
+     * Each field is queried from the Date and assigned to the LocalTime.
+     * This is useful if you have been using the Date as a local time,
+     * ignoing the zone.
+     * <p>
+     * This factory method always creates a LocalTime with ISO chronology.
+     *
+     * @param date  the Date to extract fields from
+     * @return the created LocalTime
+     * @throws IllegalArgumentException if the calendar is null
+     * @throws IllegalArgumentException if the date is invalid for the ISO chronology
+     */
+    public static LocalTime forFields(Date date) {
+        if (date == null) {
+            throw new IllegalArgumentException("The date must not be null");
+        }
+        return new LocalTime(
+            date.getHours(),
+            date.getMinutes(),
+            date.getSeconds(),
+            (int) (date.getTime() % 1000)
+        );
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Constructs an instance set to the local time defined by the specified
+     * instant evaluated using ISO chronology in the default zone.
+     * <p>
+     * Once the constructor is completed, the zone is no longer used.
+     *
+     * @param instant  the milliseconds from 1970-01-01T00:00:00Z
+     */
+    public static LocalTime forInstantDefaultZone(long instant) {
+        return forInstant(instant, ISOChronology.getInstance());
+    }
+
+    /**
+     * Constructs an instance set to the local time defined by the specified
+     * instant evaluated using ISO chronology in the specified zone.
+     * <p>
+     * If the specified time zone is null, the default zone is used.
+     * Once the constructor is completed, the zone is no longer used.
+     *
+     * @param instant  the milliseconds from 1970-01-01T00:00:00Z
+     * @param zone  the time zone, null means default zone
+     */
+    public static LocalTime forInstant(long instant, DateTimeZone zone) {
+        return forInstant(instant, ISOChronology.getInstance(zone));
+    }
+
+    /**
+     * Constructs an instance set to the local time defined by the specified
+     * instant evaluated using the specified chronology.
+     * <p>
+     * If the chronology is null, ISO chronology in the default zone is used.
+     * Once the constructor is completed, the zone is no longer used.
+     *
+     * @param instant  the milliseconds from 1970-01-01T00:00:00Z
+     * @param chronology  the chronology, null means ISOChronology in default zone
+     */
+    public static LocalTime forInstant(long instant, Chronology chronology) {
+        chronology = DateTimeUtils.getChronology(chronology);
+        long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);
+        return new LocalTime(localMillis, chronology.withUTC());
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Constructs an instance from an Object that represents a datetime.
+     * <p>
+     * If the object contains no chronology, <code>ISOChronology</code> is used.
+     * If the object contains no time zone, the default zone is used.
+     * Once the constructor is completed, the zone is no longer used.
+     * <p>
+     * The recognised object types are defined in
+     * {@link org.joda.time.convert.ConverterManager ConverterManager} and
+     * include ReadableInstant, String, Calendar and Date.
+     *
+     * @param instant  the datetime object
+     * @throws IllegalArgumentException if the instant is invalid
+     */
+    public static LocalTime forInstant(Object instant) {
+        return forInstant(instant, (Chronology) null);
+    }
+
+    /**
+     * Constructs an instance from an Object that represents a datetime,
+     * forcing the time zone to that specified.
+     * <p>
+     * If the object contains no chronology, <code>ISOChronology</code> is used.
+     * If the specified time zone is null, the default zone is used.
+     * Once the constructor is completed, the zone is no longer used.
+     * <p>
+     * The recognised object types are defined in
+     * {@link org.joda.time.convert.ConverterManager ConverterManager} and
+     * include ReadableInstant, String, Calendar and Date.
+     *
+     * @param instant  the datetime object
+     * @param zone  the time zone
+     * @throws IllegalArgumentException if the instant is invalid
+     */
+    public static LocalTime forInstant(Object instant, DateTimeZone zone) {
+        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
+        Chronology chrono = converter.getChronology(instant, zone);
+        long millis = converter.getInstantMillis(instant, chrono);
+        chrono = DateTimeUtils.getChronology(chrono);
+        return forInstant(millis, chrono);
+    }
+
+    /**
+     * Constructs an instance from an Object that represents a datetime,
+     * using the specified chronology.
+     * <p>
+     * If the chronology is null, ISO in the default time zone is used.
+     * Once the constructor is completed, the zone is no longer used.
+     * <p>
+     * The recognised object types are defined in
+     * {@link org.joda.time.convert.ConverterManager ConverterManager} and
+     * include ReadableInstant, String, Calendar and Date.
+     *
+     * @param instant  the datetime object
+     * @param chronology  the chronology
+     * @throws IllegalArgumentException if the instant is invalid
+     */
+    public static LocalTime forInstant(Object instant, Chronology chronology) {
+        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
+        Chronology chrono = DateTimeUtils.getChronology(converter.getChronology(instant, chronology));
+        long millis = converter.getInstantMillis(instant, chronology);
+        return forInstant(millis, chrono);
+    }
+
+    /**
+     * Constructs an instance set to the local time defined by the specified
+     * instant evaluated using the specified local (UTC) chronology.
+     *
+     * @param localMillis  the local milliseconds from 1970-01-01T00:00:00
+     * @param chronology  the UTC chronology, not null
+     */
+    LocalTime(long localMillis, Chronology chronology) {
+        super();
+        chronology.millisOfDay().get(localMillis);
+        iLocalMillis = localMillis;
+        iChronology = chronology;
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Constructs an instance set to the specified time
+     * using <code>ISOChronology</code>.
+     *
+     * @param hourOfDay  the hour of the day
+     * @param minuteOfHour  the minute of the hour
+     */
+    public LocalTime(
+            int hourOfDay,
+            int minuteOfHour) {
+        this(hourOfDay, minuteOfHour, 0, 0, ISOChronology.getInstanceUTC());
+    }
+
+    /**
+     * Constructs an instance set to the specified time
+     * using <code>ISOChronology</code>.
+     *
+     * @param hourOfDay  the hour of the day
+     * @param minuteOfHour  the minute of the hour
+     * @param secondOfMinute  the second of the minute
+     */
+    public LocalTime(
+            int hourOfDay,
+            int minuteOfHour,
+            int secondOfMinute) {
+        this(hourOfDay, minuteOfHour, secondOfMinute, 0, ISOChronology.getInstanceUTC());
+    }
+
+    /**
+     * Constructs an instance set to the specified time
+     * using <code>ISOChronology</code>.
+     *
+     * @param hourOfDay  the hour of the day
+     * @param minuteOfHour  the minute of the hour
+     * @param secondOfMinute  the second of the minute
+     * @param millisOfSecond  the millisecond of the second
+     */
+    public LocalTime(
+            int hourOfDay,
+            int minuteOfHour,
+            int secondOfMinute,
+            int millisOfSecond) {
+        this(hourOfDay, minuteOfHour, secondOfMinute,
+                millisOfSecond, ISOChronology.getInstanceUTC());
+    }
+
+    /**
+     * Constructs an instance set to the specified time
+     * using the specified chronology, whose zone is ignored.
+     * <p>
+     * If the chronology is null, <code>ISOChronology</code> is used.
+     *
+     * @param hourOfDay  the hour of the day
+     * @param minuteOfHour  the minute of the hour
+     * @param secondOfMinute  the second of the minute
+     * @param millisOfSecond  the millisecond of the second
+     * @param chronology  the chronology, null means ISOChronology in default zone
+     */
+    public LocalTime(
+            int hourOfDay,
+            int minuteOfHour,
+            int secondOfMinute,
+            int millisOfSecond,
+            Chronology chronology) {
+        super();
+        chronology = DateTimeUtils.getChronology(chronology).withUTC();
+        long instant = chronology.getDateTimeMillis(
+            hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+        iChronology = chronology;
+        iLocalMillis = instant;
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the number of fields in this partial, which is four.
+     * The supported fields are HourOfDay, MinuteOfHour, SecondOfMinute
+     * and MillisOfSecond.
+     *
+     * @return the field count, four
+     */
+    public int size() {
+        return 4;
+    }
+
+    /**
+     * Gets the field for a specific index in the chronology specified.
+     * <p>
+     * This method must not use any instance variables.
+     *
+     * @param index  the index to retrieve
+     * @param chrono  the chronology to use
+     * @return the field
+     */
+    protected DateTimeField getField(int index, Chronology chrono) {
+        switch (index) {
+            case HOUR_OF_DAY:
+                return chrono.hourOfDay();
+            case MINUTE_OF_HOUR:
+                return chrono.minuteOfHour();
+            case SECOND_OF_MINUTE:
+                return chrono.secondOfMinute();
+            case MILLIS_OF_SECOND:
+                return chrono.millisOfSecond();
+            default:
+                throw new IndexOutOfBoundsException("Invalid index: " + index);
+        }
+    }
+
+    /**
+     * Gets the value of the field at the specifed index.
+     * <p>
+     * This method is required to support the <code>ReadablePartial</code>
+     * interface. The supported fields are HourOfDay, MinuteOfHour,
+     * SecondOfMinute and MillisOfSecond.
+     *
+     * @param index  the index, zero to two
+     * @return the value
+     * @throws IndexOutOfBoundsException if the index is invalid
+     */
+    public int getValue(int index) {
+        switch (index) {
+            case HOUR_OF_DAY:
+                return getChronology().hourOfDay().get(getLocalMillis());
+            case MINUTE_OF_HOUR:
+                return getChronology().minuteOfHour().get(getLocalMillis());
+            case SECOND_OF_MINUTE:
+                return getChronology().secondOfMinute().get(getLocalMillis());
+            case MILLIS_OF_SECOND:
+                return getChronology().millisOfSecond().get(getLocalMillis());
+            default:
+                throw new IndexOutOfBoundsException("Invalid index: " + index);
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Get the value of one of the fields of time.
+     * <p>
+     * This method gets the value of the specified field.
+     * For example:
+     * <pre>
+     * DateTime dt = new DateTime();
+     * int hourOfDay = dt.get(DateTimeFieldType.hourOfDay());
+     * </pre>
+     *
+     * @param fieldType  a field type, usually obtained from DateTimeFieldType, not null
+     * @return the value of that field
+     * @throws IllegalArgumentException if the field type is null
+     */
+    public int get(DateTimeFieldType fieldType) {
+        if (fieldType == null) {
+            throw new IllegalArgumentException("The DateTimeFieldType must not be null");
+        }
+        if (isSupported(fieldType) == false) {
+            throw new IllegalArgumentException("Field '" + fieldType + "' is not supported");
+        }
+        return fieldType.getField(getChronology()).get(getLocalMillis());
+    }
+
+    /**
+     * Checks if the field type specified is supported by this
+     * local time and chronology.
+     * This can be used to avoid exceptions in {@link #get(DateTimeFieldType)}.
+     *
+     * @param type  a field type, usually obtained from DateTimeFieldType
+     * @return true if the field type is supported
+     */
+    public boolean isSupported(DateTimeFieldType type) {
+        if (type == null) {
+            return false;
+        }
+        return isSupported(type.getDurationType());
+    }
+
+    /**
+     * Checks if the duration type specified is supported by this
+     * local time and chronology.
+     *
+     * @param type  a duration type, usually obtained from DurationFieldType
+     * @return true if the field type is supported
+     */
+    public boolean isSupported(DurationFieldType type) {
+        if (type == null) {
+            return false;
+        }
+        DurationField field = type.getField(getChronology());
+        if (TIME_DURATION_TYPES.contains(type) ||
+            field.getUnitMillis() < getChronology().days().getUnitMillis()) {
+            return field.isSupported();
+        }
+        return false;
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the local milliseconds from the Java epoch
+     * of 1970-01-01T00:00:00 (not fixed to any specific time zone).
+     * 
+     * @return the number of milliseconds since 1970-01-01T00:00:00
+     */
+    long getLocalMillis() {
+        return iLocalMillis;
+    }
+
+    /**
+     * Gets the chronology of the time.
+     * 
+     * @return the Chronology that the time is using
+     */
+    public Chronology getChronology() {
+        return iChronology;
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets a copy of this LocalTime with different local millis.
+     * <p>
+     * The returned object will be a new instance of the same type.
+     * Only the millis will change, the chronology is kept.
+     * The returned object will be either be a new instance or <code>this</code>.
+     *
+     * @param newMillis  the new millis, from 1970-01-01T00:00:00
+     * @return a copy of this time with different millis
+     */
+    LocalTime withLocalMillis(long newMillis) {
+        return (newMillis == getLocalMillis() ? this : new LocalTime(newMillis, getChronology()));
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets a copy of this LocalTime with the partial set of fields replacing
+     * those from this instance.
+     * <p>
+     * For example, if the partial contains an hour and minute then those two
+     * fields will be changed in the returned instance.
+     * Unsupported fields are ignored.
+     * If the partial is null, then <code>this</code> is returned.
+     *
+     * @param partial  the partial set of fields to apply to this time, null ignored
+     * @return a copy of this time with a different set of fields
+     * @throws IllegalArgumentException if any value is invalid
+     */
+    public LocalTime withFields(ReadablePartial partial) {
+        if (partial == null) {
+            return this;
+        }
+        return withLocalMillis(getChronology().set(partial, getLocalMillis()));
+    }
+
+    /**
+     * Gets a copy of this LocalTime with the specified field set
+     * to a new value.
+     * <p>
+     * For example, if the field type is <code>hourOfDay</code> then the hour of day
+     * field would be changed in the returned instance.
+     * If the field type is null, then <code>this</code> is returned.
+     * <p>
+     * These lines are equivalent:
+     * <pre>
+     * LocalTime updated = dt.withHourOfDay(6);
+     * LocalTime updated = dt.withField(DateTimeFieldType.hourOfDay(), 6);
+     * </pre>
+     *
+     * @param fieldType  the field type to set, not null
+     * @param value  the value to set
+     * @return a copy of this time with the field set
+     * @throws IllegalArgumentException if the value is null or invalid
+     */
+    public LocalTime withField(DateTimeFieldType fieldType, int value) {
+        if (fieldType == null) {
+            throw new IllegalArgumentException("Field must not be null");
+        }
+        if (isSupported(fieldType) == false) {
+            throw new IllegalArgumentException("Field '" + fieldType + "' is not supported");
+        }
+        long instant = fieldType.getField(getChronology()).set(getLocalMillis(), value);
+        return withLocalMillis(instant);
+    }
+
+    /**
+     * Gets a copy of this LocalTime with the value of the specified
+     * field increased.
+     * <p>
+     * If the addition is zero or the field is null, then <code>this</code>
+     * is returned.
+     * <p>
+     * If the addition causes the maximum value of the field to be exceeded,
+     * then the value will wrap. Thus 23:59 plus two minutes yields 00:01.
+     * <p>
+     * These lines are equivalent:
+     * <pre>
+     * LocalTime added = dt.plusHours(6);
+     * LocalTime added = dt.withFieldAdded(DurationFieldType.hours(), 6);
+     * </pre>
+     *
+     * @param fieldType  the field type to add to, not null
+     * @param amount  the amount to add
+     * @return a copy of this time with the field updated
+     * @throws IllegalArgumentException if the value is null or invalid
+     * @throws ArithmeticException if the result exceeds the internal capacity
+     */
+    public LocalTime withFieldAdded(DurationFieldType fieldType, int amount) {
+        if (fieldType == null) {
+            throw new IllegalArgumentException("Field must not be null");
+        }
+        if (isSupported(fieldType) == false) {
+            throw new IllegalArgumentException("Field '" + fieldType + "' is not supported");
+        }
+        if (amount == 0) {
+            return this;
+        }
+        long instant = fieldType.getField(getChronology()).add(getLocalMillis(), amount);
+        return withLocalMillis(instant);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets a copy of this LocalTime with the specified period added.
+     * <p>
+     * If the addition is zero, then <code>this</code> is returned.
+     * <p>
+     * This method is typically used to add multiple copies of complex
+     * period instances. Adding one field is best achieved using methods
+     * like {@link #withFieldAdded(DurationFieldType, int)}
+     * or {@link #plusHours(int)}.
+     *
+     * @param period  the period to add to this one, null means zero
+     * @param scalar  the amount of times to add, such as -1 to subtract once
+     * @return a copy of this time with the period added
+     * @throws ArithmeticException if the result exceeds the internal capacity
+     */
+    public LocalTime withPeriodAdded(ReadablePeriod period, int scalar) {
+        if (period == null || scalar == 0) {
+            return this;
+        }
+        long instant = getChronology().add(period, getLocalMillis(), scalar);
+        return withLocalMillis(instant);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets a copy of this LocalTime with the specified period added.
+     * <p>
+     * If the amount is zero or null, then <code>this</code> is returned.
+     * <p>
+     * This method is typically used to add complex period instances.
+     * Adding one field is best achieved using methods
+     * like {@link #plusYears(int)}.
+     * 
+     * @param period  the period to add to this one, null means zero
+     * @return a copy of this time with the period added
+     * @throws ArithmeticException if the result exceeds the internal capacity
+     */
+    public LocalTime plus(ReadablePeriod period) {
+        return withPeriodAdded(period, 1);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Returns a new LocalTime plus the specified number of hours.
+     * <p>
+     * This LocalTime instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * LocalTime added = dt.plusHours(6);
+     * LocalTime added = dt.plus(Period.hours(6));
+     * LocalTime added = dt.withFieldAdded(DurationFieldType.hours(), 6);
+     * </pre>
+     *
+     * @param hours  the amount of hours to add, may be negative
+     * @return the new LocalTime plus the increased hours
+     */
+    public LocalTime plusHours(int hours) {
+        if (hours == 0) {
+            return this;
+        }
+        long instant = getChronology().hours().add(getLocalMillis(), hours);
+        return withLocalMillis(instant);
+    }
+
+    /**
+     * Returns a new LocalTime plus the specified number of minutes.
+     * <p>
+     * This LocalTime instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * LocalTime added = dt.plusMinutes(6);
+     * LocalTime added = dt.plus(Period.minutes(6));
+     * LocalTime added = dt.withFieldAdded(DurationFieldType.minutes(), 6);
+     * </pre>
+     *
+     * @param minutes  the amount of minutes to add, may be negative
+     * @return the new LocalTime plus the increased minutes
+     */
+    public LocalTime plusMinutes(int minutes) {
+        if (minutes == 0) {
+            return this;
+        }
+        long instant = getChronology().minutes().add(getLocalMillis(), minutes);
+        return withLocalMillis(instant);
+    }
+
+    /**
+     * Returns a new LocalTime plus the specified number of seconds.
+     * <p>
+     * This LocalTime instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * LocalTime added = dt.plusSeconds(6);
+     * LocalTime added = dt.plus(Period.seconds(6));
+     * LocalTime added = dt.withFieldAdded(DurationFieldType.seconds(), 6);
+     * </pre>
+     *
+     * @param seconds  the amount of seconds to add, may be negative
+     * @return the new LocalTime plus the increased seconds
+     */
+    public LocalTime plusSeconds(int seconds) {
+        if (seconds == 0) {
+            return this;
+        }
+        long instant = getChronology().seconds().add(getLocalMillis(), seconds);
+        return withLocalMillis(instant);
+    }
+
+    /**
+     * Returns a new LocalTime plus the specified number of millis.
+     * <p>
+     * This LocalTime instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * LocalTime added = dt.plusMillis(6);
+     * LocalTime added = dt.plus(Period.millis(6));
+     * LocalTime added = dt.withFieldAdded(DurationFieldType.millis(), 6);
+     * </pre>
+     *
+     * @param millis  the amount of millis to add, may be negative
+     * @return the new LocalTime plus the increased millis
+     */
+    public LocalTime plusMillis(int millis) {
+        if (millis == 0) {
+            return this;
+        }
+        long instant = getChronology().millis().add(getLocalMillis(), millis);
+        return withLocalMillis(instant);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets a copy of this LocalTime with the specified period taken away.
+     * <p>
+     * If the amount is zero or null, then <code>this</code> is returned.
+     * <p>
+     * This method is typically used to subtract complex period instances.
+     * Subtracting one field is best achieved using methods
+     * like {@link #minusYears(int)}.
+     * 
+     * @param period  the period to reduce this instant by
+     * @return a copy of this time with the period taken away
+     * @throws ArithmeticException if the result exceeds the internal capacity
+     */
+    public LocalTime minus(ReadablePeriod period) {
+        return withPeriodAdded(period, -1);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Returns a new LocalTime minus the specified number of hours.
+     * <p>
+     * This LocalTime instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * LocalTime subtracted = dt.minusHours(6);
+     * LocalTime subtracted = dt.minus(Period.hours(6));
+     * LocalTime subtracted = dt.withFieldAdded(DurationFieldType.hours(), -6);
+     * </pre>
+     *
+     * @param hours  the amount of hours to subtract, may be negative
+     * @return the new LocalTime minus the increased hours
+     */
+    public LocalTime minusHours(int hours) {
+        if (hours == 0) {
+            return this;
+        }
+        long instant = getChronology().hours().subtract(getLocalMillis(), hours);
+        return withLocalMillis(instant);
+    }
+
+    /**
+     * Returns a new LocalTime minus the specified number of minutes.
+     * <p>
+     * This LocalTime instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * LocalTime subtracted = dt.minusMinutes(6);
+     * LocalTime subtracted = dt.minus(Period.minutes(6));
+     * LocalTime subtracted = dt.withFieldAdded(DurationFieldType.minutes(), -6);
+     * </pre>
+     *
+     * @param minutes  the amount of minutes to subtract, may be negative
+     * @return the new LocalTime minus the increased minutes
+     */
+    public LocalTime minusMinutes(int minutes) {
+        if (minutes == 0) {
+            return this;
+        }
+        long instant = getChronology().minutes().subtract(getLocalMillis(), minutes);
+        return withLocalMillis(instant);
+    }
+
+    /**
+     * Returns a new LocalTime minus the specified number of seconds.
+     * <p>
+     * This LocalTime instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * LocalTime subtracted = dt.minusSeconds(6);
+     * LocalTime subtracted = dt.minus(Period.seconds(6));
+     * LocalTime subtracted = dt.withFieldAdded(DurationFieldType.seconds(), -6);
+     * </pre>
+     *
+     * @param seconds  the amount of seconds to subtract, may be negative
+     * @return the new LocalTime minus the increased seconds
+     */
+    public LocalTime minusSeconds(int seconds) {
+        if (seconds == 0) {
+            return this;
+        }
+        long instant = getChronology().seconds().subtract(getLocalMillis(), seconds);
+        return withLocalMillis(instant);
+    }
+
+    /**
+     * Returns a new LocalTime minus the specified number of millis.
+     * <p>
+     * This LocalTime instance is immutable and unaffected by this method call.
+     * <p>
+     * The following three lines are identical in effect:
+     * <pre>
+     * LocalTime subtracted = dt.minusMillis(6);
+     * LocalTime subtracted = dt.minus(Period.millis(6));
+     * LocalTime subtracted = dt.withFieldAdded(DurationFieldType.millis(), -6);
+     * </pre>
+     *
+     * @param millis  the amount of millis to subtract, may be negative
+     * @return the new LocalTime minus the increased millis
+     */
+    public LocalTime minusMillis(int millis) {
+        if (millis == 0) {
+            return this;
+        }
+        long instant = getChronology().millis().subtract(getLocalMillis(), millis);
+        return withLocalMillis(instant);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the property object for the specified type, which contains
+     * many useful methods.
+     *
+     * @param fieldType  the field type to get the chronology for
+     * @return the property object
+     * @throws IllegalArgumentException if the field is null or unsupported
+     */
+    public Property property(DateTimeFieldType fieldType) {
+        if (fieldType == null) {
+            throw new IllegalArgumentException("The DateTimeFieldType must not be null");
+        }
+        if (isSupported(fieldType) == false) {
+            throw new IllegalArgumentException("Field '" + fieldType + "' is not supported");
+        }
+        return new Property(this, fieldType.getField(getChronology()));
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Get the hour of day field value.
+     *
+     * @return the hour of day
+     */
+    public int getHourOfDay() {
+        return getChronology().hourOfDay().get(getLocalMillis());
+    }
+
+    /**
+     * Get the minute of hour field value.
+     *
+     * @return the minute of hour
+     */
+    public int getMinuteOfHour() {
+        return getChronology().minuteOfHour().get(getLocalMillis());
+    }
+
+    /**
+     * Get the second of minute field value.
+     *
+     * @return the second of minute
+     */
+    public int getSecondOfMinute() {
+        return getChronology().secondOfMinute().get(getLocalMillis());
+    }
+
+    /**
+     * Get the millis of second field value.
+     *
+     * @return the millis of second
+     */
+    public int getMillisOfSecond() {
+        return getChronology().millisOfSecond().get(getLocalMillis());
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Get the hour of day field value.
+     *
+     * @param hour  the hour of day
+     */
+    public void withHourOfDay(int hour) {
+        getChronology().hourOfDay().set(getLocalMillis(), hour);
+    }
+
+    /**
+     * Get the minute of hour field value.
+     *
+     * @param minute  the minute of hour
+     */
+    public void withMinuteOfHour(int minute) {
+        getChronology().minuteOfHour().set(getLocalMillis(), minute);
+    }
+
+    /**
+     * Get the second of minute field value.
+     *
+     * @param second  the second of minute
+     */
+    public void withSecondOfMinute(int second) {
+        getChronology().secondOfMinute().set(getLocalMillis(), second);
+    }
+
+    /**
+     * Get the millis of second field value.
+     *
+     * @param millis  the millis of second
+     */
+    public void withMillisOfSecond(int millis) {
+        getChronology().millisOfSecond().set(getLocalMillis(), millis);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Get the hour of day field property
+     * 
+     * @return the hour of day property
+     */
+    public Property hourOfDay() {
+        return new Property(this, getChronology().hourOfDay());
+    }
+
+    /**
+     * Get the minute of hour field property
+     * 
+     * @return the minute of hour property
+     */
+    public Property minuteOfHour() {
+        return new Property(this, getChronology().minuteOfHour());
+    }
+
+    /**
+     * Get the second of minute field property
+     * 
+     * @return the second of minute property
+     */
+    public Property secondOfMinute() {
+        return new Property(this, getChronology().secondOfMinute());
+    }
+
+    /**
+     * Get the millis of second property
+     * 
+     * @return the millis of second property
+     */
+    public Property millisOfSecond() {
+        return new Property(this, getChronology().millisOfSecond());
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Output the time in ISO8601 format (HH:mm:ss.SSSZ).
+     * 
+     * @return ISO8601 time formatted string.
+     */
+    public String toString() {
+        return ISODateTimeFormat.time().print(this);
+    }
+
+    /**
+     * Output the time using the specified format pattern.
+     *
+     * @param pattern  the pattern specification, null means use <code>toString</code>
+     * @see org.joda.time.format.DateTimeFormat
+     */
+    public String toString(String pattern) {
+        if (pattern == null) {
+            return toString();
+        }
+        return DateTimeFormat.forPattern(pattern).print(this);
+    }
+
+    /**
+     * Output the time using the specified format pattern.
+     *
+     * @param pattern  the pattern specification, null means use <code>toString</code>
+     * @param locale  Locale to use, null means default
+     * @see org.joda.time.format.DateTimeFormat
+     */
+    public String toString(String pattern, Locale locale) throws IllegalArgumentException {
+        if (pattern == null) {
+            return toString();
+        }
+        return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * LocalTime.Property binds a LocalTime to a DateTimeField allowing
+     * powerful datetime functionality to be easily accessed.
+     * <p>
+     * The simplest use of this class is as an alternative get method, here used to
+     * get the year '1972' (as an int) and the month 'December' (as a String).
+     * <pre>
+     * LocalTime dt = new LocalTime(1972, 12, 3, 0, 0);
+     * int year = dt.year().get();
+     * String monthStr = dt.month().getAsText();
+     * </pre>
+     * <p>
+     * Methods are also provided that allow date modification. These return new instances
+     * of DateTime - they do not modify the original. The example below yields two
+     * independent immutable date objects 20 years apart.
+     * <pre>
+     * DateTime dt = new DateTime(1972, 12, 3, 0, 0, 0, 0);
+     * DateTime dt1920 = dt.year().setCopy(1920);
+     * <p>
+     * LocalTime.Propery itself is thread-safe and immutable, as well as the
+     * LocalTime being operated on.
+     *
+     * @author Stephen Colebourne
+     * @author Brian S O'Neill
+     * @since 1.2
+     */
+    public static final class Property extends AbstractReadableInstantFieldProperty {
+        
+        /** Serialization version */
+        private static final long serialVersionUID = -325842547277223L;
+        
+        /** The instant this property is working against */
+        private transient LocalTime iInstant;
+        /** The field this property is working against */
+        private transient DateTimeField iField;
+        
+        /**
+         * Constructor.
+         * 
+         * @param instant  the instant to set
+         * @param field  the field to use
+         */
+        Property(LocalTime instant, DateTimeField field) {
+            super();
+            iInstant = instant;
+            iField = field;
+        }
+        
+        /**
+         * Writes the property in a safe serialization format.
+         */
+        private void writeObject(ObjectOutputStream oos) throws IOException {
+            oos.writeObject(iInstant);
+            oos.writeObject(iField.getType());
+        }
+        
+        /**
+         * Reads the property from a safe serialization format.
+         */
+        private void readObject(ObjectInputStream oos) throws IOException, ClassNotFoundException {
+            iInstant = (LocalTime) oos.readObject();
+            DateTimeFieldType type = (DateTimeFieldType) oos.readObject();
+            iField = type.getField(iInstant.getChronology());
+        }
+        
+        //-----------------------------------------------------------------------
+        /**
+         * Gets the field being used.
+         * 
+         * @return the field
+         */
+        public DateTimeField getField() {
+            return iField;
+        }
+        
+        /**
+         * Gets the milliseconds of the time that this property is linked to.
+         * 
+         * @return the milliseconds
+         */
+        protected long getMillis() {
+            return iInstant.getLocalMillis();
+        }
+        
+        /**
+         * Gets the LocalTime object linked to this property.
+         * 
+         * @return the linked LocalTime
+         */
+        public LocalTime getLocalTime() {
+            return iInstant;
+        }
+        
+        //-----------------------------------------------------------------------
+        /**
+         * Adds to this field in a copy of this LocalTime.
+         * <p>
+         * The LocalTime attached to this property is unchanged by this call.
+         *
+         * @param value  the value to add to the field in the copy
+         * @return a copy of the LocalTime with the field value changed
+         * @throws IllegalArgumentException if the value isn't valid
+         */
+        public LocalTime plus(int value) {
+            return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value));
+        }
+        
+        /**
+         * Adds to this field in a copy of this LocalTime.
+         * If the addition exceeds the maximum value (eg. 23:59) it will
+         * wrap to the minimum value (eg. 00:00).
+         * <p>
+         * The LocalTime attached to this property is unchanged by this call.
+         *
+         * @param value  the value to add to the field in the copy
+         * @return a copy of the LocalTime with the field value changed
+         * @throws IllegalArgumentException if the value isn't valid
+         */
+        public LocalTime plus(long value) {
+            // TODO
+            return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value));
+        }
+        
+        /**
+         * Adds to this field, possibly wrapped, in a copy of this LocalTime.
+         * A field wrapped operation only changes this field.
+         * Thus 10:59 plusWrapField one minute goes to 10:00.
+         * <p>
+         * The LocalTime attached to this property is unchanged by this call.
+         *
+         * @param value  the value to add to the field in the copy
+         * @return a copy of the LocalTime with the field value changed
+         * @throws IllegalArgumentException if the value isn't valid
+         */
+        public LocalTime plusWrapField(int value) {
+            return iInstant.withLocalMillis(iField.addWrapField(iInstant.getLocalMillis(), value));
+        }
+        
+        //-----------------------------------------------------------------------
+        /**
+         * Sets this field in a copy of the LocalTime.
+         * <p>
+         * The LocalTime attached to this property is unchanged by this call.
+         *
+         * @param value  the value to set the field in the copy to
+         * @return a copy of the LocalTime with the field value changed
+         * @throws IllegalArgumentException if the value isn't valid
+         */
+        public LocalTime withValue(int value) {
+            return iInstant.withLocalMillis(iField.set(iInstant.getLocalMillis(), value));
+        }
+        
+        /**
+         * Sets this field in a copy of the LocalTime to a parsed text value.
+         * <p>
+         * The LocalTime attached to this property is unchanged by this call.
+         *
+         * @param text  the text value to set
+         * @param locale  optional locale to use for selecting a text symbol
+         * @return a copy of the LocalTime with the field value changed
+         * @throws IllegalArgumentException if the text value isn't valid
+         */
+        public LocalTime withValue(String text, Locale locale) {
+            return iInstant.withLocalMillis(iField.set(iInstant.getLocalMillis(), text, locale));
+        }
+        
+        /**
+         * Sets this field in a copy of the LocalTime to a parsed text value.
+         * <p>
+         * The LocalTime attached to this property is unchanged by this call.
+         *
+         * @param text  the text value to set
+         * @return a copy of the LocalTime with the field value changed
+         * @throws IllegalArgumentException if the text value isn't valid
+         */
+        public LocalTime withValue(String text) {
+            return withValue(text, null);
+        }
+        
+        //-----------------------------------------------------------------------
+        /**
+         * Returns a new LocalTime with this field set to the maximum value
+         * for this field.
+         * <p>
+         * The LocalTime attached to this property is unchanged by this call.
+         *
+         * @return a copy of the LocalTime with this field set to its maximum
+         */
+        public LocalTime withMaximumValue() {
+            return withValue(getMaximumValue());
+        }
+        
+        /**
+         * Returns a new LocalTime with this field set to the minimum value
+         * for this field.
+         * <p>
+         * The LocalTime attached to this property is unchanged by this call.
+         *
+         * @return a copy of the LocalTime with this field set to its minimum
+         */
+        public LocalTime withMinimumValue() {
+            return withValue(getMinimumValue());
+        }
+        
+        //-----------------------------------------------------------------------
+        /**
+         * Rounds to the lowest whole unit of this field on a copy of this
+         * LocalTime.
+         * <p>
+         * For example, rounding floor on the hourOfDay field of a LocalTime
+         * where the time is 10:30 would result in new LocalTime with the
+         * time of 10:00.
+         *
+         * @return a copy of the LocalTime with the field value changed
+         */
+        public LocalTime withRoundedFloor() {
+            return iInstant.withLocalMillis(iField.roundFloor(iInstant.getLocalMillis()));
+        }
+        
+        /**
+         * Rounds to the highest whole unit of this field on a copy of this
+         * LocalTime.
+         * <p>
+         * For example, rounding floor on the hourOfDay field of a LocalTime
+         * where the time is 10:30 would result in new LocalTime with the
+         * time of 11:00.
+         *
+         * @return a copy of the LocalTime with the field value changed
+         */
+        public LocalTime withRoundedCeiling() {
+            return iInstant.withLocalMillis(iField.roundCeiling(iInstant.getLocalMillis()));
+        }
+        
+        /**
+         * Rounds to the nearest whole unit of this field on a copy of this
+         * LocalTime, favoring the floor if halfway.
+         *
+         * @return a copy of the LocalTime with the field value changed
+         */
+        public LocalTime withRoundedHalfFloor() {
+            return iInstant.withLocalMillis(iField.roundHalfFloor(iInstant.getLocalMillis()));
+        }
+        
+        /**
+         * Rounds to the nearest whole unit of this field on a copy of this
+         * LocalTime, favoring the ceiling if halfway.
+         *
+         * @return a copy of the LocalTime with the field value changed
+         */
+        public LocalTime withRoundedHalfCeiling() {
+            return iInstant.withLocalMillis(iField.roundHalfCeiling(iInstant.getLocalMillis()));
+        }
+        
+        /**
+         * Rounds to the nearest whole unit of this field on a copy of this
+         * LocalTime.  If halfway, the ceiling is favored over the floor
+         * only if it makes this field's value even.
+         *
+         * @return a copy of the LocalTime with the field value changed
+         */
+        public LocalTime withRoundedHalfEven() {
+            return iInstant.withLocalMillis(iField.roundHalfEven(iInstant.getLocalMillis()));
+        }
+    }
+
+}

From 9cb4d0fed106b23580e0b90a6fa0b4f964a4a55e Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 17 Jan 2006 23:49:18 +0000
Subject: [PATCH 026/115] Javadoc fixes

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1018 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/java/org/joda/time/LocalDate.java     | 55 +++++++++----------
 .../src/java/org/joda/time/LocalDateTime.java | 47 ++++++++--------
 2 files changed, 47 insertions(+), 55 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/LocalDate.java b/JodaTime/src/java/org/joda/time/LocalDate.java
index f26b2fdde..84182d429 100644
--- a/JodaTime/src/java/org/joda/time/LocalDate.java
+++ b/JodaTime/src/java/org/joda/time/LocalDate.java
@@ -34,13 +34,13 @@
 import org.joda.time.format.ISODateTimeFormat;
 
 /**
- * LocalDate is an unmodifiable datetime class representing a
- * datetime without a time zone.
+ * LocalDate is an immutable datetime class representing a date
+ * without a time zone.
  * <p>
  * LocalDate implements the {@link ReadablePartial} interface.
  * To do this, the interface methods focus on the key fields -
  * Year, MonthOfYear and DayOfMonth.
- * However, <b>all</b> fields may in fact be queried.
+ * However, <b>all</b> date fields may in fact be queried.
  * <p>
  * LocalDate differs from DateMidnight in that this class does not
  * have a time zone and does not represent a single instant in time.
@@ -426,7 +426,7 @@ public int get(DateTimeFieldType fieldType) {
 
     /**
      * Checks if the field type specified is supported by this
-     * local datetime and chronology.
+     * local date and chronology.
      * This can be used to avoid exceptions in {@link #get(DateTimeFieldType)}.
      *
      * @param type  a field type, usually obtained from DateTimeFieldType
@@ -436,17 +436,12 @@ public boolean isSupported(DateTimeFieldType type) {
         if (type == null) {
             return false;
         }
-        DateTimeField field = type.getField(getChronology());
-        if (DATE_DURATION_TYPES.contains(type.getDurationType()) ||
-            field.getDurationField().getUnitMillis() >= getChronology().days().getUnitMillis()) {
-            return field.isSupported();
-        }
-        return false;
+        return isSupported(type.getDurationType());
     }
 
     /**
      * Checks if the duration type specified is supported by this
-     * local datetime and chronology.
+     * local date and chronology.
      *
      * @param type  a duration type, usually obtained from DurationFieldType
      * @return true if the field type is supported
@@ -465,7 +460,7 @@ public boolean isSupported(DurationFieldType type) {
 
     //-----------------------------------------------------------------------
     /**
-     * Gets the milliseconds of the datetime instant from the Java epoch
+     * Gets the local milliseconds from the Java epoch
      * of 1970-01-01T00:00:00 (not fixed to any specific time zone).
      * 
      * @return the number of milliseconds since 1970-01-01T00:00:00
@@ -475,9 +470,9 @@ long getLocalMillis() {
     }
 
     /**
-     * Gets the chronology of the datetime.
+     * Gets the chronology of the date.
      * 
-     * @return the Chronology that the datetime is using
+     * @return the Chronology that the date is using
      */
     public Chronology getChronology() {
         return iChronology;
@@ -589,8 +584,8 @@ LocalDate withLocalMillis(long newMillis) {
      * Unsupported fields are ignored.
      * If the partial is null, then <code>this</code> is returned.
      *
-     * @param partial  the partial set of fields to apply to this datetime, null ignored
-     * @return a copy of this datetime with a different set of fields
+     * @param partial  the partial set of fields to apply to this date, null ignored
+     * @return a copy of this date with a different set of fields
      * @throws IllegalArgumentException if any value is invalid
      */
     public LocalDate withFields(ReadablePartial partial) {
@@ -615,7 +610,7 @@ public LocalDate withFields(ReadablePartial partial) {
      *
      * @param fieldType  the field type to set, not null
      * @param value  the value to set
-     * @return a copy of this datetime with the field set
+     * @return a copy of this date with the field set
      * @throws IllegalArgumentException if the field is null or unsupported
      */
     public LocalDate withField(DateTimeFieldType fieldType, int value) {
@@ -643,9 +638,9 @@ public LocalDate withField(DateTimeFieldType fieldType, int value) {
      *
      * @param fieldType  the field type to add to, not null
      * @param amount  the amount to add
-     * @return a copy of this datetime with the field updated
+     * @return a copy of this date with the field updated
      * @throws IllegalArgumentException if the field is null or unsupported
-     * @throws ArithmeticException if the new datetime exceeds the capacity of a long
+     * @throws ArithmeticException if the result exceeds the internal capacity
      */
     public LocalDate withFieldAdded(DurationFieldType fieldType, int amount) {
         if (fieldType == null) {
@@ -675,8 +670,8 @@ public LocalDate withFieldAdded(DurationFieldType fieldType, int amount) {
      *
      * @param period  the period to add to this one, null means zero
      * @param scalar  the amount of times to add, such as -1 to subtract once
-     * @return a copy of this datetime with the period added
-     * @throws ArithmeticException if the new datetime exceeds the capacity of a long
+     * @return a copy of this date with the period added
+     * @throws ArithmeticException if the result exceeds the internal capacity
      */
     public LocalDate withPeriodAdded(ReadablePeriod period, int scalar) {
         if (period == null || scalar == 0) {
@@ -697,9 +692,9 @@ public LocalDate withPeriodAdded(ReadablePeriod period, int scalar) {
      * like {@link #plusYears(int)}.
      * Unsupported fields are ignored.
      *
-     * @param period  the duration to add to this one, null means zero
-     * @return a copy of this LocalDate with the period added
-     * @throws ArithmeticException if the new LocalDate exceeds the capacity of a long
+     * @param period  the period to add to this one, null means zero
+     * @return a copy of this date with the period added
+     * @throws ArithmeticException if the result exceeds the internal capacity
      */
     public LocalDate plus(ReadablePeriod period) {
         return withPeriodAdded(period, 1);
@@ -800,7 +795,7 @@ public LocalDate plusDays(int days) {
 
     //-----------------------------------------------------------------------
     /**
-     * Gets a copy of this LocalDate with the specified period take away.
+     * Gets a copy of this LocalDate with the specified period taken away.
      * <p>
      * If the amount is zero or null, then <code>this</code> is returned.
      * <p>
@@ -810,7 +805,7 @@ public LocalDate plusDays(int days) {
      *
      * @param period  the period to reduce this instant by
      * @return a copy of this LocalDate with the period taken away
-     * @throws ArithmeticException if the new LocalDate exceeds the capacity of a long
+     * @throws ArithmeticException if the result exceeds the internal capacity
      */
     public LocalDate minus(ReadablePeriod period) {
         return withPeriodAdded(period, -1);
@@ -1247,7 +1242,7 @@ public DateTimeField getField() {
         }
         
         /**
-         * Gets the milliseconds of the datetime that this property is linked to.
+         * Gets the milliseconds of the date that this property is linked to.
          * 
          * @return the milliseconds
          */
@@ -1256,9 +1251,9 @@ protected long getMillis() {
         }
         
         /**
-         * Gets the LocalDate being used.
+         * Gets the LocalDate object linked to this property.
          * 
-         * @return the LocalDate
+         * @return the linked LocalDate
          */
         public LocalDate getLocalDate() {
             return iInstant;
@@ -1280,7 +1275,7 @@ public LocalDate plus(int value) {
         
         /**
          * Adds to this field, possibly wrapped, in a copy of this LocalDate.
-         * A wrapped operation only changes this field.
+         * A field wrapped operation only changes this field.
          * Thus 31st January plusWrapField one day goes to the 1st January.
          * <p>
          * The LocalDate attached to this property is unchanged by this call.
diff --git a/JodaTime/src/java/org/joda/time/LocalDateTime.java b/JodaTime/src/java/org/joda/time/LocalDateTime.java
index 039364d76..4c52662c0 100644
--- a/JodaTime/src/java/org/joda/time/LocalDateTime.java
+++ b/JodaTime/src/java/org/joda/time/LocalDateTime.java
@@ -555,20 +555,17 @@ public DateTime toDateTime(DateTimeZone zone) {
      * @return a LocalDate with the same date and chronology
      */
     public LocalDate getDate() {
-        return new LocalDate(
-                getYear(), getMonthOfYear(), getDayOfMonth(), getChronology());
+        return new LocalDate(getLocalMillis(), getChronology());
     }
 
-//    /**
-//     * Converts this object to a LocalTime with the same time and chronology.
-//     * 
-//     * @return a LocalTime with the same time and chronology
-//     */
-//    public LocalTime getTime() {
-//        return new LocalTime(
-//                getHourOfDay(), getMinuteOfHour(),
-//                getSecondOfMinute(), getMillisOfSecond(), getChronology());
-//    }
+    /**
+     * Converts this object to a LocalTime with the same time and chronology.
+     * 
+     * @return a LocalTime with the same time and chronology
+     */
+    public LocalTime getTime() {
+        return new LocalTime(getLocalMillis(), getChronology());
+    }
 
     //-----------------------------------------------------------------------
     /**
@@ -701,7 +698,7 @@ public LocalDateTime withField(DateTimeFieldType fieldType, int value) {
      * @param amount  the amount to add
      * @return a copy of this datetime with the field updated
      * @throws IllegalArgumentException if the value is null or invalid
-     * @throws ArithmeticException if the new datetime exceeds the capacity of a long
+     * @throws ArithmeticException if the result exceeds the internal capacity
      */
     public LocalDateTime withFieldAdded(DurationFieldType fieldType, int amount) {
         if (fieldType == null) {
@@ -723,7 +720,7 @@ public LocalDateTime withFieldAdded(DurationFieldType fieldType, int amount) {
      * @param durationToAdd  the duration to add to this one, null means zero
      * @param scalar  the amount of times to add, such as -1 to subtract once
      * @return a copy of this datetime with the duration added
-     * @throws ArithmeticException if the new datetime exceeds the capacity of a long
+     * @throws ArithmeticException if the result exceeds the internal capacity
      */
     public LocalDateTime withDurationAdded(ReadableDuration durationToAdd, int scalar) {
         if (durationToAdd == null || scalar == 0) {
@@ -746,7 +743,7 @@ public LocalDateTime withDurationAdded(ReadableDuration durationToAdd, int scala
      * @param period  the period to add to this one, null means zero
      * @param scalar  the amount of times to add, such as -1 to subtract once
      * @return a copy of this datetime with the period added
-     * @throws ArithmeticException if the new datetime exceeds the capacity of a long
+     * @throws ArithmeticException if the result exceeds the internal capacity
      */
     public LocalDateTime withPeriodAdded(ReadablePeriod period, int scalar) {
         if (period == null || scalar == 0) {
@@ -764,7 +761,7 @@ public LocalDateTime withPeriodAdded(ReadablePeriod period, int scalar) {
      * 
      * @param duration  the duration to add to this one, null means zero
      * @return a copy of this datetime with the duration added
-     * @throws ArithmeticException if the new datetime exceeds the capacity of a long
+     * @throws ArithmeticException if the result exceeds the internal capacity
      */
     public LocalDateTime plus(ReadableDuration duration) {
         return withDurationAdded(duration, 1);
@@ -779,9 +776,9 @@ public LocalDateTime plus(ReadableDuration duration) {
      * Adding one field is best achieved using methods
      * like {@link #plusYears(int)}.
      * 
-     * @param period  the duration to add to this one, null means zero
+     * @param period  the period to add to this one, null means zero
      * @return a copy of this datetime with the period added
-     * @throws ArithmeticException if the new datetime exceeds the capacity of a long
+     * @throws ArithmeticException if the result exceeds the internal capacity
      */
     public LocalDateTime plus(ReadablePeriod period) {
         return withPeriodAdded(period, 1);
@@ -974,20 +971,20 @@ public LocalDateTime plusMillis(int millis) {
 
     //-----------------------------------------------------------------------
     /**
-     * Gets a copy of this datetime with the specified duration take away.
+     * Gets a copy of this datetime with the specified duration taken away.
      * <p>
      * If the amount is zero or null, then <code>this</code> is returned.
      * 
      * @param duration  the duration to reduce this instant by
      * @return a copy of this datetime with the duration taken away
-     * @throws ArithmeticException if the new datetime exceeds the capacity of a long
+     * @throws ArithmeticException if the result exceeds the internal capacity
      */
     public LocalDateTime minus(ReadableDuration duration) {
         return withDurationAdded(duration, -1);
     }
 
     /**
-     * Gets a copy of this datetime with the specified period take away.
+     * Gets a copy of this datetime with the specified period taken away.
      * <p>
      * If the amount is zero or null, then <code>this</code> is returned.
      * <p>
@@ -997,7 +994,7 @@ public LocalDateTime minus(ReadableDuration duration) {
      * 
      * @param period  the period to reduce this instant by
      * @return a copy of this datetime with the period taken away
-     * @throws ArithmeticException if the new datetime exceeds the capacity of a long
+     * @throws ArithmeticException if the result exceeds the internal capacity
      */
     public LocalDateTime minus(ReadablePeriod period) {
         return withPeriodAdded(period, -1);
@@ -1608,9 +1605,9 @@ protected long getMillis() {
         }
         
         /**
-         * Gets the datetime being used.
+         * Gets the LocalDateTime object linked to this property.
          * 
-         * @return the datetime
+         * @return the linked LocalDateTime
          */
         public LocalDateTime getLocalDateTime() {
             return iInstant;
@@ -1645,7 +1642,7 @@ public LocalDateTime plus(long value) {
         
         /**
          * Adds to this field, possibly wrapped, in a copy of this LocalDateTime.
-         * A wrapped operation only changes this field.
+         * A field wrapped operation only changes this field.
          * Thus 31st January plusWrapField one day goes to the 1st January.
          * <p>
          * The LocalDateTime attached to this property is unchanged by this call.

From 621b83eafe8dcddf5c1b108c41051b5917efbbd9 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 28 Jan 2006 15:11:54 +0000
Subject: [PATCH 027/115] Test LocalTime

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1019 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/java/org/joda/time/LocalTime.java     | 154 +++-
 .../org/joda/time/TestLocalTime_Basics.java   | 794 ++++++++++++++++++
 .../joda/time/TestLocalTime_Constructors.java | 531 ++++++++++++
 .../joda/time/TestLocalTime_Properties.java   | 785 +++++++++++++++++
 4 files changed, 2242 insertions(+), 22 deletions(-)
 create mode 100644 JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java
 create mode 100644 JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java
 create mode 100644 JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java

diff --git a/JodaTime/src/java/org/joda/time/LocalTime.java b/JodaTime/src/java/org/joda/time/LocalTime.java
index 4a444f27a..7893461d7 100644
--- a/JodaTime/src/java/org/joda/time/LocalTime.java
+++ b/JodaTime/src/java/org/joda/time/LocalTime.java
@@ -77,6 +77,9 @@
     /** Serialization lock */
     private static final long serialVersionUID = -12873158713873L;
 
+    /** Constant for midnight. */
+    public static final LocalTime MIDNIGHT = new LocalTime(0, 0, 0, 0);
+
     /** The index of the hourOfDay field in the field array */
     private static final int HOUR_OF_DAY = 0;
     /** The index of the minuteOfHour field in the field array */
@@ -96,7 +99,7 @@
 
     /** The local millis from 1970-01-01T00:00:00 */
     private long iLocalMillis;
-    /** The chronology to use in UTC */
+    /** The chronology to use, in UTC */
     private Chronology iChronology;
 
     //-----------------------------------------------------------------------
@@ -136,6 +139,37 @@ public static LocalTime now(Chronology chronology) {
         return forInstant(DateTimeUtils.currentTimeMillis(), chronology);
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Constructs a LocalTime from the specified millis of day using the
+     * ISO chronology.
+     * <p>
+     * The millisOfDay value may exceed the number of millis in one day,
+     * but additional days will be ignored.
+     * This method uses the UTC time zone internally.
+     *
+     * @param millisOfDay  the number of milliseconds into a day to convert
+     */
+    public static LocalTime fromMillisOfDay(long millisOfDay) {
+        return fromMillisOfDay(millisOfDay, null);
+    }
+
+    /**
+     * Constructs a LocalTime from the specified millis of day using the
+     * specified chronology.
+     * <p>
+     * The millisOfDay value may exceed the number of millis in one day,
+     * but additional days will be ignored.
+     * This method uses the UTC time zone internally.
+     *
+     * @param millisOfDay  the number of milliseconds into a day to convert
+     * @param chrono  the chronology, null means ISO chronology
+     */
+    public static LocalTime fromMillisOfDay(long millisOfDay, Chronology chrono) {
+        chrono = DateTimeUtils.getChronology(chrono).withUTC();
+        return new LocalTime(millisOfDay, chrono);
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Constructs a LocalTime from a <code>java.util.Calendar</code>
@@ -384,7 +418,7 @@ public LocalTime(
         super();
         chronology = DateTimeUtils.getChronology(chronology).withUTC();
         long instant = chronology.getDateTimeMillis(
-            hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+            0L, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         iChronology = chronology;
         iLocalMillis = instant;
     }
@@ -432,7 +466,7 @@ protected DateTimeField getField(int index, Chronology chrono) {
      * interface. The supported fields are HourOfDay, MinuteOfHour,
      * SecondOfMinute and MillisOfSecond.
      *
-     * @param index  the index, zero to two
+     * @param index  the index, zero to three
      * @return the value
      * @throws IndexOutOfBoundsException if the index is invalid
      */
@@ -936,39 +970,67 @@ public int getMillisOfSecond() {
 
     //-----------------------------------------------------------------------
     /**
-     * Get the hour of day field value.
+     * Sets the hour of day field in a copy of this LocalTime, leaving this
+     * instance unchanged.
+     * <p>
+     * LocalTime is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * hour of day changed.
      *
-     * @param hour  the hour of day
+     * @param hour  the hour of day to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
      */
-    public void withHourOfDay(int hour) {
-        getChronology().hourOfDay().set(getLocalMillis(), hour);
+    public LocalTime withHourOfDay(int hour) {
+        return withLocalMillis(getChronology().hourOfDay().set(getLocalMillis(), hour));
     }
 
     /**
-     * Get the minute of hour field value.
+     * Sets the minute of hour field in a copy of this LocalTime, leaving this
+     * instance unchanged.
+     * <p>
+     * LocalTime is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * minute of hour changed.
      *
-     * @param minute  the minute of hour
+     * @param minute  the minute of hour to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
      */
-    public void withMinuteOfHour(int minute) {
-        getChronology().minuteOfHour().set(getLocalMillis(), minute);
+    public LocalTime withMinuteOfHour(int minute) {
+        return withLocalMillis(getChronology().minuteOfHour().set(getLocalMillis(), minute));
     }
 
     /**
-     * Get the second of minute field value.
+     * Sets the second of minute field in a copy of this LocalTime, leaving this
+     * instance unchanged.
+     * <p>
+     * LocalTime is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * second of minute changed.
      *
-     * @param second  the second of minute
+     * @param second  the second of minute to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
      */
-    public void withSecondOfMinute(int second) {
-        getChronology().secondOfMinute().set(getLocalMillis(), second);
+    public LocalTime withSecondOfMinute(int second) {
+        return withLocalMillis(getChronology().secondOfMinute().set(getLocalMillis(), second));
     }
 
     /**
-     * Get the millis of second field value.
+     * Sets the millis of second field in a copy of this LocalTime, leaving this
+     * instance unchanged.
+     * <p>
+     * LocalTime is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * millis of second changed.
      *
-     * @param millis  the millis of second
+     * @param millis  the millis of second to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
      */
-    public void withMillisOfSecond(int millis) {
-        getChronology().millisOfSecond().set(getLocalMillis(), millis);
+    public LocalTime withMillisOfSecond(int millis) {
+        return withLocalMillis(getChronology().millisOfSecond().set(getLocalMillis(), millis));
     }
 
     //-----------------------------------------------------------------------
@@ -1008,6 +1070,36 @@ public Property millisOfSecond() {
         return new Property(this, getChronology().millisOfSecond());
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Converts this LocalTime to a full datetime using the default time zone
+     * setting the time fields from this instance and the date fields from
+     * the current date.
+     *
+     * @return this time as a datetime using todays date
+     */
+    public DateTime toDateTimeTodayDefaultZone() {
+        return toDateTimeToday(null);
+    }
+
+    /**
+     * Converts this LocalTime to a full datetime using the specified time zone
+     * setting the time fields from this instance and the date fields from
+     * the current time.
+     * <p>
+     * This method uses the chronology from this instance plus the time zone
+     * specified.
+     *
+     * @param zone  the zone to use, null means default
+     * @return this time as a datetime using todays date
+     */
+    public DateTime toDateTimeToday(DateTimeZone zone) {
+        Chronology chrono = getChronology().withZone(zone);
+        long instantMillis = DateTimeUtils.currentTimeMillis();
+        long resolved = chrono.set(this, instantMillis);
+        return new DateTime(resolved, chrono);
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Output the time in ISO8601 format (HH:mm:ss.SSSZ).
@@ -1147,7 +1239,6 @@ public LocalTime getLocalTime() {
          *
          * @param value  the value to add to the field in the copy
          * @return a copy of the LocalTime with the field value changed
-         * @throws IllegalArgumentException if the value isn't valid
          */
         public LocalTime plus(int value) {
             return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value));
@@ -1162,13 +1253,32 @@ public LocalTime plus(int value) {
          *
          * @param value  the value to add to the field in the copy
          * @return a copy of the LocalTime with the field value changed
-         * @throws IllegalArgumentException if the value isn't valid
          */
         public LocalTime plus(long value) {
-            // TODO
             return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value));
         }
         
+        /**
+         * Adds to this field in a copy of this LocalTime.
+         * If the addition exceeds the maximum value (eg. 23:59) then
+         * an exception will be thrown.
+         * Contrast this behaviour to {@link #plus(int)}.
+         * <p>
+         * The LocalTime attached to this property is unchanged by this call.
+         *
+         * @param value  the value to add to the field in the copy
+         * @return a copy of the LocalTime with the field value changed
+         * @throws IllegalArgumentException if the result is invalid
+         */
+        public LocalTime plusNoWrap(int value) {
+            long millis = iField.add(iInstant.getLocalMillis(), value);
+            long rounded = iInstant.getChronology().millisOfDay().get(millis);
+            if (rounded != millis) {
+                throw new IllegalArgumentException("The addition exceeded the boundaries of LocalTime");
+            }
+            return iInstant.withLocalMillis(millis);
+        }
+        
         /**
          * Adds to this field, possibly wrapped, in a copy of this LocalTime.
          * A field wrapped operation only changes this field.
diff --git a/JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java b/JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java
new file mode 100644
index 000000000..72e52edde
--- /dev/null
+++ b/JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java
@@ -0,0 +1,794 @@
+/*
+ *  Copyright 2001-2006 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time;
+
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+import java.util.Arrays;
+import java.util.Date;
+import java.util.Locale;
+
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+import org.joda.time.chrono.BuddhistChronology;
+import org.joda.time.chrono.CopticChronology;
+import org.joda.time.chrono.GregorianChronology;
+import org.joda.time.chrono.ISOChronology;
+import org.joda.time.format.DateTimeFormat;
+import org.joda.time.format.DateTimeFormatter;
+
+/**
+ * This class is a Junit unit test for LocalTime.
+ *
+ * @author Stephen Colebourne
+ */
+public class TestLocalTime_Basics extends TestCase {
+
+    private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
+    private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
+    private static final DateTimeZone TOKYO = DateTimeZone.forID("Asia/Tokyo");
+    private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);
+    private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);
+    private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);
+    private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();
+    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);
+    private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);
+    private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);
+    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
+    private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);
+    private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);
+    private static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);
+    private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();
+
+    private long TEST_TIME_NOW =
+            10L * DateTimeConstants.MILLIS_PER_HOUR
+            + 20L * DateTimeConstants.MILLIS_PER_MINUTE
+            + 30L * DateTimeConstants.MILLIS_PER_SECOND
+            + 40L;
+
+    private long TEST_TIME1 =
+        1L * DateTimeConstants.MILLIS_PER_HOUR
+        + 2L * DateTimeConstants.MILLIS_PER_MINUTE
+        + 3L * DateTimeConstants.MILLIS_PER_SECOND
+        + 4L;
+
+    private long TEST_TIME2 =
+        1L * DateTimeConstants.MILLIS_PER_DAY
+        + 5L * DateTimeConstants.MILLIS_PER_HOUR
+        + 6L * DateTimeConstants.MILLIS_PER_MINUTE
+        + 7L * DateTimeConstants.MILLIS_PER_SECOND
+        + 8L;
+
+    private DateTimeZone zone = null;
+
+    public static void main(String[] args) {
+        junit.textui.TestRunner.run(suite());
+    }
+
+    public static TestSuite suite() {
+        return new TestSuite(TestLocalTime_Basics.class);
+    }
+
+    public TestLocalTime_Basics(String name) {
+        super(name);
+    }
+
+    protected void setUp() throws Exception {
+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
+        zone = DateTimeZone.getDefault();
+        DateTimeZone.setDefault(LONDON);
+    }
+
+    protected void tearDown() throws Exception {
+        DateTimeUtils.setCurrentMillisSystem();
+        DateTimeZone.setDefault(zone);
+        zone = null;
+    }
+
+    //-----------------------------------------------------------------------
+    public void testGet_DateTimeFieldType() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        assertEquals(10, test.get(DateTimeFieldType.hourOfDay()));
+        assertEquals(20, test.get(DateTimeFieldType.minuteOfHour()));
+        assertEquals(30, test.get(DateTimeFieldType.secondOfMinute()));
+        assertEquals(40, test.get(DateTimeFieldType.millisOfSecond()));
+        assertEquals(TEST_TIME_NOW / 60000 , test.get(DateTimeFieldType.minuteOfDay()));
+        assertEquals(TEST_TIME_NOW / 1000 , test.get(DateTimeFieldType.secondOfDay()));
+        assertEquals(TEST_TIME_NOW , test.get(DateTimeFieldType.millisOfDay()));
+        assertEquals(10, test.get(DateTimeFieldType.hourOfHalfday()));
+        assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay()));
+        test = new LocalTime(12, 30);
+        assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday()));
+        assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday()));
+        assertEquals(12, test.get(DateTimeFieldType.clockhourOfDay()));
+        assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay()));
+        test = new LocalTime(14, 30);
+        assertEquals(2, test.get(DateTimeFieldType.hourOfHalfday()));
+        assertEquals(2, test.get(DateTimeFieldType.clockhourOfHalfday()));
+        assertEquals(14, test.get(DateTimeFieldType.clockhourOfDay()));
+        assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay()));
+        test = new LocalTime(0, 30);
+        assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday()));
+        assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday()));
+        assertEquals(24, test.get(DateTimeFieldType.clockhourOfDay()));
+        assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay()));
+        try {
+            test.get(null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            test.get(DateTimeFieldType.dayOfMonth());
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testSize() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        assertEquals(4, test.size());
+    }
+
+    public void testGetFieldType_int() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        assertSame(DateTimeFieldType.hourOfDay(), test.getFieldType(0));
+        assertSame(DateTimeFieldType.minuteOfHour(), test.getFieldType(1));
+        assertSame(DateTimeFieldType.secondOfMinute(), test.getFieldType(2));
+        assertSame(DateTimeFieldType.millisOfSecond(), test.getFieldType(3));
+        try {
+            test.getFieldType(-1);
+        } catch (IndexOutOfBoundsException ex) {}
+        try {
+            test.getFieldType(5);
+        } catch (IndexOutOfBoundsException ex) {}
+    }
+
+    public void testGetFieldTypes() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        DateTimeFieldType[] fields = test.getFieldTypes();
+        assertSame(DateTimeFieldType.hourOfDay(), fields[0]);
+        assertSame(DateTimeFieldType.minuteOfHour(), fields[1]);
+        assertSame(DateTimeFieldType.secondOfMinute(), fields[2]);
+        assertSame(DateTimeFieldType.millisOfSecond(), fields[3]);
+        assertNotSame(test.getFieldTypes(), test.getFieldTypes());
+    }
+
+    public void testGetField_int() {
+        LocalTime test = new LocalTime(10, 20, 30, 40, COPTIC_UTC);
+        assertSame(COPTIC_UTC.hourOfDay(), test.getField(0));
+        assertSame(COPTIC_UTC.minuteOfHour(), test.getField(1));
+        assertSame(COPTIC_UTC.secondOfMinute(), test.getField(2));
+        assertSame(COPTIC_UTC.millisOfSecond(), test.getField(3));
+        try {
+            test.getField(-1);
+        } catch (IndexOutOfBoundsException ex) {}
+        try {
+            test.getField(5);
+        } catch (IndexOutOfBoundsException ex) {}
+    }
+
+    public void testGetFields() {
+        LocalTime test = new LocalTime(10, 20, 30, 40, COPTIC_UTC);
+        DateTimeField[] fields = test.getFields();
+        assertSame(COPTIC_UTC.hourOfDay(), fields[0]);
+        assertSame(COPTIC_UTC.minuteOfHour(), fields[1]);
+        assertSame(COPTIC_UTC.secondOfMinute(), fields[2]);
+        assertSame(COPTIC_UTC.millisOfSecond(), fields[3]);
+        assertNotSame(test.getFields(), test.getFields());
+    }
+
+    public void testGetValue_int() {
+        LocalTime test = new LocalTime(10, 20, 30, 40, COPTIC_PARIS);
+        assertEquals(10, test.getValue(0));
+        assertEquals(20, test.getValue(1));
+        assertEquals(30, test.getValue(2));
+        assertEquals(40, test.getValue(3));
+        try {
+            test.getValue(-1);
+        } catch (IndexOutOfBoundsException ex) {}
+        try {
+            test.getValue(5);
+        } catch (IndexOutOfBoundsException ex) {}
+    }
+
+    public void testGetValues() {
+        LocalTime test = new LocalTime(10, 20, 30, 40, COPTIC_UTC);
+        int[] values = test.getValues();
+        assertEquals(10, values[0]);
+        assertEquals(20, values[1]);
+        assertEquals(30, values[2]);
+        assertEquals(40, values[3]);
+        assertNotSame(test.getValues(), test.getValues());
+    }
+
+    public void testIsSupported_DateTimeFieldType() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        assertEquals(true, test.isSupported(DateTimeFieldType.hourOfDay()));
+        assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfHour()));
+        assertEquals(true, test.isSupported(DateTimeFieldType.secondOfMinute()));
+        assertEquals(true, test.isSupported(DateTimeFieldType.millisOfSecond()));
+        assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfDay()));
+        assertEquals(true, test.isSupported(DateTimeFieldType.secondOfDay()));
+        assertEquals(true, test.isSupported(DateTimeFieldType.millisOfDay()));
+        
+        assertEquals(true, test.isSupported(DateTimeFieldType.hourOfHalfday()));
+        assertEquals(true, test.isSupported(DateTimeFieldType.halfdayOfDay()));
+        assertEquals(true, test.isSupported(DateTimeFieldType.clockhourOfHalfday()));
+        assertEquals(true, test.isSupported(DateTimeFieldType.clockhourOfDay()));
+        
+        assertEquals(false, test.isSupported(DateTimeFieldType.dayOfMonth()));
+        assertEquals(false, test.isSupported((DateTimeFieldType) null));
+    }
+
+    public void testIsSupported_DurationFieldType() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        assertEquals(true, test.isSupported(DurationFieldType.hours()));
+        assertEquals(true, test.isSupported(DurationFieldType.minutes()));
+        assertEquals(true, test.isSupported(DurationFieldType.seconds()));
+        assertEquals(true, test.isSupported(DurationFieldType.millis()));
+        assertEquals(true, test.isSupported(DurationFieldType.halfdays()));
+        
+        assertEquals(false, test.isSupported(DurationFieldType.days()));
+        assertEquals(false, test.isSupported((DurationFieldType) null));
+    }
+
+    public void testEqualsHashCode() {
+        LocalTime test1 = new LocalTime(10, 20, 30, 40, COPTIC_PARIS);
+        LocalTime test2 = new LocalTime(10, 20, 30, 40, COPTIC_PARIS);
+        assertEquals(true, test1.equals(test2));
+        assertEquals(true, test2.equals(test1));
+        assertEquals(true, test1.equals(test1));
+        assertEquals(true, test2.equals(test2));
+        assertEquals(true, test1.hashCode() == test2.hashCode());
+        assertEquals(true, test1.hashCode() == test1.hashCode());
+        assertEquals(true, test2.hashCode() == test2.hashCode());
+        
+        LocalTime test3 = new LocalTime(15, 20, 30, 40);
+        assertEquals(false, test1.equals(test3));
+        assertEquals(false, test2.equals(test3));
+        assertEquals(false, test3.equals(test1));
+        assertEquals(false, test3.equals(test2));
+        assertEquals(false, test1.hashCode() == test3.hashCode());
+        assertEquals(false, test2.hashCode() == test3.hashCode());
+        
+        assertEquals(false, test1.equals("Hello"));
+        assertEquals(true, test1.equals(new TimeOfDay(10, 20, 30, 40, COPTIC_UTC)));
+        assertEquals(true, test1.equals(new MockInstant()));
+        assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE));
+    }
+
+    class MockInstant extends MockPartial {
+        public Chronology getChronology() {
+            return COPTIC_UTC;
+        }
+        public DateTimeField[] getFields() {
+            return new DateTimeField[] {
+                COPTIC_UTC.hourOfDay(),
+                COPTIC_UTC.minuteOfHour(),
+                COPTIC_UTC.secondOfMinute(),
+                COPTIC_UTC.millisOfSecond(),
+            };
+        }
+        public int[] getValues() {
+            return new int[] {10, 20, 30, 40};
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    public void testCompareTo() {
+        LocalTime test1 = new LocalTime(10, 20, 30, 40);
+        LocalTime test1a = new LocalTime(10, 20, 30, 40);
+        assertEquals(0, test1.compareTo(test1a));
+        assertEquals(0, test1a.compareTo(test1));
+        assertEquals(0, test1.compareTo(test1));
+        assertEquals(0, test1a.compareTo(test1a));
+        
+        LocalTime test2 = new LocalTime(10, 20, 35, 40);
+        assertEquals(-1, test1.compareTo(test2));
+        assertEquals(+1, test2.compareTo(test1));
+        
+        LocalTime test3 = new LocalTime(10, 20, 35, 40, GregorianChronology.getInstanceUTC());
+        assertEquals(-1, test1.compareTo(test3));
+        assertEquals(+1, test3.compareTo(test1));
+        assertEquals(0, test3.compareTo(test2));
+        
+        DateTimeFieldType[] types = new DateTimeFieldType[] {
+            DateTimeFieldType.hourOfDay(),
+            DateTimeFieldType.minuteOfHour(),
+            DateTimeFieldType.secondOfMinute(),
+            DateTimeFieldType.millisOfSecond(),
+        };
+        int[] values = new int[] {10, 20, 30, 40};
+        Partial p = new Partial(types, values);
+        assertEquals(0, test1.compareTo(p));
+        assertEquals(0, test1.compareTo(new TimeOfDay(10, 20, 30, 40)));
+        try {
+            test1.compareTo(null);
+            fail();
+        } catch (NullPointerException ex) {}
+        try {
+            test1.compareTo(new Date());
+            fail();
+        } catch (ClassCastException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
+    public void testIsEqual_LocalTime() {
+        LocalTime test1 = new LocalTime(10, 20, 30, 40);
+        LocalTime test1a = new LocalTime(10, 20, 30, 40);
+        assertEquals(true, test1.isEqual(test1a));
+        assertEquals(true, test1a.isEqual(test1));
+        assertEquals(true, test1.isEqual(test1));
+        assertEquals(true, test1a.isEqual(test1a));
+        
+        LocalTime test2 = new LocalTime(10, 20, 35, 40);
+        assertEquals(false, test1.isEqual(test2));
+        assertEquals(false, test2.isEqual(test1));
+        
+        LocalTime test3 = new LocalTime(10, 20, 35, 40, GregorianChronology.getInstanceUTC());
+        assertEquals(false, test1.isEqual(test3));
+        assertEquals(false, test3.isEqual(test1));
+        assertEquals(true, test3.isEqual(test2));
+        
+        try {
+            new LocalTime(10, 20, 35, 40).isEqual(null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+    
+    //-----------------------------------------------------------------------
+    public void testIsBefore_LocalTime() {
+        LocalTime test1 = new LocalTime(10, 20, 30, 40);
+        LocalTime test1a = new LocalTime(10, 20, 30, 40);
+        assertEquals(false, test1.isBefore(test1a));
+        assertEquals(false, test1a.isBefore(test1));
+        assertEquals(false, test1.isBefore(test1));
+        assertEquals(false, test1a.isBefore(test1a));
+        
+        LocalTime test2 = new LocalTime(10, 20, 35, 40);
+        assertEquals(true, test1.isBefore(test2));
+        assertEquals(false, test2.isBefore(test1));
+        
+        LocalTime test3 = new LocalTime(10, 20, 35, 40, GregorianChronology.getInstanceUTC());
+        assertEquals(true, test1.isBefore(test3));
+        assertEquals(false, test3.isBefore(test1));
+        assertEquals(false, test3.isBefore(test2));
+        
+        try {
+            new LocalTime(10, 20, 35, 40).isBefore(null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+    
+    //-----------------------------------------------------------------------
+    public void testIsAfter_LocalTime() {
+        LocalTime test1 = new LocalTime(10, 20, 30, 40);
+        LocalTime test1a = new LocalTime(10, 20, 30, 40);
+        assertEquals(false, test1.isAfter(test1a));
+        assertEquals(false, test1a.isAfter(test1));
+        assertEquals(false, test1.isAfter(test1));
+        assertEquals(false, test1a.isAfter(test1a));
+        
+        LocalTime test2 = new LocalTime(10, 20, 35, 40);
+        assertEquals(false, test1.isAfter(test2));
+        assertEquals(true, test2.isAfter(test1));
+        
+        LocalTime test3 = new LocalTime(10, 20, 35, 40, GregorianChronology.getInstanceUTC());
+        assertEquals(false, test1.isAfter(test3));
+        assertEquals(true, test3.isAfter(test1));
+        assertEquals(false, test3.isAfter(test2));
+        
+        try {
+            new LocalTime(10, 20, 35, 40).isAfter(null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
+    public void testWithField_DateTimeFieldType_int_1() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        LocalTime result = test.withField(DateTimeFieldType.hourOfDay(), 15);
+        
+        assertEquals(new LocalTime(10, 20, 30, 40), test);
+        assertEquals(new LocalTime(15, 20, 30, 40), result);
+    }
+
+    public void testWithField_DateTimeFieldType_int_2() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        try {
+            test.withField(null, 6);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testWithField_DateTimeFieldType_int_3() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        try {
+            test.withField(DateTimeFieldType.dayOfMonth(), 6);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testWithField_DateTimeFieldType_int_4() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        LocalTime result = test.withField(DateTimeFieldType.hourOfDay(), 10);
+        assertSame(test, result);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testWithFieldAdded_DurationFieldType_int_1() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        LocalTime result = test.withFieldAdded(DurationFieldType.hours(), 6);
+        
+        assertEquals(new LocalTime(10, 20, 30, 40), test);
+        assertEquals(new LocalTime(16, 20, 30, 40), result);
+    }
+
+    public void testWithFieldAdded_DurationFieldType_int_2() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        try {
+            test.withFieldAdded(null, 0);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testWithFieldAdded_DurationFieldType_int_3() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        try {
+            test.withFieldAdded(null, 6);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testWithFieldAdded_DurationFieldType_int_4() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        LocalTime result = test.withFieldAdded(DurationFieldType.hours(), 0);
+        assertSame(test, result);
+    }
+
+    public void testWithFieldAdded_DurationFieldType_int_5() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        try {
+            test.withFieldAdded(DurationFieldType.days(), 6);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testWithFieldAdded_DurationFieldType_int_6() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        LocalTime result = test.withFieldAdded(DurationFieldType.hours(), 16);
+        
+        assertEquals(new LocalTime(10, 20, 30, 40), test);
+        assertEquals(new LocalTime(2, 20, 30, 40), result);
+    }
+
+    public void testWithFieldAdded_DurationFieldType_int_7() {
+        LocalTime test = new LocalTime(23, 59, 59, 999);
+        LocalTime result = test.withFieldAdded(DurationFieldType.millis(), 1);
+        assertEquals(new LocalTime(0, 0, 0, 0), result);
+        
+        test = new LocalTime(23, 59, 59, 999);
+        result = test.withFieldAdded(DurationFieldType.seconds(), 1);
+        assertEquals(new LocalTime(0, 0, 0, 999), result);
+        
+        test = new LocalTime(23, 59, 59, 999);
+        result = test.withFieldAdded(DurationFieldType.minutes(), 1);
+        assertEquals(new LocalTime(0, 0, 59, 999), result);
+        
+        test = new LocalTime(23, 59, 59, 999);
+        result = test.withFieldAdded(DurationFieldType.hours(), 1);
+        assertEquals(new LocalTime(0, 59, 59, 999), result);
+    }
+
+    public void testWithFieldAdded_DurationFieldType_int_8() {
+        LocalTime test = new LocalTime(0, 0, 0, 0);
+        LocalTime result = test.withFieldAdded(DurationFieldType.millis(), -1);
+        assertEquals(new LocalTime(23, 59, 59, 999), result);
+        
+        test = new LocalTime(0, 0, 0, 0);
+        result = test.withFieldAdded(DurationFieldType.seconds(), -1);
+        assertEquals(new LocalTime(23, 59, 59, 0), result);
+        
+        test = new LocalTime(0, 0, 0, 0);
+        result = test.withFieldAdded(DurationFieldType.minutes(), -1);
+        assertEquals(new LocalTime(23, 59, 0, 0), result);
+        
+        test = new LocalTime(0, 0, 0, 0);
+        result = test.withFieldAdded(DurationFieldType.hours(), -1);
+        assertEquals(new LocalTime(23, 0, 0, 0), result);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testPlus_RP() {
+        LocalTime test = new LocalTime(10, 20, 30, 40, BUDDHIST_LONDON);
+        LocalTime result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8));
+        LocalTime expected = new LocalTime(15, 26, 37, 48, BUDDHIST_LONDON);
+        assertEquals(expected, result);
+        
+        result = test.plus((ReadablePeriod) null);
+        assertSame(test, result);
+    }
+
+    public void testPlusHours_int() {
+        LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON);
+        LocalTime result = test.plusHours(1);
+        LocalTime expected = new LocalTime(2, 2, 3, 4, BUDDHIST_LONDON);
+        assertEquals(expected, result);
+        
+        result = test.plusHours(0);
+        assertSame(test, result);
+    }
+
+    public void testPlusMinutes_int() {
+        LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON);
+        LocalTime result = test.plusMinutes(1);
+        LocalTime expected = new LocalTime(1, 3, 3, 4, BUDDHIST_LONDON);
+        assertEquals(expected, result);
+        
+        result = test.plusMinutes(0);
+        assertSame(test, result);
+    }
+
+    public void testPlusSeconds_int() {
+        LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON);
+        LocalTime result = test.plusSeconds(1);
+        LocalTime expected = new LocalTime(1, 2, 4, 4, BUDDHIST_LONDON);
+        assertEquals(expected, result);
+        
+        result = test.plusSeconds(0);
+        assertSame(test, result);
+    }
+
+    public void testPlusMillis_int() {
+        LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON);
+        LocalTime result = test.plusMillis(1);
+        LocalTime expected = new LocalTime(1, 2, 3, 5, BUDDHIST_LONDON);
+        assertEquals(expected, result);
+        
+        result = test.plusMillis(0);
+        assertSame(test, result);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testMinus_RP() {
+        LocalTime test = new LocalTime(10, 20, 30, 40, BUDDHIST_LONDON);
+        LocalTime result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1));
+        LocalTime expected = new LocalTime(9, 19, 29, 39, BUDDHIST_LONDON);
+        assertEquals(expected, result);
+        
+        result = test.minus((ReadablePeriod) null);
+        assertSame(test, result);
+    }
+
+    public void testMinusHours_int() {
+        LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON);
+        LocalTime result = test.minusHours(1);
+        LocalTime expected = new LocalTime(0, 2, 3, 4, BUDDHIST_LONDON);
+        assertEquals(expected, result);
+        
+        result = test.minusHours(0);
+        assertSame(test, result);
+    }
+
+    public void testMinusMinutes_int() {
+        LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON);
+        LocalTime result = test.minusMinutes(1);
+        LocalTime expected = new LocalTime(1, 1, 3, 4, BUDDHIST_LONDON);
+        assertEquals(expected, result);
+        
+        result = test.minusMinutes(0);
+        assertSame(test, result);
+    }
+
+    public void testMinusSeconds_int() {
+        LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON);
+        LocalTime result = test.minusSeconds(1);
+        LocalTime expected = new LocalTime(1, 2, 2, 4, BUDDHIST_LONDON);
+        assertEquals(expected, result);
+        
+        result = test.minusSeconds(0);
+        assertSame(test, result);
+    }
+
+    public void testMinusMillis_int() {
+        LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON);
+        LocalTime result = test.minusMillis(1);
+        LocalTime expected = new LocalTime(1, 2, 3, 3, BUDDHIST_LONDON);
+        assertEquals(expected, result);
+        
+        result = test.minusMillis(0);
+        assertSame(test, result);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testGetters() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        assertEquals(10, test.getHourOfDay());
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(30, test.getSecondOfMinute());
+        assertEquals(40, test.getMillisOfSecond());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testWithers() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        check(test.withHourOfDay(6), 6, 20, 30, 40);
+        check(test.withMinuteOfHour(6), 10, 6, 30, 40);
+        check(test.withSecondOfMinute(6), 10, 20, 6, 40);
+        check(test.withMillisOfSecond(6), 10, 20, 30, 6);
+        try {
+            test.withHourOfDay(-1);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            test.withHourOfDay(24);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToDateTimeTodayDefaultZone() {
+        LocalTime base = new LocalTime(10, 20, 30, 40, COPTIC_PARIS); // PARIS irrelevant
+        DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9);
+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());
+        
+        DateTime test = base.toDateTimeTodayDefaultZone();
+        check(base, 10, 20, 30, 40);
+        DateTime expected = new DateTime(dt.getMillis(), COPTIC_LONDON);
+        expected = expected.hourOfDay().setCopy(10);
+        expected = expected.minuteOfHour().setCopy(20);
+        expected = expected.secondOfMinute().setCopy(30);
+        expected = expected.millisOfSecond().setCopy(40);
+        assertEquals(expected, test);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToDateTimeToday_Zone() {
+        LocalTime base = new LocalTime(10, 20, 30, 40, COPTIC_PARIS); // PARIS irrelevant
+        DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9);
+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());
+        
+        DateTime test = base.toDateTimeToday(TOKYO);
+        check(base, 10, 20, 30, 40);
+        DateTime expected = new DateTime(dt.getMillis(), COPTIC_TOKYO);
+        expected = expected.hourOfDay().setCopy(10);
+        expected = expected.minuteOfHour().setCopy(20);
+        expected = expected.secondOfMinute().setCopy(30);
+        expected = expected.millisOfSecond().setCopy(40);
+        assertEquals(expected, test);
+    }
+
+    public void testToDateTimeToday_nullZone() {
+        LocalTime base = new LocalTime(10, 20, 30, 40, COPTIC_PARIS); // PARIS irrelevant
+        DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9);
+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());
+        
+        DateTime test = base.toDateTimeToday((DateTimeZone) null);
+        check(base, 10, 20, 30, 40);
+        DateTime expected = new DateTime(dt.getMillis(), COPTIC_LONDON);
+        expected = expected.hourOfDay().setCopy(10);
+        expected = expected.minuteOfHour().setCopy(20);
+        expected = expected.secondOfMinute().setCopy(30);
+        expected = expected.millisOfSecond().setCopy(40);
+        assertEquals(expected, test);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToDateTime_RI() {
+        LocalTime base = new LocalTime(10, 20, 30, 40, COPTIC_PARIS);
+        DateTime dt = new DateTime(0L); // LONDON zone
+        assertEquals("1970-01-01T01:00:00.000+01:00", dt.toString());
+        
+        DateTime test = base.toDateTime(dt);
+        check(base, 10, 20, 30, 40);
+        assertEquals("1970-01-01T01:00:00.000+01:00", dt.toString());
+        assertEquals("1970-01-01T10:20:30.040+01:00", test.toString());
+    }
+
+    public void testToDateTime_nullRI() {
+        LocalTime base = new LocalTime(1, 2, 3, 4);
+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME2);
+        
+        DateTime test = base.toDateTime((ReadableInstant) null);
+        check(base, 1, 2, 3, 4);
+        assertEquals("1970-01-02T01:02:03.004+01:00", test.toString());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testProperty() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        assertEquals(test.hourOfDay(), test.property(DateTimeFieldType.hourOfDay()));
+        assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour()));
+        assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute()));
+        assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond()));
+        
+        assertEquals(test, test.property(DateTimeFieldType.minuteOfDay()).getLocalTime());
+        assertEquals(test, test.property(DateTimeFieldType.secondOfDay()).getLocalTime());
+        assertEquals(test, test.property(DateTimeFieldType.millisOfDay()).getLocalTime());
+        assertEquals(test, test.property(DateTimeFieldType.hourOfHalfday()).getLocalTime());
+        assertEquals(test, test.property(DateTimeFieldType.halfdayOfDay()).getLocalTime());
+        assertEquals(test, test.property(DateTimeFieldType.clockhourOfHalfday()).getLocalTime());
+        assertEquals(test, test.property(DateTimeFieldType.clockhourOfDay()).getLocalTime());
+        
+        try {
+            test.property(DateTimeFieldType.dayOfWeek());
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            test.property(null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
+    public void testSerialization() throws Exception {
+        LocalTime test = new LocalTime(10, 20, 30, 40, COPTIC_PARIS);
+        
+        ByteArrayOutputStream baos = new ByteArrayOutputStream();
+        ObjectOutputStream oos = new ObjectOutputStream(baos);
+        oos.writeObject(test);
+        byte[] bytes = baos.toByteArray();
+        oos.close();
+        
+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
+        ObjectInputStream ois = new ObjectInputStream(bais);
+        LocalTime result = (LocalTime) ois.readObject();
+        ois.close();
+        
+        assertEquals(test, result);
+        assertTrue(Arrays.equals(test.getValues(), result.getValues()));
+        assertTrue(Arrays.equals(test.getFields(), result.getFields()));
+        assertEquals(test.getChronology(), result.getChronology());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToString() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        assertEquals("10:20:30.040", test.toString());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToString_String() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        assertEquals("\ufffd\ufffd\ufffd\ufffd 10", test.toString("yyyy HH"));
+        assertEquals("10:20:30.040", test.toString((String) null));
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToString_String_Locale() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        assertEquals("10 20", test.toString("H m", Locale.ENGLISH));
+        assertEquals("10:20:30.040", test.toString(null, Locale.ENGLISH));
+        assertEquals("10 20", test.toString("H m", null));
+        assertEquals("10:20:30.040", test.toString(null, null));
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToString_DTFormatter() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        assertEquals("\ufffd\ufffd\ufffd\ufffd 10", test.toString(DateTimeFormat.forPattern("yyyy HH")));
+        assertEquals("10:20:30.040", test.toString((DateTimeFormatter) null));
+    }
+
+    //-----------------------------------------------------------------------
+    private void check(LocalTime test, int hour, int min, int sec, int milli) {
+        assertEquals(hour, test.getHourOfDay());
+        assertEquals(min, test.getMinuteOfHour());
+        assertEquals(sec, test.getSecondOfMinute());
+        assertEquals(milli, test.getMillisOfSecond());
+    }
+}
diff --git a/JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java b/JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java
new file mode 100644
index 000000000..c6db71cd9
--- /dev/null
+++ b/JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java
@@ -0,0 +1,531 @@
+/*
+ *  Copyright 2001-2006 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time;
+
+import java.util.Calendar;
+import java.util.Date;
+import java.util.GregorianCalendar;
+
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+import org.joda.time.chrono.CopticChronology;
+import org.joda.time.chrono.GJChronology;
+import org.joda.time.chrono.ISOChronology;
+import org.joda.time.chrono.JulianChronology;
+
+/**
+ * This class is a Junit unit test for LocalTime.
+ *
+ * @author Stephen Colebourne
+ */
+public class TestLocalTime_Constructors extends TestCase {
+
+    private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
+    private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
+    private static final ISOChronology ISO_UTC = ISOChronology.getInstanceUTC();
+    private static final JulianChronology JULIAN = JulianChronology.getInstance();
+    private static final JulianChronology JULIAN_PARIS = JulianChronology.getInstance(PARIS);
+    private static final JulianChronology JULIAN_UTC = JulianChronology.getInstanceUTC();
+    private static final int OFFSET_LONDON = LONDON.getOffset(0L) / DateTimeConstants.MILLIS_PER_HOUR;
+    private static final int OFFSET_PARIS = PARIS.getOffset(0L) / DateTimeConstants.MILLIS_PER_HOUR;
+
+    private long TEST_TIME_NOW =
+            10L * DateTimeConstants.MILLIS_PER_HOUR
+            + 20L * DateTimeConstants.MILLIS_PER_MINUTE
+            + 30L * DateTimeConstants.MILLIS_PER_SECOND
+            + 40L;
+
+    private long TEST_TIME1 =
+        1L * DateTimeConstants.MILLIS_PER_HOUR
+        + 2L * DateTimeConstants.MILLIS_PER_MINUTE
+        + 3L * DateTimeConstants.MILLIS_PER_SECOND
+        + 4L;
+
+    private long TEST_TIME2 =
+        1L * DateTimeConstants.MILLIS_PER_DAY
+        + 5L * DateTimeConstants.MILLIS_PER_HOUR
+        + 6L * DateTimeConstants.MILLIS_PER_MINUTE
+        + 7L * DateTimeConstants.MILLIS_PER_SECOND
+        + 8L;
+
+    private DateTimeZone zone = null;
+
+    public static void main(String[] args) {
+        junit.textui.TestRunner.run(suite());
+    }
+
+    public static TestSuite suite() {
+        return new TestSuite(TestLocalTime_Constructors.class);
+    }
+
+    public TestLocalTime_Constructors(String name) {
+        super(name);
+    }
+
+    protected void setUp() throws Exception {
+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
+        zone = DateTimeZone.getDefault();
+        DateTimeZone.setDefault(LONDON);
+        java.util.TimeZone.setDefault(LONDON.toTimeZone());
+    }
+
+    protected void tearDown() throws Exception {
+        DateTimeUtils.setCurrentMillisSystem();
+        DateTimeZone.setDefault(zone);
+        java.util.TimeZone.setDefault(zone.toTimeZone());
+        zone = null;
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Test constructor ()
+     */
+    public void testConstantMidnight() throws Throwable {
+        LocalTime test = LocalTime.MIDNIGHT;
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(0, test.getHourOfDay());
+        assertEquals(0, test.getMinuteOfHour());
+        assertEquals(0, test.getSecondOfMinute());
+        assertEquals(0, test.getMillisOfSecond());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testFactory_ForFields_Calendar() throws Exception {
+        GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);
+        cal.set(Calendar.MILLISECOND, 7);
+        LocalTime expected = new LocalTime(4, 5, 6, 7);
+        assertEquals(expected, LocalTime.forFields(cal));
+        try {
+            LocalTime.forFields((Calendar) null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
+    public void testFactory_ForFields_Date() throws Exception {
+        GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);
+        cal.set(Calendar.MILLISECOND, 7);
+        LocalTime expected = new LocalTime(4, 5, 6, 7);
+        assertEquals(expected, LocalTime.forFields(cal.getTime()));
+        try {
+            LocalTime.forFields((Date) null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
+    public void testFactoryMillisOfDay_long() throws Throwable {
+        LocalTime test = LocalTime.fromMillisOfDay(TEST_TIME1);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1, test.getHourOfDay());
+        assertEquals(2, test.getMinuteOfHour());
+        assertEquals(3, test.getSecondOfMinute());
+        assertEquals(4, test.getMillisOfSecond());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testFactoryMillisOfDay_long_Chronology() throws Throwable {
+        LocalTime test = LocalTime.fromMillisOfDay(TEST_TIME1, JULIAN);
+        assertEquals(JULIAN_UTC, test.getChronology());
+        assertEquals(1, test.getHourOfDay());
+        assertEquals(2, test.getMinuteOfHour());
+        assertEquals(3, test.getSecondOfMinute());
+        assertEquals(4, test.getMillisOfSecond());
+    }
+
+    public void testFactoryMillisOfDay_long_nullChronology() throws Throwable {
+        LocalTime test = LocalTime.fromMillisOfDay(TEST_TIME1, null);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1, test.getHourOfDay());
+        assertEquals(2, test.getMinuteOfHour());
+        assertEquals(3, test.getSecondOfMinute());
+        assertEquals(4, test.getMillisOfSecond());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testFactory_nowDefaultZone() throws Throwable {
+        LocalTime test = LocalTime.nowDefaultZone();
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(10 + OFFSET_LONDON, test.getHourOfDay());
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(30, test.getSecondOfMinute());
+        assertEquals(40, test.getMillisOfSecond());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testFactory_now_DateTimeZone() throws Throwable {
+        DateTime dt = new DateTime(2005, 6, 8, 23, 59, 30, 40, LONDON);
+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());
+        // 23:59 in London is 00:59 the following day in Paris
+        
+        LocalTime test = LocalTime.now(LONDON);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(23, test.getHourOfDay());
+        assertEquals(59, test.getMinuteOfHour());
+        assertEquals(30, test.getSecondOfMinute());
+        assertEquals(40, test.getMillisOfSecond());
+        
+        test = LocalTime.now(PARIS);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(0, test.getHourOfDay());
+        assertEquals(59, test.getMinuteOfHour());
+        assertEquals(30, test.getSecondOfMinute());
+        assertEquals(40, test.getMillisOfSecond());
+    }
+
+    public void testFactory_now_nullDateTimeZone() throws Throwable {
+        DateTime dt = new DateTime(2005, 6, 8, 23, 59, 30, 40, LONDON);
+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());
+        // 23:59 in London is 00:59 the following day in Paris
+        
+        LocalTime test = LocalTime.now((DateTimeZone) null);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(23, test.getHourOfDay());
+        assertEquals(59, test.getMinuteOfHour());
+        assertEquals(30, test.getSecondOfMinute());
+        assertEquals(40, test.getMillisOfSecond());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testFactory_now_Chronology() throws Throwable {
+        LocalTime test = LocalTime.now(JULIAN);
+        assertEquals(JULIAN_UTC, test.getChronology());
+        assertEquals(10 + OFFSET_LONDON, test.getHourOfDay());
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(30, test.getSecondOfMinute());
+        assertEquals(40, test.getMillisOfSecond());
+    }
+
+    public void testFactory_now_nullChronology() throws Throwable {
+        LocalTime test = LocalTime.now((Chronology) null);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(10 + OFFSET_LONDON, test.getHourOfDay());
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(30, test.getSecondOfMinute());
+        assertEquals(40, test.getMillisOfSecond());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testFactory_forInstantDefaultZone_long1() throws Throwable {
+        LocalTime test = LocalTime.forInstantDefaultZone(TEST_TIME1);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());
+        assertEquals(2, test.getMinuteOfHour());
+        assertEquals(3, test.getSecondOfMinute());
+        assertEquals(4, test.getMillisOfSecond());
+    }
+
+    public void testFactory_forInstantDefaultZone_long2() throws Throwable {
+        LocalTime test = LocalTime.forInstantDefaultZone(TEST_TIME2);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(5 + OFFSET_LONDON, test.getHourOfDay());
+        assertEquals(6, test.getMinuteOfHour());
+        assertEquals(7, test.getSecondOfMinute());
+        assertEquals(8, test.getMillisOfSecond());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testFactory_forInstant_long_DateTimeZone() throws Throwable {
+        LocalTime test = LocalTime.forInstant(TEST_TIME1, PARIS);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1 + OFFSET_PARIS, test.getHourOfDay());
+        assertEquals(2, test.getMinuteOfHour());
+        assertEquals(3, test.getSecondOfMinute());
+        assertEquals(4, test.getMillisOfSecond());
+    }
+
+    public void testFactory_forInstant_long_nullDateTimeZone() throws Throwable {
+        LocalTime test = LocalTime.forInstant(TEST_TIME1, (DateTimeZone) null);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());
+        assertEquals(2, test.getMinuteOfHour());
+        assertEquals(3, test.getSecondOfMinute());
+        assertEquals(4, test.getMillisOfSecond());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testFactory_forInstant_long1_Chronology() throws Throwable {
+        LocalTime test = LocalTime.forInstant(TEST_TIME1, JULIAN_PARIS);
+        assertEquals(JULIAN_UTC, test.getChronology());
+        assertEquals(1 + OFFSET_PARIS, test.getHourOfDay());
+        assertEquals(2, test.getMinuteOfHour());
+        assertEquals(3, test.getSecondOfMinute());
+        assertEquals(4, test.getMillisOfSecond());
+    }
+
+    public void testFactory_forInstant_long2_Chronology() throws Throwable {
+        LocalTime test = LocalTime.forInstant(TEST_TIME2, JULIAN);
+        assertEquals(JULIAN_UTC, test.getChronology());
+        assertEquals(5 + OFFSET_LONDON, test.getHourOfDay());
+        assertEquals(6, test.getMinuteOfHour());
+        assertEquals(7, test.getSecondOfMinute());
+        assertEquals(8, test.getMillisOfSecond());
+    }
+
+    public void testFactory_forInstant_long_nullChronology() throws Throwable {
+        LocalTime test = LocalTime.forInstant(TEST_TIME1, (Chronology) null);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());
+        assertEquals(2, test.getMinuteOfHour());
+        assertEquals(3, test.getSecondOfMinute());
+        assertEquals(4, test.getMillisOfSecond());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testFactory_forInstant_Object1() throws Throwable {
+        Date date = new Date(TEST_TIME1);
+        LocalTime test = LocalTime.forInstant(date);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());
+        assertEquals(2, test.getMinuteOfHour());
+        assertEquals(3, test.getSecondOfMinute());
+        assertEquals(4, test.getMillisOfSecond());
+    }
+
+    public void testFactory_forInstant_Object2() throws Throwable {
+        Calendar cal = new GregorianCalendar();
+        cal.setTime(new Date(TEST_TIME1));
+        LocalTime test = LocalTime.forInstant(cal);
+        assertEquals(GJChronology.getInstanceUTC(), test.getChronology());
+        assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());
+        assertEquals(2, test.getMinuteOfHour());
+        assertEquals(3, test.getSecondOfMinute());
+        assertEquals(4, test.getMillisOfSecond());
+    }
+
+    public void testFactory_forInstant_nullObject() throws Throwable {
+        LocalTime test = LocalTime.forInstant((Object) null);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(10 + OFFSET_LONDON, test.getHourOfDay());
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(30, test.getSecondOfMinute());
+        assertEquals(40, test.getMillisOfSecond());
+    }
+
+//    public void testFactory_forInstant_localTimeObject() throws Throwable {
+//        LocalTime base = new LocalTime(10, 20, 30, 40, CopticChronology.getInstance(PARIS));
+//        LocalTime test = LocalTime.forInstant(base);
+//        assertEquals(CopticChronology.getInstanceUTC(), test.getChronology());
+//        assertEquals(10, test.getHourOfDay());
+//        assertEquals(20, test.getMinuteOfHour());
+//        assertEquals(30, test.getSecondOfMinute());
+//        assertEquals(40, test.getMillisOfSecond());
+//    }
+
+    //-----------------------------------------------------------------------
+    public void testFactory_forInstant_Object1_Chronology() throws Throwable {
+        Date date = new Date(TEST_TIME1);
+        LocalTime test = LocalTime.forInstant(date, JULIAN);
+        assertEquals(JULIAN_UTC, test.getChronology());
+        assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());
+        assertEquals(2, test.getMinuteOfHour());
+        assertEquals(3, test.getSecondOfMinute());
+        assertEquals(4, test.getMillisOfSecond());
+    }
+
+    public void testFactory_forInstant_Object2_Chronology() throws Throwable {
+        LocalTime test = LocalTime.forInstant("T10:20");
+        assertEquals(10, test.getHourOfDay());
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(0, test.getSecondOfMinute());
+        assertEquals(0, test.getMillisOfSecond());
+        
+        try {
+            LocalTime.forInstant("T1020");
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testFactory_forInstant_nullObject_Chronology() throws Throwable {
+        LocalTime test = LocalTime.forInstant((Object) null, JULIAN);
+        assertEquals(JULIAN_UTC, test.getChronology());
+        assertEquals(10 + OFFSET_LONDON, test.getHourOfDay());
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(30, test.getSecondOfMinute());
+        assertEquals(40, test.getMillisOfSecond());
+    }
+
+    public void testFactory_forInstant_Object_nullChronology() throws Throwable {
+        Date date = new Date(TEST_TIME1);
+        LocalTime test = LocalTime.forInstant(date, (Chronology) null);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());
+        assertEquals(2, test.getMinuteOfHour());
+        assertEquals(3, test.getSecondOfMinute());
+        assertEquals(4, test.getMillisOfSecond());
+    }
+
+    public void testFactory_forInstant_nullObject_nullChronology() throws Throwable {
+        LocalTime test = LocalTime.forInstant((Object) null, (Chronology) null);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(10 + OFFSET_LONDON, test.getHourOfDay());
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(30, test.getSecondOfMinute());
+        assertEquals(40, test.getMillisOfSecond());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testConstructor_int_int() throws Throwable {
+        LocalTime test = new LocalTime(10, 20);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(10, test.getHourOfDay());
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(0, test.getSecondOfMinute());
+        assertEquals(0, test.getMillisOfSecond());
+        try {
+            new LocalTime(-1, 20);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            new LocalTime(24, 20);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            new LocalTime(10, -1);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            new LocalTime(10, 60);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testConstructor_int_int_int() throws Throwable {
+        LocalTime test = new LocalTime(10, 20, 30);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(10, test.getHourOfDay());
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(30, test.getSecondOfMinute());
+        assertEquals(0, test.getMillisOfSecond());
+        try {
+            new LocalTime(-1, 20, 30);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            new LocalTime(24, 20, 30);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            new LocalTime(10, -1, 30);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            new LocalTime(10, 60, 30);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            new LocalTime(10, 20, -1);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            new LocalTime(10, 20, 60);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testConstructor_int_int_int_int() throws Throwable {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(10, test.getHourOfDay());
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(30, test.getSecondOfMinute());
+        assertEquals(40, test.getMillisOfSecond());
+        try {
+            new LocalTime(-1, 20, 30, 40);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            new LocalTime(24, 20, 30, 40);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            new LocalTime(10, -1, 30, 40);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            new LocalTime(10, 60, 30, 40);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            new LocalTime(10, 20, -1, 40);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            new LocalTime(10, 20, 60, 40);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            new LocalTime(10, 20, 30, -1);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            new LocalTime(10, 20, 30, 1000);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testConstructor_int_int_int_int_Chronology() throws Throwable {
+        LocalTime test = new LocalTime(10, 20, 30, 40, JULIAN);
+        assertEquals(JULIAN_UTC, test.getChronology());
+        assertEquals(10, test.getHourOfDay());
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(30, test.getSecondOfMinute());
+        assertEquals(40, test.getMillisOfSecond());
+        try {
+            new LocalTime(-1, 20, 30, 40, JULIAN);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            new LocalTime(24, 20, 30, 40, JULIAN);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            new LocalTime(10, -1, 30, 40, JULIAN);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            new LocalTime(10, 60, 30, 40, JULIAN);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            new LocalTime(10, 20, -1, 40, JULIAN);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            new LocalTime(10, 20, 60, 40, JULIAN);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            new LocalTime(10, 20, 30, -1, JULIAN);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            new LocalTime(10, 20, 30, 1000, JULIAN);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testConstructor_int_int_int_int_nullChronology() throws Throwable {
+        LocalTime test = new LocalTime(10, 20, 30, 40, null);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(10, test.getHourOfDay());
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(30, test.getSecondOfMinute());
+        assertEquals(40, test.getMillisOfSecond());
+    }
+
+}
diff --git a/JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java b/JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java
new file mode 100644
index 000000000..862440d7c
--- /dev/null
+++ b/JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java
@@ -0,0 +1,785 @@
+/*
+ *  Copyright 2001-2006 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time;
+
+import java.util.Locale;
+
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+/**
+ * This class is a Junit unit test for TimeOfDay.
+ *
+ * @author Stephen Colebourne
+ */
+public class TestLocalTime_Properties extends TestCase {
+
+    private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
+
+    private long TEST_TIME_NOW =
+            10L * DateTimeConstants.MILLIS_PER_HOUR
+            + 20L * DateTimeConstants.MILLIS_PER_MINUTE
+            + 30L * DateTimeConstants.MILLIS_PER_SECOND
+            + 40L;
+
+    private long TEST_TIME1 =
+        1L * DateTimeConstants.MILLIS_PER_HOUR
+        + 2L * DateTimeConstants.MILLIS_PER_MINUTE
+        + 3L * DateTimeConstants.MILLIS_PER_SECOND
+        + 4L;
+
+    private long TEST_TIME2 =
+        1L * DateTimeConstants.MILLIS_PER_DAY
+        + 5L * DateTimeConstants.MILLIS_PER_HOUR
+        + 6L * DateTimeConstants.MILLIS_PER_MINUTE
+        + 7L * DateTimeConstants.MILLIS_PER_SECOND
+        + 8L;
+
+    private DateTimeZone zone = null;
+
+    public static void main(String[] args) {
+        junit.textui.TestRunner.run(suite());
+    }
+
+    public static TestSuite suite() {
+        return new TestSuite(TestLocalTime_Properties.class);
+    }
+
+    public TestLocalTime_Properties(String name) {
+        super(name);
+    }
+
+    protected void setUp() throws Exception {
+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
+        zone = DateTimeZone.getDefault();
+        DateTimeZone.setDefault(LONDON);
+    }
+
+    protected void tearDown() throws Exception {
+        DateTimeUtils.setCurrentMillisSystem();
+        DateTimeZone.setDefault(zone);
+        zone = null;
+    }
+
+    //-----------------------------------------------------------------------
+    public void testPropertyGetHour() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        assertSame(test.getChronology().hourOfDay(), test.hourOfDay().getField());
+        assertEquals("hourOfDay", test.hourOfDay().getName());
+        assertEquals("Property[hourOfDay]", test.hourOfDay().toString());
+        assertSame(test, test.hourOfDay().getLocalTime());
+        assertEquals(10, test.hourOfDay().get());
+        assertEquals("10", test.hourOfDay().getAsString());
+        assertEquals("10", test.hourOfDay().getAsText());
+        assertEquals("10", test.hourOfDay().getAsText(Locale.FRENCH));
+        assertEquals("10", test.hourOfDay().getAsShortText());
+        assertEquals("10", test.hourOfDay().getAsShortText(Locale.FRENCH));
+        assertEquals(test.getChronology().hours(), test.hourOfDay().getDurationField());
+        assertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField());
+        assertEquals(2, test.hourOfDay().getMaximumTextLength(null));
+        assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null));
+    }
+
+    public void testPropertyRoundHour() {
+        LocalTime test = new LocalTime(10, 20);
+        check(test.hourOfDay().withRoundedCeiling(), 11, 0, 0, 0);
+        check(test.hourOfDay().withRoundedFloor(), 10, 0, 0, 0);
+        check(test.hourOfDay().withRoundedHalfCeiling(), 10, 0, 0, 0);
+        check(test.hourOfDay().withRoundedHalfFloor(), 10, 0, 0, 0);
+        check(test.hourOfDay().withRoundedHalfEven(), 10, 0, 0, 0);
+        
+        test = new LocalTime(10, 40);
+        check(test.hourOfDay().withRoundedCeiling(), 11, 0, 0, 0);
+        check(test.hourOfDay().withRoundedFloor(), 10, 0, 0, 0);
+        check(test.hourOfDay().withRoundedHalfCeiling(), 11, 0, 0, 0);
+        check(test.hourOfDay().withRoundedHalfFloor(), 11, 0, 0, 0);
+        check(test.hourOfDay().withRoundedHalfEven(), 11, 0, 0, 0);
+        
+        test = new LocalTime(10, 30);
+        check(test.hourOfDay().withRoundedCeiling(), 11, 0, 0, 0);
+        check(test.hourOfDay().withRoundedFloor(), 10, 0, 0, 0);
+        check(test.hourOfDay().withRoundedHalfCeiling(), 11, 0, 0, 0);
+        check(test.hourOfDay().withRoundedHalfFloor(), 10, 0, 0, 0);
+        check(test.hourOfDay().withRoundedHalfEven(), 10, 0, 0, 0);
+        
+        test = new LocalTime(11, 30);
+        check(test.hourOfDay().withRoundedCeiling(), 12, 0, 0, 0);
+        check(test.hourOfDay().withRoundedFloor(), 11, 0, 0, 0);
+        check(test.hourOfDay().withRoundedHalfCeiling(), 12, 0, 0, 0);
+        check(test.hourOfDay().withRoundedHalfFloor(), 11, 0, 0, 0);
+        check(test.hourOfDay().withRoundedHalfEven(), 12, 0, 0, 0);
+    }
+
+    public void testPropertyGetMaxMinValuesHour() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        assertEquals(0, test.hourOfDay().getMinimumValue());
+        assertEquals(0, test.hourOfDay().getMinimumValueOverall());
+        assertEquals(23, test.hourOfDay().getMaximumValue());
+        assertEquals(23, test.hourOfDay().getMaximumValueOverall());
+    }
+
+    public void testPropertyWithMaxMinValueHour() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        check(test.hourOfDay().withMaximumValue(), 23, 20, 30, 40);
+        check(test.hourOfDay().withMinimumValue(), 0, 20, 30, 40);
+    }
+
+    public void testPropertyPlusHour() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        LocalTime copy = test.hourOfDay().plus(9);
+        check(test, 10, 20, 30, 40);
+        check(copy, 19, 20, 30, 40);
+        
+        copy = test.hourOfDay().plus(0);
+        check(copy, 10, 20, 30, 40);
+        
+        copy = test.hourOfDay().plus(13);
+        check(copy, 23, 20, 30, 40);
+        
+        copy = test.hourOfDay().plus(14);
+        check(copy, 0, 20, 30, 40);
+        
+        copy = test.hourOfDay().plus(-10);
+        check(copy, 0, 20, 30, 40);
+        
+        copy = test.hourOfDay().plus(-11);
+        check(copy, 23, 20, 30, 40);
+    }
+
+    public void testPropertyPlusNoWrapHour() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        LocalTime copy = test.hourOfDay().plusNoWrap(9);
+        check(test, 10, 20, 30, 40);
+        check(copy, 19, 20, 30, 40);
+        
+        copy = test.hourOfDay().plusNoWrap(0);
+        check(copy, 10, 20, 30, 40);
+        
+        copy = test.hourOfDay().plusNoWrap(13);
+        check(copy, 23, 20, 30, 40);
+        
+        try {
+            test.hourOfDay().plusNoWrap(14);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        check(test, 10, 20, 30, 40);
+        
+        copy = test.hourOfDay().plusNoWrap(-10);
+        check(copy, 0, 20, 30, 40);
+        
+        try {
+            test.hourOfDay().plusNoWrap(-11);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        check(test, 10, 20, 30, 40);
+    }
+
+    public void testPropertyPlusWrapFieldHour() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        LocalTime copy = test.hourOfDay().plusWrapField(9);
+        check(test, 10, 20, 30, 40);
+        check(copy, 19, 20, 30, 40);
+        
+        copy = test.hourOfDay().plusWrapField(0);
+        check(copy, 10, 20, 30, 40);
+        
+        copy = test.hourOfDay().plusWrapField(18);
+        check(copy, 4, 20, 30, 40);
+        
+        copy = test.hourOfDay().plusWrapField(-15);
+        check(copy, 19, 20, 30, 40);
+    }
+
+    public void testPropertySetHour() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        LocalTime copy = test.hourOfDay().withValue(12);
+        check(test, 10, 20, 30, 40);
+        check(copy, 12, 20, 30, 40);
+        
+        try {
+            test.hourOfDay().withValue(24);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            test.hourOfDay().withValue(-1);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testPropertySetTextHour() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        LocalTime copy = test.hourOfDay().withValue("12");
+        check(test, 10, 20, 30, 40);
+        check(copy, 12, 20, 30, 40);
+    }
+
+    public void testPropertyWithMaximumValueHour() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        LocalTime copy = test.hourOfDay().withMaximumValue();
+        check(test, 10, 20, 30, 40);
+        check(copy, 23, 20, 30, 40);
+    }
+
+    public void testPropertyWithMinimumValueHour() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        LocalTime copy = test.hourOfDay().withMinimumValue();
+        check(test, 10, 20, 30, 40);
+        check(copy, 0, 20, 30, 40);
+    }
+
+    public void testPropertyCompareToHour() {
+        LocalTime test1 = LocalTime.forInstantDefaultZone(TEST_TIME1);
+        LocalTime test2 = LocalTime.forInstantDefaultZone(TEST_TIME2);
+        assertEquals(true, test1.hourOfDay().compareTo(test2) < 0);
+        assertEquals(true, test2.hourOfDay().compareTo(test1) > 0);
+        assertEquals(true, test1.hourOfDay().compareTo(test1) == 0);
+        try {
+            test1.hourOfDay().compareTo((ReadablePartial) null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        
+        DateTime dt1 = new DateTime(TEST_TIME1);
+        DateTime dt2 = new DateTime(TEST_TIME2);
+        assertEquals(true, test1.hourOfDay().compareTo(dt2) < 0);
+        assertEquals(true, test2.hourOfDay().compareTo(dt1) > 0);
+        assertEquals(true, test1.hourOfDay().compareTo(dt1) == 0);
+        try {
+            test1.hourOfDay().compareTo((ReadableInstant) null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
+    public void testPropertyGetMinute() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        assertSame(test.getChronology().minuteOfHour(), test.minuteOfHour().getField());
+        assertEquals("minuteOfHour", test.minuteOfHour().getName());
+        assertEquals("Property[minuteOfHour]", test.minuteOfHour().toString());
+        assertSame(test, test.minuteOfHour().getLocalTime());
+        assertEquals(20, test.minuteOfHour().get());
+        assertEquals("20", test.minuteOfHour().getAsString());
+        assertEquals("20", test.minuteOfHour().getAsText());
+        assertEquals("20", test.minuteOfHour().getAsText(Locale.FRENCH));
+        assertEquals("20", test.minuteOfHour().getAsShortText());
+        assertEquals("20", test.minuteOfHour().getAsShortText(Locale.FRENCH));
+        assertEquals(test.getChronology().minutes(), test.minuteOfHour().getDurationField());
+        assertEquals(test.getChronology().hours(), test.minuteOfHour().getRangeDurationField());
+        assertEquals(2, test.minuteOfHour().getMaximumTextLength(null));
+        assertEquals(2, test.minuteOfHour().getMaximumShortTextLength(null));
+    }
+
+    public void testPropertyGetMaxMinValuesMinute() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        assertEquals(0, test.minuteOfHour().getMinimumValue());
+        assertEquals(0, test.minuteOfHour().getMinimumValueOverall());
+        assertEquals(59, test.minuteOfHour().getMaximumValue());
+        assertEquals(59, test.minuteOfHour().getMaximumValueOverall());
+    }
+
+    public void testPropertyWithMaxMinValueMinute() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        check(test.minuteOfHour().withMaximumValue(), 10, 59, 30, 40);
+        check(test.minuteOfHour().withMinimumValue(), 10, 0, 30, 40);
+    }
+
+    public void testPropertyPlusMinute() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        LocalTime copy = test.minuteOfHour().plus(9);
+        check(test, 10, 20, 30, 40);
+        check(copy, 10, 29, 30, 40);
+        
+        copy = test.minuteOfHour().plus(39);
+        check(copy, 10, 59, 30, 40);
+        
+        copy = test.minuteOfHour().plus(40);
+        check(copy, 11, 0, 30, 40);
+        
+        copy = test.minuteOfHour().plus(1 * 60 + 45);
+        check(copy, 12, 5, 30, 40);
+        
+        copy = test.minuteOfHour().plus(13 * 60 + 39);
+        check(copy, 23, 59, 30, 40);
+        
+        copy = test.minuteOfHour().plus(13 * 60 + 40);
+        check(copy, 0, 0, 30, 40);
+        
+        copy = test.minuteOfHour().plus(-9);
+        check(copy, 10, 11, 30, 40);
+        
+        copy = test.minuteOfHour().plus(-19);
+        check(copy, 10, 1, 30, 40);
+        
+        copy = test.minuteOfHour().plus(-20);
+        check(copy, 10, 0, 30, 40);
+        
+        copy = test.minuteOfHour().plus(-21);
+        check(copy, 9, 59, 30, 40);
+        
+        copy = test.minuteOfHour().plus(-(10 * 60 + 20));
+        check(copy, 0, 0, 30, 40);
+        
+        copy = test.minuteOfHour().plus(-(10 * 60 + 21));
+        check(copy, 23, 59, 30, 40);
+    }
+
+    public void testPropertyPlusNoWrapMinute() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        LocalTime copy = test.minuteOfHour().plusNoWrap(9);
+        check(test, 10, 20, 30, 40);
+        check(copy, 10, 29, 30, 40);
+        
+        copy = test.minuteOfHour().plusNoWrap(39);
+        check(copy, 10, 59, 30, 40);
+        
+        copy = test.minuteOfHour().plusNoWrap(40);
+        check(copy, 11, 0, 30, 40);
+        
+        copy = test.minuteOfHour().plusNoWrap(1 * 60 + 45);
+        check(copy, 12, 5, 30, 40);
+        
+        copy = test.minuteOfHour().plusNoWrap(13 * 60 + 39);
+        check(copy, 23, 59, 30, 40);
+        
+        try {
+            test.minuteOfHour().plusNoWrap(13 * 60 + 40);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        check(test, 10, 20, 30, 40);
+        
+        copy = test.minuteOfHour().plusNoWrap(-9);
+        check(copy, 10, 11, 30, 40);
+        
+        copy = test.minuteOfHour().plusNoWrap(-19);
+        check(copy, 10, 1, 30, 40);
+        
+        copy = test.minuteOfHour().plusNoWrap(-20);
+        check(copy, 10, 0, 30, 40);
+        
+        copy = test.minuteOfHour().plusNoWrap(-21);
+        check(copy, 9, 59, 30, 40);
+        
+        copy = test.minuteOfHour().plusNoWrap(-(10 * 60 + 20));
+        check(copy, 0, 0, 30, 40);
+        
+        try {
+            test.minuteOfHour().plusNoWrap(-(10 * 60 + 21));
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        check(test, 10, 20, 30, 40);
+    }
+
+    public void testPropertyPlusWrapFieldMinute() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        LocalTime copy = test.minuteOfHour().plusWrapField(9);
+        check(test, 10, 20, 30, 40);
+        check(copy, 10, 29, 30, 40);
+        
+        copy = test.minuteOfHour().plusWrapField(49);
+        check(copy, 10, 9, 30, 40);
+        
+        copy = test.minuteOfHour().plusWrapField(-47);
+        check(copy, 10, 33, 30, 40);
+    }
+
+    public void testPropertySetMinute() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        LocalTime copy = test.minuteOfHour().withValue(12);
+        check(test, 10, 20, 30, 40);
+        check(copy, 10, 12, 30, 40);
+        
+        try {
+            test.minuteOfHour().withValue(60);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            test.minuteOfHour().withValue(-1);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testPropertySetTextMinute() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        LocalTime copy = test.minuteOfHour().withValue("12");
+        check(test, 10, 20, 30, 40);
+        check(copy, 10, 12, 30, 40);
+    }
+
+    public void testPropertyCompareToMinute() {
+        LocalTime test1 = LocalTime.forInstantDefaultZone(TEST_TIME1);
+        LocalTime test2 = LocalTime.forInstantDefaultZone(TEST_TIME2);
+        assertEquals(true, test1.minuteOfHour().compareTo(test2) < 0);
+        assertEquals(true, test2.minuteOfHour().compareTo(test1) > 0);
+        assertEquals(true, test1.minuteOfHour().compareTo(test1) == 0);
+        try {
+            test1.minuteOfHour().compareTo((ReadablePartial) null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        
+        DateTime dt1 = new DateTime(TEST_TIME1);
+        DateTime dt2 = new DateTime(TEST_TIME2);
+        assertEquals(true, test1.minuteOfHour().compareTo(dt2) < 0);
+        assertEquals(true, test2.minuteOfHour().compareTo(dt1) > 0);
+        assertEquals(true, test1.minuteOfHour().compareTo(dt1) == 0);
+        try {
+            test1.minuteOfHour().compareTo((ReadableInstant) null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
+    public void testPropertyGetSecond() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        assertSame(test.getChronology().secondOfMinute(), test.secondOfMinute().getField());
+        assertEquals("secondOfMinute", test.secondOfMinute().getName());
+        assertEquals("Property[secondOfMinute]", test.secondOfMinute().toString());
+        assertSame(test, test.secondOfMinute().getLocalTime());
+        assertEquals(30, test.secondOfMinute().get());
+        assertEquals("30", test.secondOfMinute().getAsString());
+        assertEquals("30", test.secondOfMinute().getAsText());
+        assertEquals("30", test.secondOfMinute().getAsText(Locale.FRENCH));
+        assertEquals("30", test.secondOfMinute().getAsShortText());
+        assertEquals("30", test.secondOfMinute().getAsShortText(Locale.FRENCH));
+        assertEquals(test.getChronology().seconds(), test.secondOfMinute().getDurationField());
+        assertEquals(test.getChronology().minutes(), test.secondOfMinute().getRangeDurationField());
+        assertEquals(2, test.secondOfMinute().getMaximumTextLength(null));
+        assertEquals(2, test.secondOfMinute().getMaximumShortTextLength(null));
+    }
+
+    public void testPropertyGetMaxMinValuesSecond() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        assertEquals(0, test.secondOfMinute().getMinimumValue());
+        assertEquals(0, test.secondOfMinute().getMinimumValueOverall());
+        assertEquals(59, test.secondOfMinute().getMaximumValue());
+        assertEquals(59, test.secondOfMinute().getMaximumValueOverall());
+    }
+
+    public void testPropertyWithMaxMinValueSecond() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        check(test.secondOfMinute().withMaximumValue(), 10, 20, 59, 40);
+        check(test.secondOfMinute().withMinimumValue(), 10, 20, 0, 40);
+    }
+
+    public void testPropertyPlusSecond() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        LocalTime copy = test.secondOfMinute().plus(9);
+        check(test, 10, 20, 30, 40);
+        check(copy, 10, 20, 39, 40);
+        
+        copy = test.secondOfMinute().plus(29);
+        check(copy, 10, 20, 59, 40);
+        
+        copy = test.secondOfMinute().plus(30);
+        check(copy, 10, 21, 0, 40);
+        
+        copy = test.secondOfMinute().plus(39 * 60 + 29);
+        check(copy, 10, 59, 59, 40);
+        
+        copy = test.secondOfMinute().plus(39 * 60 + 30);
+        check(copy, 11, 0, 0, 40);
+        
+        copy = test.secondOfMinute().plus(13 * 60 * 60 + 39 * 60 + 30);
+        check(copy, 0, 0, 0, 40);
+        
+        copy = test.secondOfMinute().plus(-9);
+        check(copy, 10, 20, 21, 40);
+        
+        copy = test.secondOfMinute().plus(-30);
+        check(copy, 10, 20, 0, 40);
+        
+        copy = test.secondOfMinute().plus(-31);
+        check(copy, 10, 19, 59, 40);
+        
+        copy = test.secondOfMinute().plus(-(10 * 60 * 60 + 20 * 60 + 30));
+        check(copy, 0, 0, 0, 40);
+        
+        copy = test.secondOfMinute().plus(-(10 * 60 * 60 + 20 * 60 + 31));
+        check(copy, 23, 59, 59, 40);
+    }
+
+    public void testPropertyPlusNoWrapSecond() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        LocalTime copy = test.secondOfMinute().plusNoWrap(9);
+        check(test, 10, 20, 30, 40);
+        check(copy, 10, 20, 39, 40);
+        
+        copy = test.secondOfMinute().plusNoWrap(29);
+        check(copy, 10, 20, 59, 40);
+        
+        copy = test.secondOfMinute().plusNoWrap(30);
+        check(copy, 10, 21, 0, 40);
+        
+        copy = test.secondOfMinute().plusNoWrap(39 * 60 + 29);
+        check(copy, 10, 59, 59, 40);
+        
+        copy = test.secondOfMinute().plusNoWrap(39 * 60 + 30);
+        check(copy, 11, 0, 0, 40);
+        
+        try {
+            test.secondOfMinute().plusNoWrap(13 * 60 * 60 + 39 * 60 + 30);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        check(test, 10, 20, 30, 40);
+        
+        copy = test.secondOfMinute().plusNoWrap(-9);
+        check(copy, 10, 20, 21, 40);
+        
+        copy = test.secondOfMinute().plusNoWrap(-30);
+        check(copy, 10, 20, 0, 40);
+        
+        copy = test.secondOfMinute().plusNoWrap(-31);
+        check(copy, 10, 19, 59, 40);
+        
+        copy = test.secondOfMinute().plusNoWrap(-(10 * 60 * 60 + 20 * 60 + 30));
+        check(copy, 0, 0, 0, 40);
+        
+        try {
+            test.secondOfMinute().plusNoWrap(-(10 * 60 * 60 + 20 * 60 + 31));
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        check(test, 10, 20, 30, 40);
+    }
+
+    public void testPropertyPlusWrapFieldSecond() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        LocalTime copy = test.secondOfMinute().plusWrapField(9);
+        check(test, 10, 20, 30, 40);
+        check(copy, 10, 20, 39, 40);
+        
+        copy = test.secondOfMinute().plusWrapField(49);
+        check(copy, 10, 20, 19, 40);
+        
+        copy = test.secondOfMinute().plusWrapField(-47);
+        check(copy, 10, 20, 43, 40);
+    }
+
+    public void testPropertySetSecond() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        LocalTime copy = test.secondOfMinute().withValue(12);
+        check(test, 10, 20, 30, 40);
+        check(copy, 10, 20, 12, 40);
+        
+        try {
+            test.secondOfMinute().withValue(60);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            test.secondOfMinute().withValue(-1);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testPropertySetTextSecond() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        LocalTime copy = test.secondOfMinute().withValue("12");
+        check(test, 10, 20, 30, 40);
+        check(copy, 10, 20, 12, 40);
+    }
+
+    public void testPropertyCompareToSecond() {
+        LocalTime test1 = LocalTime.forInstantDefaultZone(TEST_TIME1);
+        LocalTime test2 = LocalTime.forInstantDefaultZone(TEST_TIME2);
+        assertEquals(true, test1.secondOfMinute().compareTo(test2) < 0);
+        assertEquals(true, test2.secondOfMinute().compareTo(test1) > 0);
+        assertEquals(true, test1.secondOfMinute().compareTo(test1) == 0);
+        try {
+            test1.secondOfMinute().compareTo((ReadablePartial) null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        
+        DateTime dt1 = new DateTime(TEST_TIME1);
+        DateTime dt2 = new DateTime(TEST_TIME2);
+        assertEquals(true, test1.secondOfMinute().compareTo(dt2) < 0);
+        assertEquals(true, test2.secondOfMinute().compareTo(dt1) > 0);
+        assertEquals(true, test1.secondOfMinute().compareTo(dt1) == 0);
+        try {
+            test1.secondOfMinute().compareTo((ReadableInstant) null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
+    public void testPropertyGetMilli() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        assertSame(test.getChronology().millisOfSecond(), test.millisOfSecond().getField());
+        assertEquals("millisOfSecond", test.millisOfSecond().getName());
+        assertEquals("Property[millisOfSecond]", test.millisOfSecond().toString());
+        assertSame(test, test.millisOfSecond().getLocalTime());
+        assertEquals(40, test.millisOfSecond().get());
+        assertEquals("40", test.millisOfSecond().getAsString());
+        assertEquals("40", test.millisOfSecond().getAsText());
+        assertEquals("40", test.millisOfSecond().getAsText(Locale.FRENCH));
+        assertEquals("40", test.millisOfSecond().getAsShortText());
+        assertEquals("40", test.millisOfSecond().getAsShortText(Locale.FRENCH));
+        assertEquals(test.getChronology().millis(), test.millisOfSecond().getDurationField());
+        assertEquals(test.getChronology().seconds(), test.millisOfSecond().getRangeDurationField());
+        assertEquals(3, test.millisOfSecond().getMaximumTextLength(null));
+        assertEquals(3, test.millisOfSecond().getMaximumShortTextLength(null));
+    }
+
+    public void testPropertyGetMaxMinValuesMilli() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        assertEquals(0, test.millisOfSecond().getMinimumValue());
+        assertEquals(0, test.millisOfSecond().getMinimumValueOverall());
+        assertEquals(999, test.millisOfSecond().getMaximumValue());
+        assertEquals(999, test.millisOfSecond().getMaximumValueOverall());
+    }
+
+    public void testPropertyWithMaxMinValueMilli() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        check(test.millisOfSecond().withMaximumValue(), 10, 20, 30, 999);
+        check(test.millisOfSecond().withMinimumValue(), 10, 20, 30, 0);
+    }
+
+    public void testPropertyPlusMilli() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        LocalTime copy = test.millisOfSecond().plus(9);
+        check(test, 10, 20, 30, 40);
+        check(copy, 10, 20, 30, 49);
+        
+        copy = test.millisOfSecond().plus(959);
+        check(copy, 10, 20, 30, 999);
+        
+        copy = test.millisOfSecond().plus(960);
+        check(copy, 10, 20, 31, 0);
+        
+        copy = test.millisOfSecond().plus(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 959);
+        check(copy, 23, 59, 59, 999);
+        
+        copy = test.millisOfSecond().plus(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 960);
+        check(copy, 0, 0, 0, 0);
+        
+        copy = test.millisOfSecond().plus(-9);
+        check(copy, 10, 20, 30, 31);
+        
+        copy = test.millisOfSecond().plus(-40);
+        check(copy, 10, 20, 30, 0);
+        
+        copy = test.millisOfSecond().plus(-41);
+        check(copy, 10, 20, 29, 999);
+        
+        copy = test.millisOfSecond().plus(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 40));
+        check(copy, 0, 0, 0, 0);
+        
+        copy = test.millisOfSecond().plus(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 41));
+        check(copy, 23, 59, 59, 999);
+    }
+
+    public void testPropertyPlusNoWrapMilli() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        LocalTime copy = test.millisOfSecond().plusNoWrap(9);
+        check(test, 10, 20, 30, 40);
+        check(copy, 10, 20, 30, 49);
+        
+        copy = test.millisOfSecond().plusNoWrap(959);
+        check(copy, 10, 20, 30, 999);
+        
+        copy = test.millisOfSecond().plusNoWrap(960);
+        check(copy, 10, 20, 31, 0);
+        
+        copy = test.millisOfSecond().plusNoWrap(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 959);
+        check(copy, 23, 59, 59, 999);
+        
+        try {
+            test.millisOfSecond().plusNoWrap(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 960);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        check(test, 10, 20, 30, 40);
+        
+        copy = test.millisOfSecond().plusNoWrap(-9);
+        check(copy, 10, 20, 30, 31);
+        
+        copy = test.millisOfSecond().plusNoWrap(-40);
+        check(copy, 10, 20, 30, 0);
+        
+        copy = test.millisOfSecond().plusNoWrap(-41);
+        check(copy, 10, 20, 29, 999);
+        
+        copy = test.millisOfSecond().plusNoWrap(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 40));
+        check(copy, 0, 0, 0, 0);
+        
+        try {
+            test.millisOfSecond().plusNoWrap(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 41));
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        check(test, 10, 20, 30, 40);
+    }
+
+    public void testPropertyPlusWrapFieldMilli() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        LocalTime copy = test.millisOfSecond().plusWrapField(9);
+        check(test, 10, 20, 30, 40);
+        check(copy, 10, 20, 30, 49);
+        
+        copy = test.millisOfSecond().plusWrapField(995);
+        check(copy, 10, 20, 30, 35);
+        
+        copy = test.millisOfSecond().plusWrapField(-47);
+        check(copy, 10, 20, 30, 993);
+    }
+
+    public void testPropertySetMilli() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        LocalTime copy = test.millisOfSecond().withValue(12);
+        check(test, 10, 20, 30, 40);
+        check(copy, 10, 20, 30, 12);
+        
+        try {
+            test.millisOfSecond().withValue(1000);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            test.millisOfSecond().withValue(-1);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testPropertySetTextMilli() {
+        LocalTime test = new LocalTime(10, 20, 30, 40);
+        LocalTime copy = test.millisOfSecond().withValue("12");
+        check(test, 10, 20, 30, 40);
+        check(copy, 10, 20, 30, 12);
+    }
+
+    public void testPropertyCompareToMilli() {
+        LocalTime test1 = LocalTime.forInstantDefaultZone(TEST_TIME1);
+        LocalTime test2 = LocalTime.forInstantDefaultZone(TEST_TIME2);
+        assertEquals(true, test1.millisOfSecond().compareTo(test2) < 0);
+        assertEquals(true, test2.millisOfSecond().compareTo(test1) > 0);
+        assertEquals(true, test1.millisOfSecond().compareTo(test1) == 0);
+        try {
+            test1.millisOfSecond().compareTo((ReadablePartial) null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        
+        DateTime dt1 = new DateTime(TEST_TIME1);
+        DateTime dt2 = new DateTime(TEST_TIME2);
+        assertEquals(true, test1.millisOfSecond().compareTo(dt2) < 0);
+        assertEquals(true, test2.millisOfSecond().compareTo(dt1) > 0);
+        assertEquals(true, test1.millisOfSecond().compareTo(dt1) == 0);
+        try {
+            test1.millisOfSecond().compareTo((ReadableInstant) null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
+    private void check(LocalTime test, int hour, int min, int sec, int milli) {
+        assertEquals(hour, test.getHourOfDay());
+        assertEquals(min, test.getMinuteOfHour());
+        assertEquals(sec, test.getSecondOfMinute());
+        assertEquals(milli, test.getMillisOfSecond());
+    }
+}

From a6142691be6f181f32a2fba00e2faf182cdb1b35 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 31 Jan 2006 00:13:31 +0000
Subject: [PATCH 028/115] Test one or two field period format/parse

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1020 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../joda/time/format/TestPeriodFormat.java    | 24 +++++++++++++++++++
 1 file changed, 24 insertions(+)

diff --git a/JodaTime/src/test/org/joda/time/format/TestPeriodFormat.java b/JodaTime/src/test/org/joda/time/format/TestPeriodFormat.java
index f5325613d..d157b6343 100644
--- a/JodaTime/src/test/org/joda/time/format/TestPeriodFormat.java
+++ b/JodaTime/src/test/org/joda/time/format/TestPeriodFormat.java
@@ -103,4 +103,28 @@ public void testFormatStandard() {
         assertEquals("1 day, 5 hours, 6 minutes, 7 seconds and 8 milliseconds", PeriodFormat.getDefault().print(p));
     }
 
+    //-----------------------------------------------------------------------
+    public void testFormatOneField() {
+        Period p = Period.days(2);
+        assertEquals("2 days", PeriodFormat.getDefault().print(p));
+    }
+
+    //-----------------------------------------------------------------------
+    public void testFormatTwoFields() {
+        Period p = Period.days(2).withHours(5);
+        assertEquals("2 days and 5 hours", PeriodFormat.getDefault().print(p));
+    }
+
+    //-----------------------------------------------------------------------
+    public void testParseOneField() {
+        Period p = Period.days(2);
+        assertEquals(p, PeriodFormat.getDefault().parsePeriod("2 days"));
+    }
+
+    //-----------------------------------------------------------------------
+    public void testParseTwoFields() {
+        Period p = Period.days(2).withHours(5);
+        assertEquals(p, PeriodFormat.getDefault().parsePeriod("2 days and 5 hours"));
+    }
+
 }

From 69b4c490fe272b5dcaded5fef547d83a6ec1df07 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Tue, 31 Jan 2006 04:50:21 +0000
Subject: [PATCH 029/115] Updated to version 2006a.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1021 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/java/org/joda/time/tz/src/Readme.txt  |    2 +-
 JodaTime/src/java/org/joda/time/tz/src/africa | 1244 ++---
 .../src/java/org/joda/time/tz/src/antarctica  |  634 +--
 JodaTime/src/java/org/joda/time/tz/src/asia   | 3294 +++++------
 .../src/java/org/joda/time/tz/src/australasia | 2802 +++++-----
 .../src/java/org/joda/time/tz/src/backward    |  212 +-
 JodaTime/src/java/org/joda/time/tz/src/europe | 4894 ++++++++---------
 .../java/org/joda/time/tz/src/northamerica    | 4420 +++++++--------
 .../java/org/joda/time/tz/src/southamerica    | 2142 ++++----
 9 files changed, 9872 insertions(+), 9772 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
index 283485db1..1d8494773 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
+++ b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
@@ -1,2 +1,2 @@
 The data files in this directory were obtained from the public tz database,
-http://www.twinsun.com/tz/tz-link.htm, version 2005r.
+http://www.twinsun.com/tz/tz-link.htm, version 2006a.
diff --git a/JodaTime/src/java/org/joda/time/tz/src/africa b/JodaTime/src/java/org/joda/time/tz/src/africa
index 153e2546b..4baf6dde8 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/africa
+++ b/JodaTime/src/java/org/joda/time/tz/src/africa
@@ -1,622 +1,622 @@
-# @(#)africa	7.40
-# <pre>
-
-# This data is by no means authoritative; if you think you know better,
-# go ahead and edit the file (and please send any changes to
-# tz@elsie.nci.nih.gov for general use in the future).
-
-# From Paul Eggert (1999-03-22):
-#
-# A good source for time zone historical data outside the U.S. is
-# Thomas G. Shanks, The International Atlas (5th edition),
-# San Diego: ACS Publications, Inc. (1999).
-#
-# Gwillim Law writes that a good source
-# for recent time zone data is the International Air Transport
-# Association's Standard Schedules Information Manual (IATA SSIM),
-# published semiannually.  Law sent in several helpful summaries
-# of the IATA's data after 1990.
-#
-# Except where otherwise noted, Shanks is the source for entries through 1990,
-# and IATA SSIM is the source for entries after 1990.
-#
-# Another source occasionally used is Edward W. Whitman, World Time Differences,
-# Whitman Publishing Co, 2 Niagara Av, Ealing, London (undated), which
-# I found in the UCLA library.
-#
-# A reliable and entertaining source about time zones is
-# Derek Howse, Greenwich time and longitude, Philip Wilson Publishers (1997).
-#
-# Previous editions of this database used WAT, CAT, SAT, and EAT
-# for +0:00 through +3:00, respectively,
-# but Mark R V Murray reports that
-# `SAST' is the official abbreviation for +2:00 in the country of South Africa,
-# `CAT' is commonly used for +2:00 in countries north of South Africa, and
-# `WAT' is probably the best name for +1:00, as the common phrase for
-# the area that includes Nigeria is ``West Africa''.
-# He has heard of ``Western Sahara Time'' for +0:00 but can find no reference.
-#
-# To make things confusing, `WAT' seems to have been used for -1:00 long ago;
-# I'd guess that this was because people needed _some_ name for -1:00,
-# and at the time, far west Africa was the only major land area in -1:00.
-# This usage is now obsolete, as the last use of -1:00 on the African
-# mainland seems to have been 1976 in Western Sahara.
-#
-# To summarize, the following abbreviations seem to have some currency:
-#	-1:00	WAT	West Africa Time (no longer used)
-#	 0:00	GMT	Greenwich Mean Time
-#	 2:00	CAT	Central Africa Time
-#	 2:00	SAST	South Africa Standard Time
-# and Murray suggests the following abbreviation:
-#	 1:00	WAT	West Africa Time
-# I realize that this leads to `WAT' being used for both -1:00 and 1:00
-# for times before 1976, but this is the best I can think of
-# until we get more information.
-#
-# I invented the following abbreviations; corrections are welcome!
-#	 2:00	WAST	West Africa Summer Time
-#	 2:30	BEAT	British East Africa Time (no longer used)
-#	 2:44:45 BEAUT	British East Africa Unified Time (no longer used)
-#	 3:00	CAST	Central Africa Summer Time (no longer used)
-#	 3:00	SAST	South Africa Summer Time (no longer used)
-#	 3:00	EAT	East Africa Time
-#	 4:00	EAST	East Africa Summer Time (no longer used)
-
-# Algeria
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Algeria	1916	only	-	Jun	14	23:00s	1:00	S
-Rule	Algeria	1916	1919	-	Oct	Sun<=7	23:00s	0	-
-Rule	Algeria	1917	only	-	Mar	24	23:00s	1:00	S
-Rule	Algeria	1918	only	-	Mar	 9	23:00s	1:00	S
-Rule	Algeria	1919	only	-	Mar	 1	23:00s	1:00	S
-Rule	Algeria	1920	only	-	Feb	14	23:00s	1:00	S
-Rule	Algeria	1920	only	-	Oct	23	23:00s	0	-
-Rule	Algeria	1921	only	-	Mar	14	23:00s	1:00	S
-Rule	Algeria	1921	only	-	Jun	21	23:00s	0	-
-Rule	Algeria	1939	only	-	Sep	11	23:00s	1:00	S
-Rule	Algeria	1939	only	-	Nov	19	 1:00	0	-
-Rule	Algeria	1944	1945	-	Apr	Mon<=7	 2:00	1:00	S
-Rule	Algeria	1944	only	-	Oct	 8	 2:00	0	-
-Rule	Algeria	1945	only	-	Sep	16	 1:00	0	-
-Rule	Algeria	1971	only	-	Apr	25	23:00s	1:00	S
-Rule	Algeria	1971	only	-	Sep	26	23:00s	0	-
-Rule	Algeria	1977	only	-	May	 6	 0:00	1:00	S
-Rule	Algeria	1977	only	-	Oct	21	 0:00	0	-
-Rule	Algeria	1978	only	-	Mar	24	 1:00	1:00	S
-Rule	Algeria	1978	only	-	Sep	22	 3:00	0	-
-Rule	Algeria	1980	only	-	Apr	25	 0:00	1:00	S
-Rule	Algeria	1980	only	-	Oct	31	 2:00	0	-
-# Shanks gives 0:09 for Paris Mean Time; go with Howse's more precise 0:09:21.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Algiers	0:12:12 -	LMT	1891 Mar 15 0:01
-			0:09:21	-	PMT	1911 Mar 11    # Paris Mean Time
-			0:00	Algeria	WE%sT	1940 Feb 25 2:00
-			1:00	Algeria	CE%sT	1946 Oct  7
-			0:00	-	WET	1956 Jan 29
-			1:00	-	CET	1963 Apr 14
-			0:00	Algeria	WE%sT	1977 Oct 21
-			1:00	Algeria	CE%sT	1979 Oct 26
-			0:00	Algeria	WE%sT	1981 May
-			1:00	-	CET
-
-# Angola
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Luanda	0:52:56	-	LMT	1892
-			0:52:04	-	AOT	1911 May 26 # Angola Time
-			1:00	-	WAT
-
-# Benin
-# Whitman says they switched to 1:00 in 1946, not 1934; go with Shanks.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Africa/Porto-Novo	0:10:28	-	LMT	1912
-			0:00	-	GMT	1934 Feb 26
-			1:00	-	WAT
-
-# Botswana
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Gaborone	1:43:40 -	LMT	1885
-			2:00	-	CAT	1943 Sep 19 2:00
-			2:00	1:00	CAST	1944 Mar 19 2:00
-			2:00	-	CAT
-
-# Burkina Faso
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Africa/Ouagadougou	-0:06:04 -	LMT	1912
-			 0:00	-	GMT
-
-# Burundi
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Africa/Bujumbura	1:57:28	-	LMT	1890
-			2:00	-	CAT
-
-# Cameroon
-# Whitman says they switched to 1:00 in 1920; go with Shanks.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Douala	0:38:48	-	LMT	1912
-			1:00	-	WAT
-
-# Cape Verde
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Atlantic/Cape_Verde -1:34:04 -	LMT	1907			# Praia
-			-2:00	-	CVT	1942 Sep
-			-2:00	1:00	CVST	1945 Oct 15
-			-2:00	-	CVT	1975 Nov 25 2:00
-			-1:00	-	CVT
-
-# Central African Republic
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Bangui	1:14:20	-	LMT	1912
-			1:00	-	WAT
-
-# Chad
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Ndjamena	1:00:12 -	LMT	1912
-			1:00	-	WAT	1979 Oct 14
-			1:00	1:00	WAST	1980 Mar  8
-			1:00	-	WAT
-
-# Comoros
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Indian/Comoro	2:53:04 -	LMT	1911 Jul   # Moroni, Gran Comoro
-			3:00	-	EAT
-
-# Democratic Republic of Congo
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Africa/Kinshasa	1:01:12 -	LMT	1897 Nov 9
-			1:00	-	WAT
-Zone Africa/Lubumbashi	1:49:52 -	LMT	1897 Nov 9
-			2:00	-	CAT
-
-# Republic of the Congo
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Africa/Brazzaville	1:01:08 -	LMT	1912
-			1:00	-	WAT
-
-# Cote D'Ivoire
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Abidjan	-0:16:08 -	LMT	1912
-			 0:00	-	GMT
-
-# Djibouti
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Djibouti	2:52:36 -	LMT	1911 Jul
-			3:00	-	EAT
-
-###############################################################################
-
-# Egypt
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Egypt	1940	only	-	Jul	15	0:00	1:00	S
-Rule	Egypt	1940	only	-	Oct	 1	0:00	0	-
-Rule	Egypt	1941	only	-	Apr	15	0:00	1:00	S
-Rule	Egypt	1941	only	-	Sep	16	0:00	0	-
-Rule	Egypt	1942	1944	-	Apr	 1	0:00	1:00	S
-Rule	Egypt	1942	only	-	Oct	27	0:00	0	-
-Rule	Egypt	1943	1945	-	Nov	 1	0:00	0	-
-Rule	Egypt	1945	only	-	Apr	16	0:00	1:00	S
-Rule	Egypt	1957	only	-	May	10	0:00	1:00	S
-Rule	Egypt	1957	1958	-	Oct	 1	0:00	0	-
-Rule	Egypt	1958	only	-	May	 1	0:00	1:00	S
-Rule	Egypt	1959	1981	-	May	 1	1:00	1:00	S
-Rule	Egypt	1959	1965	-	Sep	30	3:00	0	-
-Rule	Egypt	1966	1994	-	Oct	 1	3:00	0	-
-Rule	Egypt	1982	only	-	Jul	25	1:00	1:00	S
-Rule	Egypt	1983	only	-	Jul	12	1:00	1:00	S
-Rule	Egypt	1984	1988	-	May	 1	1:00	1:00	S
-Rule	Egypt	1989	only	-	May	 6	1:00	1:00	S
-Rule	Egypt	1990	1994	-	May	 1	1:00	1:00	S
-# IATA (after 1990) says transitions are at 0:00.
-# Go with IATA starting in 1995, except correct 1995 entry from 09-30 to 09-29.
-Rule	Egypt	1995	max	-	Apr	lastFri	 0:00s	1:00	S
-Rule	Egypt	1995	max	-	Sep	lastThu	23:00s	0	-
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Cairo	2:05:00 -	LMT	1900 Oct
-			2:00	Egypt	EE%sT
-
-# Equatorial Guinea
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Malabo	0:35:08 -	LMT	1912
-			0:00	-	GMT	1963 Dec 15
-			1:00	-	WAT
-
-# Eritrea
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Asmera	2:35:32 -	LMT	1870
-			2:35:32	-	AMT	1890	      # Asmera Mean Time
-			2:35:20	-	ADMT	1936 May 5    # Adis Dera MT
-			3:00	-	EAT
-
-# Ethiopia
-# From Paul Eggert (1997-10-05):
-# Shanks writes that Ethiopia had six narrowly-spaced time zones between
-# 1870 and 1890, and that they merged to 38E50 (2:35:20) in 1890.
-# We'll guess that 38E50 is for Adis Dera.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Africa/Addis_Ababa	2:34:48 -	LMT	1870
-			2:35:20	-	ADMT	1936 May 5    # Adis Dera MT
-			3:00	-	EAT
-
-# Gabon
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Africa/Libreville	0:37:48 -	LMT	1912
-			1:00	-	WAT
-
-# Gambia
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Banjul	-1:06:36 -	LMT	1912
-			-1:06:36 -	BMT	1935	# Banjul Mean Time
-			-1:00	-	WAT	1964
-			 0:00	-	GMT
-
-# Ghana
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-# Whitman says DST was observed from 1931 to ``the present''; go with Shanks.
-Rule	Ghana	1936	1942	-	Sep	 1	0:00	0:20	GHST
-Rule	Ghana	1936	1942	-	Dec	31	0:00	0	GMT
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Accra	-0:00:52 -	LMT	1918
-			 0:00	Ghana	%s
-
-# Guinea
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Conakry	-0:54:52 -	LMT	1912
-			 0:00	-	GMT	1934 Feb 26
-			-1:00	-	WAT	1960
-			 0:00	-	GMT
-
-# Guinea-Bissau
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Bissau	-1:02:20 -	LMT	1911 May 26
-			-1:00	-	WAT	1975
-			 0:00	-	GMT
-
-# Kenya
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Nairobi	2:27:16	-	LMT	1928 Jul
-			3:00	-	EAT	1930
-			2:30	-	BEAT	1940
-			2:44:45	-	BEAUT	1960
-			3:00	-	EAT
-
-# Lesotho
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Maseru	1:50:00 -	LMT	1903 Mar
-			2:00	-	SAST	1943 Sep 19 2:00
-			2:00	1:00	SAST	1944 Mar 19 2:00
-			2:00	-	SAST
-
-# Liberia
-# From Paul Eggert (2001-07-17):
-# In 1972 Liberia was the last country to switch
-# from a UTC offset that was not a multiple of 15 or 20 minutes.
-# Howse reports that it was in honor of their president's birthday.
-# Shanks reports the date as May 1, whereas Howse reports Jan; go with Shanks.
-# For Liberia before 1972, Shanks reports -0:44, whereas Howse and Whitman
-# each report -0:44:30; go with the more precise figure.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Monrovia	-0:43:08 -	LMT	1882
-			-0:43:08 -	MMT	1919 Mar # Monrovia Mean Time
-			-0:44:30 -	LRT	1972 May # Liberia Time
-			 0:00	-	GMT
-
-###############################################################################
-
-# Libya
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Libya	1951	only	-	Oct	14	2:00	1:00	S
-Rule	Libya	1952	only	-	Jan	 1	0:00	0	-
-Rule	Libya	1953	only	-	Oct	 9	2:00	1:00	S
-Rule	Libya	1954	only	-	Jan	 1	0:00	0	-
-Rule	Libya	1955	only	-	Sep	30	0:00	1:00	S
-Rule	Libya	1956	only	-	Jan	 1	0:00	0	-
-Rule	Libya	1982	1984	-	Apr	 1	0:00	1:00	S
-Rule	Libya	1982	1985	-	Oct	 1	0:00	0	-
-Rule	Libya	1985	only	-	Apr	 6	0:00	1:00	S
-Rule	Libya	1986	only	-	Apr	 4	0:00	1:00	S
-Rule	Libya	1986	only	-	Oct	 3	0:00	0	-
-Rule	Libya	1987	1989	-	Apr	 1	0:00	1:00	S
-Rule	Libya	1987	1989	-	Oct	 1	0:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Tripoli	0:52:44 -	LMT	1920
-			1:00	Libya	CE%sT	1959
-			2:00	-	EET	1982
-			1:00	Libya	CE%sT	1990 May  4
-# The following entries are all from Shanks;
-# the IATA SSIM data contain some obvious errors.
-			2:00	-	EET	1996 Sep 30
-			1:00	-	CET	1997 Apr  4
-			1:00	1:00	CEST	1997 Oct  4
-			2:00	-	EET
-
-# Madagascar
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Indian/Antananarivo 3:10:04 -	LMT	1911 Jul
-			3:00	-	EAT	1954 Feb 27 23:00s
-			3:00	1:00	EAST	1954 May 29 23:00s
-			3:00	-	EAT
-
-# Malawi
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Blantyre	2:20:00 -	LMT	1903 Mar
-			2:00	-	CAT
-
-# Mali
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Bamako	-0:32:00 -	LMT	1912
-			 0:00	-	GMT	1934 Feb 26
-			-1:00	-	WAT	1960 Jun 20
-			 0:00	-	GMT
-
-# Mauritania
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Africa/Nouakchott	-1:03:48 -	LMT	1912
-			 0:00	-	GMT	1934 Feb 26
-			-1:00	-	WAT	1960 Nov 28
-			 0:00	-	GMT
-
-# Mauritius
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Indian/Mauritius	3:50:00 -	LMT	1907		# Port Louis
-			4:00	-	MUT	# Mauritius Time
-# Agalega Is, Rodriguez
-# no information; probably like Indian/Mauritius
-
-# Mayotte
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Indian/Mayotte	3:00:56 -	LMT	1911 Jul	# Mamoutzou
-			3:00	-	EAT
-
-# Morocco
-# See the `europe' file for Spanish Morocco (Africa/Ceuta).
-# RULE	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Morocco	1939	only	-	Sep	12	 0:00	1:00	S
-Rule	Morocco	1939	only	-	Nov	19	 0:00	0	-
-Rule	Morocco	1940	only	-	Feb	25	 0:00	1:00	S
-Rule	Morocco	1945	only	-	Nov	18	 0:00	0	-
-Rule	Morocco	1950	only	-	Jun	11	 0:00	1:00	S
-Rule	Morocco	1950	only	-	Oct	29	 0:00	0	-
-Rule	Morocco	1967	only	-	Jun	 3	12:00	1:00	S
-Rule	Morocco	1967	only	-	Oct	 1	 0:00	0	-
-Rule	Morocco	1974	only	-	Jun	24	 0:00	1:00	S
-Rule	Morocco	1974	only	-	Sep	 1	 0:00	0	-
-Rule	Morocco	1976	1977	-	May	 1	 0:00	1:00	S
-Rule	Morocco	1976	only	-	Aug	 1	 0:00	0	-
-Rule	Morocco	1977	only	-	Sep	28	 0:00	0	-
-Rule	Morocco	1978	only	-	Jun	 1	 0:00	1:00	S
-Rule	Morocco	1978	only	-	Aug	 4	 0:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Africa/Casablanca	-0:30:20 -	LMT	1913 Oct 26
-			 0:00	Morocco	WE%sT	1984 Mar 16
-			 1:00	-	CET	1986
-			 0:00	-	WET
-# Western Sahara
-Zone Africa/El_Aaiun	-0:52:48 -	LMT	1934 Jan
-			-1:00	-	WAT	1976 Apr 14
-			 0:00	-	WET
-
-# Mozambique
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Maputo	2:10:20 -	LMT	1903 Mar
-			2:00	-	CAT
-
-# Namibia
-# The 1994-04-03 transition is from Shanks.
-# Shanks reports no DST after 1998-04; go with IATA.
-# RULE	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Namibia	1994	max	-	Sep	Sun>=1	2:00	1:00	S
-Rule	Namibia	1995	max	-	Apr	Sun>=1	2:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Windhoek	1:08:24 -	LMT	1892 Feb 8
-			1:30	-	SWAT	1903 Mar	# SW Africa Time
-			2:00	-	SAST	1942 Sep 20 2:00
-			2:00	1:00	SAST	1943 Mar 21 2:00
-			2:00	-	SAST	1990 Mar 21 # independence
-			2:00	-	CAT	1994 Apr  3
-			1:00	Namibia	WA%sT
-
-# Niger
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Niamey	 0:08:28 -	LMT	1912
-			-1:00	-	WAT	1934 Feb 26
-			 0:00	-	GMT	1960
-			 1:00	-	WAT
-
-# Nigeria
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Lagos	0:13:36 -	LMT	1919 Sep
-			1:00	-	WAT
-
-# Reunion
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Indian/Reunion	3:41:52 -	LMT	1911 Jun	# Saint-Denis
-			4:00	-	RET	# Reunion Time
-#
-# Scattered Islands (Iles Eparses) administered from Reunion are as follows.
-# The following information about them is taken from
-# Iles Eparses (www.outre-mer.gouv.fr/domtom/ile.htm, 1997-07-22, in French;
-# no longer available as of 1999-08-17).
-# We have no info about their time zone histories.
-#
-# Bassas da India - uninhabited
-# Europa Island - inhabited from 1905 to 1910 by two families
-# Glorioso Is - inhabited until at least 1958
-# Juan de Nova - uninhabited
-# Tromelin - inhabited until at least 1958
-
-# Rwanda
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Kigali	2:00:16 -	LMT	1935 Jun
-			2:00	-	CAT
-
-# St Helena
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Atlantic/St_Helena	-0:22:48 -	LMT	1890		# Jamestown
-			-0:22:48 -	JMT	1951	# Jamestown Mean Time
-			 0:00	-	GMT
-# The other parts of the St Helena territory are similar:
-#	Tristan da Cunha: on GMT, say Whitman and the CIA
-#	Ascension: on GMT, says usno1995 and the CIA
-#	Gough (scientific station since 1955; sealers wintered previously):
-#		on GMT, says the CIA
-#	Inaccessible, Nightingale: no information, but probably GMT
-
-# Sao Tome and Principe
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Sao_Tome	 0:26:56 -	LMT	1884
-			-0:36:32 -	LMT	1912	# Lisbon Mean Time
-			 0:00	-	GMT
-
-# Senegal
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Dakar	-1:09:44 -	LMT	1912
-			-1:00	-	WAT	1941 Jun
-			 0:00	-	GMT
-
-# Seychelles
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Indian/Mahe	3:41:48 -	LMT	1906 Jun	# Victoria
-			4:00	-	SCT	# Seychelles Time
-# From Paul Eggert (2001-05-30):
-# Aldabra, Farquhar, and Desroches, originally dependencies of the
-# Seychelles, were transferred to the British Indian Ocean Territory
-# in 1965 and returned to Seychelles control in 1976.  We don't know
-# whether this affected their time zone, so omit this for now.
-# Possibly the islands were uninhabited.
-
-# Sierra Leone
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-# Whitman gives Mar 31 - Aug 31 for 1931 on; go with Shanks.
-Rule	SL	1935	1942	-	Jun	 1	0:00	0:40	SLST
-Rule	SL	1935	1942	-	Oct	 1	0:00	0	WAT
-Rule	SL	1957	1962	-	Jun	 1	0:00	1:00	SLST
-Rule	SL	1957	1962	-	Sep	 1	0:00	0	GMT
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Freetown	-0:53:00 -	LMT	1882
-			-0:53:00 -	FMT	1913 Jun # Freetown Mean Time
-			-1:00	SL	%s	1957
-			 0:00	SL	%s
-
-# Somalia
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Africa/Mogadishu	3:01:28 -	LMT	1893 Nov
-			3:00	-	EAT	1931
-			2:30	-	BEAT	1957
-			3:00	-	EAT
-
-# South Africa
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	SA	1942	1943	-	Sep	Sun>=15	2:00	1:00	-
-Rule	SA	1943	1944	-	Mar	Sun>=15	2:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Africa/Johannesburg 1:52:00 -	LMT	1892 Feb 8
-			1:30	-	SAST	1903 Mar
-			2:00	SA	SAST
-# Marion and Prince Edward Is
-# scientific station since 1947
-# no information
-
-# Sudan
-#
-# From <a href="http://www.sunanews.net/sn13jane.html">
-# Sudan News Agency (2000-01-13)
-# </a>, also reported by Michael De Beukelaer-Dossche via Steffen Thorsen:
-# Clocks will be moved ahead for 60 minutes all over the Sudan as of noon
-# Saturday....  This was announced Thursday by Caretaker State Minister for
-# Manpower Abdul-Rahman Nur-Eddin.
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Sudan	1970	only	-	May	 1	0:00	1:00	S
-Rule	Sudan	1970	1985	-	Oct	15	0:00	0	-
-Rule	Sudan	1971	only	-	Apr	30	0:00	1:00	S
-Rule	Sudan	1972	1985	-	Apr	lastSun	0:00	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Khartoum	2:10:08 -	LMT	1931
-			2:00	Sudan	CA%sT	2000 Jan 15 12:00
-			3:00	-	EAT
-
-# Swaziland
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Mbabane	2:04:24 -	LMT	1903 Mar
-			2:00	-	SAST
-
-# Tanzania
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Africa/Dar_es_Salaam 2:37:08 -	LMT	1931
-			3:00	-	EAT	1948
-			2:44:45	-	BEAUT	1961
-			3:00	-	EAT
-
-# Togo
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Lome	0:04:52 -	LMT	1893
-			0:00	-	GMT
-
-# Tunisia
-
-# From Gwillim Law (2005-04-30):
-#
-# My correspondent, Risto Nykanen, has alerted me to another adoption of DST,
-# this time in Tunisia.  According to Yahoo France News
-# <http://fr.news.yahoo.com/050426/5/4dumk.html>, in a story attributed to AP
-# and dated 2005-04-26, "Tunisia has decided to advance its official time by
-# one hour, starting on Sunday, May 1.  Henceforth, Tunisian time will be
-# UTC+2 instead of UTC+1.  The change will take place at 23:00 UTC next
-# Saturday."  (My translation)
-#
-# From Oscar van Vlijmen (2005-05-02):
-# LaPresse, the first national daily newspaper ...
-# <http://www.lapresse.tn/archives/archives280405/actualites/lheure.html>
-# ... DST for 2005: on: Sun May 1 0h standard time, off: Fri Sept. 30,
-# 1h standard time.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Tunisia	1939	only	-	Apr	15	23:00s	1:00	S
-Rule	Tunisia	1939	only	-	Nov	18	23:00s	0	-
-Rule	Tunisia	1940	only	-	Feb	25	23:00s	1:00	S
-Rule	Tunisia	1941	only	-	Oct	 6	 0:00	0	-
-Rule	Tunisia	1942	only	-	Mar	 9	 0:00	1:00	S
-Rule	Tunisia	1942	only	-	Nov	 2	 3:00	0	-
-Rule	Tunisia	1943	only	-	Mar	29	 2:00	1:00	S
-Rule	Tunisia	1943	only	-	Apr	17	 2:00	0	-
-Rule	Tunisia	1943	only	-	Apr	25	 2:00	1:00	S
-Rule	Tunisia	1943	only	-	Oct	 4	 2:00	0	-
-Rule	Tunisia	1944	1945	-	Apr	Mon>=1	 2:00	1:00	S
-Rule	Tunisia	1944	only	-	Oct	 8	 0:00	0	-
-Rule	Tunisia	1945	only	-	Sep	16	 0:00	0	-
-Rule	Tunisia	1977	only	-	Apr	30	 0:00s	1:00	S
-Rule	Tunisia	1977	only	-	Sep	24	 0:00s	0	-
-Rule	Tunisia	1978	only	-	May	 1	 0:00s	1:00	S
-Rule	Tunisia	1978	only	-	Oct	 1	 0:00s	0	-
-Rule	Tunisia	1988	only	-	Jun	 1	 0:00s	1:00	S
-Rule	Tunisia	1988	1990	-	Sep	lastSun	 0:00s	0	-
-Rule	Tunisia	1989	only	-	Mar	26	 0:00s	1:00	S
-Rule	Tunisia	1990	only	-	May	 1	 0:00s	1:00	S
-Rule	Tunisia	2005	only	-	May	 1	 0:00s	1:00	S
-Rule	Tunisia	2005	only	-	Sep	30	 1:00s	0	-
-# Shanks gives 0:09 for Paris Mean Time; go with Howse's more precise 0:09:21.
-# Shanks says the 1911 switch occurred on Mar 9; go with Howse's Mar 11.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Tunis	0:40:44 -	LMT	1881 May 12
-			0:09:21	-	PMT	1911 Mar 11    # Paris Mean Time
-			1:00	Tunisia	CE%sT
-
-# Uganda
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Kampala	2:09:40 -	LMT	1928 Jul
-			3:00	-	EAT	1930
-			2:30	-	BEAT	1948
-			2:44:45	-	BEAUT	1957
-			3:00	-	EAT
-
-# Zambia
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Lusaka	1:53:08 -	LMT	1903 Mar
-			2:00	-	CAT
-
-# Zimbabwe
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Harare	2:04:12 -	LMT	1903 Mar
-			2:00	-	CAT
+# @(#)africa	7.40
+# <pre>
+
+# This data is by no means authoritative; if you think you know better,
+# go ahead and edit the file (and please send any changes to
+# tz@elsie.nci.nih.gov for general use in the future).
+
+# From Paul Eggert (1999-03-22):
+#
+# A good source for time zone historical data outside the U.S. is
+# Thomas G. Shanks, The International Atlas (5th edition),
+# San Diego: ACS Publications, Inc. (1999).
+#
+# Gwillim Law writes that a good source
+# for recent time zone data is the International Air Transport
+# Association's Standard Schedules Information Manual (IATA SSIM),
+# published semiannually.  Law sent in several helpful summaries
+# of the IATA's data after 1990.
+#
+# Except where otherwise noted, Shanks is the source for entries through 1990,
+# and IATA SSIM is the source for entries after 1990.
+#
+# Another source occasionally used is Edward W. Whitman, World Time Differences,
+# Whitman Publishing Co, 2 Niagara Av, Ealing, London (undated), which
+# I found in the UCLA library.
+#
+# A reliable and entertaining source about time zones is
+# Derek Howse, Greenwich time and longitude, Philip Wilson Publishers (1997).
+#
+# Previous editions of this database used WAT, CAT, SAT, and EAT
+# for +0:00 through +3:00, respectively,
+# but Mark R V Murray reports that
+# `SAST' is the official abbreviation for +2:00 in the country of South Africa,
+# `CAT' is commonly used for +2:00 in countries north of South Africa, and
+# `WAT' is probably the best name for +1:00, as the common phrase for
+# the area that includes Nigeria is ``West Africa''.
+# He has heard of ``Western Sahara Time'' for +0:00 but can find no reference.
+#
+# To make things confusing, `WAT' seems to have been used for -1:00 long ago;
+# I'd guess that this was because people needed _some_ name for -1:00,
+# and at the time, far west Africa was the only major land area in -1:00.
+# This usage is now obsolete, as the last use of -1:00 on the African
+# mainland seems to have been 1976 in Western Sahara.
+#
+# To summarize, the following abbreviations seem to have some currency:
+#	-1:00	WAT	West Africa Time (no longer used)
+#	 0:00	GMT	Greenwich Mean Time
+#	 2:00	CAT	Central Africa Time
+#	 2:00	SAST	South Africa Standard Time
+# and Murray suggests the following abbreviation:
+#	 1:00	WAT	West Africa Time
+# I realize that this leads to `WAT' being used for both -1:00 and 1:00
+# for times before 1976, but this is the best I can think of
+# until we get more information.
+#
+# I invented the following abbreviations; corrections are welcome!
+#	 2:00	WAST	West Africa Summer Time
+#	 2:30	BEAT	British East Africa Time (no longer used)
+#	 2:44:45 BEAUT	British East Africa Unified Time (no longer used)
+#	 3:00	CAST	Central Africa Summer Time (no longer used)
+#	 3:00	SAST	South Africa Summer Time (no longer used)
+#	 3:00	EAT	East Africa Time
+#	 4:00	EAST	East Africa Summer Time (no longer used)
+
+# Algeria
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Algeria	1916	only	-	Jun	14	23:00s	1:00	S
+Rule	Algeria	1916	1919	-	Oct	Sun<=7	23:00s	0	-
+Rule	Algeria	1917	only	-	Mar	24	23:00s	1:00	S
+Rule	Algeria	1918	only	-	Mar	 9	23:00s	1:00	S
+Rule	Algeria	1919	only	-	Mar	 1	23:00s	1:00	S
+Rule	Algeria	1920	only	-	Feb	14	23:00s	1:00	S
+Rule	Algeria	1920	only	-	Oct	23	23:00s	0	-
+Rule	Algeria	1921	only	-	Mar	14	23:00s	1:00	S
+Rule	Algeria	1921	only	-	Jun	21	23:00s	0	-
+Rule	Algeria	1939	only	-	Sep	11	23:00s	1:00	S
+Rule	Algeria	1939	only	-	Nov	19	 1:00	0	-
+Rule	Algeria	1944	1945	-	Apr	Mon<=7	 2:00	1:00	S
+Rule	Algeria	1944	only	-	Oct	 8	 2:00	0	-
+Rule	Algeria	1945	only	-	Sep	16	 1:00	0	-
+Rule	Algeria	1971	only	-	Apr	25	23:00s	1:00	S
+Rule	Algeria	1971	only	-	Sep	26	23:00s	0	-
+Rule	Algeria	1977	only	-	May	 6	 0:00	1:00	S
+Rule	Algeria	1977	only	-	Oct	21	 0:00	0	-
+Rule	Algeria	1978	only	-	Mar	24	 1:00	1:00	S
+Rule	Algeria	1978	only	-	Sep	22	 3:00	0	-
+Rule	Algeria	1980	only	-	Apr	25	 0:00	1:00	S
+Rule	Algeria	1980	only	-	Oct	31	 2:00	0	-
+# Shanks gives 0:09 for Paris Mean Time; go with Howse's more precise 0:09:21.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Algiers	0:12:12 -	LMT	1891 Mar 15 0:01
+			0:09:21	-	PMT	1911 Mar 11    # Paris Mean Time
+			0:00	Algeria	WE%sT	1940 Feb 25 2:00
+			1:00	Algeria	CE%sT	1946 Oct  7
+			0:00	-	WET	1956 Jan 29
+			1:00	-	CET	1963 Apr 14
+			0:00	Algeria	WE%sT	1977 Oct 21
+			1:00	Algeria	CE%sT	1979 Oct 26
+			0:00	Algeria	WE%sT	1981 May
+			1:00	-	CET
+
+# Angola
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Luanda	0:52:56	-	LMT	1892
+			0:52:04	-	AOT	1911 May 26 # Angola Time
+			1:00	-	WAT
+
+# Benin
+# Whitman says they switched to 1:00 in 1946, not 1934; go with Shanks.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Africa/Porto-Novo	0:10:28	-	LMT	1912
+			0:00	-	GMT	1934 Feb 26
+			1:00	-	WAT
+
+# Botswana
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Gaborone	1:43:40 -	LMT	1885
+			2:00	-	CAT	1943 Sep 19 2:00
+			2:00	1:00	CAST	1944 Mar 19 2:00
+			2:00	-	CAT
+
+# Burkina Faso
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Africa/Ouagadougou	-0:06:04 -	LMT	1912
+			 0:00	-	GMT
+
+# Burundi
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Africa/Bujumbura	1:57:28	-	LMT	1890
+			2:00	-	CAT
+
+# Cameroon
+# Whitman says they switched to 1:00 in 1920; go with Shanks.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Douala	0:38:48	-	LMT	1912
+			1:00	-	WAT
+
+# Cape Verde
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Atlantic/Cape_Verde -1:34:04 -	LMT	1907			# Praia
+			-2:00	-	CVT	1942 Sep
+			-2:00	1:00	CVST	1945 Oct 15
+			-2:00	-	CVT	1975 Nov 25 2:00
+			-1:00	-	CVT
+
+# Central African Republic
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Bangui	1:14:20	-	LMT	1912
+			1:00	-	WAT
+
+# Chad
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Ndjamena	1:00:12 -	LMT	1912
+			1:00	-	WAT	1979 Oct 14
+			1:00	1:00	WAST	1980 Mar  8
+			1:00	-	WAT
+
+# Comoros
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Indian/Comoro	2:53:04 -	LMT	1911 Jul   # Moroni, Gran Comoro
+			3:00	-	EAT
+
+# Democratic Republic of Congo
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Africa/Kinshasa	1:01:12 -	LMT	1897 Nov 9
+			1:00	-	WAT
+Zone Africa/Lubumbashi	1:49:52 -	LMT	1897 Nov 9
+			2:00	-	CAT
+
+# Republic of the Congo
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Africa/Brazzaville	1:01:08 -	LMT	1912
+			1:00	-	WAT
+
+# Cote D'Ivoire
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Abidjan	-0:16:08 -	LMT	1912
+			 0:00	-	GMT
+
+# Djibouti
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Djibouti	2:52:36 -	LMT	1911 Jul
+			3:00	-	EAT
+
+###############################################################################
+
+# Egypt
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Egypt	1940	only	-	Jul	15	0:00	1:00	S
+Rule	Egypt	1940	only	-	Oct	 1	0:00	0	-
+Rule	Egypt	1941	only	-	Apr	15	0:00	1:00	S
+Rule	Egypt	1941	only	-	Sep	16	0:00	0	-
+Rule	Egypt	1942	1944	-	Apr	 1	0:00	1:00	S
+Rule	Egypt	1942	only	-	Oct	27	0:00	0	-
+Rule	Egypt	1943	1945	-	Nov	 1	0:00	0	-
+Rule	Egypt	1945	only	-	Apr	16	0:00	1:00	S
+Rule	Egypt	1957	only	-	May	10	0:00	1:00	S
+Rule	Egypt	1957	1958	-	Oct	 1	0:00	0	-
+Rule	Egypt	1958	only	-	May	 1	0:00	1:00	S
+Rule	Egypt	1959	1981	-	May	 1	1:00	1:00	S
+Rule	Egypt	1959	1965	-	Sep	30	3:00	0	-
+Rule	Egypt	1966	1994	-	Oct	 1	3:00	0	-
+Rule	Egypt	1982	only	-	Jul	25	1:00	1:00	S
+Rule	Egypt	1983	only	-	Jul	12	1:00	1:00	S
+Rule	Egypt	1984	1988	-	May	 1	1:00	1:00	S
+Rule	Egypt	1989	only	-	May	 6	1:00	1:00	S
+Rule	Egypt	1990	1994	-	May	 1	1:00	1:00	S
+# IATA (after 1990) says transitions are at 0:00.
+# Go with IATA starting in 1995, except correct 1995 entry from 09-30 to 09-29.
+Rule	Egypt	1995	max	-	Apr	lastFri	 0:00s	1:00	S
+Rule	Egypt	1995	max	-	Sep	lastThu	23:00s	0	-
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Cairo	2:05:00 -	LMT	1900 Oct
+			2:00	Egypt	EE%sT
+
+# Equatorial Guinea
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Malabo	0:35:08 -	LMT	1912
+			0:00	-	GMT	1963 Dec 15
+			1:00	-	WAT
+
+# Eritrea
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Asmera	2:35:32 -	LMT	1870
+			2:35:32	-	AMT	1890	      # Asmera Mean Time
+			2:35:20	-	ADMT	1936 May 5    # Adis Dera MT
+			3:00	-	EAT
+
+# Ethiopia
+# From Paul Eggert (1997-10-05):
+# Shanks writes that Ethiopia had six narrowly-spaced time zones between
+# 1870 and 1890, and that they merged to 38E50 (2:35:20) in 1890.
+# We'll guess that 38E50 is for Adis Dera.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Africa/Addis_Ababa	2:34:48 -	LMT	1870
+			2:35:20	-	ADMT	1936 May 5    # Adis Dera MT
+			3:00	-	EAT
+
+# Gabon
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Africa/Libreville	0:37:48 -	LMT	1912
+			1:00	-	WAT
+
+# Gambia
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Banjul	-1:06:36 -	LMT	1912
+			-1:06:36 -	BMT	1935	# Banjul Mean Time
+			-1:00	-	WAT	1964
+			 0:00	-	GMT
+
+# Ghana
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+# Whitman says DST was observed from 1931 to ``the present''; go with Shanks.
+Rule	Ghana	1936	1942	-	Sep	 1	0:00	0:20	GHST
+Rule	Ghana	1936	1942	-	Dec	31	0:00	0	GMT
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Accra	-0:00:52 -	LMT	1918
+			 0:00	Ghana	%s
+
+# Guinea
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Conakry	-0:54:52 -	LMT	1912
+			 0:00	-	GMT	1934 Feb 26
+			-1:00	-	WAT	1960
+			 0:00	-	GMT
+
+# Guinea-Bissau
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Bissau	-1:02:20 -	LMT	1911 May 26
+			-1:00	-	WAT	1975
+			 0:00	-	GMT
+
+# Kenya
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Nairobi	2:27:16	-	LMT	1928 Jul
+			3:00	-	EAT	1930
+			2:30	-	BEAT	1940
+			2:44:45	-	BEAUT	1960
+			3:00	-	EAT
+
+# Lesotho
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Maseru	1:50:00 -	LMT	1903 Mar
+			2:00	-	SAST	1943 Sep 19 2:00
+			2:00	1:00	SAST	1944 Mar 19 2:00
+			2:00	-	SAST
+
+# Liberia
+# From Paul Eggert (2001-07-17):
+# In 1972 Liberia was the last country to switch
+# from a UTC offset that was not a multiple of 15 or 20 minutes.
+# Howse reports that it was in honor of their president's birthday.
+# Shanks reports the date as May 1, whereas Howse reports Jan; go with Shanks.
+# For Liberia before 1972, Shanks reports -0:44, whereas Howse and Whitman
+# each report -0:44:30; go with the more precise figure.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Monrovia	-0:43:08 -	LMT	1882
+			-0:43:08 -	MMT	1919 Mar # Monrovia Mean Time
+			-0:44:30 -	LRT	1972 May # Liberia Time
+			 0:00	-	GMT
+
+###############################################################################
+
+# Libya
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Libya	1951	only	-	Oct	14	2:00	1:00	S
+Rule	Libya	1952	only	-	Jan	 1	0:00	0	-
+Rule	Libya	1953	only	-	Oct	 9	2:00	1:00	S
+Rule	Libya	1954	only	-	Jan	 1	0:00	0	-
+Rule	Libya	1955	only	-	Sep	30	0:00	1:00	S
+Rule	Libya	1956	only	-	Jan	 1	0:00	0	-
+Rule	Libya	1982	1984	-	Apr	 1	0:00	1:00	S
+Rule	Libya	1982	1985	-	Oct	 1	0:00	0	-
+Rule	Libya	1985	only	-	Apr	 6	0:00	1:00	S
+Rule	Libya	1986	only	-	Apr	 4	0:00	1:00	S
+Rule	Libya	1986	only	-	Oct	 3	0:00	0	-
+Rule	Libya	1987	1989	-	Apr	 1	0:00	1:00	S
+Rule	Libya	1987	1989	-	Oct	 1	0:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Tripoli	0:52:44 -	LMT	1920
+			1:00	Libya	CE%sT	1959
+			2:00	-	EET	1982
+			1:00	Libya	CE%sT	1990 May  4
+# The following entries are all from Shanks;
+# the IATA SSIM data contain some obvious errors.
+			2:00	-	EET	1996 Sep 30
+			1:00	-	CET	1997 Apr  4
+			1:00	1:00	CEST	1997 Oct  4
+			2:00	-	EET
+
+# Madagascar
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Indian/Antananarivo 3:10:04 -	LMT	1911 Jul
+			3:00	-	EAT	1954 Feb 27 23:00s
+			3:00	1:00	EAST	1954 May 29 23:00s
+			3:00	-	EAT
+
+# Malawi
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Blantyre	2:20:00 -	LMT	1903 Mar
+			2:00	-	CAT
+
+# Mali
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Bamako	-0:32:00 -	LMT	1912
+			 0:00	-	GMT	1934 Feb 26
+			-1:00	-	WAT	1960 Jun 20
+			 0:00	-	GMT
+
+# Mauritania
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Africa/Nouakchott	-1:03:48 -	LMT	1912
+			 0:00	-	GMT	1934 Feb 26
+			-1:00	-	WAT	1960 Nov 28
+			 0:00	-	GMT
+
+# Mauritius
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Indian/Mauritius	3:50:00 -	LMT	1907		# Port Louis
+			4:00	-	MUT	# Mauritius Time
+# Agalega Is, Rodriguez
+# no information; probably like Indian/Mauritius
+
+# Mayotte
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Indian/Mayotte	3:00:56 -	LMT	1911 Jul	# Mamoutzou
+			3:00	-	EAT
+
+# Morocco
+# See the `europe' file for Spanish Morocco (Africa/Ceuta).
+# RULE	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Morocco	1939	only	-	Sep	12	 0:00	1:00	S
+Rule	Morocco	1939	only	-	Nov	19	 0:00	0	-
+Rule	Morocco	1940	only	-	Feb	25	 0:00	1:00	S
+Rule	Morocco	1945	only	-	Nov	18	 0:00	0	-
+Rule	Morocco	1950	only	-	Jun	11	 0:00	1:00	S
+Rule	Morocco	1950	only	-	Oct	29	 0:00	0	-
+Rule	Morocco	1967	only	-	Jun	 3	12:00	1:00	S
+Rule	Morocco	1967	only	-	Oct	 1	 0:00	0	-
+Rule	Morocco	1974	only	-	Jun	24	 0:00	1:00	S
+Rule	Morocco	1974	only	-	Sep	 1	 0:00	0	-
+Rule	Morocco	1976	1977	-	May	 1	 0:00	1:00	S
+Rule	Morocco	1976	only	-	Aug	 1	 0:00	0	-
+Rule	Morocco	1977	only	-	Sep	28	 0:00	0	-
+Rule	Morocco	1978	only	-	Jun	 1	 0:00	1:00	S
+Rule	Morocco	1978	only	-	Aug	 4	 0:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Africa/Casablanca	-0:30:20 -	LMT	1913 Oct 26
+			 0:00	Morocco	WE%sT	1984 Mar 16
+			 1:00	-	CET	1986
+			 0:00	-	WET
+# Western Sahara
+Zone Africa/El_Aaiun	-0:52:48 -	LMT	1934 Jan
+			-1:00	-	WAT	1976 Apr 14
+			 0:00	-	WET
+
+# Mozambique
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Maputo	2:10:20 -	LMT	1903 Mar
+			2:00	-	CAT
+
+# Namibia
+# The 1994-04-03 transition is from Shanks.
+# Shanks reports no DST after 1998-04; go with IATA.
+# RULE	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Namibia	1994	max	-	Sep	Sun>=1	2:00	1:00	S
+Rule	Namibia	1995	max	-	Apr	Sun>=1	2:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Windhoek	1:08:24 -	LMT	1892 Feb 8
+			1:30	-	SWAT	1903 Mar	# SW Africa Time
+			2:00	-	SAST	1942 Sep 20 2:00
+			2:00	1:00	SAST	1943 Mar 21 2:00
+			2:00	-	SAST	1990 Mar 21 # independence
+			2:00	-	CAT	1994 Apr  3
+			1:00	Namibia	WA%sT
+
+# Niger
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Niamey	 0:08:28 -	LMT	1912
+			-1:00	-	WAT	1934 Feb 26
+			 0:00	-	GMT	1960
+			 1:00	-	WAT
+
+# Nigeria
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Lagos	0:13:36 -	LMT	1919 Sep
+			1:00	-	WAT
+
+# Reunion
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Indian/Reunion	3:41:52 -	LMT	1911 Jun	# Saint-Denis
+			4:00	-	RET	# Reunion Time
+#
+# Scattered Islands (Iles Eparses) administered from Reunion are as follows.
+# The following information about them is taken from
+# Iles Eparses (www.outre-mer.gouv.fr/domtom/ile.htm, 1997-07-22, in French;
+# no longer available as of 1999-08-17).
+# We have no info about their time zone histories.
+#
+# Bassas da India - uninhabited
+# Europa Island - inhabited from 1905 to 1910 by two families
+# Glorioso Is - inhabited until at least 1958
+# Juan de Nova - uninhabited
+# Tromelin - inhabited until at least 1958
+
+# Rwanda
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Kigali	2:00:16 -	LMT	1935 Jun
+			2:00	-	CAT
+
+# St Helena
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Atlantic/St_Helena	-0:22:48 -	LMT	1890		# Jamestown
+			-0:22:48 -	JMT	1951	# Jamestown Mean Time
+			 0:00	-	GMT
+# The other parts of the St Helena territory are similar:
+#	Tristan da Cunha: on GMT, say Whitman and the CIA
+#	Ascension: on GMT, says usno1995 and the CIA
+#	Gough (scientific station since 1955; sealers wintered previously):
+#		on GMT, says the CIA
+#	Inaccessible, Nightingale: no information, but probably GMT
+
+# Sao Tome and Principe
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Sao_Tome	 0:26:56 -	LMT	1884
+			-0:36:32 -	LMT	1912	# Lisbon Mean Time
+			 0:00	-	GMT
+
+# Senegal
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Dakar	-1:09:44 -	LMT	1912
+			-1:00	-	WAT	1941 Jun
+			 0:00	-	GMT
+
+# Seychelles
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Indian/Mahe	3:41:48 -	LMT	1906 Jun	# Victoria
+			4:00	-	SCT	# Seychelles Time
+# From Paul Eggert (2001-05-30):
+# Aldabra, Farquhar, and Desroches, originally dependencies of the
+# Seychelles, were transferred to the British Indian Ocean Territory
+# in 1965 and returned to Seychelles control in 1976.  We don't know
+# whether this affected their time zone, so omit this for now.
+# Possibly the islands were uninhabited.
+
+# Sierra Leone
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+# Whitman gives Mar 31 - Aug 31 for 1931 on; go with Shanks.
+Rule	SL	1935	1942	-	Jun	 1	0:00	0:40	SLST
+Rule	SL	1935	1942	-	Oct	 1	0:00	0	WAT
+Rule	SL	1957	1962	-	Jun	 1	0:00	1:00	SLST
+Rule	SL	1957	1962	-	Sep	 1	0:00	0	GMT
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Freetown	-0:53:00 -	LMT	1882
+			-0:53:00 -	FMT	1913 Jun # Freetown Mean Time
+			-1:00	SL	%s	1957
+			 0:00	SL	%s
+
+# Somalia
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Africa/Mogadishu	3:01:28 -	LMT	1893 Nov
+			3:00	-	EAT	1931
+			2:30	-	BEAT	1957
+			3:00	-	EAT
+
+# South Africa
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	SA	1942	1943	-	Sep	Sun>=15	2:00	1:00	-
+Rule	SA	1943	1944	-	Mar	Sun>=15	2:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Africa/Johannesburg 1:52:00 -	LMT	1892 Feb 8
+			1:30	-	SAST	1903 Mar
+			2:00	SA	SAST
+# Marion and Prince Edward Is
+# scientific station since 1947
+# no information
+
+# Sudan
+#
+# From <a href="http://www.sunanews.net/sn13jane.html">
+# Sudan News Agency (2000-01-13)
+# </a>, also reported by Michael De Beukelaer-Dossche via Steffen Thorsen:
+# Clocks will be moved ahead for 60 minutes all over the Sudan as of noon
+# Saturday....  This was announced Thursday by Caretaker State Minister for
+# Manpower Abdul-Rahman Nur-Eddin.
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Sudan	1970	only	-	May	 1	0:00	1:00	S
+Rule	Sudan	1970	1985	-	Oct	15	0:00	0	-
+Rule	Sudan	1971	only	-	Apr	30	0:00	1:00	S
+Rule	Sudan	1972	1985	-	Apr	lastSun	0:00	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Khartoum	2:10:08 -	LMT	1931
+			2:00	Sudan	CA%sT	2000 Jan 15 12:00
+			3:00	-	EAT
+
+# Swaziland
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Mbabane	2:04:24 -	LMT	1903 Mar
+			2:00	-	SAST
+
+# Tanzania
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Africa/Dar_es_Salaam 2:37:08 -	LMT	1931
+			3:00	-	EAT	1948
+			2:44:45	-	BEAUT	1961
+			3:00	-	EAT
+
+# Togo
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Lome	0:04:52 -	LMT	1893
+			0:00	-	GMT
+
+# Tunisia
+
+# From Gwillim Law (2005-04-30):
+#
+# My correspondent, Risto Nykanen, has alerted me to another adoption of DST,
+# this time in Tunisia.  According to Yahoo France News
+# <http://fr.news.yahoo.com/050426/5/4dumk.html>, in a story attributed to AP
+# and dated 2005-04-26, "Tunisia has decided to advance its official time by
+# one hour, starting on Sunday, May 1.  Henceforth, Tunisian time will be
+# UTC+2 instead of UTC+1.  The change will take place at 23:00 UTC next
+# Saturday."  (My translation)
+#
+# From Oscar van Vlijmen (2005-05-02):
+# LaPresse, the first national daily newspaper ...
+# <http://www.lapresse.tn/archives/archives280405/actualites/lheure.html>
+# ... DST for 2005: on: Sun May 1 0h standard time, off: Fri Sept. 30,
+# 1h standard time.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Tunisia	1939	only	-	Apr	15	23:00s	1:00	S
+Rule	Tunisia	1939	only	-	Nov	18	23:00s	0	-
+Rule	Tunisia	1940	only	-	Feb	25	23:00s	1:00	S
+Rule	Tunisia	1941	only	-	Oct	 6	 0:00	0	-
+Rule	Tunisia	1942	only	-	Mar	 9	 0:00	1:00	S
+Rule	Tunisia	1942	only	-	Nov	 2	 3:00	0	-
+Rule	Tunisia	1943	only	-	Mar	29	 2:00	1:00	S
+Rule	Tunisia	1943	only	-	Apr	17	 2:00	0	-
+Rule	Tunisia	1943	only	-	Apr	25	 2:00	1:00	S
+Rule	Tunisia	1943	only	-	Oct	 4	 2:00	0	-
+Rule	Tunisia	1944	1945	-	Apr	Mon>=1	 2:00	1:00	S
+Rule	Tunisia	1944	only	-	Oct	 8	 0:00	0	-
+Rule	Tunisia	1945	only	-	Sep	16	 0:00	0	-
+Rule	Tunisia	1977	only	-	Apr	30	 0:00s	1:00	S
+Rule	Tunisia	1977	only	-	Sep	24	 0:00s	0	-
+Rule	Tunisia	1978	only	-	May	 1	 0:00s	1:00	S
+Rule	Tunisia	1978	only	-	Oct	 1	 0:00s	0	-
+Rule	Tunisia	1988	only	-	Jun	 1	 0:00s	1:00	S
+Rule	Tunisia	1988	1990	-	Sep	lastSun	 0:00s	0	-
+Rule	Tunisia	1989	only	-	Mar	26	 0:00s	1:00	S
+Rule	Tunisia	1990	only	-	May	 1	 0:00s	1:00	S
+Rule	Tunisia	2005	only	-	May	 1	 0:00s	1:00	S
+Rule	Tunisia	2005	only	-	Sep	30	 1:00s	0	-
+# Shanks gives 0:09 for Paris Mean Time; go with Howse's more precise 0:09:21.
+# Shanks says the 1911 switch occurred on Mar 9; go with Howse's Mar 11.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Tunis	0:40:44 -	LMT	1881 May 12
+			0:09:21	-	PMT	1911 Mar 11    # Paris Mean Time
+			1:00	Tunisia	CE%sT
+
+# Uganda
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Kampala	2:09:40 -	LMT	1928 Jul
+			3:00	-	EAT	1930
+			2:30	-	BEAT	1948
+			2:44:45	-	BEAUT	1957
+			3:00	-	EAT
+
+# Zambia
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Lusaka	1:53:08 -	LMT	1903 Mar
+			2:00	-	CAT
+
+# Zimbabwe
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Africa/Harare	2:04:12 -	LMT	1903 Mar
+			2:00	-	CAT
diff --git a/JodaTime/src/java/org/joda/time/tz/src/antarctica b/JodaTime/src/java/org/joda/time/tz/src/antarctica
index f3efe19b6..bfe894143 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/antarctica
+++ b/JodaTime/src/java/org/joda/time/tz/src/antarctica
@@ -1,317 +1,317 @@
-# @(#)antarctica	7.30
-# <pre>
-
-# From Paul Eggert (1999-11-15):
-# To keep things manageable, we list only locations occupied year-round; see
-# <a href="http://www.comnap.aq/comnap/comnap.nsf/P/Stations/">
-# COMNAP - Stations and Bases
-# </a>
-# and
-# <a href="http://www.spri.cam.ac.uk/bob/periant.htm">
-# Summary of the Peri-Antarctic Islands (1998-07-23)
-# </a>
-# for information.
-# Unless otherwise specified, we have no time zone information.
-#
-# Except for the French entries,
-# I made up all time zone abbreviations mentioned here; corrections welcome!
-# FORMAT is `zzz' and GMTOFF is 0 for locations while uninhabited.
-
-# These rules are stolen from the `europe' file.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	RussAQ	1981	1984	-	Apr	 1	 0:00	1:00	S
-Rule	RussAQ	1981	1983	-	Oct	 1	 0:00	0	-
-Rule	RussAQ	1984	1991	-	Sep	lastSun	 2:00s	0	-
-Rule	RussAQ	1985	1991	-	Mar	lastSun	 2:00s	1:00	S
-Rule	RussAQ	1992	only	-	Mar	lastSat	 23:00	1:00	S
-Rule	RussAQ	1992	only	-	Sep	lastSat	 23:00	0	-
-Rule	RussAQ	1993	max	-	Mar	lastSun	 2:00s	1:00	S
-Rule	RussAQ	1993	1995	-	Sep	lastSun	 2:00s	0	-
-Rule	RussAQ	1996	max	-	Oct	lastSun	 2:00s	0	-
-
-# These rules are stolen from the `southamerica' file.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	ArgAQ	1964	1966	-	Mar	 1	0:00	0	-
-Rule	ArgAQ	1964	1966	-	Oct	15	0:00	1:00	S
-Rule	ArgAQ	1967	only	-	Apr	 1	0:00	0	-
-Rule	ArgAQ	1967	1968	-	Oct	Sun<=7	0:00	1:00	S
-Rule	ArgAQ	1968	1969	-	Apr	Sun<=7	0:00	0	-
-Rule	ArgAQ	1974	only	-	Jan	23	0:00	1:00	S
-Rule	ArgAQ	1974	only	-	May	 1	0:00	0	-
-Rule	ArgAQ	1974	1976	-	Oct	Sun<=7	0:00	1:00	S
-Rule	ArgAQ	1975	1977	-	Apr	Sun<=7	0:00	0	-
-Rule	ChileAQ	1966	1997	-	Oct	Sun>=9	0:00	1:00	S
-Rule	ChileAQ	1967	1998	-	Mar	Sun>=9	0:00	0	-
-Rule	ChileAQ	1998	only	-	Sep	27	0:00	1:00	S
-Rule	ChileAQ	1999	only	-	Apr	 4	0:00	0	-
-Rule	ChileAQ	1999	max	-	Oct	Sun>=9	0:00	1:00	S
-Rule	ChileAQ	2000	max	-	Mar	Sun>=9	0:00	0	-
-
-
-# Argentina - year-round bases
-# Belgrano II, Confin Coast, -770227-0343737, since 1972-02-05
-# Esperanza, San Martin Land, -6323-05659, since 1952-12-17
-# Jubany, Potter Peninsula, King George Island, -6414-0602320, since 1982-01
-# Marambio, Seymour I, -6414-05637, since 1969-10-29
-# Orcadas, Laurie I, -6016-04444, since 1904-02-22
-# San Martin, Debenham I, -6807-06708, since 1951-03-21
-#	(except 1960-03 / 1976-03-21)
-
-# Australia - territories
-# Heard Island, McDonald Islands (uninhabited)
-#	previously sealers and scientific personnel wintered
-#	<a href="http://web.archive.org/web/20021204222245/http://www.dstc.qut.edu.au/DST/marg/daylight.html">
-#	Margaret Turner reports
-#	</a> (1999-09-30) that they're UTC+5, with no DST;
-#	presumably this is when they have visitors.
-#
-# year-round bases
-# Casey, Bailey Peninsula, -6617+11032, since 1969
-# Davis, Vestfold Hills, -6835+07759, since 1957-01-13
-#	(except 1964-11 - 1969-02)
-# Mawson, Holme Bay, -6736+06253, since 1954-02-13
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Antarctica/Casey	0	-	zzz	1969
-			8:00	-	WST	# Western (Aus) Standard Time
-Zone Antarctica/Davis	0	-	zzz	1957 Jan 13
-			7:00	-	DAVT	1964 Nov # Davis Time
-			0	-	zzz	1969 Feb
-			7:00	-	DAVT
-Zone Antarctica/Mawson	0	-	zzz	1954 Feb 13
-			6:00	-	MAWT	# Mawson Time
-# References:
-# <a href="http://www.antdiv.gov.au/aad/exop/sfo/casey/casey_aws.html">
-# Casey Weather (1998-02-26)
-# </a>
-# <a href="http://www.antdiv.gov.au/aad/exop/sfo/davis/video.html">
-# Davis Station, Antarctica (1998-02-26)
-# </a>
-# <a href="http://www.antdiv.gov.au/aad/exop/sfo/mawson/video.html">
-# Mawson Station, Antarctica (1998-02-25)
-# </a>
-
-# Brazil - year-round base
-# Comandante Ferraz, King George Island, -6205+05824, since 1983/4
-
-# Chile - year-round bases and towns
-# Escudero, South Shetland Is, -621157-0585735, since 1994
-# Presidente Eduadro Frei, King George Island, -6214-05848, since 1969-03-07
-# General Bernardo O'Higgins, Antarctic Peninsula, -6319-05704, since 1948-02
-# Capitan Arturo Prat, -6230-05941
-# Villa Las Estrellas (a town), around the Frei base, since 1984-04-09
-# These locations have always used Santiago time; use TZ='America/Santiago'.
-
-# China - year-round bases
-# Great Wall, King George Island, -6213-05858, since 1985-02-20
-# Zhongshan, Larsemann Hills, Prydz Bay, -6922+07623, since 1989-02-26
-
-# France - year-round bases
-#
-# From Antoine Leca (1997-01-20):
-# Time data are from Nicole Pailleau at the IFRTP
-# (French Institute for Polar Research and Technology).
-# She confirms that French Southern Territories and Terre Adelie bases
-# don't observe daylight saving time, even if Terre Adelie supplies came
-# from Tasmania.
-#
-# French Southern Territories with year-round inhabitants
-#
-# Martin-de-Vivies Base, Amsterdam Island, -374105+0773155, since 1950
-# Alfred-Faure Base, Crozet Islands, -462551+0515152, since 1964
-# Port-aux-Francais, Kerguelen Islands, -492110+0701303, since 1951;
-#	whaling & sealing station operated 1908/1914, 1920/1929, and 1951/1956
-#
-# St Paul Island - near Amsterdam, uninhabited
-#	fishing stations operated variously 1819/1931
-#
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Indian/Kerguelen	0	-	zzz	1950	# Port-aux-Francais
-			5:00	-	TFT	# ISO code TF Time
-#
-# year-round base in the main continent
-# Dumont-d'Urville, Ile des Petrels, -6640+14001, since 1956-11
-#
-# Another base at Port-Martin, 50km east, began operation in 1947.
-# It was destroyed by fire on 1952-01-14.
-#
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Antarctica/DumontDUrville 0 -	zzz	1947
-			10:00	-	PMT	1952 Jan 14 # Port-Martin Time
-			0	-	zzz	1956 Nov
-			10:00	-	DDUT	# Dumont-d'Urville Time
-# Reference:
-# <a href="http://en.wikipedia.org/wiki/Dumont_d'Urville_Station">
-# Dumont d'Urville Station (2005-12-05)
-# </a>
-
-# Germany - year-round base
-# Georg von Neumayer, -7039-00815
-
-# India - year-round base
-# Dakshin Gangotri, -7005+01200
-
-# Japan - year-round bases
-# Dome Fuji, -7719+03942
-# Syowa, -690022+0393524
-#
-# From Hideyuki Suzuki (1999-02-06):
-# In all Japanese stations, +0300 is used as the standard time.
-#
-# Syowa station, which is the first antarctic station of Japan,
-# was established on 1957-01-29.  Since Syowa station is still the main
-# station of Japan, it's appropriate for the principal location.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Antarctica/Syowa	0	-	zzz	1957 Jan 29
-			3:00	-	SYOT	# Syowa Time
-# See:
-# <a href="http://www.nipr.ac.jp/english/ara01.html">
-# NIPR Antarctic Research Activities (1999-08-17)
-# </a>
-
-# S Korea - year-round base
-# King Sejong, King George Island, -6213-05847, since 1988
-
-# New Zealand - claims
-# Balleny Islands (never inhabited)
-# Scott Island (never inhabited)
-#
-# year-round base
-# Scott, Ross Island, since 1957-01, is like Antarctica/McMurdo.
-#
-# These rules for New Zealand are stolen from the `australasia' file.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	NZAQ	1974	only	-	Nov	 3	2:00s	1:00	D
-Rule	NZAQ	1975	1988	-	Oct	lastSun	2:00s	1:00	D
-Rule	NZAQ	1989	only	-	Oct	 8	2:00s	1:00	D
-Rule	NZAQ	1990	max	-	Oct	Sun>=1	2:00s	1:00	D
-Rule	NZAQ	1975	only	-	Feb	23	2:00s	0	S
-Rule	NZAQ	1976	1989	-	Mar	Sun>=1	2:00s	0	S
-Rule	NZAQ	1990	max	-	Mar	Sun>=15	2:00s	0	S
-
-# Norway - territories
-# Bouvet (never inhabited)
-#
-# claims
-# Peter I Island (never inhabited)
-
-# Poland - year-round base
-# Arctowski, King George Island, -620945-0582745, since 1977
-
-# Russia - year-round bases
-# Bellingshausen, King George Island, -621159-0585337, since 1968-02-22
-# Mirny, Davis coast, -6633+09301, since 1956-02
-# Molodezhnaya, Alasheyev Bay, -6740+04551,
-#	year-round from 1962-02 to 1999-07-01
-# Novolazarevskaya, Queen Maud Land, -7046+01150,
-#	year-round from 1960/61 to 1992
-
-# Vostok, since 1957-12-16, temporarily closed 1994-02/1994-11
-# <a href="http://quest.arc.nasa.gov/antarctica/QA/computers/Directions,Time,ZIP">
-# From Craig Mundell (1994-12-15)</a>:
-# Vostok, which is one of the Russian stations, is set on the same
-# time as Moscow, Russia.
-#
-# From Lee Hotz (2001-03-08):
-# I queried the folks at Columbia who spent the summer at Vostok and this is
-# what they had to say about time there:
-# ``in the US Camp (East Camp) we have been on New Zealand (McMurdo)
-# time, which is 12 hours ahead of GMT. The Russian Station Vostok was
-# 6 hours behind that (although only 2 miles away, i.e. 6 hours ahead
-# of GMT). This is a time zone I think two hours east of Moscow. The
-# natural time zone is in between the two: 8 hours ahead of GMT.''
-#
-# From Paul Eggert (2001-05-04):
-# This seems to be hopelessly confusing, so I asked Lee Hotz about it
-# in person.  He said that some Antartic locations set their local
-# time so that noon is the warmest part of the day, and that this
-# changes during the year and does not necessarily correspond to mean
-# solar noon.  So the Vostok time might have been whatever the clocks
-# happened to be during their visit.  So we still don't really know what time
-# it is at Vostok.  But we'll guess UTC+6.
-#
-Zone Antarctica/Vostok	0	-	zzz	1957 Dec 16
-			6:00	-	VOST	# Vostok time
-
-# S Africa - year-round bases
-# Marion Island, -4653+03752
-# Sanae, -7141-00250
-
-# UK
-#
-# British Antarctic Territories (BAT) claims
-# South Orkney Islands
-#	scientific station from 1903
-#	whaling station at Signy I 1920/1926
-# South Shetland Islands
-#
-# year-round bases
-# Bird Island, South Georgia, -5400-03803, since 1983
-# Deception Island, -6259-06034, whaling station 1912/1931,
-#	scientific station 1943/1967,
-#	previously sealers and a scientific expedition wintered by accident,
-#	and a garrison was deployed briefly
-# Halley, Coates Land, -7535-02604, since 1956-01-06
-#	Halley is on a moving ice shelf and is periodically relocated
-#	so that it is never more than 10km from its nominal location.
-# Rothera, Adelaide Island, -6734-6808, since 1976-12-01
-#
-# From Paul Eggert (2002-10-22)
-# <http://webexhibits.org/daylightsaving/g.html> says Rothera is -03 all year.
-#
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Antarctica/Rothera	0	-	zzz	1976 Dec  1
-			-3:00	-	ROTT	# Rothera time
-
-# Uruguay - year round base
-# Artigas, King George Island, -621104-0585107
-
-# USA - year-round bases
-#
-# Palmer, Anvers Island, since 1965 (moved 2 miles in 1968)
-#
-# From Ethan Dicks (1996-10-06):
-# It keeps the same time as Punta Arenas, Chile, because, just like us
-# and the South Pole, that's the other end of their supply line....
-# I verified with someone who was there that since 1980,
-# Palmer has followed Chile.  Prior to that, before the Falklands War,
-# Palmer used to be supplied from Argentina.
-#
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Antarctica/Palmer	0	-	zzz	1965
-			-4:00	ArgAQ	AR%sT	1969 Oct 5
-			-3:00	ArgAQ	AR%sT	1982 May
-			-4:00	ChileAQ	CL%sT
-#
-#
-# McMurdo, Ross Island, since 1955-12
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Antarctica/McMurdo	0	-	zzz	1956
-			12:00	NZAQ	NZ%sT
-#
-# Amundsen-Scott, South Pole, continuously occupied since 1956-11-20
-#
-# From Paul Eggert (1996-09-03):
-# Normally it wouldn't have a separate entry, since it's like the
-# larger Antarctica/McMurdo since 1970, but it's too famous to omit.
-#
-# From Chris Carrier (1996-06-27):
-# Siple, the first commander of the South Pole station,
-# stated that he would have liked to have kept GMT at the station,
-# but that he found it more convenient to keep GMT+12
-# as supplies for the station were coming from McMurdo Sound,
-# which was on GMT+12 because New Zealand was on GMT+12 all year
-# at that time (1957).  (Source: Siple's book 90 degrees SOUTH.)
-#
-# From Susan Smith
-# http://www.cybertours.com/whs/pole10.html
-# (1995-11-13 16:24:56 +1300, no longer available):
-# We use the same time as McMurdo does.
-# And they use the same time as Christchurch, NZ does....
-# One last quirk about South Pole time.
-# All the electric clocks are usually wrong.
-# Something about the generators running at 60.1hertz or something
-# makes all of the clocks run fast.  So every couple of days,
-# we have to go around and set them back 5 minutes or so.
-# Maybe if we let them run fast all of the time, we'd get to leave here sooner!!
-#
-Link	Antarctica/McMurdo	Antarctica/South_Pole
+# @(#)antarctica	7.30
+# <pre>
+
+# From Paul Eggert (1999-11-15):
+# To keep things manageable, we list only locations occupied year-round; see
+# <a href="http://www.comnap.aq/comnap/comnap.nsf/P/Stations/">
+# COMNAP - Stations and Bases
+# </a>
+# and
+# <a href="http://www.spri.cam.ac.uk/bob/periant.htm">
+# Summary of the Peri-Antarctic Islands (1998-07-23)
+# </a>
+# for information.
+# Unless otherwise specified, we have no time zone information.
+#
+# Except for the French entries,
+# I made up all time zone abbreviations mentioned here; corrections welcome!
+# FORMAT is `zzz' and GMTOFF is 0 for locations while uninhabited.
+
+# These rules are stolen from the `europe' file.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	RussAQ	1981	1984	-	Apr	 1	 0:00	1:00	S
+Rule	RussAQ	1981	1983	-	Oct	 1	 0:00	0	-
+Rule	RussAQ	1984	1991	-	Sep	lastSun	 2:00s	0	-
+Rule	RussAQ	1985	1991	-	Mar	lastSun	 2:00s	1:00	S
+Rule	RussAQ	1992	only	-	Mar	lastSat	 23:00	1:00	S
+Rule	RussAQ	1992	only	-	Sep	lastSat	 23:00	0	-
+Rule	RussAQ	1993	max	-	Mar	lastSun	 2:00s	1:00	S
+Rule	RussAQ	1993	1995	-	Sep	lastSun	 2:00s	0	-
+Rule	RussAQ	1996	max	-	Oct	lastSun	 2:00s	0	-
+
+# These rules are stolen from the `southamerica' file.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	ArgAQ	1964	1966	-	Mar	 1	0:00	0	-
+Rule	ArgAQ	1964	1966	-	Oct	15	0:00	1:00	S
+Rule	ArgAQ	1967	only	-	Apr	 1	0:00	0	-
+Rule	ArgAQ	1967	1968	-	Oct	Sun<=7	0:00	1:00	S
+Rule	ArgAQ	1968	1969	-	Apr	Sun<=7	0:00	0	-
+Rule	ArgAQ	1974	only	-	Jan	23	0:00	1:00	S
+Rule	ArgAQ	1974	only	-	May	 1	0:00	0	-
+Rule	ArgAQ	1974	1976	-	Oct	Sun<=7	0:00	1:00	S
+Rule	ArgAQ	1975	1977	-	Apr	Sun<=7	0:00	0	-
+Rule	ChileAQ	1966	1997	-	Oct	Sun>=9	0:00	1:00	S
+Rule	ChileAQ	1967	1998	-	Mar	Sun>=9	0:00	0	-
+Rule	ChileAQ	1998	only	-	Sep	27	0:00	1:00	S
+Rule	ChileAQ	1999	only	-	Apr	 4	0:00	0	-
+Rule	ChileAQ	1999	max	-	Oct	Sun>=9	0:00	1:00	S
+Rule	ChileAQ	2000	max	-	Mar	Sun>=9	0:00	0	-
+
+
+# Argentina - year-round bases
+# Belgrano II, Confin Coast, -770227-0343737, since 1972-02-05
+# Esperanza, San Martin Land, -6323-05659, since 1952-12-17
+# Jubany, Potter Peninsula, King George Island, -6414-0602320, since 1982-01
+# Marambio, Seymour I, -6414-05637, since 1969-10-29
+# Orcadas, Laurie I, -6016-04444, since 1904-02-22
+# San Martin, Debenham I, -6807-06708, since 1951-03-21
+#	(except 1960-03 / 1976-03-21)
+
+# Australia - territories
+# Heard Island, McDonald Islands (uninhabited)
+#	previously sealers and scientific personnel wintered
+#	<a href="http://web.archive.org/web/20021204222245/http://www.dstc.qut.edu.au/DST/marg/daylight.html">
+#	Margaret Turner reports
+#	</a> (1999-09-30) that they're UTC+5, with no DST;
+#	presumably this is when they have visitors.
+#
+# year-round bases
+# Casey, Bailey Peninsula, -6617+11032, since 1969
+# Davis, Vestfold Hills, -6835+07759, since 1957-01-13
+#	(except 1964-11 - 1969-02)
+# Mawson, Holme Bay, -6736+06253, since 1954-02-13
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Antarctica/Casey	0	-	zzz	1969
+			8:00	-	WST	# Western (Aus) Standard Time
+Zone Antarctica/Davis	0	-	zzz	1957 Jan 13
+			7:00	-	DAVT	1964 Nov # Davis Time
+			0	-	zzz	1969 Feb
+			7:00	-	DAVT
+Zone Antarctica/Mawson	0	-	zzz	1954 Feb 13
+			6:00	-	MAWT	# Mawson Time
+# References:
+# <a href="http://www.antdiv.gov.au/aad/exop/sfo/casey/casey_aws.html">
+# Casey Weather (1998-02-26)
+# </a>
+# <a href="http://www.antdiv.gov.au/aad/exop/sfo/davis/video.html">
+# Davis Station, Antarctica (1998-02-26)
+# </a>
+# <a href="http://www.antdiv.gov.au/aad/exop/sfo/mawson/video.html">
+# Mawson Station, Antarctica (1998-02-25)
+# </a>
+
+# Brazil - year-round base
+# Comandante Ferraz, King George Island, -6205+05824, since 1983/4
+
+# Chile - year-round bases and towns
+# Escudero, South Shetland Is, -621157-0585735, since 1994
+# Presidente Eduadro Frei, King George Island, -6214-05848, since 1969-03-07
+# General Bernardo O'Higgins, Antarctic Peninsula, -6319-05704, since 1948-02
+# Capitan Arturo Prat, -6230-05941
+# Villa Las Estrellas (a town), around the Frei base, since 1984-04-09
+# These locations have always used Santiago time; use TZ='America/Santiago'.
+
+# China - year-round bases
+# Great Wall, King George Island, -6213-05858, since 1985-02-20
+# Zhongshan, Larsemann Hills, Prydz Bay, -6922+07623, since 1989-02-26
+
+# France - year-round bases
+#
+# From Antoine Leca (1997-01-20):
+# Time data are from Nicole Pailleau at the IFRTP
+# (French Institute for Polar Research and Technology).
+# She confirms that French Southern Territories and Terre Adelie bases
+# don't observe daylight saving time, even if Terre Adelie supplies came
+# from Tasmania.
+#
+# French Southern Territories with year-round inhabitants
+#
+# Martin-de-Vivies Base, Amsterdam Island, -374105+0773155, since 1950
+# Alfred-Faure Base, Crozet Islands, -462551+0515152, since 1964
+# Port-aux-Francais, Kerguelen Islands, -492110+0701303, since 1951;
+#	whaling & sealing station operated 1908/1914, 1920/1929, and 1951/1956
+#
+# St Paul Island - near Amsterdam, uninhabited
+#	fishing stations operated variously 1819/1931
+#
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Indian/Kerguelen	0	-	zzz	1950	# Port-aux-Francais
+			5:00	-	TFT	# ISO code TF Time
+#
+# year-round base in the main continent
+# Dumont-d'Urville, Ile des Petrels, -6640+14001, since 1956-11
+#
+# Another base at Port-Martin, 50km east, began operation in 1947.
+# It was destroyed by fire on 1952-01-14.
+#
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Antarctica/DumontDUrville 0 -	zzz	1947
+			10:00	-	PMT	1952 Jan 14 # Port-Martin Time
+			0	-	zzz	1956 Nov
+			10:00	-	DDUT	# Dumont-d'Urville Time
+# Reference:
+# <a href="http://en.wikipedia.org/wiki/Dumont_d'Urville_Station">
+# Dumont d'Urville Station (2005-12-05)
+# </a>
+
+# Germany - year-round base
+# Georg von Neumayer, -7039-00815
+
+# India - year-round base
+# Dakshin Gangotri, -7005+01200
+
+# Japan - year-round bases
+# Dome Fuji, -7719+03942
+# Syowa, -690022+0393524
+#
+# From Hideyuki Suzuki (1999-02-06):
+# In all Japanese stations, +0300 is used as the standard time.
+#
+# Syowa station, which is the first antarctic station of Japan,
+# was established on 1957-01-29.  Since Syowa station is still the main
+# station of Japan, it's appropriate for the principal location.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Antarctica/Syowa	0	-	zzz	1957 Jan 29
+			3:00	-	SYOT	# Syowa Time
+# See:
+# <a href="http://www.nipr.ac.jp/english/ara01.html">
+# NIPR Antarctic Research Activities (1999-08-17)
+# </a>
+
+# S Korea - year-round base
+# King Sejong, King George Island, -6213-05847, since 1988
+
+# New Zealand - claims
+# Balleny Islands (never inhabited)
+# Scott Island (never inhabited)
+#
+# year-round base
+# Scott, Ross Island, since 1957-01, is like Antarctica/McMurdo.
+#
+# These rules for New Zealand are stolen from the `australasia' file.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	NZAQ	1974	only	-	Nov	 3	2:00s	1:00	D
+Rule	NZAQ	1975	1988	-	Oct	lastSun	2:00s	1:00	D
+Rule	NZAQ	1989	only	-	Oct	 8	2:00s	1:00	D
+Rule	NZAQ	1990	max	-	Oct	Sun>=1	2:00s	1:00	D
+Rule	NZAQ	1975	only	-	Feb	23	2:00s	0	S
+Rule	NZAQ	1976	1989	-	Mar	Sun>=1	2:00s	0	S
+Rule	NZAQ	1990	max	-	Mar	Sun>=15	2:00s	0	S
+
+# Norway - territories
+# Bouvet (never inhabited)
+#
+# claims
+# Peter I Island (never inhabited)
+
+# Poland - year-round base
+# Arctowski, King George Island, -620945-0582745, since 1977
+
+# Russia - year-round bases
+# Bellingshausen, King George Island, -621159-0585337, since 1968-02-22
+# Mirny, Davis coast, -6633+09301, since 1956-02
+# Molodezhnaya, Alasheyev Bay, -6740+04551,
+#	year-round from 1962-02 to 1999-07-01
+# Novolazarevskaya, Queen Maud Land, -7046+01150,
+#	year-round from 1960/61 to 1992
+
+# Vostok, since 1957-12-16, temporarily closed 1994-02/1994-11
+# <a href="http://quest.arc.nasa.gov/antarctica/QA/computers/Directions,Time,ZIP">
+# From Craig Mundell (1994-12-15)</a>:
+# Vostok, which is one of the Russian stations, is set on the same
+# time as Moscow, Russia.
+#
+# From Lee Hotz (2001-03-08):
+# I queried the folks at Columbia who spent the summer at Vostok and this is
+# what they had to say about time there:
+# ``in the US Camp (East Camp) we have been on New Zealand (McMurdo)
+# time, which is 12 hours ahead of GMT. The Russian Station Vostok was
+# 6 hours behind that (although only 2 miles away, i.e. 6 hours ahead
+# of GMT). This is a time zone I think two hours east of Moscow. The
+# natural time zone is in between the two: 8 hours ahead of GMT.''
+#
+# From Paul Eggert (2001-05-04):
+# This seems to be hopelessly confusing, so I asked Lee Hotz about it
+# in person.  He said that some Antartic locations set their local
+# time so that noon is the warmest part of the day, and that this
+# changes during the year and does not necessarily correspond to mean
+# solar noon.  So the Vostok time might have been whatever the clocks
+# happened to be during their visit.  So we still don't really know what time
+# it is at Vostok.  But we'll guess UTC+6.
+#
+Zone Antarctica/Vostok	0	-	zzz	1957 Dec 16
+			6:00	-	VOST	# Vostok time
+
+# S Africa - year-round bases
+# Marion Island, -4653+03752
+# Sanae, -7141-00250
+
+# UK
+#
+# British Antarctic Territories (BAT) claims
+# South Orkney Islands
+#	scientific station from 1903
+#	whaling station at Signy I 1920/1926
+# South Shetland Islands
+#
+# year-round bases
+# Bird Island, South Georgia, -5400-03803, since 1983
+# Deception Island, -6259-06034, whaling station 1912/1931,
+#	scientific station 1943/1967,
+#	previously sealers and a scientific expedition wintered by accident,
+#	and a garrison was deployed briefly
+# Halley, Coates Land, -7535-02604, since 1956-01-06
+#	Halley is on a moving ice shelf and is periodically relocated
+#	so that it is never more than 10km from its nominal location.
+# Rothera, Adelaide Island, -6734-6808, since 1976-12-01
+#
+# From Paul Eggert (2002-10-22)
+# <http://webexhibits.org/daylightsaving/g.html> says Rothera is -03 all year.
+#
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Antarctica/Rothera	0	-	zzz	1976 Dec  1
+			-3:00	-	ROTT	# Rothera time
+
+# Uruguay - year round base
+# Artigas, King George Island, -621104-0585107
+
+# USA - year-round bases
+#
+# Palmer, Anvers Island, since 1965 (moved 2 miles in 1968)
+#
+# From Ethan Dicks (1996-10-06):
+# It keeps the same time as Punta Arenas, Chile, because, just like us
+# and the South Pole, that's the other end of their supply line....
+# I verified with someone who was there that since 1980,
+# Palmer has followed Chile.  Prior to that, before the Falklands War,
+# Palmer used to be supplied from Argentina.
+#
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Antarctica/Palmer	0	-	zzz	1965
+			-4:00	ArgAQ	AR%sT	1969 Oct 5
+			-3:00	ArgAQ	AR%sT	1982 May
+			-4:00	ChileAQ	CL%sT
+#
+#
+# McMurdo, Ross Island, since 1955-12
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Antarctica/McMurdo	0	-	zzz	1956
+			12:00	NZAQ	NZ%sT
+#
+# Amundsen-Scott, South Pole, continuously occupied since 1956-11-20
+#
+# From Paul Eggert (1996-09-03):
+# Normally it wouldn't have a separate entry, since it's like the
+# larger Antarctica/McMurdo since 1970, but it's too famous to omit.
+#
+# From Chris Carrier (1996-06-27):
+# Siple, the first commander of the South Pole station,
+# stated that he would have liked to have kept GMT at the station,
+# but that he found it more convenient to keep GMT+12
+# as supplies for the station were coming from McMurdo Sound,
+# which was on GMT+12 because New Zealand was on GMT+12 all year
+# at that time (1957).  (Source: Siple's book 90 degrees SOUTH.)
+#
+# From Susan Smith
+# http://www.cybertours.com/whs/pole10.html
+# (1995-11-13 16:24:56 +1300, no longer available):
+# We use the same time as McMurdo does.
+# And they use the same time as Christchurch, NZ does....
+# One last quirk about South Pole time.
+# All the electric clocks are usually wrong.
+# Something about the generators running at 60.1hertz or something
+# makes all of the clocks run fast.  So every couple of days,
+# we have to go around and set them back 5 minutes or so.
+# Maybe if we let them run fast all of the time, we'd get to leave here sooner!!
+#
+Link	Antarctica/McMurdo	Antarctica/South_Pole
diff --git a/JodaTime/src/java/org/joda/time/tz/src/asia b/JodaTime/src/java/org/joda/time/tz/src/asia
index 59e62dde4..22247bd45 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/asia
+++ b/JodaTime/src/java/org/joda/time/tz/src/asia
@@ -1,1642 +1,1652 @@
-# @(#)asia	7.90
-# <pre>
-
-# This data is by no means authoritative; if you think you know better,
-# go ahead and edit the file (and please send any changes to
-# tz@elsie.nci.nih.gov for general use in the future).
-
-# From Paul Eggert (1999-03-22):
-#
-# A good source for time zone historical data outside the U.S. is
-# Thomas G. Shanks, The International Atlas (5th edition),
-# San Diego: ACS Publications, Inc. (1999).
-#
-# Gwillim Law writes that a good source
-# for recent time zone data is the International Air Transport
-# Association's Standard Schedules Information Manual (IATA SSIM),
-# published semiannually.  Law sent in several helpful summaries
-# of the IATA's data after 1990.
-#
-# Except where otherwise noted, Shanks is the source for entries through 1990,
-# and IATA SSIM is the source for entries after 1990.
-#
-# Another source occasionally used is Edward W. Whitman, World Time Differences,
-# Whitman Publishing Co, 2 Niagara Av, Ealing, London (undated), which
-# I found in the UCLA library.
-#
-# A reliable and entertaining source about time zones is
-# Derek Howse, Greenwich time and longitude, Philip Wilson Publishers (1997).
-#
-# I invented the abbreviations marked `*' in the following table;
-# the rest are from earlier versions of this file, or from other sources.
-# Corrections are welcome!
-#	     std  dst
-#	     LMT	Local Mean Time
-#	2:00 EET  EEST	Eastern European Time
-#	2:00 IST  IDT	Israel
-#	3:00 AST  ADT	Arabia*
-#	3:30 IRST IRDT	Iran
-#	4:00 GST	Gulf*
-#	5:30 IST	India
-#	7:00 ICT	Indochina*
-#	7:00 WIT	west Indonesia
-#	8:00 CIT	central Indonesia
-#	8:00 CST	China
-#	9:00 CJT	Central Japanese Time (1896/1937)*
-#	9:00 EIT	east Indonesia
-#	9:00 JST  JDT	Japan
-#	9:00 KST  KDT	Korea
-#	9:30 CST	(Australian) Central Standard Time
-#
-# See the `europe' file for Russia and Turkey in Asia.
-
-# From Guy Harris:
-# Incorporates data for Singapore from Robert Elz' asia 1.1, as well as
-# additional information from Tom Yap, Sun Microsystems Intercontinental
-# Technical Support (including a page from the Official Airline Guide -
-# Worldwide Edition).  The names for time zones are guesses.
-
-###############################################################################
-
-# These rules are stolen from the `europe' file.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	EUAsia	1981	max	-	Mar	lastSun	 1:00u	1:00	S
-Rule	EUAsia	1996	max	-	Oct	lastSun	 1:00u	0	-
-Rule E-EurAsia	1981	max	-	Mar	lastSun	 0:00	1:00	S
-Rule E-EurAsia	1979	1995	-	Sep	lastSun	 0:00	0	-
-Rule E-EurAsia	1996	max	-	Oct	lastSun	 0:00	0	-
-Rule RussiaAsia	1981	1984	-	Apr	1	 0:00	1:00	S
-Rule RussiaAsia	1981	1983	-	Oct	1	 0:00	0	-
-Rule RussiaAsia	1984	1991	-	Sep	lastSun	 2:00s	0	-
-Rule RussiaAsia	1985	1991	-	Mar	lastSun	 2:00s	1:00	S
-Rule RussiaAsia	1992	only	-	Mar	lastSat	23:00	1:00	S
-Rule RussiaAsia	1992	only	-	Sep	lastSat	23:00	0	-
-Rule RussiaAsia	1993	max	-	Mar	lastSun	 2:00s	1:00	S
-Rule RussiaAsia	1993	1995	-	Sep	lastSun	 2:00s	0	-
-Rule RussiaAsia	1996	max	-	Oct	lastSun	 2:00s	0	-
-
-# Afghanistan
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Kabul	4:36:48 -	LMT	1890
-			4:00	-	AFT	1945
-			4:30	-	AFT
-
-# Armenia
-# From Paul Eggert (1999-10-29):
-# Shanks has Yerevan switching to 3:00 (with Russian DST) in spring 1991,
-# then to 4:00 with no DST in fall 1995, then readopting Russian DST in 1997.
-# Go with Shanks, even when he disagrees with others.  Edgar Der-Danieliantz
-# reported (1996-05-04) that Yerevan probably wouldn't use DST
-# in 1996, though it did use DST in 1995.  IATA SSIM (1991/1998) reports that
-# Armenia switched from 3:00 to 4:00 in 1998 and observed DST after 1991,
-# but started switching at 3:00s in 1998.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Yerevan	2:58:00 -	LMT	1924 May  2
-			3:00	-	YERT	1957 Mar    # Yerevan Time
-			4:00 RussiaAsia YER%sT	1991 Mar 31 2:00s
-			3:00	1:00	YERST	1991 Sep 23 # independence
-			3:00 RussiaAsia	AM%sT	1995 Sep 24 2:00s
-			4:00	-	AMT	1997
-			4:00 RussiaAsia	AM%sT
-
-# Azerbaijan
-# From Rustam Aliyev of the Azerbaijan Internet Forum (2005-10-23):
-# According to the resolution of Cabinet of Ministers, 1997
-# Resolution available at: http://aif.az/docs/daylight_res.pdf
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Azer	1997	max	-	Mar	lastSun	 4:00	1:00	S
-Rule	Azer	1997	max	-	Oct	lastSun	 5:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Baku	3:19:24 -	LMT	1924 May  2
-			3:00	-	BAKT	1957 Mar    # Baku Time
-			4:00 RussiaAsia BAK%sT	1991 Mar 31 2:00s
-			3:00	1:00	BAKST	1991 Aug 30 # independence
-			3:00 RussiaAsia	AZ%sT	1992 Sep lastSat 23:00
-			4:00	-	AZT	1996 # Azerbaijan time
-			4:00	EUAsia	AZ%sT	1997
-			4:00	Azer	AZ%sT
-
-# Bahrain
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Bahrain	3:22:20 -	LMT	1920		# Al Manamah
-			4:00	-	GST	1972 Jun
-			3:00	-	AST
-
-# Bangladesh
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Dhaka	6:01:40 -	LMT	1890
-			5:53:20	-	HMT	1941 Oct    # Howrah Mean Time?
-			6:30	-	BURT	1942 May 15 # Burma Time
-			5:30	-	IST	1942 Sep
-			6:30	-	BURT	1951 Sep 30
-			6:00	-	DACT	1971 Mar 26 # Dacca Time
-			6:00	-	BDT	# Bangladesh Time
-
-# Bhutan
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Thimphu	5:58:36 -	LMT	1947 Aug 15 # or Thimbu
-			5:30	-	IST	1987 Oct
-			6:00	-	BTT	# Bhutan Time
-
-# British Indian Ocean Territory
-# Whitman and the 1995 CIA time zone map say 5:00, but the
-# 1997 and later maps say 6:00.  Assume the switch occurred in 1996.
-# We have no information as to when standard time was introduced;
-# assume it occurred in 1907, the same year as Mauritius (which
-# then contained the Chagos Archipelago).
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Indian/Chagos	4:49:40	-	LMT	1907
-			5:00	-	IOT	1996 # BIOT Time
-			6:00	-	IOT
-
-# Brunei
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Brunei	7:39:40 -	LMT	1926 Mar   # Bandar Seri Begawan
-			7:30	-	BNT	1933
-			8:00	-	BNT
-
-# Burma / Myanmar
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Rangoon	6:24:40 -	LMT	1880		# or Yangon
-			6:24:36	-	RMT	1920	   # Rangoon Mean Time?
-			6:30	-	BURT	1942 May   # Burma Time
-			9:00	-	JST	1945 May 3
-			6:30	-	MMT		   # Myanmar Time
-
-# Cambodia
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Phnom_Penh	6:59:40 -	LMT	1906 Jun  9
-			7:06:20	-	SMT	1911 Mar 11 0:01 # Saigon MT?
-			7:00	-	ICT	1912 May
-			8:00	-	ICT	1931 May
-			7:00	-	ICT
-
-# China
-
-# From Guy Harris:
-# People's Republic of China.  Yes, they really have only one time zone.
-
-# From Bob Devine (1988-01-28):
-# No they don't.  See TIME mag, 1986-02-17 p.52.  Even though
-# China is across 4 physical time zones, before Feb 1, 1986 only the
-# Peking (Bejing) time zone was recognized.  Since that date, China
-# has two of 'em -- Peking's and Urumqi (named after the capital of
-# the Xinjiang Uyghur Autonomous Region).  I don't know about DST for it.
-#
-# . . .I just deleted the DST table and this editor makes it too
-# painful to suck in another copy..  So, here is what I have for
-# DST start/end dates for Peking's time zone (info from AP):
-#
-#     1986 May 4 - Sept 14
-#     1987 mid-April - ??
-
-# From U. S. Naval Observatory (1989-01-19):
-# CHINA               8 H  AHEAD OF UTC  ALL OF CHINA, INCL TAIWAN
-# CHINA               9 H  AHEAD OF UTC  APR 17 - SEP 10
-
-# From Paul Eggert (1995-12-19):
-# Shanks writes that China has had a single time zone since 1980 May 1,
-# observing summer DST from 1986 through 1991; this contradicts Devine's
-# note about Time magazine, though apparently _something_ happened in 1986.
-# Go with Shanks for now.  I made up names for the other pre-1980 time zones.
-
-# From Shanks:
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Shang	1940	only	-	Jun	 3	0:00	1:00	D
-Rule	Shang	1940	1941	-	Oct	 1	0:00	0	S
-Rule	Shang	1941	only	-	Mar	16	0:00	1:00	D
-Rule	PRC	1986	only	-	May	 4	0:00	1:00	D
-Rule	PRC	1986	1991	-	Sep	Sun>=11	0:00	0	S
-Rule	PRC	1987	1991	-	Apr	Sun>=10	0:00	1:00	D
-#
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-#
-# From Anthony Fok (2001-12-20):
-# BTW, I did some research on-line and found some info regarding these five
-# historic timezones from some Taiwan websites.  And yes, there are official
-# Chinese names for these locales (before 1949):
-# Changbai Time ("Long-white Time", Long-white = Heilongjiang area)
-Zone	Asia/Harbin	8:26:44	-	LMT	1928 # or Haerbin
-			8:30	-	CHAT	1932 Mar # Changbai Time
-			8:00	-	CST	1940
-			9:00	-	CHAT	1966 May
-			8:30	-	CHAT	1980 May
-			8:00	PRC	C%sT
-# Zhongyuan Time ("Central plain Time")
-Zone	Asia/Shanghai	8:05:52	-	LMT	1928
-			8:00	Shang	C%sT	1949
-			8:00	PRC	C%sT
-# Long-shu Time (probably due to Long and Shu being two names of that area)
-Zone	Asia/Chongqing	7:06:20	-	LMT	1928 # or Chungking
-			7:00	-	LONT	1980 May # Long-shu Time
-			8:00	PRC	C%sT
-# Xin-zang Time ("Xinjiang-Tibet Time")
-Zone	Asia/Urumqi	5:50:20	-	LMT	1928 # or Urumchi
-			6:00	-	URUT	1980 May # Urumqi Time
-			8:00	PRC	C%sT
-# Kunlun Time
-Zone	Asia/Kashgar	5:03:56	-	LMT	1928 # or Kashi or Kaxgar
-			5:30	-	KAST	1940	 # Kashgar Time
-			5:00	-	KAST	1980 May
-			8:00	PRC	C%sT
-
-# Hong Kong (Xianggang)
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	HK	1946	only	-	Apr	20	3:30	1:00	S
-Rule	HK	1946	only	-	Dec	1	3:30	0	-
-Rule	HK	1947	only	-	Apr	13	3:30	1:00	S
-Rule	HK	1947	only	-	Dec	30	3:30	0	-
-Rule	HK	1948	only	-	May	2	3:30	1:00	S
-Rule	HK	1948	1952	-	Oct	lastSun	3:30	0	-
-Rule	HK	1949	1953	-	Apr	Sun>=1	3:30	1:00	S
-Rule	HK	1953	only	-	Nov	1	3:30	0	-
-Rule	HK	1954	1964	-	Mar	Sun>=18	3:30	1:00	S
-Rule	HK	1954	only	-	Oct	31	3:30	0	-
-Rule	HK	1955	1964	-	Nov	Sun>=1	3:30	0	-
-Rule	HK	1965	1977	-	Apr	Sun>=16	3:30	1:00	S
-Rule	HK	1965	1977	-	Oct	Sun>=16	3:30	0	-
-Rule	HK	1979	1980	-	May	Sun>=8	3:30	1:00	S
-Rule	HK	1979	1980	-	Oct	Sun>=16	3:30	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Hong_Kong	7:36:36 -	LMT	1904 Oct 30
-			8:00	HK	HK%sT
-
-
-###############################################################################
-
-# Taiwan
-
-# Shanks writes that Taiwan observed DST during 1945, when it
-# was still controlled by Japan.  This is hard to believe, but we don't
-# have any other information.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Taiwan	1945	1951	-	May	1	0:00	1:00	D
-Rule	Taiwan	1945	1951	-	Oct	1	0:00	0	S
-Rule	Taiwan	1952	only	-	Mar	1	0:00	1:00	D
-Rule	Taiwan	1952	1954	-	Nov	1	0:00	0	S
-Rule	Taiwan	1953	1959	-	Apr	1	0:00	1:00	D
-Rule	Taiwan	1955	1961	-	Oct	1	0:00	0	S
-Rule	Taiwan	1960	1961	-	Jun	1	0:00	1:00	D
-Rule	Taiwan	1974	1975	-	Apr	1	0:00	1:00	D
-Rule	Taiwan	1974	1975	-	Oct	1	0:00	0	S
-Rule	Taiwan	1980	only	-	Jun	30	0:00	1:00	D
-Rule	Taiwan	1980	only	-	Sep	30	0:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Taipei	8:06:00 -	LMT	1896 # or Taibei or T'ai-pei
-			8:00	Taiwan	C%sT
-
-# Macau (Macao, Aomen)
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Macau	1961	1962	-	Mar	Sun>=16	3:30	1:00	S
-Rule	Macau	1961	1964	-	Nov	Sun>=1	3:30	0	-
-Rule	Macau	1963	only	-	Mar	Sun>=16	0:00	1:00	S
-Rule	Macau	1964	only	-	Mar	Sun>=16	3:30	1:00	S
-Rule	Macau	1965	only	-	Mar	Sun>=16	0:00	1:00	S
-Rule	Macau	1965	only	-	Oct	31	0:00	0	-
-Rule	Macau	1966	1971	-	Apr	Sun>=16	3:30	1:00	S
-Rule	Macau	1966	1971	-	Oct	Sun>=16	3:30	0	-
-Rule	Macau	1972	1974	-	Apr	Sun>=15	0:00	1:00	S
-Rule	Macau	1972	1973	-	Oct	Sun>=15	0:00	0	-
-Rule	Macau	1974	1977	-	Oct	Sun>=15	3:30	0	-
-Rule	Macau	1975	1977	-	Apr	Sun>=15	3:30	1:00	S
-Rule	Macau	1978	1980	-	Apr	Sun>=15	0:00	1:00	S
-Rule	Macau	1978	1980	-	Oct	Sun>=15	0:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Macau	7:34:20 -	LMT	1912
-			8:00	Macau	MO%sT	1999 Dec 20 # return to China
-			8:00	PRC	C%sT
-
-
-###############################################################################
-
-# Cyprus
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Cyprus	1975	only	-	Apr	13	0:00	1:00	S
-Rule	Cyprus	1975	only	-	Oct	12	0:00	0	-
-Rule	Cyprus	1976	only	-	May	15	0:00	1:00	S
-Rule	Cyprus	1976	only	-	Oct	11	0:00	0	-
-Rule	Cyprus	1977	1980	-	Apr	Sun>=1	0:00	1:00	S
-Rule	Cyprus	1977	only	-	Sep	25	0:00	0	-
-Rule	Cyprus	1978	only	-	Oct	2	0:00	0	-
-Rule	Cyprus	1979	1997	-	Sep	lastSun	0:00	0	-
-Rule	Cyprus	1981	1998	-	Mar	lastSun	0:00	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Nicosia	2:13:28 -	LMT	1921 Nov 14
-			2:00	Cyprus	EE%sT	1998 Sep
-			2:00	EUAsia	EE%sT
-# IATA SSIM (1998-09) has Cyprus using EU rules for the first time.
-
-# Classically, Cyprus belongs to Asia; e.g. see Herodotus, Histories, I.72.
-# However, for various reasons many users expect to find it under Europe.
-Link	Asia/Nicosia	Europe/Nicosia
-
-# Georgia
-# From Paul Eggert (1994-11-19):
-# Today's _Economist_ (p 60) reports that Georgia moved its clocks forward
-# an hour recently, due to a law proposed by Zurab Murvanidze,
-# an MP who went on a hunger strike for 11 days to force discussion about it!
-# We have no details, but we'll guess they didn't move the clocks back in fall.
-#
-# From Mathew Englander, quoting AP (1996-10-23 13:05-04):
-# Instead of putting back clocks at the end of October, Georgia
-# will stay on daylight savings time this winter to save energy,
-# President Eduard Shevardnadze decreed Wednesday.
-#
-# From the BBC via Joseph S. Myers (2004-06-27):
-#
-# Georgia moved closer to Western Europe on Sunday...  The former Soviet
-# republic has changed its time zone back to that of Moscow.  As a result it
-# is now just four hours ahead of Greenwich Mean Time, rather than five hours
-# ahead.  The switch was decreed by the pro-Western president of Georgia,
-# Mikhail Saakashvili, who said the change was partly prompted by the process
-# of integration into Europe.
-
-# From Teimuraz Abashidze (2005-11-07):
-# Government of Georgia ... decided to NOT CHANGE daylight savings time on
-# [Oct.] 30, as it was done before during last more than 10 years.
-# Currently, we are in fact GMT +4:00, as before 30 October it was GMT
-# +3:00.... The problem is, there is NO FORMAL LAW or governmental document
-# about it.  As far as I can find, I was told, that there is no document,
-# because we just DIDN'T ISSUE document about switching to winter time....
-# I don't know what can be done, especially knowing that some years ago our
-# DST rules where changed THREE TIMES during one month.
-
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Tbilisi	2:59:16 -	LMT	1880
-			2:59:16	-	TBMT	1924 May  2 # Tbilisi Mean Time
-			3:00	-	TBIT	1957 Mar    # Tbilisi Time
-			4:00 RussiaAsia TBI%sT	1991 Mar 31 2:00s
-			3:00	1:00	TBIST	1991 Apr  9 # independence
-			3:00 RussiaAsia GE%sT	1992 # Georgia Time
-			3:00 E-EurAsia	GE%sT	1994 Sep lastSun
-			4:00 E-EurAsia	GE%sT	1996 Oct lastSun
-			4:00	1:00	GEST	1997 Mar lastSun
-			4:00 E-EurAsia	GE%sT	2004 Jun 27
-			3:00 RussiaAsia	GE%sT	2005 Mar lastSun 2:00
-			4:00	-	GET
-
-# East Timor
-
-# From Joao Carrascalao, brother of the former governor of East Timor, in
-# <a href="http://etan.org/et99c/december/26-31/30ETMAY.htm">
-# East Timor may be late for its millennium
-# </a> (1999-12-26/31):
-# Portugal tried to change the time forward in 1974 because the sun
-# rises too early but the suggestion raised a lot of problems with the
-# Timorese and I still don't think it would work today because it
-# conflicts with their way of life.
-
-# From Paul Eggert (2000-12-04):
-# We don't have any record of the above attempt.
-# Most likely our records are incomplete, but we have no better data.
-
-# <a href="http://www.hri.org/news/world/undh/last/00-08-16.undh.html">
-# From Manoel de Almeida e Silva, Deputy Spokesman for the UN Secretary-General
-# (2000-08-16)</a>:
-# The Cabinet of the East Timor Transition Administration decided
-# today to advance East Timor's time by one hour.  The time change,
-# which will be permanent, with no seasonal adjustment, will happen at
-# midnight on Saturday, September 16.
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Dili	8:22:20 -	LMT	1912
-			8:00	-	TLT	1942 Feb 21 23:00 # E Timor Time
-			9:00	-	JST	1945 Aug
-			9:00	-	TLT	1976 May  3
-			8:00	-	CIT	2000 Sep 17 00:00
-			9:00	-	TLT
-
-# India
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Calcutta	5:53:28 -	LMT	1880	# Kolkata
-			5:53:20	-	HMT	1941 Oct    # Howrah Mean Time?
-			6:30	-	BURT	1942 May 15 # Burma Time
-			5:30	-	IST	1942 Sep
-			5:30	1:00	IST	1945 Oct 15
-			5:30	-	IST
-# The following are like Asia/Calcutta:
-#	Andaman Is
-#	Lakshadweep (Laccadive, Minicoy and Amindivi Is)
-#	Nicobar Is
-
-# Indonesia
-#
-# From Gwillim Law (2001-05-28), overriding Shanks:
-# <http://www.sumatera-inc.com/go_to_invest/about_indonesia.asp#standtime>
-# says that Indonesia's time zones changed on 1988-01-01.  Looking at some
-# time zone maps, I think that must refer to Western Borneo (Kalimantan Barat
-# and Kalimantan Tengah) switching from UTC+8 to UTC+7.
-#
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Asia/Jakarta	7:07:12 -	LMT	1867 Aug 10
-# Shanks says the next transition was at 1924 Jan 1 0:13,
-# but this must be a typo.
-			7:07:12	-	JMT	1923 Dec 31 23:47:12 # Jakarta
-			7:20	-	JAVT	1932 Nov	 # Java Time
-			7:30	-	WIT	1942 Mar 23
-			9:00	-	JST	1945 Aug
-			7:30	-	WIT	1948 May
-			8:00	-	WIT	1950 May
-			7:30	-	WIT	1964
-			7:00	-	WIT
-Zone Asia/Pontianak	7:17:20	-	LMT	1908 May
-			7:17:20	-	PMT	1932 Nov    # Pontianak MT
-			7:30	-	WIT	1942 Jan 29
-			9:00	-	JST	1945 Aug
-			7:30	-	WIT	1948 May
-			8:00	-	WIT	1950 May
-			7:30	-	WIT	1964
-			8:00	-	CIT	1988 Jan  1
-			7:00	-	WIT
-Zone Asia/Makassar	7:57:36 -	LMT	1920
-			7:57:36	-	MMT	1932 Nov    # Macassar MT
-			8:00	-	CIT	1942 Feb  9
-			9:00	-	JST	1945 Aug
-			8:00	-	CIT
-Zone Asia/Jayapura	9:22:48 -	LMT	1932 Nov
-			9:00	-	EIT	1944
-			9:30	-	CST	1964
-			9:00	-	EIT
-
-# Iran
-
-# From Roozbeh Pournader (2003-03-15):
-# This is an English translation of what I just found (originally in Persian).
-# The Gregorian dates in brackets are mine:
-#
-#	Official Newspaper No. 13548-1370/6/25 [1991-09-16]
-#	No. 16760/T233 H				1370/6/10 [1991-09-01]
-#
-#	The Rule About Change of the Official Time of the Country
-#
-#	The Board of Ministers, in the meeting dated 1370/5/23 [1991-08-14],
-#	based on the suggestion number 2221/D dated 1370/4/22 [1991-07-13]
-#	of the Country's Organization for Official and Employment Affairs,
-#	and referring to the law for equating the working hours of workers
-#	and officers in the whole country dated 1359/4/23 [1980-07-14], and
-#	for synchronizing the official times of the country, agreed that:
-#
-#	The official time of the country will should move forward one hour
-#	at the 24[:00] hours of the first day of Farvardin and should return
-#	to its previous state at the 24[:00] hours of the 30th day of
-#	Shahrivar.
-#
-#	First Deputy to the President - Hassan Habibi
-#
-# From personal experience, that agrees with what has been followed
-# for at least the last 5 years.  Before that, for a few years, the
-# date used was the first Thursday night of Farvardin and the last
-# Thursday night of Shahrivar, but I can't give exact dates....
-# I have also changed the abbreviations to what is considered correct
-# here in Iran, IRST for regular time and IRDT for daylight saving time.
-#
-# From Roozbeh Pournader (2005-04-05):
-# The text of the Iranian law, in effect since 1925, clearly mentions
-# that the true solar year is the measure, and there is no arithmetic
-# leap year calculation involved.  There has never been any serious
-# plan to change that law....
-#
-# From Paul Eggert (2005-04-05):
-# Go with Shanks before September 1991, and with Pournader thereafter.
-# I used Ed Reingold's cal-persia in GNU Emacs 21.2 to check Persian dates,
-# stopping after 2037 when 32-bit time_t's overflow.
-# That cal-persia used Birashk's approximation, which disagrees with the solar
-# calendar predictions for the year 2025, so I corrected those dates by hand.
-#
-# From Oscar van Vlijmen (2005-03-30), writing about future
-# discrepancies between cal-persia and the Iranian calendar:
-# For 2091 solar-longitude-after yields 2091-03-20 08:40:07.7 UT for
-# the vernal equinox and that gets so close to 12:00 some local
-# Iranian time that the definition of the correct location needs to be
-# known exactly, amongst other factors.  2157 is even closer:
-# 2157-03-20 08:37:15.5 UT.  But the Gregorian year 2025 should give
-# no interpretation problem whatsoever.  By the way, another instant
-# in the near future where there will be a discrepancy between
-# arithmetical and astronomical Iranian calendars will be in 2058:
-# vernal equinox on 2058-03-20 09:03:05.9 UT.  The Java version of
-# Reingold's/Dershowitz' calculator gives correctly the Gregorian date
-# 2058-03-21 for 1 Farvardin 1437 (astronomical).
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Iran	1978	1980	-	Mar	21	0:00	1:00	D
-Rule	Iran	1978	only	-	Oct	21	0:00	0	S
-Rule	Iran	1979	only	-	Sep	19	0:00	0	S
-Rule	Iran	1980	only	-	Sep	23	0:00	0	S
-Rule	Iran	1991	only	-	May	 3	0:00	1:00	D
-Rule	Iran	1992	1995	-	Mar	22	0:00	1:00	D
-Rule	Iran	1991	1995	-	Sep	22	0:00	0	S
-Rule	Iran	1996	only	-	Mar	21	0:00	1:00	D
-Rule	Iran	1996	only	-	Sep	21	0:00	0	S
-Rule	Iran	1997	1999	-	Mar	22	0:00	1:00	D
-Rule	Iran	1997	1999	-	Sep	22	0:00	0	S
-Rule	Iran	2000	only	-	Mar	21	0:00	1:00	D
-Rule	Iran	2000	only	-	Sep	21	0:00	0	S
-Rule	Iran	2001	2003	-	Mar	22	0:00	1:00	D
-Rule	Iran	2001	2003	-	Sep	22	0:00	0	S
-Rule	Iran	2004	only	-	Mar	21	0:00	1:00	D
-Rule	Iran	2004	only	-	Sep	21	0:00	0	S
-Rule	Iran	2005	2007	-	Mar	22	0:00	1:00	D
-Rule	Iran	2005	2007	-	Sep	22	0:00	0	S
-Rule	Iran	2008	only	-	Mar	21	0:00	1:00	D
-Rule	Iran	2008	only	-	Sep	21	0:00	0	S
-Rule	Iran	2009	2011	-	Mar	22	0:00	1:00	D
-Rule	Iran	2009	2011	-	Sep	22	0:00	0	S
-Rule	Iran	2012	only	-	Mar	21	0:00	1:00	D
-Rule	Iran	2012	only	-	Sep	21	0:00	0	S
-Rule	Iran	2013	2015	-	Mar	22	0:00	1:00	D
-Rule	Iran	2013	2015	-	Sep	22	0:00	0	S
-Rule	Iran	2016	only	-	Mar	21	0:00	1:00	D
-Rule	Iran	2016	only	-	Sep	21	0:00	0	S
-Rule	Iran	2017	2019	-	Mar	22	0:00	1:00	D
-Rule	Iran	2017	2019	-	Sep	22	0:00	0	S
-Rule	Iran	2020	only	-	Mar	21	0:00	1:00	D
-Rule	Iran	2020	only	-	Sep	21	0:00	0	S
-Rule	Iran	2021	2023	-	Mar	22	0:00	1:00	D
-Rule	Iran	2021	2023	-	Sep	22	0:00	0	S
-Rule	Iran	2024	only	-	Mar	21	0:00	1:00	D
-Rule	Iran	2024	only	-	Sep	21	0:00	0	S
-Rule	Iran	2025	2027	-	Mar	22	0:00	1:00	D
-Rule	Iran	2025	2027	-	Sep	22	0:00	0	S
-Rule	Iran	2028	2029	-	Mar	21	0:00	1:00	D
-Rule	Iran	2028	2029	-	Sep	21	0:00	0	S
-Rule	Iran	2030	2031	-	Mar	22	0:00	1:00	D
-Rule	Iran	2030	2031	-	Sep	22	0:00	0	S
-Rule	Iran	2032	2033	-	Mar	21	0:00	1:00	D
-Rule	Iran	2032	2033	-	Sep	21	0:00	0	S
-Rule	Iran	2034	2035	-	Mar	22	0:00	1:00	D
-Rule	Iran	2034	2035	-	Sep	22	0:00	0	S
-Rule	Iran	2036	2037	-	Mar	21	0:00	1:00	D
-Rule	Iran	2036	2037	-	Sep	21	0:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Tehran	3:25:44	-	LMT	1916
-			3:25:44	-	TMT	1946	# Tehran Mean Time
-			3:30	-	IRST	1977 Nov
-			4:00	Iran	IR%sT	1979
-			3:30	Iran	IR%sT
-
-
-# Iraq
-#
-# From Jonathan Lennox (2000-06-12):
-# An article in this week's Economist ("Inside the Saddam-free zone", p. 50 in
-# the U.S. edition) on the Iraqi Kurds contains a paragraph:
-# "The three northern provinces ... switched their clocks this spring and
-# are an hour ahead of Baghdad."
-#
-# But Rives McDow (2000-06-18) quotes a contact in Iraqi-Kurdistan as follows:
-# In the past, some Kurdish nationalists, as a protest to the Iraqi
-# Government, did not adhere to daylight saving time.  They referred
-# to daylight saving as Saddam time.  But, as of today, the time zone
-# in Iraqi-Kurdistan is on standard time with Baghdad, Iraq.
-#
-# So we'll ignore the Economist's claim.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Iraq	1982	only	-	May	1	0:00	1:00	D
-Rule	Iraq	1982	1984	-	Oct	1	0:00	0	S
-Rule	Iraq	1983	only	-	Mar	31	0:00	1:00	D
-Rule	Iraq	1984	1985	-	Apr	1	0:00	1:00	D
-Rule	Iraq	1985	1990	-	Sep	lastSun	1:00s	0	S
-Rule	Iraq	1986	1990	-	Mar	lastSun	1:00s	1:00	D
-# IATA SSIM (1991/1996) says Apr 1 12:01am UTC; guess the `:01' is a typo.
-# Shanks says Iraq did not observe DST 1992/1997 or 1999 on; ignore this.
-Rule	Iraq	1991	max	-	Apr	 1	3:00s	1:00	D
-Rule	Iraq	1991	max	-	Oct	 1	3:00s	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Baghdad	2:57:40	-	LMT	1890
-			2:57:36	-	BMT	1918	    # Baghdad Mean Time?
-			3:00	-	AST	1982 May
-			3:00	Iraq	A%sT
-
-
-###############################################################################
-
-# Israel
-
-# From Ephraim Silverberg (2001-01-11):
-#
-# I coined "IST/IDT" circa 1988.  Until then there were three
-# different abbreviations in use:
-#
-# JST  Jerusalem Standard Time [Danny Braniss, Hebrew University]
-# IZT  Israel Zonal (sic) Time [Prof. Haim Papo, Technion]
-# EEST Eastern Europe Standard Time [used by almost everyone else]
-#
-# Since timezones should be called by country and not capital cities,
-# I ruled out JST.  As Israel is in Asia Minor and not Eastern Europe,
-# EEST was equally unacceptable.  Since "zonal" was not compatible with
-# any other timezone abbreviation, I felt that 'IST' was the way to go
-# and, indeed, it has received almost universal acceptance in timezone
-# settings in Israeli computers.
-#
-# In any case, I am happy to share timezone abbreviations with India,
-# high on my favorite-country list (and not only because my wife's
-# family is from India).
-
-# From Shanks:
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Zion	1940	only	-	Jun	 1	0:00	1:00	D
-Rule	Zion	1942	1944	-	Nov	 1	0:00	0	S
-Rule	Zion	1943	only	-	Apr	 1	2:00	1:00	D
-Rule	Zion	1944	only	-	Apr	 1	0:00	1:00	D
-Rule	Zion	1945	only	-	Apr	16	0:00	1:00	D
-Rule	Zion	1945	only	-	Nov	 1	2:00	0	S
-Rule	Zion	1946	only	-	Apr	16	2:00	1:00	D
-Rule	Zion	1946	only	-	Nov	 1	0:00	0	S
-Rule	Zion	1948	only	-	May	23	0:00	2:00	DD
-Rule	Zion	1948	only	-	Sep	 1	0:00	1:00	D
-Rule	Zion	1948	1949	-	Nov	 1	2:00	0	S
-Rule	Zion	1949	only	-	May	 1	0:00	1:00	D
-Rule	Zion	1950	only	-	Apr	16	0:00	1:00	D
-Rule	Zion	1950	only	-	Sep	15	3:00	0	S
-Rule	Zion	1951	only	-	Apr	 1	0:00	1:00	D
-Rule	Zion	1951	only	-	Nov	11	3:00	0	S
-Rule	Zion	1952	only	-	Apr	20	2:00	1:00	D
-Rule	Zion	1952	only	-	Oct	19	3:00	0	S
-Rule	Zion	1953	only	-	Apr	12	2:00	1:00	D
-Rule	Zion	1953	only	-	Sep	13	3:00	0	S
-Rule	Zion	1954	only	-	Jun	13	0:00	1:00	D
-Rule	Zion	1954	only	-	Sep	12	0:00	0	S
-Rule	Zion	1955	only	-	Jun	11	2:00	1:00	D
-Rule	Zion	1955	only	-	Sep	11	0:00	0	S
-Rule	Zion	1956	only	-	Jun	 3	0:00	1:00	D
-Rule	Zion	1956	only	-	Sep	30	3:00	0	S
-Rule	Zion	1957	only	-	Apr	29	2:00	1:00	D
-Rule	Zion	1957	only	-	Sep	22	0:00	0	S
-Rule	Zion	1974	only	-	Jul	 7	0:00	1:00	D
-Rule	Zion	1974	only	-	Oct	13	0:00	0	S
-Rule	Zion	1975	only	-	Apr	20	0:00	1:00	D
-Rule	Zion	1975	only	-	Aug	31	0:00	0	S
-Rule	Zion	1985	only	-	Apr	14	0:00	1:00	D
-Rule	Zion	1985	only	-	Sep	15	0:00	0	S
-Rule	Zion	1986	only	-	May	18	0:00	1:00	D
-Rule	Zion	1986	only	-	Sep	 7	0:00	0	S
-Rule	Zion	1987	only	-	Apr	15	0:00	1:00	D
-Rule	Zion	1987	only	-	Sep	13	0:00	0	S
-Rule	Zion	1988	only	-	Apr	 9	0:00	1:00	D
-Rule	Zion	1988	only	-	Sep	 3	0:00	0	S
-
-# From Ephraim Silverberg
-# (1997-03-04, 1998-03-16, 1998-12-28, 2000-01-17, 2000-07-25, 2004-12-22,
-# and 2005-02-17):
-
-# According to the Office of the Secretary General of the Ministry of
-# Interior, there is NO set rule for Daylight-Savings/Standard time changes.
-# One thing is entrenched in law, however: that there must be at least 150
-# days of daylight savings time annually.  From 1993-1998, the change to
-# daylight savings time was on a Friday morning from midnight IST to
-# 1 a.m IDT; up until 1998, the change back to standard time was on a
-# Saturday night from midnight daylight savings time to 11 p.m. standard
-# time.  1996 is an exception to this rule where the change back to standard
-# time took place on Sunday night instead of Saturday night to avoid
-# conflicts with the Jewish New Year.  In 1999, the change to
-# daylight savings time was still on a Friday morning but from
-# 2 a.m. IST to 3 a.m. IDT; furthermore, the change back to standard time
-# was also on a Friday morning from 2 a.m. IDT to 1 a.m. IST for
-# 1999 only.  In the year 2000, the change to daylight savings time was
-# similar to 1999, but although the change back will be on a Friday, it
-# will take place from 1 a.m. IDT to midnight IST.  Starting in 2001, all
-# changes to/from will take place at 1 a.m. old time, but now there is no
-# rule as to what day of the week it will take place in as the start date
-# (except in 2003) is the night after the Passover Seder (i.e. the eve
-# of the 16th of Nisan in the lunar Hebrew calendar) and the end date
-# (except in 2002) is three nights before Yom Kippur [Day of Atonement]
-# (the eve of the 7th of Tishrei in the lunar Hebrew calendar).
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Zion	1989	only	-	Apr	30	0:00	1:00	D
-Rule	Zion	1989	only	-	Sep	 3	0:00	0	S
-Rule	Zion	1990	only	-	Mar	25	0:00	1:00	D
-Rule	Zion	1990	only	-	Aug	26	0:00	0	S
-Rule	Zion	1991	only	-	Mar	24	0:00	1:00	D
-Rule	Zion	1991	only	-	Sep	 1	0:00	0	S
-Rule	Zion	1992	only	-	Mar	29	0:00	1:00	D
-Rule	Zion	1992	only	-	Sep	 6	0:00	0	S
-Rule	Zion	1993	only	-	Apr	 2	0:00	1:00	D
-Rule	Zion	1993	only	-	Sep	 5	0:00	0	S
-
-# The dates for 1994-1995 were obtained from Office of the Spokeswoman for the
-# Ministry of Interior, Jerusalem, Israel.  The spokeswoman can be reached by
-# calling the office directly at 972-2-6701447 or 972-2-6701448.
-
-# Rule	NAME    FROM    TO      TYPE    IN      ON      AT      SAVE    LETTER/S
-Rule	Zion	1994	only	-	Apr	 1	0:00	1:00	D
-Rule	Zion	1994	only	-	Aug	28	0:00	0	S
-Rule	Zion	1995	only	-	Mar	31	0:00	1:00	D
-Rule	Zion	1995	only	-	Sep	 3	0:00	0	S
-
-# The dates for 1996 were determined by the Minister of Interior of the
-# time, Haim Ramon.  The official announcement regarding 1996-1998
-# (with the dates for 1997-1998 no longer being relevant) can be viewed at:
-#
-#   ftp://ftp.cs.huji.ac.il/pub/tz/announcements/1996-1998.ramon.ps.gz
-#
-# The dates for 1997-1998 were altered by his successor, Rabbi Eli Suissa.
-#
-# The official announcements for the years 1997-1999 can be viewed at:
-#
-#   ftp://ftp.cs.huji.ac.il/pub/tz/announcements/YYYY.ps.gz
-#
-#       where YYYY is the relevant year.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Zion	1996	only	-	Mar	15	0:00	1:00	D
-Rule	Zion	1996	only	-	Sep	16	0:00	0	S
-Rule	Zion	1997	only	-	Mar	21	0:00	1:00	D
-Rule	Zion	1997	only	-	Sep	14	0:00	0	S
-Rule	Zion	1998	only	-	Mar	20	0:00	1:00	D
-Rule	Zion	1998	only	-	Sep	 6	0:00	0	S
-Rule	Zion	1999	only	-	Apr	 2	2:00	1:00	D
-Rule	Zion	1999	only	-	Sep	 3	2:00	0	S
-
-# The Knesset Interior Committee has changed the dates for 2000 for
-# the third time in just over a year and have set new dates for the
-# years 2001-2004 as well.
-#
-# The official announcement for the start date of 2000 can be viewed at:
-#
-#	ftp://ftp.cs.huji.ac.il/pub/tz/announcements/2000-start.ps.gz
-#
-# The official announcement for the end date of 2000 and the dates
-# for the years 2001-2004 can be viewed at:
-#
-#	ftp://ftp.cs.huji.ac.il/pub/tz/announcements/2000-2004.ps.gz
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Zion	2000	only	-	Apr	14	2:00	1:00	D
-Rule	Zion	2000	only	-	Oct	 6	1:00	0	S
-Rule	Zion	2001	only	-	Apr	 9	1:00	1:00	D
-Rule	Zion	2001	only	-	Sep	24	1:00	0	S
-Rule	Zion	2002	only	-	Mar	29	1:00	1:00	D
-Rule	Zion	2002	only	-	Oct	 7	1:00	0	S
-Rule	Zion	2003	only	-	Mar	28	1:00	1:00	D
-Rule	Zion	2003	only	-	Oct	 3	1:00	0	S
-Rule	Zion	2004	only	-	Apr	 7	1:00	1:00	D
-Rule	Zion	2004	only	-	Sep	22	1:00	0	S
-
-# The proposed law agreed upon by the Knesset Interior Committee on
-# 2005-02-14 is that, for 2005 and beyond, DST starts at 02:00 the
-# last Friday before April 2nd (i.e. the last Friday in March or April
-# 1st itself if it falls on a Friday) and ends at 02:00 on the Saturday
-# night _before_ the fast of Yom Kippur.
-#
-# Those who can read Hebrew can view the announcement at:
-#
-#	ftp://ftp.cs.huji.ac.il/pub/tz/announcements/2005+beyond.ps
-
-# From Paul Eggert (2005-02-22):
-# I used Ephraim Silverberg's dst-israel.el program
-# <ftp://ftp.cs.huji.ac.il/pub/tz/software/dst-israel.el> (2005-02-20)
-# along with Ed Reingold's cal-hebrew in GNU Emacs 21.4,
-# to generate the transitions in this list.
-# (I replaced "lastFri" with "Fri>=26" by hand.)
-# The spring transitions below all correspond to the following Rule:
-#
-# Rule	Zion	2005	max	-	Mar	Fri>=26	2:00	1:00	D
-#
-# but older zic implementations (e.g., Solaris 8) do not support
-# "Fri>=26" to mean April 1 in years like 2005, so for now we list the
-# springtime transitions explicitly.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Zion	2005	only	-	Apr	 1	2:00	1:00	D
-Rule	Zion	2005	only	-	Oct	 9	2:00	0	S
-Rule	Zion	2006	2010	-	Mar	Fri>=26	2:00	1:00	D
-Rule	Zion	2006	only	-	Oct	 1	2:00	0	S
-Rule	Zion	2007	only	-	Sep	16	2:00	0	S
-Rule	Zion	2008	only	-	Oct	 5	2:00	0	S
-Rule	Zion	2009	only	-	Sep	27	2:00	0	S
-Rule	Zion	2010	only	-	Sep	12	2:00	0	S
-Rule	Zion	2011	only	-	Apr	 1	2:00	1:00	D
-Rule	Zion	2011	only	-	Oct	 2	2:00	0	S
-Rule	Zion	2012	2015	-	Mar	Fri>=26	2:00	1:00	D
-Rule	Zion	2012	only	-	Sep	23	2:00	0	S
-Rule	Zion	2013	only	-	Sep	 8	2:00	0	S
-Rule	Zion	2014	only	-	Sep	28	2:00	0	S
-Rule	Zion	2015	only	-	Sep	20	2:00	0	S
-Rule	Zion	2016	only	-	Apr	 1	2:00	1:00	D
-Rule	Zion	2016	only	-	Oct	 9	2:00	0	S
-Rule	Zion	2017	2021	-	Mar	Fri>=26	2:00	1:00	D
-Rule	Zion	2017	only	-	Sep	24	2:00	0	S
-Rule	Zion	2018	only	-	Sep	16	2:00	0	S
-Rule	Zion	2019	only	-	Oct	 6	2:00	0	S
-Rule	Zion	2020	only	-	Sep	27	2:00	0	S
-Rule	Zion	2021	only	-	Sep	12	2:00	0	S
-Rule	Zion	2022	only	-	Apr	 1	2:00	1:00	D
-Rule	Zion	2022	only	-	Oct	 2	2:00	0	S
-Rule	Zion	2023	2032	-	Mar	Fri>=26	2:00	1:00	D
-Rule	Zion	2023	only	-	Sep	24	2:00	0	S
-Rule	Zion	2024	only	-	Oct	 6	2:00	0	S
-Rule	Zion	2025	only	-	Sep	28	2:00	0	S
-Rule	Zion	2026	only	-	Sep	20	2:00	0	S
-Rule	Zion	2027	only	-	Oct	10	2:00	0	S
-Rule	Zion	2028	only	-	Sep	24	2:00	0	S
-Rule	Zion	2029	only	-	Sep	16	2:00	0	S
-Rule	Zion	2030	only	-	Oct	 6	2:00	0	S
-Rule	Zion	2031	only	-	Sep	21	2:00	0	S
-Rule	Zion	2032	only	-	Sep	12	2:00	0	S
-Rule	Zion	2033	only	-	Apr	 1	2:00	1:00	D
-Rule	Zion	2033	only	-	Oct	 2	2:00	0	S
-Rule	Zion	2034	2037	-	Mar	Fri>=26	2:00	1:00	D
-Rule	Zion	2034	only	-	Sep	17	2:00	0	S
-Rule	Zion	2035	only	-	Oct	 7	2:00	0	S
-Rule	Zion	2036	only	-	Sep	28	2:00	0	S
-Rule	Zion	2037	only	-	Sep	13	2:00	0	S
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Jerusalem	2:20:56 -	LMT	1880
-			2:20:40	-	JMT	1918	# Jerusalem Mean Time?
-			2:00	Zion	I%sT
-
-
-
-###############################################################################
-
-# Japan
-
-# `9:00' and `JST' is from Guy Harris.
-
-# From Paul Eggert (1995-03-06):
-# Today's _Asahi Evening News_ (page 4) reports that Japan had
-# daylight saving between 1948 and 1951, but ``the system was discontinued
-# because the public believed it would lead to longer working hours.''
-
-# From Mayumi Negishi in the 2005-08-10 Japan Times
-# <http://www.japantimes.co.jp/cgi-bin/getarticle.pl5?nn20050810f2.htm>:
-# Occupation authorities imposed daylight-saving time on Japan on
-# [1948-05-01]....  But lack of prior debate and the execution of
-# daylight-saving time just three days after the bill was passed generated
-# deep hatred of the concept....  The Diet unceremoniously passed a bill to
-# dump the unpopular system in October 1951, less than a month after the San
-# Francisco Peace Treaty was signed.  (A government poll in 1951 showed 53%
-# of the Japanese wanted to scrap daylight-saving time, as opposed to 30% who
-# wanted to keep it.)
-
-# Shanks writes that daylight saving in Japan during those years was as follows:
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Japan	1948	only	-	May	Sun>=1	2:00	1:00	D
-Rule	Japan	1948	1951	-	Sep	Sat>=8	2:00	0	S
-Rule	Japan	1949	only	-	Apr	Sun>=1	2:00	1:00	D
-Rule	Japan	1950	1951	-	May	Sun>=1	2:00	1:00	D
-# but the only locations using it (for birth certificates, presumably, since
-# Shanks's audience is astrologers) were US military bases.  For now, assume
-# that for most purposes daylight-saving time was observed; otherwise, what
-# would have been the point of the 1951 poll?
-
-# From Hideyuki Suzuki (1998-11-09):
-# 'Tokyo' usually stands for the former location of Tokyo Astronomical
-# Observatory: E 139 44' 40".90 (9h 18m 58s.727), N 35 39' 16".0.
-# This data is from 'Rika Nenpyou (Chronological Scientific Tables) 1996'
-# edited by National Astronomical Observatory of Japan....
-# JST (Japan Standard Time) has been used since 1888-01-01 00:00 (JST).
-# The law is enacted on 1886-07-07.
-
-# From Hideyuki Suzuki (1998-11-16):
-# The ordinance No. 51 (1886) established "standard time" in Japan,
-# which stands for the time on E 135 degree.
-# In the ordinance No. 167 (1895), "standard time" was renamed to "central
-# standard time".  And the same ordinance also established "western standard
-# time", which stands for the time on E 120 degree....  But "western standard
-# time" was abolished in the ordinance No. 529 (1937).  In the ordinance No.
-# 167, there is no mention regarding for what place western standard time is
-# standard....
-#
-# I wrote "ordinance" above, but I don't know how to translate.
-# In Japanese it's "chokurei", which means ordinance from emperor.
-
-# Shanks claims JST in use since 1896, and that a few places (e.g. Ishigaki)
-# use +0800; go with Suzuki.  Guess that all ordinances took effect on Jan 1.
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Tokyo	9:18:59	-	LMT	1887 Dec 31 15:00u
-			9:00	-	JST	1896
-			9:00	-	CJT	1938
-			9:00	Japan	J%sT
-# Since 1938, all Japanese possessions have been like Asia/Tokyo.
-
-# Jordan
-#
-# From <a href="http://star.arabia.com/990701/JO9.html">
-# Jordan Week (1999-07-01) </a> via Steffen Thorsen (1999-09-09):
-# Clocks in Jordan were forwarded one hour on Wednesday at midnight,
-# in accordance with the government's decision to implement summer time
-# all year round.
-#
-# From <a href="http://star.arabia.com/990930/JO9.html">
-# Jordan Week (1999-09-30) </a> via Steffen Thorsen (1999-11-09):
-# Winter time starts today Thursday, 30 September. Clocks will be turned back
-# by one hour.  This is the latest government decision and it's final!
-# The decision was taken because of the increase in working hours in
-# government's departments from six to seven hours.
-#
-# From Paul Eggert (2005-11-22):
-# Starting 2003 transitions are from Steffen Thorsen's web site timeanddate.com.
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Jordan	1973	only	-	Jun	6	0:00	1:00	S
-Rule	Jordan	1973	1975	-	Oct	1	0:00	0	-
-Rule	Jordan	1974	1977	-	May	1	0:00	1:00	S
-Rule	Jordan	1976	only	-	Nov	1	0:00	0	-
-Rule	Jordan	1977	only	-	Oct	1	0:00	0	-
-Rule	Jordan	1978	only	-	Apr	30	0:00	1:00	S
-Rule	Jordan	1978	only	-	Sep	30	0:00	0	-
-Rule	Jordan	1985	only	-	Apr	1	0:00	1:00	S
-Rule	Jordan	1985	only	-	Oct	1	0:00	0	-
-Rule	Jordan	1986	1988	-	Apr	Fri>=1	0:00	1:00	S
-Rule	Jordan	1986	1990	-	Oct	Fri>=1	0:00	0	-
-Rule	Jordan	1989	only	-	May	8	0:00	1:00	S
-Rule	Jordan	1990	only	-	Apr	27	0:00	1:00	S
-Rule	Jordan	1991	only	-	Apr	17	0:00	1:00	S
-Rule	Jordan	1991	only	-	Sep	27	0:00	0	-
-Rule	Jordan	1992	only	-	Apr	10	0:00	1:00	S
-Rule	Jordan	1992	1993	-	Oct	Fri>=1	0:00	0	-
-Rule	Jordan	1993	1998	-	Apr	Fri>=1	0:00	1:00	S
-Rule	Jordan	1994	only	-	Sep	Fri>=15	0:00	0	-
-Rule	Jordan	1995	1998	-	Sep	Fri>=15	0:00s	0	-
-Rule	Jordan	1999	only	-	Jul	 1	0:00s	1:00	S
-Rule	Jordan	1999	2002	-	Sep	lastThu	0:00s	0	-
-Rule	Jordan	2000	max	-	Mar	lastThu	0:00s	1:00	S
-Rule	Jordan	2003	only	-	Oct	24	0:00s	0	-
-Rule	Jordan	2004	only	-	Oct	15	0:00s	0	-
-Rule	Jordan	2005	max	-	Sep	lastFri	0:00s	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Amman	2:23:44 -	LMT	1931
-			2:00	Jordan	EE%sT
-
-
-# Kazakhstan
-
-# From Paul Eggert (1996-11-22):
-# Andrew Evtichov (1996-04-13) writes that Kazakhstan
-# stayed in sync with Moscow after 1990, and that Aqtobe (formerly Aktyubinsk)
-# and Aqtau (formerly Shevchenko) are the largest cities in their zones.
-# Guess that Aqtau and Aqtobe diverged in 1995, since that's the first time
-# IATA SSIM mentions a third time zone in Kazakhstan.
-
-# From Paul Eggert (2001-10-18):
-# German Iofis, ELSI, Almaty (2001-10-09) reports that Kazakhstan uses
-# RussiaAsia rules, instead of switching at 00:00 as the IATA has it.
-# Go with Shanks, who has them always using RussiaAsia rules.
-# Also go with the following claims of Shanks:
-#
-# - Kazakhstan did not observe DST in 1991.
-# - Qyzylorda switched from +5:00 to +6:00 on 1992-01-19 02:00.
-# - Oral switched from +5:00 to +4:00 in spring 1989.
-
-# <a href="http://www.kazsociety.org.uk/news/2005/03/30.htm">
-# From Kazakhstan Embassy's News Bulletin #11 (2005-03-21):
-# </a>
-# The Government of Kazakhstan passed a resolution March 15 abolishing
-# daylight saving time citing lack of economic benefits and health
-# complications coupled with a decrease in productivity.
-#
-# From Branislav Kojic (in Astana) via Gwillim Law (2005-06-28):
-# ... what happened was that the former Kazakhstan Eastern time zone
-# was "blended" with the Central zone.  Therefore, Kazakhstan now has
-# two time zones, and difference between them is one hour.  The zone
-# closer to UTC is the former Western zone (probably still called the
-# same), encompassing four provinces in the west: Aqtobe, Atyrau,
-# Mangghystau, and West Kazakhstan.  The other zone encompasses
-# everything else....  I guess that would make Kazakhstan time zones
-# de jure UTC+5 and UTC+6 respectively.
-
-#
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-#
-# Almaty (formerly Alma-Ata), representing most locations in Kazakhstan
-Zone	Asia/Almaty	5:07:48 -	LMT	1924 May  2 # or Alma-Ata
-			5:00	-	ALMT	1930 Jun 21 # Alma-Ata Time
-			6:00 RussiaAsia ALM%sT	1991
-			6:00	-	ALMT	1992
-			6:00 RussiaAsia	ALM%sT	2005 Mar 15
-			6:00	-	ALMT
-# Qyzylorda (aka Kyzylorda, Kizilorda, Kzyl-Orda, etc.)
-Zone	Asia/Qyzylorda	4:21:52 -	LMT	1924 May  2
-			4:00	-	KIZT	1930 Jun 21 # Kizilorda Time
-			5:00	-	KIZT	1981 Apr  1
-			5:00	1:00	KIZST	1981 Oct  1
-			6:00	-	KIZT	1982 Apr  1
-			5:00 RussiaAsia	KIZ%sT	1991
-			5:00	-	KIZT	1991 Dec 16 # independence
-			5:00	-	QYZT	1992 Jan 19 2:00
-			6:00 RussiaAsia	QYZ%sT	2005 Mar 15
-			6:00	-	QYZT
-# Aqtobe (aka Aktobe, formerly Akt'ubinsk)
-Zone	Asia/Aqtobe	3:48:40	-	LMT	1924 May  2
-			4:00	-	AKTT	1930 Jun 21 # Aktyubinsk Time
-			5:00	-	AKTT	1981 Apr  1
-			5:00	1:00	AKTST	1981 Oct  1
-			6:00	-	AKTT	1982 Apr  1
-			5:00 RussiaAsia	AKT%sT	1991
-			5:00	-	AKTT	1991 Dec 16 # independence
-			5:00 RussiaAsia	AQT%sT	2005 Mar 15 # Aqtobe Time
-			5:00	-	AQTT
-# Mangghystau
-# Aqtau was not founded until 1963, but it represents an inhabited region,
-# so include time stamps before 1963.
-Zone	Asia/Aqtau	3:21:04	-	LMT	1924 May  2
-			4:00	-	FORT	1930 Jun 21 # Fort Shevchenko T
-			5:00	-	FORT	1963
-			5:00	-	SHET	1981 Oct  1 # Shevchenko Time
-			6:00	-	SHET	1982 Apr  1
-			5:00 RussiaAsia	SHE%sT	1991
-			5:00	-	SHET	1991 Dec 16 # independence
-			5:00 RussiaAsia	AQT%sT	1995 Mar lastSun 2:00 # Aqtau Time
-			4:00 RussiaAsia	AQT%sT	2005 Mar 15
-			5:00	-	AQTT
-# West Kazakhstan
-Zone	Asia/Oral	3:25:24	-	LMT	1924 May  2 # or Ural'sk
-			4:00	-	URAT	1930 Jun 21 # Ural'sk time
-			5:00	-	URAT	1981 Apr  1
-			5:00	1:00	URAST	1981 Oct  1
-			6:00	-	URAT	1982 Apr  1
-			5:00 RussiaAsia	URA%sT	1989 Mar 26 2:00
-			4:00 RussiaAsia	URA%sT	1991
-			4:00	-	URAT	1991 Dec 16 # independence
-			4:00 RussiaAsia	ORA%sT	2005 Mar 15 # Oral Time
-			5:00	-	ORAT
-
-# Kyrgyzstan (Kirgizstan)
-# Transitions through 1991 are from Shanks.
-
-# From Paul Eggert (2005-08-15):
-# According to an article dated today in the Kyrgyzstan Development Gateway
-# <http://eng.gateway.kg/cgi-bin/page.pl?id=1&story_name=doc9979.shtml>
-# Kyrgyzstan is canceling the daylight saving time system.  I take the article
-# to mean that they will leave their clocks at 6 hours ahead of UTC.
-# From Malik Abdugaliev (2005-09-21):
-# Our government cancels daylight saving time 6th of August 2005.
-# From 2005-08-12 our GMT-offset is +6, w/o any daylight saving.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Kyrgyz	1992	1996	-	Apr	Sun>=7	0:00s	1:00	S
-Rule	Kyrgyz	1992	1996	-	Sep	lastSun	0:00	0	-
-Rule	Kyrgyz	1997	2005	-	Mar	lastSun	2:30	1:00	S
-Rule	Kyrgyz	1997	2004	-	Oct	lastSun	2:30	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Bishkek	4:58:24 -	LMT	1924 May  2
-			5:00	-	FRUT	1930 Jun 21 # Frunze Time
-			6:00 RussiaAsia FRU%sT	1991 Mar 31 2:00s
-			5:00	1:00	FRUST	1991 Aug 31 2:00 # independence
-			5:00	Kyrgyz	KG%sT	2005 Aug 12    # Kyrgyzstan Time
-			6:00	-	KGT
-
-###############################################################################
-
-# Korea (North and South)
-
-# From Guy Harris:
-# According to someone at the Korean Times in San Francisco,
-# Daylight Savings Time was not observed until 1987.  He did not know
-# at what time of day DST starts or ends.
-
-# From Shanks:
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	ROK	1960	only	-	May	15	0:00	1:00	D
-Rule	ROK	1960	only	-	Sep	13	0:00	0	S
-Rule	ROK	1987	1988	-	May	Sun<=14	0:00	1:00	D
-Rule	ROK	1987	1988	-	Oct	Sun<=14	0:00	0	S
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Seoul	8:27:52	-	LMT	1890
-			8:30	-	KST	1904 Dec
-			9:00	-	KST	1928
-			8:30	-	KST	1932
-			9:00	-	KST	1954 Mar 21
-			8:00	ROK	K%sT	1961 Aug 10
-			8:30	-	KST	1968 Oct
-			9:00	ROK	K%sT
-Zone	Asia/Pyongyang	8:23:00 -	LMT	1890
-			8:30	-	KST	1904 Dec
-			9:00	-	KST	1928
-			8:30	-	KST	1932
-			9:00	-	KST	1954 Mar 21
-			8:00	-	KST	1961 Aug 10
-			9:00	-	KST
-
-###############################################################################
-
-# Kuwait
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Kuwait	3:11:56 -	LMT	1950
-			3:00	-	AST
-
-# Laos
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Vientiane	6:50:24 -	LMT	1906 Jun  9 # or Viangchan
-			7:06:20	-	SMT	1911 Mar 11 0:01 # Saigon MT?
-			7:00	-	ICT	1912 May
-			8:00	-	ICT	1931 May
-			7:00	-	ICT
-
-# Lebanon
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Lebanon	1920	only	-	Mar	28	0:00	1:00	S
-Rule	Lebanon	1920	only	-	Oct	25	0:00	0	-
-Rule	Lebanon	1921	only	-	Apr	3	0:00	1:00	S
-Rule	Lebanon	1921	only	-	Oct	3	0:00	0	-
-Rule	Lebanon	1922	only	-	Mar	26	0:00	1:00	S
-Rule	Lebanon	1922	only	-	Oct	8	0:00	0	-
-Rule	Lebanon	1923	only	-	Apr	22	0:00	1:00	S
-Rule	Lebanon	1923	only	-	Sep	16	0:00	0	-
-Rule	Lebanon	1957	1961	-	May	1	0:00	1:00	S
-Rule	Lebanon	1957	1961	-	Oct	1	0:00	0	-
-Rule	Lebanon	1972	only	-	Jun	22	0:00	1:00	S
-Rule	Lebanon	1972	1977	-	Oct	1	0:00	0	-
-Rule	Lebanon	1973	1977	-	May	1	0:00	1:00	S
-Rule	Lebanon	1978	only	-	Apr	30	0:00	1:00	S
-Rule	Lebanon	1978	only	-	Sep	30	0:00	0	-
-Rule	Lebanon	1984	1987	-	May	1	0:00	1:00	S
-Rule	Lebanon	1984	1991	-	Oct	16	0:00	0	-
-Rule	Lebanon	1988	only	-	Jun	1	0:00	1:00	S
-Rule	Lebanon	1989	only	-	May	10	0:00	1:00	S
-Rule	Lebanon	1990	1992	-	May	1	0:00	1:00	S
-Rule	Lebanon	1992	only	-	Oct	4	0:00	0	-
-Rule	Lebanon	1993	max	-	Mar	lastSun	0:00	1:00	S
-Rule	Lebanon	1993	1998	-	Sep	lastSun	0:00	0	-
-Rule	Lebanon	1999	max	-	Oct	lastSun	0:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Beirut	2:22:00 -	LMT	1880
-			2:00	Lebanon	EE%sT
-
-# Malaysia
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	NBorneo	1935	1941	-	Sep	14	0:00	0:20	TS # one-Third Summer
-Rule	NBorneo	1935	1941	-	Dec	14	0:00	0	-
-#
-# peninsular Malaysia
-# The data here are taken from Mok Ly Yng (2003-10-30)
-# <http://www.math.nus.edu.sg/aslaksen/teaching/timezone.html>.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Asia/Kuala_Lumpur	6:46:46 -	LMT	1901 Jan  1
-			6:55:25	-	SMT	1905 Jun  1 # Singapore M.T.
-			7:00	-	MALT	1933 Jan  1 # Malaya Time
-			7:00	0:20	MALST	1936 Jan  1
-			7:20	-	MALT	1941 Sep  1
-			7:30	-	MALT	1942 Feb 16
-			9:00	-	JST	1945 Sep 12
-			7:30	-	MALT	1982 Jan  1
-			8:00	-	MYT	# Malaysia Time
-# Sabah & Sarawak
-# From Paul Eggert (2003-11-01):
-# The data here are mostly from Shanks, but the 1942, 1945 and 1982
-# transition dates are from Mok Ly Yng.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Asia/Kuching	7:21:20	-	LMT	1926 Mar
-			7:30	-	BORT	1933	# Borneo Time
-			8:00	NBorneo	BOR%sT	1942 Feb 16
-			9:00	-	JST	1945 Sep 12
-			8:00	-	BORT	1982 Jan  1
-			8:00	-	MYT
-
-# Maldives
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Indian/Maldives	4:54:00 -	LMT	1880	# Male
-			4:54:00	-	MMT	1960	# Male Mean Time
-			5:00	-	MVT		# Maldives Time
-
-# Mongolia
-
-# Shanks says that Mongolia has three time zones, but usno1995 and the CIA map
-# Standard Time Zones of the World (1997-01)
-# both say that it has just one.
-
-# From Oscar van Vlijmen (1999-12-11):
-# <a href="http://www.mongoliatourism.gov.mn/general.htm">
-# General Information Mongolia
-# </a> (1999-09)
-# "Time: Mongolia has two time zones. Three westernmost provinces of
-# Bayan-Ulgii, Uvs, and Hovd are one hour earlier than the capital city, and
-# the rest of the country follows the Ulaanbaatar time, which is UTC/GMT plus
-# eight hours."
-
-# From Rives McDow (1999-12-13):
-# Mongolia discontinued the use of daylight savings time in 1999; 1998
-# being the last year it was implemented.  The dates of implementation I am
-# unsure of, but most probably it was similar to Russia, except for the time
-# of implementation may have been different....
-# Some maps in the past have indicated that there was an additional time
-# zone in the eastern part of Mongolia, including the provinces of Dornod,
-# Suhbaatar, and possibly Khentij.
-
-# From Paul Eggert (1999-12-15):
-# Naming and spelling is tricky in Mongolia.
-# We'll use Hovd (also spelled Chovd and Khovd) to represent the west zone;
-# the capital of the Hovd province is sometimes called Hovd, sometimes Dund-Us,
-# and sometimes Jirgalanta (with variant spellings), but the name Hovd
-# is good enough for our purposes.
-
-# From Rives McDow (2001-05-13):
-# In addition to Mongolia starting daylight savings as reported earlier
-# (adopted DST on 2001-04-27 02:00 local time, ending 2001-09-28),
-# there are three time zones.
-#
-# Provinces [at 7:00]: Bayan-ulgii, Uvs, Khovd, Zavkhan, Govi-Altai
-# Provinces [at 8:00]: Khovsgol, Bulgan, Arkhangai, Khentii, Tov,
-#	Bayankhongor, Ovorkhangai, Dundgovi, Dornogovi, Omnogovi
-# Provinces [at 9:00]: Dornod, Sukhbaatar
-#
-# [The province of Selenge is omitted from the above lists.]
-
-# From Ganbold Ts., Ulaanbaatar (2004-04-17):
-# Daylight saving occurs at 02:00 local time last Saturday of March.
-# It will change back to normal at 02:00 local time last Saturday of
-# September.... As I remember this rule was changed in 2001.
-#
-# From Paul Eggert (2004-04-17):
-# For now, assume Rives McDow's informant got confused about Friday vs
-# Saturday, and that his 2001 dates should have 1 added to them.
-
-# From Paul Eggert (2005-07-26):
-# We have wildly conflicting information about Mongolia's time zones.
-# Bill Bonnet (2005-05-19) reports that the US Embassy in Ulaanbaatar says
-# there is only one time zone and that DST is observed, citing Microsoft
-# Windows XP as the source.  Risto Nykanen (2005-05-16) reports that
-# travelmongolia.org says there are two time zones (UTC+7, UTC+8) with no DST.
-# Oscar van Vlijmen (2005-05-20) reports that the Mongolian Embassy in
-# Washington, DC says there are two time zones, with DST observed.
-# He also found
-# <http://ubpost.mongolnews.mn/index.php?subaction=showcomments&id=1111634894&archive=&start_from=&ucat=1&>
-# which also says that there is DST, and which has a comment by "Toddius"
-# (2005-03-31 06:05 +0700) saying "Mongolia actually has 3.5 time zones.
-# The West (OLGII) is +7 GMT, most of the country is ULAT is +8 GMT
-# and some Eastern provinces are +9 GMT but Sukhbaatar Aimag is SUHK +8.5 GMT.
-# The SUKH timezone is new this year, it is one of the few things the
-# parliament passed during the tumultuous winter session."
-# For now, let's ignore this information, until we have more confirmation.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Mongol	1983	1984	-	Apr	1	0:00	1:00	S
-Rule	Mongol	1983	only	-	Oct	1	0:00	0	-
-# IATA SSIM says 1990s switches occurred at 00:00, but Shanks (1995) lists
-# them at 02:00s, and McDow says the 2001 switches also occurred at 02:00.
-# Also, IATA SSIM (1996-09) says 1996-10-25.  Go with Shanks through 1998.
-Rule	Mongol	1985	1998	-	Mar	lastSun	2:00s	1:00	S
-Rule	Mongol	1984	1998	-	Sep	lastSun	2:00s	0	-
-# IATA SSIM (1999-09) says Mongolia no longer observes DST.
-Rule	Mongol	2001	only	-	Apr	lastSat	2:00	1:00	S
-Rule	Mongol	2001	max	-	Sep	lastSat	2:00	0	-
-Rule	Mongol	2002	max	-	Mar	lastSat	2:00	1:00	S
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-# Hovd, a.k.a. Chovd, Dund-Us, Dzhargalant, Khovd, Jirgalanta
-Zone	Asia/Hovd	6:06:36 -	LMT	1905 Aug
-			6:00	-	HOVT	1978	# Hovd Time
-			7:00	Mongol	HOV%sT
-# Ulaanbaatar, a.k.a. Ulan Bataar, Ulan Bator, Urga
-Zone	Asia/Ulaanbaatar 7:07:32 -	LMT	1905 Aug
-			7:00	-	ULAT	1978	# Ulaanbaatar Time
-			8:00	Mongol	ULA%sT
-# Choibalsan, a.k.a. Bajan Tuemen, Bajan Tumen, Chojbalsan,
-# Choybalsan, Sanbejse, Tchoibalsan
-Zone	Asia/Choibalsan	7:38:00 -	LMT	1905 Aug
-			7:00	-	ULAT	1978
-			8:00	-	ULAT	1983 Apr
-			9:00	Mongol	CHO%sT	# Choibalsan Time
-
-# Nepal
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Katmandu	5:41:16 -	LMT	1920
-			5:30	-	IST	1986
-			5:45	-	NPT	# Nepal Time
-
-# Oman
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Muscat	3:54:20 -	LMT	1920
-			4:00	-	GST
-
-# Pakistan
-
-# From Rives McDow (2002-03-13):
-# I have been advised that Pakistan has decided to adopt dst on a
-# TRIAL basis for one year, starting 00:01 local time on April 7, 2002
-# and ending at 00:01 local time October 6, 2002.  This is what I was
-# told, but I believe that the actual time of change may be 00:00; the
-# 00:01 was to make it clear which day it was on.
-
-# From Paul Eggert (2002-03-15):
-# Jesper Norgaard found this URL:
-# http://www.pak.gov.pk/public/news/app/app06_dec.htm
-# (dated 2001-12-06) which says that the Cabinet adopted a scheme "to
-# advance the clocks by one hour on the night between the first
-# Saturday and Sunday of April and revert to the original position on
-# 15th October each year".  This agrees with McDow's 04-07 at 00:00,
-# but disagrees about the October transition, and makes it sound like
-# it's not on a trial basis.  Also, the "between the first Saturday
-# and Sunday of April" phrase, if taken literally, means that the
-# transition takes place at 00:00 on the first Sunday on or after 04-02.
-
-# From Paul Eggert (2003-02-09):
-# DAWN <http://www.dawn.com/2002/10/06/top13.htm> reported on 2002-10-05
-# that 2002 DST ended that day at midnight.  Go with McDow for now.
-
-# From Steffen Thorsen (2003-03-14):
-# According to http://www.dawn.com/2003/03/07/top15.htm
-# there will be no DST in Pakistan this year:
-#
-# ISLAMABAD, March 6: Information and Media Development Minister Sheikh
-# Rashid Ahmed on Thursday said the cabinet had reversed a previous
-# decision to advance clocks by one hour in summer and put them back by
-# one hour in winter with the aim of saving light hours and energy.
-#
-# The minister told a news conference that the experiment had rather
-# shown 8 per cent higher consumption of electricity.
-
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule Pakistan	2002	only	-	Apr	Sun>=2	0:01	1:00	S
-Rule Pakistan	2002	only	-	Oct	Sun>=2	0:01	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Karachi	4:28:12 -	LMT	1907
-			5:30	-	IST	1942 Sep
-			5:30	1:00	IST	1945 Oct 15
-			5:30	-	IST	1951 Sep 30
-			5:00	-	KART	1971 Mar 26 # Karachi Time
-			5:00 Pakistan	PK%sT	# Pakistan Time
-
-# Palestine
-
-# From Amos Shapir (1998-02-15):
-#
-# From 1917 until 1948-05-15, all of Palestine, including the parts now
-# known as the Gaza Strip and the West Bank, was under British rule.
-# Therefore the rules given for Israel for that period, apply there too...
-#
-# The Gaza Strip was under Egyptian rule between 1948-05-15 until 1967-06-05
-# (except a short occupation by Israel from 1956-11 till 1957-03, but no
-# time zone was affected then).  It was never formally annexed to Egypt,
-# though.
-#
-# The rest of Palestine was under Jordanian rule at that time, formally
-# annexed in 1950 as the West Bank (and the word "Trans" was dropped from
-# the country's previous name of "the Hashemite Kingdom of the
-# Trans-Jordan").  So the rules for Jordan for that time apply.  Major
-# towns in that area are Nablus (Shchem), El-Halil (Hebron), Ramallah, and
-# East Jerusalem.
-#
-# Both areas were occupied by Israel in June 1967, but not annexed (except
-# for East Jerusalem).  They were on Israel time since then; there might
-# have been a Military Governor's order about time zones, but I'm not aware
-# of any (such orders may have been issued semi-annually whenever summer
-# time was in effect, but maybe the legal aspect of time was just neglected).
-#
-# The Palestinian Authority was established in 1993, and got hold of most
-# towns in the West Bank and Gaza by 1995.  I know that in order to
-# demonstrate...independence, they have been switching to
-# summer time and back on a different schedule than Israel's, but I don't
-# know when this was started, or what algorithm is used (most likely the
-# Jordanian one).
-#
-# To summarize, the table should probably look something like that:
-#
-# Area \ when | 1918-1947 | 1948-1967 | 1967-1995 | 1996-
-# ------------+-----------+-----------+-----------+-----------
-# Israel      | Zion      | Zion      | Zion      | Zion
-# West bank   | Zion      | Jordan    | Zion      | Jordan
-# Gaza        | Zion      | Egypt     | Zion      | Jordan
-#
-# I guess more info may be available from the PA's web page (if/when they
-# have one).
-
-# From Paul Eggert (1998-02-25):
-# Shanks writes that Gaza did not observe DST until 1957, but we'll go
-# with Shapir and assume that it observed DST from 1940 through 1947,
-# and that it used Jordanian rules starting in 1996.
-# We don't yet need a separate entry for the West Bank, since
-# the only differences between it and Gaza that we know about
-# occurred before our cutoff date of 1970.
-# However, as we get more information, we may need to add entries
-# for parts of the West Bank as they transitioned from Israel's rules
-# to Palestine's rules.  If you have more info about this, please
-# send it to tz@elsie.nci.nih.gov for incorporation into future editions.
-
-# From IINS News Service - Israel - 1998-03-23 10:38:07 Israel time,
-# forwarded by Ephraim Silverberg:
-#
-# Despite the fact that Israel changed over to daylight savings time
-# last week, the PLO Authority (PA) has decided not to turn its clocks
-# one-hour forward at this time.  As a sign of independence from Israeli rule,
-# the PA has decided to implement DST in April.
-
-# From Paul Eggert (1999-09-20):
-# Daoud Kuttab writes in
-# <a href="http://www.jpost.com/com/Archive/22.Apr.1999/Opinion/Article-2.html">
-# Holiday havoc
-# </a> (Jerusalem Post, 1999-04-22) that
-# the Palestinian National Authority changed to DST on 1999-04-15.
-# I vaguely recall that they switch back in October (sorry, forgot the source).
-# For now, let's assume that the spring switch was at 24:00,
-# and that they switch at 0:00 on the 3rd Fridays of April and October.
-
-# From Paul Eggert (2005-11-22):
-# Starting 2004 transitions are from Steffen Thorsen's web site timeanddate.com.
-
-# The rules for Egypt are stolen from the `africa' file.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule EgyptAsia	1957	only	-	May	10	0:00	1:00	S
-Rule EgyptAsia	1957	1958	-	Oct	 1	0:00	0	-
-Rule EgyptAsia	1958	only	-	May	 1	0:00	1:00	S
-Rule EgyptAsia	1959	1967	-	May	 1	1:00	1:00	S
-Rule EgyptAsia	1959	1965	-	Sep	30	3:00	0	-
-Rule EgyptAsia	1966	only	-	Oct	 1	3:00	0	-
-
-Rule Palestine	1999	max	-	Apr	Fri>=15	0:00	1:00	S
-Rule Palestine	1999	2003	-	Oct	Fri>=15	0:00	0	-
-Rule Palestine	2004	only	-	Oct	 1	1:00	0	-
-Rule Palestine	2005	max	-	Oct	 4	1:00	0	-
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Gaza	2:17:52	-	LMT	1900 Oct
-			2:00	Zion	EET	1948 May 15
-			2:00 EgyptAsia	EE%sT	1967 Jun  5
-			2:00	Zion	I%sT	1996
-			2:00	Jordan	EE%sT	1999
-			2:00 Palestine	EE%sT
-
-# Paracel Is
-# no information
-
-# Philippines
-# On 1844-08-16, Narciso Claveria, governor-general of the
-# Philippines, issued a proclamation announcing that 1844-12-30 was to
-# be immediately followed by 1845-01-01.  Robert H. van Gent has a
-# transcript of the decree in <http://www.phys.uu.nl/~vgent/idl/idl.htm>.
-# The rest of this data is from Shanks.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Phil	1936	only	-	Nov	1	0:00	1:00	S
-Rule	Phil	1937	only	-	Feb	1	0:00	0	-
-Rule	Phil	1954	only	-	Apr	12	0:00	1:00	S
-Rule	Phil	1954	only	-	Jul	1	0:00	0	-
-Rule	Phil	1978	only	-	Mar	22	0:00	1:00	S
-Rule	Phil	1978	only	-	Sep	21	0:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Manila	-15:56:00 -	LMT	1844 Dec 31
-			8:04:00 -	LMT	1899 May 11
-			8:00	Phil	PH%sT	1942 May
-			9:00	-	JST	1944 Nov
-			8:00	Phil	PH%sT
-
-# Qatar
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Qatar	3:26:08 -	LMT	1920	# Al Dawhah / Doha
-			4:00	-	GST	1972 Jun
-			3:00	-	AST
-
-# Saudi Arabia
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Riyadh	3:06:52 -	LMT	1950
-			3:00	-	AST
-
-# Singapore
-# The data here are taken from Mok Ly Yng (2003-10-30)
-# <http://www.math.nus.edu.sg/aslaksen/teaching/timezone.html>.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Singapore	6:55:25 -	LMT	1901 Jan  1
-			6:55:25	-	SMT	1905 Jun  1 # Singapore M.T.
-			7:00	-	MALT	1933 Jan  1 # Malaya Time
-			7:00	0:20	MALST	1936 Jan  1
-			7:20	-	MALT	1941 Sep  1
-			7:30	-	MALT	1942 Feb 16
-			9:00	-	JST	1945 Sep 12
-			7:30	-	MALT	1965 Aug  9 # independence
-			7:30	-	SGT	1982 Jan  1 # Singapore Time
-			8:00	-	SGT
-
-# Spratly Is
-# no information
-
-# Sri Lanka
-# From Paul Eggert (1996-09-03):
-# "Sri Lanka advances clock by an hour to avoid blackout"
-# (www.virtual-pc.com/lankaweb/news/items/240596-2.html, 1996-05-24,
-# no longer available as of 1999-08-17)
-# reported ``the country's standard time will be put forward by one hour at
-# midnight Friday (1830 GMT) `in the light of the present power crisis'.''
-#
-# From Dharmasiri Senanayake, Sri Lanka Media Minister (1996-10-24), as quoted
-# by Shamindra in
-# <a href="news:54rka5$m5h@mtinsc01-mgt.ops.worldnet.att.net">
-# Daily News - Hot News Section (1996-10-26)
-# </a>:
-# With effect from 12.30 a.m. on 26th October 1996
-# Sri Lanka will be six (06) hours ahead of GMT.
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Colombo	5:19:24 -	LMT	1880
-			5:19:32	-	MMT	1906	# Moratuwa Mean Time
-			5:30	-	IST	1942 Jan  5
-			5:30	0:30	IHST	1942 Sep
-			5:30	1:00	IST	1945 Oct 16 2:00
-			5:30	-	IST	1996 May 25 0:00
-			6:30	-	LKT	1996 Oct 26 0:30
-			6:00	-	LKT
-
-# Syria
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Syria	1920	1923	-	Apr	Sun>=15	2:00	1:00	S
-Rule	Syria	1920	1923	-	Oct	Sun>=1	2:00	0	-
-Rule	Syria	1962	only	-	Apr	29	2:00	1:00	S
-Rule	Syria	1962	only	-	Oct	1	2:00	0	-
-Rule	Syria	1963	1965	-	May	1	2:00	1:00	S
-Rule	Syria	1963	only	-	Sep	30	2:00	0	-
-Rule	Syria	1964	only	-	Oct	1	2:00	0	-
-Rule	Syria	1965	only	-	Sep	30	2:00	0	-
-Rule	Syria	1966	only	-	Apr	24	2:00	1:00	S
-Rule	Syria	1966	1976	-	Oct	1	2:00	0	-
-Rule	Syria	1967	1978	-	May	1	2:00	1:00	S
-Rule	Syria	1977	1978	-	Sep	1	2:00	0	-
-Rule	Syria	1983	1984	-	Apr	9	2:00	1:00	S
-Rule	Syria	1983	1984	-	Oct	1	2:00	0	-
-Rule	Syria	1986	only	-	Feb	16	2:00	1:00	S
-Rule	Syria	1986	only	-	Oct	9	2:00	0	-
-Rule	Syria	1987	only	-	Mar	1	2:00	1:00	S
-Rule	Syria	1987	1988	-	Oct	31	2:00	0	-
-Rule	Syria	1988	only	-	Mar	15	2:00	1:00	S
-Rule	Syria	1989	only	-	Mar	31	2:00	1:00	S
-Rule	Syria	1989	only	-	Oct	1	2:00	0	-
-Rule	Syria	1990	only	-	Apr	1	2:00	1:00	S
-Rule	Syria	1990	only	-	Sep	30	2:00	0	-
-Rule	Syria	1991	only	-	Apr	 1	0:00	1:00	S
-Rule	Syria	1991	1992	-	Oct	 1	0:00	0	-
-Rule	Syria	1992	only	-	Apr	 8	0:00	1:00	S
-Rule	Syria	1993	only	-	Mar	26	0:00	1:00	S
-Rule	Syria	1993	only	-	Sep	25	0:00	0	-
-# IATA SSIM (1998-02) says 1998-04-02;
-# (1998-09) says 1999-03-29 and 1999-09-29; (1999-02) says 1999-04-02,
-# 2000-04-02, and 2001-04-02; (1999-09) says 2000-03-31 and 2001-03-31;
-# ignore all these claims and go with Shanks.
-Rule	Syria	1994	1996	-	Apr	 1	0:00	1:00	S
-Rule	Syria	1994	max	-	Oct	 1	0:00	0	-
-Rule	Syria	1997	1998	-	Mar	lastMon	0:00	1:00	S
-Rule	Syria	1999	max	-	Apr	 1	0:00	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Damascus	2:25:12 -	LMT	1920	# Dimashq
-			2:00	Syria	EE%sT
-
-# Tajikistan
-# From Shanks.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Dushanbe	4:35:12 -	LMT	1924 May  2
-			5:00	-	DUST	1930 Jun 21 # Dushanbe Time
-			6:00 RussiaAsia DUS%sT	1991 Mar 31 2:00s
-			5:00	1:00	DUSST	1991 Sep  9 2:00s
-			5:00	-	TJT		    # Tajikistan Time
-
-# Thailand
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Bangkok	6:42:04	-	LMT	1880
-			6:42:04	-	BMT	1920 Apr # Bangkok Mean Time
-			7:00	-	ICT
-
-# Turkmenistan
-# From Shanks.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Ashgabat	3:53:32 -	LMT	1924 May  2 # or Ashkhabad
-			4:00	-	ASHT	1930 Jun 21 # Ashkhabad Time
-			5:00 RussiaAsia	ASH%sT	1991 Mar 31 2:00
-			4:00 RussiaAsia	ASH%sT	1991 Oct 27 # independence
-			4:00 RussiaAsia TM%sT	1992 Jan 19 2:00
-			5:00	-	TMT
-
-# United Arab Emirates
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Dubai	3:41:12 -	LMT	1920
-			4:00	-	GST
-
-# Uzbekistan
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Samarkand	4:27:12 -	LMT	1924 May  2
-			4:00	-	SAMT	1930 Jun 21 # Samarkand Time
-			5:00	-	SAMT	1981 Apr  1
-			5:00	1:00	SAMST	1981 Oct  1
-			6:00 RussiaAsia TAS%sT	1991 Mar 31 2:00 # Tashkent Time
-			5:00 RussiaAsia	TAS%sT	1991 Sep  1 # independence
-			5:00 RussiaAsia	UZ%sT	1992
-			5:00 RussiaAsia	UZ%sT	1993
-			5:00	-	UZT
-Zone	Asia/Tashkent	4:37:12 -	LMT	1924 May  2
-			5:00	-	TAST	1930 Jun 21 # Tashkent Time
-			6:00 RussiaAsia TAS%sT	1991 Mar 31 2:00s
-			5:00 RussiaAsia	TAS%sT	1991 Sep  1 # independence
-			5:00 RussiaAsia	UZ%sT	1992
-			5:00 RussiaAsia	UZ%sT	1993
-			5:00	-	UZT
-
-# Vietnam
-# From Paul Eggert (1993-11-18):
-# Saigon's official name is Thanh-Pho Ho Chi Minh, but it's too long.
-# We'll stick with the traditional name for now.
-# From Shanks:
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Saigon	7:06:40 -	LMT	1906 Jun  9
-			7:06:20	-	SMT	1911 Mar 11 0:01 # Saigon MT?
-			7:00	-	ICT	1912 May
-			8:00	-	ICT	1931 May
-			7:00	-	ICT
-
-# Yemen
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Aden	3:00:48	-	LMT	1950
-			3:00	-	AST
+# @(#)asia	7.91
+# <pre>
+
+# This data is by no means authoritative; if you think you know better,
+# go ahead and edit the file (and please send any changes to
+# tz@elsie.nci.nih.gov for general use in the future).
+
+# From Paul Eggert (1999-03-22):
+#
+# A good source for time zone historical data outside the U.S. is
+# Thomas G. Shanks, The International Atlas (5th edition),
+# San Diego: ACS Publications, Inc. (1999).
+#
+# Gwillim Law writes that a good source
+# for recent time zone data is the International Air Transport
+# Association's Standard Schedules Information Manual (IATA SSIM),
+# published semiannually.  Law sent in several helpful summaries
+# of the IATA's data after 1990.
+#
+# Except where otherwise noted, Shanks is the source for entries through 1990,
+# and IATA SSIM is the source for entries after 1990.
+#
+# Another source occasionally used is Edward W. Whitman, World Time Differences,
+# Whitman Publishing Co, 2 Niagara Av, Ealing, London (undated), which
+# I found in the UCLA library.
+#
+# A reliable and entertaining source about time zones is
+# Derek Howse, Greenwich time and longitude, Philip Wilson Publishers (1997).
+#
+# I invented the abbreviations marked `*' in the following table;
+# the rest are from earlier versions of this file, or from other sources.
+# Corrections are welcome!
+#	     std  dst
+#	     LMT	Local Mean Time
+#	2:00 EET  EEST	Eastern European Time
+#	2:00 IST  IDT	Israel
+#	3:00 AST  ADT	Arabia*
+#	3:30 IRST IRDT	Iran
+#	4:00 GST	Gulf*
+#	5:30 IST	India
+#	7:00 ICT	Indochina*
+#	7:00 WIT	west Indonesia
+#	8:00 CIT	central Indonesia
+#	8:00 CST	China
+#	9:00 CJT	Central Japanese Time (1896/1937)*
+#	9:00 EIT	east Indonesia
+#	9:00 JST  JDT	Japan
+#	9:00 KST  KDT	Korea
+#	9:30 CST	(Australian) Central Standard Time
+#
+# See the `europe' file for Russia and Turkey in Asia.
+
+# From Guy Harris:
+# Incorporates data for Singapore from Robert Elz' asia 1.1, as well as
+# additional information from Tom Yap, Sun Microsystems Intercontinental
+# Technical Support (including a page from the Official Airline Guide -
+# Worldwide Edition).  The names for time zones are guesses.
+
+###############################################################################
+
+# These rules are stolen from the `europe' file.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	EUAsia	1981	max	-	Mar	lastSun	 1:00u	1:00	S
+Rule	EUAsia	1996	max	-	Oct	lastSun	 1:00u	0	-
+Rule E-EurAsia	1981	max	-	Mar	lastSun	 0:00	1:00	S
+Rule E-EurAsia	1979	1995	-	Sep	lastSun	 0:00	0	-
+Rule E-EurAsia	1996	max	-	Oct	lastSun	 0:00	0	-
+Rule RussiaAsia	1981	1984	-	Apr	1	 0:00	1:00	S
+Rule RussiaAsia	1981	1983	-	Oct	1	 0:00	0	-
+Rule RussiaAsia	1984	1991	-	Sep	lastSun	 2:00s	0	-
+Rule RussiaAsia	1985	1991	-	Mar	lastSun	 2:00s	1:00	S
+Rule RussiaAsia	1992	only	-	Mar	lastSat	23:00	1:00	S
+Rule RussiaAsia	1992	only	-	Sep	lastSat	23:00	0	-
+Rule RussiaAsia	1993	max	-	Mar	lastSun	 2:00s	1:00	S
+Rule RussiaAsia	1993	1995	-	Sep	lastSun	 2:00s	0	-
+Rule RussiaAsia	1996	max	-	Oct	lastSun	 2:00s	0	-
+
+# Afghanistan
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Kabul	4:36:48 -	LMT	1890
+			4:00	-	AFT	1945
+			4:30	-	AFT
+
+# Armenia
+# From Paul Eggert (1999-10-29):
+# Shanks has Yerevan switching to 3:00 (with Russian DST) in spring 1991,
+# then to 4:00 with no DST in fall 1995, then readopting Russian DST in 1997.
+# Go with Shanks, even when he disagrees with others.  Edgar Der-Danieliantz
+# reported (1996-05-04) that Yerevan probably wouldn't use DST
+# in 1996, though it did use DST in 1995.  IATA SSIM (1991/1998) reports that
+# Armenia switched from 3:00 to 4:00 in 1998 and observed DST after 1991,
+# but started switching at 3:00s in 1998.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Yerevan	2:58:00 -	LMT	1924 May  2
+			3:00	-	YERT	1957 Mar    # Yerevan Time
+			4:00 RussiaAsia YER%sT	1991 Mar 31 2:00s
+			3:00	1:00	YERST	1991 Sep 23 # independence
+			3:00 RussiaAsia	AM%sT	1995 Sep 24 2:00s
+			4:00	-	AMT	1997
+			4:00 RussiaAsia	AM%sT
+
+# Azerbaijan
+# From Rustam Aliyev of the Azerbaijan Internet Forum (2005-10-23):
+# According to the resolution of Cabinet of Ministers, 1997
+# Resolution available at: http://aif.az/docs/daylight_res.pdf
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Azer	1997	max	-	Mar	lastSun	 4:00	1:00	S
+Rule	Azer	1997	max	-	Oct	lastSun	 5:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Baku	3:19:24 -	LMT	1924 May  2
+			3:00	-	BAKT	1957 Mar    # Baku Time
+			4:00 RussiaAsia BAK%sT	1991 Mar 31 2:00s
+			3:00	1:00	BAKST	1991 Aug 30 # independence
+			3:00 RussiaAsia	AZ%sT	1992 Sep lastSat 23:00
+			4:00	-	AZT	1996 # Azerbaijan time
+			4:00	EUAsia	AZ%sT	1997
+			4:00	Azer	AZ%sT
+
+# Bahrain
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Bahrain	3:22:20 -	LMT	1920		# Al Manamah
+			4:00	-	GST	1972 Jun
+			3:00	-	AST
+
+# Bangladesh
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Dhaka	6:01:40 -	LMT	1890
+			5:53:20	-	HMT	1941 Oct    # Howrah Mean Time?
+			6:30	-	BURT	1942 May 15 # Burma Time
+			5:30	-	IST	1942 Sep
+			6:30	-	BURT	1951 Sep 30
+			6:00	-	DACT	1971 Mar 26 # Dacca Time
+			6:00	-	BDT	# Bangladesh Time
+
+# Bhutan
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Thimphu	5:58:36 -	LMT	1947 Aug 15 # or Thimbu
+			5:30	-	IST	1987 Oct
+			6:00	-	BTT	# Bhutan Time
+
+# British Indian Ocean Territory
+# Whitman and the 1995 CIA time zone map say 5:00, but the
+# 1997 and later maps say 6:00.  Assume the switch occurred in 1996.
+# We have no information as to when standard time was introduced;
+# assume it occurred in 1907, the same year as Mauritius (which
+# then contained the Chagos Archipelago).
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Indian/Chagos	4:49:40	-	LMT	1907
+			5:00	-	IOT	1996 # BIOT Time
+			6:00	-	IOT
+
+# Brunei
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Brunei	7:39:40 -	LMT	1926 Mar   # Bandar Seri Begawan
+			7:30	-	BNT	1933
+			8:00	-	BNT
+
+# Burma / Myanmar
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Rangoon	6:24:40 -	LMT	1880		# or Yangon
+			6:24:36	-	RMT	1920	   # Rangoon Mean Time?
+			6:30	-	BURT	1942 May   # Burma Time
+			9:00	-	JST	1945 May 3
+			6:30	-	MMT		   # Myanmar Time
+
+# Cambodia
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Phnom_Penh	6:59:40 -	LMT	1906 Jun  9
+			7:06:20	-	SMT	1911 Mar 11 0:01 # Saigon MT?
+			7:00	-	ICT	1912 May
+			8:00	-	ICT	1931 May
+			7:00	-	ICT
+
+# China
+
+# From Guy Harris:
+# People's Republic of China.  Yes, they really have only one time zone.
+
+# From Bob Devine (1988-01-28):
+# No they don't.  See TIME mag, 1986-02-17 p.52.  Even though
+# China is across 4 physical time zones, before Feb 1, 1986 only the
+# Peking (Bejing) time zone was recognized.  Since that date, China
+# has two of 'em -- Peking's and Urumqi (named after the capital of
+# the Xinjiang Uyghur Autonomous Region).  I don't know about DST for it.
+#
+# . . .I just deleted the DST table and this editor makes it too
+# painful to suck in another copy..  So, here is what I have for
+# DST start/end dates for Peking's time zone (info from AP):
+#
+#     1986 May 4 - Sept 14
+#     1987 mid-April - ??
+
+# From U. S. Naval Observatory (1989-01-19):
+# CHINA               8 H  AHEAD OF UTC  ALL OF CHINA, INCL TAIWAN
+# CHINA               9 H  AHEAD OF UTC  APR 17 - SEP 10
+
+# From Paul Eggert (1995-12-19):
+# Shanks writes that China has had a single time zone since 1980 May 1,
+# observing summer DST from 1986 through 1991; this contradicts Devine's
+# note about Time magazine, though apparently _something_ happened in 1986.
+# Go with Shanks for now.  I made up names for the other pre-1980 time zones.
+
+# From Shanks:
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Shang	1940	only	-	Jun	 3	0:00	1:00	D
+Rule	Shang	1940	1941	-	Oct	 1	0:00	0	S
+Rule	Shang	1941	only	-	Mar	16	0:00	1:00	D
+Rule	PRC	1986	only	-	May	 4	0:00	1:00	D
+Rule	PRC	1986	1991	-	Sep	Sun>=11	0:00	0	S
+Rule	PRC	1987	1991	-	Apr	Sun>=10	0:00	1:00	D
+#
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+#
+# From Anthony Fok (2001-12-20):
+# BTW, I did some research on-line and found some info regarding these five
+# historic timezones from some Taiwan websites.  And yes, there are official
+# Chinese names for these locales (before 1949):
+# Changbai Time ("Long-white Time", Long-white = Heilongjiang area)
+Zone	Asia/Harbin	8:26:44	-	LMT	1928 # or Haerbin
+			8:30	-	CHAT	1932 Mar # Changbai Time
+			8:00	-	CST	1940
+			9:00	-	CHAT	1966 May
+			8:30	-	CHAT	1980 May
+			8:00	PRC	C%sT
+# Zhongyuan Time ("Central plain Time")
+Zone	Asia/Shanghai	8:05:52	-	LMT	1928
+			8:00	Shang	C%sT	1949
+			8:00	PRC	C%sT
+# Long-shu Time (probably due to Long and Shu being two names of that area)
+Zone	Asia/Chongqing	7:06:20	-	LMT	1928 # or Chungking
+			7:00	-	LONT	1980 May # Long-shu Time
+			8:00	PRC	C%sT
+# Xin-zang Time ("Xinjiang-Tibet Time")
+Zone	Asia/Urumqi	5:50:20	-	LMT	1928 # or Urumchi
+			6:00	-	URUT	1980 May # Urumqi Time
+			8:00	PRC	C%sT
+# Kunlun Time
+Zone	Asia/Kashgar	5:03:56	-	LMT	1928 # or Kashi or Kaxgar
+			5:30	-	KAST	1940	 # Kashgar Time
+			5:00	-	KAST	1980 May
+			8:00	PRC	C%sT
+
+# Hong Kong (Xianggang)
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	HK	1946	only	-	Apr	20	3:30	1:00	S
+Rule	HK	1946	only	-	Dec	1	3:30	0	-
+Rule	HK	1947	only	-	Apr	13	3:30	1:00	S
+Rule	HK	1947	only	-	Dec	30	3:30	0	-
+Rule	HK	1948	only	-	May	2	3:30	1:00	S
+Rule	HK	1948	1952	-	Oct	lastSun	3:30	0	-
+Rule	HK	1949	1953	-	Apr	Sun>=1	3:30	1:00	S
+Rule	HK	1953	only	-	Nov	1	3:30	0	-
+Rule	HK	1954	1964	-	Mar	Sun>=18	3:30	1:00	S
+Rule	HK	1954	only	-	Oct	31	3:30	0	-
+Rule	HK	1955	1964	-	Nov	Sun>=1	3:30	0	-
+Rule	HK	1965	1977	-	Apr	Sun>=16	3:30	1:00	S
+Rule	HK	1965	1977	-	Oct	Sun>=16	3:30	0	-
+Rule	HK	1979	1980	-	May	Sun>=8	3:30	1:00	S
+Rule	HK	1979	1980	-	Oct	Sun>=16	3:30	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Hong_Kong	7:36:36 -	LMT	1904 Oct 30
+			8:00	HK	HK%sT
+
+
+###############################################################################
+
+# Taiwan
+
+# Shanks writes that Taiwan observed DST during 1945, when it
+# was still controlled by Japan.  This is hard to believe, but we don't
+# have any other information.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Taiwan	1945	1951	-	May	1	0:00	1:00	D
+Rule	Taiwan	1945	1951	-	Oct	1	0:00	0	S
+Rule	Taiwan	1952	only	-	Mar	1	0:00	1:00	D
+Rule	Taiwan	1952	1954	-	Nov	1	0:00	0	S
+Rule	Taiwan	1953	1959	-	Apr	1	0:00	1:00	D
+Rule	Taiwan	1955	1961	-	Oct	1	0:00	0	S
+Rule	Taiwan	1960	1961	-	Jun	1	0:00	1:00	D
+Rule	Taiwan	1974	1975	-	Apr	1	0:00	1:00	D
+Rule	Taiwan	1974	1975	-	Oct	1	0:00	0	S
+Rule	Taiwan	1980	only	-	Jun	30	0:00	1:00	D
+Rule	Taiwan	1980	only	-	Sep	30	0:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Taipei	8:06:00 -	LMT	1896 # or Taibei or T'ai-pei
+			8:00	Taiwan	C%sT
+
+# Macau (Macao, Aomen)
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Macau	1961	1962	-	Mar	Sun>=16	3:30	1:00	S
+Rule	Macau	1961	1964	-	Nov	Sun>=1	3:30	0	-
+Rule	Macau	1963	only	-	Mar	Sun>=16	0:00	1:00	S
+Rule	Macau	1964	only	-	Mar	Sun>=16	3:30	1:00	S
+Rule	Macau	1965	only	-	Mar	Sun>=16	0:00	1:00	S
+Rule	Macau	1965	only	-	Oct	31	0:00	0	-
+Rule	Macau	1966	1971	-	Apr	Sun>=16	3:30	1:00	S
+Rule	Macau	1966	1971	-	Oct	Sun>=16	3:30	0	-
+Rule	Macau	1972	1974	-	Apr	Sun>=15	0:00	1:00	S
+Rule	Macau	1972	1973	-	Oct	Sun>=15	0:00	0	-
+Rule	Macau	1974	1977	-	Oct	Sun>=15	3:30	0	-
+Rule	Macau	1975	1977	-	Apr	Sun>=15	3:30	1:00	S
+Rule	Macau	1978	1980	-	Apr	Sun>=15	0:00	1:00	S
+Rule	Macau	1978	1980	-	Oct	Sun>=15	0:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Macau	7:34:20 -	LMT	1912
+			8:00	Macau	MO%sT	1999 Dec 20 # return to China
+			8:00	PRC	C%sT
+
+
+###############################################################################
+
+# Cyprus
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Cyprus	1975	only	-	Apr	13	0:00	1:00	S
+Rule	Cyprus	1975	only	-	Oct	12	0:00	0	-
+Rule	Cyprus	1976	only	-	May	15	0:00	1:00	S
+Rule	Cyprus	1976	only	-	Oct	11	0:00	0	-
+Rule	Cyprus	1977	1980	-	Apr	Sun>=1	0:00	1:00	S
+Rule	Cyprus	1977	only	-	Sep	25	0:00	0	-
+Rule	Cyprus	1978	only	-	Oct	2	0:00	0	-
+Rule	Cyprus	1979	1997	-	Sep	lastSun	0:00	0	-
+Rule	Cyprus	1981	1998	-	Mar	lastSun	0:00	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Nicosia	2:13:28 -	LMT	1921 Nov 14
+			2:00	Cyprus	EE%sT	1998 Sep
+			2:00	EUAsia	EE%sT
+# IATA SSIM (1998-09) has Cyprus using EU rules for the first time.
+
+# Classically, Cyprus belongs to Asia; e.g. see Herodotus, Histories, I.72.
+# However, for various reasons many users expect to find it under Europe.
+Link	Asia/Nicosia	Europe/Nicosia
+
+# Georgia
+# From Paul Eggert (1994-11-19):
+# Today's _Economist_ (p 60) reports that Georgia moved its clocks forward
+# an hour recently, due to a law proposed by Zurab Murvanidze,
+# an MP who went on a hunger strike for 11 days to force discussion about it!
+# We have no details, but we'll guess they didn't move the clocks back in fall.
+#
+# From Mathew Englander, quoting AP (1996-10-23 13:05-04):
+# Instead of putting back clocks at the end of October, Georgia
+# will stay on daylight savings time this winter to save energy,
+# President Eduard Shevardnadze decreed Wednesday.
+#
+# From the BBC via Joseph S. Myers (2004-06-27):
+#
+# Georgia moved closer to Western Europe on Sunday...  The former Soviet
+# republic has changed its time zone back to that of Moscow.  As a result it
+# is now just four hours ahead of Greenwich Mean Time, rather than five hours
+# ahead.  The switch was decreed by the pro-Western president of Georgia,
+# Mikhail Saakashvili, who said the change was partly prompted by the process
+# of integration into Europe.
+
+# From Teimuraz Abashidze (2005-11-07):
+# Government of Georgia ... decided to NOT CHANGE daylight savings time on
+# [Oct.] 30, as it was done before during last more than 10 years.
+# Currently, we are in fact GMT +4:00, as before 30 October it was GMT
+# +3:00.... The problem is, there is NO FORMAL LAW or governmental document
+# about it.  As far as I can find, I was told, that there is no document,
+# because we just DIDN'T ISSUE document about switching to winter time....
+# I don't know what can be done, especially knowing that some years ago our
+# DST rules where changed THREE TIMES during one month.
+
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Tbilisi	2:59:16 -	LMT	1880
+			2:59:16	-	TBMT	1924 May  2 # Tbilisi Mean Time
+			3:00	-	TBIT	1957 Mar    # Tbilisi Time
+			4:00 RussiaAsia TBI%sT	1991 Mar 31 2:00s
+			3:00	1:00	TBIST	1991 Apr  9 # independence
+			3:00 RussiaAsia GE%sT	1992 # Georgia Time
+			3:00 E-EurAsia	GE%sT	1994 Sep lastSun
+			4:00 E-EurAsia	GE%sT	1996 Oct lastSun
+			4:00	1:00	GEST	1997 Mar lastSun
+			4:00 E-EurAsia	GE%sT	2004 Jun 27
+			3:00 RussiaAsia	GE%sT	2005 Mar lastSun 2:00
+			4:00	-	GET
+
+# East Timor
+
+# From Joao Carrascalao, brother of the former governor of East Timor, in
+# <a href="http://etan.org/et99c/december/26-31/30ETMAY.htm">
+# East Timor may be late for its millennium
+# </a> (1999-12-26/31):
+# Portugal tried to change the time forward in 1974 because the sun
+# rises too early but the suggestion raised a lot of problems with the
+# Timorese and I still don't think it would work today because it
+# conflicts with their way of life.
+
+# From Paul Eggert (2000-12-04):
+# We don't have any record of the above attempt.
+# Most likely our records are incomplete, but we have no better data.
+
+# <a href="http://www.hri.org/news/world/undh/last/00-08-16.undh.html">
+# From Manoel de Almeida e Silva, Deputy Spokesman for the UN Secretary-General
+# (2000-08-16)</a>:
+# The Cabinet of the East Timor Transition Administration decided
+# today to advance East Timor's time by one hour.  The time change,
+# which will be permanent, with no seasonal adjustment, will happen at
+# midnight on Saturday, September 16.
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Dili	8:22:20 -	LMT	1912
+			8:00	-	TLT	1942 Feb 21 23:00 # E Timor Time
+			9:00	-	JST	1945 Aug
+			9:00	-	TLT	1976 May  3
+			8:00	-	CIT	2000 Sep 17 00:00
+			9:00	-	TLT
+
+# India
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Calcutta	5:53:28 -	LMT	1880	# Kolkata
+			5:53:20	-	HMT	1941 Oct    # Howrah Mean Time?
+			6:30	-	BURT	1942 May 15 # Burma Time
+			5:30	-	IST	1942 Sep
+			5:30	1:00	IST	1945 Oct 15
+			5:30	-	IST
+# The following are like Asia/Calcutta:
+#	Andaman Is
+#	Lakshadweep (Laccadive, Minicoy and Amindivi Is)
+#	Nicobar Is
+
+# Indonesia
+#
+# From Gwillim Law (2001-05-28), overriding Shanks:
+# <http://www.sumatera-inc.com/go_to_invest/about_indonesia.asp#standtime>
+# says that Indonesia's time zones changed on 1988-01-01.  Looking at some
+# time zone maps, I think that must refer to Western Borneo (Kalimantan Barat
+# and Kalimantan Tengah) switching from UTC+8 to UTC+7.
+#
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Asia/Jakarta	7:07:12 -	LMT	1867 Aug 10
+# Shanks says the next transition was at 1924 Jan 1 0:13,
+# but this must be a typo.
+			7:07:12	-	JMT	1923 Dec 31 23:47:12 # Jakarta
+			7:20	-	JAVT	1932 Nov	 # Java Time
+			7:30	-	WIT	1942 Mar 23
+			9:00	-	JST	1945 Aug
+			7:30	-	WIT	1948 May
+			8:00	-	WIT	1950 May
+			7:30	-	WIT	1964
+			7:00	-	WIT
+Zone Asia/Pontianak	7:17:20	-	LMT	1908 May
+			7:17:20	-	PMT	1932 Nov    # Pontianak MT
+			7:30	-	WIT	1942 Jan 29
+			9:00	-	JST	1945 Aug
+			7:30	-	WIT	1948 May
+			8:00	-	WIT	1950 May
+			7:30	-	WIT	1964
+			8:00	-	CIT	1988 Jan  1
+			7:00	-	WIT
+Zone Asia/Makassar	7:57:36 -	LMT	1920
+			7:57:36	-	MMT	1932 Nov    # Macassar MT
+			8:00	-	CIT	1942 Feb  9
+			9:00	-	JST	1945 Aug
+			8:00	-	CIT
+Zone Asia/Jayapura	9:22:48 -	LMT	1932 Nov
+			9:00	-	EIT	1944
+			9:30	-	CST	1964
+			9:00	-	EIT
+
+# Iran
+
+# From Roozbeh Pournader (2003-03-15):
+# This is an English translation of what I just found (originally in Persian).
+# The Gregorian dates in brackets are mine:
+#
+#	Official Newspaper No. 13548-1370/6/25 [1991-09-16]
+#	No. 16760/T233 H				1370/6/10 [1991-09-01]
+#
+#	The Rule About Change of the Official Time of the Country
+#
+#	The Board of Ministers, in the meeting dated 1370/5/23 [1991-08-14],
+#	based on the suggestion number 2221/D dated 1370/4/22 [1991-07-13]
+#	of the Country's Organization for Official and Employment Affairs,
+#	and referring to the law for equating the working hours of workers
+#	and officers in the whole country dated 1359/4/23 [1980-07-14], and
+#	for synchronizing the official times of the country, agreed that:
+#
+#	The official time of the country will should move forward one hour
+#	at the 24[:00] hours of the first day of Farvardin and should return
+#	to its previous state at the 24[:00] hours of the 30th day of
+#	Shahrivar.
+#
+#	First Deputy to the President - Hassan Habibi
+#
+# From personal experience, that agrees with what has been followed
+# for at least the last 5 years.  Before that, for a few years, the
+# date used was the first Thursday night of Farvardin and the last
+# Thursday night of Shahrivar, but I can't give exact dates....
+# I have also changed the abbreviations to what is considered correct
+# here in Iran, IRST for regular time and IRDT for daylight saving time.
+#
+# From Roozbeh Pournader (2005-04-05):
+# The text of the Iranian law, in effect since 1925, clearly mentions
+# that the true solar year is the measure, and there is no arithmetic
+# leap year calculation involved.  There has never been any serious
+# plan to change that law....
+#
+# From Paul Eggert (2005-04-05):
+# Go with Shanks before September 1991, and with Pournader thereafter.
+# I used Ed Reingold's cal-persia in GNU Emacs 21.2 to check Persian dates,
+# stopping after 2037 when 32-bit time_t's overflow.
+# That cal-persia used Birashk's approximation, which disagrees with the solar
+# calendar predictions for the year 2025, so I corrected those dates by hand.
+#
+# From Oscar van Vlijmen (2005-03-30), writing about future
+# discrepancies between cal-persia and the Iranian calendar:
+# For 2091 solar-longitude-after yields 2091-03-20 08:40:07.7 UT for
+# the vernal equinox and that gets so close to 12:00 some local
+# Iranian time that the definition of the correct location needs to be
+# known exactly, amongst other factors.  2157 is even closer:
+# 2157-03-20 08:37:15.5 UT.  But the Gregorian year 2025 should give
+# no interpretation problem whatsoever.  By the way, another instant
+# in the near future where there will be a discrepancy between
+# arithmetical and astronomical Iranian calendars will be in 2058:
+# vernal equinox on 2058-03-20 09:03:05.9 UT.  The Java version of
+# Reingold's/Dershowitz' calculator gives correctly the Gregorian date
+# 2058-03-21 for 1 Farvardin 1437 (astronomical).
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Iran	1978	1980	-	Mar	21	0:00	1:00	D
+Rule	Iran	1978	only	-	Oct	21	0:00	0	S
+Rule	Iran	1979	only	-	Sep	19	0:00	0	S
+Rule	Iran	1980	only	-	Sep	23	0:00	0	S
+Rule	Iran	1991	only	-	May	 3	0:00	1:00	D
+Rule	Iran	1992	1995	-	Mar	22	0:00	1:00	D
+Rule	Iran	1991	1995	-	Sep	22	0:00	0	S
+Rule	Iran	1996	only	-	Mar	21	0:00	1:00	D
+Rule	Iran	1996	only	-	Sep	21	0:00	0	S
+Rule	Iran	1997	1999	-	Mar	22	0:00	1:00	D
+Rule	Iran	1997	1999	-	Sep	22	0:00	0	S
+Rule	Iran	2000	only	-	Mar	21	0:00	1:00	D
+Rule	Iran	2000	only	-	Sep	21	0:00	0	S
+Rule	Iran	2001	2003	-	Mar	22	0:00	1:00	D
+Rule	Iran	2001	2003	-	Sep	22	0:00	0	S
+Rule	Iran	2004	only	-	Mar	21	0:00	1:00	D
+Rule	Iran	2004	only	-	Sep	21	0:00	0	S
+Rule	Iran	2005	2007	-	Mar	22	0:00	1:00	D
+Rule	Iran	2005	2007	-	Sep	22	0:00	0	S
+Rule	Iran	2008	only	-	Mar	21	0:00	1:00	D
+Rule	Iran	2008	only	-	Sep	21	0:00	0	S
+Rule	Iran	2009	2011	-	Mar	22	0:00	1:00	D
+Rule	Iran	2009	2011	-	Sep	22	0:00	0	S
+Rule	Iran	2012	only	-	Mar	21	0:00	1:00	D
+Rule	Iran	2012	only	-	Sep	21	0:00	0	S
+Rule	Iran	2013	2015	-	Mar	22	0:00	1:00	D
+Rule	Iran	2013	2015	-	Sep	22	0:00	0	S
+Rule	Iran	2016	only	-	Mar	21	0:00	1:00	D
+Rule	Iran	2016	only	-	Sep	21	0:00	0	S
+Rule	Iran	2017	2019	-	Mar	22	0:00	1:00	D
+Rule	Iran	2017	2019	-	Sep	22	0:00	0	S
+Rule	Iran	2020	only	-	Mar	21	0:00	1:00	D
+Rule	Iran	2020	only	-	Sep	21	0:00	0	S
+Rule	Iran	2021	2023	-	Mar	22	0:00	1:00	D
+Rule	Iran	2021	2023	-	Sep	22	0:00	0	S
+Rule	Iran	2024	only	-	Mar	21	0:00	1:00	D
+Rule	Iran	2024	only	-	Sep	21	0:00	0	S
+Rule	Iran	2025	2027	-	Mar	22	0:00	1:00	D
+Rule	Iran	2025	2027	-	Sep	22	0:00	0	S
+Rule	Iran	2028	2029	-	Mar	21	0:00	1:00	D
+Rule	Iran	2028	2029	-	Sep	21	0:00	0	S
+Rule	Iran	2030	2031	-	Mar	22	0:00	1:00	D
+Rule	Iran	2030	2031	-	Sep	22	0:00	0	S
+Rule	Iran	2032	2033	-	Mar	21	0:00	1:00	D
+Rule	Iran	2032	2033	-	Sep	21	0:00	0	S
+Rule	Iran	2034	2035	-	Mar	22	0:00	1:00	D
+Rule	Iran	2034	2035	-	Sep	22	0:00	0	S
+Rule	Iran	2036	2037	-	Mar	21	0:00	1:00	D
+Rule	Iran	2036	2037	-	Sep	21	0:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Tehran	3:25:44	-	LMT	1916
+			3:25:44	-	TMT	1946	# Tehran Mean Time
+			3:30	-	IRST	1977 Nov
+			4:00	Iran	IR%sT	1979
+			3:30	Iran	IR%sT
+
+
+# Iraq
+#
+# From Jonathan Lennox (2000-06-12):
+# An article in this week's Economist ("Inside the Saddam-free zone", p. 50 in
+# the U.S. edition) on the Iraqi Kurds contains a paragraph:
+# "The three northern provinces ... switched their clocks this spring and
+# are an hour ahead of Baghdad."
+#
+# But Rives McDow (2000-06-18) quotes a contact in Iraqi-Kurdistan as follows:
+# In the past, some Kurdish nationalists, as a protest to the Iraqi
+# Government, did not adhere to daylight saving time.  They referred
+# to daylight saving as Saddam time.  But, as of today, the time zone
+# in Iraqi-Kurdistan is on standard time with Baghdad, Iraq.
+#
+# So we'll ignore the Economist's claim.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Iraq	1982	only	-	May	1	0:00	1:00	D
+Rule	Iraq	1982	1984	-	Oct	1	0:00	0	S
+Rule	Iraq	1983	only	-	Mar	31	0:00	1:00	D
+Rule	Iraq	1984	1985	-	Apr	1	0:00	1:00	D
+Rule	Iraq	1985	1990	-	Sep	lastSun	1:00s	0	S
+Rule	Iraq	1986	1990	-	Mar	lastSun	1:00s	1:00	D
+# IATA SSIM (1991/1996) says Apr 1 12:01am UTC; guess the `:01' is a typo.
+# Shanks says Iraq did not observe DST 1992/1997 or 1999 on; ignore this.
+Rule	Iraq	1991	max	-	Apr	 1	3:00s	1:00	D
+Rule	Iraq	1991	max	-	Oct	 1	3:00s	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Baghdad	2:57:40	-	LMT	1890
+			2:57:36	-	BMT	1918	    # Baghdad Mean Time?
+			3:00	-	AST	1982 May
+			3:00	Iraq	A%sT
+
+
+###############################################################################
+
+# Israel
+
+# From Ephraim Silverberg (2001-01-11):
+#
+# I coined "IST/IDT" circa 1988.  Until then there were three
+# different abbreviations in use:
+#
+# JST  Jerusalem Standard Time [Danny Braniss, Hebrew University]
+# IZT  Israel Zonal (sic) Time [Prof. Haim Papo, Technion]
+# EEST Eastern Europe Standard Time [used by almost everyone else]
+#
+# Since timezones should be called by country and not capital cities,
+# I ruled out JST.  As Israel is in Asia Minor and not Eastern Europe,
+# EEST was equally unacceptable.  Since "zonal" was not compatible with
+# any other timezone abbreviation, I felt that 'IST' was the way to go
+# and, indeed, it has received almost universal acceptance in timezone
+# settings in Israeli computers.
+#
+# In any case, I am happy to share timezone abbreviations with India,
+# high on my favorite-country list (and not only because my wife's
+# family is from India).
+
+# From Shanks:
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Zion	1940	only	-	Jun	 1	0:00	1:00	D
+Rule	Zion	1942	1944	-	Nov	 1	0:00	0	S
+Rule	Zion	1943	only	-	Apr	 1	2:00	1:00	D
+Rule	Zion	1944	only	-	Apr	 1	0:00	1:00	D
+Rule	Zion	1945	only	-	Apr	16	0:00	1:00	D
+Rule	Zion	1945	only	-	Nov	 1	2:00	0	S
+Rule	Zion	1946	only	-	Apr	16	2:00	1:00	D
+Rule	Zion	1946	only	-	Nov	 1	0:00	0	S
+Rule	Zion	1948	only	-	May	23	0:00	2:00	DD
+Rule	Zion	1948	only	-	Sep	 1	0:00	1:00	D
+Rule	Zion	1948	1949	-	Nov	 1	2:00	0	S
+Rule	Zion	1949	only	-	May	 1	0:00	1:00	D
+Rule	Zion	1950	only	-	Apr	16	0:00	1:00	D
+Rule	Zion	1950	only	-	Sep	15	3:00	0	S
+Rule	Zion	1951	only	-	Apr	 1	0:00	1:00	D
+Rule	Zion	1951	only	-	Nov	11	3:00	0	S
+Rule	Zion	1952	only	-	Apr	20	2:00	1:00	D
+Rule	Zion	1952	only	-	Oct	19	3:00	0	S
+Rule	Zion	1953	only	-	Apr	12	2:00	1:00	D
+Rule	Zion	1953	only	-	Sep	13	3:00	0	S
+Rule	Zion	1954	only	-	Jun	13	0:00	1:00	D
+Rule	Zion	1954	only	-	Sep	12	0:00	0	S
+Rule	Zion	1955	only	-	Jun	11	2:00	1:00	D
+Rule	Zion	1955	only	-	Sep	11	0:00	0	S
+Rule	Zion	1956	only	-	Jun	 3	0:00	1:00	D
+Rule	Zion	1956	only	-	Sep	30	3:00	0	S
+Rule	Zion	1957	only	-	Apr	29	2:00	1:00	D
+Rule	Zion	1957	only	-	Sep	22	0:00	0	S
+Rule	Zion	1974	only	-	Jul	 7	0:00	1:00	D
+Rule	Zion	1974	only	-	Oct	13	0:00	0	S
+Rule	Zion	1975	only	-	Apr	20	0:00	1:00	D
+Rule	Zion	1975	only	-	Aug	31	0:00	0	S
+Rule	Zion	1985	only	-	Apr	14	0:00	1:00	D
+Rule	Zion	1985	only	-	Sep	15	0:00	0	S
+Rule	Zion	1986	only	-	May	18	0:00	1:00	D
+Rule	Zion	1986	only	-	Sep	 7	0:00	0	S
+Rule	Zion	1987	only	-	Apr	15	0:00	1:00	D
+Rule	Zion	1987	only	-	Sep	13	0:00	0	S
+Rule	Zion	1988	only	-	Apr	 9	0:00	1:00	D
+Rule	Zion	1988	only	-	Sep	 3	0:00	0	S
+
+# From Ephraim Silverberg
+# (1997-03-04, 1998-03-16, 1998-12-28, 2000-01-17, 2000-07-25, 2004-12-22,
+# and 2005-02-17):
+
+# According to the Office of the Secretary General of the Ministry of
+# Interior, there is NO set rule for Daylight-Savings/Standard time changes.
+# One thing is entrenched in law, however: that there must be at least 150
+# days of daylight savings time annually.  From 1993-1998, the change to
+# daylight savings time was on a Friday morning from midnight IST to
+# 1 a.m IDT; up until 1998, the change back to standard time was on a
+# Saturday night from midnight daylight savings time to 11 p.m. standard
+# time.  1996 is an exception to this rule where the change back to standard
+# time took place on Sunday night instead of Saturday night to avoid
+# conflicts with the Jewish New Year.  In 1999, the change to
+# daylight savings time was still on a Friday morning but from
+# 2 a.m. IST to 3 a.m. IDT; furthermore, the change back to standard time
+# was also on a Friday morning from 2 a.m. IDT to 1 a.m. IST for
+# 1999 only.  In the year 2000, the change to daylight savings time was
+# similar to 1999, but although the change back will be on a Friday, it
+# will take place from 1 a.m. IDT to midnight IST.  Starting in 2001, all
+# changes to/from will take place at 1 a.m. old time, but now there is no
+# rule as to what day of the week it will take place in as the start date
+# (except in 2003) is the night after the Passover Seder (i.e. the eve
+# of the 16th of Nisan in the lunar Hebrew calendar) and the end date
+# (except in 2002) is three nights before Yom Kippur [Day of Atonement]
+# (the eve of the 7th of Tishrei in the lunar Hebrew calendar).
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Zion	1989	only	-	Apr	30	0:00	1:00	D
+Rule	Zion	1989	only	-	Sep	 3	0:00	0	S
+Rule	Zion	1990	only	-	Mar	25	0:00	1:00	D
+Rule	Zion	1990	only	-	Aug	26	0:00	0	S
+Rule	Zion	1991	only	-	Mar	24	0:00	1:00	D
+Rule	Zion	1991	only	-	Sep	 1	0:00	0	S
+Rule	Zion	1992	only	-	Mar	29	0:00	1:00	D
+Rule	Zion	1992	only	-	Sep	 6	0:00	0	S
+Rule	Zion	1993	only	-	Apr	 2	0:00	1:00	D
+Rule	Zion	1993	only	-	Sep	 5	0:00	0	S
+
+# The dates for 1994-1995 were obtained from Office of the Spokeswoman for the
+# Ministry of Interior, Jerusalem, Israel.  The spokeswoman can be reached by
+# calling the office directly at 972-2-6701447 or 972-2-6701448.
+
+# Rule	NAME    FROM    TO      TYPE    IN      ON      AT      SAVE    LETTER/S
+Rule	Zion	1994	only	-	Apr	 1	0:00	1:00	D
+Rule	Zion	1994	only	-	Aug	28	0:00	0	S
+Rule	Zion	1995	only	-	Mar	31	0:00	1:00	D
+Rule	Zion	1995	only	-	Sep	 3	0:00	0	S
+
+# The dates for 1996 were determined by the Minister of Interior of the
+# time, Haim Ramon.  The official announcement regarding 1996-1998
+# (with the dates for 1997-1998 no longer being relevant) can be viewed at:
+#
+#   ftp://ftp.cs.huji.ac.il/pub/tz/announcements/1996-1998.ramon.ps.gz
+#
+# The dates for 1997-1998 were altered by his successor, Rabbi Eli Suissa.
+#
+# The official announcements for the years 1997-1999 can be viewed at:
+#
+#   ftp://ftp.cs.huji.ac.il/pub/tz/announcements/YYYY.ps.gz
+#
+#       where YYYY is the relevant year.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Zion	1996	only	-	Mar	15	0:00	1:00	D
+Rule	Zion	1996	only	-	Sep	16	0:00	0	S
+Rule	Zion	1997	only	-	Mar	21	0:00	1:00	D
+Rule	Zion	1997	only	-	Sep	14	0:00	0	S
+Rule	Zion	1998	only	-	Mar	20	0:00	1:00	D
+Rule	Zion	1998	only	-	Sep	 6	0:00	0	S
+Rule	Zion	1999	only	-	Apr	 2	2:00	1:00	D
+Rule	Zion	1999	only	-	Sep	 3	2:00	0	S
+
+# The Knesset Interior Committee has changed the dates for 2000 for
+# the third time in just over a year and have set new dates for the
+# years 2001-2004 as well.
+#
+# The official announcement for the start date of 2000 can be viewed at:
+#
+#	ftp://ftp.cs.huji.ac.il/pub/tz/announcements/2000-start.ps.gz
+#
+# The official announcement for the end date of 2000 and the dates
+# for the years 2001-2004 can be viewed at:
+#
+#	ftp://ftp.cs.huji.ac.il/pub/tz/announcements/2000-2004.ps.gz
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Zion	2000	only	-	Apr	14	2:00	1:00	D
+Rule	Zion	2000	only	-	Oct	 6	1:00	0	S
+Rule	Zion	2001	only	-	Apr	 9	1:00	1:00	D
+Rule	Zion	2001	only	-	Sep	24	1:00	0	S
+Rule	Zion	2002	only	-	Mar	29	1:00	1:00	D
+Rule	Zion	2002	only	-	Oct	 7	1:00	0	S
+Rule	Zion	2003	only	-	Mar	28	1:00	1:00	D
+Rule	Zion	2003	only	-	Oct	 3	1:00	0	S
+Rule	Zion	2004	only	-	Apr	 7	1:00	1:00	D
+Rule	Zion	2004	only	-	Sep	22	1:00	0	S
+
+# The proposed law agreed upon by the Knesset Interior Committee on
+# 2005-02-14 is that, for 2005 and beyond, DST starts at 02:00 the
+# last Friday before April 2nd (i.e. the last Friday in March or April
+# 1st itself if it falls on a Friday) and ends at 02:00 on the Saturday
+# night _before_ the fast of Yom Kippur.
+#
+# Those who can read Hebrew can view the announcement at:
+#
+#	ftp://ftp.cs.huji.ac.il/pub/tz/announcements/2005+beyond.ps
+
+# From Paul Eggert (2005-02-22):
+# I used Ephraim Silverberg's dst-israel.el program
+# <ftp://ftp.cs.huji.ac.il/pub/tz/software/dst-israel.el> (2005-02-20)
+# along with Ed Reingold's cal-hebrew in GNU Emacs 21.4,
+# to generate the transitions in this list.
+# (I replaced "lastFri" with "Fri>=26" by hand.)
+# The spring transitions below all correspond to the following Rule:
+#
+# Rule	Zion	2005	max	-	Mar	Fri>=26	2:00	1:00	D
+#
+# but older zic implementations (e.g., Solaris 8) do not support
+# "Fri>=26" to mean April 1 in years like 2005, so for now we list the
+# springtime transitions explicitly.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Zion	2005	only	-	Apr	 1	2:00	1:00	D
+Rule	Zion	2005	only	-	Oct	 9	2:00	0	S
+Rule	Zion	2006	2010	-	Mar	Fri>=26	2:00	1:00	D
+Rule	Zion	2006	only	-	Oct	 1	2:00	0	S
+Rule	Zion	2007	only	-	Sep	16	2:00	0	S
+Rule	Zion	2008	only	-	Oct	 5	2:00	0	S
+Rule	Zion	2009	only	-	Sep	27	2:00	0	S
+Rule	Zion	2010	only	-	Sep	12	2:00	0	S
+Rule	Zion	2011	only	-	Apr	 1	2:00	1:00	D
+Rule	Zion	2011	only	-	Oct	 2	2:00	0	S
+Rule	Zion	2012	2015	-	Mar	Fri>=26	2:00	1:00	D
+Rule	Zion	2012	only	-	Sep	23	2:00	0	S
+Rule	Zion	2013	only	-	Sep	 8	2:00	0	S
+Rule	Zion	2014	only	-	Sep	28	2:00	0	S
+Rule	Zion	2015	only	-	Sep	20	2:00	0	S
+Rule	Zion	2016	only	-	Apr	 1	2:00	1:00	D
+Rule	Zion	2016	only	-	Oct	 9	2:00	0	S
+Rule	Zion	2017	2021	-	Mar	Fri>=26	2:00	1:00	D
+Rule	Zion	2017	only	-	Sep	24	2:00	0	S
+Rule	Zion	2018	only	-	Sep	16	2:00	0	S
+Rule	Zion	2019	only	-	Oct	 6	2:00	0	S
+Rule	Zion	2020	only	-	Sep	27	2:00	0	S
+Rule	Zion	2021	only	-	Sep	12	2:00	0	S
+Rule	Zion	2022	only	-	Apr	 1	2:00	1:00	D
+Rule	Zion	2022	only	-	Oct	 2	2:00	0	S
+Rule	Zion	2023	2032	-	Mar	Fri>=26	2:00	1:00	D
+Rule	Zion	2023	only	-	Sep	24	2:00	0	S
+Rule	Zion	2024	only	-	Oct	 6	2:00	0	S
+Rule	Zion	2025	only	-	Sep	28	2:00	0	S
+Rule	Zion	2026	only	-	Sep	20	2:00	0	S
+Rule	Zion	2027	only	-	Oct	10	2:00	0	S
+Rule	Zion	2028	only	-	Sep	24	2:00	0	S
+Rule	Zion	2029	only	-	Sep	16	2:00	0	S
+Rule	Zion	2030	only	-	Oct	 6	2:00	0	S
+Rule	Zion	2031	only	-	Sep	21	2:00	0	S
+Rule	Zion	2032	only	-	Sep	12	2:00	0	S
+Rule	Zion	2033	only	-	Apr	 1	2:00	1:00	D
+Rule	Zion	2033	only	-	Oct	 2	2:00	0	S
+Rule	Zion	2034	2037	-	Mar	Fri>=26	2:00	1:00	D
+Rule	Zion	2034	only	-	Sep	17	2:00	0	S
+Rule	Zion	2035	only	-	Oct	 7	2:00	0	S
+Rule	Zion	2036	only	-	Sep	28	2:00	0	S
+Rule	Zion	2037	only	-	Sep	13	2:00	0	S
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Jerusalem	2:20:56 -	LMT	1880
+			2:20:40	-	JMT	1918	# Jerusalem Mean Time?
+			2:00	Zion	I%sT
+
+
+
+###############################################################################
+
+# Japan
+
+# `9:00' and `JST' is from Guy Harris.
+
+# From Paul Eggert (1995-03-06):
+# Today's _Asahi Evening News_ (page 4) reports that Japan had
+# daylight saving between 1948 and 1951, but ``the system was discontinued
+# because the public believed it would lead to longer working hours.''
+
+# From Mayumi Negishi in the 2005-08-10 Japan Times
+# <http://www.japantimes.co.jp/cgi-bin/getarticle.pl5?nn20050810f2.htm>:
+# Occupation authorities imposed daylight-saving time on Japan on
+# [1948-05-01]....  But lack of prior debate and the execution of
+# daylight-saving time just three days after the bill was passed generated
+# deep hatred of the concept....  The Diet unceremoniously passed a bill to
+# dump the unpopular system in October 1951, less than a month after the San
+# Francisco Peace Treaty was signed.  (A government poll in 1951 showed 53%
+# of the Japanese wanted to scrap daylight-saving time, as opposed to 30% who
+# wanted to keep it.)
+
+# Shanks writes that daylight saving in Japan during those years was as follows:
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Japan	1948	only	-	May	Sun>=1	2:00	1:00	D
+Rule	Japan	1948	1951	-	Sep	Sat>=8	2:00	0	S
+Rule	Japan	1949	only	-	Apr	Sun>=1	2:00	1:00	D
+Rule	Japan	1950	1951	-	May	Sun>=1	2:00	1:00	D
+# but the only locations using it (for birth certificates, presumably, since
+# Shanks's audience is astrologers) were US military bases.  For now, assume
+# that for most purposes daylight-saving time was observed; otherwise, what
+# would have been the point of the 1951 poll?
+
+# From Hideyuki Suzuki (1998-11-09):
+# 'Tokyo' usually stands for the former location of Tokyo Astronomical
+# Observatory: E 139 44' 40".90 (9h 18m 58s.727), N 35 39' 16".0.
+# This data is from 'Rika Nenpyou (Chronological Scientific Tables) 1996'
+# edited by National Astronomical Observatory of Japan....
+# JST (Japan Standard Time) has been used since 1888-01-01 00:00 (JST).
+# The law is enacted on 1886-07-07.
+
+# From Hideyuki Suzuki (1998-11-16):
+# The ordinance No. 51 (1886) established "standard time" in Japan,
+# which stands for the time on E 135 degree.
+# In the ordinance No. 167 (1895), "standard time" was renamed to "central
+# standard time".  And the same ordinance also established "western standard
+# time", which stands for the time on E 120 degree....  But "western standard
+# time" was abolished in the ordinance No. 529 (1937).  In the ordinance No.
+# 167, there is no mention regarding for what place western standard time is
+# standard....
+#
+# I wrote "ordinance" above, but I don't know how to translate.
+# In Japanese it's "chokurei", which means ordinance from emperor.
+
+# Shanks claims JST in use since 1896, and that a few places (e.g. Ishigaki)
+# use +0800; go with Suzuki.  Guess that all ordinances took effect on Jan 1.
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Tokyo	9:18:59	-	LMT	1887 Dec 31 15:00u
+			9:00	-	JST	1896
+			9:00	-	CJT	1938
+			9:00	Japan	J%sT
+# Since 1938, all Japanese possessions have been like Asia/Tokyo.
+
+# Jordan
+#
+# From <a href="http://star.arabia.com/990701/JO9.html">
+# Jordan Week (1999-07-01) </a> via Steffen Thorsen (1999-09-09):
+# Clocks in Jordan were forwarded one hour on Wednesday at midnight,
+# in accordance with the government's decision to implement summer time
+# all year round.
+#
+# From <a href="http://star.arabia.com/990930/JO9.html">
+# Jordan Week (1999-09-30) </a> via Steffen Thorsen (1999-11-09):
+# Winter time starts today Thursday, 30 September. Clocks will be turned back
+# by one hour.  This is the latest government decision and it's final!
+# The decision was taken because of the increase in working hours in
+# government's departments from six to seven hours.
+#
+# From Paul Eggert (2005-11-22):
+# Starting 2003 transitions are from Steffen Thorsen's web site timeanddate.com.
+#
+# From Steffen Thorsen (2005-11-23):
+# For Jordan I have received multiple independent user reports every year
+# about DST end dates, as the end-rule is different every year.
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Jordan	1973	only	-	Jun	6	0:00	1:00	S
+Rule	Jordan	1973	1975	-	Oct	1	0:00	0	-
+Rule	Jordan	1974	1977	-	May	1	0:00	1:00	S
+Rule	Jordan	1976	only	-	Nov	1	0:00	0	-
+Rule	Jordan	1977	only	-	Oct	1	0:00	0	-
+Rule	Jordan	1978	only	-	Apr	30	0:00	1:00	S
+Rule	Jordan	1978	only	-	Sep	30	0:00	0	-
+Rule	Jordan	1985	only	-	Apr	1	0:00	1:00	S
+Rule	Jordan	1985	only	-	Oct	1	0:00	0	-
+Rule	Jordan	1986	1988	-	Apr	Fri>=1	0:00	1:00	S
+Rule	Jordan	1986	1990	-	Oct	Fri>=1	0:00	0	-
+Rule	Jordan	1989	only	-	May	8	0:00	1:00	S
+Rule	Jordan	1990	only	-	Apr	27	0:00	1:00	S
+Rule	Jordan	1991	only	-	Apr	17	0:00	1:00	S
+Rule	Jordan	1991	only	-	Sep	27	0:00	0	-
+Rule	Jordan	1992	only	-	Apr	10	0:00	1:00	S
+Rule	Jordan	1992	1993	-	Oct	Fri>=1	0:00	0	-
+Rule	Jordan	1993	1998	-	Apr	Fri>=1	0:00	1:00	S
+Rule	Jordan	1994	only	-	Sep	Fri>=15	0:00	0	-
+Rule	Jordan	1995	1998	-	Sep	Fri>=15	0:00s	0	-
+Rule	Jordan	1999	only	-	Jul	 1	0:00s	1:00	S
+Rule	Jordan	1999	2002	-	Sep	lastThu	0:00s	0	-
+Rule	Jordan	2000	max	-	Mar	lastThu	0:00s	1:00	S
+Rule	Jordan	2003	only	-	Oct	24	0:00s	0	-
+Rule	Jordan	2004	only	-	Oct	15	0:00s	0	-
+Rule	Jordan	2005	max	-	Sep	lastFri	0:00s	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Amman	2:23:44 -	LMT	1931
+			2:00	Jordan	EE%sT
+
+
+# Kazakhstan
+
+# From Paul Eggert (1996-11-22):
+# Andrew Evtichov (1996-04-13) writes that Kazakhstan
+# stayed in sync with Moscow after 1990, and that Aqtobe (formerly Aktyubinsk)
+# and Aqtau (formerly Shevchenko) are the largest cities in their zones.
+# Guess that Aqtau and Aqtobe diverged in 1995, since that's the first time
+# IATA SSIM mentions a third time zone in Kazakhstan.
+
+# From Paul Eggert (2001-10-18):
+# German Iofis, ELSI, Almaty (2001-10-09) reports that Kazakhstan uses
+# RussiaAsia rules, instead of switching at 00:00 as the IATA has it.
+# Go with Shanks, who has them always using RussiaAsia rules.
+# Also go with the following claims of Shanks:
+#
+# - Kazakhstan did not observe DST in 1991.
+# - Qyzylorda switched from +5:00 to +6:00 on 1992-01-19 02:00.
+# - Oral switched from +5:00 to +4:00 in spring 1989.
+
+# <a href="http://www.kazsociety.org.uk/news/2005/03/30.htm">
+# From Kazakhstan Embassy's News Bulletin #11 (2005-03-21):
+# </a>
+# The Government of Kazakhstan passed a resolution March 15 abolishing
+# daylight saving time citing lack of economic benefits and health
+# complications coupled with a decrease in productivity.
+#
+# From Branislav Kojic (in Astana) via Gwillim Law (2005-06-28):
+# ... what happened was that the former Kazakhstan Eastern time zone
+# was "blended" with the Central zone.  Therefore, Kazakhstan now has
+# two time zones, and difference between them is one hour.  The zone
+# closer to UTC is the former Western zone (probably still called the
+# same), encompassing four provinces in the west: Aqtobe, Atyrau,
+# Mangghystau, and West Kazakhstan.  The other zone encompasses
+# everything else....  I guess that would make Kazakhstan time zones
+# de jure UTC+5 and UTC+6 respectively.
+
+#
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+#
+# Almaty (formerly Alma-Ata), representing most locations in Kazakhstan
+Zone	Asia/Almaty	5:07:48 -	LMT	1924 May  2 # or Alma-Ata
+			5:00	-	ALMT	1930 Jun 21 # Alma-Ata Time
+			6:00 RussiaAsia ALM%sT	1991
+			6:00	-	ALMT	1992
+			6:00 RussiaAsia	ALM%sT	2005 Mar 15
+			6:00	-	ALMT
+# Qyzylorda (aka Kyzylorda, Kizilorda, Kzyl-Orda, etc.)
+Zone	Asia/Qyzylorda	4:21:52 -	LMT	1924 May  2
+			4:00	-	KIZT	1930 Jun 21 # Kizilorda Time
+			5:00	-	KIZT	1981 Apr  1
+			5:00	1:00	KIZST	1981 Oct  1
+			6:00	-	KIZT	1982 Apr  1
+			5:00 RussiaAsia	KIZ%sT	1991
+			5:00	-	KIZT	1991 Dec 16 # independence
+			5:00	-	QYZT	1992 Jan 19 2:00
+			6:00 RussiaAsia	QYZ%sT	2005 Mar 15
+			6:00	-	QYZT
+# Aqtobe (aka Aktobe, formerly Akt'ubinsk)
+Zone	Asia/Aqtobe	3:48:40	-	LMT	1924 May  2
+			4:00	-	AKTT	1930 Jun 21 # Aktyubinsk Time
+			5:00	-	AKTT	1981 Apr  1
+			5:00	1:00	AKTST	1981 Oct  1
+			6:00	-	AKTT	1982 Apr  1
+			5:00 RussiaAsia	AKT%sT	1991
+			5:00	-	AKTT	1991 Dec 16 # independence
+			5:00 RussiaAsia	AQT%sT	2005 Mar 15 # Aqtobe Time
+			5:00	-	AQTT
+# Mangghystau
+# Aqtau was not founded until 1963, but it represents an inhabited region,
+# so include time stamps before 1963.
+Zone	Asia/Aqtau	3:21:04	-	LMT	1924 May  2
+			4:00	-	FORT	1930 Jun 21 # Fort Shevchenko T
+			5:00	-	FORT	1963
+			5:00	-	SHET	1981 Oct  1 # Shevchenko Time
+			6:00	-	SHET	1982 Apr  1
+			5:00 RussiaAsia	SHE%sT	1991
+			5:00	-	SHET	1991 Dec 16 # independence
+			5:00 RussiaAsia	AQT%sT	1995 Mar lastSun 2:00 # Aqtau Time
+			4:00 RussiaAsia	AQT%sT	2005 Mar 15
+			5:00	-	AQTT
+# West Kazakhstan
+Zone	Asia/Oral	3:25:24	-	LMT	1924 May  2 # or Ural'sk
+			4:00	-	URAT	1930 Jun 21 # Ural'sk time
+			5:00	-	URAT	1981 Apr  1
+			5:00	1:00	URAST	1981 Oct  1
+			6:00	-	URAT	1982 Apr  1
+			5:00 RussiaAsia	URA%sT	1989 Mar 26 2:00
+			4:00 RussiaAsia	URA%sT	1991
+			4:00	-	URAT	1991 Dec 16 # independence
+			4:00 RussiaAsia	ORA%sT	2005 Mar 15 # Oral Time
+			5:00	-	ORAT
+
+# Kyrgyzstan (Kirgizstan)
+# Transitions through 1991 are from Shanks.
+
+# From Paul Eggert (2005-08-15):
+# According to an article dated today in the Kyrgyzstan Development Gateway
+# <http://eng.gateway.kg/cgi-bin/page.pl?id=1&story_name=doc9979.shtml>
+# Kyrgyzstan is canceling the daylight saving time system.  I take the article
+# to mean that they will leave their clocks at 6 hours ahead of UTC.
+# From Malik Abdugaliev (2005-09-21):
+# Our government cancels daylight saving time 6th of August 2005.
+# From 2005-08-12 our GMT-offset is +6, w/o any daylight saving.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Kyrgyz	1992	1996	-	Apr	Sun>=7	0:00s	1:00	S
+Rule	Kyrgyz	1992	1996	-	Sep	lastSun	0:00	0	-
+Rule	Kyrgyz	1997	2005	-	Mar	lastSun	2:30	1:00	S
+Rule	Kyrgyz	1997	2004	-	Oct	lastSun	2:30	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Bishkek	4:58:24 -	LMT	1924 May  2
+			5:00	-	FRUT	1930 Jun 21 # Frunze Time
+			6:00 RussiaAsia FRU%sT	1991 Mar 31 2:00s
+			5:00	1:00	FRUST	1991 Aug 31 2:00 # independence
+			5:00	Kyrgyz	KG%sT	2005 Aug 12    # Kyrgyzstan Time
+			6:00	-	KGT
+
+###############################################################################
+
+# Korea (North and South)
+
+# From Guy Harris:
+# According to someone at the Korean Times in San Francisco,
+# Daylight Savings Time was not observed until 1987.  He did not know
+# at what time of day DST starts or ends.
+
+# From Shanks:
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	ROK	1960	only	-	May	15	0:00	1:00	D
+Rule	ROK	1960	only	-	Sep	13	0:00	0	S
+Rule	ROK	1987	1988	-	May	Sun<=14	0:00	1:00	D
+Rule	ROK	1987	1988	-	Oct	Sun<=14	0:00	0	S
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Seoul	8:27:52	-	LMT	1890
+			8:30	-	KST	1904 Dec
+			9:00	-	KST	1928
+			8:30	-	KST	1932
+			9:00	-	KST	1954 Mar 21
+			8:00	ROK	K%sT	1961 Aug 10
+			8:30	-	KST	1968 Oct
+			9:00	ROK	K%sT
+Zone	Asia/Pyongyang	8:23:00 -	LMT	1890
+			8:30	-	KST	1904 Dec
+			9:00	-	KST	1928
+			8:30	-	KST	1932
+			9:00	-	KST	1954 Mar 21
+			8:00	-	KST	1961 Aug 10
+			9:00	-	KST
+
+###############################################################################
+
+# Kuwait
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Kuwait	3:11:56 -	LMT	1950
+			3:00	-	AST
+
+# Laos
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Vientiane	6:50:24 -	LMT	1906 Jun  9 # or Viangchan
+			7:06:20	-	SMT	1911 Mar 11 0:01 # Saigon MT?
+			7:00	-	ICT	1912 May
+			8:00	-	ICT	1931 May
+			7:00	-	ICT
+
+# Lebanon
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Lebanon	1920	only	-	Mar	28	0:00	1:00	S
+Rule	Lebanon	1920	only	-	Oct	25	0:00	0	-
+Rule	Lebanon	1921	only	-	Apr	3	0:00	1:00	S
+Rule	Lebanon	1921	only	-	Oct	3	0:00	0	-
+Rule	Lebanon	1922	only	-	Mar	26	0:00	1:00	S
+Rule	Lebanon	1922	only	-	Oct	8	0:00	0	-
+Rule	Lebanon	1923	only	-	Apr	22	0:00	1:00	S
+Rule	Lebanon	1923	only	-	Sep	16	0:00	0	-
+Rule	Lebanon	1957	1961	-	May	1	0:00	1:00	S
+Rule	Lebanon	1957	1961	-	Oct	1	0:00	0	-
+Rule	Lebanon	1972	only	-	Jun	22	0:00	1:00	S
+Rule	Lebanon	1972	1977	-	Oct	1	0:00	0	-
+Rule	Lebanon	1973	1977	-	May	1	0:00	1:00	S
+Rule	Lebanon	1978	only	-	Apr	30	0:00	1:00	S
+Rule	Lebanon	1978	only	-	Sep	30	0:00	0	-
+Rule	Lebanon	1984	1987	-	May	1	0:00	1:00	S
+Rule	Lebanon	1984	1991	-	Oct	16	0:00	0	-
+Rule	Lebanon	1988	only	-	Jun	1	0:00	1:00	S
+Rule	Lebanon	1989	only	-	May	10	0:00	1:00	S
+Rule	Lebanon	1990	1992	-	May	1	0:00	1:00	S
+Rule	Lebanon	1992	only	-	Oct	4	0:00	0	-
+Rule	Lebanon	1993	max	-	Mar	lastSun	0:00	1:00	S
+Rule	Lebanon	1993	1998	-	Sep	lastSun	0:00	0	-
+Rule	Lebanon	1999	max	-	Oct	lastSun	0:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Beirut	2:22:00 -	LMT	1880
+			2:00	Lebanon	EE%sT
+
+# Malaysia
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	NBorneo	1935	1941	-	Sep	14	0:00	0:20	TS # one-Third Summer
+Rule	NBorneo	1935	1941	-	Dec	14	0:00	0	-
+#
+# peninsular Malaysia
+# The data here are taken from Mok Ly Yng (2003-10-30)
+# <http://www.math.nus.edu.sg/aslaksen/teaching/timezone.html>.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Asia/Kuala_Lumpur	6:46:46 -	LMT	1901 Jan  1
+			6:55:25	-	SMT	1905 Jun  1 # Singapore M.T.
+			7:00	-	MALT	1933 Jan  1 # Malaya Time
+			7:00	0:20	MALST	1936 Jan  1
+			7:20	-	MALT	1941 Sep  1
+			7:30	-	MALT	1942 Feb 16
+			9:00	-	JST	1945 Sep 12
+			7:30	-	MALT	1982 Jan  1
+			8:00	-	MYT	# Malaysia Time
+# Sabah & Sarawak
+# From Paul Eggert (2003-11-01):
+# The data here are mostly from Shanks, but the 1942, 1945 and 1982
+# transition dates are from Mok Ly Yng.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Asia/Kuching	7:21:20	-	LMT	1926 Mar
+			7:30	-	BORT	1933	# Borneo Time
+			8:00	NBorneo	BOR%sT	1942 Feb 16
+			9:00	-	JST	1945 Sep 12
+			8:00	-	BORT	1982 Jan  1
+			8:00	-	MYT
+
+# Maldives
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Indian/Maldives	4:54:00 -	LMT	1880	# Male
+			4:54:00	-	MMT	1960	# Male Mean Time
+			5:00	-	MVT		# Maldives Time
+
+# Mongolia
+
+# Shanks says that Mongolia has three time zones, but usno1995 and the CIA map
+# Standard Time Zones of the World (1997-01)
+# both say that it has just one.
+
+# From Oscar van Vlijmen (1999-12-11):
+# <a href="http://www.mongoliatourism.gov.mn/general.htm">
+# General Information Mongolia
+# </a> (1999-09)
+# "Time: Mongolia has two time zones. Three westernmost provinces of
+# Bayan-Ulgii, Uvs, and Hovd are one hour earlier than the capital city, and
+# the rest of the country follows the Ulaanbaatar time, which is UTC/GMT plus
+# eight hours."
+
+# From Rives McDow (1999-12-13):
+# Mongolia discontinued the use of daylight savings time in 1999; 1998
+# being the last year it was implemented.  The dates of implementation I am
+# unsure of, but most probably it was similar to Russia, except for the time
+# of implementation may have been different....
+# Some maps in the past have indicated that there was an additional time
+# zone in the eastern part of Mongolia, including the provinces of Dornod,
+# Suhbaatar, and possibly Khentij.
+
+# From Paul Eggert (1999-12-15):
+# Naming and spelling is tricky in Mongolia.
+# We'll use Hovd (also spelled Chovd and Khovd) to represent the west zone;
+# the capital of the Hovd province is sometimes called Hovd, sometimes Dund-Us,
+# and sometimes Jirgalanta (with variant spellings), but the name Hovd
+# is good enough for our purposes.
+
+# From Rives McDow (2001-05-13):
+# In addition to Mongolia starting daylight savings as reported earlier
+# (adopted DST on 2001-04-27 02:00 local time, ending 2001-09-28),
+# there are three time zones.
+#
+# Provinces [at 7:00]: Bayan-ulgii, Uvs, Khovd, Zavkhan, Govi-Altai
+# Provinces [at 8:00]: Khovsgol, Bulgan, Arkhangai, Khentii, Tov,
+#	Bayankhongor, Ovorkhangai, Dundgovi, Dornogovi, Omnogovi
+# Provinces [at 9:00]: Dornod, Sukhbaatar
+#
+# [The province of Selenge is omitted from the above lists.]
+
+# From Ganbold Ts., Ulaanbaatar (2004-04-17):
+# Daylight saving occurs at 02:00 local time last Saturday of March.
+# It will change back to normal at 02:00 local time last Saturday of
+# September.... As I remember this rule was changed in 2001.
+#
+# From Paul Eggert (2004-04-17):
+# For now, assume Rives McDow's informant got confused about Friday vs
+# Saturday, and that his 2001 dates should have 1 added to them.
+
+# From Paul Eggert (2005-07-26):
+# We have wildly conflicting information about Mongolia's time zones.
+# Bill Bonnet (2005-05-19) reports that the US Embassy in Ulaanbaatar says
+# there is only one time zone and that DST is observed, citing Microsoft
+# Windows XP as the source.  Risto Nykanen (2005-05-16) reports that
+# travelmongolia.org says there are two time zones (UTC+7, UTC+8) with no DST.
+# Oscar van Vlijmen (2005-05-20) reports that the Mongolian Embassy in
+# Washington, DC says there are two time zones, with DST observed.
+# He also found
+# <http://ubpost.mongolnews.mn/index.php?subaction=showcomments&id=1111634894&archive=&start_from=&ucat=1&>
+# which also says that there is DST, and which has a comment by "Toddius"
+# (2005-03-31 06:05 +0700) saying "Mongolia actually has 3.5 time zones.
+# The West (OLGII) is +7 GMT, most of the country is ULAT is +8 GMT
+# and some Eastern provinces are +9 GMT but Sukhbaatar Aimag is SUHK +8.5 GMT.
+# The SUKH timezone is new this year, it is one of the few things the
+# parliament passed during the tumultuous winter session."
+# For now, let's ignore this information, until we have more confirmation.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Mongol	1983	1984	-	Apr	1	0:00	1:00	S
+Rule	Mongol	1983	only	-	Oct	1	0:00	0	-
+# IATA SSIM says 1990s switches occurred at 00:00, but Shanks (1995) lists
+# them at 02:00s, and McDow says the 2001 switches also occurred at 02:00.
+# Also, IATA SSIM (1996-09) says 1996-10-25.  Go with Shanks through 1998.
+Rule	Mongol	1985	1998	-	Mar	lastSun	2:00s	1:00	S
+Rule	Mongol	1984	1998	-	Sep	lastSun	2:00s	0	-
+# IATA SSIM (1999-09) says Mongolia no longer observes DST.
+Rule	Mongol	2001	only	-	Apr	lastSat	2:00	1:00	S
+Rule	Mongol	2001	max	-	Sep	lastSat	2:00	0	-
+Rule	Mongol	2002	max	-	Mar	lastSat	2:00	1:00	S
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+# Hovd, a.k.a. Chovd, Dund-Us, Dzhargalant, Khovd, Jirgalanta
+Zone	Asia/Hovd	6:06:36 -	LMT	1905 Aug
+			6:00	-	HOVT	1978	# Hovd Time
+			7:00	Mongol	HOV%sT
+# Ulaanbaatar, a.k.a. Ulan Bataar, Ulan Bator, Urga
+Zone	Asia/Ulaanbaatar 7:07:32 -	LMT	1905 Aug
+			7:00	-	ULAT	1978	# Ulaanbaatar Time
+			8:00	Mongol	ULA%sT
+# Choibalsan, a.k.a. Bajan Tuemen, Bajan Tumen, Chojbalsan,
+# Choybalsan, Sanbejse, Tchoibalsan
+Zone	Asia/Choibalsan	7:38:00 -	LMT	1905 Aug
+			7:00	-	ULAT	1978
+			8:00	-	ULAT	1983 Apr
+			9:00	Mongol	CHO%sT	# Choibalsan Time
+
+# Nepal
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Katmandu	5:41:16 -	LMT	1920
+			5:30	-	IST	1986
+			5:45	-	NPT	# Nepal Time
+
+# Oman
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Muscat	3:54:20 -	LMT	1920
+			4:00	-	GST
+
+# Pakistan
+
+# From Rives McDow (2002-03-13):
+# I have been advised that Pakistan has decided to adopt dst on a
+# TRIAL basis for one year, starting 00:01 local time on April 7, 2002
+# and ending at 00:01 local time October 6, 2002.  This is what I was
+# told, but I believe that the actual time of change may be 00:00; the
+# 00:01 was to make it clear which day it was on.
+
+# From Paul Eggert (2002-03-15):
+# Jesper Norgaard found this URL:
+# http://www.pak.gov.pk/public/news/app/app06_dec.htm
+# (dated 2001-12-06) which says that the Cabinet adopted a scheme "to
+# advance the clocks by one hour on the night between the first
+# Saturday and Sunday of April and revert to the original position on
+# 15th October each year".  This agrees with McDow's 04-07 at 00:00,
+# but disagrees about the October transition, and makes it sound like
+# it's not on a trial basis.  Also, the "between the first Saturday
+# and Sunday of April" phrase, if taken literally, means that the
+# transition takes place at 00:00 on the first Sunday on or after 04-02.
+
+# From Paul Eggert (2003-02-09):
+# DAWN <http://www.dawn.com/2002/10/06/top13.htm> reported on 2002-10-05
+# that 2002 DST ended that day at midnight.  Go with McDow for now.
+
+# From Steffen Thorsen (2003-03-14):
+# According to http://www.dawn.com/2003/03/07/top15.htm
+# there will be no DST in Pakistan this year:
+#
+# ISLAMABAD, March 6: Information and Media Development Minister Sheikh
+# Rashid Ahmed on Thursday said the cabinet had reversed a previous
+# decision to advance clocks by one hour in summer and put them back by
+# one hour in winter with the aim of saving light hours and energy.
+#
+# The minister told a news conference that the experiment had rather
+# shown 8 per cent higher consumption of electricity.
+
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule Pakistan	2002	only	-	Apr	Sun>=2	0:01	1:00	S
+Rule Pakistan	2002	only	-	Oct	Sun>=2	0:01	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Karachi	4:28:12 -	LMT	1907
+			5:30	-	IST	1942 Sep
+			5:30	1:00	IST	1945 Oct 15
+			5:30	-	IST	1951 Sep 30
+			5:00	-	KART	1971 Mar 26 # Karachi Time
+			5:00 Pakistan	PK%sT	# Pakistan Time
+
+# Palestine
+
+# From Amos Shapir (1998-02-15):
+#
+# From 1917 until 1948-05-15, all of Palestine, including the parts now
+# known as the Gaza Strip and the West Bank, was under British rule.
+# Therefore the rules given for Israel for that period, apply there too...
+#
+# The Gaza Strip was under Egyptian rule between 1948-05-15 until 1967-06-05
+# (except a short occupation by Israel from 1956-11 till 1957-03, but no
+# time zone was affected then).  It was never formally annexed to Egypt,
+# though.
+#
+# The rest of Palestine was under Jordanian rule at that time, formally
+# annexed in 1950 as the West Bank (and the word "Trans" was dropped from
+# the country's previous name of "the Hashemite Kingdom of the
+# Trans-Jordan").  So the rules for Jordan for that time apply.  Major
+# towns in that area are Nablus (Shchem), El-Halil (Hebron), Ramallah, and
+# East Jerusalem.
+#
+# Both areas were occupied by Israel in June 1967, but not annexed (except
+# for East Jerusalem).  They were on Israel time since then; there might
+# have been a Military Governor's order about time zones, but I'm not aware
+# of any (such orders may have been issued semi-annually whenever summer
+# time was in effect, but maybe the legal aspect of time was just neglected).
+#
+# The Palestinian Authority was established in 1993, and got hold of most
+# towns in the West Bank and Gaza by 1995.  I know that in order to
+# demonstrate...independence, they have been switching to
+# summer time and back on a different schedule than Israel's, but I don't
+# know when this was started, or what algorithm is used (most likely the
+# Jordanian one).
+#
+# To summarize, the table should probably look something like that:
+#
+# Area \ when | 1918-1947 | 1948-1967 | 1967-1995 | 1996-
+# ------------+-----------+-----------+-----------+-----------
+# Israel      | Zion      | Zion      | Zion      | Zion
+# West bank   | Zion      | Jordan    | Zion      | Jordan
+# Gaza        | Zion      | Egypt     | Zion      | Jordan
+#
+# I guess more info may be available from the PA's web page (if/when they
+# have one).
+
+# From Paul Eggert (1998-02-25):
+# Shanks writes that Gaza did not observe DST until 1957, but we'll go
+# with Shapir and assume that it observed DST from 1940 through 1947,
+# and that it used Jordanian rules starting in 1996.
+# We don't yet need a separate entry for the West Bank, since
+# the only differences between it and Gaza that we know about
+# occurred before our cutoff date of 1970.
+# However, as we get more information, we may need to add entries
+# for parts of the West Bank as they transitioned from Israel's rules
+# to Palestine's rules.  If you have more info about this, please
+# send it to tz@elsie.nci.nih.gov for incorporation into future editions.
+
+# From IINS News Service - Israel - 1998-03-23 10:38:07 Israel time,
+# forwarded by Ephraim Silverberg:
+#
+# Despite the fact that Israel changed over to daylight savings time
+# last week, the PLO Authority (PA) has decided not to turn its clocks
+# one-hour forward at this time.  As a sign of independence from Israeli rule,
+# the PA has decided to implement DST in April.
+
+# From Paul Eggert (1999-09-20):
+# Daoud Kuttab writes in
+# <a href="http://www.jpost.com/com/Archive/22.Apr.1999/Opinion/Article-2.html">
+# Holiday havoc
+# </a> (Jerusalem Post, 1999-04-22) that
+# the Palestinian National Authority changed to DST on 1999-04-15.
+# I vaguely recall that they switch back in October (sorry, forgot the source).
+# For now, let's assume that the spring switch was at 24:00,
+# and that they switch at 0:00 on the 3rd Fridays of April and October.
+
+# From Paul Eggert (2005-11-22):
+# Starting 2004 transitions are from Steffen Thorsen's web site timeanddate.com.
+
+# From Steffen Thorsen (2005-11-23):
+# A user from Gaza reported that Gaza made the change early because of
+# the Ramadan.  Next year Ramadan will be even earlier, so I think
+# there is a good chance next year's end date will be around two weeks
+# earlier--the same goes for Jordan.
+
+# The rules for Egypt are stolen from the `africa' file.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule EgyptAsia	1957	only	-	May	10	0:00	1:00	S
+Rule EgyptAsia	1957	1958	-	Oct	 1	0:00	0	-
+Rule EgyptAsia	1958	only	-	May	 1	0:00	1:00	S
+Rule EgyptAsia	1959	1967	-	May	 1	1:00	1:00	S
+Rule EgyptAsia	1959	1965	-	Sep	30	3:00	0	-
+Rule EgyptAsia	1966	only	-	Oct	 1	3:00	0	-
+
+Rule Palestine	1999	max	-	Apr	Fri>=15	0:00	1:00	S
+Rule Palestine	1999	2003	-	Oct	Fri>=15	0:00	0	-
+Rule Palestine	2004	only	-	Oct	 1	1:00	0	-
+Rule Palestine	2005	max	-	Oct	 4	2:00	0	-
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Gaza	2:17:52	-	LMT	1900 Oct
+			2:00	Zion	EET	1948 May 15
+			2:00 EgyptAsia	EE%sT	1967 Jun  5
+			2:00	Zion	I%sT	1996
+			2:00	Jordan	EE%sT	1999
+			2:00 Palestine	EE%sT
+
+# Paracel Is
+# no information
+
+# Philippines
+# On 1844-08-16, Narciso Claveria, governor-general of the
+# Philippines, issued a proclamation announcing that 1844-12-30 was to
+# be immediately followed by 1845-01-01.  Robert H. van Gent has a
+# transcript of the decree in <http://www.phys.uu.nl/~vgent/idl/idl.htm>.
+# The rest of this data is from Shanks.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Phil	1936	only	-	Nov	1	0:00	1:00	S
+Rule	Phil	1937	only	-	Feb	1	0:00	0	-
+Rule	Phil	1954	only	-	Apr	12	0:00	1:00	S
+Rule	Phil	1954	only	-	Jul	1	0:00	0	-
+Rule	Phil	1978	only	-	Mar	22	0:00	1:00	S
+Rule	Phil	1978	only	-	Sep	21	0:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Manila	-15:56:00 -	LMT	1844 Dec 31
+			8:04:00 -	LMT	1899 May 11
+			8:00	Phil	PH%sT	1942 May
+			9:00	-	JST	1944 Nov
+			8:00	Phil	PH%sT
+
+# Qatar
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Qatar	3:26:08 -	LMT	1920	# Al Dawhah / Doha
+			4:00	-	GST	1972 Jun
+			3:00	-	AST
+
+# Saudi Arabia
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Riyadh	3:06:52 -	LMT	1950
+			3:00	-	AST
+
+# Singapore
+# The data here are taken from Mok Ly Yng (2003-10-30)
+# <http://www.math.nus.edu.sg/aslaksen/teaching/timezone.html>.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Singapore	6:55:25 -	LMT	1901 Jan  1
+			6:55:25	-	SMT	1905 Jun  1 # Singapore M.T.
+			7:00	-	MALT	1933 Jan  1 # Malaya Time
+			7:00	0:20	MALST	1936 Jan  1
+			7:20	-	MALT	1941 Sep  1
+			7:30	-	MALT	1942 Feb 16
+			9:00	-	JST	1945 Sep 12
+			7:30	-	MALT	1965 Aug  9 # independence
+			7:30	-	SGT	1982 Jan  1 # Singapore Time
+			8:00	-	SGT
+
+# Spratly Is
+# no information
+
+# Sri Lanka
+# From Paul Eggert (1996-09-03):
+# "Sri Lanka advances clock by an hour to avoid blackout"
+# (www.virtual-pc.com/lankaweb/news/items/240596-2.html, 1996-05-24,
+# no longer available as of 1999-08-17)
+# reported ``the country's standard time will be put forward by one hour at
+# midnight Friday (1830 GMT) `in the light of the present power crisis'.''
+#
+# From Dharmasiri Senanayake, Sri Lanka Media Minister (1996-10-24), as quoted
+# by Shamindra in
+# <a href="news:54rka5$m5h@mtinsc01-mgt.ops.worldnet.att.net">
+# Daily News - Hot News Section (1996-10-26)
+# </a>:
+# With effect from 12.30 a.m. on 26th October 1996
+# Sri Lanka will be six (06) hours ahead of GMT.
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Colombo	5:19:24 -	LMT	1880
+			5:19:32	-	MMT	1906	# Moratuwa Mean Time
+			5:30	-	IST	1942 Jan  5
+			5:30	0:30	IHST	1942 Sep
+			5:30	1:00	IST	1945 Oct 16 2:00
+			5:30	-	IST	1996 May 25 0:00
+			6:30	-	LKT	1996 Oct 26 0:30
+			6:00	-	LKT
+
+# Syria
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Syria	1920	1923	-	Apr	Sun>=15	2:00	1:00	S
+Rule	Syria	1920	1923	-	Oct	Sun>=1	2:00	0	-
+Rule	Syria	1962	only	-	Apr	29	2:00	1:00	S
+Rule	Syria	1962	only	-	Oct	1	2:00	0	-
+Rule	Syria	1963	1965	-	May	1	2:00	1:00	S
+Rule	Syria	1963	only	-	Sep	30	2:00	0	-
+Rule	Syria	1964	only	-	Oct	1	2:00	0	-
+Rule	Syria	1965	only	-	Sep	30	2:00	0	-
+Rule	Syria	1966	only	-	Apr	24	2:00	1:00	S
+Rule	Syria	1966	1976	-	Oct	1	2:00	0	-
+Rule	Syria	1967	1978	-	May	1	2:00	1:00	S
+Rule	Syria	1977	1978	-	Sep	1	2:00	0	-
+Rule	Syria	1983	1984	-	Apr	9	2:00	1:00	S
+Rule	Syria	1983	1984	-	Oct	1	2:00	0	-
+Rule	Syria	1986	only	-	Feb	16	2:00	1:00	S
+Rule	Syria	1986	only	-	Oct	9	2:00	0	-
+Rule	Syria	1987	only	-	Mar	1	2:00	1:00	S
+Rule	Syria	1987	1988	-	Oct	31	2:00	0	-
+Rule	Syria	1988	only	-	Mar	15	2:00	1:00	S
+Rule	Syria	1989	only	-	Mar	31	2:00	1:00	S
+Rule	Syria	1989	only	-	Oct	1	2:00	0	-
+Rule	Syria	1990	only	-	Apr	1	2:00	1:00	S
+Rule	Syria	1990	only	-	Sep	30	2:00	0	-
+Rule	Syria	1991	only	-	Apr	 1	0:00	1:00	S
+Rule	Syria	1991	1992	-	Oct	 1	0:00	0	-
+Rule	Syria	1992	only	-	Apr	 8	0:00	1:00	S
+Rule	Syria	1993	only	-	Mar	26	0:00	1:00	S
+Rule	Syria	1993	only	-	Sep	25	0:00	0	-
+# IATA SSIM (1998-02) says 1998-04-02;
+# (1998-09) says 1999-03-29 and 1999-09-29; (1999-02) says 1999-04-02,
+# 2000-04-02, and 2001-04-02; (1999-09) says 2000-03-31 and 2001-03-31;
+# ignore all these claims and go with Shanks.
+Rule	Syria	1994	1996	-	Apr	 1	0:00	1:00	S
+Rule	Syria	1994	max	-	Oct	 1	0:00	0	-
+Rule	Syria	1997	1998	-	Mar	lastMon	0:00	1:00	S
+Rule	Syria	1999	max	-	Apr	 1	0:00	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Damascus	2:25:12 -	LMT	1920	# Dimashq
+			2:00	Syria	EE%sT
+
+# Tajikistan
+# From Shanks.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Dushanbe	4:35:12 -	LMT	1924 May  2
+			5:00	-	DUST	1930 Jun 21 # Dushanbe Time
+			6:00 RussiaAsia DUS%sT	1991 Mar 31 2:00s
+			5:00	1:00	DUSST	1991 Sep  9 2:00s
+			5:00	-	TJT		    # Tajikistan Time
+
+# Thailand
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Bangkok	6:42:04	-	LMT	1880
+			6:42:04	-	BMT	1920 Apr # Bangkok Mean Time
+			7:00	-	ICT
+
+# Turkmenistan
+# From Shanks.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Ashgabat	3:53:32 -	LMT	1924 May  2 # or Ashkhabad
+			4:00	-	ASHT	1930 Jun 21 # Ashkhabad Time
+			5:00 RussiaAsia	ASH%sT	1991 Mar 31 2:00
+			4:00 RussiaAsia	ASH%sT	1991 Oct 27 # independence
+			4:00 RussiaAsia TM%sT	1992 Jan 19 2:00
+			5:00	-	TMT
+
+# United Arab Emirates
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Dubai	3:41:12 -	LMT	1920
+			4:00	-	GST
+
+# Uzbekistan
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Samarkand	4:27:12 -	LMT	1924 May  2
+			4:00	-	SAMT	1930 Jun 21 # Samarkand Time
+			5:00	-	SAMT	1981 Apr  1
+			5:00	1:00	SAMST	1981 Oct  1
+			6:00 RussiaAsia TAS%sT	1991 Mar 31 2:00 # Tashkent Time
+			5:00 RussiaAsia	TAS%sT	1991 Sep  1 # independence
+			5:00 RussiaAsia	UZ%sT	1992
+			5:00 RussiaAsia	UZ%sT	1993
+			5:00	-	UZT
+Zone	Asia/Tashkent	4:37:12 -	LMT	1924 May  2
+			5:00	-	TAST	1930 Jun 21 # Tashkent Time
+			6:00 RussiaAsia TAS%sT	1991 Mar 31 2:00s
+			5:00 RussiaAsia	TAS%sT	1991 Sep  1 # independence
+			5:00 RussiaAsia	UZ%sT	1992
+			5:00 RussiaAsia	UZ%sT	1993
+			5:00	-	UZT
+
+# Vietnam
+# From Paul Eggert (1993-11-18):
+# Saigon's official name is Thanh-Pho Ho Chi Minh, but it's too long.
+# We'll stick with the traditional name for now.
+# From Shanks:
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Saigon	7:06:40 -	LMT	1906 Jun  9
+			7:06:20	-	SMT	1911 Mar 11 0:01 # Saigon MT?
+			7:00	-	ICT	1912 May
+			8:00	-	ICT	1931 May
+			7:00	-	ICT
+
+# Yemen
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Asia/Aden	3:00:48	-	LMT	1950
+			3:00	-	AST
diff --git a/JodaTime/src/java/org/joda/time/tz/src/australasia b/JodaTime/src/java/org/joda/time/tz/src/australasia
index 6cf976101..55252ce7c 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/australasia
+++ b/JodaTime/src/java/org/joda/time/tz/src/australasia
@@ -1,1401 +1,1401 @@
-# @(#)australasia	7.78
-# <pre>
-
-# This file also includes Pacific islands.
-
-# Notes are at the end of this file
-
-###############################################################################
-
-# Australia
-
-# Please see the notes below for the controversy about "EST" versus "AEST" etc.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Aus	1917	only	-	Jan	 1	0:01	1:00	-
-Rule	Aus	1917	only	-	Mar	25	2:00	0	-
-Rule	Aus	1942	only	-	Jan	 1	2:00	1:00	-
-Rule	Aus	1942	only	-	Mar	29	2:00	0	-
-Rule	Aus	1942	only	-	Sep	27	2:00	1:00	-
-Rule	Aus	1943	1944	-	Mar	lastSun	2:00	0	-
-Rule	Aus	1943	only	-	Oct	 3	2:00	1:00	-
-# Go with Whitman and the Australian National Standards Commission, which
-# says W Australia didn't use DST in 1943/1944.  Ignore Whitman's claim that
-# 1944/1945 was just like 1943/1944.
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-# Northern Territory
-Zone Australia/Darwin	 8:43:20 -	LMT	1895 Feb
-			 9:00	-	CST	1899 May
-			 9:30	Aus	CST
-# Western Australia
-Zone Australia/Perth	 7:43:24 -	LMT	1895 Dec
-			 8:00	Aus	WST	1943 Jul
-			 8:00	-	WST	1974 Oct lastSun 2:00s
-			 8:00	1:00	WST	1975 Mar Sun>=1 2:00s
-			 8:00	-	WST	1983 Oct lastSun 2:00s
-			 8:00	1:00	WST	1984 Mar Sun>=1 2:00s
-			 8:00	-	WST	1991 Nov 17 2:00s
-			 8:00	1:00	WST	1992 Mar Sun>=1 2:00s
-			 8:00	-	WST
-# Queensland
-#
-# From Alex Livingston (1996-11-01):
-# I have heard or read more than once that some resort islands off the coast
-# of Queensland chose to keep observing daylight-saving time even after
-# Queensland ceased to.
-#
-# From Paul Eggert (1996-11-22):
-# IATA SSIM (1993-02/1994-09) say that the Holiday Islands (Hayman, Lindeman,
-# Hamilton) observed DST for two years after the rest of Queensland stopped.
-# Hamilton is the largest, but there is also a Hamilton in Victoria,
-# so use Lindeman.
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	AQ	1971	only	-	Oct	lastSun	2:00s	1:00	-
-Rule	AQ	1972	only	-	Feb	lastSun	2:00s	0	-
-Rule	AQ	1989	1991	-	Oct	lastSun	2:00s	1:00	-
-Rule	AQ	1990	1992	-	Mar	Sun>=1	2:00s	0	-
-Rule	Holiday	1992	1993	-	Oct	lastSun	2:00s	1:00	-
-Rule	Holiday	1993	1994	-	Mar	Sun>=1	2:00s	0	-
-Zone Australia/Brisbane	10:12:08 -	LMT	1895
-			10:00	Aus	EST	1971
-			10:00	AQ	EST
-Zone Australia/Lindeman  9:55:56 -	LMT	1895
-			10:00	Aus	EST	1971
-			10:00	AQ	EST	1992 Jul
-			10:00	Holiday	EST
-
-# South Australia
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	AS	1971	1985	-	Oct	lastSun	2:00s	1:00	-
-Rule	AS	1986	only	-	Oct	19	2:00s	1:00	-
-Rule	AS	1987	max	-	Oct	lastSun	2:00s	1:00	-
-Rule	AS	1972	only	-	Feb	27	2:00s	0	-
-Rule	AS	1973	1985	-	Mar	Sun>=1	2:00s	0	-
-Rule	AS	1986	1989	-	Mar	Sun>=15	2:00s	0	-
-Rule	AS	1990	only	-	Mar	Sun>=18	2:00s	0	-
-Rule	AS	1991	only	-	Mar	Sun>=1	2:00s	0	-
-Rule	AS	1992	only	-	Mar	Sun>=18	2:00s	0	-
-Rule	AS	1993	only	-	Mar	Sun>=1	2:00s	0	-
-Rule	AS	1994	only	-	Mar	Sun>=18	2:00s	0	-
-Rule	AS	1995	2005	-	Mar	lastSun	2:00s	0	-
-Rule	AS	2006	only	-	Apr	Sun>=1	2:00s	0	-
-Rule	AS	2007	max	-	Mar	lastSun	2:00s	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Australia/Adelaide	9:14:20 -	LMT	1895 Feb
-			9:00	-	CST	1899 May
-			9:30	Aus	CST	1971
-			9:30	AS	CST
-
-# Tasmania
-#
-# From Paul Eggert (2005-08-16):
-# <http://www.bom.gov.au/climate/averages/tables/dst_times.shtml>
-# says King Island didn't observe DST from WWII until late 1971.
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	AT	1967	only	-	Oct	Sun>=1	2:00s	1:00	-
-Rule	AT	1968	only	-	Mar	lastSun	2:00s	0	-
-Rule	AT	1968	1985	-	Oct	lastSun	2:00s	1:00	-
-Rule	AT	1969	1971	-	Mar	Sun>=8	2:00s	0	-
-Rule	AT	1972	only	-	Feb	lastSun	2:00s	0	-
-Rule	AT	1973	1981	-	Mar	Sun>=1	2:00s	0	-
-Rule	AT	1982	1983	-	Mar	lastSun	2:00s	0	-
-Rule	AT	1984	1986	-	Mar	Sun>=1	2:00s	0	-
-Rule	AT	1986	only	-	Oct	Sun>=15	2:00s	1:00	-
-Rule	AT	1987	1990	-	Mar	Sun>=15	2:00s	0	-
-Rule	AT	1987	only	-	Oct	Sun>=22	2:00s	1:00	-
-Rule	AT	1988	1990	-	Oct	lastSun	2:00s	1:00	-
-Rule	AT	1991	1999	-	Oct	Sun>=1	2:00s	1:00	-
-Rule	AT	1991	2005	-	Mar	lastSun	2:00s	0	-
-Rule	AT	2000	only	-	Aug	lastSun	2:00s	1:00	-
-Rule	AT	2001	max	-	Oct	Sun>=1	2:00s	1:00	-
-Rule	AT	2006	only	-	Apr	Sun>=1	2:00s	0	-
-Rule	AT	2007	max	-	Mar	lastSun	2:00s	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Australia/Hobart	9:49:16	-	LMT	1895 Sep
-			10:00	-	EST	1916 Oct 1 2:00
-			10:00	1:00	EST	1917 Feb
-			10:00	Aus	EST	1967
-			10:00	AT	EST
-Zone Australia/Currie	9:35:28	-	LMT	1895 Sep
-			10:00	-	EST	1916 Oct 1 2:00
-			10:00	1:00	EST	1917 Feb
-			10:00	Aus	EST	1971 Jul
-			10:00	AT	EST
-
-# Victoria
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	AV	1971	1985	-	Oct	lastSun	2:00s	1:00	-
-Rule	AV	1972	only	-	Feb	lastSun	2:00s	0	-
-Rule	AV	1973	1985	-	Mar	Sun>=1	2:00s	0	-
-Rule	AV	1986	1990	-	Mar	Sun>=15	2:00s	0	-
-Rule	AV	1986	1987	-	Oct	Sun>=15	2:00s	1:00	-
-Rule	AV	1988	1999	-	Oct	lastSun	2:00s	1:00	-
-Rule	AV	1991	1994	-	Mar	Sun>=1	2:00s	0	-
-Rule	AV	1995	2005	-	Mar	lastSun	2:00s	0	-
-Rule	AV	2000	only	-	Aug	lastSun	2:00s	1:00	-
-Rule	AV	2001	max	-	Oct	lastSun	2:00s	1:00	-
-Rule	AV	2006	only	-	Apr	Sun>=1	2:00s	0	-
-Rule	AV	2007	max	-	Mar	lastSun	2:00s	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Australia/Melbourne 9:39:52 -	LMT	1895 Feb
-			10:00	Aus	EST	1971
-			10:00	AV	EST
-
-# New South Wales
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	AN	1971	1985	-	Oct	lastSun	2:00s	1:00	-
-Rule	AN	1972	only	-	Feb	27	2:00s	0	-
-Rule	AN	1973	1981	-	Mar	Sun>=1	2:00s	0	-
-Rule	AN	1982	only	-	Apr	Sun>=1	2:00s	0	-
-Rule	AN	1983	1985	-	Mar	Sun>=1	2:00s	0	-
-Rule	AN	1986	1989	-	Mar	Sun>=15	2:00s	0	-
-Rule	AN	1986	only	-	Oct	19	2:00s	1:00	-
-Rule	AN	1987	1999	-	Oct	lastSun	2:00s	1:00	-
-Rule	AN	1990	1995	-	Mar	Sun>=1	2:00s	0	-
-Rule	AN	1996	2005	-	Mar	lastSun	2:00s	0	-
-Rule	AN	2000	only	-	Aug	lastSun	2:00s	1:00	-
-Rule	AN	2001	max	-	Oct	lastSun	2:00s	1:00	-
-Rule	AN	2006	only	-	Apr	Sun>=1	2:00s	0	-
-Rule	AN	2007	max	-	Mar	lastSun	2:00s	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Australia/Sydney	10:04:52 -	LMT	1895 Feb
-			10:00	Aus	EST	1971
-			10:00	AN	EST
-Zone Australia/Broken_Hill 9:25:48 -	LMT	1895 Feb
-			10:00	-	EST	1896 Aug 23
-			9:00	-	CST	1899 May
-			9:30	Aus	CST	1971
-			9:30	AN	CST	2000
-			9:30	AS	CST
-
-# Lord Howe Island
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	LH	1981	1984	-	Oct	lastSun	2:00	1:00	-
-Rule	LH	1982	1985	-	Mar	Sun>=1	2:00	0	-
-Rule	LH	1985	only	-	Oct	lastSun	2:00	0:30	-
-Rule	LH	1986	1989	-	Mar	Sun>=15	2:00	0	-
-Rule	LH	1986	only	-	Oct	19	2:00	0:30	-
-Rule	LH	1987	1999	-	Oct	lastSun	2:00	0:30	-
-Rule	LH	1990	1995	-	Mar	Sun>=1	2:00	0	-
-Rule	LH	1996	2005	-	Mar	lastSun	2:00	0	-
-Rule	LH	2000	only	-	Aug	lastSun	2:00	0:30	-
-Rule	LH	2001	max	-	Oct	lastSun	2:00	0:30	-
-Rule	LH	2006	only	-	Apr	Sun>=1	2:00	0	-
-Rule	LH	2007	max	-	Mar	lastSun	2:00	0	-
-Zone Australia/Lord_Howe 10:36:20 -	LMT	1895 Feb
-			10:00	-	EST	1981 Mar
-			10:30	LH	LHST
-
-# Australian miscellany
-#
-# Ashmore Is, Cartier
-# no indigenous inhabitants; only seasonal caretakers
-# like Australia/Perth, says Turner
-#
-# Coral Sea Is
-# no indigenous inhabitants; only meteorologists
-# no information
-#
-# Macquarie
-# permanent occupation (scientific station) since 1948;
-# sealing and penguin oil station operated 1888/1917
-# like Australia/Hobart, says Turner
-
-# Christmas
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Indian/Christmas	7:02:52 -	LMT	1895 Feb
-			7:00	-	CXT	# Christmas Island Time
-
-# Cook Is
-# From Shanks:
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Cook	1978	only	-	Nov	12	0:00	0:30	HS
-Rule	Cook	1979	1991	-	Mar	Sun>=1	0:00	0	-
-Rule	Cook	1979	1990	-	Oct	lastSun	0:00	0:30	HS
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Pacific/Rarotonga	-10:39:04 -	LMT	1901		# Avarua
-			-10:30	-	CKT	1978 Nov 12	# Cook Is Time
-			-10:00	Cook	CK%sT
-
-# Cocos
-# These islands were ruled by the Ross family from about 1830 to 1978.
-# We don't know when standard time was introduced; for now, we guess 1900.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Indian/Cocos	6:27:40	-	LMT	1900
-			6:30	-	CCT	# Cocos Islands Time
-
-# Fiji
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Fiji	1998	1999	-	Nov	Sun>=1	2:00	1:00	S
-Rule	Fiji	1999	2000	-	Feb	lastSun	3:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Pacific/Fiji	11:53:40 -	LMT	1915 Oct 26	# Suva
-			12:00	Fiji	FJ%sT	# Fiji Time
-
-# French Polynesia
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Pacific/Gambier	 -8:59:48 -	LMT	1912 Oct	# Rikitea
-			 -9:00	-	GAMT	# Gambier Time
-Zone	Pacific/Marquesas -9:18:00 -	LMT	1912 Oct
-			 -9:30	-	MART	# Marquesas Time
-Zone	Pacific/Tahiti	 -9:58:16 -	LMT	1912 Oct	# Papeete
-			-10:00	-	TAHT	# Tahiti Time
-# Clipperton (near North America) is administered from French Polynesia;
-# it is uninhabited.
-
-# Guam
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Pacific/Guam	-14:21:00 -	LMT	1844 Dec 31
-			 9:39:00 -	LMT	1901		# Agana
-			10:00	-	GST	2000 Dec 23	# Guam
-			10:00	-	ChST	# Chamorro Standard Time
-
-# Kiribati
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Pacific/Tarawa	 11:32:04 -	LMT	1901		# Bairiki
-			 12:00	-	GILT		 # Gilbert Is Time
-Zone Pacific/Enderbury	-11:24:20 -	LMT	1901
-			-12:00	-	PHOT	1979 Oct # Phoenix Is Time
-			-11:00	-	PHOT	1995
-			 13:00	-	PHOT
-Zone Pacific/Kiritimati	-10:29:20 -	LMT	1901
-			-10:40	-	LINT	1979 Oct # Line Is Time
-			-10:00	-	LINT	1995
-			 14:00	-	LINT
-
-# N Mariana Is
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Pacific/Saipan	-14:17:00 -	LMT	1844 Dec 31
-			 9:43:00 -	LMT	1901
-			 9:00	-	MPT	1969 Oct # N Mariana Is Time
-			10:00	-	MPT	2000 Dec 23
-			10:00	-	ChST	# Chamorro Standard Time
-
-# Marshall Is
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Pacific/Majuro	11:24:48 -	LMT	1901
-			11:00	-	MHT	1969 Oct # Marshall Islands Time
-			12:00	-	MHT
-Zone Pacific/Kwajalein	11:09:20 -	LMT	1901
-			11:00	-	MHT	1969 Oct
-			-12:00	-	KWAT	1993 Aug 20	# Kwajalein Time
-			12:00	-	MHT
-
-# Micronesia
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Pacific/Truk	10:07:08 -	LMT	1901
-			10:00	-	TRUT			# Truk Time
-Zone Pacific/Ponape	10:32:52 -	LMT	1901		# Kolonia
-			11:00	-	PONT			# Ponape Time
-Zone Pacific/Kosrae	10:51:56 -	LMT	1901
-			11:00	-	KOST	1969 Oct	# Kosrae Time
-			12:00	-	KOST	1999
-			11:00	-	KOST
-
-# Nauru
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Pacific/Nauru	11:07:40 -	LMT	1921 Jan 15	# Uaobe
-			11:30	-	NRT	1942 Mar 15	# Nauru Time
-			9:00	-	JST	1944 Aug 15
-			11:30	-	NRT	1979 May
-			12:00	-	NRT
-
-# New Caledonia
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	NC	1977	1978	-	Dec	Sun>=1	0:00	1:00	S
-Rule	NC	1978	1979	-	Feb	27	0:00	0	-
-Rule	NC	1996	only	-	Dec	 1	2:00s	1:00	S
-# Shanks says the following was at 2:00; go with IATA.
-Rule	NC	1997	only	-	Mar	 2	2:00s	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Pacific/Noumea	11:05:48 -	LMT	1912 Jan 13
-			11:00	NC	NC%sT
-
-
-###############################################################################
-
-# New Zealand
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	NZ	1927	only	-	Nov	 6	2:00	1:00	S
-Rule	NZ	1928	only	-	Mar	 4	2:00	0	M
-Rule	NZ	1928	1933	-	Oct	Sun>=8	2:00	0:30	S
-Rule	NZ	1929	1933	-	Mar	Sun>=15	2:00	0	M
-Rule	NZ	1934	1940	-	Apr	lastSun	2:00	0	M
-Rule	NZ	1934	1940	-	Sep	lastSun	2:00	0:30	S
-Rule	NZ	1946	only	-	Jan	 1	0:00	0	S
-# Since 1957 Chatham has been 45 minutes ahead of NZ, but there's no
-# convenient notation for this so we must duplicate the Rule lines.
-Rule	NZ	1974	only	-	Nov	Sun>=1	2:00s	1:00	D
-Rule	Chatham	1974	only	-	Nov	Sun>=1	2:45s	1:00	D
-Rule	NZ	1975	only	-	Feb	lastSun	2:00s	0	S
-Rule	Chatham	1975	only	-	Feb	lastSun	2:45s	0	S
-Rule	NZ	1975	1988	-	Oct	lastSun	2:00s	1:00	D
-Rule	Chatham	1975	1988	-	Oct	lastSun	2:45s	1:00	D
-Rule	NZ	1976	1989	-	Mar	Sun>=1	2:00s	0	S
-Rule	Chatham	1976	1989	-	Mar	Sun>=1	2:45s	0	S
-Rule	NZ	1989	only	-	Oct	Sun>=8	2:00s	1:00	D
-Rule	Chatham	1989	only	-	Oct	Sun>=8	2:45s	1:00	D
-Rule	NZ	1990	max	-	Oct	Sun>=1	2:00s	1:00	D
-Rule	Chatham	1990	max	-	Oct	Sun>=1	2:45s	1:00	D
-Rule	NZ	1990	max	-	Mar	Sun>=15	2:00s	0	S
-Rule	Chatham	1990	max	-	Mar	Sun>=15	2:45s	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Pacific/Auckland	11:39:04 -	LMT	1868 Nov  2
-			11:30	NZ	NZ%sT	1946 Jan  1
-			12:00	NZ	NZ%sT
-Zone Pacific/Chatham	12:13:48 -	LMT	1957 Jan  1
-			12:45	Chatham	CHA%sT
-
-
-# Auckland Is
-# uninhabited; Maori and Moriori, colonial settlers, pastoralists, sealers,
-# and scientific personnel have wintered
-
-# Campbell I
-# minor whaling stations operated 1909/1914
-# scientific station operated 1941/1995;
-# previously whalers, sealers, pastoralists, and scientific personnel wintered
-# was probably like Pacific/Auckland
-
-###############################################################################
-
-
-# Niue
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Pacific/Niue	-11:19:40 -	LMT	1901		# Alofi
-			-11:20	-	NUT	1951	# Niue Time
-			-11:30	-	NUT	1978 Oct 1
-			-11:00	-	NUT
-
-# Norfolk
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Pacific/Norfolk	11:11:52 -	LMT	1901		# Kingston
-			11:12	-	NMT	1951	# Norfolk Mean Time
-			11:30	-	NFT		# Norfolk Time
-
-# Palau (Belau)
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Pacific/Palau	8:57:56 -	LMT	1901		# Koror
-			9:00	-	PWT	# Palau Time
-
-# Papua New Guinea
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Pacific/Port_Moresby 9:48:40 -	LMT	1880
-			9:48:32	-	PMMT	1895	# Port Moresby Mean Time
-			10:00	-	PGT		# Papua New Guinea Time
-
-# Pitcairn
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Pacific/Pitcairn	-8:40:20 -	LMT	1901		# Adamstown
-			-8:30	-	PNT	1998 Apr 27 00:00
-			-8:00	-	PST	# Pitcairn Standard Time
-
-# American Samoa
-Zone Pacific/Pago_Pago	 12:37:12 -	LMT	1879 Jul  5
-			-11:22:48 -	LMT	1911
-			-11:30	-	SAMT	1950		# Samoa Time
-			-11:00	-	NST	1967 Apr	# N=Nome
-			-11:00	-	BST	1983 Nov 30	# B=Bering
-			-11:00	-	SST			# S=Samoa
-
-# Samoa
-Zone Pacific/Apia	 12:33:04 -	LMT	1879 Jul  5
-			-11:26:56 -	LMT	1911
-			-11:30	-	SAMT	1950		# Samoa Time
-			-11:00	-	WST			# Samoa Time
-
-# Solomon Is
-# excludes Bougainville, for which see Papua New Guinea
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Pacific/Guadalcanal 10:39:48 -	LMT	1912 Oct	# Honiara
-			11:00	-	SBT	# Solomon Is Time
-
-# Tokelau Is
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Pacific/Fakaofo	-11:24:56 -	LMT	1901
-			-10:00	-	TKT	# Tokelau Time
-
-# Tonga
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Tonga	1999	only	-	Oct	 7	2:00s	1:00	S
-Rule	Tonga	2000	only	-	Mar	19	2:00s	0	-
-Rule	Tonga	2000	2001	-	Nov	Sun>=1	2:00	1:00	S
-Rule	Tonga	2001	2002	-	Jan	lastSun	2:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Pacific/Tongatapu	12:19:20 -	LMT	1901
-			12:20	-	TOT	1941 # Tonga Time
-			13:00	-	TOT	1999
-			13:00	Tonga	TO%sT
-
-# Tuvalu
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Pacific/Funafuti	11:56:52 -	LMT	1901
-			12:00	-	TVT	# Tuvalu Time
-
-
-# US minor outlying islands
-
-# Howland, Baker
-# uninhabited since World War II
-# no information; was probably like Pacific/Pago_Pago
-
-# Jarvis
-# uninhabited since 1958
-# no information; was probably like Pacific/Kiritimati
-
-# Johnston
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Pacific/Johnston	-10:00	-	HST
-
-# Kingman
-# uninhabited
-
-# Midway
-#
-# From Mark Brader (2005-01-23):
-# [Fallacies and Fantasies of Air Transport History, by R.E.G. Davies,
-# published 1994 by Paladwr Press, McLean, VA, USA; ISBN 0-9626483-5-3]
-# reproduced a Pan American Airways timeables from 1936, for their weekly
-# "Orient Express" flights between San Francisco and Manila, and connecting
-# flights to Chicago and the US East Coast.  As it uses some time zone
-# designations that I've never seen before:....
-# Fri. 6:30A Lv. HONOLOLU (Pearl Harbor), H.I.   H.L.T. Ar. 5:30P Sun.
-#  "   3:00P Ar. MIDWAY ISLAND . . . . . . . . . M.L.T. Lv. 6:00A  "
-#
-Zone Pacific/Midway	-11:49:28 -	LMT	1901
-			-11:00	-	NST	1956 Jun  3
-			-11:00	1:00	NDT	1956 Sep  2
-			-11:00	-	NST	1967 Apr	# N=Nome
-			-11:00	-	BST	1983 Nov 30	# B=Bering
-			-11:00	-	SST			# S=Samoa
-
-# Palmyra
-# uninhabited since World War II; was probably like Pacific/Kiritimati
-
-# Wake
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Pacific/Wake	11:06:28 -	LMT	1901
-			12:00	-	WAKT	# Wake Time
-
-
-# Vanuatu
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Vanuatu	1983	only	-	Sep	25	0:00	1:00	S
-Rule	Vanuatu	1984	1991	-	Mar	Sun>=23	0:00	0	-
-Rule	Vanuatu	1984	only	-	Oct	23	0:00	1:00	S
-Rule	Vanuatu	1985	1991	-	Sep	Sun>=23	0:00	1:00	S
-Rule	Vanuatu	1992	1993	-	Jan	Sun>=23	0:00	0	-
-Rule	Vanuatu	1992	only	-	Oct	Sun>=23	0:00	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Pacific/Efate	11:13:16 -	LMT	1912 Jan 13		# Vila
-			11:00	Vanuatu	VU%sT	# Vanuatu Time
-
-# Wallis and Futuna
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Pacific/Wallis	12:15:20 -	LMT	1901
-			12:00	-	WFT	# Wallis & Futuna Time
-
-###############################################################################
-
-# NOTES
-
-# This data is by no means authoritative; if you think you know better,
-# go ahead and edit the file (and please send any changes to
-# tz@elsie.nci.nih.gov for general use in the future).
-
-# From Paul Eggert (1999-10-29):
-# A good source for time zone historical data outside the U.S. is
-# Thomas G. Shanks, The International Atlas (5th edition),
-# San Diego: ACS Publications, Inc. (1999).
-#
-# Gwillim Law writes that a good source
-# for recent time zone data is the International Air Transport
-# Association's Standard Schedules Information Manual (IATA SSIM),
-# published semiannually.  Law sent in several helpful summaries
-# of the IATA's data after 1990.
-#
-# Except where otherwise noted, Shanks is the source for entries through 1990,
-# and IATA SSIM is the source for entries after 1990.
-#
-# Another source occasionally used is Edward W. Whitman, World Time Differences,
-# Whitman Publishing Co, 2 Niagara Av, Ealing, London (undated), which
-# I found in the UCLA library.
-#
-# A reliable and entertaining source about time zones is
-# Derek Howse, Greenwich time and longitude, Philip Wilson Publishers (1997).
-#
-# I invented the abbreviations marked `*' in the following table;
-# the rest are from earlier versions of this file, or from other sources.
-# Corrections are welcome!
-#		std dst
-#		LMT	Local Mean Time
-#	  8:00	WST WST	Western Australia
-#	  9:00	JST	Japan
-#	  9:30	CST CST	Central Australia
-#	 10:00	EST EST	Eastern Australia
-#	 10:00	ChST	Chamorro
-#	 10:30	LHST LHST Lord Howe*
-#	 11:30	NZMT NZST New Zealand through 1945
-#	 12:00	NZST NZDT New Zealand 1946-present
-#	 12:45	CHAST CHADT Chatham*
-#	-11:00	SST	Samoa
-#	-10:00	HST	Hawaii
-#	- 8:00	PST	Pitcairn*
-#
-# See the `northamerica' file for Hawaii.
-# See the `southamerica' file for Easter I and the Galapagos Is.
-
-###############################################################################
-
-# Australia
-
-# From Paul Eggert (2005-12-08):
-# <a href="http://www.bom.gov.au/climate/averages/tables/dst_times.shtml">
-# Implementation Dates of Daylight Saving Time within Australia
-# </a> summarizes daylight saving issues in Australia.
-
-# From Arthur David Olson (2005-12-12):
-# <a href="http://www.lawlink.nsw.gov.au/lawlink/Corporate/ll_agdinfo.nsf/pages/community_relations_daylight_saving">
-# Lawlink NSW:Daylight Saving in New South Wales
-# </a> covers New South Wales in particular.
-
-# From John Mackin (1991-03-06):
-# We in Australia have _never_ referred to DST as `daylight' time.
-# It is called `summer' time.  Now by a happy coincidence, `summer'
-# and `standard' happen to start with the same letter; hence, the
-# abbreviation does _not_ change...
-# The legislation does not actually define abbreviations, at least
-# in this State, but the abbreviation is just commonly taken to be the
-# initials of the phrase, and the legislation here uniformly uses
-# the phrase `summer time' and does not use the phrase `daylight
-# time'.
-# Announcers on the Commonwealth radio network, the ABC (for Australian
-# Broadcasting Commission), use the phrases `Eastern Standard Time'
-# or `Eastern Summer Time'.  (Note, though, that as I say in the
-# current australasia file, there is really no such thing.)  Announcers
-# on its overseas service, Radio Australia, use the same phrases
-# prefixed by the word `Australian' when referring to local times;
-# time announcements on that service, naturally enough, are made in UTC.
-
-# From Arthur David Olson (1992-03-08):
-# Given the above, what's chosen for year-round use is:
-#	CST	for any place operating at a GMTOFF of 9:30
-#	WST	for any place operating at a GMTOFF of 8:00
-#	EST	for any place operating at a GMTOFF of 10:00
-
-# From Paul Eggert (2001-04-05), summarizing a long discussion about "EST"
-# versus "AEST" etc.:
-#
-# I see the following points of dispute:
-#
-# * How important are unique time zone abbreviations?
-#
-#   Here I tend to agree with the point (most recently made by Chris
-#   Newman) that unique abbreviations should not be essential for proper
-#   operation of software.  We have other instances of ambiguity
-#   (e.g. "IST" denoting both "Israel Standard Time" and "Indian
-#   Standard Time"), and they are not likely to go away any time soon.
-#   In the old days, some software mistakenly relied on unique
-#   abbreviations, but this is becoming less true with time, and I don't
-#   think it's that important to cater to such software these days.
-#
-#   On the other hand, there is another motivation for unambiguous
-#   abbreviations: it cuts down on human confusion.  This is
-#   particularly true for Australia, where "EST" can mean one thing for
-#   time T and a different thing for time T plus 1 second.
-#
-# * Does the relevant legislation indicate which abbreviations should be used?
-#
-#   Here I tend to think that things are a mess, just as they are in
-#   many other countries.  We Americans are currently disagreeing about
-#   which abbreviation to use for the newly legislated Chamorro Standard
-#   Time, for example.
-#
-#   Personally, I would prefer to use common practice; I would like to
-#   refer to legislation only for examples of common practice, or as a
-#   tiebreaker.
-#
-# * Do Australians more often use "Eastern Daylight Time" or "Eastern
-#   Summer Time"?  Do they typically prefix the time zone names with
-#   the word "Australian"?
-#
-#   My own impression is that both "Daylight Time" and "Summer Time" are
-#   common and are widely understood, but that "Summer Time" is more
-#   popular; and that the leading "A" is also common but is omitted more
-#   often than not.  I just used AltaVista advanced search and got the
-#   following count of page hits:
-#
-#     1,103 "Eastern Summer Time" AND domain:au
-#       971 "Australian Eastern Summer Time" AND domain:au
-#       613 "Eastern Daylight Time" AND domain:au
-#       127 "Australian Eastern Daylight Time" AND domain:au
-#
-#   Here "Summer" seems quite a bit more popular than "Daylight",
-#   particularly when we know the time zone is Australian and not US,
-#   say.  The "Australian" prefix seems to be popular for Eastern Summer
-#   Time, but unpopular for Eastern Daylight Time.
-#
-#   For abbreviations, tools like AltaVista are less useful because of
-#   ambiguity.  Many hits are not really time zones, unfortunately, and
-#   many hits denote US time zones and not Australian ones.  But here
-#   are the hit counts anyway:
-#
-#     161,304 "EST" and domain:au
-#      25,156 "EDT" and domain:au
-#      18,263 "AEST" and domain:au
-#      10,416 "AEDT" and domain:au
-#
-#      14,538 "CST" and domain:au
-#       5,728 "CDT" and domain:au
-#         176 "ACST" and domain:au
-#          29 "ACDT" and domain:au
-#
-#       7,539 "WST" and domain:au
-#          68 "AWST" and domain:au
-#
-#   This data suggest that Australians tend to omit the "A" prefix in
-#   practice.  The situation for "ST" versus "DT" is less clear, given
-#   the ambiguities involved.
-#
-# * How do Australians feel about the abbreviations in the tz database?
-#
-#   If you just count Australians on this list, I count 2 in favor and 3
-#   against.  One of the "against" votes (David Keegel) counseled delay,
-#   saying that both AEST/AEDT and EST/EST are widely used and
-#   understood in Australia.
-
-# From Paul Eggert (1995-12-19):
-# Shanks reports 2:00 for all autumn changes in Australia and New Zealand.
-# Mark Prior writes that his newspaper
-# reports that NSW's fall 1995 change will occur at 2:00,
-# but Robert Elz says it's been 3:00 in Victoria since 1970
-# and perhaps the newspaper's `2:00' is referring to standard time.
-# For now we'll continue to assume 2:00s for changes since 1960.
-
-# From Eric Ulevik (1998-01-05):
-#
-# Here are some URLs to Australian time legislation. These URLs are stable,
-# and should probably be included in the data file. There are probably more
-# relevant entries in this database.
-#
-# NSW (including LHI and Broken Hill):
-# <a href="http://www.austlii.edu.au/au/legis/nsw/consol_act/sta1987137/index.html">
-# Standard Time Act 1987 (updated 1995-04-04)
-# </a>
-# ACT
-# <a href="http://www.austlii.edu.au/au/legis/act/consol_act/stasta1972279/index.html">
-# Standard Time and Summer Time Act 1972
-# </a>
-# SA
-# <a href="http://www.austlii.edu.au/au/legis/sa/consol_act/sta1898137/index.html">
-# Standard Time Act, 1898
-# </a>
-
-# From David Grosz (2005-06-13):
-# It was announced last week that Daylight Saving would be extended by
-# one week next year to allow for the 2006 Commonwealth Games.
-# Daylight Saving is now to end for next year only on the first Sunday
-# in April instead of the last Sunday in March.
-#
-# From Gwillim Law (2005-06-14):
-# I did some Googling and found that all of those states (and territory) plan
-# to extend DST together in 2006.
-# ACT: http://www.cmd.act.gov.au/mediareleases/fileread.cfm?file=86.txt
-# New South Wales: http://www.thecouriermail.news.com.au/common/story_page/0,5936,15538869%255E1702,00.html
-# South Australia: http://www.news.com.au/story/0,10117,15555031-1246,00.html
-# Tasmania: http://www.media.tas.gov.au/release.php?id=14772
-# Victoria: I wasn't able to find anything separate, but the other articles
-# allude to it.
-# But not Queensland
-# http://www.news.com.au/story/0,10117,15564030-1248,00.html.
-
-# Northern Territory
-
-# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
-# # The NORTHERN TERRITORY..  [ Courtesy N.T. Dept of the Chief Minister ]
-# #					[ Nov 1990 ]
-# #	N.T. have never utilised any DST due to sub-tropical/tropical location.
-# ...
-# Zone        Australia/North         9:30    -       CST
-
-# From Bradley White (1991-03-04):
-# A recent excerpt from an Australian newspaper...
-# the Northern Territory do[es] not have daylight saving.
-
-# Western Australia
-
-# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
-# #  The state of WESTERN AUSTRALIA..  [ Courtesy W.A. dept Premier+Cabinet ]
-# #						[ Nov 1990 ]
-# #	W.A. suffers from a great deal of public and political opposition to
-# #	DST in principle. A bill is brought before parliament in most years, but
-# #	usually defeated either in the upper house, or in party caucus
-# #	before reaching parliament.
-# ...
-# Zone	Australia/West		8:00	AW	%sST
-# ...
-# Rule	AW	1974	only	-	Oct	lastSun	2:00	1:00	D
-# Rule	AW	1975	only	-	Mar	Sun>=1	3:00	0	W
-# Rule	AW	1983	only	-	Oct	lastSun	2:00	1:00	D
-# Rule	AW	1984	only	-	Mar	Sun>=1	3:00	0	W
-
-# From Bradley White (1991-03-04):
-# A recent excerpt from an Australian newspaper...
-# Western Australia...do[es] not have daylight saving.
-
-# From John D. Newman via Bradley White (1991-11-02):
-# Western Australia is still on "winter time". Some DH in Sydney
-# rang me at home a few days ago at 6.00am. (He had just arrived at
-# work at 9.00am.)
-# W.A. is switching to Summer Time on Nov 17th just to confuse
-# everybody again.
-
-# From Arthur David Olson (1992-03-08):
-# The 1992 ending date used in the rules is a best guess;
-# it matches what was used in the past.
-
-# <a href="http://www.bom.gov.au/faq/faqgen.htm">
-# The Australian Bureau of Meteorology FAQ
-# </a> (1999-09-27) writes that Giles Meteorological Station uses
-# South Australian time even though it's located in Western Australia.
-
-# Queensland
-# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
-# #   The state of QUEENSLAND.. [ Courtesy Qld. Dept Premier Econ&Trade Devel ]
-# #						[ Dec 1990 ]
-# ...
-# Zone	Australia/Queensland	10:00	AQ	%sST
-# ...
-# Rule	AQ	1971	only	-	Oct	lastSun	2:00	1:00	D
-# Rule	AQ	1972	only	-	Feb	lastSun	3:00	0	E
-# Rule	AQ	1989	max	-	Oct	lastSun	2:00	1:00	D
-# Rule	AQ	1990	max	-	Mar	Sun>=1	3:00	0	E
-
-# From Bradley White (1989-12-24):
-# "Australia/Queensland" now observes daylight time (i.e. from
-# October 1989).
-
-# From Bradley White (1991-03-04):
-# A recent excerpt from an Australian newspaper...
-# ...Queensland...[has] agreed to end daylight saving
-# at 3am tomorrow (March 3)...
-
-# From John Mackin (1991-03-06):
-# I can certainly confirm for my part that Daylight Saving in NSW did in fact
-# end on Sunday, 3 March.  I don't know at what hour, though.  (It surprised
-# me.)
-
-# From Bradley White (1992-03-08):
-# ...there was recently a referendum in Queensland which resulted
-# in the experimental daylight saving system being abandoned. So, ...
-# ...
-# Rule	QLD	1989	1991	-	Oct	lastSun	2:00	1:00	D
-# Rule	QLD	1990	1992	-	Mar	Sun>=1	3:00	0	S
-# ...
-
-# From Arthur David Olson (1992-03-08):
-# The chosen rules the union of the 1971/1972 change and the 1989-1992 changes.
-
-# From Rives McDow (2002-04-09):
-# The most interesting region I have found consists of three towns on the
-# southern coast of Australia, population 10 at last report, along with
-# 50,000 sheep, about 100 kilometers long and 40 kilometers into the
-# continent.  The primary town is Madura, with the other towns being
-# Mundrabilla and Eucla.  According to the sheriff of Madura, the
-# residents got tired of having to change the time so often, as they are
-# located in a strip overlapping the border of South Australia and Western
-# Australia.  South Australia observes daylight saving time; Western
-# Australia does not.  The two states are one and a half hours apart.  The
-# residents decided to forget about this nonsense of changing the clock so
-# much and set the local time 20 hours and 45 minutes from the
-# international date line, or right in the middle of the time of South
-# Australia and Western Australia.  As it only affects about 10 people and
-# tourists staying at the Madura Motel, it has never really made as big an
-# impact as Broken Hill.  However, as tourist visiting there or anyone
-# calling the local sheriff will attest, they do keep time in this way.
-#
-# From Paul Eggert (2002-04-09):
-# This is confirmed by the section entitled
-# "What's the deal with time zones???" in
-# <http://www.earthsci.unimelb.edu.au/~awatkins/null.html>,
-# which says a few other things:
-#
-# * Border Village, SA also is 45 minutes ahead of Perth.
-# * The locals call this time zone "central W.A. Time" (presumably "CWAT").
-# * The locals also call Western Australia time "Perth time".
-#
-# It's not clear from context whether everyone in Western Australia
-# knows of this naming convention, or whether it's just the people in
-# this subregion.
-
-# South Australia, Tasmania, Victoria
-
-# From Arthur David Olson (1992-03-08):
-# The rules from version 7.1 follow.
-# There are lots of differences between these rules and
-# the Shepherd et al. rules.  Since the Shepherd et al. rules
-# and Bradley White's newspaper article are in agreement on
-# current DST ending dates, no worries.
-#
-# Rule	Oz	1971	1985	-	Oct	lastSun	2:00	1:00	-
-# Rule	Oz	1986	max	-	Oct	Sun<=24	2:00	1:00	-
-# Rule	Oz	1972	only	-	Feb	27	3:00	0	-
-# Rule	Oz	1973	1986	-	Mar	Sun>=1	3:00	0	-
-# Rule	Oz	1987	max	-	Mar	Sun<=21	3:00	0	-
-# Zone	Australia/Tasmania	10:00	Oz	EST
-# Zone	Australia/South		9:30	Oz	CST
-# Zone	Australia/Victoria	10:00	Oz	EST	1985 Oct lastSun 2:00
-#				10:00	1:00	EST	1986 Mar Sun<=21 3:00
-#				10:00	Oz	EST
-
-# From Robert Elz (1991-03-06):
-# I believe that the current start date for DST is "lastSun" in Oct...
-# that changed Oct 89.  That is, we're back to the
-# original rule, and that rule currently applies in all the states
-# that have dst, incl Qld.  (Certainly it was true in Vic).
-# The file I'm including says that happened in 1988, I think
-# that's incorrect, but I'm not 100% certain.
-
-# South Australia
-
-# From Bradley White (1991-03-04):
-# A recent excerpt from an Australian newspaper...
-# ...South Australia...[has] agreed to end daylight saving
-# at 3am tomorrow (March 3)...
-
-# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
-# #   The state of SOUTH AUSTRALIA....[ Courtesy of S.A. Dept of Labour ]
-# #						[ Nov 1990 ]
-# ...
-# Zone	Australia/South		9:30	AS	%sST
-# ...
-# Rule	 AS	1971	max	-	Oct	lastSun	2:00	1:00	D
-# Rule	 AS	1972	1985	-	Mar	Sun>=1	3:00	0	C
-# Rule	 AS	1986	1990	-	Mar	Sun<=21	3:00	0	C
-# Rule	 AS	1991	max	-	Mar	Sun>=1	3:00	0	C
-
-# From Bradley White (1992-03-11):
-# Recent correspondence with a friend in Adelaide
-# contained the following exchange:  "Due to the Adelaide Festival,
-# South Australia delays setting back our clocks for a few weeks."
-
-# From Robert Elz (1992-03-13):
-# I heard that apparently (or at least, it appears that)
-# South Aus will have an extra 3 weeks daylight saving every even
-# numbered year (from 1990).  That's when the Adelaide Festival
-# is on...
-
-# From Robert Elz (1992-03-16, 00:57:07 +1000):
-# DST didn't end in Adelaide today (yesterday)....
-# But whether it's "4th Sunday" or "2nd last Sunday" I have no idea whatever...
-# (it's just as likely to be "the Sunday we pick for this year"...).
-
-# From Bradley White (1994-04-11):
-# If Sun, 15 March, 1992 was at +1030 as kre asserts, but yet Sun, 20 March,
-# 1994 was at +0930 as John Connolly's customer seems to assert, then I can
-# only conclude that the actual rule is more complicated....
-
-# From John Warburton (1994-10-07):
-# The new Daylight Savings dates for South Australia ...
-# was gazetted in the Government Hansard on Sep 26 1994....
-# start on last Sunday in October and end in last sunday in March.
-
-# Tasmania
-
-# The rules for 1967 through 1991 were reported by George Shepherd
-# via Simon Woodhead via Robert Elz (1991-03-06):
-# #  The state of TASMANIA.. [Courtesy Tasmanian Dept of Premier + Cabinet ]
-# #					[ Nov 1990 ]
-
-# From Bill Hart via Guy Harris (1991-10-10):
-# Oh yes, the new daylight savings rules are uniquely tasmanian, we have
-# 6 weeks a year now when we are out of sync with the rest of Australia
-# (but nothing new about that).
-
-# From Alex Livingston (1999-10-04):
-# I heard on the ABC (Australian Broadcasting Corporation) radio news on the
-# (long) weekend that Tasmania, which usually goes its own way in this regard,
-# has decided to join with most of NSW, the ACT, and most of Victoria
-# (Australia) and start daylight saving on the last Sunday in August in 2000
-# instead of the first Sunday in October.
-
-# Sim Alam (2000-07-03) reported a legal citation for the 2000/2001 rules:
-# http://www.thelaw.tas.gov.au/fragview/42++1968+GS3A@EN+2000070300
-
-# Victoria
-
-# The rules for 1971 through 1991 were reported by George Shepherd
-# via Simon Woodhead via Robert Elz (1991-03-06):
-# #   The state of VICTORIA.. [ Courtesy of Vic. Dept of Premier + Cabinet ]
-# #						[ Nov 1990 ]
-
-# From Scott Harrington (2001-08-29):
-# On KQED's "City Arts and Lectures" program last night I heard an
-# interesting story about daylight savings time.  Dr. John Heilbron was
-# discussing his book "The Sun in the Church: Cathedrals as Solar
-# Observatories"[1], and in particular the Shrine of Remembrance[2] located
-# in Melbourne, Australia.
-#
-# Apparently the shrine's main purpose is a beam of sunlight which
-# illuminates a special spot on the floor at the 11th hour of the 11th day
-# of the 11th month (Remembrance Day) every year in memory of Australia's
-# fallen WWI soldiers.  And if you go there on Nov. 11, at 11am local time,
-# you will indeed see the sunbeam illuminate the special spot at the
-# expected time.
-#
-# However, that is only because of some special mirror contraption that had
-# to be employed, since due to daylight savings time, the true solar time of
-# the remembrance moment occurs one hour later (or earlier?).  Perhaps
-# someone with more information on this jury-rig can tell us more.
-#
-# [1] http://www.hup.harvard.edu/catalog/HEISUN.html
-# [2] http://www.shrine.org.au
-
-# New South Wales
-
-# From Arthur David Olson:
-# New South Wales and subjurisdictions have their own ideas of a fun time.
-# Based on law library research by John Mackin,
-# who notes:
-#	In Australia, time is not legislated federally, but rather by the
-#	individual states.  Thus, while such terms as ``Eastern Standard Time''
-#	[I mean, of course, Australian EST, not any other kind] are in common
-#	use, _they have NO REAL MEANING_, as they are not defined in the
-#	legislation.  This is very important to understand.
-#	I have researched New South Wales time only...
-
-# From Eric Ulevik (1999-05-26):
-# DST will start in NSW on the last Sunday of August, rather than the usual
-# October in 2000.  [See: Matthew Moore,
-# <a href="http://www.smh.com.au/news/9905/26/pageone/pageone4.html">
-# Two months more daylight saving
-# </a>
-# Sydney Morning Herald (1999-05-26).]
-
-# From Paul Eggert (1999-09-27):
-# See the following official NSW source:
-# <a href="http://dir.gis.nsw.gov.au/cgi-bin/genobject/document/other/daylightsaving/tigGmZ">
-# Daylight Saving in New South Wales.
-# </a>
-#
-# Narrabri Shire (NSW) council has announced it will ignore the extension of
-# daylight saving next year.  See:
-# <a href="http://abc.net.au/news/regionals/neweng/monthly/regeng-22jul1999-1.htm">
-# Narrabri Council to ignore daylight saving
-# </a> (1999-07-22).  For now, we'll wait to see if this really happens.
-#
-# Victoria will following NSW.  See:
-# <a href="http://abc.net.au/local/news/olympics/1999/07/item19990728112314_1.htm">
-# Vic to extend daylight saving
-# </a> (1999-07-28).
-#
-# However, South Australia rejected the DST request.  See:
-# <a href="http://abc.net.au/news/olympics/1999/07/item19990719151754_1.htm">
-# South Australia rejects Olympics daylight savings request
-# </a> (1999-07-19).
-#
-# Queensland also will not observe DST for the Olympics.  See:
-# <a href="http://abc.net.au/news/olympics/1999/06/item19990601114608_1.htm">
-# Qld says no to daylight savings for Olympics
-# </a> (1999-06-01), which quotes Queensland Premier Peter Beattie as saying
-# ``Look you've got to remember in my family when this came up last time
-# I voted for it, my wife voted against it and she said to me it's all very
-# well for you, you don't have to worry about getting the children out of
-# bed, getting them to school, getting them to sleep at night.
-# I've been through all this argument domestically...my wife rules.''
-#
-# Broken Hill will stick with South Australian time in 2000.  See:
-# <a href="http://abc.net.au/news/regionals/brokenh/monthly/regbrok-21jul1999-6.htm">
-# Broken Hill to be behind the times
-# </a> (1999-07-21).
-
-# IATA SSIM (1998-09) says that the spring 2000 change for Australian
-# Capital Territory, New South Wales except Lord Howe Island and Broken
-# Hill, and Victoria will be August 27, presumably due to the Sydney Olympics.
-
-# From Eric Ulevik, referring to Sydney's Sun Herald (2000-08-13), page 29:
-# The Queensland Premier Peter Beattie is encouraging northern NSW
-# towns to use Queensland time.
-
-# Yancowinna
-
-# From John Mackin (1989-01-04):
-# `Broken Hill' means the County of Yancowinna.
-
-# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
-# # YANCOWINNA..  [ Confirmation courtesy of Broken Hill Postmaster ]
-# #					[ Dec 1990 ]
-# ...
-# # Yancowinna uses Central Standard Time, despite [its] location on the
-# # New South Wales side of the S.A. border. Most business and social dealings
-# # are with CST zones, therefore CST is legislated by local government
-# # although the switch to Summer Time occurs in line with N.S.W. There have
-# # been years when this did not apply, but the historical data is not
-# # presently available.
-# Zone	Australia/Yancowinna	9:30	 AY	%sST
-# ...
-# Rule	 AY	1971	1985	-	Oct	lastSun	2:00	1:00	D
-# Rule	 AY	1972	only	-	Feb	lastSun	3:00	0	C
-# [followed by other Rules]
-
-# Lord Howe Island
-
-# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
-# LHI...		[ Courtesy of Pauline Van Winsen ]
-#					[ Dec 1990 ]
-# Lord Howe Island is located off the New South Wales coast, and is half an
-# hour ahead of NSW time.
-
-# From James Lonergan, Secretary, Lord Howe Island Board (2000-01-27):
-# Lord Howe Island summer time in 2000/2001 will commence on the same
-# date as the rest of NSW (i.e. 2000-08-27).  For your information the
-# Lord Howe Island Board (controlling authority for the Island) is
-# seeking the community's views on various options for summer time
-# arrangements on the Island, e.g. advance clocks by 1 full hour
-# instead of only 30 minutes.  Dependant on the wishes of residents
-# the Board may approach the NSW government to change the existing
-# arrangements.  The starting date for summer time on the Island will
-# however always coincide with the rest of NSW.
-
-# From James Lonergan, Secretary, Lord Howe Island Board (2000-10-25):
-# Lord Howe Island advances clocks by 30 minutes during DST in NSW and retards
-# clocks by 30 minutes when DST finishes. Since DST was most recently
-# introduced in NSW, the "changeover" time on the Island has been 02:00 as
-# shown on clocks on LHI. I guess this means that for 30 minutes at the start
-# of DST, LHI is actually 1 hour ahead of the rest of NSW.
-
-# From Paul Eggert (2001-02-09):
-# For Lord Howe dates we use Shanks through 1989, and Lonergan thereafter.
-# For times we use Lonergan.
-
-###############################################################################
-
-# New Zealand
-
-# From Mark Davies (1990-10-03):
-# the 1989/90 year was a trial of an extended "daylight saving" period.
-# This trial was deemed successful and the extended period adopted for
-# subsequent years (with the addition of a further week at the start).
-# source -- phone call to Ministry of Internal Affairs Head Office.
-
-# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
-# # The Country of New Zealand   (Australia's east island -) Gee they hate that!
-# #				   or is Australia the west island of N.Z.
-# #	[ courtesy of Geoff Tribble.. Auckland N.Z. ]
-# #				[ Nov 1990 ]
-# ...
-# Rule	NZ      1974    1988	-	Oct	lastSun	2:00	1:00	D
-# Rule	NZ	1989	max	-	Oct	Sun>=1	2:00	1:00	D
-# Rule	NZ      1975    1989	-	Mar	Sun>=1	3:00	0	S
-# Rule	NZ	1990	max	-	Mar	lastSun	3:00	0	S
-# ...
-# Zone	NZ			12:00	NZ		NZ%sT	# New Zealand
-# Zone	NZ-CHAT			12:45	-		NZ-CHAT # Chatham Island
-
-# From Arthur David Olson (1992-03-08):
-# The chosen rules use the Davies October 8 values for the start of DST in 1989
-# rather than the October 1 value.
-
-# From Paul Eggert (1995-12-19);
-# Shanks reports 2:00 for all autumn changes in Australia and New Zealand.
-# Robert Uzgalis writes that the New Zealand Daylight
-# Savings Time Order in Council dated 1990-06-18 specifies 2:00 standard
-# time on both the first Sunday in October and the third Sunday in March.
-# As with Australia, we'll assume the tradition is 2:00s, not 2:00.
-#
-# From Paul Eggert (2003-05-26):
-# The Department of Internal Affairs (DIA) maintains a brief history,
-# as does Carol Squires; see tz-link.htm for the full references.
-# Use these sources in preference to Shanks.
-#
-# For Chatham, IATA SSIM (1991/1999) gives the NZ rules but with
-# transitions at 2:45 local standard time; this confirms that Chatham
-# is always exactly 45 minutes ahead of Auckland.
-
-###############################################################################
-
-
-# Fiji
-
-# Howse writes (p 153) that in 1879 the British governor of Fiji
-# enacted an ordinance standardizing the islands on Antipodean Time
-# instead of the American system (which was one day behind).
-
-# From Rives McDow (1998-10-08):
-# Fiji will introduce DST effective 0200 local time, 1998-11-01
-# until 0300 local time 1999-02-28.  Each year the DST period will
-# be from the first Sunday in November until the last Sunday in February.
-
-# From Paul Eggert (2000-01-08):
-# IATA SSIM (1999-09) says DST ends 0100 local time.  Go with McDow.
-
-# From the BBC World Service (1998-10-31 11:32 UTC):
-# The Fijiian government says the main reasons for the time change is to
-# improve productivity and reduce road accidents.  But correspondents say it
-# also hopes the move will boost Fiji's ability to compete with other pacific
-# islands in the effort to attract tourists to witness the dawning of the new
-# millenium.
-
-# http://www.fiji.gov.fj/press/2000_09/2000_09_13-05.shtml (2000-09-13)
-# reports that Fiji has discontinued DST.
-
-# Johnston
-
-# Johnston data is from usno1995.
-
-
-# Kiribati
-
-# From Paul Eggert (1996-01-22):
-# Today's _Wall Street Journal_ (page 1) reports that Kiribati
-# ``declared it the same day throught the country as of Jan. 1, 1995''
-# as part of the competition to be first into the 21st century.
-
-
-# Kwajalein
-
-# In comp.risks 14.87 (26 August 1993), Peter Neumann writes:
-# I wonder what happened in Kwajalein, where there was NO Friday,
-# 1993-08-20.  Thursday night at midnight Kwajalein switched sides with
-# respect to the International Date Line, to rejoin its fellow islands,
-# going from 11:59 p.m. Thursday to 12:00 m. Saturday in a blink.
-
-
-# N Mariana Is, Guam
-
-# Howse writes (p 153) ``The Spaniards, on the other hand, reached the
-# Philippines and the Ladrones from America,'' and implies that the Ladrones
-# (now called the Marianas) kept American date for quite some time.
-# For now, we assume the Ladrones switched at the same time as the Philippines;
-# see Asia/Manila.
-
-# US Public Law 106-564 (2000-12-23) made UTC+10 the official standard time,
-# under the name "Chamorro Standard Time".  There is no official abbreviation,
-# but Congressman Robert A. Underwood, author of the bill that became law,
-# wrote in a press release (2000-12-27) that he will seek the use of "ChST".
-
-
-# Micronesia
-
-# Alan Eugene Davis writes (1996-03-16),
-# ``I am certain, having lived there for the past decade, that "Truk"
-# (now properly known as Chuuk) ... is in the time zone GMT+10.''
-#
-# Shanks writes that Truk switched from UTC+10 to UTC+11 on 1978-10-01;
-# ignore this for now.
-
-# From Paul Eggert (1999-10-29):
-# The Federated States of Micronesia Visitors Board writes in
-# <a href="http://www.fsmgov.org/info/clocks.html">
-# The Federated States of Micronesia - Visitor Information
-# </a> (1999-01-26)
-# that Truk and Yap are UTC+10, and Ponape and Kosrae are UTC+11.
-# We don't know when Kosrae switched from UTC+12; assume January 1 for now.
-
-
-# Midway
-
-# From Charles T O'Connor, KMTH DJ (1956),
-# quoted in the KTMH section of the Radio Heritage Collection
-# <http://radiodx.com/spdxr/KMTH.htm> (2002-12-31):
-# For the past two months we've been on what is known as Daylight
-# Saving Time.  This time has put us on air at 5am in the morning,
-# your time down there in New Zealand.  Starting September 2, 1956
-# we'll again go back to Standard Time.  This'll mean that we'll go to
-# air at 6am your time.
-#
-# From Paul Eggert (2003-03-23):
-# We don't know the date of that quote, but we'll guess they
-# started DST on June 3.  Possibly DST was observed other years
-# in Midway, but we have no record of it.
-
-
-# Pitcairn
-
-# From Rives McDow (1999-11-08):
-# A Proclamation was signed by the Governor of Pitcairn on the 27th March 1998
-# with regard to Pitcairn Standard Time.  The Proclamation is as follows.
-#
-#	The local time for general purposes in the Islands shall be
-#	Co-ordinated Universal time minus 8 hours and shall be known
-#	as Pitcairn Standard Time.
-#
-# ... I have also seen Pitcairn listed as UTC minus 9 hours in several
-# references, and can only assume that this was an error in interpretation
-# somehow in light of this proclamation.
-
-# From Rives McDow (1999-11-09):
-# The Proclamation regarding Pitcairn time came into effect on 27 April 1998
-# ... at midnight.
-
-# From Howie Phelps (1999-11-10), who talked to a Pitcairner via shortwave:
-# Betty Christian told me yesterday that their local time is the same as
-# Pacific Standard Time. They used to be 1/2 hour different from us here in
-# Sacramento but it was changed a couple of years ago.
-
-
-# Samoa
-
-# Howse writes (p 153, citing p 10 of the 1883-11-18 New York Herald)
-# that in 1879 the King of Samoa decided to change
-# ``the date in his kingdom from the Antipodean to the American system,
-# ordaining -- by a masterpiece of diplomatic flattery -- that
-# the Fourth of July should be celebrated twice in that year.''
-
-
-# Tonga
-
-# From Paul Eggert (1996-01-22):
-# Today's _Wall Street Journal_ (p 1) reports that ``Tonga has been plotting
-# to sneak ahead of [New Zealanders] by introducing daylight-saving time.''
-# Since Kiribati has moved the Date Line it's not clear what Tonga will do.
-
-# Don Mundell writes in the 1997-02-20 Tonga Chronicle
-# <a href="http://www.tongatapu.net.to/tonga/homeland/timebegins.htm">
-# How Tonga became `The Land where Time Begins'
-# </a>:
-
-# Until 1941 Tonga maintained a standard time 50 minutes ahead of NZST
-# 12 hours and 20 minutes ahead of GMT.  When New Zealand adjusted its
-# standard time in 1940s, Tonga had the choice of subtracting from its
-# local time to come on the same standard time as New Zealand or of
-# advancing its time to maintain the differential of 13 degrees
-# (approximately 50 minutes ahead of New Zealand time).
-#
-# Because His Majesty King Taufa'ahau Tupou IV, then Crown Prince
-# Tungi, preferred to ensure Tonga's title as the land where time
-# begins, the Legislative Assembly approved the latter change.
-#
-# But some of the older, more conservative members from the outer
-# islands objected. "If at midnight on Dec. 31, we move ahead 40
-# minutes, as your Royal Highness wishes, what becomes of the 40
-# minutes we have lost?"
-#
-# The Crown Prince, presented an unanswerable argument: "Remember that
-# on the World Day of Prayer, you would be the first people on Earth
-# to say your prayers in the morning."
-
-# From Paul Eggert (1999-08-12):
-# Shanks says the transition was on 1968-10-01; go with Mundell.
-
-# From Eric Ulevik (1999-05-03):
-# Tonga's director of tourism, who is also secretary of the National Millenium
-# Committee, has a plan to get Tonga back in front.
-# He has proposed a one-off move to tropical daylight saving for Tonga from
-# October to March, which has won approval in principle from the Tongan
-# Government.
-
-# From Steffen Thorsen (1999-09-09):
-# * Tonga will introduce DST in November
-#
-# I was given this link by John Letts:
-# <a hef="http://news.bbc.co.uk/hi/english/world/asia-pacific/newsid_424000/424764.stm">
-# http://news.bbc.co.uk/hi/english/world/asia-pacific/newsid_424000/424764.stm
-# </a>
-#
-# I have not been able to find exact dates for the transition in November
-# yet. By reading this article it seems like Fiji will be 14 hours ahead
-# of UTC as well, but as far as I know Fiji will only be 13 hours ahead
-# (12 + 1 hour DST).
-
-# From Arthur David Olson (1999-09-20):
-# According to <a href="http://www.tongaonline.com/news/sept1799.html>
-# http://www.tongaonline.com/news/sept1799.html
-# </a>:
-# "Daylight Savings Time will take effect on Oct. 2 through April 15, 2000
-# and annually thereafter from the first Saturday in October through the
-# third Saturday of April.  Under the system approved by Privy Council on
-# Sept. 10, clocks must be turned ahead one hour on the opening day and
-# set back an hour on the closing date."
-# Alas, no indication of the time of day.
-
-# From Rives McDow (1999-10-06):
-# Tonga started its Daylight Saving on Saturday morning October 2nd at 0200am.
-# Daylight Saving ends on April 16 at 0300am which is Sunday morning.
-
-# From Steffen Thorsen (2000-10-31):
-# Back in March I found a notice on the website http://www.tongaonline.com
-# that Tonga changed back to standard time one month early, on March 19
-# instead of the original reported date April 16. Unfortunately, the article
-# is no longer available on the site, and I did not make a copy of the
-# text, and I have forgotten to report it here.
-# (Original URL was: http://www.tongaonline.com/news/march162000.htm )
-
-# From Rives McDow (2000-12-01):
-# Tonga is observing DST as of 2000-11-04 and will stop on 2001-01-27.
-
-# From Sione Moala-Mafi (2001-09-20) via Rives McDow:
-# At 2:00am on the first Sunday of November, the standard time in the Kingdom
-# shall be moved forward by one hour to 3:00am.  At 2:00am on the last Sunday
-# of January the standard time in the Kingdom shall be moved backward by one
-# hour to 1:00am.
-
-# From Pulu 'Anau (2002-11-05):
-# The law was for 3 years, supposedly to get renewed.  It wasn't.
-
-
-# Wake
-
-# From Vernice Anderson, Personal Secretary to Philip Jessup,
-# US Ambassador At Large (oral history interview, 1971-02-02):
-#
-# Saturday, the 14th [of October, 1950] -- ...  The time was all the
-# more confusing at that point, because we had crossed the
-# International Date Line, thus getting two Sundays.  Furthermore, we
-# discovered that Wake Island had two hours of daylight saving time
-# making calculation of time in Washington difficult if not almost
-# impossible.
-#
-# http://www.trumanlibrary.org/wake/meeting.htm
-
-# From Paul Eggert (2003-03-23):
-# We have no other report of DST in Wake Island, so omit this info for now.
-
-###############################################################################
-
-# The International Date Line
-
-# From Gwillim Law (2000-01-03):
-#
-# The International Date Line is not defined by any international standard,
-# convention, or treaty.  Mapmakers are free to draw it as they please.
-# Reputable mapmakers will simply ensure that every point of land appears on
-# the correct side of the IDL, according to the date legally observed there.
-#
-# When Kiribati adopted a uniform date in 1995, thereby moving the Phoenix and
-# Line Islands to the west side of the IDL (or, if you prefer, moving the IDL
-# to the east side of the Phoenix and Line Islands), I suppose that most
-# mapmakers redrew the IDL following the boundary of Kiribati.  Even that line
-# has a rather arbitrary nature.  The straight-line boundaries between Pacific
-# island nations that are shown on many maps are based on an international
-# convention, but are not legally binding national borders.... The date is
-# governed by the IDL; therefore, even on the high seas, there may be some
-# places as late as fourteen hours later than UTC.  And, since the IDL is not
-# an international standard, there are some places on the high seas where the
-# correct date is ambiguous.
-
-# From Wikipedia <http://en.wikipedia.org/wiki/Time_zone> (2005-08-31):
-# Before 1920, all ships kept local apparent time on the high seas by setting
-# their clocks at night or at the morning sight so that, given the ship's
-# speed and direction, it would be 12 o'clock when the Sun crossed the ship's
-# meridian (12 o'clock = local apparent noon).  During 1917, at the
-# Anglo-French Conference on Time-keeping at Sea, it was recommended that all
-# ships, both military and civilian, should adopt hourly standard time zones
-# on the high seas.  Whenever a ship was within the territorial waters of any
-# nation it would use that nation's standard time.  The captain was permitted
-# to change his ship's clocks at a time of his choice following his ship's
-# entry into another zone time--he often chose midnight.  These zones were
-# adopted by all major fleets between 1920 and 1925 but not by many
-# independent merchant ships until World War II.
-
-# From Paul Eggert, using references suggested by Oscar van Vlijmen
-# (2005-03-20):
-#
-# The American Practical Navigator (2002)
-# <http://pollux.nss.nima.mil/pubs/pubs_j_apn_sections.html?rid=187>
-# talks only about the 180-degree meridian with respect to ships in
-# international waters; it ignores the international date line.
+# @(#)australasia	7.78
+# <pre>
+
+# This file also includes Pacific islands.
+
+# Notes are at the end of this file
+
+###############################################################################
+
+# Australia
+
+# Please see the notes below for the controversy about "EST" versus "AEST" etc.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Aus	1917	only	-	Jan	 1	0:01	1:00	-
+Rule	Aus	1917	only	-	Mar	25	2:00	0	-
+Rule	Aus	1942	only	-	Jan	 1	2:00	1:00	-
+Rule	Aus	1942	only	-	Mar	29	2:00	0	-
+Rule	Aus	1942	only	-	Sep	27	2:00	1:00	-
+Rule	Aus	1943	1944	-	Mar	lastSun	2:00	0	-
+Rule	Aus	1943	only	-	Oct	 3	2:00	1:00	-
+# Go with Whitman and the Australian National Standards Commission, which
+# says W Australia didn't use DST in 1943/1944.  Ignore Whitman's claim that
+# 1944/1945 was just like 1943/1944.
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+# Northern Territory
+Zone Australia/Darwin	 8:43:20 -	LMT	1895 Feb
+			 9:00	-	CST	1899 May
+			 9:30	Aus	CST
+# Western Australia
+Zone Australia/Perth	 7:43:24 -	LMT	1895 Dec
+			 8:00	Aus	WST	1943 Jul
+			 8:00	-	WST	1974 Oct lastSun 2:00s
+			 8:00	1:00	WST	1975 Mar Sun>=1 2:00s
+			 8:00	-	WST	1983 Oct lastSun 2:00s
+			 8:00	1:00	WST	1984 Mar Sun>=1 2:00s
+			 8:00	-	WST	1991 Nov 17 2:00s
+			 8:00	1:00	WST	1992 Mar Sun>=1 2:00s
+			 8:00	-	WST
+# Queensland
+#
+# From Alex Livingston (1996-11-01):
+# I have heard or read more than once that some resort islands off the coast
+# of Queensland chose to keep observing daylight-saving time even after
+# Queensland ceased to.
+#
+# From Paul Eggert (1996-11-22):
+# IATA SSIM (1993-02/1994-09) say that the Holiday Islands (Hayman, Lindeman,
+# Hamilton) observed DST for two years after the rest of Queensland stopped.
+# Hamilton is the largest, but there is also a Hamilton in Victoria,
+# so use Lindeman.
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	AQ	1971	only	-	Oct	lastSun	2:00s	1:00	-
+Rule	AQ	1972	only	-	Feb	lastSun	2:00s	0	-
+Rule	AQ	1989	1991	-	Oct	lastSun	2:00s	1:00	-
+Rule	AQ	1990	1992	-	Mar	Sun>=1	2:00s	0	-
+Rule	Holiday	1992	1993	-	Oct	lastSun	2:00s	1:00	-
+Rule	Holiday	1993	1994	-	Mar	Sun>=1	2:00s	0	-
+Zone Australia/Brisbane	10:12:08 -	LMT	1895
+			10:00	Aus	EST	1971
+			10:00	AQ	EST
+Zone Australia/Lindeman  9:55:56 -	LMT	1895
+			10:00	Aus	EST	1971
+			10:00	AQ	EST	1992 Jul
+			10:00	Holiday	EST
+
+# South Australia
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	AS	1971	1985	-	Oct	lastSun	2:00s	1:00	-
+Rule	AS	1986	only	-	Oct	19	2:00s	1:00	-
+Rule	AS	1987	max	-	Oct	lastSun	2:00s	1:00	-
+Rule	AS	1972	only	-	Feb	27	2:00s	0	-
+Rule	AS	1973	1985	-	Mar	Sun>=1	2:00s	0	-
+Rule	AS	1986	1989	-	Mar	Sun>=15	2:00s	0	-
+Rule	AS	1990	only	-	Mar	Sun>=18	2:00s	0	-
+Rule	AS	1991	only	-	Mar	Sun>=1	2:00s	0	-
+Rule	AS	1992	only	-	Mar	Sun>=18	2:00s	0	-
+Rule	AS	1993	only	-	Mar	Sun>=1	2:00s	0	-
+Rule	AS	1994	only	-	Mar	Sun>=18	2:00s	0	-
+Rule	AS	1995	2005	-	Mar	lastSun	2:00s	0	-
+Rule	AS	2006	only	-	Apr	Sun>=1	2:00s	0	-
+Rule	AS	2007	max	-	Mar	lastSun	2:00s	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Australia/Adelaide	9:14:20 -	LMT	1895 Feb
+			9:00	-	CST	1899 May
+			9:30	Aus	CST	1971
+			9:30	AS	CST
+
+# Tasmania
+#
+# From Paul Eggert (2005-08-16):
+# <http://www.bom.gov.au/climate/averages/tables/dst_times.shtml>
+# says King Island didn't observe DST from WWII until late 1971.
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	AT	1967	only	-	Oct	Sun>=1	2:00s	1:00	-
+Rule	AT	1968	only	-	Mar	lastSun	2:00s	0	-
+Rule	AT	1968	1985	-	Oct	lastSun	2:00s	1:00	-
+Rule	AT	1969	1971	-	Mar	Sun>=8	2:00s	0	-
+Rule	AT	1972	only	-	Feb	lastSun	2:00s	0	-
+Rule	AT	1973	1981	-	Mar	Sun>=1	2:00s	0	-
+Rule	AT	1982	1983	-	Mar	lastSun	2:00s	0	-
+Rule	AT	1984	1986	-	Mar	Sun>=1	2:00s	0	-
+Rule	AT	1986	only	-	Oct	Sun>=15	2:00s	1:00	-
+Rule	AT	1987	1990	-	Mar	Sun>=15	2:00s	0	-
+Rule	AT	1987	only	-	Oct	Sun>=22	2:00s	1:00	-
+Rule	AT	1988	1990	-	Oct	lastSun	2:00s	1:00	-
+Rule	AT	1991	1999	-	Oct	Sun>=1	2:00s	1:00	-
+Rule	AT	1991	2005	-	Mar	lastSun	2:00s	0	-
+Rule	AT	2000	only	-	Aug	lastSun	2:00s	1:00	-
+Rule	AT	2001	max	-	Oct	Sun>=1	2:00s	1:00	-
+Rule	AT	2006	only	-	Apr	Sun>=1	2:00s	0	-
+Rule	AT	2007	max	-	Mar	lastSun	2:00s	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Australia/Hobart	9:49:16	-	LMT	1895 Sep
+			10:00	-	EST	1916 Oct 1 2:00
+			10:00	1:00	EST	1917 Feb
+			10:00	Aus	EST	1967
+			10:00	AT	EST
+Zone Australia/Currie	9:35:28	-	LMT	1895 Sep
+			10:00	-	EST	1916 Oct 1 2:00
+			10:00	1:00	EST	1917 Feb
+			10:00	Aus	EST	1971 Jul
+			10:00	AT	EST
+
+# Victoria
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	AV	1971	1985	-	Oct	lastSun	2:00s	1:00	-
+Rule	AV	1972	only	-	Feb	lastSun	2:00s	0	-
+Rule	AV	1973	1985	-	Mar	Sun>=1	2:00s	0	-
+Rule	AV	1986	1990	-	Mar	Sun>=15	2:00s	0	-
+Rule	AV	1986	1987	-	Oct	Sun>=15	2:00s	1:00	-
+Rule	AV	1988	1999	-	Oct	lastSun	2:00s	1:00	-
+Rule	AV	1991	1994	-	Mar	Sun>=1	2:00s	0	-
+Rule	AV	1995	2005	-	Mar	lastSun	2:00s	0	-
+Rule	AV	2000	only	-	Aug	lastSun	2:00s	1:00	-
+Rule	AV	2001	max	-	Oct	lastSun	2:00s	1:00	-
+Rule	AV	2006	only	-	Apr	Sun>=1	2:00s	0	-
+Rule	AV	2007	max	-	Mar	lastSun	2:00s	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Australia/Melbourne 9:39:52 -	LMT	1895 Feb
+			10:00	Aus	EST	1971
+			10:00	AV	EST
+
+# New South Wales
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	AN	1971	1985	-	Oct	lastSun	2:00s	1:00	-
+Rule	AN	1972	only	-	Feb	27	2:00s	0	-
+Rule	AN	1973	1981	-	Mar	Sun>=1	2:00s	0	-
+Rule	AN	1982	only	-	Apr	Sun>=1	2:00s	0	-
+Rule	AN	1983	1985	-	Mar	Sun>=1	2:00s	0	-
+Rule	AN	1986	1989	-	Mar	Sun>=15	2:00s	0	-
+Rule	AN	1986	only	-	Oct	19	2:00s	1:00	-
+Rule	AN	1987	1999	-	Oct	lastSun	2:00s	1:00	-
+Rule	AN	1990	1995	-	Mar	Sun>=1	2:00s	0	-
+Rule	AN	1996	2005	-	Mar	lastSun	2:00s	0	-
+Rule	AN	2000	only	-	Aug	lastSun	2:00s	1:00	-
+Rule	AN	2001	max	-	Oct	lastSun	2:00s	1:00	-
+Rule	AN	2006	only	-	Apr	Sun>=1	2:00s	0	-
+Rule	AN	2007	max	-	Mar	lastSun	2:00s	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Australia/Sydney	10:04:52 -	LMT	1895 Feb
+			10:00	Aus	EST	1971
+			10:00	AN	EST
+Zone Australia/Broken_Hill 9:25:48 -	LMT	1895 Feb
+			10:00	-	EST	1896 Aug 23
+			9:00	-	CST	1899 May
+			9:30	Aus	CST	1971
+			9:30	AN	CST	2000
+			9:30	AS	CST
+
+# Lord Howe Island
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	LH	1981	1984	-	Oct	lastSun	2:00	1:00	-
+Rule	LH	1982	1985	-	Mar	Sun>=1	2:00	0	-
+Rule	LH	1985	only	-	Oct	lastSun	2:00	0:30	-
+Rule	LH	1986	1989	-	Mar	Sun>=15	2:00	0	-
+Rule	LH	1986	only	-	Oct	19	2:00	0:30	-
+Rule	LH	1987	1999	-	Oct	lastSun	2:00	0:30	-
+Rule	LH	1990	1995	-	Mar	Sun>=1	2:00	0	-
+Rule	LH	1996	2005	-	Mar	lastSun	2:00	0	-
+Rule	LH	2000	only	-	Aug	lastSun	2:00	0:30	-
+Rule	LH	2001	max	-	Oct	lastSun	2:00	0:30	-
+Rule	LH	2006	only	-	Apr	Sun>=1	2:00	0	-
+Rule	LH	2007	max	-	Mar	lastSun	2:00	0	-
+Zone Australia/Lord_Howe 10:36:20 -	LMT	1895 Feb
+			10:00	-	EST	1981 Mar
+			10:30	LH	LHST
+
+# Australian miscellany
+#
+# Ashmore Is, Cartier
+# no indigenous inhabitants; only seasonal caretakers
+# like Australia/Perth, says Turner
+#
+# Coral Sea Is
+# no indigenous inhabitants; only meteorologists
+# no information
+#
+# Macquarie
+# permanent occupation (scientific station) since 1948;
+# sealing and penguin oil station operated 1888/1917
+# like Australia/Hobart, says Turner
+
+# Christmas
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Indian/Christmas	7:02:52 -	LMT	1895 Feb
+			7:00	-	CXT	# Christmas Island Time
+
+# Cook Is
+# From Shanks:
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Cook	1978	only	-	Nov	12	0:00	0:30	HS
+Rule	Cook	1979	1991	-	Mar	Sun>=1	0:00	0	-
+Rule	Cook	1979	1990	-	Oct	lastSun	0:00	0:30	HS
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Pacific/Rarotonga	-10:39:04 -	LMT	1901		# Avarua
+			-10:30	-	CKT	1978 Nov 12	# Cook Is Time
+			-10:00	Cook	CK%sT
+
+# Cocos
+# These islands were ruled by the Ross family from about 1830 to 1978.
+# We don't know when standard time was introduced; for now, we guess 1900.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Indian/Cocos	6:27:40	-	LMT	1900
+			6:30	-	CCT	# Cocos Islands Time
+
+# Fiji
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Fiji	1998	1999	-	Nov	Sun>=1	2:00	1:00	S
+Rule	Fiji	1999	2000	-	Feb	lastSun	3:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Pacific/Fiji	11:53:40 -	LMT	1915 Oct 26	# Suva
+			12:00	Fiji	FJ%sT	# Fiji Time
+
+# French Polynesia
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Pacific/Gambier	 -8:59:48 -	LMT	1912 Oct	# Rikitea
+			 -9:00	-	GAMT	# Gambier Time
+Zone	Pacific/Marquesas -9:18:00 -	LMT	1912 Oct
+			 -9:30	-	MART	# Marquesas Time
+Zone	Pacific/Tahiti	 -9:58:16 -	LMT	1912 Oct	# Papeete
+			-10:00	-	TAHT	# Tahiti Time
+# Clipperton (near North America) is administered from French Polynesia;
+# it is uninhabited.
+
+# Guam
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Pacific/Guam	-14:21:00 -	LMT	1844 Dec 31
+			 9:39:00 -	LMT	1901		# Agana
+			10:00	-	GST	2000 Dec 23	# Guam
+			10:00	-	ChST	# Chamorro Standard Time
+
+# Kiribati
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Pacific/Tarawa	 11:32:04 -	LMT	1901		# Bairiki
+			 12:00	-	GILT		 # Gilbert Is Time
+Zone Pacific/Enderbury	-11:24:20 -	LMT	1901
+			-12:00	-	PHOT	1979 Oct # Phoenix Is Time
+			-11:00	-	PHOT	1995
+			 13:00	-	PHOT
+Zone Pacific/Kiritimati	-10:29:20 -	LMT	1901
+			-10:40	-	LINT	1979 Oct # Line Is Time
+			-10:00	-	LINT	1995
+			 14:00	-	LINT
+
+# N Mariana Is
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Pacific/Saipan	-14:17:00 -	LMT	1844 Dec 31
+			 9:43:00 -	LMT	1901
+			 9:00	-	MPT	1969 Oct # N Mariana Is Time
+			10:00	-	MPT	2000 Dec 23
+			10:00	-	ChST	# Chamorro Standard Time
+
+# Marshall Is
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Pacific/Majuro	11:24:48 -	LMT	1901
+			11:00	-	MHT	1969 Oct # Marshall Islands Time
+			12:00	-	MHT
+Zone Pacific/Kwajalein	11:09:20 -	LMT	1901
+			11:00	-	MHT	1969 Oct
+			-12:00	-	KWAT	1993 Aug 20	# Kwajalein Time
+			12:00	-	MHT
+
+# Micronesia
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Pacific/Truk	10:07:08 -	LMT	1901
+			10:00	-	TRUT			# Truk Time
+Zone Pacific/Ponape	10:32:52 -	LMT	1901		# Kolonia
+			11:00	-	PONT			# Ponape Time
+Zone Pacific/Kosrae	10:51:56 -	LMT	1901
+			11:00	-	KOST	1969 Oct	# Kosrae Time
+			12:00	-	KOST	1999
+			11:00	-	KOST
+
+# Nauru
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Pacific/Nauru	11:07:40 -	LMT	1921 Jan 15	# Uaobe
+			11:30	-	NRT	1942 Mar 15	# Nauru Time
+			9:00	-	JST	1944 Aug 15
+			11:30	-	NRT	1979 May
+			12:00	-	NRT
+
+# New Caledonia
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	NC	1977	1978	-	Dec	Sun>=1	0:00	1:00	S
+Rule	NC	1978	1979	-	Feb	27	0:00	0	-
+Rule	NC	1996	only	-	Dec	 1	2:00s	1:00	S
+# Shanks says the following was at 2:00; go with IATA.
+Rule	NC	1997	only	-	Mar	 2	2:00s	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Pacific/Noumea	11:05:48 -	LMT	1912 Jan 13
+			11:00	NC	NC%sT
+
+
+###############################################################################
+
+# New Zealand
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	NZ	1927	only	-	Nov	 6	2:00	1:00	S
+Rule	NZ	1928	only	-	Mar	 4	2:00	0	M
+Rule	NZ	1928	1933	-	Oct	Sun>=8	2:00	0:30	S
+Rule	NZ	1929	1933	-	Mar	Sun>=15	2:00	0	M
+Rule	NZ	1934	1940	-	Apr	lastSun	2:00	0	M
+Rule	NZ	1934	1940	-	Sep	lastSun	2:00	0:30	S
+Rule	NZ	1946	only	-	Jan	 1	0:00	0	S
+# Since 1957 Chatham has been 45 minutes ahead of NZ, but there's no
+# convenient notation for this so we must duplicate the Rule lines.
+Rule	NZ	1974	only	-	Nov	Sun>=1	2:00s	1:00	D
+Rule	Chatham	1974	only	-	Nov	Sun>=1	2:45s	1:00	D
+Rule	NZ	1975	only	-	Feb	lastSun	2:00s	0	S
+Rule	Chatham	1975	only	-	Feb	lastSun	2:45s	0	S
+Rule	NZ	1975	1988	-	Oct	lastSun	2:00s	1:00	D
+Rule	Chatham	1975	1988	-	Oct	lastSun	2:45s	1:00	D
+Rule	NZ	1976	1989	-	Mar	Sun>=1	2:00s	0	S
+Rule	Chatham	1976	1989	-	Mar	Sun>=1	2:45s	0	S
+Rule	NZ	1989	only	-	Oct	Sun>=8	2:00s	1:00	D
+Rule	Chatham	1989	only	-	Oct	Sun>=8	2:45s	1:00	D
+Rule	NZ	1990	max	-	Oct	Sun>=1	2:00s	1:00	D
+Rule	Chatham	1990	max	-	Oct	Sun>=1	2:45s	1:00	D
+Rule	NZ	1990	max	-	Mar	Sun>=15	2:00s	0	S
+Rule	Chatham	1990	max	-	Mar	Sun>=15	2:45s	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Pacific/Auckland	11:39:04 -	LMT	1868 Nov  2
+			11:30	NZ	NZ%sT	1946 Jan  1
+			12:00	NZ	NZ%sT
+Zone Pacific/Chatham	12:13:48 -	LMT	1957 Jan  1
+			12:45	Chatham	CHA%sT
+
+
+# Auckland Is
+# uninhabited; Maori and Moriori, colonial settlers, pastoralists, sealers,
+# and scientific personnel have wintered
+
+# Campbell I
+# minor whaling stations operated 1909/1914
+# scientific station operated 1941/1995;
+# previously whalers, sealers, pastoralists, and scientific personnel wintered
+# was probably like Pacific/Auckland
+
+###############################################################################
+
+
+# Niue
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Pacific/Niue	-11:19:40 -	LMT	1901		# Alofi
+			-11:20	-	NUT	1951	# Niue Time
+			-11:30	-	NUT	1978 Oct 1
+			-11:00	-	NUT
+
+# Norfolk
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Pacific/Norfolk	11:11:52 -	LMT	1901		# Kingston
+			11:12	-	NMT	1951	# Norfolk Mean Time
+			11:30	-	NFT		# Norfolk Time
+
+# Palau (Belau)
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Pacific/Palau	8:57:56 -	LMT	1901		# Koror
+			9:00	-	PWT	# Palau Time
+
+# Papua New Guinea
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Pacific/Port_Moresby 9:48:40 -	LMT	1880
+			9:48:32	-	PMMT	1895	# Port Moresby Mean Time
+			10:00	-	PGT		# Papua New Guinea Time
+
+# Pitcairn
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Pacific/Pitcairn	-8:40:20 -	LMT	1901		# Adamstown
+			-8:30	-	PNT	1998 Apr 27 00:00
+			-8:00	-	PST	# Pitcairn Standard Time
+
+# American Samoa
+Zone Pacific/Pago_Pago	 12:37:12 -	LMT	1879 Jul  5
+			-11:22:48 -	LMT	1911
+			-11:30	-	SAMT	1950		# Samoa Time
+			-11:00	-	NST	1967 Apr	# N=Nome
+			-11:00	-	BST	1983 Nov 30	# B=Bering
+			-11:00	-	SST			# S=Samoa
+
+# Samoa
+Zone Pacific/Apia	 12:33:04 -	LMT	1879 Jul  5
+			-11:26:56 -	LMT	1911
+			-11:30	-	SAMT	1950		# Samoa Time
+			-11:00	-	WST			# Samoa Time
+
+# Solomon Is
+# excludes Bougainville, for which see Papua New Guinea
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Pacific/Guadalcanal 10:39:48 -	LMT	1912 Oct	# Honiara
+			11:00	-	SBT	# Solomon Is Time
+
+# Tokelau Is
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Pacific/Fakaofo	-11:24:56 -	LMT	1901
+			-10:00	-	TKT	# Tokelau Time
+
+# Tonga
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Tonga	1999	only	-	Oct	 7	2:00s	1:00	S
+Rule	Tonga	2000	only	-	Mar	19	2:00s	0	-
+Rule	Tonga	2000	2001	-	Nov	Sun>=1	2:00	1:00	S
+Rule	Tonga	2001	2002	-	Jan	lastSun	2:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Pacific/Tongatapu	12:19:20 -	LMT	1901
+			12:20	-	TOT	1941 # Tonga Time
+			13:00	-	TOT	1999
+			13:00	Tonga	TO%sT
+
+# Tuvalu
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Pacific/Funafuti	11:56:52 -	LMT	1901
+			12:00	-	TVT	# Tuvalu Time
+
+
+# US minor outlying islands
+
+# Howland, Baker
+# uninhabited since World War II
+# no information; was probably like Pacific/Pago_Pago
+
+# Jarvis
+# uninhabited since 1958
+# no information; was probably like Pacific/Kiritimati
+
+# Johnston
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Pacific/Johnston	-10:00	-	HST
+
+# Kingman
+# uninhabited
+
+# Midway
+#
+# From Mark Brader (2005-01-23):
+# [Fallacies and Fantasies of Air Transport History, by R.E.G. Davies,
+# published 1994 by Paladwr Press, McLean, VA, USA; ISBN 0-9626483-5-3]
+# reproduced a Pan American Airways timeables from 1936, for their weekly
+# "Orient Express" flights between San Francisco and Manila, and connecting
+# flights to Chicago and the US East Coast.  As it uses some time zone
+# designations that I've never seen before:....
+# Fri. 6:30A Lv. HONOLOLU (Pearl Harbor), H.I.   H.L.T. Ar. 5:30P Sun.
+#  "   3:00P Ar. MIDWAY ISLAND . . . . . . . . . M.L.T. Lv. 6:00A  "
+#
+Zone Pacific/Midway	-11:49:28 -	LMT	1901
+			-11:00	-	NST	1956 Jun  3
+			-11:00	1:00	NDT	1956 Sep  2
+			-11:00	-	NST	1967 Apr	# N=Nome
+			-11:00	-	BST	1983 Nov 30	# B=Bering
+			-11:00	-	SST			# S=Samoa
+
+# Palmyra
+# uninhabited since World War II; was probably like Pacific/Kiritimati
+
+# Wake
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Pacific/Wake	11:06:28 -	LMT	1901
+			12:00	-	WAKT	# Wake Time
+
+
+# Vanuatu
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Vanuatu	1983	only	-	Sep	25	0:00	1:00	S
+Rule	Vanuatu	1984	1991	-	Mar	Sun>=23	0:00	0	-
+Rule	Vanuatu	1984	only	-	Oct	23	0:00	1:00	S
+Rule	Vanuatu	1985	1991	-	Sep	Sun>=23	0:00	1:00	S
+Rule	Vanuatu	1992	1993	-	Jan	Sun>=23	0:00	0	-
+Rule	Vanuatu	1992	only	-	Oct	Sun>=23	0:00	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Pacific/Efate	11:13:16 -	LMT	1912 Jan 13		# Vila
+			11:00	Vanuatu	VU%sT	# Vanuatu Time
+
+# Wallis and Futuna
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Pacific/Wallis	12:15:20 -	LMT	1901
+			12:00	-	WFT	# Wallis & Futuna Time
+
+###############################################################################
+
+# NOTES
+
+# This data is by no means authoritative; if you think you know better,
+# go ahead and edit the file (and please send any changes to
+# tz@elsie.nci.nih.gov for general use in the future).
+
+# From Paul Eggert (1999-10-29):
+# A good source for time zone historical data outside the U.S. is
+# Thomas G. Shanks, The International Atlas (5th edition),
+# San Diego: ACS Publications, Inc. (1999).
+#
+# Gwillim Law writes that a good source
+# for recent time zone data is the International Air Transport
+# Association's Standard Schedules Information Manual (IATA SSIM),
+# published semiannually.  Law sent in several helpful summaries
+# of the IATA's data after 1990.
+#
+# Except where otherwise noted, Shanks is the source for entries through 1990,
+# and IATA SSIM is the source for entries after 1990.
+#
+# Another source occasionally used is Edward W. Whitman, World Time Differences,
+# Whitman Publishing Co, 2 Niagara Av, Ealing, London (undated), which
+# I found in the UCLA library.
+#
+# A reliable and entertaining source about time zones is
+# Derek Howse, Greenwich time and longitude, Philip Wilson Publishers (1997).
+#
+# I invented the abbreviations marked `*' in the following table;
+# the rest are from earlier versions of this file, or from other sources.
+# Corrections are welcome!
+#		std dst
+#		LMT	Local Mean Time
+#	  8:00	WST WST	Western Australia
+#	  9:00	JST	Japan
+#	  9:30	CST CST	Central Australia
+#	 10:00	EST EST	Eastern Australia
+#	 10:00	ChST	Chamorro
+#	 10:30	LHST LHST Lord Howe*
+#	 11:30	NZMT NZST New Zealand through 1945
+#	 12:00	NZST NZDT New Zealand 1946-present
+#	 12:45	CHAST CHADT Chatham*
+#	-11:00	SST	Samoa
+#	-10:00	HST	Hawaii
+#	- 8:00	PST	Pitcairn*
+#
+# See the `northamerica' file for Hawaii.
+# See the `southamerica' file for Easter I and the Galapagos Is.
+
+###############################################################################
+
+# Australia
+
+# From Paul Eggert (2005-12-08):
+# <a href="http://www.bom.gov.au/climate/averages/tables/dst_times.shtml">
+# Implementation Dates of Daylight Saving Time within Australia
+# </a> summarizes daylight saving issues in Australia.
+
+# From Arthur David Olson (2005-12-12):
+# <a href="http://www.lawlink.nsw.gov.au/lawlink/Corporate/ll_agdinfo.nsf/pages/community_relations_daylight_saving">
+# Lawlink NSW:Daylight Saving in New South Wales
+# </a> covers New South Wales in particular.
+
+# From John Mackin (1991-03-06):
+# We in Australia have _never_ referred to DST as `daylight' time.
+# It is called `summer' time.  Now by a happy coincidence, `summer'
+# and `standard' happen to start with the same letter; hence, the
+# abbreviation does _not_ change...
+# The legislation does not actually define abbreviations, at least
+# in this State, but the abbreviation is just commonly taken to be the
+# initials of the phrase, and the legislation here uniformly uses
+# the phrase `summer time' and does not use the phrase `daylight
+# time'.
+# Announcers on the Commonwealth radio network, the ABC (for Australian
+# Broadcasting Commission), use the phrases `Eastern Standard Time'
+# or `Eastern Summer Time'.  (Note, though, that as I say in the
+# current australasia file, there is really no such thing.)  Announcers
+# on its overseas service, Radio Australia, use the same phrases
+# prefixed by the word `Australian' when referring to local times;
+# time announcements on that service, naturally enough, are made in UTC.
+
+# From Arthur David Olson (1992-03-08):
+# Given the above, what's chosen for year-round use is:
+#	CST	for any place operating at a GMTOFF of 9:30
+#	WST	for any place operating at a GMTOFF of 8:00
+#	EST	for any place operating at a GMTOFF of 10:00
+
+# From Paul Eggert (2001-04-05), summarizing a long discussion about "EST"
+# versus "AEST" etc.:
+#
+# I see the following points of dispute:
+#
+# * How important are unique time zone abbreviations?
+#
+#   Here I tend to agree with the point (most recently made by Chris
+#   Newman) that unique abbreviations should not be essential for proper
+#   operation of software.  We have other instances of ambiguity
+#   (e.g. "IST" denoting both "Israel Standard Time" and "Indian
+#   Standard Time"), and they are not likely to go away any time soon.
+#   In the old days, some software mistakenly relied on unique
+#   abbreviations, but this is becoming less true with time, and I don't
+#   think it's that important to cater to such software these days.
+#
+#   On the other hand, there is another motivation for unambiguous
+#   abbreviations: it cuts down on human confusion.  This is
+#   particularly true for Australia, where "EST" can mean one thing for
+#   time T and a different thing for time T plus 1 second.
+#
+# * Does the relevant legislation indicate which abbreviations should be used?
+#
+#   Here I tend to think that things are a mess, just as they are in
+#   many other countries.  We Americans are currently disagreeing about
+#   which abbreviation to use for the newly legislated Chamorro Standard
+#   Time, for example.
+#
+#   Personally, I would prefer to use common practice; I would like to
+#   refer to legislation only for examples of common practice, or as a
+#   tiebreaker.
+#
+# * Do Australians more often use "Eastern Daylight Time" or "Eastern
+#   Summer Time"?  Do they typically prefix the time zone names with
+#   the word "Australian"?
+#
+#   My own impression is that both "Daylight Time" and "Summer Time" are
+#   common and are widely understood, but that "Summer Time" is more
+#   popular; and that the leading "A" is also common but is omitted more
+#   often than not.  I just used AltaVista advanced search and got the
+#   following count of page hits:
+#
+#     1,103 "Eastern Summer Time" AND domain:au
+#       971 "Australian Eastern Summer Time" AND domain:au
+#       613 "Eastern Daylight Time" AND domain:au
+#       127 "Australian Eastern Daylight Time" AND domain:au
+#
+#   Here "Summer" seems quite a bit more popular than "Daylight",
+#   particularly when we know the time zone is Australian and not US,
+#   say.  The "Australian" prefix seems to be popular for Eastern Summer
+#   Time, but unpopular for Eastern Daylight Time.
+#
+#   For abbreviations, tools like AltaVista are less useful because of
+#   ambiguity.  Many hits are not really time zones, unfortunately, and
+#   many hits denote US time zones and not Australian ones.  But here
+#   are the hit counts anyway:
+#
+#     161,304 "EST" and domain:au
+#      25,156 "EDT" and domain:au
+#      18,263 "AEST" and domain:au
+#      10,416 "AEDT" and domain:au
+#
+#      14,538 "CST" and domain:au
+#       5,728 "CDT" and domain:au
+#         176 "ACST" and domain:au
+#          29 "ACDT" and domain:au
+#
+#       7,539 "WST" and domain:au
+#          68 "AWST" and domain:au
+#
+#   This data suggest that Australians tend to omit the "A" prefix in
+#   practice.  The situation for "ST" versus "DT" is less clear, given
+#   the ambiguities involved.
+#
+# * How do Australians feel about the abbreviations in the tz database?
+#
+#   If you just count Australians on this list, I count 2 in favor and 3
+#   against.  One of the "against" votes (David Keegel) counseled delay,
+#   saying that both AEST/AEDT and EST/EST are widely used and
+#   understood in Australia.
+
+# From Paul Eggert (1995-12-19):
+# Shanks reports 2:00 for all autumn changes in Australia and New Zealand.
+# Mark Prior writes that his newspaper
+# reports that NSW's fall 1995 change will occur at 2:00,
+# but Robert Elz says it's been 3:00 in Victoria since 1970
+# and perhaps the newspaper's `2:00' is referring to standard time.
+# For now we'll continue to assume 2:00s for changes since 1960.
+
+# From Eric Ulevik (1998-01-05):
+#
+# Here are some URLs to Australian time legislation. These URLs are stable,
+# and should probably be included in the data file. There are probably more
+# relevant entries in this database.
+#
+# NSW (including LHI and Broken Hill):
+# <a href="http://www.austlii.edu.au/au/legis/nsw/consol_act/sta1987137/index.html">
+# Standard Time Act 1987 (updated 1995-04-04)
+# </a>
+# ACT
+# <a href="http://www.austlii.edu.au/au/legis/act/consol_act/stasta1972279/index.html">
+# Standard Time and Summer Time Act 1972
+# </a>
+# SA
+# <a href="http://www.austlii.edu.au/au/legis/sa/consol_act/sta1898137/index.html">
+# Standard Time Act, 1898
+# </a>
+
+# From David Grosz (2005-06-13):
+# It was announced last week that Daylight Saving would be extended by
+# one week next year to allow for the 2006 Commonwealth Games.
+# Daylight Saving is now to end for next year only on the first Sunday
+# in April instead of the last Sunday in March.
+#
+# From Gwillim Law (2005-06-14):
+# I did some Googling and found that all of those states (and territory) plan
+# to extend DST together in 2006.
+# ACT: http://www.cmd.act.gov.au/mediareleases/fileread.cfm?file=86.txt
+# New South Wales: http://www.thecouriermail.news.com.au/common/story_page/0,5936,15538869%255E1702,00.html
+# South Australia: http://www.news.com.au/story/0,10117,15555031-1246,00.html
+# Tasmania: http://www.media.tas.gov.au/release.php?id=14772
+# Victoria: I wasn't able to find anything separate, but the other articles
+# allude to it.
+# But not Queensland
+# http://www.news.com.au/story/0,10117,15564030-1248,00.html.
+
+# Northern Territory
+
+# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
+# # The NORTHERN TERRITORY..  [ Courtesy N.T. Dept of the Chief Minister ]
+# #					[ Nov 1990 ]
+# #	N.T. have never utilised any DST due to sub-tropical/tropical location.
+# ...
+# Zone        Australia/North         9:30    -       CST
+
+# From Bradley White (1991-03-04):
+# A recent excerpt from an Australian newspaper...
+# the Northern Territory do[es] not have daylight saving.
+
+# Western Australia
+
+# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
+# #  The state of WESTERN AUSTRALIA..  [ Courtesy W.A. dept Premier+Cabinet ]
+# #						[ Nov 1990 ]
+# #	W.A. suffers from a great deal of public and political opposition to
+# #	DST in principle. A bill is brought before parliament in most years, but
+# #	usually defeated either in the upper house, or in party caucus
+# #	before reaching parliament.
+# ...
+# Zone	Australia/West		8:00	AW	%sST
+# ...
+# Rule	AW	1974	only	-	Oct	lastSun	2:00	1:00	D
+# Rule	AW	1975	only	-	Mar	Sun>=1	3:00	0	W
+# Rule	AW	1983	only	-	Oct	lastSun	2:00	1:00	D
+# Rule	AW	1984	only	-	Mar	Sun>=1	3:00	0	W
+
+# From Bradley White (1991-03-04):
+# A recent excerpt from an Australian newspaper...
+# Western Australia...do[es] not have daylight saving.
+
+# From John D. Newman via Bradley White (1991-11-02):
+# Western Australia is still on "winter time". Some DH in Sydney
+# rang me at home a few days ago at 6.00am. (He had just arrived at
+# work at 9.00am.)
+# W.A. is switching to Summer Time on Nov 17th just to confuse
+# everybody again.
+
+# From Arthur David Olson (1992-03-08):
+# The 1992 ending date used in the rules is a best guess;
+# it matches what was used in the past.
+
+# <a href="http://www.bom.gov.au/faq/faqgen.htm">
+# The Australian Bureau of Meteorology FAQ
+# </a> (1999-09-27) writes that Giles Meteorological Station uses
+# South Australian time even though it's located in Western Australia.
+
+# Queensland
+# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
+# #   The state of QUEENSLAND.. [ Courtesy Qld. Dept Premier Econ&Trade Devel ]
+# #						[ Dec 1990 ]
+# ...
+# Zone	Australia/Queensland	10:00	AQ	%sST
+# ...
+# Rule	AQ	1971	only	-	Oct	lastSun	2:00	1:00	D
+# Rule	AQ	1972	only	-	Feb	lastSun	3:00	0	E
+# Rule	AQ	1989	max	-	Oct	lastSun	2:00	1:00	D
+# Rule	AQ	1990	max	-	Mar	Sun>=1	3:00	0	E
+
+# From Bradley White (1989-12-24):
+# "Australia/Queensland" now observes daylight time (i.e. from
+# October 1989).
+
+# From Bradley White (1991-03-04):
+# A recent excerpt from an Australian newspaper...
+# ...Queensland...[has] agreed to end daylight saving
+# at 3am tomorrow (March 3)...
+
+# From John Mackin (1991-03-06):
+# I can certainly confirm for my part that Daylight Saving in NSW did in fact
+# end on Sunday, 3 March.  I don't know at what hour, though.  (It surprised
+# me.)
+
+# From Bradley White (1992-03-08):
+# ...there was recently a referendum in Queensland which resulted
+# in the experimental daylight saving system being abandoned. So, ...
+# ...
+# Rule	QLD	1989	1991	-	Oct	lastSun	2:00	1:00	D
+# Rule	QLD	1990	1992	-	Mar	Sun>=1	3:00	0	S
+# ...
+
+# From Arthur David Olson (1992-03-08):
+# The chosen rules the union of the 1971/1972 change and the 1989-1992 changes.
+
+# From Rives McDow (2002-04-09):
+# The most interesting region I have found consists of three towns on the
+# southern coast of Australia, population 10 at last report, along with
+# 50,000 sheep, about 100 kilometers long and 40 kilometers into the
+# continent.  The primary town is Madura, with the other towns being
+# Mundrabilla and Eucla.  According to the sheriff of Madura, the
+# residents got tired of having to change the time so often, as they are
+# located in a strip overlapping the border of South Australia and Western
+# Australia.  South Australia observes daylight saving time; Western
+# Australia does not.  The two states are one and a half hours apart.  The
+# residents decided to forget about this nonsense of changing the clock so
+# much and set the local time 20 hours and 45 minutes from the
+# international date line, or right in the middle of the time of South
+# Australia and Western Australia.  As it only affects about 10 people and
+# tourists staying at the Madura Motel, it has never really made as big an
+# impact as Broken Hill.  However, as tourist visiting there or anyone
+# calling the local sheriff will attest, they do keep time in this way.
+#
+# From Paul Eggert (2002-04-09):
+# This is confirmed by the section entitled
+# "What's the deal with time zones???" in
+# <http://www.earthsci.unimelb.edu.au/~awatkins/null.html>,
+# which says a few other things:
+#
+# * Border Village, SA also is 45 minutes ahead of Perth.
+# * The locals call this time zone "central W.A. Time" (presumably "CWAT").
+# * The locals also call Western Australia time "Perth time".
+#
+# It's not clear from context whether everyone in Western Australia
+# knows of this naming convention, or whether it's just the people in
+# this subregion.
+
+# South Australia, Tasmania, Victoria
+
+# From Arthur David Olson (1992-03-08):
+# The rules from version 7.1 follow.
+# There are lots of differences between these rules and
+# the Shepherd et al. rules.  Since the Shepherd et al. rules
+# and Bradley White's newspaper article are in agreement on
+# current DST ending dates, no worries.
+#
+# Rule	Oz	1971	1985	-	Oct	lastSun	2:00	1:00	-
+# Rule	Oz	1986	max	-	Oct	Sun<=24	2:00	1:00	-
+# Rule	Oz	1972	only	-	Feb	27	3:00	0	-
+# Rule	Oz	1973	1986	-	Mar	Sun>=1	3:00	0	-
+# Rule	Oz	1987	max	-	Mar	Sun<=21	3:00	0	-
+# Zone	Australia/Tasmania	10:00	Oz	EST
+# Zone	Australia/South		9:30	Oz	CST
+# Zone	Australia/Victoria	10:00	Oz	EST	1985 Oct lastSun 2:00
+#				10:00	1:00	EST	1986 Mar Sun<=21 3:00
+#				10:00	Oz	EST
+
+# From Robert Elz (1991-03-06):
+# I believe that the current start date for DST is "lastSun" in Oct...
+# that changed Oct 89.  That is, we're back to the
+# original rule, and that rule currently applies in all the states
+# that have dst, incl Qld.  (Certainly it was true in Vic).
+# The file I'm including says that happened in 1988, I think
+# that's incorrect, but I'm not 100% certain.
+
+# South Australia
+
+# From Bradley White (1991-03-04):
+# A recent excerpt from an Australian newspaper...
+# ...South Australia...[has] agreed to end daylight saving
+# at 3am tomorrow (March 3)...
+
+# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
+# #   The state of SOUTH AUSTRALIA....[ Courtesy of S.A. Dept of Labour ]
+# #						[ Nov 1990 ]
+# ...
+# Zone	Australia/South		9:30	AS	%sST
+# ...
+# Rule	 AS	1971	max	-	Oct	lastSun	2:00	1:00	D
+# Rule	 AS	1972	1985	-	Mar	Sun>=1	3:00	0	C
+# Rule	 AS	1986	1990	-	Mar	Sun<=21	3:00	0	C
+# Rule	 AS	1991	max	-	Mar	Sun>=1	3:00	0	C
+
+# From Bradley White (1992-03-11):
+# Recent correspondence with a friend in Adelaide
+# contained the following exchange:  "Due to the Adelaide Festival,
+# South Australia delays setting back our clocks for a few weeks."
+
+# From Robert Elz (1992-03-13):
+# I heard that apparently (or at least, it appears that)
+# South Aus will have an extra 3 weeks daylight saving every even
+# numbered year (from 1990).  That's when the Adelaide Festival
+# is on...
+
+# From Robert Elz (1992-03-16, 00:57:07 +1000):
+# DST didn't end in Adelaide today (yesterday)....
+# But whether it's "4th Sunday" or "2nd last Sunday" I have no idea whatever...
+# (it's just as likely to be "the Sunday we pick for this year"...).
+
+# From Bradley White (1994-04-11):
+# If Sun, 15 March, 1992 was at +1030 as kre asserts, but yet Sun, 20 March,
+# 1994 was at +0930 as John Connolly's customer seems to assert, then I can
+# only conclude that the actual rule is more complicated....
+
+# From John Warburton (1994-10-07):
+# The new Daylight Savings dates for South Australia ...
+# was gazetted in the Government Hansard on Sep 26 1994....
+# start on last Sunday in October and end in last sunday in March.
+
+# Tasmania
+
+# The rules for 1967 through 1991 were reported by George Shepherd
+# via Simon Woodhead via Robert Elz (1991-03-06):
+# #  The state of TASMANIA.. [Courtesy Tasmanian Dept of Premier + Cabinet ]
+# #					[ Nov 1990 ]
+
+# From Bill Hart via Guy Harris (1991-10-10):
+# Oh yes, the new daylight savings rules are uniquely tasmanian, we have
+# 6 weeks a year now when we are out of sync with the rest of Australia
+# (but nothing new about that).
+
+# From Alex Livingston (1999-10-04):
+# I heard on the ABC (Australian Broadcasting Corporation) radio news on the
+# (long) weekend that Tasmania, which usually goes its own way in this regard,
+# has decided to join with most of NSW, the ACT, and most of Victoria
+# (Australia) and start daylight saving on the last Sunday in August in 2000
+# instead of the first Sunday in October.
+
+# Sim Alam (2000-07-03) reported a legal citation for the 2000/2001 rules:
+# http://www.thelaw.tas.gov.au/fragview/42++1968+GS3A@EN+2000070300
+
+# Victoria
+
+# The rules for 1971 through 1991 were reported by George Shepherd
+# via Simon Woodhead via Robert Elz (1991-03-06):
+# #   The state of VICTORIA.. [ Courtesy of Vic. Dept of Premier + Cabinet ]
+# #						[ Nov 1990 ]
+
+# From Scott Harrington (2001-08-29):
+# On KQED's "City Arts and Lectures" program last night I heard an
+# interesting story about daylight savings time.  Dr. John Heilbron was
+# discussing his book "The Sun in the Church: Cathedrals as Solar
+# Observatories"[1], and in particular the Shrine of Remembrance[2] located
+# in Melbourne, Australia.
+#
+# Apparently the shrine's main purpose is a beam of sunlight which
+# illuminates a special spot on the floor at the 11th hour of the 11th day
+# of the 11th month (Remembrance Day) every year in memory of Australia's
+# fallen WWI soldiers.  And if you go there on Nov. 11, at 11am local time,
+# you will indeed see the sunbeam illuminate the special spot at the
+# expected time.
+#
+# However, that is only because of some special mirror contraption that had
+# to be employed, since due to daylight savings time, the true solar time of
+# the remembrance moment occurs one hour later (or earlier?).  Perhaps
+# someone with more information on this jury-rig can tell us more.
+#
+# [1] http://www.hup.harvard.edu/catalog/HEISUN.html
+# [2] http://www.shrine.org.au
+
+# New South Wales
+
+# From Arthur David Olson:
+# New South Wales and subjurisdictions have their own ideas of a fun time.
+# Based on law library research by John Mackin,
+# who notes:
+#	In Australia, time is not legislated federally, but rather by the
+#	individual states.  Thus, while such terms as ``Eastern Standard Time''
+#	[I mean, of course, Australian EST, not any other kind] are in common
+#	use, _they have NO REAL MEANING_, as they are not defined in the
+#	legislation.  This is very important to understand.
+#	I have researched New South Wales time only...
+
+# From Eric Ulevik (1999-05-26):
+# DST will start in NSW on the last Sunday of August, rather than the usual
+# October in 2000.  [See: Matthew Moore,
+# <a href="http://www.smh.com.au/news/9905/26/pageone/pageone4.html">
+# Two months more daylight saving
+# </a>
+# Sydney Morning Herald (1999-05-26).]
+
+# From Paul Eggert (1999-09-27):
+# See the following official NSW source:
+# <a href="http://dir.gis.nsw.gov.au/cgi-bin/genobject/document/other/daylightsaving/tigGmZ">
+# Daylight Saving in New South Wales.
+# </a>
+#
+# Narrabri Shire (NSW) council has announced it will ignore the extension of
+# daylight saving next year.  See:
+# <a href="http://abc.net.au/news/regionals/neweng/monthly/regeng-22jul1999-1.htm">
+# Narrabri Council to ignore daylight saving
+# </a> (1999-07-22).  For now, we'll wait to see if this really happens.
+#
+# Victoria will following NSW.  See:
+# <a href="http://abc.net.au/local/news/olympics/1999/07/item19990728112314_1.htm">
+# Vic to extend daylight saving
+# </a> (1999-07-28).
+#
+# However, South Australia rejected the DST request.  See:
+# <a href="http://abc.net.au/news/olympics/1999/07/item19990719151754_1.htm">
+# South Australia rejects Olympics daylight savings request
+# </a> (1999-07-19).
+#
+# Queensland also will not observe DST for the Olympics.  See:
+# <a href="http://abc.net.au/news/olympics/1999/06/item19990601114608_1.htm">
+# Qld says no to daylight savings for Olympics
+# </a> (1999-06-01), which quotes Queensland Premier Peter Beattie as saying
+# ``Look you've got to remember in my family when this came up last time
+# I voted for it, my wife voted against it and she said to me it's all very
+# well for you, you don't have to worry about getting the children out of
+# bed, getting them to school, getting them to sleep at night.
+# I've been through all this argument domestically...my wife rules.''
+#
+# Broken Hill will stick with South Australian time in 2000.  See:
+# <a href="http://abc.net.au/news/regionals/brokenh/monthly/regbrok-21jul1999-6.htm">
+# Broken Hill to be behind the times
+# </a> (1999-07-21).
+
+# IATA SSIM (1998-09) says that the spring 2000 change for Australian
+# Capital Territory, New South Wales except Lord Howe Island and Broken
+# Hill, and Victoria will be August 27, presumably due to the Sydney Olympics.
+
+# From Eric Ulevik, referring to Sydney's Sun Herald (2000-08-13), page 29:
+# The Queensland Premier Peter Beattie is encouraging northern NSW
+# towns to use Queensland time.
+
+# Yancowinna
+
+# From John Mackin (1989-01-04):
+# `Broken Hill' means the County of Yancowinna.
+
+# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
+# # YANCOWINNA..  [ Confirmation courtesy of Broken Hill Postmaster ]
+# #					[ Dec 1990 ]
+# ...
+# # Yancowinna uses Central Standard Time, despite [its] location on the
+# # New South Wales side of the S.A. border. Most business and social dealings
+# # are with CST zones, therefore CST is legislated by local government
+# # although the switch to Summer Time occurs in line with N.S.W. There have
+# # been years when this did not apply, but the historical data is not
+# # presently available.
+# Zone	Australia/Yancowinna	9:30	 AY	%sST
+# ...
+# Rule	 AY	1971	1985	-	Oct	lastSun	2:00	1:00	D
+# Rule	 AY	1972	only	-	Feb	lastSun	3:00	0	C
+# [followed by other Rules]
+
+# Lord Howe Island
+
+# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
+# LHI...		[ Courtesy of Pauline Van Winsen ]
+#					[ Dec 1990 ]
+# Lord Howe Island is located off the New South Wales coast, and is half an
+# hour ahead of NSW time.
+
+# From James Lonergan, Secretary, Lord Howe Island Board (2000-01-27):
+# Lord Howe Island summer time in 2000/2001 will commence on the same
+# date as the rest of NSW (i.e. 2000-08-27).  For your information the
+# Lord Howe Island Board (controlling authority for the Island) is
+# seeking the community's views on various options for summer time
+# arrangements on the Island, e.g. advance clocks by 1 full hour
+# instead of only 30 minutes.  Dependant on the wishes of residents
+# the Board may approach the NSW government to change the existing
+# arrangements.  The starting date for summer time on the Island will
+# however always coincide with the rest of NSW.
+
+# From James Lonergan, Secretary, Lord Howe Island Board (2000-10-25):
+# Lord Howe Island advances clocks by 30 minutes during DST in NSW and retards
+# clocks by 30 minutes when DST finishes. Since DST was most recently
+# introduced in NSW, the "changeover" time on the Island has been 02:00 as
+# shown on clocks on LHI. I guess this means that for 30 minutes at the start
+# of DST, LHI is actually 1 hour ahead of the rest of NSW.
+
+# From Paul Eggert (2001-02-09):
+# For Lord Howe dates we use Shanks through 1989, and Lonergan thereafter.
+# For times we use Lonergan.
+
+###############################################################################
+
+# New Zealand
+
+# From Mark Davies (1990-10-03):
+# the 1989/90 year was a trial of an extended "daylight saving" period.
+# This trial was deemed successful and the extended period adopted for
+# subsequent years (with the addition of a further week at the start).
+# source -- phone call to Ministry of Internal Affairs Head Office.
+
+# From George Shepherd via Simon Woodhead via Robert Elz (1991-03-06):
+# # The Country of New Zealand   (Australia's east island -) Gee they hate that!
+# #				   or is Australia the west island of N.Z.
+# #	[ courtesy of Geoff Tribble.. Auckland N.Z. ]
+# #				[ Nov 1990 ]
+# ...
+# Rule	NZ      1974    1988	-	Oct	lastSun	2:00	1:00	D
+# Rule	NZ	1989	max	-	Oct	Sun>=1	2:00	1:00	D
+# Rule	NZ      1975    1989	-	Mar	Sun>=1	3:00	0	S
+# Rule	NZ	1990	max	-	Mar	lastSun	3:00	0	S
+# ...
+# Zone	NZ			12:00	NZ		NZ%sT	# New Zealand
+# Zone	NZ-CHAT			12:45	-		NZ-CHAT # Chatham Island
+
+# From Arthur David Olson (1992-03-08):
+# The chosen rules use the Davies October 8 values for the start of DST in 1989
+# rather than the October 1 value.
+
+# From Paul Eggert (1995-12-19);
+# Shanks reports 2:00 for all autumn changes in Australia and New Zealand.
+# Robert Uzgalis writes that the New Zealand Daylight
+# Savings Time Order in Council dated 1990-06-18 specifies 2:00 standard
+# time on both the first Sunday in October and the third Sunday in March.
+# As with Australia, we'll assume the tradition is 2:00s, not 2:00.
+#
+# From Paul Eggert (2003-05-26):
+# The Department of Internal Affairs (DIA) maintains a brief history,
+# as does Carol Squires; see tz-link.htm for the full references.
+# Use these sources in preference to Shanks.
+#
+# For Chatham, IATA SSIM (1991/1999) gives the NZ rules but with
+# transitions at 2:45 local standard time; this confirms that Chatham
+# is always exactly 45 minutes ahead of Auckland.
+
+###############################################################################
+
+
+# Fiji
+
+# Howse writes (p 153) that in 1879 the British governor of Fiji
+# enacted an ordinance standardizing the islands on Antipodean Time
+# instead of the American system (which was one day behind).
+
+# From Rives McDow (1998-10-08):
+# Fiji will introduce DST effective 0200 local time, 1998-11-01
+# until 0300 local time 1999-02-28.  Each year the DST period will
+# be from the first Sunday in November until the last Sunday in February.
+
+# From Paul Eggert (2000-01-08):
+# IATA SSIM (1999-09) says DST ends 0100 local time.  Go with McDow.
+
+# From the BBC World Service (1998-10-31 11:32 UTC):
+# The Fijiian government says the main reasons for the time change is to
+# improve productivity and reduce road accidents.  But correspondents say it
+# also hopes the move will boost Fiji's ability to compete with other pacific
+# islands in the effort to attract tourists to witness the dawning of the new
+# millenium.
+
+# http://www.fiji.gov.fj/press/2000_09/2000_09_13-05.shtml (2000-09-13)
+# reports that Fiji has discontinued DST.
+
+# Johnston
+
+# Johnston data is from usno1995.
+
+
+# Kiribati
+
+# From Paul Eggert (1996-01-22):
+# Today's _Wall Street Journal_ (page 1) reports that Kiribati
+# ``declared it the same day throught the country as of Jan. 1, 1995''
+# as part of the competition to be first into the 21st century.
+
+
+# Kwajalein
+
+# In comp.risks 14.87 (26 August 1993), Peter Neumann writes:
+# I wonder what happened in Kwajalein, where there was NO Friday,
+# 1993-08-20.  Thursday night at midnight Kwajalein switched sides with
+# respect to the International Date Line, to rejoin its fellow islands,
+# going from 11:59 p.m. Thursday to 12:00 m. Saturday in a blink.
+
+
+# N Mariana Is, Guam
+
+# Howse writes (p 153) ``The Spaniards, on the other hand, reached the
+# Philippines and the Ladrones from America,'' and implies that the Ladrones
+# (now called the Marianas) kept American date for quite some time.
+# For now, we assume the Ladrones switched at the same time as the Philippines;
+# see Asia/Manila.
+
+# US Public Law 106-564 (2000-12-23) made UTC+10 the official standard time,
+# under the name "Chamorro Standard Time".  There is no official abbreviation,
+# but Congressman Robert A. Underwood, author of the bill that became law,
+# wrote in a press release (2000-12-27) that he will seek the use of "ChST".
+
+
+# Micronesia
+
+# Alan Eugene Davis writes (1996-03-16),
+# ``I am certain, having lived there for the past decade, that "Truk"
+# (now properly known as Chuuk) ... is in the time zone GMT+10.''
+#
+# Shanks writes that Truk switched from UTC+10 to UTC+11 on 1978-10-01;
+# ignore this for now.
+
+# From Paul Eggert (1999-10-29):
+# The Federated States of Micronesia Visitors Board writes in
+# <a href="http://www.fsmgov.org/info/clocks.html">
+# The Federated States of Micronesia - Visitor Information
+# </a> (1999-01-26)
+# that Truk and Yap are UTC+10, and Ponape and Kosrae are UTC+11.
+# We don't know when Kosrae switched from UTC+12; assume January 1 for now.
+
+
+# Midway
+
+# From Charles T O'Connor, KMTH DJ (1956),
+# quoted in the KTMH section of the Radio Heritage Collection
+# <http://radiodx.com/spdxr/KMTH.htm> (2002-12-31):
+# For the past two months we've been on what is known as Daylight
+# Saving Time.  This time has put us on air at 5am in the morning,
+# your time down there in New Zealand.  Starting September 2, 1956
+# we'll again go back to Standard Time.  This'll mean that we'll go to
+# air at 6am your time.
+#
+# From Paul Eggert (2003-03-23):
+# We don't know the date of that quote, but we'll guess they
+# started DST on June 3.  Possibly DST was observed other years
+# in Midway, but we have no record of it.
+
+
+# Pitcairn
+
+# From Rives McDow (1999-11-08):
+# A Proclamation was signed by the Governor of Pitcairn on the 27th March 1998
+# with regard to Pitcairn Standard Time.  The Proclamation is as follows.
+#
+#	The local time for general purposes in the Islands shall be
+#	Co-ordinated Universal time minus 8 hours and shall be known
+#	as Pitcairn Standard Time.
+#
+# ... I have also seen Pitcairn listed as UTC minus 9 hours in several
+# references, and can only assume that this was an error in interpretation
+# somehow in light of this proclamation.
+
+# From Rives McDow (1999-11-09):
+# The Proclamation regarding Pitcairn time came into effect on 27 April 1998
+# ... at midnight.
+
+# From Howie Phelps (1999-11-10), who talked to a Pitcairner via shortwave:
+# Betty Christian told me yesterday that their local time is the same as
+# Pacific Standard Time. They used to be 1/2 hour different from us here in
+# Sacramento but it was changed a couple of years ago.
+
+
+# Samoa
+
+# Howse writes (p 153, citing p 10 of the 1883-11-18 New York Herald)
+# that in 1879 the King of Samoa decided to change
+# ``the date in his kingdom from the Antipodean to the American system,
+# ordaining -- by a masterpiece of diplomatic flattery -- that
+# the Fourth of July should be celebrated twice in that year.''
+
+
+# Tonga
+
+# From Paul Eggert (1996-01-22):
+# Today's _Wall Street Journal_ (p 1) reports that ``Tonga has been plotting
+# to sneak ahead of [New Zealanders] by introducing daylight-saving time.''
+# Since Kiribati has moved the Date Line it's not clear what Tonga will do.
+
+# Don Mundell writes in the 1997-02-20 Tonga Chronicle
+# <a href="http://www.tongatapu.net.to/tonga/homeland/timebegins.htm">
+# How Tonga became `The Land where Time Begins'
+# </a>:
+
+# Until 1941 Tonga maintained a standard time 50 minutes ahead of NZST
+# 12 hours and 20 minutes ahead of GMT.  When New Zealand adjusted its
+# standard time in 1940s, Tonga had the choice of subtracting from its
+# local time to come on the same standard time as New Zealand or of
+# advancing its time to maintain the differential of 13 degrees
+# (approximately 50 minutes ahead of New Zealand time).
+#
+# Because His Majesty King Taufa'ahau Tupou IV, then Crown Prince
+# Tungi, preferred to ensure Tonga's title as the land where time
+# begins, the Legislative Assembly approved the latter change.
+#
+# But some of the older, more conservative members from the outer
+# islands objected. "If at midnight on Dec. 31, we move ahead 40
+# minutes, as your Royal Highness wishes, what becomes of the 40
+# minutes we have lost?"
+#
+# The Crown Prince, presented an unanswerable argument: "Remember that
+# on the World Day of Prayer, you would be the first people on Earth
+# to say your prayers in the morning."
+
+# From Paul Eggert (1999-08-12):
+# Shanks says the transition was on 1968-10-01; go with Mundell.
+
+# From Eric Ulevik (1999-05-03):
+# Tonga's director of tourism, who is also secretary of the National Millenium
+# Committee, has a plan to get Tonga back in front.
+# He has proposed a one-off move to tropical daylight saving for Tonga from
+# October to March, which has won approval in principle from the Tongan
+# Government.
+
+# From Steffen Thorsen (1999-09-09):
+# * Tonga will introduce DST in November
+#
+# I was given this link by John Letts:
+# <a hef="http://news.bbc.co.uk/hi/english/world/asia-pacific/newsid_424000/424764.stm">
+# http://news.bbc.co.uk/hi/english/world/asia-pacific/newsid_424000/424764.stm
+# </a>
+#
+# I have not been able to find exact dates for the transition in November
+# yet. By reading this article it seems like Fiji will be 14 hours ahead
+# of UTC as well, but as far as I know Fiji will only be 13 hours ahead
+# (12 + 1 hour DST).
+
+# From Arthur David Olson (1999-09-20):
+# According to <a href="http://www.tongaonline.com/news/sept1799.html>
+# http://www.tongaonline.com/news/sept1799.html
+# </a>:
+# "Daylight Savings Time will take effect on Oct. 2 through April 15, 2000
+# and annually thereafter from the first Saturday in October through the
+# third Saturday of April.  Under the system approved by Privy Council on
+# Sept. 10, clocks must be turned ahead one hour on the opening day and
+# set back an hour on the closing date."
+# Alas, no indication of the time of day.
+
+# From Rives McDow (1999-10-06):
+# Tonga started its Daylight Saving on Saturday morning October 2nd at 0200am.
+# Daylight Saving ends on April 16 at 0300am which is Sunday morning.
+
+# From Steffen Thorsen (2000-10-31):
+# Back in March I found a notice on the website http://www.tongaonline.com
+# that Tonga changed back to standard time one month early, on March 19
+# instead of the original reported date April 16. Unfortunately, the article
+# is no longer available on the site, and I did not make a copy of the
+# text, and I have forgotten to report it here.
+# (Original URL was: http://www.tongaonline.com/news/march162000.htm )
+
+# From Rives McDow (2000-12-01):
+# Tonga is observing DST as of 2000-11-04 and will stop on 2001-01-27.
+
+# From Sione Moala-Mafi (2001-09-20) via Rives McDow:
+# At 2:00am on the first Sunday of November, the standard time in the Kingdom
+# shall be moved forward by one hour to 3:00am.  At 2:00am on the last Sunday
+# of January the standard time in the Kingdom shall be moved backward by one
+# hour to 1:00am.
+
+# From Pulu 'Anau (2002-11-05):
+# The law was for 3 years, supposedly to get renewed.  It wasn't.
+
+
+# Wake
+
+# From Vernice Anderson, Personal Secretary to Philip Jessup,
+# US Ambassador At Large (oral history interview, 1971-02-02):
+#
+# Saturday, the 14th [of October, 1950] -- ...  The time was all the
+# more confusing at that point, because we had crossed the
+# International Date Line, thus getting two Sundays.  Furthermore, we
+# discovered that Wake Island had two hours of daylight saving time
+# making calculation of time in Washington difficult if not almost
+# impossible.
+#
+# http://www.trumanlibrary.org/wake/meeting.htm
+
+# From Paul Eggert (2003-03-23):
+# We have no other report of DST in Wake Island, so omit this info for now.
+
+###############################################################################
+
+# The International Date Line
+
+# From Gwillim Law (2000-01-03):
+#
+# The International Date Line is not defined by any international standard,
+# convention, or treaty.  Mapmakers are free to draw it as they please.
+# Reputable mapmakers will simply ensure that every point of land appears on
+# the correct side of the IDL, according to the date legally observed there.
+#
+# When Kiribati adopted a uniform date in 1995, thereby moving the Phoenix and
+# Line Islands to the west side of the IDL (or, if you prefer, moving the IDL
+# to the east side of the Phoenix and Line Islands), I suppose that most
+# mapmakers redrew the IDL following the boundary of Kiribati.  Even that line
+# has a rather arbitrary nature.  The straight-line boundaries between Pacific
+# island nations that are shown on many maps are based on an international
+# convention, but are not legally binding national borders.... The date is
+# governed by the IDL; therefore, even on the high seas, there may be some
+# places as late as fourteen hours later than UTC.  And, since the IDL is not
+# an international standard, there are some places on the high seas where the
+# correct date is ambiguous.
+
+# From Wikipedia <http://en.wikipedia.org/wiki/Time_zone> (2005-08-31):
+# Before 1920, all ships kept local apparent time on the high seas by setting
+# their clocks at night or at the morning sight so that, given the ship's
+# speed and direction, it would be 12 o'clock when the Sun crossed the ship's
+# meridian (12 o'clock = local apparent noon).  During 1917, at the
+# Anglo-French Conference on Time-keeping at Sea, it was recommended that all
+# ships, both military and civilian, should adopt hourly standard time zones
+# on the high seas.  Whenever a ship was within the territorial waters of any
+# nation it would use that nation's standard time.  The captain was permitted
+# to change his ship's clocks at a time of his choice following his ship's
+# entry into another zone time--he often chose midnight.  These zones were
+# adopted by all major fleets between 1920 and 1925 but not by many
+# independent merchant ships until World War II.
+
+# From Paul Eggert, using references suggested by Oscar van Vlijmen
+# (2005-03-20):
+#
+# The American Practical Navigator (2002)
+# <http://pollux.nss.nima.mil/pubs/pubs_j_apn_sections.html?rid=187>
+# talks only about the 180-degree meridian with respect to ships in
+# international waters; it ignores the international date line.
diff --git a/JodaTime/src/java/org/joda/time/tz/src/backward b/JodaTime/src/java/org/joda/time/tz/src/backward
index 4ddfe41e9..4f2b4d598 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/backward
+++ b/JodaTime/src/java/org/joda/time/tz/src/backward
@@ -1,106 +1,106 @@
-# @(#)backward	7.30
-
-# This file provides links between current names for time zones
-# and their old names.  Many names changed in late 1993.
-
-Link	Africa/Bamako		Africa/Timbuktu
-Link	America/Argentina/Catamarca	America/Argentina/ComodRivadavia
-Link	America/Adak		America/Atka
-Link	America/Argentina/Buenos_Aires	America/Buenos_Aires
-Link	America/Argentina/Catamarca	America/Catamarca
-Link	America/Argentina/Cordoba	America/Cordoba
-Link	America/Tijuana		America/Ensenada
-Link	America/Indiana/Indianapolis	America/Fort_Wayne
-Link	America/Indiana/Indianapolis	America/Indianapolis
-Link	America/Argentina/Jujuy	America/Jujuy
-Link	America/Indiana/Knox	America/Knox_IN
-Link	America/Kentucky/Louisville	America/Louisville
-Link	America/Argentina/Mendoza	America/Mendoza
-Link	America/Rio_Branco	America/Porto_Acre
-Link	America/Argentina/Cordoba	America/Rosario
-Link	America/St_Thomas	America/Virgin
-Link	Asia/Ashgabat		Asia/Ashkhabad
-Link	Asia/Chongqing		Asia/Chungking
-Link	Asia/Dhaka		Asia/Dacca
-Link	Asia/Macau		Asia/Macao
-Link	Asia/Jerusalem		Asia/Tel_Aviv
-Link	Asia/Thimphu		Asia/Thimbu
-Link	Asia/Makassar		Asia/Ujung_Pandang
-Link	Asia/Ulaanbaatar	Asia/Ulan_Bator
-Link	Australia/Sydney	Australia/ACT
-Link	Australia/Sydney	Australia/Canberra
-Link	Australia/Lord_Howe	Australia/LHI
-Link	Australia/Sydney	Australia/NSW
-Link	Australia/Darwin	Australia/North
-Link	Australia/Brisbane	Australia/Queensland
-Link	Australia/Adelaide	Australia/South
-Link	Australia/Hobart	Australia/Tasmania
-Link	Australia/Melbourne	Australia/Victoria
-Link	Australia/Perth		Australia/West
-Link	Australia/Broken_Hill	Australia/Yancowinna
-Link	America/Rio_Branco	Brazil/Acre
-Link	America/Noronha		Brazil/DeNoronha
-Link	America/Sao_Paulo	Brazil/East
-Link	America/Manaus		Brazil/West
-Link	America/Halifax		Canada/Atlantic
-Link	America/Winnipeg	Canada/Central
-Link	America/Regina		Canada/East-Saskatchewan
-Link	America/Toronto		Canada/Eastern
-Link	America/Edmonton	Canada/Mountain
-Link	America/St_Johns	Canada/Newfoundland
-Link	America/Vancouver	Canada/Pacific
-Link	America/Regina		Canada/Saskatchewan
-Link	America/Whitehorse	Canada/Yukon
-Link	America/Santiago	Chile/Continental
-Link	Pacific/Easter		Chile/EasterIsland
-Link	America/Havana		Cuba
-Link	Africa/Cairo		Egypt
-Link	Europe/Dublin		Eire
-Link	Europe/London		Europe/Belfast
-Link	Europe/Chisinau		Europe/Tiraspol
-Link	Europe/London		GB
-Link	Europe/London		GB-Eire
-Link	Etc/GMT			GMT+0
-Link	Etc/GMT			GMT-0
-Link	Etc/GMT			GMT0
-Link	Etc/GMT			Greenwich
-Link	Asia/Hong_Kong		Hongkong
-Link	Atlantic/Reykjavik	Iceland
-Link	Asia/Tehran		Iran
-Link	Asia/Jerusalem		Israel
-Link	America/Jamaica		Jamaica
-Link	Asia/Tokyo		Japan
-Link	Pacific/Kwajalein	Kwajalein
-Link	Africa/Tripoli		Libya
-Link	America/Tijuana		Mexico/BajaNorte
-Link	America/Mazatlan	Mexico/BajaSur
-Link	America/Mexico_City	Mexico/General
-Link	Pacific/Auckland	NZ
-Link	Pacific/Chatham		NZ-CHAT
-Link	America/Denver		Navajo
-Link	Asia/Shanghai		PRC
-Link	Pacific/Pago_Pago	Pacific/Samoa
-Link	Pacific/Truk		Pacific/Yap
-Link	Europe/Warsaw		Poland
-Link	Europe/Lisbon		Portugal
-Link	Asia/Taipei		ROC
-Link	Asia/Seoul		ROK
-Link	Asia/Singapore		Singapore
-Link	Europe/Istanbul		Turkey
-Link	Etc/UCT			UCT
-Link	America/Anchorage	US/Alaska
-Link	America/Adak		US/Aleutian
-Link	America/Phoenix		US/Arizona
-Link	America/Chicago		US/Central
-Link	America/Indiana/Indianapolis	US/East-Indiana
-Link	America/New_York	US/Eastern
-Link	Pacific/Honolulu	US/Hawaii
-Link	America/Indiana/Knox	US/Indiana-Starke
-Link	America/Detroit		US/Michigan
-Link	America/Denver		US/Mountain
-Link	America/Los_Angeles	US/Pacific
-Link	Pacific/Pago_Pago	US/Samoa
-Link	Etc/UTC			UTC
-Link	Etc/UTC			Universal
-Link	Europe/Moscow		W-SU
-Link	Etc/UTC			Zulu
+# @(#)backward	7.30
+
+# This file provides links between current names for time zones
+# and their old names.  Many names changed in late 1993.
+
+Link	Africa/Bamako		Africa/Timbuktu
+Link	America/Argentina/Catamarca	America/Argentina/ComodRivadavia
+Link	America/Adak		America/Atka
+Link	America/Argentina/Buenos_Aires	America/Buenos_Aires
+Link	America/Argentina/Catamarca	America/Catamarca
+Link	America/Argentina/Cordoba	America/Cordoba
+Link	America/Tijuana		America/Ensenada
+Link	America/Indiana/Indianapolis	America/Fort_Wayne
+Link	America/Indiana/Indianapolis	America/Indianapolis
+Link	America/Argentina/Jujuy	America/Jujuy
+Link	America/Indiana/Knox	America/Knox_IN
+Link	America/Kentucky/Louisville	America/Louisville
+Link	America/Argentina/Mendoza	America/Mendoza
+Link	America/Rio_Branco	America/Porto_Acre
+Link	America/Argentina/Cordoba	America/Rosario
+Link	America/St_Thomas	America/Virgin
+Link	Asia/Ashgabat		Asia/Ashkhabad
+Link	Asia/Chongqing		Asia/Chungking
+Link	Asia/Dhaka		Asia/Dacca
+Link	Asia/Macau		Asia/Macao
+Link	Asia/Jerusalem		Asia/Tel_Aviv
+Link	Asia/Thimphu		Asia/Thimbu
+Link	Asia/Makassar		Asia/Ujung_Pandang
+Link	Asia/Ulaanbaatar	Asia/Ulan_Bator
+Link	Australia/Sydney	Australia/ACT
+Link	Australia/Sydney	Australia/Canberra
+Link	Australia/Lord_Howe	Australia/LHI
+Link	Australia/Sydney	Australia/NSW
+Link	Australia/Darwin	Australia/North
+Link	Australia/Brisbane	Australia/Queensland
+Link	Australia/Adelaide	Australia/South
+Link	Australia/Hobart	Australia/Tasmania
+Link	Australia/Melbourne	Australia/Victoria
+Link	Australia/Perth		Australia/West
+Link	Australia/Broken_Hill	Australia/Yancowinna
+Link	America/Rio_Branco	Brazil/Acre
+Link	America/Noronha		Brazil/DeNoronha
+Link	America/Sao_Paulo	Brazil/East
+Link	America/Manaus		Brazil/West
+Link	America/Halifax		Canada/Atlantic
+Link	America/Winnipeg	Canada/Central
+Link	America/Regina		Canada/East-Saskatchewan
+Link	America/Toronto		Canada/Eastern
+Link	America/Edmonton	Canada/Mountain
+Link	America/St_Johns	Canada/Newfoundland
+Link	America/Vancouver	Canada/Pacific
+Link	America/Regina		Canada/Saskatchewan
+Link	America/Whitehorse	Canada/Yukon
+Link	America/Santiago	Chile/Continental
+Link	Pacific/Easter		Chile/EasterIsland
+Link	America/Havana		Cuba
+Link	Africa/Cairo		Egypt
+Link	Europe/Dublin		Eire
+Link	Europe/London		Europe/Belfast
+Link	Europe/Chisinau		Europe/Tiraspol
+Link	Europe/London		GB
+Link	Europe/London		GB-Eire
+Link	Etc/GMT			GMT+0
+Link	Etc/GMT			GMT-0
+Link	Etc/GMT			GMT0
+Link	Etc/GMT			Greenwich
+Link	Asia/Hong_Kong		Hongkong
+Link	Atlantic/Reykjavik	Iceland
+Link	Asia/Tehran		Iran
+Link	Asia/Jerusalem		Israel
+Link	America/Jamaica		Jamaica
+Link	Asia/Tokyo		Japan
+Link	Pacific/Kwajalein	Kwajalein
+Link	Africa/Tripoli		Libya
+Link	America/Tijuana		Mexico/BajaNorte
+Link	America/Mazatlan	Mexico/BajaSur
+Link	America/Mexico_City	Mexico/General
+Link	Pacific/Auckland	NZ
+Link	Pacific/Chatham		NZ-CHAT
+Link	America/Denver		Navajo
+Link	Asia/Shanghai		PRC
+Link	Pacific/Pago_Pago	Pacific/Samoa
+Link	Pacific/Truk		Pacific/Yap
+Link	Europe/Warsaw		Poland
+Link	Europe/Lisbon		Portugal
+Link	Asia/Taipei		ROC
+Link	Asia/Seoul		ROK
+Link	Asia/Singapore		Singapore
+Link	Europe/Istanbul		Turkey
+Link	Etc/UCT			UCT
+Link	America/Anchorage	US/Alaska
+Link	America/Adak		US/Aleutian
+Link	America/Phoenix		US/Arizona
+Link	America/Chicago		US/Central
+Link	America/Indiana/Indianapolis	US/East-Indiana
+Link	America/New_York	US/Eastern
+Link	Pacific/Honolulu	US/Hawaii
+Link	America/Indiana/Knox	US/Indiana-Starke
+Link	America/Detroit		US/Michigan
+Link	America/Denver		US/Mountain
+Link	America/Los_Angeles	US/Pacific
+Link	Pacific/Pago_Pago	US/Samoa
+Link	Etc/UTC			UTC
+Link	Etc/UTC			Universal
+Link	Europe/Moscow		W-SU
+Link	Etc/UTC			Zulu
diff --git a/JodaTime/src/java/org/joda/time/tz/src/europe b/JodaTime/src/java/org/joda/time/tz/src/europe
index 8782860e8..443721129 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/europe
+++ b/JodaTime/src/java/org/joda/time/tz/src/europe
@@ -1,2447 +1,2447 @@
-# @(#)europe	7.96
-# <pre>
-
-# This data is by no means authoritative; if you think you know better,
-# go ahead and edit the file (and please send any changes to
-# tz@elsie.nci.nih.gov for general use in the future).
-
-# From Paul Eggert (1999-10-29):
-# A good source for time zone historical data outside the U.S. is
-# Thomas G. Shanks, The International Atlas (5th edition),
-# San Diego: ACS Publications, Inc. (1999).
-#
-# Gwillim Law writes that a good source
-# for recent time zone data is the International Air Transport
-# Association's Standard Schedules Information Manual (IATA SSIM),
-# published semiannually.  Law sent in several helpful summaries
-# of the IATA's data after 1990.
-#
-# Except where otherwise noted, Shanks is the source for entries through 1991,
-# and IATA SSIM is the source for entries afterwards.
-#
-# Other sources occasionally used include:
-#
-#	Edward W. Whitman, World Time Differences,
-#	Whitman Publishing Co, 2 Niagara Av, Ealing, London (undated),
-#	which I found in the UCLA library.
-#
-#	<a href="http://www.pettswoodvillage.co.uk/Daylight_Savings_William_Willett.pdf">
-#	William Willett, The Waste of Daylight, 19th edition
-#	</a> (1914-03)
-#
-#	Brazil's Departamento Servico da Hora (DSH),
-#	<a href="http://pcdsh01.on.br/HISTHV.htm">
-#	History of Summer Time
-#	</a> (1998-09-21, in Portuguese)
-
-#
-# I invented the abbreviations marked `*' in the following table;
-# the rest are from earlier versions of this file, or from other sources.
-# Corrections are welcome!
-#                   std dst  2dst
-#                   LMT           Local Mean Time
-#       -4:00       AST ADT       Atlantic
-#       -3:00       WGT WGST      Western Greenland*
-#       -1:00       EGT EGST      Eastern Greenland*
-#        0:00       GMT BST  BDST Greenwich, British Summer
-#        0:00       GMT IST       Greenwich, Irish Summer
-#        0:00       WET WEST WEMT Western Europe
-#        0:19:32.13 AMT NST       Amsterdam, Netherlands Summer (1835-1937)*
-#        0:20       NET NEST      Netherlands (1937-1940)*
-#        1:00       CET CEST CEMT Central Europe
-#        1:00:14    SET           Swedish (1879-1899)*
-#        2:00       EET EEST      Eastern Europe
-#        3:00       MSK MSD       Moscow
-#
-# A reliable and entertaining source about time zones, especially in Britain,
-# Derek Howse, Greenwich time and longitude, Philip Wilson Publishers (1997).
-
-# From Peter Ilieve (1994-12-04),
-# The original six [EU members]: Belgium, France, (West) Germany, Italy,
-# Luxembourg, the Netherlands.
-# Plus, from 1 Jan 73: Denmark, Ireland, United Kingdom.
-# Plus, from 1 Jan 81: Greece.
-# Plus, from 1 Jan 86: Spain, Portugal.
-# Plus, from 1 Jan 95: Austria, Finland, Sweden. (Norway negotiated terms for
-# entry but in a referendum on 28 Nov 94 the people voted No by 52.2% to 47.8%
-# on a turnout of 88.6%. This was almost the same result as Norway's previous
-# referendum in 1972, they are the only country to have said No twice.
-# Referendums in the other three countries voted Yes.)
-# ...
-# Estonia ... uses EU dates but not at 01:00 GMT, they use midnight GMT.
-# I don't think they know yet what they will do from 1996 onwards.
-# ...
-# There shouldn't be any [current members who are not using EU rules].
-# A Directive has the force of law, member states are obliged to enact
-# national law to implement it. The only contentious issue was the
-# different end date for the UK and Ireland, and this was always allowed
-# in the Directive.
-
-
-###############################################################################
-
-# Britain (United Kingdom) and Ireland (Eire)
-
-# From Peter Ilieve (1994-07-06):
-#
-# On 17 Jan 1994 the Independent, a UK quality newspaper, had a piece about
-# historical vistas along the Thames in west London. There was a photo
-# and a sketch map showing some of the sightlines involved. One paragraph
-# of the text said:
-#
-# `An old stone obelisk marking a forgotten terrestrial meridian stands
-# beside the river at Kew. In the 18th century, before time and longitude
-# was standardised by the Royal Observatory in Greenwich, scholars observed
-# this stone and the movement of stars from Kew Observatory nearby. They
-# made their calculations and set the time for the Horse Guards and Parliament,
-# but now the stone is obscured by scrubwood and can only be seen by walking
-# along the towpath within a few yards of it.'
-#
-# I have a one inch to one mile map of London and my estimate of the stone's
-# position is 51 deg. 28' 30" N, 0 deg. 18' 45" W. The longitude should
-# be within about +-2". The Ordnance Survey grid reference is TQ172761.
-#
-# [This yields GMTOFF = -0:01:15 for London LMT in the 18th century.]
-
-# From Paul Eggert (1993-11-18):
-#
-# Howse writes that Britain was the first country to use standard time.
-# The railways cared most about the inconsistencies of local mean time,
-# and it was they who forced a uniform time on the country.
-# The original idea was credited to Dr. William Hyde Wollaston (1766-1828)
-# and was popularized by Abraham Follett Osler (1808-1903).
-# The first railway to adopt London time was the Great Western Railway
-# in November 1840; other railways followed suit, and by 1847 most
-# (though not all) railways used London time.  On 1847-09-22 the
-# Railway Clearing House, an industry standards body, recommended that GMT be
-# adopted at all stations as soon as the General Post Office permitted it.
-# The transition occurred on 12-01 for the L&NW, the Caledonian,
-# and presumably other railways; the January 1848 Bradshaw's lists many
-# railways as using GMT.  By 1855 the vast majority of public
-# clocks in Britain were set to GMT (though some, like the great clock
-# on Tom Tower at Christ Church, Oxford, were fitted with two minute hands,
-# one for local time and one for GMT).  The last major holdout was the legal
-# system, which stubbornly stuck to local time for many years, leading
-# to oddities like polls opening at 08:13 and closing at 16:13.
-# The legal system finally switched to GMT when the Statutes (Definition
-# of Time) Act took effect; it received the Royal Assent on 1880-08-02.
-#
-# In the tables below, we condense this complicated story into a single
-# transition date for London, namely 1847-12-01.  We don't know as much
-# about Dublin, so we use 1880-08-02, the legal transition time.
-
-# From Paul Eggert (2003-09-27):
-# Summer Time was first seriously proposed by William Willett (1857-1915),
-# a London builder and member of the Royal Astronomical Society
-# who circulated a pamphlet ``The Waste of Daylight'' (1907)
-# that proposed advancing clocks 20 minutes on each of four Sundays in April,
-# and retarding them by the same amount on four Sundays in September.
-# A bill was drafted in 1909 and introduced in Parliament several times,
-# but it met with ridicule and opposition, especially from farming interests.
-# Later editions of the pamphlet proposed one-hour summer time, and
-# it was eventually adopted as a wartime measure in 1916.
-# See: Summer Time Arrives Early, The Times (2000-05-18).
-# A monument to Willett was unveiled on 1927-05-21, in an open space in
-# a 45-acre wood near Chislehurst, Kent that was purchased by popular
-# subscription and open to the public.  On the south face of the monolith,
-# designed by G. W. Miller, is the the William Willett Memorial Sundial,
-# which is permanently set to Summer Time.
-
-# From Winston Churchill (1934-04-28):
-# It is one of the paradoxes of history that we should owe the boon of
-# summer time, which gives every year to the people of this country
-# between 160 and 170 hours more daylight leisure, to a war which
-# plunged Europe into darkness for four years, and shook the
-# foundations of civilization throughout the world.
-#	-- <a href="http://www.winstonchurchill.org/fh114willett.htm">
-#	"A Silent Toast to William Willett", Pictorial Weekly
-#	</a>
-
-# From Paul Eggert (1996-09-03):
-# The OED Supplement says that the English originally said ``Daylight Saving''
-# when they were debating the adoption of DST in 1908; but by 1916 this
-# term appears only in quotes taken from DST's opponents, whereas the
-# proponents (who eventually won the argument) are quoted as using ``Summer''.
-
-# From Arthur David Olson (1989-01-19):
-#
-# A source at the British Information Office in New York avers that it's
-# known as "British" Summer Time in all parts of the United Kingdom.
-
-# Date: 4 Jan 89 08:57:25 GMT (Wed)
-# From: Jonathan Leffler
-# [British Summer Time] is fixed annually by Act of Parliament.
-# If you can predict what Parliament will do, you should be in
-# politics making a fortune, not computing.
-
-# From Chris Carrier (1996-06-14):
-# I remember reading in various wartime issues of the London Times the
-# acronym BDST for British Double Summer Time.  Look for the published
-# time of sunrise and sunset in The Times, when BDST was in effect, and
-# if you find a zone reference it will say, "All times B.D.S.T."
-
-# From Joseph S. Myers (1999-09-02):
-# ... some military cables (WO 219/4100 - this is a copy from the
-# main SHAEF archives held in the US National Archives, SHAEF/5252/8/516)
-# agree that the usage is BDST (this appears in a message dated 17 Feb 1945).
-
-# From Joseph S. Myers (2000-10-03):
-# On 18th April 1941, Sir Stephen Tallents of the BBC wrote to Sir
-# Alexander Maxwell of the Home Office asking whether there was any
-# official designation; the reply of the 21st was that there wasn't
-# but he couldn't think of anything better than the "Double British
-# Summer Time" that the BBC had been using informally.
-# http://student.cusu.cam.ac.uk/~jsm28/british-time/bbc-19410418.png
-# http://student.cusu.cam.ac.uk/~jsm28/british-time/ho-19410421.png
-
-# From Sir Alexander Maxwell in the above-mentioned letter (1941-04-21):
-# [N]o official designation has as far as I know been adopted for the time
-# which is to be introduced in May....
-# I cannot think of anything better than "Double British Summer Time"
-# which could not be said to run counter to any official description.
-
-# From Paul Eggert (2000-10-02):
-# Howse writes (p 157) `DBST' too, but `BDST' seems to have been common
-# and follows the more usual convention of putting the location name first,
-# so we use `BDST'.
-
-# Peter Ilieve (1998-04-19) described at length
-# the history of summer time legislation in the United Kingdom.
-# Since 1998 Joseph S. Myers has been updating
-# and extending this list, which can be found in
-# <a href="http://student.cusu.cam.ac.uk/~jsm28/british-time/">
-# History of legal time in Britain
-# </a>
-
-# From Joseph S. Myers (1998-01-06):
-#
-# The legal time in the UK outside of summer time is definitely GMT, not UTC;
-# see Lord Tanlaw's speech
-# <a href="http://www.parliament.the-stationery-office.co.uk/pa/ld199697/ldhansrd/pdvn/lds97/text/70611-20.htm#70611-20_head0">
-# (Lords Hansard 11 June 1997 columns 964 to 976)
-# </a>.
-
-# From Paul Eggert (2001-07-18):
-#
-# For lack of other data, we'll follow Shanks for Eire in 1940-1948.
-#
-# Given Ilieve and Myers's data, the following claims by Shanks are incorrect:
-#     * Wales did not switch from GMT to daylight saving time until
-#	1921 Apr 3, when they began to conform with the rest of Great Britain.
-# Actually, Wales was identical after 1880.
-#     * Eire had two transitions on 1916 Oct 1.
-# It actually just had one transition.
-#     * Northern Ireland used single daylight saving time throughout WW II.
-# Actually, it conformed to Britain.
-#     * GB-Eire changed standard time to 1 hour ahead of GMT on 1968-02-18.
-# Actually, that date saw the usual switch to summer time.
-# Standard time was not changed until 1968-10-27 (the clocks didn't change).
-#
-# Here is another incorrect claim by Shanks:
-#     * Jersey, Guernsey, and the Isle of Man did not switch from GMT
-#	to daylight saving time until 1921 Apr 3, when they began to
-#	conform with Great Britain.
-# S.R.&O. 1916, No. 382 and HO 45/10811/312364 (quoted above) say otherwise.
-#
-# The following claim by Shanks is possible though doubtful;
-# we'll ignore it for now.
-#     * Dublin's 1971-10-31 switch was at 02:00, even though London's was 03:00.
-#
-#
-# Whitman says Dublin Mean Time was -0:25:21, which is more precise than Shanks.
-# Perhaps this was Dunsink Observatory Time, as Dunsink Observatory
-# (8 km NW of Dublin's center) seemingly was to Dublin as Greenwich was
-# to London.  For example:
-#
-#   "Timeball on the ballast office is down.  Dunsink time."
-#   -- James Joyce, Ulysses
-
-# From Joseph S. Myers (2005-01-26):
-# Irish laws are available online at www.irishstatutebook.ie.  These include 
-# various relating to legal time, for example:
-# 
-# ZZA13Y1923.html ZZA12Y1924.html ZZA8Y1925.html ZZSIV20PG1267.html
-# 
-# ZZSI71Y1947.html ZZSI128Y1948.html ZZSI23Y1949.html ZZSI41Y1950.html
-# ZZSI27Y1951.html ZZSI73Y1952.html
-# 
-# ZZSI11Y1961.html ZZSI232Y1961.html ZZSI182Y1962.html
-# ZZSI167Y1963.html ZZSI257Y1964.html ZZSI198Y1967.html
-# ZZA23Y1968.html ZZA17Y1971.html
-# 
-# ZZSI67Y1981.html ZZSI212Y1982.html ZZSI45Y1986.html
-# ZZSI264Y1988.html ZZSI52Y1990.html ZZSI371Y1992.html
-# ZZSI395Y1994.html ZZSI484Y1997.html ZZSI506Y2001.html
-#
-# [These are all relative to the root, e.g., the first is
-# <http://www.irishstatutebook.ie/ZZA13Y1923.html>.]
-# 
-# (These are those I found, but there could be more.  In any case these 
-# should allow various updates to the comments in the europe file to cover 
-# the laws applicable in Ireland.)
-# 
-# (Note that the time in the Republic of Ireland since 1968 has been defined 
-# in terms of standard time being GMT+1 with a period of winter time when it 
-# is GMT, rather than standard time being GMT with a period of summer time 
-# being GMT+1.)
-
-# From Paul Eggert (1999-03-28):
-# Clive Feather (<news:859845706.26043.0@office.demon.net>, 1997-03-31)
-# reports that Folkestone (Cheriton) Shuttle Terminal uses Concession Time
-# (CT), equivalent to French civil time.
-# Julian Hill (<news:36118128.5A14@virgin.net>, 1998-09-30) reports that
-# trains between Dollands Moor (the freight facility next door)
-# and Frethun run in CT.
-# My admittedly uninformed guess is that the terminal has two authorities,
-# the French concession operators and the British civil authorities,
-# and that the time depends on who you're talking to.
-# If, say, the British police were called to the station for some reason,
-# I would expect the official police report to use GMT/BST and not CET/CEST.
-# This is a borderline case, but for now let's stick to GMT/BST.
-
-# From an anonymous contributor (1996-06-02):
-# The law governing time in Ireland is under Statutory Instrument SI 395/94,
-# which gives force to European Union 7th Council Directive # 94/21/EC.
-# Under this directive, the Minister for Justice in Ireland makes appropriate
-# regulations. I spoke this morning with the Secretary of the Department of
-# Justice (tel +353 1 678 9711) who confirmed to me that the correct name is
-# "Irish Summer Time", abbreviated to "IST".
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-# Summer Time Act, 1916
-Rule	GB-Eire	1916	only	-	May	21	2:00s	1:00	BST
-Rule	GB-Eire	1916	only	-	Oct	 1	2:00s	0	GMT
-# S.R.&O. 1917, No. 358
-Rule	GB-Eire	1917	only	-	Apr	 8	2:00s	1:00	BST
-Rule	GB-Eire	1917	only	-	Sep	17	2:00s	0	GMT
-# S.R.&O. 1918, No. 274
-Rule	GB-Eire	1918	only	-	Mar	24	2:00s	1:00	BST
-Rule	GB-Eire	1918	only	-	Sep	30	2:00s	0	GMT
-# S.R.&O. 1919, No. 297
-Rule	GB-Eire	1919	only	-	Mar	30	2:00s	1:00	BST
-Rule	GB-Eire	1919	only	-	Sep	29	2:00s	0	GMT
-# S.R.&O. 1920, No. 458
-Rule	GB-Eire	1920	only	-	Mar	28	2:00s	1:00	BST
-# S.R.&O. 1920, No. 1844
-Rule	GB-Eire	1920	only	-	Oct	25	2:00s	0	GMT
-# S.R.&O. 1921, No. 363
-Rule	GB-Eire	1921	only	-	Apr	 3	2:00s	1:00	BST
-Rule	GB-Eire	1921	only	-	Oct	 3	2:00s	0	GMT
-# S.R.&O. 1922, No. 264
-Rule	GB-Eire	1922	only	-	Mar	26	2:00s	1:00	BST
-Rule	GB-Eire	1922	only	-	Oct	 8	2:00s	0	GMT
-# The Summer Time Act, 1922
-Rule	GB-Eire	1923	only	-	Apr	Sun>=16	2:00s	1:00	BST
-Rule	GB-Eire	1923	1924	-	Sep	Sun>=16	2:00s	0	GMT
-Rule	GB-Eire	1924	only	-	Apr	Sun>=9	2:00s	1:00	BST
-Rule	GB-Eire	1925	1926	-	Apr	Sun>=16	2:00s	1:00	BST
-# The Summer Time Act, 1925
-Rule	GB-Eire	1925	1938	-	Oct	Sun>=2	2:00s	0	GMT
-Rule	GB-Eire	1927	only	-	Apr	Sun>=9	2:00s	1:00	BST
-Rule	GB-Eire	1928	1929	-	Apr	Sun>=16	2:00s	1:00	BST
-Rule	GB-Eire	1930	only	-	Apr	Sun>=9	2:00s	1:00	BST
-Rule	GB-Eire	1931	1932	-	Apr	Sun>=16	2:00s	1:00	BST
-Rule	GB-Eire	1933	only	-	Apr	Sun>=9	2:00s	1:00	BST
-Rule	GB-Eire	1934	only	-	Apr	Sun>=16	2:00s	1:00	BST
-Rule	GB-Eire	1935	only	-	Apr	Sun>=9	2:00s	1:00	BST
-Rule	GB-Eire	1936	1937	-	Apr	Sun>=16	2:00s	1:00	BST
-Rule	GB-Eire	1938	only	-	Apr	Sun>=9	2:00s	1:00	BST
-Rule	GB-Eire	1939	only	-	Apr	Sun>=16	2:00s	1:00	BST
-# S.R.&O. 1939, No. 1379
-Rule	GB-Eire	1939	only	-	Nov	Sun>=16	2:00s	0	GMT
-# S.R.&O. 1940, No. 172 and No. 1883
-Rule	GB-Eire	1940	only	-	Feb	Sun>=23	2:00s	1:00	BST
-# S.R.&O. 1941, No. 476
-Rule	GB-Eire	1941	only	-	May	Sun>=2	1:00s	2:00	BDST
-Rule	GB-Eire	1941	1943	-	Aug	Sun>=9	1:00s	1:00	BST
-# S.R.&O. 1942, No. 506
-Rule	GB-Eire	1942	1944	-	Apr	Sun>=2	1:00s	2:00	BDST
-# S.R.&O. 1944, No. 932
-Rule	GB-Eire	1944	only	-	Sep	Sun>=16	1:00s	1:00	BST
-# S.R.&O. 1945, No. 312
-Rule	GB-Eire	1945	only	-	Apr	Mon>=2	1:00s	2:00	BDST
-Rule	GB-Eire	1945	only	-	Jul	Sun>=9	1:00s	1:00	BST
-# S.R.&O. 1945, No. 1208
-Rule	GB-Eire	1945	1946	-	Oct	Sun>=2	2:00s	0	GMT
-Rule	GB-Eire	1946	only	-	Apr	Sun>=9	2:00s	1:00	BST
-# The Summer Time Act, 1947
-Rule	GB-Eire	1947	only	-	Mar	16	2:00s	1:00	BST
-Rule	GB-Eire	1947	only	-	Apr	13	1:00s	2:00	BDST
-Rule	GB-Eire	1947	only	-	Aug	10	1:00s	1:00	BST
-Rule	GB-Eire	1947	only	-	Nov	 2	2:00s	0	GMT
-# Summer Time Order, 1948 (S.I. 1948/495)
-Rule	GB-Eire	1948	only	-	Mar	14	2:00s	1:00	BST
-Rule	GB-Eire	1948	only	-	Oct	31	2:00s	0	GMT
-# Summer Time Order, 1949 (S.I. 1949/373)
-Rule	GB-Eire	1949	only	-	Apr	 3	2:00s	1:00	BST
-Rule	GB-Eire	1949	only	-	Oct	30	2:00s	0	GMT
-# Summer Time Order, 1950 (S.I. 1950/518)
-# Summer Time Order, 1951 (S.I. 1951/430)
-# Summer Time Order, 1952 (S.I. 1952/451)
-Rule	GB-Eire	1950	1952	-	Apr	Sun>=14	2:00s	1:00	BST
-Rule	GB-Eire	1950	1952	-	Oct	Sun>=21	2:00s	0	GMT
-# revert to the rules of the Summer Time Act, 1925
-Rule	GB-Eire	1953	only	-	Apr	Sun>=16	2:00s	1:00	BST
-Rule	GB-Eire	1953	1960	-	Oct	Sun>=2	2:00s	0	GMT
-Rule	GB-Eire	1954	only	-	Apr	Sun>=9	2:00s	1:00	BST
-Rule	GB-Eire	1955	1956	-	Apr	Sun>=16	2:00s	1:00	BST
-Rule	GB-Eire	1957	only	-	Apr	Sun>=9	2:00s	1:00	BST
-Rule	GB-Eire	1958	1959	-	Apr	Sun>=16	2:00s	1:00	BST
-Rule	GB-Eire	1960	only	-	Apr	Sun>=9	2:00s	1:00	BST
-# Summer Time Order, 1961 (S.I. 1961/71)
-# Summer Time (1962) Order, 1961 (S.I. 1961/2465)
-# Summer Time Order, 1963 (S.I. 1963/81)
-Rule	GB-Eire	1961	1963	-	Mar	lastSun	2:00s	1:00	BST
-Rule	GB-Eire	1961	1968	-	Oct	Sun>=23	2:00s	0	GMT
-# Summer Time (1964) Order, 1963 (S.I. 1963/2101)
-# Summer Time Order, 1964 (S.I. 1964/1201)
-# Summer Time Order, 1967 (S.I. 1967/1148)
-Rule	GB-Eire	1964	1967	-	Mar	Sun>=19	2:00s	1:00	BST
-# Summer Time Order, 1968 (S.I. 1968/117)
-Rule	GB-Eire	1968	only	-	Feb	18	2:00s	1:00	BST
-# The British Standard Time Act, 1968
-#	(no summer time)
-# The Summer Time Act, 1972
-Rule	GB-Eire	1972	1980	-	Mar	Sun>=16	2:00s	1:00	BST
-Rule	GB-Eire	1972	1980	-	Oct	Sun>=23	2:00s	0	GMT
-# Summer Time Order, 1980 (S.I. 1980/1089)
-# Summer Time Order, 1982 (S.I. 1982/1673)
-# Summer Time Order, 1986 (S.I. 1986/223)
-# Summer Time Order, 1988 (S.I. 1988/931)
-Rule	GB-Eire	1981	1995	-	Mar	lastSun	1:00u	1:00	BST
-Rule	GB-Eire 1981	1989	-	Oct	Sun>=23	1:00u	0	GMT
-# Summer Time Order, 1989 (S.I. 1989/985)
-# Summer Time Order, 1992 (S.I. 1992/1729)
-# Summer Time Order 1994 (S.I. 1994/2798)
-Rule	GB-Eire 1990	1995	-	Oct	Sun>=22	1:00u	0	GMT
-# Summer Time Order 1997 (S.I. 1997/2982)
-# See EU for rules starting in 1996.
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/London	-0:01:15 -	LMT	1847 Dec  1
-			 0:00	GB-Eire	%s	1968 Oct 27
-			 1:00	-	BST	1971 Oct 31 2:00u
-			 0:00	GB-Eire	%s	1996
-			 0:00	EU	GMT/BST
-Zone	Europe/Dublin	-0:25:00 -	LMT	1880 Aug  2
-			-0:25:21 -	DMT	1916 May 21 2:00
-			-0:25:21 1:00	IST	1916 Oct  1 2:00s
-			 0:00	GB-Eire	%s	1921 Dec  6 # independence
-			 0:00	GB-Eire	GMT/IST	1940 Feb 25 2:00
-			 0:00	1:00	IST	1946 Oct  6 2:00
-			 0:00	-	GMT	1947 Mar 16 2:00
-			 0:00	1:00	IST	1947 Nov  2 2:00
-			 0:00	-	GMT	1948 Apr 18 2:00
-			 0:00	GB-Eire	GMT/IST	1968 Oct 27
-			 1:00	-	IST	1971 Oct 31 2:00u
-			 0:00	GB-Eire	GMT/IST	1996
-			 0:00	EU	GMT/IST
-
-###############################################################################
-
-# Continental Europe
-
-# EU rules are for the European Union, previously known as the EC, EEC,
-# Common Market, etc.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	EU	1977	1980	-	Apr	Sun>=1	 1:00u	1:00	S
-Rule	EU	1977	only	-	Sep	lastSun	 1:00u	0	-
-Rule	EU	1978	only	-	Oct	 1	 1:00u	0	-
-Rule	EU	1979	1995	-	Sep	lastSun	 1:00u	0	-
-Rule	EU	1981	max	-	Mar	lastSun	 1:00u	1:00	S
-Rule	EU	1996	max	-	Oct	lastSun	 1:00u	0	-
-# The most recent directive covers the years starting in 2002.  See:
-# <a href="http://europa.eu.int/eur-lex/en/lif/dat/2000/en_300L0084.html"
-# Directive 2000/84/EC of the European Parliament and of the Council
-# of 19 January 2001 on summer-time arrangements.
-# </a>
-
-# W-Eur differs from EU only in that W-Eur uses standard time.
-Rule	W-Eur	1977	1980	-	Apr	Sun>=1	 1:00s	1:00	S
-Rule	W-Eur	1977	only	-	Sep	lastSun	 1:00s	0	-
-Rule	W-Eur	1978	only	-	Oct	 1	 1:00s	0	-
-Rule	W-Eur	1979	1995	-	Sep	lastSun	 1:00s	0	-
-Rule	W-Eur	1981	max	-	Mar	lastSun	 1:00s	1:00	S
-Rule	W-Eur	1996	max	-	Oct	lastSun	 1:00s	0	-
-
-# Older C-Eur rules are for convenience in the tables.
-# From 1977 on, C-Eur differs from EU only in that C-Eur uses standard time.
-Rule	C-Eur	1916	only	-	Apr	30	23:00	1:00	S
-Rule	C-Eur	1916	only	-	Oct	 1	 1:00	0	-
-Rule	C-Eur	1917	1918	-	Apr	Mon>=15	 2:00s	1:00	S
-Rule	C-Eur	1917	1918	-	Sep	Mon>=15	 2:00s	0	-
-Rule	C-Eur	1940	only	-	Apr	 1	 2:00s	1:00	S
-Rule	C-Eur	1942	only	-	Nov	 2	 2:00s	0	-
-Rule	C-Eur	1943	only	-	Mar	29	 2:00s	1:00	S
-Rule	C-Eur	1943	only	-	Oct	 4	 2:00s	0	-
-Rule	C-Eur	1944	only	-	Apr	 3	 2:00s	1:00	S
-# Whitman gives 1944 Oct 7; go with Shanks.
-Rule	C-Eur	1944	only	-	Oct	 2	 2:00s	0	-
-Rule	C-Eur	1977	1980	-	Apr	Sun>=1	 2:00s	1:00	S
-Rule	C-Eur	1977	only	-	Sep	lastSun	 2:00s	0	-
-Rule	C-Eur	1978	only	-	Oct	 1	 2:00s	0	-
-Rule	C-Eur	1979	1995	-	Sep	lastSun	 2:00s	0	-
-Rule	C-Eur	1981	max	-	Mar	lastSun	 2:00s	1:00	S
-Rule	C-Eur	1996	max	-	Oct	lastSun	 2:00s	0	-
-
-# E-Eur differs from EU only in that E-Eur switches at midnight local time.
-Rule	E-Eur	1977	1980	-	Apr	Sun>=1	 0:00	1:00	S
-Rule	E-Eur	1977	only	-	Sep	lastSun	 0:00	0	-
-Rule	E-Eur	1978	only	-	Oct	 1	 0:00	0	-
-Rule	E-Eur	1979	1995	-	Sep	lastSun	 0:00	0	-
-Rule	E-Eur	1981	max	-	Mar	lastSun	 0:00	1:00	S
-Rule	E-Eur	1996	max	-	Oct	lastSun	 0:00	0	-
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Russia	1917	only	-	Jul	 1	23:00	1:00	MST	# Moscow Summer Time
-Rule	Russia	1917	only	-	Dec	28	 0:00	0	MMT	# Moscow Mean Time
-Rule	Russia	1918	only	-	May	31	22:00	2:00	MDST	# Moscow Double Summer Time
-Rule	Russia	1918	only	-	Sep	16	 1:00	1:00	MST
-Rule	Russia	1919	only	-	May	31	23:00	2:00	MDST
-Rule	Russia	1919	only	-	Jul	 1	 2:00	1:00	S
-Rule	Russia	1919	only	-	Aug	16	 0:00	0	-
-Rule	Russia	1921	only	-	Feb	14	23:00	1:00	S
-Rule	Russia	1921	only	-	Mar	20	23:00	2:00	M # Midsummer
-Rule	Russia	1921	only	-	Sep	 1	 0:00	1:00	S
-Rule	Russia	1921	only	-	Oct	 1	 0:00	0	-
-# Act No.925 of the Council of Ministers of the USSR (1980-10-24):
-Rule	Russia	1981	1984	-	Apr	 1	 0:00	1:00	S
-Rule	Russia	1981	1983	-	Oct	 1	 0:00	0	-
-# Act No.967 of the Council of Ministers of the USSR (1984-09-13), repeated in
-# Act No.227 of the Council of Ministers of the USSR (1989-03-14):
-Rule	Russia	1984	1991	-	Sep	lastSun	 2:00s	0	-
-Rule	Russia	1985	1991	-	Mar	lastSun	 2:00s	1:00	S
-#
-Rule	Russia	1992	only	-	Mar	lastSat	 23:00	1:00	S
-Rule	Russia	1992	only	-	Sep	lastSat	 23:00	0	-
-Rule	Russia	1993	max	-	Mar	lastSun	 2:00s	1:00	S
-Rule	Russia	1993	1995	-	Sep	lastSun	 2:00s	0	-
-Rule	Russia	1996	max	-	Oct	lastSun	 2:00s	0	-
-
-# These are for backward compatibility with older versions.
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	WET		0:00	EU	WE%sT
-Zone	CET		1:00	C-Eur	CE%sT
-Zone	MET		1:00	C-Eur	ME%sT
-Zone	EET		2:00	EU	EE%sT
-
-# Previous editions of this database used abbreviations like MET DST
-# for Central European Summer Time, but this didn't agree with common usage.
-
-# From Markus Kuhn (1996-07-12):
-# The official German names ... are
-#
-#	Mitteleuropaeische Zeit (MEZ)         = UTC+01:00
-#	Mitteleuropaeische Sommerzeit (MESZ)  = UTC+02:00
-#
-# as defined in the German Time Act (Gesetz ueber die Zeitbestimmung (ZeitG),
-# 1978-07-25, Bundesgesetzblatt, Jahrgang 1978, Teil I, S. 1110-1111)....
-# I wrote ... to the German Federal Physical-Technical Institution
-#
-#	Physikalisch-Technische Bundesanstalt (PTB)
-#	Laboratorium 4.41 "Zeiteinheit"
-#	Postfach 3345
-#	D-38023 Braunschweig
-#	phone: +49 531 592-0
-#
-# ... I received today an answer letter from Dr. Peter Hetzel, head of the PTB
-# department for time and frequency transmission.  He explained that the
-# PTB translates MEZ and MESZ into English as
-#
-#	Central European Time (CET)         = UTC+01:00
-#	Central European Summer Time (CEST) = UTC+02:00
-
-
-# Albania
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Albania	1940	only	-	Jun	16	0:00	1:00	S
-Rule	Albania	1942	only	-	Nov	 2	3:00	0	-
-Rule	Albania	1943	only	-	Mar	29	2:00	1:00	S
-Rule	Albania	1943	only	-	Apr	10	3:00	0	-
-Rule	Albania	1974	only	-	May	 4	0:00	1:00	S
-Rule	Albania	1974	only	-	Oct	 2	0:00	0	-
-Rule	Albania	1975	only	-	May	 1	0:00	1:00	S
-Rule	Albania	1975	only	-	Oct	 2	0:00	0	-
-Rule	Albania	1976	only	-	May	 2	0:00	1:00	S
-Rule	Albania	1976	only	-	Oct	 3	0:00	0	-
-Rule	Albania	1977	only	-	May	 8	0:00	1:00	S
-Rule	Albania	1977	only	-	Oct	 2	0:00	0	-
-Rule	Albania	1978	only	-	May	 6	0:00	1:00	S
-Rule	Albania	1978	only	-	Oct	 1	0:00	0	-
-Rule	Albania	1979	only	-	May	 5	0:00	1:00	S
-Rule	Albania	1979	only	-	Sep	30	0:00	0	-
-Rule	Albania	1980	only	-	May	 3	0:00	1:00	S
-Rule	Albania	1980	only	-	Oct	 4	0:00	0	-
-Rule	Albania	1981	only	-	Apr	26	0:00	1:00	S
-Rule	Albania	1981	only	-	Sep	27	0:00	0	-
-Rule	Albania	1982	only	-	May	 2	0:00	1:00	S
-Rule	Albania	1982	only	-	Oct	 3	0:00	0	-
-Rule	Albania	1983	only	-	Apr	18	0:00	1:00	S
-Rule	Albania	1983	only	-	Oct	 1	0:00	0	-
-Rule	Albania	1984	only	-	Apr	 1	0:00	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Tirane	1:19:20 -	LMT	1914
-			1:00	-	CET	1940 Jun 16
-			1:00	Albania	CE%sT	1984 Jul
-			1:00	EU	CE%sT
-
-# Andorra
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Andorra	0:06:04 -	LMT	1901
-			0:00	-	WET	1946 Sep 30
-			1:00	-	CET	1985 Mar 31 2:00
-			1:00	EU	CE%sT
-
-# Austria
-
-# From Paul Eggert (2003-02-28): Shanks gives 1918-06-16 and
-# 1945-11-18, but the Austrian Federal Office of Metrology and
-# Surveying (BEV) gives 1918-09-16 and for Vienna gives the "alleged"
-# date of 1945-04-12 with no time.  For the 1980-04-06 transition
-# Shanks gives 02:00, the BEV 00:00.  Go with the BEV, and guess 02:00
-# for 1945-04-12.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Austria	1920	only	-	Apr	 5	2:00s	1:00	S
-Rule	Austria	1920	only	-	Sep	13	2:00s	0	-
-Rule	Austria	1946	only	-	Apr	14	2:00s	1:00	S
-Rule	Austria	1946	1948	-	Oct	Sun>=1	2:00s	0	-
-Rule	Austria	1947	only	-	Apr	 6	2:00s	1:00	S
-Rule	Austria	1948	only	-	Apr	18	2:00s	1:00	S
-Rule	Austria	1980	only	-	Apr	 6	0:00	1:00	S
-Rule	Austria	1980	only	-	Sep	28	0:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Vienna	1:05:20 -	LMT	1893 Apr
-			1:00	C-Eur	CE%sT	1920
-			1:00	Austria	CE%sT	1940 Apr  1 2:00s
-			1:00	C-Eur	CE%sT	1945 Apr  2 2:00s
-			1:00	1:00	CEST	1945 Apr 12 2:00s
-			1:00	-	CET	1946
-			1:00	Austria	CE%sT	1981
-			1:00	EU	CE%sT
-
-# Belarus
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Minsk	1:50:16 -	LMT	1880
-			1:50	-	MMT	1924 May 2 # Minsk Mean Time
-			2:00	-	EET	1930 Jun 21
-			3:00	-	MSK	1941 Jun 28
-			1:00	C-Eur	CE%sT	1944 Jul  3
-			3:00	Russia	MSK/MSD	1990
-			3:00	-	MSK	1991 Mar 31 2:00s
-			2:00	1:00	EEST	1991 Sep 29 2:00s
-			2:00	-	EET	1992 Mar 29 0:00s
-			2:00	1:00	EEST	1992 Sep 27 0:00s
-			2:00	Russia	EE%sT
-
-# Belgium
-#
-# From Paul Eggert (1997-07-02):
-# Entries from 1918 through 1991 are taken from:
-#	Annuaire de L'Observatoire Royal de Belgique,
-#	Avenue Circulaire, 3, B-1180 BRUXELLES, CLVIIe annee, 1991
-#	(Imprimerie HAYEZ, s.p.r.l., Rue Fin, 4, 1080 BRUXELLES, MCMXC),
-#	pp 8-9.
-# LMT before 1892 was 0:17:30, according to the official journal of Belgium:
-#	Moniteur Belge, Samedi 30 Avril 1892, N.121.
-# Thanks to Pascal Delmoitie for these references.
-# The 1918 rules are listed for completeness; they apply to unoccupied Belgium.
-# Assume Brussels switched to WET in 1918 when the armistice took effect.
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Belgium	1918	only	-	Mar	 9	 0:00s	1:00	S
-Rule	Belgium	1918	1919	-	Oct	Sat>=1	23:00s	0	-
-Rule	Belgium	1919	only	-	Mar	 1	23:00s	1:00	S
-Rule	Belgium	1920	only	-	Feb	14	23:00s	1:00	S
-Rule	Belgium	1920	only	-	Oct	23	23:00s	0	-
-Rule	Belgium	1921	only	-	Mar	14	23:00s	1:00	S
-Rule	Belgium	1921	only	-	Oct	25	23:00s	0	-
-Rule	Belgium	1922	only	-	Mar	25	23:00s	1:00	S
-Rule	Belgium	1922	1927	-	Oct	Sat>=1	23:00s	0	-
-Rule	Belgium	1923	only	-	Apr	21	23:00s	1:00	S
-Rule	Belgium	1924	only	-	Mar	29	23:00s	1:00	S
-Rule	Belgium	1925	only	-	Apr	 4	23:00s	1:00	S
-# DSH writes that a royal decree of 1926-02-22 specified the Sun following 3rd
-# Sat in Apr (except if it's Easter, in which case it's one Sunday earlier),
-# to Sun following 1st Sat in Oct, and that a royal decree of 1928-09-15
-# changed the transition times to 02:00 GMT.
-Rule	Belgium	1926	only	-	Apr	17	23:00s	1:00	S
-Rule	Belgium	1927	only	-	Apr	 9	23:00s	1:00	S
-Rule	Belgium	1928	only	-	Apr	14	23:00s	1:00	S
-Rule	Belgium	1928	1938	-	Oct	Sun>=2	 2:00s	0	-
-Rule	Belgium	1929	only	-	Apr	21	 2:00s	1:00	S
-Rule	Belgium	1930	only	-	Apr	13	 2:00s	1:00	S
-Rule	Belgium	1931	only	-	Apr	19	 2:00s	1:00	S
-Rule	Belgium	1932	only	-	Apr	 3	 2:00s	1:00	S
-Rule	Belgium	1933	only	-	Mar	26	 2:00s	1:00	S
-Rule	Belgium	1934	only	-	Apr	 8	 2:00s	1:00	S
-Rule	Belgium	1935	only	-	Mar	31	 2:00s	1:00	S
-Rule	Belgium	1936	only	-	Apr	19	 2:00s	1:00	S
-Rule	Belgium	1937	only	-	Apr	 4	 2:00s	1:00	S
-Rule	Belgium	1938	only	-	Mar	27	 2:00s	1:00	S
-Rule	Belgium	1939	only	-	Apr	16	 2:00s	1:00	S
-Rule	Belgium	1939	only	-	Nov	19	 2:00s	0	-
-Rule	Belgium	1940	only	-	Feb	25	 2:00s	1:00	S
-Rule	Belgium	1944	only	-	Sep	17	 2:00s	0	-
-Rule	Belgium	1945	only	-	Apr	 2	 2:00s	1:00	S
-Rule	Belgium	1945	only	-	Sep	16	 2:00s	0	-
-Rule	Belgium	1946	only	-	May	19	 2:00s	1:00	S
-Rule	Belgium	1946	only	-	Oct	 7	 2:00s	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Brussels	0:17:30 -	LMT	1880
-			0:17:30	-	BMT	1892 May  1 12:00 # Brussels MT
-			0:00	-	WET	1914 Nov  8
-			1:00	-	CET	1916 May  1  0:00
-			1:00	C-Eur	CE%sT	1918 Nov 11 11:00u
-			0:00	Belgium	WE%sT	1940 May 20  2:00s
-			1:00	C-Eur	CE%sT	1944 Sep  3
-			1:00	Belgium	CE%sT	1977
-			1:00	EU	CE%sT
-
-# Bosnia and Herzegovina
-# see Serbia and Montenegro
-
-# Bulgaria
-#
-# From Plamen Simenov via Steffen Thorsen (1999-09-09):
-# A document of Government of Bulgaria (No.94/1997) says:
-# EET --> EETDST is in 03:00 Local time in last Sunday of March ...
-# EETDST --> EET is in 04:00 Local time in last Sunday of October
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Bulg	1979	only	-	Mar	31	23:00	1:00	S
-Rule	Bulg	1979	only	-	Oct	 1	 1:00	0	-
-Rule	Bulg	1980	1982	-	Apr	Sat<=7	23:00	1:00	S
-Rule	Bulg	1980	only	-	Sep	29	 1:00	0	-
-Rule	Bulg	1981	only	-	Sep	27	 2:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Sofia	1:33:16 -	LMT	1880
-			1:56:56	-	IMT	1894 Nov 30 # Istanbul MT?
-			2:00	-	EET	1942 Nov  2  3:00
-			1:00	C-Eur	CE%sT	1945 Apr  2  3:00
-			2:00	-	EET	1979 Mar 31 23:00
-			2:00	Bulg	EE%sT	1982 Sep 26  2:00
-			2:00	C-Eur	EE%sT	1991
-			2:00	E-Eur	EE%sT	1997
-			2:00	EU	EE%sT
-
-# Croatia
-# see Serbia and Montenegro
-
-# Cyprus
-# Please see the `asia' file for Asia/Nicosia.
-
-# Czech Republic
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Czech	1945	only	-	Apr	 8	2:00s	1:00	S
-Rule	Czech	1945	only	-	Nov	18	2:00s	0	-
-Rule	Czech	1946	only	-	May	 6	2:00s	1:00	S
-Rule	Czech	1946	1949	-	Oct	Sun>=1	2:00s	0	-
-Rule	Czech	1947	only	-	Apr	20	2:00s	1:00	S
-Rule	Czech	1948	only	-	Apr	18	2:00s	1:00	S
-Rule	Czech	1949	only	-	Apr	 9	2:00s	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Prague	0:57:44 -	LMT	1850
-			0:57:44	-	PMT	1891 Oct     # Prague Mean Time
-			1:00	C-Eur	CE%sT	1944 Sep 17 2:00s
-			1:00	Czech	CE%sT	1979
-			1:00	EU	CE%sT
-
-# Denmark, Faeroe Islands, and Greenland
-
-# From Jesper Norgaard Welen (2005-04-26):
-# http://www.hum.aau.dk/~poe/tid/tine/DanskTid.htm says that the law
-# [introducing standard time] was in effect from 1894-01-01....
-# The page http://www.retsinfo.dk/_GETDOCI_/ACCN/A18930008330-REGL
-# confirms this, and states that the law was put forth 1893-03-29.
-#
-# The EU treaty with effect from 1973:
-# http://www.retsinfo.dk/_GETDOCI_/ACCN/A19722110030-REGL
-#
-# This provoked a new law from 1974 to make possible summer time changes
-# in subsequenet decrees with the law
-# http://www.retsinfo.dk/_GETDOCI_/ACCN/A19740022330-REGL
-#
-# It seems however that no decree was set forward until 1980.  I have
-# not found any decree, but in another related law, the effecting DST
-# changes are stated explicitly to be from 1980-04-06 at 02:00 to
-# 1980-09-28 at 02:00.  If this is true, this differs slightly from
-# the EU rule in that DST runs to 02:00, not 03:00.  We don't know
-# when Denmark began using the EU rule correctly, but we have only
-# confirmation of the 1980-time, so I presume it was correct in 1981:
-# The law is about the management of the extra hour, concerning
-# working hours reported and effect on obligatory-rest rules (which
-# was suspended on that night):
-# http://www.retsinfo.dk/_GETDOCI_/ACCN/C19801120554-REGL
-
-# From Jesper Norgaard Welen (2005-06-11):
-# The Herning Folkeblad (1980-09-26) reported that the night between
-# Saturday and Sunday the clock is set back from three to two.
-
-# From Paul Eggert (2005-06-11):
-# Hence the "02:00" of the 1980 law refers to standard time, not
-# wall-clock time, and so the EU rules were in effect in 1980.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Denmark	1916	only	-	May	14	23:00	1:00	S
-Rule	Denmark	1916	only	-	Sep	30	23:00	0	-
-Rule	Denmark	1940	only	-	May	15	 0:00	1:00	S
-Rule	Denmark	1945	only	-	Apr	 2	 2:00s	1:00	S
-Rule	Denmark	1945	only	-	Aug	15	 2:00s	0	-
-Rule	Denmark	1946	only	-	May	 1	 2:00s	1:00	S
-Rule	Denmark	1946	only	-	Sep	 1	 2:00s	0	-
-Rule	Denmark	1947	only	-	May	 4	 2:00s	1:00	S
-Rule	Denmark	1947	only	-	Aug	10	 2:00s	0	-
-Rule	Denmark	1948	only	-	May	 9	 2:00s	1:00	S
-Rule	Denmark	1948	only	-	Aug	 8	 2:00s	0	-
-#
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Europe/Copenhagen	 0:50:20 -	LMT	1890
-			 0:50:20 -	CMT	1894 Jan  1 # Copenhagen MT
-			 1:00	Denmark	CE%sT	1942 Nov  2 2:00s
-			 1:00	C-Eur	CE%sT	1945 Apr  2 2:00
-			 1:00	Denmark	CE%sT	1980
-			 1:00	EU	CE%sT
-Zone Atlantic/Faeroe	-0:27:04 -	LMT	1908 Jan 11	# Torshavn
-			 0:00	-	WET	1981
-			 0:00	EU	WE%sT
-#
-# From Paul Eggert (2004-10-31):
-# During World War II, Germany maintained secret manned weather stations in
-# East Greenland and Franz Josef Land, but we don't know their time zones.
-# My source for this is Wilhelm Dege's book mentioned under Svalbard.
-#
-# From Paul Eggert (1996-11-22):
-# Greenland joined the EU as part of Denmark, obtained home rule on 1979-05-01,
-# and left the EU on 1985-02-01.  It therefore should have been using EU
-# rules at least through 1984.  Shanks says Scoresbysund and Godthab
-# used C-Eur rules after 1980, but IATA SSIM (1991/1996) says they use EU
-# rules since at least 1991.  Assume EU rules since 1980.
-
-# From Gwillin Law (2001-06-06), citing
-# <http://www.statkart.no/efs/efshefter/2001/efs5-2001.pdf> (2001-03-15),
-# and with translations corrected by Steffen Thorsen:
-#
-# Greenland has four local times, and the relation to UTC
-# is according to the following time line:
-#
-# The military zone near Thule	UTC-4
-# Standard Greenland time	UTC-3
-# Scoresbysund			UTC-1
-# Danmarkshavn			UTC
-#
-# In the military area near Thule and in Danmarkshavn DST will not be
-# introduced.
-
-# From Rives McDow (2001-11-01):
-#
-# I correspond regularly with the Dansk Polarcenter, and wrote them at
-# the time to clarify the situation in Thule.  Unfortunately, I have
-# not heard back from them regarding my recent letter.  [But I have
-# info from earlier correspondence.]
-#
-# According to the center, a very small local time zone around Thule
-# Air Base keeps the time according to UTC-4, implementing daylight
-# savings using North America rules, changing the time at 02:00 local time....
-#
-# The east coast of Greenland north of the community of Scoresbysund
-# uses UTC in the same way as in Iceland, year round, with no dst.
-# There are just a few stations on this coast, including the
-# Danmarkshavn ICAO weather station mentioned in your September 29th
-# email.  The other stations are two sledge patrol stations in
-# Mestersvig and Daneborg, the air force base at Station Nord, and the
-# DPC research station at Zackenberg.
-#
-# Scoresbysund and two small villages nearby keep time UTC-1 and use
-# the same daylight savings time period as in West Greenland (Godthab).
-#
-# The rest of Greenland, including Godthab (this area, although it
-# includes central Greenland, is known as west Greenland), keeps time
-# UTC-3, with daylight savings methods according to European rules.
-#
-# It is common procedure to use UTC 0 in the wilderness of East and
-# North Greenland, because it is mainly Icelandic aircraft operators
-# maintaining traffic in these areas.  However, the official status of
-# this area is that it sticks with Godthab time.  This area might be
-# considered a dual time zone in some respects because of this.
-
-# From Rives McDow (2001-11-19):
-# I heard back from someone stationed at Thule; the time change took place
-# there at 2:00 AM.
-
-# From Paul Eggert (2001-11-19):
-# The 1997 CIA map shows Danmarkshavn on GMT; the 1995 map as like Godthab.
-# For lack of better info, assume they were like Godthab before 1996.
-# startkart.no says Thule does not observe DST, but this is clearly an error,
-# so go with Shanks for all Thule transitions.
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Thule	1991	1992	-	Mar	lastSun	2:00	1:00	D
-Rule	Thule	1991	1992	-	Sep	lastSun	2:00	0	S
-Rule	Thule	1993	max	-	Apr	Sun>=1	2:00	1:00	D
-Rule	Thule	1993	max	-	Oct	lastSun	2:00	0	S
-#
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Danmarkshavn -1:14:40 -	LMT	1916 Jul 28
-			-3:00	-	WGT	1980 Apr  6 2:00
-			-3:00	EU	WG%sT	1996
-			0:00	-	GMT
-Zone America/Scoresbysund -1:29:00 -	LMT	1916 Jul 28 # Ittoqqortoormiit
-			-2:00	-	CGT	1980 Apr  6 2:00
-			-2:00	C-Eur	CG%sT	1981 Mar 29
-			-1:00	EU	EG%sT
-Zone America/Godthab	-3:26:56 -	LMT	1916 Jul 28 # Nuuk
-			-3:00	-	WGT	1980 Apr  6 2:00
-			-3:00	EU	WG%sT
-Zone America/Thule	-4:35:08 -	LMT	1916 Jul 28 # Pituffik air base
-			-4:00	Thule	A%sT
-
-# Estonia
-# From Peter Ilieve (1994-10-15):
-# A relative in Tallinn confirms the accuracy of the data for 1989 onwards
-# [through 1994] and gives the legal authority for it,
-# a regulation of the Government of Estonia, No. 111 of 1989....
-#
-# From Peter Ilieve (1996-10-28):
-# [IATA SSIM (1992/1996) claims that the Baltic republics switch at 01:00s,
-# but a relative confirms that Estonia still switches at 02:00s, writing:]
-# ``I do not [know] exactly but there are some little different
-# (confusing) rules for International Air and Railway Transport Schedules
-# conversion in Sunday connected with end of summer time in Estonia....
-# A discussion is running about the summer time efficiency and effect on
-# human physiology.  It seems that Estonia maybe will not change to
-# summer time next spring.''
-
-# From Peter Ilieve (1998-11-04), heavily edited:
-# <a href="http://trip.rk.ee/cgi-bin/thw?${BASE}=akt&${OOHTML}=rtd&TA=1998&TO=1&AN=1390">
-# The 1998-09-22 Estonian time law
-# </a>
-# refers to the Eighth Directive and cites the association agreement between
-# the EU and Estonia, ratified by the Estonian law (RT II 1995, 22--27, 120).
-#
-# I also asked [my relative] whether they use any standard abbreviation
-# for their standard and summer times. He says no, they use "suveaeg"
-# (summer time) and "talveaeg" (winter time).
-
-# From <a href="http://www.baltictimes.com/">The Baltic Times</a> (1999-09-09)
-# via Steffen Thorsen:
-# This year will mark the last time Estonia shifts to summer time,
-# a council of the ruling coalition announced Sept. 6....
-# But what this could mean for Estonia's chances of joining the European
-# Union are still unclear.  In 1994, the EU declared summer time compulsory
-# for all member states until 2001.  Brussels has yet to decide what to do
-# after that.
-
-# From Mart Oruaas (2000-01-29):
-# Regulation no. 301 (1999-10-12) obsoletes previous regulation
-# no. 206 (1998-09-22) and thus sticks Estonia to +02:00 GMT for all
-# the year round.  The regulation is effective 1999-11-01.
-
-# From Toomas Soome (2002-02-21):
-# The Estonian government has changed once again timezone politics.
-# Now we are using again EU rules.
-#
-# From Urmet Jaanes (2002-03-28):
-# The legislative reference is Government decree No. 84 on 2002-02-21.
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Tallinn	1:39:00	-	LMT	1880
-			1:39:00	-	TMT	1918 Feb # Tallinn Mean Time
-			1:00	C-Eur	CE%sT	1919 Jul
-			1:39:00	-	TMT	1921 May
-			2:00	-	EET	1940 Aug  6
-			3:00	-	MSK	1941 Sep 15
-			1:00	C-Eur	CE%sT	1944 Sep 22
-			3:00	Russia	MSK/MSD	1989 Mar 26 2:00s
-			2:00	1:00	EEST	1989 Sep 24 2:00s
-			2:00	C-Eur	EE%sT	1998 Sep 22
-			2:00	EU	EE%sT	1999 Nov  1
-			2:00	-	EET	2002 Feb 21
-			2:00	EU	EE%sT
-
-# Finland
-#
-# From Hannu Strang (25 Sep 1994 06:03:37 UTC):
-# Well, here in Helsinki we're just changing from summer time to regular one,
-# and it's supposed to change at 4am...
-#
-# From Paul Eggert (25 Sep 1994):
-# Shanks says Finland has switched at 02:00 standard time since 1981.
-# Go with Strang instead.
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Finland	1942	only	-	Apr	3	0:00	1:00	S
-Rule	Finland	1942	only	-	Oct	3	0:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Helsinki	1:39:52 -	LMT	1878 May 31
-			1:39:52	-	HMT	1921 May    # Helsinki Mean Time
-			2:00	Finland	EE%sT	1981 Mar 29 2:00
-			2:00	EU	EE%sT
-
-# Aaland Is
-Link	Europe/Helsinki	Europe/Mariehamn
-
-
-# France
-
-# From Ciro Discepolo (2000-12-20):
-#
-# Henri Le Corre, Regimes Horaires pour le monde entier, Editions
-# Traditionnelles - Paris 2 books, 1993
-#
-# Gabriel, Traite de l'heure dans le monde, Guy Tredaniel editeur,
-# Paris, 1991
-#
-# Francoise Gauquelin, Problemes de l'heure resolus en astrologie,
-# Guy tredaniel, Paris 1987
-
-
-#
-# Shanks seems to use `24:00' ambiguously; we resolve it with Whitman.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	France	1916	only	-	Jun	14	23:00s	1:00	S
-Rule	France	1916	1919	-	Oct	Sun>=1	23:00s	0	-
-Rule	France	1917	only	-	Mar	24	23:00s	1:00	S
-Rule	France	1918	only	-	Mar	 9	23:00s	1:00	S
-Rule	France	1919	only	-	Mar	 1	23:00s	1:00	S
-Rule	France	1920	only	-	Feb	14	23:00s	1:00	S
-Rule	France	1920	only	-	Oct	23	23:00s	0	-
-Rule	France	1921	only	-	Mar	14	23:00s	1:00	S
-Rule	France	1921	only	-	Oct	25	23:00s	0	-
-Rule	France	1922	only	-	Mar	25	23:00s	1:00	S
-# DSH writes that a law of 1923-05-24 specified 3rd Sat in Apr at 23:00 to 1st
-# Sat in Oct at 24:00; and that in 1930, because of Easter, the transitions
-# were Apr 12 and Oct 5.  Go with Shanks.
-Rule	France	1922	1938	-	Oct	Sat>=1	23:00s	0	-
-Rule	France	1923	only	-	May	26	23:00s	1:00	S
-Rule	France	1924	only	-	Mar	29	23:00s	1:00	S
-Rule	France	1925	only	-	Apr	 4	23:00s	1:00	S
-Rule	France	1926	only	-	Apr	17	23:00s	1:00	S
-Rule	France	1927	only	-	Apr	 9	23:00s	1:00	S
-Rule	France	1928	only	-	Apr	14	23:00s	1:00	S
-Rule	France	1929	only	-	Apr	20	23:00s	1:00	S
-Rule	France	1930	only	-	Apr	12	23:00s	1:00	S
-Rule	France	1931	only	-	Apr	18	23:00s	1:00	S
-Rule	France	1932	only	-	Apr	 2	23:00s	1:00	S
-Rule	France	1933	only	-	Mar	25	23:00s	1:00	S
-Rule	France	1934	only	-	Apr	 7	23:00s	1:00	S
-Rule	France	1935	only	-	Mar	30	23:00s	1:00	S
-Rule	France	1936	only	-	Apr	18	23:00s	1:00	S
-Rule	France	1937	only	-	Apr	 3	23:00s	1:00	S
-Rule	France	1938	only	-	Mar	26	23:00s	1:00	S
-Rule	France	1939	only	-	Apr	15	23:00s	1:00	S
-Rule	France	1939	only	-	Nov	18	23:00s	0	-
-Rule	France	1940	only	-	Feb	25	 2:00	1:00	S
-# The French rules for 1941-1944 were not used in Paris, but Shanks writes
-# that they were used in Monaco and in many French locations.
-# Le Corre writes that the upper limit of the free zone was Arneguy, Orthez,
-# Mont-de-Marsan, Bazas, Langon, Lamotte-Montravel, Marouil, La
-# Rochefoucault, Champagne-Mouton, La Roche-Posay, La Haye-Decartes,
-# Loches, Montrichard, Vierzon, Bourges, Moulins, Digoin,
-# Paray-le-Monial, Montceau-les-Mines, Chalons-sur-Saone, Arbois,
-# Dole, Morez, St-Claude, and Collognes (Haute-Savioe).
-Rule	France	1941	only	-	May	 5	 0:00	2:00	M # Midsummer
-# Shanks says this transition occurred at Oct 6 1:00,
-# but go with Denis Excoffier (1997-12-12),
-# who quotes the Ephemerides Astronomiques for 1998 from Bureau des Longitudes
-# as saying 5/10/41 22hUT.
-Rule	France	1941	only	-	Oct	 6	 0:00	1:00	S
-Rule	France	1942	only	-	Mar	 9	 0:00	2:00	M
-Rule	France	1942	only	-	Nov	 2	 3:00	1:00	S
-Rule	France	1943	only	-	Mar	29	 2:00	2:00	M
-Rule	France	1943	only	-	Oct	 4	 3:00	1:00	S
-Rule	France	1944	only	-	Apr	 3	 2:00	2:00	M
-Rule	France	1944	only	-	Oct	 8	 1:00	1:00	S
-Rule	France	1945	only	-	Apr	 2	 2:00	2:00	M
-Rule	France	1945	only	-	Sep	16	 3:00	0	-
-# Shanks gives Mar 28 2:00 and Sep 26 3:00;
-# go with Excoffier's 28/3/76 0hUT and 25/9/76 23hUT.
-Rule	France	1976	only	-	Mar	28	 1:00	1:00	S
-Rule	France	1976	only	-	Sep	26	 1:00	0	-
-# Shanks gives 0:09 for Paris Mean Time, and Whitman gives 0:09:05,
-# but Howse quotes the actual French legislation as saying 0:09:21.
-# Go with Howse.  Howse writes that the time in France was officially based
-# on PMT-0:09:21 until 1978-08-09, when the time base finally switched to UTC.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Paris	0:09:21 -	LMT	1891 Mar 15  0:01
-			0:09:21	-	PMT	1911 Mar 11  0:01  # Paris MT
-# Shanks gives 1940 Jun 14 0:00; go with Excoffier and Le Corre.
-			0:00	France	WE%sT	1940 Jun 14 23:00
-# Le Corre says Paris stuck with occupied-France time after the liberation;
-# go with Shanks.
-			1:00	C-Eur	CE%sT	1944 Aug 25
-			0:00	France	WE%sT	1945 Sep 16  3:00
-			1:00	France	CE%sT	1977
-			1:00	EU	CE%sT
-
-# Germany
-
-# From Markus Kuhn (1998-09-29):
-# The German time zone web site by the Physikalisch-Technische
-# Bundesanstalt contains DST information back to 1916.
-# [See tz-link.htm for the URL.]
-
-# From Joerg Schilling (2002-10-23):
-# In 1945, Berlin was switched to Moscow Summer time (GMT+4) by <a
-# href="http://www.dhm.de/lemo/html/biografien/BersarinNikolai/">
-# General [Nikolai] Bersarin</a>.
-
-# From Paul Eggert (2003-03-08):
-# <a href="http://www.parlament-berlin.de/pds-fraktion.nsf/727459127c8b66ee8525662300459099/defc77cb784f180ac1256c2b0030274b/$FILE/bersarint.pdf">
-# says that Bersarin issued an order to use Moscow time on May 20.
-# However, Moscow did not observe daylight saving in 1945, so
-# this was equivalent to CEMT (GMT+3), not GMT+4.
-
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Germany	1945	only	-	Apr	 2	2:00s	1:00	S
-Rule	Germany	1945	only	-	May	24	2:00	2:00	M # Midsummer
-Rule	Germany	1945	only	-	Sep	24	3:00	1:00	S
-Rule	Germany	1945	only	-	Nov	18	2:00s	0	-
-Rule	Germany	1946	only	-	Apr	14	2:00s	1:00	S
-Rule	Germany	1946	only	-	Oct	 7	2:00s	0	-
-Rule	Germany	1947	1949	-	Oct	Sun>=1	2:00s	0	-
-Rule	Germany	1947	only	-	Apr	 6	2:00s	1:00	S
-Rule	Germany	1947	only	-	May	11	2:00s	2:00	M
-Rule	Germany	1947	only	-	Jun	29	3:00	1:00	S
-Rule	Germany	1948	only	-	Apr	18	2:00s	1:00	S
-Rule	Germany	1949	only	-	Apr	10	2:00s	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Berlin	0:53:28 -	LMT	1893 Apr
-			1:00	C-Eur	CE%sT	1945 Apr 2 2:00
-			1:00	Germany	CE%sT	1980
-			1:00	EU	CE%sT
-
-# Georgia
-# Please see the "asia" file for Asia/Tbilisi.
-# Herodotus (Histories, IV.45) says Georgia north of the Phasis (now Rioni)
-# is in Europe.  Our reference location Tbilisi is in the Asian part.
-
-# Gibraltar
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Europe/Gibraltar	-0:21:24 -	LMT	1880 Aug  2
-			0:00	GB-Eire	%s	1957 Apr 14 2:00
-			1:00	-	CET	1982
-			1:00	EU	CE%sT
-
-# Greece
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-# Whitman gives 1932 Jul 5 - Nov 1; go with Shanks.
-Rule	Greece	1932	only	-	Jul	 7	0:00	1:00	S
-Rule	Greece	1932	only	-	Sep	 1	0:00	0	-
-# Whitman gives 1941 Apr 25 - ?; go with Shanks.
-Rule	Greece	1941	only	-	Apr	 7	0:00	1:00	S
-# Whitman gives 1942 Feb 2 - ?; go with Shanks.
-Rule	Greece	1942	only	-	Nov	 2	3:00	0	-
-Rule	Greece	1943	only	-	Mar	30	0:00	1:00	S
-Rule	Greece	1943	only	-	Oct	 4	0:00	0	-
-# Whitman gives 1944 Oct 3 - Oct 31; go with Shanks.
-Rule	Greece	1952	only	-	Jul	 1	0:00	1:00	S
-Rule	Greece	1952	only	-	Nov	 2	0:00	0	-
-Rule	Greece	1975	only	-	Apr	12	0:00s	1:00	S
-Rule	Greece	1975	only	-	Nov	26	0:00s	0	-
-Rule	Greece	1976	only	-	Apr	11	2:00s	1:00	S
-Rule	Greece	1976	only	-	Oct	10	2:00s	0	-
-Rule	Greece	1977	1978	-	Apr	Sun>=1	2:00s	1:00	S
-Rule	Greece	1977	only	-	Sep	26	2:00s	0	-
-Rule	Greece	1978	only	-	Sep	24	4:00	0	-
-Rule	Greece	1979	only	-	Apr	 1	9:00	1:00	S
-Rule	Greece	1979	only	-	Sep	29	2:00	0	-
-Rule	Greece	1980	only	-	Apr	 1	0:00	1:00	S
-Rule	Greece	1980	only	-	Sep	28	0:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Athens	1:34:52 -	LMT	1895 Sep 14
-			1:34:52	-	AMT	1916 Jul 28 0:01     # Athens MT
-			2:00	Greece	EE%sT	1941 Apr 30
-			1:00	Greece	CE%sT	1944 Apr  4
-			2:00	Greece	EE%sT	1981
-			# Shanks says they switched to C-Eur in 1981;
-			# go with EU instead, since Greece joined it on Jan 1.
-			2:00	EU	EE%sT
-
-# Hungary
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Hungary	1918	only	-	Apr	 1	 3:00	1:00	S
-Rule	Hungary	1918	only	-	Sep	29	 3:00	0	-
-Rule	Hungary	1919	only	-	Apr	15	 3:00	1:00	S
-Rule	Hungary	1919	only	-	Sep	15	 3:00	0	-
-Rule	Hungary	1920	only	-	Apr	 5	 3:00	1:00	S
-Rule	Hungary	1920	only	-	Sep	30	 3:00	0	-
-Rule	Hungary	1945	only	-	May	 1	23:00	1:00	S
-Rule	Hungary	1945	only	-	Nov	 3	 0:00	0	-
-Rule	Hungary	1946	only	-	Mar	31	 2:00s	1:00	S
-Rule	Hungary	1946	1949	-	Oct	Sun>=1	 2:00s	0	-
-Rule	Hungary	1947	1949	-	Apr	Sun>=4	 2:00s	1:00	S
-Rule	Hungary	1950	only	-	Apr	17	 2:00s	1:00	S
-Rule	Hungary	1950	only	-	Oct	23	 2:00s	0	-
-Rule	Hungary	1954	1955	-	May	23	 0:00	1:00	S
-Rule	Hungary	1954	1955	-	Oct	 3	 0:00	0	-
-Rule	Hungary	1956	only	-	Jun	Sun>=1	 0:00	1:00	S
-Rule	Hungary	1956	only	-	Sep	lastSun	 0:00	0	-
-Rule	Hungary	1957	only	-	Jun	Sun>=1	 1:00	1:00	S
-Rule	Hungary	1957	only	-	Sep	lastSun	 3:00	0	-
-Rule	Hungary	1980	only	-	Apr	 6	 1:00	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Budapest	1:16:20 -	LMT	1890 Oct
-			1:00	C-Eur	CE%sT	1918
-			1:00	Hungary	CE%sT	1941 Apr  6  2:00
-			1:00	C-Eur	CE%sT	1945 May  1 23:00
-			1:00	Hungary	CE%sT	1980 Sep 28  2:00s
-			1:00	EU	CE%sT
-
-# Iceland
-#
-# From Adam David (1993-11-06):
-# The name of the timezone in Iceland for system / mail / news purposes is GMT.
-#
-# (1993-12-05):
-# This material is paraphrased from the 1988 edition of the University of
-# Iceland Almanak.
-#
-# From January 1st, 1908 the whole of Iceland was standardised at 1 hour
-# behind GMT. Previously, local mean solar time was used in different parts
-# of Iceland, the almanak had been based on Reykjavik mean solar time which
-# was 1 hour and 28 minutes behind GMT.
-#
-# "first day of winter" referred to [below] means the first day of the 26 weeks
-# of winter, according to the old icelandic calendar that dates back to the
-# time the norsemen first settled Iceland.  The first day of winter is always
-# Saturday, but is not dependent on the Julian or Gregorian calendars.
-#
-# (1993-12-10):
-# I have a reference from the Oxford Icelandic-English dictionary for the
-# beginning of winter, which ties it to the ecclesiastical calendar (and thus
-# to the julian/gregorian calendar) over the period in question.
-#	the winter begins on the Saturday next before St. Luke's day
-#	(old style), or on St. Luke's day, if a Saturday.
-# St. Luke's day ought to be traceable from ecclesiastical sources. "old style"
-# might be a reference to the Julian calendar as opposed to Gregorian, or it
-# might mean something else (???).
-#
-# From Paul Eggert (1999-10-29):
-# The Iceland Almanak, Shanks and Whitman disagree on many points.
-# We go with the Almanak, except for one claim from Shanks, namely that
-# Reykavik was 21W57 from 1837 to 1908, local mean time before that.
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Iceland	1917	1918	-	Feb	19	23:00	1:00	S
-Rule	Iceland	1917	only	-	Oct	21	 1:00	0	-
-Rule	Iceland	1918	only	-	Nov	16	 1:00	0	-
-Rule	Iceland	1939	only	-	Apr	29	23:00	1:00	S
-Rule	Iceland	1939	only	-	Nov	29	 2:00	0	-
-Rule	Iceland	1940	only	-	Feb	25	 2:00	1:00	S
-Rule	Iceland	1940	only	-	Nov	 3	 2:00	0	-
-Rule	Iceland	1941	only	-	Mar	 2	 1:00s	1:00	S
-Rule	Iceland	1941	only	-	Nov	 2	 1:00s	0	-
-Rule	Iceland	1942	only	-	Mar	 8	 1:00s	1:00	S
-Rule	Iceland	1942	only	-	Oct	25	 1:00s	0	-
-# 1943-1946 - first Sunday in March until first Sunday in winter
-Rule	Iceland	1943	1946	-	Mar	Sun>=1	 1:00s	1:00	S
-Rule	Iceland	1943	1948	-	Oct	Sun>=22	 1:00s	0	-
-# 1947-1967 - first Sunday in April until first Sunday in winter
-Rule	Iceland	1947	1967	-	Apr	Sun>=1	 1:00s	1:00	S
-# 1949 Oct transition delayed by 1 week
-Rule	Iceland	1949	only	-	Oct	30	 1:00s	0	-
-Rule	Iceland	1950	1966	-	Oct	Sun>=22	 1:00s	0	-
-Rule	Iceland	1967	only	-	Oct	29	 1:00s	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Atlantic/Reykjavik	-1:27:24 -	LMT	1837
-			-1:27:48 -	RMT	1908 # Reykjavik Mean Time?
-			-1:00	Iceland	IS%sT	1968 Apr 7 1:00s
-			 0:00	-	GMT
-
-# Italy
-#
-# From Paul Eggert (2001-03-06):
-# Sicily and Sardinia each had their own time zones from 1866 to 1893,
-# called Palermo Time (+00:53:28) and Cagliari Time (+00:36:32).
-# During World War II, German-controlled Italy used German time.
-# But these events all occurred before the 1970 cutoff,
-# so record only the time in Rome.
-#
-# From Paul Eggert (1996-05-06):
-# For Italian DST we have three sources: Shanks, Whitman, and F. Pollastri
-# <a href="http://toi.iriti.cnr.it/uk/ienitlt.html">
-# Day-light Saving Time in Italy (1996-03-14)
-# </a>
-# (`FP' below), taken from an Italian National Electrotechnical Institute
-# publication. When the three sources disagree, guess who's right, as follows:
-#
-# year	FP	Shanks (S)	Whitman (W)	Go with:
-# 1916	06-03	06-03 24:00	06-03 00:00	FP & W
-#	09-30	09-30 24:00	09-30 01:00	FP; guess 24:00s
-# 1917	04-01	03-31 24:00	03-31 00:00	FP & S
-#	09-30	09-29 24:00	09-30 01:00	FP & W
-# 1918	03-09	03-09 24:00	03-09 00:00	FP & S
-#	10-06	10-05 24:00	10-06 01:00	FP & W
-# 1919	03-01	03-01 24:00	03-01 00:00	FP & S
-#	10-04	10-04 24:00	10-04 01:00	FP; guess 24:00s
-# 1920	03-20	03-20 24:00	03-20 00:00	FP & S
-#	09-18	09-18 24:00	10-01 01:00	FP; guess 24:00s
-# 1944	04-02	04-03 02:00			S (see C-Eur)
-#	09-16	10-02 03:00			FP; guess 24:00s
-# 1945	09-14	09-16 24:00			FP; guess 24:00s
-# 1970	05-21	05-31 00:00			S
-#	09-20	09-27 00:00			S
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Italy	1916	only	-	Jun	 3	0:00s	1:00	S
-Rule	Italy	1916	only	-	Oct	 1	0:00s	0	-
-Rule	Italy	1917	only	-	Apr	 1	0:00s	1:00	S
-Rule	Italy	1917	only	-	Sep	30	0:00s	0	-
-Rule	Italy	1918	only	-	Mar	10	0:00s	1:00	S
-Rule	Italy	1918	1919	-	Oct	Sun>=1	0:00s	0	-
-Rule	Italy	1919	only	-	Mar	 2	0:00s	1:00	S
-Rule	Italy	1920	only	-	Mar	21	0:00s	1:00	S
-Rule	Italy	1920	only	-	Sep	19	0:00s	0	-
-Rule	Italy	1940	only	-	Jun	15	0:00s	1:00	S
-Rule	Italy	1944	only	-	Sep	17	0:00s	0	-
-Rule	Italy	1945	only	-	Apr	 2	2:00	1:00	S
-Rule	Italy	1945	only	-	Sep	15	0:00s	0	-
-Rule	Italy	1946	only	-	Mar	17	2:00s	1:00	S
-Rule	Italy	1946	only	-	Oct	 6	2:00s	0	-
-Rule	Italy	1947	only	-	Mar	16	0:00s	1:00	S
-Rule	Italy	1947	only	-	Oct	 5	0:00s	0	-
-Rule	Italy	1948	only	-	Feb	29	2:00s	1:00	S
-Rule	Italy	1948	only	-	Oct	 3	2:00s	0	-
-Rule	Italy	1966	1968	-	May	Sun>=22	0:00	1:00	S
-Rule	Italy	1966	1969	-	Sep	Sun>=22	0:00	0	-
-Rule	Italy	1969	only	-	Jun	 1	0:00	1:00	S
-Rule	Italy	1970	only	-	May	31	0:00	1:00	S
-Rule	Italy	1970	only	-	Sep	lastSun	0:00	0	-
-Rule	Italy	1971	1972	-	May	Sun>=22	0:00	1:00	S
-Rule	Italy	1971	only	-	Sep	lastSun	1:00	0	-
-Rule	Italy	1972	only	-	Oct	 1	0:00	0	-
-Rule	Italy	1973	only	-	Jun	 3	0:00	1:00	S
-Rule	Italy	1973	1974	-	Sep	lastSun	0:00	0	-
-Rule	Italy	1974	only	-	May	26	0:00	1:00	S
-Rule	Italy	1975	only	-	Jun	 1	0:00s	1:00	S
-Rule	Italy	1975	1977	-	Sep	lastSun	0:00s	0	-
-Rule	Italy	1976	only	-	May	30	0:00s	1:00	S
-Rule	Italy	1977	1979	-	May	Sun>=22	0:00s	1:00	S
-Rule	Italy	1978	only	-	Oct	 1	0:00s	0	-
-Rule	Italy	1979	only	-	Sep	30	0:00s	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Rome	0:49:56 -	LMT	1866 Sep 22
-			0:49:56	-	RMT	1893 Nov	# Rome Mean Time
-			1:00	Italy	CE%sT	1942 Nov  2 2:00s
-			1:00	C-Eur	CE%sT	1944 Jul
-			1:00	Italy	CE%sT	1980
-			1:00	EU	CE%sT
-
-Link	Europe/Rome	Europe/Vatican
-Link	Europe/Rome	Europe/San_Marino
-
-# Latvia
-
-# From Liene Kanepe (1998-09-17):
-
-# I asked about this matter Scientific Secretary of the Institute of Astronomy
-# of The University of Latvia Dr. paed Mr. Ilgonis Vilks. I also searched the
-# correct data in juridical acts and I found some juridical documents about
-# changes in the counting of time in Latvia from 1981....
-#
-# Act No.35 of the Council of Ministers of Latvian SSR of 1981-01-22 ...
-# according to the Act No.925 of the Council of Ministers of USSR of 1980-10-24
-# ...: all year round the time of 2nd time zone + 1 hour, in addition turning
-# the hands of the clock 1 hour forward on 1 April at 00:00 (GMT 31 March 21:00)
-# and 1 hour backward on the 1 October at 00:00 (GMT 30 September 20:00).
-#
-# Act No.592 of the Council of Ministers of Latvian SSR of 1984-09-24 ...
-# according to the Act No.967 of the Council of Ministers of USSR of 1984-09-13
-# ...: all year round the time of 2nd time zone + 1 hour, in addition turning
-# the hands of the clock 1 hour forward on the last Sunday of March at 02:00
-# (GMT 23:00 on the previous day) and 1 hour backward on the last Sunday of
-# September at 03:00 (GMT 23:00 on the previous day).
-#
-# Act No.81 of the Council of Ministers of Latvian SSR of 1989-03-22 ...
-# according to the Act No.227 of the Council of Ministers of USSR of 1989-03-14
-# ...: since the last Sunday of March 1989 in Lithuanian SSR, Latvian SSR,
-# Estonian SSR and Kaliningrad region of Russian Federation all year round the
-# time of 2nd time zone (Moscow time minus one hour). On the territory of Latvia
-# transition to summer time is performed on the last Sunday of March at 02:00
-# (GMT 00:00), turning the hands of the clock 1 hour forward.  The end of
-# daylight saving time is performed on the last Sunday of September at 03:00
-# (GMT 00:00), turning the hands of the clock 1 hour backward. Exception is
-# 1989-03-26, when we must not turn the hands of the clock....
-#
-# The Regulations of the Cabinet of Ministers of the Republic of Latvia of
-# 1997-01-21 on transition to Summer time ... established the same order of
-# daylight savings time settings as in the States of the European Union.
-
-# From Andrei Ivanov (2000-03-06):
-# This year Latvia will not switch to Daylight Savings Time (as specified in
-# <a href="http://www.lv-laiks.lv/wwwraksti/2000/071072/vd4.htm">
-# The Regulations of the Cabinet of Ministers of the Rep. of Latvia of
-# 29-Feb-2000 (#79)</a>, in Latvian for subscribers only).
-
-# <a href="http://www.rferl.org/newsline/2001/01/3-CEE/cee-030101.html">
-# From RFE/RL Newsline (2001-01-03), noted after a heads-up by Rives McDow:
-# </a>
-# The Latvian government on 2 January decided that the country will
-# institute daylight-saving time this spring, LETA reported.
-# Last February the three Baltic states decided not to turn back their
-# clocks one hour in the spring....
-# Minister of Economy Aigars Kalvitis noted that Latvia had too few
-# daylight hours and thus decided to comply with a draft European
-# Commission directive that provides for instituting daylight-saving
-# time in EU countries between 2002 and 2006. The Latvian government
-# urged Lithuania and Estonia to adopt a similar time policy, but it
-# appears that they will not do so....
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Latvia	1989	1996	-	Mar	lastSun	 2:00s	1:00	S
-Rule	Latvia	1989	1996	-	Sep	lastSun	 2:00s	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Riga	1:36:24	-	LMT	1880
-			1:36:24	-	RMT	1918 Apr 15 2:00 #Riga Mean Time
-			1:36:24	1:00	LST	1918 Sep 16 3:00 #Latvian Summer
-			1:36:24	-	RMT	1919 Apr  1 2:00
-			1:36:24	1:00	LST	1919 May 22 3:00
-			1:36:24	-	RMT	1926 May 11
-			2:00	-	EET	1940 Aug  5
-			3:00	-	MSK	1941 Jul
-			1:00	C-Eur	CE%sT	1944 Oct 13
-			3:00	Russia	MSK/MSD	1989 Mar lastSun 2:00s
-			2:00	1:00	EEST	1989 Sep lastSun 2:00s
-			2:00	Latvia	EE%sT	1997 Jan 21
-			2:00	EU	EE%sT	2000 Feb 29
-			2:00	-	EET	2001 Jan  2
-			2:00	EU	EE%sT
-
-# Liechtenstein
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Vaduz	0:38:04 -	LMT	1894 Jun
-			1:00	-	CET	1981
-			1:00	EU	CE%sT
-
-# Lithuania
-
-# From Paul Eggert (1996-11-22):
-# IATA SSIM (1992/1996) says Lithuania uses W-Eur rules, but since it is
-# known to be wrong about Estonia and Latvia, assume it's wrong here too.
-
-# From Marius Gedminas (1998-08-07):
-# I would like to inform that in this year Lithuanian time zone
-# (Europe/Vilnius) was changed.
-
-# From <a href="http://www.elta.lt/">ELTA</a> No. 972 (2582) (1999-09-29),
-# via Steffen Thorsen:
-# Lithuania has shifted back to the second time zone (GMT plus two hours)
-# to be valid here starting from October 31,
-# as decided by the national government on Wednesday....
-# The Lithuanian government also announced plans to consider a
-# motion to give up shifting to summer time in spring, as it was
-# already done by Estonia.
-
-# From the <a href="http://www.tourism.lt/informa/ff.htm">
-# Fact File, Lithuanian State Department of Tourism
-# </a> (2000-03-27): Local time is GMT+2 hours ..., no daylight saving.
-
-# From a user via Klaus Marten (2003-02-07):
-# As a candidate for membership of the European Union, Lithuania will
-# observe Summer Time in 2003, changing its clocks at the times laid
-# down in EU Directive 2000/84 of 19.I.01 (i.e. at the same times as its
-# neighbour Latvia). The text of the Lithuanian government Order of
-# 7.XI.02 to this effect can be found at
-# http://www.lrvk.lt/nut/11/n1749.htm
-
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Vilnius	1:41:16	-	LMT	1880
-			1:24:00	-	WMT	1917	    # Warsaw Mean Time
-			1:35:36	-	KMT	1919 Oct 10 # Kaunas Mean Time
-			1:00	-	CET	1920 Jul 12
-			2:00	-	EET	1920 Oct  9
-			1:00	-	CET	1940 Aug  3
-			3:00	-	MSK	1941 Jun 24
-			1:00	C-Eur	CE%sT	1944 Aug
-			3:00	Russia	MSK/MSD	1991 Mar 31 2:00s
-			2:00	1:00	EEST	1991 Sep 29 2:00s
-			2:00	C-Eur	EE%sT	1998
-			2:00	-	EET	1998 Mar 29 1:00u
-			1:00	EU	CE%sT	1999 Oct 31 1:00u
-			2:00	-	EET	2003 Jan  1
-			2:00	EU	EE%sT
-
-# Luxembourg
-# Whitman disagrees with most of these dates in minor ways; go with Shanks.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Lux	1916	only	-	May	14	23:00	1:00	S
-Rule	Lux	1916	only	-	Oct	 1	 1:00	0	-
-Rule	Lux	1917	only	-	Apr	28	23:00	1:00	S
-Rule	Lux	1917	only	-	Sep	17	 1:00	0	-
-Rule	Lux	1918	only	-	Apr	Mon>=15	 2:00s	1:00	S
-Rule	Lux	1918	only	-	Sep	Mon>=15	 2:00s	0	-
-Rule	Lux	1919	only	-	Mar	 1	23:00	1:00	S
-Rule	Lux	1919	only	-	Oct	 5	 3:00	0	-
-Rule	Lux	1920	only	-	Feb	14	23:00	1:00	S
-Rule	Lux	1920	only	-	Oct	24	 2:00	0	-
-Rule	Lux	1921	only	-	Mar	14	23:00	1:00	S
-Rule	Lux	1921	only	-	Oct	26	 2:00	0	-
-Rule	Lux	1922	only	-	Mar	25	23:00	1:00	S
-Rule	Lux	1922	only	-	Oct	Sun>=2	 1:00	0	-
-Rule	Lux	1923	only	-	Apr	21	23:00	1:00	S
-Rule	Lux	1923	only	-	Oct	Sun>=2	 2:00	0	-
-Rule	Lux	1924	only	-	Mar	29	23:00	1:00	S
-Rule	Lux	1924	1928	-	Oct	Sun>=2	 1:00	0	-
-Rule	Lux	1925	only	-	Apr	 5	23:00	1:00	S
-Rule	Lux	1926	only	-	Apr	17	23:00	1:00	S
-Rule	Lux	1927	only	-	Apr	 9	23:00	1:00	S
-Rule	Lux	1928	only	-	Apr	14	23:00	1:00	S
-Rule	Lux	1929	only	-	Apr	20	23:00	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Europe/Luxembourg	0:24:36 -	LMT	1904 Jun
-			1:00	Lux	CE%sT	1918 Nov 25
-			0:00	Lux	WE%sT	1929 Oct  6 2:00s
-			0:00	Belgium	WE%sT	1940 May 14 3:00
-			1:00	C-Eur	WE%sT	1944 Sep 18 3:00
-			1:00	Belgium	CE%sT	1977
-			1:00	EU	CE%sT
-
-# Macedonia
-# see Serbia and Montenegro
-
-# Malta
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Malta	1973	only	-	Mar	31	0:00s	1:00	S
-Rule	Malta	1973	only	-	Sep	29	0:00s	0	-
-Rule	Malta	1974	only	-	Apr	21	0:00s	1:00	S
-Rule	Malta	1974	only	-	Sep	16	0:00s	0	-
-Rule	Malta	1975	1979	-	Apr	Sun>=15	2:00	1:00	S
-Rule	Malta	1975	1980	-	Sep	Sun>=15	2:00	0	-
-Rule	Malta	1980	only	-	Mar	31	2:00	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Malta	0:58:04 -	LMT	1893 Nov  2	# Valletta
-			1:00	Italy	CE%sT	1942 Nov  2 2:00s
-			1:00	C-Eur	CE%sT	1945 Apr  2 2:00s
-			1:00	Italy	CE%sT	1973 Mar 31
-			1:00	Malta	CE%sT	1981
-			1:00	EU	CE%sT
-
-# Moldova
-
-# From Paul Eggert (2001-02-11):
-# A previous version of this database followed Shanks, who writes that
-# Tiraspol switched to Moscow time on 1992-01-19 at 02:00.
-# However, this is most likely an error, as Moldova declared independence
-# on 1991-08-27 (the 1992-01-19 date is that of a Russian decree).
-# In early 1992 there was large-scale interethnic violence in the area
-# and it's possible that some Russophones continued to observe Moscow time.
-# But [two people] separately reported via
-# Jesper Norgaard that as of 2001-01-24 Tiraspol was like Chisinau.
-# The Tiraspol entry has therefore been removed for now.
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Chisinau	1:55:20 -	LMT	1880
-			1:55	-	CMT	1918 Feb 15 # Chisinau MT
-			1:44:24	-	BMT	1931 Jul 24 # Bucharest MT
-			2:00	Romania	EE%sT	1940 Aug 15
-			2:00	1:00	EEST	1941 Jul 17
-			1:00	C-Eur	CE%sT	1944 Aug 24
-			3:00	Russia	MSK/MSD	1990
-			3:00	-	MSK	1990 May 6
-			2:00	-	EET	1991
-			2:00	Russia	EE%sT	1992
-			2:00	E-Eur	EE%sT	1997
-# See Romania commentary for the guessed 1997 transition to EU rules.
-			2:00	EU	EE%sT
-
-# Monaco
-# Shanks gives 0:09 for Paris Mean Time; go with Howse's more precise 0:09:21.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Monaco	0:29:32 -	LMT	1891 Mar 15
-			0:09:21	-	PMT	1911 Mar 11    # Paris Mean Time
-			0:00	France	WE%sT	1945 Sep 16 3:00
-			1:00	France	CE%sT	1977
-			1:00	EU	CE%sT
-
-# Netherlands
-
-# Howse writes that the Netherlands' railways used GMT between 1892 and 1940,
-# but for other purposes the Netherlands used Amsterdam mean time.
-
-# However, Robert H. van Gent writes (2001-04-01):
-# Howse's statement is only correct up to 1909. From 1909-05-01 (00:00:00
-# Amsterdam mean time) onwards, the whole of the Netherlands (including
-# the Dutch railways) was required by law to observe Amsterdam mean time
-# (19 minutes 32.13 seconds ahead of GMT). This had already been the
-# common practice (except for the railways) for many decades but it was
-# not until 1909 when the Dutch government finally defined this by law.
-# On 1937-07-01 this was changed to 20 minutes (exactly) ahead of GMT and
-# was generally known as Dutch Time ("Nederlandse Tijd").
-#
-# (2001-04-08):
-# 1892-05-01 was the date when the Dutch railways were by law required to
-# observe GMT while the remainder of the Netherlands adhered to the common
-# practice of following Amsterdam mean time.
-#
-# (2001-04-09):
-# In 1835 the authorities of the province of North Holland requested the
-# municipal authorities of the towns and cities in the province to observe
-# Amsterdam mean time but I do not know in how many cases this request was
-# actually followed.
-#
-# From 1852 onwards the Dutch telegraph offices were by law required to
-# observe Amsterdam mean time. As the time signals from the observatory of
-# Leiden were also distributed by the telegraph system, I assume that most
-# places linked up with the telegraph (and railway) system automatically
-# adopted Amsterdam mean time.
-#
-# Although the early Dutch railway companies initially observed a variety
-# of times, most of them had adopted Amsterdam mean time by 1858 but it
-# was not until 1866 when they were all required by law to observe
-# Amsterdam mean time.
-
-# The data before 1945 are taken from
-# <http://www.phys.uu.nl/~vgent/wettijd/wettijd.htm>.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Neth	1916	only	-	May	 1	0:00	1:00	NST	# Netherlands Summer Time
-Rule	Neth	1916	only	-	Oct	 1	0:00	0	AMT	# Amsterdam Mean Time
-Rule	Neth	1917	only	-	Apr	16	2:00s	1:00	NST
-Rule	Neth	1917	only	-	Sep	17	2:00s	0	AMT
-Rule	Neth	1918	1921	-	Apr	Mon>=1	2:00s	1:00	NST
-Rule	Neth	1918	1921	-	Sep	lastMon	2:00s	0	AMT
-Rule	Neth	1922	only	-	Mar	lastSun	2:00s	1:00	NST
-Rule	Neth	1922	1936	-	Oct	Sun>=2	2:00s	0	AMT
-Rule	Neth	1923	only	-	Jun	Fri>=1	2:00s	1:00	NST
-Rule	Neth	1924	only	-	Mar	lastSun	2:00s	1:00	NST
-Rule	Neth	1925	only	-	Jun	Fri>=1	2:00s	1:00	NST
-# From 1926 through 1939 DST began 05-15, except that it was delayed by a week
-# in years when 05-15 fell in the Pentecost weekend.
-Rule	Neth	1926	1931	-	May	15	2:00s	1:00	NST
-Rule	Neth	1932	only	-	May	22	2:00s	1:00	NST
-Rule	Neth	1933	1936	-	May	15	2:00s	1:00	NST
-Rule	Neth	1937	only	-	May	22	2:00s	1:00	NST
-Rule	Neth	1937	only	-	Jul	 1	0:00	1:00	S
-Rule	Neth	1937	1939	-	Oct	Sun>=2	2:00s	0	-
-Rule	Neth	1938	1939	-	May	15	2:00s	1:00	S
-Rule	Neth	1945	only	-	Apr	 2	2:00s	1:00	S
-Rule	Neth	1945	only	-	Sep	16	2:00s	0	-
-#
-# Amsterdam Mean Time was +00:19:32.13 exactly, but the .13 is omitted
-# below because the current format requires GMTOFF to be an integer.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Europe/Amsterdam	0:19:32 -	LMT	1835
-			0:19:32	Neth	%s	1937 Jul  1
-			0:20	Neth	NE%sT	1940 May 16 0:00 # Dutch Time
-			1:00	C-Eur	CE%sT	1945 Apr  2 2:00
-			1:00	Neth	CE%sT	1977
-			1:00	EU	CE%sT
-
-# Norway
-# http://met.no/met/met_lex/q_u/sommertid.html (2004-01) agrees with Shanks.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Norway	1916	only	-	May	22	1:00	1:00	S
-Rule	Norway	1916	only	-	Sep	30	0:00	0	-
-Rule	Norway	1945	only	-	Apr	 2	2:00s	1:00	S
-Rule	Norway	1945	only	-	Oct	 1	2:00s	0	-
-Rule	Norway	1959	1964	-	Mar	Sun>=15	2:00s	1:00	S
-Rule	Norway	1959	1965	-	Sep	Sun>=15	2:00s	0	-
-Rule	Norway	1965	only	-	Apr	25	2:00s	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Oslo	0:43:00 -	LMT	1895 Jan  1
-			1:00	Norway	CE%sT	1940 Aug 10 23:00
-			1:00	C-Eur	CE%sT	1945 Apr  2  2:00
-			1:00	Norway	CE%sT	1980
-			1:00	EU	CE%sT
-
-# Svalbard & Jan Mayen
-
-# From Steffen Thorsen (2001-05-01):
-# Although I could not find it explicitly, it seems that Jan Mayen and
-# Svalbard have been using the same time as Norway at least since the
-# time they were declared as parts of Norway.  Svalbard was declared
-# as a part of Norway by law of 1925-07-17 no 11, section 4 and Jan
-# Mayen by law of 1930-02-27 no 2, section 2. (From
-# http://www.lovdata.no/all/nl-19250717-011.html and
-# http://www.lovdata.no/all/nl-19300227-002.html).  The law/regulation
-# for normal/standard time in Norway is from 1894-06-29 no 1 (came
-# into operation on 1895-01-01) and Svalbard/Jan Mayen seem to be a
-# part of this law since 1925/1930. (From
-# http://www.lovdata.no/all/nl-18940629-001.html ) I have not been
-# able to find if Jan Mayen used a different time zone (e.g. -0100)
-# before 1930. Jan Mayen has only been "inhabitated" since 1921 by
-# Norwegian meteorologists and maybe used the same time as Norway ever
-# since 1921.  Svalbard (Arctic/Longyearbyen) has been inhabited since
-# before 1895, and therefore probably changed the local time somewhere
-# between 1895 and 1925 (inclusive).
-
-# From Paul Eggert (2001-05-01):
-#
-# Actually, Jan Mayen was never occupied by Germany during World War II,
-# so it must have diverged from Oslo time during the war, as Oslo was
-# keeping Berlin time.
-#
-# <http://home.no.net/janmayen/history.htm> says that the meteorologists
-# burned down their station in 1940 and left the island, but returned in
-# 1941 with a small Norwegian garrison and continued operations despite
-# frequent air ttacks from Germans.  In 1943 the Americans established a
-# radiolocating station on the island, called "Atlantic City".  Possibly
-# the UTC offset changed during the war, but I think it unlikely that
-# Jan Mayen used German daylight-saving rules.
-#
-# Svalbard is more complicated, as it was raided in August 1941 by an
-# Allied party that evacuated the civilian population to England (says
-# <http://www.bartleby.com/65/sv/Svalbard.html>).  The Svalbard FAQ
-# <http://www.svalbard.com/SvalbardFAQ.html> says that the Germans were
-# expelled on 1942-05-14.  However, small parties of Germans did return,
-# and according to Wilhelm Dege's book "War North of 80" (1954)
-# <http://www.ucalgary.ca/UofC/departments/UP/1-55238/1-55238-110-2.html>
-# the German armed forces at the Svalbard weather station code-named
-# Haudegen did not surrender to the Allies until September 1945.
-#
-# All these events predate our cutoff date of 1970.  Unless we can
-# come up with more definitive info about the timekeeping during the
-# war years it's probably best just do do the following for now:
-Link	Europe/Oslo	Arctic/Longyearbyen
-Link	Europe/Oslo	Atlantic/Jan_Mayen
-
-# Poland
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Poland	1918	1919	-	Sep	16	2:00s	0	-
-Rule	Poland	1919	only	-	Apr	15	2:00s	1:00	S
-# Whitman gives 1944 Nov 30; go with Shanks.
-Rule	Poland	1944	only	-	Oct	 4	2:00	0	-
-# For 1944-1948 Whitman gives the previous day; go with Shanks.
-Rule	Poland	1945	only	-	Apr	29	0:00	1:00	S
-Rule	Poland	1945	only	-	Nov	 1	0:00	0	-
-# For 1946 on the source is Kazimierz Borkowski,
-# Torun Center for Astronomy, Dept. of Radio Astronomy, Nicolaus Copernicus U.,
-# <http://www.astro.uni.torun.pl/~kb/Artykuly/U-PA/Czas2.htm#tth_tAb1>
-# Thanks to Przemyslaw Augustyniak (2005-05-28) for this reference.
-# He also gives these further references:
-# Mon Pol nr 13, poz 162 (1995) <http://www.abc.com.pl/serwis/mp/1995/0162.htm>
-# Druk nr 2180 (2003) <http://www.senat.gov.pl/k5/dok/sejm/053/2180.pdf>
-Rule	Poland	1946	only	-	Apr	14	0:00s	1:00	S
-Rule	Poland	1946	only	-	Oct	 7	2:00s	0	-
-Rule	Poland	1947	only	-	May	 4	2:00s	1:00	S
-Rule	Poland	1947	1949	-	Oct	Sun>=1	2:00s	0	-
-Rule	Poland	1948	only	-	Apr	18	2:00s	1:00	S
-Rule	Poland	1949	only	-	Apr	10	2:00s	1:00	S
-Rule	Poland	1957	only	-	Jun	 2	1:00s	1:00	S
-Rule	Poland	1957	1958	-	Sep	lastSun	1:00s	0	-
-Rule	Poland	1958	only	-	Mar	30	1:00s	1:00	S
-Rule	Poland	1959	only	-	May	31	1:00s	1:00	S
-Rule	Poland	1959	1961	-	Oct	Sun>=1	1:00s	0	-
-Rule	Poland	1960	only	-	Apr	 3	1:00s	1:00	S
-Rule	Poland	1961	1964	-	May	lastSun	1:00s	1:00	S
-Rule	Poland	1962	1964	-	Sep	lastSun	1:00s	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Warsaw	1:24:00 -	LMT	1880
-			1:24:00	-	WMT	1915 Aug  5   # Warsaw Mean Time
-			1:00	C-Eur	CE%sT	1918 Sep 16 3:00
-			2:00	Poland	EE%sT	1922 Jun
-			1:00	Poland	CE%sT	1940 Jun 23 2:00
-			1:00	C-Eur	CE%sT	1944 Oct
-			1:00	Poland	CE%sT	1977
-			1:00	W-Eur	CE%sT	1988
-			1:00	EU	CE%sT
-
-# Portugal
-#
-# From Rui Pedro Salgueiro (1992-11-12):
-# Portugal has recently (September, 27) changed timezone
-# (from WET to MET or CET) to harmonize with EEC.
-#
-# Martin Bruckmann (1996-02-29) reports via Peter Ilieve
-# that Portugal is reverting to 0:00 by not moving its clocks this spring.
-# The new Prime Minister was fed up with getting up in the dark in the winter.
-#
-# From Paul Eggert (1996-11-12):
-# IATA SSIM (1991-09) reports several 1991-09 and 1992-09 transitions
-# at 02:00u, not 01:00u.  Assume that these are typos.
-# IATA SSIM (1991/1992) reports that the Azores were at -1:00.
-# IATA SSIM (1993-02) says +0:00; later issues (through 1996-09) say -1:00.
-# Guess that the Azores changed to EU rules in 1992 (since that's when Portugal
-# harmonized with the EU), and that they stayed +0:00 that winter.
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-# DSH writes that despite Decree 1,469 (1915), the change to the clocks was not
-# done every year, depending on what Spain did, because of railroad schedules.
-# Go with Shanks.
-Rule	Port	1916	only	-	Jun	17	23:00	1:00	S
-# Whitman gives 1916 Oct 31; go with Shanks.
-Rule	Port	1916	only	-	Nov	 1	 1:00	0	-
-Rule	Port	1917	only	-	Feb	28	23:00s	1:00	S
-Rule	Port	1917	1921	-	Oct	14	23:00s	0	-
-Rule	Port	1918	only	-	Mar	 1	23:00s	1:00	S
-Rule	Port	1919	only	-	Feb	28	23:00s	1:00	S
-Rule	Port	1920	only	-	Feb	29	23:00s	1:00	S
-Rule	Port	1921	only	-	Feb	28	23:00s	1:00	S
-Rule	Port	1924	only	-	Apr	16	23:00s	1:00	S
-Rule	Port	1924	only	-	Oct	14	23:00s	0	-
-Rule	Port	1926	only	-	Apr	17	23:00s	1:00	S
-Rule	Port	1926	1929	-	Oct	Sat>=1	23:00s	0	-
-Rule	Port	1927	only	-	Apr	 9	23:00s	1:00	S
-Rule	Port	1928	only	-	Apr	14	23:00s	1:00	S
-Rule	Port	1929	only	-	Apr	20	23:00s	1:00	S
-Rule	Port	1931	only	-	Apr	18	23:00s	1:00	S
-# Whitman gives 1931 Oct 8; go with Shanks.
-Rule	Port	1931	1932	-	Oct	Sat>=1	23:00s	0	-
-Rule	Port	1932	only	-	Apr	 2	23:00s	1:00	S
-# Shanks gives 1934 Apr 4; go with Whitman.
-Rule	Port	1934	only	-	Apr	 7	23:00s	1:00	S
-# Whitman gives 1934 Oct 5; go with Shanks.
-Rule	Port	1934	1938	-	Oct	Sat>=1	23:00s	0	-
-# Shanks gives 1935 Apr 30; go with Whitman.
-Rule	Port	1935	only	-	Mar	30	23:00s	1:00	S
-Rule	Port	1936	only	-	Apr	18	23:00s	1:00	S
-# Whitman gives 1937 Apr 2; go with Shanks.
-Rule	Port	1937	only	-	Apr	 3	23:00s	1:00	S
-Rule	Port	1938	only	-	Mar	26	23:00s	1:00	S
-Rule	Port	1939	only	-	Apr	15	23:00s	1:00	S
-# Whitman gives 1939 Oct 7; go with Shanks.
-Rule	Port	1939	only	-	Nov	18	23:00s	0	-
-Rule	Port	1940	only	-	Feb	24	23:00s	1:00	S
-# Shanks gives 1940 Oct 7; go with Whitman.
-Rule	Port	1940	1941	-	Oct	 5	23:00s	0	-
-Rule	Port	1941	only	-	Apr	 5	23:00s	1:00	S
-Rule	Port	1942	1945	-	Mar	Sat>=8	23:00s	1:00	S
-Rule	Port	1942	only	-	Apr	25	22:00s	2:00	M # Midsummer
-Rule	Port	1942	only	-	Aug	15	22:00s	1:00	S
-Rule	Port	1942	1945	-	Oct	Sat>=24	23:00s	0	-
-Rule	Port	1943	only	-	Apr	17	22:00s	2:00	M
-Rule	Port	1943	1945	-	Aug	Sat>=25	22:00s	1:00	S
-Rule	Port	1944	1945	-	Apr	Sat>=21	22:00s	2:00	M
-Rule	Port	1946	only	-	Apr	Sat>=1	23:00s	1:00	S
-Rule	Port	1946	only	-	Oct	Sat>=1	23:00s	0	-
-Rule	Port	1947	1949	-	Apr	Sun>=1	 2:00s	1:00	S
-Rule	Port	1947	1949	-	Oct	Sun>=1	 2:00s	0	-
-# Shanks says DST was observed in 1950; go with Whitman.
-# Whitman gives Oct lastSun for 1952 on; go with Shanks.
-Rule	Port	1951	1965	-	Apr	Sun>=1	 2:00s	1:00	S
-Rule	Port	1951	1965	-	Oct	Sun>=1	 2:00s	0	-
-Rule	Port	1977	only	-	Mar	27	 0:00s	1:00	S
-Rule	Port	1977	only	-	Sep	25	 0:00s	0	-
-Rule	Port	1978	1979	-	Apr	Sun>=1	 0:00s	1:00	S
-Rule	Port	1978	only	-	Oct	 1	 0:00s	0	-
-Rule	Port	1979	1982	-	Sep	lastSun	 1:00s	0	-
-Rule	Port	1980	only	-	Mar	lastSun	 0:00s	1:00	S
-Rule	Port	1981	1982	-	Mar	lastSun	 1:00s	1:00	S
-Rule	Port	1983	only	-	Mar	lastSun	 2:00s	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-# Shanks says that the transition from LMT to WET occurred 1911-05-24;
-# Willett says 1912-01-01.  Go with Willett.
-Zone	Europe/Lisbon	-0:36:32 -	LMT	1884
-			-0:36:32 -	LMT	1912 Jan  1  # Lisbon Mean Time
-			 0:00	Port	WE%sT	1966 Apr  3 2:00
-			 1:00	-	CET	1976 Sep 26 1:00
-			 0:00	Port	WE%sT	1983 Sep 25 1:00s
-			 0:00	W-Eur	WE%sT	1992 Sep 27 1:00s
-			 1:00	EU	CE%sT	1996 Mar 31 1:00u
-			 0:00	EU	WE%sT
-Zone Atlantic/Azores	-1:42:40 -	LMT	1884		# Ponta Delgada
-			-1:54:32 -	HMT	1911 May 24  # Horta Mean Time
-			-2:00	Port	AZO%sT	1966 Apr  3 2:00 # Azores Time
-			-1:00	Port	AZO%sT	1983 Sep 25 1:00s
-			-1:00	W-Eur	AZO%sT	1992 Sep 27 1:00s
-			 0:00	EU	WE%sT	1993 Mar 28 1:00u
-			-1:00	EU	AZO%sT
-Zone Atlantic/Madeira	-1:07:36 -	LMT	1884		# Funchal
-			-1:07:36 -	FMT	1911 May 24  # Funchal Mean Time
-			-1:00	Port	MAD%sT	1966 Apr  3 2:00 # Madeira Time
-			 0:00	Port	WE%sT	1983 Sep 25 1:00s
-			 0:00	EU	WE%sT
-
-# Romania
-#
-# From Paul Eggert (1999-10-07):
-# <a href="http://www.nineoclock.ro/POL/1778pol.html">
-# Nine O'clock</a> (1998-10-23) reports that the switch occurred at
-# 04:00 local time in fall 1998.  For lack of better info,
-# assume that Romania and Moldova switched to EU rules in 1997,
-# the same year as Bulgaria.
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Romania	1932	only	-	May	21	 0:00s	1:00	S
-Rule	Romania	1932	1939	-	Oct	Sun>=1	 0:00s	0	-
-Rule	Romania	1933	1939	-	Apr	Sun>=2	 0:00s	1:00	S
-Rule	Romania	1979	only	-	May	27	 0:00	1:00	S
-Rule	Romania	1979	only	-	Sep	lastSun	 0:00	0	-
-Rule	Romania	1980	only	-	Apr	 5	23:00	1:00	S
-Rule	Romania	1980	only	-	Sep	lastSun	 1:00	0	-
-Rule	Romania	1991	1993	-	Mar	lastSun	 0:00s	1:00	S
-Rule	Romania	1991	1993	-	Sep	lastSun	 0:00s	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Europe/Bucharest	1:44:24 -	LMT	1891 Oct
-			1:44:24	-	BMT	1931 Jul 24	# Bucharest MT
-			2:00	Romania	EE%sT	1981 Mar 29 2:00s
-			2:00	C-Eur	EE%sT	1991
-			2:00	Romania	EE%sT	1994
-			2:00	E-Eur	EE%sT	1997
-			2:00	EU	EE%sT
-
-# Russia
-
-# From Paul Eggert (1999-11-12):
-# Except for Moscow after 1919-07-01, I invented the time zone abbreviations.
-# Moscow time zone abbreviations after 1919-07-01, and Moscow rules after 1991,
-# are from Andrey A. Chernov.  The rest is from Shanks, except we follow
-# Chernov's report that 1992 DST transitions were Sat 23:00, not Sun 02:00s.
-#
-# From Stanislaw A. Kuzikowski (1994-06-29):
-# But now it is some months since Novosibirsk is 3 hours ahead of Moscow!
-# I do not know why they have decided to make this change;
-# as far as I remember it was done exactly during winter->summer switching
-# so we (Novosibirsk) simply did not switch.
-#
-# From Andrey A. Chernov (1996-10-04):
-# `MSK' and `MSD' were born and used initially on Moscow computers with
-# UNIX-like OSes by several developer groups (e.g. Demos group, Kiae group)....
-# The next step was the UUCP network, the Relcom predecessor
-# (used mainly for mail), and MSK/MSD was actively used there.
-#
-# From Chris Carrier (1996-10-30):
-# According to a friend of mine who rode the Trans-Siberian Railroad from
-# Moscow to Irkutsk in 1995, public air and rail transport in Russia ...
-# still follows Moscow time, no matter where in Russia it is located.
-#
-# For Grozny, Chechnya, we have the following story from
-# John Daniszewski, "Scavengers in the Rubble", Los Angeles Times (2001-02-07):
-# News--often false--is spread by word of mouth.  A rumor that it was
-# time to move the clocks back put this whole city out of sync with
-# the rest of Russia for two weeks--even soldiers stationed here began
-# enforcing curfew at the wrong time.
-#
-# From Gwillim Law (2001-06-05):
-# There's considerable evidence that Sakhalin Island used to be in
-# UTC+11, and has changed to UTC+10, in this decade.  I start with the
-# SSIM, which listed Yuzhno-Sakhalinsk in zone RU10 along with Magadan
-# until February 1997, and then in RU9 with Khabarovsk and Vladivostok
-# since September 1997....  Although the Kuril Islands are
-# administratively part of Sakhalin oblast', they appear to have
-# remained on UTC+11 along with Magadan.
-#
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-#
-# Kaliningradskaya oblast'.
-Zone Europe/Kaliningrad	 1:22:00 -	LMT	1893 Apr
-			 1:00	C-Eur	CE%sT	1945
-			 2:00	Poland	CE%sT	1946
-			 3:00	Russia	MSK/MSD	1991 Mar 31 2:00s
-			 2:00	Russia	EE%sT
-#
-# From Oscar van Vlijmen (2001-08-25): [This region consists of]
-# Respublika Adygeya, Arkhangel'skaya oblast', Astrakhanskaya oblast',
-# Belgorodskaya oblast', Bryanskaya oblast', Vladimirskaya oblast',
-# Volgogradskaya oblast', Vologodskaya oblast', Voronezhskaya oblast',
-# Respublika Dagestan, Ivanovskaya oblast', Respublika Ingushetiya,
-# Kabarbino-Balkarskaya Respublika, Respublika Kalmykiya,
-# Kalyzhskaya oblast', Respublika Karachaevo-Cherkessiya,
-# Respublika Kareliya, Kirovskaya oblast', Respublika Komi,
-# Kostromskaya oblast', Krasnodarskij kraj, Kurskaya oblast',
-# Leningradskaya oblast', Lipetskaya oblast', Respublika Marij El,
-# Respublika Mordoviya, Moskva, Moskovskaya oblast',
-# Murmanskaya oblast', Nenetskij avtonomnyj okrug,
-# Nizhegorodskaya oblast', Novgorodskaya oblast', Orlovskaya oblast',
-# Penzenskaya oblast', Pskovskaya oblast', Rostovskaya oblast',
-# Ryazanskaya oblast', Sankt-Peterburg, Saratovskaya oblast',
-# Respublika Severnaya Osetiya, Smolenskaya oblast',
-# Stavropol'skij kraj, Tambovskaya oblast', Respublika Tatarstan,
-# Tverskaya oblast', Tyl'skaya oblast', Ul'yanovskaya oblast',
-# Chechenskaya Respublika, Chuvashskaya oblast',
-# Yaroslavskaya oblast'
-Zone Europe/Moscow	 2:30:20 -	LMT	1880
-			 2:30	-	MMT	1916 Jul  3 # Moscow Mean Time
-			 2:30:48 Russia	%s	1919 Jul  1 2:00
-			 3:00	Russia	MSK/MSD	1922 Oct
-			 2:00	-	EET	1930 Jun 21
-			 3:00	Russia	MSK/MSD	1991 Mar 31 2:00s
-			 2:00	Russia	EE%sT	1992 Jan 19 2:00s
-			 3:00	Russia	MSK/MSD
-#
-# From Oscar van Vlijmen (2001-08-25): [This region consists of]
-# Samarskaya oblast', Udmyrtskaya respublika
-Zone Europe/Samara	 3:20:36 -	LMT	1919 Jul  1 2:00
-			 3:00	-	KUYT	1930 Jun 21 # Kuybyshev
-			 4:00	Russia	KUY%sT	1989 Mar 26 2:00s
-			 3:00	Russia	KUY%sT	1991 Mar 31 2:00s
-			 2:00	Russia	KUY%sT	1991 Sep 29 2:00s
-			 3:00	-	KUYT	1991 Oct 20 3:00
-			 4:00	Russia	SAM%sT	# Samara Time
-#
-# From Oscar van Vlijmen (2001-08-25): [This region consists of]
-# Respublika Bashkortostan, Komi-Permyatskij avtonomnyj okrug,
-# Kurganskaya oblast', Orenburgskaya oblast', Permskaya oblast',
-# Sverdlovskaya oblast', Tyumenskaya oblast',
-# Khanty-Manskijskij avtonomnyj okrug, Chelyabinskaya oblast',
-# Yamalo-Nenetskij avtonomnyj okrug.
-Zone Asia/Yekaterinburg	 4:02:24 -	LMT	1919 Jul 15 4:00
-			 4:00	-	SVET	1930 Jun 21 # Sverdlovsk Time
-			 5:00	Russia	SVE%sT	1991 Mar 31 2:00s
-			 4:00	Russia	SVE%sT	1992 Jan 19 2:00s
-			 5:00	Russia	YEK%sT	# Yekaterinburg Time
-#
-# From Oscar van Vlijmen (2001-08-25): [This region consists of]
-# Respublika Altaj, Altajskij kraj, Omskaya oblast'.
-Zone Asia/Omsk		 4:53:36 -	LMT	1919 Nov 14
-			 5:00	-	OMST	1930 Jun 21 # Omsk TIme
-			 6:00	Russia	OMS%sT	1991 Mar 31 2:00s
-			 5:00	Russia	OMS%sT	1992 Jan 19 2:00s
-			 6:00	Russia	OMS%sT
-#
-# Novosibirskaya oblast'.
-Zone Asia/Novosibirsk	 5:31:40 -	LMT	1919 Dec 14 6:00
-			 6:00	-	NOVT	1930 Jun 21 # Novosibirsk Time
-			 7:00	Russia	NOV%sT	1991 Mar 31 2:00s
-			 6:00	Russia	NOV%sT	1992 Jan 19 2:00s
-			 7:00	Russia	NOV%sT	1993 May 23 # says Shanks
-			 6:00	Russia	NOV%sT
-#
-# From Oscar van Vlijmen (2001-08-25): [This region consists of]
-# Kemerovskaya oblast', Krasnoyarskij kraj,
-# Tajmyrskij (Dolgano-Nenetskij) avtonomnyj okrug, Tomskaya oblast',
-# Respublika Tuva, Respublika Khakasiya, Evenkijskij avtonomnyj okrug.
-Zone Asia/Krasnoyarsk	 6:11:20 -	LMT	1920 Jan  6
-			 6:00	-	KRAT	1930 Jun 21 # Krasnoyarsk Time
-			 7:00	Russia	KRA%sT	1991 Mar 31 2:00s
-			 6:00	Russia	KRA%sT	1992 Jan 19 2:00s
-			 7:00	Russia	KRA%sT
-#
-# From Oscar van Vlijmen (2001-08-25): [This region consists of]
-# Respublika Buryatiya, Irkutskaya oblast',
-# Ust'-Ordynskij Buryatskij avtonomnyj okrug.
-Zone Asia/Irkutsk	 6:57:20 -	LMT	1880
-			 6:57:20 -	IMT	1920 Jan 25 # Irkutsk Mean Time
-			 7:00	-	IRKT	1930 Jun 21 # Irkutsk Time
-			 8:00	Russia	IRK%sT	1991 Mar 31 2:00s
-			 7:00	Russia	IRK%sT	1992 Jan 19 2:00s
-			 8:00	Russia	IRK%sT
-#
-# From Oscar van Vlijmen (2003-10-18): [This region consists of]
-# Aginskij Buryatskij avtonomnyj okrug, Amurskaya oblast',
-# [parts of] Respublika Sakha (Yakutiya), Chitinskaya oblast'.
-# The Sakha districts are: Aldanskij, Amginskij, Anabarskij,
-# Bulunskij, Verkhnekolymskij, Verkhnevilyujskij, Vilyujskij, Gornyj,
-# Zhiganskij, Kobyajskij, Lenskij, Megino-Kangalasskij, Mirninskij,
-# Namskij, Nyurbinskij, Olenekskij, Olekminskij, Srednekolymskij,
-# Suntarskij, Tattinskij, Ust'-Aldanskij, Khangalasskij,
-# Churapchinskij, Eveno-Bytantajskij.
-Zone Asia/Yakutsk	 8:38:40 -	LMT	1919 Dec 15
-			 8:00	-	YAKT	1930 Jun 21 # Yakutsk Time
-			 9:00	Russia	YAK%sT	1991 Mar 31 2:00s
-			 8:00	Russia	YAK%sT	1992 Jan 19 2:00s
-			 9:00	Russia	YAK%sT
-#
-# From Oscar van Vlijmen (2003-10-18): [This region consists of]
-# Evrejskaya avtonomnaya oblast', Khabarovskij kraj, Primorskij kraj,
-# [parts of] Respublika Sakha (Yakutiya).
-# The Sakha districts are: Verkhoyanskij, Tomponskij, Ust'-Majskij,
-# Ust'-Yanskij.
-Zone Asia/Vladivostok	 8:47:44 -	LMT	1922 Nov 15
-			 9:00	-	VLAT	1930 Jun 21 # Vladivostok Time
-			10:00	Russia	VLA%sT	1991 Mar 31 2:00s
-			 9:00	Russia	VLA%sST	1992 Jan 19 2:00s
-			10:00	Russia	VLA%sT
-#
-# Sakhalinskaya oblast'.
-# The Zone name should be Yuzhno-Sakhalinsk, but that's too long.
-Zone Asia/Sakhalin	 9:30:48 -	LMT	1905 Aug 23
-			 9:00	-	CJT	1938
-			 9:00	-	JST	1945 Aug 25
-			11:00	Russia	SAK%sT	1991 Mar 31 2:00s # Sakhalin T.
-			10:00	Russia	SAK%sT	1992 Jan 19 2:00s
-			11:00	Russia	SAK%sT	1997 Mar lastSun 2:00s
-			10:00	Russia	SAK%sT
-#
-# From Oscar van Vlijmen (2003-10-18): [This region consists of]
-# Magadanskaya oblast', Respublika Sakha (Yakutiya).
-# Probably also: Kuril Islands.
-# The Sakha districts are: Abyjskij, Allaikhovskij, Momskij,
-# Nizhnekolymskij, Ojmyakonskij.
-Zone Asia/Magadan	10:03:12 -	LMT	1924 May  2
-			10:00	-	MAGT	1930 Jun 21 # Magadan Time
-			11:00	Russia	MAG%sT	1991 Mar 31 2:00s
-			10:00	Russia	MAG%sT	1992 Jan 19 2:00s
-			11:00	Russia	MAG%sT
-#
-# From Oscar van Vlijmen (2001-08-25): [This region consists of]
-# Kamchatskaya oblast', Koryakskij avtonomnyj okrug.
-#
-# The Zone name should be Asia/Petropavlovsk-Kamchatski, but that's too long.
-Zone Asia/Kamchatka	10:34:36 -	LMT	1922 Nov 10
-			11:00	-	PETT	1930 Jun 21 # P-K Time
-			12:00	Russia	PET%sT	1991 Mar 31 2:00s
-			11:00	Russia	PET%sT	1992 Jan 19 2:00s
-			12:00	Russia	PET%sT
-#
-# Chukotskij avtonomnyj okrug
-Zone Asia/Anadyr	11:49:56 -	LMT	1924 May  2
-			12:00	-	ANAT	1930 Jun 21 # Anadyr Time
-			13:00	Russia	ANA%sT	1982 Apr  1 0:00s
-			12:00	Russia	ANA%sT	1991 Mar 31 2:00s
-			11:00	Russia	ANA%sT	1992 Jan 19 2:00s
-			12:00	Russia	ANA%sT
-
-# Serbia and Montenegro
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Belgrade	1:22:00	-	LMT	1884
-			1:00	-	CET	1941 Apr 18 23:00
-			1:00	C-Eur	CE%sT	1945 May  8  2:00s
-			1:00	1:00	CEST	1945 Sep 16  2:00s
-# Metod Kozelj reports that the legal date of
-# transition to EU rules was 1982-11-27, for all of Yugoslavia at the time.
-# Shanks doesn't give as much detail, so go with Kozelj.
-			1:00	-	CET	1982 Nov 27
-			1:00	EU	CE%sT
-Link Europe/Belgrade Europe/Ljubljana	# Slovenia
-Link Europe/Belgrade Europe/Sarajevo	# Bosnia and Herzegovina
-Link Europe/Belgrade Europe/Skopje	# Macedonia
-Link Europe/Belgrade Europe/Zagreb	# Croatia
-
-# Slovakia
-Link Europe/Prague Europe/Bratislava
-
-# Slovenia
-# see Serbia and Montenegro
-
-# Spain
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-# For 1917-1919 Whitman gives Apr Sat>=1 - Oct Sat>=1; go with Shanks.
-Rule	Spain	1917	only	-	May	 5	23:00s	1:00	S
-Rule	Spain	1917	1919	-	Oct	 6	23:00s	0	-
-Rule	Spain	1918	only	-	Apr	15	23:00s	1:00	S
-Rule	Spain	1919	only	-	Apr	 5	23:00s	1:00	S
-# Whitman gives 1921 Feb 28 - Oct 14; go with Shanks.
-Rule	Spain	1924	only	-	Apr	16	23:00s	1:00	S
-# Whitman gives 1924 Oct 14; go with Shanks.
-Rule	Spain	1924	only	-	Oct	 4	23:00s	0	-
-Rule	Spain	1926	only	-	Apr	17	23:00s	1:00	S
-# Whitman says no DST in 1929; go with Shanks.
-Rule	Spain	1926	1929	-	Oct	Sat>=1	23:00s	0	-
-Rule	Spain	1927	only	-	Apr	 9	23:00s	1:00	S
-Rule	Spain	1928	only	-	Apr	14	23:00s	1:00	S
-Rule	Spain	1929	only	-	Apr	20	23:00s	1:00	S
-# Whitman gives 1937 Jun 16, 1938 Apr 16, 1940 Apr 13; go with Shanks.
-Rule	Spain	1937	only	-	May	22	23:00s	1:00	S
-Rule	Spain	1937	1939	-	Oct	Sat>=1	23:00s	0	-
-Rule	Spain	1938	only	-	Mar	22	23:00s	1:00	S
-Rule	Spain	1939	only	-	Apr	15	23:00s	1:00	S
-Rule	Spain	1940	only	-	Mar	16	23:00s	1:00	S
-# Whitman says no DST 1942-1945; go with Shanks.
-Rule	Spain	1942	only	-	May	 2	22:00s	2:00	M # Midsummer
-Rule	Spain	1942	only	-	Sep	 1	22:00s	1:00	S
-Rule	Spain	1943	1946	-	Apr	Sat>=13	22:00s	2:00	M
-Rule	Spain	1943	only	-	Oct	 3	22:00s	1:00	S
-Rule	Spain	1944	only	-	Oct	10	22:00s	1:00	S
-Rule	Spain	1945	only	-	Sep	30	 1:00	1:00	S
-Rule	Spain	1946	only	-	Sep	30	 0:00	0	-
-Rule	Spain	1949	only	-	Apr	30	23:00	1:00	S
-Rule	Spain	1949	only	-	Sep	30	 1:00	0	-
-Rule	Spain	1974	1975	-	Apr	Sat>=13	23:00	1:00	S
-Rule	Spain	1974	1975	-	Oct	Sun>=1	 1:00	0	-
-Rule	Spain	1976	only	-	Mar	27	23:00	1:00	S
-Rule	Spain	1976	1977	-	Sep	lastSun	 1:00	0	-
-Rule	Spain	1977	1978	-	Apr	 2	23:00	1:00	S
-Rule	Spain	1978	only	-	Oct	 1	 1:00	0	-
-# The following rules are copied from Morocco from 1967 through 1978.
-Rule SpainAfrica 1967	only	-	Jun	 3	12:00	1:00	S
-Rule SpainAfrica 1967	only	-	Oct	 1	 0:00	0	-
-Rule SpainAfrica 1974	only	-	Jun	24	 0:00	1:00	S
-Rule SpainAfrica 1974	only	-	Sep	 1	 0:00	0	-
-Rule SpainAfrica 1976	1977	-	May	 1	 0:00	1:00	S
-Rule SpainAfrica 1976	only	-	Aug	 1	 0:00	0	-
-Rule SpainAfrica 1977	only	-	Sep	28	 0:00	0	-
-Rule SpainAfrica 1978	only	-	Jun	 1	 0:00	1:00	S
-Rule SpainAfrica 1978	only	-	Aug	 4	 0:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Madrid	-0:14:44 -	LMT	1901
-			 0:00	Spain	WE%sT	1946 Sep 30
-			 1:00	Spain	CE%sT	1979
-			 1:00	EU	CE%sT
-Zone	Africa/Ceuta	-0:21:16 -	LMT	1901
-			 0:00	-	WET	1918 May  6 23:00
-			 0:00	1:00	WEST	1918 Oct  7 23:00
-			 0:00	-	WET	1924
-			 0:00	Spain	WE%sT	1929
-			 0:00 SpainAfrica WE%sT 1984 Mar 16
-			 1:00	-	CET	1986
-			 1:00	EU	CE%sT
-Zone	Atlantic/Canary	-1:01:36 -	LMT	1922 Mar # Las Palmas de Gran C.
-			-1:00	-	CANT	1946 Sep 30 1:00 # Canaries Time
-			 0:00	-	WET	1980 Apr  6 0:00s
-			 0:00	1:00	WEST	1980 Sep 28 0:00s
-			 0:00	EU	WE%sT
-# IATA SSIM (1996-09) says the Canaries switch at 2:00u, not 1:00u.
-# Ignore this for now, as the Canaries are part of the EU.
-
-# Sweden
-
-# From Ivan Nilsson (2001-04-13), superseding Shanks:
-#
-# The law "Svensk forfattningssamling 1878, no 14" about standard time in 1879:
-# From the beginning of 1879 (that is 01-01 00:00) the time for all
-# places in the country is "the mean solar time for the meridian at
-# three degrees, or twelve minutes of time, to the west of the
-# meridian of the Observatory of Stockholm".  The law is dated 1878-05-31.
-#
-# The observatory at that time had the meridian 18 degrees 03' 30"
-# eastern longitude = 01:12:14 in time.  Less 12 minutes gives the
-# national standard time as 01:00:14 ahead of GMT....
-#
-# About the beginning of CET in Sweden. The lawtext ("Svensk
-# forfattningssamling 1899, no 44") states, that "from the beginning
-# of 1900... ... the same as the mean solar time for the meridian at
-# the distance of one hour of time from the meridian of the English
-# observatory at Greenwich, or at 12 minutes 14 seconds to the west
-# from the meridian of the Observatory of Stockholm". The law is dated
-# 1899-06-16.  In short: At 1900-01-01 00:00:00 the new standard time
-# in Sweden is 01:00:00 ahead of GMT.
-#
-# 1916: The lawtext ("Svensk forfattningssamling 1916, no 124") states
-# that "1916-05-15 is considered to begin one hour earlier". It is
-# pretty obvious that at 05-14 23:00 the clocks are set to 05-15 00:00....
-# Further the law says, that "1916-09-30 is considered to end one hour later".
-#
-# The laws regulating [DST] are available on the site of the Swedish
-# Parliament beginning with 1985 - the laws regulating 1980/1984 are
-# not available on the site (to my knowledge they are only available
-# in Swedish): <http://www.riksdagen.se/english/work/sfst.asp> (type
-# "sommartid" without the quotes in the field "Fritext" and then click
-# the Sok-button).
-#
-# (2001-05-13):
-#
-# I have now found a newspaper stating that at 1916-10-01 01:00
-# summertime the church-clocks etc were set back one hour to show
-# 1916-10-01 00:00 standard time.  The article also reports that some
-# people thought the switch to standard time would take place already
-# at 1916-10-01 00:00 summer time, but they had to wait for another
-# hour before the event took place.
-#
-# Source: The newspaper "Dagens Nyheter", 1916-10-01, page 7 upper left.
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Europe/Stockholm	1:12:12 -	LMT	1879 Jan  1
-			1:00:14	-	SET	1900 Jan  1	# Swedish Time
-			1:00	-	CET	1916 May 14 23:00
-			1:00	1:00	CEST	1916 Oct  1 01:00
-			1:00	-	CET	1980
-			1:00	EU	CE%sT
-
-# Switzerland
-# From Howse:
-# By the end of the 18th century clocks and watches became commonplace
-# and their performance improved enormously.  Communities began to keep
-# mean time in preference to apparent time -- Geneva from 1780 ....
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-# From Whitman (who writes ``Midnight?''):
-Rule	Swiss	1940	only	-	Nov	 2	0:00	1:00	S
-Rule	Swiss	1940	only	-	Dec	31	0:00	0	-
-# From Shanks:
-Rule	Swiss	1941	1942	-	May	Sun>=1	2:00	1:00	S
-Rule	Swiss	1941	1942	-	Oct	Sun>=1	0:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Zurich	0:34:08 -	LMT	1848 Sep 12
-			0:29:44	-	BMT	1894 Jun # Bern Mean Time
-			1:00	Swiss	CE%sT	1981
-			1:00	EU	CE%sT
-
-# Turkey
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Turkey	1916	only	-	May	 1	0:00	1:00	S
-Rule	Turkey	1916	only	-	Oct	 1	0:00	0	-
-Rule	Turkey	1920	only	-	Mar	28	0:00	1:00	S
-Rule	Turkey	1920	only	-	Oct	25	0:00	0	-
-Rule	Turkey	1921	only	-	Apr	 3	0:00	1:00	S
-Rule	Turkey	1921	only	-	Oct	 3	0:00	0	-
-Rule	Turkey	1922	only	-	Mar	26	0:00	1:00	S
-Rule	Turkey	1922	only	-	Oct	 8	0:00	0	-
-# Whitman gives 1923 Apr 28 - Sep 16 and no DST in 1924-1925; go with Shanks.
-Rule	Turkey	1924	only	-	May	13	0:00	1:00	S
-Rule	Turkey	1924	1925	-	Oct	 1	0:00	0	-
-Rule	Turkey	1925	only	-	May	 1	0:00	1:00	S
-Rule	Turkey	1940	only	-	Jun	30	0:00	1:00	S
-Rule	Turkey	1940	only	-	Oct	 5	0:00	0	-
-Rule	Turkey	1940	only	-	Dec	 1	0:00	1:00	S
-Rule	Turkey	1941	only	-	Sep	21	0:00	0	-
-Rule	Turkey	1942	only	-	Apr	 1	0:00	1:00	S
-# Whitman omits the next two transition and gives 1945 Oct 1; go with Shanks.
-Rule	Turkey	1942	only	-	Nov	 1	0:00	0	-
-Rule	Turkey	1945	only	-	Apr	 2	0:00	1:00	S
-Rule	Turkey	1945	only	-	Oct	 8	0:00	0	-
-Rule	Turkey	1946	only	-	Jun	 1	0:00	1:00	S
-Rule	Turkey	1946	only	-	Oct	 1	0:00	0	-
-Rule	Turkey	1947	1948	-	Apr	Sun>=16	0:00	1:00	S
-Rule	Turkey	1947	1950	-	Oct	Sun>=2	0:00	0	-
-Rule	Turkey	1949	only	-	Apr	10	0:00	1:00	S
-Rule	Turkey	1950	only	-	Apr	19	0:00	1:00	S
-Rule	Turkey	1951	only	-	Apr	22	0:00	1:00	S
-Rule	Turkey	1951	only	-	Oct	 8	0:00	0	-
-Rule	Turkey	1962	only	-	Jul	15	0:00	1:00	S
-Rule	Turkey	1962	only	-	Oct	 8	0:00	0	-
-Rule	Turkey	1964	only	-	May	15	0:00	1:00	S
-Rule	Turkey	1964	only	-	Oct	 1	0:00	0	-
-Rule	Turkey	1970	1972	-	May	Sun>=2	0:00	1:00	S
-Rule	Turkey	1970	1972	-	Oct	Sun>=2	0:00	0	-
-Rule	Turkey	1973	only	-	Jun	 3	1:00	1:00	S
-Rule	Turkey	1973	only	-	Nov	 4	3:00	0	-
-Rule	Turkey	1974	only	-	Mar	31	2:00	1:00	S
-Rule	Turkey	1974	only	-	Nov	 3	5:00	0	-
-Rule	Turkey	1975	only	-	Mar	30	0:00	1:00	S
-Rule	Turkey	1975	1976	-	Oct	lastSun	0:00	0	-
-Rule	Turkey	1976	only	-	Jun	 1	0:00	1:00	S
-Rule	Turkey	1977	1978	-	Apr	Sun>=1	0:00	1:00	S
-Rule	Turkey	1977	only	-	Oct	16	0:00	0	-
-Rule	Turkey	1979	1980	-	Apr	Sun>=1	3:00	1:00	S
-Rule	Turkey	1979	1982	-	Oct	Mon>=11	0:00	0	-
-Rule	Turkey	1981	1982	-	Mar	lastSun	3:00	1:00	S
-Rule	Turkey	1983	only	-	Jul	31	0:00	1:00	S
-Rule	Turkey	1983	only	-	Oct	 2	0:00	0	-
-Rule	Turkey	1985	only	-	Apr	20	0:00	1:00	S
-Rule	Turkey	1985	only	-	Sep	28	0:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Istanbul	1:55:52 -	LMT	1880
-			1:56:56	-	IMT	1910 Oct # Istanbul Mean Time?
-			2:00	Turkey	EE%sT	1978 Oct 15
-			3:00	Turkey	TR%sT	1985 Apr 20 # Turkey Time
-			2:00	Turkey	EE%sT	1986
-			2:00	C-Eur	EE%sT	1991
-			2:00	EU	EE%sT
-Link	Europe/Istanbul	Asia/Istanbul	# Istanbul is in both continents.
-
-# Ukraine
-#
-# From Igor Karpov, who works for the Ukranian Ministry of Justice,
-# via Garrett Wollman (2003-01-27):
-# BTW, I've found the official document on this matter. It's goverment
-# regulations number 509, May 13, 1996. In my poor translation it says:
-# "Time in Ukraine is set to second timezone (Kiev time). Each last Sunday
-# of March at 3am the time is changing to 4am and each last Sunday of
-# October the time at 4am is changing to 3am"
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-# Most of Ukraine since 1970 has been like Kiev.
-Zone Europe/Kiev	2:02:04 -	LMT	1880
-			2:02:04	-	KMT	1924 May  2 # Kiev Mean Time
-			2:00	-	EET	1930 Jun 21
-			3:00	-	MSK	1941 Sep 20
-			1:00	C-Eur	CE%sT	1943 Nov  6
-			3:00	Russia	MSK/MSD	1990
-			3:00	-	MSK	1990 Jul  1 2:00
-			2:00	-	EET	1992
-			2:00	E-Eur	EE%sT	1995
-			2:00	EU	EE%sT
-# Ruthenia used CET 1990/1991.
-Zone Europe/Uzhgorod	1:29:12 -	LMT	1890 Oct
-			1:00	-	CET	1940
-			1:00	C-Eur	CE%sT	1944 Oct
-			1:00	1:00	CEST	1944 Oct 26
-			1:00	-	CET	1945 Jun 29
-			3:00	Russia	MSK/MSD	1990
-			3:00	-	MSK	1990 Jul  1 2:00
-			1:00	-	CET	1991 Mar 31 3:00
-			2:00	-	EET	1992
-			2:00	E-Eur	EE%sT	1995
-			2:00	EU	EE%sT
-# Zaporozh'ye and eastern Lugansk oblasts observed DST 1990/1991.
-# Zaporozh'ye has an apostrophe, but Posix file names can't have apostrophes.
-Zone Europe/Zaporozhye	2:20:40 -	LMT	1880
-			2:20	-	CUT	1924 May  2 # Central Ukraine T
-			2:00	-	EET	1930 Jun 21
-			3:00	-	MSK	1941 Aug 25
-			1:00	C-Eur	CE%sT	1943 Oct 25
-			3:00	Russia	MSK/MSD	1991 Mar 31 2:00
-			2:00	E-Eur	EE%sT	1995
-			2:00	EU	EE%sT
-# Central Crimea used Moscow time 1994/1997.
-Zone Europe/Simferopol	2:16:24 -	LMT	1880
-			2:16	-	SMT	1924 May  2 # Simferopol Mean T
-			2:00	-	EET	1930 Jun 21
-			3:00	-	MSK	1941 Nov
-			1:00	C-Eur	CE%sT	1944 Apr 13
-			3:00	Russia	MSK/MSD	1990
-			3:00	-	MSK	1990 Jul  1 2:00
-			2:00	-	EET	1992
-# From Paul Eggert (1999-11-12):
-# The _Economist_ (1994-05-28, p 45) reports that central Crimea switched
-# from Kiev to Moscow time sometime after the January 1994 elections.
-# Shanks says ``date of change uncertain'', but implies that it happened
-# sometime between the 1994 DST switches.  For now, guess it changed in May.
-			2:00	E-Eur	EE%sT	1994 May
-# From IATA SSIM (1994/1997), which also says that Kerch is still like Kiev.
-			3:00	E-Eur	MSK/MSD	1996 Mar 31 3:00s
-			3:00	1:00	MSD	1996 Oct 27 3:00s
-# IATA SSIM (1997-09) says Crimea switched to EET/EEST.
-# Assume it happened in March by not changing the clocks.
-			3:00	Russia	MSK/MSD	1997
-			3:00	-	MSK	1997 Mar lastSun 1:00u
-			2:00	EU	EE%sT
-
-###############################################################################
-
-# One source shows that Bulgaria, Cyprus, Finland, and Greece observe DST from
-# the last Sunday in March to the last Sunday in September in 1986.
-# The source shows Romania changing a day later than everybody else.
-#
-# According to Bernard Sieloff's source, Poland is in the MET time zone but
-# uses the WE DST rules.  The Western USSR uses EET+1 and ME DST rules.
-# Bernard Sieloff's source claims Romania switches on the same day, but at
-# 00:00 standard time (i.e., 01:00 DST).  It also claims that Turkey
-# switches on the same day, but switches on at 01:00 standard time
-# and off at 00:00 standard time (i.e., 01:00 DST)
-
-# ...
-# Date: Wed, 28 Jan 87 16:56:27 -0100
-# From: Tom Hofmann
-# ...
-#
-# ...the European time rules are...standardized since 1981, when
-# most European coun[tr]ies started DST.  Before that year, only
-# a few countries (UK, France, Italy) had DST, each according
-# to own national rules.  In 1981, however, DST started on
-# 'Apr firstSun', and not on 'Mar lastSun' as in the following
-# years...
-# But also since 1981 there are some more national exceptions
-# than listed in 'europe': Switzerland, for example, joined DST
-# one year later, Denmark ended DST on 'Oct 1' instead of 'Sep
-# lastSun' in 1981---I don't know how they handle now.
-#
-# Finally, DST ist always from 'Apr 1' to 'Oct 1' in the
-# Soviet Union (as far as I know).
-#
-# Tom Hofmann, Scientific Computer Center, CIBA-GEIGY AG,
-# 4002 Basle, Switzerland
-# ...
-
-# ...
-# Date: Wed, 4 Feb 87 22:35:22 +0100
-# From: Dik T. Winter
-# ...
-#
-# The information from Tom Hofmann is (as far as I know) not entirely correct.
-# After a request from chongo at amdahl I tried to retrieve all information
-# about DST in Europe.  I was able to find all from about 1969.
-#
-# ...standardization on DST in Europe started in about 1977 with switches on
-# first Sunday in April and last Sunday in September...
-# In 1981 UK joined Europe insofar that
-# the starting day for both shifted to last Sunday in March.  And from 1982
-# the whole of Europe used DST, with switch dates April 1 and October 1 in
-# the Sov[i]et Union.  In 1985 the SU reverted to standard Europe[a]n switch
-# dates...
-#
-# It should also be remembered that time-zones are not constants; e.g.
-# Portugal switched in 1976 from MET (or CET) to WET with DST...
-# Note also that though there were rules for switch dates not
-# all countries abided to these dates, and many individual deviations
-# occurred, though not since 1982 I believe.  Another note: it is always
-# assumed that DST is 1 hour ahead of normal time, this need not be the
-# case; at least in the Netherlands there have been times when DST was 2 hours
-# in advance of normal time.
-#
-# ...
-# dik t. winter, cwi, amsterdam, nederland
-# ...
-
-# From Bob Devine (1988-01-28):
-# ...
-# Greece: Last Sunday in April to last Sunday in September (iffy on dates).
-# Since 1978.  Change at midnight.
-# ...
-# Monaco: has same DST as France.
-# ...
+# @(#)europe	7.96
+# <pre>
+
+# This data is by no means authoritative; if you think you know better,
+# go ahead and edit the file (and please send any changes to
+# tz@elsie.nci.nih.gov for general use in the future).
+
+# From Paul Eggert (1999-10-29):
+# A good source for time zone historical data outside the U.S. is
+# Thomas G. Shanks, The International Atlas (5th edition),
+# San Diego: ACS Publications, Inc. (1999).
+#
+# Gwillim Law writes that a good source
+# for recent time zone data is the International Air Transport
+# Association's Standard Schedules Information Manual (IATA SSIM),
+# published semiannually.  Law sent in several helpful summaries
+# of the IATA's data after 1990.
+#
+# Except where otherwise noted, Shanks is the source for entries through 1991,
+# and IATA SSIM is the source for entries afterwards.
+#
+# Other sources occasionally used include:
+#
+#	Edward W. Whitman, World Time Differences,
+#	Whitman Publishing Co, 2 Niagara Av, Ealing, London (undated),
+#	which I found in the UCLA library.
+#
+#	<a href="http://www.pettswoodvillage.co.uk/Daylight_Savings_William_Willett.pdf">
+#	William Willett, The Waste of Daylight, 19th edition
+#	</a> (1914-03)
+#
+#	Brazil's Departamento Servico da Hora (DSH),
+#	<a href="http://pcdsh01.on.br/HISTHV.htm">
+#	History of Summer Time
+#	</a> (1998-09-21, in Portuguese)
+
+#
+# I invented the abbreviations marked `*' in the following table;
+# the rest are from earlier versions of this file, or from other sources.
+# Corrections are welcome!
+#                   std dst  2dst
+#                   LMT           Local Mean Time
+#       -4:00       AST ADT       Atlantic
+#       -3:00       WGT WGST      Western Greenland*
+#       -1:00       EGT EGST      Eastern Greenland*
+#        0:00       GMT BST  BDST Greenwich, British Summer
+#        0:00       GMT IST       Greenwich, Irish Summer
+#        0:00       WET WEST WEMT Western Europe
+#        0:19:32.13 AMT NST       Amsterdam, Netherlands Summer (1835-1937)*
+#        0:20       NET NEST      Netherlands (1937-1940)*
+#        1:00       CET CEST CEMT Central Europe
+#        1:00:14    SET           Swedish (1879-1899)*
+#        2:00       EET EEST      Eastern Europe
+#        3:00       MSK MSD       Moscow
+#
+# A reliable and entertaining source about time zones, especially in Britain,
+# Derek Howse, Greenwich time and longitude, Philip Wilson Publishers (1997).
+
+# From Peter Ilieve (1994-12-04),
+# The original six [EU members]: Belgium, France, (West) Germany, Italy,
+# Luxembourg, the Netherlands.
+# Plus, from 1 Jan 73: Denmark, Ireland, United Kingdom.
+# Plus, from 1 Jan 81: Greece.
+# Plus, from 1 Jan 86: Spain, Portugal.
+# Plus, from 1 Jan 95: Austria, Finland, Sweden. (Norway negotiated terms for
+# entry but in a referendum on 28 Nov 94 the people voted No by 52.2% to 47.8%
+# on a turnout of 88.6%. This was almost the same result as Norway's previous
+# referendum in 1972, they are the only country to have said No twice.
+# Referendums in the other three countries voted Yes.)
+# ...
+# Estonia ... uses EU dates but not at 01:00 GMT, they use midnight GMT.
+# I don't think they know yet what they will do from 1996 onwards.
+# ...
+# There shouldn't be any [current members who are not using EU rules].
+# A Directive has the force of law, member states are obliged to enact
+# national law to implement it. The only contentious issue was the
+# different end date for the UK and Ireland, and this was always allowed
+# in the Directive.
+
+
+###############################################################################
+
+# Britain (United Kingdom) and Ireland (Eire)
+
+# From Peter Ilieve (1994-07-06):
+#
+# On 17 Jan 1994 the Independent, a UK quality newspaper, had a piece about
+# historical vistas along the Thames in west London. There was a photo
+# and a sketch map showing some of the sightlines involved. One paragraph
+# of the text said:
+#
+# `An old stone obelisk marking a forgotten terrestrial meridian stands
+# beside the river at Kew. In the 18th century, before time and longitude
+# was standardised by the Royal Observatory in Greenwich, scholars observed
+# this stone and the movement of stars from Kew Observatory nearby. They
+# made their calculations and set the time for the Horse Guards and Parliament,
+# but now the stone is obscured by scrubwood and can only be seen by walking
+# along the towpath within a few yards of it.'
+#
+# I have a one inch to one mile map of London and my estimate of the stone's
+# position is 51 deg. 28' 30" N, 0 deg. 18' 45" W. The longitude should
+# be within about +-2". The Ordnance Survey grid reference is TQ172761.
+#
+# [This yields GMTOFF = -0:01:15 for London LMT in the 18th century.]
+
+# From Paul Eggert (1993-11-18):
+#
+# Howse writes that Britain was the first country to use standard time.
+# The railways cared most about the inconsistencies of local mean time,
+# and it was they who forced a uniform time on the country.
+# The original idea was credited to Dr. William Hyde Wollaston (1766-1828)
+# and was popularized by Abraham Follett Osler (1808-1903).
+# The first railway to adopt London time was the Great Western Railway
+# in November 1840; other railways followed suit, and by 1847 most
+# (though not all) railways used London time.  On 1847-09-22 the
+# Railway Clearing House, an industry standards body, recommended that GMT be
+# adopted at all stations as soon as the General Post Office permitted it.
+# The transition occurred on 12-01 for the L&NW, the Caledonian,
+# and presumably other railways; the January 1848 Bradshaw's lists many
+# railways as using GMT.  By 1855 the vast majority of public
+# clocks in Britain were set to GMT (though some, like the great clock
+# on Tom Tower at Christ Church, Oxford, were fitted with two minute hands,
+# one for local time and one for GMT).  The last major holdout was the legal
+# system, which stubbornly stuck to local time for many years, leading
+# to oddities like polls opening at 08:13 and closing at 16:13.
+# The legal system finally switched to GMT when the Statutes (Definition
+# of Time) Act took effect; it received the Royal Assent on 1880-08-02.
+#
+# In the tables below, we condense this complicated story into a single
+# transition date for London, namely 1847-12-01.  We don't know as much
+# about Dublin, so we use 1880-08-02, the legal transition time.
+
+# From Paul Eggert (2003-09-27):
+# Summer Time was first seriously proposed by William Willett (1857-1915),
+# a London builder and member of the Royal Astronomical Society
+# who circulated a pamphlet ``The Waste of Daylight'' (1907)
+# that proposed advancing clocks 20 minutes on each of four Sundays in April,
+# and retarding them by the same amount on four Sundays in September.
+# A bill was drafted in 1909 and introduced in Parliament several times,
+# but it met with ridicule and opposition, especially from farming interests.
+# Later editions of the pamphlet proposed one-hour summer time, and
+# it was eventually adopted as a wartime measure in 1916.
+# See: Summer Time Arrives Early, The Times (2000-05-18).
+# A monument to Willett was unveiled on 1927-05-21, in an open space in
+# a 45-acre wood near Chislehurst, Kent that was purchased by popular
+# subscription and open to the public.  On the south face of the monolith,
+# designed by G. W. Miller, is the the William Willett Memorial Sundial,
+# which is permanently set to Summer Time.
+
+# From Winston Churchill (1934-04-28):
+# It is one of the paradoxes of history that we should owe the boon of
+# summer time, which gives every year to the people of this country
+# between 160 and 170 hours more daylight leisure, to a war which
+# plunged Europe into darkness for four years, and shook the
+# foundations of civilization throughout the world.
+#	-- <a href="http://www.winstonchurchill.org/fh114willett.htm">
+#	"A Silent Toast to William Willett", Pictorial Weekly
+#	</a>
+
+# From Paul Eggert (1996-09-03):
+# The OED Supplement says that the English originally said ``Daylight Saving''
+# when they were debating the adoption of DST in 1908; but by 1916 this
+# term appears only in quotes taken from DST's opponents, whereas the
+# proponents (who eventually won the argument) are quoted as using ``Summer''.
+
+# From Arthur David Olson (1989-01-19):
+#
+# A source at the British Information Office in New York avers that it's
+# known as "British" Summer Time in all parts of the United Kingdom.
+
+# Date: 4 Jan 89 08:57:25 GMT (Wed)
+# From: Jonathan Leffler
+# [British Summer Time] is fixed annually by Act of Parliament.
+# If you can predict what Parliament will do, you should be in
+# politics making a fortune, not computing.
+
+# From Chris Carrier (1996-06-14):
+# I remember reading in various wartime issues of the London Times the
+# acronym BDST for British Double Summer Time.  Look for the published
+# time of sunrise and sunset in The Times, when BDST was in effect, and
+# if you find a zone reference it will say, "All times B.D.S.T."
+
+# From Joseph S. Myers (1999-09-02):
+# ... some military cables (WO 219/4100 - this is a copy from the
+# main SHAEF archives held in the US National Archives, SHAEF/5252/8/516)
+# agree that the usage is BDST (this appears in a message dated 17 Feb 1945).
+
+# From Joseph S. Myers (2000-10-03):
+# On 18th April 1941, Sir Stephen Tallents of the BBC wrote to Sir
+# Alexander Maxwell of the Home Office asking whether there was any
+# official designation; the reply of the 21st was that there wasn't
+# but he couldn't think of anything better than the "Double British
+# Summer Time" that the BBC had been using informally.
+# http://student.cusu.cam.ac.uk/~jsm28/british-time/bbc-19410418.png
+# http://student.cusu.cam.ac.uk/~jsm28/british-time/ho-19410421.png
+
+# From Sir Alexander Maxwell in the above-mentioned letter (1941-04-21):
+# [N]o official designation has as far as I know been adopted for the time
+# which is to be introduced in May....
+# I cannot think of anything better than "Double British Summer Time"
+# which could not be said to run counter to any official description.
+
+# From Paul Eggert (2000-10-02):
+# Howse writes (p 157) `DBST' too, but `BDST' seems to have been common
+# and follows the more usual convention of putting the location name first,
+# so we use `BDST'.
+
+# Peter Ilieve (1998-04-19) described at length
+# the history of summer time legislation in the United Kingdom.
+# Since 1998 Joseph S. Myers has been updating
+# and extending this list, which can be found in
+# <a href="http://student.cusu.cam.ac.uk/~jsm28/british-time/">
+# History of legal time in Britain
+# </a>
+
+# From Joseph S. Myers (1998-01-06):
+#
+# The legal time in the UK outside of summer time is definitely GMT, not UTC;
+# see Lord Tanlaw's speech
+# <a href="http://www.parliament.the-stationery-office.co.uk/pa/ld199697/ldhansrd/pdvn/lds97/text/70611-20.htm#70611-20_head0">
+# (Lords Hansard 11 June 1997 columns 964 to 976)
+# </a>.
+
+# From Paul Eggert (2001-07-18):
+#
+# For lack of other data, we'll follow Shanks for Eire in 1940-1948.
+#
+# Given Ilieve and Myers's data, the following claims by Shanks are incorrect:
+#     * Wales did not switch from GMT to daylight saving time until
+#	1921 Apr 3, when they began to conform with the rest of Great Britain.
+# Actually, Wales was identical after 1880.
+#     * Eire had two transitions on 1916 Oct 1.
+# It actually just had one transition.
+#     * Northern Ireland used single daylight saving time throughout WW II.
+# Actually, it conformed to Britain.
+#     * GB-Eire changed standard time to 1 hour ahead of GMT on 1968-02-18.
+# Actually, that date saw the usual switch to summer time.
+# Standard time was not changed until 1968-10-27 (the clocks didn't change).
+#
+# Here is another incorrect claim by Shanks:
+#     * Jersey, Guernsey, and the Isle of Man did not switch from GMT
+#	to daylight saving time until 1921 Apr 3, when they began to
+#	conform with Great Britain.
+# S.R.&O. 1916, No. 382 and HO 45/10811/312364 (quoted above) say otherwise.
+#
+# The following claim by Shanks is possible though doubtful;
+# we'll ignore it for now.
+#     * Dublin's 1971-10-31 switch was at 02:00, even though London's was 03:00.
+#
+#
+# Whitman says Dublin Mean Time was -0:25:21, which is more precise than Shanks.
+# Perhaps this was Dunsink Observatory Time, as Dunsink Observatory
+# (8 km NW of Dublin's center) seemingly was to Dublin as Greenwich was
+# to London.  For example:
+#
+#   "Timeball on the ballast office is down.  Dunsink time."
+#   -- James Joyce, Ulysses
+
+# From Joseph S. Myers (2005-01-26):
+# Irish laws are available online at www.irishstatutebook.ie.  These include 
+# various relating to legal time, for example:
+# 
+# ZZA13Y1923.html ZZA12Y1924.html ZZA8Y1925.html ZZSIV20PG1267.html
+# 
+# ZZSI71Y1947.html ZZSI128Y1948.html ZZSI23Y1949.html ZZSI41Y1950.html
+# ZZSI27Y1951.html ZZSI73Y1952.html
+# 
+# ZZSI11Y1961.html ZZSI232Y1961.html ZZSI182Y1962.html
+# ZZSI167Y1963.html ZZSI257Y1964.html ZZSI198Y1967.html
+# ZZA23Y1968.html ZZA17Y1971.html
+# 
+# ZZSI67Y1981.html ZZSI212Y1982.html ZZSI45Y1986.html
+# ZZSI264Y1988.html ZZSI52Y1990.html ZZSI371Y1992.html
+# ZZSI395Y1994.html ZZSI484Y1997.html ZZSI506Y2001.html
+#
+# [These are all relative to the root, e.g., the first is
+# <http://www.irishstatutebook.ie/ZZA13Y1923.html>.]
+# 
+# (These are those I found, but there could be more.  In any case these 
+# should allow various updates to the comments in the europe file to cover 
+# the laws applicable in Ireland.)
+# 
+# (Note that the time in the Republic of Ireland since 1968 has been defined 
+# in terms of standard time being GMT+1 with a period of winter time when it 
+# is GMT, rather than standard time being GMT with a period of summer time 
+# being GMT+1.)
+
+# From Paul Eggert (1999-03-28):
+# Clive Feather (<news:859845706.26043.0@office.demon.net>, 1997-03-31)
+# reports that Folkestone (Cheriton) Shuttle Terminal uses Concession Time
+# (CT), equivalent to French civil time.
+# Julian Hill (<news:36118128.5A14@virgin.net>, 1998-09-30) reports that
+# trains between Dollands Moor (the freight facility next door)
+# and Frethun run in CT.
+# My admittedly uninformed guess is that the terminal has two authorities,
+# the French concession operators and the British civil authorities,
+# and that the time depends on who you're talking to.
+# If, say, the British police were called to the station for some reason,
+# I would expect the official police report to use GMT/BST and not CET/CEST.
+# This is a borderline case, but for now let's stick to GMT/BST.
+
+# From an anonymous contributor (1996-06-02):
+# The law governing time in Ireland is under Statutory Instrument SI 395/94,
+# which gives force to European Union 7th Council Directive # 94/21/EC.
+# Under this directive, the Minister for Justice in Ireland makes appropriate
+# regulations. I spoke this morning with the Secretary of the Department of
+# Justice (tel +353 1 678 9711) who confirmed to me that the correct name is
+# "Irish Summer Time", abbreviated to "IST".
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+# Summer Time Act, 1916
+Rule	GB-Eire	1916	only	-	May	21	2:00s	1:00	BST
+Rule	GB-Eire	1916	only	-	Oct	 1	2:00s	0	GMT
+# S.R.&O. 1917, No. 358
+Rule	GB-Eire	1917	only	-	Apr	 8	2:00s	1:00	BST
+Rule	GB-Eire	1917	only	-	Sep	17	2:00s	0	GMT
+# S.R.&O. 1918, No. 274
+Rule	GB-Eire	1918	only	-	Mar	24	2:00s	1:00	BST
+Rule	GB-Eire	1918	only	-	Sep	30	2:00s	0	GMT
+# S.R.&O. 1919, No. 297
+Rule	GB-Eire	1919	only	-	Mar	30	2:00s	1:00	BST
+Rule	GB-Eire	1919	only	-	Sep	29	2:00s	0	GMT
+# S.R.&O. 1920, No. 458
+Rule	GB-Eire	1920	only	-	Mar	28	2:00s	1:00	BST
+# S.R.&O. 1920, No. 1844
+Rule	GB-Eire	1920	only	-	Oct	25	2:00s	0	GMT
+# S.R.&O. 1921, No. 363
+Rule	GB-Eire	1921	only	-	Apr	 3	2:00s	1:00	BST
+Rule	GB-Eire	1921	only	-	Oct	 3	2:00s	0	GMT
+# S.R.&O. 1922, No. 264
+Rule	GB-Eire	1922	only	-	Mar	26	2:00s	1:00	BST
+Rule	GB-Eire	1922	only	-	Oct	 8	2:00s	0	GMT
+# The Summer Time Act, 1922
+Rule	GB-Eire	1923	only	-	Apr	Sun>=16	2:00s	1:00	BST
+Rule	GB-Eire	1923	1924	-	Sep	Sun>=16	2:00s	0	GMT
+Rule	GB-Eire	1924	only	-	Apr	Sun>=9	2:00s	1:00	BST
+Rule	GB-Eire	1925	1926	-	Apr	Sun>=16	2:00s	1:00	BST
+# The Summer Time Act, 1925
+Rule	GB-Eire	1925	1938	-	Oct	Sun>=2	2:00s	0	GMT
+Rule	GB-Eire	1927	only	-	Apr	Sun>=9	2:00s	1:00	BST
+Rule	GB-Eire	1928	1929	-	Apr	Sun>=16	2:00s	1:00	BST
+Rule	GB-Eire	1930	only	-	Apr	Sun>=9	2:00s	1:00	BST
+Rule	GB-Eire	1931	1932	-	Apr	Sun>=16	2:00s	1:00	BST
+Rule	GB-Eire	1933	only	-	Apr	Sun>=9	2:00s	1:00	BST
+Rule	GB-Eire	1934	only	-	Apr	Sun>=16	2:00s	1:00	BST
+Rule	GB-Eire	1935	only	-	Apr	Sun>=9	2:00s	1:00	BST
+Rule	GB-Eire	1936	1937	-	Apr	Sun>=16	2:00s	1:00	BST
+Rule	GB-Eire	1938	only	-	Apr	Sun>=9	2:00s	1:00	BST
+Rule	GB-Eire	1939	only	-	Apr	Sun>=16	2:00s	1:00	BST
+# S.R.&O. 1939, No. 1379
+Rule	GB-Eire	1939	only	-	Nov	Sun>=16	2:00s	0	GMT
+# S.R.&O. 1940, No. 172 and No. 1883
+Rule	GB-Eire	1940	only	-	Feb	Sun>=23	2:00s	1:00	BST
+# S.R.&O. 1941, No. 476
+Rule	GB-Eire	1941	only	-	May	Sun>=2	1:00s	2:00	BDST
+Rule	GB-Eire	1941	1943	-	Aug	Sun>=9	1:00s	1:00	BST
+# S.R.&O. 1942, No. 506
+Rule	GB-Eire	1942	1944	-	Apr	Sun>=2	1:00s	2:00	BDST
+# S.R.&O. 1944, No. 932
+Rule	GB-Eire	1944	only	-	Sep	Sun>=16	1:00s	1:00	BST
+# S.R.&O. 1945, No. 312
+Rule	GB-Eire	1945	only	-	Apr	Mon>=2	1:00s	2:00	BDST
+Rule	GB-Eire	1945	only	-	Jul	Sun>=9	1:00s	1:00	BST
+# S.R.&O. 1945, No. 1208
+Rule	GB-Eire	1945	1946	-	Oct	Sun>=2	2:00s	0	GMT
+Rule	GB-Eire	1946	only	-	Apr	Sun>=9	2:00s	1:00	BST
+# The Summer Time Act, 1947
+Rule	GB-Eire	1947	only	-	Mar	16	2:00s	1:00	BST
+Rule	GB-Eire	1947	only	-	Apr	13	1:00s	2:00	BDST
+Rule	GB-Eire	1947	only	-	Aug	10	1:00s	1:00	BST
+Rule	GB-Eire	1947	only	-	Nov	 2	2:00s	0	GMT
+# Summer Time Order, 1948 (S.I. 1948/495)
+Rule	GB-Eire	1948	only	-	Mar	14	2:00s	1:00	BST
+Rule	GB-Eire	1948	only	-	Oct	31	2:00s	0	GMT
+# Summer Time Order, 1949 (S.I. 1949/373)
+Rule	GB-Eire	1949	only	-	Apr	 3	2:00s	1:00	BST
+Rule	GB-Eire	1949	only	-	Oct	30	2:00s	0	GMT
+# Summer Time Order, 1950 (S.I. 1950/518)
+# Summer Time Order, 1951 (S.I. 1951/430)
+# Summer Time Order, 1952 (S.I. 1952/451)
+Rule	GB-Eire	1950	1952	-	Apr	Sun>=14	2:00s	1:00	BST
+Rule	GB-Eire	1950	1952	-	Oct	Sun>=21	2:00s	0	GMT
+# revert to the rules of the Summer Time Act, 1925
+Rule	GB-Eire	1953	only	-	Apr	Sun>=16	2:00s	1:00	BST
+Rule	GB-Eire	1953	1960	-	Oct	Sun>=2	2:00s	0	GMT
+Rule	GB-Eire	1954	only	-	Apr	Sun>=9	2:00s	1:00	BST
+Rule	GB-Eire	1955	1956	-	Apr	Sun>=16	2:00s	1:00	BST
+Rule	GB-Eire	1957	only	-	Apr	Sun>=9	2:00s	1:00	BST
+Rule	GB-Eire	1958	1959	-	Apr	Sun>=16	2:00s	1:00	BST
+Rule	GB-Eire	1960	only	-	Apr	Sun>=9	2:00s	1:00	BST
+# Summer Time Order, 1961 (S.I. 1961/71)
+# Summer Time (1962) Order, 1961 (S.I. 1961/2465)
+# Summer Time Order, 1963 (S.I. 1963/81)
+Rule	GB-Eire	1961	1963	-	Mar	lastSun	2:00s	1:00	BST
+Rule	GB-Eire	1961	1968	-	Oct	Sun>=23	2:00s	0	GMT
+# Summer Time (1964) Order, 1963 (S.I. 1963/2101)
+# Summer Time Order, 1964 (S.I. 1964/1201)
+# Summer Time Order, 1967 (S.I. 1967/1148)
+Rule	GB-Eire	1964	1967	-	Mar	Sun>=19	2:00s	1:00	BST
+# Summer Time Order, 1968 (S.I. 1968/117)
+Rule	GB-Eire	1968	only	-	Feb	18	2:00s	1:00	BST
+# The British Standard Time Act, 1968
+#	(no summer time)
+# The Summer Time Act, 1972
+Rule	GB-Eire	1972	1980	-	Mar	Sun>=16	2:00s	1:00	BST
+Rule	GB-Eire	1972	1980	-	Oct	Sun>=23	2:00s	0	GMT
+# Summer Time Order, 1980 (S.I. 1980/1089)
+# Summer Time Order, 1982 (S.I. 1982/1673)
+# Summer Time Order, 1986 (S.I. 1986/223)
+# Summer Time Order, 1988 (S.I. 1988/931)
+Rule	GB-Eire	1981	1995	-	Mar	lastSun	1:00u	1:00	BST
+Rule	GB-Eire 1981	1989	-	Oct	Sun>=23	1:00u	0	GMT
+# Summer Time Order, 1989 (S.I. 1989/985)
+# Summer Time Order, 1992 (S.I. 1992/1729)
+# Summer Time Order 1994 (S.I. 1994/2798)
+Rule	GB-Eire 1990	1995	-	Oct	Sun>=22	1:00u	0	GMT
+# Summer Time Order 1997 (S.I. 1997/2982)
+# See EU for rules starting in 1996.
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/London	-0:01:15 -	LMT	1847 Dec  1
+			 0:00	GB-Eire	%s	1968 Oct 27
+			 1:00	-	BST	1971 Oct 31 2:00u
+			 0:00	GB-Eire	%s	1996
+			 0:00	EU	GMT/BST
+Zone	Europe/Dublin	-0:25:00 -	LMT	1880 Aug  2
+			-0:25:21 -	DMT	1916 May 21 2:00
+			-0:25:21 1:00	IST	1916 Oct  1 2:00s
+			 0:00	GB-Eire	%s	1921 Dec  6 # independence
+			 0:00	GB-Eire	GMT/IST	1940 Feb 25 2:00
+			 0:00	1:00	IST	1946 Oct  6 2:00
+			 0:00	-	GMT	1947 Mar 16 2:00
+			 0:00	1:00	IST	1947 Nov  2 2:00
+			 0:00	-	GMT	1948 Apr 18 2:00
+			 0:00	GB-Eire	GMT/IST	1968 Oct 27
+			 1:00	-	IST	1971 Oct 31 2:00u
+			 0:00	GB-Eire	GMT/IST	1996
+			 0:00	EU	GMT/IST
+
+###############################################################################
+
+# Continental Europe
+
+# EU rules are for the European Union, previously known as the EC, EEC,
+# Common Market, etc.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	EU	1977	1980	-	Apr	Sun>=1	 1:00u	1:00	S
+Rule	EU	1977	only	-	Sep	lastSun	 1:00u	0	-
+Rule	EU	1978	only	-	Oct	 1	 1:00u	0	-
+Rule	EU	1979	1995	-	Sep	lastSun	 1:00u	0	-
+Rule	EU	1981	max	-	Mar	lastSun	 1:00u	1:00	S
+Rule	EU	1996	max	-	Oct	lastSun	 1:00u	0	-
+# The most recent directive covers the years starting in 2002.  See:
+# <a href="http://europa.eu.int/eur-lex/en/lif/dat/2000/en_300L0084.html"
+# Directive 2000/84/EC of the European Parliament and of the Council
+# of 19 January 2001 on summer-time arrangements.
+# </a>
+
+# W-Eur differs from EU only in that W-Eur uses standard time.
+Rule	W-Eur	1977	1980	-	Apr	Sun>=1	 1:00s	1:00	S
+Rule	W-Eur	1977	only	-	Sep	lastSun	 1:00s	0	-
+Rule	W-Eur	1978	only	-	Oct	 1	 1:00s	0	-
+Rule	W-Eur	1979	1995	-	Sep	lastSun	 1:00s	0	-
+Rule	W-Eur	1981	max	-	Mar	lastSun	 1:00s	1:00	S
+Rule	W-Eur	1996	max	-	Oct	lastSun	 1:00s	0	-
+
+# Older C-Eur rules are for convenience in the tables.
+# From 1977 on, C-Eur differs from EU only in that C-Eur uses standard time.
+Rule	C-Eur	1916	only	-	Apr	30	23:00	1:00	S
+Rule	C-Eur	1916	only	-	Oct	 1	 1:00	0	-
+Rule	C-Eur	1917	1918	-	Apr	Mon>=15	 2:00s	1:00	S
+Rule	C-Eur	1917	1918	-	Sep	Mon>=15	 2:00s	0	-
+Rule	C-Eur	1940	only	-	Apr	 1	 2:00s	1:00	S
+Rule	C-Eur	1942	only	-	Nov	 2	 2:00s	0	-
+Rule	C-Eur	1943	only	-	Mar	29	 2:00s	1:00	S
+Rule	C-Eur	1943	only	-	Oct	 4	 2:00s	0	-
+Rule	C-Eur	1944	only	-	Apr	 3	 2:00s	1:00	S
+# Whitman gives 1944 Oct 7; go with Shanks.
+Rule	C-Eur	1944	only	-	Oct	 2	 2:00s	0	-
+Rule	C-Eur	1977	1980	-	Apr	Sun>=1	 2:00s	1:00	S
+Rule	C-Eur	1977	only	-	Sep	lastSun	 2:00s	0	-
+Rule	C-Eur	1978	only	-	Oct	 1	 2:00s	0	-
+Rule	C-Eur	1979	1995	-	Sep	lastSun	 2:00s	0	-
+Rule	C-Eur	1981	max	-	Mar	lastSun	 2:00s	1:00	S
+Rule	C-Eur	1996	max	-	Oct	lastSun	 2:00s	0	-
+
+# E-Eur differs from EU only in that E-Eur switches at midnight local time.
+Rule	E-Eur	1977	1980	-	Apr	Sun>=1	 0:00	1:00	S
+Rule	E-Eur	1977	only	-	Sep	lastSun	 0:00	0	-
+Rule	E-Eur	1978	only	-	Oct	 1	 0:00	0	-
+Rule	E-Eur	1979	1995	-	Sep	lastSun	 0:00	0	-
+Rule	E-Eur	1981	max	-	Mar	lastSun	 0:00	1:00	S
+Rule	E-Eur	1996	max	-	Oct	lastSun	 0:00	0	-
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Russia	1917	only	-	Jul	 1	23:00	1:00	MST	# Moscow Summer Time
+Rule	Russia	1917	only	-	Dec	28	 0:00	0	MMT	# Moscow Mean Time
+Rule	Russia	1918	only	-	May	31	22:00	2:00	MDST	# Moscow Double Summer Time
+Rule	Russia	1918	only	-	Sep	16	 1:00	1:00	MST
+Rule	Russia	1919	only	-	May	31	23:00	2:00	MDST
+Rule	Russia	1919	only	-	Jul	 1	 2:00	1:00	S
+Rule	Russia	1919	only	-	Aug	16	 0:00	0	-
+Rule	Russia	1921	only	-	Feb	14	23:00	1:00	S
+Rule	Russia	1921	only	-	Mar	20	23:00	2:00	M # Midsummer
+Rule	Russia	1921	only	-	Sep	 1	 0:00	1:00	S
+Rule	Russia	1921	only	-	Oct	 1	 0:00	0	-
+# Act No.925 of the Council of Ministers of the USSR (1980-10-24):
+Rule	Russia	1981	1984	-	Apr	 1	 0:00	1:00	S
+Rule	Russia	1981	1983	-	Oct	 1	 0:00	0	-
+# Act No.967 of the Council of Ministers of the USSR (1984-09-13), repeated in
+# Act No.227 of the Council of Ministers of the USSR (1989-03-14):
+Rule	Russia	1984	1991	-	Sep	lastSun	 2:00s	0	-
+Rule	Russia	1985	1991	-	Mar	lastSun	 2:00s	1:00	S
+#
+Rule	Russia	1992	only	-	Mar	lastSat	 23:00	1:00	S
+Rule	Russia	1992	only	-	Sep	lastSat	 23:00	0	-
+Rule	Russia	1993	max	-	Mar	lastSun	 2:00s	1:00	S
+Rule	Russia	1993	1995	-	Sep	lastSun	 2:00s	0	-
+Rule	Russia	1996	max	-	Oct	lastSun	 2:00s	0	-
+
+# These are for backward compatibility with older versions.
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	WET		0:00	EU	WE%sT
+Zone	CET		1:00	C-Eur	CE%sT
+Zone	MET		1:00	C-Eur	ME%sT
+Zone	EET		2:00	EU	EE%sT
+
+# Previous editions of this database used abbreviations like MET DST
+# for Central European Summer Time, but this didn't agree with common usage.
+
+# From Markus Kuhn (1996-07-12):
+# The official German names ... are
+#
+#	Mitteleuropaeische Zeit (MEZ)         = UTC+01:00
+#	Mitteleuropaeische Sommerzeit (MESZ)  = UTC+02:00
+#
+# as defined in the German Time Act (Gesetz ueber die Zeitbestimmung (ZeitG),
+# 1978-07-25, Bundesgesetzblatt, Jahrgang 1978, Teil I, S. 1110-1111)....
+# I wrote ... to the German Federal Physical-Technical Institution
+#
+#	Physikalisch-Technische Bundesanstalt (PTB)
+#	Laboratorium 4.41 "Zeiteinheit"
+#	Postfach 3345
+#	D-38023 Braunschweig
+#	phone: +49 531 592-0
+#
+# ... I received today an answer letter from Dr. Peter Hetzel, head of the PTB
+# department for time and frequency transmission.  He explained that the
+# PTB translates MEZ and MESZ into English as
+#
+#	Central European Time (CET)         = UTC+01:00
+#	Central European Summer Time (CEST) = UTC+02:00
+
+
+# Albania
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Albania	1940	only	-	Jun	16	0:00	1:00	S
+Rule	Albania	1942	only	-	Nov	 2	3:00	0	-
+Rule	Albania	1943	only	-	Mar	29	2:00	1:00	S
+Rule	Albania	1943	only	-	Apr	10	3:00	0	-
+Rule	Albania	1974	only	-	May	 4	0:00	1:00	S
+Rule	Albania	1974	only	-	Oct	 2	0:00	0	-
+Rule	Albania	1975	only	-	May	 1	0:00	1:00	S
+Rule	Albania	1975	only	-	Oct	 2	0:00	0	-
+Rule	Albania	1976	only	-	May	 2	0:00	1:00	S
+Rule	Albania	1976	only	-	Oct	 3	0:00	0	-
+Rule	Albania	1977	only	-	May	 8	0:00	1:00	S
+Rule	Albania	1977	only	-	Oct	 2	0:00	0	-
+Rule	Albania	1978	only	-	May	 6	0:00	1:00	S
+Rule	Albania	1978	only	-	Oct	 1	0:00	0	-
+Rule	Albania	1979	only	-	May	 5	0:00	1:00	S
+Rule	Albania	1979	only	-	Sep	30	0:00	0	-
+Rule	Albania	1980	only	-	May	 3	0:00	1:00	S
+Rule	Albania	1980	only	-	Oct	 4	0:00	0	-
+Rule	Albania	1981	only	-	Apr	26	0:00	1:00	S
+Rule	Albania	1981	only	-	Sep	27	0:00	0	-
+Rule	Albania	1982	only	-	May	 2	0:00	1:00	S
+Rule	Albania	1982	only	-	Oct	 3	0:00	0	-
+Rule	Albania	1983	only	-	Apr	18	0:00	1:00	S
+Rule	Albania	1983	only	-	Oct	 1	0:00	0	-
+Rule	Albania	1984	only	-	Apr	 1	0:00	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Tirane	1:19:20 -	LMT	1914
+			1:00	-	CET	1940 Jun 16
+			1:00	Albania	CE%sT	1984 Jul
+			1:00	EU	CE%sT
+
+# Andorra
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Andorra	0:06:04 -	LMT	1901
+			0:00	-	WET	1946 Sep 30
+			1:00	-	CET	1985 Mar 31 2:00
+			1:00	EU	CE%sT
+
+# Austria
+
+# From Paul Eggert (2003-02-28): Shanks gives 1918-06-16 and
+# 1945-11-18, but the Austrian Federal Office of Metrology and
+# Surveying (BEV) gives 1918-09-16 and for Vienna gives the "alleged"
+# date of 1945-04-12 with no time.  For the 1980-04-06 transition
+# Shanks gives 02:00, the BEV 00:00.  Go with the BEV, and guess 02:00
+# for 1945-04-12.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Austria	1920	only	-	Apr	 5	2:00s	1:00	S
+Rule	Austria	1920	only	-	Sep	13	2:00s	0	-
+Rule	Austria	1946	only	-	Apr	14	2:00s	1:00	S
+Rule	Austria	1946	1948	-	Oct	Sun>=1	2:00s	0	-
+Rule	Austria	1947	only	-	Apr	 6	2:00s	1:00	S
+Rule	Austria	1948	only	-	Apr	18	2:00s	1:00	S
+Rule	Austria	1980	only	-	Apr	 6	0:00	1:00	S
+Rule	Austria	1980	only	-	Sep	28	0:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Vienna	1:05:20 -	LMT	1893 Apr
+			1:00	C-Eur	CE%sT	1920
+			1:00	Austria	CE%sT	1940 Apr  1 2:00s
+			1:00	C-Eur	CE%sT	1945 Apr  2 2:00s
+			1:00	1:00	CEST	1945 Apr 12 2:00s
+			1:00	-	CET	1946
+			1:00	Austria	CE%sT	1981
+			1:00	EU	CE%sT
+
+# Belarus
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Minsk	1:50:16 -	LMT	1880
+			1:50	-	MMT	1924 May 2 # Minsk Mean Time
+			2:00	-	EET	1930 Jun 21
+			3:00	-	MSK	1941 Jun 28
+			1:00	C-Eur	CE%sT	1944 Jul  3
+			3:00	Russia	MSK/MSD	1990
+			3:00	-	MSK	1991 Mar 31 2:00s
+			2:00	1:00	EEST	1991 Sep 29 2:00s
+			2:00	-	EET	1992 Mar 29 0:00s
+			2:00	1:00	EEST	1992 Sep 27 0:00s
+			2:00	Russia	EE%sT
+
+# Belgium
+#
+# From Paul Eggert (1997-07-02):
+# Entries from 1918 through 1991 are taken from:
+#	Annuaire de L'Observatoire Royal de Belgique,
+#	Avenue Circulaire, 3, B-1180 BRUXELLES, CLVIIe annee, 1991
+#	(Imprimerie HAYEZ, s.p.r.l., Rue Fin, 4, 1080 BRUXELLES, MCMXC),
+#	pp 8-9.
+# LMT before 1892 was 0:17:30, according to the official journal of Belgium:
+#	Moniteur Belge, Samedi 30 Avril 1892, N.121.
+# Thanks to Pascal Delmoitie for these references.
+# The 1918 rules are listed for completeness; they apply to unoccupied Belgium.
+# Assume Brussels switched to WET in 1918 when the armistice took effect.
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Belgium	1918	only	-	Mar	 9	 0:00s	1:00	S
+Rule	Belgium	1918	1919	-	Oct	Sat>=1	23:00s	0	-
+Rule	Belgium	1919	only	-	Mar	 1	23:00s	1:00	S
+Rule	Belgium	1920	only	-	Feb	14	23:00s	1:00	S
+Rule	Belgium	1920	only	-	Oct	23	23:00s	0	-
+Rule	Belgium	1921	only	-	Mar	14	23:00s	1:00	S
+Rule	Belgium	1921	only	-	Oct	25	23:00s	0	-
+Rule	Belgium	1922	only	-	Mar	25	23:00s	1:00	S
+Rule	Belgium	1922	1927	-	Oct	Sat>=1	23:00s	0	-
+Rule	Belgium	1923	only	-	Apr	21	23:00s	1:00	S
+Rule	Belgium	1924	only	-	Mar	29	23:00s	1:00	S
+Rule	Belgium	1925	only	-	Apr	 4	23:00s	1:00	S
+# DSH writes that a royal decree of 1926-02-22 specified the Sun following 3rd
+# Sat in Apr (except if it's Easter, in which case it's one Sunday earlier),
+# to Sun following 1st Sat in Oct, and that a royal decree of 1928-09-15
+# changed the transition times to 02:00 GMT.
+Rule	Belgium	1926	only	-	Apr	17	23:00s	1:00	S
+Rule	Belgium	1927	only	-	Apr	 9	23:00s	1:00	S
+Rule	Belgium	1928	only	-	Apr	14	23:00s	1:00	S
+Rule	Belgium	1928	1938	-	Oct	Sun>=2	 2:00s	0	-
+Rule	Belgium	1929	only	-	Apr	21	 2:00s	1:00	S
+Rule	Belgium	1930	only	-	Apr	13	 2:00s	1:00	S
+Rule	Belgium	1931	only	-	Apr	19	 2:00s	1:00	S
+Rule	Belgium	1932	only	-	Apr	 3	 2:00s	1:00	S
+Rule	Belgium	1933	only	-	Mar	26	 2:00s	1:00	S
+Rule	Belgium	1934	only	-	Apr	 8	 2:00s	1:00	S
+Rule	Belgium	1935	only	-	Mar	31	 2:00s	1:00	S
+Rule	Belgium	1936	only	-	Apr	19	 2:00s	1:00	S
+Rule	Belgium	1937	only	-	Apr	 4	 2:00s	1:00	S
+Rule	Belgium	1938	only	-	Mar	27	 2:00s	1:00	S
+Rule	Belgium	1939	only	-	Apr	16	 2:00s	1:00	S
+Rule	Belgium	1939	only	-	Nov	19	 2:00s	0	-
+Rule	Belgium	1940	only	-	Feb	25	 2:00s	1:00	S
+Rule	Belgium	1944	only	-	Sep	17	 2:00s	0	-
+Rule	Belgium	1945	only	-	Apr	 2	 2:00s	1:00	S
+Rule	Belgium	1945	only	-	Sep	16	 2:00s	0	-
+Rule	Belgium	1946	only	-	May	19	 2:00s	1:00	S
+Rule	Belgium	1946	only	-	Oct	 7	 2:00s	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Brussels	0:17:30 -	LMT	1880
+			0:17:30	-	BMT	1892 May  1 12:00 # Brussels MT
+			0:00	-	WET	1914 Nov  8
+			1:00	-	CET	1916 May  1  0:00
+			1:00	C-Eur	CE%sT	1918 Nov 11 11:00u
+			0:00	Belgium	WE%sT	1940 May 20  2:00s
+			1:00	C-Eur	CE%sT	1944 Sep  3
+			1:00	Belgium	CE%sT	1977
+			1:00	EU	CE%sT
+
+# Bosnia and Herzegovina
+# see Serbia and Montenegro
+
+# Bulgaria
+#
+# From Plamen Simenov via Steffen Thorsen (1999-09-09):
+# A document of Government of Bulgaria (No.94/1997) says:
+# EET --> EETDST is in 03:00 Local time in last Sunday of March ...
+# EETDST --> EET is in 04:00 Local time in last Sunday of October
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Bulg	1979	only	-	Mar	31	23:00	1:00	S
+Rule	Bulg	1979	only	-	Oct	 1	 1:00	0	-
+Rule	Bulg	1980	1982	-	Apr	Sat<=7	23:00	1:00	S
+Rule	Bulg	1980	only	-	Sep	29	 1:00	0	-
+Rule	Bulg	1981	only	-	Sep	27	 2:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Sofia	1:33:16 -	LMT	1880
+			1:56:56	-	IMT	1894 Nov 30 # Istanbul MT?
+			2:00	-	EET	1942 Nov  2  3:00
+			1:00	C-Eur	CE%sT	1945 Apr  2  3:00
+			2:00	-	EET	1979 Mar 31 23:00
+			2:00	Bulg	EE%sT	1982 Sep 26  2:00
+			2:00	C-Eur	EE%sT	1991
+			2:00	E-Eur	EE%sT	1997
+			2:00	EU	EE%sT
+
+# Croatia
+# see Serbia and Montenegro
+
+# Cyprus
+# Please see the `asia' file for Asia/Nicosia.
+
+# Czech Republic
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Czech	1945	only	-	Apr	 8	2:00s	1:00	S
+Rule	Czech	1945	only	-	Nov	18	2:00s	0	-
+Rule	Czech	1946	only	-	May	 6	2:00s	1:00	S
+Rule	Czech	1946	1949	-	Oct	Sun>=1	2:00s	0	-
+Rule	Czech	1947	only	-	Apr	20	2:00s	1:00	S
+Rule	Czech	1948	only	-	Apr	18	2:00s	1:00	S
+Rule	Czech	1949	only	-	Apr	 9	2:00s	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Prague	0:57:44 -	LMT	1850
+			0:57:44	-	PMT	1891 Oct     # Prague Mean Time
+			1:00	C-Eur	CE%sT	1944 Sep 17 2:00s
+			1:00	Czech	CE%sT	1979
+			1:00	EU	CE%sT
+
+# Denmark, Faeroe Islands, and Greenland
+
+# From Jesper Norgaard Welen (2005-04-26):
+# http://www.hum.aau.dk/~poe/tid/tine/DanskTid.htm says that the law
+# [introducing standard time] was in effect from 1894-01-01....
+# The page http://www.retsinfo.dk/_GETDOCI_/ACCN/A18930008330-REGL
+# confirms this, and states that the law was put forth 1893-03-29.
+#
+# The EU treaty with effect from 1973:
+# http://www.retsinfo.dk/_GETDOCI_/ACCN/A19722110030-REGL
+#
+# This provoked a new law from 1974 to make possible summer time changes
+# in subsequenet decrees with the law
+# http://www.retsinfo.dk/_GETDOCI_/ACCN/A19740022330-REGL
+#
+# It seems however that no decree was set forward until 1980.  I have
+# not found any decree, but in another related law, the effecting DST
+# changes are stated explicitly to be from 1980-04-06 at 02:00 to
+# 1980-09-28 at 02:00.  If this is true, this differs slightly from
+# the EU rule in that DST runs to 02:00, not 03:00.  We don't know
+# when Denmark began using the EU rule correctly, but we have only
+# confirmation of the 1980-time, so I presume it was correct in 1981:
+# The law is about the management of the extra hour, concerning
+# working hours reported and effect on obligatory-rest rules (which
+# was suspended on that night):
+# http://www.retsinfo.dk/_GETDOCI_/ACCN/C19801120554-REGL
+
+# From Jesper Norgaard Welen (2005-06-11):
+# The Herning Folkeblad (1980-09-26) reported that the night between
+# Saturday and Sunday the clock is set back from three to two.
+
+# From Paul Eggert (2005-06-11):
+# Hence the "02:00" of the 1980 law refers to standard time, not
+# wall-clock time, and so the EU rules were in effect in 1980.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Denmark	1916	only	-	May	14	23:00	1:00	S
+Rule	Denmark	1916	only	-	Sep	30	23:00	0	-
+Rule	Denmark	1940	only	-	May	15	 0:00	1:00	S
+Rule	Denmark	1945	only	-	Apr	 2	 2:00s	1:00	S
+Rule	Denmark	1945	only	-	Aug	15	 2:00s	0	-
+Rule	Denmark	1946	only	-	May	 1	 2:00s	1:00	S
+Rule	Denmark	1946	only	-	Sep	 1	 2:00s	0	-
+Rule	Denmark	1947	only	-	May	 4	 2:00s	1:00	S
+Rule	Denmark	1947	only	-	Aug	10	 2:00s	0	-
+Rule	Denmark	1948	only	-	May	 9	 2:00s	1:00	S
+Rule	Denmark	1948	only	-	Aug	 8	 2:00s	0	-
+#
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Europe/Copenhagen	 0:50:20 -	LMT	1890
+			 0:50:20 -	CMT	1894 Jan  1 # Copenhagen MT
+			 1:00	Denmark	CE%sT	1942 Nov  2 2:00s
+			 1:00	C-Eur	CE%sT	1945 Apr  2 2:00
+			 1:00	Denmark	CE%sT	1980
+			 1:00	EU	CE%sT
+Zone Atlantic/Faeroe	-0:27:04 -	LMT	1908 Jan 11	# Torshavn
+			 0:00	-	WET	1981
+			 0:00	EU	WE%sT
+#
+# From Paul Eggert (2004-10-31):
+# During World War II, Germany maintained secret manned weather stations in
+# East Greenland and Franz Josef Land, but we don't know their time zones.
+# My source for this is Wilhelm Dege's book mentioned under Svalbard.
+#
+# From Paul Eggert (1996-11-22):
+# Greenland joined the EU as part of Denmark, obtained home rule on 1979-05-01,
+# and left the EU on 1985-02-01.  It therefore should have been using EU
+# rules at least through 1984.  Shanks says Scoresbysund and Godthab
+# used C-Eur rules after 1980, but IATA SSIM (1991/1996) says they use EU
+# rules since at least 1991.  Assume EU rules since 1980.
+
+# From Gwillin Law (2001-06-06), citing
+# <http://www.statkart.no/efs/efshefter/2001/efs5-2001.pdf> (2001-03-15),
+# and with translations corrected by Steffen Thorsen:
+#
+# Greenland has four local times, and the relation to UTC
+# is according to the following time line:
+#
+# The military zone near Thule	UTC-4
+# Standard Greenland time	UTC-3
+# Scoresbysund			UTC-1
+# Danmarkshavn			UTC
+#
+# In the military area near Thule and in Danmarkshavn DST will not be
+# introduced.
+
+# From Rives McDow (2001-11-01):
+#
+# I correspond regularly with the Dansk Polarcenter, and wrote them at
+# the time to clarify the situation in Thule.  Unfortunately, I have
+# not heard back from them regarding my recent letter.  [But I have
+# info from earlier correspondence.]
+#
+# According to the center, a very small local time zone around Thule
+# Air Base keeps the time according to UTC-4, implementing daylight
+# savings using North America rules, changing the time at 02:00 local time....
+#
+# The east coast of Greenland north of the community of Scoresbysund
+# uses UTC in the same way as in Iceland, year round, with no dst.
+# There are just a few stations on this coast, including the
+# Danmarkshavn ICAO weather station mentioned in your September 29th
+# email.  The other stations are two sledge patrol stations in
+# Mestersvig and Daneborg, the air force base at Station Nord, and the
+# DPC research station at Zackenberg.
+#
+# Scoresbysund and two small villages nearby keep time UTC-1 and use
+# the same daylight savings time period as in West Greenland (Godthab).
+#
+# The rest of Greenland, including Godthab (this area, although it
+# includes central Greenland, is known as west Greenland), keeps time
+# UTC-3, with daylight savings methods according to European rules.
+#
+# It is common procedure to use UTC 0 in the wilderness of East and
+# North Greenland, because it is mainly Icelandic aircraft operators
+# maintaining traffic in these areas.  However, the official status of
+# this area is that it sticks with Godthab time.  This area might be
+# considered a dual time zone in some respects because of this.
+
+# From Rives McDow (2001-11-19):
+# I heard back from someone stationed at Thule; the time change took place
+# there at 2:00 AM.
+
+# From Paul Eggert (2001-11-19):
+# The 1997 CIA map shows Danmarkshavn on GMT; the 1995 map as like Godthab.
+# For lack of better info, assume they were like Godthab before 1996.
+# startkart.no says Thule does not observe DST, but this is clearly an error,
+# so go with Shanks for all Thule transitions.
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Thule	1991	1992	-	Mar	lastSun	2:00	1:00	D
+Rule	Thule	1991	1992	-	Sep	lastSun	2:00	0	S
+Rule	Thule	1993	max	-	Apr	Sun>=1	2:00	1:00	D
+Rule	Thule	1993	max	-	Oct	lastSun	2:00	0	S
+#
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Danmarkshavn -1:14:40 -	LMT	1916 Jul 28
+			-3:00	-	WGT	1980 Apr  6 2:00
+			-3:00	EU	WG%sT	1996
+			0:00	-	GMT
+Zone America/Scoresbysund -1:29:00 -	LMT	1916 Jul 28 # Ittoqqortoormiit
+			-2:00	-	CGT	1980 Apr  6 2:00
+			-2:00	C-Eur	CG%sT	1981 Mar 29
+			-1:00	EU	EG%sT
+Zone America/Godthab	-3:26:56 -	LMT	1916 Jul 28 # Nuuk
+			-3:00	-	WGT	1980 Apr  6 2:00
+			-3:00	EU	WG%sT
+Zone America/Thule	-4:35:08 -	LMT	1916 Jul 28 # Pituffik air base
+			-4:00	Thule	A%sT
+
+# Estonia
+# From Peter Ilieve (1994-10-15):
+# A relative in Tallinn confirms the accuracy of the data for 1989 onwards
+# [through 1994] and gives the legal authority for it,
+# a regulation of the Government of Estonia, No. 111 of 1989....
+#
+# From Peter Ilieve (1996-10-28):
+# [IATA SSIM (1992/1996) claims that the Baltic republics switch at 01:00s,
+# but a relative confirms that Estonia still switches at 02:00s, writing:]
+# ``I do not [know] exactly but there are some little different
+# (confusing) rules for International Air and Railway Transport Schedules
+# conversion in Sunday connected with end of summer time in Estonia....
+# A discussion is running about the summer time efficiency and effect on
+# human physiology.  It seems that Estonia maybe will not change to
+# summer time next spring.''
+
+# From Peter Ilieve (1998-11-04), heavily edited:
+# <a href="http://trip.rk.ee/cgi-bin/thw?${BASE}=akt&${OOHTML}=rtd&TA=1998&TO=1&AN=1390">
+# The 1998-09-22 Estonian time law
+# </a>
+# refers to the Eighth Directive and cites the association agreement between
+# the EU and Estonia, ratified by the Estonian law (RT II 1995, 22--27, 120).
+#
+# I also asked [my relative] whether they use any standard abbreviation
+# for their standard and summer times. He says no, they use "suveaeg"
+# (summer time) and "talveaeg" (winter time).
+
+# From <a href="http://www.baltictimes.com/">The Baltic Times</a> (1999-09-09)
+# via Steffen Thorsen:
+# This year will mark the last time Estonia shifts to summer time,
+# a council of the ruling coalition announced Sept. 6....
+# But what this could mean for Estonia's chances of joining the European
+# Union are still unclear.  In 1994, the EU declared summer time compulsory
+# for all member states until 2001.  Brussels has yet to decide what to do
+# after that.
+
+# From Mart Oruaas (2000-01-29):
+# Regulation no. 301 (1999-10-12) obsoletes previous regulation
+# no. 206 (1998-09-22) and thus sticks Estonia to +02:00 GMT for all
+# the year round.  The regulation is effective 1999-11-01.
+
+# From Toomas Soome (2002-02-21):
+# The Estonian government has changed once again timezone politics.
+# Now we are using again EU rules.
+#
+# From Urmet Jaanes (2002-03-28):
+# The legislative reference is Government decree No. 84 on 2002-02-21.
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Tallinn	1:39:00	-	LMT	1880
+			1:39:00	-	TMT	1918 Feb # Tallinn Mean Time
+			1:00	C-Eur	CE%sT	1919 Jul
+			1:39:00	-	TMT	1921 May
+			2:00	-	EET	1940 Aug  6
+			3:00	-	MSK	1941 Sep 15
+			1:00	C-Eur	CE%sT	1944 Sep 22
+			3:00	Russia	MSK/MSD	1989 Mar 26 2:00s
+			2:00	1:00	EEST	1989 Sep 24 2:00s
+			2:00	C-Eur	EE%sT	1998 Sep 22
+			2:00	EU	EE%sT	1999 Nov  1
+			2:00	-	EET	2002 Feb 21
+			2:00	EU	EE%sT
+
+# Finland
+#
+# From Hannu Strang (25 Sep 1994 06:03:37 UTC):
+# Well, here in Helsinki we're just changing from summer time to regular one,
+# and it's supposed to change at 4am...
+#
+# From Paul Eggert (25 Sep 1994):
+# Shanks says Finland has switched at 02:00 standard time since 1981.
+# Go with Strang instead.
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Finland	1942	only	-	Apr	3	0:00	1:00	S
+Rule	Finland	1942	only	-	Oct	3	0:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Helsinki	1:39:52 -	LMT	1878 May 31
+			1:39:52	-	HMT	1921 May    # Helsinki Mean Time
+			2:00	Finland	EE%sT	1981 Mar 29 2:00
+			2:00	EU	EE%sT
+
+# Aaland Is
+Link	Europe/Helsinki	Europe/Mariehamn
+
+
+# France
+
+# From Ciro Discepolo (2000-12-20):
+#
+# Henri Le Corre, Regimes Horaires pour le monde entier, Editions
+# Traditionnelles - Paris 2 books, 1993
+#
+# Gabriel, Traite de l'heure dans le monde, Guy Tredaniel editeur,
+# Paris, 1991
+#
+# Francoise Gauquelin, Problemes de l'heure resolus en astrologie,
+# Guy tredaniel, Paris 1987
+
+
+#
+# Shanks seems to use `24:00' ambiguously; we resolve it with Whitman.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	France	1916	only	-	Jun	14	23:00s	1:00	S
+Rule	France	1916	1919	-	Oct	Sun>=1	23:00s	0	-
+Rule	France	1917	only	-	Mar	24	23:00s	1:00	S
+Rule	France	1918	only	-	Mar	 9	23:00s	1:00	S
+Rule	France	1919	only	-	Mar	 1	23:00s	1:00	S
+Rule	France	1920	only	-	Feb	14	23:00s	1:00	S
+Rule	France	1920	only	-	Oct	23	23:00s	0	-
+Rule	France	1921	only	-	Mar	14	23:00s	1:00	S
+Rule	France	1921	only	-	Oct	25	23:00s	0	-
+Rule	France	1922	only	-	Mar	25	23:00s	1:00	S
+# DSH writes that a law of 1923-05-24 specified 3rd Sat in Apr at 23:00 to 1st
+# Sat in Oct at 24:00; and that in 1930, because of Easter, the transitions
+# were Apr 12 and Oct 5.  Go with Shanks.
+Rule	France	1922	1938	-	Oct	Sat>=1	23:00s	0	-
+Rule	France	1923	only	-	May	26	23:00s	1:00	S
+Rule	France	1924	only	-	Mar	29	23:00s	1:00	S
+Rule	France	1925	only	-	Apr	 4	23:00s	1:00	S
+Rule	France	1926	only	-	Apr	17	23:00s	1:00	S
+Rule	France	1927	only	-	Apr	 9	23:00s	1:00	S
+Rule	France	1928	only	-	Apr	14	23:00s	1:00	S
+Rule	France	1929	only	-	Apr	20	23:00s	1:00	S
+Rule	France	1930	only	-	Apr	12	23:00s	1:00	S
+Rule	France	1931	only	-	Apr	18	23:00s	1:00	S
+Rule	France	1932	only	-	Apr	 2	23:00s	1:00	S
+Rule	France	1933	only	-	Mar	25	23:00s	1:00	S
+Rule	France	1934	only	-	Apr	 7	23:00s	1:00	S
+Rule	France	1935	only	-	Mar	30	23:00s	1:00	S
+Rule	France	1936	only	-	Apr	18	23:00s	1:00	S
+Rule	France	1937	only	-	Apr	 3	23:00s	1:00	S
+Rule	France	1938	only	-	Mar	26	23:00s	1:00	S
+Rule	France	1939	only	-	Apr	15	23:00s	1:00	S
+Rule	France	1939	only	-	Nov	18	23:00s	0	-
+Rule	France	1940	only	-	Feb	25	 2:00	1:00	S
+# The French rules for 1941-1944 were not used in Paris, but Shanks writes
+# that they were used in Monaco and in many French locations.
+# Le Corre writes that the upper limit of the free zone was Arneguy, Orthez,
+# Mont-de-Marsan, Bazas, Langon, Lamotte-Montravel, Marouil, La
+# Rochefoucault, Champagne-Mouton, La Roche-Posay, La Haye-Decartes,
+# Loches, Montrichard, Vierzon, Bourges, Moulins, Digoin,
+# Paray-le-Monial, Montceau-les-Mines, Chalons-sur-Saone, Arbois,
+# Dole, Morez, St-Claude, and Collognes (Haute-Savioe).
+Rule	France	1941	only	-	May	 5	 0:00	2:00	M # Midsummer
+# Shanks says this transition occurred at Oct 6 1:00,
+# but go with Denis Excoffier (1997-12-12),
+# who quotes the Ephemerides Astronomiques for 1998 from Bureau des Longitudes
+# as saying 5/10/41 22hUT.
+Rule	France	1941	only	-	Oct	 6	 0:00	1:00	S
+Rule	France	1942	only	-	Mar	 9	 0:00	2:00	M
+Rule	France	1942	only	-	Nov	 2	 3:00	1:00	S
+Rule	France	1943	only	-	Mar	29	 2:00	2:00	M
+Rule	France	1943	only	-	Oct	 4	 3:00	1:00	S
+Rule	France	1944	only	-	Apr	 3	 2:00	2:00	M
+Rule	France	1944	only	-	Oct	 8	 1:00	1:00	S
+Rule	France	1945	only	-	Apr	 2	 2:00	2:00	M
+Rule	France	1945	only	-	Sep	16	 3:00	0	-
+# Shanks gives Mar 28 2:00 and Sep 26 3:00;
+# go with Excoffier's 28/3/76 0hUT and 25/9/76 23hUT.
+Rule	France	1976	only	-	Mar	28	 1:00	1:00	S
+Rule	France	1976	only	-	Sep	26	 1:00	0	-
+# Shanks gives 0:09 for Paris Mean Time, and Whitman gives 0:09:05,
+# but Howse quotes the actual French legislation as saying 0:09:21.
+# Go with Howse.  Howse writes that the time in France was officially based
+# on PMT-0:09:21 until 1978-08-09, when the time base finally switched to UTC.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Paris	0:09:21 -	LMT	1891 Mar 15  0:01
+			0:09:21	-	PMT	1911 Mar 11  0:01  # Paris MT
+# Shanks gives 1940 Jun 14 0:00; go with Excoffier and Le Corre.
+			0:00	France	WE%sT	1940 Jun 14 23:00
+# Le Corre says Paris stuck with occupied-France time after the liberation;
+# go with Shanks.
+			1:00	C-Eur	CE%sT	1944 Aug 25
+			0:00	France	WE%sT	1945 Sep 16  3:00
+			1:00	France	CE%sT	1977
+			1:00	EU	CE%sT
+
+# Germany
+
+# From Markus Kuhn (1998-09-29):
+# The German time zone web site by the Physikalisch-Technische
+# Bundesanstalt contains DST information back to 1916.
+# [See tz-link.htm for the URL.]
+
+# From Joerg Schilling (2002-10-23):
+# In 1945, Berlin was switched to Moscow Summer time (GMT+4) by <a
+# href="http://www.dhm.de/lemo/html/biografien/BersarinNikolai/">
+# General [Nikolai] Bersarin</a>.
+
+# From Paul Eggert (2003-03-08):
+# <a href="http://www.parlament-berlin.de/pds-fraktion.nsf/727459127c8b66ee8525662300459099/defc77cb784f180ac1256c2b0030274b/$FILE/bersarint.pdf">
+# says that Bersarin issued an order to use Moscow time on May 20.
+# However, Moscow did not observe daylight saving in 1945, so
+# this was equivalent to CEMT (GMT+3), not GMT+4.
+
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Germany	1945	only	-	Apr	 2	2:00s	1:00	S
+Rule	Germany	1945	only	-	May	24	2:00	2:00	M # Midsummer
+Rule	Germany	1945	only	-	Sep	24	3:00	1:00	S
+Rule	Germany	1945	only	-	Nov	18	2:00s	0	-
+Rule	Germany	1946	only	-	Apr	14	2:00s	1:00	S
+Rule	Germany	1946	only	-	Oct	 7	2:00s	0	-
+Rule	Germany	1947	1949	-	Oct	Sun>=1	2:00s	0	-
+Rule	Germany	1947	only	-	Apr	 6	2:00s	1:00	S
+Rule	Germany	1947	only	-	May	11	2:00s	2:00	M
+Rule	Germany	1947	only	-	Jun	29	3:00	1:00	S
+Rule	Germany	1948	only	-	Apr	18	2:00s	1:00	S
+Rule	Germany	1949	only	-	Apr	10	2:00s	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Berlin	0:53:28 -	LMT	1893 Apr
+			1:00	C-Eur	CE%sT	1945 Apr 2 2:00
+			1:00	Germany	CE%sT	1980
+			1:00	EU	CE%sT
+
+# Georgia
+# Please see the "asia" file for Asia/Tbilisi.
+# Herodotus (Histories, IV.45) says Georgia north of the Phasis (now Rioni)
+# is in Europe.  Our reference location Tbilisi is in the Asian part.
+
+# Gibraltar
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Europe/Gibraltar	-0:21:24 -	LMT	1880 Aug  2
+			0:00	GB-Eire	%s	1957 Apr 14 2:00
+			1:00	-	CET	1982
+			1:00	EU	CE%sT
+
+# Greece
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+# Whitman gives 1932 Jul 5 - Nov 1; go with Shanks.
+Rule	Greece	1932	only	-	Jul	 7	0:00	1:00	S
+Rule	Greece	1932	only	-	Sep	 1	0:00	0	-
+# Whitman gives 1941 Apr 25 - ?; go with Shanks.
+Rule	Greece	1941	only	-	Apr	 7	0:00	1:00	S
+# Whitman gives 1942 Feb 2 - ?; go with Shanks.
+Rule	Greece	1942	only	-	Nov	 2	3:00	0	-
+Rule	Greece	1943	only	-	Mar	30	0:00	1:00	S
+Rule	Greece	1943	only	-	Oct	 4	0:00	0	-
+# Whitman gives 1944 Oct 3 - Oct 31; go with Shanks.
+Rule	Greece	1952	only	-	Jul	 1	0:00	1:00	S
+Rule	Greece	1952	only	-	Nov	 2	0:00	0	-
+Rule	Greece	1975	only	-	Apr	12	0:00s	1:00	S
+Rule	Greece	1975	only	-	Nov	26	0:00s	0	-
+Rule	Greece	1976	only	-	Apr	11	2:00s	1:00	S
+Rule	Greece	1976	only	-	Oct	10	2:00s	0	-
+Rule	Greece	1977	1978	-	Apr	Sun>=1	2:00s	1:00	S
+Rule	Greece	1977	only	-	Sep	26	2:00s	0	-
+Rule	Greece	1978	only	-	Sep	24	4:00	0	-
+Rule	Greece	1979	only	-	Apr	 1	9:00	1:00	S
+Rule	Greece	1979	only	-	Sep	29	2:00	0	-
+Rule	Greece	1980	only	-	Apr	 1	0:00	1:00	S
+Rule	Greece	1980	only	-	Sep	28	0:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Athens	1:34:52 -	LMT	1895 Sep 14
+			1:34:52	-	AMT	1916 Jul 28 0:01     # Athens MT
+			2:00	Greece	EE%sT	1941 Apr 30
+			1:00	Greece	CE%sT	1944 Apr  4
+			2:00	Greece	EE%sT	1981
+			# Shanks says they switched to C-Eur in 1981;
+			# go with EU instead, since Greece joined it on Jan 1.
+			2:00	EU	EE%sT
+
+# Hungary
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Hungary	1918	only	-	Apr	 1	 3:00	1:00	S
+Rule	Hungary	1918	only	-	Sep	29	 3:00	0	-
+Rule	Hungary	1919	only	-	Apr	15	 3:00	1:00	S
+Rule	Hungary	1919	only	-	Sep	15	 3:00	0	-
+Rule	Hungary	1920	only	-	Apr	 5	 3:00	1:00	S
+Rule	Hungary	1920	only	-	Sep	30	 3:00	0	-
+Rule	Hungary	1945	only	-	May	 1	23:00	1:00	S
+Rule	Hungary	1945	only	-	Nov	 3	 0:00	0	-
+Rule	Hungary	1946	only	-	Mar	31	 2:00s	1:00	S
+Rule	Hungary	1946	1949	-	Oct	Sun>=1	 2:00s	0	-
+Rule	Hungary	1947	1949	-	Apr	Sun>=4	 2:00s	1:00	S
+Rule	Hungary	1950	only	-	Apr	17	 2:00s	1:00	S
+Rule	Hungary	1950	only	-	Oct	23	 2:00s	0	-
+Rule	Hungary	1954	1955	-	May	23	 0:00	1:00	S
+Rule	Hungary	1954	1955	-	Oct	 3	 0:00	0	-
+Rule	Hungary	1956	only	-	Jun	Sun>=1	 0:00	1:00	S
+Rule	Hungary	1956	only	-	Sep	lastSun	 0:00	0	-
+Rule	Hungary	1957	only	-	Jun	Sun>=1	 1:00	1:00	S
+Rule	Hungary	1957	only	-	Sep	lastSun	 3:00	0	-
+Rule	Hungary	1980	only	-	Apr	 6	 1:00	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Budapest	1:16:20 -	LMT	1890 Oct
+			1:00	C-Eur	CE%sT	1918
+			1:00	Hungary	CE%sT	1941 Apr  6  2:00
+			1:00	C-Eur	CE%sT	1945 May  1 23:00
+			1:00	Hungary	CE%sT	1980 Sep 28  2:00s
+			1:00	EU	CE%sT
+
+# Iceland
+#
+# From Adam David (1993-11-06):
+# The name of the timezone in Iceland for system / mail / news purposes is GMT.
+#
+# (1993-12-05):
+# This material is paraphrased from the 1988 edition of the University of
+# Iceland Almanak.
+#
+# From January 1st, 1908 the whole of Iceland was standardised at 1 hour
+# behind GMT. Previously, local mean solar time was used in different parts
+# of Iceland, the almanak had been based on Reykjavik mean solar time which
+# was 1 hour and 28 minutes behind GMT.
+#
+# "first day of winter" referred to [below] means the first day of the 26 weeks
+# of winter, according to the old icelandic calendar that dates back to the
+# time the norsemen first settled Iceland.  The first day of winter is always
+# Saturday, but is not dependent on the Julian or Gregorian calendars.
+#
+# (1993-12-10):
+# I have a reference from the Oxford Icelandic-English dictionary for the
+# beginning of winter, which ties it to the ecclesiastical calendar (and thus
+# to the julian/gregorian calendar) over the period in question.
+#	the winter begins on the Saturday next before St. Luke's day
+#	(old style), or on St. Luke's day, if a Saturday.
+# St. Luke's day ought to be traceable from ecclesiastical sources. "old style"
+# might be a reference to the Julian calendar as opposed to Gregorian, or it
+# might mean something else (???).
+#
+# From Paul Eggert (1999-10-29):
+# The Iceland Almanak, Shanks and Whitman disagree on many points.
+# We go with the Almanak, except for one claim from Shanks, namely that
+# Reykavik was 21W57 from 1837 to 1908, local mean time before that.
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Iceland	1917	1918	-	Feb	19	23:00	1:00	S
+Rule	Iceland	1917	only	-	Oct	21	 1:00	0	-
+Rule	Iceland	1918	only	-	Nov	16	 1:00	0	-
+Rule	Iceland	1939	only	-	Apr	29	23:00	1:00	S
+Rule	Iceland	1939	only	-	Nov	29	 2:00	0	-
+Rule	Iceland	1940	only	-	Feb	25	 2:00	1:00	S
+Rule	Iceland	1940	only	-	Nov	 3	 2:00	0	-
+Rule	Iceland	1941	only	-	Mar	 2	 1:00s	1:00	S
+Rule	Iceland	1941	only	-	Nov	 2	 1:00s	0	-
+Rule	Iceland	1942	only	-	Mar	 8	 1:00s	1:00	S
+Rule	Iceland	1942	only	-	Oct	25	 1:00s	0	-
+# 1943-1946 - first Sunday in March until first Sunday in winter
+Rule	Iceland	1943	1946	-	Mar	Sun>=1	 1:00s	1:00	S
+Rule	Iceland	1943	1948	-	Oct	Sun>=22	 1:00s	0	-
+# 1947-1967 - first Sunday in April until first Sunday in winter
+Rule	Iceland	1947	1967	-	Apr	Sun>=1	 1:00s	1:00	S
+# 1949 Oct transition delayed by 1 week
+Rule	Iceland	1949	only	-	Oct	30	 1:00s	0	-
+Rule	Iceland	1950	1966	-	Oct	Sun>=22	 1:00s	0	-
+Rule	Iceland	1967	only	-	Oct	29	 1:00s	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Atlantic/Reykjavik	-1:27:24 -	LMT	1837
+			-1:27:48 -	RMT	1908 # Reykjavik Mean Time?
+			-1:00	Iceland	IS%sT	1968 Apr 7 1:00s
+			 0:00	-	GMT
+
+# Italy
+#
+# From Paul Eggert (2001-03-06):
+# Sicily and Sardinia each had their own time zones from 1866 to 1893,
+# called Palermo Time (+00:53:28) and Cagliari Time (+00:36:32).
+# During World War II, German-controlled Italy used German time.
+# But these events all occurred before the 1970 cutoff,
+# so record only the time in Rome.
+#
+# From Paul Eggert (1996-05-06):
+# For Italian DST we have three sources: Shanks, Whitman, and F. Pollastri
+# <a href="http://toi.iriti.cnr.it/uk/ienitlt.html">
+# Day-light Saving Time in Italy (1996-03-14)
+# </a>
+# (`FP' below), taken from an Italian National Electrotechnical Institute
+# publication. When the three sources disagree, guess who's right, as follows:
+#
+# year	FP	Shanks (S)	Whitman (W)	Go with:
+# 1916	06-03	06-03 24:00	06-03 00:00	FP & W
+#	09-30	09-30 24:00	09-30 01:00	FP; guess 24:00s
+# 1917	04-01	03-31 24:00	03-31 00:00	FP & S
+#	09-30	09-29 24:00	09-30 01:00	FP & W
+# 1918	03-09	03-09 24:00	03-09 00:00	FP & S
+#	10-06	10-05 24:00	10-06 01:00	FP & W
+# 1919	03-01	03-01 24:00	03-01 00:00	FP & S
+#	10-04	10-04 24:00	10-04 01:00	FP; guess 24:00s
+# 1920	03-20	03-20 24:00	03-20 00:00	FP & S
+#	09-18	09-18 24:00	10-01 01:00	FP; guess 24:00s
+# 1944	04-02	04-03 02:00			S (see C-Eur)
+#	09-16	10-02 03:00			FP; guess 24:00s
+# 1945	09-14	09-16 24:00			FP; guess 24:00s
+# 1970	05-21	05-31 00:00			S
+#	09-20	09-27 00:00			S
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Italy	1916	only	-	Jun	 3	0:00s	1:00	S
+Rule	Italy	1916	only	-	Oct	 1	0:00s	0	-
+Rule	Italy	1917	only	-	Apr	 1	0:00s	1:00	S
+Rule	Italy	1917	only	-	Sep	30	0:00s	0	-
+Rule	Italy	1918	only	-	Mar	10	0:00s	1:00	S
+Rule	Italy	1918	1919	-	Oct	Sun>=1	0:00s	0	-
+Rule	Italy	1919	only	-	Mar	 2	0:00s	1:00	S
+Rule	Italy	1920	only	-	Mar	21	0:00s	1:00	S
+Rule	Italy	1920	only	-	Sep	19	0:00s	0	-
+Rule	Italy	1940	only	-	Jun	15	0:00s	1:00	S
+Rule	Italy	1944	only	-	Sep	17	0:00s	0	-
+Rule	Italy	1945	only	-	Apr	 2	2:00	1:00	S
+Rule	Italy	1945	only	-	Sep	15	0:00s	0	-
+Rule	Italy	1946	only	-	Mar	17	2:00s	1:00	S
+Rule	Italy	1946	only	-	Oct	 6	2:00s	0	-
+Rule	Italy	1947	only	-	Mar	16	0:00s	1:00	S
+Rule	Italy	1947	only	-	Oct	 5	0:00s	0	-
+Rule	Italy	1948	only	-	Feb	29	2:00s	1:00	S
+Rule	Italy	1948	only	-	Oct	 3	2:00s	0	-
+Rule	Italy	1966	1968	-	May	Sun>=22	0:00	1:00	S
+Rule	Italy	1966	1969	-	Sep	Sun>=22	0:00	0	-
+Rule	Italy	1969	only	-	Jun	 1	0:00	1:00	S
+Rule	Italy	1970	only	-	May	31	0:00	1:00	S
+Rule	Italy	1970	only	-	Sep	lastSun	0:00	0	-
+Rule	Italy	1971	1972	-	May	Sun>=22	0:00	1:00	S
+Rule	Italy	1971	only	-	Sep	lastSun	1:00	0	-
+Rule	Italy	1972	only	-	Oct	 1	0:00	0	-
+Rule	Italy	1973	only	-	Jun	 3	0:00	1:00	S
+Rule	Italy	1973	1974	-	Sep	lastSun	0:00	0	-
+Rule	Italy	1974	only	-	May	26	0:00	1:00	S
+Rule	Italy	1975	only	-	Jun	 1	0:00s	1:00	S
+Rule	Italy	1975	1977	-	Sep	lastSun	0:00s	0	-
+Rule	Italy	1976	only	-	May	30	0:00s	1:00	S
+Rule	Italy	1977	1979	-	May	Sun>=22	0:00s	1:00	S
+Rule	Italy	1978	only	-	Oct	 1	0:00s	0	-
+Rule	Italy	1979	only	-	Sep	30	0:00s	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Rome	0:49:56 -	LMT	1866 Sep 22
+			0:49:56	-	RMT	1893 Nov	# Rome Mean Time
+			1:00	Italy	CE%sT	1942 Nov  2 2:00s
+			1:00	C-Eur	CE%sT	1944 Jul
+			1:00	Italy	CE%sT	1980
+			1:00	EU	CE%sT
+
+Link	Europe/Rome	Europe/Vatican
+Link	Europe/Rome	Europe/San_Marino
+
+# Latvia
+
+# From Liene Kanepe (1998-09-17):
+
+# I asked about this matter Scientific Secretary of the Institute of Astronomy
+# of The University of Latvia Dr. paed Mr. Ilgonis Vilks. I also searched the
+# correct data in juridical acts and I found some juridical documents about
+# changes in the counting of time in Latvia from 1981....
+#
+# Act No.35 of the Council of Ministers of Latvian SSR of 1981-01-22 ...
+# according to the Act No.925 of the Council of Ministers of USSR of 1980-10-24
+# ...: all year round the time of 2nd time zone + 1 hour, in addition turning
+# the hands of the clock 1 hour forward on 1 April at 00:00 (GMT 31 March 21:00)
+# and 1 hour backward on the 1 October at 00:00 (GMT 30 September 20:00).
+#
+# Act No.592 of the Council of Ministers of Latvian SSR of 1984-09-24 ...
+# according to the Act No.967 of the Council of Ministers of USSR of 1984-09-13
+# ...: all year round the time of 2nd time zone + 1 hour, in addition turning
+# the hands of the clock 1 hour forward on the last Sunday of March at 02:00
+# (GMT 23:00 on the previous day) and 1 hour backward on the last Sunday of
+# September at 03:00 (GMT 23:00 on the previous day).
+#
+# Act No.81 of the Council of Ministers of Latvian SSR of 1989-03-22 ...
+# according to the Act No.227 of the Council of Ministers of USSR of 1989-03-14
+# ...: since the last Sunday of March 1989 in Lithuanian SSR, Latvian SSR,
+# Estonian SSR and Kaliningrad region of Russian Federation all year round the
+# time of 2nd time zone (Moscow time minus one hour). On the territory of Latvia
+# transition to summer time is performed on the last Sunday of March at 02:00
+# (GMT 00:00), turning the hands of the clock 1 hour forward.  The end of
+# daylight saving time is performed on the last Sunday of September at 03:00
+# (GMT 00:00), turning the hands of the clock 1 hour backward. Exception is
+# 1989-03-26, when we must not turn the hands of the clock....
+#
+# The Regulations of the Cabinet of Ministers of the Republic of Latvia of
+# 1997-01-21 on transition to Summer time ... established the same order of
+# daylight savings time settings as in the States of the European Union.
+
+# From Andrei Ivanov (2000-03-06):
+# This year Latvia will not switch to Daylight Savings Time (as specified in
+# <a href="http://www.lv-laiks.lv/wwwraksti/2000/071072/vd4.htm">
+# The Regulations of the Cabinet of Ministers of the Rep. of Latvia of
+# 29-Feb-2000 (#79)</a>, in Latvian for subscribers only).
+
+# <a href="http://www.rferl.org/newsline/2001/01/3-CEE/cee-030101.html">
+# From RFE/RL Newsline (2001-01-03), noted after a heads-up by Rives McDow:
+# </a>
+# The Latvian government on 2 January decided that the country will
+# institute daylight-saving time this spring, LETA reported.
+# Last February the three Baltic states decided not to turn back their
+# clocks one hour in the spring....
+# Minister of Economy Aigars Kalvitis noted that Latvia had too few
+# daylight hours and thus decided to comply with a draft European
+# Commission directive that provides for instituting daylight-saving
+# time in EU countries between 2002 and 2006. The Latvian government
+# urged Lithuania and Estonia to adopt a similar time policy, but it
+# appears that they will not do so....
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Latvia	1989	1996	-	Mar	lastSun	 2:00s	1:00	S
+Rule	Latvia	1989	1996	-	Sep	lastSun	 2:00s	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Riga	1:36:24	-	LMT	1880
+			1:36:24	-	RMT	1918 Apr 15 2:00 #Riga Mean Time
+			1:36:24	1:00	LST	1918 Sep 16 3:00 #Latvian Summer
+			1:36:24	-	RMT	1919 Apr  1 2:00
+			1:36:24	1:00	LST	1919 May 22 3:00
+			1:36:24	-	RMT	1926 May 11
+			2:00	-	EET	1940 Aug  5
+			3:00	-	MSK	1941 Jul
+			1:00	C-Eur	CE%sT	1944 Oct 13
+			3:00	Russia	MSK/MSD	1989 Mar lastSun 2:00s
+			2:00	1:00	EEST	1989 Sep lastSun 2:00s
+			2:00	Latvia	EE%sT	1997 Jan 21
+			2:00	EU	EE%sT	2000 Feb 29
+			2:00	-	EET	2001 Jan  2
+			2:00	EU	EE%sT
+
+# Liechtenstein
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Vaduz	0:38:04 -	LMT	1894 Jun
+			1:00	-	CET	1981
+			1:00	EU	CE%sT
+
+# Lithuania
+
+# From Paul Eggert (1996-11-22):
+# IATA SSIM (1992/1996) says Lithuania uses W-Eur rules, but since it is
+# known to be wrong about Estonia and Latvia, assume it's wrong here too.
+
+# From Marius Gedminas (1998-08-07):
+# I would like to inform that in this year Lithuanian time zone
+# (Europe/Vilnius) was changed.
+
+# From <a href="http://www.elta.lt/">ELTA</a> No. 972 (2582) (1999-09-29),
+# via Steffen Thorsen:
+# Lithuania has shifted back to the second time zone (GMT plus two hours)
+# to be valid here starting from October 31,
+# as decided by the national government on Wednesday....
+# The Lithuanian government also announced plans to consider a
+# motion to give up shifting to summer time in spring, as it was
+# already done by Estonia.
+
+# From the <a href="http://www.tourism.lt/informa/ff.htm">
+# Fact File, Lithuanian State Department of Tourism
+# </a> (2000-03-27): Local time is GMT+2 hours ..., no daylight saving.
+
+# From a user via Klaus Marten (2003-02-07):
+# As a candidate for membership of the European Union, Lithuania will
+# observe Summer Time in 2003, changing its clocks at the times laid
+# down in EU Directive 2000/84 of 19.I.01 (i.e. at the same times as its
+# neighbour Latvia). The text of the Lithuanian government Order of
+# 7.XI.02 to this effect can be found at
+# http://www.lrvk.lt/nut/11/n1749.htm
+
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Vilnius	1:41:16	-	LMT	1880
+			1:24:00	-	WMT	1917	    # Warsaw Mean Time
+			1:35:36	-	KMT	1919 Oct 10 # Kaunas Mean Time
+			1:00	-	CET	1920 Jul 12
+			2:00	-	EET	1920 Oct  9
+			1:00	-	CET	1940 Aug  3
+			3:00	-	MSK	1941 Jun 24
+			1:00	C-Eur	CE%sT	1944 Aug
+			3:00	Russia	MSK/MSD	1991 Mar 31 2:00s
+			2:00	1:00	EEST	1991 Sep 29 2:00s
+			2:00	C-Eur	EE%sT	1998
+			2:00	-	EET	1998 Mar 29 1:00u
+			1:00	EU	CE%sT	1999 Oct 31 1:00u
+			2:00	-	EET	2003 Jan  1
+			2:00	EU	EE%sT
+
+# Luxembourg
+# Whitman disagrees with most of these dates in minor ways; go with Shanks.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Lux	1916	only	-	May	14	23:00	1:00	S
+Rule	Lux	1916	only	-	Oct	 1	 1:00	0	-
+Rule	Lux	1917	only	-	Apr	28	23:00	1:00	S
+Rule	Lux	1917	only	-	Sep	17	 1:00	0	-
+Rule	Lux	1918	only	-	Apr	Mon>=15	 2:00s	1:00	S
+Rule	Lux	1918	only	-	Sep	Mon>=15	 2:00s	0	-
+Rule	Lux	1919	only	-	Mar	 1	23:00	1:00	S
+Rule	Lux	1919	only	-	Oct	 5	 3:00	0	-
+Rule	Lux	1920	only	-	Feb	14	23:00	1:00	S
+Rule	Lux	1920	only	-	Oct	24	 2:00	0	-
+Rule	Lux	1921	only	-	Mar	14	23:00	1:00	S
+Rule	Lux	1921	only	-	Oct	26	 2:00	0	-
+Rule	Lux	1922	only	-	Mar	25	23:00	1:00	S
+Rule	Lux	1922	only	-	Oct	Sun>=2	 1:00	0	-
+Rule	Lux	1923	only	-	Apr	21	23:00	1:00	S
+Rule	Lux	1923	only	-	Oct	Sun>=2	 2:00	0	-
+Rule	Lux	1924	only	-	Mar	29	23:00	1:00	S
+Rule	Lux	1924	1928	-	Oct	Sun>=2	 1:00	0	-
+Rule	Lux	1925	only	-	Apr	 5	23:00	1:00	S
+Rule	Lux	1926	only	-	Apr	17	23:00	1:00	S
+Rule	Lux	1927	only	-	Apr	 9	23:00	1:00	S
+Rule	Lux	1928	only	-	Apr	14	23:00	1:00	S
+Rule	Lux	1929	only	-	Apr	20	23:00	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Europe/Luxembourg	0:24:36 -	LMT	1904 Jun
+			1:00	Lux	CE%sT	1918 Nov 25
+			0:00	Lux	WE%sT	1929 Oct  6 2:00s
+			0:00	Belgium	WE%sT	1940 May 14 3:00
+			1:00	C-Eur	WE%sT	1944 Sep 18 3:00
+			1:00	Belgium	CE%sT	1977
+			1:00	EU	CE%sT
+
+# Macedonia
+# see Serbia and Montenegro
+
+# Malta
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Malta	1973	only	-	Mar	31	0:00s	1:00	S
+Rule	Malta	1973	only	-	Sep	29	0:00s	0	-
+Rule	Malta	1974	only	-	Apr	21	0:00s	1:00	S
+Rule	Malta	1974	only	-	Sep	16	0:00s	0	-
+Rule	Malta	1975	1979	-	Apr	Sun>=15	2:00	1:00	S
+Rule	Malta	1975	1980	-	Sep	Sun>=15	2:00	0	-
+Rule	Malta	1980	only	-	Mar	31	2:00	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Malta	0:58:04 -	LMT	1893 Nov  2	# Valletta
+			1:00	Italy	CE%sT	1942 Nov  2 2:00s
+			1:00	C-Eur	CE%sT	1945 Apr  2 2:00s
+			1:00	Italy	CE%sT	1973 Mar 31
+			1:00	Malta	CE%sT	1981
+			1:00	EU	CE%sT
+
+# Moldova
+
+# From Paul Eggert (2001-02-11):
+# A previous version of this database followed Shanks, who writes that
+# Tiraspol switched to Moscow time on 1992-01-19 at 02:00.
+# However, this is most likely an error, as Moldova declared independence
+# on 1991-08-27 (the 1992-01-19 date is that of a Russian decree).
+# In early 1992 there was large-scale interethnic violence in the area
+# and it's possible that some Russophones continued to observe Moscow time.
+# But [two people] separately reported via
+# Jesper Norgaard that as of 2001-01-24 Tiraspol was like Chisinau.
+# The Tiraspol entry has therefore been removed for now.
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Chisinau	1:55:20 -	LMT	1880
+			1:55	-	CMT	1918 Feb 15 # Chisinau MT
+			1:44:24	-	BMT	1931 Jul 24 # Bucharest MT
+			2:00	Romania	EE%sT	1940 Aug 15
+			2:00	1:00	EEST	1941 Jul 17
+			1:00	C-Eur	CE%sT	1944 Aug 24
+			3:00	Russia	MSK/MSD	1990
+			3:00	-	MSK	1990 May 6
+			2:00	-	EET	1991
+			2:00	Russia	EE%sT	1992
+			2:00	E-Eur	EE%sT	1997
+# See Romania commentary for the guessed 1997 transition to EU rules.
+			2:00	EU	EE%sT
+
+# Monaco
+# Shanks gives 0:09 for Paris Mean Time; go with Howse's more precise 0:09:21.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Monaco	0:29:32 -	LMT	1891 Mar 15
+			0:09:21	-	PMT	1911 Mar 11    # Paris Mean Time
+			0:00	France	WE%sT	1945 Sep 16 3:00
+			1:00	France	CE%sT	1977
+			1:00	EU	CE%sT
+
+# Netherlands
+
+# Howse writes that the Netherlands' railways used GMT between 1892 and 1940,
+# but for other purposes the Netherlands used Amsterdam mean time.
+
+# However, Robert H. van Gent writes (2001-04-01):
+# Howse's statement is only correct up to 1909. From 1909-05-01 (00:00:00
+# Amsterdam mean time) onwards, the whole of the Netherlands (including
+# the Dutch railways) was required by law to observe Amsterdam mean time
+# (19 minutes 32.13 seconds ahead of GMT). This had already been the
+# common practice (except for the railways) for many decades but it was
+# not until 1909 when the Dutch government finally defined this by law.
+# On 1937-07-01 this was changed to 20 minutes (exactly) ahead of GMT and
+# was generally known as Dutch Time ("Nederlandse Tijd").
+#
+# (2001-04-08):
+# 1892-05-01 was the date when the Dutch railways were by law required to
+# observe GMT while the remainder of the Netherlands adhered to the common
+# practice of following Amsterdam mean time.
+#
+# (2001-04-09):
+# In 1835 the authorities of the province of North Holland requested the
+# municipal authorities of the towns and cities in the province to observe
+# Amsterdam mean time but I do not know in how many cases this request was
+# actually followed.
+#
+# From 1852 onwards the Dutch telegraph offices were by law required to
+# observe Amsterdam mean time. As the time signals from the observatory of
+# Leiden were also distributed by the telegraph system, I assume that most
+# places linked up with the telegraph (and railway) system automatically
+# adopted Amsterdam mean time.
+#
+# Although the early Dutch railway companies initially observed a variety
+# of times, most of them had adopted Amsterdam mean time by 1858 but it
+# was not until 1866 when they were all required by law to observe
+# Amsterdam mean time.
+
+# The data before 1945 are taken from
+# <http://www.phys.uu.nl/~vgent/wettijd/wettijd.htm>.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Neth	1916	only	-	May	 1	0:00	1:00	NST	# Netherlands Summer Time
+Rule	Neth	1916	only	-	Oct	 1	0:00	0	AMT	# Amsterdam Mean Time
+Rule	Neth	1917	only	-	Apr	16	2:00s	1:00	NST
+Rule	Neth	1917	only	-	Sep	17	2:00s	0	AMT
+Rule	Neth	1918	1921	-	Apr	Mon>=1	2:00s	1:00	NST
+Rule	Neth	1918	1921	-	Sep	lastMon	2:00s	0	AMT
+Rule	Neth	1922	only	-	Mar	lastSun	2:00s	1:00	NST
+Rule	Neth	1922	1936	-	Oct	Sun>=2	2:00s	0	AMT
+Rule	Neth	1923	only	-	Jun	Fri>=1	2:00s	1:00	NST
+Rule	Neth	1924	only	-	Mar	lastSun	2:00s	1:00	NST
+Rule	Neth	1925	only	-	Jun	Fri>=1	2:00s	1:00	NST
+# From 1926 through 1939 DST began 05-15, except that it was delayed by a week
+# in years when 05-15 fell in the Pentecost weekend.
+Rule	Neth	1926	1931	-	May	15	2:00s	1:00	NST
+Rule	Neth	1932	only	-	May	22	2:00s	1:00	NST
+Rule	Neth	1933	1936	-	May	15	2:00s	1:00	NST
+Rule	Neth	1937	only	-	May	22	2:00s	1:00	NST
+Rule	Neth	1937	only	-	Jul	 1	0:00	1:00	S
+Rule	Neth	1937	1939	-	Oct	Sun>=2	2:00s	0	-
+Rule	Neth	1938	1939	-	May	15	2:00s	1:00	S
+Rule	Neth	1945	only	-	Apr	 2	2:00s	1:00	S
+Rule	Neth	1945	only	-	Sep	16	2:00s	0	-
+#
+# Amsterdam Mean Time was +00:19:32.13 exactly, but the .13 is omitted
+# below because the current format requires GMTOFF to be an integer.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Europe/Amsterdam	0:19:32 -	LMT	1835
+			0:19:32	Neth	%s	1937 Jul  1
+			0:20	Neth	NE%sT	1940 May 16 0:00 # Dutch Time
+			1:00	C-Eur	CE%sT	1945 Apr  2 2:00
+			1:00	Neth	CE%sT	1977
+			1:00	EU	CE%sT
+
+# Norway
+# http://met.no/met/met_lex/q_u/sommertid.html (2004-01) agrees with Shanks.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Norway	1916	only	-	May	22	1:00	1:00	S
+Rule	Norway	1916	only	-	Sep	30	0:00	0	-
+Rule	Norway	1945	only	-	Apr	 2	2:00s	1:00	S
+Rule	Norway	1945	only	-	Oct	 1	2:00s	0	-
+Rule	Norway	1959	1964	-	Mar	Sun>=15	2:00s	1:00	S
+Rule	Norway	1959	1965	-	Sep	Sun>=15	2:00s	0	-
+Rule	Norway	1965	only	-	Apr	25	2:00s	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Oslo	0:43:00 -	LMT	1895 Jan  1
+			1:00	Norway	CE%sT	1940 Aug 10 23:00
+			1:00	C-Eur	CE%sT	1945 Apr  2  2:00
+			1:00	Norway	CE%sT	1980
+			1:00	EU	CE%sT
+
+# Svalbard & Jan Mayen
+
+# From Steffen Thorsen (2001-05-01):
+# Although I could not find it explicitly, it seems that Jan Mayen and
+# Svalbard have been using the same time as Norway at least since the
+# time they were declared as parts of Norway.  Svalbard was declared
+# as a part of Norway by law of 1925-07-17 no 11, section 4 and Jan
+# Mayen by law of 1930-02-27 no 2, section 2. (From
+# http://www.lovdata.no/all/nl-19250717-011.html and
+# http://www.lovdata.no/all/nl-19300227-002.html).  The law/regulation
+# for normal/standard time in Norway is from 1894-06-29 no 1 (came
+# into operation on 1895-01-01) and Svalbard/Jan Mayen seem to be a
+# part of this law since 1925/1930. (From
+# http://www.lovdata.no/all/nl-18940629-001.html ) I have not been
+# able to find if Jan Mayen used a different time zone (e.g. -0100)
+# before 1930. Jan Mayen has only been "inhabitated" since 1921 by
+# Norwegian meteorologists and maybe used the same time as Norway ever
+# since 1921.  Svalbard (Arctic/Longyearbyen) has been inhabited since
+# before 1895, and therefore probably changed the local time somewhere
+# between 1895 and 1925 (inclusive).
+
+# From Paul Eggert (2001-05-01):
+#
+# Actually, Jan Mayen was never occupied by Germany during World War II,
+# so it must have diverged from Oslo time during the war, as Oslo was
+# keeping Berlin time.
+#
+# <http://home.no.net/janmayen/history.htm> says that the meteorologists
+# burned down their station in 1940 and left the island, but returned in
+# 1941 with a small Norwegian garrison and continued operations despite
+# frequent air ttacks from Germans.  In 1943 the Americans established a
+# radiolocating station on the island, called "Atlantic City".  Possibly
+# the UTC offset changed during the war, but I think it unlikely that
+# Jan Mayen used German daylight-saving rules.
+#
+# Svalbard is more complicated, as it was raided in August 1941 by an
+# Allied party that evacuated the civilian population to England (says
+# <http://www.bartleby.com/65/sv/Svalbard.html>).  The Svalbard FAQ
+# <http://www.svalbard.com/SvalbardFAQ.html> says that the Germans were
+# expelled on 1942-05-14.  However, small parties of Germans did return,
+# and according to Wilhelm Dege's book "War North of 80" (1954)
+# <http://www.ucalgary.ca/UofC/departments/UP/1-55238/1-55238-110-2.html>
+# the German armed forces at the Svalbard weather station code-named
+# Haudegen did not surrender to the Allies until September 1945.
+#
+# All these events predate our cutoff date of 1970.  Unless we can
+# come up with more definitive info about the timekeeping during the
+# war years it's probably best just do do the following for now:
+Link	Europe/Oslo	Arctic/Longyearbyen
+Link	Europe/Oslo	Atlantic/Jan_Mayen
+
+# Poland
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Poland	1918	1919	-	Sep	16	2:00s	0	-
+Rule	Poland	1919	only	-	Apr	15	2:00s	1:00	S
+# Whitman gives 1944 Nov 30; go with Shanks.
+Rule	Poland	1944	only	-	Oct	 4	2:00	0	-
+# For 1944-1948 Whitman gives the previous day; go with Shanks.
+Rule	Poland	1945	only	-	Apr	29	0:00	1:00	S
+Rule	Poland	1945	only	-	Nov	 1	0:00	0	-
+# For 1946 on the source is Kazimierz Borkowski,
+# Torun Center for Astronomy, Dept. of Radio Astronomy, Nicolaus Copernicus U.,
+# <http://www.astro.uni.torun.pl/~kb/Artykuly/U-PA/Czas2.htm#tth_tAb1>
+# Thanks to Przemyslaw Augustyniak (2005-05-28) for this reference.
+# He also gives these further references:
+# Mon Pol nr 13, poz 162 (1995) <http://www.abc.com.pl/serwis/mp/1995/0162.htm>
+# Druk nr 2180 (2003) <http://www.senat.gov.pl/k5/dok/sejm/053/2180.pdf>
+Rule	Poland	1946	only	-	Apr	14	0:00s	1:00	S
+Rule	Poland	1946	only	-	Oct	 7	2:00s	0	-
+Rule	Poland	1947	only	-	May	 4	2:00s	1:00	S
+Rule	Poland	1947	1949	-	Oct	Sun>=1	2:00s	0	-
+Rule	Poland	1948	only	-	Apr	18	2:00s	1:00	S
+Rule	Poland	1949	only	-	Apr	10	2:00s	1:00	S
+Rule	Poland	1957	only	-	Jun	 2	1:00s	1:00	S
+Rule	Poland	1957	1958	-	Sep	lastSun	1:00s	0	-
+Rule	Poland	1958	only	-	Mar	30	1:00s	1:00	S
+Rule	Poland	1959	only	-	May	31	1:00s	1:00	S
+Rule	Poland	1959	1961	-	Oct	Sun>=1	1:00s	0	-
+Rule	Poland	1960	only	-	Apr	 3	1:00s	1:00	S
+Rule	Poland	1961	1964	-	May	lastSun	1:00s	1:00	S
+Rule	Poland	1962	1964	-	Sep	lastSun	1:00s	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Warsaw	1:24:00 -	LMT	1880
+			1:24:00	-	WMT	1915 Aug  5   # Warsaw Mean Time
+			1:00	C-Eur	CE%sT	1918 Sep 16 3:00
+			2:00	Poland	EE%sT	1922 Jun
+			1:00	Poland	CE%sT	1940 Jun 23 2:00
+			1:00	C-Eur	CE%sT	1944 Oct
+			1:00	Poland	CE%sT	1977
+			1:00	W-Eur	CE%sT	1988
+			1:00	EU	CE%sT
+
+# Portugal
+#
+# From Rui Pedro Salgueiro (1992-11-12):
+# Portugal has recently (September, 27) changed timezone
+# (from WET to MET or CET) to harmonize with EEC.
+#
+# Martin Bruckmann (1996-02-29) reports via Peter Ilieve
+# that Portugal is reverting to 0:00 by not moving its clocks this spring.
+# The new Prime Minister was fed up with getting up in the dark in the winter.
+#
+# From Paul Eggert (1996-11-12):
+# IATA SSIM (1991-09) reports several 1991-09 and 1992-09 transitions
+# at 02:00u, not 01:00u.  Assume that these are typos.
+# IATA SSIM (1991/1992) reports that the Azores were at -1:00.
+# IATA SSIM (1993-02) says +0:00; later issues (through 1996-09) say -1:00.
+# Guess that the Azores changed to EU rules in 1992 (since that's when Portugal
+# harmonized with the EU), and that they stayed +0:00 that winter.
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+# DSH writes that despite Decree 1,469 (1915), the change to the clocks was not
+# done every year, depending on what Spain did, because of railroad schedules.
+# Go with Shanks.
+Rule	Port	1916	only	-	Jun	17	23:00	1:00	S
+# Whitman gives 1916 Oct 31; go with Shanks.
+Rule	Port	1916	only	-	Nov	 1	 1:00	0	-
+Rule	Port	1917	only	-	Feb	28	23:00s	1:00	S
+Rule	Port	1917	1921	-	Oct	14	23:00s	0	-
+Rule	Port	1918	only	-	Mar	 1	23:00s	1:00	S
+Rule	Port	1919	only	-	Feb	28	23:00s	1:00	S
+Rule	Port	1920	only	-	Feb	29	23:00s	1:00	S
+Rule	Port	1921	only	-	Feb	28	23:00s	1:00	S
+Rule	Port	1924	only	-	Apr	16	23:00s	1:00	S
+Rule	Port	1924	only	-	Oct	14	23:00s	0	-
+Rule	Port	1926	only	-	Apr	17	23:00s	1:00	S
+Rule	Port	1926	1929	-	Oct	Sat>=1	23:00s	0	-
+Rule	Port	1927	only	-	Apr	 9	23:00s	1:00	S
+Rule	Port	1928	only	-	Apr	14	23:00s	1:00	S
+Rule	Port	1929	only	-	Apr	20	23:00s	1:00	S
+Rule	Port	1931	only	-	Apr	18	23:00s	1:00	S
+# Whitman gives 1931 Oct 8; go with Shanks.
+Rule	Port	1931	1932	-	Oct	Sat>=1	23:00s	0	-
+Rule	Port	1932	only	-	Apr	 2	23:00s	1:00	S
+# Shanks gives 1934 Apr 4; go with Whitman.
+Rule	Port	1934	only	-	Apr	 7	23:00s	1:00	S
+# Whitman gives 1934 Oct 5; go with Shanks.
+Rule	Port	1934	1938	-	Oct	Sat>=1	23:00s	0	-
+# Shanks gives 1935 Apr 30; go with Whitman.
+Rule	Port	1935	only	-	Mar	30	23:00s	1:00	S
+Rule	Port	1936	only	-	Apr	18	23:00s	1:00	S
+# Whitman gives 1937 Apr 2; go with Shanks.
+Rule	Port	1937	only	-	Apr	 3	23:00s	1:00	S
+Rule	Port	1938	only	-	Mar	26	23:00s	1:00	S
+Rule	Port	1939	only	-	Apr	15	23:00s	1:00	S
+# Whitman gives 1939 Oct 7; go with Shanks.
+Rule	Port	1939	only	-	Nov	18	23:00s	0	-
+Rule	Port	1940	only	-	Feb	24	23:00s	1:00	S
+# Shanks gives 1940 Oct 7; go with Whitman.
+Rule	Port	1940	1941	-	Oct	 5	23:00s	0	-
+Rule	Port	1941	only	-	Apr	 5	23:00s	1:00	S
+Rule	Port	1942	1945	-	Mar	Sat>=8	23:00s	1:00	S
+Rule	Port	1942	only	-	Apr	25	22:00s	2:00	M # Midsummer
+Rule	Port	1942	only	-	Aug	15	22:00s	1:00	S
+Rule	Port	1942	1945	-	Oct	Sat>=24	23:00s	0	-
+Rule	Port	1943	only	-	Apr	17	22:00s	2:00	M
+Rule	Port	1943	1945	-	Aug	Sat>=25	22:00s	1:00	S
+Rule	Port	1944	1945	-	Apr	Sat>=21	22:00s	2:00	M
+Rule	Port	1946	only	-	Apr	Sat>=1	23:00s	1:00	S
+Rule	Port	1946	only	-	Oct	Sat>=1	23:00s	0	-
+Rule	Port	1947	1949	-	Apr	Sun>=1	 2:00s	1:00	S
+Rule	Port	1947	1949	-	Oct	Sun>=1	 2:00s	0	-
+# Shanks says DST was observed in 1950; go with Whitman.
+# Whitman gives Oct lastSun for 1952 on; go with Shanks.
+Rule	Port	1951	1965	-	Apr	Sun>=1	 2:00s	1:00	S
+Rule	Port	1951	1965	-	Oct	Sun>=1	 2:00s	0	-
+Rule	Port	1977	only	-	Mar	27	 0:00s	1:00	S
+Rule	Port	1977	only	-	Sep	25	 0:00s	0	-
+Rule	Port	1978	1979	-	Apr	Sun>=1	 0:00s	1:00	S
+Rule	Port	1978	only	-	Oct	 1	 0:00s	0	-
+Rule	Port	1979	1982	-	Sep	lastSun	 1:00s	0	-
+Rule	Port	1980	only	-	Mar	lastSun	 0:00s	1:00	S
+Rule	Port	1981	1982	-	Mar	lastSun	 1:00s	1:00	S
+Rule	Port	1983	only	-	Mar	lastSun	 2:00s	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+# Shanks says that the transition from LMT to WET occurred 1911-05-24;
+# Willett says 1912-01-01.  Go with Willett.
+Zone	Europe/Lisbon	-0:36:32 -	LMT	1884
+			-0:36:32 -	LMT	1912 Jan  1  # Lisbon Mean Time
+			 0:00	Port	WE%sT	1966 Apr  3 2:00
+			 1:00	-	CET	1976 Sep 26 1:00
+			 0:00	Port	WE%sT	1983 Sep 25 1:00s
+			 0:00	W-Eur	WE%sT	1992 Sep 27 1:00s
+			 1:00	EU	CE%sT	1996 Mar 31 1:00u
+			 0:00	EU	WE%sT
+Zone Atlantic/Azores	-1:42:40 -	LMT	1884		# Ponta Delgada
+			-1:54:32 -	HMT	1911 May 24  # Horta Mean Time
+			-2:00	Port	AZO%sT	1966 Apr  3 2:00 # Azores Time
+			-1:00	Port	AZO%sT	1983 Sep 25 1:00s
+			-1:00	W-Eur	AZO%sT	1992 Sep 27 1:00s
+			 0:00	EU	WE%sT	1993 Mar 28 1:00u
+			-1:00	EU	AZO%sT
+Zone Atlantic/Madeira	-1:07:36 -	LMT	1884		# Funchal
+			-1:07:36 -	FMT	1911 May 24  # Funchal Mean Time
+			-1:00	Port	MAD%sT	1966 Apr  3 2:00 # Madeira Time
+			 0:00	Port	WE%sT	1983 Sep 25 1:00s
+			 0:00	EU	WE%sT
+
+# Romania
+#
+# From Paul Eggert (1999-10-07):
+# <a href="http://www.nineoclock.ro/POL/1778pol.html">
+# Nine O'clock</a> (1998-10-23) reports that the switch occurred at
+# 04:00 local time in fall 1998.  For lack of better info,
+# assume that Romania and Moldova switched to EU rules in 1997,
+# the same year as Bulgaria.
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Romania	1932	only	-	May	21	 0:00s	1:00	S
+Rule	Romania	1932	1939	-	Oct	Sun>=1	 0:00s	0	-
+Rule	Romania	1933	1939	-	Apr	Sun>=2	 0:00s	1:00	S
+Rule	Romania	1979	only	-	May	27	 0:00	1:00	S
+Rule	Romania	1979	only	-	Sep	lastSun	 0:00	0	-
+Rule	Romania	1980	only	-	Apr	 5	23:00	1:00	S
+Rule	Romania	1980	only	-	Sep	lastSun	 1:00	0	-
+Rule	Romania	1991	1993	-	Mar	lastSun	 0:00s	1:00	S
+Rule	Romania	1991	1993	-	Sep	lastSun	 0:00s	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Europe/Bucharest	1:44:24 -	LMT	1891 Oct
+			1:44:24	-	BMT	1931 Jul 24	# Bucharest MT
+			2:00	Romania	EE%sT	1981 Mar 29 2:00s
+			2:00	C-Eur	EE%sT	1991
+			2:00	Romania	EE%sT	1994
+			2:00	E-Eur	EE%sT	1997
+			2:00	EU	EE%sT
+
+# Russia
+
+# From Paul Eggert (1999-11-12):
+# Except for Moscow after 1919-07-01, I invented the time zone abbreviations.
+# Moscow time zone abbreviations after 1919-07-01, and Moscow rules after 1991,
+# are from Andrey A. Chernov.  The rest is from Shanks, except we follow
+# Chernov's report that 1992 DST transitions were Sat 23:00, not Sun 02:00s.
+#
+# From Stanislaw A. Kuzikowski (1994-06-29):
+# But now it is some months since Novosibirsk is 3 hours ahead of Moscow!
+# I do not know why they have decided to make this change;
+# as far as I remember it was done exactly during winter->summer switching
+# so we (Novosibirsk) simply did not switch.
+#
+# From Andrey A. Chernov (1996-10-04):
+# `MSK' and `MSD' were born and used initially on Moscow computers with
+# UNIX-like OSes by several developer groups (e.g. Demos group, Kiae group)....
+# The next step was the UUCP network, the Relcom predecessor
+# (used mainly for mail), and MSK/MSD was actively used there.
+#
+# From Chris Carrier (1996-10-30):
+# According to a friend of mine who rode the Trans-Siberian Railroad from
+# Moscow to Irkutsk in 1995, public air and rail transport in Russia ...
+# still follows Moscow time, no matter where in Russia it is located.
+#
+# For Grozny, Chechnya, we have the following story from
+# John Daniszewski, "Scavengers in the Rubble", Los Angeles Times (2001-02-07):
+# News--often false--is spread by word of mouth.  A rumor that it was
+# time to move the clocks back put this whole city out of sync with
+# the rest of Russia for two weeks--even soldiers stationed here began
+# enforcing curfew at the wrong time.
+#
+# From Gwillim Law (2001-06-05):
+# There's considerable evidence that Sakhalin Island used to be in
+# UTC+11, and has changed to UTC+10, in this decade.  I start with the
+# SSIM, which listed Yuzhno-Sakhalinsk in zone RU10 along with Magadan
+# until February 1997, and then in RU9 with Khabarovsk and Vladivostok
+# since September 1997....  Although the Kuril Islands are
+# administratively part of Sakhalin oblast', they appear to have
+# remained on UTC+11 along with Magadan.
+#
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+#
+# Kaliningradskaya oblast'.
+Zone Europe/Kaliningrad	 1:22:00 -	LMT	1893 Apr
+			 1:00	C-Eur	CE%sT	1945
+			 2:00	Poland	CE%sT	1946
+			 3:00	Russia	MSK/MSD	1991 Mar 31 2:00s
+			 2:00	Russia	EE%sT
+#
+# From Oscar van Vlijmen (2001-08-25): [This region consists of]
+# Respublika Adygeya, Arkhangel'skaya oblast', Astrakhanskaya oblast',
+# Belgorodskaya oblast', Bryanskaya oblast', Vladimirskaya oblast',
+# Volgogradskaya oblast', Vologodskaya oblast', Voronezhskaya oblast',
+# Respublika Dagestan, Ivanovskaya oblast', Respublika Ingushetiya,
+# Kabarbino-Balkarskaya Respublika, Respublika Kalmykiya,
+# Kalyzhskaya oblast', Respublika Karachaevo-Cherkessiya,
+# Respublika Kareliya, Kirovskaya oblast', Respublika Komi,
+# Kostromskaya oblast', Krasnodarskij kraj, Kurskaya oblast',
+# Leningradskaya oblast', Lipetskaya oblast', Respublika Marij El,
+# Respublika Mordoviya, Moskva, Moskovskaya oblast',
+# Murmanskaya oblast', Nenetskij avtonomnyj okrug,
+# Nizhegorodskaya oblast', Novgorodskaya oblast', Orlovskaya oblast',
+# Penzenskaya oblast', Pskovskaya oblast', Rostovskaya oblast',
+# Ryazanskaya oblast', Sankt-Peterburg, Saratovskaya oblast',
+# Respublika Severnaya Osetiya, Smolenskaya oblast',
+# Stavropol'skij kraj, Tambovskaya oblast', Respublika Tatarstan,
+# Tverskaya oblast', Tyl'skaya oblast', Ul'yanovskaya oblast',
+# Chechenskaya Respublika, Chuvashskaya oblast',
+# Yaroslavskaya oblast'
+Zone Europe/Moscow	 2:30:20 -	LMT	1880
+			 2:30	-	MMT	1916 Jul  3 # Moscow Mean Time
+			 2:30:48 Russia	%s	1919 Jul  1 2:00
+			 3:00	Russia	MSK/MSD	1922 Oct
+			 2:00	-	EET	1930 Jun 21
+			 3:00	Russia	MSK/MSD	1991 Mar 31 2:00s
+			 2:00	Russia	EE%sT	1992 Jan 19 2:00s
+			 3:00	Russia	MSK/MSD
+#
+# From Oscar van Vlijmen (2001-08-25): [This region consists of]
+# Samarskaya oblast', Udmyrtskaya respublika
+Zone Europe/Samara	 3:20:36 -	LMT	1919 Jul  1 2:00
+			 3:00	-	KUYT	1930 Jun 21 # Kuybyshev
+			 4:00	Russia	KUY%sT	1989 Mar 26 2:00s
+			 3:00	Russia	KUY%sT	1991 Mar 31 2:00s
+			 2:00	Russia	KUY%sT	1991 Sep 29 2:00s
+			 3:00	-	KUYT	1991 Oct 20 3:00
+			 4:00	Russia	SAM%sT	# Samara Time
+#
+# From Oscar van Vlijmen (2001-08-25): [This region consists of]
+# Respublika Bashkortostan, Komi-Permyatskij avtonomnyj okrug,
+# Kurganskaya oblast', Orenburgskaya oblast', Permskaya oblast',
+# Sverdlovskaya oblast', Tyumenskaya oblast',
+# Khanty-Manskijskij avtonomnyj okrug, Chelyabinskaya oblast',
+# Yamalo-Nenetskij avtonomnyj okrug.
+Zone Asia/Yekaterinburg	 4:02:24 -	LMT	1919 Jul 15 4:00
+			 4:00	-	SVET	1930 Jun 21 # Sverdlovsk Time
+			 5:00	Russia	SVE%sT	1991 Mar 31 2:00s
+			 4:00	Russia	SVE%sT	1992 Jan 19 2:00s
+			 5:00	Russia	YEK%sT	# Yekaterinburg Time
+#
+# From Oscar van Vlijmen (2001-08-25): [This region consists of]
+# Respublika Altaj, Altajskij kraj, Omskaya oblast'.
+Zone Asia/Omsk		 4:53:36 -	LMT	1919 Nov 14
+			 5:00	-	OMST	1930 Jun 21 # Omsk TIme
+			 6:00	Russia	OMS%sT	1991 Mar 31 2:00s
+			 5:00	Russia	OMS%sT	1992 Jan 19 2:00s
+			 6:00	Russia	OMS%sT
+#
+# Novosibirskaya oblast'.
+Zone Asia/Novosibirsk	 5:31:40 -	LMT	1919 Dec 14 6:00
+			 6:00	-	NOVT	1930 Jun 21 # Novosibirsk Time
+			 7:00	Russia	NOV%sT	1991 Mar 31 2:00s
+			 6:00	Russia	NOV%sT	1992 Jan 19 2:00s
+			 7:00	Russia	NOV%sT	1993 May 23 # says Shanks
+			 6:00	Russia	NOV%sT
+#
+# From Oscar van Vlijmen (2001-08-25): [This region consists of]
+# Kemerovskaya oblast', Krasnoyarskij kraj,
+# Tajmyrskij (Dolgano-Nenetskij) avtonomnyj okrug, Tomskaya oblast',
+# Respublika Tuva, Respublika Khakasiya, Evenkijskij avtonomnyj okrug.
+Zone Asia/Krasnoyarsk	 6:11:20 -	LMT	1920 Jan  6
+			 6:00	-	KRAT	1930 Jun 21 # Krasnoyarsk Time
+			 7:00	Russia	KRA%sT	1991 Mar 31 2:00s
+			 6:00	Russia	KRA%sT	1992 Jan 19 2:00s
+			 7:00	Russia	KRA%sT
+#
+# From Oscar van Vlijmen (2001-08-25): [This region consists of]
+# Respublika Buryatiya, Irkutskaya oblast',
+# Ust'-Ordynskij Buryatskij avtonomnyj okrug.
+Zone Asia/Irkutsk	 6:57:20 -	LMT	1880
+			 6:57:20 -	IMT	1920 Jan 25 # Irkutsk Mean Time
+			 7:00	-	IRKT	1930 Jun 21 # Irkutsk Time
+			 8:00	Russia	IRK%sT	1991 Mar 31 2:00s
+			 7:00	Russia	IRK%sT	1992 Jan 19 2:00s
+			 8:00	Russia	IRK%sT
+#
+# From Oscar van Vlijmen (2003-10-18): [This region consists of]
+# Aginskij Buryatskij avtonomnyj okrug, Amurskaya oblast',
+# [parts of] Respublika Sakha (Yakutiya), Chitinskaya oblast'.
+# The Sakha districts are: Aldanskij, Amginskij, Anabarskij,
+# Bulunskij, Verkhnekolymskij, Verkhnevilyujskij, Vilyujskij, Gornyj,
+# Zhiganskij, Kobyajskij, Lenskij, Megino-Kangalasskij, Mirninskij,
+# Namskij, Nyurbinskij, Olenekskij, Olekminskij, Srednekolymskij,
+# Suntarskij, Tattinskij, Ust'-Aldanskij, Khangalasskij,
+# Churapchinskij, Eveno-Bytantajskij.
+Zone Asia/Yakutsk	 8:38:40 -	LMT	1919 Dec 15
+			 8:00	-	YAKT	1930 Jun 21 # Yakutsk Time
+			 9:00	Russia	YAK%sT	1991 Mar 31 2:00s
+			 8:00	Russia	YAK%sT	1992 Jan 19 2:00s
+			 9:00	Russia	YAK%sT
+#
+# From Oscar van Vlijmen (2003-10-18): [This region consists of]
+# Evrejskaya avtonomnaya oblast', Khabarovskij kraj, Primorskij kraj,
+# [parts of] Respublika Sakha (Yakutiya).
+# The Sakha districts are: Verkhoyanskij, Tomponskij, Ust'-Majskij,
+# Ust'-Yanskij.
+Zone Asia/Vladivostok	 8:47:44 -	LMT	1922 Nov 15
+			 9:00	-	VLAT	1930 Jun 21 # Vladivostok Time
+			10:00	Russia	VLA%sT	1991 Mar 31 2:00s
+			 9:00	Russia	VLA%sST	1992 Jan 19 2:00s
+			10:00	Russia	VLA%sT
+#
+# Sakhalinskaya oblast'.
+# The Zone name should be Yuzhno-Sakhalinsk, but that's too long.
+Zone Asia/Sakhalin	 9:30:48 -	LMT	1905 Aug 23
+			 9:00	-	CJT	1938
+			 9:00	-	JST	1945 Aug 25
+			11:00	Russia	SAK%sT	1991 Mar 31 2:00s # Sakhalin T.
+			10:00	Russia	SAK%sT	1992 Jan 19 2:00s
+			11:00	Russia	SAK%sT	1997 Mar lastSun 2:00s
+			10:00	Russia	SAK%sT
+#
+# From Oscar van Vlijmen (2003-10-18): [This region consists of]
+# Magadanskaya oblast', Respublika Sakha (Yakutiya).
+# Probably also: Kuril Islands.
+# The Sakha districts are: Abyjskij, Allaikhovskij, Momskij,
+# Nizhnekolymskij, Ojmyakonskij.
+Zone Asia/Magadan	10:03:12 -	LMT	1924 May  2
+			10:00	-	MAGT	1930 Jun 21 # Magadan Time
+			11:00	Russia	MAG%sT	1991 Mar 31 2:00s
+			10:00	Russia	MAG%sT	1992 Jan 19 2:00s
+			11:00	Russia	MAG%sT
+#
+# From Oscar van Vlijmen (2001-08-25): [This region consists of]
+# Kamchatskaya oblast', Koryakskij avtonomnyj okrug.
+#
+# The Zone name should be Asia/Petropavlovsk-Kamchatski, but that's too long.
+Zone Asia/Kamchatka	10:34:36 -	LMT	1922 Nov 10
+			11:00	-	PETT	1930 Jun 21 # P-K Time
+			12:00	Russia	PET%sT	1991 Mar 31 2:00s
+			11:00	Russia	PET%sT	1992 Jan 19 2:00s
+			12:00	Russia	PET%sT
+#
+# Chukotskij avtonomnyj okrug
+Zone Asia/Anadyr	11:49:56 -	LMT	1924 May  2
+			12:00	-	ANAT	1930 Jun 21 # Anadyr Time
+			13:00	Russia	ANA%sT	1982 Apr  1 0:00s
+			12:00	Russia	ANA%sT	1991 Mar 31 2:00s
+			11:00	Russia	ANA%sT	1992 Jan 19 2:00s
+			12:00	Russia	ANA%sT
+
+# Serbia and Montenegro
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Belgrade	1:22:00	-	LMT	1884
+			1:00	-	CET	1941 Apr 18 23:00
+			1:00	C-Eur	CE%sT	1945 May  8  2:00s
+			1:00	1:00	CEST	1945 Sep 16  2:00s
+# Metod Kozelj reports that the legal date of
+# transition to EU rules was 1982-11-27, for all of Yugoslavia at the time.
+# Shanks doesn't give as much detail, so go with Kozelj.
+			1:00	-	CET	1982 Nov 27
+			1:00	EU	CE%sT
+Link Europe/Belgrade Europe/Ljubljana	# Slovenia
+Link Europe/Belgrade Europe/Sarajevo	# Bosnia and Herzegovina
+Link Europe/Belgrade Europe/Skopje	# Macedonia
+Link Europe/Belgrade Europe/Zagreb	# Croatia
+
+# Slovakia
+Link Europe/Prague Europe/Bratislava
+
+# Slovenia
+# see Serbia and Montenegro
+
+# Spain
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+# For 1917-1919 Whitman gives Apr Sat>=1 - Oct Sat>=1; go with Shanks.
+Rule	Spain	1917	only	-	May	 5	23:00s	1:00	S
+Rule	Spain	1917	1919	-	Oct	 6	23:00s	0	-
+Rule	Spain	1918	only	-	Apr	15	23:00s	1:00	S
+Rule	Spain	1919	only	-	Apr	 5	23:00s	1:00	S
+# Whitman gives 1921 Feb 28 - Oct 14; go with Shanks.
+Rule	Spain	1924	only	-	Apr	16	23:00s	1:00	S
+# Whitman gives 1924 Oct 14; go with Shanks.
+Rule	Spain	1924	only	-	Oct	 4	23:00s	0	-
+Rule	Spain	1926	only	-	Apr	17	23:00s	1:00	S
+# Whitman says no DST in 1929; go with Shanks.
+Rule	Spain	1926	1929	-	Oct	Sat>=1	23:00s	0	-
+Rule	Spain	1927	only	-	Apr	 9	23:00s	1:00	S
+Rule	Spain	1928	only	-	Apr	14	23:00s	1:00	S
+Rule	Spain	1929	only	-	Apr	20	23:00s	1:00	S
+# Whitman gives 1937 Jun 16, 1938 Apr 16, 1940 Apr 13; go with Shanks.
+Rule	Spain	1937	only	-	May	22	23:00s	1:00	S
+Rule	Spain	1937	1939	-	Oct	Sat>=1	23:00s	0	-
+Rule	Spain	1938	only	-	Mar	22	23:00s	1:00	S
+Rule	Spain	1939	only	-	Apr	15	23:00s	1:00	S
+Rule	Spain	1940	only	-	Mar	16	23:00s	1:00	S
+# Whitman says no DST 1942-1945; go with Shanks.
+Rule	Spain	1942	only	-	May	 2	22:00s	2:00	M # Midsummer
+Rule	Spain	1942	only	-	Sep	 1	22:00s	1:00	S
+Rule	Spain	1943	1946	-	Apr	Sat>=13	22:00s	2:00	M
+Rule	Spain	1943	only	-	Oct	 3	22:00s	1:00	S
+Rule	Spain	1944	only	-	Oct	10	22:00s	1:00	S
+Rule	Spain	1945	only	-	Sep	30	 1:00	1:00	S
+Rule	Spain	1946	only	-	Sep	30	 0:00	0	-
+Rule	Spain	1949	only	-	Apr	30	23:00	1:00	S
+Rule	Spain	1949	only	-	Sep	30	 1:00	0	-
+Rule	Spain	1974	1975	-	Apr	Sat>=13	23:00	1:00	S
+Rule	Spain	1974	1975	-	Oct	Sun>=1	 1:00	0	-
+Rule	Spain	1976	only	-	Mar	27	23:00	1:00	S
+Rule	Spain	1976	1977	-	Sep	lastSun	 1:00	0	-
+Rule	Spain	1977	1978	-	Apr	 2	23:00	1:00	S
+Rule	Spain	1978	only	-	Oct	 1	 1:00	0	-
+# The following rules are copied from Morocco from 1967 through 1978.
+Rule SpainAfrica 1967	only	-	Jun	 3	12:00	1:00	S
+Rule SpainAfrica 1967	only	-	Oct	 1	 0:00	0	-
+Rule SpainAfrica 1974	only	-	Jun	24	 0:00	1:00	S
+Rule SpainAfrica 1974	only	-	Sep	 1	 0:00	0	-
+Rule SpainAfrica 1976	1977	-	May	 1	 0:00	1:00	S
+Rule SpainAfrica 1976	only	-	Aug	 1	 0:00	0	-
+Rule SpainAfrica 1977	only	-	Sep	28	 0:00	0	-
+Rule SpainAfrica 1978	only	-	Jun	 1	 0:00	1:00	S
+Rule SpainAfrica 1978	only	-	Aug	 4	 0:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Madrid	-0:14:44 -	LMT	1901
+			 0:00	Spain	WE%sT	1946 Sep 30
+			 1:00	Spain	CE%sT	1979
+			 1:00	EU	CE%sT
+Zone	Africa/Ceuta	-0:21:16 -	LMT	1901
+			 0:00	-	WET	1918 May  6 23:00
+			 0:00	1:00	WEST	1918 Oct  7 23:00
+			 0:00	-	WET	1924
+			 0:00	Spain	WE%sT	1929
+			 0:00 SpainAfrica WE%sT 1984 Mar 16
+			 1:00	-	CET	1986
+			 1:00	EU	CE%sT
+Zone	Atlantic/Canary	-1:01:36 -	LMT	1922 Mar # Las Palmas de Gran C.
+			-1:00	-	CANT	1946 Sep 30 1:00 # Canaries Time
+			 0:00	-	WET	1980 Apr  6 0:00s
+			 0:00	1:00	WEST	1980 Sep 28 0:00s
+			 0:00	EU	WE%sT
+# IATA SSIM (1996-09) says the Canaries switch at 2:00u, not 1:00u.
+# Ignore this for now, as the Canaries are part of the EU.
+
+# Sweden
+
+# From Ivan Nilsson (2001-04-13), superseding Shanks:
+#
+# The law "Svensk forfattningssamling 1878, no 14" about standard time in 1879:
+# From the beginning of 1879 (that is 01-01 00:00) the time for all
+# places in the country is "the mean solar time for the meridian at
+# three degrees, or twelve minutes of time, to the west of the
+# meridian of the Observatory of Stockholm".  The law is dated 1878-05-31.
+#
+# The observatory at that time had the meridian 18 degrees 03' 30"
+# eastern longitude = 01:12:14 in time.  Less 12 minutes gives the
+# national standard time as 01:00:14 ahead of GMT....
+#
+# About the beginning of CET in Sweden. The lawtext ("Svensk
+# forfattningssamling 1899, no 44") states, that "from the beginning
+# of 1900... ... the same as the mean solar time for the meridian at
+# the distance of one hour of time from the meridian of the English
+# observatory at Greenwich, or at 12 minutes 14 seconds to the west
+# from the meridian of the Observatory of Stockholm". The law is dated
+# 1899-06-16.  In short: At 1900-01-01 00:00:00 the new standard time
+# in Sweden is 01:00:00 ahead of GMT.
+#
+# 1916: The lawtext ("Svensk forfattningssamling 1916, no 124") states
+# that "1916-05-15 is considered to begin one hour earlier". It is
+# pretty obvious that at 05-14 23:00 the clocks are set to 05-15 00:00....
+# Further the law says, that "1916-09-30 is considered to end one hour later".
+#
+# The laws regulating [DST] are available on the site of the Swedish
+# Parliament beginning with 1985 - the laws regulating 1980/1984 are
+# not available on the site (to my knowledge they are only available
+# in Swedish): <http://www.riksdagen.se/english/work/sfst.asp> (type
+# "sommartid" without the quotes in the field "Fritext" and then click
+# the Sok-button).
+#
+# (2001-05-13):
+#
+# I have now found a newspaper stating that at 1916-10-01 01:00
+# summertime the church-clocks etc were set back one hour to show
+# 1916-10-01 00:00 standard time.  The article also reports that some
+# people thought the switch to standard time would take place already
+# at 1916-10-01 00:00 summer time, but they had to wait for another
+# hour before the event took place.
+#
+# Source: The newspaper "Dagens Nyheter", 1916-10-01, page 7 upper left.
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Europe/Stockholm	1:12:12 -	LMT	1879 Jan  1
+			1:00:14	-	SET	1900 Jan  1	# Swedish Time
+			1:00	-	CET	1916 May 14 23:00
+			1:00	1:00	CEST	1916 Oct  1 01:00
+			1:00	-	CET	1980
+			1:00	EU	CE%sT
+
+# Switzerland
+# From Howse:
+# By the end of the 18th century clocks and watches became commonplace
+# and their performance improved enormously.  Communities began to keep
+# mean time in preference to apparent time -- Geneva from 1780 ....
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+# From Whitman (who writes ``Midnight?''):
+Rule	Swiss	1940	only	-	Nov	 2	0:00	1:00	S
+Rule	Swiss	1940	only	-	Dec	31	0:00	0	-
+# From Shanks:
+Rule	Swiss	1941	1942	-	May	Sun>=1	2:00	1:00	S
+Rule	Swiss	1941	1942	-	Oct	Sun>=1	0:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Zurich	0:34:08 -	LMT	1848 Sep 12
+			0:29:44	-	BMT	1894 Jun # Bern Mean Time
+			1:00	Swiss	CE%sT	1981
+			1:00	EU	CE%sT
+
+# Turkey
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Turkey	1916	only	-	May	 1	0:00	1:00	S
+Rule	Turkey	1916	only	-	Oct	 1	0:00	0	-
+Rule	Turkey	1920	only	-	Mar	28	0:00	1:00	S
+Rule	Turkey	1920	only	-	Oct	25	0:00	0	-
+Rule	Turkey	1921	only	-	Apr	 3	0:00	1:00	S
+Rule	Turkey	1921	only	-	Oct	 3	0:00	0	-
+Rule	Turkey	1922	only	-	Mar	26	0:00	1:00	S
+Rule	Turkey	1922	only	-	Oct	 8	0:00	0	-
+# Whitman gives 1923 Apr 28 - Sep 16 and no DST in 1924-1925; go with Shanks.
+Rule	Turkey	1924	only	-	May	13	0:00	1:00	S
+Rule	Turkey	1924	1925	-	Oct	 1	0:00	0	-
+Rule	Turkey	1925	only	-	May	 1	0:00	1:00	S
+Rule	Turkey	1940	only	-	Jun	30	0:00	1:00	S
+Rule	Turkey	1940	only	-	Oct	 5	0:00	0	-
+Rule	Turkey	1940	only	-	Dec	 1	0:00	1:00	S
+Rule	Turkey	1941	only	-	Sep	21	0:00	0	-
+Rule	Turkey	1942	only	-	Apr	 1	0:00	1:00	S
+# Whitman omits the next two transition and gives 1945 Oct 1; go with Shanks.
+Rule	Turkey	1942	only	-	Nov	 1	0:00	0	-
+Rule	Turkey	1945	only	-	Apr	 2	0:00	1:00	S
+Rule	Turkey	1945	only	-	Oct	 8	0:00	0	-
+Rule	Turkey	1946	only	-	Jun	 1	0:00	1:00	S
+Rule	Turkey	1946	only	-	Oct	 1	0:00	0	-
+Rule	Turkey	1947	1948	-	Apr	Sun>=16	0:00	1:00	S
+Rule	Turkey	1947	1950	-	Oct	Sun>=2	0:00	0	-
+Rule	Turkey	1949	only	-	Apr	10	0:00	1:00	S
+Rule	Turkey	1950	only	-	Apr	19	0:00	1:00	S
+Rule	Turkey	1951	only	-	Apr	22	0:00	1:00	S
+Rule	Turkey	1951	only	-	Oct	 8	0:00	0	-
+Rule	Turkey	1962	only	-	Jul	15	0:00	1:00	S
+Rule	Turkey	1962	only	-	Oct	 8	0:00	0	-
+Rule	Turkey	1964	only	-	May	15	0:00	1:00	S
+Rule	Turkey	1964	only	-	Oct	 1	0:00	0	-
+Rule	Turkey	1970	1972	-	May	Sun>=2	0:00	1:00	S
+Rule	Turkey	1970	1972	-	Oct	Sun>=2	0:00	0	-
+Rule	Turkey	1973	only	-	Jun	 3	1:00	1:00	S
+Rule	Turkey	1973	only	-	Nov	 4	3:00	0	-
+Rule	Turkey	1974	only	-	Mar	31	2:00	1:00	S
+Rule	Turkey	1974	only	-	Nov	 3	5:00	0	-
+Rule	Turkey	1975	only	-	Mar	30	0:00	1:00	S
+Rule	Turkey	1975	1976	-	Oct	lastSun	0:00	0	-
+Rule	Turkey	1976	only	-	Jun	 1	0:00	1:00	S
+Rule	Turkey	1977	1978	-	Apr	Sun>=1	0:00	1:00	S
+Rule	Turkey	1977	only	-	Oct	16	0:00	0	-
+Rule	Turkey	1979	1980	-	Apr	Sun>=1	3:00	1:00	S
+Rule	Turkey	1979	1982	-	Oct	Mon>=11	0:00	0	-
+Rule	Turkey	1981	1982	-	Mar	lastSun	3:00	1:00	S
+Rule	Turkey	1983	only	-	Jul	31	0:00	1:00	S
+Rule	Turkey	1983	only	-	Oct	 2	0:00	0	-
+Rule	Turkey	1985	only	-	Apr	20	0:00	1:00	S
+Rule	Turkey	1985	only	-	Sep	28	0:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	Europe/Istanbul	1:55:52 -	LMT	1880
+			1:56:56	-	IMT	1910 Oct # Istanbul Mean Time?
+			2:00	Turkey	EE%sT	1978 Oct 15
+			3:00	Turkey	TR%sT	1985 Apr 20 # Turkey Time
+			2:00	Turkey	EE%sT	1986
+			2:00	C-Eur	EE%sT	1991
+			2:00	EU	EE%sT
+Link	Europe/Istanbul	Asia/Istanbul	# Istanbul is in both continents.
+
+# Ukraine
+#
+# From Igor Karpov, who works for the Ukranian Ministry of Justice,
+# via Garrett Wollman (2003-01-27):
+# BTW, I've found the official document on this matter. It's goverment
+# regulations number 509, May 13, 1996. In my poor translation it says:
+# "Time in Ukraine is set to second timezone (Kiev time). Each last Sunday
+# of March at 3am the time is changing to 4am and each last Sunday of
+# October the time at 4am is changing to 3am"
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+# Most of Ukraine since 1970 has been like Kiev.
+Zone Europe/Kiev	2:02:04 -	LMT	1880
+			2:02:04	-	KMT	1924 May  2 # Kiev Mean Time
+			2:00	-	EET	1930 Jun 21
+			3:00	-	MSK	1941 Sep 20
+			1:00	C-Eur	CE%sT	1943 Nov  6
+			3:00	Russia	MSK/MSD	1990
+			3:00	-	MSK	1990 Jul  1 2:00
+			2:00	-	EET	1992
+			2:00	E-Eur	EE%sT	1995
+			2:00	EU	EE%sT
+# Ruthenia used CET 1990/1991.
+Zone Europe/Uzhgorod	1:29:12 -	LMT	1890 Oct
+			1:00	-	CET	1940
+			1:00	C-Eur	CE%sT	1944 Oct
+			1:00	1:00	CEST	1944 Oct 26
+			1:00	-	CET	1945 Jun 29
+			3:00	Russia	MSK/MSD	1990
+			3:00	-	MSK	1990 Jul  1 2:00
+			1:00	-	CET	1991 Mar 31 3:00
+			2:00	-	EET	1992
+			2:00	E-Eur	EE%sT	1995
+			2:00	EU	EE%sT
+# Zaporozh'ye and eastern Lugansk oblasts observed DST 1990/1991.
+# Zaporozh'ye has an apostrophe, but Posix file names can't have apostrophes.
+Zone Europe/Zaporozhye	2:20:40 -	LMT	1880
+			2:20	-	CUT	1924 May  2 # Central Ukraine T
+			2:00	-	EET	1930 Jun 21
+			3:00	-	MSK	1941 Aug 25
+			1:00	C-Eur	CE%sT	1943 Oct 25
+			3:00	Russia	MSK/MSD	1991 Mar 31 2:00
+			2:00	E-Eur	EE%sT	1995
+			2:00	EU	EE%sT
+# Central Crimea used Moscow time 1994/1997.
+Zone Europe/Simferopol	2:16:24 -	LMT	1880
+			2:16	-	SMT	1924 May  2 # Simferopol Mean T
+			2:00	-	EET	1930 Jun 21
+			3:00	-	MSK	1941 Nov
+			1:00	C-Eur	CE%sT	1944 Apr 13
+			3:00	Russia	MSK/MSD	1990
+			3:00	-	MSK	1990 Jul  1 2:00
+			2:00	-	EET	1992
+# From Paul Eggert (1999-11-12):
+# The _Economist_ (1994-05-28, p 45) reports that central Crimea switched
+# from Kiev to Moscow time sometime after the January 1994 elections.
+# Shanks says ``date of change uncertain'', but implies that it happened
+# sometime between the 1994 DST switches.  For now, guess it changed in May.
+			2:00	E-Eur	EE%sT	1994 May
+# From IATA SSIM (1994/1997), which also says that Kerch is still like Kiev.
+			3:00	E-Eur	MSK/MSD	1996 Mar 31 3:00s
+			3:00	1:00	MSD	1996 Oct 27 3:00s
+# IATA SSIM (1997-09) says Crimea switched to EET/EEST.
+# Assume it happened in March by not changing the clocks.
+			3:00	Russia	MSK/MSD	1997
+			3:00	-	MSK	1997 Mar lastSun 1:00u
+			2:00	EU	EE%sT
+
+###############################################################################
+
+# One source shows that Bulgaria, Cyprus, Finland, and Greece observe DST from
+# the last Sunday in March to the last Sunday in September in 1986.
+# The source shows Romania changing a day later than everybody else.
+#
+# According to Bernard Sieloff's source, Poland is in the MET time zone but
+# uses the WE DST rules.  The Western USSR uses EET+1 and ME DST rules.
+# Bernard Sieloff's source claims Romania switches on the same day, but at
+# 00:00 standard time (i.e., 01:00 DST).  It also claims that Turkey
+# switches on the same day, but switches on at 01:00 standard time
+# and off at 00:00 standard time (i.e., 01:00 DST)
+
+# ...
+# Date: Wed, 28 Jan 87 16:56:27 -0100
+# From: Tom Hofmann
+# ...
+#
+# ...the European time rules are...standardized since 1981, when
+# most European coun[tr]ies started DST.  Before that year, only
+# a few countries (UK, France, Italy) had DST, each according
+# to own national rules.  In 1981, however, DST started on
+# 'Apr firstSun', and not on 'Mar lastSun' as in the following
+# years...
+# But also since 1981 there are some more national exceptions
+# than listed in 'europe': Switzerland, for example, joined DST
+# one year later, Denmark ended DST on 'Oct 1' instead of 'Sep
+# lastSun' in 1981---I don't know how they handle now.
+#
+# Finally, DST ist always from 'Apr 1' to 'Oct 1' in the
+# Soviet Union (as far as I know).
+#
+# Tom Hofmann, Scientific Computer Center, CIBA-GEIGY AG,
+# 4002 Basle, Switzerland
+# ...
+
+# ...
+# Date: Wed, 4 Feb 87 22:35:22 +0100
+# From: Dik T. Winter
+# ...
+#
+# The information from Tom Hofmann is (as far as I know) not entirely correct.
+# After a request from chongo at amdahl I tried to retrieve all information
+# about DST in Europe.  I was able to find all from about 1969.
+#
+# ...standardization on DST in Europe started in about 1977 with switches on
+# first Sunday in April and last Sunday in September...
+# In 1981 UK joined Europe insofar that
+# the starting day for both shifted to last Sunday in March.  And from 1982
+# the whole of Europe used DST, with switch dates April 1 and October 1 in
+# the Sov[i]et Union.  In 1985 the SU reverted to standard Europe[a]n switch
+# dates...
+#
+# It should also be remembered that time-zones are not constants; e.g.
+# Portugal switched in 1976 from MET (or CET) to WET with DST...
+# Note also that though there were rules for switch dates not
+# all countries abided to these dates, and many individual deviations
+# occurred, though not since 1982 I believe.  Another note: it is always
+# assumed that DST is 1 hour ahead of normal time, this need not be the
+# case; at least in the Netherlands there have been times when DST was 2 hours
+# in advance of normal time.
+#
+# ...
+# dik t. winter, cwi, amsterdam, nederland
+# ...
+
+# From Bob Devine (1988-01-28):
+# ...
+# Greece: Last Sunday in April to last Sunday in September (iffy on dates).
+# Since 1978.  Change at midnight.
+# ...
+# Monaco: has same DST as France.
+# ...
diff --git a/JodaTime/src/java/org/joda/time/tz/src/northamerica b/JodaTime/src/java/org/joda/time/tz/src/northamerica
index 9f9b98b09..13a2ec2fa 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/northamerica
+++ b/JodaTime/src/java/org/joda/time/tz/src/northamerica
@@ -1,2165 +1,2255 @@
-# @(#)northamerica	7.87
-# <pre>
-
-# also includes Central America and the Caribbean
-
-# This data is by no means authoritative; if you think you know better,
-# go ahead and edit the file (and please send any changes to
-# tz@elsie.nci.nih.gov for general use in the future).
-
-# From Paul Eggert (1999-03-22):
-# A reliable and entertaining source about time zones is
-# Derek Howse, Greenwich time and longitude, Philip Wilson Publishers (1997).
-
-###############################################################################
-
-# United States
-
-# From Paul Eggert (1999-03-31):
-# Howse writes (pp 121-125) that time zones were invented by
-# Professor Charles Ferdinand Dowd (1825-1904),
-# Principal of Temple Grove Ladies' Seminary (Saratoga Springs, NY).
-# His pamphlet ``A System of National Time for Railroads'' (1870)
-# was the result of his proposals at the Convention of Railroad Trunk Lines
-# in New York City (1869-10).  His 1870 proposal was based on Washington, DC,
-# but in 1872-05 he moved the proposed origin to Greenwich.
-# His proposal was adopted by the railroads on 1883-11-18 at 12:00,
-# and the most of the country soon followed suit.
-
-# From Paul Eggert (2005-04-16):
-# That 1883 transition occurred at 12:00 new time, not at 12:00 old time.
-# See p 46 of David Prerau, Seize the daylight, Thunder's Mouth Press (2005).
-
-# From Paul Eggert (1995-12-19):
-# A good source for time zone historical data in the US is
-# Thomas G. Shanks, The American Atlas (5th edition),
-# San Diego: ACS Publications, Inc. (1991).
-# Make sure you have the errata sheet; the book is somewhat useless without it.
-# It is the source for most of the pre-1991 US and Puerto Rico entries below.
-
-# From Paul Eggert (2001-03-06):
-# Daylight Saving Time was first suggested as a joke by Benjamin Franklin
-# in his whimsical essay ``An Economical Project for Diminishing the Cost
-# of Light'' published in the Journal de Paris (1784-04-26).
-# Not everyone is happy with the results:
-#
-#	I don't really care how time is reckoned so long as there is some
-#	agreement about it, but I object to being told that I am saving
-#	daylight when my reason tells me that I am doing nothing of the kind.
-#	I even object to the implication that I am wasting something
-#	valuable if I stay in bed after the sun has risen.  As an admirer
-#	of moonlight I resent the bossy insistence of those who want to
-#	reduce my time for enjoying it.  At the back of the Daylight Saving
-#	scheme I detect the bony, blue-fingered hand of Puritanism, eager
-#	to push people into bed earlier, and get them up earlier, to make
-#	them healthy, wealthy and wise in spite of themselves.
-#
-#	-- Robertson Davies, The diary of Samuel Marchbanks,
-#	   Clarke, Irwin (1947), XIX, Sunday
-#
-# For more about the first ten years of DST in the United States, see
-# Robert Garland's <a href="http://www.clpgh.org/exhibit/dst.html">
-# Ten years of daylight saving from the Pittsburgh standpoint
-# (Carnegie Library of Pittsburgh, 1927)</a>.
-#
-# Shanks says that DST was called "War Time" in the US in 1918 and 1919.
-# However, DST was imposed by the Standard Time Act of 1918, which
-# was the first nationwide legal time standard, and apparently
-# time was just called "Standard Time" or "Daylight Saving Time".
-
-# From Arthur David Olson:
-# US Daylight Saving Time ended on the last Sunday of *October* in 1974.
-# See, for example, the front page of the Saturday, 1974-10-26
-# and Sunday, 1974-10-27 editions of the Washington Post.
-
-# From Arthur David Olson:
-# Before the Uniform Time Act of 1966 took effect in 1967, observance of
-# Daylight Saving Time in the US was by local option, except during wartime.
-
-# From Arthur David Olson (2000-09-25):
-# Last night I heard part of a rebroadcast of a 1945 Arch Oboler radio drama.
-# In the introduction, Oboler spoke of "Eastern Peace Time."
-# An AltaVista search turned up
-# <a href="http://rowayton.org/rhs/hstaug45.html">:
-# "When the time is announced over the radio now, it is 'Eastern Peace
-# Time' instead of the old familiar 'Eastern War Time.'  Peace is wonderful."
-# </a> (August 1945) by way of confirmation.
-
-# From Joseph Gallant citing
-# George H. Douglas, _The Early Days of Radio Broadcasting_ (1987):
-# At 7 P.M. (Eastern War Time) [on 1945-08-14], the networks were set
-# to switch to London for Attlee's address, but the American people
-# never got to hear his speech live. According to one press account,
-# CBS' Bob Trout was first to announce the word of Japan's surrender,
-# but a few seconds later, NBC, ABC and Mutual also flashed the word
-# of surrender, all of whom interrupting the bells of Big Ben in
-# London which were to precede Mr. Attlee's speech.
-
-# From Paul Eggert (2003-02-09): It was Robert St John, not Bob Trout.  From
-# Myrna Oliver's obituary of St John on page B16 of today's Los Angeles Times:
-#
-# ... a war-weary U.S. clung to radios, awaiting word of Japan's surrender.
-# Any announcement from Asia would reach St. John's New York newsroom on a
-# wire service teletype machine, which had prescribed signals for major news.
-# Associated Press, for example, would ring five bells before spewing out
-# typed copy of an important story, and 10 bells for news "of transcendental
-# importance."
-#
-# On Aug. 14, stalling while talking steadily into the NBC networks' open
-# microphone, St. John heard five bells and waited only to hear a sixth bell,
-# before announcing confidently: "Ladies and gentlemen, World War II is over.
-# The Japanese have agreed to our surrender terms."
-#
-# He had scored a 20-second scoop on other broadcasters.
-
-# From Arthur David Olson (2005-08-22):
-# Paul has been careful to use the "US" rules only in those locations
-# that are part of the United States; this reflects the real scope of
-# U.S. government action.  So even though the "US" rules have changed
-# in the latest release, other countries won't be affected.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	US	1918	1919	-	Mar	lastSun	2:00	1:00	D
-Rule	US	1918	1919	-	Oct	lastSun	2:00	0	S
-Rule	US	1942	only	-	Feb	9	2:00	1:00	W # War
-Rule	US	1945	only	-	Aug	14	23:00u	1:00	P # Peace
-Rule	US	1945	only	-	Sep	30	2:00	0	S
-Rule	US	1967	2006	-	Oct	lastSun	2:00	0	S
-Rule	US	1967	1973	-	Apr	lastSun	2:00	1:00	D
-Rule	US	1974	only	-	Jan	6	2:00	1:00	D
-Rule	US	1975	only	-	Feb	23	2:00	1:00	D
-Rule	US	1976	1986	-	Apr	lastSun	2:00	1:00	D
-Rule	US	1987	2006	-	Apr	Sun>=1	2:00	1:00	D
-Rule	US	2007	max	-	Mar	Sun>=8	2:00	1:00	D
-Rule	US	2007	max	-	Nov	Sun>=1	2:00	0	S
-
-# From Arthur David Olson, 2005-12-19
-# We generate the files specified below to guard against old files with
-# obsolete information being left in the time zone binary directory.
-# We limit the list to names that have appeared in previous versions of
-# this time zone package.
-# We do these as separate Zones rather than as Links to avoid problems if
-# a particular place changes whether it observes DST.
-# We put these specifications here in the northamerica file both to
-# increase the chances that they'll actually get compiled and to
-# avoid the need to duplicate the US rules in another file.
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	EST		 -5:00	-	EST
-Zone	MST		 -7:00	-	MST
-Zone	HST		-10:00	-	HST
-Zone	EST5EDT		 -5:00	US	E%sT
-Zone	CST6CDT		 -6:00	US	C%sT
-Zone	MST7MDT		 -7:00	US	M%sT
-Zone	PST8PDT		 -8:00	US	P%sT
-
-# From Bob Devine (1988-01-28):
-# ...Alaska (and Hawaii) had the timezone names changed in 1967.
-#    old			 new
-#    Pacific Standard Time(PST)  -same-
-#    Yukon Standard Time(YST)    -same-
-#    Central Alaska S.T. (CAT)   Alaska-Hawaii St[an]dard Time (AHST)
-#    Nome Standard Time (NT)     Bering Standard Time (BST)
-#
-# ...Alaska's timezone lines were redrawn in 1983 to give only 2 tz.
-#    The YST zone now covers nearly all of the state, AHST just part
-#    of the Aleutian islands.   No DST.
-
-# From Paul Eggert (1995-12-19):
-# The tables below use `NST', not `NT', for Nome Standard Time.
-# I invented `CAWT' for Central Alaska War Time.
-
-# From U. S. Naval Observatory (1989-01-19):
-# USA  EASTERN       5 H  BEHIND UTC    NEW YORK, WASHINGTON
-# USA  EASTERN       4 H  BEHIND UTC    APR 3 - OCT 30
-# USA  CENTRAL       6 H  BEHIND UTC    CHICAGO, HOUSTON
-# USA  CENTRAL       5 H  BEHIND UTC    APR 3 - OCT 30
-# USA  MOUNTAIN      7 H  BEHIND UTC    DENVER
-# USA  MOUNTAIN      6 H  BEHIND UTC    APR 3 - OCT 30
-# USA  PACIFIC       8 H  BEHIND UTC    L.A., SAN FRANCISCO
-# USA  PACIFIC       7 H  BEHIND UTC    APR 3 - OCT 30
-# USA  ALASKA STD    9 H  BEHIND UTC    MOST OF ALASKA     (AKST)
-# USA  ALASKA STD    8 H  BEHIND UTC    APR 3 - OCT 30 (AKDT)
-# USA  ALEUTIAN     10 H  BEHIND UTC    ISLANDS WEST OF 170W
-# USA  - " -         9 H  BEHIND UTC    APR 3 - OCT 30
-# USA  HAWAII       10 H  BEHIND UTC
-# USA  BERING       11 H  BEHIND UTC    SAMOA, MIDWAY
-
-# From Arthur David Olson (1989-01-21):
-# The above dates are for 1988.
-# Note the "AKST" and "AKDT" abbreviations, the claim that there's
-# no DST in Samoa, and the claim that there is DST in Alaska and the
-# Aleutians.
-
-# From Arthur David Olson (1988-02-13):
-# Legal standard time zone names, from United States Code (1982 Edition and
-# Supplement III), Title 15, Chapter 6, Section 260 and forward.  First, names
-# up to 1967-04-01 (when most provisions of the Uniform Time Act of 1966
-# took effect), as explained in sections 263 and 261:
-#	(none)
-#	United States standard eastern time
-#	United States standard mountain time
-#	United States standard central time
-#	United States standard Pacific time
-#	(none)
-#	United States standard Alaska time
-#	(none)
-# Next, names from 1967-04-01 until 1983-11-30 (the date for
-# public law 98-181):
-#	Atlantic standard time
-#	eastern standard time
-#	central standard time
-#	mountain standard time
-#	Pacific standard time
-#	Yukon standard time
-#	Alaska-Hawaii standard time
-#	Bering standard time
-# And after 1983-11-30:
-#	Atlantic standard time
-#	eastern standard time
-#	central standard time
-#	mountain standard time
-#	Pacific standard time
-#	Alaska standard time
-#	Hawaii-Aleutian standard time
-#	Samoa standard time
-# The law doesn't give abbreviations.
-#
-# From Paul Eggert (2000-01-08), following a heads-up from Rives McDow:
-# Public law 106-564 (2000-12-23) introduced the abbreviation
-# "Chamorro Standard Time" for time in Guam and the Northern Marianas.
-# See the file "australasia".
- 
-# From Arthur David Olson, 2005-08-09
-# The following was signed into law on 2005-08-08.
-#
-# H.R. 6, Energy Policy Act of 2005, SEC. 110. DAYLIGHT SAVINGS.
-#   (a) Amendment- Section 3(a) of the Uniform Time Act of 1966 (15
-#   U.S.C. 260a(a)) is amended--
-#     (1) by striking `first Sunday of April' and inserting `second
-#     Sunday of March'; and
-#     (2) by striking `last Sunday of October' and inserting `first
-#     Sunday of November'.
-#   (b) Effective Date- Subsection (a) shall take effect 1 year after the
-#   date of enactment of this Act or March 1, 2007, whichever is later.
-#   (c) Report to Congress- Not later than 9 months after the effective
-#   date stated in subsection (b), the Secretary shall report to Congress
-#   on the impact of this section on energy consumption in the United
-#   States.
-#   (d) Right to Revert- Congress retains the right to revert the
-#   Daylight Saving Time back to the 2005 time schedules once the
-#   Department study is complete.
-
-# US eastern time, represented by New York
-
-# Connecticut, Delaware, District of Columbia, most of Florida,
-# Georgia, southeast Indiana (Dearborn and Ohio counties), eastern Kentucky
-# (except America/Kentucky/Louisville below), Maine, Maryland, Massachusetts,
-# New Hampshire, New Jersey, New York, North Carolina, Ohio,
-# Pennsylvania, Rhode Island, South Carolina, eastern Tennessee,
-# Vermont, Virginia, West Virginia
-
-# From Dave Cantor (2004-11-02):
-# Early this summer I had the occasion to visit the Mount Washington
-# Observatory weather station atop (of course!) Mount Washington [, NH]....
-# One of the staff members said that the station was on Eastern Standard Time
-# and didn't change their clocks for Daylight Saving ... so that their
-# reports will always have times which are 5 hours behind UTC.
-
-# From Paul Eggert (2005-08-26):
-# According to today's Huntsville Times
-# <http://www.al.com/news/huntsvilletimes/index.ssf?/base/news/1125047783228320.xml&coll=1>
-# a few towns on Alabama's "eastern border with Georgia, such as Phenix City
-# in Russell County, Lanett in Chambers County and some towns in Lee County,
-# set their watches and clocks on Eastern time."  It quotes H.H. "Bubba"
-# Roberts, city administrator in Phenix City. as saying "We are in the Central
-# time zone, but we do go by the Eastern time zone because so many people work
-# in Columbus." 
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
-Rule	NYC	1920	only	-	Mar	lastSun	2:00	1:00	D
-Rule	NYC	1920	only	-	Oct	lastSun	2:00	0	S
-Rule	NYC	1921	1966	-	Apr	lastSun	2:00	1:00	D
-Rule	NYC	1921	1954	-	Sep	lastSun	2:00	0	S
-Rule	NYC	1955	1966	-	Oct	lastSun	2:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/New_York	-4:56:02 -	LMT	1883 Nov 18 12:03:58
-			-5:00	US	E%sT	1920
-			-5:00	NYC	E%sT	1942
-			-5:00	US	E%sT	1946
-			-5:00	NYC	E%sT	1967
-			-5:00	US	E%sT
-
-# US central time, represented by Chicago
-
-# Alabama, Arkansas, Florida panhandle (Bay, Calhoun, Escambia,
-# Gulf, Holmes, Jackson, Okaloosa, Santa Rosa, Walton, and
-# Washington counties), Illinois, western Indiana
-# (Gibson, Jasper, Lake, LaPorte, Newton, Porter, Posey, Spencer,
-# Vanderburgh, and Warrick counties), Iowa, most of Kansas, western
-# Kentucky, Louisiana, Minnesota, Mississippi, Missouri, eastern
-# Nebraska, eastern North Dakota, Oklahoma, eastern South Dakota,
-# western Tennessee, most of Texas, Wisconsin
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
-Rule	Chicago	1920	only	-	Jun	13	2:00	1:00	D
-Rule	Chicago	1920	1921	-	Oct	lastSun	2:00	0	S
-Rule	Chicago	1921	only	-	Mar	lastSun	2:00	1:00	D
-Rule	Chicago	1922	1966	-	Apr	lastSun	2:00	1:00	D
-Rule	Chicago	1922	1954	-	Sep	lastSun	2:00	0	S
-Rule	Chicago	1955	1966	-	Oct	lastSun	2:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Chicago	-5:50:36 -	LMT	1883 Nov 18 12:09:24
-			-6:00	US	C%sT	1920
-			-6:00	Chicago	C%sT	1936 Mar  1 2:00
-			-5:00	-	EST	1936 Nov 15 2:00
-			-6:00	Chicago	C%sT	1942
-			-6:00	US	C%sT	1946
-			-6:00	Chicago	C%sT	1967
-			-6:00	US	C%sT
-# Oliver County, ND switched from mountain to central time on 1992-10-25.
-Zone America/North_Dakota/Center -6:45:12 - LMT	1883 Nov 18 12:14:48
-			-7:00	US	M%sT	1992 Oct 25 02:00
-			-6:00	US	C%sT
-
-# US mountain time, represented by Denver
-#
-# Colorado, far western Kansas, Montana, western
-# Nebraska, Nevada border (Jackpot, Owyhee, and Mountain City),
-# New Mexico, southwestern North Dakota, far eastern Oregon,
-# western South Dakota, far western Texas (El Paso County, Hudspeth County,
-# and Pine Springs and Nickel Creek in Culberson County), Utah, Wyoming
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
-Rule	Denver	1920	1921	-	Mar	lastSun	2:00	1:00	D
-Rule	Denver	1920	only	-	Oct	lastSun	2:00	0	S
-Rule	Denver	1921	only	-	May	22	2:00	0	S
-Rule	Denver	1965	1966	-	Apr	lastSun	2:00	1:00	D
-Rule	Denver	1965	1966	-	Oct	lastSun	2:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Denver	-6:59:56 -	LMT	1883 Nov 18 12:00:04
-			-7:00	US	M%sT	1920
-			-7:00	Denver	M%sT	1942
-			-7:00	US	M%sT	1946
-			-7:00	Denver	M%sT	1967
-			-7:00	US	M%sT
-
-# US Pacific time, represented by Los Angeles
-#
-# California, northern Idaho (Benewah, Bonner, Boundary, Clearwater,
-# Idaho, Kootenai, Latah, Lewis, Nez Perce, and Shoshone counties),
-# most of Nevada, most of Oregon, and Washington
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
-Rule	CA	1948	only	-	Mar	14	2:00	1:00	D
-Rule	CA	1949	only	-	Jan	 1	2:00	0	S
-Rule	CA	1950	1966	-	Apr	lastSun	2:00	1:00	D
-Rule	CA	1950	1961	-	Sep	lastSun	2:00	0	S
-Rule	CA	1962	1966	-	Oct	lastSun	2:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Los_Angeles -7:52:58 -	LMT	1883 Nov 18 12:07:02
-			-8:00	US	P%sT	1946
-			-8:00	CA	P%sT	1967
-			-8:00	US	P%sT
-
-# Alaska
-# AK%sT is the modern abbreviation for -9:00 per USNO.
-#
-# From Paul Eggert (2001-05-30):
-# Howse writes that Alaska switched from the Julian to the Gregorian calendar,
-# and from east-of-GMT to west-of-GMT days, when the US bought it from Russia.
-# This was on 1867-10-18, a Friday; the previous day was 1867-10-06 Julian,
-# also a Friday.  Include only the time zone part of this transition,
-# ignoring the switch from Julian to Gregorian, since we can't represent
-# the Julian calendar.
-#
-# As far as we know, none of the exact locations mentioned below were
-# permanently inhabited in 1867 by anyone using either calendar.
-# (Yakutat was colonized by the Russians in 1799, but the settlement
-# was destroyed in 1805 by a Yakutat-kon war party.)  However, there
-# were nearby inhabitants in some cases and for our purposes perhaps
-# it's best to simply use the official transition.
-#
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Juneau	 15:02:19 -	LMT	1867 Oct 18
-			 -8:57:41 -	LMT	1900 Aug 20 12:00
-			 -8:00	-	PST	1942
-			 -8:00	US	P%sT	1946
-			 -8:00	-	PST	1969
-			 -8:00	US	P%sT	1983 Oct 30 2:00
-			 -9:00	US	Y%sT	1983 Nov 30
-			 -9:00	US	AK%sT
-Zone America/Yakutat	 14:41:05 -	LMT	1867 Oct 18
-			 -9:18:55 -	LMT	1900 Aug 20 12:00
-			 -9:00	-	YST	1942
-			 -9:00	US	Y%sT	1946
-			 -9:00	-	YST	1969
-			 -9:00	US	Y%sT	1983 Nov 30
-			 -9:00	US	AK%sT
-Zone America/Anchorage	 14:00:24 -	LMT	1867 Oct 18
-			 -9:59:36 -	LMT	1900 Aug 20 12:00
-			-10:00	-	CAT	1942
-			-10:00	US	CAT/CAWT 1946
-			-10:00	-	CAT	1967 Apr
-			-10:00	-	AHST	1969
-			-10:00	US	AH%sT	1983 Oct 30 2:00
-			 -9:00	US	Y%sT	1983 Nov 30
-			 -9:00	US	AK%sT
-Zone America/Nome	 12:58:21 -	LMT	1867 Oct 18
-			-11:01:38 -	LMT	1900 Aug 20 12:00
-			-11:00	-	NST	1942
-			-11:00	US	N%sT	1946
-			-11:00	-	NST	1967 Apr
-			-11:00	-	BST	1969
-			-11:00	US	B%sT	1983 Oct 30 2:00
-			 -9:00	US	Y%sT	1983 Nov 30
-			 -9:00	US	AK%sT
-Zone America/Adak	 12:13:21 -	LMT	1867 Oct 18
-			-11:46:38 -	LMT	1900 Aug 20 12:00
-			-11:00	-	NST	1942
-			-11:00	US	N%sT	1946
-			-11:00	-	NST	1967 Apr
-			-11:00	-	BST	1969
-			-11:00	US	B%sT	1983 Oct 30 2:00
-			-10:00	US	AH%sT	1983 Nov 30
-			-10:00	US	HA%sT
-# The following switches don't quite make our 1970 cutoff.
-#
-# Shanks writes that part of southwest Alaska (e.g. Aniak)
-# switched from -11:00 to -10:00 on 1968-09-22 at 02:00,
-# and another part (e.g. Akiak) made the same switch five weeks later.
-#
-# From David Flater (2004-11-09):
-# In e-mail, 2004-11-02, Ray Hudson, historian/liaison to the Unalaska
-# Historic Preservation Commission, provided this information, which
-# suggests that Unalaska deviated from statutory time from early 1967
-# possibly until 1983:
-#
-#  Minutes of the Unalaska City Council Meeting, January 10, 1967:
-#  "Except for St. Paul and Akutan, Unalaska is the only important
-#  location not on Alaska Standard Time.  The following resolution was
-#  made by William Robinson and seconded by Henry Swanson:  Be it
-#  resolved that the City of Unalaska hereby goes to Alaska Standard
-#  Time as of midnight Friday, January 13, 1967 (1 A.M. Saturday,
-#  January 14, Alaska Standard Time.)  This resolution was passed with
-#  three votes for and one against."
-
-# Hawaii
-#
-# From Arthur David Olson:
-# And then there's Hawaii.
-# DST was observed for one day in 1933;
-# standard time was changed by half an hour in 1947;
-# it's always standard as of 1986.
-#
-# From Paul Eggert:
-# Shanks says the 1933 experiment lasted for three weeks.  Go with Shanks.
-#
-Zone Pacific/Honolulu	-10:31:26 -	LMT	1900 Jan  1 12:00
-			-10:30	-	HST	1933 Apr 30 2:00
-			-10:30	1:00	HDT	1933 May 21 2:00
-			-10:30	US	H%sT	1947 Jun  8 2:00
-			-10:00	-	HST
-
-# Now we turn to US areas that have diverged from the consensus since 1970.
-
-# Arizona mostly uses MST.
-
-# From Paul Eggert (2002-10-20):
-#
-# The information in the rest of this paragraph is derived from the
-# <a href="http://www.dlapr.lib.az.us/links/daylight.htm">
-# Daylight Saving Time web page (2002-01-23)</a> maintained by the
-# Arizona State Library, Archives and Public Records.
-# Between 1944-01-01 and 1944-04-01 the State of Arizona used standard
-# time, but by federal law railroads, airlines, bus lines, military
-# personnel, and some engaged in interstate commerce continued to
-# observe war (i.e., daylight saving) time.  The 1944-03-17 Phoenix
-# Gazette says that was the date the law changed, and that 04-01 was
-# the date the state's clocks would change.  In 1945 the State of
-# Arizona used standard time all year, again with exceptions only as
-# mandated by federal law.  Arizona observed DST in 1967, but Arizona
-# Laws 1968, ch. 183 (effective 1968-03-21) repealed DST.
-#
-# Shanks says the 1944 experiment came to an end on 1944-03-17.
-# Go with the Arizona State Library instead.
-
-Zone America/Phoenix	-7:28:18 -	LMT	1883 Nov 18 11:31:42
-			-7:00	US	M%sT	1944 Jan  1 00:01
-			-7:00	-	MST	1944 Apr  1 00:01
-			-7:00	US	M%sT	1944 Oct  1 00:01
-			-7:00	-	MST	1967
-			-7:00	US	M%sT	1968 Mar 21
-			-7:00	-	MST
-# From Arthur David Olson (1988-02-13):
-# A writer from the Inter Tribal Council of Arizona, Inc.,
-# notes in private correspondence dated 1987-12-28 that "Presently, only the
-# Navajo Nation participates in the Daylight Saving Time policy, due to its
-# large size and location in three states."  (The "only" means that other
-# tribal nations don't use DST.)
-
-Link America/Denver America/Shiprock
-
-# Southern Idaho (Ada, Adams, Bannock, Bear Lake, Bingham, Blaine,
-# Boise, Bonneville, Butte, Camas, Canyon, Caribou, Cassia, Clark,
-# Custer, Elmore, Franklin, Fremont, Gem, Gooding, Jefferson, Jerome,
-# Lemhi, Lincoln, Madison, Minidoka, Oneida, Owyhee, Payette, Power,
-# Teton, Twin Falls, Valley, Washington counties) and eastern Oregon
-# switched four weeks late in 1974.
-#
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Boise	-7:44:49 -	LMT	1883 Nov 18 12:15:11
-			-8:00	US	P%sT	1923 May 13 2:00
-			-7:00	US	M%sT	1974
-			-7:00	-	MST	1974 Feb  3 2:00
-			-7:00	US	M%sT
-
-# Indiana
-#
-# For a map of Indiana's time zone regions, see:
-# <a href="http://www.mccsc.edu/time.html">
-# What time is it in Indiana?
-# </a> (2005-05-03)
-#
-# From Paul Eggert (2005-08-22):
-# Since 1970, most of Indiana has been like America/Indiana/Indianapolis,
-# with the following exceptions:
-#
-# - Gibson, Jasper, Lake, LaPorte, Newton, Porter, Posey, Spencer,
-#   Vandenburgh, and Warrick counties have been like America/Chicago.
-#
-# - Dearborn and Ohio counties have been like America/New_York.
-#
-# - Clark, Floyd, and Harrison counties have been like
-#   America/Kentucky/Louisville.
-#
-# - Crawford, Starke, and Switzerland counties have their own time zone
-#   histories as noted below.
-#
-# Shanks partitions Indiana into 345 regions, each with its own time history,
-# and writes ``Even newspaper reports present contradictory information.''
-# Fortunately, most of the complexity occurred before our cutoff date of 1970.
-#
-# Other than Indianapolis, the Indiana place names are so nondescript
-# that they would be ambiguous if we left them at the `America' level.
-# So we reluctantly put them all in a subdirectory `America/Indiana'.
-
-# From Paul Eggert (2005-08-16):
-# http://www.mccsc.edu/time.html says that Indiana will use DST starting 2006,
-# and that many counties may switch either to Central or to Eastern time.
-# The county-by-county decisions have not been made yet, so for now assume
-# that no counties will switch: this assumption is most likely wrong,
-# but it's the best we can do for now.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
-Rule Indianapolis 1941	only	-	Jun	22	2:00	1:00	D
-Rule Indianapolis 1941	1954	-	Sep	lastSun	2:00	0	S
-Rule Indianapolis 1946	1954	-	Apr	lastSun	2:00	1:00	D
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Indiana/Indianapolis -5:44:38 - LMT 1883 Nov 18 12:15:22
-			-6:00	US	C%sT	1920
-			-6:00 Indianapolis C%sT	1942
-			-6:00	US	C%sT	1946
-			-6:00 Indianapolis C%sT	1955 Apr 24 2:00
-			-5:00	-	EST	1957 Sep 29 2:00
-			-6:00	-	CST	1958 Apr 27 2:00
-			-5:00	-	EST	1969
-			-5:00	US	E%sT	1971
-			-5:00	-	EST	2006
-			-5:00	US	E%sT
-#
-# Part of Crawford County, Indiana, last observed DST in 1975,
-# and left its clocks alone in 1974.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
-Rule	Marengo	1951	only	-	Apr	lastSun	2:00	1:00	D
-Rule	Marengo	1951	only	-	Sep	lastSun	2:00	0	S
-Rule	Marengo	1954	1960	-	Apr	lastSun	2:00	1:00	D
-Rule	Marengo	1954	1960	-	Sep	lastSun	2:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Indiana/Marengo -5:45:23 -	LMT	1883 Nov 18 12:14:37
-			-6:00	US	C%sT	1951
-			-6:00	Marengo	C%sT	1961 Apr 30 2:00
-			-5:00	-	EST	1969
-			-5:00	US	E%sT	1974 Jan  6 2:00
-			-6:00	1:00	CDT	1974 Oct 27 2:00
-			-5:00	US	E%sT	1976
-			-5:00	-	EST	2006
-			-5:00	US	E%sT
-#
-# Starke County, Indiana
-# From Arthur David Olson (1991-10-28):
-# An article on page A3 of the Sunday, 1991-10-27 Washington Post
-# notes that Starke County switched from Central time to Eastern time as of
-# 1991-10-27.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
-Rule	Starke	1947	1961	-	Apr	lastSun	2:00	1:00	D
-Rule	Starke	1947	1954	-	Sep	lastSun	2:00	0	S
-Rule	Starke	1955	1956	-	Oct	lastSun	2:00	0	S
-Rule	Starke	1957	1958	-	Sep	lastSun	2:00	0	S
-Rule	Starke	1959	1961	-	Oct	lastSun	2:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Indiana/Knox -5:46:30 -	LMT	1883 Nov 18 12:13:30
-			-6:00	US	C%sT	1947
-			-6:00	Starke	C%sT	1962 Apr 29 2:00
-			-5:00	-	EST	1963 Oct 27 2:00
-			-6:00	US	C%sT	1991 Oct 27 2:00
-			-5:00	-	EST	2006
-			-5:00	US	E%sT
-#
-# Switzerland County, Indiana, last observed DST in 1972.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Indiana/Vevay -5:40:16 -	LMT	1883 Nov 18 12:19:44
-			-6:00	US	C%sT	1954 Apr 25 2:00
-			-5:00	-	EST	1969
-			-5:00	US	E%sT	1973
-			-5:00	-	EST	2006
-			-5:00	US	E%sT
-
-# Part of Kentucky left its clocks alone in 1974.
-# This also includes Clark, Floyd, and Harrison counties in Indiana.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
-Rule Louisville	1921	only	-	May	1	2:00	1:00	D
-Rule Louisville	1921	only	-	Sep	1	2:00	0	S
-Rule Louisville	1941	1961	-	Apr	lastSun	2:00	1:00	D
-Rule Louisville	1941	only	-	Sep	lastSun	2:00	0	S
-Rule Louisville	1946	only	-	Jun	2	2:00	0	S
-Rule Louisville	1950	1955	-	Sep	lastSun	2:00	0	S
-Rule Louisville	1956	1960	-	Oct	lastSun	2:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Kentucky/Louisville -5:43:02 -	LMT	1883 Nov 18 12:16:58
-			-6:00	US	C%sT	1921
-			-6:00 Louisville C%sT	1942
-			-6:00	US	C%sT	1946
-			-6:00 Louisville C%sT	1961 Jul 23 2:00
-			-5:00	-	EST	1968
-			-5:00	US	E%sT	1974 Jan  6 2:00
-			-6:00	1:00	CDT	1974 Oct 27 2:00
-			-5:00	US	E%sT
-#
-# Wayne, Clinton, and Russell Counties, Kentucky
-#
-# From
-# <a href="http://www.lake-cumberland.com/life/archive/news990129time.shtml">
-# Lake Cumberland LIFE
-# </a> (1999-01-29) via WKYM-101.7:
-# Clinton County has joined Wayne County in asking the DoT to change from
-# the Central to the Eastern time zone....  The Wayne County government made
-# the same request in December.  And while Russell County officials have not
-# taken action, the majority of respondents to a poll conducted there in
-# August indicated they would like to change to "fast time" also.
-# The three Lake Cumberland counties are the farthest east of any U.S.
-# location in the Central time zone.
-#
-# From Rich Wales (2000-08-29):
-# After prolonged debate, and despite continuing deep differences of opinion,
-# Wayne County (central Kentucky) is switching from Central (-0600) to Eastern
-# (-0500) time.  They won't "fall back" this year.  See Sara Shipley,
-# The difference an hour makes, Nando Times (2000-08-29 15:33 -0400).
-#
-# From Paul Eggert (2001-07-16):
-# The final rule was published in the
-# <a href="http://frwebgate.access.gpo.gov/cgi-bin/getdoc.cgi?dbname=2000_register&docid=fr17au00-22">
-# Federal Register 65, 160 (2000-08-17), page 50154-50158.
-# </a>
-#
-Zone America/Kentucky/Monticello -5:39:24 - LMT	1883 Nov 18 12:20:36
-			-6:00	US	C%sT	1946
-			-6:00	-	CST	1968
-			-6:00	US	C%sT	2000 Oct 29  2:00
-			-5:00	US	E%sT
-
-
-# From Rives McDow (2000-08-30):
-# Here ... are all the changes in the US since 1985.
-# Kearny County, KS (put all of county on central;
-#	previously split between MST and CST) ... 1990-10
-# Starke County, IN (from CST to EST) ... 1991-10
-# Oliver County, ND (from MST to CST) ... 1992-10
-# West Wendover, NV (from PST TO MST) ... 1999-10
-# Wayne County, KY (from CST to EST) ... 2000-10
-#
-# From Paul Eggert (2001-07-17):
-# We don't know where the line used to be within Kearny County, KS,
-# so omit that change for now.
-# See America/Indiana/Knox for the Starke County, IN change.
-# See America/North_Dakota/Center for the Oliver County, ND change.
-# West Wendover, NV officially switched from Pacific to mountain time on
-# 1999-10-31.  See the
-# <a href="http://frwebgate.access.gpo.gov/cgi-bin/getdoc.cgi?dbname=1999_register&docid=fr21oc99-15">
-# Federal Register 64, 203 (1999-10-21), page 56705-56707.
-# </a>
-# However, the Federal Register says that West Wendover already operated
-# on mountain time, and the rule merely made this official;
-# hence a separate tz entry is not needed.
-
-# Michigan
-#
-# From Bob Devine (1988-01-28):
-# Michigan didn't observe DST from 1968 to 1973.
-#
-# From Paul Eggert (1999-03-31):
-# Shanks writes that Michigan started using standard time on 1885-09-18,
-# but Howse writes (pp 124-125, referring to Popular Astronomy, 1901-01)
-# that Detroit kept
-#
-#	local time until 1900 when the City Council decreed that clocks should
-#	be put back twenty-eight minutes to Central Standard Time.  Half the
-#	city obeyed, half refused.  After considerable debate, the decision
-#	was rescinded and the city reverted to Sun time.  A derisive offer to
-#	erect a sundial in front of the city hall was referred to the
-#	Committee on Sewers.  Then, in 1905, Central time was adopted
-#	by city vote.
-#
-# This story is too entertaining to be false, so go with Howse over Shanks.
-#
-# From Paul Eggert (2001-03-06):
-# Garland (1927) writes ``Cleveland and Detroit advanced their clocks
-# one hour in 1914.''  This change is not in Shanks.  We have no more
-# info, so omit this for now.
-#
-# Most of Michigan observed DST from 1973 on, but was a bit late in 1975.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
-Rule	Detroit	1948	only	-	Apr	lastSun	2:00	1:00	D
-Rule	Detroit	1948	only	-	Sep	lastSun	2:00	0	S
-Rule	Detroit	1967	only	-	Jun	14	2:00	1:00	D
-Rule	Detroit	1967	only	-	Oct	lastSun	2:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Detroit	-5:32:11 -	LMT	1905
-			-6:00	-	CST	1915 May 15 2:00
-			-5:00	-	EST	1942
-			-5:00	US	E%sT	1946
-			-5:00	Detroit	E%sT	1973
-			-5:00	US	E%sT	1975
-			-5:00	-	EST	1975 Apr 27 2:00
-			-5:00	US	E%sT
-#
-# The Michigan border with Wisconsin switched from EST to CST/CDT in 1973.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
-Rule Menominee	1946	only	-	Apr	lastSun	2:00	1:00	D
-Rule Menominee	1946	only	-	Sep	lastSun	2:00	0	S
-Rule Menominee	1966	only	-	Apr	lastSun	2:00	1:00	D
-Rule Menominee	1966	only	-	Oct	lastSun	2:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Menominee	-5:50:27 -	LMT	1885 Sep 18 12:00
-			-6:00	US	C%sT	1946
-			-6:00 Menominee	C%sT	1969 Apr 27 2:00
-			-5:00	-	EST	1973 Apr 29 2:00
-			-6:00	US	C%sT
-
-# Navassa
-# administered by the US Fish and Wildlife Service
-# claimed by US under the provisions of the 1856 Guano Islands Act
-# also claimed by Haiti
-# occupied 1857/1900 by the Navassa Phosphate Co
-# US lighthouse 1917/1996-09
-# currently uninhabited
-# see Mark Fineman, ``An Isle Rich in Guano and Discord'',
-# _Los Angeles Times_ (1998-11-10), A1, A10; it cites
-# Jimmy Skaggs, _The Great Guano Rush_ (1994).
-
-################################################################################
-
-
-# From Paul Eggert (1999-10-29):
-# A good source for time zone historical data outside the US is
-# Thomas G. Shanks, The International Atlas (5th edition),
-# San Diego: ACS Publications, Inc. (1999).
-#
-# Gwillim Law writes that a good source
-# for recent time zone data is the International Air Transport
-# Association's Standard Schedules Information Manual (IATA SSIM),
-# published semiannually.  Law sent in several helpful summaries
-# of the IATA's data after 1990.
-#
-# Except where otherwise noted, Shanks is the source for entries through 1990,
-# and IATA SSIM is the source for entries after 1990.
-#
-# Other sources occasionally used include:
-#
-#	Edward W. Whitman, World Time Differences,
-#	Whitman Publishing Co, 2 Niagara Av, Ealing, London (undated),
-#	which I found in the UCLA library.
-#
-#	<a href="http://www.pettswoodvillage.co.uk/Daylight_Savings_William_Willett.pdf">
-#	William Willett, The Waste of Daylight, 19th edition
-#	</a> (1914-03)
-#
-# See the `europe' file for Greenland.
-
-# Canada
-
-# From Alain LaBont<e'> (1994-11-14):
-# I post here the time zone abbreviations standardized in Canada
-# for both English and French in the CAN/CSA-Z234.4-89 standard....
-#
-#	UTC	Standard time	Daylight savings time
-#	offset	French	English	French	English
-#	-2:30	-	-	HAT	NDT
-#	-3	-	-	HAA	ADT
-#	-3:30	HNT	NST	-	-
-#	-4	HNA	AST	HAE	EDT
-#	-5	HNE	EST	HAC	CDT
-#	-6	HNC	CST	HAR	MDT
-#	-7	HNR	MST	HAP	PDT
-#	-8	HNP	PST	HAY	YDT
-#	-9	HNY	YST	-	-
-#
-#	HN: Heure Normale	ST: Standard Time
-#	HA: Heure Avanc<e'>e	DT: Daylight saving Time
-#
-#	A: de l'Atlantique	Atlantic
-#	C: du Centre		Central
-#	E: de l'Est		Eastern
-#	M:			Mountain
-#	N:			Newfoundland
-#	P: du Pacifique		Pacific
-#	R: des Rocheuses
-#	T: de Terre-Neuve
-#	Y: du Yukon		Yukon
-#
-# From Paul Eggert (1994-11-22):
-# Alas, this sort of thing must be handled by localization software.
-
-# Unless otherwise specified, the data for Canada are all from Shanks.
-
-# From Paul Eggert (2005-12-21):
-# H. David Matthews and Mary Vincent's map
-# <a href="http://www.canadiangeographic.ca/Magazine/SO98/geomap.asp">
-# "It's about TIME", _Canadian Geographic_ (September-October 1998)
-# </a> contains detailed boundaries for regions observing nonstandard
-# time and daylight saving time arrangements in Canada circa 1998.
-#
-# INMS, the Institute for National Measurement Standards in Ottawa, has <a
-# href="http://inms-ienm.nrc-cnrc.gc.ca/en/time_services/daylight_saving_e.php">
-# information about standard and daylight saving time zones in Canada.
-# </a> (updated periodically).
-# Its unofficial information is often taken from Matthews and Vincent.
-#
-# CBC News reported that Ontario and Manitoba have announced plans to
-# follow the US change, and that Nova Scotia is considering it; see
-# <http://www.cbc.ca/news/background/daylightsavingtime/> (2005-10-21).
-# CBC news also reported that Prince Edward Island is the first
-# province in Atlantic Canada to follow the US change, and that Quebec
-# had agreed; see <http://www.cbc.ca/pei/story/pe_daylight_20051207.html>
-# (2005-12-07).
-#
-# To reflect all this, the Canada and Winn rules have been adjusted to
-# agree with the 2007 US change.  This means we assume most of Canada
-# will fall into line.  However, Alberta, British Columbia,
-# Newfoundland, Northwest Territories, and Yukon already have separate
-# rules in our database, so for now we'll leave them alone, which
-# means that we currently assume these regions will not change their
-# rules and will disagree with the US starting in 2007.  This
-# assumption is probably incorrect, with the possible exception of
-# Newfoundland.  We plan to adjust the Edm, Vanc, StJohns, and NT_YK
-# rules as the corresponding provinces make their announcements.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Canada	1918	only	-	Apr	14	2:00	1:00	D
-Rule	Canada	1918	only	-	Oct	31	2:00	0	S
-Rule	Canada	1942	only	-	Feb	 9	2:00	1:00	W # War
-Rule	Canada	1945	only	-	Aug	14	23:00u	1:00	P # Peace
-Rule	Canada	1945	only	-	Sep	30	2:00	0	S
-Rule	Canada	1974	1986	-	Apr	lastSun	2:00	1:00	D
-Rule	Canada	1974	2006	-	Oct	lastSun	2:00	0	S
-Rule	Canada	1987	2006	-	Apr	Sun>=1	2:00	1:00	D
-Rule	Canada	2007	max	-	Mar	Sun>=8	2:00	1:00	D
-Rule	Canada	2007	max	-	Nov	Sun>=1	2:00	0	S
-
-
-# Newfoundland (and far southeast Labrador)
-
-# From Paul Eggert (2000-10-02):
-# Matthews and Vincent (1998) write that Labrador should use NST/NDT,
-# but the only part of Labrador that follows the rules is the
-# southeast corner, including Port Hope Simpson and Mary's Harbour,
-# but excluding, say, Black Tickle.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	StJohns	1917	only	-	Apr	 8	2:00	1:00	D
-Rule	StJohns	1917	only	-	Sep	17	2:00	0	S
-# Whitman gives 1919 Apr 5 and 1920 Apr 5; go with Shanks.
-Rule	StJohns	1919	only	-	May	 5	23:00	1:00	D
-Rule	StJohns	1919	only	-	Aug	12	23:00	0	S
-# For 1931-1935 Whitman gives Apr same date; go with Shanks.
-Rule	StJohns	1920	1935	-	May	Sun>=1	23:00	1:00	D
-Rule	StJohns	1920	1935	-	Oct	lastSun	23:00	0	S
-# For 1936-1941 Whitman gives May Sun>=8 and Oct Sun>=1; go with Shanks.
-Rule	StJohns	1936	1941	-	May	Mon>=9	0:00	1:00	D
-Rule	StJohns	1936	1941	-	Oct	Mon>=2	0:00	0	S
-# Whitman gives the following transitions:
-# 1942 03-01/12-31, 1943 05-30/09-05, 1944 07-10/09-02, 1945 01-01/10-07
-# but go with Shanks and assume they used Canadian rules.
-# For 1946-9 Whitman gives May 5,4,9,1 - Oct 1,5,3,2, and for 1950 he gives
-# Apr 30 - Sep 24; go with Shanks.
-Rule	StJohns	1946	1950	-	May	Sun>=8	2:00	1:00	D
-Rule	StJohns	1946	1950	-	Oct	Sun>=2	2:00	0	S
-Rule	StJohns	1951	1986	-	Apr	lastSun	2:00	1:00	D
-Rule	StJohns	1951	1959	-	Sep	lastSun	2:00	0	S
-Rule	StJohns	1960	1986	-	Oct	lastSun	2:00	0	S
-# From Paul Eggert (2000-10-02):
-# INMS (2000-09-12) says that, since 1988 at least, Newfoundland switches
-# at 00:01 local time.  For now, assume it started in 1987.
-Rule	StJohns	1987	only	-	Apr	Sun>=1	0:01	1:00	D
-Rule	StJohns	1987	max	-	Oct	lastSun	0:01	0	S
-Rule	StJohns	1988	only	-	Apr	Sun>=1	0:01	2:00	DD
-Rule	StJohns	1989	max	-	Apr	Sun>=1	0:01	1:00	D
-# St John's has an apostrophe, but Posix file names can't have apostrophes.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/St_Johns	-3:30:52 -	LMT	1884
-			-3:30:52 StJohns N%sT	1918
-			-3:30:52 Canada	N%sT	1919
-			-3:30:52 StJohns N%sT	1935 Mar 30
-			-3:30	StJohns	N%sT	1942 May 11
-			-3:30	Canada	N%sT	1946
-			-3:30	StJohns	N%sT
-
-# most of east Labrador
-
-# The name `Happy Valley-Goose Bay' is too long; use `Goose Bay'.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Goose_Bay	-4:01:40 -	LMT	1884 # Happy Valley-Goose Bay
-			-3:30:52 -	NST	1918
-			-3:30:52 Canada N%sT	1919
-			-3:30:52 -	NST	1935 Mar 30
-			-3:30	-	NST	1936
-			-3:30	StJohns	N%sT	1942 May 11
-			-3:30	Canada	N%sT	1946
-			-3:30	StJohns	N%sT	1966 Mar 15 2:00
-			-4:00	StJohns	A%sT
-
-
-# west Labrador, New Brunswick, Nova Scotia, Prince Edward I
-
-# From Paul Eggert (1996-06-12):
-# Shanks writes that since 1970 most of this region has been like Halifax.
-# Many locales did not observe peacetime DST until 1972;
-# Glace Bay, NS is the largest that we know of.
-# Shanks also writes that Liverpool, NS was the only town in Canada to observe
-# DST in 1971 but not 1970; for now we'll assume this is a typo.
-
-# From Paul Eggert (2000-10-02):
-# INMS (2000-09-12) says that, since 1988 at least, New Brunswick switches
-# at 00:01 local time.  FIXME: verify and create a new Zone for this.
-
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule Halifax	1916	only	-	Apr	 1	0:00	1:00	D
-Rule Halifax	1916	only	-	Oct	 1	0:00	0	S
-Rule Halifax	1920	only	-	May	 9	0:00	1:00	D
-Rule Halifax	1920	only	-	Aug	29	0:00	0	S
-Rule Halifax	1921	only	-	May	 6	0:00	1:00	D
-Rule Halifax	1921	1922	-	Sep	 5	0:00	0	S
-Rule Halifax	1922	only	-	Apr	30	0:00	1:00	D
-Rule Halifax	1923	1925	-	May	Sun>=1	0:00	1:00	D
-Rule Halifax	1923	only	-	Sep	 4	0:00	0	S
-Rule Halifax	1924	only	-	Sep	15	0:00	0	S
-Rule Halifax	1925	only	-	Sep	28	0:00	0	S
-Rule Halifax	1926	only	-	May	16	0:00	1:00	D
-Rule Halifax	1926	only	-	Sep	13	0:00	0	S
-Rule Halifax	1927	only	-	May	 1	0:00	1:00	D
-Rule Halifax	1927	only	-	Sep	26	0:00	0	S
-Rule Halifax	1928	1931	-	May	Sun>=8	0:00	1:00	D
-Rule Halifax	1928	only	-	Sep	 9	0:00	0	S
-Rule Halifax	1929	only	-	Sep	 3	0:00	0	S
-Rule Halifax	1930	only	-	Sep	15	0:00	0	S
-Rule Halifax	1931	1932	-	Sep	Mon>=24	0:00	0	S
-Rule Halifax	1932	only	-	May	 1	0:00	1:00	D
-Rule Halifax	1933	only	-	Apr	30	0:00	1:00	D
-Rule Halifax	1933	only	-	Oct	 2	0:00	0	S
-Rule Halifax	1934	only	-	May	20	0:00	1:00	D
-Rule Halifax	1934	only	-	Sep	16	0:00	0	S
-Rule Halifax	1935	only	-	Jun	 2	0:00	1:00	D
-Rule Halifax	1935	only	-	Sep	30	0:00	0	S
-Rule Halifax	1936	only	-	Jun	 1	0:00	1:00	D
-Rule Halifax	1936	only	-	Sep	14	0:00	0	S
-Rule Halifax	1937	1938	-	May	Sun>=1	0:00	1:00	D
-Rule Halifax	1937	1941	-	Sep	Mon>=24	0:00	0	S
-Rule Halifax	1939	only	-	May	28	0:00	1:00	D
-Rule Halifax	1940	1941	-	May	Sun>=1	0:00	1:00	D
-Rule Halifax	1946	1949	-	Sep	lastSun	2:00	0	S
-Rule Halifax	1946	1949	-	Apr	lastSun	2:00	1:00	D
-Rule Halifax	1951	1954	-	Sep	lastSun	2:00	0	S
-Rule Halifax	1951	1954	-	Apr	lastSun	2:00	1:00	D
-Rule Halifax	1956	1959	-	Sep	lastSun	2:00	0	S
-Rule Halifax	1956	1959	-	Apr	lastSun	2:00	1:00	D
-Rule Halifax	1962	1973	-	Apr	lastSun	2:00	1:00	D
-Rule Halifax	1962	1973	-	Oct	lastSun	2:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Halifax	-4:14:24 -	LMT	1902 Jun 15
-			-4:00	Halifax	A%sT	1918
-			-4:00	Canada	A%sT	1919
-			-4:00	Halifax	A%sT	1942 Feb  9 2:00s
-			-4:00	Canada	A%sT	1946
-			-4:00	Halifax	A%sT	1974
-			-4:00	Canada	A%sT
-Zone America/Glace_Bay	-3:59:48 -	LMT	1902 Jun 15
-			-4:00	Canada	A%sT	1953
-			-4:00	Halifax	A%sT	1954
-			-4:00	-	AST	1972
-			-4:00	Halifax	A%sT	1974
-			-4:00	Canada	A%sT
-
-
-# Ontario, Quebec
-
-# From Paul Eggert (1996-06-12):
-# Shanks writes that since 1970 most of Ontario has been like Toronto,
-# and most of Quebec has been like Montreal.
-# Thunder Bay skipped DST in 1973.
-# Many smaller locales did not observe peacetime DST until 1974;
-# Nipigon (EST) and Rainy River (CST) are the largest that we know of.
-# Far west Ontario is like Winnipeg; far east Quebec is like Halifax.
-
-# From Mark Brader (2003-07-26):
-# [According to the Toronto Star] Orillia, Ontario, adopted DST
-# effective Saturday, 1912-06-22, 22:00; the article mentions that
-# Port Arthur (now part of Thunder Bay, Ontario) as well as Moose Jaw
-# have already done so.  In Orillia DST was to run until Saturday,
-# 1912-08-31 (no time mentioned), but it was met with considerable
-# hostility from certain segments of the public, and was revoked after
-# only two weeks -- I copied it as Saturday, 1912-07-07, 22:00, but
-# presumably that should be -07-06.  (1912-06-19, -07-12; also letters
-# earlier in June).
-#
-# Kenora, Ontario, was to abandon DST on 1914-06-01 (-05-21).
-
-# From Paul Eggert (1997-10-17):
-# Mark Brader writes that an article in the 1997-10-14 Toronto Star
-# says that Atikokan, Ontario currently does not observe DST,
-# but will vote on 11-10 whether to use EST/EDT.
-# He also writes that the
-# <a href="http://www.gov.on.ca/MBS/english/publications/statregs/conttext.html">
-# Ontario Time Act (1990, Chapter T.9)
-# </a>
-# says that Ontario east of 90W uses EST/EDT, and west of 90W uses CST/CDT.
-# Officially Atikokan is therefore on CST/CDT, and most likely this report
-# concerns a non-official time observed as a matter of local practice.
-# For what it's worth, Shanks says that Atikokan has agreed with
-# Rainy River ever since standard time was introduced.
-
-# From Paul Eggert (2000-10-02):
-# Matthews and Vincent (1998) write that Atikokan, Pickle Lake, and
-# New Osnaburgh observe CST all year, that Big Trout Lake observes
-# CST/CDT, and that Upsala and Shebandowan observe EST/EDT, all in
-# violation of the official Ontario rules.
-# They also write that Quebec east of the -63 meridian is supposed to
-# observe AST, but residents as far east as Natashquan use EST/EDT,
-# and residents east of Natashquan use AST.
-# We probably need Zones for far east Quebec and for Atikokan,
-# but we don't know when their practices started.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Mont	1917	only	-	Mar	25	2:00	1:00	D
-Rule	Mont	1917	only	-	Apr	24	0:00	0	S
-Rule	Mont	1919	only	-	Mar	31	2:30	1:00	D
-Rule	Mont	1919	only	-	Oct	25	2:30	0	S
-Rule	Mont	1920	only	-	May	 2	2:30	1:00	D
-Rule	Mont	1920	1922	-	Oct	Sun>=1	2:30	0	S
-Rule	Mont	1921	only	-	May	 1	2:00	1:00	D
-Rule	Mont	1922	only	-	Apr	30	2:00	1:00	D
-Rule	Mont	1924	only	-	May	17	2:00	1:00	D
-Rule	Mont	1924	1926	-	Sep	lastSun	2:30	0	S
-Rule	Mont	1925	1926	-	May	Sun>=1	2:00	1:00	D
-# The 1927-to-1937 rules can be expressed more simply as
-# Rule	Mont	1927	1937	-	Apr	lastSat	24:00	1:00	D
-# Rule	Mont	1927	1937	-	Sep	lastSat	24:00	0	S
-# The rules below avoid use of 24:00
-# (which pre-1998 versions of zic cannot handle).
-Rule	Mont	1927	only	-	May	1	0:00	1:00	D
-Rule	Mont	1927	1932	-	Sep	lastSun	0:00	0	S
-Rule	Mont	1928	1931	-	Apr	lastSun	0:00	1:00	D
-Rule	Mont	1932	only	-	May	1	0:00	1:00	D
-Rule	Mont	1933	1940	-	Apr	lastSun	0:00	1:00	D
-Rule	Mont	1933	only	-	Oct	1	0:00	0	S
-Rule	Mont	1934	1939	-	Sep	lastSun	0:00	0	S
-Rule	Mont	1946	1973	-	Apr	lastSun	2:00	1:00	D
-Rule	Mont	1945	1948	-	Sep	lastSun	2:00	0	S
-Rule	Mont	1949	1950	-	Oct	lastSun	2:00	0	S
-Rule	Mont	1951	1956	-	Sep	lastSun	2:00	0	S
-Rule	Mont	1957	1973	-	Oct	lastSun	2:00	0	S
-
-Rule	Toronto	1919	only	-	Mar	30	23:30	1:00	D
-Rule	Toronto	1919	only	-	Oct	26	0:00	0	S
-Rule	Toronto	1920	only	-	May	 2	2:00	1:00	D
-Rule	Toronto	1920	only	-	Sep	26	0:00	0	S
-Rule	Toronto	1921	only	-	May	15	2:00	1:00	D
-Rule	Toronto	1921	only	-	Sep	15	2:00	0	S
-Rule	Toronto	1922	1923	-	May	Sun>=8	2:00	1:00	D
-# Shanks says 1923-09-19; assume it's a typo and that "-16" was meant.
-Rule	Toronto	1922	1926	-	Sep	Sun>=15	2:00	0	S
-Rule	Toronto	1924	1927	-	May	Sun>=1	2:00	1:00	D
-# The 1927-to-1939 rules can be expressed more simply as
-# Rule	Toronto	1927	1937	-	Sep	Sun>=25	2:00	0	S
-# Rule	Toronto	1928	1937	-	Apr	Sun>=25	2:00	1:00	D
-# Rule	Toronto	1938	1940	-	Apr	lastSun	2:00	1:00	D
-# Rule	Toronto	1938	1939	-	Sep	lastSun	2:00	0	S
-# The rules below avoid use of Sun>=25
-# (which pre-2004 versions of zic cannot handle).
-Rule	Toronto	1927	1932	-	Sep	lastSun	2:00	0	S
-Rule	Toronto	1928	1931	-	Apr	lastSun	2:00	1:00	D
-Rule	Toronto	1932	only	-	May	1	2:00	1:00	D
-Rule	Toronto	1933	1940	-	Apr	lastSun	2:00	1:00	D
-Rule	Toronto	1933	only	-	Oct	1	2:00	0	S
-Rule	Toronto	1934	1939	-	Sep	lastSun	2:00	0	S
-Rule	Toronto	1945	1946	-	Sep	lastSun	2:00	0	S
-Rule	Toronto	1946	only	-	Apr	lastSun	2:00	1:00	D
-Rule	Toronto	1947	1949	-	Apr	lastSun	0:00	1:00	D
-Rule	Toronto	1947	1948	-	Sep	lastSun	0:00	0	S
-Rule	Toronto	1949	only	-	Nov	lastSun	0:00	0	S
-Rule	Toronto	1950	1973	-	Apr	lastSun	2:00	1:00	D
-Rule	Toronto	1950	only	-	Nov	lastSun	2:00	0	S
-Rule	Toronto	1951	1956	-	Sep	lastSun	2:00	0	S
-# Shanks says Toronto ended DST a week early in 1971, namely on 1971-10-24,
-# but Mark Brader wrote (2003-05-31) that he checked the 1971-10-30 issue
-# of the Toronto Star, and it said that DST ended 1971-10-31 as usual.
-Rule	Toronto	1957	1973	-	Oct	lastSun	2:00	0	S
-
-# From Paul Eggert (2003-07-27):
-# Willett (1914-03) writes (p. 17) "In the Cities of Fort William, and
-# Port Arthur, Ontario, the principle of the Bill has been in
-# operation for the past three years, and in the City of Moose Jaw,
-# Saskatchewan, for one year."
-
-# From David Bryan via Tory Tronrud, Director/Curator,
-# Thunder Bay Museum (2003-11-12):
-# There is some suggestion, however, that, by-law or not, daylight
-# savings time was being practiced in Fort William and Port Arthur
-# before 1909.... [I]n 1910, the line between the Eastern and Central
-# Time Zones was permanently moved about two hundred miles west to
-# include the Thunder Bay area....  When Canada adopted daylight
-# savings time in 1916, Fort William and Port Arthur, having done so
-# already, did not change their clocks....  During the Second World
-# War,... [t]he cities agreed to implement DST during the summer
-# months for the remainder of the war years.
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Montreal	-4:54:16 -	LMT	1884
-			-5:00	Mont	E%sT	1918
-			-5:00	Canada	E%sT	1919
-			-5:00	Mont	E%sT	1942 Feb  9 2:00s
-			-5:00	Canada	E%sT	1946
-			-5:00	Mont	E%sT	1974
-			-5:00	Canada	E%sT
-Zone America/Toronto	-5:17:32 -	LMT	1895
-			-5:00	Canada	E%sT	1919
-			-5:00	Toronto	E%sT	1942 Feb  9 2:00s
-			-5:00	Canada	E%sT	1946
-			-5:00	Toronto	E%sT	1974
-			-5:00	Canada	E%sT
-Zone America/Thunder_Bay -5:57:00 -	LMT	1895
-			-6:00	-	CST	1910
-			-5:00	-	EST	1942
-			-5:00	Canada	E%sT	1970
-			-5:00	Mont	E%sT	1973
-			-5:00	-	EST	1974
-			-5:00	Canada	E%sT
-Zone America/Nipigon	-5:53:04 -	LMT	1895
-			-5:00	Canada	E%sT	1940 Sep 29
-			-5:00	1:00	EDT	1942 Feb  9 2:00s
-			-5:00	Canada	E%sT
-Zone America/Rainy_River -6:17:56 -	LMT	1895
-			-6:00	Canada	C%sT	1940 Sep 29
-			-6:00	1:00	CDT	1942 Feb  9 2:00s
-			-6:00	Canada	C%sT
-
-
-# Manitoba
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Winn	1916	only	-	Apr	23	0:00	1:00	D
-Rule	Winn	1916	only	-	Sep	17	0:00	0	S
-Rule	Winn	1918	only	-	Apr	14	2:00	1:00	D
-Rule	Winn	1918	only	-	Oct	31	2:00	0	S
-Rule	Winn	1937	only	-	May	16	2:00	1:00	D
-Rule	Winn	1937	only	-	Sep	26	2:00	0	S
-Rule	Winn	1942	only	-	Feb	 9	2:00	1:00	W # War
-Rule	Winn	1945	only	-	Aug	14	23:00u	1:00	P # Peace
-Rule	Winn	1945	only	-	Sep	lastSun	2:00	0	S
-Rule	Winn	1946	only	-	May	12	2:00	1:00	D
-Rule	Winn	1946	only	-	Oct	13	2:00	0	S
-Rule	Winn	1947	1949	-	Apr	lastSun	2:00	1:00	D
-Rule	Winn	1947	1949	-	Sep	lastSun	2:00	0	S
-Rule	Winn	1950	only	-	May	 1	2:00	1:00	D
-Rule	Winn	1950	only	-	Sep	30	2:00	0	S
-Rule	Winn	1951	1960	-	Apr	lastSun	2:00	1:00	D
-Rule	Winn	1951	1958	-	Sep	lastSun	2:00	0	S
-Rule	Winn	1959	only	-	Oct	lastSun	2:00	0	S
-Rule	Winn	1960	only	-	Sep	lastSun	2:00	0	S
-Rule	Winn	1963	only	-	Apr	lastSun	2:00	1:00	D
-Rule	Winn	1963	only	-	Sep	22	2:00	0	S
-Rule	Winn	1966	1986	-	Apr	lastSun	2:00	1:00	D
-Rule	Winn	1966	1986	-	Oct	lastSun	2:00	0	S
-Rule	Winn	1987	2006	-	Apr	Sun>=1	2:00s	1:00	D
-# From Paul Eggert (2000-10-02):
-# INMS (2000-09-12) says that, since 1988 at least, Manitoba switches from
-# DST at 03:00 local time.  For now, assume it started in 1987.
-Rule	Winn	1987	2006	-	Oct	lastSun	2:00s	0	S
-Rule	Winn	2007	max	-	Mar	Sun>=8	2:00s	1:00	D
-Rule	Winn	2007	max	-	Nov	Sun>=1	2:00s	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Winnipeg	-6:28:36 -	LMT	1887 Jul 16
-			-6:00	Winn	C%sT
-
-
-# Saskatchewan
-
-# From Mark Brader (2003-07-26):
-# The first actual adoption of DST in Canada was at the municipal
-# level.  As the [Toronto] Star put it (1912-06-07), "While people
-# elsewhere have long been talking of legislation to save daylight,
-# the city of Moose Jaw [Saskatchewan] has acted on its own hook."
-# DST in Moose Jaw began on Saturday, 1912-06-01 (no time mentioned:
-# presumably late evening, as below), and would run until "the end of
-# the summer".  The discrepancy between municipal time and railroad
-# time was noted.
-
-# From Paul Eggert (2003-07-27):
-# Willett (1914-03) notes that DST "has been in operation ... in the
-# City of Moose Jaw, Saskatchewan, for one year."
-
-# From Paul Eggert (2000-10-02):
-# Shanks writes that since 1970 most of this region has been like Regina.
-# Some western towns (e.g. Swift Current) switched from MST/MDT to CST in 1972.
-# Other western towns (e.g. Lloydminster) are like Edmonton.
-# Matthews and Vincent (1998) write that Denare Beach and Creighton
-# are like Winnipeg, in violation of Saskatchewan law.
-
-# From W. Jones (1992-11-06):
-# The. . .below is based on information I got from our law library, the
-# provincial archives, and the provincial Community Services department.
-# A precise history would require digging through newspaper archives, and
-# since you didn't say what you wanted, I didn't bother.
-#
-# Saskatchewan is split by a time zone meridian (105W) and over the years
-# the boundary became pretty ragged as communities near it reevaluated
-# their affiliations in one direction or the other.  In 1965 a provincial
-# referendum favoured legislating common time practices.
-#
-# On 15 April 1966 the Time Act (c. T-14, Revised Statutes of
-# Saskatchewan 1978) was proclaimed, and established that the eastern
-# part of Saskatchewan would use CST year round, that districts in
-# northwest Saskatchewan would by default follow CST but could opt to
-# follow Mountain Time rules (thus 1 hour difference in the winter and
-# zero in the summer), and that districts in southwest Saskatchewan would
-# by default follow MT but could opt to follow CST.
-#
-# It took a few years for the dust to settle (I know one story of a town
-# on one time zone having its school in another, such that a mom had to
-# serve her family lunch in two shifts), but presently it seems that only
-# a few towns on the border with Alberta (e.g. Lloydminster) follow MT
-# rules any more; all other districts appear to have used CST year round
-# since sometime in the 1960s.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Regina	1918	only	-	Apr	14	2:00	1:00	D
-Rule	Regina	1918	only	-	Oct	31	2:00	0	S
-Rule	Regina	1930	1934	-	May	Sun>=1	0:00	1:00	D
-Rule	Regina	1930	1934	-	Oct	Sun>=1	0:00	0	S
-Rule	Regina	1937	1941	-	Apr	Sun>=8	0:00	1:00	D
-Rule	Regina	1937	only	-	Oct	Sun>=8	0:00	0	S
-Rule	Regina	1938	only	-	Oct	Sun>=1	0:00	0	S
-Rule	Regina	1939	1941	-	Oct	Sun>=8	0:00	0	S
-Rule	Regina	1942	only	-	Feb	 9	2:00	1:00	W # War
-Rule	Regina	1945	only	-	Aug	14	23:00u	1:00	P # Peace
-Rule	Regina	1945	only	-	Sep	lastSun	2:00	0	S
-Rule	Regina	1946	only	-	Apr	Sun>=8	2:00	1:00	D
-Rule	Regina	1946	only	-	Oct	Sun>=8	2:00	0	S
-Rule	Regina	1947	1957	-	Apr	lastSun	2:00	1:00	D
-Rule	Regina	1947	1957	-	Sep	lastSun	2:00	0	S
-Rule	Regina	1959	only	-	Apr	lastSun	2:00	1:00	D
-Rule	Regina	1959	only	-	Oct	lastSun	2:00	0	S
-#
-Rule	Swift	1957	only	-	Apr	lastSun	2:00	1:00	D
-Rule	Swift	1957	only	-	Oct	lastSun	2:00	0	S
-Rule	Swift	1959	1961	-	Apr	lastSun	2:00	1:00	D
-Rule	Swift	1959	only	-	Oct	lastSun	2:00	0	S
-Rule	Swift	1960	1961	-	Sep	lastSun	2:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Regina	-6:58:36 -	LMT	1905 Sep
-			-7:00	Regina	M%sT	1960 Apr lastSun 2:00
-			-6:00	-	CST
-Zone America/Swift_Current -7:11:20 -	LMT	1905 Sep
-			-7:00	Canada	M%sT	1946 Apr lastSun 2:00
-			-7:00	Regina	M%sT	1950
-			-7:00	Swift	M%sT	1972 Apr lastSun 2:00
-			-6:00	-	CST
-
-
-# Alberta
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Edm	1918	1919	-	Apr	Sun>=8	2:00	1:00	D
-Rule	Edm	1918	only	-	Oct	31	2:00	0	S
-Rule	Edm	1919	only	-	May	27	2:00	0	S
-Rule	Edm	1920	1923	-	Apr	lastSun	2:00	1:00	D
-Rule	Edm	1920	only	-	Oct	lastSun	2:00	0	S
-Rule	Edm	1921	1923	-	Sep	lastSun	2:00	0	S
-Rule	Edm	1942	only	-	Feb	 9	2:00	1:00	W # War
-Rule	Edm	1945	only	-	Aug	14	23:00u	1:00	P # Peace
-Rule	Edm	1945	only	-	Sep	lastSun	2:00	0	S
-Rule	Edm	1947	only	-	Apr	lastSun	2:00	1:00	D
-Rule	Edm	1947	only	-	Sep	lastSun	2:00	0	S
-Rule	Edm	1967	only	-	Apr	lastSun	2:00	1:00	D
-Rule	Edm	1967	only	-	Oct	lastSun	2:00	0	S
-Rule	Edm	1969	only	-	Apr	lastSun	2:00	1:00	D
-Rule	Edm	1969	only	-	Oct	lastSun	2:00	0	S
-Rule	Edm	1972	1986	-	Apr	lastSun	2:00	1:00	D
-Rule	Edm	1972	max	-	Oct	lastSun	2:00	0	S
-Rule	Edm	1987	max	-	Apr	Sun>=1	2:00	1:00	D
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Edmonton	-7:33:52 -	LMT	1906 Sep
-			-7:00	Edm	M%sT
-
-
-# British Columbia
-
-# From Paul Eggert (2000-10-02):
-# Shanks writes that since 1970 most of this region has been like Vancouver.
-# Dawson Creek uses MST.  Much of east BC is like Edmonton.
-# Matthews and Vincent (1998) write that Creston is like Dawson Creek.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Vanc	1918	only	-	Apr	14	2:00	1:00	D
-Rule	Vanc	1918	only	-	Oct	31	2:00	0	S
-Rule	Vanc	1942	only	-	Feb	 9	2:00	1:00	W # War
-Rule	Vanc	1945	only	-	Aug	14	23:00u	1:00	P # Peace
-Rule	Vanc	1945	only	-	Sep	30	2:00	0	S
-Rule	Vanc	1946	1986	-	Apr	lastSun	2:00	1:00	D
-Rule	Vanc	1946	only	-	Oct	13	2:00	0	S
-Rule	Vanc	1947	1961	-	Sep	lastSun	2:00	0	S
-Rule	Vanc	1962	max	-	Oct	lastSun	2:00	0	S
-Rule	Vanc	1987	max	-	Apr	Sun>=1	2:00	1:00	D
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Vancouver	-8:12:28 -	LMT	1884
-			-8:00	Vanc	P%sT
-Zone America/Dawson_Creek -8:00:56 -	LMT	1884
-			-8:00	Canada	P%sT	1947
-			-8:00	Vanc	P%sT	1972 Aug 30 2:00
-			-7:00	-	MST
-
-
-# Northwest Territories, Nunavut, Yukon
-
-# From Paul Eggert (1999-10-29):
-# Dawson switched to PST in 1973.  Inuvik switched to MST in 1979.
-# Mathew Englander (1996-10-07) gives the following refs:
-#	* 1967. Paragraph 28(34)(g) of the Interpretation Act, S.C. 1967-68,
-#	c. 7 defines Yukon standard time as UTC-9.  This is still valid;
-#	see Interpretation Act, R.S.C. 1985, c. I-21, s. 35(1).
-#	* C.O. 1973/214 switched Yukon to PST on 1973-10-28 00:00.
-#	* O.I.C. 1980/02 established DST.
-#	* O.I.C. 1987/056 changed DST to Apr firstSun 2:00 to Oct lastSun 2:00.
-# Shanks says Yukon's 1973-10-28 switch was at 2:00; go with Englander.
-
-# From Rives McDow (1999-09-04):
-# Nunavut ... moved ... to incorporate the whole territory into one time zone.
-# <a href="http://www.nunatsiaq.com/nunavut/nvt90903_13.html">
-# Nunavut moves to single time zone Oct. 31
-# </a>
-#
-# From Antoine Leca (1999-09-06):
-# We then need to create a new timezone for the Kitikmeot region of Nunavut
-# to differentiate it from the Yellowknife region.
-
-# From Paul Eggert (1999-09-20):
-# <a href="http://www.nunavut.com/basicfacts/english/basicfacts_1territory.html">
-# Basic Facts: The New Territory
-# </a> (1999) reports that Pangnirtung operates on eastern time,
-# and that Coral Harbour does not observe DST.  We don't know when
-# Pangnirtung switched to eastern time; we'll guess 1995.
-
-# From Rives McDow (1999-11-08):
-# On October 31, when the rest of Nunavut went to Central time,
-# Pangnirtung wobbled.  Here is the result of their wobble:
-#
-# The following businesses and organizations in Pangnirtung use Central Time:
-#
-#	First Air, Power Corp, Nunavut Construction, Health Center, RCMP,
-#	Eastern Arctic National Parks, A & D Specialist
-#
-# The following businesses and organizations in Pangnirtung use Eastern Time:
-#
-#	Hamlet office, All other businesses, Both schools, Airport operator
-#
-# This has made for an interesting situation there, which warranted the news.
-# No one there that I spoke with seems concerned, or has plans to
-# change the local methods of keeping time, as it evidently does not
-# really interfere with any activities or make things difficult locally.
-# They plan to celebrate New Year's turn-over twice, one hour apart,
-# so it appears that the situation will last at least that long.
-# The Nunavut Intergovernmental Affairs hopes that they will "come to
-# their senses", but the locals evidently don't see any problem with
-# the current state of affairs.
-
-# From Michaela Rodrigue, writing in the
-# <a href="http://www.nunatsiaq.com/archives/nunavut991130/nvt91119_17.html">
-# Nunatsiaq News (1999-11-19)</a>:
-# Clyde River, Pangnirtung and Sanikiluaq now operate with two time zones,
-# central - or Nunavut time - for government offices, and eastern time
-# for municipal offices and schools....  Igloolik [was similar but then]
-# made the switch to central time on Saturday, Nov. 6.
-
-# From Paul Eggert (2000-10-02):
-# Matthews and Vincent (1998) say the following, but we lack histories
-# for these potential new Zones.
-#
-# The Canadian Forces station at Alert uses Eastern Time while the
-# handful of residents at the Eureka weather station [in the Central
-# zone] skip daylight savings.  Baffin Island, which is crossed by the
-# Central, Eastern and Atlantic Time zones only uses Eastern Time.
-# Gjoa Haven, Taloyoak and Pelly Bay all use Mountain instead of
-# Central Time and Southampton Island [in the Central zone] is not
-# required to use daylight savings.
-
-# From
-# <a href="http://www.nunatsiaq.com/archives/nunavut001130/nvt21110_02.html">
-# Nunavut now has two time zones
-# </a> (2000-11-10):
-# The Nunavut government would allow its employees in Kugluktuk and
-# Cambridge Bay to operate on central time year-round, putting them
-# one hour behind the rest of Nunavut for six months during the winter.
-# At the end of October the two communities had rebelled against
-# Nunavut's unified time zone, refusing to shift to eastern time with
-# the rest of the territory for the winter.  Cambridge Bay remained on
-# central time, while Kugluktuk, even farther west, reverted to
-# mountain time, which they had used before the advent of Nunavut's
-# unified time zone in 1999.
-#
-# From Rives McDow (2001-01-20), quoting the Nunavut government:
-# The preceding decision came into effect at midnight, Saturday Nov 4, 2000.
-
-# From Paul Eggert (2000-12-04):
-# Let's just keep track of the official times for now.
-
-# From Rives McDow (2001-03-07):
-# The premier of Nunavut has issued a ministerial statement advising
-# that effective 2001-04-01, the territory of Nunavut will revert
-# back to three time zones (mountain, central, and eastern).  Of the
-# cities in Nunavut, Coral Harbor is the only one that I know of that
-# has said it will not observe dst, staying on EST year round.  I'm
-# checking for more info, and will get back to you if I come up with
-# more.
-# [Also see <http://www.nunatsiaq.com/nunavut/nvt10309_06.html> (2001-03-09).]
-
-# From Gwillim Law (2005-05-21):
-# According to maps at
-# http://inms-ienm.nrc-cnrc.gc.ca/images/time_services/TZ01SWE.jpg
-# http://inms-ienm.nrc-cnrc.gc.ca/images/time_services/TZ01SSE.jpg
-# (both dated 2003), and
-# http://www.canadiangeographic.ca/Magazine/SO98/geomap.asp
-# (from a 1998 Canadian Geographic article), the de facto and de jure time
-# for Southampton Island (at the north end of Hudson Bay) is UTC-5 all year
-# round.  Using Google, it's easy to find other websites that confirm this.
-# I wasn't able to find how far back this time regimen goes, but since it
-# predates the creation of Nunavut, it probably goes back many years....
-# The Inuktitut name of Coral Harbour is Sallit, but it's rarely used.
-#
-# From Paul Eggert (2005-07-26):
-# For lack of better information, assume that Southampton Island observed
-# daylight saving only during wartime.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	NT_YK	1918	only	-	Apr	14	2:00	1:00	D
-Rule	NT_YK	1918	only	-	Oct	27	2:00	0	S
-Rule	NT_YK	1919	only	-	May	25	2:00	1:00	D
-Rule	NT_YK	1919	only	-	Nov	 1	0:00	0	S
-Rule	NT_YK	1942	only	-	Feb	 9	2:00	1:00	W # War
-Rule	NT_YK	1945	only	-	Aug	14	23:00u	1:00	P # Peace
-Rule	NT_YK	1945	only	-	Sep	30	2:00	0	S
-Rule	NT_YK	1965	only	-	Apr	lastSun	0:00	2:00	DD
-Rule	NT_YK	1965	only	-	Oct	lastSun	2:00	0	S
-Rule	NT_YK	1980	1986	-	Apr	lastSun	2:00	1:00	D
-Rule	NT_YK	1980	max	-	Oct	lastSun	2:00	0	S
-Rule	NT_YK	1987	max	-	Apr	Sun>=1	2:00	1:00	D
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Pangnirtung -4:22:56 -	LMT	1884
-			-4:00	NT_YK	A%sT	1995 Apr Sun>=1 2:00
-			-5:00	Canada	E%sT	1999 Oct 31 2:00
-			-6:00	Canada	C%sT	2000 Oct 29 2:00
-			-5:00	Canada	E%sT
-Zone America/Iqaluit	-4:33:52 -	LMT	1884 # Frobisher Bay before 1987
-			-5:00	NT_YK	E%sT	1999 Oct 31 2:00
-			-6:00	Canada	C%sT	2000 Oct 29 2:00
-			-5:00	Canada	E%sT
-Zone America/Coral_Harbour -5:32:40 -	LMT	1884
-			-5:00	NT_YK	E%sT	1946
-			-5:00	-	EST
-Zone America/Rankin_Inlet -6:08:40 -	LMT	1884
-			-6:00	NT_YK	C%sT	2000 Oct 29 2:00
-			-5:00	-	EST	2001 Apr  1 3:00
-			-6:00	Canada	C%sT
-Zone America/Cambridge_Bay -7:00:20 -	LMT	1884
-			-7:00	NT_YK	M%sT	1999 Oct 31 2:00
-			-6:00	Canada	C%sT	2000 Oct 29 2:00
-			-5:00	-	EST	2000 Nov  5 0:00
-			-6:00	-	CST	2001 Apr  1 3:00
-			-7:00	Canada	M%sT
-Zone America/Yellowknife -7:37:24 -	LMT	1884
-			-7:00	NT_YK	M%sT
-Zone America/Inuvik	-8:54:00 -	LMT	1884
-			-8:00	NT_YK	P%sT	1979 Apr lastSun 2:00
-			-7:00	NT_YK	M%sT
-Zone America/Whitehorse	-9:00:12 -	LMT	1900 Aug 20
-			-9:00	NT_YK	Y%sT	1966 Jul 1 2:00
-			-8:00	NT_YK	P%sT
-Zone America/Dawson	-9:17:40 -	LMT	1900 Aug 20
-			-9:00	NT_YK	Y%sT	1973 Oct 28 0:00
-			-8:00	NT_YK	P%sT
-
-
-###############################################################################
-
-# Mexico
-
-# From Paul Eggert (2001-03-05):
-# The Investigation and Analysis Service of the
-# Mexican Library of Congress (MLoC) has published a
-# <a href="http://www.cddhcu.gob.mx/bibliot/publica/inveyana/polisoc/horver/">
-# history of Mexican local time (in Spanish)
-# </a>.
-#
-# Here are the discrepancies between Shanks and the MLoC.
-# (In all cases we go with the MLoC.)
-# Shanks reports that Baja was at -8:00 in 1922/1923.
-# Shanks says the 1930 transition in Baja was 1930-11-16.
-# Shanks reports no DST during summer 1931.
-# Shanks reports a transition at 1932-03-30 23:00, not 1932-04-01.
-# Shanks does not report transitions for Baja in 1945 or 1948.
-# Shanks reports southern Mexico transitions on 1981-12-01, not 12-23.
-# Shanks says Quintana Roo switched to -6:00 on 1982-12-02, and to -5:00
-# on 1997-10-26 at 02:00.
-
-# From Gwillim Law (2001-02-20):
-# There are some other discrepancies between the Decrees page and the
-# tz database.  I think they can best be explained by supposing that
-# the researchers who prepared the Decrees page failed to find some of
-# the relevant documents.
-
-# From Paul Eggert (2000-07-26):
-# Shanks gives 1942-04-01 instead of 1942-04-24, and omits the 1981
-# and 1988 DST experiments.  Go with spin.com.mx.
-
-# From Alan Perry (1996-02-15):
-# A guy from our Mexico subsidiary finally found the Presidential Decree
-# outlining the timezone changes in Mexico.
-#
-# ------------- Begin Forwarded Message -------------
-#
-# I finally got my hands on the Official Presidential Decree that sets up the
-# rules for the DST changes. The rules are:
-#
-# 1. The country is divided in 3 timezones:
-#    - Baja California Norte (the Mexico/BajaNorte TZ)
-#    - Baja California Sur, Nayarit, Sinaloa and Sonora (the Mexico/BajaSur TZ)
-#    - The rest of the country (the Mexico/General TZ)
-#
-# 2. From the first Sunday in April at 2:00 AM to the last Sunday in October
-#    at 2:00 AM, the times in each zone are as follows:
-#    BajaNorte: GMT+7
-#    BajaSur:   GMT+6
-#    General:   GMT+5
-#
-# 3. The rest of the year, the times are as follows:
-#    BajaNorte: GMT+8
-#    BajaSur:   GMT+7
-#    General:   GMT+6
-#
-# The Decree was published in Mexico's Official Newspaper on January 4th.
-#
-# -------------- End Forwarded Message --------------
-# From Paul Eggert (1996-06-12):
-# For an English translation of the decree, see
-# <a href="http://mexico-travel.com/extra/timezone_eng.html">
-# ``Diario Oficial: Time Zone Changeover'' (1996-01-04).
-# </a>
-
-# From Rives McDow (1998-10-08):
-# The State of Quintana Roo has reverted back to central STD and DST times
-# (i.e. UTC -0600 and -0500 as of 1998-08-02).
-
-# From Rives McDow (2000-01-10):
-# Effective April 4, 1999 at 2:00 AM local time, Sonora changed to the time
-# zone 5 hours from the International Date Line, and will not observe daylight
-# savings time so as to stay on the same time zone as the southern part of
-# Arizona year round.
-
-# From Jesper Norgaard, translating
-# <http://www.reforma.com/nacional/articulo/064327/> (2001-01-17):
-# In Oaxaca, the 55.000 teachers from the Section 22 of the National
-# Syndicate of Education Workers, refuse to apply daylight saving each
-# year, so that the more than 10,000 schools work at normal hour the
-# whole year.
-
-# From Gwillim Law (2001-01-19):
-# <http://www.reforma.com/negocios_y_dinero/articulo/064481/> ... says
-# (translated):...
-# January 17, 2000 - The Energy Secretary, Ernesto Martens, announced
-# that Summer Time will be reduced from seven to five months, starting
-# this year....
-# <http://www.publico.com.mx/scripts/texto3.asp?action=pagina&pag=21&pos=p&secc=naci&date=01/17/2001>
-# [translated], says "summer time will ... take effect on the first Sunday
-# in May, and end on the last Sunday of September.
-
-# From Arthur David Olson (2001-01-25):
-# The 2001-01-24 traditional Washington Post contained the page one
-# story "Timely Issue Divides Mexicans."...
-# http://www.washingtonpost.com/wp-dyn/articles/A37383-2001Jan23.html
-# ... Mexico City Mayor Lopez Obrador "...is threatening to keep
-# Mexico City and its 20 million residents on a different time than
-# the rest of the country..." In particular, Lopez Obrador would abolish
-# observation of Daylight Saving Time.
-
-# <a href="http://www.conae.gob.mx/ahorro/decretohorver2001.html#decre">
-# Official statute published by the Energy Department
-# </a> (2001-02-01) shows Baja and Chihauhua as still using US DST rules,
-# and Sonora with no DST.  This was reported by Jesper Norgaard (2001-02-03).
-
-# From Paul Eggert (2001-03-03):
-#
-# <a href="http://www.latimes.com/news/nation/20010303/t000018766.html">
-# James F. Smith writes in today's LA Times
-# </a>
-# * Sonora will continue to observe standard time.
-# * Last week Mexico City's mayor Andres Manuel Lopez Obrador decreed that
-#   the Federal District will not adopt DST.
-# * 4 of 16 district leaders announced they'll ignore the decree.
-# * The decree does not affect federal-controlled facilities including
-#   the airport, banks, hospitals, and schools.
-#
-# For now we'll assume that the Federal District will bow to federal rules.
-
-# From Jesper Norgaard (2001-04-01):
-# I found some references to the Mexican application of daylight
-# saving, which modifies what I had already sent you, stating earlier
-# that a number of northern Mexican states would go on daylight
-# saving. The modification reverts this to only cover Baja California
-# (Norte), while all other states (except Sonora, who has no daylight
-# saving all year) will follow the original decree of president
-# Vicente Fox, starting daylight saving May 6, 2001 and ending
-# September 30, 2001.
-# References: "Diario de Monterrey" <www.diariodemonterrey.com/index.asp>
-# Palabra <http://palabra.infosel.com/010331/primera/ppri3101.pdf> (2001-03-31)
-
-# From Reuters (2001-09-04):
-# Mexico's Supreme Court on Tuesday declared that daylight savings was
-# unconstitutional in Mexico City, creating the possibility the
-# capital will be in a different time zone from the rest of the nation
-# next year....  The Supreme Court's ruling takes effect at 2:00
-# a.m. (0800 GMT) on Sept. 30, when Mexico is scheduled to revert to
-# standard time. "This is so residents of the Federal District are not
-# subject to unexpected time changes," a statement from the court said.
-
-# From Jesper Norgaard Welen (2002-03-12):
-# ... consulting my local grocery store(!) and my coworkers, they all insisted
-# that a new decision had been made to reinstate US style DST in Mexico....
-# http://www.conae.gob.mx/ahorro/horaver2001_m1_2002.html (2002-02-20)
-# confirms this.  Sonora as usual is the only state where DST is not applied.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Mexico	1939	only	-	Feb	5	0:00	1:00	D
-Rule	Mexico	1939	only	-	Jun	25	0:00	0	S
-Rule	Mexico	1940	only	-	Dec	9	0:00	1:00	D
-Rule	Mexico	1941	only	-	Apr	1	0:00	0	S
-Rule	Mexico	1943	only	-	Dec	16	0:00	1:00	W # War
-Rule	Mexico	1944	only	-	May	1	0:00	0	S
-Rule	Mexico	1950	only	-	Feb	12	0:00	1:00	D
-Rule	Mexico	1950	only	-	Jul	30	0:00	0	S
-Rule	Mexico	1996	2000	-	Apr	Sun>=1	2:00	1:00	D
-Rule	Mexico	1996	2000	-	Oct	lastSun	2:00	0	S
-Rule	Mexico	2001	only	-	May	Sun>=1	2:00	1:00	D
-Rule	Mexico	2001	only	-	Sep	lastSun	2:00	0	S
-Rule	Mexico	2002	max	-	Apr	Sun>=1	2:00	1:00	D
-Rule	Mexico	2002	max	-	Oct	lastSun	2:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-# Quintana Roo
-Zone America/Cancun	-5:47:04 -	LMT	1922 Jan  1  0:12:56
-			-6:00	-	CST	1981 Dec 23
-			-5:00	Mexico	E%sT	1998 Aug  2  2:00
-			-6:00	Mexico	C%sT
-# Campeche, Yucatan
-Zone America/Merida	-5:58:28 -	LMT	1922 Jan  1  0:01:32
-			-6:00	-	CST	1981 Dec 23
-			-5:00	-	EST	1982 Dec  2
-			-6:00	Mexico	C%sT
-# Coahuila, Durango, Nuevo Leon, Tamaulipas
-Zone America/Monterrey	-6:41:16 -	LMT	1921 Dec 31 23:18:44
-			-6:00	-	CST	1988
-			-6:00	US	C%sT	1989
-			-6:00	Mexico	C%sT
-# Central Mexico
-Zone America/Mexico_City -6:36:36 -	LMT	1922 Jan  1  0:23:24
-			-7:00	-	MST	1927 Jun 10 23:00
-			-6:00	-	CST	1930 Nov 15
-			-7:00	-	MST	1931 May  1 23:00
-			-6:00	-	CST	1931 Oct
-			-7:00	-	MST	1932 Apr  1
-			-6:00	Mexico	C%sT	2001 Sep 30 02:00
-			-6:00	-	CST	2002 Feb 20
-			-6:00	Mexico	C%sT
-# Chihuahua
-Zone America/Chihuahua	-7:04:20 -	LMT	1921 Dec 31 23:55:40
-			-7:00	-	MST	1927 Jun 10 23:00
-			-6:00	-	CST	1930 Nov 15
-			-7:00	-	MST	1931 May  1 23:00
-			-6:00	-	CST	1931 Oct
-			-7:00	-	MST	1932 Apr  1
-			-6:00	-	CST	1996
-			-6:00	Mexico	C%sT	1998
-			-6:00	-	CST	1998 Apr Sun>=1 3:00
-			-7:00	Mexico	M%sT
-# Sonora
-Zone America/Hermosillo	-7:23:52 -	LMT	1921 Dec 31 23:36:08
-			-7:00	-	MST	1927 Jun 10 23:00
-			-6:00	-	CST	1930 Nov 15
-			-7:00	-	MST	1931 May  1 23:00
-			-6:00	-	CST	1931 Oct
-			-7:00	-	MST	1932 Apr  1
-			-6:00	-	CST	1942 Apr 24
-			-7:00	-	MST	1949 Jan 14
-			-8:00	-	PST	1970
-			-7:00	Mexico	M%sT	1999
-			-7:00	-	MST
-# Baja California Sur, Nayarit, Sinaloa
-Zone America/Mazatlan	-7:05:40 -	LMT	1921 Dec 31 23:54:20
-			-7:00	-	MST	1927 Jun 10 23:00
-			-6:00	-	CST	1930 Nov 15
-			-7:00	-	MST	1931 May  1 23:00
-			-6:00	-	CST	1931 Oct
-			-7:00	-	MST	1932 Apr  1
-			-6:00	-	CST	1942 Apr 24
-			-7:00	-	MST	1949 Jan 14
-			-8:00	-	PST	1970
-			-7:00	Mexico	M%sT
-# Baja California
-Zone America/Tijuana	-7:48:04 -	LMT	1922 Jan  1  0:11:56
-			-7:00	-	MST	1924
-			-8:00	-	PST	1927 Jun 10 23:00
-			-7:00	-	MST	1930 Nov 15
-			-8:00	-	PST	1931 Apr  1
-			-8:00	1:00	PDT	1931 Sep 30
-			-8:00	-	PST	1942 Apr 24
-			-8:00	1:00	PWT	1945 Nov 12
-			-8:00	-	PST	1948 Apr  5
-			-8:00	1:00	PDT	1949 Jan 14
-			-8:00	-	PST	1954
-			-8:00	CA	P%sT	1961
-			-8:00	-	PST	1976
-			-8:00	US	P%sT	1996
-			-8:00	Mexico	P%sT	2001
-			-8:00	US	P%sT	2002 Feb 20
-			-8:00	Mexico	P%sT
-# From Paul Eggert (2001-03-05):
-# Formerly there was an America/Ensenada zone, which differed from
-# America/Tijuana only in that it did not observe DST from 1976
-# through 1995.  This was as per Shanks.  However, Guy Harris reports
-# that the 1987 OAG says "Only Ensenada, Mexicale, San Felipe and
-# Tijuana observe DST," which contradicts Shanks but does imply that
-# DST-observance was a town-by-town matter back then.  This concerns
-# data after 1970 so most likely there should be at least one Zone
-# other than America/Tijuana for Baja, but it's not clear yet what its
-# name or contents should be.
-#
-# Revillagigedo Is
-# no information
-
-###############################################################################
-
-# Anguilla
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Anguilla	-4:12:16 -	LMT	1912 Mar 2
-			-4:00	-	AST
-
-# Antigua and Barbuda
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Antigua	-4:07:12 -	LMT	1912 Mar 2
-			-5:00	-	EST	1951
-			-4:00	-	AST
-
-# Bahamas
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Bahamas	1964	max	-	Oct	lastSun	2:00	0	S
-Rule	Bahamas	1964	1986	-	Apr	lastSun	2:00	1:00	D
-Rule	Bahamas	1987	max	-	Apr	Sun>=1	2:00	1:00	D
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Nassau	-5:09:24 -	LMT	1912 Mar 2
-			-5:00	Bahamas	E%sT
-
-# Barbados
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Barb	1977	only	-	Jun	12	2:00	1:00	D
-Rule	Barb	1977	1978	-	Oct	Sun>=1	2:00	0	S
-Rule	Barb	1978	1980	-	Apr	Sun>=15	2:00	1:00	D
-Rule	Barb	1979	only	-	Sep	30	2:00	0	S
-Rule	Barb	1980	only	-	Sep	25	2:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Barbados	-3:58:28 -	LMT	1924		# Bridgetown
-			-3:58:28 -	BMT	1932	  # Bridgetown Mean Time
-			-4:00	Barb	A%sT
-
-# Belize
-# Whitman entirely disagrees with Shanks; go with Shanks.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Belize	1918	1942	-	Oct	Sun>=2	0:00	0:30	HD
-Rule	Belize	1919	1943	-	Feb	Sun>=9	0:00	0	S
-Rule	Belize	1973	only	-	Dec	 5	0:00	1:00	D
-Rule	Belize	1974	only	-	Feb	 9	0:00	0	S
-Rule	Belize	1982	only	-	Dec	18	0:00	1:00	D
-Rule	Belize	1983	only	-	Feb	12	0:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Belize	-5:52:48 -	LMT	1912 Apr
-			-6:00	Belize	C%sT
-
-# Bermuda
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Atlantic/Bermuda	-4:19:04 -	LMT	1930 Jan  1 2:00    # Hamilton
-			-4:00	-	AST	1974 Apr 28 2:00
-			-4:00	Bahamas	A%sT
-
-# Cayman Is
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Cayman	-5:25:32 -	LMT	1890		# Georgetown
-			-5:07:12 -	KMT	1912 Feb    # Kingston Mean Time
-			-5:00	-	EST
-
-# Costa Rica
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	CR	1979	1980	-	Feb	lastSun	0:00	1:00	D
-Rule	CR	1979	1980	-	Jun	Sun>=1	0:00	0	S
-Rule	CR	1991	1992	-	Jan	Sat>=15	0:00	1:00	D
-# IATA SSIM (1991-09) says the following was at 1:00; go with Shanks.
-Rule	CR	1991	only	-	Jul	 1	0:00	0	S
-Rule	CR	1992	only	-	Mar	15	0:00	0	S
-# There are too many San Joses elsewhere, so we'll use `Costa Rica'.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Costa_Rica	-5:36:20 -	LMT	1890		# San Jose
-			-5:36:20 -	SJMT	1921 Jan 15 # San Jose Mean Time
-			-6:00	CR	C%sT
-# Coco
-# no information; probably like America/Costa_Rica
-
-# Cuba
-
-# From Arthur David Olson (1999-03-29):
-# The 1999-03-28 exhibition baseball game held in Havana, Cuba, between
-# the Cuban National Team and the Baltimore Orioles was carried live on
-# the Orioles Radio Network, including affiliate WTOP in Washington, DC.
-# During the game, play-by-play announcer Jim Hunter noted that
-# "We'll be losing two hours of sleep...Cuba switched to Daylight Saving
-# Time today."  (The "two hour" remark referred to losing one hour of
-# sleep on 1999-03-28--when the announcers were in Cuba as it switched
-# to DST--and one more hour on 1999-04-04--when the announcers will have
-# returned to Baltimore, which switches on that date.)
-
-# From Evert van der Veer via Steffen Thorsen (2004-10-28):
-# Cuba is not going back to standard time this year.
-# From Paul Eggert (2004-10-28):
-# http://www.granma.cu/ingles/2004/septiembre/juev30/41medid-i.html
-# says that it's due to a problem at the Antonio Guiteras
-# thermoelectric plant, and says "This October there will be no return
-# to normal hours (after daylight saving time)".
-# For now, let's assume that it's a one-year temporary measure.
-
-# From Carlos A. Carnero Delgado (2005-11-12):
-# This year (just like in 2004-2005) there's no change in time zone
-# adjustment in Cuba.  We will stay in daylight saving time:
-# http://www.granma.cu/espanol/2005/noviembre/mier9/horario.html
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Cuba	1928	only	-	Jun	10	0:00	1:00	D
-Rule	Cuba	1928	only	-	Oct	10	0:00	0	S
-Rule	Cuba	1940	1942	-	Jun	Sun>=1	0:00	1:00	D
-Rule	Cuba	1940	1942	-	Sep	Sun>=1	0:00	0	S
-Rule	Cuba	1945	1946	-	Jun	Sun>=1	0:00	1:00	D
-Rule	Cuba	1945	1946	-	Sep	Sun>=1	0:00	0	S
-Rule	Cuba	1965	only	-	Jun	1	0:00	1:00	D
-Rule	Cuba	1965	only	-	Sep	30	0:00	0	S
-Rule	Cuba	1966	only	-	May	29	0:00	1:00	D
-Rule	Cuba	1966	only	-	Oct	2	0:00	0	S
-Rule	Cuba	1967	only	-	Apr	8	0:00	1:00	D
-Rule	Cuba	1967	1968	-	Sep	Sun>=8	0:00	0	S
-Rule	Cuba	1968	only	-	Apr	14	0:00	1:00	D
-Rule	Cuba	1969	1977	-	Apr	lastSun	0:00	1:00	D
-Rule	Cuba	1969	1971	-	Oct	lastSun	0:00	0	S
-Rule	Cuba	1972	1974	-	Oct	8	0:00	0	S
-Rule	Cuba	1975	1977	-	Oct	lastSun	0:00	0	S
-Rule	Cuba	1978	only	-	May	7	0:00	1:00	D
-Rule	Cuba	1978	1990	-	Oct	Sun>=8	0:00	0	S
-Rule	Cuba	1979	1980	-	Mar	Sun>=15	0:00	1:00	D
-Rule	Cuba	1981	1985	-	May	Sun>=5	0:00	1:00	D
-Rule	Cuba	1986	1989	-	Mar	Sun>=14	0:00	1:00	D
-Rule	Cuba	1990	1997	-	Apr	Sun>=1	0:00	1:00	D
-Rule	Cuba	1991	1995	-	Oct	Sun>=8	0:00s	0	S
-Rule	Cuba	1996	only	-	Oct	 6	0:00s	0	S
-Rule	Cuba	1997	only	-	Oct	12	0:00s	0	S
-Rule	Cuba	1998	1999	-	Mar	lastSun	0:00s	1:00	D
-Rule	Cuba	1998	2003	-	Oct	lastSun	0:00s	0	S
-Rule	Cuba	2000	max	-	Apr	Sun>=1	0:00s	1:00	D
-Rule	Cuba	2006	max	-	Oct	lastSun	0:00s	0	S
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Havana	-5:29:28 -	LMT	1890
-			-5:29:36 -	HMT	1925 Jul 19 12:00 # Havana MT
-			-5:00	Cuba	C%sT
-
-# Dominica
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Dominica	-4:05:36 -	LMT	1911 Jul 1 0:01		# Roseau
-			-4:00	-	AST
-
-# Dominican Republic
-
-# From Steffen Thorsen (2000-10-30):
-# Enrique Morales reported to me that the Dominican Republic has changed the
-# time zone to Eastern Standard Time as of Sunday 29 at 2 am....
-# http://www.listin.com.do/antes/261000/republica/princi.html
-
-# From Paul Eggert (2000-12-04):
-# That URL (2000-10-26, in Spanish) says they planned to use US-style DST.
-
-# From Rives McDow (2000-12-01):
-# Dominican Republic changed its mind and presidential decree on Tuesday,
-# November 28, 2000, with a new decree.  On Sunday, December 3 at 1:00 AM the
-# Dominican Republic will be reverting to 8 hours from the International Date
-# Line, and will not be using DST in the foreseeable future.  The reason they
-# decided to use DST was to be in synch with Puerto Rico, who was also going
-# to implement DST.  When Puerto Rico didn't implement DST, the president
-# decided to revert.
-
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	DR	1966	only	-	Oct	30	0:00	1:00	D
-Rule	DR	1967	only	-	Feb	28	0:00	0	S
-Rule	DR	1969	1973	-	Oct	lastSun	0:00	0:30	HD
-Rule	DR	1970	only	-	Feb	21	0:00	0	S
-Rule	DR	1971	only	-	Jan	20	0:00	0	S
-Rule	DR	1972	1974	-	Jan	21	0:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Santo_Domingo -4:39:36 -	LMT	1890
-			-4:40	-	SDMT	1933 Apr  1 12:00 # S. Dom. MT
-			-5:00	DR	E%sT	1974 Oct 27
-			-4:00	-	AST	2000 Oct 29 02:00
-			-5:00	US	E%sT	2000 Dec  3 01:00
-			-4:00	-	AST
-
-# El Salvador
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Salv	1987	1988	-	May	Sun>=1	0:00	1:00	D
-Rule	Salv	1987	1988	-	Sep	lastSun	0:00	0	S
-# There are too many San Salvadors elsewhere, so use America/El_Salvador
-# instead of America/San_Salvador.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/El_Salvador -5:56:48 -	LMT	1921		# San Salvador
-			-6:00	Salv	C%sT
-
-# Grenada
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Grenada	-4:07:00 -	LMT	1911 Jul	# St George's
-			-4:00	-	AST
-
-# Guadeloupe
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Guadeloupe	-4:06:08 -	LMT	1911 Jun 8	# Pointe a Pitre
-			-4:00	-	AST
-
-# Guatemala
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Guat	1973	only	-	Nov	25	0:00	1:00	D
-Rule	Guat	1974	only	-	Feb	24	0:00	0	S
-Rule	Guat	1983	only	-	May	21	0:00	1:00	D
-Rule	Guat	1983	only	-	Sep	22	0:00	0	S
-Rule	Guat	1991	only	-	Mar	23	0:00	1:00	D
-Rule	Guat	1991	only	-	Sep	 7	0:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Guatemala	-6:02:04 -	LMT	1918 Oct 5
-			-6:00	Guat	C%sT
-
-# Haiti
-# From Gwillim Law (2005-04-15):
-# Risto O. Nykanen wrote me that Haiti is now on DST.
-# I searched for confirmation, and I found a
-# <a href="http://www.haitianconsulate.org/time.doc"> press release
-# on the Web page of the Haitian Consulate in Chicago (2005-03-31),
-# </a>.  Translated from French, it says:
-#
-#  "The Prime Minister's Communication Office notifies the public in general
-#   and the press in particular that, following a decision of the Interior
-#   Ministry and the Territorial Collectivities [I suppose that means the
-#   provinces], Haiti will move to Eastern Daylight Time in the night from next
-#   Saturday the 2nd to Sunday the 3rd.
-#
-#  "Consequently, the Prime Minister's Communication Office wishes to inform
-#   the population that the country's clocks will be set forward one hour
-#   starting at midnight.  This provision will hold until the last Saturday in
-#   October 2005.
-#
-#  "Port-au-Prince, March 31, 2005"
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Haiti	1983	only	-	May	8	0:00	1:00	D
-Rule	Haiti	1984	1987	-	Apr	lastSun	0:00	1:00	D
-Rule	Haiti	1983	1987	-	Oct	lastSun	0:00	0	S
-# Shanks says AT is 2:00, but IATA SSIM (1991/1997) says 1:00s.  Go with IATA.
-Rule	Haiti	1988	1997	-	Apr	Sun>=1	1:00s	1:00	D
-Rule	Haiti	1988	1997	-	Oct	lastSun	1:00s	0	S
-Rule	Haiti	2005	only	-	Apr	Sun>=1	0:00	1:00	D
-Rule	Haiti	2005	only	-	Oct	lastSun	0:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Port-au-Prince -4:49:20 -	LMT	1890
-			-4:49	-	PPMT	1917 Jan 24 12:00 # P-a-P MT
-			-5:00	Haiti	E%sT
-
-# Honduras
-# Shanks says 1921 Jan 1; go with Whitman's more precise Apr 1.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Tegucigalpa -5:48:52 -	LMT	1921 Apr
-			-6:00	Salv	C%sT
-#
-# Great Swan I ceded by US to Honduras in 1972
-
-# Jamaica
-
-# From Bob Devine (1988-01-28):
-# Follows US rules.
-
-# From U. S. Naval Observatory (1989-01-19):
-# JAMAICA             5 H  BEHIND UTC
-
-# From Shanks:
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Jamaica	-5:07:12 -	LMT	1890		# Kingston
-			-5:07:12 -	KMT	1912 Feb    # Kingston Mean Time
-			-5:00	-	EST	1974 Apr 28 2:00
-			-5:00	US	E%sT	1984
-			-5:00	-	EST
-
-# Martinique
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Martinique	-4:04:20 -      LMT	1890		# Fort-de-France
-			-4:04:20 -	FFMT	1911 May     # Fort-de-France MT
-			-4:00	-	AST	1980 Apr  6
-			-4:00	1:00	ADT	1980 Sep 28
-			-4:00	-	AST
-
-# Montserrat
-# From Paul Eggert (1997-08-31):
-# Recent volcanic eruptions have forced evacuation of Plymouth, the capital.
-# Luckily, Olveston, the current de facto capital, has the same longitude.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Montserrat	-4:08:52 -	LMT	1911 Jul 1 0:01   # Olveston
-			-4:00	-	AST
-
-# Nicaragua
-#
-# From Steffen Thorsen (1998-12-29):
-# Nicaragua seems to be back at -6:00 but I have not been able to find when
-# they changed from -5:00.
-#
-# From Steffen Thorsen (2005-04-12):
-# I've got reports from 8 different people that Nicaragua just started
-# DST on Sunday 2005-04-10, in order to save energy because of
-# expensive petroleum.  The exact end date for DST is not yet
-# announced, only "September" but some sites also say "mid-September".
-# Some background information is available on the President's official site:
-# http://www.presidencia.gob.ni/Presidencia/Files_index/Secretaria/Notas%20de%20Prensa/Presidente/2005/ABRIL/Gobierno-de-nicaragua-adelanta-hora-oficial-06abril.htm
-# The Decree, no 23-2005 is available here:
-# http://www.presidencia.gob.ni/buscador_gaceta/BD/DECRETOS/2005/Decreto%2023-2005%20Se%20adelanta%20en%20una%20hora%20en%20todo%20el%20territorio%20nacional%20apartir%20de%20las%2024horas%20del%2009%20de%20Abril.pdf
-#
-# From Paul Eggert (2005-05-01):
-# The decree doesn't say anything about daylight saving, but for now let's
-# assume that it is daylight saving and that they'll switch back on the
-# 3rd Sunday in September.
-#
-# From Gwillim Law (2005-04-21):
-# The Associated Press story on the time change, which can be found at
-# http://www.lapalmainteractivo.com/guias/content/gen/ap/America_Latina/AMC_GEN_NICARAGUA_HORA.html
-# and elsewhere, says (fifth paragraph, translated from Spanish):  "The last
-# time that a change of clocks was applied to save energy was in the year 2000
-# during the Arnoldo Aleman administration."...
-# The northamerica file says that Nicaragua has been on UTC-6 continuously
-# since December 1998.  I wasn't able to find any details of Nicaraguan time
-# changes in 2000.  Perhaps a note could be added to the northamerica file, to
-# the effect that we have indirect evidence that DST was observed in 2000.
-#
-# From Jesper Norgaard Welen (2005-11-02):
-# Nicaragua left DST the 2005-10-02 at 00:00 (local time).
-# http://www.presidencia.gob.ni/presidencia/files_index/secretaria/comunicados/2005/septiembre/26septiembre-cambio-hora.htm
-# (2005-09-26)
-#
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Nic	1979	1980	-	Mar	Sun>=16	0:00	1:00	D
-Rule	Nic	1979	1980	-	Jun	Mon>=23	0:00	0	S
-Rule	Nic	1992	only	-	Jan	 1	4:00	1:00	D
-Rule	Nic	1992	only	-	Sep	24	0:00	0	S
-Rule	Nic	2005	only	-	Apr	10	0:00	1:00	D
-Rule	Nic	2005	only	-	Oct	 2	0:00	0	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Managua	-5:45:08 -	LMT	1890
-			-5:45:12 -	MMT	1934 Jun 23 # Managua Mean Time?
-			-6:00	-	CST	1973 May
-			-5:00	-	EST	1975 Feb 16
-			-6:00	Nic	C%sT	1993 Jan 1 4:00
-			-5:00	-	EST	1998 Dec
-			-6:00	Nic	C%sT
-
-# Panama
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Panama	-5:18:08 -	LMT	1890
-			-5:19:36 -	CMT	1908 Apr 22   # Colon Mean Time
-			-5:00	-	EST
-
-# Puerto Rico
-# There are too many San Juans elsewhere, so we'll use `Puerto_Rico'.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Puerto_Rico -4:24:25 -	LMT	1899 Mar 28 12:00    # San Juan
-			-4:00	-	AST	1942 May  3
-			-4:00	1:00	AWT	1945 Sep 30  2:00
-			-4:00	-	AST
-
-# St Kitts-Nevis
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/St_Kitts	-4:10:52 -	LMT	1912 Mar 2	# Basseterre
-			-4:00	-	AST
-
-# St Lucia
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/St_Lucia	-4:04:00 -	LMT	1890		# Castries
-			-4:04:00 -	CMT	1912	    # Castries Mean Time
-			-4:00	-	AST
-
-# St Pierre and Miquelon
-# There are too many St Pierres elsewhere, so we'll use `Miquelon'.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Miquelon	-3:44:40 -	LMT	1911 May 15	# St Pierre
-			-4:00	-	AST	1980 May
-			-3:00	-	PMST	1987 # Pierre & Miquelon Time
-			-3:00	Canada	PM%sT
-
-# St Vincent and the Grenadines
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/St_Vincent	-4:04:56 -	LMT	1890		# Kingstown
-			-4:04:56 -	KMT	1912	   # Kingstown Mean Time
-			-4:00	-	AST
-
-# Turks and Caicos
-# From Paul Eggert (1998-08-06):
-# Shanks says they use US DST rules, but IATA SSIM (1991/1998)
-# says they switch at midnight.  Go with IATA SSIM.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	TC	1979	1986	-	Apr	lastSun	0:00	1:00	D
-Rule	TC	1979	max	-	Oct	lastSun	0:00	0	S
-Rule	TC	1987	max	-	Apr	Sun>=1	0:00	1:00	D
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Grand_Turk	-4:44:32 -	LMT	1890
-			-5:07:12 -	KMT	1912 Feb    # Kingston Mean Time
-			-5:00	TC	E%sT
-
-# British Virgin Is
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Tortola	-4:18:28 -	LMT	1911 Jul    # Road Town
-			-4:00	-	AST
-
-# Virgin Is
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/St_Thomas	-4:19:44 -	LMT	1911 Jul    # Charlotte Amalie
-			-4:00	-	AST
+# @(#)northamerica	7.88
+# <pre>
+
+# also includes Central America and the Caribbean
+
+# This data is by no means authoritative; if you think you know better,
+# go ahead and edit the file (and please send any changes to
+# tz@elsie.nci.nih.gov for general use in the future).
+
+# From Paul Eggert (1999-03-22):
+# A reliable and entertaining source about time zones is
+# Derek Howse, Greenwich time and longitude, Philip Wilson Publishers (1997).
+
+###############################################################################
+
+# United States
+
+# From Paul Eggert (1999-03-31):
+# Howse writes (pp 121-125) that time zones were invented by
+# Professor Charles Ferdinand Dowd (1825-1904),
+# Principal of Temple Grove Ladies' Seminary (Saratoga Springs, NY).
+# His pamphlet ``A System of National Time for Railroads'' (1870)
+# was the result of his proposals at the Convention of Railroad Trunk Lines
+# in New York City (1869-10).  His 1870 proposal was based on Washington, DC,
+# but in 1872-05 he moved the proposed origin to Greenwich.
+# His proposal was adopted by the railroads on 1883-11-18 at 12:00,
+# and the most of the country soon followed suit.
+
+# From Paul Eggert (2005-04-16):
+# That 1883 transition occurred at 12:00 new time, not at 12:00 old time.
+# See p 46 of David Prerau, Seize the daylight, Thunder's Mouth Press (2005).
+
+# From Paul Eggert (1995-12-19):
+# A good source for time zone historical data in the US is
+# Thomas G. Shanks, The American Atlas (5th edition),
+# San Diego: ACS Publications, Inc. (1991).
+# Make sure you have the errata sheet; the book is somewhat useless without it.
+# It is the source for most of the pre-1991 US and Puerto Rico entries below.
+
+# From Paul Eggert (2001-03-06):
+# Daylight Saving Time was first suggested as a joke by Benjamin Franklin
+# in his whimsical essay ``An Economical Project for Diminishing the Cost
+# of Light'' published in the Journal de Paris (1784-04-26).
+# Not everyone is happy with the results:
+#
+#	I don't really care how time is reckoned so long as there is some
+#	agreement about it, but I object to being told that I am saving
+#	daylight when my reason tells me that I am doing nothing of the kind.
+#	I even object to the implication that I am wasting something
+#	valuable if I stay in bed after the sun has risen.  As an admirer
+#	of moonlight I resent the bossy insistence of those who want to
+#	reduce my time for enjoying it.  At the back of the Daylight Saving
+#	scheme I detect the bony, blue-fingered hand of Puritanism, eager
+#	to push people into bed earlier, and get them up earlier, to make
+#	them healthy, wealthy and wise in spite of themselves.
+#
+#	-- Robertson Davies, The diary of Samuel Marchbanks,
+#	   Clarke, Irwin (1947), XIX, Sunday
+#
+# For more about the first ten years of DST in the United States, see
+# Robert Garland's <a href="http://www.clpgh.org/exhibit/dst.html">
+# Ten years of daylight saving from the Pittsburgh standpoint
+# (Carnegie Library of Pittsburgh, 1927)</a>.
+#
+# Shanks says that DST was called "War Time" in the US in 1918 and 1919.
+# However, DST was imposed by the Standard Time Act of 1918, which
+# was the first nationwide legal time standard, and apparently
+# time was just called "Standard Time" or "Daylight Saving Time".
+
+# From Arthur David Olson:
+# US Daylight Saving Time ended on the last Sunday of *October* in 1974.
+# See, for example, the front page of the Saturday, 1974-10-26
+# and Sunday, 1974-10-27 editions of the Washington Post.
+
+# From Arthur David Olson:
+# Before the Uniform Time Act of 1966 took effect in 1967, observance of
+# Daylight Saving Time in the US was by local option, except during wartime.
+
+# From Arthur David Olson (2000-09-25):
+# Last night I heard part of a rebroadcast of a 1945 Arch Oboler radio drama.
+# In the introduction, Oboler spoke of "Eastern Peace Time."
+# An AltaVista search turned up
+# <a href="http://rowayton.org/rhs/hstaug45.html">:
+# "When the time is announced over the radio now, it is 'Eastern Peace
+# Time' instead of the old familiar 'Eastern War Time.'  Peace is wonderful."
+# </a> (August 1945) by way of confirmation.
+
+# From Joseph Gallant citing
+# George H. Douglas, _The Early Days of Radio Broadcasting_ (1987):
+# At 7 P.M. (Eastern War Time) [on 1945-08-14], the networks were set
+# to switch to London for Attlee's address, but the American people
+# never got to hear his speech live. According to one press account,
+# CBS' Bob Trout was first to announce the word of Japan's surrender,
+# but a few seconds later, NBC, ABC and Mutual also flashed the word
+# of surrender, all of whom interrupting the bells of Big Ben in
+# London which were to precede Mr. Attlee's speech.
+
+# From Paul Eggert (2003-02-09): It was Robert St John, not Bob Trout.  From
+# Myrna Oliver's obituary of St John on page B16 of today's Los Angeles Times:
+#
+# ... a war-weary U.S. clung to radios, awaiting word of Japan's surrender.
+# Any announcement from Asia would reach St. John's New York newsroom on a
+# wire service teletype machine, which had prescribed signals for major news.
+# Associated Press, for example, would ring five bells before spewing out
+# typed copy of an important story, and 10 bells for news "of transcendental
+# importance."
+#
+# On Aug. 14, stalling while talking steadily into the NBC networks' open
+# microphone, St. John heard five bells and waited only to hear a sixth bell,
+# before announcing confidently: "Ladies and gentlemen, World War II is over.
+# The Japanese have agreed to our surrender terms."
+#
+# He had scored a 20-second scoop on other broadcasters.
+
+# From Arthur David Olson (2005-08-22):
+# Paul has been careful to use the "US" rules only in those locations
+# that are part of the United States; this reflects the real scope of
+# U.S. government action.  So even though the "US" rules have changed
+# in the latest release, other countries won't be affected.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	US	1918	1919	-	Mar	lastSun	2:00	1:00	D
+Rule	US	1918	1919	-	Oct	lastSun	2:00	0	S
+Rule	US	1942	only	-	Feb	9	2:00	1:00	W # War
+Rule	US	1945	only	-	Aug	14	23:00u	1:00	P # Peace
+Rule	US	1945	only	-	Sep	30	2:00	0	S
+Rule	US	1967	2006	-	Oct	lastSun	2:00	0	S
+Rule	US	1967	1973	-	Apr	lastSun	2:00	1:00	D
+Rule	US	1974	only	-	Jan	6	2:00	1:00	D
+Rule	US	1975	only	-	Feb	23	2:00	1:00	D
+Rule	US	1976	1986	-	Apr	lastSun	2:00	1:00	D
+Rule	US	1987	2006	-	Apr	Sun>=1	2:00	1:00	D
+Rule	US	2007	max	-	Mar	Sun>=8	2:00	1:00	D
+Rule	US	2007	max	-	Nov	Sun>=1	2:00	0	S
+
+# From Arthur David Olson, 2005-12-19
+# We generate the files specified below to guard against old files with
+# obsolete information being left in the time zone binary directory.
+# We limit the list to names that have appeared in previous versions of
+# this time zone package.
+# We do these as separate Zones rather than as Links to avoid problems if
+# a particular place changes whether it observes DST.
+# We put these specifications here in the northamerica file both to
+# increase the chances that they'll actually get compiled and to
+# avoid the need to duplicate the US rules in another file.
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	EST		 -5:00	-	EST
+Zone	MST		 -7:00	-	MST
+Zone	HST		-10:00	-	HST
+Zone	EST5EDT		 -5:00	US	E%sT
+Zone	CST6CDT		 -6:00	US	C%sT
+Zone	MST7MDT		 -7:00	US	M%sT
+Zone	PST8PDT		 -8:00	US	P%sT
+
+# From Bob Devine (1988-01-28):
+# ...Alaska (and Hawaii) had the timezone names changed in 1967.
+#    old			 new
+#    Pacific Standard Time(PST)  -same-
+#    Yukon Standard Time(YST)    -same-
+#    Central Alaska S.T. (CAT)   Alaska-Hawaii St[an]dard Time (AHST)
+#    Nome Standard Time (NT)     Bering Standard Time (BST)
+#
+# ...Alaska's timezone lines were redrawn in 1983 to give only 2 tz.
+#    The YST zone now covers nearly all of the state, AHST just part
+#    of the Aleutian islands.   No DST.
+
+# From Paul Eggert (1995-12-19):
+# The tables below use `NST', not `NT', for Nome Standard Time.
+# I invented `CAWT' for Central Alaska War Time.
+
+# From U. S. Naval Observatory (1989-01-19):
+# USA  EASTERN       5 H  BEHIND UTC    NEW YORK, WASHINGTON
+# USA  EASTERN       4 H  BEHIND UTC    APR 3 - OCT 30
+# USA  CENTRAL       6 H  BEHIND UTC    CHICAGO, HOUSTON
+# USA  CENTRAL       5 H  BEHIND UTC    APR 3 - OCT 30
+# USA  MOUNTAIN      7 H  BEHIND UTC    DENVER
+# USA  MOUNTAIN      6 H  BEHIND UTC    APR 3 - OCT 30
+# USA  PACIFIC       8 H  BEHIND UTC    L.A., SAN FRANCISCO
+# USA  PACIFIC       7 H  BEHIND UTC    APR 3 - OCT 30
+# USA  ALASKA STD    9 H  BEHIND UTC    MOST OF ALASKA     (AKST)
+# USA  ALASKA STD    8 H  BEHIND UTC    APR 3 - OCT 30 (AKDT)
+# USA  ALEUTIAN     10 H  BEHIND UTC    ISLANDS WEST OF 170W
+# USA  - " -         9 H  BEHIND UTC    APR 3 - OCT 30
+# USA  HAWAII       10 H  BEHIND UTC
+# USA  BERING       11 H  BEHIND UTC    SAMOA, MIDWAY
+
+# From Arthur David Olson (1989-01-21):
+# The above dates are for 1988.
+# Note the "AKST" and "AKDT" abbreviations, the claim that there's
+# no DST in Samoa, and the claim that there is DST in Alaska and the
+# Aleutians.
+
+# From Arthur David Olson (1988-02-13):
+# Legal standard time zone names, from United States Code (1982 Edition and
+# Supplement III), Title 15, Chapter 6, Section 260 and forward.  First, names
+# up to 1967-04-01 (when most provisions of the Uniform Time Act of 1966
+# took effect), as explained in sections 263 and 261:
+#	(none)
+#	United States standard eastern time
+#	United States standard mountain time
+#	United States standard central time
+#	United States standard Pacific time
+#	(none)
+#	United States standard Alaska time
+#	(none)
+# Next, names from 1967-04-01 until 1983-11-30 (the date for
+# public law 98-181):
+#	Atlantic standard time
+#	eastern standard time
+#	central standard time
+#	mountain standard time
+#	Pacific standard time
+#	Yukon standard time
+#	Alaska-Hawaii standard time
+#	Bering standard time
+# And after 1983-11-30:
+#	Atlantic standard time
+#	eastern standard time
+#	central standard time
+#	mountain standard time
+#	Pacific standard time
+#	Alaska standard time
+#	Hawaii-Aleutian standard time
+#	Samoa standard time
+# The law doesn't give abbreviations.
+#
+# From Paul Eggert (2000-01-08), following a heads-up from Rives McDow:
+# Public law 106-564 (2000-12-23) introduced the abbreviation
+# "Chamorro Standard Time" for time in Guam and the Northern Marianas.
+# See the file "australasia".
+ 
+# From Arthur David Olson, 2005-08-09
+# The following was signed into law on 2005-08-08.
+#
+# H.R. 6, Energy Policy Act of 2005, SEC. 110. DAYLIGHT SAVINGS.
+#   (a) Amendment- Section 3(a) of the Uniform Time Act of 1966 (15
+#   U.S.C. 260a(a)) is amended--
+#     (1) by striking `first Sunday of April' and inserting `second
+#     Sunday of March'; and
+#     (2) by striking `last Sunday of October' and inserting `first
+#     Sunday of November'.
+#   (b) Effective Date- Subsection (a) shall take effect 1 year after the
+#   date of enactment of this Act or March 1, 2007, whichever is later.
+#   (c) Report to Congress- Not later than 9 months after the effective
+#   date stated in subsection (b), the Secretary shall report to Congress
+#   on the impact of this section on energy consumption in the United
+#   States.
+#   (d) Right to Revert- Congress retains the right to revert the
+#   Daylight Saving Time back to the 2005 time schedules once the
+#   Department study is complete.
+
+# US eastern time, represented by New York
+
+# Connecticut, Delaware, District of Columbia, most of Florida,
+# Georgia, southeast Indiana (Dearborn and Ohio counties), eastern Kentucky
+# (except America/Kentucky/Louisville below), Maine, Maryland, Massachusetts,
+# New Hampshire, New Jersey, New York, North Carolina, Ohio,
+# Pennsylvania, Rhode Island, South Carolina, eastern Tennessee,
+# Vermont, Virginia, West Virginia
+
+# From Dave Cantor (2004-11-02):
+# Early this summer I had the occasion to visit the Mount Washington
+# Observatory weather station atop (of course!) Mount Washington [, NH]....
+# One of the staff members said that the station was on Eastern Standard Time
+# and didn't change their clocks for Daylight Saving ... so that their
+# reports will always have times which are 5 hours behind UTC.
+
+# From Paul Eggert (2005-08-26):
+# According to today's Huntsville Times
+# <http://www.al.com/news/huntsvilletimes/index.ssf?/base/news/1125047783228320.xml&coll=1>
+# a few towns on Alabama's "eastern border with Georgia, such as Phenix City
+# in Russell County, Lanett in Chambers County and some towns in Lee County,
+# set their watches and clocks on Eastern time."  It quotes H.H. "Bubba"
+# Roberts, city administrator in Phenix City. as saying "We are in the Central
+# time zone, but we do go by the Eastern time zone because so many people work
+# in Columbus." 
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
+Rule	NYC	1920	only	-	Mar	lastSun	2:00	1:00	D
+Rule	NYC	1920	only	-	Oct	lastSun	2:00	0	S
+Rule	NYC	1921	1966	-	Apr	lastSun	2:00	1:00	D
+Rule	NYC	1921	1954	-	Sep	lastSun	2:00	0	S
+Rule	NYC	1955	1966	-	Oct	lastSun	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/New_York	-4:56:02 -	LMT	1883 Nov 18 12:03:58
+			-5:00	US	E%sT	1920
+			-5:00	NYC	E%sT	1942
+			-5:00	US	E%sT	1946
+			-5:00	NYC	E%sT	1967
+			-5:00	US	E%sT
+
+# US central time, represented by Chicago
+
+# Alabama, Arkansas, Florida panhandle (Bay, Calhoun, Escambia,
+# Gulf, Holmes, Jackson, Okaloosa, Santa Rosa, Walton, and
+# Washington counties), Illinois, western Indiana
+# (Gibson, Jasper, Lake, LaPorte, Newton, Porter, Posey, Spencer,
+# Vanderburgh, and Warrick counties), Iowa, most of Kansas, western
+# Kentucky, Louisiana, Minnesota, Mississippi, Missouri, eastern
+# Nebraska, eastern North Dakota, Oklahoma, eastern South Dakota,
+# western Tennessee, most of Texas, Wisconsin
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
+Rule	Chicago	1920	only	-	Jun	13	2:00	1:00	D
+Rule	Chicago	1920	1921	-	Oct	lastSun	2:00	0	S
+Rule	Chicago	1921	only	-	Mar	lastSun	2:00	1:00	D
+Rule	Chicago	1922	1966	-	Apr	lastSun	2:00	1:00	D
+Rule	Chicago	1922	1954	-	Sep	lastSun	2:00	0	S
+Rule	Chicago	1955	1966	-	Oct	lastSun	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Chicago	-5:50:36 -	LMT	1883 Nov 18 12:09:24
+			-6:00	US	C%sT	1920
+			-6:00	Chicago	C%sT	1936 Mar  1 2:00
+			-5:00	-	EST	1936 Nov 15 2:00
+			-6:00	Chicago	C%sT	1942
+			-6:00	US	C%sT	1946
+			-6:00	Chicago	C%sT	1967
+			-6:00	US	C%sT
+# Oliver County, ND switched from mountain to central time on 1992-10-25.
+Zone America/North_Dakota/Center -6:45:12 - LMT	1883 Nov 18 12:14:48
+			-7:00	US	M%sT	1992 Oct 25 02:00
+			-6:00	US	C%sT
+# From Paul Eggert (2006-01-20):
+# The following is not implemented yet.
+# What is the most populous city in that area?
+# From http://www.statoids.com/tus.html (2006-01-20):
+# 2003-10-26 02:00: All of Morton County, ND, and the part of Sioux
+# County, ND east of ND route 31 moved from MT to CT.  (The area
+# around Fort Yates in Sioux County and the area around Mandan in
+# Morton County were already in CT.)
+
+# US mountain time, represented by Denver
+#
+# Colorado, far western Kansas, Montana, western
+# Nebraska, Nevada border (Jackpot, Owyhee, and Mountain City),
+# New Mexico, southwestern North Dakota, far eastern Oregon,
+# western South Dakota, far western Texas (El Paso County, Hudspeth County,
+# and Pine Springs and Nickel Creek in Culberson County), Utah, Wyoming
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
+Rule	Denver	1920	1921	-	Mar	lastSun	2:00	1:00	D
+Rule	Denver	1920	only	-	Oct	lastSun	2:00	0	S
+Rule	Denver	1921	only	-	May	22	2:00	0	S
+Rule	Denver	1965	1966	-	Apr	lastSun	2:00	1:00	D
+Rule	Denver	1965	1966	-	Oct	lastSun	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Denver	-6:59:56 -	LMT	1883 Nov 18 12:00:04
+			-7:00	US	M%sT	1920
+			-7:00	Denver	M%sT	1942
+			-7:00	US	M%sT	1946
+			-7:00	Denver	M%sT	1967
+			-7:00	US	M%sT
+
+# US Pacific time, represented by Los Angeles
+#
+# California, northern Idaho (Benewah, Bonner, Boundary, Clearwater,
+# Idaho, Kootenai, Latah, Lewis, Nez Perce, and Shoshone counties),
+# most of Nevada, most of Oregon, and Washington
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
+Rule	CA	1948	only	-	Mar	14	2:00	1:00	D
+Rule	CA	1949	only	-	Jan	 1	2:00	0	S
+Rule	CA	1950	1966	-	Apr	lastSun	2:00	1:00	D
+Rule	CA	1950	1961	-	Sep	lastSun	2:00	0	S
+Rule	CA	1962	1966	-	Oct	lastSun	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Los_Angeles -7:52:58 -	LMT	1883 Nov 18 12:07:02
+			-8:00	US	P%sT	1946
+			-8:00	CA	P%sT	1967
+			-8:00	US	P%sT
+
+# Alaska
+# AK%sT is the modern abbreviation for -9:00 per USNO.
+#
+# From Paul Eggert (2001-05-30):
+# Howse writes that Alaska switched from the Julian to the Gregorian calendar,
+# and from east-of-GMT to west-of-GMT days, when the US bought it from Russia.
+# This was on 1867-10-18, a Friday; the previous day was 1867-10-06 Julian,
+# also a Friday.  Include only the time zone part of this transition,
+# ignoring the switch from Julian to Gregorian, since we can't represent
+# the Julian calendar.
+#
+# As far as we know, none of the exact locations mentioned below were
+# permanently inhabited in 1867 by anyone using either calendar.
+# (Yakutat was colonized by the Russians in 1799, but the settlement
+# was destroyed in 1805 by a Yakutat-kon war party.)  However, there
+# were nearby inhabitants in some cases and for our purposes perhaps
+# it's best to simply use the official transition.
+#
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Juneau	 15:02:19 -	LMT	1867 Oct 18
+			 -8:57:41 -	LMT	1900 Aug 20 12:00
+			 -8:00	-	PST	1942
+			 -8:00	US	P%sT	1946
+			 -8:00	-	PST	1969
+			 -8:00	US	P%sT	1983 Oct 30 2:00
+			 -9:00	US	Y%sT	1983 Nov 30
+			 -9:00	US	AK%sT
+Zone America/Yakutat	 14:41:05 -	LMT	1867 Oct 18
+			 -9:18:55 -	LMT	1900 Aug 20 12:00
+			 -9:00	-	YST	1942
+			 -9:00	US	Y%sT	1946
+			 -9:00	-	YST	1969
+			 -9:00	US	Y%sT	1983 Nov 30
+			 -9:00	US	AK%sT
+Zone America/Anchorage	 14:00:24 -	LMT	1867 Oct 18
+			 -9:59:36 -	LMT	1900 Aug 20 12:00
+			-10:00	-	CAT	1942
+			-10:00	US	CAT/CAWT 1946
+			-10:00	-	CAT	1967 Apr
+			-10:00	-	AHST	1969
+			-10:00	US	AH%sT	1983 Oct 30 2:00
+			 -9:00	US	Y%sT	1983 Nov 30
+			 -9:00	US	AK%sT
+Zone America/Nome	 12:58:21 -	LMT	1867 Oct 18
+			-11:01:38 -	LMT	1900 Aug 20 12:00
+			-11:00	-	NST	1942
+			-11:00	US	N%sT	1946
+			-11:00	-	NST	1967 Apr
+			-11:00	-	BST	1969
+			-11:00	US	B%sT	1983 Oct 30 2:00
+			 -9:00	US	Y%sT	1983 Nov 30
+			 -9:00	US	AK%sT
+Zone America/Adak	 12:13:21 -	LMT	1867 Oct 18
+			-11:46:38 -	LMT	1900 Aug 20 12:00
+			-11:00	-	NST	1942
+			-11:00	US	N%sT	1946
+			-11:00	-	NST	1967 Apr
+			-11:00	-	BST	1969
+			-11:00	US	B%sT	1983 Oct 30 2:00
+			-10:00	US	AH%sT	1983 Nov 30
+			-10:00	US	HA%sT
+# The following switches don't quite make our 1970 cutoff.
+#
+# Shanks writes that part of southwest Alaska (e.g. Aniak)
+# switched from -11:00 to -10:00 on 1968-09-22 at 02:00,
+# and another part (e.g. Akiak) made the same switch five weeks later.
+#
+# From David Flater (2004-11-09):
+# In e-mail, 2004-11-02, Ray Hudson, historian/liaison to the Unalaska
+# Historic Preservation Commission, provided this information, which
+# suggests that Unalaska deviated from statutory time from early 1967
+# possibly until 1983:
+#
+#  Minutes of the Unalaska City Council Meeting, January 10, 1967:
+#  "Except for St. Paul and Akutan, Unalaska is the only important
+#  location not on Alaska Standard Time.  The following resolution was
+#  made by William Robinson and seconded by Henry Swanson:  Be it
+#  resolved that the City of Unalaska hereby goes to Alaska Standard
+#  Time as of midnight Friday, January 13, 1967 (1 A.M. Saturday,
+#  January 14, Alaska Standard Time.)  This resolution was passed with
+#  three votes for and one against."
+
+# Hawaii
+#
+# From Arthur David Olson:
+# And then there's Hawaii.
+# DST was observed for one day in 1933;
+# standard time was changed by half an hour in 1947;
+# it's always standard as of 1986.
+#
+# From Paul Eggert:
+# Shanks says the 1933 experiment lasted for three weeks.  Go with Shanks.
+#
+Zone Pacific/Honolulu	-10:31:26 -	LMT	1900 Jan  1 12:00
+			-10:30	-	HST	1933 Apr 30 2:00
+			-10:30	1:00	HDT	1933 May 21 2:00
+			-10:30	US	H%sT	1947 Jun  8 2:00
+			-10:00	-	HST
+
+# Now we turn to US areas that have diverged from the consensus since 1970.
+
+# Arizona mostly uses MST.
+
+# From Paul Eggert (2002-10-20):
+#
+# The information in the rest of this paragraph is derived from the
+# <a href="http://www.dlapr.lib.az.us/links/daylight.htm">
+# Daylight Saving Time web page (2002-01-23)</a> maintained by the
+# Arizona State Library, Archives and Public Records.
+# Between 1944-01-01 and 1944-04-01 the State of Arizona used standard
+# time, but by federal law railroads, airlines, bus lines, military
+# personnel, and some engaged in interstate commerce continued to
+# observe war (i.e., daylight saving) time.  The 1944-03-17 Phoenix
+# Gazette says that was the date the law changed, and that 04-01 was
+# the date the state's clocks would change.  In 1945 the State of
+# Arizona used standard time all year, again with exceptions only as
+# mandated by federal law.  Arizona observed DST in 1967, but Arizona
+# Laws 1968, ch. 183 (effective 1968-03-21) repealed DST.
+#
+# Shanks says the 1944 experiment came to an end on 1944-03-17.
+# Go with the Arizona State Library instead.
+
+Zone America/Phoenix	-7:28:18 -	LMT	1883 Nov 18 11:31:42
+			-7:00	US	M%sT	1944 Jan  1 00:01
+			-7:00	-	MST	1944 Apr  1 00:01
+			-7:00	US	M%sT	1944 Oct  1 00:01
+			-7:00	-	MST	1967
+			-7:00	US	M%sT	1968 Mar 21
+			-7:00	-	MST
+# From Arthur David Olson (1988-02-13):
+# A writer from the Inter Tribal Council of Arizona, Inc.,
+# notes in private correspondence dated 1987-12-28 that "Presently, only the
+# Navajo Nation participates in the Daylight Saving Time policy, due to its
+# large size and location in three states."  (The "only" means that other
+# tribal nations don't use DST.)
+
+Link America/Denver America/Shiprock
+
+# Southern Idaho (Ada, Adams, Bannock, Bear Lake, Bingham, Blaine,
+# Boise, Bonneville, Butte, Camas, Canyon, Caribou, Cassia, Clark,
+# Custer, Elmore, Franklin, Fremont, Gem, Gooding, Jefferson, Jerome,
+# Lemhi, Lincoln, Madison, Minidoka, Oneida, Owyhee, Payette, Power,
+# Teton, Twin Falls, Valley, Washington counties) and eastern Oregon
+# switched four weeks late in 1974.
+#
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Boise	-7:44:49 -	LMT	1883 Nov 18 12:15:11
+			-8:00	US	P%sT	1923 May 13 2:00
+			-7:00	US	M%sT	1974
+			-7:00	-	MST	1974 Feb  3 2:00
+			-7:00	US	M%sT
+
+# Indiana
+#
+# For a map of Indiana's time zone regions, see:
+# <a href="http://www.mccsc.edu/time.html">
+# What time is it in Indiana?
+# </a> (2005-10-30)
+#
+# From Paul Eggert (2006-01-20):
+# Since 1970, most of Indiana has been like America/Indiana/Indianapolis,
+# with the following exceptions:
+#
+# - Gibson, Jasper, Lake, LaPorte, Newton, Porter, Posey, Spencer,
+#   Vandenburgh, and Warrick counties have been like America/Chicago.
+#
+# - Dearborn and Ohio counties have been like America/New_York.
+#
+# - Clark, Floyd, and Harrison counties have been like
+#   America/Kentucky/Louisville.
+#
+# - Daviess, Dubois, Knox, Martin, Perry, and Pulaski counties
+#   have been like America/Indiana/Vincennes.
+#
+# - Crawford, Pike, Starke, and Switzerland counties have their own time zone
+#   histories as noted below.
+#
+# Shanks partitioned Indiana into 345 regions, each with its own time history,
+# and wrote ``Even newspaper reports present contradictory information.''
+# Fortunately, most of the complexity occurred before our cutoff date of 1970.
+#
+# Other than Indianapolis, the Indiana place names are so nondescript
+# that they would be ambiguous if we left them at the `America' level.
+# So we reluctantly put them all in a subdirectory `America/Indiana'.
+
+# From Paul Eggert (2005-08-16):
+# http://www.mccsc.edu/time.html says that Indiana will use DST starting 2006.
+
+# From Deborah Goldsmith (2006-01-18):
+# http://dmses.dot.gov/docimages/pdf95/382329_web.pdf
+# From Paul Eggert (2006-01-20):
+# It says "DOT is relocating the time zone boundary in Indiana to move Starke,
+# Pulaski, Knox, Daviess, Martin, Pike, Dubois, and Perry Counties from the
+# Eastern Time Zone to the Central Time Zone.... The effective date of
+# this rule is 2:OO a.m. EST Sunday, April 2, 2006, which is the
+# changeover date from standard time to Daylight Saving Time."
+# Strictly speaking, this means the affected counties will change their
+# clocks twice that night, but this obviously is in error.  The intent
+# is that 01:59:59 EST be followed by 02:00:00 CDT.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
+Rule Indianapolis 1941	only	-	Jun	22	2:00	1:00	D
+Rule Indianapolis 1941	1954	-	Sep	lastSun	2:00	0	S
+Rule Indianapolis 1946	1954	-	Apr	lastSun	2:00	1:00	D
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Indiana/Indianapolis -5:44:38 - LMT 1883 Nov 18 12:15:22
+			-6:00	US	C%sT	1920
+			-6:00 Indianapolis C%sT	1942
+			-6:00	US	C%sT	1946
+			-6:00 Indianapolis C%sT	1955 Apr 24 2:00
+			-5:00	-	EST	1957 Sep 29 2:00
+			-6:00	-	CST	1958 Apr 27 2:00
+			-5:00	-	EST	1969
+			-5:00	US	E%sT	1971
+			-5:00	-	EST	2006
+			-5:00	US	E%sT
+#
+# Eastern Crawford County, Indiana, left its clocks alone in 1974,
+# as well as from 1976 through 2005.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
+Rule	Marengo	1951	only	-	Apr	lastSun	2:00	1:00	D
+Rule	Marengo	1951	only	-	Sep	lastSun	2:00	0	S
+Rule	Marengo	1954	1960	-	Apr	lastSun	2:00	1:00	D
+Rule	Marengo	1954	1960	-	Sep	lastSun	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Indiana/Marengo -5:45:23 -	LMT	1883 Nov 18 12:14:37
+			-6:00	US	C%sT	1951
+			-6:00	Marengo	C%sT	1961 Apr 30 2:00
+			-5:00	-	EST	1969
+			-5:00	US	E%sT	1974 Jan  6 2:00
+			-6:00	1:00	CDT	1974 Oct 27 2:00
+			-5:00	US	E%sT	1976
+			-5:00	-	EST	2006
+			-5:00	US	E%sT
+#
+# Daviess, Dubois, Knox, Martin, Perry, and Pulaski Counties, Indiana,
+# switched from eastern to central time in April 2006.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
+Rule Vincennes	1946	only	-	Apr	lastSun	2:00	1:00	D
+Rule Vincennes	1946	only	-	Sep	lastSun	2:00	0	S
+Rule Vincennes	1953	1954	-	Apr	lastSun	2:00	1:00	D
+Rule Vincennes	1953	1959	-	Sep	lastSun	2:00	0	S
+Rule Vincennes	1955	only	-	May	 1	0:00	1:00	D
+Rule Vincennes	1956	1963	-	Apr	lastSun	2:00	1:00	D
+Rule Vincennes	1960	only	-	Oct	lastSun	2:00	0	S
+Rule Vincennes	1961	only	-	Sep	lastSun	2:00	0	S
+Rule Vincennes	1962	1963	-	Oct	lastSun	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Indiana/Vincennes -5:50:07 - LMT	1883 Nov 18 12:09:53
+			-6:00	US	C%sT	1946
+			-6:00 Vincennes	C%sT	1964 Apr 26 2:00
+			-5:00	-	EST	1969
+			-5:00	US	E%sT	1971
+			-5:00	-	EST	2006 Apr  2 2:00
+			-6:00	US	C%sT
+# 
+# Pike County, Indiana moved from central to eastern time in 1977,
+# then switched back in 2006.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
+Rule	Pike	1955	only	-	May	 1	0:00	1:00	D
+Rule	Pike	1955	1960	-	Sep	lastSun	2:00	0	S
+Rule	Pike	1956	1964	-	Apr	lastSun	2:00	1:00	D
+Rule	Pike	1961	1964	-	Oct	lastSun	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Indiana/Petersburg -5:49:07 - LMT	1883 Nov 18 12:10:53
+			-6:00	US	C%sT	1955
+			-6:00	Pike	C%sT	1965 Apr 25 2:00
+			-5:00	-	EST	1966 Oct 30 2:00
+			-6:00	US	C%sT	1977 Oct 30 2:00
+			-5:00	-	EST	2006 Apr  2 2:00
+			-6:00	US	C%sT
+#
+# Starke County, Indiana moved from central to eastern time in 1991,
+# then switched back in 2006.
+# From Arthur David Olson (1991-10-28):
+# An article on page A3 of the Sunday, 1991-10-27 Washington Post
+# notes that Starke County switched from Central time to Eastern time as of
+# 1991-10-27.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
+Rule	Starke	1947	1961	-	Apr	lastSun	2:00	1:00	D
+Rule	Starke	1947	1954	-	Sep	lastSun	2:00	0	S
+Rule	Starke	1955	1956	-	Oct	lastSun	2:00	0	S
+Rule	Starke	1957	1958	-	Sep	lastSun	2:00	0	S
+Rule	Starke	1959	1961	-	Oct	lastSun	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Indiana/Knox -5:46:30 -	LMT	1883 Nov 18 12:13:30
+			-6:00	US	C%sT	1947
+			-6:00	Starke	C%sT	1962 Apr 29 2:00
+			-5:00	-	EST	1963 Oct 27 2:00
+			-6:00	US	C%sT	1991 Oct 27 2:00
+			-5:00	-	EST	2006 Apr  2 2:00
+			-6:00	US	C%sT
+#
+# Switzerland County, Indiana, did not observe DST from 1973 through 2005.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Indiana/Vevay -5:40:16 -	LMT	1883 Nov 18 12:19:44
+			-6:00	US	C%sT	1954 Apr 25 2:00
+			-5:00	-	EST	1969
+			-5:00	US	E%sT	1973
+			-5:00	-	EST	2006
+			-5:00	US	E%sT
+
+# Part of Kentucky left its clocks alone in 1974.
+# This also includes Clark, Floyd, and Harrison counties in Indiana.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
+Rule Louisville	1921	only	-	May	1	2:00	1:00	D
+Rule Louisville	1921	only	-	Sep	1	2:00	0	S
+Rule Louisville	1941	1961	-	Apr	lastSun	2:00	1:00	D
+Rule Louisville	1941	only	-	Sep	lastSun	2:00	0	S
+Rule Louisville	1946	only	-	Jun	2	2:00	0	S
+Rule Louisville	1950	1955	-	Sep	lastSun	2:00	0	S
+Rule Louisville	1956	1960	-	Oct	lastSun	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Kentucky/Louisville -5:43:02 -	LMT	1883 Nov 18 12:16:58
+			-6:00	US	C%sT	1921
+			-6:00 Louisville C%sT	1942
+			-6:00	US	C%sT	1946
+			-6:00 Louisville C%sT	1961 Jul 23 2:00
+			-5:00	-	EST	1968
+			-5:00	US	E%sT	1974 Jan  6 2:00
+			-6:00	1:00	CDT	1974 Oct 27 2:00
+			-5:00	US	E%sT
+#
+# Wayne County, Kentucky
+#
+# From
+# <a href="http://www.lake-cumberland.com/life/archive/news990129time.shtml">
+# Lake Cumberland LIFE
+# </a> (1999-01-29) via WKYM-101.7:
+# Clinton County has joined Wayne County in asking the DoT to change from
+# the Central to the Eastern time zone....  The Wayne County government made
+# the same request in December.  And while Russell County officials have not
+# taken action, the majority of respondents to a poll conducted there in
+# August indicated they would like to change to "fast time" also.
+# The three Lake Cumberland counties are the farthest east of any U.S.
+# location in the Central time zone.
+#
+# From Rich Wales (2000-08-29):
+# After prolonged debate, and despite continuing deep differences of opinion,
+# Wayne County (central Kentucky) is switching from Central (-0600) to Eastern
+# (-0500) time.  They won't "fall back" this year.  See Sara Shipley,
+# The difference an hour makes, Nando Times (2000-08-29 15:33 -0400).
+#
+# From Paul Eggert (2001-07-16):
+# The final rule was published in the
+# <a href="http://frwebgate.access.gpo.gov/cgi-bin/getdoc.cgi?dbname=2000_register&docid=fr17au00-22">
+# Federal Register 65, 160 (2000-08-17), page 50154-50158.
+# </a>
+#
+Zone America/Kentucky/Monticello -5:39:24 - LMT	1883 Nov 18 12:20:36
+			-6:00	US	C%sT	1946
+			-6:00	-	CST	1968
+			-6:00	US	C%sT	2000 Oct 29  2:00
+			-5:00	US	E%sT
+
+
+# From Rives McDow (2000-08-30):
+# Here ... are all the changes in the US since 1985.
+# Kearny County, KS (put all of county on central;
+#	previously split between MST and CST) ... 1990-10
+# Starke County, IN (from CST to EST) ... 1991-10
+# Oliver County, ND (from MST to CST) ... 1992-10
+# West Wendover, NV (from PST TO MST) ... 1999-10
+# Wayne County, KY (from CST to EST) ... 2000-10
+#
+# From Paul Eggert (2001-07-17):
+# We don't know where the line used to be within Kearny County, KS,
+# so omit that change for now.
+# See America/Indiana/Knox for the Starke County, IN change.
+# See America/North_Dakota/Center for the Oliver County, ND change.
+# West Wendover, NV officially switched from Pacific to mountain time on
+# 1999-10-31.  See the
+# <a href="http://frwebgate.access.gpo.gov/cgi-bin/getdoc.cgi?dbname=1999_register&docid=fr21oc99-15">
+# Federal Register 64, 203 (1999-10-21), page 56705-56707.
+# </a>
+# However, the Federal Register says that West Wendover already operated
+# on mountain time, and the rule merely made this official;
+# hence a separate tz entry is not needed.
+
+# Michigan
+#
+# From Bob Devine (1988-01-28):
+# Michigan didn't observe DST from 1968 to 1973.
+#
+# From Paul Eggert (1999-03-31):
+# Shanks writes that Michigan started using standard time on 1885-09-18,
+# but Howse writes (pp 124-125, referring to Popular Astronomy, 1901-01)
+# that Detroit kept
+#
+#	local time until 1900 when the City Council decreed that clocks should
+#	be put back twenty-eight minutes to Central Standard Time.  Half the
+#	city obeyed, half refused.  After considerable debate, the decision
+#	was rescinded and the city reverted to Sun time.  A derisive offer to
+#	erect a sundial in front of the city hall was referred to the
+#	Committee on Sewers.  Then, in 1905, Central time was adopted
+#	by city vote.
+#
+# This story is too entertaining to be false, so go with Howse over Shanks.
+#
+# From Paul Eggert (2001-03-06):
+# Garland (1927) writes ``Cleveland and Detroit advanced their clocks
+# one hour in 1914.''  This change is not in Shanks.  We have no more
+# info, so omit this for now.
+#
+# Most of Michigan observed DST from 1973 on, but was a bit late in 1975.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
+Rule	Detroit	1948	only	-	Apr	lastSun	2:00	1:00	D
+Rule	Detroit	1948	only	-	Sep	lastSun	2:00	0	S
+Rule	Detroit	1967	only	-	Jun	14	2:00	1:00	D
+Rule	Detroit	1967	only	-	Oct	lastSun	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Detroit	-5:32:11 -	LMT	1905
+			-6:00	-	CST	1915 May 15 2:00
+			-5:00	-	EST	1942
+			-5:00	US	E%sT	1946
+			-5:00	Detroit	E%sT	1973
+			-5:00	US	E%sT	1975
+			-5:00	-	EST	1975 Apr 27 2:00
+			-5:00	US	E%sT
+#
+# Dickinson, Gogebic, Iron, and Menominee Counties, Michigan,
+# switched from EST to CST/CDT in 1973.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
+Rule Menominee	1946	only	-	Apr	lastSun	2:00	1:00	D
+Rule Menominee	1946	only	-	Sep	lastSun	2:00	0	S
+Rule Menominee	1966	only	-	Apr	lastSun	2:00	1:00	D
+Rule Menominee	1966	only	-	Oct	lastSun	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Menominee	-5:50:27 -	LMT	1885 Sep 18 12:00
+			-6:00	US	C%sT	1946
+			-6:00 Menominee	C%sT	1969 Apr 27 2:00
+			-5:00	-	EST	1973 Apr 29 2:00
+			-6:00	US	C%sT
+
+# Navassa
+# administered by the US Fish and Wildlife Service
+# claimed by US under the provisions of the 1856 Guano Islands Act
+# also claimed by Haiti
+# occupied 1857/1900 by the Navassa Phosphate Co
+# US lighthouse 1917/1996-09
+# currently uninhabited
+# see Mark Fineman, ``An Isle Rich in Guano and Discord'',
+# _Los Angeles Times_ (1998-11-10), A1, A10; it cites
+# Jimmy Skaggs, _The Great Guano Rush_ (1994).
+
+################################################################################
+
+
+# From Paul Eggert (1999-10-29):
+# A good source for time zone historical data outside the US is
+# Thomas G. Shanks, The International Atlas (5th edition),
+# San Diego: ACS Publications, Inc. (1999).
+#
+# Gwillim Law writes that a good source
+# for recent time zone data is the International Air Transport
+# Association's Standard Schedules Information Manual (IATA SSIM),
+# published semiannually.  Law sent in several helpful summaries
+# of the IATA's data after 1990.
+#
+# Except where otherwise noted, Shanks is the source for entries through 1990,
+# and IATA SSIM is the source for entries after 1990.
+#
+# Other sources occasionally used include:
+#
+#	Edward W. Whitman, World Time Differences,
+#	Whitman Publishing Co, 2 Niagara Av, Ealing, London (undated),
+#	which I found in the UCLA library.
+#
+#	<a href="http://www.pettswoodvillage.co.uk/Daylight_Savings_William_Willett.pdf">
+#	William Willett, The Waste of Daylight, 19th edition
+#	</a> (1914-03)
+#
+# See the `europe' file for Greenland.
+
+# Canada
+
+# From Alain LaBont<e'> (1994-11-14):
+# I post here the time zone abbreviations standardized in Canada
+# for both English and French in the CAN/CSA-Z234.4-89 standard....
+#
+#	UTC	Standard time	Daylight savings time
+#	offset	French	English	French	English
+#	-2:30	-	-	HAT	NDT
+#	-3	-	-	HAA	ADT
+#	-3:30	HNT	NST	-	-
+#	-4	HNA	AST	HAE	EDT
+#	-5	HNE	EST	HAC	CDT
+#	-6	HNC	CST	HAR	MDT
+#	-7	HNR	MST	HAP	PDT
+#	-8	HNP	PST	HAY	YDT
+#	-9	HNY	YST	-	-
+#
+#	HN: Heure Normale	ST: Standard Time
+#	HA: Heure Avanc<e'>e	DT: Daylight saving Time
+#
+#	A: de l'Atlantique	Atlantic
+#	C: du Centre		Central
+#	E: de l'Est		Eastern
+#	M:			Mountain
+#	N:			Newfoundland
+#	P: du Pacifique		Pacific
+#	R: des Rocheuses
+#	T: de Terre-Neuve
+#	Y: du Yukon		Yukon
+#
+# From Paul Eggert (1994-11-22):
+# Alas, this sort of thing must be handled by localization software.
+
+# Unless otherwise specified, the data for Canada are all from Shanks.
+
+# From Paul Eggert (2005-12-21):
+# H. David Matthews and Mary Vincent's map
+# <a href="http://www.canadiangeographic.ca/Magazine/SO98/geomap.asp">
+# "It's about TIME", _Canadian Geographic_ (September-October 1998)
+# </a> contains detailed boundaries for regions observing nonstandard
+# time and daylight saving time arrangements in Canada circa 1998.
+#
+# INMS, the Institute for National Measurement Standards in Ottawa, has <a
+# href="http://inms-ienm.nrc-cnrc.gc.ca/en/time_services/daylight_saving_e.php">
+# information about standard and daylight saving time zones in Canada.
+# </a> (updated periodically).
+# Its unofficial information is often taken from Matthews and Vincent.
+#
+# CBC News reported that Ontario and Manitoba have announced plans to
+# follow the US change, and that Nova Scotia is considering it; see
+# <http://www.cbc.ca/news/background/daylightsavingtime/> (2005-10-21).
+# CBC news also reported that Prince Edward Island is the first
+# province in Atlantic Canada to follow the US change, and that Quebec
+# had agreed; see <http://www.cbc.ca/pei/story/pe_daylight_20051207.html>
+# (2005-12-07).
+#
+# To reflect all this, the Canada and Winn rules have been adjusted to
+# agree with the 2007 US change.  This means we assume most of Canada
+# will fall into line.  However, Alberta, British Columbia,
+# Newfoundland, Northwest Territories, and Yukon already have separate
+# rules in our database, so for now we'll leave them alone, which
+# means that we currently assume these regions will not change their
+# rules and will disagree with the US starting in 2007.  This
+# assumption is probably incorrect, with the possible exception of
+# Newfoundland.  We plan to adjust the Edm, Vanc, StJohns, and NT_YK
+# rules as the corresponding provinces make their announcements.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Canada	1918	only	-	Apr	14	2:00	1:00	D
+Rule	Canada	1918	only	-	Oct	31	2:00	0	S
+Rule	Canada	1942	only	-	Feb	 9	2:00	1:00	W # War
+Rule	Canada	1945	only	-	Aug	14	23:00u	1:00	P # Peace
+Rule	Canada	1945	only	-	Sep	30	2:00	0	S
+Rule	Canada	1974	1986	-	Apr	lastSun	2:00	1:00	D
+Rule	Canada	1974	2006	-	Oct	lastSun	2:00	0	S
+Rule	Canada	1987	2006	-	Apr	Sun>=1	2:00	1:00	D
+Rule	Canada	2007	max	-	Mar	Sun>=8	2:00	1:00	D
+Rule	Canada	2007	max	-	Nov	Sun>=1	2:00	0	S
+
+
+# Newfoundland (and far southeast Labrador)
+
+# From Paul Eggert (2000-10-02):
+# Matthews and Vincent (1998) write that Labrador should use NST/NDT,
+# but the only part of Labrador that follows the rules is the
+# southeast corner, including Port Hope Simpson and Mary's Harbour,
+# but excluding, say, Black Tickle.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	StJohns	1917	only	-	Apr	 8	2:00	1:00	D
+Rule	StJohns	1917	only	-	Sep	17	2:00	0	S
+# Whitman gives 1919 Apr 5 and 1920 Apr 5; go with Shanks.
+Rule	StJohns	1919	only	-	May	 5	23:00	1:00	D
+Rule	StJohns	1919	only	-	Aug	12	23:00	0	S
+# For 1931-1935 Whitman gives Apr same date; go with Shanks.
+Rule	StJohns	1920	1935	-	May	Sun>=1	23:00	1:00	D
+Rule	StJohns	1920	1935	-	Oct	lastSun	23:00	0	S
+# For 1936-1941 Whitman gives May Sun>=8 and Oct Sun>=1; go with Shanks.
+Rule	StJohns	1936	1941	-	May	Mon>=9	0:00	1:00	D
+Rule	StJohns	1936	1941	-	Oct	Mon>=2	0:00	0	S
+# Whitman gives the following transitions:
+# 1942 03-01/12-31, 1943 05-30/09-05, 1944 07-10/09-02, 1945 01-01/10-07
+# but go with Shanks and assume they used Canadian rules.
+# For 1946-9 Whitman gives May 5,4,9,1 - Oct 1,5,3,2, and for 1950 he gives
+# Apr 30 - Sep 24; go with Shanks.
+Rule	StJohns	1946	1950	-	May	Sun>=8	2:00	1:00	D
+Rule	StJohns	1946	1950	-	Oct	Sun>=2	2:00	0	S
+Rule	StJohns	1951	1986	-	Apr	lastSun	2:00	1:00	D
+Rule	StJohns	1951	1959	-	Sep	lastSun	2:00	0	S
+Rule	StJohns	1960	1986	-	Oct	lastSun	2:00	0	S
+# From Paul Eggert (2000-10-02):
+# INMS (2000-09-12) says that, since 1988 at least, Newfoundland switches
+# at 00:01 local time.  For now, assume it started in 1987.
+Rule	StJohns	1987	only	-	Apr	Sun>=1	0:01	1:00	D
+Rule	StJohns	1987	max	-	Oct	lastSun	0:01	0	S
+Rule	StJohns	1988	only	-	Apr	Sun>=1	0:01	2:00	DD
+Rule	StJohns	1989	max	-	Apr	Sun>=1	0:01	1:00	D
+# St John's has an apostrophe, but Posix file names can't have apostrophes.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/St_Johns	-3:30:52 -	LMT	1884
+			-3:30:52 StJohns N%sT	1918
+			-3:30:52 Canada	N%sT	1919
+			-3:30:52 StJohns N%sT	1935 Mar 30
+			-3:30	StJohns	N%sT	1942 May 11
+			-3:30	Canada	N%sT	1946
+			-3:30	StJohns	N%sT
+
+# most of east Labrador
+
+# The name `Happy Valley-Goose Bay' is too long; use `Goose Bay'.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Goose_Bay	-4:01:40 -	LMT	1884 # Happy Valley-Goose Bay
+			-3:30:52 -	NST	1918
+			-3:30:52 Canada N%sT	1919
+			-3:30:52 -	NST	1935 Mar 30
+			-3:30	-	NST	1936
+			-3:30	StJohns	N%sT	1942 May 11
+			-3:30	Canada	N%sT	1946
+			-3:30	StJohns	N%sT	1966 Mar 15 2:00
+			-4:00	StJohns	A%sT
+
+
+# west Labrador, Nova Scotia, Prince Edward I
+
+# From Paul Eggert (1996-06-12):
+# Shanks writes that since 1970 most of this region has been like Halifax.
+# Many locales did not observe peacetime DST until 1972;
+# Glace Bay, NS is the largest that we know of.
+# Shanks also writes that Liverpool, NS was the only town in Canada to observe
+# DST in 1971 but not 1970; for now we'll assume this is a typo.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Halifax	1916	only	-	Apr	 1	0:00	1:00	D
+Rule	Halifax	1916	only	-	Oct	 1	0:00	0	S
+Rule	Halifax	1920	only	-	May	 9	0:00	1:00	D
+Rule	Halifax	1920	only	-	Aug	29	0:00	0	S
+Rule	Halifax	1921	only	-	May	 6	0:00	1:00	D
+Rule	Halifax	1921	1922	-	Sep	 5	0:00	0	S
+Rule	Halifax	1922	only	-	Apr	30	0:00	1:00	D
+Rule	Halifax	1923	1925	-	May	Sun>=1	0:00	1:00	D
+Rule	Halifax	1923	only	-	Sep	 4	0:00	0	S
+Rule	Halifax	1924	only	-	Sep	15	0:00	0	S
+Rule	Halifax	1925	only	-	Sep	28	0:00	0	S
+Rule	Halifax	1926	only	-	May	16	0:00	1:00	D
+Rule	Halifax	1926	only	-	Sep	13	0:00	0	S
+Rule	Halifax	1927	only	-	May	 1	0:00	1:00	D
+Rule	Halifax	1927	only	-	Sep	26	0:00	0	S
+Rule	Halifax	1928	1931	-	May	Sun>=8	0:00	1:00	D
+Rule	Halifax	1928	only	-	Sep	 9	0:00	0	S
+Rule	Halifax	1929	only	-	Sep	 3	0:00	0	S
+Rule	Halifax	1930	only	-	Sep	15	0:00	0	S
+Rule	Halifax	1931	1932	-	Sep	Mon>=24	0:00	0	S
+Rule	Halifax	1932	only	-	May	 1	0:00	1:00	D
+Rule	Halifax	1933	only	-	Apr	30	0:00	1:00	D
+Rule	Halifax	1933	only	-	Oct	 2	0:00	0	S
+Rule	Halifax	1934	only	-	May	20	0:00	1:00	D
+Rule	Halifax	1934	only	-	Sep	16	0:00	0	S
+Rule	Halifax	1935	only	-	Jun	 2	0:00	1:00	D
+Rule	Halifax	1935	only	-	Sep	30	0:00	0	S
+Rule	Halifax	1936	only	-	Jun	 1	0:00	1:00	D
+Rule	Halifax	1936	only	-	Sep	14	0:00	0	S
+Rule	Halifax	1937	1938	-	May	Sun>=1	0:00	1:00	D
+Rule	Halifax	1937	1941	-	Sep	Mon>=24	0:00	0	S
+Rule	Halifax	1939	only	-	May	28	0:00	1:00	D
+Rule	Halifax	1940	1941	-	May	Sun>=1	0:00	1:00	D
+Rule	Halifax	1946	1949	-	Apr	lastSun	2:00	1:00	D
+Rule	Halifax	1946	1949	-	Sep	lastSun	2:00	0	S
+Rule	Halifax	1951	1954	-	Apr	lastSun	2:00	1:00	D
+Rule	Halifax	1951	1954	-	Sep	lastSun	2:00	0	S
+Rule	Halifax	1956	1959	-	Apr	lastSun	2:00	1:00	D
+Rule	Halifax	1956	1959	-	Sep	lastSun	2:00	0	S
+Rule	Halifax	1962	1973	-	Apr	lastSun	2:00	1:00	D
+Rule	Halifax	1962	1973	-	Oct	lastSun	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Halifax	-4:14:24 -	LMT	1902 Jun 15
+			-4:00	Halifax	A%sT	1918
+			-4:00	Canada	A%sT	1919
+			-4:00	Halifax	A%sT	1942 Feb  9 2:00s
+			-4:00	Canada	A%sT	1946
+			-4:00	Halifax	A%sT	1974
+			-4:00	Canada	A%sT
+Zone America/Glace_Bay	-3:59:48 -	LMT	1902 Jun 15
+			-4:00	Canada	A%sT	1953
+			-4:00	Halifax	A%sT	1954
+			-4:00	-	AST	1972
+			-4:00	Halifax	A%sT	1974
+			-4:00	Canada	A%sT
+
+# New Brunswick
+
+# From Paul Eggert (2006-01-20):
+# New Brunswick's Time Definition Act
+# <http://www.gnb.ca/0062/PDF-acts/t-06.pdf> says they change at 00:01, and
+# <http://www.canlii.org/nb/laws/sta/t-6/20030127/whole.html> makes it
+# clear that this has been the case since at least 1993.
+# For now, assume it started in 1993.  The Office of the Premier announced
+# <http://www.gnb.ca/cnb/news/pre/2005e1737pr.htm> (2005-12-23)
+# that they will bring forward proposed amendments to harmonize with the US;
+# for now assume that this will happen, but they'll still switch at 00:01.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Moncton	1933	1935	-	Jun	Sun>=8	1:00	1:00	D
+Rule	Moncton	1933	1935	-	Sep	Sun>=8	1:00	0	S
+Rule	Moncton	1936	1938	-	Jun	Sun>=1	1:00	1:00	D
+Rule	Moncton	1936	1938	-	Sep	Sun>=1	1:00	0	S
+Rule	Moncton	1939	only	-	May	27	1:00	1:00	D
+Rule	Moncton	1939	1941	-	Sep	Sat>=21	1:00	0	S
+Rule	Moncton	1940	only	-	May	19	1:00	1:00	D
+Rule	Moncton	1941	only	-	May	 4	1:00	1:00	D
+Rule	Moncton	1946	1972	-	Apr	lastSun	2:00	1:00	D
+Rule	Moncton	1946	1956	-	Sep	lastSun	2:00	0	S
+Rule	Moncton	1956	1972	-	Oct	lastSun	2:00	0	S
+Rule	Moncton	1993	2006	-	Apr	Sun>=1	0:01	1:00	D
+Rule	Moncton	1993	2006	-	Oct	lastSun	0:01	0	S
+Rule	Moncton	2007	max	-	Mar	Sun>=8	0:01	1:00	D
+Rule	Moncton	2007	max	-	Nov	Sun>=1	0:01	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Moncton	-4:19:08 -	LMT	1883 Dec  9
+			-5:00	-	EST	1902 Jun 15
+			-4:00	Canada	A%sT	1933
+			-4:00	Moncton	A%sT	1942
+			-4:00	Canada	A%sT	1946
+			-4:00	Moncton	A%sT	1973
+			-4:00	Canada	A%sT	1993
+			-4:00	Moncton	A%sT
+
+# Ontario, Quebec
+
+# From Paul Eggert (1996-06-12):
+# Shanks writes that since 1970 most of Ontario has been like Toronto,
+# and most of Quebec has been like Montreal.
+# Thunder Bay skipped DST in 1973.
+# Many smaller locales did not observe peacetime DST until 1974;
+# Nipigon (EST) and Rainy River (CST) are the largest that we know of.
+# Far west Ontario is like Winnipeg; far east Quebec is like Halifax.
+
+# From Mark Brader (2003-07-26):
+# [According to the Toronto Star] Orillia, Ontario, adopted DST
+# effective Saturday, 1912-06-22, 22:00; the article mentions that
+# Port Arthur (now part of Thunder Bay, Ontario) as well as Moose Jaw
+# have already done so.  In Orillia DST was to run until Saturday,
+# 1912-08-31 (no time mentioned), but it was met with considerable
+# hostility from certain segments of the public, and was revoked after
+# only two weeks -- I copied it as Saturday, 1912-07-07, 22:00, but
+# presumably that should be -07-06.  (1912-06-19, -07-12; also letters
+# earlier in June).
+#
+# Kenora, Ontario, was to abandon DST on 1914-06-01 (-05-21).
+
+# From Paul Eggert (1997-10-17):
+# Mark Brader writes that an article in the 1997-10-14 Toronto Star
+# says that Atikokan, Ontario currently does not observe DST,
+# but will vote on 11-10 whether to use EST/EDT.
+# He also writes that the
+# <a href="http://www.gov.on.ca/MBS/english/publications/statregs/conttext.html">
+# Ontario Time Act (1990, Chapter T.9)
+# </a>
+# says that Ontario east of 90W uses EST/EDT, and west of 90W uses CST/CDT.
+# Officially Atikokan is therefore on CST/CDT, and most likely this report
+# concerns a non-official time observed as a matter of local practice.
+# For what it's worth, Shanks says that Atikokan has agreed with
+# Rainy River ever since standard time was introduced.
+
+# From Paul Eggert (2000-10-02):
+# Matthews and Vincent (1998) write that Atikokan, Pickle Lake, and
+# New Osnaburgh observe CST all year, that Big Trout Lake observes
+# CST/CDT, and that Upsala and Shebandowan observe EST/EDT, all in
+# violation of the official Ontario rules.
+# They also write that Quebec east of the -63 meridian is supposed to
+# observe AST, but residents as far east as Natashquan use EST/EDT,
+# and residents east of Natashquan use AST.
+# We probably need Zones for far east Quebec and for Atikokan,
+# but we don't know when their practices started.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Mont	1917	only	-	Mar	25	2:00	1:00	D
+Rule	Mont	1917	only	-	Apr	24	0:00	0	S
+Rule	Mont	1919	only	-	Mar	31	2:30	1:00	D
+Rule	Mont	1919	only	-	Oct	25	2:30	0	S
+Rule	Mont	1920	only	-	May	 2	2:30	1:00	D
+Rule	Mont	1920	1922	-	Oct	Sun>=1	2:30	0	S
+Rule	Mont	1921	only	-	May	 1	2:00	1:00	D
+Rule	Mont	1922	only	-	Apr	30	2:00	1:00	D
+Rule	Mont	1924	only	-	May	17	2:00	1:00	D
+Rule	Mont	1924	1926	-	Sep	lastSun	2:30	0	S
+Rule	Mont	1925	1926	-	May	Sun>=1	2:00	1:00	D
+# The 1927-to-1937 rules can be expressed more simply as
+# Rule	Mont	1927	1937	-	Apr	lastSat	24:00	1:00	D
+# Rule	Mont	1927	1937	-	Sep	lastSat	24:00	0	S
+# The rules below avoid use of 24:00
+# (which pre-1998 versions of zic cannot handle).
+Rule	Mont	1927	only	-	May	1	0:00	1:00	D
+Rule	Mont	1927	1932	-	Sep	lastSun	0:00	0	S
+Rule	Mont	1928	1931	-	Apr	lastSun	0:00	1:00	D
+Rule	Mont	1932	only	-	May	1	0:00	1:00	D
+Rule	Mont	1933	1940	-	Apr	lastSun	0:00	1:00	D
+Rule	Mont	1933	only	-	Oct	1	0:00	0	S
+Rule	Mont	1934	1939	-	Sep	lastSun	0:00	0	S
+Rule	Mont	1946	1973	-	Apr	lastSun	2:00	1:00	D
+Rule	Mont	1945	1948	-	Sep	lastSun	2:00	0	S
+Rule	Mont	1949	1950	-	Oct	lastSun	2:00	0	S
+Rule	Mont	1951	1956	-	Sep	lastSun	2:00	0	S
+Rule	Mont	1957	1973	-	Oct	lastSun	2:00	0	S
+
+Rule	Toronto	1919	only	-	Mar	30	23:30	1:00	D
+Rule	Toronto	1919	only	-	Oct	26	0:00	0	S
+Rule	Toronto	1920	only	-	May	 2	2:00	1:00	D
+Rule	Toronto	1920	only	-	Sep	26	0:00	0	S
+Rule	Toronto	1921	only	-	May	15	2:00	1:00	D
+Rule	Toronto	1921	only	-	Sep	15	2:00	0	S
+Rule	Toronto	1922	1923	-	May	Sun>=8	2:00	1:00	D
+# Shanks says 1923-09-19; assume it's a typo and that "-16" was meant.
+Rule	Toronto	1922	1926	-	Sep	Sun>=15	2:00	0	S
+Rule	Toronto	1924	1927	-	May	Sun>=1	2:00	1:00	D
+# The 1927-to-1939 rules can be expressed more simply as
+# Rule	Toronto	1927	1937	-	Sep	Sun>=25	2:00	0	S
+# Rule	Toronto	1928	1937	-	Apr	Sun>=25	2:00	1:00	D
+# Rule	Toronto	1938	1940	-	Apr	lastSun	2:00	1:00	D
+# Rule	Toronto	1938	1939	-	Sep	lastSun	2:00	0	S
+# The rules below avoid use of Sun>=25
+# (which pre-2004 versions of zic cannot handle).
+Rule	Toronto	1927	1932	-	Sep	lastSun	2:00	0	S
+Rule	Toronto	1928	1931	-	Apr	lastSun	2:00	1:00	D
+Rule	Toronto	1932	only	-	May	1	2:00	1:00	D
+Rule	Toronto	1933	1940	-	Apr	lastSun	2:00	1:00	D
+Rule	Toronto	1933	only	-	Oct	1	2:00	0	S
+Rule	Toronto	1934	1939	-	Sep	lastSun	2:00	0	S
+Rule	Toronto	1945	1946	-	Sep	lastSun	2:00	0	S
+Rule	Toronto	1946	only	-	Apr	lastSun	2:00	1:00	D
+Rule	Toronto	1947	1949	-	Apr	lastSun	0:00	1:00	D
+Rule	Toronto	1947	1948	-	Sep	lastSun	0:00	0	S
+Rule	Toronto	1949	only	-	Nov	lastSun	0:00	0	S
+Rule	Toronto	1950	1973	-	Apr	lastSun	2:00	1:00	D
+Rule	Toronto	1950	only	-	Nov	lastSun	2:00	0	S
+Rule	Toronto	1951	1956	-	Sep	lastSun	2:00	0	S
+# Shanks says Toronto ended DST a week early in 1971, namely on 1971-10-24,
+# but Mark Brader wrote (2003-05-31) that he checked the 1971-10-30 issue
+# of the Toronto Star, and it said that DST ended 1971-10-31 as usual.
+Rule	Toronto	1957	1973	-	Oct	lastSun	2:00	0	S
+
+# From Paul Eggert (2003-07-27):
+# Willett (1914-03) writes (p. 17) "In the Cities of Fort William, and
+# Port Arthur, Ontario, the principle of the Bill has been in
+# operation for the past three years, and in the City of Moose Jaw,
+# Saskatchewan, for one year."
+
+# From David Bryan via Tory Tronrud, Director/Curator,
+# Thunder Bay Museum (2003-11-12):
+# There is some suggestion, however, that, by-law or not, daylight
+# savings time was being practiced in Fort William and Port Arthur
+# before 1909.... [I]n 1910, the line between the Eastern and Central
+# Time Zones was permanently moved about two hundred miles west to
+# include the Thunder Bay area....  When Canada adopted daylight
+# savings time in 1916, Fort William and Port Arthur, having done so
+# already, did not change their clocks....  During the Second World
+# War,... [t]he cities agreed to implement DST during the summer
+# months for the remainder of the war years.
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Montreal	-4:54:16 -	LMT	1884
+			-5:00	Mont	E%sT	1918
+			-5:00	Canada	E%sT	1919
+			-5:00	Mont	E%sT	1942 Feb  9 2:00s
+			-5:00	Canada	E%sT	1946
+			-5:00	Mont	E%sT	1974
+			-5:00	Canada	E%sT
+Zone America/Toronto	-5:17:32 -	LMT	1895
+			-5:00	Canada	E%sT	1919
+			-5:00	Toronto	E%sT	1942 Feb  9 2:00s
+			-5:00	Canada	E%sT	1946
+			-5:00	Toronto	E%sT	1974
+			-5:00	Canada	E%sT
+Zone America/Thunder_Bay -5:57:00 -	LMT	1895
+			-6:00	-	CST	1910
+			-5:00	-	EST	1942
+			-5:00	Canada	E%sT	1970
+			-5:00	Mont	E%sT	1973
+			-5:00	-	EST	1974
+			-5:00	Canada	E%sT
+Zone America/Nipigon	-5:53:04 -	LMT	1895
+			-5:00	Canada	E%sT	1940 Sep 29
+			-5:00	1:00	EDT	1942 Feb  9 2:00s
+			-5:00	Canada	E%sT
+Zone America/Rainy_River -6:17:56 -	LMT	1895
+			-6:00	Canada	C%sT	1940 Sep 29
+			-6:00	1:00	CDT	1942 Feb  9 2:00s
+			-6:00	Canada	C%sT
+
+
+# Manitoba
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Winn	1916	only	-	Apr	23	0:00	1:00	D
+Rule	Winn	1916	only	-	Sep	17	0:00	0	S
+Rule	Winn	1918	only	-	Apr	14	2:00	1:00	D
+Rule	Winn	1918	only	-	Oct	31	2:00	0	S
+Rule	Winn	1937	only	-	May	16	2:00	1:00	D
+Rule	Winn	1937	only	-	Sep	26	2:00	0	S
+Rule	Winn	1942	only	-	Feb	 9	2:00	1:00	W # War
+Rule	Winn	1945	only	-	Aug	14	23:00u	1:00	P # Peace
+Rule	Winn	1945	only	-	Sep	lastSun	2:00	0	S
+Rule	Winn	1946	only	-	May	12	2:00	1:00	D
+Rule	Winn	1946	only	-	Oct	13	2:00	0	S
+Rule	Winn	1947	1949	-	Apr	lastSun	2:00	1:00	D
+Rule	Winn	1947	1949	-	Sep	lastSun	2:00	0	S
+Rule	Winn	1950	only	-	May	 1	2:00	1:00	D
+Rule	Winn	1950	only	-	Sep	30	2:00	0	S
+Rule	Winn	1951	1960	-	Apr	lastSun	2:00	1:00	D
+Rule	Winn	1951	1958	-	Sep	lastSun	2:00	0	S
+Rule	Winn	1959	only	-	Oct	lastSun	2:00	0	S
+Rule	Winn	1960	only	-	Sep	lastSun	2:00	0	S
+Rule	Winn	1963	only	-	Apr	lastSun	2:00	1:00	D
+Rule	Winn	1963	only	-	Sep	22	2:00	0	S
+Rule	Winn	1966	1986	-	Apr	lastSun	2:00	1:00	D
+Rule	Winn	1966	1986	-	Oct	lastSun	2:00	0	S
+Rule	Winn	1987	2006	-	Apr	Sun>=1	2:00s	1:00	D
+# From Paul Eggert (2000-10-02):
+# INMS (2000-09-12) says that, since 1988 at least, Manitoba switches from
+# DST at 03:00 local time.  For now, assume it started in 1987.
+Rule	Winn	1987	2006	-	Oct	lastSun	2:00s	0	S
+Rule	Winn	2007	max	-	Mar	Sun>=8	2:00s	1:00	D
+Rule	Winn	2007	max	-	Nov	Sun>=1	2:00s	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Winnipeg	-6:28:36 -	LMT	1887 Jul 16
+			-6:00	Winn	C%sT
+
+
+# Saskatchewan
+
+# From Mark Brader (2003-07-26):
+# The first actual adoption of DST in Canada was at the municipal
+# level.  As the [Toronto] Star put it (1912-06-07), "While people
+# elsewhere have long been talking of legislation to save daylight,
+# the city of Moose Jaw [Saskatchewan] has acted on its own hook."
+# DST in Moose Jaw began on Saturday, 1912-06-01 (no time mentioned:
+# presumably late evening, as below), and would run until "the end of
+# the summer".  The discrepancy between municipal time and railroad
+# time was noted.
+
+# From Paul Eggert (2003-07-27):
+# Willett (1914-03) notes that DST "has been in operation ... in the
+# City of Moose Jaw, Saskatchewan, for one year."
+
+# From Paul Eggert (2000-10-02):
+# Shanks writes that since 1970 most of this region has been like Regina.
+# Some western towns (e.g. Swift Current) switched from MST/MDT to CST in 1972.
+# Other western towns (e.g. Lloydminster) are like Edmonton.
+# Matthews and Vincent (1998) write that Denare Beach and Creighton
+# are like Winnipeg, in violation of Saskatchewan law.
+
+# From W. Jones (1992-11-06):
+# The. . .below is based on information I got from our law library, the
+# provincial archives, and the provincial Community Services department.
+# A precise history would require digging through newspaper archives, and
+# since you didn't say what you wanted, I didn't bother.
+#
+# Saskatchewan is split by a time zone meridian (105W) and over the years
+# the boundary became pretty ragged as communities near it reevaluated
+# their affiliations in one direction or the other.  In 1965 a provincial
+# referendum favoured legislating common time practices.
+#
+# On 15 April 1966 the Time Act (c. T-14, Revised Statutes of
+# Saskatchewan 1978) was proclaimed, and established that the eastern
+# part of Saskatchewan would use CST year round, that districts in
+# northwest Saskatchewan would by default follow CST but could opt to
+# follow Mountain Time rules (thus 1 hour difference in the winter and
+# zero in the summer), and that districts in southwest Saskatchewan would
+# by default follow MT but could opt to follow CST.
+#
+# It took a few years for the dust to settle (I know one story of a town
+# on one time zone having its school in another, such that a mom had to
+# serve her family lunch in two shifts), but presently it seems that only
+# a few towns on the border with Alberta (e.g. Lloydminster) follow MT
+# rules any more; all other districts appear to have used CST year round
+# since sometime in the 1960s.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Regina	1918	only	-	Apr	14	2:00	1:00	D
+Rule	Regina	1918	only	-	Oct	31	2:00	0	S
+Rule	Regina	1930	1934	-	May	Sun>=1	0:00	1:00	D
+Rule	Regina	1930	1934	-	Oct	Sun>=1	0:00	0	S
+Rule	Regina	1937	1941	-	Apr	Sun>=8	0:00	1:00	D
+Rule	Regina	1937	only	-	Oct	Sun>=8	0:00	0	S
+Rule	Regina	1938	only	-	Oct	Sun>=1	0:00	0	S
+Rule	Regina	1939	1941	-	Oct	Sun>=8	0:00	0	S
+Rule	Regina	1942	only	-	Feb	 9	2:00	1:00	W # War
+Rule	Regina	1945	only	-	Aug	14	23:00u	1:00	P # Peace
+Rule	Regina	1945	only	-	Sep	lastSun	2:00	0	S
+Rule	Regina	1946	only	-	Apr	Sun>=8	2:00	1:00	D
+Rule	Regina	1946	only	-	Oct	Sun>=8	2:00	0	S
+Rule	Regina	1947	1957	-	Apr	lastSun	2:00	1:00	D
+Rule	Regina	1947	1957	-	Sep	lastSun	2:00	0	S
+Rule	Regina	1959	only	-	Apr	lastSun	2:00	1:00	D
+Rule	Regina	1959	only	-	Oct	lastSun	2:00	0	S
+#
+Rule	Swift	1957	only	-	Apr	lastSun	2:00	1:00	D
+Rule	Swift	1957	only	-	Oct	lastSun	2:00	0	S
+Rule	Swift	1959	1961	-	Apr	lastSun	2:00	1:00	D
+Rule	Swift	1959	only	-	Oct	lastSun	2:00	0	S
+Rule	Swift	1960	1961	-	Sep	lastSun	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Regina	-6:58:36 -	LMT	1905 Sep
+			-7:00	Regina	M%sT	1960 Apr lastSun 2:00
+			-6:00	-	CST
+Zone America/Swift_Current -7:11:20 -	LMT	1905 Sep
+			-7:00	Canada	M%sT	1946 Apr lastSun 2:00
+			-7:00	Regina	M%sT	1950
+			-7:00	Swift	M%sT	1972 Apr lastSun 2:00
+			-6:00	-	CST
+
+
+# Alberta
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Edm	1918	1919	-	Apr	Sun>=8	2:00	1:00	D
+Rule	Edm	1918	only	-	Oct	31	2:00	0	S
+Rule	Edm	1919	only	-	May	27	2:00	0	S
+Rule	Edm	1920	1923	-	Apr	lastSun	2:00	1:00	D
+Rule	Edm	1920	only	-	Oct	lastSun	2:00	0	S
+Rule	Edm	1921	1923	-	Sep	lastSun	2:00	0	S
+Rule	Edm	1942	only	-	Feb	 9	2:00	1:00	W # War
+Rule	Edm	1945	only	-	Aug	14	23:00u	1:00	P # Peace
+Rule	Edm	1945	only	-	Sep	lastSun	2:00	0	S
+Rule	Edm	1947	only	-	Apr	lastSun	2:00	1:00	D
+Rule	Edm	1947	only	-	Sep	lastSun	2:00	0	S
+Rule	Edm	1967	only	-	Apr	lastSun	2:00	1:00	D
+Rule	Edm	1967	only	-	Oct	lastSun	2:00	0	S
+Rule	Edm	1969	only	-	Apr	lastSun	2:00	1:00	D
+Rule	Edm	1969	only	-	Oct	lastSun	2:00	0	S
+Rule	Edm	1972	1986	-	Apr	lastSun	2:00	1:00	D
+Rule	Edm	1972	max	-	Oct	lastSun	2:00	0	S
+Rule	Edm	1987	max	-	Apr	Sun>=1	2:00	1:00	D
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Edmonton	-7:33:52 -	LMT	1906 Sep
+			-7:00	Edm	M%sT
+
+
+# British Columbia
+
+# From Paul Eggert (2000-10-02):
+# Shanks writes that since 1970 most of this region has been like Vancouver.
+# Dawson Creek uses MST.  Much of east BC is like Edmonton.
+# Matthews and Vincent (1998) write that Creston is like Dawson Creek.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Vanc	1918	only	-	Apr	14	2:00	1:00	D
+Rule	Vanc	1918	only	-	Oct	31	2:00	0	S
+Rule	Vanc	1942	only	-	Feb	 9	2:00	1:00	W # War
+Rule	Vanc	1945	only	-	Aug	14	23:00u	1:00	P # Peace
+Rule	Vanc	1945	only	-	Sep	30	2:00	0	S
+Rule	Vanc	1946	1986	-	Apr	lastSun	2:00	1:00	D
+Rule	Vanc	1946	only	-	Oct	13	2:00	0	S
+Rule	Vanc	1947	1961	-	Sep	lastSun	2:00	0	S
+Rule	Vanc	1962	max	-	Oct	lastSun	2:00	0	S
+Rule	Vanc	1987	max	-	Apr	Sun>=1	2:00	1:00	D
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Vancouver	-8:12:28 -	LMT	1884
+			-8:00	Vanc	P%sT
+Zone America/Dawson_Creek -8:00:56 -	LMT	1884
+			-8:00	Canada	P%sT	1947
+			-8:00	Vanc	P%sT	1972 Aug 30 2:00
+			-7:00	-	MST
+
+
+# Northwest Territories, Nunavut, Yukon
+
+# From Paul Eggert (1999-10-29):
+# Dawson switched to PST in 1973.  Inuvik switched to MST in 1979.
+# Mathew Englander (1996-10-07) gives the following refs:
+#	* 1967. Paragraph 28(34)(g) of the Interpretation Act, S.C. 1967-68,
+#	c. 7 defines Yukon standard time as UTC-9.  This is still valid;
+#	see Interpretation Act, R.S.C. 1985, c. I-21, s. 35(1).
+#	* C.O. 1973/214 switched Yukon to PST on 1973-10-28 00:00.
+#	* O.I.C. 1980/02 established DST.
+#	* O.I.C. 1987/056 changed DST to Apr firstSun 2:00 to Oct lastSun 2:00.
+# Shanks says Yukon's 1973-10-28 switch was at 2:00; go with Englander.
+
+# From Rives McDow (1999-09-04):
+# Nunavut ... moved ... to incorporate the whole territory into one time zone.
+# <a href="http://www.nunatsiaq.com/nunavut/nvt90903_13.html">
+# Nunavut moves to single time zone Oct. 31
+# </a>
+#
+# From Antoine Leca (1999-09-06):
+# We then need to create a new timezone for the Kitikmeot region of Nunavut
+# to differentiate it from the Yellowknife region.
+
+# From Paul Eggert (1999-09-20):
+# <a href="http://www.nunavut.com/basicfacts/english/basicfacts_1territory.html">
+# Basic Facts: The New Territory
+# </a> (1999) reports that Pangnirtung operates on eastern time,
+# and that Coral Harbour does not observe DST.  We don't know when
+# Pangnirtung switched to eastern time; we'll guess 1995.
+
+# From Rives McDow (1999-11-08):
+# On October 31, when the rest of Nunavut went to Central time,
+# Pangnirtung wobbled.  Here is the result of their wobble:
+#
+# The following businesses and organizations in Pangnirtung use Central Time:
+#
+#	First Air, Power Corp, Nunavut Construction, Health Center, RCMP,
+#	Eastern Arctic National Parks, A & D Specialist
+#
+# The following businesses and organizations in Pangnirtung use Eastern Time:
+#
+#	Hamlet office, All other businesses, Both schools, Airport operator
+#
+# This has made for an interesting situation there, which warranted the news.
+# No one there that I spoke with seems concerned, or has plans to
+# change the local methods of keeping time, as it evidently does not
+# really interfere with any activities or make things difficult locally.
+# They plan to celebrate New Year's turn-over twice, one hour apart,
+# so it appears that the situation will last at least that long.
+# The Nunavut Intergovernmental Affairs hopes that they will "come to
+# their senses", but the locals evidently don't see any problem with
+# the current state of affairs.
+
+# From Michaela Rodrigue, writing in the
+# <a href="http://www.nunatsiaq.com/archives/nunavut991130/nvt91119_17.html">
+# Nunatsiaq News (1999-11-19)</a>:
+# Clyde River, Pangnirtung and Sanikiluaq now operate with two time zones,
+# central - or Nunavut time - for government offices, and eastern time
+# for municipal offices and schools....  Igloolik [was similar but then]
+# made the switch to central time on Saturday, Nov. 6.
+
+# From Paul Eggert (2000-10-02):
+# Matthews and Vincent (1998) say the following, but we lack histories
+# for these potential new Zones.
+#
+# The Canadian Forces station at Alert uses Eastern Time while the
+# handful of residents at the Eureka weather station [in the Central
+# zone] skip daylight savings.  Baffin Island, which is crossed by the
+# Central, Eastern and Atlantic Time zones only uses Eastern Time.
+# Gjoa Haven, Taloyoak and Pelly Bay all use Mountain instead of
+# Central Time and Southampton Island [in the Central zone] is not
+# required to use daylight savings.
+
+# From
+# <a href="http://www.nunatsiaq.com/archives/nunavut001130/nvt21110_02.html">
+# Nunavut now has two time zones
+# </a> (2000-11-10):
+# The Nunavut government would allow its employees in Kugluktuk and
+# Cambridge Bay to operate on central time year-round, putting them
+# one hour behind the rest of Nunavut for six months during the winter.
+# At the end of October the two communities had rebelled against
+# Nunavut's unified time zone, refusing to shift to eastern time with
+# the rest of the territory for the winter.  Cambridge Bay remained on
+# central time, while Kugluktuk, even farther west, reverted to
+# mountain time, which they had used before the advent of Nunavut's
+# unified time zone in 1999.
+#
+# From Rives McDow (2001-01-20), quoting the Nunavut government:
+# The preceding decision came into effect at midnight, Saturday Nov 4, 2000.
+
+# From Paul Eggert (2000-12-04):
+# Let's just keep track of the official times for now.
+
+# From Rives McDow (2001-03-07):
+# The premier of Nunavut has issued a ministerial statement advising
+# that effective 2001-04-01, the territory of Nunavut will revert
+# back to three time zones (mountain, central, and eastern).  Of the
+# cities in Nunavut, Coral Harbor is the only one that I know of that
+# has said it will not observe dst, staying on EST year round.  I'm
+# checking for more info, and will get back to you if I come up with
+# more.
+# [Also see <http://www.nunatsiaq.com/nunavut/nvt10309_06.html> (2001-03-09).]
+
+# From Gwillim Law (2005-05-21):
+# According to maps at
+# http://inms-ienm.nrc-cnrc.gc.ca/images/time_services/TZ01SWE.jpg
+# http://inms-ienm.nrc-cnrc.gc.ca/images/time_services/TZ01SSE.jpg
+# (both dated 2003), and
+# http://www.canadiangeographic.ca/Magazine/SO98/geomap.asp
+# (from a 1998 Canadian Geographic article), the de facto and de jure time
+# for Southampton Island (at the north end of Hudson Bay) is UTC-5 all year
+# round.  Using Google, it's easy to find other websites that confirm this.
+# I wasn't able to find how far back this time regimen goes, but since it
+# predates the creation of Nunavut, it probably goes back many years....
+# The Inuktitut name of Coral Harbour is Sallit, but it's rarely used.
+#
+# From Paul Eggert (2005-07-26):
+# For lack of better information, assume that Southampton Island observed
+# daylight saving only during wartime.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	NT_YK	1918	only	-	Apr	14	2:00	1:00	D
+Rule	NT_YK	1918	only	-	Oct	27	2:00	0	S
+Rule	NT_YK	1919	only	-	May	25	2:00	1:00	D
+Rule	NT_YK	1919	only	-	Nov	 1	0:00	0	S
+Rule	NT_YK	1942	only	-	Feb	 9	2:00	1:00	W # War
+Rule	NT_YK	1945	only	-	Aug	14	23:00u	1:00	P # Peace
+Rule	NT_YK	1945	only	-	Sep	30	2:00	0	S
+Rule	NT_YK	1965	only	-	Apr	lastSun	0:00	2:00	DD
+Rule	NT_YK	1965	only	-	Oct	lastSun	2:00	0	S
+Rule	NT_YK	1980	1986	-	Apr	lastSun	2:00	1:00	D
+Rule	NT_YK	1980	max	-	Oct	lastSun	2:00	0	S
+Rule	NT_YK	1987	max	-	Apr	Sun>=1	2:00	1:00	D
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Pangnirtung -4:22:56 -	LMT	1884
+			-4:00	NT_YK	A%sT	1995 Apr Sun>=1 2:00
+			-5:00	Canada	E%sT	1999 Oct 31 2:00
+			-6:00	Canada	C%sT	2000 Oct 29 2:00
+			-5:00	Canada	E%sT
+Zone America/Iqaluit	-4:33:52 -	LMT	1884 # Frobisher Bay before 1987
+			-5:00	NT_YK	E%sT	1999 Oct 31 2:00
+			-6:00	Canada	C%sT	2000 Oct 29 2:00
+			-5:00	Canada	E%sT
+Zone America/Coral_Harbour -5:32:40 -	LMT	1884
+			-5:00	NT_YK	E%sT	1946
+			-5:00	-	EST
+Zone America/Rankin_Inlet -6:08:40 -	LMT	1884
+			-6:00	NT_YK	C%sT	2000 Oct 29 2:00
+			-5:00	-	EST	2001 Apr  1 3:00
+			-6:00	Canada	C%sT
+Zone America/Cambridge_Bay -7:00:20 -	LMT	1884
+			-7:00	NT_YK	M%sT	1999 Oct 31 2:00
+			-6:00	Canada	C%sT	2000 Oct 29 2:00
+			-5:00	-	EST	2000 Nov  5 0:00
+			-6:00	-	CST	2001 Apr  1 3:00
+			-7:00	Canada	M%sT
+Zone America/Yellowknife -7:37:24 -	LMT	1884
+			-7:00	NT_YK	M%sT
+Zone America/Inuvik	-8:54:00 -	LMT	1884
+			-8:00	NT_YK	P%sT	1979 Apr lastSun 2:00
+			-7:00	NT_YK	M%sT
+Zone America/Whitehorse	-9:00:12 -	LMT	1900 Aug 20
+			-9:00	NT_YK	Y%sT	1966 Jul 1 2:00
+			-8:00	NT_YK	P%sT
+Zone America/Dawson	-9:17:40 -	LMT	1900 Aug 20
+			-9:00	NT_YK	Y%sT	1973 Oct 28 0:00
+			-8:00	NT_YK	P%sT
+
+
+###############################################################################
+
+# Mexico
+
+# From Paul Eggert (2001-03-05):
+# The Investigation and Analysis Service of the
+# Mexican Library of Congress (MLoC) has published a
+# <a href="http://www.cddhcu.gob.mx/bibliot/publica/inveyana/polisoc/horver/">
+# history of Mexican local time (in Spanish)
+# </a>.
+#
+# Here are the discrepancies between Shanks and the MLoC.
+# (In all cases we go with the MLoC.)
+# Shanks reports that Baja was at -8:00 in 1922/1923.
+# Shanks says the 1930 transition in Baja was 1930-11-16.
+# Shanks reports no DST during summer 1931.
+# Shanks reports a transition at 1932-03-30 23:00, not 1932-04-01.
+# Shanks does not report transitions for Baja in 1945 or 1948.
+# Shanks reports southern Mexico transitions on 1981-12-01, not 12-23.
+# Shanks says Quintana Roo switched to -6:00 on 1982-12-02, and to -5:00
+# on 1997-10-26 at 02:00.
+
+# From Gwillim Law (2001-02-20):
+# There are some other discrepancies between the Decrees page and the
+# tz database.  I think they can best be explained by supposing that
+# the researchers who prepared the Decrees page failed to find some of
+# the relevant documents.
+
+# From Paul Eggert (2000-07-26):
+# Shanks gives 1942-04-01 instead of 1942-04-24, and omits the 1981
+# and 1988 DST experiments.  Go with spin.com.mx.
+
+# From Alan Perry (1996-02-15):
+# A guy from our Mexico subsidiary finally found the Presidential Decree
+# outlining the timezone changes in Mexico.
+#
+# ------------- Begin Forwarded Message -------------
+#
+# I finally got my hands on the Official Presidential Decree that sets up the
+# rules for the DST changes. The rules are:
+#
+# 1. The country is divided in 3 timezones:
+#    - Baja California Norte (the Mexico/BajaNorte TZ)
+#    - Baja California Sur, Nayarit, Sinaloa and Sonora (the Mexico/BajaSur TZ)
+#    - The rest of the country (the Mexico/General TZ)
+#
+# 2. From the first Sunday in April at 2:00 AM to the last Sunday in October
+#    at 2:00 AM, the times in each zone are as follows:
+#    BajaNorte: GMT+7
+#    BajaSur:   GMT+6
+#    General:   GMT+5
+#
+# 3. The rest of the year, the times are as follows:
+#    BajaNorte: GMT+8
+#    BajaSur:   GMT+7
+#    General:   GMT+6
+#
+# The Decree was published in Mexico's Official Newspaper on January 4th.
+#
+# -------------- End Forwarded Message --------------
+# From Paul Eggert (1996-06-12):
+# For an English translation of the decree, see
+# <a href="http://mexico-travel.com/extra/timezone_eng.html">
+# ``Diario Oficial: Time Zone Changeover'' (1996-01-04).
+# </a>
+
+# From Rives McDow (1998-10-08):
+# The State of Quintana Roo has reverted back to central STD and DST times
+# (i.e. UTC -0600 and -0500 as of 1998-08-02).
+
+# From Rives McDow (2000-01-10):
+# Effective April 4, 1999 at 2:00 AM local time, Sonora changed to the time
+# zone 5 hours from the International Date Line, and will not observe daylight
+# savings time so as to stay on the same time zone as the southern part of
+# Arizona year round.
+
+# From Jesper Norgaard, translating
+# <http://www.reforma.com/nacional/articulo/064327/> (2001-01-17):
+# In Oaxaca, the 55.000 teachers from the Section 22 of the National
+# Syndicate of Education Workers, refuse to apply daylight saving each
+# year, so that the more than 10,000 schools work at normal hour the
+# whole year.
+
+# From Gwillim Law (2001-01-19):
+# <http://www.reforma.com/negocios_y_dinero/articulo/064481/> ... says
+# (translated):...
+# January 17, 2000 - The Energy Secretary, Ernesto Martens, announced
+# that Summer Time will be reduced from seven to five months, starting
+# this year....
+# <http://www.publico.com.mx/scripts/texto3.asp?action=pagina&pag=21&pos=p&secc=naci&date=01/17/2001>
+# [translated], says "summer time will ... take effect on the first Sunday
+# in May, and end on the last Sunday of September.
+
+# From Arthur David Olson (2001-01-25):
+# The 2001-01-24 traditional Washington Post contained the page one
+# story "Timely Issue Divides Mexicans."...
+# http://www.washingtonpost.com/wp-dyn/articles/A37383-2001Jan23.html
+# ... Mexico City Mayor Lopez Obrador "...is threatening to keep
+# Mexico City and its 20 million residents on a different time than
+# the rest of the country..." In particular, Lopez Obrador would abolish
+# observation of Daylight Saving Time.
+
+# <a href="http://www.conae.gob.mx/ahorro/decretohorver2001.html#decre">
+# Official statute published by the Energy Department
+# </a> (2001-02-01) shows Baja and Chihauhua as still using US DST rules,
+# and Sonora with no DST.  This was reported by Jesper Norgaard (2001-02-03).
+
+# From Paul Eggert (2001-03-03):
+#
+# <a href="http://www.latimes.com/news/nation/20010303/t000018766.html">
+# James F. Smith writes in today's LA Times
+# </a>
+# * Sonora will continue to observe standard time.
+# * Last week Mexico City's mayor Andres Manuel Lopez Obrador decreed that
+#   the Federal District will not adopt DST.
+# * 4 of 16 district leaders announced they'll ignore the decree.
+# * The decree does not affect federal-controlled facilities including
+#   the airport, banks, hospitals, and schools.
+#
+# For now we'll assume that the Federal District will bow to federal rules.
+
+# From Jesper Norgaard (2001-04-01):
+# I found some references to the Mexican application of daylight
+# saving, which modifies what I had already sent you, stating earlier
+# that a number of northern Mexican states would go on daylight
+# saving. The modification reverts this to only cover Baja California
+# (Norte), while all other states (except Sonora, who has no daylight
+# saving all year) will follow the original decree of president
+# Vicente Fox, starting daylight saving May 6, 2001 and ending
+# September 30, 2001.
+# References: "Diario de Monterrey" <www.diariodemonterrey.com/index.asp>
+# Palabra <http://palabra.infosel.com/010331/primera/ppri3101.pdf> (2001-03-31)
+
+# From Reuters (2001-09-04):
+# Mexico's Supreme Court on Tuesday declared that daylight savings was
+# unconstitutional in Mexico City, creating the possibility the
+# capital will be in a different time zone from the rest of the nation
+# next year....  The Supreme Court's ruling takes effect at 2:00
+# a.m. (0800 GMT) on Sept. 30, when Mexico is scheduled to revert to
+# standard time. "This is so residents of the Federal District are not
+# subject to unexpected time changes," a statement from the court said.
+
+# From Jesper Norgaard Welen (2002-03-12):
+# ... consulting my local grocery store(!) and my coworkers, they all insisted
+# that a new decision had been made to reinstate US style DST in Mexico....
+# http://www.conae.gob.mx/ahorro/horaver2001_m1_2002.html (2002-02-20)
+# confirms this.  Sonora as usual is the only state where DST is not applied.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Mexico	1939	only	-	Feb	5	0:00	1:00	D
+Rule	Mexico	1939	only	-	Jun	25	0:00	0	S
+Rule	Mexico	1940	only	-	Dec	9	0:00	1:00	D
+Rule	Mexico	1941	only	-	Apr	1	0:00	0	S
+Rule	Mexico	1943	only	-	Dec	16	0:00	1:00	W # War
+Rule	Mexico	1944	only	-	May	1	0:00	0	S
+Rule	Mexico	1950	only	-	Feb	12	0:00	1:00	D
+Rule	Mexico	1950	only	-	Jul	30	0:00	0	S
+Rule	Mexico	1996	2000	-	Apr	Sun>=1	2:00	1:00	D
+Rule	Mexico	1996	2000	-	Oct	lastSun	2:00	0	S
+Rule	Mexico	2001	only	-	May	Sun>=1	2:00	1:00	D
+Rule	Mexico	2001	only	-	Sep	lastSun	2:00	0	S
+Rule	Mexico	2002	max	-	Apr	Sun>=1	2:00	1:00	D
+Rule	Mexico	2002	max	-	Oct	lastSun	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+# Quintana Roo
+Zone America/Cancun	-5:47:04 -	LMT	1922 Jan  1  0:12:56
+			-6:00	-	CST	1981 Dec 23
+			-5:00	Mexico	E%sT	1998 Aug  2  2:00
+			-6:00	Mexico	C%sT
+# Campeche, Yucatan
+Zone America/Merida	-5:58:28 -	LMT	1922 Jan  1  0:01:32
+			-6:00	-	CST	1981 Dec 23
+			-5:00	-	EST	1982 Dec  2
+			-6:00	Mexico	C%sT
+# Coahuila, Durango, Nuevo Leon, Tamaulipas
+Zone America/Monterrey	-6:41:16 -	LMT	1921 Dec 31 23:18:44
+			-6:00	-	CST	1988
+			-6:00	US	C%sT	1989
+			-6:00	Mexico	C%sT
+# Central Mexico
+Zone America/Mexico_City -6:36:36 -	LMT	1922 Jan  1  0:23:24
+			-7:00	-	MST	1927 Jun 10 23:00
+			-6:00	-	CST	1930 Nov 15
+			-7:00	-	MST	1931 May  1 23:00
+			-6:00	-	CST	1931 Oct
+			-7:00	-	MST	1932 Apr  1
+			-6:00	Mexico	C%sT	2001 Sep 30 02:00
+			-6:00	-	CST	2002 Feb 20
+			-6:00	Mexico	C%sT
+# Chihuahua
+Zone America/Chihuahua	-7:04:20 -	LMT	1921 Dec 31 23:55:40
+			-7:00	-	MST	1927 Jun 10 23:00
+			-6:00	-	CST	1930 Nov 15
+			-7:00	-	MST	1931 May  1 23:00
+			-6:00	-	CST	1931 Oct
+			-7:00	-	MST	1932 Apr  1
+			-6:00	-	CST	1996
+			-6:00	Mexico	C%sT	1998
+			-6:00	-	CST	1998 Apr Sun>=1 3:00
+			-7:00	Mexico	M%sT
+# Sonora
+Zone America/Hermosillo	-7:23:52 -	LMT	1921 Dec 31 23:36:08
+			-7:00	-	MST	1927 Jun 10 23:00
+			-6:00	-	CST	1930 Nov 15
+			-7:00	-	MST	1931 May  1 23:00
+			-6:00	-	CST	1931 Oct
+			-7:00	-	MST	1932 Apr  1
+			-6:00	-	CST	1942 Apr 24
+			-7:00	-	MST	1949 Jan 14
+			-8:00	-	PST	1970
+			-7:00	Mexico	M%sT	1999
+			-7:00	-	MST
+# Baja California Sur, Nayarit, Sinaloa
+Zone America/Mazatlan	-7:05:40 -	LMT	1921 Dec 31 23:54:20
+			-7:00	-	MST	1927 Jun 10 23:00
+			-6:00	-	CST	1930 Nov 15
+			-7:00	-	MST	1931 May  1 23:00
+			-6:00	-	CST	1931 Oct
+			-7:00	-	MST	1932 Apr  1
+			-6:00	-	CST	1942 Apr 24
+			-7:00	-	MST	1949 Jan 14
+			-8:00	-	PST	1970
+			-7:00	Mexico	M%sT
+# Baja California
+Zone America/Tijuana	-7:48:04 -	LMT	1922 Jan  1  0:11:56
+			-7:00	-	MST	1924
+			-8:00	-	PST	1927 Jun 10 23:00
+			-7:00	-	MST	1930 Nov 15
+			-8:00	-	PST	1931 Apr  1
+			-8:00	1:00	PDT	1931 Sep 30
+			-8:00	-	PST	1942 Apr 24
+			-8:00	1:00	PWT	1945 Nov 12
+			-8:00	-	PST	1948 Apr  5
+			-8:00	1:00	PDT	1949 Jan 14
+			-8:00	-	PST	1954
+			-8:00	CA	P%sT	1961
+			-8:00	-	PST	1976
+			-8:00	US	P%sT	1996
+			-8:00	Mexico	P%sT	2001
+			-8:00	US	P%sT	2002 Feb 20
+			-8:00	Mexico	P%sT
+# From Paul Eggert (2001-03-05):
+# Formerly there was an America/Ensenada zone, which differed from
+# America/Tijuana only in that it did not observe DST from 1976
+# through 1995.  This was as per Shanks.  However, Guy Harris reports
+# that the 1987 OAG says "Only Ensenada, Mexicale, San Felipe and
+# Tijuana observe DST," which contradicts Shanks but does imply that
+# DST-observance was a town-by-town matter back then.  This concerns
+# data after 1970 so most likely there should be at least one Zone
+# other than America/Tijuana for Baja, but it's not clear yet what its
+# name or contents should be.
+#
+# Revillagigedo Is
+# no information
+
+###############################################################################
+
+# Anguilla
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Anguilla	-4:12:16 -	LMT	1912 Mar 2
+			-4:00	-	AST
+
+# Antigua and Barbuda
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Antigua	-4:07:12 -	LMT	1912 Mar 2
+			-5:00	-	EST	1951
+			-4:00	-	AST
+
+# Bahamas
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Bahamas	1964	max	-	Oct	lastSun	2:00	0	S
+Rule	Bahamas	1964	1986	-	Apr	lastSun	2:00	1:00	D
+Rule	Bahamas	1987	max	-	Apr	Sun>=1	2:00	1:00	D
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Nassau	-5:09:24 -	LMT	1912 Mar 2
+			-5:00	Bahamas	E%sT
+
+# Barbados
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Barb	1977	only	-	Jun	12	2:00	1:00	D
+Rule	Barb	1977	1978	-	Oct	Sun>=1	2:00	0	S
+Rule	Barb	1978	1980	-	Apr	Sun>=15	2:00	1:00	D
+Rule	Barb	1979	only	-	Sep	30	2:00	0	S
+Rule	Barb	1980	only	-	Sep	25	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Barbados	-3:58:28 -	LMT	1924		# Bridgetown
+			-3:58:28 -	BMT	1932	  # Bridgetown Mean Time
+			-4:00	Barb	A%sT
+
+# Belize
+# Whitman entirely disagrees with Shanks; go with Shanks.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Belize	1918	1942	-	Oct	Sun>=2	0:00	0:30	HD
+Rule	Belize	1919	1943	-	Feb	Sun>=9	0:00	0	S
+Rule	Belize	1973	only	-	Dec	 5	0:00	1:00	D
+Rule	Belize	1974	only	-	Feb	 9	0:00	0	S
+Rule	Belize	1982	only	-	Dec	18	0:00	1:00	D
+Rule	Belize	1983	only	-	Feb	12	0:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Belize	-5:52:48 -	LMT	1912 Apr
+			-6:00	Belize	C%sT
+
+# Bermuda
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Atlantic/Bermuda	-4:19:04 -	LMT	1930 Jan  1 2:00    # Hamilton
+			-4:00	-	AST	1974 Apr 28 2:00
+			-4:00	Bahamas	A%sT
+
+# Cayman Is
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Cayman	-5:25:32 -	LMT	1890		# Georgetown
+			-5:07:12 -	KMT	1912 Feb    # Kingston Mean Time
+			-5:00	-	EST
+
+# Costa Rica
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	CR	1979	1980	-	Feb	lastSun	0:00	1:00	D
+Rule	CR	1979	1980	-	Jun	Sun>=1	0:00	0	S
+Rule	CR	1991	1992	-	Jan	Sat>=15	0:00	1:00	D
+# IATA SSIM (1991-09) says the following was at 1:00; go with Shanks.
+Rule	CR	1991	only	-	Jul	 1	0:00	0	S
+Rule	CR	1992	only	-	Mar	15	0:00	0	S
+# There are too many San Joses elsewhere, so we'll use `Costa Rica'.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Costa_Rica	-5:36:20 -	LMT	1890		# San Jose
+			-5:36:20 -	SJMT	1921 Jan 15 # San Jose Mean Time
+			-6:00	CR	C%sT
+# Coco
+# no information; probably like America/Costa_Rica
+
+# Cuba
+
+# From Arthur David Olson (1999-03-29):
+# The 1999-03-28 exhibition baseball game held in Havana, Cuba, between
+# the Cuban National Team and the Baltimore Orioles was carried live on
+# the Orioles Radio Network, including affiliate WTOP in Washington, DC.
+# During the game, play-by-play announcer Jim Hunter noted that
+# "We'll be losing two hours of sleep...Cuba switched to Daylight Saving
+# Time today."  (The "two hour" remark referred to losing one hour of
+# sleep on 1999-03-28--when the announcers were in Cuba as it switched
+# to DST--and one more hour on 1999-04-04--when the announcers will have
+# returned to Baltimore, which switches on that date.)
+
+# From Evert van der Veer via Steffen Thorsen (2004-10-28):
+# Cuba is not going back to standard time this year.
+# From Paul Eggert (2004-10-28):
+# http://www.granma.cu/ingles/2004/septiembre/juev30/41medid-i.html
+# says that it's due to a problem at the Antonio Guiteras
+# thermoelectric plant, and says "This October there will be no return
+# to normal hours (after daylight saving time)".
+# For now, let's assume that it's a one-year temporary measure.
+
+# From Carlos A. Carnero Delgado (2005-11-12):
+# This year (just like in 2004-2005) there's no change in time zone
+# adjustment in Cuba.  We will stay in daylight saving time:
+# http://www.granma.cu/espanol/2005/noviembre/mier9/horario.html
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Cuba	1928	only	-	Jun	10	0:00	1:00	D
+Rule	Cuba	1928	only	-	Oct	10	0:00	0	S
+Rule	Cuba	1940	1942	-	Jun	Sun>=1	0:00	1:00	D
+Rule	Cuba	1940	1942	-	Sep	Sun>=1	0:00	0	S
+Rule	Cuba	1945	1946	-	Jun	Sun>=1	0:00	1:00	D
+Rule	Cuba	1945	1946	-	Sep	Sun>=1	0:00	0	S
+Rule	Cuba	1965	only	-	Jun	1	0:00	1:00	D
+Rule	Cuba	1965	only	-	Sep	30	0:00	0	S
+Rule	Cuba	1966	only	-	May	29	0:00	1:00	D
+Rule	Cuba	1966	only	-	Oct	2	0:00	0	S
+Rule	Cuba	1967	only	-	Apr	8	0:00	1:00	D
+Rule	Cuba	1967	1968	-	Sep	Sun>=8	0:00	0	S
+Rule	Cuba	1968	only	-	Apr	14	0:00	1:00	D
+Rule	Cuba	1969	1977	-	Apr	lastSun	0:00	1:00	D
+Rule	Cuba	1969	1971	-	Oct	lastSun	0:00	0	S
+Rule	Cuba	1972	1974	-	Oct	8	0:00	0	S
+Rule	Cuba	1975	1977	-	Oct	lastSun	0:00	0	S
+Rule	Cuba	1978	only	-	May	7	0:00	1:00	D
+Rule	Cuba	1978	1990	-	Oct	Sun>=8	0:00	0	S
+Rule	Cuba	1979	1980	-	Mar	Sun>=15	0:00	1:00	D
+Rule	Cuba	1981	1985	-	May	Sun>=5	0:00	1:00	D
+Rule	Cuba	1986	1989	-	Mar	Sun>=14	0:00	1:00	D
+Rule	Cuba	1990	1997	-	Apr	Sun>=1	0:00	1:00	D
+Rule	Cuba	1991	1995	-	Oct	Sun>=8	0:00s	0	S
+Rule	Cuba	1996	only	-	Oct	 6	0:00s	0	S
+Rule	Cuba	1997	only	-	Oct	12	0:00s	0	S
+Rule	Cuba	1998	1999	-	Mar	lastSun	0:00s	1:00	D
+Rule	Cuba	1998	2003	-	Oct	lastSun	0:00s	0	S
+Rule	Cuba	2000	max	-	Apr	Sun>=1	0:00s	1:00	D
+Rule	Cuba	2006	max	-	Oct	lastSun	0:00s	0	S
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Havana	-5:29:28 -	LMT	1890
+			-5:29:36 -	HMT	1925 Jul 19 12:00 # Havana MT
+			-5:00	Cuba	C%sT
+
+# Dominica
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Dominica	-4:05:36 -	LMT	1911 Jul 1 0:01		# Roseau
+			-4:00	-	AST
+
+# Dominican Republic
+
+# From Steffen Thorsen (2000-10-30):
+# Enrique Morales reported to me that the Dominican Republic has changed the
+# time zone to Eastern Standard Time as of Sunday 29 at 2 am....
+# http://www.listin.com.do/antes/261000/republica/princi.html
+
+# From Paul Eggert (2000-12-04):
+# That URL (2000-10-26, in Spanish) says they planned to use US-style DST.
+
+# From Rives McDow (2000-12-01):
+# Dominican Republic changed its mind and presidential decree on Tuesday,
+# November 28, 2000, with a new decree.  On Sunday, December 3 at 1:00 AM the
+# Dominican Republic will be reverting to 8 hours from the International Date
+# Line, and will not be using DST in the foreseeable future.  The reason they
+# decided to use DST was to be in synch with Puerto Rico, who was also going
+# to implement DST.  When Puerto Rico didn't implement DST, the president
+# decided to revert.
+
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	DR	1966	only	-	Oct	30	0:00	1:00	D
+Rule	DR	1967	only	-	Feb	28	0:00	0	S
+Rule	DR	1969	1973	-	Oct	lastSun	0:00	0:30	HD
+Rule	DR	1970	only	-	Feb	21	0:00	0	S
+Rule	DR	1971	only	-	Jan	20	0:00	0	S
+Rule	DR	1972	1974	-	Jan	21	0:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Santo_Domingo -4:39:36 -	LMT	1890
+			-4:40	-	SDMT	1933 Apr  1 12:00 # S. Dom. MT
+			-5:00	DR	E%sT	1974 Oct 27
+			-4:00	-	AST	2000 Oct 29 02:00
+			-5:00	US	E%sT	2000 Dec  3 01:00
+			-4:00	-	AST
+
+# El Salvador
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Salv	1987	1988	-	May	Sun>=1	0:00	1:00	D
+Rule	Salv	1987	1988	-	Sep	lastSun	0:00	0	S
+# There are too many San Salvadors elsewhere, so use America/El_Salvador
+# instead of America/San_Salvador.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/El_Salvador -5:56:48 -	LMT	1921		# San Salvador
+			-6:00	Salv	C%sT
+
+# Grenada
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Grenada	-4:07:00 -	LMT	1911 Jul	# St George's
+			-4:00	-	AST
+
+# Guadeloupe
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Guadeloupe	-4:06:08 -	LMT	1911 Jun 8	# Pointe a Pitre
+			-4:00	-	AST
+
+# Guatemala
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Guat	1973	only	-	Nov	25	0:00	1:00	D
+Rule	Guat	1974	only	-	Feb	24	0:00	0	S
+Rule	Guat	1983	only	-	May	21	0:00	1:00	D
+Rule	Guat	1983	only	-	Sep	22	0:00	0	S
+Rule	Guat	1991	only	-	Mar	23	0:00	1:00	D
+Rule	Guat	1991	only	-	Sep	 7	0:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Guatemala	-6:02:04 -	LMT	1918 Oct 5
+			-6:00	Guat	C%sT
+
+# Haiti
+# From Gwillim Law (2005-04-15):
+# Risto O. Nykanen wrote me that Haiti is now on DST.
+# I searched for confirmation, and I found a
+# <a href="http://www.haitianconsulate.org/time.doc"> press release
+# on the Web page of the Haitian Consulate in Chicago (2005-03-31),
+# </a>.  Translated from French, it says:
+#
+#  "The Prime Minister's Communication Office notifies the public in general
+#   and the press in particular that, following a decision of the Interior
+#   Ministry and the Territorial Collectivities [I suppose that means the
+#   provinces], Haiti will move to Eastern Daylight Time in the night from next
+#   Saturday the 2nd to Sunday the 3rd.
+#
+#  "Consequently, the Prime Minister's Communication Office wishes to inform
+#   the population that the country's clocks will be set forward one hour
+#   starting at midnight.  This provision will hold until the last Saturday in
+#   October 2005.
+#
+#  "Port-au-Prince, March 31, 2005"
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Haiti	1983	only	-	May	8	0:00	1:00	D
+Rule	Haiti	1984	1987	-	Apr	lastSun	0:00	1:00	D
+Rule	Haiti	1983	1987	-	Oct	lastSun	0:00	0	S
+# Shanks says AT is 2:00, but IATA SSIM (1991/1997) says 1:00s.  Go with IATA.
+Rule	Haiti	1988	1997	-	Apr	Sun>=1	1:00s	1:00	D
+Rule	Haiti	1988	1997	-	Oct	lastSun	1:00s	0	S
+Rule	Haiti	2005	only	-	Apr	Sun>=1	0:00	1:00	D
+Rule	Haiti	2005	only	-	Oct	lastSun	0:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Port-au-Prince -4:49:20 -	LMT	1890
+			-4:49	-	PPMT	1917 Jan 24 12:00 # P-a-P MT
+			-5:00	Haiti	E%sT
+
+# Honduras
+# Shanks says 1921 Jan 1; go with Whitman's more precise Apr 1.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Tegucigalpa -5:48:52 -	LMT	1921 Apr
+			-6:00	Salv	C%sT
+#
+# Great Swan I ceded by US to Honduras in 1972
+
+# Jamaica
+
+# From Bob Devine (1988-01-28):
+# Follows US rules.
+
+# From U. S. Naval Observatory (1989-01-19):
+# JAMAICA             5 H  BEHIND UTC
+
+# From Shanks:
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Jamaica	-5:07:12 -	LMT	1890		# Kingston
+			-5:07:12 -	KMT	1912 Feb    # Kingston Mean Time
+			-5:00	-	EST	1974 Apr 28 2:00
+			-5:00	US	E%sT	1984
+			-5:00	-	EST
+
+# Martinique
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Martinique	-4:04:20 -      LMT	1890		# Fort-de-France
+			-4:04:20 -	FFMT	1911 May     # Fort-de-France MT
+			-4:00	-	AST	1980 Apr  6
+			-4:00	1:00	ADT	1980 Sep 28
+			-4:00	-	AST
+
+# Montserrat
+# From Paul Eggert (1997-08-31):
+# Recent volcanic eruptions have forced evacuation of Plymouth, the capital.
+# Luckily, Olveston, the current de facto capital, has the same longitude.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Montserrat	-4:08:52 -	LMT	1911 Jul 1 0:01   # Olveston
+			-4:00	-	AST
+
+# Nicaragua
+#
+# From Steffen Thorsen (1998-12-29):
+# Nicaragua seems to be back at -6:00 but I have not been able to find when
+# they changed from -5:00.
+#
+# From Steffen Thorsen (2005-04-12):
+# I've got reports from 8 different people that Nicaragua just started
+# DST on Sunday 2005-04-10, in order to save energy because of
+# expensive petroleum.  The exact end date for DST is not yet
+# announced, only "September" but some sites also say "mid-September".
+# Some background information is available on the President's official site:
+# http://www.presidencia.gob.ni/Presidencia/Files_index/Secretaria/Notas%20de%20Prensa/Presidente/2005/ABRIL/Gobierno-de-nicaragua-adelanta-hora-oficial-06abril.htm
+# The Decree, no 23-2005 is available here:
+# http://www.presidencia.gob.ni/buscador_gaceta/BD/DECRETOS/2005/Decreto%2023-2005%20Se%20adelanta%20en%20una%20hora%20en%20todo%20el%20territorio%20nacional%20apartir%20de%20las%2024horas%20del%2009%20de%20Abril.pdf
+#
+# From Paul Eggert (2005-05-01):
+# The decree doesn't say anything about daylight saving, but for now let's
+# assume that it is daylight saving and that they'll switch back on the
+# 3rd Sunday in September.
+#
+# From Gwillim Law (2005-04-21):
+# The Associated Press story on the time change, which can be found at
+# http://www.lapalmainteractivo.com/guias/content/gen/ap/America_Latina/AMC_GEN_NICARAGUA_HORA.html
+# and elsewhere, says (fifth paragraph, translated from Spanish):  "The last
+# time that a change of clocks was applied to save energy was in the year 2000
+# during the Arnoldo Aleman administration."...
+# The northamerica file says that Nicaragua has been on UTC-6 continuously
+# since December 1998.  I wasn't able to find any details of Nicaraguan time
+# changes in 2000.  Perhaps a note could be added to the northamerica file, to
+# the effect that we have indirect evidence that DST was observed in 2000.
+#
+# From Jesper Norgaard Welen (2005-11-02):
+# Nicaragua left DST the 2005-10-02 at 00:00 (local time).
+# http://www.presidencia.gob.ni/presidencia/files_index/secretaria/comunicados/2005/septiembre/26septiembre-cambio-hora.htm
+# (2005-09-26)
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Nic	1979	1980	-	Mar	Sun>=16	0:00	1:00	D
+Rule	Nic	1979	1980	-	Jun	Mon>=23	0:00	0	S
+Rule	Nic	1992	only	-	Jan	 1	4:00	1:00	D
+Rule	Nic	1992	only	-	Sep	24	0:00	0	S
+Rule	Nic	2005	only	-	Apr	10	0:00	1:00	D
+Rule	Nic	2005	only	-	Oct	 2	0:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Managua	-5:45:08 -	LMT	1890
+			-5:45:12 -	MMT	1934 Jun 23 # Managua Mean Time?
+			-6:00	-	CST	1973 May
+			-5:00	-	EST	1975 Feb 16
+			-6:00	Nic	C%sT	1993 Jan 1 4:00
+			-5:00	-	EST	1998 Dec
+			-6:00	Nic	C%sT
+
+# Panama
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Panama	-5:18:08 -	LMT	1890
+			-5:19:36 -	CMT	1908 Apr 22   # Colon Mean Time
+			-5:00	-	EST
+
+# Puerto Rico
+# There are too many San Juans elsewhere, so we'll use `Puerto_Rico'.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Puerto_Rico -4:24:25 -	LMT	1899 Mar 28 12:00    # San Juan
+			-4:00	-	AST	1942 May  3
+			-4:00	1:00	AWT	1945 Sep 30  2:00
+			-4:00	-	AST
+
+# St Kitts-Nevis
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/St_Kitts	-4:10:52 -	LMT	1912 Mar 2	# Basseterre
+			-4:00	-	AST
+
+# St Lucia
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/St_Lucia	-4:04:00 -	LMT	1890		# Castries
+			-4:04:00 -	CMT	1912	    # Castries Mean Time
+			-4:00	-	AST
+
+# St Pierre and Miquelon
+# There are too many St Pierres elsewhere, so we'll use `Miquelon'.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Miquelon	-3:44:40 -	LMT	1911 May 15	# St Pierre
+			-4:00	-	AST	1980 May
+			-3:00	-	PMST	1987 # Pierre & Miquelon Time
+			-3:00	Canada	PM%sT
+
+# St Vincent and the Grenadines
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/St_Vincent	-4:04:56 -	LMT	1890		# Kingstown
+			-4:04:56 -	KMT	1912	   # Kingstown Mean Time
+			-4:00	-	AST
+
+# Turks and Caicos
+# From Paul Eggert (1998-08-06):
+# Shanks says they use US DST rules, but IATA SSIM (1991/1998)
+# says they switch at midnight.  Go with IATA SSIM.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	TC	1979	1986	-	Apr	lastSun	0:00	1:00	D
+Rule	TC	1979	max	-	Oct	lastSun	0:00	0	S
+Rule	TC	1987	max	-	Apr	Sun>=1	0:00	1:00	D
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Grand_Turk	-4:44:32 -	LMT	1890
+			-5:07:12 -	KMT	1912 Feb    # Kingston Mean Time
+			-5:00	TC	E%sT
+
+# British Virgin Is
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Tortola	-4:18:28 -	LMT	1911 Jul    # Road Town
+			-4:00	-	AST
+
+# Virgin Is
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/St_Thomas	-4:19:44 -	LMT	1911 Jul    # Charlotte Amalie
+			-4:00	-	AST
diff --git a/JodaTime/src/java/org/joda/time/tz/src/southamerica b/JodaTime/src/java/org/joda/time/tz/src/southamerica
index eb7b5c7d8..3355f1d0d 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/southamerica
+++ b/JodaTime/src/java/org/joda/time/tz/src/southamerica
@@ -1,1071 +1,1071 @@
-# @(#)southamerica	7.66
-# <pre>
-
-# This data is by no means authoritative; if you think you know better,
-# go ahead and edit the file (and please send any changes to
-# tz@elsie.nci.nih.gov for general use in the future).
-
-# From Paul Eggert (1999-07-07):
-# A good source for time zone historical data outside the U.S. is
-# Thomas G. Shanks, The International Atlas (5th edition),
-# San Diego: ACS Publications, Inc. (1999).
-#
-# Gwillim Law writes that a good source
-# for recent time zone data is the International Air Transport
-# Association's Standard Schedules Information Manual (IATA SSIM),
-# published semiannually.  Law sent in several helpful summaries
-# of the IATA's data after 1990.
-#
-# Except where otherwise noted, Shanks is the source for entries through 1990,
-# and IATA SSIM is the source for entries after 1990.
-#
-# Earlier editions of these tables used the North American style (e.g. ARST and
-# ARDT for Argentine Standard and Daylight Time), but the following quote
-# suggests that it's better to use European style (e.g. ART and ARST).
-#	I suggest the use of _Summer time_ instead of the more cumbersome
-#	_daylight-saving time_.  _Summer time_ seems to be in general use
-#	in Europe and South America.
-#	-- E O Cutler, _New York Times_ (1937-02-14), quoted in
-#	H L Mencken, _The American Language: Supplement I_ (1960), p 466
-#
-# Earlier editions of these tables also used the North American style
-# for time zones in Brazil, but this was incorrect, as Brazilians say
-# "summer time".  Reinaldo Goulart, a Sao Paulo businessman active in
-# the railroad sector, writes (1999-07-06):
-#	The subject of time zones is currently a matter of discussion/debate in
-#	Brazil.  Let's say that "the Brasilia time" is considered the
-#	"official time" because Brasilia is the capital city.
-#	The other three time zones are called "Brasilia time "minus one" or
-#	"plus one" or "plus two".  As far as I know there is no such
-#	name/designation as "Eastern Time" or "Central Time".
-# So I invented the following (English-language) abbreviations for now.
-# Corrections are welcome!
-#		std	dst
-#	-2:00	FNT	FNST	Fernando de Noronha
-#	-3:00	BRT	BRST	Brasilia
-#	-4:00	AMT	AMST	Amazon
-#	-5:00	ACT	ACST	Acre
-
-###############################################################################
-
-###############################################################################
-
-# Argentina
-
-# From Bob Devine (1988-01-28):
-# Argentina: first Sunday in October to first Sunday in April since 1976.
-# Double Summer time from 1969 to 1974.  Switches at midnight.
-
-# From U. S. Naval Observatory (1988-01-199):
-# ARGENTINA           3 H BEHIND   UTC
-
-# From Hernan G. Otero (1995-06-26):
-# I am sending modifications to the Argentine time zone table...
-# AR was chosen because they are the ISO letters that represent Argentina.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Arg	1930	only	-	Dec	 1	0:00	1:00	S
-Rule	Arg	1931	only	-	Apr	 1	0:00	0	-
-Rule	Arg	1931	only	-	Oct	15	0:00	1:00	S
-Rule	Arg	1932	1940	-	Mar	 1	0:00	0	-
-Rule	Arg	1932	1939	-	Nov	 1	0:00	1:00	S
-Rule	Arg	1940	only	-	Jul	 1	0:00	1:00	S
-Rule	Arg	1941	only	-	Jun	15	0:00	0	-
-Rule	Arg	1941	only	-	Oct	15	0:00	1:00	S
-Rule	Arg	1943	only	-	Aug	 1	0:00	0	-
-Rule	Arg	1943	only	-	Oct	15	0:00	1:00	S
-Rule	Arg	1946	only	-	Mar	 1	0:00	0	-
-Rule	Arg	1946	only	-	Oct	 1	0:00	1:00	S
-Rule	Arg	1963	only	-	Oct	 1	0:00	0	-
-Rule	Arg	1963	only	-	Dec	15	0:00	1:00	S
-Rule	Arg	1964	1966	-	Mar	 1	0:00	0	-
-Rule	Arg	1964	1966	-	Oct	15	0:00	1:00	S
-Rule	Arg	1967	only	-	Apr	 2	0:00	0	-
-Rule	Arg	1967	1968	-	Oct	Sun>=1	0:00	1:00	S
-Rule	Arg	1968	1969	-	Apr	Sun>=1	0:00	0	-
-Rule	Arg	1974	only	-	Jan	23	0:00	1:00	S
-Rule	Arg	1974	only	-	May	 1	0:00	0	-
-Rule	Arg	1988	only	-	Dec	 1	0:00	1:00	S
-#
-# From Hernan G. Otero (1995-06-26):
-# These corrections were contributed by InterSoft Argentina S.A.,
-# obtaining the data from the:
-# Talleres de Hidrografia Naval Argentina
-# (Argentine Naval Hydrography Institute)
-#
-# Shanks stops after 1992-03-01; go with Otero.
-Rule	Arg	1989	1993	-	Mar	Sun>=1	0:00	0	-
-Rule	Arg	1989	1992	-	Oct	Sun>=15	0:00	1:00	S
-#
-# From Hernan G. Otero (1995-06-26):
-# From this moment on, the law that mandated the daylight saving
-# time corrections was derogated and no more modifications
-# to the time zones (for daylight saving) are now made.
-#
-# From Rives McDow (2000-01-10):
-# On October 3, 1999, 0:00 local, Argentina implemented daylight savings time,
-# which did not result in the switch of a time zone, as they stayed 9 hours
-# from the International Date Line.
-Rule	Arg	1999	only	-	Oct	Sun>=1	0:00	1:00	S
-Rule	Arg	2000	only	-	Mar	Sun>=1	0:00	0	-
-#
-# From Peter Gradelski via Steffen Thorsen (2000-03-01):
-# We just checked with our Sao Paulo office and they say the government of
-# Argentina decided not to become one of the countries that go on or off DST.
-# So Buenos Aires should be -3 hours from GMT at all times.
-#
-# From Fabian L. Arce Jofre (2000-04-04):
-# The law that claimed DST for Argentina was derogated by President Fernando
-# de la Rua on March 2, 2000, because it would make people spend more energy
-# in the winter time, rather than less.  The change took effect on March 3.
-#
-# From Mariano Absatz (2001-06-06):
-# one of the major newspapers here in Argentina said that the 1999
-# Timezone Law (which never was effectively applied) will (would?) be
-# in effect.... The article is at
-# http://ar.clarin.com/diario/2001-06-06/e-01701.htm
-# ... The Law itself is "Ley No 25155", sanctioned on 1999-08-25, enacted
-# 1999-09-17, and published 1999-09-21.  The official publication is at:
-# http://www.boletin.jus.gov.ar/BON/Primera/1999/09-Septiembre/21/PDF/BO21-09-99LEG.PDF
-# Regretfully, you have to subscribe (and pay) for the on-line version....
-#
-# (2001-06-12):
-# the timezone for Argentina will not change next Sunday.
-# Apparently it will do so on Sunday 24th....
-# http://ar.clarin.com/diario/2001-06-12/s-03501.htm
-#
-# (2001-06-25):
-# Last Friday (yes, the last working day before the date of the change), the
-# Senate annulled the 1999 law that introduced the changes later postponed.
-# http://www.clarin.com.ar/diario/2001-06-22/s-03601.htm
-# It remains the vote of the Deputies..., but it will be the same....
-# This kind of things had always been done this way in Argentina.
-# We are still -03:00 all year round in all of the country.
-#
-# From Mariano Absatz (2004-05-21):
-# Today it was officially published that the Province of Mendoza is changing
-# its timezone this winter... starting tomorrow night....
-# http://www.gobernac.mendoza.gov.ar/boletin/pdf/20040521-27158-normas.pdf
-# From Paul Eggert (2004-05-24):
-# It's Law No. 7,210.  This change is due to a public power emergency, so for
-# now we'll assume it's for this year only.
-#
-# From Paul Eggert (2002-01-22):
-# <a href="http://www.spicasc.net/horvera.html">
-# Hora de verano para la Republica Argentina (2000-10-01)
-# </a> says that standard time in Argentina from 1894-10-31
-# to 1920-05-01 was -4:16:48.25.  Go with this more-precise value
-# over Shanks.
-#
-# From Mariano Absatz (2004-06-05):
-# These media articles from a major newspaper mostly cover the current state:
-# http://www.lanacion.com.ar/04/05/27/de_604825.asp
-# http://www.lanacion.com.ar/04/05/28/de_605203.asp
-#
-# The following eight (8) provinces pulled clocks back to UTC-04:00 at
-# midnight Monday May 31st. (that is, the night between 05/31 and 06/01).
-# Apparently, all nine provinces would go back to UTC-03:00 at the same
-# time in October 17th.
-#
-# Catamarca, Chubut, La Rioja, San Juan, San Luis, Santa Cruz,
-# Tierra del Fuego, Tucuman.
-#
-# From Mariano Absatz (2004-06-14):
-# ... this weekend, the Province of Tucuman decided it'd go back to UTC-03:00
-# yesterday midnight (that is, at 24:00 Saturday 12th), since the people's
-# annoyance with the change is much higher than the power savings obtained....
-#
-# From Gwillim Law (2004-06-14):
-# http://www.lanacion.com.ar/04/06/10/de_609078.asp ...
-#     "The time change in Tierra del Fuego was a conflicted decision from
-#   the start.  The government had decreed that the measure would take
-#   effect on June 1, but a normative error forced the new time to begin
-#   three days earlier, from a Saturday to a Sunday....
-# Our understanding was that the change was originally scheduled to take place
-# on June 1 at 00:00 in Chubut, Santa Cruz, Tierra del Fuego (and some other
-# provinces).  Sunday was May 30, only two days earlier.  So the article
-# contains a contradiction.  I would give more credence to the Saturday/Sunday
-# date than the "three days earlier" phrase, and conclude that Tierra del
-# Fuego set its clocks back at 2004-05-30 00:00.
-#
-# From Steffen Thorsen (2004-10-05):
-# The previous law 7210 which changed the province of Mendoza's time zone
-# back in May have been modified slightly in a new law 7277, which set the
-# new end date to 2004-09-26 (original date was 2004-10-17).
-# http://www.gobernac.mendoza.gov.ar/boletin/pdf/20040924-27244-normas.pdf
-#
-# From Mariano Absatz (2004-10-05):
-# San Juan changed from UTC-03:00 to UTC-04:00 at midnight between
-# Sunday, May 30th and Monday, May 31st.  It changed back to UTC-03:00
-# at midnight between Saturday, July 24th and Sunday, July 25th....
-# http://www.sanjuan.gov.ar/prensa/archivo/000329.html
-# http://www.sanjuan.gov.ar/prensa/archivo/000426.html
-# http://www.sanjuan.gov.ar/prensa/archivo/000441.html
-
-# Unless otherwise specified, data are from Shanks through 1992, from
-# the IATA otherwise.  As noted below, Shanks says that
-# America/Cordoba split into 6 subregions during 1991/1992, but we
-# haven't verified this yet so for now we'll keep it a single region.
-#
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-#
-# Buenos Aires (BA), Capital Federal (CF),
-Zone America/Argentina/Buenos_Aires -3:53:48 - LMT 1894 Oct 31
-			-4:16:48 -	CMT	1920 May # Cordoba Mean Time
-			-4:00	-	ART	1930 Dec
-			-4:00	Arg	AR%sT	1969 Oct  5
-			-3:00	Arg	AR%sT	1999 Oct  3
-			-4:00	Arg	AR%sT	2000 Mar  3
-			-3:00	-	ART
-#
-# Santa Fe (SF), Entre Rios (ER), Corrientes (CN), Misiones (MN), Chaco (CC),
-# Formosa (FM), Salta (SA), Santiago del Estero (SE), Cordoba (CB),
-# San Luis (SL), La Pampa (LP), Neuquen (NQ), Rio Negro (RN)
-#
-# Shanks also makes the following claims, which we haven't verified:
-# - Formosa switched to -3:00 on 1991-01-07.
-# - Misiones switched to -3:00 on 1990-12-29.
-# - Chaco switched to -3:00 on 1991-01-04.
-# - San Luis switched to -4:00 on 1990-03-14, then to -3:00 on 1990-10-15,
-#   then to -4:00 on 1991-03-01, then to -3:00 on 1991-06-01.
-# - Santiago del Estero switched to -4:00 on 1991-04-01,
-#   then to -3:00 on 1991-04-26.
-#
-Zone America/Argentina/Cordoba -4:16:48 - LMT	1894 Oct 31
-			-4:16:48 -	CMT	1920 May
-			-4:00	-	ART	1930 Dec
-			-4:00	Arg	AR%sT	1969 Oct  5
-			-3:00	Arg	AR%sT	1991 Mar  3
-			-4:00	-	WART	1991 Oct 20
-			-3:00	Arg	AR%sT	1999 Oct  3
-			-4:00	Arg	AR%sT	2000 Mar  3
-			-3:00	-	ART
-#
-# Tucuman (TM)
-Zone America/Argentina/Tucuman -4:20:52 - LMT	1894 Oct 31
-			-4:16:48 -	CMT	1920 May
-			-4:00	-	ART	1930 Dec
-			-4:00	Arg	AR%sT	1969 Oct  5
-			-3:00	Arg	AR%sT	1991 Mar  3
-			-4:00	-	WART	1991 Oct 20
-			-3:00	Arg	AR%sT	1999 Oct  3
-			-4:00	Arg	AR%sT	2000 Mar  3
-			-3:00	-	ART	2004 Jun  1
-			-4:00	-	WART	2004 Jun 13
-			-3:00	-	ART
-#
-# La Rioja (LR)
-Zone America/Argentina/La_Rioja -4:27:24 - LMT	1894 Oct 31
-			-4:16:48 -	CMT	1920 May
-			-4:00	-	ART	1930 Dec
-			-4:00	Arg	AR%sT	1969 Oct  5
-			-3:00	Arg	AR%sT	1991 Mar  1
-			-4:00	-	WART	1991 May  7
-			-3:00	Arg	AR%sT	1999 Oct  3
-			-4:00	Arg	AR%sT	2000 Mar  3
-			-3:00	-	ART	2004 Jun  1
-			-4:00	-	WART	2004 Jun 20
-			-3:00	-	ART
-#
-# San Juan (SJ)
-Zone America/Argentina/San_Juan -4:34:04 - LMT	1894 Oct 31
-			-4:16:48 -	CMT	1920 May
-			-4:00	-	ART	1930 Dec
-			-4:00	Arg	AR%sT	1969 Oct  5
-			-3:00	Arg	AR%sT	1991 Mar  1
-			-4:00	-	WART	1991 May  7
-			-3:00	Arg	AR%sT	1999 Oct  3
-			-4:00	Arg	AR%sT	2000 Mar  3
-			-3:00	-	ART	2004 May 31
-			-4:00	-	WART	2004 Jul 25
-			-3:00	-	ART
-#
-# Jujuy (JY)
-Zone America/Argentina/Jujuy -4:21:12 -	LMT	1894 Oct 31
-			-4:16:48 -	CMT	1920 May
-			-4:00	-	ART	1930 Dec
-			-4:00	Arg	AR%sT	1969 Oct  5
-			-3:00	Arg	AR%sT	1990 Mar  4
-			-4:00	-	WART	1990 Oct 28
-			-4:00	1:00	WARST	1991 Mar 17
-			-4:00	-	WART	1991 Oct  6
-			-3:00	1:00	ARST	1992
-			-3:00	Arg	AR%sT	1999 Oct  3
-			-4:00	Arg	AR%sT	2000 Mar  3
-			-3:00	-	ART
-#
-# Catamarca (CT), Chubut (CH)
-Zone America/Argentina/Catamarca -4:23:08 - LMT	1894 Oct 31
-			-4:16:48 -	CMT	1920 May
-			-4:00	-	ART	1930 Dec
-			-4:00	Arg	AR%sT	1969 Oct  5
-			-3:00	Arg	AR%sT	1991 Mar  3
-			-4:00	-	WART	1991 Oct 20
-			-3:00	Arg	AR%sT	1999 Oct  3
-			-4:00	Arg	AR%sT	2000 Mar  3
-			-3:00	-	ART	2004 Jun  1
-			-4:00	-	WART	2004 Jun 20
-			-3:00	-	ART
-#
-# Mendoza (MZ)
-Zone America/Argentina/Mendoza -4:35:16 - LMT	1894 Oct 31
-			-4:16:48 -	CMT	1920 May
-			-4:00	-	ART	1930 Dec
-			-4:00	Arg	AR%sT	1969 Oct  5
-			-3:00	Arg	AR%sT	1990 Mar  4
-			-4:00	-	WART	1990 Oct 15
-			-4:00	1:00	WARST	1991 Mar  1
-			-4:00	-	WART	1991 Oct 15
-			-4:00	1:00	WARST	1992 Mar  1
-			-4:00	-	WART	1992 Oct 18
-			-3:00	Arg	AR%sT	1999 Oct  3
-			-4:00	Arg	AR%sT	2000 Mar  3
-			-3:00	-	ART	2004 May 23
-			-4:00	-	WART	2004 Sep 26
-			-3:00	-	ART
-#
-# Santa Cruz (SC)
-Zone America/Argentina/Rio_Gallegos -4:36:52 - LMT 1894 Oct 31
-			-4:16:48 -	CMT	1920 May # Cordoba Mean Time
-			-4:00	-	ART	1930 Dec
-			-4:00	Arg	AR%sT	1969 Oct  5
-			-3:00	Arg	AR%sT	1999 Oct  3
-			-4:00	Arg	AR%sT	2000 Mar  3
-			-3:00	-	ART	2004 Jun  1
-			-4:00	-	WART	2004 Jun 20
-			-3:00	-	ART
-#
-# Tierra del Fuego, Antartida e Islas del Atlantico Sur (TF)
-Zone America/Argentina/Ushuaia -4:33:12 - LMT 1894 Oct 31
-			-4:16:48 -	CMT	1920 May # Cordoba Mean Time
-			-4:00	-	ART	1930 Dec
-			-4:00	Arg	AR%sT	1969 Oct  5
-			-3:00	Arg	AR%sT	1999 Oct  3
-			-4:00	Arg	AR%sT	2000 Mar  3
-			-3:00	-	ART	2004 May 30
-			-4:00	-	WART	2004 Jun 20
-			-3:00	-	ART
-
-# Aruba
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Aruba	-4:40:24 -	LMT	1912 Feb 12	# Oranjestad
-			-4:30	-	ANT	1965 # Netherlands Antilles Time
-			-4:00	-	AST
-
-# Bolivia
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/La_Paz	-4:32:36 -	LMT	1890
-			-4:32:36 -	CMT	1931 Oct 15 # Calamarca MT
-			-4:32:36 1:00	BOST	1932 Mar 21 # Bolivia ST
-			-4:00	-	BOT	# Bolivia Time
-
-# Brazil
-
-# From Paul Eggert (1993-11-18):
-# The mayor of Rio recently attempted to change the time zone rules
-# just in his city, in order to leave more summer time for the tourist trade.
-# The rule change lasted only part of the day;
-# the federal government refused to follow the city's rules, and business
-# was in a chaos, so the mayor backed down that afternoon.
-
-# From IATA SSIM (1996-02):
-# _Only_ the following states in BR1 observe DST: Rio Grande do Sul (RS),
-# Santa Catarina (SC), Parana (PR), Sao Paulo (SP), Rio de Janeiro (RJ),
-# Espirito Santo (ES), Minas Gerais (MG), Bahia (BA), Goias (GO),
-# Distrito Federal (DF), Tocantins (TO), Sergipe [SE] and Alagoas [AL].
-# [The last three states are new to this issue of the IATA SSIM.]
-
-# From Gwillim Law (1996-10-07):
-# Geography, history (Tocantins was part of Goias until 1989), and other
-# sources of time zone information lead me to believe that AL, SE, and TO were
-# always in BR1, and so the only change was whether or not they observed DST....
-# The earliest issue of the SSIM I have is 2/91.  Each issue from then until
-# 9/95 says that DST is observed only in the ten states I quoted from 9/95,
-# along with Mato Grosso (MT) and Mato Grosso do Sul (MS), which are in BR2
-# (UTC-4)....  The other two time zones given for Brazil are BR3, which is
-# UTC-5, no DST, and applies only in the state of Acre (AC); and BR4, which is
-# UTC-2, and applies to Fernando de Noronha (formerly FN, but I believe it's
-# become part of the state of Pernambuco).  The boundary between BR1 and BR2
-# has never been clearly stated.  They've simply been called East and West.
-# However, some conclusions can be drawn from another IATA manual: the Airline
-# Coding Directory, which lists close to 400 airports in Brazil.  For each
-# airport it gives a time zone which is coded to the SSIM.  From that
-# information, I'm led to conclude that the states of Amapa (AP), Ceara (CE),
-# Maranhao (MA), Paraiba (PR), Pernambuco (PE), Piaui (PI), and Rio Grande do
-# Norte (RN), and the eastern part of Para (PA) are all in BR1 without DST.
-
-# From Marcos Tadeu (1998-09-27):
-# <a href="http://pcdsh01.on.br/verao1.html">
-# Brazilian official page
-# </a>
-
-# From Jesper Norgaard (2000-11-03):
-# [For an official list of which regions in Brazil use which time zones, see:]
-# http://pcdsh01.on.br/Fusbr.htm
-# http://pcdsh01.on.br/Fusbrhv.htm
-
-# From Celso Doria via David Madeo (2002-10-09):
-# The reason for the delay this year has to do with elections in Brazil.
-#
-# Unlike in the United States, elections in Brazil are 100% computerized and
-# the results are known almost immediately.  Yesterday, it was the first
-# round of the elections when 115 million Brazilians voted for President,
-# Governor, Senators, Federal Deputies, and State Deputies.  Nobody is
-# counting (or re-counting) votes anymore and we know there will be a second
-# round for the Presidency and also for some Governors.  The 2nd round will
-# take place on October 27th.
-#
-# The reason why the DST will only begin November 3rd is that the thousands
-# of electoral machines used cannot have their time changed, and since the
-# Constitution says the elections must begin at 8:00 AM and end at 5:00 PM,
-# the Government decided to postpone DST, instead of changing the Constitution
-# (maybe, for the next elections, it will be possible to change the clock)...
-
-# From Rodrigo Severo (2004-10-04):
-# It's just the biannual change made necessary by the much hyped, supposedly
-# modern Brazilian eletronic voting machines which, apparently, can't deal
-# with a time change between the first and the second rounds of the elections.
-
-# From Paul Eggert (2002-10-10):
-# The official decrees referenced below are mostly taken from
-# <a href="http://pcdsh01.on.br/DecHV.html">
-# Decretos sobre o Horario de Verao no Brasil
-# </a> (2001-09-20, in Portuguese).
-# The official site for all decrees, including those not related to time, is
-# <a href="http://www.presidencia.gov.br/CCIVIL/decreto/principal_ano.htm">
-# Presidencia da Republica, Subchefia para Assuntos Juridicos, Decretos
-# </a> (in Portuguese).
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-# Decree <a href="http://pcdsh01.on.br/HV20466.htm">20,466</a> (1931-10-01)
-# Decree <a href="http://pcdsh01.on.br/HV21896.htm">21,896</a> (1932-01-10)
-Rule	Brazil	1931	only	-	Oct	 3	11:00	1:00	S
-Rule	Brazil	1932	1933	-	Apr	 1	 0:00	0	-
-Rule	Brazil	1932	only	-	Oct	 3	 0:00	1:00	S
-# Decree <a href="http://pcdsh01.on.br/HV23195.htm">23,195</a> (1933-10-10)
-# revoked DST.
-# Decree <a href="http://pcdsh01.on.br/HV27496.htm">27,496</a> (1949-11-24)
-# Decree <a href="http://pcdsh01.on.br/HV27998.htm">27,998</a> (1950-04-13)
-Rule	Brazil	1949	1952	-	Dec	 1	 0:00	1:00	S
-Rule	Brazil	1950	only	-	Apr	16	 1:00	0	-
-Rule	Brazil	1951	1952	-	Apr	 1	 0:00	0	-
-# Decree <a href="http://pcdsh01.on.br/HV32308.htm">32,308</a> (1953-02-24)
-Rule	Brazil	1953	only	-	Mar	 1	 0:00	0	-
-# Decree <a href="http://pcdsh01.on.br/HV34724.htm">34,724</a> (1953-11-30)
-# revoked DST.
-# Decree <a href="http://pcdsh01.on.br/HV52700.htm">52,700</a> (1963-10-18)
-# established DST from 1963-10-23 00:00 to 1964-02-29 00:00
-# in SP, RJ, GB, MG, ES, due to the prolongation of the drought.
-# Decree <a href="http://pcdsh01.on.br/HV53071.htm">53,071</a> (1963-12-03)
-# extended the above decree to all of the national territory on 12-09.
-Rule	Brazil	1963	only	-	Dec	 9	 0:00	1:00	S
-# Decree <a href="http://pcdsh01.on.br/HV53604.htm">53,604</a> (1964-02-25)
-# extended summer time by one day to 1964-03-01 00:00 (start of school).
-Rule	Brazil	1964	only	-	Mar	 1	 0:00	0	-
-# Decree <a href="http://pcdsh01.on.br/HV55639.htm">55,639</a> (1965-01-27)
-Rule	Brazil	1965	only	-	Jan	31	 0:00	1:00	S
-Rule	Brazil	1965	only	-	Mar	31	 0:00	0	-
-# Decree <a href="http://pcdsh01.on.br/HV57303.htm">57,303</a> (1965-11-22)
-Rule	Brazil	1965	only	-	Dec	 1	 0:00	1:00	S
-# Decree <a href="http://pcdsh01.on.br/HV57843.htm">57,843</a> (1966-02-18)
-Rule	Brazil	1966	1968	-	Mar	 1	 0:00	0	-
-Rule	Brazil	1966	1967	-	Nov	 1	 0:00	1:00	S
-# Decree <a href="http://pcdsh01.on.br/HV63429.htm">63,429</a> (1968-10-15)
-# revoked DST.
-# Decree <a href="http://pcdsh01.on.br/HV91698.htm">91,698</a> (1985-09-27)
-Rule	Brazil	1985	only	-	Nov	 2	 0:00	1:00	S
-# Decree 92,310 (1986-01-21)
-# Decree 92,463 (1986-03-13)
-Rule	Brazil	1986	only	-	Mar	15	 0:00	0	-
-# Decree 93,316 (1986-10-01)
-Rule	Brazil	1986	only	-	Oct	25	 0:00	1:00	S
-Rule	Brazil	1987	only	-	Feb	14	 0:00	0	-
-# Decree <a href="http://pcdsh01.on.br/HV94922.htm">94,922</a> (1987-09-22)
-Rule	Brazil	1987	only	-	Oct	25	 0:00	1:00	S
-Rule	Brazil	1988	only	-	Feb	 7	 0:00	0	-
-# Decree <a href="http://pcdsh01.on.br/HV96676.htm">96,676</a> (1988-09-12)
-# except for the states of AC, AM, PA, RR, RO, and AP (then a territory)
-Rule	Brazil	1988	only	-	Oct	16	 0:00	1:00	S
-Rule	Brazil	1989	only	-	Jan	29	 0:00	0	-
-# Decree <a href="http://pcdsh01.on.br/HV98077.htm">98,077</a> (1989-08-21)
-# with the same exceptions
-Rule	Brazil	1989	only	-	Oct	15	 0:00	1:00	S
-Rule	Brazil	1990	only	-	Feb	11	 0:00	0	-
-# Decree <a href="http://pcdsh01.on.br/HV99530.htm">99,530</a> (1990-09-17)
-# adopted by RS, SC, PR, SP, RJ, ES, MG, GO, MS, DF.
-# Decree 99,629 (1990-10-19) adds BA, MT.
-Rule	Brazil	1990	only	-	Oct	21	 0:00	1:00	S
-Rule	Brazil	1991	only	-	Feb	17	 0:00	0	-
-# <a href="http://pcdsh01.on.br/HV1991.htm">Unnumbered decree</a> (1991-09-25)
-# adopted by RS, SC, PR, SP, RJ, ES, MG, BA, GO, MT, MS, DF.
-Rule	Brazil	1991	only	-	Oct	20	 0:00	1:00	S
-Rule	Brazil	1992	only	-	Feb	 9	 0:00	0	-
-# <a href="http://pcdsh01.on.br/HV1992.htm">Unnumbered decree</a> (1992-10-16)
-# adopted by same states.
-Rule	Brazil	1992	only	-	Oct	25	 0:00	1:00	S
-Rule	Brazil	1993	only	-	Jan	31	 0:00	0	-
-# Decree <a href="http://pcdsh01.on.br/HV942.htm">942</a> (1993-09-28)
-# adopted by same states, plus AM.
-# Decree <a href="http://pcdsh01.on.br/HV1252.htm">1,252</a> (1994-09-22;
-# web page corrected 2004-01-07) adopted by same states, minus AM.
-# Decree <a href="http://pcdsh01.on.br/HV1636.htm">1,636</a> (1995-09-14)
-# adopted by same states, plus MT and TO.
-# Decree <a href="http://pcdsh01.on.br/HV1674.htm">1,674</a> (1995-10-13)
-# adds AL, SE.
-Rule	Brazil	1993	1995	-	Oct	Sun>=11	 0:00	1:00	S
-Rule	Brazil	1994	1995	-	Feb	Sun>=15	 0:00	0	-
-Rule	Brazil	1996	only	-	Feb	11	 0:00	0	-
-# Decree <a href="http://pcdsh01.on.br/HV2000.htm">2,000</a> (1996-09-04)
-# adopted by same states, minus AL, SE.
-Rule	Brazil	1996	only	-	Oct	 6	 0:00	1:00	S
-Rule	Brazil	1997	only	-	Feb	16	 0:00	0	-
-# From Daniel C. Sobral (1998-02-12):
-# In 1997, the DS began on October 6. The stated reason was that
-# because international television networks ignored Brazil's policy on DS,
-# they bought the wrong times on satellite for coverage of Pope's visit.
-# This year, the ending date of DS was postponed to March 1
-# to help dealing with the shortages of electric power.
-#
-# Decree 2,317 (1997-09-04), adopted by same states.
-Rule	Brazil	1997	only	-	Oct	 6	 0:00	1:00	S
-# Decree <a href="http://pcdsh01.on.br/figuras/HV2495.JPG">2,495</a>
-# (1998-02-10)
-Rule	Brazil	1998	only	-	Mar	 1	 0:00	0	-
-# Decree <a href="http://pcdsh01.on.br/figuras/Hv98.jpg">2,780</a> (1998-09-11)
-# adopted by the same states as before.
-Rule	Brazil	1998	only	-	Oct	11	 0:00	1:00	S
-Rule	Brazil	1999	only	-	Feb	21	 0:00	0	-
-# Decree <a href="http://pcdsh01.on.br/figuras/HV3150.gif">3,150</a>
-# (1999-08-23) adopted by same states.
-# Decree <a href="http://pcdsh01.on.br/DecHV99.gif">3,188</a> (1999-09-30)
-# adds SE, AL, PB, PE, RN, CE, PI, MA and RR.
-Rule	Brazil	1999	only	-	Oct	 3	 0:00	1:00	S
-Rule	Brazil	2000	only	-	Feb	27	 0:00	0	-
-# Decree <a href="http://pcdsh01.on.br/DEC3592.htm">3,592</a> (2000-09-06)
-# adopted by the same states as before.
-# Decree <a href="http://pcdsh01.on.br/Dec3630.jpg">3,630</a> (2000-10-13)
-# repeals DST in PE and RR, effective 2000-10-15 00:00.
-# Decree <a href="http://pcdsh01.on.br/Dec3632.jpg">3,632</a> (2000-10-17)
-# repeals DST in SE, AL, PB, RN, CE, PI and MA, effective 2000-10-22 00:00.
-# Decree <a href="http://pcdsh01.on.br/figuras/HV3916.gif">3,916</a>
-# (2001-09-13) reestablishes DST in AL, CE, MA, PB, PE, PI, RN, SE.
-Rule	Brazil	2000	2001	-	Oct	Sun>=8	 0:00	1:00	S
-Rule	Brazil	2001	max	-	Feb	Sun>=15	 0:00	0	-
-# Decree 4,399 (2002-10-01) repeals DST in AL, CE, MA, PB, PE, PI, RN, SE.
-# <a href="http://www.presidencia.gov.br/CCIVIL/decreto/2002/D4399.htm"></a>
-Rule	Brazil	2002	only	-	Nov	 3	 0:00	1:00	S
-# Decree 4,844 (2003-09-24; corrected 2003-09-26) repeals DST in BA, MT, TO.
-# <a href="http://www.presidencia.gov.br/CCIVIL/decreto/2003/D4844.htm"></a>
-Rule	Brazil	2003	only	-	Oct	19	 0:00	1:00	S
-# Decree 5,223 (2004-10-01) reestablishes DST in MT.
-# <a href="http://www.planalto.gov.br/ccivil_03/_Ato2004-2006/2004/Decreto/D5223.htm"></a>
-Rule	Brazil	2004	only	-	Nov	 2	 0:00	1:00	S
-# Decree <a href="http://pcdsh01.on.br/DecHV5539.gif">5,539</a> (2005-09-19),
-# adopted by the same states as before.
-Rule	Brazil	2005	max	-	Oct	Sun>=15	 0:00	1:00	S
-# The latest ruleset listed above says that the following states observe DST:
-# DF, ES, GO, MG, MS, MT, PR, RJ, RS, SC, SP.
-# For dates after mid-2006, the above rules with TO="max" are guesses
-# and are quite possibly wrong, but are more likely than no DST at all.
-
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-#
-# Fernando de Noronha (administratively part of PE)
-Zone America/Noronha	-2:09:40 -	LMT	1914
-			-2:00	Brazil	FN%sT	1990 Sep 17
-			-2:00	-	FNT	1999 Sep 30
-			-2:00	Brazil	FN%sT	2000 Oct 15
-			-2:00	-	FNT	2001 Sep 13
-			-2:00	Brazil	FN%sT	2002 Oct  1
-			-2:00	-	FNT
-# Other Atlantic islands have no permanent settlement.
-# These include Trindade and Martin Vaz (administratively part of ES),
-# Atol das Rocas (RN), and Penedos de Sao Pedro e Sao Paulo (PE).
-# Fernando de Noronha was a separate territory from 1942-09-02 to 1989-01-01;
-# it also included the Penedos.
-#
-# Amapa (AP), east Para (PA)
-# East Para includes Belem, Maraba, Serra Norte, and Sao Felix do Xingu.
-# The division between east and west Para is the river Xingu.
-# In the north a very small part from the river Javary (now Jari I guess,
-# the border with Amapa) to the Amazon, then to the Xingu.
-Zone America/Belem	-3:13:56 -	LMT	1914
-			-3:00	Brazil	BR%sT	1988 Sep 12
-			-3:00	-	BRT
-#
-# Maranhao (MA), Piaui (PI), Ceara (CE), Rio Grande do Norte (RN),
-# Paraiba (PB)
-Zone America/Fortaleza	-2:34:00 -	LMT	1914
-			-3:00	Brazil	BR%sT	1990 Sep 17
-			-3:00	-	BRT	1999 Sep 30
-			-3:00	Brazil	BR%sT	2000 Oct 22
-			-3:00	-	BRT	2001 Sep 13
-			-3:00	Brazil	BR%sT	2002 Oct  1
-			-3:00	-	BRT
-#
-# Pernambuco (PE) (except Atlantic islands)
-Zone America/Recife	-2:19:36 -	LMT	1914
-			-3:00	Brazil	BR%sT	1990 Sep 17
-			-3:00	-	BRT	1999 Sep 30
-			-3:00	Brazil	BR%sT	2000 Oct 15
-			-3:00	-	BRT	2001 Sep 13
-			-3:00	Brazil	BR%sT	2002 Oct  1
-			-3:00	-	BRT
-#
-# Tocantins (TO)
-Zone America/Araguaina	-3:12:48 -	LMT	1914
-			-3:00	Brazil	BR%sT	1990 Sep 17
-			-3:00	-	BRT	1995 Sep 14
-			-3:00	Brazil	BR%sT	2003 Sep 24
-			-3:00	-	BRT
-#
-# Alagoas (AL), Sergipe (SE)
-Zone America/Maceio	-2:22:52 -	LMT	1914
-			-3:00	Brazil	BR%sT	1990 Sep 17
-			-3:00	-	BRT	1995 Oct 13
-			-3:00	Brazil	BR%sT	1996 Sep  4
-			-3:00	-	BRT	1999 Sep 30
-			-3:00	Brazil	BR%sT	2000 Oct 22
-			-3:00	-	BRT	2001 Sep 13
-			-3:00	Brazil	BR%sT	2002 Oct  1
-			-3:00	-	BRT
-#
-# Bahia (BA)
-# There are too many Salvadors elsewhere, so use America/Bahia instead
-# of America/Salvador.
-Zone America/Bahia	-2:34:04 -	LMT	1914
-			-3:00	Brazil	BR%sT	2003 Sep 24
-			-3:00	-	BRT
-#
-# Goias (GO), Distrito Federal (DF), Minas Gerais (MG),
-# Espirito Santo (ES), Rio de Janeiro (RJ), Sao Paulo (SP), Parana (PR),
-# Santa Catarina (SC), Rio Grande do Sul (RS)
-Zone America/Sao_Paulo	-3:06:28 -	LMT	1914
-			-3:00	Brazil	BR%sT	1963 Oct 23 00:00
-			-3:00	1:00	BRST	1964
-			-3:00	Brazil	BR%sT
-#
-# Mato Grosso do Sul (MS)
-Zone America/Campo_Grande -3:38:28 -	LMT	1914
-			-4:00	Brazil	AM%sT
-#
-# Mato Grosso (MT)
-Zone America/Cuiaba	-3:44:20 -	LMT	1914
-			-4:00	Brazil	AM%sT	2003 Sep 24
-			-4:00	-	AMT	2004 Oct  1
-			-4:00	Brazil	AM%sT
-#
-# west Para (PA), Rondonia (RO)
-# West Para includes Altamira, Oribidos, Prainha, Oriximina, and Santarem.
-Zone America/Porto_Velho -4:15:36 -	LMT	1914
-			-4:00	Brazil	AM%sT	1988 Sep 12
-			-4:00	-	AMT
-#
-# Roraima (RR)
-Zone America/Boa_Vista	-4:02:40 -	LMT	1914
-			-4:00	Brazil	AM%sT	1988 Sep 12
-			-4:00	-	AMT	1999 Sep 30
-			-4:00	Brazil	AM%sT	2000 Oct 15
-			-4:00	-	AMT
-#
-# east Amazonas (AM): Boca do Acre, Jutai, Manaus, Floriano Peixoto
-# The great circle line from Tabatinga to Porto Acre divides
-# east from west Amazonas.
-Zone America/Manaus	-4:00:04 -	LMT	1914
-			-4:00	Brazil	AM%sT	1988 Sep 12
-			-4:00	-	AMT	1993 Sep 28
-			-4:00	Brazil	AM%sT	1994 Sep 22
-			-4:00	-	AMT
-#
-# west Amazonas (AM): Atalaia do Norte, Boca do Maoco, Benjamin Constant,
-#	Eirunepe, Envira, Ipixuna
-Zone America/Eirunepe	-4:39:28 -	LMT	1914
-			-5:00	Brazil	AC%sT	1988 Sep 12
-			-5:00	-	ACT	1993 Sep 28
-			-5:00	Brazil	AC%sT	1994 Sep 22
-			-5:00	-	ACT
-#
-# Acre (AC)
-Zone America/Rio_Branco	-4:31:12 -	LMT	1914
-			-5:00	Brazil	AC%sT	1988 Sep 12
-			-5:00	-	ACT
-
-
-# Chile
-
-# From Eduardo Krell (1995-10-19):
-# The law says to switch to DST at midnight [24:00] on the second SATURDAY
-# of October....  The law is the same for March and October.
-# (1998-09-29):
-# Because of the drought this year, the government decided to go into
-# DST earlier (saturday 9/26 at 24:00). This is a one-time change only ...
-# (unless there's another dry season next year, I guess).
-
-# From Julio I. Pacheco Troncoso (1999-03-18):
-# Because of the same drought, the government decided to end DST later,
-# on April 3, (one-time change).
-
-# From Gwillim Law (2001-05-04):
-# I came across another article in "La Tercera" about Chilean DST.
-# <http://www.tercera.cl/diario/2000/10/13/t-extras.html>
-# It clearly confirms my earlier suggestion, that DST begins at 22:00
-# on Easter Island....  But it also seems to be saying that the
-# observance of DST in Chile began in 1966, rather than 1969 as
-# ... [Shanks] has it....
-#
-# My translation:
-#
-# "The Chilean Army has announced that summer time will begin tomorrow,
-# Saturday, October 14 in continental Chile, insular Chile, and
-# Antarctica, as provided by Supreme Decree 25 of January 11, 1966.
-# By the preceding, official time in continental Chile and Chilean
-# Antarctic, and official time in Western Insular Chile, which applies
-# to Easter Island and Sala y Gomez Island, will be set forward at
-# midnight and at 22:00, respectively, by 20 minutes."
-
-# From Paul Eggert (2001-05-04):
-# Go with this article in preference to Shanks's 1969 date for modern DST.
-# Assume this rule has been used since DST was introduced in the islands.
-
-# From Paul Eggert (2002-10-24):
-# <http://www.shoa.cl/shoa/faqhoraoficial.htm> gives many details that
-# disagree with the following table, but we haven't had time to compare them.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Chile	1918	only	-	Sep	 1	0:00	1:00	S
-Rule	Chile	1919	only	-	Jul	 2	0:00	0	-
-Rule	Chile	1927	1931	-	Sep	 1	0:00	1:00	S
-Rule	Chile	1928	1932	-	Apr	 1	0:00	0	-
-Rule	Chile	1966	1997	-	Oct	Sun>=9	4:00u	1:00	S
-Rule	Chile	1967	1998	-	Mar	Sun>=9	3:00u	0	-
-Rule	Chile	1998	only	-	Sep	27	4:00u	1:00	S
-Rule	Chile	1999	only	-	Apr	 4	3:00u	0	-
-Rule	Chile	1999	max	-	Oct	Sun>=9	4:00u	1:00	S
-Rule	Chile	2000	max	-	Mar	Sun>=9	3:00u	0	-
-# IATA SSIM anomalies: (1990-09) says 1990-09-16; (1992-02) says 1992-03-14;
-# (1996-09) says 1998-03-08.  Ignore these.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Santiago	-4:42:40 -	LMT	1890
-			-4:42:40 -	SMT	1910	    # Santiago Mean Time
-			-5:00	Chile	CL%sT	1932 Sep    # Chile Time
-			-4:00	Chile	CL%sT
-Zone Pacific/Easter	-7:17:28 -	LMT	1890	    # Mataveri
-			-7:17:28 -	MMT	1932 Sep    # Mataveri Mean Time
-			-7:00	Chile	EAS%sT	1982 Mar 14 # Easter I Time
-			-6:00	Chile	EAS%sT
-#
-# Sala y Gomez Island is like Pacific/Easter.
-# Other Chilean locations, including Juan Fernandez Is, San Ambrosio,
-# San Felix, and Antarctic bases, are like America/Santiago.
-
-# Colombia
-# Shanks specifies 24:00 for 1992 transition times; go with IATA,
-# as it seems implausible to change clocks at midnight New Year's Eve.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	CO	1992	only	-	May	 2	0:00	1:00	S
-Rule	CO	1992	only	-	Dec	31	0:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Bogota	-4:56:20 -	LMT	1884 Mar 13
-			-4:56:20 -	BMT	1914 Nov 23 # Bogota Mean Time
-			-5:00	CO	CO%sT	# Colombia Time
-# Malpelo, Providencia, San Andres
-# no information; probably like America/Bogota
-
-# Curacao
-# Shanks says that Bottom and Oranjestad have been at -4:00 since
-# standard time was introduced on 1912-03-02; and that Kralendijk and Rincon
-# used Kralendijk Mean Time (-4:33:08) from 1912-02-02 to 1965-01-01.
-# This all predates our 1970 cutoff, though.
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Curacao	-4:35:44 -	LMT	1912 Feb 12	# Willemstad
-			-4:30	-	ANT	1965 # Netherlands Antilles Time
-			-4:00	-	AST
-
-# Ecuador
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Guayaquil	-5:19:20 -	LMT	1890
-			-5:14:00 -	QMT	1931 # Quito Mean Time
-			-5:00	-	ECT	     # Ecuador Time
-Zone Pacific/Galapagos	-5:58:24 -	LMT	1931 # Puerto Baquerizo Moreno
-			-5:00	-	ECT	1986
-			-6:00	-	GALT	     # Galapagos Time
-
-# Falklands
-
-# From Paul Eggert (2001-03-05):
-# Between 1990 and 2000 inclusive, Shanks and the IATA agree except
-# the IATA gives 1996-09-08.  Go with Shanks.
-
-# From Falkland Islands Government Office, London (2001-01-22)
-# via Jesper Norgaard:
-# ... the clocks revert back to Local Mean Time at 2 am on Sunday 15
-# April 2001 and advance one hour to summer time at 2 am on Sunday 2
-# September.  It is anticipated that the clocks will revert back at 2
-# am on Sunday 21 April 2002 and advance to summer time at 2 am on
-# Sunday 1 September.
-
-# From Rives McDow (2001-02-13):
-#
-# I have communicated several times with people there, and the last
-# time I had communications that was helpful was in 1998.  Here is
-# what was said then:
-#
-# "The general rule was that Stanley used daylight saving and the Camp
-# did not. However for various reasons many people in the Camp have
-# started to use daylight saving (known locally as 'Stanley Time')
-# There is no rule as to who uses daylight saving - it is a matter of
-# personal choice and so it is impossible to draw a map showing who
-# uses it and who does not. Any list would be out of date as soon as
-# it was produced. This year daylight saving ended on April 18/19th
-# and started again on September 12/13th.  I do not know what the rule
-# is, but can find out if you like.  We do not change at the same time
-# as UK or Chile."
-#
-# I did have in my notes that the rule was "Second Saturday in Sep at
-# 0:00 until third Saturday in Apr at 0:00".  I think that this does
-# not agree in some cases with Shanks; is this true?
-#
-# Also, there is no mention in the list that some areas in the
-# Falklands do not use DST.  I have found in my communications there
-# that these areas are on the western half of East Falkland and all of
-# West Falkland.  Stanley is the only place that consistently observes
-# DST.  Again, as in other places in the world, the farmers don't like
-# it.  West Falkland is almost entirely sheep farmers.
-#
-# I know one lady there that keeps a list of which farm keeps DST and
-# which doesn't each year.  She runs a shop in Stanley, and says that
-# the list changes each year.  She uses it to communicate to her
-# customers, catching them when they are home for lunch or dinner.
-
-# From Paul Eggert (2001-03-05):
-# For now, we'll just record the time in Stanley, since we have no
-# better info.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Falk	1937	1938	-	Sep	lastSun	0:00	1:00	S
-Rule	Falk	1938	1942	-	Mar	Sun>=19	0:00	0	-
-Rule	Falk	1939	only	-	Oct	1	0:00	1:00	S
-Rule	Falk	1940	1942	-	Sep	lastSun	0:00	1:00	S
-Rule	Falk	1943	only	-	Jan	1	0:00	0	-
-Rule	Falk	1983	only	-	Sep	lastSun	0:00	1:00	S
-Rule	Falk	1984	1985	-	Apr	lastSun	0:00	0	-
-Rule	Falk	1984	only	-	Sep	16	0:00	1:00	S
-Rule	Falk	1985	2000	-	Sep	Sun>=9	0:00	1:00	S
-Rule	Falk	1986	2000	-	Apr	Sun>=16	0:00	0	-
-Rule	Falk	2001	max	-	Apr	Sun>=15	2:00	0	-
-Rule	Falk	2001	max	-	Sep	Sun>=1	2:00	1:00	S
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Atlantic/Stanley	-3:51:24 -	LMT	1890
-			-3:51:24 -	SMT	1912 Mar 12  # Stanley Mean Time
-			-4:00	Falk	FK%sT	1983 May     # Falkland Is Time
-			-3:00	Falk	FK%sT	1985 Sep 15
-			-4:00	Falk	FK%sT
-
-# French Guiana
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Cayenne	-3:29:20 -	LMT	1911 Jul
-			-4:00	-	GFT	1967 Oct # French Guiana Time
-			-3:00	-	GFT
-
-# Guyana
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Guyana	-3:52:40 -	LMT	1915 Mar	# Georgetown
-			-3:45	-	GBGT	1966 May 26 # Br Guiana Time
-			-3:45	-	GYT	1975 Jul 31 # Guyana Time
-			-3:00	-	GYT	1991
-# IATA SSIM (1996-06) says -4:00.  Assume a 1991 switch.
-			-4:00	-	GYT
-
-# Paraguay
-# From Paul Eggert (1999-10-29):
-# Shanks (1999) says that spring transitions are from 01:00 -> 02:00,
-# and autumn transitions are from 00:00 -> 23:00.  Go with earlier
-# editions of Shanks, and with the IATA, who say transitions occur at 00:00.
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Para	1975	1988	-	Oct	 1	0:00	1:00	S
-Rule	Para	1975	1978	-	Mar	 1	0:00	0	-
-Rule	Para	1979	1991	-	Apr	 1	0:00	0	-
-Rule	Para	1989	only	-	Oct	22	0:00	1:00	S
-Rule	Para	1990	only	-	Oct	 1	0:00	1:00	S
-Rule	Para	1991	only	-	Oct	 6	0:00	1:00	S
-Rule	Para	1992	only	-	Mar	 1	0:00	0	-
-Rule	Para	1992	only	-	Oct	 5	0:00	1:00	S
-Rule	Para	1993	only	-	Mar	31	0:00	0	-
-Rule	Para	1993	1995	-	Oct	 1	0:00	1:00	S
-Rule	Para	1994	1995	-	Feb	lastSun	0:00	0	-
-Rule	Para	1996	only	-	Mar	 1	0:00	0	-
-# IATA SSIM (2000-02) says 1999-10-10; ignore this for now.
-# From Steffen Thorsen (2000-10-02):
-# I have three independent reports that Paraguay changed to DST this Sunday
-# (10-01).
-#
-# Translated by Gwillim Law (2001-02-27) from
-# <a href="http://www.diarionoticias.com.py/011000/nacional/naciona1.htm">
-# Noticias, a daily paper in Asuncion, Paraguay (2000-10-01)
-# </a>:
-# Starting at 0:00 today, the clock will be set forward 60 minutes, in
-# fulfillment of Decree No. 7,273 of the Executive Power....  The time change
-# system has been operating for several years.  Formerly there was a separate
-# decree each year; the new law has the same effect, but permanently.  Every
-# year, the time will change on the first Sunday of October; likewise, the
-# clock will be set back on the first Sunday of March.
-#
-# From Jesper Norgaard (2001-03-06) [an official URL saying similar things]:
-# http://gateway.abc.com.py:8000/pub/pag04.mbr/artic?FHA=2001-03-03-02.24.52.900592
-#
-Rule	Para	1996	2001	-	Oct	Sun>=1	0:00	1:00	S
-# IATA SSIM (1997-09) says Mar 1; go with Shanks.
-Rule	Para	1997	only	-	Feb	lastSun	0:00	0	-
-# Shanks says 1999-02-28; IATA SSIM (1999-02) says 1999-02-27, but
-# (1999-09) reports no date; go with above sources and Gerd Knops (2001-02-27).
-Rule	Para	1998	2001	-	Mar	Sun>=1	0:00	0	-
-# From Rives McDow (2002-02-28):
-# A decree was issued in Paraguay (no. 16350) on 2002-02-26 that changed the
-# dst method to be from the first Sunday in September to the first Sunday in
-# April.
-Rule	Para	2002	2004	-	Apr	Sun>=1	0:00	0	-
-Rule	Para	2002	2003	-	Sep	Sun>=1	0:00	1:00	S
-#
-# From Jesper Norgaard Welen (2005-01-02):
-# There are several sources that claim that Paraguay made
-# a timezone rule change in autumn 2004.
-# From Steffen Thorsen (2005-01-05):
-# Decree 1,867 (2004-03-05) <http://www.labor.com.py/noticias.asp?id=27>
-Rule	Para	2004	max	-	Oct	Sun>=15	0:00	1:00	S
-Rule	Para	2005	max	-	Mar	Sun>=8	0:00	0	-
-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Asuncion	-3:50:40 -	LMT	1890
-			-3:50:40 -	AMT	1931 Oct 10 # Asuncion Mean Time
-			-4:00	-	PYT	1972 Oct # Paraguay Time
-			-3:00	-	PYT	1974 Apr
-			-4:00	Para	PY%sT
-
-# Peru
-#
-# <a href="news:xrGmb.39935$gA1.13896113@news4.srv.hcvlny.cv.net">
-# From Evelyn C. Leeper via Mark Brader (2003-10-26):</a>
-# When we were in Peru in 1985-1986, they apparently switched over
-# sometime between December 29 and January 3 while we were on the Amazon.
-#
-# From Paul Eggert (2003-11-02):
-# Shanks doesn't have this transition.  Assume 1986 was like 1987.
-
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Peru	1938	only	-	Jan	 1	0:00	1:00	S
-Rule	Peru	1938	only	-	Apr	 1	0:00	0	-
-Rule	Peru	1938	1939	-	Sep	lastSun	0:00	1:00	S
-Rule	Peru	1939	1940	-	Mar	Sun>=24	0:00	0	-
-Rule	Peru	1986	1987	-	Jan	 1	0:00	1:00	S
-Rule	Peru	1986	1987	-	Apr	 1	0:00	0	-
-Rule	Peru	1990	only	-	Jan	 1	0:00	1:00	S
-Rule	Peru	1990	only	-	Apr	 1	0:00	0	-
-# IATA is ambiguous for 1993/1995; go with Shanks.
-Rule	Peru	1994	only	-	Jan	 1	0:00	1:00	S
-Rule	Peru	1994	only	-	Apr	 1	0:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Lima	-5:08:12 -	LMT	1890
-			-5:08:36 -	LMT	1908 Jul 28 # Lima Mean Time?
-			-5:00	Peru	PE%sT	# Peru Time
-
-# South Georgia
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Atlantic/South_Georgia -2:26:08 -	LMT	1890		# Grytviken
-			-2:00	-	GST	# South Georgia Time
-
-# South Sandwich Is
-# uninhabited; scientific personnel have wintered
-
-# Suriname
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Paramaribo	-3:40:40 -	LMT	1911
-			-3:40:52 -	PMT	1935     # Paramaribo Mean Time
-			-3:40:36 -	PMT	1945 Oct # The capital moved?
-			-3:30	-	NEGT	1975 Nov 20 # Dutch Guiana Time
-			-3:30	-	SRT	1984 Oct # Suriname Time
-			-3:00	-	SRT
-
-# Trinidad and Tobago
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Port_of_Spain -4:06:04 -	LMT	1912 Mar 2
-			-4:00	-	AST
-
-# Uruguay
-# From Paul Eggert (1993-11-18):
-# Uruguay wins the prize for the strangest peacetime manipulation of the rules.
-# From Shanks:
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-# Whitman gives 1923 Oct 1; go with Shanks.
-Rule	Uruguay	1923	only	-	Oct	 2	 0:00	0:30	HS
-Rule	Uruguay	1924	1926	-	Apr	 1	 0:00	0	-
-Rule	Uruguay	1924	1925	-	Oct	 1	 0:00	0:30	HS
-Rule	Uruguay	1933	1935	-	Oct	lastSun	 0:00	0:30	HS
-# Shanks gives 1935 Apr 1 0:00 and 1936 Mar 30 0:00; go with Whitman.
-Rule	Uruguay	1934	1936	-	Mar	Sat>=25	23:30s	0	-
-Rule	Uruguay	1936	only	-	Nov	 1	 0:00	0:30	HS
-Rule	Uruguay	1937	1941	-	Mar	lastSun	 0:00	0	-
-# Whitman gives 1937 Oct 3; go with Shanks.
-Rule	Uruguay	1937	1940	-	Oct	lastSun	 0:00	0:30	HS
-# Whitman gives 1941 Oct 24 - 1942 Mar 27, 1942 Dec 14 - 1943 Apr 13,
-# and 1943 Apr 13 ``to present time''; go with Shanks.
-Rule	Uruguay	1941	only	-	Aug	 1	 0:00	0	-
-Rule	Uruguay	1942	only	-	Jan	 1	 0:00	0:30	HS
-Rule	Uruguay	1942	only	-	Dec	14	 0:00	1:00	S
-Rule	Uruguay	1943	only	-	Mar	14	 0:00	0	-
-Rule	Uruguay	1959	only	-	May	24	 0:00	1:00	S
-Rule	Uruguay	1959	only	-	Nov	15	 0:00	0	-
-Rule	Uruguay	1960	only	-	Jan	17	 0:00	1:00	S
-Rule	Uruguay	1960	only	-	Mar	 6	 0:00	0	-
-Rule	Uruguay	1965	1967	-	Apr	Sun>=1	 0:00	1:00	S
-Rule	Uruguay	1965	only	-	Sep	26	 0:00	0	-
-Rule	Uruguay	1966	1967	-	Oct	31	 0:00	0	-
-Rule	Uruguay	1968	1970	-	May	27	 0:00	0:30	HS
-Rule	Uruguay	1968	1970	-	Dec	 2	 0:00	0	-
-Rule	Uruguay	1972	only	-	Apr	24	 0:00	1:00	S
-Rule	Uruguay	1972	only	-	Aug	15	 0:00	0	-
-Rule	Uruguay	1974	only	-	Mar	10	 0:00	0:30	HS
-Rule	Uruguay	1974	only	-	Dec	22	 0:00	1:00	S
-Rule	Uruguay	1976	only	-	Oct	 1	 0:00	0	-
-Rule	Uruguay	1977	only	-	Dec	 4	 0:00	1:00	S
-Rule	Uruguay	1978	only	-	Apr	 1	 0:00	0	-
-Rule	Uruguay	1979	only	-	Oct	 1	 0:00	1:00	S
-Rule	Uruguay	1980	only	-	May	 1	 0:00	0	-
-Rule	Uruguay	1987	only	-	Dec	14	 0:00	1:00	S
-Rule	Uruguay	1988	only	-	Mar	14	 0:00	0	-
-Rule	Uruguay	1988	only	-	Dec	11	 0:00	1:00	S
-Rule	Uruguay	1989	only	-	Mar	12	 0:00	0	-
-Rule	Uruguay	1989	only	-	Oct	29	 0:00	1:00	S
-# Shanks says no DST was observed in 1990/1 and 1991/2,
-# and that 1992/3's DST was from 10-25 to 03-01.  Go with IATA.
-Rule	Uruguay	1990	1992	-	Mar	Sun>=1	 0:00	0	-
-Rule	Uruguay	1990	1991	-	Oct	Sun>=21	 0:00	1:00	S
-Rule	Uruguay	1992	only	-	Oct	18	 0:00	1:00	S
-Rule	Uruguay	1993	only	-	Feb	28	 0:00	0	-
-# From Eduardo Cota (2004-09-20):
-# The uruguayan government has decreed a change in the local time....
-# http://www.presidencia.gub.uy/decretos/2004091502.htm
-Rule	Uruguay	2004	only	-	Sep	19	 0:00	1:00	S
-# From Steffen Thorsen (2005-03-11):
-# Uruguay's DST was scheduled to end on Sunday, 2005-03-13, but in order to
-# save energy ... it was postponed two weeks....
-# http://www.presidencia.gub.uy/_Web/noticias/2005/03/2005031005.htm
-Rule	Uruguay	2005	only	-	Mar	27	 2:00	0	-
-# From Eduardo Cota (2005-09-27):
-# http://www.presidencia.gub.uy/_Web/decretos/2005/09/CM%20119_09%2009%202005_00001.PDF
-# This means that from 2005-10-09 at 02:00 local time, until 2006-03-12 at
-# 02:00 local time, official time in Uruguay will be at GMT -2.
-Rule	Uruguay	2005	only	-	Oct	 9	 2:00	1:00	S
-Rule	Uruguay	2006	only	-	Mar	12	 2:00	0	-
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Montevideo	-3:44:44 -	LMT	1898 Jun 28
-			-3:44:44 -	MMT	1920 May  1	# Montevideo MT
-			-3:30	Uruguay	UY%sT	1942 Dec 14	# Uruguay Time
-			-3:00	Uruguay	UY%sT
-
-# Venezuela
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	America/Caracas	-4:27:44 -	LMT	1890
-			-4:27:40 -	CMT	1912 Feb 12 # Caracas Mean Time?
-			-4:30	-	VET	1965	     # Venezuela Time
-			-4:00	-	VET
+# @(#)southamerica	7.66
+# <pre>
+
+# This data is by no means authoritative; if you think you know better,
+# go ahead and edit the file (and please send any changes to
+# tz@elsie.nci.nih.gov for general use in the future).
+
+# From Paul Eggert (1999-07-07):
+# A good source for time zone historical data outside the U.S. is
+# Thomas G. Shanks, The International Atlas (5th edition),
+# San Diego: ACS Publications, Inc. (1999).
+#
+# Gwillim Law writes that a good source
+# for recent time zone data is the International Air Transport
+# Association's Standard Schedules Information Manual (IATA SSIM),
+# published semiannually.  Law sent in several helpful summaries
+# of the IATA's data after 1990.
+#
+# Except where otherwise noted, Shanks is the source for entries through 1990,
+# and IATA SSIM is the source for entries after 1990.
+#
+# Earlier editions of these tables used the North American style (e.g. ARST and
+# ARDT for Argentine Standard and Daylight Time), but the following quote
+# suggests that it's better to use European style (e.g. ART and ARST).
+#	I suggest the use of _Summer time_ instead of the more cumbersome
+#	_daylight-saving time_.  _Summer time_ seems to be in general use
+#	in Europe and South America.
+#	-- E O Cutler, _New York Times_ (1937-02-14), quoted in
+#	H L Mencken, _The American Language: Supplement I_ (1960), p 466
+#
+# Earlier editions of these tables also used the North American style
+# for time zones in Brazil, but this was incorrect, as Brazilians say
+# "summer time".  Reinaldo Goulart, a Sao Paulo businessman active in
+# the railroad sector, writes (1999-07-06):
+#	The subject of time zones is currently a matter of discussion/debate in
+#	Brazil.  Let's say that "the Brasilia time" is considered the
+#	"official time" because Brasilia is the capital city.
+#	The other three time zones are called "Brasilia time "minus one" or
+#	"plus one" or "plus two".  As far as I know there is no such
+#	name/designation as "Eastern Time" or "Central Time".
+# So I invented the following (English-language) abbreviations for now.
+# Corrections are welcome!
+#		std	dst
+#	-2:00	FNT	FNST	Fernando de Noronha
+#	-3:00	BRT	BRST	Brasilia
+#	-4:00	AMT	AMST	Amazon
+#	-5:00	ACT	ACST	Acre
+
+###############################################################################
+
+###############################################################################
+
+# Argentina
+
+# From Bob Devine (1988-01-28):
+# Argentina: first Sunday in October to first Sunday in April since 1976.
+# Double Summer time from 1969 to 1974.  Switches at midnight.
+
+# From U. S. Naval Observatory (1988-01-199):
+# ARGENTINA           3 H BEHIND   UTC
+
+# From Hernan G. Otero (1995-06-26):
+# I am sending modifications to the Argentine time zone table...
+# AR was chosen because they are the ISO letters that represent Argentina.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Arg	1930	only	-	Dec	 1	0:00	1:00	S
+Rule	Arg	1931	only	-	Apr	 1	0:00	0	-
+Rule	Arg	1931	only	-	Oct	15	0:00	1:00	S
+Rule	Arg	1932	1940	-	Mar	 1	0:00	0	-
+Rule	Arg	1932	1939	-	Nov	 1	0:00	1:00	S
+Rule	Arg	1940	only	-	Jul	 1	0:00	1:00	S
+Rule	Arg	1941	only	-	Jun	15	0:00	0	-
+Rule	Arg	1941	only	-	Oct	15	0:00	1:00	S
+Rule	Arg	1943	only	-	Aug	 1	0:00	0	-
+Rule	Arg	1943	only	-	Oct	15	0:00	1:00	S
+Rule	Arg	1946	only	-	Mar	 1	0:00	0	-
+Rule	Arg	1946	only	-	Oct	 1	0:00	1:00	S
+Rule	Arg	1963	only	-	Oct	 1	0:00	0	-
+Rule	Arg	1963	only	-	Dec	15	0:00	1:00	S
+Rule	Arg	1964	1966	-	Mar	 1	0:00	0	-
+Rule	Arg	1964	1966	-	Oct	15	0:00	1:00	S
+Rule	Arg	1967	only	-	Apr	 2	0:00	0	-
+Rule	Arg	1967	1968	-	Oct	Sun>=1	0:00	1:00	S
+Rule	Arg	1968	1969	-	Apr	Sun>=1	0:00	0	-
+Rule	Arg	1974	only	-	Jan	23	0:00	1:00	S
+Rule	Arg	1974	only	-	May	 1	0:00	0	-
+Rule	Arg	1988	only	-	Dec	 1	0:00	1:00	S
+#
+# From Hernan G. Otero (1995-06-26):
+# These corrections were contributed by InterSoft Argentina S.A.,
+# obtaining the data from the:
+# Talleres de Hidrografia Naval Argentina
+# (Argentine Naval Hydrography Institute)
+#
+# Shanks stops after 1992-03-01; go with Otero.
+Rule	Arg	1989	1993	-	Mar	Sun>=1	0:00	0	-
+Rule	Arg	1989	1992	-	Oct	Sun>=15	0:00	1:00	S
+#
+# From Hernan G. Otero (1995-06-26):
+# From this moment on, the law that mandated the daylight saving
+# time corrections was derogated and no more modifications
+# to the time zones (for daylight saving) are now made.
+#
+# From Rives McDow (2000-01-10):
+# On October 3, 1999, 0:00 local, Argentina implemented daylight savings time,
+# which did not result in the switch of a time zone, as they stayed 9 hours
+# from the International Date Line.
+Rule	Arg	1999	only	-	Oct	Sun>=1	0:00	1:00	S
+Rule	Arg	2000	only	-	Mar	Sun>=1	0:00	0	-
+#
+# From Peter Gradelski via Steffen Thorsen (2000-03-01):
+# We just checked with our Sao Paulo office and they say the government of
+# Argentina decided not to become one of the countries that go on or off DST.
+# So Buenos Aires should be -3 hours from GMT at all times.
+#
+# From Fabian L. Arce Jofre (2000-04-04):
+# The law that claimed DST for Argentina was derogated by President Fernando
+# de la Rua on March 2, 2000, because it would make people spend more energy
+# in the winter time, rather than less.  The change took effect on March 3.
+#
+# From Mariano Absatz (2001-06-06):
+# one of the major newspapers here in Argentina said that the 1999
+# Timezone Law (which never was effectively applied) will (would?) be
+# in effect.... The article is at
+# http://ar.clarin.com/diario/2001-06-06/e-01701.htm
+# ... The Law itself is "Ley No 25155", sanctioned on 1999-08-25, enacted
+# 1999-09-17, and published 1999-09-21.  The official publication is at:
+# http://www.boletin.jus.gov.ar/BON/Primera/1999/09-Septiembre/21/PDF/BO21-09-99LEG.PDF
+# Regretfully, you have to subscribe (and pay) for the on-line version....
+#
+# (2001-06-12):
+# the timezone for Argentina will not change next Sunday.
+# Apparently it will do so on Sunday 24th....
+# http://ar.clarin.com/diario/2001-06-12/s-03501.htm
+#
+# (2001-06-25):
+# Last Friday (yes, the last working day before the date of the change), the
+# Senate annulled the 1999 law that introduced the changes later postponed.
+# http://www.clarin.com.ar/diario/2001-06-22/s-03601.htm
+# It remains the vote of the Deputies..., but it will be the same....
+# This kind of things had always been done this way in Argentina.
+# We are still -03:00 all year round in all of the country.
+#
+# From Mariano Absatz (2004-05-21):
+# Today it was officially published that the Province of Mendoza is changing
+# its timezone this winter... starting tomorrow night....
+# http://www.gobernac.mendoza.gov.ar/boletin/pdf/20040521-27158-normas.pdf
+# From Paul Eggert (2004-05-24):
+# It's Law No. 7,210.  This change is due to a public power emergency, so for
+# now we'll assume it's for this year only.
+#
+# From Paul Eggert (2002-01-22):
+# <a href="http://www.spicasc.net/horvera.html">
+# Hora de verano para la Republica Argentina (2000-10-01)
+# </a> says that standard time in Argentina from 1894-10-31
+# to 1920-05-01 was -4:16:48.25.  Go with this more-precise value
+# over Shanks.
+#
+# From Mariano Absatz (2004-06-05):
+# These media articles from a major newspaper mostly cover the current state:
+# http://www.lanacion.com.ar/04/05/27/de_604825.asp
+# http://www.lanacion.com.ar/04/05/28/de_605203.asp
+#
+# The following eight (8) provinces pulled clocks back to UTC-04:00 at
+# midnight Monday May 31st. (that is, the night between 05/31 and 06/01).
+# Apparently, all nine provinces would go back to UTC-03:00 at the same
+# time in October 17th.
+#
+# Catamarca, Chubut, La Rioja, San Juan, San Luis, Santa Cruz,
+# Tierra del Fuego, Tucuman.
+#
+# From Mariano Absatz (2004-06-14):
+# ... this weekend, the Province of Tucuman decided it'd go back to UTC-03:00
+# yesterday midnight (that is, at 24:00 Saturday 12th), since the people's
+# annoyance with the change is much higher than the power savings obtained....
+#
+# From Gwillim Law (2004-06-14):
+# http://www.lanacion.com.ar/04/06/10/de_609078.asp ...
+#     "The time change in Tierra del Fuego was a conflicted decision from
+#   the start.  The government had decreed that the measure would take
+#   effect on June 1, but a normative error forced the new time to begin
+#   three days earlier, from a Saturday to a Sunday....
+# Our understanding was that the change was originally scheduled to take place
+# on June 1 at 00:00 in Chubut, Santa Cruz, Tierra del Fuego (and some other
+# provinces).  Sunday was May 30, only two days earlier.  So the article
+# contains a contradiction.  I would give more credence to the Saturday/Sunday
+# date than the "three days earlier" phrase, and conclude that Tierra del
+# Fuego set its clocks back at 2004-05-30 00:00.
+#
+# From Steffen Thorsen (2004-10-05):
+# The previous law 7210 which changed the province of Mendoza's time zone
+# back in May have been modified slightly in a new law 7277, which set the
+# new end date to 2004-09-26 (original date was 2004-10-17).
+# http://www.gobernac.mendoza.gov.ar/boletin/pdf/20040924-27244-normas.pdf
+#
+# From Mariano Absatz (2004-10-05):
+# San Juan changed from UTC-03:00 to UTC-04:00 at midnight between
+# Sunday, May 30th and Monday, May 31st.  It changed back to UTC-03:00
+# at midnight between Saturday, July 24th and Sunday, July 25th....
+# http://www.sanjuan.gov.ar/prensa/archivo/000329.html
+# http://www.sanjuan.gov.ar/prensa/archivo/000426.html
+# http://www.sanjuan.gov.ar/prensa/archivo/000441.html
+
+# Unless otherwise specified, data are from Shanks through 1992, from
+# the IATA otherwise.  As noted below, Shanks says that
+# America/Cordoba split into 6 subregions during 1991/1992, but we
+# haven't verified this yet so for now we'll keep it a single region.
+#
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+#
+# Buenos Aires (BA), Capital Federal (CF),
+Zone America/Argentina/Buenos_Aires -3:53:48 - LMT 1894 Oct 31
+			-4:16:48 -	CMT	1920 May # Cordoba Mean Time
+			-4:00	-	ART	1930 Dec
+			-4:00	Arg	AR%sT	1969 Oct  5
+			-3:00	Arg	AR%sT	1999 Oct  3
+			-4:00	Arg	AR%sT	2000 Mar  3
+			-3:00	-	ART
+#
+# Santa Fe (SF), Entre Rios (ER), Corrientes (CN), Misiones (MN), Chaco (CC),
+# Formosa (FM), Salta (SA), Santiago del Estero (SE), Cordoba (CB),
+# San Luis (SL), La Pampa (LP), Neuquen (NQ), Rio Negro (RN)
+#
+# Shanks also makes the following claims, which we haven't verified:
+# - Formosa switched to -3:00 on 1991-01-07.
+# - Misiones switched to -3:00 on 1990-12-29.
+# - Chaco switched to -3:00 on 1991-01-04.
+# - San Luis switched to -4:00 on 1990-03-14, then to -3:00 on 1990-10-15,
+#   then to -4:00 on 1991-03-01, then to -3:00 on 1991-06-01.
+# - Santiago del Estero switched to -4:00 on 1991-04-01,
+#   then to -3:00 on 1991-04-26.
+#
+Zone America/Argentina/Cordoba -4:16:48 - LMT	1894 Oct 31
+			-4:16:48 -	CMT	1920 May
+			-4:00	-	ART	1930 Dec
+			-4:00	Arg	AR%sT	1969 Oct  5
+			-3:00	Arg	AR%sT	1991 Mar  3
+			-4:00	-	WART	1991 Oct 20
+			-3:00	Arg	AR%sT	1999 Oct  3
+			-4:00	Arg	AR%sT	2000 Mar  3
+			-3:00	-	ART
+#
+# Tucuman (TM)
+Zone America/Argentina/Tucuman -4:20:52 - LMT	1894 Oct 31
+			-4:16:48 -	CMT	1920 May
+			-4:00	-	ART	1930 Dec
+			-4:00	Arg	AR%sT	1969 Oct  5
+			-3:00	Arg	AR%sT	1991 Mar  3
+			-4:00	-	WART	1991 Oct 20
+			-3:00	Arg	AR%sT	1999 Oct  3
+			-4:00	Arg	AR%sT	2000 Mar  3
+			-3:00	-	ART	2004 Jun  1
+			-4:00	-	WART	2004 Jun 13
+			-3:00	-	ART
+#
+# La Rioja (LR)
+Zone America/Argentina/La_Rioja -4:27:24 - LMT	1894 Oct 31
+			-4:16:48 -	CMT	1920 May
+			-4:00	-	ART	1930 Dec
+			-4:00	Arg	AR%sT	1969 Oct  5
+			-3:00	Arg	AR%sT	1991 Mar  1
+			-4:00	-	WART	1991 May  7
+			-3:00	Arg	AR%sT	1999 Oct  3
+			-4:00	Arg	AR%sT	2000 Mar  3
+			-3:00	-	ART	2004 Jun  1
+			-4:00	-	WART	2004 Jun 20
+			-3:00	-	ART
+#
+# San Juan (SJ)
+Zone America/Argentina/San_Juan -4:34:04 - LMT	1894 Oct 31
+			-4:16:48 -	CMT	1920 May
+			-4:00	-	ART	1930 Dec
+			-4:00	Arg	AR%sT	1969 Oct  5
+			-3:00	Arg	AR%sT	1991 Mar  1
+			-4:00	-	WART	1991 May  7
+			-3:00	Arg	AR%sT	1999 Oct  3
+			-4:00	Arg	AR%sT	2000 Mar  3
+			-3:00	-	ART	2004 May 31
+			-4:00	-	WART	2004 Jul 25
+			-3:00	-	ART
+#
+# Jujuy (JY)
+Zone America/Argentina/Jujuy -4:21:12 -	LMT	1894 Oct 31
+			-4:16:48 -	CMT	1920 May
+			-4:00	-	ART	1930 Dec
+			-4:00	Arg	AR%sT	1969 Oct  5
+			-3:00	Arg	AR%sT	1990 Mar  4
+			-4:00	-	WART	1990 Oct 28
+			-4:00	1:00	WARST	1991 Mar 17
+			-4:00	-	WART	1991 Oct  6
+			-3:00	1:00	ARST	1992
+			-3:00	Arg	AR%sT	1999 Oct  3
+			-4:00	Arg	AR%sT	2000 Mar  3
+			-3:00	-	ART
+#
+# Catamarca (CT), Chubut (CH)
+Zone America/Argentina/Catamarca -4:23:08 - LMT	1894 Oct 31
+			-4:16:48 -	CMT	1920 May
+			-4:00	-	ART	1930 Dec
+			-4:00	Arg	AR%sT	1969 Oct  5
+			-3:00	Arg	AR%sT	1991 Mar  3
+			-4:00	-	WART	1991 Oct 20
+			-3:00	Arg	AR%sT	1999 Oct  3
+			-4:00	Arg	AR%sT	2000 Mar  3
+			-3:00	-	ART	2004 Jun  1
+			-4:00	-	WART	2004 Jun 20
+			-3:00	-	ART
+#
+# Mendoza (MZ)
+Zone America/Argentina/Mendoza -4:35:16 - LMT	1894 Oct 31
+			-4:16:48 -	CMT	1920 May
+			-4:00	-	ART	1930 Dec
+			-4:00	Arg	AR%sT	1969 Oct  5
+			-3:00	Arg	AR%sT	1990 Mar  4
+			-4:00	-	WART	1990 Oct 15
+			-4:00	1:00	WARST	1991 Mar  1
+			-4:00	-	WART	1991 Oct 15
+			-4:00	1:00	WARST	1992 Mar  1
+			-4:00	-	WART	1992 Oct 18
+			-3:00	Arg	AR%sT	1999 Oct  3
+			-4:00	Arg	AR%sT	2000 Mar  3
+			-3:00	-	ART	2004 May 23
+			-4:00	-	WART	2004 Sep 26
+			-3:00	-	ART
+#
+# Santa Cruz (SC)
+Zone America/Argentina/Rio_Gallegos -4:36:52 - LMT 1894 Oct 31
+			-4:16:48 -	CMT	1920 May # Cordoba Mean Time
+			-4:00	-	ART	1930 Dec
+			-4:00	Arg	AR%sT	1969 Oct  5
+			-3:00	Arg	AR%sT	1999 Oct  3
+			-4:00	Arg	AR%sT	2000 Mar  3
+			-3:00	-	ART	2004 Jun  1
+			-4:00	-	WART	2004 Jun 20
+			-3:00	-	ART
+#
+# Tierra del Fuego, Antartida e Islas del Atlantico Sur (TF)
+Zone America/Argentina/Ushuaia -4:33:12 - LMT 1894 Oct 31
+			-4:16:48 -	CMT	1920 May # Cordoba Mean Time
+			-4:00	-	ART	1930 Dec
+			-4:00	Arg	AR%sT	1969 Oct  5
+			-3:00	Arg	AR%sT	1999 Oct  3
+			-4:00	Arg	AR%sT	2000 Mar  3
+			-3:00	-	ART	2004 May 30
+			-4:00	-	WART	2004 Jun 20
+			-3:00	-	ART
+
+# Aruba
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Aruba	-4:40:24 -	LMT	1912 Feb 12	# Oranjestad
+			-4:30	-	ANT	1965 # Netherlands Antilles Time
+			-4:00	-	AST
+
+# Bolivia
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/La_Paz	-4:32:36 -	LMT	1890
+			-4:32:36 -	CMT	1931 Oct 15 # Calamarca MT
+			-4:32:36 1:00	BOST	1932 Mar 21 # Bolivia ST
+			-4:00	-	BOT	# Bolivia Time
+
+# Brazil
+
+# From Paul Eggert (1993-11-18):
+# The mayor of Rio recently attempted to change the time zone rules
+# just in his city, in order to leave more summer time for the tourist trade.
+# The rule change lasted only part of the day;
+# the federal government refused to follow the city's rules, and business
+# was in a chaos, so the mayor backed down that afternoon.
+
+# From IATA SSIM (1996-02):
+# _Only_ the following states in BR1 observe DST: Rio Grande do Sul (RS),
+# Santa Catarina (SC), Parana (PR), Sao Paulo (SP), Rio de Janeiro (RJ),
+# Espirito Santo (ES), Minas Gerais (MG), Bahia (BA), Goias (GO),
+# Distrito Federal (DF), Tocantins (TO), Sergipe [SE] and Alagoas [AL].
+# [The last three states are new to this issue of the IATA SSIM.]
+
+# From Gwillim Law (1996-10-07):
+# Geography, history (Tocantins was part of Goias until 1989), and other
+# sources of time zone information lead me to believe that AL, SE, and TO were
+# always in BR1, and so the only change was whether or not they observed DST....
+# The earliest issue of the SSIM I have is 2/91.  Each issue from then until
+# 9/95 says that DST is observed only in the ten states I quoted from 9/95,
+# along with Mato Grosso (MT) and Mato Grosso do Sul (MS), which are in BR2
+# (UTC-4)....  The other two time zones given for Brazil are BR3, which is
+# UTC-5, no DST, and applies only in the state of Acre (AC); and BR4, which is
+# UTC-2, and applies to Fernando de Noronha (formerly FN, but I believe it's
+# become part of the state of Pernambuco).  The boundary between BR1 and BR2
+# has never been clearly stated.  They've simply been called East and West.
+# However, some conclusions can be drawn from another IATA manual: the Airline
+# Coding Directory, which lists close to 400 airports in Brazil.  For each
+# airport it gives a time zone which is coded to the SSIM.  From that
+# information, I'm led to conclude that the states of Amapa (AP), Ceara (CE),
+# Maranhao (MA), Paraiba (PR), Pernambuco (PE), Piaui (PI), and Rio Grande do
+# Norte (RN), and the eastern part of Para (PA) are all in BR1 without DST.
+
+# From Marcos Tadeu (1998-09-27):
+# <a href="http://pcdsh01.on.br/verao1.html">
+# Brazilian official page
+# </a>
+
+# From Jesper Norgaard (2000-11-03):
+# [For an official list of which regions in Brazil use which time zones, see:]
+# http://pcdsh01.on.br/Fusbr.htm
+# http://pcdsh01.on.br/Fusbrhv.htm
+
+# From Celso Doria via David Madeo (2002-10-09):
+# The reason for the delay this year has to do with elections in Brazil.
+#
+# Unlike in the United States, elections in Brazil are 100% computerized and
+# the results are known almost immediately.  Yesterday, it was the first
+# round of the elections when 115 million Brazilians voted for President,
+# Governor, Senators, Federal Deputies, and State Deputies.  Nobody is
+# counting (or re-counting) votes anymore and we know there will be a second
+# round for the Presidency and also for some Governors.  The 2nd round will
+# take place on October 27th.
+#
+# The reason why the DST will only begin November 3rd is that the thousands
+# of electoral machines used cannot have their time changed, and since the
+# Constitution says the elections must begin at 8:00 AM and end at 5:00 PM,
+# the Government decided to postpone DST, instead of changing the Constitution
+# (maybe, for the next elections, it will be possible to change the clock)...
+
+# From Rodrigo Severo (2004-10-04):
+# It's just the biannual change made necessary by the much hyped, supposedly
+# modern Brazilian eletronic voting machines which, apparently, can't deal
+# with a time change between the first and the second rounds of the elections.
+
+# From Paul Eggert (2002-10-10):
+# The official decrees referenced below are mostly taken from
+# <a href="http://pcdsh01.on.br/DecHV.html">
+# Decretos sobre o Horario de Verao no Brasil
+# </a> (2001-09-20, in Portuguese).
+# The official site for all decrees, including those not related to time, is
+# <a href="http://www.presidencia.gov.br/CCIVIL/decreto/principal_ano.htm">
+# Presidencia da Republica, Subchefia para Assuntos Juridicos, Decretos
+# </a> (in Portuguese).
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+# Decree <a href="http://pcdsh01.on.br/HV20466.htm">20,466</a> (1931-10-01)
+# Decree <a href="http://pcdsh01.on.br/HV21896.htm">21,896</a> (1932-01-10)
+Rule	Brazil	1931	only	-	Oct	 3	11:00	1:00	S
+Rule	Brazil	1932	1933	-	Apr	 1	 0:00	0	-
+Rule	Brazil	1932	only	-	Oct	 3	 0:00	1:00	S
+# Decree <a href="http://pcdsh01.on.br/HV23195.htm">23,195</a> (1933-10-10)
+# revoked DST.
+# Decree <a href="http://pcdsh01.on.br/HV27496.htm">27,496</a> (1949-11-24)
+# Decree <a href="http://pcdsh01.on.br/HV27998.htm">27,998</a> (1950-04-13)
+Rule	Brazil	1949	1952	-	Dec	 1	 0:00	1:00	S
+Rule	Brazil	1950	only	-	Apr	16	 1:00	0	-
+Rule	Brazil	1951	1952	-	Apr	 1	 0:00	0	-
+# Decree <a href="http://pcdsh01.on.br/HV32308.htm">32,308</a> (1953-02-24)
+Rule	Brazil	1953	only	-	Mar	 1	 0:00	0	-
+# Decree <a href="http://pcdsh01.on.br/HV34724.htm">34,724</a> (1953-11-30)
+# revoked DST.
+# Decree <a href="http://pcdsh01.on.br/HV52700.htm">52,700</a> (1963-10-18)
+# established DST from 1963-10-23 00:00 to 1964-02-29 00:00
+# in SP, RJ, GB, MG, ES, due to the prolongation of the drought.
+# Decree <a href="http://pcdsh01.on.br/HV53071.htm">53,071</a> (1963-12-03)
+# extended the above decree to all of the national territory on 12-09.
+Rule	Brazil	1963	only	-	Dec	 9	 0:00	1:00	S
+# Decree <a href="http://pcdsh01.on.br/HV53604.htm">53,604</a> (1964-02-25)
+# extended summer time by one day to 1964-03-01 00:00 (start of school).
+Rule	Brazil	1964	only	-	Mar	 1	 0:00	0	-
+# Decree <a href="http://pcdsh01.on.br/HV55639.htm">55,639</a> (1965-01-27)
+Rule	Brazil	1965	only	-	Jan	31	 0:00	1:00	S
+Rule	Brazil	1965	only	-	Mar	31	 0:00	0	-
+# Decree <a href="http://pcdsh01.on.br/HV57303.htm">57,303</a> (1965-11-22)
+Rule	Brazil	1965	only	-	Dec	 1	 0:00	1:00	S
+# Decree <a href="http://pcdsh01.on.br/HV57843.htm">57,843</a> (1966-02-18)
+Rule	Brazil	1966	1968	-	Mar	 1	 0:00	0	-
+Rule	Brazil	1966	1967	-	Nov	 1	 0:00	1:00	S
+# Decree <a href="http://pcdsh01.on.br/HV63429.htm">63,429</a> (1968-10-15)
+# revoked DST.
+# Decree <a href="http://pcdsh01.on.br/HV91698.htm">91,698</a> (1985-09-27)
+Rule	Brazil	1985	only	-	Nov	 2	 0:00	1:00	S
+# Decree 92,310 (1986-01-21)
+# Decree 92,463 (1986-03-13)
+Rule	Brazil	1986	only	-	Mar	15	 0:00	0	-
+# Decree 93,316 (1986-10-01)
+Rule	Brazil	1986	only	-	Oct	25	 0:00	1:00	S
+Rule	Brazil	1987	only	-	Feb	14	 0:00	0	-
+# Decree <a href="http://pcdsh01.on.br/HV94922.htm">94,922</a> (1987-09-22)
+Rule	Brazil	1987	only	-	Oct	25	 0:00	1:00	S
+Rule	Brazil	1988	only	-	Feb	 7	 0:00	0	-
+# Decree <a href="http://pcdsh01.on.br/HV96676.htm">96,676</a> (1988-09-12)
+# except for the states of AC, AM, PA, RR, RO, and AP (then a territory)
+Rule	Brazil	1988	only	-	Oct	16	 0:00	1:00	S
+Rule	Brazil	1989	only	-	Jan	29	 0:00	0	-
+# Decree <a href="http://pcdsh01.on.br/HV98077.htm">98,077</a> (1989-08-21)
+# with the same exceptions
+Rule	Brazil	1989	only	-	Oct	15	 0:00	1:00	S
+Rule	Brazil	1990	only	-	Feb	11	 0:00	0	-
+# Decree <a href="http://pcdsh01.on.br/HV99530.htm">99,530</a> (1990-09-17)
+# adopted by RS, SC, PR, SP, RJ, ES, MG, GO, MS, DF.
+# Decree 99,629 (1990-10-19) adds BA, MT.
+Rule	Brazil	1990	only	-	Oct	21	 0:00	1:00	S
+Rule	Brazil	1991	only	-	Feb	17	 0:00	0	-
+# <a href="http://pcdsh01.on.br/HV1991.htm">Unnumbered decree</a> (1991-09-25)
+# adopted by RS, SC, PR, SP, RJ, ES, MG, BA, GO, MT, MS, DF.
+Rule	Brazil	1991	only	-	Oct	20	 0:00	1:00	S
+Rule	Brazil	1992	only	-	Feb	 9	 0:00	0	-
+# <a href="http://pcdsh01.on.br/HV1992.htm">Unnumbered decree</a> (1992-10-16)
+# adopted by same states.
+Rule	Brazil	1992	only	-	Oct	25	 0:00	1:00	S
+Rule	Brazil	1993	only	-	Jan	31	 0:00	0	-
+# Decree <a href="http://pcdsh01.on.br/HV942.htm">942</a> (1993-09-28)
+# adopted by same states, plus AM.
+# Decree <a href="http://pcdsh01.on.br/HV1252.htm">1,252</a> (1994-09-22;
+# web page corrected 2004-01-07) adopted by same states, minus AM.
+# Decree <a href="http://pcdsh01.on.br/HV1636.htm">1,636</a> (1995-09-14)
+# adopted by same states, plus MT and TO.
+# Decree <a href="http://pcdsh01.on.br/HV1674.htm">1,674</a> (1995-10-13)
+# adds AL, SE.
+Rule	Brazil	1993	1995	-	Oct	Sun>=11	 0:00	1:00	S
+Rule	Brazil	1994	1995	-	Feb	Sun>=15	 0:00	0	-
+Rule	Brazil	1996	only	-	Feb	11	 0:00	0	-
+# Decree <a href="http://pcdsh01.on.br/HV2000.htm">2,000</a> (1996-09-04)
+# adopted by same states, minus AL, SE.
+Rule	Brazil	1996	only	-	Oct	 6	 0:00	1:00	S
+Rule	Brazil	1997	only	-	Feb	16	 0:00	0	-
+# From Daniel C. Sobral (1998-02-12):
+# In 1997, the DS began on October 6. The stated reason was that
+# because international television networks ignored Brazil's policy on DS,
+# they bought the wrong times on satellite for coverage of Pope's visit.
+# This year, the ending date of DS was postponed to March 1
+# to help dealing with the shortages of electric power.
+#
+# Decree 2,317 (1997-09-04), adopted by same states.
+Rule	Brazil	1997	only	-	Oct	 6	 0:00	1:00	S
+# Decree <a href="http://pcdsh01.on.br/figuras/HV2495.JPG">2,495</a>
+# (1998-02-10)
+Rule	Brazil	1998	only	-	Mar	 1	 0:00	0	-
+# Decree <a href="http://pcdsh01.on.br/figuras/Hv98.jpg">2,780</a> (1998-09-11)
+# adopted by the same states as before.
+Rule	Brazil	1998	only	-	Oct	11	 0:00	1:00	S
+Rule	Brazil	1999	only	-	Feb	21	 0:00	0	-
+# Decree <a href="http://pcdsh01.on.br/figuras/HV3150.gif">3,150</a>
+# (1999-08-23) adopted by same states.
+# Decree <a href="http://pcdsh01.on.br/DecHV99.gif">3,188</a> (1999-09-30)
+# adds SE, AL, PB, PE, RN, CE, PI, MA and RR.
+Rule	Brazil	1999	only	-	Oct	 3	 0:00	1:00	S
+Rule	Brazil	2000	only	-	Feb	27	 0:00	0	-
+# Decree <a href="http://pcdsh01.on.br/DEC3592.htm">3,592</a> (2000-09-06)
+# adopted by the same states as before.
+# Decree <a href="http://pcdsh01.on.br/Dec3630.jpg">3,630</a> (2000-10-13)
+# repeals DST in PE and RR, effective 2000-10-15 00:00.
+# Decree <a href="http://pcdsh01.on.br/Dec3632.jpg">3,632</a> (2000-10-17)
+# repeals DST in SE, AL, PB, RN, CE, PI and MA, effective 2000-10-22 00:00.
+# Decree <a href="http://pcdsh01.on.br/figuras/HV3916.gif">3,916</a>
+# (2001-09-13) reestablishes DST in AL, CE, MA, PB, PE, PI, RN, SE.
+Rule	Brazil	2000	2001	-	Oct	Sun>=8	 0:00	1:00	S
+Rule	Brazil	2001	max	-	Feb	Sun>=15	 0:00	0	-
+# Decree 4,399 (2002-10-01) repeals DST in AL, CE, MA, PB, PE, PI, RN, SE.
+# <a href="http://www.presidencia.gov.br/CCIVIL/decreto/2002/D4399.htm"></a>
+Rule	Brazil	2002	only	-	Nov	 3	 0:00	1:00	S
+# Decree 4,844 (2003-09-24; corrected 2003-09-26) repeals DST in BA, MT, TO.
+# <a href="http://www.presidencia.gov.br/CCIVIL/decreto/2003/D4844.htm"></a>
+Rule	Brazil	2003	only	-	Oct	19	 0:00	1:00	S
+# Decree 5,223 (2004-10-01) reestablishes DST in MT.
+# <a href="http://www.planalto.gov.br/ccivil_03/_Ato2004-2006/2004/Decreto/D5223.htm"></a>
+Rule	Brazil	2004	only	-	Nov	 2	 0:00	1:00	S
+# Decree <a href="http://pcdsh01.on.br/DecHV5539.gif">5,539</a> (2005-09-19),
+# adopted by the same states as before.
+Rule	Brazil	2005	max	-	Oct	Sun>=15	 0:00	1:00	S
+# The latest ruleset listed above says that the following states observe DST:
+# DF, ES, GO, MG, MS, MT, PR, RJ, RS, SC, SP.
+# For dates after mid-2006, the above rules with TO="max" are guesses
+# and are quite possibly wrong, but are more likely than no DST at all.
+
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+#
+# Fernando de Noronha (administratively part of PE)
+Zone America/Noronha	-2:09:40 -	LMT	1914
+			-2:00	Brazil	FN%sT	1990 Sep 17
+			-2:00	-	FNT	1999 Sep 30
+			-2:00	Brazil	FN%sT	2000 Oct 15
+			-2:00	-	FNT	2001 Sep 13
+			-2:00	Brazil	FN%sT	2002 Oct  1
+			-2:00	-	FNT
+# Other Atlantic islands have no permanent settlement.
+# These include Trindade and Martin Vaz (administratively part of ES),
+# Atol das Rocas (RN), and Penedos de Sao Pedro e Sao Paulo (PE).
+# Fernando de Noronha was a separate territory from 1942-09-02 to 1989-01-01;
+# it also included the Penedos.
+#
+# Amapa (AP), east Para (PA)
+# East Para includes Belem, Maraba, Serra Norte, and Sao Felix do Xingu.
+# The division between east and west Para is the river Xingu.
+# In the north a very small part from the river Javary (now Jari I guess,
+# the border with Amapa) to the Amazon, then to the Xingu.
+Zone America/Belem	-3:13:56 -	LMT	1914
+			-3:00	Brazil	BR%sT	1988 Sep 12
+			-3:00	-	BRT
+#
+# Maranhao (MA), Piaui (PI), Ceara (CE), Rio Grande do Norte (RN),
+# Paraiba (PB)
+Zone America/Fortaleza	-2:34:00 -	LMT	1914
+			-3:00	Brazil	BR%sT	1990 Sep 17
+			-3:00	-	BRT	1999 Sep 30
+			-3:00	Brazil	BR%sT	2000 Oct 22
+			-3:00	-	BRT	2001 Sep 13
+			-3:00	Brazil	BR%sT	2002 Oct  1
+			-3:00	-	BRT
+#
+# Pernambuco (PE) (except Atlantic islands)
+Zone America/Recife	-2:19:36 -	LMT	1914
+			-3:00	Brazil	BR%sT	1990 Sep 17
+			-3:00	-	BRT	1999 Sep 30
+			-3:00	Brazil	BR%sT	2000 Oct 15
+			-3:00	-	BRT	2001 Sep 13
+			-3:00	Brazil	BR%sT	2002 Oct  1
+			-3:00	-	BRT
+#
+# Tocantins (TO)
+Zone America/Araguaina	-3:12:48 -	LMT	1914
+			-3:00	Brazil	BR%sT	1990 Sep 17
+			-3:00	-	BRT	1995 Sep 14
+			-3:00	Brazil	BR%sT	2003 Sep 24
+			-3:00	-	BRT
+#
+# Alagoas (AL), Sergipe (SE)
+Zone America/Maceio	-2:22:52 -	LMT	1914
+			-3:00	Brazil	BR%sT	1990 Sep 17
+			-3:00	-	BRT	1995 Oct 13
+			-3:00	Brazil	BR%sT	1996 Sep  4
+			-3:00	-	BRT	1999 Sep 30
+			-3:00	Brazil	BR%sT	2000 Oct 22
+			-3:00	-	BRT	2001 Sep 13
+			-3:00	Brazil	BR%sT	2002 Oct  1
+			-3:00	-	BRT
+#
+# Bahia (BA)
+# There are too many Salvadors elsewhere, so use America/Bahia instead
+# of America/Salvador.
+Zone America/Bahia	-2:34:04 -	LMT	1914
+			-3:00	Brazil	BR%sT	2003 Sep 24
+			-3:00	-	BRT
+#
+# Goias (GO), Distrito Federal (DF), Minas Gerais (MG),
+# Espirito Santo (ES), Rio de Janeiro (RJ), Sao Paulo (SP), Parana (PR),
+# Santa Catarina (SC), Rio Grande do Sul (RS)
+Zone America/Sao_Paulo	-3:06:28 -	LMT	1914
+			-3:00	Brazil	BR%sT	1963 Oct 23 00:00
+			-3:00	1:00	BRST	1964
+			-3:00	Brazil	BR%sT
+#
+# Mato Grosso do Sul (MS)
+Zone America/Campo_Grande -3:38:28 -	LMT	1914
+			-4:00	Brazil	AM%sT
+#
+# Mato Grosso (MT)
+Zone America/Cuiaba	-3:44:20 -	LMT	1914
+			-4:00	Brazil	AM%sT	2003 Sep 24
+			-4:00	-	AMT	2004 Oct  1
+			-4:00	Brazil	AM%sT
+#
+# west Para (PA), Rondonia (RO)
+# West Para includes Altamira, Oribidos, Prainha, Oriximina, and Santarem.
+Zone America/Porto_Velho -4:15:36 -	LMT	1914
+			-4:00	Brazil	AM%sT	1988 Sep 12
+			-4:00	-	AMT
+#
+# Roraima (RR)
+Zone America/Boa_Vista	-4:02:40 -	LMT	1914
+			-4:00	Brazil	AM%sT	1988 Sep 12
+			-4:00	-	AMT	1999 Sep 30
+			-4:00	Brazil	AM%sT	2000 Oct 15
+			-4:00	-	AMT
+#
+# east Amazonas (AM): Boca do Acre, Jutai, Manaus, Floriano Peixoto
+# The great circle line from Tabatinga to Porto Acre divides
+# east from west Amazonas.
+Zone America/Manaus	-4:00:04 -	LMT	1914
+			-4:00	Brazil	AM%sT	1988 Sep 12
+			-4:00	-	AMT	1993 Sep 28
+			-4:00	Brazil	AM%sT	1994 Sep 22
+			-4:00	-	AMT
+#
+# west Amazonas (AM): Atalaia do Norte, Boca do Maoco, Benjamin Constant,
+#	Eirunepe, Envira, Ipixuna
+Zone America/Eirunepe	-4:39:28 -	LMT	1914
+			-5:00	Brazil	AC%sT	1988 Sep 12
+			-5:00	-	ACT	1993 Sep 28
+			-5:00	Brazil	AC%sT	1994 Sep 22
+			-5:00	-	ACT
+#
+# Acre (AC)
+Zone America/Rio_Branco	-4:31:12 -	LMT	1914
+			-5:00	Brazil	AC%sT	1988 Sep 12
+			-5:00	-	ACT
+
+
+# Chile
+
+# From Eduardo Krell (1995-10-19):
+# The law says to switch to DST at midnight [24:00] on the second SATURDAY
+# of October....  The law is the same for March and October.
+# (1998-09-29):
+# Because of the drought this year, the government decided to go into
+# DST earlier (saturday 9/26 at 24:00). This is a one-time change only ...
+# (unless there's another dry season next year, I guess).
+
+# From Julio I. Pacheco Troncoso (1999-03-18):
+# Because of the same drought, the government decided to end DST later,
+# on April 3, (one-time change).
+
+# From Gwillim Law (2001-05-04):
+# I came across another article in "La Tercera" about Chilean DST.
+# <http://www.tercera.cl/diario/2000/10/13/t-extras.html>
+# It clearly confirms my earlier suggestion, that DST begins at 22:00
+# on Easter Island....  But it also seems to be saying that the
+# observance of DST in Chile began in 1966, rather than 1969 as
+# ... [Shanks] has it....
+#
+# My translation:
+#
+# "The Chilean Army has announced that summer time will begin tomorrow,
+# Saturday, October 14 in continental Chile, insular Chile, and
+# Antarctica, as provided by Supreme Decree 25 of January 11, 1966.
+# By the preceding, official time in continental Chile and Chilean
+# Antarctic, and official time in Western Insular Chile, which applies
+# to Easter Island and Sala y Gomez Island, will be set forward at
+# midnight and at 22:00, respectively, by 20 minutes."
+
+# From Paul Eggert (2001-05-04):
+# Go with this article in preference to Shanks's 1969 date for modern DST.
+# Assume this rule has been used since DST was introduced in the islands.
+
+# From Paul Eggert (2002-10-24):
+# <http://www.shoa.cl/shoa/faqhoraoficial.htm> gives many details that
+# disagree with the following table, but we haven't had time to compare them.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Chile	1918	only	-	Sep	 1	0:00	1:00	S
+Rule	Chile	1919	only	-	Jul	 2	0:00	0	-
+Rule	Chile	1927	1931	-	Sep	 1	0:00	1:00	S
+Rule	Chile	1928	1932	-	Apr	 1	0:00	0	-
+Rule	Chile	1966	1997	-	Oct	Sun>=9	4:00u	1:00	S
+Rule	Chile	1967	1998	-	Mar	Sun>=9	3:00u	0	-
+Rule	Chile	1998	only	-	Sep	27	4:00u	1:00	S
+Rule	Chile	1999	only	-	Apr	 4	3:00u	0	-
+Rule	Chile	1999	max	-	Oct	Sun>=9	4:00u	1:00	S
+Rule	Chile	2000	max	-	Mar	Sun>=9	3:00u	0	-
+# IATA SSIM anomalies: (1990-09) says 1990-09-16; (1992-02) says 1992-03-14;
+# (1996-09) says 1998-03-08.  Ignore these.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Santiago	-4:42:40 -	LMT	1890
+			-4:42:40 -	SMT	1910	    # Santiago Mean Time
+			-5:00	Chile	CL%sT	1932 Sep    # Chile Time
+			-4:00	Chile	CL%sT
+Zone Pacific/Easter	-7:17:28 -	LMT	1890	    # Mataveri
+			-7:17:28 -	MMT	1932 Sep    # Mataveri Mean Time
+			-7:00	Chile	EAS%sT	1982 Mar 14 # Easter I Time
+			-6:00	Chile	EAS%sT
+#
+# Sala y Gomez Island is like Pacific/Easter.
+# Other Chilean locations, including Juan Fernandez Is, San Ambrosio,
+# San Felix, and Antarctic bases, are like America/Santiago.
+
+# Colombia
+# Shanks specifies 24:00 for 1992 transition times; go with IATA,
+# as it seems implausible to change clocks at midnight New Year's Eve.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	CO	1992	only	-	May	 2	0:00	1:00	S
+Rule	CO	1992	only	-	Dec	31	0:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Bogota	-4:56:20 -	LMT	1884 Mar 13
+			-4:56:20 -	BMT	1914 Nov 23 # Bogota Mean Time
+			-5:00	CO	CO%sT	# Colombia Time
+# Malpelo, Providencia, San Andres
+# no information; probably like America/Bogota
+
+# Curacao
+# Shanks says that Bottom and Oranjestad have been at -4:00 since
+# standard time was introduced on 1912-03-02; and that Kralendijk and Rincon
+# used Kralendijk Mean Time (-4:33:08) from 1912-02-02 to 1965-01-01.
+# This all predates our 1970 cutoff, though.
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Curacao	-4:35:44 -	LMT	1912 Feb 12	# Willemstad
+			-4:30	-	ANT	1965 # Netherlands Antilles Time
+			-4:00	-	AST
+
+# Ecuador
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Guayaquil	-5:19:20 -	LMT	1890
+			-5:14:00 -	QMT	1931 # Quito Mean Time
+			-5:00	-	ECT	     # Ecuador Time
+Zone Pacific/Galapagos	-5:58:24 -	LMT	1931 # Puerto Baquerizo Moreno
+			-5:00	-	ECT	1986
+			-6:00	-	GALT	     # Galapagos Time
+
+# Falklands
+
+# From Paul Eggert (2001-03-05):
+# Between 1990 and 2000 inclusive, Shanks and the IATA agree except
+# the IATA gives 1996-09-08.  Go with Shanks.
+
+# From Falkland Islands Government Office, London (2001-01-22)
+# via Jesper Norgaard:
+# ... the clocks revert back to Local Mean Time at 2 am on Sunday 15
+# April 2001 and advance one hour to summer time at 2 am on Sunday 2
+# September.  It is anticipated that the clocks will revert back at 2
+# am on Sunday 21 April 2002 and advance to summer time at 2 am on
+# Sunday 1 September.
+
+# From Rives McDow (2001-02-13):
+#
+# I have communicated several times with people there, and the last
+# time I had communications that was helpful was in 1998.  Here is
+# what was said then:
+#
+# "The general rule was that Stanley used daylight saving and the Camp
+# did not. However for various reasons many people in the Camp have
+# started to use daylight saving (known locally as 'Stanley Time')
+# There is no rule as to who uses daylight saving - it is a matter of
+# personal choice and so it is impossible to draw a map showing who
+# uses it and who does not. Any list would be out of date as soon as
+# it was produced. This year daylight saving ended on April 18/19th
+# and started again on September 12/13th.  I do not know what the rule
+# is, but can find out if you like.  We do not change at the same time
+# as UK or Chile."
+#
+# I did have in my notes that the rule was "Second Saturday in Sep at
+# 0:00 until third Saturday in Apr at 0:00".  I think that this does
+# not agree in some cases with Shanks; is this true?
+#
+# Also, there is no mention in the list that some areas in the
+# Falklands do not use DST.  I have found in my communications there
+# that these areas are on the western half of East Falkland and all of
+# West Falkland.  Stanley is the only place that consistently observes
+# DST.  Again, as in other places in the world, the farmers don't like
+# it.  West Falkland is almost entirely sheep farmers.
+#
+# I know one lady there that keeps a list of which farm keeps DST and
+# which doesn't each year.  She runs a shop in Stanley, and says that
+# the list changes each year.  She uses it to communicate to her
+# customers, catching them when they are home for lunch or dinner.
+
+# From Paul Eggert (2001-03-05):
+# For now, we'll just record the time in Stanley, since we have no
+# better info.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Falk	1937	1938	-	Sep	lastSun	0:00	1:00	S
+Rule	Falk	1938	1942	-	Mar	Sun>=19	0:00	0	-
+Rule	Falk	1939	only	-	Oct	1	0:00	1:00	S
+Rule	Falk	1940	1942	-	Sep	lastSun	0:00	1:00	S
+Rule	Falk	1943	only	-	Jan	1	0:00	0	-
+Rule	Falk	1983	only	-	Sep	lastSun	0:00	1:00	S
+Rule	Falk	1984	1985	-	Apr	lastSun	0:00	0	-
+Rule	Falk	1984	only	-	Sep	16	0:00	1:00	S
+Rule	Falk	1985	2000	-	Sep	Sun>=9	0:00	1:00	S
+Rule	Falk	1986	2000	-	Apr	Sun>=16	0:00	0	-
+Rule	Falk	2001	max	-	Apr	Sun>=15	2:00	0	-
+Rule	Falk	2001	max	-	Sep	Sun>=1	2:00	1:00	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Atlantic/Stanley	-3:51:24 -	LMT	1890
+			-3:51:24 -	SMT	1912 Mar 12  # Stanley Mean Time
+			-4:00	Falk	FK%sT	1983 May     # Falkland Is Time
+			-3:00	Falk	FK%sT	1985 Sep 15
+			-4:00	Falk	FK%sT
+
+# French Guiana
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Cayenne	-3:29:20 -	LMT	1911 Jul
+			-4:00	-	GFT	1967 Oct # French Guiana Time
+			-3:00	-	GFT
+
+# Guyana
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Guyana	-3:52:40 -	LMT	1915 Mar	# Georgetown
+			-3:45	-	GBGT	1966 May 26 # Br Guiana Time
+			-3:45	-	GYT	1975 Jul 31 # Guyana Time
+			-3:00	-	GYT	1991
+# IATA SSIM (1996-06) says -4:00.  Assume a 1991 switch.
+			-4:00	-	GYT
+
+# Paraguay
+# From Paul Eggert (1999-10-29):
+# Shanks (1999) says that spring transitions are from 01:00 -> 02:00,
+# and autumn transitions are from 00:00 -> 23:00.  Go with earlier
+# editions of Shanks, and with the IATA, who say transitions occur at 00:00.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Para	1975	1988	-	Oct	 1	0:00	1:00	S
+Rule	Para	1975	1978	-	Mar	 1	0:00	0	-
+Rule	Para	1979	1991	-	Apr	 1	0:00	0	-
+Rule	Para	1989	only	-	Oct	22	0:00	1:00	S
+Rule	Para	1990	only	-	Oct	 1	0:00	1:00	S
+Rule	Para	1991	only	-	Oct	 6	0:00	1:00	S
+Rule	Para	1992	only	-	Mar	 1	0:00	0	-
+Rule	Para	1992	only	-	Oct	 5	0:00	1:00	S
+Rule	Para	1993	only	-	Mar	31	0:00	0	-
+Rule	Para	1993	1995	-	Oct	 1	0:00	1:00	S
+Rule	Para	1994	1995	-	Feb	lastSun	0:00	0	-
+Rule	Para	1996	only	-	Mar	 1	0:00	0	-
+# IATA SSIM (2000-02) says 1999-10-10; ignore this for now.
+# From Steffen Thorsen (2000-10-02):
+# I have three independent reports that Paraguay changed to DST this Sunday
+# (10-01).
+#
+# Translated by Gwillim Law (2001-02-27) from
+# <a href="http://www.diarionoticias.com.py/011000/nacional/naciona1.htm">
+# Noticias, a daily paper in Asuncion, Paraguay (2000-10-01)
+# </a>:
+# Starting at 0:00 today, the clock will be set forward 60 minutes, in
+# fulfillment of Decree No. 7,273 of the Executive Power....  The time change
+# system has been operating for several years.  Formerly there was a separate
+# decree each year; the new law has the same effect, but permanently.  Every
+# year, the time will change on the first Sunday of October; likewise, the
+# clock will be set back on the first Sunday of March.
+#
+# From Jesper Norgaard (2001-03-06) [an official URL saying similar things]:
+# http://gateway.abc.com.py:8000/pub/pag04.mbr/artic?FHA=2001-03-03-02.24.52.900592
+#
+Rule	Para	1996	2001	-	Oct	Sun>=1	0:00	1:00	S
+# IATA SSIM (1997-09) says Mar 1; go with Shanks.
+Rule	Para	1997	only	-	Feb	lastSun	0:00	0	-
+# Shanks says 1999-02-28; IATA SSIM (1999-02) says 1999-02-27, but
+# (1999-09) reports no date; go with above sources and Gerd Knops (2001-02-27).
+Rule	Para	1998	2001	-	Mar	Sun>=1	0:00	0	-
+# From Rives McDow (2002-02-28):
+# A decree was issued in Paraguay (no. 16350) on 2002-02-26 that changed the
+# dst method to be from the first Sunday in September to the first Sunday in
+# April.
+Rule	Para	2002	2004	-	Apr	Sun>=1	0:00	0	-
+Rule	Para	2002	2003	-	Sep	Sun>=1	0:00	1:00	S
+#
+# From Jesper Norgaard Welen (2005-01-02):
+# There are several sources that claim that Paraguay made
+# a timezone rule change in autumn 2004.
+# From Steffen Thorsen (2005-01-05):
+# Decree 1,867 (2004-03-05) <http://www.labor.com.py/noticias.asp?id=27>
+Rule	Para	2004	max	-	Oct	Sun>=15	0:00	1:00	S
+Rule	Para	2005	max	-	Mar	Sun>=8	0:00	0	-
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Asuncion	-3:50:40 -	LMT	1890
+			-3:50:40 -	AMT	1931 Oct 10 # Asuncion Mean Time
+			-4:00	-	PYT	1972 Oct # Paraguay Time
+			-3:00	-	PYT	1974 Apr
+			-4:00	Para	PY%sT
+
+# Peru
+#
+# <a href="news:xrGmb.39935$gA1.13896113@news4.srv.hcvlny.cv.net">
+# From Evelyn C. Leeper via Mark Brader (2003-10-26):</a>
+# When we were in Peru in 1985-1986, they apparently switched over
+# sometime between December 29 and January 3 while we were on the Amazon.
+#
+# From Paul Eggert (2003-11-02):
+# Shanks doesn't have this transition.  Assume 1986 was like 1987.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Peru	1938	only	-	Jan	 1	0:00	1:00	S
+Rule	Peru	1938	only	-	Apr	 1	0:00	0	-
+Rule	Peru	1938	1939	-	Sep	lastSun	0:00	1:00	S
+Rule	Peru	1939	1940	-	Mar	Sun>=24	0:00	0	-
+Rule	Peru	1986	1987	-	Jan	 1	0:00	1:00	S
+Rule	Peru	1986	1987	-	Apr	 1	0:00	0	-
+Rule	Peru	1990	only	-	Jan	 1	0:00	1:00	S
+Rule	Peru	1990	only	-	Apr	 1	0:00	0	-
+# IATA is ambiguous for 1993/1995; go with Shanks.
+Rule	Peru	1994	only	-	Jan	 1	0:00	1:00	S
+Rule	Peru	1994	only	-	Apr	 1	0:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Lima	-5:08:12 -	LMT	1890
+			-5:08:36 -	LMT	1908 Jul 28 # Lima Mean Time?
+			-5:00	Peru	PE%sT	# Peru Time
+
+# South Georgia
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone Atlantic/South_Georgia -2:26:08 -	LMT	1890		# Grytviken
+			-2:00	-	GST	# South Georgia Time
+
+# South Sandwich Is
+# uninhabited; scientific personnel have wintered
+
+# Suriname
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Paramaribo	-3:40:40 -	LMT	1911
+			-3:40:52 -	PMT	1935     # Paramaribo Mean Time
+			-3:40:36 -	PMT	1945 Oct # The capital moved?
+			-3:30	-	NEGT	1975 Nov 20 # Dutch Guiana Time
+			-3:30	-	SRT	1984 Oct # Suriname Time
+			-3:00	-	SRT
+
+# Trinidad and Tobago
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Port_of_Spain -4:06:04 -	LMT	1912 Mar 2
+			-4:00	-	AST
+
+# Uruguay
+# From Paul Eggert (1993-11-18):
+# Uruguay wins the prize for the strangest peacetime manipulation of the rules.
+# From Shanks:
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+# Whitman gives 1923 Oct 1; go with Shanks.
+Rule	Uruguay	1923	only	-	Oct	 2	 0:00	0:30	HS
+Rule	Uruguay	1924	1926	-	Apr	 1	 0:00	0	-
+Rule	Uruguay	1924	1925	-	Oct	 1	 0:00	0:30	HS
+Rule	Uruguay	1933	1935	-	Oct	lastSun	 0:00	0:30	HS
+# Shanks gives 1935 Apr 1 0:00 and 1936 Mar 30 0:00; go with Whitman.
+Rule	Uruguay	1934	1936	-	Mar	Sat>=25	23:30s	0	-
+Rule	Uruguay	1936	only	-	Nov	 1	 0:00	0:30	HS
+Rule	Uruguay	1937	1941	-	Mar	lastSun	 0:00	0	-
+# Whitman gives 1937 Oct 3; go with Shanks.
+Rule	Uruguay	1937	1940	-	Oct	lastSun	 0:00	0:30	HS
+# Whitman gives 1941 Oct 24 - 1942 Mar 27, 1942 Dec 14 - 1943 Apr 13,
+# and 1943 Apr 13 ``to present time''; go with Shanks.
+Rule	Uruguay	1941	only	-	Aug	 1	 0:00	0	-
+Rule	Uruguay	1942	only	-	Jan	 1	 0:00	0:30	HS
+Rule	Uruguay	1942	only	-	Dec	14	 0:00	1:00	S
+Rule	Uruguay	1943	only	-	Mar	14	 0:00	0	-
+Rule	Uruguay	1959	only	-	May	24	 0:00	1:00	S
+Rule	Uruguay	1959	only	-	Nov	15	 0:00	0	-
+Rule	Uruguay	1960	only	-	Jan	17	 0:00	1:00	S
+Rule	Uruguay	1960	only	-	Mar	 6	 0:00	0	-
+Rule	Uruguay	1965	1967	-	Apr	Sun>=1	 0:00	1:00	S
+Rule	Uruguay	1965	only	-	Sep	26	 0:00	0	-
+Rule	Uruguay	1966	1967	-	Oct	31	 0:00	0	-
+Rule	Uruguay	1968	1970	-	May	27	 0:00	0:30	HS
+Rule	Uruguay	1968	1970	-	Dec	 2	 0:00	0	-
+Rule	Uruguay	1972	only	-	Apr	24	 0:00	1:00	S
+Rule	Uruguay	1972	only	-	Aug	15	 0:00	0	-
+Rule	Uruguay	1974	only	-	Mar	10	 0:00	0:30	HS
+Rule	Uruguay	1974	only	-	Dec	22	 0:00	1:00	S
+Rule	Uruguay	1976	only	-	Oct	 1	 0:00	0	-
+Rule	Uruguay	1977	only	-	Dec	 4	 0:00	1:00	S
+Rule	Uruguay	1978	only	-	Apr	 1	 0:00	0	-
+Rule	Uruguay	1979	only	-	Oct	 1	 0:00	1:00	S
+Rule	Uruguay	1980	only	-	May	 1	 0:00	0	-
+Rule	Uruguay	1987	only	-	Dec	14	 0:00	1:00	S
+Rule	Uruguay	1988	only	-	Mar	14	 0:00	0	-
+Rule	Uruguay	1988	only	-	Dec	11	 0:00	1:00	S
+Rule	Uruguay	1989	only	-	Mar	12	 0:00	0	-
+Rule	Uruguay	1989	only	-	Oct	29	 0:00	1:00	S
+# Shanks says no DST was observed in 1990/1 and 1991/2,
+# and that 1992/3's DST was from 10-25 to 03-01.  Go with IATA.
+Rule	Uruguay	1990	1992	-	Mar	Sun>=1	 0:00	0	-
+Rule	Uruguay	1990	1991	-	Oct	Sun>=21	 0:00	1:00	S
+Rule	Uruguay	1992	only	-	Oct	18	 0:00	1:00	S
+Rule	Uruguay	1993	only	-	Feb	28	 0:00	0	-
+# From Eduardo Cota (2004-09-20):
+# The uruguayan government has decreed a change in the local time....
+# http://www.presidencia.gub.uy/decretos/2004091502.htm
+Rule	Uruguay	2004	only	-	Sep	19	 0:00	1:00	S
+# From Steffen Thorsen (2005-03-11):
+# Uruguay's DST was scheduled to end on Sunday, 2005-03-13, but in order to
+# save energy ... it was postponed two weeks....
+# http://www.presidencia.gub.uy/_Web/noticias/2005/03/2005031005.htm
+Rule	Uruguay	2005	only	-	Mar	27	 2:00	0	-
+# From Eduardo Cota (2005-09-27):
+# http://www.presidencia.gub.uy/_Web/decretos/2005/09/CM%20119_09%2009%202005_00001.PDF
+# This means that from 2005-10-09 at 02:00 local time, until 2006-03-12 at
+# 02:00 local time, official time in Uruguay will be at GMT -2.
+Rule	Uruguay	2005	only	-	Oct	 9	 2:00	1:00	S
+Rule	Uruguay	2006	only	-	Mar	12	 2:00	0	-
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Montevideo	-3:44:44 -	LMT	1898 Jun 28
+			-3:44:44 -	MMT	1920 May  1	# Montevideo MT
+			-3:30	Uruguay	UY%sT	1942 Dec 14	# Uruguay Time
+			-3:00	Uruguay	UY%sT
+
+# Venezuela
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone	America/Caracas	-4:27:44 -	LMT	1890
+			-4:27:40 -	CMT	1912 Feb 12 # Caracas Mean Time?
+			-4:30	-	VET	1965	     # Venezuela Time
+			-4:00	-	VET

From 28736a199aae6c68c6fc4dd15906af55e3518fc8 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Thu, 9 Feb 2006 16:30:10 +0000
Subject: [PATCH 030/115] Fixed conversion methods toDateTime, toDateTimeISO,
 toMutableDateTime, and toMutableDateTimeISO to preserve the time zone

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1022 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  5 +++-
 .../org/joda/time/base/AbstractInstant.java   | 24 +++++++++----------
 .../org/joda/time/TestDateTime_Basics.java    |  2 +-
 .../org/joda/time/TestInstant_Basics.java     |  6 ++---
 4 files changed, 20 insertions(+), 17 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index e79b4d79c..24393ab20 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -27,7 +27,7 @@ Source compatible - Yes
 Serialization compatible - Yes
 
 Data compatible - Yes
-  - DateTimeZone data updated to version 2005q
+  - DateTimeZone data updated to version 2006a
 
 
 Deprecations since 1.2
@@ -45,6 +45,9 @@ Bug fixes since 1.2
 - FixedDateTimeZone
   Hashcode was not defined
 
+- AbstractInstant
+  Conversion methods toDateTime, toDateTimeISO, toMutableDateTime, and
+  toMutableDateTimeISO did not preserve the time zone
 
 Enhancements since 1.2
 ----------------------
diff --git a/JodaTime/src/java/org/joda/time/base/AbstractInstant.java b/JodaTime/src/java/org/joda/time/base/AbstractInstant.java
index 06e024716..5e9b016be 100644
--- a/JodaTime/src/java/org/joda/time/base/AbstractInstant.java
+++ b/JodaTime/src/java/org/joda/time/base/AbstractInstant.java
@@ -136,21 +136,21 @@ public Instant toInstant() {
     }
 
     /**
-     * Get this object as a DateTime.
+     * Get this object as a DateTime, in the same zone.
      * 
      * @return a DateTime using the same millis
      */
     public DateTime toDateTime() {
-        return new DateTime(getMillis());
+        return new DateTime(getMillis(), getZone());
     }
 
     /**
-     * Get this object as a DateTime using ISOChronology in the default zone.
+     * Get this object as a DateTime using ISOChronology, in the same zone.
      * 
-     * @return a DateTime using the same millis with ISOChronology in the default zone.
+     * @return a DateTime using the same millis with ISOChronology
      */
     public DateTime toDateTimeISO() {
-        return new DateTime(getMillis(), ISOChronology.getInstance());
+        return new DateTime(getMillis(), ISOChronology.getInstance(getZone()));
     }
 
     /**
@@ -166,7 +166,7 @@ public DateTime toDateTime(DateTimeZone zone) {
     }
 
     /**
-     * Get this object as a DateTime.
+     * Get this object as a DateTime using the given chronology and its zone.
      * 
      * @param chronology chronology to apply, or ISOChronology if null
      * @return a DateTime using the same millis
@@ -181,21 +181,21 @@ public DateTime toDateTime(Chronology chronology) {
     // returning a copy prevents this.
 
     /**
-     * Get this object as a MutableDateTime.
+     * Get this object as a MutableDateTime, in the same zone.
      * 
      * @return a MutableDateTime using the same millis
      */
     public MutableDateTime toMutableDateTime() {
-        return new MutableDateTime(getMillis());
+        return new MutableDateTime(getMillis(), getZone());
     }
 
     /**
-     * Get this object as a MutableDateTime using ISOChronology in the default zone.
+     * Get this object as a MutableDateTime using ISOChronology, in the same zone.
      * 
-     * @return a MutableDateTime using the same millis with ISOChronology in the default zone.
+     * @return a MutableDateTime using the same millis with ISOChronology
      */
     public MutableDateTime toMutableDateTimeISO() {
-        return new MutableDateTime(getMillis(), ISOChronology.getInstance());
+        return new MutableDateTime(getMillis(), ISOChronology.getInstance(getZone()));
     }
 
     /**
@@ -211,7 +211,7 @@ public MutableDateTime toMutableDateTime(DateTimeZone zone) {
     }
 
     /**
-     * Get this object as a MutableDateTime.
+     * Get this object as a MutableDateTime using the given chronology and its zone.
      * 
      * @param chronology chronology to apply, or ISOChronology if null
      * @return a MutableDateTime using the same millis
diff --git a/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java b/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java
index bfa1cb25c..384e8765a 100644
--- a/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java
@@ -505,7 +505,7 @@ public void testToDateTimeISO() {
         assertSame(DateTime.class, result.getClass());
         assertSame(ISOChronology.class, result.getChronology().getClass());
         assertEquals(test.getMillis(), result.getMillis());
-        assertEquals(ISOChronology.getInstance(), result.getChronology());
+        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());
         assertNotSame(test, result);
         
         test = new DateTime(TEST_TIME1, BuddhistChronology.getInstance());
diff --git a/JodaTime/src/test/org/joda/time/TestInstant_Basics.java b/JodaTime/src/test/org/joda/time/TestInstant_Basics.java
index 7799917a2..d9baccd3f 100644
--- a/JodaTime/src/test/org/joda/time/TestInstant_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestInstant_Basics.java
@@ -403,7 +403,7 @@ public void testToDateTimeISO() {
         assertSame(DateTime.class, result.getClass());
         assertSame(ISOChronology.class, result.getChronology().getClass());
         assertEquals(test.getMillis(), result.getMillis());
-        assertEquals(ISOChronology.getInstance(), result.getChronology());
+        assertEquals(ISOChronology.getInstanceUTC(), result.getChronology());
     }
 
     public void testToDateTime_DateTimeZone() {
@@ -443,7 +443,7 @@ public void testToMutableDateTime() {
         Instant test = new Instant(TEST_TIME1);
         MutableDateTime result = test.toMutableDateTime();
         assertEquals(test.getMillis(), result.getMillis());
-        assertEquals(ISOChronology.getInstance(), result.getChronology());
+        assertEquals(ISOChronology.getInstanceUTC(), result.getChronology());
     }
 
     public void testToMutableDateTimeISO() {
@@ -452,7 +452,7 @@ public void testToMutableDateTimeISO() {
         assertSame(MutableDateTime.class, result.getClass());
         assertSame(ISOChronology.class, result.getChronology().getClass());
         assertEquals(test.getMillis(), result.getMillis());
-        assertEquals(ISOChronology.getInstance(), result.getChronology());
+        assertEquals(ISOChronology.getInstanceUTC(), result.getChronology());
     }
 
     public void testToMutableDateTime_DateTimeZone() {

From 63c9445d31a750687957d97fed1150f8fe7944cb Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 10 Feb 2006 21:03:24 +0000
Subject: [PATCH 031/115] Start testing LocalDate

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1023 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/java/org/joda/time/LocalDate.java     | 297 +++++-
 JodaTime/src/test/org/joda/time/TestAll.java  |   8 +-
 .../org/joda/time/TestLocalDate_Basics.java   | 904 ++++++++++++++++++
 3 files changed, 1202 insertions(+), 7 deletions(-)
 create mode 100644 JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java

diff --git a/JodaTime/src/java/org/joda/time/LocalDate.java b/JodaTime/src/java/org/joda/time/LocalDate.java
index 84182d429..422b3e0ef 100644
--- a/JodaTime/src/java/org/joda/time/LocalDate.java
+++ b/JodaTime/src/java/org/joda/time/LocalDate.java
@@ -30,6 +30,7 @@
 import org.joda.time.convert.ConverterManager;
 import org.joda.time.convert.InstantConverter;
 import org.joda.time.field.AbstractReadableInstantFieldProperty;
+import org.joda.time.field.FieldUtils;
 import org.joda.time.format.DateTimeFormat;
 import org.joda.time.format.ISODateTimeFormat;
 
@@ -482,6 +483,8 @@ public Chronology getChronology() {
     /**
      * Converts this LocalDate to a full datetime at midnight using the
      * default time zone.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
      *
      * @return this date as a datetime at midnight
      */
@@ -495,6 +498,8 @@ public DateTime toDateTimeAtMidnightDefaultZone() {
      * <p>
      * This method uses the chronology from this instance plus the time zone
      * specified.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
      *
      * @param zone  the zone to use, null means default zone
      * @return this date as a datetime at midnight
@@ -510,6 +515,8 @@ public DateTime toDateTimeAtMidnight(DateTimeZone zone) {
      * Converts this LocalDate to a full datetime using the default time zone
      * setting the date fields from this instance and the time fields from
      * the current time.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
      *
      * @return this date as a datetime with the time as the current time
      */
@@ -524,6 +531,8 @@ public DateTime toDateTimeAtCurrentTimeDefaultZone() {
      * <p>
      * This method uses the chronology from this instance plus the time zone
      * specified.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
      *
      * @param zone  the zone to use, null means default zone
      * @return this date as a datetime with the time as the current time
@@ -539,6 +548,8 @@ public DateTime toDateTimeAtCurrentTime(DateTimeZone zone) {
     //-----------------------------------------------------------------------
     /**
      * Converts this LocalDate to a DateMidnight in the default time zone.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
      *
      * @return the DateMidnight instance in the default zone
      */
@@ -548,6 +559,8 @@ public DateMidnight toDateMidnightDefaultZone() {
 
     /**
      * Converts this LocalDate to a DateMidnight.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
      *
      * @param zone  the zone to get the DateMidnight in, null means default zone
      * @return the DateMidnight instance
@@ -558,6 +571,80 @@ public DateMidnight toDateMidnight(DateTimeZone zone) {
         return new DateMidnight(getYear(), getMonthOfYear(), getDayOfMonth(), chrono);
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Converts this object to a DateTime using a LocalTime to fill in the
+     * missing fields and using the default time zone.
+     * <p>
+     * The resulting chronology is determined by the chronology of this
+     * LocalDate. The chronology of the time must match.
+     * If the time is null, the current time in the date's chronology is used.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
+     *
+     * @param time  the time of day to use, null means current time
+     * @return the DateTime instance
+     * @throws IllegalArgumentException if the chronology of the time does not match
+     */
+    public DateTime toDateTimeDefaultZone(LocalTime time) {
+        return toDateTime(time, null);
+    }
+
+    /**
+     * Converts this object to a DateTime using a LocalTime to fill in the
+     * missing fields.
+     * This instance is immutable and unaffected by this method call.
+     * <p>
+     * The resulting chronology is determined by the chronology of this
+     * LocalDate plus the time zone. The chronology of the time must match.
+     * If the time is null, the current time in the date's chronology is used.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
+     *
+     * @param time  the time of day to use, null means current time
+     * @param zone  the zone to get the DateTime in, null means default
+     * @return the DateTime instance
+     * @throws IllegalArgumentException if the chronology of the time does not match
+     */
+    public DateTime toDateTime(LocalTime time, DateTimeZone zone) {
+        if (time != null && getChronology() != time.getChronology()) {
+            throw new IllegalArgumentException("The chronology of the time does not match");
+        }
+        Chronology chrono = getChronology().withZone(zone);
+        long instant = DateTimeUtils.currentTimeMillis();
+        instant = chrono.set(this, instant);
+        if (time != null) {
+            instant = chrono.set(time, instant);
+        }
+        return new DateTime(instant, chrono);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Converts this object to an Interval representing the whole day
+     * in the default time zone.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
+     *
+     * @return a interval over the day
+     */
+    public Interval toIntervalDefaultZone() {
+        return toInterval(null);
+    }
+
+    /**
+     * Converts this object to an Interval representing the whole day.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
+     *
+     * @param zone  the zone to get the Interval in, null means default
+     * @return a interval over the day
+     */
+    public Interval toInterval(DateTimeZone zone) {
+        zone = DateTimeUtils.getZone(zone);
+        return toDateMidnight(zone).toInterval();
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Gets a copy of this date with different local millis.
@@ -666,7 +753,9 @@ public LocalDate withFieldAdded(DurationFieldType fieldType, int amount) {
      * period instances. Adding one field is best achieved using methods
      * like {@link #withFieldAdded(DurationFieldType, int)}
      * or {@link #plusYears(int)}.
-     * Unsupported fields are ignored.
+     * <p>
+     * Unsupported time fields are ignored, thus adding a period of 24 hours
+     * will not have any effect.
      *
      * @param period  the period to add to this one, null means zero
      * @param scalar  the amount of times to add, such as -1 to subtract once
@@ -677,7 +766,15 @@ public LocalDate withPeriodAdded(ReadablePeriod period, int scalar) {
         if (period == null || scalar == 0) {
             return this;
         }
-        long instant = getChronology().add(period, getLocalMillis(), scalar);
+        long instant = getLocalMillis();
+        Chronology chrono = getChronology();
+        for (int i = 0; i < period.size(); i++) {
+            long value = FieldUtils.safeMultiply(period.getValue(i), scalar);
+            DurationFieldType type = period.getFieldType(i);
+            if (isSupported(type)) {
+                instant = type.getField(chrono).add(instant, value);
+            }
+        }
         return withLocalMillis(instant);
     }
 
@@ -690,7 +787,9 @@ public LocalDate withPeriodAdded(ReadablePeriod period, int scalar) {
      * This method is typically used to add complex period instances.
      * Adding one field is best achieved using methods
      * like {@link #plusYears(int)}.
-     * Unsupported fields are ignored.
+     * <p>
+     * Unsupported time fields are ignored, thus adding a period of 24 hours
+     * will not have any effect.
      *
      * @param period  the period to add to this one, null means zero
      * @return a copy of this date with the period added
@@ -802,6 +901,9 @@ public LocalDate plusDays(int days) {
      * This method is typically used to subtract complex period instances.
      * Subtracting one field is best achieved using methods
      * like {@link #minusYears(int)}.
+     * <p>
+     * Unsupported time fields are ignored, thus subtracting a period of 24 hours
+     * will not have any effect.
      *
      * @param period  the period to reduce this instant by
      * @return a copy of this LocalDate with the period taken away
@@ -971,8 +1073,14 @@ public int getYear() {
 
     /**
      * Get the weekyear field value.
+     * <p>
+     * The weekyear is the year that matches with the weekOfWeekyear field.
+     * In the standard ISO8601 week algorithm, the first week of the year
+     * is that in which at least 4 days are in the year. As a result of this
+     * definition, day 1 of the first week may be in the previous year.
+     * The weekyear allows you to query the effective year for that day.
      *
-     * @return the year of a week based year
+     * @return the weekyear
      */
     public int getWeekyear() {
         return getChronology().weekyear().get(getLocalMillis());
@@ -1027,6 +1135,183 @@ public int getDayOfWeek() {
         return getChronology().dayOfWeek().get(getLocalMillis());
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Sets the era field in a copy of this LocalDate, leaving this
+     * instance unchanged.
+     * <p>
+     * LocalDate is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * era changed.
+     *
+     * @param era  the era to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public LocalDate withEra(int era) {
+        return withLocalMillis(getChronology().era().set(getLocalMillis(), era));
+    }
+
+    /**
+     * Sets the century of era field in a copy of this LocalDate, leaving this
+     * instance unchanged.
+     * <p>
+     * LocalDate is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * century of era changed.
+     *
+     * @param centuryOfEra  the centurey of era to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public LocalDate withCenturyOfEra(int centuryOfEra) {
+        return withLocalMillis(getChronology().centuryOfEra().set(getLocalMillis(), centuryOfEra));
+    }
+
+    /**
+     * Sets the year of era field in a copy of this LocalDate, leaving this
+     * instance unchanged.
+     * <p>
+     * LocalDate is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * year of era changed.
+     *
+     * @param yearOfEra  the year of era to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public LocalDate withYearOfEra(int yearOfEra) {
+        return withLocalMillis(getChronology().yearOfEra().set(getLocalMillis(), yearOfEra));
+    }
+
+    /**
+     * Sets the year of century field in a copy of this LocalDate, leaving this
+     * instance unchanged.
+     * <p>
+     * LocalDate is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * year of century changed.
+     *
+     * @param year of century  the year of century to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public LocalDate withYearOfCentury(int yearOfCentury) {
+        return withLocalMillis(getChronology().yearOfCentury().set(getLocalMillis(), yearOfCentury));
+    }
+
+    /**
+     * Sets the year field in a copy of this LocalDate, leaving this
+     * instance unchanged.
+     * <p>
+     * LocalDate is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * year changed.
+     *
+     * @param year  the year to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public LocalDate withYear(int year) {
+        return withLocalMillis(getChronology().year().set(getLocalMillis(), year));
+    }
+
+    /**
+     * Sets the weekyear field in a copy of this LocalDate, leaving this
+     * instance unchanged.
+     * <p>
+     * LocalDate is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * weekyear changed.
+     *
+     * @param weekyear  the weekyear to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public LocalDate withWeekyear(int weekyear) {
+        return withLocalMillis(getChronology().weekyear().set(getLocalMillis(), weekyear));
+    }
+
+    /**
+     * Sets the month of year field in a copy of this LocalDate, leaving this
+     * instance unchanged.
+     * <p>
+     * LocalDate is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * month of year changed.
+     *
+     * @param monthOfYear  the month of year to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public LocalDate withMonthOfYear(int monthOfYear) {
+        return withLocalMillis(getChronology().monthOfYear().set(getLocalMillis(), monthOfYear));
+    }
+
+    /**
+     * Sets the week of weekyear field in a copy of this LocalDate, leaving this
+     * instance unchanged.
+     * <p>
+     * LocalDate is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * week of weekyear changed.
+     *
+     * @param weekOfWeekyear  the week of weekyear to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public LocalDate withWeekOfWeekyear(int weekOfWeekyear) {
+        return withLocalMillis(getChronology().weekOfWeekyear().set(getLocalMillis(), weekOfWeekyear));
+    }
+
+    /**
+     * Sets the day of year field in a copy of this LocalDate, leaving this
+     * instance unchanged.
+     * <p>
+     * LocalDate is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * day of year changed.
+     *
+     * @param dayOfYear  the day of year to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public LocalDate withDayOfYear(int dayOfYear) {
+        return withLocalMillis(getChronology().dayOfYear().set(getLocalMillis(), dayOfYear));
+    }
+
+    /**
+     * Sets the day of month field in a copy of this LocalDate, leaving this
+     * instance unchanged.
+     * <p>
+     * LocalDate is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * day of month changed.
+     *
+     * @param dayOfMonth  the day of month to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public LocalDate withDayOfMonth(int dayOfMonth) {
+        return withLocalMillis(getChronology().dayOfMonth().set(getLocalMillis(), dayOfMonth));
+    }
+
+    /**
+     * Sets the day of week field in a copy of this LocalDate, leaving this
+     * instance unchanged.
+     * <p>
+     * LocalDate is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * day of week changed.
+     *
+     * @param dayOfWeek  the day of week to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public LocalDate withDayOfWeek(int dayOfWeek) {
+        return withLocalMillis(getChronology().dayOfWeek().set(getLocalMillis(), dayOfWeek));
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Get the era property.
@@ -1074,9 +1359,9 @@ public Property year() {
     }
 
     /**
-     * Get the year of a week based year property.
+     * Get the weekyear property.
      *
-     * @return the year of a week based year property
+     * @return the weekyear property
      */
     public Property weekyear() {
         return new Property(this, getChronology().weekyear());
diff --git a/JodaTime/src/test/org/joda/time/TestAll.java b/JodaTime/src/test/org/joda/time/TestAll.java
index c87269298..2754532e0 100644
--- a/JodaTime/src/test/org/joda/time/TestAll.java
+++ b/JodaTime/src/test/org/joda/time/TestAll.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2006 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -61,6 +61,12 @@ public static Test suite() {
         suite.addTest(TestInterval_Constructors.suite());
         suite.addTest(TestInterval_Basics.suite());
         
+//        suite.addTest(TestLocalTime_Basics.suite());
+//        suite.addTest(TestLocalTime_Constructors.suite());
+//        suite.addTest(TestLocalTime_Properties.suite());
+        
+//        suite.addTest(TestLocalDate_Basics.suite());
+        
         suite.addTest(TestMutableInterval_Constructors.suite());
         suite.addTest(TestMutableInterval_Basics.suite());
         suite.addTest(TestMutableInterval_Updates.suite());
diff --git a/JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java b/JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java
new file mode 100644
index 000000000..77aad52c0
--- /dev/null
+++ b/JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java
@@ -0,0 +1,904 @@
+/*
+ *  Copyright 2001-2006 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time;
+
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+import java.util.Arrays;
+import java.util.Date;
+import java.util.Locale;
+
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+import org.joda.time.chrono.BuddhistChronology;
+import org.joda.time.chrono.CopticChronology;
+import org.joda.time.chrono.GJChronology;
+import org.joda.time.chrono.GregorianChronology;
+import org.joda.time.chrono.ISOChronology;
+import org.joda.time.format.DateTimeFormat;
+import org.joda.time.format.DateTimeFormatter;
+
+/**
+ * This class is a Junit unit test for LocalDate.
+ *
+ * @author Stephen Colebourne
+ */
+public class TestLocalDate_Basics extends TestCase {
+
+    private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
+    private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
+    private static final DateTimeZone TOKYO = DateTimeZone.forID("Asia/Tokyo");
+    private static final int OFFSET = 1;
+    private static final GJChronology GJ_UTC = GJChronology.getInstanceUTC();
+    private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);
+    private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);
+    private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);
+    private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();
+    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);
+    private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);
+    private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);
+    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
+    private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);
+    private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);
+    private static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);
+    private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();
+    
+    private long TEST_TIME_NOW =
+            (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
+            
+    private long TEST_TIME1 =
+        (31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
+        + 12L * DateTimeConstants.MILLIS_PER_HOUR
+        + 24L * DateTimeConstants.MILLIS_PER_MINUTE;
+        
+    private long TEST_TIME2 =
+        (365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY
+        + 14L * DateTimeConstants.MILLIS_PER_HOUR
+        + 28L * DateTimeConstants.MILLIS_PER_MINUTE;
+        
+    private DateTimeZone zone = null;
+
+    public static void main(String[] args) {
+        junit.textui.TestRunner.run(suite());
+    }
+
+    public static TestSuite suite() {
+        return new TestSuite(TestLocalDate_Basics.class);
+    }
+
+    public TestLocalDate_Basics(String name) {
+        super(name);
+    }
+
+    protected void setUp() throws Exception {
+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
+        zone = DateTimeZone.getDefault();
+        DateTimeZone.setDefault(LONDON);
+    }
+
+    protected void tearDown() throws Exception {
+        DateTimeUtils.setCurrentMillisSystem();
+        DateTimeZone.setDefault(zone);
+        zone = null;
+    }
+
+    //-----------------------------------------------------------------------
+    public void testGet_DateTimeFieldType() {
+        LocalDate test = LocalDate.nowDefaultZone();
+        assertEquals(1970, test.get(DateTimeFieldType.year()));
+        assertEquals(6, test.get(DateTimeFieldType.monthOfYear()));
+        assertEquals(9, test.get(DateTimeFieldType.dayOfMonth()));
+        assertEquals(2, test.get(DateTimeFieldType.dayOfWeek()));
+        assertEquals(160, test.get(DateTimeFieldType.dayOfYear()));
+        assertEquals(24, test.get(DateTimeFieldType.weekOfWeekyear()));
+        assertEquals(1970, test.get(DateTimeFieldType.weekyear()));
+        try {
+            test.get(null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            test.get(DateTimeFieldType.hourOfDay());
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testSize() {
+        LocalDate test = LocalDate.nowDefaultZone();
+        assertEquals(3, test.size());
+    }
+
+    public void testGetFieldType_int() {
+        LocalDate test = LocalDate.now(COPTIC_PARIS);
+        assertSame(DateTimeFieldType.year(), test.getFieldType(0));
+        assertSame(DateTimeFieldType.monthOfYear(), test.getFieldType(1));
+        assertSame(DateTimeFieldType.dayOfMonth(), test.getFieldType(2));
+        try {
+            test.getFieldType(-1);
+        } catch (IndexOutOfBoundsException ex) {}
+        try {
+            test.getFieldType(3);
+        } catch (IndexOutOfBoundsException ex) {}
+    }
+
+    public void testGetFieldTypes() {
+        LocalDate test = LocalDate.now(COPTIC_PARIS);
+        DateTimeFieldType[] fields = test.getFieldTypes();
+        assertSame(DateTimeFieldType.year(), fields[0]);
+        assertSame(DateTimeFieldType.monthOfYear(), fields[1]);
+        assertSame(DateTimeFieldType.dayOfMonth(), fields[2]);
+        assertNotSame(test.getFieldTypes(), test.getFieldTypes());
+    }
+
+    public void testGetField_int() {
+        LocalDate test = LocalDate.now(COPTIC_PARIS);
+        assertSame(COPTIC_UTC.year(), test.getField(0));
+        assertSame(COPTIC_UTC.monthOfYear(), test.getField(1));
+        assertSame(COPTIC_UTC.dayOfMonth(), test.getField(2));
+        try {
+            test.getField(-1);
+        } catch (IndexOutOfBoundsException ex) {}
+        try {
+            test.getField(3);
+        } catch (IndexOutOfBoundsException ex) {}
+    }
+
+    public void testGetFields() {
+        LocalDate test = LocalDate.now(COPTIC_PARIS);
+        DateTimeField[] fields = test.getFields();
+        assertSame(COPTIC_UTC.year(), fields[0]);
+        assertSame(COPTIC_UTC.monthOfYear(), fields[1]);
+        assertSame(COPTIC_UTC.dayOfMonth(), fields[2]);
+        assertNotSame(test.getFields(), test.getFields());
+    }
+
+    public void testGetValue_int() {
+        LocalDate test = LocalDate.nowDefaultZone();
+        assertEquals(1970, test.getValue(0));
+        assertEquals(6, test.getValue(1));
+        assertEquals(9, test.getValue(2));
+        try {
+            test.getValue(-1);
+        } catch (IndexOutOfBoundsException ex) {}
+        try {
+            test.getValue(3);
+        } catch (IndexOutOfBoundsException ex) {}
+    }
+
+    public void testGetValues() {
+        LocalDate test = LocalDate.nowDefaultZone();
+        int[] values = test.getValues();
+        assertEquals(1970, values[0]);
+        assertEquals(6, values[1]);
+        assertEquals(9, values[2]);
+        assertNotSame(test.getValues(), test.getValues());
+    }
+
+    public void testIsSupported_DateTimeFieldType() {
+        LocalDate test = LocalDate.now(COPTIC_PARIS);
+        assertEquals(true, test.isSupported(DateTimeFieldType.year()));
+        assertEquals(true, test.isSupported(DateTimeFieldType.monthOfYear()));
+        assertEquals(true, test.isSupported(DateTimeFieldType.dayOfMonth()));
+        assertEquals(true, test.isSupported(DateTimeFieldType.dayOfWeek()));
+        assertEquals(true, test.isSupported(DateTimeFieldType.dayOfYear()));
+        assertEquals(true, test.isSupported(DateTimeFieldType.weekOfWeekyear()));
+        assertEquals(true, test.isSupported(DateTimeFieldType.weekyear()));
+        assertEquals(true, test.isSupported(DateTimeFieldType.yearOfCentury()));
+        assertEquals(true, test.isSupported(DateTimeFieldType.yearOfEra()));
+        assertEquals(true, test.isSupported(DateTimeFieldType.centuryOfEra()));
+        assertEquals(true, test.isSupported(DateTimeFieldType.weekyearOfCentury()));
+        assertEquals(true, test.isSupported(DateTimeFieldType.era()));
+        assertEquals(false, test.isSupported(DateTimeFieldType.hourOfDay()));
+        assertEquals(false, test.isSupported((DateTimeFieldType) null));
+    }
+
+    public void testIsSupported_DurationFieldType() {
+        LocalDate test = new LocalDate(1970, 6, 9);
+        assertEquals(true, test.isSupported(DurationFieldType.eras()));
+        assertEquals(true, test.isSupported(DurationFieldType.centuries()));
+        assertEquals(true, test.isSupported(DurationFieldType.years()));
+        assertEquals(true, test.isSupported(DurationFieldType.months()));
+        assertEquals(true, test.isSupported(DurationFieldType.weekyears()));
+        assertEquals(true, test.isSupported(DurationFieldType.weeks()));
+        assertEquals(true, test.isSupported(DurationFieldType.days()));
+        
+        assertEquals(false, test.isSupported(DurationFieldType.hours()));
+        assertEquals(false, test.isSupported((DurationFieldType) null));
+    }
+
+    public void testEqualsHashCode() {
+        LocalDate test1 = new LocalDate(1970, 6, 9, COPTIC_PARIS);
+        LocalDate test2 = new LocalDate(1970, 6, 9, COPTIC_PARIS);
+        assertEquals(true, test1.equals(test2));
+        assertEquals(true, test2.equals(test1));
+        assertEquals(true, test1.equals(test1));
+        assertEquals(true, test2.equals(test2));
+        assertEquals(true, test1.hashCode() == test2.hashCode());
+        assertEquals(true, test1.hashCode() == test1.hashCode());
+        assertEquals(true, test2.hashCode() == test2.hashCode());
+        
+        LocalDate test3 = new LocalDate(1971, 6, 9);
+        assertEquals(false, test1.equals(test3));
+        assertEquals(false, test2.equals(test3));
+        assertEquals(false, test3.equals(test1));
+        assertEquals(false, test3.equals(test2));
+        assertEquals(false, test1.hashCode() == test3.hashCode());
+        assertEquals(false, test2.hashCode() == test3.hashCode());
+        
+        assertEquals(false, test1.equals("Hello"));
+        assertEquals(true, test1.equals(new MockInstant()));
+        assertEquals(true, test1.equals(new YearMonthDay(1970, 6, 9, COPTIC_PARIS)));
+        assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE));
+    }
+    
+    class MockInstant extends MockPartial {
+        public Chronology getChronology() {
+            return COPTIC_UTC;
+        }
+        public DateTimeField[] getFields() {
+            return new DateTimeField[] {
+                COPTIC_UTC.year(),
+                COPTIC_UTC.monthOfYear(),
+                COPTIC_UTC.dayOfMonth(),
+            };
+        }
+        public int[] getValues() {
+            return new int[] {1970, 6, 9};
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    public void testCompareTo() {
+        LocalDate test1 = new LocalDate(2005, 6, 2);
+        LocalDate test1a = new LocalDate(2005, 6, 2);
+        assertEquals(0, test1.compareTo(test1a));
+        assertEquals(0, test1a.compareTo(test1));
+        assertEquals(0, test1.compareTo(test1));
+        assertEquals(0, test1a.compareTo(test1a));
+        
+        LocalDate test2 = new LocalDate(2005, 7, 2);
+        assertEquals(-1, test1.compareTo(test2));
+        assertEquals(+1, test2.compareTo(test1));
+        
+        LocalDate test3 = new LocalDate(2005, 7, 2, GregorianChronology.getInstanceUTC());
+        assertEquals(-1, test1.compareTo(test3));
+        assertEquals(+1, test3.compareTo(test1));
+        assertEquals(0, test3.compareTo(test2));
+        
+        DateTimeFieldType[] types = new DateTimeFieldType[] {
+            DateTimeFieldType.year(),
+            DateTimeFieldType.monthOfYear(),
+            DateTimeFieldType.dayOfMonth(),
+        };
+        int[] values = new int[] {2005, 6, 2};
+        Partial p = new Partial(types, values);
+        assertEquals(0, test1.compareTo(p));
+        assertEquals(0, test1.compareTo(new YearMonthDay(2005, 6, 2)));
+        try {
+            test1.compareTo(null);
+            fail();
+        } catch (NullPointerException ex) {}
+        try {
+            test1.compareTo(new Date());
+            fail();
+        } catch (ClassCastException ex) {}
+        try {
+            test1.compareTo(new TimeOfDay());
+            fail();
+        } catch (ClassCastException ex) {}
+        Partial partial = new Partial()
+            .with(DateTimeFieldType.centuryOfEra(), 1)
+            .with(DateTimeFieldType.halfdayOfDay(), 0)
+            .with(DateTimeFieldType.dayOfMonth(), 9);
+        try {
+            new LocalDate(1970, 6, 9).compareTo(partial);
+            fail();
+        } catch (ClassCastException ex) {}
+    }
+    
+    //-----------------------------------------------------------------------
+    public void testIsEqual_LocalDate() {
+        LocalDate test1 = new LocalDate(2005, 6, 2);
+        LocalDate test1a = new LocalDate(2005, 6, 2);
+        assertEquals(true, test1.isEqual(test1a));
+        assertEquals(true, test1a.isEqual(test1));
+        assertEquals(true, test1.isEqual(test1));
+        assertEquals(true, test1a.isEqual(test1a));
+        
+        LocalDate test2 = new LocalDate(2005, 7, 2);
+        assertEquals(false, test1.isEqual(test2));
+        assertEquals(false, test2.isEqual(test1));
+        
+        LocalDate test3 = new LocalDate(2005, 7, 2, GregorianChronology.getInstanceUTC());
+        assertEquals(false, test1.isEqual(test3));
+        assertEquals(false, test3.isEqual(test1));
+        assertEquals(true, test3.isEqual(test2));
+        
+        try {
+            new LocalDate(2005, 7, 2).isEqual(null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+    
+    //-----------------------------------------------------------------------
+    public void testIsBefore_LocalDate() {
+        LocalDate test1 = new LocalDate(2005, 6, 2);
+        LocalDate test1a = new LocalDate(2005, 6, 2);
+        assertEquals(false, test1.isBefore(test1a));
+        assertEquals(false, test1a.isBefore(test1));
+        assertEquals(false, test1.isBefore(test1));
+        assertEquals(false, test1a.isBefore(test1a));
+        
+        LocalDate test2 = new LocalDate(2005, 7, 2);
+        assertEquals(true, test1.isBefore(test2));
+        assertEquals(false, test2.isBefore(test1));
+        
+        LocalDate test3 = new LocalDate(2005, 7, 2, GregorianChronology.getInstanceUTC());
+        assertEquals(true, test1.isBefore(test3));
+        assertEquals(false, test3.isBefore(test1));
+        assertEquals(false, test3.isBefore(test2));
+        
+        try {
+            new LocalDate(2005, 7, 2).isBefore(null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+    
+    //-----------------------------------------------------------------------
+    public void testIsAfter_LocalDate() {
+        LocalDate test1 = new LocalDate(2005, 6, 2);
+        LocalDate test1a = new LocalDate(2005, 6, 2);
+        assertEquals(false, test1.isAfter(test1a));
+        assertEquals(false, test1a.isAfter(test1));
+        assertEquals(false, test1.isAfter(test1));
+        assertEquals(false, test1a.isAfter(test1a));
+        
+        LocalDate test2 = new LocalDate(2005, 7, 2);
+        assertEquals(false, test1.isAfter(test2));
+        assertEquals(true, test2.isAfter(test1));
+        
+        LocalDate test3 = new LocalDate(2005, 7, 2, GregorianChronology.getInstanceUTC());
+        assertEquals(false, test1.isAfter(test3));
+        assertEquals(true, test3.isAfter(test1));
+        assertEquals(false, test3.isAfter(test2));
+        
+        try {
+            new LocalDate(2005, 7, 2).isAfter(null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
+    public void testWithField_DateTimeFieldType_int_1() {
+        LocalDate test = new LocalDate(2004, 6, 9);
+        LocalDate result = test.withField(DateTimeFieldType.year(), 2006);
+        
+        assertEquals(new LocalDate(2004, 6, 9), test);
+        assertEquals(new LocalDate(2006, 6, 9), result);
+    }
+
+    public void testWithField_DateTimeFieldType_int_2() {
+        LocalDate test = new LocalDate(2004, 6, 9);
+        try {
+            test.withField(null, 6);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testWithField_DateTimeFieldType_int_3() {
+        LocalDate test = new LocalDate(2004, 6, 9);
+        try {
+            test.withField(DateTimeFieldType.hourOfDay(), 6);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testWithField_DateTimeFieldType_int_4() {
+        LocalDate test = new LocalDate(2004, 6, 9);
+        LocalDate result = test.withField(DateTimeFieldType.year(), 2004);
+        assertEquals(new LocalDate(2004, 6, 9), test);
+        assertSame(test, result);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testWithFieldAdded_DurationFieldType_int_1() {
+        LocalDate test = new LocalDate(2004, 6, 9);
+        LocalDate result = test.withFieldAdded(DurationFieldType.years(), 6);
+        
+        assertEquals(new LocalDate(2004, 6, 9), test);
+        assertEquals(new LocalDate(2010, 6, 9), result);
+    }
+
+    public void testWithFieldAdded_DurationFieldType_int_2() {
+        LocalDate test = new LocalDate(2004, 6, 9);
+        try {
+            test.withFieldAdded(null, 0);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testWithFieldAdded_DurationFieldType_int_3() {
+        LocalDate test = new LocalDate(2004, 6, 9);
+        try {
+            test.withFieldAdded(null, 6);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testWithFieldAdded_DurationFieldType_int_4() {
+        LocalDate test = new LocalDate(2004, 6, 9);
+        LocalDate result = test.withFieldAdded(DurationFieldType.years(), 0);
+        assertSame(test, result);
+    }
+
+    public void testWithFieldAdded_DurationFieldType_int_5() {
+        LocalDate test = new LocalDate(2004, 6, 9);
+        try {
+            test.withFieldAdded(DurationFieldType.hours(), 6);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
+    public void testPlus_RP() {
+        LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON);
+        LocalDate result = test.plus(new Period(1, 2, 3, 4, 29, 6, 7, 8));
+        LocalDate expected = new LocalDate(2003, 7, 28, BUDDHIST_LONDON);
+        assertEquals(expected, result);
+        
+        result = test.plus((ReadablePeriod) null);
+        assertSame(test, result);
+    }
+
+    public void testPlusYears_int() {
+        LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON);
+        LocalDate result = test.plusYears(1);
+        LocalDate expected = new LocalDate(2003, 5, 3, BUDDHIST_LONDON);
+        assertEquals(expected, result);
+        
+        result = test.plusYears(0);
+        assertSame(test, result);
+    }
+
+    public void testPlusMonths_int() {
+        LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON);
+        LocalDate result = test.plusMonths(1);
+        LocalDate expected = new LocalDate(2002, 6, 3, BUDDHIST_LONDON);
+        assertEquals(expected, result);
+        
+        result = test.plusMonths(0);
+        assertSame(test, result);
+    }
+
+    public void testPlusWeeks_int() {
+        LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON);
+        LocalDate result = test.plusWeeks(1);
+        LocalDate expected = new LocalDate(2002, 5, 10, BUDDHIST_LONDON);
+        assertEquals(expected, result);
+        
+        result = test.plusWeeks(0);
+        assertSame(test, result);
+    }
+
+    public void testPlusDays_int() {
+        LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON);
+        LocalDate result = test.plusDays(1);
+        LocalDate expected = new LocalDate(2002, 5, 4, BUDDHIST_LONDON);
+        assertEquals(expected, result);
+        
+        result = test.plusDays(0);
+        assertSame(test, result);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testMinus_RP() {
+        LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON);
+        LocalDate result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1));
+        
+        // TODO breaks because it subtracts millis now, and thus goes
+        // into the previous day
+        
+        LocalDate expected = new LocalDate(2001, 3, 26, BUDDHIST_LONDON);
+        assertEquals(expected, result);
+        
+        result = test.minus((ReadablePeriod) null);
+        assertSame(test, result);
+    }
+
+    public void testMinusYears_int() {
+        LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON);
+        LocalDate result = test.minusYears(1);
+        LocalDate expected = new LocalDate(2001, 5, 3, BUDDHIST_LONDON);
+        assertEquals(expected, result);
+        
+        result = test.minusYears(0);
+        assertSame(test, result);
+    }
+
+    public void testMinusMonths_int() {
+        LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON);
+        LocalDate result = test.minusMonths(1);
+        LocalDate expected = new LocalDate(2002, 4, 3, BUDDHIST_LONDON);
+        assertEquals(expected, result);
+        
+        result = test.minusMonths(0);
+        assertSame(test, result);
+    }
+
+    public void testMinusWeeks_int() {
+        LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON);
+        LocalDate result = test.minusWeeks(1);
+        LocalDate expected = new LocalDate(2002, 4, 26, BUDDHIST_LONDON);
+        assertEquals(expected, result);
+        
+        result = test.minusWeeks(0);
+        assertSame(test, result);
+    }
+
+    public void testMinusDays_int() {
+        LocalDate test = new LocalDate(2002, 5, 3, BUDDHIST_LONDON);
+        LocalDate result = test.minusDays(1);
+        LocalDate expected = new LocalDate(2002, 5, 2, BUDDHIST_LONDON);
+        assertEquals(expected, result);
+        
+        result = test.minusDays(0);
+        assertSame(test, result);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testGetters() {
+        LocalDate test = new LocalDate(1970, 6, 9, GJ_UTC);
+        assertEquals(1970, test.getYear());
+        assertEquals(6, test.getMonthOfYear());
+        assertEquals(9, test.getDayOfMonth());
+        assertEquals(160, test.getDayOfYear());
+        assertEquals(2, test.getDayOfWeek());
+        assertEquals(24, test.getWeekOfWeekyear());
+        assertEquals(1970, test.getWeekyear());
+        assertEquals(70, test.getYearOfCentury());
+        assertEquals(20, test.getCenturyOfEra());
+        assertEquals(1970, test.getYearOfEra());
+        assertEquals(DateTimeConstants.AD, test.getEra());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testWithers() {
+        LocalDate test = new LocalDate(1970, 6, 9, GJ_UTC);
+        check(test.withYear(2000), 2000, 6, 9);
+        check(test.withMonthOfYear(2), 1970, 2, 9);
+        check(test.withDayOfMonth(2), 1970, 6, 2);
+        check(test.withDayOfYear(6), 1970, 1, 6);
+        check(test.withDayOfWeek(6), 1970, 6, 13);
+        check(test.withWeekOfWeekyear(6), 1970, 2, 3);
+        check(test.withWeekyear(1971), 1971, 6, 15);
+        check(test.withYearOfCentury(60), 1960, 6, 9);
+        check(test.withCenturyOfEra(21), 2070, 6, 9);
+        check(test.withYearOfEra(1066), 1066, 6, 9);
+        check(test.withEra(DateTimeConstants.BC), -1970, 6, 9);
+        try {
+            test.withMonthOfYear(0);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            test.withMonthOfYear(13);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToDateTimeAtMidnight() {
+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS);
+        
+        DateTime test = base.toDateTimeAtMidnightDefaultZone();
+        check(base, 2005, 6, 9);
+        assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_LONDON), test);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToDateTimeAtMidnight_Zone() {
+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS);
+        
+        DateTime test = base.toDateTimeAtMidnight(TOKYO);
+        check(base, 2005, 6, 9);
+        assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_TOKYO), test);
+    }
+
+    public void testToDateTimeAtMidnight_nullZone() {
+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS);
+        
+        DateTime test = base.toDateTimeAtMidnight((DateTimeZone) null);
+        check(base, 2005, 6, 9);
+        assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_LONDON), test);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToDateTimeAtCurrentTime() {
+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant
+        DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9);
+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());
+        
+        DateTime test = base.toDateTimeAtCurrentTimeDefaultZone();
+        check(base, 2005, 6, 9);
+        DateTime expected = new DateTime(dt.getMillis(), COPTIC_LONDON);
+        expected = expected.year().setCopy(2005);
+        expected = expected.monthOfYear().setCopy(6);
+        expected = expected.dayOfMonth().setCopy(9);
+        assertEquals(expected, test);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToDateTimeAtCurrentTime_Zone() {
+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant
+        DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9);
+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());
+        
+        DateTime test = base.toDateTimeAtCurrentTime(TOKYO);
+        check(base, 2005, 6, 9);
+        DateTime expected = new DateTime(dt.getMillis(), COPTIC_TOKYO);
+        expected = expected.year().setCopy(2005);
+        expected = expected.monthOfYear().setCopy(6);
+        expected = expected.dayOfMonth().setCopy(9);
+        assertEquals(expected, test);
+    }
+
+    public void testToDateTimeAtCurrentTime_nullZone() {
+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant
+        DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9);
+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());
+        
+        DateTime test = base.toDateTimeAtCurrentTime((DateTimeZone) null);
+        check(base, 2005, 6, 9);
+        DateTime expected = new DateTime(dt.getMillis(), COPTIC_LONDON);
+        expected = expected.year().setCopy(2005);
+        expected = expected.monthOfYear().setCopy(6);
+        expected = expected.dayOfMonth().setCopy(9);
+        assertEquals(expected, test);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToDateTimeDefaultZone_LocalTime() {
+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant
+        LocalTime tod = new LocalTime(12, 13, 14, 15, COPTIC_TOKYO);
+        
+        DateTime test = base.toDateTimeDefaultZone(tod);
+        check(base, 2005, 6, 9);
+        DateTime expected = new DateTime(2005, 6, 9, 12, 13, 14, 15, COPTIC_LONDON);
+        assertEquals(expected, test);
+    }
+
+    public void testToDateTimeDefaultZone_nullLocalTime() {
+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant
+        long now = new DateTime(2004, 5, 8, 12, 13, 14, 15, COPTIC_LONDON).getMillis();
+        DateTimeUtils.setCurrentMillisFixed(now);
+        
+        DateTime test = base.toDateTimeDefaultZone((LocalTime) null);
+        check(base, 2005, 6, 9);
+        DateTime expected = new DateTime(2005, 6, 9, 12, 13, 14, 15, COPTIC_LONDON);
+        assertEquals(expected, test);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToDateTime_LocalTime_Zone() {
+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant
+        LocalTime tod = new LocalTime(12, 13, 14, 15, COPTIC_TOKYO);
+        
+        DateTime test = base.toDateTime(tod, TOKYO);
+        check(base, 2005, 6, 9);
+        DateTime expected = new DateTime(2005, 6, 9, 12, 13, 14, 15, COPTIC_TOKYO);
+        assertEquals(expected, test);
+    }
+
+    public void testToDateTime_LocalTime_nullZone() {
+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant
+        LocalTime tod = new LocalTime(12, 13, 14, 15, COPTIC_TOKYO);
+        
+        DateTime test = base.toDateTime(tod, null);
+        check(base, 2005, 6, 9);
+        DateTime expected = new DateTime(2005, 6, 9, 12, 13, 14, 15, COPTIC_LONDON);
+        assertEquals(expected, test);
+    }
+
+    public void testToDateTime_nullLocalTime_Zone() {
+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant
+        long now = new DateTime(2004, 5, 8, 12, 13, 14, 15, COPTIC_TOKYO).getMillis();
+        DateTimeUtils.setCurrentMillisFixed(now);
+        
+        DateTime test = base.toDateTime((LocalTime) null, TOKYO);
+        check(base, 2005, 6, 9);
+        DateTime expected = new DateTime(2005, 6, 9, 12, 13, 14, 15, COPTIC_TOKYO);
+        assertEquals(expected, test);
+    }
+
+    public void testToDateTime_wrongChronoLocalTime_Zone() {
+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant
+        LocalTime tod = new LocalTime(12, 13, 14, 15, BUDDHIST_TOKYO);
+        
+        try {
+            base.toDateTime(tod, LONDON);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToDateMidnight() {
+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS);
+        
+        DateMidnight test = base.toDateMidnightDefaultZone();
+        check(base, 2005, 6, 9);
+        assertEquals(new DateMidnight(2005, 6, 9, COPTIC_LONDON), test);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToDateMidnight_Zone() {
+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS);
+        
+        DateMidnight test = base.toDateMidnight(TOKYO);
+        check(base, 2005, 6, 9);
+        assertEquals(new DateMidnight(2005, 6, 9, COPTIC_TOKYO), test);
+    }
+
+    public void testToDateMidnight_nullZone() {
+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS);
+        
+        DateMidnight test = base.toDateMidnight((DateTimeZone) null);
+        check(base, 2005, 6, 9);
+        assertEquals(new DateMidnight(2005, 6, 9, COPTIC_LONDON), test);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToDateTime_RI() {
+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS);
+        DateTime dt = new DateTime(2002, 1, 3, 4, 5, 6, 7);
+        
+        DateTime test = base.toDateTime(dt);
+        check(base, 2005, 6, 9);
+        DateTime expected = dt;
+        expected = expected.year().setCopy(2005);
+        expected = expected.monthOfYear().setCopy(6);
+        expected = expected.dayOfMonth().setCopy(9);
+        assertEquals(expected, test);
+    }
+
+    public void testToDateTime_nullRI() {
+        LocalDate base = new LocalDate(2005, 6, 9);
+        DateTime dt = new DateTime(2002, 1, 3, 4, 5, 6, 7);
+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());
+        
+        DateTime test = base.toDateTime((ReadableInstant) null);
+        check(base, 2005, 6, 9);
+        DateTime expected = dt;
+        expected = expected.year().setCopy(2005);
+        expected = expected.monthOfYear().setCopy(6);
+        expected = expected.dayOfMonth().setCopy(9);
+        assertEquals(expected, test);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToInterval() {
+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant
+        Interval test = base.toIntervalDefaultZone();
+        check(base, 2005, 6, 9);
+        DateTime start = base.toDateTimeAtMidnightDefaultZone();
+        DateTime end = start.plus(Period.days(1));
+        Interval expected = new Interval(start, end);
+        assertEquals(expected, test);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToInterval_Zone() {
+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant
+        Interval test = base.toInterval(TOKYO);
+        check(base, 2005, 6, 9);
+        DateTime start = base.toDateTimeAtMidnight(TOKYO);
+        DateTime end = start.plus(Period.days(1));
+        Interval expected = new Interval(start, end);
+        assertEquals(expected, test);
+    }
+
+    public void testToInterval_nullZone() {
+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant
+        Interval test = base.toInterval(null);
+        check(base, 2005, 6, 9);
+        DateTime start = base.toDateTimeAtMidnight(LONDON);
+        DateTime end = start.plus(Period.days(1));
+        Interval expected = new Interval(start, end);
+        assertEquals(expected, test);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testProperty() {
+        LocalDate test = new LocalDate(2005, 6, 9, GJ_UTC);
+        assertEquals(test.year(), test.property(DateTimeFieldType.year()));
+        assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear()));
+        assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth()));
+        assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek()));
+        assertEquals(test.dayOfYear(), test.property(DateTimeFieldType.dayOfYear()));
+        assertEquals(test.weekOfWeekyear(), test.property(DateTimeFieldType.weekOfWeekyear()));
+        assertEquals(test.weekyear(), test.property(DateTimeFieldType.weekyear()));
+        assertEquals(test.yearOfCentury(), test.property(DateTimeFieldType.yearOfCentury()));
+        assertEquals(test.yearOfEra(), test.property(DateTimeFieldType.yearOfEra()));
+        assertEquals(test.centuryOfEra(), test.property(DateTimeFieldType.centuryOfEra()));
+        assertEquals(test.era(), test.property(DateTimeFieldType.era()));
+        try {
+            test.property(DateTimeFieldType.millisOfDay());
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            test.property(null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
+    public void testSerialization() throws Exception {
+        LocalDate test = new LocalDate(1972, 6, 9, COPTIC_PARIS);
+        
+        ByteArrayOutputStream baos = new ByteArrayOutputStream();
+        ObjectOutputStream oos = new ObjectOutputStream(baos);
+        oos.writeObject(test);
+        byte[] bytes = baos.toByteArray();
+        oos.close();
+        
+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
+        ObjectInputStream ois = new ObjectInputStream(bais);
+        LocalDate result = (LocalDate) ois.readObject();
+        ois.close();
+        
+        assertEquals(test, result);
+        assertTrue(Arrays.equals(test.getValues(), result.getValues()));
+        assertTrue(Arrays.equals(test.getFields(), result.getFields()));
+        assertEquals(test.getChronology(), result.getChronology());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToString() {
+        LocalDate test = new LocalDate(2002, 6, 9);
+        assertEquals("2002-06-09", test.toString());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToString_String() {
+        LocalDate test = new LocalDate(2002, 6, 9);
+        assertEquals("2002 \ufffd\ufffd", test.toString("yyyy HH"));
+        assertEquals("2002-06-09", test.toString((String) null));
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToString_String_Locale() {
+        LocalDate test = new LocalDate(1970, 6, 9);
+        assertEquals("Tue 9/6", test.toString("EEE d/M", Locale.ENGLISH));
+        assertEquals("mar. 9/6", test.toString("EEE d/M", Locale.FRENCH));
+        assertEquals("1970-06-09", test.toString(null, Locale.ENGLISH));
+        assertEquals("Tue 9/6", test.toString("EEE d/M", null));
+        assertEquals("1970-06-09", test.toString(null, null));
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToString_DTFormatter() {
+        LocalDate test = new LocalDate(2002, 6, 9);
+        assertEquals("2002 \ufffd\ufffd", test.toString(DateTimeFormat.forPattern("yyyy HH")));
+        assertEquals("2002-06-09", test.toString((DateTimeFormatter) null));
+    }
+
+    //-----------------------------------------------------------------------
+    private void check(LocalDate test, int hour, int min, int sec) {
+        assertEquals(hour, test.getYear());
+        assertEquals(min, test.getMonthOfYear());
+        assertEquals(sec, test.getDayOfMonth());
+    }
+}

From 6744d06e1d8bedcd2a501f0a058bdc8d67c35371 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 11 Feb 2006 00:17:43 +0000
Subject: [PATCH 032/115] Fix to ensure that zone is not lost on toDateTime et
 al

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1027 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    | 14 +++-
 JodaTime/src/java/org/joda/time/Instant.java  | 83 ++++++++++++++++++-
 .../org/joda/time/base/AbstractInstant.java   | 18 ++--
 .../joda/time/TestDateMidnight_Basics.java    | 22 ++---
 .../org/joda/time/TestDateTime_Basics.java    | 10 +--
 .../org/joda/time/TestInstant_Basics.java     |  9 +-
 .../joda/time/TestMutableDateTime_Basics.java | 18 ++--
 7 files changed, 132 insertions(+), 42 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 24393ab20..c9b1b0673 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -32,10 +32,21 @@ Data compatible - Yes
 
 Deprecations since 1.2
 ----------------------
+- Instant.toDateTimeISO
+- Instant.toMutableDateTimeISO
+    These were identical to the methods without the ISO suffix
 
 
 Bug fixes since 1.2
 -------------------
+- DateTime/DateMidnight/MutableDateTime/AbstractInstant
+   Conversion methods toDateTime, toDateTimeISO, toMutableDateTime, and
+    toMutableDateTimeISO now preserve the time zone.
+    Previously calling any of these four methods would convert the result to
+    the default time zone. This was incorrect.
+    The methods have been changed to preserve the time zone.
+   The similarly named methods on Instant have not changed behaviour.
+
 - DateTimeFormatterBuilder.MatchingParser
   Previously didn't estimate parsed length correctly
 
@@ -45,9 +56,6 @@ Bug fixes since 1.2
 - FixedDateTimeZone
   Hashcode was not defined
 
-- AbstractInstant
-  Conversion methods toDateTime, toDateTimeISO, toMutableDateTime, and
-  toMutableDateTimeISO did not preserve the time zone
 
 Enhancements since 1.2
 ----------------------
diff --git a/JodaTime/src/java/org/joda/time/Instant.java b/JodaTime/src/java/org/joda/time/Instant.java
index f63a3217b..59c66be66 100644
--- a/JodaTime/src/java/org/joda/time/Instant.java
+++ b/JodaTime/src/java/org/joda/time/Instant.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2006 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -221,4 +221,85 @@ public Chronology getChronology() {
         return ISOChronology.getInstanceUTC();
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Get this object as a DateTime using ISOChronology in the default zone.
+     * <p>
+     * This method returns a DateTime object in the default zone.
+     * This differs from the similarly named method on DateTime, DateMidnight
+     * or MutableDateTime which retains the time zone. The difference is
+     * because Instant really represents a time <i>without</i> a zone,
+     * thus calling this method we really have no zone to 'retain' and
+     * hence expect to switch to the default zone.
+     * <p>
+     * This method definition preserves compatability with earlier versions
+     * of Joda-Time.
+     *
+     * @return a DateTime using the same millis
+     */
+    public DateTime toDateTime() {
+        return new DateTime(getMillis(), ISOChronology.getInstance());
+    }
+
+    /**
+     * Get this object as a DateTime using ISOChronology in the default zone.
+     * This method is identical to <code>toDateTime()</code>.
+     * <p>
+     * This method returns a DateTime object in the default zone.
+     * This differs from the similarly named method on DateTime, DateMidnight
+     * or MutableDateTime which retains the time zone. The difference is
+     * because Instant really represents a time <i>without</i> a zone,
+     * thus calling this method we really have no zone to 'retain' and
+     * hence expect to switch to the default zone.
+     * <p>
+     * This method definition preserves compatability with earlier versions
+     * of Joda-Time.
+     *
+     * @return a DateTime using the same millis with ISOChronology
+     * @deprecated Use toDateTime() as it is identical
+     */
+    public DateTime toDateTimeISO() {
+        return toDateTime();
+    }
+
+    /**
+     * Get this object as a MutableDateTime using ISOChronology in the default zone.
+     * <p>
+     * This method returns a MutableDateTime object in the default zone.
+     * This differs from the similarly named method on DateTime, DateMidnight
+     * or MutableDateTime which retains the time zone. The difference is
+     * because Instant really represents a time <i>without</i> a zone,
+     * thus calling this method we really have no zone to 'retain' and
+     * hence expect to switch to the default zone.
+     * <p>
+     * This method definition preserves compatability with earlier versions
+     * of Joda-Time.
+     *
+     * @return a MutableDateTime using the same millis
+     */
+    public MutableDateTime toMutableDateTime() {
+        return new MutableDateTime(getMillis(), ISOChronology.getInstance());
+    }
+
+    /**
+     * Get this object as a MutableDateTime using ISOChronology in the default zone.
+     * This method is identical to <code>toMutableDateTime()</code>.
+     * <p>
+     * This method returns a MutableDateTime object in the default zone.
+     * This differs from the similarly named method on DateTime, DateMidnight
+     * or MutableDateTime which retains the time zone. The difference is
+     * because Instant really represents a time <i>without</i> a zone,
+     * thus calling this method we really have no zone to 'retain' and
+     * hence expect to switch to the default zone.
+     * <p>
+     * This method definition preserves compatability with earlier versions
+     * of Joda-Time.
+     *
+     * @return a MutableDateTime using the same millis with ISOChronology
+     * @deprecated Use toMutableDateTime() as it is identical
+     */
+    public MutableDateTime toMutableDateTimeISO() {
+        return toMutableDateTime();
+    }
+
 }
diff --git a/JodaTime/src/java/org/joda/time/base/AbstractInstant.java b/JodaTime/src/java/org/joda/time/base/AbstractInstant.java
index 5e9b016be..6d6f2a8cb 100644
--- a/JodaTime/src/java/org/joda/time/base/AbstractInstant.java
+++ b/JodaTime/src/java/org/joda/time/base/AbstractInstant.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2006 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -136,8 +136,8 @@ public Instant toInstant() {
     }
 
     /**
-     * Get this object as a DateTime, in the same zone.
-     * 
+     * Get this object as a DateTime in the same zone.
+     *
      * @return a DateTime using the same millis
      */
     public DateTime toDateTime() {
@@ -145,8 +145,8 @@ public DateTime toDateTime() {
     }
 
     /**
-     * Get this object as a DateTime using ISOChronology, in the same zone.
-     * 
+     * Get this object as a DateTime using ISOChronology in the same zone.
+     *
      * @return a DateTime using the same millis with ISOChronology
      */
     public DateTime toDateTimeISO() {
@@ -181,8 +181,8 @@ public DateTime toDateTime(Chronology chronology) {
     // returning a copy prevents this.
 
     /**
-     * Get this object as a MutableDateTime, in the same zone.
-     * 
+     * Get this object as a MutableDateTime in the same zone.
+     *
      * @return a MutableDateTime using the same millis
      */
     public MutableDateTime toMutableDateTime() {
@@ -190,8 +190,8 @@ public MutableDateTime toMutableDateTime() {
     }
 
     /**
-     * Get this object as a MutableDateTime using ISOChronology, in the same zone.
-     * 
+     * Get this object as a MutableDateTime using ISOChronology in the same zone.
+     *
      * @return a MutableDateTime using the same millis with ISOChronology
      */
     public MutableDateTime toMutableDateTimeISO() {
diff --git a/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java b/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java
index 04f05e03f..1245377d2 100644
--- a/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2006 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -434,21 +434,21 @@ public void testToInstant() {
         assertEquals(TEST_TIME1_LONDON, result.getMillis());
     }
 
-    public void testToDateMidnight() {
-        DateMidnight test = new DateMidnight(TEST_TIME1_UTC);
+    public void testToDateTime() {
+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC, PARIS);
         DateTime result = test.toDateTime();
         assertEquals(test.getMillis(), result.getMillis());
-        assertEquals(TEST_TIME1_LONDON, result.getMillis());
-        assertEquals(LONDON, result.getZone());
+        assertEquals(TEST_TIME1_PARIS, result.getMillis());
+        assertEquals(PARIS, result.getZone());
     }
 
     public void testToDateTimeISO() {
-        DateMidnight test = new DateMidnight(TEST_TIME1_UTC);
+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC, PARIS);
         DateTime result = test.toDateTimeISO();
         assertSame(DateTime.class, result.getClass());
         assertSame(ISOChronology.class, result.getChronology().getClass());
         assertEquals(test.getMillis(), result.getMillis());
-        assertEquals(ISOChronology.getInstance(), result.getChronology());
+        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());
     }
 
     public void testToDateTime_DateTimeZone() {
@@ -504,19 +504,19 @@ public void testToDateTime_Chronology() {
     }
 
     public void testToMutableDateTime() {
-        DateMidnight test = new DateMidnight(TEST_TIME1_UTC);
+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC, PARIS);
         MutableDateTime result = test.toMutableDateTime();
         assertEquals(test.getMillis(), result.getMillis());
-        assertEquals(ISOChronology.getInstance(), result.getChronology());
+        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());
     }
 
     public void testToMutableDateTimeISO() {
-        DateMidnight test = new DateMidnight(TEST_TIME1_UTC);
+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC, PARIS);
         MutableDateTime result = test.toMutableDateTimeISO();
         assertSame(MutableDateTime.class, result.getClass());
         assertSame(ISOChronology.class, result.getChronology().getClass());
         assertEquals(test.getMillis(), result.getMillis());
-        assertEquals(ISOChronology.getInstance(), result.getChronology());
+        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());
     }
 
     public void testToMutableDateTime_DateTimeZone() {
diff --git a/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java b/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java
index 384e8765a..b9bf6ec52 100644
--- a/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2006 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -566,19 +566,19 @@ public void testToDateTime_Chronology() {
     }
 
     public void testToMutableDateTime() {
-        DateTime test = new DateTime(TEST_TIME1);
+        DateTime test = new DateTime(TEST_TIME1, PARIS);
         MutableDateTime result = test.toMutableDateTime();
         assertEquals(test.getMillis(), result.getMillis());
-        assertEquals(ISOChronology.getInstance(), result.getChronology());
+        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());
     }
 
     public void testToMutableDateTimeISO() {
-        DateTime test = new DateTime(TEST_TIME1);
+        DateTime test = new DateTime(TEST_TIME1, PARIS);
         MutableDateTime result = test.toMutableDateTimeISO();
         assertSame(MutableDateTime.class, result.getClass());
         assertSame(ISOChronology.class, result.getChronology().getClass());
         assertEquals(test.getMillis(), result.getMillis());
-        assertEquals(ISOChronology.getInstance(), result.getChronology());
+        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());
     }
 
     public void testToMutableDateTime_DateTimeZone() {
diff --git a/JodaTime/src/test/org/joda/time/TestInstant_Basics.java b/JodaTime/src/test/org/joda/time/TestInstant_Basics.java
index d9baccd3f..4fac72ea8 100644
--- a/JodaTime/src/test/org/joda/time/TestInstant_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestInstant_Basics.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2006 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -395,6 +395,7 @@ public void testToDateTime() {
         Instant test = new Instant(TEST_TIME1);
         DateTime result = test.toDateTime();
         assertEquals(TEST_TIME1, result.getMillis());
+        assertEquals(ISOChronology.getInstance(), result.getChronology());
     }
 
     public void testToDateTimeISO() {
@@ -403,7 +404,7 @@ public void testToDateTimeISO() {
         assertSame(DateTime.class, result.getClass());
         assertSame(ISOChronology.class, result.getChronology().getClass());
         assertEquals(test.getMillis(), result.getMillis());
-        assertEquals(ISOChronology.getInstanceUTC(), result.getChronology());
+        assertEquals(ISOChronology.getInstance(), result.getChronology());
     }
 
     public void testToDateTime_DateTimeZone() {
@@ -443,7 +444,7 @@ public void testToMutableDateTime() {
         Instant test = new Instant(TEST_TIME1);
         MutableDateTime result = test.toMutableDateTime();
         assertEquals(test.getMillis(), result.getMillis());
-        assertEquals(ISOChronology.getInstanceUTC(), result.getChronology());
+        assertEquals(ISOChronology.getInstance(), result.getChronology());
     }
 
     public void testToMutableDateTimeISO() {
@@ -452,7 +453,7 @@ public void testToMutableDateTimeISO() {
         assertSame(MutableDateTime.class, result.getClass());
         assertSame(ISOChronology.class, result.getChronology().getClass());
         assertEquals(test.getMillis(), result.getMillis());
-        assertEquals(ISOChronology.getInstanceUTC(), result.getChronology());
+        assertEquals(ISOChronology.getInstance(), result.getChronology());
     }
 
     public void testToMutableDateTime_DateTimeZone() {
diff --git a/JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java b/JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java
index 180e59d7b..c1e06baa7 100644
--- a/JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2006 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -439,19 +439,19 @@ public void testToInstant() {
     }
 
     public void testToDateTime() {
-        MutableDateTime test = new MutableDateTime(TEST_TIME1);
+        MutableDateTime test = new MutableDateTime(TEST_TIME1, PARIS);
         DateTime result = test.toDateTime();
         assertEquals(test.getMillis(), result.getMillis());
-        assertEquals(test.getChronology(), result.getChronology());
+        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());
     }
 
     public void testToDateTimeISO() {
-        MutableDateTime test = new MutableDateTime(TEST_TIME1);
+        MutableDateTime test = new MutableDateTime(TEST_TIME1, PARIS);
         DateTime result = test.toDateTimeISO();
         assertSame(DateTime.class, result.getClass());
         assertSame(ISOChronology.class, result.getChronology().getClass());
         assertEquals(test.getMillis(), result.getMillis());
-        assertEquals(ISOChronology.getInstance(), result.getChronology());
+        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());
     }
 
     public void testToDateTime_DateTimeZone() {
@@ -506,20 +506,20 @@ public void testToDateTime_Chronology() {
     }
 
     public void testToMutableDateTime() {
-        MutableDateTime test = new MutableDateTime(TEST_TIME1);
+        MutableDateTime test = new MutableDateTime(TEST_TIME1, PARIS);
         MutableDateTime result = test.toMutableDateTime();
         assertTrue(test != result);
         assertEquals(test.getMillis(), result.getMillis());
-        assertEquals(ISOChronology.getInstance(), result.getChronology());
+        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());
     }
 
     public void testToMutableDateTimeISO() {
-        MutableDateTime test = new MutableDateTime(TEST_TIME1);
+        MutableDateTime test = new MutableDateTime(TEST_TIME1, PARIS);
         MutableDateTime result = test.toMutableDateTimeISO();
         assertSame(MutableDateTime.class, result.getClass());
         assertSame(ISOChronology.class, result.getChronology().getClass());
         assertEquals(test.getMillis(), result.getMillis());
-        assertEquals(ISOChronology.getInstance(), result.getChronology());
+        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());
         assertNotSame(test, result);
     }
 

From d4998c7904a9a9c5380904e1f744bbc67e397745 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 13 Feb 2006 22:57:06 +0000
Subject: [PATCH 033/115] Fix test time zone

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1030 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../joda/time/TestLocalTime_Constructors.java | 31 +++++++++----------
 1 file changed, 15 insertions(+), 16 deletions(-)

diff --git a/JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java b/JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java
index c6db71cd9..c56927993 100644
--- a/JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java
+++ b/JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java
@@ -22,7 +22,6 @@
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
 
-import org.joda.time.chrono.CopticChronology;
 import org.joda.time.chrono.GJChronology;
 import org.joda.time.chrono.ISOChronology;
 import org.joda.time.chrono.JulianChronology;
@@ -37,7 +36,7 @@
     private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
     private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
     private static final ISOChronology ISO_UTC = ISOChronology.getInstanceUTC();
-    private static final JulianChronology JULIAN = JulianChronology.getInstance();
+    private static final JulianChronology JULIAN_LONDON = JulianChronology.getInstance(LONDON);
     private static final JulianChronology JULIAN_PARIS = JulianChronology.getInstance(PARIS);
     private static final JulianChronology JULIAN_UTC = JulianChronology.getInstanceUTC();
     private static final int OFFSET_LONDON = LONDON.getOffset(0L) / DateTimeConstants.MILLIS_PER_HOUR;
@@ -139,7 +138,7 @@ public void testFactoryMillisOfDay_long() throws Throwable {
 
     //-----------------------------------------------------------------------
     public void testFactoryMillisOfDay_long_Chronology() throws Throwable {
-        LocalTime test = LocalTime.fromMillisOfDay(TEST_TIME1, JULIAN);
+        LocalTime test = LocalTime.fromMillisOfDay(TEST_TIME1, JULIAN_LONDON);
         assertEquals(JULIAN_UTC, test.getChronology());
         assertEquals(1, test.getHourOfDay());
         assertEquals(2, test.getMinuteOfHour());
@@ -202,7 +201,7 @@ public void testFactory_now_nullDateTimeZone() throws Throwable {
 
     //-----------------------------------------------------------------------
     public void testFactory_now_Chronology() throws Throwable {
-        LocalTime test = LocalTime.now(JULIAN);
+        LocalTime test = LocalTime.now(JULIAN_LONDON);
         assertEquals(JULIAN_UTC, test.getChronology());
         assertEquals(10 + OFFSET_LONDON, test.getHourOfDay());
         assertEquals(20, test.getMinuteOfHour());
@@ -268,7 +267,7 @@ public void testFactory_forInstant_long1_Chronology() throws Throwable {
     }
 
     public void testFactory_forInstant_long2_Chronology() throws Throwable {
-        LocalTime test = LocalTime.forInstant(TEST_TIME2, JULIAN);
+        LocalTime test = LocalTime.forInstant(TEST_TIME2, JULIAN_LONDON);
         assertEquals(JULIAN_UTC, test.getChronology());
         assertEquals(5 + OFFSET_LONDON, test.getHourOfDay());
         assertEquals(6, test.getMinuteOfHour());
@@ -329,7 +328,7 @@ public void testFactory_forInstant_nullObject() throws Throwable {
     //-----------------------------------------------------------------------
     public void testFactory_forInstant_Object1_Chronology() throws Throwable {
         Date date = new Date(TEST_TIME1);
-        LocalTime test = LocalTime.forInstant(date, JULIAN);
+        LocalTime test = LocalTime.forInstant(date, JULIAN_LONDON);
         assertEquals(JULIAN_UTC, test.getChronology());
         assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());
         assertEquals(2, test.getMinuteOfHour());
@@ -351,7 +350,7 @@ public void testFactory_forInstant_Object2_Chronology() throws Throwable {
     }
 
     public void testFactory_forInstant_nullObject_Chronology() throws Throwable {
-        LocalTime test = LocalTime.forInstant((Object) null, JULIAN);
+        LocalTime test = LocalTime.forInstant((Object) null, JULIAN_LONDON);
         assertEquals(JULIAN_UTC, test.getChronology());
         assertEquals(10 + OFFSET_LONDON, test.getHourOfDay());
         assertEquals(20, test.getMinuteOfHour());
@@ -479,42 +478,42 @@ public void testConstructor_int_int_int_int() throws Throwable {
     }
 
     public void testConstructor_int_int_int_int_Chronology() throws Throwable {
-        LocalTime test = new LocalTime(10, 20, 30, 40, JULIAN);
+        LocalTime test = new LocalTime(10, 20, 30, 40, JULIAN_LONDON);
         assertEquals(JULIAN_UTC, test.getChronology());
         assertEquals(10, test.getHourOfDay());
         assertEquals(20, test.getMinuteOfHour());
         assertEquals(30, test.getSecondOfMinute());
         assertEquals(40, test.getMillisOfSecond());
         try {
-            new LocalTime(-1, 20, 30, 40, JULIAN);
+            new LocalTime(-1, 20, 30, 40, JULIAN_LONDON);
             fail();
         } catch (IllegalArgumentException ex) {}
         try {
-            new LocalTime(24, 20, 30, 40, JULIAN);
+            new LocalTime(24, 20, 30, 40, JULIAN_LONDON);
             fail();
         } catch (IllegalArgumentException ex) {}
         try {
-            new LocalTime(10, -1, 30, 40, JULIAN);
+            new LocalTime(10, -1, 30, 40, JULIAN_LONDON);
             fail();
         } catch (IllegalArgumentException ex) {}
         try {
-            new LocalTime(10, 60, 30, 40, JULIAN);
+            new LocalTime(10, 60, 30, 40, JULIAN_LONDON);
             fail();
         } catch (IllegalArgumentException ex) {}
         try {
-            new LocalTime(10, 20, -1, 40, JULIAN);
+            new LocalTime(10, 20, -1, 40, JULIAN_LONDON);
             fail();
         } catch (IllegalArgumentException ex) {}
         try {
-            new LocalTime(10, 20, 60, 40, JULIAN);
+            new LocalTime(10, 20, 60, 40, JULIAN_LONDON);
             fail();
         } catch (IllegalArgumentException ex) {}
         try {
-            new LocalTime(10, 20, 30, -1, JULIAN);
+            new LocalTime(10, 20, 30, -1, JULIAN_LONDON);
             fail();
         } catch (IllegalArgumentException ex) {}
         try {
-            new LocalTime(10, 20, 30, 1000, JULIAN);
+            new LocalTime(10, 20, 30, 1000, JULIAN_LONDON);
             fail();
         } catch (IllegalArgumentException ex) {}
     }

From 76911720755b6300f36426e83a4c7a6fb052ae63 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 13 Feb 2006 23:12:36 +0000
Subject: [PATCH 034/115] Avoid supporting invalid fields like hourOfYear

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1031 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/java/org/joda/time/LocalTime.java     |  6 ++-
 .../org/joda/time/TestLocalTime_Basics.java   | 44 +++++++++++++------
 2 files changed, 36 insertions(+), 14 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/LocalTime.java b/JodaTime/src/java/org/joda/time/LocalTime.java
index 7893461d7..145c4e0d8 100644
--- a/JodaTime/src/java/org/joda/time/LocalTime.java
+++ b/JodaTime/src/java/org/joda/time/LocalTime.java
@@ -522,7 +522,11 @@ public boolean isSupported(DateTimeFieldType type) {
         if (type == null) {
             return false;
         }
-        return isSupported(type.getDurationType());
+        if (isSupported(type.getDurationType()) == false) {
+            return false;
+        }
+        DurationFieldType range = type.getRangeDurationType();
+        return (isSupported(range) || range == DurationFieldType.days());
     }
 
     /**
diff --git a/JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java b/JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java
index 72e52edde..45fd84829 100644
--- a/JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java
@@ -29,7 +29,6 @@
 import org.joda.time.chrono.BuddhistChronology;
 import org.joda.time.chrono.CopticChronology;
 import org.joda.time.chrono.GregorianChronology;
-import org.joda.time.chrono.ISOChronology;
 import org.joda.time.format.DateTimeFormat;
 import org.joda.time.format.DateTimeFormatter;
 
@@ -47,14 +46,7 @@
     private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);
     private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);
     private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();
-    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);
-    private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);
-    private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);
-    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
-    private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);
     private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);
-    private static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);
-    private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();
 
     private long TEST_TIME_NOW =
             10L * DateTimeConstants.MILLIS_PER_HOUR
@@ -62,11 +54,11 @@
             + 30L * DateTimeConstants.MILLIS_PER_SECOND
             + 40L;
 
-    private long TEST_TIME1 =
-        1L * DateTimeConstants.MILLIS_PER_HOUR
-        + 2L * DateTimeConstants.MILLIS_PER_MINUTE
-        + 3L * DateTimeConstants.MILLIS_PER_SECOND
-        + 4L;
+//    private long TEST_TIME1 =
+//        1L * DateTimeConstants.MILLIS_PER_HOUR
+//        + 2L * DateTimeConstants.MILLIS_PER_MINUTE
+//        + 3L * DateTimeConstants.MILLIS_PER_SECOND
+//        + 4L;
 
     private long TEST_TIME2 =
         1L * DateTimeConstants.MILLIS_PER_DAY
@@ -232,6 +224,32 @@ public void testIsSupported_DateTimeFieldType() {
         
         assertEquals(false, test.isSupported(DateTimeFieldType.dayOfMonth()));
         assertEquals(false, test.isSupported((DateTimeFieldType) null));
+        
+        DateTimeFieldType d = new DateTimeFieldType("hours") {
+            public DurationFieldType getDurationType() {
+                return DurationFieldType.hours();
+            }
+            public DurationFieldType getRangeDurationType() {
+                return null;
+            }
+            public DateTimeField getField(Chronology chronology) {
+                return chronology.hourOfDay();
+            }
+        };
+        assertEquals(false, test.isSupported(d));
+        
+        d = new DateTimeFieldType("hourOfYear") {
+            public DurationFieldType getDurationType() {
+                return DurationFieldType.hours();
+            }
+            public DurationFieldType getRangeDurationType() {
+                return DurationFieldType.years();
+            }
+            public DateTimeField getField(Chronology chronology) {
+                return chronology.hourOfDay();
+            }
+        };
+        assertEquals(false, test.isSupported(d));
     }
 
     public void testIsSupported_DurationFieldType() {

From d4a4f8f94226a80501bb15ed84ac2f544b312d3f Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 13 Feb 2006 23:12:49 +0000
Subject: [PATCH 035/115] LocalTime tests

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1032 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/test/org/joda/time/TestAll.java | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/JodaTime/src/test/org/joda/time/TestAll.java b/JodaTime/src/test/org/joda/time/TestAll.java
index 2754532e0..235bc6109 100644
--- a/JodaTime/src/test/org/joda/time/TestAll.java
+++ b/JodaTime/src/test/org/joda/time/TestAll.java
@@ -61,9 +61,9 @@ public static Test suite() {
         suite.addTest(TestInterval_Constructors.suite());
         suite.addTest(TestInterval_Basics.suite());
         
-//        suite.addTest(TestLocalTime_Basics.suite());
-//        suite.addTest(TestLocalTime_Constructors.suite());
-//        suite.addTest(TestLocalTime_Properties.suite());
+        suite.addTest(TestLocalTime_Basics.suite());
+        suite.addTest(TestLocalTime_Constructors.suite());
+        suite.addTest(TestLocalTime_Properties.suite());
         
 //        suite.addTest(TestLocalDate_Basics.suite());
         

From 414e3ee566c4af59ac216877daf960747b37fde1 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Tue, 28 Feb 2006 05:01:19 +0000
Subject: [PATCH 036/115] Update index to refer to version 1.2.1.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1033 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/index.xml | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/JodaTime/xdocs/index.xml b/JodaTime/xdocs/index.xml
index cf1ecc341..98a59e0a2 100644
--- a/JodaTime/xdocs/index.xml
+++ b/JodaTime/xdocs/index.xml
@@ -35,7 +35,7 @@ public String getBirthMonthText(<b>YearMonthDay</b> dateOfBirth) {
   return dateOfBirth.monthOfYear().getAsText(Locale.ENGLISH);
 }
 </source>
-Version 1.2 was released on 2005-12-21 -
+Version 1.2.1 was released on 2006-02-12 -
 <a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=104212">Download now</a>
 </p>
 </section>
@@ -105,7 +105,7 @@ Various documentation is available:
 
 <section name="Releases">
 <p>
-<a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=104212">Release 1.2</a>
+<a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=104212">Release 1.2.1</a>
 is the current latest release.
 This release is considered stable and worthy of the 1.x tag.
 It has extensive testing suites and has been used in production.

From ed2739f7bceddb2f333ca570306f3b983e7b7efb Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Tue, 28 Feb 2006 05:10:35 +0000
Subject: [PATCH 037/115] Added upgrade info for version 1.2.1.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1034 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/installation.xml |  5 ++-
 JodaTime/xdocs/upgradeto121.xml | 76 +++++++++++++++++++++++++++++++++
 2 files changed, 79 insertions(+), 2 deletions(-)
 create mode 100644 JodaTime/xdocs/upgradeto121.xml

diff --git a/JodaTime/xdocs/installation.xml b/JodaTime/xdocs/installation.xml
index 14f533d32..74f178092 100644
--- a/JodaTime/xdocs/installation.xml
+++ b/JodaTime/xdocs/installation.xml
@@ -12,16 +12,17 @@
 <p>
 To use Joda-Time you need to
 <a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=104212">download the latest version</a>.
-The download will contain the joda-time-1.2.jar.
+The download will contain the joda-time-1.2.1.jar.
 Once you add this to your classpath you will be able to use Joda-Time.
 </p>
 <p>
-The binary download also includes joda-time-1.2-src-ide.zip, which is a zip file
+The binary download also includes joda-time-1.2.1-src-ide.zip, which is a zip file
 of the source code suitable for linking to the jar file in IDEs such as Eclipse.
 </p>
 <p>
 The release notes for upgraders can be found here:
 <ul>
+<li><a href="upgradeto121.html">Version 1.2 to Version 1.2.1</a></li>
 <li><a href="upgradeto120.html">Version 1.1 to Version 1.2</a></li>
 <li><a href="upgradeto110.html">Version 1.0 to Version 1.1</a></li>
 <li><a href="upgradeto100.html">Version 0.99 to Version 1.0</a></li>
diff --git a/JodaTime/xdocs/upgradeto121.xml b/JodaTime/xdocs/upgradeto121.xml
new file mode 100644
index 000000000..3e423cb62
--- /dev/null
+++ b/JodaTime/xdocs/upgradeto121.xml
@@ -0,0 +1,76 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+
+<document>
+ <properties>
+  <title>Java date and time API - Upgrade from 1.1 to 1.2</title>
+  <author email="scolebourne@joda.org">Stephen Colebourne</author>
+ </properties>
+
+<body>
+
+<section name="Upgrade">
+<p>
+These are the release notes and advice for upgrading Joda-Time from
+version 1.1 to version 1.2.
+<source>
+Joda-Time version 1.2.1
+-----------------------
+
+Joda-Time is a date and time handling library that seeks to replace the JDK
+Date and Calendar classes.
+
+This is a patch release for Joda-Time 1.2.
+This release only contains bug fixes.
+We recommend all users of 1.2 upgrade to 1.2.1.
+
+We recommend JDK 1.3 or later, and have performed no testing on earlier JDKs.
+
+Joda-Time is licensed under the business-friendly Apache License Version 2.
+This is the same license as all of Apache, plus other open source projects such as Spring.
+The intent is to make the code available to the Java community with the minimum
+of restrictions. If the license causes you problems please contact the mailing list.
+
+** Please also check out the JSP and Hibernate contributed projects **
+
+
+Incompatible changes since 1.2
+------------------------------
+Binary compatible - Yes
+
+Source compatible - Yes
+  - A bug fix has changed the effect of some toXxx() methods if you use time zones
+
+Serialization compatible - Yes
+
+Data compatible - Yes
+  - DateTimeZone data updated to version 2006a
+
+
+Deprecations since 1.2
+----------------------
+- None
+
+
+Bug fixes since 1.2
+-------------------
+- DateTime/DateMidnight/MutableDateTime/AbstractInstant
+   Conversion methods toDateTime, toDateTimeISO, toMutableDateTime, and
+    toMutableDateTimeISO now preserve the time zone.
+    Previously calling any of these four methods would convert the result to
+    the default time zone. This was incorrect.
+    The methods have been changed to preserve the time zone.
+   The similarly named methods on Instant have not changed behaviour.
+
+- DateTimeFormatterBuilder.MatchingParser
+   Previously didn't estimate parsed length correctly
+
+
+Enhancements since 1.2
+----------------------
+- None
+</source>
+</p>
+</section>
+
+</body>
+</document>

From b825726c39ae4f672ed823f2fe11a023ba5d3618 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Tue, 28 Feb 2006 05:11:22 +0000
Subject: [PATCH 038/115] Fixed text.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1035 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/upgradeto121.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/JodaTime/xdocs/upgradeto121.xml b/JodaTime/xdocs/upgradeto121.xml
index 3e423cb62..ff91ffeba 100644
--- a/JodaTime/xdocs/upgradeto121.xml
+++ b/JodaTime/xdocs/upgradeto121.xml
@@ -11,7 +11,7 @@
 <section name="Upgrade">
 <p>
 These are the release notes and advice for upgrading Joda-Time from
-version 1.1 to version 1.2.
+version 1.2 to version 1.2.1.
 <source>
 Joda-Time version 1.2.1
 -----------------------

From baa2e5fb68cd86cfb2349aa26ac2046c3f62e98c Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Tue, 28 Feb 2006 05:12:08 +0000
Subject: [PATCH 039/115] More fixes, ugh.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1036 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/upgradeto121.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/JodaTime/xdocs/upgradeto121.xml b/JodaTime/xdocs/upgradeto121.xml
index ff91ffeba..0622e1e90 100644
--- a/JodaTime/xdocs/upgradeto121.xml
+++ b/JodaTime/xdocs/upgradeto121.xml
@@ -2,7 +2,7 @@
 
 <document>
  <properties>
-  <title>Java date and time API - Upgrade from 1.1 to 1.2</title>
+  <title>Java date and time API - Upgrade from 1.2 to 1.2.1</title>
   <author email="scolebourne@joda.org">Stephen Colebourne</author>
  </properties>
 

From e3f674899d49c0f01460a18712cc16005d624e18 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Thu, 2 Mar 2006 16:13:53 +0000
Subject: [PATCH 040/115] Fixed documentation errors

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1037 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../java/org/joda/time/chrono/IslamicChronology.java   | 10 +++++-----
 1 file changed, 5 insertions(+), 5 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java b/JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java
index b5f916d8e..eab150ee7 100644
--- a/JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java
@@ -141,7 +141,7 @@
     /** Cache of zone to chronology arrays */
     private static final Map cCache = new HashMap();
 
-    /** Singleton instance of a UTC CopticChronology */
+    /** Singleton instance of a UTC IslamicChronology */
     private static final IslamicChronology INSTANCE_UTC;
     static {
         // init after static fields
@@ -153,7 +153,7 @@
 
     //-----------------------------------------------------------------------
     /**
-     * Gets an instance of the CopticChronology.
+     * Gets an instance of the IslamicChronology.
      * The time zone of the returned instance is UTC.
      * 
      * @return a singleton UTC instance of the chronology
@@ -163,7 +163,7 @@ public static IslamicChronology getInstanceUTC() {
     }
 
     /**
-     * Gets an instance of the CopticChronology in the default time zone.
+     * Gets an instance of the IslamicChronology in the default time zone.
      * 
      * @return a chronology in the default time zone
      */
@@ -172,7 +172,7 @@ public static IslamicChronology getInstance() {
     }
 
     /**
-     * Gets an instance of the CopticChronology in the given time zone.
+     * Gets an instance of the IslamicChronology in the given time zone.
      * 
      * @param zone  the time zone to get the chronology in, null is default
      * @return a chronology in the specified time zone
@@ -182,7 +182,7 @@ public static IslamicChronology getInstance(DateTimeZone zone) {
     }
 
     /**
-     * Gets an instance of the CopticChronology in the given time zone.
+     * Gets an instance of the IslamicChronology in the given time zone.
      * 
      * @param zone  the time zone to get the chronology in, null is default
      * @param leapYears  the type defining the leap year pattern

From 721585d047b4cb31d0da2eadcdcc1e8d10f31578 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Thu, 2 Mar 2006 16:32:11 +0000
Subject: [PATCH 041/115] Restored YearInfo cache to 1024. Was 1.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1038 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/chrono/BasicChronology.java | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/JodaTime/src/java/org/joda/time/chrono/BasicChronology.java b/JodaTime/src/java/org/joda/time/chrono/BasicChronology.java
index 3e0e82ab1..9d6195b44 100644
--- a/JodaTime/src/java/org/joda/time/chrono/BasicChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/BasicChronology.java
@@ -120,7 +120,7 @@
         cHalfdayOfDayField = new HalfdayField();
     }
 
-    private static final int CACHE_SIZE = 1;
+    private static final int CACHE_SIZE = 1 << 10;
     private static final int CACHE_MASK = CACHE_SIZE - 1;
 
     private transient final YearInfo[] iYearInfoCache = new YearInfo[CACHE_SIZE];

From 9aadef0b6cc8e3a2c591a22f59b55520b733f01b Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Tue, 7 Mar 2006 04:15:36 +0000
Subject: [PATCH 042/115] Delete .cvsignore files.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1039 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/.cvsignore        | 15 ---------------
 JodaTimeContrib/.cvsignore |  4 ----
 2 files changed, 19 deletions(-)
 delete mode 100644 JodaTime/.cvsignore
 delete mode 100644 JodaTimeContrib/.cvsignore

diff --git a/JodaTime/.cvsignore b/JodaTime/.cvsignore
deleted file mode 100644
index ab626be16..000000000
--- a/JodaTime/.cvsignore
+++ /dev/null
@@ -1,15 +0,0 @@
-.classpath
-.project
-target
-bin
-build.properties
-velocity.log
-maven.log
-jcoverage.ser
-build
-junit*.properties
-lib
-.dj*
-release
-.settings
-*.ser
diff --git a/JodaTimeContrib/.cvsignore b/JodaTimeContrib/.cvsignore
deleted file mode 100644
index a348feba8..000000000
--- a/JodaTimeContrib/.cvsignore
+++ /dev/null
@@ -1,4 +0,0 @@
-bin
-.classpath
-.project
-target

From 82300eab0b4133d5c602552df24e54eaade48a57 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Tue, 7 Mar 2006 04:24:47 +0000
Subject: [PATCH 043/115] Deleted CVSROOT.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1040 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 CVSROOT/checkoutlist | 13 -------------
 CVSROOT/commitinfo   | 15 ---------------
 CVSROOT/config       | 14 --------------
 CVSROOT/cvswrappers  | 23 -----------------------
 CVSROOT/editinfo     | 21 ---------------------
 CVSROOT/loginfo      | 27 ---------------------------
 CVSROOT/modules      | 26 --------------------------
 CVSROOT/notify       | 12 ------------
 CVSROOT/rcsinfo      | 13 -------------
 CVSROOT/taginfo      | 20 --------------------
 CVSROOT/verifymsg    | 21 ---------------------
 11 files changed, 205 deletions(-)
 delete mode 100644 CVSROOT/checkoutlist
 delete mode 100644 CVSROOT/commitinfo
 delete mode 100644 CVSROOT/config
 delete mode 100644 CVSROOT/cvswrappers
 delete mode 100644 CVSROOT/editinfo
 delete mode 100644 CVSROOT/loginfo
 delete mode 100644 CVSROOT/modules
 delete mode 100644 CVSROOT/notify
 delete mode 100644 CVSROOT/rcsinfo
 delete mode 100644 CVSROOT/taginfo
 delete mode 100644 CVSROOT/verifymsg

diff --git a/CVSROOT/checkoutlist b/CVSROOT/checkoutlist
deleted file mode 100644
index b04b3501f..000000000
--- a/CVSROOT/checkoutlist
+++ /dev/null
@@ -1,13 +0,0 @@
-# The "checkoutlist" file is used to support additional version controlled
-# administrative files in $CVSROOT/CVSROOT, such as template files.
-#
-# The first entry on a line is a filename which will be checked out from
-# the corresponding RCS file in the $CVSROOT/CVSROOT directory.
-# The remainder of the line is an error message to use if the file cannot
-# be checked out.
-#
-# File format:
-#
-#	[<whitespace>]<filename><whitespace><error message><end-of-line>
-#
-# comment lines begin with '#'
diff --git a/CVSROOT/commitinfo b/CVSROOT/commitinfo
deleted file mode 100644
index b19e7b7a6..000000000
--- a/CVSROOT/commitinfo
+++ /dev/null
@@ -1,15 +0,0 @@
-# The "commitinfo" file is used to control pre-commit checks.
-# The filter on the right is invoked with the repository and a list 
-# of files to check.  A non-zero exit of the filter program will 
-# cause the commit to be aborted.
-#
-# The first entry on a line is a regular expression which is tested
-# against the directory that the change is being committed to, relative
-# to the $CVSROOT.  For the first match that is found, then the remainder
-# of the line is the name of the filter to run.
-#
-# If the repository name does not match any of the regular expressions in this
-# file, the "DEFAULT" line is used, if it is specified.
-#
-# If the name "ALL" appears as a regular expression it is always used
-# in addition to the first matching regex or "DEFAULT".
diff --git a/CVSROOT/config b/CVSROOT/config
deleted file mode 100644
index ff43ec005..000000000
--- a/CVSROOT/config
+++ /dev/null
@@ -1,14 +0,0 @@
-# Set this to "no" if pserver shouldn't check system users/passwords
-#SystemAuth=no
-
-# Put CVS lock files in this directory rather than directly in the repository.
-#LockDir=/var/lock/cvs
-
-# Set `TopLevelAdmin' to `yes' to create a CVS directory at the top
-# level of the new working directory when using the `cvs checkout'
-# command.
-#TopLevelAdmin=no
-
-# Set `LogHistory' to `all' or `TOFEWGCMAR' to log all transactions to the
-# history file, or a subset as needed (ie `TMAR' logs all write operations)
-#LogHistory=TOFEWGCMAR
diff --git a/CVSROOT/cvswrappers b/CVSROOT/cvswrappers
deleted file mode 100644
index 0accaf1b1..000000000
--- a/CVSROOT/cvswrappers
+++ /dev/null
@@ -1,23 +0,0 @@
-# This file affects handling of files based on their names.
-#
-# The -t/-f options allow one to treat directories of files
-# as a single file, or to transform a file in other ways on
-# its way in and out of CVS.
-#
-# The -m option specifies whether CVS attempts to merge files.
-#
-# The -k option specifies keyword expansion (e.g. -kb for binary).
-#
-# Format of wrapper file ($CVSROOT/CVSROOT/cvswrappers or .cvswrappers)
-#
-#  wildcard	[option value][option value]...
-#
-#  where option is one of
-#  -f		from cvs filter		value: path to filter
-#  -t		to cvs filter		value: path to filter
-#  -m		update methodology	value: MERGE or COPY
-#  -k		expansion mode		value: b, o, kkv, &c
-#
-#  and value is a single-quote delimited value.
-# For example:
-#*.gif -k 'b'
diff --git a/CVSROOT/editinfo b/CVSROOT/editinfo
deleted file mode 100644
index d78886c15..000000000
--- a/CVSROOT/editinfo
+++ /dev/null
@@ -1,21 +0,0 @@
-# The "editinfo" file is used to allow verification of logging
-# information.  It works best when a template (as specified in the
-# rcsinfo file) is provided for the logging procedure.  Given a
-# template with locations for, a bug-id number, a list of people who
-# reviewed the code before it can be checked in, and an external
-# process to catalog the differences that were code reviewed, the
-# following test can be applied to the code:
-#
-#   Making sure that the entered bug-id number is correct.
-#   Validating that the code that was reviewed is indeed the code being
-#       checked in (using the bug-id number or a seperate review
-#       number to identify this particular code set.).
-#
-# If any of the above test failed, then the commit would be aborted.
-#
-# Actions such as mailing a copy of the report to each reviewer are
-# better handled by an entry in the loginfo file.
-#
-# One thing that should be noted is the the ALL keyword is not
-# supported.  There can be only one entry that matches a given
-# repository.
diff --git a/CVSROOT/loginfo b/CVSROOT/loginfo
deleted file mode 100644
index d5619fc23..000000000
--- a/CVSROOT/loginfo
+++ /dev/null
@@ -1,27 +0,0 @@
-# The "loginfo" file controls where "cvs commit" log information
-# is sent.  The first entry on a line is a regular expression which must match
-# the directory that the change is being made to, relative to the
-# $CVSROOT.  If a match is found, then the remainder of the line is a filter
-# program that should expect log information on its standard input.
-#
-# If the repository name does not match any of the regular expressions in this
-# file, the "DEFAULT" line is used, if it is specified.
-#
-# If the name ALL appears as a regular expression it is always used
-# in addition to the first matching regex or DEFAULT.
-#
-# You may specify a format string as part of the
-# filter.  The string is composed of a `%' followed
-# by a single format character, or followed by a set of format
-# characters surrounded by `{' and `}' as separators.  The format
-# characters are:
-#
-#   s = file name
-#   V = old version number (pre-checkin)
-#   v = new version number (post-checkin)
-#
-# For example:
-#DEFAULT (echo ""; id; echo %s; date; cat) >> $CVSROOT/CVSROOT/commitlog
-# or
-#DEFAULT (echo ""; id; echo %{sVv}; date; cat) >> $CVSROOT/CVSROOT/commitlog
-DEFAULT /cvsroot/sitedocs/CVSROOT/cvstools/syncmail %{sVv} joda-time-cvs@lists.sourceforge.net
diff --git a/CVSROOT/modules b/CVSROOT/modules
deleted file mode 100644
index cb9e9efc9..000000000
--- a/CVSROOT/modules
+++ /dev/null
@@ -1,26 +0,0 @@
-# Three different line formats are valid:
-#	key	-a    aliases...
-#	key [options] directory
-#	key [options] directory files...
-#
-# Where "options" are composed of:
-#	-i prog		Run "prog" on "cvs commit" from top-level of module.
-#	-o prog		Run "prog" on "cvs checkout" of module.
-#	-e prog		Run "prog" on "cvs export" of module.
-#	-t prog		Run "prog" on "cvs rtag" of module.
-#	-u prog		Run "prog" on "cvs update" of module.
-#	-d dir		Place module in directory "dir" instead of module name.
-#	-l		Top-level directory only -- do not recurse.
-#
-# NOTE:  If you change any of the "Run" options above, you'll have to
-# release and re-checkout any working directories of these modules.
-#
-# And "directory" is a path to a directory relative to $CVSROOT.
-#
-# The "-a" option specifies an alias.  An alias is interpreted as if
-# everything on the right of the "-a" had been typed on the command line.
-#
-# You can encode a module within a module by using the special '&'
-# character to interpose another module into the current module.  This
-# can be useful for creating a module that consists of many directories
-# spread out over the entire source repository.
diff --git a/CVSROOT/notify b/CVSROOT/notify
deleted file mode 100644
index 34f0bc288..000000000
--- a/CVSROOT/notify
+++ /dev/null
@@ -1,12 +0,0 @@
-# The "notify" file controls where notifications from watches set by
-# "cvs watch add" or "cvs edit" are sent.  The first entry on a line is
-# a regular expression which is tested against the directory that the
-# change is being made to, relative to the $CVSROOT.  If it matches,
-# then the remainder of the line is a filter program that should contain
-# one occurrence of %s for the user to notify, and information on its
-# standard input.
-#
-# "ALL" or "DEFAULT" can be used in place of the regular expression.
-#
-# For example:
-#ALL mail %s -s "CVS notification"
diff --git a/CVSROOT/rcsinfo b/CVSROOT/rcsinfo
deleted file mode 100644
index 49e59f4d0..000000000
--- a/CVSROOT/rcsinfo
+++ /dev/null
@@ -1,13 +0,0 @@
-# The "rcsinfo" file is used to control templates with which the editor
-# is invoked on commit and import.
-#
-# The first entry on a line is a regular expression which is tested
-# against the directory that the change is being made to, relative to the
-# $CVSROOT.  For the first match that is found, then the remainder of the
-# line is the name of the file that contains the template.
-#
-# If the repository name does not match any of the regular expressions in this
-# file, the "DEFAULT" line is used, if it is specified.
-#
-# If the name "ALL" appears as a regular expression it is always used
-# in addition to the first matching regex or "DEFAULT".
diff --git a/CVSROOT/taginfo b/CVSROOT/taginfo
deleted file mode 100644
index 274a46dd5..000000000
--- a/CVSROOT/taginfo
+++ /dev/null
@@ -1,20 +0,0 @@
-# The "taginfo" file is used to control pre-tag checks.
-# The filter on the right is invoked with the following arguments:
-#
-# $1 -- tagname
-# $2 -- operation "add" for tag, "mov" for tag -F, and "del" for tag -d
-# $3 -- repository
-# $4->  file revision [file revision ...]
-#
-# A non-zero exit of the filter program will cause the tag to be aborted.
-#
-# The first entry on a line is a regular expression which is tested
-# against the directory that the change is being committed to, relative
-# to the $CVSROOT.  For the first match that is found, then the remainder
-# of the line is the name of the filter to run.
-#
-# If the repository name does not match any of the regular expressions in this
-# file, the "DEFAULT" line is used, if it is specified.
-#
-# If the name "ALL" appears as a regular expression it is always used
-# in addition to the first matching regex or "DEFAULT".
diff --git a/CVSROOT/verifymsg b/CVSROOT/verifymsg
deleted file mode 100644
index 86f747ce2..000000000
--- a/CVSROOT/verifymsg
+++ /dev/null
@@ -1,21 +0,0 @@
-# The "verifymsg" file is used to allow verification of logging
-# information.  It works best when a template (as specified in the
-# rcsinfo file) is provided for the logging procedure.  Given a
-# template with locations for, a bug-id number, a list of people who
-# reviewed the code before it can be checked in, and an external
-# process to catalog the differences that were code reviewed, the
-# following test can be applied to the code:
-#
-#   Making sure that the entered bug-id number is correct.
-#   Validating that the code that was reviewed is indeed the code being
-#       checked in (using the bug-id number or a seperate review
-#       number to identify this particular code set.).
-#
-# If any of the above test failed, then the commit would be aborted.
-#
-# Actions such as mailing a copy of the report to each reviewer are
-# better handled by an entry in the loginfo file.
-#
-# One thing that should be noted is the the ALL keyword is not
-# supported.  There can be only one entry that matches a given
-# repository.

From fef3c102dae5e167aa9305c6e68c3b7494230937 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Tue, 7 Mar 2006 04:44:53 +0000
Subject: [PATCH 044/115] Updated links to point to Subversion instead of CVS.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1041 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/project.xml          | 6 ++++--
 JodaTime/xdocs/index.xml      | 4 ++--
 JodaTime/xdocs/navigation.xml | 4 ++--
 3 files changed, 8 insertions(+), 6 deletions(-)

diff --git a/JodaTime/project.xml b/JodaTime/project.xml
index 77e625538..9607c09cf 100644
--- a/JodaTime/project.xml
+++ b/JodaTime/project.xml
@@ -40,8 +40,10 @@
   <distributionDirectory>home/groups/j/jo/joda-time/htdocs/repository</distributionDirectory>
   
   <repository>
-    <connection>scm:cvs:pserver:anonymous@cvs.sourceforge.net:/cvsroot/joda-time:JodaTime</connection>
-    <url>http://cvs.sourceforge.net/viewcvs.py/joda-time/JodaTime/</url>
+    <!-- Does not appear to be supported in Maven-1.x
+    <connection>scm:svn:http://svn.sourceforge.net/viewcvs.cgi/joda-time/trunk</connection>
+    -->
+    <url>http://svn.sourceforge.net/viewcvs.cgi/joda-time/trunk/JodaTime/</url>
   </repository>
 
   <licenses>
diff --git a/JodaTime/xdocs/index.xml b/JodaTime/xdocs/index.xml
index 98a59e0a2..431cb9522 100644
--- a/JodaTime/xdocs/index.xml
+++ b/JodaTime/xdocs/index.xml
@@ -95,10 +95,10 @@ Various documentation is available:
 <li>Two user guides - <a href="quickstart.html">quick</a> and <a href="userguide.html">full</a></li>
 <li>The key concepts and chronology documents in the left navigation area</li>
 <li>The javadoc for the <a href="api-release/index.html">current release</a></li>
-<li>The javadoc for the <a href="apidocs/index.html">latest CVS</a></li>
+<li>The javadoc for the <a href="apidocs/index.html">latest in development</a></li>
 <li>A <a href="faq.html">FAQ</a> list</li>
 <li>Information on <a href="installation.html">downloading and installing</a> Joda-Time</li>
-<li>The <a href="http://cvs.sourceforge.net/viewcvs.py/joda-time/JodaTime">CVS repository</a></li>
+<li>The <a href="http://svn.sourceforge.net/viewcvs.cgi/joda-time/trunk/JodaTime/">Subversion repository</a></li>
 </ul>
 </p>
 </section>
diff --git a/JodaTime/xdocs/navigation.xml b/JodaTime/xdocs/navigation.xml
index cb0be0335..6d5ff9523 100644
--- a/JodaTime/xdocs/navigation.xml
+++ b/JodaTime/xdocs/navigation.xml
@@ -48,8 +48,8 @@
       <item name="Test coverage" href="/cobertura/index.html"/>
       <item name="Mailing lists" href="/mail-lists.html"/>
       <item name="Tasks" href="/tasks.html"/>
-      <item name="CVS" href="http://cvs.sourceforge.net/viewcvs.py/joda-time/JodaTime/"/>
-      <item name="Javadoc (CVS)" href="/apidocs/index.html"/>
+      <item name="Subversion" href="http://svn.sourceforge.net/viewcvs.cgi/joda-time/trunk/JodaTime/"/>
+      <item name="Javadoc (Development)" href="/apidocs/index.html"/>
     </menu>
     
     <menu name="Joda">

From ceda399842479557b536b01dd06a0001296c67b4 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Tue, 7 Mar 2006 05:05:55 +0000
Subject: [PATCH 045/115] Updated links to point to Subversion instead of CVS.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1042 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/hibernate/project.xml          | 6 ++++--
 JodaTimeContrib/hibernate/xdocs/index.xml      | 4 ++--
 JodaTimeContrib/hibernate/xdocs/navigation.xml | 4 ++--
 3 files changed, 8 insertions(+), 6 deletions(-)

diff --git a/JodaTimeContrib/hibernate/project.xml b/JodaTimeContrib/hibernate/project.xml
index 15daddcce..e18f0c94e 100644
--- a/JodaTimeContrib/hibernate/project.xml
+++ b/JodaTimeContrib/hibernate/project.xml
@@ -43,8 +43,10 @@
   </organization>
 
   <repository>
-    <connection>scm:cvs:pserver:anonymous@cvs.sourceforge.net:/cvsroot/joda-time:JodaTimeContrib/hibernate</connection>
-    <url>http://cvs.sourceforge.net/viewcvs.py/joda-time/JodaTimeContrib/hibernate/</url>
+    <!-- Does not appear to be supported in Maven-1.x
+    <connection>scm:svn:http://svn.sourceforge.net/viewcvs.cgi/joda-time/trunk</connection>
+    -->
+    <url>http://svn.sourceforge.net/viewcvs.cgi/joda-time/trunk/JodaTimeContrib/hibernate/</url>
   </repository>
 
   <versions>
diff --git a/JodaTimeContrib/hibernate/xdocs/index.xml b/JodaTimeContrib/hibernate/xdocs/index.xml
index e7e84bd23..04b82d6f3 100644
--- a/JodaTimeContrib/hibernate/xdocs/index.xml
+++ b/JodaTimeContrib/hibernate/xdocs/index.xml
@@ -39,9 +39,9 @@ Various documentation is available:
 <ul>
 <!--<li>The user guide - <a href="userguide.html">user guide</a></li>-->
 <li>The javadoc for the <a href="api-release/index.html">current release</a></li>
-<li>The javadoc for the <a href="apidocs/index.html">latest CVS</a></li>
+<li>The javadoc for the <a href="apidocs/index.html">latest in development</a></li>
 <!--li>A <a href="faq.html">FAQ</a> list</li-->
-<li>The <a href="http://cvs.sourceforge.net/viewcvs.py/joda-time/JodaTimeContrib/hibernate">CVS repository</a></li>
+<li>The <a href="http://svn.sourceforge.net/viewcvs.cgi/joda-time/trunk/JodaTimeContrib/hibernate/">Subversion repository</a></li>
 </ul>
 </p>
 </section>
diff --git a/JodaTimeContrib/hibernate/xdocs/navigation.xml b/JodaTimeContrib/hibernate/xdocs/navigation.xml
index cf6d629d2..d87b96e4f 100644
--- a/JodaTimeContrib/hibernate/xdocs/navigation.xml
+++ b/JodaTimeContrib/hibernate/xdocs/navigation.xml
@@ -23,8 +23,8 @@
       <item name="Sourceforge" href="http://sourceforge.net/projects/joda-time/"/>
       <item name="Mailing lists" href="mail-lists.html"/>
       <item name="Tasks" href="tasks.html"/>
-      <item name="CVS" href="http://cvs.sourceforge.net/viewcvs.py/joda-time/JodaTimeContrib/hibernate/"/>
-      <item name="Javadoc (CVS)" href="apidocs/index.html"/>
+      <item name="Subversion" href="http://svn.sourceforge.net/viewcvs.cgi/joda-time/trunk/JodaTimeContrib/hibernate/"/>
+      <item name="Javadoc (Development)" href="apidocs/index.html"/>
     </menu>
 
     <menu name="Joda">

From 3bfd84034d3ad3910104f80d0b5face691a95e6f Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Tue, 7 Mar 2006 05:06:31 +0000
Subject: [PATCH 046/115] Updated links to point to Subversion instead of CVS.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1043 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/jsptags/project.xml          | 6 ++++--
 JodaTimeContrib/jsptags/xdocs/index.xml      | 4 ++--
 JodaTimeContrib/jsptags/xdocs/navigation.xml | 4 ++--
 3 files changed, 8 insertions(+), 6 deletions(-)

diff --git a/JodaTimeContrib/jsptags/project.xml b/JodaTimeContrib/jsptags/project.xml
index 7ded1f388..cb77fdf86 100644
--- a/JodaTimeContrib/jsptags/project.xml
+++ b/JodaTimeContrib/jsptags/project.xml
@@ -43,8 +43,10 @@
   </organization>
 
   <repository>
-    <connection>scm:cvs:pserver:anonymous@cvs.sourceforge.net:/cvsroot/joda-time:JodaTimeContrib/jsptags</connection>
-    <url>http://cvs.sourceforge.net/viewcvs.py/joda-time/JodaTimeContrib/jsptags/</url>
+    <!-- Does not appear to be supported in Maven-1.x
+    <connection>scm:svn:http://svn.sourceforge.net/viewcvs.cgi/joda-time/trunk</connection>
+    -->
+    <url>http://svn.sourceforge.net/viewcvs.cgi/joda-time/trunk/JodaTimeContrib/jsptags/</url>
   </repository>
 
   <versions>
diff --git a/JodaTimeContrib/jsptags/xdocs/index.xml b/JodaTimeContrib/jsptags/xdocs/index.xml
index b4990fa2d..d5e43ae28 100644
--- a/JodaTimeContrib/jsptags/xdocs/index.xml
+++ b/JodaTimeContrib/jsptags/xdocs/index.xml
@@ -40,9 +40,9 @@ Various documentation is available:
 <ul>
 <li>The user guide and tag description - <a href="userguide.html">user guide</a></li>
 <li>The javadoc for the <a href="api-release/index.html">current release</a></li>
-<li>The javadoc for the <a href="apidocs/index.html">latest CVS</a></li>
+<li>The javadoc for the <a href="apidocs/index.html">latest in development</a></li>
 <!--li>A <a href="faq.html">FAQ</a> list</li-->
-<li>The <a href="http://cvs.sourceforge.net/viewcvs.py/joda-time/JodaTimeContrib/jsptags">CVS repository</a></li>
+<li>The <a href="http://svn.sourceforge.net/viewcvs.cgi/joda-time/trunk/JodaTimeContrib/jsptags/">Subversion repository</a></li>
 </ul>
 </p>
 </section>
diff --git a/JodaTimeContrib/jsptags/xdocs/navigation.xml b/JodaTimeContrib/jsptags/xdocs/navigation.xml
index b0ad64ad1..94b3e1615 100644
--- a/JodaTimeContrib/jsptags/xdocs/navigation.xml
+++ b/JodaTimeContrib/jsptags/xdocs/navigation.xml
@@ -23,8 +23,8 @@
       <item name="Sourceforge" href="http://sourceforge.net/projects/joda-time/"/>
       <item name="Mailing lists" href="mail-lists.html"/>
       <item name="Tasks" href="tasks.html"/>
-      <item name="CVS" href="http://cvs.sourceforge.net/viewcvs.py/joda-time/JodaTimeContrib/jsptags/"/>
-      <item name="Javadoc (CVS)" href="apidocs/index.html"/>
+      <item name="Subversion" href="http://svn.sourceforge.net/viewcvs.cgi/joda-time/trunk/JodaTimeContrib/jsptags/"/>
+      <item name="Javadoc (Development)" href="apidocs/index.html"/>
     </menu>
 
     <menu name="Joda">

From 6d8cacbf6ba1c85c45b04c109022ed8343dde6a4 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 11 Mar 2006 00:26:15 +0000
Subject: [PATCH 047/115] Handle LocalDate era field

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1044 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/LocalDate.java           | 9 ++++++++-
 JodaTime/src/test/org/joda/time/TestAll.java             | 2 +-
 .../src/test/org/joda/time/TestLocalDate_Basics.java     | 2 +-
 3 files changed, 10 insertions(+), 3 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/LocalDate.java b/JodaTime/src/java/org/joda/time/LocalDate.java
index 422b3e0ef..03c19b41d 100644
--- a/JodaTime/src/java/org/joda/time/LocalDate.java
+++ b/JodaTime/src/java/org/joda/time/LocalDate.java
@@ -96,6 +96,7 @@
         DATE_DURATION_TYPES.add(DurationFieldType.weekyears());
         DATE_DURATION_TYPES.add(DurationFieldType.years());
         DATE_DURATION_TYPES.add(DurationFieldType.centuries());
+        // eras are supported, although the DurationField generally isn't
         DATE_DURATION_TYPES.add(DurationFieldType.eras());
     }
 
@@ -437,7 +438,13 @@ public boolean isSupported(DateTimeFieldType type) {
         if (type == null) {
             return false;
         }
-        return isSupported(type.getDurationType());
+        DurationFieldType durType = type.getDurationType();
+        if (DATE_DURATION_TYPES.contains(durType) ||
+                durType.getField(getChronology()).getUnitMillis() >=
+                    getChronology().days().getUnitMillis()) {
+            return type.getField(getChronology()).isSupported();
+        }
+        return false;
     }
 
     /**
diff --git a/JodaTime/src/test/org/joda/time/TestAll.java b/JodaTime/src/test/org/joda/time/TestAll.java
index 235bc6109..947b76bf2 100644
--- a/JodaTime/src/test/org/joda/time/TestAll.java
+++ b/JodaTime/src/test/org/joda/time/TestAll.java
@@ -65,7 +65,7 @@ public static Test suite() {
         suite.addTest(TestLocalTime_Constructors.suite());
         suite.addTest(TestLocalTime_Properties.suite());
         
-//        suite.addTest(TestLocalDate_Basics.suite());
+        suite.addTest(TestLocalDate_Basics.suite());
         
         suite.addTest(TestMutableInterval_Constructors.suite());
         suite.addTest(TestMutableInterval_Basics.suite());
diff --git a/JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java b/JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java
index 77aad52c0..8ce1e1a7c 100644
--- a/JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java
@@ -209,7 +209,7 @@ public void testIsSupported_DateTimeFieldType() {
 
     public void testIsSupported_DurationFieldType() {
         LocalDate test = new LocalDate(1970, 6, 9);
-        assertEquals(true, test.isSupported(DurationFieldType.eras()));
+        assertEquals(false, test.isSupported(DurationFieldType.eras()));
         assertEquals(true, test.isSupported(DurationFieldType.centuries()));
         assertEquals(true, test.isSupported(DurationFieldType.years()));
         assertEquals(true, test.isSupported(DurationFieldType.months()));

From 7d5d0a3b57123abe30f23326a93dfdf13fcdf1e5 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 14 Mar 2006 20:53:05 +0000
Subject: [PATCH 048/115] Fix Interval.overlaps when comparing against empty
 interval

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1045 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  4 +++
 .../org/joda/time/base/AbstractInterval.java  |  7 +++--
 .../org/joda/time/TestInterval_Basics.java    | 28 ++++++++++++++++++-
 .../joda/time/TestMutableInterval_Basics.java | 21 +++++++++++++-
 4 files changed, 56 insertions(+), 4 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index c9b1b0673..fa70da352 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -47,6 +47,10 @@ Bug fixes since 1.2
     The methods have been changed to preserve the time zone.
    The similarly named methods on Instant have not changed behaviour.
 
+- Interval/MutableInterval.overlaps(ReadableInterval)
+  Previously, this method didn't handle empty intervals correctly
+  Now, an empty interval at the start of a larger interval does overlap
+
 - DateTimeFormatterBuilder.MatchingParser
   Previously didn't estimate parsed length correctly
 
diff --git a/JodaTime/src/java/org/joda/time/base/AbstractInterval.java b/JodaTime/src/java/org/joda/time/base/AbstractInterval.java
index fc2a5d2c2..cb503bf01 100644
--- a/JodaTime/src/java/org/joda/time/base/AbstractInterval.java
+++ b/JodaTime/src/java/org/joda/time/base/AbstractInterval.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2006 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -161,7 +161,10 @@ public boolean overlaps(ReadableInterval interval) {
         long otherEnd = interval.getEndMillis();
         long thisStart = getStartMillis();
         long thisEnd = getEndMillis();
-        return (thisStart < otherEnd && otherStart < thisEnd);
+        
+        return (thisStart < otherEnd && otherStart < thisEnd) ||
+            (thisStart == otherStart &&
+                    (thisStart == thisEnd || otherStart == otherEnd));
     }
 
     //-----------------------------------------------------------------------
diff --git a/JodaTime/src/test/org/joda/time/TestInterval_Basics.java b/JodaTime/src/test/org/joda/time/TestInterval_Basics.java
index 171cabad4..fbda22fd1 100644
--- a/JodaTime/src/test/org/joda/time/TestInterval_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestInterval_Basics.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2006 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -232,6 +232,13 @@ public void testContains_RI() {
     public void testContains_RInterval() {
         Interval test = new Interval(TEST_TIME1, TEST_TIME2);
         
+        assertEquals(true, test.contains(new Interval(TEST_TIME1, TEST_TIME1)));
+        assertEquals(false, test.contains(new Interval(TEST_TIME1 - 1, TEST_TIME1)));
+        
+        assertEquals(true, test.contains(new Interval(TEST_TIME1, TEST_TIME1 + 1)));
+        assertEquals(false, test.contains(new Interval(TEST_TIME1 - 1, TEST_TIME1 + 1)));
+        assertEquals(true, test.contains(new Interval(TEST_TIME1 + 1, TEST_TIME1 + 1)));
+        
         assertEquals(true, test.contains(new Interval(TEST_TIME1, TEST_TIME2)));
         assertEquals(false, test.contains(new Interval(TEST_TIME1 - 1, TEST_TIME2)));
         assertEquals(true, test.contains(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2)));
@@ -257,6 +264,13 @@ public void testContains_RInterval() {
     public void testOverlaps_RInterval() {
         Interval test = new Interval(TEST_TIME1, TEST_TIME2);
         
+        assertEquals(true, test.overlaps(new Interval(TEST_TIME1, TEST_TIME1)));
+        assertEquals(false, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1)));
+        
+        assertEquals(true, test.overlaps(new Interval(TEST_TIME1, TEST_TIME1 + 1)));
+        assertEquals(true, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1 + 1)));
+        assertEquals(true, test.overlaps(new Interval(TEST_TIME1 + 1, TEST_TIME1 + 1)));
+        
         assertEquals(true, test.overlaps(new Interval(TEST_TIME1, TEST_TIME2)));
         assertEquals(true, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME2)));
         assertEquals(true, test.overlaps(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2)));
@@ -274,12 +288,24 @@ public void testOverlaps_RInterval() {
         assertEquals(true, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1 + 1)));
         
         assertEquals(true, test.overlaps((ReadableInterval) null));
+        
+        Interval empty = new Interval(TEST_TIME1, TEST_TIME1);
+        assertEquals(true, empty.overlaps(empty));
+        assertEquals(true, empty.overlaps(test));
+        assertEquals(true, test.overlaps(empty));
     }
 
     //-----------------------------------------------------------------------
     public void testOverlap_RInterval() {
         Interval test = new Interval(TEST_TIME1, TEST_TIME2);
         
+        assertEquals(
+                new Interval(TEST_TIME1, TEST_TIME1),
+                test.overlap(new Interval(TEST_TIME1, TEST_TIME1)));
+        assertEquals(
+                new Interval(TEST_TIME1, TEST_TIME1),
+                new Interval(TEST_TIME1, TEST_TIME1).overlap(test));
+        
         assertEquals(
                 new Interval(TEST_TIME1, TEST_TIME2),
                 test.overlap(new Interval(TEST_TIME1, TEST_TIME2)));
diff --git a/JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java b/JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java
index 4c6a2f44d..8e0385449 100644
--- a/JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2006 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -231,6 +231,13 @@ public void testContains_RI() {
     public void testContains_RInterval() {
         MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);
         
+        assertEquals(true, test.contains(new Interval(TEST_TIME1, TEST_TIME1)));
+        assertEquals(false, test.contains(new Interval(TEST_TIME1 - 1, TEST_TIME1)));
+        
+        assertEquals(true, test.contains(new Interval(TEST_TIME1, TEST_TIME1 + 1)));
+        assertEquals(false, test.contains(new Interval(TEST_TIME1 - 1, TEST_TIME1 + 1)));
+        assertEquals(true, test.contains(new Interval(TEST_TIME1 + 1, TEST_TIME1 + 1)));
+        
         assertEquals(true, test.contains(new Interval(TEST_TIME1, TEST_TIME2)));
         assertEquals(false, test.contains(new Interval(TEST_TIME1 - 1, TEST_TIME2)));
         assertEquals(true, test.contains(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2)));
@@ -256,6 +263,13 @@ public void testContains_RInterval() {
     public void testOverlaps_RInterval() {
         MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);
         
+        assertEquals(true, test.overlaps(new Interval(TEST_TIME1, TEST_TIME1)));
+        assertEquals(false, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1)));
+        
+        assertEquals(true, test.overlaps(new Interval(TEST_TIME1, TEST_TIME1 + 1)));
+        assertEquals(true, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1 + 1)));
+        assertEquals(true, test.overlaps(new Interval(TEST_TIME1 + 1, TEST_TIME1 + 1)));
+        
         assertEquals(true, test.overlaps(new Interval(TEST_TIME1, TEST_TIME2)));
         assertEquals(true, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME2)));
         assertEquals(true, test.overlaps(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2)));
@@ -273,6 +287,11 @@ public void testOverlaps_RInterval() {
         assertEquals(true, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1 + 1)));
         
         assertEquals(true, test.overlaps((ReadableInterval) null));
+        
+        MutableInterval empty = new MutableInterval(TEST_TIME1, TEST_TIME1);
+        assertEquals(true, empty.overlaps(empty));
+        assertEquals(true, empty.overlaps(test));
+        assertEquals(true, test.overlaps(empty));
     }
 
     //-----------------------------------------------------------------------

From 35f93b064dbb87d813daae1d9aed6d5e63064381 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 17 Mar 2006 22:57:12 +0000
Subject: [PATCH 049/115] Testing of LocalDate

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1046 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/java/org/joda/time/LocalDate.java     |  20 +
 JodaTime/src/test/org/joda/time/TestAll.java  |   7 +-
 .../joda/time/TestLocalDate_Constructors.java | 397 ++++++++++++++++++
 3 files changed, 421 insertions(+), 3 deletions(-)
 create mode 100644 JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java

diff --git a/JodaTime/src/java/org/joda/time/LocalDate.java b/JodaTime/src/java/org/joda/time/LocalDate.java
index 03c19b41d..a3252149f 100644
--- a/JodaTime/src/java/org/joda/time/LocalDate.java
+++ b/JodaTime/src/java/org/joda/time/LocalDate.java
@@ -242,6 +242,26 @@ public static LocalDate forInstant(long instant, Chronology chronology) {
     }
 
     //-----------------------------------------------------------------------
+    /**
+     * Constructs an instance from an Object that represents a datetime.
+     * The time zone will be retrieved from the object if possible,
+     * otherwise the default time zone will be used.
+     * <p>
+     * If the object contains no chronology, <code>ISOChronology</code> is used.
+     * Once the constructor is completed, the zone is no longer used.
+     * <p>
+     * The recognised object types are defined in
+     * {@link org.joda.time.convert.ConverterManager ConverterManager} and
+     * include ReadableInstant, String, Calendar and Date.
+     *
+     * @param instant  the datetime object
+     * @param zone  the time zone
+     * @throws IllegalArgumentException if the instant is invalid
+     */
+    public static LocalDate forInstant(Object instant) {
+        return forInstant(instant, (Chronology) null);
+    }
+
     /**
      * Constructs an instance from an Object that represents a datetime,
      * forcing the time zone to that specified.
diff --git a/JodaTime/src/test/org/joda/time/TestAll.java b/JodaTime/src/test/org/joda/time/TestAll.java
index 947b76bf2..a54ffdaf2 100644
--- a/JodaTime/src/test/org/joda/time/TestAll.java
+++ b/JodaTime/src/test/org/joda/time/TestAll.java
@@ -61,12 +61,13 @@ public static Test suite() {
         suite.addTest(TestInterval_Constructors.suite());
         suite.addTest(TestInterval_Basics.suite());
         
-        suite.addTest(TestLocalTime_Basics.suite());
+        suite.addTest(TestLocalDate_Constructors.suite());
+        suite.addTest(TestLocalDate_Basics.suite());
+        
         suite.addTest(TestLocalTime_Constructors.suite());
+        suite.addTest(TestLocalTime_Basics.suite());
         suite.addTest(TestLocalTime_Properties.suite());
         
-        suite.addTest(TestLocalDate_Basics.suite());
-        
         suite.addTest(TestMutableInterval_Constructors.suite());
         suite.addTest(TestMutableInterval_Basics.suite());
         suite.addTest(TestMutableInterval_Updates.suite());
diff --git a/JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java b/JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java
new file mode 100644
index 000000000..70adf7082
--- /dev/null
+++ b/JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java
@@ -0,0 +1,397 @@
+/*
+ *  Copyright 2001-2006 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time;
+
+import java.util.Calendar;
+import java.util.Date;
+import java.util.GregorianCalendar;
+
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+import org.joda.time.chrono.BuddhistChronology;
+import org.joda.time.chrono.CopticChronology;
+import org.joda.time.chrono.GregorianChronology;
+import org.joda.time.chrono.ISOChronology;
+
+/**
+ * This class is a Junit unit test for LocalDate.
+ *
+ * @author Stephen Colebourne
+ */
+public class TestLocalDate_Constructors extends TestCase {
+
+    private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
+    private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
+    private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();
+    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
+    private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();
+    private static final Chronology GREGORIAN_UTC = GregorianChronology.getInstanceUTC();
+    private static final Chronology GREGORIAN_PARIS = GregorianChronology.getInstance(PARIS);
+    
+    private long TEST_TIME_NOW =
+            (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
+            
+    private long TEST_TIME1 =
+        (31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
+        + 12L * DateTimeConstants.MILLIS_PER_HOUR
+        + 24L * DateTimeConstants.MILLIS_PER_MINUTE;
+        
+    private long TEST_TIME2 =
+        (365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY
+        + 14L * DateTimeConstants.MILLIS_PER_HOUR
+        + 28L * DateTimeConstants.MILLIS_PER_MINUTE;
+        
+    private DateTimeZone zone = null;
+
+    public static void main(String[] args) {
+        junit.textui.TestRunner.run(suite());
+    }
+
+    public static TestSuite suite() {
+        return new TestSuite(TestLocalDate_Constructors.class);
+    }
+
+    public TestLocalDate_Constructors(String name) {
+        super(name);
+    }
+
+    protected void setUp() throws Exception {
+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
+        zone = DateTimeZone.getDefault();
+        DateTimeZone.setDefault(LONDON);
+    }
+
+    protected void tearDown() throws Exception {
+        DateTimeUtils.setCurrentMillisSystem();
+        DateTimeZone.setDefault(zone);
+        zone = null;
+    }
+
+    //-----------------------------------------------------------------------
+    public void testFactory_ForCalendarFields() throws Exception {
+        GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);
+        cal.set(Calendar.MILLISECOND, 7);
+        LocalDate expected = new LocalDate(1970, 2, 3);
+        assertEquals(expected, LocalDate.forFields(cal));
+        try {
+            LocalDate.forFields((Calendar) null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
+    public void testFactory_ForDateFields() throws Exception {
+        GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);
+        cal.set(Calendar.MILLISECOND, 7);
+        LocalDate expected = new LocalDate(1970, 2, 3);
+        assertEquals(expected, LocalDate.forFields(cal.getTime()));
+        try {
+            LocalDate.forFields((Date) null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
+    public void testFactory_nowDefaultZone() throws Throwable {
+        LocalDate test = LocalDate.nowDefaultZone();
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1970, test.getYear());
+        assertEquals(6, test.getMonthOfYear());
+        assertEquals(9, test.getDayOfMonth());
+    }
+
+    public void testFactory_now_DateTimeZone() throws Throwable {
+        DateTime dt = new DateTime(2005, 6, 8, 23, 59, 0, 0, LONDON);
+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());
+        // 23:59 in London is 00:59 the following day in Paris
+        
+        LocalDate test = LocalDate.now(LONDON);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(2005, test.getYear());
+        assertEquals(6, test.getMonthOfYear());
+        assertEquals(8, test.getDayOfMonth());
+        
+        test = LocalDate.now(PARIS);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(2005, test.getYear());
+        assertEquals(6, test.getMonthOfYear());
+        assertEquals(9, test.getDayOfMonth());
+    }
+
+    public void testFactory_now_nullDateTimeZone() throws Throwable {
+        DateTime dt = new DateTime(2005, 6, 8, 23, 59, 0, 0, LONDON);
+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());
+        // 23:59 in London is 00:59 the following day in Paris
+        
+        LocalDate test = LocalDate.now((DateTimeZone) null);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(2005, test.getYear());
+        assertEquals(6, test.getMonthOfYear());
+        assertEquals(8, test.getDayOfMonth());
+    }
+
+    public void testFactory_now_Chronology() throws Throwable {
+        LocalDate test = LocalDate.now(GREGORIAN_PARIS);
+        assertEquals(GREGORIAN_UTC, test.getChronology());
+        assertEquals(1970, test.getYear());
+        assertEquals(6, test.getMonthOfYear());
+        assertEquals(9, test.getDayOfMonth());
+    }
+
+    public void testFactory_now_nullChronology() throws Throwable {
+        LocalDate test = LocalDate.now((Chronology) null);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1970, test.getYear());
+        assertEquals(6, test.getMonthOfYear());
+        assertEquals(9, test.getDayOfMonth());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testFactory_forInstantDefaultZone_long1() throws Throwable {
+        LocalDate test = LocalDate.forInstantDefaultZone(TEST_TIME1);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1970, test.getYear());
+        assertEquals(4, test.getMonthOfYear());
+        assertEquals(6, test.getDayOfMonth());
+    }
+
+    public void testFactory_forInstantDefaultZone_long2() throws Throwable {
+        LocalDate test = LocalDate.forInstantDefaultZone(TEST_TIME2);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1971, test.getYear());
+        assertEquals(5, test.getMonthOfYear());
+        assertEquals(7, test.getDayOfMonth());
+    }
+
+    public void testFactory_forInstant_long1_DateTimeZone() throws Throwable {
+        LocalDate test = LocalDate.forInstant(TEST_TIME1, PARIS);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1970, test.getYear());
+        assertEquals(4, test.getMonthOfYear());
+        assertEquals(6, test.getDayOfMonth());
+    }
+
+    public void testFactory_forInstant_long2_DateTimeZone() throws Throwable {
+        LocalDate test = LocalDate.forInstant(TEST_TIME2, PARIS);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1971, test.getYear());
+        assertEquals(5, test.getMonthOfYear());
+        assertEquals(7, test.getDayOfMonth());
+    }
+
+    public void testFactory_forInstant_long_nullDateTimeZone() throws Throwable {
+        LocalDate test = LocalDate.forInstant(TEST_TIME1, (DateTimeZone) null);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1970, test.getYear());
+        assertEquals(4, test.getMonthOfYear());
+        assertEquals(6, test.getDayOfMonth());
+    }
+
+    public void testFactory_forInstant_long1_Chronology() throws Throwable {
+        LocalDate test = LocalDate.forInstant(TEST_TIME1, GREGORIAN_PARIS);
+        assertEquals(GREGORIAN_UTC, test.getChronology());
+        assertEquals(1970, test.getYear());
+        assertEquals(4, test.getMonthOfYear());
+        assertEquals(6, test.getDayOfMonth());
+    }
+
+    public void testFactory_forInstant_long2_Chronology() throws Throwable {
+        LocalDate test = LocalDate.forInstant(TEST_TIME2, GREGORIAN_PARIS);
+        assertEquals(GREGORIAN_UTC, test.getChronology());
+        assertEquals(1971, test.getYear());
+        assertEquals(5, test.getMonthOfYear());
+        assertEquals(7, test.getDayOfMonth());
+    }
+
+    public void testFactory_forInstant_long_nullChronology() throws Throwable {
+        LocalDate test = LocalDate.forInstant(TEST_TIME1, (Chronology) null);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1970, test.getYear());
+        assertEquals(4, test.getMonthOfYear());
+        assertEquals(6, test.getDayOfMonth());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testFactory_forInstant_Object1() throws Throwable {
+        Date date = new Date(TEST_TIME1);
+        LocalDate test = LocalDate.forInstant(date);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1970, test.getYear());
+        assertEquals(4, test.getMonthOfYear());
+        assertEquals(6, test.getDayOfMonth());
+    }
+
+    public void testFactory_forInstant_nullObject() throws Throwable {
+        LocalDate test = LocalDate.forInstant((Object) null);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1970, test.getYear());
+        assertEquals(6, test.getMonthOfYear());
+        assertEquals(9, test.getDayOfMonth());
+    }
+
+    public void testFactory_forInstant_Object_DateTimeZone() throws Throwable {
+        Date date = new Date(TEST_TIME1);
+        LocalDate test = LocalDate.forInstant(date, PARIS);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1970, test.getYear());
+        assertEquals(4, test.getMonthOfYear());
+        assertEquals(6, test.getDayOfMonth());
+    }
+
+    public void testFactory_forInstant_nullObject_DateTimeZone() throws Throwable {
+        LocalDate test = LocalDate.forInstant((Object) null, PARIS);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1970, test.getYear());
+        assertEquals(6, test.getMonthOfYear());
+        assertEquals(9, test.getDayOfMonth());
+    }
+
+    public void testFactory_Object_nullDateTimeZone() throws Throwable {
+        Date date = new Date(TEST_TIME1);
+        LocalDate test = LocalDate.forInstant(date, (DateTimeZone) null);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1970, test.getYear());
+        assertEquals(4, test.getMonthOfYear());
+        assertEquals(6, test.getDayOfMonth());
+    }
+
+    public void testFactory_nullObject_nullDateTimeZone() throws Throwable {
+        LocalDate test = LocalDate.forInstant((Object) null, (DateTimeZone) null);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1970, test.getYear());
+        assertEquals(6, test.getMonthOfYear());
+        assertEquals(9, test.getDayOfMonth());
+    }
+
+    public void testFactory_forInstant_Object_Chronology() throws Throwable {
+        Date date = new Date(TEST_TIME1);
+        LocalDate test = LocalDate.forInstant(date, GREGORIAN_PARIS);
+        assertEquals(GREGORIAN_UTC, test.getChronology());
+        assertEquals(1970, test.getYear());
+        assertEquals(4, test.getMonthOfYear());
+        assertEquals(6, test.getDayOfMonth());
+    }
+
+    public void testFactory_forInstant_nullObject_Chronology() throws Throwable {
+        LocalDate test = LocalDate.forInstant((Object) null, GREGORIAN_PARIS);
+        assertEquals(GREGORIAN_UTC, test.getChronology());
+        assertEquals(1970, test.getYear());
+        assertEquals(6, test.getMonthOfYear());
+        assertEquals(9, test.getDayOfMonth());
+    }
+
+    public void testFactory_Object_nullChronology() throws Throwable {
+        Date date = new Date(TEST_TIME1);
+        LocalDate test = LocalDate.forInstant(date, (Chronology) null);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1970, test.getYear());
+        assertEquals(4, test.getMonthOfYear());
+        assertEquals(6, test.getDayOfMonth());
+    }
+
+    public void testFactory_nullObject_nullChronology() throws Throwable {
+        LocalDate test = LocalDate.forInstant((Object) null, (Chronology) null);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1970, test.getYear());
+        assertEquals(6, test.getMonthOfYear());
+        assertEquals(9, test.getDayOfMonth());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testConstructor_int_int_int() throws Throwable {
+        LocalDate test = new LocalDate(1970, 6, 9);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1970, test.getYear());
+        assertEquals(6, test.getMonthOfYear());
+        assertEquals(9, test.getDayOfMonth());
+        try {
+            new LocalDate(Integer.MIN_VALUE, 6, 9);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            new LocalDate(Integer.MAX_VALUE, 6, 9);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            new LocalDate(1970, 0, 9);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            new LocalDate(1970, 13, 9);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            new LocalDate(1970, 6, 0);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            new LocalDate(1970, 6, 31);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        new LocalDate(1970, 7, 31);
+        try {
+            new LocalDate(1970, 7, 32);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testConstructor_int_int_int_Chronology() throws Throwable {
+        LocalDate test = new LocalDate(1970, 6, 9, GREGORIAN_PARIS);
+        assertEquals(GREGORIAN_UTC, test.getChronology());
+        assertEquals(1970, test.getYear());
+        assertEquals(6, test.getMonthOfYear());
+        assertEquals(9, test.getDayOfMonth());
+        try {
+            new LocalDate(Integer.MIN_VALUE, 6, 9, GREGORIAN_PARIS);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            new LocalDate(Integer.MAX_VALUE, 6, 9, GREGORIAN_PARIS);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            new LocalDate(1970, 0, 9, GREGORIAN_PARIS);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            new LocalDate(1970, 13, 9, GREGORIAN_PARIS);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            new LocalDate(1970, 6, 0, GREGORIAN_PARIS);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            new LocalDate(1970, 6, 31, GREGORIAN_PARIS);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        new LocalDate(1970, 7, 31, GREGORIAN_PARIS);
+        try {
+            new LocalDate(1970, 7, 32, GREGORIAN_PARIS);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testConstructor_int_int_int_nullChronology() throws Throwable {
+        LocalDate test = new LocalDate(1970, 6, 9, null);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1970, test.getYear());
+        assertEquals(6, test.getMonthOfYear());
+        assertEquals(9, test.getDayOfMonth());
+    }
+
+}

From 1163c2a8b6db06f3142ee60241b1e4ff41b23539 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 18 Mar 2006 22:22:15 +0000
Subject: [PATCH 050/115] Use methods and constructors more like YearMonthDay
 and TimeOfDay

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1047 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/java/org/joda/time/LocalDate.java     | 153 +++++++++--------
 .../src/java/org/joda/time/LocalTime.java     | 146 ++++++++--------
 .../org/joda/time/TestLocalDate_Basics.java   |  36 ++--
 .../joda/time/TestLocalDate_Constructors.java | 106 ++++++------
 .../org/joda/time/TestLocalTime_Basics.java   |   2 +-
 .../joda/time/TestLocalTime_Constructors.java | 156 +++++++++++-------
 .../joda/time/TestLocalTime_Properties.java   |  56 +++----
 7 files changed, 348 insertions(+), 307 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/LocalDate.java b/JodaTime/src/java/org/joda/time/LocalDate.java
index a3252149f..33b21ea82 100644
--- a/JodaTime/src/java/org/joda/time/LocalDate.java
+++ b/JodaTime/src/java/org/joda/time/LocalDate.java
@@ -105,43 +105,6 @@
     /** The chronology to use in UTC */
     private Chronology iChronology;
 
-    //-----------------------------------------------------------------------
-    /**
-     * Constructs an instance set to the current local time evaluated using
-     * ISO chronology in the default zone.
-     * <p>
-     * Once the constructor is completed, the zone is no longer used.
-     */
-    public static LocalDate nowDefaultZone() {
-        return forInstant(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance());
-    }
-
-    /**
-     * Constructs an instance set to the current local time evaluated using
-     * ISO chronology in the specified zone.
-     * <p>
-     * If the specified time zone is null, the default zone is used.
-     * Once the constructor is completed, the zone is no longer used.
-     *
-     * @param zone  the time zone, null means default zone
-     */
-    public static LocalDate now(DateTimeZone zone) {
-        return forInstant(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(zone));
-    }
-
-    /**
-     * Constructs an instance set to the current local time evaluated using
-     * specified chronology.
-     * <p>
-     * If the chronology is null, ISO chronology in the default time zone is used.
-     * Once the constructor is completed, the zone is no longer used.
-     *
-     * @param chronology  the chronology, null means ISOChronology in default zone
-     */
-    public static LocalDate now(Chronology chronology) {
-        return forInstant(DateTimeUtils.currentTimeMillis(), chronology);
-    }
-
     //-----------------------------------------------------------------------
     /**
      * Constructs a LocalDate from a <code>java.util.Calendar</code>
@@ -161,7 +124,7 @@ public static LocalDate now(Chronology chronology) {
      * @throws IllegalArgumentException if the calendar is null
      * @throws IllegalArgumentException if the date is invalid for the ISO chronology
      */
-    public static LocalDate forFields(Calendar calendar) {
+    public static LocalDate fromCalendarFields(Calendar calendar) {
         if (calendar == null) {
             throw new IllegalArgumentException("The calendar must not be null");
         }
@@ -187,7 +150,7 @@ public static LocalDate forFields(Calendar calendar) {
      * @throws IllegalArgumentException if the calendar is null
      * @throws IllegalArgumentException if the date is invalid for the ISO chronology
      */
-    public static LocalDate forFields(Date date) {
+    public static LocalDate fromDateFields(Date date) {
         if (date == null) {
             throw new IllegalArgumentException("The date must not be null");
         }
@@ -198,6 +161,43 @@ public static LocalDate forFields(Date date) {
         );
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Constructs an instance set to the current local time evaluated using
+     * ISO chronology in the default zone.
+     * <p>
+     * Once the constructor is completed, the zone is no longer used.
+     */
+    public LocalDate() {
+        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance());
+    }
+
+    /**
+     * Constructs an instance set to the current local time evaluated using
+     * ISO chronology in the specified zone.
+     * <p>
+     * If the specified time zone is null, the default zone is used.
+     * Once the constructor is completed, the zone is no longer used.
+     *
+     * @param zone  the time zone, null means default zone
+     */
+    public LocalDate(DateTimeZone zone) {
+        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(zone));
+    }
+
+    /**
+     * Constructs an instance set to the current local time evaluated using
+     * specified chronology.
+     * <p>
+     * If the chronology is null, ISO chronology in the default time zone is used.
+     * Once the constructor is completed, the zone is no longer used.
+     *
+     * @param chronology  the chronology, null means ISOChronology in default zone
+     */
+    public LocalDate(Chronology chronology) {
+        this(DateTimeUtils.currentTimeMillis(), chronology);
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Constructs an instance set to the local time defined by the specified
@@ -207,8 +207,8 @@ public static LocalDate forFields(Date date) {
      *
      * @param instant  the milliseconds from 1970-01-01T00:00:00Z
      */
-    public static LocalDate forInstantDefaultZone(long instant) {
-        return forInstant(instant, ISOChronology.getInstance());
+    public LocalDate(long instant) {
+        this(instant, ISOChronology.getInstance());
     }
 
     /**
@@ -221,8 +221,8 @@ public static LocalDate forInstantDefaultZone(long instant) {
      * @param instant  the milliseconds from 1970-01-01T00:00:00Z
      * @param zone  the time zone, null means default zone
      */
-    public static LocalDate forInstant(long instant, DateTimeZone zone) {
-        return forInstant(instant, ISOChronology.getInstance(zone));
+    public LocalDate(long instant, DateTimeZone zone) {
+        this(instant, ISOChronology.getInstance(zone));
     }
 
     /**
@@ -235,10 +235,14 @@ public static LocalDate forInstant(long instant, DateTimeZone zone) {
      * @param instant  the milliseconds from 1970-01-01T00:00:00Z
      * @param chronology  the chronology, null means ISOChronology in default zone
      */
-    public static LocalDate forInstant(long instant, Chronology chronology) {
+    public LocalDate(long instant, Chronology chronology) {
         chronology = DateTimeUtils.getChronology(chronology);
+        
         long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);
-        return new LocalDate(localMillis, chronology.withUTC());
+        chronology = chronology.withUTC();
+        chronology.dayOfMonth().roundFloor(localMillis);
+        iLocalMillis = localMillis;
+        iChronology = chronology;
     }
 
     //-----------------------------------------------------------------------
@@ -258,8 +262,8 @@ public static LocalDate forInstant(long instant, Chronology chronology) {
      * @param zone  the time zone
      * @throws IllegalArgumentException if the instant is invalid
      */
-    public static LocalDate forInstant(Object instant) {
-        return forInstant(instant, (Chronology) null);
+    public LocalDate(Object instant) {
+        this(instant, (Chronology) null);
     }
 
     /**
@@ -278,12 +282,16 @@ public static LocalDate forInstant(Object instant) {
      * @param zone  the time zone
      * @throws IllegalArgumentException if the instant is invalid
      */
-    public static LocalDate forInstant(Object instant, DateTimeZone zone) {
+    public LocalDate(Object instant, DateTimeZone zone) {
         InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
-        Chronology chrono = converter.getChronology(instant, zone);
-        long millis = converter.getInstantMillis(instant, chrono);
-        chrono = DateTimeUtils.getChronology(chrono);
-        return forInstant(millis, chrono);
+        Chronology chronology = converter.getChronology(instant, zone);
+        long millis = converter.getInstantMillis(instant, chronology);
+        
+        long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, millis);
+        chronology = chronology.withUTC();
+        chronology.dayOfMonth().roundFloor(localMillis);
+        iLocalMillis = localMillis;
+        iChronology = chronology;
     }
 
     /**
@@ -301,25 +309,16 @@ public static LocalDate forInstant(Object instant, DateTimeZone zone) {
      * @param chronology  the chronology
      * @throws IllegalArgumentException if the instant is invalid
      */
-    public static LocalDate forInstant(Object instant, Chronology chronology) {
+    public LocalDate(Object instant, Chronology chronology) {
         InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
         Chronology chrono = DateTimeUtils.getChronology(converter.getChronology(instant, chronology));
         long millis = converter.getInstantMillis(instant, chronology);
-        return forInstant(millis, chrono);
-    }
-
-    /**
-     * Constructs an instance set to the local time defined by the specified
-     * instant evaluated using the specified local (UTC) chronology.
-     *
-     * @param localMillis  the local milliseconds from 1970-01-01T00:00:00
-     * @param chronology  the UTC chronology, not null
-     */
-    LocalDate(long localMillis, Chronology chronology) {
-        super();
-        chronology.dayOfMonth().roundFloor(localMillis);
+        
+        long localMillis = chrono.getZone().getMillisKeepLocal(DateTimeZone.UTC, millis);
+        chrono = chrono.withUTC();
+        chrono.dayOfMonth().roundFloor(localMillis);
         iLocalMillis = localMillis;
-        iChronology = chronology;
+        iChronology = chrono;
     }
 
     //-----------------------------------------------------------------------
@@ -515,7 +514,7 @@ public Chronology getChronology() {
      *
      * @return this date as a datetime at midnight
      */
-    public DateTime toDateTimeAtMidnightDefaultZone() {
+    public DateTime toDateTimeAtMidnight() {
         return toDateTimeAtMidnight(null);
     }
 
@@ -547,7 +546,7 @@ public DateTime toDateTimeAtMidnight(DateTimeZone zone) {
      *
      * @return this date as a datetime with the time as the current time
      */
-    public DateTime toDateTimeAtCurrentTimeDefaultZone() {
+    public DateTime toDateTimeAtCurrentTime() {
         return toDateTimeAtCurrentTime(null);
     }
 
@@ -580,7 +579,7 @@ public DateTime toDateTimeAtCurrentTime(DateTimeZone zone) {
      *
      * @return the DateMidnight instance in the default zone
      */
-    public DateMidnight toDateMidnightDefaultZone() {
+    public DateMidnight toDateMidnight() {
         return toDateMidnight(null);
     }
 
@@ -613,7 +612,7 @@ public DateMidnight toDateMidnight(DateTimeZone zone) {
      * @return the DateTime instance
      * @throws IllegalArgumentException if the chronology of the time does not match
      */
-    public DateTime toDateTimeDefaultZone(LocalTime time) {
+    public DateTime toDateTime(LocalTime time) {
         return toDateTime(time, null);
     }
 
@@ -655,7 +654,7 @@ public DateTime toDateTime(LocalTime time, DateTimeZone zone) {
      *
      * @return a interval over the day
      */
-    public Interval toIntervalDefaultZone() {
+    public Interval toInterval() {
         return toInterval(null);
     }
 
@@ -1683,7 +1682,7 @@ public LocalDate withMinimumValue() {
          *
          * @return a copy of the LocalDate with the field value changed
          */
-        public LocalDate withRoundedFloor() {
+        public LocalDate roundFloor() {
             return iInstant.withLocalMillis(iField.roundFloor(iInstant.getLocalMillis()));
         }
         
@@ -1697,7 +1696,7 @@ public LocalDate withRoundedFloor() {
          *
          * @return a copy of the LocalDate with the field value changed
          */
-        public LocalDate withRoundedCeiling() {
+        public LocalDate roundCeiling() {
             return iInstant.withLocalMillis(iField.roundCeiling(iInstant.getLocalMillis()));
         }
         
@@ -1707,7 +1706,7 @@ public LocalDate withRoundedCeiling() {
          *
          * @return a copy of the LocalDate with the field value changed
          */
-        public LocalDate withRoundedHalfFloor() {
+        public LocalDate roundHalfFloor() {
             return iInstant.withLocalMillis(iField.roundHalfFloor(iInstant.getLocalMillis()));
         }
         
@@ -1717,7 +1716,7 @@ public LocalDate withRoundedHalfFloor() {
          *
          * @return a copy of the LocalDate with the field value changed
          */
-        public LocalDate withRoundedHalfCeiling() {
+        public LocalDate roundHalfCeiling() {
             return iInstant.withLocalMillis(iField.roundHalfCeiling(iInstant.getLocalMillis()));
         }
         
@@ -1728,7 +1727,7 @@ public LocalDate withRoundedHalfCeiling() {
          *
          * @return a copy of the LocalDate with the field value changed
          */
-        public LocalDate withRoundedHalfEven() {
+        public LocalDate roundHalfEven() {
             return iInstant.withLocalMillis(iField.roundHalfEven(iInstant.getLocalMillis()));
         }
     }
diff --git a/JodaTime/src/java/org/joda/time/LocalTime.java b/JodaTime/src/java/org/joda/time/LocalTime.java
index 145c4e0d8..be20c41c6 100644
--- a/JodaTime/src/java/org/joda/time/LocalTime.java
+++ b/JodaTime/src/java/org/joda/time/LocalTime.java
@@ -102,43 +102,6 @@
     /** The chronology to use, in UTC */
     private Chronology iChronology;
 
-    //-----------------------------------------------------------------------
-    /**
-     * Constructs an instance set to the current local time evaluated using
-     * ISO chronology in the default zone.
-     * <p>
-     * Once the constructor is completed, the zone is no longer used.
-     */
-    public static LocalTime nowDefaultZone() {
-        return forInstant(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance());
-    }
-
-    /**
-     * Constructs an instance set to the current local time evaluated using
-     * ISO chronology in the specified zone.
-     * <p>
-     * If the specified time zone is null, the default zone is used.
-     * Once the constructor is completed, the zone is no longer used.
-     *
-     * @param zone  the time zone, null means default zone
-     */
-    public static LocalTime now(DateTimeZone zone) {
-        return forInstant(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(zone));
-    }
-
-    /**
-     * Constructs an instance set to the current local time evaluated using
-     * specified chronology and zone.
-     * <p>
-     * If the chronology is null, ISO chronology in the default time zone is used.
-     * Once the constructor is completed, the zone is no longer used.
-     *
-     * @param chronology  the chronology, null means ISOChronology in default zone
-     */
-    public static LocalTime now(Chronology chronology) {
-        return forInstant(DateTimeUtils.currentTimeMillis(), chronology);
-    }
-
     //-----------------------------------------------------------------------
     /**
      * Constructs a LocalTime from the specified millis of day using the
@@ -189,7 +152,7 @@ public static LocalTime fromMillisOfDay(long millisOfDay, Chronology chrono) {
      * @throws IllegalArgumentException if the calendar is null
      * @throws IllegalArgumentException if the date is invalid for the ISO chronology
      */
-    public static LocalTime forFields(Calendar calendar) {
+    public static LocalTime fromCalendarFields(Calendar calendar) {
         if (calendar == null) {
             throw new IllegalArgumentException("The calendar must not be null");
         }
@@ -216,7 +179,7 @@ public static LocalTime forFields(Calendar calendar) {
      * @throws IllegalArgumentException if the calendar is null
      * @throws IllegalArgumentException if the date is invalid for the ISO chronology
      */
-    public static LocalTime forFields(Date date) {
+    public static LocalTime fromDateFields(Date date) {
         if (date == null) {
             throw new IllegalArgumentException("The date must not be null");
         }
@@ -228,6 +191,43 @@ public static LocalTime forFields(Date date) {
         );
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Constructs an instance set to the current local time evaluated using
+     * ISO chronology in the default zone.
+     * <p>
+     * Once the constructor is completed, the zone is no longer used.
+     */
+    public LocalTime() {
+        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance());
+    }
+
+    /**
+     * Constructs an instance set to the current local time evaluated using
+     * ISO chronology in the specified zone.
+     * <p>
+     * If the specified time zone is null, the default zone is used.
+     * Once the constructor is completed, the zone is no longer used.
+     *
+     * @param zone  the time zone, null means default zone
+     */
+    public LocalTime(DateTimeZone zone) {
+        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(zone));
+    }
+
+    /**
+     * Constructs an instance set to the current local time evaluated using
+     * specified chronology and zone.
+     * <p>
+     * If the chronology is null, ISO chronology in the default time zone is used.
+     * Once the constructor is completed, the zone is no longer used.
+     *
+     * @param chronology  the chronology, null means ISOChronology in default zone
+     */
+    public LocalTime(Chronology chronology) {
+        this(DateTimeUtils.currentTimeMillis(), chronology);
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Constructs an instance set to the local time defined by the specified
@@ -237,8 +237,8 @@ public static LocalTime forFields(Date date) {
      *
      * @param instant  the milliseconds from 1970-01-01T00:00:00Z
      */
-    public static LocalTime forInstantDefaultZone(long instant) {
-        return forInstant(instant, ISOChronology.getInstance());
+    public LocalTime(long instant) {
+        this(instant, ISOChronology.getInstance());
     }
 
     /**
@@ -251,8 +251,8 @@ public static LocalTime forInstantDefaultZone(long instant) {
      * @param instant  the milliseconds from 1970-01-01T00:00:00Z
      * @param zone  the time zone, null means default zone
      */
-    public static LocalTime forInstant(long instant, DateTimeZone zone) {
-        return forInstant(instant, ISOChronology.getInstance(zone));
+    public LocalTime(long instant, DateTimeZone zone) {
+        this(instant, ISOChronology.getInstance(zone));
     }
 
     /**
@@ -265,10 +265,14 @@ public static LocalTime forInstant(long instant, DateTimeZone zone) {
      * @param instant  the milliseconds from 1970-01-01T00:00:00Z
      * @param chronology  the chronology, null means ISOChronology in default zone
      */
-    public static LocalTime forInstant(long instant, Chronology chronology) {
+    public LocalTime(long instant, Chronology chronology) {
         chronology = DateTimeUtils.getChronology(chronology);
+        
         long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);
-        return new LocalTime(localMillis, chronology.withUTC());
+        chronology = chronology.withUTC();
+        chronology.millisOfDay().get(localMillis);
+        iLocalMillis = localMillis;
+        iChronology = chronology;
     }
 
     //-----------------------------------------------------------------------
@@ -286,8 +290,8 @@ public static LocalTime forInstant(long instant, Chronology chronology) {
      * @param instant  the datetime object
      * @throws IllegalArgumentException if the instant is invalid
      */
-    public static LocalTime forInstant(Object instant) {
-        return forInstant(instant, (Chronology) null);
+    public LocalTime(Object instant) {
+        this(instant, (Chronology) null);
     }
 
     /**
@@ -306,12 +310,17 @@ public static LocalTime forInstant(Object instant) {
      * @param zone  the time zone
      * @throws IllegalArgumentException if the instant is invalid
      */
-    public static LocalTime forInstant(Object instant, DateTimeZone zone) {
+    public LocalTime(Object instant, DateTimeZone zone) {
         InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
-        Chronology chrono = converter.getChronology(instant, zone);
-        long millis = converter.getInstantMillis(instant, chrono);
-        chrono = DateTimeUtils.getChronology(chrono);
-        return forInstant(millis, chrono);
+        Chronology chronology = converter.getChronology(instant, zone);
+        long millis = converter.getInstantMillis(instant, chronology);
+        chronology = DateTimeUtils.getChronology(chronology);
+        
+        long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, millis);
+        chronology = chronology.withUTC();
+        chronology.millisOfDay().get(localMillis);
+        iLocalMillis = localMillis;
+        iChronology = chronology;
     }
 
     /**
@@ -329,25 +338,16 @@ public static LocalTime forInstant(Object instant, DateTimeZone zone) {
      * @param chronology  the chronology
      * @throws IllegalArgumentException if the instant is invalid
      */
-    public static LocalTime forInstant(Object instant, Chronology chronology) {
+    public LocalTime(Object instant, Chronology chronology) {
         InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
         Chronology chrono = DateTimeUtils.getChronology(converter.getChronology(instant, chronology));
         long millis = converter.getInstantMillis(instant, chronology);
-        return forInstant(millis, chrono);
-    }
-
-    /**
-     * Constructs an instance set to the local time defined by the specified
-     * instant evaluated using the specified local (UTC) chronology.
-     *
-     * @param localMillis  the local milliseconds from 1970-01-01T00:00:00
-     * @param chronology  the UTC chronology, not null
-     */
-    LocalTime(long localMillis, Chronology chronology) {
-        super();
-        chronology.millisOfDay().get(localMillis);
+        
+        long localMillis = chrono.getZone().getMillisKeepLocal(DateTimeZone.UTC, millis);
+        chrono = chrono.withUTC();
+        chrono.millisOfDay().get(localMillis);
         iLocalMillis = localMillis;
-        iChronology = chronology;
+        iChronology = chrono;
     }
 
     //-----------------------------------------------------------------------
@@ -1082,7 +1082,7 @@ public Property millisOfSecond() {
      *
      * @return this time as a datetime using todays date
      */
-    public DateTime toDateTimeTodayDefaultZone() {
+    public DateTime toDateTimeToday() {
         return toDateTimeToday(null);
     }
 
@@ -1375,7 +1375,7 @@ public LocalTime withMinimumValue() {
          *
          * @return a copy of the LocalTime with the field value changed
          */
-        public LocalTime withRoundedFloor() {
+        public LocalTime roundFloor() {
             return iInstant.withLocalMillis(iField.roundFloor(iInstant.getLocalMillis()));
         }
         
@@ -1389,7 +1389,7 @@ public LocalTime withRoundedFloor() {
          *
          * @return a copy of the LocalTime with the field value changed
          */
-        public LocalTime withRoundedCeiling() {
+        public LocalTime roundCeiling() {
             return iInstant.withLocalMillis(iField.roundCeiling(iInstant.getLocalMillis()));
         }
         
@@ -1399,7 +1399,7 @@ public LocalTime withRoundedCeiling() {
          *
          * @return a copy of the LocalTime with the field value changed
          */
-        public LocalTime withRoundedHalfFloor() {
+        public LocalTime roundHalfFloor() {
             return iInstant.withLocalMillis(iField.roundHalfFloor(iInstant.getLocalMillis()));
         }
         
@@ -1409,7 +1409,7 @@ public LocalTime withRoundedHalfFloor() {
          *
          * @return a copy of the LocalTime with the field value changed
          */
-        public LocalTime withRoundedHalfCeiling() {
+        public LocalTime roundHalfCeiling() {
             return iInstant.withLocalMillis(iField.roundHalfCeiling(iInstant.getLocalMillis()));
         }
         
@@ -1420,7 +1420,7 @@ public LocalTime withRoundedHalfCeiling() {
          *
          * @return a copy of the LocalTime with the field value changed
          */
-        public LocalTime withRoundedHalfEven() {
+        public LocalTime roundHalfEven() {
             return iInstant.withLocalMillis(iField.roundHalfEven(iInstant.getLocalMillis()));
         }
     }
diff --git a/JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java b/JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java
index 8ce1e1a7c..cc214f317 100644
--- a/JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java
@@ -100,7 +100,7 @@ protected void tearDown() throws Exception {
 
     //-----------------------------------------------------------------------
     public void testGet_DateTimeFieldType() {
-        LocalDate test = LocalDate.nowDefaultZone();
+        LocalDate test = new LocalDate();
         assertEquals(1970, test.get(DateTimeFieldType.year()));
         assertEquals(6, test.get(DateTimeFieldType.monthOfYear()));
         assertEquals(9, test.get(DateTimeFieldType.dayOfMonth()));
@@ -119,12 +119,12 @@ public void testGet_DateTimeFieldType() {
     }
 
     public void testSize() {
-        LocalDate test = LocalDate.nowDefaultZone();
+        LocalDate test = new LocalDate();
         assertEquals(3, test.size());
     }
 
     public void testGetFieldType_int() {
-        LocalDate test = LocalDate.now(COPTIC_PARIS);
+        LocalDate test = new LocalDate(COPTIC_PARIS);
         assertSame(DateTimeFieldType.year(), test.getFieldType(0));
         assertSame(DateTimeFieldType.monthOfYear(), test.getFieldType(1));
         assertSame(DateTimeFieldType.dayOfMonth(), test.getFieldType(2));
@@ -137,7 +137,7 @@ public void testGetFieldType_int() {
     }
 
     public void testGetFieldTypes() {
-        LocalDate test = LocalDate.now(COPTIC_PARIS);
+        LocalDate test = new LocalDate(COPTIC_PARIS);
         DateTimeFieldType[] fields = test.getFieldTypes();
         assertSame(DateTimeFieldType.year(), fields[0]);
         assertSame(DateTimeFieldType.monthOfYear(), fields[1]);
@@ -146,7 +146,7 @@ public void testGetFieldTypes() {
     }
 
     public void testGetField_int() {
-        LocalDate test = LocalDate.now(COPTIC_PARIS);
+        LocalDate test = new LocalDate(COPTIC_PARIS);
         assertSame(COPTIC_UTC.year(), test.getField(0));
         assertSame(COPTIC_UTC.monthOfYear(), test.getField(1));
         assertSame(COPTIC_UTC.dayOfMonth(), test.getField(2));
@@ -159,7 +159,7 @@ public void testGetField_int() {
     }
 
     public void testGetFields() {
-        LocalDate test = LocalDate.now(COPTIC_PARIS);
+        LocalDate test = new LocalDate(COPTIC_PARIS);
         DateTimeField[] fields = test.getFields();
         assertSame(COPTIC_UTC.year(), fields[0]);
         assertSame(COPTIC_UTC.monthOfYear(), fields[1]);
@@ -168,7 +168,7 @@ public void testGetFields() {
     }
 
     public void testGetValue_int() {
-        LocalDate test = LocalDate.nowDefaultZone();
+        LocalDate test = new LocalDate();
         assertEquals(1970, test.getValue(0));
         assertEquals(6, test.getValue(1));
         assertEquals(9, test.getValue(2));
@@ -181,7 +181,7 @@ public void testGetValue_int() {
     }
 
     public void testGetValues() {
-        LocalDate test = LocalDate.nowDefaultZone();
+        LocalDate test = new LocalDate();
         int[] values = test.getValues();
         assertEquals(1970, values[0]);
         assertEquals(6, values[1]);
@@ -190,7 +190,7 @@ public void testGetValues() {
     }
 
     public void testIsSupported_DateTimeFieldType() {
-        LocalDate test = LocalDate.now(COPTIC_PARIS);
+        LocalDate test = new LocalDate(COPTIC_PARIS);
         assertEquals(true, test.isSupported(DateTimeFieldType.year()));
         assertEquals(true, test.isSupported(DateTimeFieldType.monthOfYear()));
         assertEquals(true, test.isSupported(DateTimeFieldType.dayOfMonth()));
@@ -604,7 +604,7 @@ public void testWithers() {
     public void testToDateTimeAtMidnight() {
         LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS);
         
-        DateTime test = base.toDateTimeAtMidnightDefaultZone();
+        DateTime test = base.toDateTimeAtMidnight();
         check(base, 2005, 6, 9);
         assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_LONDON), test);
     }
@@ -632,7 +632,7 @@ public void testToDateTimeAtCurrentTime() {
         DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9);
         DateTimeUtils.setCurrentMillisFixed(dt.getMillis());
         
-        DateTime test = base.toDateTimeAtCurrentTimeDefaultZone();
+        DateTime test = base.toDateTimeAtCurrentTime();
         check(base, 2005, 6, 9);
         DateTime expected = new DateTime(dt.getMillis(), COPTIC_LONDON);
         expected = expected.year().setCopy(2005);
@@ -671,22 +671,22 @@ public void testToDateTimeAtCurrentTime_nullZone() {
     }
 
     //-----------------------------------------------------------------------
-    public void testToDateTimeDefaultZone_LocalTime() {
+    public void testToDateTime_LocalTime() {
         LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant
         LocalTime tod = new LocalTime(12, 13, 14, 15, COPTIC_TOKYO);
         
-        DateTime test = base.toDateTimeDefaultZone(tod);
+        DateTime test = base.toDateTime(tod);
         check(base, 2005, 6, 9);
         DateTime expected = new DateTime(2005, 6, 9, 12, 13, 14, 15, COPTIC_LONDON);
         assertEquals(expected, test);
     }
 
-    public void testToDateTimeDefaultZone_nullLocalTime() {
+    public void testToDateTime_nullLocalTime() {
         LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant
         long now = new DateTime(2004, 5, 8, 12, 13, 14, 15, COPTIC_LONDON).getMillis();
         DateTimeUtils.setCurrentMillisFixed(now);
         
-        DateTime test = base.toDateTimeDefaultZone((LocalTime) null);
+        DateTime test = base.toDateTime((LocalTime) null);
         check(base, 2005, 6, 9);
         DateTime expected = new DateTime(2005, 6, 9, 12, 13, 14, 15, COPTIC_LONDON);
         assertEquals(expected, test);
@@ -738,7 +738,7 @@ public void testToDateTime_wrongChronoLocalTime_Zone() {
     public void testToDateMidnight() {
         LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS);
         
-        DateMidnight test = base.toDateMidnightDefaultZone();
+        DateMidnight test = base.toDateMidnight();
         check(base, 2005, 6, 9);
         assertEquals(new DateMidnight(2005, 6, 9, COPTIC_LONDON), test);
     }
@@ -791,9 +791,9 @@ public void testToDateTime_nullRI() {
     //-----------------------------------------------------------------------
     public void testToInterval() {
         LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant
-        Interval test = base.toIntervalDefaultZone();
+        Interval test = base.toInterval();
         check(base, 2005, 6, 9);
-        DateTime start = base.toDateTimeAtMidnightDefaultZone();
+        DateTime start = base.toDateTimeAtMidnight();
         DateTime end = start.plus(Period.days(1));
         Interval expected = new Interval(start, end);
         assertEquals(expected, test);
diff --git a/JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java b/JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java
index 70adf7082..bac3fcf6b 100644
--- a/JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java
+++ b/JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java
@@ -82,78 +82,78 @@ protected void tearDown() throws Exception {
     }
 
     //-----------------------------------------------------------------------
-    public void testFactory_ForCalendarFields() throws Exception {
+    public void testFactory_FromCalendarFields() throws Exception {
         GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);
         cal.set(Calendar.MILLISECOND, 7);
         LocalDate expected = new LocalDate(1970, 2, 3);
-        assertEquals(expected, LocalDate.forFields(cal));
+        assertEquals(expected, LocalDate.fromCalendarFields(cal));
         try {
-            LocalDate.forFields((Calendar) null);
+            LocalDate.fromCalendarFields((Calendar) null);
             fail();
         } catch (IllegalArgumentException ex) {}
     }
 
     //-----------------------------------------------------------------------
-    public void testFactory_ForDateFields() throws Exception {
+    public void testFactory_FromDateFields() throws Exception {
         GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);
         cal.set(Calendar.MILLISECOND, 7);
         LocalDate expected = new LocalDate(1970, 2, 3);
-        assertEquals(expected, LocalDate.forFields(cal.getTime()));
+        assertEquals(expected, LocalDate.fromDateFields(cal.getTime()));
         try {
-            LocalDate.forFields((Date) null);
+            LocalDate.fromDateFields((Date) null);
             fail();
         } catch (IllegalArgumentException ex) {}
     }
 
     //-----------------------------------------------------------------------
-    public void testFactory_nowDefaultZone() throws Throwable {
-        LocalDate test = LocalDate.nowDefaultZone();
+    public void testConstructor() throws Throwable {
+        LocalDate test = new LocalDate();
         assertEquals(ISO_UTC, test.getChronology());
         assertEquals(1970, test.getYear());
         assertEquals(6, test.getMonthOfYear());
         assertEquals(9, test.getDayOfMonth());
     }
 
-    public void testFactory_now_DateTimeZone() throws Throwable {
+    public void testConstructor_DateTimeZone() throws Throwable {
         DateTime dt = new DateTime(2005, 6, 8, 23, 59, 0, 0, LONDON);
         DateTimeUtils.setCurrentMillisFixed(dt.getMillis());
         // 23:59 in London is 00:59 the following day in Paris
         
-        LocalDate test = LocalDate.now(LONDON);
+        LocalDate test = new LocalDate(LONDON);
         assertEquals(ISO_UTC, test.getChronology());
         assertEquals(2005, test.getYear());
         assertEquals(6, test.getMonthOfYear());
         assertEquals(8, test.getDayOfMonth());
         
-        test = LocalDate.now(PARIS);
+        test = new LocalDate(PARIS);
         assertEquals(ISO_UTC, test.getChronology());
         assertEquals(2005, test.getYear());
         assertEquals(6, test.getMonthOfYear());
         assertEquals(9, test.getDayOfMonth());
     }
 
-    public void testFactory_now_nullDateTimeZone() throws Throwable {
+    public void testConstructor_nullDateTimeZone() throws Throwable {
         DateTime dt = new DateTime(2005, 6, 8, 23, 59, 0, 0, LONDON);
         DateTimeUtils.setCurrentMillisFixed(dt.getMillis());
         // 23:59 in London is 00:59 the following day in Paris
         
-        LocalDate test = LocalDate.now((DateTimeZone) null);
+        LocalDate test = new LocalDate((DateTimeZone) null);
         assertEquals(ISO_UTC, test.getChronology());
         assertEquals(2005, test.getYear());
         assertEquals(6, test.getMonthOfYear());
         assertEquals(8, test.getDayOfMonth());
     }
 
-    public void testFactory_now_Chronology() throws Throwable {
-        LocalDate test = LocalDate.now(GREGORIAN_PARIS);
+    public void testConstructor_Chronology() throws Throwable {
+        LocalDate test = new LocalDate(GREGORIAN_PARIS);
         assertEquals(GREGORIAN_UTC, test.getChronology());
         assertEquals(1970, test.getYear());
         assertEquals(6, test.getMonthOfYear());
         assertEquals(9, test.getDayOfMonth());
     }
 
-    public void testFactory_now_nullChronology() throws Throwable {
-        LocalDate test = LocalDate.now((Chronology) null);
+    public void testConstructor_nullChronology() throws Throwable {
+        LocalDate test = new LocalDate((Chronology) null);
         assertEquals(ISO_UTC, test.getChronology());
         assertEquals(1970, test.getYear());
         assertEquals(6, test.getMonthOfYear());
@@ -161,64 +161,64 @@ public void testFactory_now_nullChronology() throws Throwable {
     }
 
     //-----------------------------------------------------------------------
-    public void testFactory_forInstantDefaultZone_long1() throws Throwable {
-        LocalDate test = LocalDate.forInstantDefaultZone(TEST_TIME1);
+    public void testConstructor_long1() throws Throwable {
+        LocalDate test = new LocalDate(TEST_TIME1);
         assertEquals(ISO_UTC, test.getChronology());
         assertEquals(1970, test.getYear());
         assertEquals(4, test.getMonthOfYear());
         assertEquals(6, test.getDayOfMonth());
     }
 
-    public void testFactory_forInstantDefaultZone_long2() throws Throwable {
-        LocalDate test = LocalDate.forInstantDefaultZone(TEST_TIME2);
+    public void testConstructor_long2() throws Throwable {
+        LocalDate test = new LocalDate(TEST_TIME2);
         assertEquals(ISO_UTC, test.getChronology());
         assertEquals(1971, test.getYear());
         assertEquals(5, test.getMonthOfYear());
         assertEquals(7, test.getDayOfMonth());
     }
 
-    public void testFactory_forInstant_long1_DateTimeZone() throws Throwable {
-        LocalDate test = LocalDate.forInstant(TEST_TIME1, PARIS);
+    public void testConstructor_long1_DateTimeZone() throws Throwable {
+        LocalDate test = new LocalDate(TEST_TIME1, PARIS);
         assertEquals(ISO_UTC, test.getChronology());
         assertEquals(1970, test.getYear());
         assertEquals(4, test.getMonthOfYear());
         assertEquals(6, test.getDayOfMonth());
     }
 
-    public void testFactory_forInstant_long2_DateTimeZone() throws Throwable {
-        LocalDate test = LocalDate.forInstant(TEST_TIME2, PARIS);
+    public void testConstructor_long2_DateTimeZone() throws Throwable {
+        LocalDate test = new LocalDate(TEST_TIME2, PARIS);
         assertEquals(ISO_UTC, test.getChronology());
         assertEquals(1971, test.getYear());
         assertEquals(5, test.getMonthOfYear());
         assertEquals(7, test.getDayOfMonth());
     }
 
-    public void testFactory_forInstant_long_nullDateTimeZone() throws Throwable {
-        LocalDate test = LocalDate.forInstant(TEST_TIME1, (DateTimeZone) null);
+    public void testConstructor_long_nullDateTimeZone() throws Throwable {
+        LocalDate test = new LocalDate(TEST_TIME1, (DateTimeZone) null);
         assertEquals(ISO_UTC, test.getChronology());
         assertEquals(1970, test.getYear());
         assertEquals(4, test.getMonthOfYear());
         assertEquals(6, test.getDayOfMonth());
     }
 
-    public void testFactory_forInstant_long1_Chronology() throws Throwable {
-        LocalDate test = LocalDate.forInstant(TEST_TIME1, GREGORIAN_PARIS);
+    public void testConstructor_long1_Chronology() throws Throwable {
+        LocalDate test = new LocalDate(TEST_TIME1, GREGORIAN_PARIS);
         assertEquals(GREGORIAN_UTC, test.getChronology());
         assertEquals(1970, test.getYear());
         assertEquals(4, test.getMonthOfYear());
         assertEquals(6, test.getDayOfMonth());
     }
 
-    public void testFactory_forInstant_long2_Chronology() throws Throwable {
-        LocalDate test = LocalDate.forInstant(TEST_TIME2, GREGORIAN_PARIS);
+    public void testConstructor_long2_Chronology() throws Throwable {
+        LocalDate test = new LocalDate(TEST_TIME2, GREGORIAN_PARIS);
         assertEquals(GREGORIAN_UTC, test.getChronology());
         assertEquals(1971, test.getYear());
         assertEquals(5, test.getMonthOfYear());
         assertEquals(7, test.getDayOfMonth());
     }
 
-    public void testFactory_forInstant_long_nullChronology() throws Throwable {
-        LocalDate test = LocalDate.forInstant(TEST_TIME1, (Chronology) null);
+    public void testConstructor_long_nullChronology() throws Throwable {
+        LocalDate test = new LocalDate(TEST_TIME1, (Chronology) null);
         assertEquals(ISO_UTC, test.getChronology());
         assertEquals(1970, test.getYear());
         assertEquals(4, test.getMonthOfYear());
@@ -226,85 +226,85 @@ public void testFactory_forInstant_long_nullChronology() throws Throwable {
     }
 
     //-----------------------------------------------------------------------
-    public void testFactory_forInstant_Object1() throws Throwable {
+    public void testConstructor_Object1() throws Throwable {
         Date date = new Date(TEST_TIME1);
-        LocalDate test = LocalDate.forInstant(date);
+        LocalDate test = new LocalDate(date);
         assertEquals(ISO_UTC, test.getChronology());
         assertEquals(1970, test.getYear());
         assertEquals(4, test.getMonthOfYear());
         assertEquals(6, test.getDayOfMonth());
     }
 
-    public void testFactory_forInstant_nullObject() throws Throwable {
-        LocalDate test = LocalDate.forInstant((Object) null);
+    public void testConstructor_nullObject() throws Throwable {
+        LocalDate test = new LocalDate((Object) null);
         assertEquals(ISO_UTC, test.getChronology());
         assertEquals(1970, test.getYear());
         assertEquals(6, test.getMonthOfYear());
         assertEquals(9, test.getDayOfMonth());
     }
 
-    public void testFactory_forInstant_Object_DateTimeZone() throws Throwable {
+    public void testConstructor_Object_DateTimeZone() throws Throwable {
         Date date = new Date(TEST_TIME1);
-        LocalDate test = LocalDate.forInstant(date, PARIS);
+        LocalDate test = new LocalDate(date, PARIS);
         assertEquals(ISO_UTC, test.getChronology());
         assertEquals(1970, test.getYear());
         assertEquals(4, test.getMonthOfYear());
         assertEquals(6, test.getDayOfMonth());
     }
 
-    public void testFactory_forInstant_nullObject_DateTimeZone() throws Throwable {
-        LocalDate test = LocalDate.forInstant((Object) null, PARIS);
+    public void testConstructor_nullObject_DateTimeZone() throws Throwable {
+        LocalDate test = new LocalDate((Object) null, PARIS);
         assertEquals(ISO_UTC, test.getChronology());
         assertEquals(1970, test.getYear());
         assertEquals(6, test.getMonthOfYear());
         assertEquals(9, test.getDayOfMonth());
     }
 
-    public void testFactory_Object_nullDateTimeZone() throws Throwable {
+    public void testConstructor_Object_nullDateTimeZone() throws Throwable {
         Date date = new Date(TEST_TIME1);
-        LocalDate test = LocalDate.forInstant(date, (DateTimeZone) null);
+        LocalDate test = new LocalDate(date, (DateTimeZone) null);
         assertEquals(ISO_UTC, test.getChronology());
         assertEquals(1970, test.getYear());
         assertEquals(4, test.getMonthOfYear());
         assertEquals(6, test.getDayOfMonth());
     }
 
-    public void testFactory_nullObject_nullDateTimeZone() throws Throwable {
-        LocalDate test = LocalDate.forInstant((Object) null, (DateTimeZone) null);
+    public void testConstructor_nullObject_nullDateTimeZone() throws Throwable {
+        LocalDate test = new LocalDate((Object) null, (DateTimeZone) null);
         assertEquals(ISO_UTC, test.getChronology());
         assertEquals(1970, test.getYear());
         assertEquals(6, test.getMonthOfYear());
         assertEquals(9, test.getDayOfMonth());
     }
 
-    public void testFactory_forInstant_Object_Chronology() throws Throwable {
+    public void testConstructor_Object_Chronology() throws Throwable {
         Date date = new Date(TEST_TIME1);
-        LocalDate test = LocalDate.forInstant(date, GREGORIAN_PARIS);
+        LocalDate test = new LocalDate(date, GREGORIAN_PARIS);
         assertEquals(GREGORIAN_UTC, test.getChronology());
         assertEquals(1970, test.getYear());
         assertEquals(4, test.getMonthOfYear());
         assertEquals(6, test.getDayOfMonth());
     }
 
-    public void testFactory_forInstant_nullObject_Chronology() throws Throwable {
-        LocalDate test = LocalDate.forInstant((Object) null, GREGORIAN_PARIS);
+    public void testConstructor_nullObject_Chronology() throws Throwable {
+        LocalDate test = new LocalDate((Object) null, GREGORIAN_PARIS);
         assertEquals(GREGORIAN_UTC, test.getChronology());
         assertEquals(1970, test.getYear());
         assertEquals(6, test.getMonthOfYear());
         assertEquals(9, test.getDayOfMonth());
     }
 
-    public void testFactory_Object_nullChronology() throws Throwable {
+    public void testConstructor_Object_nullChronology() throws Throwable {
         Date date = new Date(TEST_TIME1);
-        LocalDate test = LocalDate.forInstant(date, (Chronology) null);
+        LocalDate test = new LocalDate(date, (Chronology) null);
         assertEquals(ISO_UTC, test.getChronology());
         assertEquals(1970, test.getYear());
         assertEquals(4, test.getMonthOfYear());
         assertEquals(6, test.getDayOfMonth());
     }
 
-    public void testFactory_nullObject_nullChronology() throws Throwable {
-        LocalDate test = LocalDate.forInstant((Object) null, (Chronology) null);
+    public void testConstructor_nullObject_nullChronology() throws Throwable {
+        LocalDate test = new LocalDate((Object) null, (Chronology) null);
         assertEquals(ISO_UTC, test.getChronology());
         assertEquals(1970, test.getYear());
         assertEquals(6, test.getMonthOfYear());
diff --git a/JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java b/JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java
index 45fd84829..6c95b9c51 100644
--- a/JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java
@@ -664,7 +664,7 @@ public void testToDateTimeTodayDefaultZone() {
         DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9);
         DateTimeUtils.setCurrentMillisFixed(dt.getMillis());
         
-        DateTime test = base.toDateTimeTodayDefaultZone();
+        DateTime test = base.toDateTimeToday();
         check(base, 10, 20, 30, 40);
         DateTime expected = new DateTime(dt.getMillis(), COPTIC_LONDON);
         expected = expected.hourOfDay().setCopy(10);
diff --git a/JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java b/JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java
index c56927993..fdf70bc3c 100644
--- a/JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java
+++ b/JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java
@@ -103,25 +103,25 @@ public void testConstantMidnight() throws Throwable {
     }
 
     //-----------------------------------------------------------------------
-    public void testFactory_ForFields_Calendar() throws Exception {
+    public void testFactory_FromCalendarFields_Calendar() throws Exception {
         GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);
         cal.set(Calendar.MILLISECOND, 7);
         LocalTime expected = new LocalTime(4, 5, 6, 7);
-        assertEquals(expected, LocalTime.forFields(cal));
+        assertEquals(expected, LocalTime.fromCalendarFields(cal));
         try {
-            LocalTime.forFields((Calendar) null);
+            LocalTime.fromCalendarFields((Calendar) null);
             fail();
         } catch (IllegalArgumentException ex) {}
     }
 
     //-----------------------------------------------------------------------
-    public void testFactory_ForFields_Date() throws Exception {
+    public void testFactory_FromDateFields_Date() throws Exception {
         GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);
         cal.set(Calendar.MILLISECOND, 7);
         LocalTime expected = new LocalTime(4, 5, 6, 7);
-        assertEquals(expected, LocalTime.forFields(cal.getTime()));
+        assertEquals(expected, LocalTime.fromDateFields(cal.getTime()));
         try {
-            LocalTime.forFields((Date) null);
+            LocalTime.fromDateFields((Date) null);
             fail();
         } catch (IllegalArgumentException ex) {}
     }
@@ -156,8 +156,8 @@ public void testFactoryMillisOfDay_long_nullChronology() throws Throwable {
     }
 
     //-----------------------------------------------------------------------
-    public void testFactory_nowDefaultZone() throws Throwable {
-        LocalTime test = LocalTime.nowDefaultZone();
+    public void testConstructor() throws Throwable {
+        LocalTime test = new LocalTime();
         assertEquals(ISO_UTC, test.getChronology());
         assertEquals(10 + OFFSET_LONDON, test.getHourOfDay());
         assertEquals(20, test.getMinuteOfHour());
@@ -166,19 +166,19 @@ public void testFactory_nowDefaultZone() throws Throwable {
     }
 
     //-----------------------------------------------------------------------
-    public void testFactory_now_DateTimeZone() throws Throwable {
+    public void testConstructor_DateTimeZone() throws Throwable {
         DateTime dt = new DateTime(2005, 6, 8, 23, 59, 30, 40, LONDON);
         DateTimeUtils.setCurrentMillisFixed(dt.getMillis());
         // 23:59 in London is 00:59 the following day in Paris
         
-        LocalTime test = LocalTime.now(LONDON);
+        LocalTime test = new LocalTime(LONDON);
         assertEquals(ISO_UTC, test.getChronology());
         assertEquals(23, test.getHourOfDay());
         assertEquals(59, test.getMinuteOfHour());
         assertEquals(30, test.getSecondOfMinute());
         assertEquals(40, test.getMillisOfSecond());
         
-        test = LocalTime.now(PARIS);
+        test = new LocalTime(PARIS);
         assertEquals(ISO_UTC, test.getChronology());
         assertEquals(0, test.getHourOfDay());
         assertEquals(59, test.getMinuteOfHour());
@@ -186,12 +186,12 @@ public void testFactory_now_DateTimeZone() throws Throwable {
         assertEquals(40, test.getMillisOfSecond());
     }
 
-    public void testFactory_now_nullDateTimeZone() throws Throwable {
+    public void testConstructor_nullDateTimeZone() throws Throwable {
         DateTime dt = new DateTime(2005, 6, 8, 23, 59, 30, 40, LONDON);
         DateTimeUtils.setCurrentMillisFixed(dt.getMillis());
         // 23:59 in London is 00:59 the following day in Paris
         
-        LocalTime test = LocalTime.now((DateTimeZone) null);
+        LocalTime test = new LocalTime((DateTimeZone) null);
         assertEquals(ISO_UTC, test.getChronology());
         assertEquals(23, test.getHourOfDay());
         assertEquals(59, test.getMinuteOfHour());
@@ -200,8 +200,8 @@ public void testFactory_now_nullDateTimeZone() throws Throwable {
     }
 
     //-----------------------------------------------------------------------
-    public void testFactory_now_Chronology() throws Throwable {
-        LocalTime test = LocalTime.now(JULIAN_LONDON);
+    public void testConstructor_Chronology() throws Throwable {
+        LocalTime test = new LocalTime(JULIAN_LONDON);
         assertEquals(JULIAN_UTC, test.getChronology());
         assertEquals(10 + OFFSET_LONDON, test.getHourOfDay());
         assertEquals(20, test.getMinuteOfHour());
@@ -209,8 +209,8 @@ public void testFactory_now_Chronology() throws Throwable {
         assertEquals(40, test.getMillisOfSecond());
     }
 
-    public void testFactory_now_nullChronology() throws Throwable {
-        LocalTime test = LocalTime.now((Chronology) null);
+    public void testConstructor_nullChronology() throws Throwable {
+        LocalTime test = new LocalTime((Chronology) null);
         assertEquals(ISO_UTC, test.getChronology());
         assertEquals(10 + OFFSET_LONDON, test.getHourOfDay());
         assertEquals(20, test.getMinuteOfHour());
@@ -219,8 +219,8 @@ public void testFactory_now_nullChronology() throws Throwable {
     }
 
     //-----------------------------------------------------------------------
-    public void testFactory_forInstantDefaultZone_long1() throws Throwable {
-        LocalTime test = LocalTime.forInstantDefaultZone(TEST_TIME1);
+    public void testConstructor_long1() throws Throwable {
+        LocalTime test = new LocalTime(TEST_TIME1);
         assertEquals(ISO_UTC, test.getChronology());
         assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());
         assertEquals(2, test.getMinuteOfHour());
@@ -228,8 +228,8 @@ public void testFactory_forInstantDefaultZone_long1() throws Throwable {
         assertEquals(4, test.getMillisOfSecond());
     }
 
-    public void testFactory_forInstantDefaultZone_long2() throws Throwable {
-        LocalTime test = LocalTime.forInstantDefaultZone(TEST_TIME2);
+    public void testConstructor_long2() throws Throwable {
+        LocalTime test = new LocalTime(TEST_TIME2);
         assertEquals(ISO_UTC, test.getChronology());
         assertEquals(5 + OFFSET_LONDON, test.getHourOfDay());
         assertEquals(6, test.getMinuteOfHour());
@@ -238,8 +238,8 @@ public void testFactory_forInstantDefaultZone_long2() throws Throwable {
     }
 
     //-----------------------------------------------------------------------
-    public void testFactory_forInstant_long_DateTimeZone() throws Throwable {
-        LocalTime test = LocalTime.forInstant(TEST_TIME1, PARIS);
+    public void testConstructor_long_DateTimeZone() throws Throwable {
+        LocalTime test = new LocalTime(TEST_TIME1, PARIS);
         assertEquals(ISO_UTC, test.getChronology());
         assertEquals(1 + OFFSET_PARIS, test.getHourOfDay());
         assertEquals(2, test.getMinuteOfHour());
@@ -247,8 +247,8 @@ public void testFactory_forInstant_long_DateTimeZone() throws Throwable {
         assertEquals(4, test.getMillisOfSecond());
     }
 
-    public void testFactory_forInstant_long_nullDateTimeZone() throws Throwable {
-        LocalTime test = LocalTime.forInstant(TEST_TIME1, (DateTimeZone) null);
+    public void testConstructor_long_nullDateTimeZone() throws Throwable {
+        LocalTime test = new LocalTime(TEST_TIME1, (DateTimeZone) null);
         assertEquals(ISO_UTC, test.getChronology());
         assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());
         assertEquals(2, test.getMinuteOfHour());
@@ -257,8 +257,8 @@ public void testFactory_forInstant_long_nullDateTimeZone() throws Throwable {
     }
 
     //-----------------------------------------------------------------------
-    public void testFactory_forInstant_long1_Chronology() throws Throwable {
-        LocalTime test = LocalTime.forInstant(TEST_TIME1, JULIAN_PARIS);
+    public void testConstructor_long1_Chronology() throws Throwable {
+        LocalTime test = new LocalTime(TEST_TIME1, JULIAN_PARIS);
         assertEquals(JULIAN_UTC, test.getChronology());
         assertEquals(1 + OFFSET_PARIS, test.getHourOfDay());
         assertEquals(2, test.getMinuteOfHour());
@@ -266,8 +266,8 @@ public void testFactory_forInstant_long1_Chronology() throws Throwable {
         assertEquals(4, test.getMillisOfSecond());
     }
 
-    public void testFactory_forInstant_long2_Chronology() throws Throwable {
-        LocalTime test = LocalTime.forInstant(TEST_TIME2, JULIAN_LONDON);
+    public void testConstructor_long2_Chronology() throws Throwable {
+        LocalTime test = new LocalTime(TEST_TIME2, JULIAN_LONDON);
         assertEquals(JULIAN_UTC, test.getChronology());
         assertEquals(5 + OFFSET_LONDON, test.getHourOfDay());
         assertEquals(6, test.getMinuteOfHour());
@@ -275,8 +275,8 @@ public void testFactory_forInstant_long2_Chronology() throws Throwable {
         assertEquals(8, test.getMillisOfSecond());
     }
 
-    public void testFactory_forInstant_long_nullChronology() throws Throwable {
-        LocalTime test = LocalTime.forInstant(TEST_TIME1, (Chronology) null);
+    public void testConstructor_long_nullChronology() throws Throwable {
+        LocalTime test = new LocalTime(TEST_TIME1, (Chronology) null);
         assertEquals(ISO_UTC, test.getChronology());
         assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());
         assertEquals(2, test.getMinuteOfHour());
@@ -285,9 +285,9 @@ public void testFactory_forInstant_long_nullChronology() throws Throwable {
     }
 
     //-----------------------------------------------------------------------
-    public void testFactory_forInstant_Object1() throws Throwable {
+    public void testConstructor_Object1() throws Throwable {
         Date date = new Date(TEST_TIME1);
-        LocalTime test = LocalTime.forInstant(date);
+        LocalTime test = new LocalTime(date);
         assertEquals(ISO_UTC, test.getChronology());
         assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());
         assertEquals(2, test.getMinuteOfHour());
@@ -295,10 +295,10 @@ public void testFactory_forInstant_Object1() throws Throwable {
         assertEquals(4, test.getMillisOfSecond());
     }
 
-    public void testFactory_forInstant_Object2() throws Throwable {
+    public void testConstructor_Object2() throws Throwable {
         Calendar cal = new GregorianCalendar();
         cal.setTime(new Date(TEST_TIME1));
-        LocalTime test = LocalTime.forInstant(cal);
+        LocalTime test = new LocalTime(cal);
         assertEquals(GJChronology.getInstanceUTC(), test.getChronology());
         assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());
         assertEquals(2, test.getMinuteOfHour());
@@ -306,8 +306,8 @@ public void testFactory_forInstant_Object2() throws Throwable {
         assertEquals(4, test.getMillisOfSecond());
     }
 
-    public void testFactory_forInstant_nullObject() throws Throwable {
-        LocalTime test = LocalTime.forInstant((Object) null);
+    public void testConstructor_nullObject() throws Throwable {
+        LocalTime test = new LocalTime((Object) null);
         assertEquals(ISO_UTC, test.getChronology());
         assertEquals(10 + OFFSET_LONDON, test.getHourOfDay());
         assertEquals(20, test.getMinuteOfHour());
@@ -315,20 +315,62 @@ public void testFactory_forInstant_nullObject() throws Throwable {
         assertEquals(40, test.getMillisOfSecond());
     }
 
-//    public void testFactory_forInstant_localTimeObject() throws Throwable {
-//        LocalTime base = new LocalTime(10, 20, 30, 40, CopticChronology.getInstance(PARIS));
-//        LocalTime test = LocalTime.forInstant(base);
-//        assertEquals(CopticChronology.getInstanceUTC(), test.getChronology());
-//        assertEquals(10, test.getHourOfDay());
-//        assertEquals(20, test.getMinuteOfHour());
-//        assertEquals(30, test.getSecondOfMinute());
-//        assertEquals(40, test.getMillisOfSecond());
-//    }
+    //-----------------------------------------------------------------------
+    public void testConstructor_Object1_DateTimeZone() throws Throwable {
+        Date date = new Date(TEST_TIME1);
+        LocalTime test = new LocalTime(date, PARIS);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1 + OFFSET_PARIS, test.getHourOfDay());
+        assertEquals(2, test.getMinuteOfHour());
+        assertEquals(3, test.getSecondOfMinute());
+        assertEquals(4, test.getMillisOfSecond());
+    }
+
+    public void testConstructor_Object2_DateTimeZone() throws Throwable {
+        LocalTime test = new LocalTime("T10:20");
+        assertEquals(10, test.getHourOfDay());
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(0, test.getSecondOfMinute());
+        assertEquals(0, test.getMillisOfSecond());
+        
+        try {
+            new LocalTime("T1020");
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testConstructor_nullObject_DateTimeZone() throws Throwable {
+        LocalTime test = new LocalTime((Object) null, PARIS);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(10 + OFFSET_PARIS, test.getHourOfDay());
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(30, test.getSecondOfMinute());
+        assertEquals(40, test.getMillisOfSecond());
+    }
+
+    public void testConstructor_Object_nullDateTimeZone() throws Throwable {
+        Date date = new Date(TEST_TIME1);
+        LocalTime test = new LocalTime(date, (DateTimeZone) null);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());
+        assertEquals(2, test.getMinuteOfHour());
+        assertEquals(3, test.getSecondOfMinute());
+        assertEquals(4, test.getMillisOfSecond());
+    }
+
+    public void testConstructor_nullObject_nullDateTimeZone() throws Throwable {
+        LocalTime test = new LocalTime((Object) null, (DateTimeZone) null);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(10 + OFFSET_LONDON, test.getHourOfDay());
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(30, test.getSecondOfMinute());
+        assertEquals(40, test.getMillisOfSecond());
+    }
 
     //-----------------------------------------------------------------------
-    public void testFactory_forInstant_Object1_Chronology() throws Throwable {
+    public void testConstructor_Object1_Chronology() throws Throwable {
         Date date = new Date(TEST_TIME1);
-        LocalTime test = LocalTime.forInstant(date, JULIAN_LONDON);
+        LocalTime test = new LocalTime(date, JULIAN_LONDON);
         assertEquals(JULIAN_UTC, test.getChronology());
         assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());
         assertEquals(2, test.getMinuteOfHour());
@@ -336,21 +378,21 @@ public void testFactory_forInstant_Object1_Chronology() throws Throwable {
         assertEquals(4, test.getMillisOfSecond());
     }
 
-    public void testFactory_forInstant_Object2_Chronology() throws Throwable {
-        LocalTime test = LocalTime.forInstant("T10:20");
+    public void testConstructor_Object2_Chronology() throws Throwable {
+        LocalTime test = new LocalTime("T10:20");
         assertEquals(10, test.getHourOfDay());
         assertEquals(20, test.getMinuteOfHour());
         assertEquals(0, test.getSecondOfMinute());
         assertEquals(0, test.getMillisOfSecond());
         
         try {
-            LocalTime.forInstant("T1020");
+            new LocalTime("T1020");
             fail();
         } catch (IllegalArgumentException ex) {}
     }
 
-    public void testFactory_forInstant_nullObject_Chronology() throws Throwable {
-        LocalTime test = LocalTime.forInstant((Object) null, JULIAN_LONDON);
+    public void testConstructor_nullObject_Chronology() throws Throwable {
+        LocalTime test = new LocalTime((Object) null, JULIAN_LONDON);
         assertEquals(JULIAN_UTC, test.getChronology());
         assertEquals(10 + OFFSET_LONDON, test.getHourOfDay());
         assertEquals(20, test.getMinuteOfHour());
@@ -358,9 +400,9 @@ public void testFactory_forInstant_nullObject_Chronology() throws Throwable {
         assertEquals(40, test.getMillisOfSecond());
     }
 
-    public void testFactory_forInstant_Object_nullChronology() throws Throwable {
+    public void testConstructor_Object_nullChronology() throws Throwable {
         Date date = new Date(TEST_TIME1);
-        LocalTime test = LocalTime.forInstant(date, (Chronology) null);
+        LocalTime test = new LocalTime(date, (Chronology) null);
         assertEquals(ISO_UTC, test.getChronology());
         assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());
         assertEquals(2, test.getMinuteOfHour());
@@ -368,8 +410,8 @@ public void testFactory_forInstant_Object_nullChronology() throws Throwable {
         assertEquals(4, test.getMillisOfSecond());
     }
 
-    public void testFactory_forInstant_nullObject_nullChronology() throws Throwable {
-        LocalTime test = LocalTime.forInstant((Object) null, (Chronology) null);
+    public void testConstructor_nullObject_nullChronology() throws Throwable {
+        LocalTime test = new LocalTime((Object) null, (Chronology) null);
         assertEquals(ISO_UTC, test.getChronology());
         assertEquals(10 + OFFSET_LONDON, test.getHourOfDay());
         assertEquals(20, test.getMinuteOfHour());
diff --git a/JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java b/JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java
index 862440d7c..427d18acd 100644
--- a/JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java
+++ b/JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java
@@ -95,32 +95,32 @@ public void testPropertyGetHour() {
 
     public void testPropertyRoundHour() {
         LocalTime test = new LocalTime(10, 20);
-        check(test.hourOfDay().withRoundedCeiling(), 11, 0, 0, 0);
-        check(test.hourOfDay().withRoundedFloor(), 10, 0, 0, 0);
-        check(test.hourOfDay().withRoundedHalfCeiling(), 10, 0, 0, 0);
-        check(test.hourOfDay().withRoundedHalfFloor(), 10, 0, 0, 0);
-        check(test.hourOfDay().withRoundedHalfEven(), 10, 0, 0, 0);
+        check(test.hourOfDay().roundCeiling(), 11, 0, 0, 0);
+        check(test.hourOfDay().roundFloor(), 10, 0, 0, 0);
+        check(test.hourOfDay().roundHalfCeiling(), 10, 0, 0, 0);
+        check(test.hourOfDay().roundHalfFloor(), 10, 0, 0, 0);
+        check(test.hourOfDay().roundHalfEven(), 10, 0, 0, 0);
         
         test = new LocalTime(10, 40);
-        check(test.hourOfDay().withRoundedCeiling(), 11, 0, 0, 0);
-        check(test.hourOfDay().withRoundedFloor(), 10, 0, 0, 0);
-        check(test.hourOfDay().withRoundedHalfCeiling(), 11, 0, 0, 0);
-        check(test.hourOfDay().withRoundedHalfFloor(), 11, 0, 0, 0);
-        check(test.hourOfDay().withRoundedHalfEven(), 11, 0, 0, 0);
+        check(test.hourOfDay().roundCeiling(), 11, 0, 0, 0);
+        check(test.hourOfDay().roundFloor(), 10, 0, 0, 0);
+        check(test.hourOfDay().roundHalfCeiling(), 11, 0, 0, 0);
+        check(test.hourOfDay().roundHalfFloor(), 11, 0, 0, 0);
+        check(test.hourOfDay().roundHalfEven(), 11, 0, 0, 0);
         
         test = new LocalTime(10, 30);
-        check(test.hourOfDay().withRoundedCeiling(), 11, 0, 0, 0);
-        check(test.hourOfDay().withRoundedFloor(), 10, 0, 0, 0);
-        check(test.hourOfDay().withRoundedHalfCeiling(), 11, 0, 0, 0);
-        check(test.hourOfDay().withRoundedHalfFloor(), 10, 0, 0, 0);
-        check(test.hourOfDay().withRoundedHalfEven(), 10, 0, 0, 0);
+        check(test.hourOfDay().roundCeiling(), 11, 0, 0, 0);
+        check(test.hourOfDay().roundFloor(), 10, 0, 0, 0);
+        check(test.hourOfDay().roundHalfCeiling(), 11, 0, 0, 0);
+        check(test.hourOfDay().roundHalfFloor(), 10, 0, 0, 0);
+        check(test.hourOfDay().roundHalfEven(), 10, 0, 0, 0);
         
         test = new LocalTime(11, 30);
-        check(test.hourOfDay().withRoundedCeiling(), 12, 0, 0, 0);
-        check(test.hourOfDay().withRoundedFloor(), 11, 0, 0, 0);
-        check(test.hourOfDay().withRoundedHalfCeiling(), 12, 0, 0, 0);
-        check(test.hourOfDay().withRoundedHalfFloor(), 11, 0, 0, 0);
-        check(test.hourOfDay().withRoundedHalfEven(), 12, 0, 0, 0);
+        check(test.hourOfDay().roundCeiling(), 12, 0, 0, 0);
+        check(test.hourOfDay().roundFloor(), 11, 0, 0, 0);
+        check(test.hourOfDay().roundHalfCeiling(), 12, 0, 0, 0);
+        check(test.hourOfDay().roundHalfFloor(), 11, 0, 0, 0);
+        check(test.hourOfDay().roundHalfEven(), 12, 0, 0, 0);
     }
 
     public void testPropertyGetMaxMinValuesHour() {
@@ -241,8 +241,8 @@ public void testPropertyWithMinimumValueHour() {
     }
 
     public void testPropertyCompareToHour() {
-        LocalTime test1 = LocalTime.forInstantDefaultZone(TEST_TIME1);
-        LocalTime test2 = LocalTime.forInstantDefaultZone(TEST_TIME2);
+        LocalTime test1 = new LocalTime(TEST_TIME1);
+        LocalTime test2 = new LocalTime(TEST_TIME2);
         assertEquals(true, test1.hourOfDay().compareTo(test2) < 0);
         assertEquals(true, test2.hourOfDay().compareTo(test1) > 0);
         assertEquals(true, test1.hourOfDay().compareTo(test1) == 0);
@@ -418,8 +418,8 @@ public void testPropertySetTextMinute() {
     }
 
     public void testPropertyCompareToMinute() {
-        LocalTime test1 = LocalTime.forInstantDefaultZone(TEST_TIME1);
-        LocalTime test2 = LocalTime.forInstantDefaultZone(TEST_TIME2);
+        LocalTime test1 = new LocalTime(TEST_TIME1);
+        LocalTime test2 = new LocalTime(TEST_TIME2);
         assertEquals(true, test1.minuteOfHour().compareTo(test2) < 0);
         assertEquals(true, test2.minuteOfHour().compareTo(test1) > 0);
         assertEquals(true, test1.minuteOfHour().compareTo(test1) == 0);
@@ -589,8 +589,8 @@ public void testPropertySetTextSecond() {
     }
 
     public void testPropertyCompareToSecond() {
-        LocalTime test1 = LocalTime.forInstantDefaultZone(TEST_TIME1);
-        LocalTime test2 = LocalTime.forInstantDefaultZone(TEST_TIME2);
+        LocalTime test1 = new LocalTime(TEST_TIME1);
+        LocalTime test2 = new LocalTime(TEST_TIME2);
         assertEquals(true, test1.secondOfMinute().compareTo(test2) < 0);
         assertEquals(true, test2.secondOfMinute().compareTo(test1) > 0);
         assertEquals(true, test1.secondOfMinute().compareTo(test1) == 0);
@@ -754,8 +754,8 @@ public void testPropertySetTextMilli() {
     }
 
     public void testPropertyCompareToMilli() {
-        LocalTime test1 = LocalTime.forInstantDefaultZone(TEST_TIME1);
-        LocalTime test2 = LocalTime.forInstantDefaultZone(TEST_TIME2);
+        LocalTime test1 = new LocalTime(TEST_TIME1);
+        LocalTime test2 = new LocalTime(TEST_TIME2);
         assertEquals(true, test1.millisOfSecond().compareTo(test2) < 0);
         assertEquals(true, test2.millisOfSecond().compareTo(test1) > 0);
         assertEquals(true, test1.millisOfSecond().compareTo(test1) == 0);

From b5c8777dd44fcc56679a211169287625bdf51474 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 18 Mar 2006 22:22:49 +0000
Subject: [PATCH 051/115] Testing of LocalDate

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1048 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/test/org/joda/time/TestAll.java  |   1 +
 .../joda/time/TestLocalDate_Properties.java   | 520 ++++++++++++++++++
 2 files changed, 521 insertions(+)
 create mode 100644 JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java

diff --git a/JodaTime/src/test/org/joda/time/TestAll.java b/JodaTime/src/test/org/joda/time/TestAll.java
index a54ffdaf2..a2ad41ec8 100644
--- a/JodaTime/src/test/org/joda/time/TestAll.java
+++ b/JodaTime/src/test/org/joda/time/TestAll.java
@@ -63,6 +63,7 @@ public static Test suite() {
         
         suite.addTest(TestLocalDate_Constructors.suite());
         suite.addTest(TestLocalDate_Basics.suite());
+        suite.addTest(TestLocalDate_Properties.suite());
         
         suite.addTest(TestLocalTime_Constructors.suite());
         suite.addTest(TestLocalTime_Basics.suite());
diff --git a/JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java b/JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java
new file mode 100644
index 000000000..62e8133f2
--- /dev/null
+++ b/JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java
@@ -0,0 +1,520 @@
+/*
+ *  Copyright 2001-2006 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time;
+
+import java.util.Locale;
+
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+import org.joda.time.chrono.CopticChronology;
+
+/**
+ * This class is a Junit unit test for YearMonthDay.
+ *
+ * @author Stephen Colebourne
+ */
+public class TestLocalDate_Properties extends TestCase {
+
+    private long TEST_TIME_NOW =
+            (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
+            
+    private long TEST_TIME1 =
+        (31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
+        + 12L * DateTimeConstants.MILLIS_PER_HOUR
+        + 24L * DateTimeConstants.MILLIS_PER_MINUTE;
+        
+    private long TEST_TIME2 =
+        (365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY
+        + 14L * DateTimeConstants.MILLIS_PER_HOUR
+        + 28L * DateTimeConstants.MILLIS_PER_MINUTE;
+        
+    private DateTimeZone zone = null;
+
+    public static void main(String[] args) {
+        junit.textui.TestRunner.run(suite());
+    }
+
+    public static TestSuite suite() {
+        return new TestSuite(TestLocalDate_Properties.class);
+    }
+
+    public TestLocalDate_Properties(String name) {
+        super(name);
+    }
+
+    protected void setUp() throws Exception {
+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
+        zone = DateTimeZone.getDefault();
+        DateTimeZone.setDefault(DateTimeZone.UTC);
+    }
+
+    protected void tearDown() throws Exception {
+        DateTimeUtils.setCurrentMillisSystem();
+        DateTimeZone.setDefault(zone);
+        zone = null;
+    }
+
+    //-----------------------------------------------------------------------
+    public void testPropertyGetYear() {
+        LocalDate test = new LocalDate(1972, 6, 9);
+        assertSame(test.getChronology().year(), test.year().getField());
+        assertEquals("year", test.year().getName());
+        assertEquals("Property[year]", test.year().toString());
+        assertSame(test, test.year().getLocalDate());
+        assertEquals(1972, test.year().get());
+        assertEquals("1972", test.year().getAsString());
+        assertEquals("1972", test.year().getAsText());
+        assertEquals("1972", test.year().getAsText(Locale.FRENCH));
+        assertEquals("1972", test.year().getAsShortText());
+        assertEquals("1972", test.year().getAsShortText(Locale.FRENCH));
+        assertEquals(test.getChronology().years(), test.year().getDurationField());
+        assertEquals(null, test.year().getRangeDurationField());
+        assertEquals(9, test.year().getMaximumTextLength(null));
+        assertEquals(9, test.year().getMaximumShortTextLength(null));
+    }
+
+    public void testPropertyGetMaxMinValuesYear() {
+        LocalDate test = new LocalDate(1972, 6, 9);
+        assertEquals(-292275054, test.year().getMinimumValue());
+        assertEquals(-292275054, test.year().getMinimumValueOverall());
+        assertEquals(292277023, test.year().getMaximumValue());
+        assertEquals(292277023, test.year().getMaximumValueOverall());
+    }
+
+    public void testPropertyPlusYear() {
+        LocalDate test = new LocalDate(1972, 6, 9);
+        LocalDate copy = test.year().plus(9);
+        check(test, 1972, 6, 9);
+        check(copy, 1981, 6, 9);
+        
+        copy = test.year().plus(0);
+        check(copy, 1972, 6, 9);
+        
+        copy = test.year().plus(292277023 - 1972);
+        check(copy, 292277023, 6, 9);
+        
+        try {
+            test.year().plus(292277023 - 1972 + 1);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        check(test, 1972, 6, 9);
+        
+        copy = test.year().plus(-1972);
+        check(copy, 0, 6, 9);
+        
+        copy = test.year().plus(-1973);
+        check(copy, -1, 6, 9);
+        
+        try {
+            test.year().plus(-292275054 - 1972 - 1);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        check(test, 1972, 6, 9);
+    }
+
+    public void testPropertyPlusWrapFieldYear() {
+        LocalDate test = new LocalDate(1972, 6, 9);
+        LocalDate copy = test.year().plusWrapField(9);
+        check(test, 1972, 6, 9);
+        check(copy, 1981, 6, 9);
+        
+        copy = test.year().plusWrapField(0);
+        check(copy, 1972, 6, 9);
+        
+        copy = test.year().plusWrapField(292277023 - 1972 + 1);
+        check(copy, -292275054, 6, 9);
+        
+        copy = test.year().plusWrapField(-292275054 - 1972 - 1);
+        check(copy, 292277023, 6, 9);
+    }
+
+    public void testPropertyWithYear() {
+        LocalDate test = new LocalDate(1972, 6, 9);
+        LocalDate copy = test.year().withValue(12);
+        check(test, 1972, 6, 9);
+        check(copy, 12, 6, 9);
+    }
+
+    public void testPropertyWithTextYear() {
+        LocalDate test = new LocalDate(1972, 6, 9);
+        LocalDate copy = test.year().withValue("12");
+        check(test, 1972, 6, 9);
+        check(copy, 12, 6, 9);
+    }
+
+    public void testPropertyCompareToYear() {
+        LocalDate test1 = new LocalDate(TEST_TIME1);
+        LocalDate test2 = new LocalDate(TEST_TIME2);
+        assertEquals(true, test1.year().compareTo(test2) < 0);
+        assertEquals(true, test2.year().compareTo(test1) > 0);
+        assertEquals(true, test1.year().compareTo(test1) == 0);
+        try {
+            test1.year().compareTo((ReadablePartial) null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        
+        DateTime dt1 = new DateTime(TEST_TIME1);
+        DateTime dt2 = new DateTime(TEST_TIME2);
+        assertEquals(true, test1.year().compareTo(dt2) < 0);
+        assertEquals(true, test2.year().compareTo(dt1) > 0);
+        assertEquals(true, test1.year().compareTo(dt1) == 0);
+        try {
+            test1.year().compareTo((ReadableInstant) null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
+    public void testPropertyGetMonth() {
+        LocalDate test = new LocalDate(1972, 6, 9);
+        assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField());
+        assertEquals("monthOfYear", test.monthOfYear().getName());
+        assertEquals("Property[monthOfYear]", test.monthOfYear().toString());
+        assertSame(test, test.monthOfYear().getLocalDate());
+        assertEquals(6, test.monthOfYear().get());
+        assertEquals("6", test.monthOfYear().getAsString());
+        assertEquals("June", test.monthOfYear().getAsText());
+        assertEquals("juin", test.monthOfYear().getAsText(Locale.FRENCH));
+        assertEquals("Jun", test.monthOfYear().getAsShortText());
+        assertEquals("juin", test.monthOfYear().getAsShortText(Locale.FRENCH));
+        assertEquals(test.getChronology().months(), test.monthOfYear().getDurationField());
+        assertEquals(test.getChronology().years(), test.monthOfYear().getRangeDurationField());
+        assertEquals(9, test.monthOfYear().getMaximumTextLength(null));
+        assertEquals(3, test.monthOfYear().getMaximumShortTextLength(null));
+        test = new LocalDate(1972, 7, 9);
+        assertEquals("juillet", test.monthOfYear().getAsText(Locale.FRENCH));
+        assertEquals("juil.", test.monthOfYear().getAsShortText(Locale.FRENCH));
+    }
+
+    public void testPropertyGetMaxMinValuesMonth() {
+        LocalDate test = new LocalDate(1972, 6, 9);
+        assertEquals(1, test.monthOfYear().getMinimumValue());
+        assertEquals(1, test.monthOfYear().getMinimumValueOverall());
+        assertEquals(12, test.monthOfYear().getMaximumValue());
+        assertEquals(12, test.monthOfYear().getMaximumValueOverall());
+    }
+
+    public void testPropertyPlusMonth() {
+        LocalDate test = new LocalDate(1972, 6, 9);
+        LocalDate copy = test.monthOfYear().plus(6);
+        check(test, 1972, 6, 9);
+        check(copy, 1972, 12, 9);
+        
+        copy = test.monthOfYear().plus(7);
+        check(copy, 1973, 1, 9);
+        
+        copy = test.monthOfYear().plus(-5);
+        check(copy, 1972, 1, 9);
+        
+        copy = test.monthOfYear().plus(-6);
+        check(copy, 1971, 12, 9);
+        
+        test = new LocalDate(1972, 1, 31);
+        copy = test.monthOfYear().plus(1);
+        check(copy, 1972, 2, 29);
+        
+        copy = test.monthOfYear().plus(2);
+        check(copy, 1972, 3, 31);
+        
+        copy = test.monthOfYear().plus(3);
+        check(copy, 1972, 4, 30);
+        
+        test = new LocalDate(1971, 1, 31);
+        copy = test.monthOfYear().plus(1);
+        check(copy, 1971, 2, 28);
+    }
+
+    public void testPropertyPlusWrapFieldMonth() {
+        LocalDate test = new LocalDate(1972, 6, 9);
+        LocalDate copy = test.monthOfYear().plusWrapField(4);
+        check(test, 1972, 6, 9);
+        check(copy, 1972, 10, 9);
+        
+        copy = test.monthOfYear().plusWrapField(8);
+        check(copy, 1972, 2, 9);
+        
+        copy = test.monthOfYear().plusWrapField(-8);
+        check(copy, 1972, 10, 9);
+        
+        test = new LocalDate(1972, 1, 31);
+        copy = test.monthOfYear().plusWrapField(1);
+        check(copy, 1972, 2, 29);
+        
+        copy = test.monthOfYear().plusWrapField(2);
+        check(copy, 1972, 3, 31);
+        
+        copy = test.monthOfYear().plusWrapField(3);
+        check(copy, 1972, 4, 30);
+        
+        test = new LocalDate(1971, 1, 31);
+        copy = test.monthOfYear().plusWrapField(1);
+        check(copy, 1971, 2, 28);
+    }
+
+    public void testPropertyWithMonth() {
+        LocalDate test = new LocalDate(1972, 6, 9);
+        LocalDate copy = test.monthOfYear().withValue(12);
+        check(test, 1972, 6, 9);
+        check(copy, 1972, 12, 9);
+        
+        test = new LocalDate(1972, 1, 31);
+        copy = test.monthOfYear().withValue(2);
+        check(copy, 1972, 2, 29);
+        
+        try {
+            test.monthOfYear().withValue(13);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            test.monthOfYear().withValue(0);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testPropertyWithTextMonth() {
+        LocalDate test = new LocalDate(1972, 6, 9);
+        LocalDate copy = test.monthOfYear().withValue("12");
+        check(test, 1972, 6, 9);
+        check(copy, 1972, 12, 9);
+        
+        copy = test.monthOfYear().withValue("December");
+        check(test, 1972, 6, 9);
+        check(copy, 1972, 12, 9);
+        
+        copy = test.monthOfYear().withValue("Dec");
+        check(test, 1972, 6, 9);
+        check(copy, 1972, 12, 9);
+    }
+
+    public void testPropertyCompareToMonth() {
+        LocalDate test1 = new LocalDate(TEST_TIME1);
+        LocalDate test2 = new LocalDate(TEST_TIME2);
+        assertEquals(true, test1.monthOfYear().compareTo(test2) < 0);
+        assertEquals(true, test2.monthOfYear().compareTo(test1) > 0);
+        assertEquals(true, test1.monthOfYear().compareTo(test1) == 0);
+        try {
+            test1.monthOfYear().compareTo((ReadablePartial) null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        
+        DateTime dt1 = new DateTime(TEST_TIME1);
+        DateTime dt2 = new DateTime(TEST_TIME2);
+        assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0);
+        assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0);
+        assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0);
+        try {
+            test1.monthOfYear().compareTo((ReadableInstant) null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
+    public void testPropertyGetDay() {
+        LocalDate test = new LocalDate(1972, 6, 9);
+        assertSame(test.getChronology().dayOfMonth(), test.dayOfMonth().getField());
+        assertEquals("dayOfMonth", test.dayOfMonth().getName());
+        assertEquals("Property[dayOfMonth]", test.dayOfMonth().toString());
+        assertSame(test, test.dayOfMonth().getLocalDate());
+        assertEquals(9, test.dayOfMonth().get());
+        assertEquals("9", test.dayOfMonth().getAsString());
+        assertEquals("9", test.dayOfMonth().getAsText());
+        assertEquals("9", test.dayOfMonth().getAsText(Locale.FRENCH));
+        assertEquals("9", test.dayOfMonth().getAsShortText());
+        assertEquals("9", test.dayOfMonth().getAsShortText(Locale.FRENCH));
+        assertEquals(test.getChronology().days(), test.dayOfMonth().getDurationField());
+        assertEquals(test.getChronology().months(), test.dayOfMonth().getRangeDurationField());
+        assertEquals(2, test.dayOfMonth().getMaximumTextLength(null));
+        assertEquals(2, test.dayOfMonth().getMaximumShortTextLength(null));
+    }
+
+    public void testPropertyGetMaxMinValuesDay() {
+        LocalDate test = new LocalDate(1972, 6, 9);
+        assertEquals(1, test.dayOfMonth().getMinimumValue());
+        assertEquals(1, test.dayOfMonth().getMinimumValueOverall());
+        assertEquals(30, test.dayOfMonth().getMaximumValue());
+        assertEquals(31, test.dayOfMonth().getMaximumValueOverall());
+        test = new LocalDate(1972, 7, 9);
+        assertEquals(31, test.dayOfMonth().getMaximumValue());
+        test = new LocalDate(1972, 2, 9);
+        assertEquals(29, test.dayOfMonth().getMaximumValue());
+        test = new LocalDate(1971, 2, 9);
+        assertEquals(28, test.dayOfMonth().getMaximumValue());
+    }
+
+    public void testPropertyPlusDay() {
+        LocalDate test = new LocalDate(1972, 6, 9);
+        LocalDate copy = test.dayOfMonth().plus(9);
+        check(test, 1972, 6, 9);
+        check(copy, 1972, 6, 18);
+        
+        copy = test.dayOfMonth().plus(21);
+        check(copy, 1972, 6, 30);
+        
+        copy = test.dayOfMonth().plus(22);
+        check(copy, 1972, 7, 1);
+        
+        copy = test.dayOfMonth().plus(22 + 30);
+        check(copy, 1972, 7, 31);
+        
+        copy = test.dayOfMonth().plus(22 + 31);
+        check(copy, 1972, 8, 1);
+
+        copy = test.dayOfMonth().plus(21 + 31 + 31 + 30 + 31 + 30 + 31);
+        check(copy, 1972, 12, 31);
+        
+        copy = test.dayOfMonth().plus(22 + 31 + 31 + 30 + 31 + 30 + 31);
+        check(copy, 1973, 1, 1);
+        
+        copy = test.dayOfMonth().plus(-8);
+        check(copy, 1972, 6, 1);
+        
+        copy = test.dayOfMonth().plus(-9);
+        check(copy, 1972, 5, 31);
+        
+        copy = test.dayOfMonth().plus(-8 - 31 - 30 - 31 - 29 - 31);
+        check(copy, 1972, 1, 1);
+        
+        copy = test.dayOfMonth().plus(-9 - 31 - 30 - 31 - 29 - 31);
+        check(copy, 1971, 12, 31);
+    }
+
+    public void testPropertyPlusWrapFieldDay() {
+        LocalDate test = new LocalDate(1972, 6, 9);
+        LocalDate copy = test.dayOfMonth().plusWrapField(21);
+        check(test, 1972, 6, 9);
+        check(copy, 1972, 6, 30);
+        
+        copy = test.dayOfMonth().plusWrapField(22);
+        check(copy, 1972, 6, 1);
+        
+        copy = test.dayOfMonth().plusWrapField(-12);
+        check(copy, 1972, 6, 27);
+        
+        test = new LocalDate(1972, 7, 9);
+        copy = test.dayOfMonth().plusWrapField(21);
+        check(copy, 1972, 7, 30);
+    
+        copy = test.dayOfMonth().plusWrapField(22);
+        check(copy, 1972, 7, 31);
+    
+        copy = test.dayOfMonth().plusWrapField(23);
+        check(copy, 1972, 7, 1);
+    
+        copy = test.dayOfMonth().plusWrapField(-12);
+        check(copy, 1972, 7, 28);
+    }
+
+    public void testPropertyWithDay() {
+        LocalDate test = new LocalDate(1972, 6, 9);
+        LocalDate copy = test.dayOfMonth().withValue(12);
+        check(test, 1972, 6, 9);
+        check(copy, 1972, 6, 12);
+        
+        try {
+            test.dayOfMonth().withValue(31);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            test.dayOfMonth().withValue(0);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testPropertyWithTextDay() {
+        LocalDate test = new LocalDate(1972, 6, 9);
+        LocalDate copy = test.dayOfMonth().withValue("12");
+        check(test, 1972, 6, 9);
+        check(copy, 1972, 6, 12);
+    }
+
+    public void testPropertyWithMaximumValueDayOfMonth() {
+        LocalDate test = new LocalDate(1972, 6, 9);
+        LocalDate copy = test.dayOfMonth().withMaximumValue();
+        check(test, 1972, 6, 9);
+        check(copy, 1972, 6, 30);
+    }
+
+    public void testPropertyWithMinimumValueDayOfMonth() {
+        LocalDate test = new LocalDate(1972, 6, 9);
+        LocalDate copy = test.dayOfMonth().withMinimumValue();
+        check(test, 1972, 6, 9);
+        check(copy, 1972, 6, 1);
+    }
+
+    public void testPropertyCompareToDay() {
+        LocalDate test1 = new LocalDate(TEST_TIME1);
+        LocalDate test2 = new LocalDate(TEST_TIME2);
+        assertEquals(true, test1.dayOfMonth().compareTo(test2) < 0);
+        assertEquals(true, test2.dayOfMonth().compareTo(test1) > 0);
+        assertEquals(true, test1.dayOfMonth().compareTo(test1) == 0);
+        try {
+            test1.dayOfMonth().compareTo((ReadablePartial) null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        
+        DateTime dt1 = new DateTime(TEST_TIME1);
+        DateTime dt2 = new DateTime(TEST_TIME2);
+        assertEquals(true, test1.dayOfMonth().compareTo(dt2) < 0);
+        assertEquals(true, test2.dayOfMonth().compareTo(dt1) > 0);
+        assertEquals(true, test1.dayOfMonth().compareTo(dt1) == 0);
+        try {
+            test1.dayOfMonth().compareTo((ReadableInstant) null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testPropertyEquals() {
+        LocalDate test1 = new LocalDate(2005, 11, 8);
+        LocalDate test2 = new LocalDate(2005, 11, 9);
+        LocalDate test3 = new LocalDate(2005, 11, 8, CopticChronology.getInstanceUTC());
+        assertEquals(false, test1.dayOfMonth().equals(test1.year()));
+        assertEquals(false, test1.dayOfMonth().equals(test1.monthOfYear()));
+        assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth()));
+        assertEquals(false, test1.dayOfMonth().equals(test2.year()));
+        assertEquals(false, test1.dayOfMonth().equals(test2.monthOfYear()));
+        assertEquals(false, test1.dayOfMonth().equals(test2.dayOfMonth()));
+        
+        assertEquals(false, test1.monthOfYear().equals(test1.year()));
+        assertEquals(true, test1.monthOfYear().equals(test1.monthOfYear()));
+        assertEquals(false, test1.monthOfYear().equals(test1.dayOfMonth()));
+        assertEquals(false, test1.monthOfYear().equals(test2.year()));
+        assertEquals(true, test1.monthOfYear().equals(test2.monthOfYear()));
+        assertEquals(false, test1.monthOfYear().equals(test2.dayOfMonth()));
+        
+        assertEquals(false, test1.dayOfMonth().equals(null));
+        assertEquals(false, test1.dayOfMonth().equals("any"));
+        
+        // chrono
+        assertEquals(false, test1.dayOfMonth().equals(test3.dayOfMonth()));
+    }
+
+    public void testPropertyHashCode() {
+        LocalDate test1 = new LocalDate(2005, 11, 8);
+        LocalDate test2 = new LocalDate(2005, 11, 9);
+        assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode());
+        assertEquals(false, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());
+        assertEquals(true, test1.monthOfYear().hashCode() == test1.monthOfYear().hashCode());
+        assertEquals(true, test1.monthOfYear().hashCode() == test2.monthOfYear().hashCode());
+    }
+
+    //-----------------------------------------------------------------------
+    private void check(LocalDate test, int year, int month, int day) {
+        assertEquals(year, test.getYear());
+        assertEquals(month, test.getMonthOfYear());
+        assertEquals(day, test.getDayOfMonth());
+    }
+}

From 8a47b508406a9d143348d72a146efb3ee7fa7157 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 18 Mar 2006 23:26:42 +0000
Subject: [PATCH 052/115] Refine methods, constructors and javadoc

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1049 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/java/org/joda/time/LocalDateTime.java | 630 +++++++++++++-----
 1 file changed, 446 insertions(+), 184 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/LocalDateTime.java b/JodaTime/src/java/org/joda/time/LocalDateTime.java
index 4c52662c0..e3fc5fdfe 100644
--- a/JodaTime/src/java/org/joda/time/LocalDateTime.java
+++ b/JodaTime/src/java/org/joda/time/LocalDateTime.java
@@ -71,7 +71,7 @@
  * All standard Chronology classes supplied are thread-safe and immutable.
  *
  * @author Stephen Colebourne
- * @since 1.0
+ * @since 1.3
  */
 public final class LocalDateTime
         extends AbstractPartial
@@ -92,43 +92,6 @@
     /** The chronology to use in UTC */
     private Chronology iChronology;
 
-    //-----------------------------------------------------------------------
-    /**
-     * Constructs an instance set to the current local time evaluated using
-     * ISO chronology in the default zone.
-     * <p>
-     * Once the constructor is completed, the zone is no longer used.
-     */
-    public static LocalDateTime nowDefaultZone() {
-        return forInstant(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance());
-    }
-
-    /**
-     * Constructs an instance set to the current local time evaluated using
-     * ISO chronology in the specified zone.
-     * <p>
-     * If the specified time zone is null, the default zone is used.
-     * Once the constructor is completed, the zone is no longer used.
-     *
-     * @param zone  the time zone, null means default zone
-     */
-    public static LocalDateTime now(DateTimeZone zone) {
-        return forInstant(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(zone));
-    }
-
-    /**
-     * Constructs an instance set to the current local time evaluated using
-     * specified chronology.
-     * <p>
-     * If the chronology is null, ISO chronology in the default time zone is used.
-     * Once the constructor is completed, the zone is no longer used.
-     *
-     * @param chronology  the chronology, null means ISOChronology in default zone
-     */
-    public static LocalDateTime now(Chronology chronology) {
-        return forInstant(DateTimeUtils.currentTimeMillis(), chronology);
-    }
-
     //-----------------------------------------------------------------------
     /**
      * Constructs a LocalDateTime from a <code>java.util.Calendar</code>
@@ -193,6 +156,43 @@ public static LocalDateTime forFields(Date date) {
         );
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Constructs an instance set to the current local time evaluated using
+     * ISO chronology in the default zone.
+     * <p>
+     * Once the constructor is completed, the zone is no longer used.
+     */
+    public LocalDateTime() {
+        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance());
+    }
+
+    /**
+     * Constructs an instance set to the current local time evaluated using
+     * ISO chronology in the specified zone.
+     * <p>
+     * If the specified time zone is null, the default zone is used.
+     * Once the constructor is completed, the zone is no longer used.
+     *
+     * @param zone  the time zone, null means default zone
+     */
+    public LocalDateTime(DateTimeZone zone) {
+        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(zone));
+    }
+
+    /**
+     * Constructs an instance set to the current local time evaluated using
+     * specified chronology.
+     * <p>
+     * If the chronology is null, ISO chronology in the default time zone is used.
+     * Once the constructor is completed, the zone is no longer used.
+     *
+     * @param chronology  the chronology, null means ISOChronology in default zone
+     */
+    public LocalDateTime(Chronology chronology) {
+        this(DateTimeUtils.currentTimeMillis(), chronology);
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Constructs an instance set to the local time defined by the specified
@@ -202,8 +202,8 @@ public static LocalDateTime forFields(Date date) {
      *
      * @param instant  the milliseconds from 1970-01-01T00:00:00Z
      */
-    public static LocalDateTime forInstantDefaultZone(long instant) {
-        return forInstant(instant, ISOChronology.getInstance());
+    public LocalDateTime(long instant) {
+        this(instant, ISOChronology.getInstance());
     }
 
     /**
@@ -216,8 +216,8 @@ public static LocalDateTime forInstantDefaultZone(long instant) {
      * @param instant  the milliseconds from 1970-01-01T00:00:00Z
      * @param zone  the time zone, null means default zone
      */
-    public static LocalDateTime forInstant(long instant, DateTimeZone zone) {
-        return forInstant(instant, ISOChronology.getInstance(zone));
+    public LocalDateTime(long instant, DateTimeZone zone) {
+        this(instant, ISOChronology.getInstance(zone));
     }
 
     /**
@@ -230,10 +230,12 @@ public static LocalDateTime forInstant(long instant, DateTimeZone zone) {
      * @param instant  the milliseconds from 1970-01-01T00:00:00Z
      * @param chronology  the chronology, null means ISOChronology in default zone
      */
-    public static LocalDateTime forInstant(long instant, Chronology chronology) {
+    public LocalDateTime(long instant, Chronology chronology) {
         chronology = DateTimeUtils.getChronology(chronology);
+        
         long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);
-        return new LocalDateTime(localMillis, chronology.withUTC());
+        iLocalMillis = localMillis;
+        iChronology = chronology.withUTC();
     }
 
     //-----------------------------------------------------------------------
@@ -251,8 +253,8 @@ public static LocalDateTime forInstant(long instant, Chronology chronology) {
      * @param instant  the datetime object
      * @throws IllegalArgumentException if the instant is invalid
      */
-    public static LocalDateTime forInstant(Object instant) {
-        return forInstant(instant, (Chronology) null);
+    public LocalDateTime(Object instant) {
+        this(instant, (Chronology) null);
     }
 
     /**
@@ -271,12 +273,15 @@ public static LocalDateTime forInstant(Object instant) {
      * @param zone  the time zone
      * @throws IllegalArgumentException if the instant is invalid
      */
-    public static LocalDateTime forInstant(Object instant, DateTimeZone zone) {
+    public LocalDateTime(Object instant, DateTimeZone zone) {
         InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
-        Chronology chrono = converter.getChronology(instant, zone);
-        long millis = converter.getInstantMillis(instant, chrono);
-        chrono = DateTimeUtils.getChronology(chrono);
-        return forInstant(millis, chrono);
+        Chronology chronology = converter.getChronology(instant, zone);
+        long millis = converter.getInstantMillis(instant, chronology);
+        chronology = DateTimeUtils.getChronology(chronology);
+        
+        long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, millis);
+        iLocalMillis = localMillis;
+        iChronology = chronology.withUTC();
     }
 
     /**
@@ -294,24 +299,14 @@ public static LocalDateTime forInstant(Object instant, DateTimeZone zone) {
      * @param chronology  the chronology
      * @throws IllegalArgumentException if the instant is invalid
      */
-    public static LocalDateTime forInstant(Object instant, Chronology chronology) {
+    public LocalDateTime(Object instant, Chronology chronology) {
         InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
         Chronology chrono = DateTimeUtils.getChronology(converter.getChronology(instant, chronology));
-        long millis = converter.getInstantMillis(instant, chronology);
-        return forInstant(millis, chrono);
-    }
-
-    /**
-     * Constructs an instance set to the local time defined by the specified
-     * instant evaluated using the specified local (UTC) chronology.
-     *
-     * @param localMillis  the local milliseconds from 1970-01-01T00:00:00
-     * @param chronology  the UTC chronology, not null
-     */
-    LocalDateTime(long localMillis, Chronology chronology) {
-        super();
+        long millis = converter.getInstantMillis(instant, chrono);
+        
+        long localMillis = chrono.getZone().getMillisKeepLocal(DateTimeZone.UTC, millis);
         iLocalMillis = localMillis;
-        iChronology = chronology;
+        iChronology = chrono.withUTC();
     }
 
     //-----------------------------------------------------------------------
@@ -506,11 +501,25 @@ public boolean isSupported(DateTimeFieldType type) {
         return type.getField(getChronology()).isSupported();
     }
 
+    /**
+     * Checks if the duration type specified is supported by this
+     * local datetime and chronology.
+     *
+     * @param type  a duration type, usually obtained from DurationFieldType
+     * @return true if the field type is supported
+     */
+    public boolean isSupported(DurationFieldType type) {
+        if (type == null) {
+            return false;
+        }
+        return type.getField(getChronology()).isSupported();
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Gets the milliseconds of the datetime instant from the Java epoch
      * of 1970-01-01T00:00:00 (not fixed to any specific time zone).
-     * 
+     *
      * @return the number of milliseconds since 1970-01-01T00:00:00
      */
     long getLocalMillis() {
@@ -519,7 +528,7 @@ long getLocalMillis() {
 
     /**
      * Gets the chronology of the datetime.
-     * 
+     *
      * @return the Chronology that the datetime is using
      */
     public Chronology getChronology() {
@@ -528,16 +537,16 @@ public Chronology getChronology() {
 
     //-----------------------------------------------------------------------
     /**
-     * Get this object as a DateTime using the default zone.
+     * Converts this object to a DateTime using the default zone.
      * 
      * @return <code>this</code>
      */
-    public DateTime toDateTimeDefaultZone() {
+    public DateTime toDateTime() {
         return toDateTime((DateTimeZone) null);
     }
 
     /**
-     * Get this object as a DateTime using the specified zone.
+     * Converts this object to a DateTime using the specified zone.
      * 
      * @param zone time zone to apply, or default if null
      * @return a DateTime using the same millis
@@ -551,19 +560,19 @@ public DateTime toDateTime(DateTimeZone zone) {
     //-----------------------------------------------------------------------
     /**
      * Converts this object to a LocalDate with the same date and chronology.
-     * 
+     *
      * @return a LocalDate with the same date and chronology
      */
-    public LocalDate getDate() {
+    public LocalDate toLocalDate() {
         return new LocalDate(getLocalMillis(), getChronology());
     }
 
     /**
      * Converts this object to a LocalTime with the same time and chronology.
-     * 
+     *
      * @return a LocalTime with the same time and chronology
      */
-    public LocalTime getTime() {
+    public LocalTime toLocalTime() {
         return new LocalTime(getLocalMillis(), getChronology());
     }
 
@@ -584,7 +593,8 @@ LocalDateTime withLocalMillis(long newMillis) {
 
     //-----------------------------------------------------------------------
     /**
-     * Gets a copy of this datetime with the specified date, retaining the time fields.
+     * Gets a copy of this LocalDateTime with the specified date,
+     * retaining the time fields.
      * <p>
      * If the date is already the date passed in, then <code>this</code> is returned.
      * <p>
@@ -609,7 +619,8 @@ public LocalDateTime withDate(int year, int monthOfYear, int dayOfMonth) {
     }
 
     /**
-     * Gets a copy of this datetime with the specified time, retaining the date fields.
+     * Gets a copy of this LocalDateTime with the specified time,
+     * retaining the date fields.
      * <p>
      * If the time is already the time passed in, then <code>this</code> is returned.
      * <p>
@@ -637,8 +648,8 @@ public LocalDateTime withTime(int hourOfDay, int minuteOfHour, int secondOfMinut
 
     //-----------------------------------------------------------------------
     /**
-     * Gets a copy of this datetime with the partial set of fields replacing those
-     * from this instance.
+     * Gets a copy of this LocalDateTime with the partial set of fields
+     * replacing those from this instance.
      * <p>
      * For example, if the partial is a <code>TimeOfDay</code> then the time fields
      * would be changed in the returned instance.
@@ -656,7 +667,7 @@ public LocalDateTime withFields(ReadablePartial partial) {
     }
 
     /**
-     * Gets a copy of this datetime with the specified field set to a new value.
+     * Gets a copy of this LocalDateTime with the specified field set to a new value.
      * <p>
      * For example, if the field type is <code>hourOfDay</code> then the hour of day
      * field would be changed in the returned instance.
@@ -683,7 +694,8 @@ public LocalDateTime withField(DateTimeFieldType fieldType, int value) {
     }
 
     /**
-     * Gets a copy of this datetime with the value of the specified field increased.
+     * Gets a copy of this LocalDateTime with the value of the specified
+     * field increased.
      * <p>
      * If the addition is zero or the field is null, then <code>this</code> is returned.
      * <p>
@@ -693,7 +705,7 @@ public LocalDateTime withField(DateTimeFieldType fieldType, int value) {
      * LocalDateTime added = dt.plusYears(6);
      * LocalDateTime added = dt.plus(Period.years(6));
      * </pre>
-     * 
+     *
      * @param fieldType  the field type to add to, not null
      * @param amount  the amount to add
      * @return a copy of this datetime with the field updated
@@ -713,10 +725,10 @@ public LocalDateTime withFieldAdded(DurationFieldType fieldType, int amount) {
 
     //-----------------------------------------------------------------------
     /**
-     * Gets a copy of this datetime with the specified duration added.
+     * Gets a copy of this LocalDateTime with the specified duration added.
      * <p>
      * If the addition is zero, then <code>this</code> is returned.
-     * 
+     *
      * @param durationToAdd  the duration to add to this one, null means zero
      * @param scalar  the amount of times to add, such as -1 to subtract once
      * @return a copy of this datetime with the duration added
@@ -731,7 +743,7 @@ public LocalDateTime withDurationAdded(ReadableDuration durationToAdd, int scala
     }
 
     /**
-     * Gets a copy of this datetime with the specified period added.
+     * Gets a copy of this LocalDateTime with the specified period added.
      * <p>
      * If the addition is zero, then <code>this</code> is returned.
      * <p>
@@ -739,7 +751,7 @@ public LocalDateTime withDurationAdded(ReadableDuration durationToAdd, int scala
      * period instances. Adding one field is best achieved using methods
      * like {@link #withFieldAdded(DurationFieldType, int)}
      * or {@link #plusYears(int)}.
-     * 
+     *
      * @param period  the period to add to this one, null means zero
      * @param scalar  the amount of times to add, such as -1 to subtract once
      * @return a copy of this datetime with the period added
@@ -755,10 +767,10 @@ public LocalDateTime withPeriodAdded(ReadablePeriod period, int scalar) {
 
     //-----------------------------------------------------------------------
     /**
-     * Gets a copy of this datetime with the specified duration added.
+     * Gets a copy of this LocalDateTime with the specified duration added.
      * <p>
      * If the amount is zero or null, then <code>this</code> is returned.
-     * 
+     *
      * @param duration  the duration to add to this one, null means zero
      * @return a copy of this datetime with the duration added
      * @throws ArithmeticException if the result exceeds the internal capacity
@@ -768,14 +780,14 @@ public LocalDateTime plus(ReadableDuration duration) {
     }
 
     /**
-     * Gets a copy of this datetime with the specified period added.
+     * Gets a copy of this LocalDateTime with the specified period added.
      * <p>
      * If the amount is zero or null, then <code>this</code> is returned.
      * <p>
      * This method is typically used to add complex period instances.
      * Adding one field is best achieved using methods
      * like {@link #plusYears(int)}.
-     * 
+     *
      * @param period  the period to add to this one, null means zero
      * @return a copy of this datetime with the period added
      * @throws ArithmeticException if the result exceeds the internal capacity
@@ -786,9 +798,9 @@ public LocalDateTime plus(ReadablePeriod period) {
 
     //-----------------------------------------------------------------------
     /**
-     * Returns a new datetime plus the specified number of years.
+     * Returns a new LocalDateTime plus the specified number of years.
      * <p>
-     * This datetime instance is immutable and unaffected by this method call.
+     * This LocalDateTime instance is immutable and unaffected by this method call.
      * <p>
      * The following three lines are identical in effect:
      * <pre>
@@ -798,7 +810,7 @@ public LocalDateTime plus(ReadablePeriod period) {
      * </pre>
      *
      * @param years  the amount of years to add, may be negative
-     * @return the new datetime plus the increased years
+     * @return the new LocalDateTime plus the increased years
      */
     public LocalDateTime plusYears(int years) {
         if (years == 0) {
@@ -809,9 +821,9 @@ public LocalDateTime plusYears(int years) {
     }
 
     /**
-     * Returns a new datetime plus the specified number of months.
+     * Returns a new LocalDateTime plus the specified number of months.
      * <p>
-     * This datetime instance is immutable and unaffected by this method call.
+     * This LocalDateTime instance is immutable and unaffected by this method call.
      * <p>
      * The following three lines are identical in effect:
      * <pre>
@@ -821,7 +833,7 @@ public LocalDateTime plusYears(int years) {
      * </pre>
      *
      * @param months  the amount of months to add, may be negative
-     * @return the new datetime plus the increased months
+     * @return the new LocalDateTime plus the increased months
      */
     public LocalDateTime plusMonths(int months) {
         if (months == 0) {
@@ -832,9 +844,9 @@ public LocalDateTime plusMonths(int months) {
     }
 
     /**
-     * Returns a new datetime plus the specified number of weeks.
+     * Returns a new LocalDateTime plus the specified number of weeks.
      * <p>
-     * This datetime instance is immutable and unaffected by this method call.
+     * This LocalDateTime instance is immutable and unaffected by this method call.
      * <p>
      * The following three lines are identical in effect:
      * <pre>
@@ -844,7 +856,7 @@ public LocalDateTime plusMonths(int months) {
      * </pre>
      *
      * @param weeks  the amount of weeks to add, may be negative
-     * @return the new datetime plus the increased weeks
+     * @return the new LocalDateTime plus the increased weeks
      */
     public LocalDateTime plusWeeks(int weeks) {
         if (weeks == 0) {
@@ -855,9 +867,9 @@ public LocalDateTime plusWeeks(int weeks) {
     }
 
     /**
-     * Returns a new datetime plus the specified number of days.
+     * Returns a new LocalDateTime plus the specified number of days.
      * <p>
-     * This datetime instance is immutable and unaffected by this method call.
+     * This LocalDateTime instance is immutable and unaffected by this method call.
      * <p>
      * The following three lines are identical in effect:
      * <pre>
@@ -867,7 +879,7 @@ public LocalDateTime plusWeeks(int weeks) {
      * </pre>
      *
      * @param days  the amount of days to add, may be negative
-     * @return the new datetime plus the increased days
+     * @return the new LocalDateTime plus the increased days
      */
     public LocalDateTime plusDays(int days) {
         if (days == 0) {
@@ -877,10 +889,11 @@ public LocalDateTime plusDays(int days) {
         return withLocalMillis(instant);
     }
 
+    //-----------------------------------------------------------------------
     /**
-     * Returns a new datetime plus the specified number of hours.
+     * Returns a new LocalDateTime plus the specified number of hours.
      * <p>
-     * This datetime instance is immutable and unaffected by this method call.
+     * This LocalDateTime instance is immutable and unaffected by this method call.
      * <p>
      * The following three lines are identical in effect:
      * <pre>
@@ -890,7 +903,7 @@ public LocalDateTime plusDays(int days) {
      * </pre>
      *
      * @param hours  the amount of hours to add, may be negative
-     * @return the new datetime plus the increased hours
+     * @return the new LocalDateTime plus the increased hours
      */
     public LocalDateTime plusHours(int hours) {
         if (hours == 0) {
@@ -901,9 +914,9 @@ public LocalDateTime plusHours(int hours) {
     }
 
     /**
-     * Returns a new datetime plus the specified number of minutes.
+     * Returns a new LocalDateTime plus the specified number of minutes.
      * <p>
-     * This datetime instance is immutable and unaffected by this method call.
+     * This LocalDateTime instance is immutable and unaffected by this method call.
      * <p>
      * The following three lines are identical in effect:
      * <pre>
@@ -913,7 +926,7 @@ public LocalDateTime plusHours(int hours) {
      * </pre>
      *
      * @param minutes  the amount of minutes to add, may be negative
-     * @return the new datetime plus the increased minutes
+     * @return the new LocalDateTime plus the increased minutes
      */
     public LocalDateTime plusMinutes(int minutes) {
         if (minutes == 0) {
@@ -924,9 +937,9 @@ public LocalDateTime plusMinutes(int minutes) {
     }
 
     /**
-     * Returns a new datetime plus the specified number of seconds.
+     * Returns a new LocalDateTime plus the specified number of seconds.
      * <p>
-     * This datetime instance is immutable and unaffected by this method call.
+     * This LocalDateTime instance is immutable and unaffected by this method call.
      * <p>
      * The following three lines are identical in effect:
      * <pre>
@@ -936,7 +949,7 @@ public LocalDateTime plusMinutes(int minutes) {
      * </pre>
      *
      * @param seconds  the amount of seconds to add, may be negative
-     * @return the new datetime plus the increased seconds
+     * @return the new LocalDateTime plus the increased seconds
      */
     public LocalDateTime plusSeconds(int seconds) {
         if (seconds == 0) {
@@ -947,9 +960,9 @@ public LocalDateTime plusSeconds(int seconds) {
     }
 
     /**
-     * Returns a new datetime plus the specified number of millis.
+     * Returns a new LocalDateTime plus the specified number of millis.
      * <p>
-     * This datetime instance is immutable and unaffected by this method call.
+     * This LocalDateTime instance is immutable and unaffected by this method call.
      * <p>
      * The following three lines are identical in effect:
      * <pre>
@@ -959,7 +972,7 @@ public LocalDateTime plusSeconds(int seconds) {
      * </pre>
      *
      * @param millis  the amount of millis to add, may be negative
-     * @return the new datetime plus the increased millis
+     * @return the new LocalDateTime plus the increased millis
      */
     public LocalDateTime plusMillis(int millis) {
         if (millis == 0) {
@@ -971,10 +984,10 @@ public LocalDateTime plusMillis(int millis) {
 
     //-----------------------------------------------------------------------
     /**
-     * Gets a copy of this datetime with the specified duration taken away.
+     * Gets a copy of this LocalDateTime with the specified duration taken away.
      * <p>
      * If the amount is zero or null, then <code>this</code> is returned.
-     * 
+     *
      * @param duration  the duration to reduce this instant by
      * @return a copy of this datetime with the duration taken away
      * @throws ArithmeticException if the result exceeds the internal capacity
@@ -984,14 +997,14 @@ public LocalDateTime minus(ReadableDuration duration) {
     }
 
     /**
-     * Gets a copy of this datetime with the specified period taken away.
+     * Gets a copy of this LocalDateTime with the specified period taken away.
      * <p>
      * If the amount is zero or null, then <code>this</code> is returned.
      * <p>
      * This method is typically used to subtract complex period instances.
      * Subtracting one field is best achieved using methods
      * like {@link #minusYears(int)}.
-     * 
+     *
      * @param period  the period to reduce this instant by
      * @return a copy of this datetime with the period taken away
      * @throws ArithmeticException if the result exceeds the internal capacity
@@ -1002,9 +1015,9 @@ public LocalDateTime minus(ReadablePeriod period) {
 
     //-----------------------------------------------------------------------
     /**
-     * Returns a new datetime minus the specified number of years.
+     * Returns a new LocalDateTime minus the specified number of years.
      * <p>
-     * This datetime instance is immutable and unaffected by this method call.
+     * This LocalDateTime instance is immutable and unaffected by this method call.
      * <p>
      * The following three lines are identical in effect:
      * <pre>
@@ -1014,7 +1027,7 @@ public LocalDateTime minus(ReadablePeriod period) {
      * </pre>
      *
      * @param years  the amount of years to subtract, may be negative
-     * @return the new datetime minus the increased years
+     * @return the new LocalDateTime minus the increased years
      */
     public LocalDateTime minusYears(int years) {
         if (years == 0) {
@@ -1025,9 +1038,9 @@ public LocalDateTime minusYears(int years) {
     }
 
     /**
-     * Returns a new datetime minus the specified number of months.
+     * Returns a new LocalDateTime minus the specified number of months.
      * <p>
-     * This datetime instance is immutable and unaffected by this method call.
+     * This LocalDateTime instance is immutable and unaffected by this method call.
      * <p>
      * The following three lines are identical in effect:
      * <pre>
@@ -1037,7 +1050,7 @@ public LocalDateTime minusYears(int years) {
      * </pre>
      *
      * @param months  the amount of months to subtract, may be negative
-     * @return the new datetime minus the increased months
+     * @return the new LocalDateTime minus the increased months
      */
     public LocalDateTime minusMonths(int months) {
         if (months == 0) {
@@ -1048,9 +1061,9 @@ public LocalDateTime minusMonths(int months) {
     }
 
     /**
-     * Returns a new datetime minus the specified number of weeks.
+     * Returns a new LocalDateTime minus the specified number of weeks.
      * <p>
-     * This datetime instance is immutable and unaffected by this method call.
+     * This LocalDateTime instance is immutable and unaffected by this method call.
      * <p>
      * The following three lines are identical in effect:
      * <pre>
@@ -1060,7 +1073,7 @@ public LocalDateTime minusMonths(int months) {
      * </pre>
      *
      * @param weeks  the amount of weeks to subtract, may be negative
-     * @return the new datetime minus the increased weeks
+     * @return the new LocalDateTime minus the increased weeks
      */
     public LocalDateTime minusWeeks(int weeks) {
         if (weeks == 0) {
@@ -1071,9 +1084,9 @@ public LocalDateTime minusWeeks(int weeks) {
     }
 
     /**
-     * Returns a new datetime minus the specified number of days.
+     * Returns a new LocalDateTime minus the specified number of days.
      * <p>
-     * This datetime instance is immutable and unaffected by this method call.
+     * This LocalDateTime instance is immutable and unaffected by this method call.
      * <p>
      * The following three lines are identical in effect:
      * <pre>
@@ -1083,7 +1096,7 @@ public LocalDateTime minusWeeks(int weeks) {
      * </pre>
      *
      * @param days  the amount of days to subtract, may be negative
-     * @return the new datetime minus the increased days
+     * @return the new LocalDateTime minus the increased days
      */
     public LocalDateTime minusDays(int days) {
         if (days == 0) {
@@ -1093,10 +1106,11 @@ public LocalDateTime minusDays(int days) {
         return withLocalMillis(instant);
     }
 
+    //-----------------------------------------------------------------------
     /**
-     * Returns a new datetime minus the specified number of hours.
+     * Returns a new LocalDateTime minus the specified number of hours.
      * <p>
-     * This datetime instance is immutable and unaffected by this method call.
+     * This LocalDateTime instance is immutable and unaffected by this method call.
      * <p>
      * The following three lines are identical in effect:
      * <pre>
@@ -1106,7 +1120,7 @@ public LocalDateTime minusDays(int days) {
      * </pre>
      *
      * @param hours  the amount of hours to subtract, may be negative
-     * @return the new datetime minus the increased hours
+     * @return the new LocalDateTime minus the increased hours
      */
     public LocalDateTime minusHours(int hours) {
         if (hours == 0) {
@@ -1117,9 +1131,9 @@ public LocalDateTime minusHours(int hours) {
     }
 
     /**
-     * Returns a new datetime minus the specified number of minutes.
+     * Returns a new LocalDateTime minus the specified number of minutes.
      * <p>
-     * This datetime instance is immutable and unaffected by this method call.
+     * This LocalDateTime instance is immutable and unaffected by this method call.
      * <p>
      * The following three lines are identical in effect:
      * <pre>
@@ -1129,7 +1143,7 @@ public LocalDateTime minusHours(int hours) {
      * </pre>
      *
      * @param minutes  the amount of minutes to subtract, may be negative
-     * @return the new datetime minus the increased minutes
+     * @return the new LocalDateTime minus the increased minutes
      */
     public LocalDateTime minusMinutes(int minutes) {
         if (minutes == 0) {
@@ -1140,9 +1154,9 @@ public LocalDateTime minusMinutes(int minutes) {
     }
 
     /**
-     * Returns a new datetime minus the specified number of seconds.
+     * Returns a new LocalDateTime minus the specified number of seconds.
      * <p>
-     * This datetime instance is immutable and unaffected by this method call.
+     * This LocalDateTime instance is immutable and unaffected by this method call.
      * <p>
      * The following three lines are identical in effect:
      * <pre>
@@ -1152,7 +1166,7 @@ public LocalDateTime minusMinutes(int minutes) {
      * </pre>
      *
      * @param seconds  the amount of seconds to subtract, may be negative
-     * @return the new datetime minus the increased seconds
+     * @return the new LocalDateTime minus the increased seconds
      */
     public LocalDateTime minusSeconds(int seconds) {
         if (seconds == 0) {
@@ -1163,9 +1177,9 @@ public LocalDateTime minusSeconds(int seconds) {
     }
 
     /**
-     * Returns a new datetime minus the specified number of millis.
+     * Returns a new LocalDateTime minus the specified number of millis.
      * <p>
-     * This datetime instance is immutable and unaffected by this method call.
+     * This LocalDateTime instance is immutable and unaffected by this method call.
      * <p>
      * The following three lines are identical in effect:
      * <pre>
@@ -1175,7 +1189,7 @@ public LocalDateTime minusSeconds(int seconds) {
      * </pre>
      *
      * @param millis  the amount of millis to subtract, may be negative
-     * @return the new datetime minus the increased millis
+     * @return the new LocalDateTime minus the increased millis
      */
     public LocalDateTime minusMillis(int millis) {
         if (millis == 0) {
@@ -1187,27 +1201,27 @@ public LocalDateTime minusMillis(int millis) {
 
     //-----------------------------------------------------------------------
     /**
-     * Gets the property object for the specified type, which contains many useful methods.
+     * Gets the property object for the specified type, which contains many
+     * useful methods.
      *
-     * @param type  the field type to get the chronology for
+     * @param fieldType  the field type to get the chronology for
      * @return the property object
      * @throws IllegalArgumentException if the field is null or unsupported
      */
-    public Property property(DateTimeFieldType type) {
-        if (type == null) {
+    public Property property(DateTimeFieldType fieldType) {
+        if (fieldType == null) {
             throw new IllegalArgumentException("The DateTimeFieldType must not be null");
         }
-        DateTimeField field = type.getField(getChronology());
-        if (field.isSupported() == false) {
-            throw new IllegalArgumentException("Field '" + type + "' is not supported");
+        if (isSupported(fieldType) == false) {
+            throw new IllegalArgumentException("Field '" + fieldType + "' is not supported");
         }
-        return new Property(this, field);
+        return new Property(this, fieldType.getField(getChronology()));
     }
 
     //-----------------------------------------------------------------------
     /**
      * Get the era field value.
-     * 
+     *
      * @return the era
      */
     public int getEra() {
@@ -1216,7 +1230,7 @@ public int getEra() {
 
     /**
      * Get the year of era field value.
-     * 
+     *
      * @return the year of era
      */
     public int getCenturyOfEra() {
@@ -1225,7 +1239,7 @@ public int getCenturyOfEra() {
 
     /**
      * Get the year of era field value.
-     * 
+     *
      * @return the year of era
      */
     public int getYearOfEra() {
@@ -1234,7 +1248,7 @@ public int getYearOfEra() {
 
     /**
      * Get the year of century field value.
-     * 
+     *
      * @return the year of century
      */
     public int getYearOfCentury() {
@@ -1243,7 +1257,7 @@ public int getYearOfCentury() {
 
     /**
      * Get the year field value.
-     * 
+     *
      * @return the year
      */
     public int getYear() {
@@ -1252,8 +1266,14 @@ public int getYear() {
 
     /**
      * Get the weekyear field value.
-     * 
-     * @return the year of a week based year
+     * <p>
+     * The weekyear is the year that matches with the weekOfWeekyear field.
+     * In the standard ISO8601 week algorithm, the first week of the year
+     * is that in which at least 4 days are in the year. As a result of this
+     * definition, day 1 of the first week may be in the previous year.
+     * The weekyear allows you to query the effective year for that day.
+     *
+     * @return the weekyear
      */
     public int getWeekyear() {
         return getChronology().weekyear().get(getLocalMillis());
@@ -1261,7 +1281,7 @@ public int getWeekyear() {
 
     /**
      * Get the month of year field value.
-     * 
+     *
      * @return the month of year
      */
     public int getMonthOfYear() {
@@ -1270,7 +1290,7 @@ public int getMonthOfYear() {
 
     /**
      * Get the week of weekyear field value.
-     * 
+     *
      * @return the week of a week based year
      */
     public int getWeekOfWeekyear() {
@@ -1279,7 +1299,7 @@ public int getWeekOfWeekyear() {
 
     /**
      * Get the day of year field value.
-     * 
+     *
      * @return the day of year
      */
     public int getDayOfYear() {
@@ -1290,7 +1310,7 @@ public int getDayOfYear() {
      * Get the day of month field value.
      * <p>
      * The values for the day of month are defined in {@link org.joda.time.DateTimeConstants}.
-     * 
+     *
      * @return the day of month
      */
     public int getDayOfMonth() {
@@ -1301,7 +1321,7 @@ public int getDayOfMonth() {
      * Get the day of week field value.
      * <p>
      * The values for the day of week are defined in {@link org.joda.time.DateTimeConstants}.
-     * 
+     *
      * @return the day of week
      */
     public int getDayOfWeek() {
@@ -1345,10 +1365,252 @@ public int getMillisOfSecond() {
         return getChronology().millisOfSecond().get(getLocalMillis());
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Sets the era field in a copy of this LocalDateTime, leaving this
+     * instance unchanged.
+     * <p>
+     * LocalDateTime is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * era changed.
+     *
+     * @param era  the era to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public LocalDateTime withEra(int era) {
+        return withLocalMillis(getChronology().era().set(getLocalMillis(), era));
+    }
+
+    /**
+     * Sets the century of era field in a copy of this LocalDateTime, leaving this
+     * instance unchanged.
+     * <p>
+     * LocalDateTime is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * century of era changed.
+     *
+     * @param centuryOfEra  the centurey of era to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public LocalDateTime withCenturyOfEra(int centuryOfEra) {
+        return withLocalMillis(getChronology().centuryOfEra().set(getLocalMillis(), centuryOfEra));
+    }
+
+    /**
+     * Sets the year of era field in a copy of this LocalDateTime, leaving this
+     * instance unchanged.
+     * <p>
+     * LocalDateTime is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * year of era changed.
+     *
+     * @param yearOfEra  the year of era to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public LocalDateTime withYearOfEra(int yearOfEra) {
+        return withLocalMillis(getChronology().yearOfEra().set(getLocalMillis(), yearOfEra));
+    }
+
+    /**
+     * Sets the year of century field in a copy of this LocalDateTime, leaving this
+     * instance unchanged.
+     * <p>
+     * LocalDateTime is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * year of century changed.
+     *
+     * @param year of century  the year of century to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public LocalDateTime withYearOfCentury(int yearOfCentury) {
+        return withLocalMillis(getChronology().yearOfCentury().set(getLocalMillis(), yearOfCentury));
+    }
+
+    /**
+     * Sets the year field in a copy of this LocalDateTime, leaving this
+     * instance unchanged.
+     * <p>
+     * LocalDateTime is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * year changed.
+     *
+     * @param year  the year to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public LocalDateTime withYear(int year) {
+        return withLocalMillis(getChronology().year().set(getLocalMillis(), year));
+    }
+
+    /**
+     * Sets the weekyear field in a copy of this LocalDateTime, leaving this
+     * instance unchanged.
+     * <p>
+     * LocalDateTime is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * weekyear changed.
+     *
+     * @param weekyear  the weekyear to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public LocalDateTime withWeekyear(int weekyear) {
+        return withLocalMillis(getChronology().weekyear().set(getLocalMillis(), weekyear));
+    }
+
+    /**
+     * Sets the month of year field in a copy of this LocalDateTime, leaving this
+     * instance unchanged.
+     * <p>
+     * LocalDateTime is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * month of year changed.
+     *
+     * @param monthOfYear  the month of year to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public LocalDateTime withMonthOfYear(int monthOfYear) {
+        return withLocalMillis(getChronology().monthOfYear().set(getLocalMillis(), monthOfYear));
+    }
+
+    /**
+     * Sets the week of weekyear field in a copy of this LocalDateTime, leaving this
+     * instance unchanged.
+     * <p>
+     * LocalDateTime is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * week of weekyear changed.
+     *
+     * @param weekOfWeekyear  the week of weekyear to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public LocalDateTime withWeekOfWeekyear(int weekOfWeekyear) {
+        return withLocalMillis(getChronology().weekOfWeekyear().set(getLocalMillis(), weekOfWeekyear));
+    }
+
+    /**
+     * Sets the day of year field in a copy of this LocalDateTime, leaving this
+     * instance unchanged.
+     * <p>
+     * LocalDateTime is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * day of year changed.
+     *
+     * @param dayOfYear  the day of year to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public LocalDateTime withDayOfYear(int dayOfYear) {
+        return withLocalMillis(getChronology().dayOfYear().set(getLocalMillis(), dayOfYear));
+    }
+
+    /**
+     * Sets the day of month field in a copy of this LocalDateTime, leaving this
+     * instance unchanged.
+     * <p>
+     * LocalDateTime is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * day of month changed.
+     *
+     * @param dayOfMonth  the day of month to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public LocalDateTime withDayOfMonth(int dayOfMonth) {
+        return withLocalMillis(getChronology().dayOfMonth().set(getLocalMillis(), dayOfMonth));
+    }
+
+    /**
+     * Sets the day of week field in a copy of this LocalDateTime, leaving this
+     * instance unchanged.
+     * <p>
+     * LocalDateTime is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * day of week changed.
+     *
+     * @param dayOfWeek  the day of week to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public LocalDateTime withDayOfWeek(int dayOfWeek) {
+        return withLocalMillis(getChronology().dayOfWeek().set(getLocalMillis(), dayOfWeek));
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Sets the hour of day field in a copy of this LocalDateTime, leaving this
+     * instance unchanged.
+     * <p>
+     * LocalDateTime is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * hour of day changed.
+     *
+     * @param hour  the hour of day to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public LocalDateTime withHourOfDay(int hour) {
+        return withLocalMillis(getChronology().hourOfDay().set(getLocalMillis(), hour));
+    }
+
+    /**
+     * Sets the minute of hour field in a copy of this LocalDateTime, leaving this
+     * instance unchanged.
+     * <p>
+     * LocalDateTime is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * minute of hour changed.
+     *
+     * @param minute  the minute of hour to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public LocalDateTime withMinuteOfHour(int minute) {
+        return withLocalMillis(getChronology().minuteOfHour().set(getLocalMillis(), minute));
+    }
+
+    /**
+     * Sets the second of minute field in a copy of this LocalDateTime, leaving this
+     * instance unchanged.
+     * <p>
+     * LocalDateTime is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * second of minute changed.
+     *
+     * @param second  the second of minute to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public LocalDateTime withSecondOfMinute(int second) {
+        return withLocalMillis(getChronology().secondOfMinute().set(getLocalMillis(), second));
+    }
+
+    /**
+     * Sets the millis of second field in a copy of this LocalDateTime, leaving this
+     * instance unchanged.
+     * <p>
+     * LocalDateTime is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * millis of second changed.
+     *
+     * @param millis  the millis of second to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public LocalDateTime withMillisOfSecond(int millis) {
+        return withLocalMillis(getChronology().millisOfSecond().set(getLocalMillis(), millis));
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Get the era property.
-     * 
+     *
      * @return the era property
      */
     public Property era() {
@@ -1357,7 +1619,7 @@ public Property era() {
 
     /**
      * Get the century of era property.
-     * 
+     *
      * @return the year of era property
      */
     public Property centuryOfEra() {
@@ -1366,7 +1628,7 @@ public Property centuryOfEra() {
 
     /**
      * Get the year of century property.
-     * 
+     *
      * @return the year of era property
      */
     public Property yearOfCentury() {
@@ -1375,7 +1637,7 @@ public Property yearOfCentury() {
 
     /**
      * Get the year of era property.
-     * 
+     *
      * @return the year of era property
      */
     public Property yearOfEra() {
@@ -1384,7 +1646,7 @@ public Property yearOfEra() {
 
     /**
      * Get the year property.
-     * 
+     *
      * @return the year property
      */
     public Property year() {
@@ -1392,9 +1654,9 @@ public Property year() {
     }
 
     /**
-     * Get the year of a week based year property.
-     * 
-     * @return the year of a week based year property
+     * Get the weekyear property.
+     *
+     * @return the weekyear property
      */
     public Property weekyear() {
         return new Property(this, getChronology().weekyear());
@@ -1402,7 +1664,7 @@ public Property weekyear() {
 
     /**
      * Get the month of year property.
-     * 
+     *
      * @return the month of year property
      */
     public Property monthOfYear() {
@@ -1411,7 +1673,7 @@ public Property monthOfYear() {
 
     /**
      * Get the week of a week based year property.
-     * 
+     *
      * @return the week of a week based year property
      */
     public Property weekOfWeekyear() {
@@ -1420,7 +1682,7 @@ public Property weekOfWeekyear() {
 
     /**
      * Get the day of year property.
-     * 
+     *
      * @return the day of year property
      */
     public Property dayOfYear() {
@@ -1429,7 +1691,7 @@ public Property dayOfYear() {
 
     /**
      * Get the day of month property.
-     * 
+     *
      * @return the day of month property
      */
     public Property dayOfMonth() {
@@ -1438,7 +1700,7 @@ public Property dayOfMonth() {
 
     /**
      * Get the day of week property.
-     * 
+     *
      * @return the day of week property
      */
     public Property dayOfWeek() {
@@ -1484,7 +1746,7 @@ public Property millisOfSecond() {
 
     //-----------------------------------------------------------------------
     /**
-     * Output the date time in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ).
+     * Output the date time in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSS).
      * 
      * @return ISO8601 time formatted string.
      */
@@ -1536,15 +1798,15 @@ public String toString(String pattern, Locale locale) throws IllegalArgumentExce
      * of DateTime - they do not modify the original. The example below yields two
      * independent immutable date objects 20 years apart.
      * <pre>
-     * DateTime dt = new DateTime(1972, 12, 3, 0, 0, 0, 0);
-     * DateTime dt1920 = dt.year().setCopy(1920);
+     * LocalDateTime dt = new LocalDateTime(1972, 12, 3, 0, 0, 0, 0);
+     * LocalDateTime dt1920 = dt.year().setCopy(1920);
      * <p>
      * LocalDateTime.Propery itself is thread-safe and immutable, as well as the
      * LocalDateTime being operated on.
      *
      * @author Stephen Colebourne
      * @author Brian S O'Neill
-     * @since 1.2
+     * @since 1.3
      */
     public static final class Property extends AbstractReadableInstantFieldProperty {
         
@@ -1738,7 +2000,7 @@ public LocalDateTime withMinimumValue() {
          *
          * @return a copy of the LocalDateTime with the field value changed
          */
-        public LocalDateTime withRoundedFloor() {
+        public LocalDateTime roundFloor() {
             return iInstant.withLocalMillis(iField.roundFloor(iInstant.getLocalMillis()));
         }
         
@@ -1752,7 +2014,7 @@ public LocalDateTime withRoundedFloor() {
          *
          * @return a copy of the LocalDateTime with the field value changed
          */
-        public LocalDateTime withRoundedCeiling() {
+        public LocalDateTime roundCeiling() {
             return iInstant.withLocalMillis(iField.roundCeiling(iInstant.getLocalMillis()));
         }
         
@@ -1762,7 +2024,7 @@ public LocalDateTime withRoundedCeiling() {
          *
          * @return a copy of the LocalDateTime with the field value changed
          */
-        public LocalDateTime withRoundedHalfFloor() {
+        public LocalDateTime roundHalfFloor() {
             return iInstant.withLocalMillis(iField.roundHalfFloor(iInstant.getLocalMillis()));
         }
         
@@ -1772,7 +2034,7 @@ public LocalDateTime withRoundedHalfFloor() {
          *
          * @return a copy of the LocalDateTime with the field value changed
          */
-        public LocalDateTime withRoundedHalfCeiling() {
+        public LocalDateTime roundHalfCeiling() {
             return iInstant.withLocalMillis(iField.roundHalfCeiling(iInstant.getLocalMillis()));
         }
         
@@ -1783,7 +2045,7 @@ public LocalDateTime withRoundedHalfCeiling() {
          *
          * @return a copy of the LocalDateTime with the field value changed
          */
-        public LocalDateTime withRoundedHalfEven() {
+        public LocalDateTime roundHalfEven() {
             return iInstant.withLocalMillis(iField.roundHalfEven(iInstant.getLocalMillis()));
         }
     }

From d9405124454ad8de43129ef86b959418a40c732d Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Sun, 19 Mar 2006 17:36:33 +0000
Subject: [PATCH 053/115] Javadoc fixes

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1050 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/LocalDate.java     | 4 ++--
 JodaTime/src/java/org/joda/time/LocalDateTime.java | 3 ++-
 JodaTime/src/java/org/joda/time/LocalTime.java     | 5 +++--
 3 files changed, 7 insertions(+), 5 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/LocalDate.java b/JodaTime/src/java/org/joda/time/LocalDate.java
index 33b21ea82..b10e36487 100644
--- a/JodaTime/src/java/org/joda/time/LocalDate.java
+++ b/JodaTime/src/java/org/joda/time/LocalDate.java
@@ -259,7 +259,6 @@ public LocalDate(long instant, Chronology chronology) {
      * include ReadableInstant, String, Calendar and Date.
      *
      * @param instant  the datetime object
-     * @param zone  the time zone
      * @throws IllegalArgumentException if the instant is invalid
      */
     public LocalDate(Object instant) {
@@ -1218,7 +1217,7 @@ public LocalDate withYearOfEra(int yearOfEra) {
      * Instead, this method returns a new instance with the value of
      * year of century changed.
      *
-     * @param year of century  the year of century to set
+     * @param yearOfCentury  the year of century to set
      * @return a copy of this object with the field set
      * @throws IllegalArgumentException if the value is invalid
      */
@@ -1495,6 +1494,7 @@ public String toString(String pattern, Locale locale) throws IllegalArgumentExce
      * <pre>
      * LocalDate dt = new LocalDate(1972, 12, 3);
      * LocalDate dt1920 = dt.year().withValue(1920);
+     * </pre>
      * <p>
      * LocalDate.Propery itself is thread-safe and immutable, as well as the
      * LocalDate being operated on.
diff --git a/JodaTime/src/java/org/joda/time/LocalDateTime.java b/JodaTime/src/java/org/joda/time/LocalDateTime.java
index e3fc5fdfe..a28f37fb7 100644
--- a/JodaTime/src/java/org/joda/time/LocalDateTime.java
+++ b/JodaTime/src/java/org/joda/time/LocalDateTime.java
@@ -1422,7 +1422,7 @@ public LocalDateTime withYearOfEra(int yearOfEra) {
      * Instead, this method returns a new instance with the value of
      * year of century changed.
      *
-     * @param year of century  the year of century to set
+     * @param yearOfCentury  the year of century to set
      * @return a copy of this object with the field set
      * @throws IllegalArgumentException if the value is invalid
      */
@@ -1800,6 +1800,7 @@ public String toString(String pattern, Locale locale) throws IllegalArgumentExce
      * <pre>
      * LocalDateTime dt = new LocalDateTime(1972, 12, 3, 0, 0, 0, 0);
      * LocalDateTime dt1920 = dt.year().setCopy(1920);
+     * </pre>
      * <p>
      * LocalDateTime.Propery itself is thread-safe and immutable, as well as the
      * LocalDateTime being operated on.
diff --git a/JodaTime/src/java/org/joda/time/LocalTime.java b/JodaTime/src/java/org/joda/time/LocalTime.java
index be20c41c6..1b8be2791 100644
--- a/JodaTime/src/java/org/joda/time/LocalTime.java
+++ b/JodaTime/src/java/org/joda/time/LocalTime.java
@@ -702,7 +702,7 @@ public LocalTime withPeriodAdded(ReadablePeriod period, int scalar) {
      * <p>
      * This method is typically used to add complex period instances.
      * Adding one field is best achieved using methods
-     * like {@link #plusYears(int)}.
+     * like {@link #plusHours(int)}.
      * 
      * @param period  the period to add to this one, null means zero
      * @return a copy of this time with the period added
@@ -813,7 +813,7 @@ public LocalTime plusMillis(int millis) {
      * <p>
      * This method is typically used to subtract complex period instances.
      * Subtracting one field is best achieved using methods
-     * like {@link #minusYears(int)}.
+     * like {@link #minusHours(int)}.
      * 
      * @param period  the period to reduce this instant by
      * @return a copy of this time with the period taken away
@@ -1160,6 +1160,7 @@ public String toString(String pattern, Locale locale) throws IllegalArgumentExce
      * <pre>
      * DateTime dt = new DateTime(1972, 12, 3, 0, 0, 0, 0);
      * DateTime dt1920 = dt.year().setCopy(1920);
+     * </pre>
      * <p>
      * LocalTime.Propery itself is thread-safe and immutable, as well as the
      * LocalTime being operated on.

From 35808a6d6e33fdeb3c6e0472286dfb1215dde09e Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Sun, 19 Mar 2006 21:46:03 +0000
Subject: [PATCH 054/115] Fixed overflow when getting year field from instants
 at Long.MAX_VALUE and LONG.MIN_VALUE.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1051 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  3 ++
 .../org/joda/time/chrono/BasicChronology.java | 32 +++++++++----------
 .../chrono/BasicFixedMonthChronology.java     |  5 +++
 .../joda/time/chrono/CopticChronology.java    | 20 +++---------
 .../joda/time/chrono/EthiopicChronology.java  | 20 +++---------
 .../joda/time/chrono/GregorianChronology.java | 24 ++++++--------
 .../joda/time/chrono/IslamicChronology.java   |  9 ++++--
 .../joda/time/chrono/JulianChronology.java    | 24 ++++++--------
 .../time/TestDateMidnight_Properties.java     |  4 +--
 .../joda/time/TestDateTime_Properties.java    | 10 +++---
 .../joda/time/TestLocalDate_Properties.java   | 14 ++++----
 .../time/TestMutableDateTime_Properties.java  |  4 +--
 .../time/TestYearMonthDay_Properties.java     | 10 +++---
 .../joda/time/chrono/TestISOChronology.java   | 12 ++-----
 14 files changed, 79 insertions(+), 112 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index fa70da352..aa6168379 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -60,6 +60,9 @@ Bug fixes since 1.2
 - FixedDateTimeZone
   Hashcode was not defined
 
+- ISO/Gregorian/Julian/Coptic/EthiopicChronology
+  Fixed overflow when getting year field from instants at Long.MAX_VALUE and
+  LONG.MIN_VALUE.
 
 Enhancements since 1.2
 ----------------------
diff --git a/JodaTime/src/java/org/joda/time/chrono/BasicChronology.java b/JodaTime/src/java/org/joda/time/chrono/BasicChronology.java
index 9d6195b44..ee59be675 100644
--- a/JodaTime/src/java/org/joda/time/chrono/BasicChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/BasicChronology.java
@@ -374,24 +374,15 @@ int getYear(long instant) {
         // represents the start of that year. Then verify estimate and fix if
         // necessary.
 
-        long unitMillis = getAverageMillisPerYear();
-        long i2 = instant + getApproxMillisAtEpoch();
+        // Initial estimate uses values divided by two to avoid overflow.
+        long unitMillis = getAverageMillisPerYearDividedByTwo();
+        long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();
         if (i2 < 0) {
             i2 = i2 - unitMillis + 1;
         }
         int year = (int) (i2 / unitMillis);
 
-        long yearStart;
-        try {
-            yearStart = getYearMillis(year);
-        } catch (ArithmeticException e) {
-            if (instant > 0) {
-                throw new ArithmeticException("Instant too large: " + instant);
-            } else {
-                throw new ArithmeticException("Instant too small: " + instant);
-            }
-        }
-
+        long yearStart = getYearMillis(year);
         long diff = instant - yearStart;
 
         if (diff < 0) {
@@ -686,6 +677,13 @@ int getMaxMonth() {
      */
     abstract long getAverageMillisPerYear();
 
+    /**
+     * Gets an average value for the milliseconds per year, divided by two.
+     * 
+     * @return the millis per year divided by two
+     */
+    abstract long getAverageMillisPerYearDividedByTwo();
+
     /**
      * Gets an average value for the milliseconds per month.
      * 
@@ -695,14 +693,14 @@ int getMaxMonth() {
 
     /**
      * Returns a constant representing the approximate number of milliseconds
-     * elapsed from year 0 of this chronology. This constant <em>must</em> be
-     * defined as:
+     * elapsed from year 0 of this chronology, divided by two. This constant
+     * <em>must</em> be defined as:
      * <pre>
-     *    yearAtEpoch * averageMillisPerYear + millisOfYearAtEpoch
+     *    (yearAtEpoch * averageMillisPerYear + millisOfYearAtEpoch) / 2
      * </pre>
      * where epoch is 1970-01-01 (Gregorian).
      */
-    abstract long getApproxMillisAtEpoch();
+    abstract long getApproxMillisAtEpochDividedByTwo();
 
     /**
      * Sets the year from an instant and year.
diff --git a/JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java b/JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java
index b8644152d..7929ca141 100644
--- a/JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/BasicFixedMonthChronology.java
@@ -148,6 +148,11 @@ long getAverageMillisPerYear() {
         return MILLIS_PER_YEAR;
     }
 
+    //-----------------------------------------------------------------------
+    long getAverageMillisPerYearDividedByTwo() {
+        return MILLIS_PER_YEAR / 2;
+    }
+
     //-----------------------------------------------------------------------
     long getAverageMillisPerMonth() {
         return MILLIS_PER_MONTH;
diff --git a/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java b/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java
index 3af2ad39d..7701801ab 100644
--- a/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java
@@ -65,13 +65,8 @@
     /** The lowest year that can be fully supported. */
     private static final int MIN_YEAR = -292269337;
 
-    /**
-     * The highest year that can be fully supported.
-     * Although calculateFirstDayOfYearMillis can go higher without
-     * overflowing, the getYear method overflows when it adds the
-     * approximate millis at the epoch.
-     */
-    private static final int MAX_YEAR = 292271022;
+    /** The highest year that can be fully supported. */
+    private static final int MAX_YEAR = 292272708;
 
     /** Cache of zone to chronology arrays */
     private static final Map cCache = new HashMap();
@@ -207,13 +202,6 @@ public Chronology withZone(DateTimeZone zone) {
 
     //-----------------------------------------------------------------------
     long calculateFirstDayOfYearMillis(int year) {
-        if (year > MAX_YEAR) {
-            throw new ArithmeticException("Year is too large: " + year + " > " + MAX_YEAR);
-        }
-        if (year < MIN_YEAR) {
-            throw new ArithmeticException("Year is too small: " + year + " < " + MIN_YEAR);
-        }
-
         // Java epoch is 1970-01-01 Gregorian which is 1686-04-23 Coptic.
         // Calculate relative to the nearest leap year and account for the
         // difference later.
@@ -251,8 +239,8 @@ int getMaxYear() {
     }
 
     //-----------------------------------------------------------------------
-    long getApproxMillisAtEpoch() {
-        return 1686L * MILLIS_PER_YEAR + 112L * DateTimeConstants.MILLIS_PER_DAY;
+    long getApproxMillisAtEpochDividedByTwo() {
+        return (1686L * MILLIS_PER_YEAR + 112L * DateTimeConstants.MILLIS_PER_DAY) / 2;
     }
 
     //-----------------------------------------------------------------------
diff --git a/JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java b/JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java
index dea2bb980..d27a3310d 100644
--- a/JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/EthiopicChronology.java
@@ -65,13 +65,8 @@
     /** The lowest year that can be fully supported. */
     private static final int MIN_YEAR = -292269337;
 
-    /**
-     * The highest year that can be fully supported.
-     * Although calculateFirstDayOfYearMillis can go higher without
-     * overflowing, the getYear method overflows when it adds the
-     * approximate millis at the epoch.
-     */
-    private static final int MAX_YEAR = 292271022;
+    /** The highest year that can be fully supported. */
+    private static final int MAX_YEAR = 292272984;
 
     /** Cache of zone to chronology arrays */
     private static final Map cCache = new HashMap();
@@ -205,13 +200,6 @@ public Chronology withZone(DateTimeZone zone) {
 
     //-----------------------------------------------------------------------
     long calculateFirstDayOfYearMillis(int year) {
-        if (year > MAX_YEAR) {
-            throw new ArithmeticException("Year is too large: " + year + " > " + MAX_YEAR);
-        }
-        if (year < MIN_YEAR) {
-            throw new ArithmeticException("Year is too small: " + year + " < " + MIN_YEAR);
-        }
-
         // Java epoch is 1970-01-01 Gregorian which is 1962-04-23 Ethiopic.
         // Calculate relative to the nearest leap year and account for the
         // difference later.
@@ -249,8 +237,8 @@ int getMaxYear() {
     }
 
     //-----------------------------------------------------------------------
-    long getApproxMillisAtEpoch() {
-        return 1962L * MILLIS_PER_YEAR + 112L * DateTimeConstants.MILLIS_PER_DAY;
+    long getApproxMillisAtEpochDividedByTwo() {
+        return (1962L * MILLIS_PER_YEAR + 112L * DateTimeConstants.MILLIS_PER_DAY) / 2;
     }
 
     //-----------------------------------------------------------------------
diff --git a/JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java b/JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java
index 862901dcc..23166d244 100644
--- a/JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java
@@ -55,14 +55,11 @@
 
     private static final int DAYS_0000_TO_1970 = 719527;
 
-    // The lowest year that can be fully supported.
+    /** The lowest year that can be fully supported. */
     private static final int MIN_YEAR = -292275054;
 
-    // The highest year that can be fully supported. Although
-    // calculateFirstDayOfYearMillis can operate on years up to 292278994
-    // without overflowing, the getYear method overflows when it adds the
-    // approximate millis at the epoch.
-    private static final int MAX_YEAR = 292277023;
+    /** The highest year that can be fully supported. */
+    private static final int MAX_YEAR = 292278993;
 
     /** Singleton instance of a UTC GregorianChronology */
     private static final GregorianChronology INSTANCE_UTC;
@@ -201,13 +198,6 @@ boolean isLeapYear(int year) {
     }
 
     long calculateFirstDayOfYearMillis(int year) {
-        if (year > MAX_YEAR) {
-            throw new ArithmeticException("Year is too large: " + year + " > " + MAX_YEAR);
-        }
-        if (year < MIN_YEAR) {
-            throw new ArithmeticException("Year is too small: " + year + " < " + MIN_YEAR);
-        }
-
         // Initial value is just temporary.
         int leapYears = year / 100;
         if (year < 0) {
@@ -239,12 +229,16 @@ long getAverageMillisPerYear() {
         return MILLIS_PER_YEAR;
     }
 
+    long getAverageMillisPerYearDividedByTwo() {
+        return MILLIS_PER_YEAR / 2;
+    }
+
     long getAverageMillisPerMonth() {
         return MILLIS_PER_MONTH;
     }
 
-    long getApproxMillisAtEpoch() {
-        return 1970L * MILLIS_PER_YEAR;
+    long getApproxMillisAtEpochDividedByTwo() {
+        return (1970L * MILLIS_PER_YEAR) / 2;
     }
 
 }
diff --git a/JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java b/JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java
index eab150ee7..c94cd6d0b 100644
--- a/JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java
@@ -402,6 +402,11 @@ long getAverageMillisPerYear() {
         return MILLIS_PER_YEAR;
     }
 
+    //-----------------------------------------------------------------------
+    long getAverageMillisPerYearDividedByTwo() {
+        return MILLIS_PER_YEAR / 2;
+    }
+
     //-----------------------------------------------------------------------
     long getAverageMillisPerMonth() {
         return MILLIS_PER_MONTH;
@@ -443,9 +448,9 @@ int getMaxYear() {
     }
 
     //-----------------------------------------------------------------------
-    long getApproxMillisAtEpoch() {
+    long getApproxMillisAtEpochDividedByTwo() {
         // Epoch 1970-01-01 ISO = 1389-10-22 Islamic
-        return -MILLIS_YEAR_1;
+        return (-MILLIS_YEAR_1) / 2;
     }
 
     //-----------------------------------------------------------------------
diff --git a/JodaTime/src/java/org/joda/time/chrono/JulianChronology.java b/JodaTime/src/java/org/joda/time/chrono/JulianChronology.java
index 9da768fdb..d1a5c165b 100644
--- a/JodaTime/src/java/org/joda/time/chrono/JulianChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/JulianChronology.java
@@ -58,14 +58,11 @@
     private static final long MILLIS_PER_MONTH =
         (long) (365.25 * DateTimeConstants.MILLIS_PER_DAY / 12);
 
-    // The lowest year that can be fully supported.
+    /** The lowest year that can be fully supported. */
     private static final int MIN_YEAR = -292269054;
 
-    // The highest year that can be fully supported. Although
-    // calculateFirstDayOfYearMillis can go higher without overflowing, the
-    // getYear method overflows when it adds the approximate millis at the
-    // epoch.
-    private static final int MAX_YEAR = 292271022;
+    /** The highest year that can be fully supported. */
+    private static final int MAX_YEAR = 292272992;
 
     /** Singleton instance of a UTC JulianChronology */
     private static final JulianChronology INSTANCE_UTC;
@@ -215,13 +212,6 @@ boolean isLeapYear(int year) {
     }
 
     long calculateFirstDayOfYearMillis(int year) {
-        if (year > MAX_YEAR) {
-            throw new ArithmeticException("Year is too large: " + year + " > " + MAX_YEAR);
-        }
-        if (year < MIN_YEAR) {
-            throw new ArithmeticException("Year is too small: " + year + " < " + MIN_YEAR);
-        }
-
         // Java epoch is 1970-01-01 Gregorian which is 1969-12-19 Julian.
         // Calculate relative to the nearest leap year and account for the
         // difference later.
@@ -259,12 +249,16 @@ long getAverageMillisPerYear() {
         return MILLIS_PER_YEAR;
     }
 
+    long getAverageMillisPerYearDividedByTwo() {
+        return MILLIS_PER_YEAR / 2;
+    }
+
     long getAverageMillisPerMonth() {
         return MILLIS_PER_MONTH;
     }
 
-    long getApproxMillisAtEpoch() {
-        return 1969L * MILLIS_PER_YEAR + 352L * DateTimeConstants.MILLIS_PER_DAY;
+    long getApproxMillisAtEpochDividedByTwo() {
+        return (1969L * MILLIS_PER_YEAR + 352L * DateTimeConstants.MILLIS_PER_DAY) / 2;
     }
 
     protected void assemble(Fields fields) {
diff --git a/JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java b/JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java
index ac85bf3ec..dfb723e99 100644
--- a/JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java
+++ b/JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java
@@ -205,8 +205,8 @@ public void testPropertyGetYear() {
         assertEquals(9, test.year().getMaximumShortTextLength(null));
         assertEquals(-292275054, test.year().getMinimumValue());
         assertEquals(-292275054, test.year().getMinimumValueOverall());
-        assertEquals(292277023, test.year().getMaximumValue());
-        assertEquals(292277023, test.year().getMaximumValueOverall());
+        assertEquals(292278993, test.year().getMaximumValue());
+        assertEquals(292278993, test.year().getMaximumValueOverall());
     }
 
     //-----------------------------------------------------------------------
diff --git a/JodaTime/src/test/org/joda/time/TestDateTime_Properties.java b/JodaTime/src/test/org/joda/time/TestDateTime_Properties.java
index b918fec30..9b4ec2bed 100644
--- a/JodaTime/src/test/org/joda/time/TestDateTime_Properties.java
+++ b/JodaTime/src/test/org/joda/time/TestDateTime_Properties.java
@@ -217,8 +217,8 @@ public void testPropertyGetYear() {
         assertEquals(9, test.year().getMaximumShortTextLength(null));
         assertEquals(-292275054, test.year().getMinimumValue());
         assertEquals(-292275054, test.year().getMinimumValueOverall());
-        assertEquals(292277023, test.year().getMaximumValue());
-        assertEquals(292277023, test.year().getMaximumValueOverall());
+        assertEquals(292278993, test.year().getMaximumValue());
+        assertEquals(292278993, test.year().getMaximumValueOverall());
     }
 
     public void testPropertyLeapYear() {
@@ -245,7 +245,7 @@ public void testPropertyAddYear() {
         assertEquals(292277023, copy.getYear());
         
         try {
-            test.year().addToCopy(292277023 - 2004 + 1);
+            test.year().addToCopy(292278993 - 2004 + 1);
             fail();
         } catch (IllegalArgumentException ex) {}
         
@@ -270,11 +270,11 @@ public void testPropertyAddWrapFieldYear() {
         copy = test.year().addWrapFieldToCopy(0);
         assertEquals(2004, copy.getYear());
         
-        copy = test.year().addWrapFieldToCopy(292277023 - 2004 + 1);
+        copy = test.year().addWrapFieldToCopy(292278993 - 2004 + 1);
         assertEquals(-292275054, copy.getYear());
         
         copy = test.year().addWrapFieldToCopy(-292275054 - 2004 - 1);
-        assertEquals(292277023, copy.getYear());
+        assertEquals(292278993, copy.getYear());
     }
 
     public void testPropertySetYear() {
diff --git a/JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java b/JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java
index 62e8133f2..2a5ae31cb 100644
--- a/JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java
+++ b/JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java
@@ -91,8 +91,8 @@ public void testPropertyGetMaxMinValuesYear() {
         LocalDate test = new LocalDate(1972, 6, 9);
         assertEquals(-292275054, test.year().getMinimumValue());
         assertEquals(-292275054, test.year().getMinimumValueOverall());
-        assertEquals(292277023, test.year().getMaximumValue());
-        assertEquals(292277023, test.year().getMaximumValueOverall());
+        assertEquals(292278993, test.year().getMaximumValue());
+        assertEquals(292278993, test.year().getMaximumValueOverall());
     }
 
     public void testPropertyPlusYear() {
@@ -104,11 +104,11 @@ public void testPropertyPlusYear() {
         copy = test.year().plus(0);
         check(copy, 1972, 6, 9);
         
-        copy = test.year().plus(292277023 - 1972);
-        check(copy, 292277023, 6, 9);
+        copy = test.year().plus(292278993 - 1972);
+        check(copy, 292278993, 6, 9);
         
         try {
-            test.year().plus(292277023 - 1972 + 1);
+            test.year().plus(292278993 - 1972 + 1);
             fail();
         } catch (IllegalArgumentException ex) {}
         check(test, 1972, 6, 9);
@@ -135,11 +135,11 @@ public void testPropertyPlusWrapFieldYear() {
         copy = test.year().plusWrapField(0);
         check(copy, 1972, 6, 9);
         
-        copy = test.year().plusWrapField(292277023 - 1972 + 1);
+        copy = test.year().plusWrapField(292278993 - 1972 + 1);
         check(copy, -292275054, 6, 9);
         
         copy = test.year().plusWrapField(-292275054 - 1972 - 1);
-        check(copy, 292277023, 6, 9);
+        check(copy, 292278993, 6, 9);
     }
 
     public void testPropertyWithYear() {
diff --git a/JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java b/JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java
index 288cd344a..40fab3ed9 100644
--- a/JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java
+++ b/JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java
@@ -200,8 +200,8 @@ public void testPropertyGetYear() {
         assertEquals(9, test.year().getMaximumShortTextLength(null));
         assertEquals(-292275054, test.year().getMinimumValue());
         assertEquals(-292275054, test.year().getMinimumValueOverall());
-        assertEquals(292277023, test.year().getMaximumValue());
-        assertEquals(292277023, test.year().getMaximumValueOverall());
+        assertEquals(292278993, test.year().getMaximumValue());
+        assertEquals(292278993, test.year().getMaximumValueOverall());
     }
 
     public void testPropertyAddYear() {
diff --git a/JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java b/JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java
index dda62747b..328eba6d3 100644
--- a/JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java
+++ b/JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java
@@ -92,8 +92,8 @@ public void testPropertyGetMaxMinValuesYear() {
         YearMonthDay test = new YearMonthDay(1972, 6, 9);
         assertEquals(-292275054, test.year().getMinimumValue());
         assertEquals(-292275054, test.year().getMinimumValueOverall());
-        assertEquals(292277023, test.year().getMaximumValue());
-        assertEquals(292277023, test.year().getMaximumValueOverall());
+        assertEquals(292278993, test.year().getMaximumValue());
+        assertEquals(292278993, test.year().getMaximumValueOverall());
     }
 
     public void testPropertyAddYear() {
@@ -109,7 +109,7 @@ public void testPropertyAddYear() {
         check(copy, 292277023, 6, 9);
         
         try {
-            test.year().addToCopy(292277023 - 1972 + 1);
+            test.year().addToCopy(292278993 - 1972 + 1);
             fail();
         } catch (IllegalArgumentException ex) {}
         check(test, 1972, 6, 9);
@@ -136,11 +136,11 @@ public void testPropertyAddWrapFieldYear() {
         copy = test.year().addWrapFieldToCopy(0);
         check(copy, 1972, 6, 9);
         
-        copy = test.year().addWrapFieldToCopy(292277023 - 1972 + 1);
+        copy = test.year().addWrapFieldToCopy(292278993 - 1972 + 1);
         check(copy, -292275054, 6, 9);
         
         copy = test.year().addWrapFieldToCopy(-292275054 - 1972 - 1);
-        check(copy, 292277023, 6, 9);
+        check(copy, 292278993, 6, 9);
     }
 
     public void testPropertySetYear() {
diff --git a/JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java b/JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java
index c77ff55cc..7f3c7f6db 100644
--- a/JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java
+++ b/JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java
@@ -276,11 +276,7 @@ public void testMaxYear() {
         } catch (IllegalFieldValueException e) {
         }
 
-        try {
-            chrono.year().get(Long.MAX_VALUE);
-            fail();
-        } catch (ArithmeticException e) {
-        }
+        assertEquals(maxYear + 1, chrono.year().get(Long.MAX_VALUE));
     }
 
     public void testMinYear() {
@@ -313,11 +309,7 @@ public void testMinYear() {
         } catch (IllegalFieldValueException e) {
         }
 
-        try {
-            chrono.year().get(Long.MIN_VALUE);
-            fail();
-        } catch (ArithmeticException e) {
-        }
+        assertEquals(minYear - 1, chrono.year().get(Long.MIN_VALUE));
     }
 
     public void testCutoverAddYears() {

From 83df500ae8c247c268e4505054aad99ed7df8999 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Sun, 26 Mar 2006 23:41:18 +0000
Subject: [PATCH 055/115] If a parsed datetime is illegal due to field range or
 time zone offset transition, thrown exception includes text of datetime being
 parsed.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1052 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  4 +-
 .../joda/time/IllegalFieldValueException.java | 23 ++++++++++++
 .../joda/time/format/DateTimeFormatter.java   | 11 +++---
 .../time/format/DateTimeParserBucket.java     | 37 ++++++++++++++++---
 4 files changed, 63 insertions(+), 12 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index aa6168379..3c3b6966b 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -66,7 +66,9 @@ Bug fixes since 1.2
 
 Enhancements since 1.2
 ----------------------
-
+- DateTimeFormatter/DateTimeParserBucket
+  If a parsed datetime is illegal due to field range or time zone offset
+  transition, thrown exception includes text of datetime being parsed.
 
 Feedback
 --------
diff --git a/JodaTime/src/java/org/joda/time/IllegalFieldValueException.java b/JodaTime/src/java/org/joda/time/IllegalFieldValueException.java
index 0550bb8dd..1423ff90d 100644
--- a/JodaTime/src/java/org/joda/time/IllegalFieldValueException.java
+++ b/JodaTime/src/java/org/joda/time/IllegalFieldValueException.java
@@ -89,6 +89,7 @@ private static String createMessage(String fieldName, String value) {
     private final String iStringValue;
     private final Number iLowerBound;
     private final Number iUpperBound;
+    private String iMessage;
 
     /**
      * Constructor.
@@ -108,6 +109,7 @@ public IllegalFieldValueException(DateTimeFieldType fieldType,
         iStringValue = null;
         iLowerBound = lowerBound;
         iUpperBound = upperBound;
+        iMessage = super.getMessage();
     }
 
     /**
@@ -128,6 +130,7 @@ public IllegalFieldValueException(DurationFieldType fieldType,
         iStringValue = null;
         iLowerBound = lowerBound;
         iUpperBound = upperBound;
+        iMessage = super.getMessage();
     }
 
     /**
@@ -148,6 +151,7 @@ public IllegalFieldValueException(String fieldName,
         iStringValue = null;
         iLowerBound = lowerBound;
         iUpperBound = upperBound;
+        iMessage = super.getMessage();
     }
 
     /**
@@ -165,6 +169,7 @@ public IllegalFieldValueException(DateTimeFieldType fieldType, String value) {
         iNumberValue = null;
         iLowerBound = null;
         iUpperBound = null;
+        iMessage = super.getMessage();
     }
 
     /**
@@ -182,6 +187,7 @@ public IllegalFieldValueException(DurationFieldType fieldType, String value) {
         iNumberValue = null;
         iLowerBound = null;
         iUpperBound = null;
+        iMessage = super.getMessage();
     }
 
     /**
@@ -199,6 +205,7 @@ public IllegalFieldValueException(String fieldName, String value) {
         iNumberValue = null;
         iLowerBound = null;
         iUpperBound = null;
+        iMessage = super.getMessage();
     }
 
     //-----------------------------------------------------------------------
@@ -278,4 +285,20 @@ public Number getUpperBound() {
         return iUpperBound;
     }
 
+    public String getMessage() {
+        return iMessage;
+    }
+
+    /**
+     * Provide additional detail by prepending a message to the existing
+     * message. A colon is separator is automatically inserted between the
+     * messages.
+     */
+    public void prependMessage(String message) {
+        if (iMessage == null) {
+            iMessage = message;
+        } else if (message != null) {
+            iMessage = message + ": " + iMessage;
+        }
+    }
 }
diff --git a/JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java b/JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java
index 062d52198..c479187c6 100644
--- a/JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java
+++ b/JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java
@@ -603,9 +603,10 @@ public int parseInto(ReadWritableInstant instant, String text, int position) {
         long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
         chrono = selectChronology(chrono);
         
-        DateTimeParserBucket bucket = new DateTimeParserBucket(instantLocal, chrono, iLocale, iPivotYear);
+        DateTimeParserBucket bucket = new DateTimeParserBucket
+            (instantLocal, chrono, iLocale, iPivotYear);
         int newPos = iParser.parseInto(bucket, text, position);
-        instant.setMillis(bucket.computeMillis());
+        instant.setMillis(bucket.computeMillis(false, text));
         if (iOffsetParsed && bucket.getZone() == null) {
             int parsedOffset = bucket.getOffset();
             DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
@@ -635,7 +636,7 @@ public long parseMillis(String text) {
         int newPos = iParser.parseInto(bucket, text, 0);
         if (newPos >= 0) {
             if (newPos >= text.length()) {
-                return bucket.computeMillis(true);
+                return bucket.computeMillis(true, text);
             }
         } else {
             newPos = ~newPos;
@@ -668,7 +669,7 @@ public DateTime parseDateTime(String text) {
         int newPos = iParser.parseInto(bucket, text, 0);
         if (newPos >= 0) {
             if (newPos >= text.length()) {
-                long millis = bucket.computeMillis(true);
+                long millis = bucket.computeMillis(true, text);
                 if (iOffsetParsed && bucket.getZone() == null) {
                     int parsedOffset = bucket.getOffset();
                     DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
@@ -707,7 +708,7 @@ public MutableDateTime parseMutableDateTime(String text) {
         int newPos = iParser.parseInto(bucket, text, 0);
         if (newPos >= 0) {
             if (newPos >= text.length()) {
-                long millis = bucket.computeMillis(true);
+                long millis = bucket.computeMillis(true, text);
                 if (iOffsetParsed && bucket.getZone() == null) {
                     int parsedOffset = bucket.getOffset();
                     DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
diff --git a/JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java b/JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java
index 12b2cb947..033e6a5cc 100644
--- a/JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java
+++ b/JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java
@@ -24,6 +24,7 @@
 import org.joda.time.DateTimeUtils;
 import org.joda.time.DateTimeZone;
 import org.joda.time.DurationField;
+import org.joda.time.IllegalFieldValueException;
 
 /**
  * DateTimeParserBucket is an advanced class, intended mainly for parser
@@ -275,7 +276,7 @@ public boolean restoreState(Object savedState) {
      * @throws IllegalArgumentException if any field is out of range
      */
     public long computeMillis() {
-        return computeMillis(false);
+        return computeMillis(false, null);
     }
     
     /**
@@ -287,6 +288,19 @@ public long computeMillis() {
      * @throws IllegalArgumentException if any field is out of range
      */
     public long computeMillis(boolean resetFields) {
+        return computeMillis(resetFields, null);
+    }
+
+    /**
+     * Computes the parsed datetime by setting the saved fields.
+     * This method is idempotent, but it is not thread-safe.
+     *
+     * @param resetFields false by default, but when true, unsaved field values are cleared
+     * @param text optional text being parsed, to be included in any error message
+     * @return milliseconds since 1970-01-01T00:00:00Z
+     * @throws IllegalArgumentException if any field is out of range
+     */
+    public long computeMillis(boolean resetFields, String text) {
         SavedField[] savedFields = iSavedFields;
         int count = iSavedFieldsCount;
         if (iSavedFieldsShared) {
@@ -294,10 +308,17 @@ public long computeMillis(boolean resetFields) {
             iSavedFieldsShared = false;
         }
         sort(savedFields, count);
-        
+
         long millis = iMillis;
-        for (int i=0; i<count; i++) {
-            millis = savedFields[i].set(millis, resetFields);
+        try {
+            for (int i=0; i<count; i++) {
+                millis = savedFields[i].set(millis, resetFields);
+            }
+        } catch (IllegalFieldValueException e) {
+            if (text != null) {
+                e.prependMessage("Cannot parse \"" + text + '"');
+            }
+            throw e;
         }
         
         if (iZone == null) {
@@ -306,8 +327,12 @@ public long computeMillis(boolean resetFields) {
             int offset = iZone.getOffsetFromLocal(millis);
             millis -= offset;
             if (offset != iZone.getOffset(millis)) {
-                throw new IllegalArgumentException
-                    ("Illegal instant due to time zone offset transition");
+                String message =
+                    "Illegal instant due to time zone offset transition (" + iZone + ')';
+                if (text != null) {
+                    message = "Cannot parse \"" + text + "\": " + message;
+                }
+                throw new IllegalArgumentException(message);
             }
         }
         

From cf4e1f7fa137d2903fb7b244b6b86766ccb34eb6 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Sun, 26 Mar 2006 23:57:49 +0000
Subject: [PATCH 056/115] Delete .cvsignore files.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1053 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/.cvsignore                    | 1 -
 JodaTime/src/test/org/joda/time/.cvsignore | 1 -
 2 files changed, 2 deletions(-)
 delete mode 100644 JodaTime/src/.cvsignore
 delete mode 100644 JodaTime/src/test/org/joda/time/.cvsignore

diff --git a/JodaTime/src/.cvsignore b/JodaTime/src/.cvsignore
deleted file mode 100644
index 0883ff070..000000000
--- a/JodaTime/src/.cvsignore
+++ /dev/null
@@ -1 +0,0 @@
-tzdata
diff --git a/JodaTime/src/test/org/joda/time/.cvsignore b/JodaTime/src/test/org/joda/time/.cvsignore
deleted file mode 100644
index 202a7b178..000000000
--- a/JodaTime/src/test/org/joda/time/.cvsignore
+++ /dev/null
@@ -1 +0,0 @@
-Temp*

From 2858d0a7b4f0ce05ba7a834b70a9ae4bdae640ea Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Sun, 26 Mar 2006 23:58:07 +0000
Subject: [PATCH 057/115] Delete .cvsignore files.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1054 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/hibernate/.cvsignore | 3 ---
 JodaTimeContrib/holiday/.cvsignore   | 5 -----
 JodaTimeContrib/jsptags/.cvsignore   | 3 ---
 3 files changed, 11 deletions(-)
 delete mode 100644 JodaTimeContrib/hibernate/.cvsignore
 delete mode 100644 JodaTimeContrib/holiday/.cvsignore
 delete mode 100644 JodaTimeContrib/jsptags/.cvsignore

diff --git a/JodaTimeContrib/hibernate/.cvsignore b/JodaTimeContrib/hibernate/.cvsignore
deleted file mode 100644
index 7b7985281..000000000
--- a/JodaTimeContrib/hibernate/.cvsignore
+++ /dev/null
@@ -1,3 +0,0 @@
-bin
-target
-*.ser
diff --git a/JodaTimeContrib/holiday/.cvsignore b/JodaTimeContrib/holiday/.cvsignore
deleted file mode 100644
index e3edba998..000000000
--- a/JodaTimeContrib/holiday/.cvsignore
+++ /dev/null
@@ -1,5 +0,0 @@
-bin
-.settings
-.classpath
-.project
-.checkstyle
diff --git a/JodaTimeContrib/jsptags/.cvsignore b/JodaTimeContrib/jsptags/.cvsignore
deleted file mode 100644
index 9b32845b6..000000000
--- a/JodaTimeContrib/jsptags/.cvsignore
+++ /dev/null
@@ -1,3 +0,0 @@
-bin
-target
-.settings

From 559df38c7028143b6de08ae60d1806319872f909 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 27 Mar 2006 21:03:48 +0000
Subject: [PATCH 058/115] Begin testing LocalDateTime

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1055 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/java/org/joda/time/LocalDateTime.java |  33 +-
 JodaTime/src/test/org/joda/time/TestAll.java  |   2 +
 .../joda/time/TestLocalDateTime_Basics.java   | 895 ++++++++++++++++++
 3 files changed, 918 insertions(+), 12 deletions(-)
 create mode 100644 JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java

diff --git a/JodaTime/src/java/org/joda/time/LocalDateTime.java b/JodaTime/src/java/org/joda/time/LocalDateTime.java
index a28f37fb7..b566a0785 100644
--- a/JodaTime/src/java/org/joda/time/LocalDateTime.java
+++ b/JodaTime/src/java/org/joda/time/LocalDateTime.java
@@ -37,7 +37,7 @@
  * <p>
  * LocalDateTime implements the {@link ReadablePartial} interface.
  * To do this, certain methods focus on key fields Year, MonthOfYear,
- * DayOfYear, HourOfDay, MinuteOfHour, SecondOfMinute and MillisOfSecond.
+ * DayOfYear and MillisOfDay.
  * However, <b>all</b> fields may in fact be queried.
  * <p>
  * Internally, LocalDateTime holds the datetime as milliseconds
@@ -82,10 +82,12 @@
 
     /** The index of the year field in the field array */
     private static final int YEAR = 0;
-    /** The index of the dayOfYear field in the field array */
-    private static final int DAY_OF_YEAR = 1;
+    /** The index of the monthOfYear field in the field array */
+    private static final int MONTH_OF_YEAR = 1;
+    /** The index of the dayOfMonth field in the field array */
+    private static final int DAY_OF_MONTH = 2;
     /** The index of the millis field in the field array */
-    private static final int MILLIS_OF_DAY = 2;
+    private static final int MILLIS_OF_DAY = 3;
 
     /** The local millis from 1970-01-01T00:00:00 */
     private long iLocalMillis;
@@ -411,12 +413,12 @@ public LocalDateTime(
     //-----------------------------------------------------------------------
     /**
      * Gets the number of fields in this partial, which is three.
-     * The supported fields are Year, DayOfYear and MillisOfDay.
+     * The supported fields are Year, MonthOfDay, DayOfMonth and MillisOfDay.
      *
      * @return the field count, three
      */
     public int size() {
-        return 3;
+        return 4;
     }
 
     /**
@@ -432,8 +434,10 @@ protected DateTimeField getField(int index, Chronology chrono) {
         switch (index) {
             case YEAR:
                 return chrono.year();
-            case DAY_OF_YEAR:
-                return chrono.dayOfYear();
+            case MONTH_OF_YEAR:
+                return chrono.monthOfYear();
+            case DAY_OF_MONTH:
+                return chrono.dayOfMonth();
             case MILLIS_OF_DAY:
                 return chrono.millisOfDay();
             default:
@@ -445,7 +449,7 @@ protected DateTimeField getField(int index, Chronology chrono) {
      * Gets the value of the field at the specifed index.
      * <p>
      * This method is required to support the <code>ReadablePartial</code>
-     * interface. The supported fields are Year, DayOfYear and MillisOfDay.
+     * interface. The supported fields are Year, MonthOfDay, DayOfMonth and MillisOfDay.
      *
      * @param index  the index, zero to two
      * @return the value
@@ -455,8 +459,10 @@ public int getValue(int index) {
         switch (index) {
             case YEAR:
                 return getChronology().year().get(getLocalMillis());
-            case DAY_OF_YEAR:
-                return getChronology().dayOfYear().get(getLocalMillis());
+            case MONTH_OF_YEAR:
+                return getChronology().monthOfYear().get(getLocalMillis());
+            case DAY_OF_MONTH:
+                return getChronology().dayOfMonth().get(getLocalMillis());
             case MILLIS_OF_DAY:
                 return getChronology().millisOfDay().get(getLocalMillis());
             default:
@@ -554,7 +560,10 @@ public DateTime toDateTime() {
     public DateTime toDateTime(DateTimeZone zone) {
         zone = DateTimeUtils.getZone(zone);
         Chronology chrono = iChronology.withZone(zone);
-        return new DateTime(getLocalMillis(), chrono);
+        return new DateTime(
+                getYear(), getMonthOfYear(), getDayOfMonth(),
+                getHourOfDay(), getMinuteOfHour(),
+                getSecondOfMinute(), getMillisOfSecond(), chrono);
     }
 
     //-----------------------------------------------------------------------
diff --git a/JodaTime/src/test/org/joda/time/TestAll.java b/JodaTime/src/test/org/joda/time/TestAll.java
index a2ad41ec8..e7c342447 100644
--- a/JodaTime/src/test/org/joda/time/TestAll.java
+++ b/JodaTime/src/test/org/joda/time/TestAll.java
@@ -61,6 +61,8 @@ public static Test suite() {
         suite.addTest(TestInterval_Constructors.suite());
         suite.addTest(TestInterval_Basics.suite());
         
+        suite.addTest(TestLocalDateTime_Basics.suite());
+        
         suite.addTest(TestLocalDate_Constructors.suite());
         suite.addTest(TestLocalDate_Basics.suite());
         suite.addTest(TestLocalDate_Properties.suite());
diff --git a/JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java b/JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java
new file mode 100644
index 000000000..200f152f7
--- /dev/null
+++ b/JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java
@@ -0,0 +1,895 @@
+/*
+ *  Copyright 2001-2006 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time;
+
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+import java.util.Arrays;
+import java.util.Date;
+import java.util.Locale;
+
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+import org.joda.time.chrono.BuddhistChronology;
+import org.joda.time.chrono.CopticChronology;
+import org.joda.time.chrono.GJChronology;
+import org.joda.time.chrono.GregorianChronology;
+import org.joda.time.chrono.ISOChronology;
+import org.joda.time.format.DateTimeFormat;
+import org.joda.time.format.DateTimeFormatter;
+
+/**
+ * This class is a Junit unit test for LocalDate.
+ *
+ * @author Stephen Colebourne
+ */
+public class TestLocalDateTime_Basics extends TestCase {
+
+    private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
+    private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
+    private static final DateTimeZone TOKYO = DateTimeZone.forID("Asia/Tokyo");
+    private static final int OFFSET = 1;
+    private static final GJChronology GJ_UTC = GJChronology.getInstanceUTC();
+    private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);
+    private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);
+    private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);
+    private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();
+    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);
+    private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);
+    private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);
+    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
+    private static final Chronology GREGORIAN_UTC = GregorianChronology.getInstanceUTC();
+    private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);
+    private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);
+    private static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);
+    private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();
+
+//    private long TEST_TIME1 =
+//        (31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
+//        + 12L * DateTimeConstants.MILLIS_PER_HOUR
+//        + 24L * DateTimeConstants.MILLIS_PER_MINUTE;
+//
+//    private long TEST_TIME2 =
+//        (365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY
+//        + 14L * DateTimeConstants.MILLIS_PER_HOUR
+//        + 28L * DateTimeConstants.MILLIS_PER_MINUTE;
+
+    private int MILLIS_OF_DAY_UTC =
+        (int) (10L * DateTimeConstants.MILLIS_PER_HOUR
+        + 20L * DateTimeConstants.MILLIS_PER_MINUTE
+        + 30L * DateTimeConstants.MILLIS_PER_SECOND
+        + 40L);
+
+    private long TEST_TIME_NOW_UTC =
+        (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY + MILLIS_OF_DAY_UTC;
+
+    private DateTimeZone zone = null;
+
+    public static void main(String[] args) {
+        junit.textui.TestRunner.run(suite());
+    }
+
+    public static TestSuite suite() {
+        return new TestSuite(TestLocalDateTime_Basics.class);
+    }
+
+    public TestLocalDateTime_Basics(String name) {
+        super(name);
+    }
+
+    protected void setUp() throws Exception {
+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW_UTC);
+        zone = DateTimeZone.getDefault();
+        DateTimeZone.setDefault(LONDON);
+    }
+
+    protected void tearDown() throws Exception {
+        DateTimeUtils.setCurrentMillisSystem();
+        DateTimeZone.setDefault(zone);
+        zone = null;
+    }
+
+    //-----------------------------------------------------------------------
+    public void testGet_DateTimeFieldType() {
+        LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40);
+        assertEquals(1970, test.get(DateTimeFieldType.year()));
+        assertEquals(6, test.get(DateTimeFieldType.monthOfYear()));
+        assertEquals(9, test.get(DateTimeFieldType.dayOfMonth()));
+        assertEquals(2, test.get(DateTimeFieldType.dayOfWeek()));
+        assertEquals(160, test.get(DateTimeFieldType.dayOfYear()));
+        assertEquals(24, test.get(DateTimeFieldType.weekOfWeekyear()));
+        assertEquals(1970, test.get(DateTimeFieldType.weekyear()));
+        assertEquals(10, test.get(DateTimeFieldType.hourOfDay()));
+        assertEquals(20, test.get(DateTimeFieldType.minuteOfHour()));
+        assertEquals(30, test.get(DateTimeFieldType.secondOfMinute()));
+        assertEquals(40, test.get(DateTimeFieldType.millisOfSecond()));
+        assertEquals(MILLIS_OF_DAY_UTC / 60000 , test.get(DateTimeFieldType.minuteOfDay()));
+        assertEquals(MILLIS_OF_DAY_UTC / 1000 , test.get(DateTimeFieldType.secondOfDay()));
+        assertEquals(MILLIS_OF_DAY_UTC , test.get(DateTimeFieldType.millisOfDay()));
+        assertEquals(10, test.get(DateTimeFieldType.hourOfHalfday()));
+        assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay()));
+        
+        test = new LocalDateTime(1970, 6, 9, 12, 30);
+        assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday()));
+        assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday()));
+        assertEquals(12, test.get(DateTimeFieldType.clockhourOfDay()));
+        assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay()));
+        test = new LocalDateTime(1970, 6, 9, 14, 30);
+        assertEquals(2, test.get(DateTimeFieldType.hourOfHalfday()));
+        assertEquals(2, test.get(DateTimeFieldType.clockhourOfHalfday()));
+        assertEquals(14, test.get(DateTimeFieldType.clockhourOfDay()));
+        assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay()));
+        test = new LocalDateTime(1970, 6, 9, 0, 30);
+        assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday()));
+        assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday()));
+        assertEquals(24, test.get(DateTimeFieldType.clockhourOfDay()));
+        assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay()));
+        try {
+            test.get(null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testSize() {
+        LocalDateTime test = new LocalDateTime();
+        assertEquals(4, test.size());
+    }
+
+    public void testGetFieldType_int() {
+        LocalDateTime test = new LocalDateTime(COPTIC_PARIS);
+        assertSame(DateTimeFieldType.year(), test.getFieldType(0));
+        assertSame(DateTimeFieldType.monthOfYear(), test.getFieldType(1));
+        assertSame(DateTimeFieldType.dayOfMonth(), test.getFieldType(2));
+        assertSame(DateTimeFieldType.millisOfDay(), test.getFieldType(3));
+        try {
+            test.getFieldType(-1);
+        } catch (IndexOutOfBoundsException ex) {}
+        try {
+            test.getFieldType(3);
+        } catch (IndexOutOfBoundsException ex) {}
+    }
+
+    public void testGetFieldTypes() {
+        LocalDateTime test = new LocalDateTime(COPTIC_PARIS);
+        DateTimeFieldType[] fields = test.getFieldTypes();
+        assertSame(DateTimeFieldType.year(), fields[0]);
+        assertSame(DateTimeFieldType.monthOfYear(), fields[1]);
+        assertSame(DateTimeFieldType.dayOfMonth(), fields[2]);
+        assertSame(DateTimeFieldType.millisOfDay(), fields[3]);
+        assertNotSame(test.getFieldTypes(), test.getFieldTypes());
+    }
+
+    public void testGetField_int() {
+        LocalDateTime test = new LocalDateTime(COPTIC_PARIS);
+        assertSame(COPTIC_UTC.year(), test.getField(0));
+        assertSame(COPTIC_UTC.monthOfYear(), test.getField(1));
+        assertSame(COPTIC_UTC.dayOfMonth(), test.getField(2));
+        assertSame(COPTIC_UTC.millisOfDay(), test.getField(3));
+        try {
+            test.getField(-1);
+        } catch (IndexOutOfBoundsException ex) {}
+        try {
+            test.getField(3);
+        } catch (IndexOutOfBoundsException ex) {}
+    }
+
+    public void testGetFields() {
+        LocalDateTime test = new LocalDateTime(COPTIC_PARIS);
+        DateTimeField[] fields = test.getFields();
+        assertSame(COPTIC_UTC.year(), fields[0]);
+        assertSame(COPTIC_UTC.monthOfYear(), fields[1]);
+        assertSame(COPTIC_UTC.dayOfMonth(), fields[2]);
+        assertSame(COPTIC_UTC.millisOfDay(), fields[3]);
+        assertNotSame(test.getFields(), test.getFields());
+    }
+
+    public void testGetValue_int() {
+        LocalDateTime test = new LocalDateTime(ISO_UTC);
+        assertEquals(1970, test.getValue(0));
+        assertEquals(6, test.getValue(1));
+        assertEquals(9, test.getValue(2));
+        assertEquals(MILLIS_OF_DAY_UTC, test.getValue(3));
+        try {
+            test.getValue(-1);
+        } catch (IndexOutOfBoundsException ex) {}
+        try {
+            test.getValue(3);
+        } catch (IndexOutOfBoundsException ex) {}
+    }
+
+    public void testGetValues() {
+        LocalDateTime test = new LocalDateTime(ISO_UTC);
+        int[] values = test.getValues();
+        assertEquals(1970, values[0]);
+        assertEquals(6, values[1]);
+        assertEquals(9, values[2]);
+        assertEquals(MILLIS_OF_DAY_UTC, values[3]);
+        assertNotSame(test.getValues(), test.getValues());
+    }
+
+    public void testIsSupported_DateTimeFieldType() {
+        LocalDateTime test = new LocalDateTime();
+        assertEquals(true, test.isSupported(DateTimeFieldType.year()));
+        assertEquals(true, test.isSupported(DateTimeFieldType.monthOfYear()));
+        assertEquals(true, test.isSupported(DateTimeFieldType.dayOfMonth()));
+        assertEquals(true, test.isSupported(DateTimeFieldType.dayOfWeek()));
+        assertEquals(true, test.isSupported(DateTimeFieldType.dayOfYear()));
+        assertEquals(true, test.isSupported(DateTimeFieldType.weekOfWeekyear()));
+        assertEquals(true, test.isSupported(DateTimeFieldType.weekyear()));
+        assertEquals(true, test.isSupported(DateTimeFieldType.yearOfCentury()));
+        assertEquals(true, test.isSupported(DateTimeFieldType.yearOfEra()));
+        assertEquals(true, test.isSupported(DateTimeFieldType.centuryOfEra()));
+        assertEquals(true, test.isSupported(DateTimeFieldType.weekyearOfCentury()));
+        assertEquals(true, test.isSupported(DateTimeFieldType.era()));
+        
+        assertEquals(true, test.isSupported(DateTimeFieldType.hourOfDay()));
+        assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfHour()));
+        assertEquals(true, test.isSupported(DateTimeFieldType.secondOfMinute()));
+        assertEquals(true, test.isSupported(DateTimeFieldType.millisOfSecond()));
+        assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfDay()));
+        assertEquals(true, test.isSupported(DateTimeFieldType.secondOfDay()));
+        assertEquals(true, test.isSupported(DateTimeFieldType.millisOfDay()));
+        assertEquals(true, test.isSupported(DateTimeFieldType.hourOfHalfday()));
+        assertEquals(true, test.isSupported(DateTimeFieldType.halfdayOfDay()));
+        assertEquals(true, test.isSupported(DateTimeFieldType.clockhourOfHalfday()));
+        assertEquals(true, test.isSupported(DateTimeFieldType.clockhourOfDay()));
+        
+        assertEquals(false, test.isSupported((DateTimeFieldType) null));
+    }
+
+    public void testIsSupported_DurationFieldType() {
+        LocalDateTime test = new LocalDateTime();
+        assertEquals(false, test.isSupported(DurationFieldType.eras()));
+        assertEquals(true, test.isSupported(DurationFieldType.centuries()));
+        assertEquals(true, test.isSupported(DurationFieldType.years()));
+        assertEquals(true, test.isSupported(DurationFieldType.months()));
+        assertEquals(true, test.isSupported(DurationFieldType.weekyears()));
+        assertEquals(true, test.isSupported(DurationFieldType.weeks()));
+        assertEquals(true, test.isSupported(DurationFieldType.days()));
+        
+        assertEquals(true, test.isSupported(DurationFieldType.hours()));
+        assertEquals(true, test.isSupported(DurationFieldType.minutes()));
+        assertEquals(true, test.isSupported(DurationFieldType.seconds()));
+        assertEquals(true, test.isSupported(DurationFieldType.millis()));
+        assertEquals(true, test.isSupported(DurationFieldType.halfdays()));
+        
+        assertEquals(false, test.isSupported((DurationFieldType) null));
+    }
+
+    public void testEqualsHashCode() {
+        LocalDateTime test1 = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, COPTIC_PARIS);
+        LocalDateTime test2 = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, COPTIC_PARIS);
+        assertEquals(true, test1.equals(test2));
+        assertEquals(true, test2.equals(test1));
+        assertEquals(true, test1.equals(test1));
+        assertEquals(true, test2.equals(test2));
+        assertEquals(true, test1.hashCode() == test2.hashCode());
+        assertEquals(true, test1.hashCode() == test1.hashCode());
+        assertEquals(true, test2.hashCode() == test2.hashCode());
+        
+        LocalDateTime test3 = new LocalDateTime(1971, 6, 9, 10, 20, 30, 40);
+        assertEquals(false, test1.equals(test3));
+        assertEquals(false, test2.equals(test3));
+        assertEquals(false, test3.equals(test1));
+        assertEquals(false, test3.equals(test2));
+        assertEquals(false, test1.hashCode() == test3.hashCode());
+        assertEquals(false, test2.hashCode() == test3.hashCode());
+        
+        assertEquals(false, test1.equals("Hello"));
+        assertEquals(true, test1.equals(new MockInstant()));
+        assertEquals(false, test1.equals(new YearMonthDay(1970, 6, 9, COPTIC_PARIS)));
+        assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE));
+    }
+    
+    class MockInstant extends MockPartial {
+        public Chronology getChronology() {
+            return COPTIC_UTC;
+        }
+        public DateTimeField[] getFields() {
+            return new DateTimeField[] {
+                COPTIC_UTC.year(),
+                COPTIC_UTC.monthOfYear(),
+                COPTIC_UTC.dayOfMonth(),
+                COPTIC_UTC.millisOfDay(),
+            };
+        }
+        public int[] getValues() {
+            return new int[] {1970, 6, 9, MILLIS_OF_DAY_UTC};
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    public void testCompareTo() {
+        LocalDateTime test1 = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40);
+        LocalDateTime test1a = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40);
+        assertEquals(0, test1.compareTo(test1a));
+        assertEquals(0, test1a.compareTo(test1));
+        assertEquals(0, test1.compareTo(test1));
+        assertEquals(0, test1a.compareTo(test1a));
+        
+        LocalDateTime test2 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40);
+        assertEquals(-1, test1.compareTo(test2));
+        assertEquals(+1, test2.compareTo(test1));
+        
+        LocalDateTime test3 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40, GREGORIAN_UTC);
+        assertEquals(-1, test1.compareTo(test3));
+        assertEquals(+1, test3.compareTo(test1));
+        assertEquals(0, test3.compareTo(test2));
+        
+        DateTimeFieldType[] types = new DateTimeFieldType[] {
+            DateTimeFieldType.year(),
+            DateTimeFieldType.monthOfYear(),
+            DateTimeFieldType.dayOfMonth(),
+            DateTimeFieldType.millisOfDay(),
+        };
+        int[] values = new int[] {2005, 6, 2, MILLIS_OF_DAY_UTC};
+        Partial p = new Partial(types, values);
+        assertEquals(0, test1.compareTo(p));
+        try {
+            test1.compareTo(null);
+            fail();
+        } catch (NullPointerException ex) {}
+        try {
+            test1.compareTo(new Date());
+            fail();
+        } catch (ClassCastException ex) {}
+        try {
+            test1.compareTo(new YearMonthDay());
+            fail();
+        } catch (ClassCastException ex) {}
+        try {
+            test1.compareTo(new TimeOfDay());
+            fail();
+        } catch (ClassCastException ex) {}
+        Partial partial = new Partial()
+            .with(DateTimeFieldType.centuryOfEra(), 1)
+            .with(DateTimeFieldType.halfdayOfDay(), 0)
+            .with(DateTimeFieldType.dayOfMonth(), 9);
+        try {
+            new LocalDateTime(1970, 6, 9, 10, 20, 30, 40).compareTo(partial);
+            fail();
+        } catch (ClassCastException ex) {}
+    }
+    
+    //-----------------------------------------------------------------------
+    public void testIsEqual_LocalDateTime() {
+        LocalDateTime test1 = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40);
+        LocalDateTime test1a = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40);
+        assertEquals(true, test1.isEqual(test1a));
+        assertEquals(true, test1a.isEqual(test1));
+        assertEquals(true, test1.isEqual(test1));
+        assertEquals(true, test1a.isEqual(test1a));
+        
+        LocalDateTime test2 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40);
+        assertEquals(false, test1.isEqual(test2));
+        assertEquals(false, test2.isEqual(test1));
+        
+        LocalDateTime test3 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40, GREGORIAN_UTC);
+        assertEquals(false, test1.isEqual(test3));
+        assertEquals(false, test3.isEqual(test1));
+        assertEquals(true, test3.isEqual(test2));
+        
+        try {
+            new LocalDateTime(2005, 7, 2, 10, 20, 30, 40).isEqual(null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+    
+    //-----------------------------------------------------------------------
+    public void testIsBefore_LocalDateTime() {
+        LocalDateTime test1 = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40);
+        LocalDateTime test1a = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40);
+        assertEquals(false, test1.isBefore(test1a));
+        assertEquals(false, test1a.isBefore(test1));
+        assertEquals(false, test1.isBefore(test1));
+        assertEquals(false, test1a.isBefore(test1a));
+        
+        LocalDateTime test2 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40);
+        assertEquals(true, test1.isBefore(test2));
+        assertEquals(false, test2.isBefore(test1));
+        
+        LocalDateTime test3 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40, GREGORIAN_UTC);
+        assertEquals(true, test1.isBefore(test3));
+        assertEquals(false, test3.isBefore(test1));
+        assertEquals(false, test3.isBefore(test2));
+        
+        try {
+            new LocalDateTime(2005, 7, 2, 10, 20, 30, 40).isBefore(null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+    
+    //-----------------------------------------------------------------------
+    public void testIsAfter_LocalDateTime() {
+        LocalDateTime test1 = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40);
+        LocalDateTime test1a = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40);
+        assertEquals(false, test1.isAfter(test1a));
+        assertEquals(false, test1a.isAfter(test1));
+        assertEquals(false, test1.isAfter(test1));
+        assertEquals(false, test1a.isAfter(test1a));
+        
+        LocalDateTime test2 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40);
+        assertEquals(false, test1.isAfter(test2));
+        assertEquals(true, test2.isAfter(test1));
+        
+        LocalDateTime test3 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40, GREGORIAN_UTC);
+        assertEquals(false, test1.isAfter(test3));
+        assertEquals(true, test3.isAfter(test1));
+        assertEquals(false, test3.isAfter(test2));
+        
+        try {
+            new LocalDateTime(2005, 7, 2, 10, 20, 30, 40).isAfter(null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
+    public void testWithDate() {
+        LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40);
+        LocalDateTime result = test.withDate(2006, 2, 1);
+        
+        check(test, 2004, 6, 9, 10, 20, 30, 40);
+        check(result, 2006, 2, 1, 10, 20, 30, 40);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testWithTime() {
+        LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40);
+        LocalDateTime result = test.withTime(9, 8, 7, 6);
+        
+        check(test, 2004, 6, 9, 10, 20, 30, 40);
+        check(result, 2004, 6, 9, 9, 8, 7, 6);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testWithField_DateTimeFieldType_int_1() {
+        LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40);
+        LocalDateTime result = test.withField(DateTimeFieldType.year(), 2006);
+        
+        assertEquals(new LocalDateTime(2004, 6, 9, 10, 20, 30, 40), test);
+        assertEquals(new LocalDateTime(2006, 6, 9, 10, 20, 30, 40), result);
+    }
+
+    public void testWithField_DateTimeFieldType_int_2() {
+        LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40);
+        try {
+            test.withField(null, 6);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testWithField_DateTimeFieldType_int_3() {
+        LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40);
+        LocalDateTime result = test.withField(DateTimeFieldType.year(), 2004);
+        assertEquals(new LocalDateTime(2004, 6, 9, 10, 20, 30, 40), test);
+        assertSame(test, result);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testWithFieldAdded_DurationFieldType_int_1() {
+        LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40);
+        LocalDateTime result = test.withFieldAdded(DurationFieldType.years(), 6);
+        
+        assertEquals(new LocalDateTime(2004, 6, 9, 10, 20, 30, 40), test);
+        assertEquals(new LocalDateTime(2010, 6, 9, 10, 20, 30, 40), result);
+    }
+
+    public void testWithFieldAdded_DurationFieldType_int_2() {
+        LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40);
+        try {
+            test.withFieldAdded(null, 0);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testWithFieldAdded_DurationFieldType_int_3() {
+        LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40);
+        try {
+            test.withFieldAdded(null, 6);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testWithFieldAdded_DurationFieldType_int_4() {
+        LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40);
+        LocalDateTime result = test.withFieldAdded(DurationFieldType.years(), 0);
+        assertSame(test, result);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testPlus_RP() {
+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);
+        LocalDateTime result = test.plus(new Period(1, 2, 3, 4, 29, 6, 7, 8));
+        LocalDateTime expected = new LocalDateTime(2003, 7, 29, 15, 26, 37, 48, BUDDHIST_LONDON);
+        assertEquals(expected, result);
+        
+        result = test.plus((ReadablePeriod) null);
+        assertSame(test, result);
+    }
+
+    public void testPlusYears_int() {
+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);
+        LocalDateTime result = test.plusYears(1);
+        LocalDateTime expected = new LocalDateTime(2003, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);
+        assertEquals(expected, result);
+        
+        result = test.plusYears(0);
+        assertSame(test, result);
+    }
+
+    public void testPlusMonths_int() {
+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);
+        LocalDateTime result = test.plusMonths(1);
+        LocalDateTime expected = new LocalDateTime(2002, 6, 3, 10, 20, 30, 40, BUDDHIST_LONDON);
+        assertEquals(expected, result);
+        
+        result = test.plusMonths(0);
+        assertSame(test, result);
+    }
+
+    public void testPlusWeeks_int() {
+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);
+        LocalDateTime result = test.plusWeeks(1);
+        LocalDateTime expected = new LocalDateTime(2002, 5, 10, 10, 20, 30, 40, BUDDHIST_LONDON);
+        assertEquals(expected, result);
+        
+        result = test.plusWeeks(0);
+        assertSame(test, result);
+    }
+
+    public void testPlusDays_int() {
+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);
+        LocalDateTime result = test.plusDays(1);
+        LocalDateTime expected = new LocalDateTime(2002, 5, 4, 10, 20, 30, 40, BUDDHIST_LONDON);
+        assertEquals(expected, result);
+        
+        result = test.plusDays(0);
+        assertSame(test, result);
+    }
+
+    public void testPlusHours_int() {
+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);
+        LocalDateTime result = test.plusHours(1);
+        LocalDateTime expected = new LocalDateTime(2002, 5, 3, 11, 20, 30, 40, BUDDHIST_LONDON);
+        assertEquals(expected, result);
+        
+        result = test.plusHours(0);
+        assertSame(test, result);
+    }
+
+    public void testPlusMinutes_int() {
+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);
+        LocalDateTime result = test.plusMinutes(1);
+        LocalDateTime expected = new LocalDateTime(2002, 5, 3, 10, 21, 30, 40, BUDDHIST_LONDON);
+        assertEquals(expected, result);
+        
+        result = test.plusMinutes(0);
+        assertSame(test, result);
+    }
+
+    public void testPlusSeconds_int() {
+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);
+        LocalDateTime result = test.plusSeconds(1);
+        LocalDateTime expected = new LocalDateTime(2002, 5, 3, 10, 20, 31, 40, BUDDHIST_LONDON);
+        assertEquals(expected, result);
+        
+        result = test.plusSeconds(0);
+        assertSame(test, result);
+    }
+
+    public void testPlusMillis_int() {
+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);
+        LocalDateTime result = test.plusMillis(1);
+        LocalDateTime expected = new LocalDateTime(2002, 5, 3, 10, 20, 30, 41, BUDDHIST_LONDON);
+        assertEquals(expected, result);
+        
+        result = test.plusMillis(0);
+        assertSame(test, result);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testMinus_RP() {
+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);
+        LocalDateTime result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1));
+        
+        LocalDateTime expected = new LocalDateTime(2001, 3, 26, 9, 19, 29, 39, BUDDHIST_LONDON);
+        assertEquals(expected, result);
+        
+        result = test.minus((ReadablePeriod) null);
+        assertSame(test, result);
+    }
+
+    public void testMinusYears_int() {
+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);
+        LocalDateTime result = test.minusYears(1);
+        LocalDateTime expected = new LocalDateTime(2001, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);
+        assertEquals(expected, result);
+        
+        result = test.minusYears(0);
+        assertSame(test, result);
+    }
+
+    public void testMinusMonths_int() {
+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);
+        LocalDateTime result = test.minusMonths(1);
+        LocalDateTime expected = new LocalDateTime(2002, 4, 3, 10, 20, 30, 40, BUDDHIST_LONDON);
+        assertEquals(expected, result);
+        
+        result = test.minusMonths(0);
+        assertSame(test, result);
+    }
+
+    public void testMinusWeeks_int() {
+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);
+        LocalDateTime result = test.minusWeeks(1);
+        LocalDateTime expected = new LocalDateTime(2002, 4, 26, 10, 20, 30, 40, BUDDHIST_LONDON);
+        assertEquals(expected, result);
+        
+        result = test.minusWeeks(0);
+        assertSame(test, result);
+    }
+
+    public void testMinusDays_int() {
+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);
+        LocalDateTime result = test.minusDays(1);
+        LocalDateTime expected = new LocalDateTime(2002, 5, 2, 10, 20, 30, 40, BUDDHIST_LONDON);
+        assertEquals(expected, result);
+        
+        result = test.minusDays(0);
+        assertSame(test, result);
+    }
+
+    public void testMinusHours_int() {
+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);
+        LocalDateTime result = test.minusHours(1);
+        LocalDateTime expected = new LocalDateTime(2002, 5, 3, 9, 20, 30, 40, BUDDHIST_LONDON);
+        assertEquals(expected, result);
+        
+        result = test.minusHours(0);
+        assertSame(test, result);
+    }
+
+    public void testMinusMinutes_int() {
+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);
+        LocalDateTime result = test.minusMinutes(1);
+        LocalDateTime expected = new LocalDateTime(2002, 5, 3, 10, 19, 30, 40, BUDDHIST_LONDON);
+        assertEquals(expected, result);
+        
+        result = test.minusMinutes(0);
+        assertSame(test, result);
+    }
+
+    public void testMinusSeconds_int() {
+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);
+        LocalDateTime result = test.minusSeconds(1);
+        LocalDateTime expected = new LocalDateTime(2002, 5, 3, 10, 20, 29, 40, BUDDHIST_LONDON);
+        assertEquals(expected, result);
+        
+        result = test.minusSeconds(0);
+        assertSame(test, result);
+    }
+
+    public void testMinusMillis_int() {
+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);
+        LocalDateTime result = test.minusMillis(1);
+        LocalDateTime expected = new LocalDateTime(2002, 5, 3, 10, 20, 30, 39, BUDDHIST_LONDON);
+        assertEquals(expected, result);
+        
+        result = test.minusMillis(0);
+        assertSame(test, result);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testGetters() {
+        LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC);
+        assertEquals(1970, test.getYear());
+        assertEquals(6, test.getMonthOfYear());
+        assertEquals(9, test.getDayOfMonth());
+        assertEquals(160, test.getDayOfYear());
+        assertEquals(2, test.getDayOfWeek());
+        assertEquals(24, test.getWeekOfWeekyear());
+        assertEquals(1970, test.getWeekyear());
+        assertEquals(70, test.getYearOfCentury());
+        assertEquals(20, test.getCenturyOfEra());
+        assertEquals(1970, test.getYearOfEra());
+        assertEquals(DateTimeConstants.AD, test.getEra());
+        assertEquals(10, test.getHourOfDay());
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(30, test.getSecondOfMinute());
+        assertEquals(40, test.getMillisOfSecond());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testWithers() {
+        LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC);
+        check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40);
+        check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40);
+        check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40);
+        check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40);
+        check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40);
+        check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40);
+        check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40);
+        check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40);
+        check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40);
+        check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40);
+        check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40);
+        check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40);
+        check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40);
+        check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40);
+        check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6);
+        try {
+            test.withMonthOfYear(0);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            test.withMonthOfYear(13);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToDateTime() {
+        LocalDateTime base = new LocalDateTime(2005, 6, 9, 6, 7, 8, 9, COPTIC_PARIS); // PARIS irrelevant
+        
+        DateTime test = base.toDateTime();
+        check(base, 2005, 6, 9, 6, 7, 8, 9);
+        DateTime expected = new DateTime(2005, 6, 9, 6, 7, 8, 9, COPTIC_LONDON);
+        assertEquals(expected, test);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToDateTime_Zone() {
+        LocalDateTime base = new LocalDateTime(2005, 6, 9, 6, 7, 8, 9, COPTIC_PARIS); // PARIS irrelevant
+        
+        DateTime test = base.toDateTime(TOKYO);
+        check(base, 2005, 6, 9, 6, 7, 8, 9);
+        DateTime expected = new DateTime(2005, 6, 9, 6, 7, 8, 9, COPTIC_TOKYO);
+        assertEquals(expected, test);
+    }
+
+    public void testToDateTime_nullZone() {
+        LocalDateTime base = new LocalDateTime(2005, 6, 9, 6, 7, 8, 9, COPTIC_PARIS); // PARIS irrelevant
+        
+        DateTime test = base.toDateTime((DateTimeZone) null);
+        check(base, 2005, 6, 9, 6, 7, 8, 9);
+        DateTime expected = new DateTime(2005, 6, 9, 6, 7, 8, 9, COPTIC_LONDON);
+        assertEquals(expected, test);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToLocalDate() {
+        LocalDateTime base = new LocalDateTime(2005, 6, 9, 6, 7, 8, 9, COPTIC_PARIS); // PARIS irrelevant
+        LocalDate expected = new LocalDate(2005, 6, 9, COPTIC_LONDON);
+        assertEquals(expected,base.toLocalDate());
+    }
+
+    public void testToLocalTime() {
+        LocalDateTime base = new LocalDateTime(2005, 6, 9, 6, 7, 8, 9, COPTIC_PARIS); // PARIS irrelevant
+        LocalTime expected = new LocalTime(6, 7, 8, 9, COPTIC_LONDON);
+        assertEquals(expected,base.toLocalTime());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToDateTime_RI() {
+        LocalDateTime base = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40, COPTIC_PARIS);
+        DateTime dt = new DateTime(2002, 1, 3, 4, 5, 6, 7, BUDDHIST_TOKYO);
+        
+        DateTime test = base.toDateTime(dt);
+        check(base, 2005, 6, 9, 10, 20, 30, 40);
+        DateTime expected = new DateTime(2005, 6, 9, 10, 20, 30, 40, BUDDHIST_TOKYO);
+        assertEquals(expected, test);
+    }
+
+    public void testToDateTime_nullRI() {
+        LocalDateTime base = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40, COPTIC_PARIS);
+        
+        DateTime test = base.toDateTime((ReadableInstant) null);
+        check(base, 2005, 6, 9, 10, 20, 30, 40);
+        DateTime expected = new DateTime(2005, 6, 9, 10, 20, 30, 40, ISO_LONDON);
+        assertEquals(expected, test);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testProperty() {
+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40, GJ_UTC);
+        assertEquals(test.year(), test.property(DateTimeFieldType.year()));
+        assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear()));
+        assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth()));
+        assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek()));
+        assertEquals(test.dayOfYear(), test.property(DateTimeFieldType.dayOfYear()));
+        assertEquals(test.weekOfWeekyear(), test.property(DateTimeFieldType.weekOfWeekyear()));
+        assertEquals(test.weekyear(), test.property(DateTimeFieldType.weekyear()));
+        assertEquals(test.yearOfCentury(), test.property(DateTimeFieldType.yearOfCentury()));
+        assertEquals(test.yearOfEra(), test.property(DateTimeFieldType.yearOfEra()));
+        assertEquals(test.centuryOfEra(), test.property(DateTimeFieldType.centuryOfEra()));
+        assertEquals(test.era(), test.property(DateTimeFieldType.era()));
+        assertEquals(test.hourOfDay(), test.property(DateTimeFieldType.hourOfDay()));
+        assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour()));
+        assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute()));
+        assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond()));
+        
+        try {
+            test.property(null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        assertEquals(test, test.property(DateTimeFieldType.minuteOfDay()).getLocalDateTime());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testSerialization() throws Exception {
+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40, COPTIC_PARIS);
+        
+        ByteArrayOutputStream baos = new ByteArrayOutputStream();
+        ObjectOutputStream oos = new ObjectOutputStream(baos);
+        oos.writeObject(test);
+        byte[] bytes = baos.toByteArray();
+        oos.close();
+        
+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
+        ObjectInputStream ois = new ObjectInputStream(bais);
+        LocalDateTime result = (LocalDateTime) ois.readObject();
+        ois.close();
+        
+        assertEquals(test, result);
+        assertTrue(Arrays.equals(test.getValues(), result.getValues()));
+        assertTrue(Arrays.equals(test.getFields(), result.getFields()));
+        assertEquals(test.getChronology(), result.getChronology());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToString() {
+        LocalDateTime test = new LocalDateTime(2002, 6, 9, 10, 20, 30, 40);
+        assertEquals("2002-06-09T10:20:30.040", test.toString());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToString_String() {
+        LocalDateTime test = new LocalDateTime(2002, 6, 9, 10, 20, 30, 40);
+        assertEquals("2002 10", test.toString("yyyy HH"));
+        assertEquals("2002-06-09T10:20:30.040", test.toString((String) null));
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToString_String_Locale() {
+        LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40);
+        assertEquals("Tue 9/6", test.toString("EEE d/M", Locale.ENGLISH));
+        assertEquals("mar. 9/6", test.toString("EEE d/M", Locale.FRENCH));
+        assertEquals("1970-06-09T10:20:30.040", test.toString(null, Locale.ENGLISH));
+        assertEquals("Tue 9/6", test.toString("EEE d/M", null));
+        assertEquals("1970-06-09T10:20:30.040", test.toString(null, null));
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToString_DTFormatter() {
+        LocalDateTime test = new LocalDateTime(2002, 6, 9, 10, 20, 30, 40);
+        assertEquals("2002 10", test.toString(DateTimeFormat.forPattern("yyyy HH")));
+        assertEquals("2002-06-09T10:20:30.040", test.toString((DateTimeFormatter) null));
+    }
+
+    //-----------------------------------------------------------------------
+    private void check(LocalDateTime test, int year, int month, int day, int hour, int min, int sec, int mil) {
+        assertEquals(year, test.getYear());
+        assertEquals(month, test.getMonthOfYear());
+        assertEquals(day, test.getDayOfMonth());
+        assertEquals(hour, test.getHourOfDay());
+        assertEquals(min, test.getMinuteOfHour());
+        assertEquals(sec, test.getSecondOfMinute());
+        assertEquals(mil, test.getMillisOfSecond());
+    }
+}

From 88164922de11f510206e06689db05b797d00f8b9 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Tue, 28 Mar 2006 04:31:15 +0000
Subject: [PATCH 059/115] fixed counts in comments

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1056 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/LocalDate.java     | 2 +-
 JodaTime/src/java/org/joda/time/LocalDateTime.java | 4 ++--
 2 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/LocalDate.java b/JodaTime/src/java/org/joda/time/LocalDate.java
index b10e36487..492f1429b 100644
--- a/JodaTime/src/java/org/joda/time/LocalDate.java
+++ b/JodaTime/src/java/org/joda/time/LocalDate.java
@@ -714,7 +714,7 @@ public LocalDate withFields(ReadablePartial partial) {
      * month of year field will be changed in the returned instance.
      * If the field type is null, then <code>this</code> is returned.
      * <p>
-     * These three lines are equivalent:
+     * These two lines are equivalent:
      * <pre>
      * LocalDate updated = dt.withField(DateTimeFieldType.dayOfMonth(), 6);
      * LocalDate updated = dt.dayOfMonth().withValue(6);
diff --git a/JodaTime/src/java/org/joda/time/LocalDateTime.java b/JodaTime/src/java/org/joda/time/LocalDateTime.java
index b566a0785..4ab415153 100644
--- a/JodaTime/src/java/org/joda/time/LocalDateTime.java
+++ b/JodaTime/src/java/org/joda/time/LocalDateTime.java
@@ -412,10 +412,10 @@ public LocalDateTime(
 
     //-----------------------------------------------------------------------
     /**
-     * Gets the number of fields in this partial, which is three.
+     * Gets the number of fields in this partial, which is four.
      * The supported fields are Year, MonthOfDay, DayOfMonth and MillisOfDay.
      *
-     * @return the field count, three
+     * @return the field count, four
      */
     public int size() {
         return 4;

From e512741af38d0eff4f6e6c8969205abdecdd359a Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 1 Apr 2006 14:33:41 +0000
Subject: [PATCH 060/115] Test LocalDateTime

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1057 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/java/org/joda/time/LocalDateTime.java |    4 +-
 JodaTime/src/test/org/joda/time/TestAll.java  |    2 +
 .../time/TestLocalDateTime_Constructors.java  |  533 ++++++++
 .../time/TestLocalDateTime_Properties.java    | 1078 +++++++++++++++++
 4 files changed, 1615 insertions(+), 2 deletions(-)
 create mode 100644 JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java
 create mode 100644 JodaTime/src/test/org/joda/time/TestLocalDateTime_Properties.java

diff --git a/JodaTime/src/java/org/joda/time/LocalDateTime.java b/JodaTime/src/java/org/joda/time/LocalDateTime.java
index 4ab415153..5ee0c987f 100644
--- a/JodaTime/src/java/org/joda/time/LocalDateTime.java
+++ b/JodaTime/src/java/org/joda/time/LocalDateTime.java
@@ -113,7 +113,7 @@
      * @throws IllegalArgumentException if the calendar is null
      * @throws IllegalArgumentException if the date is invalid for the ISO chronology
      */
-    public static LocalDateTime forFields(Calendar calendar) {
+    public static LocalDateTime fromCalendarFields(Calendar calendar) {
         if (calendar == null) {
             throw new IllegalArgumentException("The calendar must not be null");
         }
@@ -143,7 +143,7 @@ public static LocalDateTime forFields(Calendar calendar) {
      * @throws IllegalArgumentException if the calendar is null
      * @throws IllegalArgumentException if the date is invalid for the ISO chronology
      */
-    public static LocalDateTime forFields(Date date) {
+    public static LocalDateTime fromDateFields(Date date) {
         if (date == null) {
             throw new IllegalArgumentException("The date must not be null");
         }
diff --git a/JodaTime/src/test/org/joda/time/TestAll.java b/JodaTime/src/test/org/joda/time/TestAll.java
index e7c342447..f053eff4e 100644
--- a/JodaTime/src/test/org/joda/time/TestAll.java
+++ b/JodaTime/src/test/org/joda/time/TestAll.java
@@ -61,7 +61,9 @@ public static Test suite() {
         suite.addTest(TestInterval_Constructors.suite());
         suite.addTest(TestInterval_Basics.suite());
         
+        suite.addTest(TestLocalDateTime_Constructors.suite());
         suite.addTest(TestLocalDateTime_Basics.suite());
+        suite.addTest(TestLocalDateTime_Properties.suite());
         
         suite.addTest(TestLocalDate_Constructors.suite());
         suite.addTest(TestLocalDate_Basics.suite());
diff --git a/JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java b/JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java
new file mode 100644
index 000000000..8fa56f76c
--- /dev/null
+++ b/JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java
@@ -0,0 +1,533 @@
+/*
+ *  Copyright 2001-2006 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time;
+
+import java.util.Calendar;
+import java.util.Date;
+import java.util.GregorianCalendar;
+
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+import org.joda.time.chrono.GregorianChronology;
+import org.joda.time.chrono.ISOChronology;
+
+/**
+ * This class is a Junit unit test for LocalDateTime.
+ *
+ * @author Stephen Colebourne
+ */
+public class TestLocalDateTime_Constructors extends TestCase {
+
+    private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
+    private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
+    private static final DateTimeZone MOSCOW = DateTimeZone.forID("Europe/Moscow");
+    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
+    private static final Chronology GREGORIAN_UTC = GregorianChronology.getInstanceUTC();
+    private static final Chronology GREGORIAN_PARIS = GregorianChronology.getInstance(PARIS);
+    private static final int OFFSET_PARIS = PARIS.getOffset(0L) / DateTimeConstants.MILLIS_PER_HOUR;
+    private static final int OFFSET_MOSCOW = MOSCOW.getOffset(0L) / DateTimeConstants.MILLIS_PER_HOUR;
+    
+    private long MILLIS_OF_DAY =
+        10L * DateTimeConstants.MILLIS_PER_HOUR
+        + 20L * DateTimeConstants.MILLIS_PER_MINUTE
+        + 30L * DateTimeConstants.MILLIS_PER_SECOND
+        + 40L;
+    private long TEST_TIME_NOW =
+        (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY
+        + MILLIS_OF_DAY;
+
+    private long TEST_TIME1 =
+        (31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
+        + 12L * DateTimeConstants.MILLIS_PER_HOUR
+        + 24L * DateTimeConstants.MILLIS_PER_MINUTE;
+    private long TEST_TIME2 =
+        (365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY
+        + 14L * DateTimeConstants.MILLIS_PER_HOUR
+        + 28L * DateTimeConstants.MILLIS_PER_MINUTE;
+
+    private DateTimeZone zone = null;
+
+    public static void main(String[] args) {
+        junit.textui.TestRunner.run(suite());
+    }
+
+    public static TestSuite suite() {
+        return new TestSuite(TestLocalDateTime_Constructors.class);
+    }
+
+    public TestLocalDateTime_Constructors(String name) {
+        super(name);
+    }
+
+    protected void setUp() throws Exception {
+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
+        zone = DateTimeZone.getDefault();
+        DateTimeZone.setDefault(MOSCOW);
+    }
+
+    protected void tearDown() throws Exception {
+        DateTimeUtils.setCurrentMillisSystem();
+        DateTimeZone.setDefault(zone);
+        zone = null;
+    }
+
+    //-----------------------------------------------------------------------
+    public void testFactory_FromCalendarFields() throws Exception {
+        GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);
+        cal.set(Calendar.MILLISECOND, 7);
+        LocalDateTime expected = new LocalDateTime(1970, 2, 3, 4, 5, 6, 7);
+        assertEquals(expected, LocalDateTime.fromCalendarFields(cal));
+        try {
+            LocalDateTime.fromCalendarFields((Calendar) null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
+    public void testFactory_FromDateFields() throws Exception {
+        GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);
+        cal.set(Calendar.MILLISECOND, 7);
+        LocalDateTime expected = new LocalDateTime(1970, 2, 3, 4, 5 ,6, 7);
+        assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime()));
+        try {
+            LocalDateTime.fromDateFields((Date) null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
+    public void testConstructor() throws Throwable {
+        LocalDateTime test = new LocalDateTime();
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1970, test.getYear());
+        assertEquals(6, test.getMonthOfYear());
+        assertEquals(9, test.getDayOfMonth());
+        assertEquals(10 + OFFSET_MOSCOW, test.getHourOfDay());
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(30, test.getSecondOfMinute());
+        assertEquals(40, test.getMillisOfSecond());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testConstructor_DateTimeZone() throws Throwable {
+        DateTime dt = new DateTime(2005, 6, 8, 23, 59, 0, 0, LONDON);
+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());
+        // 23:59 in London is 00:59 the following day in Paris
+        
+        LocalDateTime test = new LocalDateTime(LONDON);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(2005, test.getYear());
+        assertEquals(6, test.getMonthOfYear());
+        assertEquals(8, test.getDayOfMonth());
+        assertEquals(23, test.getHourOfDay());
+        assertEquals(59, test.getMinuteOfHour());
+        assertEquals(0, test.getSecondOfMinute());
+        assertEquals(0, test.getMillisOfSecond());
+        
+        test = new LocalDateTime(PARIS);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(2005, test.getYear());
+        assertEquals(6, test.getMonthOfYear());
+        assertEquals(9, test.getDayOfMonth());
+        assertEquals(0, test.getHourOfDay());
+        assertEquals(59, test.getMinuteOfHour());
+        assertEquals(0, test.getSecondOfMinute());
+        assertEquals(0, test.getMillisOfSecond());
+    }
+
+    public void testConstructor_nullDateTimeZone() throws Throwable {
+        LocalDateTime test = new LocalDateTime((DateTimeZone) null);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1970, test.getYear());
+        assertEquals(6, test.getMonthOfYear());
+        assertEquals(9, test.getDayOfMonth());
+        assertEquals(10 + OFFSET_MOSCOW, test.getHourOfDay());
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(30, test.getSecondOfMinute());
+        assertEquals(40, test.getMillisOfSecond());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testConstructor_Chronology() throws Throwable {
+        LocalDateTime test = new LocalDateTime(GREGORIAN_PARIS);
+        assertEquals(GREGORIAN_UTC, test.getChronology());
+        assertEquals(1970, test.getYear());
+        assertEquals(6, test.getMonthOfYear());
+        assertEquals(9, test.getDayOfMonth());
+        assertEquals(10 + OFFSET_PARIS, test.getHourOfDay());
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(30, test.getSecondOfMinute());
+        assertEquals(40, test.getMillisOfSecond());
+    }
+
+    public void testConstructor_nullChronology() throws Throwable {
+        LocalDateTime test = new LocalDateTime((Chronology) null);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1970, test.getYear());
+        assertEquals(6, test.getMonthOfYear());
+        assertEquals(9, test.getDayOfMonth());
+        assertEquals(10 + OFFSET_MOSCOW, test.getHourOfDay());
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(30, test.getSecondOfMinute());
+        assertEquals(40, test.getMillisOfSecond());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testConstructor_long1() throws Throwable {
+        LocalDateTime test = new LocalDateTime(TEST_TIME1);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1970, test.getYear());
+        assertEquals(4, test.getMonthOfYear());
+        assertEquals(6, test.getDayOfMonth());
+        assertEquals(12 + OFFSET_MOSCOW, test.getHourOfDay());
+        assertEquals(24, test.getMinuteOfHour());
+        assertEquals(0, test.getSecondOfMinute());
+        assertEquals(0, test.getMillisOfSecond());
+    }
+
+    public void testConstructor_long2() throws Throwable {
+        LocalDateTime test = new LocalDateTime(TEST_TIME2);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1971, test.getYear());
+        assertEquals(5, test.getMonthOfYear());
+        assertEquals(7, test.getDayOfMonth());
+        assertEquals(14 + OFFSET_MOSCOW, test.getHourOfDay());
+        assertEquals(28, test.getMinuteOfHour());
+        assertEquals(0, test.getSecondOfMinute());
+        assertEquals(0, test.getMillisOfSecond());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testConstructor_long1_DateTimeZone() throws Throwable {
+        LocalDateTime test = new LocalDateTime(TEST_TIME1, PARIS);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1970, test.getYear());
+        assertEquals(4, test.getMonthOfYear());
+        assertEquals(6, test.getDayOfMonth());
+        assertEquals(12 + OFFSET_PARIS, test.getHourOfDay());
+        assertEquals(24, test.getMinuteOfHour());
+        assertEquals(0, test.getSecondOfMinute());
+        assertEquals(0, test.getMillisOfSecond());
+    }
+
+    public void testConstructor_long2_DateTimeZone() throws Throwable {
+        LocalDateTime test = new LocalDateTime(TEST_TIME2, PARIS);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1971, test.getYear());
+        assertEquals(5, test.getMonthOfYear());
+        assertEquals(7, test.getDayOfMonth());
+        assertEquals(14 + OFFSET_PARIS, test.getHourOfDay());
+        assertEquals(28, test.getMinuteOfHour());
+        assertEquals(0, test.getSecondOfMinute());
+        assertEquals(0, test.getMillisOfSecond());
+    }
+
+    public void testConstructor_long_nullDateTimeZone() throws Throwable {
+        LocalDateTime test = new LocalDateTime(TEST_TIME1, (DateTimeZone) null);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1970, test.getYear());
+        assertEquals(4, test.getMonthOfYear());
+        assertEquals(6, test.getDayOfMonth());
+        assertEquals(12 + OFFSET_MOSCOW, test.getHourOfDay());
+        assertEquals(24, test.getMinuteOfHour());
+        assertEquals(0, test.getSecondOfMinute());
+        assertEquals(0, test.getMillisOfSecond());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testConstructor_long1_Chronology() throws Throwable {
+        LocalDateTime test = new LocalDateTime(TEST_TIME1, GREGORIAN_PARIS);
+        assertEquals(GREGORIAN_UTC, test.getChronology());
+        assertEquals(1970, test.getYear());
+        assertEquals(4, test.getMonthOfYear());
+        assertEquals(6, test.getDayOfMonth());
+        assertEquals(12 + OFFSET_PARIS, test.getHourOfDay());
+        assertEquals(24, test.getMinuteOfHour());
+        assertEquals(0, test.getSecondOfMinute());
+        assertEquals(0, test.getMillisOfSecond());
+    }
+
+    public void testConstructor_long2_Chronology() throws Throwable {
+        LocalDateTime test = new LocalDateTime(TEST_TIME2, GREGORIAN_PARIS);
+        assertEquals(GREGORIAN_UTC, test.getChronology());
+        assertEquals(1971, test.getYear());
+        assertEquals(5, test.getMonthOfYear());
+        assertEquals(7, test.getDayOfMonth());
+        assertEquals(14 + OFFSET_PARIS, test.getHourOfDay());
+        assertEquals(28, test.getMinuteOfHour());
+        assertEquals(0, test.getSecondOfMinute());
+        assertEquals(0, test.getMillisOfSecond());
+    }
+
+    public void testConstructor_long_nullChronology() throws Throwable {
+        LocalDateTime test = new LocalDateTime(TEST_TIME1, (Chronology) null);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1970, test.getYear());
+        assertEquals(4, test.getMonthOfYear());
+        assertEquals(6, test.getDayOfMonth());
+        assertEquals(12 + OFFSET_MOSCOW, test.getHourOfDay());
+        assertEquals(24, test.getMinuteOfHour());
+        assertEquals(0, test.getSecondOfMinute());
+        assertEquals(0, test.getMillisOfSecond());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testConstructor_Object1() throws Throwable {
+        Date date = new Date(TEST_TIME1);
+        LocalDateTime test = new LocalDateTime(date);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1970, test.getYear());
+        assertEquals(4, test.getMonthOfYear());
+        assertEquals(6, test.getDayOfMonth());
+        assertEquals(12 + OFFSET_MOSCOW, test.getHourOfDay());
+        assertEquals(24, test.getMinuteOfHour());
+        assertEquals(0, test.getSecondOfMinute());
+        assertEquals(0, test.getMillisOfSecond());
+    }
+
+    public void testConstructor_nullObject() throws Throwable {
+        LocalDateTime test = new LocalDateTime((Object) null);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1970, test.getYear());
+        assertEquals(6, test.getMonthOfYear());
+        assertEquals(9, test.getDayOfMonth());
+        assertEquals(10 + OFFSET_MOSCOW, test.getHourOfDay());
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(30, test.getSecondOfMinute());
+        assertEquals(40, test.getMillisOfSecond());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testConstructor_Object_DateTimeZone() throws Throwable {
+        Date date = new Date(TEST_TIME1);
+        LocalDateTime test = new LocalDateTime(date, PARIS);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1970, test.getYear());
+        assertEquals(4, test.getMonthOfYear());
+        assertEquals(6, test.getDayOfMonth());
+        assertEquals(12 + OFFSET_PARIS, test.getHourOfDay());
+        assertEquals(24, test.getMinuteOfHour());
+        assertEquals(0, test.getSecondOfMinute());
+        assertEquals(0, test.getMillisOfSecond());
+    }
+
+    public void testConstructor_nullObject_DateTimeZone() throws Throwable {
+        LocalDateTime test = new LocalDateTime((Object) null, PARIS);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1970, test.getYear());
+        assertEquals(6, test.getMonthOfYear());
+        assertEquals(9, test.getDayOfMonth());
+        assertEquals(10 + OFFSET_PARIS, test.getHourOfDay());
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(30, test.getSecondOfMinute());
+        assertEquals(40, test.getMillisOfSecond());
+    }
+
+    public void testConstructor_Object_nullDateTimeZone() throws Throwable {
+        Date date = new Date(TEST_TIME1);
+        LocalDateTime test = new LocalDateTime(date, (DateTimeZone) null);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1970, test.getYear());
+        assertEquals(4, test.getMonthOfYear());
+        assertEquals(6, test.getDayOfMonth());
+        assertEquals(12 + OFFSET_MOSCOW, test.getHourOfDay());
+        assertEquals(24, test.getMinuteOfHour());
+        assertEquals(0, test.getSecondOfMinute());
+        assertEquals(0, test.getMillisOfSecond());
+    }
+
+    public void testConstructor_nullObject_nullDateTimeZone() throws Throwable {
+        LocalDateTime test = new LocalDateTime((Object) null, (DateTimeZone) null);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1970, test.getYear());
+        assertEquals(6, test.getMonthOfYear());
+        assertEquals(9, test.getDayOfMonth());
+        assertEquals(10 + OFFSET_MOSCOW, test.getHourOfDay());
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(30, test.getSecondOfMinute());
+        assertEquals(40, test.getMillisOfSecond());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testConstructor_Object_Chronology() throws Throwable {
+        Date date = new Date(TEST_TIME1);
+        LocalDateTime test = new LocalDateTime(date, GREGORIAN_PARIS);
+        assertEquals(GREGORIAN_UTC, test.getChronology());
+        assertEquals(1970, test.getYear());
+        assertEquals(4, test.getMonthOfYear());
+        assertEquals(6, test.getDayOfMonth());
+        assertEquals(12 + OFFSET_PARIS, test.getHourOfDay());
+        assertEquals(24, test.getMinuteOfHour());
+        assertEquals(0, test.getSecondOfMinute());
+        assertEquals(0, test.getMillisOfSecond());
+    }
+
+    public void testConstructor_nullObject_Chronology() throws Throwable {
+        LocalDateTime test = new LocalDateTime((Object) null, GREGORIAN_PARIS);
+        assertEquals(GREGORIAN_UTC, test.getChronology());
+        assertEquals(1970, test.getYear());
+        assertEquals(6, test.getMonthOfYear());
+        assertEquals(9, test.getDayOfMonth());
+        assertEquals(10 + OFFSET_PARIS, test.getHourOfDay());
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(30, test.getSecondOfMinute());
+        assertEquals(40, test.getMillisOfSecond());
+    }
+
+    public void testConstructor_Object_nullChronology() throws Throwable {
+        Date date = new Date(TEST_TIME1);
+        LocalDateTime test = new LocalDateTime(date, (Chronology) null);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1970, test.getYear());
+        assertEquals(4, test.getMonthOfYear());
+        assertEquals(6, test.getDayOfMonth());
+        assertEquals(12 + OFFSET_MOSCOW, test.getHourOfDay());
+        assertEquals(24, test.getMinuteOfHour());
+        assertEquals(0, test.getSecondOfMinute());
+        assertEquals(0, test.getMillisOfSecond());
+    }
+
+    public void testConstructor_nullObject_nullChronology() throws Throwable {
+        LocalDateTime test = new LocalDateTime((Object) null, (Chronology) null);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1970, test.getYear());
+        assertEquals(6, test.getMonthOfYear());
+        assertEquals(9, test.getDayOfMonth());
+        assertEquals(10 + OFFSET_MOSCOW, test.getHourOfDay());
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(30, test.getSecondOfMinute());
+        assertEquals(40, test.getMillisOfSecond());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testConstructor_int_int_int_int_int() throws Throwable {
+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(2005, test.getYear());
+        assertEquals(6, test.getMonthOfYear());
+        assertEquals(9, test.getDayOfMonth());
+        assertEquals(10, test.getHourOfDay());
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(0, test.getSecondOfMinute());
+        assertEquals(0, test.getMillisOfSecond());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testConstructor_int_int_int_int_int_int() throws Throwable {
+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(2005, test.getYear());
+        assertEquals(6, test.getMonthOfYear());
+        assertEquals(9, test.getDayOfMonth());
+        assertEquals(10, test.getHourOfDay());
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(30, test.getSecondOfMinute());
+        assertEquals(0, test.getMillisOfSecond());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testConstructor_int_int_int_int_int_int_int() throws Throwable {
+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(2005, test.getYear());
+        assertEquals(6, test.getMonthOfYear());
+        assertEquals(9, test.getDayOfMonth());
+        assertEquals(10, test.getHourOfDay());
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(30, test.getSecondOfMinute());
+        assertEquals(40, test.getMillisOfSecond());
+        try {
+            new LocalDateTime(Integer.MIN_VALUE, 6, 9, 10, 20, 30, 40);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            new LocalDateTime(Integer.MAX_VALUE, 6, 9, 10, 20, 30, 40);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            new LocalDateTime(2005, 0, 9, 10, 20, 30, 40);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            new LocalDateTime(2005, 13, 9, 10, 20, 30, 40);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            new LocalDateTime(2005, 6, 0, 10, 20, 30, 40);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            new LocalDateTime(2005, 6, 31, 10, 20, 30, 40);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        new LocalDateTime(2005, 7, 31, 10, 20, 30, 40);
+        try {
+            new LocalDateTime(2005, 7, 32, 10, 20, 30, 40);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testConstructor_int_int_int_Chronology() throws Throwable {
+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40, GREGORIAN_PARIS);
+        assertEquals(GREGORIAN_UTC, test.getChronology());
+        assertEquals(2005, test.getYear());
+        assertEquals(6, test.getMonthOfYear());
+        assertEquals(9, test.getDayOfMonth());
+        assertEquals(10, test.getHourOfDay());  // PARIS has no effect
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(30, test.getSecondOfMinute());
+        assertEquals(40, test.getMillisOfSecond());
+        try {
+            new LocalDateTime(Integer.MIN_VALUE, 6, 9, 10, 20, 30, 40, GREGORIAN_PARIS);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            new LocalDateTime(Integer.MAX_VALUE, 6, 9, 10, 20, 30, 40, GREGORIAN_PARIS);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            new LocalDateTime(2005, 0, 9, 10, 20, 30, 40, GREGORIAN_PARIS);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            new LocalDateTime(2005, 13, 9, 10, 20, 30, 40, GREGORIAN_PARIS);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            new LocalDateTime(2005, 6, 0, 10, 20, 30, 40, GREGORIAN_PARIS);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            new LocalDateTime(2005, 6, 31, 10, 20, 30, 40, GREGORIAN_PARIS);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        new LocalDateTime(2005, 7, 31, 10, 20, 30, 40, GREGORIAN_PARIS);
+        try {
+            new LocalDateTime(2005, 7, 32, 10, 20, 30, 40, GREGORIAN_PARIS);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testConstructor_int_int_int_nullChronology() throws Throwable {
+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40, null);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(2005, test.getYear());
+        assertEquals(6, test.getMonthOfYear());
+        assertEquals(9, test.getDayOfMonth());
+    }
+
+}
diff --git a/JodaTime/src/test/org/joda/time/TestLocalDateTime_Properties.java b/JodaTime/src/test/org/joda/time/TestLocalDateTime_Properties.java
new file mode 100644
index 000000000..19159a4c2
--- /dev/null
+++ b/JodaTime/src/test/org/joda/time/TestLocalDateTime_Properties.java
@@ -0,0 +1,1078 @@
+/*
+ *  Copyright 2001-2006 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time;
+
+import java.util.Locale;
+
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+import org.joda.time.chrono.CopticChronology;
+
+/**
+ * This class is a Junit unit test for LocalDateTime.
+ *
+ * @author Stephen Colebourne
+ */
+public class TestLocalDateTime_Properties extends TestCase {
+
+    private static final CopticChronology COPTIC_UTC = CopticChronology.getInstanceUTC();
+
+    private int MILLIS_OF_DAY =
+        (int) (10L * DateTimeConstants.MILLIS_PER_HOUR
+        + 20L * DateTimeConstants.MILLIS_PER_MINUTE
+        + 30L * DateTimeConstants.MILLIS_PER_SECOND
+        + 40L);
+    private long TEST_TIME_NOW =
+        (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY
+        + MILLIS_OF_DAY;
+    private long TEST_TIME1 =
+        (31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
+        + 1L * DateTimeConstants.MILLIS_PER_HOUR
+        + 2L * DateTimeConstants.MILLIS_PER_MINUTE
+        + 3L * DateTimeConstants.MILLIS_PER_SECOND
+        + 4L;
+    private long TEST_TIME2 =
+        (365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY
+        + 4L * DateTimeConstants.MILLIS_PER_HOUR
+        + 5L * DateTimeConstants.MILLIS_PER_MINUTE
+        + 6L * DateTimeConstants.MILLIS_PER_SECOND
+        + 7L;
+
+    private DateTimeZone zone = null;
+
+    public static void main(String[] args) {
+        junit.textui.TestRunner.run(suite());
+    }
+
+    public static TestSuite suite() {
+        return new TestSuite(TestLocalDateTime_Properties.class);
+    }
+
+    public TestLocalDateTime_Properties(String name) {
+        super(name);
+    }
+
+    protected void setUp() throws Exception {
+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
+        zone = DateTimeZone.getDefault();
+        DateTimeZone.setDefault(DateTimeZone.UTC);
+    }
+
+    protected void tearDown() throws Exception {
+        DateTimeUtils.setCurrentMillisSystem();
+        DateTimeZone.setDefault(zone);
+        zone = null;
+    }
+
+    //-----------------------------------------------------------------------
+    public void testPropertyGetYear() {
+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);
+        assertSame(test.getChronology().year(), test.year().getField());
+        assertEquals("year", test.year().getName());
+        assertEquals("Property[year]", test.year().toString());
+        assertSame(test, test.year().getLocalDateTime());
+        assertEquals(1972, test.year().get());
+        assertEquals("1972", test.year().getAsString());
+        assertEquals("1972", test.year().getAsText());
+        assertEquals("1972", test.year().getAsText(Locale.FRENCH));
+        assertEquals("1972", test.year().getAsShortText());
+        assertEquals("1972", test.year().getAsShortText(Locale.FRENCH));
+        assertEquals(test.getChronology().years(), test.year().getDurationField());
+        assertEquals(null, test.year().getRangeDurationField());
+        assertEquals(9, test.year().getMaximumTextLength(null));
+        assertEquals(9, test.year().getMaximumShortTextLength(null));
+    }
+
+    public void testPropertyGetMaxMinValuesYear() {
+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);
+        assertEquals(-292275054, test.year().getMinimumValue());
+        assertEquals(-292275054, test.year().getMinimumValueOverall());
+        assertEquals(292278993, test.year().getMaximumValue());
+        assertEquals(292278993, test.year().getMaximumValueOverall());
+    }
+
+    public void testPropertyPlusYear() {
+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);
+        LocalDateTime copy = test.year().plus(9);
+        check(test, 1972, 6, 9, 10, 20, 30, 40);
+        check(copy, 1981, 6, 9, 10, 20, 30, 40);
+        
+        copy = test.year().plus(0);
+        check(copy, 1972, 6, 9, 10, 20, 30, 40);
+        
+        copy = test.year().plus(292278993 - 1972);
+        check(copy, 292278993, 6, 9, 10, 20, 30, 40);
+        
+        try {
+            test.year().plus(292278993 - 1972 + 1);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        check(test, 1972, 6, 9, 10, 20, 30, 40);
+        
+        copy = test.year().plus(-1972);
+        check(copy, 0, 6, 9, 10, 20, 30, 40);
+        
+        copy = test.year().plus(-1973);
+        check(copy, -1, 6, 9, 10, 20, 30, 40);
+        
+        try {
+            test.year().plus(-292275054 - 1972 - 1);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        check(test, 1972, 6, 9, 10, 20, 30, 40);
+    }
+
+    public void testPropertyPlusWrapFieldYear() {
+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);
+        LocalDateTime copy = test.year().plusWrapField(9);
+        check(test, 1972, 6, 9, 10, 20, 30, 40);
+        check(copy, 1981, 6, 9, 10, 20, 30, 40);
+        
+        copy = test.year().plusWrapField(0);
+        check(copy, 1972, 6, 9, 10, 20, 30, 40);
+        
+        copy = test.year().plusWrapField(292278993 - 1972 + 1);
+        check(copy, -292275054, 6, 9, 10, 20, 30, 40);
+        
+        copy = test.year().plusWrapField(-292275054 - 1972 - 1);
+        check(copy, 292278993, 6, 9, 10, 20, 30, 40);
+    }
+
+    public void testPropertyWithYear() {
+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);
+        LocalDateTime copy = test.year().withValue(12);
+        check(test, 1972, 6, 9, 10, 20, 30, 40);
+        check(copy, 12, 6, 9, 10, 20, 30, 40);
+    }
+
+    public void testPropertyWithTextYear() {
+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);
+        LocalDateTime copy = test.year().withValue("12");
+        check(test, 1972, 6, 9, 10, 20, 30, 40);
+        check(copy, 12, 6, 9, 10, 20, 30, 40);
+    }
+
+    public void testPropertyCompareToYear() {
+        LocalDateTime test1 = new LocalDateTime(TEST_TIME1);
+        LocalDateTime test2 = new LocalDateTime(TEST_TIME2);
+        assertEquals(true, test1.year().compareTo(test2) < 0);
+        assertEquals(true, test2.year().compareTo(test1) > 0);
+        assertEquals(true, test1.year().compareTo(test1) == 0);
+        try {
+            test1.year().compareTo((ReadablePartial) null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        
+        DateTime dt1 = new DateTime(TEST_TIME1);
+        DateTime dt2 = new DateTime(TEST_TIME2);
+        assertEquals(true, test1.year().compareTo(dt2) < 0);
+        assertEquals(true, test2.year().compareTo(dt1) > 0);
+        assertEquals(true, test1.year().compareTo(dt1) == 0);
+        try {
+            test1.year().compareTo((ReadableInstant) null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
+    public void testPropertyGetMonth() {
+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);
+        assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField());
+        assertEquals("monthOfYear", test.monthOfYear().getName());
+        assertEquals("Property[monthOfYear]", test.monthOfYear().toString());
+        assertSame(test, test.monthOfYear().getLocalDateTime());
+        assertEquals(6, test.monthOfYear().get());
+        assertEquals("6", test.monthOfYear().getAsString());
+        assertEquals("June", test.monthOfYear().getAsText());
+        assertEquals("juin", test.monthOfYear().getAsText(Locale.FRENCH));
+        assertEquals("Jun", test.monthOfYear().getAsShortText());
+        assertEquals("juin", test.monthOfYear().getAsShortText(Locale.FRENCH));
+        assertEquals(test.getChronology().months(), test.monthOfYear().getDurationField());
+        assertEquals(test.getChronology().years(), test.monthOfYear().getRangeDurationField());
+        assertEquals(9, test.monthOfYear().getMaximumTextLength(null));
+        assertEquals(3, test.monthOfYear().getMaximumShortTextLength(null));
+        test = new LocalDateTime(1972, 7, 9, 10, 20, 30, 40);
+        assertEquals("juillet", test.monthOfYear().getAsText(Locale.FRENCH));
+        assertEquals("juil.", test.monthOfYear().getAsShortText(Locale.FRENCH));
+    }
+
+    public void testPropertyGetMaxMinValuesMonth() {
+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);
+        assertEquals(1, test.monthOfYear().getMinimumValue());
+        assertEquals(1, test.monthOfYear().getMinimumValueOverall());
+        assertEquals(12, test.monthOfYear().getMaximumValue());
+        assertEquals(12, test.monthOfYear().getMaximumValueOverall());
+    }
+
+    public void testPropertyPlusMonth() {
+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);
+        LocalDateTime copy = test.monthOfYear().plus(6);
+        check(test, 1972, 6, 9, 10, 20, 30, 40);
+        check(copy, 1972, 12, 9, 10, 20, 30, 40);
+        
+        copy = test.monthOfYear().plus(7);
+        check(copy, 1973, 1, 9, 10, 20, 30, 40);
+        
+        copy = test.monthOfYear().plus(-5);
+        check(copy, 1972, 1, 9, 10, 20, 30, 40);
+        
+        copy = test.monthOfYear().plus(-6);
+        check(copy, 1971, 12, 9, 10, 20, 30, 40);
+        
+        test = new LocalDateTime(1972, 1, 31, 10, 20, 30, 40);
+        copy = test.monthOfYear().plus(1);
+        check(copy, 1972, 2, 29, 10, 20, 30, 40);
+        
+        copy = test.monthOfYear().plus(2);
+        check(copy, 1972, 3, 31, 10, 20, 30, 40);
+        
+        copy = test.monthOfYear().plus(3);
+        check(copy, 1972, 4, 30, 10, 20, 30, 40);
+        
+        test = new LocalDateTime(1971, 1, 31, 10, 20, 30, 40);
+        copy = test.monthOfYear().plus(1);
+        check(copy, 1971, 2, 28, 10, 20, 30, 40);
+    }
+
+    public void testPropertyPlusWrapFieldMonth() {
+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);
+        LocalDateTime copy = test.monthOfYear().plusWrapField(4);
+        check(test, 1972, 6, 9, 10, 20, 30, 40);
+        check(copy, 1972, 10, 9, 10, 20, 30, 40);
+        
+        copy = test.monthOfYear().plusWrapField(8);
+        check(copy, 1972, 2, 9, 10, 20, 30, 40);
+        
+        copy = test.monthOfYear().plusWrapField(-8);
+        check(copy, 1972, 10, 9, 10, 20, 30, 40);
+        
+        test = new LocalDateTime(1972, 1, 31, 10, 20, 30, 40);
+        copy = test.monthOfYear().plusWrapField(1);
+        check(copy, 1972, 2, 29, 10, 20, 30, 40);
+        
+        copy = test.monthOfYear().plusWrapField(2);
+        check(copy, 1972, 3, 31, 10, 20, 30, 40);
+        
+        copy = test.monthOfYear().plusWrapField(3);
+        check(copy, 1972, 4, 30, 10, 20, 30, 40);
+        
+        test = new LocalDateTime(1971, 1, 31, 10, 20, 30, 40);
+        copy = test.monthOfYear().plusWrapField(1);
+        check(copy, 1971, 2, 28, 10, 20, 30, 40);
+    }
+
+    public void testPropertyWithMonth() {
+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);
+        LocalDateTime copy = test.monthOfYear().withValue(12);
+        check(test, 1972, 6, 9, 10, 20, 30, 40);
+        check(copy, 1972, 12, 9, 10, 20, 30, 40);
+        
+        test = new LocalDateTime(1972, 1, 31, 10, 20, 30, 40);
+        copy = test.monthOfYear().withValue(2);
+        check(copy, 1972, 2, 29, 10, 20, 30, 40);
+        
+        try {
+            test.monthOfYear().withValue(13);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            test.monthOfYear().withValue(0);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testPropertyWithTextMonth() {
+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);
+        LocalDateTime copy = test.monthOfYear().withValue("12");
+        check(test, 1972, 6, 9, 10, 20, 30, 40);
+        check(copy, 1972, 12, 9, 10, 20, 30, 40);
+        
+        copy = test.monthOfYear().withValue("December");
+        check(test, 1972, 6, 9, 10, 20, 30, 40);
+        check(copy, 1972, 12, 9, 10, 20, 30, 40);
+        
+        copy = test.monthOfYear().withValue("Dec");
+        check(test, 1972, 6, 9, 10, 20, 30, 40);
+        check(copy, 1972, 12, 9, 10, 20, 30, 40);
+    }
+
+    public void testPropertyCompareToMonth() {
+        LocalDateTime test1 = new LocalDateTime(TEST_TIME1);
+        LocalDateTime test2 = new LocalDateTime(TEST_TIME2);
+        assertEquals(true, test1.monthOfYear().compareTo(test2) < 0);
+        assertEquals(true, test2.monthOfYear().compareTo(test1) > 0);
+        assertEquals(true, test1.monthOfYear().compareTo(test1) == 0);
+        try {
+            test1.monthOfYear().compareTo((ReadablePartial) null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        
+        DateTime dt1 = new DateTime(TEST_TIME1);
+        DateTime dt2 = new DateTime(TEST_TIME2);
+        assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0);
+        assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0);
+        assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0);
+        try {
+            test1.monthOfYear().compareTo((ReadableInstant) null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
+    public void testPropertyGetDay() {
+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);
+        assertSame(test.getChronology().dayOfMonth(), test.dayOfMonth().getField());
+        assertEquals("dayOfMonth", test.dayOfMonth().getName());
+        assertEquals("Property[dayOfMonth]", test.dayOfMonth().toString());
+        assertSame(test, test.dayOfMonth().getLocalDateTime());
+        assertEquals(9, test.dayOfMonth().get());
+        assertEquals("9", test.dayOfMonth().getAsString());
+        assertEquals("9", test.dayOfMonth().getAsText());
+        assertEquals("9", test.dayOfMonth().getAsText(Locale.FRENCH));
+        assertEquals("9", test.dayOfMonth().getAsShortText());
+        assertEquals("9", test.dayOfMonth().getAsShortText(Locale.FRENCH));
+        assertEquals(test.getChronology().days(), test.dayOfMonth().getDurationField());
+        assertEquals(test.getChronology().months(), test.dayOfMonth().getRangeDurationField());
+        assertEquals(2, test.dayOfMonth().getMaximumTextLength(null));
+        assertEquals(2, test.dayOfMonth().getMaximumShortTextLength(null));
+    }
+
+    public void testPropertyGetMaxMinValuesDay() {
+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);
+        assertEquals(1, test.dayOfMonth().getMinimumValue());
+        assertEquals(1, test.dayOfMonth().getMinimumValueOverall());
+        assertEquals(30, test.dayOfMonth().getMaximumValue());
+        assertEquals(31, test.dayOfMonth().getMaximumValueOverall());
+        test = new LocalDateTime(1972, 7, 9, 10, 20, 30, 40);
+        assertEquals(31, test.dayOfMonth().getMaximumValue());
+        test = new LocalDateTime(1972, 2, 9, 10, 20, 30, 40);
+        assertEquals(29, test.dayOfMonth().getMaximumValue());
+        test = new LocalDateTime(1971, 2, 9, 10, 20, 30, 40);
+        assertEquals(28, test.dayOfMonth().getMaximumValue());
+    }
+
+    public void testPropertyPlusDay() {
+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);
+        LocalDateTime copy = test.dayOfMonth().plus(9);
+        check(test, 1972, 6, 9, 10, 20, 30, 40);
+        check(copy, 1972, 6, 18, 10, 20, 30, 40);
+        
+        copy = test.dayOfMonth().plus(21);
+        check(copy, 1972, 6, 30, 10, 20, 30, 40);
+        
+        copy = test.dayOfMonth().plus(22);
+        check(copy, 1972, 7, 1, 10, 20, 30, 40);
+        
+        copy = test.dayOfMonth().plus(22 + 30);
+        check(copy, 1972, 7, 31, 10, 20, 30, 40);
+        
+        copy = test.dayOfMonth().plus(22 + 31);
+        check(copy, 1972, 8, 1, 10, 20, 30, 40);
+
+        copy = test.dayOfMonth().plus(21 + 31 + 31 + 30 + 31 + 30 + 31);
+        check(copy, 1972, 12, 31, 10, 20, 30, 40);
+        
+        copy = test.dayOfMonth().plus(22 + 31 + 31 + 30 + 31 + 30 + 31);
+        check(copy, 1973, 1, 1, 10, 20, 30, 40);
+        
+        copy = test.dayOfMonth().plus(-8);
+        check(copy, 1972, 6, 1, 10, 20, 30, 40);
+        
+        copy = test.dayOfMonth().plus(-9);
+        check(copy, 1972, 5, 31, 10, 20, 30, 40);
+        
+        copy = test.dayOfMonth().plus(-8 - 31 - 30 - 31 - 29 - 31);
+        check(copy, 1972, 1, 1, 10, 20, 30, 40);
+        
+        copy = test.dayOfMonth().plus(-9 - 31 - 30 - 31 - 29 - 31);
+        check(copy, 1971, 12, 31, 10, 20, 30, 40);
+    }
+
+    public void testPropertyPlusWrapFieldDay() {
+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);
+        LocalDateTime copy = test.dayOfMonth().plusWrapField(21);
+        check(test, 1972, 6, 9, 10, 20, 30, 40);
+        check(copy, 1972, 6, 30, 10, 20, 30, 40);
+        
+        copy = test.dayOfMonth().plusWrapField(22);
+        check(copy, 1972, 6, 1, 10, 20, 30, 40);
+        
+        copy = test.dayOfMonth().plusWrapField(-12);
+        check(copy, 1972, 6, 27, 10, 20, 30, 40);
+        
+        test = new LocalDateTime(1972, 7, 9, 10, 20, 30, 40);
+        copy = test.dayOfMonth().plusWrapField(21);
+        check(copy, 1972, 7, 30, 10, 20, 30, 40);
+    
+        copy = test.dayOfMonth().plusWrapField(22);
+        check(copy, 1972, 7, 31, 10, 20, 30, 40);
+    
+        copy = test.dayOfMonth().plusWrapField(23);
+        check(copy, 1972, 7, 1, 10, 20, 30, 40);
+    
+        copy = test.dayOfMonth().plusWrapField(-12);
+        check(copy, 1972, 7, 28, 10, 20, 30, 40);
+    }
+
+    public void testPropertyWithDay() {
+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);
+        LocalDateTime copy = test.dayOfMonth().withValue(12);
+        check(test, 1972, 6, 9, 10, 20, 30, 40);
+        check(copy, 1972, 6, 12, 10, 20, 30, 40);
+        
+        try {
+            test.dayOfMonth().withValue(31);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            test.dayOfMonth().withValue(0);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testPropertyWithTextDay() {
+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);
+        LocalDateTime copy = test.dayOfMonth().withValue("12");
+        check(test, 1972, 6, 9, 10, 20, 30, 40);
+        check(copy, 1972, 6, 12, 10, 20, 30, 40);
+    }
+
+    public void testPropertyWithMaximumValueDayOfMonth() {
+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);
+        LocalDateTime copy = test.dayOfMonth().withMaximumValue();
+        check(test, 1972, 6, 9, 10, 20, 30, 40);
+        check(copy, 1972, 6, 30, 10, 20, 30, 40);
+    }
+
+    public void testPropertyWithMinimumValueDayOfMonth() {
+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);
+        LocalDateTime copy = test.dayOfMonth().withMinimumValue();
+        check(test, 1972, 6, 9, 10, 20, 30, 40);
+        check(copy, 1972, 6, 1, 10, 20, 30, 40);
+    }
+
+    public void testPropertyCompareToDay() {
+        LocalDateTime test1 = new LocalDateTime(TEST_TIME1);
+        LocalDateTime test2 = new LocalDateTime(TEST_TIME2);
+        assertEquals(true, test1.dayOfMonth().compareTo(test2) < 0);
+        assertEquals(true, test2.dayOfMonth().compareTo(test1) > 0);
+        assertEquals(true, test1.dayOfMonth().compareTo(test1) == 0);
+        try {
+            test1.dayOfMonth().compareTo((ReadablePartial) null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        
+        DateTime dt1 = new DateTime(TEST_TIME1);
+        DateTime dt2 = new DateTime(TEST_TIME2);
+        assertEquals(true, test1.dayOfMonth().compareTo(dt2) < 0);
+        assertEquals(true, test2.dayOfMonth().compareTo(dt1) > 0);
+        assertEquals(true, test1.dayOfMonth().compareTo(dt1) == 0);
+        try {
+            test1.dayOfMonth().compareTo((ReadableInstant) null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testPropertyEquals() {
+        LocalDateTime test1 = new LocalDateTime(2005, 11, 8, 10, 20, 30, 40);
+        LocalDateTime test2 = new LocalDateTime(2005, 11, 9, 10, 20, 30, 40);
+        LocalDateTime test3 = new LocalDateTime(2005, 11, 8, 10, 20, 30, 40, COPTIC_UTC);
+        assertEquals(false, test1.dayOfMonth().equals(test1.year()));
+        assertEquals(false, test1.dayOfMonth().equals(test1.monthOfYear()));
+        assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth()));
+        assertEquals(false, test1.dayOfMonth().equals(test2.year()));
+        assertEquals(false, test1.dayOfMonth().equals(test2.monthOfYear()));
+        assertEquals(false, test1.dayOfMonth().equals(test2.dayOfMonth()));
+        
+        assertEquals(false, test1.monthOfYear().equals(test1.year()));
+        assertEquals(true, test1.monthOfYear().equals(test1.monthOfYear()));
+        assertEquals(false, test1.monthOfYear().equals(test1.dayOfMonth()));
+        assertEquals(false, test1.monthOfYear().equals(test2.year()));
+        assertEquals(true, test1.monthOfYear().equals(test2.monthOfYear()));
+        assertEquals(false, test1.monthOfYear().equals(test2.dayOfMonth()));
+        
+        assertEquals(false, test1.dayOfMonth().equals(null));
+        assertEquals(false, test1.dayOfMonth().equals("any"));
+        
+        // chrono
+        assertEquals(false, test1.dayOfMonth().equals(test3.dayOfMonth()));
+    }
+
+    public void testPropertyHashCode() {
+        LocalDateTime test1 = new LocalDateTime(2005, 11, 8, 10, 20, 30, 40);
+        LocalDateTime test2 = new LocalDateTime(2005, 11, 9, 10, 20, 30, 40);
+        assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode());
+        assertEquals(false, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());
+        assertEquals(true, test1.monthOfYear().hashCode() == test1.monthOfYear().hashCode());
+        assertEquals(true, test1.monthOfYear().hashCode() == test2.monthOfYear().hashCode());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testPropertyGetHour() {
+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);
+        assertSame(test.getChronology().hourOfDay(), test.hourOfDay().getField());
+        assertEquals("hourOfDay", test.hourOfDay().getName());
+        assertEquals("Property[hourOfDay]", test.hourOfDay().toString());
+        assertSame(test, test.hourOfDay().getLocalDateTime());
+        assertEquals(10, test.hourOfDay().get());
+        assertEquals("10", test.hourOfDay().getAsString());
+        assertEquals("10", test.hourOfDay().getAsText());
+        assertEquals("10", test.hourOfDay().getAsText(Locale.FRENCH));
+        assertEquals("10", test.hourOfDay().getAsShortText());
+        assertEquals("10", test.hourOfDay().getAsShortText(Locale.FRENCH));
+        assertEquals(test.getChronology().hours(), test.hourOfDay().getDurationField());
+        assertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField());
+        assertEquals(2, test.hourOfDay().getMaximumTextLength(null));
+        assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null));
+    }
+
+    public void testPropertyRoundHour() {
+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20);
+        check(test.hourOfDay().roundCeiling(), 2005, 6, 9, 11, 0, 0, 0);
+        check(test.hourOfDay().roundFloor(), 2005, 6, 9, 10, 0, 0, 0);
+        check(test.hourOfDay().roundHalfCeiling(), 2005, 6, 9, 10, 0, 0, 0);
+        check(test.hourOfDay().roundHalfFloor(), 2005, 6, 9, 10, 0, 0, 0);
+        check(test.hourOfDay().roundHalfEven(), 2005, 6, 9, 10, 0, 0, 0);
+        
+        test = new LocalDateTime(2005, 6, 9, 10, 40);
+        check(test.hourOfDay().roundCeiling(), 2005, 6, 9, 11, 0, 0, 0);
+        check(test.hourOfDay().roundFloor(), 2005, 6, 9, 10, 0, 0, 0);
+        check(test.hourOfDay().roundHalfCeiling(), 2005, 6, 9, 11, 0, 0, 0);
+        check(test.hourOfDay().roundHalfFloor(), 2005, 6, 9, 11, 0, 0, 0);
+        check(test.hourOfDay().roundHalfEven(), 2005, 6, 9, 11, 0, 0, 0);
+        
+        test = new LocalDateTime(2005, 6, 9, 10, 30);
+        check(test.hourOfDay().roundCeiling(), 2005, 6, 9, 11, 0, 0, 0);
+        check(test.hourOfDay().roundFloor(), 2005, 6, 9, 10, 0, 0, 0);
+        check(test.hourOfDay().roundHalfCeiling(), 2005, 6, 9, 11, 0, 0, 0);
+        check(test.hourOfDay().roundHalfFloor(), 2005, 6, 9, 10, 0, 0, 0);
+        check(test.hourOfDay().roundHalfEven(), 2005, 6, 9, 10, 0, 0, 0);
+        
+        test = new LocalDateTime(2005, 6, 9, 11, 30);
+        check(test.hourOfDay().roundCeiling(), 2005, 6, 9, 12, 0, 0, 0);
+        check(test.hourOfDay().roundFloor(), 2005, 6, 9, 11, 0, 0, 0);
+        check(test.hourOfDay().roundHalfCeiling(), 2005, 6, 9, 12, 0, 0, 0);
+        check(test.hourOfDay().roundHalfFloor(), 2005, 6, 9, 11, 0, 0, 0);
+        check(test.hourOfDay().roundHalfEven(), 2005, 6, 9, 12, 0, 0, 0);
+    }
+
+    public void testPropertyGetMaxMinValuesHour() {
+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);
+        assertEquals(0, test.hourOfDay().getMinimumValue());
+        assertEquals(0, test.hourOfDay().getMinimumValueOverall());
+        assertEquals(23, test.hourOfDay().getMaximumValue());
+        assertEquals(23, test.hourOfDay().getMaximumValueOverall());
+    }
+
+    public void testPropertyWithMaxMinValueHour() {
+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 0, 20, 30, 40);
+        check(test.hourOfDay().withMaximumValue(), 2005, 6, 9, 23, 20, 30, 40);
+        check(test.hourOfDay().withMinimumValue(), 2005, 6, 9, 0, 20, 30, 40);
+    }
+
+    public void testPropertyPlusHour() {
+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);
+        LocalDateTime copy = test.hourOfDay().plus(9);
+        check(test, 2005, 6, 9, 10, 20, 30, 40);
+        check(copy, 2005, 6, 9, 19, 20, 30, 40);
+        
+        copy = test.hourOfDay().plus(0);
+        check(copy, 2005, 6, 9, 10, 20, 30, 40);
+        
+        copy = test.hourOfDay().plus(13);
+        check(copy, 2005, 6, 9, 23, 20, 30, 40);
+        
+        copy = test.hourOfDay().plus(14);
+        check(copy, 2005, 6, 10, 0, 20, 30, 40);
+        
+        copy = test.hourOfDay().plus(-10);
+        check(copy, 2005, 6, 9, 0, 20, 30, 40);
+        
+        copy = test.hourOfDay().plus(-11);
+        check(copy, 2005, 6, 8, 23, 20, 30, 40);
+    }
+
+    public void testPropertyPlusWrapFieldHour() {
+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);
+        LocalDateTime copy = test.hourOfDay().plusWrapField(9);
+        check(test, 2005, 6, 9, 10, 20, 30, 40);
+        check(copy, 2005, 6, 9, 19, 20, 30, 40);
+        
+        copy = test.hourOfDay().plusWrapField(0);
+        check(copy, 2005, 6, 9, 10, 20, 30, 40);
+        
+        copy = test.hourOfDay().plusWrapField(18);
+        check(copy, 2005, 6, 9, 4, 20, 30, 40);
+        
+        copy = test.hourOfDay().plusWrapField(-15);
+        check(copy, 2005, 6, 9, 19, 20, 30, 40);
+    }
+
+    public void testPropertySetHour() {
+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);
+        LocalDateTime copy = test.hourOfDay().withValue(12);
+        check(test, 2005, 6, 9, 10, 20, 30, 40);
+        check(copy, 2005, 6, 9, 12, 20, 30, 40);
+        
+        try {
+            test.hourOfDay().withValue(24);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            test.hourOfDay().withValue(-1);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testPropertySetTextHour() {
+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);
+        LocalDateTime copy = test.hourOfDay().withValue("12");
+        check(test, 2005, 6, 9, 10, 20, 30, 40);
+        check(copy, 2005, 6, 9, 12, 20, 30, 40);
+    }
+
+    public void testPropertyWithMaximumValueHour() {
+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);
+        LocalDateTime copy = test.hourOfDay().withMaximumValue();
+        check(test, 2005, 6, 9, 10, 20, 30, 40);
+        check(copy, 2005, 6, 9, 23, 20, 30, 40);
+    }
+
+    public void testPropertyWithMinimumValueHour() {
+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);
+        LocalDateTime copy = test.hourOfDay().withMinimumValue();
+        check(test, 2005, 6, 9, 10, 20, 30, 40);
+        check(copy, 2005, 6, 9, 0, 20, 30, 40);
+    }
+
+    public void testPropertyCompareToHour() {
+        LocalDateTime test1 = new LocalDateTime(TEST_TIME1);
+        LocalDateTime test2 = new LocalDateTime(TEST_TIME2);
+        assertEquals(true, test1.hourOfDay().compareTo(test2) < 0);
+        assertEquals(true, test2.hourOfDay().compareTo(test1) > 0);
+        assertEquals(true, test1.hourOfDay().compareTo(test1) == 0);
+        try {
+            test1.hourOfDay().compareTo((ReadablePartial) null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        
+        DateTime dt1 = new DateTime(TEST_TIME1);
+        DateTime dt2 = new DateTime(TEST_TIME2);
+        assertEquals(true, test1.hourOfDay().compareTo(dt2) < 0);
+        assertEquals(true, test2.hourOfDay().compareTo(dt1) > 0);
+        assertEquals(true, test1.hourOfDay().compareTo(dt1) == 0);
+        try {
+            test1.hourOfDay().compareTo((ReadableInstant) null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
+    public void testPropertyGetMinute() {
+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);
+        assertSame(test.getChronology().minuteOfHour(), test.minuteOfHour().getField());
+        assertEquals("minuteOfHour", test.minuteOfHour().getName());
+        assertEquals("Property[minuteOfHour]", test.minuteOfHour().toString());
+        assertSame(test, test.minuteOfHour().getLocalDateTime());
+        assertEquals(20, test.minuteOfHour().get());
+        assertEquals("20", test.minuteOfHour().getAsString());
+        assertEquals("20", test.minuteOfHour().getAsText());
+        assertEquals("20", test.minuteOfHour().getAsText(Locale.FRENCH));
+        assertEquals("20", test.minuteOfHour().getAsShortText());
+        assertEquals("20", test.minuteOfHour().getAsShortText(Locale.FRENCH));
+        assertEquals(test.getChronology().minutes(), test.minuteOfHour().getDurationField());
+        assertEquals(test.getChronology().hours(), test.minuteOfHour().getRangeDurationField());
+        assertEquals(2, test.minuteOfHour().getMaximumTextLength(null));
+        assertEquals(2, test.minuteOfHour().getMaximumShortTextLength(null));
+    }
+
+    public void testPropertyGetMaxMinValuesMinute() {
+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);
+        assertEquals(0, test.minuteOfHour().getMinimumValue());
+        assertEquals(0, test.minuteOfHour().getMinimumValueOverall());
+        assertEquals(59, test.minuteOfHour().getMaximumValue());
+        assertEquals(59, test.minuteOfHour().getMaximumValueOverall());
+    }
+
+    public void testPropertyWithMaxMinValueMinute() {
+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);
+        check(test.minuteOfHour().withMaximumValue(), 2005, 6, 9, 10, 59, 30, 40);
+        check(test.minuteOfHour().withMinimumValue(), 2005, 6, 9, 10, 0, 30, 40);
+    }
+
+    public void testPropertyPlusMinute() {
+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);
+        LocalDateTime copy = test.minuteOfHour().plus(9);
+        check(test, 2005, 6, 9, 10, 20, 30, 40);
+        check(copy, 2005, 6, 9, 10, 29, 30, 40);
+        
+        copy = test.minuteOfHour().plus(39);
+        check(copy, 2005, 6, 9, 10, 59, 30, 40);
+        
+        copy = test.minuteOfHour().plus(40);
+        check(copy, 2005, 6, 9, 11, 0, 30, 40);
+        
+        copy = test.minuteOfHour().plus(1 * 60 + 45);
+        check(copy, 2005, 6, 9, 12, 5, 30, 40);
+        
+        copy = test.minuteOfHour().plus(13 * 60 + 39);
+        check(copy, 2005, 6, 9, 23, 59, 30, 40);
+        
+        copy = test.minuteOfHour().plus(13 * 60 + 40);
+        check(copy, 2005, 6, 10, 0, 0, 30, 40);
+        
+        copy = test.minuteOfHour().plus(-9);
+        check(copy, 2005, 6, 9, 10, 11, 30, 40);
+        
+        copy = test.minuteOfHour().plus(-19);
+        check(copy, 2005, 6, 9, 10, 1, 30, 40);
+        
+        copy = test.minuteOfHour().plus(-20);
+        check(copy, 2005, 6, 9, 10, 0, 30, 40);
+        
+        copy = test.minuteOfHour().plus(-21);
+        check(copy, 2005, 6, 9, 9, 59, 30, 40);
+        
+        copy = test.minuteOfHour().plus(-(10 * 60 + 20));
+        check(copy, 2005, 6, 9, 0, 0, 30, 40);
+        
+        copy = test.minuteOfHour().plus(-(10 * 60 + 21));
+        check(copy, 2005, 6, 8, 23, 59, 30, 40);
+    }
+
+    public void testPropertyPlusWrapFieldMinute() {
+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);
+        LocalDateTime copy = test.minuteOfHour().plusWrapField(9);
+        check(test, 2005, 6, 9, 10, 20, 30, 40);
+        check(copy, 2005, 6, 9, 10, 29, 30, 40);
+        
+        copy = test.minuteOfHour().plusWrapField(49);
+        check(copy, 2005, 6, 9, 10, 9, 30, 40);
+        
+        copy = test.minuteOfHour().plusWrapField(-47);
+        check(copy, 2005, 6, 9, 10, 33, 30, 40);
+    }
+
+    public void testPropertySetMinute() {
+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);
+        LocalDateTime copy = test.minuteOfHour().withValue(12);
+        check(test, 2005, 6, 9, 10, 20, 30, 40);
+        check(copy, 2005, 6, 9, 10, 12, 30, 40);
+        
+        try {
+            test.minuteOfHour().withValue(60);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            test.minuteOfHour().withValue(-1);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testPropertySetTextMinute() {
+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);
+        LocalDateTime copy = test.minuteOfHour().withValue("12");
+        check(test, 2005, 6, 9, 10, 20, 30, 40);
+        check(copy, 2005, 6, 9, 10, 12, 30, 40);
+    }
+
+    public void testPropertyCompareToMinute() {
+        LocalDateTime test1 = new LocalDateTime(TEST_TIME1);
+        LocalDateTime test2 = new LocalDateTime(TEST_TIME2);
+        assertEquals(true, test1.minuteOfHour().compareTo(test2) < 0);
+        assertEquals(true, test2.minuteOfHour().compareTo(test1) > 0);
+        assertEquals(true, test1.minuteOfHour().compareTo(test1) == 0);
+        try {
+            test1.minuteOfHour().compareTo((ReadablePartial) null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        
+        DateTime dt1 = new DateTime(TEST_TIME1);
+        DateTime dt2 = new DateTime(TEST_TIME2);
+        assertEquals(true, test1.minuteOfHour().compareTo(dt2) < 0);
+        assertEquals(true, test2.minuteOfHour().compareTo(dt1) > 0);
+        assertEquals(true, test1.minuteOfHour().compareTo(dt1) == 0);
+        try {
+            test1.minuteOfHour().compareTo((ReadableInstant) null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
+    public void testPropertyGetSecond() {
+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);
+        assertSame(test.getChronology().secondOfMinute(), test.secondOfMinute().getField());
+        assertEquals("secondOfMinute", test.secondOfMinute().getName());
+        assertEquals("Property[secondOfMinute]", test.secondOfMinute().toString());
+        assertSame(test, test.secondOfMinute().getLocalDateTime());
+        assertEquals(30, test.secondOfMinute().get());
+        assertEquals("30", test.secondOfMinute().getAsString());
+        assertEquals("30", test.secondOfMinute().getAsText());
+        assertEquals("30", test.secondOfMinute().getAsText(Locale.FRENCH));
+        assertEquals("30", test.secondOfMinute().getAsShortText());
+        assertEquals("30", test.secondOfMinute().getAsShortText(Locale.FRENCH));
+        assertEquals(test.getChronology().seconds(), test.secondOfMinute().getDurationField());
+        assertEquals(test.getChronology().minutes(), test.secondOfMinute().getRangeDurationField());
+        assertEquals(2, test.secondOfMinute().getMaximumTextLength(null));
+        assertEquals(2, test.secondOfMinute().getMaximumShortTextLength(null));
+    }
+
+    public void testPropertyGetMaxMinValuesSecond() {
+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);
+        assertEquals(0, test.secondOfMinute().getMinimumValue());
+        assertEquals(0, test.secondOfMinute().getMinimumValueOverall());
+        assertEquals(59, test.secondOfMinute().getMaximumValue());
+        assertEquals(59, test.secondOfMinute().getMaximumValueOverall());
+    }
+
+    public void testPropertyWithMaxMinValueSecond() {
+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);
+        check(test.secondOfMinute().withMaximumValue(), 2005, 6, 9, 10, 20, 59, 40);
+        check(test.secondOfMinute().withMinimumValue(), 2005, 6, 9, 10, 20, 0, 40);
+    }
+
+    public void testPropertyPlusSecond() {
+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);
+        LocalDateTime copy = test.secondOfMinute().plus(9);
+        check(test, 2005, 6, 9, 10, 20, 30, 40);
+        check(copy, 2005, 6, 9, 10, 20, 39, 40);
+        
+        copy = test.secondOfMinute().plus(29);
+        check(copy, 2005, 6, 9, 10, 20, 59, 40);
+        
+        copy = test.secondOfMinute().plus(30);
+        check(copy, 2005, 6, 9, 10, 21, 0, 40);
+        
+        copy = test.secondOfMinute().plus(39 * 60 + 29);
+        check(copy, 2005, 6, 9, 10, 59, 59, 40);
+        
+        copy = test.secondOfMinute().plus(39 * 60 + 30);
+        check(copy, 2005, 6, 9, 11, 0, 0, 40);
+        
+        copy = test.secondOfMinute().plus(13 * 60 * 60 + 39 * 60 + 30);
+        check(copy, 2005, 6, 10, 0, 0, 0, 40);
+        
+        copy = test.secondOfMinute().plus(-9);
+        check(copy, 2005, 6, 9, 10, 20, 21, 40);
+        
+        copy = test.secondOfMinute().plus(-30);
+        check(copy, 2005, 6, 9, 10, 20, 0, 40);
+        
+        copy = test.secondOfMinute().plus(-31);
+        check(copy, 2005, 6, 9, 10, 19, 59, 40);
+        
+        copy = test.secondOfMinute().plus(-(10 * 60 * 60 + 20 * 60 + 30));
+        check(copy, 2005, 6, 9, 0, 0, 0, 40);
+        
+        copy = test.secondOfMinute().plus(-(10 * 60 * 60 + 20 * 60 + 31));
+        check(copy, 2005, 6, 8, 23, 59, 59, 40);
+    }
+
+    public void testPropertyPlusWrapFieldSecond() {
+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);
+        LocalDateTime copy = test.secondOfMinute().plusWrapField(9);
+        check(test, 2005, 6, 9, 10, 20, 30, 40);
+        check(copy, 2005, 6, 9, 10, 20, 39, 40);
+        
+        copy = test.secondOfMinute().plusWrapField(49);
+        check(copy, 2005, 6, 9, 10, 20, 19, 40);
+        
+        copy = test.secondOfMinute().plusWrapField(-47);
+        check(copy, 2005, 6, 9, 10, 20, 43, 40);
+    }
+
+    public void testPropertySetSecond() {
+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);
+        LocalDateTime copy = test.secondOfMinute().withValue(12);
+        check(test, 2005, 6, 9, 10, 20, 30, 40);
+        check(copy, 2005, 6, 9, 10, 20, 12, 40);
+        
+        try {
+            test.secondOfMinute().withValue(60);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            test.secondOfMinute().withValue(-1);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testPropertySetTextSecond() {
+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);
+        LocalDateTime copy = test.secondOfMinute().withValue("12");
+        check(test, 2005, 6, 9, 10, 20, 30, 40);
+        check(copy, 2005, 6, 9, 10, 20, 12, 40);
+    }
+
+    public void testPropertyCompareToSecond() {
+        LocalDateTime test1 = new LocalDateTime(TEST_TIME1);
+        LocalDateTime test2 = new LocalDateTime(TEST_TIME2);
+        assertEquals(true, test1.secondOfMinute().compareTo(test2) < 0);
+        assertEquals(true, test2.secondOfMinute().compareTo(test1) > 0);
+        assertEquals(true, test1.secondOfMinute().compareTo(test1) == 0);
+        try {
+            test1.secondOfMinute().compareTo((ReadablePartial) null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        
+        DateTime dt1 = new DateTime(TEST_TIME1);
+        DateTime dt2 = new DateTime(TEST_TIME2);
+        assertEquals(true, test1.secondOfMinute().compareTo(dt2) < 0);
+        assertEquals(true, test2.secondOfMinute().compareTo(dt1) > 0);
+        assertEquals(true, test1.secondOfMinute().compareTo(dt1) == 0);
+        try {
+            test1.secondOfMinute().compareTo((ReadableInstant) null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
+    public void testPropertyGetMilli() {
+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);
+        assertSame(test.getChronology().millisOfSecond(), test.millisOfSecond().getField());
+        assertEquals("millisOfSecond", test.millisOfSecond().getName());
+        assertEquals("Property[millisOfSecond]", test.millisOfSecond().toString());
+        assertSame(test, test.millisOfSecond().getLocalDateTime());
+        assertEquals(40, test.millisOfSecond().get());
+        assertEquals("40", test.millisOfSecond().getAsString());
+        assertEquals("40", test.millisOfSecond().getAsText());
+        assertEquals("40", test.millisOfSecond().getAsText(Locale.FRENCH));
+        assertEquals("40", test.millisOfSecond().getAsShortText());
+        assertEquals("40", test.millisOfSecond().getAsShortText(Locale.FRENCH));
+        assertEquals(test.getChronology().millis(), test.millisOfSecond().getDurationField());
+        assertEquals(test.getChronology().seconds(), test.millisOfSecond().getRangeDurationField());
+        assertEquals(3, test.millisOfSecond().getMaximumTextLength(null));
+        assertEquals(3, test.millisOfSecond().getMaximumShortTextLength(null));
+    }
+
+    public void testPropertyGetMaxMinValuesMilli() {
+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);
+        assertEquals(0, test.millisOfSecond().getMinimumValue());
+        assertEquals(0, test.millisOfSecond().getMinimumValueOverall());
+        assertEquals(999, test.millisOfSecond().getMaximumValue());
+        assertEquals(999, test.millisOfSecond().getMaximumValueOverall());
+    }
+
+    public void testPropertyWithMaxMinValueMilli() {
+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);
+        check(test.millisOfSecond().withMaximumValue(), 2005, 6, 9, 10, 20, 30, 999);
+        check(test.millisOfSecond().withMinimumValue(), 2005, 6, 9, 10, 20, 30, 0);
+    }
+
+    public void testPropertyPlusMilli() {
+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);
+        LocalDateTime copy = test.millisOfSecond().plus(9);
+        check(test, 2005, 6, 9, 10, 20, 30, 40);
+        check(copy, 2005, 6, 9, 10, 20, 30, 49);
+        
+        copy = test.millisOfSecond().plus(959);
+        check(copy, 2005, 6, 9, 10, 20, 30, 999);
+        
+        copy = test.millisOfSecond().plus(960);
+        check(copy, 2005, 6, 9, 10, 20, 31, 0);
+        
+        copy = test.millisOfSecond().plus(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 959);
+        check(copy, 2005, 6, 9, 23, 59, 59, 999);
+        
+        copy = test.millisOfSecond().plus(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 960);
+        check(copy, 2005, 6, 10, 0, 0, 0, 0);
+        
+        copy = test.millisOfSecond().plus(-9);
+        check(copy, 2005, 6, 9, 10, 20, 30, 31);
+        
+        copy = test.millisOfSecond().plus(-40);
+        check(copy, 2005, 6, 9, 10, 20, 30, 0);
+        
+        copy = test.millisOfSecond().plus(-41);
+        check(copy, 2005, 6, 9, 10, 20, 29, 999);
+        
+        copy = test.millisOfSecond().plus(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 40));
+        check(copy, 2005, 6, 9, 0, 0, 0, 0);
+        
+        copy = test.millisOfSecond().plus(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 41));
+        check(copy, 2005, 6, 8, 23, 59, 59, 999);
+    }
+
+    public void testPropertyPlusWrapFieldMilli() {
+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);
+        LocalDateTime copy = test.millisOfSecond().plusWrapField(9);
+        check(test, 2005, 6, 9, 10, 20, 30, 40);
+        check(copy, 2005, 6, 9, 10, 20, 30, 49);
+        
+        copy = test.millisOfSecond().plusWrapField(995);
+        check(copy, 2005, 6, 9, 10, 20, 30, 35);
+        
+        copy = test.millisOfSecond().plusWrapField(-47);
+        check(copy, 2005, 6, 9, 10, 20, 30, 993);
+    }
+
+    public void testPropertySetMilli() {
+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);
+        LocalDateTime copy = test.millisOfSecond().withValue(12);
+        check(test, 2005, 6, 9, 10, 20, 30, 40);
+        check(copy, 2005, 6, 9, 10, 20, 30, 12);
+        
+        try {
+            test.millisOfSecond().withValue(1000);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            test.millisOfSecond().withValue(-1);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testPropertySetTextMilli() {
+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);
+        LocalDateTime copy = test.millisOfSecond().withValue("12");
+        check(test, 2005, 6, 9, 10, 20, 30, 40);
+        check(copy, 2005, 6, 9, 10, 20, 30, 12);
+    }
+
+    public void testPropertyCompareToMilli() {
+        LocalDateTime test1 = new LocalDateTime(TEST_TIME1);
+        LocalDateTime test2 = new LocalDateTime(TEST_TIME2);
+        assertEquals(true, test1.millisOfSecond().compareTo(test2) < 0);
+        assertEquals(true, test2.millisOfSecond().compareTo(test1) > 0);
+        assertEquals(true, test1.millisOfSecond().compareTo(test1) == 0);
+        try {
+            test1.millisOfSecond().compareTo((ReadablePartial) null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        
+        DateTime dt1 = new DateTime(TEST_TIME1);
+        DateTime dt2 = new DateTime(TEST_TIME2);
+        assertEquals(true, test1.millisOfSecond().compareTo(dt2) < 0);
+        assertEquals(true, test2.millisOfSecond().compareTo(dt1) > 0);
+        assertEquals(true, test1.millisOfSecond().compareTo(dt1) == 0);
+        try {
+            test1.millisOfSecond().compareTo((ReadableInstant) null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
+    private void check(LocalDateTime test, int year, int month, int day, int hour, int min, int sec, int mil) {
+        assertEquals(year, test.getYear());
+        assertEquals(month, test.getMonthOfYear());
+        assertEquals(day, test.getDayOfMonth());
+        assertEquals(hour, test.getHourOfDay());
+        assertEquals(min, test.getMinuteOfHour());
+        assertEquals(sec, test.getSecondOfMinute());
+        assertEquals(mil, test.getMillisOfSecond());
+    }
+}

From 541e420fdc1d620fc300b9f9b0bab2ae5d6da59d Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 1 Apr 2006 14:34:28 +0000
Subject: [PATCH 061/115] Add Local* classes to enhancements

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1058 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt | 15 +++++++++++++++
 1 file changed, 15 insertions(+)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 3c3b6966b..161197a87 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -64,12 +64,27 @@ Bug fixes since 1.2
   Fixed overflow when getting year field from instants at Long.MAX_VALUE and
   LONG.MIN_VALUE.
 
+
 Enhancements since 1.2
 ----------------------
+- LocalDate/LocalTime/LocalDateTime
+  New classes representing date, time and datetime without a time zone.
+  LocalDate is the recommended replacement for YearMonthDay.
+  LocalTime is the recommended replacement for TimeOfDay.
+  These classes are implemented more flexibly than YearMonthDay and TimeOfDay
+  and thus solve the problem where you couldn't query or format fields such
+  as dayOfWeek on a YearMonthDay or millisOfDay on a TimeOfDay.
+  Neither YearMonthDay or TimeOfDay will be immediately deprecated as they
+  are in widespread use.
+  The API of the new classes has been kept as similar to YearMonthDay/TimeOfDay
+  as possible to aid migration. The main difference is the method names on the
+  property class.
+
 - DateTimeFormatter/DateTimeParserBucket
   If a parsed datetime is illegal due to field range or time zone offset
   transition, thrown exception includes text of datetime being parsed.
 
+
 Feedback
 --------
 All feedback is welcomed at joda-interest@lists.sourceforge.net.

From 1839bcd7c29dfdf5ab08b36fee9017c07f23c616 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Mon, 3 Apr 2006 15:58:18 +0000
Subject: [PATCH 062/115] Updated to version 2006c.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1059 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/java/org/joda/time/tz/src/Readme.txt  |   2 +-
 JodaTime/src/java/org/joda/time/tz/src/africa |  64 +++---
 .../src/java/org/joda/time/tz/src/antarctica  |  10 +-
 JodaTime/src/java/org/joda/time/tz/src/asia   | 175 ++++++++-------
 .../src/java/org/joda/time/tz/src/australasia |  46 ++--
 .../src/java/org/joda/time/tz/src/backward    |   2 +-
 .../src/java/org/joda/time/tz/src/etcetera    |   2 +-
 JodaTime/src/java/org/joda/time/tz/src/europe | 203 +++++++++--------
 .../java/org/joda/time/tz/src/northamerica    | 204 ++++++++++--------
 .../src/java/org/joda/time/tz/src/pacificnew  |   2 +-
 .../java/org/joda/time/tz/src/southamerica    |  97 +++++----
 .../src/java/org/joda/time/tz/src/systemv     |   2 +-
 12 files changed, 433 insertions(+), 376 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
index 1d8494773..87e7e9fe5 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
+++ b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
@@ -1,2 +1,2 @@
 The data files in this directory were obtained from the public tz database,
-http://www.twinsun.com/tz/tz-link.htm, version 2006a.
+http://www.twinsun.com/tz/tz-link.htm, version 2006c.
diff --git a/JodaTime/src/java/org/joda/time/tz/src/africa b/JodaTime/src/java/org/joda/time/tz/src/africa
index 4baf6dde8..67d095f32 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/africa
+++ b/JodaTime/src/java/org/joda/time/tz/src/africa
@@ -1,15 +1,15 @@
-# @(#)africa	7.40
+# @(#)africa	8.3
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
 # go ahead and edit the file (and please send any changes to
 # tz@elsie.nci.nih.gov for general use in the future).
 
-# From Paul Eggert (1999-03-22):
+# From Paul Eggert (2006-03-22):
 #
 # A good source for time zone historical data outside the U.S. is
-# Thomas G. Shanks, The International Atlas (5th edition),
-# San Diego: ACS Publications, Inc. (1999).
+# Thomas G. Shanks and Rique Pottenger, The International Atlas (6th edition),
+# San Diego: ACS Publications, Inc. (2003).
 #
 # Gwillim Law writes that a good source
 # for recent time zone data is the International Air Transport
@@ -17,8 +17,8 @@
 # published semiannually.  Law sent in several helpful summaries
 # of the IATA's data after 1990.
 #
-# Except where otherwise noted, Shanks is the source for entries through 1990,
-# and IATA SSIM is the source for entries after 1990.
+# Except where otherwise noted, Shanks & Pottenger is the source for
+# entries through 1990, and IATA SSIM is the source for entries afterwards.
 #
 # Another source occasionally used is Edward W. Whitman, World Time Differences,
 # Whitman Publishing Co, 2 Niagara Av, Ealing, London (undated), which
@@ -65,7 +65,7 @@
 # Algeria
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Algeria	1916	only	-	Jun	14	23:00s	1:00	S
-Rule	Algeria	1916	1919	-	Oct	Sun<=7	23:00s	0	-
+Rule	Algeria	1916	1919	-	Oct	Sun>=1	23:00s	0	-
 Rule	Algeria	1917	only	-	Mar	24	23:00s	1:00	S
 Rule	Algeria	1918	only	-	Mar	 9	23:00s	1:00	S
 Rule	Algeria	1919	only	-	Mar	 1	23:00s	1:00	S
@@ -75,7 +75,7 @@ Rule	Algeria	1921	only	-	Mar	14	23:00s	1:00	S
 Rule	Algeria	1921	only	-	Jun	21	23:00s	0	-
 Rule	Algeria	1939	only	-	Sep	11	23:00s	1:00	S
 Rule	Algeria	1939	only	-	Nov	19	 1:00	0	-
-Rule	Algeria	1944	1945	-	Apr	Mon<=7	 2:00	1:00	S
+Rule	Algeria	1944	1945	-	Apr	Mon>=1	 2:00	1:00	S
 Rule	Algeria	1944	only	-	Oct	 8	 2:00	0	-
 Rule	Algeria	1945	only	-	Sep	16	 1:00	0	-
 Rule	Algeria	1971	only	-	Apr	25	23:00s	1:00	S
@@ -86,7 +86,8 @@ Rule	Algeria	1978	only	-	Mar	24	 1:00	1:00	S
 Rule	Algeria	1978	only	-	Sep	22	 3:00	0	-
 Rule	Algeria	1980	only	-	Apr	25	 0:00	1:00	S
 Rule	Algeria	1980	only	-	Oct	31	 2:00	0	-
-# Shanks gives 0:09 for Paris Mean Time; go with Howse's more precise 0:09:21.
+# Shanks & Pottenger give 0:09:20 for Paris Mean Time; go with Howse's
+# more precise 0:09:21.
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Africa/Algiers	0:12:12 -	LMT	1891 Mar 15 0:01
 			0:09:21	-	PMT	1911 Mar 11    # Paris Mean Time
@@ -106,7 +107,8 @@ Zone	Africa/Luanda	0:52:56	-	LMT	1892
 			1:00	-	WAT
 
 # Benin
-# Whitman says they switched to 1:00 in 1946, not 1934; go with Shanks.
+# Whitman says they switched to 1:00 in 1946, not 1934;
+# go with Shanks & Pottenger.
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone Africa/Porto-Novo	0:10:28	-	LMT	1912
 			0:00	-	GMT	1934 Feb 26
@@ -130,7 +132,7 @@ Zone Africa/Bujumbura	1:57:28	-	LMT	1890
 			2:00	-	CAT
 
 # Cameroon
-# Whitman says they switched to 1:00 in 1920; go with Shanks.
+# Whitman says they switched to 1:00 in 1920; go with Shanks & Pottenger.
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Africa/Douala	0:38:48	-	LMT	1912
 			1:00	-	WAT
@@ -229,9 +231,9 @@ Zone	Africa/Asmera	2:35:32 -	LMT	1870
 			3:00	-	EAT
 
 # Ethiopia
-# From Paul Eggert (1997-10-05):
-# Shanks writes that Ethiopia had six narrowly-spaced time zones between
-# 1870 and 1890, and that they merged to 38E50 (2:35:20) in 1890.
+# From Paul Eggert (2006-03-22):
+# Shanks & Pottenger write that Ethiopia had six narrowly-spaced time zones
+# between 1870 and 1890, and that they merged to 38E50 (2:35:20) in 1890.
 # We'll guess that 38E50 is for Adis Dera.
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone Africa/Addis_Ababa	2:34:48 -	LMT	1870
@@ -252,7 +254,8 @@ Zone	Africa/Banjul	-1:06:36 -	LMT	1912
 
 # Ghana
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-# Whitman says DST was observed from 1931 to ``the present''; go with Shanks.
+# Whitman says DST was observed from 1931 to ``the present'';
+# go with Shanks & Pottenger.
 Rule	Ghana	1936	1942	-	Sep	 1	0:00	0:20	GHST
 Rule	Ghana	1936	1942	-	Dec	31	0:00	0	GMT
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
@@ -288,13 +291,14 @@ Zone	Africa/Maseru	1:50:00 -	LMT	1903 Mar
 			2:00	-	SAST
 
 # Liberia
-# From Paul Eggert (2001-07-17):
+# From Paul Eggert (2006-03-22):
 # In 1972 Liberia was the last country to switch
 # from a UTC offset that was not a multiple of 15 or 20 minutes.
 # Howse reports that it was in honor of their president's birthday.
-# Shanks reports the date as May 1, whereas Howse reports Jan; go with Shanks.
-# For Liberia before 1972, Shanks reports -0:44, whereas Howse and Whitman
-# each report -0:44:30; go with the more precise figure.
+# Shank & Pottenger report the date as May 1, whereas Howse reports Jan;
+# go with Shanks & Pottenger.
+# For Liberia before 1972, Shanks & Pottenger report -0:44, whereas Howse and
+# Whitman each report -0:44:30; go with the more precise figure.
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Africa/Monrovia	-0:43:08 -	LMT	1882
 			-0:43:08 -	MMT	1919 Mar # Monrovia Mean Time
@@ -324,7 +328,7 @@ Zone	Africa/Tripoli	0:52:44 -	LMT	1920
 			1:00	Libya	CE%sT	1959
 			2:00	-	EET	1982
 			1:00	Libya	CE%sT	1990 May  4
-# The following entries are all from Shanks;
+# The following entries are from Shanks & Pottenger;
 # the IATA SSIM data contain some obvious errors.
 			2:00	-	EET	1996 Sep 30
 			1:00	-	CET	1997 Apr  4
@@ -403,8 +407,8 @@ Zone	Africa/Maputo	2:10:20 -	LMT	1903 Mar
 			2:00	-	CAT
 
 # Namibia
-# The 1994-04-03 transition is from Shanks.
-# Shanks reports no DST after 1998-04; go with IATA.
+# The 1994-04-03 transition is from Shanks & Pottenger.
+# Shanks & Pottenger report no DST after 1998-04; go with IATA.
 # RULE	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Namibia	1994	max	-	Sep	Sun>=1	2:00	1:00	S
 Rule	Namibia	1995	max	-	Apr	Sun>=1	2:00	0	-
@@ -488,7 +492,7 @@ Zone	Indian/Mahe	3:41:48 -	LMT	1906 Jun	# Victoria
 
 # Sierra Leone
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-# Whitman gives Mar 31 - Aug 31 for 1931 on; go with Shanks.
+# Whitman gives Mar 31 - Aug 31 for 1931 on; go with Shanks & Pottenger.
 Rule	SL	1935	1942	-	Jun	 1	0:00	0:40	SLST
 Rule	SL	1935	1942	-	Oct	 1	0:00	0	WAT
 Rule	SL	1957	1962	-	Jun	 1	0:00	1:00	SLST
@@ -557,7 +561,6 @@ Zone	Africa/Lome	0:04:52 -	LMT	1893
 # Tunisia
 
 # From Gwillim Law (2005-04-30):
-#
 # My correspondent, Risto Nykanen, has alerted me to another adoption of DST,
 # this time in Tunisia.  According to Yahoo France News
 # <http://fr.news.yahoo.com/050426/5/4dumk.html>, in a story attributed to AP
@@ -571,6 +574,12 @@ Zone	Africa/Lome	0:04:52 -	LMT	1893
 # <http://www.lapresse.tn/archives/archives280405/actualites/lheure.html>
 # ... DST for 2005: on: Sun May 1 0h standard time, off: Fri Sept. 30,
 # 1h standard time.
+#
+# From Atef Loukil (2006-03-28):
+# The daylight saving time will be the same each year:
+# Beginning      : the last Sunday of March at 02:00
+# Ending         : the last Sunday of October at 03:00 ...
+# http://www.tap.info.tn/en/index.php?option=com_content&task=view&id=1188&Itemid=50
 
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Tunisia	1939	only	-	Apr	15	23:00s	1:00	S
@@ -596,8 +605,11 @@ Rule	Tunisia	1989	only	-	Mar	26	 0:00s	1:00	S
 Rule	Tunisia	1990	only	-	May	 1	 0:00s	1:00	S
 Rule	Tunisia	2005	only	-	May	 1	 0:00s	1:00	S
 Rule	Tunisia	2005	only	-	Sep	30	 1:00s	0	-
-# Shanks gives 0:09 for Paris Mean Time; go with Howse's more precise 0:09:21.
-# Shanks says the 1911 switch occurred on Mar 9; go with Howse's Mar 11.
+Rule	Tunisia	2006	max	-	Mar	lastSun	 2:00s	1:00	S
+Rule	Tunisia	2006	max	-	Oct	lastSun	 2:00s	0	-
+# Shanks & Pottenger give 0:09:20 for Paris Mean Time; go with Howse's
+# more precise 0:09:21.
+# Shanks & Pottenger say the 1911 switch was on Mar 9; go with Howse's Mar 11.
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Africa/Tunis	0:40:44 -	LMT	1881 May 12
 			0:09:21	-	PMT	1911 Mar 11    # Paris Mean Time
diff --git a/JodaTime/src/java/org/joda/time/tz/src/antarctica b/JodaTime/src/java/org/joda/time/tz/src/antarctica
index bfe894143..885824ca8 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/antarctica
+++ b/JodaTime/src/java/org/joda/time/tz/src/antarctica
@@ -1,4 +1,4 @@
-# @(#)antarctica	7.30
+# @(#)antarctica	8.2
 # <pre>
 
 # From Paul Eggert (1999-11-15):
@@ -34,12 +34,12 @@ Rule	RussAQ	1996	max	-	Oct	lastSun	 2:00s	0	-
 Rule	ArgAQ	1964	1966	-	Mar	 1	0:00	0	-
 Rule	ArgAQ	1964	1966	-	Oct	15	0:00	1:00	S
 Rule	ArgAQ	1967	only	-	Apr	 1	0:00	0	-
-Rule	ArgAQ	1967	1968	-	Oct	Sun<=7	0:00	1:00	S
-Rule	ArgAQ	1968	1969	-	Apr	Sun<=7	0:00	0	-
+Rule	ArgAQ	1967	1968	-	Oct	Sun>=1	0:00	1:00	S
+Rule	ArgAQ	1968	1969	-	Apr	Sun>=1	0:00	0	-
 Rule	ArgAQ	1974	only	-	Jan	23	0:00	1:00	S
 Rule	ArgAQ	1974	only	-	May	 1	0:00	0	-
-Rule	ArgAQ	1974	1976	-	Oct	Sun<=7	0:00	1:00	S
-Rule	ArgAQ	1975	1977	-	Apr	Sun<=7	0:00	0	-
+Rule	ArgAQ	1974	1976	-	Oct	Sun>=1	0:00	1:00	S
+Rule	ArgAQ	1975	1977	-	Apr	Sun>=1	0:00	0	-
 Rule	ChileAQ	1966	1997	-	Oct	Sun>=9	0:00	1:00	S
 Rule	ChileAQ	1967	1998	-	Mar	Sun>=9	0:00	0	-
 Rule	ChileAQ	1998	only	-	Sep	27	0:00	1:00	S
diff --git a/JodaTime/src/java/org/joda/time/tz/src/asia b/JodaTime/src/java/org/joda/time/tz/src/asia
index 22247bd45..9302cd8ac 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/asia
+++ b/JodaTime/src/java/org/joda/time/tz/src/asia
@@ -1,15 +1,15 @@
-# @(#)asia	7.91
+# @(#)asia	8.2
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
 # go ahead and edit the file (and please send any changes to
 # tz@elsie.nci.nih.gov for general use in the future).
 
-# From Paul Eggert (1999-03-22):
+# From Paul Eggert (2006-03-22):
 #
 # A good source for time zone historical data outside the U.S. is
-# Thomas G. Shanks, The International Atlas (5th edition),
-# San Diego: ACS Publications, Inc. (1999).
+# Thomas G. Shanks and Rique Pottenger, The International Atlas (6th edition),
+# San Diego: ACS Publications, Inc. (2003).
 #
 # Gwillim Law writes that a good source
 # for recent time zone data is the International Air Transport
@@ -17,8 +17,8 @@
 # published semiannually.  Law sent in several helpful summaries
 # of the IATA's data after 1990.
 #
-# Except where otherwise noted, Shanks is the source for entries through 1990,
-# and IATA SSIM is the source for entries after 1990.
+# Except where otherwise noted, Shanks & Pottenger is the source for
+# entries through 1990, and IATA SSIM is the source for entries afterwards.
 #
 # Another source occasionally used is Edward W. Whitman, World Time Differences,
 # Whitman Publishing Co, 2 Niagara Av, Ealing, London (undated), which
@@ -61,6 +61,7 @@
 # These rules are stolen from the `europe' file.
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	EUAsia	1981	max	-	Mar	lastSun	 1:00u	1:00	S
+Rule	EUAsia	1979	1995	-	Sep	lastSun	 1:00u	0	-
 Rule	EUAsia	1996	max	-	Oct	lastSun	 1:00u	0	-
 Rule E-EurAsia	1981	max	-	Mar	lastSun	 0:00	1:00	S
 Rule E-EurAsia	1979	1995	-	Sep	lastSun	 0:00	0	-
@@ -82,10 +83,11 @@ Zone	Asia/Kabul	4:36:48 -	LMT	1890
 			4:30	-	AFT
 
 # Armenia
-# From Paul Eggert (1999-10-29):
-# Shanks has Yerevan switching to 3:00 (with Russian DST) in spring 1991,
-# then to 4:00 with no DST in fall 1995, then readopting Russian DST in 1997.
-# Go with Shanks, even when he disagrees with others.  Edgar Der-Danieliantz
+# From Paul Eggert (2006-03-22):
+# Shanks & Pottenger have Yerevan switching to 3:00 (with Russian DST)
+# in spring 1991, then to 4:00 with no DST in fall 1995, then
+# readopting Russian DST in 1997.  Go with Shanks & Pottenger, even
+# when they disagree with others.  Edgar Der-Danieliantz
 # reported (1996-05-04) that Yerevan probably wouldn't use DST
 # in 1996, though it did use DST in 1995.  IATA SSIM (1991/1998) reports that
 # Armenia switched from 3:00 to 4:00 in 1998 and observed DST after 1991,
@@ -194,13 +196,15 @@ Zone	Asia/Phnom_Penh	6:59:40 -	LMT	1906 Jun  9
 # CHINA               8 H  AHEAD OF UTC  ALL OF CHINA, INCL TAIWAN
 # CHINA               9 H  AHEAD OF UTC  APR 17 - SEP 10
 
-# From Paul Eggert (1995-12-19):
-# Shanks writes that China has had a single time zone since 1980 May 1,
-# observing summer DST from 1986 through 1991; this contradicts Devine's
+# From Paul Eggert (2006-03-22):
+# Shanks & Pottenger write that China (except for Hong Kong and Macau)
+# has had a single time zone since 1980 May 1, observing summer DST
+# from 1986 through 1991; this contradicts Devine's
 # note about Time magazine, though apparently _something_ happened in 1986.
-# Go with Shanks for now.  I made up names for the other pre-1980 time zones.
+# Go with Shanks & Pottenger for now.  I made up names for the other
+# pre-1980 time zones.
 
-# From Shanks:
+# From Shanks & Pottenger:
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Shang	1940	only	-	Jun	 3	0:00	1:00	D
 Rule	Shang	1940	1941	-	Oct	 1	0:00	0	S
@@ -266,7 +270,7 @@ Zone	Asia/Hong_Kong	7:36:36 -	LMT	1904 Oct 30
 
 # Taiwan
 
-# Shanks writes that Taiwan observed DST during 1945, when it
+# Shanks & Pottenger write that Taiwan observed DST during 1945, when it
 # was still controlled by Japan.  This is hard to believe, but we don't
 # have any other information.
 
@@ -423,7 +427,7 @@ Zone	Asia/Calcutta	5:53:28 -	LMT	1880	# Kolkata
 
 # Indonesia
 #
-# From Gwillim Law (2001-05-28), overriding Shanks:
+# From Gwillim Law (2001-05-28), overriding Shanks & Pottenger:
 # <http://www.sumatera-inc.com/go_to_invest/about_indonesia.asp#standtime>
 # says that Indonesia's time zones changed on 1988-01-01.  Looking at some
 # time zone maps, I think that must refer to Western Borneo (Kalimantan Barat
@@ -431,7 +435,7 @@ Zone	Asia/Calcutta	5:53:28 -	LMT	1880	# Kolkata
 #
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone Asia/Jakarta	7:07:12 -	LMT	1867 Aug 10
-# Shanks says the next transition was at 1924 Jan 1 0:13,
+# Shanks & Pottenger say the next transition was at 1924 Jan 1 0:13,
 # but this must be a typo.
 			7:07:12	-	JMT	1923 Dec 31 23:47:12 # Jakarta
 			7:20	-	JAVT	1932 Nov	 # Java Time
@@ -498,8 +502,8 @@ Zone Asia/Jayapura	9:22:48 -	LMT	1932 Nov
 # leap year calculation involved.  There has never been any serious
 # plan to change that law....
 #
-# From Paul Eggert (2005-04-05):
-# Go with Shanks before September 1991, and with Pournader thereafter.
+# From Paul Eggert (2006-03-22):
+# Go with Shanks & Pottenger before Sept. 1991, and with Pournader thereafter.
 # I used Ed Reingold's cal-persia in GNU Emacs 21.2 to check Persian dates,
 # stopping after 2037 when 32-bit time_t's overflow.
 # That cal-persia used Birashk's approximation, which disagrees with the solar
@@ -519,6 +523,14 @@ Zone Asia/Jayapura	9:22:48 -	LMT	1932 Nov
 # Reingold's/Dershowitz' calculator gives correctly the Gregorian date
 # 2058-03-21 for 1 Farvardin 1437 (astronomical).
 #
+# From Paul Eggert (2006-03-22):
+# The above comments about post-2006 transitions may become relevant again,
+# if Iran ever resuscitates DST, so we'll leave the comments in.
+#
+# From Steffen Thorsen (2006-03-22):
+# Several of my users have reported that Iran will not observe DST anymore:
+# http://www.irna.ir/en/news/view/line-17/0603193812164948.htm
+#
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Iran	1978	1980	-	Mar	21	0:00	1:00	D
 Rule	Iran	1978	only	-	Oct	21	0:00	0	S
@@ -537,38 +549,8 @@ Rule	Iran	2001	2003	-	Mar	22	0:00	1:00	D
 Rule	Iran	2001	2003	-	Sep	22	0:00	0	S
 Rule	Iran	2004	only	-	Mar	21	0:00	1:00	D
 Rule	Iran	2004	only	-	Sep	21	0:00	0	S
-Rule	Iran	2005	2007	-	Mar	22	0:00	1:00	D
-Rule	Iran	2005	2007	-	Sep	22	0:00	0	S
-Rule	Iran	2008	only	-	Mar	21	0:00	1:00	D
-Rule	Iran	2008	only	-	Sep	21	0:00	0	S
-Rule	Iran	2009	2011	-	Mar	22	0:00	1:00	D
-Rule	Iran	2009	2011	-	Sep	22	0:00	0	S
-Rule	Iran	2012	only	-	Mar	21	0:00	1:00	D
-Rule	Iran	2012	only	-	Sep	21	0:00	0	S
-Rule	Iran	2013	2015	-	Mar	22	0:00	1:00	D
-Rule	Iran	2013	2015	-	Sep	22	0:00	0	S
-Rule	Iran	2016	only	-	Mar	21	0:00	1:00	D
-Rule	Iran	2016	only	-	Sep	21	0:00	0	S
-Rule	Iran	2017	2019	-	Mar	22	0:00	1:00	D
-Rule	Iran	2017	2019	-	Sep	22	0:00	0	S
-Rule	Iran	2020	only	-	Mar	21	0:00	1:00	D
-Rule	Iran	2020	only	-	Sep	21	0:00	0	S
-Rule	Iran	2021	2023	-	Mar	22	0:00	1:00	D
-Rule	Iran	2021	2023	-	Sep	22	0:00	0	S
-Rule	Iran	2024	only	-	Mar	21	0:00	1:00	D
-Rule	Iran	2024	only	-	Sep	21	0:00	0	S
-Rule	Iran	2025	2027	-	Mar	22	0:00	1:00	D
-Rule	Iran	2025	2027	-	Sep	22	0:00	0	S
-Rule	Iran	2028	2029	-	Mar	21	0:00	1:00	D
-Rule	Iran	2028	2029	-	Sep	21	0:00	0	S
-Rule	Iran	2030	2031	-	Mar	22	0:00	1:00	D
-Rule	Iran	2030	2031	-	Sep	22	0:00	0	S
-Rule	Iran	2032	2033	-	Mar	21	0:00	1:00	D
-Rule	Iran	2032	2033	-	Sep	21	0:00	0	S
-Rule	Iran	2034	2035	-	Mar	22	0:00	1:00	D
-Rule	Iran	2034	2035	-	Sep	22	0:00	0	S
-Rule	Iran	2036	2037	-	Mar	21	0:00	1:00	D
-Rule	Iran	2036	2037	-	Sep	21	0:00	0	S
+Rule	Iran	2005	only	-	Mar	22	0:00	1:00	D
+Rule	Iran	2005	only	-	Sep	22	0:00	0	S
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Asia/Tehran	3:25:44	-	LMT	1916
 			3:25:44	-	TMT	1946	# Tehran Mean Time
@@ -601,7 +583,8 @@ Rule	Iraq	1984	1985	-	Apr	1	0:00	1:00	D
 Rule	Iraq	1985	1990	-	Sep	lastSun	1:00s	0	S
 Rule	Iraq	1986	1990	-	Mar	lastSun	1:00s	1:00	D
 # IATA SSIM (1991/1996) says Apr 1 12:01am UTC; guess the `:01' is a typo.
-# Shanks says Iraq did not observe DST 1992/1997 or 1999 on; ignore this.
+# Shanks & Pottenger say Iraq did not observe DST 1992/1997; ignore this.
+# 
 Rule	Iraq	1991	max	-	Apr	 1	3:00s	1:00	D
 Rule	Iraq	1991	max	-	Oct	 1	3:00s	0	S
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
@@ -635,7 +618,7 @@ Zone	Asia/Baghdad	2:57:40	-	LMT	1890
 # high on my favorite-country list (and not only because my wife's
 # family is from India).
 
-# From Shanks:
+# From Shanks & Pottenger:
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Zion	1940	only	-	Jun	 1	0:00	1:00	D
 Rule	Zion	1942	1944	-	Nov	 1	0:00	0	S
@@ -874,14 +857,15 @@ Zone	Asia/Jerusalem	2:20:56 -	LMT	1880
 # of the Japanese wanted to scrap daylight-saving time, as opposed to 30% who
 # wanted to keep it.)
 
-# Shanks writes that daylight saving in Japan during those years was as follows:
+# From Paul Eggert (2006-03-22):
+# Shanks & Pottenger write that DST in Japan during those years was as follows:
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Japan	1948	only	-	May	Sun>=1	2:00	1:00	D
 Rule	Japan	1948	1951	-	Sep	Sat>=8	2:00	0	S
 Rule	Japan	1949	only	-	Apr	Sun>=1	2:00	1:00	D
 Rule	Japan	1950	1951	-	May	Sun>=1	2:00	1:00	D
 # but the only locations using it (for birth certificates, presumably, since
-# Shanks's audience is astrologers) were US military bases.  For now, assume
+# their audience is astrologers) were US military bases.  For now, assume
 # that for most purposes daylight-saving time was observed; otherwise, what
 # would have been the point of the 1951 poll?
 
@@ -906,8 +890,9 @@ Rule	Japan	1950	1951	-	May	Sun>=1	2:00	1:00	D
 # I wrote "ordinance" above, but I don't know how to translate.
 # In Japanese it's "chokurei", which means ordinance from emperor.
 
-# Shanks claims JST in use since 1896, and that a few places (e.g. Ishigaki)
-# use +0800; go with Suzuki.  Guess that all ordinances took effect on Jan 1.
+# Shanks & Pottenger claim JST in use since 1896, and that a few
+# places (e.g. Ishigaki) use +0800; go with Suzuki.  Guess that all
+# ordinances took effect on Jan 1.
 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Asia/Tokyo	9:18:59	-	LMT	1887 Dec 31 15:00u
@@ -979,11 +964,11 @@ Zone	Asia/Amman	2:23:44 -	LMT	1931
 # Guess that Aqtau and Aqtobe diverged in 1995, since that's the first time
 # IATA SSIM mentions a third time zone in Kazakhstan.
 
-# From Paul Eggert (2001-10-18):
+# From Paul Eggert (2006-03-22):
 # German Iofis, ELSI, Almaty (2001-10-09) reports that Kazakhstan uses
 # RussiaAsia rules, instead of switching at 00:00 as the IATA has it.
-# Go with Shanks, who has them always using RussiaAsia rules.
-# Also go with the following claims of Shanks:
+# Go with Shanks & Pottenger, who have them always using RussiaAsia rules.
+# Also go with the following claims of Shanks & Pottenger:
 #
 # - Kazakhstan did not observe DST in 1991.
 # - Qyzylorda switched from +5:00 to +6:00 on 1992-01-19 02:00.
@@ -1063,7 +1048,7 @@ Zone	Asia/Oral	3:25:24	-	LMT	1924 May  2 # or Ural'sk
 			5:00	-	ORAT
 
 # Kyrgyzstan (Kirgizstan)
-# Transitions through 1991 are from Shanks.
+# Transitions through 1991 are from Shanks & Pottenger.
 
 # From Paul Eggert (2005-08-15):
 # According to an article dated today in the Kyrgyzstan Development Gateway
@@ -1096,12 +1081,12 @@ Zone	Asia/Bishkek	4:58:24 -	LMT	1924 May  2
 # Daylight Savings Time was not observed until 1987.  He did not know
 # at what time of day DST starts or ends.
 
-# From Shanks:
+# From Shanks & Pottenger:
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	ROK	1960	only	-	May	15	0:00	1:00	D
 Rule	ROK	1960	only	-	Sep	13	0:00	0	S
-Rule	ROK	1987	1988	-	May	Sun<=14	0:00	1:00	D
-Rule	ROK	1987	1988	-	Oct	Sun<=14	0:00	0	S
+Rule	ROK	1987	1988	-	May	Sun>=8	0:00	1:00	D
+Rule	ROK	1987	1988	-	Oct	Sun>=8	0:00	0	S
 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Asia/Seoul	8:27:52	-	LMT	1890
@@ -1184,8 +1169,8 @@ Zone Asia/Kuala_Lumpur	6:46:46 -	LMT	1901 Jan  1
 			7:30	-	MALT	1982 Jan  1
 			8:00	-	MYT	# Malaysia Time
 # Sabah & Sarawak
-# From Paul Eggert (2003-11-01):
-# The data here are mostly from Shanks, but the 1942, 1945 and 1982
+# From Paul Eggert (2006-03-22):
+# The data here are mostly from Shanks & Pottenger, but the 1942, 1945 and 1982
 # transition dates are from Mok Ly Yng.
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone Asia/Kuching	7:21:20	-	LMT	1926 Mar
@@ -1203,8 +1188,8 @@ Zone	Indian/Maldives	4:54:00 -	LMT	1880	# Male
 
 # Mongolia
 
-# Shanks says that Mongolia has three time zones, but usno1995 and the CIA map
-# Standard Time Zones of the World (1997-01)
+# Shanks & Pottenger say that Mongolia has three time zones, but
+# usno1995 and the CIA map Standard Time Zones of the World (2005-03)
 # both say that it has just one.
 
 # From Oscar van Vlijmen (1999-12-11):
@@ -1274,11 +1259,19 @@ Zone	Indian/Maldives	4:54:00 -	LMT	1880	# Male
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Mongol	1983	1984	-	Apr	1	0:00	1:00	S
 Rule	Mongol	1983	only	-	Oct	1	0:00	0	-
-# IATA SSIM says 1990s switches occurred at 00:00, but Shanks (1995) lists
-# them at 02:00s, and McDow says the 2001 switches also occurred at 02:00.
-# Also, IATA SSIM (1996-09) says 1996-10-25.  Go with Shanks through 1998.
-Rule	Mongol	1985	1998	-	Mar	lastSun	2:00s	1:00	S
-Rule	Mongol	1984	1998	-	Sep	lastSun	2:00s	0	-
+# Shanks & Pottenger and IATA SSIM say 1990s switches occurred at 00:00,
+# but McDow says the 2001 switches occurred at 02:00.  Also, IATA SSIM
+# (1996-09) says 1996-10-25.  Go with Shanks & Pottenger through 1998.
+#
+# Shanks & Pottenger say that the Sept. 1984 through Sept. 1990 switches
+# in Choibalsan (more precisely, in Dornod and Sukhbaatar) took place
+# at 02:00 standard time, not at 00:00 local time as in the rest of
+# the country.  That would be odd, and possibly is a result of their
+# correction of 02:00 (in the previous edition) not being done correctly
+# in the latest edition; so ignore it for now.
+
+Rule	Mongol	1985	1998	-	Mar	lastSun	0:00	1:00	S
+Rule	Mongol	1984	1998	-	Sep	lastSun	0:00	0	-
 # IATA SSIM (1999-09) says Mongolia no longer observes DST.
 Rule	Mongol	2001	only	-	Apr	lastSat	2:00	1:00	S
 Rule	Mongol	2001	max	-	Sep	lastSat	2:00	0	-
@@ -1404,8 +1397,8 @@ Zone	Asia/Karachi	4:28:12 -	LMT	1907
 # I guess more info may be available from the PA's web page (if/when they
 # have one).
 
-# From Paul Eggert (1998-02-25):
-# Shanks writes that Gaza did not observe DST until 1957, but we'll go
+# From Paul Eggert (2006-03-22):
+# Shanks & Pottenger write that Gaza did not observe DST until 1957, but go
 # with Shapir and assume that it observed DST from 1940 through 1947,
 # and that it used Jordanian rules starting in 1996.
 # We don't yet need a separate entry for the West Bank, since
@@ -1473,7 +1466,7 @@ Zone	Asia/Gaza	2:17:52	-	LMT	1900 Oct
 # Philippines, issued a proclamation announcing that 1844-12-30 was to
 # be immediately followed by 1845-01-01.  Robert H. van Gent has a
 # transcript of the decree in <http://www.phys.uu.nl/~vgent/idl/idl.htm>.
-# The rest of this data is from Shanks.
+# The rest of the data are from Shanks & Pottenger.
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Phil	1936	only	-	Nov	1	0:00	1:00	S
 Rule	Phil	1937	only	-	Feb	1	0:00	0	-
@@ -1533,6 +1526,11 @@ Zone	Asia/Singapore	6:55:25 -	LMT	1901 Jan  1
 # With effect from 12.30 a.m. on 26th October 1996
 # Sri Lanka will be six (06) hours ahead of GMT.
 
+# From Petr Machata (2006-03-09):
+# It was brought to my attention that Sri Lanka is going to change
+# timezone from GMT+6:00 to GMT+5:30, quite soon at Apr/13:
+# http://www.hindu.com/thehindu/holnus/001200603042035.htm
+
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Asia/Colombo	5:19:24 -	LMT	1880
 			5:19:32	-	MMT	1906	# Moratuwa Mean Time
@@ -1541,7 +1539,8 @@ Zone	Asia/Colombo	5:19:24 -	LMT	1880
 			5:30	1:00	IST	1945 Oct 16 2:00
 			5:30	-	IST	1996 May 25 0:00
 			6:30	-	LKT	1996 Oct 26 0:30
-			6:00	-	LKT
+			6:00	-	LKT	2006 Apr 14
+			5:30	-	IST
 
 # Syria
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
@@ -1576,7 +1575,7 @@ Rule	Syria	1993	only	-	Sep	25	0:00	0	-
 # IATA SSIM (1998-02) says 1998-04-02;
 # (1998-09) says 1999-03-29 and 1999-09-29; (1999-02) says 1999-04-02,
 # 2000-04-02, and 2001-04-02; (1999-09) says 2000-03-31 and 2001-03-31;
-# ignore all these claims and go with Shanks.
+# ignore all these claims and go with Shanks & Pottenger.
 Rule	Syria	1994	1996	-	Apr	 1	0:00	1:00	S
 Rule	Syria	1994	max	-	Oct	 1	0:00	0	-
 Rule	Syria	1997	1998	-	Mar	lastMon	0:00	1:00	S
@@ -1586,7 +1585,7 @@ Zone	Asia/Damascus	2:25:12 -	LMT	1920	# Dimashq
 			2:00	Syria	EE%sT
 
 # Tajikistan
-# From Shanks.
+# From Shanks & Pottenger.
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Asia/Dushanbe	4:35:12 -	LMT	1924 May  2
 			5:00	-	DUST	1930 Jun 21 # Dushanbe Time
@@ -1601,13 +1600,13 @@ Zone	Asia/Bangkok	6:42:04	-	LMT	1880
 			7:00	-	ICT
 
 # Turkmenistan
-# From Shanks.
+# From Shanks & Pottenger.
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Asia/Ashgabat	3:53:32 -	LMT	1924 May  2 # or Ashkhabad
 			4:00	-	ASHT	1930 Jun 21 # Ashkhabad Time
 			5:00 RussiaAsia	ASH%sT	1991 Mar 31 2:00
 			4:00 RussiaAsia	ASH%sT	1991 Oct 27 # independence
-			4:00 RussiaAsia TM%sT	1992 Jan 19 2:00
+			4:00 RussiaAsia	TM%sT	1992 Jan 19 2:00
 			5:00	-	TMT
 
 # United Arab Emirates
@@ -1621,24 +1620,24 @@ Zone	Asia/Samarkand	4:27:12 -	LMT	1924 May  2
 			4:00	-	SAMT	1930 Jun 21 # Samarkand Time
 			5:00	-	SAMT	1981 Apr  1
 			5:00	1:00	SAMST	1981 Oct  1
-			6:00 RussiaAsia TAS%sT	1991 Mar 31 2:00 # Tashkent Time
-			5:00 RussiaAsia	TAS%sT	1991 Sep  1 # independence
+			6:00	-	TAST	1982 Apr  1 # Tashkent Time
+			5:00 RussiaAsia	SAM%sT	1991 Sep  1 # independence
 			5:00 RussiaAsia	UZ%sT	1992
-			5:00 RussiaAsia	UZ%sT	1993
 			5:00	-	UZT
 Zone	Asia/Tashkent	4:37:12 -	LMT	1924 May  2
 			5:00	-	TAST	1930 Jun 21 # Tashkent Time
-			6:00 RussiaAsia TAS%sT	1991 Mar 31 2:00s
+			6:00 RussiaAsia	TAS%sT	1991 Mar 31 2:00
 			5:00 RussiaAsia	TAS%sT	1991 Sep  1 # independence
 			5:00 RussiaAsia	UZ%sT	1992
-			5:00 RussiaAsia	UZ%sT	1993
 			5:00	-	UZT
 
 # Vietnam
+
 # From Paul Eggert (1993-11-18):
 # Saigon's official name is Thanh-Pho Ho Chi Minh, but it's too long.
 # We'll stick with the traditional name for now.
-# From Shanks:
+
+# From Shanks & Pottenger:
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Asia/Saigon	7:06:40 -	LMT	1906 Jun  9
 			7:06:20	-	SMT	1911 Mar 11 0:01 # Saigon MT?
diff --git a/JodaTime/src/java/org/joda/time/tz/src/australasia b/JodaTime/src/java/org/joda/time/tz/src/australasia
index 55252ce7c..513c4d08b 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/australasia
+++ b/JodaTime/src/java/org/joda/time/tz/src/australasia
@@ -1,4 +1,4 @@
-# @(#)australasia	7.78
+# @(#)australasia	8.2
 # <pre>
 
 # This file also includes Pacific islands.
@@ -210,7 +210,7 @@ Zone Indian/Christmas	7:02:52 -	LMT	1895 Feb
 			7:00	-	CXT	# Christmas Island Time
 
 # Cook Is
-# From Shanks:
+# From Shanks & Pottenger:
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Cook	1978	only	-	Nov	12	0:00	0:30	HS
 Rule	Cook	1979	1991	-	Mar	Sun>=1	0:00	0	-
@@ -308,7 +308,7 @@ Zone	Pacific/Nauru	11:07:40 -	LMT	1921 Jan 15	# Uaobe
 Rule	NC	1977	1978	-	Dec	Sun>=1	0:00	1:00	S
 Rule	NC	1978	1979	-	Feb	27	0:00	0	-
 Rule	NC	1996	only	-	Dec	 1	2:00s	1:00	S
-# Shanks says the following was at 2:00; go with IATA.
+# Shanks & Pottenger say the following was at 2:00; go with IATA.
 Rule	NC	1997	only	-	Mar	 2	2:00s	0	-
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Pacific/Noumea	11:05:48 -	LMT	1912 Jan 13
@@ -507,10 +507,10 @@ Zone	Pacific/Wallis	12:15:20 -	LMT	1901
 # go ahead and edit the file (and please send any changes to
 # tz@elsie.nci.nih.gov for general use in the future).
 
-# From Paul Eggert (1999-10-29):
+# From Paul Eggert (2006-03-22):
 # A good source for time zone historical data outside the U.S. is
-# Thomas G. Shanks, The International Atlas (5th edition),
-# San Diego: ACS Publications, Inc. (1999).
+# Thomas G. Shanks and Rique Pottenger, The International Atlas (6th edition),
+# San Diego: ACS Publications, Inc. (2003).
 #
 # Gwillim Law writes that a good source
 # for recent time zone data is the International Air Transport
@@ -518,8 +518,8 @@ Zone	Pacific/Wallis	12:15:20 -	LMT	1901
 # published semiannually.  Law sent in several helpful summaries
 # of the IATA's data after 1990.
 #
-# Except where otherwise noted, Shanks is the source for entries through 1990,
-# and IATA SSIM is the source for entries after 1990.
+# Except where otherwise noted, Shanks & Pottenger is the source for
+# entries through 1990, and IATA SSIM is the source for entries afterwards.
 #
 # Another source occasionally used is Edward W. Whitman, World Time Differences,
 # Whitman Publishing Co, 2 Niagara Av, Ealing, London (undated), which
@@ -669,7 +669,7 @@ Zone	Pacific/Wallis	12:15:20 -	LMT	1901
 #   understood in Australia.
 
 # From Paul Eggert (1995-12-19):
-# Shanks reports 2:00 for all autumn changes in Australia and New Zealand.
+# Shanks & Pottenger report 2:00 for all autumn changes in Australia and NZ.
 # Mark Prior writes that his newspaper
 # reports that NSW's fall 1995 change will occur at 2:00,
 # but Robert Elz says it's been 3:00 in Victoria since 1970
@@ -842,14 +842,14 @@ Zone	Pacific/Wallis	12:15:20 -	LMT	1901
 # current DST ending dates, no worries.
 #
 # Rule	Oz	1971	1985	-	Oct	lastSun	2:00	1:00	-
-# Rule	Oz	1986	max	-	Oct	Sun<=24	2:00	1:00	-
+# Rule	Oz	1986	max	-	Oct	Sun>=18	2:00	1:00	-
 # Rule	Oz	1972	only	-	Feb	27	3:00	0	-
 # Rule	Oz	1973	1986	-	Mar	Sun>=1	3:00	0	-
-# Rule	Oz	1987	max	-	Mar	Sun<=21	3:00	0	-
+# Rule	Oz	1987	max	-	Mar	Sun>=15	3:00	0	-
 # Zone	Australia/Tasmania	10:00	Oz	EST
 # Zone	Australia/South		9:30	Oz	CST
 # Zone	Australia/Victoria	10:00	Oz	EST	1985 Oct lastSun 2:00
-#				10:00	1:00	EST	1986 Mar Sun<=21 3:00
+#				10:00	1:00	EST	1986 Mar Sun>=15 3:00
 #				10:00	Oz	EST
 
 # From Robert Elz (1991-03-06):
@@ -875,7 +875,7 @@ Zone	Pacific/Wallis	12:15:20 -	LMT	1901
 # ...
 # Rule	 AS	1971	max	-	Oct	lastSun	2:00	1:00	D
 # Rule	 AS	1972	1985	-	Mar	Sun>=1	3:00	0	C
-# Rule	 AS	1986	1990	-	Mar	Sun<=21	3:00	0	C
+# Rule	 AS	1986	1990	-	Mar	Sun>=15	3:00	0	C
 # Rule	 AS	1991	max	-	Mar	Sun>=1	3:00	0	C
 
 # From Bradley White (1992-03-11):
@@ -1068,9 +1068,9 @@ Zone	Pacific/Wallis	12:15:20 -	LMT	1901
 # shown on clocks on LHI. I guess this means that for 30 minutes at the start
 # of DST, LHI is actually 1 hour ahead of the rest of NSW.
 
-# From Paul Eggert (2001-02-09):
-# For Lord Howe dates we use Shanks through 1989, and Lonergan thereafter.
-# For times we use Lonergan.
+# From Paul Eggert (2006-03-22):
+# For Lord Howe dates we use Shanks & Pottenger through 1989, and
+# Lonergan thereafter.  For times we use Lonergan.
 
 ###############################################################################
 
@@ -1101,16 +1101,16 @@ Zone	Pacific/Wallis	12:15:20 -	LMT	1901
 # rather than the October 1 value.
 
 # From Paul Eggert (1995-12-19);
-# Shanks reports 2:00 for all autumn changes in Australia and New Zealand.
+# Shank & Pottenger report 2:00 for all autumn changes in Australia and NZ.
 # Robert Uzgalis writes that the New Zealand Daylight
 # Savings Time Order in Council dated 1990-06-18 specifies 2:00 standard
 # time on both the first Sunday in October and the third Sunday in March.
 # As with Australia, we'll assume the tradition is 2:00s, not 2:00.
 #
-# From Paul Eggert (2003-05-26):
+# From Paul Eggert (2006-03-22):
 # The Department of Internal Affairs (DIA) maintains a brief history,
 # as does Carol Squires; see tz-link.htm for the full references.
-# Use these sources in preference to Shanks.
+# Use these sources in preference to Shanks & Pottenger.
 #
 # For Chatham, IATA SSIM (1991/1999) gives the NZ rules but with
 # transitions at 2:45 local standard time; this confirms that Chatham
@@ -1185,8 +1185,8 @@ Zone	Pacific/Wallis	12:15:20 -	LMT	1901
 # ``I am certain, having lived there for the past decade, that "Truk"
 # (now properly known as Chuuk) ... is in the time zone GMT+10.''
 #
-# Shanks writes that Truk switched from UTC+10 to UTC+11 on 1978-10-01;
-# ignore this for now.
+# Shanks & Pottenger write that Truk switched from UTC+10 to UTC+11
+# on 1978-10-01; ignore this for now.
 
 # From Paul Eggert (1999-10-29):
 # The Federated States of Micronesia Visitors Board writes in
@@ -1279,8 +1279,8 @@ Zone	Pacific/Wallis	12:15:20 -	LMT	1901
 # on the World Day of Prayer, you would be the first people on Earth
 # to say your prayers in the morning."
 
-# From Paul Eggert (1999-08-12):
-# Shanks says the transition was on 1968-10-01; go with Mundell.
+# From Paul Eggert (2006-03-22):
+# Shanks & Pottenger say the transition was on 1968-10-01; go with Mundell.
 
 # From Eric Ulevik (1999-05-03):
 # Tonga's director of tourism, who is also secretary of the National Millenium
diff --git a/JodaTime/src/java/org/joda/time/tz/src/backward b/JodaTime/src/java/org/joda/time/tz/src/backward
index 4f2b4d598..fb7d4b0d1 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/backward
+++ b/JodaTime/src/java/org/joda/time/tz/src/backward
@@ -1,4 +1,4 @@
-# @(#)backward	7.30
+# @(#)backward	8.1
 
 # This file provides links between current names for time zones
 # and their old names.  Many names changed in late 1993.
diff --git a/JodaTime/src/java/org/joda/time/tz/src/etcetera b/JodaTime/src/java/org/joda/time/tz/src/etcetera
index 9eb5a7442..a258a897a 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/etcetera
+++ b/JodaTime/src/java/org/joda/time/tz/src/etcetera
@@ -1,4 +1,4 @@
-# @(#)etcetera	7.12
+# @(#)etcetera	8.1
 
 # These entries are mostly present for historical reasons, so that
 # people in areas not otherwise covered by the tz files could "zic -l"
diff --git a/JodaTime/src/java/org/joda/time/tz/src/europe b/JodaTime/src/java/org/joda/time/tz/src/europe
index 443721129..da8de3910 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/europe
+++ b/JodaTime/src/java/org/joda/time/tz/src/europe
@@ -1,14 +1,14 @@
-# @(#)europe	7.96
+# @(#)europe	8.3
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
 # go ahead and edit the file (and please send any changes to
 # tz@elsie.nci.nih.gov for general use in the future).
 
-# From Paul Eggert (1999-10-29):
+# From Paul Eggert (2006-03-22):
 # A good source for time zone historical data outside the U.S. is
-# Thomas G. Shanks, The International Atlas (5th edition),
-# San Diego: ACS Publications, Inc. (1999).
+# Thomas G. Shanks and Rique Pottenger, The International Atlas (6th edition),
+# San Diego: ACS Publications, Inc. (2003).
 #
 # Gwillim Law writes that a good source
 # for recent time zone data is the International Air Transport
@@ -16,8 +16,8 @@
 # published semiannually.  Law sent in several helpful summaries
 # of the IATA's data after 1990.
 #
-# Except where otherwise noted, Shanks is the source for entries through 1991,
-# and IATA SSIM is the source for entries afterwards.
+# Except where otherwise noted, Shanks & Pottenger is the source for
+# entries through 1991, and IATA SSIM is the source for entries afterwards.
 #
 # Other sources occasionally used include:
 #
@@ -221,11 +221,12 @@
 # (Lords Hansard 11 June 1997 columns 964 to 976)
 # </a>.
 
-# From Paul Eggert (2001-07-18):
+# From Paul Eggert (2006-03-22):
 #
-# For lack of other data, we'll follow Shanks for Eire in 1940-1948.
+# For lack of other data, follow Shanks & Pottenger for Eire in 1940-1948.
 #
-# Given Ilieve and Myers's data, the following claims by Shanks are incorrect:
+# Given Ilieve and Myers's data, the following claims by Shanks & Pottenger
+# are incorrect:
 #     * Wales did not switch from GMT to daylight saving time until
 #	1921 Apr 3, when they began to conform with the rest of Great Britain.
 # Actually, Wales was identical after 1880.
@@ -237,18 +238,19 @@
 # Actually, that date saw the usual switch to summer time.
 # Standard time was not changed until 1968-10-27 (the clocks didn't change).
 #
-# Here is another incorrect claim by Shanks:
+# Here is another incorrect claim by Shanks & Pottenger:
 #     * Jersey, Guernsey, and the Isle of Man did not switch from GMT
 #	to daylight saving time until 1921 Apr 3, when they began to
 #	conform with Great Britain.
 # S.R.&O. 1916, No. 382 and HO 45/10811/312364 (quoted above) say otherwise.
 #
-# The following claim by Shanks is possible though doubtful;
+# The following claim by Shanks & Pottenger is possible though doubtful;
 # we'll ignore it for now.
 #     * Dublin's 1971-10-31 switch was at 02:00, even though London's was 03:00.
 #
 #
-# Whitman says Dublin Mean Time was -0:25:21, which is more precise than Shanks.
+# Whitman says Dublin Mean Time was -0:25:21, which is more precise than
+# Shanks & Pottenger.
 # Perhaps this was Dunsink Observatory Time, as Dunsink Observatory
 # (8 km NW of Dublin's center) seemingly was to Dublin as Greenwich was
 # to London.  For example:
@@ -418,7 +420,7 @@ Rule	GB-Eire 1990	1995	-	Oct	Sun>=22	1:00u	0	GMT
 # See EU for rules starting in 1996.
 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/London	-0:01:15 -	LMT	1847 Dec  1
+Zone	Europe/London	-0:01:15 -	LMT	1847 Dec  1 0:00s
 			 0:00	GB-Eire	%s	1968 Oct 27
 			 1:00	-	BST	1971 Oct 31 2:00u
 			 0:00	GB-Eire	%s	1996
@@ -476,7 +478,7 @@ Rule	C-Eur	1942	only	-	Nov	 2	 2:00s	0	-
 Rule	C-Eur	1943	only	-	Mar	29	 2:00s	1:00	S
 Rule	C-Eur	1943	only	-	Oct	 4	 2:00s	0	-
 Rule	C-Eur	1944	only	-	Apr	 3	 2:00s	1:00	S
-# Whitman gives 1944 Oct 7; go with Shanks.
+# Whitman gives 1944 Oct 7; go with Shanks & Pottenger.
 Rule	C-Eur	1944	only	-	Oct	 2	 2:00s	0	-
 Rule	C-Eur	1977	1980	-	Apr	Sun>=1	 2:00s	1:00	S
 Rule	C-Eur	1977	only	-	Sep	lastSun	 2:00s	0	-
@@ -596,12 +598,12 @@ Zone	Europe/Andorra	0:06:04 -	LMT	1901
 
 # Austria
 
-# From Paul Eggert (2003-02-28): Shanks gives 1918-06-16 and
+# From Paul Eggert (2006-03-22): Shanks & Pottenger give 1918-06-16 and
 # 1945-11-18, but the Austrian Federal Office of Metrology and
 # Surveying (BEV) gives 1918-09-16 and for Vienna gives the "alleged"
 # date of 1945-04-12 with no time.  For the 1980-04-06 transition
-# Shanks gives 02:00, the BEV 00:00.  Go with the BEV, and guess 02:00
-# for 1945-04-12.
+# Shanks & Pottenger give 02:00, the BEV 00:00.  Go with the BEV,
+# and guess 02:00 for 1945-04-12.
 
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Austria	1920	only	-	Apr	 5	2:00s	1:00	S
@@ -713,7 +715,7 @@ Zone	Europe/Brussels	0:17:30 -	LMT	1880
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Bulg	1979	only	-	Mar	31	23:00	1:00	S
 Rule	Bulg	1979	only	-	Oct	 1	 1:00	0	-
-Rule	Bulg	1980	1982	-	Apr	Sat<=7	23:00	1:00	S
+Rule	Bulg	1980	1982	-	Apr	Sat>=1	23:00	1:00	S
 Rule	Bulg	1980	only	-	Sep	29	 1:00	0	-
 Rule	Bulg	1981	only	-	Sep	27	 2:00	0	-
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
@@ -813,10 +815,10 @@ Zone Atlantic/Faeroe	-0:27:04 -	LMT	1908 Jan 11	# Torshavn
 # East Greenland and Franz Josef Land, but we don't know their time zones.
 # My source for this is Wilhelm Dege's book mentioned under Svalbard.
 #
-# From Paul Eggert (1996-11-22):
+# From Paul Eggert (2006-03-22):
 # Greenland joined the EU as part of Denmark, obtained home rule on 1979-05-01,
 # and left the EU on 1985-02-01.  It therefore should have been using EU
-# rules at least through 1984.  Shanks says Scoresbysund and Godthab
+# rules at least through 1984.  Shanks & Pottenger say Scoresbysund and Godthab
 # used C-Eur rules after 1980, but IATA SSIM (1991/1996) says they use EU
 # rules since at least 1991.  Assume EU rules since 1980.
 
@@ -871,17 +873,21 @@ Zone Atlantic/Faeroe	-0:27:04 -	LMT	1908 Jan 11	# Torshavn
 # I heard back from someone stationed at Thule; the time change took place
 # there at 2:00 AM.
 
-# From Paul Eggert (2001-11-19):
-# The 1997 CIA map shows Danmarkshavn on GMT; the 1995 map as like Godthab.
+# From Paul Eggert (2006-03-22):
+# From 1997 on the CIA map shows Danmarkshavn on GMT;
+# the 1995 map as like Godthab.
 # For lack of better info, assume they were like Godthab before 1996.
 # startkart.no says Thule does not observe DST, but this is clearly an error,
-# so go with Shanks for all Thule transitions.
+# so go with Shanks & Pottenger for Thule transitions until this year.
+# For 2007 on assume Thule will stay in sync with US DST rules.
 #
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Thule	1991	1992	-	Mar	lastSun	2:00	1:00	D
 Rule	Thule	1991	1992	-	Sep	lastSun	2:00	0	S
-Rule	Thule	1993	max	-	Apr	Sun>=1	2:00	1:00	D
-Rule	Thule	1993	max	-	Oct	lastSun	2:00	0	S
+Rule	Thule	1993	2006	-	Apr	Sun>=1	2:00	1:00	D
+Rule	Thule	1993	2006	-	Oct	lastSun	2:00	0	S
+Rule	Thule	2007	max	-	Mar	Sun>=8	2:00	1:00	D
+Rule	Thule	2007	max	-	Nov	Sun>=1	2:00	0	S
 #
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone America/Danmarkshavn -1:14:40 -	LMT	1916 Jul 28
@@ -963,13 +969,13 @@ Zone	Europe/Tallinn	1:39:00	-	LMT	1880
 
 # Finland
 #
-# From Hannu Strang (25 Sep 1994 06:03:37 UTC):
+# From Hannu Strang (1994-09-25 06:03:37 UTC):
 # Well, here in Helsinki we're just changing from summer time to regular one,
 # and it's supposed to change at 4am...
 #
-# From Paul Eggert (25 Sep 1994):
-# Shanks says Finland has switched at 02:00 standard time since 1981.
-# Go with Strang instead.
+# From Paul Eggert (2006-03-22):
+# Shanks & Pottenger say Finland has switched at 02:00 standard time
+# since 1981.  Go with Strang instead.
 #
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Finland	1942	only	-	Apr	3	0:00	1:00	S
@@ -999,7 +1005,7 @@ Link	Europe/Helsinki	Europe/Mariehamn
 
 
 #
-# Shanks seems to use `24:00' ambiguously; we resolve it with Whitman.
+# Shank & Pottenger seem to use `24:00' ambiguously; resolve it with Whitman.
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	France	1916	only	-	Jun	14	23:00s	1:00	S
 Rule	France	1916	1919	-	Oct	Sun>=1	23:00s	0	-
@@ -1013,7 +1019,7 @@ Rule	France	1921	only	-	Oct	25	23:00s	0	-
 Rule	France	1922	only	-	Mar	25	23:00s	1:00	S
 # DSH writes that a law of 1923-05-24 specified 3rd Sat in Apr at 23:00 to 1st
 # Sat in Oct at 24:00; and that in 1930, because of Easter, the transitions
-# were Apr 12 and Oct 5.  Go with Shanks.
+# were Apr 12 and Oct 5.  Go with Shanks & Pottenger.
 Rule	France	1922	1938	-	Oct	Sat>=1	23:00s	0	-
 Rule	France	1923	only	-	May	26	23:00s	1:00	S
 Rule	France	1924	only	-	Mar	29	23:00s	1:00	S
@@ -1034,8 +1040,8 @@ Rule	France	1938	only	-	Mar	26	23:00s	1:00	S
 Rule	France	1939	only	-	Apr	15	23:00s	1:00	S
 Rule	France	1939	only	-	Nov	18	23:00s	0	-
 Rule	France	1940	only	-	Feb	25	 2:00	1:00	S
-# The French rules for 1941-1944 were not used in Paris, but Shanks writes
-# that they were used in Monaco and in many French locations.
+# The French rules for 1941-1944 were not used in Paris, but Shanks & Pottenger
+# write that they were used in Monaco and in many French locations.
 # Le Corre writes that the upper limit of the free zone was Arneguy, Orthez,
 # Mont-de-Marsan, Bazas, Langon, Lamotte-Montravel, Marouil, La
 # Rochefoucault, Champagne-Mouton, La Roche-Posay, La Haye-Decartes,
@@ -1043,7 +1049,7 @@ Rule	France	1940	only	-	Feb	25	 2:00	1:00	S
 # Paray-le-Monial, Montceau-les-Mines, Chalons-sur-Saone, Arbois,
 # Dole, Morez, St-Claude, and Collognes (Haute-Savioe).
 Rule	France	1941	only	-	May	 5	 0:00	2:00	M # Midsummer
-# Shanks says this transition occurred at Oct 6 1:00,
+# Shanks & Pottenger say this transition occurred at Oct 6 1:00,
 # but go with Denis Excoffier (1997-12-12),
 # who quotes the Ephemerides Astronomiques for 1998 from Bureau des Longitudes
 # as saying 5/10/41 22hUT.
@@ -1056,21 +1062,21 @@ Rule	France	1944	only	-	Apr	 3	 2:00	2:00	M
 Rule	France	1944	only	-	Oct	 8	 1:00	1:00	S
 Rule	France	1945	only	-	Apr	 2	 2:00	2:00	M
 Rule	France	1945	only	-	Sep	16	 3:00	0	-
-# Shanks gives Mar 28 2:00 and Sep 26 3:00;
+# Shanks & Pottenger give Mar 28 2:00 and Sep 26 3:00;
 # go with Excoffier's 28/3/76 0hUT and 25/9/76 23hUT.
 Rule	France	1976	only	-	Mar	28	 1:00	1:00	S
 Rule	France	1976	only	-	Sep	26	 1:00	0	-
-# Shanks gives 0:09 for Paris Mean Time, and Whitman gives 0:09:05,
+# Shanks & Pottenger give 0:09:20 for Paris Mean Time, and Whitman 0:09:05,
 # but Howse quotes the actual French legislation as saying 0:09:21.
 # Go with Howse.  Howse writes that the time in France was officially based
 # on PMT-0:09:21 until 1978-08-09, when the time base finally switched to UTC.
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Europe/Paris	0:09:21 -	LMT	1891 Mar 15  0:01
 			0:09:21	-	PMT	1911 Mar 11  0:01  # Paris MT
-# Shanks gives 1940 Jun 14 0:00; go with Excoffier and Le Corre.
+# Shanks & Pottenger give 1940 Jun 14 0:00; go with Excoffier and Le Corre.
 			0:00	France	WE%sT	1940 Jun 14 23:00
 # Le Corre says Paris stuck with occupied-France time after the liberation;
-# go with Shanks.
+# go with Shanks & Pottenger.
 			1:00	C-Eur	CE%sT	1944 Aug 25
 			0:00	France	WE%sT	1945 Sep 16  3:00
 			1:00	France	CE%sT	1977
@@ -1121,23 +1127,23 @@ Zone	Europe/Berlin	0:53:28 -	LMT	1893 Apr
 
 # Gibraltar
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone Europe/Gibraltar	-0:21:24 -	LMT	1880 Aug  2
+Zone Europe/Gibraltar	-0:21:24 -	LMT	1880 Aug  2 0:00s
 			0:00	GB-Eire	%s	1957 Apr 14 2:00
 			1:00	-	CET	1982
 			1:00	EU	CE%sT
 
 # Greece
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-# Whitman gives 1932 Jul 5 - Nov 1; go with Shanks.
+# Whitman gives 1932 Jul 5 - Nov 1; go with Shanks & Pottenger.
 Rule	Greece	1932	only	-	Jul	 7	0:00	1:00	S
 Rule	Greece	1932	only	-	Sep	 1	0:00	0	-
-# Whitman gives 1941 Apr 25 - ?; go with Shanks.
+# Whitman gives 1941 Apr 25 - ?; go with Shanks & Pottenger.
 Rule	Greece	1941	only	-	Apr	 7	0:00	1:00	S
-# Whitman gives 1942 Feb 2 - ?; go with Shanks.
+# Whitman gives 1942 Feb 2 - ?; go with Shanks & Pottenger.
 Rule	Greece	1942	only	-	Nov	 2	3:00	0	-
 Rule	Greece	1943	only	-	Mar	30	0:00	1:00	S
 Rule	Greece	1943	only	-	Oct	 4	0:00	0	-
-# Whitman gives 1944 Oct 3 - Oct 31; go with Shanks.
+# Whitman gives 1944 Oct 3 - Oct 31; go with Shanks & Pottenger.
 Rule	Greece	1952	only	-	Jul	 1	0:00	1:00	S
 Rule	Greece	1952	only	-	Nov	 2	0:00	0	-
 Rule	Greece	1975	only	-	Apr	12	0:00s	1:00	S
@@ -1157,7 +1163,7 @@ Zone	Europe/Athens	1:34:52 -	LMT	1895 Sep 14
 			2:00	Greece	EE%sT	1941 Apr 30
 			1:00	Greece	CE%sT	1944 Apr  4
 			2:00	Greece	EE%sT	1981
-			# Shanks says they switched to C-Eur in 1981;
+			# Shanks & Pottenger say it switched to C-Eur in 1981;
 			# go with EU instead, since Greece joined it on Jan 1.
 			2:00	EU	EE%sT
 
@@ -1220,10 +1226,10 @@ Zone	Europe/Budapest	1:16:20 -	LMT	1890 Oct
 # might be a reference to the Julian calendar as opposed to Gregorian, or it
 # might mean something else (???).
 #
-# From Paul Eggert (1999-10-29):
-# The Iceland Almanak, Shanks and Whitman disagree on many points.
-# We go with the Almanak, except for one claim from Shanks, namely that
-# Reykavik was 21W57 from 1837 to 1908, local mean time before that.
+# From Paul Eggert (2006-03-22):
+# The Iceland Almanak, Shanks & Pottenger, and Whitman disagree on many points.
+# We go with the Almanak, except for one claim from Shanks & Pottenger, namely
+# that Reykavik was 21W57 from 1837 to 1908, local mean time before that.
 #
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Iceland	1917	1918	-	Feb	19	23:00	1:00	S
@@ -1261,15 +1267,16 @@ Zone Atlantic/Reykjavik	-1:27:24 -	LMT	1837
 # But these events all occurred before the 1970 cutoff,
 # so record only the time in Rome.
 #
-# From Paul Eggert (1996-05-06):
-# For Italian DST we have three sources: Shanks, Whitman, and F. Pollastri
+# From Paul Eggert (2006-03-22):
+# For Italian DST we have three sources: Shanks & Pottenger, Whitman, and
+# F. Pollastri
 # <a href="http://toi.iriti.cnr.it/uk/ienitlt.html">
-# Day-light Saving Time in Italy (1996-03-14)
+# Day-light Saving Time in Italy (2006-02-03)
 # </a>
 # (`FP' below), taken from an Italian National Electrotechnical Institute
 # publication. When the three sources disagree, guess who's right, as follows:
 #
-# year	FP	Shanks (S)	Whitman (W)	Go with:
+# year	FP	Shanks&P. (S)	Whitman (W)	Go with:
 # 1916	06-03	06-03 24:00	06-03 00:00	FP & W
 #	09-30	09-30 24:00	09-30 01:00	FP; guess 24:00s
 # 1917	04-01	03-31 24:00	03-31 00:00	FP & S
@@ -1325,7 +1332,7 @@ Rule	Italy	1978	only	-	Oct	 1	0:00s	0	-
 Rule	Italy	1979	only	-	Sep	30	0:00s	0	-
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Europe/Rome	0:49:56 -	LMT	1866 Sep 22
-			0:49:56	-	RMT	1893 Nov	# Rome Mean Time
+			0:49:56	-	RMT	1893 Nov  1 0:00s # Rome Mean
 			1:00	Italy	CE%sT	1942 Nov  2 2:00s
 			1:00	C-Eur	CE%sT	1944 Jul
 			1:00	Italy	CE%sT	1980
@@ -1467,7 +1474,8 @@ Zone	Europe/Vilnius	1:41:16	-	LMT	1880
 			2:00	EU	EE%sT
 
 # Luxembourg
-# Whitman disagrees with most of these dates in minor ways; go with Shanks.
+# Whitman disagrees with most of these dates in minor ways;
+# go with Shanks & Pottenger.
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Lux	1916	only	-	May	14	23:00	1:00	S
 Rule	Lux	1916	only	-	Oct	 1	 1:00	0	-
@@ -1514,7 +1522,7 @@ Rule	Malta	1975	1979	-	Apr	Sun>=15	2:00	1:00	S
 Rule	Malta	1975	1980	-	Sep	Sun>=15	2:00	0	-
 Rule	Malta	1980	only	-	Mar	31	2:00	1:00	S
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Malta	0:58:04 -	LMT	1893 Nov  2	# Valletta
+Zone	Europe/Malta	0:58:04 -	LMT	1893 Nov  2 0:00s # Valletta
 			1:00	Italy	CE%sT	1942 Nov  2 2:00s
 			1:00	C-Eur	CE%sT	1945 Apr  2 2:00s
 			1:00	Italy	CE%sT	1973 Mar 31
@@ -1523,9 +1531,9 @@ Zone	Europe/Malta	0:58:04 -	LMT	1893 Nov  2	# Valletta
 
 # Moldova
 
-# From Paul Eggert (2001-02-11):
-# A previous version of this database followed Shanks, who writes that
-# Tiraspol switched to Moscow time on 1992-01-19 at 02:00.
+# From Paul Eggert (2006-03-22):
+# A previous version of this database followed Shanks & Pottenger, who write
+# that Tiraspol switched to Moscow time on 1992-01-19 at 02:00.
 # However, this is most likely an error, as Moldova declared independence
 # on 1991-08-27 (the 1992-01-19 date is that of a Russian decree).
 # In early 1992 there was large-scale interethnic violence in the area
@@ -1550,7 +1558,8 @@ Zone	Europe/Chisinau	1:55:20 -	LMT	1880
 			2:00	EU	EE%sT
 
 # Monaco
-# Shanks gives 0:09 for Paris Mean Time; go with Howse's more precise 0:09:21.
+# Shanks & Pottenger give 0:09:20 for Paris Mean Time; go with Howse's
+# more precise 0:09:21.
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Europe/Monaco	0:29:32 -	LMT	1891 Mar 15
 			0:09:21	-	PMT	1911 Mar 11    # Paris Mean Time
@@ -1633,7 +1642,8 @@ Zone Europe/Amsterdam	0:19:32 -	LMT	1835
 			1:00	EU	CE%sT
 
 # Norway
-# http://met.no/met/met_lex/q_u/sommertid.html (2004-01) agrees with Shanks.
+# http://met.no/met/met_lex/q_u/sommertid.html (2004-01) agrees with Shanks &
+# Pottenger.
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Norway	1916	only	-	May	22	1:00	1:00	S
 Rule	Norway	1916	only	-	Sep	30	0:00	0	-
@@ -1704,9 +1714,10 @@ Link	Europe/Oslo	Atlantic/Jan_Mayen
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Poland	1918	1919	-	Sep	16	2:00s	0	-
 Rule	Poland	1919	only	-	Apr	15	2:00s	1:00	S
-# Whitman gives 1944 Nov 30; go with Shanks.
+Rule	Poland	1944	only	-	Apr	 3	2:00s	1:00	S
+# Whitman gives 1944 Nov 30; go with Shanks & Pottenger.
 Rule	Poland	1944	only	-	Oct	 4	2:00	0	-
-# For 1944-1948 Whitman gives the previous day; go with Shanks.
+# For 1944-1948 Whitman gives the previous day; go with Shanks & Pottenger.
 Rule	Poland	1945	only	-	Apr	29	0:00	1:00	S
 Rule	Poland	1945	only	-	Nov	 1	0:00	0	-
 # For 1946 on the source is Kazimierz Borkowski,
@@ -1762,9 +1773,9 @@ Zone	Europe/Warsaw	1:24:00 -	LMT	1880
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 # DSH writes that despite Decree 1,469 (1915), the change to the clocks was not
 # done every year, depending on what Spain did, because of railroad schedules.
-# Go with Shanks.
+# Go with Shanks & Pottenger.
 Rule	Port	1916	only	-	Jun	17	23:00	1:00	S
-# Whitman gives 1916 Oct 31; go with Shanks.
+# Whitman gives 1916 Oct 31; go with Shanks & Pottenger.
 Rule	Port	1916	only	-	Nov	 1	 1:00	0	-
 Rule	Port	1917	only	-	Feb	28	23:00s	1:00	S
 Rule	Port	1917	1921	-	Oct	14	23:00s	0	-
@@ -1780,24 +1791,23 @@ Rule	Port	1927	only	-	Apr	 9	23:00s	1:00	S
 Rule	Port	1928	only	-	Apr	14	23:00s	1:00	S
 Rule	Port	1929	only	-	Apr	20	23:00s	1:00	S
 Rule	Port	1931	only	-	Apr	18	23:00s	1:00	S
-# Whitman gives 1931 Oct 8; go with Shanks.
+# Whitman gives 1931 Oct 8; go with Shanks & Pottenger.
 Rule	Port	1931	1932	-	Oct	Sat>=1	23:00s	0	-
 Rule	Port	1932	only	-	Apr	 2	23:00s	1:00	S
-# Shanks gives 1934 Apr 4; go with Whitman.
 Rule	Port	1934	only	-	Apr	 7	23:00s	1:00	S
-# Whitman gives 1934 Oct 5; go with Shanks.
+# Whitman gives 1934 Oct 5; go with Shanks & Pottenger.
 Rule	Port	1934	1938	-	Oct	Sat>=1	23:00s	0	-
-# Shanks gives 1935 Apr 30; go with Whitman.
+# Shanks & Pottenger give 1935 Apr 30; go with Whitman.
 Rule	Port	1935	only	-	Mar	30	23:00s	1:00	S
 Rule	Port	1936	only	-	Apr	18	23:00s	1:00	S
-# Whitman gives 1937 Apr 2; go with Shanks.
+# Whitman gives 1937 Apr 2; go with Shanks & Pottenger.
 Rule	Port	1937	only	-	Apr	 3	23:00s	1:00	S
 Rule	Port	1938	only	-	Mar	26	23:00s	1:00	S
 Rule	Port	1939	only	-	Apr	15	23:00s	1:00	S
-# Whitman gives 1939 Oct 7; go with Shanks.
+# Whitman gives 1939 Oct 7; go with Shanks & Pottenger.
 Rule	Port	1939	only	-	Nov	18	23:00s	0	-
 Rule	Port	1940	only	-	Feb	24	23:00s	1:00	S
-# Shanks gives 1940 Oct 7; go with Whitman.
+# Shanks & Pottenger give 1940 Oct 7; go with Whitman.
 Rule	Port	1940	1941	-	Oct	 5	23:00s	0	-
 Rule	Port	1941	only	-	Apr	 5	23:00s	1:00	S
 Rule	Port	1942	1945	-	Mar	Sat>=8	23:00s	1:00	S
@@ -1811,8 +1821,8 @@ Rule	Port	1946	only	-	Apr	Sat>=1	23:00s	1:00	S
 Rule	Port	1946	only	-	Oct	Sat>=1	23:00s	0	-
 Rule	Port	1947	1949	-	Apr	Sun>=1	 2:00s	1:00	S
 Rule	Port	1947	1949	-	Oct	Sun>=1	 2:00s	0	-
-# Shanks says DST was observed in 1950; go with Whitman.
-# Whitman gives Oct lastSun for 1952 on; go with Shanks.
+# Shanks & Pottenger say DST was observed in 1950; go with Whitman.
+# Whitman gives Oct lastSun for 1952 on; go with Shanks & Pottenger.
 Rule	Port	1951	1965	-	Apr	Sun>=1	 2:00s	1:00	S
 Rule	Port	1951	1965	-	Oct	Sun>=1	 2:00s	0	-
 Rule	Port	1977	only	-	Mar	27	 0:00s	1:00	S
@@ -1824,7 +1834,7 @@ Rule	Port	1980	only	-	Mar	lastSun	 0:00s	1:00	S
 Rule	Port	1981	1982	-	Mar	lastSun	 1:00s	1:00	S
 Rule	Port	1983	only	-	Mar	lastSun	 2:00s	1:00	S
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-# Shanks says that the transition from LMT to WET occurred 1911-05-24;
+# Shanks & Pottenger say the transition from LMT to WET occurred 1911-05-24;
 # Willett says 1912-01-01.  Go with Willett.
 Zone	Europe/Lisbon	-0:36:32 -	LMT	1884
 			-0:36:32 -	LMT	1912 Jan  1  # Lisbon Mean Time
@@ -1877,11 +1887,12 @@ Zone Europe/Bucharest	1:44:24 -	LMT	1891 Oct
 
 # Russia
 
-# From Paul Eggert (1999-11-12):
+# From Paul Eggert (2006-03-22):
 # Except for Moscow after 1919-07-01, I invented the time zone abbreviations.
 # Moscow time zone abbreviations after 1919-07-01, and Moscow rules after 1991,
-# are from Andrey A. Chernov.  The rest is from Shanks, except we follow
-# Chernov's report that 1992 DST transitions were Sat 23:00, not Sun 02:00s.
+# are from Andrey A. Chernov.  The rest is from Shanks & Pottenger,
+# except we follow Chernov's report that 1992 DST transitions were Sat
+# 23:00, not Sun 02:00s.
 #
 # From Stanislaw A. Kuzikowski (1994-06-29):
 # But now it is some months since Novosibirsk is 3 hours ahead of Moscow!
@@ -1989,7 +2000,7 @@ Zone Asia/Novosibirsk	 5:31:40 -	LMT	1919 Dec 14 6:00
 			 6:00	-	NOVT	1930 Jun 21 # Novosibirsk Time
 			 7:00	Russia	NOV%sT	1991 Mar 31 2:00s
 			 6:00	Russia	NOV%sT	1992 Jan 19 2:00s
-			 7:00	Russia	NOV%sT	1993 May 23 # says Shanks
+			 7:00	Russia	NOV%sT	1993 May 23 # say Shanks & P.
 			 6:00	Russia	NOV%sT
 #
 # From Oscar van Vlijmen (2001-08-25): [This region consists of]
@@ -2085,7 +2096,7 @@ Zone	Europe/Belgrade	1:22:00	-	LMT	1884
 			1:00	1:00	CEST	1945 Sep 16  2:00s
 # Metod Kozelj reports that the legal date of
 # transition to EU rules was 1982-11-27, for all of Yugoslavia at the time.
-# Shanks doesn't give as much detail, so go with Kozelj.
+# Shanks & Pottenger don't give as much detail, so go with Kozelj.
 			1:00	-	CET	1982 Nov 27
 			1:00	EU	CE%sT
 Link Europe/Belgrade Europe/Ljubljana	# Slovenia
@@ -2101,28 +2112,30 @@ Link Europe/Prague Europe/Bratislava
 
 # Spain
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-# For 1917-1919 Whitman gives Apr Sat>=1 - Oct Sat>=1; go with Shanks.
+# For 1917-1919 Whitman gives Apr Sat>=1 - Oct Sat>=1;
+# go with Shanks & Pottenger.
 Rule	Spain	1917	only	-	May	 5	23:00s	1:00	S
 Rule	Spain	1917	1919	-	Oct	 6	23:00s	0	-
 Rule	Spain	1918	only	-	Apr	15	23:00s	1:00	S
 Rule	Spain	1919	only	-	Apr	 5	23:00s	1:00	S
-# Whitman gives 1921 Feb 28 - Oct 14; go with Shanks.
+# Whitman gives 1921 Feb 28 - Oct 14; go with Shanks & Pottenger.
 Rule	Spain	1924	only	-	Apr	16	23:00s	1:00	S
-# Whitman gives 1924 Oct 14; go with Shanks.
+# Whitman gives 1924 Oct 14; go with Shanks & Pottenger.
 Rule	Spain	1924	only	-	Oct	 4	23:00s	0	-
 Rule	Spain	1926	only	-	Apr	17	23:00s	1:00	S
-# Whitman says no DST in 1929; go with Shanks.
+# Whitman says no DST in 1929; go with Shanks & Pottenger.
 Rule	Spain	1926	1929	-	Oct	Sat>=1	23:00s	0	-
 Rule	Spain	1927	only	-	Apr	 9	23:00s	1:00	S
 Rule	Spain	1928	only	-	Apr	14	23:00s	1:00	S
 Rule	Spain	1929	only	-	Apr	20	23:00s	1:00	S
-# Whitman gives 1937 Jun 16, 1938 Apr 16, 1940 Apr 13; go with Shanks.
+# Whitman gives 1937 Jun 16, 1938 Apr 16, 1940 Apr 13;
+# go with Shanks & Pottenger.
 Rule	Spain	1937	only	-	May	22	23:00s	1:00	S
 Rule	Spain	1937	1939	-	Oct	Sat>=1	23:00s	0	-
 Rule	Spain	1938	only	-	Mar	22	23:00s	1:00	S
 Rule	Spain	1939	only	-	Apr	15	23:00s	1:00	S
 Rule	Spain	1940	only	-	Mar	16	23:00s	1:00	S
-# Whitman says no DST 1942-1945; go with Shanks.
+# Whitman says no DST 1942-1945; go with Shanks & Pottenger.
 Rule	Spain	1942	only	-	May	 2	22:00s	2:00	M # Midsummer
 Rule	Spain	1942	only	-	Sep	 1	22:00s	1:00	S
 Rule	Spain	1943	1946	-	Apr	Sat>=13	22:00s	2:00	M
@@ -2149,7 +2162,7 @@ Rule SpainAfrica 1977	only	-	Sep	28	 0:00	0	-
 Rule SpainAfrica 1978	only	-	Jun	 1	 0:00	1:00	S
 Rule SpainAfrica 1978	only	-	Aug	 4	 0:00	0	-
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Europe/Madrid	-0:14:44 -	LMT	1901
+Zone	Europe/Madrid	-0:14:44 -	LMT	1901 Jan  1  0:00s
 			 0:00	Spain	WE%sT	1946 Sep 30
 			 1:00	Spain	CE%sT	1979
 			 1:00	EU	CE%sT
@@ -2171,7 +2184,7 @@ Zone	Atlantic/Canary	-1:01:36 -	LMT	1922 Mar # Las Palmas de Gran C.
 
 # Sweden
 
-# From Ivan Nilsson (2001-04-13), superseding Shanks:
+# From Ivan Nilsson (2001-04-13), superseding Shanks & Pottenger:
 #
 # The law "Svensk forfattningssamling 1878, no 14" about standard time in 1879:
 # From the beginning of 1879 (that is 01-01 00:00) the time for all
@@ -2232,7 +2245,7 @@ Zone Europe/Stockholm	1:12:12 -	LMT	1879 Jan  1
 # From Whitman (who writes ``Midnight?''):
 Rule	Swiss	1940	only	-	Nov	 2	0:00	1:00	S
 Rule	Swiss	1940	only	-	Dec	31	0:00	0	-
-# From Shanks:
+# From Shanks & Pottenger:
 Rule	Swiss	1941	1942	-	May	Sun>=1	2:00	1:00	S
 Rule	Swiss	1941	1942	-	Oct	Sun>=1	0:00	0	-
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
@@ -2251,7 +2264,8 @@ Rule	Turkey	1921	only	-	Apr	 3	0:00	1:00	S
 Rule	Turkey	1921	only	-	Oct	 3	0:00	0	-
 Rule	Turkey	1922	only	-	Mar	26	0:00	1:00	S
 Rule	Turkey	1922	only	-	Oct	 8	0:00	0	-
-# Whitman gives 1923 Apr 28 - Sep 16 and no DST in 1924-1925; go with Shanks.
+# Whitman gives 1923 Apr 28 - Sep 16 and no DST in 1924-1925;
+# go with Shanks & Pottenger.
 Rule	Turkey	1924	only	-	May	13	0:00	1:00	S
 Rule	Turkey	1924	1925	-	Oct	 1	0:00	0	-
 Rule	Turkey	1925	only	-	May	 1	0:00	1:00	S
@@ -2260,7 +2274,8 @@ Rule	Turkey	1940	only	-	Oct	 5	0:00	0	-
 Rule	Turkey	1940	only	-	Dec	 1	0:00	1:00	S
 Rule	Turkey	1941	only	-	Sep	21	0:00	0	-
 Rule	Turkey	1942	only	-	Apr	 1	0:00	1:00	S
-# Whitman omits the next two transition and gives 1945 Oct 1; go with Shanks.
+# Whitman omits the next two transition and gives 1945 Oct 1;
+# go with Shanks & Pottenger.
 Rule	Turkey	1942	only	-	Nov	 1	0:00	0	-
 Rule	Turkey	1945	only	-	Apr	 2	0:00	1:00	S
 Rule	Turkey	1945	only	-	Oct	 8	0:00	0	-
@@ -2357,11 +2372,13 @@ Zone Europe/Simferopol	2:16:24 -	LMT	1880
 			3:00	Russia	MSK/MSD	1990
 			3:00	-	MSK	1990 Jul  1 2:00
 			2:00	-	EET	1992
-# From Paul Eggert (1999-11-12):
+# From Paul Eggert (2006-03-22):
 # The _Economist_ (1994-05-28, p 45) reports that central Crimea switched
 # from Kiev to Moscow time sometime after the January 1994 elections.
-# Shanks says ``date of change uncertain'', but implies that it happened
-# sometime between the 1994 DST switches.  For now, guess it changed in May.
+# Shanks (1999) says ``date of change uncertain'', but implies that it happened
+# sometime between the 1994 DST switches.  Shanks & Pottenger simply say
+# 1994-09-25 03:00, but that can't be right.  For now, guess it
+# changed in May.
 			2:00	E-Eur	EE%sT	1994 May
 # From IATA SSIM (1994/1997), which also says that Kerch is still like Kiev.
 			3:00	E-Eur	MSK/MSD	1996 Mar 31 3:00s
diff --git a/JodaTime/src/java/org/joda/time/tz/src/northamerica b/JodaTime/src/java/org/joda/time/tz/src/northamerica
index 13a2ec2fa..e8a4e4c30 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/northamerica
+++ b/JodaTime/src/java/org/joda/time/tz/src/northamerica
@@ -1,4 +1,4 @@
-# @(#)northamerica	7.88
+# @(#)northamerica	8.3
 # <pre>
 
 # also includes Central America and the Caribbean
@@ -30,12 +30,12 @@
 # That 1883 transition occurred at 12:00 new time, not at 12:00 old time.
 # See p 46 of David Prerau, Seize the daylight, Thunder's Mouth Press (2005).
 
-# From Paul Eggert (1995-12-19):
+# From Paul Eggert (2006-03-22):
 # A good source for time zone historical data in the US is
 # Thomas G. Shanks, The American Atlas (5th edition),
 # San Diego: ACS Publications, Inc. (1991).
 # Make sure you have the errata sheet; the book is somewhat useless without it.
-# It is the source for most of the pre-1991 US and Puerto Rico entries below.
+# It is the source for most of the pre-1991 US entries below.
 
 # From Paul Eggert (2001-03-06):
 # Daylight Saving Time was first suggested as a joke by Benjamin Franklin
@@ -229,7 +229,7 @@ Zone	PST8PDT		 -8:00	US	P%sT
 # Public law 106-564 (2000-12-23) introduced the abbreviation
 # "Chamorro Standard Time" for time in Guam and the Northern Marianas.
 # See the file "australasia".
- 
+
 # From Arthur David Olson, 2005-08-09
 # The following was signed into law on 2005-08-08.
 #
@@ -274,7 +274,7 @@ Zone	PST8PDT		 -8:00	US	P%sT
 # set their watches and clocks on Eastern time."  It quotes H.H. "Bubba"
 # Roberts, city administrator in Phenix City. as saying "We are in the Central
 # time zone, but we do go by the Eastern time zone because so many people work
-# in Columbus." 
+# in Columbus."
 
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
 Rule	NYC	1920	only	-	Mar	lastSun	2:00	1:00	D
@@ -321,14 +321,16 @@ Zone America/Chicago	-5:50:36 -	LMT	1883 Nov 18 12:09:24
 Zone America/North_Dakota/Center -6:45:12 - LMT	1883 Nov 18 12:14:48
 			-7:00	US	M%sT	1992 Oct 25 02:00
 			-6:00	US	C%sT
-# From Paul Eggert (2006-01-20):
-# The following is not implemented yet.
-# What is the most populous city in that area?
-# From http://www.statoids.com/tus.html (2006-01-20):
-# 2003-10-26 02:00: All of Morton County, ND, and the part of Sioux
-# County, ND east of ND route 31 moved from MT to CT.  (The area
-# around Fort Yates in Sioux County and the area around Mandan in
-# Morton County were already in CT.)
+# Morton County, ND, switched from mountain to central time on
+# 2003-10-26, except for the area around Mandan.
+# See <http://dmses.dot.gov/docimages/p63/135818.pdf>.
+# Officially this switch also included part of Sioux County, and
+# Jones, Mellette, and Todd Counties in South Dakota;
+# but in practice these other counties were already observing central time.
+# See <http://www.epa.gov/fedrgstr/EPA-IMPACT/2003/October/Day-28/i27056.htm>.
+Zone America/North_Dakota/New_Salem -6:45:39 - LMT 1883 Nov 18 12:14:21
+			-7:00	US	M%sT	2003 Oct 26 02:00
+			-6:00	US	C%sT
 
 # US mountain time, represented by Denver
 #
@@ -407,7 +409,8 @@ Zone America/Yakutat	 14:41:05 -	LMT	1867 Oct 18
 Zone America/Anchorage	 14:00:24 -	LMT	1867 Oct 18
 			 -9:59:36 -	LMT	1900 Aug 20 12:00
 			-10:00	-	CAT	1942
-			-10:00	US	CAT/CAWT 1946
+			-10:00	US	CAT/CAWT 1945 Aug 14 23:00u
+			-10:00	US	CAT/CAPT 1946 # Peace
 			-10:00	-	CAT	1967 Apr
 			-10:00	-	AHST	1969
 			-10:00	US	AH%sT	1983 Oct 30 2:00
@@ -527,9 +530,9 @@ Zone America/Boise	-7:44:49 -	LMT	1883 Nov 18 12:15:11
 # For a map of Indiana's time zone regions, see:
 # <a href="http://www.mccsc.edu/time.html">
 # What time is it in Indiana?
-# </a> (2005-10-30)
+# </a> (2006-03-01)
 #
-# From Paul Eggert (2006-01-20):
+# From Paul Eggert (2006-03-22):
 # Since 1970, most of Indiana has been like America/Indiana/Indianapolis,
 # with the following exceptions:
 #
@@ -541,14 +544,23 @@ Zone America/Boise	-7:44:49 -	LMT	1883 Nov 18 12:15:11
 # - Clark, Floyd, and Harrison counties have been like
 #   America/Kentucky/Louisville.
 #
-# - Daviess, Dubois, Knox, Martin, Perry, and Pulaski counties
+# - Daviess, Dubois, Knox, and Perry counties
 #   have been like America/Indiana/Vincennes.
 #
+# - Officially, Martin and Pulaski counties have also been like
+#   America/Indiana/Vincennes, but an AP article on Pulaski county
+#   <http://www.indystar.com/apps/pbcs.dll/article?AID=/20060207/NEWS01/602070408/1006>
+#   (2006-02-07) and an InsideINdianaBusiness.com report on Martin county
+#   <http://www.insideindianabusiness.com/newsitem.asp?ID=17202> (2006-03-15)
+#   say that the county commissioners have voted to stay on eastern time in
+#   2006, which means they are actually like America/Indiana/Indianopolis.
+#
 # - Crawford, Pike, Starke, and Switzerland counties have their own time zone
 #   histories as noted below.
 #
 # Shanks partitioned Indiana into 345 regions, each with its own time history,
 # and wrote ``Even newspaper reports present contradictory information.''
+# Those Hoosiers!  Such a flighty and changeable people!
 # Fortunately, most of the complexity occurred before our cutoff date of 1970.
 #
 # Other than Indianapolis, the Indiana place names are so nondescript
@@ -558,8 +570,10 @@ Zone America/Boise	-7:44:49 -	LMT	1883 Nov 18 12:15:11
 # From Paul Eggert (2005-08-16):
 # http://www.mccsc.edu/time.html says that Indiana will use DST starting 2006.
 
+# From Nathan Stratton Treadway (2006-03-30):
+# http://www.dot.gov/affairs/dot0406.htm [3705 B]
 # From Deborah Goldsmith (2006-01-18):
-# http://dmses.dot.gov/docimages/pdf95/382329_web.pdf
+# http://dmses.dot.gov/docimages/pdf95/382329_web.pdf [2.9 MB]
 # From Paul Eggert (2006-01-20):
 # It says "DOT is relocating the time zone boundary in Indiana to move Starke,
 # Pulaski, Knox, Daviess, Martin, Pike, Dubois, and Perry Counties from the
@@ -605,7 +619,7 @@ Zone America/Indiana/Marengo -5:45:23 -	LMT	1883 Nov 18 12:14:37
 			-5:00	-	EST	2006
 			-5:00	US	E%sT
 #
-# Daviess, Dubois, Knox, Martin, Perry, and Pulaski Counties, Indiana,
+# Daviess, Dubois, Knox, and Perry Counties, Indiana,
 # switched from eastern to central time in April 2006.
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
 Rule Vincennes	1946	only	-	Apr	lastSun	2:00	1:00	D
@@ -625,7 +639,7 @@ Zone America/Indiana/Vincennes -5:50:07 - LMT	1883 Nov 18 12:09:53
 			-5:00	US	E%sT	1971
 			-5:00	-	EST	2006 Apr  2 2:00
 			-6:00	US	C%sT
-# 
+#
 # Pike County, Indiana moved from central to eastern time in 1977,
 # then switched back in 2006.
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
@@ -818,10 +832,10 @@ Zone America/Menominee	-5:50:27 -	LMT	1885 Sep 18 12:00
 ################################################################################
 
 
-# From Paul Eggert (1999-10-29):
-# A good source for time zone historical data outside the US is
-# Thomas G. Shanks, The International Atlas (5th edition),
-# San Diego: ACS Publications, Inc. (1999).
+# From Paul Eggert (2006-03-22):
+# A good source for time zone historical data outside the U.S. is
+# Thomas G. Shanks and Rique Pottenger, The International Atlas (6th edition),
+# San Diego: ACS Publications, Inc. (2003).
 #
 # Gwillim Law writes that a good source
 # for recent time zone data is the International Air Transport
@@ -829,8 +843,8 @@ Zone America/Menominee	-5:50:27 -	LMT	1885 Sep 18 12:00
 # published semiannually.  Law sent in several helpful summaries
 # of the IATA's data after 1990.
 #
-# Except where otherwise noted, Shanks is the source for entries through 1990,
-# and IATA SSIM is the source for entries after 1990.
+# Except where otherwise noted, Shanks & Pottenger is the source for
+# entries through 1990, and IATA SSIM is the source for entries afterwards.
 #
 # Other sources occasionally used include:
 #
@@ -878,9 +892,10 @@ Zone America/Menominee	-5:50:27 -	LMT	1885 Sep 18 12:00
 # From Paul Eggert (1994-11-22):
 # Alas, this sort of thing must be handled by localization software.
 
-# Unless otherwise specified, the data for Canada are all from Shanks.
+# Unless otherwise specified, the data for Canada are all from Shanks
+# & Pottenger.
 
-# From Paul Eggert (2005-12-21):
+# From Paul Eggert (2006-03-22):
 # H. David Matthews and Mary Vincent's map
 # <a href="http://www.canadiangeographic.ca/Magazine/SO98/geomap.asp">
 # "It's about TIME", _Canadian Geographic_ (September-October 1998)
@@ -899,17 +914,18 @@ Zone America/Menominee	-5:50:27 -	LMT	1885 Sep 18 12:00
 # CBC news also reported that Prince Edward Island is the first
 # province in Atlantic Canada to follow the US change, and that Quebec
 # had agreed; see <http://www.cbc.ca/pei/story/pe_daylight_20051207.html>
-# (2005-12-07).
+# (2005-12-07).  It also reported that Alberta will fall into line; see
+# <http://www.cbc.ca/calgary/story/ca_daylight20060202.html> (2006-02-02).
 #
-# To reflect all this, the Canada and Winn rules have been adjusted to
-# agree with the 2007 US change.  This means we assume most of Canada
-# will fall into line.  However, Alberta, British Columbia,
+# To reflect all this, the Canada, Edm, and Winn rules have been
+# adjusted to agree with the 2007 US change.  This means we assume
+# most of Canada will fall into line.  However, British Columbia,
 # Newfoundland, Northwest Territories, and Yukon already have separate
 # rules in our database, so for now we'll leave them alone, which
 # means that we currently assume these regions will not change their
 # rules and will disagree with the US starting in 2007.  This
 # assumption is probably incorrect, with the possible exception of
-# Newfoundland.  We plan to adjust the Edm, Vanc, StJohns, and NT_YK
+# Newfoundland.  We plan to adjust the Vanc, StJohns, and NT_YK
 # rules as the corresponding provinces make their announcements.
 
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
@@ -936,20 +952,21 @@ Rule	Canada	2007	max	-	Nov	Sun>=1	2:00	0	S
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	StJohns	1917	only	-	Apr	 8	2:00	1:00	D
 Rule	StJohns	1917	only	-	Sep	17	2:00	0	S
-# Whitman gives 1919 Apr 5 and 1920 Apr 5; go with Shanks.
+# Whitman gives 1919 Apr 5 and 1920 Apr 5; go with Shanks & Pottenger.
 Rule	StJohns	1919	only	-	May	 5	23:00	1:00	D
 Rule	StJohns	1919	only	-	Aug	12	23:00	0	S
-# For 1931-1935 Whitman gives Apr same date; go with Shanks.
+# For 1931-1935 Whitman gives Apr same date; go with Shanks & Pottenger.
 Rule	StJohns	1920	1935	-	May	Sun>=1	23:00	1:00	D
 Rule	StJohns	1920	1935	-	Oct	lastSun	23:00	0	S
-# For 1936-1941 Whitman gives May Sun>=8 and Oct Sun>=1; go with Shanks.
+# For 1936-1941 Whitman gives May Sun>=8 and Oct Sun>=1; go with Shanks &
+# Pottenger.
 Rule	StJohns	1936	1941	-	May	Mon>=9	0:00	1:00	D
 Rule	StJohns	1936	1941	-	Oct	Mon>=2	0:00	0	S
 # Whitman gives the following transitions:
 # 1942 03-01/12-31, 1943 05-30/09-05, 1944 07-10/09-02, 1945 01-01/10-07
-# but go with Shanks and assume they used Canadian rules.
+# but go with Shanks & Pottenger and assume they used Canadian rules.
 # For 1946-9 Whitman gives May 5,4,9,1 - Oct 1,5,3,2, and for 1950 he gives
-# Apr 30 - Sep 24; go with Shanks.
+# Apr 30 - Sep 24; go with Shanks & Pottenger.
 Rule	StJohns	1946	1950	-	May	Sun>=8	2:00	1:00	D
 Rule	StJohns	1946	1950	-	Oct	Sun>=2	2:00	0	S
 Rule	StJohns	1951	1986	-	Apr	lastSun	2:00	1:00	D
@@ -989,12 +1006,13 @@ Zone America/Goose_Bay	-4:01:40 -	LMT	1884 # Happy Valley-Goose Bay
 
 # west Labrador, Nova Scotia, Prince Edward I
 
-# From Paul Eggert (1996-06-12):
-# Shanks writes that since 1970 most of this region has been like Halifax.
-# Many locales did not observe peacetime DST until 1972;
+# From Paul Eggert (2006-03-22):
+# Shanks & Pottenger write that since 1970 most of this region has been like
+# Halifax.  Many locales did not observe peacetime DST until 1972;
 # Glace Bay, NS is the largest that we know of.
-# Shanks also writes that Liverpool, NS was the only town in Canada to observe
-# DST in 1971 but not 1970; for now we'll assume this is a typo.
+# Shanks & Pottenger also write that Liverpool, NS was the only town
+# in Canada to observe DST in 1971 but not 1970; for now we'll assume
+# this is a typo.
 
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Halifax	1916	only	-	Apr	 1	0:00	1:00	D
@@ -1076,7 +1094,7 @@ Rule	Moncton	1940	only	-	May	19	1:00	1:00	D
 Rule	Moncton	1941	only	-	May	 4	1:00	1:00	D
 Rule	Moncton	1946	1972	-	Apr	lastSun	2:00	1:00	D
 Rule	Moncton	1946	1956	-	Sep	lastSun	2:00	0	S
-Rule	Moncton	1956	1972	-	Oct	lastSun	2:00	0	S
+Rule	Moncton	1957	1972	-	Oct	lastSun	2:00	0	S
 Rule	Moncton	1993	2006	-	Apr	Sun>=1	0:01	1:00	D
 Rule	Moncton	1993	2006	-	Oct	lastSun	0:01	0	S
 Rule	Moncton	2007	max	-	Mar	Sun>=8	0:01	1:00	D
@@ -1093,9 +1111,9 @@ Zone America/Moncton	-4:19:08 -	LMT	1883 Dec  9
 
 # Ontario, Quebec
 
-# From Paul Eggert (1996-06-12):
-# Shanks writes that since 1970 most of Ontario has been like Toronto,
-# and most of Quebec has been like Montreal.
+# From Paul Eggert (2006-03-22):
+# Shanks & Pottenger writes that since 1970 most of Ontario has been like
+# Toronto, and most of Quebec has been like Montreal.
 # Thunder Bay skipped DST in 1973.
 # Many smaller locales did not observe peacetime DST until 1974;
 # Nipigon (EST) and Rainy River (CST) are the largest that we know of.
@@ -1125,7 +1143,9 @@ Zone America/Moncton	-4:19:08 -	LMT	1883 Dec  9
 # says that Ontario east of 90W uses EST/EDT, and west of 90W uses CST/CDT.
 # Officially Atikokan is therefore on CST/CDT, and most likely this report
 # concerns a non-official time observed as a matter of local practice.
-# For what it's worth, Shanks says that Atikokan has agreed with
+#
+# From Paul Eggert (2006-03-22):
+# For what it's worth, Shanks & Pottenger say that Atikokan has agreed with
 # Rainy River ever since standard time was introduced.
 
 # From Paul Eggert (2000-10-02):
@@ -1176,7 +1196,8 @@ Rule	Toronto	1920	only	-	Sep	26	0:00	0	S
 Rule	Toronto	1921	only	-	May	15	2:00	1:00	D
 Rule	Toronto	1921	only	-	Sep	15	2:00	0	S
 Rule	Toronto	1922	1923	-	May	Sun>=8	2:00	1:00	D
-# Shanks says 1923-09-19; assume it's a typo and that "-16" was meant.
+# Shanks & Pottenger say 1923-09-19; assume it's a typo and that "-16"
+# was meant.
 Rule	Toronto	1922	1926	-	Sep	Sun>=15	2:00	0	S
 Rule	Toronto	1924	1927	-	May	Sun>=1	2:00	1:00	D
 # The 1927-to-1939 rules can be expressed more simply as
@@ -1200,9 +1221,10 @@ Rule	Toronto	1949	only	-	Nov	lastSun	0:00	0	S
 Rule	Toronto	1950	1973	-	Apr	lastSun	2:00	1:00	D
 Rule	Toronto	1950	only	-	Nov	lastSun	2:00	0	S
 Rule	Toronto	1951	1956	-	Sep	lastSun	2:00	0	S
-# Shanks says Toronto ended DST a week early in 1971, namely on 1971-10-24,
-# but Mark Brader wrote (2003-05-31) that he checked the 1971-10-30 issue
-# of the Toronto Star, and it said that DST ended 1971-10-31 as usual.
+# Shanks & Pottenger say Toronto ended DST a week early in 1971,
+# namely on 1971-10-24, but Mark Brader wrote (2003-05-31) that he
+# checked the 1971-10-30 issue of the Toronto Star, and it said that
+# DST ended 1971-10-31 as usual.
 Rule	Toronto	1957	1973	-	Oct	lastSun	2:00	0	S
 
 # From Paul Eggert (2003-07-27):
@@ -1308,8 +1330,8 @@ Zone America/Winnipeg	-6:28:36 -	LMT	1887 Jul 16
 # Willett (1914-03) notes that DST "has been in operation ... in the
 # City of Moose Jaw, Saskatchewan, for one year."
 
-# From Paul Eggert (2000-10-02):
-# Shanks writes that since 1970 most of this region has been like Regina.
+# From Paul Eggert (2006-03-22):
+# Shanks & Pottenger say that since 1970 this region has mostly been as Regina.
 # Some western towns (e.g. Swift Current) switched from MST/MDT to CST in 1972.
 # Other western towns (e.g. Lloydminster) are like Edmonton.
 # Matthews and Vincent (1998) write that Denare Beach and Creighton
@@ -1395,8 +1417,10 @@ Rule	Edm	1967	only	-	Oct	lastSun	2:00	0	S
 Rule	Edm	1969	only	-	Apr	lastSun	2:00	1:00	D
 Rule	Edm	1969	only	-	Oct	lastSun	2:00	0	S
 Rule	Edm	1972	1986	-	Apr	lastSun	2:00	1:00	D
-Rule	Edm	1972	max	-	Oct	lastSun	2:00	0	S
-Rule	Edm	1987	max	-	Apr	Sun>=1	2:00	1:00	D
+Rule	Edm	1972	2006	-	Oct	lastSun	2:00	0	S
+Rule	Edm	1987	2006	-	Apr	Sun>=1	2:00	1:00	D
+Rule	Edm	2007	max	-	Mar	Sun>=8	2:00	1:00	D
+Rule	Edm	2007	max	-	Nov	Sun>=1	2:00	0	S
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone America/Edmonton	-7:33:52 -	LMT	1906 Sep
 			-7:00	Edm	M%sT
@@ -1404,8 +1428,9 @@ Zone America/Edmonton	-7:33:52 -	LMT	1906 Sep
 
 # British Columbia
 
-# From Paul Eggert (2000-10-02):
-# Shanks writes that since 1970 most of this region has been like Vancouver.
+# From Paul Eggert (2006-03-22):
+# Shanks & Pottenger write that since 1970 most of this region has
+# been like Vancouver.
 # Dawson Creek uses MST.  Much of east BC is like Edmonton.
 # Matthews and Vincent (1998) write that Creston is like Dawson Creek.
 
@@ -1431,7 +1456,7 @@ Zone America/Dawson_Creek -8:00:56 -	LMT	1884
 
 # Northwest Territories, Nunavut, Yukon
 
-# From Paul Eggert (1999-10-29):
+# From Paul Eggert (2006-03-22):
 # Dawson switched to PST in 1973.  Inuvik switched to MST in 1979.
 # Mathew Englander (1996-10-07) gives the following refs:
 #	* 1967. Paragraph 28(34)(g) of the Interpretation Act, S.C. 1967-68,
@@ -1440,7 +1465,8 @@ Zone America/Dawson_Creek -8:00:56 -	LMT	1884
 #	* C.O. 1973/214 switched Yukon to PST on 1973-10-28 00:00.
 #	* O.I.C. 1980/02 established DST.
 #	* O.I.C. 1987/056 changed DST to Apr firstSun 2:00 to Oct lastSun 2:00.
-# Shanks says Yukon's 1973-10-28 switch was at 2:00; go with Englander.
+# Shanks & Pottenger say Yukon's 1973-10-28 switch was at 2:00; go
+# with Englander.
 
 # From Rives McDow (1999-09-04):
 # Nunavut ... moved ... to incorporate the whole territory into one time zone.
@@ -1609,16 +1635,12 @@ Zone America/Dawson	-9:17:40 -	LMT	1900 Aug 20
 # history of Mexican local time (in Spanish)
 # </a>.
 #
-# Here are the discrepancies between Shanks and the MLoC.
+# Here are the discrepancies between Shanks & Pottenger (S&P) and the MLoC.
 # (In all cases we go with the MLoC.)
-# Shanks reports that Baja was at -8:00 in 1922/1923.
-# Shanks says the 1930 transition in Baja was 1930-11-16.
-# Shanks reports no DST during summer 1931.
-# Shanks reports a transition at 1932-03-30 23:00, not 1932-04-01.
-# Shanks does not report transitions for Baja in 1945 or 1948.
-# Shanks reports southern Mexico transitions on 1981-12-01, not 12-23.
-# Shanks says Quintana Roo switched to -6:00 on 1982-12-02, and to -5:00
-# on 1997-10-26 at 02:00.
+# S&P report that Baja was at -8:00 in 1922/1923.
+# S&P say the 1930 transition in Baja was 1930-11-16.
+# S&P report no DST during summer 1931.
+# S&P report a transition at 1932-03-30 23:00, not 1932-04-01.
 
 # From Gwillim Law (2001-02-20):
 # There are some other discrepancies between the Decrees page and the
@@ -1626,10 +1648,6 @@ Zone America/Dawson	-9:17:40 -	LMT	1900 Aug 20
 # the researchers who prepared the Decrees page failed to find some of
 # the relevant documents.
 
-# From Paul Eggert (2000-07-26):
-# Shanks gives 1942-04-01 instead of 1942-04-24, and omits the 1981
-# and 1988 DST experiments.  Go with spin.com.mx.
-
 # From Alan Perry (1996-02-15):
 # A guy from our Mexico subsidiary finally found the Presidential Decree
 # outlining the timezone changes in Mexico.
@@ -1829,7 +1847,8 @@ Zone America/Tijuana	-7:48:04 -	LMT	1922 Jan  1  0:11:56
 			-8:00	-	PST	1931 Apr  1
 			-8:00	1:00	PDT	1931 Sep 30
 			-8:00	-	PST	1942 Apr 24
-			-8:00	1:00	PWT	1945 Nov 12
+			-8:00	1:00	PWT	1945 Aug 14 23:00u
+			-8:00	1:00	PPT	1945 Nov 12 # Peace
 			-8:00	-	PST	1948 Apr  5
 			-8:00	1:00	PDT	1949 Jan 14
 			-8:00	-	PST	1954
@@ -1839,12 +1858,13 @@ Zone America/Tijuana	-7:48:04 -	LMT	1922 Jan  1  0:11:56
 			-8:00	Mexico	P%sT	2001
 			-8:00	US	P%sT	2002 Feb 20
 			-8:00	Mexico	P%sT
-# From Paul Eggert (2001-03-05):
+# From Paul Eggert (2006-03-22):
 # Formerly there was an America/Ensenada zone, which differed from
 # America/Tijuana only in that it did not observe DST from 1976
-# through 1995.  This was as per Shanks.  However, Guy Harris reports
+# through 1995.  This was as per Shanks (1999).  But Shanks & Pottenger say
+# Ensenada did not observe DST from 1948 through 1975.  Guy Harris reports
 # that the 1987 OAG says "Only Ensenada, Mexicale, San Felipe and
-# Tijuana observe DST," which contradicts Shanks but does imply that
+# Tijuana observe DST," which agrees with Shanks & Pottenger but implies that
 # DST-observance was a town-by-town matter back then.  This concerns
 # data after 1970 so most likely there should be at least one Zone
 # other than America/Tijuana for Baja, but it's not clear yet what its
@@ -1888,7 +1908,7 @@ Zone America/Barbados	-3:58:28 -	LMT	1924		# Bridgetown
 			-4:00	Barb	A%sT
 
 # Belize
-# Whitman entirely disagrees with Shanks; go with Shanks.
+# Whitman entirely disagrees with Shanks; go with Shanks & Pottenger.
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Belize	1918	1942	-	Oct	Sun>=2	0:00	0:30	HD
 Rule	Belize	1919	1943	-	Feb	Sun>=9	0:00	0	S
@@ -1917,7 +1937,8 @@ Zone	America/Cayman	-5:25:32 -	LMT	1890		# Georgetown
 Rule	CR	1979	1980	-	Feb	lastSun	0:00	1:00	D
 Rule	CR	1979	1980	-	Jun	Sun>=1	0:00	0	S
 Rule	CR	1991	1992	-	Jan	Sat>=15	0:00	1:00	D
-# IATA SSIM (1991-09) says the following was at 1:00; go with Shanks.
+# IATA SSIM (1991-09) says the following was at 1:00;
+# go with Shanks & Pottenger.
 Rule	CR	1991	only	-	Jul	 1	0:00	0	S
 Rule	CR	1992	only	-	Mar	15	0:00	0	S
 # There are too many San Joses elsewhere, so we'll use `Costa Rica'.
@@ -1943,12 +1964,12 @@ Zone America/Costa_Rica	-5:36:20 -	LMT	1890		# San Jose
 
 # From Evert van der Veer via Steffen Thorsen (2004-10-28):
 # Cuba is not going back to standard time this year.
-# From Paul Eggert (2004-10-28):
+# From Paul Eggert (2006-03-22):
 # http://www.granma.cu/ingles/2004/septiembre/juev30/41medid-i.html
 # says that it's due to a problem at the Antonio Guiteras
 # thermoelectric plant, and says "This October there will be no return
 # to normal hours (after daylight saving time)".
-# For now, let's assume that it's a one-year temporary measure.
+# For now, let's assume that it's a temporary measure.
 
 # From Carlos A. Carnero Delgado (2005-11-12):
 # This year (just like in 2004-2005) there's no change in time zone
@@ -2089,7 +2110,8 @@ Zone America/Guatemala	-6:02:04 -	LMT	1918 Oct 5
 Rule	Haiti	1983	only	-	May	8	0:00	1:00	D
 Rule	Haiti	1984	1987	-	Apr	lastSun	0:00	1:00	D
 Rule	Haiti	1983	1987	-	Oct	lastSun	0:00	0	S
-# Shanks says AT is 2:00, but IATA SSIM (1991/1997) says 1:00s.  Go with IATA.
+# Shanks & Pottenger say AT is 2:00, but IATA SSIM (1991/1997) says 1:00s.
+# Go with IATA.
 Rule	Haiti	1988	1997	-	Apr	Sun>=1	1:00s	1:00	D
 Rule	Haiti	1988	1997	-	Oct	lastSun	1:00s	0	S
 Rule	Haiti	2005	only	-	Apr	Sun>=1	0:00	1:00	D
@@ -2100,7 +2122,7 @@ Zone America/Port-au-Prince -4:49:20 -	LMT	1890
 			-5:00	Haiti	E%sT
 
 # Honduras
-# Shanks says 1921 Jan 1; go with Whitman's more precise Apr 1.
+# Shanks & Pottenger say 1921 Jan 1; go with Whitman's more precise Apr 1.
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone America/Tegucigalpa -5:48:52 -	LMT	1921 Apr
 			-6:00	Salv	C%sT
@@ -2115,7 +2137,7 @@ Zone America/Tegucigalpa -5:48:52 -	LMT	1921 Apr
 # From U. S. Naval Observatory (1989-01-19):
 # JAMAICA             5 H  BEHIND UTC
 
-# From Shanks:
+# From Shanks & Pottenger:
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	America/Jamaica	-5:07:12 -	LMT	1890		# Kingston
 			-5:07:12 -	KMT	1912 Feb    # Kingston Mean Time
@@ -2132,11 +2154,11 @@ Zone America/Martinique	-4:04:20 -      LMT	1890		# Fort-de-France
 			-4:00	-	AST
 
 # Montserrat
-# From Paul Eggert (1997-08-31):
-# Recent volcanic eruptions have forced evacuation of Plymouth, the capital.
-# Luckily, Olveston, the current de facto capital, has the same longitude.
+# From Paul Eggert (2006-03-22):
+# In 1995 volcanic eruptions forced evacuation of Plymouth, the capital.
+# world.gazetteer.com says Cork Hill is the most populous location now.
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Montserrat	-4:08:52 -	LMT	1911 Jul 1 0:01   # Olveston
+Zone America/Montserrat	-4:08:52 -	LMT	1911 Jul 1 0:01   # Cork Hill
 			-4:00	-	AST
 
 # Nicaragua
@@ -2203,7 +2225,7 @@ Zone	America/Panama	-5:18:08 -	LMT	1890
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone America/Puerto_Rico -4:24:25 -	LMT	1899 Mar 28 12:00    # San Juan
 			-4:00	-	AST	1942 May  3
-			-4:00	1:00	AWT	1945 Sep 30  2:00
+			-4:00	US	A%sT	1946
 			-4:00	-	AST
 
 # St Kitts-Nevis
@@ -2232,8 +2254,8 @@ Zone America/St_Vincent	-4:04:56 -	LMT	1890		# Kingstown
 			-4:00	-	AST
 
 # Turks and Caicos
-# From Paul Eggert (1998-08-06):
-# Shanks says they use US DST rules, but IATA SSIM (1991/1998)
+# From Paul Eggert (2006-03-22):
+# Shanks & Pottenger say they use US DST rules, but IATA SSIM (1991/1998)
 # says they switch at midnight.  Go with IATA SSIM.
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	TC	1979	1986	-	Apr	lastSun	0:00	1:00	D
diff --git a/JodaTime/src/java/org/joda/time/tz/src/pacificnew b/JodaTime/src/java/org/joda/time/tz/src/pacificnew
index ae0461c0b..6ee97d60e 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/pacificnew
+++ b/JodaTime/src/java/org/joda/time/tz/src/pacificnew
@@ -1,4 +1,4 @@
-# @(#)pacificnew	7.10
+# @(#)pacificnew	8.1
 
 # From Arthur David Olson (1989-04-05):
 # On 1989-04-05, the U. S. House of Representatives passed (238-154) a bill
diff --git a/JodaTime/src/java/org/joda/time/tz/src/southamerica b/JodaTime/src/java/org/joda/time/tz/src/southamerica
index 3355f1d0d..5c37cc412 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/southamerica
+++ b/JodaTime/src/java/org/joda/time/tz/src/southamerica
@@ -1,14 +1,14 @@
-# @(#)southamerica	7.66
+# @(#)southamerica	8.3
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
 # go ahead and edit the file (and please send any changes to
 # tz@elsie.nci.nih.gov for general use in the future).
 
-# From Paul Eggert (1999-07-07):
+# From Paul Eggert (2006-03-22):
 # A good source for time zone historical data outside the U.S. is
-# Thomas G. Shanks, The International Atlas (5th edition),
-# San Diego: ACS Publications, Inc. (1999).
+# Thomas G. Shanks and Rique Pottenger, The International Atlas (6th edition),
+# San Diego: ACS Publications, Inc. (2003).
 #
 # Gwillim Law writes that a good source
 # for recent time zone data is the International Air Transport
@@ -16,8 +16,8 @@
 # published semiannually.  Law sent in several helpful summaries
 # of the IATA's data after 1990.
 #
-# Except where otherwise noted, Shanks is the source for entries through 1990,
-# and IATA SSIM is the source for entries after 1990.
+# Except where otherwise noted, Shanks & Pottenger is the source for
+# entries through 1990, and IATA SSIM is the source for entries afterwards.
 #
 # Earlier editions of these tables used the North American style (e.g. ARST and
 # ARDT for Argentine Standard and Daylight Time), but the following quote
@@ -92,8 +92,6 @@ Rule	Arg	1988	only	-	Dec	 1	0:00	1:00	S
 # obtaining the data from the:
 # Talleres de Hidrografia Naval Argentina
 # (Argentine Naval Hydrography Institute)
-#
-# Shanks stops after 1992-03-01; go with Otero.
 Rule	Arg	1989	1993	-	Mar	Sun>=1	0:00	0	-
 Rule	Arg	1989	1992	-	Oct	Sun>=15	0:00	1:00	S
 #
@@ -150,12 +148,12 @@ Rule	Arg	2000	only	-	Mar	Sun>=1	0:00	0	-
 # It's Law No. 7,210.  This change is due to a public power emergency, so for
 # now we'll assume it's for this year only.
 #
-# From Paul Eggert (2002-01-22):
+# From Paul Eggert (2006-03-22):
 # <a href="http://www.spicasc.net/horvera.html">
-# Hora de verano para la Republica Argentina (2000-10-01)
+# Hora de verano para la Republica Argentina (2003-06-08)
 # </a> says that standard time in Argentina from 1894-10-31
 # to 1920-05-01 was -4:16:48.25.  Go with this more-precise value
-# over Shanks.
+# over Shanks & Pottenger.
 #
 # From Mariano Absatz (2004-06-05):
 # These media articles from a major newspaper mostly cover the current state:
@@ -202,8 +200,8 @@ Rule	Arg	2000	only	-	Mar	Sun>=1	0:00	0	-
 # http://www.sanjuan.gov.ar/prensa/archivo/000426.html
 # http://www.sanjuan.gov.ar/prensa/archivo/000441.html
 
-# Unless otherwise specified, data are from Shanks through 1992, from
-# the IATA otherwise.  As noted below, Shanks says that
+# Unless otherwise specified, data are from Shanks & Pottenger through 1992,
+# from the IATA otherwise.  As noted below, Shanks & Pottenger say that
 # America/Cordoba split into 6 subregions during 1991/1992, but we
 # haven't verified this yet so for now we'll keep it a single region.
 #
@@ -222,7 +220,7 @@ Zone America/Argentina/Buenos_Aires -3:53:48 - LMT 1894 Oct 31
 # Formosa (FM), Salta (SA), Santiago del Estero (SE), Cordoba (CB),
 # San Luis (SL), La Pampa (LP), Neuquen (NQ), Rio Negro (RN)
 #
-# Shanks also makes the following claims, which we haven't verified:
+# Shanks & Pottenger also make the following claims, which we haven't verified:
 # - Formosa switched to -3:00 on 1991-01-07.
 # - Misiones switched to -3:00 on 1990-12-29.
 # - Chaco switched to -3:00 on 1991-01-04.
@@ -712,7 +710,7 @@ Zone America/Rio_Branco	-4:31:12 -	LMT	1914
 # It clearly confirms my earlier suggestion, that DST begins at 22:00
 # on Easter Island....  But it also seems to be saying that the
 # observance of DST in Chile began in 1966, rather than 1969 as
-# ... [Shanks] has it....
+# ... [Shanks & Pottenger have] it....
 #
 # My translation:
 #
@@ -724,8 +722,8 @@ Zone America/Rio_Branco	-4:31:12 -	LMT	1914
 # to Easter Island and Sala y Gomez Island, will be set forward at
 # midnight and at 22:00, respectively, by 20 minutes."
 
-# From Paul Eggert (2001-05-04):
-# Go with this article in preference to Shanks's 1969 date for modern DST.
+# From Paul Eggert (2006-03-22):
+# Go with Law in preference to Shanks & Pottenger's 1969 date for modern DST.
 # Assume this rule has been used since DST was introduced in the islands.
 
 # From Paul Eggert (2002-10-24):
@@ -752,7 +750,7 @@ Zone America/Santiago	-4:42:40 -	LMT	1890
 			-4:00	Chile	CL%sT
 Zone Pacific/Easter	-7:17:28 -	LMT	1890	    # Mataveri
 			-7:17:28 -	MMT	1932 Sep    # Mataveri Mean Time
-			-7:00	Chile	EAS%sT	1982 Mar 14 # Easter I Time
+			-7:00	Chile	EAS%sT	1982 Mar 13 21:00 # Easter I Time
 			-6:00	Chile	EAS%sT
 #
 # Sala y Gomez Island is like Pacific/Easter.
@@ -760,11 +758,9 @@ Zone Pacific/Easter	-7:17:28 -	LMT	1890	    # Mataveri
 # San Felix, and Antarctic bases, are like America/Santiago.
 
 # Colombia
-# Shanks specifies 24:00 for 1992 transition times; go with IATA,
-# as it seems implausible to change clocks at midnight New Year's Eve.
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	CO	1992	only	-	May	 2	0:00	1:00	S
-Rule	CO	1992	only	-	Dec	31	0:00	0	-
+Rule	CO	1992	only	-	May	 3	0:00	1:00	S
+Rule	CO	1993	only	-	Apr	 4	0:00	0	-
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	America/Bogota	-4:56:20 -	LMT	1884 Mar 13
 			-4:56:20 -	BMT	1914 Nov 23 # Bogota Mean Time
@@ -773,10 +769,21 @@ Zone	America/Bogota	-4:56:20 -	LMT	1884 Mar 13
 # no information; probably like America/Bogota
 
 # Curacao
-# Shanks says that Bottom and Oranjestad have been at -4:00 since
-# standard time was introduced on 1912-03-02; and that Kralendijk and Rincon
-# used Kralendijk Mean Time (-4:33:08) from 1912-02-02 to 1965-01-01.
-# This all predates our 1970 cutoff, though.
+#
+# From Paul Eggert (2006-03-22): 
+# Shanks & Pottenger say that The Bottom and Philipsburg have been at
+# -4:00 since standard time was introduced on 1912-03-02; and that
+# Kralendijk and Rincon used Kralendijk Mean Time (-4:33:08) from
+# 1912-02-02 to 1965-01-01.  The former is dubious, since S&P also say
+# Saba Island has been like Curacao.
+# This all predates our 1970 cutoff, though.  
+#
+# By July 2007 Curacao and St Maarten are planned to become
+# associated states within the Netherlands, much like Aruba;
+# Bonaire, Saba and St Eustatius would become directly part of the
+# Netherlands as Kingdom Islands.  This won't affect their time zones
+# though, as far as we know.
+# 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	America/Curacao	-4:35:44 -	LMT	1912 Feb 12	# Willemstad
 			-4:30	-	ANT	1965 # Netherlands Antilles Time
@@ -793,9 +800,9 @@ Zone Pacific/Galapagos	-5:58:24 -	LMT	1931 # Puerto Baquerizo Moreno
 
 # Falklands
 
-# From Paul Eggert (2001-03-05):
-# Between 1990 and 2000 inclusive, Shanks and the IATA agree except
-# the IATA gives 1996-09-08.  Go with Shanks.
+# From Paul Eggert (2006-03-22):
+# Between 1990 and 2000 inclusive, Shanks & Pottenger and the IATA agree except
+# the IATA gives 1996-09-08.  Go with Shanks & Pottenger.
 
 # From Falkland Islands Government Office, London (2001-01-22)
 # via Jesper Norgaard:
@@ -878,9 +885,9 @@ Zone	America/Guyana	-3:52:40 -	LMT	1915 Mar	# Georgetown
 			-4:00	-	GYT
 
 # Paraguay
-# From Paul Eggert (1999-10-29):
-# Shanks (1999) says that spring transitions are from 01:00 -> 02:00,
-# and autumn transitions are from 00:00 -> 23:00.  Go with earlier
+# From Paul Eggert (2006-03-22):
+# Shanks & Pottenger say that spring transitions are from 01:00 -> 02:00,
+# and autumn transitions are from 00:00 -> 23:00.  Go with pre-1999
 # editions of Shanks, and with the IATA, who say transitions occur at 00:00.
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Para	1975	1988	-	Oct	 1	0:00	1:00	S
@@ -915,9 +922,9 @@ Rule	Para	1996	only	-	Mar	 1	0:00	0	-
 # http://gateway.abc.com.py:8000/pub/pag04.mbr/artic?FHA=2001-03-03-02.24.52.900592
 #
 Rule	Para	1996	2001	-	Oct	Sun>=1	0:00	1:00	S
-# IATA SSIM (1997-09) says Mar 1; go with Shanks.
+# IATA SSIM (1997-09) says Mar 1; go with Shanks & Pottenger.
 Rule	Para	1997	only	-	Feb	lastSun	0:00	0	-
-# Shanks says 1999-02-28; IATA SSIM (1999-02) says 1999-02-27, but
+# Shanks & Pottenger say 1999-02-28; IATA SSIM (1999-02) says 1999-02-27, but
 # (1999-09) reports no date; go with above sources and Gerd Knops (2001-02-27).
 Rule	Para	1998	2001	-	Mar	Sun>=1	0:00	0	-
 # From Rives McDow (2002-02-28):
@@ -949,8 +956,8 @@ Zone America/Asuncion	-3:50:40 -	LMT	1890
 # When we were in Peru in 1985-1986, they apparently switched over
 # sometime between December 29 and January 3 while we were on the Amazon.
 #
-# From Paul Eggert (2003-11-02):
-# Shanks doesn't have this transition.  Assume 1986 was like 1987.
+# From Paul Eggert (2006-03-22):
+# Shanks & Pottenger don't have this transition.  Assume 1986 was like 1987.
 
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Peru	1938	only	-	Jan	 1	0:00	1:00	S
@@ -961,7 +968,7 @@ Rule	Peru	1986	1987	-	Jan	 1	0:00	1:00	S
 Rule	Peru	1986	1987	-	Apr	 1	0:00	0	-
 Rule	Peru	1990	only	-	Jan	 1	0:00	1:00	S
 Rule	Peru	1990	only	-	Apr	 1	0:00	0	-
-# IATA is ambiguous for 1993/1995; go with Shanks.
+# IATA is ambiguous for 1993/1995; go with Shanks & Pottenger.
 Rule	Peru	1994	only	-	Jan	 1	0:00	1:00	S
 Rule	Peru	1994	only	-	Apr	 1	0:00	0	-
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
@@ -994,23 +1001,23 @@ Zone America/Port_of_Spain -4:06:04 -	LMT	1912 Mar 2
 # Uruguay
 # From Paul Eggert (1993-11-18):
 # Uruguay wins the prize for the strangest peacetime manipulation of the rules.
-# From Shanks:
+# From Shanks & Pottenger:
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-# Whitman gives 1923 Oct 1; go with Shanks.
+# Whitman gives 1923 Oct 1; go with Shanks & Pottenger.
 Rule	Uruguay	1923	only	-	Oct	 2	 0:00	0:30	HS
 Rule	Uruguay	1924	1926	-	Apr	 1	 0:00	0	-
 Rule	Uruguay	1924	1925	-	Oct	 1	 0:00	0:30	HS
 Rule	Uruguay	1933	1935	-	Oct	lastSun	 0:00	0:30	HS
-# Shanks gives 1935 Apr 1 0:00 and 1936 Mar 30 0:00; go with Whitman.
+# Shanks & Pottenger give 1935 Apr 1 0:00 & 1936 Mar 30 0:00; go with Whitman.
 Rule	Uruguay	1934	1936	-	Mar	Sat>=25	23:30s	0	-
 Rule	Uruguay	1936	only	-	Nov	 1	 0:00	0:30	HS
 Rule	Uruguay	1937	1941	-	Mar	lastSun	 0:00	0	-
-# Whitman gives 1937 Oct 3; go with Shanks.
+# Whitman gives 1937 Oct 3; go with Shanks & Pottenger.
 Rule	Uruguay	1937	1940	-	Oct	lastSun	 0:00	0:30	HS
 # Whitman gives 1941 Oct 24 - 1942 Mar 27, 1942 Dec 14 - 1943 Apr 13,
-# and 1943 Apr 13 ``to present time''; go with Shanks.
-Rule	Uruguay	1941	only	-	Aug	 1	 0:00	0	-
-Rule	Uruguay	1942	only	-	Jan	 1	 0:00	0:30	HS
+# and 1943 Apr 13 ``to present time''; go with Shanks & Pottenger.
+Rule	Uruguay	1941	only	-	Aug	 1	 0:00	0:30	HS
+Rule	Uruguay	1942	only	-	Jan	 1	 0:00	0	-
 Rule	Uruguay	1942	only	-	Dec	14	 0:00	1:00	S
 Rule	Uruguay	1943	only	-	Mar	14	 0:00	0	-
 Rule	Uruguay	1959	only	-	May	24	 0:00	1:00	S
@@ -1036,7 +1043,7 @@ Rule	Uruguay	1988	only	-	Mar	14	 0:00	0	-
 Rule	Uruguay	1988	only	-	Dec	11	 0:00	1:00	S
 Rule	Uruguay	1989	only	-	Mar	12	 0:00	0	-
 Rule	Uruguay	1989	only	-	Oct	29	 0:00	1:00	S
-# Shanks says no DST was observed in 1990/1 and 1991/2,
+# Shanks & Pottenger say no DST was observed in 1990/1 and 1991/2,
 # and that 1992/3's DST was from 10-25 to 03-01.  Go with IATA.
 Rule	Uruguay	1990	1992	-	Mar	Sun>=1	 0:00	0	-
 Rule	Uruguay	1990	1991	-	Oct	Sun>=21	 0:00	1:00	S
diff --git a/JodaTime/src/java/org/joda/time/tz/src/systemv b/JodaTime/src/java/org/joda/time/tz/src/systemv
index 13a67fca0..bfb332140 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/systemv
+++ b/JodaTime/src/java/org/joda/time/tz/src/systemv
@@ -1,4 +1,4 @@
-# @(#)systemv	7.5
+# @(#)systemv	8.1
 
 # Old rules, should the need arise.
 # No attempt is made to handle Newfoundland, since it cannot be expressed

From 7483b2a1c8bb83302eca392a76bfc4503f9fd232 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 4 Apr 2006 21:29:20 +0000
Subject: [PATCH 064/115] Add millisOfDay methods

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1061 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/java/org/joda/time/LocalDateTime.java | 34 +++++++++++++++++++
 .../src/java/org/joda/time/LocalTime.java     | 34 +++++++++++++++++++
 .../joda/time/TestLocalDateTime_Basics.java   |  3 ++
 .../org/joda/time/TestLocalTime_Basics.java   |  3 ++
 4 files changed, 74 insertions(+)

diff --git a/JodaTime/src/java/org/joda/time/LocalDateTime.java b/JodaTime/src/java/org/joda/time/LocalDateTime.java
index 5ee0c987f..f64e01ac0 100644
--- a/JodaTime/src/java/org/joda/time/LocalDateTime.java
+++ b/JodaTime/src/java/org/joda/time/LocalDateTime.java
@@ -1374,6 +1374,15 @@ public int getMillisOfSecond() {
         return getChronology().millisOfSecond().get(getLocalMillis());
     }
 
+    /**
+     * Get the millis of day field value.
+     *
+     * @return the millis of day
+     */
+    public int getMillisOfDay() {
+        return getChronology().millisOfDay().get(getLocalMillis());
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Sets the era field in a copy of this LocalDateTime, leaving this
@@ -1616,6 +1625,22 @@ public LocalDateTime withMillisOfSecond(int millis) {
         return withLocalMillis(getChronology().millisOfSecond().set(getLocalMillis(), millis));
     }
 
+    /**
+     * Sets the millis of day field in a copy of this LocalDateTime, leaving this
+     * instance unchanged.
+     * <p>
+     * LocalDateTime is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * millis of day changed.
+     *
+     * @param millis  the millis of day to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public LocalDateTime withMillisOfDay(int millis) {
+        return withLocalMillis(getChronology().millisOfDay().set(getLocalMillis(), millis));
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Get the era property.
@@ -1753,6 +1778,15 @@ public Property millisOfSecond() {
         return new Property(this, getChronology().millisOfSecond());
     }
 
+    /**
+     * Get the millis of day property
+     * 
+     * @return the millis of day property
+     */
+    public Property millisOfDay() {
+        return new Property(this, getChronology().millisOfDay());
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Output the date time in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSS).
diff --git a/JodaTime/src/java/org/joda/time/LocalTime.java b/JodaTime/src/java/org/joda/time/LocalTime.java
index 1b8be2791..6a937b4f7 100644
--- a/JodaTime/src/java/org/joda/time/LocalTime.java
+++ b/JodaTime/src/java/org/joda/time/LocalTime.java
@@ -972,6 +972,15 @@ public int getMillisOfSecond() {
         return getChronology().millisOfSecond().get(getLocalMillis());
     }
 
+    /**
+     * Get the millis of day field value.
+     *
+     * @return the millis of day
+     */
+    public int getMillisOfDay() {
+        return getChronology().millisOfDay().get(getLocalMillis());
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Sets the hour of day field in a copy of this LocalTime, leaving this
@@ -1037,6 +1046,22 @@ public LocalTime withMillisOfSecond(int millis) {
         return withLocalMillis(getChronology().millisOfSecond().set(getLocalMillis(), millis));
     }
 
+    /**
+     * Sets the millis of day field in a copy of this LocalTime, leaving this
+     * instance unchanged.
+     * <p>
+     * LocalTime is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * millis of day changed.
+     *
+     * @param millis  the millis of day to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public LocalTime withMillisOfDay(int millis) {
+        return withLocalMillis(getChronology().millisOfDay().set(getLocalMillis(), millis));
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Get the hour of day field property
@@ -1074,6 +1099,15 @@ public Property millisOfSecond() {
         return new Property(this, getChronology().millisOfSecond());
     }
 
+    /**
+     * Get the millis of day property
+     * 
+     * @return the millis of day property
+     */
+    public Property millisOfDay() {
+        return new Property(this, getChronology().millisOfDay());
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Converts this LocalTime to a full datetime using the default time zone
diff --git a/JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java b/JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java
index 200f152f7..ea1d79710 100644
--- a/JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java
@@ -713,6 +713,7 @@ public void testGetters() {
         assertEquals(20, test.getMinuteOfHour());
         assertEquals(30, test.getSecondOfMinute());
         assertEquals(40, test.getMillisOfSecond());
+        assertEquals(MILLIS_OF_DAY_UTC, test.getMillisOfDay());
     }
 
     //-----------------------------------------------------------------------
@@ -733,6 +734,7 @@ public void testWithers() {
         check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40);
         check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40);
         check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6);
+        check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234);
         try {
             test.withMonthOfYear(0);
             fail();
@@ -823,6 +825,7 @@ public void testProperty() {
         assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour()));
         assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute()));
         assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond()));
+        assertEquals(test.millisOfDay(), test.property(DateTimeFieldType.millisOfDay()));
         
         try {
             test.property(null);
diff --git a/JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java b/JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java
index 6c95b9c51..2d61a4c6b 100644
--- a/JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java
@@ -639,6 +639,7 @@ public void testGetters() {
         assertEquals(20, test.getMinuteOfHour());
         assertEquals(30, test.getSecondOfMinute());
         assertEquals(40, test.getMillisOfSecond());
+        assertEquals(TEST_TIME_NOW, test.getMillisOfDay());
     }
 
     //-----------------------------------------------------------------------
@@ -648,6 +649,7 @@ public void testWithers() {
         check(test.withMinuteOfHour(6), 10, 6, 30, 40);
         check(test.withSecondOfMinute(6), 10, 20, 6, 40);
         check(test.withMillisOfSecond(6), 10, 20, 30, 6);
+        check(test.withMillisOfDay(61234), 0, 1, 1, 234);
         try {
             test.withHourOfDay(-1);
             fail();
@@ -733,6 +735,7 @@ public void testProperty() {
         assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour()));
         assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute()));
         assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond()));
+        assertEquals(test.millisOfDay(), test.property(DateTimeFieldType.millisOfDay()));
         
         assertEquals(test, test.property(DateTimeFieldType.minuteOfDay()).getLocalTime());
         assertEquals(test, test.property(DateTimeFieldType.secondOfDay()).getLocalTime());

From 034147af280e4f033c078b6feb0a5669830cb564 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 4 Apr 2006 22:06:19 +0000
Subject: [PATCH 065/115] Add withXxx methods to DateTime/DateMidnight

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1062 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  54 ++--
 .../src/java/org/joda/time/DateMidnight.java  | 179 +++++++++++-
 JodaTime/src/java/org/joda/time/DateTime.java | 260 +++++++++++++++++-
 .../joda/time/TestDateMidnight_Basics.java    |  36 ++-
 .../org/joda/time/TestDateTime_Basics.java    |  45 ++-
 5 files changed, 546 insertions(+), 28 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 161197a87..94bb24fec 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -5,7 +5,7 @@ Joda-Time is a date and time handling library that seeks to replace the JDK
 Date and Calendar classes.
 
 This is the fourth full release of Joda-Time.
-This release focuses on bug fixes, with a few new features.
+This release focuses on new features, but also include some bug fixes.
 
 We recommend JDK 1.3 or later, and have performed no testing on earlier JDKs.
 
@@ -17,8 +17,34 @@ of restrictions. If the license causes you problems please contact the mailing l
 ** Please also check out the JSP and Hibernate contributed projects **
 
 
-Incompatible changes since 1.2
-------------------------------
+Enhancements since 1.2
+----------------------
+- LocalDate/LocalTime/LocalDateTime
+  New classes representing date, time and datetime without a time zone.
+  LocalDate is the recommended replacement for YearMonthDay.
+  LocalTime is the recommended replacement for TimeOfDay.
+  These classes are implemented more flexibly than YearMonthDay and TimeOfDay
+  and thus solve the problem where you couldn't query or format fields such
+  as dayOfWeek on a YearMonthDay or millisOfDay on a TimeOfDay.
+  Neither YearMonthDay or TimeOfDay will be immediately deprecated as they
+  are in widespread use.
+  The API of the new classes has been kept as similar to YearMonthDay/TimeOfDay
+  as possible to aid migration. The main difference is the method names on the
+  property class.
+
+- DateTime/DateMidnight.withXxx()
+  Add withXxx methods that allow an individul field to be changed, for example:
+  firstOfMonth = today.withDayOfMonth(1);
+  These methods are the immutable equivalent of set methods.
+  These are convenince methods for the methods on the property API.
+
+- DateTimeFormatter/DateTimeParserBucket
+  If a parsed datetime is illegal due to field range or time zone offset
+  transition, thrown exception includes text of datetime being parsed.
+
+
+Compatibility with 1.2
+----------------------
 Binary compatible - Yes
 
 Source compatible - Yes
@@ -27,7 +53,7 @@ Source compatible - Yes
 Serialization compatible - Yes
 
 Data compatible - Yes
-  - DateTimeZone data updated to version 2006a
+  - DateTimeZone data updated to version 2006c
 
 
 Deprecations since 1.2
@@ -65,26 +91,6 @@ Bug fixes since 1.2
   LONG.MIN_VALUE.
 
 
-Enhancements since 1.2
-----------------------
-- LocalDate/LocalTime/LocalDateTime
-  New classes representing date, time and datetime without a time zone.
-  LocalDate is the recommended replacement for YearMonthDay.
-  LocalTime is the recommended replacement for TimeOfDay.
-  These classes are implemented more flexibly than YearMonthDay and TimeOfDay
-  and thus solve the problem where you couldn't query or format fields such
-  as dayOfWeek on a YearMonthDay or millisOfDay on a TimeOfDay.
-  Neither YearMonthDay or TimeOfDay will be immediately deprecated as they
-  are in widespread use.
-  The API of the new classes has been kept as similar to YearMonthDay/TimeOfDay
-  as possible to aid migration. The main difference is the method names on the
-  property class.
-
-- DateTimeFormatter/DateTimeParserBucket
-  If a parsed datetime is illegal due to field range or time zone offset
-  transition, thrown exception includes text of datetime being parsed.
-
-
 Feedback
 --------
 All feedback is welcomed at joda-interest@lists.sourceforge.net.
diff --git a/JodaTime/src/java/org/joda/time/DateMidnight.java b/JodaTime/src/java/org/joda/time/DateMidnight.java
index 3986d7915..a0d1ebe8f 100644
--- a/JodaTime/src/java/org/joda/time/DateMidnight.java
+++ b/JodaTime/src/java/org/joda/time/DateMidnight.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2006 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -797,6 +797,183 @@ public Interval toInterval() {
         return new Interval(start, end, chrono);
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Sets the era field in a copy of this DateMidnight, leaving this
+     * instance unchanged.
+     * <p>
+     * DateMidnight is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * era changed.
+     *
+     * @param era  the era to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public DateMidnight withEra(int era) {
+        return withMillis(getChronology().era().set(getMillis(), era));
+    }
+
+    /**
+     * Sets the century of era field in a copy of this DateMidnight, leaving this
+     * instance unchanged.
+     * <p>
+     * DateMidnight is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * century of era changed.
+     *
+     * @param centuryOfEra  the centurey of era to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public DateMidnight withCenturyOfEra(int centuryOfEra) {
+        return withMillis(getChronology().centuryOfEra().set(getMillis(), centuryOfEra));
+    }
+
+    /**
+     * Sets the year of era field in a copy of this DateMidnight, leaving this
+     * instance unchanged.
+     * <p>
+     * DateMidnight is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * year of era changed.
+     *
+     * @param yearOfEra  the year of era to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public DateMidnight withYearOfEra(int yearOfEra) {
+        return withMillis(getChronology().yearOfEra().set(getMillis(), yearOfEra));
+    }
+
+    /**
+     * Sets the year of century field in a copy of this DateMidnight, leaving this
+     * instance unchanged.
+     * <p>
+     * DateMidnight is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * year of century changed.
+     *
+     * @param yearOfCentury  the year of century to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public DateMidnight withYearOfCentury(int yearOfCentury) {
+        return withMillis(getChronology().yearOfCentury().set(getMillis(), yearOfCentury));
+    }
+
+    /**
+     * Sets the year field in a copy of this DateMidnight, leaving this
+     * instance unchanged.
+     * <p>
+     * DateMidnight is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * year changed.
+     *
+     * @param year  the year to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public DateMidnight withYear(int year) {
+        return withMillis(getChronology().year().set(getMillis(), year));
+    }
+
+    /**
+     * Sets the weekyear field in a copy of this DateMidnight, leaving this
+     * instance unchanged.
+     * <p>
+     * DateMidnight is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * weekyear changed.
+     *
+     * @param weekyear  the weekyear to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public DateMidnight withWeekyear(int weekyear) {
+        return withMillis(getChronology().weekyear().set(getMillis(), weekyear));
+    }
+
+    /**
+     * Sets the month of year field in a copy of this DateMidnight, leaving this
+     * instance unchanged.
+     * <p>
+     * DateMidnight is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * month of year changed.
+     *
+     * @param monthOfYear  the month of year to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public DateMidnight withMonthOfYear(int monthOfYear) {
+        return withMillis(getChronology().monthOfYear().set(getMillis(), monthOfYear));
+    }
+
+    /**
+     * Sets the week of weekyear field in a copy of this DateMidnight, leaving this
+     * instance unchanged.
+     * <p>
+     * DateMidnight is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * week of weekyear changed.
+     *
+     * @param weekOfWeekyear  the week of weekyear to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public DateMidnight withWeekOfWeekyear(int weekOfWeekyear) {
+        return withMillis(getChronology().weekOfWeekyear().set(getMillis(), weekOfWeekyear));
+    }
+
+    /**
+     * Sets the day of year field in a copy of this DateMidnight, leaving this
+     * instance unchanged.
+     * <p>
+     * DateMidnight is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * day of year changed.
+     *
+     * @param dayOfYear  the day of year to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public DateMidnight withDayOfYear(int dayOfYear) {
+        return withMillis(getChronology().dayOfYear().set(getMillis(), dayOfYear));
+    }
+
+    /**
+     * Sets the day of month field in a copy of this DateMidnight, leaving this
+     * instance unchanged.
+     * <p>
+     * DateMidnight is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * day of month changed.
+     *
+     * @param dayOfMonth  the day of month to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public DateMidnight withDayOfMonth(int dayOfMonth) {
+        return withMillis(getChronology().dayOfMonth().set(getMillis(), dayOfMonth));
+    }
+
+    /**
+     * Sets the day of week field in a copy of this DateMidnight, leaving this
+     * instance unchanged.
+     * <p>
+     * DateMidnight is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * day of week changed.
+     *
+     * @param dayOfWeek  the day of week to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public DateMidnight withDayOfWeek(int dayOfWeek) {
+        return withMillis(getChronology().dayOfWeek().set(getMillis(), dayOfWeek));
+    }
+
     // Date properties
     //-----------------------------------------------------------------------
     /**
diff --git a/JodaTime/src/java/org/joda/time/DateTime.java b/JodaTime/src/java/org/joda/time/DateTime.java
index 68636eafa..7530a6f0d 100644
--- a/JodaTime/src/java/org/joda/time/DateTime.java
+++ b/JodaTime/src/java/org/joda/time/DateTime.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2006 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -1122,6 +1122,264 @@ public TimeOfDay toTimeOfDay() {
         return new TimeOfDay(getMillis(), getChronology());
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Sets the era field in a copy of this DateTime, leaving this
+     * instance unchanged.
+     * <p>
+     * DateTime is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * era changed.
+     *
+     * @param era  the era to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public DateTime withEra(int era) {
+        return withMillis(getChronology().era().set(getMillis(), era));
+    }
+
+    /**
+     * Sets the century of era field in a copy of this DateTime, leaving this
+     * instance unchanged.
+     * <p>
+     * DateTime is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * century of era changed.
+     *
+     * @param centuryOfEra  the centurey of era to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public DateTime withCenturyOfEra(int centuryOfEra) {
+        return withMillis(getChronology().centuryOfEra().set(getMillis(), centuryOfEra));
+    }
+
+    /**
+     * Sets the year of era field in a copy of this DateTime, leaving this
+     * instance unchanged.
+     * <p>
+     * DateTime is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * year of era changed.
+     *
+     * @param yearOfEra  the year of era to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public DateTime withYearOfEra(int yearOfEra) {
+        return withMillis(getChronology().yearOfEra().set(getMillis(), yearOfEra));
+    }
+
+    /**
+     * Sets the year of century field in a copy of this DateTime, leaving this
+     * instance unchanged.
+     * <p>
+     * DateTime is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * year of century changed.
+     *
+     * @param yearOfCentury  the year of century to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public DateTime withYearOfCentury(int yearOfCentury) {
+        return withMillis(getChronology().yearOfCentury().set(getMillis(), yearOfCentury));
+    }
+
+    /**
+     * Sets the year field in a copy of this DateTime, leaving this
+     * instance unchanged.
+     * <p>
+     * DateTime is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * year changed.
+     *
+     * @param year  the year to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public DateTime withYear(int year) {
+        return withMillis(getChronology().year().set(getMillis(), year));
+    }
+
+    /**
+     * Sets the weekyear field in a copy of this DateTime, leaving this
+     * instance unchanged.
+     * <p>
+     * DateTime is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * weekyear changed.
+     *
+     * @param weekyear  the weekyear to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public DateTime withWeekyear(int weekyear) {
+        return withMillis(getChronology().weekyear().set(getMillis(), weekyear));
+    }
+
+    /**
+     * Sets the month of year field in a copy of this DateTime, leaving this
+     * instance unchanged.
+     * <p>
+     * DateTime is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * month of year changed.
+     *
+     * @param monthOfYear  the month of year to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public DateTime withMonthOfYear(int monthOfYear) {
+        return withMillis(getChronology().monthOfYear().set(getMillis(), monthOfYear));
+    }
+
+    /**
+     * Sets the week of weekyear field in a copy of this DateTime, leaving this
+     * instance unchanged.
+     * <p>
+     * DateTime is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * week of weekyear changed.
+     *
+     * @param weekOfWeekyear  the week of weekyear to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public DateTime withWeekOfWeekyear(int weekOfWeekyear) {
+        return withMillis(getChronology().weekOfWeekyear().set(getMillis(), weekOfWeekyear));
+    }
+
+    /**
+     * Sets the day of year field in a copy of this DateTime, leaving this
+     * instance unchanged.
+     * <p>
+     * DateTime is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * day of year changed.
+     *
+     * @param dayOfYear  the day of year to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public DateTime withDayOfYear(int dayOfYear) {
+        return withMillis(getChronology().dayOfYear().set(getMillis(), dayOfYear));
+    }
+
+    /**
+     * Sets the day of month field in a copy of this DateTime, leaving this
+     * instance unchanged.
+     * <p>
+     * DateTime is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * day of month changed.
+     *
+     * @param dayOfMonth  the day of month to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public DateTime withDayOfMonth(int dayOfMonth) {
+        return withMillis(getChronology().dayOfMonth().set(getMillis(), dayOfMonth));
+    }
+
+    /**
+     * Sets the day of week field in a copy of this DateTime, leaving this
+     * instance unchanged.
+     * <p>
+     * DateTime is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * day of week changed.
+     *
+     * @param dayOfWeek  the day of week to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public DateTime withDayOfWeek(int dayOfWeek) {
+        return withMillis(getChronology().dayOfWeek().set(getMillis(), dayOfWeek));
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Sets the hour of day field in a copy of this DateTime, leaving this
+     * instance unchanged.
+     * <p>
+     * DateTime is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * hour of day changed.
+     *
+     * @param hour  the hour of day to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public DateTime withHourOfDay(int hour) {
+        return withMillis(getChronology().hourOfDay().set(getMillis(), hour));
+    }
+
+    /**
+     * Sets the minute of hour field in a copy of this DateTime, leaving this
+     * instance unchanged.
+     * <p>
+     * DateTime is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * minute of hour changed.
+     *
+     * @param minute  the minute of hour to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public DateTime withMinuteOfHour(int minute) {
+        return withMillis(getChronology().minuteOfHour().set(getMillis(), minute));
+    }
+
+    /**
+     * Sets the second of minute field in a copy of this DateTime, leaving this
+     * instance unchanged.
+     * <p>
+     * DateTime is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * second of minute changed.
+     *
+     * @param second  the second of minute to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public DateTime withSecondOfMinute(int second) {
+        return withMillis(getChronology().secondOfMinute().set(getMillis(), second));
+    }
+
+    /**
+     * Sets the millis of second field in a copy of this DateTime, leaving this
+     * instance unchanged.
+     * <p>
+     * DateTime is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * millis of second changed.
+     *
+     * @param millis  the millis of second to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public DateTime withMillisOfSecond(int millis) {
+        return withMillis(getChronology().millisOfSecond().set(getMillis(), millis));
+    }
+
+    /**
+     * Sets the millis of day field in a copy of this DateTime, leaving this
+     * instance unchanged.
+     * <p>
+     * DateTime is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * millis of day changed.
+     *
+     * @param millis  the millis of day to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     */
+    public DateTime withMillisOfDay(int millis) {
+        return withMillis(getChronology().millisOfDay().set(getMillis(), millis));
+    }
+
     // Date properties
     //-----------------------------------------------------------------------
     /**
diff --git a/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java b/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java
index 1245377d2..221b3d9d3 100644
--- a/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java
@@ -31,6 +31,7 @@
 import org.joda.time.base.AbstractInstant;
 import org.joda.time.chrono.BuddhistChronology;
 import org.joda.time.chrono.CopticChronology;
+import org.joda.time.chrono.GJChronology;
 import org.joda.time.chrono.GregorianChronology;
 import org.joda.time.chrono.ISOChronology;
 import org.joda.time.field.UnsupportedDateTimeField;
@@ -196,7 +197,8 @@ public void testGet_DateTimeFieldType() {
         } catch (IllegalArgumentException ex) {}
     }
 
-    public void testGetMethods() {
+    //-----------------------------------------------------------------------
+    public void testGetters() {
         DateMidnight test = new DateMidnight();
         
         assertEquals(ISOChronology.getInstance(), test.getChronology());
@@ -223,6 +225,31 @@ public void testGetMethods() {
         assertEquals(0, test.getMillisOfDay());
     }
 
+    public void testWithers() {
+        DateMidnight test = new DateMidnight(1970, 6, 9, GJChronology.getInstance());
+        check(test.withYear(2000), 2000, 6, 9);
+        check(test.withMonthOfYear(2), 1970, 2, 9);
+        check(test.withDayOfMonth(2), 1970, 6, 2);
+        check(test.withDayOfYear(6), 1970, 1, 6);
+        check(test.withDayOfWeek(6), 1970, 6, 13);
+        check(test.withWeekOfWeekyear(6), 1970, 2, 3);
+        check(test.withWeekyear(1971), 1971, 6, 15);
+        check(test.withYearOfCentury(60), 1960, 6, 9);
+        check(test.withCenturyOfEra(21), 2070, 6, 9);
+        check(test.withYearOfEra(1066), 1066, 6, 9);
+        check(test.withEra(DateTimeConstants.BC), -1970, 6, 9);
+        
+        try {
+            test.withMonthOfYear(0);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            test.withMonthOfYear(13);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
     public void testEqualsHashCode() {
         DateMidnight test1 = new DateMidnight(TEST_TIME1_UTC);
         DateMidnight test2 = new DateMidnight(TEST_TIME1_UTC);
@@ -966,4 +993,11 @@ public DateTimeField getField(Chronology chronology) {
         } catch (IllegalArgumentException ex) {}
     }
 
+    //-----------------------------------------------------------------------
+    private void check(DateMidnight test, int year, int month, int day) {
+        assertEquals(year, test.getYear());
+        assertEquals(month, test.getMonthOfYear());
+        assertEquals(day, test.getDayOfMonth());
+    }
+
 }
diff --git a/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java b/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java
index b9bf6ec52..9b624abba 100644
--- a/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java
@@ -32,6 +32,7 @@
 import org.joda.time.chrono.BaseChronology;
 import org.joda.time.chrono.BuddhistChronology;
 import org.joda.time.chrono.CopticChronology;
+import org.joda.time.chrono.GJChronology;
 import org.joda.time.chrono.GregorianChronology;
 import org.joda.time.chrono.ISOChronology;
 import org.joda.time.field.UnsupportedDateTimeField;
@@ -207,7 +208,8 @@ public void testIsSupported_DateTimeFieldType() {
         assertEquals(false, test.isSupported(null));
     }
 
-    public void testGetMethods() {
+    //-----------------------------------------------------------------------
+    public void testGetters() {
         DateTime test = new DateTime();
         
         assertEquals(ISOChronology.getInstance(), test.getChronology());
@@ -234,6 +236,36 @@ public void testGetMethods() {
         assertEquals(60 * 60 * 1000, test.getMillisOfDay());
     }
 
+    public void testWithers() {
+        DateTime test = new DateTime(1970, 6, 9, 10, 20, 30, 40, GJChronology.getInstance());
+        check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40);
+        check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40);
+        check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40);
+        check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40);
+        check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40);
+        check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40);
+        check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40);
+        check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40);
+        check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40);
+        check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40);
+        check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40);
+        check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40);
+        check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40);
+        check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40);
+        check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6);
+        check(test.withMillisOfDay(61234), 1970, 6, 9, 0, 1, 1, 234);
+        
+        try {
+            test.withMonthOfYear(0);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            test.withMonthOfYear(13);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
     public void testEqualsHashCode() {
         DateTime test1 = new DateTime(TEST_TIME1);
         DateTime test2 = new DateTime(TEST_TIME1);
@@ -1150,4 +1182,15 @@ public DateTimeField getField(Chronology chronology) {
         } catch (IllegalArgumentException ex) {}
     }
 
+    //-----------------------------------------------------------------------
+    private void check(DateTime test, int year, int month, int day, int hour, int min, int sec, int mil) {
+        assertEquals(year, test.getYear());
+        assertEquals(month, test.getMonthOfYear());
+        assertEquals(day, test.getDayOfMonth());
+        assertEquals(hour, test.getHourOfDay());
+        assertEquals(min, test.getMinuteOfHour());
+        assertEquals(sec, test.getSecondOfMinute());
+        assertEquals(mil, test.getMillisOfSecond());
+    }
+
 }

From 0edd032e3628d452523bca9df56643b4b462fdb6 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 4 Apr 2006 23:02:33 +0000
Subject: [PATCH 066/115] Add withXxx methods to YearMonthDay/TimeOfDay

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1063 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  2 +-
 .../src/java/org/joda/time/TimeOfDay.java     | 79 ++++++++++++++++++-
 .../src/java/org/joda/time/YearMonthDay.java  | 60 +++++++++++++-
 .../org/joda/time/TestTimeOfDay_Basics.java   | 19 ++++-
 .../joda/time/TestYearMonthDay_Basics.java    | 18 ++++-
 5 files changed, 173 insertions(+), 5 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 94bb24fec..5209cb716 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -32,7 +32,7 @@ Enhancements since 1.2
   as possible to aid migration. The main difference is the method names on the
   property class.
 
-- DateTime/DateMidnight.withXxx()
+- DateTime/DateMidnight/YearMonthDay/TimeOfDay.withXxx()
   Add withXxx methods that allow an individul field to be changed, for example:
   firstOfMonth = today.withDayOfMonth(1);
   These methods are the immutable equivalent of set methods.
diff --git a/JodaTime/src/java/org/joda/time/TimeOfDay.java b/JodaTime/src/java/org/joda/time/TimeOfDay.java
index 979a335cd..200a24e17 100644
--- a/JodaTime/src/java/org/joda/time/TimeOfDay.java
+++ b/JodaTime/src/java/org/joda/time/TimeOfDay.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2006 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -868,6 +868,83 @@ public int getMillisOfSecond() {
         return getValue(MILLIS_OF_SECOND);
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Sets the hour of day field in a copy of this TimeOfDay, leaving this
+     * instance unchanged.
+     * <p>
+     * TimeOfDay is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * hour of day changed.
+     *
+     * @param hour  the hour of day to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     * @since 1.3
+     */
+    public TimeOfDay withHourOfDay(int hour) {
+        int[] newValues = getValues();
+        newValues = getChronology().hourOfDay().set(this, HOUR_OF_DAY, newValues, hour);
+        return new TimeOfDay(this, newValues);
+    }
+
+    /**
+     * Sets the minute of hour field in a copy of this TimeOfDay, leaving this
+     * instance unchanged.
+     * <p>
+     * TimeOfDay is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * minute of hour changed.
+     *
+     * @param minute  the minute of hour to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     * @since 1.3
+     */
+    public TimeOfDay withMinuteOfHour(int minute) {
+        int[] newValues = getValues();
+        newValues = getChronology().minuteOfHour().set(this, MINUTE_OF_HOUR, newValues, minute);
+        return new TimeOfDay(this, newValues);
+    }
+
+    /**
+     * Sets the second of minute field in a copy of this TimeOfDay, leaving this
+     * instance unchanged.
+     * <p>
+     * TimeOfDay is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * second of minute changed.
+     *
+     * @param second  the second of minute to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     * @since 1.3
+     */
+    public TimeOfDay withSecondOfMinute(int second) {
+        int[] newValues = getValues();
+        newValues = getChronology().secondOfMinute().set(this, SECOND_OF_MINUTE, newValues, second);
+        return new TimeOfDay(this, newValues);
+    }
+
+    /**
+     * Sets the millis of second field in a copy of this TimeOfDay, leaving this
+     * instance unchanged.
+     * <p>
+     * TimeOfDay is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * millis of second changed.
+     *
+     * @param millis  the millis of second to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     * @since 1.3
+     */
+    public TimeOfDay withMillisOfSecond(int millis) {
+        int[] newValues = getValues();
+        newValues = getChronology().millisOfSecond().set(this, MILLIS_OF_SECOND, newValues, millis);
+        return new TimeOfDay(this, newValues);
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Get the hour of day (0-23) field property
diff --git a/JodaTime/src/java/org/joda/time/YearMonthDay.java b/JodaTime/src/java/org/joda/time/YearMonthDay.java
index 22089cb1a..b2587ca84 100644
--- a/JodaTime/src/java/org/joda/time/YearMonthDay.java
+++ b/JodaTime/src/java/org/joda/time/YearMonthDay.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2006 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -800,6 +800,64 @@ public int getDayOfMonth() {
         return getValue(DAY_OF_MONTH);
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Sets the year field in a copy of this YearMonthDay, leaving this
+     * instance unchanged.
+     * <p>
+     * YearMonthDay is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * year changed.
+     *
+     * @param year  the year to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     * @since 1.3
+     */
+    public YearMonthDay withYear(int year) {
+        int[] newValues = getValues();
+        newValues = getChronology().year().set(this, YEAR, newValues, year);
+        return new YearMonthDay(this, newValues);
+    }
+
+    /**
+     * Sets the month of year field in a copy of this YearMonthDay, leaving this
+     * instance unchanged.
+     * <p>
+     * YearMonthDay is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * month of year changed.
+     *
+     * @param monthOfYear  the month of year to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     * @since 1.3
+     */
+    public YearMonthDay withMonthOfYear(int monthOfYear) {
+        int[] newValues = getValues();
+        newValues = getChronology().monthOfYear().set(this, MONTH_OF_YEAR, newValues, monthOfYear);
+        return new YearMonthDay(this, newValues);
+    }
+
+    /**
+     * Sets the day of month field in a copy of this YearMonthDay, leaving this
+     * instance unchanged.
+     * <p>
+     * YearMonthDay is immutable, so there are no set methods.
+     * Instead, this method returns a new instance with the value of
+     * day of month changed.
+     *
+     * @param dayOfMonth  the day of month to set
+     * @return a copy of this object with the field set
+     * @throws IllegalArgumentException if the value is invalid
+     * @since 1.3
+     */
+    public YearMonthDay withDayOfMonth(int dayOfMonth) {
+        int[] newValues = getValues();
+        newValues = getChronology().dayOfMonth().set(this, DAY_OF_MONTH, newValues, dayOfMonth);
+        return new YearMonthDay(this, newValues);
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Get the year field property
diff --git a/JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java b/JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java
index ebc09d9a0..b4c2ca33c 100644
--- a/JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2006 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -816,6 +816,23 @@ public void testToDateTime_nullRI() {
         assertEquals("1970-01-02T01:02:03.004+01:00", test.toString());
     }
 
+    //-----------------------------------------------------------------------
+    public void testWithers() {
+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);
+        check(test.withHourOfDay(6), 6, 20, 30, 40);
+        check(test.withMinuteOfHour(6), 10, 6, 30, 40);
+        check(test.withSecondOfMinute(6), 10, 20, 6, 40);
+        check(test.withMillisOfSecond(6), 10, 20, 30, 6);
+        try {
+            test.withHourOfDay(-1);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            test.withHourOfDay(24);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
     //-----------------------------------------------------------------------
     public void testProperty() {
         TimeOfDay test = new TimeOfDay(10, 20, 30, 40);
diff --git a/JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java b/JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java
index a2f38c8de..54b6fc4e7 100644
--- a/JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2006 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -749,6 +749,22 @@ public void testToInterval_nullZone() {
         assertEquals(expected, test);
     }
 
+    //-----------------------------------------------------------------------
+    public void testWithers() {
+        YearMonthDay test = new YearMonthDay(1970, 6, 9);
+        check(test.withYear(2000), 2000, 6, 9);
+        check(test.withMonthOfYear(2), 1970, 2, 9);
+        check(test.withDayOfMonth(2), 1970, 6, 2);
+        try {
+            test.withMonthOfYear(0);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+        try {
+            test.withMonthOfYear(13);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
     //-----------------------------------------------------------------------
     public void testProperty() {
         YearMonthDay test = new YearMonthDay(2005, 6, 9);

From 5bc953f3cf3629a86991eac7703608603d303b7d Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 8 Apr 2006 10:42:03 +0000
Subject: [PATCH 067/115] Optimise when converting local milliseconds to the
 same zone

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1064 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/DateTimeZone.java     | 5 ++++-
 JodaTime/src/test/org/joda/time/TestDateTimeZone.java | 7 ++++++-
 2 files changed, 10 insertions(+), 2 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/DateTimeZone.java b/JodaTime/src/java/org/joda/time/DateTimeZone.java
index f996f10c8..5f85540ee 100644
--- a/JodaTime/src/java/org/joda/time/DateTimeZone.java
+++ b/JodaTime/src/java/org/joda/time/DateTimeZone.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2006 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -837,6 +837,9 @@ public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant) {
         if (newZone == null) {
             newZone = DateTimeZone.getDefault();
         }
+        if (newZone == this) {
+            return oldInstant;
+        }
         long instantLocal = oldInstant + getOffset(oldInstant);
         return instantLocal - newZone.getOffsetFromLocal(instantLocal);
     }
diff --git a/JodaTime/src/test/org/joda/time/TestDateTimeZone.java b/JodaTime/src/test/org/joda/time/TestDateTimeZone.java
index 9b5a44677..8bc74cbff 100644
--- a/JodaTime/src/test/org/joda/time/TestDateTimeZone.java
+++ b/JodaTime/src/test/org/joda/time/TestDateTimeZone.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2006 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -676,6 +676,11 @@ public void testGetMillisKeepLocal() {
         long millisLondon = TEST_TIME_SUMMER;
         long millisParis = TEST_TIME_SUMMER - 1L * DateTimeConstants.MILLIS_PER_HOUR;
         
+        assertEquals(millisLondon, LONDON.getMillisKeepLocal(LONDON, millisLondon));
+        assertEquals(millisParis, LONDON.getMillisKeepLocal(LONDON, millisParis));
+        assertEquals(millisLondon, PARIS.getMillisKeepLocal(PARIS, millisLondon));
+        assertEquals(millisParis, PARIS.getMillisKeepLocal(PARIS, millisParis));
+        
         assertEquals(millisParis, LONDON.getMillisKeepLocal(PARIS, millisLondon));
         assertEquals(millisLondon, PARIS.getMillisKeepLocal(LONDON, millisParis));
         

From cd35cbcf256b26596fbad2da6c74a0f5c15591e7 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 8 Apr 2006 10:51:34 +0000
Subject: [PATCH 068/115] Extract chronologies to constants

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1065 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../joda/time/TestDateMidnight_Basics.java    | 215 +++++++++---------
 1 file changed, 111 insertions(+), 104 deletions(-)

diff --git a/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java b/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java
index 221b3d9d3..bbfabd611 100644
--- a/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java
@@ -51,7 +51,14 @@
     private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
     private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
     private static final DateTimeZone NEWYORK = DateTimeZone.forID("America/New_York");
-    
+    private static final ISOChronology ISO_DEFAULT = ISOChronology.getInstance();
+    private static final ISOChronology ISO_PARIS = ISOChronology.getInstance(PARIS);
+    private static final GJChronology GJ_DEFAULT = GJChronology.getInstance();
+    private static final GregorianChronology GREGORIAN_DEFAULT = GregorianChronology.getInstance();
+    private static final GregorianChronology GREGORIAN_PARIS = GregorianChronology.getInstance(PARIS);
+    private static final BuddhistChronology BUDDHIST_DEFAULT = BuddhistChronology.getInstance();
+    private static final CopticChronology COPTIC_DEFAULT = CopticChronology.getInstance();
+
     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 
                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 
                      365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
@@ -139,28 +146,28 @@ public void testTest() {
     //-----------------------------------------------------------------------
     public void testGet_DateTimeField() {
         DateMidnight test = new DateMidnight();
-        assertEquals(1, test.get(ISOChronology.getInstance().era()));
-        assertEquals(20, test.get(ISOChronology.getInstance().centuryOfEra()));
-        assertEquals(2, test.get(ISOChronology.getInstance().yearOfCentury()));
-        assertEquals(2002, test.get(ISOChronology.getInstance().yearOfEra()));
-        assertEquals(2002, test.get(ISOChronology.getInstance().year()));
-        assertEquals(6, test.get(ISOChronology.getInstance().monthOfYear()));
-        assertEquals(9, test.get(ISOChronology.getInstance().dayOfMonth()));
-        assertEquals(2002, test.get(ISOChronology.getInstance().weekyear()));
-        assertEquals(23, test.get(ISOChronology.getInstance().weekOfWeekyear()));
-        assertEquals(7, test.get(ISOChronology.getInstance().dayOfWeek()));
-        assertEquals(160, test.get(ISOChronology.getInstance().dayOfYear()));
-        assertEquals(0, test.get(ISOChronology.getInstance().halfdayOfDay()));
-        assertEquals(0, test.get(ISOChronology.getInstance().hourOfHalfday()));
-        assertEquals(24, test.get(ISOChronology.getInstance().clockhourOfDay()));
-        assertEquals(12, test.get(ISOChronology.getInstance().clockhourOfHalfday()));
-        assertEquals(0, test.get(ISOChronology.getInstance().hourOfDay()));
-        assertEquals(0, test.get(ISOChronology.getInstance().minuteOfHour()));
-        assertEquals(0, test.get(ISOChronology.getInstance().minuteOfDay()));
-        assertEquals(0, test.get(ISOChronology.getInstance().secondOfMinute()));
-        assertEquals(0, test.get(ISOChronology.getInstance().secondOfDay()));
-        assertEquals(0, test.get(ISOChronology.getInstance().millisOfSecond()));
-        assertEquals(0, test.get(ISOChronology.getInstance().millisOfDay()));
+        assertEquals(1, test.get(ISO_DEFAULT.era()));
+        assertEquals(20, test.get(ISO_DEFAULT.centuryOfEra()));
+        assertEquals(2, test.get(ISO_DEFAULT.yearOfCentury()));
+        assertEquals(2002, test.get(ISO_DEFAULT.yearOfEra()));
+        assertEquals(2002, test.get(ISO_DEFAULT.year()));
+        assertEquals(6, test.get(ISO_DEFAULT.monthOfYear()));
+        assertEquals(9, test.get(ISO_DEFAULT.dayOfMonth()));
+        assertEquals(2002, test.get(ISO_DEFAULT.weekyear()));
+        assertEquals(23, test.get(ISO_DEFAULT.weekOfWeekyear()));
+        assertEquals(7, test.get(ISO_DEFAULT.dayOfWeek()));
+        assertEquals(160, test.get(ISO_DEFAULT.dayOfYear()));
+        assertEquals(0, test.get(ISO_DEFAULT.halfdayOfDay()));
+        assertEquals(0, test.get(ISO_DEFAULT.hourOfHalfday()));
+        assertEquals(24, test.get(ISO_DEFAULT.clockhourOfDay()));
+        assertEquals(12, test.get(ISO_DEFAULT.clockhourOfHalfday()));
+        assertEquals(0, test.get(ISO_DEFAULT.hourOfDay()));
+        assertEquals(0, test.get(ISO_DEFAULT.minuteOfHour()));
+        assertEquals(0, test.get(ISO_DEFAULT.minuteOfDay()));
+        assertEquals(0, test.get(ISO_DEFAULT.secondOfMinute()));
+        assertEquals(0, test.get(ISO_DEFAULT.secondOfDay()));
+        assertEquals(0, test.get(ISO_DEFAULT.millisOfSecond()));
+        assertEquals(0, test.get(ISO_DEFAULT.millisOfDay()));
         try {
             test.get((DateTimeField) null);
             fail();
@@ -201,7 +208,7 @@ public void testGet_DateTimeFieldType() {
     public void testGetters() {
         DateMidnight test = new DateMidnight();
         
-        assertEquals(ISOChronology.getInstance(), test.getChronology());
+        assertEquals(ISO_DEFAULT, test.getChronology());
         assertEquals(LONDON, test.getZone());
         assertEquals(TEST_TIME_NOW_LONDON, test.getMillis());
         
@@ -226,7 +233,7 @@ public void testGetters() {
     }
 
     public void testWithers() {
-        DateMidnight test = new DateMidnight(1970, 6, 9, GJChronology.getInstance());
+        DateMidnight test = new DateMidnight(1970, 6, 9, GJ_DEFAULT);
         check(test.withYear(2000), 2000, 6, 9);
         check(test.withMonthOfYear(2), 1970, 2, 9);
         check(test.withDayOfMonth(2), 1970, 6, 2);
@@ -271,7 +278,7 @@ public void testEqualsHashCode() {
         
         assertEquals(false, test1.equals("Hello"));
         assertEquals(true, test1.equals(new MockInstant()));
-        assertEquals(false, test1.equals(new DateMidnight(TEST_TIME1_UTC, GregorianChronology.getInstance())));
+        assertEquals(false, test1.equals(new DateMidnight(TEST_TIME1_UTC, GREGORIAN_DEFAULT)));
     }
     
     class MockInstant extends AbstractInstant {
@@ -282,7 +289,7 @@ public long getMillis() {
             return TEST_TIME1_LONDON;
         }
         public Chronology getChronology() {
-            return ISOChronology.getInstance();
+            return ISO_DEFAULT;
         }
     }
 
@@ -298,7 +305,7 @@ public void testCompareTo() {
         assertEquals(-1, test1.compareTo(test2));
         assertEquals(+1, test2.compareTo(test1));
         
-        DateMidnight test3 = new DateMidnight(TEST_TIME2_UTC, GregorianChronology.getInstance(PARIS));
+        DateMidnight test3 = new DateMidnight(TEST_TIME2_UTC, GREGORIAN_PARIS);
         assertEquals(-1, test1.compareTo(test3));
         assertEquals(+1, test3.compareTo(test1));
         assertEquals(-1, test3.compareTo(test2));  // midnight paris before london
@@ -328,7 +335,7 @@ public void testIsEqual() {
         assertEquals(false, test1.isEqual(test2));
         assertEquals(false, test2.isEqual(test1));
         
-        DateMidnight test3 = new DateMidnight(TEST_TIME2_UTC, GregorianChronology.getInstance(PARIS));
+        DateMidnight test3 = new DateMidnight(TEST_TIME2_UTC, GREGORIAN_PARIS);
         assertEquals(false, test1.isEqual(test3));
         assertEquals(false, test3.isEqual(test1));
         assertEquals(false, test3.isEqual(test2));  // midnight paris before london
@@ -357,7 +364,7 @@ public void testIsBefore() {
         assertEquals(true, test1.isBefore(test2));
         assertEquals(false, test2.isBefore(test1));
         
-        DateMidnight test3 = new DateMidnight(TEST_TIME2_UTC, GregorianChronology.getInstance(PARIS));
+        DateMidnight test3 = new DateMidnight(TEST_TIME2_UTC, GREGORIAN_PARIS);
         assertEquals(true, test1.isBefore(test3));
         assertEquals(false, test3.isBefore(test1));
         assertEquals(true, test3.isBefore(test2));  // midnight paris before london
@@ -386,7 +393,7 @@ public void testIsAfter() {
         assertEquals(false, test1.isAfter(test2));
         assertEquals(true, test2.isAfter(test1));
         
-        DateMidnight test3 = new DateMidnight(TEST_TIME2_UTC, GregorianChronology.getInstance(PARIS));
+        DateMidnight test3 = new DateMidnight(TEST_TIME2_UTC, GREGORIAN_PARIS);
         assertEquals(false, test1.isAfter(test3));
         assertEquals(true, test3.isAfter(test1));
         assertEquals(false, test3.isAfter(test2));  // midnight paris before london
@@ -475,7 +482,7 @@ public void testToDateTimeISO() {
         assertSame(DateTime.class, result.getClass());
         assertSame(ISOChronology.class, result.getChronology().getClass());
         assertEquals(test.getMillis(), result.getMillis());
-        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());
+        assertEquals(ISO_PARIS, result.getChronology());
     }
 
     public void testToDateTime_DateTimeZone() {
@@ -506,35 +513,35 @@ public void testToDateTime_DateTimeZone() {
 
     public void testToDateTime_Chronology() {
         DateMidnight test = new DateMidnight(TEST_TIME1_UTC);
-        DateTime result = test.toDateTime(ISOChronology.getInstance());
+        DateTime result = test.toDateTime(ISO_DEFAULT);
         assertEquals(test.getMillis(), result.getMillis());
         assertEquals(TEST_TIME1_LONDON, result.getMillis());
         assertEquals(LONDON, result.getZone());
 
         test = new DateMidnight(TEST_TIME1_UTC);
-        result = test.toDateTime(GregorianChronology.getInstance(PARIS));
+        result = test.toDateTime(GREGORIAN_PARIS);
         assertEquals(test.getMillis(), result.getMillis());
         assertEquals(TEST_TIME1_LONDON, result.getMillis());
-        assertEquals(GregorianChronology.getInstance(PARIS), result.getChronology());
+        assertEquals(GREGORIAN_PARIS, result.getChronology());
 
-        test = new DateMidnight(TEST_TIME1_UTC, GregorianChronology.getInstance(PARIS));
+        test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS);
         result = test.toDateTime((Chronology) null);
         assertEquals(test.getMillis(), result.getMillis());
         assertEquals(TEST_TIME1_PARIS, result.getMillis());
-        assertEquals(ISOChronology.getInstance(), result.getChronology());
+        assertEquals(ISO_DEFAULT, result.getChronology());
 
         test = new DateMidnight(TEST_TIME1_UTC);
         result = test.toDateTime((Chronology) null);
         assertEquals(test.getMillis(), result.getMillis());
         assertEquals(TEST_TIME1_LONDON, result.getMillis());
-        assertEquals(ISOChronology.getInstance(), result.getChronology());
+        assertEquals(ISO_DEFAULT, result.getChronology());
     }
 
     public void testToMutableDateTime() {
         DateMidnight test = new DateMidnight(TEST_TIME1_UTC, PARIS);
         MutableDateTime result = test.toMutableDateTime();
         assertEquals(test.getMillis(), result.getMillis());
-        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());
+        assertEquals(ISO_PARIS, result.getChronology());
     }
 
     public void testToMutableDateTimeISO() {
@@ -543,51 +550,51 @@ public void testToMutableDateTimeISO() {
         assertSame(MutableDateTime.class, result.getClass());
         assertSame(ISOChronology.class, result.getChronology().getClass());
         assertEquals(test.getMillis(), result.getMillis());
-        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());
+        assertEquals(ISO_PARIS, result.getChronology());
     }
 
     public void testToMutableDateTime_DateTimeZone() {
         DateMidnight test = new DateMidnight(TEST_TIME1_UTC);
         MutableDateTime result = test.toMutableDateTime(LONDON);
         assertEquals(test.getMillis(), result.getMillis());
-        assertEquals(ISOChronology.getInstance(), result.getChronology());
+        assertEquals(ISO_DEFAULT, result.getChronology());
 
         test = new DateMidnight(TEST_TIME1_UTC);
         result = test.toMutableDateTime(PARIS);
         assertEquals(test.getMillis(), result.getMillis());
-        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());
+        assertEquals(ISO_PARIS, result.getChronology());
 
         test = new DateMidnight(TEST_TIME1_UTC, PARIS);
         result = test.toMutableDateTime((DateTimeZone) null);
         assertEquals(test.getMillis(), result.getMillis());
-        assertEquals(ISOChronology.getInstance(), result.getChronology());
+        assertEquals(ISO_DEFAULT, result.getChronology());
 
         test = new DateMidnight(TEST_TIME1_UTC);
         result = test.toMutableDateTime((DateTimeZone) null);
         assertEquals(test.getMillis(), result.getMillis());
-        assertEquals(ISOChronology.getInstance(), result.getChronology());
+        assertEquals(ISO_DEFAULT, result.getChronology());
     }
 
     public void testToMutableDateTime_Chronology() {
         DateMidnight test = new DateMidnight(TEST_TIME1_UTC);
-        MutableDateTime result = test.toMutableDateTime(ISOChronology.getInstance());
+        MutableDateTime result = test.toMutableDateTime(ISO_DEFAULT);
         assertEquals(test.getMillis(), result.getMillis());
-        assertEquals(ISOChronology.getInstance(), result.getChronology());
+        assertEquals(ISO_DEFAULT, result.getChronology());
 
         test = new DateMidnight(TEST_TIME1_UTC);
-        result = test.toMutableDateTime(GregorianChronology.getInstance(PARIS));
+        result = test.toMutableDateTime(GREGORIAN_PARIS);
         assertEquals(test.getMillis(), result.getMillis());
-        assertEquals(GregorianChronology.getInstance(PARIS), result.getChronology());
+        assertEquals(GREGORIAN_PARIS, result.getChronology());
 
-        test = new DateMidnight(TEST_TIME1_UTC, GregorianChronology.getInstance(PARIS));
+        test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS);
         result = test.toMutableDateTime((Chronology) null);
         assertEquals(test.getMillis(), result.getMillis());
-        assertEquals(ISOChronology.getInstance(), result.getChronology());
+        assertEquals(ISO_DEFAULT, result.getChronology());
 
         test = new DateMidnight(TEST_TIME1_UTC);
         result = test.toMutableDateTime((Chronology) null);
         assertEquals(test.getMillis(), result.getMillis());
-        assertEquals(ISOChronology.getInstance(), result.getChronology());
+        assertEquals(ISO_DEFAULT, result.getChronology());
     }
 
     public void testToDate() {
@@ -627,13 +634,13 @@ public void testToGregorianCalendar() {
 
     //-----------------------------------------------------------------------
     public void testToYearMonthDay() {
-        DateMidnight base = new DateMidnight(TEST_TIME1_UTC, CopticChronology.getInstance());
+        DateMidnight base = new DateMidnight(TEST_TIME1_UTC, COPTIC_DEFAULT);
         YearMonthDay test = base.toYearMonthDay();
-        assertEquals(new YearMonthDay(TEST_TIME1_UTC, CopticChronology.getInstance()), test);
+        assertEquals(new YearMonthDay(TEST_TIME1_UTC, COPTIC_DEFAULT), test);
     }
 
     public void testToInterval() {
-        DateMidnight base = new DateMidnight(TEST_TIME1_UTC, CopticChronology.getInstance());
+        DateMidnight base = new DateMidnight(TEST_TIME1_UTC, COPTIC_DEFAULT);
         Interval test = base.toInterval();
         DateMidnight end = base.plus(Period.days(1));
         assertEquals(new Interval(base, end), test);
@@ -646,7 +653,7 @@ public void testWithMillis_long() {
         assertEquals(TEST_TIME2_LONDON, result.getMillis());
         assertEquals(test.getChronology(), result.getChronology());
         
-        test = new DateMidnight(TEST_TIME1_UTC, GregorianChronology.getInstance(PARIS));
+        test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS);
         result = test.withMillis(TEST_TIME2_UTC);
         assertEquals(TEST_TIME2_PARIS, result.getMillis());
         assertEquals(test.getChronology(), result.getChronology());
@@ -658,25 +665,25 @@ public void testWithMillis_long() {
 
     public void testWithChronology_Chronology() {
         DateMidnight test = new DateMidnight(TEST_TIME1_UTC);
-        DateMidnight result = test.withChronology(GregorianChronology.getInstance(PARIS));
+        DateMidnight result = test.withChronology(GREGORIAN_PARIS);
         assertEquals(TEST_TIME1_LONDON, test.getMillis());
         assertEquals(TEST_TIME1_PARIS, result.getMillis());
-        assertEquals(GregorianChronology.getInstance(PARIS), result.getChronology());
+        assertEquals(GREGORIAN_PARIS, result.getChronology());
         
-        test = new DateMidnight(TEST_TIME1_UTC, GregorianChronology.getInstance(PARIS));
+        test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS);
         result = test.withChronology(null);
         assertEquals(TEST_TIME1_PARIS, test.getMillis());
         // midnight Paris is previous day in London
         assertEquals(TEST_TIME1_LONDON - DateTimeConstants.MILLIS_PER_DAY, result.getMillis());
-        assertEquals(ISOChronology.getInstance(), result.getChronology());
+        assertEquals(ISO_DEFAULT, result.getChronology());
         
         test = new DateMidnight(TEST_TIME1_UTC);
         result = test.withChronology(null);
         assertEquals(test.getMillis(), result.getMillis());
-        assertEquals(ISOChronology.getInstance(), result.getChronology());
+        assertEquals(ISO_DEFAULT, result.getChronology());
         
         test = new DateMidnight(TEST_TIME1_UTC);
-        result = test.withChronology(ISOChronology.getInstance());
+        result = test.withChronology(ISO_DEFAULT);
         assertSame(test, result);
     }
 
@@ -685,13 +692,13 @@ public void testWithZoneRetainFields_DateTimeZone() {
         DateMidnight result = test.withZoneRetainFields(PARIS);
         assertEquals(TEST_TIME1_LONDON, test.getMillis());
         assertEquals(TEST_TIME1_PARIS, result.getMillis());
-        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());
+        assertEquals(ISO_PARIS, result.getChronology());
         
-        test = new DateMidnight(TEST_TIME1_UTC, GregorianChronology.getInstance(PARIS));
+        test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS);
         result = test.withZoneRetainFields(null);
         assertEquals(TEST_TIME1_PARIS, test.getMillis());
         assertEquals(TEST_TIME1_LONDON, result.getMillis());
-        assertEquals(GregorianChronology.getInstance(), result.getChronology());
+        assertEquals(GREGORIAN_DEFAULT, result.getChronology());
         
         test = new DateMidnight(TEST_TIME1_UTC);
         result = test.withZoneRetainFields(LONDON);
@@ -768,28 +775,28 @@ public void testWithFieldAdded4() {
 
     //-----------------------------------------------------------------------
     public void testWithDurationAdded_long_int() {
-        DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BuddhistChronology.getInstance());
+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT);
         DateMidnight result = test.withDurationAdded(123456789L, 1);
-        DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BuddhistChronology.getInstance());
+        DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BUDDHIST_DEFAULT);
         assertEquals(expected, result);
         
         result = test.withDurationAdded(123456789L, 0);
         assertSame(test, result);
         
         result = test.withDurationAdded(123456789L, 2);
-        expected = new DateMidnight(test.getMillis() + (2L * 123456789L), BuddhistChronology.getInstance());
+        expected = new DateMidnight(test.getMillis() + (2L * 123456789L), BUDDHIST_DEFAULT);
         assertEquals(expected, result);
         
         result = test.withDurationAdded(123456789L, -3);
-        expected = new DateMidnight(test.getMillis() - (3L * 123456789L), BuddhistChronology.getInstance());
+        expected = new DateMidnight(test.getMillis() - (3L * 123456789L), BUDDHIST_DEFAULT);
         assertEquals(expected, result);
     }
     
     //-----------------------------------------------------------------------
     public void testWithDurationAdded_RD_int() {
-        DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BuddhistChronology.getInstance());
+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT);
         DateMidnight result = test.withDurationAdded(new Duration(123456789L), 1);
-        DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BuddhistChronology.getInstance());
+        DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BUDDHIST_DEFAULT);
         assertEquals(expected, result);
         
         result = test.withDurationAdded(null, 1);
@@ -799,19 +806,19 @@ public void testWithDurationAdded_RD_int() {
         assertSame(test, result);
         
         result = test.withDurationAdded(new Duration(123456789L), 2);
-        expected = new DateMidnight(test.getMillis() + (2L * 123456789L), BuddhistChronology.getInstance());
+        expected = new DateMidnight(test.getMillis() + (2L * 123456789L), BUDDHIST_DEFAULT);
         assertEquals(expected, result);
         
         result = test.withDurationAdded(new Duration(123456789L), -3);
-        expected = new DateMidnight(test.getMillis() - (3L * 123456789L), BuddhistChronology.getInstance());
+        expected = new DateMidnight(test.getMillis() - (3L * 123456789L), BUDDHIST_DEFAULT);
         assertEquals(expected, result);
     }
 
     //-----------------------------------------------------------------------
     public void testWithDurationAdded_RP_int() {
-        DateMidnight test = new DateMidnight(2002, 5, 3, BuddhistChronology.getInstance());
+        DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT);
         DateMidnight result = test.withPeriodAdded(new Period(1, 2, 3, 4, 5, 6, 7, 8), 1);
-        DateMidnight expected = new DateMidnight(2003, 7, 28, BuddhistChronology.getInstance());
+        DateMidnight expected = new DateMidnight(2003, 7, 28, BUDDHIST_DEFAULT);
         assertEquals(expected, result);
         
         result = test.withPeriodAdded(null, 1);
@@ -821,26 +828,26 @@ public void testWithDurationAdded_RP_int() {
         assertSame(test, result);
         
         result = test.withPeriodAdded(new Period(1, 2, 0, 4, 5, 6, 7, 8), 3);
-        expected = new DateMidnight(2005, 11, 15, BuddhistChronology.getInstance());
+        expected = new DateMidnight(2005, 11, 15, BUDDHIST_DEFAULT);
         assertEquals(expected, result);
         
         result = test.withPeriodAdded(new Period(1, 2, 0, 1, 1, 2, 3, 4), -1);
-        expected = new DateMidnight(2001, 3, 1, BuddhistChronology.getInstance());
+        expected = new DateMidnight(2001, 3, 1, BUDDHIST_DEFAULT);
         assertEquals(expected, result);
     }
 
     //-----------------------------------------------------------------------    
     public void testPlus_long() {
-        DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BuddhistChronology.getInstance());
+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT);
         DateMidnight result = test.plus(123456789L);
-        DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BuddhistChronology.getInstance());
+        DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BUDDHIST_DEFAULT);
         assertEquals(expected, result);
     }
     
     public void testPlus_RD() {
-        DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BuddhistChronology.getInstance());
+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT);
         DateMidnight result = test.plus(new Duration(123456789L));
-        DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BuddhistChronology.getInstance());
+        DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BUDDHIST_DEFAULT);
         assertEquals(expected, result);
         
         result = test.plus((ReadableDuration) null);
@@ -848,9 +855,9 @@ public void testPlus_RD() {
     }
 
     public void testPlus_RP() {
-        DateMidnight test = new DateMidnight(2002, 5, 3, BuddhistChronology.getInstance());
+        DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT);
         DateMidnight result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8));
-        DateMidnight expected = new DateMidnight(2003, 7, 28, BuddhistChronology.getInstance());
+        DateMidnight expected = new DateMidnight(2003, 7, 28, BUDDHIST_DEFAULT);
         assertEquals(expected, result);
         
         result = test.plus((ReadablePeriod) null);
@@ -858,9 +865,9 @@ public void testPlus_RP() {
     }
 
     public void testPlusYears_int() {
-        DateMidnight test = new DateMidnight(2002, 5, 3, BuddhistChronology.getInstance());
+        DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT);
         DateMidnight result = test.plusYears(1);
-        DateMidnight expected = new DateMidnight(2003, 5, 3, BuddhistChronology.getInstance());
+        DateMidnight expected = new DateMidnight(2003, 5, 3, BUDDHIST_DEFAULT);
         assertEquals(expected, result);
         
         result = test.plusYears(0);
@@ -868,9 +875,9 @@ public void testPlusYears_int() {
     }
 
     public void testPlusMonths_int() {
-        DateMidnight test = new DateMidnight(2002, 5, 3, BuddhistChronology.getInstance());
+        DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT);
         DateMidnight result = test.plusMonths(1);
-        DateMidnight expected = new DateMidnight(2002, 6, 3, BuddhistChronology.getInstance());
+        DateMidnight expected = new DateMidnight(2002, 6, 3, BUDDHIST_DEFAULT);
         assertEquals(expected, result);
         
         result = test.plusMonths(0);
@@ -878,9 +885,9 @@ public void testPlusMonths_int() {
     }
 
     public void testPlusWeeks_int() {
-        DateMidnight test = new DateMidnight(2002, 5, 3, BuddhistChronology.getInstance());
+        DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT);
         DateMidnight result = test.plusWeeks(1);
-        DateMidnight expected = new DateMidnight(2002, 5, 10, BuddhistChronology.getInstance());
+        DateMidnight expected = new DateMidnight(2002, 5, 10, BUDDHIST_DEFAULT);
         assertEquals(expected, result);
         
         result = test.plusWeeks(0);
@@ -888,9 +895,9 @@ public void testPlusWeeks_int() {
     }
 
     public void testPlusDays_int() {
-        DateMidnight test = new DateMidnight(2002, 5, 3, BuddhistChronology.getInstance());
+        DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT);
         DateMidnight result = test.plusDays(1);
-        DateMidnight expected = new DateMidnight(2002, 5, 4, BuddhistChronology.getInstance());
+        DateMidnight expected = new DateMidnight(2002, 5, 4, BUDDHIST_DEFAULT);
         assertEquals(expected, result);
         
         result = test.plusDays(0);
@@ -899,16 +906,16 @@ public void testPlusDays_int() {
 
     //-----------------------------------------------------------------------    
     public void testMinus_long() {
-        DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BuddhistChronology.getInstance());
+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT);
         DateMidnight result = test.minus(123456789L);
-        DateMidnight expected = new DateMidnight(test.getMillis() - 123456789L, BuddhistChronology.getInstance());
+        DateMidnight expected = new DateMidnight(test.getMillis() - 123456789L, BUDDHIST_DEFAULT);
         assertEquals(expected, result);
     }
 
     public void testMinus_RD() {
-        DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BuddhistChronology.getInstance());
+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT);
         DateMidnight result = test.minus(new Duration(123456789L));
-        DateMidnight expected = new DateMidnight(test.getMillis() - 123456789L, BuddhistChronology.getInstance());
+        DateMidnight expected = new DateMidnight(test.getMillis() - 123456789L, BUDDHIST_DEFAULT);
         assertEquals(expected, result);
         
         result = test.minus((ReadableDuration) null);
@@ -916,9 +923,9 @@ public void testMinus_RD() {
     }
 
     public void testMinus_RP() {
-        DateMidnight test = new DateMidnight(2002, 5, 3, BuddhistChronology.getInstance());
+        DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT);
         DateMidnight result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1));
-        DateMidnight expected = new DateMidnight(2001, 3, 25, BuddhistChronology.getInstance());
+        DateMidnight expected = new DateMidnight(2001, 3, 25, BUDDHIST_DEFAULT);
         assertEquals(expected, result);
         
         result = test.minus((ReadablePeriod) null);
@@ -926,9 +933,9 @@ public void testMinus_RP() {
     }
 
     public void testMinusYears_int() {
-        DateMidnight test = new DateMidnight(2002, 5, 3, BuddhistChronology.getInstance());
+        DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT);
         DateMidnight result = test.minusYears(1);
-        DateMidnight expected = new DateMidnight(2001, 5, 3, BuddhistChronology.getInstance());
+        DateMidnight expected = new DateMidnight(2001, 5, 3, BUDDHIST_DEFAULT);
         assertEquals(expected, result);
         
         result = test.minusYears(0);
@@ -936,9 +943,9 @@ public void testMinusYears_int() {
     }
 
     public void testMinusMonths_int() {
-        DateMidnight test = new DateMidnight(2002, 5, 3, BuddhistChronology.getInstance());
+        DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT);
         DateMidnight result = test.minusMonths(1);
-        DateMidnight expected = new DateMidnight(2002, 4, 3, BuddhistChronology.getInstance());
+        DateMidnight expected = new DateMidnight(2002, 4, 3, BUDDHIST_DEFAULT);
         assertEquals(expected, result);
         
         result = test.minusMonths(0);
@@ -946,9 +953,9 @@ public void testMinusMonths_int() {
     }
 
     public void testMinusWeeks_int() {
-        DateMidnight test = new DateMidnight(2002, 5, 3, BuddhistChronology.getInstance());
+        DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT);
         DateMidnight result = test.minusWeeks(1);
-        DateMidnight expected = new DateMidnight(2002, 4, 26, BuddhistChronology.getInstance());
+        DateMidnight expected = new DateMidnight(2002, 4, 26, BUDDHIST_DEFAULT);
         assertEquals(expected, result);
         
         result = test.minusWeeks(0);
@@ -956,9 +963,9 @@ public void testMinusWeeks_int() {
     }
 
     public void testMinusDays_int() {
-        DateMidnight test = new DateMidnight(2002, 5, 3, BuddhistChronology.getInstance());
+        DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT);
         DateMidnight result = test.minusDays(1);
-        DateMidnight expected = new DateMidnight(2002, 5, 2, BuddhistChronology.getInstance());
+        DateMidnight expected = new DateMidnight(2002, 5, 2, BUDDHIST_DEFAULT);
         assertEquals(expected, result);
         
         result = test.minusDays(0);

From 45a8941a9037efd09b236373d73c9ece35d05132 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 8 Apr 2006 10:59:44 +0000
Subject: [PATCH 069/115] Extract chronologies to constants

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1066 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../org/joda/time/TestDateTime_Basics.java    | 275 +++++++++---------
 1 file changed, 142 insertions(+), 133 deletions(-)

diff --git a/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java b/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java
index 9b624abba..4532bfa5b 100644
--- a/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java
@@ -51,6 +51,15 @@
 
     private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
     private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
+    private static final ISOChronology ISO_UTC = ISOChronology.getInstanceUTC();
+    private static final ISOChronology ISO_DEFAULT = ISOChronology.getInstance();
+    private static final ISOChronology ISO_PARIS = ISOChronology.getInstance(PARIS);
+    private static final GJChronology GJ_DEFAULT = GJChronology.getInstance();
+    private static final GregorianChronology GREGORIAN_DEFAULT = GregorianChronology.getInstance();
+    private static final GregorianChronology GREGORIAN_PARIS = GregorianChronology.getInstance(PARIS);
+    private static final BuddhistChronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();
+    private static final BuddhistChronology BUDDHIST_DEFAULT = BuddhistChronology.getInstance();
+    private static final CopticChronology COPTIC_DEFAULT = CopticChronology.getInstance();
     
     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 
                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 
@@ -123,28 +132,28 @@ public void testTest() {
     //-----------------------------------------------------------------------
     public void testGet_DateTimeField() {
         DateTime test = new DateTime();
-        assertEquals(1, test.get(ISOChronology.getInstance().era()));
-        assertEquals(20, test.get(ISOChronology.getInstance().centuryOfEra()));
-        assertEquals(2, test.get(ISOChronology.getInstance().yearOfCentury()));
-        assertEquals(2002, test.get(ISOChronology.getInstance().yearOfEra()));
-        assertEquals(2002, test.get(ISOChronology.getInstance().year()));
-        assertEquals(6, test.get(ISOChronology.getInstance().monthOfYear()));
-        assertEquals(9, test.get(ISOChronology.getInstance().dayOfMonth()));
-        assertEquals(2002, test.get(ISOChronology.getInstance().weekyear()));
-        assertEquals(23, test.get(ISOChronology.getInstance().weekOfWeekyear()));
-        assertEquals(7, test.get(ISOChronology.getInstance().dayOfWeek()));
-        assertEquals(160, test.get(ISOChronology.getInstance().dayOfYear()));
-        assertEquals(0, test.get(ISOChronology.getInstance().halfdayOfDay()));
-        assertEquals(1, test.get(ISOChronology.getInstance().hourOfHalfday()));
-        assertEquals(1, test.get(ISOChronology.getInstance().clockhourOfDay()));
-        assertEquals(1, test.get(ISOChronology.getInstance().clockhourOfHalfday()));
-        assertEquals(1, test.get(ISOChronology.getInstance().hourOfDay()));
-        assertEquals(0, test.get(ISOChronology.getInstance().minuteOfHour()));
-        assertEquals(60, test.get(ISOChronology.getInstance().minuteOfDay()));
-        assertEquals(0, test.get(ISOChronology.getInstance().secondOfMinute()));
-        assertEquals(60 * 60, test.get(ISOChronology.getInstance().secondOfDay()));
-        assertEquals(0, test.get(ISOChronology.getInstance().millisOfSecond()));
-        assertEquals(60 * 60 * 1000, test.get(ISOChronology.getInstance().millisOfDay()));
+        assertEquals(1, test.get(ISO_DEFAULT.era()));
+        assertEquals(20, test.get(ISO_DEFAULT.centuryOfEra()));
+        assertEquals(2, test.get(ISO_DEFAULT.yearOfCentury()));
+        assertEquals(2002, test.get(ISO_DEFAULT.yearOfEra()));
+        assertEquals(2002, test.get(ISO_DEFAULT.year()));
+        assertEquals(6, test.get(ISO_DEFAULT.monthOfYear()));
+        assertEquals(9, test.get(ISO_DEFAULT.dayOfMonth()));
+        assertEquals(2002, test.get(ISO_DEFAULT.weekyear()));
+        assertEquals(23, test.get(ISO_DEFAULT.weekOfWeekyear()));
+        assertEquals(7, test.get(ISO_DEFAULT.dayOfWeek()));
+        assertEquals(160, test.get(ISO_DEFAULT.dayOfYear()));
+        assertEquals(0, test.get(ISO_DEFAULT.halfdayOfDay()));
+        assertEquals(1, test.get(ISO_DEFAULT.hourOfHalfday()));
+        assertEquals(1, test.get(ISO_DEFAULT.clockhourOfDay()));
+        assertEquals(1, test.get(ISO_DEFAULT.clockhourOfHalfday()));
+        assertEquals(1, test.get(ISO_DEFAULT.hourOfDay()));
+        assertEquals(0, test.get(ISO_DEFAULT.minuteOfHour()));
+        assertEquals(60, test.get(ISO_DEFAULT.minuteOfDay()));
+        assertEquals(0, test.get(ISO_DEFAULT.secondOfMinute()));
+        assertEquals(60 * 60, test.get(ISO_DEFAULT.secondOfDay()));
+        assertEquals(0, test.get(ISO_DEFAULT.millisOfSecond()));
+        assertEquals(60 * 60 * 1000, test.get(ISO_DEFAULT.millisOfDay()));
         try {
             test.get((DateTimeField) null);
             fail();
@@ -212,7 +221,7 @@ public void testIsSupported_DateTimeFieldType() {
     public void testGetters() {
         DateTime test = new DateTime();
         
-        assertEquals(ISOChronology.getInstance(), test.getChronology());
+        assertEquals(ISO_DEFAULT, test.getChronology());
         assertEquals(LONDON, test.getZone());
         assertEquals(TEST_TIME_NOW, test.getMillis());
         
@@ -237,7 +246,7 @@ public void testGetters() {
     }
 
     public void testWithers() {
-        DateTime test = new DateTime(1970, 6, 9, 10, 20, 30, 40, GJChronology.getInstance());
+        DateTime test = new DateTime(1970, 6, 9, 10, 20, 30, 40, GJ_DEFAULT);
         check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40);
         check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40);
         check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40);
@@ -287,9 +296,9 @@ public void testEqualsHashCode() {
         
         assertEquals(false, test1.equals("Hello"));
         assertEquals(true, test1.equals(new MockInstant()));
-        assertEquals(false, test1.equals(new DateTime(TEST_TIME1, GregorianChronology.getInstance())));
+        assertEquals(false, test1.equals(new DateTime(TEST_TIME1, GREGORIAN_DEFAULT)));
         assertEquals(true, new DateTime(TEST_TIME1, new MockEqualsChronology()).equals(new DateTime(TEST_TIME1, new MockEqualsChronology())));
-        assertEquals(false, new DateTime(TEST_TIME1, new MockEqualsChronology()).equals(new DateTime(TEST_TIME1, ISOChronology.getInstance())));
+        assertEquals(false, new DateTime(TEST_TIME1, new MockEqualsChronology()).equals(new DateTime(TEST_TIME1, ISO_DEFAULT)));
     }
     
     class MockInstant extends AbstractInstant {
@@ -300,7 +309,7 @@ public long getMillis() {
             return TEST_TIME1;
         }
         public Chronology getChronology() {
-            return ISOChronology.getInstance();
+            return ISO_DEFAULT;
         }
     }
 
@@ -334,7 +343,7 @@ public void testCompareTo() {
         assertEquals(-1, test1.compareTo(test2));
         assertEquals(+1, test2.compareTo(test1));
         
-        DateTime test3 = new DateTime(TEST_TIME2, GregorianChronology.getInstance(PARIS));
+        DateTime test3 = new DateTime(TEST_TIME2, GREGORIAN_PARIS);
         assertEquals(-1, test1.compareTo(test3));
         assertEquals(+1, test3.compareTo(test1));
         assertEquals(0, test3.compareTo(test2));
@@ -377,7 +386,7 @@ public void testIsEqual_RI() {
         assertEquals(false, test1.isEqual(test2));
         assertEquals(false, test2.isEqual(test1));
         
-        DateTime test3 = new DateTime(TEST_TIME2, GregorianChronology.getInstance(PARIS));
+        DateTime test3 = new DateTime(TEST_TIME2, GREGORIAN_PARIS);
         assertEquals(false, test1.isEqual(test3));
         assertEquals(false, test3.isEqual(test1));
         assertEquals(true, test3.isEqual(test2));
@@ -415,7 +424,7 @@ public void testIsBefore_RI() {
         assertEquals(true, test1.isBefore(test2));
         assertEquals(false, test2.isBefore(test1));
         
-        DateTime test3 = new DateTime(TEST_TIME2, GregorianChronology.getInstance(PARIS));
+        DateTime test3 = new DateTime(TEST_TIME2, GREGORIAN_PARIS);
         assertEquals(true, test1.isBefore(test3));
         assertEquals(false, test3.isBefore(test1));
         assertEquals(false, test3.isBefore(test2));
@@ -453,7 +462,7 @@ public void testIsAfter_RI() {
         assertEquals(false, test1.isAfter(test2));
         assertEquals(true, test2.isAfter(test1));
         
-        DateTime test3 = new DateTime(TEST_TIME2, GregorianChronology.getInstance(PARIS));
+        DateTime test3 = new DateTime(TEST_TIME2, GREGORIAN_PARIS);
         assertEquals(false, test1.isAfter(test3));
         assertEquals(true, test3.isAfter(test1));
         assertEquals(false, test3.isAfter(test2));
@@ -532,20 +541,20 @@ public void testToDateTimeISO() {
         DateTime result = test.toDateTimeISO();
         assertSame(test, result);
         
-        test = new DateTime(TEST_TIME1, ISOChronology.getInstance(PARIS));
+        test = new DateTime(TEST_TIME1, ISO_PARIS);
         result = test.toDateTimeISO();
         assertSame(DateTime.class, result.getClass());
         assertSame(ISOChronology.class, result.getChronology().getClass());
         assertEquals(test.getMillis(), result.getMillis());
-        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());
+        assertEquals(ISO_PARIS, result.getChronology());
         assertNotSame(test, result);
         
-        test = new DateTime(TEST_TIME1, BuddhistChronology.getInstance());
+        test = new DateTime(TEST_TIME1, BUDDHIST_DEFAULT);
         result = test.toDateTimeISO();
         assertSame(DateTime.class, result.getClass());
         assertSame(ISOChronology.class, result.getChronology().getClass());
         assertEquals(test.getMillis(), result.getMillis());
-        assertEquals(ISOChronology.getInstance(), result.getChronology());
+        assertEquals(ISO_DEFAULT, result.getChronology());
         assertNotSame(test, result);
         
         test = new DateTime(TEST_TIME1, new MockNullZoneChronology());
@@ -553,7 +562,7 @@ public void testToDateTimeISO() {
         assertSame(DateTime.class, result.getClass());
         assertSame(ISOChronology.class, result.getChronology().getClass());
         assertEquals(test.getMillis(), result.getMillis());
-        assertEquals(ISOChronology.getInstance(), result.getChronology());
+        assertEquals(ISO_DEFAULT, result.getChronology());
         assertNotSame(test, result);
     }
 
@@ -579,18 +588,18 @@ public void testToDateTime_DateTimeZone() {
 
     public void testToDateTime_Chronology() {
         DateTime test = new DateTime(TEST_TIME1);
-        DateTime result = test.toDateTime(ISOChronology.getInstance());
+        DateTime result = test.toDateTime(ISO_DEFAULT);
         assertSame(test, result);
 
         test = new DateTime(TEST_TIME1);
-        result = test.toDateTime(GregorianChronology.getInstance(PARIS));
+        result = test.toDateTime(GREGORIAN_PARIS);
         assertEquals(test.getMillis(), result.getMillis());
-        assertEquals(GregorianChronology.getInstance(PARIS), result.getChronology());
+        assertEquals(GREGORIAN_PARIS, result.getChronology());
 
-        test = new DateTime(TEST_TIME1, GregorianChronology.getInstance(PARIS));
+        test = new DateTime(TEST_TIME1, GREGORIAN_PARIS);
         result = test.toDateTime((Chronology) null);
         assertEquals(test.getMillis(), result.getMillis());
-        assertEquals(ISOChronology.getInstance(), result.getChronology());
+        assertEquals(ISO_DEFAULT, result.getChronology());
 
         test = new DateTime(TEST_TIME1);
         result = test.toDateTime((Chronology) null);
@@ -601,7 +610,7 @@ public void testToMutableDateTime() {
         DateTime test = new DateTime(TEST_TIME1, PARIS);
         MutableDateTime result = test.toMutableDateTime();
         assertEquals(test.getMillis(), result.getMillis());
-        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());
+        assertEquals(ISO_PARIS, result.getChronology());
     }
 
     public void testToMutableDateTimeISO() {
@@ -610,51 +619,51 @@ public void testToMutableDateTimeISO() {
         assertSame(MutableDateTime.class, result.getClass());
         assertSame(ISOChronology.class, result.getChronology().getClass());
         assertEquals(test.getMillis(), result.getMillis());
-        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());
+        assertEquals(ISO_PARIS, result.getChronology());
     }
 
     public void testToMutableDateTime_DateTimeZone() {
         DateTime test = new DateTime(TEST_TIME1);
         MutableDateTime result = test.toMutableDateTime(LONDON);
         assertEquals(test.getMillis(), result.getMillis());
-        assertEquals(ISOChronology.getInstance(), result.getChronology());
+        assertEquals(ISO_DEFAULT, result.getChronology());
 
         test = new DateTime(TEST_TIME1);
         result = test.toMutableDateTime(PARIS);
         assertEquals(test.getMillis(), result.getMillis());
-        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());
+        assertEquals(ISO_PARIS, result.getChronology());
 
         test = new DateTime(TEST_TIME1, PARIS);
         result = test.toMutableDateTime((DateTimeZone) null);
         assertEquals(test.getMillis(), result.getMillis());
-        assertEquals(ISOChronology.getInstance(), result.getChronology());
+        assertEquals(ISO_DEFAULT, result.getChronology());
 
         test = new DateTime(TEST_TIME1);
         result = test.toMutableDateTime((DateTimeZone) null);
         assertEquals(test.getMillis(), result.getMillis());
-        assertEquals(ISOChronology.getInstance(), result.getChronology());
+        assertEquals(ISO_DEFAULT, result.getChronology());
     }
 
     public void testToMutableDateTime_Chronology() {
         DateTime test = new DateTime(TEST_TIME1);
-        MutableDateTime result = test.toMutableDateTime(ISOChronology.getInstance());
+        MutableDateTime result = test.toMutableDateTime(ISO_DEFAULT);
         assertEquals(test.getMillis(), result.getMillis());
-        assertEquals(ISOChronology.getInstance(), result.getChronology());
+        assertEquals(ISO_DEFAULT, result.getChronology());
 
         test = new DateTime(TEST_TIME1);
-        result = test.toMutableDateTime(GregorianChronology.getInstance(PARIS));
+        result = test.toMutableDateTime(GREGORIAN_PARIS);
         assertEquals(test.getMillis(), result.getMillis());
-        assertEquals(GregorianChronology.getInstance(PARIS), result.getChronology());
+        assertEquals(GREGORIAN_PARIS, result.getChronology());
 
-        test = new DateTime(TEST_TIME1, GregorianChronology.getInstance(PARIS));
+        test = new DateTime(TEST_TIME1, GREGORIAN_PARIS);
         result = test.toMutableDateTime((Chronology) null);
         assertEquals(test.getMillis(), result.getMillis());
-        assertEquals(ISOChronology.getInstance(), result.getChronology());
+        assertEquals(ISO_DEFAULT, result.getChronology());
 
         test = new DateTime(TEST_TIME1);
         result = test.toMutableDateTime((Chronology) null);
         assertEquals(test.getMillis(), result.getMillis());
-        assertEquals(ISOChronology.getInstance(), result.getChronology());
+        assertEquals(ISO_DEFAULT, result.getChronology());
     }
 
     public void testToDate() {
@@ -694,21 +703,21 @@ public void testToGregorianCalendar() {
 
     //-----------------------------------------------------------------------
     public void testToDateMidnight() {
-        DateTime base = new DateTime(TEST_TIME1, CopticChronology.getInstance());
+        DateTime base = new DateTime(TEST_TIME1, COPTIC_DEFAULT);
         DateMidnight test = base.toDateMidnight();
-        assertEquals(new DateMidnight(base, CopticChronology.getInstance()), test);
+        assertEquals(new DateMidnight(base, COPTIC_DEFAULT), test);
     }
 
     public void testToYearMonthDay() {
-        DateTime base = new DateTime(TEST_TIME1, CopticChronology.getInstance());
+        DateTime base = new DateTime(TEST_TIME1, COPTIC_DEFAULT);
         YearMonthDay test = base.toYearMonthDay();
-        assertEquals(new YearMonthDay(TEST_TIME1, CopticChronology.getInstance()), test);
+        assertEquals(new YearMonthDay(TEST_TIME1, COPTIC_DEFAULT), test);
     }
 
     public void testToTimeOfDay() {
-        DateTime base = new DateTime(TEST_TIME1, CopticChronology.getInstance());
+        DateTime base = new DateTime(TEST_TIME1, COPTIC_DEFAULT);
         TimeOfDay test = base.toTimeOfDay();
-        assertEquals(new TimeOfDay(TEST_TIME1, CopticChronology.getInstance()), test);
+        assertEquals(new TimeOfDay(TEST_TIME1, COPTIC_DEFAULT), test);
     }
 
     //-----------------------------------------------------------------------
@@ -718,7 +727,7 @@ public void testWithMillis_long() {
         assertEquals(TEST_TIME2, result.getMillis());
         assertEquals(test.getChronology(), result.getChronology());
         
-        test = new DateTime(TEST_TIME1, GregorianChronology.getInstance(PARIS));
+        test = new DateTime(TEST_TIME1, GREGORIAN_PARIS);
         result = test.withMillis(TEST_TIME2);
         assertEquals(TEST_TIME2, result.getMillis());
         assertEquals(test.getChronology(), result.getChronology());
@@ -730,22 +739,22 @@ public void testWithMillis_long() {
 
     public void testWithChronology_Chronology() {
         DateTime test = new DateTime(TEST_TIME1);
-        DateTime result = test.withChronology(GregorianChronology.getInstance(PARIS));
+        DateTime result = test.withChronology(GREGORIAN_PARIS);
         assertEquals(test.getMillis(), result.getMillis());
-        assertEquals(GregorianChronology.getInstance(PARIS), result.getChronology());
+        assertEquals(GREGORIAN_PARIS, result.getChronology());
         
-        test = new DateTime(TEST_TIME1, GregorianChronology.getInstance(PARIS));
+        test = new DateTime(TEST_TIME1, GREGORIAN_PARIS);
         result = test.withChronology(null);
         assertEquals(test.getMillis(), result.getMillis());
-        assertEquals(ISOChronology.getInstance(), result.getChronology());
+        assertEquals(ISO_DEFAULT, result.getChronology());
         
         test = new DateTime(TEST_TIME1);
         result = test.withChronology(null);
         assertEquals(test.getMillis(), result.getMillis());
-        assertEquals(ISOChronology.getInstance(), result.getChronology());
+        assertEquals(ISO_DEFAULT, result.getChronology());
         
         test = new DateTime(TEST_TIME1);
-        result = test.withChronology(ISOChronology.getInstance());
+        result = test.withChronology(ISO_DEFAULT);
         assertSame(test, result);
     }
 
@@ -753,12 +762,12 @@ public void testWithZone_DateTimeZone() {
         DateTime test = new DateTime(TEST_TIME1);
         DateTime result = test.withZone(PARIS);
         assertEquals(test.getMillis(), result.getMillis());
-        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());
+        assertEquals(ISO_PARIS, result.getChronology());
         
-        test = new DateTime(TEST_TIME1, GregorianChronology.getInstance(PARIS));
+        test = new DateTime(TEST_TIME1, GREGORIAN_PARIS);
         result = test.withZone(null);
         assertEquals(test.getMillis(), result.getMillis());
-        assertEquals(GregorianChronology.getInstance(), result.getChronology());
+        assertEquals(GREGORIAN_DEFAULT, result.getChronology());
         
         test = new DateTime(TEST_TIME1);
         result = test.withZone(null);
@@ -769,7 +778,7 @@ public void testWithZoneRetainFields_DateTimeZone() {
         DateTime test = new DateTime(TEST_TIME1);
         DateTime result = test.withZoneRetainFields(PARIS);
         assertEquals(test.getMillis() - DateTimeConstants.MILLIS_PER_HOUR, result.getMillis());
-        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());
+        assertEquals(ISO_PARIS, result.getChronology());
         
         test = new DateTime(TEST_TIME1);
         result = test.withZoneRetainFields(LONDON);
@@ -779,10 +788,10 @@ public void testWithZoneRetainFields_DateTimeZone() {
         result = test.withZoneRetainFields(null);
         assertSame(test, result);
         
-        test = new DateTime(TEST_TIME1, GregorianChronology.getInstance(PARIS));
+        test = new DateTime(TEST_TIME1, GREGORIAN_PARIS);
         result = test.withZoneRetainFields(null);
         assertEquals(test.getMillis() + DateTimeConstants.MILLIS_PER_HOUR, result.getMillis());
-        assertEquals(GregorianChronology.getInstance(), result.getChronology());
+        assertEquals(GREGORIAN_DEFAULT, result.getChronology());
         
         test = new DateTime(TEST_TIME1, new MockNullZoneChronology());
         result = test.withZoneRetainFields(LONDON);
@@ -791,9 +800,9 @@ public void testWithZoneRetainFields_DateTimeZone() {
     
     //-----------------------------------------------------------------------
     public void testWithDate_int_int_int() {
-        DateTime test = new DateTime(2002, 4, 5, 1, 2, 3, 4, ISOChronology.getInstanceUTC());
+        DateTime test = new DateTime(2002, 4, 5, 1, 2, 3, 4, ISO_UTC);
         DateTime result = test.withDate(2003, 5, 6);
-        DateTime expected = new DateTime(2003, 5, 6, 1, 2, 3, 4, ISOChronology.getInstanceUTC());
+        DateTime expected = new DateTime(2003, 5, 6, 1, 2, 3, 4, ISO_UTC);
         assertEquals(expected, result);
         
         test = new DateTime(TEST_TIME1);
@@ -804,10 +813,10 @@ public void testWithDate_int_int_int() {
     }
     
     public void testWithTime_int_int_int() {
-        DateTime test = new DateTime(TEST_TIME1 - 12345L, BuddhistChronology.getInstanceUTC());
+        DateTime test = new DateTime(TEST_TIME1 - 12345L, BUDDHIST_UTC);
         DateTime result = test.withTime(12, 24, 0, 0);
         assertEquals(TEST_TIME1, result.getMillis());
-        assertEquals(BuddhistChronology.getInstanceUTC(), result.getChronology());
+        assertEquals(BUDDHIST_UTC, result.getChronology());
         
         test = new DateTime(TEST_TIME1);
         try {
@@ -877,28 +886,28 @@ public void testWithFieldAdded4() {
 
     //-----------------------------------------------------------------------
     public void testWithDurationAdded_long_int() {
-        DateTime test = new DateTime(TEST_TIME1, BuddhistChronology.getInstance());
+        DateTime test = new DateTime(TEST_TIME1, BUDDHIST_DEFAULT);
         DateTime result = test.withDurationAdded(123456789L, 1);
-        DateTime expected = new DateTime(TEST_TIME1 + 123456789L, BuddhistChronology.getInstance());
+        DateTime expected = new DateTime(TEST_TIME1 + 123456789L, BUDDHIST_DEFAULT);
         assertEquals(expected, result);
         
         result = test.withDurationAdded(123456789L, 0);
         assertSame(test, result);
         
         result = test.withDurationAdded(123456789L, 2);
-        expected = new DateTime(TEST_TIME1 + (2L * 123456789L), BuddhistChronology.getInstance());
+        expected = new DateTime(TEST_TIME1 + (2L * 123456789L), BUDDHIST_DEFAULT);
         assertEquals(expected, result);
         
         result = test.withDurationAdded(123456789L, -3);
-        expected = new DateTime(TEST_TIME1 - (3L * 123456789L), BuddhistChronology.getInstance());
+        expected = new DateTime(TEST_TIME1 - (3L * 123456789L), BUDDHIST_DEFAULT);
         assertEquals(expected, result);
     }
     
     //-----------------------------------------------------------------------
     public void testWithDurationAdded_RD_int() {
-        DateTime test = new DateTime(TEST_TIME1, BuddhistChronology.getInstance());
+        DateTime test = new DateTime(TEST_TIME1, BUDDHIST_DEFAULT);
         DateTime result = test.withDurationAdded(new Duration(123456789L), 1);
-        DateTime expected = new DateTime(TEST_TIME1 + 123456789L, BuddhistChronology.getInstance());
+        DateTime expected = new DateTime(TEST_TIME1 + 123456789L, BUDDHIST_DEFAULT);
         assertEquals(expected, result);
         
         result = test.withDurationAdded(null, 1);
@@ -908,19 +917,19 @@ public void testWithDurationAdded_RD_int() {
         assertSame(test, result);
         
         result = test.withDurationAdded(new Duration(123456789L), 2);
-        expected = new DateTime(TEST_TIME1 + (2L * 123456789L), BuddhistChronology.getInstance());
+        expected = new DateTime(TEST_TIME1 + (2L * 123456789L), BUDDHIST_DEFAULT);
         assertEquals(expected, result);
         
         result = test.withDurationAdded(new Duration(123456789L), -3);
-        expected = new DateTime(TEST_TIME1 - (3L * 123456789L), BuddhistChronology.getInstance());
+        expected = new DateTime(TEST_TIME1 - (3L * 123456789L), BUDDHIST_DEFAULT);
         assertEquals(expected, result);
     }
     
     //-----------------------------------------------------------------------
     public void testWithDurationAdded_RP_int() {
-        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());
+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT);
         DateTime result = test.withPeriodAdded(new Period(1, 2, 3, 4, 5, 6, 7, 8), 1);
-        DateTime expected = new DateTime(2003, 7, 28, 6, 8, 10, 12, BuddhistChronology.getInstance());
+        DateTime expected = new DateTime(2003, 7, 28, 6, 8, 10, 12, BUDDHIST_DEFAULT);
         assertEquals(expected, result);
         
         result = test.withPeriodAdded(null, 1);
@@ -930,26 +939,26 @@ public void testWithDurationAdded_RP_int() {
         assertSame(test, result);
         
         result = test.withPeriodAdded(new Period(1, 2, 0, 4, 5, 6, 7, 8), 3);
-        expected = new DateTime(2005, 11, 15, 16, 20, 24, 28, BuddhistChronology.getInstance());
+        expected = new DateTime(2005, 11, 15, 16, 20, 24, 28, BUDDHIST_DEFAULT);
         assertEquals(expected, result);
         
         result = test.withPeriodAdded(new Period(1, 2, 0, 1, 1, 2, 3, 4), -1);
-        expected = new DateTime(2001, 3, 2, 0, 0, 0, 0, BuddhistChronology.getInstance());
+        expected = new DateTime(2001, 3, 2, 0, 0, 0, 0, BUDDHIST_DEFAULT);
         assertEquals(expected, result);
     }
 
     //-----------------------------------------------------------------------    
     public void testPlus_long() {
-        DateTime test = new DateTime(TEST_TIME1, BuddhistChronology.getInstance());
+        DateTime test = new DateTime(TEST_TIME1, BUDDHIST_DEFAULT);
         DateTime result = test.plus(123456789L);
-        DateTime expected = new DateTime(TEST_TIME1 + 123456789L, BuddhistChronology.getInstance());
+        DateTime expected = new DateTime(TEST_TIME1 + 123456789L, BUDDHIST_DEFAULT);
         assertEquals(expected, result);
     }
     
     public void testPlus_RD() {
-        DateTime test = new DateTime(TEST_TIME1, BuddhistChronology.getInstance());
+        DateTime test = new DateTime(TEST_TIME1, BUDDHIST_DEFAULT);
         DateTime result = test.plus(new Duration(123456789L));
-        DateTime expected = new DateTime(TEST_TIME1 + 123456789L, BuddhistChronology.getInstance());
+        DateTime expected = new DateTime(TEST_TIME1 + 123456789L, BUDDHIST_DEFAULT);
         assertEquals(expected, result);
         
         result = test.plus((ReadableDuration) null);
@@ -957,9 +966,9 @@ public void testPlus_RD() {
     }
     
     public void testPlus_RP() {
-        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());
+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT);
         DateTime result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8));
-        DateTime expected = new DateTime(2003, 7, 28, 6, 8, 10, 12, BuddhistChronology.getInstance());
+        DateTime expected = new DateTime(2003, 7, 28, 6, 8, 10, 12, BUDDHIST_DEFAULT);
         assertEquals(expected, result);
         
         result = test.plus((ReadablePeriod) null);
@@ -967,9 +976,9 @@ public void testPlus_RP() {
     }
 
     public void testPlusYears_int() {
-        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());
+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT);
         DateTime result = test.plusYears(1);
-        DateTime expected = new DateTime(2003, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());
+        DateTime expected = new DateTime(2003, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT);
         assertEquals(expected, result);
         
         result = test.plusYears(0);
@@ -977,9 +986,9 @@ public void testPlusYears_int() {
     }
 
     public void testPlusMonths_int() {
-        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());
+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT);
         DateTime result = test.plusMonths(1);
-        DateTime expected = new DateTime(2002, 6, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());
+        DateTime expected = new DateTime(2002, 6, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT);
         assertEquals(expected, result);
         
         result = test.plusMonths(0);
@@ -987,9 +996,9 @@ public void testPlusMonths_int() {
     }
 
     public void testPlusWeeks_int() {
-        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());
+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT);
         DateTime result = test.plusWeeks(1);
-        DateTime expected = new DateTime(2002, 5, 10, 1, 2, 3, 4, BuddhistChronology.getInstance());
+        DateTime expected = new DateTime(2002, 5, 10, 1, 2, 3, 4, BUDDHIST_DEFAULT);
         assertEquals(expected, result);
         
         result = test.plusWeeks(0);
@@ -997,9 +1006,9 @@ public void testPlusWeeks_int() {
     }
 
     public void testPlusDays_int() {
-        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());
+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT);
         DateTime result = test.plusDays(1);
-        DateTime expected = new DateTime(2002, 5, 4, 1, 2, 3, 4, BuddhistChronology.getInstance());
+        DateTime expected = new DateTime(2002, 5, 4, 1, 2, 3, 4, BUDDHIST_DEFAULT);
         assertEquals(expected, result);
         
         result = test.plusDays(0);
@@ -1007,9 +1016,9 @@ public void testPlusDays_int() {
     }
 
     public void testPlusHours_int() {
-        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());
+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT);
         DateTime result = test.plusHours(1);
-        DateTime expected = new DateTime(2002, 5, 3, 2, 2, 3, 4, BuddhistChronology.getInstance());
+        DateTime expected = new DateTime(2002, 5, 3, 2, 2, 3, 4, BUDDHIST_DEFAULT);
         assertEquals(expected, result);
         
         result = test.plusHours(0);
@@ -1017,9 +1026,9 @@ public void testPlusHours_int() {
     }
 
     public void testPlusMinutes_int() {
-        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());
+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT);
         DateTime result = test.plusMinutes(1);
-        DateTime expected = new DateTime(2002, 5, 3, 1, 3, 3, 4, BuddhistChronology.getInstance());
+        DateTime expected = new DateTime(2002, 5, 3, 1, 3, 3, 4, BUDDHIST_DEFAULT);
         assertEquals(expected, result);
         
         result = test.plusMinutes(0);
@@ -1027,9 +1036,9 @@ public void testPlusMinutes_int() {
     }
 
     public void testPlusSeconds_int() {
-        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());
+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT);
         DateTime result = test.plusSeconds(1);
-        DateTime expected = new DateTime(2002, 5, 3, 1, 2, 4, 4, BuddhistChronology.getInstance());
+        DateTime expected = new DateTime(2002, 5, 3, 1, 2, 4, 4, BUDDHIST_DEFAULT);
         assertEquals(expected, result);
         
         result = test.plusSeconds(0);
@@ -1037,9 +1046,9 @@ public void testPlusSeconds_int() {
     }
 
     public void testPlusMillis_int() {
-        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());
+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT);
         DateTime result = test.plusMillis(1);
-        DateTime expected = new DateTime(2002, 5, 3, 1, 2, 3, 5, BuddhistChronology.getInstance());
+        DateTime expected = new DateTime(2002, 5, 3, 1, 2, 3, 5, BUDDHIST_DEFAULT);
         assertEquals(expected, result);
         
         result = test.plusMillis(0);
@@ -1048,16 +1057,16 @@ public void testPlusMillis_int() {
 
     //-----------------------------------------------------------------------    
     public void testMinus_long() {
-        DateTime test = new DateTime(TEST_TIME1, BuddhistChronology.getInstance());
+        DateTime test = new DateTime(TEST_TIME1, BUDDHIST_DEFAULT);
         DateTime result = test.minus(123456789L);
-        DateTime expected = new DateTime(TEST_TIME1 - 123456789L, BuddhistChronology.getInstance());
+        DateTime expected = new DateTime(TEST_TIME1 - 123456789L, BUDDHIST_DEFAULT);
         assertEquals(expected, result);
     }
     
     public void testMinus_RD() {
-        DateTime test = new DateTime(TEST_TIME1, BuddhistChronology.getInstance());
+        DateTime test = new DateTime(TEST_TIME1, BUDDHIST_DEFAULT);
         DateTime result = test.minus(new Duration(123456789L));
-        DateTime expected = new DateTime(TEST_TIME1 - 123456789L, BuddhistChronology.getInstance());
+        DateTime expected = new DateTime(TEST_TIME1 - 123456789L, BUDDHIST_DEFAULT);
         assertEquals(expected, result);
         
         result = test.minus((ReadableDuration) null);
@@ -1065,9 +1074,9 @@ public void testMinus_RD() {
     }
     
     public void testMinus_RP() {
-        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());
+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT);
         DateTime result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1));
-        DateTime expected = new DateTime(2001, 3, 26, 0, 1, 2, 3, BuddhistChronology.getInstance());
+        DateTime expected = new DateTime(2001, 3, 26, 0, 1, 2, 3, BUDDHIST_DEFAULT);
         assertEquals(expected, result);
         
         result = test.minus((ReadablePeriod) null);
@@ -1075,9 +1084,9 @@ public void testMinus_RP() {
     }
 
     public void testMinusYears_int() {
-        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());
+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT);
         DateTime result = test.minusYears(1);
-        DateTime expected = new DateTime(2001, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());
+        DateTime expected = new DateTime(2001, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT);
         assertEquals(expected, result);
         
         result = test.minusYears(0);
@@ -1085,9 +1094,9 @@ public void testMinusYears_int() {
     }
 
     public void testMinusMonths_int() {
-        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());
+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT);
         DateTime result = test.minusMonths(1);
-        DateTime expected = new DateTime(2002, 4, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());
+        DateTime expected = new DateTime(2002, 4, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT);
         assertEquals(expected, result);
         
         result = test.minusMonths(0);
@@ -1095,9 +1104,9 @@ public void testMinusMonths_int() {
     }
 
     public void testMinusWeeks_int() {
-        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());
+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT);
         DateTime result = test.minusWeeks(1);
-        DateTime expected = new DateTime(2002, 4, 26, 1, 2, 3, 4, BuddhistChronology.getInstance());
+        DateTime expected = new DateTime(2002, 4, 26, 1, 2, 3, 4, BUDDHIST_DEFAULT);
         assertEquals(expected, result);
         
         result = test.minusWeeks(0);
@@ -1105,9 +1114,9 @@ public void testMinusWeeks_int() {
     }
 
     public void testMinusDays_int() {
-        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());
+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT);
         DateTime result = test.minusDays(1);
-        DateTime expected = new DateTime(2002, 5, 2, 1, 2, 3, 4, BuddhistChronology.getInstance());
+        DateTime expected = new DateTime(2002, 5, 2, 1, 2, 3, 4, BUDDHIST_DEFAULT);
         assertEquals(expected, result);
         
         result = test.minusDays(0);
@@ -1115,9 +1124,9 @@ public void testMinusDays_int() {
     }
 
     public void testMinusHours_int() {
-        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());
+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT);
         DateTime result = test.minusHours(1);
-        DateTime expected = new DateTime(2002, 5, 3, 0, 2, 3, 4, BuddhistChronology.getInstance());
+        DateTime expected = new DateTime(2002, 5, 3, 0, 2, 3, 4, BUDDHIST_DEFAULT);
         assertEquals(expected, result);
         
         result = test.minusHours(0);
@@ -1125,9 +1134,9 @@ public void testMinusHours_int() {
     }
 
     public void testMinusMinutes_int() {
-        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());
+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT);
         DateTime result = test.minusMinutes(1);
-        DateTime expected = new DateTime(2002, 5, 3, 1, 1, 3, 4, BuddhistChronology.getInstance());
+        DateTime expected = new DateTime(2002, 5, 3, 1, 1, 3, 4, BUDDHIST_DEFAULT);
         assertEquals(expected, result);
         
         result = test.minusMinutes(0);
@@ -1135,9 +1144,9 @@ public void testMinusMinutes_int() {
     }
 
     public void testMinusSeconds_int() {
-        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());
+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT);
         DateTime result = test.minusSeconds(1);
-        DateTime expected = new DateTime(2002, 5, 3, 1, 2, 2, 4, BuddhistChronology.getInstance());
+        DateTime expected = new DateTime(2002, 5, 3, 1, 2, 2, 4, BUDDHIST_DEFAULT);
         assertEquals(expected, result);
         
         result = test.minusSeconds(0);
@@ -1145,9 +1154,9 @@ public void testMinusSeconds_int() {
     }
 
     public void testMinusMillis_int() {
-        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());
+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BUDDHIST_DEFAULT);
         DateTime result = test.minusMillis(1);
-        DateTime expected = new DateTime(2002, 5, 3, 1, 2, 3, 3, BuddhistChronology.getInstance());
+        DateTime expected = new DateTime(2002, 5, 3, 1, 2, 3, 3, BUDDHIST_DEFAULT);
         assertEquals(expected, result);
         
         result = test.minusMillis(0);

From 75ce987662a43f23047a6d26f2fd481e1993b142 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 8 Apr 2006 11:45:50 +0000
Subject: [PATCH 070/115] Add toLocalXxx() methods to convert to LocalDate/Time

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1067 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  8 ++++--
 .../src/java/org/joda/time/DateMidnight.java  | 11 +++++++-
 JodaTime/src/java/org/joda/time/DateTime.java | 27 +++++++++++++++++++
 .../src/java/org/joda/time/TimeOfDay.java     | 11 ++++++++
 .../src/java/org/joda/time/YearMonthDay.java  | 10 +++++++
 .../joda/time/TestDateMidnight_Basics.java    |  6 +++++
 .../org/joda/time/TestDateTime_Basics.java    | 18 +++++++++++++
 .../org/joda/time/TestTimeOfDay_Basics.java   |  7 +++++
 .../joda/time/TestYearMonthDay_Basics.java    |  7 +++++
 9 files changed, 102 insertions(+), 3 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 5209cb716..168644375 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -32,8 +32,12 @@ Enhancements since 1.2
   as possible to aid migration. The main difference is the method names on the
   property class.
 
-- DateTime/DateMidnight/YearMonthDay/TimeOfDay.withXxx()
-  Add withXxx methods that allow an individul field to be changed, for example:
+- DateTime/DateMidnight/YearMonthDay/TimeOfDay
+  Add toLocalXxx() methods that allow conversion to the new classes, for example:
+  LocalDate date = today.toLocalDate();
+
+- DateTime/DateMidnight/YearMonthDay/TimeOfDay
+  Add withXxx() methods that allow an individul field to be changed, for example:
   firstOfMonth = today.withDayOfMonth(1);
   These methods are the immutable equivalent of set methods.
   These are convenince methods for the methods on the property API.
diff --git a/JodaTime/src/java/org/joda/time/DateMidnight.java b/JodaTime/src/java/org/joda/time/DateMidnight.java
index a0d1ebe8f..37cebd8a0 100644
--- a/JodaTime/src/java/org/joda/time/DateMidnight.java
+++ b/JodaTime/src/java/org/joda/time/DateMidnight.java
@@ -774,7 +774,7 @@ public Property property(DateTimeFieldType type) {
 
     //-----------------------------------------------------------------------
     /**
-     * Converts this object to a YearMonthDay using the same millis and chronology.
+     * Converts this object to a YearMonthDay using the same date and chronology.
      * 
      * @return a YearMonthDay using the same millis and chronology
      */
@@ -782,6 +782,15 @@ public YearMonthDay toYearMonthDay() {
         return new YearMonthDay(getMillis(), getChronology());
     }
 
+    /**
+     * Converts this object to a LocalDate with the same date and chronology.
+     *
+     * @return a LocalDate with the same date and chronology
+     */
+    public LocalDate toLocalDate() {
+        return new LocalDate(getMillis(), getChronology());
+    }
+
     /**
      * Converts this object to an Interval encompassing the whole of this day.
      * <p>
diff --git a/JodaTime/src/java/org/joda/time/DateTime.java b/JodaTime/src/java/org/joda/time/DateTime.java
index 7530a6f0d..41bb2899d 100644
--- a/JodaTime/src/java/org/joda/time/DateTime.java
+++ b/JodaTime/src/java/org/joda/time/DateTime.java
@@ -1122,6 +1122,33 @@ public TimeOfDay toTimeOfDay() {
         return new TimeOfDay(getMillis(), getChronology());
     }
 
+    /**
+     * Converts this object to a LocalDateTime with the same datetime and chronology.
+     *
+     * @return a LocalDateTime with the same datetime and chronology
+     */
+    public LocalDateTime toLocalDateTime() {
+        return new LocalDateTime(getMillis(), getChronology());
+    }
+
+    /**
+     * Converts this object to a LocalDate with the same date and chronology.
+     *
+     * @return a LocalDate with the same date and chronology
+     */
+    public LocalDate toLocalDate() {
+        return new LocalDate(getMillis(), getChronology());
+    }
+
+    /**
+     * Converts this object to a LocalTime with the same time and chronology.
+     *
+     * @return a LocalTime with the same time and chronology
+     */
+    public LocalTime toLocalTime() {
+        return new LocalTime(getMillis(), getChronology());
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Sets the era field in a copy of this DateTime, leaving this
diff --git a/JodaTime/src/java/org/joda/time/TimeOfDay.java b/JodaTime/src/java/org/joda/time/TimeOfDay.java
index 200a24e17..18ba98562 100644
--- a/JodaTime/src/java/org/joda/time/TimeOfDay.java
+++ b/JodaTime/src/java/org/joda/time/TimeOfDay.java
@@ -801,6 +801,17 @@ public Property property(DateTimeFieldType type) {
         return new Property(this, indexOfSupported(type));
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Converts this object to a LocalTime with the same time and chronology.
+     *
+     * @return a LocalTime with the same time and chronology
+     */
+    public LocalTime toLocalTime() {
+        return new LocalTime(getHourOfDay(), getMinuteOfHour(),
+                getSecondOfMinute(), getMillisOfSecond(), getChronology());
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Converts this partial to a full datetime using the default time zone
diff --git a/JodaTime/src/java/org/joda/time/YearMonthDay.java b/JodaTime/src/java/org/joda/time/YearMonthDay.java
index b2587ca84..7eaa1ec47 100644
--- a/JodaTime/src/java/org/joda/time/YearMonthDay.java
+++ b/JodaTime/src/java/org/joda/time/YearMonthDay.java
@@ -633,6 +633,16 @@ public Property property(DateTimeFieldType type) {
         return new Property(this, indexOfSupported(type));
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Converts this object to a LocalDate with the same date and chronology.
+     *
+     * @return a LocalDate with the same date and chronology
+     */
+    public LocalDate toLocalDate() {
+        return new LocalDate(getYear(), getMonthOfYear(), getDayOfMonth(), getChronology());
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Converts this YearMonthDay to a full datetime at midnight using the
diff --git a/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java b/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java
index bbfabd611..ef93c7eb6 100644
--- a/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java
@@ -639,6 +639,12 @@ public void testToYearMonthDay() {
         assertEquals(new YearMonthDay(TEST_TIME1_UTC, COPTIC_DEFAULT), test);
     }
 
+    public void testToLocalDate() {
+        DateMidnight base = new DateMidnight(TEST_TIME1_UTC, COPTIC_DEFAULT);
+        LocalDate test = base.toLocalDate();
+        assertEquals(new LocalDate(TEST_TIME1_UTC, COPTIC_DEFAULT), test);
+    }
+
     public void testToInterval() {
         DateMidnight base = new DateMidnight(TEST_TIME1_UTC, COPTIC_DEFAULT);
         Interval test = base.toInterval();
diff --git a/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java b/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java
index 4532bfa5b..13a64476b 100644
--- a/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java
@@ -720,6 +720,24 @@ public void testToTimeOfDay() {
         assertEquals(new TimeOfDay(TEST_TIME1, COPTIC_DEFAULT), test);
     }
 
+    public void testToLocalDateTime() {
+        DateTime base = new DateTime(TEST_TIME1, COPTIC_DEFAULT);
+        LocalDateTime test = base.toLocalDateTime();
+        assertEquals(new LocalDateTime(TEST_TIME1, COPTIC_DEFAULT), test);
+    }
+
+    public void testToLocalDate() {
+        DateTime base = new DateTime(TEST_TIME1, COPTIC_DEFAULT);
+        LocalDate test = base.toLocalDate();
+        assertEquals(new LocalDate(TEST_TIME1, COPTIC_DEFAULT), test);
+    }
+
+    public void testToLocalTime() {
+        DateTime base = new DateTime(TEST_TIME1, COPTIC_DEFAULT);
+        LocalTime test = base.toLocalTime();
+        assertEquals(new LocalTime(TEST_TIME1, COPTIC_DEFAULT), test);
+    }
+
     //-----------------------------------------------------------------------
     public void testWithMillis_long() {
         DateTime test = new DateTime(TEST_TIME1);
diff --git a/JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java b/JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java
index b4c2ca33c..f66172c87 100644
--- a/JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java
@@ -596,6 +596,13 @@ public void testMinusMillis_int() {
         assertSame(test, result);
     }
 
+    //-----------------------------------------------------------------------
+    public void testToLocalTime() {
+        TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_UTC);
+        LocalTime test = base.toLocalTime();
+        assertEquals(new LocalTime(10, 20, 30, 40, COPTIC_UTC), test);
+    }
+
     //-----------------------------------------------------------------------
     public void testToDateTimeToday() {
         TimeOfDay base = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS); // PARIS irrelevant
diff --git a/JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java b/JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java
index 54b6fc4e7..b055667f4 100644
--- a/JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java
@@ -539,6 +539,13 @@ public void testMinusDays_int() {
         assertSame(test, result);
     }
 
+    //-----------------------------------------------------------------------
+    public void testToLocalDate() {
+        YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_UTC);
+        LocalDate test = base.toLocalDate();
+        assertEquals(new LocalDate(2005, 6, 9, COPTIC_UTC), test);
+    }
+
     //-----------------------------------------------------------------------
     public void testToDateTimeAtMidnight() {
         YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS);

From 486a726f9fcd4bb613d898dfc6807d8727a5dc55 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Tue, 18 Apr 2006 14:34:09 +0000
Subject: [PATCH 071/115] updated to tz version 2006d

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1068 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/java/org/joda/time/tz/src/Readme.txt  |   2 +-
 JodaTime/src/java/org/joda/time/tz/src/asia   |  12 +-
 .../java/org/joda/time/tz/src/northamerica    | 115 ++++++++++++------
 3 files changed, 82 insertions(+), 47 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
index 87e7e9fe5..d32d5a3a4 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
+++ b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
@@ -1,2 +1,2 @@
 The data files in this directory were obtained from the public tz database,
-http://www.twinsun.com/tz/tz-link.htm, version 2006c.
+http://www.twinsun.com/tz/tz-link.htm, version 2006d.
diff --git a/JodaTime/src/java/org/joda/time/tz/src/asia b/JodaTime/src/java/org/joda/time/tz/src/asia
index 9302cd8ac..f112d3a8b 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/asia
+++ b/JodaTime/src/java/org/joda/time/tz/src/asia
@@ -1,4 +1,4 @@
-# @(#)asia	8.2
+# @(#)asia	8.3
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
@@ -1526,10 +1526,10 @@ Zone	Asia/Singapore	6:55:25 -	LMT	1901 Jan  1
 # With effect from 12.30 a.m. on 26th October 1996
 # Sri Lanka will be six (06) hours ahead of GMT.
 
-# From Petr Machata (2006-03-09):
-# It was brought to my attention that Sri Lanka is going to change
-# timezone from GMT+6:00 to GMT+5:30, quite soon at Apr/13:
-# http://www.hindu.com/thehindu/holnus/001200603042035.htm
+# From Jesper Norgaard Welen (2006-04-14), quoting Sri Lanka News Online
+# <http://news.sinhalaya.com/wmview.php?ArtID=11002> (2006-04-13):
+# 0030 hrs on April 15, 2006 (midnight of April 14, 2006 +30 minutes)
+# at present, become 2400 hours of April 14, 2006 (midnight of April 14, 2006).
 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Asia/Colombo	5:19:24 -	LMT	1880
@@ -1539,7 +1539,7 @@ Zone	Asia/Colombo	5:19:24 -	LMT	1880
 			5:30	1:00	IST	1945 Oct 16 2:00
 			5:30	-	IST	1996 May 25 0:00
 			6:30	-	LKT	1996 Oct 26 0:30
-			6:00	-	LKT	2006 Apr 14
+			6:00	-	LKT	2006 Apr 15 0:30
 			5:30	-	IST
 
 # Syria
diff --git a/JodaTime/src/java/org/joda/time/tz/src/northamerica b/JodaTime/src/java/org/joda/time/tz/src/northamerica
index e8a4e4c30..7f92c0ad8 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/northamerica
+++ b/JodaTime/src/java/org/joda/time/tz/src/northamerica
@@ -1,4 +1,4 @@
-# @(#)northamerica	8.3
+# @(#)northamerica	8.4
 # <pre>
 
 # also includes Central America and the Caribbean
@@ -895,7 +895,13 @@ Zone America/Menominee	-5:50:27 -	LMT	1885 Sep 18 12:00
 # Unless otherwise specified, the data for Canada are all from Shanks
 # & Pottenger.
 
-# From Paul Eggert (2006-03-22):
+# From Chris Walton (2006-04-01):
+# The British Columbia government announced yesterday that it will
+# adjust daylight savings next year to align with changes in the
+# U.S. and the rest of Canada....
+# http://www2.news.gov.bc.ca/news_releases_2005-2009/2006AG0014-000330.htm
+
+# From Paul Eggert (2006-04-09):
 # H. David Matthews and Mary Vincent's map
 # <a href="http://www.canadiangeographic.ca/Magazine/SO98/geomap.asp">
 # "It's about TIME", _Canadian Geographic_ (September-October 1998)
@@ -916,17 +922,7 @@ Zone America/Menominee	-5:50:27 -	LMT	1885 Sep 18 12:00
 # had agreed; see <http://www.cbc.ca/pei/story/pe_daylight_20051207.html>
 # (2005-12-07).  It also reported that Alberta will fall into line; see
 # <http://www.cbc.ca/calgary/story/ca_daylight20060202.html> (2006-02-02).
-#
-# To reflect all this, the Canada, Edm, and Winn rules have been
-# adjusted to agree with the 2007 US change.  This means we assume
-# most of Canada will fall into line.  However, British Columbia,
-# Newfoundland, Northwest Territories, and Yukon already have separate
-# rules in our database, so for now we'll leave them alone, which
-# means that we currently assume these regions will not change their
-# rules and will disagree with the US starting in 2007.  This
-# assumption is probably incorrect, with the possible exception of
-# Newfoundland.  We plan to adjust the Vanc, StJohns, and NT_YK
-# rules as the corresponding provinces make their announcements.
+# For now, assume all of Canada will fall into line.
 
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Canada	1918	only	-	Apr	14	2:00	1:00	D
@@ -976,9 +972,15 @@ Rule	StJohns	1960	1986	-	Oct	lastSun	2:00	0	S
 # INMS (2000-09-12) says that, since 1988 at least, Newfoundland switches
 # at 00:01 local time.  For now, assume it started in 1987.
 Rule	StJohns	1987	only	-	Apr	Sun>=1	0:01	1:00	D
-Rule	StJohns	1987	max	-	Oct	lastSun	0:01	0	S
+Rule	StJohns	1987	2006	-	Oct	lastSun	0:01	0	S
 Rule	StJohns	1988	only	-	Apr	Sun>=1	0:01	2:00	DD
-Rule	StJohns	1989	max	-	Apr	Sun>=1	0:01	1:00	D
+Rule	StJohns	1989	2006	-	Apr	Sun>=1	0:01	1:00	D
+# From Chris Walton (2006-04-05):
+# http://www.releases.gov.nl.ca/releases/2006/mpa/0331n01.htm
+# [This says Newfoundlandland expects to follow step with the US.]
+Rule	StJohns	2007	max	-	Mar	Sun>=8	0:01	1:00	D
+Rule	StJohns	2007	max	-	Nov	Sun>=1	0:01	0	S
+#
 # St John's has an apostrophe, but Posix file names can't have apostrophes.
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone America/St_Johns	-3:30:52 -	LMT	1884
@@ -1278,6 +1280,30 @@ Zone America/Rainy_River -6:17:56 -	LMT	1895
 
 # Manitoba
 
+# From Chris Walton (2006-04-05):
+# Here is a copy of the new official time act ...
+# http://web2.gov.mb.ca/laws/statutes/ccsm/o030e.php
+# The act indicates that daylight savings ends at 2:00am.
+
+# From Rob Douglas (2006-04-06):
+# the old Manitoba Time Act - as amended by Bill 2, assented to
+# March 27, 1987 ... said ...
+# "between two o'clock Central Standard Time in the morning of
+# the first Sunday of April of each year and two o'clock Central
+# Standard Time in the morning of the last Sunday of October next
+# following, one hour in advance of Central Standard Time."...
+# I believe that the English legislation [of the old time act] had =
+# been assented to (March 22, 1967)....
+# Also, as far as I can tell, there was no order-in-council varying
+# the time of Daylight Saving Time for 2005 and so the provisions of
+# the 1987 version would apply - the changeover was at 2:00 Central
+# Standard Time (i.e. not until 3:00 Central Daylight Time).
+
+# From Paul Eggert (2006-04-10):
+# Shanks & Pottenger say Manitoba switched at 02:00 (not 02:00s)
+# starting 1966.  Since 02:00s is clearly correct for 1967 on, assume
+# it was also 02:00s in 1966.
+
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Winn	1916	only	-	Apr	23	0:00	1:00	D
 Rule	Winn	1916	only	-	Sep	17	0:00	0	S
@@ -1300,18 +1326,13 @@ Rule	Winn	1959	only	-	Oct	lastSun	2:00	0	S
 Rule	Winn	1960	only	-	Sep	lastSun	2:00	0	S
 Rule	Winn	1963	only	-	Apr	lastSun	2:00	1:00	D
 Rule	Winn	1963	only	-	Sep	22	2:00	0	S
-Rule	Winn	1966	1986	-	Apr	lastSun	2:00	1:00	D
-Rule	Winn	1966	1986	-	Oct	lastSun	2:00	0	S
-Rule	Winn	1987	2006	-	Apr	Sun>=1	2:00s	1:00	D
-# From Paul Eggert (2000-10-02):
-# INMS (2000-09-12) says that, since 1988 at least, Manitoba switches from
-# DST at 03:00 local time.  For now, assume it started in 1987.
-Rule	Winn	1987	2006	-	Oct	lastSun	2:00s	0	S
-Rule	Winn	2007	max	-	Mar	Sun>=8	2:00s	1:00	D
-Rule	Winn	2007	max	-	Nov	Sun>=1	2:00s	0	S
+Rule	Winn	1966	1986	-	Apr	lastSun	2:00s	1:00	D
+Rule	Winn	1966	2005	-	Oct	lastSun	2:00s	0	S
+Rule	Winn	1987	2005	-	Apr	Sun>=1	2:00s	1:00	D
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone America/Winnipeg	-6:28:36 -	LMT	1887 Jul 16
-			-6:00	Winn	C%sT
+			-6:00	Winn	C%sT	2006
+			-6:00	Canada	C%sT
 
 
 # Saskatchewan
@@ -1418,12 +1439,10 @@ Rule	Edm	1969	only	-	Apr	lastSun	2:00	1:00	D
 Rule	Edm	1969	only	-	Oct	lastSun	2:00	0	S
 Rule	Edm	1972	1986	-	Apr	lastSun	2:00	1:00	D
 Rule	Edm	1972	2006	-	Oct	lastSun	2:00	0	S
-Rule	Edm	1987	2006	-	Apr	Sun>=1	2:00	1:00	D
-Rule	Edm	2007	max	-	Mar	Sun>=8	2:00	1:00	D
-Rule	Edm	2007	max	-	Nov	Sun>=1	2:00	0	S
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone America/Edmonton	-7:33:52 -	LMT	1906 Sep
-			-7:00	Edm	M%sT
+			-7:00	Edm	M%sT	1987
+			-7:00	Canada	M%sT
 
 
 # British Columbia
@@ -1443,11 +1462,11 @@ Rule	Vanc	1945	only	-	Sep	30	2:00	0	S
 Rule	Vanc	1946	1986	-	Apr	lastSun	2:00	1:00	D
 Rule	Vanc	1946	only	-	Oct	13	2:00	0	S
 Rule	Vanc	1947	1961	-	Sep	lastSun	2:00	0	S
-Rule	Vanc	1962	max	-	Oct	lastSun	2:00	0	S
-Rule	Vanc	1987	max	-	Apr	Sun>=1	2:00	1:00	D
+Rule	Vanc	1962	2006	-	Oct	lastSun	2:00	0	S
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone America/Vancouver	-8:12:28 -	LMT	1884
-			-8:00	Vanc	P%sT
+			-8:00	Vanc	P%sT	1987
+			-8:00	Canada	P%sT
 Zone America/Dawson_Creek -8:00:56 -	LMT	1884
 			-8:00	Canada	P%sT	1947
 			-8:00	Vanc	P%sT	1972 Aug 30 2:00
@@ -1586,8 +1605,8 @@ Rule	NT_YK	1945	only	-	Sep	30	2:00	0	S
 Rule	NT_YK	1965	only	-	Apr	lastSun	0:00	2:00	DD
 Rule	NT_YK	1965	only	-	Oct	lastSun	2:00	0	S
 Rule	NT_YK	1980	1986	-	Apr	lastSun	2:00	1:00	D
-Rule	NT_YK	1980	max	-	Oct	lastSun	2:00	0	S
-Rule	NT_YK	1987	max	-	Apr	Sun>=1	2:00	1:00	D
+Rule	NT_YK	1980	2006	-	Oct	lastSun	2:00	0	S
+Rule	NT_YK	1987	2006	-	Apr	Sun>=1	2:00	1:00	D
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone America/Pangnirtung -4:22:56 -	LMT	1884
 			-4:00	NT_YK	A%sT	1995 Apr Sun>=1 2:00
@@ -1612,16 +1631,20 @@ Zone America/Cambridge_Bay -7:00:20 -	LMT	1884
 			-6:00	-	CST	2001 Apr  1 3:00
 			-7:00	Canada	M%sT
 Zone America/Yellowknife -7:37:24 -	LMT	1884
-			-7:00	NT_YK	M%sT
+			-7:00	NT_YK	M%sT	1980
+			-7:00	Canada	M%sT
 Zone America/Inuvik	-8:54:00 -	LMT	1884
 			-8:00	NT_YK	P%sT	1979 Apr lastSun 2:00
-			-7:00	NT_YK	M%sT
+			-7:00	NT_YK	M%sT	1980
+			-7:00	Canada	M%sT
 Zone America/Whitehorse	-9:00:12 -	LMT	1900 Aug 20
 			-9:00	NT_YK	Y%sT	1966 Jul 1 2:00
-			-8:00	NT_YK	P%sT
+			-8:00	NT_YK	P%sT	1980
+			-8:00	Canada	P%sT
 Zone America/Dawson	-9:17:40 -	LMT	1900 Aug 20
 			-9:00	NT_YK	Y%sT	1973 Oct 28 0:00
-			-8:00	NT_YK	P%sT
+			-8:00	NT_YK	P%sT	1980
+			-8:00	Canada	P%sT
 
 
 ###############################################################################
@@ -2105,6 +2128,18 @@ Zone America/Guatemala	-6:02:04 -	LMT	1918 Oct 5
 #   October 2005.
 #
 #  "Port-au-Prince, March 31, 2005"
+#
+# From Steffen Thorsen (2006-04-04):
+# I have been informed by users that Haiti observes DST this year like
+# last year, so the current "only" rule for 2005 might be changed to a
+# "max" rule or to last until 2006. (Who knows if they will observe DST
+# next year or if they will extend their DST like US/Canada next year).
+#
+# I have found this article about it (in French):
+# http://www.haitipressnetwork.com/news.cfm?articleID=7612
+#
+# The reason seems to be an energy crisis.
+
 
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Haiti	1983	only	-	May	8	0:00	1:00	D
@@ -2114,8 +2149,8 @@ Rule	Haiti	1983	1987	-	Oct	lastSun	0:00	0	S
 # Go with IATA.
 Rule	Haiti	1988	1997	-	Apr	Sun>=1	1:00s	1:00	D
 Rule	Haiti	1988	1997	-	Oct	lastSun	1:00s	0	S
-Rule	Haiti	2005	only	-	Apr	Sun>=1	0:00	1:00	D
-Rule	Haiti	2005	only	-	Oct	lastSun	0:00	0	S
+Rule	Haiti	2005	max	-	Apr	Sun>=1	0:00	1:00	D
+Rule	Haiti	2005	max	-	Oct	lastSun	0:00	0	S
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone America/Port-au-Prince -4:49:20 -	LMT	1890
 			-4:49	-	PPMT	1917 Jan 24 12:00 # P-a-P MT

From d89f0e9542fd4922b883ca742e778f6e27c9bfbc Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Tue, 18 Apr 2006 14:36:50 +0000
Subject: [PATCH 072/115] updated to tz version 2006d

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1069 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 168644375..dcff34074 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -57,7 +57,7 @@ Source compatible - Yes
 Serialization compatible - Yes
 
 Data compatible - Yes
-  - DateTimeZone data updated to version 2006c
+  - DateTimeZone data updated to version 2006d
 
 
 Deprecations since 1.2

From 357144023e5289d5f3a6280ffa31af93a26d0168 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Fri, 21 Apr 2006 19:31:18 +0000
Subject: [PATCH 073/115] Fixed test for those not living in Europe/London time
 zone.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1070 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java | 5 +++++
 JodaTime/src/test/org/joda/time/TestDateTime_Basics.java     | 5 +++++
 2 files changed, 10 insertions(+)

diff --git a/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java b/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java
index ef93c7eb6..8638b0f12 100644
--- a/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java
@@ -51,6 +51,11 @@
     private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
     private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
     private static final DateTimeZone NEWYORK = DateTimeZone.forID("America/New_York");
+
+    static {
+        DateTimeZone.setDefault(LONDON);
+    }
+
     private static final ISOChronology ISO_DEFAULT = ISOChronology.getInstance();
     private static final ISOChronology ISO_PARIS = ISOChronology.getInstance(PARIS);
     private static final GJChronology GJ_DEFAULT = GJChronology.getInstance();
diff --git a/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java b/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java
index 13a64476b..ead82ea52 100644
--- a/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java
@@ -51,6 +51,11 @@
 
     private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
     private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
+
+    static {
+        DateTimeZone.setDefault(LONDON);
+    }
+
     private static final ISOChronology ISO_UTC = ISOChronology.getInstanceUTC();
     private static final ISOChronology ISO_DEFAULT = ISOChronology.getInstance();
     private static final ISOChronology ISO_PARIS = ISOChronology.getInstance(PARIS);

From a0c65ac008610c28f352572816a7c78eb6086807 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Fri, 21 Apr 2006 19:37:14 +0000
Subject: [PATCH 074/115] LocalDate and LocalTime constructors use correct ISO
 parser.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1071 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/LocalDate.java  |  9 ++++++---
 JodaTime/src/java/org/joda/time/LocalTime.java  |  9 ++++++---
 .../joda/time/convert/AbstractConverter.java    | 16 ++++++++++++++++
 .../org/joda/time/convert/InstantConverter.java | 17 +++++++++++++++++
 .../org/joda/time/convert/StringConverter.java  | 14 ++++++++++++++
 5 files changed, 59 insertions(+), 6 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/LocalDate.java b/JodaTime/src/java/org/joda/time/LocalDate.java
index 492f1429b..20cc5b73f 100644
--- a/JodaTime/src/java/org/joda/time/LocalDate.java
+++ b/JodaTime/src/java/org/joda/time/LocalDate.java
@@ -284,7 +284,8 @@ public LocalDate(Object instant) {
     public LocalDate(Object instant, DateTimeZone zone) {
         InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
         Chronology chronology = converter.getChronology(instant, zone);
-        long millis = converter.getInstantMillis(instant, chronology);
+        long millis = converter.getInstantMillis
+            (instant, chronology, ISODateTimeFormat.dateParser());
         
         long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, millis);
         chronology = chronology.withUTC();
@@ -310,8 +311,10 @@ public LocalDate(Object instant, DateTimeZone zone) {
      */
     public LocalDate(Object instant, Chronology chronology) {
         InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
-        Chronology chrono = DateTimeUtils.getChronology(converter.getChronology(instant, chronology));
-        long millis = converter.getInstantMillis(instant, chronology);
+        Chronology chrono = DateTimeUtils.getChronology
+            (converter.getChronology(instant, chronology));
+        long millis = converter.getInstantMillis
+            (instant, chronology, ISODateTimeFormat.dateParser());
         
         long localMillis = chrono.getZone().getMillisKeepLocal(DateTimeZone.UTC, millis);
         chrono = chrono.withUTC();
diff --git a/JodaTime/src/java/org/joda/time/LocalTime.java b/JodaTime/src/java/org/joda/time/LocalTime.java
index 6a937b4f7..eb37822db 100644
--- a/JodaTime/src/java/org/joda/time/LocalTime.java
+++ b/JodaTime/src/java/org/joda/time/LocalTime.java
@@ -313,7 +313,8 @@ public LocalTime(Object instant) {
     public LocalTime(Object instant, DateTimeZone zone) {
         InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
         Chronology chronology = converter.getChronology(instant, zone);
-        long millis = converter.getInstantMillis(instant, chronology);
+        long millis = converter.getInstantMillis
+            (instant, chronology, ISODateTimeFormat.timeParser());
         chronology = DateTimeUtils.getChronology(chronology);
         
         long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, millis);
@@ -340,8 +341,10 @@ public LocalTime(Object instant, DateTimeZone zone) {
      */
     public LocalTime(Object instant, Chronology chronology) {
         InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
-        Chronology chrono = DateTimeUtils.getChronology(converter.getChronology(instant, chronology));
-        long millis = converter.getInstantMillis(instant, chronology);
+        Chronology chrono = DateTimeUtils.getChronology
+            (converter.getChronology(instant, chronology));
+        long millis = converter.getInstantMillis
+            (instant, chronology, ISODateTimeFormat.timeParser());
         
         long localMillis = chrono.getZone().getMillisKeepLocal(DateTimeZone.UTC, millis);
         chrono = chrono.withUTC();
diff --git a/JodaTime/src/java/org/joda/time/convert/AbstractConverter.java b/JodaTime/src/java/org/joda/time/convert/AbstractConverter.java
index cfd4e8ed6..dae5bc72e 100644
--- a/JodaTime/src/java/org/joda/time/convert/AbstractConverter.java
+++ b/JodaTime/src/java/org/joda/time/convert/AbstractConverter.java
@@ -21,6 +21,7 @@
 import org.joda.time.PeriodType;
 import org.joda.time.ReadablePartial;
 import org.joda.time.chrono.ISOChronology;
+import org.joda.time.format.DateTimeFormatter;
 
 /**
  * AbstractConverter simplifies the process of implementing a converter.
@@ -51,6 +52,21 @@ public long getInstantMillis(Object object, Chronology chrono) {
         return DateTimeUtils.currentTimeMillis();
     }
 
+    /**
+     * Extracts the millis from an object of this convertor's type.
+     * <p>
+     * This implementation returns the current time.
+     * 
+     * @param object  the object to convert
+     * @param chrono  the chronology to use, which is always non-null
+     * @param parser  if converting from a String, the given parser is preferred
+     * @return the millisecond value
+     * @since 1.3
+     */
+    public long getInstantMillis(Object object, Chronology chrono, DateTimeFormatter parser) {
+        return getInstantMillis(object, chrono);
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Extracts the chronology from an object of this convertor's type
diff --git a/JodaTime/src/java/org/joda/time/convert/InstantConverter.java b/JodaTime/src/java/org/joda/time/convert/InstantConverter.java
index 65bc35569..170dcaa49 100644
--- a/JodaTime/src/java/org/joda/time/convert/InstantConverter.java
+++ b/JodaTime/src/java/org/joda/time/convert/InstantConverter.java
@@ -17,6 +17,7 @@
 
 import org.joda.time.Chronology;
 import org.joda.time.DateTimeZone;
+import org.joda.time.format.DateTimeFormatter;
 
 /**
  * InstantConverter defines how an object is converted to milliseconds/chronology.
@@ -65,7 +66,23 @@
      * @param chrono  the chronology to use, which is the non-null result of getChronology()
      * @return the millisecond instant
      * @throws ClassCastException if the object is invalid
+     * @throws IllegalArgumentException if object conversion fails
      */
     long getInstantMillis(Object object, Chronology chrono);
 
+    /**
+     * Extracts the millis from an object of this converter's type.
+     * <p>
+     * The chronology passed in is the result of the call to <code>getChronology</code>.
+     * 
+     * @param object  the object to convert
+     * @param chrono  the chronology to use, which is the non-null result of getChronology()
+     * @param parser  if converting from a String, the given parser is preferred
+     * @return the millisecond instant
+     * @throws ClassCastException if the object is invalid
+     * @throws IllegalArgumentException if object conversion fails
+     * @since 1.3
+     */
+    long getInstantMillis(Object object, Chronology chrono, DateTimeFormatter parser);
+
 }
diff --git a/JodaTime/src/java/org/joda/time/convert/StringConverter.java b/JodaTime/src/java/org/joda/time/convert/StringConverter.java
index 87e6032bb..ebcd4f0f8 100644
--- a/JodaTime/src/java/org/joda/time/convert/StringConverter.java
+++ b/JodaTime/src/java/org/joda/time/convert/StringConverter.java
@@ -64,6 +64,20 @@ public long getInstantMillis(Object object, Chronology chrono) {
         return p.withChronology(chrono).parseMillis(str);
     }
 
+    /**
+     * Gets the millis, which is the ISO parsed string value.
+     * 
+     * @param object  the String to convert, must not be null
+     * @param chrono  the chronology to use, non-null result of getChronology
+     * @param parser  the given parser is preferred
+     * @return the millisecond value
+     * @throws IllegalArgumentException if the value if invalid
+     * @since 1.3
+     */
+    public long getInstantMillis(Object object, Chronology chrono, DateTimeFormatter parser) {
+        return parser.withChronology(chrono).parseMillis((String) object);
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Gets the duration of the string using the standard type.

From 941f593f7fe5654b07eac7c9f1998b894329f28e Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Sat, 22 Apr 2006 19:45:58 +0000
Subject: [PATCH 075/115] Minor fix in error range reporting

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1072 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../java/org/joda/time/chrono/BasicDayOfYearDateTimeField.java  | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/JodaTime/src/java/org/joda/time/chrono/BasicDayOfYearDateTimeField.java b/JodaTime/src/java/org/joda/time/chrono/BasicDayOfYearDateTimeField.java
index 58cd02677..028ec3bd2 100644
--- a/JodaTime/src/java/org/joda/time/chrono/BasicDayOfYearDateTimeField.java
+++ b/JodaTime/src/java/org/joda/time/chrono/BasicDayOfYearDateTimeField.java
@@ -90,7 +90,7 @@ public int getMaximumValue(ReadablePartial partial, int[] values) {
 
     protected int getMaximumValueForSet(long instant, int value) {
         int maxLessOne = iChronology.getDaysInYearMax() - 1;
-        return value > maxLessOne ? getMaximumValue(instant) : maxLessOne;
+        return (value > maxLessOne || value < 1) ? getMaximumValue(instant) : maxLessOne;
     }
 
     /**

From e610c97b456dded9fa022582cf49b911f5509a91 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Sat, 22 Apr 2006 20:15:28 +0000
Subject: [PATCH 076/115] Constructing TimeOfDay with String value no longer
 accepts date fields, and 'T' prefix is now optional.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1073 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  4 +++
 .../src/java/org/joda/time/TimeOfDay.java     |  4 +--
 .../java/org/joda/time/base/BasePartial.java  | 28 +++++++++++++++++++
 .../joda/time/convert/AbstractConverter.java  | 24 +++++++++++++++-
 .../joda/time/convert/PartialConverter.java   | 18 ++++++++++++
 5 files changed, 75 insertions(+), 3 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index dcff34074..6efbaacab 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -94,6 +94,10 @@ Bug fixes since 1.2
   Fixed overflow when getting year field from instants at Long.MAX_VALUE and
   LONG.MIN_VALUE.
 
+- TimeOfDay
+  Constructing with String value no longer accepts date fields, and 'T' prefix
+  is now optional.
+
 
 Feedback
 --------
diff --git a/JodaTime/src/java/org/joda/time/TimeOfDay.java b/JodaTime/src/java/org/joda/time/TimeOfDay.java
index 18ba98562..dccd263d5 100644
--- a/JodaTime/src/java/org/joda/time/TimeOfDay.java
+++ b/JodaTime/src/java/org/joda/time/TimeOfDay.java
@@ -265,7 +265,7 @@ public TimeOfDay(long instant, Chronology chronology) {
      * @throws IllegalArgumentException if the instant is invalid
      */
     public TimeOfDay(Object instant) {
-        super(instant, null);
+        super(instant, null, ISODateTimeFormat.timeParser());
     }
 
     /**
@@ -295,7 +295,7 @@ public TimeOfDay(Object instant) {
      * @throws IllegalArgumentException if the instant is invalid
      */
     public TimeOfDay(Object instant, Chronology chronology) {
-        super(instant, DateTimeUtils.getChronology(chronology));
+        super(instant, DateTimeUtils.getChronology(chronology), ISODateTimeFormat.timeParser());
     }
 
     /**
diff --git a/JodaTime/src/java/org/joda/time/base/BasePartial.java b/JodaTime/src/java/org/joda/time/base/BasePartial.java
index 53e61e114..a65bb7b07 100644
--- a/JodaTime/src/java/org/joda/time/base/BasePartial.java
+++ b/JodaTime/src/java/org/joda/time/base/BasePartial.java
@@ -25,6 +25,7 @@
 import org.joda.time.convert.ConverterManager;
 import org.joda.time.convert.PartialConverter;
 import org.joda.time.format.DateTimeFormat;
+import org.joda.time.format.DateTimeFormatter;
 
 /**
  * BasePartial is an abstract implementation of ReadablePartial that stores
@@ -135,6 +136,33 @@ protected BasePartial(Object instant, Chronology chronology) {
         iValues = converter.getPartialValues(this, instant, chronology);
     }
 
+    /**
+     * Constructs a partial from an Object that represents a time, using the
+     * specified chronology.
+     * <p>
+     * The recognised object types are defined in
+     * {@link org.joda.time.convert.ConverterManager ConverterManager} and
+     * include ReadableInstant, String, Calendar and Date.
+     * <p>
+     * The constructor uses the time zone of the chronology specified.
+     * Once the constructor is complete, all further calculations are performed
+     * without reference to a timezone (by switching to UTC).
+     *
+     * @param instant  the datetime object
+     * @param chronology  the chronology, null means use converter
+     * @param parser  if converting from a String, the given parser is preferred
+     * @throws IllegalArgumentException if the date is invalid
+     * @since 1.3
+     */
+    protected BasePartial(Object instant, Chronology chronology, DateTimeFormatter parser) {
+        super();
+        PartialConverter converter = ConverterManager.getInstance().getPartialConverter(instant);
+        chronology = converter.getChronology(instant, chronology);
+        chronology = DateTimeUtils.getChronology(chronology);
+        iChronology = chronology.withUTC();
+        iValues = converter.getPartialValues(this, instant, chronology, parser);
+    }
+
     /**
      * Constructs a partial with specified time field values and chronology.
      * <p>
diff --git a/JodaTime/src/java/org/joda/time/convert/AbstractConverter.java b/JodaTime/src/java/org/joda/time/convert/AbstractConverter.java
index dae5bc72e..c5f59b4f4 100644
--- a/JodaTime/src/java/org/joda/time/convert/AbstractConverter.java
+++ b/JodaTime/src/java/org/joda/time/convert/AbstractConverter.java
@@ -107,13 +107,35 @@ public Chronology getChronology(Object object, Chronology chrono) {
      *  This partial may be incomplete and only getFieldType(int) should be used
      * @param object  the object to convert
      * @param chrono  the chronology to use, which is the non-null result of getChronology()
-     * @return the array of field values that match the 
+     * @return the array of field values that match the fieldSource, must be non-null valid
+     * @throws ClassCastException if the object is invalid
      */
     public int[] getPartialValues(ReadablePartial fieldSource, Object object, Chronology chrono) {
         long instant = getInstantMillis(object, chrono);
         return chrono.get(fieldSource, instant);
     }
 
+    /**
+     * Extracts the values of the partial from an object of this converter's type.
+     * The chrono parameter is a hint to the converter, should it require a
+     * chronology to aid in conversion.
+     * 
+     * @param fieldSource  a partial that provides access to the fields.
+     *  This partial may be incomplete and only getFieldType(int) should be used
+     * @param object  the object to convert
+     * @param chrono  the chronology to use, which is the non-null result of getChronology()
+     * @param parser  if converting from a String, the given parser is preferred
+     * @return the array of field values that match the fieldSource, must be non-null valid
+     * @throws ClassCastException if the object is invalid
+     * @since 1.3
+     */
+    public int[] getPartialValues(ReadablePartial fieldSource, Object object, Chronology chrono,
+                                  DateTimeFormatter parser)
+    {
+        long instant = getInstantMillis(object, chrono, parser);
+        return chrono.get(fieldSource, instant);
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Selects a suitable period type for the given object.
diff --git a/JodaTime/src/java/org/joda/time/convert/PartialConverter.java b/JodaTime/src/java/org/joda/time/convert/PartialConverter.java
index 26347b5d3..110404e28 100644
--- a/JodaTime/src/java/org/joda/time/convert/PartialConverter.java
+++ b/JodaTime/src/java/org/joda/time/convert/PartialConverter.java
@@ -17,6 +17,7 @@
 
 import org.joda.time.Chronology;
 import org.joda.time.ReadablePartial;
+import org.joda.time.format.DateTimeFormatter;
 
 /**
  * PartialConverter defines how an object is converted to a ReadablePartial.
@@ -55,4 +56,21 @@
      */
     int[] getPartialValues(ReadablePartial fieldSource, Object object, Chronology chrono);
 
+    /**
+     * Extracts the values of the partial from an object of this converter's type.
+     * The chrono parameter is a hint to the converter, should it require a
+     * chronology to aid in conversion.
+     * 
+     * @param fieldSource  a partial that provides access to the fields.
+     *  This partial may be incomplete and only getFieldType(int) should be used
+     * @param object  the object to convert
+     * @param chrono  the chronology to use, which is the non-null result of getChronology()
+     * @param parser  if converting from a String, the given parser is preferred
+     * @return the array of field values that match the fieldSource, must be non-null valid
+     * @throws ClassCastException if the object is invalid
+     * @since 1.3
+     */
+    int[] getPartialValues(ReadablePartial fieldSource, Object object, Chronology chrono,
+                           DateTimeFormatter parser);
+
 }

From bedcc4a0825a2180e2e2dcd868bdd32d6a1fcba9 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Sat, 22 Apr 2006 20:34:56 +0000
Subject: [PATCH 077/115] Removed local variable debug info from compiled
 classes, which reduces size of jar file by about 10%.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1074 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/build.xml | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/JodaTime/build.xml b/JodaTime/build.xml
index 86d3683dc..c06df91c5 100644
--- a/JodaTime/build.xml
+++ b/JodaTime/build.xml
@@ -69,6 +69,7 @@
 
   <!-- Should Java compilations set the 'debug' compiler option? -->
   <property name="compile.debug"           value="true"/>
+  <property name="compile.debuglevel"      value="lines,source"/>
 
   <!-- Should Java compilations set the 'deprecation' compiler option? -->
   <property name="compile.deprecation"     value="true"/>
@@ -175,6 +176,7 @@
     <javac  srcdir="${source.home}"
            destdir="${build.classes}"
              debug="${compile.debug}"
+        debuglevel="${compile.debuglevel}"
        deprecation="${compile.deprecation}"
           optimize="${compile.optimize}">
       <classpath refid="compile.classpath"/>

From 639e987252a1a22b1793347f48c233da980c8939 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 29 Apr 2006 11:16:25 +0000
Subject: [PATCH 078/115] Fix tests caused by extracting chronologies to
 constants

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1075 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../org/joda/time/TestDateMidnight_Basics.java  | 17 ++++++++---------
 .../test/org/joda/time/TestDateTime_Basics.java | 17 ++++++++---------
 2 files changed, 16 insertions(+), 18 deletions(-)

diff --git a/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java b/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java
index 8638b0f12..eba7c2521 100644
--- a/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java
@@ -52,17 +52,16 @@
     private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
     private static final DateTimeZone NEWYORK = DateTimeZone.forID("America/New_York");
 
-    static {
-        DateTimeZone.setDefault(LONDON);
-    }
-
-    private static final ISOChronology ISO_DEFAULT = ISOChronology.getInstance();
+    // the default time zone is set to LONDON in setUp()
+    // we have to hard code LONDON here (instead of ISOChronology.getInstance() etc.)
+    // as TestAll sets up a different time zone for better all-round testing
+    private static final ISOChronology ISO_DEFAULT = ISOChronology.getInstance(LONDON);
     private static final ISOChronology ISO_PARIS = ISOChronology.getInstance(PARIS);
-    private static final GJChronology GJ_DEFAULT = GJChronology.getInstance();
-    private static final GregorianChronology GREGORIAN_DEFAULT = GregorianChronology.getInstance();
+    private static final GJChronology GJ_DEFAULT = GJChronology.getInstance(LONDON);
+    private static final GregorianChronology GREGORIAN_DEFAULT = GregorianChronology.getInstance(LONDON);
     private static final GregorianChronology GREGORIAN_PARIS = GregorianChronology.getInstance(PARIS);
-    private static final BuddhistChronology BUDDHIST_DEFAULT = BuddhistChronology.getInstance();
-    private static final CopticChronology COPTIC_DEFAULT = CopticChronology.getInstance();
+    private static final BuddhistChronology BUDDHIST_DEFAULT = BuddhistChronology.getInstance(LONDON);
+    private static final CopticChronology COPTIC_DEFAULT = CopticChronology.getInstance(LONDON);
 
     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 
                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 
diff --git a/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java b/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java
index ead82ea52..adfbc5c00 100644
--- a/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java
@@ -52,19 +52,18 @@
     private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
     private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
 
-    static {
-        DateTimeZone.setDefault(LONDON);
-    }
-
+    // the default time zone is set to LONDON in setUp()
+    // we have to hard code LONDON here (instead of ISOChronology.getInstance() etc.)
+    // as TestAll sets up a different time zone for better all-round testing
     private static final ISOChronology ISO_UTC = ISOChronology.getInstanceUTC();
-    private static final ISOChronology ISO_DEFAULT = ISOChronology.getInstance();
+    private static final ISOChronology ISO_DEFAULT = ISOChronology.getInstance(LONDON);
     private static final ISOChronology ISO_PARIS = ISOChronology.getInstance(PARIS);
-    private static final GJChronology GJ_DEFAULT = GJChronology.getInstance();
-    private static final GregorianChronology GREGORIAN_DEFAULT = GregorianChronology.getInstance();
+    private static final GJChronology GJ_DEFAULT = GJChronology.getInstance(LONDON);
+    private static final GregorianChronology GREGORIAN_DEFAULT = GregorianChronology.getInstance(LONDON);
     private static final GregorianChronology GREGORIAN_PARIS = GregorianChronology.getInstance(PARIS);
     private static final BuddhistChronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();
-    private static final BuddhistChronology BUDDHIST_DEFAULT = BuddhistChronology.getInstance();
-    private static final CopticChronology COPTIC_DEFAULT = CopticChronology.getInstance();
+    private static final BuddhistChronology BUDDHIST_DEFAULT = BuddhistChronology.getInstance(LONDON);
+    private static final CopticChronology COPTIC_DEFAULT = CopticChronology.getInstance(LONDON);
     
     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 
                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 

From 52d79b9e4ad03c138bf41e9de38ec4ffb88c931d Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 29 Apr 2006 11:23:56 +0000
Subject: [PATCH 079/115] Fix tests to compile with changed converters

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1076 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../convert/MockZeroNullIntegerConverter.java |  7 ++++-
 .../time/convert/TestConverterManager.java    | 28 ++++++++-----------
 2 files changed, 18 insertions(+), 17 deletions(-)

diff --git a/JodaTime/src/test/org/joda/time/convert/MockZeroNullIntegerConverter.java b/JodaTime/src/test/org/joda/time/convert/MockZeroNullIntegerConverter.java
index 2e96a038c..8abeeb4b4 100644
--- a/JodaTime/src/test/org/joda/time/convert/MockZeroNullIntegerConverter.java
+++ b/JodaTime/src/test/org/joda/time/convert/MockZeroNullIntegerConverter.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2006 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -17,6 +17,7 @@
 
 import org.joda.time.Chronology;
 import org.joda.time.DateTimeZone;
+import org.joda.time.format.DateTimeFormatter;
 
 /**
  * A basic mock testing class for a converter.
@@ -32,6 +33,10 @@ public long getInstantMillis(Object object, Chronology chrono) {
         return 0;
     }
 
+    public long getInstantMillis(Object object, Chronology chrono, DateTimeFormatter parser) {
+        return 0;
+    }
+
     public Chronology getChronology(Object object, DateTimeZone zone) {
         return null;
     }
diff --git a/JodaTime/src/test/org/joda/time/convert/TestConverterManager.java b/JodaTime/src/test/org/joda/time/convert/TestConverterManager.java
index 039033ba1..7d55cb55b 100644
--- a/JodaTime/src/test/org/joda/time/convert/TestConverterManager.java
+++ b/JodaTime/src/test/org/joda/time/convert/TestConverterManager.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2006 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -50,6 +50,7 @@
 import org.joda.time.ReadableInstant;
 import org.joda.time.ReadableInterval;
 import org.joda.time.TimeOfDay;
+import org.joda.time.format.DateTimeFormatter;
 
 /**
  * This class is a JUnit test for ConverterManager.
@@ -167,10 +168,8 @@ public void testGetInstantConverterRemovedNull() {
 
     public void testGetInstantConverterOKMultipleMatches() {
         InstantConverter c = new InstantConverter() {
-            public long getInstantMillis(Object object) { return 0;}
-            public long getInstantMillis(Object object, DateTimeZone zone) {return 0;}
             public long getInstantMillis(Object object, Chronology chrono) {return 0;}
-            public Chronology getChronology(Object object) {return null;}
+            public long getInstantMillis(Object object, Chronology chrono, DateTimeFormatter parser) { return 0; }
             public Chronology getChronology(Object object, DateTimeZone zone) {return null;}
             public Chronology getChronology(Object object, Chronology chrono) {return null;}
             public Class getSupportedType() {return ReadableDateTime.class;}
@@ -188,10 +187,8 @@ public void testGetInstantConverterOKMultipleMatches() {
 
     public void testGetInstantConverterBadMultipleMatches() {
         InstantConverter c = new InstantConverter() {
-            public long getInstantMillis(Object object) { return 0;}
-            public long getInstantMillis(Object object, DateTimeZone zone) {return 0;}
             public long getInstantMillis(Object object, Chronology chrono) {return 0;}
-            public Chronology getChronology(Object object) {return null;}
+            public long getInstantMillis(Object object, Chronology chrono, DateTimeFormatter parser) { return 0; }
             public Chronology getChronology(Object object, DateTimeZone zone) {return null;}
             public Chronology getChronology(Object object, Chronology chrono) {return null;}
             public Class getSupportedType() {return Serializable.class;}
@@ -219,10 +216,8 @@ public void testGetInstantConverters() {
     //-----------------------------------------------------------------------
     public void testAddInstantConverter1() {
         InstantConverter c = new InstantConverter() {
-            public long getInstantMillis(Object object) { return 0;}
-            public long getInstantMillis(Object object, DateTimeZone zone) {return 0;}
             public long getInstantMillis(Object object, Chronology chrono) {return 0;}
-            public Chronology getChronology(Object object) {return null;}
+            public long getInstantMillis(Object object, Chronology chrono, DateTimeFormatter parser) { return 0; }
             public Chronology getChronology(Object object, DateTimeZone zone) {return null;}
             public Chronology getChronology(Object object, Chronology chrono) {return null;}
             public Class getSupportedType() {return Boolean.class;}
@@ -240,10 +235,8 @@ public void testAddInstantConverter1() {
 
     public void testAddInstantConverter2() {
         InstantConverter c = new InstantConverter() {
-            public long getInstantMillis(Object object) { return 0;}
-            public long getInstantMillis(Object object, DateTimeZone zone) {return 0;}
             public long getInstantMillis(Object object, Chronology chrono) {return 0;}
-            public Chronology getChronology(Object object) {return null;}
+            public long getInstantMillis(Object object, Chronology chrono, DateTimeFormatter parser) { return 0; }
             public Chronology getChronology(Object object, DateTimeZone zone) {return null;}
             public Chronology getChronology(Object object, Chronology chrono) {return null;}
             public Class getSupportedType() {return String.class;}
@@ -303,10 +296,8 @@ public void testRemoveInstantConverter1() {
 
     public void testRemoveInstantConverter2() {
         InstantConverter c = new InstantConverter() {
-            public long getInstantMillis(Object object) { return 0;}
-            public long getInstantMillis(Object object, DateTimeZone zone) {return 0;}
             public long getInstantMillis(Object object, Chronology chrono) {return 0;}
-            public Chronology getChronology(Object object) {return null;}
+            public long getInstantMillis(Object object, Chronology chrono, DateTimeFormatter parser) { return 0; }
             public Chronology getChronology(Object object, DateTimeZone zone) {return null;}
             public Chronology getChronology(Object object, Chronology chrono) {return null;}
             public Class getSupportedType() {return Boolean.class;}
@@ -388,6 +379,7 @@ public void testGetPartialConverterRemovedNull() {
     public void testGetPartialConverterOKMultipleMatches() {
         PartialConverter c = new PartialConverter() {
             public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono) {return null;}
+            public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono, DateTimeFormatter parser) {return null;}
             public Chronology getChronology(Object object, Chronology chrono) {return null;}
             public Class getSupportedType() {return ReadableDateTime.class;}
         };
@@ -405,6 +397,7 @@ public void testGetPartialConverterOKMultipleMatches() {
     public void testGetPartialConverterBadMultipleMatches() {
         PartialConverter c = new PartialConverter() {
             public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono) {return null;}
+            public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono, DateTimeFormatter parser) {return null;}
             public Chronology getChronology(Object object, Chronology chrono) {return null;}
             public Class getSupportedType() {return Serializable.class;}
         };
@@ -432,6 +425,7 @@ public void testGetPartialConverters() {
     public void testAddPartialConverter1() {
         PartialConverter c = new PartialConverter() {
             public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono) {return null;}
+            public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono, DateTimeFormatter parser) {return null;}
             public Chronology getChronology(Object object, Chronology chrono) {return null;}
             public Class getSupportedType() {return Boolean.class;}
         };
@@ -449,6 +443,7 @@ public void testAddPartialConverter1() {
     public void testAddPartialConverter2() {
         PartialConverter c = new PartialConverter() {
             public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono) {return null;}
+            public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono, DateTimeFormatter parser) {return null;}
             public Chronology getChronology(Object object, Chronology chrono) {return null;}
             public Class getSupportedType() {return String.class;}
         };
@@ -508,6 +503,7 @@ public void testRemovePartialConverter1() {
     public void testRemovePartialConverter2() {
         PartialConverter c = new PartialConverter() {
             public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono) {return null;}
+            public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono, DateTimeFormatter parser) {return null;}
             public Chronology getChronology(Object object, Chronology chrono) {return null;}
             public Class getSupportedType() {return Boolean.class;}
         };

From 2d752002f53a3b66d69c26cd1fe1b28ed3dfb5c8 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 29 Apr 2006 11:56:43 +0000
Subject: [PATCH 080/115] Update release notes

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1077 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt | 19 +++++++++++++------
 1 file changed, 13 insertions(+), 6 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 6efbaacab..a9e9cf7e7 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -49,10 +49,14 @@ Enhancements since 1.2
 
 Compatibility with 1.2
 ----------------------
-Binary compatible - Yes
+Binary compatible - Yes, except
+  - InstantConverter and PartialConverter interfaces have had a new method added.
+    These are mainly intended as internal interfaces and thus it is unlikely
+    that you have implementations that will break. If you did create your own
+    implementation and extended AbstractConverter then your code will not break.
 
-Source compatible - Yes
-  - v1.2 and v1.3 are source compatible in their public and protected API
+Source compatible - Yes, except
+  - InstantConverter and PartialConverter interfaces, see above
 
 Serialization compatible - Yes
 
@@ -92,11 +96,14 @@ Bug fixes since 1.2
 
 - ISO/Gregorian/Julian/Coptic/EthiopicChronology
   Fixed overflow when getting year field from instants at Long.MAX_VALUE and
-  LONG.MIN_VALUE.
+  LONG.MIN_VALUE
 
 - TimeOfDay
-  Constructing with String value no longer accepts date fields, and 'T' prefix
-  is now optional.
+  Constructing with String value no longer accepts date fields
+  Constructing with String now treats 'T' prefix as optional
+
+- DayOfYear field
+  Better error messages
 
 
 Feedback

From 3a99ba6f5aff017053e99634d8191755c64c93ca Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Sun, 30 Apr 2006 18:22:06 +0000
Subject: [PATCH 081/115] Added DateTimeFormat.patternForStyle method to
 retrieve the format pattern for a given style and locale.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1078 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  3 ++
 .../org/joda/time/format/DateTimeFormat.java  | 29 +++++++++++++++++--
 2 files changed, 29 insertions(+), 3 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index a9e9cf7e7..1ded4adf9 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -46,6 +46,9 @@ Enhancements since 1.2
   If a parsed datetime is illegal due to field range or time zone offset
   transition, thrown exception includes text of datetime being parsed.
 
+- DateTimeFormat
+  Added method to retrieve the format pattern for a given style and locale.
+
 
 Compatibility with 1.2
 ----------------------
diff --git a/JodaTime/src/java/org/joda/time/format/DateTimeFormat.java b/JodaTime/src/java/org/joda/time/format/DateTimeFormat.java
index 3d178718b..60e9e56c5 100644
--- a/JodaTime/src/java/org/joda/time/format/DateTimeFormat.java
+++ b/JodaTime/src/java/org/joda/time/format/DateTimeFormat.java
@@ -82,7 +82,7 @@
  * S       fraction of second           number        978
  *
  * z       time zone                    text          Pacific Standard Time; PST
- * Z       time zone offset/id          zone          -0800; -08:00; Asia/Tokyo
+ * Z       time zone offset/id          zone          -0800; -08:00; America/Los_Angeles
  *
  * '       escape for text              delimiter
  * ''      single quote                 literal       '
@@ -191,6 +191,29 @@ public static DateTimeFormatter forStyle(String style) {
         return createFormatterForStyle(style);
     }
 
+    /**
+     * Returns the pattern used by a particular style and locale.
+     * <p>
+     * The first character is the date style, and the second character is the
+     * time style. Specify a character of 'S' for short style, 'M' for medium,
+     * 'L' for long, and 'F' for full.
+     * A date or time may be ommitted by specifying a style character '-'.
+     *
+     * @param style  two characters from the set {"S", "M", "L", "F", "-"}
+     * @param locale  locale to use, null means default
+     * @return the formatter
+     * @throws IllegalArgumentException if the style is invalid
+     * @since 1.3
+     */
+    public static String patternForStyle(String style, Locale locale) {
+        DateTimeFormatter formatter = createFormatterForStyle(style);
+        if (locale == null) {
+            locale = Locale.getDefault();
+        }
+        // Not pretty, but it works.
+        return ((StyleFormatter) formatter.getPrinter()).getPattern(locale);
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Creates a format that outputs a short date format.
@@ -691,7 +714,7 @@ private static DateTimeFormatter createFormatterForStyle(String style) {
      * @return the formatter
      */
     private static DateTimeFormatter createFormatterForStyleIndex(int dateStyle, int timeStyle) {
-        int index = dateStyle * 5 + timeStyle;
+        int index = ((dateStyle << 2) + dateStyle) + timeStyle;
         DateTimeFormatter f = null;
         synchronized (cStyleCache) {
             f = cStyleCache[index];
@@ -803,7 +826,7 @@ private DateTimeFormatter getFormatter(Locale locale) {
             return f;
         }
 
-        private String getPattern(Locale locale) {
+        String getPattern(Locale locale) {
             DateFormat f = null;
             switch (iType) {
                 case DATE:

From 404ada8f27e345afdd3e77f41cf28892771e22e3 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Sun, 30 Apr 2006 18:26:42 +0000
Subject: [PATCH 082/115] Fixed @since tags.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1079 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/LocalTime.java | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/LocalTime.java b/JodaTime/src/java/org/joda/time/LocalTime.java
index eb37822db..d89c7d834 100644
--- a/JodaTime/src/java/org/joda/time/LocalTime.java
+++ b/JodaTime/src/java/org/joda/time/LocalTime.java
@@ -68,7 +68,7 @@
  * All standard Chronology classes supplied are thread-safe and immutable.
  *
  * @author Stephen Colebourne
- * @since 1.0
+ * @since 1.3
  */
 public final class LocalTime
         extends AbstractPartial
@@ -1204,7 +1204,7 @@ public String toString(String pattern, Locale locale) throws IllegalArgumentExce
      *
      * @author Stephen Colebourne
      * @author Brian S O'Neill
-     * @since 1.2
+     * @since 1.3
      */
     public static final class Property extends AbstractReadableInstantFieldProperty {
         

From 7c09011e27c6a6042f2614b02e1a2363ca7e68c0 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Mon, 1 May 2006 15:12:29 +0000
Subject: [PATCH 083/115] updated tz data to version 2006e

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1080 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  2 +-
 .../src/java/org/joda/time/tz/src/Readme.txt  |  2 +-
 JodaTime/src/java/org/joda/time/tz/src/asia   | 54 +++++++++++++-
 .../java/org/joda/time/tz/src/northamerica    | 73 +++++++++++++------
 4 files changed, 105 insertions(+), 26 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 1ded4adf9..b0270f333 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -64,7 +64,7 @@ Source compatible - Yes, except
 Serialization compatible - Yes
 
 Data compatible - Yes
-  - DateTimeZone data updated to version 2006d
+  - DateTimeZone data updated to version 2006e
 
 
 Deprecations since 1.2
diff --git a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
index d32d5a3a4..782e2b0d3 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
+++ b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
@@ -1,2 +1,2 @@
 The data files in this directory were obtained from the public tz database,
-http://www.twinsun.com/tz/tz-link.htm, version 2006d.
+http://www.twinsun.com/tz/tz-link.htm, version 2006e.
diff --git a/JodaTime/src/java/org/joda/time/tz/src/asia b/JodaTime/src/java/org/joda/time/tz/src/asia
index f112d3a8b..5e0622213 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/asia
+++ b/JodaTime/src/java/org/joda/time/tz/src/asia
@@ -1,4 +1,4 @@
-# @(#)asia	8.3
+# @(#)asia	8.4
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
@@ -1467,6 +1467,20 @@ Zone	Asia/Gaza	2:17:52	-	LMT	1900 Oct
 # be immediately followed by 1845-01-01.  Robert H. van Gent has a
 # transcript of the decree in <http://www.phys.uu.nl/~vgent/idl/idl.htm>.
 # The rest of the data are from Shanks & Pottenger.
+
+# From Paul Eggert (2006-04-25):
+# Tomorrow's Manila Standard reports that the Philippines Department of
+# Trade and Industry is considering adopting DST this June when the
+# rainy season begins.  See
+# <http://www.manilastandardtoday.com/?page=politics02_april26_2006>.
+# For now, we'll ignore this, since it's not definite and we lack details.
+#
+# From Jesper Norgaard Welen (2006-04-26):
+# ... claims that Philippines had DST last time in 1990:
+# http://story.philippinetimes.com/p.x/ct/9/id/145be20cc6b121c0/cid/3e5bbccc730d258c/
+# [a story dated 2006-04-25 by Cris Larano of Dow Jones Newswires,
+# but no details]
+
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Phil	1936	only	-	Nov	1	0:00	1:00	S
 Rule	Phil	1937	only	-	Feb	1	0:00	0	-
@@ -1531,6 +1545,44 @@ Zone	Asia/Singapore	6:55:25 -	LMT	1901 Jan  1
 # 0030 hrs on April 15, 2006 (midnight of April 14, 2006 +30 minutes)
 # at present, become 2400 hours of April 14, 2006 (midnight of April 14, 2006).
 
+# From Peter Apps and Ranga Sirila of Reuters (2006-04-12) in:
+# <http://today.reuters.co.uk/news/newsArticle.aspx?type=scienceNews&storyID=2006-04-12T172228Z_01_COL295762_RTRIDST_0_SCIENCE-SRILANKA-TIME-DC.XML>
+# [The Tamil Tigers] never accepted the original 1996 time change and simply
+# kept their clocks set five and a half hours ahead of Greenwich Mean
+# Time (GMT), in line with neighbor India.
+# From Paul Eggert (2006-04-18):
+# People who live in regions under Tamil control can use TZ='Asia/Calcutta',
+# as that zone has agreed with the Tamil areas since our cutoff date of 1970.
+
+# From K Sethu (2006-04-25):
+# I think the abbreviation LKT originated from the world of computers at
+# the time of or subsequent to the time zone changes by SL Government
+# twice in 1996 and probably SL Government or its standardization
+# agencies never declared an abbreviation as a national standard.
+#
+# I recollect before the recent change the government annoucemments
+# mentioning it as simply changing Sri Lanka Standard Time or Sri Lanka
+# Time and no mention was made about the abbreviation.
+#
+# If we look at Sri Lanka Department of Government's "Official News
+# Website of Sri Lanka" ... http://www.news.lk/ we can see that they
+# use SLT as abbreviation in time stamp at the beginning of each news
+# item....
+#
+# Within Sri Lanka I think LKT is well known among computer users and
+# adminsitrators.  In my opinion SLT may not be a good choice because the
+# nation's largest telcom / internet operator Sri Lanka Telcom is well
+# known by that abbreviation - simply as SLT (there IP domains are
+# slt.lk and sltnet.lk).
+#
+# But if indeed our government has adopted SLT as standard abbreviation
+# (that we have not known so far) then  it is better that it be used for
+# all computers.
+
+# From Paul Eggert (2006-04-25):
+# One possibility is that we wait for a bit for the dust to settle down
+# and then see what people actually say in practice.
+
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Asia/Colombo	5:19:24 -	LMT	1880
 			5:19:32	-	MMT	1906	# Moratuwa Mean Time
diff --git a/JodaTime/src/java/org/joda/time/tz/src/northamerica b/JodaTime/src/java/org/joda/time/tz/src/northamerica
index 7f92c0ad8..11afe1e6f 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/northamerica
+++ b/JodaTime/src/java/org/joda/time/tz/src/northamerica
@@ -1,4 +1,4 @@
-# @(#)northamerica	8.4
+# @(#)northamerica	8.5
 # <pre>
 
 # also includes Central America and the Caribbean
@@ -301,6 +301,13 @@ Zone America/New_York	-4:56:02 -	LMT	1883 Nov 18 12:03:58
 # Nebraska, eastern North Dakota, Oklahoma, eastern South Dakota,
 # western Tennessee, most of Texas, Wisconsin
 
+# From Larry M. Smith (2006-04-26) re Wisconsin:
+# http://www.legis.state.wi.us/statutes/Stat0175.pdf ...
+# is currently enforced at the 01:00 time of change.  Because the local
+# "bar time" in the state corresponds to 02:00, a number of citations
+# are issued for the "sale of class 'B' alcohol after prohibited
+# hours" within the deviated hour of this change every year....
+
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
 Rule	Chicago	1920	only	-	Jun	13	2:00	1:00	D
 Rule	Chicago	1920	1921	-	Oct	lastSun	2:00	0	S
@@ -322,7 +329,7 @@ Zone America/North_Dakota/Center -6:45:12 - LMT	1883 Nov 18 12:14:48
 			-7:00	US	M%sT	1992 Oct 25 02:00
 			-6:00	US	C%sT
 # Morton County, ND, switched from mountain to central time on
-# 2003-10-26, except for the area around Mandan.
+# 2003-10-26, except for the area around Mandan which was already central time.
 # See <http://dmses.dot.gov/docimages/p63/135818.pdf>.
 # Officially this switch also included part of Sioux County, and
 # Jones, Mellette, and Todd Counties in South Dakota;
@@ -544,17 +551,9 @@ Zone America/Boise	-7:44:49 -	LMT	1883 Nov 18 12:15:11
 # - Clark, Floyd, and Harrison counties have been like
 #   America/Kentucky/Louisville.
 #
-# - Daviess, Dubois, Knox, and Perry counties
+# - Daviess, Dubois, Knox, Martin, Perry, and Pulaski counties
 #   have been like America/Indiana/Vincennes.
 #
-# - Officially, Martin and Pulaski counties have also been like
-#   America/Indiana/Vincennes, but an AP article on Pulaski county
-#   <http://www.indystar.com/apps/pbcs.dll/article?AID=/20060207/NEWS01/602070408/1006>
-#   (2006-02-07) and an InsideINdianaBusiness.com report on Martin county
-#   <http://www.insideindianabusiness.com/newsitem.asp?ID=17202> (2006-03-15)
-#   say that the county commissioners have voted to stay on eastern time in
-#   2006, which means they are actually like America/Indiana/Indianopolis.
-#
 # - Crawford, Pike, Starke, and Switzerland counties have their own time zone
 #   histories as noted below.
 #
@@ -619,7 +618,7 @@ Zone America/Indiana/Marengo -5:45:23 -	LMT	1883 Nov 18 12:14:37
 			-5:00	-	EST	2006
 			-5:00	US	E%sT
 #
-# Daviess, Dubois, Knox, and Perry Counties, Indiana,
+# Daviess, Dubois, Knox, Martin, Perry, and Pulaski Counties, Indiana,
 # switched from eastern to central time in April 2006.
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
 Rule Vincennes	1946	only	-	Apr	lastSun	2:00	1:00	D
@@ -901,7 +900,7 @@ Zone America/Menominee	-5:50:27 -	LMT	1885 Sep 18 12:00
 # U.S. and the rest of Canada....
 # http://www2.news.gov.bc.ca/news_releases_2005-2009/2006AG0014-000330.htm
 
-# From Paul Eggert (2006-04-09):
+# From Paul Eggert (2006-04-25):
 # H. David Matthews and Mary Vincent's map
 # <a href="http://www.canadiangeographic.ca/Magazine/SO98/geomap.asp">
 # "It's about TIME", _Canadian Geographic_ (September-October 1998)
@@ -915,7 +914,7 @@ Zone America/Menominee	-5:50:27 -	LMT	1885 Sep 18 12:00
 # Its unofficial information is often taken from Matthews and Vincent.
 #
 # CBC News reported that Ontario and Manitoba have announced plans to
-# follow the US change, and that Nova Scotia is considering it; see
+# follow the US change; see
 # <http://www.cbc.ca/news/background/daylightsavingtime/> (2005-10-21).
 # CBC news also reported that Prince Edward Island is the first
 # province in Atlantic Canada to follow the US change, and that Quebec
@@ -1016,6 +1015,11 @@ Zone America/Goose_Bay	-4:01:40 -	LMT	1884 # Happy Valley-Goose Bay
 # in Canada to observe DST in 1971 but not 1970; for now we'll assume
 # this is a typo.
 
+# From Chris Walton (2006-04-25):
+# Daylight saving time will be extended by four weeks starting in 2007....
+# Here is a news release which was issued today by the Nova Scotia government:
+# http://www.gov.ns.ca/news/details.asp?id=20060425004
+
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Halifax	1916	only	-	Apr	 1	0:00	1:00	D
 Rule	Halifax	1916	only	-	Oct	 1	0:00	0	S
@@ -1593,6 +1597,10 @@ Zone America/Dawson_Creek -8:00:56 -	LMT	1884
 # From Paul Eggert (2005-07-26):
 # For lack of better information, assume that Southampton Island observed
 # daylight saving only during wartime.
+#
+# From Chris Walton (2006-04-25):
+# Daylight saving time will be extended by four weeks starting in 2007....
+# http://www.cbc.ca/north/story/nor-nwt-time-change.html
 
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	NT_YK	1918	only	-	Apr	14	2:00	1:00	D
@@ -2097,6 +2105,14 @@ Zone America/Guadeloupe	-4:06:08 -	LMT	1911 Jun 8	# Pointe a Pitre
 			-4:00	-	AST
 
 # Guatemala
+#
+# From Gwillim Law (2006-04-22), after a heads-up from Oscar van Vlijmen:
+# Diario Co Latino, at
+# http://www.diariocolatino.com/internacionales/detalles.asp?NewsID=8079,
+# says in an article dated 2006-04-19 that the Guatemalan government had
+# decided on that date to advance official time by 60 minutes, to lessen the
+# impact of the elevated cost of oil....  Daylight saving time will last from
+# 2006-04-29 24:00 (Guatemalan standard time) to 2006-09-30 (time unspecified).
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Guat	1973	only	-	Nov	25	0:00	1:00	D
 Rule	Guat	1974	only	-	Feb	24	0:00	0	S
@@ -2104,6 +2120,8 @@ Rule	Guat	1983	only	-	May	21	0:00	1:00	D
 Rule	Guat	1983	only	-	Sep	22	0:00	0	S
 Rule	Guat	1991	only	-	Mar	23	0:00	1:00	D
 Rule	Guat	1991	only	-	Sep	 7	0:00	0	S
+Rule	Guat	2006	only	-	Apr	30	0:00	1:00	D
+Rule	Guat	2006	only	-	Oct	 1	0:00	0	S
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone America/Guatemala	-6:02:04 -	LMT	1918 Oct 5
 			-6:00	Guat	C%sT
@@ -2198,9 +2216,7 @@ Zone America/Montserrat	-4:08:52 -	LMT	1911 Jul 1 0:01   # Cork Hill
 
 # Nicaragua
 #
-# From Steffen Thorsen (1998-12-29):
-# Nicaragua seems to be back at -6:00 but I have not been able to find when
-# they changed from -5:00.
+# This uses Shanks & Pottenger for times before 2005.
 #
 # From Steffen Thorsen (2005-04-12):
 # I've got reports from 8 different people that Nicaragua just started
@@ -2214,8 +2230,7 @@ Zone America/Montserrat	-4:08:52 -	LMT	1911 Jul 1 0:01   # Cork Hill
 #
 # From Paul Eggert (2005-05-01):
 # The decree doesn't say anything about daylight saving, but for now let's
-# assume that it is daylight saving and that they'll switch back on the
-# 3rd Sunday in September.
+# assume that it is daylight saving....
 #
 # From Gwillim Law (2005-04-21):
 # The Associated Press story on the time change, which can be found at
@@ -2233,20 +2248,32 @@ Zone America/Montserrat	-4:08:52 -	LMT	1911 Jul 1 0:01   # Cork Hill
 # http://www.presidencia.gob.ni/presidencia/files_index/secretaria/comunicados/2005/septiembre/26septiembre-cambio-hora.htm
 # (2005-09-26)
 #
+# From Jesper Norgaard Welen (2006-04-24):
+# http://www.elnuevodiario.com.ni/2006/04/26/nacionales/18036
+# It claims that DST will start 2006-04-30 at 2:00, and will last until the
+# end of august (without being more specific).
+# From Paul Eggert (2006-04-26):
+# Yesterday the president of Nicaragua announced that DST will begin
+# April 30 at 02:00.  No end date was announced.
+# http://www.presidencia.gob.ni/Presidencia/Files_index/Secretaria/Comunicados/2006/PRESIDENTE/250406-Que%20la%20Crisis%20originada%20por%20el%20alza%20constante%20de%20los%20precios%20internacionales.htm
+# For now, assume DST ends first Sunday in September at 02:00.
+#
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Nic	1979	1980	-	Mar	Sun>=16	0:00	1:00	D
 Rule	Nic	1979	1980	-	Jun	Mon>=23	0:00	0	S
-Rule	Nic	1992	only	-	Jan	 1	4:00	1:00	D
-Rule	Nic	1992	only	-	Sep	24	0:00	0	S
 Rule	Nic	2005	only	-	Apr	10	0:00	1:00	D
 Rule	Nic	2005	only	-	Oct	 2	0:00	0	S
+Rule	Nic	2006	only	-	Apr	30	2:00	1:00	D
+Rule	Nic	2006	only	-	Sep	Sun>=1	2:00	0	S
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	America/Managua	-5:45:08 -	LMT	1890
 			-5:45:12 -	MMT	1934 Jun 23 # Managua Mean Time?
 			-6:00	-	CST	1973 May
 			-5:00	-	EST	1975 Feb 16
-			-6:00	Nic	C%sT	1993 Jan 1 4:00
-			-5:00	-	EST	1998 Dec
+			-6:00	Nic	C%sT	1992 Jan  1 4:00
+			-5:00	-	EST	1992 Sep 24
+			-6:00	-	CST	1993
+			-5:00	-	EST	1997
 			-6:00	Nic	C%sT
 
 # Panama

From e2d27d12d479f8922154c579a1a22e067ef83f5f Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Tue, 2 May 2006 02:42:16 +0000
Subject: [PATCH 084/115] tz data version 2006f

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1081 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                        | 2 +-
 JodaTime/src/java/org/joda/time/tz/src/Readme.txt | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index b0270f333..f908540a1 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -64,7 +64,7 @@ Source compatible - Yes, except
 Serialization compatible - Yes
 
 Data compatible - Yes
-  - DateTimeZone data updated to version 2006e
+  - DateTimeZone data updated to version 2006f
 
 
 Deprecations since 1.2
diff --git a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
index 782e2b0d3..43ab37a13 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
+++ b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
@@ -1,2 +1,2 @@
 The data files in this directory were obtained from the public tz database,
-http://www.twinsun.com/tz/tz-link.htm, version 2006e.
+http://www.twinsun.com/tz/tz-link.htm, version 2006f.

From 66d1870b3bd004ceb95348355fb8a1f442a1362d Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Tue, 9 May 2006 02:23:37 +0000
Subject: [PATCH 085/115] tz data version 2006g

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1082 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  2 +-
 .../src/java/org/joda/time/tz/src/Readme.txt  |  2 +-
 .../java/org/joda/time/tz/src/northamerica    | 46 +++++++++++++------
 3 files changed, 35 insertions(+), 15 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index f908540a1..567b28e08 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -64,7 +64,7 @@ Source compatible - Yes, except
 Serialization compatible - Yes
 
 Data compatible - Yes
-  - DateTimeZone data updated to version 2006f
+  - DateTimeZone data updated to version 2006g
 
 
 Deprecations since 1.2
diff --git a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
index 43ab37a13..8daab0d4d 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
+++ b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
@@ -1,2 +1,2 @@
 The data files in this directory were obtained from the public tz database,
-http://www.twinsun.com/tz/tz-link.htm, version 2006f.
+http://www.twinsun.com/tz/tz-link.htm, version 2006g.
diff --git a/JodaTime/src/java/org/joda/time/tz/src/northamerica b/JodaTime/src/java/org/joda/time/tz/src/northamerica
index 11afe1e6f..0a049cb63 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/northamerica
+++ b/JodaTime/src/java/org/joda/time/tz/src/northamerica
@@ -1,4 +1,4 @@
-# @(#)northamerica	8.5
+# @(#)northamerica	8.6
 # <pre>
 
 # also includes Central America and the Caribbean
@@ -2085,6 +2085,16 @@ Zone America/Santo_Domingo -4:39:36 -	LMT	1890
 			-4:00	-	AST
 
 # El Salvador
+
+# From Paul Eggert (2006-05-05):
+# worldtimezone.com reports a 2006-05-02 Spanish-language AP article
+# saying Honduras will start using DST midnight Saturday, effective 4
+# months until September, and a 2006-05-03 NACION article saying El
+# Salvador will follow suit.  However, ignore this for now, because:
+# From Jesper Norgaard Welen (2005-05-05):
+# Change of DST perhaps postponed in El Salvador:
+# http://www.laprensagrafica.com/lodeldia/883.asp
+
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Salv	1987	1988	-	May	Sun>=1	0:00	1:00	D
 Rule	Salv	1987	1988	-	Sep	lastSun	0:00	0	S
@@ -2176,9 +2186,23 @@ Zone America/Port-au-Prince -4:49:20 -	LMT	1890
 
 # Honduras
 # Shanks & Pottenger say 1921 Jan 1; go with Whitman's more precise Apr 1.
+
+# From Paul Eggert (2006-05-05):
+# worldtimezone.com reports a 2006-05-02 Spanish-language AP article
+# saying Honduras will start using DST midnight Saturday, effective 4
+# months until September.  La Tribuna reported today
+# <http://www.latribuna.hn/99299.html> that Manuel Zelaya, the president
+# of Honduras, refused to back down on this.  For lack of better info,
+# assume they'll use the same end-of-DST rules as in 1987 and 1988.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Hond	1987	1988	-	May	Sun>=1	0:00	1:00	D
+Rule	Hond	1987	1988	-	Sep	lastSun	0:00	0	S
+Rule	Hond	2006	only	-	May	Sun>=1	0:00	1:00	D
+Rule	Hond	2006	only	-	Sep	lastSun	0:00	0	S
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone America/Tegucigalpa -5:48:52 -	LMT	1921 Apr
-			-6:00	Salv	C%sT
+			-6:00	Hond	C%sT
 #
 # Great Swan I ceded by US to Honduras in 1972
 
@@ -2248,23 +2272,19 @@ Zone America/Montserrat	-4:08:52 -	LMT	1911 Jul 1 0:01   # Cork Hill
 # http://www.presidencia.gob.ni/presidencia/files_index/secretaria/comunicados/2005/septiembre/26septiembre-cambio-hora.htm
 # (2005-09-26)
 #
-# From Jesper Norgaard Welen (2006-04-24):
-# http://www.elnuevodiario.com.ni/2006/04/26/nacionales/18036
-# It claims that DST will start 2006-04-30 at 2:00, and will last until the
-# end of august (without being more specific).
-# From Paul Eggert (2006-04-26):
-# Yesterday the president of Nicaragua announced that DST will begin
-# April 30 at 02:00.  No end date was announced.
-# http://www.presidencia.gob.ni/Presidencia/Files_index/Secretaria/Comunicados/2006/PRESIDENTE/250406-Que%20la%20Crisis%20originada%20por%20el%20alza%20constante%20de%20los%20precios%20internacionales.htm
-# For now, assume DST ends first Sunday in September at 02:00.
+# From Jesper Norgaard Welen (2006-05-05):
+# http://www.elnuevodiario.com.ni/2006/05/01/nacionales/18410
+# (my informal translation)
+# By order of the president of the republic, Enrique Bolanos, Nicaragua
+# advanced by sixty minutes their official time, yesterday at 2 in the
+# morning, and will stay that way until 30.th. of september.
 #
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Nic	1979	1980	-	Mar	Sun>=16	0:00	1:00	D
 Rule	Nic	1979	1980	-	Jun	Mon>=23	0:00	0	S
 Rule	Nic	2005	only	-	Apr	10	0:00	1:00	D
-Rule	Nic	2005	only	-	Oct	 2	0:00	0	S
+Rule	Nic	2005	2006	-	Oct	Sun>=1	0:00	0	S
 Rule	Nic	2006	only	-	Apr	30	2:00	1:00	D
-Rule	Nic	2006	only	-	Sep	Sun>=1	2:00	0	S
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	America/Managua	-5:45:08 -	LMT	1890
 			-5:45:12 -	MMT	1934 Jun 23 # Managua Mean Time?

From 340302208f25018c6a8aab755f844aa97f086db3 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 22 May 2006 20:30:08 +0000
Subject: [PATCH 086/115] Fix spelling spotted by Andreas Deininger

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1083 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/quickstart.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/JodaTime/xdocs/quickstart.xml b/JodaTime/xdocs/quickstart.xml
index 4a81ce659..ebcf3bb1a 100644
--- a/JodaTime/xdocs/quickstart.xml
+++ b/JodaTime/xdocs/quickstart.xml
@@ -115,7 +115,7 @@ Joda-Time provides support for intervals and time periods.
 </p>
 <p>
 An interval is represented by the
-<a href="api-release/org/joda/time/Interval.html"><code>Inteval</code></a> class.
+<a href="api-release/org/joda/time/Interval.html"><code>Interval</code></a> class.
 It holds a start and end datetime, and allows operations based around that
 range of time.
 </p>

From e3bb5c0e0c1d5a3cb12c444e922ddb00d1f5bccd Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 22 May 2006 23:43:50 +0000
Subject: [PATCH 087/115] Fix Local Object constructors

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1084 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |   6 +-
 .../src/java/org/joda/time/LocalDate.java     |  42 +++----
 .../src/java/org/joda/time/LocalDateTime.java |  32 ++---
 .../src/java/org/joda/time/LocalTime.java     |  41 +++----
 .../joda/time/convert/AbstractConverter.java  |  29 ++---
 .../joda/time/convert/InstantConverter.java   |  16 ---
 .../joda/time/convert/PartialConverter.java   |  15 ++-
 .../convert/ReadablePartialConverter.java     |  10 +-
 .../joda/time/convert/StringConverter.java    |  28 +++--
 .../joda/time/format/ISODateTimeFormat.java   |  40 ++++++-
 .../time/TestLocalDateTime_Constructors.java  | 112 ++++++++++++++++++
 .../joda/time/TestLocalDate_Constructors.java |  80 +++++++++++++
 .../joda/time/TestLocalTime_Constructors.java | 106 +++++++++++++++++
 .../time/convert/TestConverterManager.java    |  10 +-
 14 files changed, 437 insertions(+), 130 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 567b28e08..1bf496ff5 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -53,13 +53,13 @@ Enhancements since 1.2
 Compatibility with 1.2
 ----------------------
 Binary compatible - Yes, except
-  - InstantConverter and PartialConverter interfaces have had a new method added.
-    These are mainly intended as internal interfaces and thus it is unlikely
+  - PartialConverter interface has had two new methods added.
+    This is mainly intended as an internal interface and thus it is unlikely
     that you have implementations that will break. If you did create your own
     implementation and extended AbstractConverter then your code will not break.
 
 Source compatible - Yes, except
-  - InstantConverter and PartialConverter interfaces, see above
+  - PartialConverter interface, see above
 
 Serialization compatible - Yes
 
diff --git a/JodaTime/src/java/org/joda/time/LocalDate.java b/JodaTime/src/java/org/joda/time/LocalDate.java
index 20cc5b73f..9ac8e3a4f 100644
--- a/JodaTime/src/java/org/joda/time/LocalDate.java
+++ b/JodaTime/src/java/org/joda/time/LocalDate.java
@@ -28,7 +28,7 @@
 import org.joda.time.base.AbstractPartial;
 import org.joda.time.chrono.ISOChronology;
 import org.joda.time.convert.ConverterManager;
-import org.joda.time.convert.InstantConverter;
+import org.joda.time.convert.PartialConverter;
 import org.joda.time.field.AbstractReadableInstantFieldProperty;
 import org.joda.time.field.FieldUtils;
 import org.joda.time.format.DateTimeFormat;
@@ -256,7 +256,8 @@ public LocalDate(long instant, Chronology chronology) {
      * <p>
      * The recognised object types are defined in
      * {@link org.joda.time.convert.ConverterManager ConverterManager} and
-     * include ReadableInstant, String, Calendar and Date.
+     * include ReadablePartial, ReadableInstant, String, Calendar and Date.
+     * The String formats are described by {@link ISODateTimeFormat#dateElementParser()}.
      *
      * @param instant  the datetime object
      * @throws IllegalArgumentException if the instant is invalid
@@ -275,23 +276,20 @@ public LocalDate(Object instant) {
      * <p>
      * The recognised object types are defined in
      * {@link org.joda.time.convert.ConverterManager ConverterManager} and
-     * include ReadableInstant, String, Calendar and Date.
+     * include ReadablePartial, ReadableInstant, String, Calendar and Date.
+     * The String formats are described by {@link ISODateTimeFormat#dateElementParser()}.
      *
      * @param instant  the datetime object
      * @param zone  the time zone
      * @throws IllegalArgumentException if the instant is invalid
      */
     public LocalDate(Object instant, DateTimeZone zone) {
-        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
+        PartialConverter converter = ConverterManager.getInstance().getPartialConverter(instant);
         Chronology chronology = converter.getChronology(instant, zone);
-        long millis = converter.getInstantMillis
-            (instant, chronology, ISODateTimeFormat.dateParser());
-        
-        long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, millis);
-        chronology = chronology.withUTC();
-        chronology.dayOfMonth().roundFloor(localMillis);
-        iLocalMillis = localMillis;
-        iChronology = chronology;
+        chronology = DateTimeUtils.getChronology(chronology);
+        iChronology = chronology.withUTC();
+        int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.dateElementParser());
+        iLocalMillis = iChronology.getDateTimeMillis(values[0], values[1], values[2], 0);
     }
 
     /**
@@ -303,24 +301,20 @@ public LocalDate(Object instant, DateTimeZone zone) {
      * <p>
      * The recognised object types are defined in
      * {@link org.joda.time.convert.ConverterManager ConverterManager} and
-     * include ReadableInstant, String, Calendar and Date.
+     * include ReadablePartial, ReadableInstant, String, Calendar and Date.
+     * The String formats are described by {@link ISODateTimeFormat#dateElementParser()}.
      *
      * @param instant  the datetime object
      * @param chronology  the chronology
      * @throws IllegalArgumentException if the instant is invalid
      */
     public LocalDate(Object instant, Chronology chronology) {
-        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
-        Chronology chrono = DateTimeUtils.getChronology
-            (converter.getChronology(instant, chronology));
-        long millis = converter.getInstantMillis
-            (instant, chronology, ISODateTimeFormat.dateParser());
-        
-        long localMillis = chrono.getZone().getMillisKeepLocal(DateTimeZone.UTC, millis);
-        chrono = chrono.withUTC();
-        chrono.dayOfMonth().roundFloor(localMillis);
-        iLocalMillis = localMillis;
-        iChronology = chrono;
+        PartialConverter converter = ConverterManager.getInstance().getPartialConverter(instant);
+        chronology = converter.getChronology(instant, chronology);
+        chronology = DateTimeUtils.getChronology(chronology);
+        iChronology = chronology.withUTC();
+        int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.dateElementParser());
+        iLocalMillis = iChronology.getDateTimeMillis(values[0], values[1], values[2], 0);
     }
 
     //-----------------------------------------------------------------------
diff --git a/JodaTime/src/java/org/joda/time/LocalDateTime.java b/JodaTime/src/java/org/joda/time/LocalDateTime.java
index f64e01ac0..70d4c8e86 100644
--- a/JodaTime/src/java/org/joda/time/LocalDateTime.java
+++ b/JodaTime/src/java/org/joda/time/LocalDateTime.java
@@ -26,7 +26,7 @@
 import org.joda.time.base.AbstractPartial;
 import org.joda.time.chrono.ISOChronology;
 import org.joda.time.convert.ConverterManager;
-import org.joda.time.convert.InstantConverter;
+import org.joda.time.convert.PartialConverter;
 import org.joda.time.field.AbstractReadableInstantFieldProperty;
 import org.joda.time.format.DateTimeFormat;
 import org.joda.time.format.ISODateTimeFormat;
@@ -250,7 +250,8 @@ public LocalDateTime(long instant, Chronology chronology) {
      * <p>
      * The recognised object types are defined in
      * {@link org.joda.time.convert.ConverterManager ConverterManager} and
-     * include ReadableInstant, String, Calendar and Date.
+     * include ReadablePartial, ReadableInstant, String, Calendar and Date.
+     * The String formats are described by {@link ISODateTimeFormat#dateOptionalTimeParser()}.
      *
      * @param instant  the datetime object
      * @throws IllegalArgumentException if the instant is invalid
@@ -269,21 +270,20 @@ public LocalDateTime(Object instant) {
      * <p>
      * The recognised object types are defined in
      * {@link org.joda.time.convert.ConverterManager ConverterManager} and
-     * include ReadableInstant, String, Calendar and Date.
+     * include ReadablePartial, ReadableInstant, String, Calendar and Date.
+     * The String formats are described by {@link ISODateTimeFormat#dateOptionalTimeParser()}.
      *
      * @param instant  the datetime object
      * @param zone  the time zone
      * @throws IllegalArgumentException if the instant is invalid
      */
     public LocalDateTime(Object instant, DateTimeZone zone) {
-        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
+        PartialConverter converter = ConverterManager.getInstance().getPartialConverter(instant);
         Chronology chronology = converter.getChronology(instant, zone);
-        long millis = converter.getInstantMillis(instant, chronology);
         chronology = DateTimeUtils.getChronology(chronology);
-        
-        long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, millis);
-        iLocalMillis = localMillis;
         iChronology = chronology.withUTC();
+        int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.dateOptionalTimeParser());
+        iLocalMillis = iChronology.getDateTimeMillis(values[0], values[1], values[2], values[3]);
     }
 
     /**
@@ -295,20 +295,20 @@ public LocalDateTime(Object instant, DateTimeZone zone) {
      * <p>
      * The recognised object types are defined in
      * {@link org.joda.time.convert.ConverterManager ConverterManager} and
-     * include ReadableInstant, String, Calendar and Date.
+     * include ReadablePartial, ReadableInstant, String, Calendar and Date.
+     * The String formats are described by {@link ISODateTimeFormat#dateOptionalTimeParser()}.
      *
      * @param instant  the datetime object
      * @param chronology  the chronology
      * @throws IllegalArgumentException if the instant is invalid
      */
     public LocalDateTime(Object instant, Chronology chronology) {
-        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
-        Chronology chrono = DateTimeUtils.getChronology(converter.getChronology(instant, chronology));
-        long millis = converter.getInstantMillis(instant, chrono);
-        
-        long localMillis = chrono.getZone().getMillisKeepLocal(DateTimeZone.UTC, millis);
-        iLocalMillis = localMillis;
-        iChronology = chrono.withUTC();
+        PartialConverter converter = ConverterManager.getInstance().getPartialConverter(instant);
+        chronology = converter.getChronology(instant, chronology);
+        chronology = DateTimeUtils.getChronology(chronology);
+        iChronology = chronology.withUTC();
+        int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.dateOptionalTimeParser());
+        iLocalMillis = iChronology.getDateTimeMillis(values[0], values[1], values[2], values[3]);
     }
 
     //-----------------------------------------------------------------------
diff --git a/JodaTime/src/java/org/joda/time/LocalTime.java b/JodaTime/src/java/org/joda/time/LocalTime.java
index d89c7d834..cd3c29adf 100644
--- a/JodaTime/src/java/org/joda/time/LocalTime.java
+++ b/JodaTime/src/java/org/joda/time/LocalTime.java
@@ -28,7 +28,7 @@
 import org.joda.time.base.AbstractPartial;
 import org.joda.time.chrono.ISOChronology;
 import org.joda.time.convert.ConverterManager;
-import org.joda.time.convert.InstantConverter;
+import org.joda.time.convert.PartialConverter;
 import org.joda.time.field.AbstractReadableInstantFieldProperty;
 import org.joda.time.format.DateTimeFormat;
 import org.joda.time.format.ISODateTimeFormat;
@@ -285,7 +285,8 @@ public LocalTime(long instant, Chronology chronology) {
      * <p>
      * The recognised object types are defined in
      * {@link org.joda.time.convert.ConverterManager ConverterManager} and
-     * include ReadableInstant, String, Calendar and Date.
+     * include ReadablePartial, ReadableInstant, String, Calendar and Date.
+     * The String formats are described by {@link ISODateTimeFormat#timeParser()}.
      *
      * @param instant  the datetime object
      * @throws IllegalArgumentException if the instant is invalid
@@ -304,24 +305,20 @@ public LocalTime(Object instant) {
      * <p>
      * The recognised object types are defined in
      * {@link org.joda.time.convert.ConverterManager ConverterManager} and
-     * include ReadableInstant, String, Calendar and Date.
+     * include ReadablePartial, ReadableInstant, String, Calendar and Date.
+     * The String formats are described by {@link ISODateTimeFormat#timeParser()}.
      *
      * @param instant  the datetime object
      * @param zone  the time zone
      * @throws IllegalArgumentException if the instant is invalid
      */
     public LocalTime(Object instant, DateTimeZone zone) {
-        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
+        PartialConverter converter = ConverterManager.getInstance().getPartialConverter(instant);
         Chronology chronology = converter.getChronology(instant, zone);
-        long millis = converter.getInstantMillis
-            (instant, chronology, ISODateTimeFormat.timeParser());
         chronology = DateTimeUtils.getChronology(chronology);
-        
-        long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, millis);
-        chronology = chronology.withUTC();
-        chronology.millisOfDay().get(localMillis);
-        iLocalMillis = localMillis;
-        iChronology = chronology;
+        iChronology = chronology.withUTC();
+        int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.timeParser());
+        iLocalMillis = iChronology.getDateTimeMillis(0L, values[0], values[1], values[2], values[3]);
     }
 
     /**
@@ -333,24 +330,20 @@ public LocalTime(Object instant, DateTimeZone zone) {
      * <p>
      * The recognised object types are defined in
      * {@link org.joda.time.convert.ConverterManager ConverterManager} and
-     * include ReadableInstant, String, Calendar and Date.
+     * include ReadablePartial, ReadableInstant, String, Calendar and Date.
+     * The String formats are described by {@link ISODateTimeFormat#timeParser()}.
      *
      * @param instant  the datetime object
      * @param chronology  the chronology
      * @throws IllegalArgumentException if the instant is invalid
      */
     public LocalTime(Object instant, Chronology chronology) {
-        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
-        Chronology chrono = DateTimeUtils.getChronology
-            (converter.getChronology(instant, chronology));
-        long millis = converter.getInstantMillis
-            (instant, chronology, ISODateTimeFormat.timeParser());
-        
-        long localMillis = chrono.getZone().getMillisKeepLocal(DateTimeZone.UTC, millis);
-        chrono = chrono.withUTC();
-        chrono.millisOfDay().get(localMillis);
-        iLocalMillis = localMillis;
-        iChronology = chrono;
+        PartialConverter converter = ConverterManager.getInstance().getPartialConverter(instant);
+        chronology = converter.getChronology(instant, chronology);
+        chronology = DateTimeUtils.getChronology(chronology);
+        iChronology = chronology.withUTC();
+        int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.timeParser());
+        iLocalMillis = iChronology.getDateTimeMillis(0L, values[0], values[1], values[2], values[3]);
     }
 
     //-----------------------------------------------------------------------
diff --git a/JodaTime/src/java/org/joda/time/convert/AbstractConverter.java b/JodaTime/src/java/org/joda/time/convert/AbstractConverter.java
index c5f59b4f4..81b11745b 100644
--- a/JodaTime/src/java/org/joda/time/convert/AbstractConverter.java
+++ b/JodaTime/src/java/org/joda/time/convert/AbstractConverter.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2006 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -52,21 +52,6 @@ public long getInstantMillis(Object object, Chronology chrono) {
         return DateTimeUtils.currentTimeMillis();
     }
 
-    /**
-     * Extracts the millis from an object of this convertor's type.
-     * <p>
-     * This implementation returns the current time.
-     * 
-     * @param object  the object to convert
-     * @param chrono  the chronology to use, which is always non-null
-     * @param parser  if converting from a String, the given parser is preferred
-     * @return the millisecond value
-     * @since 1.3
-     */
-    public long getInstantMillis(Object object, Chronology chrono, DateTimeFormatter parser) {
-        return getInstantMillis(object, chrono);
-    }
-
     //-----------------------------------------------------------------------
     /**
      * Extracts the chronology from an object of this convertor's type
@@ -102,6 +87,8 @@ public Chronology getChronology(Object object, Chronology chrono) {
      * Extracts the values of the partial from an object of this converter's type.
      * The chrono parameter is a hint to the converter, should it require a
      * chronology to aid in conversion.
+     * <p>
+     * This implementation calls {@link #getInstantMillis(Object, Chronology)}.
      * 
      * @param fieldSource  a partial that provides access to the fields.
      *  This partial may be incomplete and only getFieldType(int) should be used
@@ -119,6 +106,8 @@ public Chronology getChronology(Object object, Chronology chrono) {
      * Extracts the values of the partial from an object of this converter's type.
      * The chrono parameter is a hint to the converter, should it require a
      * chronology to aid in conversion.
+     * <p>
+     * This implementation calls {@link #getPartialValues(ReadablePartial, Object, Chronology)}.
      * 
      * @param fieldSource  a partial that provides access to the fields.
      *  This partial may be incomplete and only getFieldType(int) should be used
@@ -129,11 +118,9 @@ public Chronology getChronology(Object object, Chronology chrono) {
      * @throws ClassCastException if the object is invalid
      * @since 1.3
      */
-    public int[] getPartialValues(ReadablePartial fieldSource, Object object, Chronology chrono,
-                                  DateTimeFormatter parser)
-    {
-        long instant = getInstantMillis(object, chrono, parser);
-        return chrono.get(fieldSource, instant);
+    public int[] getPartialValues(ReadablePartial fieldSource,
+            Object object, Chronology chrono, DateTimeFormatter parser) {
+        return getPartialValues(fieldSource, object, chrono);
     }
 
     //-----------------------------------------------------------------------
diff --git a/JodaTime/src/java/org/joda/time/convert/InstantConverter.java b/JodaTime/src/java/org/joda/time/convert/InstantConverter.java
index 170dcaa49..bb63ce043 100644
--- a/JodaTime/src/java/org/joda/time/convert/InstantConverter.java
+++ b/JodaTime/src/java/org/joda/time/convert/InstantConverter.java
@@ -17,7 +17,6 @@
 
 import org.joda.time.Chronology;
 import org.joda.time.DateTimeZone;
-import org.joda.time.format.DateTimeFormatter;
 
 /**
  * InstantConverter defines how an object is converted to milliseconds/chronology.
@@ -70,19 +69,4 @@
      */
     long getInstantMillis(Object object, Chronology chrono);
 
-    /**
-     * Extracts the millis from an object of this converter's type.
-     * <p>
-     * The chronology passed in is the result of the call to <code>getChronology</code>.
-     * 
-     * @param object  the object to convert
-     * @param chrono  the chronology to use, which is the non-null result of getChronology()
-     * @param parser  if converting from a String, the given parser is preferred
-     * @return the millisecond instant
-     * @throws ClassCastException if the object is invalid
-     * @throws IllegalArgumentException if object conversion fails
-     * @since 1.3
-     */
-    long getInstantMillis(Object object, Chronology chrono, DateTimeFormatter parser);
-
 }
diff --git a/JodaTime/src/java/org/joda/time/convert/PartialConverter.java b/JodaTime/src/java/org/joda/time/convert/PartialConverter.java
index 110404e28..8d0b4fe8e 100644
--- a/JodaTime/src/java/org/joda/time/convert/PartialConverter.java
+++ b/JodaTime/src/java/org/joda/time/convert/PartialConverter.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2006 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -16,6 +16,7 @@
 package org.joda.time.convert;
 
 import org.joda.time.Chronology;
+import org.joda.time.DateTimeZone;
 import org.joda.time.ReadablePartial;
 import org.joda.time.format.DateTimeFormatter;
 
@@ -31,6 +32,18 @@
  */
 public interface PartialConverter extends Converter {
 
+    /**
+     * Extracts the chronology from an object of this converter's type
+     * where the time zone is specified.
+     * 
+     * @param object  the object to convert
+     * @param zone  the specified zone to use, null means default zone
+     * @return the chronology, never null
+     * @throws ClassCastException if the object is invalid
+     * @since 1.3
+     */
+    Chronology getChronology(Object object, DateTimeZone zone);
+
     /**
      * Extracts the chronology from an object of this converter's type
      * where the chronology is specified.
diff --git a/JodaTime/src/java/org/joda/time/convert/ReadablePartialConverter.java b/JodaTime/src/java/org/joda/time/convert/ReadablePartialConverter.java
index 9d4fea788..c5b327f75 100644
--- a/JodaTime/src/java/org/joda/time/convert/ReadablePartialConverter.java
+++ b/JodaTime/src/java/org/joda/time/convert/ReadablePartialConverter.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2006 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -86,15 +86,9 @@ public Chronology getChronology(Object object, Chronology chrono) {
     public int[] getPartialValues(ReadablePartial fieldSource, Object object, Chronology chrono) {
         ReadablePartial input = (ReadablePartial) object;
         int size = fieldSource.size();
-        if (input.size() != size) {
-            throw new IllegalArgumentException("Partial field type lists are different");
-        }
         int[] values = new int[size];
         for (int i = 0; i < size; i++) {
-            if (fieldSource.getFieldType(i) != input.getFieldType(i)) {
-                throw new IllegalArgumentException("Partial field type lists are different");
-            }
-            values[i] = input.getValue(i);
+            values[i] = input.get(fieldSource.getFieldType(i));
         }
         chrono.validate(fieldSource, values);
         return values;
diff --git a/JodaTime/src/java/org/joda/time/convert/StringConverter.java b/JodaTime/src/java/org/joda/time/convert/StringConverter.java
index ebcd4f0f8..28a4d6d62 100644
--- a/JodaTime/src/java/org/joda/time/convert/StringConverter.java
+++ b/JodaTime/src/java/org/joda/time/convert/StringConverter.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2006 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -20,6 +20,7 @@
 import org.joda.time.Period;
 import org.joda.time.ReadWritableInterval;
 import org.joda.time.ReadWritablePeriod;
+import org.joda.time.ReadablePartial;
 import org.joda.time.field.FieldUtils;
 import org.joda.time.format.DateTimeFormatter;
 import org.joda.time.format.ISODateTimeFormat;
@@ -65,17 +66,28 @@ public long getInstantMillis(Object object, Chronology chrono) {
     }
 
     /**
-     * Gets the millis, which is the ISO parsed string value.
+     * Extracts the values of the partial from an object of this converter's type.
+     * The chrono parameter is a hint to the converter, should it require a
+     * chronology to aid in conversion.
      * 
-     * @param object  the String to convert, must not be null
-     * @param chrono  the chronology to use, non-null result of getChronology
-     * @param parser  the given parser is preferred
-     * @return the millisecond value
+     * @param fieldSource  a partial that provides access to the fields.
+     *  This partial may be incomplete and only getFieldType(int) should be used
+     * @param object  the object to convert
+     * @param chrono  the chronology to use, which is the non-null result of getChronology()
+     * @return the array of field values that match the fieldSource, must be non-null valid
+     * @throws ClassCastException if the object is invalid
      * @throws IllegalArgumentException if the value if invalid
      * @since 1.3
      */
-    public long getInstantMillis(Object object, Chronology chrono, DateTimeFormatter parser) {
-        return parser.withChronology(chrono).parseMillis((String) object);
+    public int[] getPartialValues(ReadablePartial fieldSource, Object object, Chronology chrono, DateTimeFormatter parser) {
+        long millis = parser.withChronology(chrono).parseMillis((String) object);
+        int size = fieldSource.size();
+        int[] values = new int[size];
+        for (int i = 0; i < size; i++) {
+            values[i] = fieldSource.getFieldType(i).getField(chrono).get(millis);
+        }
+        chrono.validate(fieldSource, values);
+        return values;
     }
 
     //-----------------------------------------------------------------------
diff --git a/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java b/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java
index 4b48ae6dc..273f42e50 100644
--- a/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java
+++ b/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2006 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -129,7 +129,8 @@
         tpe, // time parser element
         dp,  // date parser
         tp,  // time parser
-        dtp; // date time parser
+        dtp, // date time parser
+        dotp; // date optional time parser
 
     /**
      * Constructor.
@@ -681,8 +682,8 @@ public static DateTimeFormatter timeElementParser() {
     }
 
     /**
-     * Returns a generic ISO datetime parser. It accepts formats described by
-     * the following syntax:
+     * Returns a generic ISO datetime parser which parses either a date or
+     * a time or both. It accepts formats described by the following syntax:
      * <pre>
      * datetime          = time | (date-element [time | ('T' offset)])
      * time              = 'T' time-element [offset]
@@ -727,6 +728,37 @@ public static DateTimeFormatter dateTimeParser() {
         return dtp;
     }
 
+    /**
+     * Returns a generic ISO datetime parser where the date is mandatory and
+     * the time is optional. It accepts formats described by the following syntax:
+     * <pre>
+     * datetime          = date-element ['T' time-element [offset]])
+     * date-element      = std-date-element | ord-date-element | week-date-element
+     * std-date-element  = yyyy ['-' MM ['-' dd]]
+     * ord-date-element  = yyyy ['-' DDD]
+     * week-date-element = xxxx '-W' ww ['-' e]
+     * time-element      = HH [minute-element] | [fraction]
+     * minute-element    = ':' mm [second-element] | [fraction]
+     * second-element    = ':' ss [fraction]
+     * fraction          = ('.' | ',') digit+
+     * offset            = 'Z' | (('+' | '-') HH [':' mm [':' ss [('.' | ',') SSS]]])
+     * </pre>
+     */
+    public static DateTimeFormatter dateOptionalTimeParser() {
+        if (dotp == null) {
+            dotp = new DateTimeFormatterBuilder()
+                .append(dateElementParser())
+                .appendOptional(
+                    new DateTimeFormatterBuilder()
+                        .appendLiteral('T')
+                        .append(timeElementParser())
+                        .appendOptional(offsetElement().getParser())
+                        .toParser())
+                .toFormatter();
+        }
+        return dotp;
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Returns a formatter for a full date as four digit year, two digit month
diff --git a/JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java b/JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java
index 8fa56f76c..873b8ff4a 100644
--- a/JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java
+++ b/JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java
@@ -22,6 +22,7 @@
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
 
+import org.joda.time.chrono.BuddhistChronology;
 import org.joda.time.chrono.GregorianChronology;
 import org.joda.time.chrono.ISOChronology;
 
@@ -38,6 +39,7 @@
     private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
     private static final Chronology GREGORIAN_UTC = GregorianChronology.getInstanceUTC();
     private static final Chronology GREGORIAN_PARIS = GregorianChronology.getInstance(PARIS);
+    private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();
     private static final int OFFSET_PARIS = PARIS.getOffset(0L) / DateTimeConstants.MILLIS_PER_HOUR;
     private static final int OFFSET_MOSCOW = MOSCOW.getOffset(0L) / DateTimeConstants.MILLIS_PER_HOUR;
     
@@ -311,6 +313,116 @@ public void testConstructor_nullObject() throws Throwable {
         assertEquals(40, test.getMillisOfSecond());
     }
 
+    public void testConstructor_ObjectString1() throws Throwable {
+        LocalDateTime test = new LocalDateTime("1972-04-06");
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1972, test.getYear());
+        assertEquals(4, test.getMonthOfYear());
+        assertEquals(6, test.getDayOfMonth());
+        assertEquals(0, test.getHourOfDay());
+        assertEquals(0, test.getMinuteOfHour());
+        assertEquals(0, test.getSecondOfMinute());
+        assertEquals(0, test.getMillisOfSecond());
+    }
+
+    public void testConstructor_ObjectString2() throws Throwable {
+        LocalDateTime test = new LocalDateTime("1972-037");
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1972, test.getYear());
+        assertEquals(2, test.getMonthOfYear());
+        assertEquals(6, test.getDayOfMonth());
+        assertEquals(0, test.getHourOfDay());
+        assertEquals(0, test.getMinuteOfHour());
+        assertEquals(0, test.getSecondOfMinute());
+        assertEquals(0, test.getMillisOfSecond());
+    }
+
+    public void testConstructor_ObjectString3() throws Throwable {
+        LocalDateTime test = new LocalDateTime("1972-04-06T10:20:30.040");
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1972, test.getYear());
+        assertEquals(4, test.getMonthOfYear());
+        assertEquals(6, test.getDayOfMonth());
+        assertEquals(10, test.getHourOfDay());
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(30, test.getSecondOfMinute());
+        assertEquals(40, test.getMillisOfSecond());
+    }
+
+    public void testConstructor_ObjectString4() throws Throwable {
+        LocalDateTime test = new LocalDateTime("1972-04-06T10:20");
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1972, test.getYear());
+        assertEquals(4, test.getMonthOfYear());
+        assertEquals(6, test.getDayOfMonth());
+        assertEquals(10, test.getHourOfDay());
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(0, test.getSecondOfMinute());
+        assertEquals(0, test.getMillisOfSecond());
+    }
+
+    public void testConstructor_ObjectString5() throws Throwable {
+        LocalDateTime test = new LocalDateTime("1972-04-06T10:20:30.040+06:00");
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1972, test.getYear());
+        assertEquals(4, test.getMonthOfYear());
+        assertEquals(6, test.getDayOfMonth());
+        assertEquals(10 + OFFSET_MOSCOW - 6, test.getHourOfDay());
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(30, test.getSecondOfMinute());
+        assertEquals(40, test.getMillisOfSecond());
+    }
+
+    public void testConstructor_ObjectStringEx1() throws Throwable {
+        try {
+            new LocalDateTime("T10:20:30.040");
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testConstructor_ObjectStringEx2() throws Throwable {
+        try {
+            new LocalDateTime("T10:20:30.040+14:00");
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testConstructor_ObjectStringEx3() throws Throwable {
+        try {
+            new LocalDateTime("1970-04-06T+14:00");
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testConstructor_ObjectLocalDateTime() throws Throwable {
+        LocalDateTime dt = new LocalDateTime(1970, 5, 6, 10, 20, 30, 40, BUDDHIST_UTC);
+        LocalDateTime test = new LocalDateTime(dt);
+        assertEquals(BUDDHIST_UTC, test.getChronology());
+        assertEquals(1970, test.getYear());
+        assertEquals(5, test.getMonthOfYear());
+        assertEquals(6, test.getDayOfMonth());
+        assertEquals(10, test.getHourOfDay());
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(30, test.getSecondOfMinute());
+        assertEquals(40, test.getMillisOfSecond());
+    }
+
+    public void testConstructor_ObjectLocalDate() throws Throwable {
+        LocalDate date = new LocalDate(1970, 5, 6);
+        try {
+            new LocalDateTime(date);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testConstructor_ObjectLocalTime() throws Throwable {
+        LocalTime time = new LocalTime(10, 20, 30, 40);
+        try {
+            new LocalDateTime(time);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
     //-----------------------------------------------------------------------
     public void testConstructor_Object_DateTimeZone() throws Throwable {
         Date date = new Date(TEST_TIME1);
diff --git a/JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java b/JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java
index bac3fcf6b..bdc420db9 100644
--- a/JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java
+++ b/JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java
@@ -243,6 +243,86 @@ public void testConstructor_nullObject() throws Throwable {
         assertEquals(9, test.getDayOfMonth());
     }
 
+    public void testConstructor_ObjectString1() throws Throwable {
+        LocalDate test = new LocalDate("1972-04-06");
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1972, test.getYear());
+        assertEquals(4, test.getMonthOfYear());
+        assertEquals(6, test.getDayOfMonth());
+    }
+
+    public void testConstructor_ObjectString2() throws Throwable {
+        LocalDate test = new LocalDate("1972-037");
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1972, test.getYear());
+        assertEquals(2, test.getMonthOfYear());
+        assertEquals(6, test.getDayOfMonth());
+    }
+
+    public void testConstructor_ObjectStringEx1() throws Throwable {
+        try {
+            new LocalDate("1970-04-06T10:20:30.040");
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testConstructor_ObjectStringEx2() throws Throwable {
+        try {
+            new LocalDate("1970-04-06T10:20:30.040+14:00");
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testConstructor_ObjectStringEx3() throws Throwable {
+        try {
+            new LocalDate("T10:20:30.040+14:00");
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testConstructor_ObjectStringEx4() throws Throwable {
+        try {
+            new LocalDate("1970-04-06T+14:00");
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testConstructor_ObjectLocalDate() throws Throwable {
+        LocalDate date = new LocalDate(1970, 4, 6, BUDDHIST_UTC);
+        LocalDate test = new LocalDate(date);
+        assertEquals(BUDDHIST_UTC, test.getChronology());
+        assertEquals(1970, test.getYear());
+        assertEquals(4, test.getMonthOfYear());
+        assertEquals(6, test.getDayOfMonth());
+    }
+
+    public void testConstructor_ObjectLocalTime() throws Throwable {
+        LocalTime time = new LocalTime(10, 20, 30, 40, BUDDHIST_UTC);
+        try {
+            new LocalDate(time);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testConstructor_ObjectLocalDateTime() throws Throwable {
+        LocalDateTime dt = new LocalDateTime(1970, 5, 6, 10, 20, 30, 40, BUDDHIST_UTC);
+        LocalDate test = new LocalDate(dt);
+        assertEquals(BUDDHIST_UTC, test.getChronology());
+        assertEquals(1970, test.getYear());
+        assertEquals(5, test.getMonthOfYear());
+        assertEquals(6, test.getDayOfMonth());
+    }
+
+    public void testConstructor_ObjectYearMonthDay() throws Throwable {
+        YearMonthDay date = new YearMonthDay(1970, 4, 6, BUDDHIST_UTC);
+        LocalDate test = new LocalDate(date);
+        assertEquals(BUDDHIST_UTC, test.getChronology());
+        assertEquals(1970, test.getYear());
+        assertEquals(4, test.getMonthOfYear());
+        assertEquals(6, test.getDayOfMonth());
+    }
+
+    //-----------------------------------------------------------------------
     public void testConstructor_Object_DateTimeZone() throws Throwable {
         Date date = new Date(TEST_TIME1);
         LocalDate test = new LocalDate(date, PARIS);
diff --git a/JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java b/JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java
index fdf70bc3c..c5cb95dbb 100644
--- a/JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java
+++ b/JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java
@@ -22,6 +22,7 @@
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
 
+import org.joda.time.chrono.BuddhistChronology;
 import org.joda.time.chrono.GJChronology;
 import org.joda.time.chrono.ISOChronology;
 import org.joda.time.chrono.JulianChronology;
@@ -39,6 +40,7 @@
     private static final JulianChronology JULIAN_LONDON = JulianChronology.getInstance(LONDON);
     private static final JulianChronology JULIAN_PARIS = JulianChronology.getInstance(PARIS);
     private static final JulianChronology JULIAN_UTC = JulianChronology.getInstanceUTC();
+    private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();
     private static final int OFFSET_LONDON = LONDON.getOffset(0L) / DateTimeConstants.MILLIS_PER_HOUR;
     private static final int OFFSET_PARIS = PARIS.getOffset(0L) / DateTimeConstants.MILLIS_PER_HOUR;
 
@@ -315,6 +317,110 @@ public void testConstructor_nullObject() throws Throwable {
         assertEquals(40, test.getMillisOfSecond());
     }
 
+    public void testConstructor_ObjectString1() throws Throwable {
+        LocalTime test = new LocalTime("10:20:30.040");
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(10, test.getHourOfDay());
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(30, test.getSecondOfMinute());
+        assertEquals(40, test.getMillisOfSecond());
+    }
+
+    public void testConstructor_ObjectString2() throws Throwable {
+        LocalTime test = new LocalTime("10:20:30.040+04:00");
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(10 + OFFSET_LONDON - 4, test.getHourOfDay());
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(30, test.getSecondOfMinute());
+        assertEquals(40, test.getMillisOfSecond());
+    }
+
+    public void testConstructor_ObjectString3() throws Throwable {
+        LocalTime test = new LocalTime("T10:20:30.040");
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(10, test.getHourOfDay());
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(30, test.getSecondOfMinute());
+        assertEquals(40, test.getMillisOfSecond());
+    }
+
+    public void testConstructor_ObjectString4() throws Throwable {
+        LocalTime test = new LocalTime("T10:20:30.040+04:00");
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(10 + OFFSET_LONDON - 4, test.getHourOfDay());
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(30, test.getSecondOfMinute());
+        assertEquals(40, test.getMillisOfSecond());
+    }
+
+    public void testConstructor_ObjectString5() throws Throwable {
+        LocalTime test = new LocalTime("10:20");
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(10, test.getHourOfDay());
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(0, test.getSecondOfMinute());
+        assertEquals(0, test.getMillisOfSecond());
+    }
+
+    public void testConstructor_ObjectStringEx1() throws Throwable {
+        try {
+            new LocalTime("1970-04-06");
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testConstructor_ObjectStringEx2() throws Throwable {
+        try {
+            new LocalTime("1970-04-06T10:20:30.040+14:00");
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testConstructor_ObjectStringEx3() throws Throwable {
+        try {
+            new LocalTime("1970-04-06T+14:00");
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testConstructor_ObjectLocalTime() throws Throwable {
+        LocalTime time = new LocalTime(10, 20, 30, 40, BUDDHIST_UTC);
+        LocalTime test = new LocalTime(time);
+        assertEquals(BUDDHIST_UTC, test.getChronology());
+        assertEquals(10, test.getHourOfDay());
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(30, test.getSecondOfMinute());
+        assertEquals(40, test.getMillisOfSecond());
+    }
+
+    public void testConstructor_ObjectLocalDate() throws Throwable {
+        LocalDate date = new LocalDate(1970, 4, 6, BUDDHIST_UTC);
+        try {
+            new LocalTime(date);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testConstructor_ObjectLocalDateTime() throws Throwable {
+        LocalDateTime dt = new LocalDateTime(1970, 5, 6, 10, 20, 30, 40, BUDDHIST_UTC);
+        LocalTime test = new LocalTime(dt);
+        assertEquals(BUDDHIST_UTC, test.getChronology());
+        assertEquals(10, test.getHourOfDay());
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(30, test.getSecondOfMinute());
+        assertEquals(40, test.getMillisOfSecond());
+    }
+
+    public void testConstructor_ObjectTimeOfDay() throws Throwable {
+        TimeOfDay time = new TimeOfDay(10, 20, 30, 40, BUDDHIST_UTC);
+        LocalTime test = new LocalTime(time);
+        assertEquals(BUDDHIST_UTC, test.getChronology());
+        assertEquals(10, test.getHourOfDay());
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(30, test.getSecondOfMinute());
+        assertEquals(40, test.getMillisOfSecond());
+    }
+
     //-----------------------------------------------------------------------
     public void testConstructor_Object1_DateTimeZone() throws Throwable {
         Date date = new Date(TEST_TIME1);
diff --git a/JodaTime/src/test/org/joda/time/convert/TestConverterManager.java b/JodaTime/src/test/org/joda/time/convert/TestConverterManager.java
index 7d55cb55b..d72ae807f 100644
--- a/JodaTime/src/test/org/joda/time/convert/TestConverterManager.java
+++ b/JodaTime/src/test/org/joda/time/convert/TestConverterManager.java
@@ -169,7 +169,6 @@ public void testGetInstantConverterRemovedNull() {
     public void testGetInstantConverterOKMultipleMatches() {
         InstantConverter c = new InstantConverter() {
             public long getInstantMillis(Object object, Chronology chrono) {return 0;}
-            public long getInstantMillis(Object object, Chronology chrono, DateTimeFormatter parser) { return 0; }
             public Chronology getChronology(Object object, DateTimeZone zone) {return null;}
             public Chronology getChronology(Object object, Chronology chrono) {return null;}
             public Class getSupportedType() {return ReadableDateTime.class;}
@@ -188,7 +187,6 @@ public void testGetInstantConverterOKMultipleMatches() {
     public void testGetInstantConverterBadMultipleMatches() {
         InstantConverter c = new InstantConverter() {
             public long getInstantMillis(Object object, Chronology chrono) {return 0;}
-            public long getInstantMillis(Object object, Chronology chrono, DateTimeFormatter parser) { return 0; }
             public Chronology getChronology(Object object, DateTimeZone zone) {return null;}
             public Chronology getChronology(Object object, Chronology chrono) {return null;}
             public Class getSupportedType() {return Serializable.class;}
@@ -217,7 +215,6 @@ public void testGetInstantConverters() {
     public void testAddInstantConverter1() {
         InstantConverter c = new InstantConverter() {
             public long getInstantMillis(Object object, Chronology chrono) {return 0;}
-            public long getInstantMillis(Object object, Chronology chrono, DateTimeFormatter parser) { return 0; }
             public Chronology getChronology(Object object, DateTimeZone zone) {return null;}
             public Chronology getChronology(Object object, Chronology chrono) {return null;}
             public Class getSupportedType() {return Boolean.class;}
@@ -236,7 +233,6 @@ public void testAddInstantConverter1() {
     public void testAddInstantConverter2() {
         InstantConverter c = new InstantConverter() {
             public long getInstantMillis(Object object, Chronology chrono) {return 0;}
-            public long getInstantMillis(Object object, Chronology chrono, DateTimeFormatter parser) { return 0; }
             public Chronology getChronology(Object object, DateTimeZone zone) {return null;}
             public Chronology getChronology(Object object, Chronology chrono) {return null;}
             public Class getSupportedType() {return String.class;}
@@ -297,7 +293,6 @@ public void testRemoveInstantConverter1() {
     public void testRemoveInstantConverter2() {
         InstantConverter c = new InstantConverter() {
             public long getInstantMillis(Object object, Chronology chrono) {return 0;}
-            public long getInstantMillis(Object object, Chronology chrono, DateTimeFormatter parser) { return 0; }
             public Chronology getChronology(Object object, DateTimeZone zone) {return null;}
             public Chronology getChronology(Object object, Chronology chrono) {return null;}
             public Class getSupportedType() {return Boolean.class;}
@@ -380,6 +375,7 @@ public void testGetPartialConverterOKMultipleMatches() {
         PartialConverter c = new PartialConverter() {
             public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono) {return null;}
             public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono, DateTimeFormatter parser) {return null;}
+            public Chronology getChronology(Object object, DateTimeZone zone) {return null;}
             public Chronology getChronology(Object object, Chronology chrono) {return null;}
             public Class getSupportedType() {return ReadableDateTime.class;}
         };
@@ -398,6 +394,7 @@ public void testGetPartialConverterBadMultipleMatches() {
         PartialConverter c = new PartialConverter() {
             public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono) {return null;}
             public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono, DateTimeFormatter parser) {return null;}
+            public Chronology getChronology(Object object, DateTimeZone zone) {return null;}
             public Chronology getChronology(Object object, Chronology chrono) {return null;}
             public Class getSupportedType() {return Serializable.class;}
         };
@@ -426,6 +423,7 @@ public void testAddPartialConverter1() {
         PartialConverter c = new PartialConverter() {
             public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono) {return null;}
             public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono, DateTimeFormatter parser) {return null;}
+            public Chronology getChronology(Object object, DateTimeZone zone) {return null;}
             public Chronology getChronology(Object object, Chronology chrono) {return null;}
             public Class getSupportedType() {return Boolean.class;}
         };
@@ -444,6 +442,7 @@ public void testAddPartialConverter2() {
         PartialConverter c = new PartialConverter() {
             public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono) {return null;}
             public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono, DateTimeFormatter parser) {return null;}
+            public Chronology getChronology(Object object, DateTimeZone zone) {return null;}
             public Chronology getChronology(Object object, Chronology chrono) {return null;}
             public Class getSupportedType() {return String.class;}
         };
@@ -504,6 +503,7 @@ public void testRemovePartialConverter2() {
         PartialConverter c = new PartialConverter() {
             public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono) {return null;}
             public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono, DateTimeFormatter parser) {return null;}
+            public Chronology getChronology(Object object, DateTimeZone zone) {return null;}
             public Chronology getChronology(Object object, Chronology chrono) {return null;}
             public Class getSupportedType() {return Boolean.class;}
         };

From cfd80382ed7e88a465f6bd36e98a132fb0770eda Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 28 May 2006 19:23:16 +0000
Subject: [PATCH 088/115] Use standard 1.x branch naming for property methods

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1085 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |   3 +-
 .../src/java/org/joda/time/LocalDate.java     |  39 +--
 .../src/java/org/joda/time/LocalDateTime.java |  41 +--
 .../src/java/org/joda/time/LocalTime.java     |  51 ++-
 .../time/TestLocalDateTime_Properties.java    | 330 +++++++++---------
 .../joda/time/TestLocalDate_Properties.java   | 138 ++++----
 .../joda/time/TestLocalTime_Properties.java   | 254 +++++++-------
 7 files changed, 427 insertions(+), 429 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 1bf496ff5..a9a38d9ec 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -29,8 +29,7 @@ Enhancements since 1.2
   Neither YearMonthDay or TimeOfDay will be immediately deprecated as they
   are in widespread use.
   The API of the new classes has been kept as similar to YearMonthDay/TimeOfDay
-  as possible to aid migration. The main difference is the method names on the
-  property class.
+  as possible to aid migration, so this should be a search and replace change.
 
 - DateTime/DateMidnight/YearMonthDay/TimeOfDay
   Add toLocalXxx() methods that allow conversion to the new classes, for example:
diff --git a/JodaTime/src/java/org/joda/time/LocalDate.java b/JodaTime/src/java/org/joda/time/LocalDate.java
index 9ac8e3a4f..59e5a34b6 100644
--- a/JodaTime/src/java/org/joda/time/LocalDate.java
+++ b/JodaTime/src/java/org/joda/time/LocalDate.java
@@ -713,8 +713,8 @@ public LocalDate withFields(ReadablePartial partial) {
      * <p>
      * These two lines are equivalent:
      * <pre>
+     * LocalDate updated = dt.withDayOfMonth(6);
      * LocalDate updated = dt.withField(DateTimeFieldType.dayOfMonth(), 6);
-     * LocalDate updated = dt.dayOfMonth().withValue(6);
      * </pre>
      *
      * @param fieldType  the field type to set, not null
@@ -1485,15 +1485,14 @@ public String toString(String pattern, Locale locale) throws IllegalArgumentExce
      * </pre>
      * <p>
      * Methods are also provided that allow date modification. These return
-     * new instances of LocalDate - they do not modify the original.
-     * The example below yields two independent immutable date objects
-     * 20 years apart.
+     * new instances of LocalDate - they do not modify the original. The example
+     * below yields two independent immutable date objects 20 years apart.
      * <pre>
      * LocalDate dt = new LocalDate(1972, 12, 3);
-     * LocalDate dt1920 = dt.year().withValue(1920);
+     * LocalDate dt1920 = dt.year().setCopy(1920);
      * </pre>
      * <p>
-     * LocalDate.Propery itself is thread-safe and immutable, as well as the
+     * LocalDate.Property itself is thread-safe and immutable, as well as the
      * LocalDate being operated on.
      *
      * @author Stephen Colebourne
@@ -1577,14 +1576,14 @@ public LocalDate getLocalDate() {
          * @return a copy of the LocalDate with the field value changed
          * @throws IllegalArgumentException if the value isn't valid
          */
-        public LocalDate plus(int value) {
+        public LocalDate addToCopy(int value) {
             return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value));
         }
         
         /**
          * Adds to this field, possibly wrapped, in a copy of this LocalDate.
          * A field wrapped operation only changes this field.
-         * Thus 31st January plusWrapField one day goes to the 1st January.
+         * Thus 31st January addWrapField one day goes to the 1st January.
          * <p>
          * The LocalDate attached to this property is unchanged by this call.
          *
@@ -1592,7 +1591,7 @@ public LocalDate plus(int value) {
          * @return a copy of the LocalDate with the field value changed
          * @throws IllegalArgumentException if the value isn't valid
          */
-        public LocalDate plusWrapField(int value) {
+        public LocalDate addWrapFieldToCopy(int value) {
             return iInstant.withLocalMillis(iField.addWrapField(iInstant.getLocalMillis(), value));
         }
         
@@ -1606,7 +1605,7 @@ public LocalDate plusWrapField(int value) {
          * @return a copy of the LocalDate with the field value changed
          * @throws IllegalArgumentException if the value isn't valid
          */
-        public LocalDate withValue(int value) {
+        public LocalDate setCopy(int value) {
             return iInstant.withLocalMillis(iField.set(iInstant.getLocalMillis(), value));
         }
         
@@ -1620,7 +1619,7 @@ public LocalDate withValue(int value) {
          * @return a copy of the LocalDate with the field value changed
          * @throws IllegalArgumentException if the text value isn't valid
          */
-        public LocalDate withValue(String text, Locale locale) {
+        public LocalDate setCopy(String text, Locale locale) {
             return iInstant.withLocalMillis(iField.set(iInstant.getLocalMillis(), text, locale));
         }
         
@@ -1633,8 +1632,8 @@ public LocalDate withValue(String text, Locale locale) {
          * @return a copy of the LocalDate with the field value changed
          * @throws IllegalArgumentException if the text value isn't valid
          */
-        public LocalDate withValue(String text) {
-            return withValue(text, null);
+        public LocalDate setCopy(String text) {
+            return setCopy(text, null);
         }
         
         //-----------------------------------------------------------------------
@@ -1653,7 +1652,7 @@ public LocalDate withValue(String text) {
          * @return a copy of the LocalDate with this field set to its maximum
          */
         public LocalDate withMaximumValue() {
-            return withValue(getMaximumValue());
+            return setCopy(getMaximumValue());
         }
         
         /**
@@ -1665,7 +1664,7 @@ public LocalDate withMaximumValue() {
          * @return a copy of the LocalDate with this field set to its minimum
          */
         public LocalDate withMinimumValue() {
-            return withValue(getMinimumValue());
+            return setCopy(getMinimumValue());
         }
         
         //-----------------------------------------------------------------------
@@ -1679,7 +1678,7 @@ public LocalDate withMinimumValue() {
          *
          * @return a copy of the LocalDate with the field value changed
          */
-        public LocalDate roundFloor() {
+        public LocalDate roundFloorCopy() {
             return iInstant.withLocalMillis(iField.roundFloor(iInstant.getLocalMillis()));
         }
         
@@ -1693,7 +1692,7 @@ public LocalDate roundFloor() {
          *
          * @return a copy of the LocalDate with the field value changed
          */
-        public LocalDate roundCeiling() {
+        public LocalDate roundCeilingCopy() {
             return iInstant.withLocalMillis(iField.roundCeiling(iInstant.getLocalMillis()));
         }
         
@@ -1703,7 +1702,7 @@ public LocalDate roundCeiling() {
          *
          * @return a copy of the LocalDate with the field value changed
          */
-        public LocalDate roundHalfFloor() {
+        public LocalDate roundHalfFloorCopy() {
             return iInstant.withLocalMillis(iField.roundHalfFloor(iInstant.getLocalMillis()));
         }
         
@@ -1713,7 +1712,7 @@ public LocalDate roundHalfFloor() {
          *
          * @return a copy of the LocalDate with the field value changed
          */
-        public LocalDate roundHalfCeiling() {
+        public LocalDate roundHalfCeilingCopy() {
             return iInstant.withLocalMillis(iField.roundHalfCeiling(iInstant.getLocalMillis()));
         }
         
@@ -1724,7 +1723,7 @@ public LocalDate roundHalfCeiling() {
          *
          * @return a copy of the LocalDate with the field value changed
          */
-        public LocalDate roundHalfEven() {
+        public LocalDate roundHalfEvenCopy() {
             return iInstant.withLocalMillis(iField.roundHalfEven(iInstant.getLocalMillis()));
         }
     }
diff --git a/JodaTime/src/java/org/joda/time/LocalDateTime.java b/JodaTime/src/java/org/joda/time/LocalDateTime.java
index 70d4c8e86..b0e5d3906 100644
--- a/JodaTime/src/java/org/joda/time/LocalDateTime.java
+++ b/JodaTime/src/java/org/joda/time/LocalDateTime.java
@@ -1837,15 +1837,16 @@ public String toString(String pattern, Locale locale) throws IllegalArgumentExce
      * String monthStr = dt.month().getAsText();
      * </pre>
      * <p>
-     * Methods are also provided that allow date modification. These return new instances
-     * of DateTime - they do not modify the original. The example below yields two
-     * independent immutable date objects 20 years apart.
+     * Methods are also provided that allow date modification. These return
+     * new instances of LocalDateTime - they do not modify the original.
+     * The example below yields two independent immutable date objects
+     * 20 years apart.
      * <pre>
-     * LocalDateTime dt = new LocalDateTime(1972, 12, 3, 0, 0, 0, 0);
+     * LocalDateTime dt = new LocalDateTime(1972, 12, 3, 0, 0);
      * LocalDateTime dt1920 = dt.year().setCopy(1920);
      * </pre>
      * <p>
-     * LocalDateTime.Propery itself is thread-safe and immutable, as well as the
+     * LocalDateTime.Property itself is thread-safe and immutable, as well as the
      * LocalDateTime being operated on.
      *
      * @author Stephen Colebourne
@@ -1929,7 +1930,7 @@ public LocalDateTime getLocalDateTime() {
          * @return a copy of the LocalDateTime with the field value changed
          * @throws IllegalArgumentException if the value isn't valid
          */
-        public LocalDateTime plus(int value) {
+        public LocalDateTime addToCopy(int value) {
             return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value));
         }
         
@@ -1942,14 +1943,14 @@ public LocalDateTime plus(int value) {
          * @return a copy of the LocalDateTime with the field value changed
          * @throws IllegalArgumentException if the value isn't valid
          */
-        public LocalDateTime plus(long value) {
+        public LocalDateTime addToCopy(long value) {
             return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value));
         }
         
         /**
          * Adds to this field, possibly wrapped, in a copy of this LocalDateTime.
          * A field wrapped operation only changes this field.
-         * Thus 31st January plusWrapField one day goes to the 1st January.
+         * Thus 31st January addWrapField one day goes to the 1st January.
          * <p>
          * The LocalDateTime attached to this property is unchanged by this call.
          *
@@ -1957,7 +1958,7 @@ public LocalDateTime plus(long value) {
          * @return a copy of the LocalDateTime with the field value changed
          * @throws IllegalArgumentException if the value isn't valid
          */
-        public LocalDateTime plusWrapField(int value) {
+        public LocalDateTime addWrapFieldToCopy(int value) {
             return iInstant.withLocalMillis(iField.addWrapField(iInstant.getLocalMillis(), value));
         }
         
@@ -1971,7 +1972,7 @@ public LocalDateTime plusWrapField(int value) {
          * @return a copy of the LocalDateTime with the field value changed
          * @throws IllegalArgumentException if the value isn't valid
          */
-        public LocalDateTime withValue(int value) {
+        public LocalDateTime setCopy(int value) {
             return iInstant.withLocalMillis(iField.set(iInstant.getLocalMillis(), value));
         }
         
@@ -1985,7 +1986,7 @@ public LocalDateTime withValue(int value) {
          * @return a copy of the LocalDateTime with the field value changed
          * @throws IllegalArgumentException if the text value isn't valid
          */
-        public LocalDateTime withValue(String text, Locale locale) {
+        public LocalDateTime setCopy(String text, Locale locale) {
             return iInstant.withLocalMillis(iField.set(iInstant.getLocalMillis(), text, locale));
         }
         
@@ -1998,8 +1999,8 @@ public LocalDateTime withValue(String text, Locale locale) {
          * @return a copy of the LocalDateTime with the field value changed
          * @throws IllegalArgumentException if the text value isn't valid
          */
-        public LocalDateTime withValue(String text) {
-            return withValue(text, null);
+        public LocalDateTime setCopy(String text) {
+            return setCopy(text, null);
         }
         
         //-----------------------------------------------------------------------
@@ -2018,7 +2019,7 @@ public LocalDateTime withValue(String text) {
          * @return a copy of the LocalDateTime with this field set to its maximum
          */
         public LocalDateTime withMaximumValue() {
-            return withValue(getMaximumValue());
+            return setCopy(getMaximumValue());
         }
         
         /**
@@ -2030,7 +2031,7 @@ public LocalDateTime withMaximumValue() {
          * @return a copy of the LocalDateTime with this field set to its minimum
          */
         public LocalDateTime withMinimumValue() {
-            return withValue(getMinimumValue());
+            return setCopy(getMinimumValue());
         }
         
         //-----------------------------------------------------------------------
@@ -2044,7 +2045,7 @@ public LocalDateTime withMinimumValue() {
          *
          * @return a copy of the LocalDateTime with the field value changed
          */
-        public LocalDateTime roundFloor() {
+        public LocalDateTime roundFloorCopy() {
             return iInstant.withLocalMillis(iField.roundFloor(iInstant.getLocalMillis()));
         }
         
@@ -2058,7 +2059,7 @@ public LocalDateTime roundFloor() {
          *
          * @return a copy of the LocalDateTime with the field value changed
          */
-        public LocalDateTime roundCeiling() {
+        public LocalDateTime roundCeilingCopy() {
             return iInstant.withLocalMillis(iField.roundCeiling(iInstant.getLocalMillis()));
         }
         
@@ -2068,7 +2069,7 @@ public LocalDateTime roundCeiling() {
          *
          * @return a copy of the LocalDateTime with the field value changed
          */
-        public LocalDateTime roundHalfFloor() {
+        public LocalDateTime roundHalfFloorCopy() {
             return iInstant.withLocalMillis(iField.roundHalfFloor(iInstant.getLocalMillis()));
         }
         
@@ -2078,7 +2079,7 @@ public LocalDateTime roundHalfFloor() {
          *
          * @return a copy of the LocalDateTime with the field value changed
          */
-        public LocalDateTime roundHalfCeiling() {
+        public LocalDateTime roundHalfCeilingCopy() {
             return iInstant.withLocalMillis(iField.roundHalfCeiling(iInstant.getLocalMillis()));
         }
         
@@ -2089,7 +2090,7 @@ public LocalDateTime roundHalfCeiling() {
          *
          * @return a copy of the LocalDateTime with the field value changed
          */
-        public LocalDateTime roundHalfEven() {
+        public LocalDateTime roundHalfEvenCopy() {
             return iInstant.withLocalMillis(iField.roundHalfEven(iInstant.getLocalMillis()));
         }
     }
diff --git a/JodaTime/src/java/org/joda/time/LocalTime.java b/JodaTime/src/java/org/joda/time/LocalTime.java
index cd3c29adf..7459f1c9b 100644
--- a/JodaTime/src/java/org/joda/time/LocalTime.java
+++ b/JodaTime/src/java/org/joda/time/LocalTime.java
@@ -1177,22 +1177,21 @@ public String toString(String pattern, Locale locale) throws IllegalArgumentExce
      * powerful datetime functionality to be easily accessed.
      * <p>
      * The simplest use of this class is as an alternative get method, here used to
-     * get the year '1972' (as an int) and the month 'December' (as a String).
+     * get the minute '30'.
      * <pre>
-     * LocalTime dt = new LocalTime(1972, 12, 3, 0, 0);
-     * int year = dt.year().get();
-     * String monthStr = dt.month().getAsText();
+     * LocalTime dt = new LocalTime(12, 30);
+     * int year = dt.minuteOfHour().get();
      * </pre>
      * <p>
-     * Methods are also provided that allow date modification. These return new instances
-     * of DateTime - they do not modify the original. The example below yields two
-     * independent immutable date objects 20 years apart.
+     * Methods are also provided that allow time modification. These return
+     * new instances of LocalTime - they do not modify the original. The example
+     * below yields two independent immutable date objects 2 hours apart.
      * <pre>
-     * DateTime dt = new DateTime(1972, 12, 3, 0, 0, 0, 0);
-     * DateTime dt1920 = dt.year().setCopy(1920);
+     * LocalTime dt1230 = new LocalTime(12, 30);
+     * LocalTime dt1430 = dt1230.hourOfDay().setCopy(14);
      * </pre>
      * <p>
-     * LocalTime.Propery itself is thread-safe and immutable, as well as the
+     * LocalTime.Property itself is thread-safe and immutable, as well as the
      * LocalTime being operated on.
      *
      * @author Stephen Colebourne
@@ -1275,7 +1274,7 @@ public LocalTime getLocalTime() {
          * @param value  the value to add to the field in the copy
          * @return a copy of the LocalTime with the field value changed
          */
-        public LocalTime plus(int value) {
+        public LocalTime addCopy(int value) {
             return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value));
         }
         
@@ -1289,7 +1288,7 @@ public LocalTime plus(int value) {
          * @param value  the value to add to the field in the copy
          * @return a copy of the LocalTime with the field value changed
          */
-        public LocalTime plus(long value) {
+        public LocalTime addCopy(long value) {
             return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value));
         }
         
@@ -1297,7 +1296,7 @@ public LocalTime plus(long value) {
          * Adds to this field in a copy of this LocalTime.
          * If the addition exceeds the maximum value (eg. 23:59) then
          * an exception will be thrown.
-         * Contrast this behaviour to {@link #plus(int)}.
+         * Contrast this behaviour to {@link #addCopy(int)}.
          * <p>
          * The LocalTime attached to this property is unchanged by this call.
          *
@@ -1305,7 +1304,7 @@ public LocalTime plus(long value) {
          * @return a copy of the LocalTime with the field value changed
          * @throws IllegalArgumentException if the result is invalid
          */
-        public LocalTime plusNoWrap(int value) {
+        public LocalTime addNoWrapToCopy(int value) {
             long millis = iField.add(iInstant.getLocalMillis(), value);
             long rounded = iInstant.getChronology().millisOfDay().get(millis);
             if (rounded != millis) {
@@ -1325,7 +1324,7 @@ public LocalTime plusNoWrap(int value) {
          * @return a copy of the LocalTime with the field value changed
          * @throws IllegalArgumentException if the value isn't valid
          */
-        public LocalTime plusWrapField(int value) {
+        public LocalTime addWrapFieldToCopy(int value) {
             return iInstant.withLocalMillis(iField.addWrapField(iInstant.getLocalMillis(), value));
         }
         
@@ -1339,7 +1338,7 @@ public LocalTime plusWrapField(int value) {
          * @return a copy of the LocalTime with the field value changed
          * @throws IllegalArgumentException if the value isn't valid
          */
-        public LocalTime withValue(int value) {
+        public LocalTime setCopy(int value) {
             return iInstant.withLocalMillis(iField.set(iInstant.getLocalMillis(), value));
         }
         
@@ -1353,7 +1352,7 @@ public LocalTime withValue(int value) {
          * @return a copy of the LocalTime with the field value changed
          * @throws IllegalArgumentException if the text value isn't valid
          */
-        public LocalTime withValue(String text, Locale locale) {
+        public LocalTime setCopy(String text, Locale locale) {
             return iInstant.withLocalMillis(iField.set(iInstant.getLocalMillis(), text, locale));
         }
         
@@ -1366,8 +1365,8 @@ public LocalTime withValue(String text, Locale locale) {
          * @return a copy of the LocalTime with the field value changed
          * @throws IllegalArgumentException if the text value isn't valid
          */
-        public LocalTime withValue(String text) {
-            return withValue(text, null);
+        public LocalTime setCopy(String text) {
+            return setCopy(text, null);
         }
         
         //-----------------------------------------------------------------------
@@ -1380,7 +1379,7 @@ public LocalTime withValue(String text) {
          * @return a copy of the LocalTime with this field set to its maximum
          */
         public LocalTime withMaximumValue() {
-            return withValue(getMaximumValue());
+            return setCopy(getMaximumValue());
         }
         
         /**
@@ -1392,7 +1391,7 @@ public LocalTime withMaximumValue() {
          * @return a copy of the LocalTime with this field set to its minimum
          */
         public LocalTime withMinimumValue() {
-            return withValue(getMinimumValue());
+            return setCopy(getMinimumValue());
         }
         
         //-----------------------------------------------------------------------
@@ -1406,7 +1405,7 @@ public LocalTime withMinimumValue() {
          *
          * @return a copy of the LocalTime with the field value changed
          */
-        public LocalTime roundFloor() {
+        public LocalTime roundFloorCopy() {
             return iInstant.withLocalMillis(iField.roundFloor(iInstant.getLocalMillis()));
         }
         
@@ -1420,7 +1419,7 @@ public LocalTime roundFloor() {
          *
          * @return a copy of the LocalTime with the field value changed
          */
-        public LocalTime roundCeiling() {
+        public LocalTime roundCeilingCopy() {
             return iInstant.withLocalMillis(iField.roundCeiling(iInstant.getLocalMillis()));
         }
         
@@ -1430,7 +1429,7 @@ public LocalTime roundCeiling() {
          *
          * @return a copy of the LocalTime with the field value changed
          */
-        public LocalTime roundHalfFloor() {
+        public LocalTime roundHalfFloorCopy() {
             return iInstant.withLocalMillis(iField.roundHalfFloor(iInstant.getLocalMillis()));
         }
         
@@ -1440,7 +1439,7 @@ public LocalTime roundHalfFloor() {
          *
          * @return a copy of the LocalTime with the field value changed
          */
-        public LocalTime roundHalfCeiling() {
+        public LocalTime roundHalfCeilingCopy() {
             return iInstant.withLocalMillis(iField.roundHalfCeiling(iInstant.getLocalMillis()));
         }
         
@@ -1451,7 +1450,7 @@ public LocalTime roundHalfCeiling() {
          *
          * @return a copy of the LocalTime with the field value changed
          */
-        public LocalTime roundHalfEven() {
+        public LocalTime roundHalfEvenCopy() {
             return iInstant.withLocalMillis(iField.roundHalfEven(iInstant.getLocalMillis()));
         }
     }
diff --git a/JodaTime/src/test/org/joda/time/TestLocalDateTime_Properties.java b/JodaTime/src/test/org/joda/time/TestLocalDateTime_Properties.java
index 19159a4c2..23307c76b 100644
--- a/JodaTime/src/test/org/joda/time/TestLocalDateTime_Properties.java
+++ b/JodaTime/src/test/org/joda/time/TestLocalDateTime_Properties.java
@@ -105,63 +105,63 @@ public void testPropertyGetMaxMinValuesYear() {
         assertEquals(292278993, test.year().getMaximumValueOverall());
     }
 
-    public void testPropertyPlusYear() {
+    public void testPropertyAddToCopyYear() {
         LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);
-        LocalDateTime copy = test.year().plus(9);
+        LocalDateTime copy = test.year().addToCopy(9);
         check(test, 1972, 6, 9, 10, 20, 30, 40);
         check(copy, 1981, 6, 9, 10, 20, 30, 40);
         
-        copy = test.year().plus(0);
+        copy = test.year().addToCopy(0);
         check(copy, 1972, 6, 9, 10, 20, 30, 40);
         
-        copy = test.year().plus(292278993 - 1972);
+        copy = test.year().addToCopy(292278993 - 1972);
         check(copy, 292278993, 6, 9, 10, 20, 30, 40);
         
         try {
-            test.year().plus(292278993 - 1972 + 1);
+            test.year().addToCopy(292278993 - 1972 + 1);
             fail();
         } catch (IllegalArgumentException ex) {}
         check(test, 1972, 6, 9, 10, 20, 30, 40);
         
-        copy = test.year().plus(-1972);
+        copy = test.year().addToCopy(-1972);
         check(copy, 0, 6, 9, 10, 20, 30, 40);
         
-        copy = test.year().plus(-1973);
+        copy = test.year().addToCopy(-1973);
         check(copy, -1, 6, 9, 10, 20, 30, 40);
         
         try {
-            test.year().plus(-292275054 - 1972 - 1);
+            test.year().addToCopy(-292275054 - 1972 - 1);
             fail();
         } catch (IllegalArgumentException ex) {}
         check(test, 1972, 6, 9, 10, 20, 30, 40);
     }
 
-    public void testPropertyPlusWrapFieldYear() {
+    public void testPropertyAddWrapFieldToCopyYear() {
         LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);
-        LocalDateTime copy = test.year().plusWrapField(9);
+        LocalDateTime copy = test.year().addWrapFieldToCopy(9);
         check(test, 1972, 6, 9, 10, 20, 30, 40);
         check(copy, 1981, 6, 9, 10, 20, 30, 40);
         
-        copy = test.year().plusWrapField(0);
+        copy = test.year().addWrapFieldToCopy(0);
         check(copy, 1972, 6, 9, 10, 20, 30, 40);
         
-        copy = test.year().plusWrapField(292278993 - 1972 + 1);
+        copy = test.year().addWrapFieldToCopy(292278993 - 1972 + 1);
         check(copy, -292275054, 6, 9, 10, 20, 30, 40);
         
-        copy = test.year().plusWrapField(-292275054 - 1972 - 1);
+        copy = test.year().addWrapFieldToCopy(-292275054 - 1972 - 1);
         check(copy, 292278993, 6, 9, 10, 20, 30, 40);
     }
 
-    public void testPropertyWithYear() {
+    public void testPropertySetCopyYear() {
         LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);
-        LocalDateTime copy = test.year().withValue(12);
+        LocalDateTime copy = test.year().setCopy(12);
         check(test, 1972, 6, 9, 10, 20, 30, 40);
         check(copy, 12, 6, 9, 10, 20, 30, 40);
     }
 
-    public void testPropertyWithTextYear() {
+    public void testPropertySetCopyTextYear() {
         LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);
-        LocalDateTime copy = test.year().withValue("12");
+        LocalDateTime copy = test.year().setCopy("12");
         check(test, 1972, 6, 9, 10, 20, 30, 40);
         check(copy, 12, 6, 9, 10, 20, 30, 40);
     }
@@ -218,94 +218,94 @@ public void testPropertyGetMaxMinValuesMonth() {
         assertEquals(12, test.monthOfYear().getMaximumValueOverall());
     }
 
-    public void testPropertyPlusMonth() {
+    public void testPropertyAddToCopyMonth() {
         LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);
-        LocalDateTime copy = test.monthOfYear().plus(6);
+        LocalDateTime copy = test.monthOfYear().addToCopy(6);
         check(test, 1972, 6, 9, 10, 20, 30, 40);
         check(copy, 1972, 12, 9, 10, 20, 30, 40);
         
-        copy = test.monthOfYear().plus(7);
+        copy = test.monthOfYear().addToCopy(7);
         check(copy, 1973, 1, 9, 10, 20, 30, 40);
         
-        copy = test.monthOfYear().plus(-5);
+        copy = test.monthOfYear().addToCopy(-5);
         check(copy, 1972, 1, 9, 10, 20, 30, 40);
         
-        copy = test.monthOfYear().plus(-6);
+        copy = test.monthOfYear().addToCopy(-6);
         check(copy, 1971, 12, 9, 10, 20, 30, 40);
         
         test = new LocalDateTime(1972, 1, 31, 10, 20, 30, 40);
-        copy = test.monthOfYear().plus(1);
+        copy = test.monthOfYear().addToCopy(1);
         check(copy, 1972, 2, 29, 10, 20, 30, 40);
         
-        copy = test.monthOfYear().plus(2);
+        copy = test.monthOfYear().addToCopy(2);
         check(copy, 1972, 3, 31, 10, 20, 30, 40);
         
-        copy = test.monthOfYear().plus(3);
+        copy = test.monthOfYear().addToCopy(3);
         check(copy, 1972, 4, 30, 10, 20, 30, 40);
         
         test = new LocalDateTime(1971, 1, 31, 10, 20, 30, 40);
-        copy = test.monthOfYear().plus(1);
+        copy = test.monthOfYear().addToCopy(1);
         check(copy, 1971, 2, 28, 10, 20, 30, 40);
     }
 
-    public void testPropertyPlusWrapFieldMonth() {
+    public void testPropertyAddWrapFieldToCopyMonth() {
         LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);
-        LocalDateTime copy = test.monthOfYear().plusWrapField(4);
+        LocalDateTime copy = test.monthOfYear().addWrapFieldToCopy(4);
         check(test, 1972, 6, 9, 10, 20, 30, 40);
         check(copy, 1972, 10, 9, 10, 20, 30, 40);
         
-        copy = test.monthOfYear().plusWrapField(8);
+        copy = test.monthOfYear().addWrapFieldToCopy(8);
         check(copy, 1972, 2, 9, 10, 20, 30, 40);
         
-        copy = test.monthOfYear().plusWrapField(-8);
+        copy = test.monthOfYear().addWrapFieldToCopy(-8);
         check(copy, 1972, 10, 9, 10, 20, 30, 40);
         
         test = new LocalDateTime(1972, 1, 31, 10, 20, 30, 40);
-        copy = test.monthOfYear().plusWrapField(1);
+        copy = test.monthOfYear().addWrapFieldToCopy(1);
         check(copy, 1972, 2, 29, 10, 20, 30, 40);
         
-        copy = test.monthOfYear().plusWrapField(2);
+        copy = test.monthOfYear().addWrapFieldToCopy(2);
         check(copy, 1972, 3, 31, 10, 20, 30, 40);
         
-        copy = test.monthOfYear().plusWrapField(3);
+        copy = test.monthOfYear().addWrapFieldToCopy(3);
         check(copy, 1972, 4, 30, 10, 20, 30, 40);
         
         test = new LocalDateTime(1971, 1, 31, 10, 20, 30, 40);
-        copy = test.monthOfYear().plusWrapField(1);
+        copy = test.monthOfYear().addWrapFieldToCopy(1);
         check(copy, 1971, 2, 28, 10, 20, 30, 40);
     }
 
-    public void testPropertyWithMonth() {
+    public void testPropertySetCopyMonth() {
         LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);
-        LocalDateTime copy = test.monthOfYear().withValue(12);
+        LocalDateTime copy = test.monthOfYear().setCopy(12);
         check(test, 1972, 6, 9, 10, 20, 30, 40);
         check(copy, 1972, 12, 9, 10, 20, 30, 40);
         
         test = new LocalDateTime(1972, 1, 31, 10, 20, 30, 40);
-        copy = test.monthOfYear().withValue(2);
+        copy = test.monthOfYear().setCopy(2);
         check(copy, 1972, 2, 29, 10, 20, 30, 40);
         
         try {
-            test.monthOfYear().withValue(13);
+            test.monthOfYear().setCopy(13);
             fail();
         } catch (IllegalArgumentException ex) {}
         try {
-            test.monthOfYear().withValue(0);
+            test.monthOfYear().setCopy(0);
             fail();
         } catch (IllegalArgumentException ex) {}
     }
 
-    public void testPropertyWithTextMonth() {
+    public void testPropertySetCopyTextMonth() {
         LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);
-        LocalDateTime copy = test.monthOfYear().withValue("12");
+        LocalDateTime copy = test.monthOfYear().setCopy("12");
         check(test, 1972, 6, 9, 10, 20, 30, 40);
         check(copy, 1972, 12, 9, 10, 20, 30, 40);
         
-        copy = test.monthOfYear().withValue("December");
+        copy = test.monthOfYear().setCopy("December");
         check(test, 1972, 6, 9, 10, 20, 30, 40);
         check(copy, 1972, 12, 9, 10, 20, 30, 40);
         
-        copy = test.monthOfYear().withValue("Dec");
+        copy = test.monthOfYear().setCopy("Dec");
         check(test, 1972, 6, 9, 10, 20, 30, 40);
         check(copy, 1972, 12, 9, 10, 20, 30, 40);
     }
@@ -365,88 +365,88 @@ public void testPropertyGetMaxMinValuesDay() {
         assertEquals(28, test.dayOfMonth().getMaximumValue());
     }
 
-    public void testPropertyPlusDay() {
+    public void testPropertyAddToCopyDay() {
         LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);
-        LocalDateTime copy = test.dayOfMonth().plus(9);
+        LocalDateTime copy = test.dayOfMonth().addToCopy(9);
         check(test, 1972, 6, 9, 10, 20, 30, 40);
         check(copy, 1972, 6, 18, 10, 20, 30, 40);
         
-        copy = test.dayOfMonth().plus(21);
+        copy = test.dayOfMonth().addToCopy(21);
         check(copy, 1972, 6, 30, 10, 20, 30, 40);
         
-        copy = test.dayOfMonth().plus(22);
+        copy = test.dayOfMonth().addToCopy(22);
         check(copy, 1972, 7, 1, 10, 20, 30, 40);
         
-        copy = test.dayOfMonth().plus(22 + 30);
+        copy = test.dayOfMonth().addToCopy(22 + 30);
         check(copy, 1972, 7, 31, 10, 20, 30, 40);
         
-        copy = test.dayOfMonth().plus(22 + 31);
+        copy = test.dayOfMonth().addToCopy(22 + 31);
         check(copy, 1972, 8, 1, 10, 20, 30, 40);
 
-        copy = test.dayOfMonth().plus(21 + 31 + 31 + 30 + 31 + 30 + 31);
+        copy = test.dayOfMonth().addToCopy(21 + 31 + 31 + 30 + 31 + 30 + 31);
         check(copy, 1972, 12, 31, 10, 20, 30, 40);
         
-        copy = test.dayOfMonth().plus(22 + 31 + 31 + 30 + 31 + 30 + 31);
+        copy = test.dayOfMonth().addToCopy(22 + 31 + 31 + 30 + 31 + 30 + 31);
         check(copy, 1973, 1, 1, 10, 20, 30, 40);
         
-        copy = test.dayOfMonth().plus(-8);
+        copy = test.dayOfMonth().addToCopy(-8);
         check(copy, 1972, 6, 1, 10, 20, 30, 40);
         
-        copy = test.dayOfMonth().plus(-9);
+        copy = test.dayOfMonth().addToCopy(-9);
         check(copy, 1972, 5, 31, 10, 20, 30, 40);
         
-        copy = test.dayOfMonth().plus(-8 - 31 - 30 - 31 - 29 - 31);
+        copy = test.dayOfMonth().addToCopy(-8 - 31 - 30 - 31 - 29 - 31);
         check(copy, 1972, 1, 1, 10, 20, 30, 40);
         
-        copy = test.dayOfMonth().plus(-9 - 31 - 30 - 31 - 29 - 31);
+        copy = test.dayOfMonth().addToCopy(-9 - 31 - 30 - 31 - 29 - 31);
         check(copy, 1971, 12, 31, 10, 20, 30, 40);
     }
 
-    public void testPropertyPlusWrapFieldDay() {
+    public void testPropertyAddWrapFieldToCopyDay() {
         LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);
-        LocalDateTime copy = test.dayOfMonth().plusWrapField(21);
+        LocalDateTime copy = test.dayOfMonth().addWrapFieldToCopy(21);
         check(test, 1972, 6, 9, 10, 20, 30, 40);
         check(copy, 1972, 6, 30, 10, 20, 30, 40);
         
-        copy = test.dayOfMonth().plusWrapField(22);
+        copy = test.dayOfMonth().addWrapFieldToCopy(22);
         check(copy, 1972, 6, 1, 10, 20, 30, 40);
         
-        copy = test.dayOfMonth().plusWrapField(-12);
+        copy = test.dayOfMonth().addWrapFieldToCopy(-12);
         check(copy, 1972, 6, 27, 10, 20, 30, 40);
         
         test = new LocalDateTime(1972, 7, 9, 10, 20, 30, 40);
-        copy = test.dayOfMonth().plusWrapField(21);
+        copy = test.dayOfMonth().addWrapFieldToCopy(21);
         check(copy, 1972, 7, 30, 10, 20, 30, 40);
     
-        copy = test.dayOfMonth().plusWrapField(22);
+        copy = test.dayOfMonth().addWrapFieldToCopy(22);
         check(copy, 1972, 7, 31, 10, 20, 30, 40);
     
-        copy = test.dayOfMonth().plusWrapField(23);
+        copy = test.dayOfMonth().addWrapFieldToCopy(23);
         check(copy, 1972, 7, 1, 10, 20, 30, 40);
     
-        copy = test.dayOfMonth().plusWrapField(-12);
+        copy = test.dayOfMonth().addWrapFieldToCopy(-12);
         check(copy, 1972, 7, 28, 10, 20, 30, 40);
     }
 
-    public void testPropertyWithDay() {
+    public void testPropertySetCopyDay() {
         LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);
-        LocalDateTime copy = test.dayOfMonth().withValue(12);
+        LocalDateTime copy = test.dayOfMonth().setCopy(12);
         check(test, 1972, 6, 9, 10, 20, 30, 40);
         check(copy, 1972, 6, 12, 10, 20, 30, 40);
         
         try {
-            test.dayOfMonth().withValue(31);
+            test.dayOfMonth().setCopy(31);
             fail();
         } catch (IllegalArgumentException ex) {}
         try {
-            test.dayOfMonth().withValue(0);
+            test.dayOfMonth().setCopy(0);
             fail();
         } catch (IllegalArgumentException ex) {}
     }
 
-    public void testPropertyWithTextDay() {
+    public void testPropertySetCopyTextDay() {
         LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);
-        LocalDateTime copy = test.dayOfMonth().withValue("12");
+        LocalDateTime copy = test.dayOfMonth().setCopy("12");
         check(test, 1972, 6, 9, 10, 20, 30, 40);
         check(copy, 1972, 6, 12, 10, 20, 30, 40);
     }
@@ -542,32 +542,32 @@ public void testPropertyGetHour() {
 
     public void testPropertyRoundHour() {
         LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20);
-        check(test.hourOfDay().roundCeiling(), 2005, 6, 9, 11, 0, 0, 0);
-        check(test.hourOfDay().roundFloor(), 2005, 6, 9, 10, 0, 0, 0);
-        check(test.hourOfDay().roundHalfCeiling(), 2005, 6, 9, 10, 0, 0, 0);
-        check(test.hourOfDay().roundHalfFloor(), 2005, 6, 9, 10, 0, 0, 0);
-        check(test.hourOfDay().roundHalfEven(), 2005, 6, 9, 10, 0, 0, 0);
+        check(test.hourOfDay().roundCeilingCopy(), 2005, 6, 9, 11, 0, 0, 0);
+        check(test.hourOfDay().roundFloorCopy(), 2005, 6, 9, 10, 0, 0, 0);
+        check(test.hourOfDay().roundHalfCeilingCopy(), 2005, 6, 9, 10, 0, 0, 0);
+        check(test.hourOfDay().roundHalfFloorCopy(), 2005, 6, 9, 10, 0, 0, 0);
+        check(test.hourOfDay().roundHalfEvenCopy(), 2005, 6, 9, 10, 0, 0, 0);
         
         test = new LocalDateTime(2005, 6, 9, 10, 40);
-        check(test.hourOfDay().roundCeiling(), 2005, 6, 9, 11, 0, 0, 0);
-        check(test.hourOfDay().roundFloor(), 2005, 6, 9, 10, 0, 0, 0);
-        check(test.hourOfDay().roundHalfCeiling(), 2005, 6, 9, 11, 0, 0, 0);
-        check(test.hourOfDay().roundHalfFloor(), 2005, 6, 9, 11, 0, 0, 0);
-        check(test.hourOfDay().roundHalfEven(), 2005, 6, 9, 11, 0, 0, 0);
+        check(test.hourOfDay().roundCeilingCopy(), 2005, 6, 9, 11, 0, 0, 0);
+        check(test.hourOfDay().roundFloorCopy(), 2005, 6, 9, 10, 0, 0, 0);
+        check(test.hourOfDay().roundHalfCeilingCopy(), 2005, 6, 9, 11, 0, 0, 0);
+        check(test.hourOfDay().roundHalfFloorCopy(), 2005, 6, 9, 11, 0, 0, 0);
+        check(test.hourOfDay().roundHalfEvenCopy(), 2005, 6, 9, 11, 0, 0, 0);
         
         test = new LocalDateTime(2005, 6, 9, 10, 30);
-        check(test.hourOfDay().roundCeiling(), 2005, 6, 9, 11, 0, 0, 0);
-        check(test.hourOfDay().roundFloor(), 2005, 6, 9, 10, 0, 0, 0);
-        check(test.hourOfDay().roundHalfCeiling(), 2005, 6, 9, 11, 0, 0, 0);
-        check(test.hourOfDay().roundHalfFloor(), 2005, 6, 9, 10, 0, 0, 0);
-        check(test.hourOfDay().roundHalfEven(), 2005, 6, 9, 10, 0, 0, 0);
+        check(test.hourOfDay().roundCeilingCopy(), 2005, 6, 9, 11, 0, 0, 0);
+        check(test.hourOfDay().roundFloorCopy(), 2005, 6, 9, 10, 0, 0, 0);
+        check(test.hourOfDay().roundHalfCeilingCopy(), 2005, 6, 9, 11, 0, 0, 0);
+        check(test.hourOfDay().roundHalfFloorCopy(), 2005, 6, 9, 10, 0, 0, 0);
+        check(test.hourOfDay().roundHalfEvenCopy(), 2005, 6, 9, 10, 0, 0, 0);
         
         test = new LocalDateTime(2005, 6, 9, 11, 30);
-        check(test.hourOfDay().roundCeiling(), 2005, 6, 9, 12, 0, 0, 0);
-        check(test.hourOfDay().roundFloor(), 2005, 6, 9, 11, 0, 0, 0);
-        check(test.hourOfDay().roundHalfCeiling(), 2005, 6, 9, 12, 0, 0, 0);
-        check(test.hourOfDay().roundHalfFloor(), 2005, 6, 9, 11, 0, 0, 0);
-        check(test.hourOfDay().roundHalfEven(), 2005, 6, 9, 12, 0, 0, 0);
+        check(test.hourOfDay().roundCeilingCopy(), 2005, 6, 9, 12, 0, 0, 0);
+        check(test.hourOfDay().roundFloorCopy(), 2005, 6, 9, 11, 0, 0, 0);
+        check(test.hourOfDay().roundHalfCeilingCopy(), 2005, 6, 9, 12, 0, 0, 0);
+        check(test.hourOfDay().roundHalfFloorCopy(), 2005, 6, 9, 11, 0, 0, 0);
+        check(test.hourOfDay().roundHalfEvenCopy(), 2005, 6, 9, 12, 0, 0, 0);
     }
 
     public void testPropertyGetMaxMinValuesHour() {
@@ -584,63 +584,63 @@ public void testPropertyWithMaxMinValueHour() {
         check(test.hourOfDay().withMinimumValue(), 2005, 6, 9, 0, 20, 30, 40);
     }
 
-    public void testPropertyPlusHour() {
+    public void testPropertyAddToCopyHour() {
         LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);
-        LocalDateTime copy = test.hourOfDay().plus(9);
+        LocalDateTime copy = test.hourOfDay().addToCopy(9);
         check(test, 2005, 6, 9, 10, 20, 30, 40);
         check(copy, 2005, 6, 9, 19, 20, 30, 40);
         
-        copy = test.hourOfDay().plus(0);
+        copy = test.hourOfDay().addToCopy(0);
         check(copy, 2005, 6, 9, 10, 20, 30, 40);
         
-        copy = test.hourOfDay().plus(13);
+        copy = test.hourOfDay().addToCopy(13);
         check(copy, 2005, 6, 9, 23, 20, 30, 40);
         
-        copy = test.hourOfDay().plus(14);
+        copy = test.hourOfDay().addToCopy(14);
         check(copy, 2005, 6, 10, 0, 20, 30, 40);
         
-        copy = test.hourOfDay().plus(-10);
+        copy = test.hourOfDay().addToCopy(-10);
         check(copy, 2005, 6, 9, 0, 20, 30, 40);
         
-        copy = test.hourOfDay().plus(-11);
+        copy = test.hourOfDay().addToCopy(-11);
         check(copy, 2005, 6, 8, 23, 20, 30, 40);
     }
 
-    public void testPropertyPlusWrapFieldHour() {
+    public void testPropertyAddWrapFieldToCopyHour() {
         LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);
-        LocalDateTime copy = test.hourOfDay().plusWrapField(9);
+        LocalDateTime copy = test.hourOfDay().addWrapFieldToCopy(9);
         check(test, 2005, 6, 9, 10, 20, 30, 40);
         check(copy, 2005, 6, 9, 19, 20, 30, 40);
         
-        copy = test.hourOfDay().plusWrapField(0);
+        copy = test.hourOfDay().addWrapFieldToCopy(0);
         check(copy, 2005, 6, 9, 10, 20, 30, 40);
         
-        copy = test.hourOfDay().plusWrapField(18);
+        copy = test.hourOfDay().addWrapFieldToCopy(18);
         check(copy, 2005, 6, 9, 4, 20, 30, 40);
         
-        copy = test.hourOfDay().plusWrapField(-15);
+        copy = test.hourOfDay().addWrapFieldToCopy(-15);
         check(copy, 2005, 6, 9, 19, 20, 30, 40);
     }
 
     public void testPropertySetHour() {
         LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);
-        LocalDateTime copy = test.hourOfDay().withValue(12);
+        LocalDateTime copy = test.hourOfDay().setCopy(12);
         check(test, 2005, 6, 9, 10, 20, 30, 40);
         check(copy, 2005, 6, 9, 12, 20, 30, 40);
         
         try {
-            test.hourOfDay().withValue(24);
+            test.hourOfDay().setCopy(24);
             fail();
         } catch (IllegalArgumentException ex) {}
         try {
-            test.hourOfDay().withValue(-1);
+            test.hourOfDay().setCopy(-1);
             fail();
         } catch (IllegalArgumentException ex) {}
     }
 
     public void testPropertySetTextHour() {
         LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);
-        LocalDateTime copy = test.hourOfDay().withValue("12");
+        LocalDateTime copy = test.hourOfDay().setCopy("12");
         check(test, 2005, 6, 9, 10, 20, 30, 40);
         check(copy, 2005, 6, 9, 12, 20, 30, 40);
     }
@@ -714,78 +714,78 @@ public void testPropertyWithMaxMinValueMinute() {
         check(test.minuteOfHour().withMinimumValue(), 2005, 6, 9, 10, 0, 30, 40);
     }
 
-    public void testPropertyPlusMinute() {
+    public void testPropertyAddToCopyMinute() {
         LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);
-        LocalDateTime copy = test.minuteOfHour().plus(9);
+        LocalDateTime copy = test.minuteOfHour().addToCopy(9);
         check(test, 2005, 6, 9, 10, 20, 30, 40);
         check(copy, 2005, 6, 9, 10, 29, 30, 40);
         
-        copy = test.minuteOfHour().plus(39);
+        copy = test.minuteOfHour().addToCopy(39);
         check(copy, 2005, 6, 9, 10, 59, 30, 40);
         
-        copy = test.minuteOfHour().plus(40);
+        copy = test.minuteOfHour().addToCopy(40);
         check(copy, 2005, 6, 9, 11, 0, 30, 40);
         
-        copy = test.minuteOfHour().plus(1 * 60 + 45);
+        copy = test.minuteOfHour().addToCopy(1 * 60 + 45);
         check(copy, 2005, 6, 9, 12, 5, 30, 40);
         
-        copy = test.minuteOfHour().plus(13 * 60 + 39);
+        copy = test.minuteOfHour().addToCopy(13 * 60 + 39);
         check(copy, 2005, 6, 9, 23, 59, 30, 40);
         
-        copy = test.minuteOfHour().plus(13 * 60 + 40);
+        copy = test.minuteOfHour().addToCopy(13 * 60 + 40);
         check(copy, 2005, 6, 10, 0, 0, 30, 40);
         
-        copy = test.minuteOfHour().plus(-9);
+        copy = test.minuteOfHour().addToCopy(-9);
         check(copy, 2005, 6, 9, 10, 11, 30, 40);
         
-        copy = test.minuteOfHour().plus(-19);
+        copy = test.minuteOfHour().addToCopy(-19);
         check(copy, 2005, 6, 9, 10, 1, 30, 40);
         
-        copy = test.minuteOfHour().plus(-20);
+        copy = test.minuteOfHour().addToCopy(-20);
         check(copy, 2005, 6, 9, 10, 0, 30, 40);
         
-        copy = test.minuteOfHour().plus(-21);
+        copy = test.minuteOfHour().addToCopy(-21);
         check(copy, 2005, 6, 9, 9, 59, 30, 40);
         
-        copy = test.minuteOfHour().plus(-(10 * 60 + 20));
+        copy = test.minuteOfHour().addToCopy(-(10 * 60 + 20));
         check(copy, 2005, 6, 9, 0, 0, 30, 40);
         
-        copy = test.minuteOfHour().plus(-(10 * 60 + 21));
+        copy = test.minuteOfHour().addToCopy(-(10 * 60 + 21));
         check(copy, 2005, 6, 8, 23, 59, 30, 40);
     }
 
-    public void testPropertyPlusWrapFieldMinute() {
+    public void testPropertyAddWrapFieldToCopyMinute() {
         LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);
-        LocalDateTime copy = test.minuteOfHour().plusWrapField(9);
+        LocalDateTime copy = test.minuteOfHour().addWrapFieldToCopy(9);
         check(test, 2005, 6, 9, 10, 20, 30, 40);
         check(copy, 2005, 6, 9, 10, 29, 30, 40);
         
-        copy = test.minuteOfHour().plusWrapField(49);
+        copy = test.minuteOfHour().addWrapFieldToCopy(49);
         check(copy, 2005, 6, 9, 10, 9, 30, 40);
         
-        copy = test.minuteOfHour().plusWrapField(-47);
+        copy = test.minuteOfHour().addWrapFieldToCopy(-47);
         check(copy, 2005, 6, 9, 10, 33, 30, 40);
     }
 
     public void testPropertySetMinute() {
         LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);
-        LocalDateTime copy = test.minuteOfHour().withValue(12);
+        LocalDateTime copy = test.minuteOfHour().setCopy(12);
         check(test, 2005, 6, 9, 10, 20, 30, 40);
         check(copy, 2005, 6, 9, 10, 12, 30, 40);
         
         try {
-            test.minuteOfHour().withValue(60);
+            test.minuteOfHour().setCopy(60);
             fail();
         } catch (IllegalArgumentException ex) {}
         try {
-            test.minuteOfHour().withValue(-1);
+            test.minuteOfHour().setCopy(-1);
             fail();
         } catch (IllegalArgumentException ex) {}
     }
 
     public void testPropertySetTextMinute() {
         LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);
-        LocalDateTime copy = test.minuteOfHour().withValue("12");
+        LocalDateTime copy = test.minuteOfHour().setCopy("12");
         check(test, 2005, 6, 9, 10, 20, 30, 40);
         check(copy, 2005, 6, 9, 10, 12, 30, 40);
     }
@@ -845,75 +845,75 @@ public void testPropertyWithMaxMinValueSecond() {
         check(test.secondOfMinute().withMinimumValue(), 2005, 6, 9, 10, 20, 0, 40);
     }
 
-    public void testPropertyPlusSecond() {
+    public void testPropertyAddToCopySecond() {
         LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);
-        LocalDateTime copy = test.secondOfMinute().plus(9);
+        LocalDateTime copy = test.secondOfMinute().addToCopy(9);
         check(test, 2005, 6, 9, 10, 20, 30, 40);
         check(copy, 2005, 6, 9, 10, 20, 39, 40);
         
-        copy = test.secondOfMinute().plus(29);
+        copy = test.secondOfMinute().addToCopy(29);
         check(copy, 2005, 6, 9, 10, 20, 59, 40);
         
-        copy = test.secondOfMinute().plus(30);
+        copy = test.secondOfMinute().addToCopy(30);
         check(copy, 2005, 6, 9, 10, 21, 0, 40);
         
-        copy = test.secondOfMinute().plus(39 * 60 + 29);
+        copy = test.secondOfMinute().addToCopy(39 * 60 + 29);
         check(copy, 2005, 6, 9, 10, 59, 59, 40);
         
-        copy = test.secondOfMinute().plus(39 * 60 + 30);
+        copy = test.secondOfMinute().addToCopy(39 * 60 + 30);
         check(copy, 2005, 6, 9, 11, 0, 0, 40);
         
-        copy = test.secondOfMinute().plus(13 * 60 * 60 + 39 * 60 + 30);
+        copy = test.secondOfMinute().addToCopy(13 * 60 * 60 + 39 * 60 + 30);
         check(copy, 2005, 6, 10, 0, 0, 0, 40);
         
-        copy = test.secondOfMinute().plus(-9);
+        copy = test.secondOfMinute().addToCopy(-9);
         check(copy, 2005, 6, 9, 10, 20, 21, 40);
         
-        copy = test.secondOfMinute().plus(-30);
+        copy = test.secondOfMinute().addToCopy(-30);
         check(copy, 2005, 6, 9, 10, 20, 0, 40);
         
-        copy = test.secondOfMinute().plus(-31);
+        copy = test.secondOfMinute().addToCopy(-31);
         check(copy, 2005, 6, 9, 10, 19, 59, 40);
         
-        copy = test.secondOfMinute().plus(-(10 * 60 * 60 + 20 * 60 + 30));
+        copy = test.secondOfMinute().addToCopy(-(10 * 60 * 60 + 20 * 60 + 30));
         check(copy, 2005, 6, 9, 0, 0, 0, 40);
         
-        copy = test.secondOfMinute().plus(-(10 * 60 * 60 + 20 * 60 + 31));
+        copy = test.secondOfMinute().addToCopy(-(10 * 60 * 60 + 20 * 60 + 31));
         check(copy, 2005, 6, 8, 23, 59, 59, 40);
     }
 
-    public void testPropertyPlusWrapFieldSecond() {
+    public void testPropertyAddWrapFieldToCopySecond() {
         LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);
-        LocalDateTime copy = test.secondOfMinute().plusWrapField(9);
+        LocalDateTime copy = test.secondOfMinute().addWrapFieldToCopy(9);
         check(test, 2005, 6, 9, 10, 20, 30, 40);
         check(copy, 2005, 6, 9, 10, 20, 39, 40);
         
-        copy = test.secondOfMinute().plusWrapField(49);
+        copy = test.secondOfMinute().addWrapFieldToCopy(49);
         check(copy, 2005, 6, 9, 10, 20, 19, 40);
         
-        copy = test.secondOfMinute().plusWrapField(-47);
+        copy = test.secondOfMinute().addWrapFieldToCopy(-47);
         check(copy, 2005, 6, 9, 10, 20, 43, 40);
     }
 
     public void testPropertySetSecond() {
         LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);
-        LocalDateTime copy = test.secondOfMinute().withValue(12);
+        LocalDateTime copy = test.secondOfMinute().setCopy(12);
         check(test, 2005, 6, 9, 10, 20, 30, 40);
         check(copy, 2005, 6, 9, 10, 20, 12, 40);
         
         try {
-            test.secondOfMinute().withValue(60);
+            test.secondOfMinute().setCopy(60);
             fail();
         } catch (IllegalArgumentException ex) {}
         try {
-            test.secondOfMinute().withValue(-1);
+            test.secondOfMinute().setCopy(-1);
             fail();
         } catch (IllegalArgumentException ex) {}
     }
 
     public void testPropertySetTextSecond() {
         LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);
-        LocalDateTime copy = test.secondOfMinute().withValue("12");
+        LocalDateTime copy = test.secondOfMinute().setCopy("12");
         check(test, 2005, 6, 9, 10, 20, 30, 40);
         check(copy, 2005, 6, 9, 10, 20, 12, 40);
     }
@@ -973,72 +973,72 @@ public void testPropertyWithMaxMinValueMilli() {
         check(test.millisOfSecond().withMinimumValue(), 2005, 6, 9, 10, 20, 30, 0);
     }
 
-    public void testPropertyPlusMilli() {
+    public void testPropertyAddToCopyMilli() {
         LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);
-        LocalDateTime copy = test.millisOfSecond().plus(9);
+        LocalDateTime copy = test.millisOfSecond().addToCopy(9);
         check(test, 2005, 6, 9, 10, 20, 30, 40);
         check(copy, 2005, 6, 9, 10, 20, 30, 49);
         
-        copy = test.millisOfSecond().plus(959);
+        copy = test.millisOfSecond().addToCopy(959);
         check(copy, 2005, 6, 9, 10, 20, 30, 999);
         
-        copy = test.millisOfSecond().plus(960);
+        copy = test.millisOfSecond().addToCopy(960);
         check(copy, 2005, 6, 9, 10, 20, 31, 0);
         
-        copy = test.millisOfSecond().plus(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 959);
+        copy = test.millisOfSecond().addToCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 959);
         check(copy, 2005, 6, 9, 23, 59, 59, 999);
         
-        copy = test.millisOfSecond().plus(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 960);
+        copy = test.millisOfSecond().addToCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 960);
         check(copy, 2005, 6, 10, 0, 0, 0, 0);
         
-        copy = test.millisOfSecond().plus(-9);
+        copy = test.millisOfSecond().addToCopy(-9);
         check(copy, 2005, 6, 9, 10, 20, 30, 31);
         
-        copy = test.millisOfSecond().plus(-40);
+        copy = test.millisOfSecond().addToCopy(-40);
         check(copy, 2005, 6, 9, 10, 20, 30, 0);
         
-        copy = test.millisOfSecond().plus(-41);
+        copy = test.millisOfSecond().addToCopy(-41);
         check(copy, 2005, 6, 9, 10, 20, 29, 999);
         
-        copy = test.millisOfSecond().plus(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 40));
+        copy = test.millisOfSecond().addToCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 40));
         check(copy, 2005, 6, 9, 0, 0, 0, 0);
         
-        copy = test.millisOfSecond().plus(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 41));
+        copy = test.millisOfSecond().addToCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 41));
         check(copy, 2005, 6, 8, 23, 59, 59, 999);
     }
 
-    public void testPropertyPlusWrapFieldMilli() {
+    public void testPropertyAddWrapFieldToCopyMilli() {
         LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);
-        LocalDateTime copy = test.millisOfSecond().plusWrapField(9);
+        LocalDateTime copy = test.millisOfSecond().addWrapFieldToCopy(9);
         check(test, 2005, 6, 9, 10, 20, 30, 40);
         check(copy, 2005, 6, 9, 10, 20, 30, 49);
         
-        copy = test.millisOfSecond().plusWrapField(995);
+        copy = test.millisOfSecond().addWrapFieldToCopy(995);
         check(copy, 2005, 6, 9, 10, 20, 30, 35);
         
-        copy = test.millisOfSecond().plusWrapField(-47);
+        copy = test.millisOfSecond().addWrapFieldToCopy(-47);
         check(copy, 2005, 6, 9, 10, 20, 30, 993);
     }
 
     public void testPropertySetMilli() {
         LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);
-        LocalDateTime copy = test.millisOfSecond().withValue(12);
+        LocalDateTime copy = test.millisOfSecond().setCopy(12);
         check(test, 2005, 6, 9, 10, 20, 30, 40);
         check(copy, 2005, 6, 9, 10, 20, 30, 12);
         
         try {
-            test.millisOfSecond().withValue(1000);
+            test.millisOfSecond().setCopy(1000);
             fail();
         } catch (IllegalArgumentException ex) {}
         try {
-            test.millisOfSecond().withValue(-1);
+            test.millisOfSecond().setCopy(-1);
             fail();
         } catch (IllegalArgumentException ex) {}
     }
 
     public void testPropertySetTextMilli() {
         LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);
-        LocalDateTime copy = test.millisOfSecond().withValue("12");
+        LocalDateTime copy = test.millisOfSecond().setCopy("12");
         check(test, 2005, 6, 9, 10, 20, 30, 40);
         check(copy, 2005, 6, 9, 10, 20, 30, 12);
     }
diff --git a/JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java b/JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java
index 2a5ae31cb..69867388c 100644
--- a/JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java
+++ b/JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java
@@ -95,63 +95,63 @@ public void testPropertyGetMaxMinValuesYear() {
         assertEquals(292278993, test.year().getMaximumValueOverall());
     }
 
-    public void testPropertyPlusYear() {
+    public void testPropertyAddToCopyYear() {
         LocalDate test = new LocalDate(1972, 6, 9);
-        LocalDate copy = test.year().plus(9);
+        LocalDate copy = test.year().addToCopy(9);
         check(test, 1972, 6, 9);
         check(copy, 1981, 6, 9);
         
-        copy = test.year().plus(0);
+        copy = test.year().addToCopy(0);
         check(copy, 1972, 6, 9);
         
-        copy = test.year().plus(292278993 - 1972);
+        copy = test.year().addToCopy(292278993 - 1972);
         check(copy, 292278993, 6, 9);
         
         try {
-            test.year().plus(292278993 - 1972 + 1);
+            test.year().addToCopy(292278993 - 1972 + 1);
             fail();
         } catch (IllegalArgumentException ex) {}
         check(test, 1972, 6, 9);
         
-        copy = test.year().plus(-1972);
+        copy = test.year().addToCopy(-1972);
         check(copy, 0, 6, 9);
         
-        copy = test.year().plus(-1973);
+        copy = test.year().addToCopy(-1973);
         check(copy, -1, 6, 9);
         
         try {
-            test.year().plus(-292275054 - 1972 - 1);
+            test.year().addToCopy(-292275054 - 1972 - 1);
             fail();
         } catch (IllegalArgumentException ex) {}
         check(test, 1972, 6, 9);
     }
 
-    public void testPropertyPlusWrapFieldYear() {
+    public void testPropertyAddWrapFieldToCopyYear() {
         LocalDate test = new LocalDate(1972, 6, 9);
-        LocalDate copy = test.year().plusWrapField(9);
+        LocalDate copy = test.year().addWrapFieldToCopy(9);
         check(test, 1972, 6, 9);
         check(copy, 1981, 6, 9);
         
-        copy = test.year().plusWrapField(0);
+        copy = test.year().addWrapFieldToCopy(0);
         check(copy, 1972, 6, 9);
         
-        copy = test.year().plusWrapField(292278993 - 1972 + 1);
+        copy = test.year().addWrapFieldToCopy(292278993 - 1972 + 1);
         check(copy, -292275054, 6, 9);
         
-        copy = test.year().plusWrapField(-292275054 - 1972 - 1);
+        copy = test.year().addWrapFieldToCopy(-292275054 - 1972 - 1);
         check(copy, 292278993, 6, 9);
     }
 
-    public void testPropertyWithYear() {
+    public void testPropertySetCopyYear() {
         LocalDate test = new LocalDate(1972, 6, 9);
-        LocalDate copy = test.year().withValue(12);
+        LocalDate copy = test.year().setCopy(12);
         check(test, 1972, 6, 9);
         check(copy, 12, 6, 9);
     }
 
-    public void testPropertyWithTextYear() {
+    public void testPropertySetCopyTextYear() {
         LocalDate test = new LocalDate(1972, 6, 9);
-        LocalDate copy = test.year().withValue("12");
+        LocalDate copy = test.year().setCopy("12");
         check(test, 1972, 6, 9);
         check(copy, 12, 6, 9);
     }
@@ -208,94 +208,94 @@ public void testPropertyGetMaxMinValuesMonth() {
         assertEquals(12, test.monthOfYear().getMaximumValueOverall());
     }
 
-    public void testPropertyPlusMonth() {
+    public void testPropertyAddToCopyMonth() {
         LocalDate test = new LocalDate(1972, 6, 9);
-        LocalDate copy = test.monthOfYear().plus(6);
+        LocalDate copy = test.monthOfYear().addToCopy(6);
         check(test, 1972, 6, 9);
         check(copy, 1972, 12, 9);
         
-        copy = test.monthOfYear().plus(7);
+        copy = test.monthOfYear().addToCopy(7);
         check(copy, 1973, 1, 9);
         
-        copy = test.monthOfYear().plus(-5);
+        copy = test.monthOfYear().addToCopy(-5);
         check(copy, 1972, 1, 9);
         
-        copy = test.monthOfYear().plus(-6);
+        copy = test.monthOfYear().addToCopy(-6);
         check(copy, 1971, 12, 9);
         
         test = new LocalDate(1972, 1, 31);
-        copy = test.monthOfYear().plus(1);
+        copy = test.monthOfYear().addToCopy(1);
         check(copy, 1972, 2, 29);
         
-        copy = test.monthOfYear().plus(2);
+        copy = test.monthOfYear().addToCopy(2);
         check(copy, 1972, 3, 31);
         
-        copy = test.monthOfYear().plus(3);
+        copy = test.monthOfYear().addToCopy(3);
         check(copy, 1972, 4, 30);
         
         test = new LocalDate(1971, 1, 31);
-        copy = test.monthOfYear().plus(1);
+        copy = test.monthOfYear().addToCopy(1);
         check(copy, 1971, 2, 28);
     }
 
-    public void testPropertyPlusWrapFieldMonth() {
+    public void testPropertyAddWrapFieldToCopyMonth() {
         LocalDate test = new LocalDate(1972, 6, 9);
-        LocalDate copy = test.monthOfYear().plusWrapField(4);
+        LocalDate copy = test.monthOfYear().addWrapFieldToCopy(4);
         check(test, 1972, 6, 9);
         check(copy, 1972, 10, 9);
         
-        copy = test.monthOfYear().plusWrapField(8);
+        copy = test.monthOfYear().addWrapFieldToCopy(8);
         check(copy, 1972, 2, 9);
         
-        copy = test.monthOfYear().plusWrapField(-8);
+        copy = test.monthOfYear().addWrapFieldToCopy(-8);
         check(copy, 1972, 10, 9);
         
         test = new LocalDate(1972, 1, 31);
-        copy = test.monthOfYear().plusWrapField(1);
+        copy = test.monthOfYear().addWrapFieldToCopy(1);
         check(copy, 1972, 2, 29);
         
-        copy = test.monthOfYear().plusWrapField(2);
+        copy = test.monthOfYear().addWrapFieldToCopy(2);
         check(copy, 1972, 3, 31);
         
-        copy = test.monthOfYear().plusWrapField(3);
+        copy = test.monthOfYear().addWrapFieldToCopy(3);
         check(copy, 1972, 4, 30);
         
         test = new LocalDate(1971, 1, 31);
-        copy = test.monthOfYear().plusWrapField(1);
+        copy = test.monthOfYear().addWrapFieldToCopy(1);
         check(copy, 1971, 2, 28);
     }
 
-    public void testPropertyWithMonth() {
+    public void testPropertySetCopyMonth() {
         LocalDate test = new LocalDate(1972, 6, 9);
-        LocalDate copy = test.monthOfYear().withValue(12);
+        LocalDate copy = test.monthOfYear().setCopy(12);
         check(test, 1972, 6, 9);
         check(copy, 1972, 12, 9);
         
         test = new LocalDate(1972, 1, 31);
-        copy = test.monthOfYear().withValue(2);
+        copy = test.monthOfYear().setCopy(2);
         check(copy, 1972, 2, 29);
         
         try {
-            test.monthOfYear().withValue(13);
+            test.monthOfYear().setCopy(13);
             fail();
         } catch (IllegalArgumentException ex) {}
         try {
-            test.monthOfYear().withValue(0);
+            test.monthOfYear().setCopy(0);
             fail();
         } catch (IllegalArgumentException ex) {}
     }
 
-    public void testPropertyWithTextMonth() {
+    public void testPropertySetCopyTextMonth() {
         LocalDate test = new LocalDate(1972, 6, 9);
-        LocalDate copy = test.monthOfYear().withValue("12");
+        LocalDate copy = test.monthOfYear().setCopy("12");
         check(test, 1972, 6, 9);
         check(copy, 1972, 12, 9);
         
-        copy = test.monthOfYear().withValue("December");
+        copy = test.monthOfYear().setCopy("December");
         check(test, 1972, 6, 9);
         check(copy, 1972, 12, 9);
         
-        copy = test.monthOfYear().withValue("Dec");
+        copy = test.monthOfYear().setCopy("Dec");
         check(test, 1972, 6, 9);
         check(copy, 1972, 12, 9);
     }
@@ -355,88 +355,88 @@ public void testPropertyGetMaxMinValuesDay() {
         assertEquals(28, test.dayOfMonth().getMaximumValue());
     }
 
-    public void testPropertyPlusDay() {
+    public void testPropertyAddToCopyDay() {
         LocalDate test = new LocalDate(1972, 6, 9);
-        LocalDate copy = test.dayOfMonth().plus(9);
+        LocalDate copy = test.dayOfMonth().addToCopy(9);
         check(test, 1972, 6, 9);
         check(copy, 1972, 6, 18);
         
-        copy = test.dayOfMonth().plus(21);
+        copy = test.dayOfMonth().addToCopy(21);
         check(copy, 1972, 6, 30);
         
-        copy = test.dayOfMonth().plus(22);
+        copy = test.dayOfMonth().addToCopy(22);
         check(copy, 1972, 7, 1);
         
-        copy = test.dayOfMonth().plus(22 + 30);
+        copy = test.dayOfMonth().addToCopy(22 + 30);
         check(copy, 1972, 7, 31);
         
-        copy = test.dayOfMonth().plus(22 + 31);
+        copy = test.dayOfMonth().addToCopy(22 + 31);
         check(copy, 1972, 8, 1);
 
-        copy = test.dayOfMonth().plus(21 + 31 + 31 + 30 + 31 + 30 + 31);
+        copy = test.dayOfMonth().addToCopy(21 + 31 + 31 + 30 + 31 + 30 + 31);
         check(copy, 1972, 12, 31);
         
-        copy = test.dayOfMonth().plus(22 + 31 + 31 + 30 + 31 + 30 + 31);
+        copy = test.dayOfMonth().addToCopy(22 + 31 + 31 + 30 + 31 + 30 + 31);
         check(copy, 1973, 1, 1);
         
-        copy = test.dayOfMonth().plus(-8);
+        copy = test.dayOfMonth().addToCopy(-8);
         check(copy, 1972, 6, 1);
         
-        copy = test.dayOfMonth().plus(-9);
+        copy = test.dayOfMonth().addToCopy(-9);
         check(copy, 1972, 5, 31);
         
-        copy = test.dayOfMonth().plus(-8 - 31 - 30 - 31 - 29 - 31);
+        copy = test.dayOfMonth().addToCopy(-8 - 31 - 30 - 31 - 29 - 31);
         check(copy, 1972, 1, 1);
         
-        copy = test.dayOfMonth().plus(-9 - 31 - 30 - 31 - 29 - 31);
+        copy = test.dayOfMonth().addToCopy(-9 - 31 - 30 - 31 - 29 - 31);
         check(copy, 1971, 12, 31);
     }
 
-    public void testPropertyPlusWrapFieldDay() {
+    public void testPropertyAddWrapFieldToCopyDay() {
         LocalDate test = new LocalDate(1972, 6, 9);
-        LocalDate copy = test.dayOfMonth().plusWrapField(21);
+        LocalDate copy = test.dayOfMonth().addWrapFieldToCopy(21);
         check(test, 1972, 6, 9);
         check(copy, 1972, 6, 30);
         
-        copy = test.dayOfMonth().plusWrapField(22);
+        copy = test.dayOfMonth().addWrapFieldToCopy(22);
         check(copy, 1972, 6, 1);
         
-        copy = test.dayOfMonth().plusWrapField(-12);
+        copy = test.dayOfMonth().addWrapFieldToCopy(-12);
         check(copy, 1972, 6, 27);
         
         test = new LocalDate(1972, 7, 9);
-        copy = test.dayOfMonth().plusWrapField(21);
+        copy = test.dayOfMonth().addWrapFieldToCopy(21);
         check(copy, 1972, 7, 30);
     
-        copy = test.dayOfMonth().plusWrapField(22);
+        copy = test.dayOfMonth().addWrapFieldToCopy(22);
         check(copy, 1972, 7, 31);
     
-        copy = test.dayOfMonth().plusWrapField(23);
+        copy = test.dayOfMonth().addWrapFieldToCopy(23);
         check(copy, 1972, 7, 1);
     
-        copy = test.dayOfMonth().plusWrapField(-12);
+        copy = test.dayOfMonth().addWrapFieldToCopy(-12);
         check(copy, 1972, 7, 28);
     }
 
-    public void testPropertyWithDay() {
+    public void testPropertySetCopyDay() {
         LocalDate test = new LocalDate(1972, 6, 9);
-        LocalDate copy = test.dayOfMonth().withValue(12);
+        LocalDate copy = test.dayOfMonth().setCopy(12);
         check(test, 1972, 6, 9);
         check(copy, 1972, 6, 12);
         
         try {
-            test.dayOfMonth().withValue(31);
+            test.dayOfMonth().setCopy(31);
             fail();
         } catch (IllegalArgumentException ex) {}
         try {
-            test.dayOfMonth().withValue(0);
+            test.dayOfMonth().setCopy(0);
             fail();
         } catch (IllegalArgumentException ex) {}
     }
 
-    public void testPropertyWithTextDay() {
+    public void testPropertySetCopyTextDay() {
         LocalDate test = new LocalDate(1972, 6, 9);
-        LocalDate copy = test.dayOfMonth().withValue("12");
+        LocalDate copy = test.dayOfMonth().setCopy("12");
         check(test, 1972, 6, 9);
         check(copy, 1972, 6, 12);
     }
diff --git a/JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java b/JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java
index 427d18acd..4cec9aa07 100644
--- a/JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java
+++ b/JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java
@@ -95,32 +95,32 @@ public void testPropertyGetHour() {
 
     public void testPropertyRoundHour() {
         LocalTime test = new LocalTime(10, 20);
-        check(test.hourOfDay().roundCeiling(), 11, 0, 0, 0);
-        check(test.hourOfDay().roundFloor(), 10, 0, 0, 0);
-        check(test.hourOfDay().roundHalfCeiling(), 10, 0, 0, 0);
-        check(test.hourOfDay().roundHalfFloor(), 10, 0, 0, 0);
-        check(test.hourOfDay().roundHalfEven(), 10, 0, 0, 0);
+        check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0);
+        check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0);
+        check(test.hourOfDay().roundHalfCeilingCopy(), 10, 0, 0, 0);
+        check(test.hourOfDay().roundHalfFloorCopy(), 10, 0, 0, 0);
+        check(test.hourOfDay().roundHalfEvenCopy(), 10, 0, 0, 0);
         
         test = new LocalTime(10, 40);
-        check(test.hourOfDay().roundCeiling(), 11, 0, 0, 0);
-        check(test.hourOfDay().roundFloor(), 10, 0, 0, 0);
-        check(test.hourOfDay().roundHalfCeiling(), 11, 0, 0, 0);
-        check(test.hourOfDay().roundHalfFloor(), 11, 0, 0, 0);
-        check(test.hourOfDay().roundHalfEven(), 11, 0, 0, 0);
+        check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0);
+        check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0);
+        check(test.hourOfDay().roundHalfCeilingCopy(), 11, 0, 0, 0);
+        check(test.hourOfDay().roundHalfFloorCopy(), 11, 0, 0, 0);
+        check(test.hourOfDay().roundHalfEvenCopy(), 11, 0, 0, 0);
         
         test = new LocalTime(10, 30);
-        check(test.hourOfDay().roundCeiling(), 11, 0, 0, 0);
-        check(test.hourOfDay().roundFloor(), 10, 0, 0, 0);
-        check(test.hourOfDay().roundHalfCeiling(), 11, 0, 0, 0);
-        check(test.hourOfDay().roundHalfFloor(), 10, 0, 0, 0);
-        check(test.hourOfDay().roundHalfEven(), 10, 0, 0, 0);
+        check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0);
+        check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0);
+        check(test.hourOfDay().roundHalfCeilingCopy(), 11, 0, 0, 0);
+        check(test.hourOfDay().roundHalfFloorCopy(), 10, 0, 0, 0);
+        check(test.hourOfDay().roundHalfEvenCopy(), 10, 0, 0, 0);
         
         test = new LocalTime(11, 30);
-        check(test.hourOfDay().roundCeiling(), 12, 0, 0, 0);
-        check(test.hourOfDay().roundFloor(), 11, 0, 0, 0);
-        check(test.hourOfDay().roundHalfCeiling(), 12, 0, 0, 0);
-        check(test.hourOfDay().roundHalfFloor(), 11, 0, 0, 0);
-        check(test.hourOfDay().roundHalfEven(), 12, 0, 0, 0);
+        check(test.hourOfDay().roundCeilingCopy(), 12, 0, 0, 0);
+        check(test.hourOfDay().roundFloorCopy(), 11, 0, 0, 0);
+        check(test.hourOfDay().roundHalfCeilingCopy(), 12, 0, 0, 0);
+        check(test.hourOfDay().roundHalfFloorCopy(), 11, 0, 0, 0);
+        check(test.hourOfDay().roundHalfEvenCopy(), 12, 0, 0, 0);
     }
 
     public void testPropertyGetMaxMinValuesHour() {
@@ -139,49 +139,49 @@ public void testPropertyWithMaxMinValueHour() {
 
     public void testPropertyPlusHour() {
         LocalTime test = new LocalTime(10, 20, 30, 40);
-        LocalTime copy = test.hourOfDay().plus(9);
+        LocalTime copy = test.hourOfDay().addCopy(9);
         check(test, 10, 20, 30, 40);
         check(copy, 19, 20, 30, 40);
         
-        copy = test.hourOfDay().plus(0);
+        copy = test.hourOfDay().addCopy(0);
         check(copy, 10, 20, 30, 40);
         
-        copy = test.hourOfDay().plus(13);
+        copy = test.hourOfDay().addCopy(13);
         check(copy, 23, 20, 30, 40);
         
-        copy = test.hourOfDay().plus(14);
+        copy = test.hourOfDay().addCopy(14);
         check(copy, 0, 20, 30, 40);
         
-        copy = test.hourOfDay().plus(-10);
+        copy = test.hourOfDay().addCopy(-10);
         check(copy, 0, 20, 30, 40);
         
-        copy = test.hourOfDay().plus(-11);
+        copy = test.hourOfDay().addCopy(-11);
         check(copy, 23, 20, 30, 40);
     }
 
     public void testPropertyPlusNoWrapHour() {
         LocalTime test = new LocalTime(10, 20, 30, 40);
-        LocalTime copy = test.hourOfDay().plusNoWrap(9);
+        LocalTime copy = test.hourOfDay().addNoWrapToCopy(9);
         check(test, 10, 20, 30, 40);
         check(copy, 19, 20, 30, 40);
         
-        copy = test.hourOfDay().plusNoWrap(0);
+        copy = test.hourOfDay().addNoWrapToCopy(0);
         check(copy, 10, 20, 30, 40);
         
-        copy = test.hourOfDay().plusNoWrap(13);
+        copy = test.hourOfDay().addNoWrapToCopy(13);
         check(copy, 23, 20, 30, 40);
         
         try {
-            test.hourOfDay().plusNoWrap(14);
+            test.hourOfDay().addNoWrapToCopy(14);
             fail();
         } catch (IllegalArgumentException ex) {}
         check(test, 10, 20, 30, 40);
         
-        copy = test.hourOfDay().plusNoWrap(-10);
+        copy = test.hourOfDay().addNoWrapToCopy(-10);
         check(copy, 0, 20, 30, 40);
         
         try {
-            test.hourOfDay().plusNoWrap(-11);
+            test.hourOfDay().addNoWrapToCopy(-11);
             fail();
         } catch (IllegalArgumentException ex) {}
         check(test, 10, 20, 30, 40);
@@ -189,39 +189,39 @@ public void testPropertyPlusNoWrapHour() {
 
     public void testPropertyPlusWrapFieldHour() {
         LocalTime test = new LocalTime(10, 20, 30, 40);
-        LocalTime copy = test.hourOfDay().plusWrapField(9);
+        LocalTime copy = test.hourOfDay().addWrapFieldToCopy(9);
         check(test, 10, 20, 30, 40);
         check(copy, 19, 20, 30, 40);
         
-        copy = test.hourOfDay().plusWrapField(0);
+        copy = test.hourOfDay().addWrapFieldToCopy(0);
         check(copy, 10, 20, 30, 40);
         
-        copy = test.hourOfDay().plusWrapField(18);
+        copy = test.hourOfDay().addWrapFieldToCopy(18);
         check(copy, 4, 20, 30, 40);
         
-        copy = test.hourOfDay().plusWrapField(-15);
+        copy = test.hourOfDay().addWrapFieldToCopy(-15);
         check(copy, 19, 20, 30, 40);
     }
 
     public void testPropertySetHour() {
         LocalTime test = new LocalTime(10, 20, 30, 40);
-        LocalTime copy = test.hourOfDay().withValue(12);
+        LocalTime copy = test.hourOfDay().setCopy(12);
         check(test, 10, 20, 30, 40);
         check(copy, 12, 20, 30, 40);
         
         try {
-            test.hourOfDay().withValue(24);
+            test.hourOfDay().setCopy(24);
             fail();
         } catch (IllegalArgumentException ex) {}
         try {
-            test.hourOfDay().withValue(-1);
+            test.hourOfDay().setCopy(-1);
             fail();
         } catch (IllegalArgumentException ex) {}
     }
 
     public void testPropertySetTextHour() {
         LocalTime test = new LocalTime(10, 20, 30, 40);
-        LocalTime copy = test.hourOfDay().withValue("12");
+        LocalTime copy = test.hourOfDay().setCopy("12");
         check(test, 10, 20, 30, 40);
         check(copy, 12, 20, 30, 40);
     }
@@ -297,85 +297,85 @@ public void testPropertyWithMaxMinValueMinute() {
 
     public void testPropertyPlusMinute() {
         LocalTime test = new LocalTime(10, 20, 30, 40);
-        LocalTime copy = test.minuteOfHour().plus(9);
+        LocalTime copy = test.minuteOfHour().addCopy(9);
         check(test, 10, 20, 30, 40);
         check(copy, 10, 29, 30, 40);
         
-        copy = test.minuteOfHour().plus(39);
+        copy = test.minuteOfHour().addCopy(39);
         check(copy, 10, 59, 30, 40);
         
-        copy = test.minuteOfHour().plus(40);
+        copy = test.minuteOfHour().addCopy(40);
         check(copy, 11, 0, 30, 40);
         
-        copy = test.minuteOfHour().plus(1 * 60 + 45);
+        copy = test.minuteOfHour().addCopy(1 * 60 + 45);
         check(copy, 12, 5, 30, 40);
         
-        copy = test.minuteOfHour().plus(13 * 60 + 39);
+        copy = test.minuteOfHour().addCopy(13 * 60 + 39);
         check(copy, 23, 59, 30, 40);
         
-        copy = test.minuteOfHour().plus(13 * 60 + 40);
+        copy = test.minuteOfHour().addCopy(13 * 60 + 40);
         check(copy, 0, 0, 30, 40);
         
-        copy = test.minuteOfHour().plus(-9);
+        copy = test.minuteOfHour().addCopy(-9);
         check(copy, 10, 11, 30, 40);
         
-        copy = test.minuteOfHour().plus(-19);
+        copy = test.minuteOfHour().addCopy(-19);
         check(copy, 10, 1, 30, 40);
         
-        copy = test.minuteOfHour().plus(-20);
+        copy = test.minuteOfHour().addCopy(-20);
         check(copy, 10, 0, 30, 40);
         
-        copy = test.minuteOfHour().plus(-21);
+        copy = test.minuteOfHour().addCopy(-21);
         check(copy, 9, 59, 30, 40);
         
-        copy = test.minuteOfHour().plus(-(10 * 60 + 20));
+        copy = test.minuteOfHour().addCopy(-(10 * 60 + 20));
         check(copy, 0, 0, 30, 40);
         
-        copy = test.minuteOfHour().plus(-(10 * 60 + 21));
+        copy = test.minuteOfHour().addCopy(-(10 * 60 + 21));
         check(copy, 23, 59, 30, 40);
     }
 
     public void testPropertyPlusNoWrapMinute() {
         LocalTime test = new LocalTime(10, 20, 30, 40);
-        LocalTime copy = test.minuteOfHour().plusNoWrap(9);
+        LocalTime copy = test.minuteOfHour().addNoWrapToCopy(9);
         check(test, 10, 20, 30, 40);
         check(copy, 10, 29, 30, 40);
         
-        copy = test.minuteOfHour().plusNoWrap(39);
+        copy = test.minuteOfHour().addNoWrapToCopy(39);
         check(copy, 10, 59, 30, 40);
         
-        copy = test.minuteOfHour().plusNoWrap(40);
+        copy = test.minuteOfHour().addNoWrapToCopy(40);
         check(copy, 11, 0, 30, 40);
         
-        copy = test.minuteOfHour().plusNoWrap(1 * 60 + 45);
+        copy = test.minuteOfHour().addNoWrapToCopy(1 * 60 + 45);
         check(copy, 12, 5, 30, 40);
         
-        copy = test.minuteOfHour().plusNoWrap(13 * 60 + 39);
+        copy = test.minuteOfHour().addNoWrapToCopy(13 * 60 + 39);
         check(copy, 23, 59, 30, 40);
         
         try {
-            test.minuteOfHour().plusNoWrap(13 * 60 + 40);
+            test.minuteOfHour().addNoWrapToCopy(13 * 60 + 40);
             fail();
         } catch (IllegalArgumentException ex) {}
         check(test, 10, 20, 30, 40);
         
-        copy = test.minuteOfHour().plusNoWrap(-9);
+        copy = test.minuteOfHour().addNoWrapToCopy(-9);
         check(copy, 10, 11, 30, 40);
         
-        copy = test.minuteOfHour().plusNoWrap(-19);
+        copy = test.minuteOfHour().addNoWrapToCopy(-19);
         check(copy, 10, 1, 30, 40);
         
-        copy = test.minuteOfHour().plusNoWrap(-20);
+        copy = test.minuteOfHour().addNoWrapToCopy(-20);
         check(copy, 10, 0, 30, 40);
         
-        copy = test.minuteOfHour().plusNoWrap(-21);
+        copy = test.minuteOfHour().addNoWrapToCopy(-21);
         check(copy, 9, 59, 30, 40);
         
-        copy = test.minuteOfHour().plusNoWrap(-(10 * 60 + 20));
+        copy = test.minuteOfHour().addNoWrapToCopy(-(10 * 60 + 20));
         check(copy, 0, 0, 30, 40);
         
         try {
-            test.minuteOfHour().plusNoWrap(-(10 * 60 + 21));
+            test.minuteOfHour().addNoWrapToCopy(-(10 * 60 + 21));
             fail();
         } catch (IllegalArgumentException ex) {}
         check(test, 10, 20, 30, 40);
@@ -383,36 +383,36 @@ public void testPropertyPlusNoWrapMinute() {
 
     public void testPropertyPlusWrapFieldMinute() {
         LocalTime test = new LocalTime(10, 20, 30, 40);
-        LocalTime copy = test.minuteOfHour().plusWrapField(9);
+        LocalTime copy = test.minuteOfHour().addWrapFieldToCopy(9);
         check(test, 10, 20, 30, 40);
         check(copy, 10, 29, 30, 40);
         
-        copy = test.minuteOfHour().plusWrapField(49);
+        copy = test.minuteOfHour().addWrapFieldToCopy(49);
         check(copy, 10, 9, 30, 40);
         
-        copy = test.minuteOfHour().plusWrapField(-47);
+        copy = test.minuteOfHour().addWrapFieldToCopy(-47);
         check(copy, 10, 33, 30, 40);
     }
 
     public void testPropertySetMinute() {
         LocalTime test = new LocalTime(10, 20, 30, 40);
-        LocalTime copy = test.minuteOfHour().withValue(12);
+        LocalTime copy = test.minuteOfHour().setCopy(12);
         check(test, 10, 20, 30, 40);
         check(copy, 10, 12, 30, 40);
         
         try {
-            test.minuteOfHour().withValue(60);
+            test.minuteOfHour().setCopy(60);
             fail();
         } catch (IllegalArgumentException ex) {}
         try {
-            test.minuteOfHour().withValue(-1);
+            test.minuteOfHour().setCopy(-1);
             fail();
         } catch (IllegalArgumentException ex) {}
     }
 
     public void testPropertySetTextMinute() {
         LocalTime test = new LocalTime(10, 20, 30, 40);
-        LocalTime copy = test.minuteOfHour().withValue("12");
+        LocalTime copy = test.minuteOfHour().setCopy("12");
         check(test, 10, 20, 30, 40);
         check(copy, 10, 12, 30, 40);
     }
@@ -474,79 +474,79 @@ public void testPropertyWithMaxMinValueSecond() {
 
     public void testPropertyPlusSecond() {
         LocalTime test = new LocalTime(10, 20, 30, 40);
-        LocalTime copy = test.secondOfMinute().plus(9);
+        LocalTime copy = test.secondOfMinute().addCopy(9);
         check(test, 10, 20, 30, 40);
         check(copy, 10, 20, 39, 40);
         
-        copy = test.secondOfMinute().plus(29);
+        copy = test.secondOfMinute().addCopy(29);
         check(copy, 10, 20, 59, 40);
         
-        copy = test.secondOfMinute().plus(30);
+        copy = test.secondOfMinute().addCopy(30);
         check(copy, 10, 21, 0, 40);
         
-        copy = test.secondOfMinute().plus(39 * 60 + 29);
+        copy = test.secondOfMinute().addCopy(39 * 60 + 29);
         check(copy, 10, 59, 59, 40);
         
-        copy = test.secondOfMinute().plus(39 * 60 + 30);
+        copy = test.secondOfMinute().addCopy(39 * 60 + 30);
         check(copy, 11, 0, 0, 40);
         
-        copy = test.secondOfMinute().plus(13 * 60 * 60 + 39 * 60 + 30);
+        copy = test.secondOfMinute().addCopy(13 * 60 * 60 + 39 * 60 + 30);
         check(copy, 0, 0, 0, 40);
         
-        copy = test.secondOfMinute().plus(-9);
+        copy = test.secondOfMinute().addCopy(-9);
         check(copy, 10, 20, 21, 40);
         
-        copy = test.secondOfMinute().plus(-30);
+        copy = test.secondOfMinute().addCopy(-30);
         check(copy, 10, 20, 0, 40);
         
-        copy = test.secondOfMinute().plus(-31);
+        copy = test.secondOfMinute().addCopy(-31);
         check(copy, 10, 19, 59, 40);
         
-        copy = test.secondOfMinute().plus(-(10 * 60 * 60 + 20 * 60 + 30));
+        copy = test.secondOfMinute().addCopy(-(10 * 60 * 60 + 20 * 60 + 30));
         check(copy, 0, 0, 0, 40);
         
-        copy = test.secondOfMinute().plus(-(10 * 60 * 60 + 20 * 60 + 31));
+        copy = test.secondOfMinute().addCopy(-(10 * 60 * 60 + 20 * 60 + 31));
         check(copy, 23, 59, 59, 40);
     }
 
     public void testPropertyPlusNoWrapSecond() {
         LocalTime test = new LocalTime(10, 20, 30, 40);
-        LocalTime copy = test.secondOfMinute().plusNoWrap(9);
+        LocalTime copy = test.secondOfMinute().addNoWrapToCopy(9);
         check(test, 10, 20, 30, 40);
         check(copy, 10, 20, 39, 40);
         
-        copy = test.secondOfMinute().plusNoWrap(29);
+        copy = test.secondOfMinute().addNoWrapToCopy(29);
         check(copy, 10, 20, 59, 40);
         
-        copy = test.secondOfMinute().plusNoWrap(30);
+        copy = test.secondOfMinute().addNoWrapToCopy(30);
         check(copy, 10, 21, 0, 40);
         
-        copy = test.secondOfMinute().plusNoWrap(39 * 60 + 29);
+        copy = test.secondOfMinute().addNoWrapToCopy(39 * 60 + 29);
         check(copy, 10, 59, 59, 40);
         
-        copy = test.secondOfMinute().plusNoWrap(39 * 60 + 30);
+        copy = test.secondOfMinute().addNoWrapToCopy(39 * 60 + 30);
         check(copy, 11, 0, 0, 40);
         
         try {
-            test.secondOfMinute().plusNoWrap(13 * 60 * 60 + 39 * 60 + 30);
+            test.secondOfMinute().addNoWrapToCopy(13 * 60 * 60 + 39 * 60 + 30);
             fail();
         } catch (IllegalArgumentException ex) {}
         check(test, 10, 20, 30, 40);
         
-        copy = test.secondOfMinute().plusNoWrap(-9);
+        copy = test.secondOfMinute().addNoWrapToCopy(-9);
         check(copy, 10, 20, 21, 40);
         
-        copy = test.secondOfMinute().plusNoWrap(-30);
+        copy = test.secondOfMinute().addNoWrapToCopy(-30);
         check(copy, 10, 20, 0, 40);
         
-        copy = test.secondOfMinute().plusNoWrap(-31);
+        copy = test.secondOfMinute().addNoWrapToCopy(-31);
         check(copy, 10, 19, 59, 40);
         
-        copy = test.secondOfMinute().plusNoWrap(-(10 * 60 * 60 + 20 * 60 + 30));
+        copy = test.secondOfMinute().addNoWrapToCopy(-(10 * 60 * 60 + 20 * 60 + 30));
         check(copy, 0, 0, 0, 40);
         
         try {
-            test.secondOfMinute().plusNoWrap(-(10 * 60 * 60 + 20 * 60 + 31));
+            test.secondOfMinute().addNoWrapToCopy(-(10 * 60 * 60 + 20 * 60 + 31));
             fail();
         } catch (IllegalArgumentException ex) {}
         check(test, 10, 20, 30, 40);
@@ -554,36 +554,36 @@ public void testPropertyPlusNoWrapSecond() {
 
     public void testPropertyPlusWrapFieldSecond() {
         LocalTime test = new LocalTime(10, 20, 30, 40);
-        LocalTime copy = test.secondOfMinute().plusWrapField(9);
+        LocalTime copy = test.secondOfMinute().addWrapFieldToCopy(9);
         check(test, 10, 20, 30, 40);
         check(copy, 10, 20, 39, 40);
         
-        copy = test.secondOfMinute().plusWrapField(49);
+        copy = test.secondOfMinute().addWrapFieldToCopy(49);
         check(copy, 10, 20, 19, 40);
         
-        copy = test.secondOfMinute().plusWrapField(-47);
+        copy = test.secondOfMinute().addWrapFieldToCopy(-47);
         check(copy, 10, 20, 43, 40);
     }
 
     public void testPropertySetSecond() {
         LocalTime test = new LocalTime(10, 20, 30, 40);
-        LocalTime copy = test.secondOfMinute().withValue(12);
+        LocalTime copy = test.secondOfMinute().setCopy(12);
         check(test, 10, 20, 30, 40);
         check(copy, 10, 20, 12, 40);
         
         try {
-            test.secondOfMinute().withValue(60);
+            test.secondOfMinute().setCopy(60);
             fail();
         } catch (IllegalArgumentException ex) {}
         try {
-            test.secondOfMinute().withValue(-1);
+            test.secondOfMinute().setCopy(-1);
             fail();
         } catch (IllegalArgumentException ex) {}
     }
 
     public void testPropertySetTextSecond() {
         LocalTime test = new LocalTime(10, 20, 30, 40);
-        LocalTime copy = test.secondOfMinute().withValue("12");
+        LocalTime copy = test.secondOfMinute().setCopy("12");
         check(test, 10, 20, 30, 40);
         check(copy, 10, 20, 12, 40);
     }
@@ -645,73 +645,73 @@ public void testPropertyWithMaxMinValueMilli() {
 
     public void testPropertyPlusMilli() {
         LocalTime test = new LocalTime(10, 20, 30, 40);
-        LocalTime copy = test.millisOfSecond().plus(9);
+        LocalTime copy = test.millisOfSecond().addCopy(9);
         check(test, 10, 20, 30, 40);
         check(copy, 10, 20, 30, 49);
         
-        copy = test.millisOfSecond().plus(959);
+        copy = test.millisOfSecond().addCopy(959);
         check(copy, 10, 20, 30, 999);
         
-        copy = test.millisOfSecond().plus(960);
+        copy = test.millisOfSecond().addCopy(960);
         check(copy, 10, 20, 31, 0);
         
-        copy = test.millisOfSecond().plus(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 959);
+        copy = test.millisOfSecond().addCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 959);
         check(copy, 23, 59, 59, 999);
         
-        copy = test.millisOfSecond().plus(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 960);
+        copy = test.millisOfSecond().addCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 960);
         check(copy, 0, 0, 0, 0);
         
-        copy = test.millisOfSecond().plus(-9);
+        copy = test.millisOfSecond().addCopy(-9);
         check(copy, 10, 20, 30, 31);
         
-        copy = test.millisOfSecond().plus(-40);
+        copy = test.millisOfSecond().addCopy(-40);
         check(copy, 10, 20, 30, 0);
         
-        copy = test.millisOfSecond().plus(-41);
+        copy = test.millisOfSecond().addCopy(-41);
         check(copy, 10, 20, 29, 999);
         
-        copy = test.millisOfSecond().plus(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 40));
+        copy = test.millisOfSecond().addCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 40));
         check(copy, 0, 0, 0, 0);
         
-        copy = test.millisOfSecond().plus(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 41));
+        copy = test.millisOfSecond().addCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 41));
         check(copy, 23, 59, 59, 999);
     }
 
     public void testPropertyPlusNoWrapMilli() {
         LocalTime test = new LocalTime(10, 20, 30, 40);
-        LocalTime copy = test.millisOfSecond().plusNoWrap(9);
+        LocalTime copy = test.millisOfSecond().addNoWrapToCopy(9);
         check(test, 10, 20, 30, 40);
         check(copy, 10, 20, 30, 49);
         
-        copy = test.millisOfSecond().plusNoWrap(959);
+        copy = test.millisOfSecond().addNoWrapToCopy(959);
         check(copy, 10, 20, 30, 999);
         
-        copy = test.millisOfSecond().plusNoWrap(960);
+        copy = test.millisOfSecond().addNoWrapToCopy(960);
         check(copy, 10, 20, 31, 0);
         
-        copy = test.millisOfSecond().plusNoWrap(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 959);
+        copy = test.millisOfSecond().addNoWrapToCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 959);
         check(copy, 23, 59, 59, 999);
         
         try {
-            test.millisOfSecond().plusNoWrap(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 960);
+            test.millisOfSecond().addNoWrapToCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 960);
             fail();
         } catch (IllegalArgumentException ex) {}
         check(test, 10, 20, 30, 40);
         
-        copy = test.millisOfSecond().plusNoWrap(-9);
+        copy = test.millisOfSecond().addNoWrapToCopy(-9);
         check(copy, 10, 20, 30, 31);
         
-        copy = test.millisOfSecond().plusNoWrap(-40);
+        copy = test.millisOfSecond().addNoWrapToCopy(-40);
         check(copy, 10, 20, 30, 0);
         
-        copy = test.millisOfSecond().plusNoWrap(-41);
+        copy = test.millisOfSecond().addNoWrapToCopy(-41);
         check(copy, 10, 20, 29, 999);
         
-        copy = test.millisOfSecond().plusNoWrap(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 40));
+        copy = test.millisOfSecond().addNoWrapToCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 40));
         check(copy, 0, 0, 0, 0);
         
         try {
-            test.millisOfSecond().plusNoWrap(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 41));
+            test.millisOfSecond().addNoWrapToCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 41));
             fail();
         } catch (IllegalArgumentException ex) {}
         check(test, 10, 20, 30, 40);
@@ -719,36 +719,36 @@ public void testPropertyPlusNoWrapMilli() {
 
     public void testPropertyPlusWrapFieldMilli() {
         LocalTime test = new LocalTime(10, 20, 30, 40);
-        LocalTime copy = test.millisOfSecond().plusWrapField(9);
+        LocalTime copy = test.millisOfSecond().addWrapFieldToCopy(9);
         check(test, 10, 20, 30, 40);
         check(copy, 10, 20, 30, 49);
         
-        copy = test.millisOfSecond().plusWrapField(995);
+        copy = test.millisOfSecond().addWrapFieldToCopy(995);
         check(copy, 10, 20, 30, 35);
         
-        copy = test.millisOfSecond().plusWrapField(-47);
+        copy = test.millisOfSecond().addWrapFieldToCopy(-47);
         check(copy, 10, 20, 30, 993);
     }
 
     public void testPropertySetMilli() {
         LocalTime test = new LocalTime(10, 20, 30, 40);
-        LocalTime copy = test.millisOfSecond().withValue(12);
+        LocalTime copy = test.millisOfSecond().setCopy(12);
         check(test, 10, 20, 30, 40);
         check(copy, 10, 20, 30, 12);
         
         try {
-            test.millisOfSecond().withValue(1000);
+            test.millisOfSecond().setCopy(1000);
             fail();
         } catch (IllegalArgumentException ex) {}
         try {
-            test.millisOfSecond().withValue(-1);
+            test.millisOfSecond().setCopy(-1);
             fail();
         } catch (IllegalArgumentException ex) {}
     }
 
     public void testPropertySetTextMilli() {
         LocalTime test = new LocalTime(10, 20, 30, 40);
-        LocalTime copy = test.millisOfSecond().withValue("12");
+        LocalTime copy = test.millisOfSecond().setCopy("12");
         check(test, 10, 20, 30, 40);
         check(copy, 10, 20, 30, 12);
     }

From 3104c835fec4dbfacab9bb23d897cc63b11dd53a Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 29 May 2006 10:28:21 +0000
Subject: [PATCH 089/115] Mark as effectively deprecated

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1086 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/TimeOfDay.java    | 5 +++++
 JodaTime/src/java/org/joda/time/YearMonthDay.java | 5 +++++
 2 files changed, 10 insertions(+)

diff --git a/JodaTime/src/java/org/joda/time/TimeOfDay.java b/JodaTime/src/java/org/joda/time/TimeOfDay.java
index dccd263d5..6f3a9c36f 100644
--- a/JodaTime/src/java/org/joda/time/TimeOfDay.java
+++ b/JodaTime/src/java/org/joda/time/TimeOfDay.java
@@ -30,6 +30,11 @@
  * TimeOfDay is an immutable partial supporting the hour, minute, second
  * and millisecond fields.
  * <p>
+ * NOTE: This class is effectively deprecated. New applications should
+ * use {@link LocalTime} which has a better internal implementation.
+ * This class has not yet been formally deprecated due to the large number
+ * of existing users.
+ * <p>
  * Calculations on TimeOfDay are performed using a {@link Chronology}.
  * This chronology is set to be in the UTC time zone for all calculations.
  * <p>
diff --git a/JodaTime/src/java/org/joda/time/YearMonthDay.java b/JodaTime/src/java/org/joda/time/YearMonthDay.java
index 7eaa1ec47..5b8d98d28 100644
--- a/JodaTime/src/java/org/joda/time/YearMonthDay.java
+++ b/JodaTime/src/java/org/joda/time/YearMonthDay.java
@@ -30,6 +30,11 @@
  * YearMonthDay is an immutable partial supporting the year, monthOfYear
  * and dayOfMonth fields.
  * <p>
+ * NOTE: This class is effectively deprecated. New applications should
+ * use {@link LocalDate} which has a better internal implementation.
+ * This class has not yet been formally deprecated due to the large number
+ * of existing users.
+ * <p>
  * Calculations on YearMonthDay are performed using a {@link Chronology}.
  * This chronology is set to be in the UTC time zone for all calculations.
  * <p>

From 662b2ea471bb69ddc66192a93a3cd9b5b2f43b25 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 17 Jun 2006 12:35:23 +0000
Subject: [PATCH 090/115] In getPartialValues avoid validate and use chronology

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1087 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/java/org/joda/time/convert/StringConverter.java   | 8 +-------
 1 file changed, 1 insertion(+), 7 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/convert/StringConverter.java b/JodaTime/src/java/org/joda/time/convert/StringConverter.java
index 28a4d6d62..653731fe9 100644
--- a/JodaTime/src/java/org/joda/time/convert/StringConverter.java
+++ b/JodaTime/src/java/org/joda/time/convert/StringConverter.java
@@ -81,13 +81,7 @@ public long getInstantMillis(Object object, Chronology chrono) {
      */
     public int[] getPartialValues(ReadablePartial fieldSource, Object object, Chronology chrono, DateTimeFormatter parser) {
         long millis = parser.withChronology(chrono).parseMillis((String) object);
-        int size = fieldSource.size();
-        int[] values = new int[size];
-        for (int i = 0; i < size; i++) {
-            values[i] = fieldSource.getFieldType(i).getField(chrono).get(millis);
-        }
-        chrono.validate(fieldSource, values);
-        return values;
+        return chrono.get(fieldSource, millis);
     }
 
     //-----------------------------------------------------------------------

From c2ea180966f5ce849847e56f543be90ee28da737 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 17 Jun 2006 12:40:14 +0000
Subject: [PATCH 091/115] Document String constructor parse formats

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1088 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/DateMidnight.java | 4 ++++
 JodaTime/src/java/org/joda/time/DateTime.java     | 4 ++++
 2 files changed, 8 insertions(+)

diff --git a/JodaTime/src/java/org/joda/time/DateMidnight.java b/JodaTime/src/java/org/joda/time/DateMidnight.java
index 37cebd8a0..d134b978e 100644
--- a/JodaTime/src/java/org/joda/time/DateMidnight.java
+++ b/JodaTime/src/java/org/joda/time/DateMidnight.java
@@ -23,6 +23,7 @@
 
 import org.joda.time.base.BaseDateTime;
 import org.joda.time.field.AbstractReadableInstantFieldProperty;
+import org.joda.time.format.ISODateTimeFormat;
 
 /**
  * DateMidnight defines a date where the time component is fixed at midnight.
@@ -164,6 +165,7 @@ public DateMidnight(long instant, Chronology chronology) {
      * The recognised object types are defined in
      * {@link org.joda.time.convert.ConverterManager ConverterManager} and
      * include ReadableInstant, String, Calendar and Date.
+     * The String formats are described by {@link ISODateTimeFormat#dateTimeParser()}.
      *
      * @param instant  the datetime object, null means now
      * @throws IllegalArgumentException if the instant is invalid
@@ -187,6 +189,7 @@ public DateMidnight(Object instant) {
      * The recognised object types are defined in
      * {@link org.joda.time.convert.ConverterManager ConverterManager} and
      * include ReadableInstant, String, Calendar and Date.
+     * The String formats are described by {@link ISODateTimeFormat#dateTimeParser()}.
      *
      * @param instant  the datetime object, null means now
      * @param zone  the time zone, null means default time zone
@@ -208,6 +211,7 @@ public DateMidnight(Object instant, DateTimeZone zone) {
      * The recognised object types are defined in
      * {@link org.joda.time.convert.ConverterManager ConverterManager} and
      * include ReadableInstant, String, Calendar and Date.
+     * The String formats are described by {@link ISODateTimeFormat#dateTimeParser()}.
      *
      * @param instant  the datetime object, null means now
      * @param chronology  the chronology, null means ISOChronology in default zone
diff --git a/JodaTime/src/java/org/joda/time/DateTime.java b/JodaTime/src/java/org/joda/time/DateTime.java
index 41bb2899d..0f98a3261 100644
--- a/JodaTime/src/java/org/joda/time/DateTime.java
+++ b/JodaTime/src/java/org/joda/time/DateTime.java
@@ -24,6 +24,7 @@
 import org.joda.time.base.BaseDateTime;
 import org.joda.time.chrono.ISOChronology;
 import org.joda.time.field.AbstractReadableInstantFieldProperty;
+import org.joda.time.format.ISODateTimeFormat;
 
 /**
  * DateTime is the standard implementation of an unmodifiable datetime class.
@@ -152,6 +153,7 @@ public DateTime(long instant, Chronology chronology) {
      * The recognised object types are defined in
      * {@link org.joda.time.convert.ConverterManager ConverterManager} and
      * include ReadableInstant, String, Calendar and Date.
+     * The String formats are described by {@link ISODateTimeFormat#dateTimeParser()}.
      *
      * @param instant  the datetime object, null means now
      * @throws IllegalArgumentException if the instant is invalid
@@ -174,6 +176,7 @@ public DateTime(Object instant) {
      * The recognised object types are defined in
      * {@link org.joda.time.convert.ConverterManager ConverterManager} and
      * include ReadableInstant, String, Calendar and Date.
+     * The String formats are described by {@link ISODateTimeFormat#dateTimeParser()}.
      *
      * @param instant  the datetime object, null means now
      * @param zone  the time zone, null means default time zone
@@ -194,6 +197,7 @@ public DateTime(Object instant, DateTimeZone zone) {
      * The recognised object types are defined in
      * {@link org.joda.time.convert.ConverterManager ConverterManager} and
      * include ReadableInstant, String, Calendar and Date.
+     * The String formats are described by {@link ISODateTimeFormat#dateTimeParser()}.
      *
      * @param instant  the datetime object, null means now
      * @param chronology  the chronology, null means ISO in default zone

From ba5756d2e5f58b0808efdeca4383dbceb9d23075 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 17 Jun 2006 12:43:24 +0000
Subject: [PATCH 092/115] Document String constructor parse formats

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1089 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/TimeOfDay.java | 17 +++++++----------
 1 file changed, 7 insertions(+), 10 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/TimeOfDay.java b/JodaTime/src/java/org/joda/time/TimeOfDay.java
index 6f3a9c36f..7904b2668 100644
--- a/JodaTime/src/java/org/joda/time/TimeOfDay.java
+++ b/JodaTime/src/java/org/joda/time/TimeOfDay.java
@@ -261,10 +261,12 @@ public TimeOfDay(long instant, Chronology chronology) {
      * The recognised object types are defined in
      * {@link org.joda.time.convert.ConverterManager ConverterManager} and
      * include ReadableInstant, String, Calendar and Date.
-     * <p>
-     * The string format must begin with a 'T' to be recognised, such as 'T10:20'.
+     * The String formats are described by {@link ISODateTimeFormat#timeParser()}.
      * <p>
      * The chronology used will be derived from the object, defaulting to ISO.
+     * <p>
+     * NOTE: Prior to v1.3 the string format was described by
+     * {@link ISODateTimeFormat#dateTimeParser()}. Dates are now rejected.
      *
      * @param instant  the datetime object, null means now
      * @throws IllegalArgumentException if the instant is invalid
@@ -280,20 +282,15 @@ public TimeOfDay(Object instant) {
      * The recognised object types are defined in
      * {@link org.joda.time.convert.ConverterManager ConverterManager} and
      * include ReadableInstant, String, Calendar and Date.
-     * <p>
-     * The string format must begin with a 'T' to be recognised, such as 'T10:20'.
+     * The String formats are described by {@link ISODateTimeFormat#timeParser()}.
      * <p>
      * The constructor uses the time zone of the chronology specified.
      * Once the constructor is complete, all further calculations are performed
      * without reference to a timezone (by switching to UTC).
      * The specified chronology overrides that of the object.
      * <p>
-     * Note that as from version 1.2, the default converters go to extra
-     * effort to maintain the field values of the input Date or Calendar.
-     * This means that the differences in timezone data between Joda-Time
-     * and each JDK version are now handled correctly. If you just want to
-     * use the milliseconds value without conversion you must use
-     * {@link #TimeOfDay(long, Chronology)}.
+     * NOTE: Prior to v1.3 the string format was described by
+     * {@link ISODateTimeFormat#dateTimeParser()}. Dates are now rejected.
      *
      * @param instant  the datetime object, null means now
      * @param chronology  the chronology, null means ISO default

From 84f9e8210f6a63e7ec63684432e0f2946f206b18 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 17 Jun 2006 12:44:16 +0000
Subject: [PATCH 093/115] Prevent String constructor from accepting times only

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1090 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/YearMonthDay.java | 12 ++++++++++--
 1 file changed, 10 insertions(+), 2 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/YearMonthDay.java b/JodaTime/src/java/org/joda/time/YearMonthDay.java
index 5b8d98d28..f7e1a1b1c 100644
--- a/JodaTime/src/java/org/joda/time/YearMonthDay.java
+++ b/JodaTime/src/java/org/joda/time/YearMonthDay.java
@@ -215,14 +215,18 @@ public YearMonthDay(long instant, Chronology chronology) {
      * The recognised object types are defined in
      * {@link org.joda.time.convert.ConverterManager ConverterManager} and
      * include ReadableInstant, String, Calendar and Date.
+     * The String formats are described by {@link ISODateTimeFormat#dateOptionalTimeParser()}.
      * <p>
      * The chronology used will be derived from the object, defaulting to ISO.
+     * <p>
+     * NOTE: Prior to v1.3 the string format was described by
+     * {@link ISODateTimeFormat#dateTimeParser()}. Time ony strings are now rejected.
      *
      * @param instant  the datetime object, null means now
      * @throws IllegalArgumentException if the instant is invalid
      */
     public YearMonthDay(Object instant) {
-        super(instant, null);
+        super(instant, null, ISODateTimeFormat.dateOptionalTimeParser());
     }
 
     /**
@@ -232,18 +236,22 @@ public YearMonthDay(Object instant) {
      * The recognised object types are defined in
      * {@link org.joda.time.convert.ConverterManager ConverterManager} and
      * include ReadableInstant, String, Calendar and Date.
+     * The String formats are described by {@link ISODateTimeFormat#dateOptionalTimeParser()}.
      * <p>
      * The constructor uses the time zone of the chronology specified.
      * Once the constructor is complete, all further calculations are performed
      * without reference to a timezone (by switching to UTC).
      * The specified chronology overrides that of the object.
+     * <p>
+     * NOTE: Prior to v1.3 the string format was described by
+     * {@link ISODateTimeFormat#dateTimeParser()}. Time only strings are now rejected.
      *
      * @param instant  the datetime object, null means now
      * @param chronology  the chronology, null means ISO default
      * @throws IllegalArgumentException if the instant is invalid
      */
     public YearMonthDay(Object instant, Chronology chronology) {
-        super(instant, DateTimeUtils.getChronology(chronology));
+        super(instant, DateTimeUtils.getChronology(chronology), ISODateTimeFormat.dateOptionalTimeParser());
     }
 
     /**

From f8d725139f782c230cf8db925086bb6838e1327f Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 17 Jun 2006 12:46:03 +0000
Subject: [PATCH 094/115] Add and use new local ISO parsers

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1091 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  19 +-
 .../src/java/org/joda/time/LocalDate.java     |  10 +-
 .../src/java/org/joda/time/LocalDateTime.java |  10 +-
 .../src/java/org/joda/time/LocalTime.java     |  10 +-
 .../joda/time/format/ISODateTimeFormat.java   | 138 ++++---
 .../joda/time/TestDateTime_Constructors.java  | 105 +++++-
 .../time/TestLocalDateTime_Constructors.java  |  37 +-
 .../joda/time/TestLocalDate_Constructors.java |  39 +-
 .../joda/time/TestLocalTime_Constructors.java |  48 ++-
 .../joda/time/TestTimeOfDay_Constructors.java |  84 ++++-
 .../time/TestYearMonthDay_Constructors.java   |  85 ++++-
 .../test/org/joda/time/format/TestAll.java    |   3 +-
 .../format/TestISODateTimeFormatParsing.java  | 338 ++++++++++++++++++
 13 files changed, 817 insertions(+), 109 deletions(-)
 create mode 100644 JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index a9a38d9ec..e4eadb8b2 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -48,6 +48,10 @@ Enhancements since 1.2
 - DateTimeFormat
   Added method to retrieve the format pattern for a given style and locale.
 
+- ISODateTimeFormat
+  New formats for parsing a datetime/date/time without a time zone, and for
+  parsing a date (mandatory) with an optional time
+
 
 Compatibility with 1.2
 ----------------------
@@ -65,6 +69,10 @@ Serialization compatible - Yes
 Data compatible - Yes
   - DateTimeZone data updated to version 2006g
 
+Semantic compatible - Yes, except
+  - YearMonthDay constructor no longer accepts time only strings
+  - TimeOfDay constructor no longer accepts strings including a date
+
 
 Deprecations since 1.2
 ----------------------
@@ -75,6 +83,13 @@ Deprecations since 1.2
 
 Bug fixes since 1.2
 -------------------
+- YearMonthDay
+  Constructing with String value no longer accepts a time only string
+
+- TimeOfDay
+  Constructing with String value no longer accepts date fields
+  Constructing with String now treats 'T' prefix as optional
+
 - DateTime/DateMidnight/MutableDateTime/AbstractInstant
    Conversion methods toDateTime, toDateTimeISO, toMutableDateTime, and
     toMutableDateTimeISO now preserve the time zone.
@@ -100,10 +115,6 @@ Bug fixes since 1.2
   Fixed overflow when getting year field from instants at Long.MAX_VALUE and
   LONG.MIN_VALUE
 
-- TimeOfDay
-  Constructing with String value no longer accepts date fields
-  Constructing with String now treats 'T' prefix as optional
-
 - DayOfYear field
   Better error messages
 
diff --git a/JodaTime/src/java/org/joda/time/LocalDate.java b/JodaTime/src/java/org/joda/time/LocalDate.java
index 59e5a34b6..508f4ba34 100644
--- a/JodaTime/src/java/org/joda/time/LocalDate.java
+++ b/JodaTime/src/java/org/joda/time/LocalDate.java
@@ -257,7 +257,7 @@ public LocalDate(long instant, Chronology chronology) {
      * The recognised object types are defined in
      * {@link org.joda.time.convert.ConverterManager ConverterManager} and
      * include ReadablePartial, ReadableInstant, String, Calendar and Date.
-     * The String formats are described by {@link ISODateTimeFormat#dateElementParser()}.
+     * The String formats are described by {@link ISODateTimeFormat#localDateParser()}.
      *
      * @param instant  the datetime object
      * @throws IllegalArgumentException if the instant is invalid
@@ -277,7 +277,7 @@ public LocalDate(Object instant) {
      * The recognised object types are defined in
      * {@link org.joda.time.convert.ConverterManager ConverterManager} and
      * include ReadablePartial, ReadableInstant, String, Calendar and Date.
-     * The String formats are described by {@link ISODateTimeFormat#dateElementParser()}.
+     * The String formats are described by {@link ISODateTimeFormat#localDateParser()}.
      *
      * @param instant  the datetime object
      * @param zone  the time zone
@@ -288,7 +288,7 @@ public LocalDate(Object instant, DateTimeZone zone) {
         Chronology chronology = converter.getChronology(instant, zone);
         chronology = DateTimeUtils.getChronology(chronology);
         iChronology = chronology.withUTC();
-        int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.dateElementParser());
+        int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.localDateParser());
         iLocalMillis = iChronology.getDateTimeMillis(values[0], values[1], values[2], 0);
     }
 
@@ -302,7 +302,7 @@ public LocalDate(Object instant, DateTimeZone zone) {
      * The recognised object types are defined in
      * {@link org.joda.time.convert.ConverterManager ConverterManager} and
      * include ReadablePartial, ReadableInstant, String, Calendar and Date.
-     * The String formats are described by {@link ISODateTimeFormat#dateElementParser()}.
+     * The String formats are described by {@link ISODateTimeFormat#localDateParser()}.
      *
      * @param instant  the datetime object
      * @param chronology  the chronology
@@ -313,7 +313,7 @@ public LocalDate(Object instant, Chronology chronology) {
         chronology = converter.getChronology(instant, chronology);
         chronology = DateTimeUtils.getChronology(chronology);
         iChronology = chronology.withUTC();
-        int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.dateElementParser());
+        int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.localDateParser());
         iLocalMillis = iChronology.getDateTimeMillis(values[0], values[1], values[2], 0);
     }
 
diff --git a/JodaTime/src/java/org/joda/time/LocalDateTime.java b/JodaTime/src/java/org/joda/time/LocalDateTime.java
index b0e5d3906..c4c86f45e 100644
--- a/JodaTime/src/java/org/joda/time/LocalDateTime.java
+++ b/JodaTime/src/java/org/joda/time/LocalDateTime.java
@@ -251,7 +251,7 @@ public LocalDateTime(long instant, Chronology chronology) {
      * The recognised object types are defined in
      * {@link org.joda.time.convert.ConverterManager ConverterManager} and
      * include ReadablePartial, ReadableInstant, String, Calendar and Date.
-     * The String formats are described by {@link ISODateTimeFormat#dateOptionalTimeParser()}.
+     * The String formats are described by {@link ISODateTimeFormat#localDateOptionalTimeParser()}.
      *
      * @param instant  the datetime object
      * @throws IllegalArgumentException if the instant is invalid
@@ -271,7 +271,7 @@ public LocalDateTime(Object instant) {
      * The recognised object types are defined in
      * {@link org.joda.time.convert.ConverterManager ConverterManager} and
      * include ReadablePartial, ReadableInstant, String, Calendar and Date.
-     * The String formats are described by {@link ISODateTimeFormat#dateOptionalTimeParser()}.
+     * The String formats are described by {@link ISODateTimeFormat#localDateOptionalTimeParser()}.
      *
      * @param instant  the datetime object
      * @param zone  the time zone
@@ -282,7 +282,7 @@ public LocalDateTime(Object instant, DateTimeZone zone) {
         Chronology chronology = converter.getChronology(instant, zone);
         chronology = DateTimeUtils.getChronology(chronology);
         iChronology = chronology.withUTC();
-        int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.dateOptionalTimeParser());
+        int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.localDateOptionalTimeParser());
         iLocalMillis = iChronology.getDateTimeMillis(values[0], values[1], values[2], values[3]);
     }
 
@@ -296,7 +296,7 @@ public LocalDateTime(Object instant, DateTimeZone zone) {
      * The recognised object types are defined in
      * {@link org.joda.time.convert.ConverterManager ConverterManager} and
      * include ReadablePartial, ReadableInstant, String, Calendar and Date.
-     * The String formats are described by {@link ISODateTimeFormat#dateOptionalTimeParser()}.
+     * The String formats are described by {@link ISODateTimeFormat#localDateOptionalTimeParser()}.
      *
      * @param instant  the datetime object
      * @param chronology  the chronology
@@ -307,7 +307,7 @@ public LocalDateTime(Object instant, Chronology chronology) {
         chronology = converter.getChronology(instant, chronology);
         chronology = DateTimeUtils.getChronology(chronology);
         iChronology = chronology.withUTC();
-        int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.dateOptionalTimeParser());
+        int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.localDateOptionalTimeParser());
         iLocalMillis = iChronology.getDateTimeMillis(values[0], values[1], values[2], values[3]);
     }
 
diff --git a/JodaTime/src/java/org/joda/time/LocalTime.java b/JodaTime/src/java/org/joda/time/LocalTime.java
index 7459f1c9b..5028a983d 100644
--- a/JodaTime/src/java/org/joda/time/LocalTime.java
+++ b/JodaTime/src/java/org/joda/time/LocalTime.java
@@ -286,7 +286,7 @@ public LocalTime(long instant, Chronology chronology) {
      * The recognised object types are defined in
      * {@link org.joda.time.convert.ConverterManager ConverterManager} and
      * include ReadablePartial, ReadableInstant, String, Calendar and Date.
-     * The String formats are described by {@link ISODateTimeFormat#timeParser()}.
+     * The String formats are described by {@link ISODateTimeFormat#localTimeParser()}.
      *
      * @param instant  the datetime object
      * @throws IllegalArgumentException if the instant is invalid
@@ -306,7 +306,7 @@ public LocalTime(Object instant) {
      * The recognised object types are defined in
      * {@link org.joda.time.convert.ConverterManager ConverterManager} and
      * include ReadablePartial, ReadableInstant, String, Calendar and Date.
-     * The String formats are described by {@link ISODateTimeFormat#timeParser()}.
+     * The String formats are described by {@link ISODateTimeFormat#localTimeParser()}.
      *
      * @param instant  the datetime object
      * @param zone  the time zone
@@ -317,7 +317,7 @@ public LocalTime(Object instant, DateTimeZone zone) {
         Chronology chronology = converter.getChronology(instant, zone);
         chronology = DateTimeUtils.getChronology(chronology);
         iChronology = chronology.withUTC();
-        int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.timeParser());
+        int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.localTimeParser());
         iLocalMillis = iChronology.getDateTimeMillis(0L, values[0], values[1], values[2], values[3]);
     }
 
@@ -331,7 +331,7 @@ public LocalTime(Object instant, DateTimeZone zone) {
      * The recognised object types are defined in
      * {@link org.joda.time.convert.ConverterManager ConverterManager} and
      * include ReadablePartial, ReadableInstant, String, Calendar and Date.
-     * The String formats are described by {@link ISODateTimeFormat#timeParser()}.
+     * The String formats are described by {@link ISODateTimeFormat#localTimeParser()}.
      *
      * @param instant  the datetime object
      * @param chronology  the chronology
@@ -342,7 +342,7 @@ public LocalTime(Object instant, Chronology chronology) {
         chronology = converter.getChronology(instant, chronology);
         chronology = DateTimeUtils.getChronology(chronology);
         iChronology = chronology.withUTC();
-        int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.timeParser());
+        int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.localTimeParser());
         iLocalMillis = iChronology.getDateTimeMillis(0L, values[0], values[1], values[2], values[3]);
     }
 
diff --git a/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java b/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java
index 273f42e50..281bc9618 100644
--- a/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java
+++ b/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java
@@ -129,8 +129,10 @@
         tpe, // time parser element
         dp,  // date parser
         tp,  // time parser
+        ltp, // local time parser
         dtp, // date time parser
-        dotp; // date optional time parser
+        dotp, // date optional time parser
+        ldotp; // local date optional time parser
 
     /**
      * Constructor.
@@ -530,8 +532,8 @@ private static void appendSeparator(DateTimeFormatterBuilder bld, boolean extend
 
     //-----------------------------------------------------------------------
     /**
-     * Returns a generic ISO date parser. It accepts formats described by
-     * the following syntax:
+     * Returns a generic ISO date parser for parsing dates with a possible zone.
+     * It accepts formats described by the following syntax:
      * <pre>
      * date              = date-element ['T' offset]
      * date-element      = std-date-element | ord-date-element | week-date-element
@@ -543,21 +545,35 @@ private static void appendSeparator(DateTimeFormatterBuilder bld, boolean extend
      */
     public static DateTimeFormatter dateParser() {
         if (dp == null) {
+            DateTimeParser tOffset = new DateTimeFormatterBuilder()
+                .appendLiteral('T')
+                .append(offsetElement()).toParser();
             dp = new DateTimeFormatterBuilder()
                 .append(dateElementParser())
-                .appendOptional
-                (new DateTimeFormatterBuilder()
-                 .appendLiteral('T')
-                 .append(offsetElement())
-                 .toParser())
+                .appendOptional(tOffset)
                 .toFormatter();
         }
         return dp;
     }
 
     /**
-     * Returns a generic ISO date parser. It accepts formats described by
-     * the following syntax:
+     * Returns a generic ISO date parser for parsing local dates.
+     * It accepts formats described by the following syntax:
+     * <pre>
+     * date-element      = std-date-element | ord-date-element | week-date-element
+     * std-date-element  = yyyy ['-' MM ['-' dd]]
+     * ord-date-element  = yyyy ['-' DDD]
+     * week-date-element = xxxx '-W' ww ['-' e]
+     * </pre>
+     * @since 1.3
+     */
+    public static DateTimeFormatter localDateParser() {
+        return dateElementParser();
+    }
+
+    /**
+     * Returns a generic ISO date parser for parsing dates.
+     * It accepts formats described by the following syntax:
      * <pre>
      * date-element      = std-date-element | ord-date-element | week-date-element
      * std-date-element  = yyyy ['-' MM ['-' dd]]
@@ -593,8 +609,8 @@ public static DateTimeFormatter dateElementParser() {
     }
 
     /**
-     * Returns a generic ISO time parser. It accepts formats described by
-     * the following syntax:
+     * Returns a generic ISO time parser for parsing times with a possible zone.
+     * It accepts formats described by the following syntax:
      * <pre>
      * time           = ['T'] time-element [offset]
      * time-element   = HH [minute-element] | [fraction]
@@ -607,10 +623,7 @@ public static DateTimeFormatter dateElementParser() {
     public static DateTimeFormatter timeParser() {
         if (tp == null) {
             tp = new DateTimeFormatterBuilder()
-                .appendOptional
-                (new DateTimeFormatterBuilder()
-                 .appendLiteral('T')
-                 .toParser())
+                .appendOptional(literalTElement().getParser())
                 .append(timeElementParser())
                 .appendOptional(offsetElement().getParser())
                 .toFormatter();
@@ -618,6 +631,28 @@ public static DateTimeFormatter timeParser() {
         return tp;
     }
 
+    /**
+     * Returns a generic ISO time parser for parsing local times.
+     * It accepts formats described by the following syntax:
+     * <pre>
+     * time           = ['T'] time-element
+     * time-element   = HH [minute-element] | [fraction]
+     * minute-element = ':' mm [second-element] | [fraction]
+     * second-element = ':' ss [fraction]
+     * fraction       = ('.' | ',') digit+
+     * </pre>
+     * @since 1.3
+     */
+    public static DateTimeFormatter localTimeParser() {
+        if (ltp == null) {
+            ltp = new DateTimeFormatterBuilder()
+                .appendOptional(literalTElement().getParser())
+                .append(timeElementParser())
+                .toFormatter();
+        }
+        return ltp;
+    }
+
     /**
      * Returns a generic ISO time parser. It accepts formats described by
      * the following syntax:
@@ -685,8 +720,9 @@ public static DateTimeFormatter timeElementParser() {
      * Returns a generic ISO datetime parser which parses either a date or
      * a time or both. It accepts formats described by the following syntax:
      * <pre>
-     * datetime          = time | (date-element [time | ('T' offset)])
+     * datetime          = time | date-opt-time
      * time              = 'T' time-element [offset]
+     * date-opt-time     = date-element ['T' [time-element] [offset]]
      * date-element      = std-date-element | ord-date-element | week-date-element
      * std-date-element  = yyyy ['-' MM ['-' dd]]
      * ord-date-element  = yyyy ['-' DDD]
@@ -707,22 +743,8 @@ public static DateTimeFormatter dateTimeParser() {
                 .append(timeElementParser())
                 .appendOptional(offsetElement().getParser())
                 .toParser();
-
             dtp = new DateTimeFormatterBuilder()
-                .append(null, new DateTimeParser[] {
-                    time,
-                    new DateTimeFormatterBuilder()
-                    .append(dateElementParser())
-                    .append(null, new DateTimeParser[] {
-                        time,
-                        new DateTimeFormatterBuilder()
-                        .appendLiteral('T')
-                        .append(offsetElement())
-                        .toParser(),
-                        null
-                    })
-                    .toParser()
-                })
+                .append(null, new DateTimeParser[] {time, dateOptionalTimeParser().getParser()})
                 .toFormatter();
         }
         return dtp;
@@ -730,9 +752,10 @@ public static DateTimeFormatter dateTimeParser() {
 
     /**
      * Returns a generic ISO datetime parser where the date is mandatory and
-     * the time is optional. It accepts formats described by the following syntax:
+     * the time is optional. This parser can parse zoned datetimes.
+     * It accepts formats described by the following syntax:
      * <pre>
-     * datetime          = date-element ['T' time-element [offset]])
+     * date-opt-time     = date-element ['T' [time-element] [offset]]
      * date-element      = std-date-element | ord-date-element | week-date-element
      * std-date-element  = yyyy ['-' MM ['-' dd]]
      * ord-date-element  = yyyy ['-' DDD]
@@ -741,24 +764,55 @@ public static DateTimeFormatter dateTimeParser() {
      * minute-element    = ':' mm [second-element] | [fraction]
      * second-element    = ':' ss [fraction]
      * fraction          = ('.' | ',') digit+
-     * offset            = 'Z' | (('+' | '-') HH [':' mm [':' ss [('.' | ',') SSS]]])
      * </pre>
+     * @since 1.3
      */
     public static DateTimeFormatter dateOptionalTimeParser() {
         if (dotp == null) {
+            DateTimeParser timeOrOffset = new DateTimeFormatterBuilder()
+                .appendLiteral('T')
+                .appendOptional(timeElementParser().getParser())
+                .appendOptional(offsetElement().getParser())
+                .toParser();
             dotp = new DateTimeFormatterBuilder()
                 .append(dateElementParser())
-                .appendOptional(
-                    new DateTimeFormatterBuilder()
-                        .appendLiteral('T')
-                        .append(timeElementParser())
-                        .appendOptional(offsetElement().getParser())
-                        .toParser())
+                .appendOptional(timeOrOffset)
                 .toFormatter();
         }
         return dotp;
     }
 
+    /**
+     * Returns a generic ISO datetime parser where the date is mandatory and
+     * the time is optional. This parser only parses local datetimes.
+     * It accepts formats described by the following syntax:
+     * <pre>
+     * datetime          = date-element ['T' time-element]
+     * date-element      = std-date-element | ord-date-element | week-date-element
+     * std-date-element  = yyyy ['-' MM ['-' dd]]
+     * ord-date-element  = yyyy ['-' DDD]
+     * week-date-element = xxxx '-W' ww ['-' e]
+     * time-element      = HH [minute-element] | [fraction]
+     * minute-element    = ':' mm [second-element] | [fraction]
+     * second-element    = ':' ss [fraction]
+     * fraction          = ('.' | ',') digit+
+     * </pre>
+     * @since 1.3
+     */
+    public static DateTimeFormatter localDateOptionalTimeParser() {
+        if (ldotp == null) {
+            DateTimeParser time = new DateTimeFormatterBuilder()
+                .appendLiteral('T')
+                .append(timeElementParser())
+                .toParser();
+            ldotp = new DateTimeFormatterBuilder()
+                .append(dateElementParser())
+                .appendOptional(time)
+                .toFormatter();
+        }
+        return ldotp;
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Returns a formatter for a full date as four digit year, two digit month
@@ -1596,5 +1650,5 @@ private static DateTimeFormatter offsetElement() {
         }
         return ze;
     }
-    
+
 }
diff --git a/JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java b/JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java
index 3c52ec18e..8cc05b558 100644
--- a/JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java
+++ b/JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2006 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -265,6 +265,109 @@ public void testConstructor_badconverterObject() throws Throwable {
         }
     }
 
+    public void testConstructor_ObjectString1() throws Throwable {
+        DateTime test = new DateTime("1972-12-03");
+        assertEquals(ISOChronology.getInstance(), test.getChronology());
+        assertEquals(1972, test.getYear());
+        assertEquals(12, test.getMonthOfYear());
+        assertEquals(3, test.getDayOfMonth());
+        assertEquals(0, test.getHourOfDay());
+        assertEquals(0, test.getMinuteOfHour());
+        assertEquals(0, test.getSecondOfMinute());
+        assertEquals(0, test.getMillisOfSecond());
+    }
+
+    public void testConstructor_ObjectString2() throws Throwable {
+        DateTime test = new DateTime("2006-06-03T+14:00");
+        assertEquals(ISOChronology.getInstance(), test.getChronology());
+        assertEquals(2006, test.getYear());
+        assertEquals(6, test.getMonthOfYear());
+        assertEquals(2, test.getDayOfMonth());  // timezone
+        assertEquals(11, test.getHourOfDay());  // test zone is +1, so shift back (14 - 1) hours from midnight
+        assertEquals(0, test.getMinuteOfHour());
+        assertEquals(0, test.getSecondOfMinute());
+        assertEquals(0, test.getMillisOfSecond());
+    }
+
+    public void testConstructor_ObjectString3() throws Throwable {
+        DateTime test = new DateTime("1972-12-03T10:20:30.040");
+        assertEquals(ISOChronology.getInstance(), test.getChronology());
+        assertEquals(1972, test.getYear());
+        assertEquals(12, test.getMonthOfYear());
+        assertEquals(3, test.getDayOfMonth());
+        assertEquals(10, test.getHourOfDay());
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(30, test.getSecondOfMinute());
+        assertEquals(40, test.getMillisOfSecond());
+    }
+
+    public void testConstructor_ObjectString4() throws Throwable {
+        DateTime test = new DateTime("2006-06-03T10:20:30.040+14:00");
+        assertEquals(ISOChronology.getInstance(), test.getChronology());
+        assertEquals(2006, test.getYear());
+        assertEquals(6, test.getMonthOfYear());
+        assertEquals(2, test.getDayOfMonth());  // timezone
+        assertEquals(21, test.getHourOfDay());  // test zone is +1, so shift back (14 - 1) hours from 10am
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(30, test.getSecondOfMinute());
+        assertEquals(40, test.getMillisOfSecond());
+    }
+
+    public void testConstructor_ObjectString5() throws Throwable {
+        DateTime test = new DateTime("T10:20:30.040");
+        assertEquals(ISOChronology.getInstance(), test.getChronology());
+        assertEquals(1970, test.getYear());
+        assertEquals(1, test.getMonthOfYear());
+        assertEquals(1, test.getDayOfMonth());
+        assertEquals(10, test.getHourOfDay());
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(30, test.getSecondOfMinute());
+        assertEquals(40, test.getMillisOfSecond());
+    }
+
+    public void testConstructor_ObjectString6() throws Throwable {
+        DateTime test = new DateTime("T10:20:30.040+14:00");
+        assertEquals(ISOChronology.getInstance(), test.getChronology());
+        assertEquals(1969, test.getYear());  // timezone
+        assertEquals(12, test.getMonthOfYear());  // timezone
+        assertEquals(31, test.getDayOfMonth());  // timezone
+        assertEquals(21, test.getHourOfDay());  // test zone is +1, so shift back (14 - 1) hours from 10am
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(30, test.getSecondOfMinute());
+        assertEquals(40, test.getMillisOfSecond());
+    }
+
+    public void testConstructor_ObjectString7() throws Throwable {
+        DateTime test = new DateTime("10");
+        assertEquals(ISOChronology.getInstance(), test.getChronology());
+        assertEquals(10, test.getYear());
+        assertEquals(1, test.getMonthOfYear());
+        assertEquals(1, test.getDayOfMonth());
+        assertEquals(0, test.getHourOfDay());
+        assertEquals(0, test.getMinuteOfHour());
+        assertEquals(0, test.getSecondOfMinute());
+        assertEquals(0, test.getMillisOfSecond());
+    }
+
+    public void testConstructor_ObjectStringEx1() throws Throwable {
+        try {
+            new DateTime("10:20:30.040");
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expected
+        }
+    }
+
+    public void testConstructor_ObjectStringEx2() throws Throwable {
+        try {
+            new DateTime("10:20:30.040+14:00");
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expected
+        }
+    }
+
+    //-----------------------------------------------------------------------
     /**
      * Test constructor (Object, DateTimeZone)
      */
diff --git a/JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java b/JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java
index 873b8ff4a..5d0ea3511 100644
--- a/JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java
+++ b/JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java
@@ -361,35 +361,44 @@ public void testConstructor_ObjectString4() throws Throwable {
         assertEquals(0, test.getMillisOfSecond());
     }
 
-    public void testConstructor_ObjectString5() throws Throwable {
-        LocalDateTime test = new LocalDateTime("1972-04-06T10:20:30.040+06:00");
-        assertEquals(ISO_UTC, test.getChronology());
-        assertEquals(1972, test.getYear());
-        assertEquals(4, test.getMonthOfYear());
-        assertEquals(6, test.getDayOfMonth());
-        assertEquals(10 + OFFSET_MOSCOW - 6, test.getHourOfDay());
-        assertEquals(20, test.getMinuteOfHour());
-        assertEquals(30, test.getSecondOfMinute());
-        assertEquals(40, test.getMillisOfSecond());
+    public void testConstructor_ObjectStringEx1() throws Throwable {
+        try {
+            new LocalDateTime("1970-04-06T+14:00");
+            fail();
+        } catch (IllegalArgumentException ex) {}
     }
 
-    public void testConstructor_ObjectStringEx1() throws Throwable {
+    public void testConstructor_ObjectStringEx2() throws Throwable {
+        try {
+            new LocalDateTime("1970-04-06T10:20:30.040+14:00");
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testConstructor_ObjectStringEx3() throws Throwable {
         try {
             new LocalDateTime("T10:20:30.040");
             fail();
         } catch (IllegalArgumentException ex) {}
     }
 
-    public void testConstructor_ObjectStringEx2() throws Throwable {
+    public void testConstructor_ObjectStringEx4() throws Throwable {
         try {
             new LocalDateTime("T10:20:30.040+14:00");
             fail();
         } catch (IllegalArgumentException ex) {}
     }
 
-    public void testConstructor_ObjectStringEx3() throws Throwable {
+    public void testConstructor_ObjectStringEx5() throws Throwable {
         try {
-            new LocalDateTime("1970-04-06T+14:00");
+            new LocalDateTime("10:20:30.040");
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testConstructor_ObjectStringEx6() throws Throwable {
+        try {
+            new LocalDateTime("10:20:30.040+14:00");
             fail();
         } catch (IllegalArgumentException ex) {}
     }
diff --git a/JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java b/JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java
index bdc420db9..e5f29c511 100644
--- a/JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java
+++ b/JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java
@@ -23,7 +23,6 @@
 import junit.framework.TestSuite;
 
 import org.joda.time.chrono.BuddhistChronology;
-import org.joda.time.chrono.CopticChronology;
 import org.joda.time.chrono.GregorianChronology;
 import org.joda.time.chrono.ISOChronology;
 
@@ -36,7 +35,6 @@
 
     private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
     private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
-    private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();
     private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
     private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();
     private static final Chronology GREGORIAN_UTC = GregorianChronology.getInstanceUTC();
@@ -259,30 +257,59 @@ public void testConstructor_ObjectString2() throws Throwable {
         assertEquals(6, test.getDayOfMonth());
     }
 
+    public void testConstructor_ObjectString3() throws Throwable {
+        LocalDate test = new LocalDate("1972-02");
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1972, test.getYear());
+        assertEquals(2, test.getMonthOfYear());
+        assertEquals(1, test.getDayOfMonth());
+    }
+
     public void testConstructor_ObjectStringEx1() throws Throwable {
         try {
-            new LocalDate("1970-04-06T10:20:30.040");
+            new LocalDate("1970-04-06T+14:00");
             fail();
         } catch (IllegalArgumentException ex) {}
     }
 
     public void testConstructor_ObjectStringEx2() throws Throwable {
         try {
-            new LocalDate("1970-04-06T10:20:30.040+14:00");
+            new LocalDate("1970-04-06T10:20:30.040");
             fail();
         } catch (IllegalArgumentException ex) {}
     }
 
     public void testConstructor_ObjectStringEx3() throws Throwable {
         try {
-            new LocalDate("T10:20:30.040+14:00");
+            new LocalDate("1970-04-06T10:20:30.040+14:00");
             fail();
         } catch (IllegalArgumentException ex) {}
     }
 
     public void testConstructor_ObjectStringEx4() throws Throwable {
         try {
-            new LocalDate("1970-04-06T+14:00");
+            new LocalDate("T10:20:30.040");
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testConstructor_ObjectStringEx5() throws Throwable {
+        try {
+            new LocalDate("T10:20:30.040+14:00");
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testConstructor_ObjectStringEx6() throws Throwable {
+        try {
+            new LocalDate("10:20:30.040");
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testConstructor_ObjectStringEx7() throws Throwable {
+        try {
+            new LocalDate("10:20:30.040+14:00");
             fail();
         } catch (IllegalArgumentException ex) {}
     }
diff --git a/JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java b/JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java
index c5cb95dbb..045151714 100644
--- a/JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java
+++ b/JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java
@@ -327,37 +327,28 @@ public void testConstructor_ObjectString1() throws Throwable {
     }
 
     public void testConstructor_ObjectString2() throws Throwable {
-        LocalTime test = new LocalTime("10:20:30.040+04:00");
+        LocalTime test = new LocalTime("T10:20:30.040");
         assertEquals(ISO_UTC, test.getChronology());
-        assertEquals(10 + OFFSET_LONDON - 4, test.getHourOfDay());
+        assertEquals(10, test.getHourOfDay());
         assertEquals(20, test.getMinuteOfHour());
         assertEquals(30, test.getSecondOfMinute());
         assertEquals(40, test.getMillisOfSecond());
     }
 
     public void testConstructor_ObjectString3() throws Throwable {
-        LocalTime test = new LocalTime("T10:20:30.040");
+        LocalTime test = new LocalTime("10:20");
         assertEquals(ISO_UTC, test.getChronology());
         assertEquals(10, test.getHourOfDay());
         assertEquals(20, test.getMinuteOfHour());
-        assertEquals(30, test.getSecondOfMinute());
-        assertEquals(40, test.getMillisOfSecond());
+        assertEquals(0, test.getSecondOfMinute());
+        assertEquals(0, test.getMillisOfSecond());
     }
 
     public void testConstructor_ObjectString4() throws Throwable {
-        LocalTime test = new LocalTime("T10:20:30.040+04:00");
-        assertEquals(ISO_UTC, test.getChronology());
-        assertEquals(10 + OFFSET_LONDON - 4, test.getHourOfDay());
-        assertEquals(20, test.getMinuteOfHour());
-        assertEquals(30, test.getSecondOfMinute());
-        assertEquals(40, test.getMillisOfSecond());
-    }
-
-    public void testConstructor_ObjectString5() throws Throwable {
-        LocalTime test = new LocalTime("10:20");
+        LocalTime test = new LocalTime("10");
         assertEquals(ISO_UTC, test.getChronology());
         assertEquals(10, test.getHourOfDay());
-        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(0, test.getMinuteOfHour());
         assertEquals(0, test.getSecondOfMinute());
         assertEquals(0, test.getMillisOfSecond());
     }
@@ -371,14 +362,35 @@ public void testConstructor_ObjectStringEx1() throws Throwable {
 
     public void testConstructor_ObjectStringEx2() throws Throwable {
         try {
-            new LocalTime("1970-04-06T10:20:30.040+14:00");
+            new LocalTime("1970-04-06T+14:00");
             fail();
         } catch (IllegalArgumentException ex) {}
     }
 
     public void testConstructor_ObjectStringEx3() throws Throwable {
         try {
-            new LocalTime("1970-04-06T+14:00");
+            new LocalTime("1970-04-06T10:20:30.040");
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testConstructor_ObjectStringEx4() throws Throwable {
+        try {
+            new LocalTime("1970-04-06T10:20:30.040+14:00");
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testConstructor_ObjectStringEx5() throws Throwable {
+        try {
+            new LocalTime("T10:20:30.040+04:00");
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testConstructor_ObjectStringEx6() throws Throwable {
+        try {
+            new LocalTime("10:20:30.040+04:00");
             fail();
         } catch (IllegalArgumentException ex) {}
     }
diff --git a/JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java b/JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java
index 2b8add1b3..df4f1920a 100644
--- a/JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java
+++ b/JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2006 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -350,6 +350,88 @@ public void testConstructor_todObject() throws Throwable {
         assertEquals(40, test.getMillisOfSecond());
     }
 
+    public void testConstructor_ObjectString1() throws Throwable {
+        TimeOfDay test = new TimeOfDay("10:20:30.040");
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(10, test.getHourOfDay());
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(30, test.getSecondOfMinute());
+        assertEquals(40, test.getMillisOfSecond());
+    }
+
+    public void testConstructor_ObjectString2() throws Throwable {
+        TimeOfDay test = new TimeOfDay("10:20:30.040+04:00");
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(10 + OFFSET - 4, test.getHourOfDay());
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(30, test.getSecondOfMinute());
+        assertEquals(40, test.getMillisOfSecond());
+    }
+
+    public void testConstructor_ObjectString3() throws Throwable {
+        TimeOfDay test = new TimeOfDay("T10:20:30.040");
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(10, test.getHourOfDay());
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(30, test.getSecondOfMinute());
+        assertEquals(40, test.getMillisOfSecond());
+    }
+
+    public void testConstructor_ObjectString4() throws Throwable {
+        TimeOfDay test = new TimeOfDay("T10:20:30.040+04:00");
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(10 + OFFSET - 4, test.getHourOfDay());
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(30, test.getSecondOfMinute());
+        assertEquals(40, test.getMillisOfSecond());
+    }
+
+    public void testConstructor_ObjectString5() throws Throwable {
+        TimeOfDay test = new TimeOfDay("10:20");
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(10, test.getHourOfDay());
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(0, test.getSecondOfMinute());
+        assertEquals(0, test.getMillisOfSecond());
+    }
+
+    public void testConstructor_ObjectString6() throws Throwable {
+        TimeOfDay test = new TimeOfDay("10");
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(10, test.getHourOfDay());
+        assertEquals(0, test.getMinuteOfHour());
+        assertEquals(0, test.getSecondOfMinute());
+        assertEquals(0, test.getMillisOfSecond());
+    }
+
+    public void testConstructor_ObjectStringEx1() throws Throwable {
+        try {
+            new TimeOfDay("1970-04-06");
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testConstructor_ObjectStringEx2() throws Throwable {
+        try {
+            new TimeOfDay("1970-04-06T+14:00");
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testConstructor_ObjectStringEx3() throws Throwable {
+        try {
+            new TimeOfDay("1970-04-06T10:20:30.040");
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testConstructor_ObjectStringEx4() throws Throwable {
+        try {
+            new TimeOfDay("1970-04-06T10:20:30.040+14:00");
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Test constructor (Object, Chronology)
diff --git a/JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java b/JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java
index 2aa760a0b..bd538b24a 100644
--- a/JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java
+++ b/JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2006 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -232,9 +232,6 @@ public void testConstructor_long_nullChronology() throws Throwable {
     }
 
     //-----------------------------------------------------------------------
-    /**
-     * Test constructor (Object)
-     */
     public void testConstructor_Object() throws Throwable {
         Date date = new Date(TEST_TIME1);
         YearMonthDay test = new YearMonthDay(date);
@@ -244,9 +241,6 @@ public void testConstructor_Object() throws Throwable {
         assertEquals(6, test.getDayOfMonth());
     }
 
-    /**
-     * Test constructor (Object=null)
-     */
     public void testConstructor_nullObject() throws Throwable {
         YearMonthDay test = new YearMonthDay((Object) null);
         assertEquals(ISO_UTC, test.getChronology());
@@ -255,6 +249,83 @@ public void testConstructor_nullObject() throws Throwable {
         assertEquals(9, test.getDayOfMonth());
     }
 
+    public void testConstructor_ObjectString1() throws Throwable {
+        YearMonthDay test = new YearMonthDay("1972-12-03");
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1972, test.getYear());
+        assertEquals(12, test.getMonthOfYear());
+        assertEquals(3, test.getDayOfMonth());
+    }
+
+    public void testConstructor_ObjectString2() throws Throwable {
+        YearMonthDay test = new YearMonthDay("1972-12-03T+14:00");
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1972, test.getYear());
+        assertEquals(12, test.getMonthOfYear());
+        assertEquals(2, test.getDayOfMonth());  // timezone
+    }
+
+    public void testConstructor_ObjectString3() throws Throwable {
+        YearMonthDay test = new YearMonthDay("1972-12-03T10:20:30.040");
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1972, test.getYear());
+        assertEquals(12, test.getMonthOfYear());
+        assertEquals(3, test.getDayOfMonth());
+    }
+
+    public void testConstructor_ObjectString4() throws Throwable {
+        YearMonthDay test = new YearMonthDay("1972-12-03T10:20:30.040+14:00");
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1972, test.getYear());
+        assertEquals(12, test.getMonthOfYear());
+        assertEquals(2, test.getDayOfMonth());  // timezone
+    }
+
+    public void testConstructor_ObjectString5() throws Throwable {
+        YearMonthDay test = new YearMonthDay("10");
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(10, test.getYear());
+        assertEquals(1, test.getMonthOfYear());
+        assertEquals(1, test.getDayOfMonth());
+    }
+
+    public void testConstructor_ObjectStringEx1() throws Throwable {
+        try {
+            new YearMonthDay("T10:20:30.040");
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expected
+        }
+    }
+
+    public void testConstructor_ObjectStringEx2() throws Throwable {
+        try {
+            new YearMonthDay("T10:20:30.040+14:00");
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expected
+        }
+    }
+
+    public void testConstructor_ObjectStringEx3() throws Throwable {
+        try {
+            new YearMonthDay("10:20:30.040");
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expected
+        }
+    }
+
+    public void testConstructor_ObjectStringEx4() throws Throwable {
+        try {
+            new YearMonthDay("10:20:30.040+14:00");
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expected
+        }
+    }
+
+    //-----------------------------------------------------------------------
     /**
      * Test constructor (Object, Chronology)
      */
diff --git a/JodaTime/src/test/org/joda/time/format/TestAll.java b/JodaTime/src/test/org/joda/time/format/TestAll.java
index b63f878ed..534e170d5 100644
--- a/JodaTime/src/test/org/joda/time/format/TestAll.java
+++ b/JodaTime/src/test/org/joda/time/format/TestAll.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2006 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -40,6 +40,7 @@ public static Test suite() {
         suite.addTest(TestDateTimeFormatStyle.suite());
         suite.addTest(TestISODateTimeFormat.suite());
         suite.addTest(TestISODateTimeFormat_Fields.suite());
+        suite.addTest(TestISODateTimeFormatParsing.suite());
         suite.addTest(TestDateTimeFormatterBuilder.suite());
         
         suite.addTest(TestPeriodFormatter.suite());
diff --git a/JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java b/JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java
new file mode 100644
index 000000000..a222ce125
--- /dev/null
+++ b/JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java
@@ -0,0 +1,338 @@
+/*
+ *  Copyright 2001-2006 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.format;
+
+import java.util.Locale;
+import java.util.TimeZone;
+
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+import org.joda.time.DateTime;
+import org.joda.time.DateTimeConstants;
+import org.joda.time.DateTimeUtils;
+import org.joda.time.DateTimeZone;
+import org.joda.time.Period;
+import org.joda.time.PeriodType;
+
+/**
+ * This class is a Junit unit test for ISODateTimeFormat parsing.
+ *
+ * @author Stephen Colebourne
+ */
+public class TestISODateTimeFormatParsing extends TestCase {
+
+    private DateTimeZone originalDateTimeZone = null;
+    private TimeZone originalTimeZone = null;
+    private Locale originalLocale = null;
+
+    public static void main(String[] args) {
+        junit.textui.TestRunner.run(suite());
+    }
+
+    public static TestSuite suite() {
+        return new TestSuite(TestISODateTimeFormatParsing.class);
+    }
+
+    public TestISODateTimeFormatParsing(String name) {
+        super(name);
+    }
+
+    protected void setUp() throws Exception {
+        originalDateTimeZone = DateTimeZone.getDefault();
+        originalTimeZone = TimeZone.getDefault();
+        originalLocale = Locale.getDefault();
+        DateTimeZone.setDefault(DateTimeZone.forID("Europe/London"));
+        TimeZone.setDefault(TimeZone.getTimeZone("Europe/London"));
+        Locale.setDefault(Locale.UK);
+    }
+
+    protected void tearDown() throws Exception {
+        DateTimeZone.setDefault(originalDateTimeZone);
+        TimeZone.setDefault(originalTimeZone);
+        Locale.setDefault(originalLocale);
+        originalDateTimeZone = null;
+        originalTimeZone = null;
+        originalLocale = null;
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_dateParser() {
+        DateTimeFormatter parser = ISODateTimeFormat.dateParser();
+        assertParse(parser, true, "2006-06-09");
+        assertParse(parser, true, "2006-W27-3");
+        assertParse(parser, true, "2006-123");
+        assertParse(parser, true, "2006-06-09T+02:00");
+        assertParse(parser, true, "2006-W27-3T+02:00");
+        assertParse(parser, true, "2006-123T+02:00");
+        
+        assertParse(parser, false, "2006-06-09T10:20:30.040");
+        assertParse(parser, false, "2006-W27-3T10:20:30.040");
+        assertParse(parser, false, "2006-123T10:20:30.040");
+        assertParse(parser, false, "2006-06-09T10:20:30.040+02:00");
+        assertParse(parser, false, "2006-W27-3T10:20:30.040+02:00");
+        assertParse(parser, false, "2006-123T10:20:30.040+02:00");
+        
+        assertParse(parser, false, "T10:20:30.040");
+        assertParse(parser, false, "T10.5");
+        assertParse(parser, false, "T10:20:30.040+02:00");
+        assertParse(parser, false, "T10.5+02:00");
+        
+        assertParse(parser, false, "10:20:30.040");
+        assertParse(parser, false, "10.5");
+        assertParse(parser, false, "10:20:30.040+02:00");
+        assertParse(parser, false, "10.5+02:00");
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_localDateParser() {
+        DateTimeFormatter parser = ISODateTimeFormat.localDateParser();
+        assertParse(parser, true, "2006-06-09");
+        assertParse(parser, true, "2006-W27-3");
+        assertParse(parser, true, "2006-123");
+        assertParse(parser, false, "2006-06-09T+02:00");
+        assertParse(parser, false, "2006-W27-3T+02:00");
+        assertParse(parser, false, "2006-123T+02:00");
+        
+        assertParse(parser, false, "2006-06-09T10:20:30.040");
+        assertParse(parser, false, "2006-W27-3T10:20:30.040");
+        assertParse(parser, false, "2006-123T10:20:30.040");
+        assertParse(parser, false, "2006-06-09T10:20:30.040+02:00");
+        assertParse(parser, false, "2006-W27-3T10:20:30.040+02:00");
+        assertParse(parser, false, "2006-123T10:20:30.040+02:00");
+        
+        assertParse(parser, false, "T10:20:30.040");
+        assertParse(parser, false, "T10.5");
+        assertParse(parser, false, "T10:20:30.040+02:00");
+        assertParse(parser, false, "T10.5+02:00");
+        
+        assertParse(parser, false, "10:20:30.040");
+        assertParse(parser, false, "10.5");
+        assertParse(parser, false, "10:20:30.040+02:00");
+        assertParse(parser, false, "10.5+02:00");
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_dateElementParser() {
+        DateTimeFormatter parser = ISODateTimeFormat.dateElementParser();
+        assertParse(parser, true, "2006-06-09");
+        assertParse(parser, true, "2006-W27-3");
+        assertParse(parser, true, "2006-123");
+        assertParse(parser, false, "2006-06-09T+02:00");
+        assertParse(parser, false, "2006-W27-3T+02:00");
+        assertParse(parser, false, "2006-123T+02:00");
+        
+        assertParse(parser, false, "2006-06-09T10:20:30.040");
+        assertParse(parser, false, "2006-W27-3T10:20:30.040");
+        assertParse(parser, false, "2006-123T10:20:30.040");
+        assertParse(parser, false, "2006-06-09T10:20:30.040+02:00");
+        assertParse(parser, false, "2006-W27-3T10:20:30.040+02:00");
+        assertParse(parser, false, "2006-123T10:20:30.040+02:00");
+        
+        assertParse(parser, false, "T10:20:30.040");
+        assertParse(parser, false, "T10.5");
+        assertParse(parser, false, "T10:20:30.040+02:00");
+        assertParse(parser, false, "T10.5+02:00");
+        
+        assertParse(parser, false, "10:20:30.040");
+        assertParse(parser, false, "10.5");
+        assertParse(parser, false, "10:20:30.040+02:00");
+        assertParse(parser, false, "10.5+02:00");
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_timeParser() {
+        DateTimeFormatter parser = ISODateTimeFormat.timeParser();
+        assertParse(parser, false, "2006-06-09");
+        assertParse(parser, false, "2006-W27-3");
+        assertParse(parser, false, "2006-123");
+        assertParse(parser, false, "2006-06-09T+02:00");
+        assertParse(parser, false, "2006-W27-3T+02:00");
+        assertParse(parser, false, "2006-123T+02:00");
+        
+        assertParse(parser, false, "2006-06-09T10:20:30.040");
+        assertParse(parser, false, "2006-W27-3T10:20:30.040");
+        assertParse(parser, false, "2006-123T10:20:30.040");
+        assertParse(parser, false, "2006-06-09T10:20:30.040+02:00");
+        assertParse(parser, false, "2006-W27-3T10:20:30.040+02:00");
+        assertParse(parser, false, "2006-123T10:20:30.040+02:00");
+        
+        assertParse(parser, true, "T10:20:30.040");
+        assertParse(parser, true, "T10.5");
+        assertParse(parser, true, "T10:20:30.040+02:00");
+        assertParse(parser, true, "T10.5+02:00");
+        
+        assertParse(parser, true, "10:20:30.040");
+        assertParse(parser, true, "10.5");
+        assertParse(parser, true, "10:20:30.040+02:00");
+        assertParse(parser, true, "10.5+02:00");
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_localTimeParser() {
+        DateTimeFormatter parser = ISODateTimeFormat.localTimeParser();
+        assertParse(parser, false, "2006-06-09");
+        assertParse(parser, false, "2006-W27-3");
+        assertParse(parser, false, "2006-123");
+        assertParse(parser, false, "2006-06-09T+02:00");
+        assertParse(parser, false, "2006-W27-3T+02:00");
+        assertParse(parser, false, "2006-123T+02:00");
+        
+        assertParse(parser, false, "2006-06-09T10:20:30.040");
+        assertParse(parser, false, "2006-W27-3T10:20:30.040");
+        assertParse(parser, false, "2006-123T10:20:30.040");
+        assertParse(parser, false, "2006-06-09T10:20:30.040+02:00");
+        assertParse(parser, false, "2006-W27-3T10:20:30.040+02:00");
+        assertParse(parser, false, "2006-123T10:20:30.040+02:00");
+        
+        assertParse(parser, true, "T10:20:30.040");
+        assertParse(parser, true, "T10.5");
+        assertParse(parser, false, "T10:20:30.040+02:00");
+        assertParse(parser, false, "T10.5+02:00");
+        
+        assertParse(parser, true, "10:20:30.040");
+        assertParse(parser, true, "10.5");
+        assertParse(parser, false, "10:20:30.040+02:00");
+        assertParse(parser, false, "10.5+02:00");
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_timeElementParser() {
+        DateTimeFormatter parser = ISODateTimeFormat.timeElementParser();
+        assertParse(parser, false, "2006-06-09");
+        assertParse(parser, false, "2006-W27-3");
+        assertParse(parser, false, "2006-123");
+        assertParse(parser, false, "2006-06-09T+02:00");
+        assertParse(parser, false, "2006-W27-3T+02:00");
+        assertParse(parser, false, "2006-123T+02:00");
+        
+        assertParse(parser, false, "2006-06-09T10:20:30.040");
+        assertParse(parser, false, "2006-W27-3T10:20:30.040");
+        assertParse(parser, false, "2006-123T10:20:30.040");
+        assertParse(parser, false, "2006-06-09T10:20:30.040+02:00");
+        assertParse(parser, false, "2006-W27-3T10:20:30.040+02:00");
+        assertParse(parser, false, "2006-123T10:20:30.040+02:00");
+        
+        assertParse(parser, false, "T10:20:30.040");
+        assertParse(parser, false, "T10.5");
+        assertParse(parser, false, "T10:20:30.040+02:00");
+        assertParse(parser, false, "T10.5+02:00");
+        
+        assertParse(parser, true, "10:20:30.040");
+        assertParse(parser, true, "10.5");
+        assertParse(parser, false, "10:20:30.040+02:00");
+        assertParse(parser, false, "10.5+02:00");
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_dateTimeParser() {
+        DateTimeFormatter parser = ISODateTimeFormat.dateTimeParser();
+        assertParse(parser, true, "2006-06-09");
+        assertParse(parser, true, "2006-W27-3");
+        assertParse(parser, true, "2006-123");
+        assertParse(parser, true, "2006-06-09T+02:00");
+        assertParse(parser, true, "2006-W27-3T+02:00");
+        assertParse(parser, true, "2006-123T+02:00");
+        
+        assertParse(parser, true, "2006-06-09T10:20:30.040");
+        assertParse(parser, true, "2006-W27-3T10:20:30.040");
+        assertParse(parser, true, "2006-123T10:20:30.040");
+        assertParse(parser, true, "2006-06-09T10:20:30.040+02:00");
+        assertParse(parser, true, "2006-W27-3T10:20:30.040+02:00");
+        assertParse(parser, true, "2006-123T10:20:30.040+02:00");
+        
+        assertParse(parser, true, "T10:20:30.040");
+        assertParse(parser, true, "T10.5");
+        assertParse(parser, true, "T10:20:30.040+02:00");
+        assertParse(parser, true, "T10.5+02:00");
+        
+        assertParse(parser, false, "10:20:30.040");
+        assertParse(parser, false, "10.5");
+        assertParse(parser, false, "10:20:30.040+02:00");
+        assertParse(parser, false, "10.5+02:00");
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_dateOptionalTimeParser() {
+        DateTimeFormatter parser = ISODateTimeFormat.dateOptionalTimeParser();
+        assertParse(parser, true, "2006-06-09");
+        assertParse(parser, true, "2006-W27-3");
+        assertParse(parser, true, "2006-123");
+        assertParse(parser, true, "2006-06-09T+02:00");
+        assertParse(parser, true, "2006-W27-3T+02:00");
+        assertParse(parser, true, "2006-123T+02:00");
+        
+        assertParse(parser, true, "2006-06-09T10:20:30.040");
+        assertParse(parser, true, "2006-W27-3T10:20:30.040");
+        assertParse(parser, true, "2006-123T10:20:30.040");
+        assertParse(parser, true, "2006-06-09T10:20:30.040+02:00");
+        assertParse(parser, true, "2006-W27-3T10:20:30.040+02:00");
+        assertParse(parser, true, "2006-123T10:20:30.040+02:00");
+        
+        assertParse(parser, false, "T10:20:30.040");
+        assertParse(parser, false, "T10.5");
+        assertParse(parser, false, "T10:20:30.040+02:00");
+        assertParse(parser, false, "T10.5+02:00");
+        
+        assertParse(parser, false, "10:20:30.040");
+        assertParse(parser, false, "10.5");
+        assertParse(parser, false, "10:20:30.040+02:00");
+        assertParse(parser, false, "10.5+02:00");
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_localDateOptionalTimeParser() {
+        DateTimeFormatter parser = ISODateTimeFormat.localDateOptionalTimeParser();
+        assertParse(parser, true, "2006-06-09");
+        assertParse(parser, true, "2006-W27-3");
+        assertParse(parser, true, "2006-123");
+        assertParse(parser, false, "2006-06-09T+02:00");
+        assertParse(parser, false, "2006-W27-3T+02:00");
+        assertParse(parser, false, "2006-123T+02:00");
+        
+        assertParse(parser, true, "2006-06-09T10:20:30.040");
+        assertParse(parser, true, "2006-W27-3T10:20:30.040");
+        assertParse(parser, true, "2006-123T10:20:30.040");
+        assertParse(parser, false, "2006-06-09T10:20:30.040+02:00");
+        assertParse(parser, false, "2006-W27-3T10:20:30.040+02:00");
+        assertParse(parser, false, "2006-123T10:20:30.040+02:00");
+        
+        assertParse(parser, false, "T10:20:30.040");
+        assertParse(parser, false, "T10.5");
+        assertParse(parser, false, "T10:20:30.040+02:00");
+        assertParse(parser, false, "T10.5+02:00");
+        
+        assertParse(parser, false, "10:20:30.040");
+        assertParse(parser, false, "10.5");
+        assertParse(parser, false, "10:20:30.040+02:00");
+        assertParse(parser, false, "10.5+02:00");
+    }
+
+    //-----------------------------------------------------------------------
+    private void assertParse(DateTimeFormatter parser, boolean expected, String str) {
+        if (expected) {
+            parser.parseMillis(str);
+        } else {
+            try {
+                parser.parseMillis(str);
+                fail();
+            } catch (IllegalArgumentException ex) {
+                // expected
+            }
+        }
+    }
+
+}

From e3158c9e3b0837d191b1389443b08fb2f13a49d2 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 17 Jun 2006 12:47:10 +0000
Subject: [PATCH 095/115] Update TODO removing Local* classes

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1092 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/ToDo.txt | 7 ++-----
 1 file changed, 2 insertions(+), 5 deletions(-)

diff --git a/JodaTime/ToDo.txt b/JodaTime/ToDo.txt
index 21ef1c57b..e02872a50 100644
--- a/JodaTime/ToDo.txt
+++ b/JodaTime/ToDo.txt
@@ -37,12 +37,9 @@ Ideas
     More instant variations
     May be covered by Partial class now
 
-- LocalDateTime/LocalDate/LocalTime?
-    Possible alternative implementation of contiguous partials
-
 - DurationProperty on DateTime, Period and related?
-    Possibly a clear way to do duration stuff, however adding plusDays() type
-    methods might be simpler.
+    Possibly a clear way to do duration stuff, however plusDays() has
+    probably dealt with this
 
 - Factories for DateTime classes?
     Perhaps, but the constructors cover this now.

From 2bb040b3aed0f94a92f67236d8ee4955279ddc83 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Thu, 29 Jun 2006 22:32:32 +0000
Subject: [PATCH 096/115] Fix Javadoc

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1093 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/Partial.java | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/Partial.java b/JodaTime/src/java/org/joda/time/Partial.java
index 038735174..3552df7da 100644
--- a/JodaTime/src/java/org/joda/time/Partial.java
+++ b/JodaTime/src/java/org/joda/time/Partial.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2006 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -780,9 +780,9 @@ public String toString(String pattern, Locale locale) {
 
     //-----------------------------------------------------------------------
     /**
-     * The property class for <code>YearMonthDay</code>.
+     * The property class for <code>Partial</code>.
      * <p>
-     * This class binds a <code>YearMonthDay</code> to a <code>DateTimeField</code>.
+     * This class binds a <code>Partial</code> to a <code>DateTimeField</code>.
      * 
      * @author Stephen Colebourne
      * @since 1.1

From ae732ef3beb1d6837f246c1b46544d93c70a4bd2 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Thu, 29 Jun 2006 22:44:52 +0000
Subject: [PATCH 097/115] Switch documentation to refer to Local classes
 instead of YMD/TOD

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1094 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/java/org/joda/time/DateMidnight.java  |  4 +-
 .../src/java/org/joda/time/DateTimeUtils.java | 15 +++--
 JodaTime/src/java/org/joda/time/Period.java   | 28 +++++-----
 .../java/org/joda/time/base/BasePeriod.java   | 11 ++--
 JodaTime/src/java/org/joda/time/package.html  | 41 ++++++--------
 JodaTime/xdocs/faq.xml                        |  5 +-
 JodaTime/xdocs/index.xml                      |  2 +-
 JodaTime/xdocs/installation.xml               |  6 +-
 JodaTime/xdocs/key_partial.xml                | 55 +++++++++++--------
 JodaTime/xdocs/quickstart.xml                 |  6 +-
 JodaTime/xdocs/upgradeto130.xml               | 21 +++++++
 11 files changed, 106 insertions(+), 88 deletions(-)
 create mode 100644 JodaTime/xdocs/upgradeto130.xml

diff --git a/JodaTime/src/java/org/joda/time/DateMidnight.java b/JodaTime/src/java/org/joda/time/DateMidnight.java
index d134b978e..246cc20ec 100644
--- a/JodaTime/src/java/org/joda/time/DateMidnight.java
+++ b/JodaTime/src/java/org/joda/time/DateMidnight.java
@@ -35,7 +35,7 @@
  * <p>
  * This class does not represent a day, but the millisecond instant at midnight.
  * If you need a class that represents the whole day, then an {@link Interval} or
- * a {@link YearMonthDay} may be more suitable.
+ * a {@link LocalDate} may be more suitable.
  * <p>
  * This class uses a Chronology internally. The Chronology determines how the
  * millisecond instant value is converted into the date time fields.
@@ -345,7 +345,7 @@ public DateMidnight withZoneRetainFields(DateTimeZone newZone) {
      * Gets a copy of this datetime with the partial set of fields replacing those
      * from this instance.
      * <p>
-     * For example, if the partial is a <code>YearMonthDay</code> then the date fields
+     * For example, if the partial is a <code>LocalDate</code> then the date fields
      * would be changed in the returned instance.
      * If the partial is null, then <code>this</code> is returned.
      *
diff --git a/JodaTime/src/java/org/joda/time/DateTimeUtils.java b/JodaTime/src/java/org/joda/time/DateTimeUtils.java
index 8a84d83bd..74d4f5570 100644
--- a/JodaTime/src/java/org/joda/time/DateTimeUtils.java
+++ b/JodaTime/src/java/org/joda/time/DateTimeUtils.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2006 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -291,14 +291,13 @@ public static final long getDurationMillis(ReadableDuration duration) {
      * <p>
      * A partial is contiguous if one field starts where another ends.
      * <p>
-     * For example YearMonthDay is contiguous because DayOfMonth has the
-     * same range (Month) as the unit of the next field (MonthOfYear), and
-     * MonthOfYear has the same range (Year) as the unit of the next field
-     * (Year).
+     * For example <code>LocalDate</code> is contiguous because DayOfMonth has
+     * the same range (Month) as the unit of the next field (MonthOfYear), and
+     * MonthOfYear has the same range (Year) as the unit of the next field (Year).
      * <p>
-     * Similarly, TimeOfDay is contiguous, as it consists of MillisOfSecond,
-     * SecondOfMinute, MinuteOfHour and HourOfDay (note how the names of
-     * each field 'join up').
+     * Similarly, <code>LocalTime</code> is contiguous, as it consists of
+     * MillisOfSecond, SecondOfMinute, MinuteOfHour and HourOfDay (note how
+     * the names of each field 'join up').
      * <p>
      * However, a Year/HourOfDay partial is not contiguous because the range
      * field Day is not equal to the next field Year.
diff --git a/JodaTime/src/java/org/joda/time/Period.java b/JodaTime/src/java/org/joda/time/Period.java
index d71211d4c..e973641b7 100644
--- a/JodaTime/src/java/org/joda/time/Period.java
+++ b/JodaTime/src/java/org/joda/time/Period.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2006 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -150,8 +150,8 @@ public static Period millis(int millis) {
      * Creates a period from two partially specified times, calculating
      * by field difference.
      * <p>
-     * The two partials must contain the same fields, thus you can
-     * specify two YearMonthDay objects, or two TimeOfDay objects,
+     * The two partials must contain the same fields, thus you can specify
+     * two <code>LocalDate</code> objects, or two <code>LocalTime</code> objects,
      * but not one of each. Also, the partial may not contain overlapping
      * fields, such as dayOfWeek and dayOfMonth.
      * <p>
@@ -434,15 +434,14 @@ public Period(ReadableInstant startInstant, ReadableInstant endInstant, PeriodTy
     /**
      * Creates a period from two partially specified times.
      * <p>
-     * The two partials must contain the same fields, thus you can
-     * specify two YearMonthDay objects, or two TimeOfDay objects,
+     * The two partials must contain the same fields, thus you can specify
+     * two <code>LocalDate</code> objects, or two <code>LocalTime</code> objects,
      * but not one of each.
-     * As these are Partial objects, time zones have no effect on
-     * the result.
+     * As these are Partial objects, time zones have no effect on the result.
      * <p>
      * The two partials must also both be contiguous - see
-     * {@link DateTimeUtils#isContiguous(ReadablePartial)} for a
-     * definition. Both YearMonthDay and TimeOfDay are contiguous.
+     * {@link DateTimeUtils#isContiguous(ReadablePartial)} for a definition.
+     * Both <code>LocalDate</code> and <code>LocalTime</code> are contiguous.
      * <p>
      * An alternative way of constructing a Period from two Partials
      * is {@link #fieldDifference(ReadablePartial, ReadablePartial)}.
@@ -460,15 +459,14 @@ public Period(ReadablePartial start, ReadablePartial end) {
     /**
      * Creates a period from two partially specified times.
      * <p>
-     * The two partials must contain the same fields, thus you can
-     * specify two YearMonthDay objects, or two TimeOfDay objects,
+     * The two partials must contain the same fields, thus you can specify
+     * two <code>LocalDate</code> objects, or two <code>LocalTime</code> objects,
      * but not one of each.
-     * As these are Partial objects, time zones have no effect on
-     * the result.
+     * As these are Partial objects, time zones have no effect on the result.
      * <p>
      * The two partials must also both be contiguous - see
-     * {@link DateTimeUtils#isContiguous(ReadablePartial)} for a
-     * definition. Both YearMonthDay and TimeOfDay are contiguous.
+     * {@link DateTimeUtils#isContiguous(ReadablePartial)} for a definition.
+     * Both <code>LocalDate</code> and <code>LocalTime</code> are contiguous.
      * <p>
      * An alternative way of constructing a Period from two Partials
      * is {@link #fieldDifference(ReadablePartial, ReadablePartial)}.
diff --git a/JodaTime/src/java/org/joda/time/base/BasePeriod.java b/JodaTime/src/java/org/joda/time/base/BasePeriod.java
index 84838e3f7..67cdf161e 100644
--- a/JodaTime/src/java/org/joda/time/base/BasePeriod.java
+++ b/JodaTime/src/java/org/joda/time/base/BasePeriod.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2006 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -128,14 +128,13 @@ protected BasePeriod(ReadableInstant startInstant, ReadableInstant endInstant, P
      * Creates a period from the given duration and end point.
      * <p>
      * The two partials must contain the same fields, thus you can
-     * specify two YearMonthDay objects, or two TimeOfDay objects,
-     * but not one of each.
-     * As these are Partial objects, time zones have no effect on
-     * the result.
+     * specify two <code>LocalDate</code> objects, or two <code>LocalTime</code>
+     * objects, but not one of each.
+     * As these are Partial objects, time zones have no effect on the result.
      * <p>
      * The two partials must also both be contiguous - see
      * {@link DateTimeUtils#isContiguous(ReadablePartial)} for a
-     * definition. Both YearMonthDay and TimeOfDay are contiguous.
+     * definition. Both <code>LocalDate</code> and <code>LocalTime</code> are contiguous.
      *
      * @param start  the start of the period, must not be null
      * @param end  the end of the period, must not be null
diff --git a/JodaTime/src/java/org/joda/time/package.html b/JodaTime/src/java/org/joda/time/package.html
index 86cd2a270..da3eed1bf 100644
--- a/JodaTime/src/java/org/joda/time/package.html
+++ b/JodaTime/src/java/org/joda/time/package.html
@@ -4,7 +4,7 @@
 <title>org.joda.time package</title>
 <!--
 
-    Copyright 2001-2005 Stephen Colebourne
+    Copyright 2001-2006 Stephen Colebourne
   
     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
@@ -147,30 +147,21 @@ <h4>Chronologies and Fields</h4>
 <h4>Partials</h4>
 <p>
 Partials are like instants, except they do not completely specify a point in
-time. The main interface is <code>ReadablePartial</code>, and implementations
-include <code>TimeOfDay</code> (contains hour, minute, second, and millis) and
-<code>YearMonthDay</code>.
-</p>
-<p>
-The API of a partial is remarkably similar to an instant, however there are
-internal differences. <code>DateTime</code> and <code>Instant</code> store a
-long millisecond value internally and calculate field values on demand. The
-partial classes work the other way around, storing field values internally
-and providing a means to resolve to a millisecond value on demand.
-</p>
-<p>
-Since a partial does not represent a specific point in time, it must be
-<i>resolved</i> to create a full instant. For example, a <code>TimeOfDay</code>
-might represent 12:30. To convert to a <code>DateTime</code> you must specify
-the missing date fields via one of the <code>toDateTime</code> methods.
-For example,
-<pre>
-    <code>new TimeOfDay("12:30").toDateTime(new DateTime("2004-06-07T06:00"));</code>
-</pre>
-equals
-<pre>
-    <code>new DateTime("2004-06-07T12:30");</code>
-</pre>
+time. The main interface is <code>ReadablePartial</code>.
+</p>
+<p>
+The main implementations are:
+<ul>
+<li><code>LocalTime</code> - A class storing a local time without a date</li>
+<li><code>LocalDate</code> - A class storing a local date without a time</li>
+<li><code>LocalDateTime</code> - A class storing a local datetime</li>
+<li><code>Partial</code> - A class storing any combination of datetime fields, such as dayOfMonth and dayOfWeek</li>
+</ul>
+For consistency, the API of each partial class is similar to that of an instant class.
+</p>
+<p>
+All partial implementations represent a local time, in other words without a time zone.
+Thus, to convert a partial to an instant (which does contain a time zone) requires adding a zone.
 </p>
 
 <h4>Formatting</h4>
diff --git a/JodaTime/xdocs/faq.xml b/JodaTime/xdocs/faq.xml
index 511569948..78c789bb1 100644
--- a/JodaTime/xdocs/faq.xml
+++ b/JodaTime/xdocs/faq.xml
@@ -107,9 +107,10 @@ Querying a field, such as year or hour, will calculate the value from the millis
 </p>
 <p>
 A secondary time interface is  <a href="apidocs/org/joda/time/ReadablePartial.html">ReadablePartial</a>.
-All classes that implement this interface, such as <code>YearMonthDay</code> and <code>TimeOfDay</code>,
+Classes implementing this interface store data in two ways. The 'local' classes, such as <code>LocalDate</code>
+and <code>LocalTime</code> store the number of milliseconds from 1970 without a time zone.
+All other implementations, such as <code>YearMonthDay</code> and <code>TimeOfDay</code>,
 store time as a one int value for each field.
-Thus, there is no additional calculation to return the field values.
 </p>
 </subsection>
 
diff --git a/JodaTime/xdocs/index.xml b/JodaTime/xdocs/index.xml
index 431cb9522..1fae8d5d8 100644
--- a/JodaTime/xdocs/index.xml
+++ b/JodaTime/xdocs/index.xml
@@ -31,7 +31,7 @@ public boolean isJoinedInLastThreeMonths(<b>DateTime</b> datetimeJoined) {
   <b>Interval</b> last3Months = new Interval(Period.months(3), new DateTime());
   return last3Months.contains(datetimeJoined);
 }
-public String getBirthMonthText(<b>YearMonthDay</b> dateOfBirth) {
+public String getBirthMonthText(<b>LocalDate</b> dateOfBirth) {
   return dateOfBirth.monthOfYear().getAsText(Locale.ENGLISH);
 }
 </source>
diff --git a/JodaTime/xdocs/installation.xml b/JodaTime/xdocs/installation.xml
index 74f178092..4bf7bda93 100644
--- a/JodaTime/xdocs/installation.xml
+++ b/JodaTime/xdocs/installation.xml
@@ -12,17 +12,17 @@
 <p>
 To use Joda-Time you need to
 <a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=104212">download the latest version</a>.
-The download will contain the joda-time-1.2.1.jar.
+The download will contain the joda-time-1.3.jar.
 Once you add this to your classpath you will be able to use Joda-Time.
 </p>
 <p>
-The binary download also includes joda-time-1.2.1-src-ide.zip, which is a zip file
+The binary download also includes joda-time-1.3-src-ide.zip, which is a zip file
 of the source code suitable for linking to the jar file in IDEs such as Eclipse.
 </p>
 <p>
 The release notes for upgraders can be found here:
 <ul>
-<li><a href="upgradeto121.html">Version 1.2 to Version 1.2.1</a></li>
+<li><a href="upgradeto130.html">Version 1.2 to Version 1.3</a></li>
 <li><a href="upgradeto120.html">Version 1.1 to Version 1.2</a></li>
 <li><a href="upgradeto110.html">Version 1.0 to Version 1.1</a></li>
 <li><a href="upgradeto100.html">Version 0.99 to Version 1.0</a></li>
diff --git a/JodaTime/xdocs/key_partial.xml b/JodaTime/xdocs/key_partial.xml
index f617db8d7..620f43406 100644
--- a/JodaTime/xdocs/key_partial.xml
+++ b/JodaTime/xdocs/key_partial.xml
@@ -13,22 +13,25 @@
 
 <p>
 A <i>partial</i> in Joda-Time is a partial date and time representation.
-The two supplied implementations are <code>TimeofDay</code> and <code>YearMonthDay</code>.
-These classes do not store the date or time using a <code>long</code> millisecond instant,
-but instead store individual <code>int</code> field values.
-They also do not store the time zone, and thus represent local times.
+All implementations represent local dates and times, and do not reference a time zone.
+As such, they only <i>partially</i> represent a date or time in the datetime continuum.
 </p>
 <p>
-These classes were created as it is not possible to directly interoperate between a local
-time and an <a href="key_instant.html">instant</a>.
-A partial does not fully specify a single point in the datetime continuum.
-Instead, a partial describes various datetime fields.
-For example, a <code>TimeofDay</code> occurs many times on the datetime continuum - once per day.
+The main implementations changed in version 1.3.
+This was to address implementation issues with the original design.
+The previous classes - <code>TimeofDay</code> and <code>YearMonthDay</code> - are now effectively deprecated.
+The new implementations are <code>LocalDate</code>, <code>LocalTime</code> and <code>LocalDateTime</code>.
+</p>
+<p>
+It is not possible to directly interoperate between a partial and an <a href="key_instant.html">instant</a>.
+A partial does not fully specify a single point in the datetime continuum, but instead may match
+multiple points. For example, a <code>LocalTime</code> occurs one per day on the datetime continuum.
 </p>
 <p>
 A partial can be converted to a full instant by specifying the missing values.
-If just the time zone is specified then the missing values are filled in from the current date and time.
-Alternatively, an instant may be specified, and the result is the merger of the fields from the instant and the partial.
+At a minimum the time zone must be specified. It may be necessary to specify other missing fields.
+For example, to convert a <code>LocalDate</code> to a <code>DateTime</code> requires
+filling in the time fields and the time zone.
 </p>
 <p>
 In terms of datetime maths, you could write:
@@ -39,11 +42,11 @@ In terms of datetime maths, you could write:
 
 <subsection name="Date representations">
 <p>
-Two classes represent a date in Joda-Time - <code>DateMidnight</code> and <code>YearMonthDay</code>.
+Two classes represent a date in Joda-Time - <code>DateMidnight</code> and <code>LocalDate</code>.
 These have different meanings.
 <code>DateMidnight</code> is a fully specified instant, with a time zone.
 It is defined as the milliseond instant at exactly mignight (00:00) at the start of a day.
-<code>YearMonthDay</code> defines a day using the year, monthOfYear and dayOfMonth fields and no time zone.
+<code>LocalDate</code> defines a day using the year, monthOfYear and dayOfMonth fields and no time zone.
 It can be thought of as a local date that covers the whole of the day from 00:00 to 23:59.
 </p>
 </subsection>
@@ -54,23 +57,29 @@ It can be thought of as a local date that covers the whole of the day from 00:00
 <p>
 Within Joda-Time a partial is represented by the
 <a href="apidocs/org/joda/time/ReadablePartial.html">ReadablePartial</a> interface.
-There are two implementations of the interface provided:
+There are six implementations of the interface provided:
 <ul>
-<li><a href="apidocs/org/joda/time/TimeOfDay.html">TimeOfDay</a> -
-An immutable implementation that stores the hour, minute, second and millisecond fields.</li>
-<li><a href="apidocs/org/joda/time/YearMonthDay.html">YearMonthDay</a> -
-An immutable implementation that stores the year, monthOfYear and dayOfMonth fields.</li>
+<li><a href="apidocs/org/joda/time/LocalDate.html">LocalDate</a> -
+An immutable implementation that represents a date without a time or time zone.</li>
+<li><a href="apidocs/org/joda/time/LocalTime.html">LocalTime</a> -
+An immutable implementation that represents a time without a date or time zone.</li>
+<li><a href="apidocs/org/joda/time/LocalDateTime.html">LocalDateTime</a> -
+An immutable implementation that represents a datetime without a time zone.</li>
 <li><a href="apidocs/org/joda/time/Partial.html">Partial</a> -
 An immutable implementation that can store any combination of datetime fields.
 For example, using this class you could create a YearMonth or DayOfWeekDayOfMonth partial.</li>
+<li><a href="apidocs/org/joda/time/YearMonthDay.html">YearMonthDay</a> -
+Effectively deprecated - only supports the year, monthOfYear and dayOfMonth fields.</li>
+<li><a href="apidocs/org/joda/time/TimeOfDay.html">TimeOfDay</a> -
+Effectively deprecated - only supports the hour, minute, second and millisecond fields.</li>
 </ul>
 </p>
 <p>
 The code can be used in various ways:
 <source>
 // setup objects
-YearMonthDay date = new YearMonthDay(2004, 12, 25);
-TimeOfDay time = new TimeOfDay(12, 20);
+LocalDate date = new LocalDate(2004, 12, 25);
+LocalTime time = new LocalTime(12, 20);
 
 int year = date.getYear();  // returns 2004
 int hour = time.getHour();  // returns 12
@@ -78,15 +87,15 @@ String monthStr = date.month().getAsText();  // returns 'December'
 </source>
 Conversion to and from instants is easy:
 <source>
-YearMonthDay date = new YearMonthDay(2004, 12, 25);
-TimeOfDay time = new TimeOfDay(12, 20);
+LocalDate date = new LocalDate(2004, 12, 25);
+LocalTime time = new LocalTime(12, 20);
 
 // merge, resulting in 2004-25-12T12:20 (default time zone)
 DateTime dt = date.toDateTime(time);
 
 // extract the date fields from someDT
 DateTime someDT = ...
-YearMonthDay date = new YearMonthDay(someDT);
+LocalDate date = new LocalDate(someDT);
 </source>
 </p>
 <p>
diff --git a/JodaTime/xdocs/quickstart.xml b/JodaTime/xdocs/quickstart.xml
index ebcf3bb1a..e00890c76 100644
--- a/JodaTime/xdocs/quickstart.xml
+++ b/JodaTime/xdocs/quickstart.xml
@@ -21,10 +21,10 @@ Its designed for those of you who are too impatient to read the full
 Joda-Time includes these key datetime classes:
 <ul>
 <li><a href="api-release/org/joda/time/DateTime.html"><code>DateTime</code></a> - Immutable replacement for JDK <code>Calendar</code></li>
-<li><a href="api-release/org/joda/time/MutableDateTime.html"><code>MutableDateTime</code></a> - Mutable replacement for JDK <code>Calendar</code></li>
 <li><a href="api-release/org/joda/time/DateMidnight.html"><code>DateMidnight</code></a> - Immutable class representing a date where the time is forced to midnight</li>
-<li><a href="api-release/org/joda/time/YearMonthDay.html"><code>YearMonthDay</code></a> - Immutable class representing a local date without a time</li>
-<li><a href="api-release/org/joda/time/TimeOfDay.html"><code>TimeOfDay</code></a> - Immutable class representing a time without a date</li>
+<li><a href="api-release/org/joda/time/LocalDate.html"><code>LocalDate</code></a> - Immutable class representing a local date without a time (no time zone)</li>
+<li><a href="api-release/org/joda/time/LocalTime.html"><code>LocalTime</code></a> - Immutable class representing a time without a date (no time zone)</li>
+<li><a href="api-release/org/joda/time/LocalDateTime.html"><code>LocalDateTime</code></a> - Immutable class representing a local date and time (no time zone)</li>
 </ul>
 </p>
 
diff --git a/JodaTime/xdocs/upgradeto130.xml b/JodaTime/xdocs/upgradeto130.xml
new file mode 100644
index 000000000..36ff8c54b
--- /dev/null
+++ b/JodaTime/xdocs/upgradeto130.xml
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+
+<document>
+ <properties>
+  <title>Java date and time API - Upgrade from 1.2 to 1.3</title>
+  <author email="scolebourne@joda.org">Stephen Colebourne</author>
+ </properties>
+
+<body>
+
+<section name="Upgrade">
+<p>
+These are the release notes and advice for upgrading Joda-Time from
+version 1.2 to version 1.3.
+<source>
+</source>
+</p>
+</section>
+
+</body>
+</document>

From 939bb55d5edcd9983cac02593a3d228048be21d5 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Thu, 29 Jun 2006 23:11:40 +0000
Subject: [PATCH 098/115] Javadoc

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1095 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/java/org/joda/time/DateMidnight.java  | 112 ++++++------
 JodaTime/src/java/org/joda/time/DateTime.java | 170 +++++++++---------
 2 files changed, 132 insertions(+), 150 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/DateMidnight.java b/JodaTime/src/java/org/joda/time/DateMidnight.java
index 246cc20ec..4d03b6410 100644
--- a/JodaTime/src/java/org/joda/time/DateMidnight.java
+++ b/JodaTime/src/java/org/joda/time/DateMidnight.java
@@ -281,7 +281,7 @@ protected long checkInstant(long instant, Chronology chronology) {
 
     //-----------------------------------------------------------------------
     /**
-     * Gets a copy of this instant with different millis.
+     * Returns a copy of this date with a different millisecond instant.
      * The returned object will have a local time of midnight.
      * <p>
      * Only the millis will change, the chronology and time zone are kept.
@@ -297,7 +297,7 @@ public DateMidnight withMillis(long newMillis) {
     }
 
     /**
-     * Gets a copy of this instant with a different chronology, potentially
+     * Returns a copy of this date with a different chronology, potentially
      * changing the day in unexpected ways.
      * <p>
      * This method creates a new DateMidnight using the midnight millisecond value
@@ -322,7 +322,7 @@ public DateMidnight withChronology(Chronology newChronology) {
     }
 
     /**
-     * Gets a copy of this instant with a different time zone, preserving the day
+     * Returns a copy of this date with a different time zone, preserving the day
      * The returned object will have a local time of midnight in the new zone on
      * the same day as the original instant.
      *
@@ -342,7 +342,7 @@ public DateMidnight withZoneRetainFields(DateTimeZone newZone) {
 
     //-----------------------------------------------------------------------
     /**
-     * Gets a copy of this datetime with the partial set of fields replacing those
+     * Returns a copy of this date with the partial set of fields replacing those
      * from this instance.
      * <p>
      * For example, if the partial is a <code>LocalDate</code> then the date fields
@@ -361,7 +361,7 @@ public DateMidnight withFields(ReadablePartial partial) {
     }
 
     /**
-     * Gets a copy of this datetime with the specified field set to a new value.
+     * Returns a copy of this date with the specified field set to a new value.
      * <p>
      * For example, if the field type is <code>dayOfMonth</code> then the day of month
      * field would be changed in the returned instance.
@@ -388,7 +388,7 @@ public DateMidnight withField(DateTimeFieldType fieldType, int value) {
     }
 
     /**
-     * Gets a copy of this datetime with the value of the specified field increased.
+     * Returns a copy of this date with the value of the specified field increased.
      * <p>
      * If the addition is zero or the field is null, then <code>this</code> is returned.
      * <p>
@@ -418,7 +418,7 @@ public DateMidnight withFieldAdded(DurationFieldType fieldType, int amount) {
 
     //-----------------------------------------------------------------------
     /**
-     * Gets a copy of this datetime with the specified duration added.
+     * Returns a copy of this date with the specified duration added.
      * <p>
      * If the addition is zero, then <code>this</code> is returned.
      * 
@@ -436,7 +436,7 @@ public DateMidnight withDurationAdded(long durationToAdd, int scalar) {
     }
 
     /**
-     * Gets a copy of this datetime with the specified duration added.
+     * Returns a copy of this date with the specified duration added.
      * <p>
      * If the addition is zero, then <code>this</code> is returned.
      * 
@@ -453,7 +453,7 @@ public DateMidnight withDurationAdded(ReadableDuration durationToAdd, int scalar
     }
 
     /**
-     * Gets a copy of this datetime with the specified period added.
+     * Returns a copy of this date with the specified period added.
      * <p>
      * If the addition is zero, then <code>this</code> is returned.
      * <p>
@@ -477,9 +477,9 @@ public DateMidnight withPeriodAdded(ReadablePeriod period, int scalar) {
 
     //-----------------------------------------------------------------------
     /**
-     * Gets a copy of this datetime with the specified duration added.
+     * Returns a copy of this date with the specified duration added.
      * <p>
-     * If the amount is zero or null, then <code>this</code> is returned.
+     * If the amount is zero, then <code>this</code> is returned.
      * 
      * @param duration  the duration, in millis, to add to this one
      * @return a copy of this datetime with the duration added
@@ -490,7 +490,7 @@ public DateMidnight plus(long duration) {
     }
 
     /**
-     * Gets a copy of this datetime with the specified duration added.
+     * Returns a copy of this date with the specified duration added.
      * <p>
      * If the amount is zero or null, then <code>this</code> is returned.
      * 
@@ -503,7 +503,7 @@ public DateMidnight plus(ReadableDuration duration) {
     }
 
     /**
-     * Gets a copy of this datetime with the specified period added.
+     * Returns a copy of this date with the specified period added.
      * <p>
      * If the amount is zero or null, then <code>this</code> is returned.
      * <p>
@@ -521,7 +521,7 @@ public DateMidnight plus(ReadablePeriod period) {
 
     //-----------------------------------------------------------------------
     /**
-     * Returns a new datetime plus the specified number of years.
+     * Returns a copy of this date plus the specified number of years.
      * <p>
      * This datetime instance is immutable and unaffected by this method call.
      * <p>
@@ -545,7 +545,7 @@ public DateMidnight plusYears(int years) {
     }
 
     /**
-     * Returns a new datetime plus the specified number of months.
+     * Returns a copy of this date plus the specified number of months.
      * <p>
      * This datetime instance is immutable and unaffected by this method call.
      * <p>
@@ -569,7 +569,7 @@ public DateMidnight plusMonths(int months) {
     }
 
     /**
-     * Returns a new datetime plus the specified number of weeks.
+     * Returns a copy of this date plus the specified number of weeks.
      * <p>
      * This datetime instance is immutable and unaffected by this method call.
      * <p>
@@ -593,7 +593,7 @@ public DateMidnight plusWeeks(int weeks) {
     }
 
     /**
-     * Returns a new datetime plus the specified number of days.
+     * Returns a copy of this date plus the specified number of days.
      * <p>
      * This datetime instance is immutable and unaffected by this method call.
      * <p>
@@ -618,7 +618,7 @@ public DateMidnight plusDays(int days) {
 
     //-----------------------------------------------------------------------
     /**
-     * Gets a copy of this datetime with the specified duration take away.
+     * Returns a copy of this date with the specified duration taken away.
      * <p>
      * If the amount is zero or null, then <code>this</code> is returned.
      * 
@@ -631,7 +631,7 @@ public DateMidnight minus(long duration) {
     }
 
     /**
-     * Gets a copy of this datetime with the specified duration take away.
+     * Returns a copy of this date with the specified duration taken away.
      * <p>
      * If the amount is zero or null, then <code>this</code> is returned.
      * 
@@ -644,7 +644,7 @@ public DateMidnight minus(ReadableDuration duration) {
     }
 
     /**
-     * Gets a copy of this datetime with the specified period take away.
+     * Returns a copy of this date with the specified period taken away.
      * <p>
      * If the amount is zero or null, then <code>this</code> is returned.
      * <p>
@@ -662,7 +662,7 @@ public DateMidnight minus(ReadablePeriod period) {
 
     //-----------------------------------------------------------------------
     /**
-     * Returns a new datetime minus the specified number of years.
+     * Returns a copy of this date minus the specified number of years.
      * <p>
      * This datetime instance is immutable and unaffected by this method call.
      * <p>
@@ -686,7 +686,7 @@ public DateMidnight minusYears(int years) {
     }
 
     /**
-     * Returns a new datetime minus the specified number of months.
+     * Returns a copy of this date minus the specified number of months.
      * <p>
      * This datetime instance is immutable and unaffected by this method call.
      * <p>
@@ -710,7 +710,7 @@ public DateMidnight minusMonths(int months) {
     }
 
     /**
-     * Returns a new datetime minus the specified number of weeks.
+     * Returns a copy of this date minus the specified number of weeks.
      * <p>
      * This datetime instance is immutable and unaffected by this method call.
      * <p>
@@ -734,7 +734,7 @@ public DateMidnight minusWeeks(int weeks) {
     }
 
     /**
-     * Returns a new datetime minus the specified number of days.
+     * Returns a copy of this date minus the specified number of days.
      * <p>
      * This datetime instance is immutable and unaffected by this method call.
      * <p>
@@ -778,7 +778,8 @@ public Property property(DateTimeFieldType type) {
 
     //-----------------------------------------------------------------------
     /**
-     * Converts this object to a YearMonthDay using the same date and chronology.
+     * Converts this object to a <code>YearMonthDay</code> using the
+     * same date and chronology.
      * 
      * @return a YearMonthDay using the same millis and chronology
      */
@@ -787,7 +788,8 @@ public YearMonthDay toYearMonthDay() {
     }
 
     /**
-     * Converts this object to a LocalDate with the same date and chronology.
+     * Converts this object to a <code>LocalDate</code> with the
+     * same date and chronology.
      *
      * @return a LocalDate with the same date and chronology
      */
@@ -796,7 +798,8 @@ public LocalDate toLocalDate() {
     }
 
     /**
-     * Converts this object to an Interval encompassing the whole of this day.
+     * Converts this object to an <code>Interval</code> encompassing
+     * the whole of this day.
      * <p>
      * The interval starts at midnight 00:00 and ends at 00:00 the following day,
      * (which is not included in the interval, as intervals are half-open).
@@ -812,8 +815,7 @@ public Interval toInterval() {
 
     //-----------------------------------------------------------------------
     /**
-     * Sets the era field in a copy of this DateMidnight, leaving this
-     * instance unchanged.
+     * Returns a copy of this date with the era field updated.
      * <p>
      * DateMidnight is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -828,8 +830,7 @@ public DateMidnight withEra(int era) {
     }
 
     /**
-     * Sets the century of era field in a copy of this DateMidnight, leaving this
-     * instance unchanged.
+     * Returns a copy of this date with the century of era field updated.
      * <p>
      * DateMidnight is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -844,8 +845,7 @@ public DateMidnight withCenturyOfEra(int centuryOfEra) {
     }
 
     /**
-     * Sets the year of era field in a copy of this DateMidnight, leaving this
-     * instance unchanged.
+     * Returns a copy of this date with the year of era field updated.
      * <p>
      * DateMidnight is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -860,8 +860,7 @@ public DateMidnight withYearOfEra(int yearOfEra) {
     }
 
     /**
-     * Sets the year of century field in a copy of this DateMidnight, leaving this
-     * instance unchanged.
+     * Returns a copy of this date with the year of century field updated.
      * <p>
      * DateMidnight is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -876,8 +875,7 @@ public DateMidnight withYearOfCentury(int yearOfCentury) {
     }
 
     /**
-     * Sets the year field in a copy of this DateMidnight, leaving this
-     * instance unchanged.
+     * Returns a copy of this date with the year field updated.
      * <p>
      * DateMidnight is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -892,8 +890,7 @@ public DateMidnight withYear(int year) {
     }
 
     /**
-     * Sets the weekyear field in a copy of this DateMidnight, leaving this
-     * instance unchanged.
+     * Returns a copy of this date with the weekyear field updated.
      * <p>
      * DateMidnight is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -908,8 +905,7 @@ public DateMidnight withWeekyear(int weekyear) {
     }
 
     /**
-     * Sets the month of year field in a copy of this DateMidnight, leaving this
-     * instance unchanged.
+     * Returns a copy of this date with the month of year field updated.
      * <p>
      * DateMidnight is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -924,8 +920,7 @@ public DateMidnight withMonthOfYear(int monthOfYear) {
     }
 
     /**
-     * Sets the week of weekyear field in a copy of this DateMidnight, leaving this
-     * instance unchanged.
+     * Returns a copy of this date with the week of weekyear field updated.
      * <p>
      * DateMidnight is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -940,8 +935,7 @@ public DateMidnight withWeekOfWeekyear(int weekOfWeekyear) {
     }
 
     /**
-     * Sets the day of year field in a copy of this DateMidnight, leaving this
-     * instance unchanged.
+     * Returns a copy of this date with the day of year field updated.
      * <p>
      * DateMidnight is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -956,8 +950,7 @@ public DateMidnight withDayOfYear(int dayOfYear) {
     }
 
     /**
-     * Sets the day of month field in a copy of this DateMidnight, leaving this
-     * instance unchanged.
+     * Returns a copy of this date with the day of month field updated.
      * <p>
      * DateMidnight is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -972,8 +965,7 @@ public DateMidnight withDayOfMonth(int dayOfMonth) {
     }
 
     /**
-     * Sets the day of week field in a copy of this DateMidnight, leaving this
-     * instance unchanged.
+     * Returns a copy of this date with the day of week field updated.
      * <p>
      * DateMidnight is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -990,7 +982,7 @@ public DateMidnight withDayOfWeek(int dayOfWeek) {
     // Date properties
     //-----------------------------------------------------------------------
     /**
-     * Get the era property.
+     * Get the era property which provides access to advanced functionality.
      * 
      * @return the era property
      */
@@ -999,7 +991,7 @@ public Property era() {
     }
 
     /**
-     * Get the century of era property.
+     * Get the century of era property which provides access to advanced functionality.
      * 
      * @return the year of era property
      */
@@ -1008,7 +1000,7 @@ public Property centuryOfEra() {
     }
 
     /**
-     * Get the year of century property.
+     * Get the year of century property which provides access to advanced functionality.
      * 
      * @return the year of era property
      */
@@ -1017,7 +1009,7 @@ public Property yearOfCentury() {
     }
 
     /**
-     * Get the year of era property.
+     * Get the year of era property which provides access to advanced functionality.
      * 
      * @return the year of era property
      */
@@ -1026,7 +1018,7 @@ public Property yearOfEra() {
     }
 
     /**
-     * Get the year property.
+     * Get the year property which provides access to advanced functionality.
      * 
      * @return the year property
      */
@@ -1035,7 +1027,7 @@ public Property year() {
     }
 
     /**
-     * Get the year of a week based year property.
+     * Get the year of a week based year property which provides access to advanced functionality.
      * 
      * @return the year of a week based year property
      */
@@ -1044,7 +1036,7 @@ public Property weekyear() {
     }
 
     /**
-     * Get the month of year property.
+     * Get the month of year property which provides access to advanced functionality.
      * 
      * @return the month of year property
      */
@@ -1053,7 +1045,7 @@ public Property monthOfYear() {
     }
 
     /**
-     * Get the week of a week based year property.
+     * Get the week of a week based year property which provides access to advanced functionality.
      * 
      * @return the week of a week based year property
      */
@@ -1062,7 +1054,7 @@ public Property weekOfWeekyear() {
     }
 
     /**
-     * Get the day of year property.
+     * Get the day of year property which provides access to advanced functionality.
      * 
      * @return the day of year property
      */
@@ -1071,7 +1063,7 @@ public Property dayOfYear() {
     }
 
     /**
-     * Get the day of month property.
+     * Get the day of month property which provides access to advanced functionality.
      * 
      * @return the day of month property
      */
@@ -1080,7 +1072,7 @@ public Property dayOfMonth() {
     }
 
     /**
-     * Get the day of week property.
+     * Get the day of week property which provides access to advanced functionality.
      * 
      * @return the day of week property
      */
diff --git a/JodaTime/src/java/org/joda/time/DateTime.java b/JodaTime/src/java/org/joda/time/DateTime.java
index 0f98a3261..a2fadef98 100644
--- a/JodaTime/src/java/org/joda/time/DateTime.java
+++ b/JodaTime/src/java/org/joda/time/DateTime.java
@@ -341,7 +341,7 @@ public DateTime toDateTime(Chronology chronology) {
 
     //-----------------------------------------------------------------------
     /**
-     * Gets a copy of this datetime with different millis.
+     * Returns a copy of this datetime with different millis.
      * <p>
      * The returned object will be either be a new instance or <code>this</code>.
      * Only the millis will change, the chronology and time zone are kept.
@@ -354,7 +354,7 @@ public DateTime withMillis(long newMillis) {
     }
 
     /**
-     * Gets a copy of this datetime with a different chronology.
+     * Returns a copy of this datetime with a different chronology.
      * <p>
      * The returned object will be either be a new instance or <code>this</code>.
      * Only the chronology will change, the millis are kept.
@@ -369,7 +369,7 @@ public DateTime withChronology(Chronology newChronology) {
 
     //-----------------------------------------------------------------------
     /**
-     * Gets a copy of this datetime with a different time zone, preserving the
+     * Returns a copy of this datetime with a different time zone, preserving the
      * millisecond instant.
      * <p>
      * This method is useful for finding the local time in another timezone.
@@ -390,7 +390,7 @@ public DateTime withZone(DateTimeZone newZone) {
     }
 
     /**
-     * Gets a copy of this datetime with a different time zone, preserving the
+     * Returns a copy of this datetime with a different time zone, preserving the
      * field values.
      * <p>
      * This method is useful for finding the millisecond time in another timezone.
@@ -419,7 +419,7 @@ public DateTime withZoneRetainFields(DateTimeZone newZone) {
 
     //-----------------------------------------------------------------------
     /**
-     * Gets a copy of this datetime with the specified date, retaining the time fields.
+     * Returns a copy of this datetime with the specified date, retaining the time fields.
      * <p>
      * If the date is already the date passed in, then <code>this</code> is returned.
      * <p>
@@ -444,7 +444,7 @@ public DateTime withDate(int year, int monthOfYear, int dayOfMonth) {
     }
 
     /**
-     * Gets a copy of this datetime with the specified time, retaining the date fields.
+     * Returns a copy of this datetime with the specified time, retaining the date fields.
      * <p>
      * If the time is already the time passed in, then <code>this</code> is returned.
      * <p>
@@ -472,7 +472,7 @@ public DateTime withTime(int hourOfDay, int minuteOfHour, int secondOfMinute, in
 
     //-----------------------------------------------------------------------
     /**
-     * Gets a copy of this datetime with the partial set of fields replacing those
+     * Returns a copy of this datetime with the partial set of fields replacing those
      * from this instance.
      * <p>
      * For example, if the partial is a <code>TimeOfDay</code> then the time fields
@@ -491,7 +491,7 @@ public DateTime withFields(ReadablePartial partial) {
     }
 
     /**
-     * Gets a copy of this datetime with the specified field set to a new value.
+     * Returns a copy of this datetime with the specified field set to a new value.
      * <p>
      * For example, if the field type is <code>hourOfDay</code> then the hour of day
      * field would be changed in the returned instance.
@@ -518,7 +518,7 @@ public DateTime withField(DateTimeFieldType fieldType, int value) {
     }
 
     /**
-     * Gets a copy of this datetime with the value of the specified field increased.
+     * Returns a copy of this datetime with the value of the specified field increased.
      * <p>
      * If the addition is zero or the field is null, then <code>this</code> is returned.
      * <p>
@@ -548,7 +548,7 @@ public DateTime withFieldAdded(DurationFieldType fieldType, int amount) {
 
     //-----------------------------------------------------------------------
     /**
-     * Gets a copy of this datetime with the specified duration added.
+     * Returns a copy of this datetime with the specified duration added.
      * <p>
      * If the addition is zero, then <code>this</code> is returned.
      * 
@@ -566,7 +566,7 @@ public DateTime withDurationAdded(long durationToAdd, int scalar) {
     }
 
     /**
-     * Gets a copy of this datetime with the specified duration added.
+     * Returns a copy of this datetime with the specified duration added.
      * <p>
      * If the addition is zero, then <code>this</code> is returned.
      * 
@@ -583,7 +583,7 @@ public DateTime withDurationAdded(ReadableDuration durationToAdd, int scalar) {
     }
 
     /**
-     * Gets a copy of this datetime with the specified period added.
+     * Returns a copy of this datetime with the specified period added.
      * <p>
      * If the addition is zero, then <code>this</code> is returned.
      * <p>
@@ -607,7 +607,7 @@ public DateTime withPeriodAdded(ReadablePeriod period, int scalar) {
 
     //-----------------------------------------------------------------------
     /**
-     * Gets a copy of this datetime with the specified duration added.
+     * Returns a copy of this datetime with the specified duration added.
      * <p>
      * If the amount is zero or null, then <code>this</code> is returned.
      * 
@@ -620,7 +620,7 @@ public DateTime plus(long duration) {
     }
 
     /**
-     * Gets a copy of this datetime with the specified duration added.
+     * Returns a copy of this datetime with the specified duration added.
      * <p>
      * If the amount is zero or null, then <code>this</code> is returned.
      * 
@@ -633,7 +633,7 @@ public DateTime plus(ReadableDuration duration) {
     }
 
     /**
-     * Gets a copy of this datetime with the specified period added.
+     * Returns a copy of this datetime with the specified period added.
      * <p>
      * If the amount is zero or null, then <code>this</code> is returned.
      * <p>
@@ -651,7 +651,7 @@ public DateTime plus(ReadablePeriod period) {
 
     //-----------------------------------------------------------------------
     /**
-     * Returns a new datetime plus the specified number of years.
+     * Returns a copy of this datetime plus the specified number of years.
      * <p>
      * This datetime instance is immutable and unaffected by this method call.
      * <p>
@@ -675,7 +675,7 @@ public DateTime plusYears(int years) {
     }
 
     /**
-     * Returns a new datetime plus the specified number of months.
+     * Returns a copy of this datetime plus the specified number of months.
      * <p>
      * This datetime instance is immutable and unaffected by this method call.
      * <p>
@@ -699,7 +699,7 @@ public DateTime plusMonths(int months) {
     }
 
     /**
-     * Returns a new datetime plus the specified number of weeks.
+     * Returns a copy of this datetime plus the specified number of weeks.
      * <p>
      * This datetime instance is immutable and unaffected by this method call.
      * <p>
@@ -723,7 +723,7 @@ public DateTime plusWeeks(int weeks) {
     }
 
     /**
-     * Returns a new datetime plus the specified number of days.
+     * Returns a copy of this datetime plus the specified number of days.
      * <p>
      * This datetime instance is immutable and unaffected by this method call.
      * <p>
@@ -747,7 +747,7 @@ public DateTime plusDays(int days) {
     }
 
     /**
-     * Returns a new datetime plus the specified number of hours.
+     * Returns a copy of this datetime plus the specified number of hours.
      * <p>
      * This datetime instance is immutable and unaffected by this method call.
      * <p>
@@ -771,7 +771,7 @@ public DateTime plusHours(int hours) {
     }
 
     /**
-     * Returns a new datetime plus the specified number of minutes.
+     * Returns a copy of this datetime plus the specified number of minutes.
      * <p>
      * This datetime instance is immutable and unaffected by this method call.
      * <p>
@@ -795,7 +795,7 @@ public DateTime plusMinutes(int minutes) {
     }
 
     /**
-     * Returns a new datetime plus the specified number of seconds.
+     * Returns a copy of this datetime plus the specified number of seconds.
      * <p>
      * This datetime instance is immutable and unaffected by this method call.
      * <p>
@@ -819,7 +819,7 @@ public DateTime plusSeconds(int seconds) {
     }
 
     /**
-     * Returns a new datetime plus the specified number of millis.
+     * Returns a copy of this datetime plus the specified number of millis.
      * <p>
      * This datetime instance is immutable and unaffected by this method call.
      * <p>
@@ -844,7 +844,7 @@ public DateTime plusMillis(int millis) {
 
     //-----------------------------------------------------------------------
     /**
-     * Gets a copy of this datetime with the specified duration take away.
+     * Returns a copy of this datetime with the specified duration taken away.
      * <p>
      * If the amount is zero or null, then <code>this</code> is returned.
      * 
@@ -857,7 +857,7 @@ public DateTime minus(long duration) {
     }
 
     /**
-     * Gets a copy of this datetime with the specified duration take away.
+     * Returns a copy of this datetime with the specified duration taken away.
      * <p>
      * If the amount is zero or null, then <code>this</code> is returned.
      * 
@@ -870,7 +870,7 @@ public DateTime minus(ReadableDuration duration) {
     }
 
     /**
-     * Gets a copy of this datetime with the specified period take away.
+     * Returns a copy of this datetime with the specified period taken away.
      * <p>
      * If the amount is zero or null, then <code>this</code> is returned.
      * <p>
@@ -888,7 +888,7 @@ public DateTime minus(ReadablePeriod period) {
 
     //-----------------------------------------------------------------------
     /**
-     * Returns a new datetime minus the specified number of years.
+     * Returns a copy of this datetime minus the specified number of years.
      * <p>
      * This datetime instance is immutable and unaffected by this method call.
      * <p>
@@ -912,7 +912,7 @@ public DateTime minusYears(int years) {
     }
 
     /**
-     * Returns a new datetime minus the specified number of months.
+     * Returns a copy of this datetime minus the specified number of months.
      * <p>
      * This datetime instance is immutable and unaffected by this method call.
      * <p>
@@ -936,7 +936,7 @@ public DateTime minusMonths(int months) {
     }
 
     /**
-     * Returns a new datetime minus the specified number of weeks.
+     * Returns a copy of this datetime minus the specified number of weeks.
      * <p>
      * This datetime instance is immutable and unaffected by this method call.
      * <p>
@@ -960,7 +960,7 @@ public DateTime minusWeeks(int weeks) {
     }
 
     /**
-     * Returns a new datetime minus the specified number of days.
+     * Returns a copy of this datetime minus the specified number of days.
      * <p>
      * This datetime instance is immutable and unaffected by this method call.
      * <p>
@@ -984,7 +984,7 @@ public DateTime minusDays(int days) {
     }
 
     /**
-     * Returns a new datetime minus the specified number of hours.
+     * Returns a copy of this datetime minus the specified number of hours.
      * <p>
      * This datetime instance is immutable and unaffected by this method call.
      * <p>
@@ -1008,7 +1008,7 @@ public DateTime minusHours(int hours) {
     }
 
     /**
-     * Returns a new datetime minus the specified number of minutes.
+     * Returns a copy of this datetime minus the specified number of minutes.
      * <p>
      * This datetime instance is immutable and unaffected by this method call.
      * <p>
@@ -1032,7 +1032,7 @@ public DateTime minusMinutes(int minutes) {
     }
 
     /**
-     * Returns a new datetime minus the specified number of seconds.
+     * Returns a copy of this datetime minus the specified number of seconds.
      * <p>
      * This datetime instance is immutable and unaffected by this method call.
      * <p>
@@ -1056,7 +1056,7 @@ public DateTime minusSeconds(int seconds) {
     }
 
     /**
-     * Returns a new datetime minus the specified number of millis.
+     * Returns a copy of this datetime minus the specified number of millis.
      * <p>
      * This datetime instance is immutable and unaffected by this method call.
      * <p>
@@ -1100,7 +1100,8 @@ public Property property(DateTimeFieldType type) {
 
     //-----------------------------------------------------------------------
     /**
-     * Converts this object to a DateMidnight using the same millis and chronology.
+     * Converts this object to a <code>DateMidnight</code> using the
+     * same millis and chronology.
      * 
      * @return a DateMidnight using the same millis and chronology
      */
@@ -1109,7 +1110,8 @@ public DateMidnight toDateMidnight() {
     }
 
     /**
-     * Converts this object to a YearMonthDay using the same millis and chronology.
+     * Converts this object to a <code>YearMonthDay</code> using the
+     * same millis and chronology.
      * 
      * @return a YearMonthDay using the same millis and chronology
      */
@@ -1118,7 +1120,8 @@ public YearMonthDay toYearMonthDay() {
     }
 
     /**
-     * Converts this object to a TimeOfDay using the same millis and chronology.
+     * Converts this object to a <code>TimeOfDay</code> using the
+     * same millis and chronology.
      * 
      * @return a TimeOfDay using the same millis and chronology
      */
@@ -1127,7 +1130,8 @@ public TimeOfDay toTimeOfDay() {
     }
 
     /**
-     * Converts this object to a LocalDateTime with the same datetime and chronology.
+     * Converts this object to a <code>LocalDateTime</code> with
+     * the same datetime and chronology.
      *
      * @return a LocalDateTime with the same datetime and chronology
      */
@@ -1136,7 +1140,8 @@ public LocalDateTime toLocalDateTime() {
     }
 
     /**
-     * Converts this object to a LocalDate with the same date and chronology.
+     * Converts this object to a <code>LocalDate</code> with the
+     * same date and chronology.
      *
      * @return a LocalDate with the same date and chronology
      */
@@ -1145,7 +1150,8 @@ public LocalDate toLocalDate() {
     }
 
     /**
-     * Converts this object to a LocalTime with the same time and chronology.
+     * Converts this object to a <code>LocalTime</code> with the
+     * same time and chronology.
      *
      * @return a LocalTime with the same time and chronology
      */
@@ -1155,8 +1161,7 @@ public LocalTime toLocalTime() {
 
     //-----------------------------------------------------------------------
     /**
-     * Sets the era field in a copy of this DateTime, leaving this
-     * instance unchanged.
+     * Returns a copy of this datetime with the era field updated.
      * <p>
      * DateTime is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -1171,8 +1176,7 @@ public DateTime withEra(int era) {
     }
 
     /**
-     * Sets the century of era field in a copy of this DateTime, leaving this
-     * instance unchanged.
+     * Returns a copy of this datetime with the century of era field updated.
      * <p>
      * DateTime is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -1187,8 +1191,7 @@ public DateTime withCenturyOfEra(int centuryOfEra) {
     }
 
     /**
-     * Sets the year of era field in a copy of this DateTime, leaving this
-     * instance unchanged.
+     * Returns a copy of this datetime with the year of era field updated.
      * <p>
      * DateTime is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -1203,8 +1206,7 @@ public DateTime withYearOfEra(int yearOfEra) {
     }
 
     /**
-     * Sets the year of century field in a copy of this DateTime, leaving this
-     * instance unchanged.
+     * Returns a copy of this datetime with the year of century field updated.
      * <p>
      * DateTime is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -1219,8 +1221,7 @@ public DateTime withYearOfCentury(int yearOfCentury) {
     }
 
     /**
-     * Sets the year field in a copy of this DateTime, leaving this
-     * instance unchanged.
+     * Returns a copy of this datetime with the year field updated.
      * <p>
      * DateTime is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -1235,8 +1236,7 @@ public DateTime withYear(int year) {
     }
 
     /**
-     * Sets the weekyear field in a copy of this DateTime, leaving this
-     * instance unchanged.
+     * Returns a copy of this datetime with the weekyear field updated.
      * <p>
      * DateTime is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -1251,8 +1251,7 @@ public DateTime withWeekyear(int weekyear) {
     }
 
     /**
-     * Sets the month of year field in a copy of this DateTime, leaving this
-     * instance unchanged.
+     * Returns a copy of this datetime with the month of year field updated.
      * <p>
      * DateTime is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -1267,8 +1266,7 @@ public DateTime withMonthOfYear(int monthOfYear) {
     }
 
     /**
-     * Sets the week of weekyear field in a copy of this DateTime, leaving this
-     * instance unchanged.
+     * Returns a copy of this datetime with the week of weekyear field updated.
      * <p>
      * DateTime is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -1283,8 +1281,7 @@ public DateTime withWeekOfWeekyear(int weekOfWeekyear) {
     }
 
     /**
-     * Sets the day of year field in a copy of this DateTime, leaving this
-     * instance unchanged.
+     * Returns a copy of this datetime with the day of year field updated.
      * <p>
      * DateTime is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -1299,8 +1296,7 @@ public DateTime withDayOfYear(int dayOfYear) {
     }
 
     /**
-     * Sets the day of month field in a copy of this DateTime, leaving this
-     * instance unchanged.
+     * Returns a copy of this datetime with the day of month field updated.
      * <p>
      * DateTime is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -1315,8 +1311,7 @@ public DateTime withDayOfMonth(int dayOfMonth) {
     }
 
     /**
-     * Sets the day of week field in a copy of this DateTime, leaving this
-     * instance unchanged.
+     * Returns a copy of this datetime with the day of week field updated.
      * <p>
      * DateTime is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -1332,8 +1327,7 @@ public DateTime withDayOfWeek(int dayOfWeek) {
 
     //-----------------------------------------------------------------------
     /**
-     * Sets the hour of day field in a copy of this DateTime, leaving this
-     * instance unchanged.
+     * Returns a copy of this datetime with the hour of day field updated.
      * <p>
      * DateTime is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -1348,8 +1342,7 @@ public DateTime withHourOfDay(int hour) {
     }
 
     /**
-     * Sets the minute of hour field in a copy of this DateTime, leaving this
-     * instance unchanged.
+     * Returns a copy of this datetime with the minute of hour updated.
      * <p>
      * DateTime is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -1364,8 +1357,7 @@ public DateTime withMinuteOfHour(int minute) {
     }
 
     /**
-     * Sets the second of minute field in a copy of this DateTime, leaving this
-     * instance unchanged.
+     * Returns a copy of this datetime with the second of minute field updated.
      * <p>
      * DateTime is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -1380,8 +1372,7 @@ public DateTime withSecondOfMinute(int second) {
     }
 
     /**
-     * Sets the millis of second field in a copy of this DateTime, leaving this
-     * instance unchanged.
+     * Returns a copy of this datetime with the millis of second field updated.
      * <p>
      * DateTime is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -1396,8 +1387,7 @@ public DateTime withMillisOfSecond(int millis) {
     }
 
     /**
-     * Sets the millis of day field in a copy of this DateTime, leaving this
-     * instance unchanged.
+     * Returns a copy of this datetime with the millis of day field updated.
      * <p>
      * DateTime is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -1414,7 +1404,7 @@ public DateTime withMillisOfDay(int millis) {
     // Date properties
     //-----------------------------------------------------------------------
     /**
-     * Get the era property.
+     * Get the era property which provides access to advanced functionality.
      * 
      * @return the era property
      */
@@ -1423,7 +1413,7 @@ public Property era() {
     }
 
     /**
-     * Get the century of era property.
+     * Get the century of era property which provides access to advanced functionality.
      * 
      * @return the year of era property
      */
@@ -1432,7 +1422,7 @@ public Property centuryOfEra() {
     }
 
     /**
-     * Get the year of century property.
+     * Get the year of century property which provides access to advanced functionality.
      * 
      * @return the year of era property
      */
@@ -1441,7 +1431,7 @@ public Property yearOfCentury() {
     }
 
     /**
-     * Get the year of era property.
+     * Get the year of era property which provides access to advanced functionality.
      * 
      * @return the year of era property
      */
@@ -1450,7 +1440,7 @@ public Property yearOfEra() {
     }
 
     /**
-     * Get the year property.
+     * Get the year property which provides access to advanced functionality.
      * 
      * @return the year property
      */
@@ -1459,7 +1449,7 @@ public Property year() {
     }
 
     /**
-     * Get the year of a week based year property.
+     * Get the year of a week based year property which provides access to advanced functionality.
      * 
      * @return the year of a week based year property
      */
@@ -1468,7 +1458,7 @@ public Property weekyear() {
     }
 
     /**
-     * Get the month of year property.
+     * Get the month of year property which provides access to advanced functionality.
      * 
      * @return the month of year property
      */
@@ -1477,7 +1467,7 @@ public Property monthOfYear() {
     }
 
     /**
-     * Get the week of a week based year property.
+     * Get the week of a week based year property which provides access to advanced functionality.
      * 
      * @return the week of a week based year property
      */
@@ -1486,7 +1476,7 @@ public Property weekOfWeekyear() {
     }
 
     /**
-     * Get the day of year property.
+     * Get the day of year property which provides access to advanced functionality.
      * 
      * @return the day of year property
      */
@@ -1495,7 +1485,7 @@ public Property dayOfYear() {
     }
 
     /**
-     * Get the day of month property.
+     * Get the day of month property which provides access to advanced functionality.
      * 
      * @return the day of month property
      */
@@ -1504,7 +1494,7 @@ public Property dayOfMonth() {
     }
 
     /**
-     * Get the day of week property.
+     * Get the day of week property which provides access to advanced functionality.
      * 
      * @return the day of week property
      */
@@ -1515,7 +1505,7 @@ public Property dayOfWeek() {
     // Time properties
     //-----------------------------------------------------------------------
     /**
-     * Get the hour of day field property
+     * Get the hour of day field property which provides access to advanced functionality.
      * 
      * @return the hour of day property
      */
@@ -1524,7 +1514,7 @@ public Property hourOfDay() {
     }
 
     /**
-     * Get the minute of day property
+     * Get the minute of day property which provides access to advanced functionality.
      * 
      * @return the minute of day property
      */
@@ -1533,7 +1523,7 @@ public Property minuteOfDay() {
     }
 
     /**
-     * Get the minute of hour field property
+     * Get the minute of hour field property which provides access to advanced functionality.
      * 
      * @return the minute of hour property
      */
@@ -1542,7 +1532,7 @@ public Property minuteOfHour() {
     }
 
     /**
-     * Get the second of day property
+     * Get the second of day property which provides access to advanced functionality.
      * 
      * @return the second of day property
      */
@@ -1551,7 +1541,7 @@ public Property secondOfDay() {
     }
 
     /**
-     * Get the second of minute field property
+     * Get the second of minute field property which provides access to advanced functionality.
      * 
      * @return the second of minute property
      */
@@ -1560,7 +1550,7 @@ public Property secondOfMinute() {
     }
 
     /**
-     * Get the millis of day property
+     * Get the millis of day property which provides access to advanced functionality.
      * 
      * @return the millis of day property
      */
@@ -1569,7 +1559,7 @@ public Property millisOfDay() {
     }
 
     /**
-     * Get the millis of second property
+     * Get the millis of second property which provides access to advanced functionality.
      * 
      * @return the millis of second property
      */

From 776b3d07e918c23802488df40a4942cdb65bf29c Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 1 Jul 2006 10:03:34 +0000
Subject: [PATCH 099/115] Javadoc

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1096 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/java/org/joda/time/LocalDate.java     |  86 +++++------
 .../src/java/org/joda/time/LocalDateTime.java | 136 ++++++++----------
 .../src/java/org/joda/time/LocalTime.java     |  55 ++++---
 .../src/java/org/joda/time/TimeOfDay.java     |  52 +++----
 .../src/java/org/joda/time/YearMonthDay.java  |  43 +++---
 5 files changed, 170 insertions(+), 202 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/LocalDate.java b/JodaTime/src/java/org/joda/time/LocalDate.java
index 508f4ba34..47ea71847 100644
--- a/JodaTime/src/java/org/joda/time/LocalDate.java
+++ b/JodaTime/src/java/org/joda/time/LocalDate.java
@@ -615,7 +615,6 @@ public DateTime toDateTime(LocalTime time) {
     /**
      * Converts this object to a DateTime using a LocalTime to fill in the
      * missing fields.
-     * This instance is immutable and unaffected by this method call.
      * <p>
      * The resulting chronology is determined by the chronology of this
      * LocalDate plus the time zone. The chronology of the time must match.
@@ -669,7 +668,7 @@ public Interval toInterval(DateTimeZone zone) {
 
     //-----------------------------------------------------------------------
     /**
-     * Gets a copy of this date with different local millis.
+     * Returns a copy of this date with different local millis.
      * <p>
      * The returned object will be a new instance of the same type.
      * Only the millis will change, the chronology is kept.
@@ -685,7 +684,7 @@ LocalDate withLocalMillis(long newMillis) {
 
     //-----------------------------------------------------------------------
     /**
-     * Gets a copy of this LocalDate with the partial set of fields replacing
+     * Returns a copy of this date with the partial set of fields replacing
      * those from this instance.
      * <p>
      * For example, if the partial contains a year and a month then those two
@@ -705,7 +704,7 @@ public LocalDate withFields(ReadablePartial partial) {
     }
 
     /**
-     * Gets a copy of this LocalDate with the specified field set to a new value.
+     * Returns a copy of this date with the specified field set to a new value.
      * <p>
      * For example, if the field type is <code>monthOfYear</code> then the
      * month of year field will be changed in the returned instance.
@@ -734,7 +733,7 @@ public LocalDate withField(DateTimeFieldType fieldType, int value) {
     }
 
     /**
-     * Gets a copy of this LocalDate with the value of the specified field increased.
+     * Returns a copy of this date with the value of the specified field increased.
      * <p>
      * If the addition is zero or the field is null, then <code>this</code> is returned.
      * <p>
@@ -767,7 +766,7 @@ public LocalDate withFieldAdded(DurationFieldType fieldType, int amount) {
 
     //-----------------------------------------------------------------------
     /**
-     * Gets a copy of this LocalDate with the specified period added.
+     * Returns a copy of this date with the specified period added.
      * <p>
      * If the addition is zero, then <code>this</code> is returned.
      * <p>
@@ -802,7 +801,7 @@ public LocalDate withPeriodAdded(ReadablePeriod period, int scalar) {
 
     //-----------------------------------------------------------------------
     /**
-     * Gets a copy of this LocalDate with the specified period added.
+     * Returns a copy of this date with the specified period added.
      * <p>
      * If the amount is zero or null, then <code>this</code> is returned.
      * <p>
@@ -823,7 +822,7 @@ public LocalDate plus(ReadablePeriod period) {
 
     //-----------------------------------------------------------------------
     /**
-     * Returns a new LocalDate plus the specified number of years.
+     * Returns a copy of this date plus the specified number of years.
      * <p>
      * This LocalDate instance is immutable and unaffected by this method call.
      * <p>
@@ -846,7 +845,7 @@ public LocalDate plusYears(int years) {
     }
 
     /**
-     * Returns a new LocalDate plus the specified number of months.
+     * Returns a copy of this date plus the specified number of months.
      * <p>
      * This LocalDate instance is immutable and unaffected by this method call.
      * <p>
@@ -869,7 +868,7 @@ public LocalDate plusMonths(int months) {
     }
 
     /**
-     * Returns a new LocalDate plus the specified number of weeks.
+     * Returns a copy of this date plus the specified number of weeks.
      * <p>
      * This LocalDate instance is immutable and unaffected by this method call.
      * <p>
@@ -892,7 +891,7 @@ public LocalDate plusWeeks(int weeks) {
     }
 
     /**
-     * Returns a new LocalDate plus the specified number of days.
+     * Returns a copy of this date plus the specified number of days.
      * <p>
      * This LocalDate instance is immutable and unaffected by this method call.
      * <p>
@@ -916,7 +915,7 @@ public LocalDate plusDays(int days) {
 
     //-----------------------------------------------------------------------
     /**
-     * Gets a copy of this LocalDate with the specified period taken away.
+     * Returns a copy of this date with the specified period taken away.
      * <p>
      * If the amount is zero or null, then <code>this</code> is returned.
      * <p>
@@ -937,7 +936,7 @@ public LocalDate minus(ReadablePeriod period) {
 
     //-----------------------------------------------------------------------
     /**
-     * Returns a new LocalDate minus the specified number of years.
+     * Returns a copy of this date minus the specified number of years.
      * <p>
      * This LocalDate instance is immutable and unaffected by this method call.
      * <p>
@@ -960,7 +959,7 @@ public LocalDate minusYears(int years) {
     }
 
     /**
-     * Returns a new LocalDate minus the specified number of months.
+     * Returns a copy of this date minus the specified number of months.
      * <p>
      * This LocalDate instance is immutable and unaffected by this method call.
      * <p>
@@ -983,7 +982,7 @@ public LocalDate minusMonths(int months) {
     }
 
     /**
-     * Returns a new LocalDate minus the specified number of weeks.
+     * Returns a copy of this date minus the specified number of weeks.
      * <p>
      * This LocalDate instance is immutable and unaffected by this method call.
      * <p>
@@ -1006,7 +1005,7 @@ public LocalDate minusWeeks(int weeks) {
     }
 
     /**
-     * Returns a new LocalDate minus the specified number of days.
+     * Returns a copy of this date minus the specified number of days.
      * <p>
      * This LocalDate instance is immutable and unaffected by this method call.
      * <p>
@@ -1159,8 +1158,7 @@ public int getDayOfWeek() {
 
     //-----------------------------------------------------------------------
     /**
-     * Sets the era field in a copy of this LocalDate, leaving this
-     * instance unchanged.
+     * Returns a copy of this date with the era field updated.
      * <p>
      * LocalDate is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -1175,8 +1173,7 @@ public LocalDate withEra(int era) {
     }
 
     /**
-     * Sets the century of era field in a copy of this LocalDate, leaving this
-     * instance unchanged.
+     * Returns a copy of this date with the century of era field updated.
      * <p>
      * LocalDate is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -1191,8 +1188,7 @@ public LocalDate withCenturyOfEra(int centuryOfEra) {
     }
 
     /**
-     * Sets the year of era field in a copy of this LocalDate, leaving this
-     * instance unchanged.
+     * Returns a copy of this date with the year of era field updated.
      * <p>
      * LocalDate is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -1207,8 +1203,7 @@ public LocalDate withYearOfEra(int yearOfEra) {
     }
 
     /**
-     * Sets the year of century field in a copy of this LocalDate, leaving this
-     * instance unchanged.
+     * Returns a copy of this date with the year of century field updated.
      * <p>
      * LocalDate is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -1223,8 +1218,7 @@ public LocalDate withYearOfCentury(int yearOfCentury) {
     }
 
     /**
-     * Sets the year field in a copy of this LocalDate, leaving this
-     * instance unchanged.
+     * Returns a copy of this date with the year field updated.
      * <p>
      * LocalDate is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -1239,8 +1233,7 @@ public LocalDate withYear(int year) {
     }
 
     /**
-     * Sets the weekyear field in a copy of this LocalDate, leaving this
-     * instance unchanged.
+     * Returns a copy of this date with the weekyear field updated.
      * <p>
      * LocalDate is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -1255,8 +1248,7 @@ public LocalDate withWeekyear(int weekyear) {
     }
 
     /**
-     * Sets the month of year field in a copy of this LocalDate, leaving this
-     * instance unchanged.
+     * Returns a copy of this date with the month of year field updated.
      * <p>
      * LocalDate is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -1271,8 +1263,7 @@ public LocalDate withMonthOfYear(int monthOfYear) {
     }
 
     /**
-     * Sets the week of weekyear field in a copy of this LocalDate, leaving this
-     * instance unchanged.
+     * Returns a copy of this date with the week of weekyear field updated.
      * <p>
      * LocalDate is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -1287,8 +1278,7 @@ public LocalDate withWeekOfWeekyear(int weekOfWeekyear) {
     }
 
     /**
-     * Sets the day of year field in a copy of this LocalDate, leaving this
-     * instance unchanged.
+     * Returns a copy of this date with the day of year field updated.
      * <p>
      * LocalDate is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -1303,8 +1293,7 @@ public LocalDate withDayOfYear(int dayOfYear) {
     }
 
     /**
-     * Sets the day of month field in a copy of this LocalDate, leaving this
-     * instance unchanged.
+     * Returns a copy of this date with the day of month field updated.
      * <p>
      * LocalDate is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -1319,8 +1308,7 @@ public LocalDate withDayOfMonth(int dayOfMonth) {
     }
 
     /**
-     * Sets the day of week field in a copy of this LocalDate, leaving this
-     * instance unchanged.
+     * Returns a copy of this date with the day of week field updated.
      * <p>
      * LocalDate is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -1336,7 +1324,7 @@ public LocalDate withDayOfWeek(int dayOfWeek) {
 
     //-----------------------------------------------------------------------
     /**
-     * Get the era property.
+     * Get the era property which provides access to advanced functionality.
      *
      * @return the era property
      */
@@ -1345,7 +1333,7 @@ public Property era() {
     }
 
     /**
-     * Get the century of era property.
+     * Get the century of era property which provides access to advanced functionality.
      *
      * @return the year of era property
      */
@@ -1354,7 +1342,7 @@ public Property centuryOfEra() {
     }
 
     /**
-     * Get the year of century property.
+     * Get the year of century property which provides access to advanced functionality.
      *
      * @return the year of era property
      */
@@ -1363,7 +1351,7 @@ public Property yearOfCentury() {
     }
 
     /**
-     * Get the year of era property.
+     * Get the year of era property which provides access to advanced functionality.
      *
      * @return the year of era property
      */
@@ -1372,7 +1360,7 @@ public Property yearOfEra() {
     }
 
     /**
-     * Get the year property.
+     * Get the year property which provides access to advanced functionality.
      *
      * @return the year property
      */
@@ -1381,7 +1369,7 @@ public Property year() {
     }
 
     /**
-     * Get the weekyear property.
+     * Get the weekyear property which provides access to advanced functionality.
      *
      * @return the weekyear property
      */
@@ -1390,7 +1378,7 @@ public Property weekyear() {
     }
 
     /**
-     * Get the month of year property.
+     * Get the month of year property which provides access to advanced functionality.
      *
      * @return the month of year property
      */
@@ -1399,7 +1387,7 @@ public Property monthOfYear() {
     }
 
     /**
-     * Get the week of a week based year property.
+     * Get the week of a week based year property which provides access to advanced functionality.
      *
      * @return the week of a week based year property
      */
@@ -1408,7 +1396,7 @@ public Property weekOfWeekyear() {
     }
 
     /**
-     * Get the day of year property.
+     * Get the day of year property which provides access to advanced functionality.
      *
      * @return the day of year property
      */
@@ -1417,7 +1405,7 @@ public Property dayOfYear() {
     }
 
     /**
-     * Get the day of month property.
+     * Get the day of month property which provides access to advanced functionality.
      *
      * @return the day of month property
      */
@@ -1426,7 +1414,7 @@ public Property dayOfMonth() {
     }
 
     /**
-     * Get the day of week property.
+     * Get the day of week property which provides access to advanced functionality.
      *
      * @return the day of week property
      */
diff --git a/JodaTime/src/java/org/joda/time/LocalDateTime.java b/JodaTime/src/java/org/joda/time/LocalDateTime.java
index c4c86f45e..f86fd4978 100644
--- a/JodaTime/src/java/org/joda/time/LocalDateTime.java
+++ b/JodaTime/src/java/org/joda/time/LocalDateTime.java
@@ -587,7 +587,7 @@ public LocalTime toLocalTime() {
 
     //-----------------------------------------------------------------------
     /**
-     * Gets a copy of this datetime with different local millis.
+     * Returns a copy of this datetime with different local millis.
      * <p>
      * The returned object will be a new instance of the same type.
      * Only the millis will change, the chronology is kept.
@@ -602,7 +602,7 @@ LocalDateTime withLocalMillis(long newMillis) {
 
     //-----------------------------------------------------------------------
     /**
-     * Gets a copy of this LocalDateTime with the specified date,
+     * Returns a copy of this datetime with the specified date,
      * retaining the time fields.
      * <p>
      * If the date is already the date passed in, then <code>this</code> is returned.
@@ -628,7 +628,7 @@ public LocalDateTime withDate(int year, int monthOfYear, int dayOfMonth) {
     }
 
     /**
-     * Gets a copy of this LocalDateTime with the specified time,
+     * Returns a copy of this datetime with the specified time,
      * retaining the date fields.
      * <p>
      * If the time is already the time passed in, then <code>this</code> is returned.
@@ -657,7 +657,7 @@ public LocalDateTime withTime(int hourOfDay, int minuteOfHour, int secondOfMinut
 
     //-----------------------------------------------------------------------
     /**
-     * Gets a copy of this LocalDateTime with the partial set of fields
+     * Returns a copy of this datetime with the partial set of fields
      * replacing those from this instance.
      * <p>
      * For example, if the partial is a <code>TimeOfDay</code> then the time fields
@@ -676,7 +676,7 @@ public LocalDateTime withFields(ReadablePartial partial) {
     }
 
     /**
-     * Gets a copy of this LocalDateTime with the specified field set to a new value.
+     * Returns a copy of this datetime with the specified field set to a new value.
      * <p>
      * For example, if the field type is <code>hourOfDay</code> then the hour of day
      * field would be changed in the returned instance.
@@ -703,7 +703,7 @@ public LocalDateTime withField(DateTimeFieldType fieldType, int value) {
     }
 
     /**
-     * Gets a copy of this LocalDateTime with the value of the specified
+     * Returns a copy of this datetime with the value of the specified
      * field increased.
      * <p>
      * If the addition is zero or the field is null, then <code>this</code> is returned.
@@ -734,7 +734,7 @@ public LocalDateTime withFieldAdded(DurationFieldType fieldType, int amount) {
 
     //-----------------------------------------------------------------------
     /**
-     * Gets a copy of this LocalDateTime with the specified duration added.
+     * Returns a copy of this datetime with the specified duration added.
      * <p>
      * If the addition is zero, then <code>this</code> is returned.
      *
@@ -752,7 +752,7 @@ public LocalDateTime withDurationAdded(ReadableDuration durationToAdd, int scala
     }
 
     /**
-     * Gets a copy of this LocalDateTime with the specified period added.
+     * Returns a copy of this datetime with the specified period added.
      * <p>
      * If the addition is zero, then <code>this</code> is returned.
      * <p>
@@ -776,7 +776,7 @@ public LocalDateTime withPeriodAdded(ReadablePeriod period, int scalar) {
 
     //-----------------------------------------------------------------------
     /**
-     * Gets a copy of this LocalDateTime with the specified duration added.
+     * Returns a copy of this datetime with the specified duration added.
      * <p>
      * If the amount is zero or null, then <code>this</code> is returned.
      *
@@ -789,7 +789,7 @@ public LocalDateTime plus(ReadableDuration duration) {
     }
 
     /**
-     * Gets a copy of this LocalDateTime with the specified period added.
+     * Returns a copy of this datetime with the specified period added.
      * <p>
      * If the amount is zero or null, then <code>this</code> is returned.
      * <p>
@@ -807,7 +807,7 @@ public LocalDateTime plus(ReadablePeriod period) {
 
     //-----------------------------------------------------------------------
     /**
-     * Returns a new LocalDateTime plus the specified number of years.
+     * Returns a copy of this datetime plus the specified number of years.
      * <p>
      * This LocalDateTime instance is immutable and unaffected by this method call.
      * <p>
@@ -830,7 +830,7 @@ public LocalDateTime plusYears(int years) {
     }
 
     /**
-     * Returns a new LocalDateTime plus the specified number of months.
+     * Returns a copy of this datetime plus the specified number of months.
      * <p>
      * This LocalDateTime instance is immutable and unaffected by this method call.
      * <p>
@@ -853,7 +853,7 @@ public LocalDateTime plusMonths(int months) {
     }
 
     /**
-     * Returns a new LocalDateTime plus the specified number of weeks.
+     * Returns a copy of this datetime plus the specified number of weeks.
      * <p>
      * This LocalDateTime instance is immutable and unaffected by this method call.
      * <p>
@@ -876,7 +876,7 @@ public LocalDateTime plusWeeks(int weeks) {
     }
 
     /**
-     * Returns a new LocalDateTime plus the specified number of days.
+     * Returns a copy of this datetime plus the specified number of days.
      * <p>
      * This LocalDateTime instance is immutable and unaffected by this method call.
      * <p>
@@ -900,7 +900,7 @@ public LocalDateTime plusDays(int days) {
 
     //-----------------------------------------------------------------------
     /**
-     * Returns a new LocalDateTime plus the specified number of hours.
+     * Returns a copy of this datetime plus the specified number of hours.
      * <p>
      * This LocalDateTime instance is immutable and unaffected by this method call.
      * <p>
@@ -923,7 +923,7 @@ public LocalDateTime plusHours(int hours) {
     }
 
     /**
-     * Returns a new LocalDateTime plus the specified number of minutes.
+     * Returns a copy of this datetime plus the specified number of minutes.
      * <p>
      * This LocalDateTime instance is immutable and unaffected by this method call.
      * <p>
@@ -946,7 +946,7 @@ public LocalDateTime plusMinutes(int minutes) {
     }
 
     /**
-     * Returns a new LocalDateTime plus the specified number of seconds.
+     * Returns a copy of this datetime plus the specified number of seconds.
      * <p>
      * This LocalDateTime instance is immutable and unaffected by this method call.
      * <p>
@@ -969,7 +969,7 @@ public LocalDateTime plusSeconds(int seconds) {
     }
 
     /**
-     * Returns a new LocalDateTime plus the specified number of millis.
+     * Returns a copy of this datetime plus the specified number of millis.
      * <p>
      * This LocalDateTime instance is immutable and unaffected by this method call.
      * <p>
@@ -993,7 +993,7 @@ public LocalDateTime plusMillis(int millis) {
 
     //-----------------------------------------------------------------------
     /**
-     * Gets a copy of this LocalDateTime with the specified duration taken away.
+     * Returns a copy of this datetime with the specified duration taken away.
      * <p>
      * If the amount is zero or null, then <code>this</code> is returned.
      *
@@ -1006,7 +1006,7 @@ public LocalDateTime minus(ReadableDuration duration) {
     }
 
     /**
-     * Gets a copy of this LocalDateTime with the specified period taken away.
+     * Returns a copy of this datetime with the specified period taken away.
      * <p>
      * If the amount is zero or null, then <code>this</code> is returned.
      * <p>
@@ -1024,7 +1024,7 @@ public LocalDateTime minus(ReadablePeriod period) {
 
     //-----------------------------------------------------------------------
     /**
-     * Returns a new LocalDateTime minus the specified number of years.
+     * Returns a copy of this datetime minus the specified number of years.
      * <p>
      * This LocalDateTime instance is immutable and unaffected by this method call.
      * <p>
@@ -1047,7 +1047,7 @@ public LocalDateTime minusYears(int years) {
     }
 
     /**
-     * Returns a new LocalDateTime minus the specified number of months.
+     * Returns a copy of this datetime minus the specified number of months.
      * <p>
      * This LocalDateTime instance is immutable and unaffected by this method call.
      * <p>
@@ -1070,7 +1070,7 @@ public LocalDateTime minusMonths(int months) {
     }
 
     /**
-     * Returns a new LocalDateTime minus the specified number of weeks.
+     * Returns a copy of this datetime minus the specified number of weeks.
      * <p>
      * This LocalDateTime instance is immutable and unaffected by this method call.
      * <p>
@@ -1093,7 +1093,7 @@ public LocalDateTime minusWeeks(int weeks) {
     }
 
     /**
-     * Returns a new LocalDateTime minus the specified number of days.
+     * Returns a copy of this datetime minus the specified number of days.
      * <p>
      * This LocalDateTime instance is immutable and unaffected by this method call.
      * <p>
@@ -1117,7 +1117,7 @@ public LocalDateTime minusDays(int days) {
 
     //-----------------------------------------------------------------------
     /**
-     * Returns a new LocalDateTime minus the specified number of hours.
+     * Returns a copy of this datetime minus the specified number of hours.
      * <p>
      * This LocalDateTime instance is immutable and unaffected by this method call.
      * <p>
@@ -1140,7 +1140,7 @@ public LocalDateTime minusHours(int hours) {
     }
 
     /**
-     * Returns a new LocalDateTime minus the specified number of minutes.
+     * Returns a copy of this datetime minus the specified number of minutes.
      * <p>
      * This LocalDateTime instance is immutable and unaffected by this method call.
      * <p>
@@ -1163,7 +1163,7 @@ public LocalDateTime minusMinutes(int minutes) {
     }
 
     /**
-     * Returns a new LocalDateTime minus the specified number of seconds.
+     * Returns a copy of this datetime minus the specified number of seconds.
      * <p>
      * This LocalDateTime instance is immutable and unaffected by this method call.
      * <p>
@@ -1186,7 +1186,7 @@ public LocalDateTime minusSeconds(int seconds) {
     }
 
     /**
-     * Returns a new LocalDateTime minus the specified number of millis.
+     * Returns a copy of this datetime minus the specified number of millis.
      * <p>
      * This LocalDateTime instance is immutable and unaffected by this method call.
      * <p>
@@ -1385,8 +1385,7 @@ public int getMillisOfDay() {
 
     //-----------------------------------------------------------------------
     /**
-     * Sets the era field in a copy of this LocalDateTime, leaving this
-     * instance unchanged.
+     * Returns a copy of this datetime with the era field updated.
      * <p>
      * LocalDateTime is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -1401,8 +1400,7 @@ public LocalDateTime withEra(int era) {
     }
 
     /**
-     * Sets the century of era field in a copy of this LocalDateTime, leaving this
-     * instance unchanged.
+     * Returns a copy of this datetime with the century of era field updated.
      * <p>
      * LocalDateTime is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -1417,8 +1415,7 @@ public LocalDateTime withCenturyOfEra(int centuryOfEra) {
     }
 
     /**
-     * Sets the year of era field in a copy of this LocalDateTime, leaving this
-     * instance unchanged.
+     * Returns a copy of this datetime with the year of era field updated.
      * <p>
      * LocalDateTime is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -1433,8 +1430,7 @@ public LocalDateTime withYearOfEra(int yearOfEra) {
     }
 
     /**
-     * Sets the year of century field in a copy of this LocalDateTime, leaving this
-     * instance unchanged.
+     * Returns a copy of this datetime with the year of century field updated.
      * <p>
      * LocalDateTime is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -1449,8 +1445,7 @@ public LocalDateTime withYearOfCentury(int yearOfCentury) {
     }
 
     /**
-     * Sets the year field in a copy of this LocalDateTime, leaving this
-     * instance unchanged.
+     * Returns a copy of this datetime with the year field updated.
      * <p>
      * LocalDateTime is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -1465,8 +1460,7 @@ public LocalDateTime withYear(int year) {
     }
 
     /**
-     * Sets the weekyear field in a copy of this LocalDateTime, leaving this
-     * instance unchanged.
+     * Returns a copy of this datetime with the weekyear field updated.
      * <p>
      * LocalDateTime is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -1481,8 +1475,7 @@ public LocalDateTime withWeekyear(int weekyear) {
     }
 
     /**
-     * Sets the month of year field in a copy of this LocalDateTime, leaving this
-     * instance unchanged.
+     * Returns a copy of this datetime with the month of year field updated.
      * <p>
      * LocalDateTime is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -1497,8 +1490,7 @@ public LocalDateTime withMonthOfYear(int monthOfYear) {
     }
 
     /**
-     * Sets the week of weekyear field in a copy of this LocalDateTime, leaving this
-     * instance unchanged.
+     * Returns a copy of this datetime with the week of weekyear field updated.
      * <p>
      * LocalDateTime is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -1513,8 +1505,7 @@ public LocalDateTime withWeekOfWeekyear(int weekOfWeekyear) {
     }
 
     /**
-     * Sets the day of year field in a copy of this LocalDateTime, leaving this
-     * instance unchanged.
+     * Returns a copy of this datetime with the day of year field updated.
      * <p>
      * LocalDateTime is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -1529,8 +1520,7 @@ public LocalDateTime withDayOfYear(int dayOfYear) {
     }
 
     /**
-     * Sets the day of month field in a copy of this LocalDateTime, leaving this
-     * instance unchanged.
+     * Returns a copy of this datetime with the day of month field updated.
      * <p>
      * LocalDateTime is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -1545,8 +1535,7 @@ public LocalDateTime withDayOfMonth(int dayOfMonth) {
     }
 
     /**
-     * Sets the day of week field in a copy of this LocalDateTime, leaving this
-     * instance unchanged.
+     * Returns a copy of this datetime with the day of week field updated.
      * <p>
      * LocalDateTime is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -1562,8 +1551,7 @@ public LocalDateTime withDayOfWeek(int dayOfWeek) {
 
     //-----------------------------------------------------------------------
     /**
-     * Sets the hour of day field in a copy of this LocalDateTime, leaving this
-     * instance unchanged.
+     * Returns a copy of this datetime with the hour of day field updated.
      * <p>
      * LocalDateTime is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -1578,8 +1566,7 @@ public LocalDateTime withHourOfDay(int hour) {
     }
 
     /**
-     * Sets the minute of hour field in a copy of this LocalDateTime, leaving this
-     * instance unchanged.
+     * Returns a copy of this datetime with the minute of hour field updated.
      * <p>
      * LocalDateTime is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -1594,8 +1581,7 @@ public LocalDateTime withMinuteOfHour(int minute) {
     }
 
     /**
-     * Sets the second of minute field in a copy of this LocalDateTime, leaving this
-     * instance unchanged.
+     * Returns a copy of this datetime with the second of minute field updated.
      * <p>
      * LocalDateTime is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -1610,8 +1596,7 @@ public LocalDateTime withSecondOfMinute(int second) {
     }
 
     /**
-     * Sets the millis of second field in a copy of this LocalDateTime, leaving this
-     * instance unchanged.
+     * Returns a copy of this datetime with the millis of second field updated.
      * <p>
      * LocalDateTime is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -1626,8 +1611,7 @@ public LocalDateTime withMillisOfSecond(int millis) {
     }
 
     /**
-     * Sets the millis of day field in a copy of this LocalDateTime, leaving this
-     * instance unchanged.
+     * Returns a copy of this datetime with the millis of day field updated.
      * <p>
      * LocalDateTime is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -1643,7 +1627,7 @@ public LocalDateTime withMillisOfDay(int millis) {
 
     //-----------------------------------------------------------------------
     /**
-     * Get the era property.
+     * Get the era property which provides access to advanced functionality.
      *
      * @return the era property
      */
@@ -1652,7 +1636,7 @@ public Property era() {
     }
 
     /**
-     * Get the century of era property.
+     * Get the century of era property which provides access to advanced functionality.
      *
      * @return the year of era property
      */
@@ -1661,7 +1645,7 @@ public Property centuryOfEra() {
     }
 
     /**
-     * Get the year of century property.
+     * Get the year of century property which provides access to advanced functionality.
      *
      * @return the year of era property
      */
@@ -1670,7 +1654,7 @@ public Property yearOfCentury() {
     }
 
     /**
-     * Get the year of era property.
+     * Get the year of era property which provides access to advanced functionality.
      *
      * @return the year of era property
      */
@@ -1679,7 +1663,7 @@ public Property yearOfEra() {
     }
 
     /**
-     * Get the year property.
+     * Get the year property which provides access to advanced functionality.
      *
      * @return the year property
      */
@@ -1688,7 +1672,7 @@ public Property year() {
     }
 
     /**
-     * Get the weekyear property.
+     * Get the weekyear property which provides access to advanced functionality.
      *
      * @return the weekyear property
      */
@@ -1697,7 +1681,7 @@ public Property weekyear() {
     }
 
     /**
-     * Get the month of year property.
+     * Get the month of year property which provides access to advanced functionality.
      *
      * @return the month of year property
      */
@@ -1706,7 +1690,7 @@ public Property monthOfYear() {
     }
 
     /**
-     * Get the week of a week based year property.
+     * Get the week of a week based year property which provides access to advanced functionality.
      *
      * @return the week of a week based year property
      */
@@ -1715,7 +1699,7 @@ public Property weekOfWeekyear() {
     }
 
     /**
-     * Get the day of year property.
+     * Get the day of year property which provides access to advanced functionality.
      *
      * @return the day of year property
      */
@@ -1724,7 +1708,7 @@ public Property dayOfYear() {
     }
 
     /**
-     * Get the day of month property.
+     * Get the day of month property which provides access to advanced functionality.
      *
      * @return the day of month property
      */
@@ -1733,7 +1717,7 @@ public Property dayOfMonth() {
     }
 
     /**
-     * Get the day of week property.
+     * Get the day of week property which provides access to advanced functionality.
      *
      * @return the day of week property
      */
@@ -1743,7 +1727,7 @@ public Property dayOfWeek() {
 
     //-----------------------------------------------------------------------
     /**
-     * Get the hour of day field property
+     * Get the hour of day field property which provides access to advanced functionality.
      * 
      * @return the hour of day property
      */
@@ -1752,7 +1736,7 @@ public Property hourOfDay() {
     }
 
     /**
-     * Get the minute of hour field property
+     * Get the minute of hour field property which provides access to advanced functionality.
      * 
      * @return the minute of hour property
      */
@@ -1761,7 +1745,7 @@ public Property minuteOfHour() {
     }
 
     /**
-     * Get the second of minute field property
+     * Get the second of minute field property which provides access to advanced functionality.
      * 
      * @return the second of minute property
      */
@@ -1770,7 +1754,7 @@ public Property secondOfMinute() {
     }
 
     /**
-     * Get the millis of second property
+     * Get the millis of second property which provides access to advanced functionality.
      * 
      * @return the millis of second property
      */
@@ -1779,7 +1763,7 @@ public Property millisOfSecond() {
     }
 
     /**
-     * Get the millis of day property
+     * Get the millis of day property which provides access to advanced functionality.
      * 
      * @return the millis of day property
      */
diff --git a/JodaTime/src/java/org/joda/time/LocalTime.java b/JodaTime/src/java/org/joda/time/LocalTime.java
index 5028a983d..7b1622aee 100644
--- a/JodaTime/src/java/org/joda/time/LocalTime.java
+++ b/JodaTime/src/java/org/joda/time/LocalTime.java
@@ -566,7 +566,7 @@ public Chronology getChronology() {
 
     //-----------------------------------------------------------------------
     /**
-     * Gets a copy of this LocalTime with different local millis.
+     * Returns a copy of this time with different local millis.
      * <p>
      * The returned object will be a new instance of the same type.
      * Only the millis will change, the chronology is kept.
@@ -581,7 +581,7 @@ LocalTime withLocalMillis(long newMillis) {
 
     //-----------------------------------------------------------------------
     /**
-     * Gets a copy of this LocalTime with the partial set of fields replacing
+     * Returns a copy of this time with the partial set of fields replacing
      * those from this instance.
      * <p>
      * For example, if the partial contains an hour and minute then those two
@@ -601,7 +601,7 @@ public LocalTime withFields(ReadablePartial partial) {
     }
 
     /**
-     * Gets a copy of this LocalTime with the specified field set
+     * Returns a copy of this time with the specified field set
      * to a new value.
      * <p>
      * For example, if the field type is <code>hourOfDay</code> then the hour of day
@@ -631,7 +631,7 @@ public LocalTime withField(DateTimeFieldType fieldType, int value) {
     }
 
     /**
-     * Gets a copy of this LocalTime with the value of the specified
+     * Returns a copy of this time with the value of the specified
      * field increased.
      * <p>
      * If the addition is zero or the field is null, then <code>this</code>
@@ -668,7 +668,7 @@ public LocalTime withFieldAdded(DurationFieldType fieldType, int amount) {
 
     //-----------------------------------------------------------------------
     /**
-     * Gets a copy of this LocalTime with the specified period added.
+     * Returns a copy of this time with the specified period added.
      * <p>
      * If the addition is zero, then <code>this</code> is returned.
      * <p>
@@ -692,7 +692,7 @@ public LocalTime withPeriodAdded(ReadablePeriod period, int scalar) {
 
     //-----------------------------------------------------------------------
     /**
-     * Gets a copy of this LocalTime with the specified period added.
+     * Returns a copy of this time with the specified period added.
      * <p>
      * If the amount is zero or null, then <code>this</code> is returned.
      * <p>
@@ -710,7 +710,7 @@ public LocalTime plus(ReadablePeriod period) {
 
     //-----------------------------------------------------------------------
     /**
-     * Returns a new LocalTime plus the specified number of hours.
+     * Returns a copy of this time plus the specified number of hours.
      * <p>
      * This LocalTime instance is immutable and unaffected by this method call.
      * <p>
@@ -733,7 +733,7 @@ public LocalTime plusHours(int hours) {
     }
 
     /**
-     * Returns a new LocalTime plus the specified number of minutes.
+     * Returns a copy of this time plus the specified number of minutes.
      * <p>
      * This LocalTime instance is immutable and unaffected by this method call.
      * <p>
@@ -756,7 +756,7 @@ public LocalTime plusMinutes(int minutes) {
     }
 
     /**
-     * Returns a new LocalTime plus the specified number of seconds.
+     * Returns a copy of this time plus the specified number of seconds.
      * <p>
      * This LocalTime instance is immutable and unaffected by this method call.
      * <p>
@@ -779,7 +779,7 @@ public LocalTime plusSeconds(int seconds) {
     }
 
     /**
-     * Returns a new LocalTime plus the specified number of millis.
+     * Returns a copy of this time plus the specified number of millis.
      * <p>
      * This LocalTime instance is immutable and unaffected by this method call.
      * <p>
@@ -803,7 +803,7 @@ public LocalTime plusMillis(int millis) {
 
     //-----------------------------------------------------------------------
     /**
-     * Gets a copy of this LocalTime with the specified period taken away.
+     * Returns a copy of this time with the specified period taken away.
      * <p>
      * If the amount is zero or null, then <code>this</code> is returned.
      * <p>
@@ -821,7 +821,7 @@ public LocalTime minus(ReadablePeriod period) {
 
     //-----------------------------------------------------------------------
     /**
-     * Returns a new LocalTime minus the specified number of hours.
+     * Returns a copy of this time minus the specified number of hours.
      * <p>
      * This LocalTime instance is immutable and unaffected by this method call.
      * <p>
@@ -844,7 +844,7 @@ public LocalTime minusHours(int hours) {
     }
 
     /**
-     * Returns a new LocalTime minus the specified number of minutes.
+     * Returns a copy of this time minus the specified number of minutes.
      * <p>
      * This LocalTime instance is immutable and unaffected by this method call.
      * <p>
@@ -867,7 +867,7 @@ public LocalTime minusMinutes(int minutes) {
     }
 
     /**
-     * Returns a new LocalTime minus the specified number of seconds.
+     * Returns a copy of this time minus the specified number of seconds.
      * <p>
      * This LocalTime instance is immutable and unaffected by this method call.
      * <p>
@@ -890,7 +890,7 @@ public LocalTime minusSeconds(int seconds) {
     }
 
     /**
-     * Returns a new LocalTime minus the specified number of millis.
+     * Returns a copy of this time minus the specified number of millis.
      * <p>
      * This LocalTime instance is immutable and unaffected by this method call.
      * <p>
@@ -979,8 +979,7 @@ public int getMillisOfDay() {
 
     //-----------------------------------------------------------------------
     /**
-     * Sets the hour of day field in a copy of this LocalTime, leaving this
-     * instance unchanged.
+     * Returns a copy of this time with the hour of day field updated.
      * <p>
      * LocalTime is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -995,8 +994,7 @@ public LocalTime withHourOfDay(int hour) {
     }
 
     /**
-     * Sets the minute of hour field in a copy of this LocalTime, leaving this
-     * instance unchanged.
+     * Returns a copy of this time with the minute of hour field updated.
      * <p>
      * LocalTime is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -1011,8 +1009,7 @@ public LocalTime withMinuteOfHour(int minute) {
     }
 
     /**
-     * Sets the second of minute field in a copy of this LocalTime, leaving this
-     * instance unchanged.
+     * Returns a copy of this time with the second of minute field updated.
      * <p>
      * LocalTime is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -1027,8 +1024,7 @@ public LocalTime withSecondOfMinute(int second) {
     }
 
     /**
-     * Sets the millis of second field in a copy of this LocalTime, leaving this
-     * instance unchanged.
+     * Returns a copy of this time with the millis of second field updated.
      * <p>
      * LocalTime is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -1043,8 +1039,7 @@ public LocalTime withMillisOfSecond(int millis) {
     }
 
     /**
-     * Sets the millis of day field in a copy of this LocalTime, leaving this
-     * instance unchanged.
+     * Returns a copy of this time with the millis of day field updated.
      * <p>
      * LocalTime is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -1060,7 +1055,7 @@ public LocalTime withMillisOfDay(int millis) {
 
     //-----------------------------------------------------------------------
     /**
-     * Get the hour of day field property
+     * Get the hour of day field property which provides access to advanced functionality.
      * 
      * @return the hour of day property
      */
@@ -1069,7 +1064,7 @@ public Property hourOfDay() {
     }
 
     /**
-     * Get the minute of hour field property
+     * Get the minute of hour field property which provides access to advanced functionality.
      * 
      * @return the minute of hour property
      */
@@ -1078,7 +1073,7 @@ public Property minuteOfHour() {
     }
 
     /**
-     * Get the second of minute field property
+     * Get the second of minute field property which provides access to advanced functionality.
      * 
      * @return the second of minute property
      */
@@ -1087,7 +1082,7 @@ public Property secondOfMinute() {
     }
 
     /**
-     * Get the millis of second property
+     * Get the millis of second property which provides access to advanced functionality.
      * 
      * @return the millis of second property
      */
@@ -1096,7 +1091,7 @@ public Property millisOfSecond() {
     }
 
     /**
-     * Get the millis of day property
+     * Get the millis of day property which provides access to advanced functionality.
      * 
      * @return the millis of day property
      */
diff --git a/JodaTime/src/java/org/joda/time/TimeOfDay.java b/JodaTime/src/java/org/joda/time/TimeOfDay.java
index 7904b2668..e96068fd7 100644
--- a/JodaTime/src/java/org/joda/time/TimeOfDay.java
+++ b/JodaTime/src/java/org/joda/time/TimeOfDay.java
@@ -35,6 +35,10 @@
  * This class has not yet been formally deprecated due to the large number
  * of existing users.
  * <p>
+ * NOTE: This class only supports the four fields listed above. Thus, you
+ * cannot query the millisOfDay or secondOfDay fields for example.
+ * The new <code>LocalTime</code> class removes this restriction.
+ * <p>
  * Calculations on TimeOfDay are performed using a {@link Chronology}.
  * This chronology is set to be in the UTC time zone for all calculations.
  * <p>
@@ -475,7 +479,7 @@ public DateTimeFieldType getFieldType(int index) {
 
     //-----------------------------------------------------------------------
     /**
-     * Creates a new TimeOfDay instance with the specified chronology.
+     * Returns a copy of this time with the specified chronology.
      * This instance is immutable and unaffected by this method call.
      * <p>
      * This method retains the values of the fields, thus the result will
@@ -501,7 +505,7 @@ public TimeOfDay withChronologyRetainFields(Chronology newChronology) {
     }
 
     /**
-     * Gets a copy of this time with the specified field set to a new value.
+     * Returns a copy of this time with the specified field set to a new value.
      * <p>
      * For example, if the field type is <code>minuteOfHour</code> then the day
      * would be changed in the returned instance.
@@ -529,7 +533,7 @@ public TimeOfDay withField(DateTimeFieldType fieldType, int value) {
     }
 
     /**
-     * Gets a copy of this time with the value of the specified field increased,
+     * Returns a copy of this time with the value of the specified field increased,
      * wrapping to what would be a new day if required.
      * <p>
      * If the addition is zero, then <code>this</code> is returned.
@@ -558,7 +562,7 @@ public TimeOfDay withFieldAdded(DurationFieldType fieldType, int amount) {
     }
 
     /**
-     * Gets a copy of this date with the specified period added,
+     * Returns a copy of this time with the specified period added,
      * wrapping to what would be a new day if required.
      * <p>
      * If the addition is zero, then <code>this</code> is returned.
@@ -592,7 +596,7 @@ public TimeOfDay withPeriodAdded(ReadablePeriod period, int scalar) {
 
     //-----------------------------------------------------------------------
     /**
-     * Gets a copy of this instance with the specified period added,
+     * Returns a copy of this time with the specified period added,
      * wrapping to what would be a new day if required.
      * <p>
      * If the amount is zero or null, then <code>this</code> is returned.
@@ -611,7 +615,7 @@ public TimeOfDay plus(ReadablePeriod period) {
 
     //-----------------------------------------------------------------------
     /**
-     * Returns a new time plus the specified number of hours.
+     * Returns a copy of this time plus the specified number of hours.
      * <p>
      * This time instance is immutable and unaffected by this method call.
      * <p>
@@ -631,7 +635,7 @@ public TimeOfDay plusHours(int hours) {
     }
 
     /**
-     * Returns a new time plus the specified number of minutes.
+     * Returns a copy of this time plus the specified number of minutes.
      * <p>
      * This time instance is immutable and unaffected by this method call.
      * <p>
@@ -651,7 +655,7 @@ public TimeOfDay plusMinutes(int minutes) {
     }
 
     /**
-     * Returns a new time plus the specified number of seconds.
+     * Returns a copy of this time plus the specified number of seconds.
      * <p>
      * This time instance is immutable and unaffected by this method call.
      * <p>
@@ -671,7 +675,7 @@ public TimeOfDay plusSeconds(int seconds) {
     }
 
     /**
-     * Returns a new time plus the specified number of millis.
+     * Returns a copy of this time plus the specified number of millis.
      * <p>
      * This time instance is immutable and unaffected by this method call.
      * <p>
@@ -692,7 +696,7 @@ public TimeOfDay plusMillis(int millis) {
 
     //-----------------------------------------------------------------------
     /**
-     * Gets a copy of this instance with the specified period take away,
+     * Returns a copy of this time with the specified period taken away,
      * wrapping to what would be a new day if required.
      * <p>
      * If the amount is zero or null, then <code>this</code> is returned.
@@ -711,7 +715,7 @@ public TimeOfDay minus(ReadablePeriod period) {
 
     //-----------------------------------------------------------------------
     /**
-     * Returns a new time minus the specified number of hours.
+     * Returns a copy of this time minus the specified number of hours.
      * <p>
      * This time instance is immutable and unaffected by this method call.
      * <p>
@@ -731,7 +735,7 @@ public TimeOfDay minusHours(int hours) {
     }
 
     /**
-     * Returns a new time minus the specified number of minutes.
+     * Returns a copy of this time minus the specified number of minutes.
      * <p>
      * This time instance is immutable and unaffected by this method call.
      * <p>
@@ -751,7 +755,7 @@ public TimeOfDay minusMinutes(int minutes) {
     }
 
     /**
-     * Returns a new time minus the specified number of seconds.
+     * Returns a copy of this time minus the specified number of seconds.
      * <p>
      * This time instance is immutable and unaffected by this method call.
      * <p>
@@ -771,7 +775,7 @@ public TimeOfDay minusSeconds(int seconds) {
     }
 
     /**
-     * Returns a new time minus the specified number of millis.
+     * Returns a copy of this time minus the specified number of millis.
      * <p>
      * This time instance is immutable and unaffected by this method call.
      * <p>
@@ -883,8 +887,7 @@ public int getMillisOfSecond() {
 
     //-----------------------------------------------------------------------
     /**
-     * Sets the hour of day field in a copy of this TimeOfDay, leaving this
-     * instance unchanged.
+     * Returns a copy of this time with the hour of day field updated.
      * <p>
      * TimeOfDay is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -902,8 +905,7 @@ public TimeOfDay withHourOfDay(int hour) {
     }
 
     /**
-     * Sets the minute of hour field in a copy of this TimeOfDay, leaving this
-     * instance unchanged.
+     * Returns a copy of this time with the minute of hour field updated.
      * <p>
      * TimeOfDay is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -921,8 +923,7 @@ public TimeOfDay withMinuteOfHour(int minute) {
     }
 
     /**
-     * Sets the second of minute field in a copy of this TimeOfDay, leaving this
-     * instance unchanged.
+     * Returns a copy of this time with the second of minute field updated.
      * <p>
      * TimeOfDay is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -940,8 +941,7 @@ public TimeOfDay withSecondOfMinute(int second) {
     }
 
     /**
-     * Sets the millis of second field in a copy of this TimeOfDay, leaving this
-     * instance unchanged.
+     * Returns a copy of this time with the millis of second field updated.
      * <p>
      * TimeOfDay is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -960,7 +960,7 @@ public TimeOfDay withMillisOfSecond(int millis) {
 
     //-----------------------------------------------------------------------
     /**
-     * Get the hour of day (0-23) field property
+     * Get the hour of day field property which provides access to advanced functionality.
      * 
      * @return the hour of day property
      */
@@ -969,7 +969,7 @@ public Property hourOfDay() {
     }
 
     /**
-     * Get the minute of hour field property
+     * Get the minute of hour field property which provides access to advanced functionality.
      * 
      * @return the minute of hour property
      */
@@ -978,7 +978,7 @@ public Property minuteOfHour() {
     }
 
     /**
-     * Get the second of minute field property
+     * Get the second of minute field property which provides access to advanced functionality.
      * 
      * @return the second of minute property
      */
@@ -987,7 +987,7 @@ public Property secondOfMinute() {
     }
 
     /**
-     * Get the millis of second property
+     * Get the millis of second property which provides access to advanced functionality.
      * 
      * @return the millis of second property
      */
diff --git a/JodaTime/src/java/org/joda/time/YearMonthDay.java b/JodaTime/src/java/org/joda/time/YearMonthDay.java
index f7e1a1b1c..ec24f636e 100644
--- a/JodaTime/src/java/org/joda/time/YearMonthDay.java
+++ b/JodaTime/src/java/org/joda/time/YearMonthDay.java
@@ -35,6 +35,10 @@
  * This class has not yet been formally deprecated due to the large number
  * of existing users.
  * <p>
+ * NOTE: This class only supports the three fields listed above. Thus, you
+ * cannot query the dayOfWeek or centuryOfEra fields for example.
+ * The new <code>LocalDate</code> class removes this restriction.
+ * <p>
  * Calculations on YearMonthDay are performed using a {@link Chronology}.
  * This chronology is set to be in the UTC time zone for all calculations.
  * <p>
@@ -362,7 +366,7 @@ public DateTimeFieldType getFieldType(int index) {
 
     //-----------------------------------------------------------------------
     /**
-     * Creates a new YearMonthDay instance with the specified chronology.
+     * Returns a copy of this date with the specified chronology.
      * This instance is immutable and unaffected by this method call.
      * <p>
      * This method retains the values of the fields, thus the result will
@@ -388,7 +392,7 @@ public YearMonthDay withChronologyRetainFields(Chronology newChronology) {
     }
 
     /**
-     * Gets a copy of this date with the specified field set to a new value.
+     * Returns a copy of this date with the specified field set to a new value.
      * <p>
      * For example, if the field type is <code>dayOfMonth</code> then the day
      * would be changed in the returned instance.
@@ -416,7 +420,7 @@ public YearMonthDay withField(DateTimeFieldType fieldType, int value) {
     }
 
     /**
-     * Gets a copy of this date with the value of the specified field increased.
+     * Returns a copy of this date with the value of the specified field increased.
      * <p>
      * If the addition is zero, then <code>this</code> is returned.
      * <p>
@@ -444,7 +448,7 @@ public YearMonthDay withFieldAdded(DurationFieldType fieldType, int amount) {
     }
 
     /**
-     * Gets a copy of this date with the specified period added.
+     * Returns a copy of this date with the specified period added.
      * <p>
      * If the addition is zero, then <code>this</code> is returned.
      * Fields in the period that aren't present in the partial are ignored.
@@ -477,7 +481,7 @@ public YearMonthDay withPeriodAdded(ReadablePeriod period, int scalar) {
 
     //-----------------------------------------------------------------------
     /**
-     * Gets a copy of this instance with the specified period added.
+     * Returns a copy of this date with the specified period added.
      * <p>
      * If the amount is zero or null, then <code>this</code> is returned.
      * <p>
@@ -495,7 +499,7 @@ public YearMonthDay plus(ReadablePeriod period) {
 
     //-----------------------------------------------------------------------
     /**
-     * Returns a new date plus the specified number of years.
+     * Returns a copy of this date plus the specified number of years.
      * <p>
      * This date instance is immutable and unaffected by this method call.
      * <p>
@@ -515,7 +519,7 @@ public YearMonthDay plusYears(int years) {
     }
 
     /**
-     * Returns a new date plus the specified number of months.
+     * Returns a copy of this date plus the specified number of months.
      * <p>
      * This date instance is immutable and unaffected by this method call.
      * <p>
@@ -535,7 +539,7 @@ public YearMonthDay plusMonths(int months) {
     }
 
     /**
-     * Returns a new date plus the specified number of days.
+     * Returns a copy of this date plus the specified number of days.
      * <p>
      * This date instance is immutable and unaffected by this method call.
      * <p>
@@ -556,7 +560,7 @@ public YearMonthDay plusDays(int days) {
 
     //-----------------------------------------------------------------------
     /**
-     * Gets a copy of this instance with the specified period take away.
+     * Returns a copy of this date with the specified period taken away.
      * <p>
      * If the amount is zero or null, then <code>this</code> is returned.
      * <p>
@@ -574,7 +578,7 @@ public YearMonthDay minus(ReadablePeriod period) {
 
     //-----------------------------------------------------------------------
     /**
-     * Returns a new datetime minus the specified number of years.
+     * Returns a copy of this date minus the specified number of years.
      * <p>
      * This datetime instance is immutable and unaffected by this method call.
      * <p>
@@ -594,7 +598,7 @@ public YearMonthDay minusYears(int years) {
     }
 
     /**
-     * Returns a new datetime minus the specified number of months.
+     * Returns a copy of this date minus the specified number of months.
      * <p>
      * This datetime instance is immutable and unaffected by this method call.
      * <p>
@@ -614,7 +618,7 @@ public YearMonthDay minusMonths(int months) {
     }
 
     /**
-     * Returns a new datetime minus the specified number of days.
+     * Returns a copy of this date minus the specified number of days.
      * <p>
      * This datetime instance is immutable and unaffected by this method call.
      * <p>
@@ -825,8 +829,7 @@ public int getDayOfMonth() {
 
     //-----------------------------------------------------------------------
     /**
-     * Sets the year field in a copy of this YearMonthDay, leaving this
-     * instance unchanged.
+     * Returns a copy of this date with the year field updated.
      * <p>
      * YearMonthDay is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -844,8 +847,7 @@ public YearMonthDay withYear(int year) {
     }
 
     /**
-     * Sets the month of year field in a copy of this YearMonthDay, leaving this
-     * instance unchanged.
+     * Returns a copy of this date with the month of year field updated.
      * <p>
      * YearMonthDay is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -863,8 +865,7 @@ public YearMonthDay withMonthOfYear(int monthOfYear) {
     }
 
     /**
-     * Sets the day of month field in a copy of this YearMonthDay, leaving this
-     * instance unchanged.
+     * Returns a copy of this date with the day of month field updated.
      * <p>
      * YearMonthDay is immutable, so there are no set methods.
      * Instead, this method returns a new instance with the value of
@@ -883,7 +884,7 @@ public YearMonthDay withDayOfMonth(int dayOfMonth) {
 
     //-----------------------------------------------------------------------
     /**
-     * Get the year field property
+     * Get the year field property which provides access to advanced functionality.
      * 
      * @return the year property
      */
@@ -892,7 +893,7 @@ public Property year() {
     }
 
     /**
-     * Get the month of year field property
+     * Get the month of year field property which provides access to advanced functionality.
      * 
      * @return the month of year property
      */
@@ -901,7 +902,7 @@ public Property monthOfYear() {
     }
 
     /**
-     * Get the day of month field property
+     * Get the day of month field property which provides access to advanced functionality.
      * 
      * @return the day of month property
      */

From d9cb23bc1679de10deebd462bdc97e77421b1aa7 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 1 Jul 2006 11:00:48 +0000
Subject: [PATCH 100/115] Check for construction by UTC zone, switching tests
 to PARIS zone for safety

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1097 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../joda/time/TestInterval_Constructors.java  | 52 +++++++++++++------
 1 file changed, 35 insertions(+), 17 deletions(-)

diff --git a/JodaTime/src/test/org/joda/time/TestInterval_Constructors.java b/JodaTime/src/test/org/joda/time/TestInterval_Constructors.java
index de600cbcb..c6a42e392 100644
--- a/JodaTime/src/test/org/joda/time/TestInterval_Constructors.java
+++ b/JodaTime/src/test/org/joda/time/TestInterval_Constructors.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2006 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -53,17 +53,17 @@
     private long TEST_TIME_NOW =
             (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
             
-    // 2002-04-05
-    private long TEST_TIME1 =
-            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY
-            + 12L * DateTimeConstants.MILLIS_PER_HOUR
-            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;
-        
-    // 2003-05-06
-    private long TEST_TIME2 =
-            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
-            + 14L * DateTimeConstants.MILLIS_PER_HOUR
-            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;
+//    // 2002-04-05
+//    private long TEST_TIME1 =
+//            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY
+//            + 12L * DateTimeConstants.MILLIS_PER_HOUR
+//            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;
+//        
+//    // 2003-05-06
+//    private long TEST_TIME2 =
+//            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
+//            + 14L * DateTimeConstants.MILLIS_PER_HOUR
+//            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;
     
     private DateTimeZone originalDateTimeZone = null;
     private TimeZone originalTimeZone = null;
@@ -86,9 +86,9 @@ protected void setUp() throws Exception {
         originalDateTimeZone = DateTimeZone.getDefault();
         originalTimeZone = TimeZone.getDefault();
         originalLocale = Locale.getDefault();
-        DateTimeZone.setDefault(LONDON);
-        TimeZone.setDefault(TimeZone.getTimeZone("Europe/London"));
-        Locale.setDefault(Locale.UK);
+        DateTimeZone.setDefault(PARIS);
+        TimeZone.setDefault(PARIS.toTimeZone());
+        Locale.setDefault(Locale.FRANCE);
     }
 
     protected void tearDown() throws Exception {
@@ -200,7 +200,7 @@ public void testConstructor_RI_RI7() throws Throwable {
         } catch (IllegalArgumentException ex) {}
     }
 
-    public void testConstructor_RI_RI8() throws Throwable {
+    public void testConstructor_RI_RI_chronoStart() throws Throwable {
         DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, GJChronology.getInstance());
         DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);
         Interval test = new Interval(dt1, dt2);
@@ -209,7 +209,7 @@ public void testConstructor_RI_RI8() throws Throwable {
         assertEquals(GJChronology.getInstance(), test.getChronology());
     }
 
-    public void testConstructor_RI_RI9() throws Throwable {
+    public void testConstructor_RI_RI_chronoEnd() throws Throwable {
         DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);
         DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, GJChronology.getInstance());
         Interval test = new Interval(dt1, dt2);
@@ -218,6 +218,24 @@ public void testConstructor_RI_RI9() throws Throwable {
         assertEquals(ISOChronology.getInstance(), test.getChronology());
     }
 
+    public void testConstructor_RI_RI_zones() throws Throwable {
+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, LONDON);
+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, PARIS);
+        Interval test = new Interval(dt1, dt2);
+        assertEquals(dt1.getMillis(), test.getStartMillis());
+        assertEquals(dt2.getMillis(), test.getEndMillis());
+        assertEquals(ISOChronology.getInstance(LONDON), test.getChronology());
+    }
+
+    public void testConstructor_RI_RI_instant() throws Throwable {
+        Instant dt1 = new Instant(12345678L);
+        Instant dt2 = new Instant(22345678L);
+        Interval test = new Interval(dt1, dt2);
+        assertEquals(12345678L, test.getStartMillis());
+        assertEquals(22345678L, test.getEndMillis());
+        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());
+    }
+
     //-----------------------------------------------------------------------
     public void testConstructor_RI_RP1() throws Throwable {
         DateTime dt = new DateTime(TEST_TIME_NOW);

From 0c90a60c2786b06ab6f46b4ec8f07c244980756e Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 1 Jul 2006 11:03:35 +0000
Subject: [PATCH 101/115] Bug fix Interval overlap/gap methods so they return
 intervals with the correct chronology Spotted by Jozsef Hontvari

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1098 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  4 ++
 JodaTime/src/java/org/joda/time/Interval.java | 23 ++++++--
 .../org/joda/time/TestInterval_Basics.java    | 58 ++++++++++++++++++-
 3 files changed, 76 insertions(+), 9 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index e4eadb8b2..ea30c5dbb 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -98,6 +98,10 @@ Bug fixes since 1.2
     The methods have been changed to preserve the time zone.
    The similarly named methods on Instant have not changed behaviour.
 
+- Interval.overlap/Interval.gap
+  Previously these methods returned intervals in the default time zone
+  Now, they return intervals in the time zone of the original interval
+
 - Interval/MutableInterval.overlaps(ReadableInterval)
   Previously, this method didn't handle empty intervals correctly
   Now, an empty interval at the start of a larger interval does overlap
diff --git a/JodaTime/src/java/org/joda/time/Interval.java b/JodaTime/src/java/org/joda/time/Interval.java
index 9a125a3e7..8f39bb829 100644
--- a/JodaTime/src/java/org/joda/time/Interval.java
+++ b/JodaTime/src/java/org/joda/time/Interval.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2006 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -177,12 +177,17 @@ public Interval toInterval() {
 
     //-----------------------------------------------------------------------
     /**
-     * Gets the overlap where this interval and that specified.
+     * Gets the overlap between this interval and another interval.
      * <p>
      * Any two intervals can overlap, abut, or have a gap between them.
      * This method returns the amount of the overlap, only if the
      * intervals do overlap.
      * If the intervals do not overlap, then null is returned.
+     * <p>
+     * The chronology of the returned interval is the same as that of
+     * this interval (the chronology of the interval parameter is not used).
+     * Note that the use of the chronology was only correctly implemented
+     * in version 1.3.
      *
      * @param interval  the interval to examine, null means now
      * @return the overlap interval, null if no overlap
@@ -195,17 +200,23 @@ public Interval overlap(ReadableInterval interval) {
         }
         long start = Math.max(getStartMillis(), interval.getStartMillis());
         long end = Math.min(getEndMillis(), interval.getEndMillis());
-        return new Interval(start, end);
+        return new Interval(start, end, getChronology());
     }
 
     //-----------------------------------------------------------------------
     /**
-     * Gets the gap between this interval and that specified.
+     * Gets the gap between this interval and another interval.
+     * The other interval can be either before or after this interval.
      * <p>
      * Any two intervals can overlap, abut, or have a gap between them.
      * This method returns the amount of the gap only if the
      * intervals do actually have a gap between them.
      * If the intervals overlap or abut, then null is returned.
+     * <p>
+     * The chronology of the returned interval is the same as that of
+     * this interval (the chronology of the interval parameter is not used).
+     * Note that the use of the chronology was only correctly implemented
+     * in version 1.3.
      *
      * @param interval  the interval to examine, null means now
      * @return the gap interval, null if no gap
@@ -221,9 +232,9 @@ public Interval gap(ReadableInterval interval) {
         long thisStart = getStartMillis();
         long thisEnd = getEndMillis();
         if (thisStart >= otherEnd) {
-            return new Interval(otherEnd, thisStart);
+            return new Interval(otherEnd, thisStart, getChronology());
         } else {
-            return new Interval(thisEnd, otherStart);
+            return new Interval(thisEnd, otherStart, getChronology());
         }
     }
 
diff --git a/JodaTime/src/test/org/joda/time/TestInterval_Basics.java b/JodaTime/src/test/org/joda/time/TestInterval_Basics.java
index fbda22fd1..49cdbbbc0 100644
--- a/JodaTime/src/test/org/joda/time/TestInterval_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestInterval_Basics.java
@@ -40,6 +40,7 @@
     // Test in 2002/03 as time zones are more well known
     // (before the late 90's they were all over the place)
 
+    private static final DateTimeZone MOSCOW = DateTimeZone.forID("Europe/Moscow");
     private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
     private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
     private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);
@@ -90,9 +91,9 @@ protected void setUp() throws Exception {
         originalDateTimeZone = DateTimeZone.getDefault();
         originalTimeZone = TimeZone.getDefault();
         originalLocale = Locale.getDefault();
-        DateTimeZone.setDefault(LONDON);
-        TimeZone.setDefault(TimeZone.getTimeZone("Europe/London"));
-        Locale.setDefault(Locale.UK);
+        DateTimeZone.setDefault(PARIS);
+        TimeZone.setDefault(PARIS.toTimeZone());
+        Locale.setDefault(Locale.FRANCE);
     }
 
     protected void tearDown() throws Exception {
@@ -261,6 +262,7 @@ public void testContains_RInterval() {
         assertEquals(true, test.contains((ReadableInterval) null));
     }
 
+    //-----------------------------------------------------------------------
     public void testOverlaps_RInterval() {
         Interval test = new Interval(TEST_TIME1, TEST_TIME2);
         
@@ -353,6 +355,31 @@ public void testOverlap_RInterval() {
                 test.overlap((ReadableInterval) null));
     }
 
+    public void testOverlap_RInterval_zone() {
+        Interval testA = new Interval(new DateTime(TEST_TIME1, LONDON), new DateTime(TEST_TIME2, LONDON));
+        assertEquals(ISOChronology.getInstance(LONDON), testA.getChronology());
+        
+        Interval testB = new Interval(new DateTime(TEST_TIME1 + 1, MOSCOW), new DateTime(TEST_TIME2 + 1, MOSCOW));
+        assertEquals(ISOChronology.getInstance(MOSCOW), testB.getChronology());
+        
+        Interval resultAB = testA.overlap(testB);
+        assertEquals(ISOChronology.getInstance(LONDON), resultAB.getChronology());
+        
+        Interval resultBA = testB.overlap(testA);
+        assertEquals(ISOChronology.getInstance(MOSCOW), resultBA.getChronology());
+    }
+
+    public void testOverlap_RInterval_zoneUTC() {
+        Interval testA = new Interval(new Instant(TEST_TIME1), new Instant(TEST_TIME2));
+        assertEquals(ISOChronology.getInstanceUTC(), testA.getChronology());
+        
+        Interval testB = new Interval(new Instant(TEST_TIME1 + 1), new Instant(TEST_TIME2 + 1));
+        assertEquals(ISOChronology.getInstanceUTC(), testB.getChronology());
+        
+        Interval result = testA.overlap(testB);
+        assertEquals(ISOChronology.getInstanceUTC(), result.getChronology());
+    }
+
     //-----------------------------------------------------------------------
     public void testGap_RInterval() {
         Interval test = new Interval(TEST_TIME1, TEST_TIME2);
@@ -379,6 +406,31 @@ public void testGap_RInterval() {
                 test.gap(new Interval(TEST_TIME1 + 1, TEST_TIME2 - 1)));
     }
 
+    public void testGap_RInterval_zone() {
+        Interval testA = new Interval(new DateTime(TEST_TIME1, LONDON), new DateTime(TEST_TIME2, LONDON));
+        assertEquals(ISOChronology.getInstance(LONDON), testA.getChronology());
+        
+        Interval testB = new Interval(new DateTime(TEST_TIME1 - 100, MOSCOW), new DateTime(TEST_TIME1 - 50, MOSCOW));
+        assertEquals(ISOChronology.getInstance(MOSCOW), testB.getChronology());
+        
+        Interval resultAB = testA.gap(testB);
+        assertEquals(ISOChronology.getInstance(LONDON), resultAB.getChronology());
+        
+        Interval resultBA = testB.gap(testA);
+        assertEquals(ISOChronology.getInstance(MOSCOW), resultBA.getChronology());
+    }
+
+    public void testGap_RInterval_zoneUTC() {
+        Interval testA = new Interval(new Instant(TEST_TIME1), new Instant(TEST_TIME2));
+        assertEquals(ISOChronology.getInstanceUTC(), testA.getChronology());
+        
+        Interval testB = new Interval(new Instant(TEST_TIME1 - 100), new Instant(TEST_TIME1 - 50));
+        assertEquals(ISOChronology.getInstanceUTC(), testB.getChronology());
+        
+        Interval result = testA.gap(testB);
+        assertEquals(ISOChronology.getInstanceUTC(), result.getChronology());
+    }
+
     //-----------------------------------------------------------------------
     public void testAbuts_RInterval() {
         Interval test = new Interval(TEST_TIME1, TEST_TIME2);

From c2964c055b54a1d7623d1d65390d772b98f5f075 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 26 Jul 2006 20:17:29 +0000
Subject: [PATCH 102/115] Test parsing long fractions

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1099 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../org/joda/time/format/TestDateTimeFormat.java  | 15 ++++++++++++++-
 .../joda/time/format/TestDateTimeFormatter.java   | 11 ++++++++++-
 2 files changed, 24 insertions(+), 2 deletions(-)

diff --git a/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java b/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java
index 23e5cbb79..ec74f6ff9 100644
--- a/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java
+++ b/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2006 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -736,6 +736,19 @@ public void testFormat_fractionOfSecond() {
         assertEquals(dt.toString(), "040", f.print(dt));
     }
 
+    //-----------------------------------------------------------------------
+    public void testFormat_fractionOfSecondLong() {
+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);
+        DateTimeFormatter f = DateTimeFormat.forPattern("SSSSSS").withLocale(Locale.UK);
+        assertEquals(dt.toString(), "040000", f.print(dt));
+        
+        dt = dt.withZone(NEWYORK);
+        assertEquals(dt.toString(), "040000", f.print(dt));
+        
+        dt = dt.withZone(TOKYO);
+        assertEquals(dt.toString(), "040000", f.print(dt));
+    }
+
     //-----------------------------------------------------------------------
     public void testFormat_zoneText() {
         DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);
diff --git a/JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java b/JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java
index 6743aa146..9ca69f767 100644
--- a/JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java
+++ b/JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2006 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -660,6 +660,15 @@ public void testParseInto_chrono() {
         assertEquals(expect, result);
     }
 
+    public void testParseMillis_fractionOfSecondLong() {
+        DateTimeFormatter f = new DateTimeFormatterBuilder()
+            .appendSecondOfDay(2).appendLiteral('.').appendFractionOfSecond(1, 9)
+                .toFormatter().withZone(DateTimeZone.UTC);
+        assertEquals(10512, f.parseMillis("10.5123456"));
+        assertEquals(10512, f.parseMillis("10.512999"));
+    }
+
+    //-----------------------------------------------------------------------
     // Ensure time zone name switches properly at the zone DST transition.
     public void testZoneNameNearTransition() {
         DateTime inDST_1  = new DateTime(2005, 10, 30, 1, 0, 0, 0, NEWYORK);

From bf8d08e230c5d1f18fc439a8caeb7bbd8f971e66 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 26 Jul 2006 22:09:58 +0000
Subject: [PATCH 103/115] Tighten interval specification wrt zero duration
 intervals Change a zero duration interval to contains() itself and an instant
 of the same value

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1100 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  15 +-
 JodaTime/src/java/org/joda/time/Interval.java |  34 +-
 .../java/org/joda/time/ReadableInterval.java  |  87 +-
 .../org/joda/time/base/AbstractInterval.java  | 120 ++-
 .../org/joda/time/TestInterval_Basics.java    | 916 ++++++++++++------
 5 files changed, 868 insertions(+), 304 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index ea30c5dbb..10a9c2000 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -70,6 +70,8 @@ Data compatible - Yes
   - DateTimeZone data updated to version 2006g
 
 Semantic compatible - Yes, except
+  - Zero duration interval definition has been tightened and slightly altered
+    If your application relies on zero duration intervals then please retest carefully
   - YearMonthDay constructor no longer accepts time only strings
   - TimeOfDay constructor no longer accepts strings including a date
 
@@ -102,9 +104,16 @@ Bug fixes since 1.2
   Previously these methods returned intervals in the default time zone
   Now, they return intervals in the time zone of the original interval
 
-- Interval/MutableInterval.overlaps(ReadableInterval)
-  Previously, this method didn't handle empty intervals correctly
-  Now, an empty interval at the start of a larger interval does overlap
+- Interval/MutableInterval.contains/overlaps(ReadableInterval)
+  Previously, these methods were ill-defined with respect to zero duration intervals and nulls
+  These are the new rules:
+    A zero duration interval can be contained in a larger interval, at the start and middle, but not the end
+    A zero duration interval contains itself
+    A zero duration interval can overlap other intervals and be overlapped
+    A zero duration interval overlaps itself
+    A zero duration interval abuts itself and non-zero duration intervals on each side
+  Basically, a zero duration interval acts like an infinitely precise instant with the same value.
+  It represents both a point on the datetime continuum and the smallest possible interval.
 
 - DateTimeFormatterBuilder.MatchingParser
   Previously didn't estimate parsed length correctly
diff --git a/JodaTime/src/java/org/joda/time/Interval.java b/JodaTime/src/java/org/joda/time/Interval.java
index 8f39bb829..38fb29b96 100644
--- a/JodaTime/src/java/org/joda/time/Interval.java
+++ b/JodaTime/src/java/org/joda/time/Interval.java
@@ -179,7 +179,6 @@ public Interval toInterval() {
     /**
      * Gets the overlap between this interval and another interval.
      * <p>
-     * Any two intervals can overlap, abut, or have a gap between them.
      * This method returns the amount of the overlap, only if the
      * intervals do overlap.
      * If the intervals do not overlap, then null is returned.
@@ -208,7 +207,6 @@ public Interval overlap(ReadableInterval interval) {
      * Gets the gap between this interval and another interval.
      * The other interval can be either before or after this interval.
      * <p>
-     * Any two intervals can overlap, abut, or have a gap between them.
      * This method returns the amount of the gap only if the
      * intervals do actually have a gap between them.
      * If the intervals overlap or abut, then null is returned.
@@ -224,17 +222,16 @@ public Interval overlap(ReadableInterval interval) {
      */
     public Interval gap(ReadableInterval interval) {
         interval = DateTimeUtils.getReadableInterval(interval);
-        if (overlaps(interval) || abuts(interval)) {
-            return null;
-        }
         long otherStart = interval.getStartMillis();
         long otherEnd = interval.getEndMillis();
         long thisStart = getStartMillis();
         long thisEnd = getEndMillis();
-        if (thisStart >= otherEnd) {
+        if (thisStart > otherEnd) {
             return new Interval(otherEnd, thisStart, getChronology());
-        } else {
+        } else if (otherStart > thisEnd) {
             return new Interval(thisEnd, otherStart, getChronology());
+        } else {
+            return null;
         }
     }
 
@@ -244,6 +241,29 @@ public Interval gap(ReadableInterval interval) {
      * <p>
      * An interval abuts if it starts immediately after, or
      * ends immediately before this interval without overlap.
+     * Thus this method returns true if
+     * <code>thisStart == otherEnd || thisEnd == otherStart </code>.
+     * <p>
+     * A zero duration interval abuts with itself.
+     * <p>
+     * For example:
+     * <pre>
+     * [09:00 to 10:00) abuts [08:00 to 08:30)  = false (completely before)
+     * [09:00 to 10:00) abuts [08:00 to 09:00)  = true
+     * [09:00 to 10:00) abuts [08:00 to 09:01)  = false (overlaps)
+     * 
+     * [09:00 to 10:00) abuts [09:00 to 09:00)  = true
+     * [09:00 to 10:00) abuts [09:00 to 09:01)  = false (overlaps)
+     * 
+     * [09:00 to 10:00) abuts [10:00 to 10:00)  = true
+     * [09:00 to 10:00) abuts [10:00 to 10:30)  = true
+     * 
+     * [09:00 to 10:00) abuts [10:30 to 11:00)  = false (completely after)
+     * 
+     * [14:00 to 14:00) abuts [14:00 to 14:00)  = true
+     * [14:00 to 14:00) abuts [14:00 to 15:00)  = true
+     * [14:00 to 14:00) abuts [13:00 to 14:00)  = true
+     * </pre>
      *
      * @param interval  the interval to examine, null means now
      * @return true if the interval abuts
diff --git a/JodaTime/src/java/org/joda/time/ReadableInterval.java b/JodaTime/src/java/org/joda/time/ReadableInterval.java
index cbc7400be..910d13dfd 100644
--- a/JodaTime/src/java/org/joda/time/ReadableInterval.java
+++ b/JodaTime/src/java/org/joda/time/ReadableInterval.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2006 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -81,9 +81,27 @@
 
     //-----------------------------------------------------------------------
     /**
-     * Does this time interval contain the specified instant.
+     * Does this time interval contain or equal the specified instant.
      * <p>
-     * Intervals are inclusive of the start instant and exclusive of the end.
+     * Non-zero duration intervals are inclusive of the start instant and exclusive of the end.
+     * The instant is contained if it is at the start or middle of this interval
+     * but not at the end.
+     * <p>
+     * A zero duration interval represents the smallest possible interval
+     * and only contains the instant equal to its start and end.
+     * <p>
+     * For example:
+     * <pre>
+     * [09:00 to 10:00) contains 08:59  = false (before start)
+     * [09:00 to 10:00) contains 09:00  = true
+     * [09:00 to 10:00) contains 09:59  = true
+     * [09:00 to 10:00) contains 10:00  = false (equals end)
+     * [09:00 to 10:00) contains 10:01  = false (after end)
+     * 
+     * [14:00 to 14:00) contains 14:00  = true (equal)
+     * </pre>
+     * Passng in a <code>null</code> parameter will have the same effect as
+     * calling {@link #containsNow()}.
      * 
      * @param instant  the instant, null means now
      * @return true if this time interval contains the instant
@@ -91,11 +109,34 @@
     boolean contains(ReadableInstant instant);
     
     /**
-     * Does this time interval contain the specified time interval completely.
+     * Does this time interval contain or equal the specified time interval.
      * <p>
-     * Intervals are inclusive of the start instant and exclusive of the end.
+     * Non-zero duration intervals are inclusive of the start instant and exclusive of the end.
+     * The other interval is contained if this interval wholly contains, starts,
+     * finishes or equals it.
+     * <p>
+     * A zero duration interval represents the smallest possible interval
+     * and will contain itself (because it is equal to itself). It will also
+     * be contained by a larger interval at the start, middle but not the end.
+     * <p>
+     * For example:
+     * <pre>
+     * [09:00 to 10:00) contains [09:00 to 10:00)  = true
+     * [09:00 to 10:00) contains [09:00 to 09:30)  = true
+     * [09:00 to 10:00) contains [09:30 to 10:00)  = true
+     * [09:00 to 10:00) contains [09:15 to 09:45)  = true
+     * [09:00 to 10:00) contains [09:00 to 09:00)  = true
+     * 
+     * [09:00 to 10:00) contains [08:59 to 10:00)  = false (otherStart before thisStart)
+     * [09:00 to 10:00) contains [09:00 to 10:01)  = false (otherEnd after thisEnd)
+     * [09:00 to 10:00) contains [10:00 to 10:00)  = false (otherStart equals thisEnd)
+     * 
+     * [14:00 to 14:00) contains [14:00 to 14:00)  = true (equal)
+     * </pre>
+     * Passng in a <code>null</code> parameter will have the same effect as
+     * calling {@link #containsNow()}.
      * 
-     * @param interval  the time interval to compare to, null means now
+     * @param interval  the time interval to compare to, null means a zero length interval now
      * @return true if this time interval contains the time interval
      */
     boolean contains(ReadableInterval interval);
@@ -103,10 +144,40 @@
     /**
      * Does this time interval overlap the specified time interval.
      * <p>
+     * Non-zero duration intervals are inclusive of the start instant and exclusive of the end.
      * The intervals overlap if at least some of the time interval is in common.
-     * Intervals are inclusive of the start instant and exclusive of the end.
+     * <p>
+     * A zero duration interval represents the smallest possible interval
+     * and will overlap itself and larger intervals. The size of the overlap will
+     * be a zero duration interval equal to the original zero duration interval.
+     * <p>
+     * For example:
+     * <pre>
+     * [09:00 to 10:00) overlaps [08:00 to 08:30)  = false (completely before)
+     * [09:00 to 10:00) overlaps [08:00 to 09:00)  = false (abuts before)
+     * [09:00 to 10:00) overlaps [08:00 to 09:30)  = true
+     * [09:00 to 10:00) overlaps [08:00 to 10:00)  = true
+     * [09:00 to 10:00) overlaps [08:00 to 11:00)  = true
+     * 
+     * [09:00 to 10:00) overlaps [09:00 to 09:00)  = true
+     * [09:00 to 10:00) overlaps [09:00 to 09:30)  = true
+     * [09:00 to 10:00) overlaps [09:00 to 10:00)  = true
+     * [09:00 to 10:00) overlaps [09:00 to 11:00)  = true
+     * 
+     * [09:00 to 10:00) overlaps [09:30 to 09:30)  = true
+     * [09:00 to 10:00) overlaps [09:30 to 10:00)  = true
+     * [09:00 to 10:00) overlaps [09:30 to 11:00)  = true
+     * 
+     * [09:00 to 10:00) overlaps [10:00 to 10:00)  = false (abuts after)
+     * [09:00 to 10:00) overlaps [10:00 to 11:00)  = false (abuts after)
+     * 
+     * [09:00 to 10:00) overlaps [10:30 to 11:00)  = false (completely after)
+     * 
+     * [14:00 to 14:00) overlaps [14:00 to 14:00)  = true
+     * [14:00 to 14:00) overlaps [13:00 to 15:00)  = true
+     * </pre>
      * 
-     * @param interval  the time interval to compare to, null means now
+     * @param interval  the time interval to compare to, null means a zero length interval now
      * @return true if the time intervals overlap
      */
     boolean overlaps(ReadableInterval interval);
diff --git a/JodaTime/src/java/org/joda/time/base/AbstractInterval.java b/JodaTime/src/java/org/joda/time/base/AbstractInterval.java
index cb503bf01..bbc50ba55 100644
--- a/JodaTime/src/java/org/joda/time/base/AbstractInterval.java
+++ b/JodaTime/src/java/org/joda/time/base/AbstractInterval.java
@@ -85,10 +85,14 @@ public DateTime getEnd() {
 
     //-----------------------------------------------------------------------
     /**
-     * Does this time interval contain the specified millisecond instant.
+     * Does this time interval contain or equal the specified millisecond instant.
      * <p>
-     * Intervals are inclusive of the start instant and exclusive of the end.
-     * 
+     * Non-zero duration intervals are inclusive of the start instant and exclusive of the end.
+     * A zero duration intervals only contains the instant equal to its start and end.
+     * <p>
+     * NOTE: From v1.3, comparing a zero duration interval to an instant
+     * with the same value will return true because they are equal
+     *
      * @param millisInstant  the instant to compare to,
      *  millisecond instant from 1970-01-01T00:00:00Z
      * @return true if this time interval contains the millisecond
@@ -96,14 +100,19 @@ public DateTime getEnd() {
     public boolean contains(long millisInstant) {
         long thisStart = getStartMillis();
         long thisEnd = getEndMillis();
-        return (millisInstant >= thisStart && millisInstant < thisEnd);
+        return (millisInstant >= thisStart && millisInstant < thisEnd) ||
+            (thisStart == millisInstant && thisEnd == millisInstant);
     }
 
     /**
-     * Does this time interval contain the current instant.
+     * Does this time interval contain or equal the current instant.
      * <p>
-     * Intervals are inclusive of the start instant and exclusive of the end.
-     * 
+     * Non-zero duration intervals are inclusive of the start instant and exclusive of the end.
+     * A zero duration intervals only contains the instant equal to its start and end.
+     * <p>
+     * NOTE: From v1.3, comparing a zero duration interval to an instant
+     * with the same value will return true because they are equal
+     *
      * @return true if this time interval contains the current instant
      */
     public boolean containsNow() {
@@ -111,10 +120,31 @@ public boolean containsNow() {
     }
 
     /**
-     * Does this time interval contain the specified instant.
+     * Does this time interval contain or equal the specified instant.
      * <p>
-     * Intervals are inclusive of the start instant and exclusive of the end.
+     * Non-zero duration intervals are inclusive of the start instant and exclusive of the end.
+     * The instant is contained if it is at the start or middle of this interval
+     * but not at the end.
+     * <p>
+     * A zero duration interval represents the smallest possible interval
+     * and only contains the instant equal to its start and end.
+     * <p>
+     * For example:
+     * <pre>
+     * [09:00 to 10:00) contains 08:59  = false (before start)
+     * [09:00 to 10:00) contains 09:00  = true
+     * [09:00 to 10:00) contains 09:59  = true
+     * [09:00 to 10:00) contains 10:00  = false (equals end)
+     * [09:00 to 10:00) contains 10:01  = false (after end)
      * 
+     * [14:00 to 14:00) contains 14:00  = true (equal)
+     * </pre>
+     * Passng in a <code>null</code> parameter will have the same effect as
+     * calling {@link #containsNow()}.
+     * <p>
+     * NOTE: From v1.3, comparing a zero duration interval to an instant
+     * with the same value will return true because they are equal
+     *
      * @param instant  the instant, null means now
      * @return true if this time interval contains the instant
      */
@@ -126,11 +156,37 @@ public boolean contains(ReadableInstant instant) {
     }
 
     /**
-     * Does this time interval contain the specified time interval completely.
+     * Does this time interval contain or equal the specified time interval.
      * <p>
-     * Intervals are inclusive of the start instant and exclusive of the end.
+     * Non-zero duration intervals are inclusive of the start instant and exclusive of the end.
+     * The other interval is contained if this interval wholly contains, starts,
+     * finishes or equals it.
+     * <p>
+     * A zero duration interval represents the smallest possible interval
+     * and will contain itself (because it is equal to itself). It will also
+     * be contained by a larger interval at the start, middle but not the end.
+     * <p>
+     * For example:
+     * <pre>
+     * [09:00 to 10:00) contains [09:00 to 10:00)  = true
+     * [09:00 to 10:00) contains [09:00 to 09:30)  = true
+     * [09:00 to 10:00) contains [09:30 to 10:00)  = true
+     * [09:00 to 10:00) contains [09:15 to 09:45)  = true
+     * [09:00 to 10:00) contains [09:00 to 09:00)  = true
      * 
-     * @param interval  the time interval to compare to, null means now
+     * [09:00 to 10:00) contains [08:59 to 10:00)  = false (otherStart before thisStart)
+     * [09:00 to 10:00) contains [09:00 to 10:01)  = false (otherEnd after thisEnd)
+     * [09:00 to 10:00) contains [10:00 to 10:00)  = false (otherStart equals thisEnd)
+     * 
+     * [14:00 to 14:00) contains [14:00 to 14:00)  = true (equal)
+     * </pre>
+     * Passng in a <code>null</code> parameter will have the same effect as
+     * calling {@link #containsNow()}.
+     * <p>
+     * NOTE: From v1.3, comparing a zero duration interval to itself
+     * will return true because they are equal
+     *
+     * @param interval  the time interval to compare to, null means a zero duration interval now
      * @return true if this time interval contains the time interval
      */
     public boolean contains(ReadableInterval interval) {
@@ -141,16 +197,50 @@ public boolean contains(ReadableInterval interval) {
         long otherEnd = interval.getEndMillis();
         long thisStart = getStartMillis();
         long thisEnd = getEndMillis();
-        return (otherStart >= thisStart && otherStart < thisEnd && otherEnd <= thisEnd);
+        return (thisStart <= otherStart && otherStart < thisEnd && otherEnd <= thisEnd) ||
+            (thisStart == otherStart && thisEnd == otherEnd);
     }
 
     /**
      * Does this time interval overlap the specified time interval.
      * <p>
+     * Non-zero duration intervals are inclusive of the start instant and exclusive of the end.
      * The intervals overlap if at least some of the time interval is in common.
-     * Intervals are inclusive of the start instant and exclusive of the end.
+     * <p>
+     * A zero duration interval represents the smallest possible interval
+     * and will overlap itself and larger intervals. The size of the overlap will
+     * be a zero duration interval equal to the original zero duration interval.
+     * <p>
+     * For example:
+     * <pre>
+     * [09:00 to 10:00) overlaps [08:00 to 08:30)  = false (completely before)
+     * [09:00 to 10:00) overlaps [08:00 to 09:00)  = false (abuts before)
+     * [09:00 to 10:00) overlaps [08:00 to 09:30)  = true
+     * [09:00 to 10:00) overlaps [08:00 to 10:00)  = true
+     * [09:00 to 10:00) overlaps [08:00 to 11:00)  = true
+     * 
+     * [09:00 to 10:00) overlaps [09:00 to 09:00)  = true
+     * [09:00 to 10:00) overlaps [09:00 to 09:30)  = true
+     * [09:00 to 10:00) overlaps [09:00 to 10:00)  = true
+     * [09:00 to 10:00) overlaps [09:00 to 11:00)  = true
+     * 
+     * [09:00 to 10:00) overlaps [09:30 to 09:30)  = true
+     * [09:00 to 10:00) overlaps [09:30 to 10:00)  = true
+     * [09:00 to 10:00) overlaps [09:30 to 11:00)  = true
+     * 
+     * [09:00 to 10:00) overlaps [10:00 to 10:00)  = false (abuts after)
+     * [09:00 to 10:00) overlaps [10:00 to 11:00)  = false (abuts after)
+     * 
+     * [09:00 to 10:00) overlaps [10:30 to 11:00)  = false (completely after)
+     * 
+     * [14:00 to 14:00) overlaps [14:00 to 14:00)  = true
+     * [14:00 to 14:00) overlaps [13:00 to 15:00)  = true
+     * </pre>
+     * NOTE: From v1.3, comparing a zero duration interval at the start of
+     * another interval will now return true, and comparing a zero duration
+     * interval to itself will return true
      * 
-     * @param interval  the time interval to compare to, null means now
+     * @param interval  the time interval to compare to, null means a zero length interval now
      * @return true if the time intervals overlap
      */
     public boolean overlaps(ReadableInterval interval) {
diff --git a/JodaTime/src/test/org/joda/time/TestInterval_Basics.java b/JodaTime/src/test/org/joda/time/TestInterval_Basics.java
index 49cdbbbc0..b74e7b962 100644
--- a/JodaTime/src/test/org/joda/time/TestInterval_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestInterval_Basics.java
@@ -44,7 +44,9 @@
     private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
     private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
     private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);
-    
+    private Interval interval37;
+    private Interval interval33;
+
     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 
                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 
                      365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +
@@ -94,6 +96,8 @@ protected void setUp() throws Exception {
         DateTimeZone.setDefault(PARIS);
         TimeZone.setDefault(PARIS.toTimeZone());
         Locale.setDefault(Locale.FRANCE);
+        interval37 = new Interval(3, 7);
+        interval33 = new Interval(3, 3);
     }
 
     protected void tearDown() throws Exception {
@@ -194,172 +198,455 @@ public long getEndMillis() {
         }
     }
 
+    //-----------------------------------------------------------------------
+    public void test_useCase_ContainsOverlapAbutGap() {
+        // this is a simple test to ensure that the use case of these methods is OK
+        // when comparing any two intervals they can be in one and only one of these states
+        // (a) have a gap between them, (b) abut or (c) overlap
+        // contains is a subset of overlap
+        Interval test1020 = new Interval(10, 20);
+        
+        // [4,8) [10,20) - gap
+        Interval interval = new Interval(4, 8);
+        assertNotNull(test1020.gap(interval));
+        assertEquals(false, test1020.abuts(interval));
+        assertEquals(false, test1020.overlaps(interval));
+        assertEquals(false, test1020.contains(interval));
+        assertNotNull(interval.gap(test1020));
+        assertEquals(false, interval.abuts(test1020));
+        assertEquals(false, interval.overlaps(test1020));
+        assertEquals(false, interval.contains(test1020));
+        
+        // [6,10) [10,20) - abuts
+        interval = new Interval(6, 10);
+        assertNull(test1020.gap(interval));
+        assertEquals(true, test1020.abuts(interval));
+        assertEquals(false, test1020.overlaps(interval));
+        assertEquals(false, test1020.contains(interval));
+        assertNull(interval.gap(test1020));
+        assertEquals(true, interval.abuts(test1020));
+        assertEquals(false, interval.overlaps(test1020));
+        assertEquals(false, interval.contains(test1020));
+        
+        // [8,12) [10,20) - overlaps
+        interval = new Interval(8, 12);
+        assertNull(test1020.gap(interval));
+        assertEquals(false, test1020.abuts(interval));
+        assertEquals(true, test1020.overlaps(interval));
+        assertEquals(false, test1020.contains(interval));
+        assertNull(interval.gap(test1020));
+        assertEquals(false, interval.abuts(test1020));
+        assertEquals(true, interval.overlaps(test1020));
+        assertEquals(false, interval.contains(test1020));
+        
+        // [10,14) [10,20) - overlaps and contains-one-way
+        interval = new Interval(10, 14);
+        assertNull(test1020.gap(interval));
+        assertEquals(false, test1020.abuts(interval));
+        assertEquals(true, test1020.overlaps(interval));
+        assertEquals(true, test1020.contains(interval));
+        assertNull(interval.gap(test1020));
+        assertEquals(false, interval.abuts(test1020));
+        assertEquals(true, interval.overlaps(test1020));
+        assertEquals(false, interval.contains(test1020));
+        
+        // [10,20) [10,20) - overlaps and contains-both-ways
+        assertNull(test1020.gap(interval));
+        assertEquals(false, test1020.abuts(test1020));
+        assertEquals(true, test1020.overlaps(test1020));
+        assertEquals(true, test1020.contains(test1020));
+        
+        // [10,20) [16,20) - overlaps and contains-one-way
+        interval = new Interval(16, 20);
+        assertNull(test1020.gap(interval));
+        assertEquals(false, test1020.abuts(interval));
+        assertEquals(true, test1020.overlaps(interval));
+        assertEquals(true, test1020.contains(interval));
+        assertNull(interval.gap(test1020));
+        assertEquals(false, interval.abuts(test1020));
+        assertEquals(true, interval.overlaps(test1020));
+        assertEquals(false, interval.contains(test1020));
+        
+        // [10,20) [18,22) - overlaps
+        interval = new Interval(18, 22);
+        assertNull(test1020.gap(interval));
+        assertEquals(false, test1020.abuts(interval));
+        assertEquals(true, test1020.overlaps(interval));
+        assertEquals(false, test1020.contains(interval));
+        assertNull(interval.gap(test1020));
+        assertEquals(false, interval.abuts(test1020));
+        assertEquals(true, interval.overlaps(test1020));
+        assertEquals(false, interval.contains(test1020));
+        
+        // [10,20) [20,24) - abuts
+        interval = new Interval(20, 24);
+        assertNull(test1020.gap(interval));
+        assertEquals(true, test1020.abuts(interval));
+        assertEquals(false, test1020.overlaps(interval));
+        assertEquals(false, test1020.contains(interval));
+        assertNull(interval.gap(test1020));
+        assertEquals(true, interval.abuts(test1020));
+        assertEquals(false, interval.overlaps(test1020));
+        assertEquals(false, interval.contains(test1020));
+        
+        // [10,20) [22,26) - gap
+        interval = new Interval(22, 26);
+        assertNotNull(test1020.gap(interval));
+        assertEquals(false, test1020.abuts(interval));
+        assertEquals(false, test1020.overlaps(interval));
+        assertEquals(false, test1020.contains(interval));
+        assertNotNull(interval.gap(test1020));
+        assertEquals(false, interval.abuts(test1020));
+        assertEquals(false, interval.overlaps(test1020));
+        assertEquals(false, interval.contains(test1020));
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_useCase_ContainsOverlapAbutGap_zeroDuration() {
+        // this is a simple test to ensure that the use case of these methods
+        // is OK when considering a zero duration inerval
+        // when comparing any two intervals they can be in one and only one of these states
+        // (a) have a gap between them, (b) abut or (c) overlap
+        // contains is a subset of overlap
+        Interval test1020 = new Interval(10, 20);
+        
+        // [8,8) [10,20) - gap
+        Interval interval = new Interval(8, 8);
+        assertNotNull(test1020.gap(interval));
+        assertEquals(false, test1020.abuts(interval));
+        assertEquals(false, test1020.overlaps(interval));
+        assertEquals(false, test1020.contains(interval));
+        assertNotNull(interval.gap(test1020));
+        assertEquals(false, interval.abuts(test1020));
+        assertEquals(false, interval.overlaps(test1020));
+        assertEquals(false, interval.contains(test1020));
+        
+        // [10,10) [10,20) - abuts and contains-one-way and overlaps
+        interval = new Interval(10, 10);
+        assertNull(test1020.gap(interval));
+        assertEquals(true,  test1020.abuts(interval));
+        assertEquals(true,  test1020.overlaps(interval));
+        assertEquals(true,  test1020.contains(interval));  // normal contains zero-duration
+        assertNull(interval.gap(test1020));
+        assertEquals(true,  interval.abuts(test1020));
+        assertEquals(true,  interval.overlaps(test1020));
+        assertEquals(false, interval.contains(test1020));  // zero-duration does not contain normal
+        
+        // [12,12) [10,20) - contains-one-way and overlaps
+        interval = new Interval(12, 12);
+        assertNull(test1020.gap(interval));
+        assertEquals(false, test1020.abuts(interval));
+        assertEquals(true,  test1020.overlaps(interval));
+        assertEquals(true,  test1020.contains(interval));  // normal contains zero-duration
+        assertNull(interval.gap(test1020));
+        assertEquals(false, interval.abuts(test1020));
+        assertEquals(true,  interval.overlaps(test1020));
+        assertEquals(false, interval.contains(test1020));  // zero-duration does not contain normal
+        
+        // [10,20) [20,20) - abuts
+        interval = new Interval(20, 20);
+        assertNull(test1020.gap(interval));
+        assertEquals(true,  test1020.abuts(interval));
+        assertEquals(false, test1020.overlaps(interval));
+        assertEquals(false, test1020.contains(interval));
+        assertNull(interval.gap(test1020));
+        assertEquals(true,  interval.abuts(test1020));
+        assertEquals(false, interval.overlaps(test1020));
+        assertEquals(false, interval.contains(test1020));
+        
+        // [10,20) [22,22) - gap
+        interval = new Interval(22, 22);
+        assertNotNull(test1020.gap(interval));
+        assertEquals(false, test1020.abuts(interval));
+        assertEquals(false, test1020.overlaps(interval));
+        assertEquals(false, test1020.contains(interval));
+        assertNotNull(interval.gap(test1020));
+        assertEquals(false, interval.abuts(test1020));
+        assertEquals(false, interval.overlaps(test1020));
+        assertEquals(false, interval.contains(test1020));
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_useCase_ContainsOverlapAbutGap_bothZeroDuration() {
+        // this is a simple test to ensure that the use case of these methods
+        // is OK when considering two zero duration inervals
+        // this is the simplest case, as the two intervals either have a gap or not
+        // if not, then they are equal and abut
+        Interval test0808 = new Interval(8, 8);
+        Interval test1010 = new Interval(10, 10);
+        
+        // [8,8) [10,10) - gap
+        assertNotNull(test1010.gap(test0808));
+        assertEquals(false, test1010.abuts(test0808));
+        assertEquals(false, test1010.overlaps(test0808));
+        assertEquals(false, test1010.contains(test0808));
+        assertNotNull(test0808.gap(test1010));
+        assertEquals(false, test0808.abuts(test1010));
+        assertEquals(false, test0808.overlaps(test1010));
+        assertEquals(false, test0808.contains(test1010));
+        
+        // [10,10) [10,10) - abuts and overlaps
+        assertNull(test1010.gap(test1010));
+        assertEquals(true,  test1010.abuts(test1010));
+        assertEquals(true,  test1010.overlaps(test1010));
+        assertEquals(true,  test1010.contains(test1010));
+    }
+
     //-----------------------------------------------------------------------
     public void testContains_long() {
-        Interval test = new Interval(TEST_TIME1, TEST_TIME2);
-        assertEquals(true, test.contains(TEST_TIME1));
-        assertEquals(false, test.contains(TEST_TIME1 - 1));
-        assertEquals(true, test.contains(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2));
-        assertEquals(false, test.contains(TEST_TIME2));
-        assertEquals(true, test.contains(TEST_TIME2 - 1));
+        assertEquals(false, interval37.contains(2));  // value before
+        assertEquals(true,  interval37.contains(3));
+        assertEquals(true,  interval37.contains(4));
+        assertEquals(true,  interval37.contains(5));
+        assertEquals(true,  interval37.contains(6));
+        assertEquals(false, interval37.contains(7));  // value after
+        assertEquals(false, interval37.contains(8));  // value after
     }
 
+    public void testContains_long_zeroDuration() {
+        assertEquals(false, interval33.contains(2));  // value before
+        assertEquals(true,  interval33.contains(3));
+        assertEquals(false, interval33.contains(4));  // value after
+    }
+
+    //-----------------------------------------------------------------------
     public void testContainsNow() {
-        Interval test = new Interval(TEST_TIME1, TEST_TIME2);
-        
-        DateTimeUtils.setCurrentMillisFixed(TEST_TIME1);
-        assertEquals(true, test.containsNow());
-        DateTimeUtils.setCurrentMillisFixed(TEST_TIME1 - 1);
-        assertEquals(false, test.containsNow());
-        DateTimeUtils.setCurrentMillisFixed(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2);
-        assertEquals(true, test.containsNow());
-        DateTimeUtils.setCurrentMillisFixed(TEST_TIME2);
-        assertEquals(false, test.containsNow());
-        DateTimeUtils.setCurrentMillisFixed(TEST_TIME2 - 1);
-        assertEquals(true, test.containsNow());
+        DateTimeUtils.setCurrentMillisFixed(2);
+        assertEquals(false, interval37.containsNow());  // value before
+        DateTimeUtils.setCurrentMillisFixed(3);
+        assertEquals(true,  interval37.containsNow());
+        DateTimeUtils.setCurrentMillisFixed(4);
+        assertEquals(true,  interval37.containsNow());
+        DateTimeUtils.setCurrentMillisFixed(6);
+        assertEquals(true,  interval37.containsNow());
+        DateTimeUtils.setCurrentMillisFixed(7);
+        assertEquals(false, interval37.containsNow());  // value after
+        DateTimeUtils.setCurrentMillisFixed(8);
+        assertEquals(false, interval37.containsNow());  // value after
+        
+        DateTimeUtils.setCurrentMillisFixed(2);
+        assertEquals(false, interval33.containsNow());  // value before
+        DateTimeUtils.setCurrentMillisFixed(3);
+        assertEquals(true,  interval33.containsNow());
+        DateTimeUtils.setCurrentMillisFixed(4);
+        assertEquals(false, interval33.containsNow());  // value after
     }
 
+    //-----------------------------------------------------------------------
     public void testContains_RI() {
-        Interval test = new Interval(TEST_TIME1, TEST_TIME2);
-        assertEquals(true, test.contains(new Instant(TEST_TIME1)));
-        assertEquals(false, test.contains(new Instant(TEST_TIME1 - 1)));
-        assertEquals(true, test.contains(new Instant(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2)));
-        assertEquals(false, test.contains(new Instant(TEST_TIME2)));
-        assertEquals(true, test.contains(new Instant(TEST_TIME2 - 1)));
-        assertEquals(true, test.contains((ReadableInstant) null));
+        assertEquals(false, interval37.contains(new Instant(2)));  // value before
+        assertEquals(true,  interval37.contains(new Instant(3)));
+        assertEquals(true,  interval37.contains(new Instant(4)));
+        assertEquals(true,  interval37.contains(new Instant(5)));
+        assertEquals(true,  interval37.contains(new Instant(6)));
+        assertEquals(false, interval37.contains(new Instant(7)));  // value after
+        assertEquals(false, interval37.contains(new Instant(8)));  // value after
+    }
+
+    public void testContains_RI_null() {
+        DateTimeUtils.setCurrentMillisFixed(2);
+        assertEquals(false, interval37.contains((ReadableInstant) null));  // value before
+        DateTimeUtils.setCurrentMillisFixed(3);
+        assertEquals(true,  interval37.contains((ReadableInstant) null));
+        DateTimeUtils.setCurrentMillisFixed(4);
+        assertEquals(true,  interval37.contains((ReadableInstant) null));
+        DateTimeUtils.setCurrentMillisFixed(6);
+        assertEquals(true,  interval37.contains((ReadableInstant) null));
+        DateTimeUtils.setCurrentMillisFixed(7);
+        assertEquals(false, interval37.contains((ReadableInstant) null));  // value after
+        DateTimeUtils.setCurrentMillisFixed(8);
+        assertEquals(false, interval37.contains((ReadableInstant) null));  // value after
+    }
+
+    public void testContains_RI_zeroDuration() {
+        assertEquals(false, interval33.contains(new Instant(2)));  // value before
+        assertEquals(true,  interval33.contains(new Instant(3)));
+        assertEquals(false, interval33.contains(new Instant(4)));  // value after
     }
 
     //-----------------------------------------------------------------------
     public void testContains_RInterval() {
-        Interval test = new Interval(TEST_TIME1, TEST_TIME2);
-        
-        assertEquals(true, test.contains(new Interval(TEST_TIME1, TEST_TIME1)));
-        assertEquals(false, test.contains(new Interval(TEST_TIME1 - 1, TEST_TIME1)));
-        
-        assertEquals(true, test.contains(new Interval(TEST_TIME1, TEST_TIME1 + 1)));
-        assertEquals(false, test.contains(new Interval(TEST_TIME1 - 1, TEST_TIME1 + 1)));
-        assertEquals(true, test.contains(new Interval(TEST_TIME1 + 1, TEST_TIME1 + 1)));
-        
-        assertEquals(true, test.contains(new Interval(TEST_TIME1, TEST_TIME2)));
-        assertEquals(false, test.contains(new Interval(TEST_TIME1 - 1, TEST_TIME2)));
-        assertEquals(true, test.contains(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2)));
-        assertEquals(false, test.contains(new Interval(TEST_TIME2, TEST_TIME2)));
-        assertEquals(true, test.contains(new Interval(TEST_TIME2 - 1, TEST_TIME2)));
-        
-        assertEquals(true, test.contains(new Interval(TEST_TIME1, TEST_TIME2 - 1)));
-        assertEquals(false, test.contains(new Interval(TEST_TIME1 - 1, TEST_TIME2 - 1)));
-        assertEquals(true, test.contains(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2 - 1)));
-        assertEquals(true, test.contains(new Interval(TEST_TIME2 - 1, TEST_TIME2 - 1)));
-        assertEquals(true, test.contains(new Interval(TEST_TIME2 - 2, TEST_TIME2 - 1)));
-        
-        assertEquals(false, test.contains(new Interval(TEST_TIME1, TEST_TIME2 + 1)));
-        assertEquals(false, test.contains(new Interval(TEST_TIME1 - 1, TEST_TIME2 + 1)));
-        assertEquals(false, test.contains(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2 + 1)));
-        assertEquals(false, test.contains(new Interval(TEST_TIME2, TEST_TIME2 + 1)));
-        assertEquals(false, test.contains(new Interval(TEST_TIME2 - 1, TEST_TIME2 + 1)));
-        assertEquals(false, test.contains(new Interval(TEST_TIME1 - 2, TEST_TIME1 - 1)));
-        
-        assertEquals(true, test.contains((ReadableInterval) null));
+        assertEquals(false, interval37.contains(new Interval(1, 2)));  // gap before
+        assertEquals(false, interval37.contains(new Interval(2, 2)));  // gap before
+        
+        assertEquals(false, interval37.contains(new Interval(2, 3)));  // abuts before
+        assertEquals(true,  interval37.contains(new Interval(3, 3)));
+        
+        assertEquals(false, interval37.contains(new Interval(2, 4)));  // starts before
+        assertEquals(true,  interval37.contains(new Interval(3, 4)));
+        assertEquals(true,  interval37.contains(new Interval(4, 4)));
+        
+        assertEquals(false, interval37.contains(new Interval(2, 6)));  // starts before
+        assertEquals(true,  interval37.contains(new Interval(3, 6)));
+        assertEquals(true,  interval37.contains(new Interval(4, 6)));
+        assertEquals(true,  interval37.contains(new Interval(5, 6)));
+        assertEquals(true,  interval37.contains(new Interval(6, 6)));
+        
+        assertEquals(false, interval37.contains(new Interval(2, 7)));  // starts before
+        assertEquals(true,  interval37.contains(new Interval(3, 7)));
+        assertEquals(true,  interval37.contains(new Interval(4, 7)));
+        assertEquals(true,  interval37.contains(new Interval(5, 7)));
+        assertEquals(true,  interval37.contains(new Interval(6, 7)));
+        assertEquals(false, interval37.contains(new Interval(7, 7)));  // abuts after
+        
+        assertEquals(false, interval37.contains(new Interval(2, 8)));  // ends after
+        assertEquals(false, interval37.contains(new Interval(3, 8)));  // ends after
+        assertEquals(false, interval37.contains(new Interval(4, 8)));  // ends after
+        assertEquals(false, interval37.contains(new Interval(5, 8)));  // ends after
+        assertEquals(false, interval37.contains(new Interval(6, 8)));  // ends after
+        assertEquals(false, interval37.contains(new Interval(7, 8)));  // abuts after
+        assertEquals(false, interval37.contains(new Interval(8, 8)));  // gap after
+        
+        assertEquals(false, interval37.contains(new Interval(8, 9)));  // gap after
+        assertEquals(false, interval37.contains(new Interval(9, 9)));  // gap after
+    }
+
+    public void testContains_RInterval_null() {
+        DateTimeUtils.setCurrentMillisFixed(2);
+        assertEquals(false, interval37.contains((ReadableInterval) null));  // gap before
+        DateTimeUtils.setCurrentMillisFixed(3);
+        assertEquals(true,  interval37.contains((ReadableInterval) null));
+        DateTimeUtils.setCurrentMillisFixed(4);
+        assertEquals(true,  interval37.contains((ReadableInterval) null));
+        DateTimeUtils.setCurrentMillisFixed(6);
+        assertEquals(true,  interval37.contains((ReadableInterval) null));
+        DateTimeUtils.setCurrentMillisFixed(7);
+        assertEquals(false, interval37.contains((ReadableInterval) null));  // abuts after
+        DateTimeUtils.setCurrentMillisFixed(8);
+        assertEquals(false, interval37.contains((ReadableInterval) null));  // gap after
+    }
+
+    public void testContains_RInterval_zeroDuration() {
+        assertEquals(true,  interval33.contains(interval33));
+        assertEquals(false, interval33.contains(interval37));  // zero-duration cannot contain anything
+        assertEquals(true,  interval37.contains(interval33));
+        assertEquals(false, interval33.contains(new Interval(1, 2)));  // zero-duration cannot contain anything
+        assertEquals(false, interval33.contains(new Interval(8, 9)));  // zero-duration cannot contain anything
+        assertEquals(false, interval33.contains(new Interval(1, 9)));  // zero-duration cannot contain anything
+        
+        DateTimeUtils.setCurrentMillisFixed(2);
+        assertEquals(false, interval33.contains((ReadableInterval) null));  // gap before
+        DateTimeUtils.setCurrentMillisFixed(3);
+        assertEquals(true,  interval33.contains((ReadableInterval) null));
+        DateTimeUtils.setCurrentMillisFixed(4);
+        assertEquals(false, interval33.contains((ReadableInterval) null));  // gap after
     }
 
     //-----------------------------------------------------------------------
     public void testOverlaps_RInterval() {
-        Interval test = new Interval(TEST_TIME1, TEST_TIME2);
-        
-        assertEquals(true, test.overlaps(new Interval(TEST_TIME1, TEST_TIME1)));
-        assertEquals(false, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1)));
-        
-        assertEquals(true, test.overlaps(new Interval(TEST_TIME1, TEST_TIME1 + 1)));
-        assertEquals(true, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1 + 1)));
-        assertEquals(true, test.overlaps(new Interval(TEST_TIME1 + 1, TEST_TIME1 + 1)));
-        
-        assertEquals(true, test.overlaps(new Interval(TEST_TIME1, TEST_TIME2)));
-        assertEquals(true, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME2)));
-        assertEquals(true, test.overlaps(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2)));
-        assertEquals(false, test.overlaps(new Interval(TEST_TIME2, TEST_TIME2)));
-        assertEquals(true, test.overlaps(new Interval(TEST_TIME2 - 1, TEST_TIME2)));
-        
-        assertEquals(true, test.overlaps(new Interval(TEST_TIME1, TEST_TIME2 + 1)));
-        assertEquals(true, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME2 + 1)));
-        assertEquals(true, test.overlaps(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2 + 1)));
-        assertEquals(false, test.overlaps(new Interval(TEST_TIME2, TEST_TIME2 + 1)));
-        assertEquals(true, test.overlaps(new Interval(TEST_TIME2 - 1, TEST_TIME2 + 1)));
-        
-        assertEquals(false, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1 - 1)));
-        assertEquals(false, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1)));
-        assertEquals(true, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1 + 1)));
-        
-        assertEquals(true, test.overlaps((ReadableInterval) null));
-        
-        Interval empty = new Interval(TEST_TIME1, TEST_TIME1);
-        assertEquals(true, empty.overlaps(empty));
-        assertEquals(true, empty.overlaps(test));
-        assertEquals(true, test.overlaps(empty));
+        assertEquals(false, interval37.overlaps(new Interval(1, 2)));  // gap before
+        assertEquals(false, interval37.overlaps(new Interval(2, 2)));  // gap before
+        
+        assertEquals(false, interval37.overlaps(new Interval(2, 3)));  // abuts before
+        assertEquals(true,  interval37.overlaps(new Interval(3, 3)));
+        
+        assertEquals(true,  interval37.overlaps(new Interval(2, 4)));
+        assertEquals(true,  interval37.overlaps(new Interval(3, 4)));
+        assertEquals(true,  interval37.overlaps(new Interval(4, 4)));
+        
+        assertEquals(true,  interval37.overlaps(new Interval(2, 6)));
+        assertEquals(true,  interval37.overlaps(new Interval(3, 6)));
+        assertEquals(true,  interval37.overlaps(new Interval(4, 6)));
+        assertEquals(true,  interval37.overlaps(new Interval(5, 6)));
+        assertEquals(true,  interval37.overlaps(new Interval(6, 6)));
+        
+        assertEquals(true,  interval37.overlaps(new Interval(2, 7)));
+        assertEquals(true,  interval37.overlaps(new Interval(3, 7)));
+        assertEquals(true,  interval37.overlaps(new Interval(4, 7)));
+        assertEquals(true,  interval37.overlaps(new Interval(5, 7)));
+        assertEquals(true,  interval37.overlaps(new Interval(6, 7)));
+        assertEquals(false, interval37.overlaps(new Interval(7, 7)));  // abuts after
+        
+        assertEquals(true,  interval37.overlaps(new Interval(2, 8)));
+        assertEquals(true,  interval37.overlaps(new Interval(3, 8)));
+        assertEquals(true,  interval37.overlaps(new Interval(4, 8)));
+        assertEquals(true,  interval37.overlaps(new Interval(5, 8)));
+        assertEquals(true,  interval37.overlaps(new Interval(6, 8)));
+        assertEquals(false, interval37.overlaps(new Interval(7, 8)));  // abuts after
+        assertEquals(false, interval37.overlaps(new Interval(8, 8)));  // gap after
+        
+        assertEquals(false, interval37.overlaps(new Interval(8, 9)));  // gap after
+        assertEquals(false, interval37.overlaps(new Interval(9, 9)));  // gap after
+    }
+
+    public void testOverlaps_RInterval_null() {
+        DateTimeUtils.setCurrentMillisFixed(2);
+        assertEquals(false, interval37.overlaps((ReadableInterval) null));  // gap before
+        DateTimeUtils.setCurrentMillisFixed(3);
+        assertEquals(true,  interval37.overlaps((ReadableInterval) null));
+        DateTimeUtils.setCurrentMillisFixed(4);
+        assertEquals(true,  interval37.overlaps((ReadableInterval) null));
+        DateTimeUtils.setCurrentMillisFixed(6);
+        assertEquals(true,  interval37.overlaps((ReadableInterval) null));
+        DateTimeUtils.setCurrentMillisFixed(7);
+        assertEquals(false, interval37.overlaps((ReadableInterval) null));  // abuts after
+        DateTimeUtils.setCurrentMillisFixed(8);
+        assertEquals(false, interval37.overlaps((ReadableInterval) null));  // gap after
+        
+        DateTimeUtils.setCurrentMillisFixed(3);
+        assertEquals(true,  interval33.overlaps((ReadableInterval) null));
+    }
+
+    public void testOverlaps_RInterval_zeroDuration() {
+        assertEquals(true,  interval33.overlaps(interval33));
+        assertEquals(true,  interval33.overlaps(interval37));
+        assertEquals(true,  interval37.overlaps(interval33));
+        assertEquals(false, interval33.overlaps(new Interval(1, 2)));
+        assertEquals(false, interval33.overlaps(new Interval(8, 9)));
+        assertEquals(true,  interval33.overlaps(new Interval(1, 9)));
     }
 
     //-----------------------------------------------------------------------
     public void testOverlap_RInterval() {
-        Interval test = new Interval(TEST_TIME1, TEST_TIME2);
-        
-        assertEquals(
-                new Interval(TEST_TIME1, TEST_TIME1),
-                test.overlap(new Interval(TEST_TIME1, TEST_TIME1)));
-        assertEquals(
-                new Interval(TEST_TIME1, TEST_TIME1),
-                new Interval(TEST_TIME1, TEST_TIME1).overlap(test));
-        
-        assertEquals(
-                new Interval(TEST_TIME1, TEST_TIME2),
-                test.overlap(new Interval(TEST_TIME1, TEST_TIME2)));
-        assertEquals(
-                new Interval(TEST_TIME1, TEST_TIME2),
-                test.overlap(new Interval(TEST_TIME1 - 1, TEST_TIME2)));
-        assertEquals(
-                new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2),
-                test.overlap(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2)));
-        assertEquals(
-                null,
-                test.overlap(new Interval(TEST_TIME2, TEST_TIME2)));
-        assertEquals(
-                new Interval(TEST_TIME2 - 1, TEST_TIME2),
-                test.overlap(new Interval(TEST_TIME2 - 1, TEST_TIME2)));
-        
-        assertEquals(
-                new Interval(TEST_TIME1, TEST_TIME2),
-                test.overlap(new Interval(TEST_TIME1, TEST_TIME2 + 1)));
-        assertEquals(
-                new Interval(TEST_TIME1, TEST_TIME2),
-                test.overlap(new Interval(TEST_TIME1 - 1, TEST_TIME2 + 1)));
-        assertEquals(
-                new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2),
-                test.overlap(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2 + 1)));
-        assertEquals(
-                null,
-                test.overlap(new Interval(TEST_TIME2, TEST_TIME2 + 1)));
-        assertEquals(
-                new Interval(TEST_TIME2 - 1, TEST_TIME2),
-                test.overlap(new Interval(TEST_TIME2 - 1, TEST_TIME2 + 1)));
-        
-        assertEquals(
-                null,
-                test.overlap(new Interval(TEST_TIME1 - 1, TEST_TIME1 - 1)));
-        assertEquals(
-                null,
-                test.overlap(new Interval(TEST_TIME1 - 1, TEST_TIME1)));
-        assertEquals(
-                new Interval(TEST_TIME1, TEST_TIME1 + 1),
-                test.overlap(new Interval(TEST_TIME1 - 1, TEST_TIME1 + 1)));
-        
-        assertEquals(
-                new Interval(TEST_TIME_NOW, TEST_TIME_NOW),
-                test.overlap((ReadableInterval) null));
+        assertEquals(null, interval37.overlap(new Interval(1, 2)));  // gap before
+        assertEquals(null, interval37.overlap(new Interval(2, 2)));  // gap before
+        
+        assertEquals(null, interval37.overlap(new Interval(2, 3)));  // abuts before
+        assertEquals(new Interval(3, 3), interval37.overlap(new Interval(3, 3)));
+        
+        assertEquals(new Interval(3, 4), interval37.overlap(new Interval(2, 4)));  // truncated start
+        assertEquals(new Interval(3, 4), interval37.overlap(new Interval(3, 4)));
+        assertEquals(new Interval(4, 4), interval37.overlap(new Interval(4, 4)));
+        
+        assertEquals(new Interval(3, 7), interval37.overlap(new Interval(2, 7)));  // truncated start
+        assertEquals(new Interval(3, 7), interval37.overlap(new Interval(3, 7)));
+        assertEquals(new Interval(4, 7), interval37.overlap(new Interval(4, 7)));
+        assertEquals(new Interval(5, 7), interval37.overlap(new Interval(5, 7)));
+        assertEquals(new Interval(6, 7), interval37.overlap(new Interval(6, 7)));
+        assertEquals(null, interval37.overlap(new Interval(7, 7)));  // abuts after
+        
+        assertEquals(new Interval(3, 7), interval37.overlap(new Interval(2, 8)));  // truncated start and end
+        assertEquals(new Interval(3, 7), interval37.overlap(new Interval(3, 8)));  // truncated end
+        assertEquals(new Interval(4, 7), interval37.overlap(new Interval(4, 8)));  // truncated end
+        assertEquals(new Interval(5, 7), interval37.overlap(new Interval(5, 8)));  // truncated end
+        assertEquals(new Interval(6, 7), interval37.overlap(new Interval(6, 8)));  // truncated end
+        assertEquals(null, interval37.overlap(new Interval(7, 8)));  // abuts after
+        assertEquals(null, interval37.overlap(new Interval(8, 8)));  // gap after
+    }
+
+    public void testOverlap_RInterval_null() {
+        DateTimeUtils.setCurrentMillisFixed(2);
+        assertEquals(null, interval37.overlap((ReadableInterval) null));  // gap before
+        DateTimeUtils.setCurrentMillisFixed(3);
+        assertEquals(new Interval(3, 3), interval37.overlap((ReadableInterval) null));
+        DateTimeUtils.setCurrentMillisFixed(4);
+        assertEquals(new Interval(4, 4), interval37.overlap((ReadableInterval) null));
+        DateTimeUtils.setCurrentMillisFixed(6);
+        assertEquals(new Interval(6, 6), interval37.overlap((ReadableInterval) null));
+        DateTimeUtils.setCurrentMillisFixed(7);
+        assertEquals(null, interval37.overlap((ReadableInterval) null));  // abuts after
+        DateTimeUtils.setCurrentMillisFixed(8);
+        assertEquals(null, interval37.overlap((ReadableInterval) null));  // gap after
+        
+        DateTimeUtils.setCurrentMillisFixed(3);
+        assertEquals(new Interval(3, 3), interval33.overlap((ReadableInterval) null));
     }
 
     public void testOverlap_RInterval_zone() {
-        Interval testA = new Interval(new DateTime(TEST_TIME1, LONDON), new DateTime(TEST_TIME2, LONDON));
+        Interval testA = new Interval(new DateTime(3, LONDON), new DateTime(7, LONDON));
         assertEquals(ISOChronology.getInstance(LONDON), testA.getChronology());
         
-        Interval testB = new Interval(new DateTime(TEST_TIME1 + 1, MOSCOW), new DateTime(TEST_TIME2 + 1, MOSCOW));
+        Interval testB = new Interval(new DateTime(4, MOSCOW), new DateTime(8, MOSCOW));
         assertEquals(ISOChronology.getInstance(MOSCOW), testB.getChronology());
         
         Interval resultAB = testA.overlap(testB);
@@ -370,10 +657,10 @@ public void testOverlap_RInterval_zone() {
     }
 
     public void testOverlap_RInterval_zoneUTC() {
-        Interval testA = new Interval(new Instant(TEST_TIME1), new Instant(TEST_TIME2));
+        Interval testA = new Interval(new Instant(3), new Instant(7));
         assertEquals(ISOChronology.getInstanceUTC(), testA.getChronology());
         
-        Interval testB = new Interval(new Instant(TEST_TIME1 + 1), new Instant(TEST_TIME2 + 1));
+        Interval testB = new Interval(new Instant(4), new Instant(8));
         assertEquals(ISOChronology.getInstanceUTC(), testB.getChronology());
         
         Interval result = testA.overlap(testB);
@@ -382,35 +669,48 @@ public void testOverlap_RInterval_zoneUTC() {
 
     //-----------------------------------------------------------------------
     public void testGap_RInterval() {
-        Interval test = new Interval(TEST_TIME1, TEST_TIME2);
+        assertEquals(new Interval(1, 3), interval37.gap(new Interval(0, 1)));
+        assertEquals(new Interval(1, 3), interval37.gap(new Interval(1, 1)));
         
-        assertEquals(
-                new Interval(TEST_TIME2, TEST_TIME2 + 2),
-                test.gap(new Interval(TEST_TIME2 + 2, TEST_TIME2 + 4)));
-        assertEquals(
-                null,
-                test.gap(new Interval(TEST_TIME2, TEST_TIME2)));
-
-        assertEquals(
-                new Interval(TEST_TIME1 - 2, TEST_TIME1),
-                test.gap(new Interval(TEST_TIME1 - 4, TEST_TIME1 - 2)));
-        assertEquals(
-                null,
-                test.gap(new Interval(TEST_TIME1 - 2, TEST_TIME1)));
+        assertEquals(null, interval37.gap(new Interval(2, 3)));  // abuts before
+        assertEquals(null, interval37.gap(new Interval(3, 3)));  // abuts before
+        
+        assertEquals(null, interval37.gap(new Interval(4, 6)));  // overlaps
+        
+        assertEquals(null, interval37.gap(new Interval(3, 7)));  // overlaps
+        assertEquals(null, interval37.gap(new Interval(6, 7)));  // overlaps
+        assertEquals(null, interval37.gap(new Interval(7, 7)));  // abuts after
+        
+        assertEquals(null, interval37.gap(new Interval(6, 8)));  // overlaps
+        assertEquals(null, interval37.gap(new Interval(7, 8)));  // abuts after
+        assertEquals(new Interval(7, 8), interval37.gap(new Interval(8, 8)));
+        
+        assertEquals(null, interval37.gap(new Interval(6, 9)));  // overlaps
+        assertEquals(null, interval37.gap(new Interval(7, 9)));  // abuts after
+        assertEquals(new Interval(7, 8), interval37.gap(new Interval(8, 9)));
+        assertEquals(new Interval(7, 9), interval37.gap(new Interval(9, 9)));
+    }
 
-        assertEquals(
-                null,
-                test.gap(new Interval(TEST_TIME1, TEST_TIME2)));
-        assertEquals(
-                null,
-                test.gap(new Interval(TEST_TIME1 + 1, TEST_TIME2 - 1)));
+    public void testGap_RInterval_null() {
+        DateTimeUtils.setCurrentMillisFixed(2);
+        assertEquals(new Interval(2, 3),  interval37.gap((ReadableInterval) null));
+        DateTimeUtils.setCurrentMillisFixed(3);
+        assertEquals(null,  interval37.gap((ReadableInterval) null));  // abuts before
+        DateTimeUtils.setCurrentMillisFixed(4);
+        assertEquals(null,  interval37.gap((ReadableInterval) null));  // overlaps
+        DateTimeUtils.setCurrentMillisFixed(6);
+        assertEquals(null,  interval37.gap((ReadableInterval) null));  // overlaps
+        DateTimeUtils.setCurrentMillisFixed(7);
+        assertEquals(null,  interval37.gap((ReadableInterval) null));  // abuts after
+        DateTimeUtils.setCurrentMillisFixed(8);
+        assertEquals(new Interval(7, 8),  interval37.gap((ReadableInterval) null));
     }
 
     public void testGap_RInterval_zone() {
-        Interval testA = new Interval(new DateTime(TEST_TIME1, LONDON), new DateTime(TEST_TIME2, LONDON));
+        Interval testA = new Interval(new DateTime(3, LONDON), new DateTime(7, LONDON));
         assertEquals(ISOChronology.getInstance(LONDON), testA.getChronology());
         
-        Interval testB = new Interval(new DateTime(TEST_TIME1 - 100, MOSCOW), new DateTime(TEST_TIME1 - 50, MOSCOW));
+        Interval testB = new Interval(new DateTime(1, MOSCOW), new DateTime(2, MOSCOW));
         assertEquals(ISOChronology.getInstance(MOSCOW), testB.getChronology());
         
         Interval resultAB = testA.gap(testB);
@@ -421,10 +721,10 @@ public void testGap_RInterval_zone() {
     }
 
     public void testGap_RInterval_zoneUTC() {
-        Interval testA = new Interval(new Instant(TEST_TIME1), new Instant(TEST_TIME2));
+        Interval testA = new Interval(new Instant(3), new Instant(7));
         assertEquals(ISOChronology.getInstanceUTC(), testA.getChronology());
         
-        Interval testB = new Interval(new Instant(TEST_TIME1 - 100), new Instant(TEST_TIME1 - 50));
+        Interval testB = new Interval(new Instant(1), new Instant(2));
         assertEquals(ISOChronology.getInstanceUTC(), testB.getChronology());
         
         Interval result = testA.gap(testB);
@@ -433,132 +733,206 @@ public void testGap_RInterval_zoneUTC() {
 
     //-----------------------------------------------------------------------
     public void testAbuts_RInterval() {
-        Interval test = new Interval(TEST_TIME1, TEST_TIME2);
-        
-        assertEquals(
-                false,
-                test.abuts(new Interval(TEST_TIME2 + 2, TEST_TIME2 + 4)));
-        assertEquals(
-                true,
-                test.abuts(new Interval(TEST_TIME2, TEST_TIME2)));
-
-        assertEquals(
-                false,
-                test.abuts(new Interval(TEST_TIME1 - 4, TEST_TIME1 - 2)));
-        assertEquals(
-                true,
-                test.abuts(new Interval(TEST_TIME1 - 2, TEST_TIME1)));
-
-        assertEquals(
-                false,
-                test.abuts(new Interval(TEST_TIME1, TEST_TIME2)));
-        assertEquals(
-                false,
-                test.abuts(new Interval(TEST_TIME1 + 1, TEST_TIME2 - 1)));
-    }
-
-    //-----------------------------------------------------------------------
+        assertEquals(false, interval37.abuts(new Interval(1, 2)));  // gap before
+        assertEquals(false, interval37.abuts(new Interval(2, 2)));  // gap before
+        
+        assertEquals(true,  interval37.abuts(new Interval(2, 3)));
+        assertEquals(true,  interval37.abuts(new Interval(3, 3)));
+        
+        assertEquals(false, interval37.abuts(new Interval(2, 4)));  // overlaps
+        assertEquals(false, interval37.abuts(new Interval(3, 4)));  // overlaps
+        assertEquals(false, interval37.abuts(new Interval(4, 4)));  // overlaps
+        
+        assertEquals(false, interval37.abuts(new Interval(2, 6)));  // overlaps
+        assertEquals(false, interval37.abuts(new Interval(3, 6)));  // overlaps
+        assertEquals(false, interval37.abuts(new Interval(4, 6)));  // overlaps
+        assertEquals(false, interval37.abuts(new Interval(5, 6)));  // overlaps
+        assertEquals(false, interval37.abuts(new Interval(6, 6)));  // overlaps
+        
+        assertEquals(false, interval37.abuts(new Interval(2, 7)));  // overlaps
+        assertEquals(false, interval37.abuts(new Interval(3, 7)));  // overlaps
+        assertEquals(false, interval37.abuts(new Interval(4, 7)));  // overlaps
+        assertEquals(false, interval37.abuts(new Interval(5, 7)));  // overlaps
+        assertEquals(false, interval37.abuts(new Interval(6, 7)));  // overlaps
+        assertEquals(true,  interval37.abuts(new Interval(7, 7)));
+        
+        assertEquals(false, interval37.abuts(new Interval(2, 8)));  // overlaps
+        assertEquals(false, interval37.abuts(new Interval(3, 8)));  // overlaps
+        assertEquals(false, interval37.abuts(new Interval(4, 8)));  // overlaps
+        assertEquals(false, interval37.abuts(new Interval(5, 8)));  // overlaps
+        assertEquals(false, interval37.abuts(new Interval(6, 8)));  // overlaps
+        assertEquals(true,  interval37.abuts(new Interval(7, 8)));
+        assertEquals(false, interval37.abuts(new Interval(8, 8)));  // gap after
+        
+        assertEquals(false, interval37.abuts(new Interval(8, 9)));  // gap after
+        assertEquals(false, interval37.abuts(new Interval(9, 9)));  // gap after
+    }
+
+    public void testAbuts_RInterval_null() {
+        DateTimeUtils.setCurrentMillisFixed(2);
+        assertEquals(false,  interval37.abuts((ReadableInterval) null));  // gap before
+        DateTimeUtils.setCurrentMillisFixed(3);
+        assertEquals(true,  interval37.abuts((ReadableInterval) null));
+        DateTimeUtils.setCurrentMillisFixed(4);
+        assertEquals(false,  interval37.abuts((ReadableInterval) null));  // overlaps
+        DateTimeUtils.setCurrentMillisFixed(6);
+        assertEquals(false,  interval37.abuts((ReadableInterval) null));  // overlaps
+        DateTimeUtils.setCurrentMillisFixed(7);
+        assertEquals(true,  interval37.abuts((ReadableInterval) null));
+        DateTimeUtils.setCurrentMillisFixed(8);
+        assertEquals(false,  interval37.abuts((ReadableInterval) null));  // gap after
+    }
+
+    // -----------------------------------------------------------------------
     public void testIsBefore_long() {
-        Interval test = new Interval(TEST_TIME1, TEST_TIME2);
-        
-        assertEquals(false, test.isBefore(TEST_TIME1 - 1));
-        assertEquals(false, test.isBefore(TEST_TIME1));
-        assertEquals(false, test.isBefore(TEST_TIME1 + 1));
-        
-        assertEquals(false, test.isBefore(TEST_TIME2 - 1));
-        assertEquals(true, test.isBefore(TEST_TIME2));
-        assertEquals(true, test.isBefore(TEST_TIME2 + 1));
+        assertEquals(false, interval37.isBefore(2));
+        assertEquals(false, interval37.isBefore(3));
+        assertEquals(false, interval37.isBefore(4));
+        assertEquals(false, interval37.isBefore(5));
+        assertEquals(false, interval37.isBefore(6));
+        assertEquals(true,  interval37.isBefore(7));
+        assertEquals(true,  interval37.isBefore(8));
     }
 
     public void testIsBeforeNow() {
-        Interval test = new Interval(TEST_TIME1, TEST_TIME2);
-        
-        DateTimeUtils.setCurrentMillisFixed(TEST_TIME2 - 1);
-        assertEquals(false, test.isBeforeNow());
-        DateTimeUtils.setCurrentMillisFixed(TEST_TIME2);
-        assertEquals(true, test.isBeforeNow());
-        DateTimeUtils.setCurrentMillisFixed(TEST_TIME2 + 1);
-        assertEquals(true, test.isBeforeNow());
+        DateTimeUtils.setCurrentMillisFixed(2);
+        assertEquals(false, interval37.isBeforeNow());
+        DateTimeUtils.setCurrentMillisFixed(3);
+        assertEquals(false, interval37.isBeforeNow());
+        DateTimeUtils.setCurrentMillisFixed(4);
+        assertEquals(false, interval37.isBeforeNow());
+        DateTimeUtils.setCurrentMillisFixed(6);
+        assertEquals(false, interval37.isBeforeNow());
+        DateTimeUtils.setCurrentMillisFixed(7);
+        assertEquals(true, interval37.isBeforeNow());
+        DateTimeUtils.setCurrentMillisFixed(8);
+        assertEquals(true, interval37.isBeforeNow());
     }
 
     public void testIsBefore_RI() {
-        Interval test = new Interval(TEST_TIME1, TEST_TIME2);
-        
-        assertEquals(false, test.isBefore(new Instant(TEST_TIME1 - 1)));
-        assertEquals(false, test.isBefore(new Instant(TEST_TIME1)));
-        assertEquals(false, test.isBefore(new Instant(TEST_TIME1 + 1)));
-        
-        assertEquals(false, test.isBefore(new Instant(TEST_TIME2 - 1)));
-        assertEquals(true, test.isBefore(new Instant(TEST_TIME2)));
-        assertEquals(true, test.isBefore(new Instant(TEST_TIME2 + 1)));
-        
-        assertEquals(false, test.isBefore((ReadableInstant) null));
+        assertEquals(false, interval37.isBefore(new Instant(2)));
+        assertEquals(false, interval37.isBefore(new Instant(3)));
+        assertEquals(false, interval37.isBefore(new Instant(4)));
+        assertEquals(false, interval37.isBefore(new Instant(5)));
+        assertEquals(false, interval37.isBefore(new Instant(6)));
+        assertEquals(true,  interval37.isBefore(new Instant(7)));
+        assertEquals(true,  interval37.isBefore(new Instant(8)));
+    }
+
+    public void testIsBefore_RI_null() {
+        DateTimeUtils.setCurrentMillisFixed(2);
+        assertEquals(false, interval37.isBefore((ReadableInstant) null));
+        DateTimeUtils.setCurrentMillisFixed(3);
+        assertEquals(false, interval37.isBefore((ReadableInstant) null));
+        DateTimeUtils.setCurrentMillisFixed(4);
+        assertEquals(false, interval37.isBefore((ReadableInstant) null));
+        DateTimeUtils.setCurrentMillisFixed(6);
+        assertEquals(false, interval37.isBefore((ReadableInstant) null));
+        DateTimeUtils.setCurrentMillisFixed(7);
+        assertEquals(true, interval37.isBefore((ReadableInstant) null));
+        DateTimeUtils.setCurrentMillisFixed(8);
+        assertEquals(true, interval37.isBefore((ReadableInstant) null));
     }
 
     public void testIsBefore_RInterval() {
-        Interval test = new Interval(TEST_TIME1, TEST_TIME2);
-        
-        assertEquals(false, test.isBefore(new Interval(Long.MIN_VALUE, TEST_TIME1 - 1)));
-        assertEquals(false, test.isBefore(new Interval(Long.MIN_VALUE, TEST_TIME1)));
-        assertEquals(false, test.isBefore(new Interval(Long.MIN_VALUE, TEST_TIME1 + 1)));
-        
-        assertEquals(false, test.isBefore(new Interval(TEST_TIME2 - 1, Long.MAX_VALUE)));
-        assertEquals(true, test.isBefore(new Interval(TEST_TIME2, Long.MAX_VALUE)));
-        assertEquals(true, test.isBefore(new Interval(TEST_TIME2 + 1, Long.MAX_VALUE)));
-        
-        assertEquals(false, test.isBefore((ReadableInterval) null));
+        assertEquals(false, interval37.isBefore(new Interval(Long.MIN_VALUE, 2)));
+        assertEquals(false, interval37.isBefore(new Interval(Long.MIN_VALUE, 3)));
+        assertEquals(false, interval37.isBefore(new Interval(Long.MIN_VALUE, 4)));
+        
+        assertEquals(false, interval37.isBefore(new Interval(6, Long.MAX_VALUE)));
+        assertEquals(true, interval37.isBefore(new Interval(7, Long.MAX_VALUE)));
+        assertEquals(true, interval37.isBefore(new Interval(8, Long.MAX_VALUE)));
+    }
+
+    public void testIsBefore_RInterval_null() {
+        DateTimeUtils.setCurrentMillisFixed(2);
+        assertEquals(false, interval37.isBefore((ReadableInterval) null));
+        DateTimeUtils.setCurrentMillisFixed(3);
+        assertEquals(false, interval37.isBefore((ReadableInterval) null));
+        DateTimeUtils.setCurrentMillisFixed(4);
+        assertEquals(false, interval37.isBefore((ReadableInterval) null));
+        DateTimeUtils.setCurrentMillisFixed(6);
+        assertEquals(false, interval37.isBefore((ReadableInterval) null));
+        DateTimeUtils.setCurrentMillisFixed(7);
+        assertEquals(true, interval37.isBefore((ReadableInterval) null));
+        DateTimeUtils.setCurrentMillisFixed(8);
+        assertEquals(true, interval37.isBefore((ReadableInterval) null));
     }
 
     //-----------------------------------------------------------------------
     public void testIsAfter_long() {
-        Interval test = new Interval(TEST_TIME1, TEST_TIME2);
-        
-        assertEquals(true, test.isAfter(TEST_TIME1 - 1));
-        assertEquals(false, test.isAfter(TEST_TIME1));
-        assertEquals(false, test.isAfter(TEST_TIME1 + 1));
-        
-        assertEquals(false, test.isAfter(TEST_TIME2 - 1));
-        assertEquals(false, test.isAfter(TEST_TIME2));
-        assertEquals(false, test.isAfter(TEST_TIME2 + 1));
+        assertEquals(true,  interval37.isAfter(2));
+        assertEquals(false, interval37.isAfter(3));
+        assertEquals(false, interval37.isAfter(4));
+        assertEquals(false, interval37.isAfter(5));
+        assertEquals(false, interval37.isAfter(6));
+        assertEquals(false, interval37.isAfter(7));
+        assertEquals(false, interval37.isAfter(8));
     }
 
     public void testIsAfterNow() {
-        Interval test = new Interval(TEST_TIME1, TEST_TIME2);
-        
-        DateTimeUtils.setCurrentMillisFixed(TEST_TIME1 - 1);
-        assertEquals(true, test.isAfterNow());
-        DateTimeUtils.setCurrentMillisFixed(TEST_TIME1);
-        assertEquals(false, test.isAfterNow());
-        DateTimeUtils.setCurrentMillisFixed(TEST_TIME1 + 1);
-        assertEquals(false, test.isAfterNow());
+        DateTimeUtils.setCurrentMillisFixed(2);
+        assertEquals(true, interval37.isAfterNow());
+        DateTimeUtils.setCurrentMillisFixed(3);
+        assertEquals(false, interval37.isAfterNow());
+        DateTimeUtils.setCurrentMillisFixed(4);
+        assertEquals(false, interval37.isAfterNow());
+        DateTimeUtils.setCurrentMillisFixed(6);
+        assertEquals(false, interval37.isAfterNow());
+        DateTimeUtils.setCurrentMillisFixed(7);
+        assertEquals(false, interval37.isAfterNow());
+        DateTimeUtils.setCurrentMillisFixed(8);
+        assertEquals(false, interval37.isAfterNow());
     }
 
     public void testIsAfter_RI() {
-        Interval test = new Interval(TEST_TIME1, TEST_TIME2);
-        
-        assertEquals(true, test.isAfter(new Instant(TEST_TIME1 - 1)));
-        assertEquals(false, test.isAfter(new Instant(TEST_TIME1)));
-        assertEquals(false, test.isAfter(new Instant(TEST_TIME1 + 1)));
-        
-        assertEquals(false, test.isAfter(new Instant(TEST_TIME2 - 1)));
-        assertEquals(false, test.isAfter(new Instant(TEST_TIME2)));
-        assertEquals(false, test.isAfter(new Instant(TEST_TIME2 + 1)));
-        
-        assertEquals(false, test.isAfter((ReadableInstant) null));
+        assertEquals(true,  interval37.isAfter(new Instant(2)));
+        assertEquals(false, interval37.isAfter(new Instant(3)));
+        assertEquals(false, interval37.isAfter(new Instant(4)));
+        assertEquals(false, interval37.isAfter(new Instant(5)));
+        assertEquals(false, interval37.isAfter(new Instant(6)));
+        assertEquals(false, interval37.isAfter(new Instant(7)));
+        assertEquals(false, interval37.isAfter(new Instant(8)));
+    }
+
+    public void testIsAfter_RI_null() {
+        DateTimeUtils.setCurrentMillisFixed(2);
+        assertEquals(true, interval37.isAfter((ReadableInstant) null));
+        DateTimeUtils.setCurrentMillisFixed(3);
+        assertEquals(false, interval37.isAfter((ReadableInstant) null));
+        DateTimeUtils.setCurrentMillisFixed(4);
+        assertEquals(false, interval37.isAfter((ReadableInstant) null));
+        DateTimeUtils.setCurrentMillisFixed(6);
+        assertEquals(false, interval37.isAfter((ReadableInstant) null));
+        DateTimeUtils.setCurrentMillisFixed(7);
+        assertEquals(false, interval37.isAfter((ReadableInstant) null));
+        DateTimeUtils.setCurrentMillisFixed(8);
+        assertEquals(false, interval37.isAfter((ReadableInstant) null));
     }
 
     public void testIsAfter_RInterval() {
-        Interval test = new Interval(TEST_TIME1, TEST_TIME2);
-        
-        assertEquals(true, test.isAfter(new Interval(Long.MIN_VALUE, TEST_TIME1 - 1)));
-        assertEquals(true, test.isAfter(new Interval(Long.MIN_VALUE, TEST_TIME1)));
-        assertEquals(false, test.isAfter(new Interval(Long.MIN_VALUE, TEST_TIME1 + 1)));
-        
-        assertEquals(false, test.isAfter(new Interval(TEST_TIME2 - 1, Long.MAX_VALUE)));
-        assertEquals(false, test.isAfter(new Interval(TEST_TIME2, Long.MAX_VALUE)));
-        assertEquals(false, test.isAfter(new Interval(TEST_TIME2 + 1, Long.MAX_VALUE)));
-        
-        assertEquals(false, test.isAfter((ReadableInterval) null));
+        assertEquals(true, interval37.isAfter(new Interval(Long.MIN_VALUE, 2)));
+        assertEquals(true, interval37.isAfter(new Interval(Long.MIN_VALUE, 3)));
+        assertEquals(false, interval37.isAfter(new Interval(Long.MIN_VALUE, 4)));
+        
+        assertEquals(false, interval37.isAfter(new Interval(6, Long.MAX_VALUE)));
+        assertEquals(false, interval37.isAfter(new Interval(7, Long.MAX_VALUE)));
+        assertEquals(false, interval37.isAfter(new Interval(8, Long.MAX_VALUE)));
+    }
+
+    public void testIsAfter_RInterval_null() {
+        DateTimeUtils.setCurrentMillisFixed(2);
+        assertEquals(true, interval37.isAfter((ReadableInterval) null));
+        DateTimeUtils.setCurrentMillisFixed(3);
+        assertEquals(true, interval37.isAfter((ReadableInterval) null));
+        DateTimeUtils.setCurrentMillisFixed(4);
+        assertEquals(false, interval37.isAfter((ReadableInterval) null));
+        DateTimeUtils.setCurrentMillisFixed(6);
+        assertEquals(false, interval37.isAfter((ReadableInterval) null));
+        DateTimeUtils.setCurrentMillisFixed(7);
+        assertEquals(false, interval37.isAfter((ReadableInterval) null));
+        DateTimeUtils.setCurrentMillisFixed(8);
+        assertEquals(false, interval37.isAfter((ReadableInterval) null));
     }
 
     //-----------------------------------------------------------------------

From a01f36f8431f42d8d1dad2d67e256e37f73027eb Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 26 Jul 2006 23:11:12 +0000
Subject: [PATCH 104/115] Reset interval behaviour back to v1.2, except fixing
 a bug in overlaps() when passing in null

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1101 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    | 16 +--
 JodaTime/src/java/org/joda/time/Interval.java | 35 +++++--
 .../java/org/joda/time/ReadableInterval.java  | 59 ++++++-----
 .../org/joda/time/base/AbstractInterval.java  | 99 ++++++++-----------
 .../org/joda/time/TestInterval_Basics.java    | 40 ++++----
 .../joda/time/TestMutableInterval_Basics.java |  8 +-
 6 files changed, 123 insertions(+), 134 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 10a9c2000..3cc70670c 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -70,8 +70,6 @@ Data compatible - Yes
   - DateTimeZone data updated to version 2006g
 
 Semantic compatible - Yes, except
-  - Zero duration interval definition has been tightened and slightly altered
-    If your application relies on zero duration intervals then please retest carefully
   - YearMonthDay constructor no longer accepts time only strings
   - TimeOfDay constructor no longer accepts strings including a date
 
@@ -104,16 +102,10 @@ Bug fixes since 1.2
   Previously these methods returned intervals in the default time zone
   Now, they return intervals in the time zone of the original interval
 
-- Interval/MutableInterval.contains/overlaps(ReadableInterval)
-  Previously, these methods were ill-defined with respect to zero duration intervals and nulls
-  These are the new rules:
-    A zero duration interval can be contained in a larger interval, at the start and middle, but not the end
-    A zero duration interval contains itself
-    A zero duration interval can overlap other intervals and be overlapped
-    A zero duration interval overlaps itself
-    A zero duration interval abuts itself and non-zero duration intervals on each side
-  Basically, a zero duration interval acts like an infinitely precise instant with the same value.
-  It represents both a point on the datetime continuum and the smallest possible interval.
+- Interval/MutableInterval.overlaps(ReadableInterval)
+  Previously, these methods did not handle null correctly
+  Now, if the current millisecond instant is at the start of the interval the
+  method returns false (as defined, even if its a little unexpected)
 
 - DateTimeFormatterBuilder.MatchingParser
   Previously didn't estimate parsed length correctly
diff --git a/JodaTime/src/java/org/joda/time/Interval.java b/JodaTime/src/java/org/joda/time/Interval.java
index 38fb29b96..60ef20b9b 100644
--- a/JodaTime/src/java/org/joda/time/Interval.java
+++ b/JodaTime/src/java/org/joda/time/Interval.java
@@ -179,10 +179,17 @@ public Interval toInterval() {
     /**
      * Gets the overlap between this interval and another interval.
      * <p>
-     * This method returns the amount of the overlap, only if the
-     * intervals do overlap.
+     * Intervals are inclusive of the start instant and exclusive of the end.
+     * An interval overlaps another if it shares some common part of the
+     * datetime continuum. This method returns the amount of the overlap,
+     * only if the intervals actually do overlap.
      * If the intervals do not overlap, then null is returned.
      * <p>
+     * When two intervals are compared the result is one of three states:
+     * (a) they abut, (b) there is a gap between them, (c) they overlap.
+     * The abuts state takes precedence over the other two, thus a zero duration
+     * interval at the start of a larger interval abuts and does not overlap.
+     * <p>
      * The chronology of the returned interval is the same as that of
      * this interval (the chronology of the interval parameter is not used).
      * Note that the use of the chronology was only correctly implemented
@@ -207,10 +214,17 @@ public Interval overlap(ReadableInterval interval) {
      * Gets the gap between this interval and another interval.
      * The other interval can be either before or after this interval.
      * <p>
-     * This method returns the amount of the gap only if the
-     * intervals do actually have a gap between them.
+     * Intervals are inclusive of the start instant and exclusive of the end.
+     * An interval has a gap to another interval if there is a non-zero
+     * duration between them. This method returns the amount of the gap only
+     * if the intervals do actually have a gap between them.
      * If the intervals overlap or abut, then null is returned.
      * <p>
+     * When two intervals are compared the result is one of three states:
+     * (a) they abut, (b) there is a gap between them, (c) they overlap.
+     * The abuts state takes precedence over the other two, thus a zero duration
+     * interval at the start of a larger interval abuts and does not overlap.
+     * <p>
      * The chronology of the returned interval is the same as that of
      * this interval (the chronology of the interval parameter is not used).
      * Note that the use of the chronology was only correctly implemented
@@ -239,13 +253,16 @@ public Interval gap(ReadableInterval interval) {
     /**
      * Does this interval abut with the interval specified.
      * <p>
-     * An interval abuts if it starts immediately after, or
-     * ends immediately before this interval without overlap.
-     * Thus this method returns true if
-     * <code>thisStart == otherEnd || thisEnd == otherStart </code>.
-     * <p>
+     * Intervals are inclusive of the start instant and exclusive of the end.
+     * An interval abuts if it starts immediately after, or ends immediately
+     * before this interval without overlap.
      * A zero duration interval abuts with itself.
      * <p>
+     * When two intervals are compared the result is one of three states:
+     * (a) they abut, (b) there is a gap between them, (c) they overlap.
+     * The abuts state takes precedence over the other two, thus a zero duration
+     * interval at the start of a larger interval abuts and does not overlap.
+     * <p>
      * For example:
      * <pre>
      * [09:00 to 10:00) abuts [08:00 to 08:30)  = false (completely before)
diff --git a/JodaTime/src/java/org/joda/time/ReadableInterval.java b/JodaTime/src/java/org/joda/time/ReadableInterval.java
index 910d13dfd..d0c728232 100644
--- a/JodaTime/src/java/org/joda/time/ReadableInterval.java
+++ b/JodaTime/src/java/org/joda/time/ReadableInterval.java
@@ -81,14 +81,10 @@
 
     //-----------------------------------------------------------------------
     /**
-     * Does this time interval contain or equal the specified instant.
+     * Does this time interval contain the specified instant.
      * <p>
-     * Non-zero duration intervals are inclusive of the start instant and exclusive of the end.
-     * The instant is contained if it is at the start or middle of this interval
-     * but not at the end.
-     * <p>
-     * A zero duration interval represents the smallest possible interval
-     * and only contains the instant equal to its start and end.
+     * Non-zero duration intervals are inclusive of the start instant and
+     * exclusive of the end. A zero duration interval cannot contain anything.
      * <p>
      * For example:
      * <pre>
@@ -98,26 +94,27 @@
      * [09:00 to 10:00) contains 10:00  = false (equals end)
      * [09:00 to 10:00) contains 10:01  = false (after end)
      * 
-     * [14:00 to 14:00) contains 14:00  = true (equal)
+     * [14:00 to 14:00) contains 14:00  = false (zero duration contains nothing)
      * </pre>
-     * Passng in a <code>null</code> parameter will have the same effect as
-     * calling {@link #containsNow()}.
-     * 
+     *
      * @param instant  the instant, null means now
      * @return true if this time interval contains the instant
      */
     boolean contains(ReadableInstant instant);
     
     /**
-     * Does this time interval contain or equal the specified time interval.
+     * Does this time interval contain the specified time interval.
      * <p>
-     * Non-zero duration intervals are inclusive of the start instant and exclusive of the end.
-     * The other interval is contained if this interval wholly contains, starts,
-     * finishes or equals it.
+     * Non-zero duration intervals are inclusive of the start instant and
+     * exclusive of the end. The other interval is contained if this interval
+     * wholly contains, starts, finishes or equals it.
+     * A zero duration interval cannot contain anything.
      * <p>
-     * A zero duration interval represents the smallest possible interval
-     * and will contain itself (because it is equal to itself). It will also
-     * be contained by a larger interval at the start, middle but not the end.
+     * When two intervals are compared the result is one of three states:
+     * (a) they abut, (b) there is a gap between them, (c) they overlap.
+     * The <code>contains</code> method is not related to these states.
+     * In particular, a zero duration interval is contained at the start of
+     * a larger interval, but does not overlap (it abuts instead).
      * <p>
      * For example:
      * <pre>
@@ -131,12 +128,10 @@
      * [09:00 to 10:00) contains [09:00 to 10:01)  = false (otherEnd after thisEnd)
      * [09:00 to 10:00) contains [10:00 to 10:00)  = false (otherStart equals thisEnd)
      * 
-     * [14:00 to 14:00) contains [14:00 to 14:00)  = true (equal)
+     * [14:00 to 14:00) contains [14:00 to 14:00)  = false (zero duration contains nothing)
      * </pre>
-     * Passng in a <code>null</code> parameter will have the same effect as
-     * calling {@link #containsNow()}.
-     * 
-     * @param interval  the time interval to compare to, null means a zero length interval now
+     *
+     * @param interval  the time interval to compare to, null means a zero duration interval now
      * @return true if this time interval contains the time interval
      */
     boolean contains(ReadableInterval interval);
@@ -144,12 +139,14 @@
     /**
      * Does this time interval overlap the specified time interval.
      * <p>
-     * Non-zero duration intervals are inclusive of the start instant and exclusive of the end.
-     * The intervals overlap if at least some of the time interval is in common.
+     * Intervals are inclusive of the start instant and exclusive of the end.
+     * An interval overlaps another if it shares some common part of the
+     * datetime continuum. 
      * <p>
-     * A zero duration interval represents the smallest possible interval
-     * and will overlap itself and larger intervals. The size of the overlap will
-     * be a zero duration interval equal to the original zero duration interval.
+     * When two intervals are compared the result is one of three states:
+     * (a) they abut, (b) there is a gap between them, (c) they overlap.
+     * The abuts state takes precedence over the other two, thus a zero duration
+     * interval at the start of a larger interval abuts and does not overlap.
      * <p>
      * For example:
      * <pre>
@@ -159,7 +156,7 @@
      * [09:00 to 10:00) overlaps [08:00 to 10:00)  = true
      * [09:00 to 10:00) overlaps [08:00 to 11:00)  = true
      * 
-     * [09:00 to 10:00) overlaps [09:00 to 09:00)  = true
+     * [09:00 to 10:00) overlaps [09:00 to 09:00)  = false (abuts before)
      * [09:00 to 10:00) overlaps [09:00 to 09:30)  = true
      * [09:00 to 10:00) overlaps [09:00 to 10:00)  = true
      * [09:00 to 10:00) overlaps [09:00 to 11:00)  = true
@@ -173,10 +170,10 @@
      * 
      * [09:00 to 10:00) overlaps [10:30 to 11:00)  = false (completely after)
      * 
-     * [14:00 to 14:00) overlaps [14:00 to 14:00)  = true
+     * [14:00 to 14:00) overlaps [14:00 to 14:00)  = false (abuts before and after)
      * [14:00 to 14:00) overlaps [13:00 to 15:00)  = true
      * </pre>
-     * 
+     *
      * @param interval  the time interval to compare to, null means a zero length interval now
      * @return true if the time intervals overlap
      */
diff --git a/JodaTime/src/java/org/joda/time/base/AbstractInterval.java b/JodaTime/src/java/org/joda/time/base/AbstractInterval.java
index bbc50ba55..598a0c2ed 100644
--- a/JodaTime/src/java/org/joda/time/base/AbstractInterval.java
+++ b/JodaTime/src/java/org/joda/time/base/AbstractInterval.java
@@ -85,13 +85,10 @@ public DateTime getEnd() {
 
     //-----------------------------------------------------------------------
     /**
-     * Does this time interval contain or equal the specified millisecond instant.
+     * Does this time interval contain the specified millisecond instant.
      * <p>
-     * Non-zero duration intervals are inclusive of the start instant and exclusive of the end.
-     * A zero duration intervals only contains the instant equal to its start and end.
-     * <p>
-     * NOTE: From v1.3, comparing a zero duration interval to an instant
-     * with the same value will return true because they are equal
+     * Non-zero duration intervals are inclusive of the start instant and
+     * exclusive of the end. A zero duration interval cannot contain anything.
      *
      * @param millisInstant  the instant to compare to,
      *  millisecond instant from 1970-01-01T00:00:00Z
@@ -100,18 +97,14 @@ public DateTime getEnd() {
     public boolean contains(long millisInstant) {
         long thisStart = getStartMillis();
         long thisEnd = getEndMillis();
-        return (millisInstant >= thisStart && millisInstant < thisEnd) ||
-            (thisStart == millisInstant && thisEnd == millisInstant);
+        return (millisInstant >= thisStart && millisInstant < thisEnd);
     }
 
     /**
-     * Does this time interval contain or equal the current instant.
-     * <p>
-     * Non-zero duration intervals are inclusive of the start instant and exclusive of the end.
-     * A zero duration intervals only contains the instant equal to its start and end.
+     * Does this time interval contain the current instant.
      * <p>
-     * NOTE: From v1.3, comparing a zero duration interval to an instant
-     * with the same value will return true because they are equal
+     * Non-zero duration intervals are inclusive of the start instant and
+     * exclusive of the end. A zero duration interval cannot contain anything.
      *
      * @return true if this time interval contains the current instant
      */
@@ -120,14 +113,10 @@ public boolean containsNow() {
     }
 
     /**
-     * Does this time interval contain or equal the specified instant.
+     * Does this time interval contain the specified instant.
      * <p>
-     * Non-zero duration intervals are inclusive of the start instant and exclusive of the end.
-     * The instant is contained if it is at the start or middle of this interval
-     * but not at the end.
-     * <p>
-     * A zero duration interval represents the smallest possible interval
-     * and only contains the instant equal to its start and end.
+     * Non-zero duration intervals are inclusive of the start instant and
+     * exclusive of the end. A zero duration interval cannot contain anything.
      * <p>
      * For example:
      * <pre>
@@ -137,13 +126,10 @@ public boolean containsNow() {
      * [09:00 to 10:00) contains 10:00  = false (equals end)
      * [09:00 to 10:00) contains 10:01  = false (after end)
      * 
-     * [14:00 to 14:00) contains 14:00  = true (equal)
+     * [14:00 to 14:00) contains 14:00  = false (zero duration contains nothing)
      * </pre>
      * Passng in a <code>null</code> parameter will have the same effect as
      * calling {@link #containsNow()}.
-     * <p>
-     * NOTE: From v1.3, comparing a zero duration interval to an instant
-     * with the same value will return true because they are equal
      *
      * @param instant  the instant, null means now
      * @return true if this time interval contains the instant
@@ -156,15 +142,18 @@ public boolean contains(ReadableInstant instant) {
     }
 
     /**
-     * Does this time interval contain or equal the specified time interval.
+     * Does this time interval contain the specified time interval.
      * <p>
-     * Non-zero duration intervals are inclusive of the start instant and exclusive of the end.
-     * The other interval is contained if this interval wholly contains, starts,
-     * finishes or equals it.
+     * Non-zero duration intervals are inclusive of the start instant and
+     * exclusive of the end. The other interval is contained if this interval
+     * wholly contains, starts, finishes or equals it.
+     * A zero duration interval cannot contain anything.
      * <p>
-     * A zero duration interval represents the smallest possible interval
-     * and will contain itself (because it is equal to itself). It will also
-     * be contained by a larger interval at the start, middle but not the end.
+     * When two intervals are compared the result is one of three states:
+     * (a) they abut, (b) there is a gap between them, (c) they overlap.
+     * The <code>contains</code> method is not related to these states.
+     * In particular, a zero duration interval is contained at the start of
+     * a larger interval, but does not overlap (it abuts instead).
      * <p>
      * For example:
      * <pre>
@@ -178,13 +167,10 @@ public boolean contains(ReadableInstant instant) {
      * [09:00 to 10:00) contains [09:00 to 10:01)  = false (otherEnd after thisEnd)
      * [09:00 to 10:00) contains [10:00 to 10:00)  = false (otherStart equals thisEnd)
      * 
-     * [14:00 to 14:00) contains [14:00 to 14:00)  = true (equal)
+     * [14:00 to 14:00) contains [14:00 to 14:00)  = false (zero duration contains nothing)
      * </pre>
      * Passng in a <code>null</code> parameter will have the same effect as
      * calling {@link #containsNow()}.
-     * <p>
-     * NOTE: From v1.3, comparing a zero duration interval to itself
-     * will return true because they are equal
      *
      * @param interval  the time interval to compare to, null means a zero duration interval now
      * @return true if this time interval contains the time interval
@@ -197,19 +183,20 @@ public boolean contains(ReadableInterval interval) {
         long otherEnd = interval.getEndMillis();
         long thisStart = getStartMillis();
         long thisEnd = getEndMillis();
-        return (thisStart <= otherStart && otherStart < thisEnd && otherEnd <= thisEnd) ||
-            (thisStart == otherStart && thisEnd == otherEnd);
+        return (thisStart <= otherStart && otherStart < thisEnd && otherEnd <= thisEnd);
     }
 
     /**
      * Does this time interval overlap the specified time interval.
      * <p>
-     * Non-zero duration intervals are inclusive of the start instant and exclusive of the end.
-     * The intervals overlap if at least some of the time interval is in common.
+     * Intervals are inclusive of the start instant and exclusive of the end.
+     * An interval overlaps another if it shares some common part of the
+     * datetime continuum. 
      * <p>
-     * A zero duration interval represents the smallest possible interval
-     * and will overlap itself and larger intervals. The size of the overlap will
-     * be a zero duration interval equal to the original zero duration interval.
+     * When two intervals are compared the result is one of three states:
+     * (a) they abut, (b) there is a gap between them, (c) they overlap.
+     * The abuts state takes precedence over the other two, thus a zero duration
+     * interval at the start of a larger interval abuts and does not overlap.
      * <p>
      * For example:
      * <pre>
@@ -219,7 +206,7 @@ public boolean contains(ReadableInterval interval) {
      * [09:00 to 10:00) overlaps [08:00 to 10:00)  = true
      * [09:00 to 10:00) overlaps [08:00 to 11:00)  = true
      * 
-     * [09:00 to 10:00) overlaps [09:00 to 09:00)  = true
+     * [09:00 to 10:00) overlaps [09:00 to 09:00)  = false (abuts before)
      * [09:00 to 10:00) overlaps [09:00 to 09:30)  = true
      * [09:00 to 10:00) overlaps [09:00 to 10:00)  = true
      * [09:00 to 10:00) overlaps [09:00 to 11:00)  = true
@@ -233,28 +220,24 @@ public boolean contains(ReadableInterval interval) {
      * 
      * [09:00 to 10:00) overlaps [10:30 to 11:00)  = false (completely after)
      * 
-     * [14:00 to 14:00) overlaps [14:00 to 14:00)  = true
+     * [14:00 to 14:00) overlaps [14:00 to 14:00)  = false (abuts before and after)
      * [14:00 to 14:00) overlaps [13:00 to 15:00)  = true
      * </pre>
-     * NOTE: From v1.3, comparing a zero duration interval at the start of
-     * another interval will now return true, and comparing a zero duration
-     * interval to itself will return true
-     * 
+     *
      * @param interval  the time interval to compare to, null means a zero length interval now
      * @return true if the time intervals overlap
      */
     public boolean overlaps(ReadableInterval interval) {
-        if (interval == null) {
-            return containsNow();
-        }
-        long otherStart = interval.getStartMillis();
-        long otherEnd = interval.getEndMillis();
         long thisStart = getStartMillis();
         long thisEnd = getEndMillis();
-        
-        return (thisStart < otherEnd && otherStart < thisEnd) ||
-            (thisStart == otherStart &&
-                    (thisStart == thisEnd || otherStart == otherEnd));
+        if (interval == null) {
+            long now = DateTimeUtils.currentTimeMillis();
+            return (thisStart < now && now < thisEnd);
+        }  else {
+            long otherStart = interval.getStartMillis();
+            long otherEnd = interval.getEndMillis();
+            return (thisStart < otherEnd && otherStart < thisEnd);
+        }
     }
 
     //-----------------------------------------------------------------------
diff --git a/JodaTime/src/test/org/joda/time/TestInterval_Basics.java b/JodaTime/src/test/org/joda/time/TestInterval_Basics.java
index b74e7b962..81cf91178 100644
--- a/JodaTime/src/test/org/joda/time/TestInterval_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestInterval_Basics.java
@@ -321,15 +321,15 @@ public void test_useCase_ContainsOverlapAbutGap_zeroDuration() {
         assertEquals(false, interval.overlaps(test1020));
         assertEquals(false, interval.contains(test1020));
         
-        // [10,10) [10,20) - abuts and contains-one-way and overlaps
+        // [10,10) [10,20) - abuts and contains-one-way
         interval = new Interval(10, 10);
         assertNull(test1020.gap(interval));
         assertEquals(true,  test1020.abuts(interval));
-        assertEquals(true,  test1020.overlaps(interval));
+        assertEquals(false, test1020.overlaps(interval));  // abuts, so can't overlap
         assertEquals(true,  test1020.contains(interval));  // normal contains zero-duration
         assertNull(interval.gap(test1020));
         assertEquals(true,  interval.abuts(test1020));
-        assertEquals(true,  interval.overlaps(test1020));
+        assertEquals(false, interval.overlaps(test1020));  // abuts, so can't overlap
         assertEquals(false, interval.contains(test1020));  // zero-duration does not contain normal
         
         // [12,12) [10,20) - contains-one-way and overlaps
@@ -385,11 +385,11 @@ public void test_useCase_ContainsOverlapAbutGap_bothZeroDuration() {
         assertEquals(false, test0808.overlaps(test1010));
         assertEquals(false, test0808.contains(test1010));
         
-        // [10,10) [10,10) - abuts and overlaps
+        // [10,10) [10,10) - abuts
         assertNull(test1010.gap(test1010));
         assertEquals(true,  test1010.abuts(test1010));
-        assertEquals(true,  test1010.overlaps(test1010));
-        assertEquals(true,  test1010.contains(test1010));
+        assertEquals(false, test1010.overlaps(test1010));
+        assertEquals(false, test1010.contains(test1010));
     }
 
     //-----------------------------------------------------------------------
@@ -405,7 +405,7 @@ public void testContains_long() {
 
     public void testContains_long_zeroDuration() {
         assertEquals(false, interval33.contains(2));  // value before
-        assertEquals(true,  interval33.contains(3));
+        assertEquals(false, interval33.contains(3));  // zero length duration contains nothing
         assertEquals(false, interval33.contains(4));  // value after
     }
 
@@ -427,7 +427,7 @@ public void testContainsNow() {
         DateTimeUtils.setCurrentMillisFixed(2);
         assertEquals(false, interval33.containsNow());  // value before
         DateTimeUtils.setCurrentMillisFixed(3);
-        assertEquals(true,  interval33.containsNow());
+        assertEquals(false, interval33.containsNow());  // zero length duration contains nothing
         DateTimeUtils.setCurrentMillisFixed(4);
         assertEquals(false, interval33.containsNow());  // value after
     }
@@ -460,7 +460,7 @@ public void testContains_RI_null() {
 
     public void testContains_RI_zeroDuration() {
         assertEquals(false, interval33.contains(new Instant(2)));  // value before
-        assertEquals(true,  interval33.contains(new Instant(3)));
+        assertEquals(false, interval33.contains(new Instant(3)));  // zero length duration contains nothing
         assertEquals(false, interval33.contains(new Instant(4)));  // value after
     }
 
@@ -517,7 +517,7 @@ public void testContains_RInterval_null() {
     }
 
     public void testContains_RInterval_zeroDuration() {
-        assertEquals(true,  interval33.contains(interval33));
+        assertEquals(false, interval33.contains(interval33));  // zero length duration contains nothing
         assertEquals(false, interval33.contains(interval37));  // zero-duration cannot contain anything
         assertEquals(true,  interval37.contains(interval33));
         assertEquals(false, interval33.contains(new Interval(1, 2)));  // zero-duration cannot contain anything
@@ -527,7 +527,7 @@ public void testContains_RInterval_zeroDuration() {
         DateTimeUtils.setCurrentMillisFixed(2);
         assertEquals(false, interval33.contains((ReadableInterval) null));  // gap before
         DateTimeUtils.setCurrentMillisFixed(3);
-        assertEquals(true,  interval33.contains((ReadableInterval) null));
+        assertEquals(false, interval33.contains((ReadableInterval) null));  // zero length duration contains nothing
         DateTimeUtils.setCurrentMillisFixed(4);
         assertEquals(false, interval33.contains((ReadableInterval) null));  // gap after
     }
@@ -538,7 +538,7 @@ public void testOverlaps_RInterval() {
         assertEquals(false, interval37.overlaps(new Interval(2, 2)));  // gap before
         
         assertEquals(false, interval37.overlaps(new Interval(2, 3)));  // abuts before
-        assertEquals(true,  interval37.overlaps(new Interval(3, 3)));
+        assertEquals(false, interval37.overlaps(new Interval(3, 3)));  // abuts before
         
         assertEquals(true,  interval37.overlaps(new Interval(2, 4)));
         assertEquals(true,  interval37.overlaps(new Interval(3, 4)));
@@ -573,7 +573,7 @@ public void testOverlaps_RInterval_null() {
         DateTimeUtils.setCurrentMillisFixed(2);
         assertEquals(false, interval37.overlaps((ReadableInterval) null));  // gap before
         DateTimeUtils.setCurrentMillisFixed(3);
-        assertEquals(true,  interval37.overlaps((ReadableInterval) null));
+        assertEquals(false, interval37.overlaps((ReadableInterval) null));  // abuts before
         DateTimeUtils.setCurrentMillisFixed(4);
         assertEquals(true,  interval37.overlaps((ReadableInterval) null));
         DateTimeUtils.setCurrentMillisFixed(6);
@@ -584,13 +584,13 @@ public void testOverlaps_RInterval_null() {
         assertEquals(false, interval37.overlaps((ReadableInterval) null));  // gap after
         
         DateTimeUtils.setCurrentMillisFixed(3);
-        assertEquals(true,  interval33.overlaps((ReadableInterval) null));
+        assertEquals(false, interval33.overlaps((ReadableInterval) null));  // abuts before and after
     }
 
     public void testOverlaps_RInterval_zeroDuration() {
-        assertEquals(true,  interval33.overlaps(interval33));
-        assertEquals(true,  interval33.overlaps(interval37));
-        assertEquals(true,  interval37.overlaps(interval33));
+        assertEquals(false, interval33.overlaps(interval33));  // abuts before and after
+        assertEquals(false, interval33.overlaps(interval37));  // abuts before
+        assertEquals(false, interval37.overlaps(interval33));  // abuts before
         assertEquals(false, interval33.overlaps(new Interval(1, 2)));
         assertEquals(false, interval33.overlaps(new Interval(8, 9)));
         assertEquals(true,  interval33.overlaps(new Interval(1, 9)));
@@ -602,7 +602,7 @@ public void testOverlap_RInterval() {
         assertEquals(null, interval37.overlap(new Interval(2, 2)));  // gap before
         
         assertEquals(null, interval37.overlap(new Interval(2, 3)));  // abuts before
-        assertEquals(new Interval(3, 3), interval37.overlap(new Interval(3, 3)));
+        assertEquals(null, interval37.overlap(new Interval(3, 3)));  // abuts before
         
         assertEquals(new Interval(3, 4), interval37.overlap(new Interval(2, 4)));  // truncated start
         assertEquals(new Interval(3, 4), interval37.overlap(new Interval(3, 4)));
@@ -628,7 +628,7 @@ public void testOverlap_RInterval_null() {
         DateTimeUtils.setCurrentMillisFixed(2);
         assertEquals(null, interval37.overlap((ReadableInterval) null));  // gap before
         DateTimeUtils.setCurrentMillisFixed(3);
-        assertEquals(new Interval(3, 3), interval37.overlap((ReadableInterval) null));
+        assertEquals(null, interval37.overlap((ReadableInterval) null));  // abuts before
         DateTimeUtils.setCurrentMillisFixed(4);
         assertEquals(new Interval(4, 4), interval37.overlap((ReadableInterval) null));
         DateTimeUtils.setCurrentMillisFixed(6);
@@ -639,7 +639,7 @@ public void testOverlap_RInterval_null() {
         assertEquals(null, interval37.overlap((ReadableInterval) null));  // gap after
         
         DateTimeUtils.setCurrentMillisFixed(3);
-        assertEquals(new Interval(3, 3), interval33.overlap((ReadableInterval) null));
+        assertEquals(null, interval33.overlap((ReadableInterval) null));  // abuts before and after
     }
 
     public void testOverlap_RInterval_zone() {
diff --git a/JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java b/JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java
index 8e0385449..dabcddbae 100644
--- a/JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java
@@ -263,7 +263,7 @@ public void testContains_RInterval() {
     public void testOverlaps_RInterval() {
         MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);
         
-        assertEquals(true, test.overlaps(new Interval(TEST_TIME1, TEST_TIME1)));
+        assertEquals(false, test.overlaps(new Interval(TEST_TIME1, TEST_TIME1)));
         assertEquals(false, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1)));
         
         assertEquals(true, test.overlaps(new Interval(TEST_TIME1, TEST_TIME1 + 1)));
@@ -289,9 +289,9 @@ public void testOverlaps_RInterval() {
         assertEquals(true, test.overlaps((ReadableInterval) null));
         
         MutableInterval empty = new MutableInterval(TEST_TIME1, TEST_TIME1);
-        assertEquals(true, empty.overlaps(empty));
-        assertEquals(true, empty.overlaps(test));
-        assertEquals(true, test.overlaps(empty));
+        assertEquals(false, empty.overlaps(empty));
+        assertEquals(false, empty.overlaps(test));
+        assertEquals(false, test.overlaps(empty));
     }
 
     //-----------------------------------------------------------------------

From bf1928777955b57d840a69d220dd401e48c52727 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 26 Jul 2006 23:29:14 +0000
Subject: [PATCH 105/115] Optimise implementation of abuts()

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1102 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/Interval.java | 10 +++++++---
 1 file changed, 7 insertions(+), 3 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/Interval.java b/JodaTime/src/java/org/joda/time/Interval.java
index 60ef20b9b..025a633c9 100644
--- a/JodaTime/src/java/org/joda/time/Interval.java
+++ b/JodaTime/src/java/org/joda/time/Interval.java
@@ -287,9 +287,13 @@ public Interval gap(ReadableInterval interval) {
      * @since 1.1
      */
     public boolean abuts(ReadableInterval interval) {
-        interval = DateTimeUtils.getReadableInterval(interval);
-        return (interval.getEndMillis() == getStartMillis() ||
-                getEndMillis() == interval.getStartMillis());
+        if (interval == null) {
+            long now = DateTimeUtils.currentTimeMillis();
+            return (getStartMillis() == now || getEndMillis() == now);
+        } else {
+            return (interval.getEndMillis() == getStartMillis() ||
+                    getEndMillis() == interval.getStartMillis());
+        }
     }
 
     //-----------------------------------------------------------------------

From 6b0549a63ebc3da9dc133f8b9b240218e6ce5101 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Thu, 27 Jul 2006 14:35:11 +0000
Subject: [PATCH 106/115] Minor comment typo

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1103 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/base/AbstractInterval.java | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/base/AbstractInterval.java b/JodaTime/src/java/org/joda/time/base/AbstractInterval.java
index 598a0c2ed..2e6fa63c8 100644
--- a/JodaTime/src/java/org/joda/time/base/AbstractInterval.java
+++ b/JodaTime/src/java/org/joda/time/base/AbstractInterval.java
@@ -128,7 +128,7 @@ public boolean containsNow() {
      * 
      * [14:00 to 14:00) contains 14:00  = false (zero duration contains nothing)
      * </pre>
-     * Passng in a <code>null</code> parameter will have the same effect as
+     * Passing in a <code>null</code> parameter will have the same effect as
      * calling {@link #containsNow()}.
      *
      * @param instant  the instant, null means now
@@ -169,7 +169,7 @@ public boolean contains(ReadableInstant instant) {
      * 
      * [14:00 to 14:00) contains [14:00 to 14:00)  = false (zero duration contains nothing)
      * </pre>
-     * Passng in a <code>null</code> parameter will have the same effect as
+     * Passing in a <code>null</code> parameter will have the same effect as
      * calling {@link #containsNow()}.
      *
      * @param interval  the time interval to compare to, null means a zero duration interval now

From 1710dc4fb6974e6d9e37752f2572f625ce79a52d Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 29 Jul 2006 10:45:16 +0000
Subject: [PATCH 107/115] Test and fix local string parsing

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1104 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/java/org/joda/time/LocalDate.java     |  3 +
 .../src/java/org/joda/time/LocalDateTime.java |  3 +
 .../src/java/org/joda/time/LocalTime.java     |  3 +
 .../joda/time/convert/StringConverter.java    |  8 ++-
 .../joda/time/format/ISODateTimeFormat.java   | 17 +++++-
 .../time/TestLocalDateTime_Constructors.java  | 57 +++++++++++++++++++
 .../joda/time/TestLocalTime_Constructors.java | 49 ++++++++++++----
 .../format/TestISODateTimeFormatParsing.java  | 15 +++--
 8 files changed, 135 insertions(+), 20 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/LocalDate.java b/JodaTime/src/java/org/joda/time/LocalDate.java
index 47ea71847..eaad5e857 100644
--- a/JodaTime/src/java/org/joda/time/LocalDate.java
+++ b/JodaTime/src/java/org/joda/time/LocalDate.java
@@ -258,6 +258,7 @@ public LocalDate(long instant, Chronology chronology) {
      * {@link org.joda.time.convert.ConverterManager ConverterManager} and
      * include ReadablePartial, ReadableInstant, String, Calendar and Date.
      * The String formats are described by {@link ISODateTimeFormat#localDateParser()}.
+     * The default String converter ignores the zone and only parses the field values.
      *
      * @param instant  the datetime object
      * @throws IllegalArgumentException if the instant is invalid
@@ -278,6 +279,7 @@ public LocalDate(Object instant) {
      * {@link org.joda.time.convert.ConverterManager ConverterManager} and
      * include ReadablePartial, ReadableInstant, String, Calendar and Date.
      * The String formats are described by {@link ISODateTimeFormat#localDateParser()}.
+     * The default String converter ignores the zone and only parses the field values.
      *
      * @param instant  the datetime object
      * @param zone  the time zone
@@ -303,6 +305,7 @@ public LocalDate(Object instant, DateTimeZone zone) {
      * {@link org.joda.time.convert.ConverterManager ConverterManager} and
      * include ReadablePartial, ReadableInstant, String, Calendar and Date.
      * The String formats are described by {@link ISODateTimeFormat#localDateParser()}.
+     * The default String converter ignores the zone and only parses the field values.
      *
      * @param instant  the datetime object
      * @param chronology  the chronology
diff --git a/JodaTime/src/java/org/joda/time/LocalDateTime.java b/JodaTime/src/java/org/joda/time/LocalDateTime.java
index f86fd4978..7b2a60a25 100644
--- a/JodaTime/src/java/org/joda/time/LocalDateTime.java
+++ b/JodaTime/src/java/org/joda/time/LocalDateTime.java
@@ -252,6 +252,7 @@ public LocalDateTime(long instant, Chronology chronology) {
      * {@link org.joda.time.convert.ConverterManager ConverterManager} and
      * include ReadablePartial, ReadableInstant, String, Calendar and Date.
      * The String formats are described by {@link ISODateTimeFormat#localDateOptionalTimeParser()}.
+     * The default String converter ignores the zone and only parses the field values.
      *
      * @param instant  the datetime object
      * @throws IllegalArgumentException if the instant is invalid
@@ -272,6 +273,7 @@ public LocalDateTime(Object instant) {
      * {@link org.joda.time.convert.ConverterManager ConverterManager} and
      * include ReadablePartial, ReadableInstant, String, Calendar and Date.
      * The String formats are described by {@link ISODateTimeFormat#localDateOptionalTimeParser()}.
+     * The default String converter ignores the zone and only parses the field values.
      *
      * @param instant  the datetime object
      * @param zone  the time zone
@@ -297,6 +299,7 @@ public LocalDateTime(Object instant, DateTimeZone zone) {
      * {@link org.joda.time.convert.ConverterManager ConverterManager} and
      * include ReadablePartial, ReadableInstant, String, Calendar and Date.
      * The String formats are described by {@link ISODateTimeFormat#localDateOptionalTimeParser()}.
+     * The default String converter ignores the zone and only parses the field values.
      *
      * @param instant  the datetime object
      * @param chronology  the chronology
diff --git a/JodaTime/src/java/org/joda/time/LocalTime.java b/JodaTime/src/java/org/joda/time/LocalTime.java
index 7b1622aee..ceace8b3d 100644
--- a/JodaTime/src/java/org/joda/time/LocalTime.java
+++ b/JodaTime/src/java/org/joda/time/LocalTime.java
@@ -287,6 +287,7 @@ public LocalTime(long instant, Chronology chronology) {
      * {@link org.joda.time.convert.ConverterManager ConverterManager} and
      * include ReadablePartial, ReadableInstant, String, Calendar and Date.
      * The String formats are described by {@link ISODateTimeFormat#localTimeParser()}.
+     * The default String converter ignores the zone and only parses the field values.
      *
      * @param instant  the datetime object
      * @throws IllegalArgumentException if the instant is invalid
@@ -307,6 +308,7 @@ public LocalTime(Object instant) {
      * {@link org.joda.time.convert.ConverterManager ConverterManager} and
      * include ReadablePartial, ReadableInstant, String, Calendar and Date.
      * The String formats are described by {@link ISODateTimeFormat#localTimeParser()}.
+     * The default String converter ignores the zone and only parses the field values.
      *
      * @param instant  the datetime object
      * @param zone  the time zone
@@ -332,6 +334,7 @@ public LocalTime(Object instant, DateTimeZone zone) {
      * {@link org.joda.time.convert.ConverterManager ConverterManager} and
      * include ReadablePartial, ReadableInstant, String, Calendar and Date.
      * The String formats are described by {@link ISODateTimeFormat#localTimeParser()}.
+     * The default String converter ignores the zone and only parses the field values.
      *
      * @param instant  the datetime object
      * @param chronology  the chronology
diff --git a/JodaTime/src/java/org/joda/time/convert/StringConverter.java b/JodaTime/src/java/org/joda/time/convert/StringConverter.java
index 653731fe9..0378caf01 100644
--- a/JodaTime/src/java/org/joda/time/convert/StringConverter.java
+++ b/JodaTime/src/java/org/joda/time/convert/StringConverter.java
@@ -67,19 +67,23 @@ public long getInstantMillis(Object object, Chronology chrono) {
 
     /**
      * Extracts the values of the partial from an object of this converter's type.
-     * The chrono parameter is a hint to the converter, should it require a
-     * chronology to aid in conversion.
+     * This method checks if the parser has a zone, and uses it if present.
+     * This is most useful for parsing local times with UTC.
      * 
      * @param fieldSource  a partial that provides access to the fields.
      *  This partial may be incomplete and only getFieldType(int) should be used
      * @param object  the object to convert
      * @param chrono  the chronology to use, which is the non-null result of getChronology()
+     * @param parser the parser to use, may be null
      * @return the array of field values that match the fieldSource, must be non-null valid
      * @throws ClassCastException if the object is invalid
      * @throws IllegalArgumentException if the value if invalid
      * @since 1.3
      */
     public int[] getPartialValues(ReadablePartial fieldSource, Object object, Chronology chrono, DateTimeFormatter parser) {
+        if (parser.getZone() != null) {
+            chrono = chrono.withZone(parser.getZone());
+        }
         long millis = parser.withChronology(chrono).parseMillis((String) object);
         return chrono.get(fieldSource, millis);
     }
diff --git a/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java b/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java
index 281bc9618..fe52898d3 100644
--- a/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java
+++ b/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java
@@ -18,6 +18,7 @@
 import java.util.Collection;
 
 import org.joda.time.DateTimeFieldType;
+import org.joda.time.DateTimeZone;
 
 /**
  * Factory that creates instances of DateTimeFormatter for the ISO8601 standard.
@@ -128,6 +129,7 @@
         dpe, // date parser element
         tpe, // time parser element
         dp,  // date parser
+        ldp, // local date parser
         tp,  // time parser
         ltp, // local time parser
         dtp, // date time parser
@@ -558,6 +560,8 @@ public static DateTimeFormatter dateParser() {
 
     /**
      * Returns a generic ISO date parser for parsing local dates.
+     * This parser is initialised with the local (UTC) time zone.
+     * <p>
      * It accepts formats described by the following syntax:
      * <pre>
      * date-element      = std-date-element | ord-date-element | week-date-element
@@ -568,7 +572,10 @@ public static DateTimeFormatter dateParser() {
      * @since 1.3
      */
     public static DateTimeFormatter localDateParser() {
-        return dateElementParser();
+        if (ldp == null) {
+            ldp = dateElementParser().withZone(DateTimeZone.UTC);
+        }
+        return ldp;
     }
 
     /**
@@ -633,6 +640,8 @@ public static DateTimeFormatter timeParser() {
 
     /**
      * Returns a generic ISO time parser for parsing local times.
+     * This parser is initialised with the local (UTC) time zone.
+     * <p>
      * It accepts formats described by the following syntax:
      * <pre>
      * time           = ['T'] time-element
@@ -648,7 +657,7 @@ public static DateTimeFormatter localTimeParser() {
             ltp = new DateTimeFormatterBuilder()
                 .appendOptional(literalTElement().getParser())
                 .append(timeElementParser())
-                .toFormatter();
+                .toFormatter().withZone(DateTimeZone.UTC);
         }
         return ltp;
     }
@@ -785,6 +794,8 @@ public static DateTimeFormatter dateOptionalTimeParser() {
     /**
      * Returns a generic ISO datetime parser where the date is mandatory and
      * the time is optional. This parser only parses local datetimes.
+     * This parser is initialised with the local (UTC) time zone.
+     * <p>
      * It accepts formats described by the following syntax:
      * <pre>
      * datetime          = date-element ['T' time-element]
@@ -808,7 +819,7 @@ public static DateTimeFormatter localDateOptionalTimeParser() {
             ldotp = new DateTimeFormatterBuilder()
                 .append(dateElementParser())
                 .appendOptional(time)
-                .toFormatter();
+                .toFormatter().withZone(DateTimeZone.UTC);
         }
         return ldotp;
     }
diff --git a/JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java b/JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java
index 5d0ea3511..a7263c552 100644
--- a/JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java
+++ b/JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java
@@ -39,6 +39,7 @@
     private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();
     private static final Chronology GREGORIAN_UTC = GregorianChronology.getInstanceUTC();
     private static final Chronology GREGORIAN_PARIS = GregorianChronology.getInstance(PARIS);
+    private static final Chronology GREGORIAN_MOSCOW = GregorianChronology.getInstance(MOSCOW);
     private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();
     private static final int OFFSET_PARIS = PARIS.getOffset(0L) / DateTimeConstants.MILLIS_PER_HOUR;
     private static final int OFFSET_MOSCOW = MOSCOW.getOffset(0L) / DateTimeConstants.MILLIS_PER_HOUR;
@@ -446,6 +447,34 @@ public void testConstructor_Object_DateTimeZone() throws Throwable {
         assertEquals(0, test.getMillisOfSecond());
     }
 
+    public void testConstructor_Object_DateTimeZoneMoscow() throws Throwable {
+        LocalDateTime test = new LocalDateTime("1970-04-06T12:24:00", MOSCOW);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1970, test.getYear());
+        assertEquals(4, test.getMonthOfYear());
+        assertEquals(6, test.getDayOfMonth());
+        assertEquals(12, test.getHourOfDay());
+        assertEquals(24, test.getMinuteOfHour());
+        assertEquals(0, test.getSecondOfMinute());
+        assertEquals(0, test.getMillisOfSecond());
+    }
+
+    public void testConstructor_Object_DateTimeZoneMoscowBadDateTime() throws Throwable {
+        // 1981-03-31T23:59:59.999+03:00 followed by 1981-04-01T01:00:00.000+04:00
+        // 1981-09-30T23:59:59.999+04:00 followed by 1981-09-30T23:00:00.000+03:00
+        
+        // when a DST non-existing time is passed in, it should still work (ie. zone ignored)
+        LocalDateTime test = new LocalDateTime("1981-04-01T00:30:00", MOSCOW);  // doesnt exist
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1981, test.getYear());
+        assertEquals(4, test.getMonthOfYear());
+        assertEquals(1, test.getDayOfMonth());
+        assertEquals(0, test.getHourOfDay());
+        assertEquals(30, test.getMinuteOfHour());
+        assertEquals(0, test.getSecondOfMinute());
+        assertEquals(0, test.getMillisOfSecond());
+    }
+
     public void testConstructor_nullObject_DateTimeZone() throws Throwable {
         LocalDateTime test = new LocalDateTime((Object) null, PARIS);
         assertEquals(ISO_UTC, test.getChronology());
@@ -497,6 +526,34 @@ public void testConstructor_Object_Chronology() throws Throwable {
         assertEquals(0, test.getMillisOfSecond());
     }
 
+    public void testConstructor_Object_ChronologyMoscow() throws Throwable {
+        LocalDateTime test = new LocalDateTime("1970-04-06T12:24:00", GREGORIAN_MOSCOW);
+        assertEquals(GREGORIAN_UTC, test.getChronology());
+        assertEquals(1970, test.getYear());
+        assertEquals(4, test.getMonthOfYear());
+        assertEquals(6, test.getDayOfMonth());
+        assertEquals(12, test.getHourOfDay());
+        assertEquals(24, test.getMinuteOfHour());
+        assertEquals(0, test.getSecondOfMinute());
+        assertEquals(0, test.getMillisOfSecond());
+    }
+
+    public void testConstructor_Object_ChronologyMoscowBadDateTime() throws Throwable {
+        // 1981-03-31T23:59:59.999+03:00 followed by 1981-04-01T01:00:00.000+04:00
+        // 1981-09-30T23:59:59.999+04:00 followed by 1981-09-30T23:00:00.000+03:00
+        
+        // when a DST non-existing time is passed in, it should still work (ie. zone ignored)
+        LocalDateTime test = new LocalDateTime("1981-04-01T00:30:00", GREGORIAN_MOSCOW);  // doesnt exist
+        assertEquals(GREGORIAN_UTC, test.getChronology());
+        assertEquals(1981, test.getYear());
+        assertEquals(4, test.getMonthOfYear());
+        assertEquals(1, test.getDayOfMonth());
+        assertEquals(0, test.getHourOfDay());
+        assertEquals(30, test.getMinuteOfHour());
+        assertEquals(0, test.getSecondOfMinute());
+        assertEquals(0, test.getMillisOfSecond());
+    }
+
     public void testConstructor_nullObject_Chronology() throws Throwable {
         LocalDateTime test = new LocalDateTime((Object) null, GREGORIAN_PARIS);
         assertEquals(GREGORIAN_UTC, test.getChronology());
diff --git a/JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java b/JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java
index 045151714..8423463fc 100644
--- a/JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java
+++ b/JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java
@@ -36,6 +36,8 @@
 
     private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
     private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
+    private static final DateTimeZone TOKYO = DateTimeZone.forID("Asia/Tokyo");
+    private static final DateTimeZone NEW_YORK = DateTimeZone.forID("America/New_York");
     private static final ISOChronology ISO_UTC = ISOChronology.getInstanceUTC();
     private static final JulianChronology JULIAN_LONDON = JulianChronology.getInstance(LONDON);
     private static final JulianChronology JULIAN_PARIS = JulianChronology.getInstance(PARIS);
@@ -326,6 +328,26 @@ public void testConstructor_ObjectString1() throws Throwable {
         assertEquals(40, test.getMillisOfSecond());
     }
 
+    public void testConstructor_ObjectString1Tokyo() throws Throwable {
+        DateTimeZone.setDefault(TOKYO);
+        LocalTime test = new LocalTime("10:20:30.040");
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(10, test.getHourOfDay());
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(30, test.getSecondOfMinute());
+        assertEquals(40, test.getMillisOfSecond());
+    }
+
+    public void testConstructor_ObjectString1NewYork() throws Throwable {
+        DateTimeZone.setDefault(NEW_YORK);
+        LocalTime test = new LocalTime("10:20:30.040");
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(10, test.getHourOfDay());
+        assertEquals(20, test.getMinuteOfHour());
+        assertEquals(30, test.getSecondOfMinute());
+        assertEquals(40, test.getMillisOfSecond());
+    }
+
     public void testConstructor_ObjectString2() throws Throwable {
         LocalTime test = new LocalTime("T10:20:30.040");
         assertEquals(ISO_UTC, test.getChronology());
@@ -444,17 +466,24 @@ public void testConstructor_Object1_DateTimeZone() throws Throwable {
         assertEquals(4, test.getMillisOfSecond());
     }
 
-    public void testConstructor_Object2_DateTimeZone() throws Throwable {
-        LocalTime test = new LocalTime("T10:20");
-        assertEquals(10, test.getHourOfDay());
+    public void testConstructor_ObjectString_DateTimeZoneLondon() throws Throwable {
+        LocalTime test = new LocalTime("04:20", LONDON);
+        assertEquals(4, test.getHourOfDay());
+        assertEquals(20, test.getMinuteOfHour());
+    }
+
+    public void testConstructor_ObjectString_DateTimeZoneTokyo() throws Throwable {
+        LocalTime test = new LocalTime("04:20", TOKYO);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(4, test.getHourOfDay());
+        assertEquals(20, test.getMinuteOfHour());
+    }
+
+    public void testConstructor_ObjectString_DateTimeZoneNewYork() throws Throwable {
+        LocalTime test = new LocalTime("04:20", NEW_YORK);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(4, test.getHourOfDay());
         assertEquals(20, test.getMinuteOfHour());
-        assertEquals(0, test.getSecondOfMinute());
-        assertEquals(0, test.getMillisOfSecond());
-        
-        try {
-            new LocalTime("T1020");
-            fail();
-        } catch (IllegalArgumentException ex) {}
     }
 
     public void testConstructor_nullObject_DateTimeZone() throws Throwable {
diff --git a/JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java b/JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java
index a222ce125..cc44695af 100644
--- a/JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java
+++ b/JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java
@@ -21,12 +21,7 @@
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
 
-import org.joda.time.DateTime;
-import org.joda.time.DateTimeConstants;
-import org.joda.time.DateTimeUtils;
 import org.joda.time.DateTimeZone;
-import org.joda.time.Period;
-import org.joda.time.PeriodType;
 
 /**
  * This class is a Junit unit test for ISODateTimeFormat parsing.
@@ -100,6 +95,7 @@ public void test_dateParser() {
     //-----------------------------------------------------------------------
     public void test_localDateParser() {
         DateTimeFormatter parser = ISODateTimeFormat.localDateParser();
+        assertEquals(DateTimeZone.UTC, parser.getZone());
         assertParse(parser, true, "2006-06-09");
         assertParse(parser, true, "2006-W27-3");
         assertParse(parser, true, "2006-123");
@@ -184,6 +180,7 @@ public void test_timeParser() {
     //-----------------------------------------------------------------------
     public void test_localTimeParser() {
         DateTimeFormatter parser = ISODateTimeFormat.localTimeParser();
+        assertEquals(DateTimeZone.UTC, parser.getZone());
         assertParse(parser, false, "2006-06-09");
         assertParse(parser, false, "2006-W27-3");
         assertParse(parser, false, "2006-123");
@@ -207,6 +204,9 @@ public void test_localTimeParser() {
         assertParse(parser, true, "10.5");
         assertParse(parser, false, "10:20:30.040+02:00");
         assertParse(parser, false, "10.5+02:00");
+        
+        assertParse(parser, true, "00:00:10.512345678");
+        assertEquals(10512, parser.parseMillis("00:00:10.512345678"));
     }
 
     //-----------------------------------------------------------------------
@@ -235,6 +235,10 @@ public void test_timeElementParser() {
         assertParse(parser, true, "10.5");
         assertParse(parser, false, "10:20:30.040+02:00");
         assertParse(parser, false, "10.5+02:00");
+        
+        assertParse(parser, true, "00:00:10.512345678");
+        // result is offset by London DST in 1970-01-01
+        assertEquals(10512, parser.parseMillis("00:00:10.512345678") + DateTimeZone.getDefault().getOffset(0L));
     }
 
     //-----------------------------------------------------------------------
@@ -296,6 +300,7 @@ public void test_dateOptionalTimeParser() {
     //-----------------------------------------------------------------------
     public void test_localDateOptionalTimeParser() {
         DateTimeFormatter parser = ISODateTimeFormat.localDateOptionalTimeParser();
+        assertEquals(DateTimeZone.UTC, parser.getZone());
         assertParse(parser, true, "2006-06-09");
         assertParse(parser, true, "2006-W27-3");
         assertParse(parser, true, "2006-123");

From e7ae8f54c2513791cfcfa398c00deef5a2c0044f Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 29 Jul 2006 11:00:36 +0000
Subject: [PATCH 108/115] Remove unused method

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1105 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java | 1 -
 1 file changed, 1 deletion(-)

diff --git a/JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java b/JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java
index 031ef3318..e67ca93e0 100644
--- a/JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java
+++ b/JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java
@@ -260,7 +260,6 @@ static boolean test(String id, DateTimeZone tz) {
         long end = ISOChronology.getInstanceUTC().year().set(0, 2050);
 
         int offset = tz.getOffset(millis);
-        int standardOffset = tz.getStandardOffset(millis);
         String key = tz.getNameKey(millis);
 
         List transitions = new ArrayList();

From 7ea50f9e706b07816dd7dbbae4c3fa6145ed631e Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 31 Jul 2006 21:40:34 +0000
Subject: [PATCH 109/115] Explain immutable better with new examples

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1106 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/quickstart.xml | 20 ++++++++++++--------
 1 file changed, 12 insertions(+), 8 deletions(-)

diff --git a/JodaTime/xdocs/quickstart.xml b/JodaTime/xdocs/quickstart.xml
index e00890c76..50aa846db 100644
--- a/JodaTime/xdocs/quickstart.xml
+++ b/JodaTime/xdocs/quickstart.xml
@@ -56,6 +56,17 @@ the month you can use:
 </source>
 </p>
 
+<p>
+All the main datetime classes are immutable (like String) and cannot be changed
+after creation. However, simple methods have been provided to alter field values
+in a newly created object. For example, to set the year, or add 2 hours you can use:
+<source>
+  DateTime dt = new DateTime();
+  DateTime year2000 = dt.withYear(2000);
+  DateTime twoHoursLater = dt.plusHours(2);
+</source>
+</p>
+
 <p>
 In addition to the basic get methods, each datetime class provides property
 methods for each field. These provide access to the full wealth of Joda-Time
@@ -65,15 +76,8 @@ functionality. For example, to access details about a month or year:
   String monthName = dt.monthOfYear().getAsText();
   String frenchShortName = dt.monthOfYear().getAsShortText(Locale.FRENCH);
   boolean isLeapYear = dt.year().isLeap();
+  DateTime rounded = dt.dayOfMonth().roundFloorCopy();
 </source>
-These property fields also allow you to get an updated copy with a field set,
-added to or rounded.
-<source>
-  DateTime dt = new DateTime();
-  DateTime tenthOfMonth = dt.monthOfYear().setCopy(10);
-  DateTime twoDaysLater = dt.monthOfYear().addToCopy(2);
-</source>
-In these examples, the original datetime is unaltered, because it is immutable.
 </p>
 </subsection>
 

From 4d88c71fcef02e93a2507d3a73e3acb703d886bc Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 31 Jul 2006 21:42:10 +0000
Subject: [PATCH 110/115] Try to get jdiff plugin to work

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1107 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/project.properties | 6 +++++-
 1 file changed, 5 insertions(+), 1 deletion(-)

diff --git a/JodaTime/project.properties b/JodaTime/project.properties
index 10dd48422..54b0b9b04 100644
--- a/JodaTime/project.properties
+++ b/JodaTime/project.properties
@@ -5,6 +5,9 @@ maven.xdoc.date.format = yyyy-MM-dd
 maven.xdoc.legend = false;
 maven.xdoc.theme.url = ./style/joda-theme.css
 
+maven.scm.svn.tag.base=https://svn.sourceforge.net/svnroot/joda-time/tags
+maven.changelog.factory=org.apache.maven.svnlib.SvnChangeLogFactory
+
 maven.checkstyle.properties=checkstyle.xml
 maven.junit.fork=true
 maven.xdoc.poweredby.image=maven-feather.png
@@ -14,4 +17,5 @@ maven.javadoc.public=true
 maven.javadoc.package=false
 maven.javadoc.private=false
 
-maven.jdiff.old.tag=v1_1_000
+maven.jdiff.old.tag=v1_2_000
+maven.jdiff.new.tag=CURRENT

From dff90a4d14bac41ccd854a5f3063380b4a12b874 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 31 Jul 2006 21:43:08 +0000
Subject: [PATCH 111/115] Fix svn setup

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1108 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/project.xml | 14 +++++++++++---
 1 file changed, 11 insertions(+), 3 deletions(-)

diff --git a/JodaTime/project.xml b/JodaTime/project.xml
index 9607c09cf..c1dc13262 100644
--- a/JodaTime/project.xml
+++ b/JodaTime/project.xml
@@ -40,9 +40,7 @@
   <distributionDirectory>home/groups/j/jo/joda-time/htdocs/repository</distributionDirectory>
   
   <repository>
-    <!-- Does not appear to be supported in Maven-1.x
-    <connection>scm:svn:http://svn.sourceforge.net/viewcvs.cgi/joda-time/trunk</connection>
-    -->
+    <connection>scm:svn:https://svn.sourceforge.net/svnroot/joda-time/trunk/JodaTime/</connection>
     <url>http://svn.sourceforge.net/viewcvs.cgi/joda-time/trunk/JodaTime/</url>
   </repository>
 
@@ -80,6 +78,16 @@
       <name>1.1</name>
       <tag>v1_1_000</tag>
     </version>
+    <version>
+      <id>1.2</id>
+      <name>1.2</name>
+      <tag>v1_2_000</tag>
+    </version>
+    <version>
+      <id>1.2.1</id>
+      <name>1.2.1</name>
+      <tag>v1_2_100</tag>
+    </version>
   </versions>
   
   <mailingLists>

From 0507d7e4341cb252e0a170cfdba80abeaac30d50 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 31 Jul 2006 21:43:54 +0000
Subject: [PATCH 112/115] Enhance release notes

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1109 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt | 19 +++++++++++++------
 1 file changed, 13 insertions(+), 6 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 3cc70670c..ac4c62f6e 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -32,12 +32,14 @@ Enhancements since 1.2
   as possible to aid migration, so this should be a search and replace change.
 
 - DateTime/DateMidnight/YearMonthDay/TimeOfDay
-  Add toLocalXxx() methods that allow conversion to the new classes, for example:
+  - toLocalXxx()
+  Added methods that allow conversion to the new classes, for example:
   LocalDate date = today.toLocalDate();
 
 - DateTime/DateMidnight/YearMonthDay/TimeOfDay
-  Add withXxx() methods that allow an individul field to be changed, for example:
-  firstOfMonth = today.withDayOfMonth(1);
+  - withXxx()
+  Added methods that allow an individul field to be changed, for example:
+  DateTime firstOfMonth = today.withDayOfMonth(1);
   These methods are the immutable equivalent of set methods.
   These are convenince methods for the methods on the property API.
 
@@ -46,9 +48,14 @@ Enhancements since 1.2
   transition, thrown exception includes text of datetime being parsed.
 
 - DateTimeFormat
+  - patternForStyle()
   Added method to retrieve the format pattern for a given style and locale.
 
 - ISODateTimeFormat
+  - localDateParser()
+  - localTimeParser()
+  - localDateOptionalTimeParser()
+  - dateOptionalTimeParser()
   New formats for parsing a datetime/date/time without a time zone, and for
   parsing a date (mandatory) with an optional time
 
@@ -57,9 +64,9 @@ Compatibility with 1.2
 ----------------------
 Binary compatible - Yes, except
   - PartialConverter interface has had two new methods added.
-    This is mainly intended as an internal interface and thus it is unlikely
-    that you have implementations that will break. If you did create your own
-    implementation and extended AbstractConverter then your code will not break.
+    This is an internal interface and thus it is unlikely that you have
+    implementations that will break. If you did create your own implementation
+    and extended AbstractConverter then your code will not break.
 
 Source compatible - Yes, except
   - PartialConverter interface, see above

From ce6991c2cfb3b666b53c5ad8b5b1f18d0eca9b21 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 31 Jul 2006 22:10:09 +0000
Subject: [PATCH 113/115] Add missing since tags for 1.3

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1110 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/java/org/joda/time/DateMidnight.java  | 12 ++++++++++++
 JodaTime/src/java/org/joda/time/DateTime.java | 19 +++++++++++++++++++
 .../joda/time/IllegalFieldValueException.java |  8 ++++----
 .../src/java/org/joda/time/TimeOfDay.java     |  1 +
 .../src/java/org/joda/time/YearMonthDay.java  |  1 +
 .../field/AbstractPartialFieldProperty.java   |  3 ++-
 .../time/format/DateTimeParserBucket.java     |  3 ++-
 7 files changed, 41 insertions(+), 6 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/DateMidnight.java b/JodaTime/src/java/org/joda/time/DateMidnight.java
index 4d03b6410..16a107683 100644
--- a/JodaTime/src/java/org/joda/time/DateMidnight.java
+++ b/JodaTime/src/java/org/joda/time/DateMidnight.java
@@ -792,6 +792,7 @@ public YearMonthDay toYearMonthDay() {
      * same date and chronology.
      *
      * @return a LocalDate with the same date and chronology
+     * @since 1.3
      */
     public LocalDate toLocalDate() {
         return new LocalDate(getMillis(), getChronology());
@@ -824,6 +825,7 @@ public Interval toInterval() {
      * @param era  the era to set
      * @return a copy of this object with the field set
      * @throws IllegalArgumentException if the value is invalid
+     * @since 1.3
      */
     public DateMidnight withEra(int era) {
         return withMillis(getChronology().era().set(getMillis(), era));
@@ -839,6 +841,7 @@ public DateMidnight withEra(int era) {
      * @param centuryOfEra  the centurey of era to set
      * @return a copy of this object with the field set
      * @throws IllegalArgumentException if the value is invalid
+     * @since 1.3
      */
     public DateMidnight withCenturyOfEra(int centuryOfEra) {
         return withMillis(getChronology().centuryOfEra().set(getMillis(), centuryOfEra));
@@ -854,6 +857,7 @@ public DateMidnight withCenturyOfEra(int centuryOfEra) {
      * @param yearOfEra  the year of era to set
      * @return a copy of this object with the field set
      * @throws IllegalArgumentException if the value is invalid
+     * @since 1.3
      */
     public DateMidnight withYearOfEra(int yearOfEra) {
         return withMillis(getChronology().yearOfEra().set(getMillis(), yearOfEra));
@@ -869,6 +873,7 @@ public DateMidnight withYearOfEra(int yearOfEra) {
      * @param yearOfCentury  the year of century to set
      * @return a copy of this object with the field set
      * @throws IllegalArgumentException if the value is invalid
+     * @since 1.3
      */
     public DateMidnight withYearOfCentury(int yearOfCentury) {
         return withMillis(getChronology().yearOfCentury().set(getMillis(), yearOfCentury));
@@ -884,6 +889,7 @@ public DateMidnight withYearOfCentury(int yearOfCentury) {
      * @param year  the year to set
      * @return a copy of this object with the field set
      * @throws IllegalArgumentException if the value is invalid
+     * @since 1.3
      */
     public DateMidnight withYear(int year) {
         return withMillis(getChronology().year().set(getMillis(), year));
@@ -899,6 +905,7 @@ public DateMidnight withYear(int year) {
      * @param weekyear  the weekyear to set
      * @return a copy of this object with the field set
      * @throws IllegalArgumentException if the value is invalid
+     * @since 1.3
      */
     public DateMidnight withWeekyear(int weekyear) {
         return withMillis(getChronology().weekyear().set(getMillis(), weekyear));
@@ -914,6 +921,7 @@ public DateMidnight withWeekyear(int weekyear) {
      * @param monthOfYear  the month of year to set
      * @return a copy of this object with the field set
      * @throws IllegalArgumentException if the value is invalid
+     * @since 1.3
      */
     public DateMidnight withMonthOfYear(int monthOfYear) {
         return withMillis(getChronology().monthOfYear().set(getMillis(), monthOfYear));
@@ -929,6 +937,7 @@ public DateMidnight withMonthOfYear(int monthOfYear) {
      * @param weekOfWeekyear  the week of weekyear to set
      * @return a copy of this object with the field set
      * @throws IllegalArgumentException if the value is invalid
+     * @since 1.3
      */
     public DateMidnight withWeekOfWeekyear(int weekOfWeekyear) {
         return withMillis(getChronology().weekOfWeekyear().set(getMillis(), weekOfWeekyear));
@@ -944,6 +953,7 @@ public DateMidnight withWeekOfWeekyear(int weekOfWeekyear) {
      * @param dayOfYear  the day of year to set
      * @return a copy of this object with the field set
      * @throws IllegalArgumentException if the value is invalid
+     * @since 1.3
      */
     public DateMidnight withDayOfYear(int dayOfYear) {
         return withMillis(getChronology().dayOfYear().set(getMillis(), dayOfYear));
@@ -959,6 +969,7 @@ public DateMidnight withDayOfYear(int dayOfYear) {
      * @param dayOfMonth  the day of month to set
      * @return a copy of this object with the field set
      * @throws IllegalArgumentException if the value is invalid
+     * @since 1.3
      */
     public DateMidnight withDayOfMonth(int dayOfMonth) {
         return withMillis(getChronology().dayOfMonth().set(getMillis(), dayOfMonth));
@@ -974,6 +985,7 @@ public DateMidnight withDayOfMonth(int dayOfMonth) {
      * @param dayOfWeek  the day of week to set
      * @return a copy of this object with the field set
      * @throws IllegalArgumentException if the value is invalid
+     * @since 1.3
      */
     public DateMidnight withDayOfWeek(int dayOfWeek) {
         return withMillis(getChronology().dayOfWeek().set(getMillis(), dayOfWeek));
diff --git a/JodaTime/src/java/org/joda/time/DateTime.java b/JodaTime/src/java/org/joda/time/DateTime.java
index a2fadef98..14c892ffd 100644
--- a/JodaTime/src/java/org/joda/time/DateTime.java
+++ b/JodaTime/src/java/org/joda/time/DateTime.java
@@ -1134,6 +1134,7 @@ public TimeOfDay toTimeOfDay() {
      * the same datetime and chronology.
      *
      * @return a LocalDateTime with the same datetime and chronology
+     * @since 1.3
      */
     public LocalDateTime toLocalDateTime() {
         return new LocalDateTime(getMillis(), getChronology());
@@ -1144,6 +1145,7 @@ public LocalDateTime toLocalDateTime() {
      * same date and chronology.
      *
      * @return a LocalDate with the same date and chronology
+     * @since 1.3
      */
     public LocalDate toLocalDate() {
         return new LocalDate(getMillis(), getChronology());
@@ -1154,6 +1156,7 @@ public LocalDate toLocalDate() {
      * same time and chronology.
      *
      * @return a LocalTime with the same time and chronology
+     * @since 1.3
      */
     public LocalTime toLocalTime() {
         return new LocalTime(getMillis(), getChronology());
@@ -1170,6 +1173,7 @@ public LocalTime toLocalTime() {
      * @param era  the era to set
      * @return a copy of this object with the field set
      * @throws IllegalArgumentException if the value is invalid
+     * @since 1.3
      */
     public DateTime withEra(int era) {
         return withMillis(getChronology().era().set(getMillis(), era));
@@ -1185,6 +1189,7 @@ public DateTime withEra(int era) {
      * @param centuryOfEra  the centurey of era to set
      * @return a copy of this object with the field set
      * @throws IllegalArgumentException if the value is invalid
+     * @since 1.3
      */
     public DateTime withCenturyOfEra(int centuryOfEra) {
         return withMillis(getChronology().centuryOfEra().set(getMillis(), centuryOfEra));
@@ -1200,6 +1205,7 @@ public DateTime withCenturyOfEra(int centuryOfEra) {
      * @param yearOfEra  the year of era to set
      * @return a copy of this object with the field set
      * @throws IllegalArgumentException if the value is invalid
+     * @since 1.3
      */
     public DateTime withYearOfEra(int yearOfEra) {
         return withMillis(getChronology().yearOfEra().set(getMillis(), yearOfEra));
@@ -1215,6 +1221,7 @@ public DateTime withYearOfEra(int yearOfEra) {
      * @param yearOfCentury  the year of century to set
      * @return a copy of this object with the field set
      * @throws IllegalArgumentException if the value is invalid
+     * @since 1.3
      */
     public DateTime withYearOfCentury(int yearOfCentury) {
         return withMillis(getChronology().yearOfCentury().set(getMillis(), yearOfCentury));
@@ -1230,6 +1237,7 @@ public DateTime withYearOfCentury(int yearOfCentury) {
      * @param year  the year to set
      * @return a copy of this object with the field set
      * @throws IllegalArgumentException if the value is invalid
+     * @since 1.3
      */
     public DateTime withYear(int year) {
         return withMillis(getChronology().year().set(getMillis(), year));
@@ -1245,6 +1253,7 @@ public DateTime withYear(int year) {
      * @param weekyear  the weekyear to set
      * @return a copy of this object with the field set
      * @throws IllegalArgumentException if the value is invalid
+     * @since 1.3
      */
     public DateTime withWeekyear(int weekyear) {
         return withMillis(getChronology().weekyear().set(getMillis(), weekyear));
@@ -1260,6 +1269,7 @@ public DateTime withWeekyear(int weekyear) {
      * @param monthOfYear  the month of year to set
      * @return a copy of this object with the field set
      * @throws IllegalArgumentException if the value is invalid
+     * @since 1.3
      */
     public DateTime withMonthOfYear(int monthOfYear) {
         return withMillis(getChronology().monthOfYear().set(getMillis(), monthOfYear));
@@ -1275,6 +1285,7 @@ public DateTime withMonthOfYear(int monthOfYear) {
      * @param weekOfWeekyear  the week of weekyear to set
      * @return a copy of this object with the field set
      * @throws IllegalArgumentException if the value is invalid
+     * @since 1.3
      */
     public DateTime withWeekOfWeekyear(int weekOfWeekyear) {
         return withMillis(getChronology().weekOfWeekyear().set(getMillis(), weekOfWeekyear));
@@ -1290,6 +1301,7 @@ public DateTime withWeekOfWeekyear(int weekOfWeekyear) {
      * @param dayOfYear  the day of year to set
      * @return a copy of this object with the field set
      * @throws IllegalArgumentException if the value is invalid
+     * @since 1.3
      */
     public DateTime withDayOfYear(int dayOfYear) {
         return withMillis(getChronology().dayOfYear().set(getMillis(), dayOfYear));
@@ -1305,6 +1317,7 @@ public DateTime withDayOfYear(int dayOfYear) {
      * @param dayOfMonth  the day of month to set
      * @return a copy of this object with the field set
      * @throws IllegalArgumentException if the value is invalid
+     * @since 1.3
      */
     public DateTime withDayOfMonth(int dayOfMonth) {
         return withMillis(getChronology().dayOfMonth().set(getMillis(), dayOfMonth));
@@ -1320,6 +1333,7 @@ public DateTime withDayOfMonth(int dayOfMonth) {
      * @param dayOfWeek  the day of week to set
      * @return a copy of this object with the field set
      * @throws IllegalArgumentException if the value is invalid
+     * @since 1.3
      */
     public DateTime withDayOfWeek(int dayOfWeek) {
         return withMillis(getChronology().dayOfWeek().set(getMillis(), dayOfWeek));
@@ -1336,6 +1350,7 @@ public DateTime withDayOfWeek(int dayOfWeek) {
      * @param hour  the hour of day to set
      * @return a copy of this object with the field set
      * @throws IllegalArgumentException if the value is invalid
+     * @since 1.3
      */
     public DateTime withHourOfDay(int hour) {
         return withMillis(getChronology().hourOfDay().set(getMillis(), hour));
@@ -1351,6 +1366,7 @@ public DateTime withHourOfDay(int hour) {
      * @param minute  the minute of hour to set
      * @return a copy of this object with the field set
      * @throws IllegalArgumentException if the value is invalid
+     * @since 1.3
      */
     public DateTime withMinuteOfHour(int minute) {
         return withMillis(getChronology().minuteOfHour().set(getMillis(), minute));
@@ -1366,6 +1382,7 @@ public DateTime withMinuteOfHour(int minute) {
      * @param second  the second of minute to set
      * @return a copy of this object with the field set
      * @throws IllegalArgumentException if the value is invalid
+     * @since 1.3
      */
     public DateTime withSecondOfMinute(int second) {
         return withMillis(getChronology().secondOfMinute().set(getMillis(), second));
@@ -1381,6 +1398,7 @@ public DateTime withSecondOfMinute(int second) {
      * @param millis  the millis of second to set
      * @return a copy of this object with the field set
      * @throws IllegalArgumentException if the value is invalid
+     * @since 1.3
      */
     public DateTime withMillisOfSecond(int millis) {
         return withMillis(getChronology().millisOfSecond().set(getMillis(), millis));
@@ -1396,6 +1414,7 @@ public DateTime withMillisOfSecond(int millis) {
      * @param millis  the millis of day to set
      * @return a copy of this object with the field set
      * @throws IllegalArgumentException if the value is invalid
+     * @since 1.3
      */
     public DateTime withMillisOfDay(int millis) {
         return withMillis(getChronology().millisOfDay().set(getMillis(), millis));
diff --git a/JodaTime/src/java/org/joda/time/IllegalFieldValueException.java b/JodaTime/src/java/org/joda/time/IllegalFieldValueException.java
index 1423ff90d..1cf71f066 100644
--- a/JodaTime/src/java/org/joda/time/IllegalFieldValueException.java
+++ b/JodaTime/src/java/org/joda/time/IllegalFieldValueException.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2006 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -290,9 +290,9 @@ public String getMessage() {
     }
 
     /**
-     * Provide additional detail by prepending a message to the existing
-     * message. A colon is separator is automatically inserted between the
-     * messages.
+     * Provide additional detail by prepending a message to the existing message.
+     * A colon is separator is automatically inserted between the messages.
+     * @since 1.3
      */
     public void prependMessage(String message) {
         if (iMessage == null) {
diff --git a/JodaTime/src/java/org/joda/time/TimeOfDay.java b/JodaTime/src/java/org/joda/time/TimeOfDay.java
index e96068fd7..36785bcca 100644
--- a/JodaTime/src/java/org/joda/time/TimeOfDay.java
+++ b/JodaTime/src/java/org/joda/time/TimeOfDay.java
@@ -812,6 +812,7 @@ public Property property(DateTimeFieldType type) {
      * Converts this object to a LocalTime with the same time and chronology.
      *
      * @return a LocalTime with the same time and chronology
+     * @since 1.3
      */
     public LocalTime toLocalTime() {
         return new LocalTime(getHourOfDay(), getMinuteOfHour(),
diff --git a/JodaTime/src/java/org/joda/time/YearMonthDay.java b/JodaTime/src/java/org/joda/time/YearMonthDay.java
index ec24f636e..21d6a33ec 100644
--- a/JodaTime/src/java/org/joda/time/YearMonthDay.java
+++ b/JodaTime/src/java/org/joda/time/YearMonthDay.java
@@ -655,6 +655,7 @@ public Property property(DateTimeFieldType type) {
      * Converts this object to a LocalDate with the same date and chronology.
      *
      * @return a LocalDate with the same date and chronology
+     * @since 1.3
      */
     public LocalDate toLocalDate() {
         return new LocalDate(getYear(), getMonthOfYear(), getDayOfMonth(), getChronology());
diff --git a/JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java b/JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java
index 237356425..0b1d0030c 100644
--- a/JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java
+++ b/JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2006 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -338,6 +338,7 @@ public boolean equals(Object object) {
      * Gets a suitable hashcode for the object.
      * 
      * @return the hashcode
+     * @since 1.3
      */
     public int hashCode() {
         int hash = 19;
diff --git a/JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java b/JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java
index 033e6a5cc..0a920d2b4 100644
--- a/JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java
+++ b/JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2006 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -299,6 +299,7 @@ public long computeMillis(boolean resetFields) {
      * @param text optional text being parsed, to be included in any error message
      * @return milliseconds since 1970-01-01T00:00:00Z
      * @throws IllegalArgumentException if any field is out of range
+     * @since 1.3
      */
     public long computeMillis(boolean resetFields, String text) {
         SavedField[] savedFields = iSavedFields;

From b1d9981b1ab18510c2be75d42365977854414ca9 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 2 Aug 2006 21:01:18 +0000
Subject: [PATCH 114/115] Pre 1.3 release

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1111 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/build.xml              |   2 +-
 JodaTime/project.xml            |   2 +-
 JodaTime/src/conf/MANIFEST.MF   |   2 +-
 JodaTime/xdocs/index.xml        |   6 +-
 JodaTime/xdocs/upgradeto130.xml | 131 ++++++++++++++++++++++++++++++++
 5 files changed, 137 insertions(+), 6 deletions(-)

diff --git a/JodaTime/build.xml b/JodaTime/build.xml
index c06df91c5..40ee51768 100644
--- a/JodaTime/build.xml
+++ b/JodaTime/build.xml
@@ -27,7 +27,7 @@
   <property name="component.title"         value="Joda date and time"/>
 
   <!-- The current version number of this component -->
-  <property name="component.version"       value="1.3-SNAPSHOT"/>
+  <property name="component.version"       value="1.3"/>
   <property name="previous.version"        value="1.2"/>
 
   <!-- The current version number of this component -->
diff --git a/JodaTime/project.xml b/JodaTime/project.xml
index c1dc13262..7fd987439 100644
--- a/JodaTime/project.xml
+++ b/JodaTime/project.xml
@@ -7,7 +7,7 @@
   <groupId>joda-time</groupId>
   <artifactId>joda-time</artifactId>
   <name>Joda time</name>
-  <currentVersion>1.3-SNAPSHOT</currentVersion>
+  <currentVersion>1.3</currentVersion>
   <organization>
     <name>Joda.org</name>
     <url>http://www.joda.org</url>
diff --git a/JodaTime/src/conf/MANIFEST.MF b/JodaTime/src/conf/MANIFEST.MF
index 481758153..99d9f3f3b 100644
--- a/JodaTime/src/conf/MANIFEST.MF
+++ b/JodaTime/src/conf/MANIFEST.MF
@@ -2,7 +2,7 @@ Package: org.joda.time
 Extension-Name: @name@
 Specification-Title: Joda-Time
 Specification-Vendor: Joda.org
-Specification-Version: 1.2
+Specification-Version: 1.3
 Implementation-Vendor: Joda.org
 Implementation-Title: org.joda.time
 Implementation-Version: @version@
diff --git a/JodaTime/xdocs/index.xml b/JodaTime/xdocs/index.xml
index 1fae8d5d8..954be4e25 100644
--- a/JodaTime/xdocs/index.xml
+++ b/JodaTime/xdocs/index.xml
@@ -35,7 +35,7 @@ public String getBirthMonthText(<b>LocalDate</b> dateOfBirth) {
   return dateOfBirth.monthOfYear().getAsText(Locale.ENGLISH);
 }
 </source>
-Version 1.2.1 was released on 2006-02-12 -
+Version 1.3 was released on 2006-08-02 -
 <a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=104212">Download now</a>
 </p>
 </section>
@@ -95,7 +95,7 @@ Various documentation is available:
 <li>Two user guides - <a href="quickstart.html">quick</a> and <a href="userguide.html">full</a></li>
 <li>The key concepts and chronology documents in the left navigation area</li>
 <li>The javadoc for the <a href="api-release/index.html">current release</a></li>
-<li>The javadoc for the <a href="apidocs/index.html">latest in development</a></li>
+<li>The javadoc for the <a href="apidocs/index.html">latest code in development</a></li>
 <li>A <a href="faq.html">FAQ</a> list</li>
 <li>Information on <a href="installation.html">downloading and installing</a> Joda-Time</li>
 <li>The <a href="http://svn.sourceforge.net/viewcvs.cgi/joda-time/trunk/JodaTime/">Subversion repository</a></li>
@@ -105,7 +105,7 @@ Various documentation is available:
 
 <section name="Releases">
 <p>
-<a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=104212">Release 1.2.1</a>
+<a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=104212">Release 1.3</a>
 is the current latest release.
 This release is considered stable and worthy of the 1.x tag.
 It has extensive testing suites and has been used in production.
diff --git a/JodaTime/xdocs/upgradeto130.xml b/JodaTime/xdocs/upgradeto130.xml
index 36ff8c54b..79b30843c 100644
--- a/JodaTime/xdocs/upgradeto130.xml
+++ b/JodaTime/xdocs/upgradeto130.xml
@@ -13,6 +13,137 @@
 These are the release notes and advice for upgrading Joda-Time from
 version 1.2 to version 1.3.
 <source>
+Joda-Time version 1.3
+---------------------
+
+Joda-Time is a date and time handling library that seeks to replace the JDK
+Date and Calendar classes.
+
+This is the fourth full release of Joda-Time.
+This release focuses on new features, but also include some bug fixes.
+
+We recommend JDK 1.3 or later, and have performed no testing on earlier JDKs.
+
+Joda-Time is licensed under the business-friendly Apache License Version 2.
+This is the same license as all of Apache, plus other open source projects such as Spring.
+The intent is to make the code available to the Java community with the minimum
+of restrictions. If the license causes you problems please contact the mailing list.
+
+** Please also check out the JSP and Hibernate contributed projects **
+
+
+Enhancements since 1.2
+----------------------
+- LocalDate/LocalTime/LocalDateTime
+  New classes representing date, time and datetime without a time zone.
+  LocalDate is the recommended replacement for YearMonthDay.
+  LocalTime is the recommended replacement for TimeOfDay.
+  These classes are implemented more flexibly than YearMonthDay and TimeOfDay
+  and thus solve the problem where you couldn't query or format fields such
+  as dayOfWeek on a YearMonthDay or millisOfDay on a TimeOfDay.
+  Neither YearMonthDay or TimeOfDay will be immediately deprecated as they
+  are in widespread use.
+  The API of the new classes has been kept as similar to YearMonthDay/TimeOfDay
+  as possible to aid migration, so this should be a search and replace change.
+
+- DateTime/DateMidnight/YearMonthDay/TimeOfDay
+  - toLocalXxx()
+  Added methods that allow conversion to the new classes, for example:
+  LocalDate date = today.toLocalDate();
+
+- DateTime/DateMidnight/YearMonthDay/TimeOfDay
+  - withXxx()
+  Added methods that allow an individul field to be changed, for example:
+  DateTime firstOfMonth = today.withDayOfMonth(1);
+  These methods are the immutable equivalent of set methods.
+  These are convenince methods for the methods on the property API.
+
+- DateTimeFormatter/DateTimeParserBucket
+  If a parsed datetime is illegal due to field range or time zone offset
+  transition, thrown exception includes text of datetime being parsed.
+
+- DateTimeFormat
+  - patternForStyle()
+  Added method to retrieve the format pattern for a given style and locale.
+
+- ISODateTimeFormat
+  - localDateParser()
+  - localTimeParser()
+  - localDateOptionalTimeParser()
+  - dateOptionalTimeParser()
+  New formats for parsing a datetime/date/time without a time zone, and for
+  parsing a date (mandatory) with an optional time
+
+
+Compatibility with 1.2
+----------------------
+Binary compatible - Yes, except
+  - PartialConverter interface has had two new methods added.
+    This is an internal interface and thus it is unlikely that you have
+    implementations that will break. If you did create your own implementation
+    and extended AbstractConverter then your code will not break.
+
+Source compatible - Yes, except
+  - PartialConverter interface, see above
+
+Serialization compatible - Yes
+
+Data compatible - Yes
+  - DateTimeZone data updated to version 2006g
+
+Semantic compatible - Yes, except
+  - YearMonthDay constructor no longer accepts time only strings
+  - TimeOfDay constructor no longer accepts strings including a date
+
+
+Deprecations since 1.2
+----------------------
+- Instant.toDateTimeISO
+- Instant.toMutableDateTimeISO
+    These were identical to the methods without the ISO suffix
+
+
+Bug fixes since 1.2
+-------------------
+- YearMonthDay
+  Constructing with String value no longer accepts a time only string
+
+- TimeOfDay
+  Constructing with String value no longer accepts date fields
+  Constructing with String now treats 'T' prefix as optional
+
+- DateTime/DateMidnight/MutableDateTime/AbstractInstant
+   Conversion methods toDateTime, toDateTimeISO, toMutableDateTime, and
+    toMutableDateTimeISO now preserve the time zone.
+    Previously calling any of these four methods would convert the result to
+    the default time zone. This was incorrect.
+    The methods have been changed to preserve the time zone.
+   The similarly named methods on Instant have not changed behaviour.
+
+- Interval.overlap/Interval.gap
+  Previously these methods returned intervals in the default time zone
+  Now, they return intervals in the time zone of the original interval
+
+- Interval/MutableInterval.overlaps(ReadableInterval)
+  Previously, these methods did not handle null correctly
+  Now, if the current millisecond instant is at the start of the interval the
+  method returns false (as defined, even if its a little unexpected)
+
+- DateTimeFormatterBuilder.MatchingParser
+  Previously didn't estimate parsed length correctly
+
+- YearMonthDay/TimeOfDay/Partial.Property
+  Hashcode was not defined
+
+- FixedDateTimeZone
+  Hashcode was not defined
+
+- ISO/Gregorian/Julian/Coptic/EthiopicChronology
+  Fixed overflow when getting year field from instants at Long.MAX_VALUE and
+  LONG.MIN_VALUE
+
+- DayOfYear field
+  Better error messages
 </source>
 </p>
 </section>

From 97aeb713efc7578e6877b0da14389ba7bcfbcaa8 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 2 Aug 2006 21:19:36 +0000
Subject: [PATCH 115/115] Pre 1.3 release

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1112 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/build.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/JodaTime/build.xml b/JodaTime/build.xml
index 40ee51768..487113972 100644
--- a/JodaTime/build.xml
+++ b/JodaTime/build.xml
@@ -253,7 +253,7 @@
              splitindex="yes"
                doctitle="&lt;h1&gt;${component.title}&lt;/h1&gt;"
             windowtitle="${component.title} (Version ${component.version})"
-                 bottom="Copyright (c) 2001-2005 - Joda.org"
+                 bottom="Copyright (c) 2001-2006 - Joda.org"
                Overview="${source.home}/org/joda/time/overview.html">
       <classpath refid="compile.classpath"/>
       <group title="User Packages" packages="org.joda.time:org.joda.time.format:org.joda.time.chrono">