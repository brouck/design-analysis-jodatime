From 81023700647fb32a4067adbf25de96fe9f355718 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Thu, 10 Aug 2006 04:50:37 +0000
Subject: [PATCH 01/54] Update for version 1.4

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1115 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/ToDo.txt | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/JodaTime/ToDo.txt b/JodaTime/ToDo.txt
index e02872a50..3b3b9a2fe 100644
--- a/JodaTime/ToDo.txt
+++ b/JodaTime/ToDo.txt
@@ -1,10 +1,10 @@
 JodaTime ToDo list
 ==================
 
-For 1.3
+For 1.4
 -------
 
-The TODO list for 1.3 has not been set yet.
+The TODO list for 1.4 has not been set yet.
 Some of the following are likely targets, as they are interesting ideas.
 
 Join joda-interest@lists.sourceforge.net to help out!

From 93347206455b4c65f513d42d87b0afde581c87c1 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 21 Aug 2006 00:07:21 +0000
Subject: [PATCH 03/54] I18N initial checkin

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1117 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/i18n/project.xml | 109 +++++++++++++++++++++++++++++++
 1 file changed, 109 insertions(+)
 create mode 100644 JodaTimeContrib/i18n/project.xml

diff --git a/JodaTimeContrib/i18n/project.xml b/JodaTimeContrib/i18n/project.xml
new file mode 100644
index 000000000..039419080
--- /dev/null
+++ b/JodaTimeContrib/i18n/project.xml
@@ -0,0 +1,109 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project>
+  <pomVersion>3</pomVersion>
+  <groupId>joda-time</groupId>
+  <artifactId>joda-time-i18n</artifactId>
+  <name>Joda time I18N support</name>
+  <currentVersion>0.1</currentVersion>
+  <shortDescription>Joda time I18N support</shortDescription>
+  <description>
+    Contribution to Joda-Time that adds further internationalization support
+  </description>
+
+  <url>http://joda-time.sourceforge.net/contrib/i18n</url>
+  <logo>/images/jodatime.png</logo>
+  <issueTrackingUrl>http://sourceforge.net/tracker/?atid=617889&amp;group_id=97367&amp;func=browse</issueTrackingUrl>
+  <inceptionYear>2006</inceptionYear>
+  <package>org.joda.time.contrib.i18n</package>
+
+  <siteAddress>shell.sourceforge.net</siteAddress>
+  <siteDirectory>/home/groups/j/jo/joda-time/htdocs/contrib/i18n</siteDirectory>
+
+  <licenses>
+    <license>
+      <name>Apache 2</name>
+      <url>http://www.apache.org/licenses/</url>
+      <distribution>repo</distribution>
+    </license>
+  </licenses>
+
+  <mailingLists>
+    <mailingList>
+      <name>Joda Interest list</name>
+      <subscribe>http://sourceforge.net/mail/?group_id=47291</subscribe>
+      <unsubscribe>http://sourceforge.net/mail/?group_id=47291</unsubscribe>
+      <archive>http://sourceforge.net/mailarchive/forum.php?forum_id=8530</archive>
+    </mailingList>
+  </mailingLists>
+
+  <organization>
+    <name>Joda.org</name>
+    <url>http://www.joda.org</url>
+    <logo>/images/joda.png</logo>
+  </organization>
+
+  <repository>
+    <connection>scm:svn:https://svn.sourceforge.net/svnroot/joda-time/trunk/JodaTimeContrib/i18n/</connection>
+    <url>http://svn.sourceforge.net/viewcvs.cgi/joda-time/trunk/JodaTimeContrib/i18n/</url>
+  </repository>
+
+  <versions>
+  </versions>
+
+  <developers>
+    <developer>
+      <name>Stephen Colebourne</name>
+      <id>scolebourne</id>
+      <email></email>
+      <timezone>0</timezone>
+    </developer>
+  </developers>
+
+  <dependencies>
+    <dependency>
+      <groupId>joda-time</groupId>
+      <artifactId>joda-time</artifactId>
+      <version>1.3</version>
+      <properties>
+        <comment>Compatible with v1.0 or later</comment>
+      </properties>
+    </dependency>
+  </dependencies>
+
+  <build>
+    <sourceDirectory>src/java</sourceDirectory>
+    <unitTestSourceDirectory>src/test</unitTestSourceDirectory>
+    <unitTest>
+      <includes>
+        <include>org/joda/time/contrib/i18n/**/Test*.java</include>
+      </includes>
+    </unitTest>
+    <resources>
+      <resource>
+        <targetPath>meta-inf</targetPath>
+        <includes>
+          <include>NOTICE.txt</include>
+        </includes>
+      </resource>
+    </resources>
+  </build>
+
+  <reports>
+     <report>maven-changelog-plugin</report>
+     <report>maven-changes-plugin</report>
+     <!--report>maven-checkstyle-plugin</report-->
+     <!-- <report>maven-clover-plugin</report> -->
+     <report>maven-jcoverage-plugin</report>
+     <report>maven-developer-activity-plugin</report>
+     <report>maven-file-activity-plugin</report>
+     <report>maven-javadoc-plugin</report>
+     <!-- <report>maven-jellydoc-plugin</report> -->
+     <report>maven-junit-report-plugin</report>
+     <report>maven-jxr-plugin</report>
+     <report>maven-license-plugin</report>
+     <!--report>maven-linkcheck-plugin</report-->
+     <!--report>maven-statcvs-plugin</report-->
+     <!--report>maven-tasklist-plugin</report-->
+  </reports>
+
+</project>

From 1ec6eb269132c39f9d896ef7746da637eb906498 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 21 Aug 2006 00:10:48 +0000
Subject: [PATCH 04/54] I18N initial checkin

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1118 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/i18n/LICENSE.txt              |  202 ++
 JodaTimeContrib/i18n/NOTICE.txt               |    5 +
 JodaTimeContrib/i18n/RELEASE-NOTES.txt        |   22 +
 JodaTimeContrib/i18n/build.xml                |  209 ++
 JodaTimeContrib/i18n/checkstyle.xml           |   81 +
 JodaTimeContrib/i18n/maven.xml                |   47 +
 JodaTimeContrib/i18n/project.properties       |   33 +
 JodaTimeContrib/i18n/src/conf/MANIFEST.MF     |    7 +
 .../i18n/src/conf/manifest-additions.txt      |    2 +
 .../joda/time/contrib/i18n/CLDRTerritory.java |  188 ++
 .../time/contrib/i18n/CLDRTerritoryData.dat   |  Bin 0 -> 9089 bytes
 .../contrib/i18n/CLDRTerritoryGenerator.java  |  351 ++++
 .../org/joda/time/contrib/i18n/Territory.java |  187 ++
 .../time/contrib/i18n/supplementalData.xml    | 1847 +++++++++++++++++
 .../joda/time/contrib/i18n/TestTerritory.java |   39 +
 JodaTimeContrib/i18n/xdocs/changes.xml        |   18 +
 JodaTimeContrib/i18n/xdocs/images/joda.png    |  Bin 0 -> 2919 bytes
 .../i18n/xdocs/images/jodatime.png            |  Bin 0 -> 2850 bytes
 JodaTimeContrib/i18n/xdocs/index.xml          |   77 +
 JodaTimeContrib/i18n/xdocs/licensecover.xml   |   34 +
 JodaTimeContrib/i18n/xdocs/navigation.xml     |   44 +
 .../i18n/xdocs/stylesheets/joda-theme.css     |  121 ++
 .../i18n/xdocs/stylesheets/maven-theme.css    |  121 ++
 JodaTimeContrib/i18n/xdocs/tasks.xml          |   19 +
 JodaTimeContrib/i18n/xdocs/userguide.xml      |   29 +
 25 files changed, 3683 insertions(+)
 create mode 100644 JodaTimeContrib/i18n/LICENSE.txt
 create mode 100644 JodaTimeContrib/i18n/NOTICE.txt
 create mode 100644 JodaTimeContrib/i18n/RELEASE-NOTES.txt
 create mode 100644 JodaTimeContrib/i18n/build.xml
 create mode 100644 JodaTimeContrib/i18n/checkstyle.xml
 create mode 100644 JodaTimeContrib/i18n/maven.xml
 create mode 100644 JodaTimeContrib/i18n/project.properties
 create mode 100644 JodaTimeContrib/i18n/src/conf/MANIFEST.MF
 create mode 100644 JodaTimeContrib/i18n/src/conf/manifest-additions.txt
 create mode 100644 JodaTimeContrib/i18n/src/java/org/joda/time/contrib/i18n/CLDRTerritory.java
 create mode 100644 JodaTimeContrib/i18n/src/java/org/joda/time/contrib/i18n/CLDRTerritoryData.dat
 create mode 100644 JodaTimeContrib/i18n/src/java/org/joda/time/contrib/i18n/CLDRTerritoryGenerator.java
 create mode 100644 JodaTimeContrib/i18n/src/java/org/joda/time/contrib/i18n/Territory.java
 create mode 100644 JodaTimeContrib/i18n/src/java/org/joda/time/contrib/i18n/supplementalData.xml
 create mode 100644 JodaTimeContrib/i18n/src/test/org/joda/time/contrib/i18n/TestTerritory.java
 create mode 100644 JodaTimeContrib/i18n/xdocs/changes.xml
 create mode 100644 JodaTimeContrib/i18n/xdocs/images/joda.png
 create mode 100644 JodaTimeContrib/i18n/xdocs/images/jodatime.png
 create mode 100644 JodaTimeContrib/i18n/xdocs/index.xml
 create mode 100644 JodaTimeContrib/i18n/xdocs/licensecover.xml
 create mode 100644 JodaTimeContrib/i18n/xdocs/navigation.xml
 create mode 100644 JodaTimeContrib/i18n/xdocs/stylesheets/joda-theme.css
 create mode 100644 JodaTimeContrib/i18n/xdocs/stylesheets/maven-theme.css
 create mode 100644 JodaTimeContrib/i18n/xdocs/tasks.xml
 create mode 100644 JodaTimeContrib/i18n/xdocs/userguide.xml

diff --git a/JodaTimeContrib/i18n/LICENSE.txt b/JodaTimeContrib/i18n/LICENSE.txt
new file mode 100644
index 000000000..d64569567
--- /dev/null
+++ b/JodaTimeContrib/i18n/LICENSE.txt
@@ -0,0 +1,202 @@
+
+                                 Apache License
+                           Version 2.0, January 2004
+                        http://www.apache.org/licenses/
+
+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+   1. Definitions.
+
+      "License" shall mean the terms and conditions for use, reproduction,
+      and distribution as defined by Sections 1 through 9 of this document.
+
+      "Licensor" shall mean the copyright owner or entity authorized by
+      the copyright owner that is granting the License.
+
+      "Legal Entity" shall mean the union of the acting entity and all
+      other entities that control, are controlled by, or are under common
+      control with that entity. For the purposes of this definition,
+      "control" means (i) the power, direct or indirect, to cause the
+      direction or management of such entity, whether by contract or
+      otherwise, or (ii) ownership of fifty percent (50%) or more of the
+      outstanding shares, or (iii) beneficial ownership of such entity.
+
+      "You" (or "Your") shall mean an individual or Legal Entity
+      exercising permissions granted by this License.
+
+      "Source" form shall mean the preferred form for making modifications,
+      including but not limited to software source code, documentation
+      source, and configuration files.
+
+      "Object" form shall mean any form resulting from mechanical
+      transformation or translation of a Source form, including but
+      not limited to compiled object code, generated documentation,
+      and conversions to other media types.
+
+      "Work" shall mean the work of authorship, whether in Source or
+      Object form, made available under the License, as indicated by a
+      copyright notice that is included in or attached to the work
+      (an example is provided in the Appendix below).
+
+      "Derivative Works" shall mean any work, whether in Source or Object
+      form, that is based on (or derived from) the Work and for which the
+      editorial revisions, annotations, elaborations, or other modifications
+      represent, as a whole, an original work of authorship. For the purposes
+      of this License, Derivative Works shall not include works that remain
+      separable from, or merely link (or bind by name) to the interfaces of,
+      the Work and Derivative Works thereof.
+
+      "Contribution" shall mean any work of authorship, including
+      the original version of the Work and any modifications or additions
+      to that Work or Derivative Works thereof, that is intentionally
+      submitted to Licensor for inclusion in the Work by the copyright owner
+      or by an individual or Legal Entity authorized to submit on behalf of
+      the copyright owner. For the purposes of this definition, "submitted"
+      means any form of electronic, verbal, or written communication sent
+      to the Licensor or its representatives, including but not limited to
+      communication on electronic mailing lists, source code control systems,
+      and issue tracking systems that are managed by, or on behalf of, the
+      Licensor for the purpose of discussing and improving the Work, but
+      excluding communication that is conspicuously marked or otherwise
+      designated in writing by the copyright owner as "Not a Contribution."
+
+      "Contributor" shall mean Licensor and any individual or Legal Entity
+      on behalf of whom a Contribution has been received by Licensor and
+      subsequently incorporated within the Work.
+
+   2. Grant of Copyright License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      copyright license to reproduce, prepare Derivative Works of,
+      publicly display, publicly perform, sublicense, and distribute the
+      Work and such Derivative Works in Source or Object form.
+
+   3. Grant of Patent License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      (except as stated in this section) patent license to make, have made,
+      use, offer to sell, sell, import, and otherwise transfer the Work,
+      where such license applies only to those patent claims licensable
+      by such Contributor that are necessarily infringed by their
+      Contribution(s) alone or by combination of their Contribution(s)
+      with the Work to which such Contribution(s) was submitted. If You
+      institute patent litigation against any entity (including a
+      cross-claim or counterclaim in a lawsuit) alleging that the Work
+      or a Contribution incorporated within the Work constitutes direct
+      or contributory patent infringement, then any patent licenses
+      granted to You under this License for that Work shall terminate
+      as of the date such litigation is filed.
+
+   4. Redistribution. You may reproduce and distribute copies of the
+      Work or Derivative Works thereof in any medium, with or without
+      modifications, and in Source or Object form, provided that You
+      meet the following conditions:
+
+      (a) You must give any other recipients of the Work or
+          Derivative Works a copy of this License; and
+
+      (b) You must cause any modified files to carry prominent notices
+          stating that You changed the files; and
+
+      (c) You must retain, in the Source form of any Derivative Works
+          that You distribute, all copyright, patent, trademark, and
+          attribution notices from the Source form of the Work,
+          excluding those notices that do not pertain to any part of
+          the Derivative Works; and
+
+      (d) If the Work includes a "NOTICE" text file as part of its
+          distribution, then any Derivative Works that You distribute must
+          include a readable copy of the attribution notices contained
+          within such NOTICE file, excluding those notices that do not
+          pertain to any part of the Derivative Works, in at least one
+          of the following places: within a NOTICE text file distributed
+          as part of the Derivative Works; within the Source form or
+          documentation, if provided along with the Derivative Works; or,
+          within a display generated by the Derivative Works, if and
+          wherever such third-party notices normally appear. The contents
+          of the NOTICE file are for informational purposes only and
+          do not modify the License. You may add Your own attribution
+          notices within Derivative Works that You distribute, alongside
+          or as an addendum to the NOTICE text from the Work, provided
+          that such additional attribution notices cannot be construed
+          as modifying the License.
+
+      You may add Your own copyright statement to Your modifications and
+      may provide additional or different license terms and conditions
+      for use, reproduction, or distribution of Your modifications, or
+      for any such Derivative Works as a whole, provided Your use,
+      reproduction, and distribution of the Work otherwise complies with
+      the conditions stated in this License.
+
+   5. Submission of Contributions. Unless You explicitly state otherwise,
+      any Contribution intentionally submitted for inclusion in the Work
+      by You to the Licensor shall be under the terms and conditions of
+      this License, without any additional terms or conditions.
+      Notwithstanding the above, nothing herein shall supersede or modify
+      the terms of any separate license agreement you may have executed
+      with Licensor regarding such Contributions.
+
+   6. Trademarks. This License does not grant permission to use the trade
+      names, trademarks, service marks, or product names of the Licensor,
+      except as required for reasonable and customary use in describing the
+      origin of the Work and reproducing the content of the NOTICE file.
+
+   7. Disclaimer of Warranty. Unless required by applicable law or
+      agreed to in writing, Licensor provides the Work (and each
+      Contributor provides its Contributions) on an "AS IS" BASIS,
+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+      implied, including, without limitation, any warranties or conditions
+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
+      PARTICULAR PURPOSE. You are solely responsible for determining the
+      appropriateness of using or redistributing the Work and assume any
+      risks associated with Your exercise of permissions under this License.
+
+   8. Limitation of Liability. In no event and under no legal theory,
+      whether in tort (including negligence), contract, or otherwise,
+      unless required by applicable law (such as deliberate and grossly
+      negligent acts) or agreed to in writing, shall any Contributor be
+      liable to You for damages, including any direct, indirect, special,
+      incidental, or consequential damages of any character arising as a
+      result of this License or out of the use or inability to use the
+      Work (including but not limited to damages for loss of goodwill,
+      work stoppage, computer failure or malfunction, or any and all
+      other commercial damages or losses), even if such Contributor
+      has been advised of the possibility of such damages.
+
+   9. Accepting Warranty or Additional Liability. While redistributing
+      the Work or Derivative Works thereof, You may choose to offer,
+      and charge a fee for, acceptance of support, warranty, indemnity,
+      or other liability obligations and/or rights consistent with this
+      License. However, in accepting such obligations, You may act only
+      on Your own behalf and on Your sole responsibility, not on behalf
+      of any other Contributor, and only if You agree to indemnify,
+      defend, and hold each Contributor harmless for any liability
+      incurred by, or claims asserted against, such Contributor by reason
+      of your accepting any such warranty or additional liability.
+
+   END OF TERMS AND CONDITIONS
+
+   APPENDIX: How to apply the Apache License to your work.
+
+      To apply the Apache License to your work, attach the following
+      boilerplate notice, with the fields enclosed by brackets "[]"
+      replaced with your own identifying information. (Don't include
+      the brackets!)  The text should be enclosed in the appropriate
+      comment syntax for the file format. We also recommend that a
+      file or class name and description of purpose be included on the
+      same "printed page" as the copyright notice for easier
+      identification within third-party archives.
+
+   Copyright [yyyy] [name of copyright owner]
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
diff --git a/JodaTimeContrib/i18n/NOTICE.txt b/JodaTimeContrib/i18n/NOTICE.txt
new file mode 100644
index 000000000..dffbcf31c
--- /dev/null
+++ b/JodaTimeContrib/i18n/NOTICE.txt
@@ -0,0 +1,5 @@
+=============================================================================
+= NOTICE file corresponding to section 4d of the Apache License Version 2.0 =
+=============================================================================
+This product includes software developed by
+Joda.org (http://www.joda.org/).
diff --git a/JodaTimeContrib/i18n/RELEASE-NOTES.txt b/JodaTimeContrib/i18n/RELEASE-NOTES.txt
new file mode 100644
index 000000000..7f919a15b
--- /dev/null
+++ b/JodaTimeContrib/i18n/RELEASE-NOTES.txt
@@ -0,0 +1,22 @@
+
+Joda-Time Contributions area - Internationalization v0.1
+========================================================
+Joda-Time is a date and time library that vastly improves on the JDK.
+This release provides additional support for internationalization.
+
+This library is a user contribution by Stephen Colebourne.
+
+The Joda-Time contributions area hosts additional code that may be of
+use when working with the main Joda-Time library.
+Each of these contributions is licensed using the Apache License v2.0.
+
+Please note that this code is not supported in the same way as the main
+Joda-Time code. As such it is possible that methods and classes may come
+and go over time without warning - you have been warned!
+
+
+Feedback
+--------
+All feedback is welcomed at joda-interest@lists.sourceforge.net.
+
+The Joda team
diff --git a/JodaTimeContrib/i18n/build.xml b/JodaTimeContrib/i18n/build.xml
new file mode 100644
index 000000000..16e5eff0f
--- /dev/null
+++ b/JodaTimeContrib/i18n/build.xml
@@ -0,0 +1,209 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!--build.xml generated by maven from project.xml version 0.8
+  on date December 29 2005, time 2047-->
+
+<project default="jar" name="joda-time-i18n" basedir=".">
+  <!--Load local and user build preferences-->
+
+  <property file="build.properties">
+  </property>
+  <property file="${user.home}/build.properties">
+  </property>
+  <!--Build properties-->
+
+  <property name="defaulttargetdir" value="${basedir}/target">
+  </property>
+  <property name="libdir" value="${user.home}/.maven/repository">
+  </property>
+  <property name="classesdir" value="${basedir}/target/classes">
+  </property>
+  <property name="testclassesdir" value="${basedir}/target/test-classes">
+  </property>
+  <property name="testreportdir" value="${basedir}/target/test-reports">
+  </property>
+  <property name="distdir" value="${basedir}/dist">
+  </property>
+  <property name="javadocdir" value="${basedir}/dist/docs/api">
+  </property>
+  <property name="final.name" value="joda-time-i18n-0.8">
+  </property>
+  <property name="proxy.host" value="">
+  </property>
+  <property name="proxy.port" value="">
+  </property>
+  <property name="proxy.username" value="">
+  </property>
+  <property name="proxy.password" value="">
+  </property>
+  <path id="build.classpath">
+    <pathelement location="${libdir}/joda-time/jars/joda-time-1.3.jar">
+    </pathelement>
+  </path>
+  <target name="init" description="o Initializes some properties">
+    <mkdir dir="${libdir}">
+    </mkdir>
+    <condition property="noget">
+      <equals arg2="only" arg1="${build.sysclasspath}">
+      </equals>
+    </condition>
+    <!--Test if JUNIT is present in ANT classpath-->
+
+    <available property="Junit.present" classname="junit.framework.Test">
+    </available>
+    <!--Test if user defined a proxy-->
+
+    <condition property="useProxy">
+      <and>
+        <isset property="proxy.host">
+        </isset>
+        <not>
+          <equals trim="true" arg2="" arg1="${proxy.host}">
+          </equals>
+        </not>
+      </and>
+    </condition>
+  </target>
+  <target name="compile" description="o Compile the code" depends="get-deps">
+    <mkdir dir="${classesdir}">
+    </mkdir>
+    <javac destdir="${classesdir}" deprecation="true" debug="true" optimize="false" excludes="**/package.html">
+      <src>
+        <pathelement location="${basedir}/src/java">
+        </pathelement>
+      </src>
+      <classpath refid="build.classpath">
+      </classpath>
+    </javac>
+    <mkdir dir="${classesdir}/meta-inf">
+    </mkdir>
+    <copy todir="${classesdir}/meta-inf">
+      <fileset dir="${basedir}/.">
+        <include name="NOTICE.txt">
+        </include>
+      </fileset>
+    </copy>
+  </target>
+  <target name="jar" description="o Create the jar" depends="compile,test">
+    <jar jarfile="${defaulttargetdir}/${final.name}.jar" excludes="**/package.html" basedir="${classesdir}">
+    </jar>
+  </target>
+  <target name="clean" description="o Clean up the generated directories">
+    <delete dir="${defaulttargetdir}">
+    </delete>
+    <delete dir="${distdir}">
+    </delete>
+  </target>
+  <target name="dist" description="o Create a distribution" depends="jar, javadoc">
+    <mkdir dir="dist">
+    </mkdir>
+    <copy todir="dist">
+      <fileset dir="${defaulttargetdir}" includes="*.jar">
+      </fileset>
+      <fileset dir="${basedir}" includes="LICENSE*, README*">
+      </fileset>
+    </copy>
+  </target>
+  <target name="test" description="o Run the test cases" if="test.failure" depends="internal-test">
+    <fail message="There were test failures.">
+    </fail>
+  </target>
+  <target name="internal-test" if="Junit.present" depends="junit-present,compile-tests">
+    <mkdir dir="${testreportdir}">
+    </mkdir>
+    <junit dir="${basedir}" failureproperty="test.failure" printSummary="yes" fork="true" haltonerror="true">
+      <sysproperty key="basedir" value=".">
+      </sysproperty>
+      <formatter type="xml">
+      </formatter>
+      <formatter usefile="false" type="plain">
+      </formatter>
+      <classpath>
+        <path refid="build.classpath">
+        </path>
+        <pathelement path="${testclassesdir}">
+        </pathelement>
+        <pathelement path="${classesdir}">
+        </pathelement>
+      </classpath>
+      <batchtest todir="${testreportdir}">
+        <fileset dir="${basedir}/src/test">
+          <include name="org/joda/time/contrib/i18n/**/Test*.java">
+          </include>
+        </fileset>
+      </batchtest>
+    </junit>
+  </target>
+  <target name="junit-present" unless="Junit.present" depends="init">
+    <echo>================================= WARNING ================================</echo>
+    <echo>Junit isn't present in your ${ANT_HOME}/lib directory. Tests not executed.</echo>
+    <echo>==========================================================================</echo>
+  </target>
+  <target name="compile-tests" if="Junit.present" depends="junit-present,compile">
+    <mkdir dir="${testclassesdir}">
+    </mkdir>
+    <javac destdir="${testclassesdir}" deprecation="true" debug="true" optimize="false" excludes="**/package.html">
+      <src>
+        <pathelement location="${basedir}/src/test">
+        </pathelement>
+      </src>
+      <classpath>
+        <path refid="build.classpath">
+        </path>
+        <pathelement path="${classesdir}">
+        </pathelement>
+      </classpath>
+    </javac>
+  </target>
+  <target name="javadoc" description="o Generate javadoc" depends="get-deps">
+    <mkdir dir="${javadocdir}">
+    </mkdir>
+    <tstamp>
+      <format pattern="2005-yyyy" property="year">
+      </format>
+    </tstamp>
+    <property name="copyright" value="Copyright &amp;copy;  Joda.org. All Rights Reserved.">
+    </property>
+    <property name="title" value="Joda time I18N support 0.8 API">
+    </property>
+    <javadoc use="true" private="true" destdir="${javadocdir}" author="true" version="true" sourcepath="${basedir}/src/java" packagenames="org.joda.time.contrib.i18n.*">
+      <classpath>
+        <path refid="build.classpath">
+        </path>
+      </classpath>
+    </javadoc>
+  </target>
+  <target name="get-dep-joda-time.jar" description="o Download the dependency : joda-time.jar" unless="joda-time.jar" depends="init,setProxy,noProxy,get-custom-dep-joda-time.jar">
+    <mkdir dir="${libdir}/joda-time/jars/">
+    </mkdir>
+    <get dest="${libdir}/joda-time/jars/joda-time-1.3.jar" usetimestamp="true" ignoreerrors="true" src="http://www.ibiblio.org/maven/joda-time/jars/joda-time-1.3.jar">
+    </get>
+  </target>
+  <target name="get-custom-dep-joda-time.jar" if="joda-time.jar" depends="init,setProxy,noProxy">
+    <mkdir dir="${libdir}/joda-time/jars/">
+    </mkdir>
+    <get dest="${libdir}/joda-time/jars/joda-time-1.3.jar" usetimestamp="true" ignoreerrors="true" src="${joda-time.jar}">
+    </get>
+  </target>
+  <target name="get-deps" unless="noget" depends="get-dep-joda-time.jar">
+  </target>
+  <target name="setProxy" if="useProxy" depends="init">
+    <!--Proxy settings works only with a JDK 1.2 and higher.-->
+
+    <echo>Proxy used :</echo>
+    <echo>Proxy host [${proxy.host}]</echo>
+    <echo>Proxy port [${proxy.port}]</echo>
+    <echo>Proxy user [${proxy.username}]</echo>
+    <setproxy proxyuser="${proxy.username}" proxyport="${proxy.port}" proxypassword="${proxy.password}" proxyhost="${proxy.host}">
+    </setproxy>
+  </target>
+  <target name="noProxy" unless="useProxy" depends="init">
+    <echo>Proxy not used.</echo>
+  </target>
+  <target name="install-maven">
+    <get dest="${user.home}/maven-install-latest.jar" usetimestamp="true" src="${repo}/maven/maven-install-latest.jar">
+    </get>
+    <unjar dest="${maven.home}" src="${user.home}/maven-install-latest.jar">
+    </unjar>
+  </target>
+</project>
\ No newline at end of file
diff --git a/JodaTimeContrib/i18n/checkstyle.xml b/JodaTimeContrib/i18n/checkstyle.xml
new file mode 100644
index 000000000..0f1c60d63
--- /dev/null
+++ b/JodaTimeContrib/i18n/checkstyle.xml
@@ -0,0 +1,81 @@
+<?xml version="1.0"?>
+
+<!DOCTYPE module PUBLIC
+    "-//Puppy Crawl//DTD Check Configuration 1.1//EN"
+    "http://www.puppycrawl.com/dtds/configuration_1_1.dtd">
+
+<!-- customization of default Checkstyle behavior -->
+<module name="Checker">
+  <property name="localeLanguage" value="en"/>
+  <!--module name="PackageHtml"/-->
+  <module name="TreeWalker">
+    <module name="MemberName">
+      <property name="format" value="^i[A-Z][a-zA-Z0-9]*$"/>
+    </module>
+    <module name="LocalVariableName">
+      <property name="format" value="^ex[0-9]*$"/>
+      <property name="tokens" value="PARAMETER_DEF"/>
+    </module>
+    <module name="AvoidStarImport"/>
+    <module name="RedundantImport"/>
+    <module name="UnusedImports"/>
+    
+    <module name="TabCharacter"/>
+    <module name="NeedBraces"/>
+    <!--module name="TypecastParenPad"/-->
+    <module name="WhitespaceAfter"/>
+    <module name="WhitespaceAround"/>
+    <module name="ModifierOrder"/>
+    <module name="RedundantModifier"/>
+    
+    <module name="EmptyBlock"/>
+    <module name="LeftCurly"/>
+    <module name="NeedBraces"/>
+    <module name="RightCurly"/>
+    <!--module name="AvoidNestedBlocks">
+      <property name="allowInSwitchCase" value="true"/>
+    </module-->
+    
+    <!--module name="ArrayTrailingComma"/-->
+    <!--module name="CovariantEquals"/-->
+    <module name="DoubleCheckedLocking"/>
+    <module name="EmptyStatement"/>
+    <module name="EqualsHashCode"/>
+    <!--module name="HiddenField">
+      <property name="ignoreConstructorParameter" value="true"/>
+      <property name="ignoreSetter" value="true"/>
+    </module-->
+    <module name="IllegalInstantiation">
+      <property name="classes" value="java.lang.Boolean"/>
+    </module>
+    <!--module name="SuperClone"/-->
+    <!--module name="ExplicitInitialization"/-->
+              
+    <module name="GenericIllegalRegexp">
+      <property name="format" value="System\.out\.println"/>
+    </module>
+    <module name="GenericIllegalRegexp">
+      <property name="format" value="System\.err\.println"/>
+    </module>
+    <module name="TodoComment"/>
+    <module name="UpperEll"/>
+    <module name="ArrayTypeStyle"/>
+    <module name="Indentation"/>
+          
+    <module name="RedundantThrows">
+      <property name="allowUnchecked" value="true"/>
+    </module>
+    <module name="LineLength">
+      <property name="max" value="120"/>
+    </module>
+    <module name="JavadocVariable">
+      <property name="excludeScope" value="private"/>
+    </module>
+    <module name="JavadocMethod">
+      <property name="excludeScope" value="private"/>
+      <property name="allowUndeclaredRTE" value="true"/>
+    </module>
+ </module>
+</module>
+                        
+
diff --git a/JodaTimeContrib/i18n/maven.xml b/JodaTimeContrib/i18n/maven.xml
new file mode 100644
index 000000000..58eed5607
--- /dev/null
+++ b/JodaTimeContrib/i18n/maven.xml
@@ -0,0 +1,47 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project
+    default="java:jar"
+    xmlns:j="jelly:core"
+    xmlns:license="license"
+    xmlns:maven="jelly:maven"
+    xmlns:util="jelly:util"
+    xmlns:ant="jelly:ant">
+
+  <postGoal name="dist:prepare-bin-filesystem">
+    <j:set var="maven.dist.bin.assembly.dir" value="${pom.getPluginContext('maven-dist-plugin').getVariable('maven.dist.bin.assembly.dir')}" />
+    
+    <!-- Copy Files -->
+    <ant:copy todir="${maven.dist.bin.assembly.dir}">
+      <ant:fileset dir=".">
+        <ant:include name="NOTICE.txt"/>
+        <ant:include name="RELEASE-NOTES.txt"/>
+      </ant:fileset>
+    </ant:copy>
+  </postGoal>
+
+  <postGoal name="dist:prepare-src-filesystem">
+    <j:set var="maven.dist.src.assembly.dir" value="${pom.getPluginContext('maven-dist-plugin').getVariable('maven.dist.src.assembly.dir')}" />
+    
+    <!-- Copy Files -->
+    <ant:copy todir="${maven.dist.src.assembly.dir}">
+      <ant:fileset dir=".">
+        <ant:include name="NOTICE.txt"/>
+        <ant:include name="RELEASE-NOTES.txt"/>
+        <ant:include name="checkstyle.xml"/>
+      </ant:fileset>
+    </ant:copy>
+    
+    <!-- Copy Jars -->
+    <ant:copy todir="${maven.dist.src.assembly.dir}">
+      <ant:fileset dir="${maven.build.dir}">
+        <ant:include name="*.jar"/>
+      </ant:fileset>
+    </ant:copy>
+    
+    <!-- Copy XDocs -->
+    <ant:copy todir="${maven.dist.src.assembly.dir}/xdocs">
+      <ant:fileset dir="xdocs" />
+    </ant:copy>
+  </postGoal>
+
+</project>
diff --git a/JodaTimeContrib/i18n/project.properties b/JodaTimeContrib/i18n/project.properties
new file mode 100644
index 000000000..f9336fbfd
--- /dev/null
+++ b/JodaTimeContrib/i18n/project.properties
@@ -0,0 +1,33 @@
+#show data on the breadcrumbs line
+maven.xdoc.date = navigation-bottom
+maven.xdoc.date.format = yyyy-MM-dd
+# maven.xdoc.version = ${pom.currentVersion}
+maven.xdoc.legend = false;
+maven.xdoc.theme.url = ./style/joda-theme.css
+maven.xdoc.locale.default=en
+
+maven.scm.svn.tag.base=https://svn.sourceforge.net/svnroot/joda-time/tags
+maven.changelog.factory=org.apache.maven.svnlib.SvnChangeLogFactory
+
+maven.compile.target=1.3
+maven.compile.source=1.3
+
+maven.checkstyle.properties=checkstyle.xml
+maven.junit.fork=true
+maven.xdoc.poweredby.image=maven-feather.png
+maven.javadoc.links=http://java.sun.com/products/j2se/1.4/docs/api, http://joda-time.sourceforge.net/api-release
+maven.javadoc.public=true
+maven.javadoc.package=false
+maven.javadoc.private=false
+
+maven.jar.manifest=src/conf/manifest-additions.txt
+maven.dist.src.assembly.dir=${maven.dist.assembly.dir}/src/${maven.final.name}-src
+
+maven.changes.issue.template=http://sourceforge.net/support/tracker.php?aid=%ISSUE%
+
+maven.sourceforge.project.name=joda-time
+maven.sourceforge.project.groupId=97367
+maven.sourceforge.project.packageName=joda-time-i18n
+maven.sourceforge.project.releaseNotes=RELEASE-NOTES.txt
+maven.sourceforge.project.sendEmailNotice=false
+maven.sourceforge.project.submitNewsItem=false
diff --git a/JodaTimeContrib/i18n/src/conf/MANIFEST.MF b/JodaTimeContrib/i18n/src/conf/MANIFEST.MF
new file mode 100644
index 000000000..88b3d235d
--- /dev/null
+++ b/JodaTimeContrib/i18n/src/conf/MANIFEST.MF
@@ -0,0 +1,7 @@
+Extension-Name: @name@
+Specification-Title: Joda Time I18N support
+Specification-Vendor: Joda.org
+Specification-Version: 1.0
+Implementation-Vendor: Joda.org
+Implementation-Title: org.joda.time.contrib.i18n
+Implementation-Version: @version@
diff --git a/JodaTimeContrib/i18n/src/conf/manifest-additions.txt b/JodaTimeContrib/i18n/src/conf/manifest-additions.txt
new file mode 100644
index 000000000..0918fb5d2
--- /dev/null
+++ b/JodaTimeContrib/i18n/src/conf/manifest-additions.txt
@@ -0,0 +1,2 @@
+Specification-Version: 0.1
+Implementation-Vendor-Id: org.joda
\ No newline at end of file
diff --git a/JodaTimeContrib/i18n/src/java/org/joda/time/contrib/i18n/CLDRTerritory.java b/JodaTimeContrib/i18n/src/java/org/joda/time/contrib/i18n/CLDRTerritory.java
new file mode 100644
index 000000000..104af446a
--- /dev/null
+++ b/JodaTimeContrib/i18n/src/java/org/joda/time/contrib/i18n/CLDRTerritory.java
@@ -0,0 +1,188 @@
+/*
+ *  Copyright 2006 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.contrib.i18n;
+
+import java.io.BufferedInputStream;
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.ObjectInputStream;
+
+import org.joda.time.DateTimeZone;
+
+/**
+ * Provides time data for a specific territory, typically a country.
+ * <p>
+ * Many pieces of data used in dates and times varies by territory.
+ * This class provides access to that data.
+ */
+public class CLDRTerritory extends Territory {
+
+    /** The raw CLDR data. */
+    private static final byte[] cRawData = loadRawData();
+
+    /** The territory id, as per CLDR. */
+    private String iID;
+    /** The zones. */
+    private DateTimeZone[] iZones;
+    /** The first day of week. */
+    private int iFirstDOW;
+    /** The first day of the business week. */
+    private int iFirstBusinessDOW;
+    /** The last day of the business week. */
+    private int iLastBusinessDOW;
+    /** The first day of the weekend. */
+    private int iFirstWeekendDOW;
+    /** The last day of the weekend. */
+    private int iLastWeekendDOW;
+
+    //-----------------------------------------------------------------------
+    /**
+     * Loads the data from file.
+     *
+     * @return the array of bytes
+     */
+    private static byte[] loadRawData() {
+        String path = "org/joda/time/contrib/i18n/CLDRTerritoryData.dat";
+        InputStream baseStream = null;
+        ByteArrayOutputStream baos = new ByteArrayOutputStream(1024);
+        try {
+            // open the file
+            baseStream = CLDRTerritory.class.getClassLoader().getResourceAsStream(path);
+            if (baseStream == null) {
+                throw new IOException("Resource not found " + path);
+            }
+            byte[] bytes = new byte[1024];
+            int result = 0;
+            while (result != -1) {
+                baos.write(bytes, 0, result);
+                result = baseStream.read(bytes, 0, 1024);
+            }
+            return baos.toByteArray();
+            
+        } catch (IOException ex) {
+            throw new IllegalArgumentException("Territory data could not be loaded: " + ex.getMessage());
+        } finally {
+            if (baseStream != null) {
+                try {
+                    baseStream.close();
+                } catch (IOException ex) {
+                    // ignore
+                }
+            }
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Constructor.
+     *
+     * @param id  the territory id, not null
+     */
+    CLDRTerritory(String id) {
+        super();
+        init(id);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Initialises the data for this id.
+     *
+     * @param id  the territory id, not null
+     * @throws IOException if an error occurs
+     */
+    private void init(String id) {
+        try {
+            // open the file
+            ByteArrayInputStream bais = new ByteArrayInputStream(cRawData);
+            ObjectInputStream in = new ObjectInputStream(new BufferedInputStream(bais));
+            byte version = in.readByte();
+            if (version != 1) {
+                throw new IllegalArgumentException("Unknown file version: " + version);
+            }
+            
+            // loop through file to find the id
+            String inputId = in.readUTF();
+            while (inputId.equals(id) == false) {
+                byte zoneCount = in.readByte();
+                for (int i = 0; i < zoneCount; i++) {
+                    in.readUTF();
+                }
+                in.skip(5);
+                inputId = in.readUTF();
+                if (inputId.length() == 0) {
+                    throw new IllegalArgumentException("Territory " + id + " could not be loaded");
+                }
+            }
+            
+            // found matching id
+            iID = id;
+            byte zoneCount = in.readByte();
+            iZones = new DateTimeZone[zoneCount];
+            for (int i = 0; i < zoneCount; i++) {
+                String zoneID = in.readUTF();
+                try {
+                    iZones[i] = DateTimeZone.forID(zoneID);
+                } catch (IllegalArgumentException ex) {
+                    // ignore unless primary, allowing different timezone data files to work
+                    if (i == 0) {
+                        throw ex;
+                    }
+                }
+            }
+            iFirstDOW = in.readByte();
+            iFirstBusinessDOW = in.readByte();
+            iLastBusinessDOW = in.readByte();
+            iFirstWeekendDOW = in.readByte();
+            iLastWeekendDOW = in.readByte();
+            
+        } catch (IOException ex) {
+            throw new IllegalArgumentException("Territory " + id + " could not be loaded: " + ex.getMessage());
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    public String getID() {
+        return iID;
+    }
+
+    //-----------------------------------------------------------------------
+	public DateTimeZone[] getZones() {
+        return (DateTimeZone[]) iZones.clone();
+    }
+
+    public int getFirstDayOfWeek() {
+        return iFirstDOW;
+    }
+
+    public int getBusinessWeekStart() {
+        return iFirstBusinessDOW;
+    }
+
+    public int getBusinessWeekEnd() {
+        return iLastBusinessDOW;
+    }
+
+    public int getWeekendStart() {
+        return iFirstWeekendDOW;
+    }
+
+    public int getWeekendEnd() {
+        return iLastWeekendDOW;
+    }
+
+}
diff --git a/JodaTimeContrib/i18n/src/java/org/joda/time/contrib/i18n/CLDRTerritoryData.dat b/JodaTimeContrib/i18n/src/java/org/joda/time/contrib/i18n/CLDRTerritoryData.dat
new file mode 100644
index 0000000000000000000000000000000000000000..53a599eb231ccf36f746899f47d016e387f7a24c
GIT binary patch
literal 9089
zcmZu%ZF1X4lBMLY-FCO#?e3Y4-i_EBbm$BKD3KBgnoU6TNPiefutbyyplARknL5*6
zZSF9yfXXVkXTuJM1)#n%U%q^qrT_cq=*`P$^m=qQI$vI%jeZPDQOk@j=CY)-vo~+w
zjn4lJ&PG23jiie|sipeu+gGpOjLzqH`k{NemZEAURpMR${S5Pb2p+m=79?x6m2dku
z@#59!=WfhxK~!zY%s2YjJ&AH9w^TG#jsCNHFjY@GJ7aWpHu}lV7*e&@(rzt@&qlvo
z>RKJeMMBjkrdn3YzD(C=qo0?Q$p@KTT<MA)bn6DL&PJd3tV^n?#K<j=9ODE(*=a*j
z7qYTbj_>`^f?_X4-B@!(Gwg&HTT!iARqfe=cbKm~RIn439TERI*a9}*%1VCK!mf0W
zlkt(~x}gKlwU`($_12x!UNv?=_~i_i?4M6)t7_#Ol3c?O_BiuLy)7Q8;_0U8+34@i
z5UOtfApOS@R?K)O$-*x<#y)Dh;2lPOxUP2a{6$PB)wVohf)NaWNL6&GPj*Z+K6jg(
z$*Rezq0ujV8okx!mYUo-=`;3iU&d-rJK5x#p@h|cv}cN`Xvsq5OM>U@hu|proRiSI
zbgrtMVwcV%vxr4~(r)HDbAzs6xQ}*`sVEv*9e8ikTmLH5J35M{wTGN_9y0L~V#5b<
zuv@!<OF!~TH$WWX%)W{NM>fMkX*y&%>}lt_ff@Sv3(ArhJ_*qME6;XWY!WJ-Xs6ga
zm(e+9w8xrgI?-1x3lGr=6?7cHrz3%Q3CFSV5|T%%>;@+tH<&Y}TUp3P^2Pysj+Eq}
zj*pCi&p7P+E{<c}WYlt)z&&iyP!#)`c06K&Aa~}8=p?F&U(MmXezH)=TD!?$=uZ|O
zVNEYD^dyUd2PHrV2Sh?@ld6(m#c<xw4!XLQt<)Sx$=naSs)cCPGeac-<@MWG$rJ5z
zd#2mucaNZjc;4Kp`rw%~*wMkeBB<cnn)U+GZM_pJ*@(f>bKqjH5JC3+SX58K(4_mh
zt(9y?zwv|qBy=&W)VI-p{q-rRMO2vYzyJDTDO&K?R@eK{-~Re;EuQE!`u*P?8(x54
zntxmTsDKK;=NnxK(xd<331&zUIy;;$Vuf6hiK0**y>r!Uf@&`c%<D*buC#1Ae|qD^
zqEe--gz(l~z^i_l1qdwPfTdJR7ZKKk-Ts&N@ZC$}CxnbBy<L~N5|#YseVOF)SgY*d
zKe?lWZmIQYWvVJw=t6Utj0YH=!0xnT0*YM}$CQy907!A*&*iojLj;F-$-$B!M?H!s
z&QP=aHx`OPQBr$ig816P>ODq-udUh&n|D6fRKPo35<k713RSy}MN=2T9SL0ABOtQe
zl23AH@{k!f24gjuZeG88{pRiHJVZ=7-VCYUf_ylJCiB<cW)rn*bJ}{ujHyDlJ%Ie5
zD*rUeR4tnAsnONW$3~j#!s!ZZ#RUZj0$gY}8NloxEKdjE_PS=PuS^QDZ$h2rhy};f
zUqCpH?Y>X}0NeSl!2!LoZbXgb3z)p?PdzgX*_mT`LV`a*jMy<Tn9YILpu7>-26K3{
zcw^0&<QS8aw9`QLRQs>8+FP$pVM$p5-^S!KB*Q%vQt!~)T9;p$c-Kfxj^B~C(p<qk
z7KRJ#pHCf>4WeL2B|Fpz6}AXAD4T+w*jyn@?6NBI^MMTlGyY@=Gs*{P<2HCbdT(c&
zN%7>SPGtEYpvzR@Abk6h?;%Te?wfl$;^&wA#Jn7U&>hVMAd0=_olORM2oms77j|m_
zGE<)&$9hZBa`F-u;JoyO>V}@}=a=}Lp^_S(R}7+Pe(nJcF$qa)SeVn{B^f)~Sz;vL
zk1l}}JNYD<H@(J9Itu7@*bI1Ul`ie37ABr;zWO4o9r%U~91V^)h5#t|+)KEN!BA6{
zv;V_RiE;)Jg?wQnCNN?T(FCwECguRT9>2D8-54F$l7-|A)WK2L_Q#$CVtmmwz@A0B
zp>3!}-tQ7<?-lKYUU;tyNGWG8$e2>_o5?VACmLbHZ$hKvI<Tj?ERVUi79Im}E-M*t
zsLj}L|K2emBvbGAL?~TY<VP6hI3iSg<N-V36yGx<?rC3(t$h*VC~nBY9GdrVg&`ab
zs1Y1JB)|}dSJEOu<f`ECiU%@0EU@oW?HmK5{S>t3Aqo=2EF>i|gx$shld|AnNGb(u
z<|X|38>4WE1h<KMrnCbC&{%JX8Eti8v6c)fm3T{AlxOz)YqO9IS%eHCfNcj#Vc8yR
z<qlPX9Wn(7dmJF&?Kd<0W5)zorpG~u)My_ranPQ!Vya}pB6nc~9v=kB_(2s8PO!8S
zvr8=yHJg>p*w@!6DEcH6QIYA^IQ8v2l&1HHs9$YF-6$|Cq=^wUygO6)aQcVBfC6@b
zl>&GUV4Ydj!zMYBGshBhJ6tS**pgi}!}<E6b(uquY?h+pbh%7lIpfY{vsD$oWS0jo
z#&OsYKZv1zrOQ>zt5-gJQp%x9y}c$>Zc%P}0S{S+YOx{CS;@^gOi^bBTPSe$CxJ`?
z5j}w1O;;h~nRV;z`nv^ddM2K~BZ2JVvf7Cn20e{FvEyda$Yp2_u7s{p$Mz8%(mvnO
z&LZ#%q3F+kMaTwBMC&2Xr+~C_ZW)6Joy)q2hZ?r~U6^u=-3e%sPY-J#q=y{Jmc1+P
zF5zUZ5P}`*$4y{j!PbxgBHz{QOR)XM{9~~*cf=d1LY1yJ5d8xibg2-e&?4{J4PF|K
zv2Y9;kTb7z*&(J+3aHfrlA4_mBZ7EL3>t13^lPxG6BJ;Jb*H^qPy{%zvqc2*&WH!j
z@XDDG181^rd53ERzaIuonYqoU*gUJv>!w9}#^u-$InCzS+;<{UIM|sl1?14pIWl*K
zH+X4HVWLa@u~1IEPK=!_1qE#`D&F1-+vA?XO6W>DPcF@&7=ugMW@s!q6T(tF9h4V2
z-bk?tD_%9^X0>Gw4F3E9wyn^8GVwweaTe=(r(ib!ETTr7zI!r8ec7NW^52YgiNrX*
zt+`O~uVQ*`5dFUlzFtxROnkTSO5ym(ynh>fmMD!PW~mDC-Rj9nnfM%hxK>T8m_kFa
zD?|OWCUi@b-Ya%T+UX0UDFY)Zw@#SeA~QRb8QF>oWG8wkbtEu44{qOMBf4o(LtujB
zw5wp4PyPv-S_NU$@L7n+Fi8g|b0foA9YnR6f`x|@0==~~XLTQrseXnC9z2<<Ed<MO
zfjI<}KnVcSbK~YHYc^B$EQSwbQEZj2v6YYh%Oz4wZX^8~XzaNo6?yF%EE7n5XBl)*
za7d+(jGz>F<ThLipmHBDo}POWkLeM;NgpJ$XL>|2;ZjThdSc+3E~*m)6L6|0g#zt7
z%P<oV2`?LDnadrKVG$cqOSBhUA29~i{%YyUK&Qf=TDnLKfQz2I?*xiZm+^1!&u!$S
zs6pVh)(U_GX|O&}#jV*CH0hH1705w7@LrcgDvwQXvvA=&$H`fSuVqpB{!3^W%AO=d
z@ztR3W)B}2>b0+s{-nsMWDZ!}esBheRg<Y_>(c-=_^GysyslBdHwSx`8I`CA+XDe<
zUAa|LQ>hcm1=GGUPht~Cz*zs@FjynE(!B3Q&*u{V?HMMaLyq|1Z`TFdmG~S1$_6&Q
z1AP9eoB2*02=#;n%cB4C$)0LvW`M{=Tg;uNvpA=~_|CNTy3Lv*0o}?H%H6IoLxGFI
z)><Jv&+0W%53Z>hfVLT1a}7`O+`*t`N+C;n#n_Pmq*ef7>snSpjatjD6aV8s5N@^-
ziN!a_woN3_l5pZFqAJsd3hhTxE^|%z>*H%G>Jqj!Z6TMsVpJAJDfx+F7;I-akXJK&
zRo7r6m(x=Dh%@ott^qSHPglPG7p^|~Nlb5WNg6A=c>@zcP=e%7972x`e}r@|{eVyr
z@-vdA?`K3*9@S<7GlCesDYOLn`ZHdlomq*a@KaqOS%M>8$PYrpNXS7$&`2NM_%lOG
zt12h&g)ZT4)}qJ<qgDbpA%>%^@m5l8&^4_xj@MP^VOzP%J)p=)>ST2PBGiv)(nD|9
zcaiBBbbwsI@c^cMJ~Ii2Ws)kfL;GT4CbMv#pyOqF_gq$A8pvAF5Sg2!w|&<oL4tp8
zCyOa}96Tts7bsUsUrnuzc(<#pp;a@-Y!TSr*&srIlBqO!+iP@&e`1+&`G63$+rGut
zxHtlD9DRiz4ol8C0ZT7-%>BTi=<A^OWHZhJsikL)89_c)J5JLREbneFkaJ2qAVIV3
zSKgM%MJR&+0`7sNL#fz7Zj<Vol|kC&48s}b?(CrWJ|c#VSfWAf&=#?lkyY=pAp`4*
zkUA15(N?u5n;WfY-$FFh>d86&250NFVyX@&R?{h_>nU@L>jOK>7`cO6Q4y~2fZ@F>
zPNqn(j#g5!$F&R~d1OZ|jD%#1EJ)XE!YgP#XTmG_$cxP(_W3|Dq@5cu#sEIc_z{<Y
zxFxg&LW->Vn>{8p$woA$XG~Pu1H>+Su3%Z^vRgQ?I248CJDae}h+O^QX0gQ0k)11o
z>m5x@(UNl{Hb=xTk*{f|8D2|-o+HZueba0pmkspTJkXu4rxC)ez1Tr=tpr==8rJc>
ziIq4V9wBxaDHFW?yQ^AzeL4}U-aD_)(GYV)3rE>Qr4XfDEX_m>S%Qv-eK!F&JH`d3
zTd28$2QCm)Jm2T0VBEzf;%!(Xi{L`e9qbBV@|AT0rBk>T${d#B;7x03?kX(IFB4y{
zqZ&tg@dPB$>IX8|UC3hOE;3Wt*J?&wlL_w1-Nu88I+nX<T%x$D1r3S{dH~H`cFY$#
zFeS{~gfsn2(p_-{zheuQu~8`_;VIv?K#tjB%X_g2v5@O#M7UroHl~vd-RnU$?kf^^
zZPfp~iEznv@IboUnUbcfT<o%w0{I6kfCOGGPXnJR)$}X79Zr!n9_X82^SaW2kw3!q
zS1L5_uG|Q)M`l)YKsGf<EpS`mK3T}4Dd{~Mpc%8TWZi0X%^gLo5N0P(xw$HHM?_d2
zWVN{l7L0)9%qR9Hx4R`#BX_>>7EGSyL%T7BiBZ084ctbUhDc{^2i>(vq1r6#(#jX~
zZUnCRaINPSLBqEKQU*J|Gq+&RhYDHQ()`sBK1)=x5C*QHI#W$excOr6q_uVokL2{;
z^3>eRoW(GkETpRmCWaiC+vT9)8LWQrwhJ|G+t4tPrf20Y4}%&MjbBy3Z-|)0sUFE+
zu=#gJTi}Md5cvIs|8K1MU5y*)G=IbB$EG^drml0BkN(vy?*9og%-KFd%K`OBX5!R3
z7vSHaSi}MCgBvK8fk4C^;!e4ib%f0MqmwBRFqWL=Fde6+x&9{5|A9`oFBd3|TvP|R
g)<ojm`6?(vO@Ye9`ZVh9={<=Y1%z46x89?F0sL5a{r~^~

literal 0
HcmV?d00001

diff --git a/JodaTimeContrib/i18n/src/java/org/joda/time/contrib/i18n/CLDRTerritoryGenerator.java b/JodaTimeContrib/i18n/src/java/org/joda/time/contrib/i18n/CLDRTerritoryGenerator.java
new file mode 100644
index 000000000..7cf72f6f5
--- /dev/null
+++ b/JodaTimeContrib/i18n/src/java/org/joda/time/contrib/i18n/CLDRTerritoryGenerator.java
@@ -0,0 +1,351 @@
+/*
+ *  Copyright 2006 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.contrib.i18n;
+
+import java.io.BufferedOutputStream;
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.ObjectOutputStream;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.StringTokenizer;
+
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.parsers.ParserConfigurationException;
+
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+import org.w3c.dom.NodeList;
+import org.xml.sax.SAXException;
+import org.xml.sax.SAXParseException;
+
+/**
+ * Generates a file that stores the territory data.
+ */
+public class CLDRTerritoryGenerator {
+
+    Map firstDOWMap = new HashMap();
+    Map weekendStartMap = new HashMap();
+    Map weekendEndMap = new HashMap();
+    Map zoneMap = new HashMap();
+
+    //-----------------------------------------------------------------------
+    /**
+     * Output the CLDR data to a file.
+     *
+     * @param args
+     */
+    public static void main(String[] args) {
+        try {
+            CLDRTerritoryGenerator gen = new CLDRTerritoryGenerator();
+            gen.readXML();
+            gen.writeFile();
+            
+        } catch (RuntimeException ex) {
+            System.err.println();
+            ex.printStackTrace();
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Writes the data to a file.
+     */
+    private void writeFile() {
+        File file = new File("C:/joda/time-i18n/src/java/org/joda/time/contrib/i18n/CLDRTerritoryData.dat");
+        ObjectOutputStream oos = null;
+        try {
+            oos = new ObjectOutputStream(
+                    new BufferedOutputStream(new FileOutputStream(file)));
+            oos.writeByte(1);  // version
+            writeData(oos);
+            oos.writeUTF("");  // end of file id
+            oos.close();
+            
+        } catch (IOException ex) {
+            ex.printStackTrace();
+            if (oos != null) {
+                try {
+                    oos.close();
+                } catch (IOException ex2) {
+                    // ignore
+                }
+            }
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Writes the data to the stream.
+     */
+    private void writeData(ObjectOutputStream oos) throws IOException {
+        Set territories = zoneMap.keySet();
+        for (Iterator it = territories.iterator(); it.hasNext(); ) {
+            String territory = (String) it.next();
+            if ("001".equals(territory)) {
+                continue;
+            }
+            List zones = (List) zoneMap.get(territory);
+            if (zones.size() > 1) {
+                pickPrimaryZone(territory, zones);
+            }
+            Integer firstDay = (Integer) firstDOWMap.get(territory);
+            if (firstDay == null) {
+                firstDay = (Integer) firstDOWMap.get("001");
+            }
+            Integer weekendStart = (Integer) weekendStartMap.get(territory);
+            if (weekendStart == null) {
+                weekendStart = (Integer) weekendStartMap.get("001");
+            }
+            Integer weekendEnd = (Integer) weekendEndMap.get(territory);
+            if (weekendEnd == null) {
+                weekendEnd = (Integer) weekendEndMap.get("001");
+            }
+            
+            int weStart = weekendStart.intValue();
+            int weEnd = weekendEnd.intValue();
+            int busStart = (weEnd == 7 ? 1 : weEnd + 1);
+            int busEnd = (weStart == 1 ? 7 : weStart - 1);
+            
+            oos.writeUTF(territory);
+            oos.writeByte(zones.size());
+            for (int i = 0; i < zones.size(); i++) {
+                oos.writeUTF((String) zones.get(i));
+            }
+            oos.writeByte(firstDay.intValue());
+            oos.writeByte(busStart);
+            oos.writeByte(busEnd);
+            oos.writeByte(weStart);
+            oos.writeByte(weEnd);
+            System.out.print(territory + " ");
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Reads the CLDR XML data.
+     */
+    private void readXML() {
+        File file = new File("C:/joda/time-i18n/src/java/org/joda/time/contrib/i18n/supplementalData.xml");
+        try {
+            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
+            DocumentBuilder builder = factory.newDocumentBuilder();
+            Document document = builder.parse(file);
+            Element rootEl = (Element) document.getElementsByTagName("supplementalData").item(0);
+            
+            parseFirstDay(rootEl);
+            parseWeekendStart(rootEl);
+            parseWeekendEnd(rootEl);
+            parseZoneFormatting(rootEl);
+            
+        } catch (SAXParseException ex) {
+            ex.printStackTrace();
+        } catch (SAXException ex) {
+            ex.printStackTrace();
+        } catch (IOException ex) {
+            ex.printStackTrace();
+        } catch (ParserConfigurationException ex) {
+            ex.printStackTrace();
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Parses the firstDay elements.
+     *
+     * @param rootEl  the root element
+     */
+    private void parseFirstDay(Element rootEl) {
+        Element weekDataEl = (Element) rootEl.getElementsByTagName("weekData").item(0);
+        NodeList els = weekDataEl.getElementsByTagName("firstDay");
+        for (int i = 0; i < els.getLength(); i++) {
+            Element el = (Element) els.item(i);
+            if ("true".equals(el.getAttribute("draft"))) {
+                continue;
+            }
+            String dayStr = el.getAttribute("day");
+            Integer dow = convertDOW(dayStr);
+            String territoriesStr = el.getAttribute("territories");
+            StringTokenizer tkn = new StringTokenizer(territoriesStr);
+            while (tkn.hasMoreTokens()) {
+                String territory = tkn.nextToken();
+                firstDOWMap.put(territory, dow);
+            }
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Parses the weekendStart elements.
+     *
+     * @param rootEl  the root element
+     */
+    private void parseWeekendStart(Element rootEl) {
+        Element weekDataEl = (Element) rootEl.getElementsByTagName("weekData").item(0);
+        NodeList els = weekDataEl.getElementsByTagName("weekendStart");
+        for (int i = 0; i < els.getLength(); i++) {
+            Element el = (Element) els.item(i);
+            if ("true".equals(el.getAttribute("draft"))) {
+                continue;
+            }
+            String dayStr = el.getAttribute("day");
+            Integer dow = convertDOW(dayStr);
+            String territoriesStr = el.getAttribute("territories");
+            StringTokenizer tkn = new StringTokenizer(territoriesStr);
+            while (tkn.hasMoreTokens()) {
+                String territory = tkn.nextToken();
+                weekendStartMap.put(territory, dow);
+            }
+        }
+        // fix CLDR
+        weekendStartMap.put("AF", new Integer(4));
+        weekendStartMap.put("IR", new Integer(4));
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Parses the weekendEnd elements.
+     *
+     * @param rootEl  the root element
+     */
+    private void parseWeekendEnd(Element rootEl) {
+        Element weekDataEl = (Element) rootEl.getElementsByTagName("weekData").item(0);
+        NodeList els = weekDataEl.getElementsByTagName("weekendEnd");
+        for (int i = 0; i < els.getLength(); i++) {
+            Element el = (Element) els.item(i);
+            if ("true".equals(el.getAttribute("draft"))) {
+                continue;
+            }
+            String dayStr = el.getAttribute("day");
+            Integer dow = convertDOW(dayStr);
+            String territoriesStr = el.getAttribute("territories");
+            StringTokenizer tkn = new StringTokenizer(territoriesStr);
+            while (tkn.hasMoreTokens()) {
+                String territory = tkn.nextToken();
+                weekendEndMap.put(territory, dow);
+            }
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Parses the zoneFormatting element.
+     *
+     * @param rootEl  the root element
+     */
+    private void parseZoneFormatting(Element rootEl) {
+        Element weekDataEl = (Element) rootEl.getElementsByTagName("zoneFormatting").item(0);
+        NodeList els = weekDataEl.getElementsByTagName("zoneItem");
+        for (int i = 0; i < els.getLength(); i++) {
+            Element el = (Element) els.item(i);
+            if ("true".equals(el.getAttribute("draft"))) {
+                continue;
+            }
+            String zoneStr = el.getAttribute("type");
+            String territory = el.getAttribute("territory");
+            List list = (List) zoneMap.get(territory);
+            if (list == null) {
+                list = new ArrayList();
+                zoneMap.put(territory, list);
+            }
+            list.add(zoneStr);
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Converts a day string to a day of week value.
+     *
+     * @param dayStr  the day string, such as 'sat'
+     * @return the dow
+     */
+    private Integer convertDOW(String dayStr) {
+        Integer dowValue = (Integer) CLDR_DAYS.get(dayStr);
+        if (dowValue == null) {
+            throw new IllegalStateException("Unknown day of week: " + dayStr);
+        }
+        return dowValue;
+    }
+
+    /** The CLDR day of week values. */
+    private static final Map CLDR_DAYS = new HashMap();
+    static {
+        CLDR_DAYS.put("mon", new Integer(1));
+        CLDR_DAYS.put("tue", new Integer(2));
+        CLDR_DAYS.put("wed", new Integer(3));
+        CLDR_DAYS.put("thu", new Integer(4));
+        CLDR_DAYS.put("fri", new Integer(5));
+        CLDR_DAYS.put("sat", new Integer(6));
+        CLDR_DAYS.put("sun", new Integer(7));
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Picks the primary zone
+     * @param zones  the list of zones
+     */
+    private void pickPrimaryZone(String territory, List zones) {
+        String primary = (String) PRIMARY_ZONES.get(territory);
+        if (primary == null) {
+            throw new IllegalStateException("Unknown primary zone for territory: " + territory + ": " + zones);
+        }
+        if (zones.contains(primary) == false) {
+            throw new IllegalStateException("Invalid primary zone for territory: " + territory + ": " + primary);
+        }
+        zones.remove(primary);
+        zones.add(0, primary);
+    }
+
+    /** The primary zone selections. */
+    private static final Map PRIMARY_ZONES = new HashMap();
+    static {
+        PRIMARY_ZONES.put("US", "America/New_York");
+        PRIMARY_ZONES.put("MN", "Asia/Ulaanbaatar");
+        PRIMARY_ZONES.put("CD", "Africa/Kinshasa");
+        PRIMARY_ZONES.put("EC", "America/Guayaquil");
+        PRIMARY_ZONES.put("KZ", "Asia/Almaty");
+        PRIMARY_ZONES.put("GL", "America/Godthab");
+        PRIMARY_ZONES.put("CN", "Asia/Shanghai");
+        PRIMARY_ZONES.put("UA", "Europe/Kiev");
+        PRIMARY_ZONES.put("CL", "America/Santiago");
+        PRIMARY_ZONES.put("ID", "Asia/Jakarta");
+        PRIMARY_ZONES.put("PT", "Europe/Lisbon");
+        PRIMARY_ZONES.put("PF", "Pacific/Tahiti");
+        PRIMARY_ZONES.put("SJ", "Arctic/Longyearbyen");
+        PRIMARY_ZONES.put("KI", "Pacific/Tarawa");
+        PRIMARY_ZONES.put("AQ", "Antarctica/McMurdo");
+        PRIMARY_ZONES.put("AU", "Australia/Sydney");
+        PRIMARY_ZONES.put("MH", "Pacific/Majuro");
+        PRIMARY_ZONES.put("UZ", "Asia/Tashkent");
+        PRIMARY_ZONES.put("RU", "Europe/Moscow");
+        PRIMARY_ZONES.put("MY", "Asia/Kuala_Lumpur");
+        PRIMARY_ZONES.put("MX", "America/Mexico_City");
+        PRIMARY_ZONES.put("BR", "America/Sao_Paulo");
+        PRIMARY_ZONES.put("ES", "Europe/Madrid");
+        PRIMARY_ZONES.put("UM", "Pacific/Midway");
+        PRIMARY_ZONES.put("CA", "America/Toronto");
+        PRIMARY_ZONES.put("FM", "Pacific/Ponape");
+        PRIMARY_ZONES.put("AR", "America/Buenos_Aires");
+        PRIMARY_ZONES.put("NZ", "Pacific/Auckland");
+    }
+
+}
diff --git a/JodaTimeContrib/i18n/src/java/org/joda/time/contrib/i18n/Territory.java b/JodaTimeContrib/i18n/src/java/org/joda/time/contrib/i18n/Territory.java
new file mode 100644
index 000000000..b70f162de
--- /dev/null
+++ b/JodaTimeContrib/i18n/src/java/org/joda/time/contrib/i18n/Territory.java
@@ -0,0 +1,187 @@
+/*
+ *  Copyright 2006 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.contrib.i18n;
+
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
+
+import org.joda.time.DateTimeZone;
+
+/**
+ * Provides time data for a specific territory, typically a country.
+ * <p>
+ * Many pieces of data used in dates and times varies by territory.
+ * This class provides access to that data.
+ */
+public abstract class Territory {
+
+//    /** An empty chronology array. */
+//    private static final Chronology[] EMPTY_CHRONOLOGY_ARRAY = new Chronology[0];
+    /** A cache of territories. */
+    private static final Map cTerritoryMap = Collections.synchronizedMap(new HashMap());
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets a territory instance for the specified id.
+     * <p>
+     * The territory id must be one of those returned by getAvailableIDs.
+     *
+     * @param id  the ID of the territory, not null
+     * @return the territory object for the ID
+     * @throws IllegalArgumentException if the ID is not recognised
+     */
+    public static Territory forID(String id) {
+        if (id != null && id.length() == 2) {
+            Territory t = (Territory) cTerritoryMap.get(id);
+            if (t == null) {
+                t = new CLDRTerritory(id);
+                cTerritoryMap.put(id, t);
+            }
+            return t;
+        }
+        throw new IllegalArgumentException("The territory id is not recognised: " + id);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Constructor.
+     *
+     * @param id  the territory id, not null
+     */
+    protected Territory() {
+        super();
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the territory id.
+     *
+     * @return the territory id, never null
+     */
+    public abstract String getID();
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the time zones applicable for the territory.
+     *
+     * @return the array of zones, never null
+     */
+	public abstract DateTimeZone[] getZones();
+
+    /**
+     * Gets the time zone for the territory, selecting the zone of the most
+     * important city (the capital) if there are multiple zones.
+     *
+     * @return the zone that best represents the territory, null if unknown
+     */
+    public DateTimeZone getZone() {
+        DateTimeZone[] zones = getZones();
+        if (zones.length == 0) {
+            return null;
+        }
+        return zones[0];
+    }
+
+//    //-----------------------------------------------------------------------
+//    /**
+//     * Gets the altenate non-ISO chronologies used in the territory.
+//     * For example, countries in the middle east would include
+//     * IslamicChronology in the result.
+//     *
+//     * @return the non-ISO chronologies, empty array if none
+//     */
+//    public Chronology[] getChronologies() {
+//        return EMPTY_CHRONOLOGY_ARRAY;
+//    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the first day of the week.
+     * The value is expressed using ISO values (1=Mon,7=Sun).
+     *
+     * @return the first day of the week
+     */
+    public abstract int getFirstDayOfWeek();
+
+    /**
+     * Gets the day of week that the business week starts.
+     * The value is expressed using ISO values (1=Mon,7=Sun).
+     *
+     * @return the day of week that the business week starts
+     */
+    public abstract int getBusinessWeekStart();
+
+    /**
+     * Gets the day of week that the business week ends.
+     * The value is expressed using ISO values (1=Mon,7=Sun).
+     *
+     * @return the day of week that the business week ends
+     */
+    public abstract int getBusinessWeekEnd();
+
+    /**
+     * Gets the day of week that the weekend starts.
+     * The value is expressed using ISO values (1=Mon,7=Sun).
+     *
+     * @return the day of week that the weekend starts
+     */
+    public abstract int getWeekendStart();
+
+    /**
+     * Gets the day of week that the weekend ends.
+     * The value is expressed using ISO values (1=Mon,7=Sun).
+     *
+     * @return the day of week that the weekend ends
+     */
+    public abstract int getWeekendEnd();
+
+    //-----------------------------------------------------------------------
+    /**
+     * Is this territory equal (by id and class) to another.
+     *
+     * @param other  the other object to compare to
+     * @return trur if equal
+     */
+    public boolean equals(Object other) {
+        if (other == this) {
+            return true;
+        }
+        if (other.getClass() != getClass()) {
+            return false;
+        }
+        return ((Territory) other).getID().equals(getID());
+    }
+
+    /**
+     * Gets a suitable hashcode for this territory.
+     *
+     * @return a hashcode
+     */
+    public int hashCode() {
+        return 19 * getClass().hashCode() + getID().hashCode();
+    }
+
+    /**
+     * Outputs a string vesion of the territory.
+     *
+     * @return string
+     */
+    public String toString() {
+        return "Territory[" + getID() + "]";
+    }
+
+}
diff --git a/JodaTimeContrib/i18n/src/java/org/joda/time/contrib/i18n/supplementalData.xml b/JodaTimeContrib/i18n/src/java/org/joda/time/contrib/i18n/supplementalData.xml
new file mode 100644
index 000000000..fa60d6edb
--- /dev/null
+++ b/JodaTimeContrib/i18n/src/java/org/joda/time/contrib/i18n/supplementalData.xml
@@ -0,0 +1,1847 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<!-- DOCTYPE supplementalData SYSTEM "http://www.unicode.org/cldr/dtd/1.4/ldmlSupplemental.dtd"-->
+<supplementalData version="1.4">
+	<version number="$Revision: 1.74 $"/>
+	<generation date="$Date: 2006/06/29 18:45:11 $"/>
+    <currencyData>
+        <fractions>
+            <info iso4217="ADP" digits="0" rounding="0"/>
+            <info iso4217="BHD" digits="3" rounding="0"/>
+            <info iso4217="BIF" digits="0" rounding="0"/>
+            <info iso4217="BYR" digits="0" rounding="0"/>
+            <info iso4217="CHF" digits="2" rounding="5"/>
+            <info iso4217="CLF" digits="0" rounding="0"/>
+            <info iso4217="CLP" digits="0" rounding="0"/>
+            <info iso4217="DEFAULT" digits="2" rounding="0"/>
+            <info iso4217="DJF" digits="0" rounding="0"/>
+            <info iso4217="ESP" digits="0" rounding="0"/>
+            <info iso4217="GNF" digits="0" rounding="0"/>
+            <info iso4217="IQD" digits="3" rounding="0"/>
+            <info iso4217="ITL" digits="0" rounding="0"/>
+            <info iso4217="JOD" digits="3" rounding="0"/>
+            <info iso4217="JPY" digits="0" rounding="0"/>
+            <info iso4217="KMF" digits="0" rounding="0"/>
+            <info iso4217="KRW" digits="0" rounding="0"/>
+            <info iso4217="KWD" digits="3" rounding="0"/>
+            <info iso4217="LUF" digits="0" rounding="0"/>
+            <info iso4217="LYD" digits="3" rounding="0"/>
+            <info iso4217="MGA" digits="0" rounding="0"/><!-- Is this right? -->
+            <info iso4217="MGF" digits="0" rounding="0"/>
+            <info iso4217="OMR" digits="3" rounding="0"/>
+            <info iso4217="PYG" digits="0" rounding="0"/>
+            <info iso4217="RWF" digits="0" rounding="0"/>
+            <info iso4217="TND" digits="3" rounding="0"/>
+            <info iso4217="TRL" digits="0" rounding="0"/>
+            <info iso4217="VUV" digits="0" rounding="0"/>
+            <info iso4217="XAF" digits="0" rounding="0"/>
+            <info iso4217="XOF" digits="0" rounding="0"/>
+            <info iso4217="XPF" digits="0" rounding="0"/>
+        </fractions>
+<!--
+Note: When reading these dates, you should read them as inclusive date ranges.
+The date ranges are like date ranges that you see on tomb stones,
+but some dates are approximate. Some date ranges overlap due to
+revolts, invasions, new constitutions, and slow planned adoption of new currency.
+The length of time for these change overs vary widely. 
+Sometimes, hyperinflation will cause more than one currency to be in effect
+in one year. Dates without a "to" attribute mean that the currency is still
+in use.
+
+Dates try to use ISO-8601 style dates, and be accurate as possible.
+They are usually in one of the following formats.
+yyyy-MM-dd
+yyyy-MM
+yyyy
+
+It is also worth noting this as a part of the history of ISO-4217. This
+should be kept in mind in case anyone is claiming that an ISO code existed
+before 1978 (source: www.unece.org):
+... the International Organization for Standardization (ISO) decided in 1973 to
+develop a code for the representation of currencies and funds for use in any
+application of trade, commerce or banking. ... At its seventeenth session
+(February 1978) the Group of Experts agreed that the three-letter alphabetic
+codes for International Standard ISO 4217, "Codes for the representation of
+currencies and funds", would be suitable for use in international trade.
+
+Most of this list was derived from the following sources: 
+http://www.iso.org/iso/en/prods-services/popstds/currencycodeslist.html
+http://www.globalfindata.com/gh/index.html
+http://europa.eu.int/comm/translation/currencies/entable1.htm
+http://europa.eu.int/comm/budget/inforeuro/index.cfm?fuseaction=countries&Language=en
+http://www.unece.org/cefact/recommendations/rec09/rec09_ecetrd203.pdf
+The printed version of ISO-4217:2001
+-->
+        <region iso3166="AD">
+            <currency iso4217="EUR" from="1999-01-01"/>
+            <currency iso4217="ESP" from="1873" to="2002-02-28"/>
+            <currency iso4217="FRF" from="1960-01-01" to="2002-02-17"/>
+            <currency iso4217="ADP" from="1936" to="2001-12-31"/><!-- End date from europa.eu.int. -->
+            <!-- currency iso4217="ADD" from="1873" to="2002-02-28"/ --><!-- Not listed in the 2001 list -->
+        </region>
+        <region iso3166="AE">
+            <currency iso4217="AED" from="1973-05-19"/>
+        </region>
+        <region iso3166="AF">
+            <currency iso4217="AFN" from="2002-10-07"/>
+            <currency iso4217="AFA" from="1927-03-14" to="2002-12-31"/>
+            <!-- Other currencies sort of existed under different Afghan governments before 2003,
+                 but they weren't registered with ISO-4217. -->
+        </region>
+        <region iso3166="AG">
+            <currency iso4217="XCD" from="1965-10-06"/>
+        </region>
+        <region iso3166="AI">
+            <currency iso4217="XCD" from="1965-10-06"/>
+        </region>
+        <region iso3166="AL">
+            <currency iso4217="ALL" from="1965-08-16"/>
+        </region>
+        <region iso3166="AM">
+            <currency iso4217="AMD" from="1993-11-22"/>
+            <currency iso4217="RUR" from="1991-12-25" to="1993-11-22"/>
+            <currency iso4217="SUR" from="1961-01-01" to="1991-12-25"/>
+        </region>
+        <region iso3166="AN">
+            <currency iso4217="ANG" from="1940-05-10"/>
+        </region>
+        <region iso3166="AO">
+            <currency iso4217="AOA" from="1999-12-13"/>
+            <currency iso4217="AOR" from="1995-07-01" to="2000-02"/>
+            <currency iso4217="AON" from="1990-09-25" to="2000-02"/>
+            <currency iso4217="AOK" from="1977-01-08" to="1991-03"/>
+        </region>
+        <region iso3166="AQ">
+        <currency iso4217="XXX"/>
+            <!-- This is Antarctica. It has no currency -->
+        </region>
+        <region iso3166="AR">
+            <currency iso4217="ARS" from="1992-01-01"/>
+            <currency iso4217="ARA" from="1985-06-14" to="1992-01-01"/>
+            <currency iso4217="ARP" from="1983-06-01" to="1985-06-14"/>
+        </region>
+        <region iso3166="AS">
+            <currency iso4217="USD" from="1904-07-16"/>
+        </region>
+        <region iso3166="AT">
+            <currency iso4217="EUR" from="1999-01-01"/>
+            <currency iso4217="ATS" from="1947-12-04" to="2002-02-28"/>
+        </region>
+        <region iso3166="AU">
+            <currency iso4217="AUD" from="1966-02-14"/>
+        </region>
+        <region iso3166="AW">
+            <currency iso4217="AWG" from="1986-01-01"/>
+            <currency iso4217="ANG" from="1940-05-10" to="1986-01-01"/>
+        </region>
+        <region iso3166="AX"><!-- An autonomous and demilitarized province/islands of Finland -->
+            <currency iso4217="EUR" from="1999-01-01"/>
+        </region>
+        <region iso3166="AZ">
+            <currency iso4217="AZN" from="2006-01-01"/>
+            <currency iso4217="AZM" from="1993-11-22" to="2006-12-31"/>
+            <currency iso4217="RUR" from="1991-12-25" to="1994-01-01"/>
+            <currency iso4217="SUR" from="1961-01-01" to="1991-12-25"/>
+        </region>
+        <region iso3166="BA">
+            <currency iso4217="BAM" from="1995-01-01"/>
+            <!-- currency iso4217="BAN" from="1994-08-15" to="1997-07"/ --><!-- Not listed in the 2001 list -->
+            <currency iso4217="BAD" from="1992-07-01" to="1997-07"/>
+            <!-- currency iso4217="YUR" from="1992-07-01" to="1993-10-01"/ --><!-- Not listed in the 2001 list -->
+            <currency iso4217="YUN" from="1990-01-01" to="1992-07-01"/>
+            <currency iso4217="YUD" from="1966-01-01" to="1990-01-01"/>
+        </region>
+        <region iso3166="BB">
+            <currency iso4217="BBD" from="1973-12-03"/>
+            <currency iso4217="XCD" from="1965-10-06" to="1973-12-03"/>
+        </region>
+        <region iso3166="BD">
+            <currency iso4217="BDT" from="1972-01-01"/>
+            <currency iso4217="PKR" from="1948-04-01" to="1972-01-01"/>
+            <currency iso4217="INR" from="1835-08-17" to="1948-04-01"/>
+        </region>
+        <region iso3166="BE">
+            <currency iso4217="EUR" from="1999-01-01"/>
+            <currency iso4217="BEF" from="1831-02-07" to="2002-02-28"/>
+            <currency iso4217="NLG" from="1816-12-15" to="1831-02-07"/>
+        </region>
+        <region iso3166="BF">
+            <currency iso4217="XOF" from="1984-08-04"/>
+        </region>
+        <region iso3166="BG">
+            <currency iso4217="BGN" from="1999-07-05"/>
+            <currency iso4217="BGL" from="1962-01-01" to="1999-07-05"/>
+        </region>
+        <region iso3166="BH">
+            <currency iso4217="BHD" from="1965-10-16"/>
+        </region>
+        <region iso3166="BI">
+            <currency iso4217="BIF" from="1964-05-19"/>
+        </region>
+        <region iso3166="BJ">
+            <currency iso4217="XOF" from="1975-11-30"/>
+        </region>
+        <region iso3166="BM">
+            <currency iso4217="BMD" from="1970-02-06"/>
+        </region>
+        <region iso3166="BN">
+            <currency iso4217="BND" from="1967-06-12"/>
+            <currency iso4217="MYR" from="1963-09-16" to="1967-06-12"/>
+        </region>
+        <region iso3166="BO">
+            <currency iso4217="BOB" from="1987-01-01"/>
+            <currency iso4217="BOP" from="1963-01-01" to="1986-12-31"/>
+            <!-- currency iso4217="BOL" from="1863-06-23" to="1962-12-31"/ --><!-- Not listed in the 2001 list -->
+        </region>
+        <region iso3166="BR">
+            <currency iso4217="BRL" from="1994-07-01"/>
+            <currency iso4217="BRR" from="1993-08-01" to="1994-07-01"/>
+            <currency iso4217="BRE" from="1990-03-16" to="1993-08-01"/>
+            <currency iso4217="BRN" from="1989-01-15" to="1990-03-16"/>
+            <currency iso4217="BRC" from="1986-02-28" to="1989-01-15"/>
+            <!-- currency iso4217="BRZ" from="1942-11-01" to="1987-02-13"/ --><!-- Not listed in the 2001 list -->
+            <currency iso4217="BRB" from="1967-02-13" to="1986-02-28"/>
+        </region>
+        <region iso3166="BS">
+            <currency iso4217="BSD" from="1966-05-25"/>
+        </region>
+        <region iso3166="BT">
+            <currency iso4217="INR" from="1907"/>
+            <currency iso4217="BTN" from="1974-04-16"/>
+        </region>
+        <!-- Burma (BU) was renamed to Myanmar (MM). Look at "MM" for history. -->
+        <region iso3166="BV"><!-- uninhabited territory of Norway -->
+            <currency iso4217="NOK" from="1905-06-07"/>
+        </region>
+        <region iso3166="BW">
+            <currency iso4217="BWP" from="1976-08-23"/>
+            <currency iso4217="ZAR" from="1961-02-14" to="1976-08-23"/>
+        </region>
+        <region iso3166="BY">
+            <currency iso4217="BYR" from="2000-01-01"/>
+            <currency iso4217="BYB" from="1994-08" to="2000-12-31"/><!-- This was a valid currency according to eu.int -->
+            <currency iso4217="RUR" from="1991-12-25" to="1994-11-08"/>
+            <!-- currency iso4217="BYL" from="1992-09-25" to="1994-08"/--><!-- Validity is unknown -->
+            <currency iso4217="SUR" from="1961-01-01" to="1991-12-25"/>
+        </region>
+        <region iso3166="BZ">
+            <currency iso4217="BZD" from="1974-01-01"/>
+        </region>
+        <region iso3166="CA">
+            <currency iso4217="CAD" from="1858-01-01"/>
+        </region>
+        <region iso3166="CC">
+            <currency iso4217="AUD" from="1966-02-14"/>
+        </region>
+        <region iso3166="CD">
+            <currency iso4217="CDF" from="1998-07"/>
+            <!-- Zaire (ZR) was renamed to Democratic Republic of Congo (CD) -->
+            <currency iso4217="ZRN" from="1993-11-01" to="1998-07"/>
+            <currency iso4217="ZRZ" from="1971-10-27" to="1993-11-01"/>
+        </region>
+        <region iso3166="CF">
+            <currency iso4217="XAF" from="1993-01-01"/>
+            <!-- currency iso4217="CFF" from="1973-04-01" to="1992-12-31"/ --><!-- Validity is unknown -->
+        </region>
+        <region iso3166="CG">
+            <currency iso4217="XAF" from="1993"/>
+        </region>
+        <region iso3166="CH">
+            <currency iso4217="CHF" from="1799-03-17"/>
+        </region>
+        <region iso3166="CI">
+            <currency iso4217="XOF" from="1958-12-04"/>
+        </region>
+        <region iso3166="CK">
+            <currency iso4217="NZD" from="1967-7-10"/>
+        </region>
+        <region iso3166="CL">
+            <currency iso4217="CLP" from="1975-09-29"/>
+        </region>
+        <region iso3166="CM">
+            <currency iso4217="XAF" from="1973-04-01"/>
+        </region>
+        <region iso3166="CN">
+            <currency iso4217="CNY" from="1953-03-01"/>
+        </region>
+        <region iso3166="CO">
+            <currency iso4217="COP" from="1905"/>
+        </region>
+        <region iso3166="CR">
+            <currency iso4217="CRC" from="1896-10-26"/>
+        </region>
+        <region iso3166="CS">
+            <currency iso4217="EUR" from="2003-02-04"/><!-- Montenegro -->
+            <currency iso4217="CSD" from="2002-05-15"/><!-- Serbia -->
+            <currency iso4217="YUM" from="1994-01-24" to="2002-05-15"/><!-- Yugoslavian history. YU was renamed to CS. -->
+            <!-- currency iso4217="CSK" from="1953-06-01" to="1993-03"/ --><!-- Czechoslovakia (totally separate region with conflicting ISO code) -->
+        </region>
+        <region iso3166="CU">
+            <currency iso4217="CUP" from="1859-01-01"/>
+            <!-- currency iso4217="USD" from="1994"/ --><!-- Unofficially used -->
+            <currency iso4217="USD" from="1899" to="1959"/>
+        </region>
+        <region iso3166="CV">
+            <currency iso4217="CVE" from="1914-01-01"/>
+            <currency iso4217="PTE" from="1911-05-22" to="1975-07-05"/>
+        </region>
+        <region iso3166="CX">
+            <currency iso4217="AUD" from="1966-02-14"/>
+        </region>
+        <region iso3166="CY">
+            <currency iso4217="CYP" from="1914-09-10"/>
+            <!-- currency iso4217="TRL" from="1975-02-13"/ --><!-- Only part of Northern Cyprus -->
+        </region>
+        <region iso3166="CZ">
+            <currency iso4217="CZK" from="1993-01-01"/>
+            <!-- CS was renamed to CZ -->
+            <currency iso4217="CSK" from="1953-06-01" to="1993-03"/>
+        </region>
+        <!-- East Germany merged with West Germany, and no longer exists as "DD". DDM was an ISO-4217 code. -->
+        <!-- region iso3166="DD">
+            <currency iso4217="DDM" from="1948-07-20" to="1990-10-02"/>
+        </region -->
+        <region iso3166="DE">
+            <currency iso4217="EUR" from="1999-01-01"/>
+            <currency iso4217="DEM" from="1948-06-20" to="2002-02-28"/>
+        </region>
+        <region iso3166="DJ">
+            <currency iso4217="DJF" from="1977-06-27"/>
+        </region>
+        <region iso3166="DK">
+            <currency iso4217="DKK" from="1873-05-27"/>
+        </region>
+        <region iso3166="DM">
+            <currency iso4217="XCD" from="1965-10-06"/>
+        </region>
+        <region iso3166="DO">
+            <currency iso4217="DOP" from="1947-10"/>
+            <currency iso4217="USD" from="1905-06-21" to="1947-10"/>
+        </region>
+        <region iso3166="DZ">
+            <currency iso4217="DZD" from="1964-04-01"/>
+        </region>
+        <region iso3166="EC">
+            <currency iso4217="USD" from="2000-10-02"/>
+            <currency iso4217="ECS" from="1884-04-01" to="2000-10-02"/>
+        </region>
+        <region iso3166="EE">
+            <currency iso4217="EEK" from="1992-06-21"/>
+            <currency iso4217="SUR" from="1961-1-1" to="1992-06-20"/>
+        </region>
+        <region iso3166="EG">
+            <currency iso4217="EGP" from="1885-11-14"/>
+        </region>
+        <region iso3166="EH">
+            <currency iso4217="MAD" from="1976-02-26"/>
+        </region>
+        <region iso3166="ER">
+            <currency iso4217="ERN" from="1997-11-08"/>
+        </region>
+        <region iso3166="ES">
+            <currency iso4217="EUR" from="1999-01-01"/>
+            <currency iso4217="ESP" from="1868-10-19" to="2002-02-28"/>
+        </region>
+        <region iso3166="ET">
+            <currency iso4217="ETB" from="1976-09-15"/>
+        </region>
+        <region iso3166="FI">
+            <currency iso4217="EUR" from="1999-01-01"/>
+            <currency iso4217="FIM" from="1963-01-01" to="2002-02-28"/>
+        </region>
+        <region iso3166="FJ">
+            <currency iso4217="FJD" from="1969-01-13"/>
+        </region>
+        <region iso3166="FK">
+            <currency iso4217="FKP" from="1901"/>
+        </region>
+        <region iso3166="FM">
+            <currency iso4217="USD" from="1944"/>
+            <currency iso4217="JPY" from="1914-10-03" to="1944"/>
+        </region>
+        <region iso3166="FO">
+            <!-- ISO-4217 doesn't have a code for the Faroese krona, but it depends on the DKK currency.  -->
+            <currency iso4217="DKK" from="1948"/>
+        </region>
+        <region iso3166="FR">
+            <currency iso4217="EUR" from="1999-01-01"/>
+            <currency iso4217="FRF" from="1960-01-01" to="2002-02-17"/>
+        </region>
+        <region iso3166="GA">
+            <currency iso4217="XAF" from="1993-01-01"/>
+        </region>
+        <region iso3166="GB">
+            <currency iso4217="GBP" from="1694-07-27"/>
+        </region>
+        <region iso3166="GD">
+            <currency iso4217="XCD" from="1967-02-27"/>
+        </region>
+        <region iso3166="GE">
+            <currency iso4217="GEL" from="1995-09-23"/>
+            <currency iso4217="GEK" from="1993-04-05" to="1995-09-25"/>
+            <currency iso4217="RUR" from="1991-12-25" to="1993-06-11"/>
+            <currency iso4217="SUR" from="1961-01-01" to="1991-12-25"/>
+        </region>
+        <region iso3166="GF">
+            <currency iso4217="EUR" from="1999-01-01"/>
+            <currency iso4217="FRF" from="1960-01-01" to="2002-02-17"/>
+            <!-- currency iso4217="XNF" from="1960-01-01" to="1975-03-31"/ --><!-- Not listed in the 2001 or 2004 list -->
+        </region>
+        <region iso3166="GG">
+            <!-- ISO-4217 doesn't have a code for the Guernsey pound, but it depends on the GBP currency.  -->
+            <currency iso4217="GBP" from="1830"/>
+        </region>
+        <region iso3166="GH">
+            <currency iso4217="GHC" from="1979-03-09"/>
+        </region>
+        <region iso3166="GI">
+            <currency iso4217="GIP" from="1713"/>
+            <!-- currency iso4217="GBP" from="1713"/ --><!-- Not listed in the 2001 or 2004 list -->
+        </region>
+        <region iso3166="GL">
+            <currency iso4217="DKK" from="1873-05-27"/>
+        </region>
+        <region iso3166="GM">
+            <currency iso4217="GMD" from="1971-07-01"/>
+        </region>
+        <region iso3166="GN">
+            <currency iso4217="GNF" from="1986-01-06"/>
+            <currency iso4217="GNS" from="1972-10-02" to="1986-01-06"/>
+        </region>
+        <region iso3166="GP">
+            <currency iso4217="EUR" from="1999"/>
+            <currency iso4217="FRF" from="1960-01-01" to="2002-02-17"/>
+        </region>
+        <region iso3166="GQ">
+            <currency iso4217="XAF" from="1993-01-01"/>
+            <!-- currency iso4217="EQE" to="1989-12"/ --><!-- Deprecated code in ISO-4217:2001. Start date is unknown. -->
+            <currency iso4217="GQE" from="1975-07-07" to="1986-06"/>
+        </region>
+        <region iso3166="GR">
+            <currency iso4217="EUR" from="2001-01-01"/>
+            <currency iso4217="GRD" from="1954-05-01" to="2002-02-28"/>
+        </region>
+        <region iso3166="GS"><!-- UK overseas territory. No indigenous population -->
+            <currency iso4217="GBP" from="1908"/>
+        </region>
+        <region iso3166="GT">
+            <currency iso4217="GTQ" from="1925-05-27"/>
+            <!-- currency iso4217="USD" from="2001-05-01"/ --><!-- Not listed in the 2001 or 2004 list -->
+        </region>
+        <region iso3166="GU">
+            <currency iso4217="USD" from="1944-08-21"/>
+        </region>
+        <region iso3166="GW">
+            <currency iso4217="GWP" from="1976-02-28"/>
+            <currency iso4217="XOF" from="1997-01-01"/>
+            <currency iso4217="GWE" from="1914-01-01" to="1976-02-28"/>
+        </region>
+        <region iso3166="GY">
+            <currency iso4217="GYD" from="1966-05-26"/>
+        </region>
+        <region iso3166="HK">
+            <currency iso4217="HKD" from="1895-02-02"/>
+        </region>
+        <region iso3166="HM"><!-- Uninhabited territory of Australia -->
+            <currency iso4217="AUD" from="1967-02-16"/>
+        </region>
+        <region iso3166="HN">
+            <currency iso4217="HNL" from="1926-04-03"/>
+        </region>
+        <region iso3166="HR">
+            <currency iso4217="HRK" from="1994-05-30"/>
+            <currency iso4217="HRD" from="1991-12-23" to="1995-01"/>
+            <currency iso4217="YUN" from="1990-01-01" to="1991-12-23"/>
+            <currency iso4217="YUD" from="1966-01-01" to="1990-01-01"/>
+        </region>
+        <region iso3166="HT">
+            <currency iso4217="HTG" from="1872-08-26"/>
+            <currency iso4217="USD" from="1915"/><!-- From date is uncertain, but it is listed in the 2001 and 2004 lists. -->
+        </region>
+        <region iso3166="HU">
+            <currency iso4217="HUF" from="1946-07-23"/>
+        </region>
+        <region iso3166="ID">
+            <currency iso4217="IDR" from="1965-12-13"/>
+        </region>
+        <region iso3166="IE">
+            <currency iso4217="EUR" from="1999"/>
+            <currency iso4217="IEP" from="1922" to="2002-02-09"/>
+            <currency iso4217="GBP" from="1800" to="1922"/>
+        </region>
+        <region iso3166="IL">
+            <currency iso4217="ILS" from="1985-09-04"/>
+            <currency iso4217="ILP" from="1948-08-16" to="1980-02-22"/>
+        </region>
+        <region iso3166="IM">
+            <currency iso4217="GBP" from="1840-01-03"/>
+        </region>
+        <region iso3166="IN">
+            <currency iso4217="INR" from="1835-08-17"/>
+        </region>
+        <region iso3166="IO"><!-- UK/US overseas territories. No indigenous population -->
+            <currency iso4217="USD" from="1965-11-08"/>
+            <currency iso4217="GBP" from="1965-11-08"/>
+        </region>
+        <region iso3166="IQ">
+            <currency iso4217="IQD" from="1931-04-19"/>
+            <currency iso4217="EGP" from="1920-11-11" to="1931-04-19"/>
+            <currency iso4217="INR" from="1920-11-11" to="1931-04-19"/>
+        </region>
+        <region iso3166="IR">
+            <currency iso4217="IRR" from="1932-05-13"/>
+        </region>
+        <region iso3166="IS">
+            <currency iso4217="ISK" from="1981-01-01"/>
+            <currency iso4217="DKK" from="1873-05-27" to="1918-12-01"/>
+        </region>
+        <region iso3166="IT">
+            <currency iso4217="EUR" from="1999-01-01"/>
+            <currency iso4217="ITL" from="1862-8-24" to="2002-02-28"/>
+        </region>
+        <region iso3166="JE">
+            <!-- ISO-4217 doesn't have a code for the Jersey pound, but it depends on the GBP currency.  -->
+            <currency iso4217="GBP" from="1837"/>
+        </region>
+        <region iso3166="JM">
+            <currency iso4217="JMD" from="1969-09-08"/>
+        </region>
+        <region iso3166="JO">
+            <currency iso4217="JOD" from="1950-07-01"/>
+        </region>
+        <region iso3166="JP">
+            <currency iso4217="JPY" from="1871-06"/>
+        </region>
+        <region iso3166="KE">
+            <currency iso4217="KES" from="1966-09-14"/>
+        </region>
+        <region iso3166="KG">
+            <currency iso4217="KGS" from="1993-05-10"/>
+            <currency iso4217="RUR" from="1991-12-25" to="1993-05-10"/>
+            <currency iso4217="SUR" from="1961-01-01" to="1991-12-25"/>
+        </region>
+        <region iso3166="KH">
+            <currency iso4217="KHR" from="1980-03-20"/>
+            <!-- 1975-05 to 1978-01 was a moneyless economy -->
+        </region>
+        <region iso3166="KI">
+            <currency iso4217="AUD" from="1966-02-14"/>
+            <!-- currency iso4217="KID" from="1979-07-12"/ --><!-- Not listed in the 2001 or 2004 list -->
+        </region>
+        <region iso3166="KM">
+            <currency iso4217="KMF" from="1975-07-06"/>
+        </region>
+        <region iso3166="KN">
+            <currency iso4217="XCD" from="1965-10-06"/>
+        </region>
+        <region iso3166="KP">
+            <currency iso4217="KPW" from="1959-04-17"/>
+        </region>
+        <region iso3166="KR">
+            <currency iso4217="KRW" from="1962-06-10"/>
+        </region>
+        <region iso3166="KW">
+            <currency iso4217="KWD" from="1961-04-01"/>
+        </region>
+        <region iso3166="KY">
+            <currency iso4217="KYD" from="1971"/>
+            <currency iso4217="JMD" from="1969-09-08" to="1971"/>
+        </region>
+        <region iso3166="KZ">
+            <currency iso4217="KZT" from="1993-11-05"/>
+            <!-- currency iso4217="KZR" from="1993-08" to="1993-11-05"/ --><!-- Not listed in the 2001 list -->
+            <!-- currency iso4217="RUR" from="1991-12-25" to="1993-08"/ -->
+            <!-- currency iso4217="SUR" from="1961-01-01" to="1991-12-25"/ -->
+        </region>
+        <region iso3166="LA">
+            <currency iso4217="LAK" from="1979-12-10"/>
+        </region>
+        <region iso3166="LB">
+            <currency iso4217="LBP" from="1948-02-02"/>
+        </region>
+        <region iso3166="LC">
+            <currency iso4217="XCD" from="1965-10-06"/>
+        </region>
+        <region iso3166="LI">
+            <currency iso4217="CHF" from="1921-02"/>
+        </region>
+        <region iso3166="LK">
+            <currency iso4217="LKR" from="1978-05-22"/>
+        </region>
+        <region iso3166="LR">
+            <currency iso4217="LRD" from="1944-01-01"/>
+        </region>
+        <region iso3166="LS">
+            <currency iso4217="ZAR" from="1961-02-14"/>
+            <currency iso4217="LSL" from="1980-01-22"/>
+            <!-- currency iso4217="LSM" to="1985-05"/ --><!-- Start date is unkown -->
+        </region>
+        <region iso3166="LT">
+            <currency iso4217="LTL" from="1993-06-25"/>
+            <currency iso4217="LTT" from="1992-10-1" to="1993-06-25"/>
+            <currency iso4217="SUR" from="1961-1-1" to="1992-10-01"/>
+        </region>
+        <region iso3166="LU">
+            <currency iso4217="EUR" from="1999-01-01"/>
+            <currency iso4217="LUF" from="1944-09-4" to="2002-02-28"/>
+        </region>
+        <region iso3166="LV">
+            <currency iso4217="LVL" from="1993-06-28"/>
+            <currency iso4217="LVR" from="1992-05-07" to="1993-10-17"/>
+            <currency iso4217="SUR" from="1961-01-01" to="1992-07-20"/>
+        </region>
+        <region iso3166="LY">
+            <currency iso4217="LYD" from="1971-09-01"/>
+        </region>
+        <region iso3166="MA">
+            <currency iso4217="MAD" from="1959-10-17"/>
+        </region>
+        <region iso3166="MC">
+            <currency iso4217="EUR" from="1999-01-01"/>
+            <currency iso4217="FRF" from="1960-01-01" to="2002-02-17"/>
+            <!-- currency iso4217="MCF" from="1960-01-01" to="2002-02-17"/ --><!-- Not listed in the 2001 list -->
+        </region>
+        <region iso3166="MD">
+            <currency iso4217="MDL" from="1993-11-29"/>
+            <!-- currency iso4217="MDC" from="1992-06" to="1993-11-29"/ --><!-- Not listed in the 2001 list -->
+            <!-- currency iso4217="MDR" from="1991-05-23" to="1992-06"/ --><!-- Not listed in the 2001 list -->
+            <!-- currency iso4217="SUR" from="1961-01-01" to="1991-05-23"/ -->
+        </region>
+        <region iso3166="MG">
+            <currency iso4217="MGA" from="1983-11-01"/>
+            <currency iso4217="MGF" from="1963-07-01" to="2004-12-31"/>
+        </region>
+        <region iso3166="MH">
+            <currency iso4217="USD" from="1944"/>
+            <!-- currency iso4217="MHD" from="1979-05-01"/ --><!-- Not listed in the 2001 or 2004 list -->
+        </region>
+        <region iso3166="MK">
+            <currency iso4217="MKD" from="1993-05-20"/>
+            <!-- currency iso4217="MKN" from="1992-04-26" to="1993-05-20"/ --><!-- Not listed in the 2001 list -->
+            <!-- currency iso4217="YUN" from="1990" to="1992-07"/ -->
+            <!-- currency iso4217="YUD" from="1966-01-01" to="1990"/ -->
+        </region>
+        <region iso3166="ML">
+            <currency iso4217="XOF" from="1984-06-01"/>
+            <currency iso4217="MLF" from="1962-07-02" to="1984-08-31"/>
+            <currency iso4217="XOF" from="1958-11-24" to="1962-07-02"/>
+        </region>
+        <region iso3166="MM">
+            <currency iso4217="MMK" from="1989-06-18"/>
+            <!-- currency iso4217="MMX" from="1993"/ --><!-- Not listed in the 2001 or 2004 list -->
+            <currency iso4217="BUK" from="1952-07-01" to="1989-06-18"/>
+        </region>
+        <region iso3166="MN">
+            <currency iso4217="MNT" from="1915-03"/>
+        </region>
+        <region iso3166="MO">
+            <currency iso4217="MOP" from="1901"/>
+        </region>
+        <region iso3166="MP">
+            <currency iso4217="USD" from="1944"/>
+        </region>
+        <region iso3166="MQ">
+            <currency iso4217="EUR" from="1999-01-01"/>
+            <currency iso4217="FRF" from="1960-01-01" to="2002-02-17"/>
+        </region>
+        <region iso3166="MR">
+            <currency iso4217="MRO" from="1973-06-29"/>
+            <currency iso4217="XOF" from="1958-11-28" to="1973-06-29"/>
+        </region>
+        <region iso3166="MS">
+            <currency iso4217="XCD" from="1967-02-27"/>
+        </region>
+        <region iso3166="MT">
+            <currency iso4217="MTL" from="1968-06-07"/>
+            <currency iso4217="MTP" from="1914-08-13" to="1968-06-07"/>
+        </region>
+        <region iso3166="MU">
+            <currency iso4217="MUR" from="1934-04-01"/>
+        </region>
+        <region iso3166="MV">
+            <currency iso4217="MVR" from="1981-07-01"/>
+        </region>
+        <region iso3166="MW">
+            <currency iso4217="MWK" from="1971-02-15"/>
+        </region>
+        <region iso3166="MX">
+            <currency iso4217="MXN" from="1993-01-01"/>
+            <currency iso4217="MXP" from="1822" to="1992-12-31"/>
+        </region>
+        <region iso3166="MY">
+            <currency iso4217="MYR" from="1963-9-16"/>
+        </region>
+        <region iso3166="MZ">
+            <currency iso4217="MZN" from="2006-07-01"/>
+            <currency iso4217="MZM" from="1980-06-16" to="2006-12-31"/>
+            <currency iso4217="MZE" from="1975-06-25" to="1980-06-16"/>
+        </region>
+        <region iso3166="NA">
+            <currency iso4217="ZAR" from="1961-02-14"/>
+            <currency iso4217="NAD" from="1993"/>
+        </region>
+        <region iso3166="NC">
+            <currency iso4217="XPF" from="1985"/>
+        </region>
+        <region iso3166="NE">
+            <currency iso4217="XOF" from="1958-12-19"/>
+        </region>
+        <region iso3166="NF">
+            <currency iso4217="AUD" from="1966-02-14"/>
+        </region>
+        <region iso3166="NG">
+            <currency iso4217="NGN" from="1973-01-01"/>
+        </region>
+        <region iso3166="NI">
+            <currency iso4217="NIO" from="1991-04-30"/>
+            <currency iso4217="NIC" from="1988-02-15" to="1991-04-30"/>
+        </region>
+        <region iso3166="NL">
+            <currency iso4217="EUR" from="1999-1-1"/>
+            <currency iso4217="NLG" from="1813" to="2002-02-28"/>
+        </region>
+        <region iso3166="NO">
+            <currency iso4217="NOK" from="1905-06-07"/>
+            <currency iso4217="SEK" from="1873-5-27" to="1905-06-07"/>
+        </region>
+        <region iso3166="NP">
+            <currency iso4217="NPR" from="1933"/>
+            <currency iso4217="INR" from="1870" to="1966-10-17"/>
+        </region>
+        <region iso3166="NR">
+            <currency iso4217="AUD" from="1966-02-14"/>
+        </region>
+        <region iso3166="NU">
+            <currency iso4217="NZD" from="1967-07-10"/>
+        </region>
+        <region iso3166="NZ">
+            <currency iso4217="NZD" from="1967-07-10"/>
+        </region>
+        <region iso3166="OM">
+            <currency iso4217="OMR" from="1972-11-11"/>
+        </region>
+        <region iso3166="PA">
+            <currency iso4217="PAB" from="1903-11-04"/>
+            <currency iso4217="USD" from="1903-11-18"/>
+        </region>
+        <region iso3166="PE">
+            <currency iso4217="PEN" from="1991-07-01"/>
+            <currency iso4217="PEI" from="1985-02-01" to="1991-07-01"/>
+            <currency iso4217="PES" from="1863-02-14" to="1985-02-01"/>
+        </region>
+        <region iso3166="PF">
+            <currency iso4217="XPF" from="1945-12-26"/>
+        </region>
+        <region iso3166="PG">
+            <currency iso4217="PGK" from="1975-09-16"/>
+            <currency iso4217="AUD" from="1966-02-14" to="1975-09-16"/>
+        </region>
+        <region iso3166="PH">
+            <currency iso4217="PHP" from="1946-07-04"/>
+        </region>
+        <region iso3166="PK">
+            <currency iso4217="PKR" from="1948-04-01"/>
+            <currency iso4217="INR" from="1835-08-17" to="1947-08-15"/>
+        </region>
+        <region iso3166="PL">
+            <currency iso4217="PLN" from="1995-01-01"/>
+            <currency iso4217="PLZ" from="1950-10-28" to="1994-12-31"/>
+        </region>
+        <region iso3166="PM">
+            <currency iso4217="EUR" from="1999-01-01"/>
+            <currency iso4217="FRF" from="1972-12-21" to="2002-02-17"/>
+        </region>
+        <region iso3166="PN">
+            <currency iso4217="NZD" from="1969-01-13"/>
+        </region>
+        <region iso3166="PR">
+            <currency iso4217="USD" from="1898-12-10"/>
+            <currency iso4217="ESP" from="1800" to="1898-12-10"/>
+        </region>
+        <region iso3166="PS">
+            <currency iso4217="JOD" from="1996-02-12"/>
+            <currency iso4217="ILS" from="1985-09-04"/>
+            <currency iso4217="ILP" from="1967-06" to="1980-02-22"/>
+            <currency iso4217="JOD" from="1950-07-01" to="1967-06"/>
+        </region>
+        <region iso3166="PT">
+            <currency iso4217="EUR" from="1999-01-01"/>
+            <currency iso4217="PTE" from="1911-05-22" to="2002-02-28"/>
+        </region>
+        <region iso3166="PW">
+            <currency iso4217="USD" from="1944"/>
+        </region>
+        <region iso3166="PY">
+            <currency iso4217="PYG" from="1943-11"/>
+        </region>
+        <region iso3166="QA">
+            <currency iso4217="QAR" from="1973-05-19"/>
+        </region>
+        <region iso3166="RE">
+            <currency iso4217="EUR" from="1999-01-01"/>
+            <currency iso4217="FRF" from="1975-01-01" to="2002-02-17"/>
+        </region>
+        <region iso3166="RO">
+            <currency iso4217="RON" from="2005-07-01"/>
+            <currency iso4217="ROL" from="1952-01-28" to="2006-12-31"/>
+        </region>
+        <region iso3166="RU">
+            <currency iso4217="RUB" from="1999-01-01"/>
+            <currency iso4217="RUR" from="1991-12-25" to="1998-12-31"/>
+        </region>
+        <region iso3166="RW">
+            <currency iso4217="RWF" from="1964-05-19"/>
+        </region>
+        <region iso3166="SA">
+            <currency iso4217="SAR" from="1952-10-22"/>
+        </region>
+        <region iso3166="SB">
+            <currency iso4217="SBD" from="1977-10-24"/>
+            <currency iso4217="AUD" from="1966-02-14" to="1978-06-30"/>
+        </region>
+        <region iso3166="SC">
+            <currency iso4217="SCR" from="1903-11"/>
+        </region>
+        <region iso3166="SD">
+            <currency iso4217="SDD" from="1992"/>
+            <currency iso4217="SDP" from="1957-04-08" to="1998-06"/>
+            <currency iso4217="EGP" from="1889-01-19" to="1958-01-01"/>
+            <currency iso4217="GBP" from="1889-01-19" to="1958-01-01"/>
+        </region>
+        <region iso3166="SE">
+            <currency iso4217="SEK" from="1873-5-27"/>
+        </region>
+        <region iso3166="SG">
+            <currency iso4217="SGD" from="1967-06-12"/>
+            <currency iso4217="MYR" from="1963-09-16" to="1967-06-12"/>
+        </region>
+        <region iso3166="SH">
+            <currency iso4217="SHP" from="1917-02-15"/>
+            <!-- currency iso4217="GBP" from="1917-02-15"/ --><!-- Not listed in the 2001 or 2004 list -->
+        </region>
+        <region iso3166="SI">
+            <currency iso4217="EUR" from="2007-01-01"/>
+            <currency iso4217="SIT" from="1992-10-07" to="2007-01-14"/>
+        </region>
+        <region iso3166="SJ">
+            <currency iso4217="NOK" from="1905-06-07"/>
+        </region>
+        <region iso3166="SK">
+            <currency iso4217="SKK" from="1992-12-31"/>
+            <currency iso4217="CSK" from="1953-06-01" to="1992-12-31"/>
+        </region>
+        <region iso3166="SL">
+            <currency iso4217="SLL" from="1964-08-04"/>
+            <currency iso4217="GBP" from="1808-11-30" to="1966-02-04"/>
+        </region>
+        <region iso3166="SM">
+            <currency iso4217="EUR" from="1999-01-01"/>
+            <currency iso4217="ITL" from="1865-12-23" to="2001-02-28"/>
+            <!-- currency iso4217="SML" from="1865-12-23" to="2001-02-28"/ --><!-- Not listed in the 2001 or 2004 list -->
+        </region>
+        <region iso3166="SN">
+            <currency iso4217="XOF" from="1959-04-04"/>
+        </region>
+        <region iso3166="SO">
+            <currency iso4217="SOS" from="1960-07-01"/>
+            <!-- currency iso4217="SON" from="1991"/ --><!-- Not listed in the 2001 or 2004 list -->
+        </region>
+        <region iso3166="SR">
+            <currency iso4217="SRD" from="2004-01-01"/>
+            <currency iso4217="SRG" from="1940-05-10" to="2003-12-31"/>
+            <currency iso4217="NLG" from="1815-11-20" to="1940-05-10"/>
+        </region>
+        <region iso3166="ST">
+            <currency iso4217="STD" from="1977-09-08"/>
+        </region>
+        <!-- This is no longer a valid region. It split into RU and several other regions. -->
+        <!-- region iso3166="SU">
+            <currency iso4217="SUR" from="1961-01-01" to="1991-12-25"/>
+        </region -->
+        <region iso3166="SV">
+            <currency iso4217="SVC" from="1919-11-11"/>
+            <currency iso4217="USD" from="2001-01-01"/>
+        </region>
+        <region iso3166="SY">
+            <currency iso4217="SYP" from="1948-01-01"/>
+        </region>
+        <region iso3166="SZ">
+            <currency iso4217="SZL" from="1974-09-06"/>
+            <!-- currency iso4217="ZAR" from="1961-02-14"/ --><!-- Not listed in the 2001 or 2004 list -->
+        </region>
+        <region iso3166="TC">
+            <currency iso4217="USD" from="1969-09-08"/>
+            <!-- currency iso4217="JMD" from="1969-09-08"/ --><!-- Not listed in the 2001 or 2004 list -->
+            <!-- currency iso4217="TCC" from="1969-09-08"/ --><!-- Not listed in the 2001 or 2004 list -->
+        </region>
+        <region iso3166="TD">
+            <currency iso4217="XAF" from="1993-01-01"/>
+        </region>
+        <region iso3166="TF">
+        <!-- Part of the Antarctic claimed by France (whose sovereignty is not recognised 
+        internationally), makes up the French Southern and Antarctic Lands (TAAF) 
+        administered from Saint-Pierre de la Réunion. No indigenous population -->
+            <currency iso4217="EUR" from="1999-01-01"/>
+            <currency iso4217="FRF" from="1959-01-01" to="2002-02-17"/>
+        </region>
+        <region iso3166="TG">
+            <currency iso4217="XOF" from="1958-11-28"/>
+        </region>
+        <region iso3166="TH">
+            <currency iso4217="THB" from="1928-04-15"/>
+        </region>
+        <region iso3166="TJ">
+            <currency iso4217="TJS" from="2000-10-26"/>
+            <currency iso4217="TJR" from="1995-05-10" to="2000-10-25"/>
+        </region>
+        <region iso3166="TK">
+            <currency iso4217="NZD" from="1967-07-10"/>
+        </region>
+        <region iso3166="TL">
+            <currency iso4217="USD" from="1999-10-20"/>
+            <currency iso4217="TPE" from="1959-01-02" to="2002-05-20"/>
+            <currency iso4217="IDR" from="1975-12-07" to="2002-05-20"/>
+        </region>
+        <region iso3166="TM">
+            <currency iso4217="TMM" from="1993-11-01"/>
+            <currency iso4217="RUR" from="1991-12-25" to="1993-11-01"/>
+            <currency iso4217="SUR" from="1961-01-01" to="1991-12-25"/>
+        </region>
+        <region iso3166="TN">
+            <currency iso4217="TND" from="1958-11-01"/>
+        </region>
+        <region iso3166="TO">
+            <currency iso4217="TOP" from="1966-02-14"/>
+        </region>
+        <!-- TP was renamed to TL -->
+        <region iso3166="TR">
+            <currency iso4217="TRY" from="2005-01-01"/>
+            <currency iso4217="TRL" from="1922-11-01" to="2005-12-31"/>
+        </region>
+        <region iso3166="TT">
+            <currency iso4217="TTD" from="1964"/>
+        </region>
+        <region iso3166="TV">
+            <!-- ISO-4217 doesn't have a code for the Tuvaluan dollar, but it depends on the AUD currency.  -->
+            <currency iso4217="AUD" from="1966-02-14"/>
+        </region>
+        <region iso3166="TW">
+            <currency iso4217="TWD" from="1949-06-15"/>
+        </region>
+        <region iso3166="TZ">
+            <currency iso4217="TZS" from="1966-06-14"/>
+        </region>
+        <region iso3166="UA">
+            <currency iso4217="UAH" from="1996-09-02"/>
+            <!-- Period of hyperinflation -->
+            <currency iso4217="UAK" from="1992-11-13" to="1993-10-17"/>
+            <currency iso4217="RUR" from="1991-12-25" to="1992-11-13"/>
+            <currency iso4217="SUR" from="1961-1-1" to="1991-12-25"/>
+        </region>
+        <region iso3166="UG">
+            <currency iso4217="UGX" from="1987-05-15"/>
+            <currency iso4217="UGS" from="1966-08-15" to="1987-05-15"/>
+        </region>
+        <region iso3166="UM">
+            <currency iso4217="USD" from="1944"/>
+        </region>
+        <region iso3166="US">
+            <currency iso4217="USD" from="1792"/>
+        </region>
+        <region iso3166="UY">
+            <currency iso4217="UYU" from="1993-03-01"/>
+            <currency iso4217="UYP" from="1975-07-01" to="1993-03-01"/>
+        </region>
+        <region iso3166="UZ">
+            <currency iso4217="UZS" from="1994-07-01"/>
+        </region>
+        <region iso3166="VA">
+            <currency iso4217="EUR" from="1999-01-01"/>
+            <currency iso4217="ITL" from="1870-10-19" to="2002-02-28"/>
+            <!-- currency iso4217="VAL" from="1929" to="2002-02-28"/ --><!-- Not listed in the 2001 list -->
+        </region>
+        <region iso3166="VC">
+            <currency iso4217="XCD" from="1965-10-06"/>
+        </region>
+        <region iso3166="VE">
+            <currency iso4217="VEB" from="1871-05-11"/>
+        </region>
+        <region iso3166="VG">
+            <currency iso4217="USD" from="1833"/>
+            <!-- currency iso4217="VGD" from="1973"/ --><!-- Not listed in the 2001 or 2004 list -->
+            <currency iso4217="GBP" from="1833" to="1959"/>
+        </region>
+        <region iso3166="VI">
+            <currency iso4217="USD" from="1837"/>
+        </region>
+        <region iso3166="VN">
+            <currency iso4217="VND" from="1985-09-14"/>
+        </region>
+        <region iso3166="VU">
+            <currency iso4217="VUV" from="1981-01-01"/>
+        </region>
+        <region iso3166="WF">
+            <currency iso4217="XPF" from="1961-07-30"/>
+        </region>
+        <region iso3166="WS">
+            <currency iso4217="WST" from="1967-07-10"/>
+        </region>
+        <region iso3166="YE">
+            <currency iso4217="YER" from="1990-05-22"/>
+        </region>
+        <region iso3166="YT">
+            <currency iso4217="EUR" from="1999-01-01"/>
+            <currency iso4217="FRF" from="1976-02-23" to="2002-02-17"/>
+            <currency iso4217="KMF" from="1975-01-01" to="1976-02-23"/>
+        </region>
+        <!-- YU was renamed to CS -->
+        <!-- region iso3166="YU" -->
+            <!-- currency iso4217="YUM" from="1994-01-24" to="2002-05-15"/ -->
+            <!-- Period of hyperinflation -->
+            <!-- currency iso4217="YUG" from="1994-01-01" to="1994-07-22"/ --><!-- Not listed in the 2001 or 2004 list -->
+            <!-- currency iso4217="YUO" from="1993-10-01" to="1993-12-31"/ --><!-- Not listed in the 2001 or 2004 list -->
+            <!-- currency iso4217="YUR" from="1992-07-01" to="1993-10-01"/ --><!-- Not listed in the 2001 or 2004 list -->
+            <!-- currency iso4217="YUN" from="1990-01-01" to="1992-07-24"/ -->
+            <!-- currency iso4217="YUD" from="1966-01-01" to="1990-01-01"/ -->
+        <!-- /region -->
+        <region iso3166="ZA">
+            <currency iso4217="ZAR" from="1961-02-14"/>
+        </region>
+        <region iso3166="ZM">
+            <currency iso4217="ZMK" from="1968-01-16"/>
+        </region>
+        <!-- Zaire (ZR) was renamed to Democratic Republic of Congo (CD). Look at "CD" for history. -->
+        <region iso3166="ZW">
+            <currency iso4217="ZWD" from="1980-04-18"/>
+        </region>
+<!--
+The following are fund codes. They are not really in the form of hard currency.
+They are mainly interesting to certain parts of the financing industry, and average people won't use them.
+-->
+<!--
+BOV	Bolivia Mvdol
+CLF	Unidades de Fomento
+ECV	Unidad de Valor Constante
+MXV	Mexico Unidad de Inversion
+USN	US Dollar (Next day)
+USS	US Dollar (same day)
+ZAL	South African Financial Rand (02/02/1976-02/06/1983, 09/01/1985-3/13/1995)
+-->
+<!-- The following are precious metals -->
+<!--
+XAG	Silver
+XAU	Gold
+XPD	Palladium
+XPT	Platinum
+-->
+<!-- The following are other various codes of limited usage. -->
+<!--
+XBA	European Composite Unit (EURCO)
+XBB	European Monetary Unit (EMU-6)
+XBC	European Unit of Account (EUA-9)
+XBD	European Unit of Account (EUA-17)
+XDR	Special Drawing Rights (International Monetary Fund)
+XEU	European Currency Unit (ECU). EUR should be used instead.
+XFO	France Gold Franc
+XFU	France UIC-Franc
+XRE	RINET Funds Code
+XTS	Code specifically reserved for testing purposes
+XXX	Code for transations where no currency is involved
+-->
+    </currencyData>
+	<territoryContainment> <!-- based on UN data, at http://unstats.un.org/unsd/methods/m49/m49regin.htm -->
+		<group type="001" contains="002 009 019 142 150"/> <!--World -->
+		<group type="011" contains="BF BJ CI CV GH GM GN GW LR ML MR NE NG SH SL SN TG"/> <!--Western Africa -->
+		<group type="013" contains="BZ CR GT HN MX NI PA SV"/> <!--Central America -->
+		<group type="014" contains="BI DJ ER ET KE KM MG MU MW MZ RE RW SC SO TZ UG YT ZM ZW"/> <!--Eastern Africa -->
+		<group type="142" contains="030 035 143 145 034"/> <!--Asia -->
+		<group type="143" contains="TM TJ KG KZ UZ"/> <!-- Central Asia -->
+		<group type="145" contains="AE AM AZ BH CY GE IL IQ JO KW LB OM PS QA SA SY TR YE"/> <!--Western Asia -->
+		<group type="015" contains="DZ EG EH LY MA SD TN"/> <!--Northern Africa -->
+		<group type="150" contains="039 151 154 155"/> <!--Europe -->
+		<group type="151" contains="BG BY CZ HU MD PL RO RU SK UA"/> <!--Eastern Europe -->
+		<group type="154" contains="830 AX DK EE FI FO GB IE IM IS LT LV NO SE SJ"/> <!--Northern Europe -->
+		<group type="830" contains="GG JE"/> <!--Channel Islands -->
+		<group type="155" contains="AT BE CH DE FR LI LU MC NL"/> <!--Western Europe -->
+		<group type="017" contains="AO CD CF CG CM GA GQ ST TD"/> <!--Middle Africa -->
+		<group type="172" contains="AM AZ BY GE KG KZ MD RU TJ TM UA UZ"/> <!-- Commonwealth of Independent States -->
+		<group type="018" contains="BW LS NA SZ ZA"/> <!--Southern Africa -->
+		<group type="019" contains="005 013 021 029"/> <!--Americas -->
+		<group type="002" contains="011 014 015 017 018"/> <!--Africa -->
+		<group type="021" contains="BM CA GL PM US"/> <!--Northern America -->
+		<group type="029" contains="AG AI AN AW BB BS CU DM DO GD GP HT JM KN KY LC MQ MS PR TC TT VC VG VI"/> <!--Caribbean -->
+		<group type="003" contains="013 021 029"/> <!--North America -->
+		<group type="030" contains="CN HK JP KP KR MN MO TW"/> <!--Eastern Asia -->
+		<group type="035" contains="BN ID KH LA MM MY PH SG TH TL VN"/> <!--South-eastern Asia -->
+		<group type="039" contains="AD AL BA ES GI GR HR IT MK MT PT SI SM VA CS"/> <!--Southern Europe -->
+		<group type="419" contains="005 013 029"/> <!--Latin America and the Caribbean -->
+		<group type="005" contains="AR BO BR CL CO EC FK GF GY PE PY SR UY VE"/> <!--South America -->
+		<group type="053" contains="AU NF NZ"/> <!--Australia and New Zealand -->
+		<group type="054" contains="FJ NC PG SB VU"/> <!--Melanesia -->
+		<group type="057" contains="FM GU KI MH MP NR PW"/> <!--Micronesia -->
+		<group type="061" contains="AS CK NU PF PN TK TO TV WF WS"/> <!--Polynesia -->
+		<group type="034" contains="AF BD BT IN IR LK MV NP PK"/> <!--Southern Asia -->
+		<group type="009" contains="053 054 057 061 QO"/> <!--Oceania -->
+		<group type="QO" contains="AQ BV CC CX GS HM IO TF UM"/> <!--Outlying Oceania -->
+		<group type="QU" contains="AT BE CY CZ DE DK EE ES FI FR GB GR HU IE IT LT LU LV MT NL PL PT SE SI SK"/> <!-- European Union -->
+	</territoryContainment>
+	<languageData>
+		<language type="aa" scripts="Latn" territories="DJ ER ET"/> <!--  Reflecting submitted data, cldrbug #1013 -->
+		<language type="ab" scripts="Cyrl" territories="GE" alt="secondary"/>
+		<language type="ab" scripts="Cyrl" territories="TR" alt="secondary"/>
+		<language type="af" scripts="Latn" territories="NA ZA"/>
+		<language type="ak" scripts="Latn" territories="GH"/> <!-- Reflecting submitted data, cldrbug #1013 -->
+		<language type="am" scripts="Ethi" territories="ET"/>
+		<language type="ar" scripts="Arab" territories="AE BH DJ DZ EG EH ER IL IQ JO KM KW LB LY MA MR OM PS QA SA SD SY TD TN YE"/>
+		<language type="ar" scripts="Arab" territories="IR" alt="secondary"/>
+		<language type="as" scripts="Beng" territories="BD IN"/>
+		<language type="ay" scripts="Latn" territories="BO PE"/>
+		<language type="az" scripts="Arab Cyrl Latn" territories="AZ IR"/>
+		<language type="az" scripts="Arab Cyrl Latn" territories="GE TR" alt="secondary"/>
+		<language type="bal" scripts="Arab Latn" territories="AF IR OM" alt="secondary"/>
+		<language type="bal" scripts="Arab Latn" territories="PK"/>
+		<language type="be" scripts="Cyrl" territories="BY"/>
+		<language type="bg" scripts="Cyrl" territories="BG"/>
+		<language type="bn" scripts="Beng" territories="BD IN"/>
+		<language type="bo" scripts="Tibt" territories="CN IN NP" alt="secondary"/>
+		<language type="bs" scripts="Latn" territories="BA"/>
+		<language type="bs" scripts="Latn" territories="HR CS" alt="secondary"/>
+		<language type="byn" scripts="Ethi" territories="ER"/> <!-- Reflecting submitted data, cldrbug #1013 -->
+		<language type="ca" scripts="Latn" territories="AD ES"/>
+		<language type="cch" scripts="Latn" territories="NG"/>
+		<language type="cch" scripts="Latn" territories="NG"/> <!-- Reflecting submitted data, cldrbug #1013 -->
+		<language type="ch" scripts="Latn" territories="GU MP"/>
+		<language type="chr" scripts="Latn Cher" territories="US" alt="secondary"/>
+		<language type="cop" scripts="Copt Arab" territories="EG"/> <!-- Reflecting submitted data, cldrbug #1013 -->
+		<language type="cop" scripts="Copt Arab" territories="US" alt="secondary"/> <!-- Reflecting submitted data, cldrbug #1013 -->
+		<language type="cpe" scripts="Latn" territories="SL"/>
+		<language type="cr" scripts="Cans Latn" territories="CA" alt="secondary"/>
+		<language type="cs" scripts="Latn" territories="CZ"/>
+		<language type="cy" scripts="Latn" territories="GB"/>
+		<language type="da" scripts="Latn" territories="DK GL"/>
+		<language type="de" scripts="Latn" territories="AT BE CH DE LI LU NA"/>
+		<language type="de" scripts="Latn" territories="IT" alt="secondary"/>
+		<language type="dgr" territories="CA" alt="secondary"/>
+		<language type="dv" scripts="Thaa" territories="MV"/>
+		<language type="dz" scripts="Tibt" territories="BT"/>
+		<language type="ee" scripts="Latn" territories="GH TG"/> <!-- Reflecting submitted data, cldrbug #1013 -->
+		<language type="el" scripts="Grek" territories="CY GR"/>
+		<language type="en" scripts="Latn" territories="AG AI AS AU AW BB BM BS BW BZ CA CC CK CM CX DM ER FJ FK FM GB GD GH GI GM GY HK IE IN IO JM KE KI KN KY LC LR LS MH MP MS MT MW NA NF NG NR NU NZ PG PH PK PN PW RW SB SG SH SL SZ TC TK TO TT TZ UG UM US VC VG VI ZA ZM ZW"/>
+		<language type="eo" scripts="Latn" /> <!-- Reflecting submitted data, cldrbug #1013 --> <!-- NO territories -->
+		<language type="eo" scripts="Latn"/>
+		<language type="es" scripts="Latn" territories="AR BO CL CO CR CU DO EC ES GI GQ GT HN MX NI PA PE PR PY SV US UY VE"/>
+		<language type="et" scripts="Latn" territories="EE"/>
+		<language type="eu" scripts="Latn" territories="ES"/>
+		<language type="fa" scripts="Arab" territories="AF IR"/>
+		<language type="fi" scripts="Latn" territories="FI SE"/>
+		<language type="fil" scripts="Latn" territories="PH"/>		
+		<language type="fiu" scripts="Latn" territories="FI SE" alt="secondary"/>
+		<language type="fj" scripts="Latn" territories="FJ"/>
+		<language type="fo" scripts="Latn" territories="FO"/>
+		<language type="fr" scripts="Latn" territories="BE BF BI BJ CA CD CF CG CH CI CM DJ FR GA GF GN GP GQ HT KM LU MC MG ML MQ MR MU NC NE PF PM RE RW SC SN TD TF TG VU WF YT"/>
+		<language type="fr" scripts="Latn" territories="IT US" alt="secondary"/> <!-- Italian: official in Valle d'Aosta, US: official in Louisiana -->
+		<language type="fur" scripts="Latn" territories="IT"/> <!-- Reflecting submitted data, cldrbug #1013 -->
+		<language type="fy" scripts="Latn" territories="DE NL" alt="secondary"/>
+		<language type="ga" scripts="Latn" territories="GB" alt="secondary"/>
+		<language type="ga" scripts="Latn" territories="IE"/>
+		<language type="gaa" scripts="Latn" territories="GH"/> <!-- Reflecting submitted data, cldrbug #1013 -->
+		<language type="gd" scripts="Latn" territories="GB"/>
+		<language type="gez" scripts="Ethi" territories="ER ET"/> <!-- Reflecting submitted data, cldrbug #1013 -->
+		<language type="gl" scripts="Latn" territories="ES"/>
+		<language type="gn" scripts="Latn" territories="AR BO" alt="secondary"/>
+		<language type="gn" scripts="Latn" territories="PY"/>
+		<language type="gsw" scripts="Latn" territories="CH"/>
+		<language type="gu" scripts="Gujr" territories="IN"/>
+		<language type="gv" scripts="Latn" territories="GB"/>
+		<language type="ha" scripts="Arab Latn" territories="NE NG"/>
+		<language type="haw" scripts="Latn" territories="US" alt="secondary"/>
+		<language type="he" scripts="Hebr" territories="IL"/>
+		<language type="hi" scripts="Deva" territories="IN FJ"/>
+		<language type="ho" scripts="Latn" territories="PG"/>
+		<language type="hr" scripts="Latn" territories="BA HR"/>
+		<language type="hr" scripts="Latn" territories="CS" alt="secondary"/>
+		<language type="ht" scripts="Latn" territories="HT"/>
+		<language type="hu" scripts="Latn" territories="HU"/>
+		<language type="hu" scripts="Latn" territories="SI CS" alt="secondary"/>
+		<language type="hy" scripts="Armn" territories="AM"/>
+		<language type="hy" scripts="Armn" territories="AZ GE IR" alt="secondary"/>
+		<language type="ia" scripts="Latn" /> <!-- Reflecting submitted data, cldrbug #1013 -->
+		<language type="id" scripts="Latn" territories="ID"/>
+		<language type="ig" scripts="Latn" territories="NG"/> <!-- Reflecting submitted data, cldrbug #1013 -->
+		<language type="is" scripts="Latn" territories="IS"/>
+		<language type="it" scripts="Latn" territories="CH IT SM VA"/>
+		<language type="it" scripts="Latn" territories="HR SI" alt="secondary"/>
+		<language type="iu" scripts="Cans Cyrl Latn" territories="CA GL US RU" alt="secondary"/>
+		<language type="iu" scripts="Cans" /> <!-- Reflecting submitted data, cldrbug #1013 -->
+		<language type="ja" scripts="Hani Hira Kana" territories="GU JP PW"/>
+		<language type="ka" scripts="Geor" territories="GE"/>
+		<language type="kaj" scripts="Latn" territories="NG"/>
+		<language type="kaj" scripts="Latn" territories="NG"/> <!-- Reflecting submitted data, cldrbug #1013 -->
+		<language type="kam" scripts="Latn" territories="KE"/> <!-- Reflecting submitted data, cldrbug #1013 -->
+		<language type="kcg" scripts="Latn" territories="NG"/>
+		<language type="kcg" scripts="Latn" territories="NG"/> <!-- Reflecting submitted data, cldrbug #1013 -->
+		<language type="kfo" scripts="Latn" territories="NG"/>
+		<language type="kfo" scripts="Latn" territories="NG"/> <!-- Reflecting submitted data, cldrbug #1013 -->
+		<language type="kk" scripts="Cyrl" territories="KZ"/>
+		<language type="kl" scripts="Latn" territories="GL"/>
+		<language type="km" scripts="Khmr" territories="KH"/>
+		<language type="kn" scripts="Knda" territories="IN"/>
+		<language type="ko" scripts="Hang Hani" territories="KP KR"/>
+		<language type="kok" scripts="Deva" territories="IN"/>
+		<language type="kpe" scripts="Latn" territories="GN LR"/> <!-- Reflecting submitted data, cldrbug #1013 -->
+		<language type="ks" scripts="Arab Deva" territories="IN"/>
+		<language type="ku" scripts="Arab Latn Cyrl" territories="IQ IR TR"/>
+		<language type="ku" scripts="Arab Latn Cyrl" territories="SY" alt="secondary"/>
+		<language type="kw" scripts="Latn" territories="GB" alt="secondary"/>
+		<language type="ky" scripts="Arab Cyrl" territories="CN" alt="secondary"/>
+		<language type="ky" scripts="Arab Cyrl" territories="KG"/>
+		<language type="la" scripts="Latn" territories="VA"/>
+		<language type="lb" scripts="Latn" territories="LU"/>
+		<language type="ln" scripts="Latn" territories="CD" alt="secondary"/>
+		<language type="ln" scripts="Latn" territories="CG" />
+		<language type="lo" scripts="Laoo" territories="LA"/>
+		<language type="lt" scripts="Latn" territories="LT"/>
+		<language type="lv" scripts="Latn" territories="LV"/>
+		<language type="mai" scripts="Deva" territories="IN"/>
+		<language type="men" scripts="Latn" territories="GN LR SL"/>
+		<language type="mg" scripts="Latn" territories="MG"/>
+		<language type="mh" scripts="Latn" territories="MH NR"/>
+		<language type="mi" scripts="Latn" territories="CK NZ" alt="secondary"/>
+		<language type="mk" scripts="Cyrl" territories="MK"/>
+		<language type="ml" scripts="Mlym" territories="IN"/>
+		<language type="mn" scripts="Cyrl Mong" territories="MN"/>
+		<language type="mni" territories="IN"/>
+		<language type="mo" scripts="Latn Cyrl" territories="MD"/>
+		<language type="mr" scripts="Deva" territories="IN"/>
+		<language type="ms" scripts="Arab Latn" territories="BN CC CX MY SG"/>
+		<language type="mt" scripts="Latn" territories="MT"/>
+		<language type="my" scripts="Mymr" territories="MM"/>
+		<language type="na" scripts="Latn" territories="NR"/>
+		<language type="nb" scripts="Latn" territories="NO SJ"/>
+		<language type="nd" scripts="Latn" territories="ZA"/>
+		<language type="ne" scripts="Deva" territories="NP"/>
+		<language type="niu" scripts="Latn" territories="NU"/>
+		<language type="nl" scripts="Latn" territories="AN AW BE NL SR"/>
+		<language type="nn" scripts="Latn" territories="NO SJ"/>
+		<language type="no" scripts="Latn" territories="NO SJ"/>
+		<language type="nr" scripts="Latn" territories="ZA"/>
+		<language type="nso" scripts="Latn" territories="ZA"/>
+		<language type="ny" scripts="Latn" territories="MW"/>
+		<language type="ny" scripts="Latn" territories="MZ ZM" alt="secondary"/>
+		<language type="oc" scripts="Latn" territories="ES" alt="secondary"/>
+		<language type="om" scripts="Latn" territories="ET KE"/>
+		<language type="or" scripts="Orya" territories="IN"/>
+		<language type="os" scripts="Latn" territories="GE RU" alt="secondary"/>
+		<language type="pa" scripts="Arab Guru" territories="IN PK"/>
+		<language type="pau" territories="PW"/>
+		<language type="pl" scripts="Latn" territories="PL"/>
+		<language type="ps" scripts="Arab" territories="AF PK"/>
+		<language type="pt" scripts="Latn" territories="AO BR CV GW MO MZ PT ST TL"/>
+		<language type="qu" scripts="Latn" territories="BO PE"/>		
+		<language type="rm" scripts="Latn" territories="CH" alt="secondary"/>
+		<language type="rn" scripts="Latn" territories="BI"/>
+		<language type="ro" scripts="Latn" territories="CS" alt="secondary"/>
+		<language type="ro" scripts="Latn" territories="RO"/>
+		<language type="ru" scripts="Cyrl" territories="BY GE KG KZ RU SJ UA"/>
+		<language type="ru" scripts="Cyrl" territories="MD" alt="secondary"/>
+		<language type="rw" scripts="Latn" territories="RW"/>
+		<language type="sa" scripts="Deva" territories="IN"/>
+		<language type="sd" scripts="Deva Arab" territories="IN PK"/>
+		<language type="se" scripts="Latn" territories="FI NO SE"/> <!-- Reflecting submitted data, cldrbug #1013 -->
+		<language type="sg" scripts="Latn" territories="CF"/>
+		<language type="sh" scripts="Latn" territories="BA CS YU" alt="secondary"/> <!-- this one is only aliases.. -->
+		<language type="si" scripts="Sinh" territories="LK"/>
+		<language type="sk" scripts="Latn" territories="CS" alt="secondary"/>
+		<language type="sk" scripts="Latn" territories="SK"/>
+		<language type="sl" scripts="Latn" territories="SI"/>
+		<language type="sm" scripts="Latn" territories="AS WS"/>
+		<language type="sma" scripts="Latn" territories="NO SE"/>
+		<language type="smj" scripts="Latn" territories="NO SE"/>
+		<language type="smn" scripts="Latn" territories="FI"/>
+		<language type="sms" scripts="Latn" territories="FI"/>
+		<language type="smi" scripts="Latn" territories="FI NO SE"/>
+		<language type="so" scripts="Latn" territories="DJ SO"/>
+		<language type="so" scripts="Latn" territories="ET KE" alt="secondary"/>
+		<language type="son" scripts="Latn" territories="BJ ML NE" alt="secondary"/>
+		<language type="sq" scripts="Latn" territories="AL MK CS"/>
+		<language type="sid" scripts="Latn" territories="ET"/> <!-- Reflecting submitted data, cldrbug #1013 -->
+		<language type="sr" scripts="Cyrl Latn" territories="BA CS"/>
+		<language type="sr" scripts="Cyrl Latn" territories="HR" alt="secondary"/>
+		<language type="ss" scripts="Latn" territories="SZ ZA"/>
+		<language type="st" scripts="Latn" territories="LS ZA"/>
+		<language type="sv" scripts="Latn" territories="AX FI SE"/>
+		<language type="sw" scripts="Latn" territories="KE TZ YT"/>
+		<language type="syr" scripts="Syrc" territories="SY"/> <!-- Reflecting submitted data, cldrbug #1013 -->
+		<language type="ta" scripts="Taml" territories="IN LK SG"/>
+		<language type="te" scripts="Telu" territories="IN"/>
+		<language type="tem" scripts="Latn" territories="SL"/>
+		<language type="tet" scripts="Latn" territories="TL"/>
+		<language type="tg" scripts="Arab Cyrl Latn" territories="TJ"/>
+		<language type="th" scripts="Thai" territories="TH"/>
+		<language type="ti" scripts="Ethi" territories="ER ET"/>
+		<language type="tig" scripts="Ethi" territories="ER"/> <!-- Reflecting submitted data, cldrbug #1013 -->
+		<language type="tk" scripts="Arab Cyrl Latn" territories="AF IR" alt="secondary"/>
+		<language type="tk" scripts="Arab Cyrl Latn" territories="TM"/>
+		<language type="tkl" scripts="Latn" territories="TK"/>
+		<language type="tl" scripts="Latn" territories="GU PH"/>
+		<language type="tmh" scripts="Latn" territories="ML NE" alt="secondary"/>
+		<language type="tn" scripts="Latn" territories="BW ZA"/>
+		<language type="to" scripts="Latn" territories="TO"/>
+		<language type="tpi" scripts="Latn" territories="PG"/>
+		<language type="tr" scripts="Arab Latn" territories="CY TR"/>
+		<language type="ts" scripts="Latn" territories="ZA"/>
+		<language type="tt" scripts="Cyrl" territories="RU"/> <!-- Reflecting submitted data, cldrbug #1013. Official language of Republic of Tatarstan according to http://en.wikipedia.org/wiki/Tatar_language#Official_status -->
+		<language type="tvl" scripts="Latn" territories="TV"/>
+		<language type="uk" scripts="Cyrl" territories="MD" alt="secondary"/>
+		<language type="uk" scripts="Cyrl" territories="UA"/>
+		<language type="ur" scripts="Arab" territories="IN PK"/>
+		<language type="uz" scripts="Arab Cyrl Latn" territories="AF" alt="secondary"/>
+		<language type="uz" scripts="Arab Cyrl Latn" territories="UZ"/>
+		<language type="ug" scripts="Arab" territories="CN"/> <!-- Reflecting submitted data, cldrbug #1013. No territory level data yet. http://en.wikipedia.org/wiki/Uighur_language#Official_status  "The Uyghurs are one of the 56 official nationalities in China, and Uyghur is an official language of Xinjiang." -->
+		<language type="ve" scripts="Latn" territories="ZA"/>
+		<language type="vi" scripts="Latn" territories="VN"/>
+		<language type="wal" scripts="Ethi" territories="ET"/> <!-- Reflecting submitted data, cldrbug #1013 -->
+		<language type="wo" scripts="Latn" territories="GM MR SN"/>
+		<language type="xh" scripts="Latn" territories="LS ZA"/>
+		<language type="yi" scripts="Hebr"/>
+		<language type="yo" scripts="Latn" territories="NG"/> <!-- Reflecting submitted data, cldrbug #1013 -->
+		<language type="zh" scripts="Bopo Hani Hans Hant" territories="CN CX HK MO SG TW"/>
+		<language type="zu" scripts="Latn" territories="LS ZA"/>
+	</languageData>
+	<calendarData>
+		<!-- gregorian is assumed, so these are all in addition -->
+		<calendar type="japanese" territories="JP"/>
+		<calendar type="islamic-civil" territories="AE BH DJ DZ EG EH ER IL IQ JO KM KW LB LY MA MR OM PS QA SA SD SY TD TN YE AF IR"/>
+		<calendar type="islamic" territories="AE BH DJ DZ EG EH ER IL IQ JO KM KW LB LY MA MR OM PS QA SA SD SY TD TN YE AF IR"/>
+		<calendar type="chinese" territories="CN CX HK MO SG TW"/>
+		<calendar type="hebrew" territories="IL"/>
+		<calendar type="buddhist" territories="TH"/>
+		<calendar type="coptic" territories="EG"/>
+		<calendar type="persian" territories="AF IR"/>
+		<calendar type="ethiopic" territories="ET"/>
+	</calendarData>
+    <weekData>
+          <minDays count="1" territories="001" />
+          <minDays count="4" territories="AT BE CA CH DE DK FI FR IT LI LT LU MC MT NL NO SE SK" />
+          <minDays count="4" territories="CD" draft="true" />
+        
+          <firstDay day="mon"  territories="001" />
+          <firstDay day="fri"  territories="MV" />
+          <firstDay day="sat"  territories="AE AF BH DJ DZ EG ER ET IQ IR JO KE KW LB LY MA OM QA SA SD SO TN YE" />
+          <firstDay day="sun"  territories="AS AU AZ BW CA CN FO GE GL GU HK IE IL IS JM JP KG KR LA MH MN MO MP MT NZ PH PK SG TH TT TW UM US UZ VI ZA ZW" />
+          <firstDay day="sun"  territories="ET MW NG TJ" draft="true" />
+		  <firstDay day="sun"  territories="GB" draft="true"  alt="variant" references="Shorter Oxford Dictionary (5th edition, 2002)"/>
+          <firstDay day="thu"  territories="SY" />
+        
+          <weekendStart day="sat"  territories="001"/>
+          <weekendStart day="fri"  territories="EG IL SY"/>
+          <weekendStart day="sun"  territories="IN"/>
+          <weekendStart day="thu"  territories="AE BH DZ IQ JO KW LB LY MA OM QA SA SD TN YE"/>
+        
+          <weekendEnd day="sun"  territories="001"/>
+          <weekendEnd day="fri"  territories="AE BH DZ IQ JO KW LB LY MA OM QA SA SD TN YE AF IR"/>
+          <weekendEnd day="sat"  territories="EG IL SY"/>
+    </weekData>
+
+    <measurementData>
+          <measurementSystem type="metric"  territories="001"/>
+          <measurementSystem type="US"  territories="US"/>
+          <paperSize type="A4"  territories="001"/>
+          <paperSize type="US-Letter"  territories="US"/>
+    </measurementData>
+	<timezoneData>
+		<mapTimezones type="windows">
+			<mapZone other="Dateline" type="Etc/GMT+12"/> <!-- S (GMT-12:00) International Date Line West-->
+			<mapZone other="Samoa" type="Pacific/Apia"/> <!-- S (GMT-11:00) Midway Island, Samoa-->
+			<mapZone other="Hawaiian" type="Pacific/Honolulu"/> <!-- S (GMT-10:00) Hawaii-->
+			<mapZone other="Alaskan" type="America/Anchorage"/> <!-- D (GMT-09:00) Alaska-->
+			<mapZone other="Pacific" type="America/Los_Angeles"/> <!-- D (GMT-08:00) Pacific Time (US & Canada); Tijuana-->
+			<mapZone other="US Mountain" type="America/Phoenix"/> <!-- S (GMT-07:00) Arizona-->
+			<mapZone other="Mountain" type="America/Denver"/> <!-- D (GMT-07:00) Mountain Time (US & Canada)-->
+			<mapZone other="Mexico Standard Time 2" type="America/Chihuahua"/> <!-- D (GMT-07:00) Chihuahua, La Paz, Mazatlan-->
+			<mapZone other="Central America" type="America/Managua"/> <!-- S (GMT-06:00) Central America-->
+			<mapZone other="Canada Central" type="America/Regina"/> <!-- S (GMT-06:00) Saskatchewan-->
+			<mapZone other="Mexico" type="America/Mexico_City"/> <!-- D (GMT-06:00) Guadalajara, Mexico City, Monterrey-->
+			<mapZone other="Central" type="America/Chicago"/> <!-- D (GMT-06:00) Central Time (US & Canada)-->
+			<mapZone other="US Eastern" type="America/Indianapolis"/> <!-- S (GMT-05:00) Indiana (East)-->
+			<mapZone other="SA Pacific" type="America/Bogota"/> <!-- S (GMT-05:00) Bogota, Lima, Quito-->
+			<mapZone other="Eastern" type="America/New_York"/> <!-- D (GMT-05:00) Eastern Time (US & Canada)-->
+			<mapZone other="SA Western" type="America/Caracas"/> <!-- S (GMT-04:00) Caracas, La Paz-->
+			<mapZone other="Pacific SA" type="America/Santiago"/> <!-- D (GMT-04:00) Santiago-->
+			<mapZone other="Atlantic" type="America/Halifax"/> <!-- D (GMT-04:00) Atlantic Time (Canada)-->
+			<mapZone other="Newfoundland" type="America/St_Johns"/> <!-- D (GMT-03:30) Newfoundland-->
+			<mapZone other="SA Eastern" type="America/Buenos_Aires"/> <!-- S (GMT-03:00) Buenos Aires, Georgetown-->
+			<mapZone other="Greenland" type="America/Godthab"/> <!-- D (GMT-03:00) Greenland-->
+			<mapZone other="E. South America" type="America/Sao_Paulo"/> <!-- D (GMT-03:00) Brasilia-->
+			<mapZone other="Mid-Atlantic" type="America/Noronha"/> <!-- D (GMT-02:00) Mid-Atlantic-->
+			<mapZone other="Cape Verde" type="Atlantic/Cape_Verde"/> <!-- S (GMT-01:00) Cape Verde Is.-->
+			<mapZone other="Azores" type="Atlantic/Azores"/> <!-- D (GMT-01:00) Azores-->
+			<mapZone other="Greenwich" type="Africa/Casablanca"/> <!-- S (GMT) Casablanca, Monrovia-->
+			<mapZone other="GMT" type="Europe/London"/> <!-- D (GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London-->
+			<mapZone other="W. Central Africa" type="Africa/Lagos"/> <!-- S (GMT+01:00) West Central Africa-->
+			<mapZone other="W. Europe" type="Europe/Berlin"/> <!-- D (GMT+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna-->
+			<mapZone other="Romance" type="Europe/Paris"/> <!-- D (GMT+01:00) Brussels, Copenhagen, Madrid, Paris-->
+			<mapZone other="Central European" type="Europe/Sarajevo"/> <!-- D (GMT+01:00) Sarajevo, Skopje, Warsaw, Zagreb-->
+			<mapZone other="Central Europe" type="Europe/Belgrade"/> <!-- D (GMT+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague-->
+			<mapZone other="South Africa" type="Africa/Johannesburg"/> <!-- S (GMT+02:00) Harare, Pretoria-->
+			<mapZone other="Israel" type="Asia/Jerusalem"/> <!-- S (GMT+02:00) Jerusalem-->
+			<mapZone other="GTB" type="Europe/Istanbul"/> <!-- D (GMT+02:00) Athens, Istanbul, Minsk-->
+			<mapZone other="FLE" type="Europe/Helsinki"/> <!-- D (GMT+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius-->
+			<mapZone other="Egypt" type="Africa/Cairo"/> <!-- D (GMT+02:00) Cairo-->
+			<mapZone other="E. Europe" type="Europe/Bucharest"/> <!-- D (GMT+02:00) Bucharest-->
+			<mapZone other="E. Africa" type="Africa/Nairobi"/> <!-- S (GMT+03:00) Nairobi-->
+			<mapZone other="Arab" type="Asia/Riyadh"/> <!-- S (GMT+03:00) Kuwait, Riyadh-->
+			<mapZone other="Russian" type="Europe/Moscow"/> <!-- D (GMT+03:00) Moscow, St. Petersburg, Volgograd-->
+			<mapZone other="Arabic" type="Asia/Baghdad"/> <!-- D (GMT+03:00) Baghdad-->
+			<mapZone other="Iran" type="Asia/Tehran"/> <!-- D (GMT+03:30) Tehran-->
+			<mapZone other="Arabian" type="Asia/Muscat"/> <!-- S (GMT+04:00) Abu Dhabi, Muscat-->
+			<mapZone other="Caucasus" type="Asia/Tbilisi"/> <!-- D (GMT+04:00) Baku, Tbilisi, Yerevan-->
+			<mapZone other="Afghanistan" type="Asia/Kabul"/> <!-- S (GMT+04:30) Kabul-->
+			<mapZone other="West Asia" type="Asia/Karachi"/> <!-- S (GMT+05:00) Islamabad, Karachi, Tashkent-->
+			<mapZone other="Ekaterinburg" type="Asia/Yekaterinburg"/> <!-- D (GMT+05:00) Ekaterinburg-->
+			<mapZone other="India" type="Asia/Calcutta"/> <!-- S (GMT+05:30) Chennai, Kolkata, Mumbai, New Delhi-->
+			<mapZone other="Nepal" type="Asia/Katmandu"/> <!-- S (GMT+05:45) Kathmandu-->
+			<mapZone other="Sri Lanka" type="Asia/Colombo"/> <!-- S (GMT+06:00) Sri Jayawardenepura-->
+			<mapZone other="Central Asia" type="Asia/Dhaka"/> <!-- S (GMT+06:00) Astana, Dhaka-->
+			<mapZone other="N. Central Asia" type="Asia/Novosibirsk"/> <!-- D (GMT+06:00) Almaty, Novosibirsk-->
+			<mapZone other="Myanmar" type="Asia/Rangoon"/> <!-- S (GMT+06:30) Rangoon-->
+			<mapZone other="SE Asia" type="Asia/Bangkok"/> <!-- S (GMT+07:00) Bangkok, Hanoi, Jakarta-->
+			<mapZone other="North Asia" type="Asia/Krasnoyarsk"/> <!-- D (GMT+07:00) Krasnoyarsk-->
+			<mapZone other="W. Australia" type="Australia/Perth"/> <!-- S (GMT+08:00) Perth-->
+			<mapZone other="Taipei" type="Asia/Taipei"/> <!-- S (GMT+08:00) Taipei-->
+			<mapZone other="Singapore" type="Asia/Singapore"/> <!-- S (GMT+08:00) Kuala Lumpur, Singapore-->
+			<mapZone other="China" type="Asia/Shanghai"/> <!-- S (GMT+08:00) Beijing, Chongqing, Hong Kong, Urumqi-->
+			<mapZone other="North Asia East" type="Asia/Irkutsk"/> <!-- D (GMT+08:00) Irkutsk, Ulaan Bataar-->
+			<mapZone other="Tokyo" type="Asia/Tokyo"/> <!-- S (GMT+09:00) Osaka, Sapporo, Tokyo-->
+			<mapZone other="Korea" type="Asia/Seoul"/> <!-- S (GMT+09:00) Seoul-->
+			<mapZone other="Yakutsk" type="Asia/Yakutsk"/> <!-- D (GMT+09:00) Yakutsk-->
+			<mapZone other="AUS Central" type="Australia/Darwin"/> <!-- S (GMT+09:30) Darwin-->
+			<mapZone other="Cen. Australia" type="Australia/Adelaide"/> <!-- D (GMT+09:30) Adelaide-->
+			<mapZone other="West Pacific" type="Pacific/Guam"/> <!-- S (GMT+10:00) Guam, Port Moresby-->
+			<mapZone other="E. Australia" type="Australia/Brisbane"/> <!-- S (GMT+10:00) Brisbane-->
+			<mapZone other="Vladivostok" type="Asia/Vladivostok"/> <!-- D (GMT+10:00) Vladivostok-->
+			<mapZone other="Tasmania" type="Australia/Hobart"/> <!-- D (GMT+10:00) Hobart-->
+			<mapZone other="AUS Eastern" type="Australia/Sydney"/> <!-- D (GMT+10:00) Canberra, Melbourne, Sydney-->
+			<mapZone other="Central Pacific" type="Asia/Magadan"/> <!-- S (GMT+11:00) Magadan, Solomon Is., New Caledonia-->
+			<mapZone other="Fiji" type="Pacific/Fiji"/> <!-- S (GMT+12:00) Fiji, Kamchatka, Marshall Is.-->
+			<mapZone other="New Zealand" type="Pacific/Auckland"/> <!-- D (GMT+12:00) Auckland, Wellington-->
+			<mapZone other="Tonga" type="Pacific/Tongatapu"/> <!-- S (GMT+13:00) Nuku'alofa-->
+		</mapTimezones>
+		<zoneFormatting multizone="001 AQ AR AU BR CA CD CL CN EC ES FM GL ID KI KZ MH MN MX MY NZ PF PT RU SJ UA UM US UZ" tzidVersion="2006g">
+			<zoneItem type="Africa/Abidjan" territory="CI"/>
+			<zoneItem type="Africa/Accra" territory="GH"/>
+			<zoneItem type="Africa/Addis_Ababa" territory="ET"/>
+			<zoneItem type="Africa/Algiers" territory="DZ"/>
+			<zoneItem type="Africa/Asmera" territory="ER"/>
+			<zoneItem type="Africa/Bamako" territory="ML" aliases="Africa/Timbuktu"/>
+			<zoneItem type="Africa/Bangui" territory="CF"/>
+			<zoneItem type="Africa/Banjul" territory="GM"/>
+			<zoneItem type="Africa/Bissau" territory="GW"/>
+			<zoneItem type="Africa/Blantyre" territory="MW"/>
+			<zoneItem type="Africa/Brazzaville" territory="CG"/>
+			<zoneItem type="Africa/Bujumbura" territory="BI"/>
+			<zoneItem type="Africa/Cairo" territory="EG" aliases="Egypt"/>
+			<zoneItem type="Africa/Casablanca" territory="MA"/>
+			<zoneItem type="Africa/Ceuta" territory="ES"/>
+			<zoneItem type="Africa/Conakry" territory="GN"/>
+			<zoneItem type="Africa/Dakar" territory="SN"/>
+			<zoneItem type="Africa/Dar_es_Salaam" territory="TZ"/>
+			<zoneItem type="Africa/Djibouti" territory="DJ"/>
+			<zoneItem type="Africa/Douala" territory="CM"/>
+			<zoneItem type="Africa/El_Aaiun" territory="EH"/>
+			<zoneItem type="Africa/Freetown" territory="SL"/>
+			<zoneItem type="Africa/Gaborone" territory="BW"/>
+			<zoneItem type="Africa/Harare" territory="ZW"/>
+			<zoneItem type="Africa/Johannesburg" territory="ZA"/>
+			<zoneItem type="Africa/Kampala" territory="UG"/>
+			<zoneItem type="Africa/Khartoum" territory="SD"/>
+			<zoneItem type="Africa/Kigali" territory="RW"/>
+			<zoneItem type="Africa/Kinshasa" territory="CD"/>
+			<zoneItem type="Africa/Lagos" territory="NG"/>
+			<zoneItem type="Africa/Libreville" territory="GA"/>
+			<zoneItem type="Africa/Lome" territory="TG"/>
+			<zoneItem type="Africa/Luanda" territory="AO"/>
+			<zoneItem type="Africa/Lubumbashi" territory="CD"/>
+			<zoneItem type="Africa/Lusaka" territory="ZM"/>
+			<zoneItem type="Africa/Malabo" territory="GQ"/>
+			<zoneItem type="Africa/Maputo" territory="MZ"/>
+			<zoneItem type="Africa/Maseru" territory="LS"/>
+			<zoneItem type="Africa/Mbabane" territory="SZ"/>
+			<zoneItem type="Africa/Mogadishu" territory="SO"/>
+			<zoneItem type="Africa/Monrovia" territory="LR"/>
+			<zoneItem type="Africa/Nairobi" territory="KE"/>
+			<zoneItem type="Africa/Ndjamena" territory="TD"/>
+			<zoneItem type="Africa/Niamey" territory="NE"/>
+			<zoneItem type="Africa/Nouakchott" territory="MR"/>
+			<zoneItem type="Africa/Ouagadougou" territory="BF"/>
+			<zoneItem type="Africa/Porto-Novo" territory="BJ"/>
+			<zoneItem type="Africa/Sao_Tome" territory="ST"/>
+			<zoneItem type="Africa/Tripoli" territory="LY" aliases="Libya"/>
+			<zoneItem type="Africa/Tunis" territory="TN"/>
+			<zoneItem type="Africa/Windhoek" territory="NA"/>
+			<zoneItem type="America/Adak" territory="US" aliases="America/Atka US/Aleutian"/>
+			<zoneItem type="America/Anchorage" territory="US" aliases="SystemV/YST9YDT US/Alaska"/>
+			<zoneItem type="America/Anguilla" territory="AI"/>
+			<zoneItem type="America/Antigua" territory="AG"/>
+			<zoneItem type="America/Araguaina" territory="BR"/>
+			<zoneItem type="America/Argentina/La_Rioja" territory="AR"/>
+			<zoneItem type="America/Argentina/Rio_Gallegos" territory="AR"/>
+			<zoneItem type="America/Argentina/San_Juan" territory="AR"/>
+			<zoneItem type="America/Argentina/Tucuman" territory="AR"/>
+			<zoneItem type="America/Argentina/Ushuaia" territory="AR"/>
+			<zoneItem type="America/Aruba" territory="AW"/>
+			<zoneItem type="America/Asuncion" territory="PY"/>
+			<zoneItem type="America/Bahia" territory="BR"/>
+			<zoneItem type="America/Barbados" territory="BB"/>
+			<zoneItem type="America/Belem" territory="BR"/>
+			<zoneItem type="America/Belize" territory="BZ"/>
+			<zoneItem type="America/Boa_Vista" territory="BR"/>
+			<zoneItem type="America/Bogota" territory="CO"/>
+			<zoneItem type="America/Boise" territory="US"/>
+			<zoneItem type="America/Buenos_Aires" territory="AR" aliases="America/Argentina/Buenos_Aires"/>
+			<zoneItem type="America/Cambridge_Bay" territory="CA"/>
+			<zoneItem type="America/Campo_Grande" territory="BR"/>
+			<zoneItem type="America/Cancun" territory="MX"/>
+			<zoneItem type="America/Caracas" territory="VE"/>
+			<zoneItem type="America/Catamarca" territory="AR" aliases="America/Argentina/Catamarca America/Argentina/ComodRivadavia"/>
+			<zoneItem type="America/Cayenne" territory="GF"/>
+			<zoneItem type="America/Cayman" territory="KY"/>
+			<zoneItem type="America/Chicago" territory="US" aliases="CST6CDT SystemV/CST6CDT US/Central"/>
+			<zoneItem type="America/Chihuahua" territory="MX"/>
+			<zoneItem type="America/Coral_Harbour" territory="CA"/>
+			<zoneItem type="America/Cordoba" territory="AR" aliases="America/Argentina/Cordoba America/Rosario"/>
+			<zoneItem type="America/Costa_Rica" territory="CR"/>
+			<zoneItem type="America/Cuiaba" territory="BR"/>
+			<zoneItem type="America/Curacao" territory="AN"/>
+			<zoneItem type="America/Danmarkshavn" territory="GL"/>
+			<zoneItem type="America/Dawson" territory="CA"/>
+			<zoneItem type="America/Dawson_Creek" territory="CA"/>
+			<zoneItem type="America/Denver" territory="US" aliases="MST7MDT SystemV/MST7MDT US/Mountain"/>
+			<zoneItem type="America/Detroit" territory="US" aliases="US/Michigan"/>
+			<zoneItem type="America/Dominica" territory="DM"/>
+			<zoneItem type="America/Edmonton" territory="CA" aliases="Canada/Mountain"/>
+			<zoneItem type="America/Eirunepe" territory="BR"/>
+			<zoneItem type="America/El_Salvador" territory="SV"/>
+			<zoneItem type="America/Fortaleza" territory="BR"/>
+			<zoneItem type="America/Glace_Bay" territory="CA"/>
+			<zoneItem type="America/Godthab" territory="GL"/>
+			<zoneItem type="America/Goose_Bay" territory="CA"/>
+			<zoneItem type="America/Grand_Turk" territory="TC"/>
+			<zoneItem type="America/Grenada" territory="GD"/>
+			<zoneItem type="America/Guadeloupe" territory="GP"/>
+			<zoneItem type="America/Guatemala" territory="GT"/>
+			<zoneItem type="America/Guayaquil" territory="EC"/>
+			<zoneItem type="America/Guyana" territory="GY"/>
+			<zoneItem type="America/Halifax" territory="CA" aliases="Canada/Atlantic SystemV/AST4ADT"/>
+			<zoneItem type="America/Havana" territory="CU" aliases="Cuba"/>
+			<zoneItem type="America/Hermosillo" territory="MX"/>
+			<zoneItem type="America/Indiana/Knox" territory="US" aliases="America/Knox_IN US/Indiana-Starke"/>
+			<zoneItem type="America/Indiana/Marengo" territory="US"/>
+			<zoneItem type="America/Indiana/Petersburg" territory="US"/>
+			<zoneItem type="America/Indiana/Vevay" territory="US"/>
+			<zoneItem type="America/Indiana/Vincennes" territory="US"/>
+			<zoneItem type="America/Indianapolis" territory="US" aliases="America/Fort_Wayne America/Indiana/Indianapolis EST SystemV/EST5 US/East-Indiana"/>
+			<zoneItem type="America/Inuvik" territory="CA"/>
+			<zoneItem type="America/Iqaluit" territory="CA"/>
+			<zoneItem type="America/Jamaica" territory="JM" aliases="Jamaica"/>
+			<zoneItem type="America/Jujuy" territory="AR" aliases="America/Argentina/Jujuy"/>
+			<zoneItem type="America/Juneau" territory="US"/>
+			<zoneItem type="America/Kentucky/Monticello" territory="US"/>
+			<zoneItem type="America/La_Paz" territory="BO"/>
+			<zoneItem type="America/Lima" territory="PE"/>
+			<zoneItem type="America/Los_Angeles" territory="US" aliases="PST8PDT SystemV/PST8PDT US/Pacific US/Pacific-New"/>
+			<zoneItem type="America/Louisville" territory="US" aliases="America/Kentucky/Louisville"/>
+			<zoneItem type="America/Maceio" territory="BR"/>
+			<zoneItem type="America/Managua" territory="NI"/>
+			<zoneItem type="America/Manaus" territory="BR" aliases="Brazil/West"/>
+			<zoneItem type="America/Martinique" territory="MQ"/>
+			<zoneItem type="America/Mazatlan" territory="MX" aliases="Mexico/BajaSur"/>
+			<zoneItem type="America/Mendoza" territory="AR" aliases="America/Argentina/Mendoza"/>
+			<zoneItem type="America/Menominee" territory="US"/>
+			<zoneItem type="America/Merida" territory="MX"/>
+			<zoneItem type="America/Mexico_City" territory="MX" aliases="Mexico/General"/>
+			<zoneItem type="America/Miquelon" territory="PM"/>
+			<zoneItem type="America/Moncton" territory="CA"/>
+			<zoneItem type="America/Monterrey" territory="MX"/>
+			<zoneItem type="America/Montevideo" territory="UY"/>
+			<zoneItem type="America/Montreal" territory="CA"/>
+			<zoneItem type="America/Montserrat" territory="MS"/>
+			<zoneItem type="America/Nassau" territory="BS"/>
+			<zoneItem type="America/New_York" territory="US" aliases="EST5EDT SystemV/EST5EDT US/Eastern"/>
+			<zoneItem type="America/Nipigon" territory="CA"/>
+			<zoneItem type="America/Nome" territory="US"/>
+			<zoneItem type="America/Noronha" territory="BR" aliases="Brazil/DeNoronha"/>
+			<zoneItem type="America/North_Dakota/Center" territory="US"/>
+			<zoneItem type="America/North_Dakota/New_Salem" territory="US"/>
+			<zoneItem type="America/Panama" territory="PA"/>
+			<zoneItem type="America/Pangnirtung" territory="CA"/>
+			<zoneItem type="America/Paramaribo" territory="SR"/>
+			<zoneItem type="America/Phoenix" territory="US" aliases="MST SystemV/MST7 US/Arizona"/>
+			<zoneItem type="America/Port_of_Spain" territory="TT"/>
+			<zoneItem type="America/Port-au-Prince" territory="HT"/>
+			<zoneItem type="America/Porto_Velho" territory="BR"/>
+			<zoneItem type="America/Puerto_Rico" territory="PR" aliases="SystemV/AST4"/>
+			<zoneItem type="America/Rainy_River" territory="CA"/>
+			<zoneItem type="America/Rankin_Inlet" territory="CA"/>
+			<zoneItem type="America/Recife" territory="BR"/>
+			<zoneItem type="America/Regina" territory="CA" aliases="Canada/East-Saskatchewan Canada/Saskatchewan SystemV/CST6"/>
+			<zoneItem type="America/Rio_Branco" territory="BR" aliases="America/Porto_Acre Brazil/Acre"/>
+			<zoneItem type="America/Santiago" territory="CL" aliases="Chile/Continental"/>
+			<zoneItem type="America/Santo_Domingo" territory="DO"/>
+			<zoneItem type="America/Sao_Paulo" territory="BR" aliases="Brazil/East"/>
+			<zoneItem type="America/Scoresbysund" territory="GL"/>
+			<zoneItem type="America/Shiprock" territory="US" aliases="Navajo"/>
+			<zoneItem type="America/St_Johns" territory="CA" aliases="Canada/Newfoundland"/>
+			<zoneItem type="America/St_Kitts" territory="KN"/>
+			<zoneItem type="America/St_Lucia" territory="LC"/>
+			<zoneItem type="America/St_Thomas" territory="VI" aliases="America/Virgin"/>
+			<zoneItem type="America/St_Vincent" territory="VC"/>
+			<zoneItem type="America/Swift_Current" territory="CA"/>
+			<zoneItem type="America/Tegucigalpa" territory="HN"/>
+			<zoneItem type="America/Thule" territory="GL"/>
+			<zoneItem type="America/Thunder_Bay" territory="CA"/>
+			<zoneItem type="America/Tijuana" territory="MX" aliases="America/Ensenada Mexico/BajaNorte"/>
+			<zoneItem type="America/Toronto" territory="CA" aliases="Canada/Eastern"/>
+			<zoneItem type="America/Tortola" territory="VG"/>
+			<zoneItem type="America/Vancouver" territory="CA" aliases="Canada/Pacific"/>
+			<zoneItem type="America/Whitehorse" territory="CA" aliases="Canada/Yukon"/>
+			<zoneItem type="America/Winnipeg" territory="CA" aliases="Canada/Central"/>
+			<zoneItem type="America/Yakutat" territory="US"/>
+			<zoneItem type="America/Yellowknife" territory="CA"/>
+			<zoneItem type="Antarctica/Casey" territory="AQ"/>
+			<zoneItem type="Antarctica/Davis" territory="AQ"/>
+			<zoneItem type="Antarctica/DumontDUrville" territory="AQ"/>
+			<zoneItem type="Antarctica/Mawson" territory="AQ"/>
+			<zoneItem type="Antarctica/McMurdo" territory="AQ"/>
+			<zoneItem type="Antarctica/Palmer" territory="AQ"/>
+			<zoneItem type="Antarctica/Rothera" territory="AQ"/>
+			<zoneItem type="Antarctica/South_Pole" territory="AQ"/>
+			<zoneItem type="Antarctica/Syowa" territory="AQ"/>
+			<zoneItem type="Antarctica/Vostok" territory="AQ"/>
+			<zoneItem type="Arctic/Longyearbyen" territory="SJ"/>
+			<zoneItem type="Asia/Aden" territory="YE"/>
+			<zoneItem type="Asia/Almaty" territory="KZ"/>
+			<zoneItem type="Asia/Amman" territory="JO"/>
+			<zoneItem type="Asia/Anadyr" territory="RU"/>
+			<zoneItem type="Asia/Aqtau" territory="KZ"/>
+			<zoneItem type="Asia/Aqtobe" territory="KZ"/>
+			<zoneItem type="Asia/Ashgabat" territory="TM" aliases="Asia/Ashkhabad"/>
+			<zoneItem type="Asia/Baghdad" territory="IQ"/>
+			<zoneItem type="Asia/Bahrain" territory="BH"/>
+			<zoneItem type="Asia/Baku" territory="AZ"/>
+			<zoneItem type="Asia/Bangkok" territory="TH"/>
+			<zoneItem type="Asia/Beirut" territory="LB"/>
+			<zoneItem type="Asia/Bishkek" territory="KG"/>
+			<zoneItem type="Asia/Brunei" territory="BN"/>
+			<zoneItem type="Asia/Calcutta" territory="IN"/>
+			<zoneItem type="Asia/Choibalsan" territory="MN"/>
+			<zoneItem type="Asia/Chongqing" territory="CN" aliases="Asia/Chungking"/>
+			<zoneItem type="Asia/Colombo" territory="LK"/>
+			<zoneItem type="Asia/Damascus" territory="SY"/>
+			<zoneItem type="Asia/Dhaka" territory="BD" aliases="Asia/Dacca"/>
+			<zoneItem type="Asia/Dili" territory="TL"/>
+			<zoneItem type="Asia/Dubai" territory="AE"/>
+			<zoneItem type="Asia/Dushanbe" territory="TJ"/>
+			<zoneItem type="Asia/Gaza" territory="PS"/>
+			<zoneItem type="Asia/Harbin" territory="CN"/>
+			<zoneItem type="Asia/Hong_Kong" territory="HK" aliases="Hongkong"/>
+			<zoneItem type="Asia/Hovd" territory="MN"/>
+			<zoneItem type="Asia/Irkutsk" territory="RU"/>
+			<zoneItem type="Asia/Jakarta" territory="ID"/>
+			<zoneItem type="Asia/Jayapura" territory="ID"/>
+			<zoneItem type="Asia/Jerusalem" territory="IL" aliases="Asia/Tel_Aviv Israel"/>
+			<zoneItem type="Asia/Kabul" territory="AF"/>
+			<zoneItem type="Asia/Kamchatka" territory="RU"/>
+			<zoneItem type="Asia/Karachi" territory="PK"/>
+			<zoneItem type="Asia/Kashgar" territory="CN"/>
+			<zoneItem type="Asia/Katmandu" territory="NP"/>
+			<zoneItem type="Asia/Krasnoyarsk" territory="RU"/>
+			<zoneItem type="Asia/Kuala_Lumpur" territory="MY"/>
+			<zoneItem type="Asia/Kuching" territory="MY"/>
+			<zoneItem type="Asia/Kuwait" territory="KW"/>
+			<zoneItem type="Asia/Macau" territory="MO" aliases="Asia/Macao"/>
+			<zoneItem type="Asia/Magadan" territory="RU"/>
+			<zoneItem type="Asia/Makassar" territory="ID" aliases="Asia/Ujung_Pandang"/>
+			<zoneItem type="Asia/Manila" territory="PH"/>
+			<zoneItem type="Asia/Muscat" territory="OM"/>
+			<zoneItem type="Asia/Nicosia" territory="CY" aliases="Europe/Nicosia"/>
+			<zoneItem type="Asia/Novosibirsk" territory="RU"/>
+			<zoneItem type="Asia/Omsk" territory="RU"/>
+			<zoneItem type="Asia/Oral" territory="KZ"/>
+			<zoneItem type="Asia/Phnom_Penh" territory="KH"/>
+			<zoneItem type="Asia/Pontianak" territory="ID"/>
+			<zoneItem type="Asia/Pyongyang" territory="KP"/>
+			<zoneItem type="Asia/Qatar" territory="QA"/>
+			<zoneItem type="Asia/Qyzylorda" territory="KZ"/>
+			<zoneItem type="Asia/Rangoon" territory="MM"/>
+			<zoneItem type="Asia/Riyadh" territory="SA"/>
+			<zoneItem type="Asia/Saigon" territory="VN"/>
+			<zoneItem type="Asia/Sakhalin" territory="RU"/>
+			<zoneItem type="Asia/Samarkand" territory="UZ"/>
+			<zoneItem type="Asia/Seoul" territory="KR" aliases="ROK"/>
+			<zoneItem type="Asia/Shanghai" territory="CN" aliases="PRC"/>
+			<zoneItem type="Asia/Singapore" territory="SG" aliases="Singapore"/>
+			<zoneItem type="Asia/Taipei" territory="TW" aliases="ROC"/>
+			<zoneItem type="Asia/Tashkent" territory="UZ"/>
+			<zoneItem type="Asia/Tbilisi" territory="GE"/>
+			<zoneItem type="Asia/Tehran" territory="IR" aliases="Iran"/>
+			<zoneItem type="Asia/Thimphu" territory="BT" aliases="Asia/Thimbu"/>
+			<zoneItem type="Asia/Tokyo" territory="JP" aliases="Japan"/>
+			<zoneItem type="Asia/Ulaanbaatar" territory="MN" aliases="Asia/Ulan_Bator"/>
+			<zoneItem type="Asia/Urumqi" territory="CN"/>
+			<zoneItem type="Asia/Vientiane" territory="LA"/>
+			<zoneItem type="Asia/Vladivostok" territory="RU"/>
+			<zoneItem type="Asia/Yakutsk" territory="RU"/>
+			<zoneItem type="Asia/Yekaterinburg" territory="RU"/>
+			<zoneItem type="Asia/Yerevan" territory="AM"/>
+			<zoneItem type="Atlantic/Azores" territory="PT"/>
+			<zoneItem type="Atlantic/Bermuda" territory="BM"/>
+			<zoneItem type="Atlantic/Canary" territory="ES"/>
+			<zoneItem type="Atlantic/Cape_Verde" territory="CV"/>
+			<zoneItem type="Atlantic/Faeroe" territory="FO"/>
+			<zoneItem type="Atlantic/Jan_Mayen" territory="SJ"/>
+			<zoneItem type="Atlantic/Madeira" territory="PT"/>
+			<zoneItem type="Atlantic/Reykjavik" territory="IS" aliases="Iceland"/>
+			<zoneItem type="Atlantic/South_Georgia" territory="GS"/>
+			<zoneItem type="Atlantic/St_Helena" territory="SH"/>
+			<zoneItem type="Atlantic/Stanley" territory="FK"/>
+			<zoneItem type="Australia/Adelaide" territory="AU" aliases="Australia/South"/>
+			<zoneItem type="Australia/Brisbane" territory="AU" aliases="Australia/Queensland"/>
+			<zoneItem type="Australia/Broken_Hill" territory="AU" aliases="Australia/Yancowinna"/>
+			<zoneItem type="Australia/Currie" territory="AU"/>
+			<zoneItem type="Australia/Darwin" territory="AU" aliases="Australia/North"/>
+			<zoneItem type="Australia/Hobart" territory="AU" aliases="Australia/Tasmania"/>
+			<zoneItem type="Australia/Lindeman" territory="AU"/>
+			<zoneItem type="Australia/Lord_Howe" territory="AU" aliases="Australia/LHI"/>
+			<zoneItem type="Australia/Melbourne" territory="AU" aliases="Australia/Victoria"/>
+			<zoneItem type="Australia/Perth" territory="AU" aliases="Australia/West"/>
+			<zoneItem type="Australia/Sydney" territory="AU" aliases="Australia/ACT Australia/Canberra Australia/NSW"/>
+			<zoneItem type="Etc/GMT" territory="001" aliases="Etc/GMT+0 Etc/GMT-0 Etc/GMT0 Etc/Greenwich Etc/UCT Etc/UTC Etc/Universal Etc/Zulu GMT GMT+0 GMT-0 GMT0 Greenwich UCT UTC Universal Zulu"/>
+			<zoneItem type="Etc/GMT-1" territory="001"/>
+			<zoneItem type="Etc/GMT-2" territory="001"/>
+			<zoneItem type="Etc/GMT-3" territory="001"/>
+			<zoneItem type="Etc/GMT-4" territory="001"/>
+			<zoneItem type="Etc/GMT-5" territory="001"/>
+			<zoneItem type="Etc/GMT-6" territory="001"/>
+			<zoneItem type="Etc/GMT-7" territory="001"/>
+			<zoneItem type="Etc/GMT-8" territory="001"/>
+			<zoneItem type="Etc/GMT-9" territory="001"/>
+			<zoneItem type="Etc/GMT-10" territory="001"/>
+			<zoneItem type="Etc/GMT-11" territory="001"/>
+			<zoneItem type="Etc/GMT-12" territory="001"/>
+			<zoneItem type="Etc/GMT-13" territory="001"/>
+			<zoneItem type="Etc/GMT-14" territory="001"/>
+			<zoneItem type="Etc/GMT+1" territory="001"/>
+			<zoneItem type="Etc/GMT+2" territory="001"/>
+			<zoneItem type="Etc/GMT+3" territory="001"/>
+			<zoneItem type="Etc/GMT+4" territory="001"/>
+			<zoneItem type="Etc/GMT+5" territory="001"/>
+			<zoneItem type="Etc/GMT+6" territory="001"/>
+			<zoneItem type="Etc/GMT+7" territory="001"/>
+			<zoneItem type="Etc/GMT+8" territory="001"/>
+			<zoneItem type="Etc/GMT+9" territory="001"/>
+			<zoneItem type="Etc/GMT+10" territory="001"/>
+			<zoneItem type="Etc/GMT+11" territory="001"/>
+			<zoneItem type="Etc/GMT+12" territory="001"/>
+			<zoneItem type="Etc/Unknown" territory="001"/>
+			<zoneItem type="Europe/Amsterdam" territory="NL"/>
+			<zoneItem type="Europe/Andorra" territory="AD"/>
+			<zoneItem type="Europe/Athens" territory="GR"/>
+			<zoneItem type="Europe/Belgrade" territory="CS"/>
+			<zoneItem type="Europe/Berlin" territory="DE"/>
+			<zoneItem type="Europe/Bratislava" territory="SK"/>
+			<zoneItem type="Europe/Brussels" territory="BE"/>
+			<zoneItem type="Europe/Bucharest" territory="RO"/>
+			<zoneItem type="Europe/Budapest" territory="HU"/>
+			<zoneItem type="Europe/Chisinau" territory="MD" aliases="Europe/Tiraspol"/>
+			<zoneItem type="Europe/Copenhagen" territory="DK"/>
+			<zoneItem type="Europe/Dublin" territory="IE" aliases="Eire"/>
+			<zoneItem type="Europe/Gibraltar" territory="GI"/>
+			<zoneItem type="Europe/Helsinki" territory="FI"/>
+			<zoneItem type="Europe/Istanbul" territory="TR" aliases="Asia/Istanbul Turkey"/>
+			<zoneItem type="Europe/Kaliningrad" territory="RU"/>
+			<zoneItem type="Europe/Kiev" territory="UA"/>
+			<zoneItem type="Europe/Lisbon" territory="PT" aliases="Portugal"/>
+			<zoneItem type="Europe/Ljubljana" territory="SI"/>
+			<zoneItem type="Europe/London" territory="GB" aliases="Europe/Belfast GB GB-Eire"/>
+			<zoneItem type="Europe/Luxembourg" territory="LU"/>
+			<zoneItem type="Europe/Madrid" territory="ES"/>
+			<zoneItem type="Europe/Malta" territory="MT"/>
+			<zoneItem type="Europe/Mariehamn" territory="AX"/>
+			<zoneItem type="Europe/Minsk" territory="BY"/>
+			<zoneItem type="Europe/Monaco" territory="MC"/>
+			<zoneItem type="Europe/Moscow" territory="RU" aliases="W-SU"/>
+			<zoneItem type="Europe/Oslo" territory="NO"/>
+			<zoneItem type="Europe/Paris" territory="FR"/>
+			<zoneItem type="Europe/Prague" territory="CZ"/>
+			<zoneItem type="Europe/Riga" territory="LV"/>
+			<zoneItem type="Europe/Rome" territory="IT"/>
+			<zoneItem type="Europe/Samara" territory="RU"/>
+			<zoneItem type="Europe/San_Marino" territory="SM"/>
+			<zoneItem type="Europe/Sarajevo" territory="BA"/>
+			<zoneItem type="Europe/Simferopol" territory="UA"/>
+			<zoneItem type="Europe/Skopje" territory="MK"/>
+			<zoneItem type="Europe/Sofia" territory="BG"/>
+			<zoneItem type="Europe/Stockholm" territory="SE"/>
+			<zoneItem type="Europe/Tallinn" territory="EE"/>
+			<zoneItem type="Europe/Tirane" territory="AL"/>
+			<zoneItem type="Europe/Uzhgorod" territory="UA"/>
+			<zoneItem type="Europe/Vaduz" territory="LI"/>
+			<zoneItem type="Europe/Vatican" territory="VA"/>
+			<zoneItem type="Europe/Vienna" territory="AT"/>
+			<zoneItem type="Europe/Vilnius" territory="LT"/>
+			<zoneItem type="Europe/Warsaw" territory="PL" aliases="Poland"/>
+			<zoneItem type="Europe/Zagreb" territory="HR"/>
+			<zoneItem type="Europe/Zaporozhye" territory="UA"/>
+			<zoneItem type="Europe/Zurich" territory="CH"/>
+			<zoneItem type="Indian/Antananarivo" territory="MG"/>
+			<zoneItem type="Indian/Chagos" territory="IO"/>
+			<zoneItem type="Indian/Christmas" territory="CX"/>
+			<zoneItem type="Indian/Cocos" territory="CC"/>
+			<zoneItem type="Indian/Comoro" territory="KM"/>
+			<zoneItem type="Indian/Kerguelen" territory="TF"/>
+			<zoneItem type="Indian/Mahe" territory="SC"/>
+			<zoneItem type="Indian/Maldives" territory="MV"/>
+			<zoneItem type="Indian/Mauritius" territory="MU"/>
+			<zoneItem type="Indian/Mayotte" territory="YT"/>
+			<zoneItem type="Indian/Reunion" territory="RE"/>
+			<zoneItem type="Pacific/Apia" territory="WS"/>
+			<zoneItem type="Pacific/Auckland" territory="NZ" aliases="NZ"/>
+			<zoneItem type="Pacific/Chatham" territory="NZ" aliases="NZ-CHAT"/>
+			<zoneItem type="Pacific/Easter" territory="CL" aliases="Chile/EasterIsland"/>
+			<zoneItem type="Pacific/Efate" territory="VU"/>
+			<zoneItem type="Pacific/Enderbury" territory="KI"/>
+			<zoneItem type="Pacific/Fakaofo" territory="TK"/>
+			<zoneItem type="Pacific/Fiji" territory="FJ"/>
+			<zoneItem type="Pacific/Funafuti" territory="TV"/>
+			<zoneItem type="Pacific/Galapagos" territory="EC"/>
+			<zoneItem type="Pacific/Gambier" territory="PF" aliases="SystemV/YST9"/>
+			<zoneItem type="Pacific/Guadalcanal" territory="SB"/>
+			<zoneItem type="Pacific/Guam" territory="GU"/>
+			<zoneItem type="Pacific/Honolulu" territory="US" aliases="HST SystemV/HST10 US/Hawaii"/>
+			<zoneItem type="Pacific/Johnston" territory="UM"/>
+			<zoneItem type="Pacific/Kiritimati" territory="KI"/>
+			<zoneItem type="Pacific/Kosrae" territory="FM"/>
+			<zoneItem type="Pacific/Kwajalein" territory="MH" aliases="Kwajalein"/>
+			<zoneItem type="Pacific/Majuro" territory="MH"/>
+			<zoneItem type="Pacific/Marquesas" territory="PF"/>
+			<zoneItem type="Pacific/Midway" territory="UM"/>
+			<zoneItem type="Pacific/Nauru" territory="NR"/>
+			<zoneItem type="Pacific/Niue" territory="NU"/>
+			<zoneItem type="Pacific/Norfolk" territory="NF"/>
+			<zoneItem type="Pacific/Noumea" territory="NC"/>
+			<zoneItem type="Pacific/Pago_Pago" territory="AS" aliases="Pacific/Samoa US/Samoa"/>
+			<zoneItem type="Pacific/Palau" territory="PW"/>
+			<zoneItem type="Pacific/Pitcairn" territory="PN" aliases="SystemV/PST8"/>
+			<zoneItem type="Pacific/Ponape" territory="FM"/>
+			<zoneItem type="Pacific/Port_Moresby" territory="PG"/>
+			<zoneItem type="Pacific/Rarotonga" territory="CK"/>
+			<zoneItem type="Pacific/Saipan" territory="MP"/>
+			<zoneItem type="Pacific/Tahiti" territory="PF"/>
+			<zoneItem type="Pacific/Tarawa" territory="KI"/>
+			<zoneItem type="Pacific/Tongatapu" territory="TO"/>
+			<zoneItem type="Pacific/Truk" territory="FM" aliases="Pacific/Yap"/>
+			<zoneItem type="Pacific/Wake" territory="UM"/>
+			<zoneItem type="Pacific/Wallis" territory="WF"/>
+		</zoneFormatting>
+	</timezoneData>
+</supplementalData>
diff --git a/JodaTimeContrib/i18n/src/test/org/joda/time/contrib/i18n/TestTerritory.java b/JodaTimeContrib/i18n/src/test/org/joda/time/contrib/i18n/TestTerritory.java
new file mode 100644
index 000000000..2ae84ab30
--- /dev/null
+++ b/JodaTimeContrib/i18n/src/test/org/joda/time/contrib/i18n/TestTerritory.java
@@ -0,0 +1,39 @@
+/*
+ *  Copyright 2006 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.contrib.i18n;
+
+import junit.framework.TestCase;
+
+/**
+ * Test Territory.
+ */
+public class TestTerritory extends TestCase {
+
+    //-----------------------------------------------------------------------
+    public void testGB() {
+        Territory t = Territory.forID("GB");
+        assertEquals("GB", t.getID());
+        assertEquals(1, t.getZones().length);
+        assertEquals("Europe/London", t.getZones()[0].getID());
+        assertEquals("Europe/London", t.getZone().getID());
+        assertEquals(1, t.getFirstDayOfWeek());
+        assertEquals(1, t.getBusinessWeekStart());
+        assertEquals(5, t.getBusinessWeekEnd());
+        assertEquals(6, t.getWeekendStart());
+        assertEquals(7, t.getWeekendEnd());
+    }
+
+}
diff --git a/JodaTimeContrib/i18n/xdocs/changes.xml b/JodaTimeContrib/i18n/xdocs/changes.xml
new file mode 100644
index 000000000..eae6e681b
--- /dev/null
+++ b/JodaTimeContrib/i18n/xdocs/changes.xml
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+
+<document>
+  <properties>
+    <title>Java date and time API - I18N - Changes</title>
+    <author email="scolebourne@users.sourceforge.net">Stephen Colebourne</author>
+  </properties>
+  <body>
+
+    <!-- types are add, fix, remove, update -->
+    <release version="0.1" date="2006-08-20" description="Initial version">
+      <action dev="scolebourne" type="add">
+        Create initial version.
+      </action>              
+    </release>
+
+  </body>
+</document>
\ No newline at end of file
diff --git a/JodaTimeContrib/i18n/xdocs/images/joda.png b/JodaTimeContrib/i18n/xdocs/images/joda.png
new file mode 100644
index 0000000000000000000000000000000000000000..435df26a39732551d2f7ed9b1fdf288be1c83875
GIT binary patch
literal 2919
zcmY*bc{EgSAHT9>C)v0BESbp~S(CBGl$e?^_B~6ojwNKGWSNNUMkJ&mhRl>=EM>`7
zw&BN^Y$4f83=+Nf?T`1I_n!0I=bn4c{XEZozMtibLs(nzaEfyR0KfycG`j}QVc>wU
z9|P|ue%BJgi6g|);lD4L{tg?3&VRv&<Kgft=Eterg8UphIyI<i0N`SSn;D~`iq;(h
zt&rmqaY478CQY0sFSAysyvuRKb8CC3E1D8gl&uN|0<L~w7;mSh;`{CMyf15?_PMm@
zev$O4Gq6zXT!PpL?{n*rgh-9p#P4OVI2kQDc_X{@BUsVG*O+LrAHje6<CZt6%X)2L
z8)0{r^ai5`pu#vanIuU3j*Z0kI&&+U-#^a-UhyNf9aEqZDxEnGg+2Q&a-H=qPb?q}
zx0mHik$r6(9SfaRXPTqQ!+x<OVM*8>gY)N|RP*g@ZEu__R6M^2V~;&6|M-)S2L9Mx
zz?feiZs@?}teW3@okU-cq+H-<H=w=$W87J0{J(XS&kU%hZES30E80xI4fVocvbsE>
zxqT}uD<l%Bv(t=?x`-(@#Qyq-*W{BnnEkn5QBiT6SF&JJjOtlm1dD5Z{W>Bb;A4Px
zSfg{rHHWKL>%*1?($dnpM18a$(<dhfiq8|qS6f`wjQJH56mIWsU^g0<AnEk=)|efC
zCnt&Y`J3alDr#!Metw856dVqxM6T<{?y0BG-!+>3@KB;VU21iGy({#0mxx;pk?8U!
z$OVa{c6PF4bXOCJwr6rb4q6D`9T~Z%n$HE$XteqHdDP+d_BK7ZO+}E?ckl&?gz@u(
zNb({Va5$U`CGtm<fqvjrQ^fxMz5tE|&<^@MF*cUiqZ2$`Q&ZC!`nBCl6pcpzOQ%y_
zzAr^olF4C*zjnwxP7MJLrlzJc{6<#QV~%cae1Nm64!G@^R&0u}h=`r5Yx>u{PdYQ5
zU0uV+GcQ%_?CjXU4$lE8W@T=7_PrZ;{^XJlb~j6q==(a;QC{KUf@iUY;Kv670s@GW
z>GRjBat4>E`#B`(jHRJcQ$G#Sq!TQed3mP=aF9^&<iCaJ3ah`RP;Pf5@%$9aD=eIx
znCL;|ee&UAImVlupxfKq+nsT0_u#O&xcJA9AC+Jkab~jh_Gx>5`ahuud!dZJTqXb4
zF)=aX0J_c<`)hl-zP`S;w)UZfPMNpvZN}PIwVkhz4=_7YaasJ~hxJHiqdRw69f{g_
zt6Q7X*rnoI5DL_p5=m@po7vp`x&NEbaL+v?1W`9$je4Qt)BqUC3!D{y$d=$?*b$&j
zuWLK{b+FmS43rGc)O%S32XB7=9^&OSPx9^u++$;#D=HQl>-23`d3cP0^gWsB+nX)r
z78x6#8_Ca}bp~k1?Tp#^ak3Z}>4vt?g@|$|ef{bq**zTowae>ZZDWd(N##gvPfzD<
zo5@(&oTAtv5br$efv3&QvF`3N0=U?{xnz(_z@vhKC=k<KJ*9`4nc3-0ka^w^Hqy`U
z+Zv5LgWa9#>0$R|J9f9JNx$=RE0%(;E*_jr6;Ug*?DMRTT$?Z!Tl*1ZU96udtf8m3
zPql$n94G_w^75mjqeIC}(LYZYmK(`TkbU`VVOm-d-)D_SS2+%9#{66E95#)wvc`|Q
z-VR)!d~F#6^z`&Vl$1>M84QLa5e<lniG}J)0tggpdlYGNl?hdaIwQz=(H_*7gM$O*
z)+SgO*Vq0+@GSk}jnOKkU9Gc2S|HykLrF<VmUtm0bo1}6{{DP5Lei)HetL7XCaJBi
zPEC}1<oxqz&rr6uS7BJg5^I8Km|$vGZf-6r+eoIeveJGct@|SnHyg7z+S;1e%Yr~4
zlo$5)!U<G8P0jg8%J8BJ6bhH&AL?Z>?(FU^=NR%hCvJOYERjp(ocO~oPlsn7(iz>J
z^-%`Wz#~ifoEmnM(vYqPLI6K+GKdwZEg@vj6yH7HyNFrwg$RP4Q<*le+k*S#Q~r(w
zNF!;>%QsdEm2xjFGnnG-m7n_?NN4mfaweMOToFwg?v>3<nIi*3las&pmr8bbcad69
zC^XX&WCJshKA)yGz`>i`Vc+%kt?o(>4_iXe8;J@9!ICG?qz;dg!Q?&=;-nCFhbXN*
zz(9bf@bTlYu&|12H-ds{`xhObN*MEx<_~2bYZ>!@{p;`!3iRH~dCH}0A-a+|jVK<>
zSx!e{Lt~>@?+XM3G{0AlL~BC%HCgElo!e*mCjzt;ng*A`^ozIAb>lb5Gz7kXu?+d-
zn5hGAvRrmALQjyh^ktG!*1}Ay)rB&U0aBu(AaYF0lPwKEU6lJ9!CBSfo~m1Gkw7(p
zkX+B*(a{0%wY+jgD77m<+v#-nKPnqDZ8jw;@GKv)SSHl(oVXw)41-CRz7Vs}lll91
z>_u6FQ(wM(xvqgnonZwiQ?=CPZ$u;#>E-1GyqgQj%F2SweU&()r6rVmLE6T~hHq@)
z=YA7~BGRyM!dr-wRi8?D{(RJ5Ys-v?zIjf(V@@4-Mj*&#@N*_cM@ReBRiR$Mj`o-<
zP6I<!YB{=EQBjd;Hc`aYo^+i9sBs{(ty9k5+TiBqMl1{r41nTJo!b&l_4fDY1oBi}
zE?qgA>qsVRs<h3(baf}D|6VgQ8TTSE7>tk4>6J2cb)8#VdQWzCwuqYR+RBPaQG2_|
zMQ6`T9iCu1`IcaXfg<ar4A@cB>c1)gJ6l5B(f(4VoP{u&ky+F4S&yJIRVZs|X|Wh1
zgu&REUfq%13T`{h%gakzF_#^tY_`%zMn;B)9^vu0JPU|mLqkJZz}n>No2;y?Dax6a
z({X<eLBW(5L}Nfd573qvLps<Yktg*}naK`|xW&$e>+`Ugy0}Og^QXYQT~22&gDzaT
zwKMM47Wc>S(lf)OJug(R4;dttgoMOkksf&V2@Iapu1V0*z&Mgy?He3?LkkEu27d#0
zQW2q)<N*fGW9`7nmmbU!i+8(b-ZM65U^8<sBUaJby=IDW+rt*yC*$j9!Kgr2=gP)y
z^(ywniP<-WLm%AAAxTL|B_<|T=Jqc>Fq0MJROdFm>Fn$ryT7%#pJUF|h&^EF@i501
z6%~Ol*y(Ifvy?9zUv-OFR`|ev>~4JDpm22!b-AXpvH<I$rlL|@Q1G;kStj<+;jWTh
z?ezd9oY~0e==C@BWvjaJ1DbEiaF_^hG8uIGj$}SxZ|~t;P+?&9mTNN2;(eb~5sBsx
z>YN+5z*u!L0@u>e*N>Tf$Mk_?U@qiAYHHOut_yNGYhhwy;&E^*PLj7n9dE^0%y(n#
z?5NZz3*%R-mcd*J3=9PGc`n4h3Kc|eAXZkUG;yiBYv3p8bS-h7zN05#(fj)P!1jUG
z&kSI(SQQnO^73*H4vueZ%b3QE>6X<<3dg;kzCM#=K6sWRk<p&WmC|^F`aF={z`=5F
zc=)Pdpr)p#5U05e|Jz%e()u|InEgVno8R;j2A3$<gN92L;?mMj@OUsBpddIDTDnO#
zlKDRSKB2VqAHdSeN*Mwv2<vA{Fm7>$85n$A#E{8kkhH;5O}Y8`#{tj!y`_>kRaI4=
zaJ&;ulwVo6f7~rjik)SIO0}zVbwMEFKPw1wf+a2Gk<YYz<+%RBwz{C$mlDb?7_KiR
zbbS${CsZ7$?GzEA1-Ogmfjh}sSZlSJT|970yMO;aD2i=Y4|P#j?2c`s$qAfU+C{mh
zke^Y_FJ7F<;X3;RwsZH7&LjEgrGa9w^m-B9q0KK}hP38?u`fE5Fq1t&nL6s=gZ<v7
z+Q`Yt38%7lyxiN{D=RCrbB$gkzL_q2vLN=iyF8-&e|s4RJf;x@X*Ewdz$O`hn_HXJ
Inz-Nl59h<Bq5uE@

literal 0
HcmV?d00001

diff --git a/JodaTimeContrib/i18n/xdocs/images/jodatime.png b/JodaTimeContrib/i18n/xdocs/images/jodatime.png
new file mode 100644
index 0000000000000000000000000000000000000000..4d5d609868c392a2871e8f15100f4ba54b7e92b6
GIT binary patch
literal 2850
zcmai$c{Ei28^^DVeMuoZ6GADZX}&_k*dh$3F_xskSY|?&2rZUx$d)V_YZwwqizRC)
z2GJN|EJNZuA|~rlWc%Ik@9*C^zkAN}JolV?&b^<{b6?N<{YkJzT@vD#<_7>k$imzN
z4b}uO)OZhp*_0ba2Mb?-xl=G$IsO|qCpt&K8=hMh)}}l|f?^`V0uC{)PXU1cgM|qa
z6PCZ^>|`Z+O$Kq!FXzjbL*gefr_U%sAI3z9NSJh{nAG}<48sy*e3UO|3V2MqTe)b!
zx@eLqE>JTI7jmbht&$qi)(&$1^ph9n<6?x9brZK*lh}8(v#?eFcpsF~V#9a(gQvo2
z;r;7Rk;!F*>FBG64kq}*rp4s_CMEt~_&Uhs>xK}0e0TxF^irc@$q$%_h=|_a-lA)^
zw(axmNCPh?Cnp;l8cl0P=H}NX`q&unzTwJ!uG%E1MLKPsy}c{0j%{H4+6nvhQ|dsy
zsj10Kc`jM%+?D~)R@cXm9}R|^uSfN<x^P<UAs#U4OQBg~zHmvY{_G<O3DtYYr)8{F
zh7=aRYPNg&?YF%l(q9Y@V>Z~omL{yNtpPwjwcf3RTSe5rI505KGV3%4psb>@U!S8J
zl}9{>W|>uBoKGLysCoVRFp<e*UU6~xj5qQV<EOlIs)4$h9Nm&jE`?(&>#D1(!G%44
z-t7wyZk#MFE&bj{;^F2NR;{nC&CJSb4QF%zyM1&89zoIitl?{KZyy=ihOMLo>Vp>o
zaeutp)791Wo6SimG-^Aen~D6J;?Bjxb9lb({+@KADygsgk(@vQnEp0%b)6a*7@#Cc
z6e8{s;d!3g<7L));H#-#>YAEuA*`$qxK%dW(%PEZ-`}-%lZeZsV(slim|ZEYtq35>
zTsilgcR$%QY0P*2XhVcyv4*FYm-gPu)cd~PUVZ@qQT|v6GC)UGgCrv>s~@sBytqhg
zhB~}*Nk~cAWV4yzBjIiuO%o3P)gH~MR@vW=>Vf50adC0Exw#<_2ncdo=Ml5PRxR`L
zv+(e6m5fi%X4!1E+wSx<F8+bv#JdEF`&-ABh)v?GSR`d{=eIXC_r$RzH=cX<?p;Bn
zb#-+U6BA3(CrN$Z19bG|ZB9Lr*AIIvHG<a`7Z*=cUSKjgn?KL9J++<u{g<bwi)wtM
zsis<WNL0orSmgfQ7--y$RJUvwjn}VVUz%kw7-v1YpfQF}5nf1Wa7#^%X!^nSyaL8b
z0CFf@dC+-gEzHx?Q{zM-i4<SEjffuC%cPfDWH_GAGFLWY9qwM++6s#{Z1<`$RXpOJ
zXhN3IbS>iD`MnZ<4*~=<y5R5Jxg#MiexWZEKSE6qRRw#qK`YSv-IXHqd-?0cTMr&a
zE*gziON^O~6_8LIe<XjAF*WrHT@ku6Ma5uB1_xl)c9^g*osE~*nz7H&?;{WP_xE<x
z;`8%mN$CeOO-P8>iY->>k%I0m^D1mx#O5gt4dG2AsK{hX_?0Sb;l(@0(oz)+g!3vf
zrwj}Xeqc^L@$>UrT3Y&1%Vcj;sZ`+%DGooi#KeaWqx#Fs%a@n^YsP)+oHrx(rrzHv
zE~L2IW3gXgRimuIb?3JG??2#*2n??pAt51<3gOYYHD<SWe?Ca3<?Y+`RId^OgIMR~
z>4|i9cPCqZIw*tJc+<@I6cBeMw{NdZ`N8uDxo~L^wAO*faJJXjUDim|fauYq>kC7w
zV*>A84T9&ah9}*$m23s{BllaXs)QKLp-cRNf)Dy)Y4Z{i5(;{uzBpVIxm?}h)#tpw
zR>1G8Wbmbf_$@3g2?6a|$=%E|*P3d{<QOTbjyDe;JZNapsTogZHhjPh_`txqvMEHw
zLTYDxV7WujZ6;1+<>cf%e!RLPXVTNtW5{Ru3_VNh?Twk>Mv4SAwiFk0062Kw%#hyg
zWkaQl7Ym>dHLtg}^AZRI@c(fF?UC`!(K@8);?hKY56arwGs|&mYAP))EhHoah|0=3
z21J>aAZ?VClyW#!t+H_vvK?BLbjILd;LOKZ5WY*P@`O5P!H(?LQ9l+J8TB^{3$7@p
zjS-9w%3+rv@m4ujalW@^0bn-hLbY9ZoMKDlfxI+H<62WVTg9EsI+Hsd8t@_oTS;HI
z1*X2fr0`oxMI73af;|avZ08aF*ntt&=Jdo4oSn_}ZG<{dMgV0ff|`3?I)yvS+oLO4
z>S9FgppUP=KlgRb69%a>WL+g4d{CoHd~vp}kgA}tuu;dW>eco2nD2*^C_&lDSNtwt
zzKnXRUoq%IE-5M0504?2RLbh^o;b=!q<{IM9lnm=$RMl1ZWtLE0l??0v1TRFDBc2;
zH>sn&y}c=fHI24Jq5404vaqyFdh}?jAy8?U+nOr|YD<rbDx-XhHBsDNo#6y<zkZJ2
z7<sw99fztrE1h!c2|rMTu0TZY|6Ex)4E$JH+S^zVRelf`XQZUBpAY2?OUxvZx;s0e
z<F2iDx0k=_`KYR@asuY*__vN?rW^o~NK8*ppT3eu4gI}*tyxwcad&KRkOKtfWlM|f
zHSR$x6Uo2)CpTH6OZiA7(%=Grq!=F`pRG)8nK(aJi|-fM*MR{;JF(Pm8L(p=;HnZ*
zQ@gd2%NC-eqd}0o@pznM=;oq*Z3?-{<<t{Yj`p*6?~VZhbDwiEGc(7=9EIbD==8ea
zc~nC}iu8H@EH`C~xcK-Er^w~W#tXr7J$UWhvIz#GztG?&$v86d;Gh~`Gt+Njhq-Y>
zUB4ahh@TB=WOk?C4j<bWJ?+}E^=Fd>vmPBD)(>07t<QdfAj|2Cpy<n_nB`c#17-B*
z&!00w1;mW}{L`eqiHQjg0Gy;3<>k1yjy|@aFMb&sI@0*&&6~Qqy88P1wzkN<Kb!oq
zMrvXs!^4IMqzEY3tL5G`<1%1dTJJSe+zCWtFOBA)CWfutWYpbQ_23o_-~-(+iBj!N
zlYfS;7+Sb&X-OxZSJqM&Agy+gr%7k^*FVMzfb{3(<;BOvf$s6-^0T(KgSs1|(^-Z?
zFh;a&XHcA|DoSVf2h4x6AwB)5%8)M{6tkXJ%Q3vXyggJZomltqC7nppye^z%2Pw9F
zxI8<}+UxRxX*j+C>=B@pNXD&g--VqqQA|TU-$6<IT+REPmzc;ui_hBm%)7R>Hjq<T
zn3@mDxUz+?LOzJ$#XG->t~ScGIvCH-&7sBYot!GLl|tN{ac&$O96^nD2g#<Oyx_Gj
z$o7Nh0ApigaOQXCs4`*2YwPRaCM+#2`)D+8`97oK)t)q^<HwJu%3oYuUgieOmD4vi
zHezB9HE41I(|eiFhnzgZ5C{YYhksnWprPT<s3nY#kArIR;JnSvo0@+h>&Bg(op?MR
z0J6V1$R5q6{I$_uj2Bj4KX=xT0ekBxXnfoog%UQk1Kq8vs>-?Q7yx=z*CV;Sr%zi6
zLn_U$$-I(#CG@Y8le_EREelZb%mx$19GyUN2L&=nr_%=pR@a!9k|_TyEy;<Bo^$&M
ziC=+B3W5R^a9hzL=+DN2FMJ2&ewAQi0{LSIl5*9-VRUpfo*9P0VBFmmlPE+2A)3q7
z*7k8tbZGX}Jgtxe@P*6V>kBZC^57{@Q?I}z?uQnQvh4Vz<>XQnYwPPft_*zp_RYUY
zS5J?{Vj0}u<po3%OpY8m@-M+Ef?HC4`de35cMW8I$6os1!8H-w7I<}6;7zqmuJI&B
R4?N!j7N#hZS4Oy){{UxZaMAz(

literal 0
HcmV?d00001

diff --git a/JodaTimeContrib/i18n/xdocs/index.xml b/JodaTimeContrib/i18n/xdocs/index.xml
new file mode 100644
index 000000000..9ffd7150b
--- /dev/null
+++ b/JodaTimeContrib/i18n/xdocs/index.xml
@@ -0,0 +1,77 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+
+<document>
+
+ <properties>
+  <title>Java date and time API - I18N support - Home</title>
+  <author email="scolebourne@users.sourceforge.net">Stephen Colebourne</author>
+ </properties>
+
+ <body>
+
+<section name="Joda Time - I18N support">
+<p>
+<a href="/index.html">Joda-Time</a> provides a complete quality alternative
+to the JDK date and time classes.
+Many aspects of date and time require internationalized data.
+This project provides access to additional I18N data not supplied as part of the
+standard Joda-Time release.
+</p>
+<ul>
+<li>Time zones by territory</li>
+<li>First day of week by territory</li>
+<li>Business week by territory</li>
+<li>Weekend by territory</li>
+</ul>
+<p>
+As a flavour of the functionality, here's how to find out what days are the weekend in Egypt:
+<source>
+  Territory t = Territory.forID("EG");
+  int weekendStartDay = t.getWeekendStart();
+  int weekendEndDay = t.getWeekendEnd();
+</source>
+<!--Version 0.1 was released on 2006-xx-xx -
+<a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=174357">Download now</a>
+-->
+</p>
+</section>
+
+
+<section name="Documentation">
+<p>
+Various documentation is available:
+<ul>
+<!--<li>The user guide - <a href="userguide.html">user guide</a></li>-->
+<li>The javadoc for the <a href="api-release/index.html">current release</a></li>
+<li>The javadoc for the <a href="apidocs/index.html">latest in development</a></li>
+<!--li>A <a href="faq.html">FAQ</a> list</li-->
+<li>The <a href="http://svn.sourceforge.net/viewcvs.cgi/joda-time/trunk/JodaTimeContrib/i18n/">Subversion repository</a></li>
+</ul>
+</p>
+</section>
+
+
+<section name="Releases">
+<p>
+<a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=174357">Release 0.1</a>
+is the current latest release.
+This release is a beta release and may have bugs.
+</p>
+<p>
+The dependencies are Joda-Time 1.0 or later.
+We recommend JDK 1.4 or later, and have performed no testing on earlier JDKs.
+</p>
+</section>
+
+
+<section name="Support">
+<p>
+The Joda-Time I18N support library was contributed to Joda-Time by Stephen Colebourne.
+</p>
+<p>
+For support on bugs, using the library or to volunteer please contact the <a href="mail-lists.html">mailing list</a>.
+Due to spam, you must be subscribed to the mailing list to send a mail.
+</p>
+</section>
+</body>
+</document>
diff --git a/JodaTimeContrib/i18n/xdocs/licensecover.xml b/JodaTimeContrib/i18n/xdocs/licensecover.xml
new file mode 100644
index 000000000..598667903
--- /dev/null
+++ b/JodaTimeContrib/i18n/xdocs/licensecover.xml
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+
+<document>
+ <properties>
+  <title>Java date and time API - I18N support - License</title>
+  <author email="scolebourne@joda.org">Stephen Colebourne</author>
+ </properties>
+
+<body>
+
+<section name="License information">
+<p>
+Joda-Time source code is released under the business-friendly
+<a href="license.html">Apache 2.0 license</a>.
+This is the same license as <a href="http://ant.apache.org">Ant</a>,
+<a href="http://www.springframework.org">Spring</a>,
+<a href="http://tomcat.apache.org">Tomcat</a> and
+<a href="http://jakarta.apache.org">Jakarta</a>.
+</p>
+<p>
+As is normal with the <a href="license.html">Apache 2.0 license</a>, a
+NOTICE file is used to express Joda-Time specifics:
+<source>
+=============================================================================
+= NOTICE file corresponding to section 4d of the Apache License Version 2.0 =
+=============================================================================
+This product includes software developed by
+Joda.org (http://www.joda.org/).
+</source>
+</p>
+</section>
+
+</body>
+</document>
diff --git a/JodaTimeContrib/i18n/xdocs/navigation.xml b/JodaTimeContrib/i18n/xdocs/navigation.xml
new file mode 100644
index 000000000..0a9bb660c
--- /dev/null
+++ b/JodaTimeContrib/i18n/xdocs/navigation.xml
@@ -0,0 +1,44 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+
+<project name="Joda Time">
+
+  <title>Joda Time</title>
+  <organizationLogo href="">Joda.org</organizationLogo>
+
+  <body>
+    <links>
+      <item name="Joda-Time" href="../../index.html"/>
+      <item name="JSP tags" href="../jsptags/index.html"/>
+      <item name="Hibernate" href="../hibernate/index.html"/>
+      <item name="I18N" href="/index.html"/>
+    </links>
+    <menu name="Joda Time I18N">
+      <item name="Overview" href="index.html"/>
+      <!--item name="Users guide" href="userguide.html"/-->
+      <item name="Javadoc (Release)" href="/api-release/index.html"/>
+      <item name="License" href="licensecover.html"/>
+      <item name="Release notes" href="changes-report.html"/>
+      <item name="Download" href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=174357"/>
+    </menu>
+    <menu name="Development">
+      <item name="Sourceforge" href="http://sourceforge.net/projects/joda-time/"/>
+      <item name="Mailing lists" href="mail-lists.html"/>
+      <item name="Tasks" href="tasks.html"/>
+      <item name="Subversion" href="http://svn.sourceforge.net/viewcvs.cgi/joda-time/trunk/JodaTimeContrib/i18n/"/>
+      <item name="Javadoc (Development)" href="apidocs/index.html"/>
+    </menu>
+
+    <menu name="Joda">
+      <item name="Joda home" href="http://joda.sourceforge.net"/>
+      <item name="Time" href="http://joda-time.sourceforge.net/index.html"/>
+      <item name="Beans" href="http://joda.sourceforge.net/beans.html"/>
+      <item name="Primitives" href="http://joda-primitives.sourceforge.net/index.html"/>
+    </menu>
+
+    <footer>
+      <a href="http://sourceforge.net">
+        <img src="http://sourceforge.net/sflogo.php?group_id=97367&amp;type=2" width="125" height="37" border="0" alt="SourceForge.net Logo" />
+      </a>
+    </footer>
+  </body>
+</project>
diff --git a/JodaTimeContrib/i18n/xdocs/stylesheets/joda-theme.css b/JodaTimeContrib/i18n/xdocs/stylesheets/joda-theme.css
new file mode 100644
index 000000000..5d616b279
--- /dev/null
+++ b/JodaTimeContrib/i18n/xdocs/stylesheets/joda-theme.css
@@ -0,0 +1,121 @@
+body, td, select, input, li{
+  font-family: Helvetica, Arial, sans-serif;
+  font-size: 13px;
+  background-color: #fff;
+}
+a {
+  text-decoration: none;
+}
+a:link {
+  color:#009;
+}
+a:visited  {
+  color:#009;
+}
+a:active, a:hover {
+  text-decoration: underline;
+}
+a.externalLink, a.externalLink:link, a.externalLink:visited, a.externalLink:active, a.externalLink:hover {
+  background: url(../images/external.png) right center no-repeat;
+  padding-right: 15px;
+}
+a.newWindow, a.newWindow:link, a.newWindow:visited, a.newWindow:active, a.newWindow:hover {
+  background: url(../images/newwindow.png) right center no-repeat;
+  padding-right: 18px;
+}
+h2 {
+  font-family: Verdana, Helvetica, Arial, sans-serif;
+  padding: 4px 4px 4px 6px;
+  border: 1px solid #999;
+  color: #006;
+  background-color: #eef;
+  font-weight:bold;
+  font-size: 16px;
+  margin-top: 4px;
+  margin-bottom: 6px;
+}
+h3 {
+  padding: 4px 4px 4px 6px;
+  border: 1px solid #aaa;
+  color: #006;
+  background-color: #eee;
+  font-weight: normal;
+  font-size: 14px;
+  margin-top: 4px;
+  margin-bottom: 6px;
+}
+p, ul {
+  font-size: 13px;
+  margin-top: 4px;
+  margin-bottom: 6px;
+}
+#banner {
+  background-color: #eef;
+  border-bottom: 1px solid #aaa;
+}
+#organizationLogo img, #projectLogo img {
+  border: 1px solid #999;
+}
+#breadcrumbs {
+  padding-top: 1px;
+  padding-bottom: 2px;
+  border-bottom: 1px solid #aaa;
+  background-color: #ddf;
+}
+#leftColumn {
+  margin: 8px 0 8px 4px;
+  border: 1px solid #999;
+  background-color: #eef;
+}
+#navcolumn {
+  padding: 6px 4px 0 6px;
+}
+#navcolumn h5 {
+  font-size: 12px;
+  border-bottom: 1px solid #aaaaaa;
+  padding-top: 2px;
+  font-weight: normal;
+}
+#navcolumn li {
+  font-size: 12px;
+  padding-left: 12px;
+  background-color: #eef;
+}
+#navcolumn a:active, #navcolumn a:hover {
+  text-decoration: none;
+}
+#lastPublished {
+  font-size: 10px;
+}
+table.bodyTable th {
+  color: white;
+  background-color: #bbb;
+  text-align: left;
+  font-weight: bold;
+  font-size: 13px;
+}
+
+table.bodyTable th, table.bodyTable td {
+  font-size: 13px;
+}
+
+table.bodyTable tr.a {
+  background-color: #ddd;
+}
+
+table.bodyTable tr.b {
+  background-color: #eee;
+}
+
+.source {
+  border: 1px solid #999;
+  padding: 8px;
+  margin: 6px;
+}
+#footer {
+  background-color: #eef;
+  border-top: 1px solid #999;
+}
+body {
+  padding-bottom: 0px;
+}
diff --git a/JodaTimeContrib/i18n/xdocs/stylesheets/maven-theme.css b/JodaTimeContrib/i18n/xdocs/stylesheets/maven-theme.css
new file mode 100644
index 000000000..5d616b279
--- /dev/null
+++ b/JodaTimeContrib/i18n/xdocs/stylesheets/maven-theme.css
@@ -0,0 +1,121 @@
+body, td, select, input, li{
+  font-family: Helvetica, Arial, sans-serif;
+  font-size: 13px;
+  background-color: #fff;
+}
+a {
+  text-decoration: none;
+}
+a:link {
+  color:#009;
+}
+a:visited  {
+  color:#009;
+}
+a:active, a:hover {
+  text-decoration: underline;
+}
+a.externalLink, a.externalLink:link, a.externalLink:visited, a.externalLink:active, a.externalLink:hover {
+  background: url(../images/external.png) right center no-repeat;
+  padding-right: 15px;
+}
+a.newWindow, a.newWindow:link, a.newWindow:visited, a.newWindow:active, a.newWindow:hover {
+  background: url(../images/newwindow.png) right center no-repeat;
+  padding-right: 18px;
+}
+h2 {
+  font-family: Verdana, Helvetica, Arial, sans-serif;
+  padding: 4px 4px 4px 6px;
+  border: 1px solid #999;
+  color: #006;
+  background-color: #eef;
+  font-weight:bold;
+  font-size: 16px;
+  margin-top: 4px;
+  margin-bottom: 6px;
+}
+h3 {
+  padding: 4px 4px 4px 6px;
+  border: 1px solid #aaa;
+  color: #006;
+  background-color: #eee;
+  font-weight: normal;
+  font-size: 14px;
+  margin-top: 4px;
+  margin-bottom: 6px;
+}
+p, ul {
+  font-size: 13px;
+  margin-top: 4px;
+  margin-bottom: 6px;
+}
+#banner {
+  background-color: #eef;
+  border-bottom: 1px solid #aaa;
+}
+#organizationLogo img, #projectLogo img {
+  border: 1px solid #999;
+}
+#breadcrumbs {
+  padding-top: 1px;
+  padding-bottom: 2px;
+  border-bottom: 1px solid #aaa;
+  background-color: #ddf;
+}
+#leftColumn {
+  margin: 8px 0 8px 4px;
+  border: 1px solid #999;
+  background-color: #eef;
+}
+#navcolumn {
+  padding: 6px 4px 0 6px;
+}
+#navcolumn h5 {
+  font-size: 12px;
+  border-bottom: 1px solid #aaaaaa;
+  padding-top: 2px;
+  font-weight: normal;
+}
+#navcolumn li {
+  font-size: 12px;
+  padding-left: 12px;
+  background-color: #eef;
+}
+#navcolumn a:active, #navcolumn a:hover {
+  text-decoration: none;
+}
+#lastPublished {
+  font-size: 10px;
+}
+table.bodyTable th {
+  color: white;
+  background-color: #bbb;
+  text-align: left;
+  font-weight: bold;
+  font-size: 13px;
+}
+
+table.bodyTable th, table.bodyTable td {
+  font-size: 13px;
+}
+
+table.bodyTable tr.a {
+  background-color: #ddd;
+}
+
+table.bodyTable tr.b {
+  background-color: #eee;
+}
+
+.source {
+  border: 1px solid #999;
+  padding: 8px;
+  margin: 6px;
+}
+#footer {
+  background-color: #eef;
+  border-top: 1px solid #999;
+}
+body {
+  padding-bottom: 0px;
+}
diff --git a/JodaTimeContrib/i18n/xdocs/tasks.xml b/JodaTimeContrib/i18n/xdocs/tasks.xml
new file mode 100644
index 000000000..7c66e9015
--- /dev/null
+++ b/JodaTimeContrib/i18n/xdocs/tasks.xml
@@ -0,0 +1,19 @@
+<?xml version="1.0"?>
+
+<document>
+ <properties>
+  <title>Java date and time API - I18N support - Tasks outstanding</title>
+  <author email="scolebourne@users.sourceforge.net">Stephen Colebourne</author>
+ </properties>
+
+ <body>
+
+<section name="Tasks outstanding">
+<p>
+The project needs a release!
+Contact the mailing lists for more details or to help.
+</p>
+</section>
+
+ </body>
+</document>
diff --git a/JodaTimeContrib/i18n/xdocs/userguide.xml b/JodaTimeContrib/i18n/xdocs/userguide.xml
new file mode 100644
index 000000000..7f2080a84
--- /dev/null
+++ b/JodaTimeContrib/i18n/xdocs/userguide.xml
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+
+<document>
+ <properties>
+  <title>Java date and time API - I18N support - User Guide</title>
+  <author email="scolebourne@users.sourceforge.net">Stephen Colebourne</author>
+ </properties>
+<body>
+
+<!-- ========================================================================= -->
+
+<section name="Introduction">
+<p>
+<a href="/index.html">Joda-Time</a> I18N support provides I18N classes.
+</p>
+
+<!-- ========================================================================= -->
+
+<subsection name="TODO">
+<p>
+TODO
+</p>
+</subsection>
+</section>
+
+<!-- ========================================================================= -->
+
+</body>
+</document>

From 1d78a8863d6722da78eadc102684f155f31b0b38 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 21 Aug 2006 20:51:12 +0000
Subject: [PATCH 06/54] Warn about API changes

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1120 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/i18n/xdocs/index.xml | 1 +
 1 file changed, 1 insertion(+)

diff --git a/JodaTimeContrib/i18n/xdocs/index.xml b/JodaTimeContrib/i18n/xdocs/index.xml
index 9ffd7150b..416a7f4b0 100644
--- a/JodaTimeContrib/i18n/xdocs/index.xml
+++ b/JodaTimeContrib/i18n/xdocs/index.xml
@@ -56,6 +56,7 @@ Various documentation is available:
 <a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=174357">Release 0.1</a>
 is the current latest release.
 This release is a beta release and may have bugs.
+The API is liable to change without deprecation until version 1.0 is released.
 </p>
 <p>
 The dependencies are Joda-Time 1.0 or later.

From f6e989bf221f8484509fa2313714a3192453d303 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 21 Aug 2006 20:52:07 +0000
Subject: [PATCH 07/54] Include dat file in jar file

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1121 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/i18n/project.xml | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/JodaTimeContrib/i18n/project.xml b/JodaTimeContrib/i18n/project.xml
index 039419080..7da94ce46 100644
--- a/JodaTimeContrib/i18n/project.xml
+++ b/JodaTimeContrib/i18n/project.xml
@@ -79,6 +79,12 @@
       </includes>
     </unitTest>
     <resources>
+      <resource>
+        <directory>src/java</directory>
+        <includes>
+          <include>org/joda/time/contrib/i18n/*.dat</include>
+        </includes>
+      </resource>
       <resource>
         <targetPath>meta-inf</targetPath>
         <includes>

From fd94420c2d7bd6f38bd6df371f1f0b1e82cd0ef2 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 21 Aug 2006 21:18:48 +0000
Subject: [PATCH 08/54] Init package id

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1122 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/i18n/xdocs/index.xml      | 7 +++----
 JodaTimeContrib/i18n/xdocs/navigation.xml | 2 +-
 2 files changed, 4 insertions(+), 5 deletions(-)

diff --git a/JodaTimeContrib/i18n/xdocs/index.xml b/JodaTimeContrib/i18n/xdocs/index.xml
index 416a7f4b0..eaf8618e4 100644
--- a/JodaTimeContrib/i18n/xdocs/index.xml
+++ b/JodaTimeContrib/i18n/xdocs/index.xml
@@ -30,9 +30,8 @@ As a flavour of the functionality, here's how to find out what days are the week
   int weekendStartDay = t.getWeekendStart();
   int weekendEndDay = t.getWeekendEnd();
 </source>
-<!--Version 0.1 was released on 2006-xx-xx -
-<a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=174357">Download now</a>
--->
+Version 0.1 was released on 2006-08-21 -
+<a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=201487">Download now</a>
 </p>
 </section>
 
@@ -53,7 +52,7 @@ Various documentation is available:
 
 <section name="Releases">
 <p>
-<a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=174357">Release 0.1</a>
+<a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=201487">Release 0.1</a>
 is the current latest release.
 This release is a beta release and may have bugs.
 The API is liable to change without deprecation until version 1.0 is released.
diff --git a/JodaTimeContrib/i18n/xdocs/navigation.xml b/JodaTimeContrib/i18n/xdocs/navigation.xml
index 0a9bb660c..c4912bdb3 100644
--- a/JodaTimeContrib/i18n/xdocs/navigation.xml
+++ b/JodaTimeContrib/i18n/xdocs/navigation.xml
@@ -18,7 +18,7 @@
       <item name="Javadoc (Release)" href="/api-release/index.html"/>
       <item name="License" href="licensecover.html"/>
       <item name="Release notes" href="changes-report.html"/>
-      <item name="Download" href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=174357"/>
+      <item name="Download" href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=201487"/>
     </menu>
     <menu name="Development">
       <item name="Sourceforge" href="http://sourceforge.net/projects/joda-time/"/>

From 5e367af6493973d2f1b0f9907a3dbd3f6141e96a Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 21 Aug 2006 21:19:54 +0000
Subject: [PATCH 09/54] Release 0.1

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1123 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/i18n/xdocs/changes.xml | 5 ++++-
 1 file changed, 4 insertions(+), 1 deletion(-)

diff --git a/JodaTimeContrib/i18n/xdocs/changes.xml b/JodaTimeContrib/i18n/xdocs/changes.xml
index eae6e681b..80ed7ac72 100644
--- a/JodaTimeContrib/i18n/xdocs/changes.xml
+++ b/JodaTimeContrib/i18n/xdocs/changes.xml
@@ -8,7 +8,10 @@
   <body>
 
     <!-- types are add, fix, remove, update -->
-    <release version="0.1" date="2006-08-20" description="Initial version">
+    <release version="0.1" date="2006-08-21" description="Initial version">
+      <action dev="scolebourne" type="add">
+        Release.
+      </action>              
       <action dev="scolebourne" type="add">
         Create initial version.
       </action>              

From 9a68ba215989a0d82a6973539791aaba8dbcabef Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 21 Aug 2006 21:51:12 +0000
Subject: [PATCH 10/54] Move generator classes so they aren't in the jar

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1124 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../org/joda/time/contrib/i18n/CLDRTerritoryGenerator.java    | 4 ++--
 .../org/joda/time/contrib/i18n/supplementalData.xml           | 0
 2 files changed, 2 insertions(+), 2 deletions(-)
 rename JodaTimeContrib/i18n/src/{java => gen}/org/joda/time/contrib/i18n/CLDRTerritoryGenerator.java (98%)
 rename JodaTimeContrib/i18n/src/{java => gen}/org/joda/time/contrib/i18n/supplementalData.xml (100%)

diff --git a/JodaTimeContrib/i18n/src/java/org/joda/time/contrib/i18n/CLDRTerritoryGenerator.java b/JodaTimeContrib/i18n/src/gen/org/joda/time/contrib/i18n/CLDRTerritoryGenerator.java
similarity index 98%
rename from JodaTimeContrib/i18n/src/java/org/joda/time/contrib/i18n/CLDRTerritoryGenerator.java
rename to JodaTimeContrib/i18n/src/gen/org/joda/time/contrib/i18n/CLDRTerritoryGenerator.java
index 7cf72f6f5..74424d5ee 100644
--- a/JodaTimeContrib/i18n/src/java/org/joda/time/contrib/i18n/CLDRTerritoryGenerator.java
+++ b/JodaTimeContrib/i18n/src/gen/org/joda/time/contrib/i18n/CLDRTerritoryGenerator.java
@@ -71,7 +71,7 @@ public static void main(String[] args) {
      * Writes the data to a file.
      */
     private void writeFile() {
-        File file = new File("C:/joda/time-i18n/src/java/org/joda/time/contrib/i18n/CLDRTerritoryData.dat");
+        File file = new File("src/java/org/joda/time/contrib/i18n/CLDRTerritoryData.dat");
         ObjectOutputStream oos = null;
         try {
             oos = new ObjectOutputStream(
@@ -145,7 +145,7 @@ private void writeData(ObjectOutputStream oos) throws IOException {
      * Reads the CLDR XML data.
      */
     private void readXML() {
-        File file = new File("C:/joda/time-i18n/src/java/org/joda/time/contrib/i18n/supplementalData.xml");
+        File file = new File("src/gen/org/joda/time/contrib/i18n/supplementalData.xml");
         try {
             DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
             DocumentBuilder builder = factory.newDocumentBuilder();
diff --git a/JodaTimeContrib/i18n/src/java/org/joda/time/contrib/i18n/supplementalData.xml b/JodaTimeContrib/i18n/src/gen/org/joda/time/contrib/i18n/supplementalData.xml
similarity index 100%
rename from JodaTimeContrib/i18n/src/java/org/joda/time/contrib/i18n/supplementalData.xml
rename to JodaTimeContrib/i18n/src/gen/org/joda/time/contrib/i18n/supplementalData.xml

From ba5138148a48265582680f2175fb47b6aa0e0522 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Wed, 23 Aug 2006 16:59:06 +0000
Subject: [PATCH 11/54] Updated tz database to version 2006j.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1125 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/java/org/joda/time/tz/src/Readme.txt  |   2 +-
 JodaTime/src/java/org/joda/time/tz/src/asia   |  50 ++-
 .../src/java/org/joda/time/tz/src/australasia |   8 +-
 .../src/java/org/joda/time/tz/src/backward    |   3 +-
 JodaTime/src/java/org/joda/time/tz/src/europe |  33 +-
 .../java/org/joda/time/tz/src/northamerica    | 308 ++++++++++++------
 6 files changed, 277 insertions(+), 127 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
index 8daab0d4d..1b1f438be 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
+++ b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
@@ -1,2 +1,2 @@
 The data files in this directory were obtained from the public tz database,
-http://www.twinsun.com/tz/tz-link.htm, version 2006g.
+http://www.twinsun.com/tz/tz-link.htm, version 2006j.
diff --git a/JodaTime/src/java/org/joda/time/tz/src/asia b/JodaTime/src/java/org/joda/time/tz/src/asia
index 5e0622213..f7bad1ad8 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/asia
+++ b/JodaTime/src/java/org/joda/time/tz/src/asia
@@ -1,4 +1,4 @@
-# @(#)asia	8.4
+# @(#)asia	8.5
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
@@ -212,14 +212,27 @@ Rule	Shang	1941	only	-	Mar	16	0:00	1:00	D
 Rule	PRC	1986	only	-	May	 4	0:00	1:00	D
 Rule	PRC	1986	1991	-	Sep	Sun>=11	0:00	0	S
 Rule	PRC	1987	1991	-	Apr	Sun>=10	0:00	1:00	D
-#
-# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-#
+
 # From Anthony Fok (2001-12-20):
 # BTW, I did some research on-line and found some info regarding these five
 # historic timezones from some Taiwan websites.  And yes, there are official
-# Chinese names for these locales (before 1949):
+# Chinese names for these locales (before 1949).
+# 
+# From Jesper Norgaard Welen (2006-07-14):
+# I have investigated the timezones around 1970 on the
+# http://www.astro.com/atlas site [with provinces and county
+# boundaries summarized below]....  A few other exceptions were two
+# counties on the Sichuan side of the Xizang-Sichuan border,
+# counties Dege and Baiyu which lies on the Sichuan side and are
+# therefore supposed to be GMT+7, Xizang region being GMT+6, but Dege
+# county is GMT+8 according to astro.com while Baiyu county is GMT+6
+# (could be true), for the moment I am assuming that those two
+# counties are mistakes in the astro.com data.
+
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 # Changbai Time ("Long-white Time", Long-white = Heilongjiang area)
+# Heilongjiang (except Mohe county), Jilin
 Zone	Asia/Harbin	8:26:44	-	LMT	1928 # or Haerbin
 			8:30	-	CHAT	1932 Mar # Changbai Time
 			8:00	-	CST	1940
@@ -227,18 +240,35 @@ Zone	Asia/Harbin	8:26:44	-	LMT	1928 # or Haerbin
 			8:30	-	CHAT	1980 May
 			8:00	PRC	C%sT
 # Zhongyuan Time ("Central plain Time")
+# most of China
 Zone	Asia/Shanghai	8:05:52	-	LMT	1928
 			8:00	Shang	C%sT	1949
 			8:00	PRC	C%sT
 # Long-shu Time (probably due to Long and Shu being two names of that area)
+# Guangxi, Guizhou, Hainan, Ningxia, Sichuan, Shaanxi, and Yunnan;
+# most of Gansu; west Inner Mongolia; west Qinghai; and the Guangdong
+# counties Deqing, Enping, Kaiping, Luoding, Taishan, Xinxing,
+# Yangchun, Yangjiang, Yu'nan, and Yunfu.
 Zone	Asia/Chongqing	7:06:20	-	LMT	1928 # or Chungking
 			7:00	-	LONT	1980 May # Long-shu Time
 			8:00	PRC	C%sT
 # Xin-zang Time ("Xinjiang-Tibet Time")
+# The Gansu counties Aksay, Anxi, Dunhuang, Subei; west Qinghai;
+# the Guangdong counties  Xuwen, Haikang, Suixi, Lianjiang,
+# Zhanjiang, Wuchuan, Huazhou, Gaozhou, Maoming, Dianbai, and Xinyi;
+# east Tibet, including Lhasa, Chamdo, Shigaise, Jimsar, Shawan and Hutubi;
+# east Xinjiang, including Urumqi, Turpan, Karamay, Korla, Minfeng, Jinghe,
+# Wusu, Qiemo, Xinyan, Wulanwusu, Jinghe, Yumin, Tacheng, Tuoli, Emin,
+# Shihezi, Changji, Yanqi, Heshuo, Tuokexun, Tulufan, Shanshan, Hami,
+# Fukang, Kuitun, Kumukuli, Miquan, Qitai, and Turfan.
 Zone	Asia/Urumqi	5:50:20	-	LMT	1928 # or Urumchi
 			6:00	-	URUT	1980 May # Urumqi Time
 			8:00	PRC	C%sT
 # Kunlun Time
+# West Tibet, including Pulan, Aheqi, Shufu, Shule;
+# West Xinjiang, including Aksu, Atushi, Yining, Hetian, Cele, Luopu, Nileke,
+# Zhaosu, Tekesi, Gongliu, Chabuchaer, Huocheng, Bole, Pishan, Suiding,
+# and Yarkand.
 Zone	Asia/Kashgar	5:03:56	-	LMT	1928 # or Kashi or Kaxgar
 			5:30	-	KAST	1940	 # Kashgar Time
 			5:00	-	KAST	1980 May
@@ -1076,10 +1106,12 @@ Zone	Asia/Bishkek	4:58:24 -	LMT	1924 May  2
 
 # Korea (North and South)
 
-# From Guy Harris:
-# According to someone at the Korean Times in San Francisco,
-# Daylight Savings Time was not observed until 1987.  He did not know
-# at what time of day DST starts or ends.
+# From Annie I. Bang (2006-07-10) in
+# <http://www.koreaherald.co.kr/SITE/data/html_dir/2006/07/10/200607100012.asp>:
+# The Ministry of Commerce, Industry and Energy has already
+# commissioned a research project [to reintroduce DST] and has said
+# the system may begin as early as 2008....  Korea ran a daylight
+# saving program from 1949-61 but stopped it during the 1950-53 Korean War.
 
 # From Shanks & Pottenger:
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
diff --git a/JodaTime/src/java/org/joda/time/tz/src/australasia b/JodaTime/src/java/org/joda/time/tz/src/australasia
index 513c4d08b..2baeb7217 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/australasia
+++ b/JodaTime/src/java/org/joda/time/tz/src/australasia
@@ -1,4 +1,4 @@
-# @(#)australasia	8.2
+# @(#)australasia	8.3
 # <pre>
 
 # This file also includes Pacific islands.
@@ -587,6 +587,12 @@ Zone	Pacific/Wallis	12:15:20 -	LMT	1901
 #	WST	for any place operating at a GMTOFF of 8:00
 #	EST	for any place operating at a GMTOFF of 10:00
 
+# From Chuck Soper (2006-06-01):
+# I recently found this Australian government web page on time zones:
+# <http://www.australia.gov.au/about-australia-13time>
+# And this government web page lists time zone names and abbreviations:
+# <http://www.bom.gov.au/climate/averages/tables/daysavtm.shtml>
+
 # From Paul Eggert (2001-04-05), summarizing a long discussion about "EST"
 # versus "AEST" etc.:
 #
diff --git a/JodaTime/src/java/org/joda/time/tz/src/backward b/JodaTime/src/java/org/joda/time/tz/src/backward
index fb7d4b0d1..ca04e6e0c 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/backward
+++ b/JodaTime/src/java/org/joda/time/tz/src/backward
@@ -1,4 +1,4 @@
-# @(#)backward	8.1
+# @(#)backward	8.2
 
 # This file provides links between current names for time zones
 # and their old names.  Many names changed in late 1993.
@@ -8,6 +8,7 @@ Link	America/Argentina/Catamarca	America/Argentina/ComodRivadavia
 Link	America/Adak		America/Atka
 Link	America/Argentina/Buenos_Aires	America/Buenos_Aires
 Link	America/Argentina/Catamarca	America/Catamarca
+Link	America/Atikokan	America/Coral_Harbour
 Link	America/Argentina/Cordoba	America/Cordoba
 Link	America/Tijuana		America/Ensenada
 Link	America/Indiana/Indianapolis	America/Fort_Wayne
diff --git a/JodaTime/src/java/org/joda/time/tz/src/europe b/JodaTime/src/java/org/joda/time/tz/src/europe
index da8de3910..617242799 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/europe
+++ b/JodaTime/src/java/org/joda/time/tz/src/europe
@@ -1,4 +1,4 @@
-# @(#)europe	8.3
+# @(#)europe	8.4
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
@@ -425,6 +425,9 @@ Zone	Europe/London	-0:01:15 -	LMT	1847 Dec  1 0:00s
 			 1:00	-	BST	1971 Oct 31 2:00u
 			 0:00	GB-Eire	%s	1996
 			 0:00	EU	GMT/BST
+Link	Europe/London	Europe/Jersey
+Link	Europe/London	Europe/Guernsey
+Link	Europe/London	Europe/Isle_of_Man
 Zone	Europe/Dublin	-0:25:00 -	LMT	1880 Aug  2
 			-0:25:21 -	DMT	1916 May 21 2:00
 			-0:25:21 1:00	IST	1916 Oct  1 2:00s
@@ -894,7 +897,7 @@ Zone America/Danmarkshavn -1:14:40 -	LMT	1916 Jul 28
 			-3:00	-	WGT	1980 Apr  6 2:00
 			-3:00	EU	WG%sT	1996
 			0:00	-	GMT
-Zone America/Scoresbysund -1:29:00 -	LMT	1916 Jul 28 # Ittoqqortoormiit
+Zone America/Scoresbysund -1:27:52 -	LMT	1916 Jul 28 # Ittoqqortoormiit
 			-2:00	-	CGT	1980 Apr  6 2:00
 			-2:00	C-Eur	CG%sT	1981 Mar 29
 			-1:00	EU	EG%sT
@@ -1937,20 +1940,20 @@ Zone Europe/Kaliningrad	 1:22:00 -	LMT	1893 Apr
 			 2:00	Russia	EE%sT
 #
 # From Oscar van Vlijmen (2001-08-25): [This region consists of]
-# Respublika Adygeya, Arkhangel'skaya oblast', Astrakhanskaya oblast',
+# Respublika Adygeya, Arkhangel'skaya oblast',
 # Belgorodskaya oblast', Bryanskaya oblast', Vladimirskaya oblast',
-# Volgogradskaya oblast', Vologodskaya oblast', Voronezhskaya oblast',
+# Vologodskaya oblast', Voronezhskaya oblast',
 # Respublika Dagestan, Ivanovskaya oblast', Respublika Ingushetiya,
 # Kabarbino-Balkarskaya Respublika, Respublika Kalmykiya,
 # Kalyzhskaya oblast', Respublika Karachaevo-Cherkessiya,
-# Respublika Kareliya, Kirovskaya oblast', Respublika Komi,
+# Respublika Kareliya, Respublika Komi,
 # Kostromskaya oblast', Krasnodarskij kraj, Kurskaya oblast',
 # Leningradskaya oblast', Lipetskaya oblast', Respublika Marij El,
 # Respublika Mordoviya, Moskva, Moskovskaya oblast',
 # Murmanskaya oblast', Nenetskij avtonomnyj okrug,
 # Nizhegorodskaya oblast', Novgorodskaya oblast', Orlovskaya oblast',
 # Penzenskaya oblast', Pskovskaya oblast', Rostovskaya oblast',
-# Ryazanskaya oblast', Sankt-Peterburg, Saratovskaya oblast',
+# Ryazanskaya oblast', Sankt-Peterburg,
 # Respublika Severnaya Osetiya, Smolenskaya oblast',
 # Stavropol'skij kraj, Tambovskaya oblast', Respublika Tatarstan,
 # Tverskaya oblast', Tyl'skaya oblast', Ul'yanovskaya oblast',
@@ -1965,11 +1968,25 @@ Zone Europe/Moscow	 2:30:20 -	LMT	1880
 			 2:00	Russia	EE%sT	1992 Jan 19 2:00s
 			 3:00	Russia	MSK/MSD
 #
+# Astrakhanskaya oblast', Kirovskaya oblast', Saratovskaya oblast',
+# Volgogradskaya oblast'.  Shanks & Pottenger say Kirov is still at +0400
+# but Wikipedia (2006-05-09) says +0300.  Perhaps it switched after the
+# others?  But we have no data.
+Zone Europe/Volgograd	 2:57:40 -	LMT	1920 Jan  3
+			 3:00	-	TSAT	1925 Apr  6 # Tsaritsyn Time
+			 3:00	-	STAT	1930 Jun 21 # Stalingrad Time
+			 4:00	-	STAT	1961 Nov 11
+			 4:00	Russia	VOL%sT	1989 Mar 26 2:00s # Volgograd T
+			 3:00	Russia	VOL%sT	1991 Mar 31 2:00s
+			 4:00	-	VOLT	1992 Mar 29 2:00s
+			 3:00	Russia	VOL%sT
+#
 # From Oscar van Vlijmen (2001-08-25): [This region consists of]
 # Samarskaya oblast', Udmyrtskaya respublika
 Zone Europe/Samara	 3:20:36 -	LMT	1919 Jul  1 2:00
-			 3:00	-	KUYT	1930 Jun 21 # Kuybyshev
-			 4:00	Russia	KUY%sT	1989 Mar 26 2:00s
+			 3:00	-	SAMT	1930 Jun 21
+			 4:00	-	SAMT	1935 Jan 27
+			 4:00	Russia	KUY%sT	1989 Mar 26 2:00s # Kuybyshev
 			 3:00	Russia	KUY%sT	1991 Mar 31 2:00s
 			 2:00	Russia	KUY%sT	1991 Sep 29 2:00s
 			 3:00	-	KUYT	1991 Oct 20 3:00
diff --git a/JodaTime/src/java/org/joda/time/tz/src/northamerica b/JodaTime/src/java/org/joda/time/tz/src/northamerica
index 0a049cb63..a130526dc 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/northamerica
+++ b/JodaTime/src/java/org/joda/time/tz/src/northamerica
@@ -1,4 +1,4 @@
-# @(#)northamerica	8.6
+# @(#)northamerica	8.7
 # <pre>
 
 # also includes Central America and the Caribbean
@@ -900,6 +900,41 @@ Zone America/Menominee	-5:50:27 -	LMT	1885 Sep 18 12:00
 # U.S. and the rest of Canada....
 # http://www2.news.gov.bc.ca/news_releases_2005-2009/2006AG0014-000330.htm
 
+# From Chris Walton (2006-04-25):
+# Daylight saving time will be extended by four weeks starting in 2007....
+# Here is a news release which was issued today by the Nova Scotia government:
+# http://www.gov.ns.ca/news/details.asp?id=20060425004
+
+# From Chris Walton (2006-06-26):
+# [For New Brunswick] the new legislation dictates that the time change is to
+# be done at 02:00 instead of 00:01.
+# http://www.gnb.ca/0062/acts/BBA-2006/Chap-19.pdf
+# ...
+# Manitoba has traditionally changed the clock every fall at 03:00.
+# As of 2006, the transition is to take place one hour earlier at 02:00.
+# http://web2.gov.mb.ca/laws/statutes/ccsm/o030e.php
+# ...
+# [Alberta, Ontario, Quebec] will follow US rules.
+# http://www.qp.gov.ab.ca/documents/Acts/2006CH03_UNPR.cfm?frm_isbn=0779744934
+# http://www.e-laws.gov.on.ca/DBLaws/Source/Regs/English/2006/R06111_e.htm
+# http://www.assnat.qc.ca/eng/37legislature2/Projets-loi/Publics/06-a002.htm
+# ...
+# P.E.I. will follow US rules.  The new legislation is not law yet.
+# It passed first reading on April 20....
+# http://www.assembly.pe.ca/bills/pdf_first/62/3/bill-101.pdf
+# ...
+# Province of Newfoundland and Labrador.... The change is being considered.
+# http://www.releases.gov.nl.ca/releases/2006/mpa/0331n01.htm
+# ...
+# N.W.T. will follow US rules.  Whoever maintains the government web site
+# does not seem to believe in bookmarks.  To see the news release, click the
+# following link and search for "Daylight Savings Time Change".  Press the
+# "Daylight Savings Time Change" link; it will fire off a popup using
+# JavaScript.
+# http://www.exec.gov.nt.ca/currentnews/currentPR.asp?mode=archive
+
+
+
 # From Paul Eggert (2006-04-25):
 # H. David Matthews and Mary Vincent's map
 # <a href="http://www.canadiangeographic.ca/Magazine/SO98/geomap.asp">
@@ -912,16 +947,10 @@ Zone America/Menominee	-5:50:27 -	LMT	1885 Sep 18 12:00
 # information about standard and daylight saving time zones in Canada.
 # </a> (updated periodically).
 # Its unofficial information is often taken from Matthews and Vincent.
-#
-# CBC News reported that Ontario and Manitoba have announced plans to
-# follow the US change; see
-# <http://www.cbc.ca/news/background/daylightsavingtime/> (2005-10-21).
-# CBC news also reported that Prince Edward Island is the first
-# province in Atlantic Canada to follow the US change, and that Quebec
-# had agreed; see <http://www.cbc.ca/pei/story/pe_daylight_20051207.html>
-# (2005-12-07).  It also reported that Alberta will fall into line; see
-# <http://www.cbc.ca/calgary/story/ca_daylight20060202.html> (2006-02-02).
-# For now, assume all of Canada will fall into line.
+
+# From Paul Eggert (2006-06-27):
+# For now, assume all of DST-observing Canada will fall into line with the
+# new US DST rules,
 
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Canada	1918	only	-	Apr	14	2:00	1:00	D
@@ -936,7 +965,7 @@ Rule	Canada	2007	max	-	Mar	Sun>=8	2:00	1:00	D
 Rule	Canada	2007	max	-	Nov	Sun>=1	2:00	0	S
 
 
-# Newfoundland (and far southeast Labrador)
+# Newfoundland and Labrador
 
 # From Paul Eggert (2000-10-02):
 # Matthews and Vincent (1998) write that Labrador should use NST/NDT,
@@ -974,9 +1003,6 @@ Rule	StJohns	1987	only	-	Apr	Sun>=1	0:01	1:00	D
 Rule	StJohns	1987	2006	-	Oct	lastSun	0:01	0	S
 Rule	StJohns	1988	only	-	Apr	Sun>=1	0:01	2:00	DD
 Rule	StJohns	1989	2006	-	Apr	Sun>=1	0:01	1:00	D
-# From Chris Walton (2006-04-05):
-# http://www.releases.gov.nl.ca/releases/2006/mpa/0331n01.htm
-# [This says Newfoundlandland expects to follow step with the US.]
 Rule	StJohns	2007	max	-	Mar	Sun>=8	0:01	1:00	D
 Rule	StJohns	2007	max	-	Nov	Sun>=1	0:01	0	S
 #
@@ -1015,11 +1041,6 @@ Zone America/Goose_Bay	-4:01:40 -	LMT	1884 # Happy Valley-Goose Bay
 # in Canada to observe DST in 1971 but not 1970; for now we'll assume
 # this is a typo.
 
-# From Chris Walton (2006-04-25):
-# Daylight saving time will be extended by four weeks starting in 2007....
-# Here is a news release which was issued today by the Nova Scotia government:
-# http://www.gov.ns.ca/news/details.asp?id=20060425004
-
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Halifax	1916	only	-	Apr	 1	0:00	1:00	D
 Rule	Halifax	1916	only	-	Oct	 1	0:00	0	S
@@ -1084,10 +1105,7 @@ Zone America/Glace_Bay	-3:59:48 -	LMT	1902 Jun 15
 # <http://www.gnb.ca/0062/PDF-acts/t-06.pdf> says they change at 00:01, and
 # <http://www.canlii.org/nb/laws/sta/t-6/20030127/whole.html> makes it
 # clear that this has been the case since at least 1993.
-# For now, assume it started in 1993.  The Office of the Premier announced
-# <http://www.gnb.ca/cnb/news/pre/2005e1737pr.htm> (2005-12-23)
-# that they will bring forward proposed amendments to harmonize with the US;
-# for now assume that this will happen, but they'll still switch at 00:01.
+# For now, assume it started in 1993.
 
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Moncton	1933	1935	-	Jun	Sun>=8	1:00	1:00	D
@@ -1103,8 +1121,6 @@ Rule	Moncton	1946	1956	-	Sep	lastSun	2:00	0	S
 Rule	Moncton	1957	1972	-	Oct	lastSun	2:00	0	S
 Rule	Moncton	1993	2006	-	Apr	Sun>=1	0:01	1:00	D
 Rule	Moncton	1993	2006	-	Oct	lastSun	0:01	0	S
-Rule	Moncton	2007	max	-	Mar	Sun>=8	0:01	1:00	D
-Rule	Moncton	2007	max	-	Nov	Sun>=1	0:01	0	S
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone America/Moncton	-4:19:08 -	LMT	1883 Dec  9
 			-5:00	-	EST	1902 Jun 15
@@ -1113,13 +1129,79 @@ Zone America/Moncton	-4:19:08 -	LMT	1883 Dec  9
 			-4:00	Canada	A%sT	1946
 			-4:00	Moncton	A%sT	1973
 			-4:00	Canada	A%sT	1993
-			-4:00	Moncton	A%sT
+			-4:00	Moncton	A%sT	2007
+			-4:00	Canada	A%sT
 
-# Ontario, Quebec
+# Quebec
+
+# From Paul Eggert (2006-07-09):
+# Shanks & Pottenger write that since 1970 most of Quebec has been
+# like Montreal.
+
+# From Paul Eggert (2006-06-27):
+# Matthews and Vincent (1998) also write that Quebec east of the -63
+# meridian is supposed to observe AST, but residents as far east as
+# Natashquan use EST/EDT, and residents east of Natashquan use AST.
+# In "Official time in Quebec" the Quebec department of justice writes in
+# http://www.justice.gouv.qc.ca/english/publications/generale/temps-regl-1-a.htm
+# that "The residents of the Municipality of the
+# Cote-Nord-du-Golfe-Saint-Laurent and the municipalities of Saint-Augustin,
+# Bonne-Esperance and Blanc-Sablon apply the Official Time Act as it is
+# written and use Atlantic standard time all year round. The same applies to
+# the residents of the Native facilities along the lower North Shore."
+# <http://www.assnat.qc.ca/eng/37legislature2/Projets-loi/Publics/06-a002.htm>
+# says this common practice was codified into law as of 2007.
+# For lack of better info, guess this practice began around 1970, contra to
+# Shanks & Pottenger who have this region observing AST/ADT.
 
-# From Paul Eggert (2006-03-22):
-# Shanks & Pottenger writes that since 1970 most of Ontario has been like
-# Toronto, and most of Quebec has been like Montreal.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	Mont	1917	only	-	Mar	25	2:00	1:00	D
+Rule	Mont	1917	only	-	Apr	24	0:00	0	S
+Rule	Mont	1919	only	-	Mar	31	2:30	1:00	D
+Rule	Mont	1919	only	-	Oct	25	2:30	0	S
+Rule	Mont	1920	only	-	May	 2	2:30	1:00	D
+Rule	Mont	1920	1922	-	Oct	Sun>=1	2:30	0	S
+Rule	Mont	1921	only	-	May	 1	2:00	1:00	D
+Rule	Mont	1922	only	-	Apr	30	2:00	1:00	D
+Rule	Mont	1924	only	-	May	17	2:00	1:00	D
+Rule	Mont	1924	1926	-	Sep	lastSun	2:30	0	S
+Rule	Mont	1925	1926	-	May	Sun>=1	2:00	1:00	D
+# The 1927-to-1937 rules can be expressed more simply as
+# Rule	Mont	1927	1937	-	Apr	lastSat	24:00	1:00	D
+# Rule	Mont	1927	1937	-	Sep	lastSat	24:00	0	S
+# The rules below avoid use of 24:00
+# (which pre-1998 versions of zic cannot handle).
+Rule	Mont	1927	only	-	May	1	0:00	1:00	D
+Rule	Mont	1927	1932	-	Sep	lastSun	0:00	0	S
+Rule	Mont	1928	1931	-	Apr	lastSun	0:00	1:00	D
+Rule	Mont	1932	only	-	May	1	0:00	1:00	D
+Rule	Mont	1933	1940	-	Apr	lastSun	0:00	1:00	D
+Rule	Mont	1933	only	-	Oct	1	0:00	0	S
+Rule	Mont	1934	1939	-	Sep	lastSun	0:00	0	S
+Rule	Mont	1946	1973	-	Apr	lastSun	2:00	1:00	D
+Rule	Mont	1945	1948	-	Sep	lastSun	2:00	0	S
+Rule	Mont	1949	1950	-	Oct	lastSun	2:00	0	S
+Rule	Mont	1951	1956	-	Sep	lastSun	2:00	0	S
+Rule	Mont	1957	1973	-	Oct	lastSun	2:00	0	S
+
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Blanc-Sablon -3:48:28 -	LMT	1884
+			-4:00	Canada	A%sT	1970
+			-4:00	-	AST
+Zone America/Montreal	-4:54:16 -	LMT	1884
+			-5:00	Mont	E%sT	1918
+			-5:00	Canada	E%sT	1919
+			-5:00	Mont	E%sT	1942 Feb  9 2:00s
+			-5:00	Canada	E%sT	1946
+			-5:00	Mont	E%sT	1974
+			-5:00	Canada	E%sT
+
+
+# Ontario
+
+# From Paul Eggert (2006-07-09):
+# Shanks & Pottenger write that since 1970 most of Ontario has been like
+# Toronto.
 # Thunder Bay skipped DST in 1973.
 # Many smaller locales did not observe peacetime DST until 1974;
 # Nipigon (EST) and Rainy River (CST) are the largest that we know of.
@@ -1150,51 +1232,45 @@ Zone America/Moncton	-4:19:08 -	LMT	1883 Dec  9
 # Officially Atikokan is therefore on CST/CDT, and most likely this report
 # concerns a non-official time observed as a matter of local practice.
 #
-# From Paul Eggert (2006-03-22):
-# For what it's worth, Shanks & Pottenger say that Atikokan has agreed with
-# Rainy River ever since standard time was introduced.
-
 # From Paul Eggert (2000-10-02):
 # Matthews and Vincent (1998) write that Atikokan, Pickle Lake, and
 # New Osnaburgh observe CST all year, that Big Trout Lake observes
 # CST/CDT, and that Upsala and Shebandowan observe EST/EDT, all in
 # violation of the official Ontario rules.
-# They also write that Quebec east of the -63 meridian is supposed to
-# observe AST, but residents as far east as Natashquan use EST/EDT,
-# and residents east of Natashquan use AST.
-# We probably need Zones for far east Quebec and for Atikokan,
-# but we don't know when their practices started.
+#
+# From Paul Eggert (2006-07-09):
+# Chris Walton (2006-07-06) mentioned an article by Stephanie MacLellan in the
+# 2005-07-21 Chronicle-Journal, which said:
+#
+#	The clocks in Atikokan stay set on standard time year-round.
+#	This means they spend about half the time on central time and
+#	the other half on eastern time.
+#
+#	For the most part, the system works, Mayor Dennis Brown said.
+#
+#	"The majority of businesses in Atikokan deal more with Eastern
+#	Canada, but there are some that deal with Western Canada," he
+#	said.  "I don't see any changes happening here."
+#
+# Walton also writes "Supposedly Pickle Lake and Mishkeegogamang
+# [New Osnaburgh] follow the same practice."
 
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Mont	1917	only	-	Mar	25	2:00	1:00	D
-Rule	Mont	1917	only	-	Apr	24	0:00	0	S
-Rule	Mont	1919	only	-	Mar	31	2:30	1:00	D
-Rule	Mont	1919	only	-	Oct	25	2:30	0	S
-Rule	Mont	1920	only	-	May	 2	2:30	1:00	D
-Rule	Mont	1920	1922	-	Oct	Sun>=1	2:30	0	S
-Rule	Mont	1921	only	-	May	 1	2:00	1:00	D
-Rule	Mont	1922	only	-	Apr	30	2:00	1:00	D
-Rule	Mont	1924	only	-	May	17	2:00	1:00	D
-Rule	Mont	1924	1926	-	Sep	lastSun	2:30	0	S
-Rule	Mont	1925	1926	-	May	Sun>=1	2:00	1:00	D
-# The 1927-to-1937 rules can be expressed more simply as
-# Rule	Mont	1927	1937	-	Apr	lastSat	24:00	1:00	D
-# Rule	Mont	1927	1937	-	Sep	lastSat	24:00	0	S
-# The rules below avoid use of 24:00
-# (which pre-1998 versions of zic cannot handle).
-Rule	Mont	1927	only	-	May	1	0:00	1:00	D
-Rule	Mont	1927	1932	-	Sep	lastSun	0:00	0	S
-Rule	Mont	1928	1931	-	Apr	lastSun	0:00	1:00	D
-Rule	Mont	1932	only	-	May	1	0:00	1:00	D
-Rule	Mont	1933	1940	-	Apr	lastSun	0:00	1:00	D
-Rule	Mont	1933	only	-	Oct	1	0:00	0	S
-Rule	Mont	1934	1939	-	Sep	lastSun	0:00	0	S
-Rule	Mont	1946	1973	-	Apr	lastSun	2:00	1:00	D
-Rule	Mont	1945	1948	-	Sep	lastSun	2:00	0	S
-Rule	Mont	1949	1950	-	Oct	lastSun	2:00	0	S
-Rule	Mont	1951	1956	-	Sep	lastSun	2:00	0	S
-Rule	Mont	1957	1973	-	Oct	lastSun	2:00	0	S
+# From Garry McKinnon (2006-07-14) via Chris Walton:
+# I chatted with a member of my board who has an outstanding memory
+# and a long history in Atikokan (and in the telecom industry) and he
+# can say for certain that Atikokan has been practicing the current
+# time keeping since 1952, at least.
 
+# From Paul Eggert (2006-07-17):
+# Shanks & Pottenger say that Atikokan has agreed with Rainy River
+# ever since standard time was introduced, but the information from
+# McKinnon sounds more authoritative.  For now, assume that Atikokan
+# switched to EST immediately after WWII era daylight saving time
+# ended.  This matches the old (less-populous) America/Coral_Harbour
+# entry since our cutoff date of 1970, so we can move
+# America/Coral_Harbour to the 'backward' file.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Toronto	1919	only	-	Mar	30	23:30	1:00	D
 Rule	Toronto	1919	only	-	Oct	26	0:00	0	S
 Rule	Toronto	1920	only	-	May	 2	2:00	1:00	D
@@ -1228,9 +1304,9 @@ Rule	Toronto	1950	1973	-	Apr	lastSun	2:00	1:00	D
 Rule	Toronto	1950	only	-	Nov	lastSun	2:00	0	S
 Rule	Toronto	1951	1956	-	Sep	lastSun	2:00	0	S
 # Shanks & Pottenger say Toronto ended DST a week early in 1971,
-# namely on 1971-10-24, but Mark Brader wrote (2003-05-31) that he
-# checked the 1971-10-30 issue of the Toronto Star, and it said that
-# DST ended 1971-10-31 as usual.
+# namely on 1971-10-24, but Mark Brader wrote (2003-05-31) that this
+# is wrong, and that he had confirmed it by checking the 1971-10-30
+# Toronto Star, which said that DST was ending 1971-10-31 as usual.
 Rule	Toronto	1957	1973	-	Oct	lastSun	2:00	0	S
 
 # From Paul Eggert (2003-07-27):
@@ -1252,13 +1328,6 @@ Rule	Toronto	1957	1973	-	Oct	lastSun	2:00	0	S
 # months for the remainder of the war years.
 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Montreal	-4:54:16 -	LMT	1884
-			-5:00	Mont	E%sT	1918
-			-5:00	Canada	E%sT	1919
-			-5:00	Mont	E%sT	1942 Feb  9 2:00s
-			-5:00	Canada	E%sT	1946
-			-5:00	Mont	E%sT	1974
-			-5:00	Canada	E%sT
 Zone America/Toronto	-5:17:32 -	LMT	1895
 			-5:00	Canada	E%sT	1919
 			-5:00	Toronto	E%sT	1942 Feb  9 2:00s
@@ -1276,19 +1345,19 @@ Zone America/Nipigon	-5:53:04 -	LMT	1895
 			-5:00	Canada	E%sT	1940 Sep 29
 			-5:00	1:00	EDT	1942 Feb  9 2:00s
 			-5:00	Canada	E%sT
-Zone America/Rainy_River -6:17:56 -	LMT	1895
+Zone America/Rainy_River -6:18:16 -	LMT	1895
 			-6:00	Canada	C%sT	1940 Sep 29
 			-6:00	1:00	CDT	1942 Feb  9 2:00s
 			-6:00	Canada	C%sT
+Zone America/Atikokan	-6:06:28 -	LMT	1895
+			-6:00	Canada	C%sT	1940 Sep 29
+			-6:00	1:00	CDT	1942 Feb  9 2:00s
+			-6:00	Canada	C%sT	1945 Sep 30 2:00
+			-5:00	-	EST
 
 
 # Manitoba
 
-# From Chris Walton (2006-04-05):
-# Here is a copy of the new official time act ...
-# http://web2.gov.mb.ca/laws/statutes/ccsm/o030e.php
-# The act indicates that daylight savings ends at 2:00am.
-
 # From Rob Douglas (2006-04-06):
 # the old Manitoba Time Act - as amended by Bill 2, assented to
 # March 27, 1987 ... said ...
@@ -1388,6 +1457,11 @@ Zone America/Winnipeg	-6:28:36 -	LMT	1887 Jul 16
 # rules any more; all other districts appear to have used CST year round
 # since sometime in the 1960s.
 
+# From Chris Walton (2006-06-26):
+# The Saskatchewan time act which was last updated in 1996 is about 30 pages
+# long and rather painful to read.
+# http://www.qp.gov.sk.ca/documents/English/Statutes/Statutes/T14.pdf
+
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Regina	1918	only	-	Apr	14	2:00	1:00	D
 Rule	Regina	1918	only	-	Oct	31	2:00	0	S
@@ -1490,6 +1564,10 @@ Zone America/Dawson_Creek -8:00:56 -	LMT	1884
 #	* O.I.C. 1987/056 changed DST to Apr firstSun 2:00 to Oct lastSun 2:00.
 # Shanks & Pottenger say Yukon's 1973-10-28 switch was at 2:00; go
 # with Englander.
+# From Chris Walton (2006-06-26):
+# Here is a link to the old daylight saving portion of the interpretation
+# act which was last updated in 1987:
+# http://www.gov.yk.ca/legislation/regs/oic1987_056.pdf
 
 # From Rives McDow (1999-09-04):
 # Nunavut ... moved ... to incorporate the whole territory into one time zone.
@@ -1597,10 +1675,10 @@ Zone America/Dawson_Creek -8:00:56 -	LMT	1884
 # From Paul Eggert (2005-07-26):
 # For lack of better information, assume that Southampton Island observed
 # daylight saving only during wartime.
-#
-# From Chris Walton (2006-04-25):
-# Daylight saving time will be extended by four weeks starting in 2007....
-# http://www.cbc.ca/north/story/nor-nwt-time-change.html
+
+# From Chris Walton (2006-07-19):
+# The government of Yukon Territory ... recently announced it will extend
+# daylight saving in 2007....  http://www.gov.yk.ca/news/2006/06-164.html
 
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	NT_YK	1918	only	-	Apr	14	2:00	1:00	D
@@ -1625,10 +1703,11 @@ Zone America/Iqaluit	-4:33:52 -	LMT	1884 # Frobisher Bay before 1987
 			-5:00	NT_YK	E%sT	1999 Oct 31 2:00
 			-6:00	Canada	C%sT	2000 Oct 29 2:00
 			-5:00	Canada	E%sT
-Zone America/Coral_Harbour -5:32:40 -	LMT	1884
-			-5:00	NT_YK	E%sT	1946
-			-5:00	-	EST
-Zone America/Rankin_Inlet -6:08:40 -	LMT	1884
+# Now subsumed by America/Atikokan.
+#Zone America/Coral_Harbour -5:32:40 -	LMT	1884
+#			-5:00	NT_YK	E%sT	1946
+#			-5:00	-	EST
+Zone America/Rankin_Inlet -6:08:20 -	LMT	1884
 			-6:00	NT_YK	C%sT	2000 Oct 29 2:00
 			-5:00	-	EST	2001 Apr  1 3:00
 			-6:00	Canada	C%sT
@@ -1641,7 +1720,7 @@ Zone America/Cambridge_Bay -7:00:20 -	LMT	1884
 Zone America/Yellowknife -7:37:24 -	LMT	1884
 			-7:00	NT_YK	M%sT	1980
 			-7:00	Canada	M%sT
-Zone America/Inuvik	-8:54:00 -	LMT	1884
+Zone America/Inuvik	-8:54:52 -	LMT	1884
 			-8:00	NT_YK	P%sT	1979 Apr lastSun 2:00
 			-7:00	NT_YK	M%sT	1980
 			-7:00	Canada	M%sT
@@ -1952,10 +2031,20 @@ Zone	America/Belize	-5:52:48 -	LMT	1912 Apr
 			-6:00	Belize	C%sT
 
 # Bermuda
+
+# From Dan Jones, reporting in The Royal Gazette (2006-06-26):
+
+# Next year, however, clocks in the US will go forward on the second Sunday
+# in March, until the first Sunday in November.  And, after the Time Zone
+# (Seasonal Variation) Bill 2006 was passed in the House of Assembly on
+# Friday, the same thing will happen in Bermuda.
+# http://www.theroyalgazette.com/apps/pbcs.dll/article?AID=/20060529/NEWS/105290135
+
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone Atlantic/Bermuda	-4:19:04 -	LMT	1930 Jan  1 2:00    # Hamilton
 			-4:00	-	AST	1974 Apr 28 2:00
-			-4:00	Bahamas	A%sT
+			-4:00	Bahamas	A%sT	1976
+			-4:00	US	A%sT
 
 # Cayman Is
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
@@ -2086,15 +2175,6 @@ Zone America/Santo_Domingo -4:39:36 -	LMT	1890
 
 # El Salvador
 
-# From Paul Eggert (2006-05-05):
-# worldtimezone.com reports a 2006-05-02 Spanish-language AP article
-# saying Honduras will start using DST midnight Saturday, effective 4
-# months until September, and a 2006-05-03 NACION article saying El
-# Salvador will follow suit.  However, ignore this for now, because:
-# From Jesper Norgaard Welen (2005-05-05):
-# Change of DST perhaps postponed in El Salvador:
-# http://www.laprensagrafica.com/lodeldia/883.asp
-
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Salv	1987	1988	-	May	Sun>=1	0:00	1:00	D
 Rule	Salv	1987	1988	-	Sep	lastSun	0:00	0	S
@@ -2123,6 +2203,11 @@ Zone America/Guadeloupe	-4:06:08 -	LMT	1911 Jun 8	# Pointe a Pitre
 # decided on that date to advance official time by 60 minutes, to lessen the
 # impact of the elevated cost of oil....  Daylight saving time will last from
 # 2006-04-29 24:00 (Guatemalan standard time) to 2006-09-30 (time unspecified).
+# From Paul Eggert (2006-06-22):
+# The Ministry of Energy and Mines, press release CP-15/2006
+# (2006-04-19), says DST ends at 24:00.  See
+# <http://www.sieca.org.gt/Sitio_publico/Energeticos/Doc/Medidas/Cambio_Horario_Nac_190406.pdf>.
+
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Guat	1973	only	-	Nov	25	0:00	1:00	D
 Rule	Guat	1974	only	-	Feb	24	0:00	0	S
@@ -2192,14 +2277,23 @@ Zone America/Port-au-Prince -4:49:20 -	LMT	1890
 # saying Honduras will start using DST midnight Saturday, effective 4
 # months until September.  La Tribuna reported today
 # <http://www.latribuna.hn/99299.html> that Manuel Zelaya, the president
-# of Honduras, refused to back down on this.  For lack of better info,
-# assume they'll use the same end-of-DST rules as in 1987 and 1988.
+# of Honduras, refused to back down on this.
+
+# From Jesper Norgaard Welen (2006-08-08):
+# It seems that Honduras has returned from DST to standard time this Monday at
+# 00:00 hours (prolonging Sunday to 25 hours duration).
+# http://www.worldtimezone.com/dst_news/dst_news_honduras04.html
+
+# From Paul Eggert (2006-08-08):
+# Also see Diario El Heraldo, The country returns to standard time (2006-08-08)
+# <http://www.elheraldo.hn/nota.php?nid=54941&sec=12>.
+# It mentions executive decree 18-2006.
 
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Hond	1987	1988	-	May	Sun>=1	0:00	1:00	D
 Rule	Hond	1987	1988	-	Sep	lastSun	0:00	0	S
 Rule	Hond	2006	only	-	May	Sun>=1	0:00	1:00	D
-Rule	Hond	2006	only	-	Sep	lastSun	0:00	0	S
+Rule	Hond	2006	only	-	Aug	Mon>=1	0:00	0	S
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone America/Tegucigalpa -5:48:52 -	LMT	1921 Apr
 			-6:00	Hond	C%sT

From 8f8bf8fbea3861e9b2b98dde2af5be84401da8d6 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Tue, 29 Aug 2006 05:23:03 +0000
Subject: [PATCH 12/54] Updated tz database to version 2006k.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1126 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/java/org/joda/time/tz/src/Readme.txt   |  2 +-
 JodaTime/src/java/org/joda/time/tz/src/asia    | 13 +++++++++++--
 JodaTime/src/java/org/joda/time/tz/src/europe  |  8 +++++---
 .../src/java/org/joda/time/tz/src/northamerica | 18 ++++++++++++++----
 4 files changed, 31 insertions(+), 10 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
index 1b1f438be..224c64d85 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
+++ b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
@@ -1,2 +1,2 @@
 The data files in this directory were obtained from the public tz database,
-http://www.twinsun.com/tz/tz-link.htm, version 2006j.
+http://www.twinsun.com/tz/tz-link.htm, version 2006k.
diff --git a/JodaTime/src/java/org/joda/time/tz/src/asia b/JodaTime/src/java/org/joda/time/tz/src/asia
index f7bad1ad8..2ce0ce5f0 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/asia
+++ b/JodaTime/src/java/org/joda/time/tz/src/asia
@@ -1,4 +1,4 @@
-# @(#)asia	8.5
+# @(#)asia	8.6
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
@@ -1468,6 +1468,14 @@ Zone	Asia/Karachi	4:28:12 -	LMT	1907
 # there is a good chance next year's end date will be around two weeks
 # earlier--the same goes for Jordan.
 
+# From Steffen Thorsen (2006-08-17):
+# I was informed by a user in Bethlehem that in Bethlehem it started the
+# same day as Israel, and after checking with other users in the area, I
+# was informed that they started DST one day after Israel.  I was not
+# able to find any authoritative sources at the time, nor details if
+# Gaza changed as well, but presumed Gaza to follow the same rules as
+# the West Bank.
+
 # The rules for Egypt are stolen from the `africa' file.
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule EgyptAsia	1957	only	-	May	10	0:00	1:00	S
@@ -1477,10 +1485,11 @@ Rule EgyptAsia	1959	1967	-	May	 1	1:00	1:00	S
 Rule EgyptAsia	1959	1965	-	Sep	30	3:00	0	-
 Rule EgyptAsia	1966	only	-	Oct	 1	3:00	0	-
 
-Rule Palestine	1999	max	-	Apr	Fri>=15	0:00	1:00	S
+Rule Palestine	1999	2005	-	Apr	Fri>=15	0:00	1:00	S
 Rule Palestine	1999	2003	-	Oct	Fri>=15	0:00	0	-
 Rule Palestine	2004	only	-	Oct	 1	1:00	0	-
 Rule Palestine	2005	max	-	Oct	 4	2:00	0	-
+Rule Palestine	2006	max	-	Apr	 1	0:00	1:00	S
 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Asia/Gaza	2:17:52	-	LMT	1900 Oct
diff --git a/JodaTime/src/java/org/joda/time/tz/src/europe b/JodaTime/src/java/org/joda/time/tz/src/europe
index 617242799..be44f928a 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/europe
+++ b/JodaTime/src/java/org/joda/time/tz/src/europe
@@ -1,4 +1,4 @@
-# @(#)europe	8.4
+# @(#)europe	8.5
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
@@ -2012,7 +2012,9 @@ Zone Asia/Omsk		 4:53:36 -	LMT	1919 Nov 14
 			 5:00	Russia	OMS%sT	1992 Jan 19 2:00s
 			 6:00	Russia	OMS%sT
 #
-# Novosibirskaya oblast'.
+# From Paul Eggert (2006-08-19): I'm guessing about Tomsk here; it's
+# not clear when it switched from +7 to +6.
+# Novosibirskaya oblast', Tomskaya oblast'.
 Zone Asia/Novosibirsk	 5:31:40 -	LMT	1919 Dec 14 6:00
 			 6:00	-	NOVT	1930 Jun 21 # Novosibirsk Time
 			 7:00	Russia	NOV%sT	1991 Mar 31 2:00s
@@ -2022,7 +2024,7 @@ Zone Asia/Novosibirsk	 5:31:40 -	LMT	1919 Dec 14 6:00
 #
 # From Oscar van Vlijmen (2001-08-25): [This region consists of]
 # Kemerovskaya oblast', Krasnoyarskij kraj,
-# Tajmyrskij (Dolgano-Nenetskij) avtonomnyj okrug, Tomskaya oblast',
+# Tajmyrskij (Dolgano-Nenetskij) avtonomnyj okrug,
 # Respublika Tuva, Respublika Khakasiya, Evenkijskij avtonomnyj okrug.
 Zone Asia/Krasnoyarsk	 6:11:20 -	LMT	1920 Jan  6
 			 6:00	-	KRAT	1930 Jun 21 # Krasnoyarsk Time
diff --git a/JodaTime/src/java/org/joda/time/tz/src/northamerica b/JodaTime/src/java/org/joda/time/tz/src/northamerica
index a130526dc..723cf3984 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/northamerica
+++ b/JodaTime/src/java/org/joda/time/tz/src/northamerica
@@ -1,4 +1,4 @@
-# @(#)northamerica	8.7
+# @(#)northamerica	8.8
 # <pre>
 
 # also includes Central America and the Caribbean
@@ -2096,6 +2096,11 @@ Zone America/Costa_Rica	-5:36:20 -	LMT	1890		# San Jose
 # adjustment in Cuba.  We will stay in daylight saving time:
 # http://www.granma.cu/espanol/2005/noviembre/mier9/horario.html
 
+# From Steffen Thorsen (2006-08-17):
+# It is likely that they are not reverting back to standard time this
+# year either, based on the number of responses I have got from users
+# (when my site claimed Cuba will end DST on lastSun/October)
+
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Cuba	1928	only	-	Jun	10	0:00	1:00	D
 Rule	Cuba	1928	only	-	Oct	10	0:00	0	S
@@ -2126,7 +2131,7 @@ Rule	Cuba	1997	only	-	Oct	12	0:00s	0	S
 Rule	Cuba	1998	1999	-	Mar	lastSun	0:00s	1:00	D
 Rule	Cuba	1998	2003	-	Oct	lastSun	0:00s	0	S
 Rule	Cuba	2000	max	-	Apr	Sun>=1	0:00s	1:00	D
-Rule	Cuba	2006	max	-	Oct	lastSun	0:00s	0	S
+Rule	Cuba	2007	max	-	Oct	lastSun	0:00s	0	S
 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	America/Havana	-5:29:28 -	LMT	1890
@@ -2289,11 +2294,16 @@ Zone America/Port-au-Prince -4:49:20 -	LMT	1890
 # <http://www.elheraldo.hn/nota.php?nid=54941&sec=12>.
 # It mentions executive decree 18-2006.
 
+# From Steffen Thorsen (2006-08-17):
+# Honduras will observe DST from 2007 to 2009, exact dates are not
+# published, I have located this authoritative source:
+# http://www.presidencia.gob.hn/noticia.aspx?nId=47
+
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Hond	1987	1988	-	May	Sun>=1	0:00	1:00	D
 Rule	Hond	1987	1988	-	Sep	lastSun	0:00	0	S
-Rule	Hond	2006	only	-	May	Sun>=1	0:00	1:00	D
-Rule	Hond	2006	only	-	Aug	Mon>=1	0:00	0	S
+Rule	Hond	2006	2009	-	May	Sun>=1	0:00	1:00	D
+Rule	Hond	2006	2009	-	Aug	Mon>=1	0:00	0	S
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone America/Tegucigalpa -5:48:52 -	LMT	1921 Apr
 			-6:00	Hond	C%sT

From 1c5cb659eb70163d0c261613998def2c80aa92ac Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Mon, 18 Sep 2006 17:43:30 +0000
Subject: [PATCH 13/54] Updated tz database to version 2006l.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1127 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/java/org/joda/time/tz/src/Readme.txt  |  2 +-
 JodaTime/src/java/org/joda/time/tz/src/africa | 33 +++++++++++++++++--
 2 files changed, 32 insertions(+), 3 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
index 224c64d85..be67fc8dd 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
+++ b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
@@ -1,2 +1,2 @@
 The data files in this directory were obtained from the public tz database,
-http://www.twinsun.com/tz/tz-link.htm, version 2006k.
+http://www.twinsun.com/tz/tz-link.htm, version 2006l.
diff --git a/JodaTime/src/java/org/joda/time/tz/src/africa b/JodaTime/src/java/org/joda/time/tz/src/africa
index 67d095f32..71a01883b 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/africa
+++ b/JodaTime/src/java/org/joda/time/tz/src/africa
@@ -1,4 +1,4 @@
-# @(#)africa	8.3
+# @(#)africa	8.4
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
@@ -211,7 +211,36 @@ Rule	Egypt	1990	1994	-	May	 1	1:00	1:00	S
 # IATA (after 1990) says transitions are at 0:00.
 # Go with IATA starting in 1995, except correct 1995 entry from 09-30 to 09-29.
 Rule	Egypt	1995	max	-	Apr	lastFri	 0:00s	1:00	S
-Rule	Egypt	1995	max	-	Sep	lastThu	23:00s	0	-
+Rule	Egypt	1995	2005	-	Sep	lastThu	23:00s	0	-
+# From Hammad Hassan (2006-09-13), quoting The Egyptian Gazette (2006-09-10),
+# issue no. 41,083, page 1, column 1:
+# Egypt will switch back to the winter time on the eve of the first day of
+# the Muslim holy month of Ramadan, expected to start this year on Sept. 24....
+# "Clocks will be turned back starting from the night on which Darul Ifta ...
+# announces sighting the crescent of the month of Ramadan,..." Magdi Radi,
+# the Cabinet spokesman, said yesterday.
+# From Hammad Hassan (2006-09-17):
+# when we reach 1:00AM at Sep 25 the clocks will be turned back to 12:00AM.
+# I think also this change will be this year and may be the next couple of
+# years only.   (They just want to exclude Ramadan from the summer time; if
+# so, the change will be among 3 years only if my calculations are correct).
+# From Paul Eggert (2006-09-17):
+# For now, assume a similar rule will be followed in 2006/2008, and that
+# Ramadan will start as predicted by GNU Emacs 21.4.  Here's the code used
+# to generate the 2006/2008 lines:
+# (let ((year 1427))
+#   (while (< year (+ 1427 3))
+#     (let ((date (calendar-gregorian-from-absolute
+#		   (calendar-absolute-from-islamic (list 9 2 year)))))
+#	(insert (format "Rule\tEgypt\t%d\tonly\t-\t%s\t%2d\t 1:00\t0\t-\n"
+#			(extract-calendar-year date)
+#			(calendar-month-name (extract-calendar-month date) 3)
+#			(extract-calendar-day date))))
+#     (setq year (1+ year)))))
+Rule	Egypt	2006	only	-	Sep	25	 1:00	0	-
+Rule	Egypt	2007	only	-	Sep	14	 1:00	0	-
+Rule	Egypt	2008	only	-	Sep	 3	 1:00	0	-
+Rule	Egypt	2009	max	-	Sep	lastThu	23:00s	0	-
 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Africa/Cairo	2:05:00 -	LMT	1900 Oct

From 9cca8c5d57210377d2a75ee2c3a60c9b16bf9a95 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Wed, 20 Sep 2006 01:05:37 +0000
Subject: [PATCH 14/54] Fixed text value of ReadablePartial fields when using
 GJChronology.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1128 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                               | 9 +++++++--
 JodaTime/src/java/org/joda/time/chrono/GJChronology.java | 8 ++++++++
 .../src/test/org/joda/time/chrono/TestGJChronology.java  | 5 +++++
 3 files changed, 20 insertions(+), 2 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index ac4c62f6e..eba863e53 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -1,5 +1,5 @@
-Joda-Time version 1.3
----------------------
+Joda-Time version 1.3.1
+-----------------------
 
 Joda-Time is a date and time handling library that seeks to replace the JDK
 Date and Calendar classes.
@@ -130,6 +130,11 @@ Bug fixes since 1.2
 - DayOfYear field
   Better error messages
 
+Bug fixes since 1.3
+-------------------
+- GJChronology
+  Text value of ReadablePartial fields was always a decimal number.
+
 
 Feedback
 --------
diff --git a/JodaTime/src/java/org/joda/time/chrono/GJChronology.java b/JodaTime/src/java/org/joda/time/chrono/GJChronology.java
index 47851fb43..031d785b3 100644
--- a/JodaTime/src/java/org/joda/time/chrono/GJChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/GJChronology.java
@@ -621,6 +621,10 @@ public String getAsText(long instant, Locale locale) {
             }
         }
 
+        public String getAsText(int fieldValue, Locale locale) {
+            return iGregorianField.getAsText(fieldValue, locale);
+        }
+
         public String getAsShortText(long instant, Locale locale) {
             if (instant >= iCutover) {
                 return iGregorianField.getAsShortText(instant, locale);
@@ -629,6 +633,10 @@ public String getAsShortText(long instant, Locale locale) {
             }
         }
 
+        public String getAsShortText(int fieldValue, Locale locale) {
+            return iGregorianField.getAsShortText(fieldValue, locale);
+        }
+
         public long add(long instant, int value) {
             return iGregorianField.add(instant, value);
         }
diff --git a/JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java b/JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java
index 72c8695b0..01eb4b2d7 100644
--- a/JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java
+++ b/JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java
@@ -471,4 +471,9 @@ public void testMaximumValue() {
         }
     }
 
+    public void testPartialGetAsText() {
+        GJChronology chrono = GJChronology.getInstance(TOKYO);
+        assertEquals("January", new YearMonthDay("2005-01-01", chrono).monthOfYear().getAsText());
+        assertEquals("Jan", new YearMonthDay("2005-01-01", chrono).monthOfYear().getAsShortText());
+    }
 }

From 7409d924a87ea629daeda64c91a8807034610249 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Tue, 3 Oct 2006 15:03:20 +0000
Subject: [PATCH 15/54] Updated tz database to version 2006m.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1129 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/tz/src/africa | 38 ++++---------------
 JodaTime/src/java/org/joda/time/tz/src/asia   | 26 +++++++++++--
 .../java/org/joda/time/tz/src/southamerica    |  6 ++-
 3 files changed, 35 insertions(+), 35 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/tz/src/africa b/JodaTime/src/java/org/joda/time/tz/src/africa
index 71a01883b..7895b7ff9 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/africa
+++ b/JodaTime/src/java/org/joda/time/tz/src/africa
@@ -1,4 +1,4 @@
-# @(#)africa	8.4
+# @(#)africa	8.5
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
@@ -212,35 +212,13 @@ Rule	Egypt	1990	1994	-	May	 1	1:00	1:00	S
 # Go with IATA starting in 1995, except correct 1995 entry from 09-30 to 09-29.
 Rule	Egypt	1995	max	-	Apr	lastFri	 0:00s	1:00	S
 Rule	Egypt	1995	2005	-	Sep	lastThu	23:00s	0	-
-# From Hammad Hassan (2006-09-13), quoting The Egyptian Gazette (2006-09-10),
-# issue no. 41,083, page 1, column 1:
-# Egypt will switch back to the winter time on the eve of the first day of
-# the Muslim holy month of Ramadan, expected to start this year on Sept. 24....
-# "Clocks will be turned back starting from the night on which Darul Ifta ...
-# announces sighting the crescent of the month of Ramadan,..." Magdi Radi,
-# the Cabinet spokesman, said yesterday.
-# From Hammad Hassan (2006-09-17):
-# when we reach 1:00AM at Sep 25 the clocks will be turned back to 12:00AM.
-# I think also this change will be this year and may be the next couple of
-# years only.   (They just want to exclude Ramadan from the summer time; if
-# so, the change will be among 3 years only if my calculations are correct).
-# From Paul Eggert (2006-09-17):
-# For now, assume a similar rule will be followed in 2006/2008, and that
-# Ramadan will start as predicted by GNU Emacs 21.4.  Here's the code used
-# to generate the 2006/2008 lines:
-# (let ((year 1427))
-#   (while (< year (+ 1427 3))
-#     (let ((date (calendar-gregorian-from-absolute
-#		   (calendar-absolute-from-islamic (list 9 2 year)))))
-#	(insert (format "Rule\tEgypt\t%d\tonly\t-\t%s\t%2d\t 1:00\t0\t-\n"
-#			(extract-calendar-year date)
-#			(calendar-month-name (extract-calendar-month date) 3)
-#			(extract-calendar-day date))))
-#     (setq year (1+ year)))))
-Rule	Egypt	2006	only	-	Sep	25	 1:00	0	-
-Rule	Egypt	2007	only	-	Sep	14	 1:00	0	-
-Rule	Egypt	2008	only	-	Sep	 3	 1:00	0	-
-Rule	Egypt	2009	max	-	Sep	lastThu	23:00s	0	-
+# From Steffen Thorsen (2006-09-19):
+# The Egyptian Gazette, issue 41,090 (2006-09-18), page 1, reports:
+# Egypt will turn back clocks by one hour at the midnight of Thursday
+# after observing the daylight saving time since May.
+# http://news.gom.com.eg/gazette/pdf/2006/09/18/01.pdf
+Rule	Egypt	2006	only	-	Sep	21	23:00s	0	-
+Rule	Egypt	2007	max	-	Sep	lastThu	23:00s	0	-
 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Africa/Cairo	2:05:00 -	LMT	1900 Oct
diff --git a/JodaTime/src/java/org/joda/time/tz/src/asia b/JodaTime/src/java/org/joda/time/tz/src/asia
index 2ce0ce5f0..ec0245037 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/asia
+++ b/JodaTime/src/java/org/joda/time/tz/src/asia
@@ -1,4 +1,4 @@
-# @(#)asia	8.6
+# @(#)asia	8.7
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
@@ -1476,6 +1476,15 @@ Zone	Asia/Karachi	4:28:12 -	LMT	1907
 # Gaza changed as well, but presumed Gaza to follow the same rules as
 # the West Bank.
 
+# From Steffen Thorsen (2006-09-26):
+# according to the Palestine News Network (2006-09-19):
+# http://english.pnn.ps/index.php?option=com_content&task=view&id=596&Itemid=5
+# > The Council of Ministers announced that this year its winter schedule
+# > will begin early, as of midnight Thursday.  It is also time to turn
+# > back the clocks for winter.  Friday will begin an hour late this week.
+# I guess it is likely that next year's date will be moved as well,
+# because of the Ramadan.
+
 # The rules for Egypt are stolen from the `africa' file.
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule EgyptAsia	1957	only	-	May	10	0:00	1:00	S
@@ -1488,8 +1497,10 @@ Rule EgyptAsia	1966	only	-	Oct	 1	3:00	0	-
 Rule Palestine	1999	2005	-	Apr	Fri>=15	0:00	1:00	S
 Rule Palestine	1999	2003	-	Oct	Fri>=15	0:00	0	-
 Rule Palestine	2004	only	-	Oct	 1	1:00	0	-
-Rule Palestine	2005	max	-	Oct	 4	2:00	0	-
+Rule Palestine	2005	only	-	Oct	 4	2:00	0	-
 Rule Palestine	2006	max	-	Apr	 1	0:00	1:00	S
+Rule Palestine	2006	only	-	Sep	22	0:00	0	-
+Rule Palestine	2007	max	-	Oct	Fri>=15	0:00	0	-
 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Asia/Gaza	2:17:52	-	LMT	1900 Oct
@@ -1668,11 +1679,18 @@ Rule	Syria	1993	only	-	Sep	25	0:00	0	-
 # IATA SSIM (1998-02) says 1998-04-02;
 # (1998-09) says 1999-03-29 and 1999-09-29; (1999-02) says 1999-04-02,
 # 2000-04-02, and 2001-04-02; (1999-09) says 2000-03-31 and 2001-03-31;
-# ignore all these claims and go with Shanks & Pottenger.
+# (2006) says 2006-03-31 and 2006-09-22;
+# for now ignore all these claims and go with Shanks & Pottenger,
+# except for the 2006-09-22 claim (which seems right for Ramadan).
 Rule	Syria	1994	1996	-	Apr	 1	0:00	1:00	S
-Rule	Syria	1994	max	-	Oct	 1	0:00	0	-
+Rule	Syria	1994	2005	-	Oct	 1	0:00	0	-
 Rule	Syria	1997	1998	-	Mar	lastMon	0:00	1:00	S
 Rule	Syria	1999	max	-	Apr	 1	0:00	1:00	S
+# From Stephen Colebourne (2006-09-18):
+# According to IATA data, Syria will change DST on 21st September [21:00 UTC]
+# this year [only]....  This is probably related to Ramadan, like Egypt.
+Rule	Syria	2006	only	-	Sep	22	0:00	0	-
+Rule	Syria	2007	max	-	Oct	 1	0:00	0	-
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Asia/Damascus	2:25:12 -	LMT	1920	# Dimashq
 			2:00	Syria	EE%sT
diff --git a/JodaTime/src/java/org/joda/time/tz/src/southamerica b/JodaTime/src/java/org/joda/time/tz/src/southamerica
index 5c37cc412..1c4b8d1c8 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/southamerica
+++ b/JodaTime/src/java/org/joda/time/tz/src/southamerica
@@ -1,4 +1,4 @@
-# @(#)southamerica	8.3
+# @(#)southamerica	8.4
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
@@ -1064,6 +1064,10 @@ Rule	Uruguay	2005	only	-	Mar	27	 2:00	0	-
 # 02:00 local time, official time in Uruguay will be at GMT -2.
 Rule	Uruguay	2005	only	-	Oct	 9	 2:00	1:00	S
 Rule	Uruguay	2006	only	-	Mar	12	 2:00	0	-
+# From Jesper Norgaard Welen (2006-09-06):
+# http://www.presidencia.gub.uy/_web/decretos/2006/09/CM%20210_08%2006%202006_00001.PDF
+Rule	Uruguay	2006	max	-	Oct	Sun>=1	 2:00	1:00	S
+Rule	Uruguay	2007	max	-	Mar	Sun>=8	 2:00	0	-
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone America/Montevideo	-3:44:44 -	LMT	1898 Jun 28
 			-3:44:44 -	MMT	1920 May  1	# Montevideo MT

From 93c7f20dc1758c44e9bd5e3ee03ed3f295eeb406 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Tue, 3 Oct 2006 15:15:17 +0000
Subject: [PATCH 16/54] Updated tz database to version 2006m.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1130 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/tz/src/Readme.txt | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
index be67fc8dd..e426fe602 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
+++ b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
@@ -1,2 +1,2 @@
 The data files in this directory were obtained from the public tz database,
-http://www.twinsun.com/tz/tz-link.htm, version 2006l.
+http://www.twinsun.com/tz/tz-link.htm, version 2006m.

From 10290929b98a5220c5703d226ce373d341196e4a Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Tue, 3 Oct 2006 15:19:58 +0000
Subject: [PATCH 17/54] Updated tz database to version 2006m.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1131 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index eba863e53..519a2b464 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -74,7 +74,7 @@ Source compatible - Yes, except
 Serialization compatible - Yes
 
 Data compatible - Yes
-  - DateTimeZone data updated to version 2006g
+  - DateTimeZone data updated to version 2006m
 
 Semantic compatible - Yes, except
   - YearMonthDay constructor no longer accepts time only strings

From d1b9870ae6f7551317befef01316af3145787542 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 9 Oct 2006 16:53:19 +0000
Subject: [PATCH 18/54] Remove tasks that are not going to happen

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1132 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/ToDo.txt | 11 -----------
 1 file changed, 11 deletions(-)

diff --git a/JodaTime/ToDo.txt b/JodaTime/ToDo.txt
index 3b3b9a2fe..2cf804695 100644
--- a/JodaTime/ToDo.txt
+++ b/JodaTime/ToDo.txt
@@ -33,17 +33,6 @@ Ideas
     DayOfWeek=Friday and DayOfMonth=13, and then resolve to find the
     next matching Friday the 13th.
 
-- DateHourMinute/DateHourMinuteSecond/YearMonth?
-    More instant variations
-    May be covered by Partial class now
-
-- DurationProperty on DateTime, Period and related?
-    Possibly a clear way to do duration stuff, however plusDays() has
-    probably dealt with this
-
-- Factories for DateTime classes?
-    Perhaps, but the constructors cover this now.
-
 - Chronology:
     Add daysFrom(year)
     This would be a DateTimeField that, given a base year, returns the number of

From cd9dae9e44426daf7b4865e2b140a07813bf50aa Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 9 Oct 2006 17:02:24 +0000
Subject: [PATCH 19/54] Add link to I18N contrib project

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1133 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/navigation.xml | 1 +
 1 file changed, 1 insertion(+)

diff --git a/JodaTime/xdocs/navigation.xml b/JodaTime/xdocs/navigation.xml
index 6d5ff9523..aeb684de3 100644
--- a/JodaTime/xdocs/navigation.xml
+++ b/JodaTime/xdocs/navigation.xml
@@ -10,6 +10,7 @@
       <item name="Joda-Time" href="/index.html"/>
       <item name="JSP tags" href="/contrib/jsptags/index.html"/>
       <item name="Hibernate" href="/contrib/hibernate/index.html"/>
+      <item name="I18N" href="/contrib/i18n/index.html"/>
     </links>
 
     <menu name="Joda Time">

From 07c9059f75dd092c03d40d8be167b932113df648 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 9 Oct 2006 17:07:22 +0000
Subject: [PATCH 20/54] Clear release notes ready for 1.4

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1134 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt | 115 ++++---------------------------------
 1 file changed, 12 insertions(+), 103 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 519a2b464..f3fbd232d 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -1,10 +1,10 @@
-Joda-Time version 1.3.1
------------------------
+Joda-Time version 1.4
+---------------------
 
 Joda-Time is a date and time handling library that seeks to replace the JDK
 Date and Calendar classes.
 
-This is the fourth full release of Joda-Time.
+This is the fifth full release of Joda-Time.
 This release focuses on new features, but also include some bug fixes.
 
 We recommend JDK 1.3 or later, and have performed no testing on earlier JDKs.
@@ -14,121 +14,30 @@ This is the same license as all of Apache, plus other open source projects such
 The intent is to make the code available to the Java community with the minimum
 of restrictions. If the license causes you problems please contact the mailing list.
 
-** Please also check out the JSP and Hibernate contributed projects **
+** Please also check out the JSP, Hibernate and I18N contributed projects **
 
 
-Enhancements since 1.2
+Enhancements since 1.3
 ----------------------
-- LocalDate/LocalTime/LocalDateTime
-  New classes representing date, time and datetime without a time zone.
-  LocalDate is the recommended replacement for YearMonthDay.
-  LocalTime is the recommended replacement for TimeOfDay.
-  These classes are implemented more flexibly than YearMonthDay and TimeOfDay
-  and thus solve the problem where you couldn't query or format fields such
-  as dayOfWeek on a YearMonthDay or millisOfDay on a TimeOfDay.
-  Neither YearMonthDay or TimeOfDay will be immediately deprecated as they
-  are in widespread use.
-  The API of the new classes has been kept as similar to YearMonthDay/TimeOfDay
-  as possible to aid migration, so this should be a search and replace change.
-
-- DateTime/DateMidnight/YearMonthDay/TimeOfDay
-  - toLocalXxx()
-  Added methods that allow conversion to the new classes, for example:
-  LocalDate date = today.toLocalDate();
-
-- DateTime/DateMidnight/YearMonthDay/TimeOfDay
-  - withXxx()
-  Added methods that allow an individul field to be changed, for example:
-  DateTime firstOfMonth = today.withDayOfMonth(1);
-  These methods are the immutable equivalent of set methods.
-  These are convenince methods for the methods on the property API.
-
-- DateTimeFormatter/DateTimeParserBucket
-  If a parsed datetime is illegal due to field range or time zone offset
-  transition, thrown exception includes text of datetime being parsed.
-
-- DateTimeFormat
-  - patternForStyle()
-  Added method to retrieve the format pattern for a given style and locale.
-
-- ISODateTimeFormat
-  - localDateParser()
-  - localTimeParser()
-  - localDateOptionalTimeParser()
-  - dateOptionalTimeParser()
-  New formats for parsing a datetime/date/time without a time zone, and for
-  parsing a date (mandatory) with an optional time
-
-
-Compatibility with 1.2
+
+
+Compatibility with 1.3
 ----------------------
-Binary compatible - Yes, except
-  - PartialConverter interface has had two new methods added.
-    This is an internal interface and thus it is unlikely that you have
-    implementations that will break. If you did create your own implementation
-    and extended AbstractConverter then your code will not break.
+Binary compatible - Yes
 
-Source compatible - Yes, except
-  - PartialConverter interface, see above
+Source compatible - Yes
 
 Serialization compatible - Yes
 
 Data compatible - Yes
   - DateTimeZone data updated to version 2006m
 
-Semantic compatible - Yes, except
-  - YearMonthDay constructor no longer accepts time only strings
-  - TimeOfDay constructor no longer accepts strings including a date
+Semantic compatible - Yes
 
 
-Deprecations since 1.2
+Deprecations since 1.3
 ----------------------
-- Instant.toDateTimeISO
-- Instant.toMutableDateTimeISO
-    These were identical to the methods without the ISO suffix
-
-
-Bug fixes since 1.2
--------------------
-- YearMonthDay
-  Constructing with String value no longer accepts a time only string
-
-- TimeOfDay
-  Constructing with String value no longer accepts date fields
-  Constructing with String now treats 'T' prefix as optional
-
-- DateTime/DateMidnight/MutableDateTime/AbstractInstant
-   Conversion methods toDateTime, toDateTimeISO, toMutableDateTime, and
-    toMutableDateTimeISO now preserve the time zone.
-    Previously calling any of these four methods would convert the result to
-    the default time zone. This was incorrect.
-    The methods have been changed to preserve the time zone.
-   The similarly named methods on Instant have not changed behaviour.
-
-- Interval.overlap/Interval.gap
-  Previously these methods returned intervals in the default time zone
-  Now, they return intervals in the time zone of the original interval
-
-- Interval/MutableInterval.overlaps(ReadableInterval)
-  Previously, these methods did not handle null correctly
-  Now, if the current millisecond instant is at the start of the interval the
-  method returns false (as defined, even if its a little unexpected)
-
-- DateTimeFormatterBuilder.MatchingParser
-  Previously didn't estimate parsed length correctly
-
-- YearMonthDay/TimeOfDay/Partial.Property
-  Hashcode was not defined
-
-- FixedDateTimeZone
-  Hashcode was not defined
-
-- ISO/Gregorian/Julian/Coptic/EthiopicChronology
-  Fixed overflow when getting year field from instants at Long.MAX_VALUE and
-  LONG.MIN_VALUE
 
-- DayOfYear field
-  Better error messages
 
 Bug fixes since 1.3
 -------------------

From 60563aa4c5a04469431c5f6e0c4850e630e99cdb Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 9 Oct 2006 17:09:04 +0000
Subject: [PATCH 21/54] Add zero-length constant to Period

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1135 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  2 ++
 JodaTime/src/java/org/joda/time/Period.java   |  6 +++++
 .../joda/time/TestPeriod_Constructors.java    | 27 ++++++++++---------
 3 files changed, 22 insertions(+), 13 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index f3fbd232d..6f65a10ce 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -19,6 +19,8 @@ of restrictions. If the license causes you problems please contact the mailing l
 
 Enhancements since 1.3
 ----------------------
+- Period.ZERO
+  Add zero-length constant to Period
 
 
 Compatibility with 1.3
diff --git a/JodaTime/src/java/org/joda/time/Period.java b/JodaTime/src/java/org/joda/time/Period.java
index e973641b7..a3267076a 100644
--- a/JodaTime/src/java/org/joda/time/Period.java
+++ b/JodaTime/src/java/org/joda/time/Period.java
@@ -53,6 +53,12 @@
         extends BasePeriod
         implements ReadablePeriod, Serializable {
 
+    /**
+     * A period of zero length and standard period type.
+     * @since 1.4
+     */
+    public static final Period ZERO = new Period();
+
     /** Serialization version */
     private static final long serialVersionUID = 741052353876488155L;
 
diff --git a/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java b/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java
index 56e1edfd0..f8f2f3850 100644
--- a/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java
+++ b/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java
@@ -33,7 +33,6 @@
     // Test in 2002/03 as time zones are more well known
     // (before the late 90's they were all over the place)
 
-    private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
     private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
     
     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 
@@ -49,18 +48,6 @@
     private long TEST_TIME_NOW =
             (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
             
-    // 2002-04-05
-    private long TEST_TIME1 =
-            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY
-            + 12L * DateTimeConstants.MILLIS_PER_HOUR
-            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;
-        
-    // 2003-05-06
-    private long TEST_TIME2 =
-            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
-            + 14L * DateTimeConstants.MILLIS_PER_HOUR
-            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;
-    
     private DateTimeZone originalDateTimeZone = null;
     private TimeZone originalTimeZone = null;
     private Locale originalLocale = null;
@@ -97,6 +84,20 @@ protected void tearDown() throws Exception {
         originalLocale = null;
     }
 
+    //-----------------------------------------------------------------------
+    public void testConstants() throws Throwable {
+        Period test = Period.ZERO;
+        assertEquals(PeriodType.standard(), test.getPeriodType());
+        assertEquals(0, test.getYears());
+        assertEquals(0, test.getMonths());
+        assertEquals(0, test.getWeeks());
+        assertEquals(0, test.getDays());
+        assertEquals(0, test.getHours());
+        assertEquals(0, test.getMinutes());
+        assertEquals(0, test.getSeconds());
+        assertEquals(0, test.getMillis());
+    }
+
     //-----------------------------------------------------------------------
     public void testConstructor1() throws Throwable {
         Period test = new Period();

From 42bde04b7208bf4cc2c43c9134c5f47c39eb0679 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 9 Oct 2006 17:13:51 +0000
Subject: [PATCH 22/54] Add Years/Months/Weeks/Days/Hours/Minutes/Seconds
 (single field period classes)

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1136 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |   5 +
 JodaTime/src/java/org/joda/time/Days.java     | 460 ++++++++++++++++++
 JodaTime/src/java/org/joda/time/Hours.java    | 459 +++++++++++++++++
 JodaTime/src/java/org/joda/time/Minutes.java  | 440 +++++++++++++++++
 JodaTime/src/java/org/joda/time/Months.java   | 366 ++++++++++++++
 JodaTime/src/java/org/joda/time/Seconds.java  | 440 +++++++++++++++++
 JodaTime/src/java/org/joda/time/Weeks.java    | 446 +++++++++++++++++
 JodaTime/src/java/org/joda/time/Years.java    | 330 +++++++++++++
 .../joda/time/base/BaseSingleFieldPeriod.java | 342 +++++++++++++
 JodaTime/src/test/org/joda/time/TestAll.java  |   9 +
 .../joda/time/TestBaseSingleFieldPeriod.java  | 333 +++++++++++++
 JodaTime/src/test/org/joda/time/TestDays.java | 384 +++++++++++++++
 .../src/test/org/joda/time/TestHours.java     | 379 +++++++++++++++
 .../src/test/org/joda/time/TestMinutes.java   | 362 ++++++++++++++
 .../src/test/org/joda/time/TestMonths.java    | 321 ++++++++++++
 .../src/test/org/joda/time/TestSeconds.java   | 352 ++++++++++++++
 .../src/test/org/joda/time/TestWeeks.java     | 382 +++++++++++++++
 .../src/test/org/joda/time/TestYears.java     | 303 ++++++++++++
 18 files changed, 6113 insertions(+)
 create mode 100644 JodaTime/src/java/org/joda/time/Days.java
 create mode 100644 JodaTime/src/java/org/joda/time/Hours.java
 create mode 100644 JodaTime/src/java/org/joda/time/Minutes.java
 create mode 100644 JodaTime/src/java/org/joda/time/Months.java
 create mode 100644 JodaTime/src/java/org/joda/time/Seconds.java
 create mode 100644 JodaTime/src/java/org/joda/time/Weeks.java
 create mode 100644 JodaTime/src/java/org/joda/time/Years.java
 create mode 100644 JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java
 create mode 100644 JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java
 create mode 100644 JodaTime/src/test/org/joda/time/TestDays.java
 create mode 100644 JodaTime/src/test/org/joda/time/TestHours.java
 create mode 100644 JodaTime/src/test/org/joda/time/TestMinutes.java
 create mode 100644 JodaTime/src/test/org/joda/time/TestMonths.java
 create mode 100644 JodaTime/src/test/org/joda/time/TestSeconds.java
 create mode 100644 JodaTime/src/test/org/joda/time/TestWeeks.java
 create mode 100644 JodaTime/src/test/org/joda/time/TestYears.java

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 6f65a10ce..0c77ac59a 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -19,6 +19,11 @@ of restrictions. If the license causes you problems please contact the mailing l
 
 Enhancements since 1.3
 ----------------------
+- Years/Months/Weeks/Days/Hours/Minutes/Seconds
+  New group of single field period classes
+  These allow applications to specify a specific field in method signatures and calculations
+  Methods are provided to convert between most of these based on standard length periods
+
 - Period.ZERO
   Add zero-length constant to Period
 
diff --git a/JodaTime/src/java/org/joda/time/Days.java b/JodaTime/src/java/org/joda/time/Days.java
new file mode 100644
index 000000000..c4be58fce
--- /dev/null
+++ b/JodaTime/src/java/org/joda/time/Days.java
@@ -0,0 +1,460 @@
+/*
+ *  Copyright 2001-2006 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time;
+
+import org.joda.time.base.BaseSingleFieldPeriod;
+import org.joda.time.field.FieldUtils;
+import org.joda.time.format.ISOPeriodFormat;
+import org.joda.time.format.PeriodFormatter;
+
+/**
+ * An immutable time period representing a number of days.
+ * <p>
+ * <code>Days</code> is an immutable period that can only store days.
+ * It does not store years, months or hours for example. As such it is a
+ * type-safe way of representing a number of days in an application.
+ * <p>
+ * The number of days is set in the constructor, and may be queried using
+ * <code>getDays()</code>. Basic mathematical operations are provided -
+ * <code>plus()</code>, <code>minus()</code>, <code>multipliedBy()</code> and
+ * <code>dividedBy()</code>.
+ * <p>
+ * <code>Days</code> is thread-safe and immutable.
+ *
+ * @author Stephen Colebourne
+ * @since 1.4
+ */
+public final class Days extends BaseSingleFieldPeriod {
+
+    /** Constant representing zero days. */
+    public static final Days ZERO = new Days(0);
+    /** Constant representing one day. */
+    public static final Days ONE = new Days(1);
+    /** Constant representing two days. */
+    public static final Days TWO = new Days(2);
+    /** Constant representing three days. */
+    public static final Days THREE = new Days(3);
+    /** Constant representing four days. */
+    public static final Days FOUR = new Days(4);
+    /** Constant representing five days. */
+    public static final Days FIVE = new Days(5);
+    /** Constant representing six days. */
+    public static final Days SIX = new Days(6);
+    /** Constant representing seven days. */
+    public static final Days SEVEN = new Days(7);
+    /** Constant representing the maximum nuber of days that can be stored in this object. */
+    public static final Days MAX_VALUE = new Days(Integer.MAX_VALUE);
+    /** Constant representing the minimum nuber of days that can be stored in this object. */
+    public static final Days MIN_VALUE = new Days(Integer.MIN_VALUE);
+
+    /** The paser to use for this class. */
+    private static final PeriodFormatter PARSER = ISOPeriodFormat.standard().withParseType(PeriodType.days());
+    /** Serialization version. */
+    private static final long serialVersionUID = 87525275727380865L;
+
+    //-----------------------------------------------------------------------
+    /**
+     * Obtains an instance of <code>Days</code> that may be cached.
+     * <code>Days</code> is immutable, so instances can be cached and shared.
+     * This factory method provides access to shared instances.
+     *
+     * @param days  the number of days to obtain an instance for
+     * @return the instance of Days
+     */
+    public static Days days(int days) {
+        switch (days) {
+            case 0:
+                return ZERO;
+            case 1:
+                return ONE;
+            case 2:
+                return TWO;
+            case 3:
+                return THREE;
+            case 4:
+                return FOUR;
+            case 5:
+                return FIVE;
+            case 6:
+                return SIX;
+            case 7:
+                return SEVEN;
+            case Integer.MAX_VALUE:
+                return MAX_VALUE;
+            case Integer.MIN_VALUE:
+                return MIN_VALUE;
+            default:
+                return new Days(days);
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Creates a <code>Days</code> representing the number of whole days
+     * between the two specified datetimes. This method corectly handles
+     * any daylight savings time changes that may occur during the interval.
+     *
+     * @param start  the start instant, must not be null
+     * @param end  the end instant, must not be null
+     * @return the period in days
+     * @throws IllegalArgumentException if the instants are null or invalid
+     */
+    public static Days daysBetween(ReadableInstant start, ReadableInstant end) {
+        int amount = BaseSingleFieldPeriod.between(start, end, DurationFieldType.days());
+        return Days.days(amount);
+    }
+
+    /**
+     * Creates a <code>Days</code> representing the number of whole days
+     * between the two specified partial datetimes.
+     * <p>
+     * The two partials must contain the same fields, for example you can specify
+     * two <code>LocalDate</code> objects.
+     *
+     * @param start  the start partial date, must not be null
+     * @param end  the end partial date, must not be null
+     * @return the period in days
+     * @throws IllegalArgumentException if the partials are null or invalid
+     */
+    public static Days daysBetween(ReadablePartial start, ReadablePartial end) {
+        if (start instanceof LocalDate && end instanceof LocalDate)   {
+            Chronology chrono = DateTimeUtils.getChronology(start.getChronology());
+            int days = chrono.days().getDifference(
+                    ((LocalDate) end).getLocalMillis(), ((LocalDate) start).getLocalMillis());
+            return Days.days(days);
+        }
+        int amount = BaseSingleFieldPeriod.between(start, end, ZERO);
+        return Days.days(amount);
+    }
+
+    /**
+     * Creates a <code>Days</code> representing the number of whole days
+     * in the specified interval. This method corectly handles any daylight
+     * savings time changes that may occur during the interval.
+     *
+     * @param interval  the interval to extract days from, null returns zero
+     * @return the period in days
+     * @throws IllegalArgumentException if the partials are null or invalid
+     */
+    public static Days daysIn(ReadableInterval interval) {
+        if (interval == null)   {
+            return Days.ZERO;
+        }
+        int amount = BaseSingleFieldPeriod.between(interval.getStart(), interval.getEnd(), DurationFieldType.days());
+        return Days.days(amount);
+    }
+
+    /**
+     * Creates a new <code>Days</code> representing the number of complete
+     * standard length days in the specified period.
+     * <p>
+     * This factory method converts all fields from the period to hours using standardised
+     * durations for each field. Only those fields which have a precise duration in
+     * the ISO UTC chronology can be converted.
+     * <ul>
+     * <li>One week consists of 7 days.
+     * <li>One day consists of 24 hours.
+     * <li>One hour consists of 60 minutes.
+     * <li>One minute consists of 60 seconds.
+     * <li>One second consists of 1000 milliseconds.
+     * </ul>
+     * Months and Years are imprecise and periods containing these values cannot be converted.
+     *
+     * @param period  the period to get the number of hours from, null returns zero
+     * @return the period in days
+     * @throws IllegalArgumentException if the period contains imprecise duration values
+     */
+    public static Days standardDaysIn(ReadablePeriod period) {
+        int amount = BaseSingleFieldPeriod.standardPeriodIn(period, DateTimeConstants.MILLIS_PER_DAY);
+        return Days.days(amount);
+    }
+
+    /**
+     * Creates a new <code>Days</code> by parsing a string in the ISO8601 format 'PnD'.
+     * <p>
+     * The parse will accept the full ISO syntax of PnYnMnWnDTnHnMnS however only the
+     * days component may be non-zero. If any other component is non-zero, an exception
+     * will be thrown.
+     *
+     * @param periodStr  the period string, null returns zero
+     * @return the period in days
+     * @throws IllegalArgumentException if the string format is invalid
+     */
+    public static Days parseDays(String periodStr) {
+        if (periodStr == null) {
+            return Days.ZERO;
+        }
+        Period p = PARSER.parsePeriod(periodStr);
+        return Days.days(p.getDays());
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Creates a new instance representing a number of days.
+     * You should consider using the factory method {@link #days(int)}
+     * instead of the constructor.
+     *
+     * @param days  the number of days to represent
+     */
+    private Days(int days) {
+        super(days);
+    }
+
+    /**
+     * Resolves singletons.
+     * 
+     * @return the singleton instance
+     */
+    private Object readResolve() {
+        return Days.days(getValue());
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the duration field type, which is <code>days</code>.
+     *
+     * @return the period type
+     */
+    public DurationFieldType getFieldType() {
+        return DurationFieldType.days();
+    }
+
+    /**
+     * Gets the period type, which is <code>days</code>.
+     *
+     * @return the period type
+     */
+    public PeriodType getPeriodType() {
+        return PeriodType.days();
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Converts this period in days to a period in weeks assuming a
+     * 7 day week.
+     * <p>
+     * This method allows you to convert between different types of period.
+     * However to achieve this it makes the assumption that all weeks are
+     * 7 days long.
+     * This may not be true for some unusual chronologies. However, it is included
+     * as it is a useful operation for many applications and business rules.
+     * 
+     * @return a period representing the number of weeks for this number of days
+     */
+    public Weeks toStandardWeeks() {
+        return Weeks.weeks(getValue() / DateTimeConstants.DAYS_PER_WEEK);
+    }
+
+    /**
+     * Converts this period in days to a period in hours assuming a
+     * 24 hour day.
+     * <p>
+     * This method allows you to convert between different types of period.
+     * However to achieve this it makes the assumption that all days are 24 hours long.
+     * This is not true when daylight savings is considered and may also not
+     * be true for some unusual chronologies. However, it is included
+     * as it is a useful operation for many applications and business rules.
+     * 
+     * @return a period representing the number of hours for this number of days
+     * @throws ArithmeticException if the number of hours is too large to be represented
+     */
+    public Hours toStandardHours() {
+        return Hours.hours(FieldUtils.safeMultiply(getValue(), DateTimeConstants.HOURS_PER_DAY));
+    }
+
+    /**
+     * Converts this period in days to a period in minutes assuming a
+     * 24 hour day and 60 minute hour.
+     * <p>
+     * This method allows you to convert between different types of period.
+     * However to achieve this it makes the assumption that all days are 24 hours
+     * long and all hours are 60 minutes long.
+     * This is not true when daylight savings is considered and may also not
+     * be true for some unusual chronologies. However, it is included
+     * as it is a useful operation for many applications and business rules.
+     * 
+     * @return a period representing the number of minutes for this number of days
+     * @throws ArithmeticException if the number of minutes is too large to be represented
+     */
+    public Minutes toStandardMinutes() {
+        return Minutes.minutes(FieldUtils.safeMultiply(getValue(), DateTimeConstants.MINUTES_PER_DAY));
+    }
+
+    /**
+     * Converts this period in days to a period in seconds assuming a
+     * 24 hour day, 60 minute hour and 60 second minute.
+     * <p>
+     * This method allows you to convert between different types of period.
+     * However to achieve this it makes the assumption that all days are 24 hours
+     * long, all hours are 60 minutes long and all minutes are 60 seconds long.
+     * This is not true when daylight savings is considered and may also not
+     * be true for some unusual chronologies. However, it is included
+     * as it is a useful operation for many applications and business rules.
+     * 
+     * @return a period representing the number of seconds for this number of days
+     * @throws ArithmeticException if the number of seconds is too large to be represented
+     */
+    public Seconds toStandardSeconds() {
+        return Seconds.seconds(FieldUtils.safeMultiply(getValue(), DateTimeConstants.SECONDS_PER_DAY));
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Converts this period in days to a duration in milliseconds assuming a
+     * 24 hour day, 60 minute hour and 60 second minute.
+     * <p>
+     * This method allows you to convert from a period to a duration.
+     * However to achieve this it makes the assumption that all days are 24 hours
+     * long, all hours are 60 minutes and all minutes are 60 seconds.
+     * This is not true when daylight savings time is considered, and may also
+     * not be true for some unusual chronologies. However, it is included as it
+     * is a useful operation for many applications and business rules.
+     * 
+     * @return a period representing the number of hours for this number of days
+     */
+    public Duration toStandardDuration() {
+        long days = getValue();  // assign to a long
+        return new Duration(days * DateTimeConstants.MILLIS_PER_DAY);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the number of days that this period represents.
+     *
+     * @return the number of days in the period
+     */
+    public int getDays() {
+        return getValue();
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Returns a new instance with the specified number of days added.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
+     *
+     * @param days  the amount of days to add, may be negative
+     * @return the new period plus the specified number of days
+     * @throws ArithmeticException if the result overflows an int
+     */
+    public Days plus(int days) {
+        if (days == 0) {
+            return this;
+        }
+        return Days.days(FieldUtils.safeAdd(getValue(), days));
+    }
+
+    /**
+     * Returns a new instance with the specified number of days added.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
+     *
+     * @param days  the amount of days to add, may be negative, null means zero
+     * @return the new period plus the specified number of days
+     * @throws ArithmeticException if the result overflows an int
+     */
+    public Days plus(Days days) {
+        if (days == null) {
+            return this;
+        }
+        return plus(days.getValue());
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Returns a new instance with the specified number of days taken away.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
+     *
+     * @param days  the amount of days to take away, may be negative
+     * @return the new period minus the specified number of days
+     * @throws ArithmeticException if the result overflows an int
+     */
+    public Days minus(int days) {
+        return plus(FieldUtils.safeNegate(days));
+    }
+
+    /**
+     * Returns a new instance with the specified number of days taken away.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
+     *
+     * @param days  the amount of days to take away, may be negative, null means zero
+     * @return the new period minus the specified number of days
+     * @throws ArithmeticException if the result overflows an int
+     */
+    public Days minus(Days days) {
+        if (days == null) {
+            return this;
+        }
+        return minus(days.getValue());
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Returns a new instance with the days multiplied by the specified scalar.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
+     *
+     * @param scalar  the amount to multiply by, may be negative
+     * @return the new period multiplied by the specified scalar
+     * @throws ArithmeticException if the result overflows an int
+     */
+    public Days multipliedBy(int scalar) {
+        return Days.days(FieldUtils.safeMultiply(getValue(), scalar));
+    }
+
+    /**
+     * Returns a new instance with the days divided by the specified divisor.
+     * The calculation uses integer division, thus 3 divided by 2 is 1.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
+     *
+     * @param divisor  the amount to divide by, may be negative
+     * @return the new period divided by the specified divisor
+     * @throws ArithmeticException if the divisor is zero
+     */
+    public Days dividedBy(int divisor) {
+        if (divisor == 1) {
+            return this;
+        }
+        return Days.days(getValue() / divisor);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Negates the number of days in this period.
+     *
+     * @return the new period with a negated value
+     * @throws ArithmeticException if the result overflows an int
+     */
+    public Days negate() {
+        return Days.days(FieldUtils.safeNegate(getValue()));
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets this instance as a String in the ISO8601 duration format.
+     * <p>
+     * For example, "P4D" represents 4 days.
+     *
+     * @return the value as an ISO8601 string
+     */
+    public String toString() {
+        return "P" + String.valueOf(getValue()) + "D";
+    }
+
+}
diff --git a/JodaTime/src/java/org/joda/time/Hours.java b/JodaTime/src/java/org/joda/time/Hours.java
new file mode 100644
index 000000000..da1d14871
--- /dev/null
+++ b/JodaTime/src/java/org/joda/time/Hours.java
@@ -0,0 +1,459 @@
+/*
+ *  Copyright 2001-2006 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time;
+
+import org.joda.time.base.BaseSingleFieldPeriod;
+import org.joda.time.field.FieldUtils;
+import org.joda.time.format.ISOPeriodFormat;
+import org.joda.time.format.PeriodFormatter;
+
+/**
+ * An immutable time period representing a number of hours.
+ * <p>
+ * <code>Hours</code> is an immutable period that can only store hours.
+ * It does not store years, months or minutes for example. As such it is a
+ * type-safe way of representing a number of hours in an application.
+ * <p>
+ * The number of hours is set in the constructor, and may be queried using
+ * <code>getHours()</code>. Basic mathematical operations are provided -
+ * <code>plus()</code>, <code>minus()</code>, <code>multipliedBy()</code> and
+ * <code>dividedBy()</code>.
+ * <p>
+ * <code>Hours</code> is thread-safe and immutable.
+ *
+ * @author Stephen Colebourne
+ * @since 1.4
+ */
+public final class Hours extends BaseSingleFieldPeriod {
+
+    /** Constant representing zero hours. */
+    public static final Hours ZERO = new Hours(0);
+    /** Constant representing one hour. */
+    public static final Hours ONE = new Hours(1);
+    /** Constant representing two hours. */
+    public static final Hours TWO = new Hours(2);
+    /** Constant representing three hours. */
+    public static final Hours THREE = new Hours(3);
+    /** Constant representing four hours. */
+    public static final Hours FOUR = new Hours(4);
+    /** Constant representing five hours. */
+    public static final Hours FIVE = new Hours(5);
+    /** Constant representing six hours. */
+    public static final Hours SIX = new Hours(6);
+    /** Constant representing seven hours. */
+    public static final Hours SEVEN = new Hours(7);
+    /** Constant representing seven hours. */
+    public static final Hours EIGHT = new Hours(8);
+    /** Constant representing the maximum nuber of hours that can be stored in this object. */
+    public static final Hours MAX_VALUE = new Hours(Integer.MAX_VALUE);
+    /** Constant representing the minimum nuber of hours that can be stored in this object. */
+    public static final Hours MIN_VALUE = new Hours(Integer.MIN_VALUE);
+
+    /** The paser to use for this class. */
+    private static final PeriodFormatter PARSER = ISOPeriodFormat.standard().withParseType(PeriodType.hours());
+    /** Serialization version. */
+    private static final long serialVersionUID = 87525275727380864L;
+
+    //-----------------------------------------------------------------------
+    /**
+     * Obtains an instance of <code>Hours</code> that may be cached.
+     * <code>Hours</code> is immutable, so instances can be cached and shared.
+     * This factory method provides access to shared instances.
+     *
+     * @param hours  the number of hours to obtain an instance for
+     * @return the instance of Hours
+     */
+    public static Hours hours(int hours) {
+        switch (hours) {
+            case 0:
+                return ZERO;
+            case 1:
+                return ONE;
+            case 2:
+                return TWO;
+            case 3:
+                return THREE;
+            case 4:
+                return FOUR;
+            case 5:
+                return FIVE;
+            case 6:
+                return SIX;
+            case 7:
+                return SEVEN;
+            case 8:
+                return EIGHT;
+            case Integer.MAX_VALUE:
+                return MAX_VALUE;
+            case Integer.MIN_VALUE:
+                return MIN_VALUE;
+            default:
+                return new Hours(hours);
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Creates a <code>Hours</code> representing the number of whole hours
+     * between the two specified datetimes.
+     *
+     * @param start  the start instant, must not be null
+     * @param end  the end instant, must not be null
+     * @return the period in hours
+     * @throws IllegalArgumentException if the instants are null or invalid
+     */
+    public static Hours hoursBetween(ReadableInstant start, ReadableInstant end) {
+        int amount = BaseSingleFieldPeriod.between(start, end, DurationFieldType.hours());
+        return Hours.hours(amount);
+    }
+
+    /**
+     * Creates a <code>Hours</code> representing the number of whole hours
+     * between the two specified partial datetimes.
+     * <p>
+     * The two partials must contain the same fields, for example you can specify
+     * two <code>LocalTime</code> objects.
+     *
+     * @param start  the start partial date, must not be null
+     * @param end  the end partial date, must not be null
+     * @return the period in hours
+     * @throws IllegalArgumentException if the partials are null or invalid
+     */
+    public static Hours hoursBetween(ReadablePartial start, ReadablePartial end) {
+        if (start instanceof LocalTime && end instanceof LocalTime)   {
+            Chronology chrono = DateTimeUtils.getChronology(start.getChronology());
+            int hours = chrono.hours().getDifference(
+                    ((LocalTime) end).getLocalMillis(), ((LocalTime) start).getLocalMillis());
+            return Hours.hours(hours);
+        }
+        int amount = BaseSingleFieldPeriod.between(start, end, ZERO);
+        return Hours.hours(amount);
+    }
+
+    /**
+     * Creates a <code>Hours</code> representing the number of whole hours
+     * in the specified interval.
+     *
+     * @param interval  the interval to extract hours from, null returns zero
+     * @return the period in hours
+     * @throws IllegalArgumentException if the partials are null or invalid
+     */
+    public static Hours hoursIn(ReadableInterval interval) {
+        if (interval == null)   {
+            return Hours.ZERO;
+        }
+        int amount = BaseSingleFieldPeriod.between(interval.getStart(), interval.getEnd(), DurationFieldType.hours());
+        return Hours.hours(amount);
+    }
+
+    /**
+     * Creates a new <code>Hours</code> representing the number of complete
+     * standard length hours in the specified period.
+     * <p>
+     * This factory method converts all fields from the period to hours using standardised
+     * durations for each field. Only those fields which have a precise duration in
+     * the ISO UTC chronology can be converted.
+     * <ul>
+     * <li>One week consists of 7 days.
+     * <li>One day consists of 24 hours.
+     * <li>One hour consists of 60 minutes.
+     * <li>One minute consists of 60 seconds.
+     * <li>One second consists of 1000 milliseconds.
+     * </ul>
+     * Months and Years are imprecise and periods containing these values cannot be converted.
+     *
+     * @param period  the period to get the number of hours from, null returns zero
+     * @return the period in hours
+     * @throws IllegalArgumentException if the period contains imprecise duration values
+     */
+    public static Hours standardHoursIn(ReadablePeriod period) {
+        int amount = BaseSingleFieldPeriod.standardPeriodIn(period, DateTimeConstants.MILLIS_PER_HOUR);
+        return Hours.hours(amount);
+    }
+
+    /**
+     * Creates a new <code>Hours</code> by parsing a string in the ISO8601 format 'PTnH'.
+     * <p>
+     * The parse will accept the full ISO syntax of PnYnMnWnDTnHnMnS however only the
+     * hours component may be non-zero. If any other component is non-zero, an exception
+     * will be thrown.
+     *
+     * @param periodStr  the period string, null returns zero
+     * @return the period in hours
+     * @throws IllegalArgumentException if the string format is invalid
+     */
+    public static Hours parseHours(String periodStr) {
+        if (periodStr == null) {
+            return Hours.ZERO;
+        }
+        Period p = PARSER.parsePeriod(periodStr);
+        return Hours.hours(p.getHours());
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Creates a new instance representing a number of hours.
+     * You should consider using the factory method {@link #hours(int)}
+     * instead of the constructor.
+     *
+     * @param hours  the number of hours to represent
+     */
+    private Hours(int hours) {
+        super(hours);
+    }
+
+    /**
+     * Resolves singletons.
+     * 
+     * @return the singleton instance
+     */
+    private Object readResolve() {
+        return Hours.hours(getValue());
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the duration field type, which is <code>hours</code>.
+     *
+     * @return the period type
+     */
+    public DurationFieldType getFieldType() {
+        return DurationFieldType.hours();
+    }
+
+    /**
+     * Gets the period type, which is <code>hours</code>.
+     *
+     * @return the period type
+     */
+    public PeriodType getPeriodType() {
+        return PeriodType.hours();
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Converts this period in hours to a period in weeks assuming a
+     * 7 day week and 24 hour day.
+     * <p>
+     * This method allows you to convert between different types of period.
+     * However to achieve this it makes the assumption that all weeks are 7 days
+     * long and all days are 24 hours long.
+     * This is not true when daylight savings time is considered, and may also
+     * not be true for some unusual chronologies. However, it is included as it
+     * is a useful operation for many applications and business rules.
+     * 
+     * @return a period representing the number of whole weeks for this number of hours
+     */
+    public Weeks toStandardWeeks() {
+        return Weeks.weeks(getValue() / DateTimeConstants.HOURS_PER_WEEK);
+    }
+
+    /**
+     * Converts this period in hours to a period in days assuming a
+     * 24 hour day.
+     * <p>
+     * This method allows you to convert between different types of period.
+     * However to achieve this it makes the assumption that all days are 24 hours long.
+     * This is not true when daylight savings time is considered, and may also
+     * not be true for some unusual chronologies. However, it is included as it
+     * is a useful operation for many applications and business rules.
+     * 
+     * @return a period representing the number of whole days for this number of hours
+     */
+    public Days toStandardDays() {
+        return Days.days(getValue() / DateTimeConstants.HOURS_PER_DAY);
+    }
+
+    /**
+     * Converts this period in hours to a period in minutes assuming a
+     * 60 minute hour.
+     * <p>
+     * This method allows you to convert between different types of period.
+     * However to achieve this it makes the assumption that all hours are 60 minutes long.
+     * This may not be true for some unusual chronologies. However, it is included
+     * as it is a useful operation for many applications and business rules.
+     * 
+     * @return a period representing the number of minutes for this number of hours
+     * @throws ArithmeticException if the number of minutes is too large to be represented
+     */
+    public Minutes toStandardMinutes() {
+        return Minutes.minutes(FieldUtils.safeMultiply(getValue(), DateTimeConstants.MINUTES_PER_HOUR));
+    }
+
+    /**
+     * Converts this period in hours to a period in seconds assuming a
+     * 60 minute hour and 60 second minute.
+     * <p>
+     * This method allows you to convert between different types of period.
+     * However to achieve this it makes the assumption that all hours are
+     * 60 minutes long and all minutes are 60 seconds long.
+     * This may not be true for some unusual chronologies. However, it is included
+     * as it is a useful operation for many applications and business rules.
+     * 
+     * @return a period representing the number of seconds for this number of hours
+     * @throws ArithmeticException if the number of seconds is too large to be represented
+     */
+    public Seconds toStandardSeconds() {
+        return Seconds.seconds(FieldUtils.safeMultiply(getValue(), DateTimeConstants.SECONDS_PER_HOUR));
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Converts this period in hours to a duration in milliseconds assuming a
+     * 60 minute hour and 60 second minute.
+     * <p>
+     * This method allows you to convert from a period to a duration.
+     * However to achieve this it makes the assumption that all hours are
+     * 60 minutes and all minutes are 60 seconds. This might not be true for an
+     * unusual chronology, for example one that takes leap seconds into account.
+     * However, the method is included as it is a useful operation for many
+     * applications and business rules.
+     *
+     * @return a period representing the number of hours for this number of hours
+     */
+    public Duration toStandardDuration() {
+        long hours = getValue();  // assign to a long
+        return new Duration(hours * DateTimeConstants.MILLIS_PER_HOUR);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the number of hours that this period represents.
+     *
+     * @return the number of hours in the period
+     */
+    public int getHours() {
+        return getValue();
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Returns a new instance with the specified number of hours added.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
+     *
+     * @param hours  the amount of hours to add, may be negative
+     * @return the new period plus the specified number of hours
+     * @throws ArithmeticException if the result overflows an int
+     */
+    public Hours plus(int hours) {
+        if (hours == 0) {
+            return this;
+        }
+        return Hours.hours(FieldUtils.safeAdd(getValue(), hours));
+    }
+
+    /**
+     * Returns a new instance with the specified number of hours added.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
+     *
+     * @param hours  the amount of hours to add, may be negative, null means zero
+     * @return the new period plus the specified number of hours
+     * @throws ArithmeticException if the result overflows an int
+     */
+    public Hours plus(Hours hours) {
+        if (hours == null) {
+            return this;
+        }
+        return plus(hours.getValue());
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Returns a new instance with the specified number of hours taken away.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
+     *
+     * @param hours  the amount of hours to take away, may be negative
+     * @return the new period minus the specified number of hours
+     * @throws ArithmeticException if the result overflows an int
+     */
+    public Hours minus(int hours) {
+        return plus(FieldUtils.safeNegate(hours));
+    }
+
+    /**
+     * Returns a new instance with the specified number of hours taken away.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
+     *
+     * @param hours  the amount of hours to take away, may be negative, null means zero
+     * @return the new period minus the specified number of hours
+     * @throws ArithmeticException if the result overflows an int
+     */
+    public Hours minus(Hours hours) {
+        if (hours == null) {
+            return this;
+        }
+        return minus(hours.getValue());
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Returns a new instance with the hours multiplied by the specified scalar.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
+     *
+     * @param scalar  the amount to multiply by, may be negative
+     * @return the new period multiplied by the specified scalar
+     * @throws ArithmeticException if the result overflows an int
+     */
+    public Hours multipliedBy(int scalar) {
+        return Hours.hours(FieldUtils.safeMultiply(getValue(), scalar));
+    }
+
+    /**
+     * Returns a new instance with the hours divided by the specified divisor.
+     * The calculation uses integer division, thus 3 divided by 2 is 1.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
+     *
+     * @param divisor  the amount to divide by, may be negative
+     * @return the new period divided by the specified divisor
+     * @throws ArithmeticException if the divisor is zero
+     */
+    public Hours dividedBy(int divisor) {
+        if (divisor == 1) {
+            return this;
+        }
+        return Hours.hours(getValue() / divisor);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Negates the number of hours in this period.
+     *
+     * @return the new period with a negated value
+     * @throws ArithmeticException if the result overflows an int
+     */
+    public Hours negate() {
+        return Hours.hours(FieldUtils.safeNegate(getValue()));
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets this instance as a String in the ISO8601 duration format.
+     * <p>
+     * For example, "PT4H" represents 4 hours.
+     *
+     * @return the value as an ISO8601 string
+     */
+    public String toString() {
+        return "PT" + String.valueOf(getValue()) + "H";
+    }
+
+}
diff --git a/JodaTime/src/java/org/joda/time/Minutes.java b/JodaTime/src/java/org/joda/time/Minutes.java
new file mode 100644
index 000000000..07c70d05d
--- /dev/null
+++ b/JodaTime/src/java/org/joda/time/Minutes.java
@@ -0,0 +1,440 @@
+/*
+ *  Copyright 2001-2006 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time;
+
+import org.joda.time.base.BaseSingleFieldPeriod;
+import org.joda.time.field.FieldUtils;
+import org.joda.time.format.ISOPeriodFormat;
+import org.joda.time.format.PeriodFormatter;
+
+/**
+ * An immutable time period representing a number of minutes.
+ * <p>
+ * <code>Minutes</code> is an immutable period that can only store minutes.
+ * It does not store years, months or hours for example. As such it is a
+ * type-safe way of representing a number of minutes in an application.
+ * <p>
+ * The number of minutes is set in the constructor, and may be queried using
+ * <code>getMinutes()</code>. Basic mathematical operations are provided -
+ * <code>plus()</code>, <code>minus()</code>, <code>multipliedBy()</code> and
+ * <code>dividedBy()</code>.
+ * <p>
+ * <code>Minutes</code> is thread-safe and immutable.
+ *
+ * @author Stephen Colebourne
+ * @since 1.4
+ */
+public final class Minutes extends BaseSingleFieldPeriod {
+
+    /** Constant representing zero minutes. */
+    public static final Minutes ZERO = new Minutes(0);
+    /** Constant representing one minute. */
+    public static final Minutes ONE = new Minutes(1);
+    /** Constant representing two minutes. */
+    public static final Minutes TWO = new Minutes(2);
+    /** Constant representing three minutes. */
+    public static final Minutes THREE = new Minutes(3);
+    /** Constant representing the maximum nuber of minutes that can be stored in this object. */
+    public static final Minutes MAX_VALUE = new Minutes(Integer.MAX_VALUE);
+    /** Constant representing the minimum nuber of minutes that can be stored in this object. */
+    public static final Minutes MIN_VALUE = new Minutes(Integer.MIN_VALUE);
+
+    /** The paser to use for this class. */
+    private static final PeriodFormatter PARSER = ISOPeriodFormat.standard().withParseType(PeriodType.minutes());
+    /** Serialization version. */
+    private static final long serialVersionUID = 87525275727380863L;
+
+    //-----------------------------------------------------------------------
+    /**
+     * Obtains an instance of <code>Minutes</code> that may be cached.
+     * <code>Minutes</code> is immutable, so instances can be cached and shared.
+     * This factory method provides access to shared instances.
+     *
+     * @param minutes  the number of minutes to obtain an instance for
+     * @return the instance of Minutes
+     */
+    public static Minutes minutes(int minutes) {
+        switch (minutes) {
+            case 0:
+                return ZERO;
+            case 1:
+                return ONE;
+            case 2:
+                return TWO;
+            case 3:
+                return THREE;
+            case Integer.MAX_VALUE:
+                return MAX_VALUE;
+            case Integer.MIN_VALUE:
+                return MIN_VALUE;
+            default:
+                return new Minutes(minutes);
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Creates a <code>Minutes</code> representing the number of whole minutes
+     * between the two specified datetimes.
+     *
+     * @param start  the start instant, must not be null
+     * @param end  the end instant, must not be null
+     * @return the period in minutes
+     * @throws IllegalArgumentException if the instants are null or invalid
+     */
+    public static Minutes minutesBetween(ReadableInstant start, ReadableInstant end) {
+        int amount = BaseSingleFieldPeriod.between(start, end, DurationFieldType.minutes());
+        return Minutes.minutes(amount);
+    }
+
+    /**
+     * Creates a <code>Minutes</code> representing the number of whole minutes
+     * between the two specified partial datetimes.
+     * <p>
+     * The two partials must contain the same fields, for example you can specify
+     * two <code>LocalTime</code> objects.
+     *
+     * @param start  the start partial date, must not be null
+     * @param end  the end partial date, must not be null
+     * @return the period in minutes
+     * @throws IllegalArgumentException if the partials are null or invalid
+     */
+    public static Minutes minutesBetween(ReadablePartial start, ReadablePartial end) {
+        if (start instanceof LocalTime && end instanceof LocalTime)   {
+            Chronology chrono = DateTimeUtils.getChronology(start.getChronology());
+            int minutes = chrono.minutes().getDifference(
+                    ((LocalTime) end).getLocalMillis(), ((LocalTime) start).getLocalMillis());
+            return Minutes.minutes(minutes);
+        }
+        int amount = BaseSingleFieldPeriod.between(start, end, ZERO);
+        return Minutes.minutes(amount);
+    }
+
+    /**
+     * Creates a <code>Minutes</code> representing the number of whole minutes
+     * in the specified interval.
+     *
+     * @param interval  the interval to extract minutes from, null returns zero
+     * @return the period in minutes
+     * @throws IllegalArgumentException if the partials are null or invalid
+     */
+    public static Minutes minutesIn(ReadableInterval interval) {
+        if (interval == null)   {
+            return Minutes.ZERO;
+        }
+        int amount = BaseSingleFieldPeriod.between(interval.getStart(), interval.getEnd(), DurationFieldType.minutes());
+        return Minutes.minutes(amount);
+    }
+
+    /**
+     * Creates a new <code>Minutes</code> representing the number of complete
+     * standard length minutes in the specified period.
+     * <p>
+     * This factory method converts all fields from the period to minutes using standardised
+     * durations for each field. Only those fields which have a precise duration in
+     * the ISO UTC chronology can be converted.
+     * <ul>
+     * <li>One week consists of 7 days.
+     * <li>One day consists of 24 hours.
+     * <li>One hour consists of 60 minutes.
+     * <li>One minute consists of 60 seconds.
+     * <li>One second consists of 1000 milliseconds.
+     * </ul>
+     * Months and Years are imprecise and periods containing these values cannot be converted.
+     *
+     * @param period  the period to get the number of minutes from, null returns zero
+     * @return the period in minutes
+     * @throws IllegalArgumentException if the period contains imprecise duration values
+     */
+    public static Minutes standardMinutesIn(ReadablePeriod period) {
+        int amount = BaseSingleFieldPeriod.standardPeriodIn(period, DateTimeConstants.MILLIS_PER_MINUTE);
+        return Minutes.minutes(amount);
+    }
+
+    /**
+     * Creates a new <code>Minutes</code> by parsing a string in the ISO8601 format 'PTnM'.
+     * <p>
+     * The parse will accept the full ISO syntax of PnYnMnWnDTnHnMnS however only the
+     * minutes component may be non-zero. If any other component is non-zero, an exception
+     * will be thrown.
+     *
+     * @param periodStr  the period string, null returns zero
+     * @return the period in minutes
+     * @throws IllegalArgumentException if the string format is invalid
+     */
+    public static Minutes parseMinutes(String periodStr) {
+        if (periodStr == null) {
+            return Minutes.ZERO;
+        }
+        Period p = PARSER.parsePeriod(periodStr);
+        return Minutes.minutes(p.getMinutes());
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Creates a new instance representing a number of minutes.
+     * You should consider using the factory method {@link #minutes(int)}
+     * instead of the constructor.
+     *
+     * @param minutes  the number of minutes to represent
+     */
+    private Minutes(int minutes) {
+        super(minutes);
+    }
+
+    /**
+     * Resolves singletons.
+     * 
+     * @return the singleton instance
+     */
+    private Object readResolve() {
+        return Minutes.minutes(getValue());
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the duration field type, which is <code>minutes</code>.
+     *
+     * @return the period type
+     */
+    public DurationFieldType getFieldType() {
+        return DurationFieldType.minutes();
+    }
+
+    /**
+     * Gets the period type, which is <code>minutes</code>.
+     *
+     * @return the period type
+     */
+    public PeriodType getPeriodType() {
+        return PeriodType.minutes();
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Converts this period in minutes to a period in weeks assuming a
+     * 7 days week, 24 hour day and 60 minute hour.
+     * <p>
+     * This method allows you to convert between different types of period.
+     * However to achieve this it makes the assumption that all weeks are
+     * 7 days long, all days are 24 hours long and all hours are 60 minutes long.
+     * This is not true when daylight savings is considered and may also not
+     * be true for some unusual chronologies. However, it is included
+     * as it is a useful operation for many applications and business rules.
+     * 
+     * @return a period representing the number of whole weeks for this number of minutes
+     */
+    public Weeks toStandardWeeks() {
+        return Weeks.weeks(getValue() / DateTimeConstants.MINUTES_PER_WEEK);
+    }
+
+    /**
+     * Converts this period in minutes to a period in days assuming a
+     * 24 hour day and 60 minute hour.
+     * <p>
+     * This method allows you to convert between different types of period.
+     * However to achieve this it makes the assumption that all days are
+     * 24 hours long and all hours are 60 minutes long.
+     * This is not true when daylight savings is considered and may also not
+     * be true for some unusual chronologies. However, it is included
+     * as it is a useful operation for many applications and business rules.
+     * 
+     * @return a period representing the number of whole days for this number of minutes
+     */
+    public Days toStandardDays() {
+        return Days.days(getValue() / DateTimeConstants.MINUTES_PER_DAY);
+    }
+
+    /**
+     * Converts this period in minutes to a period in hours assuming a
+     * 60 minute hour.
+     * <p>
+     * This method allows you to convert between different types of period.
+     * However to achieve this it makes the assumption that all hours are
+     * 60 minutes long.
+     * This may not be true for some unusual chronologies. However, it is included
+     * as it is a useful operation for many applications and business rules.
+     * 
+     * @return a period representing the number of hours for this number of minutes
+     */
+    public Hours toStandardHours() {
+        return Hours.hours(getValue() / DateTimeConstants.MINUTES_PER_HOUR);
+    }
+
+    /**
+     * Converts this period in minutes to a period in seconds assuming a
+     * 60 second minute.
+     * <p>
+     * This method allows you to convert between different types of period.
+     * However to achieve this it makes the assumption that all minutes are
+     * 60 seconds long.
+     * This may not be true for some unusual chronologies. However, it is included
+     * as it is a useful operation for many applications and business rules.
+     * 
+     * @return a period representing the number of seconds for this number of minutes
+     * @throws ArithmeticException if the number of seconds is too large to be represented
+     */
+    public Seconds toStandardSeconds() {
+        return Seconds.seconds(FieldUtils.safeMultiply(getValue(), DateTimeConstants.SECONDS_PER_MINUTE));
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Converts this period in minutes to a duration in milliseconds assuming a
+     * 60 second minute.
+     * <p>
+     * This method allows you to convert from a period to a duration.
+     * However to achieve this it makes the assumption that all minutes are
+     * 60 seconds long. This might not be true for an unusual chronology,
+     * for example one that takes leap seconds into account.
+     * However, the method is included as it is a useful operation for many
+     * applications and business rules.
+     *
+     * @return a period representing the number of minutes for this number of minutes
+     */
+    public Duration toStandardDuration() {
+        long minutes = getValue();  // assign to a long
+        return new Duration(minutes * DateTimeConstants.MILLIS_PER_MINUTE);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the number of minutes that this period represents.
+     *
+     * @return the number of minutes in the period
+     */
+    public int getMinutes() {
+        return getValue();
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Returns a new instance with the specified number of minutes added.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
+     *
+     * @param minutes  the amount of minutes to add, may be negative
+     * @return the new period plus the specified number of minutes
+     * @throws ArithmeticException if the result overflows an int
+     */
+    public Minutes plus(int minutes) {
+        if (minutes == 0) {
+            return this;
+        }
+        return Minutes.minutes(FieldUtils.safeAdd(getValue(), minutes));
+    }
+
+    /**
+     * Returns a new instance with the specified number of minutes added.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
+     *
+     * @param minutes  the amount of minutes to add, may be negative, null means zero
+     * @return the new period plus the specified number of minutes
+     * @throws ArithmeticException if the result overflows an int
+     */
+    public Minutes plus(Minutes minutes) {
+        if (minutes == null) {
+            return this;
+        }
+        return plus(minutes.getValue());
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Returns a new instance with the specified number of minutes taken away.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
+     *
+     * @param minutes  the amount of minutes to take away, may be negative
+     * @return the new period minus the specified number of minutes
+     * @throws ArithmeticException if the result overflows an int
+     */
+    public Minutes minus(int minutes) {
+        return plus(FieldUtils.safeNegate(minutes));
+    }
+
+    /**
+     * Returns a new instance with the specified number of minutes taken away.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
+     *
+     * @param minutes  the amount of minutes to take away, may be negative, null means zero
+     * @return the new period minus the specified number of minutes
+     * @throws ArithmeticException if the result overflows an int
+     */
+    public Minutes minus(Minutes minutes) {
+        if (minutes == null) {
+            return this;
+        }
+        return minus(minutes.getValue());
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Returns a new instance with the minutes multiplied by the specified scalar.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
+     *
+     * @param scalar  the amount to multiply by, may be negative
+     * @return the new period multiplied by the specified scalar
+     * @throws ArithmeticException if the result overflows an int
+     */
+    public Minutes multipliedBy(int scalar) {
+        return Minutes.minutes(FieldUtils.safeMultiply(getValue(), scalar));
+    }
+
+    /**
+     * Returns a new instance with the minutes divided by the specified divisor.
+     * The calculation uses integer division, thus 3 divided by 2 is 1.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
+     *
+     * @param divisor  the amount to divide by, may be negative
+     * @return the new period divided by the specified divisor
+     * @throws ArithmeticException if the divisor is zero
+     */
+    public Minutes dividedBy(int divisor) {
+        if (divisor == 1) {
+            return this;
+        }
+        return Minutes.minutes(getValue() / divisor);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Negates the number of minutes in this period.
+     *
+     * @return the new period with a negated value
+     * @throws ArithmeticException if the result overflows an int
+     */
+    public Minutes negate() {
+        return Minutes.minutes(FieldUtils.safeNegate(getValue()));
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets this instance as a String in the ISO8601 duration format.
+     * <p>
+     * For example, "PT4M" represents 4 minutes.
+     *
+     * @return the value as an ISO8601 string
+     */
+    public String toString() {
+        return "PT" + String.valueOf(getValue()) + "M";
+    }
+
+}
diff --git a/JodaTime/src/java/org/joda/time/Months.java b/JodaTime/src/java/org/joda/time/Months.java
new file mode 100644
index 000000000..c1ccf32f7
--- /dev/null
+++ b/JodaTime/src/java/org/joda/time/Months.java
@@ -0,0 +1,366 @@
+/*
+ *  Copyright 2001-2006 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time;
+
+import org.joda.time.base.BaseSingleFieldPeriod;
+import org.joda.time.field.FieldUtils;
+import org.joda.time.format.ISOPeriodFormat;
+import org.joda.time.format.PeriodFormatter;
+
+/**
+ * An immutable time period representing a number of months.
+ * <p>
+ * <code>Months</code> is an immutable period that can only store months.
+ * It does not store years, days or hours for example. As such it is a
+ * type-safe way of representing a number of months in an application.
+ * <p>
+ * The number of months is set in the constructor, and may be queried using
+ * <code>getMonths()</code>. Basic mathematical operations are provided -
+ * <code>plus()</code>, <code>minus()</code>, <code>multipliedBy()</code> and
+ * <code>dividedBy()</code>.
+ * <p>
+ * <code>Months</code> is thread-safe and immutable.
+ *
+ * @author Stephen Colebourne
+ * @since 1.4
+ */
+public final class Months extends BaseSingleFieldPeriod {
+
+    /** Constant representing zero months. */
+    public static final Months ZERO = new Months(0);
+    /** Constant representing one day. */
+    public static final Months ONE = new Months(1);
+    /** Constant representing two months. */
+    public static final Months TWO = new Months(2);
+    /** Constant representing three months. */
+    public static final Months THREE = new Months(3);
+    /** Constant representing four months. */
+    public static final Months FOUR = new Months(4);
+    /** Constant representing five months. */
+    public static final Months FIVE = new Months(5);
+    /** Constant representing six months. */
+    public static final Months SIX = new Months(6);
+    /** Constant representing seven months. */
+    public static final Months SEVEN = new Months(7);
+    /** Constant representing eight months. */
+    public static final Months EIGHT = new Months(8);
+    /** Constant representing nine months. */
+    public static final Months NINE = new Months(9);
+    /** Constant representing ten months. */
+    public static final Months TEN = new Months(10);
+    /** Constant representing eleven months. */
+    public static final Months ELEVEN = new Months(11);
+    /** Constant representing twelve months. */
+    public static final Months TWELVE = new Months(12);
+    /** Constant representing the maximum nuber of months that can be stored in this object. */
+    public static final Months MAX_VALUE = new Months(Integer.MAX_VALUE);
+    /** Constant representing the minimum nuber of months that can be stored in this object. */
+    public static final Months MIN_VALUE = new Months(Integer.MIN_VALUE);
+
+    /** The paser to use for this class. */
+    private static final PeriodFormatter PARSER = ISOPeriodFormat.standard().withParseType(PeriodType.months());
+    /** Serialization version. */
+    private static final long serialVersionUID = 87525275727380867L;
+
+    //-----------------------------------------------------------------------
+    /**
+     * Obtains an instance of <code>Months</code> that may be cached.
+     * <code>Months</code> is immutable, so instances can be cached and shared.
+     * This factory method provides access to shared instances.
+     *
+     * @param months  the number of months to obtain an instance for
+     * @return the instance of Months
+     */
+    public static Months months(int months) {
+        switch (months) {
+            case 0:
+                return ZERO;
+            case 1:
+                return ONE;
+            case 2:
+                return TWO;
+            case 3:
+                return THREE;
+            case 4:
+                return FOUR;
+            case 5:
+                return FIVE;
+            case 6:
+                return SIX;
+            case 7:
+                return SEVEN;
+            case 8:
+                return EIGHT;
+            case 9:
+                return NINE;
+            case 10:
+                return TEN;
+            case 11:
+                return ELEVEN;
+            case 12:
+                return TWELVE;
+            case Integer.MAX_VALUE:
+                return MAX_VALUE;
+            case Integer.MIN_VALUE:
+                return MIN_VALUE;
+            default:
+                return new Months(months);
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Creates a <code>Months</code> representing the number of whole months
+     * between the two specified datetimes. This method corectly handles
+     * any daylight savings time changes that may occur during the interval.
+     *
+     * @param start  the start instant, must not be null
+     * @param end  the end instant, must not be null
+     * @return the period in months
+     * @throws IllegalArgumentException if the instants are null or invalid
+     */
+    public static Months monthsBetween(ReadableInstant start, ReadableInstant end) {
+        int amount = BaseSingleFieldPeriod.between(start, end, DurationFieldType.months());
+        return Months.months(amount);
+    }
+
+    /**
+     * Creates a <code>Months</code> representing the number of whole months
+     * between the two specified partial datetimes.
+     * <p>
+     * The two partials must contain the same fields, for example you can specify
+     * two <code>LocalDate</code> objects.
+     *
+     * @param start  the start partial date, must not be null
+     * @param end  the end partial date, must not be null
+     * @return the period in months
+     * @throws IllegalArgumentException if the partials are null or invalid
+     */
+    public static Months monthsBetween(ReadablePartial start, ReadablePartial end) {
+        if (start instanceof LocalDate && end instanceof LocalDate)   {
+            Chronology chrono = DateTimeUtils.getChronology(start.getChronology());
+            int months = chrono.months().getDifference(
+                    ((LocalDate) end).getLocalMillis(), ((LocalDate) start).getLocalMillis());
+            return Months.months(months);
+        }
+        int amount = BaseSingleFieldPeriod.between(start, end, ZERO);
+        return Months.months(amount);
+    }
+
+    /**
+     * Creates a <code>Months</code> representing the number of whole months
+     * in the specified interval. This method corectly handles any daylight
+     * savings time changes that may occur during the interval.
+     *
+     * @param interval  the interval to extract months from, null returns zero
+     * @return the period in months
+     * @throws IllegalArgumentException if the partials are null or invalid
+     */
+    public static Months monthsIn(ReadableInterval interval) {
+        if (interval == null)   {
+            return Months.ZERO;
+        }
+        int amount = BaseSingleFieldPeriod.between(interval.getStart(), interval.getEnd(), DurationFieldType.months());
+        return Months.months(amount);
+    }
+
+    /**
+     * Creates a new <code>Months</code> by parsing a string in the ISO8601 format 'PnM'.
+     * <p>
+     * The parse will accept the full ISO syntax of PnYnMnWnDTnHnMnS however only the
+     * months component may be non-zero. If any other component is non-zero, an exception
+     * will be thrown.
+     *
+     * @param periodStr  the period string, null returns zero
+     * @return the period in months
+     * @throws IllegalArgumentException if the string format is invalid
+     */
+    public static Months parseMonths(String periodStr) {
+        if (periodStr == null) {
+            return Months.ZERO;
+        }
+        Period p = PARSER.parsePeriod(periodStr);
+        return Months.months(p.getMonths());
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Creates a new instance representing a number of months.
+     * You should consider using the factory method {@link #months(int)}
+     * instead of the constructor.
+     *
+     * @param months  the number of months to represent
+     */
+    private Months(int months) {
+        super(months);
+    }
+
+    /**
+     * Resolves singletons.
+     * 
+     * @return the singleton instance
+     */
+    private Object readResolve() {
+        return Months.months(getValue());
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the duration field type, which is <code>months</code>.
+     *
+     * @return the period type
+     */
+    public DurationFieldType getFieldType() {
+        return DurationFieldType.months();
+    }
+
+    /**
+     * Gets the period type, which is <code>months</code>.
+     *
+     * @return the period type
+     */
+    public PeriodType getPeriodType() {
+        return PeriodType.months();
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the number of months that this period represents.
+     *
+     * @return the number of months in the period
+     */
+    public int getMonths() {
+        return getValue();
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Returns a new instance with the specified number of months added.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
+     *
+     * @param months  the amount of months to add, may be negative
+     * @return the new period plus the specified number of months
+     * @throws ArithmeticException if the result overflows an int
+     */
+    public Months plus(int months) {
+        if (months == 0) {
+            return this;
+        }
+        return Months.months(FieldUtils.safeAdd(getValue(), months));
+    }
+
+    /**
+     * Returns a new instance with the specified number of months added.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
+     *
+     * @param months  the amount of months to add, may be negative, null means zero
+     * @return the new period plus the specified number of months
+     * @throws ArithmeticException if the result overflows an int
+     */
+    public Months plus(Months months) {
+        if (months == null) {
+            return this;
+        }
+        return plus(months.getValue());
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Returns a new instance with the specified number of months taken away.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
+     *
+     * @param months  the amount of months to take away, may be negative
+     * @return the new period minus the specified number of months
+     * @throws ArithmeticException if the result overflows an int
+     */
+    public Months minus(int months) {
+        return plus(FieldUtils.safeNegate(months));
+    }
+
+    /**
+     * Returns a new instance with the specified number of months taken away.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
+     *
+     * @param months  the amount of months to take away, may be negative, null means zero
+     * @return the new period minus the specified number of months
+     * @throws ArithmeticException if the result overflows an int
+     */
+    public Months minus(Months months) {
+        if (months == null) {
+            return this;
+        }
+        return minus(months.getValue());
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Returns a new instance with the months multiplied by the specified scalar.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
+     *
+     * @param scalar  the amount to multiply by, may be negative
+     * @return the new period multiplied by the specified scalar
+     * @throws ArithmeticException if the result overflows an int
+     */
+    public Months multipliedBy(int scalar) {
+        return Months.months(FieldUtils.safeMultiply(getValue(), scalar));
+    }
+
+    /**
+     * Returns a new instance with the months divided by the specified divisor.
+     * The calculation uses integer division, thus 3 divided by 2 is 1.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
+     *
+     * @param divisor  the amount to divide by, may be negative
+     * @return the new period divided by the specified divisor
+     * @throws ArithmeticException if the divisor is zero
+     */
+    public Months dividedBy(int divisor) {
+        if (divisor == 1) {
+            return this;
+        }
+        return Months.months(getValue() / divisor);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Negates the number of months in this period.
+     *
+     * @return the new period with a negated value
+     * @throws ArithmeticException if the result overflows an int
+     */
+    public Months negate() {
+        return Months.months(FieldUtils.safeNegate(getValue()));
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets this instance as a String in the ISO8601 duration format.
+     * <p>
+     * For example, "P4M" represents 4 months.
+     *
+     * @return the value as an ISO8601 string
+     */
+    public String toString() {
+        return "P" + String.valueOf(getValue()) + "M";
+    }
+
+}
diff --git a/JodaTime/src/java/org/joda/time/Seconds.java b/JodaTime/src/java/org/joda/time/Seconds.java
new file mode 100644
index 000000000..94e9107b7
--- /dev/null
+++ b/JodaTime/src/java/org/joda/time/Seconds.java
@@ -0,0 +1,440 @@
+/*
+ *  Copyright 2001-2006 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time;
+
+import org.joda.time.base.BaseSingleFieldPeriod;
+import org.joda.time.field.FieldUtils;
+import org.joda.time.format.ISOPeriodFormat;
+import org.joda.time.format.PeriodFormatter;
+
+/**
+ * An immutable time period representing a number of seconds.
+ * <p>
+ * <code>Seconds</code> is an immutable period that can only store seconds.
+ * It does not store years, months or hours for example. As such it is a
+ * type-safe way of representing a number of seconds in an application.
+ * <p>
+ * The number of seconds is set in the constructor, and may be queried using
+ * <code>getSeconds()</code>. Basic mathematical operations are provided -
+ * <code>plus()</code>, <code>minus()</code>, <code>multipliedBy()</code> and
+ * <code>dividedBy()</code>.
+ * <p>
+ * <code>Seconds</code> is thread-safe and immutable.
+ *
+ * @author Stephen Colebourne
+ * @since 1.4
+ */
+public final class Seconds extends BaseSingleFieldPeriod {
+
+    /** Constant representing zero seconds. */
+    public static final Seconds ZERO = new Seconds(0);
+    /** Constant representing one second. */
+    public static final Seconds ONE = new Seconds(1);
+    /** Constant representing two seconds. */
+    public static final Seconds TWO = new Seconds(2);
+    /** Constant representing three seconds. */
+    public static final Seconds THREE = new Seconds(3);
+    /** Constant representing the maximum nuber of seconds that can be stored in this object. */
+    public static final Seconds MAX_VALUE = new Seconds(Integer.MAX_VALUE);
+    /** Constant representing the minimum nuber of seconds that can be stored in this object. */
+    public static final Seconds MIN_VALUE = new Seconds(Integer.MIN_VALUE);
+
+    /** The paser to use for this class. */
+    private static final PeriodFormatter PARSER = ISOPeriodFormat.standard().withParseType(PeriodType.seconds());
+    /** Serialization version. */
+    private static final long serialVersionUID = 87525275727380862L;
+
+    //-----------------------------------------------------------------------
+    /**
+     * Obtains an instance of <code>Seconds</code> that may be cached.
+     * <code>Seconds</code> is immutable, so instances can be cached and shared.
+     * This factory method provides access to shared instances.
+     *
+     * @param seconds  the number of seconds to obtain an instance for
+     * @return the instance of Seconds
+     */
+    public static Seconds seconds(int seconds) {
+        switch (seconds) {
+            case 0:
+                return ZERO;
+            case 1:
+                return ONE;
+            case 2:
+                return TWO;
+            case 3:
+                return THREE;
+            case Integer.MAX_VALUE:
+                return MAX_VALUE;
+            case Integer.MIN_VALUE:
+                return MIN_VALUE;
+            default:
+                return new Seconds(seconds);
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Creates a <code>Seconds</code> representing the number of whole seconds
+     * between the two specified datetimes.
+     *
+     * @param start  the start instant, must not be null
+     * @param end  the end instant, must not be null
+     * @return the period in seconds
+     * @throws IllegalArgumentException if the instants are null or invalid
+     */
+    public static Seconds secondsBetween(ReadableInstant start, ReadableInstant end) {
+        int amount = BaseSingleFieldPeriod.between(start, end, DurationFieldType.seconds());
+        return Seconds.seconds(amount);
+    }
+
+    /**
+     * Creates a <code>Seconds</code> representing the number of whole seconds
+     * between the two specified partial datetimes.
+     * <p>
+     * The two partials must contain the same fields, for example you can specify
+     * two <code>LocalTime</code> objects.
+     *
+     * @param start  the start partial date, must not be null
+     * @param end  the end partial date, must not be null
+     * @return the period in seconds
+     * @throws IllegalArgumentException if the partials are null or invalid
+     */
+    public static Seconds secondsBetween(ReadablePartial start, ReadablePartial end) {
+        if (start instanceof LocalTime && end instanceof LocalTime)   {
+            Chronology chrono = DateTimeUtils.getChronology(start.getChronology());
+            int seconds = chrono.seconds().getDifference(
+                    ((LocalTime) end).getLocalMillis(), ((LocalTime) start).getLocalMillis());
+            return Seconds.seconds(seconds);
+        }
+        int amount = BaseSingleFieldPeriod.between(start, end, ZERO);
+        return Seconds.seconds(amount);
+    }
+
+    /**
+     * Creates a <code>Seconds</code> representing the number of whole seconds
+     * in the specified interval.
+     *
+     * @param interval  the interval to extract seconds from, null returns zero
+     * @return the period in seconds
+     * @throws IllegalArgumentException if the partials are null or invalid
+     */
+    public static Seconds secondsIn(ReadableInterval interval) {
+        if (interval == null)   {
+            return Seconds.ZERO;
+        }
+        int amount = BaseSingleFieldPeriod.between(interval.getStart(), interval.getEnd(), DurationFieldType.seconds());
+        return Seconds.seconds(amount);
+    }
+
+    /**
+     * Creates a new <code>Seconds</code> representing the number of complete
+     * standard length seconds in the specified period.
+     * <p>
+     * This factory method converts all fields from the period to hours using standardised
+     * durations for each field. Only those fields which have a precise duration in
+     * the ISO UTC chronology can be converted.
+     * <ul>
+     * <li>One week consists of 7 seconds.
+     * <li>One day consists of 24 hours.
+     * <li>One hour consists of 60 minutes.
+     * <li>One minute consists of 60 seconds.
+     * <li>One second consists of 1000 milliseconds.
+     * </ul>
+     * Months and Years are imprecise and periods containing these values cannot be converted.
+     *
+     * @param period  the period to get the number of hours from, null returns zero
+     * @return the period in seconds
+     * @throws IllegalArgumentException if the period contains imprecise duration values
+     */
+    public static Seconds standardSecondsIn(ReadablePeriod period) {
+        int amount = BaseSingleFieldPeriod.standardPeriodIn(period, DateTimeConstants.MILLIS_PER_SECOND);
+        return Seconds.seconds(amount);
+    }
+
+    /**
+     * Creates a new <code>Seconds</code> by parsing a string in the ISO8601 format 'PTnS'.
+     * <p>
+     * The parse will accept the full ISO syntax of PnYnMnWnDTnHnMnS however only the
+     * seconds component may be non-zero. If any other component is non-zero, an exception
+     * will be thrown.
+     *
+     * @param periodStr  the period string, null returns zero
+     * @return the period in seconds
+     * @throws IllegalArgumentException if the string format is invalid
+     */
+    public static Seconds parseSeconds(String periodStr) {
+        if (periodStr == null) {
+            return Seconds.ZERO;
+        }
+        Period p = PARSER.parsePeriod(periodStr);
+        return Seconds.seconds(p.getSeconds());
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Creates a new instance representing a number of seconds.
+     * You should consider using the factory method {@link #seconds(int)}
+     * instead of the constructor.
+     *
+     * @param seconds  the number of seconds to represent
+     */
+    private Seconds(int seconds) {
+        super(seconds);
+    }
+
+    /**
+     * Resolves singletons.
+     * 
+     * @return the singleton instance
+     */
+    private Object readResolve() {
+        return Seconds.seconds(getValue());
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the duration field type, which is <code>seconds</code>.
+     *
+     * @return the period type
+     */
+    public DurationFieldType getFieldType() {
+        return DurationFieldType.seconds();
+    }
+
+    /**
+     * Gets the period type, which is <code>seconds</code>.
+     *
+     * @return the period type
+     */
+    public PeriodType getPeriodType() {
+        return PeriodType.seconds();
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Converts this period in seconds to a period in weeks assuming a
+     * 7 day week, 24 hour day, 60 minute hour and 60 second minute.
+     * <p>
+     * This method allows you to convert between different types of period.
+     * However to achieve this it makes the assumption that all weeks are 7 days
+     * long, all days are 24 hours long, all hours are 60 minutes long and
+     * all minutes are 60 seconds long.
+     * This is not true when daylight savings time is considered, and may also
+     * not be true for some unusual chronologies. However, it is included as it
+     * is a useful operation for many applications and business rules.
+     * 
+     * @return a period representing the number of whole weeks for this number of seconds
+     */
+    public Weeks toStandardWeeks() {
+        return Weeks.weeks(getValue() / DateTimeConstants.SECONDS_PER_WEEK);
+    }
+
+    /**
+     * Converts this period in seconds to a period in days assuming a
+     * 24 hour day, 60 minute hour and 60 second minute.
+     * <p>
+     * This method allows you to convert between different types of period.
+     * However to achieve this it makes the assumption that all days are 24 hours
+     * long, all hours are 60 minutes long and all minutes are 60 seconds long.
+     * This is not true when daylight savings is considered and may also not
+     * be true for some unusual chronologies. However, it is included
+     * as it is a useful operation for many applications and business rules.
+     * 
+     * @return a period representing the number of days for this number of seconds
+     */
+    public Days toStandardDays() {
+        return Days.days(getValue() / DateTimeConstants.SECONDS_PER_DAY);
+    }
+
+    /**
+     * Converts this period in seconds to a period in hours assuming a
+     * 60 minute hour and 60 second minute.
+     * <p>
+     * This method allows you to convert between different types of period.
+     * However to achieve this it makes the assumption that all hours are
+     * 60 minutes long and all minutes are 60 seconds long.
+     * This may not be true for some unusual chronologies. However, it is included
+     * as it is a useful operation for many applications and business rules.
+     * 
+     * @return a period representing the number of hours for this number of seconds
+     */
+    public Hours toStandardHours() {
+        return Hours.hours(getValue() / DateTimeConstants.SECONDS_PER_HOUR);
+    }
+
+    /**
+     * Converts this period in seconds to a period in minutes assuming a
+     * 60 second minute.
+     * <p>
+     * This method allows you to convert between different types of period.
+     * However to achieve this it makes the assumption that all minutes are
+     * 60 seconds long.
+     * This may not be true for some unusual chronologies. However, it is included
+     * as it is a useful operation for many applications and business rules.
+     * 
+     * @return a period representing the number of minutes for this number of seconds
+     */
+    public Minutes toStandardMinutes() {
+        return Minutes.minutes(getValue() / DateTimeConstants.SECONDS_PER_MINUTE);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Converts this period in seconds to a duration in milliseconds assuming a
+     * 24 hour day, 60 minute hour and 60 second minute.
+     * <p>
+     * This method allows you to convert from a period to a duration.
+     * However to achieve this it makes the assumption that all seconds are 24 hours
+     * long, all hours are 60 minutes and all minutes are 60 seconds.
+     * This is not true when daylight savings time is considered, and may also
+     * not be true for some unusual chronologies. However, it is included as it
+     * is a useful operation for many applications and business rules.
+     * 
+     * @return a period representing the number of hours for this number of seconds
+     */
+    public Duration toStandardDuration() {
+        long seconds = getValue();  // assign to a long
+        return new Duration(seconds * DateTimeConstants.MILLIS_PER_SECOND);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the number of seconds that this period represents.
+     *
+     * @return the number of seconds in the period
+     */
+    public int getSeconds() {
+        return getValue();
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Returns a new instance with the specified number of seconds added.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
+     *
+     * @param seconds  the amount of seconds to add, may be negative
+     * @return the new period plus the specified number of seconds
+     * @throws ArithmeticException if the result overflows an int
+     */
+    public Seconds plus(int seconds) {
+        if (seconds == 0) {
+            return this;
+        }
+        return Seconds.seconds(FieldUtils.safeAdd(getValue(), seconds));
+    }
+
+    /**
+     * Returns a new instance with the specified number of seconds added.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
+     *
+     * @param seconds  the amount of seconds to add, may be negative, null means zero
+     * @return the new period plus the specified number of seconds
+     * @throws ArithmeticException if the result overflows an int
+     */
+    public Seconds plus(Seconds seconds) {
+        if (seconds == null) {
+            return this;
+        }
+        return plus(seconds.getValue());
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Returns a new instance with the specified number of seconds taken away.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
+     *
+     * @param seconds  the amount of seconds to take away, may be negative
+     * @return the new period minus the specified number of seconds
+     * @throws ArithmeticException if the result overflows an int
+     */
+    public Seconds minus(int seconds) {
+        return plus(FieldUtils.safeNegate(seconds));
+    }
+
+    /**
+     * Returns a new instance with the specified number of seconds taken away.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
+     *
+     * @param seconds  the amount of seconds to take away, may be negative, null means zero
+     * @return the new period minus the specified number of seconds
+     * @throws ArithmeticException if the result overflows an int
+     */
+    public Seconds minus(Seconds seconds) {
+        if (seconds == null) {
+            return this;
+        }
+        return minus(seconds.getValue());
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Returns a new instance with the seconds multiplied by the specified scalar.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
+     *
+     * @param scalar  the amount to multiply by, may be negative
+     * @return the new period multiplied by the specified scalar
+     * @throws ArithmeticException if the result overflows an int
+     */
+    public Seconds multipliedBy(int scalar) {
+        return Seconds.seconds(FieldUtils.safeMultiply(getValue(), scalar));
+    }
+
+    /**
+     * Returns a new instance with the seconds divided by the specified divisor.
+     * The calculation uses integer division, thus 3 divided by 2 is 1.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
+     *
+     * @param divisor  the amount to divide by, may be negative
+     * @return the new period divided by the specified divisor
+     * @throws ArithmeticException if the divisor is zero
+     */
+    public Seconds dividedBy(int divisor) {
+        if (divisor == 1) {
+            return this;
+        }
+        return Seconds.seconds(getValue() / divisor);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Negates the number of seconds in this period.
+     *
+     * @return the new period with a negated value
+     * @throws ArithmeticException if the result overflows an int
+     */
+    public Seconds negate() {
+        return Seconds.seconds(FieldUtils.safeNegate(getValue()));
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets this instance as a String in the ISO8601 duration format.
+     * <p>
+     * For example, "PT4S" represents 4 seconds.
+     *
+     * @return the value as an ISO8601 string
+     */
+    public String toString() {
+        return "PT" + String.valueOf(getValue()) + "S";
+    }
+
+}
diff --git a/JodaTime/src/java/org/joda/time/Weeks.java b/JodaTime/src/java/org/joda/time/Weeks.java
new file mode 100644
index 000000000..ab706369d
--- /dev/null
+++ b/JodaTime/src/java/org/joda/time/Weeks.java
@@ -0,0 +1,446 @@
+/*
+ *  Copyright 2001-2006 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time;
+
+import org.joda.time.base.BaseSingleFieldPeriod;
+import org.joda.time.field.FieldUtils;
+import org.joda.time.format.ISOPeriodFormat;
+import org.joda.time.format.PeriodFormatter;
+
+/**
+ * An immutable time period representing a number of weeks.
+ * <p>
+ * <code>Weeks</code> is an immutable period that can only store weeks.
+ * It does not store years, months or hours for example. As such it is a
+ * type-safe way of representing a number of weeks in an application.
+ * <p>
+ * The number of weeks is set in the constructor, and may be queried using
+ * <code>getWeeks()</code>. Basic mathematical operations are provided -
+ * <code>plus()</code>, <code>minus()</code>, <code>multipliedBy()</code> and
+ * <code>dividedBy()</code>.
+ * <p>
+ * <code>Weeks</code> is thread-safe and immutable.
+ *
+ * @author Stephen Colebourne
+ * @since 1.4
+ */
+public final class Weeks extends BaseSingleFieldPeriod {
+
+    /** Constant representing zero weeks. */
+    public static final Weeks ZERO = new Weeks(0);
+    /** Constant representing one week. */
+    public static final Weeks ONE = new Weeks(1);
+    /** Constant representing two weeks. */
+    public static final Weeks TWO = new Weeks(2);
+    /** Constant representing three weeks. */
+    public static final Weeks THREE = new Weeks(3);
+    /** Constant representing the maximum nuber of weeks that can be stored in this object. */
+    public static final Weeks MAX_VALUE = new Weeks(Integer.MAX_VALUE);
+    /** Constant representing the minimum nuber of weeks that can be stored in this object. */
+    public static final Weeks MIN_VALUE = new Weeks(Integer.MIN_VALUE);
+
+    /** The paser to use for this class. */
+    private static final PeriodFormatter PARSER = ISOPeriodFormat.standard().withParseType(PeriodType.weeks());
+    /** Serialization version. */
+    private static final long serialVersionUID = 87525275727380866L;
+
+    //-----------------------------------------------------------------------
+    /**
+     * Obtains an instance of <code>Weeks</code> that may be cached.
+     * <code>Weeks</code> is immutable, so instances can be cached and shared.
+     * This factory method provides access to shared instances.
+     *
+     * @param weeks  the number of weeks to obtain an instance for
+     * @return the instance of Weeks
+     */
+    public static Weeks weeks(int weeks) {
+        switch (weeks) {
+            case 0:
+                return ZERO;
+            case 1:
+                return ONE;
+            case 2:
+                return TWO;
+            case 3:
+                return THREE;
+            case Integer.MAX_VALUE:
+                return MAX_VALUE;
+            case Integer.MIN_VALUE:
+                return MIN_VALUE;
+            default:
+                return new Weeks(weeks);
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Creates a <code>Weeks</code> representing the number of whole weeks
+     * between the two specified datetimes.
+     *
+     * @param start  the start instant, must not be null
+     * @param end  the end instant, must not be null
+     * @return the period in weeks
+     * @throws IllegalArgumentException if the instants are null or invalid
+     */
+    public static Weeks weeksBetween(ReadableInstant start, ReadableInstant end) {
+        int amount = BaseSingleFieldPeriod.between(start, end, DurationFieldType.weeks());
+        return Weeks.weeks(amount);
+    }
+
+    /**
+     * Creates a <code>Weeks</code> representing the number of whole weeks
+     * between the two specified partial datetimes.
+     * <p>
+     * The two partials must contain the same fields, for example you can specify
+     * two <code>LocalDate</code> objects.
+     *
+     * @param start  the start partial date, must not be null
+     * @param end  the end partial date, must not be null
+     * @return the period in weeks
+     * @throws IllegalArgumentException if the partials are null or invalid
+     */
+    public static Weeks weeksBetween(ReadablePartial start, ReadablePartial end) {
+        if (start instanceof LocalDate && end instanceof LocalDate)   {
+            Chronology chrono = DateTimeUtils.getChronology(start.getChronology());
+            int weeks = chrono.weeks().getDifference(
+                    ((LocalDate) end).getLocalMillis(), ((LocalDate) start).getLocalMillis());
+            return Weeks.weeks(weeks);
+        }
+        int amount = BaseSingleFieldPeriod.between(start, end, ZERO);
+        return Weeks.weeks(amount);
+    }
+
+    /**
+     * Creates a <code>Weeks</code> representing the number of whole weeks
+     * in the specified interval.
+     *
+     * @param interval  the interval to extract weeks from, null returns zero
+     * @return the period in weeks
+     * @throws IllegalArgumentException if the partials are null or invalid
+     */
+    public static Weeks weeksIn(ReadableInterval interval) {
+        if (interval == null)   {
+            return Weeks.ZERO;
+        }
+        int amount = BaseSingleFieldPeriod.between(interval.getStart(), interval.getEnd(), DurationFieldType.weeks());
+        return Weeks.weeks(amount);
+    }
+
+    /**
+     * Creates a new <code>Weeks</code> representing the number of complete
+     * standard length weeks in the specified period.
+     * <p>
+     * This factory method converts all fields from the period to hours using standardised
+     * durations for each field. Only those fields which have a precise duration in
+     * the ISO UTC chronology can be converted.
+     * <ul>
+     * <li>One week consists of 7 days.
+     * <li>One day consists of 24 hours.
+     * <li>One hour consists of 60 minutes.
+     * <li>One minute consists of 60 weeks.
+     * <li>One second consists of 1000 milliseconds.
+     * </ul>
+     * Months and Years are imprecise and periods containing these values cannot be converted.
+     *
+     * @param period  the period to get the number of hours from, null returns zero
+     * @return the period in weeks
+     * @throws IllegalArgumentException if the period contains imprecise duration values
+     */
+    public static Weeks standardWeeksIn(ReadablePeriod period) {
+        int amount = BaseSingleFieldPeriod.standardPeriodIn(period, DateTimeConstants.MILLIS_PER_WEEK);
+        return Weeks.weeks(amount);
+    }
+
+    /**
+     * Creates a new <code>Weeks</code> by parsing a string in the ISO8601 format 'PnW'.
+     * <p>
+     * The parse will accept the full ISO syntax of PnYnMnWnDTnHnMnS however only the
+     * weeks component may be non-zero. If any other component is non-zero, an exception
+     * will be thrown.
+     *
+     * @param periodStr  the period string, null returns zero
+     * @return the period in weeks
+     * @throws IllegalArgumentException if the string format is invalid
+     */
+    public static Weeks parseWeeks(String periodStr) {
+        if (periodStr == null) {
+            return Weeks.ZERO;
+        }
+        Period p = PARSER.parsePeriod(periodStr);
+        return Weeks.weeks(p.getWeeks());
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Creates a new instance representing a number of weeks.
+     * You should consider using the factory method {@link #weeks(int)}
+     * instead of the constructor.
+     *
+     * @param weeks  the number of weeks to represent
+     */
+    private Weeks(int weeks) {
+        super(weeks);
+    }
+
+    /**
+     * Resolves singletons.
+     * 
+     * @return the singleton instance
+     */
+    private Object readResolve() {
+        return Weeks.weeks(getValue());
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the duration field type, which is <code>weeks</code>.
+     *
+     * @return the period type
+     */
+    public DurationFieldType getFieldType() {
+        return DurationFieldType.weeks();
+    }
+
+    /**
+     * Gets the period type, which is <code>weeks</code>.
+     *
+     * @return the period type
+     */
+    public PeriodType getPeriodType() {
+        return PeriodType.weeks();
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Converts this period in weeks to a period in days assuming a
+     * 7 day week.
+     * <p>
+     * This method allows you to convert between different types of period.
+     * However to achieve this it makes the assumption that all weeks are
+     * 7 days long.
+     * This may not be true for some unusual chronologies. However, it is included
+     * as it is a useful operation for many applications and business rules.
+     * 
+     * @return a period representing the number of days for this number of weeks
+     * @throws ArithmeticException if the number of days is too large to be represented
+     */
+    public Days toStandardDays() {
+        return Days.days(FieldUtils.safeMultiply(getValue(), DateTimeConstants.DAYS_PER_WEEK));
+    }
+
+    /**
+     * Converts this period in weeks to a period in hours assuming a
+     * 7 day week and 24 hour day.
+     * <p>
+     * This method allows you to convert between different types of period.
+     * However to achieve this it makes the assumption that all weeks are
+     * 7 days long and all days are 24 hours long.
+     * This is not true when daylight savings is considered and may also not
+     * be true for some unusual chronologies. However, it is included
+     * as it is a useful operation for many applications and business rules.
+     * 
+     * @return a period representing the number of hours for this number of weeks
+     * @throws ArithmeticException if the number of hours is too large to be represented
+     */
+    public Hours toStandardHours() {
+        return Hours.hours(FieldUtils.safeMultiply(getValue(), DateTimeConstants.HOURS_PER_WEEK));
+    }
+
+    /**
+     * Converts this period in weeks to a period in minutes assuming a
+     * 7 day week, 24 hour day and 60 minute hour.
+     * <p>
+     * This method allows you to convert between different types of period.
+     * However to achieve this it makes the assumption that all weeks are
+     * 7 days long, all days are 24 hours long and all hours are 60 minutes long.
+     * This is not true when daylight savings is considered and may also not
+     * be true for some unusual chronologies. However, it is included
+     * as it is a useful operation for many applications and business rules.
+     * 
+     * @return a period representing the number of minutes for this number of weeks
+     * @throws ArithmeticException if the number of minutes is too large to be represented
+     */
+    public Minutes toStandardMinutes() {
+        return Minutes.minutes(FieldUtils.safeMultiply(getValue(), DateTimeConstants.MINUTES_PER_WEEK));
+    }
+
+    /**
+     * Converts this period in weeks to a period in seconds assuming a
+     * 7 day week, 24 hour day, 60 minute hour and 60 second minute.
+     * <p>
+     * This method allows you to convert between different types of period.
+     * However to achieve this it makes the assumption that all weeks are
+     * 7 days long, all days are 24 hours long, all hours are 60 minutes long
+     * and all minutes are 60 seconds long.
+     * This is not true when daylight savings is considered and may also not
+     * be true for some unusual chronologies. However, it is included
+     * as it is a useful operation for many applications and business rules.
+     * 
+     * @return a period representing the number of seconds for this number of weeks
+     * @throws ArithmeticException if the number of seconds is too large to be represented
+     */
+    public Seconds toStandardSeconds() {
+        return Seconds.seconds(FieldUtils.safeMultiply(getValue(), DateTimeConstants.SECONDS_PER_WEEK));
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Converts this period in weeks to a duration in milliweeks assuming a
+     * 7 day week, 24 hour day, 60 minute hour and 60 second minute.
+     * <p>
+     * This method allows you to convert from a period to a duration.
+     * However to achieve this it makes the assumption that all weeks are
+     * 7 days long, all days are 24 hours long, all hours are 60 minutes long
+     * and all minutes are 60 seconds long.
+     * This is not true when daylight savings time is considered, and may also
+     * not be true for some unusual chronologies. However, it is included as it
+     * is a useful operation for many applications and business rules.
+     * 
+     * @return a period representing the number of hours for this number of weeks
+     */
+    public Duration toStandardDuration() {
+        long weeks = getValue();  // assign to a long
+        return new Duration(weeks * DateTimeConstants.MILLIS_PER_WEEK);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the number of weeks that this period represents.
+     *
+     * @return the number of weeks in the period
+     */
+    public int getWeeks() {
+        return getValue();
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Returns a new instance with the specified number of weeks added.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
+     *
+     * @param weeks  the amount of weeks to add, may be negative
+     * @return the new period plus the specified number of weeks
+     * @throws ArithmeticException if the result overflows an int
+     */
+    public Weeks plus(int weeks) {
+        if (weeks == 0) {
+            return this;
+        }
+        return Weeks.weeks(FieldUtils.safeAdd(getValue(), weeks));
+    }
+
+    /**
+     * Returns a new instance with the specified number of weeks added.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
+     *
+     * @param weeks  the amount of weeks to add, may be negative, null means zero
+     * @return the new period plus the specified number of weeks
+     * @throws ArithmeticException if the result overflows an int
+     */
+    public Weeks plus(Weeks weeks) {
+        if (weeks == null) {
+            return this;
+        }
+        return plus(weeks.getValue());
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Returns a new instance with the specified number of weeks taken away.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
+     *
+     * @param weeks  the amount of weeks to take away, may be negative
+     * @return the new period minus the specified number of weeks
+     * @throws ArithmeticException if the result overflows an int
+     */
+    public Weeks minus(int weeks) {
+        return plus(FieldUtils.safeNegate(weeks));
+    }
+
+    /**
+     * Returns a new instance with the specified number of weeks taken away.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
+     *
+     * @param weeks  the amount of weeks to take away, may be negative, null means zero
+     * @return the new period minus the specified number of weeks
+     * @throws ArithmeticException if the result overflows an int
+     */
+    public Weeks minus(Weeks weeks) {
+        if (weeks == null) {
+            return this;
+        }
+        return minus(weeks.getValue());
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Returns a new instance with the weeks multiplied by the specified scalar.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
+     *
+     * @param scalar  the amount to multiply by, may be negative
+     * @return the new period multiplied by the specified scalar
+     * @throws ArithmeticException if the result overflows an int
+     */
+    public Weeks multipliedBy(int scalar) {
+        return Weeks.weeks(FieldUtils.safeMultiply(getValue(), scalar));
+    }
+
+    /**
+     * Returns a new instance with the weeks divided by the specified divisor.
+     * The calculation uses integer division, thus 3 divided by 2 is 1.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
+     *
+     * @param divisor  the amount to divide by, may be negative
+     * @return the new period divided by the specified divisor
+     * @throws ArithmeticException if the divisor is zero
+     */
+    public Weeks dividedBy(int divisor) {
+        if (divisor == 1) {
+            return this;
+        }
+        return Weeks.weeks(getValue() / divisor);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Negates the number of weeks in this period.
+     *
+     * @return the new period with a negated value
+     * @throws ArithmeticException if the result overflows an int
+     */
+    public Weeks negate() {
+        return Weeks.weeks(FieldUtils.safeNegate(getValue()));
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets this instance as a String in the ISO8601 duration format.
+     * <p>
+     * For example, "P4W" represents 4 weeks.
+     *
+     * @return the value as an ISO8601 string
+     */
+    public String toString() {
+        return "P" + String.valueOf(getValue()) + "W";
+    }
+
+}
diff --git a/JodaTime/src/java/org/joda/time/Years.java b/JodaTime/src/java/org/joda/time/Years.java
new file mode 100644
index 000000000..68a0fef2f
--- /dev/null
+++ b/JodaTime/src/java/org/joda/time/Years.java
@@ -0,0 +1,330 @@
+/*
+ *  Copyright 2001-2006 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time;
+
+import org.joda.time.base.BaseSingleFieldPeriod;
+import org.joda.time.field.FieldUtils;
+import org.joda.time.format.ISOPeriodFormat;
+import org.joda.time.format.PeriodFormatter;
+
+/**
+ * An immutable time period representing a number of years.
+ * <p>
+ * <code>Years</code> is an immutable period that can only store years.
+ * It does not store years, days or hours for example. As such it is a
+ * type-safe way of representing a number of years in an application.
+ * <p>
+ * The number of years is set in the constructor, and may be queried using
+ * <code>getYears()</code>. Basic mathematical operations are provided -
+ * <code>plus()</code>, <code>minus()</code>, <code>multipliedBy()</code> and
+ * <code>dividedBy()</code>.
+ * <p>
+ * <code>Years</code> is thread-safe and immutable.
+ *
+ * @author Stephen Colebourne
+ * @since 1.4
+ */
+public final class Years extends BaseSingleFieldPeriod {
+
+    /** Constant representing zero years. */
+    public static final Years ZERO = new Years(0);
+    /** Constant representing one day. */
+    public static final Years ONE = new Years(1);
+    /** Constant representing two years. */
+    public static final Years TWO = new Years(2);
+    /** Constant representing three years. */
+    public static final Years THREE = new Years(3);
+    /** Constant representing the maximum nuber of years that can be stored in this object. */
+    public static final Years MAX_VALUE = new Years(Integer.MAX_VALUE);
+    /** Constant representing the minimum nuber of years that can be stored in this object. */
+    public static final Years MIN_VALUE = new Years(Integer.MIN_VALUE);
+
+    /** The paser to use for this class. */
+    private static final PeriodFormatter PARSER = ISOPeriodFormat.standard().withParseType(PeriodType.years());
+    /** Serialization version. */
+    private static final long serialVersionUID = 87525275727380868L;
+
+    //-----------------------------------------------------------------------
+    /**
+     * Obtains an instance of <code>Years</code> that may be cached.
+     * <code>Years</code> is immutable, so instances can be cached and shared.
+     * This factory method provides access to shared instances.
+     *
+     * @param years  the number of years to obtain an instance for
+     * @return the instance of Years
+     */
+    public static Years years(int years) {
+        switch (years) {
+            case 0:
+                return ZERO;
+            case 1:
+                return ONE;
+            case 2:
+                return TWO;
+            case 3:
+                return THREE;
+            case Integer.MAX_VALUE:
+                return MAX_VALUE;
+            case Integer.MIN_VALUE:
+                return MIN_VALUE;
+            default:
+                return new Years(years);
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Creates a <code>Years</code> representing the number of whole years
+     * between the two specified datetimes. This method corectly handles
+     * any daylight savings time changes that may occur during the interval.
+     *
+     * @param start  the start instant, must not be null
+     * @param end  the end instant, must not be null
+     * @return the period in years
+     * @throws IllegalArgumentException if the instants are null or invalid
+     */
+    public static Years yearsBetween(ReadableInstant start, ReadableInstant end) {
+        int amount = BaseSingleFieldPeriod.between(start, end, DurationFieldType.years());
+        return Years.years(amount);
+    }
+
+    /**
+     * Creates a <code>Years</code> representing the number of whole years
+     * between the two specified partial datetimes.
+     * <p>
+     * The two partials must contain the same fields, for example you can specify
+     * two <code>LocalDate</code> objects.
+     *
+     * @param start  the start partial date, must not be null
+     * @param end  the end partial date, must not be null
+     * @return the period in years
+     * @throws IllegalArgumentException if the partials are null or invalid
+     */
+    public static Years yearsBetween(ReadablePartial start, ReadablePartial end) {
+        if (start instanceof LocalDate && end instanceof LocalDate)   {
+            Chronology chrono = DateTimeUtils.getChronology(start.getChronology());
+            int years = chrono.years().getDifference(
+                    ((LocalDate) end).getLocalMillis(), ((LocalDate) start).getLocalMillis());
+            return Years.years(years);
+        }
+        int amount = BaseSingleFieldPeriod.between(start, end, ZERO);
+        return Years.years(amount);
+    }
+
+    /**
+     * Creates a <code>Years</code> representing the number of whole years
+     * in the specified interval. This method corectly handles any daylight
+     * savings time changes that may occur during the interval.
+     *
+     * @param interval  the interval to extract years from, null returns zero
+     * @return the period in years
+     * @throws IllegalArgumentException if the partials are null or invalid
+     */
+    public static Years yearsIn(ReadableInterval interval) {
+        if (interval == null)   {
+            return Years.ZERO;
+        }
+        int amount = BaseSingleFieldPeriod.between(interval.getStart(), interval.getEnd(), DurationFieldType.years());
+        return Years.years(amount);
+    }
+
+    /**
+     * Creates a new <code>Years</code> by parsing a string in the ISO8601 format 'PnY'.
+     * <p>
+     * The parse will accept the full ISO syntax of PnYnMnWnDTnHnMnS however only the
+     * years component may be non-zero. If any other component is non-zero, an exception
+     * will be thrown.
+     *
+     * @param periodStr  the period string, null returns zero
+     * @return the period in years
+     * @throws IllegalArgumentException if the string format is invalid
+     */
+    public static Years parseYears(String periodStr) {
+        if (periodStr == null) {
+            return Years.ZERO;
+        }
+        Period p = PARSER.parsePeriod(periodStr);
+        return Years.years(p.getYears());
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Creates a new instance representing a number of years.
+     * You should consider using the factory method {@link #years(int)}
+     * instead of the constructor.
+     *
+     * @param years  the number of years to represent
+     */
+    private Years(int years) {
+        super(years);
+    }
+
+    /**
+     * Resolves singletons.
+     * 
+     * @return the singleton instance
+     */
+    private Object readResolve() {
+        return Years.years(getValue());
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the duration field type, which is <code>years</code>.
+     *
+     * @return the period type
+     */
+    public DurationFieldType getFieldType() {
+        return DurationFieldType.years();
+    }
+
+    /**
+     * Gets the period type, which is <code>years</code>.
+     *
+     * @return the period type
+     */
+    public PeriodType getPeriodType() {
+        return PeriodType.years();
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the number of years that this period represents.
+     *
+     * @return the number of years in the period
+     */
+    public int getYears() {
+        return getValue();
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Returns a new instance with the specified number of years added.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
+     *
+     * @param years  the amount of years to add, may be negative
+     * @return the new period plus the specified number of years
+     * @throws ArithmeticException if the result overflows an int
+     */
+    public Years plus(int years) {
+        if (years == 0) {
+            return this;
+        }
+        return Years.years(FieldUtils.safeAdd(getValue(), years));
+    }
+
+    /**
+     * Returns a new instance with the specified number of years added.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
+     *
+     * @param years  the amount of years to add, may be negative, null means zero
+     * @return the new period plus the specified number of years
+     * @throws ArithmeticException if the result overflows an int
+     */
+    public Years plus(Years years) {
+        if (years == null) {
+            return this;
+        }
+        return plus(years.getValue());
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Returns a new instance with the specified number of years taken away.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
+     *
+     * @param years  the amount of years to take away, may be negative
+     * @return the new period minus the specified number of years
+     * @throws ArithmeticException if the result overflows an int
+     */
+    public Years minus(int years) {
+        return plus(FieldUtils.safeNegate(years));
+    }
+
+    /**
+     * Returns a new instance with the specified number of years taken away.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
+     *
+     * @param years  the amount of years to take away, may be negative, null means zero
+     * @return the new period minus the specified number of years
+     * @throws ArithmeticException if the result overflows an int
+     */
+    public Years minus(Years years) {
+        if (years == null) {
+            return this;
+        }
+        return minus(years.getValue());
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Returns a new instance with the years multiplied by the specified scalar.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
+     *
+     * @param scalar  the amount to multiply by, may be negative
+     * @return the new period multiplied by the specified scalar
+     * @throws ArithmeticException if the result overflows an int
+     */
+    public Years multipliedBy(int scalar) {
+        return Years.years(FieldUtils.safeMultiply(getValue(), scalar));
+    }
+
+    /**
+     * Returns a new instance with the years divided by the specified divisor.
+     * The calculation uses integer division, thus 3 divided by 2 is 1.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
+     *
+     * @param divisor  the amount to divide by, may be negative
+     * @return the new period divided by the specified divisor
+     * @throws ArithmeticException if the divisor is zero
+     */
+    public Years dividedBy(int divisor) {
+        if (divisor == 1) {
+            return this;
+        }
+        return Years.years(getValue() / divisor);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Negates the number of years in this period.
+     *
+     * @return the new period with a negated value
+     * @throws ArithmeticException if the result overflows an int
+     */
+    public Years negate() {
+        return Years.years(FieldUtils.safeNegate(getValue()));
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets this instance as a String in the ISO8601 duration format.
+     * <p>
+     * For example, "P4Y" represents 4 years.
+     *
+     * @return the value as an ISO8601 string
+     */
+    public String toString() {
+        return "P" + String.valueOf(getValue()) + "Y";
+    }
+
+}
diff --git a/JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java b/JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java
new file mode 100644
index 000000000..6b400f50e
--- /dev/null
+++ b/JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java
@@ -0,0 +1,342 @@
+/*
+ *  Copyright 2001-2006 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.base;
+
+import java.io.Serializable;
+
+import org.joda.time.Chronology;
+import org.joda.time.DateTimeUtils;
+import org.joda.time.DurationField;
+import org.joda.time.DurationFieldType;
+import org.joda.time.MutablePeriod;
+import org.joda.time.Period;
+import org.joda.time.PeriodType;
+import org.joda.time.ReadableInstant;
+import org.joda.time.ReadablePartial;
+import org.joda.time.ReadablePeriod;
+import org.joda.time.chrono.ISOChronology;
+import org.joda.time.field.FieldUtils;
+
+/**
+ * BaseSingleFieldPeriod is an abstract implementation of ReadablePeriod that
+ * manages a single duration field, such as days or minutes.
+ * <p>
+ * This class should generally not be used directly by API users.
+ * The {@link ReadablePeriod} interface should be used when different 
+ * kinds of period objects are to be referenced.
+ * <p>
+ * BaseSingleFieldPeriod subclasses may be mutable and not thread-safe.
+ *
+ * @author Stephen Colebourne
+ * @since 1.4
+ */
+public abstract class BaseSingleFieldPeriod
+        implements ReadablePeriod, Comparable, Serializable {
+
+    /** Serialization version. */
+    private static final long serialVersionUID = 9386874258972L;
+
+    /** The period in the units of this period. */
+    private int iPeriod;
+
+    //-----------------------------------------------------------------------
+    /**
+     * Calculates the number of whole units between the two specified datetimes.
+     *
+     * @param start  the start instant, validated to not be null
+     * @param end  the end instant, validated to not be null
+     * @param field  the field type to use, must not be null
+     * @return the period
+     * @throws IllegalArgumentException if the instants are null or invalid
+     */
+    protected static int between(ReadableInstant start, ReadableInstant end, DurationFieldType field) {
+        if (start == null || end == null) {
+            throw new IllegalArgumentException("ReadableInstant objects must not be null");
+        }
+        Chronology chrono = DateTimeUtils.getInstantChronology(start);
+        int amount = field.getField(chrono).getDifference(end.getMillis(), start.getMillis());
+        return amount;
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Calculates the number of whole units between the two specified partial datetimes.
+     * <p>
+     * The two partials must contain the same fields, for example you can specify
+     * two <code>LocalDate</code> objects.
+     *
+     * @param start  the start partial date, validated to not be null
+     * @param end  the end partial date, validated to not be null
+     * @param zeroInstance  the zero instance constant, must not be null
+     * @return the period
+     * @throws IllegalArgumentException if the partials are null or invalid
+     */
+    protected static int between(ReadablePartial start, ReadablePartial end, ReadablePeriod zeroInstance) {
+        if (start == null || end == null) {
+            throw new IllegalArgumentException("ReadablePartial objects must not be null");
+        }
+        if (start.size() != end.size()) {
+            throw new IllegalArgumentException("ReadablePartial objects must have the same set of fields");
+        }
+        for (int i = 0, isize = start.size(); i < isize; i++) {
+            if (start.getFieldType(i) != end.getFieldType(i)) {
+                throw new IllegalArgumentException("ReadablePartial objects must have the same set of fields");
+            }
+        }
+        if (DateTimeUtils.isContiguous(start) == false) {
+            throw new IllegalArgumentException("ReadablePartial objects must be contiguous");
+        }
+        Chronology chrono = DateTimeUtils.getChronology(start.getChronology()).withUTC();
+        int[] values = chrono.get(zeroInstance, chrono.set(start, 0L), chrono.set(end, 0L));
+        return values[0];
+    }
+
+    /**
+     * Creates a new instance representing the number of complete standard length units
+     * in the specified period.
+     * <p>
+     * This factory method converts all fields from the period to hours using standardised
+     * durations for each field. Only those fields which have a precise duration in
+     * the ISO UTC chronology can be converted.
+     * <ul>
+     * <li>One week consists of 7 days.
+     * <li>One day consists of 24 hours.
+     * <li>One hour consists of 60 minutes.
+     * <li>One minute consists of 60 seconds.
+     * <li>One second consists of 1000 milliseconds.
+     * </ul>
+     * Months and Years are imprecise and periods containing these values cannot be converted.
+     *
+     * @param period  the period to get the number of hours from, must not be null
+     * @param millisPerUnit  the number of milliseconds in one standard unit of this period
+     * @throws IllegalArgumentException if the period contains imprecise duration values
+     */
+    protected static int standardPeriodIn(ReadablePeriod period, long millisPerUnit) {
+        if (period == null) {
+            return 0;
+        }
+        Chronology iso = ISOChronology.getInstanceUTC();
+        long duration = 0L;
+        for (int i = 0; i < period.size(); i++) {
+            int value = period.getValue(i);
+            if (value != 0) {
+                DurationField field = period.getFieldType(i).getField(iso);
+                if (field.isPrecise() == false) {
+                    throw new IllegalArgumentException(
+                            "Cannot convert period to duration as " + field.getName() +
+                            " is not precise in the period " + period);
+                }
+                duration = FieldUtils.safeAdd(duration, FieldUtils.safeMultiply(field.getUnitMillis(), value));
+            }
+        }
+        return FieldUtils.safeToInt(duration / millisPerUnit);
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Creates a new instance representing the specified period.
+     *
+     * @param period  the period to represent
+     */
+    protected BaseSingleFieldPeriod(int period) {
+        super();
+        iPeriod = period;
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the amount of this period.
+     *
+     * @return the period value
+     */
+    protected int getValue() {
+        return iPeriod;
+    }
+
+    /**
+     * Sets the amount of this period.
+     * To make a subclass immutable you must declare it final, or block this method.
+     *
+     * @param vaue  the period value
+     */
+    protected void setValue(int value) {
+        iPeriod = value;
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the single duration field type.
+     *
+     * @return the duration field type, not null
+     */
+    public abstract DurationFieldType getFieldType();
+
+    /**
+     * Gets the period type which matches the duration field type.
+     *
+     * @return the period type, not null
+     */
+    public abstract PeriodType getPeriodType();
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the number of fields that this period supports, which is one.
+     *
+     * @return the number of fields supported, which is one
+     */
+    public int size() {
+        return 1;
+    }
+
+    /**
+     * Gets the field type at the specified index.
+     * <p>
+     * The only index supported by this period is zero which returns the
+     * field type of this class.
+     *
+     * @param index  the index to retrieve, which must be zero
+     * @return the field at the specified index
+     * @throws IndexOutOfBoundsException if the index is invalid
+     */
+    public DurationFieldType getFieldType(int index) {
+        if (index != 0) {
+            throw new IndexOutOfBoundsException(String.valueOf(index));
+        }
+        return getFieldType();
+    }
+
+    /**
+     * Gets the value at the specified index.
+     * <p>
+     * The only index supported by this period is zero.
+     *
+     * @param index  the index to retrieve, which must be zero
+     * @return the value of the field at the specified index
+     * @throws IndexOutOfBoundsException if the index is invalid
+     */
+    public int getValue(int index) {
+        if (index != 0) {
+            throw new IndexOutOfBoundsException(String.valueOf(index));
+        }
+        return getValue();
+    }
+
+    /**
+     * Gets the value of a duration field represented by this period.
+     * <p>
+     * If the field type specified does not match the type used by this class
+     * then zero is returned.
+     *
+     * @param type  the field type to query, null returns zero
+     * @return the value of that field, zero if field not supported
+     */
+    public int get(DurationFieldType type) {
+        if (type == getFieldType()) {
+            return getValue();
+        }
+        return 0;
+    }
+
+    /**
+     * Checks whether the duration field specified is supported by this period.
+     *
+     * @param type  the type to check, may be null which returns false
+     * @return true if the field is supported
+     */
+    public boolean isSupported(DurationFieldType type) {
+        return (type == getFieldType());
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Get this period as an immutable <code>Period</code> object.
+     * The period will use <code>PeriodType.standard()</code>.
+     *
+     * @return a <code>Period</code> representing the same number of days
+     */
+    public Period toPeriod() {
+        return Period.ZERO.withFields(this);
+    }
+
+    /**
+     * Get this object as a <code>MutablePeriod</code>.
+     * <p>
+     * This will always return a new <code>MutablePeriod</code> with the same fields.
+     * The period will use <code>PeriodType.standard()</code>.
+     * 
+     * @return a MutablePeriod using the same field set and values
+     */
+    public MutablePeriod toMutablePeriod() {
+        MutablePeriod period = new MutablePeriod();
+        period.add(this);
+        return period;
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Compares this object with the specified object for equality based on the
+     * value of each field. All ReadablePeriod instances are accepted, but only
+     * those with a matching <code>PeriodType</code> can return true.
+     *
+     * @param period  a readable period to check against
+     * @return true if all the field values are equal, false if
+     *  not or the period is null or of an incorrect type
+     */
+    public boolean equals(Object period) {
+        if (this == period) {
+            return true;
+        }
+        if (period instanceof ReadablePeriod == false) {
+            return false;
+        }
+        ReadablePeriod other = (ReadablePeriod) period;
+        return (other.getPeriodType() == getPeriodType() && other.getValue(0) == getValue());
+    }
+
+    /**
+     * Gets a hash code for the period as defined by ReadablePeriod.
+     *
+     * @return a hash code
+     */
+    public int hashCode() {
+        int total = 17;
+        total = 27 * total + getValue();
+        total = 27 * total + getFieldType().hashCode();
+        return total;
+    }
+
+    /**
+     * Compares this period to another object of the same class.
+     *
+     * @param other  the other period, must not be null
+     * @return zero if equal, positive if greater, negative if less
+     */
+    public int compareTo(Object other) {
+        if (other.getClass() != getClass()) {
+            throw new ClassCastException(getClass() + " cannot be compared to " + other.getClass());
+        }
+        int otherValue = ((BaseSingleFieldPeriod) other).getValue();
+        int thisValue = getValue();
+        if (thisValue > otherValue) {
+            return 1;
+        }
+        if (thisValue < otherValue) {
+            return -1;
+        }
+        return 0;
+    }
+
+}
diff --git a/JodaTime/src/test/org/joda/time/TestAll.java b/JodaTime/src/test/org/joda/time/TestAll.java
index f053eff4e..56299b3c6 100644
--- a/JodaTime/src/test/org/joda/time/TestAll.java
+++ b/JodaTime/src/test/org/joda/time/TestAll.java
@@ -84,6 +84,15 @@ public static Test suite() {
         suite.addTest(TestMutablePeriod_Basics.suite());
         suite.addTest(TestMutablePeriod_Updates.suite());
         
+        suite.addTest(TestBaseSingleFieldPeriod.suite());
+        suite.addTest(TestYears.suite());
+        suite.addTest(TestMonths.suite());
+        suite.addTest(TestWeeks.suite());
+        suite.addTest(TestDays.suite());
+        suite.addTest(TestHours.suite());
+        suite.addTest(TestMinutes.suite());
+        suite.addTest(TestSeconds.suite());
+        
         suite.addTest(TestTimeOfDay_Basics.suite());
         suite.addTest(TestTimeOfDay_Constructors.suite());
         suite.addTest(TestTimeOfDay_Properties.suite());
diff --git a/JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java b/JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java
new file mode 100644
index 000000000..a71d8c236
--- /dev/null
+++ b/JodaTime/src/test/org/joda/time/TestBaseSingleFieldPeriod.java
@@ -0,0 +1,333 @@
+/*
+ *  Copyright 2001-2006 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time;
+
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+import org.joda.time.base.BaseSingleFieldPeriod;
+
+/**
+ * This class is a Junit unit test for BaseSingleFieldPeriod.
+ *
+ * @author Stephen Colebourne
+ */
+public class TestBaseSingleFieldPeriod extends TestCase {
+    // Test in 2002/03 as time zones are more well known
+    // (before the late 90's they were all over the place)
+    private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
+
+    public static void main(String[] args) {
+        junit.textui.TestRunner.run(suite());
+    }
+
+    public static TestSuite suite() {
+        return new TestSuite(TestBaseSingleFieldPeriod.class);
+    }
+
+    public TestBaseSingleFieldPeriod(String name) {
+        super(name);
+    }
+
+    protected void setUp() throws Exception {
+    }
+
+    protected void tearDown() throws Exception {
+    }
+
+    //-----------------------------------------------------------------------
+    public void testFactory_between_RInstant() {
+        // test using Days
+        DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS);
+        DateTime end1 = new DateTime(2006, 6, 12, 12, 0, 0, 0, PARIS);
+        DateTime end2 = new DateTime(2006, 6, 15, 18, 0, 0, 0, PARIS);
+        
+        assertEquals(3, Single.between(start, end1, DurationFieldType.days()));
+        assertEquals(0, Single.between(start, start, DurationFieldType.days()));
+        assertEquals(0, Single.between(end1, end1, DurationFieldType.days()));
+        assertEquals(-3, Single.between(end1, start, DurationFieldType.days()));
+        assertEquals(6, Single.between(start, end2, DurationFieldType.days()));
+        try {
+            Single.between(start, (ReadableInstant) null, DurationFieldType.days());
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expected
+        }
+        try {
+            Single.between((ReadableInstant) null, end1, DurationFieldType.days());
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expected
+        }
+        try {
+            Single.between((ReadableInstant) null, (ReadableInstant) null, DurationFieldType.days());
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expected
+        }
+    }
+
+    public void testFactory_between_RPartial() {
+        LocalDate start = new LocalDate(2006, 6, 9);
+        LocalDate end1 = new LocalDate(2006, 6, 12);
+        YearMonthDay end2 = new YearMonthDay(2006, 6, 15);
+        
+        Single zero = new Single(0);
+        assertEquals(3, Single.between(start, end1, zero));
+        assertEquals(0, Single.between(start, start, zero));
+        assertEquals(0, Single.between(end1, end1, zero));
+        assertEquals(-3, Single.between(end1, start, zero));
+        assertEquals(6, Single.between(start, end2, zero));
+        try {
+            Single.between(start, (ReadablePartial) null, zero);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expected
+        }
+        try {
+            Single.between((ReadablePartial) null, end1, zero);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expected
+        }
+        try {
+            Single.between((ReadablePartial) null, (ReadablePartial) null, zero);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expected
+        }
+        try {
+            Single.between(start, new TimeOfDay(), zero);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expected
+        }
+        try {
+            Single.between(new Partial(DateTimeFieldType.dayOfWeek(), 2), new Partial(DateTimeFieldType.dayOfMonth(), 3), zero);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expected
+        }
+        Partial p = new Partial(
+                new DateTimeFieldType[] {DateTimeFieldType.year(), DateTimeFieldType.hourOfDay()},
+                new int[] {1, 2});
+        try {
+            Single.between(p, p, zero);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expected
+        }
+    }
+
+    public void testFactory_standardPeriodIn_RPeriod() {
+        assertEquals(0, Single.standardPeriodIn((ReadablePeriod) null, DateTimeConstants.MILLIS_PER_DAY));
+        assertEquals(0, Single.standardPeriodIn(Period.ZERO, DateTimeConstants.MILLIS_PER_DAY));
+        assertEquals(1, Single.standardPeriodIn(new Period(0, 0, 0, 1, 0, 0, 0, 0), DateTimeConstants.MILLIS_PER_DAY));
+        assertEquals(123, Single.standardPeriodIn(Period.days(123), DateTimeConstants.MILLIS_PER_DAY));
+        assertEquals(-987, Single.standardPeriodIn(Period.days(-987), DateTimeConstants.MILLIS_PER_DAY));
+        assertEquals(1, Single.standardPeriodIn(Period.hours(47), DateTimeConstants.MILLIS_PER_DAY));
+        assertEquals(2, Single.standardPeriodIn(Period.hours(48), DateTimeConstants.MILLIS_PER_DAY));
+        assertEquals(2, Single.standardPeriodIn(Period.hours(49), DateTimeConstants.MILLIS_PER_DAY));
+        assertEquals(14, Single.standardPeriodIn(Period.weeks(2), DateTimeConstants.MILLIS_PER_DAY));
+        try {
+            Single.standardPeriodIn(Period.months(1), DateTimeConstants.MILLIS_PER_DAY);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expeceted
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    public void testValueIndexMethods() {
+        Single test = new Single(20);
+        assertEquals(1, test.size());
+        assertEquals(20, test.getValue(0));
+        try {
+            test.getValue(1);
+            fail();
+        } catch (IndexOutOfBoundsException ex) {
+            // expected
+        }
+    }
+
+    public void testFieldTypeIndexMethods() {
+        Single test = new Single(20);
+        assertEquals(1, test.size());
+        assertEquals(DurationFieldType.days(), test.getFieldType(0));
+        try {
+            test.getFieldType(1);
+            fail();
+        } catch (IndexOutOfBoundsException ex) {
+            // expected
+        }
+    }
+
+    public void testIsSupported() {
+        Single test = new Single(20);
+        assertEquals(false, test.isSupported(DurationFieldType.years()));
+        assertEquals(false, test.isSupported(DurationFieldType.months()));
+        assertEquals(false, test.isSupported(DurationFieldType.weeks()));
+        assertEquals(true, test.isSupported(DurationFieldType.days()));
+        assertEquals(false, test.isSupported(DurationFieldType.hours()));
+        assertEquals(false, test.isSupported(DurationFieldType.minutes()));
+        assertEquals(false, test.isSupported(DurationFieldType.seconds()));
+        assertEquals(false, test.isSupported(DurationFieldType.millis()));
+    }        
+
+    public void testGet() {
+        Single test = new Single(20);
+        assertEquals(0, test.get(DurationFieldType.years()));
+        assertEquals(0, test.get(DurationFieldType.months()));
+        assertEquals(0, test.get(DurationFieldType.weeks()));
+        assertEquals(20, test.get(DurationFieldType.days()));
+        assertEquals(0, test.get(DurationFieldType.hours()));
+        assertEquals(0, test.get(DurationFieldType.minutes()));
+        assertEquals(0, test.get(DurationFieldType.seconds()));
+        assertEquals(0, test.get(DurationFieldType.millis()));
+    }
+
+    //-----------------------------------------------------------------------
+    public void testEqualsHashCode() {
+        Single testA = new Single(20);
+        Single testB = new Single(20);
+        assertEquals(true, testA.equals(testB));
+        assertEquals(true, testB.equals(testA));
+        assertEquals(true, testA.equals(testA));
+        assertEquals(true, testB.equals(testB));
+        assertEquals(true, testA.hashCode() == testB.hashCode());
+        assertEquals(true, testA.hashCode() == testA.hashCode());
+        assertEquals(true, testB.hashCode() == testB.hashCode());
+        
+        Single testC = new Single(30);
+        assertEquals(false, testA.equals(testC));
+        assertEquals(false, testB.equals(testC));
+        assertEquals(false, testC.equals(testA));
+        assertEquals(false, testC.equals(testB));
+        assertEquals(false, testA.hashCode() == testC.hashCode());
+        assertEquals(false, testB.hashCode() == testC.hashCode());
+        
+        assertEquals(true, testA.equals(Days.days(20)));
+        assertEquals(true, testA.equals(new Period(0, 0, 0, 20, 0, 0, 0, 0, PeriodType.days())));
+        assertEquals(false, testA.equals(Period.days(2)));
+        assertEquals(false, testA.equals("Hello"));
+        assertEquals(false, testA.equals(Hours.hours(2)));
+        assertEquals(false, testA.equals(null));
+    }
+
+    public void testCompareTo() {
+        Single test1 = new Single(21);
+        Single test2 = new Single(22);
+        Single test3 = new Single(23);
+        assertEquals(true, test1.compareTo(test1) == 0);
+        assertEquals(true, test1.compareTo(test2) < 0);
+        assertEquals(true, test1.compareTo(test3) < 0);
+        assertEquals(true, test2.compareTo(test1) > 0);
+        assertEquals(true, test2.compareTo(test2) == 0);
+        assertEquals(true, test2.compareTo(test3) < 0);
+        assertEquals(true, test3.compareTo(test1) > 0);
+        assertEquals(true, test3.compareTo(test2) > 0);
+        assertEquals(true, test3.compareTo(test3) == 0);
+        
+        try {
+            test1.compareTo("Hello");
+            fail();
+        } catch (ClassCastException ex) {
+            // expected
+        }
+        try {
+            test1.compareTo(new Period(0, 0, 0, 21, 0, 0, 0, 0, PeriodType.days()));
+            fail();
+        } catch (ClassCastException ex) {
+            // expected
+        }
+        try {
+            test1.compareTo(null);
+            fail();
+        } catch (NullPointerException ex) {
+            // expected
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToPeriod() {
+        Single test = new Single(20);
+        Period expected = Period.days(20);
+        assertEquals(expected, test.toPeriod());
+    }
+
+    public void testToMutablePeriod() {
+        Single test = new Single(20);
+        MutablePeriod expected = new MutablePeriod(0, 0, 0, 20, 0, 0, 0, 0);
+        assertEquals(expected, test.toMutablePeriod());
+    }
+
+//    public void testToDurationFrom() {
+//        Period test = new Period(123L);
+//        assertEquals(new Duration(123L), test.toDurationFrom(new Instant(0L)));
+//    }
+//
+//    public void testToDurationTo() {
+//        Period test = new Period(123L);
+//        assertEquals(new Duration(123L), test.toDurationTo(new Instant(123L)));
+//    }
+//
+
+    //-----------------------------------------------------------------------
+    public void testGetSetValue() {
+        Single test = new Single(20);
+        assertEquals(20, test.getValue());
+        test.setValue(10);
+        assertEquals(10, test.getValue());
+    }
+
+    //-----------------------------------------------------------------------
+    /** Test class. */
+    static class Single extends BaseSingleFieldPeriod {
+
+        public Single(int period) {
+            super(period);
+        }
+        
+        public static int between(ReadableInstant start, ReadableInstant end, DurationFieldType field) {
+            return BaseSingleFieldPeriod.between(start, end, field);
+        }
+        
+        public static int between(ReadablePartial start, ReadablePartial end, ReadablePeriod zeroInstance) {
+            return BaseSingleFieldPeriod.between(start, end, zeroInstance);
+        }
+        
+        public static int standardPeriodIn(ReadablePeriod period, long millisPerUnit) {
+            return BaseSingleFieldPeriod.standardPeriodIn(period, millisPerUnit);
+        }
+        
+        public DurationFieldType getFieldType() {
+            return DurationFieldType.days();
+        }
+
+        public PeriodType getPeriodType() {
+            return PeriodType.days();
+        }
+        
+        public int getValue() {
+            return super.getValue();
+        }
+        
+        public void setValue(int value) {
+            super.setValue(value);
+        }
+    }
+
+}
diff --git a/JodaTime/src/test/org/joda/time/TestDays.java b/JodaTime/src/test/org/joda/time/TestDays.java
new file mode 100644
index 000000000..5616cb7c6
--- /dev/null
+++ b/JodaTime/src/test/org/joda/time/TestDays.java
@@ -0,0 +1,384 @@
+/*
+ *  Copyright 2001-2006 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time;
+
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+/**
+ * This class is a Junit unit test for Days.
+ *
+ * @author Stephen Colebourne
+ */
+public class TestDays extends TestCase {
+    // Test in 2002/03 as time zones are more well known
+    // (before the late 90's they were all over the place)
+    private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
+
+    public static void main(String[] args) {
+        junit.textui.TestRunner.run(suite());
+    }
+
+    public static TestSuite suite() {
+        return new TestSuite(TestDays.class);
+    }
+
+    public TestDays(String name) {
+        super(name);
+    }
+
+    protected void setUp() throws Exception {
+    }
+
+    protected void tearDown() throws Exception {
+    }
+
+    //-----------------------------------------------------------------------
+    public void testConstants() {
+        assertEquals(0, Days.ZERO.getDays());
+        assertEquals(1, Days.ONE.getDays());
+        assertEquals(2, Days.TWO.getDays());
+        assertEquals(3, Days.THREE.getDays());
+        assertEquals(4, Days.FOUR.getDays());
+        assertEquals(5, Days.FIVE.getDays());
+        assertEquals(6, Days.SIX.getDays());
+        assertEquals(7, Days.SEVEN.getDays());
+        assertEquals(Integer.MAX_VALUE, Days.MAX_VALUE.getDays());
+        assertEquals(Integer.MIN_VALUE, Days.MIN_VALUE.getDays());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testFactory_days_int() {
+        assertSame(Days.ZERO, Days.days(0));
+        assertSame(Days.ONE, Days.days(1));
+        assertSame(Days.TWO, Days.days(2));
+        assertSame(Days.THREE, Days.days(3));
+        assertSame(Days.FOUR, Days.days(4));
+        assertSame(Days.FIVE, Days.days(5));
+        assertSame(Days.SIX, Days.days(6));
+        assertSame(Days.SEVEN, Days.days(7));
+        assertSame(Days.MAX_VALUE, Days.days(Integer.MAX_VALUE));
+        assertSame(Days.MIN_VALUE, Days.days(Integer.MIN_VALUE));
+        assertEquals(-1, Days.days(-1).getDays());
+        assertEquals(8, Days.days(8).getDays());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testFactory_daysBetween_RInstant() {
+        DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS);
+        DateTime end1 = new DateTime(2006, 6, 12, 12, 0, 0, 0, PARIS);
+        DateTime end2 = new DateTime(2006, 6, 15, 18, 0, 0, 0, PARIS);
+        
+        assertEquals(3, Days.daysBetween(start, end1).getDays());
+        assertEquals(0, Days.daysBetween(start, start).getDays());
+        assertEquals(0, Days.daysBetween(end1, end1).getDays());
+        assertEquals(-3, Days.daysBetween(end1, start).getDays());
+        assertEquals(6, Days.daysBetween(start, end2).getDays());
+    }
+
+    public void testFactory_daysBetween_RPartial() {
+        LocalDate start = new LocalDate(2006, 6, 9);
+        LocalDate end1 = new LocalDate(2006, 6, 12);
+        YearMonthDay end2 = new YearMonthDay(2006, 6, 15);
+        
+        assertEquals(3, Days.daysBetween(start, end1).getDays());
+        assertEquals(0, Days.daysBetween(start, start).getDays());
+        assertEquals(0, Days.daysBetween(end1, end1).getDays());
+        assertEquals(-3, Days.daysBetween(end1, start).getDays());
+        assertEquals(6, Days.daysBetween(start, end2).getDays());
+    }
+
+    public void testFactory_daysIn_RInterval() {
+        DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS);
+        DateTime end1 = new DateTime(2006, 6, 12, 12, 0, 0, 0, PARIS);
+        DateTime end2 = new DateTime(2006, 6, 15, 18, 0, 0, 0, PARIS);
+        
+        assertEquals(0, Days.daysIn((ReadableInterval) null).getDays());
+        assertEquals(3, Days.daysIn(new Interval(start, end1)).getDays());
+        assertEquals(0, Days.daysIn(new Interval(start, start)).getDays());
+        assertEquals(0, Days.daysIn(new Interval(end1, end1)).getDays());
+        assertEquals(6, Days.daysIn(new Interval(start, end2)).getDays());
+    }
+
+    public void testFactory_standardDaysIn_RPeriod() {
+        assertEquals(0, Days.standardDaysIn((ReadablePeriod) null).getDays());
+        assertEquals(0, Days.standardDaysIn(Period.ZERO).getDays());
+        assertEquals(1, Days.standardDaysIn(new Period(0, 0, 0, 1, 0, 0, 0, 0)).getDays());
+        assertEquals(123, Days.standardDaysIn(Period.days(123)).getDays());
+        assertEquals(-987, Days.standardDaysIn(Period.days(-987)).getDays());
+        assertEquals(1, Days.standardDaysIn(Period.hours(47)).getDays());
+        assertEquals(2, Days.standardDaysIn(Period.hours(48)).getDays());
+        assertEquals(2, Days.standardDaysIn(Period.hours(49)).getDays());
+        assertEquals(14, Days.standardDaysIn(Period.weeks(2)).getDays());
+        try {
+            Days.standardDaysIn(Period.months(1));
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expeceted
+        }
+    }
+
+    public void testFactory_parseDays_String() {
+        assertEquals(0, Days.parseDays((String) null).getDays());
+        assertEquals(0, Days.parseDays("P0D").getDays());
+        assertEquals(1, Days.parseDays("P1D").getDays());
+        assertEquals(-3, Days.parseDays("P-3D").getDays());
+        assertEquals(2, Days.parseDays("P0Y0M2D").getDays());
+        assertEquals(2, Days.parseDays("P2DT0H0M").getDays());
+        try {
+            Days.parseDays("P1Y1D");
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expeceted
+        }
+        try {
+            Days.parseDays("P1DT1H");
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expeceted
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    public void testGetMethods() {
+        Days test = Days.days(20);
+        assertEquals(20, test.getDays());
+    }
+
+    public void testGetFieldType() {
+        Days test = Days.days(20);
+        assertEquals(DurationFieldType.days(), test.getFieldType());
+    }
+
+    public void testGetPeriodType() {
+        Days test = Days.days(20);
+        assertEquals(PeriodType.days(), test.getPeriodType());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToString() {
+        Days test = Days.days(20);
+        assertEquals("P20D", test.toString());
+        
+        test = Days.days(-20);
+        assertEquals("P-20D", test.toString());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testSerialization() throws Exception {
+        Days test = Days.SEVEN;
+        
+        ByteArrayOutputStream baos = new ByteArrayOutputStream();
+        ObjectOutputStream oos = new ObjectOutputStream(baos);
+        oos.writeObject(test);
+        byte[] bytes = baos.toByteArray();
+        oos.close();
+        
+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
+        ObjectInputStream ois = new ObjectInputStream(bais);
+        Days result = (Days) ois.readObject();
+        ois.close();
+        
+        assertSame(test, result);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToStandardWeeks() {
+        Days test = Days.days(14);
+        Weeks expected = Weeks.weeks(2);
+        assertEquals(expected, test.toStandardWeeks());
+    }
+
+    public void testToStandardHours() {
+        Days test = Days.days(2);
+        Hours expected = Hours.hours(2 * 24);
+        assertEquals(expected, test.toStandardHours());
+        
+        try {
+            Days.MAX_VALUE.toStandardHours();
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    public void testToStandardMinutes() {
+        Days test = Days.days(2);
+        Minutes expected = Minutes.minutes(2 * 24 * 60);
+        assertEquals(expected, test.toStandardMinutes());
+        
+        try {
+            Days.MAX_VALUE.toStandardMinutes();
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    public void testToStandardSeconds() {
+        Days test = Days.days(2);
+        Seconds expected = Seconds.seconds(2 * 24 * 60 * 60);
+        assertEquals(expected, test.toStandardSeconds());
+        
+        try {
+            Days.MAX_VALUE.toStandardSeconds();
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    public void testToStandardDuration() {
+        Days test = Days.days(20);
+        Duration expected = new Duration(20L * DateTimeConstants.MILLIS_PER_DAY);
+        assertEquals(expected, test.toStandardDuration());
+        
+        expected = new Duration(((long) Integer.MAX_VALUE) * DateTimeConstants.MILLIS_PER_DAY);
+        assertEquals(expected, Days.MAX_VALUE.toStandardDuration());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testPlus_int() {
+        Days test2 = Days.days(2);
+        Days result = test2.plus(3);
+        assertEquals(2, test2.getDays());
+        assertEquals(5, result.getDays());
+        
+        assertEquals(1, Days.ONE.plus(0).getDays());
+        
+        try {
+            Days.MAX_VALUE.plus(1);
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    public void testPlus_Days() {
+        Days test2 = Days.days(2);
+        Days test3 = Days.days(3);
+        Days result = test2.plus(test3);
+        assertEquals(2, test2.getDays());
+        assertEquals(3, test3.getDays());
+        assertEquals(5, result.getDays());
+        
+        assertEquals(1, Days.ONE.plus(Days.ZERO).getDays());
+        assertEquals(1, Days.ONE.plus((Days) null).getDays());
+        
+        try {
+            Days.MAX_VALUE.plus(Days.ONE);
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    public void testMinus_int() {
+        Days test2 = Days.days(2);
+        Days result = test2.minus(3);
+        assertEquals(2, test2.getDays());
+        assertEquals(-1, result.getDays());
+        
+        assertEquals(1, Days.ONE.minus(0).getDays());
+        
+        try {
+            Days.MIN_VALUE.minus(1);
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    public void testMinus_Days() {
+        Days test2 = Days.days(2);
+        Days test3 = Days.days(3);
+        Days result = test2.minus(test3);
+        assertEquals(2, test2.getDays());
+        assertEquals(3, test3.getDays());
+        assertEquals(-1, result.getDays());
+        
+        assertEquals(1, Days.ONE.minus(Days.ZERO).getDays());
+        assertEquals(1, Days.ONE.minus((Days) null).getDays());
+        
+        try {
+            Days.MIN_VALUE.minus(Days.ONE);
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    public void testMultipliedBy_int() {
+        Days test = Days.days(2);
+        assertEquals(6, test.multipliedBy(3).getDays());
+        assertEquals(2, test.getDays());
+        assertEquals(-6, test.multipliedBy(-3).getDays());
+        assertSame(test, test.multipliedBy(1));
+        
+        Days halfMax = Days.days(Integer.MAX_VALUE / 2 + 1);
+        try {
+            halfMax.multipliedBy(2);
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    public void testDividedBy_int() {
+        Days test = Days.days(12);
+        assertEquals(6, test.dividedBy(2).getDays());
+        assertEquals(12, test.getDays());
+        assertEquals(4, test.dividedBy(3).getDays());
+        assertEquals(3, test.dividedBy(4).getDays());
+        assertEquals(2, test.dividedBy(5).getDays());
+        assertEquals(2, test.dividedBy(6).getDays());
+        assertSame(test, test.dividedBy(1));
+        
+        try {
+            Days.ONE.dividedBy(0);
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    public void testNegate() {
+        Days test = Days.days(12);
+        assertEquals(-12, test.negate().getDays());
+        assertEquals(12, test.getDays());
+        
+        try {
+            Days.MIN_VALUE.negate();
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    public void testAddToLocalDate() {
+        Days test = Days.days(20);
+        LocalDate date = new LocalDate(2006, 6, 1);
+        LocalDate expected = new LocalDate(2006, 6, 21);
+        assertEquals(expected, date.plus(test));
+    }
+
+}
diff --git a/JodaTime/src/test/org/joda/time/TestHours.java b/JodaTime/src/test/org/joda/time/TestHours.java
new file mode 100644
index 000000000..eb825948d
--- /dev/null
+++ b/JodaTime/src/test/org/joda/time/TestHours.java
@@ -0,0 +1,379 @@
+/*
+ *  Copyright 2001-2006 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time;
+
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+/**
+ * This class is a Junit unit test for Hours.
+ *
+ * @author Stephen Colebourne
+ */
+public class TestHours extends TestCase {
+    // Test in 2002/03 as time zones are more well known
+    // (before the late 90's they were all over the place)
+    private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
+
+    public static void main(String[] args) {
+        junit.textui.TestRunner.run(suite());
+    }
+
+    public static TestSuite suite() {
+        return new TestSuite(TestHours.class);
+    }
+
+    public TestHours(String name) {
+        super(name);
+    }
+
+    protected void setUp() throws Exception {
+    }
+
+    protected void tearDown() throws Exception {
+    }
+
+    //-----------------------------------------------------------------------
+    public void testConstants() {
+        assertEquals(0, Hours.ZERO.getHours());
+        assertEquals(1, Hours.ONE.getHours());
+        assertEquals(2, Hours.TWO.getHours());
+        assertEquals(3, Hours.THREE.getHours());
+        assertEquals(4, Hours.FOUR.getHours());
+        assertEquals(5, Hours.FIVE.getHours());
+        assertEquals(6, Hours.SIX.getHours());
+        assertEquals(7, Hours.SEVEN.getHours());
+        assertEquals(8, Hours.EIGHT.getHours());
+        assertEquals(Integer.MAX_VALUE, Hours.MAX_VALUE.getHours());
+        assertEquals(Integer.MIN_VALUE, Hours.MIN_VALUE.getHours());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testFactory_hours_int() {
+        assertSame(Hours.ZERO, Hours.hours(0));
+        assertSame(Hours.ONE, Hours.hours(1));
+        assertSame(Hours.TWO, Hours.hours(2));
+        assertSame(Hours.THREE, Hours.hours(3));
+        assertSame(Hours.FOUR, Hours.hours(4));
+        assertSame(Hours.FIVE, Hours.hours(5));
+        assertSame(Hours.SIX, Hours.hours(6));
+        assertSame(Hours.SEVEN, Hours.hours(7));
+        assertSame(Hours.EIGHT, Hours.hours(8));
+        assertSame(Hours.MAX_VALUE, Hours.hours(Integer.MAX_VALUE));
+        assertSame(Hours.MIN_VALUE, Hours.hours(Integer.MIN_VALUE));
+        assertEquals(-1, Hours.hours(-1).getHours());
+        assertEquals(9, Hours.hours(9).getHours());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testFactory_hoursBetween_RInstant() {
+        DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS);
+        DateTime end1 = new DateTime(2006, 6, 9, 15, 0, 0, 0, PARIS);
+        DateTime end2 = new DateTime(2006, 6, 9, 18, 0, 0, 0, PARIS);
+        
+        assertEquals(3, Hours.hoursBetween(start, end1).getHours());
+        assertEquals(0, Hours.hoursBetween(start, start).getHours());
+        assertEquals(0, Hours.hoursBetween(end1, end1).getHours());
+        assertEquals(-3, Hours.hoursBetween(end1, start).getHours());
+        assertEquals(6, Hours.hoursBetween(start, end2).getHours());
+    }
+
+    public void testFactory_hoursBetween_RPartial() {
+        LocalTime start = new LocalTime(12, 0);
+        LocalTime end1 = new LocalTime(15, 0);
+        TimeOfDay end2 = new TimeOfDay(18, 0);
+        
+        assertEquals(3, Hours.hoursBetween(start, end1).getHours());
+        assertEquals(0, Hours.hoursBetween(start, start).getHours());
+        assertEquals(0, Hours.hoursBetween(end1, end1).getHours());
+        assertEquals(-3, Hours.hoursBetween(end1, start).getHours());
+        assertEquals(6, Hours.hoursBetween(start, end2).getHours());
+    }
+
+    public void testFactory_hoursIn_RInterval() {
+        DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS);
+        DateTime end1 = new DateTime(2006, 6, 9, 15, 0, 0, 0, PARIS);
+        DateTime end2 = new DateTime(2006, 6, 9, 18, 0, 0, 0, PARIS);
+        
+        assertEquals(0, Hours.hoursIn((ReadableInterval) null).getHours());
+        assertEquals(3, Hours.hoursIn(new Interval(start, end1)).getHours());
+        assertEquals(0, Hours.hoursIn(new Interval(start, start)).getHours());
+        assertEquals(0, Hours.hoursIn(new Interval(end1, end1)).getHours());
+        assertEquals(6, Hours.hoursIn(new Interval(start, end2)).getHours());
+    }
+
+    public void testFactory_standardHoursIn_RPeriod() {
+        assertEquals(0, Hours.standardHoursIn((ReadablePeriod) null).getHours());
+        assertEquals(0, Hours.standardHoursIn(Period.ZERO).getHours());
+        assertEquals(1, Hours.standardHoursIn(new Period(0, 0, 0, 0, 1, 0, 0, 0)).getHours());
+        assertEquals(123, Hours.standardHoursIn(Period.hours(123)).getHours());
+        assertEquals(-987, Hours.standardHoursIn(Period.hours(-987)).getHours());
+        assertEquals(1, Hours.standardHoursIn(Period.minutes(119)).getHours());
+        assertEquals(2, Hours.standardHoursIn(Period.minutes(120)).getHours());
+        assertEquals(2, Hours.standardHoursIn(Period.minutes(121)).getHours());
+        assertEquals(48, Hours.standardHoursIn(Period.days(2)).getHours());
+        try {
+            Hours.standardHoursIn(Period.months(1));
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expeceted
+        }
+    }
+
+    public void testFactory_parseHours_String() {
+        assertEquals(0, Hours.parseHours((String) null).getHours());
+        assertEquals(0, Hours.parseHours("PT0H").getHours());
+        assertEquals(1, Hours.parseHours("PT1H").getHours());
+        assertEquals(-3, Hours.parseHours("PT-3H").getHours());
+        assertEquals(2, Hours.parseHours("P0Y0M0DT2H").getHours());
+        assertEquals(2, Hours.parseHours("PT2H0M").getHours());
+        try {
+            Hours.parseHours("P1Y1D");
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expeceted
+        }
+        try {
+            Hours.parseHours("P1DT1H");
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expeceted
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    public void testGetMethods() {
+        Hours test = Hours.hours(20);
+        assertEquals(20, test.getHours());
+    }
+
+    public void testGetFieldType() {
+        Hours test = Hours.hours(20);
+        assertEquals(DurationFieldType.hours(), test.getFieldType());
+    }
+
+    public void testGetPeriodType() {
+        Hours test = Hours.hours(20);
+        assertEquals(PeriodType.hours(), test.getPeriodType());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToString() {
+        Hours test = Hours.hours(20);
+        assertEquals("PT20H", test.toString());
+        
+        test = Hours.hours(-20);
+        assertEquals("PT-20H", test.toString());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testSerialization() throws Exception {
+        Hours test = Hours.SEVEN;
+        
+        ByteArrayOutputStream baos = new ByteArrayOutputStream();
+        ObjectOutputStream oos = new ObjectOutputStream(baos);
+        oos.writeObject(test);
+        byte[] bytes = baos.toByteArray();
+        oos.close();
+        
+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
+        ObjectInputStream ois = new ObjectInputStream(bais);
+        Hours result = (Hours) ois.readObject();
+        ois.close();
+        
+        assertSame(test, result);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToStandardWeeks() {
+        Hours test = Hours.hours(24 * 7 * 2);
+        Weeks expected = Weeks.weeks(2);
+        assertEquals(expected, test.toStandardWeeks());
+    }
+
+    public void testToStandardDays() {
+        Hours test = Hours.hours(24 * 2);
+        Days expected = Days.days(2);
+        assertEquals(expected, test.toStandardDays());
+    }
+
+    public void testToStandardMinutes() {
+        Hours test = Hours.hours(3);
+        Minutes expected = Minutes.minutes(3 * 60);
+        assertEquals(expected, test.toStandardMinutes());
+        
+        try {
+            Hours.MAX_VALUE.toStandardMinutes();
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    public void testToStandardSeconds() {
+        Hours test = Hours.hours(3);
+        Seconds expected = Seconds.seconds(3 * 60 * 60);
+        assertEquals(expected, test.toStandardSeconds());
+        
+        try {
+            Hours.MAX_VALUE.toStandardSeconds();
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    public void testToStandardDuration() {
+        Hours test = Hours.hours(20);
+        Duration expected = new Duration(20L * DateTimeConstants.MILLIS_PER_HOUR);
+        assertEquals(expected, test.toStandardDuration());
+        
+        expected = new Duration(((long) Integer.MAX_VALUE) * DateTimeConstants.MILLIS_PER_HOUR);
+        assertEquals(expected, Hours.MAX_VALUE.toStandardDuration());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testPlus_int() {
+        Hours test2 = Hours.hours(2);
+        Hours result = test2.plus(3);
+        assertEquals(2, test2.getHours());
+        assertEquals(5, result.getHours());
+        
+        assertEquals(1, Hours.ONE.plus(0).getHours());
+        
+        try {
+            Hours.MAX_VALUE.plus(1);
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    public void testPlus_Hours() {
+        Hours test2 = Hours.hours(2);
+        Hours test3 = Hours.hours(3);
+        Hours result = test2.plus(test3);
+        assertEquals(2, test2.getHours());
+        assertEquals(3, test3.getHours());
+        assertEquals(5, result.getHours());
+        
+        assertEquals(1, Hours.ONE.plus(Hours.ZERO).getHours());
+        assertEquals(1, Hours.ONE.plus((Hours) null).getHours());
+        
+        try {
+            Hours.MAX_VALUE.plus(Hours.ONE);
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    public void testMinus_int() {
+        Hours test2 = Hours.hours(2);
+        Hours result = test2.minus(3);
+        assertEquals(2, test2.getHours());
+        assertEquals(-1, result.getHours());
+        
+        assertEquals(1, Hours.ONE.minus(0).getHours());
+        
+        try {
+            Hours.MIN_VALUE.minus(1);
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    public void testMinus_Hours() {
+        Hours test2 = Hours.hours(2);
+        Hours test3 = Hours.hours(3);
+        Hours result = test2.minus(test3);
+        assertEquals(2, test2.getHours());
+        assertEquals(3, test3.getHours());
+        assertEquals(-1, result.getHours());
+        
+        assertEquals(1, Hours.ONE.minus(Hours.ZERO).getHours());
+        assertEquals(1, Hours.ONE.minus((Hours) null).getHours());
+        
+        try {
+            Hours.MIN_VALUE.minus(Hours.ONE);
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    public void testMultipliedBy_int() {
+        Hours test = Hours.hours(2);
+        assertEquals(6, test.multipliedBy(3).getHours());
+        assertEquals(2, test.getHours());
+        assertEquals(-6, test.multipliedBy(-3).getHours());
+        assertSame(test, test.multipliedBy(1));
+        
+        Hours halfMax = Hours.hours(Integer.MAX_VALUE / 2 + 1);
+        try {
+            halfMax.multipliedBy(2);
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    public void testDividedBy_int() {
+        Hours test = Hours.hours(12);
+        assertEquals(6, test.dividedBy(2).getHours());
+        assertEquals(12, test.getHours());
+        assertEquals(4, test.dividedBy(3).getHours());
+        assertEquals(3, test.dividedBy(4).getHours());
+        assertEquals(2, test.dividedBy(5).getHours());
+        assertEquals(2, test.dividedBy(6).getHours());
+        assertSame(test, test.dividedBy(1));
+        
+        try {
+            Hours.ONE.dividedBy(0);
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    public void testNegate() {
+        Hours test = Hours.hours(12);
+        assertEquals(-12, test.negate().getHours());
+        assertEquals(12, test.getHours());
+        
+        try {
+            Hours.MIN_VALUE.negate();
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    public void testAddToLocalDate() {
+        Hours test = Hours.hours(26);
+        LocalDateTime date = new LocalDateTime(2006, 6, 1, 0, 0, 0, 0);
+        LocalDateTime expected = new LocalDateTime(2006, 6, 2, 2, 0, 0, 0);
+        assertEquals(expected, date.plus(test));
+    }
+
+}
diff --git a/JodaTime/src/test/org/joda/time/TestMinutes.java b/JodaTime/src/test/org/joda/time/TestMinutes.java
new file mode 100644
index 000000000..c48e1b898
--- /dev/null
+++ b/JodaTime/src/test/org/joda/time/TestMinutes.java
@@ -0,0 +1,362 @@
+/*
+ *  Copyright 2001-2006 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time;
+
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+/**
+ * This class is a Junit unit test for Minutes.
+ *
+ * @author Stephen Colebourne
+ */
+public class TestMinutes extends TestCase {
+    // Test in 2002/03 as time zones are more well known
+    // (before the late 90's they were all over the place)
+    private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
+
+    public static void main(String[] args) {
+        junit.textui.TestRunner.run(suite());
+    }
+
+    public static TestSuite suite() {
+        return new TestSuite(TestMinutes.class);
+    }
+
+    public TestMinutes(String name) {
+        super(name);
+    }
+
+    protected void setUp() throws Exception {
+    }
+
+    protected void tearDown() throws Exception {
+    }
+
+    //-----------------------------------------------------------------------
+    public void testConstants() {
+        assertEquals(0, Minutes.ZERO.getMinutes());
+        assertEquals(1, Minutes.ONE.getMinutes());
+        assertEquals(2, Minutes.TWO.getMinutes());
+        assertEquals(3, Minutes.THREE.getMinutes());
+        assertEquals(Integer.MAX_VALUE, Minutes.MAX_VALUE.getMinutes());
+        assertEquals(Integer.MIN_VALUE, Minutes.MIN_VALUE.getMinutes());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testFactory_minutes_int() {
+        assertSame(Minutes.ZERO, Minutes.minutes(0));
+        assertSame(Minutes.ONE, Minutes.minutes(1));
+        assertSame(Minutes.TWO, Minutes.minutes(2));
+        assertSame(Minutes.THREE, Minutes.minutes(3));
+        assertSame(Minutes.MAX_VALUE, Minutes.minutes(Integer.MAX_VALUE));
+        assertSame(Minutes.MIN_VALUE, Minutes.minutes(Integer.MIN_VALUE));
+        assertEquals(-1, Minutes.minutes(-1).getMinutes());
+        assertEquals(4, Minutes.minutes(4).getMinutes());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testFactory_minutesBetween_RInstant() {
+        DateTime start = new DateTime(2006, 6, 9, 12, 3, 0, 0, PARIS);
+        DateTime end1 = new DateTime(2006, 6, 9, 12, 6, 0, 0, PARIS);
+        DateTime end2 = new DateTime(2006, 6, 9, 12, 9, 0, 0, PARIS);
+        
+        assertEquals(3, Minutes.minutesBetween(start, end1).getMinutes());
+        assertEquals(0, Minutes.minutesBetween(start, start).getMinutes());
+        assertEquals(0, Minutes.minutesBetween(end1, end1).getMinutes());
+        assertEquals(-3, Minutes.minutesBetween(end1, start).getMinutes());
+        assertEquals(6, Minutes.minutesBetween(start, end2).getMinutes());
+    }
+
+    public void testFactory_minutesBetween_RPartial() {
+        LocalTime start = new LocalTime(12, 3);
+        LocalTime end1 = new LocalTime(12, 6);
+        TimeOfDay end2 = new TimeOfDay(12, 9);
+        
+        assertEquals(3, Minutes.minutesBetween(start, end1).getMinutes());
+        assertEquals(0, Minutes.minutesBetween(start, start).getMinutes());
+        assertEquals(0, Minutes.minutesBetween(end1, end1).getMinutes());
+        assertEquals(-3, Minutes.minutesBetween(end1, start).getMinutes());
+        assertEquals(6, Minutes.minutesBetween(start, end2).getMinutes());
+    }
+
+    public void testFactory_minutesIn_RInterval() {
+        DateTime start = new DateTime(2006, 6, 9, 12, 3, 0, 0, PARIS);
+        DateTime end1 = new DateTime(2006, 6, 9, 12, 6, 0, 0, PARIS);
+        DateTime end2 = new DateTime(2006, 6, 9, 12, 9, 0, 0, PARIS);
+        
+        assertEquals(0, Minutes.minutesIn((ReadableInterval) null).getMinutes());
+        assertEquals(3, Minutes.minutesIn(new Interval(start, end1)).getMinutes());
+        assertEquals(0, Minutes.minutesIn(new Interval(start, start)).getMinutes());
+        assertEquals(0, Minutes.minutesIn(new Interval(end1, end1)).getMinutes());
+        assertEquals(6, Minutes.minutesIn(new Interval(start, end2)).getMinutes());
+    }
+
+    public void testFactory_standardMinutesIn_RPeriod() {
+        assertEquals(0, Minutes.standardMinutesIn((ReadablePeriod) null).getMinutes());
+        assertEquals(0, Minutes.standardMinutesIn(Period.ZERO).getMinutes());
+        assertEquals(1, Minutes.standardMinutesIn(new Period(0, 0, 0, 0, 0, 1, 0, 0)).getMinutes());
+        assertEquals(123, Minutes.standardMinutesIn(Period.minutes(123)).getMinutes());
+        assertEquals(-987, Minutes.standardMinutesIn(Period.minutes(-987)).getMinutes());
+        assertEquals(1, Minutes.standardMinutesIn(Period.seconds(119)).getMinutes());
+        assertEquals(2, Minutes.standardMinutesIn(Period.seconds(120)).getMinutes());
+        assertEquals(2, Minutes.standardMinutesIn(Period.seconds(121)).getMinutes());
+        assertEquals(120, Minutes.standardMinutesIn(Period.hours(2)).getMinutes());
+        try {
+            Minutes.standardMinutesIn(Period.months(1));
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expeceted
+        }
+    }
+
+    public void testFactory_parseMinutes_String() {
+        assertEquals(0, Minutes.parseMinutes((String) null).getMinutes());
+        assertEquals(0, Minutes.parseMinutes("PT0M").getMinutes());
+        assertEquals(1, Minutes.parseMinutes("PT1M").getMinutes());
+        assertEquals(-3, Minutes.parseMinutes("PT-3M").getMinutes());
+        assertEquals(2, Minutes.parseMinutes("P0Y0M0DT2M").getMinutes());
+        assertEquals(2, Minutes.parseMinutes("PT0H2M").getMinutes());
+        try {
+            Minutes.parseMinutes("P1Y1D");
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expeceted
+        }
+        try {
+            Minutes.parseMinutes("P1DT1M");
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expeceted
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    public void testGetMethods() {
+        Minutes test = Minutes.minutes(20);
+        assertEquals(20, test.getMinutes());
+    }
+
+    public void testGetFieldType() {
+        Minutes test = Minutes.minutes(20);
+        assertEquals(DurationFieldType.minutes(), test.getFieldType());
+    }
+
+    public void testGetPeriodType() {
+        Minutes test = Minutes.minutes(20);
+        assertEquals(PeriodType.minutes(), test.getPeriodType());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToString() {
+        Minutes test = Minutes.minutes(20);
+        assertEquals("PT20M", test.toString());
+        
+        test = Minutes.minutes(-20);
+        assertEquals("PT-20M", test.toString());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testSerialization() throws Exception {
+        Minutes test = Minutes.THREE;
+        
+        ByteArrayOutputStream baos = new ByteArrayOutputStream();
+        ObjectOutputStream oos = new ObjectOutputStream(baos);
+        oos.writeObject(test);
+        byte[] bytes = baos.toByteArray();
+        oos.close();
+        
+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
+        ObjectInputStream ois = new ObjectInputStream(bais);
+        Minutes result = (Minutes) ois.readObject();
+        ois.close();
+        
+        assertSame(test, result);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToStandardWeeks() {
+        Minutes test = Minutes.minutes(60 * 24 * 7 * 2);
+        Weeks expected = Weeks.weeks(2);
+        assertEquals(expected, test.toStandardWeeks());
+    }
+
+    public void testToStandardDays() {
+        Minutes test = Minutes.minutes(60 * 24 * 2);
+        Days expected = Days.days(2);
+        assertEquals(expected, test.toStandardDays());
+    }
+
+    public void testToStandardHours() {
+        Minutes test = Minutes.minutes(3 * 60);
+        Hours expected = Hours.hours(3);
+        assertEquals(expected, test.toStandardHours());
+    }
+
+    public void testToStandardSeconds() {
+        Minutes test = Minutes.minutes(3);
+        Seconds expected = Seconds.seconds(3 * 60);
+        assertEquals(expected, test.toStandardSeconds());
+        
+        try {
+            Minutes.MAX_VALUE.toStandardSeconds();
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    public void testToStandardDuration() {
+        Minutes test = Minutes.minutes(20);
+        Duration expected = new Duration(20L * DateTimeConstants.MILLIS_PER_MINUTE);
+        assertEquals(expected, test.toStandardDuration());
+        
+        expected = new Duration(((long) Integer.MAX_VALUE) * DateTimeConstants.MILLIS_PER_MINUTE);
+        assertEquals(expected, Minutes.MAX_VALUE.toStandardDuration());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testPlus_int() {
+        Minutes test2 = Minutes.minutes(2);
+        Minutes result = test2.plus(3);
+        assertEquals(2, test2.getMinutes());
+        assertEquals(5, result.getMinutes());
+        
+        assertEquals(1, Minutes.ONE.plus(0).getMinutes());
+        
+        try {
+            Minutes.MAX_VALUE.plus(1);
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    public void testPlus_Minutes() {
+        Minutes test2 = Minutes.minutes(2);
+        Minutes test3 = Minutes.minutes(3);
+        Minutes result = test2.plus(test3);
+        assertEquals(2, test2.getMinutes());
+        assertEquals(3, test3.getMinutes());
+        assertEquals(5, result.getMinutes());
+        
+        assertEquals(1, Minutes.ONE.plus(Minutes.ZERO).getMinutes());
+        assertEquals(1, Minutes.ONE.plus((Minutes) null).getMinutes());
+        
+        try {
+            Minutes.MAX_VALUE.plus(Minutes.ONE);
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    public void testMinus_int() {
+        Minutes test2 = Minutes.minutes(2);
+        Minutes result = test2.minus(3);
+        assertEquals(2, test2.getMinutes());
+        assertEquals(-1, result.getMinutes());
+        
+        assertEquals(1, Minutes.ONE.minus(0).getMinutes());
+        
+        try {
+            Minutes.MIN_VALUE.minus(1);
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    public void testMinus_Minutes() {
+        Minutes test2 = Minutes.minutes(2);
+        Minutes test3 = Minutes.minutes(3);
+        Minutes result = test2.minus(test3);
+        assertEquals(2, test2.getMinutes());
+        assertEquals(3, test3.getMinutes());
+        assertEquals(-1, result.getMinutes());
+        
+        assertEquals(1, Minutes.ONE.minus(Minutes.ZERO).getMinutes());
+        assertEquals(1, Minutes.ONE.minus((Minutes) null).getMinutes());
+        
+        try {
+            Minutes.MIN_VALUE.minus(Minutes.ONE);
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    public void testMultipliedBy_int() {
+        Minutes test = Minutes.minutes(2);
+        assertEquals(6, test.multipliedBy(3).getMinutes());
+        assertEquals(2, test.getMinutes());
+        assertEquals(-6, test.multipliedBy(-3).getMinutes());
+        assertSame(test, test.multipliedBy(1));
+        
+        Minutes halfMax = Minutes.minutes(Integer.MAX_VALUE / 2 + 1);
+        try {
+            halfMax.multipliedBy(2);
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    public void testDividedBy_int() {
+        Minutes test = Minutes.minutes(12);
+        assertEquals(6, test.dividedBy(2).getMinutes());
+        assertEquals(12, test.getMinutes());
+        assertEquals(4, test.dividedBy(3).getMinutes());
+        assertEquals(3, test.dividedBy(4).getMinutes());
+        assertEquals(2, test.dividedBy(5).getMinutes());
+        assertEquals(2, test.dividedBy(6).getMinutes());
+        assertSame(test, test.dividedBy(1));
+        
+        try {
+            Minutes.ONE.dividedBy(0);
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    public void testNegate() {
+        Minutes test = Minutes.minutes(12);
+        assertEquals(-12, test.negate().getMinutes());
+        assertEquals(12, test.getMinutes());
+        
+        try {
+            Minutes.MIN_VALUE.negate();
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    public void testAddToLocalDate() {
+        Minutes test = Minutes.minutes(26);
+        LocalDateTime date = new LocalDateTime(2006, 6, 1, 0, 0, 0, 0);
+        LocalDateTime expected = new LocalDateTime(2006, 6, 1, 0, 26, 0, 0);
+        assertEquals(expected, date.plus(test));
+    }
+
+}
diff --git a/JodaTime/src/test/org/joda/time/TestMonths.java b/JodaTime/src/test/org/joda/time/TestMonths.java
new file mode 100644
index 000000000..b634f373c
--- /dev/null
+++ b/JodaTime/src/test/org/joda/time/TestMonths.java
@@ -0,0 +1,321 @@
+/*
+ *  Copyright 2001-2006 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time;
+
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+/**
+ * This class is a Junit unit test for Months.
+ *
+ * @author Stephen Colebourne
+ */
+public class TestMonths extends TestCase {
+    // Test in 2002/03 as time zones are more well known
+    // (before the late 90's they were all over the place)
+    private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
+
+    public static void main(String[] args) {
+        junit.textui.TestRunner.run(suite());
+    }
+
+    public static TestSuite suite() {
+        return new TestSuite(TestMonths.class);
+    }
+
+    public TestMonths(String name) {
+        super(name);
+    }
+
+    protected void setUp() throws Exception {
+    }
+
+    protected void tearDown() throws Exception {
+    }
+
+    //-----------------------------------------------------------------------
+    public void testConstants() {
+        assertEquals(0, Months.ZERO.getMonths());
+        assertEquals(1, Months.ONE.getMonths());
+        assertEquals(2, Months.TWO.getMonths());
+        assertEquals(3, Months.THREE.getMonths());
+        assertEquals(4, Months.FOUR.getMonths());
+        assertEquals(5, Months.FIVE.getMonths());
+        assertEquals(6, Months.SIX.getMonths());
+        assertEquals(7, Months.SEVEN.getMonths());
+        assertEquals(8, Months.EIGHT.getMonths());
+        assertEquals(9, Months.NINE.getMonths());
+        assertEquals(10, Months.TEN.getMonths());
+        assertEquals(11, Months.ELEVEN.getMonths());
+        assertEquals(12, Months.TWELVE.getMonths());
+        assertEquals(Integer.MAX_VALUE, Months.MAX_VALUE.getMonths());
+        assertEquals(Integer.MIN_VALUE, Months.MIN_VALUE.getMonths());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testFactory_months_int() {
+        assertSame(Months.ZERO, Months.months(0));
+        assertSame(Months.ONE, Months.months(1));
+        assertSame(Months.TWO, Months.months(2));
+        assertSame(Months.THREE, Months.months(3));
+        assertSame(Months.FOUR, Months.months(4));
+        assertSame(Months.FIVE, Months.months(5));
+        assertSame(Months.SIX, Months.months(6));
+        assertSame(Months.SEVEN, Months.months(7));
+        assertSame(Months.EIGHT, Months.months(8));
+        assertSame(Months.NINE, Months.months(9));
+        assertSame(Months.TEN, Months.months(10));
+        assertSame(Months.ELEVEN, Months.months(11));
+        assertSame(Months.TWELVE, Months.months(12));
+        assertSame(Months.MAX_VALUE, Months.months(Integer.MAX_VALUE));
+        assertSame(Months.MIN_VALUE, Months.months(Integer.MIN_VALUE));
+        assertEquals(-1, Months.months(-1).getMonths());
+        assertEquals(13, Months.months(13).getMonths());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testFactory_monthsBetween_RInstant() {
+        DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS);
+        DateTime end1 = new DateTime(2006, 9, 9, 12, 0, 0, 0, PARIS);
+        DateTime end2 = new DateTime(2006, 12, 9, 12, 0, 0, 0, PARIS);
+        
+        assertEquals(3, Months.monthsBetween(start, end1).getMonths());
+        assertEquals(0, Months.monthsBetween(start, start).getMonths());
+        assertEquals(0, Months.monthsBetween(end1, end1).getMonths());
+        assertEquals(-3, Months.monthsBetween(end1, start).getMonths());
+        assertEquals(6, Months.monthsBetween(start, end2).getMonths());
+    }
+
+    public void testFactory_monthsBetween_RPartial() {
+        LocalDate start = new LocalDate(2006, 6, 9);
+        LocalDate end1 = new LocalDate(2006, 9, 9);
+        YearMonthDay end2 = new YearMonthDay(2006, 12, 9);
+        
+        assertEquals(3, Months.monthsBetween(start, end1).getMonths());
+        assertEquals(0, Months.monthsBetween(start, start).getMonths());
+        assertEquals(0, Months.monthsBetween(end1, end1).getMonths());
+        assertEquals(-3, Months.monthsBetween(end1, start).getMonths());
+        assertEquals(6, Months.monthsBetween(start, end2).getMonths());
+    }
+
+    public void testFactory_monthsIn_RInterval() {
+        DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS);
+        DateTime end1 = new DateTime(2006, 9, 9, 12, 0, 0, 0, PARIS);
+        DateTime end2 = new DateTime(2006, 12, 9, 12, 0, 0, 0, PARIS);
+        
+        assertEquals(0, Months.monthsIn((ReadableInterval) null).getMonths());
+        assertEquals(3, Months.monthsIn(new Interval(start, end1)).getMonths());
+        assertEquals(0, Months.monthsIn(new Interval(start, start)).getMonths());
+        assertEquals(0, Months.monthsIn(new Interval(end1, end1)).getMonths());
+        assertEquals(6, Months.monthsIn(new Interval(start, end2)).getMonths());
+    }
+
+    public void testFactory_parseMonths_String() {
+        assertEquals(0, Months.parseMonths((String) null).getMonths());
+        assertEquals(0, Months.parseMonths("P0M").getMonths());
+        assertEquals(1, Months.parseMonths("P1M").getMonths());
+        assertEquals(-3, Months.parseMonths("P-3M").getMonths());
+        assertEquals(2, Months.parseMonths("P0Y2M").getMonths());
+        assertEquals(2, Months.parseMonths("P2MT0H0M").getMonths());
+        try {
+            Months.parseMonths("P1Y1D");
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expeceted
+        }
+        try {
+            Months.parseMonths("P1MT1H");
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expeceted
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    public void testGetMethods() {
+        Months test = Months.months(20);
+        assertEquals(20, test.getMonths());
+    }
+
+    public void testGetFieldType() {
+        Months test = Months.months(20);
+        assertEquals(DurationFieldType.months(), test.getFieldType());
+    }
+
+    public void testGetPeriodType() {
+        Months test = Months.months(20);
+        assertEquals(PeriodType.months(), test.getPeriodType());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToString() {
+        Months test = Months.months(20);
+        assertEquals("P20M", test.toString());
+        
+        test = Months.months(-20);
+        assertEquals("P-20M", test.toString());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testSerialization() throws Exception {
+        Months test = Months.THREE;
+        
+        ByteArrayOutputStream baos = new ByteArrayOutputStream();
+        ObjectOutputStream oos = new ObjectOutputStream(baos);
+        oos.writeObject(test);
+        byte[] bytes = baos.toByteArray();
+        oos.close();
+        
+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
+        ObjectInputStream ois = new ObjectInputStream(bais);
+        Months result = (Months) ois.readObject();
+        ois.close();
+        
+        assertSame(test, result);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testPlus_int() {
+        Months test2 = Months.months(2);
+        Months result = test2.plus(3);
+        assertEquals(2, test2.getMonths());
+        assertEquals(5, result.getMonths());
+        
+        assertEquals(1, Months.ONE.plus(0).getMonths());
+        
+        try {
+            Months.MAX_VALUE.plus(1);
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    public void testPlus_Months() {
+        Months test2 = Months.months(2);
+        Months test3 = Months.months(3);
+        Months result = test2.plus(test3);
+        assertEquals(2, test2.getMonths());
+        assertEquals(3, test3.getMonths());
+        assertEquals(5, result.getMonths());
+        
+        assertEquals(1, Months.ONE.plus(Months.ZERO).getMonths());
+        assertEquals(1, Months.ONE.plus((Months) null).getMonths());
+        
+        try {
+            Months.MAX_VALUE.plus(Months.ONE);
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    public void testMinus_int() {
+        Months test2 = Months.months(2);
+        Months result = test2.minus(3);
+        assertEquals(2, test2.getMonths());
+        assertEquals(-1, result.getMonths());
+        
+        assertEquals(1, Months.ONE.minus(0).getMonths());
+        
+        try {
+            Months.MIN_VALUE.minus(1);
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    public void testMinus_Months() {
+        Months test2 = Months.months(2);
+        Months test3 = Months.months(3);
+        Months result = test2.minus(test3);
+        assertEquals(2, test2.getMonths());
+        assertEquals(3, test3.getMonths());
+        assertEquals(-1, result.getMonths());
+        
+        assertEquals(1, Months.ONE.minus(Months.ZERO).getMonths());
+        assertEquals(1, Months.ONE.minus((Months) null).getMonths());
+        
+        try {
+            Months.MIN_VALUE.minus(Months.ONE);
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    public void testMultipliedBy_int() {
+        Months test = Months.months(2);
+        assertEquals(6, test.multipliedBy(3).getMonths());
+        assertEquals(2, test.getMonths());
+        assertEquals(-6, test.multipliedBy(-3).getMonths());
+        assertSame(test, test.multipliedBy(1));
+        
+        Months halfMax = Months.months(Integer.MAX_VALUE / 2 + 1);
+        try {
+            halfMax.multipliedBy(2);
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    public void testDividedBy_int() {
+        Months test = Months.months(12);
+        assertEquals(6, test.dividedBy(2).getMonths());
+        assertEquals(12, test.getMonths());
+        assertEquals(4, test.dividedBy(3).getMonths());
+        assertEquals(3, test.dividedBy(4).getMonths());
+        assertEquals(2, test.dividedBy(5).getMonths());
+        assertEquals(2, test.dividedBy(6).getMonths());
+        assertSame(test, test.dividedBy(1));
+        
+        try {
+            Months.ONE.dividedBy(0);
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    public void testNegate() {
+        Months test = Months.months(12);
+        assertEquals(-12, test.negate().getMonths());
+        assertEquals(12, test.getMonths());
+        
+        try {
+            Months.MIN_VALUE.negate();
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    public void testAddToLocalDate() {
+        Months test = Months.months(3);
+        LocalDate date = new LocalDate(2006, 6, 1);
+        LocalDate expected = new LocalDate(2006, 9, 1);
+        assertEquals(expected, date.plus(test));
+    }
+
+}
diff --git a/JodaTime/src/test/org/joda/time/TestSeconds.java b/JodaTime/src/test/org/joda/time/TestSeconds.java
new file mode 100644
index 000000000..5d083f76c
--- /dev/null
+++ b/JodaTime/src/test/org/joda/time/TestSeconds.java
@@ -0,0 +1,352 @@
+/*
+ *  Copyright 2001-2006 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time;
+
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+/**
+ * This class is a Junit unit test for Seconds.
+ *
+ * @author Stephen Colebourne
+ */
+public class TestSeconds extends TestCase {
+    // Test in 2002/03 as time zones are more well known
+    // (before the late 90's they were all over the place)
+    private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
+
+    public static void main(String[] args) {
+        junit.textui.TestRunner.run(suite());
+    }
+
+    public static TestSuite suite() {
+        return new TestSuite(TestSeconds.class);
+    }
+
+    public TestSeconds(String name) {
+        super(name);
+    }
+
+    protected void setUp() throws Exception {
+    }
+
+    protected void tearDown() throws Exception {
+    }
+
+    //-----------------------------------------------------------------------
+    public void testConstants() {
+        assertEquals(0, Seconds.ZERO.getSeconds());
+        assertEquals(1, Seconds.ONE.getSeconds());
+        assertEquals(2, Seconds.TWO.getSeconds());
+        assertEquals(3, Seconds.THREE.getSeconds());
+        assertEquals(Integer.MAX_VALUE, Seconds.MAX_VALUE.getSeconds());
+        assertEquals(Integer.MIN_VALUE, Seconds.MIN_VALUE.getSeconds());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testFactory_seconds_int() {
+        assertSame(Seconds.ZERO, Seconds.seconds(0));
+        assertSame(Seconds.ONE, Seconds.seconds(1));
+        assertSame(Seconds.TWO, Seconds.seconds(2));
+        assertSame(Seconds.THREE, Seconds.seconds(3));
+        assertSame(Seconds.MAX_VALUE, Seconds.seconds(Integer.MAX_VALUE));
+        assertSame(Seconds.MIN_VALUE, Seconds.seconds(Integer.MIN_VALUE));
+        assertEquals(-1, Seconds.seconds(-1).getSeconds());
+        assertEquals(4, Seconds.seconds(4).getSeconds());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testFactory_secondsBetween_RInstant() {
+        DateTime start = new DateTime(2006, 6, 9, 12, 0, 3, 0, PARIS);
+        DateTime end1 = new DateTime(2006, 6, 9, 12, 0, 6, 0, PARIS);
+        DateTime end2 = new DateTime(2006, 6, 9, 12, 0, 9, 0, PARIS);
+        
+        assertEquals(3, Seconds.secondsBetween(start, end1).getSeconds());
+        assertEquals(0, Seconds.secondsBetween(start, start).getSeconds());
+        assertEquals(0, Seconds.secondsBetween(end1, end1).getSeconds());
+        assertEquals(-3, Seconds.secondsBetween(end1, start).getSeconds());
+        assertEquals(6, Seconds.secondsBetween(start, end2).getSeconds());
+    }
+
+    public void testFactory_secondsBetween_RPartial() {
+        LocalTime start = new LocalTime(12, 0, 3);
+        LocalTime end1 = new LocalTime(12, 0, 6);
+        TimeOfDay end2 = new TimeOfDay(12, 0, 9);
+        
+        assertEquals(3, Seconds.secondsBetween(start, end1).getSeconds());
+        assertEquals(0, Seconds.secondsBetween(start, start).getSeconds());
+        assertEquals(0, Seconds.secondsBetween(end1, end1).getSeconds());
+        assertEquals(-3, Seconds.secondsBetween(end1, start).getSeconds());
+        assertEquals(6, Seconds.secondsBetween(start, end2).getSeconds());
+    }
+
+    public void testFactory_secondsIn_RInterval() {
+        DateTime start = new DateTime(2006, 6, 9, 12, 0, 3, 0, PARIS);
+        DateTime end1 = new DateTime(2006, 6, 9, 12, 0, 6, 0, PARIS);
+        DateTime end2 = new DateTime(2006, 6, 9, 12, 0, 9, 0, PARIS);
+        
+        assertEquals(0, Seconds.secondsIn((ReadableInterval) null).getSeconds());
+        assertEquals(3, Seconds.secondsIn(new Interval(start, end1)).getSeconds());
+        assertEquals(0, Seconds.secondsIn(new Interval(start, start)).getSeconds());
+        assertEquals(0, Seconds.secondsIn(new Interval(end1, end1)).getSeconds());
+        assertEquals(6, Seconds.secondsIn(new Interval(start, end2)).getSeconds());
+    }
+
+    public void testFactory_standardSecondsIn_RPeriod() {
+        assertEquals(0, Seconds.standardSecondsIn((ReadablePeriod) null).getSeconds());
+        assertEquals(0, Seconds.standardSecondsIn(Period.ZERO).getSeconds());
+        assertEquals(1, Seconds.standardSecondsIn(new Period(0, 0, 0, 0, 0, 0, 1, 0)).getSeconds());
+        assertEquals(123, Seconds.standardSecondsIn(Period.seconds(123)).getSeconds());
+        assertEquals(-987, Seconds.standardSecondsIn(Period.seconds(-987)).getSeconds());
+        assertEquals(2 * 24 * 60 * 60, Seconds.standardSecondsIn(Period.days(2)).getSeconds());
+        try {
+            Seconds.standardSecondsIn(Period.months(1));
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expeceted
+        }
+    }
+
+    public void testFactory_parseSeconds_String() {
+        assertEquals(0, Seconds.parseSeconds((String) null).getSeconds());
+        assertEquals(0, Seconds.parseSeconds("PT0S").getSeconds());
+        assertEquals(1, Seconds.parseSeconds("PT1S").getSeconds());
+        assertEquals(-3, Seconds.parseSeconds("PT-3S").getSeconds());
+        assertEquals(2, Seconds.parseSeconds("P0Y0M0DT2S").getSeconds());
+        assertEquals(2, Seconds.parseSeconds("PT0H2S").getSeconds());
+        try {
+            Seconds.parseSeconds("P1Y1D");
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expeceted
+        }
+        try {
+            Seconds.parseSeconds("P1DT1S");
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expeceted
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    public void testGetMethods() {
+        Seconds test = Seconds.seconds(20);
+        assertEquals(20, test.getSeconds());
+    }
+
+    public void testGetFieldType() {
+        Seconds test = Seconds.seconds(20);
+        assertEquals(DurationFieldType.seconds(), test.getFieldType());
+    }
+
+    public void testGetPeriodType() {
+        Seconds test = Seconds.seconds(20);
+        assertEquals(PeriodType.seconds(), test.getPeriodType());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToString() {
+        Seconds test = Seconds.seconds(20);
+        assertEquals("PT20S", test.toString());
+        
+        test = Seconds.seconds(-20);
+        assertEquals("PT-20S", test.toString());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testSerialization() throws Exception {
+        Seconds test = Seconds.THREE;
+        
+        ByteArrayOutputStream baos = new ByteArrayOutputStream();
+        ObjectOutputStream oos = new ObjectOutputStream(baos);
+        oos.writeObject(test);
+        byte[] bytes = baos.toByteArray();
+        oos.close();
+        
+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
+        ObjectInputStream ois = new ObjectInputStream(bais);
+        Seconds result = (Seconds) ois.readObject();
+        ois.close();
+        
+        assertSame(test, result);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToStandardWeeks() {
+        Seconds test = Seconds.seconds(60 * 60 * 24 * 7 * 2);
+        Weeks expected = Weeks.weeks(2);
+        assertEquals(expected, test.toStandardWeeks());
+    }
+
+    public void testToStandardDays() {
+        Seconds test = Seconds.seconds(60 * 60 * 24 * 2);
+        Days expected = Days.days(2);
+        assertEquals(expected, test.toStandardDays());
+    }
+
+    public void testToStandardHours() {
+        Seconds test = Seconds.seconds(60 * 60 * 2);
+        Hours expected = Hours.hours(2);
+        assertEquals(expected, test.toStandardHours());
+    }
+
+    public void testToStandardMinutes() {
+        Seconds test = Seconds.seconds(60 * 2);
+        Minutes expected = Minutes.minutes(2);
+        assertEquals(expected, test.toStandardMinutes());
+    }
+
+    public void testToStandardDuration() {
+        Seconds test = Seconds.seconds(20);
+        Duration expected = new Duration(20L * DateTimeConstants.MILLIS_PER_SECOND);
+        assertEquals(expected, test.toStandardDuration());
+        
+        expected = new Duration(((long) Integer.MAX_VALUE) * DateTimeConstants.MILLIS_PER_SECOND);
+        assertEquals(expected, Seconds.MAX_VALUE.toStandardDuration());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testPlus_int() {
+        Seconds test2 = Seconds.seconds(2);
+        Seconds result = test2.plus(3);
+        assertEquals(2, test2.getSeconds());
+        assertEquals(5, result.getSeconds());
+        
+        assertEquals(1, Seconds.ONE.plus(0).getSeconds());
+        
+        try {
+            Seconds.MAX_VALUE.plus(1);
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    public void testPlus_Seconds() {
+        Seconds test2 = Seconds.seconds(2);
+        Seconds test3 = Seconds.seconds(3);
+        Seconds result = test2.plus(test3);
+        assertEquals(2, test2.getSeconds());
+        assertEquals(3, test3.getSeconds());
+        assertEquals(5, result.getSeconds());
+        
+        assertEquals(1, Seconds.ONE.plus(Seconds.ZERO).getSeconds());
+        assertEquals(1, Seconds.ONE.plus((Seconds) null).getSeconds());
+        
+        try {
+            Seconds.MAX_VALUE.plus(Seconds.ONE);
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    public void testMinus_int() {
+        Seconds test2 = Seconds.seconds(2);
+        Seconds result = test2.minus(3);
+        assertEquals(2, test2.getSeconds());
+        assertEquals(-1, result.getSeconds());
+        
+        assertEquals(1, Seconds.ONE.minus(0).getSeconds());
+        
+        try {
+            Seconds.MIN_VALUE.minus(1);
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    public void testMinus_Seconds() {
+        Seconds test2 = Seconds.seconds(2);
+        Seconds test3 = Seconds.seconds(3);
+        Seconds result = test2.minus(test3);
+        assertEquals(2, test2.getSeconds());
+        assertEquals(3, test3.getSeconds());
+        assertEquals(-1, result.getSeconds());
+        
+        assertEquals(1, Seconds.ONE.minus(Seconds.ZERO).getSeconds());
+        assertEquals(1, Seconds.ONE.minus((Seconds) null).getSeconds());
+        
+        try {
+            Seconds.MIN_VALUE.minus(Seconds.ONE);
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    public void testMultipliedBy_int() {
+        Seconds test = Seconds.seconds(2);
+        assertEquals(6, test.multipliedBy(3).getSeconds());
+        assertEquals(2, test.getSeconds());
+        assertEquals(-6, test.multipliedBy(-3).getSeconds());
+        assertSame(test, test.multipliedBy(1));
+        
+        Seconds halfMax = Seconds.seconds(Integer.MAX_VALUE / 2 + 1);
+        try {
+            halfMax.multipliedBy(2);
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    public void testDividedBy_int() {
+        Seconds test = Seconds.seconds(12);
+        assertEquals(6, test.dividedBy(2).getSeconds());
+        assertEquals(12, test.getSeconds());
+        assertEquals(4, test.dividedBy(3).getSeconds());
+        assertEquals(3, test.dividedBy(4).getSeconds());
+        assertEquals(2, test.dividedBy(5).getSeconds());
+        assertEquals(2, test.dividedBy(6).getSeconds());
+        assertSame(test, test.dividedBy(1));
+        
+        try {
+            Seconds.ONE.dividedBy(0);
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    public void testNegate() {
+        Seconds test = Seconds.seconds(12);
+        assertEquals(-12, test.negate().getSeconds());
+        assertEquals(12, test.getSeconds());
+        
+        try {
+            Seconds.MIN_VALUE.negate();
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    public void testAddToLocalDate() {
+        Seconds test = Seconds.seconds(26);
+        LocalDateTime date = new LocalDateTime(2006, 6, 1, 0, 0, 0, 0);
+        LocalDateTime expected = new LocalDateTime(2006, 6, 1, 0, 0, 26, 0);
+        assertEquals(expected, date.plus(test));
+    }
+
+}
diff --git a/JodaTime/src/test/org/joda/time/TestWeeks.java b/JodaTime/src/test/org/joda/time/TestWeeks.java
new file mode 100644
index 000000000..ed31f5352
--- /dev/null
+++ b/JodaTime/src/test/org/joda/time/TestWeeks.java
@@ -0,0 +1,382 @@
+/*
+ *  Copyright 2001-2006 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time;
+
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+/**
+ * This class is a Junit unit test for Weeks.
+ *
+ * @author Stephen Colebourne
+ */
+public class TestWeeks extends TestCase {
+    // Test in 2002/03 as time zones are more well known
+    // (before the late 90's they were all over the place)
+    private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
+
+    public static void main(String[] args) {
+        junit.textui.TestRunner.run(suite());
+    }
+
+    public static TestSuite suite() {
+        return new TestSuite(TestWeeks.class);
+    }
+
+    public TestWeeks(String name) {
+        super(name);
+    }
+
+    protected void setUp() throws Exception {
+    }
+
+    protected void tearDown() throws Exception {
+    }
+
+    //-----------------------------------------------------------------------
+    public void testConstants() {
+        assertEquals(0, Weeks.ZERO.getWeeks());
+        assertEquals(1, Weeks.ONE.getWeeks());
+        assertEquals(2, Weeks.TWO.getWeeks());
+        assertEquals(3, Weeks.THREE.getWeeks());
+        assertEquals(Integer.MAX_VALUE, Weeks.MAX_VALUE.getWeeks());
+        assertEquals(Integer.MIN_VALUE, Weeks.MIN_VALUE.getWeeks());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testFactory_weeks_int() {
+        assertSame(Weeks.ZERO, Weeks.weeks(0));
+        assertSame(Weeks.ONE, Weeks.weeks(1));
+        assertSame(Weeks.TWO, Weeks.weeks(2));
+        assertSame(Weeks.THREE, Weeks.weeks(3));
+        assertSame(Weeks.MAX_VALUE, Weeks.weeks(Integer.MAX_VALUE));
+        assertSame(Weeks.MIN_VALUE, Weeks.weeks(Integer.MIN_VALUE));
+        assertEquals(-1, Weeks.weeks(-1).getWeeks());
+        assertEquals(4, Weeks.weeks(4).getWeeks());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testFactory_weeksBetween_RInstant() {
+        DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS);
+        DateTime end1 = new DateTime(2006, 6, 30, 12, 0, 0, 0, PARIS);
+        DateTime end2 = new DateTime(2006, 7, 21, 12, 0, 0, 0, PARIS);
+        
+        assertEquals(3, Weeks.weeksBetween(start, end1).getWeeks());
+        assertEquals(0, Weeks.weeksBetween(start, start).getWeeks());
+        assertEquals(0, Weeks.weeksBetween(end1, end1).getWeeks());
+        assertEquals(-3, Weeks.weeksBetween(end1, start).getWeeks());
+        assertEquals(6, Weeks.weeksBetween(start, end2).getWeeks());
+    }
+
+    public void testFactory_weeksBetween_RPartial() {
+        LocalDate start = new LocalDate(2006, 6, 9);
+        LocalDate end1 = new LocalDate(2006, 6, 30);
+        YearMonthDay end2 = new YearMonthDay(2006, 7, 21);
+        
+        assertEquals(3, Weeks.weeksBetween(start, end1).getWeeks());
+        assertEquals(0, Weeks.weeksBetween(start, start).getWeeks());
+        assertEquals(0, Weeks.weeksBetween(end1, end1).getWeeks());
+        assertEquals(-3, Weeks.weeksBetween(end1, start).getWeeks());
+        assertEquals(6, Weeks.weeksBetween(start, end2).getWeeks());
+    }
+
+    public void testFactory_weeksIn_RInterval() {
+        DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS);
+        DateTime end1 = new DateTime(2006, 6, 30, 12, 0, 0, 0, PARIS);
+        DateTime end2 = new DateTime(2006, 7, 21, 12, 0, 0, 0, PARIS);
+        
+        assertEquals(0, Weeks.weeksIn((ReadableInterval) null).getWeeks());
+        assertEquals(3, Weeks.weeksIn(new Interval(start, end1)).getWeeks());
+        assertEquals(0, Weeks.weeksIn(new Interval(start, start)).getWeeks());
+        assertEquals(0, Weeks.weeksIn(new Interval(end1, end1)).getWeeks());
+        assertEquals(6, Weeks.weeksIn(new Interval(start, end2)).getWeeks());
+    }
+
+    public void testFactory_standardWeeksIn_RPeriod() {
+        assertEquals(0, Weeks.standardWeeksIn((ReadablePeriod) null).getWeeks());
+        assertEquals(0, Weeks.standardWeeksIn(Period.ZERO).getWeeks());
+        assertEquals(1, Weeks.standardWeeksIn(new Period(0, 0, 1, 0, 0, 0, 0, 0)).getWeeks());
+        assertEquals(123, Weeks.standardWeeksIn(Period.weeks(123)).getWeeks());
+        assertEquals(-987, Weeks.standardWeeksIn(Period.weeks(-987)).getWeeks());
+        assertEquals(1, Weeks.standardWeeksIn(Period.days(13)).getWeeks());
+        assertEquals(2, Weeks.standardWeeksIn(Period.days(14)).getWeeks());
+        assertEquals(2, Weeks.standardWeeksIn(Period.days(15)).getWeeks());
+        try {
+            Weeks.standardWeeksIn(Period.months(1));
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expeceted
+        }
+    }
+
+    public void testFactory_parseWeeks_String() {
+        assertEquals(0, Weeks.parseWeeks((String) null).getWeeks());
+        assertEquals(0, Weeks.parseWeeks("P0W").getWeeks());
+        assertEquals(1, Weeks.parseWeeks("P1W").getWeeks());
+        assertEquals(-3, Weeks.parseWeeks("P-3W").getWeeks());
+        assertEquals(2, Weeks.parseWeeks("P0Y0M2W").getWeeks());
+        assertEquals(2, Weeks.parseWeeks("P2WT0H0M").getWeeks());
+        try {
+            Weeks.parseWeeks("P1Y1D");
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expeceted
+        }
+        try {
+            Weeks.parseWeeks("P1WT1H");
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expeceted
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    public void testGetMethods() {
+        Weeks test = Weeks.weeks(20);
+        assertEquals(20, test.getWeeks());
+    }
+
+    public void testGetFieldType() {
+        Weeks test = Weeks.weeks(20);
+        assertEquals(DurationFieldType.weeks(), test.getFieldType());
+    }
+
+    public void testGetPeriodType() {
+        Weeks test = Weeks.weeks(20);
+        assertEquals(PeriodType.weeks(), test.getPeriodType());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToString() {
+        Weeks test = Weeks.weeks(20);
+        assertEquals("P20W", test.toString());
+        
+        test = Weeks.weeks(-20);
+        assertEquals("P-20W", test.toString());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testSerialization() throws Exception {
+        Weeks test = Weeks.THREE;
+        
+        ByteArrayOutputStream baos = new ByteArrayOutputStream();
+        ObjectOutputStream oos = new ObjectOutputStream(baos);
+        oos.writeObject(test);
+        byte[] bytes = baos.toByteArray();
+        oos.close();
+        
+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
+        ObjectInputStream ois = new ObjectInputStream(bais);
+        Weeks result = (Weeks) ois.readObject();
+        ois.close();
+        
+        assertSame(test, result);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToStandardDays() {
+        Weeks test = Weeks.weeks(2);
+        Days expected = Days.days(14);
+        assertEquals(expected, test.toStandardDays());
+        
+        try {
+            Weeks.MAX_VALUE.toStandardDays();
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    public void testToStandardHours() {
+        Weeks test = Weeks.weeks(2);
+        Hours expected = Hours.hours(2 * 7 * 24);
+        assertEquals(expected, test.toStandardHours());
+        
+        try {
+            Weeks.MAX_VALUE.toStandardHours();
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    public void testToStandardMinutes() {
+        Weeks test = Weeks.weeks(2);
+        Minutes expected = Minutes.minutes(2 * 7 * 24 * 60);
+        assertEquals(expected, test.toStandardMinutes());
+        
+        try {
+            Weeks.MAX_VALUE.toStandardMinutes();
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    public void testToStandardSeconds() {
+        Weeks test = Weeks.weeks(2);
+        Seconds expected = Seconds.seconds(2 * 7 * 24 * 60 * 60);
+        assertEquals(expected, test.toStandardSeconds());
+        
+        try {
+            Weeks.MAX_VALUE.toStandardSeconds();
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    public void testToStandardDuration() {
+        Weeks test = Weeks.weeks(20);
+        Duration expected = new Duration(20L * DateTimeConstants.MILLIS_PER_WEEK);
+        assertEquals(expected, test.toStandardDuration());
+        
+        expected = new Duration(((long) Integer.MAX_VALUE) * DateTimeConstants.MILLIS_PER_WEEK);
+        assertEquals(expected, Weeks.MAX_VALUE.toStandardDuration());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testPlus_int() {
+        Weeks test2 = Weeks.weeks(2);
+        Weeks result = test2.plus(3);
+        assertEquals(2, test2.getWeeks());
+        assertEquals(5, result.getWeeks());
+        
+        assertEquals(1, Weeks.ONE.plus(0).getWeeks());
+        
+        try {
+            Weeks.MAX_VALUE.plus(1);
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    public void testPlus_Weeks() {
+        Weeks test2 = Weeks.weeks(2);
+        Weeks test3 = Weeks.weeks(3);
+        Weeks result = test2.plus(test3);
+        assertEquals(2, test2.getWeeks());
+        assertEquals(3, test3.getWeeks());
+        assertEquals(5, result.getWeeks());
+        
+        assertEquals(1, Weeks.ONE.plus(Weeks.ZERO).getWeeks());
+        assertEquals(1, Weeks.ONE.plus((Weeks) null).getWeeks());
+        
+        try {
+            Weeks.MAX_VALUE.plus(Weeks.ONE);
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    public void testMinus_int() {
+        Weeks test2 = Weeks.weeks(2);
+        Weeks result = test2.minus(3);
+        assertEquals(2, test2.getWeeks());
+        assertEquals(-1, result.getWeeks());
+        
+        assertEquals(1, Weeks.ONE.minus(0).getWeeks());
+        
+        try {
+            Weeks.MIN_VALUE.minus(1);
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    public void testMinus_Weeks() {
+        Weeks test2 = Weeks.weeks(2);
+        Weeks test3 = Weeks.weeks(3);
+        Weeks result = test2.minus(test3);
+        assertEquals(2, test2.getWeeks());
+        assertEquals(3, test3.getWeeks());
+        assertEquals(-1, result.getWeeks());
+        
+        assertEquals(1, Weeks.ONE.minus(Weeks.ZERO).getWeeks());
+        assertEquals(1, Weeks.ONE.minus((Weeks) null).getWeeks());
+        
+        try {
+            Weeks.MIN_VALUE.minus(Weeks.ONE);
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    public void testMultipliedBy_int() {
+        Weeks test = Weeks.weeks(2);
+        assertEquals(6, test.multipliedBy(3).getWeeks());
+        assertEquals(2, test.getWeeks());
+        assertEquals(-6, test.multipliedBy(-3).getWeeks());
+        assertSame(test, test.multipliedBy(1));
+        
+        Weeks halfMax = Weeks.weeks(Integer.MAX_VALUE / 2 + 1);
+        try {
+            halfMax.multipliedBy(2);
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    public void testDividedBy_int() {
+        Weeks test = Weeks.weeks(12);
+        assertEquals(6, test.dividedBy(2).getWeeks());
+        assertEquals(12, test.getWeeks());
+        assertEquals(4, test.dividedBy(3).getWeeks());
+        assertEquals(3, test.dividedBy(4).getWeeks());
+        assertEquals(2, test.dividedBy(5).getWeeks());
+        assertEquals(2, test.dividedBy(6).getWeeks());
+        assertSame(test, test.dividedBy(1));
+        
+        try {
+            Weeks.ONE.dividedBy(0);
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    public void testNegate() {
+        Weeks test = Weeks.weeks(12);
+        assertEquals(-12, test.negate().getWeeks());
+        assertEquals(12, test.getWeeks());
+        
+        try {
+            Weeks.MIN_VALUE.negate();
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    public void testAddToLocalDate() {
+        Weeks test = Weeks.weeks(3);
+        LocalDate date = new LocalDate(2006, 6, 1);
+        LocalDate expected = new LocalDate(2006, 6, 22);
+        assertEquals(expected, date.plus(test));
+    }
+
+}
diff --git a/JodaTime/src/test/org/joda/time/TestYears.java b/JodaTime/src/test/org/joda/time/TestYears.java
new file mode 100644
index 000000000..94d43b369
--- /dev/null
+++ b/JodaTime/src/test/org/joda/time/TestYears.java
@@ -0,0 +1,303 @@
+/*
+ *  Copyright 2001-2006 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time;
+
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+/**
+ * This class is a Junit unit test for Years.
+ *
+ * @author Stephen Colebourne
+ */
+public class TestYears extends TestCase {
+    // Test in 2002/03 as time zones are more well known
+    // (before the late 90's they were all over the place)
+    private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
+
+    public static void main(String[] args) {
+        junit.textui.TestRunner.run(suite());
+    }
+
+    public static TestSuite suite() {
+        return new TestSuite(TestYears.class);
+    }
+
+    public TestYears(String name) {
+        super(name);
+    }
+
+    protected void setUp() throws Exception {
+    }
+
+    protected void tearDown() throws Exception {
+    }
+
+    //-----------------------------------------------------------------------
+    public void testConstants() {
+        assertEquals(0, Years.ZERO.getYears());
+        assertEquals(1, Years.ONE.getYears());
+        assertEquals(2, Years.TWO.getYears());
+        assertEquals(3, Years.THREE.getYears());
+        assertEquals(Integer.MAX_VALUE, Years.MAX_VALUE.getYears());
+        assertEquals(Integer.MIN_VALUE, Years.MIN_VALUE.getYears());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testFactory_years_int() {
+        assertSame(Years.ZERO, Years.years(0));
+        assertSame(Years.ONE, Years.years(1));
+        assertSame(Years.TWO, Years.years(2));
+        assertSame(Years.THREE, Years.years(3));
+        assertSame(Years.MAX_VALUE, Years.years(Integer.MAX_VALUE));
+        assertSame(Years.MIN_VALUE, Years.years(Integer.MIN_VALUE));
+        assertEquals(-1, Years.years(-1).getYears());
+        assertEquals(4, Years.years(4).getYears());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testFactory_yearsBetween_RInstant() {
+        DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS);
+        DateTime end1 = new DateTime(2009, 6, 9, 12, 0, 0, 0, PARIS);
+        DateTime end2 = new DateTime(2012, 6, 9, 12, 0, 0, 0, PARIS);
+        
+        assertEquals(3, Years.yearsBetween(start, end1).getYears());
+        assertEquals(0, Years.yearsBetween(start, start).getYears());
+        assertEquals(0, Years.yearsBetween(end1, end1).getYears());
+        assertEquals(-3, Years.yearsBetween(end1, start).getYears());
+        assertEquals(6, Years.yearsBetween(start, end2).getYears());
+    }
+
+    public void testFactory_yearsBetween_RPartial() {
+        LocalDate start = new LocalDate(2006, 6, 9);
+        LocalDate end1 = new LocalDate(2009, 6, 9);
+        YearMonthDay end2 = new YearMonthDay(2012, 6, 9);
+        
+        assertEquals(3, Years.yearsBetween(start, end1).getYears());
+        assertEquals(0, Years.yearsBetween(start, start).getYears());
+        assertEquals(0, Years.yearsBetween(end1, end1).getYears());
+        assertEquals(-3, Years.yearsBetween(end1, start).getYears());
+        assertEquals(6, Years.yearsBetween(start, end2).getYears());
+    }
+
+    public void testFactory_yearsIn_RInterval() {
+        DateTime start = new DateTime(2006, 6, 9, 12, 0, 0, 0, PARIS);
+        DateTime end1 = new DateTime(2009, 6, 9, 12, 0, 0, 0, PARIS);
+        DateTime end2 = new DateTime(2012, 6, 9, 12, 0, 0, 0, PARIS);
+        
+        assertEquals(0, Years.yearsIn((ReadableInterval) null).getYears());
+        assertEquals(3, Years.yearsIn(new Interval(start, end1)).getYears());
+        assertEquals(0, Years.yearsIn(new Interval(start, start)).getYears());
+        assertEquals(0, Years.yearsIn(new Interval(end1, end1)).getYears());
+        assertEquals(6, Years.yearsIn(new Interval(start, end2)).getYears());
+    }
+
+    public void testFactory_parseYears_String() {
+        assertEquals(0, Years.parseYears((String) null).getYears());
+        assertEquals(0, Years.parseYears("P0Y").getYears());
+        assertEquals(1, Years.parseYears("P1Y").getYears());
+        assertEquals(-3, Years.parseYears("P-3Y").getYears());
+        assertEquals(2, Years.parseYears("P2Y0M").getYears());
+        assertEquals(2, Years.parseYears("P2YT0H0M").getYears());
+        try {
+            Years.parseYears("P1M1D");
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expeceted
+        }
+        try {
+            Years.parseYears("P1YT1H");
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expeceted
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    public void testGetMethods() {
+        Years test = Years.years(20);
+        assertEquals(20, test.getYears());
+    }
+
+    public void testGetFieldType() {
+        Years test = Years.years(20);
+        assertEquals(DurationFieldType.years(), test.getFieldType());
+    }
+
+    public void testGetPeriodType() {
+        Years test = Years.years(20);
+        assertEquals(PeriodType.years(), test.getPeriodType());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToString() {
+        Years test = Years.years(20);
+        assertEquals("P20Y", test.toString());
+        
+        test = Years.years(-20);
+        assertEquals("P-20Y", test.toString());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testSerialization() throws Exception {
+        Years test = Years.THREE;
+        
+        ByteArrayOutputStream baos = new ByteArrayOutputStream();
+        ObjectOutputStream oos = new ObjectOutputStream(baos);
+        oos.writeObject(test);
+        byte[] bytes = baos.toByteArray();
+        oos.close();
+        
+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
+        ObjectInputStream ois = new ObjectInputStream(bais);
+        Years result = (Years) ois.readObject();
+        ois.close();
+        
+        assertSame(test, result);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testPlus_int() {
+        Years test2 = Years.years(2);
+        Years result = test2.plus(3);
+        assertEquals(2, test2.getYears());
+        assertEquals(5, result.getYears());
+        
+        assertEquals(1, Years.ONE.plus(0).getYears());
+        
+        try {
+            Years.MAX_VALUE.plus(1);
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    public void testPlus_Years() {
+        Years test2 = Years.years(2);
+        Years test3 = Years.years(3);
+        Years result = test2.plus(test3);
+        assertEquals(2, test2.getYears());
+        assertEquals(3, test3.getYears());
+        assertEquals(5, result.getYears());
+        
+        assertEquals(1, Years.ONE.plus(Years.ZERO).getYears());
+        assertEquals(1, Years.ONE.plus((Years) null).getYears());
+        
+        try {
+            Years.MAX_VALUE.plus(Years.ONE);
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    public void testMinus_int() {
+        Years test2 = Years.years(2);
+        Years result = test2.minus(3);
+        assertEquals(2, test2.getYears());
+        assertEquals(-1, result.getYears());
+        
+        assertEquals(1, Years.ONE.minus(0).getYears());
+        
+        try {
+            Years.MIN_VALUE.minus(1);
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    public void testMinus_Years() {
+        Years test2 = Years.years(2);
+        Years test3 = Years.years(3);
+        Years result = test2.minus(test3);
+        assertEquals(2, test2.getYears());
+        assertEquals(3, test3.getYears());
+        assertEquals(-1, result.getYears());
+        
+        assertEquals(1, Years.ONE.minus(Years.ZERO).getYears());
+        assertEquals(1, Years.ONE.minus((Years) null).getYears());
+        
+        try {
+            Years.MIN_VALUE.minus(Years.ONE);
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    public void testMultipliedBy_int() {
+        Years test = Years.years(2);
+        assertEquals(6, test.multipliedBy(3).getYears());
+        assertEquals(2, test.getYears());
+        assertEquals(-6, test.multipliedBy(-3).getYears());
+        assertSame(test, test.multipliedBy(1));
+        
+        Years halfMax = Years.years(Integer.MAX_VALUE / 2 + 1);
+        try {
+            halfMax.multipliedBy(2);
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    public void testDividedBy_int() {
+        Years test = Years.years(12);
+        assertEquals(6, test.dividedBy(2).getYears());
+        assertEquals(12, test.getYears());
+        assertEquals(4, test.dividedBy(3).getYears());
+        assertEquals(3, test.dividedBy(4).getYears());
+        assertEquals(2, test.dividedBy(5).getYears());
+        assertEquals(2, test.dividedBy(6).getYears());
+        assertSame(test, test.dividedBy(1));
+        
+        try {
+            Years.ONE.dividedBy(0);
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    public void testNegate() {
+        Years test = Years.years(12);
+        assertEquals(-12, test.negate().getYears());
+        assertEquals(12, test.getYears());
+        
+        try {
+            Years.MIN_VALUE.negate();
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    public void testAddToLocalDate() {
+        Years test = Years.years(3);
+        LocalDate date = new LocalDate(2006, 6, 1);
+        LocalDate expected = new LocalDate(2009, 6, 1);
+        assertEquals(expected, date.plus(test));
+    }
+
+}

From 7c5b32a9b70f76557c32d290d0872afc41bc42f9 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Wed, 11 Oct 2006 14:53:24 +0000
Subject: [PATCH 23/54] Javadoc comment fix.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1137 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java b/JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java
index 6b400f50e..d6144c0e9 100644
--- a/JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java
+++ b/JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java
@@ -170,7 +170,7 @@ protected int getValue() {
      * Sets the amount of this period.
      * To make a subclass immutable you must declare it final, or block this method.
      *
-     * @param vaue  the period value
+     * @param value  the period value
      */
     protected void setValue(int value) {
         iPeriod = value;

From 5e5300bf9f64f04fdd8dde88798942b3bd82c890 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Wed, 11 Oct 2006 14:54:12 +0000
Subject: [PATCH 24/54] Updated tz database to version 2006n.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1138 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                     |  2 +-
 .../src/java/org/joda/time/tz/src/Readme.txt   |  2 +-
 JodaTime/src/java/org/joda/time/tz/src/asia    |  9 +++++++--
 JodaTime/src/java/org/joda/time/tz/src/europe  | 16 ++++++++++------
 .../src/java/org/joda/time/tz/src/northamerica | 11 +++++++++--
 .../src/java/org/joda/time/tz/src/southamerica | 18 +++++++++---------
 6 files changed, 37 insertions(+), 21 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 0c77ac59a..1b534aac0 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -37,7 +37,7 @@ Source compatible - Yes
 Serialization compatible - Yes
 
 Data compatible - Yes
-  - DateTimeZone data updated to version 2006m
+  - DateTimeZone data updated to version 2006n
 
 Semantic compatible - Yes
 
diff --git a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
index e426fe602..af8383ee6 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
+++ b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
@@ -1,2 +1,2 @@
 The data files in this directory were obtained from the public tz database,
-http://www.twinsun.com/tz/tz-link.htm, version 2006m.
+http://www.twinsun.com/tz/tz-link.htm, version 2006n.
diff --git a/JodaTime/src/java/org/joda/time/tz/src/asia b/JodaTime/src/java/org/joda/time/tz/src/asia
index ec0245037..2b1da68e9 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/asia
+++ b/JodaTime/src/java/org/joda/time/tz/src/asia
@@ -1,4 +1,4 @@
-# @(#)asia	8.7
+# %W%
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
@@ -953,6 +953,10 @@ Zone	Asia/Tokyo	9:18:59	-	LMT	1887 Dec 31 15:00u
 # For Jordan I have received multiple independent user reports every year
 # about DST end dates, as the end-rule is different every year.
 #
+# From Steffen Thorsen (2006-10-01), after a heads-up from Hilal Malawi:
+# http://www.petranews.gov.jo/nepras/2006/Sep/05/4000.htm
+# "Jordan will switch to winter time on Friday, October 27".
+#
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Jordan	1973	only	-	Jun	6	0:00	1:00	S
 Rule	Jordan	1973	1975	-	Oct	1	0:00	0	-
@@ -979,7 +983,8 @@ Rule	Jordan	1999	2002	-	Sep	lastThu	0:00s	0	-
 Rule	Jordan	2000	max	-	Mar	lastThu	0:00s	1:00	S
 Rule	Jordan	2003	only	-	Oct	24	0:00s	0	-
 Rule	Jordan	2004	only	-	Oct	15	0:00s	0	-
-Rule	Jordan	2005	max	-	Sep	lastFri	0:00s	0	-
+Rule	Jordan	2005	only	-	Sep	lastFri	0:00s	0	-
+Rule	Jordan	2006	max	-	Oct	lastFri	0:00s	0	-
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Asia/Amman	2:23:44 -	LMT	1931
 			2:00	Jordan	EE%sT
diff --git a/JodaTime/src/java/org/joda/time/tz/src/europe b/JodaTime/src/java/org/joda/time/tz/src/europe
index be44f928a..2166d1311 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/europe
+++ b/JodaTime/src/java/org/joda/time/tz/src/europe
@@ -1,4 +1,4 @@
-# @(#)europe	8.5
+# @(#)europe	8.6
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
@@ -706,7 +706,7 @@ Zone	Europe/Brussels	0:17:30 -	LMT	1880
 			1:00	EU	CE%sT
 
 # Bosnia and Herzegovina
-# see Serbia and Montenegro
+# see Serbia
 
 # Bulgaria
 #
@@ -733,7 +733,7 @@ Zone	Europe/Sofia	1:33:16 -	LMT	1880
 			2:00	EU	EE%sT
 
 # Croatia
-# see Serbia and Montenegro
+# see Serbia
 
 # Cyprus
 # Please see the `asia' file for Asia/Nicosia.
@@ -1513,7 +1513,7 @@ Zone Europe/Luxembourg	0:24:36 -	LMT	1904 Jun
 			1:00	EU	CE%sT
 
 # Macedonia
-# see Serbia and Montenegro
+# see Serbia
 
 # Malta
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
@@ -1570,6 +1570,9 @@ Zone	Europe/Monaco	0:29:32 -	LMT	1891 Mar 15
 			1:00	France	CE%sT	1977
 			1:00	EU	CE%sT
 
+# Montenegro
+# see Serbia
+
 # Netherlands
 
 # Howse writes that the Netherlands' railways used GMT between 1892 and 1940,
@@ -2107,7 +2110,7 @@ Zone Asia/Anadyr	11:49:56 -	LMT	1924 May  2
 			11:00	Russia	ANA%sT	1992 Jan 19 2:00s
 			12:00	Russia	ANA%sT
 
-# Serbia and Montenegro
+# Serbia
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Europe/Belgrade	1:22:00	-	LMT	1884
 			1:00	-	CET	1941 Apr 18 23:00
@@ -2119,6 +2122,7 @@ Zone	Europe/Belgrade	1:22:00	-	LMT	1884
 			1:00	-	CET	1982 Nov 27
 			1:00	EU	CE%sT
 Link Europe/Belgrade Europe/Ljubljana	# Slovenia
+Link Europe/Belgrade Europe/Podgorica	# Montenegro
 Link Europe/Belgrade Europe/Sarajevo	# Bosnia and Herzegovina
 Link Europe/Belgrade Europe/Skopje	# Macedonia
 Link Europe/Belgrade Europe/Zagreb	# Croatia
@@ -2127,7 +2131,7 @@ Link Europe/Belgrade Europe/Zagreb	# Croatia
 Link Europe/Prague Europe/Bratislava
 
 # Slovenia
-# see Serbia and Montenegro
+# see Serbia
 
 # Spain
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
diff --git a/JodaTime/src/java/org/joda/time/tz/src/northamerica b/JodaTime/src/java/org/joda/time/tz/src/northamerica
index 723cf3984..1d686e3a3 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/northamerica
+++ b/JodaTime/src/java/org/joda/time/tz/src/northamerica
@@ -1,4 +1,4 @@
-# @(#)northamerica	8.8
+# @(#)northamerica	8.9
 # <pre>
 
 # also includes Central America and the Caribbean
@@ -2383,12 +2383,19 @@ Zone America/Montserrat	-4:08:52 -	LMT	1911 Jul 1 0:01   # Cork Hill
 # advanced by sixty minutes their official time, yesterday at 2 in the
 # morning, and will stay that way until 30.th. of september.
 #
+# From Jesper Norgaard Welen (2006-09-30):
+# http://www.presidencia.gob.ni/buscador_gaceta/BD/DECRETOS/2006/D-063-2006P-PRN-Cambio-Hora.pdf
+# My informal translation runs:
+# The natural sun time is restored in all the national territory, in that the
+# time is returned one hour at 01:00 am of October 1 of 2006.
+#
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Nic	1979	1980	-	Mar	Sun>=16	0:00	1:00	D
 Rule	Nic	1979	1980	-	Jun	Mon>=23	0:00	0	S
 Rule	Nic	2005	only	-	Apr	10	0:00	1:00	D
-Rule	Nic	2005	2006	-	Oct	Sun>=1	0:00	0	S
+Rule	Nic	2005	only	-	Oct	Sun>=1	0:00	0	S
 Rule	Nic	2006	only	-	Apr	30	2:00	1:00	D
+Rule	Nic	2006	only	-	Oct	Sun>=1	1:00	0	S
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	America/Managua	-5:45:08 -	LMT	1890
 			-5:45:12 -	MMT	1934 Jun 23 # Managua Mean Time?
diff --git a/JodaTime/src/java/org/joda/time/tz/src/southamerica b/JodaTime/src/java/org/joda/time/tz/src/southamerica
index 1c4b8d1c8..d7d7c6518 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/southamerica
+++ b/JodaTime/src/java/org/joda/time/tz/src/southamerica
@@ -1,4 +1,4 @@
-# @(#)southamerica	8.4
+# %W%
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
@@ -428,11 +428,7 @@ Zone	America/La_Paz	-4:32:36 -	LMT	1890
 # The official decrees referenced below are mostly taken from
 # <a href="http://pcdsh01.on.br/DecHV.html">
 # Decretos sobre o Horario de Verao no Brasil
-# </a> (2001-09-20, in Portuguese).
-# The official site for all decrees, including those not related to time, is
-# <a href="http://www.presidencia.gov.br/CCIVIL/decreto/principal_ano.htm">
-# Presidencia da Republica, Subchefia para Assuntos Juridicos, Decretos
-# </a> (in Portuguese).
+# </a>.
 
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 # Decree <a href="http://pcdsh01.on.br/HV20466.htm">20,466</a> (1931-10-01)
@@ -548,7 +544,7 @@ Rule	Brazil	2000	only	-	Feb	27	 0:00	0	-
 # Decree <a href="http://pcdsh01.on.br/figuras/HV3916.gif">3,916</a>
 # (2001-09-13) reestablishes DST in AL, CE, MA, PB, PE, PI, RN, SE.
 Rule	Brazil	2000	2001	-	Oct	Sun>=8	 0:00	1:00	S
-Rule	Brazil	2001	max	-	Feb	Sun>=15	 0:00	0	-
+Rule	Brazil	2001	2006	-	Feb	Sun>=15	 0:00	0	-
 # Decree 4,399 (2002-10-01) repeals DST in AL, CE, MA, PB, PE, PI, RN, SE.
 # <a href="http://www.presidencia.gov.br/CCIVIL/decreto/2002/D4399.htm"></a>
 Rule	Brazil	2002	only	-	Nov	 3	 0:00	1:00	S
@@ -560,10 +556,14 @@ Rule	Brazil	2003	only	-	Oct	19	 0:00	1:00	S
 Rule	Brazil	2004	only	-	Nov	 2	 0:00	1:00	S
 # Decree <a href="http://pcdsh01.on.br/DecHV5539.gif">5,539</a> (2005-09-19),
 # adopted by the same states as before.
-Rule	Brazil	2005	max	-	Oct	Sun>=15	 0:00	1:00	S
+Rule	Brazil	2005	only	-	Oct	16	 0:00	1:00	S
+# Decree <a href="http://www.planalto.gov.br/ccivil_03/_Ato2004-2006/2006/Decreto/D5920.htm">5,920</a>
+# (2006-10-03), adopted by the same states as before.
+Rule	Brazil	2006	max	-	Nov	Sun>=1	 0:00	1:00	S
+Rule	Brazil	2007	max	-	Feb	lastSun	 0:00	0	-
 # The latest ruleset listed above says that the following states observe DST:
 # DF, ES, GO, MG, MS, MT, PR, RJ, RS, SC, SP.
-# For dates after mid-2006, the above rules with TO="max" are guesses
+# For dates after mid-2007, the above rules with TO="max" are guesses
 # and are quite possibly wrong, but are more likely than no DST at all.
 
 

From 9d1583cdfe52999c071b4151455e8c53e2468abb Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 21 Oct 2006 17:00:00 +0000
Subject: [PATCH 25/54] Fix bug where Chronology instances were compared by
 identity instead of equals()

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1139 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  13 +-
 .../src/java/org/joda/time/DateMidnight.java  |  10 ++
 JodaTime/src/java/org/joda/time/DateTime.java |  10 ++
 .../src/java/org/joda/time/LocalDate.java     |  10 ++
 .../src/java/org/joda/time/LocalDateTime.java |  10 ++
 .../src/java/org/joda/time/LocalTime.java     |  10 ++
 .../java/org/joda/time/MutableDateTime.java   |  10 ++
 .../org/joda/time/base/AbstractInstant.java   |  19 +--
 .../org/joda/time/base/AbstractInterval.java  |   7 +-
 .../org/joda/time/base/AbstractPartial.java   |   3 +-
 .../joda/time/chrono/LenientChronology.java   |  35 +++++
 .../org/joda/time/chrono/LimitChronology.java |  54 ++++++-
 .../joda/time/chrono/StrictChronology.java    |  35 +++++
 .../org/joda/time/chrono/ZonedChronology.java |  39 ++++-
 .../field/AbstractPartialFieldProperty.java   |  15 +-
 .../AbstractReadableInstantFieldProperty.java |  32 +++-
 .../java/org/joda/time/field/FieldUtils.java  |  19 +++
 .../test/org/joda/time/TestChronology.java    | 138 ++++++++++++++++++
 .../time/TestDateMidnight_Properties.java     |  31 ++++
 .../joda/time/TestDateTime_Properties.java    |  29 ++++
 .../org/joda/time/TestInterval_Basics.java    |  35 ++++-
 .../org/joda/time/TestLocalDate_Basics.java   |  28 +++-
 .../joda/time/TestLocalDate_Properties.java   |  29 ++++
 .../time/TestYearMonthDay_Properties.java     |  29 ++++
 24 files changed, 610 insertions(+), 40 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 1b534aac0..a9dfedf50 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -32,7 +32,10 @@ Compatibility with 1.3
 ----------------------
 Binary compatible - Yes
 
-Source compatible - Yes
+Source compatible - Yes, except
+  If you subclassed AbstractReadableInstantFieldProperty (unlikely) then
+  you now need to override getChronology() to re-enable the equals() and
+  hashCode() methods.
 
 Serialization compatible - Yes
 
@@ -51,6 +54,14 @@ Bug fixes since 1.3
 - GJChronology
   Text value of ReadablePartial fields was always a decimal number.
 
+- Comparisons of Chronology instances by identity
+  Some comparisons of Chronology instances were performed using ==
+  This worked fine in most cases due to agressive caching, however it failed when
+  using LenientChronology and other wrapping chronologies which do not have caching
+  Comparison is now via equals(), and involved adding equals() methods to a number
+  of classes. In addition, subclasses of AbstractReadableInstantFieldProperty must
+  now implement getChronology().
+
 
 Feedback
 --------
diff --git a/JodaTime/src/java/org/joda/time/DateMidnight.java b/JodaTime/src/java/org/joda/time/DateMidnight.java
index 16a107683..8344f675c 100644
--- a/JodaTime/src/java/org/joda/time/DateMidnight.java
+++ b/JodaTime/src/java/org/joda/time/DateMidnight.java
@@ -1179,6 +1179,16 @@ protected long getMillis() {
             return iInstant.getMillis();
         }
 
+        /**
+         * Gets the chronology of the datetime that this property is linked to.
+         * 
+         * @return the chronology
+         * @since 1.4
+         */
+        protected Chronology getChronology() {
+            return iInstant.getChronology();
+        }
+
         /**
          * Gets the datetime being used.
          * 
diff --git a/JodaTime/src/java/org/joda/time/DateTime.java b/JodaTime/src/java/org/joda/time/DateTime.java
index 14c892ffd..9e834cfba 100644
--- a/JodaTime/src/java/org/joda/time/DateTime.java
+++ b/JodaTime/src/java/org/joda/time/DateTime.java
@@ -1674,6 +1674,16 @@ protected long getMillis() {
             return iInstant.getMillis();
         }
         
+        /**
+         * Gets the chronology of the datetime that this property is linked to.
+         * 
+         * @return the chronology
+         * @since 1.4
+         */
+        protected Chronology getChronology() {
+            return iInstant.getChronology();
+        }
+        
         /**
          * Gets the datetime being used.
          * 
diff --git a/JodaTime/src/java/org/joda/time/LocalDate.java b/JodaTime/src/java/org/joda/time/LocalDate.java
index eaad5e857..b65c5083a 100644
--- a/JodaTime/src/java/org/joda/time/LocalDate.java
+++ b/JodaTime/src/java/org/joda/time/LocalDate.java
@@ -1548,6 +1548,16 @@ protected long getMillis() {
             return iInstant.getLocalMillis();
         }
         
+        /**
+         * Gets the chronology of the datetime that this property is linked to.
+         * 
+         * @return the chronology
+         * @since 1.4
+         */
+        protected Chronology getChronology() {
+            return iInstant.getChronology();
+        }
+        
         /**
          * Gets the LocalDate object linked to this property.
          * 
diff --git a/JodaTime/src/java/org/joda/time/LocalDateTime.java b/JodaTime/src/java/org/joda/time/LocalDateTime.java
index 7b2a60a25..e9c77d11b 100644
--- a/JodaTime/src/java/org/joda/time/LocalDateTime.java
+++ b/JodaTime/src/java/org/joda/time/LocalDateTime.java
@@ -1898,6 +1898,16 @@ protected long getMillis() {
             return iInstant.getLocalMillis();
         }
         
+        /**
+         * Gets the chronology of the datetime that this property is linked to.
+         * 
+         * @return the chronology
+         * @since 1.4
+         */
+        protected Chronology getChronology() {
+            return iInstant.getChronology();
+        }
+        
         /**
          * Gets the LocalDateTime object linked to this property.
          * 
diff --git a/JodaTime/src/java/org/joda/time/LocalTime.java b/JodaTime/src/java/org/joda/time/LocalTime.java
index ceace8b3d..7681cdd63 100644
--- a/JodaTime/src/java/org/joda/time/LocalTime.java
+++ b/JodaTime/src/java/org/joda/time/LocalTime.java
@@ -1254,6 +1254,16 @@ protected long getMillis() {
             return iInstant.getLocalMillis();
         }
         
+        /**
+         * Gets the chronology of the datetime that this property is linked to.
+         * 
+         * @return the chronology
+         * @since 1.4
+         */
+        protected Chronology getChronology() {
+            return iInstant.getChronology();
+        }
+        
         /**
          * Gets the LocalTime object linked to this property.
          * 
diff --git a/JodaTime/src/java/org/joda/time/MutableDateTime.java b/JodaTime/src/java/org/joda/time/MutableDateTime.java
index 0e4782299..577ed95c5 100644
--- a/JodaTime/src/java/org/joda/time/MutableDateTime.java
+++ b/JodaTime/src/java/org/joda/time/MutableDateTime.java
@@ -1227,6 +1227,16 @@ protected long getMillis() {
             return iInstant.getMillis();
         }
         
+        /**
+         * Gets the chronology of the datetime that this property is linked to.
+         * 
+         * @return the chronology
+         * @since 1.4
+         */
+        protected Chronology getChronology() {
+            return iInstant.getChronology();
+        }
+        
         /**
          * Gets the mutable datetime being used.
          * 
diff --git a/JodaTime/src/java/org/joda/time/base/AbstractInstant.java b/JodaTime/src/java/org/joda/time/base/AbstractInstant.java
index 6d6f2a8cb..1af8d1360 100644
--- a/JodaTime/src/java/org/joda/time/base/AbstractInstant.java
+++ b/JodaTime/src/java/org/joda/time/base/AbstractInstant.java
@@ -27,6 +27,7 @@
 import org.joda.time.MutableDateTime;
 import org.joda.time.ReadableInstant;
 import org.joda.time.chrono.ISOChronology;
+import org.joda.time.field.FieldUtils;
 import org.joda.time.format.DateTimeFormatter;
 import org.joda.time.format.ISODateTimeFormat;
 
@@ -252,19 +253,13 @@ public boolean equals(Object readableInstant) {
         if (this == readableInstant) {
             return true;
         }
-        if (readableInstant instanceof ReadableInstant) {
-            ReadableInstant otherInstant = (ReadableInstant) readableInstant;
-            if (getMillis() == otherInstant.getMillis()) {
-                Chronology chrono = getChronology();
-                if (chrono == otherInstant.getChronology()) {
-                    return true;
-                }
-                if (chrono != null && chrono.equals(otherInstant.getChronology())) {
-                    return true;
-                }
-            }
+        if (readableInstant instanceof ReadableInstant == false) {
+            return false;
         }
-        return false;
+        ReadableInstant otherInstant = (ReadableInstant) readableInstant;
+        return
+            getMillis() == otherInstant.getMillis() &&
+            FieldUtils.equals(getChronology(), otherInstant.getChronology());
     }
 
     /**
diff --git a/JodaTime/src/java/org/joda/time/base/AbstractInterval.java b/JodaTime/src/java/org/joda/time/base/AbstractInterval.java
index 2e6fa63c8..26ec67d21 100644
--- a/JodaTime/src/java/org/joda/time/base/AbstractInterval.java
+++ b/JodaTime/src/java/org/joda/time/base/AbstractInterval.java
@@ -453,9 +453,10 @@ public boolean equals(Object readableInterval) {
             return false;
         }
         ReadableInterval other = (ReadableInterval) readableInterval;
-        return (getStartMillis() == other.getStartMillis() &&
-                getEndMillis() == other.getEndMillis() &&
-                getChronology() == other.getChronology());
+        return 
+            getStartMillis() == other.getStartMillis() &&
+            getEndMillis() == other.getEndMillis() &&
+            FieldUtils.equals(getChronology(), other.getChronology());
     }
 
     /**
diff --git a/JodaTime/src/java/org/joda/time/base/AbstractPartial.java b/JodaTime/src/java/org/joda/time/base/AbstractPartial.java
index 662ac9c67..5890ab812 100644
--- a/JodaTime/src/java/org/joda/time/base/AbstractPartial.java
+++ b/JodaTime/src/java/org/joda/time/base/AbstractPartial.java
@@ -23,6 +23,7 @@
 import org.joda.time.DurationFieldType;
 import org.joda.time.ReadableInstant;
 import org.joda.time.ReadablePartial;
+import org.joda.time.field.FieldUtils;
 import org.joda.time.format.DateTimeFormatter;
 
 /**
@@ -266,7 +267,7 @@ public boolean equals(Object partial) {
                 return false;
             }
         }
-        return (getChronology() == other.getChronology());
+        return FieldUtils.equals(getChronology(), other.getChronology());
     }
 
     /**
diff --git a/JodaTime/src/java/org/joda/time/chrono/LenientChronology.java b/JodaTime/src/java/org/joda/time/chrono/LenientChronology.java
index bd9241640..31b0856b7 100644
--- a/JodaTime/src/java/org/joda/time/chrono/LenientChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/LenientChronology.java
@@ -114,6 +114,41 @@ private static final DateTimeField convertField(DateTimeField field) {
         return LenientDateTimeField.getInstance(field);
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * A lenient chronology is only equal to a lenient chronology with the
+     * same base chronology.
+     * 
+     * @param obj  the object to compare to
+     * @return true if equal
+     * @since 1.4
+     */
+    public boolean equals(Object obj) {
+        if (this == obj) {
+            return true;
+        }
+        if (obj instanceof LenientChronology == false) {
+            return false;
+        }
+        LenientChronology chrono = (LenientChronology) obj;
+        return getBase().equals(chrono.getBase());
+    }
+
+    /**
+     * A suitable hashcode for the chronology.
+     * 
+     * @return the hashcode
+     * @since 1.4
+     */
+    public int hashCode() {
+        return 236548278 + getBase().hashCode() * 7;
+    }
+
+    /**
+     * A debugging string for the chronology.
+     * 
+     * @return the debugging string
+     */
     public String toString() {
         return "LenientChronology[" + getBase().toString() + ']';
     }
diff --git a/JodaTime/src/java/org/joda/time/chrono/LimitChronology.java b/JodaTime/src/java/org/joda/time/chrono/LimitChronology.java
index 3c39e758d..cc52fe1a8 100644
--- a/JodaTime/src/java/org/joda/time/chrono/LimitChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/LimitChronology.java
@@ -27,6 +27,7 @@
 import org.joda.time.ReadableDateTime;
 import org.joda.time.field.DecoratedDateTimeField;
 import org.joda.time.field.DecoratedDurationField;
+import org.joda.time.field.FieldUtils;
 import org.joda.time.format.DateTimeFormatter;
 import org.joda.time.format.ISODateTimeFormat;
 
@@ -279,10 +280,6 @@ private DateTimeField convertField(DateTimeField field, HashMap converted) {
         return limitField;
     }
 
-    public String toString() {
-        return getBase().toString();
-    }
-
     void checkLimits(long instant, String desc) {
         DateTime limit;
         if ((limit = iLowerLimit) != null && instant < limit.getMillis()) {
@@ -293,6 +290,55 @@ void checkLimits(long instant, String desc) {
         }
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * A limit chronology is only equal to a limit chronology with the
+     * same base chronology and limits.
+     * 
+     * @param obj  the object to compare to
+     * @return true if equal
+     * @since 1.4
+     */
+    public boolean equals(Object obj) {
+        if (this == obj) {
+            return true;
+        }
+        if (obj instanceof LimitChronology == false) {
+            return false;
+        }
+        LimitChronology chrono = (LimitChronology) obj;
+        return
+            getBase().equals(chrono.getBase()) &&
+            FieldUtils.equals(getLowerLimit(), chrono.getLowerLimit()) &&
+            FieldUtils.equals(getUpperLimit(), chrono.getUpperLimit());
+    }
+
+    /**
+     * A suitable hashcode for the chronology.
+     * 
+     * @return the hashcode
+     * @since 1.4
+     */
+    public int hashCode() {
+        int hash = 317351877;
+        hash += (getLowerLimit() != null ? getLowerLimit().hashCode() : 0);
+        hash += (getUpperLimit() != null ? getUpperLimit().hashCode() : 0);
+        hash += getBase().hashCode() * 7;
+        return hash;
+    }
+
+    /**
+     * A debugging string for the chronology.
+     * 
+     * @return the debugging string
+     */
+    public String toString() {
+        return "LimitChronology[" + getBase().toString() + ", " +
+            (getLowerLimit() == null ? "NoLimit" : getLowerLimit().toString()) + ", " +
+            (getUpperLimit() == null ? "NoLimit" : getUpperLimit().toString()) + ']';
+    }
+
+    //-----------------------------------------------------------------------
     /**
      * Extends IllegalArgumentException such that the exception message is not
      * generated unless it is actually requested.
diff --git a/JodaTime/src/java/org/joda/time/chrono/StrictChronology.java b/JodaTime/src/java/org/joda/time/chrono/StrictChronology.java
index a7a0c8f13..898445d91 100644
--- a/JodaTime/src/java/org/joda/time/chrono/StrictChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/StrictChronology.java
@@ -114,6 +114,41 @@ private static final DateTimeField convertField(DateTimeField field) {
         return StrictDateTimeField.getInstance(field);
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * A strict chronology is only equal to a strict chronology with the
+     * same base chronology.
+     * 
+     * @param obj  the object to compare to
+     * @return true if equal
+     * @since 1.4
+     */
+    public boolean equals(Object obj) {
+        if (this == obj) {
+            return true;
+        }
+        if (obj instanceof StrictChronology == false) {
+            return false;
+        }
+        StrictChronology chrono = (StrictChronology) obj;
+        return getBase().equals(chrono.getBase());
+    }
+
+    /**
+     * A suitable hashcode for the chronology.
+     * 
+     * @return the hashcode
+     * @since 1.4
+     */
+    public int hashCode() {
+        return 352831696 + getBase().hashCode() * 7;
+    }
+
+    /**
+     * A debugging string for the chronology.
+     * 
+     * @return the debugging string
+     */
     public String toString() {
         return "StrictChronology[" + getBase().toString() + ']';
     }
diff --git a/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java b/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java
index b434586f5..f5f487a86 100644
--- a/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java
@@ -224,10 +224,48 @@ private DateTimeField convertField(DateTimeField field, HashMap converted) {
         return zonedField;
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * A zoned chronology is only equal to a zoned chronology with the
+     * same base chronology and zone.
+     * 
+     * @param obj  the object to compare to
+     * @return true if equal
+     * @since 1.4
+     */
+    public boolean equals(Object obj) {
+        if (this == obj) {
+            return true;
+        }
+        if (obj instanceof ZonedChronology == false) {
+            return false;
+        }
+        ZonedChronology chrono = (ZonedChronology) obj;
+        return
+            getBase().equals(chrono.getBase()) &&
+            getZone().equals(chrono.getZone());
+    }
+
+    /**
+     * A suitable hashcode for the chronology.
+     * 
+     * @return the hashcode
+     * @since 1.4
+     */
+    public int hashCode() {
+        return 326565 + getZone().hashCode() * 11 + getBase().hashCode() * 7;
+    }
+
+    /**
+     * A debugging string for the chronology.
+     * 
+     * @return the debugging string
+     */
     public String toString() {
         return "ZonedChronology[" + getBase() + ", " + getZone().getID() + ']';
     }
 
+    //-----------------------------------------------------------------------
     /*
      * Because time durations are typically smaller than time zone offsets, the
      * arithmetic methods subtract the original offset. This produces a more
@@ -235,7 +273,6 @@ public String toString() {
      * the new offset is subtracted off. This behavior, if applied to time
      * fields, can nullify or reverse an add when crossing a transition.
      */
-
     static class ZonedDurationField extends BaseDurationField {
         private static final long serialVersionUID = -485345310999208286L;
 
diff --git a/JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java b/JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java
index 0b1d0030c..7fef6eff1 100644
--- a/JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java
+++ b/JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java
@@ -322,15 +322,14 @@ public boolean equals(Object object) {
         if (this == object) {
             return true;
         }
-        if (object instanceof AbstractPartialFieldProperty) {
-            AbstractPartialFieldProperty other = (AbstractPartialFieldProperty) object;
-            if (get() == other.get() &&
-                getFieldType() == other.getFieldType() &&
-                getReadablePartial().getChronology() == other.getReadablePartial().getChronology()) {
-                return true;
-            }
+        if (object instanceof AbstractPartialFieldProperty == false) {
+            return false;
         }
-        return false;
+        AbstractPartialFieldProperty other = (AbstractPartialFieldProperty) object;
+        return
+            get() == other.get() &&
+            getFieldType() == other.getFieldType() &&
+            FieldUtils.equals(getReadablePartial().getChronology(), other.getReadablePartial().getChronology());
     }
 
     //-----------------------------------------------------------------------
diff --git a/JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java b/JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java
index cabc2ebb8..ad4bdc003 100644
--- a/JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java
+++ b/JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java
@@ -18,6 +18,7 @@
 import java.io.Serializable;
 import java.util.Locale;
 
+import org.joda.time.Chronology;
 import org.joda.time.DateTimeField;
 import org.joda.time.DateTimeFieldType;
 import org.joda.time.DateTimeUtils;
@@ -87,6 +88,21 @@ public String getName() {
      */
     protected abstract long getMillis();
 
+    /**
+     * Gets the chronology of the datetime that this property is linked to.
+     * <p>
+     * This implementation throws UnsupportedOperationException, and must be
+     * implemented by subclasses to enable the equals() and hashCode() methods.
+     * 
+     * @return the chronology
+     * @since 1.4
+     */
+    protected Chronology getChronology() {
+        throw new UnsupportedOperationException(
+                "The method getChronology() was added in v1.4 and needs " +
+                "to be implemented by subclasses of AbstractReadableInstantFieldProperty");
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Gets the value of this property from the instant.
@@ -426,14 +442,14 @@ public boolean equals(Object object) {
         if (this == object) {
             return true;
         }
-        if (object instanceof AbstractReadableInstantFieldProperty) {
-            AbstractReadableInstantFieldProperty other = (AbstractReadableInstantFieldProperty) object;
-            if (get() == other.get() &&
-                getField().equals(other.getField())) {
-                return true;
-            }
+        if (object instanceof AbstractReadableInstantFieldProperty == false) {
+            return false;
         }
-        return false;
+        AbstractReadableInstantFieldProperty other = (AbstractReadableInstantFieldProperty) object;
+        return 
+            get() == other.get() &&
+            getFieldType().equals(other.getFieldType()) &&
+            FieldUtils.equals(getChronology(), other.getChronology());
     }
 
     /**
@@ -442,7 +458,7 @@ public boolean equals(Object object) {
      * @return the hashcode
      */
     public int hashCode() {
-        return get() * 17 + getField().hashCode();
+        return get() * 17 + getFieldType().hashCode() + getChronology().hashCode();
     }
 
     //-----------------------------------------------------------------------
diff --git a/JodaTime/src/java/org/joda/time/field/FieldUtils.java b/JodaTime/src/java/org/joda/time/field/FieldUtils.java
index 7859c3a19..d203e6694 100644
--- a/JodaTime/src/java/org/joda/time/field/FieldUtils.java
+++ b/JodaTime/src/java/org/joda/time/field/FieldUtils.java
@@ -305,4 +305,23 @@ public static int getWrappedValue(int value, int minValue, int maxValue) {
         return (wrapRange - remByRange) + minValue;
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Compares two objects as equals handling null.
+     * 
+     * @param object1  the first object
+     * @param object2  the second object
+     * @return true if equal
+     * @since 1.4
+     */
+    public static boolean equals(Object object1, Object object2) {
+        if (object1 == object2) {
+            return true;
+        }
+        if (object1 == null || object2 == null) {
+            return false;
+        }
+        return object1.equals(object2);
+    }
+
 }
diff --git a/JodaTime/src/test/org/joda/time/TestChronology.java b/JodaTime/src/test/org/joda/time/TestChronology.java
index 74aceacf2..301d72289 100644
--- a/JodaTime/src/test/org/joda/time/TestChronology.java
+++ b/JodaTime/src/test/org/joda/time/TestChronology.java
@@ -23,10 +23,16 @@
 
 import org.joda.time.chrono.BuddhistChronology;
 import org.joda.time.chrono.CopticChronology;
+import org.joda.time.chrono.EthiopicChronology;
 import org.joda.time.chrono.GJChronology;
 import org.joda.time.chrono.GregorianChronology;
 import org.joda.time.chrono.ISOChronology;
+import org.joda.time.chrono.IslamicChronology;
 import org.joda.time.chrono.JulianChronology;
+import org.joda.time.chrono.LenientChronology;
+import org.joda.time.chrono.LimitChronology;
+import org.joda.time.chrono.StrictChronology;
+import org.joda.time.chrono.ZonedChronology;
 
 /**
  * This class is a Junit unit test for Chronology.
@@ -192,4 +198,136 @@ public void testGetCoptic_Zone() {
         assertEquals(CopticChronology.getInstance(), Chronology.getCoptic(null));
     }
 
+    //-----------------------------------------------------------------------
+    public void testEqualsHashCode_ISO() {
+        Chronology chrono1 = ISOChronology.getInstanceUTC();
+        Chronology chrono2 = ISOChronology.getInstanceUTC();
+        Chronology chrono3 = ISOChronology.getInstance();
+        
+        assertEquals(true, chrono1.equals(chrono2));
+        assertEquals(false, chrono1.equals(chrono3));
+        
+        DateTime dt1 = new DateTime(0L, chrono1);
+        DateTime dt2 = new DateTime(0L, chrono2);
+        DateTime dt3 = new DateTime(0L, chrono3);
+        
+        assertEquals(true, dt1.equals(dt2));
+        assertEquals(false, dt1.equals(dt3));
+        
+        assertEquals(true, chrono1.hashCode() == chrono2.hashCode());
+        assertEquals(false, chrono1.hashCode() == chrono3.hashCode());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testEqualsHashCode_Lenient() {
+        Chronology chrono1 = LenientChronology.getInstance(ISOChronology.getInstanceUTC());
+        Chronology chrono2 = LenientChronology.getInstance(ISOChronology.getInstanceUTC());
+        Chronology chrono3 = LenientChronology.getInstance(ISOChronology.getInstance());
+        
+        assertEquals(true, chrono1.equals(chrono2));
+        assertEquals(false, chrono1.equals(chrono3));
+        
+        DateTime dt1 = new DateTime(0L, chrono1);
+        DateTime dt2 = new DateTime(0L, chrono2);
+        DateTime dt3 = new DateTime(0L, chrono3);
+        
+        assertEquals(true, dt1.equals(dt2));
+        assertEquals(false, dt1.equals(dt3));
+        
+        assertEquals(true, chrono1.hashCode() == chrono2.hashCode());
+        assertEquals(false, chrono1.hashCode() == chrono3.hashCode());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testEqualsHashCode_Strict() {
+        Chronology chrono1 = StrictChronology.getInstance(ISOChronology.getInstanceUTC());
+        Chronology chrono2 = StrictChronology.getInstance(ISOChronology.getInstanceUTC());
+        Chronology chrono3 = StrictChronology.getInstance(ISOChronology.getInstance());
+        
+        assertEquals(true, chrono1.equals(chrono2));
+        assertEquals(false, chrono1.equals(chrono3));
+        
+        DateTime dt1 = new DateTime(0L, chrono1);
+        DateTime dt2 = new DateTime(0L, chrono2);
+        DateTime dt3 = new DateTime(0L, chrono3);
+        
+        assertEquals(true, dt1.equals(dt2));
+        assertEquals(false, dt1.equals(dt3));
+        
+        assertEquals(true, chrono1.hashCode() == chrono2.hashCode());
+        assertEquals(false, chrono1.hashCode() == chrono3.hashCode());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testEqualsHashCode_Limit() {
+        DateTime lower = new DateTime(0L);
+        DateTime higherA = new DateTime(1000000L);
+        DateTime higherB = new DateTime(2000000L);
+        
+        Chronology chrono1 = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA);
+        Chronology chrono2A = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherA);
+        Chronology chrono2B = LimitChronology.getInstance(ISOChronology.getInstanceUTC(), lower, higherB);
+        Chronology chrono3 = LimitChronology.getInstance(ISOChronology.getInstance(), lower, higherA);
+        
+        assertEquals(true, chrono1.equals(chrono2A));
+        assertEquals(false, chrono1.equals(chrono2B));
+        assertEquals(false, chrono1.equals(chrono3));
+        
+        DateTime dt1 = new DateTime(0L, chrono1);
+        DateTime dt2A = new DateTime(0L, chrono2A);
+        DateTime dt2B = new DateTime(0L, chrono2B);
+        DateTime dt3 = new DateTime(0L, chrono3);
+        
+        assertEquals(true, dt1.equals(dt2A));
+        assertEquals(false, dt1.equals(dt2B));
+        assertEquals(false, dt1.equals(dt3));
+        
+        assertEquals(true, chrono1.hashCode() == chrono2A.hashCode());
+        assertEquals(false, chrono1.hashCode() == chrono2B.hashCode());
+        assertEquals(false, chrono1.hashCode() == chrono3.hashCode());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testEqualsHashCode_Zoned() {
+        DateTimeZone zoneA = DateTimeZone.forID("Europe/Paris");
+        DateTimeZone zoneB = DateTimeZone.forID("Asia/Tokyo");
+        
+        Chronology chrono1 = ZonedChronology.getInstance(ISOChronology.getInstanceUTC(), zoneA);
+        Chronology chrono2 = ZonedChronology.getInstance(ISOChronology.getInstanceUTC(), zoneA);
+        Chronology chrono3 = ZonedChronology.getInstance(ISOChronology.getInstanceUTC(), zoneB);
+        
+        assertEquals(true, chrono1.equals(chrono2));
+        assertEquals(false, chrono1.equals(chrono3));
+        
+        DateTime dt1 = new DateTime(0L, chrono1);
+        DateTime dt2 = new DateTime(0L, chrono2);
+        DateTime dt3 = new DateTime(0L, chrono3);
+        
+        assertEquals(true, dt1.equals(dt2));
+        assertEquals(false, dt1.equals(dt3));
+        
+        assertEquals(true, chrono1.hashCode() == chrono2.hashCode());
+        assertEquals(false, chrono1.hashCode() == chrono3.hashCode());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToString() {
+        DateTimeZone paris = DateTimeZone.forID("Europe/Paris");
+        ISOChronology isoParis = ISOChronology.getInstance(paris);
+        
+        assertEquals("ISOChronology[Europe/Paris]", isoParis.toString());
+        assertEquals("GJChronology[Europe/Paris]", GJChronology.getInstance(paris).toString());
+        assertEquals("GregorianChronology[Europe/Paris]", GregorianChronology.getInstance(paris).toString());
+        assertEquals("JulianChronology[Europe/Paris]", JulianChronology.getInstance(paris).toString());
+        assertEquals("BuddhistChronology[Europe/Paris]", BuddhistChronology.getInstance(paris).toString());
+        assertEquals("CopticChronology[Europe/Paris]", CopticChronology.getInstance(paris).toString());
+        assertEquals("EthiopicChronology[Europe/Paris]", EthiopicChronology.getInstance(paris).toString());
+        assertEquals("IslamicChronology[Europe/Paris]", IslamicChronology.getInstance(paris).toString());
+        
+        assertEquals("LenientChronology[ISOChronology[Europe/Paris]]", LenientChronology.getInstance(isoParis).toString());
+        assertEquals("StrictChronology[ISOChronology[Europe/Paris]]", StrictChronology.getInstance(isoParis).toString());
+        assertEquals("LimitChronology[ISOChronology[Europe/Paris], NoLimit, NoLimit]", LimitChronology.getInstance(isoParis, null, null).toString());
+        assertEquals("ZonedChronology[ISOChronology[UTC], Europe/Paris]", ZonedChronology.getInstance(isoParis, paris).toString());
+    }
+
 }
diff --git a/JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java b/JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java
index dfb723e99..ab2898fa6 100644
--- a/JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java
+++ b/JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java
@@ -20,6 +20,10 @@
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
 
+import org.joda.time.chrono.CopticChronology;
+import org.joda.time.chrono.LenientChronology;
+import org.joda.time.chrono.StrictChronology;
+
 /**
  * This class is a Junit unit test for DateTime.
  *
@@ -30,6 +34,9 @@
     // Test in 2002/03 as time zones are more well known
     // (before the late 90's they were all over the place)
 
+    private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
+    private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);
+
     //private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
     private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
     
@@ -510,4 +517,28 @@ public void testPropertyToIntervalDayOfMonth() {
       assertEquals(new DateMidnight(2004, 3, 1), febTestInterval.getEnd());
     }
 
+    public void testPropertyEqualsHashCodeLenient() {
+        DateMidnight test1 = new DateMidnight(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS));
+        DateMidnight test2 = new DateMidnight(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS));
+        assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth()));
+        assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth()));
+        assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth()));
+        assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth()));
+        assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());
+        assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode());
+        assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());
+    }
+
+    public void testPropertyEqualsHashCodeStrict() {
+        DateMidnight test1 = new DateMidnight(1970, 6, 9, StrictChronology.getInstance(COPTIC_PARIS));
+        DateMidnight test2 = new DateMidnight(1970, 6, 9, StrictChronology.getInstance(COPTIC_PARIS));
+        assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth()));
+        assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth()));
+        assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth()));
+        assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth()));
+        assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());
+        assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode());
+        assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());
+    }
+
 }
diff --git a/JodaTime/src/test/org/joda/time/TestDateTime_Properties.java b/JodaTime/src/test/org/joda/time/TestDateTime_Properties.java
index 9b4ec2bed..584712967 100644
--- a/JodaTime/src/test/org/joda/time/TestDateTime_Properties.java
+++ b/JodaTime/src/test/org/joda/time/TestDateTime_Properties.java
@@ -21,6 +21,8 @@
 import junit.framework.TestSuite;
 
 import org.joda.time.chrono.CopticChronology;
+import org.joda.time.chrono.LenientChronology;
+import org.joda.time.chrono.StrictChronology;
 
 /**
  * This class is a Junit unit test for DateTime.
@@ -32,6 +34,9 @@
     // Test in 2002/03 as time zones are more well known
     // (before the late 90's they were all over the place)
 
+    private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
+    private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);
+
     //private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
     private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
     
@@ -1350,4 +1355,28 @@ public void testPropertyToIntervalMillisOfSecond() {
       assertEquals(new DateTime(2004, 6, 9, 13, 23, 43, 54), testInterval.getEnd());
     }
 
+    public void testPropertyEqualsHashCodeLenient() {
+        DateTime test1 = new DateTime(1970, 6, 9, 0, 0, 0, 0, LenientChronology.getInstance(COPTIC_PARIS));
+        DateTime test2 = new DateTime(1970, 6, 9, 0, 0, 0, 0, LenientChronology.getInstance(COPTIC_PARIS));
+        assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth()));
+        assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth()));
+        assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth()));
+        assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth()));
+        assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());
+        assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode());
+        assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());
+    }
+
+    public void testPropertyEqualsHashCodeStrict() {
+        DateTime test1 = new DateTime(1970, 6, 9, 0, 0, 0, 0, StrictChronology.getInstance(COPTIC_PARIS));
+        DateTime test2 = new DateTime(1970, 6, 9, 0, 0, 0, 0, StrictChronology.getInstance(COPTIC_PARIS));
+        assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth()));
+        assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth()));
+        assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth()));
+        assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth()));
+        assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());
+        assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode());
+        assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());
+    }
+
 }
diff --git a/JodaTime/src/test/org/joda/time/TestInterval_Basics.java b/JodaTime/src/test/org/joda/time/TestInterval_Basics.java
index 81cf91178..13704c8dd 100644
--- a/JodaTime/src/test/org/joda/time/TestInterval_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestInterval_Basics.java
@@ -30,6 +30,7 @@
 import org.joda.time.chrono.CopticChronology;
 import org.joda.time.chrono.GJChronology;
 import org.joda.time.chrono.ISOChronology;
+import org.joda.time.chrono.LenientChronology;
 
 /**
  * This class is a Junit unit test for Instant.
@@ -182,7 +183,7 @@ public void testEqualsHashCode() {
         assertEquals(true, test1.equals(new MockInterval()));
         assertEquals(false, test1.equals(new DateTime(TEST_TIME1)));
     }
-    
+
     class MockInterval extends AbstractInterval {
         public MockInterval() {
             super();
@@ -198,6 +199,38 @@ public long getEndMillis() {
         }
     }
 
+    public void testEqualsHashCodeLenient() {
+        Interval test1 = new Interval(
+                new DateTime(TEST_TIME1, LenientChronology.getInstance(COPTIC_PARIS)),
+                new DateTime(TEST_TIME2, LenientChronology.getInstance(COPTIC_PARIS)));
+        Interval test2 = new Interval(
+                new DateTime(TEST_TIME1, LenientChronology.getInstance(COPTIC_PARIS)),
+                new DateTime(TEST_TIME2, LenientChronology.getInstance(COPTIC_PARIS)));
+        assertEquals(true, test1.equals(test2));
+        assertEquals(true, test2.equals(test1));
+        assertEquals(true, test1.equals(test1));
+        assertEquals(true, test2.equals(test2));
+        assertEquals(true, test1.hashCode() == test2.hashCode());
+        assertEquals(true, test1.hashCode() == test1.hashCode());
+        assertEquals(true, test2.hashCode() == test2.hashCode());
+    }
+
+    public void testEqualsHashCodeStrict() {
+        Interval test1 = new Interval(
+                new DateTime(TEST_TIME1, LenientChronology.getInstance(COPTIC_PARIS)),
+                new DateTime(TEST_TIME2, LenientChronology.getInstance(COPTIC_PARIS)));
+        Interval test2 = new Interval(
+                new DateTime(TEST_TIME1, LenientChronology.getInstance(COPTIC_PARIS)),
+                new DateTime(TEST_TIME2, LenientChronology.getInstance(COPTIC_PARIS)));
+        assertEquals(true, test1.equals(test2));
+        assertEquals(true, test2.equals(test1));
+        assertEquals(true, test1.equals(test1));
+        assertEquals(true, test2.equals(test2));
+        assertEquals(true, test1.hashCode() == test2.hashCode());
+        assertEquals(true, test1.hashCode() == test1.hashCode());
+        assertEquals(true, test2.hashCode() == test2.hashCode());
+    }
+
     //-----------------------------------------------------------------------
     public void test_useCase_ContainsOverlapAbutGap() {
         // this is a simple test to ensure that the use case of these methods is OK
diff --git a/JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java b/JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java
index cc214f317..8c447f4f6 100644
--- a/JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java
@@ -31,6 +31,8 @@
 import org.joda.time.chrono.GJChronology;
 import org.joda.time.chrono.GregorianChronology;
 import org.joda.time.chrono.ISOChronology;
+import org.joda.time.chrono.LenientChronology;
+import org.joda.time.chrono.StrictChronology;
 import org.joda.time.format.DateTimeFormat;
 import org.joda.time.format.DateTimeFormatter;
 
@@ -245,7 +247,7 @@ public void testEqualsHashCode() {
         assertEquals(true, test1.equals(new YearMonthDay(1970, 6, 9, COPTIC_PARIS)));
         assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE));
     }
-    
+
     class MockInstant extends MockPartial {
         public Chronology getChronology() {
             return COPTIC_UTC;
@@ -262,6 +264,30 @@ public Chronology getChronology() {
         }
     }
 
+    public void testEqualsHashCodeLenient() {
+        LocalDate test1 = new LocalDate(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS));
+        LocalDate test2 = new LocalDate(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS));
+        assertEquals(true, test1.equals(test2));
+        assertEquals(true, test2.equals(test1));
+        assertEquals(true, test1.equals(test1));
+        assertEquals(true, test2.equals(test2));
+        assertEquals(true, test1.hashCode() == test2.hashCode());
+        assertEquals(true, test1.hashCode() == test1.hashCode());
+        assertEquals(true, test2.hashCode() == test2.hashCode());
+    }
+
+    public void testEqualsHashCodeStrict() {
+        LocalDate test1 = new LocalDate(1970, 6, 9, StrictChronology.getInstance(COPTIC_PARIS));
+        LocalDate test2 = new LocalDate(1970, 6, 9, StrictChronology.getInstance(COPTIC_PARIS));
+        assertEquals(true, test1.equals(test2));
+        assertEquals(true, test2.equals(test1));
+        assertEquals(true, test1.equals(test1));
+        assertEquals(true, test2.equals(test2));
+        assertEquals(true, test1.hashCode() == test2.hashCode());
+        assertEquals(true, test1.hashCode() == test1.hashCode());
+        assertEquals(true, test2.hashCode() == test2.hashCode());
+    }
+
     //-----------------------------------------------------------------------
     public void testCompareTo() {
         LocalDate test1 = new LocalDate(2005, 6, 2);
diff --git a/JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java b/JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java
index 69867388c..a8129524c 100644
--- a/JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java
+++ b/JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java
@@ -21,6 +21,8 @@
 import junit.framework.TestSuite;
 
 import org.joda.time.chrono.CopticChronology;
+import org.joda.time.chrono.LenientChronology;
+import org.joda.time.chrono.StrictChronology;
 
 /**
  * This class is a Junit unit test for YearMonthDay.
@@ -29,6 +31,9 @@
  */
 public class TestLocalDate_Properties extends TestCase {
 
+    private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
+    private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);
+
     private long TEST_TIME_NOW =
             (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
             
@@ -511,6 +516,30 @@ public void testPropertyHashCode() {
         assertEquals(true, test1.monthOfYear().hashCode() == test2.monthOfYear().hashCode());
     }
 
+    public void testPropertyEqualsHashCodeLenient() {
+        LocalDate test1 = new LocalDate(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS));
+        LocalDate test2 = new LocalDate(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS));
+        assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth()));
+        assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth()));
+        assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth()));
+        assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth()));
+        assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());
+        assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode());
+        assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());
+    }
+
+    public void testPropertyEqualsHashCodeStrict() {
+        LocalDate test1 = new LocalDate(1970, 6, 9, StrictChronology.getInstance(COPTIC_PARIS));
+        LocalDate test2 = new LocalDate(1970, 6, 9, StrictChronology.getInstance(COPTIC_PARIS));
+        assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth()));
+        assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth()));
+        assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth()));
+        assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth()));
+        assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());
+        assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode());
+        assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());
+    }
+
     //-----------------------------------------------------------------------
     private void check(LocalDate test, int year, int month, int day) {
         assertEquals(year, test.getYear());
diff --git a/JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java b/JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java
index 328eba6d3..d560ec373 100644
--- a/JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java
+++ b/JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java
@@ -21,6 +21,8 @@
 import junit.framework.TestSuite;
 
 import org.joda.time.chrono.CopticChronology;
+import org.joda.time.chrono.LenientChronology;
+import org.joda.time.chrono.StrictChronology;
 
 /**
  * This class is a Junit unit test for YearMonthDay.
@@ -29,6 +31,9 @@
  */
 public class TestYearMonthDay_Properties extends TestCase {
 
+    private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
+    private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);
+
     private long TEST_TIME_NOW =
             (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
             
@@ -514,6 +519,30 @@ public void testPropertyHashCode() {
         assertEquals(true, test1.monthOfYear().hashCode() == test2.monthOfYear().hashCode());
     }
 
+    public void testPropertyEqualsHashCodeLenient() {
+        YearMonthDay test1 = new YearMonthDay(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS));
+        YearMonthDay test2 = new YearMonthDay(1970, 6, 9, LenientChronology.getInstance(COPTIC_PARIS));
+        assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth()));
+        assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth()));
+        assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth()));
+        assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth()));
+        assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());
+        assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode());
+        assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());
+    }
+
+    public void testPropertyEqualsHashCodeStrict() {
+        YearMonthDay test1 = new YearMonthDay(1970, 6, 9, StrictChronology.getInstance(COPTIC_PARIS));
+        YearMonthDay test2 = new YearMonthDay(1970, 6, 9, StrictChronology.getInstance(COPTIC_PARIS));
+        assertEquals(true, test1.dayOfMonth().equals(test2.dayOfMonth()));
+        assertEquals(true, test2.dayOfMonth().equals(test1.dayOfMonth()));
+        assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth()));
+        assertEquals(true, test2.dayOfMonth().equals(test2.dayOfMonth()));
+        assertEquals(true, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());
+        assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode());
+        assertEquals(true, test2.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());
+    }
+
     //-----------------------------------------------------------------------
     private void check(YearMonthDay test, int year, int month, int day) {
         assertEquals(year, test.getYear());

From f0d875fe4ebf2788157dc17b73b7a4b2fa421539 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 21 Oct 2006 17:10:51 +0000
Subject: [PATCH 26/54] Improve Javadoc on single field periods

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1140 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/Period.java | 32 +++++++++++++++------
 1 file changed, 24 insertions(+), 8 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/Period.java b/JodaTime/src/java/org/joda/time/Period.java
index a3267076a..b6122fd97 100644
--- a/JodaTime/src/java/org/joda/time/Period.java
+++ b/JodaTime/src/java/org/joda/time/Period.java
@@ -65,7 +65,9 @@
     //-----------------------------------------------------------------------
     /**
      * Create a period with a specified number of years.
-     * The standard period type is used.
+     * The standard period type is used, thus you can add other fields such
+     * as months or days using the <code>withXxx()</code> methods.
+     * For example, <code>Period.years(2).withMonths(6);</code>
      *
      * @param years  the amount of years in this period
      * @return the period
@@ -76,7 +78,9 @@ public static Period years(int years) {
 
     /**
      * Create a period with a specified number of months.
-     * The standard period type is used.
+     * The standard period type is used, thus you can add other fields such
+     * as years or days using the <code>withXxx()</code> methods.
+     * For example, <code>Period.months(2).withDays(6);</code>
      *
      * @param months  the amount of months in this period
      * @return the period
@@ -87,7 +91,9 @@ public static Period months(int months) {
 
     /**
      * Create a period with a specified number of weeks.
-     * The standard period type is used.
+     * The standard period type is used, thus you can add other fields such
+     * as months or days using the <code>withXxx()</code> methods.
+     * For example, <code>Period.weeks(2).withDays(6);</code>
      *
      * @param weeks  the amount of weeks in this period
      * @return the period
@@ -98,7 +104,9 @@ public static Period weeks(int weeks) {
 
     /**
      * Create a period with a specified number of days.
-     * The standard period type is used.
+     * The standard period type is used, thus you can add other fields such
+     * as months or weeks using the <code>withXxx()</code> methods.
+     * For example, <code>Period.days(2).withHours(6);</code>
      *
      * @param days  the amount of days in this period
      * @return the period
@@ -109,7 +117,9 @@ public static Period days(int days) {
 
     /**
      * Create a period with a specified number of hours.
-     * The standard period type is used.
+     * The standard period type is used, thus you can add other fields such
+     * as months or days using the <code>withXxx()</code> methods.
+     * For example, <code>Period.hours(2).withMinutes(30);</code>
      *
      * @param hours  the amount of hours in this period
      * @return the period
@@ -120,7 +130,9 @@ public static Period hours(int hours) {
 
     /**
      * Create a period with a specified number of minutes.
-     * The standard period type is used.
+     * The standard period type is used, thus you can add other fields such
+     * as days or hours using the <code>withXxx()</code> methods.
+     * For example, <code>Period.minutes(2).withSeconds(30);</code>
      *
      * @param minutes  the amount of minutes in this period
      * @return the period
@@ -131,7 +143,9 @@ public static Period minutes(int minutes) {
 
     /**
      * Create a period with a specified number of seconds.
-     * The standard period type is used.
+     * The standard period type is used, thus you can add other fields such
+     * as days or hours using the <code>withXxx()</code> methods.
+     * For example, <code>Period.seconds(2).withMillis(30);</code>
      *
      * @param seconds  the amount of seconds in this period
      * @return the period
@@ -142,7 +156,9 @@ public static Period seconds(int seconds) {
 
     /**
      * Create a period with a specified number of millis.
-     * The standard period type is used.
+     * The standard period type is used, thus you can add other fields such
+     * as days or hours using the <code>withXxx()</code> methods.
+     * For example, <code>Period.millis(20).withSeconds(30);</code>
      *
      * @param millis  the amount of millis in this period
      * @return the period

From e541f5fd2026976331403541ff93b043d4e130c8 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 21 Oct 2006 17:14:11 +0000
Subject: [PATCH 27/54] Improve Javadoc on single field periods

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1141 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/Period.java | 29 +++++++++++++++++++++
 1 file changed, 29 insertions(+)

diff --git a/JodaTime/src/java/org/joda/time/Period.java b/JodaTime/src/java/org/joda/time/Period.java
index b6122fd97..e4a6624e4 100644
--- a/JodaTime/src/java/org/joda/time/Period.java
+++ b/JodaTime/src/java/org/joda/time/Period.java
@@ -65,9 +65,13 @@
     //-----------------------------------------------------------------------
     /**
      * Create a period with a specified number of years.
+     * <p>
      * The standard period type is used, thus you can add other fields such
      * as months or days using the <code>withXxx()</code> methods.
      * For example, <code>Period.years(2).withMonths(6);</code>
+     * <p>
+     * If you want a year-based period that cannot have other fields added,
+     * then you should consider using {@link Years}.
      *
      * @param years  the amount of years in this period
      * @return the period
@@ -78,9 +82,13 @@ public static Period years(int years) {
 
     /**
      * Create a period with a specified number of months.
+     * <p>
      * The standard period type is used, thus you can add other fields such
      * as years or days using the <code>withXxx()</code> methods.
      * For example, <code>Period.months(2).withDays(6);</code>
+     * <p>
+     * If you want a month-based period that cannot have other fields added,
+     * then you should consider using {@link Months}.
      *
      * @param months  the amount of months in this period
      * @return the period
@@ -91,9 +99,13 @@ public static Period months(int months) {
 
     /**
      * Create a period with a specified number of weeks.
+     * <p>
      * The standard period type is used, thus you can add other fields such
      * as months or days using the <code>withXxx()</code> methods.
      * For example, <code>Period.weeks(2).withDays(6);</code>
+     * <p>
+     * If you want a week-based period that cannot have other fields added,
+     * then you should consider using {@link Weeks}.
      *
      * @param weeks  the amount of weeks in this period
      * @return the period
@@ -104,9 +116,13 @@ public static Period weeks(int weeks) {
 
     /**
      * Create a period with a specified number of days.
+     * <p>
      * The standard period type is used, thus you can add other fields such
      * as months or weeks using the <code>withXxx()</code> methods.
      * For example, <code>Period.days(2).withHours(6);</code>
+     * <p>
+     * If you want a day-based period that cannot have other fields added,
+     * then you should consider using {@link Days}.
      *
      * @param days  the amount of days in this period
      * @return the period
@@ -117,9 +133,13 @@ public static Period days(int days) {
 
     /**
      * Create a period with a specified number of hours.
+     * <p>
      * The standard period type is used, thus you can add other fields such
      * as months or days using the <code>withXxx()</code> methods.
      * For example, <code>Period.hours(2).withMinutes(30);</code>
+     * <p>
+     * If you want a hour-based period that cannot have other fields added,
+     * then you should consider using {@link Hours}.
      *
      * @param hours  the amount of hours in this period
      * @return the period
@@ -130,9 +150,13 @@ public static Period hours(int hours) {
 
     /**
      * Create a period with a specified number of minutes.
+     * <p>
      * The standard period type is used, thus you can add other fields such
      * as days or hours using the <code>withXxx()</code> methods.
      * For example, <code>Period.minutes(2).withSeconds(30);</code>
+     * <p>
+     * If you want a minute-based period that cannot have other fields added,
+     * then you should consider using {@link Minutes}.
      *
      * @param minutes  the amount of minutes in this period
      * @return the period
@@ -143,9 +167,13 @@ public static Period minutes(int minutes) {
 
     /**
      * Create a period with a specified number of seconds.
+     * <p>
      * The standard period type is used, thus you can add other fields such
      * as days or hours using the <code>withXxx()</code> methods.
      * For example, <code>Period.seconds(2).withMillis(30);</code>
+     * <p>
+     * If you want a second-based period that cannot have other fields added,
+     * then you should consider using {@link Seconds}.
      *
      * @param seconds  the amount of seconds in this period
      * @return the period
@@ -156,6 +184,7 @@ public static Period seconds(int seconds) {
 
     /**
      * Create a period with a specified number of millis.
+     * <p>
      * The standard period type is used, thus you can add other fields such
      * as days or hours using the <code>withXxx()</code> methods.
      * For example, <code>Period.millis(20).withSeconds(30);</code>

From 1b5a0893d6414dcfcc3cc56b3a3c648bf57d4be6 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 22 Oct 2006 16:42:32 +0000
Subject: [PATCH 28/54] Add docs on time zone updating

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1142 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/key_chronology.xml |  1 +
 JodaTime/xdocs/timezones.xml      | 42 ++++++++++++++++--------
 JodaTime/xdocs/tz_update.xml      | 54 +++++++++++++++++++++++++++++++
 3 files changed, 83 insertions(+), 14 deletions(-)
 create mode 100644 JodaTime/xdocs/tz_update.xml

diff --git a/JodaTime/xdocs/key_chronology.xml b/JodaTime/xdocs/key_chronology.xml
index 0cc2298f5..137d54731 100644
--- a/JodaTime/xdocs/key_chronology.xml
+++ b/JodaTime/xdocs/key_chronology.xml
@@ -41,6 +41,7 @@ This is applied to the underlying chronology via the decorator design pattern.
 The <a href="apidocs/org/joda/time/DateTimeZone.html">DateTimeZone</a> class provides
 access to the zones via factories, and also supports a default zone concept.
 A full list of time zones can be found <a href="timezones.html">here</a>.
+It is also possible to <a href="tz_update.html">update the zone data</a> yourself.
 </p>
 <p>
 Internally, all the chronology, field and time zone classes are maintained as singletons.
diff --git a/JodaTime/xdocs/timezones.xml b/JodaTime/xdocs/timezones.xml
index 2e59d6b66..4c8245750 100644
--- a/JodaTime/xdocs/timezones.xml
+++ b/JodaTime/xdocs/timezones.xml
@@ -13,8 +13,9 @@
 <p>
 Time zone data is provided by the public <a href="http://www.twinsun.com/tz/tz-link.htm">tz</a>
 database, otherwise known as the Olson database. The following table shows all the time zones
-supported by Joda-Time, using version 2005q of the tz database. This table can be rebuilt
-by running <code>org.joda.example.time.TimeZoneTable</code>.
+supported by Joda-Time, using version 2005n of the tz database.
+It is also possible to update to a <a href="tz_update.html">later version of the database</a>.
+This table can be rebuilt by running <code>org.joda.example.time.TimeZoneTable</code>.
 </p>
 <p>
 <table>
@@ -27,8 +28,9 @@ by running <code>org.joda.example.time.TimeZoneTable</code>.
 <tr><td align="left" valign="top">-11:00</td><td align="left" valign="top">Pacific/Pago_Pago</td><td align="left" valign="top">Pacific/Samoa, US/Samoa</td></tr>
 <tr><td align="left" valign="top">-10:00</td><td align="left" valign="top">America/Adak</td><td align="left" valign="top">America/Atka, US/Aleutian</td></tr>
 <tr><td align="left" valign="top">-10:00</td><td align="left" valign="top">Etc/GMT+10</td><td align="left" valign="top"></td></tr>
+<tr><td align="left" valign="top">-10:00</td><td align="left" valign="top">HST</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-10:00</td><td align="left" valign="top">Pacific/Fakaofo</td><td align="left" valign="top"></td></tr>
-<tr><td align="left" valign="top">-10:00</td><td align="left" valign="top">Pacific/Honolulu</td><td align="left" valign="top">HST, US/Hawaii</td></tr>
+<tr><td align="left" valign="top">-10:00</td><td align="left" valign="top">Pacific/Honolulu</td><td align="left" valign="top">US/Hawaii</td></tr>
 <tr><td align="left" valign="top">-10:00</td><td align="left" valign="top">Pacific/Johnston</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-10:00</td><td align="left" valign="top">Pacific/Rarotonga</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-10:00</td><td align="left" valign="top">Pacific/Tahiti</td><td align="left" valign="top"></td></tr>
@@ -40,55 +42,62 @@ by running <code>org.joda.example.time.TimeZoneTable</code>.
 <tr><td align="left" valign="top">-09:00</td><td align="left" valign="top">Etc/GMT+9</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-09:00</td><td align="left" valign="top">Pacific/Gambier</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-08:00</td><td align="left" valign="top">America/Dawson</td><td align="left" valign="top"></td></tr>
-<tr><td align="left" valign="top">-08:00</td><td align="left" valign="top">America/Los_Angeles</td><td align="left" valign="top">PST8PDT, US/Pacific, US/Pacific-New</td></tr>
+<tr><td align="left" valign="top">-08:00</td><td align="left" valign="top">America/Los_Angeles</td><td align="left" valign="top">US/Pacific, US/Pacific-New</td></tr>
 <tr><td align="left" valign="top">-08:00</td><td align="left" valign="top">America/Tijuana</td><td align="left" valign="top">America/Ensenada, Mexico/BajaNorte</td></tr>
 <tr><td align="left" valign="top">-08:00</td><td align="left" valign="top">America/Vancouver</td><td align="left" valign="top">Canada/Pacific</td></tr>
 <tr><td align="left" valign="top">-08:00</td><td align="left" valign="top">America/Whitehorse</td><td align="left" valign="top">Canada/Yukon</td></tr>
 <tr><td align="left" valign="top">-08:00</td><td align="left" valign="top">Etc/GMT+8</td><td align="left" valign="top"></td></tr>
+<tr><td align="left" valign="top">-08:00</td><td align="left" valign="top">PST8PDT</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-08:00</td><td align="left" valign="top">Pacific/Pitcairn</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-07:00</td><td align="left" valign="top">America/Boise</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-07:00</td><td align="left" valign="top">America/Cambridge_Bay</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-07:00</td><td align="left" valign="top">America/Chihuahua</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-07:00</td><td align="left" valign="top">America/Dawson_Creek</td><td align="left" valign="top"></td></tr>
-<tr><td align="left" valign="top">-07:00</td><td align="left" valign="top">America/Denver</td><td align="left" valign="top">America/Shiprock, MST7MDT, Navajo, US/Mountain</td></tr>
+<tr><td align="left" valign="top">-07:00</td><td align="left" valign="top">America/Denver</td><td align="left" valign="top">America/Shiprock, Navajo, US/Mountain</td></tr>
 <tr><td align="left" valign="top">-07:00</td><td align="left" valign="top">America/Edmonton</td><td align="left" valign="top">Canada/Mountain</td></tr>
 <tr><td align="left" valign="top">-07:00</td><td align="left" valign="top">America/Hermosillo</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-07:00</td><td align="left" valign="top">America/Inuvik</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-07:00</td><td align="left" valign="top">America/Mazatlan</td><td align="left" valign="top">Mexico/BajaSur</td></tr>
-<tr><td align="left" valign="top">-07:00</td><td align="left" valign="top">America/Phoenix</td><td align="left" valign="top">MST, US/Arizona</td></tr>
+<tr><td align="left" valign="top">-07:00</td><td align="left" valign="top">America/Phoenix</td><td align="left" valign="top">US/Arizona</td></tr>
 <tr><td align="left" valign="top">-07:00</td><td align="left" valign="top">America/Yellowknife</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-07:00</td><td align="left" valign="top">Etc/GMT+7</td><td align="left" valign="top"></td></tr>
+<tr><td align="left" valign="top">-07:00</td><td align="left" valign="top">MST</td><td align="left" valign="top"></td></tr>
+<tr><td align="left" valign="top">-07:00</td><td align="left" valign="top">MST7MDT</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-06:00</td><td align="left" valign="top">America/Belize</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-06:00</td><td align="left" valign="top">America/Cancun</td><td align="left" valign="top"></td></tr>
-<tr><td align="left" valign="top">-06:00</td><td align="left" valign="top">America/Chicago</td><td align="left" valign="top">CST6CDT, US/Central</td></tr>
+<tr><td align="left" valign="top">-06:00</td><td align="left" valign="top">America/Chicago</td><td align="left" valign="top">US/Central</td></tr>
 <tr><td align="left" valign="top">-06:00</td><td align="left" valign="top">America/Costa_Rica</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-06:00</td><td align="left" valign="top">America/El_Salvador</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-06:00</td><td align="left" valign="top">America/Guatemala</td><td align="left" valign="top"></td></tr>
+<tr><td align="left" valign="top">-06:00</td><td align="left" valign="top">America/Indiana/Knox</td><td align="left" valign="top">America/Knox_IN, US/Indiana-Starke</td></tr>
+<tr><td align="left" valign="top">-06:00</td><td align="left" valign="top">America/Indiana/Petersburg</td><td align="left" valign="top"></td></tr>
+<tr><td align="left" valign="top">-06:00</td><td align="left" valign="top">America/Indiana/Vincennes</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-06:00</td><td align="left" valign="top">America/Managua</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-06:00</td><td align="left" valign="top">America/Menominee</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-06:00</td><td align="left" valign="top">America/Merida</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-06:00</td><td align="left" valign="top">America/Mexico_City</td><td align="left" valign="top">Mexico/General</td></tr>
 <tr><td align="left" valign="top">-06:00</td><td align="left" valign="top">America/Monterrey</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-06:00</td><td align="left" valign="top">America/North_Dakota/Center</td><td align="left" valign="top"></td></tr>
+<tr><td align="left" valign="top">-06:00</td><td align="left" valign="top">America/North_Dakota/New_Salem</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-06:00</td><td align="left" valign="top">America/Rainy_River</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-06:00</td><td align="left" valign="top">America/Rankin_Inlet</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-06:00</td><td align="left" valign="top">America/Regina</td><td align="left" valign="top">Canada/East-Saskatchewan, Canada/Saskatchewan</td></tr>
 <tr><td align="left" valign="top">-06:00</td><td align="left" valign="top">America/Swift_Current</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-06:00</td><td align="left" valign="top">America/Tegucigalpa</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-06:00</td><td align="left" valign="top">America/Winnipeg</td><td align="left" valign="top">Canada/Central</td></tr>
+<tr><td align="left" valign="top">-06:00</td><td align="left" valign="top">CST6CDT</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-06:00</td><td align="left" valign="top">Etc/GMT+6</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-06:00</td><td align="left" valign="top">Pacific/Easter</td><td align="left" valign="top">Chile/EasterIsland</td></tr>
 <tr><td align="left" valign="top">-06:00</td><td align="left" valign="top">Pacific/Galapagos</td><td align="left" valign="top"></td></tr>
+<tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Atikokan</td><td align="left" valign="top">America/Coral_Harbour</td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Bogota</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Cayman</td><td align="left" valign="top"></td></tr>
-<tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Coral_Harbour</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Detroit</td><td align="left" valign="top">US/Michigan</td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Eirunepe</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Grand_Turk</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Guayaquil</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Havana</td><td align="left" valign="top">Cuba</td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Indiana/Indianapolis</td><td align="left" valign="top">America/Fort_Wayne, America/Indianapolis, US/East-Indiana</td></tr>
-<tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Indiana/Knox</td><td align="left" valign="top">America/Knox_IN, US/Indiana-Starke</td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Indiana/Marengo</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Indiana/Vevay</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Iqaluit</td><td align="left" valign="top"></td></tr>
@@ -98,20 +107,23 @@ by running <code>org.joda.example.time.TimeZoneTable</code>.
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Lima</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Montreal</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Nassau</td><td align="left" valign="top"></td></tr>
-<tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/New_York</td><td align="left" valign="top">EST5EDT, US/Eastern</td></tr>
+<tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/New_York</td><td align="left" valign="top">US/Eastern</td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Nipigon</td><td align="left" valign="top"></td></tr>
-<tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Panama</td><td align="left" valign="top">EST</td></tr>
+<tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Panama</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Pangnirtung</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Port-au-Prince</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Rio_Branco</td><td align="left" valign="top">America/Porto_Acre, Brazil/Acre</td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Thunder_Bay</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Toronto</td><td align="left" valign="top">Canada/Eastern</td></tr>
+<tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">EST</td><td align="left" valign="top"></td></tr>
+<tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">EST5EDT</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">Etc/GMT+5</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-04:00</td><td align="left" valign="top">America/Anguilla</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-04:00</td><td align="left" valign="top">America/Antigua</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-04:00</td><td align="left" valign="top">America/Aruba</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-04:00</td><td align="left" valign="top">America/Asuncion</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-04:00</td><td align="left" valign="top">America/Barbados</td><td align="left" valign="top"></td></tr>
+<tr><td align="left" valign="top">-04:00</td><td align="left" valign="top">America/Blanc-Sablon</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-04:00</td><td align="left" valign="top">America/Boa_Vista</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-04:00</td><td align="left" valign="top">America/Campo_Grande</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-04:00</td><td align="left" valign="top">America/Caracas</td><td align="left" valign="top"></td></tr>
@@ -127,6 +139,7 @@ by running <code>org.joda.example.time.TimeZoneTable</code>.
 <tr><td align="left" valign="top">-04:00</td><td align="left" valign="top">America/La_Paz</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-04:00</td><td align="left" valign="top">America/Manaus</td><td align="left" valign="top">Brazil/West</td></tr>
 <tr><td align="left" valign="top">-04:00</td><td align="left" valign="top">America/Martinique</td><td align="left" valign="top"></td></tr>
+<tr><td align="left" valign="top">-04:00</td><td align="left" valign="top">America/Moncton</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-04:00</td><td align="left" valign="top">America/Montserrat</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-04:00</td><td align="left" valign="top">America/Port_of_Spain</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-04:00</td><td align="left" valign="top">America/Porto_Velho</td><td align="left" valign="top"></td></tr>
@@ -201,7 +214,7 @@ by running <code>org.joda.example.time.TimeZoneTable</code>.
 <tr><td align="left" valign="top">+00:00</td><td align="left" valign="top">Etc/UTC</td><td align="left" valign="top">Etc/Universal, Etc/Zulu, Universal, Zulu</td></tr>
 <tr><td align="left" valign="top">+00:00</td><td align="left" valign="top">Europe/Dublin</td><td align="left" valign="top">Eire</td></tr>
 <tr><td align="left" valign="top">+00:00</td><td align="left" valign="top">Europe/Lisbon</td><td align="left" valign="top">Portugal</td></tr>
-<tr><td align="left" valign="top">+00:00</td><td align="left" valign="top">Europe/London</td><td align="left" valign="top">Europe/Belfast, GB, GB-Eire</td></tr>
+<tr><td align="left" valign="top">+00:00</td><td align="left" valign="top">Europe/London</td><td align="left" valign="top">Europe/Belfast, Europe/Guernsey, Europe/Isle_of_Man, Europe/Jersey, GB, GB-Eire</td></tr>
 <tr><td align="left" valign="top">+00:00</td><td align="left" valign="top">UTC</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+00:00</td><td align="left" valign="top">WET</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+01:00</td><td align="left" valign="top">Africa/Algiers</td><td align="left" valign="top"></td></tr>
@@ -223,7 +236,7 @@ by running <code>org.joda.example.time.TimeZoneTable</code>.
 <tr><td align="left" valign="top">+01:00</td><td align="left" valign="top">Etc/GMT-1</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+01:00</td><td align="left" valign="top">Europe/Amsterdam</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+01:00</td><td align="left" valign="top">Europe/Andorra</td><td align="left" valign="top"></td></tr>
-<tr><td align="left" valign="top">+01:00</td><td align="left" valign="top">Europe/Belgrade</td><td align="left" valign="top">Europe/Ljubljana, Europe/Sarajevo, Europe/Skopje, Europe/Zagreb</td></tr>
+<tr><td align="left" valign="top">+01:00</td><td align="left" valign="top">Europe/Belgrade</td><td align="left" valign="top">Europe/Ljubljana, Europe/Podgorica, Europe/Sarajevo, Europe/Skopje, Europe/Zagreb</td></tr>
 <tr><td align="left" valign="top">+01:00</td><td align="left" valign="top">Europe/Berlin</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+01:00</td><td align="left" valign="top">Europe/Brussels</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+01:00</td><td align="left" valign="top">Europe/Budapest</td><td align="left" valign="top"></td></tr>
@@ -297,6 +310,7 @@ by running <code>org.joda.example.time.TimeZoneTable</code>.
 <tr><td align="left" valign="top">+03:00</td><td align="left" valign="top">Asia/Riyadh</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+03:00</td><td align="left" valign="top">Etc/GMT-3</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+03:00</td><td align="left" valign="top">Europe/Moscow</td><td align="left" valign="top">W-SU</td></tr>
+<tr><td align="left" valign="top">+03:00</td><td align="left" valign="top">Europe/Volgograd</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+03:00</td><td align="left" valign="top">Indian/Antananarivo</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+03:00</td><td align="left" valign="top">Indian/Comoro</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+03:00</td><td align="left" valign="top">Indian/Mayotte</td><td align="left" valign="top"></td></tr>
@@ -325,12 +339,12 @@ by running <code>org.joda.example.time.TimeZoneTable</code>.
 <tr><td align="left" valign="top">+05:00</td><td align="left" valign="top">Indian/Kerguelen</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+05:00</td><td align="left" valign="top">Indian/Maldives</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+05:30</td><td align="left" valign="top">Asia/Calcutta</td><td align="left" valign="top"></td></tr>
+<tr><td align="left" valign="top">+05:30</td><td align="left" valign="top">Asia/Colombo</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+05:45</td><td align="left" valign="top">Asia/Katmandu</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+06:00</td><td align="left" valign="top">Antarctica/Mawson</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+06:00</td><td align="left" valign="top">Antarctica/Vostok</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+06:00</td><td align="left" valign="top">Asia/Almaty</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+06:00</td><td align="left" valign="top">Asia/Bishkek</td><td align="left" valign="top"></td></tr>
-<tr><td align="left" valign="top">+06:00</td><td align="left" valign="top">Asia/Colombo</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+06:00</td><td align="left" valign="top">Asia/Dhaka</td><td align="left" valign="top">Asia/Dacca</td></tr>
 <tr><td align="left" valign="top">+06:00</td><td align="left" valign="top">Asia/Novosibirsk</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+06:00</td><td align="left" valign="top">Asia/Omsk</td><td align="left" valign="top"></td></tr>
diff --git a/JodaTime/xdocs/tz_update.xml b/JodaTime/xdocs/tz_update.xml
new file mode 100644
index 000000000..d241a47b5
--- /dev/null
+++ b/JodaTime/xdocs/tz_update.xml
@@ -0,0 +1,54 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+
+<document>
+
+ <properties>
+  <title>Java date and time API - Time zone update</title>
+  <author email="scolebourne@users.sourceforge.net">Stephen Colebourne</author>
+ </properties>
+
+ <body>
+
+<section name="Time zone updates">
+<p>
+Time zones are a concept driven by the political situation in each country around the world.
+As such, they change frequently, and often at short notice.
+In order to manage this, Joda-Time uses the interationally recognised
+<a href="http://www.twinsun.com/tz/tz-link.htm">tz database</a>, which is also used
+in most operating systems and the JDK itself.
+</p>
+<p>
+Using JDK time zone data is a problem however, as the zones are only updated when the
+JDK is updated. This can cause issues if you are locked into an older version of the JDK.
+</p>
+<p>
+Joda-Time also compiles the time zone data into our jar file. However, the key difference is
+that you can update the raw data and recompile the jar at any time.
+</p>
+</section>
+
+<section name="Updating the time zone data">
+<p>
+Firstly, download the latest version of the data files from
+<a href="http://www.twinsun.com/tz/tz-link.htm">tz database</a>. At the time of writing,
+you need to pick the 'FTP distribution' or 'HTTP mirror' links.
+</p>
+<p>
+Secondly, you need a source code download of Joda-Time, available via
+<a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=104212">sourceforge</a>.
+</p>
+<p>
+Thirdly, you must take the time zone data files from step one, and replace those in the Joda-Time download.
+They are located at <code>{root}/src/java/org/joda/time/tz/src</code>.
+Note that only <i>some</i> of the files need to be copied across.
+</p>
+<p>
+Finally, recompile the Joda-Time jar file using ant.
+Simply type <code>ant jar</code> in the root directory.
+You may want to rename the produced jar file to remind you that it has been updated.
+</p>
+
+</section>
+
+</body>
+</document>

From 28e8aadead68553f2cbc28b07eae948c226bb928 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 22 Oct 2006 16:45:19 +0000
Subject: [PATCH 29/54] Enhance docs for single field periods

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1143 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/index.xml                  | 96 +++++++++++++++--------
 JodaTime/xdocs/stylesheets/joda-theme.css |  3 +
 2 files changed, 65 insertions(+), 34 deletions(-)

diff --git a/JodaTime/xdocs/index.xml b/JodaTime/xdocs/index.xml
index 954be4e25..cc56b79a1 100644
--- a/JodaTime/xdocs/index.xml
+++ b/JodaTime/xdocs/index.xml
@@ -23,17 +23,31 @@ duration, format and parsing.
 <p>
 As a flavour of Joda-Time, here's some example code:
 <source>
-public boolean isRentalOverdue(<b>DateTime</b> datetimeRented) {
-  <b>Period</b> rentalPeriod = Period.days(2);
-  return datetimeRented.plus(rentalPeriod).isBeforeNow()
+public boolean isAfterPayDay(<a href="api-release/index.html?org/joda/time/DateTime.html"><b>DateTime</b></a> datetime) {
+  if (datetime.getMonthOfYear() == 2) {   // February is month 2!!
+    return datetime.getDayOfMonth() > 26;
+  }
+  return datetime.getDayOfMonth() > 28;
 }
-public boolean isJoinedInLastThreeMonths(<b>DateTime</b> datetimeJoined) {
-  <b>Interval</b> last3Months = new Interval(Period.months(3), new DateTime());
-  return last3Months.contains(datetimeJoined);
+public <a href="api-release/index.html?org/joda/time/Days.html"><b>Days</b></a> daysToNewYear(<a href="api-release/index.html?org/joda/time/LocalDate.html"><b>LocalDate</b></a> fromDate) {
+  <a href="api-release/index.html?org/joda/time/LocalDate.html"><b>LocalDate</b></a> newYear = fromDate.plusYears(1).withDayOfYear(1);
+  return <a href="api-release/index.html?org/joda/time/Days.html"><b>Days</b></a>.daysBetween(fromDate, newYear);
+}
+public boolean isRentalOverdue(<a href="api-release/index.html?org/joda/time/DateTime.html"><b>DateTime</b></a> datetimeRented) {
+  <a href="api-release/index.html?org/joda/time/Period.html"><b>Period</b></a> rentalPeriod = new <a href="api-release/index.html?org/joda/time/Period.html"><b>Period</b></a>().withDays(2).withHours(12);
+  return datetimeRented.plus(rentalPeriod).isBeforeNow();
 }
-public String getBirthMonthText(<b>LocalDate</b> dateOfBirth) {
+public boolean isDoubleShift(<a href="api-release/index.html?org/joda/time/LocalTime.html"><b>LocalTime</b></a> startTime, <a href="api-release/index.html?org/joda/time/LocalTime.html"><b>LocalTime</b></a> endTime) {
+  <a href="api-release/index.html?org/joda/time/Hours.html"><b>Hours</b></a> hoursBetween = <a href="api-release/index.html?org/joda/time/Hours.html"><b>Hours</b></a>.hoursBetween(time1, time2);
+  return hoursBetween.getHours() > 8;
+}
+public String getBirthMonthText(<a href="api-release/index.html?org/joda/time/LocalDate.html"><b>LocalDate</b></a> dateOfBirth) {
   return dateOfBirth.monthOfYear().getAsText(Locale.ENGLISH);
 }
+public boolean isJoinedInLastThreeMonths(<a href="api-release/index.html?org/joda/time/DateTime.html"><b>DateTime</b></a> datetimeJoined) {
+  <a href="api-release/index.html?org/joda/time/Interval.html"><b>Interval</b></a> last3Months = new <a href="api-release/index.html?org/joda/time/Interval.html"><b>Interval</b></a>(<a href="api-release/index.html?org/joda/time/Months.html"><b>Months</b></a>.THREE, new <a href="api-release/index.html?org/joda/time/DateTime.html"><b>DateTime</b></a>());
+  return last3Months.contains(datetimeJoined);
+}
 </source>
 Version 1.3 was released on 2006-08-02 -
 <a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=104212">Download now</a>
@@ -48,42 +62,56 @@ The JDK classes Date and Calendar are very badly designed, have had numerous bug
 and have odd performance effects.
 Here are some of our reasons for developing and using Joda-Time:
 <ul>
-<li><b>Easy to Use</b>. Calendar makes accessing 'normal' dates difficult, due to the
-lack of simple methods. Joda-Time has straightforward field accessors.</li>
-<li><b>Easy to Extend</b>. The JDK supports multiple calendar systems via subclasses
-of <code>Calendar</code>.
+<li><b>Easy to Use</b>.
+Calendar makes accessing 'normal' dates difficult, due to the
+lack of simple methods. Joda-Time has straightforward field accessors
+such as <code>getYear()</code> or <code>getDayOfWeek()</code>.</li>
+
+<li><b>Easy to Extend</b>.
+The JDK supports multiple calendar systems via subclasses of <code>Calendar</code>.
 This is clunky, and in practice it is very difficult to write another calendar system.
 Joda-Time supports multiple calendar systems via a pluggable system based on the
 <code>Chronology</code> class.</li>
-<li><b>Comprehensive Feature Set</b>. The library is intended to provide all the
-functionality that is required for date-time calculations. It already provides
-out-of-the-box features, such as support for oddball date formats, which are difficult
-to replicate with the JDK.</li>
 
-<li><b>Up-to-date Time Zone calculations</b>. The timezone implementation is based on
+<li><b>Comprehensive Feature Set</b>.
+The library is intended to provide all the functionality that is required for date-time
+calculations. It already provides out-of-the-box features, such as support for oddball
+date formats, which are difficult to replicate with the JDK.</li>
+
+<li><b>Up-to-date Time Zone calculations</b>.
+The <a href="timezones.html">time zone implementation</a> is based on
 the public <a href="http://www.twinsun.com/tz/tz-link.htm">tz database</a>, which is
 updated several times a year. New Joda-Time releases incorporate all changes
-made to this database. Should the changes be needed earlier, manually updating
-and building Joda-Time is easy.</li>
-<li><b>Calendar support</b>. The library currently provides 8 calendar systems. More
-will be added in the future.</li>
-<li><b>Easy interoperability</b>. The library internally uses a millisecond instant
-which is identical to the JDK and similar to other common time representations. This makes
-interoperability easy, and Joda-Time comes with out-of-the-box JDK interoperability.</li>
-<li><b>Better Performance Characteristics</b>. Calendar has strange performance characteristics
-as it recalculates fields at unexpected moments. Joda-Time does only the minimal
-calculation for the field that is being accessed.</li>
-<li><b>Good Test Coverage</b>. Joda-Time has a comprehensive set of developer tests,
-providing assurance of the library's quality.</li>
-<li><b>Complete Documentation</b>. There is a full
-<a href="userguide.html">User Guide</a> which provides an overview and covers
+made to this database. Should the changes be needed earlier,
+<a href="tz_update.html">manually updating the zone data</a> is easy.</li>
+
+<li><b>Calendar support</b>.
+The library currently provides 8 calendar systems. More will be added in the future.</li>
+
+<li><b>Easy interoperability</b>.
+The library internally uses a millisecond instant which is identical to the JDK and similar
+to other common time representations. This makes interoperability easy, and Joda-Time comes
+with out-of-the-box JDK interoperability.</li>
+
+<li><b>Better Performance Characteristics</b>.
+Calendar has strange performance characteristics as it recalculates fields at unexpected moments.
+Joda-Time does only the minimal calculation for the field that is being accessed.</li>
+
+<li><b>Good Test Coverage</b>.
+Joda-Time has a comprehensive set of developer tests, providing assurance of the library's quality.</li>
+
+<li><b>Complete Documentation</b>.
+There is a full <a href="userguide.html">User Guide</a> which provides an overview and covers
 common usage scenarios. The <a href="api-release/index.html">javadoc</a>
-is extremely detailed and covers most of the API.</li>
-<li><b>Maturity</b>. The library has been under active development since 2002.
+is extremely detailed and covers the rest of the API.</li>
+
+<li><b>Maturity</b>.
+The library has been under active development since 2002.
 Although it continues to be improved with the addition of new features and
 bug-fixes, it is a mature and reliable code base.</li>
-<li><b>Open Source</b>. Joda-Time is licenced under the business friendly
-<a href="license.html">Apache License Version 2.0</a>.</li>
+
+<li><b>Open Source</b>.
+Joda-Time is licenced under the business friendly <a href="license.html">Apache License Version 2.0</a>.</li>
 </ul>
 </p>
 </section>
diff --git a/JodaTime/xdocs/stylesheets/joda-theme.css b/JodaTime/xdocs/stylesheets/joda-theme.css
index 5d616b279..783d38997 100644
--- a/JodaTime/xdocs/stylesheets/joda-theme.css
+++ b/JodaTime/xdocs/stylesheets/joda-theme.css
@@ -23,6 +23,9 @@ a.newWindow, a.newWindow:link, a.newWindow:visited, a.newWindow:active, a.newWin
   background: url(../images/newwindow.png) right center no-repeat;
   padding-right: 18px;
 }
+.source a {
+  color:black;
+}
 h2 {
   font-family: Verdana, Helvetica, Arial, sans-serif;
   padding: 4px 4px 4px 6px;

From 4d329e157c3cc976f93956069f39750a7267b6a4 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 22 Oct 2006 17:08:06 +0000
Subject: [PATCH 30/54] Improve Javadoc links

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1144 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/key_chronology.xml |  8 ++++----
 JodaTime/xdocs/key_duration.xml   |  4 ++--
 JodaTime/xdocs/key_instant.xml    | 12 ++++++------
 JodaTime/xdocs/key_interval.xml   |  6 +++---
 JodaTime/xdocs/key_partial.xml    | 14 +++++++-------
 5 files changed, 22 insertions(+), 22 deletions(-)

diff --git a/JodaTime/xdocs/key_chronology.xml b/JodaTime/xdocs/key_chronology.xml
index 137d54731..6f80b804b 100644
--- a/JodaTime/xdocs/key_chronology.xml
+++ b/JodaTime/xdocs/key_chronology.xml
@@ -27,10 +27,10 @@ think about their actual requirements, which we believe is a Good Thing.
 </p>
 <p>
 The actual calculations of the chronology are split between the
-<a href="apidocs/org/joda/time/Chronology.html">Chronology</a> class itself
+<a href="api-release/index.html?org/joda/time/Chronology.html">Chronology</a> class itself
 and the field classes -
-<a href="apidocs/org/joda/time/DateTimeField.html">DateTimeField</a> and
-<a href="apidocs/org/joda/time/DurationField.html">DurationField</a>.
+<a href="api-release/index.html?org/joda/time/DateTimeField.html">DateTimeField</a> and
+<a href="api-release/index.html?org/joda/time/DurationField.html">DurationField</a>.
 Together, the subclasses of these three classes form the bulk of the code in the library.
 However, most users will never need to use or refer directly to the subclasses.
 Instead, most applications will simply obtain the chronology and use it as a singleton.
@@ -38,7 +38,7 @@ Instead, most applications will simply obtain the chronology and use it as a sin
 <p>
 The chronology class also supports the time zone functionality.
 This is applied to the underlying chronology via the decorator design pattern.
-The <a href="apidocs/org/joda/time/DateTimeZone.html">DateTimeZone</a> class provides
+The <a href="api-release/index.html?org/joda/time/DateTimeZone.html">DateTimeZone</a> class provides
 access to the zones via factories, and also supports a default zone concept.
 A full list of time zones can be found <a href="timezones.html">here</a>.
 It is also possible to <a href="tz_update.html">update the zone data</a> yourself.
diff --git a/JodaTime/xdocs/key_duration.xml b/JodaTime/xdocs/key_duration.xml
index f0002f13f..7408d4fe6 100644
--- a/JodaTime/xdocs/key_duration.xml
+++ b/JodaTime/xdocs/key_duration.xml
@@ -37,10 +37,10 @@ Durations implement <code>Comparable</code> which compares the lengths of the tw
 <section name="Using Durations in Joda-Time">
 <p>
 Within Joda-Time a duration is represented by the
-<a href="apidocs/org/joda/time/ReadableDuration.html">ReadableDuration</a> interface.
+<a href="api-release/index.html?org/joda/time/ReadableDuration.html">ReadableDuration</a> interface.
 There is one implementation of the interface provided:
 <ul>
-<li><a href="apidocs/org/joda/time/Duration.html">Duration</a> -
+<li><a href="api-release/index.html?org/joda/time/Duration.html">Duration</a> -
 An immutable implementation</li>
 </ul>
 </p>
diff --git a/JodaTime/xdocs/key_instant.xml b/JodaTime/xdocs/key_instant.xml
index b339705e1..cf78107a9 100644
--- a/JodaTime/xdocs/key_instant.xml
+++ b/JodaTime/xdocs/key_instant.xml
@@ -41,19 +41,19 @@ you should use the <a href="key_partial.html">partial</a> classes.
 <section name="Using Instants in Joda-Time">
 <p>
 Within Joda-Time an instant is represented by the
-<a href="apidocs/org/joda/time/ReadableInstant.html">ReadableInstant</a> interface.
+<a href="api-release/index.html?org/joda/time/ReadableInstant.html">ReadableInstant</a> interface.
 There are four implementations of the interface provided:
 <ul>
-<li><a href="apidocs/org/joda/time/Instant.html">Instant</a> -
+<li><a href="api-release/index.html?org/joda/time/Instant.html">Instant</a> -
 A simple immutable implementation which is restricted to the UTC time zone
 and is intended for time zone and calendar neutral data transfer</li>
-<li><a href="apidocs/org/joda/time/DateTime.html">DateTime</a> -
+<li><a href="api-release/index.html?org/joda/time/DateTime.html">DateTime</a> -
 The most commonly used class in the library, and an immutable representation of a
 date and time with calendar and time zone</li>
-<li><a href="apidocs/org/joda/time/DateMidnight.html">DateMidnight</a> -
+<li><a href="api-release/index.html?org/joda/time/DateMidnight.html">DateMidnight</a> -
 Similar to <code>DateTime</code> and also immutable but with the time component
 forced to be midnight (at the start of a day)</li>
-<li><a href="apidocs/org/joda/time/MutableDateTime.html">MutableDateTime</a> -
+<li><a href="api-release/index.html?org/joda/time/MutableDateTime.html">MutableDateTime</a> -
 A mutable representation of date and time with calendar and time zone</li>
 </ul>
 We recommend the immutable implementations for general usage.
@@ -87,7 +87,7 @@ Note that the interface <code>ReadableInstant</code> should not be used like the
 The interface only contains the core subset of the operations of <code>DateTime</code>.
 You should use the interface only when you feel the need to be flexible about future changes
 to the object passed into a method.
-You might also want to consider the <a href="apidocs/org/joda/time/ReadableDateTime.html">ReadableDateTime</a>
+You might also want to consider the <a href="api-release/index.html?org/joda/time/ReadableDateTime.html">ReadableDateTime</a>
 interface which extends <code>ReadableInstant</code> to provide additional methods.
 </p>
 
diff --git a/JodaTime/xdocs/key_interval.xml b/JodaTime/xdocs/key_interval.xml
index 8d6b46843..c000f9962 100644
--- a/JodaTime/xdocs/key_interval.xml
+++ b/JodaTime/xdocs/key_interval.xml
@@ -37,11 +37,11 @@ If you want to compare the length of intervals you must obtain the duration of e
 <section name="Using Intervals in Joda-Time">
 <p>
 Within Joda-Time an interval is represented by the
-<a href="apidocs/org/joda/time/ReadableInterval.html">ReadableInterval</a> interface.
+<a href="api-release/index.html?org/joda/time/ReadableInterval.html">ReadableInterval</a> interface.
 There are two implementations of the interface provided:
 <ul>
-<li><a href="apidocs/org/joda/time/Interval.html">Interval</a> - An immutable implementation</li>
-<li><a href="apidocs/org/joda/time/MutableInterval.html">MutableInterval</a> - A mutable implementation</li>
+<li><a href="api-release/index.html?org/joda/time/Interval.html">Interval</a> - An immutable implementation</li>
+<li><a href="api-release/index.html?org/joda/time/MutableInterval.html">MutableInterval</a> - A mutable implementation</li>
 </ul>
 We recommend the immutable implementation for general usage.
 </p>
diff --git a/JodaTime/xdocs/key_partial.xml b/JodaTime/xdocs/key_partial.xml
index 620f43406..0a137141f 100644
--- a/JodaTime/xdocs/key_partial.xml
+++ b/JodaTime/xdocs/key_partial.xml
@@ -56,21 +56,21 @@ It can be thought of as a local date that covers the whole of the day from 00:00
 <section name="Using Partials in Joda-Time">
 <p>
 Within Joda-Time a partial is represented by the
-<a href="apidocs/org/joda/time/ReadablePartial.html">ReadablePartial</a> interface.
+<a href="api-release/index.html?org/joda/time/ReadablePartial.html">ReadablePartial</a> interface.
 There are six implementations of the interface provided:
 <ul>
-<li><a href="apidocs/org/joda/time/LocalDate.html">LocalDate</a> -
+<li><a href="api-release/index.html?org/joda/time/LocalDate.html">LocalDate</a> -
 An immutable implementation that represents a date without a time or time zone.</li>
-<li><a href="apidocs/org/joda/time/LocalTime.html">LocalTime</a> -
+<li><a href="api-release/index.html?org/joda/time/LocalTime.html">LocalTime</a> -
 An immutable implementation that represents a time without a date or time zone.</li>
-<li><a href="apidocs/org/joda/time/LocalDateTime.html">LocalDateTime</a> -
+<li><a href="api-release/index.html?org/joda/time/LocalDateTime.html">LocalDateTime</a> -
 An immutable implementation that represents a datetime without a time zone.</li>
-<li><a href="apidocs/org/joda/time/Partial.html">Partial</a> -
+<li><a href="api-release/index.html?org/joda/time/Partial.html">Partial</a> -
 An immutable implementation that can store any combination of datetime fields.
 For example, using this class you could create a YearMonth or DayOfWeekDayOfMonth partial.</li>
-<li><a href="apidocs/org/joda/time/YearMonthDay.html">YearMonthDay</a> -
+<li><a href="api-release/index.html?org/joda/time/YearMonthDay.html">YearMonthDay</a> -
 Effectively deprecated - only supports the year, monthOfYear and dayOfMonth fields.</li>
-<li><a href="apidocs/org/joda/time/TimeOfDay.html">TimeOfDay</a> -
+<li><a href="api-release/index.html?org/joda/time/TimeOfDay.html">TimeOfDay</a> -
 Effectively deprecated - only supports the hour, minute, second and millisecond fields.</li>
 </ul>
 </p>

From c87ef9683b6a8200a866947602c3d8f9ce544220 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 22 Oct 2006 17:09:16 +0000
Subject: [PATCH 31/54] Enhance docs for single field periods

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1145 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/key_period.xml | 27 ++++++++++++++++++++++-----
 1 file changed, 22 insertions(+), 5 deletions(-)

diff --git a/JodaTime/xdocs/key_period.xml b/JodaTime/xdocs/key_period.xml
index 04d3709ed..694d1b170 100644
--- a/JodaTime/xdocs/key_period.xml
+++ b/JodaTime/xdocs/key_period.xml
@@ -32,7 +32,7 @@ If you had created a duration equal to 24 hours, then you would end up with the
 <p>
 Periods are implemented as a set of <code>int</code> fields.
 The standard set of fields in a period are years, months, weeks, days, hours, minutes, seconds and millis.
-The <a href="apidocs/org/joda/time/PeriodType.html">PeriodType</a> class allows this set
+The <a href="api-release/index.html?org/joda/time/PeriodType.html">PeriodType</a> class allows this set
 of fields to be restricted, for example to elimate weeks.
 This is significant when converting a duration or interval to a period, as the calculation
 needs to know which period fields it should populate.
@@ -56,13 +56,27 @@ In datetime maths you could say:
 <section name="Using Periods in Joda-Time">
 <p>
 Within Joda-Time a period is represented by the
-<a href="apidocs/org/joda/time/ReadablePeriod.html">ReadablePeriod</a> interface.
-There are two implementations of the interface provided:
+<a href="api-release/index.html?org/joda/time/ReadablePeriod.html">ReadablePeriod</a> interface.
+There are nine implementations of the interface provided:
 <ul>
-<li><a href="apidocs/org/joda/time/Period.html">Period</a> -
+<li><a href="api-release/index.html?org/joda/time/Period.html">Period</a> -
 An immutable implementation</li>
-<li><a href="apidocs/org/joda/time/MutablePeriod.html">MutablePeriod</a> -
+<li><a href="api-release/index.html?org/joda/time/MutablePeriod.html">MutablePeriod</a> -
 A mutable implementation</li>
+<li><a href="api-release/index.html?org/joda/time/Years.html">Years</a> -
+An immutable years-only implementation</li>
+<li><a href="api-release/index.html?org/joda/time/Months.html">Months</a> -
+An immutable months-only implementation</li>
+<li><a href="api-release/index.html?org/joda/time/Weeks.html">Weeks</a> -
+An immutable weeks-only implementation</li>
+<li><a href="api-release/index.html?org/joda/time/Days.html">Days</a> -
+An immutable days-only implementation</li>
+<li><a href="api-release/index.html?org/joda/time/Hours.html">Hours</a> -
+An immutable hours-only implementation</li>
+<li><a href="api-release/index.html?org/joda/time/Minutes.html">Minutes</a> -
+An immutable minutes-only implementation</li>
+<li><a href="api-release/index.html?org/joda/time/Seconds.html">Seconds</a> -
+An immutable seconds-only implementation</li>
 </ul>
 We recommend the immutable implementation for general usage.
 </p>
@@ -77,6 +91,9 @@ Period period = new Period(start, end);
 
 // calc will equal end
 DateTime calc = start.plus(period);
+
+// able to calculate whole days between two dates easily
+Days days = Days.daysBetween(start, end);
 </source>
 </p>
 <p>

From d0a3f0ee57784a65b8a5ae8cdc399a5d5f4c36b8 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 22 Oct 2006 18:37:37 +0000
Subject: [PATCH 32/54] Add isGreaterThan/isLessThan methods

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1146 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/Days.java     | 27 +++++++++++++++++++
 JodaTime/src/java/org/joda/time/Hours.java    | 27 +++++++++++++++++++
 JodaTime/src/java/org/joda/time/Minutes.java  | 27 +++++++++++++++++++
 JodaTime/src/java/org/joda/time/Months.java   | 27 +++++++++++++++++++
 JodaTime/src/java/org/joda/time/Seconds.java  | 27 +++++++++++++++++++
 JodaTime/src/java/org/joda/time/Weeks.java    | 27 +++++++++++++++++++
 JodaTime/src/java/org/joda/time/Years.java    | 27 +++++++++++++++++++
 JodaTime/src/test/org/joda/time/TestDays.java | 17 ++++++++++++
 .../src/test/org/joda/time/TestHours.java     | 17 ++++++++++++
 .../src/test/org/joda/time/TestMinutes.java   | 17 ++++++++++++
 .../src/test/org/joda/time/TestMonths.java    | 17 ++++++++++++
 .../src/test/org/joda/time/TestSeconds.java   | 17 ++++++++++++
 .../src/test/org/joda/time/TestWeeks.java     | 17 ++++++++++++
 .../src/test/org/joda/time/TestYears.java     | 17 ++++++++++++
 14 files changed, 308 insertions(+)

diff --git a/JodaTime/src/java/org/joda/time/Days.java b/JodaTime/src/java/org/joda/time/Days.java
index c4be58fce..69526db78 100644
--- a/JodaTime/src/java/org/joda/time/Days.java
+++ b/JodaTime/src/java/org/joda/time/Days.java
@@ -445,6 +445,33 @@ public Days negate() {
         return Days.days(FieldUtils.safeNegate(getValue()));
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Is this days instance greater than the specified number of days.
+     *
+     * @param other  the other period, null means zero
+     * @return true if this days instance is greater than the specified one
+     */
+    public boolean isGreaterThan(Days other) {
+        if (other == null) {
+            return getValue() > 0;
+        }
+        return getValue() > other.getValue();
+    }
+
+    /**
+     * Is this days instance less than the specified number of days.
+     *
+     * @param other  the other period, null means zero
+     * @return true if this days instance is less than the specified one
+     */
+    public boolean isLessThan(Days other) {
+        if (other == null) {
+            return getValue() < 0;
+        }
+        return getValue() < other.getValue();
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Gets this instance as a String in the ISO8601 duration format.
diff --git a/JodaTime/src/java/org/joda/time/Hours.java b/JodaTime/src/java/org/joda/time/Hours.java
index da1d14871..4ff1ea126 100644
--- a/JodaTime/src/java/org/joda/time/Hours.java
+++ b/JodaTime/src/java/org/joda/time/Hours.java
@@ -444,6 +444,33 @@ public Hours negate() {
         return Hours.hours(FieldUtils.safeNegate(getValue()));
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Is this hours instance greater than the specified number of hours.
+     *
+     * @param other  the other period, null means zero
+     * @return true if this hours instance is greater than the specified one
+     */
+    public boolean isGreaterThan(Hours other) {
+        if (other == null) {
+            return getValue() > 0;
+        }
+        return getValue() > other.getValue();
+    }
+
+    /**
+     * Is this hours instance less than the specified number of hours.
+     *
+     * @param other  the other period, null means zero
+     * @return true if this hours instance is less than the specified one
+     */
+    public boolean isLessThan(Hours other) {
+        if (other == null) {
+            return getValue() < 0;
+        }
+        return getValue() < other.getValue();
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Gets this instance as a String in the ISO8601 duration format.
diff --git a/JodaTime/src/java/org/joda/time/Minutes.java b/JodaTime/src/java/org/joda/time/Minutes.java
index 07c70d05d..9b258ca65 100644
--- a/JodaTime/src/java/org/joda/time/Minutes.java
+++ b/JodaTime/src/java/org/joda/time/Minutes.java
@@ -425,6 +425,33 @@ public Minutes negate() {
         return Minutes.minutes(FieldUtils.safeNegate(getValue()));
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Is this minutes instance greater than the specified number of minutes.
+     *
+     * @param other  the other period, null means zero
+     * @return true if this minutes instance is greater than the specified one
+     */
+    public boolean isGreaterThan(Minutes other) {
+        if (other == null) {
+            return getValue() > 0;
+        }
+        return getValue() > other.getValue();
+    }
+
+    /**
+     * Is this minutes instance less than the specified number of minutes.
+     *
+     * @param other  the other period, null means zero
+     * @return true if this minutes instance is less than the specified one
+     */
+    public boolean isLessThan(Minutes other) {
+        if (other == null) {
+            return getValue() < 0;
+        }
+        return getValue() < other.getValue();
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Gets this instance as a String in the ISO8601 duration format.
diff --git a/JodaTime/src/java/org/joda/time/Months.java b/JodaTime/src/java/org/joda/time/Months.java
index c1ccf32f7..44ceb2c9d 100644
--- a/JodaTime/src/java/org/joda/time/Months.java
+++ b/JodaTime/src/java/org/joda/time/Months.java
@@ -351,6 +351,33 @@ public Months negate() {
         return Months.months(FieldUtils.safeNegate(getValue()));
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Is this months instance greater than the specified number of months.
+     *
+     * @param other  the other period, null means zero
+     * @return true if this months instance is greater than the specified one
+     */
+    public boolean isGreaterThan(Months other) {
+        if (other == null) {
+            return getValue() > 0;
+        }
+        return getValue() > other.getValue();
+    }
+
+    /**
+     * Is this months instance less than the specified number of months.
+     *
+     * @param other  the other period, null means zero
+     * @return true if this months instance is less than the specified one
+     */
+    public boolean isLessThan(Months other) {
+        if (other == null) {
+            return getValue() < 0;
+        }
+        return getValue() < other.getValue();
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Gets this instance as a String in the ISO8601 duration format.
diff --git a/JodaTime/src/java/org/joda/time/Seconds.java b/JodaTime/src/java/org/joda/time/Seconds.java
index 94e9107b7..b0608e1ac 100644
--- a/JodaTime/src/java/org/joda/time/Seconds.java
+++ b/JodaTime/src/java/org/joda/time/Seconds.java
@@ -425,6 +425,33 @@ public Seconds negate() {
         return Seconds.seconds(FieldUtils.safeNegate(getValue()));
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Is this seconds instance greater than the specified number of seconds.
+     *
+     * @param other  the other period, null means zero
+     * @return true if this seconds instance is greater than the specified one
+     */
+    public boolean isGreaterThan(Seconds other) {
+        if (other == null) {
+            return getValue() > 0;
+        }
+        return getValue() > other.getValue();
+    }
+
+    /**
+     * Is this seconds instance less than the specified number of seconds.
+     *
+     * @param other  the other period, null means zero
+     * @return true if this seconds instance is less than the specified one
+     */
+    public boolean isLessThan(Seconds other) {
+        if (other == null) {
+            return getValue() < 0;
+        }
+        return getValue() < other.getValue();
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Gets this instance as a String in the ISO8601 duration format.
diff --git a/JodaTime/src/java/org/joda/time/Weeks.java b/JodaTime/src/java/org/joda/time/Weeks.java
index ab706369d..2105a1287 100644
--- a/JodaTime/src/java/org/joda/time/Weeks.java
+++ b/JodaTime/src/java/org/joda/time/Weeks.java
@@ -431,6 +431,33 @@ public Weeks negate() {
         return Weeks.weeks(FieldUtils.safeNegate(getValue()));
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Is this weeks instance greater than the specified number of weeks.
+     *
+     * @param other  the other period, null means zero
+     * @return true if this weeks instance is greater than the specified one
+     */
+    public boolean isGreaterThan(Weeks other) {
+        if (other == null) {
+            return getValue() > 0;
+        }
+        return getValue() > other.getValue();
+    }
+
+    /**
+     * Is this weeks instance less than the specified number of weeks.
+     *
+     * @param other  the other period, null means zero
+     * @return true if this weeks instance is less than the specified one
+     */
+    public boolean isLessThan(Weeks other) {
+        if (other == null) {
+            return getValue() < 0;
+        }
+        return getValue() < other.getValue();
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Gets this instance as a String in the ISO8601 duration format.
diff --git a/JodaTime/src/java/org/joda/time/Years.java b/JodaTime/src/java/org/joda/time/Years.java
index 68a0fef2f..97073ef8d 100644
--- a/JodaTime/src/java/org/joda/time/Years.java
+++ b/JodaTime/src/java/org/joda/time/Years.java
@@ -315,6 +315,33 @@ public Years negate() {
         return Years.years(FieldUtils.safeNegate(getValue()));
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Is this years instance greater than the specified number of years.
+     *
+     * @param other  the other period, null means zero
+     * @return true if this years instance is greater than the specified one
+     */
+    public boolean isGreaterThan(Years other) {
+        if (other == null) {
+            return getValue() > 0;
+        }
+        return getValue() > other.getValue();
+    }
+
+    /**
+     * Is this years instance less than the specified number of years.
+     *
+     * @param other  the other period, null means zero
+     * @return true if this years instance is less than the specified one
+     */
+    public boolean isLessThan(Years other) {
+        if (other == null) {
+            return getValue() < 0;
+        }
+        return getValue() < other.getValue();
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Gets this instance as a String in the ISO8601 duration format.
diff --git a/JodaTime/src/test/org/joda/time/TestDays.java b/JodaTime/src/test/org/joda/time/TestDays.java
index 5616cb7c6..bc0259027 100644
--- a/JodaTime/src/test/org/joda/time/TestDays.java
+++ b/JodaTime/src/test/org/joda/time/TestDays.java
@@ -173,6 +173,23 @@ public void testGetPeriodType() {
         assertEquals(PeriodType.days(), test.getPeriodType());
     }
 
+    //-----------------------------------------------------------------------
+    public void testIsGreaterThan() {
+        assertEquals(true, Days.THREE.isGreaterThan(Days.TWO));
+        assertEquals(false, Days.THREE.isGreaterThan(Days.THREE));
+        assertEquals(false, Days.TWO.isGreaterThan(Days.THREE));
+        assertEquals(true, Days.ONE.isGreaterThan(null));
+        assertEquals(false, Days.days(-1).isGreaterThan(null));
+    }
+
+    public void testIsLessThan() {
+        assertEquals(false, Days.THREE.isLessThan(Days.TWO));
+        assertEquals(false, Days.THREE.isLessThan(Days.THREE));
+        assertEquals(true, Days.TWO.isLessThan(Days.THREE));
+        assertEquals(false, Days.ONE.isLessThan(null));
+        assertEquals(true, Days.days(-1).isLessThan(null));
+    }
+
     //-----------------------------------------------------------------------
     public void testToString() {
         Days test = Days.days(20);
diff --git a/JodaTime/src/test/org/joda/time/TestHours.java b/JodaTime/src/test/org/joda/time/TestHours.java
index eb825948d..c5c8ab47a 100644
--- a/JodaTime/src/test/org/joda/time/TestHours.java
+++ b/JodaTime/src/test/org/joda/time/TestHours.java
@@ -175,6 +175,23 @@ public void testGetPeriodType() {
         assertEquals(PeriodType.hours(), test.getPeriodType());
     }
 
+    //-----------------------------------------------------------------------
+    public void testIsGreaterThan() {
+        assertEquals(true, Hours.THREE.isGreaterThan(Hours.TWO));
+        assertEquals(false, Hours.THREE.isGreaterThan(Hours.THREE));
+        assertEquals(false, Hours.TWO.isGreaterThan(Hours.THREE));
+        assertEquals(true, Hours.ONE.isGreaterThan(null));
+        assertEquals(false, Hours.hours(-1).isGreaterThan(null));
+    }
+
+    public void testIsLessThan() {
+        assertEquals(false, Hours.THREE.isLessThan(Hours.TWO));
+        assertEquals(false, Hours.THREE.isLessThan(Hours.THREE));
+        assertEquals(true, Hours.TWO.isLessThan(Hours.THREE));
+        assertEquals(false, Hours.ONE.isLessThan(null));
+        assertEquals(true, Hours.hours(-1).isLessThan(null));
+    }
+
     //-----------------------------------------------------------------------
     public void testToString() {
         Hours test = Hours.hours(20);
diff --git a/JodaTime/src/test/org/joda/time/TestMinutes.java b/JodaTime/src/test/org/joda/time/TestMinutes.java
index c48e1b898..57d3a4677 100644
--- a/JodaTime/src/test/org/joda/time/TestMinutes.java
+++ b/JodaTime/src/test/org/joda/time/TestMinutes.java
@@ -165,6 +165,23 @@ public void testGetPeriodType() {
         assertEquals(PeriodType.minutes(), test.getPeriodType());
     }
 
+    //-----------------------------------------------------------------------
+    public void testIsGreaterThan() {
+        assertEquals(true, Minutes.THREE.isGreaterThan(Minutes.TWO));
+        assertEquals(false, Minutes.THREE.isGreaterThan(Minutes.THREE));
+        assertEquals(false, Minutes.TWO.isGreaterThan(Minutes.THREE));
+        assertEquals(true, Minutes.ONE.isGreaterThan(null));
+        assertEquals(false, Minutes.minutes(-1).isGreaterThan(null));
+    }
+
+    public void testIsLessThan() {
+        assertEquals(false, Minutes.THREE.isLessThan(Minutes.TWO));
+        assertEquals(false, Minutes.THREE.isLessThan(Minutes.THREE));
+        assertEquals(true, Minutes.TWO.isLessThan(Minutes.THREE));
+        assertEquals(false, Minutes.ONE.isLessThan(null));
+        assertEquals(true, Minutes.minutes(-1).isLessThan(null));
+    }
+
     //-----------------------------------------------------------------------
     public void testToString() {
         Minutes test = Minutes.minutes(20);
diff --git a/JodaTime/src/test/org/joda/time/TestMonths.java b/JodaTime/src/test/org/joda/time/TestMonths.java
index b634f373c..f422e9700 100644
--- a/JodaTime/src/test/org/joda/time/TestMonths.java
+++ b/JodaTime/src/test/org/joda/time/TestMonths.java
@@ -165,6 +165,23 @@ public void testGetPeriodType() {
         assertEquals(PeriodType.months(), test.getPeriodType());
     }
 
+    //-----------------------------------------------------------------------
+    public void testIsGreaterThan() {
+        assertEquals(true, Months.THREE.isGreaterThan(Months.TWO));
+        assertEquals(false, Months.THREE.isGreaterThan(Months.THREE));
+        assertEquals(false, Months.TWO.isGreaterThan(Months.THREE));
+        assertEquals(true, Months.ONE.isGreaterThan(null));
+        assertEquals(false, Months.months(-1).isGreaterThan(null));
+    }
+
+    public void testIsLessThan() {
+        assertEquals(false, Months.THREE.isLessThan(Months.TWO));
+        assertEquals(false, Months.THREE.isLessThan(Months.THREE));
+        assertEquals(true, Months.TWO.isLessThan(Months.THREE));
+        assertEquals(false, Months.ONE.isLessThan(null));
+        assertEquals(true, Months.months(-1).isLessThan(null));
+    }
+
     //-----------------------------------------------------------------------
     public void testToString() {
         Months test = Months.months(20);
diff --git a/JodaTime/src/test/org/joda/time/TestSeconds.java b/JodaTime/src/test/org/joda/time/TestSeconds.java
index 5d083f76c..2ac69a470 100644
--- a/JodaTime/src/test/org/joda/time/TestSeconds.java
+++ b/JodaTime/src/test/org/joda/time/TestSeconds.java
@@ -162,6 +162,23 @@ public void testGetPeriodType() {
         assertEquals(PeriodType.seconds(), test.getPeriodType());
     }
 
+    //-----------------------------------------------------------------------
+    public void testIsGreaterThan() {
+        assertEquals(true, Seconds.THREE.isGreaterThan(Seconds.TWO));
+        assertEquals(false, Seconds.THREE.isGreaterThan(Seconds.THREE));
+        assertEquals(false, Seconds.TWO.isGreaterThan(Seconds.THREE));
+        assertEquals(true, Seconds.ONE.isGreaterThan(null));
+        assertEquals(false, Seconds.seconds(-1).isGreaterThan(null));
+    }
+
+    public void testIsLessThan() {
+        assertEquals(false, Seconds.THREE.isLessThan(Seconds.TWO));
+        assertEquals(false, Seconds.THREE.isLessThan(Seconds.THREE));
+        assertEquals(true, Seconds.TWO.isLessThan(Seconds.THREE));
+        assertEquals(false, Seconds.ONE.isLessThan(null));
+        assertEquals(true, Seconds.seconds(-1).isLessThan(null));
+    }
+
     //-----------------------------------------------------------------------
     public void testToString() {
         Seconds test = Seconds.seconds(20);
diff --git a/JodaTime/src/test/org/joda/time/TestWeeks.java b/JodaTime/src/test/org/joda/time/TestWeeks.java
index ed31f5352..1c7c7315c 100644
--- a/JodaTime/src/test/org/joda/time/TestWeeks.java
+++ b/JodaTime/src/test/org/joda/time/TestWeeks.java
@@ -164,6 +164,23 @@ public void testGetPeriodType() {
         assertEquals(PeriodType.weeks(), test.getPeriodType());
     }
 
+    //-----------------------------------------------------------------------
+    public void testIsGreaterThan() {
+        assertEquals(true, Weeks.THREE.isGreaterThan(Weeks.TWO));
+        assertEquals(false, Weeks.THREE.isGreaterThan(Weeks.THREE));
+        assertEquals(false, Weeks.TWO.isGreaterThan(Weeks.THREE));
+        assertEquals(true, Weeks.ONE.isGreaterThan(null));
+        assertEquals(false, Weeks.weeks(-1).isGreaterThan(null));
+    }
+
+    public void testIsLessThan() {
+        assertEquals(false, Weeks.THREE.isLessThan(Weeks.TWO));
+        assertEquals(false, Weeks.THREE.isLessThan(Weeks.THREE));
+        assertEquals(true, Weeks.TWO.isLessThan(Weeks.THREE));
+        assertEquals(false, Weeks.ONE.isLessThan(null));
+        assertEquals(true, Weeks.weeks(-1).isLessThan(null));
+    }
+
     //-----------------------------------------------------------------------
     public void testToString() {
         Weeks test = Weeks.weeks(20);
diff --git a/JodaTime/src/test/org/joda/time/TestYears.java b/JodaTime/src/test/org/joda/time/TestYears.java
index 94d43b369..92680ba49 100644
--- a/JodaTime/src/test/org/joda/time/TestYears.java
+++ b/JodaTime/src/test/org/joda/time/TestYears.java
@@ -147,6 +147,23 @@ public void testGetPeriodType() {
         assertEquals(PeriodType.years(), test.getPeriodType());
     }
 
+    //-----------------------------------------------------------------------
+    public void testIsGreaterThan() {
+        assertEquals(true, Years.THREE.isGreaterThan(Years.TWO));
+        assertEquals(false, Years.THREE.isGreaterThan(Years.THREE));
+        assertEquals(false, Years.TWO.isGreaterThan(Years.THREE));
+        assertEquals(true, Years.ONE.isGreaterThan(null));
+        assertEquals(false, Years.years(-1).isGreaterThan(null));
+    }
+
+    public void testIsLessThan() {
+        assertEquals(false, Years.THREE.isLessThan(Years.TWO));
+        assertEquals(false, Years.THREE.isLessThan(Years.THREE));
+        assertEquals(true, Years.TWO.isLessThan(Years.THREE));
+        assertEquals(false, Years.ONE.isLessThan(null));
+        assertEquals(true, Years.years(-1).isLessThan(null));
+    }
+
     //-----------------------------------------------------------------------
     public void testToString() {
         Years test = Years.years(20);

From 6386a8d39371d4680458e1be4e4005dc46cb74cb Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 22 Oct 2006 18:44:57 +0000
Subject: [PATCH 33/54] Update example with isGreaterThan method

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1147 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/index.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/JodaTime/xdocs/index.xml b/JodaTime/xdocs/index.xml
index cc56b79a1..1c8f89651 100644
--- a/JodaTime/xdocs/index.xml
+++ b/JodaTime/xdocs/index.xml
@@ -39,7 +39,7 @@ public boolean isRentalOverdue(<a href="api-release/index.html?org/joda/time/Dat
 }
 public boolean isDoubleShift(<a href="api-release/index.html?org/joda/time/LocalTime.html"><b>LocalTime</b></a> startTime, <a href="api-release/index.html?org/joda/time/LocalTime.html"><b>LocalTime</b></a> endTime) {
   <a href="api-release/index.html?org/joda/time/Hours.html"><b>Hours</b></a> hoursBetween = <a href="api-release/index.html?org/joda/time/Hours.html"><b>Hours</b></a>.hoursBetween(time1, time2);
-  return hoursBetween.getHours() > 8;
+  return hoursBetween.isGreaterThan(<a href="api-release/index.html?org/joda/time/Hours.html"><b>Hours</b></a>.EIGHT);
 }
 public String getBirthMonthText(<a href="api-release/index.html?org/joda/time/LocalDate.html"><b>LocalDate</b></a> dateOfBirth) {
   return dateOfBirth.monthOfYear().getAsText(Locale.ENGLISH);

From 12c4a5df512cf8c7fc90a817ea7449c86bd76566 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 31 Oct 2006 23:20:52 +0000
Subject: [PATCH 34/54] Basic obfuscation of email addresses

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1148 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/cal_buddhist.xml   |  2 +-
 JodaTime/xdocs/cal_coptic.xml     |  2 +-
 JodaTime/xdocs/cal_ethiopic.xml   |  2 +-
 JodaTime/xdocs/cal_gj.xml         |  2 +-
 JodaTime/xdocs/cal_gregorian.xml  |  2 +-
 JodaTime/xdocs/cal_islamic.xml    |  2 +-
 JodaTime/xdocs/cal_iso.xml        |  2 +-
 JodaTime/xdocs/cal_julian.xml     |  2 +-
 JodaTime/xdocs/faq.xml            |  6 +++---
 JodaTime/xdocs/field.xml          |  2 +-
 JodaTime/xdocs/index.xml          | 11 +++++------
 JodaTime/xdocs/installation.xml   |  2 +-
 JodaTime/xdocs/key_chronology.xml |  2 +-
 JodaTime/xdocs/key_duration.xml   |  2 +-
 JodaTime/xdocs/key_instant.xml    |  2 +-
 JodaTime/xdocs/key_interval.xml   |  2 +-
 JodaTime/xdocs/key_partial.xml    |  2 +-
 JodaTime/xdocs/key_period.xml     |  2 +-
 JodaTime/xdocs/quickstart.xml     |  2 +-
 JodaTime/xdocs/tasks.xml          |  5 +++--
 JodaTime/xdocs/timezones.xml      |  2 +-
 JodaTime/xdocs/tz_update.xml      |  2 +-
 JodaTime/xdocs/upgradeto099.xml   |  6 +++---
 JodaTime/xdocs/upgradeto100.xml   |  2 +-
 JodaTime/xdocs/upgradeto110.xml   |  4 ++--
 JodaTime/xdocs/upgradeto120.xml   |  2 +-
 JodaTime/xdocs/upgradeto121.xml   |  2 +-
 JodaTime/xdocs/upgradeto130.xml   |  2 +-
 JodaTime/xdocs/userguide.xml      |  4 ++--
 29 files changed, 41 insertions(+), 41 deletions(-)

diff --git a/JodaTime/xdocs/cal_buddhist.xml b/JodaTime/xdocs/cal_buddhist.xml
index 03add5a0f..1ffc4552c 100644
--- a/JodaTime/xdocs/cal_buddhist.xml
+++ b/JodaTime/xdocs/cal_buddhist.xml
@@ -4,7 +4,7 @@
 
  <properties>
   <title>Java date and time API - Buddhist calendar system</title>
-  <author email="scolebourne@users.sourceforge.net">Stephen Colebourne</author>
+  <author email="scolebourne.at.users.sourceforge.net">Stephen Colebourne</author>
  </properties>
 
  <body>
diff --git a/JodaTime/xdocs/cal_coptic.xml b/JodaTime/xdocs/cal_coptic.xml
index 842dea826..edf2dcc01 100644
--- a/JodaTime/xdocs/cal_coptic.xml
+++ b/JodaTime/xdocs/cal_coptic.xml
@@ -4,7 +4,7 @@
 
  <properties>
   <title>Java date and time API - Coptic calendar system</title>
-  <author email="scolebourne@users.sourceforge.net">Stephen Colebourne</author>
+  <author email="scolebourne.at.users.sourceforge.net">Stephen Colebourne</author>
  </properties>
 
  <body>
diff --git a/JodaTime/xdocs/cal_ethiopic.xml b/JodaTime/xdocs/cal_ethiopic.xml
index f717019fe..46cfb225d 100644
--- a/JodaTime/xdocs/cal_ethiopic.xml
+++ b/JodaTime/xdocs/cal_ethiopic.xml
@@ -4,7 +4,7 @@
 
  <properties>
   <title>Java date and time API - Coptic calendar system</title>
-  <author email="scolebourne@users.sourceforge.net">Stephen Colebourne</author>
+  <author email="scolebourne.at.users.sourceforge.net">Stephen Colebourne</author>
  </properties>
 
  <body>
diff --git a/JodaTime/xdocs/cal_gj.xml b/JodaTime/xdocs/cal_gj.xml
index b26be26eb..054e85f2a 100644
--- a/JodaTime/xdocs/cal_gj.xml
+++ b/JodaTime/xdocs/cal_gj.xml
@@ -4,7 +4,7 @@
 
  <properties>
   <title>Java date and time API - GregorianJulian (GJ) calendar system</title>
-  <author email="scolebourne@users.sourceforge.net">Stephen Colebourne</author>
+  <author email="scolebourne.at.users.sourceforge.net">Stephen Colebourne</author>
  </properties>
 
  <body>
diff --git a/JodaTime/xdocs/cal_gregorian.xml b/JodaTime/xdocs/cal_gregorian.xml
index b5631c543..4b275e424 100644
--- a/JodaTime/xdocs/cal_gregorian.xml
+++ b/JodaTime/xdocs/cal_gregorian.xml
@@ -4,7 +4,7 @@
 
  <properties>
   <title>Java date and time API - Gregorian calendar system</title>
-  <author email="scolebourne@users.sourceforge.net">Stephen Colebourne</author>
+  <author email="scolebourne.at.users.sourceforge.net">Stephen Colebourne</author>
  </properties>
 
  <body>
diff --git a/JodaTime/xdocs/cal_islamic.xml b/JodaTime/xdocs/cal_islamic.xml
index 200629dd7..bbc987635 100644
--- a/JodaTime/xdocs/cal_islamic.xml
+++ b/JodaTime/xdocs/cal_islamic.xml
@@ -4,7 +4,7 @@
 
  <properties>
   <title>Java date and time API - Islamic calendar system</title>
-  <author email="scolebourne@users.sourceforge.net">Stephen Colebourne</author>
+  <author email="scolebourne.at.users.sourceforge.net">Stephen Colebourne</author>
  </properties>
 
  <body>
diff --git a/JodaTime/xdocs/cal_iso.xml b/JodaTime/xdocs/cal_iso.xml
index 69030bf07..2a7d0f3be 100644
--- a/JodaTime/xdocs/cal_iso.xml
+++ b/JodaTime/xdocs/cal_iso.xml
@@ -4,7 +4,7 @@
 
  <properties>
   <title>Java date and time API - ISO8601 calendar system</title>
-  <author email="scolebourne@users.sourceforge.net">Stephen Colebourne</author>
+  <author email="scolebourne.at.users.sourceforge.net">Stephen Colebourne</author>
  </properties>
 
  <body>
diff --git a/JodaTime/xdocs/cal_julian.xml b/JodaTime/xdocs/cal_julian.xml
index 263661db0..a84d861e4 100644
--- a/JodaTime/xdocs/cal_julian.xml
+++ b/JodaTime/xdocs/cal_julian.xml
@@ -4,7 +4,7 @@
 
  <properties>
   <title>Java date and time API - Julian calendar system</title>
-  <author email="scolebourne@users.sourceforge.net">Stephen Colebourne</author>
+  <author email="scolebourne.at.users.sourceforge.net">Stephen Colebourne</author>
  </properties>
 
  <body>
diff --git a/JodaTime/xdocs/faq.xml b/JodaTime/xdocs/faq.xml
index 78c789bb1..c9b85f347 100644
--- a/JodaTime/xdocs/faq.xml
+++ b/JodaTime/xdocs/faq.xml
@@ -4,8 +4,8 @@
 
  <properties>
   <title>Java date and time API - FAQ</title>
-  <author email="scolebourne@users.sourceforge.net">Stephen Colebourne</author>
-  <author email="broneill@users.sourceforge.net">Brian S O'Neill</author>
+  <author email="scolebourne.at.users.sourceforge.net">Stephen Colebourne</author>
+  <author email="broneill.at.users.sourceforge.net">Brian S O'Neill</author>
  </properties>
 
  <body>
@@ -28,7 +28,7 @@ Some common questions about Joda-Time are answered here.
 <li><a href="#tzreimplement">Why reimplement TimeZone?</a></li>
 <li><a href="#joda">What is with the name 'joda'?</a></li>
 </ul>
-Question not answered? <a href="mailto:joda-interest@lists.sourceforge.net">Suggest another FAQ</a>
+Question not answered? Suggest one via the <a href="mail-lists.html">mailing list</a>.
 </p>
 
 
diff --git a/JodaTime/xdocs/field.xml b/JodaTime/xdocs/field.xml
index 3c3feb593..79538488c 100644
--- a/JodaTime/xdocs/field.xml
+++ b/JodaTime/xdocs/field.xml
@@ -4,7 +4,7 @@
 
  <properties>
   <title>Java date and time API - Fields</title>
-  <author email="scolebourne@users.sourceforge.net">Stephen Colebourne</author>
+  <author email="scolebourne.at.users.sourceforge.net">Stephen Colebourne</author>
  </properties>
 
  <body>
diff --git a/JodaTime/xdocs/index.xml b/JodaTime/xdocs/index.xml
index 1c8f89651..7b3f7feeb 100644
--- a/JodaTime/xdocs/index.xml
+++ b/JodaTime/xdocs/index.xml
@@ -4,8 +4,8 @@
 
  <properties>
   <title>Java date and time API - Home</title>
-  <author email="scolebourne@users.sourceforge.net">Stephen Colebourne</author>
-  <author email="almajor@boxspoon.com">Al Major</author>
+  <author email="scolebourne.at.users.sourceforge.net">Stephen Colebourne</author>
+  <author email="almajor.at.boxspoon.com">Al Major</author>
  </properties>
 
  <body>
@@ -148,12 +148,11 @@ The version number will change to 2.0 to indicate a change in compatibility.
 
 <section name="Support">
 <p>
-For support on bugs, using the library or to volunteer please contact the <a href="mail-lists.html">mailing list</a>
-(or email direct to the list via <a href="mailto:joda-interest@lists.sourceforge.net">joda-interest@lists.sourceforge.net</a>).
+For support on bugs, using the library or to volunteer please contact the <a href="mail-lists.html">mailing list</a>.
+Due to spam, you must be subscribed to post to the mailing list.
 </p>
 <p>
-Alternatively, you can contact the project lead, Stephen Colebourne via
-<a href="mailto:scolebourne@users.sourceforge.net">scolebourne@users.sourceforge.net</a>.
+Alternatively, you can contact the project lead, Stephen Colebourne via scolebourne.at.users.sourceforge.net.
 </p>
 </section>
 </body>
diff --git a/JodaTime/xdocs/installation.xml b/JodaTime/xdocs/installation.xml
index 4bf7bda93..244a4ec0a 100644
--- a/JodaTime/xdocs/installation.xml
+++ b/JodaTime/xdocs/installation.xml
@@ -3,7 +3,7 @@
 <document>
  <properties>
   <title>Java date and time API - Download and Installation</title>
-  <author email="almajor@boxspoon.com">Al Major</author>
+  <author email="almajor.at.boxspoon.com">Al Major</author>
  </properties>
 
 <body>
diff --git a/JodaTime/xdocs/key_chronology.xml b/JodaTime/xdocs/key_chronology.xml
index 6f80b804b..1d5cfd561 100644
--- a/JodaTime/xdocs/key_chronology.xml
+++ b/JodaTime/xdocs/key_chronology.xml
@@ -4,7 +4,7 @@
 
  <properties>
   <title>Java date and time API - Chronology</title>
-  <author email="scolebourne@users.sourceforge.net">Stephen Colebourne</author>
+  <author email="scolebourne.at.users.sourceforge.net">Stephen Colebourne</author>
  </properties>
 
  <body>
diff --git a/JodaTime/xdocs/key_duration.xml b/JodaTime/xdocs/key_duration.xml
index 7408d4fe6..60861c27b 100644
--- a/JodaTime/xdocs/key_duration.xml
+++ b/JodaTime/xdocs/key_duration.xml
@@ -4,7 +4,7 @@
 
  <properties>
   <title>Java date and time API - Duration</title>
-  <author email="scolebourne@users.sourceforge.net">Stephen Colebourne</author>
+  <author email="scolebourne.at.users.sourceforge.net">Stephen Colebourne</author>
  </properties>
 
  <body>
diff --git a/JodaTime/xdocs/key_instant.xml b/JodaTime/xdocs/key_instant.xml
index cf78107a9..e3c8b69c6 100644
--- a/JodaTime/xdocs/key_instant.xml
+++ b/JodaTime/xdocs/key_instant.xml
@@ -4,7 +4,7 @@
 
  <properties>
   <title>Java date and time API - Instant</title>
-  <author email="scolebourne@users.sourceforge.net">Stephen Colebourne</author>
+  <author email="scolebourne.at.users.sourceforge.net">Stephen Colebourne</author>
  </properties>
 
  <body>
diff --git a/JodaTime/xdocs/key_interval.xml b/JodaTime/xdocs/key_interval.xml
index c000f9962..c0f092ddc 100644
--- a/JodaTime/xdocs/key_interval.xml
+++ b/JodaTime/xdocs/key_interval.xml
@@ -4,7 +4,7 @@
 
  <properties>
   <title>Java date and time API - Interval</title>
-  <author email="scolebourne@users.sourceforge.net">Stephen Colebourne</author>
+  <author email="scolebourne.at.users.sourceforge.net">Stephen Colebourne</author>
  </properties>
 
  <body>
diff --git a/JodaTime/xdocs/key_partial.xml b/JodaTime/xdocs/key_partial.xml
index 0a137141f..d714d9ff3 100644
--- a/JodaTime/xdocs/key_partial.xml
+++ b/JodaTime/xdocs/key_partial.xml
@@ -4,7 +4,7 @@
 
  <properties>
   <title>Java date and time API - Partial</title>
-  <author email="scolebourne@users.sourceforge.net">Stephen Colebourne</author>
+  <author email="scolebourne.at.users.sourceforge.net">Stephen Colebourne</author>
  </properties>
 
  <body>
diff --git a/JodaTime/xdocs/key_period.xml b/JodaTime/xdocs/key_period.xml
index 694d1b170..81db42064 100644
--- a/JodaTime/xdocs/key_period.xml
+++ b/JodaTime/xdocs/key_period.xml
@@ -4,7 +4,7 @@
 
  <properties>
   <title>Java date and time API - Period</title>
-  <author email="scolebourne@users.sourceforge.net">Stephen Colebourne</author>
+  <author email="scolebourne.at.users.sourceforge.net">Stephen Colebourne</author>
  </properties>
 
  <body>
diff --git a/JodaTime/xdocs/quickstart.xml b/JodaTime/xdocs/quickstart.xml
index 50aa846db..30ba294ed 100644
--- a/JodaTime/xdocs/quickstart.xml
+++ b/JodaTime/xdocs/quickstart.xml
@@ -3,7 +3,7 @@
 <document>
  <properties>
   <title>Java date and time API - Quick start guide</title>
-  <author email="scolebourne@users.sourceforge.net">Stephen Colebourne</author>
+  <author email="scolebourne.at.users.sourceforge.net">Stephen Colebourne</author>
  </properties>
 <body>
 
diff --git a/JodaTime/xdocs/tasks.xml b/JodaTime/xdocs/tasks.xml
index b55b43fb7..a8bbab37b 100644
--- a/JodaTime/xdocs/tasks.xml
+++ b/JodaTime/xdocs/tasks.xml
@@ -4,7 +4,7 @@
 
  <properties>
   <title>Java date and time API - Tasks outstanding</title>
-  <author email="scolebourne@users.sourceforge.net">Stephen Colebourne</author>
+  <author email="scolebourne.at.users.sourceforge.net">Stephen Colebourne</author>
  </properties>
 
  <body>
@@ -24,7 +24,8 @@ The following tasks are on the possible TODO list - contact the mailing lists fo
 </ul>
 
 <p>
-Would you like to <a href="mailto:scolebourne@users.sourceforge.net">volunteer</a>?
+Would you like to volunteer?
+Please contact scolebourne.at.users.sourceforge.net or the <a href="mail-lists.html>mailing list</a>".
 </p>
 </section>
 
diff --git a/JodaTime/xdocs/timezones.xml b/JodaTime/xdocs/timezones.xml
index 4c8245750..8496080aa 100644
--- a/JodaTime/xdocs/timezones.xml
+++ b/JodaTime/xdocs/timezones.xml
@@ -4,7 +4,7 @@
 
  <properties>
   <title>Java date and time API - Time Zones</title>
-  <author email="broneill@users.sourceforge.net">Brian S O'Neill</author>
+  <author email="broneill.at.users.sourceforge.net">Brian S O'Neill</author>
  </properties>
 
  <body>
diff --git a/JodaTime/xdocs/tz_update.xml b/JodaTime/xdocs/tz_update.xml
index d241a47b5..5e4bd6847 100644
--- a/JodaTime/xdocs/tz_update.xml
+++ b/JodaTime/xdocs/tz_update.xml
@@ -4,7 +4,7 @@
 
  <properties>
   <title>Java date and time API - Time zone update</title>
-  <author email="scolebourne@users.sourceforge.net">Stephen Colebourne</author>
+  <author email="scolebourne.at.users.sourceforge.net">Stephen Colebourne</author>
  </properties>
 
  <body>
diff --git a/JodaTime/xdocs/upgradeto099.xml b/JodaTime/xdocs/upgradeto099.xml
index 57b5cbad2..65ba78d0f 100644
--- a/JodaTime/xdocs/upgradeto099.xml
+++ b/JodaTime/xdocs/upgradeto099.xml
@@ -3,7 +3,7 @@
 <document>
  <properties>
   <title>Java date and time API - Upgrade from 0.98 to 0.99</title>
-  <author email="scolebourne@joda.org">Stephen Colebourne</author>
+  <author email="scolebourne.at.users.sourceforge.net">Stephen Colebourne</author>
  </properties>
 
 <body>
@@ -36,7 +36,7 @@ same intent - that is to make the code freely available with a minimum of restri
 
 Incompatible changes since 0.98
 -------------------------------
-Please contact joda-interest@lists.sourceforge.net if you have difficulties upgrading
+Please contact the joda-interest mailing list if you have difficulties upgrading
 This release is both source and binary incompatible with 0.98
 
 - Formatting package reworked
@@ -105,7 +105,7 @@ This release is both source and binary incompatible with 0.98
 Deprecations since 0.98
 -----------------------
 ** ALL deprecated methods will be removed in 1.0 **
-Please contact joda-interest@lists.sourceforge.net if you have difficulties upgrading
+Please contact the joda-interest mailing list if you have difficulties upgrading
 
 - Formatting package reworked
   Factory classes now no longer have a static getInstance() method.
diff --git a/JodaTime/xdocs/upgradeto100.xml b/JodaTime/xdocs/upgradeto100.xml
index b29f007ec..fcec0a382 100644
--- a/JodaTime/xdocs/upgradeto100.xml
+++ b/JodaTime/xdocs/upgradeto100.xml
@@ -3,7 +3,7 @@
 <document>
  <properties>
   <title>Java date and time API - Upgrade from 0.99 to 1.0</title>
-  <author email="scolebourne@joda.org">Stephen Colebourne</author>
+  <author email="scolebourne.at.users.sourceforge.net">Stephen Colebourne</author>
  </properties>
 
 <body>
diff --git a/JodaTime/xdocs/upgradeto110.xml b/JodaTime/xdocs/upgradeto110.xml
index c2feb04ef..cd79d0833 100644
--- a/JodaTime/xdocs/upgradeto110.xml
+++ b/JodaTime/xdocs/upgradeto110.xml
@@ -3,7 +3,7 @@
 <document>
  <properties>
   <title>Java date and time API - Upgrade from 1.0 to 1.1</title>
-  <author email="scolebourne@joda.org">Stephen Colebourne</author>
+  <author email="scolebourne.at.users.sourceforge.net">Stephen Colebourne</author>
  </properties>
 
 <body>
@@ -48,7 +48,7 @@ Data compatible - Yes, except:
   - Removed time zones Asia/Riyadh87, Asia/Riyadh88 and Asia/Riyadh89.
    These should not have been included in the 1.0 release, and do not represent
    genuine time zones. It is unlikely that you used them.
-   If you do want to use them, please contact joda-interest@lists.sourceforge.net
+   If you do want to use them, please contact the joda-interest mailing list
 
 
 Warnings since 1.0
diff --git a/JodaTime/xdocs/upgradeto120.xml b/JodaTime/xdocs/upgradeto120.xml
index 099e5dd4b..6946462aa 100644
--- a/JodaTime/xdocs/upgradeto120.xml
+++ b/JodaTime/xdocs/upgradeto120.xml
@@ -3,7 +3,7 @@
 <document>
  <properties>
   <title>Java date and time API - Upgrade from 1.1 to 1.2</title>
-  <author email="scolebourne@joda.org">Stephen Colebourne</author>
+  <author email="scolebourne.at.users.sourceforge.net">Stephen Colebourne</author>
  </properties>
 
 <body>
diff --git a/JodaTime/xdocs/upgradeto121.xml b/JodaTime/xdocs/upgradeto121.xml
index 0622e1e90..84666ecb6 100644
--- a/JodaTime/xdocs/upgradeto121.xml
+++ b/JodaTime/xdocs/upgradeto121.xml
@@ -3,7 +3,7 @@
 <document>
  <properties>
   <title>Java date and time API - Upgrade from 1.2 to 1.2.1</title>
-  <author email="scolebourne@joda.org">Stephen Colebourne</author>
+  <author email="scolebourne.at.users.sourceforge.net">Stephen Colebourne</author>
  </properties>
 
 <body>
diff --git a/JodaTime/xdocs/upgradeto130.xml b/JodaTime/xdocs/upgradeto130.xml
index 79b30843c..35e533c57 100644
--- a/JodaTime/xdocs/upgradeto130.xml
+++ b/JodaTime/xdocs/upgradeto130.xml
@@ -3,7 +3,7 @@
 <document>
  <properties>
   <title>Java date and time API - Upgrade from 1.2 to 1.3</title>
-  <author email="scolebourne@joda.org">Stephen Colebourne</author>
+  <author email="scolebourne.at.users.sourceforge.net">Stephen Colebourne</author>
  </properties>
 
 <body>
diff --git a/JodaTime/xdocs/userguide.xml b/JodaTime/xdocs/userguide.xml
index 398332b98..75d505a00 100644
--- a/JodaTime/xdocs/userguide.xml
+++ b/JodaTime/xdocs/userguide.xml
@@ -3,8 +3,8 @@
 <document>
  <properties>
   <title>Java date and time API - User Guide</title>
-  <author email="scolebourne@users.sourceforge.net">Stephen Colebourne</author>
-  <author email="almajor@boxspoon.com">Al Major</author>
+  <author email="scolebourne.at.users.sourceforge.net">Stephen Colebourne</author>
+  <author email="almajor.at.boxspoon.com">Al Major</author>
  </properties>
 <body>
 

From 7a4ecb42b4acd3bad36bb6b3634f201d8e6874f2 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 1 Nov 2006 00:04:05 +0000
Subject: [PATCH 35/54] Add months example to emphasise single field API

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1149 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/key_period.xml | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/JodaTime/xdocs/key_period.xml b/JodaTime/xdocs/key_period.xml
index 81db42064..1fea23c0d 100644
--- a/JodaTime/xdocs/key_period.xml
+++ b/JodaTime/xdocs/key_period.xml
@@ -94,6 +94,9 @@ DateTime calc = start.plus(period);
 
 // able to calculate whole days between two dates easily
 Days days = Days.daysBetween(start, end);
+
+// able to calculate whole months between two dates easily
+Months months = Months.monthsBetween(start, end);
 </source>
 </p>
 <p>

From ac208e7afe830e405b1b0b13a980944f1a611261 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 1 Nov 2006 00:04:42 +0000
Subject: [PATCH 36/54] Rewrite day calculation FAQ to reference Days class

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1150 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/faq.xml | 33 ++++++++++++++++++++++++---------
 1 file changed, 24 insertions(+), 9 deletions(-)

diff --git a/JodaTime/xdocs/faq.xml b/JodaTime/xdocs/faq.xml
index c9b85f347..cbcc46aab 100644
--- a/JodaTime/xdocs/faq.xml
+++ b/JodaTime/xdocs/faq.xml
@@ -35,17 +35,32 @@ Question not answered? Suggest one via the <a href="mail-lists.html">mailing lis
 <a name="datediff" />
 <subsection name="How do I calculate the difference between two dates?">
 <p>
-The easiest way to calculate the difference between two dates is to create a new
-<a href="apidocs/org/joda/time/Period.html">Period</a>. By default this will break down
-the period into years, months, weeks, days, etc. If you just want the difference in
-days, specify a different <a href="apidocs/org/joda/time/PeriodType.html">PeriodType</a>,
-like PeriodType.days().
+This question has more than one answer!
+If you just want the number of whole days between two dates, then you can use the
+new <a href="api-release/index.html?org/joda/time/Days.html">Days</a> class
+in version 1.4 of joda-time.
 <source>
-      DateTime start = ...
-      DateTime end = ...
-      Period p = new Period(start, end, PeriodType.days());
-      int days = p.getDays();
+  Days d = Days.daysBetween(startDate, endDate);
+  int days = d.getDays();
 </source>
+This method, and other static methods on the <code>Days</code> class have been
+designed to operate well with the JDK5 static import facility.
+</p>
+<p>
+If however you want to calculate the number of days, weeks, months and years between
+the two dates, then you need a <a href="api-release/index.html?org/joda/time/Period.html">Period</a>
+By default, this will split the difference between the two datetimes into parts,
+such as "1 month, 2 weeks, 4 days and 7 hours".
+<source>
+  Period p = new Period(startDate, endDate);
+</source>
+You can control which fields get extracted using a
+<a href="api-release/index.html?org/joda/time/PeriodType.html">PeriodType</a>.
+<source>
+  Period p = new Period(startDate, endDate, PeriodType.yearMonthDay());
+</source>
+This example will return not return any weeks or time fields, thus the previous
+example becomes "1 month and 18 days".
 </p>
 <p>
 For more info, consult the <a href="key_period.html">period guide</a>.

From 9c2c0a1c57e53f1dd7a5a983f179d72dc02b06ed Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 1 Nov 2006 00:06:18 +0000
Subject: [PATCH 37/54] Correct HTML error

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1151 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/tasks.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/JodaTime/xdocs/tasks.xml b/JodaTime/xdocs/tasks.xml
index a8bbab37b..c0a91c60d 100644
--- a/JodaTime/xdocs/tasks.xml
+++ b/JodaTime/xdocs/tasks.xml
@@ -25,7 +25,7 @@ The following tasks are on the possible TODO list - contact the mailing lists fo
 
 <p>
 Would you like to volunteer?
-Please contact scolebourne.at.users.sourceforge.net or the <a href="mail-lists.html>mailing list</a>".
+Please contact scolebourne.at.users.sourceforge.net or the <a href="mail-lists.html">mailing list</a>.
 </p>
 </section>
 

From 0046b029bbf487e0a8a0e288498cc2ce1f36d629 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 1 Nov 2006 00:06:45 +0000
Subject: [PATCH 38/54] Update support section, reduce examples

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1152 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/index.xml | 20 ++++++++++++++------
 1 file changed, 14 insertions(+), 6 deletions(-)

diff --git a/JodaTime/xdocs/index.xml b/JodaTime/xdocs/index.xml
index 7b3f7feeb..08dda4d17 100644
--- a/JodaTime/xdocs/index.xml
+++ b/JodaTime/xdocs/index.xml
@@ -29,26 +29,31 @@ public boolean isAfterPayDay(<a href="api-release/index.html?org/joda/time/DateT
   }
   return datetime.getDayOfMonth() > 28;
 }
+
 public <a href="api-release/index.html?org/joda/time/Days.html"><b>Days</b></a> daysToNewYear(<a href="api-release/index.html?org/joda/time/LocalDate.html"><b>LocalDate</b></a> fromDate) {
   <a href="api-release/index.html?org/joda/time/LocalDate.html"><b>LocalDate</b></a> newYear = fromDate.plusYears(1).withDayOfYear(1);
   return <a href="api-release/index.html?org/joda/time/Days.html"><b>Days</b></a>.daysBetween(fromDate, newYear);
 }
+
 public boolean isRentalOverdue(<a href="api-release/index.html?org/joda/time/DateTime.html"><b>DateTime</b></a> datetimeRented) {
   <a href="api-release/index.html?org/joda/time/Period.html"><b>Period</b></a> rentalPeriod = new <a href="api-release/index.html?org/joda/time/Period.html"><b>Period</b></a>().withDays(2).withHours(12);
   return datetimeRented.plus(rentalPeriod).isBeforeNow();
 }
+
+public String getBirthMonthText(<a href="api-release/index.html?org/joda/time/LocalDate.html"><b>LocalDate</b></a> dateOfBirth) {
+  return dateOfBirth.monthOfYear().getAsText(Locale.ENGLISH);
+}
+</source>
+<!--
 public boolean isDoubleShift(<a href="api-release/index.html?org/joda/time/LocalTime.html"><b>LocalTime</b></a> startTime, <a href="api-release/index.html?org/joda/time/LocalTime.html"><b>LocalTime</b></a> endTime) {
   <a href="api-release/index.html?org/joda/time/Hours.html"><b>Hours</b></a> hoursBetween = <a href="api-release/index.html?org/joda/time/Hours.html"><b>Hours</b></a>.hoursBetween(time1, time2);
   return hoursBetween.isGreaterThan(<a href="api-release/index.html?org/joda/time/Hours.html"><b>Hours</b></a>.EIGHT);
 }
-public String getBirthMonthText(<a href="api-release/index.html?org/joda/time/LocalDate.html"><b>LocalDate</b></a> dateOfBirth) {
-  return dateOfBirth.monthOfYear().getAsText(Locale.ENGLISH);
-}
 public boolean isJoinedInLastThreeMonths(<a href="api-release/index.html?org/joda/time/DateTime.html"><b>DateTime</b></a> datetimeJoined) {
   <a href="api-release/index.html?org/joda/time/Interval.html"><b>Interval</b></a> last3Months = new <a href="api-release/index.html?org/joda/time/Interval.html"><b>Interval</b></a>(<a href="api-release/index.html?org/joda/time/Months.html"><b>Months</b></a>.THREE, new <a href="api-release/index.html?org/joda/time/DateTime.html"><b>DateTime</b></a>());
   return last3Months.contains(datetimeJoined);
 }
-</source>
+-->
 Version 1.3 was released on 2006-08-02 -
 <a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=104212">Download now</a>
 </p>
@@ -148,9 +153,12 @@ The version number will change to 2.0 to indicate a change in compatibility.
 
 <section name="Support">
 <p>
-For support on bugs, using the library or to volunteer please contact the <a href="mail-lists.html">mailing list</a>.
-Due to spam, you must be subscribed to post to the mailing list.
+Support on bugs, library usage or enhancement requests is available via:
 </p>
+<ul>
+<li>the joda-interest <a href="mail-lists.html">mailing list</a>. Due to spam, you must be subscribed to post to the mailing list.</li>
+<li>the joda-time sourceforge <a href="http://sourceforge.net/forum/forum.php?forum_id=337835">forum</a>.</li>
+</ul>
 <p>
 Alternatively, you can contact the project lead, Stephen Colebourne via scolebourne.at.users.sourceforge.net.
 </p>

From e725574cf17bbfa05a0b98e003fbfcac9aadd9e1 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 1 Nov 2006 00:44:56 +0000
Subject: [PATCH 39/54] Rewrite period documentation to cover single-field
 periods

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1153 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/key_period.xml | 83 ++++++++++++++++++++++++++++++-----
 1 file changed, 73 insertions(+), 10 deletions(-)

diff --git a/JodaTime/xdocs/key_period.xml b/JodaTime/xdocs/key_period.xml
index 1fea23c0d..cfc6722fc 100644
--- a/JodaTime/xdocs/key_period.xml
+++ b/JodaTime/xdocs/key_period.xml
@@ -19,6 +19,15 @@ A period can only be resolved to an exact number of milliseconds by specifying t
 <a href="key_instant.html">instant</a> (including chronology and time zone) it is relative to.
 </p>
 <p>
+Periods do not have a <a href="key_chronology.html">chronology</a> or time zone.
+They can be added to an <a href="key_instant.html">instant</a>, or to either
+end of an interval to change those objects.
+In datetime maths you could say:
+<source>
+      instant  +  period  =  instant
+</source>
+</p>
+<p>
 For example, consider a period of 1 month.
 If you add this period to the 1st February (ISO) then you will get the 1st March.
 If you add the same period to the 1st March you will get the 1st April.
@@ -30,7 +39,56 @@ If you use a period to do the addition then either 23 or 25 hours will be added
 If you had created a duration equal to 24 hours, then you would end up with the wrong result.
 </p>
 <p>
-Periods are implemented as a set of <code>int</code> fields.
+The Joda-Time library defines two types of implementation of the period concept.
+The first type can only store a single-field, such as days or hours, but not both.
+The second type can store any-field, expressing a value such as 5 months 8 days and 7 hours.
+</p>
+
+<subsection name="Single field Periods">
+<p>
+The first type, single-field periods, is new to version 1.4 of Joda-Time.
+These classes - <code>Years</code>, <code>Months</code>, <code>Weeks</code>,
+<code>Days</code>, <code>Hours</code>, <code>Minutes</code>, <code>Seconds</code> -
+all follow a very similar design, and only store the single field as implied by
+their name. Thus a <code>Days</code> object can only store a number of days.
+</p>
+<p>
+These classes can be useful when you want to write an API that must specifically take
+in a period measured in a particular unit. For example, a travel website where you are
+given the option of travelling &#177;1 days or &#177;3 days could store this
+information in a <code>Days</code> object.
+</p>
+<p>
+These classes provide static factory methods rather than constructors.
+For <code>Days</code> these include <code>daysBetween(startDate, endDate)</code> to
+obtain the number of whole days between two dates or datetimes, and 
+<code>daysIn(interval)</code> to obtain the number of whole days in an interval.
+In addition, there are a range of constants, such as <code>Days.ZERO</code> and
+<code>Days.ONE</code>. The factory method <code>days(int)</code> either returns
+a constant, or creates a new instance as appropriate.
+</p>
+<p>
+The single-field classes include basic mathemaical operator support.
+For <code>Days</code> this includes <code>plus(int)</code>, <code>plus(Days)</code>,
+<code>multipliedBy(int)</code>, <code>dividedBy(int)</code> and <code>negated()</code>.
+All operations return a new instance, as <code>Days</code> is immutable.
+The single-field classes are also comparable.
+</p>
+<p>
+Converting between different types of period is a difficult problem.
+One day is not always equal to 24 hours. (It might be 23 or 25 at daylight savings time change.)
+However, many applications have business rules that assume a 24 hour day and so on.
+To support this, <code>Days</code> has methods named <code>toStandardHours()</code> and
+so on which convert the number of days to a number of hours assuming a 24 hour day.
+The word 'standard' is being specifically used in the method name to remind users of the assumption.
+</p>
+</subsection>
+
+<subsection name="Any field Periods">
+<p>
+The second type of period is the any-field period.
+These are implemented by the <code>Period</code> and <code>MutablePeriod</code> classes.
+Internally, they store a set of <code>int</code> fields, one for each field.
 The standard set of fields in a period are years, months, weeks, days, hours, minutes, seconds and millis.
 The <a href="api-release/index.html?org/joda/time/PeriodType.html">PeriodType</a> class allows this set
 of fields to be restricted, for example to elimate weeks.
@@ -38,18 +96,23 @@ This is significant when converting a duration or interval to a period, as the c
 needs to know which period fields it should populate.
 </p>
 <p>
-Methods exist on periods to obtain each field value.
-Periods do not have a <a href="key_chronology.html">chronology</a> or time zone.
-You cannot compare periods for order (ie. they do not implement <code>Comparable</code>).
+The <code>Period</code> class is useful when you want to write an API that can take
+a period that probably contains more than one field. However, to be even more general,
+your API could define itself to accept a <code>ReadablePeriod</code>, and then the
+calling code could pass in either a <code>Period</code> or a single field period like
+<code>Days</code>.
 </p>
 <p>
-Periods can be added to an <a href="key_instant.html">instant</a>, or to either
-end of an interval to change those objects.
-In datetime maths you could say:
-<source>
-      instant  +  period  =  instant
-</source>
+Methods exist on <code>Period</code> to obtain each field value.
+There are also methods to change a field value, such as <code>withDays(int)</code>.
+They are named 'with' as they return a new <code>Period</code> object, due to immutability.
+</p>
+<p>
+You cannot compare any-field periods for order, as there is no sensible comparison strategy.
+Instead, you need to convert the period to a <code>Duration</code> based on a specific date
+and then compare the duration.
 </p>
+</subsection>
 
 </section>
 

From 093dc6513023dc4b7142383be3494e9605a31a16 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 1 Nov 2006 00:49:40 +0000
Subject: [PATCH 40/54] Link fields page to index page

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1154 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/index.xml | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/JodaTime/xdocs/index.xml b/JodaTime/xdocs/index.xml
index 08dda4d17..8e10add5b 100644
--- a/JodaTime/xdocs/index.xml
+++ b/JodaTime/xdocs/index.xml
@@ -68,9 +68,9 @@ and have odd performance effects.
 Here are some of our reasons for developing and using Joda-Time:
 <ul>
 <li><b>Easy to Use</b>.
-Calendar makes accessing 'normal' dates difficult, due to the
-lack of simple methods. Joda-Time has straightforward field accessors
-such as <code>getYear()</code> or <code>getDayOfWeek()</code>.</li>
+Calendar makes accessing 'normal' dates difficult, due to the lack of simple methods.
+Joda-Time has straightforward <a href="field.html">field accessors</a> such as
+<code>getYear()</code> or <code>getDayOfWeek()</code>.</li>
 
 <li><b>Easy to Extend</b>.
 The JDK supports multiple calendar systems via subclasses of <code>Calendar</code>.

From b17981872a62368a30e94b6f2276ec720804978a Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 1 Nov 2006 23:22:58 +0000
Subject: [PATCH 41/54] Fight against spam

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1155 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index a9dfedf50..5ee2c6f9f 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -65,6 +65,6 @@ Bug fixes since 1.3
 
 Feedback
 --------
-All feedback is welcomed at joda-interest@lists.sourceforge.net.
+All feedback is welcomed via the joda-interest mailing list.
 
 The Joda team

From 98181a710fe12a914f351a158c0e4f55c276081b Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 1 Nov 2006 23:25:42 +0000
Subject: [PATCH 42/54] Change negate() to negated()

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1156 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/Days.java        | 4 ++--
 JodaTime/src/java/org/joda/time/Hours.java       | 4 ++--
 JodaTime/src/java/org/joda/time/Minutes.java     | 4 ++--
 JodaTime/src/java/org/joda/time/Months.java      | 4 ++--
 JodaTime/src/java/org/joda/time/Seconds.java     | 4 ++--
 JodaTime/src/java/org/joda/time/Weeks.java       | 4 ++--
 JodaTime/src/java/org/joda/time/Years.java       | 4 ++--
 JodaTime/src/test/org/joda/time/TestDays.java    | 6 +++---
 JodaTime/src/test/org/joda/time/TestHours.java   | 6 +++---
 JodaTime/src/test/org/joda/time/TestMinutes.java | 6 +++---
 JodaTime/src/test/org/joda/time/TestMonths.java  | 6 +++---
 JodaTime/src/test/org/joda/time/TestSeconds.java | 6 +++---
 JodaTime/src/test/org/joda/time/TestWeeks.java   | 6 +++---
 JodaTime/src/test/org/joda/time/TestYears.java   | 6 +++---
 14 files changed, 35 insertions(+), 35 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/Days.java b/JodaTime/src/java/org/joda/time/Days.java
index 69526db78..db5107a7d 100644
--- a/JodaTime/src/java/org/joda/time/Days.java
+++ b/JodaTime/src/java/org/joda/time/Days.java
@@ -436,12 +436,12 @@ public Days dividedBy(int divisor) {
 
     //-----------------------------------------------------------------------
     /**
-     * Negates the number of days in this period.
+     * Returns a new instance with the days value negated.
      *
      * @return the new period with a negated value
      * @throws ArithmeticException if the result overflows an int
      */
-    public Days negate() {
+    public Days negated() {
         return Days.days(FieldUtils.safeNegate(getValue()));
     }
 
diff --git a/JodaTime/src/java/org/joda/time/Hours.java b/JodaTime/src/java/org/joda/time/Hours.java
index 4ff1ea126..6bb97fdbf 100644
--- a/JodaTime/src/java/org/joda/time/Hours.java
+++ b/JodaTime/src/java/org/joda/time/Hours.java
@@ -435,12 +435,12 @@ public Hours dividedBy(int divisor) {
 
     //-----------------------------------------------------------------------
     /**
-     * Negates the number of hours in this period.
+     * Returns a new instance with the hours value negated.
      *
      * @return the new period with a negated value
      * @throws ArithmeticException if the result overflows an int
      */
-    public Hours negate() {
+    public Hours negated() {
         return Hours.hours(FieldUtils.safeNegate(getValue()));
     }
 
diff --git a/JodaTime/src/java/org/joda/time/Minutes.java b/JodaTime/src/java/org/joda/time/Minutes.java
index 9b258ca65..63220b989 100644
--- a/JodaTime/src/java/org/joda/time/Minutes.java
+++ b/JodaTime/src/java/org/joda/time/Minutes.java
@@ -416,12 +416,12 @@ public Minutes dividedBy(int divisor) {
 
     //-----------------------------------------------------------------------
     /**
-     * Negates the number of minutes in this period.
+     * Returns a new instance with the minutes value negated.
      *
      * @return the new period with a negated value
      * @throws ArithmeticException if the result overflows an int
      */
-    public Minutes negate() {
+    public Minutes negated() {
         return Minutes.minutes(FieldUtils.safeNegate(getValue()));
     }
 
diff --git a/JodaTime/src/java/org/joda/time/Months.java b/JodaTime/src/java/org/joda/time/Months.java
index 44ceb2c9d..8918c04cb 100644
--- a/JodaTime/src/java/org/joda/time/Months.java
+++ b/JodaTime/src/java/org/joda/time/Months.java
@@ -342,12 +342,12 @@ public Months dividedBy(int divisor) {
 
     //-----------------------------------------------------------------------
     /**
-     * Negates the number of months in this period.
+     * Returns a new instance with the months value negated.
      *
      * @return the new period with a negated value
      * @throws ArithmeticException if the result overflows an int
      */
-    public Months negate() {
+    public Months negated() {
         return Months.months(FieldUtils.safeNegate(getValue()));
     }
 
diff --git a/JodaTime/src/java/org/joda/time/Seconds.java b/JodaTime/src/java/org/joda/time/Seconds.java
index b0608e1ac..5fd0182b0 100644
--- a/JodaTime/src/java/org/joda/time/Seconds.java
+++ b/JodaTime/src/java/org/joda/time/Seconds.java
@@ -416,12 +416,12 @@ public Seconds dividedBy(int divisor) {
 
     //-----------------------------------------------------------------------
     /**
-     * Negates the number of seconds in this period.
+     * Returns a new instance with the seconds value negated.
      *
      * @return the new period with a negated value
      * @throws ArithmeticException if the result overflows an int
      */
-    public Seconds negate() {
+    public Seconds negated() {
         return Seconds.seconds(FieldUtils.safeNegate(getValue()));
     }
 
diff --git a/JodaTime/src/java/org/joda/time/Weeks.java b/JodaTime/src/java/org/joda/time/Weeks.java
index 2105a1287..2c64e4e67 100644
--- a/JodaTime/src/java/org/joda/time/Weeks.java
+++ b/JodaTime/src/java/org/joda/time/Weeks.java
@@ -422,12 +422,12 @@ public Weeks dividedBy(int divisor) {
 
     //-----------------------------------------------------------------------
     /**
-     * Negates the number of weeks in this period.
+     * Returns a new instance with the weeks value negated.
      *
      * @return the new period with a negated value
      * @throws ArithmeticException if the result overflows an int
      */
-    public Weeks negate() {
+    public Weeks negated() {
         return Weeks.weeks(FieldUtils.safeNegate(getValue()));
     }
 
diff --git a/JodaTime/src/java/org/joda/time/Years.java b/JodaTime/src/java/org/joda/time/Years.java
index 97073ef8d..01f0c62d1 100644
--- a/JodaTime/src/java/org/joda/time/Years.java
+++ b/JodaTime/src/java/org/joda/time/Years.java
@@ -306,12 +306,12 @@ public Years dividedBy(int divisor) {
 
     //-----------------------------------------------------------------------
     /**
-     * Negates the number of years in this period.
+     * Returns a new instance with the years value negated.
      *
      * @return the new period with a negated value
      * @throws ArithmeticException if the result overflows an int
      */
-    public Years negate() {
+    public Years negated() {
         return Years.years(FieldUtils.safeNegate(getValue()));
     }
 
diff --git a/JodaTime/src/test/org/joda/time/TestDays.java b/JodaTime/src/test/org/joda/time/TestDays.java
index bc0259027..f99db348a 100644
--- a/JodaTime/src/test/org/joda/time/TestDays.java
+++ b/JodaTime/src/test/org/joda/time/TestDays.java
@@ -377,13 +377,13 @@ public void testDividedBy_int() {
         }
     }
 
-    public void testNegate() {
+    public void testNegated() {
         Days test = Days.days(12);
-        assertEquals(-12, test.negate().getDays());
+        assertEquals(-12, test.negated().getDays());
         assertEquals(12, test.getDays());
         
         try {
-            Days.MIN_VALUE.negate();
+            Days.MIN_VALUE.negated();
             fail();
         } catch (ArithmeticException ex) {
             // expected
diff --git a/JodaTime/src/test/org/joda/time/TestHours.java b/JodaTime/src/test/org/joda/time/TestHours.java
index c5c8ab47a..d00811356 100644
--- a/JodaTime/src/test/org/joda/time/TestHours.java
+++ b/JodaTime/src/test/org/joda/time/TestHours.java
@@ -372,13 +372,13 @@ public void testDividedBy_int() {
         }
     }
 
-    public void testNegate() {
+    public void testNegated() {
         Hours test = Hours.hours(12);
-        assertEquals(-12, test.negate().getHours());
+        assertEquals(-12, test.negated().getHours());
         assertEquals(12, test.getHours());
         
         try {
-            Hours.MIN_VALUE.negate();
+            Hours.MIN_VALUE.negated();
             fail();
         } catch (ArithmeticException ex) {
             // expected
diff --git a/JodaTime/src/test/org/joda/time/TestMinutes.java b/JodaTime/src/test/org/joda/time/TestMinutes.java
index 57d3a4677..8d488a705 100644
--- a/JodaTime/src/test/org/joda/time/TestMinutes.java
+++ b/JodaTime/src/test/org/joda/time/TestMinutes.java
@@ -355,13 +355,13 @@ public void testDividedBy_int() {
         }
     }
 
-    public void testNegate() {
+    public void testNegated() {
         Minutes test = Minutes.minutes(12);
-        assertEquals(-12, test.negate().getMinutes());
+        assertEquals(-12, test.negated().getMinutes());
         assertEquals(12, test.getMinutes());
         
         try {
-            Minutes.MIN_VALUE.negate();
+            Minutes.MIN_VALUE.negated();
             fail();
         } catch (ArithmeticException ex) {
             // expected
diff --git a/JodaTime/src/test/org/joda/time/TestMonths.java b/JodaTime/src/test/org/joda/time/TestMonths.java
index f422e9700..e56239152 100644
--- a/JodaTime/src/test/org/joda/time/TestMonths.java
+++ b/JodaTime/src/test/org/joda/time/TestMonths.java
@@ -314,13 +314,13 @@ public void testDividedBy_int() {
         }
     }
 
-    public void testNegate() {
+    public void testNegated() {
         Months test = Months.months(12);
-        assertEquals(-12, test.negate().getMonths());
+        assertEquals(-12, test.negated().getMonths());
         assertEquals(12, test.getMonths());
         
         try {
-            Months.MIN_VALUE.negate();
+            Months.MIN_VALUE.negated();
             fail();
         } catch (ArithmeticException ex) {
             // expected
diff --git a/JodaTime/src/test/org/joda/time/TestSeconds.java b/JodaTime/src/test/org/joda/time/TestSeconds.java
index 2ac69a470..0062f89c1 100644
--- a/JodaTime/src/test/org/joda/time/TestSeconds.java
+++ b/JodaTime/src/test/org/joda/time/TestSeconds.java
@@ -345,13 +345,13 @@ public void testDividedBy_int() {
         }
     }
 
-    public void testNegate() {
+    public void testNegated() {
         Seconds test = Seconds.seconds(12);
-        assertEquals(-12, test.negate().getSeconds());
+        assertEquals(-12, test.negated().getSeconds());
         assertEquals(12, test.getSeconds());
         
         try {
-            Seconds.MIN_VALUE.negate();
+            Seconds.MIN_VALUE.negated();
             fail();
         } catch (ArithmeticException ex) {
             // expected
diff --git a/JodaTime/src/test/org/joda/time/TestWeeks.java b/JodaTime/src/test/org/joda/time/TestWeeks.java
index 1c7c7315c..3a2671228 100644
--- a/JodaTime/src/test/org/joda/time/TestWeeks.java
+++ b/JodaTime/src/test/org/joda/time/TestWeeks.java
@@ -375,13 +375,13 @@ public void testDividedBy_int() {
         }
     }
 
-    public void testNegate() {
+    public void testNegated() {
         Weeks test = Weeks.weeks(12);
-        assertEquals(-12, test.negate().getWeeks());
+        assertEquals(-12, test.negated().getWeeks());
         assertEquals(12, test.getWeeks());
         
         try {
-            Weeks.MIN_VALUE.negate();
+            Weeks.MIN_VALUE.negated();
             fail();
         } catch (ArithmeticException ex) {
             // expected
diff --git a/JodaTime/src/test/org/joda/time/TestYears.java b/JodaTime/src/test/org/joda/time/TestYears.java
index 92680ba49..2c1097d9d 100644
--- a/JodaTime/src/test/org/joda/time/TestYears.java
+++ b/JodaTime/src/test/org/joda/time/TestYears.java
@@ -296,13 +296,13 @@ public void testDividedBy_int() {
         }
     }
 
-    public void testNegate() {
+    public void testNegated() {
         Years test = Years.years(12);
-        assertEquals(-12, test.negate().getYears());
+        assertEquals(-12, test.negated().getYears());
         assertEquals(12, test.getYears());
         
         try {
-            Years.MIN_VALUE.negate();
+            Years.MIN_VALUE.negated();
             fail();
         } catch (ArithmeticException ex) {
             // expected

From 2ca301694eda2915e5c12cf54e7e7bb8ce63561c Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 1 Nov 2006 23:41:09 +0000
Subject: [PATCH 43/54] Add reference to bug report number

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1157 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 5ee2c6f9f..9552f4fa4 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -54,7 +54,7 @@ Bug fixes since 1.3
 - GJChronology
   Text value of ReadablePartial fields was always a decimal number.
 
-- Comparisons of Chronology instances by identity
+- Comparisons of Chronology instances by identity  [1576727]
   Some comparisons of Chronology instances were performed using ==
   This worked fine in most cases due to agressive caching, however it failed when
   using LenientChronology and other wrapping chronologies which do not have caching

From 5dd55066f00e02606e562f257469bc646cdcaba9 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Thu, 2 Nov 2006 23:03:50 +0000
Subject: [PATCH 44/54] Add
 PeriodFormatBuilder.append(PeriodPrinter,PeriodParser)

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1158 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  3 +
 .../time/format/PeriodFormatterBuilder.java   | 87 +++++++++++++------
 .../format/TestPeriodFormatterBuilder.java    | 85 +++++++++++++++++-
 3 files changed, 145 insertions(+), 30 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 9552f4fa4..fed1fd4f7 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -27,6 +27,9 @@ Enhancements since 1.3
 - Period.ZERO
   Add zero-length constant to Period
 
+- PeriodFormatBuilder.append(PeriodPrinter,PeriodParser)
+  This method completes the API of PeriodFormatBuilder in the style of DateTimeFormatBuilder
+
 
 Compatibility with 1.3
 ----------------------
diff --git a/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java b/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java
index a1377497a..88a420104 100644
--- a/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java
+++ b/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java
@@ -89,6 +89,10 @@
 
     // List of Printers and Parsers used to build a final formatter.
     private List iElementPairs;
+    /** Set to true if the formatter is not a printer. */
+    private boolean iNotPrinter;
+    /** Set to true if the formatter is not a parser. */
+    private boolean iNotParser;
 
     // Last PeriodFormatter appended of each field type.
     private FieldFormatter[] iFieldFormatters;
@@ -112,9 +116,10 @@ public PeriodFormatterBuilder() {
      * of the formatter.
      * 
      * @return the newly created formatter
+     * @throws IllegalStateException if the builder can produce neither a printer nor a parser
      */
     public PeriodFormatter toFormatter() {
-        PeriodFormatter formatter = toFormatter(iElementPairs);
+        PeriodFormatter formatter = toFormatter(iElementPairs, iNotPrinter, iNotParser);
         iFieldFormatters = (FieldFormatter[]) iFieldFormatters.clone();
         return formatter;
     }
@@ -129,9 +134,12 @@ public PeriodFormatter toFormatter() {
      * <p>
      * Subsequent changes to this builder do not affect the returned printer.
      * 
-     * @return the newly created printer
+     * @return the newly created printer, null if builder cannot create a printer
      */
     public PeriodPrinter toPrinter() {
+        if (iNotPrinter) {
+            return null;
+        }
         return toFormatter().getPrinter();
     }
 
@@ -145,22 +153,13 @@ public PeriodPrinter toPrinter() {
      * <p>
      * Subsequent changes to this builder do not affect the returned parser.
      * 
-     * @return the newly created parser
+     * @return the newly created parser, null if builder cannot create a parser
      */
     public PeriodParser toParser() {
-        return toFormatter().getParser();
-    }
-
-    private static PeriodFormatter toFormatter(List elementPairs) {
-        int size = elementPairs.size();
-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {
-            Separator sep = (Separator) elementPairs.get(0);
-            PeriodFormatter f = toFormatter(elementPairs.subList(2, size));
-            sep = sep.finish(f.getPrinter(), f.getParser());
-            return new PeriodFormatter(sep, sep);
+        if (iNotParser) {
+            return null;
         }
-        Object[] comp = createComposite(elementPairs);
-        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);
+        return toFormatter().getParser();
     }
 
     //-----------------------------------------------------------------------
@@ -178,6 +177,8 @@ public void clear() {
         } else {
             iElementPairs.clear();
         }
+        iNotPrinter = false;
+        iNotParser = false;
         iFieldFormatters = new FieldFormatter[10];
     }
 
@@ -195,19 +196,25 @@ public PeriodFormatterBuilder append(PeriodFormatter formatter) {
         return this;
     }
 
-//    /**
-//     * Appends a printer parser pair.
-//     *
-//     * @return this PeriodFormatterBuilder
-//     */
-//    public PeriodFormatterBuilder append(PeriodPrinter printer, PeriodParser parser) {
-//        if (printer == null && parser == null) {
-//            throw new IllegalArgumentException("No printer or parser supplied");
-//        }
-//        clearPrefix();
-//        append0(printer, parser);
-//        return this;
-//    }
+    /**
+     * Appends a printer parser pair.
+     * <p>
+     * Either the printer or the parser may be null, in which case the builder will
+     * be unable to produce a parser or printer repectively.
+     *
+     * @param printer  appends a printer to the builder, null if printing is not supported
+     * @param parser  appends a parser to the builder, null if parsing is not supported
+     * @return this PeriodFormatterBuilder
+     * @throw IllegalArgumentException if both the printer and parser are null
+     */
+    public PeriodFormatterBuilder append(PeriodPrinter printer, PeriodParser parser) {
+        if (printer == null && parser == null) {
+            throw new IllegalArgumentException("No printer or parser supplied");
+        }
+        clearPrefix();
+        append0(printer, parser);
+        return this;
+    }
 
     /**
      * Instructs the printer to emit specific text, and the parser to expect it.
@@ -746,9 +753,33 @@ private void clearPrefix() throws IllegalStateException {
     private PeriodFormatterBuilder append0(PeriodPrinter printer, PeriodParser parser) {
         iElementPairs.add(printer);
         iElementPairs.add(parser);
+        iNotPrinter |= (printer == null);
+        iNotParser |= (parser == null);
         return this;
     }
 
+    //-----------------------------------------------------------------------
+    private static PeriodFormatter toFormatter(List elementPairs, boolean notPrinter, boolean notParser) {
+        if (notPrinter && notParser) {
+            throw new IllegalStateException("Builder has created neither a printer nor a parser");
+        }
+        int size = elementPairs.size();
+        if (size >= 2 && elementPairs.get(0) instanceof Separator) {
+            Separator sep = (Separator) elementPairs.get(0);
+            PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);
+            sep = sep.finish(f.getPrinter(), f.getParser());
+            return new PeriodFormatter(sep, sep);
+        }
+        Object[] comp = createComposite(elementPairs);
+        if (notPrinter) {
+            return new PeriodFormatter(null, (PeriodParser) comp[1]);
+        } else if (notParser) {
+            return new PeriodFormatter((PeriodPrinter) comp[0], null);
+        } else {
+            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);
+        }
+    }
+
     private static Object[] createComposite(List elementPairs) {
         switch (elementPairs.size()) {
             case 0:
diff --git a/JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java b/JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java
index 6122186cc..91949327b 100644
--- a/JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java
+++ b/JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java
@@ -41,9 +41,9 @@
     private static final Period TIME_PERIOD = new Period(0, 0, 0, 0, 5, 6, 7, 8);
     private static final Period DATE_PERIOD = new Period(1, 2, 3, 4, 0, 0, 0, 0);
 
-    private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
+    //private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
     private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
-    private static final DateTimeZone TOKYO = DateTimeZone.forID("Asia/Tokyo");
+    //private static final DateTimeZone TOKYO = DateTimeZone.forID("Asia/Tokyo");
 
     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 
                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 
@@ -93,6 +93,14 @@ protected void tearDown() throws Exception {
         originalLocale = null;
     }
 
+    //-----------------------------------------------------------------------
+    public void testToFormatterPrinterParser() {
+        builder.appendYears();
+        assertNotNull(builder.toFormatter());
+        assertNotNull(builder.toPrinter());
+        assertNotNull(builder.toParser());
+    }
+
     //-----------------------------------------------------------------------
     public void testFormatYears() {
         PeriodFormatter f = builder.appendYears().toFormatter();
@@ -613,4 +621,77 @@ public void testFormatPrintZeroNever() {
         assertEquals(0, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null));
     }
 
+    //-----------------------------------------------------------------------
+    public void testFormatAppend_PrinterParser_null_null() {
+        try {
+            new PeriodFormatterBuilder().append(null, null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
+    }
+
+    public void testFormatAppend_PrinterParser_Printer_null() {
+        PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter();
+        PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, null).appendMonths();
+        assertNotNull(bld.toPrinter());
+        assertNull(bld.toParser());
+        
+        PeriodFormatter f = bld.toFormatter();
+        assertEquals("1-2", f.print(PERIOD));
+        try {
+            f.parsePeriod("1-2");
+            fail();
+        } catch (UnsupportedOperationException ex) {}
+    }
+
+    public void testFormatAppend_PrinterParser_null_Parser() {
+        PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser();
+        PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(null, parser).appendMonths();
+        assertNull(bld.toPrinter());
+        assertNotNull(bld.toParser());
+        
+        PeriodFormatter f = bld.toFormatter();
+        try {
+            f.print(PERIOD);
+            fail();
+        } catch (UnsupportedOperationException ex) {}
+        assertEquals(new Period(0, 2, 1, 0, 0, 0, 0, 0), f.parsePeriod("1-2"));
+    }
+
+    public void testFormatAppend_PrinterParser_PrinterParser() {
+        PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter();
+        PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser();
+        PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, parser).appendMonths();
+        assertNotNull(bld.toPrinter());
+        assertNotNull(bld.toParser());
+        
+        PeriodFormatter f = bld.toFormatter();
+        assertEquals("1-2", f.print(PERIOD));
+        assertEquals(new Period(0, 2, 1, 0, 0, 0, 0, 0), f.parsePeriod("1-2"));
+    }
+
+    public void testFormatAppend_PrinterParser_Printer_null_null_Parser() {
+        PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter();
+        PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser();
+        PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, null).append(null, parser);
+        assertNull(bld.toPrinter());
+        assertNull(bld.toParser());
+        
+        try {
+            bld.toFormatter();
+            fail();
+        } catch (IllegalStateException ex) {}
+    }
+
+    public void testFormatAppend_PrinterParserThenClear() {
+        PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter();
+        PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser();
+        PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, null).append(null, parser);
+        assertNull(bld.toPrinter());
+        assertNull(bld.toParser());
+        bld.clear();
+        bld.appendMonths();
+        assertNotNull(bld.toPrinter());
+        assertNotNull(bld.toParser());
+    }
+
 }

From f582cd6cc7364f1792e138771a3625beeee10e3a Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Thu, 2 Nov 2006 23:13:57 +0000
Subject: [PATCH 45/54] Improve javadoc around min printed digits and max
 parsed digits

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1159 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../time/format/PeriodFormatterBuilder.java   | 35 +++++++++++++++++--
 1 file changed, 33 insertions(+), 2 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java b/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java
index 88a420104..820df8eef 100644
--- a/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java
+++ b/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2006 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -329,6 +329,7 @@ public PeriodFormatterBuilder printZeroNever() {
         return this;
     }
 
+    //-----------------------------------------------------------------------
     /**
      * Append a field prefix which applies only to the next appended field. If
      * the field is not printed, neither is the prefix.
@@ -383,8 +384,12 @@ private PeriodFormatterBuilder appendPrefix(PeriodFieldAffix prefix) {
         return this;
     }
 
+    //-----------------------------------------------------------------------
     /**
      * Instruct the printer to emit an integer years field, if supported.
+     * <p>
+     * The number of printed and parsed digits can be controlled using
+     * {@link #minimumPrintedDigits(int)} and {@link #maximumParsedDigits(int)}.
      *
      * @return this PeriodFormatterBuilder
      */
@@ -394,7 +399,10 @@ public PeriodFormatterBuilder appendYears() {
     }
 
     /**
-     * Instruct the printer to emit an integer years field, if supported.
+     * Instruct the printer to emit an integer months field, if supported.
+     * <p>
+     * The number of printed and parsed digits can be controlled using
+     * {@link #minimumPrintedDigits(int)} and {@link #maximumParsedDigits(int)}.
      *
      * @return this PeriodFormatterBuilder
      */
@@ -405,6 +413,9 @@ public PeriodFormatterBuilder appendMonths() {
 
     /**
      * Instruct the printer to emit an integer weeks field, if supported.
+     * <p>
+     * The number of printed and parsed digits can be controlled using
+     * {@link #minimumPrintedDigits(int)} and {@link #maximumParsedDigits(int)}.
      *
      * @return this PeriodFormatterBuilder
      */
@@ -415,6 +426,9 @@ public PeriodFormatterBuilder appendWeeks() {
 
     /**
      * Instruct the printer to emit an integer days field, if supported.
+     * <p>
+     * The number of printed and parsed digits can be controlled using
+     * {@link #minimumPrintedDigits(int)} and {@link #maximumParsedDigits(int)}.
      *
      * @return this PeriodFormatterBuilder
      */
@@ -425,6 +439,9 @@ public PeriodFormatterBuilder appendDays() {
 
     /**
      * Instruct the printer to emit an integer hours field, if supported.
+     * <p>
+     * The number of printed and parsed digits can be controlled using
+     * {@link #minimumPrintedDigits(int)} and {@link #maximumParsedDigits(int)}.
      *
      * @return this PeriodFormatterBuilder
      */
@@ -435,6 +452,9 @@ public PeriodFormatterBuilder appendHours() {
 
     /**
      * Instruct the printer to emit an integer minutes field, if supported.
+     * <p>
+     * The number of printed and parsed digits can be controlled using
+     * {@link #minimumPrintedDigits(int)} and {@link #maximumParsedDigits(int)}.
      *
      * @return this PeriodFormatterBuilder
      */
@@ -445,6 +465,9 @@ public PeriodFormatterBuilder appendMinutes() {
 
     /**
      * Instruct the printer to emit an integer seconds field, if supported.
+     * <p>
+     * The number of printed and parsed digits can be controlled using
+     * {@link #minimumPrintedDigits(int)} and {@link #maximumParsedDigits(int)}.
      *
      * @return this PeriodFormatterBuilder
      */
@@ -479,6 +502,9 @@ public PeriodFormatterBuilder appendSecondsWithOptionalMillis() {
 
     /**
      * Instruct the printer to emit an integer millis field, if supported.
+     * <p>
+     * The number of printed and parsed digits can be controlled using
+     * {@link #minimumPrintedDigits(int)} and {@link #maximumParsedDigits(int)}.
      *
      * @return this PeriodFormatterBuilder
      */
@@ -489,6 +515,8 @@ public PeriodFormatterBuilder appendMillis() {
 
     /**
      * Instruct the printer to emit an integer millis field, if supported.
+     * <p>
+     * The number of arsed digits can be controlled using {@link #maximumParsedDigits(int)}.
      *
      * @return this PeriodFormatterBuilder
      */
@@ -509,6 +537,7 @@ private void appendField(int type, int minPrinted) {
         iPrefix = null;
     }
 
+    //-----------------------------------------------------------------------
     /**
      * Append a field suffix which applies only to the last appended field. If
      * the field is not printed, neither is the suffix.
@@ -581,6 +610,7 @@ private PeriodFormatterBuilder appendSuffix(PeriodFieldAffix suffix) {
         return this;
     }
 
+    //-----------------------------------------------------------------------
     /**
      * Append a separator, which is output if fields are printed both before
      * and after the separator.
@@ -743,6 +773,7 @@ private PeriodFormatterBuilder appendSeparator(String text, String finalText,
         return this;
     }
 
+    //-----------------------------------------------------------------------
     private void clearPrefix() throws IllegalStateException {
         if (iPrefix != null) {
             throw new IllegalStateException("Prefix not followed by field");

From 08edc65712e4c2dc697317a56a53ed2568ca6e25 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Thu, 2 Nov 2006 23:14:43 +0000
Subject: [PATCH 46/54] Copyright date

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1160 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../test/org/joda/time/format/TestPeriodFormatterBuilder.java   | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java b/JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java
index 91949327b..494784c95 100644
--- a/JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java
+++ b/JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2006 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

From 0ad244a6f5ca228d2c681556701b7a48d8ad43b7 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Thu, 2 Nov 2006 23:17:22 +0000
Subject: [PATCH 47/54] Fix minor spelling error pointed out by Matt Benson.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1161 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/java/org/joda/time/format/DateTimeFormatterBuilder.java | 2 +-
 .../src/java/org/joda/time/format/PeriodFormatterBuilder.java   | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java b/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java
index a19c7f8e6..e87ceb755 100644
--- a/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java
+++ b/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java
@@ -39,7 +39,7 @@
  * <p>
  * DateTimeFormatterBuilder is used for constructing formatters which are then
  * used to print or parse. The formatters are built by appending specific fields
- * or other formatters to an instanece of this builder.
+ * or other formatters to an instance of this builder.
  * <p>
  * For example, a formatter that prints month and year, like "January 1970",
  * can be constructed as follows:
diff --git a/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java b/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java
index 820df8eef..dc65ab5bc 100644
--- a/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java
+++ b/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java
@@ -38,7 +38,7 @@
  * <p>
  * PeriodFormatterBuilder is used for constructing formatters which are then
  * used to print or parse. The formatters are built by appending specific fields
- * or other formatters to an instanece of this builder.
+ * or other formatters to an instance of this builder.
  * <p>
  * For example, a formatter that prints years and months, like "15 years and 8 months",
  * can be constructed as follows:

From 0abca338830bed8abd5da067f8abb955d128608c Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Thu, 2 Nov 2006 23:43:05 +0000
Subject: [PATCH 48/54] Add related projects page to advertise OSS projects
 built on top of Joda-Time

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1162 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/navigation.xml |  1 +
 JodaTime/xdocs/related.xml    | 35 +++++++++++++++++++++++++++++++++++
 2 files changed, 36 insertions(+)
 create mode 100644 JodaTime/xdocs/related.xml

diff --git a/JodaTime/xdocs/navigation.xml b/JodaTime/xdocs/navigation.xml
index aeb684de3..3f27b8737 100644
--- a/JodaTime/xdocs/navigation.xml
+++ b/JodaTime/xdocs/navigation.xml
@@ -18,6 +18,7 @@
       <item name="Quick start guide" href="/quickstart.html"/>
       <item name="Users guide" href="/userguide.html"/>
       <item name="FAQ" href="/faq.html"/>
+      <item name="Related projects" href="/related.html"/>
       <item name="Javadoc (Release)" href="/api-release/index.html"/>
       <item name="License" href="/license.html"/>
       <item name="Download" href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=104212"/>
diff --git a/JodaTime/xdocs/related.xml b/JodaTime/xdocs/related.xml
new file mode 100644
index 000000000..691e87c77
--- /dev/null
+++ b/JodaTime/xdocs/related.xml
@@ -0,0 +1,35 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+
+<document>
+
+ <properties>
+  <title>Java date and time API - Related projects</title>
+  <author email="scolebourne.at.users.sourceforge.net">Stephen Colebourne</author>
+ </properties>
+
+ <body>
+
+<section name="Related projects">
+<p>
+A number of libraries and applications are now built using Joda-Time.
+</p>
+<ul>
+<li><a href="http://joda-time.sourceforge.net/contrib/hibernate/index.html">Hibernate support</a>
+A set of classes to link Joda-Time to databases using Hibernate.</li>
+<li><a href="http://joda-time.sourceforge.net/contrib/jsptags/index.html">JSP tag support</a>
+A tag library in the style of JSTL to allow Joda-Time classes to be used in JSP.</li>
+<li><a href="http://joda-time.sourceforge.net/contrib/i18n/index.html">I18N support</a>
+A simple library that provides additional internationalization data for Joda-Time.</li>
+<li><a href="http://objectlabkit.sourceforge.net/">Holiday calculation</a>
+Support for working and non-working days, plus how to calculate and resolve holidays.</li>
+<li><a href="http://code.google.com/p/google-rfc-2445/">Recurrance (RFC 2445)</a>
+Support for the RFC2445 recurrance specification, as found in iCal.</li>
+</ul>
+<p>
+If your open source library provides a value added feature on top of Joda-Time, then let us know!
+</p>
+
+</section>
+
+</body>
+</document>

From 320d7ec63df0991f1831918f1675fccc2c8cdd67 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Tue, 7 Nov 2006 03:47:34 +0000
Subject: [PATCH 49/54] Updated tz database to version 2006o.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1163 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  2 +-
 .../src/java/org/joda/time/tz/src/Readme.txt  |  2 +-
 .../src/java/org/joda/time/tz/src/antarctica  | 28 +++---
 JodaTime/src/java/org/joda/time/tz/src/asia   |  2 +-
 .../java/org/joda/time/tz/src/northamerica    | 15 ++--
 .../java/org/joda/time/tz/src/southamerica    | 86 +++++++++++--------
 6 files changed, 78 insertions(+), 57 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index fed1fd4f7..e726c75dd 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -43,7 +43,7 @@ Source compatible - Yes, except
 Serialization compatible - Yes
 
 Data compatible - Yes
-  - DateTimeZone data updated to version 2006n
+  - DateTimeZone data updated to version 2006o
 
 Semantic compatible - Yes
 
diff --git a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
index af8383ee6..e88721128 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
+++ b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
@@ -1,2 +1,2 @@
 The data files in this directory were obtained from the public tz database,
-http://www.twinsun.com/tz/tz-link.htm, version 2006n.
+http://www.twinsun.com/tz/tz-link.htm, version 2006o.
diff --git a/JodaTime/src/java/org/joda/time/tz/src/antarctica b/JodaTime/src/java/org/joda/time/tz/src/antarctica
index 885824ca8..6fce7828f 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/antarctica
+++ b/JodaTime/src/java/org/joda/time/tz/src/antarctica
@@ -1,4 +1,4 @@
-# @(#)antarctica	8.2
+# @(#)antarctica	8.3
 # <pre>
 
 # From Paul Eggert (1999-11-15):
@@ -33,19 +33,27 @@ Rule	RussAQ	1996	max	-	Oct	lastSun	 2:00s	0	-
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	ArgAQ	1964	1966	-	Mar	 1	0:00	0	-
 Rule	ArgAQ	1964	1966	-	Oct	15	0:00	1:00	S
-Rule	ArgAQ	1967	only	-	Apr	 1	0:00	0	-
+Rule	ArgAQ	1967	only	-	Apr	 2	0:00	0	-
 Rule	ArgAQ	1967	1968	-	Oct	Sun>=1	0:00	1:00	S
 Rule	ArgAQ	1968	1969	-	Apr	Sun>=1	0:00	0	-
 Rule	ArgAQ	1974	only	-	Jan	23	0:00	1:00	S
 Rule	ArgAQ	1974	only	-	May	 1	0:00	0	-
-Rule	ArgAQ	1974	1976	-	Oct	Sun>=1	0:00	1:00	S
-Rule	ArgAQ	1975	1977	-	Apr	Sun>=1	0:00	0	-
-Rule	ChileAQ	1966	1997	-	Oct	Sun>=9	0:00	1:00	S
-Rule	ChileAQ	1967	1998	-	Mar	Sun>=9	0:00	0	-
-Rule	ChileAQ	1998	only	-	Sep	27	0:00	1:00	S
-Rule	ChileAQ	1999	only	-	Apr	 4	0:00	0	-
-Rule	ChileAQ	1999	max	-	Oct	Sun>=9	0:00	1:00	S
-Rule	ChileAQ	2000	max	-	Mar	Sun>=9	0:00	0	-
+Rule	ChileAQ	1972	1986	-	Mar	Sun>=9	3:00u	0	-
+Rule	ChileAQ	1974	1987	-	Oct	Sun>=9	4:00u	1:00	S
+Rule	ChileAQ	1987	only	-	Apr	12	3:00u	0	-
+Rule	ChileAQ	1988	1989	-	Mar	Sun>=9	3:00u	0	-
+Rule	ChileAQ	1988	only	-	Oct	Sun>=1	4:00u	1:00	S
+Rule	ChileAQ	1989	only	-	Oct	Sun>=9	4:00u	1:00	S
+Rule	ChileAQ	1990	only	-	Mar	18	3:00u	0	-
+Rule	ChileAQ	1990	only	-	Sep	16	4:00u	1:00	S
+Rule	ChileAQ	1991	1996	-	Mar	Sun>=9	3:00u	0	-
+Rule	ChileAQ	1991	1997	-	Oct	Sun>=9	4:00u	1:00	S
+Rule	ChileAQ	1997	only	-	Mar	30	3:00u	0	-
+Rule	ChileAQ	1998	only	-	Mar	Sun>=9	3:00u	0	-
+Rule	ChileAQ	1998	only	-	Sep	27	4:00u	1:00	S
+Rule	ChileAQ	1999	only	-	Apr	 4	3:00u	0	-
+Rule	ChileAQ	1999	max	-	Oct	Sun>=9	4:00u	1:00	S
+Rule	ChileAQ	2000	max	-	Mar	Sun>=9	3:00u	0	-
 
 
 # Argentina - year-round bases
diff --git a/JodaTime/src/java/org/joda/time/tz/src/asia b/JodaTime/src/java/org/joda/time/tz/src/asia
index 2b1da68e9..159453215 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/asia
+++ b/JodaTime/src/java/org/joda/time/tz/src/asia
@@ -1,4 +1,4 @@
-# %W%
+# @(#)asia	8.8
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
diff --git a/JodaTime/src/java/org/joda/time/tz/src/northamerica b/JodaTime/src/java/org/joda/time/tz/src/northamerica
index 1d686e3a3..3f7f346ad 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/northamerica
+++ b/JodaTime/src/java/org/joda/time/tz/src/northamerica
@@ -1,4 +1,4 @@
-# @(#)northamerica	8.9
+# @(#)northamerica	8.10
 # <pre>
 
 # also includes Central America and the Caribbean
@@ -2096,10 +2096,13 @@ Zone America/Costa_Rica	-5:36:20 -	LMT	1890		# San Jose
 # adjustment in Cuba.  We will stay in daylight saving time:
 # http://www.granma.cu/espanol/2005/noviembre/mier9/horario.html
 
-# From Steffen Thorsen (2006-08-17):
-# It is likely that they are not reverting back to standard time this
-# year either, based on the number of responses I have got from users
-# (when my site claimed Cuba will end DST on lastSun/October)
+# From Jesper Norgaard Welen (2006-10-21):
+# An article in GRANMA INTERNACIONAL claims that Cuba will end
+# the 3 years of permanent DST next weekend, see
+# http://www.granma.cu/ingles/2006/octubre/lun16/43horario.html
+# "On Saturday night, October 28 going into Sunday, October 29, at 01:00,
+# watches should be set back one hour -- going back to 00:00 hours -- returning
+# to the normal schedule....
 
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Cuba	1928	only	-	Jun	10	0:00	1:00	D
@@ -2131,7 +2134,7 @@ Rule	Cuba	1997	only	-	Oct	12	0:00s	0	S
 Rule	Cuba	1998	1999	-	Mar	lastSun	0:00s	1:00	D
 Rule	Cuba	1998	2003	-	Oct	lastSun	0:00s	0	S
 Rule	Cuba	2000	max	-	Apr	Sun>=1	0:00s	1:00	D
-Rule	Cuba	2007	max	-	Oct	lastSun	0:00s	0	S
+Rule	Cuba	2006	max	-	Oct	lastSun	0:00s	0	S
 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	America/Havana	-5:29:28 -	LMT	1890
diff --git a/JodaTime/src/java/org/joda/time/tz/src/southamerica b/JodaTime/src/java/org/joda/time/tz/src/southamerica
index d7d7c6518..796948ff9 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/southamerica
+++ b/JodaTime/src/java/org/joda/time/tz/src/southamerica
@@ -1,4 +1,4 @@
-# %W%
+# @(#)southamerica	8.6
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
@@ -704,53 +704,64 @@ Zone America/Rio_Branco	-4:31:12 -	LMT	1914
 # Because of the same drought, the government decided to end DST later,
 # on April 3, (one-time change).
 
-# From Gwillim Law (2001-05-04):
-# I came across another article in "La Tercera" about Chilean DST.
-# <http://www.tercera.cl/diario/2000/10/13/t-extras.html>
-# It clearly confirms my earlier suggestion, that DST begins at 22:00
-# on Easter Island....  But it also seems to be saying that the
-# observance of DST in Chile began in 1966, rather than 1969 as
-# ... [Shanks & Pottenger have] it....
-#
-# My translation:
-#
-# "The Chilean Army has announced that summer time will begin tomorrow,
-# Saturday, October 14 in continental Chile, insular Chile, and
-# Antarctica, as provided by Supreme Decree 25 of January 11, 1966.
-# By the preceding, official time in continental Chile and Chilean
-# Antarctic, and official time in Western Insular Chile, which applies
-# to Easter Island and Sala y Gomez Island, will be set forward at
-# midnight and at 22:00, respectively, by 20 minutes."
+# From Oscar van Vlijmen (2006-10-08):
+# http://www.horaoficial.cl/cambio.htm
 
-# From Paul Eggert (2006-03-22):
-# Go with Law in preference to Shanks & Pottenger's 1969 date for modern DST.
-# Assume this rule has been used since DST was introduced in the islands.
+# From Jesper Norgaard Welen (2006-10-08):
+# I think that there are some obvious mistakes in the suggested link
+# from Oscar van Vlijmen,... for instance entry 66 says that GMT-4
+# ended 1990-09-12 while entry 67 only begins GMT-3 at 1990-09-15
+# (they should have been 1990-09-15 and 1990-09-16 respectively), but
+# anyhow it clears up some doubts too.
 
-# From Paul Eggert (2002-10-24):
-# <http://www.shoa.cl/shoa/faqhoraoficial.htm> gives many details that
-# disagree with the following table, but we haven't had time to compare them.
+# The following data are from <http://www.horaoficial.cl/horaof.htm>
+# (2006-09-20), transcribed by Jesper Norgaard Welen.
 
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Chile	1918	only	-	Sep	 1	0:00	1:00	S
-Rule	Chile	1919	only	-	Jul	 2	0:00	0	-
-Rule	Chile	1927	1931	-	Sep	 1	0:00	1:00	S
+Rule	Chile	1927	1932	-	Sep	 1	0:00	1:00	S
 Rule	Chile	1928	1932	-	Apr	 1	0:00	0	-
-Rule	Chile	1966	1997	-	Oct	Sun>=9	4:00u	1:00	S
-Rule	Chile	1967	1998	-	Mar	Sun>=9	3:00u	0	-
+Rule	Chile	1942	only	-	Jun	 1	4:00u	0	-
+Rule	Chile	1942	only	-	Aug	 1	5:00u	1:00	S
+Rule	Chile	1946	only	-	Jul	15	4:00u	1:00	S
+Rule	Chile	1946	only	-	Sep	 1	3:00u	0:00	-
+Rule	Chile	1947	only	-	Apr	 1	4:00u	0	-
+Rule	Chile	1968	only	-	Nov	 3	4:00u	1:00	S
+Rule	Chile	1969	only	-	Mar	30	3:00u	0	-
+Rule	Chile	1969	only	-	Nov	23	4:00u	1:00	S
+Rule	Chile	1970	only	-	Mar	29	3:00u	0	-
+Rule	Chile	1971	only	-	Mar	14	3:00u	0	-
+Rule	Chile	1970	1972	-	Oct	Sun>=9	4:00u	1:00	S
+Rule	Chile	1972	1986	-	Mar	Sun>=9	3:00u	0	-
+Rule	Chile	1973	only	-	Sep	30	4:00u	1:00	S
+Rule	Chile	1974	1987	-	Oct	Sun>=9	4:00u	1:00	S
+Rule	Chile	1987	only	-	Apr	12	3:00u	0	-
+Rule	Chile	1988	1989	-	Mar	Sun>=9	3:00u	0	-
+Rule	Chile	1988	only	-	Oct	Sun>=1	4:00u	1:00	S
+Rule	Chile	1989	only	-	Oct	Sun>=9	4:00u	1:00	S
+Rule	Chile	1990	only	-	Mar	18	3:00u	0	-
+Rule	Chile	1990	only	-	Sep	16	4:00u	1:00	S
+Rule	Chile	1991	1996	-	Mar	Sun>=9	3:00u	0	-
+Rule	Chile	1991	1997	-	Oct	Sun>=9	4:00u	1:00	S
+Rule	Chile	1997	only	-	Mar	30	3:00u	0	-
+Rule	Chile	1998	only	-	Mar	Sun>=9	3:00u	0	-
 Rule	Chile	1998	only	-	Sep	27	4:00u	1:00	S
 Rule	Chile	1999	only	-	Apr	 4	3:00u	0	-
 Rule	Chile	1999	max	-	Oct	Sun>=9	4:00u	1:00	S
 Rule	Chile	2000	max	-	Mar	Sun>=9	3:00u	0	-
-# IATA SSIM anomalies: (1990-09) says 1990-09-16; (1992-02) says 1992-03-14;
+# IATA SSIM anomalies: (1992-02) says 1992-03-14;
 # (1996-09) says 1998-03-08.  Ignore these.
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Santiago	-4:42:40 -	LMT	1890
-			-4:42:40 -	SMT	1910	    # Santiago Mean Time
-			-5:00	Chile	CL%sT	1932 Sep    # Chile Time
+Zone America/Santiago	-4:42:46 -	LMT	1890
+			-4:42:46 -	SMT	1910 	    # Santiago Mean Time
+			-5:00	-	CLT	1916 Jul  1 # Chile Time
+			-4:42:46 -	SMT	1918 Sep  1 # Santiago Mean Time
+			-4:00	-	CLT	1919 Jul  1 # Chile Time
+			-4:42:46 -	SMT	1927 Sep  1 # Santiago Mean Time
+			-5:00	Chile	CL%sT	1947 May 22 # Chile Time
 			-4:00	Chile	CL%sT
 Zone Pacific/Easter	-7:17:28 -	LMT	1890	    # Mataveri
 			-7:17:28 -	MMT	1932 Sep    # Mataveri Mean Time
-			-7:00	Chile	EAS%sT	1982 Mar 13 21:00 # Easter I Time
+			-7:00	Chile	EAS%sT	1982 Jan 18 21:00 # Easter I Time
 			-6:00	Chile	EAS%sT
 #
 # Sala y Gomez Island is like Pacific/Easter.
@@ -918,9 +929,6 @@ Rule	Para	1996	only	-	Mar	 1	0:00	0	-
 # year, the time will change on the first Sunday of October; likewise, the
 # clock will be set back on the first Sunday of March.
 #
-# From Jesper Norgaard (2001-03-06) [an official URL saying similar things]:
-# http://gateway.abc.com.py:8000/pub/pag04.mbr/artic?FHA=2001-03-03-02.24.52.900592
-#
 Rule	Para	1996	2001	-	Oct	Sun>=1	0:00	1:00	S
 # IATA SSIM (1997-09) says Mar 1; go with Shanks & Pottenger.
 Rule	Para	1997	only	-	Feb	lastSun	0:00	0	-
@@ -938,7 +946,9 @@ Rule	Para	2002	2003	-	Sep	Sun>=1	0:00	1:00	S
 # There are several sources that claim that Paraguay made
 # a timezone rule change in autumn 2004.
 # From Steffen Thorsen (2005-01-05):
-# Decree 1,867 (2004-03-05) <http://www.labor.com.py/noticias.asp?id=27>
+# Decree 1,867 (2004-03-05)
+# From Carlos Raul Perasso via Jesper Norgaard Welen (2006-10-13)
+# <http://www.presidencia.gov.py/decretos/D1867.pdf>
 Rule	Para	2004	max	-	Oct	Sun>=15	0:00	1:00	S
 Rule	Para	2005	max	-	Mar	Sun>=8	0:00	0	-
 

From 72c5b5943264b8c49e7f5fcdbad8c302998dbbc0 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 7 Nov 2006 22:59:46 +0000
Subject: [PATCH 50/54] Javadoc

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1164 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java b/JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java
index d6144c0e9..c68d3e631 100644
--- a/JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java
+++ b/JodaTime/src/java/org/joda/time/base/BaseSingleFieldPeriod.java
@@ -323,6 +323,8 @@ public int hashCode() {
      *
      * @param other  the other period, must not be null
      * @return zero if equal, positive if greater, negative if less
+     * @throws NullPointerException if the other period is null
+     * @throws ClassCastException if the other period is of a different type
      */
     public int compareTo(Object other) {
         if (other.getClass() != getClass()) {

From 513a3a99b271046d7ca289d1e3971a27d8a642b7 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 12 Nov 2006 22:04:57 +0000
Subject: [PATCH 51/54] Rephrase related projects section

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1165 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index e726c75dd..01626dfc7 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -14,7 +14,8 @@ This is the same license as all of Apache, plus other open source projects such
 The intent is to make the code available to the Java community with the minimum
 of restrictions. If the license causes you problems please contact the mailing list.
 
-** Please also check out the JSP, Hibernate and I18N contributed projects **
+*  Please also check out our related projects   *
+* http://joda-time.sourceforge.net/related.html *
 
 
 Enhancements since 1.3

From 3831b300ad0fe837c636fb5140368ef4b0bd88ea Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 12 Nov 2006 22:50:41 +0000
Subject: [PATCH 52/54] Pre release 1.4

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1166 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/ToDo.txt               |  6 +--
 JodaTime/build.xml              |  4 +-
 JodaTime/project.properties     |  2 +-
 JodaTime/project.xml            |  2 +-
 JodaTime/xdocs/index.xml        |  7 +--
 JodaTime/xdocs/installation.xml |  5 +-
 JodaTime/xdocs/upgradeto140.xml | 88 +++++++++++++++++++++++++++++++++
 7 files changed, 102 insertions(+), 12 deletions(-)
 create mode 100644 JodaTime/xdocs/upgradeto140.xml

diff --git a/JodaTime/ToDo.txt b/JodaTime/ToDo.txt
index 2cf804695..4a25664b9 100644
--- a/JodaTime/ToDo.txt
+++ b/JodaTime/ToDo.txt
@@ -1,13 +1,13 @@
 JodaTime ToDo list
 ==================
 
-For 1.4
+For 1.5
 -------
 
-The TODO list for 1.4 has not been set yet.
+The TODO list for 1.5 has not been set yet.
 Some of the following are likely targets, as they are interesting ideas.
 
-Join joda-interest@lists.sourceforge.net to help out!
+Join joda-interest.at.lists.sourceforge.net to help out!
 
 
 Ideas
diff --git a/JodaTime/build.xml b/JodaTime/build.xml
index 487113972..77cda4423 100644
--- a/JodaTime/build.xml
+++ b/JodaTime/build.xml
@@ -27,8 +27,8 @@
   <property name="component.title"         value="Joda date and time"/>
 
   <!-- The current version number of this component -->
-  <property name="component.version"       value="1.3"/>
-  <property name="previous.version"        value="1.2"/>
+  <property name="component.version"       value="1.4"/>
+  <property name="previous.version"        value="1.3"/>
 
   <!-- The current version number of this component -->
   <property name="component.fullname"      value="${component.name}-${component.version}"/>
diff --git a/JodaTime/project.properties b/JodaTime/project.properties
index 54b0b9b04..3820da5f3 100644
--- a/JodaTime/project.properties
+++ b/JodaTime/project.properties
@@ -17,5 +17,5 @@ maven.javadoc.public=true
 maven.javadoc.package=false
 maven.javadoc.private=false
 
-maven.jdiff.old.tag=v1_2_000
+maven.jdiff.old.tag=v1_3_000
 maven.jdiff.new.tag=CURRENT
diff --git a/JodaTime/project.xml b/JodaTime/project.xml
index 7fd987439..0413a1948 100644
--- a/JodaTime/project.xml
+++ b/JodaTime/project.xml
@@ -7,7 +7,7 @@
   <groupId>joda-time</groupId>
   <artifactId>joda-time</artifactId>
   <name>Joda time</name>
-  <currentVersion>1.3</currentVersion>
+  <currentVersion>1.4</currentVersion>
   <organization>
     <name>Joda.org</name>
     <url>http://www.joda.org</url>
diff --git a/JodaTime/xdocs/index.xml b/JodaTime/xdocs/index.xml
index 8e10add5b..d7f876f48 100644
--- a/JodaTime/xdocs/index.xml
+++ b/JodaTime/xdocs/index.xml
@@ -54,7 +54,7 @@ public boolean isJoinedInLastThreeMonths(<a href="api-release/index.html?org/jod
   return last3Months.contains(datetimeJoined);
 }
 -->
-Version 1.3 was released on 2006-08-02 -
+Version 1.4 was released on 2006-11-12 -
 <a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=104212">Download now</a>
 </p>
 </section>
@@ -113,7 +113,8 @@ is extremely detailed and covers the rest of the API.</li>
 <li><b>Maturity</b>.
 The library has been under active development since 2002.
 Although it continues to be improved with the addition of new features and
-bug-fixes, it is a mature and reliable code base.</li>
+bug-fixes, it is a mature and reliable code base.
+A number of <a href="related.html">related projects</a> are now available.</li>
 
 <li><b>Open Source</b>.
 Joda-Time is licenced under the business friendly <a href="license.html">Apache License Version 2.0</a>.</li>
@@ -138,7 +139,7 @@ Various documentation is available:
 
 <section name="Releases">
 <p>
-<a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=104212">Release 1.3</a>
+<a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=104212">Release 1.4</a>
 is the current latest release.
 This release is considered stable and worthy of the 1.x tag.
 It has extensive testing suites and has been used in production.
diff --git a/JodaTime/xdocs/installation.xml b/JodaTime/xdocs/installation.xml
index 244a4ec0a..5db27b0b6 100644
--- a/JodaTime/xdocs/installation.xml
+++ b/JodaTime/xdocs/installation.xml
@@ -12,16 +12,17 @@
 <p>
 To use Joda-Time you need to
 <a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=104212">download the latest version</a>.
-The download will contain the joda-time-1.3.jar.
+The download will contain the joda-time-1.4.jar.
 Once you add this to your classpath you will be able to use Joda-Time.
 </p>
 <p>
-The binary download also includes joda-time-1.3-src-ide.zip, which is a zip file
+The binary download also includes joda-time-1.4-src-ide.zip, which is a zip file
 of the source code suitable for linking to the jar file in IDEs such as Eclipse.
 </p>
 <p>
 The release notes for upgraders can be found here:
 <ul>
+<li><a href="upgradeto140.html">Version 1.3 to Version 1.4</a></li>
 <li><a href="upgradeto130.html">Version 1.2 to Version 1.3</a></li>
 <li><a href="upgradeto120.html">Version 1.1 to Version 1.2</a></li>
 <li><a href="upgradeto110.html">Version 1.0 to Version 1.1</a></li>
diff --git a/JodaTime/xdocs/upgradeto140.xml b/JodaTime/xdocs/upgradeto140.xml
new file mode 100644
index 000000000..30bed366e
--- /dev/null
+++ b/JodaTime/xdocs/upgradeto140.xml
@@ -0,0 +1,88 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+
+<document>
+ <properties>
+  <title>Java date and time API - Upgrade from 1.3 to 1.4</title>
+  <author email="scolebourne.at.users.sourceforge.net">Stephen Colebourne</author>
+ </properties>
+
+<body>
+
+<section name="Upgrade">
+<p>
+These are the release notes and advice for upgrading Joda-Time from
+version 1.3 to version 1.4.
+<source>
+Joda-Time version 1.4
+---------------------
+
+Joda-Time is a date and time handling library that seeks to replace the JDK
+Date and Calendar classes.
+
+This is the fifth full release of Joda-Time.
+This release focuses on new features, but also include some bug fixes.
+
+We recommend JDK 1.3 or later, and have performed no testing on earlier JDKs.
+
+Joda-Time is licensed under the business-friendly Apache License Version 2.
+This is the same license as all of Apache, plus other open source projects such as Spring.
+The intent is to make the code available to the Java community with the minimum
+of restrictions. If the license causes you problems please contact the mailing list.
+
+*  Please also check out our related projects   *
+* http://joda-time.sourceforge.net/related.html *
+
+
+Enhancements since 1.3
+----------------------
+- Years/Months/Weeks/Days/Hours/Minutes/Seconds
+  New group of single field period classes
+  These allow applications to specify a specific field in method signatures and calculations
+  Methods are provided to convert between most of these based on standard length periods
+
+- Period.ZERO
+  Add zero-length constant to Period
+
+- PeriodFormatBuilder.append(PeriodPrinter,PeriodParser)
+  This method completes the API of PeriodFormatBuilder in the style of DateTimeFormatBuilder
+
+
+Compatibility with 1.3
+----------------------
+Binary compatible - Yes
+
+Source compatible - Yes, except
+  If you subclassed AbstractReadableInstantFieldProperty (unlikely) then
+  you now need to override getChronology() to re-enable the equals() and
+  hashCode() methods.
+
+Serialization compatible - Yes
+
+Data compatible - Yes
+  - DateTimeZone data updated to version 2006o
+
+Semantic compatible - Yes
+
+
+Deprecations since 1.3
+----------------------
+
+
+Bug fixes since 1.3
+-------------------
+- GJChronology
+  Text value of ReadablePartial fields was always a decimal number.
+
+- Comparisons of Chronology instances by identity  [1576727]
+  Some comparisons of Chronology instances were performed using ==
+  This worked fine in most cases due to agressive caching, however it failed when
+  using LenientChronology and other wrapping chronologies which do not have caching
+  Comparison is now via equals(), and involved adding equals() methods to a number
+  of classes. In addition, subclasses of AbstractReadableInstantFieldProperty must
+  now implement getChronology().
+</source>
+</p>
+</section>
+
+</body>
+</document>

From 0fc3fc03edaf0325e77c58acc7bcc54c573e4537 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 12 Nov 2006 22:56:40 +0000
Subject: [PATCH 53/54] Pre release 1.4

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1167 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/conf/MANIFEST.MF | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/JodaTime/src/conf/MANIFEST.MF b/JodaTime/src/conf/MANIFEST.MF
index 99d9f3f3b..b7b0ee030 100644
--- a/JodaTime/src/conf/MANIFEST.MF
+++ b/JodaTime/src/conf/MANIFEST.MF
@@ -2,7 +2,7 @@ Package: org.joda.time
 Extension-Name: @name@
 Specification-Title: Joda-Time
 Specification-Vendor: Joda.org
-Specification-Version: 1.3
+Specification-Version: 1.4
 Implementation-Vendor: Joda.org
 Implementation-Title: org.joda.time
 Implementation-Version: @version@

From 4ed0a632d96b81be2279b09b890137f76c8ee4f1 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 12 Nov 2006 23:08:28 +0000
Subject: [PATCH 54/54] Javadoc

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1168 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/java/org/joda/time/format/PeriodFormatterBuilder.java   | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java b/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java
index dc65ab5bc..c67832fec 100644
--- a/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java
+++ b/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java
@@ -205,7 +205,7 @@ public PeriodFormatterBuilder append(PeriodFormatter formatter) {
      * @param printer  appends a printer to the builder, null if printing is not supported
      * @param parser  appends a parser to the builder, null if parsing is not supported
      * @return this PeriodFormatterBuilder
-     * @throw IllegalArgumentException if both the printer and parser are null
+     * @throws IllegalArgumentException if both the printer and parser are null
      */
     public PeriodFormatterBuilder append(PeriodPrinter printer, PeriodParser parser) {
         if (printer == null && parser == null) {