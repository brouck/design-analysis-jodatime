From ad3e968db59c8e717c6314a8cd44f054b1718dce Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Tue, 14 Nov 2006 16:03:30 +0000
Subject: [PATCH 001/112] Workaround for ConcurrentModificationException by
 some JVMs.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1171 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java | 7 +++++--
 1 file changed, 5 insertions(+), 2 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java b/JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java
index c486d5b1d..ef3d9e7f2 100644
--- a/JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java
+++ b/JodaTime/src/java/org/joda/time/tz/ZoneInfoProvider.java
@@ -21,10 +21,10 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.lang.ref.SoftReference;
-import java.util.Collections;
 import java.util.Map;
 import java.util.Set;
 import java.util.TreeMap;
+import java.util.TreeSet;
 
 import org.joda.time.DateTimeZone;
 
@@ -166,7 +166,10 @@ public synchronized DateTimeZone getZone(String id) {
      * @return the zone ids
      */
     public synchronized Set getAvailableIDs() {
-        return Collections.unmodifiableSet(iZoneInfoMap.keySet());
+        // Return a copy of the keys rather than an umodifiable collection.
+        // This prevents ConcurrentModificationExceptions from being thrown by
+        // some JVMs if zones are opened while this set is iterated over.
+        return new TreeSet(iZoneInfoMap.keySet());
     }
 
     /**

From ef66bcdf47062663f802ccfc05fd5ae902e8dc0f Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Tue, 28 Nov 2006 05:23:35 +0000
Subject: [PATCH 002/112] Updated tz database to version 2006p.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1172 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  2 +-
 .../src/java/org/joda/time/tz/src/Readme.txt  |  2 +-
 .../src/java/org/joda/time/tz/src/australasia | 26 +++++++++++++------
 3 files changed, 20 insertions(+), 10 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 01626dfc7..b91cb4fd8 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -44,7 +44,7 @@ Source compatible - Yes, except
 Serialization compatible - Yes
 
 Data compatible - Yes
-  - DateTimeZone data updated to version 2006o
+  - DateTimeZone data updated to version 2006p
 
 Semantic compatible - Yes
 
diff --git a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
index e88721128..eed138d6a 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
+++ b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
@@ -1,2 +1,2 @@
 The data files in this directory were obtained from the public tz database,
-http://www.twinsun.com/tz/tz-link.htm, version 2006o.
+http://www.twinsun.com/tz/tz-link.htm, version 2006p.
diff --git a/JodaTime/src/java/org/joda/time/tz/src/australasia b/JodaTime/src/java/org/joda/time/tz/src/australasia
index 2baeb7217..875eca8fd 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/australasia
+++ b/JodaTime/src/java/org/joda/time/tz/src/australasia
@@ -1,4 +1,4 @@
-# @(#)australasia	8.3
+# @(#)australasia	8.4
 # <pre>
 
 # This file also includes Pacific islands.
@@ -29,15 +29,25 @@ Zone Australia/Darwin	 8:43:20 -	LMT	1895 Feb
 			 9:00	-	CST	1899 May
 			 9:30	Aus	CST
 # Western Australia
+#
+# From Christopher Hunt (2006-11-21), after an advance warning
+# from Jesper Norgaard Welen (2006-11-01):
+# WA are trialing DST for three years. 
+# <http://www.parliament.wa.gov.au/parliament/bills.nsf/62D4F7C55EA88993482572110007316A/$File/Bill174-1.pdf>
+#
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule	AW	1974	only	-	Oct	lastSun	2:00s	1:00	-
+Rule	AW	1975	only	-	Mar	Sun>=1	2:00s	0	-
+Rule	AW	1983	only	-	Oct	lastSun	2:00s	1:00	-
+Rule	AW	1984	only	-	Mar	Sun>=1	2:00s	0	-
+Rule	AW	1991	only	-	Nov	17	2:00s	1:00	-
+Rule	AW	1992	only	-	Mar	Sun>=1	2:00s	0	-
+Rule	AW	2006	only	-	Dec	 3	2:00s	1:00	-
+Rule	AW	2007	2009	-	Mar	lastSun	2:00s	0	-
+Rule	AW	2007	2008	-	Oct	lastSun	2:00s	1:00	-
 Zone Australia/Perth	 7:43:24 -	LMT	1895 Dec
 			 8:00	Aus	WST	1943 Jul
-			 8:00	-	WST	1974 Oct lastSun 2:00s
-			 8:00	1:00	WST	1975 Mar Sun>=1 2:00s
-			 8:00	-	WST	1983 Oct lastSun 2:00s
-			 8:00	1:00	WST	1984 Mar Sun>=1 2:00s
-			 8:00	-	WST	1991 Nov 17 2:00s
-			 8:00	1:00	WST	1992 Mar Sun>=1 2:00s
-			 8:00	-	WST
+			 8:00	AW	WST
 # Queensland
 #
 # From Alex Livingston (1996-11-01):

From d10d1575fb2041aaa3fa93333518107969f98841 Mon Sep 17 00:00:00 2001
From: Christopher Gardner <chris_gardner76@yahoo.com>
Date: Wed, 3 Jan 2007 13:58:55 +0000
Subject: [PATCH 003/112] Initial import of Persistent Interval support.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1173 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../contrib/hibernate/PersistentInterval.java | 162 ++++++++++++++++++
 .../org/joda/time/contrib/hibernate/Plan.java |  38 ++++
 .../hibernate/TestPersistentInterval.java     | 117 +++++++++++++
 .../joda/time/contrib/hibernate/plan.hbm.xml  |  19 ++
 4 files changed, 336 insertions(+)
 create mode 100644 JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInterval.java
 create mode 100644 JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/Plan.java
 create mode 100644 JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentInterval.java
 create mode 100644 JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/plan.hbm.xml

diff --git a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInterval.java b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInterval.java
new file mode 100644
index 000000000..de9a300a8
--- /dev/null
+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInterval.java
@@ -0,0 +1,162 @@
+/*
+ *  Copyright 2001-2005 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.contrib.hibernate;
+
+import java.io.Serializable;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Timestamp;
+
+import org.hibernate.Hibernate;
+import org.hibernate.HibernateException;
+import org.hibernate.engine.SessionImplementor;
+import org.hibernate.type.Type;
+import org.hibernate.usertype.CompositeUserType;
+import org.joda.time.DateTime;
+import org.joda.time.Interval;
+import org.joda.time.contrib.hibernate.PersistentDateTime;
+
+/**
+ * Persist {@link org.joda.time.Interval} via hibernate. Internally, this class
+ * collaborates with {@link org.joda.time.contrib.hibernate.PersistentDateTime}
+ * to convert the start and end components of an Interval to and from the 
+ * database correspondents.  This class allows clients to execute hibernate or
+ * JPA queries using the attribute names "start" and "end."  For example,
+ * <br />
+ * <br />
+ * <blockquote>
+ * "from Foo where :date is between barInterval.start and barInterval.end"
+ * </blockquote>
+ *
+ * @author Christopher R. Gardner (chris_gardner76@yahoo.com)
+ */
+public class PersistentInterval implements CompositeUserType
+{
+    private static final String[] PROPERTY_NAMES = new String[]
+    {
+        "start",
+        "end"
+    };
+    
+    private static final Type[] TYPES = new Type[]
+    { 
+        Hibernate.TIMESTAMP,
+        Hibernate.TIMESTAMP
+    };
+
+    public Object assemble(Serializable cached, SessionImplementor session,
+            Object owner) throws HibernateException
+    {
+        return cached;
+    }
+
+    public Object deepCopy(Object value) throws HibernateException
+    {
+        return value;
+    }
+
+    public Serializable disassemble(Object value, SessionImplementor session)
+            throws HibernateException
+    {
+        return (Serializable) value;
+    }
+
+    public boolean equals(Object x, Object y) throws HibernateException
+    {
+        if (x == y) { return true; }
+        if (x == null || y == null) { return false; }
+        return x.equals(y);
+    }
+
+    public String[] getPropertyNames()
+    {
+        return PROPERTY_NAMES;
+    }
+
+    public Type[] getPropertyTypes()
+    {
+        return TYPES;
+    }
+
+    public Object getPropertyValue(Object component, int property)
+            throws HibernateException
+    {
+        Interval interval = (Interval) component;
+        return (property == 0) ? interval.getStart().toDate() : interval
+                .getEnd().toDate();
+    }
+
+    public int hashCode(Object x) throws HibernateException
+    {
+        return x.hashCode();
+    }
+
+    public boolean isMutable()
+    {
+        return false;
+    }
+
+    public Object nullSafeGet(ResultSet resultSet, String[] names,
+            SessionImplementor session, Object owner)
+            throws HibernateException, SQLException
+    {
+        if (resultSet == null)
+        {
+            return null;
+        }
+        PersistentDateTime pst = new PersistentDateTime();
+        DateTime begin = (DateTime) pst.nullSafeGet(resultSet, names[0]);
+        DateTime end = (DateTime) pst.nullSafeGet(resultSet, names[1]);
+        return new Interval(begin, end);
+    }
+
+    public void nullSafeSet(PreparedStatement statement, Object value,
+            int index, SessionImplementor session) throws HibernateException,
+            SQLException
+    {
+        if (value == null)
+        {
+            statement.setNull(index, Hibernate.TIMESTAMP.sqlType());
+            statement.setNull(index + 1, Hibernate.TIMESTAMP.sqlType());
+            return;
+        }
+        Interval interval = (Interval) value;
+        statement.setTimestamp(index, asTimeStamp(interval.getStart()));
+        statement.setTimestamp(index + 1, asTimeStamp(interval.getEnd()));
+    }
+
+    private Timestamp asTimeStamp(DateTime time) {
+        return new Timestamp(time.getMillis());
+    }
+
+    public Object replace(Object original, Object target,
+            SessionImplementor session, Object owner) throws HibernateException
+    {
+        return original;
+    }
+
+    public Class returnedClass()
+    {
+        return Interval.class;
+    }
+
+    public void setPropertyValue(Object component, int property, Object value)
+            throws HibernateException
+    {
+        throw new UnsupportedOperationException("Immutable Interval");
+    }
+}
diff --git a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/Plan.java b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/Plan.java
new file mode 100644
index 000000000..c3c296fb9
--- /dev/null
+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/Plan.java
@@ -0,0 +1,38 @@
+package org.joda.time.contrib.hibernate;
+
+import org.joda.time.Interval;
+
+public class Plan
+{
+    private int id;
+    private Interval period;
+
+    public Plan()
+    {
+    }
+    
+    public Plan(int id)
+    {
+        setId(id);
+    }
+
+    private void setId(int id)
+    {
+        this.id = id;
+    }
+    
+    public int getId()
+    {
+        return id;
+    }
+    
+    public Interval getPeriod()
+    {
+        return period;
+    }
+    
+    public void setPeriod(Interval period)
+    {
+        this.period = period;
+    }
+}
diff --git a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentInterval.java b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentInterval.java
new file mode 100644
index 000000000..a4c15d112
--- /dev/null
+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentInterval.java
@@ -0,0 +1,117 @@
+package org.joda.time.contrib.hibernate;
+
+import java.io.File;
+import java.sql.SQLException;
+import java.util.List;
+
+import org.hibernate.Query;
+import org.hibernate.Session;
+import org.hibernate.SessionFactory;
+import org.hibernate.Transaction;
+import org.hibernate.cfg.Configuration;
+import org.joda.time.DateTime;
+import org.joda.time.Interval;
+
+public class TestPersistentInterval extends HibernateTestCase {
+
+    private SessionFactory factory;
+    private Session session;
+    private DateTime beginDateTime;
+    private DateTime endDateTime;
+    private Transaction transaction;
+    private String intervalQuery;
+    
+    protected void setUp() throws SQLException
+    {
+        factory = getSessionFactory();
+        store();
+        intervalQuery = "from Plan where :aDate between period.start and period.end";
+    }
+    
+    private void store() throws SQLException
+    {
+        openAndBegin();
+        
+        Plan plan = new Plan(1);
+        beginDateTime = new DateTime(1980, 3, 11, 2, 3, 45, 0);
+        endDateTime = new DateTime(2004, 2, 25, 17, 3, 45, 760);
+        Interval period = new Interval(beginDateTime, endDateTime);
+        
+        plan.setPeriod(period);
+        
+        session.save(plan);
+        session.flush();
+        
+        commitAndClose();
+    }
+
+    private void openAndBegin()
+    {
+        session = factory.openSession();
+        transaction = session.beginTransaction();
+    }
+    
+    private void commitAndClose()
+    {
+        transaction.commit();
+        session.close();
+    }
+    
+    public void testQueryById() throws SQLException
+    {
+        openAndBegin();
+        Interval persistedPeriod = queryPlan().getPeriod();
+        commitAndClose();
+        assertPlanPeriod(persistedPeriod);
+    }
+
+    private void assertPlanPeriod(Interval period)
+    {
+        assertEquals(beginDateTime, period.getStart());
+        assertEquals(endDateTime, period.getEnd());
+    }
+
+    private Plan queryPlan()
+    {
+        return (Plan) session.get(Plan.class, new Integer(1));
+    }
+    
+    public void testQueryInsideInterval() throws SQLException
+    {
+        openAndBegin();
+        DateTime includedDateTime = new DateTime(2004, 1, 10, 0, 0, 0, 0);
+        Query query = session.createQuery(intervalQuery)
+                             .setParameter("aDate", includedDateTime.toDate());
+        List queriedPlans = query.list();
+        commitAndClose();
+        assertEquals(1, queriedPlans.size());
+        assertPlanPeriod(((Plan) queriedPlans.get(0)).getPeriod());
+    }
+    
+    public void testQueryOutsideInterval()
+    {
+        openAndBegin();
+        DateTime excludedDateTime = new DateTime(2007, 1, 10, 0, 0, 0, 0);
+        Query query = session.createQuery(intervalQuery)
+                             .setParameter("aDate", excludedDateTime.toDate());
+        List queriedPlans = query.list();
+        commitAndClose();
+        assertEquals(0, queriedPlans.size());
+    }
+
+    protected void setupConfiguration(Configuration cfg)
+    {
+        cfg.addFile(new File("src/test/org/joda/time/contrib/hibernate/plan.hbm.xml"));
+    }
+    
+    protected void tearDown() throws Exception {
+        remove();
+        super.tearDown();
+    }
+
+    private void remove() {
+        openAndBegin();
+        session.delete(queryPlan());
+        commitAndClose();
+    }
+}
diff --git a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/plan.hbm.xml b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/plan.hbm.xml
new file mode 100644
index 000000000..1059ed822
--- /dev/null
+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/plan.hbm.xml
@@ -0,0 +1,19 @@
+<?xml version="1.0"?>
+<!DOCTYPE hibernate-mapping PUBLIC
+        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
+        "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
+
+<hibernate-mapping package="org.joda.time.contrib.hibernate">
+
+        <class name="Plan">
+
+                <id name="id" />
+
+                <property type="org.joda.time.contrib.hibernate.PersistentInterval" name="period">
+                    <column name="startDate" />
+                    <column name="endDate" />
+                </property>
+
+        </class>
+
+</hibernate-mapping>

From 800e925b79372774ac112513d594c176430263de Mon Sep 17 00:00:00 2001
From: Christopher Gardner <chris_gardner76@yahoo.com>
Date: Wed, 3 Jan 2007 14:05:34 +0000
Subject: [PATCH 004/112] Changed class curly brace placement.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1174 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../joda/time/contrib/hibernate/TestPersistentInterval.java   | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentInterval.java b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentInterval.java
index a4c15d112..5762473ae 100644
--- a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentInterval.java
+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentInterval.java
@@ -12,8 +12,8 @@
 import org.joda.time.DateTime;
 import org.joda.time.Interval;
 
-public class TestPersistentInterval extends HibernateTestCase {
-
+public class TestPersistentInterval extends HibernateTestCase
+{
     private SessionFactory factory;
     private Session session;
     private DateTime beginDateTime;

From 8d98570d9a8e07dcbc2f2c32aeb35ebc095a23c9 Mon Sep 17 00:00:00 2001
From: Christopher Gardner <chris_gardner76@yahoo.com>
Date: Wed, 3 Jan 2007 14:08:01 +0000
Subject: [PATCH 005/112] Changed method curly brace placement.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1175 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../joda/time/contrib/hibernate/TestPersistentInterval.java | 6 ++++--
 1 file changed, 4 insertions(+), 2 deletions(-)

diff --git a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentInterval.java b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentInterval.java
index 5762473ae..d7826131c 100644
--- a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentInterval.java
+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentInterval.java
@@ -104,12 +104,14 @@ protected void setupConfiguration(Configuration cfg)
         cfg.addFile(new File("src/test/org/joda/time/contrib/hibernate/plan.hbm.xml"));
     }
     
-    protected void tearDown() throws Exception {
+    protected void tearDown() throws Exception
+    {
         remove();
         super.tearDown();
     }
 
-    private void remove() {
+    private void remove()
+    {
         openAndBegin();
         session.delete(queryPlan());
         commitAndClose();

From fef81cb69805a6f437e70d15d7c3f7e104e0f637 Mon Sep 17 00:00:00 2001
From: Christopher Gardner <chris_gardner76@yahoo.com>
Date: Thu, 4 Jan 2007 18:57:56 +0000
Subject: [PATCH 006/112] In nullSafeGet(), changed variable name from begin to
 start for consistency.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1176 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../org/joda/time/contrib/hibernate/PersistentInterval.java   | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInterval.java b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInterval.java
index de9a300a8..e2f258ec8 100644
--- a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInterval.java
+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInterval.java
@@ -119,9 +119,9 @@ public Object nullSafeGet(ResultSet resultSet, String[] names,
             return null;
         }
         PersistentDateTime pst = new PersistentDateTime();
-        DateTime begin = (DateTime) pst.nullSafeGet(resultSet, names[0]);
+        DateTime start = (DateTime) pst.nullSafeGet(resultSet, names[0]);
         DateTime end = (DateTime) pst.nullSafeGet(resultSet, names[1]);
-        return new Interval(begin, end);
+        return new Interval(start, end);
     }
 
     public void nullSafeSet(PreparedStatement statement, Object value,

From c0de5a91bc8d8908ef5bbd527f269ee340e56149 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Tue, 9 Jan 2007 03:55:50 +0000
Subject: [PATCH 007/112] Updated tz database to version 2007a.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1177 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/java/org/joda/time/tz/src/Readme.txt  |  2 +-
 JodaTime/src/java/org/joda/time/tz/src/africa |  6 +-
 .../src/java/org/joda/time/tz/src/australasia | 74 +++++++++++--------
 .../src/java/org/joda/time/tz/src/backward    |  4 +-
 JodaTime/src/java/org/joda/time/tz/src/europe |  6 +-
 .../java/org/joda/time/tz/src/northamerica    | 14 +++-
 .../java/org/joda/time/tz/src/southamerica    | 17 +++--
 7 files changed, 75 insertions(+), 48 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
index eed138d6a..426547040 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
+++ b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
@@ -1,2 +1,2 @@
 The data files in this directory were obtained from the public tz database,
-http://www.twinsun.com/tz/tz-link.htm, version 2006p.
+http://www.twinsun.com/tz/tz-link.htm, version 2007a.
diff --git a/JodaTime/src/java/org/joda/time/tz/src/africa b/JodaTime/src/java/org/joda/time/tz/src/africa
index 7895b7ff9..1e3687fca 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/africa
+++ b/JodaTime/src/java/org/joda/time/tz/src/africa
@@ -1,4 +1,4 @@
-# @(#)africa	8.5
+# @(#)africa	8.7
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
@@ -232,8 +232,8 @@ Zone	Africa/Malabo	0:35:08 -	LMT	1912
 
 # Eritrea
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Africa/Asmera	2:35:32 -	LMT	1870
-			2:35:32	-	AMT	1890	      # Asmera Mean Time
+Zone	Africa/Asmara	2:35:32 -	LMT	1870
+			2:35:32	-	AMT	1890	      # Asmara Mean Time
 			2:35:20	-	ADMT	1936 May 5    # Adis Dera MT
 			3:00	-	EAT
 
diff --git a/JodaTime/src/java/org/joda/time/tz/src/australasia b/JodaTime/src/java/org/joda/time/tz/src/australasia
index 875eca8fd..797f94d32 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/australasia
+++ b/JodaTime/src/java/org/joda/time/tz/src/australasia
@@ -1,4 +1,4 @@
-# @(#)australasia	8.4
+# @(#)australasia	8.5
 # <pre>
 
 # This file also includes Pacific islands.
@@ -30,11 +30,6 @@ Zone Australia/Darwin	 8:43:20 -	LMT	1895 Feb
 			 9:30	Aus	CST
 # Western Australia
 #
-# From Christopher Hunt (2006-11-21), after an advance warning
-# from Jesper Norgaard Welen (2006-11-01):
-# WA are trialing DST for three years. 
-# <http://www.parliament.wa.gov.au/parliament/bills.nsf/62D4F7C55EA88993482572110007316A/$File/Bill174-1.pdf>
-#
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	AW	1974	only	-	Oct	lastSun	2:00s	1:00	-
 Rule	AW	1975	only	-	Mar	Sun>=1	2:00s	0	-
@@ -48,6 +43,10 @@ Rule	AW	2007	2008	-	Oct	lastSun	2:00s	1:00	-
 Zone Australia/Perth	 7:43:24 -	LMT	1895 Dec
 			 8:00	Aus	WST	1943 Jul
 			 8:00	AW	WST
+Zone Australia/Eucla	 8:35:28 -	LMT	1895 Dec
+			 8:45	Aus	CWST	1943 Jul
+			 8:45	AW	CWST
+
 # Queensland
 #
 # From Alex Livingston (1996-11-01):
@@ -203,16 +202,16 @@ Zone Australia/Lord_Howe 10:36:20 -	LMT	1895 Feb
 #
 # Ashmore Is, Cartier
 # no indigenous inhabitants; only seasonal caretakers
-# like Australia/Perth, says Turner
+# no times are set
 #
 # Coral Sea Is
 # no indigenous inhabitants; only meteorologists
-# no information
+# no times are set
 #
 # Macquarie
 # permanent occupation (scientific station) since 1948;
 # sealing and penguin oil station operated 1888/1917
-# like Australia/Hobart, says Turner
+# like Australia/Hobart
 
 # Christmas
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
@@ -544,6 +543,7 @@ Zone	Pacific/Wallis	12:15:20 -	LMT	1901
 #		std dst
 #		LMT	Local Mean Time
 #	  8:00	WST WST	Western Australia
+#	  8:45	CWST CWST Central Western Australia*
 #	  9:00	JST	Japan
 #	  9:30	CST CST	Central Australia
 #	 10:00	EST EST	Eastern Australia
@@ -816,37 +816,51 @@ Zone	Pacific/Wallis	12:15:20 -	LMT	1901
 # From Arthur David Olson (1992-03-08):
 # The chosen rules the union of the 1971/1972 change and the 1989-1992 changes.
 
+# From Christopher Hunt (2006-11-21), after an advance warning
+# from Jesper Norgaard Welen (2006-11-01):
+# WA are trialing DST for three years. 
+# <http://www.parliament.wa.gov.au/parliament/bills.nsf/9A1B183144403DA54825721200088DF1/$File/Bill175-1B.pdf>
+
 # From Rives McDow (2002-04-09):
 # The most interesting region I have found consists of three towns on the
-# southern coast of Australia, population 10 at last report, along with
-# 50,000 sheep, about 100 kilometers long and 40 kilometers into the
-# continent.  The primary town is Madura, with the other towns being
-# Mundrabilla and Eucla.  According to the sheriff of Madura, the
-# residents got tired of having to change the time so often, as they are
-# located in a strip overlapping the border of South Australia and Western
-# Australia.  South Australia observes daylight saving time; Western
+# southern coast....  South Australia observes daylight saving time; Western
 # Australia does not.  The two states are one and a half hours apart.  The
 # residents decided to forget about this nonsense of changing the clock so
 # much and set the local time 20 hours and 45 minutes from the
 # international date line, or right in the middle of the time of South
-# Australia and Western Australia.  As it only affects about 10 people and
-# tourists staying at the Madura Motel, it has never really made as big an
-# impact as Broken Hill.  However, as tourist visiting there or anyone
-# calling the local sheriff will attest, they do keep time in this way.
+# Australia and Western Australia....
 #
 # From Paul Eggert (2002-04-09):
 # This is confirmed by the section entitled
 # "What's the deal with time zones???" in
-# <http://www.earthsci.unimelb.edu.au/~awatkins/null.html>,
-# which says a few other things:
-#
-# * Border Village, SA also is 45 minutes ahead of Perth.
-# * The locals call this time zone "central W.A. Time" (presumably "CWAT").
-# * The locals also call Western Australia time "Perth time".
-#
-# It's not clear from context whether everyone in Western Australia
-# knows of this naming convention, or whether it's just the people in
-# this subregion.
+# <http://www.earthsci.unimelb.edu.au/~awatkins/null.html>.
+#
+# From Alex Livingston (2006-12-07):
+# ... it was just on four years ago that I drove along the Eyre Highway,
+# which passes through eastern Western Australia close to the southern
+# coast of the continent.
+#
+# I paid particular attention to the time kept there. There can be no
+# dispute that UTC+08:45 was considered "the time" from the border
+# village just inside the border with South Australia to as far west
+# as just east of Caiguna. There can also be no dispute that Eucla is
+# the largest population centre in this zone....
+#
+# Now that Western Australia is observing daylight saving, the
+# question arose whether this part of the state would follow suit. I
+# just called the border village and confirmed that indeed they have,
+# meaning that they are now observing UTC+09:45.
+# 
+# (2006-12-09):
+# I personally doubt that either experimentation with daylight saving
+# in WA or its introduction in SA had anything to do with the genesis
+# of this time zone.  My hunch is that it's been around since well
+# before 1975.  I remember seeing it noted on road maps decades ago.
+
+# From Paul Eggert (2006-12-15):
+# For lack of better info, assume the tradition dates back to the
+# introduction of standard time in 1895.
+
 
 # South Australia, Tasmania, Victoria
 
diff --git a/JodaTime/src/java/org/joda/time/tz/src/backward b/JodaTime/src/java/org/joda/time/tz/src/backward
index ca04e6e0c..5ad2a3467 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/backward
+++ b/JodaTime/src/java/org/joda/time/tz/src/backward
@@ -1,8 +1,9 @@
-# @(#)backward	8.2
+# @(#)backward	8.3
 
 # This file provides links between current names for time zones
 # and their old names.  Many names changed in late 1993.
 
+Link	Africa/Asmara		Africa/Asmera
 Link	Africa/Bamako		Africa/Timbuktu
 Link	America/Argentina/Catamarca	America/Argentina/ComodRivadavia
 Link	America/Adak		America/Atka
@@ -28,6 +29,7 @@ Link	Asia/Jerusalem		Asia/Tel_Aviv
 Link	Asia/Thimphu		Asia/Thimbu
 Link	Asia/Makassar		Asia/Ujung_Pandang
 Link	Asia/Ulaanbaatar	Asia/Ulan_Bator
+Link	Atlantic/Faroe		Atlantic/Faeroe
 Link	Australia/Sydney	Australia/ACT
 Link	Australia/Sydney	Australia/Canberra
 Link	Australia/Lord_Howe	Australia/LHI
diff --git a/JodaTime/src/java/org/joda/time/tz/src/europe b/JodaTime/src/java/org/joda/time/tz/src/europe
index 2166d1311..4cae5340e 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/europe
+++ b/JodaTime/src/java/org/joda/time/tz/src/europe
@@ -1,4 +1,4 @@
-# @(#)europe	8.6
+# @(#)europe	8.7
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
@@ -754,7 +754,7 @@ Zone	Europe/Prague	0:57:44 -	LMT	1850
 			1:00	Czech	CE%sT	1979
 			1:00	EU	CE%sT
 
-# Denmark, Faeroe Islands, and Greenland
+# Denmark, Faroe Islands, and Greenland
 
 # From Jesper Norgaard Welen (2005-04-26):
 # http://www.hum.aau.dk/~poe/tid/tine/DanskTid.htm says that the law
@@ -809,7 +809,7 @@ Zone Europe/Copenhagen	 0:50:20 -	LMT	1890
 			 1:00	C-Eur	CE%sT	1945 Apr  2 2:00
 			 1:00	Denmark	CE%sT	1980
 			 1:00	EU	CE%sT
-Zone Atlantic/Faeroe	-0:27:04 -	LMT	1908 Jan 11	# Torshavn
+Zone Atlantic/Faroe	-0:27:04 -	LMT	1908 Jan 11	# Torshavn
 			 0:00	-	WET	1981
 			 0:00	EU	WE%sT
 #
diff --git a/JodaTime/src/java/org/joda/time/tz/src/northamerica b/JodaTime/src/java/org/joda/time/tz/src/northamerica
index 3f7f346ad..c21e199c1 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/northamerica
+++ b/JodaTime/src/java/org/joda/time/tz/src/northamerica
@@ -1,4 +1,4 @@
-# @(#)northamerica	8.10
+# @(#)northamerica	8.11
 # <pre>
 
 # also includes Central America and the Caribbean
@@ -1997,13 +1997,19 @@ Zone	America/Antigua	-4:07:12 -	LMT	1912 Mar 2
 			-4:00	-	AST
 
 # Bahamas
+#
+# From Sue Williams (2006-12-07):
+# The Bahamas announced about a month ago that they plan to change their DST 
+# rules to sync with the U.S. starting in 2007....
+# http://www.jonesbahamas.com/?c=45&a=10412
+
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Bahamas	1964	max	-	Oct	lastSun	2:00	0	S
+Rule	Bahamas	1964	2006	-	Oct	lastSun	2:00	0	S
 Rule	Bahamas	1964	1986	-	Apr	lastSun	2:00	1:00	D
-Rule	Bahamas	1987	max	-	Apr	Sun>=1	2:00	1:00	D
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	America/Nassau	-5:09:24 -	LMT	1912 Mar 2
-			-5:00	Bahamas	E%sT
+			-5:00	Bahamas	E%sT	1976
+			-5:00	US	E%sT
 
 # Barbados
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
diff --git a/JodaTime/src/java/org/joda/time/tz/src/southamerica b/JodaTime/src/java/org/joda/time/tz/src/southamerica
index 796948ff9..6a9b8c824 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/southamerica
+++ b/JodaTime/src/java/org/joda/time/tz/src/southamerica
@@ -1,4 +1,4 @@
-# @(#)southamerica	8.6
+# @(#)southamerica	8.8
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
@@ -714,8 +714,13 @@ Zone America/Rio_Branco	-4:31:12 -	LMT	1914
 # (they should have been 1990-09-15 and 1990-09-16 respectively), but
 # anyhow it clears up some doubts too.
 
-# The following data are from <http://www.horaoficial.cl/horaof.htm>
-# (2006-09-20), transcribed by Jesper Norgaard Welen.
+# From Paul Eggert (2006-12-27):
+# The following data for Chile and America/Santiago are from
+# <http://www.horaoficial.cl/horaof.htm> (2006-09-20), transcribed by
+# Jesper Norgaard Welen.  The data for Pacific/Easter are from Shanks
+# & Pottenger, except with DST transitions after 1932 cloned from
+# America/Santiago.  The pre-1980 Pacific/Easter data are dubious,
+# but we have no other source.
 
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Chile	1927	1932	-	Sep	 1	0:00	1:00	S
@@ -759,9 +764,9 @@ Zone America/Santiago	-4:42:46 -	LMT	1890
 			-4:42:46 -	SMT	1927 Sep  1 # Santiago Mean Time
 			-5:00	Chile	CL%sT	1947 May 22 # Chile Time
 			-4:00	Chile	CL%sT
-Zone Pacific/Easter	-7:17:28 -	LMT	1890	    # Mataveri
-			-7:17:28 -	MMT	1932 Sep    # Mataveri Mean Time
-			-7:00	Chile	EAS%sT	1982 Jan 18 21:00 # Easter I Time
+Zone Pacific/Easter	-7:17:44 -	LMT	1890
+			-7:17:44 -	EMT	1932 Sep    # Easter Mean Time
+			-7:00	Chile	EAS%sT	1982 Mar 13 21:00 # Easter I Time
 			-6:00	Chile	EAS%sT
 #
 # Sala y Gomez Island is like Pacific/Easter.

From 576bf10612cbfd3c100add079a97fc2d1b813886 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Thu, 11 Jan 2007 22:41:46 +0000
Subject: [PATCH 008/112] Update the release notes for version 1.5

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1178 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt | 42 ++++++++++----------------------------
 1 file changed, 11 insertions(+), 31 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index b91cb4fd8..9950e37b3 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -1,10 +1,10 @@
-Joda-Time version 1.4
+Joda-Time version 1.5
 ---------------------
 
 Joda-Time is a date and time handling library that seeks to replace the JDK
 Date and Calendar classes.
 
-This is the fifth full release of Joda-Time.
+This is the sixth full release of Joda-Time.
 This release focuses on new features, but also include some bug fixes.
 
 We recommend JDK 1.3 or later, and have performed no testing on earlier JDKs.
@@ -18,53 +18,33 @@ of restrictions. If the license causes you problems please contact the mailing l
 * http://joda-time.sourceforge.net/related.html *
 
 
-Enhancements since 1.3
+Enhancements since 1.4
 ----------------------
-- Years/Months/Weeks/Days/Hours/Minutes/Seconds
-  New group of single field period classes
-  These allow applications to specify a specific field in method signatures and calculations
-  Methods are provided to convert between most of these based on standard length periods
 
-- Period.ZERO
-  Add zero-length constant to Period
 
-- PeriodFormatBuilder.append(PeriodPrinter,PeriodParser)
-  This method completes the API of PeriodFormatBuilder in the style of DateTimeFormatBuilder
-
-
-Compatibility with 1.3
+Compatibility with 1.4
 ----------------------
 Binary compatible - Yes
 
-Source compatible - Yes, except
-  If you subclassed AbstractReadableInstantFieldProperty (unlikely) then
-  you now need to override getChronology() to re-enable the equals() and
-  hashCode() methods.
+Source compatible - Yes
 
 Serialization compatible - Yes
 
 Data compatible - Yes
-  - DateTimeZone data updated to version 2006p
+  - DateTimeZone data updated to version 2007a
 
 Semantic compatible - Yes
 
 
-Deprecations since 1.3
+Deprecations since 1.4
 ----------------------
+None
 
 
-Bug fixes since 1.3
+Bug fixes since 1.4
 -------------------
-- GJChronology
-  Text value of ReadablePartial fields was always a decimal number.
-
-- Comparisons of Chronology instances by identity  [1576727]
-  Some comparisons of Chronology instances were performed using ==
-  This worked fine in most cases due to agressive caching, however it failed when
-  using LenientChronology and other wrapping chronologies which do not have caching
-  Comparison is now via equals(), and involved adding equals() methods to a number
-  of classes. In addition, subclasses of AbstractReadableInstantFieldProperty must
-  now implement getChronology().
+- ZoneInfoProvider now returns a copy of its internal state on getAvailableIDs
+  This avoids race conditions on some JVMs
 
 
 Feedback

From 93c99e2910ff4238caaaad76f4f468bfa0a2ab1c Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Thu, 11 Jan 2007 22:54:02 +0000
Subject: [PATCH 009/112] LocalDate/LocalTime conostructors did not set
 internal state correctly spotted via problem with Days.daysBetween from
 Gareth Chapman

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1179 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  4 +++
 .../src/java/org/joda/time/LocalDate.java     |  3 +-
 .../src/java/org/joda/time/LocalTime.java     |  3 +-
 .../joda/time/TestLocalDate_Constructors.java | 30 +++++++++++++++++--
 .../joda/time/TestLocalTime_Constructors.java | 13 ++++++++
 5 files changed, 47 insertions(+), 6 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 9950e37b3..e1e52f0f3 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -43,6 +43,10 @@ None
 
 Bug fixes since 1.4
 -------------------
+- LocalDate/LocalTime conostructors did not set internal state correctly
+  This problem was exposed when Days.daysBetween() and similar methods
+  failed to give the right results
+
 - ZoneInfoProvider now returns a copy of its internal state on getAvailableIDs
   This avoids race conditions on some JVMs
 
diff --git a/JodaTime/src/java/org/joda/time/LocalDate.java b/JodaTime/src/java/org/joda/time/LocalDate.java
index b65c5083a..38014121e 100644
--- a/JodaTime/src/java/org/joda/time/LocalDate.java
+++ b/JodaTime/src/java/org/joda/time/LocalDate.java
@@ -240,8 +240,7 @@ public LocalDate(long instant, Chronology chronology) {
         
         long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);
         chronology = chronology.withUTC();
-        chronology.dayOfMonth().roundFloor(localMillis);
-        iLocalMillis = localMillis;
+        iLocalMillis = chronology.dayOfMonth().roundFloor(localMillis);
         iChronology = chronology;
     }
 
diff --git a/JodaTime/src/java/org/joda/time/LocalTime.java b/JodaTime/src/java/org/joda/time/LocalTime.java
index 7681cdd63..897871939 100644
--- a/JodaTime/src/java/org/joda/time/LocalTime.java
+++ b/JodaTime/src/java/org/joda/time/LocalTime.java
@@ -270,8 +270,7 @@ public LocalTime(long instant, Chronology chronology) {
         
         long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);
         chronology = chronology.withUTC();
-        chronology.millisOfDay().get(localMillis);
-        iLocalMillis = localMillis;
+        iLocalMillis = chronology.millisOfDay().get(localMillis);
         iChronology = chronology;
     }
 
diff --git a/JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java b/JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java
index e5f29c511..1052db61b 100644
--- a/JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java
+++ b/JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java
@@ -47,12 +47,13 @@
         (31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
         + 12L * DateTimeConstants.MILLIS_PER_HOUR
         + 24L * DateTimeConstants.MILLIS_PER_MINUTE;
-        
+    private long TEST_TIME1_ROUNDED =
+        (31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY;
     private long TEST_TIME2 =
         (365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY
         + 14L * DateTimeConstants.MILLIS_PER_HOUR
         + 28L * DateTimeConstants.MILLIS_PER_MINUTE;
-        
+
     private DateTimeZone zone = null;
 
     public static void main(String[] args) {
@@ -181,6 +182,7 @@ public void testConstructor_long1_DateTimeZone() throws Throwable {
         assertEquals(1970, test.getYear());
         assertEquals(4, test.getMonthOfYear());
         assertEquals(6, test.getDayOfMonth());
+        assertEquals(TEST_TIME1_ROUNDED, test.getLocalMillis());
     }
 
     public void testConstructor_long2_DateTimeZone() throws Throwable {
@@ -191,6 +193,30 @@ public void testConstructor_long2_DateTimeZone() throws Throwable {
         assertEquals(7, test.getDayOfMonth());
     }
 
+    public void testConstructor_long3_DateTimeZone() throws Throwable {
+        DateTime dt = new DateTime(2006, 6, 9, 0, 0, 0, 0, PARIS);
+        DateTime dtUTC = new DateTime(2006, 6, 9, 0, 0, 0, 0, DateTimeZone.UTC);
+        
+        LocalDate test = new LocalDate(dt.getMillis(), PARIS);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(2006, test.getYear());
+        assertEquals(6, test.getMonthOfYear());
+        assertEquals(9, test.getDayOfMonth());
+        assertEquals(dtUTC.getMillis(), test.getLocalMillis());
+    }
+
+    public void testConstructor_long4_DateTimeZone() throws Throwable {
+        DateTime dt = new DateTime(2006, 6, 9, 23, 59, 59, 999, PARIS);
+        DateTime dtUTC = new DateTime(2006, 6, 9, 0, 0, 0, 0, DateTimeZone.UTC);
+        
+        LocalDate test = new LocalDate(dt.getMillis(), PARIS);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(2006, test.getYear());
+        assertEquals(6, test.getMonthOfYear());
+        assertEquals(9, test.getDayOfMonth());
+        assertEquals(dtUTC.getMillis(), test.getLocalMillis());
+    }
+
     public void testConstructor_long_nullDateTimeZone() throws Throwable {
         LocalDate test = new LocalDate(TEST_TIME1, (DateTimeZone) null);
         assertEquals(ISO_UTC, test.getChronology());
diff --git a/JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java b/JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java
index 8423463fc..6a5e511bc 100644
--- a/JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java
+++ b/JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java
@@ -251,6 +251,19 @@ public void testConstructor_long_DateTimeZone() throws Throwable {
         assertEquals(4, test.getMillisOfSecond());
     }
 
+    public void testConstructor_long_DateTimeZone_2() throws Throwable {
+        DateTime dt = new DateTime(2007, 6, 9, 1, 2, 3, 4, PARIS);
+        DateTime dtUTC = new DateTime(1970, 1, 1, 1, 2, 3, 4, DateTimeZone.UTC);
+        
+        LocalTime test = new LocalTime(dt.getMillis(), PARIS);
+        assertEquals(ISO_UTC, test.getChronology());
+        assertEquals(1, test.getHourOfDay());
+        assertEquals(2, test.getMinuteOfHour());
+        assertEquals(3, test.getSecondOfMinute());
+        assertEquals(4, test.getMillisOfSecond());
+        assertEquals(dtUTC.getMillis(), test.getLocalMillis());
+    }
+
     public void testConstructor_long_nullDateTimeZone() throws Throwable {
         LocalTime test = new LocalTime(TEST_TIME1, (DateTimeZone) null);
         assertEquals(ISO_UTC, test.getChronology());

From 0f4a711054244791d1fd7eb934f652d4a0af013d Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 14 Jan 2007 22:35:57 +0000
Subject: [PATCH 010/112] Fix spelling error, from Jean-Philippe Martin by
 email

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1180 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/cal_gregorian.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/JodaTime/xdocs/cal_gregorian.xml b/JodaTime/xdocs/cal_gregorian.xml
index 4b275e424..d417f837b 100644
--- a/JodaTime/xdocs/cal_gregorian.xml
+++ b/JodaTime/xdocs/cal_gregorian.xml
@@ -13,7 +13,7 @@
 <p>
 The Gregorian calendar system is calendar system used by most of the modern business world.
 It was first introduced on 1582-10-15 replacing the <a href="cal_julian.html">Julian</a> calendar.
-Gregorian rules define a leap year as once every four years, expect every 100, but including every 400.
+Gregorian rules define a leap year as once every four years, except every 100, but including every 400.
 </p>
 <p>
 The Gregorian chronology in Joda-Time is equivalent* to the ISO chronology, and uses

From 82e15b2b9bf43ae8c549fa2be18e2ead6e51f165 Mon Sep 17 00:00:00 2001
From: Mario Ivankovits <mario@ops.co.at>
Date: Tue, 30 Jan 2007 21:00:25 +0000
Subject: [PATCH 011/112] added persister for LocalDate and LocalTime

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1181 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../hibernate/PersistentLocalDate.java        | 133 +++++++++++++++++
 .../PersistentLocalTimeAsString.java          | 135 +++++++++++++++++
 .../hibernate/PersistentLocalTimeAsTime.java  | 140 ++++++++++++++++++
 .../hibernate/PersistentLocalTimeExact.java   | 135 +++++++++++++++++
 .../joda/time/contrib/hibernate/Event.java    |  48 +++++-
 .../contrib/hibernate/HibernateTestCase.java  |   7 +-
 .../hibernate/TestPersistentLocalDate.java    |  64 ++++++++
 .../hibernate/TestPersistentLocalTime.java    |  78 ++++++++++
 .../joda/time/contrib/hibernate/event.hbm.xml |   7 +
 9 files changed, 744 insertions(+), 3 deletions(-)
 create mode 100644 JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalDate.java
 create mode 100644 JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalTimeAsString.java
 create mode 100644 JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalTimeAsTime.java
 create mode 100644 JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalTimeExact.java
 create mode 100644 JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentLocalDate.java
 create mode 100644 JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentLocalTime.java

diff --git a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalDate.java b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalDate.java
new file mode 100644
index 000000000..978ed929e
--- /dev/null
+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalDate.java
@@ -0,0 +1,133 @@
+package org.joda.time.contrib.hibernate;
+
+import org.hibernate.usertype.EnhancedUserType;
+import org.hibernate.HibernateException;
+import org.hibernate.Hibernate;
+import org.joda.time.DateTime;
+import org.joda.time.LocalDate;
+
+import java.sql.Types;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.PreparedStatement;
+import java.io.Serializable;
+
+/**
+ * Persist {@link org.joda.time.LocalDate} via hibernate
+ *
+ * @author Mario Ivankovits (mario@ops.co.at)
+ */
+public class PersistentLocalDate implements EnhancedUserType
+{
+	public final static PersistentLocalDate INSTANCE = new PersistentLocalDate();
+
+	private static final int[] SQL_TYPES = new int[]
+    {
+        Types.DATE,
+    };
+
+    public int[] sqlTypes()
+    {
+        return SQL_TYPES;
+    }
+
+    public Class returnedClass()
+    {
+        return LocalDate.class;
+    }
+
+    public boolean equals(Object x, Object y) throws HibernateException
+	{
+        if (x == y)
+        {
+            return true;
+        }
+        if (x == null || y == null)
+        {
+            return false;
+        }
+        LocalDate dtx = (LocalDate) x;
+        LocalDate dty = (LocalDate) y;
+
+        return dtx.equals(dty);
+    }
+
+    public int hashCode(Object object) throws HibernateException
+    {
+        return object.hashCode();
+    }
+
+    public Object nullSafeGet(ResultSet resultSet, String[] strings, Object object) throws HibernateException, SQLException
+	{
+		return nullSafeGet(resultSet, strings[0]);
+
+	}
+
+	public Object nullSafeGet(ResultSet resultSet, String string) throws SQLException
+	{
+		Object timestamp = Hibernate.DATE.nullSafeGet(resultSet, string);
+		if (timestamp == null)
+		{
+			return null;
+		}
+
+		return new LocalDate(timestamp);
+	}
+
+	public void nullSafeSet(PreparedStatement preparedStatement, Object value, int index) throws HibernateException, SQLException
+	{
+		if (value == null)
+		{
+			Hibernate.DATE.nullSafeSet(preparedStatement, null, index);
+		}
+		else
+		{
+			Hibernate.DATE.nullSafeSet(preparedStatement, ((LocalDate) value).toDateMidnight().toDate(), index);
+		}
+	}
+
+    public Object deepCopy(Object value) throws HibernateException
+    {
+        if (value == null)
+        {
+            return null;
+        }
+
+        return new LocalDate(value);
+    }
+
+    public boolean isMutable()
+    {
+        return false;
+    }
+
+    public Serializable disassemble(Object value) throws HibernateException
+    {
+        return (Serializable) value;
+    }
+
+    public Object assemble(Serializable cached, Object value) throws HibernateException
+    {
+        return cached;
+    }
+
+    public Object replace(Object original, Object target, Object owner) throws HibernateException
+    {
+        return original;
+    }
+
+	public String objectToSQLString(Object object)
+	{
+		throw new UnsupportedOperationException();
+	}
+
+	public String toXMLString(Object object)
+	{
+		return object.toString();
+	}
+
+	public Object fromXMLString(String string)
+	{
+		return new LocalDate(string);
+	}
+}
diff --git a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalTimeAsString.java b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalTimeAsString.java
new file mode 100644
index 000000000..b8932a5a2
--- /dev/null
+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalTimeAsString.java
@@ -0,0 +1,135 @@
+package org.joda.time.contrib.hibernate;
+
+import org.hibernate.usertype.EnhancedUserType;
+import org.hibernate.HibernateException;
+import org.hibernate.Hibernate;
+import org.joda.time.LocalTime;
+
+import java.sql.Types;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.PreparedStatement;
+import java.io.Serializable;
+
+/**
+ * Persist {@link org.joda.time.LocalDate} via hibernate
+ *
+ * @author Mario Ivankovits (mario@ops.co.at)
+ */
+public class PersistentLocalTimeAsString implements EnhancedUserType
+{
+	public final static PersistentLocalTimeAsString INSTANCE = new PersistentLocalTimeAsString();
+
+	private static final int[] SQL_TYPES = new int[]
+    {
+        Types.VARCHAR,
+    };
+
+    public int[] sqlTypes()
+    {
+        return SQL_TYPES;
+    }
+
+    public Class returnedClass()
+    {
+        return LocalTime.class;
+    }
+
+    public boolean equals(Object x, Object y) throws HibernateException
+	{
+        if (x == y)
+        {
+            return true;
+        }
+        if (x == null || y == null)
+        {
+            return false;
+        }
+        LocalTime dtx = (LocalTime) x;
+        LocalTime dty = (LocalTime) y;
+
+        return dtx.equals(dty);
+    }
+
+    public int hashCode(Object object) throws HibernateException
+    {
+        return object.hashCode();
+    }
+
+    public Object nullSafeGet(ResultSet resultSet, String[] strings, Object object) throws HibernateException, SQLException
+	{
+		return nullSafeGet(resultSet, strings[0]);
+
+	}
+
+	public Object nullSafeGet(ResultSet resultSet, String string) throws SQLException
+	{
+		Object timestamp = Hibernate.STRING.nullSafeGet(resultSet, string);
+		if (timestamp == null)
+		{
+			return null;
+		}
+
+		return new LocalTime(timestamp.toString());
+	}
+
+
+	public void nullSafeSet(PreparedStatement preparedStatement, Object value, int index) throws HibernateException, SQLException
+	{
+		if (value == null)
+		{
+			Hibernate.STRING.nullSafeSet(preparedStatement, null, index);
+		}
+		else
+		{
+			LocalTime lt = ((LocalTime) value);
+
+			Hibernate.STRING.nullSafeSet(preparedStatement, lt.toString(), index);
+		}
+	}
+
+    public Object deepCopy(Object value) throws HibernateException
+    {
+        if (value == null)
+        {
+            return null;
+        }
+
+        return new LocalTime(value);
+    }
+
+    public boolean isMutable()
+    {
+        return false;
+    }
+
+    public Serializable disassemble(Object value) throws HibernateException
+    {
+        return (Serializable) value;
+    }
+
+    public Object assemble(Serializable cached, Object value) throws HibernateException
+    {
+        return cached;
+    }
+
+    public Object replace(Object original, Object target, Object owner) throws HibernateException
+    {
+        return original;
+    }
+
+	public String objectToSQLString(Object object)
+	{
+		throw new UnsupportedOperationException();
+	}
+
+	public String toXMLString(Object object)
+	{
+		return object.toString();
+	}
+
+	public Object fromXMLString(String string)
+	{
+		return new LocalTime(string);
+	}
+}
diff --git a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalTimeAsTime.java b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalTimeAsTime.java
new file mode 100644
index 000000000..702ecb8a8
--- /dev/null
+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalTimeAsTime.java
@@ -0,0 +1,140 @@
+package org.joda.time.contrib.hibernate;
+
+import org.hibernate.Hibernate;
+import org.hibernate.HibernateException;
+import org.hibernate.usertype.EnhancedUserType;
+import org.joda.time.LocalTime;
+import org.joda.time.DateTimeZone;
+
+import java.io.Serializable;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Types;
+import java.sql.Time;
+
+/**
+ * Persist {@link org.joda.time.LocalDate} via hibernate
+ * This uses a simple integer to store the time as milliseconds since 1970-1-1. <br />
+ * The milliseconds will survive.
+ *
+ * @author Mario Ivankovits (mario@ops.co.at)
+ */
+public class PersistentLocalTimeAsTime implements EnhancedUserType
+{
+	public final static PersistentLocalTimeAsTime INSTANCE = new PersistentLocalTimeAsTime();
+
+	private static final int[] SQL_TYPES = new int[]
+    {
+        Types.TIME,
+    };
+
+    public int[] sqlTypes()
+    {
+        return SQL_TYPES;
+    }
+
+    public Class returnedClass()
+    {
+        return LocalTime.class;
+    }
+
+    public boolean equals(Object x, Object y) throws HibernateException
+	{
+        if (x == y)
+        {
+            return true;
+        }
+        if (x == null || y == null)
+        {
+            return false;
+        }
+        LocalTime dtx = (LocalTime) x;
+        LocalTime dty = (LocalTime) y;
+
+        return dtx.equals(dty);
+    }
+
+    public int hashCode(Object object) throws HibernateException
+    {
+        return object.hashCode();
+    }
+
+    public Object nullSafeGet(ResultSet resultSet, String[] strings, Object object) throws HibernateException, SQLException
+	{
+		return nullSafeGet(resultSet, strings[0]);
+
+	}
+
+	public Object nullSafeGet(ResultSet resultSet, String string) throws SQLException
+	{
+		Object timestamp = Hibernate.TIME.nullSafeGet(resultSet, string);
+		if (timestamp == null)
+		{
+			return null;
+		}
+
+		return new LocalTime(timestamp, DateTimeZone.UTC);
+	}
+
+
+	public void nullSafeSet(PreparedStatement preparedStatement, Object value, int index) throws HibernateException, SQLException
+	{
+		if (value == null)
+		{
+			Hibernate.TIME.nullSafeSet(preparedStatement, null, index);
+		}
+		else
+		{
+			LocalTime lt = ((LocalTime) value);
+			Time time = new Time(lt.getMillisOfDay());
+
+			Hibernate.TIME.nullSafeSet(preparedStatement, time, index);
+		}
+	}
+
+    public Object deepCopy(Object value) throws HibernateException
+    {
+        if (value == null)
+        {
+            return null;
+        }
+
+        return new LocalTime(value);
+    }
+
+    public boolean isMutable()
+    {
+        return false;
+    }
+
+    public Serializable disassemble(Object value) throws HibernateException
+    {
+        return (Serializable) value;
+    }
+
+    public Object assemble(Serializable cached, Object value) throws HibernateException
+    {
+        return cached;
+    }
+
+    public Object replace(Object original, Object target, Object owner) throws HibernateException
+    {
+        return original;
+    }
+
+	public String objectToSQLString(Object object)
+	{
+		throw new UnsupportedOperationException();
+	}
+
+	public String toXMLString(Object object)
+	{
+		return object.toString();
+	}
+
+	public Object fromXMLString(String string)
+	{
+		return new LocalTime(string);
+	}
+}
diff --git a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalTimeExact.java b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalTimeExact.java
new file mode 100644
index 000000000..d51ba853c
--- /dev/null
+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalTimeExact.java
@@ -0,0 +1,135 @@
+package org.joda.time.contrib.hibernate;
+
+import org.hibernate.usertype.EnhancedUserType;
+import org.hibernate.HibernateException;
+import org.hibernate.Hibernate;
+import org.joda.time.LocalTime;
+
+import java.sql.Types;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.PreparedStatement;
+import java.io.Serializable;
+
+/**
+ * Persist {@link org.joda.time.LocalDate} via hibernate
+ *
+ * @author Mario Ivankovits (mario@ops.co.at)
+ */
+public class PersistentLocalTimeExact implements EnhancedUserType
+{
+	public final static PersistentLocalTimeExact INSTANCE = new PersistentLocalTimeExact();
+
+	private static final int[] SQL_TYPES = new int[]
+    {
+        Types.INTEGER,
+    };
+
+    public int[] sqlTypes()
+    {
+        return SQL_TYPES;
+    }
+
+    public Class returnedClass()
+    {
+        return LocalTime.class;
+    }
+
+    public boolean equals(Object x, Object y) throws HibernateException
+	{
+        if (x == y)
+        {
+            return true;
+        }
+        if (x == null || y == null)
+        {
+            return false;
+        }
+        LocalTime dtx = (LocalTime) x;
+        LocalTime dty = (LocalTime) y;
+
+        return dtx.equals(dty);
+    }
+
+    public int hashCode(Object object) throws HibernateException
+    {
+        return object.hashCode();
+    }
+
+    public Object nullSafeGet(ResultSet resultSet, String[] strings, Object object) throws HibernateException, SQLException
+	{
+		return nullSafeGet(resultSet, strings[0]);
+
+	}
+
+	public Object nullSafeGet(ResultSet resultSet, String string) throws SQLException
+	{
+		Object timestamp = Hibernate.INTEGER.nullSafeGet(resultSet, string);
+		if (timestamp == null)
+		{
+			return null;
+		}
+
+		return LocalTime.fromMillisOfDay(((Number) timestamp).intValue());
+	}
+
+
+	public void nullSafeSet(PreparedStatement preparedStatement, Object value, int index) throws HibernateException, SQLException
+	{
+		if (value == null)
+		{
+			Hibernate.INTEGER.nullSafeSet(preparedStatement, null, index);
+		}
+		else
+		{
+			LocalTime lt = ((LocalTime) value);
+
+			Hibernate.INTEGER.nullSafeSet(preparedStatement, new Integer(lt.getMillisOfDay()), index);
+		}
+	}
+
+    public Object deepCopy(Object value) throws HibernateException
+    {
+        if (value == null)
+        {
+            return null;
+        }
+
+        return new LocalTime(value);
+    }
+
+    public boolean isMutable()
+    {
+        return false;
+    }
+
+    public Serializable disassemble(Object value) throws HibernateException
+    {
+        return (Serializable) value;
+    }
+
+    public Object assemble(Serializable cached, Object value) throws HibernateException
+    {
+        return cached;
+    }
+
+    public Object replace(Object original, Object target, Object owner) throws HibernateException
+    {
+        return original;
+    }
+
+	public String objectToSQLString(Object object)
+	{
+		throw new UnsupportedOperationException();
+	}
+
+	public String toXMLString(Object object)
+	{
+		return object.toString();
+	}
+
+	public Object fromXMLString(String string)
+	{
+		return new LocalTime(string);
+	}
+}
diff --git a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/Event.java b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/Event.java
index 166f0644d..e53b5af41 100644
--- a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/Event.java
+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/Event.java
@@ -1,6 +1,8 @@
 package org.joda.time.contrib.hibernate;
 
 import org.joda.time.DateTime;
+import org.joda.time.LocalDate;
+import org.joda.time.LocalTime;
 
 import java.io.Serializable;
 
@@ -11,8 +13,12 @@
 {
     private int id;
     private DateTime dateTime;
+	private LocalDate localDate;
+	private LocalTime localTime;
+	private LocalTime localTime2;
+	private LocalTime localTime3;
 
-    public Event()
+	public Event()
     {
     }
 
@@ -35,4 +41,44 @@ public void setDateTime(DateTime dateTime)
     {
         this.dateTime = dateTime;
     }
+
+	public LocalDate getLocalDate()
+	{
+		return localDate;
+	}
+
+	public void setLocalDate(LocalDate localDate)
+	{
+		this.localDate = localDate;
+	}
+
+	public LocalTime getLocalTime()
+	{
+		return localTime;
+	}
+
+	public void setLocalTime(LocalTime localTime)
+	{
+		this.localTime = localTime;
+	}
+
+	public LocalTime getLocalTime2()
+	{
+		return localTime2;
+	}
+
+	public void setLocalTime2(LocalTime localTime2)
+	{
+		this.localTime2 = localTime2;
+	}
+
+	public LocalTime getLocalTime3()
+	{
+		return localTime3;
+	}
+
+	public void setLocalTime3(LocalTime localTime3)
+	{
+		this.localTime3 = localTime3;
+	}
 }
diff --git a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/HibernateTestCase.java b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/HibernateTestCase.java
index 9926dcddc..9a3e5b469 100644
--- a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/HibernateTestCase.java
+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/HibernateTestCase.java
@@ -35,8 +35,11 @@ protected SessionFactory getSessionFactory()
 
 	protected void tearDown() throws Exception
 	{
-		this.factory.close();
-		this.factory = null;
+		if (this.factory != null)
+		{
+			this.factory.close();
+			this.factory = null;
+		}
 	}
 
 	protected abstract void setupConfiguration(Configuration cfg);
diff --git a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentLocalDate.java b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentLocalDate.java
new file mode 100644
index 000000000..bc75e9eab
--- /dev/null
+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentLocalDate.java
@@ -0,0 +1,64 @@
+package org.joda.time.contrib.hibernate;
+
+import org.hibernate.Session;
+import org.hibernate.SessionFactory;
+import org.hibernate.cfg.Configuration;
+import org.joda.time.LocalDate;
+
+import java.io.File;
+import java.sql.SQLException;
+
+public class TestPersistentLocalDate extends HibernateTestCase
+{
+    private LocalDate[] writeReadTimes = new LocalDate[]
+    {
+        new LocalDate(2004, 2, 25),
+        new LocalDate(1980, 3, 11)
+    };
+
+    public void testSimpleStore() throws SQLException
+	{
+        SessionFactory factory = getSessionFactory();
+
+        Session session = factory.openSession();
+
+        for (int i = 0; i<writeReadTimes.length; i++)
+        {
+            LocalDate writeReadTime = writeReadTimes[i];
+
+            Event event = new Event();
+            event.setId(i);
+            event.setLocalDate(writeReadTime);
+
+            session.save(event);
+        }
+
+        session.flush();
+        session.connection().commit();
+        session.close();
+
+        for (int i = 0; i<writeReadTimes.length; i++)
+        {
+            LocalDate writeReadTime = writeReadTimes[i];
+
+            session = factory.openSession();
+            Event eventReread = (Event) session.get(Event.class, new Integer(i));
+
+            assertNotNull("get failed - event#'" + i + "'not found", eventReread);
+            assertNotNull("get failed - returned null", eventReread.getLocalDate());
+
+            // we loose the timezone, so we have to normalize both to offset=0
+            assertEquals("get failed - returned different time",
+                writeReadTime,
+                eventReread.getLocalDate());
+
+            session.close();
+        }
+    }
+
+	protected void setupConfiguration(Configuration cfg)
+	{
+		cfg.addFile(new File("src/test/org/joda/time/contrib/hibernate/event.hbm.xml"));
+		cfg.addFile(new File("src/test/org/joda/time/contrib/hibernate/eventTZ.hbm.xml"));
+	}
+}
diff --git a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentLocalTime.java b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentLocalTime.java
new file mode 100644
index 000000000..258044487
--- /dev/null
+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentLocalTime.java
@@ -0,0 +1,78 @@
+package org.joda.time.contrib.hibernate;
+
+import org.joda.time.LocalDate;
+import org.joda.time.LocalTime;
+import org.hibernate.SessionFactory;
+import org.hibernate.Session;
+import org.hibernate.cfg.Configuration;
+
+import java.sql.SQLException;
+import java.io.File;
+
+public class TestPersistentLocalTime extends HibernateTestCase
+{
+    private LocalTime[] writeReadTimes = new LocalTime[]
+    {
+        new LocalTime(14, 2, 25),
+        new LocalTime(23, 59, 59, 999),
+		new LocalTime(0, 0, 0)
+    };
+
+    public void testSimpleStore() throws SQLException
+	{
+        SessionFactory factory = getSessionFactory();
+
+        Session session = factory.openSession();
+
+        for (int i = 0; i<writeReadTimes.length; i++)
+        {
+            LocalTime writeReadTime = writeReadTimes[i];
+
+            Event event = new Event();
+            event.setId(i);
+            event.setLocalTime(writeReadTime);
+			event.setLocalTime2(writeReadTime);
+			event.setLocalTime3(writeReadTime);
+
+            session.save(event);
+        }
+
+        session.flush();
+        session.connection().commit();
+        session.close();
+
+        for (int i = 0; i<writeReadTimes.length; i++)
+        {
+            LocalTime writeReadTime = writeReadTimes[i];
+
+            session = factory.openSession();
+            Event eventReread = (Event) session.get(Event.class, new Integer(i));
+
+            assertNotNull("get failed - event#'" + i + "'not found", eventReread);
+            assertNotNull("get failed - returned null", eventReread.getLocalTime());
+			assertNotNull("get failed - returned null", eventReread.getLocalTime2());
+			assertNotNull("get failed - returned null", eventReread.getLocalTime3());
+
+            // we might loose the millis, depends on database
+            assertEquals("get failed - returned different time (TIME)",
+                writeReadTime.getMillisOfDay()/1000,
+                eventReread.getLocalTime().getMillisOfDay()/1000);
+
+			assertEquals("get failed - returned different time (INT)",
+				writeReadTime.getMillisOfDay(),
+				eventReread.getLocalTime2().getMillisOfDay());
+
+			assertEquals("get failed - returned different time (STRING)",
+				writeReadTime.getMillisOfDay(),
+				eventReread.getLocalTime3().getMillisOfDay());
+
+			session.close();
+        }
+    }
+
+	protected void setupConfiguration(Configuration cfg)
+	{
+		cfg.addFile(new File("src/test/org/joda/time/contrib/hibernate/event.hbm.xml"));
+		cfg.addFile(new File("src/test/org/joda/time/contrib/hibernate/eventTZ.hbm.xml"));
+	}
+}
diff --git a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/event.hbm.xml b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/event.hbm.xml
index 31995a77d..e038327ba 100644
--- a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/event.hbm.xml
+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/event.hbm.xml
@@ -11,6 +11,13 @@
 
                 <property type="org.joda.time.contrib.hibernate.PersistentDateTime" name="dateTime"/>
 
+				<property type="org.joda.time.contrib.hibernate.PersistentLocalDate" name="localDate"/>
+
+				<property type="org.joda.time.contrib.hibernate.PersistentLocalTimeAsTime" name="localTime"/>
+
+				<property type="org.joda.time.contrib.hibernate.PersistentLocalTimeExact" name="localTime2"/>
+
+				<property type="org.joda.time.contrib.hibernate.PersistentLocalTimeAsString" name="localTime3"/>
         </class>
 
 </hibernate-mapping>

From 76f61a201bfea2e2f60c8b68196c59de590f0fa2 Mon Sep 17 00:00:00 2001
From: Mario Ivankovits <mario@ops.co.at>
Date: Tue, 30 Jan 2007 21:46:47 +0000
Subject: [PATCH 012/112] added documentation, adjusted joda-time version

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1182 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/hibernate/project.xml         |   2 +-
 JodaTimeContrib/hibernate/xdocs/userguide.xml | 106 +++++++++++++++++-
 2 files changed, 105 insertions(+), 3 deletions(-)

diff --git a/JodaTimeContrib/hibernate/project.xml b/JodaTimeContrib/hibernate/project.xml
index e18f0c94e..67aea18a5 100644
--- a/JodaTimeContrib/hibernate/project.xml
+++ b/JodaTimeContrib/hibernate/project.xml
@@ -76,7 +76,7 @@
     <dependency>
       <groupId>joda-time</groupId>
       <artifactId>joda-time</artifactId>
-      <version>1.2</version>
+      <version>1.4</version>
       <properties>
         <comment>Compatible with v1.0 or later</comment>
       </properties>
diff --git a/JodaTimeContrib/hibernate/xdocs/userguide.xml b/JodaTimeContrib/hibernate/xdocs/userguide.xml
index 7f894ad83..94b227ef2 100644
--- a/JodaTimeContrib/hibernate/xdocs/userguide.xml
+++ b/JodaTimeContrib/hibernate/xdocs/userguide.xml
@@ -17,10 +17,112 @@ persist Joda-Time based date and time objects to a database using Hibernate.
 
 <!-- ========================================================================= -->
 
-<subsection name="TODO">
+<subsection name="Documentation">
 <p>
-TODO
+	Its fairly easy to use this package in your Hibernate environment.
 </p>
+<p>
+	We have a couple of classes you simply have to configure in your hibernate mapping file or through
+	hibernate-annotations.
+</p>
+	<subsection name="Hibernate mapping">
+		<p>
+		Add the <code>type</code> attribute to your property configuration. e.g.:
+		</p>
+		<pre><![CDATA[
+<property type="org.joda.time.contrib.hibernate.PersistentDateTime" name="dateTime"/>
+		]]></pre>
+	</subsection>
+
+	<subsection name="Hibernate annotations">
+		<p>
+		Set the type using the <code>@org.hibernate.annotations.Type</code> annotation. e.g.:
+		</p>
+		<pre><![CDATA[
+@Column
+@Type(type="org.joda.time.contrib.hibernate.PersistentDateTime")
+private DateTime fromDate;
+		]]></pre>
+	</subsection>
+	<subsection name="Available Types">
+		<p>
+			The main types usable to persist Joda-Time objects
+		</p>
+		<table>
+			<tr>
+				<th>Class</th>
+				<th>SQL Column Type(s)</th>
+				<th>Description</th>
+			</tr>
+			<tr>
+				<td>org.joda.time.contrib.hibernate.PersistentDateTime</td>
+				<td>TIMESTAMP</td>
+				<td></td>
+			</tr>
+			<tr>
+				<td>org.joda.time.contrib.hibernate.PersistentDateTimeTZ</td>
+				<td>TIMESTAMP, VARCHAR</td>
+				<td>This persister uses two columns, to separately store the time value and its timezone</td>
+			</tr>
+			<tr>
+				<td>org.joda.time.contrib.hibernate.PersistentInterval</td>
+				<td>TIMESTAMP, TIMESTAMP</td>
+				<td>This persister uses two columns, to store the start and end of the interval</td>
+			</tr>
+			<tr>
+				<td>org.joda.time.contrib.hibernate.PersistentLocalDate</td>
+				<td>TIMESTAMP</td>
+				<td></td>
+			</tr>
+			<tr>
+				<td>org.joda.time.contrib.hibernate.PersistentLocalTimeAsTime</td>
+				<td>TIME</td>
+				<td>Depending on your Database you might loose the millisecond part</td>
+			</tr>
+			<tr>
+				<td>org.joda.time.contrib.hibernate.PersistentLocalTimeExact</td>
+				<td>INTEGER</td>
+				<td>The milliseconds are stored as simple integer value, no information loss</td>
+			</tr>
+			<tr>
+				<td>org.joda.time.contrib.hibernate.PersistentLocalTimeAsString</td>
+				<td>VARCHAR</td>
+				<td>Same as above, just uses a human readable representation. ISO8601 format - HH:mm:ss.SSSZ</td>
+			</tr>
+		</table>
+
+	</subsection>
+
+	<subsection name="Outdated Types">
+		<p>
+			These types are somehow in a "pre deprecation" state. Joda-Time provides
+			the more sophisticated types LocalDate and LocalTime and you should use them
+			where possible.
+		</p>
+		<table>
+			<tr>
+				<th>Class</th>
+				<th>SQL Column Type(s)</th>
+				<th>Description</th>
+			</tr>
+			<tr>
+				<td>org.joda.time.contrib.hibernate.PersistentTimeOfDay</td>
+				<td>TIME</td>
+				<td>Depending on your Database you might loose the millisecond part</td>
+			</tr>
+			<tr>
+				<td>org.joda.time.contrib.hibernate.PersistentTimeOfDayExact</td>
+				<td>INTEGER</td>
+				<td>The milliseconds are stored as simple integer value, no information loss</td>
+			</tr>
+			<tr>
+				<td>org.joda.time.contrib.hibernate.PersistentYearMonthDay</td>
+				<td>DATE</td>
+				<td></td>
+			</tr>
+		</table>
+	</subsection>
+
 </subsection>
 </section>
 

From 1945a52ff262dfcd5f29281cfac3d197ac8d69e1 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 30 Jan 2007 23:32:48 +0000
Subject: [PATCH 013/112] Update to Joda-Time 1.3 jar file

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1183 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/hibernate/.classpath | 45 ++++++++++------------------
 1 file changed, 15 insertions(+), 30 deletions(-)

diff --git a/JodaTimeContrib/hibernate/.classpath b/JodaTimeContrib/hibernate/.classpath
index b29791e64..34c71f009 100644
--- a/JodaTimeContrib/hibernate/.classpath
+++ b/JodaTimeContrib/hibernate/.classpath
@@ -1,32 +1,17 @@
 <?xml version="1.0" encoding="UTF-8"?>
-
 <classpath>
-  <classpathentry excluding="" kind="src" path="src/java">
-  </classpathentry>
-  <classpathentry output="target/test-classes" kind="src" path="src/test">
-  </classpathentry>
-  <classpathentry kind="var" path="MAVEN_REPO/junit/jars/junit-3.8.1.jar">
-  </classpathentry>
-  <classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER">
-  </classpathentry>
-  <classpathentry kind="var" path="MAVEN_REPO/joda-time/jars/joda-time-1.0.jar">
-  </classpathentry>
-  <classpathentry kind="var" path="MAVEN_REPO/hibernate/jars/hibernate-3.0.5.jar">
-  </classpathentry>
-  <classpathentry kind="var" path="MAVEN_REPO/commons-logging/jars/commons-logging-api-1.0.4.jar">
-  </classpathentry>
-  <classpathentry kind="var" path="MAVEN_REPO/commons-collections/jars/commons-collections-3.1.jar">
-  </classpathentry>
-  <classpathentry kind="var" path="MAVEN_REPO/hsqldb/jars/hsqldb-1.7.3.3.jar">
-  </classpathentry>
-  <classpathentry kind="var" path="MAVEN_REPO/ehcache/jars/ehcache-1.1.jar">
-  </classpathentry>
-  <classpathentry kind="var" path="MAVEN_REPO/dom4j/jars/dom4j-1.6.jar">
-  </classpathentry>
-  <classpathentry kind="var" path="MAVEN_REPO/cglib/jars/cglib-full-2.0.2.jar">
-  </classpathentry>
-  <classpathentry kind="var" path="MAVEN_REPO/jta/jars/jta-1_0_1B-classes.zip">
-  </classpathentry>
-  <classpathentry kind="output" path="target/classes">
-  </classpathentry>
-</classpath>
\ No newline at end of file
+	<classpathentry kind="src" path="src/java"/>
+	<classpathentry kind="src" output="target/test-classes" path="src/test"/>
+	<classpathentry kind="var" path="MAVEN_REPO/junit/jars/junit-3.8.1.jar"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
+	<classpathentry kind="var" path="MAVEN_REPO/hibernate/jars/hibernate-3.0.5.jar"/>
+	<classpathentry kind="var" path="MAVEN_REPO/commons-logging/jars/commons-logging-api-1.0.4.jar"/>
+	<classpathentry kind="var" path="MAVEN_REPO/commons-collections/jars/commons-collections-3.1.jar"/>
+	<classpathentry kind="var" path="MAVEN_REPO/hsqldb/jars/hsqldb-1.7.3.3.jar"/>
+	<classpathentry kind="var" path="MAVEN_REPO/ehcache/jars/ehcache-1.1.jar"/>
+	<classpathentry kind="var" path="MAVEN_REPO/dom4j/jars/dom4j-1.6.jar"/>
+	<classpathentry kind="var" path="MAVEN_REPO/cglib/jars/cglib-full-2.0.2.jar"/>
+	<classpathentry kind="var" path="MAVEN_REPO/jta/jars/jta-1_0_1B-classes.zip"/>
+	<classpathentry kind="var" path="MAVEN_REPO/joda-time/jars/joda-time-1.3.jar"/>
+	<classpathentry kind="output" path="target/classes"/>
+</classpath>

From 4d6a1ecf998f3423a7a07ec764cbaad6e451147f Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 30 Jan 2007 23:39:43 +0000
Subject: [PATCH 014/112] Add and update Joda ASF2 license

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1184 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../contrib/hibernate/PersistentDateTime.java | 12 +++----
 .../hibernate/PersistentDateTimeTZ.java       | 14 ++++----
 .../contrib/hibernate/PersistentInterval.java |  3 +-
 .../hibernate/PersistentLocalDate.java        | 32 +++++++++++++------
 .../PersistentLocalTimeAsString.java          | 31 +++++++++++++-----
 .../hibernate/PersistentLocalTimeAsTime.java  | 29 +++++++++++++----
 .../hibernate/PersistentLocalTimeExact.java   | 31 +++++++++++++-----
 .../hibernate/PersistentTimeOfDay.java        | 17 +++++-----
 .../hibernate/PersistentTimeOfDayExact.java   | 15 ++++-----
 .../hibernate/PersistentYearMonthDay.java     | 12 +++----
 .../joda/time/contrib/hibernate/Event.java    | 19 +++++++++--
 .../joda/time/contrib/hibernate/EventTZ.java  | 19 +++++++++--
 .../contrib/hibernate/HibernateTestCase.java  | 16 ++++++++++
 .../org/joda/time/contrib/hibernate/Plan.java | 15 +++++++++
 .../joda/time/contrib/hibernate/Schedule.java | 21 ++++++++++--
 .../hibernate/TestPersistentDateTime.java     | 21 ++++++++++--
 .../hibernate/TestPersistentInterval.java     | 15 +++++++++
 .../hibernate/TestPersistentLocalDate.java    | 21 ++++++++++--
 .../hibernate/TestPersistentLocalTime.java    | 26 +++++++++++----
 .../hibernate/TestPersistentTimeOfDay.java    | 21 ++++++++++--
 .../TestPersistentTimeOfDayExact.java         | 21 ++++++++++--
 .../hibernate/TestPersistentYearMonthDay.java | 21 ++++++++++--
 22 files changed, 333 insertions(+), 99 deletions(-)

diff --git a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentDateTime.java b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentDateTime.java
index f7dba416d..e49a275b3 100644
--- a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentDateTime.java
+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentDateTime.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2007 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -15,17 +15,17 @@
  */
 package org.joda.time.contrib.hibernate;
 
-import org.hibernate.Hibernate;
-import org.hibernate.HibernateException;
-import org.hibernate.usertype.EnhancedUserType;
-import org.joda.time.DateTime;
-
 import java.io.Serializable;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.sql.Types;
 
+import org.hibernate.Hibernate;
+import org.hibernate.HibernateException;
+import org.hibernate.usertype.EnhancedUserType;
+import org.joda.time.DateTime;
+
 /**
  * Persist {@link org.joda.time.DateTime} via hibernate
  *
diff --git a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentDateTimeTZ.java b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentDateTimeTZ.java
index e8ec0352f..d6ff77936 100644
--- a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentDateTimeTZ.java
+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentDateTimeTZ.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2007 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -15,18 +15,18 @@
  */
 package org.joda.time.contrib.hibernate;
 
-import org.hibernate.Hibernate;
-import org.hibernate.HibernateException;
-import org.hibernate.usertype.UserType;
-import org.joda.time.DateTime;
-import org.joda.time.DateTimeZone;
-
 import java.io.Serializable;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.sql.Types;
 
+import org.hibernate.Hibernate;
+import org.hibernate.HibernateException;
+import org.hibernate.usertype.UserType;
+import org.joda.time.DateTime;
+import org.joda.time.DateTimeZone;
+
 /**
  * Persist {@link org.joda.time.DateTime} via hibernate.<br />
  * The timezone will be stored in an extra column
diff --git a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInterval.java b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInterval.java
index e2f258ec8..b6222a8b1 100644
--- a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInterval.java
+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInterval.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2007 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -28,7 +28,6 @@
 import org.hibernate.usertype.CompositeUserType;
 import org.joda.time.DateTime;
 import org.joda.time.Interval;
-import org.joda.time.contrib.hibernate.PersistentDateTime;
 
 /**
  * Persist {@link org.joda.time.Interval} via hibernate. Internally, this class
diff --git a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalDate.java b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalDate.java
index 978ed929e..aba66b603 100644
--- a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalDate.java
+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalDate.java
@@ -1,16 +1,30 @@
+/*
+ *  Copyright 2001-2007 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
 package org.joda.time.contrib.hibernate;
 
-import org.hibernate.usertype.EnhancedUserType;
-import org.hibernate.HibernateException;
-import org.hibernate.Hibernate;
-import org.joda.time.DateTime;
-import org.joda.time.LocalDate;
-
-import java.sql.Types;
+import java.io.Serializable;
+import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
-import java.sql.PreparedStatement;
-import java.io.Serializable;
+import java.sql.Types;
+
+import org.hibernate.Hibernate;
+import org.hibernate.HibernateException;
+import org.hibernate.usertype.EnhancedUserType;
+import org.joda.time.LocalDate;
 
 /**
  * Persist {@link org.joda.time.LocalDate} via hibernate
diff --git a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalTimeAsString.java b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalTimeAsString.java
index b8932a5a2..42120d426 100644
--- a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalTimeAsString.java
+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalTimeAsString.java
@@ -1,15 +1,30 @@
+/*
+ *  Copyright 2001-2007 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
 package org.joda.time.contrib.hibernate;
 
-import org.hibernate.usertype.EnhancedUserType;
-import org.hibernate.HibernateException;
-import org.hibernate.Hibernate;
-import org.joda.time.LocalTime;
-
-import java.sql.Types;
+import java.io.Serializable;
+import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
-import java.sql.PreparedStatement;
-import java.io.Serializable;
+import java.sql.Types;
+
+import org.hibernate.Hibernate;
+import org.hibernate.HibernateException;
+import org.hibernate.usertype.EnhancedUserType;
+import org.joda.time.LocalTime;
 
 /**
  * Persist {@link org.joda.time.LocalDate} via hibernate
diff --git a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalTimeAsTime.java b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalTimeAsTime.java
index 702ecb8a8..6c11befc7 100644
--- a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalTimeAsTime.java
+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalTimeAsTime.java
@@ -1,17 +1,32 @@
+/*
+ *  Copyright 2001-2007 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
 package org.joda.time.contrib.hibernate;
 
-import org.hibernate.Hibernate;
-import org.hibernate.HibernateException;
-import org.hibernate.usertype.EnhancedUserType;
-import org.joda.time.LocalTime;
-import org.joda.time.DateTimeZone;
-
 import java.io.Serializable;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
-import java.sql.Types;
 import java.sql.Time;
+import java.sql.Types;
+
+import org.hibernate.Hibernate;
+import org.hibernate.HibernateException;
+import org.hibernate.usertype.EnhancedUserType;
+import org.joda.time.DateTimeZone;
+import org.joda.time.LocalTime;
 
 /**
  * Persist {@link org.joda.time.LocalDate} via hibernate
diff --git a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalTimeExact.java b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalTimeExact.java
index d51ba853c..922569120 100644
--- a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalTimeExact.java
+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalTimeExact.java
@@ -1,15 +1,30 @@
+/*
+ *  Copyright 2001-2007 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
 package org.joda.time.contrib.hibernate;
 
-import org.hibernate.usertype.EnhancedUserType;
-import org.hibernate.HibernateException;
-import org.hibernate.Hibernate;
-import org.joda.time.LocalTime;
-
-import java.sql.Types;
+import java.io.Serializable;
+import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
-import java.sql.PreparedStatement;
-import java.io.Serializable;
+import java.sql.Types;
+
+import org.hibernate.Hibernate;
+import org.hibernate.HibernateException;
+import org.hibernate.usertype.EnhancedUserType;
+import org.joda.time.LocalTime;
 
 /**
  * Persist {@link org.joda.time.LocalDate} via hibernate
diff --git a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentTimeOfDay.java b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentTimeOfDay.java
index 72dd180f2..03dc1a238 100644
--- a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentTimeOfDay.java
+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentTimeOfDay.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2007 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -15,19 +15,18 @@
  */
 package org.joda.time.contrib.hibernate;
 
-import org.hibernate.Hibernate;
-import org.hibernate.HibernateException;
-import org.hibernate.usertype.EnhancedUserType;
-import org.joda.time.YearMonthDay;
-import org.joda.time.TimeOfDay;
-import org.joda.time.DateTime;
-
 import java.io.Serializable;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
-import java.sql.Types;
 import java.sql.Time;
+import java.sql.Types;
+
+import org.hibernate.Hibernate;
+import org.hibernate.HibernateException;
+import org.hibernate.usertype.EnhancedUserType;
+import org.joda.time.DateTime;
+import org.joda.time.TimeOfDay;
 
 /**
  * Persist {@link org.joda.time.TimeOfDay} via hibernate. <br />
diff --git a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentTimeOfDayExact.java b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentTimeOfDayExact.java
index 36611c8c0..976bd3407 100644
--- a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentTimeOfDayExact.java
+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentTimeOfDayExact.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2007 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -15,19 +15,16 @@
  */
 package org.joda.time.contrib.hibernate;
 
-import org.hibernate.Hibernate;
-import org.hibernate.HibernateException;
-import org.hibernate.usertype.EnhancedUserType;
-import org.joda.time.YearMonthDay;
-import org.joda.time.TimeOfDay;
-import org.joda.time.DateTime;
-
 import java.io.Serializable;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.sql.Types;
-import java.sql.Time;
+
+import org.hibernate.HibernateException;
+import org.hibernate.usertype.EnhancedUserType;
+import org.joda.time.DateTime;
+import org.joda.time.TimeOfDay;
 
 /**
  * Persist {@link org.joda.time.TimeOfDay} via hibernate.<br />
diff --git a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentYearMonthDay.java b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentYearMonthDay.java
index b3918bb42..98cdca30d 100644
--- a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentYearMonthDay.java
+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentYearMonthDay.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2007 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -15,17 +15,17 @@
  */
 package org.joda.time.contrib.hibernate;
 
-import org.hibernate.Hibernate;
-import org.hibernate.HibernateException;
-import org.hibernate.usertype.EnhancedUserType;
-import org.joda.time.YearMonthDay;
-
 import java.io.Serializable;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.sql.Types;
 
+import org.hibernate.Hibernate;
+import org.hibernate.HibernateException;
+import org.hibernate.usertype.EnhancedUserType;
+import org.joda.time.YearMonthDay;
+
 /**
  * Persist {@link org.joda.time.YearMonthDay} via hibernate
  *
diff --git a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/Event.java b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/Event.java
index e53b5af41..7b6751b88 100644
--- a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/Event.java
+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/Event.java
@@ -1,11 +1,26 @@
+/*
+ *  Copyright 2001-2007 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
 package org.joda.time.contrib.hibernate;
 
+import java.io.Serializable;
+
 import org.joda.time.DateTime;
 import org.joda.time.LocalDate;
 import org.joda.time.LocalTime;
 
-import java.io.Serializable;
-
 /**
  * PO to be stored using hibernate
  */
diff --git a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/EventTZ.java b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/EventTZ.java
index b3095095a..f4f623dfe 100644
--- a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/EventTZ.java
+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/EventTZ.java
@@ -1,9 +1,24 @@
+/*
+ *  Copyright 2001-2007 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
 package org.joda.time.contrib.hibernate;
 
-import org.joda.time.DateTime;
-
 import java.io.Serializable;
 
+import org.joda.time.DateTime;
+
 /**
  * PO to be stored using hibernate
  */
diff --git a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/HibernateTestCase.java b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/HibernateTestCase.java
index 9a3e5b469..10b75451d 100644
--- a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/HibernateTestCase.java
+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/HibernateTestCase.java
@@ -1,6 +1,22 @@
+/*
+ *  Copyright 2001-2007 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
 package org.joda.time.contrib.hibernate;
 
 import junit.framework.TestCase;
+
 import org.hibernate.SessionFactory;
 import org.hibernate.cfg.Configuration;
 import org.hibernate.dialect.HSQLDialect;
diff --git a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/Plan.java b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/Plan.java
index c3c296fb9..f7d16b46f 100644
--- a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/Plan.java
+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/Plan.java
@@ -1,3 +1,18 @@
+/*
+ *  Copyright 2001-2007 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
 package org.joda.time.contrib.hibernate;
 
 import org.joda.time.Interval;
diff --git a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/Schedule.java b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/Schedule.java
index faf395377..a006408c9 100644
--- a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/Schedule.java
+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/Schedule.java
@@ -1,10 +1,25 @@
+/*
+ *  Copyright 2001-2007 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
 package org.joda.time.contrib.hibernate;
 
-import org.joda.time.YearMonthDay;
-import org.joda.time.TimeOfDay;
-
 import java.io.Serializable;
 
+import org.joda.time.TimeOfDay;
+import org.joda.time.YearMonthDay;
+
 /**
  * PO to be stored using hibernate
  */
diff --git a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentDateTime.java b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentDateTime.java
index 3fa8cee11..7a5ddf7c9 100644
--- a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentDateTime.java
+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentDateTime.java
@@ -1,14 +1,29 @@
+/*
+ *  Copyright 2001-2007 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
 package org.joda.time.contrib.hibernate;
 
+import java.io.File;
+import java.sql.SQLException;
+
 import org.hibernate.Session;
 import org.hibernate.SessionFactory;
 import org.hibernate.cfg.Configuration;
 import org.joda.time.DateTime;
 import org.joda.time.DateTimeZone;
 
-import java.io.File;
-import java.sql.SQLException;
-
 public class TestPersistentDateTime extends HibernateTestCase
 {
     private DateTime[] writeReadTimes = new DateTime[]
diff --git a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentInterval.java b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentInterval.java
index d7826131c..99a7d3c36 100644
--- a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentInterval.java
+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentInterval.java
@@ -1,3 +1,18 @@
+/*
+ *  Copyright 2001-2007 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
 package org.joda.time.contrib.hibernate;
 
 import java.io.File;
diff --git a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentLocalDate.java b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentLocalDate.java
index bc75e9eab..dd648f004 100644
--- a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentLocalDate.java
+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentLocalDate.java
@@ -1,13 +1,28 @@
+/*
+ *  Copyright 2001-2007 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
 package org.joda.time.contrib.hibernate;
 
+import java.io.File;
+import java.sql.SQLException;
+
 import org.hibernate.Session;
 import org.hibernate.SessionFactory;
 import org.hibernate.cfg.Configuration;
 import org.joda.time.LocalDate;
 
-import java.io.File;
-import java.sql.SQLException;
-
 public class TestPersistentLocalDate extends HibernateTestCase
 {
     private LocalDate[] writeReadTimes = new LocalDate[]
diff --git a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentLocalTime.java b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentLocalTime.java
index 258044487..80b02326f 100644
--- a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentLocalTime.java
+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentLocalTime.java
@@ -1,13 +1,27 @@
+/*
+ *  Copyright 2001-2007 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
 package org.joda.time.contrib.hibernate;
 
-import org.joda.time.LocalDate;
-import org.joda.time.LocalTime;
-import org.hibernate.SessionFactory;
+import java.io.File;
+import java.sql.SQLException;
+
 import org.hibernate.Session;
+import org.hibernate.SessionFactory;
 import org.hibernate.cfg.Configuration;
-
-import java.sql.SQLException;
-import java.io.File;
+import org.joda.time.LocalTime;
 
 public class TestPersistentLocalTime extends HibernateTestCase
 {
diff --git a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentTimeOfDay.java b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentTimeOfDay.java
index b97f1a870..1db24ffaf 100644
--- a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentTimeOfDay.java
+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentTimeOfDay.java
@@ -1,13 +1,28 @@
+/*
+ *  Copyright 2001-2007 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
 package org.joda.time.contrib.hibernate;
 
+import java.io.File;
+import java.sql.SQLException;
+
 import org.hibernate.Session;
 import org.hibernate.SessionFactory;
 import org.hibernate.cfg.Configuration;
 import org.joda.time.TimeOfDay;
 
-import java.io.File;
-import java.sql.SQLException;
-
 public class TestPersistentTimeOfDay extends HibernateTestCase
 {
     private TimeOfDay[] writeReadTimes = new TimeOfDay[]
diff --git a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentTimeOfDayExact.java b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentTimeOfDayExact.java
index 6fe259290..06661a6bd 100644
--- a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentTimeOfDayExact.java
+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentTimeOfDayExact.java
@@ -1,13 +1,28 @@
+/*
+ *  Copyright 2001-2007 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
 package org.joda.time.contrib.hibernate;
 
+import java.io.File;
+import java.sql.SQLException;
+
 import org.hibernate.Session;
 import org.hibernate.SessionFactory;
 import org.hibernate.cfg.Configuration;
 import org.joda.time.TimeOfDay;
 
-import java.io.File;
-import java.sql.SQLException;
-
 public class TestPersistentTimeOfDayExact extends HibernateTestCase
 {
     private TimeOfDay[] writeReadTimes = new TimeOfDay[]
diff --git a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentYearMonthDay.java b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentYearMonthDay.java
index f1a36ebe7..1cb679301 100644
--- a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentYearMonthDay.java
+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentYearMonthDay.java
@@ -1,13 +1,28 @@
+/*
+ *  Copyright 2001-2007 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
 package org.joda.time.contrib.hibernate;
 
+import java.io.File;
+import java.sql.SQLException;
+
 import org.hibernate.Session;
 import org.hibernate.SessionFactory;
 import org.hibernate.cfg.Configuration;
 import org.joda.time.YearMonthDay;
 
-import java.io.File;
-import java.sql.SQLException;
-
 public class TestPersistentYearMonthDay extends HibernateTestCase
 {
     private YearMonthDay[] writeReadTimes = new YearMonthDay[]

From 3568f72d6768a4ce995cd811552c4e7a87caefff Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 30 Jan 2007 23:41:16 +0000
Subject: [PATCH 015/112] Update Joda-Beans link

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1185 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/hibernate/xdocs/navigation.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/JodaTimeContrib/hibernate/xdocs/navigation.xml b/JodaTimeContrib/hibernate/xdocs/navigation.xml
index d87b96e4f..7759e01f6 100644
--- a/JodaTimeContrib/hibernate/xdocs/navigation.xml
+++ b/JodaTimeContrib/hibernate/xdocs/navigation.xml
@@ -30,7 +30,7 @@
     <menu name="Joda">
       <item name="Joda home" href="http://joda.sourceforge.net"/>
       <item name="Time" href="http://joda-time.sourceforge.net/index.html"/>
-      <item name="Beans" href="http://joda.sourceforge.net/beans.html"/>
+      <item name="Beans" href="http://joda-beans.sourceforge.net/index.html"/>
       <item name="Primitives" href="http://joda-primitives.sourceforge.net/index.html"/>
     </menu>
 

From 514d80beccaef8cce0b9a43da58b12f2141c1102 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 31 Jan 2007 00:06:13 +0000
Subject: [PATCH 016/112] Tidy user guide

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1186 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/hibernate/xdocs/userguide.xml | 16 ++++++----------
 1 file changed, 6 insertions(+), 10 deletions(-)

diff --git a/JodaTimeContrib/hibernate/xdocs/userguide.xml b/JodaTimeContrib/hibernate/xdocs/userguide.xml
index 94b227ef2..be23ee126 100644
--- a/JodaTimeContrib/hibernate/xdocs/userguide.xml
+++ b/JodaTimeContrib/hibernate/xdocs/userguide.xml
@@ -11,7 +11,7 @@
 
 <section name="Introduction">
 <p>
-<a href="/index.html">Joda-Time</a> Hibernate support provides classes to
+Joda-Time Hibernate support provides classes to
 persist Joda-Time based date and time objects to a database using Hibernate.
 </p>
 
@@ -19,12 +19,10 @@ persist Joda-Time based date and time objects to a database using Hibernate.
 
 <subsection name="Documentation">
 <p>
-	Its fairly easy to use this package in your Hibernate environment.
-</p>
-<p>
-	We have a couple of classes you simply have to configure in your hibernate mapping file or through
-	hibernate-annotations.
+	It is fairly easy to use this package in your Hibernate environment.
+	There are two main options for the configuration - the hibernate mapping file or annotations.
 </p>
+
 	<subsection name="Hibernate mapping">
 		<p>
 		Add the <code>type</code> attribute to your property configuration. e.g.:
@@ -46,7 +44,7 @@ private DateTime fromDate;
 	</subsection>
 	<subsection name="Available Types">
 		<p>
-			The main types usable to persist Joda-Time objects
+			The main types which can be persisted:
 		</p>
 		<table>
 			<tr>
@@ -95,9 +93,7 @@ private DateTime fromDate;
 
 	<subsection name="Outdated Types">
 		<p>
-			These types are somehow in a "pre deprecation" state. Joda-Time provides
-			the more sophisticated types LocalDate and LocalTime and you should use them
-			where possible.
+			The following types are now effectively deprecated, however persistence is still available:
 		</p>
 		<table>
 			<tr>

From 14589947c018901cdba024d3d71ebd8c9baa46cc Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 31 Jan 2007 00:07:33 +0000
Subject: [PATCH 017/112] Fixes to make maven happy

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1187 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/hibernate/project.properties | 5 +++++
 JodaTimeContrib/hibernate/project.xml        | 6 ++----
 2 files changed, 7 insertions(+), 4 deletions(-)

diff --git a/JodaTimeContrib/hibernate/project.properties b/JodaTimeContrib/hibernate/project.properties
index d8cf201e3..496e556b8 100644
--- a/JodaTimeContrib/hibernate/project.properties
+++ b/JodaTimeContrib/hibernate/project.properties
@@ -6,6 +6,9 @@ maven.xdoc.legend = false;
 maven.xdoc.theme.url = ./style/joda-theme.css
 maven.xdoc.locale.default=en
 
+maven.scm.svn.tag.base=https://svn.sourceforge.net/svnroot/joda-time/tags
+maven.changelog.factory=org.apache.maven.svnlib.SvnChangeLogFactory
+
 maven.compile.target=1.3
 maven.compile.source=1.3
 
@@ -28,3 +31,5 @@ maven.sourceforge.project.packageName=joda-time-hibernate
 maven.sourceforge.project.releaseNotes=RELEASE-NOTES.txt
 maven.sourceforge.project.sendEmailNotice=false
 maven.sourceforge.project.submitNewsItem=false
+
+maven.repo.remote=http://repo1.maven.org/maven
\ No newline at end of file
diff --git a/JodaTimeContrib/hibernate/project.xml b/JodaTimeContrib/hibernate/project.xml
index 67aea18a5..d5a4691e1 100644
--- a/JodaTimeContrib/hibernate/project.xml
+++ b/JodaTimeContrib/hibernate/project.xml
@@ -43,9 +43,7 @@
   </organization>
 
   <repository>
-    <!-- Does not appear to be supported in Maven-1.x
-    <connection>scm:svn:http://svn.sourceforge.net/viewcvs.cgi/joda-time/trunk</connection>
-    -->
+    <connection>scm:svn:https://svn.sourceforge.net/svnroot/joda-time/trunk/JodaTimeContrib/hibernate/</connection>
     <url>http://svn.sourceforge.net/viewcvs.cgi/joda-time/trunk/JodaTimeContrib/hibernate/</url>
   </repository>
 
@@ -147,7 +145,7 @@
      <report>maven-changes-plugin</report>
      <!--report>maven-checkstyle-plugin</report-->
      <!-- <report>maven-clover-plugin</report> -->
-     <report>maven-jcoverage-plugin</report>
+     <!--report>maven-jcoverage-plugin</report-->
      <report>maven-developer-activity-plugin</report>
      <report>maven-file-activity-plugin</report>
      <report>maven-javadoc-plugin</report>

From 903a0ac2e2dbc370cfba2ad499dd1fadb3f300d2 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Thu, 8 Feb 2007 16:16:01 +0000
Subject: [PATCH 018/112] Updated FAQ to include info on new US and Canada
 timezone rules.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1188 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/faq.xml | 13 ++++++++++++-
 1 file changed, 12 insertions(+), 1 deletion(-)

diff --git a/JodaTime/xdocs/faq.xml b/JodaTime/xdocs/faq.xml
index cbcc46aab..613939c4a 100644
--- a/JodaTime/xdocs/faq.xml
+++ b/JodaTime/xdocs/faq.xml
@@ -14,6 +14,7 @@
 <p>
 Some common questions about Joda-Time are answered here.
 <ul>
+<li><a href="#newzonerules">Does Joda-Time support the new US and Canada time zone rules?</a></li>
 <li><a href="#datediff">How do I calculate the difference between two dates?</a></li>
 <li><a href="#iso">What is ISO8601?</a></li>
 <li><a href="#default">Why is ISO8601 the default?</a></li>
@@ -28,10 +29,20 @@ Some common questions about Joda-Time are answered here.
 <li><a href="#tzreimplement">Why reimplement TimeZone?</a></li>
 <li><a href="#joda">What is with the name 'joda'?</a></li>
 </ul>
-Question not answered? Suggest one via the <a href="mail-lists.html">mailing list</a>.
+Question not answered? Suggest one via the <a href="mail-lists.html">mailing list</a>.<br></br>
 </p>
 
 
+<a name="newzonerules" />
+<subsection name="Does Joda-Time support the new US and Canada time zone rules?">
+<p>
+The new US time zone rules appeared in version 1.2.0, released on
+2005-12-21. Canada is also changing its time zone rules to match, and those
+rules appeard in version 1.2.1, released on 2006-02-12. If you wish to manually
+update the rules, follow the instructions <a href="tz_update.html">here</a>.
+</p>
+</subsection>
+
 <a name="datediff" />
 <subsection name="How do I calculate the difference between two dates?">
 <p>

From a5922db3ace7eed6fb29dbd5e0eee05a91b550a8 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 9 Feb 2007 00:37:00 +0000
Subject: [PATCH 019/112] FAQ on US/Canada DST change

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1189 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/faq.xml   | 22 ++++++++++++++++++----
 JodaTime/xdocs/index.xml |  4 ++++
 2 files changed, 22 insertions(+), 4 deletions(-)

diff --git a/JodaTime/xdocs/faq.xml b/JodaTime/xdocs/faq.xml
index 613939c4a..5283f9bdd 100644
--- a/JodaTime/xdocs/faq.xml
+++ b/JodaTime/xdocs/faq.xml
@@ -36,10 +36,24 @@ Question not answered? Suggest one via the <a href="mail-lists.html">mailing lis
 <a name="newzonerules" />
 <subsection name="Does Joda-Time support the new US and Canada time zone rules?">
 <p>
-The new US time zone rules appeared in version 1.2.0, released on
-2005-12-21. Canada is also changing its time zone rules to match, and those
-rules appeard in version 1.2.1, released on 2006-02-12. If you wish to manually
-update the rules, follow the instructions <a href="tz_update.html">here</a>.
+The US has decided to introduce new daylight savings rules for 2007.
+This is a frequent occurance in many parts of the world, but is an unusual experience for many US based developers.
+</p>
+<p>
+The time zone rules occur in three key places, your operating system, the JDK and Joda-Time.
+To be sure of hitting no issues, you should ensure that all three of these have been updated.
+</p>
+<p>
+As a general rule, using Joda-Time 1.4 is best - however here are the specific details:
+If your application only uses the major time zones of the US, then you need Joda-Time 1.2 or later.
+If your application also uses the major time zones of the Canada, then you need Joda-Time 1.2.1 or later.
+If your application uses the minor time zones of the US or Canada, then you need Joda-Time 1.4.
+For Bermuda (Atlantic/Bermuda) you need Joda-Time 1.4.
+For the Bahamas (America/Nassau) you need the tz rules file 2007a which you must <a href="tz_update.html">manually compile</a>.
+</p>
+<p>
+If you are unwilling to upgrade the version of your Joda-Time jar, you can compile the latest tz rules file 2007a into
+any version of Joda-Time following <a href="tz_update.html">these instructions</a>.
 </p>
 </subsection>
 
diff --git a/JodaTime/xdocs/index.xml b/JodaTime/xdocs/index.xml
index d7f876f48..74184dd9b 100644
--- a/JodaTime/xdocs/index.xml
+++ b/JodaTime/xdocs/index.xml
@@ -20,6 +20,10 @@ is used by XML. The Gregorian, Julian, Buddhist, Coptic and Ethiopic systems are
 included, and we welcome further additions. Supporting classes include time zone,
 duration, format and parsing.
 </p>
+<p style="color:red; margin-left:20px;">
+The US, Canada and related countries are changing Daylight Savings Time rules in 2007.
+<a href="faq.html#newzonerules">More information</a>.
+</p>
 <p>
 As a flavour of Joda-Time, here's some example code:
 <source>

From 0952c6330c25f8aaac3de782943851445ca2354d Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 12 Feb 2007 20:07:04 +0000
Subject: [PATCH 020/112] Spelling error, from Pascal Pugatsch

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1190 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/navigation.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/JodaTime/xdocs/navigation.xml b/JodaTime/xdocs/navigation.xml
index 3f27b8737..e5de7b1da 100644
--- a/JodaTime/xdocs/navigation.xml
+++ b/JodaTime/xdocs/navigation.xml
@@ -37,7 +37,7 @@
       <item name="ISO8601" href="/cal_iso.html"/>
       <item name="Buddhist" href="/cal_buddhist.html"/>
       <item name="Coptic" href="/cal_coptic.html"/>
-      <item name="Ethoipic" href="/cal_ethiopic.html"/>
+      <item name="Ethiopic" href="/cal_ethiopic.html"/>
       <item name="Gregorian" href="/cal_gregorian.html"/>
       <item name="GregorianJulian" href="/cal_gj.html"/>
       <item name="Islamic" href="/cal_islamic.html"/>

From 21baaea4ed2502c640d2379df14edaa2267bb330 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 12 Feb 2007 20:17:27 +0000
Subject: [PATCH 021/112] Update page now 2007b is available

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1191 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/faq.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/JodaTime/xdocs/faq.xml b/JodaTime/xdocs/faq.xml
index 5283f9bdd..d3a2f231b 100644
--- a/JodaTime/xdocs/faq.xml
+++ b/JodaTime/xdocs/faq.xml
@@ -52,7 +52,7 @@ For Bermuda (Atlantic/Bermuda) you need Joda-Time 1.4.
 For the Bahamas (America/Nassau) you need the tz rules file 2007a which you must <a href="tz_update.html">manually compile</a>.
 </p>
 <p>
-If you are unwilling to upgrade the version of your Joda-Time jar, you can compile the latest tz rules file 2007a into
+If you are unwilling to upgrade the version of your Joda-Time jar, you can compile the latest tz rules file 2007b into
 any version of Joda-Time following <a href="tz_update.html">these instructions</a>.
 </p>
 </subsection>

From 3fce0d10f6c9e005f095b258135d7d8c5f2c10b4 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 16 Feb 2007 00:39:57 +0000
Subject: [PATCH 022/112] Fix spelling error, from Guilherme Chapiewski Add JSR
 310 link

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1192 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/index.xml | 6 +++++-
 1 file changed, 5 insertions(+), 1 deletion(-)

diff --git a/JodaTime/xdocs/index.xml b/JodaTime/xdocs/index.xml
index 74184dd9b..d0e6a3a02 100644
--- a/JodaTime/xdocs/index.xml
+++ b/JodaTime/xdocs/index.xml
@@ -24,6 +24,10 @@ duration, format and parsing.
 The US, Canada and related countries are changing Daylight Savings Time rules in 2007.
 <a href="faq.html#newzonerules">More information</a>.
 </p>
+<p style="color:red; margin-left:20px;">
+JSR 310 has now been launched. It aims to build upon Joda-Time and include it in the JDK.
+<a href="https://jsr-310.dev.java.net/">More information</a>.
+</p>
 <p>
 As a flavour of Joda-Time, here's some example code:
 <source>
@@ -66,7 +70,7 @@ Version 1.4 was released on 2006-11-12 -
 
 <section name="Why Joda Time?">
 <p>
-Joda-Time has been created to radically change date and time handling is Java.
+Joda-Time has been created to radically change date and time handling in Java.
 The JDK classes Date and Calendar are very badly designed, have had numerous bugs
 and have odd performance effects.
 Here are some of our reasons for developing and using Joda-Time:

From d9e629e97e386a366e640639119a58d5b719647a Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Thu, 22 Feb 2007 00:39:48 +0000
Subject: [PATCH 023/112] Minor test case optimisation, from Antonio Leita

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1193 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/project.xml                                           | 3 +++
 .../test/org/joda/time/chrono/gj/TestGregorianChronology.java  | 2 +-
 2 files changed, 4 insertions(+), 1 deletion(-)

diff --git a/JodaTime/project.xml b/JodaTime/project.xml
index 0413a1948..c38b3b7f4 100644
--- a/JodaTime/project.xml
+++ b/JodaTime/project.xml
@@ -136,6 +136,9 @@
     <contributor>
       <name>Ashish Katyal</name>
     </contributor>
+    <contributor>
+      <name>Antonio Leitao</name>
+    </contributor>
     <contributor>
       <name>Kostas Maistrelis</name>
     </contributor>
diff --git a/JodaTime/src/test/org/joda/time/chrono/gj/TestGregorianChronology.java b/JodaTime/src/test/org/joda/time/chrono/gj/TestGregorianChronology.java
index cc3f8314b..a871f9353 100644
--- a/JodaTime/src/test/org/joda/time/chrono/gj/TestGregorianChronology.java
+++ b/JodaTime/src/test/org/joda/time/chrono/gj/TestGregorianChronology.java
@@ -50,7 +50,7 @@ long millisPerMonth() {
     boolean isLeapYear(int year) {
         if (mod(year, 4) == 0) {
             int t = (int)mod(year, 400);
-            if (t != 100 && t != 200 & t != 300) {
+            if (t != 100 && t != 200 && t != 300) {
                 return true;
             }
         }

From 1aea267f61b95d56f32ebeb79b627b2a93f0d4b4 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 25 Feb 2007 23:21:29 +0000
Subject: [PATCH 024/112] Handle ibiblio changes

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1194 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/project.properties | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/JodaTime/project.properties b/JodaTime/project.properties
index 3820da5f3..fb0fbb7ec 100644
--- a/JodaTime/project.properties
+++ b/JodaTime/project.properties
@@ -19,3 +19,5 @@ maven.javadoc.private=false
 
 maven.jdiff.old.tag=v1_3_000
 maven.jdiff.new.tag=CURRENT
+
+maven.repo.remote=http://repo1.maven.org/maven
\ No newline at end of file

From 9aa6681d31b410756bf0b8c252a86e31f4aee30f Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 25 Feb 2007 23:22:41 +0000
Subject: [PATCH 025/112] Fix period formating from throwing
 NegativeArraySizeException

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1195 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |   5 +-
 .../time/format/PeriodFormatterBuilder.java   |   9 +-
 .../format/TestPeriodFormatterBuilder.java    | 100 ++++++++++++++++++
 3 files changed, 111 insertions(+), 3 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index e1e52f0f3..3261e1e64 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -43,13 +43,16 @@ None
 
 Bug fixes since 1.4
 -------------------
-- LocalDate/LocalTime conostructors did not set internal state correctly
+- LocalDate/LocalTime constructors did not set internal state correctly
   This problem was exposed when Days.daysBetween() and similar methods
   failed to give the right results
 
 - ZoneInfoProvider now returns a copy of its internal state on getAvailableIDs
   This avoids race conditions on some JVMs
 
+- Period formating threw NegativeArraySizeException during formatting
+  This happened for certain period values, notably zero
+
 
 Feedback
 --------
diff --git a/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java b/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java
index c67832fec..a44f22362 100644
--- a/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java
+++ b/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java
@@ -1090,11 +1090,16 @@ public int calculatePrintedLength(ReadablePeriod period, Locale locale) {
 
             int sum = Math.max(FormatUtils.calculateDigitCount(valueLong), iMinPrintedDigits);
             if (iFieldType >= SECONDS_MILLIS) {
-                sum++; // decimal point
+                // valueLong contains the seconds and millis fields
+                // the minimum output is 0.000, which is 4 digits
+                sum = Math.max(sum, 4);
+                // plus one for the decimal point
+                sum++;
                 if (iFieldType == SECONDS_OPTIONAL_MILLIS &&
-                    (Math.abs(valueLong) % DateTimeConstants.MILLIS_PER_SECOND) == 0) {
+                        (Math.abs(valueLong) % DateTimeConstants.MILLIS_PER_SECOND) == 0) {
                     sum -= 4; // remove three digits and decimal point
                 }
+                // reset valueLong to refer to the seconds part for the prefic/suffix calculation
                 valueLong = valueLong / DateTimeConstants.MILLIS_PER_SECOND;
             }
             int value = (int) valueLong;
diff --git a/JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java b/JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java
index 494784c95..d94c910de 100644
--- a/JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java
+++ b/JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java
@@ -107,6 +107,11 @@ public void testFormatYears() {
         assertEquals("1", f.print(PERIOD));
         assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null));
         assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));
+        
+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);
+        assertEquals("0", f.print(p));
+        assertEquals(1, f.getPrinter().calculatePrintedLength(p, null));
+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
     }
 
     public void testFormatMonths() {
@@ -114,6 +119,11 @@ public void testFormatMonths() {
         assertEquals("2", f.print(PERIOD));
         assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null));
         assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));
+        
+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);
+        assertEquals("0", f.print(p));
+        assertEquals(1, f.getPrinter().calculatePrintedLength(p, null));
+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
     }
 
     public void testFormatWeeks() {
@@ -121,6 +131,11 @@ public void testFormatWeeks() {
         assertEquals("3", f.print(PERIOD));
         assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null));
         assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));
+        
+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);
+        assertEquals("0", f.print(p));
+        assertEquals(1, f.getPrinter().calculatePrintedLength(p, null));
+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
     }
 
     public void testFormatDays() {
@@ -128,6 +143,11 @@ public void testFormatDays() {
         assertEquals("4", f.print(PERIOD));
         assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null));
         assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));
+        
+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);
+        assertEquals("0", f.print(p));
+        assertEquals(1, f.getPrinter().calculatePrintedLength(p, null));
+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
     }
 
     public void testFormatHours() {
@@ -135,6 +155,11 @@ public void testFormatHours() {
         assertEquals("5", f.print(PERIOD));
         assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null));
         assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));
+        
+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);
+        assertEquals("0", f.print(p));
+        assertEquals(1, f.getPrinter().calculatePrintedLength(p, null));
+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
     }
 
     public void testFormatMinutes() {
@@ -142,6 +167,11 @@ public void testFormatMinutes() {
         assertEquals("6", f.print(PERIOD));
         assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null));
         assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));
+        
+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);
+        assertEquals("0", f.print(p));
+        assertEquals(1, f.getPrinter().calculatePrintedLength(p, null));
+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
     }
 
     public void testFormatSeconds() {
@@ -149,6 +179,11 @@ public void testFormatSeconds() {
         assertEquals("7", f.print(PERIOD));
         assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null));
         assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));
+        
+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);
+        assertEquals("0", f.print(p));
+        assertEquals(1, f.getPrinter().calculatePrintedLength(p, null));
+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
     }
 
     public void testFormatSecondsWithMillis() {
@@ -192,6 +227,11 @@ public void testFormatSecondsWithMillis() {
         assertEquals("-7.001", f.print(p));
         assertEquals(6, f.getPrinter().calculatePrintedLength(p, null));
         assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
+        
+        p = new Period(0, 0, 0, 0, 0, 0, 0, 0);
+        assertEquals("0.000", f.print(p));
+        assertEquals(5, f.getPrinter().calculatePrintedLength(p, null));
+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
     }
 
     public void testFormatSecondsWithOptionalMillis() {
@@ -235,6 +275,11 @@ public void testFormatSecondsWithOptionalMillis() {
         assertEquals("-7.001", f.print(p));
         assertEquals(6, f.getPrinter().calculatePrintedLength(p, null));
         assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
+        
+        p = new Period(0, 0, 0, 0, 0, 0, 0, 0);
+        assertEquals("0", f.print(p));
+        assertEquals(1, f.getPrinter().calculatePrintedLength(p, null));
+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
     }
 
     public void testFormatMillis() {
@@ -242,6 +287,11 @@ public void testFormatMillis() {
         assertEquals("8", f.print(PERIOD));
         assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null));
         assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));
+        
+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);
+        assertEquals("0", f.print(p));
+        assertEquals(1, f.getPrinter().calculatePrintedLength(p, null));
+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
     }
 
     public void testFormatMillis3Digit() {
@@ -249,6 +299,11 @@ public void testFormatMillis3Digit() {
         assertEquals("008", f.print(PERIOD));
         assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null));
         assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));
+        
+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);
+        assertEquals("000", f.print(p));
+        assertEquals(3, f.getPrinter().calculatePrintedLength(p, null));
+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
     }
 
     //-----------------------------------------------------------------------
@@ -257,6 +312,11 @@ public void testFormatPrefixSimple1() {
         assertEquals("Years:1", f.print(PERIOD));
         assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));
         assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));
+        
+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);
+        assertEquals("Years:0", f.print(p));
+        assertEquals(7, f.getPrinter().calculatePrintedLength(p, null));
+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
     }
 
     public void testFormatPrefixSimple2() {
@@ -264,6 +324,11 @@ public void testFormatPrefixSimple2() {
         assertEquals("Hours:5", f.print(PERIOD));
         assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));
         assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));
+        
+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);
+        assertEquals("Hours:0", f.print(p));
+        assertEquals(7, f.getPrinter().calculatePrintedLength(p, null));
+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
     }
 
     public void testFormatPrefixSimple3() {
@@ -278,6 +343,11 @@ public void testFormatPrefixPlural1() {
         assertEquals("Year:1", f.print(PERIOD));
         assertEquals(6, f.getPrinter().calculatePrintedLength(PERIOD, null));
         assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));
+        
+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);
+        assertEquals("Years:0", f.print(p));
+        assertEquals(7, f.getPrinter().calculatePrintedLength(p, null));
+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
     }
 
     public void testFormatPrefixPlural2() {
@@ -285,6 +355,11 @@ public void testFormatPrefixPlural2() {
         assertEquals("Hours:5", f.print(PERIOD));
         assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));
         assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));
+        
+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);
+        assertEquals("Hours:0", f.print(p));
+        assertEquals(7, f.getPrinter().calculatePrintedLength(p, null));
+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
     }
 
     public void testFormatPrefixPlural3() {
@@ -308,6 +383,11 @@ public void testFormatSuffixSimple1() {
         assertEquals("1 years", f.print(PERIOD));
         assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));
         assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));
+        
+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);
+        assertEquals("0 years", f.print(p));
+        assertEquals(7, f.getPrinter().calculatePrintedLength(p, null));
+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
     }
 
     public void testFormatSuffixSimple2() {
@@ -315,6 +395,11 @@ public void testFormatSuffixSimple2() {
         assertEquals("5 hours", f.print(PERIOD));
         assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));
         assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));
+        
+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);
+        assertEquals("0 hours", f.print(p));
+        assertEquals(7, f.getPrinter().calculatePrintedLength(p, null));
+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
     }
 
     public void testFormatSuffixSimple3() {
@@ -336,6 +421,11 @@ public void testFormatSuffixPlural1() {
         assertEquals("1 year", f.print(PERIOD));
         assertEquals(6, f.getPrinter().calculatePrintedLength(PERIOD, null));
         assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));
+        
+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);
+        assertEquals("0 years", f.print(p));
+        assertEquals(7, f.getPrinter().calculatePrintedLength(p, null));
+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
     }
 
     public void testFormatSuffixPlural2() {
@@ -343,6 +433,11 @@ public void testFormatSuffixPlural2() {
         assertEquals("5 hours", f.print(PERIOD));
         assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));
         assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));
+        
+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);
+        assertEquals("0 hours", f.print(p));
+        assertEquals(7, f.getPrinter().calculatePrintedLength(p, null));
+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
     }
 
     public void testFormatSuffixPlural3() {
@@ -373,6 +468,11 @@ public void testFormatPrefixSuffix() {
         assertEquals("P1Y", f.print(PERIOD));
         assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null));
         assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));
+        
+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);
+        assertEquals("P0Y", f.print(p));
+        assertEquals(3, f.getPrinter().calculatePrintedLength(p, null));
+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
     }
 
     //-----------------------------------------------------------------------

From 9cb266b77b0b55e995b94771ed730fa8a75fbffc Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 26 Feb 2007 00:43:38 +0000
Subject: [PATCH 026/112] Performance enhancement to comparison of LocalDate,
 LocalTime and LocalDateTime suggested by Francois Staes

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1196 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  1 +
 JodaTime/project.xml                          |  3 +
 .../src/java/org/joda/time/LocalDate.java     | 70 +++++++++++++++++--
 .../src/java/org/joda/time/LocalDateTime.java | 64 ++++++++++++++++-
 .../src/java/org/joda/time/LocalTime.java     | 64 ++++++++++++++++-
 .../joda/time/TestLocalDateTime_Basics.java   | 10 ++-
 .../org/joda/time/TestLocalDate_Basics.java   |  3 +-
 .../org/joda/time/TestLocalTime_Basics.java   |  3 +-
 8 files changed, 208 insertions(+), 10 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 3261e1e64..4d7aadf32 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -20,6 +20,7 @@ of restrictions. If the license causes you problems please contact the mailing l
 
 Enhancements since 1.4
 ----------------------
+- Performance enhancement to comparison of LocalDate, LocalTime and LocalDateTime
 
 
 Compatibility with 1.4
diff --git a/JodaTime/project.xml b/JodaTime/project.xml
index c38b3b7f4..15e603c0f 100644
--- a/JodaTime/project.xml
+++ b/JodaTime/project.xml
@@ -154,6 +154,9 @@
     <contributor>
       <name>Kandarp Shah</name>
     </contributor>
+    <contributor>
+      <name>Francois Staes</name>
+    </contributor>
     <contributor>
       <name>Maxim Zhao</name>
     </contributor>
diff --git a/JodaTime/src/java/org/joda/time/LocalDate.java b/JodaTime/src/java/org/joda/time/LocalDate.java
index 38014121e..4295d2b40 100644
--- a/JodaTime/src/java/org/joda/time/LocalDate.java
+++ b/JodaTime/src/java/org/joda/time/LocalDate.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2006 Stephen Colebourne
+ *  Copyright 2001-2007 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -505,11 +505,73 @@ public Chronology getChronology() {
 
     //-----------------------------------------------------------------------
     /**
-     * Converts this LocalDate to a full datetime at midnight using the
-     * default time zone.
+     * Compares this ReadablePartial with another returning true if the chronology,
+     * field types and values are equal.
+     *
+     * @param partial  an object to check against
+     * @return true if fields and values are equal
+     */
+    public boolean equals(Object partial) {
+        // override to perform faster
+        if (this == partial) {
+            return true;
+        }
+        if (partial instanceof LocalDate) {
+            LocalDate other = (LocalDate) partial;
+            if (iChronology.equals(other.iChronology)) {
+                return iLocalMillis == other.iLocalMillis;
+            }
+        }
+        return super.equals(partial);
+    }
+
+    /**
+     * Compares this partial with another returning an integer
+     * indicating the order.
      * <p>
-     * This instance is immutable and unaffected by this method call.
+     * The fields are compared in order, from largest to smallest.
+     * The first field that is non-equal is used to determine the result.
+     * <p>
+     * The specified object must be a partial instance whose field types
+     * match those of this partial.
+     * <p>
+     * NOTE: This implementation violates the Comparable contract.
+     * This method will accept any instance of ReadablePartial as input.
+     * However, it is possible that some implementations of ReadablePartial
+     * exist that do not extend AbstractPartial, and thus will throw a
+     * ClassCastException if compared in the opposite direction.
+     * The cause of this problem is that ReadablePartial doesn't define
+     * the compareTo() method, however we can't change that until v2.0.
      *
+     * @param partial  an object to check against
+     * @return negative if this is less, zero if equal, positive if greater
+     * @throws ClassCastException if the partial is the wrong class
+     *  or if it has field types that don't match
+     * @throws NullPointerException if the partial is null
+     */
+    public int compareTo(Object partial) {
+        // override to perform faster
+        if (this == partial) {
+            return 0;
+        }
+        if (partial instanceof LocalDate) {
+            LocalDate other = (LocalDate) partial;
+            if (iChronology.equals(other.iChronology)) {
+                return (iLocalMillis < other.iLocalMillis ? -1 :
+                            (iLocalMillis == other.iLocalMillis ? 0 : 1));
+
+            }
+        }
+        return super.compareTo(partial);
+    }
+
+    // -----------------------------------------------------------------------
+    /**
+     * Converts this LocalDate to a full datetime at midnight using the default
+     * time zone.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
+     * 
      * @return this date as a datetime at midnight
      */
     public DateTime toDateTimeAtMidnight() {
diff --git a/JodaTime/src/java/org/joda/time/LocalDateTime.java b/JodaTime/src/java/org/joda/time/LocalDateTime.java
index e9c77d11b..a0c62ad79 100644
--- a/JodaTime/src/java/org/joda/time/LocalDateTime.java
+++ b/JodaTime/src/java/org/joda/time/LocalDateTime.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2006 Stephen Colebourne
+ *  Copyright 2001-2007 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -544,6 +544,68 @@ public Chronology getChronology() {
         return iChronology;
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Compares this ReadablePartial with another returning true if the chronology,
+     * field types and values are equal.
+     *
+     * @param partial  an object to check against
+     * @return true if fields and values are equal
+     */
+    public boolean equals(Object partial) {
+        // override to perform faster
+        if (this == partial) {
+            return true;
+        }
+        if (partial instanceof LocalDateTime) {
+            LocalDateTime other = (LocalDateTime) partial;
+            if (iChronology.equals(other.iChronology)) {
+                return iLocalMillis == other.iLocalMillis;
+            }
+        }
+        return super.equals(partial);
+    }
+
+    /**
+     * Compares this partial with another returning an integer
+     * indicating the order.
+     * <p>
+     * The fields are compared in order, from largest to smallest.
+     * The first field that is non-equal is used to determine the result.
+     * <p>
+     * The specified object must be a partial instance whose field types
+     * match those of this partial.
+     * <p>
+     * NOTE: This implementation violates the Comparable contract.
+     * This method will accept any instance of ReadablePartial as input.
+     * However, it is possible that some implementations of ReadablePartial
+     * exist that do not extend AbstractPartial, and thus will throw a
+     * ClassCastException if compared in the opposite direction.
+     * The cause of this problem is that ReadablePartial doesn't define
+     * the compareTo() method, however we can't change that until v2.0.
+     *
+     * @param partial  an object to check against
+     * @return negative if this is less, zero if equal, positive if greater
+     * @throws ClassCastException if the partial is the wrong class
+     *  or if it has field types that don't match
+     * @throws NullPointerException if the partial is null
+     */
+    public int compareTo(Object partial) {
+        // override to perform faster
+        if (this == partial) {
+            return 0;
+        }
+        if (partial instanceof LocalDateTime) {
+            LocalDateTime other = (LocalDateTime) partial;
+            if (iChronology.equals(other.iChronology)) {
+                return (iLocalMillis < other.iLocalMillis ? -1 :
+                            (iLocalMillis == other.iLocalMillis ? 0 : 1));
+
+            }
+        }
+        return super.compareTo(partial);
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Converts this object to a DateTime using the default zone.
diff --git a/JodaTime/src/java/org/joda/time/LocalTime.java b/JodaTime/src/java/org/joda/time/LocalTime.java
index 897871939..eabd23355 100644
--- a/JodaTime/src/java/org/joda/time/LocalTime.java
+++ b/JodaTime/src/java/org/joda/time/LocalTime.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2006 Stephen Colebourne
+ *  Copyright 2001-2007 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -566,6 +566,68 @@ public Chronology getChronology() {
         return iChronology;
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Compares this ReadablePartial with another returning true if the chronology,
+     * field types and values are equal.
+     *
+     * @param partial  an object to check against
+     * @return true if fields and values are equal
+     */
+    public boolean equals(Object partial) {
+        // override to perform faster
+        if (this == partial) {
+            return true;
+        }
+        if (partial instanceof LocalTime) {
+            LocalTime other = (LocalTime) partial;
+            if (iChronology.equals(other.iChronology)) {
+                return iLocalMillis == other.iLocalMillis;
+            }
+        }
+        return super.equals(partial);
+    }
+
+    /**
+     * Compares this partial with another returning an integer
+     * indicating the order.
+     * <p>
+     * The fields are compared in order, from largest to smallest.
+     * The first field that is non-equal is used to determine the result.
+     * <p>
+     * The specified object must be a partial instance whose field types
+     * match those of this partial.
+     * <p>
+     * NOTE: This implementation violates the Comparable contract.
+     * This method will accept any instance of ReadablePartial as input.
+     * However, it is possible that some implementations of ReadablePartial
+     * exist that do not extend AbstractPartial, and thus will throw a
+     * ClassCastException if compared in the opposite direction.
+     * The cause of this problem is that ReadablePartial doesn't define
+     * the compareTo() method, however we can't change that until v2.0.
+     *
+     * @param partial  an object to check against
+     * @return negative if this is less, zero if equal, positive if greater
+     * @throws ClassCastException if the partial is the wrong class
+     *  or if it has field types that don't match
+     * @throws NullPointerException if the partial is null
+     */
+    public int compareTo(Object partial) {
+        // override to perform faster
+        if (this == partial) {
+            return 0;
+        }
+        if (partial instanceof LocalTime) {
+            LocalTime other = (LocalTime) partial;
+            if (iChronology.equals(other.iChronology)) {
+                return (iLocalMillis < other.iLocalMillis ? -1 :
+                            (iLocalMillis == other.iLocalMillis ? 0 : 1));
+
+            }
+        }
+        return super.compareTo(partial);
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Returns a copy of this time with different local millis.
diff --git a/JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java b/JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java
index ea1d79710..20f061f98 100644
--- a/JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2006 Stephen Colebourne
+ *  Copyright 2001-2007 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -293,7 +293,13 @@ public void testEqualsHashCode() {
         
         assertEquals(false, test1.equals("Hello"));
         assertEquals(true, test1.equals(new MockInstant()));
-        assertEquals(false, test1.equals(new YearMonthDay(1970, 6, 9, COPTIC_PARIS)));
+        Partial partial = new Partial(
+                new DateTimeFieldType[] {
+                        DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(),
+                        DateTimeFieldType.dayOfMonth(), DateTimeFieldType.millisOfDay()},
+                new int[] {1970, 6, 9, MILLIS_OF_DAY_UTC}, COPTIC_PARIS);
+        assertEquals(true, test1.equals(partial));
+        assertEquals(true, test1.hashCode() == partial.hashCode());
         assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE));
     }
     
diff --git a/JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java b/JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java
index 8c447f4f6..a66ec0567 100644
--- a/JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2006 Stephen Colebourne
+ *  Copyright 2001-2007 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -245,6 +245,7 @@ public void testEqualsHashCode() {
         assertEquals(false, test1.equals("Hello"));
         assertEquals(true, test1.equals(new MockInstant()));
         assertEquals(true, test1.equals(new YearMonthDay(1970, 6, 9, COPTIC_PARIS)));
+        assertEquals(true, test1.hashCode() == new YearMonthDay(1970, 6, 9, COPTIC_PARIS).hashCode());
         assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE));
     }
 
diff --git a/JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java b/JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java
index 2d61a4c6b..216002c6b 100644
--- a/JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2006 Stephen Colebourne
+ *  Copyright 2001-2007 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -285,6 +285,7 @@ public void testEqualsHashCode() {
         
         assertEquals(false, test1.equals("Hello"));
         assertEquals(true, test1.equals(new TimeOfDay(10, 20, 30, 40, COPTIC_UTC)));
+        assertEquals(true, test1.hashCode() == new TimeOfDay(10, 20, 30, 40, COPTIC_UTC).hashCode());
         assertEquals(true, test1.equals(new MockInstant()));
         assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE));
     }

From 909aa72e4ba50f50297b52c8459e929ca6f25d39 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Fri, 2 Mar 2007 16:12:09 +0000
Subject: [PATCH 027/112] Updated tz database to version 2007c.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1197 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  2 +-
 .../src/java/org/joda/time/tz/src/Readme.txt  |  2 +-
 JodaTime/src/java/org/joda/time/tz/src/europe | 29 ++++++-
 .../java/org/joda/time/tz/src/northamerica    | 75 ++++++++++++-------
 .../java/org/joda/time/tz/src/southamerica    |  4 +-
 5 files changed, 79 insertions(+), 33 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 4d7aadf32..2ab3e4118 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -32,7 +32,7 @@ Source compatible - Yes
 Serialization compatible - Yes
 
 Data compatible - Yes
-  - DateTimeZone data updated to version 2007a
+  - DateTimeZone data updated to version 2007c
 
 Semantic compatible - Yes
 
diff --git a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
index 426547040..a5ff53485 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
+++ b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
@@ -1,2 +1,2 @@
 The data files in this directory were obtained from the public tz database,
-http://www.twinsun.com/tz/tz-link.htm, version 2007a.
+http://www.twinsun.com/tz/tz-link.htm, version 2007c.
diff --git a/JodaTime/src/java/org/joda/time/tz/src/europe b/JodaTime/src/java/org/joda/time/tz/src/europe
index 4cae5340e..e33351dd9 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/europe
+++ b/JodaTime/src/java/org/joda/time/tz/src/europe
@@ -1,4 +1,4 @@
-# @(#)europe	8.7
+# @(#)europe	8.8
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
@@ -2278,6 +2278,24 @@ Zone	Europe/Zurich	0:34:08 -	LMT	1848 Sep 12
 			1:00	EU	CE%sT
 
 # Turkey
+
+# From Amar Devegowda (2007-01-03):
+# The time zone rules for Istanbul, Turkey have not been changed for years now.
+# ... The latest rules are available at -
+# http://www.timeanddate.com/worldclock/timezone.html?n=107
+# From Steffen Thorsen (2007-01-03):
+# I have been able to find press records back to 1996 which all say that
+# DST started 01:00 local time and end at 02:00 local time.  I am not sure
+# what happened before that.  One example for each year from 1996 to 2001:
+# http://newspot.byegm.gov.tr/arsiv/1996/21/N4.htm
+# http://www.byegm.gov.tr/YAYINLARIMIZ/CHR/ING97/03/97X03X25.TXT
+# http://www.byegm.gov.tr/YAYINLARIMIZ/CHR/ING98/03/98X03X02.HTM
+# http://www.byegm.gov.tr/YAYINLARIMIZ/CHR/ING99/10/99X10X26.HTM#%2016
+# http://www.byegm.gov.tr/YAYINLARIMIZ/CHR/ING2000/03/00X03X06.HTM#%2021
+# http://www.byegm.gov.tr/YAYINLARIMIZ/CHR/ING2001/03/23x03x01.HTM#%2027
+# From Paul Eggert (2007-01-03):
+# Prefer the above source to Shanks & Pottenger for time stamps after 1990.
+
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Turkey	1916	only	-	May	 1	0:00	1:00	S
 Rule	Turkey	1916	only	-	Oct	 1	0:00	0	-
@@ -2332,14 +2350,17 @@ Rule	Turkey	1983	only	-	Jul	31	0:00	1:00	S
 Rule	Turkey	1983	only	-	Oct	 2	0:00	0	-
 Rule	Turkey	1985	only	-	Apr	20	0:00	1:00	S
 Rule	Turkey	1985	only	-	Sep	28	0:00	0	-
+Rule	Turkey	1986	1990	-	Mar	lastSun	2:00s	1:00	S
+Rule	Turkey	1986	1990	-	Sep	lastSun	2:00s	0	-
+Rule	Turkey	1991	max	-	Mar	lastSun	1:00s	1:00	S
+Rule	Turkey	1991	1995	-	Sep	lastSun	1:00s	0	-
+Rule	Turkey	1996	max	-	Oct	lastSun	1:00s	0	-
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Europe/Istanbul	1:55:52 -	LMT	1880
 			1:56:56	-	IMT	1910 Oct # Istanbul Mean Time?
 			2:00	Turkey	EE%sT	1978 Oct 15
 			3:00	Turkey	TR%sT	1985 Apr 20 # Turkey Time
-			2:00	Turkey	EE%sT	1986
-			2:00	C-Eur	EE%sT	1991
-			2:00	EU	EE%sT
+			2:00	Turkey	EE%sT
 Link	Europe/Istanbul	Asia/Istanbul	# Istanbul is in both continents.
 
 # Ukraine
diff --git a/JodaTime/src/java/org/joda/time/tz/src/northamerica b/JodaTime/src/java/org/joda/time/tz/src/northamerica
index c21e199c1..a9e1f9fc2 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/northamerica
+++ b/JodaTime/src/java/org/joda/time/tz/src/northamerica
@@ -1,4 +1,4 @@
-# @(#)northamerica	8.11
+# @(#)northamerica	8.12
 # <pre>
 
 # also includes Central America and the Caribbean
@@ -583,6 +583,11 @@ Zone America/Boise	-7:44:49 -	LMT	1883 Nov 18 12:15:11
 # clocks twice that night, but this obviously is in error.  The intent
 # is that 01:59:59 EST be followed by 02:00:00 CDT.
 
+# From Gwillim Law (2007-02-10):
+# The Associated Press has been reporting that Pulaski County, Indiana is
+# going to switch from Central to Eastern Time on March 11, 2007....
+# http://www.indystar.com/apps/pbcs.dll/article?AID=/20070207/LOCAL190108/702070524/0/LOCAL
+
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
 Rule Indianapolis 1941	only	-	Jun	22	2:00	1:00	D
 Rule Indianapolis 1941	1954	-	Sep	lastSun	2:00	0	S
@@ -618,7 +623,7 @@ Zone America/Indiana/Marengo -5:45:23 -	LMT	1883 Nov 18 12:14:37
 			-5:00	-	EST	2006
 			-5:00	US	E%sT
 #
-# Daviess, Dubois, Knox, Martin, Perry, and Pulaski Counties, Indiana,
+# Daviess, Dubois, Knox, Martin, and Perry Counties, Indiana,
 # switched from eastern to central time in April 2006.
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
 Rule Vincennes	1946	only	-	Apr	lastSun	2:00	1:00	D
@@ -676,6 +681,23 @@ Zone America/Indiana/Knox -5:46:30 -	LMT	1883 Nov 18 12:13:30
 			-5:00	-	EST	2006 Apr  2 2:00
 			-6:00	US	C%sT
 #
+# Pulaski County, Indiana, switched from eastern to central time in
+# April 2006 and then switched back in March 2007.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
+Rule	Pulaski	1946	1960	-	Apr	lastSun	2:00	1:00	D
+Rule	Pulaski	1946	1954	-	Sep	lastSun	2:00	0	S
+Rule	Pulaski	1955	1956	-	Oct	lastSun	2:00	0	S
+Rule	Pulaski	1957	1960	-	Sep	lastSun	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Indiana/Winamac -5:46:25 - LMT	1883 Nov 18 12:13:35
+			-6:00	US	C%sT	1946
+			-6:00	Pulaski	C%sT	1961 Apr 30 2:00
+			-5:00	-	EST	1969
+			-5:00	US	E%sT	1971
+			-5:00	-	EST	2006 Apr  2 2:00
+			-6:00	US	C%sT	2007 Mar 11 2:00
+			-5:00	US	E%sT
+#
 # Switzerland County, Indiana, did not observe DST from 1973 through 2005.
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone America/Indiana/Vevay -5:40:16 -	LMT	1883 Nov 18 12:19:44
@@ -894,18 +916,16 @@ Zone America/Menominee	-5:50:27 -	LMT	1885 Sep 18 12:00
 # Unless otherwise specified, the data for Canada are all from Shanks
 # & Pottenger.
 
-# From Chris Walton (2006-04-01):
+# From Chris Walton (2006-04-01, 2006-04-25, 2006-06-26, 2007-01-31):
 # The British Columbia government announced yesterday that it will
 # adjust daylight savings next year to align with changes in the
 # U.S. and the rest of Canada....
 # http://www2.news.gov.bc.ca/news_releases_2005-2009/2006AG0014-000330.htm
-
-# From Chris Walton (2006-04-25):
+# ...
+# Nova Scotia
 # Daylight saving time will be extended by four weeks starting in 2007....
-# Here is a news release which was issued today by the Nova Scotia government:
-# http://www.gov.ns.ca/news/details.asp?id=20060425004
-
-# From Chris Walton (2006-06-26):
+# http://www.gov.ns.ca/just/regulations/rg2/2006/ma1206.pdf
+#
 # [For New Brunswick] the new legislation dictates that the time change is to
 # be done at 02:00 instead of 00:01.
 # http://www.gnb.ca/0062/acts/BBA-2006/Chap-19.pdf
@@ -915,16 +935,18 @@ Zone America/Menominee	-5:50:27 -	LMT	1885 Sep 18 12:00
 # http://web2.gov.mb.ca/laws/statutes/ccsm/o030e.php
 # ...
 # [Alberta, Ontario, Quebec] will follow US rules.
-# http://www.qp.gov.ab.ca/documents/Acts/2006CH03_UNPR.cfm?frm_isbn=0779744934
+# http://www.qp.gov.ab.ca/documents/spring/CH03_06.CFM
 # http://www.e-laws.gov.on.ca/DBLaws/Source/Regs/English/2006/R06111_e.htm
-# http://www.assnat.qc.ca/eng/37legislature2/Projets-loi/Publics/06-a002.htm
+# http://www2.publicationsduquebec.gouv.qc.ca/dynamicSearch/telecharge.php?type=5&file=2006C39A.PDF
+# ...
+# P.E.I. will follow US rules....
+# http://www.assembly.pe.ca/bills/pdf_chapter/62/3/chapter-41.pdf
 # ...
-# P.E.I. will follow US rules.  The new legislation is not law yet.
-# It passed first reading on April 20....
-# http://www.assembly.pe.ca/bills/pdf_first/62/3/bill-101.pdf
+# Province of Newfoundland and Labrador....
+# http://www.hoa.gov.nl.ca/hoa/bills/Bill0634.htm
 # ...
-# Province of Newfoundland and Labrador.... The change is being considered.
-# http://www.releases.gov.nl.ca/releases/2006/mpa/0331n01.htm
+# Yukon
+# http://www.gov.yk.ca/legislation/regs/oic2006_127.pdf
 # ...
 # N.W.T. will follow US rules.  Whoever maintains the government web site
 # does not seem to believe in bookmarks.  To see the news release, click the
@@ -932,7 +954,14 @@ Zone America/Menominee	-5:50:27 -	LMT	1885 Sep 18 12:00
 # "Daylight Savings Time Change" link; it will fire off a popup using
 # JavaScript.
 # http://www.exec.gov.nt.ca/currentnews/currentPR.asp?mode=archive
-
+# ...
+# No formal announcement has been made from the Nunavut Government.
+# The premier of Nunavut claimed in August of 2005 that he did not
+# want to touch the issue; nothing more has been heard since.  It is
+# likely Nunavut will eventually follow the rest of the country but
+# there will certainly be confusion on March 11/2007 if no formal
+# announcement is made.  Currently the TZ database and Microsoft make
+# assumptions that Nunavut will follow the rest of the country.
 
 
 # From Paul Eggert (2006-04-25):
@@ -1100,11 +1129,11 @@ Zone America/Glace_Bay	-3:59:48 -	LMT	1902 Jun 15
 
 # New Brunswick
 
-# From Paul Eggert (2006-01-20):
-# New Brunswick's Time Definition Act
-# <http://www.gnb.ca/0062/PDF-acts/t-06.pdf> says they change at 00:01, and
+# From Paul Eggert (2007-01-31):
+# The Time Definition Act <http://www.gnb.ca/0062/PDF-acts/t-06.pdf>
+# says they changed at 00:01 through 2006, and
 # <http://www.canlii.org/nb/laws/sta/t-6/20030127/whole.html> makes it
-# clear that this has been the case since at least 1993.
+# clear that this was the case since at least 1993.
 # For now, assume it started in 1993.
 
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
@@ -1676,10 +1705,6 @@ Zone America/Dawson_Creek -8:00:56 -	LMT	1884
 # For lack of better information, assume that Southampton Island observed
 # daylight saving only during wartime.
 
-# From Chris Walton (2006-07-19):
-# The government of Yukon Territory ... recently announced it will extend
-# daylight saving in 2007....  http://www.gov.yk.ca/news/2006/06-164.html
-
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	NT_YK	1918	only	-	Apr	14	2:00	1:00	D
 Rule	NT_YK	1918	only	-	Oct	27	2:00	0	S
diff --git a/JodaTime/src/java/org/joda/time/tz/src/southamerica b/JodaTime/src/java/org/joda/time/tz/src/southamerica
index 6a9b8c824..4a777b5b6 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/southamerica
+++ b/JodaTime/src/java/org/joda/time/tz/src/southamerica
@@ -1,4 +1,4 @@
-# @(#)southamerica	8.8
+# @(#)southamerica	8.9
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
@@ -765,7 +765,7 @@ Zone America/Santiago	-4:42:46 -	LMT	1890
 			-5:00	Chile	CL%sT	1947 May 22 # Chile Time
 			-4:00	Chile	CL%sT
 Zone Pacific/Easter	-7:17:44 -	LMT	1890
-			-7:17:44 -	EMT	1932 Sep    # Easter Mean Time
+			-7:17:28 -	EMT	1932 Sep    # Easter Mean Time
 			-7:00	Chile	EAS%sT	1982 Mar 13 21:00 # Easter I Time
 			-6:00	Chile	EAS%sT
 #

From 2e7de31b0fb56e8821ad7e68d15f7e9d7690c6a4 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 4 Mar 2007 14:52:29 +0000
Subject: [PATCH 028/112] Add tests to show pivot year parse works

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1198 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../joda/time/format/TestDateTimeFormat.java  | 26 +++++++++++++++++++
 1 file changed, 26 insertions(+)

diff --git a/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java b/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java
index ec74f6ff9..7aadcbdc4 100644
--- a/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java
+++ b/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java
@@ -861,4 +861,30 @@ public void testFormat_shortBasicParse() {
         assertEquals(dt, f.parseDateTime("2004/03/09"));
     }
 
+    public void testParse_pivotYear() {
+        DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("dd.MM.yy").withPivotYear(2050).withZone(DateTimeZone.UTC);
+        
+        DateTime date = dateFormatter.parseDateTime("25.12.15");
+        assertEquals(date.getYear(), 2015);
+        
+        date = dateFormatter.parseDateTime("25.12.00");
+        assertEquals(date.getYear(), 2000);
+        
+        date = dateFormatter.parseDateTime("25.12.99");
+        assertEquals(date.getYear(), 2099);
+    }
+
+    public void testParse_pivotYear_ignored4DigitYear() {
+        DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("dd.MM.yyyy").withPivotYear(2050).withZone(DateTimeZone.UTC);
+        
+        DateTime date = dateFormatter.parseDateTime("25.12.15");
+        assertEquals(date.getYear(), 15);
+        
+        date = dateFormatter.parseDateTime("25.12.00");
+        assertEquals(date.getYear(), 0);
+        
+        date = dateFormatter.parseDateTime("25.12.99");
+        assertEquals(date.getYear(), 99);
+    }
+
 }

From f0b7de0860f5f72ac914c4c7bb6bf5457009bd65 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 5 Mar 2007 17:13:53 +0000
Subject: [PATCH 029/112] Period formatting could end up in an infinite loop on
 IBM JDK 1.4.2 problem investigated by Jeroen van Erp with patch supplied

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1199 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                                 | 4 ++++
 JodaTime/project.xml                                       | 3 +++
 .../java/org/joda/time/format/PeriodFormatterBuilder.java  | 7 +++++--
 3 files changed, 12 insertions(+), 2 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 2ab3e4118..19c7b7a83 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -54,6 +54,10 @@ Bug fixes since 1.4
 - Period formating threw NegativeArraySizeException during formatting
   This happened for certain period values, notably zero
 
+- Period formatting could end up in an infinite loop on IBM JDK 1.4.2
+  This appears to be an IBM JDK issue, not a Joda-Time issue, but we should
+  not have ended up in an infinite loop whatever happens
+
 
 Feedback
 --------
diff --git a/JodaTime/project.xml b/JodaTime/project.xml
index 15e603c0f..f4e14a0cc 100644
--- a/JodaTime/project.xml
+++ b/JodaTime/project.xml
@@ -127,6 +127,9 @@
     <contributor>
       <name>Fredrik Borgh</name>
     </contributor>
+    <contributor>
+      <name>Jeroen van Erp</name>
+    </contributor>
     <contributor>
       <name>Gwyn Evans</name>
     </contributor>
diff --git a/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java b/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java
index a44f22362..c08625e80 100644
--- a/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java
+++ b/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java
@@ -79,6 +79,7 @@
     private static final int MILLIS = 7;
     private static final int SECONDS_MILLIS = 8;
     private static final int SECONDS_OPTIONAL_MILLIS = 9;
+    private static final int MAX_FIELD = SECONDS_OPTIONAL_MILLIS;
 
     private int iMinPrintedDigits;
     private int iPrintZeroSetting;
@@ -1429,7 +1430,7 @@ long getFieldValue(ReadablePeriod period) {
                     return Long.MAX_VALUE;
                 case PRINT_ZERO_RARELY_LAST:
                     if (isZero(period) && iFieldFormatters[iFieldType] == this) {
-                        for (int i = iFieldType + 1; i < 10; i++) {
+                        for (int i = iFieldType + 1; i <= MAX_FIELD; i++) {
                             if (isSupported(type, i) && iFieldFormatters[i] != null) {
                                 return Long.MAX_VALUE;
                             }
@@ -1440,7 +1441,9 @@ long getFieldValue(ReadablePeriod period) {
                     break;
                 case PRINT_ZERO_RARELY_FIRST:
                     if (isZero(period) && iFieldFormatters[iFieldType] == this) {
-                        for (int i = Math.min(iFieldType, 8) - 1; i >= 0; i++) {
+                        int i = Math.min(iFieldType, 8);  // line split out for IBM JDK
+                        i--;                              // see bug 1660490
+                        for (; i >= 0 && i <= MAX_FIELD; i++) {
                             if (isSupported(type, i) && iFieldFormatters[i] != null) {
                                 return Long.MAX_VALUE;
                             }

From 4109251f742412d95dfa939dd2da6d2f831948a9 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 11 Mar 2007 20:36:50 +0000
Subject: [PATCH 030/112] Add javadoc to explain exception thrown when
 conversion to zoned datetime is invalid due to time zone

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1200 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/java/org/joda/time/LocalDate.java     | 32 +++++++++++++++++++
 .../src/java/org/joda/time/LocalDateTime.java |  6 ++++
 2 files changed, 38 insertions(+)

diff --git a/JodaTime/src/java/org/joda/time/LocalDate.java b/JodaTime/src/java/org/joda/time/LocalDate.java
index 4295d2b40..b465642b9 100644
--- a/JodaTime/src/java/org/joda/time/LocalDate.java
+++ b/JodaTime/src/java/org/joda/time/LocalDate.java
@@ -570,6 +570,11 @@ public int compareTo(Object partial) {
      * Converts this LocalDate to a full datetime at midnight using the default
      * time zone.
      * <p>
+     * This method will throw an exception if the default time zone switches
+     * to Daylight Savings Time at midnight and this LocalDate represents
+     * that switchover date. The problem is that there is no such time as
+     * midnight on the required date, and as such an exception is thrown.
+     * <p>
      * This instance is immutable and unaffected by this method call.
      * 
      * @return this date as a datetime at midnight
@@ -582,6 +587,11 @@ public DateTime toDateTimeAtMidnight() {
      * Converts this LocalDate to a full datetime at midnight using the
      * specified time zone.
      * <p>
+     * This method will throw an exception if the time zone switches
+     * to Daylight Savings Time at midnight and this LocalDate represents
+     * that switchover date. The problem is that there is no such time as
+     * midnight on the required date, and as such an exception is thrown.
+     * <p>
      * This method uses the chronology from this instance plus the time zone
      * specified.
      * <p>
@@ -602,6 +612,9 @@ public DateTime toDateTimeAtMidnight(DateTimeZone zone) {
      * setting the date fields from this instance and the time fields from
      * the current time.
      * <p>
+     * This method will throw an exception if the datetime that would be
+     * created does not exist when the time zone is taken into account.
+     * <p>
      * This instance is immutable and unaffected by this method call.
      *
      * @return this date as a datetime with the time as the current time
@@ -618,6 +631,9 @@ public DateTime toDateTimeAtCurrentTime() {
      * This method uses the chronology from this instance plus the time zone
      * specified.
      * <p>
+     * This method will throw an exception if the datetime that would be
+     * created does not exist when the time zone is taken into account.
+     * <p>
      * This instance is immutable and unaffected by this method call.
      *
      * @param zone  the zone to use, null means default zone
@@ -635,6 +651,11 @@ public DateTime toDateTimeAtCurrentTime(DateTimeZone zone) {
     /**
      * Converts this LocalDate to a DateMidnight in the default time zone.
      * <p>
+     * This method will throw an exception if the default time zone switches
+     * to Daylight Savings Time at midnight and this LocalDate represents
+     * that switchover date. The problem is that there is no such time as
+     * midnight on the required date, and as such an exception is thrown.
+     * <p>
      * This instance is immutable and unaffected by this method call.
      *
      * @return the DateMidnight instance in the default zone
@@ -646,6 +667,11 @@ public DateMidnight toDateMidnight() {
     /**
      * Converts this LocalDate to a DateMidnight.
      * <p>
+     * This method will throw an exception if the time zone switches
+     * to Daylight Savings Time at midnight and this LocalDate represents
+     * that switchover date. The problem is that there is no such time as
+     * midnight on the required date, and as such an exception is thrown.
+     * <p>
      * This instance is immutable and unaffected by this method call.
      *
      * @param zone  the zone to get the DateMidnight in, null means default zone
@@ -666,6 +692,9 @@ public DateMidnight toDateMidnight(DateTimeZone zone) {
      * LocalDate. The chronology of the time must match.
      * If the time is null, the current time in the date's chronology is used.
      * <p>
+     * This method will throw an exception if the datetime that would be
+     * created does not exist when the time zone is taken into account.
+     * <p>
      * This instance is immutable and unaffected by this method call.
      *
      * @param time  the time of day to use, null means current time
@@ -684,6 +713,9 @@ public DateTime toDateTime(LocalTime time) {
      * LocalDate plus the time zone. The chronology of the time must match.
      * If the time is null, the current time in the date's chronology is used.
      * <p>
+     * This method will throw an exception if the datetime that would be
+     * created does not exist when the time zone is taken into account.
+     * <p>
      * This instance is immutable and unaffected by this method call.
      *
      * @param time  the time of day to use, null means current time
diff --git a/JodaTime/src/java/org/joda/time/LocalDateTime.java b/JodaTime/src/java/org/joda/time/LocalDateTime.java
index a0c62ad79..41629cbce 100644
--- a/JodaTime/src/java/org/joda/time/LocalDateTime.java
+++ b/JodaTime/src/java/org/joda/time/LocalDateTime.java
@@ -609,6 +609,9 @@ public int compareTo(Object partial) {
     //-----------------------------------------------------------------------
     /**
      * Converts this object to a DateTime using the default zone.
+     * <p>
+     * This method will throw an exception if the datetime that would be
+     * created does not exist when the time zone is taken into account.
      * 
      * @return <code>this</code>
      */
@@ -618,6 +621,9 @@ public DateTime toDateTime() {
 
     /**
      * Converts this object to a DateTime using the specified zone.
+     * <p>
+     * This method will throw an exception if the datetime that would be
+     * created does not exist when the time zone is taken into account.
      * 
      * @param zone time zone to apply, or default if null
      * @return a DateTime using the same millis

From 1b63785f1ea1ba9e868a1e5e5ef2486fc3a38512 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Tue, 20 Mar 2007 14:42:35 +0000
Subject: [PATCH 031/112] Updated tz database to version 2007d.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1201 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/java/org/joda/time/tz/src/Readme.txt  |  2 +-
 JodaTime/src/java/org/joda/time/tz/src/asia   | 40 +++++++---
 .../src/java/org/joda/time/tz/src/australasia |  6 +-
 JodaTime/src/java/org/joda/time/tz/src/europe | 43 ++++++----
 .../java/org/joda/time/tz/src/northamerica    | 79 +++++++++++++------
 .../java/org/joda/time/tz/src/southamerica    | 15 +++-
 6 files changed, 128 insertions(+), 57 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
index a5ff53485..6b9d6f92b 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
+++ b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
@@ -1,2 +1,2 @@
 The data files in this directory were obtained from the public tz database,
-http://www.twinsun.com/tz/tz-link.htm, version 2007c.
+http://www.twinsun.com/tz/tz-link.htm, version 2007d.
diff --git a/JodaTime/src/java/org/joda/time/tz/src/asia b/JodaTime/src/java/org/joda/time/tz/src/asia
index 159453215..c207892a8 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/asia
+++ b/JodaTime/src/java/org/joda/time/tz/src/asia
@@ -1,4 +1,4 @@
-# @(#)asia	8.8
+# @(#)asia	8.10
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
@@ -217,7 +217,7 @@ Rule	PRC	1987	1991	-	Apr	Sun>=10	0:00	1:00	D
 # BTW, I did some research on-line and found some info regarding these five
 # historic timezones from some Taiwan websites.  And yes, there are official
 # Chinese names for these locales (before 1949).
-# 
+#
 # From Jesper Norgaard Welen (2006-07-14):
 # I have investigated the timezones around 1970 on the
 # http://www.astro.com/atlas site [with provinces and county
@@ -413,6 +413,8 @@ Zone	Asia/Tbilisi	2:59:16 -	LMT	1880
 
 # East Timor
 
+# See Indonesia for the 1945 transition.
+
 # From Joao Carrascalao, brother of the former governor of East Timor, in
 # <a href="http://etan.org/et99c/december/26-31/30ETMAY.htm">
 # East Timor may be late for its millennium
@@ -437,7 +439,7 @@ Zone	Asia/Tbilisi	2:59:16 -	LMT	1880
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Asia/Dili	8:22:20 -	LMT	1912
 			8:00	-	TLT	1942 Feb 21 23:00 # E Timor Time
-			9:00	-	JST	1945 Aug
+			9:00	-	JST	1945 Sep 23
 			9:00	-	TLT	1976 May  3
 			8:00	-	CIT	2000 Sep 17 00:00
 			9:00	-	TLT
@@ -463,6 +465,19 @@ Zone	Asia/Calcutta	5:53:28 -	LMT	1880	# Kolkata
 # time zone maps, I think that must refer to Western Borneo (Kalimantan Barat
 # and Kalimantan Tengah) switching from UTC+8 to UTC+7.
 #
+# From Paul Eggert (2007-03-10):
+# Here is another correction to Shanks & Pottenger.
+# JohnTWB writes that Japanese forces did not surrender control in
+# Indonesia until 1945-09-01 00:00 at the earliest (in Jakarta) and
+# other formal surrender ceremonies were September 9, 11, and 13, plus
+# September 12 for the regional surrender to Mountbatten in Singapore.
+# These would be the earliest possible times for a change.
+# Regimes horaires pour le monde entier, by Henri Le Corre, (Editions
+# Traditionnelles, 1987, Paris) says that Java and Madura switched
+# from JST to UTC+07:30 on 1945-09-23, and gives 1944-09-01 for Jayapura
+# (Hollandia).  For now, assume all Indonesian locations other than Jayapura
+# switched on 1945-09-23.
+#
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone Asia/Jakarta	7:07:12 -	LMT	1867 Aug 10
 # Shanks & Pottenger say the next transition was at 1924 Jan 1 0:13,
@@ -470,7 +485,7 @@ Zone Asia/Jakarta	7:07:12 -	LMT	1867 Aug 10
 			7:07:12	-	JMT	1923 Dec 31 23:47:12 # Jakarta
 			7:20	-	JAVT	1932 Nov	 # Java Time
 			7:30	-	WIT	1942 Mar 23
-			9:00	-	JST	1945 Aug
+			9:00	-	JST	1945 Sep 23
 			7:30	-	WIT	1948 May
 			8:00	-	WIT	1950 May
 			7:30	-	WIT	1964
@@ -478,7 +493,7 @@ Zone Asia/Jakarta	7:07:12 -	LMT	1867 Aug 10
 Zone Asia/Pontianak	7:17:20	-	LMT	1908 May
 			7:17:20	-	PMT	1932 Nov    # Pontianak MT
 			7:30	-	WIT	1942 Jan 29
-			9:00	-	JST	1945 Aug
+			9:00	-	JST	1945 Sep 23
 			7:30	-	WIT	1948 May
 			8:00	-	WIT	1950 May
 			7:30	-	WIT	1964
@@ -487,10 +502,10 @@ Zone Asia/Pontianak	7:17:20	-	LMT	1908 May
 Zone Asia/Makassar	7:57:36 -	LMT	1920
 			7:57:36	-	MMT	1932 Nov    # Macassar MT
 			8:00	-	CIT	1942 Feb  9
-			9:00	-	JST	1945 Aug
+			9:00	-	JST	1945 Sep 23
 			8:00	-	CIT
 Zone Asia/Jayapura	9:22:48 -	LMT	1932 Nov
-			9:00	-	EIT	1944
+			9:00	-	EIT	1944 Sep  1
 			9:30	-	CST	1964
 			9:00	-	EIT
 
@@ -614,7 +629,7 @@ Rule	Iraq	1985	1990	-	Sep	lastSun	1:00s	0	S
 Rule	Iraq	1986	1990	-	Mar	lastSun	1:00s	1:00	D
 # IATA SSIM (1991/1996) says Apr 1 12:01am UTC; guess the `:01' is a typo.
 # Shanks & Pottenger say Iraq did not observe DST 1992/1997; ignore this.
-# 
+#
 Rule	Iraq	1991	max	-	Apr	 1	3:00s	1:00	D
 Rule	Iraq	1991	max	-	Oct	 1	3:00s	0	S
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
@@ -1293,6 +1308,11 @@ Zone	Indian/Maldives	4:54:00 -	LMT	1880	# Male
 # parliament passed during the tumultuous winter session."
 # For now, let's ignore this information, until we have more confirmation.
 
+# From Ganbold Ts. (2007-02-26):
+# Parliament of Mongolia has just changed the daylight-saving rule in February.
+# They decided not to adopt daylight-saving time....
+# http://www.mongolnews.mn/index.php?module=unuudur&sec=view&id=15742
+
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Mongol	1983	1984	-	Apr	1	0:00	1:00	S
 Rule	Mongol	1983	only	-	Oct	1	0:00	0	-
@@ -1311,8 +1331,8 @@ Rule	Mongol	1985	1998	-	Mar	lastSun	0:00	1:00	S
 Rule	Mongol	1984	1998	-	Sep	lastSun	0:00	0	-
 # IATA SSIM (1999-09) says Mongolia no longer observes DST.
 Rule	Mongol	2001	only	-	Apr	lastSat	2:00	1:00	S
-Rule	Mongol	2001	max	-	Sep	lastSat	2:00	0	-
-Rule	Mongol	2002	max	-	Mar	lastSat	2:00	1:00	S
+Rule	Mongol	2001	2006	-	Sep	lastSat	2:00	0	-
+Rule	Mongol	2002	2006	-	Mar	lastSat	2:00	1:00	S
 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 # Hovd, a.k.a. Chovd, Dund-Us, Dzhargalant, Khovd, Jirgalanta
diff --git a/JodaTime/src/java/org/joda/time/tz/src/australasia b/JodaTime/src/java/org/joda/time/tz/src/australasia
index 797f94d32..c77da8859 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/australasia
+++ b/JodaTime/src/java/org/joda/time/tz/src/australasia
@@ -1,4 +1,4 @@
-# @(#)australasia	8.5
+# @(#)australasia	8.6
 # <pre>
 
 # This file also includes Pacific islands.
@@ -818,7 +818,7 @@ Zone	Pacific/Wallis	12:15:20 -	LMT	1901
 
 # From Christopher Hunt (2006-11-21), after an advance warning
 # from Jesper Norgaard Welen (2006-11-01):
-# WA are trialing DST for three years. 
+# WA are trialing DST for three years.
 # <http://www.parliament.wa.gov.au/parliament/bills.nsf/9A1B183144403DA54825721200088DF1/$File/Bill175-1B.pdf>
 
 # From Rives McDow (2002-04-09):
@@ -850,7 +850,7 @@ Zone	Pacific/Wallis	12:15:20 -	LMT	1901
 # question arose whether this part of the state would follow suit. I
 # just called the border village and confirmed that indeed they have,
 # meaning that they are now observing UTC+09:45.
-# 
+#
 # (2006-12-09):
 # I personally doubt that either experimentation with daylight saving
 # in WA or its introduction in SA had anything to do with the genesis
diff --git a/JodaTime/src/java/org/joda/time/tz/src/europe b/JodaTime/src/java/org/joda/time/tz/src/europe
index e33351dd9..bf5d9f781 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/europe
+++ b/JodaTime/src/java/org/joda/time/tz/src/europe
@@ -1,4 +1,4 @@
-# @(#)europe	8.8
+# @(#)europe	8.10
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
@@ -259,32 +259,32 @@
 #   -- James Joyce, Ulysses
 
 # From Joseph S. Myers (2005-01-26):
-# Irish laws are available online at www.irishstatutebook.ie.  These include 
+# Irish laws are available online at www.irishstatutebook.ie.  These include
 # various relating to legal time, for example:
-# 
+#
 # ZZA13Y1923.html ZZA12Y1924.html ZZA8Y1925.html ZZSIV20PG1267.html
-# 
+#
 # ZZSI71Y1947.html ZZSI128Y1948.html ZZSI23Y1949.html ZZSI41Y1950.html
 # ZZSI27Y1951.html ZZSI73Y1952.html
-# 
+#
 # ZZSI11Y1961.html ZZSI232Y1961.html ZZSI182Y1962.html
 # ZZSI167Y1963.html ZZSI257Y1964.html ZZSI198Y1967.html
 # ZZA23Y1968.html ZZA17Y1971.html
-# 
+#
 # ZZSI67Y1981.html ZZSI212Y1982.html ZZSI45Y1986.html
 # ZZSI264Y1988.html ZZSI52Y1990.html ZZSI371Y1992.html
 # ZZSI395Y1994.html ZZSI484Y1997.html ZZSI506Y2001.html
 #
 # [These are all relative to the root, e.g., the first is
 # <http://www.irishstatutebook.ie/ZZA13Y1923.html>.]
-# 
-# (These are those I found, but there could be more.  In any case these 
-# should allow various updates to the comments in the europe file to cover 
+#
+# (These are those I found, but there could be more.  In any case these
+# should allow various updates to the comments in the europe file to cover
 # the laws applicable in Ireland.)
-# 
-# (Note that the time in the Republic of Ireland since 1968 has been defined 
-# in terms of standard time being GMT+1 with a period of winter time when it 
-# is GMT, rather than standard time being GMT with a period of summer time 
+#
+# (Note that the time in the Republic of Ireland since 1968 has been defined
+# in terms of standard time being GMT+1 with a period of winter time when it
+# is GMT, rather than standard time being GMT with a period of summer time
 # being GMT+1.)
 
 # From Paul Eggert (1999-03-28):
@@ -2296,6 +2296,16 @@ Zone	Europe/Zurich	0:34:08 -	LMT	1848 Sep 12
 # From Paul Eggert (2007-01-03):
 # Prefer the above source to Shanks & Pottenger for time stamps after 1990.
 
+# From Steffen Thorsen (2007-03-09):
+# Starting 2007 though, it seems that they are adopting EU's 1:00 UTC
+# start/end time, according to the following page (2007-03-07):
+# http://www.ntvmsnbc.com/news/402029.asp
+# The official document is located here - it is in Turkish...:
+# http://rega.basbakanlik.gov.tr/eskiler/2007/03/20070307-7.htm
+# I was able to locate the following seemingly official document
+# (on a non-government server though) describing dates between 2002 and 2006:
+# http://www.alomaliye.com/bkk_2002_3769.htm
+
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Turkey	1916	only	-	May	 1	0:00	1:00	S
 Rule	Turkey	1916	only	-	Oct	 1	0:00	0	-
@@ -2352,15 +2362,16 @@ Rule	Turkey	1985	only	-	Apr	20	0:00	1:00	S
 Rule	Turkey	1985	only	-	Sep	28	0:00	0	-
 Rule	Turkey	1986	1990	-	Mar	lastSun	2:00s	1:00	S
 Rule	Turkey	1986	1990	-	Sep	lastSun	2:00s	0	-
-Rule	Turkey	1991	max	-	Mar	lastSun	1:00s	1:00	S
+Rule	Turkey	1991	2006	-	Mar	lastSun	1:00s	1:00	S
 Rule	Turkey	1991	1995	-	Sep	lastSun	1:00s	0	-
-Rule	Turkey	1996	max	-	Oct	lastSun	1:00s	0	-
+Rule	Turkey	1996	2006	-	Oct	lastSun	1:00s	0	-
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Europe/Istanbul	1:55:52 -	LMT	1880
 			1:56:56	-	IMT	1910 Oct # Istanbul Mean Time?
 			2:00	Turkey	EE%sT	1978 Oct 15
 			3:00	Turkey	TR%sT	1985 Apr 20 # Turkey Time
-			2:00	Turkey	EE%sT
+			2:00	Turkey	EE%sT	2007
+			2:00	EU	EE%sT
 Link	Europe/Istanbul	Asia/Istanbul	# Istanbul is in both continents.
 
 # Ukraine
diff --git a/JodaTime/src/java/org/joda/time/tz/src/northamerica b/JodaTime/src/java/org/joda/time/tz/src/northamerica
index a9e1f9fc2..2f9f390de 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/northamerica
+++ b/JodaTime/src/java/org/joda/time/tz/src/northamerica
@@ -1,4 +1,4 @@
-# @(#)northamerica	8.12
+# @(#)northamerica	8.15
 # <pre>
 
 # also includes Central America and the Caribbean
@@ -307,6 +307,11 @@ Zone America/New_York	-4:56:02 -	LMT	1883 Nov 18 12:03:58
 # "bar time" in the state corresponds to 02:00, a number of citations
 # are issued for the "sale of class 'B' alcohol after prohibited
 # hours" within the deviated hour of this change every year....
+#
+# From Douglas R. Bomberg (2007-03-12):
+# Wisconsin has enacted (nearly eleventh-hour) legislation to get WI
+# Statue 175 closer in synch with the US Congress' intent....
+# http://www.legis.state.wi.us/2007/data/acts/07Act3.pdf
 
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
 Rule	Chicago	1920	only	-	Jun	13	2:00	1:00	D
@@ -916,7 +921,8 @@ Zone America/Menominee	-5:50:27 -	LMT	1885 Sep 18 12:00
 # Unless otherwise specified, the data for Canada are all from Shanks
 # & Pottenger.
 
-# From Chris Walton (2006-04-01, 2006-04-25, 2006-06-26, 2007-01-31):
+# From Chris Walton (2006-04-01, 2006-04-25, 2006-06-26, 2007-01-31,
+# 2007-03-01):
 # The British Columbia government announced yesterday that it will
 # adjust daylight savings next year to align with changes in the
 # U.S. and the rest of Canada....
@@ -955,14 +961,9 @@ Zone America/Menominee	-5:50:27 -	LMT	1885 Sep 18 12:00
 # JavaScript.
 # http://www.exec.gov.nt.ca/currentnews/currentPR.asp?mode=archive
 # ...
-# No formal announcement has been made from the Nunavut Government.
-# The premier of Nunavut claimed in August of 2005 that he did not
-# want to touch the issue; nothing more has been heard since.  It is
-# likely Nunavut will eventually follow the rest of the country but
-# there will certainly be confusion on March 11/2007 if no formal
-# announcement is made.  Currently the TZ database and Microsoft make
-# assumptions that Nunavut will follow the rest of the country.
-
+# Nunavut
+# An amendment to the Interpretation Act was registered on February 19/2007....
+# http://action.attavik.ca/home/justice-gn/attach/2007/gaz02part2.pdf
 
 # From Paul Eggert (2006-04-25):
 # H. David Matthews and Mary Vincent's map
@@ -1705,6 +1706,24 @@ Zone America/Dawson_Creek -8:00:56 -	LMT	1884
 # For lack of better information, assume that Southampton Island observed
 # daylight saving only during wartime.
 
+# From Chris Walton (2007-03-01):
+# ... the community of Resolute (located on Cornwallis Island in
+# Nunavut) moved from Central Time to Eastern Time last November.
+# Basically the community did not change its clocks at the end of
+# daylight saving....
+# http://www.nnsl.com/frames/newspapers/2006-11/nov13_06none.html
+
+# From Chris Walton (2007-03-14):
+# Today I phoned the "hamlet office" to find out what Resolute was doing with
+# its clocks.
+#
+# The individual that answered the phone confirmed that the clocks did not
+# move at the end of daylight saving on October 29/2006.  He also told me that
+# the clocks did not move this past weekend (March 11/2007)....
+#
+# America/Resolute should use the "Canada" Rule up to October 29/2006.
+# After that it should be fixed on Eastern Standard Time until further notice.
+
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	NT_YK	1918	only	-	Apr	14	2:00	1:00	D
 Rule	NT_YK	1918	only	-	Oct	27	2:00	0	S
@@ -1719,33 +1738,39 @@ Rule	NT_YK	1980	1986	-	Apr	lastSun	2:00	1:00	D
 Rule	NT_YK	1980	2006	-	Oct	lastSun	2:00	0	S
 Rule	NT_YK	1987	2006	-	Apr	Sun>=1	2:00	1:00	D
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone America/Pangnirtung -4:22:56 -	LMT	1884
+# aka Panniqtuuq
+Zone America/Pangnirtung 0	-	zzz	1921 # trading post est.
 			-4:00	NT_YK	A%sT	1995 Apr Sun>=1 2:00
 			-5:00	Canada	E%sT	1999 Oct 31 2:00
 			-6:00	Canada	C%sT	2000 Oct 29 2:00
 			-5:00	Canada	E%sT
-Zone America/Iqaluit	-4:33:52 -	LMT	1884 # Frobisher Bay before 1987
+# formerly Frobisher Bay
+Zone America/Iqaluit	0	-	zzz	1942 Aug # Frobisher Bay est.
 			-5:00	NT_YK	E%sT	1999 Oct 31 2:00
 			-6:00	Canada	C%sT	2000 Oct 29 2:00
 			-5:00	Canada	E%sT
-# Now subsumed by America/Atikokan.
-#Zone America/Coral_Harbour -5:32:40 -	LMT	1884
-#			-5:00	NT_YK	E%sT	1946
-#			-5:00	-	EST
-Zone America/Rankin_Inlet -6:08:20 -	LMT	1884
+# aka Qausuittuq
+Zone America/Resolute	0	-	zzz	1947 Aug 31 # Resolute founded
+			-6:00	NT_YK	C%sT	2000 Oct 29 2:00
+			-5:00	-	EST	2001 Apr  1 3:00
+			-6:00	Canada	C%sT	2006 Oct 29 2:00
+			-5:00	-	EST
+# aka Kangiqiniq
+Zone America/Rankin_Inlet 0	-	zzz	1957 # Rankin Inlet founded
 			-6:00	NT_YK	C%sT	2000 Oct 29 2:00
 			-5:00	-	EST	2001 Apr  1 3:00
 			-6:00	Canada	C%sT
-Zone America/Cambridge_Bay -7:00:20 -	LMT	1884
+# aka Iqaluktuuttiaq
+Zone America/Cambridge_Bay 0	-	zzz	1920 # trading post est.?
 			-7:00	NT_YK	M%sT	1999 Oct 31 2:00
 			-6:00	Canada	C%sT	2000 Oct 29 2:00
 			-5:00	-	EST	2000 Nov  5 0:00
 			-6:00	-	CST	2001 Apr  1 3:00
 			-7:00	Canada	M%sT
-Zone America/Yellowknife -7:37:24 -	LMT	1884
+Zone America/Yellowknife 0	-	zzz	1935 # Yellowknife founded?
 			-7:00	NT_YK	M%sT	1980
 			-7:00	Canada	M%sT
-Zone America/Inuvik	-8:54:52 -	LMT	1884
+Zone America/Inuvik	0	-	zzz	1953 # Inuvik founded
 			-8:00	NT_YK	P%sT	1979 Apr lastSun 2:00
 			-7:00	NT_YK	M%sT	1980
 			-7:00	Canada	M%sT
@@ -2024,7 +2049,7 @@ Zone	America/Antigua	-4:07:12 -	LMT	1912 Mar 2
 # Bahamas
 #
 # From Sue Williams (2006-12-07):
-# The Bahamas announced about a month ago that they plan to change their DST 
+# The Bahamas announced about a month ago that they plan to change their DST
 # rules to sync with the U.S. starting in 2007....
 # http://www.jonesbahamas.com/?c=45&a=10412
 
@@ -2135,6 +2160,12 @@ Zone America/Costa_Rica	-5:36:20 -	LMT	1890		# San Jose
 # watches should be set back one hour -- going back to 00:00 hours -- returning
 # to the normal schedule....
 
+# From Paul Eggert (2007-03-02):
+# http://www.granma.cubaweb.cu/english/news/art89.html, dated yesterday,
+# says Cuban clocks will advance at midnight on March 10.
+# For lack of better information, assume Cuba will use US rules,
+# except that it switches at midnight standard time as usual.
+
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Cuba	1928	only	-	Jun	10	0:00	1:00	D
 Rule	Cuba	1928	only	-	Oct	10	0:00	0	S
@@ -2164,8 +2195,10 @@ Rule	Cuba	1996	only	-	Oct	 6	0:00s	0	S
 Rule	Cuba	1997	only	-	Oct	12	0:00s	0	S
 Rule	Cuba	1998	1999	-	Mar	lastSun	0:00s	1:00	D
 Rule	Cuba	1998	2003	-	Oct	lastSun	0:00s	0	S
-Rule	Cuba	2000	max	-	Apr	Sun>=1	0:00s	1:00	D
-Rule	Cuba	2006	max	-	Oct	lastSun	0:00s	0	S
+Rule	Cuba	2000	2006	-	Apr	Sun>=1	0:00s	1:00	D
+Rule	Cuba	2006	only	-	Oct	lastSun	0:00s	0	S
+Rule	Cuba	2007	max	-	Mar	Sun>=8	0:00s	1:00	D
+Rule	Cuba	2007	max	-	Nov	Sun>=1	0:00s	0	S
 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	America/Havana	-5:29:28 -	LMT	1890
diff --git a/JodaTime/src/java/org/joda/time/tz/src/southamerica b/JodaTime/src/java/org/joda/time/tz/src/southamerica
index 4a777b5b6..edc6f31d9 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/southamerica
+++ b/JodaTime/src/java/org/joda/time/tz/src/southamerica
@@ -1,4 +1,4 @@
-# @(#)southamerica	8.9
+# @(#)southamerica	8.11
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
@@ -786,26 +786,33 @@ Zone	America/Bogota	-4:56:20 -	LMT	1884 Mar 13
 
 # Curacao
 #
-# From Paul Eggert (2006-03-22): 
+# From Paul Eggert (2006-03-22):
 # Shanks & Pottenger say that The Bottom and Philipsburg have been at
 # -4:00 since standard time was introduced on 1912-03-02; and that
 # Kralendijk and Rincon used Kralendijk Mean Time (-4:33:08) from
 # 1912-02-02 to 1965-01-01.  The former is dubious, since S&P also say
 # Saba Island has been like Curacao.
-# This all predates our 1970 cutoff, though.  
+# This all predates our 1970 cutoff, though.
 #
 # By July 2007 Curacao and St Maarten are planned to become
 # associated states within the Netherlands, much like Aruba;
 # Bonaire, Saba and St Eustatius would become directly part of the
 # Netherlands as Kingdom Islands.  This won't affect their time zones
 # though, as far as we know.
-# 
+#
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	America/Curacao	-4:35:44 -	LMT	1912 Feb 12	# Willemstad
 			-4:30	-	ANT	1965 # Netherlands Antilles Time
 			-4:00	-	AST
 
 # Ecuador
+#
+# From Paul Eggert (2007-03-04):
+# Apparently Ecuador had a failed experiment with DST in 1992.
+# <http://midena.gov.ec/content/view/1261/208/> (2007-02-27) and
+# <http://www.hoy.com.ec/NoticiaNue.asp?row_id=249856> (2006-11-06) both
+# talk about "hora Sixto".  Leave this alone for now, as we have no data.
+#
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone America/Guayaquil	-5:19:20 -	LMT	1890
 			-5:14:00 -	QMT	1931 # Quito Mean Time

From 9378383c75a75a46d55161b1b9d2241694bf62d4 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Tue, 20 Mar 2007 14:43:08 +0000
Subject: [PATCH 032/112] Updated tz database to version 2007d.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1202 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 19c7b7a83..e1478b9af 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -32,7 +32,7 @@ Source compatible - Yes
 Serialization compatible - Yes
 
 Data compatible - Yes
-  - DateTimeZone data updated to version 2007c
+  - DateTimeZone data updated to version 2007d
 
 Semantic compatible - Yes
 

From aa114f070b15d0f91261a4c4c9c1b170ec5e92cf Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Sun, 25 Mar 2007 16:47:48 +0000
Subject: [PATCH 033/112] DateTimeZone did not properly convert fixed offset
 zones to java.util.TimeZone

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1203 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                                | 2 ++
 JodaTime/src/java/org/joda/time/DateTimeZone.java         | 2 +-
 JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java | 4 ++++
 .../src/test/org/joda/time/tz/TestFixedDateTimeZone.java  | 8 ++++++++
 4 files changed, 15 insertions(+), 1 deletion(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index e1478b9af..f01746dae 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -58,6 +58,8 @@ Bug fixes since 1.4
   This appears to be an IBM JDK issue, not a Joda-Time issue, but we should
   not have ended up in an infinite loop whatever happens
 
+- DateTimeZone did not properly convert fixed offset zones to java.util.TimeZone
+
 
 Feedback
 --------
diff --git a/JodaTime/src/java/org/joda/time/DateTimeZone.java b/JodaTime/src/java/org/joda/time/DateTimeZone.java
index 5f85540ee..393e313b1 100644
--- a/JodaTime/src/java/org/joda/time/DateTimeZone.java
+++ b/JodaTime/src/java/org/joda/time/DateTimeZone.java
@@ -877,7 +877,7 @@ public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant) {
     /**
      * Get the datetime zone as a {@link java.util.TimeZone}.
      * 
-     * @return the equivalent TimeZone object
+     * @return the closest matching TimeZone object
      */
     public java.util.TimeZone toTimeZone() {
         return java.util.TimeZone.getTimeZone(iID);
diff --git a/JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java b/JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java
index 468f1a331..4afe54710 100644
--- a/JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java
+++ b/JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java
@@ -69,6 +69,10 @@ public long previousTransition(long instant) {
         return instant;
     }
 
+    public java.util.TimeZone toTimeZone() {
+        return new java.util.SimpleTimeZone(iWallOffset, getID());
+    }
+
     public boolean equals(Object obj) {
         if (this == obj) {
             return true;
diff --git a/JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java b/JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java
index 8e84c95b7..2beb93e56 100644
--- a/JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java
+++ b/JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java
@@ -78,4 +78,12 @@ public void testHashCode() throws Exception {
         assertEquals(false, zone1.hashCode() == zone4.hashCode());
     }
 
+    public void testToTimeZone() throws Exception {
+        FixedDateTimeZone zone = new FixedDateTimeZone("A", "B", 1, 5);
+        java.util.TimeZone tz = zone.toTimeZone();
+
+        assertEquals(1, tz.getRawOffset());
+        assertEquals(1, tz.getOffset(1167638400000L));
+        assertEquals(1, tz.getOffset(1185951600000L));
+    }
 }

From be32ff327cb1aa283ea983bd9d19fd216c16622c Mon Sep 17 00:00:00 2001
From: Jeremy Rickard <jeremy.r.rickard@lmco.com>
Date: Tue, 27 Mar 2007 01:56:38 +0000
Subject: [PATCH 034/112] Added TestUnsupportedDateTimeField to exercise all
 methods in UnsupportedDateTimeField. Modified TestAll.java to include this
 test suite.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1204 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../src/test/org/joda/time/field/TestAll.java |   2 +-
 .../field/TestUnsupportedDateTimeField.java   | 665 ++++++++++++++++++
 2 files changed, 666 insertions(+), 1 deletion(-)
 create mode 100644 JodaTime/src/test/org/joda/time/field/TestUnsupportedDateTimeField.java

diff --git a/JodaTime/src/test/org/joda/time/field/TestAll.java b/JodaTime/src/test/org/joda/time/field/TestAll.java
index 12b3ec72e..4a0325ea5 100644
--- a/JodaTime/src/test/org/joda/time/field/TestAll.java
+++ b/JodaTime/src/test/org/joda/time/field/TestAll.java
@@ -52,7 +52,7 @@ public static Test suite() {
         suite.addTest(TestMillisDurationField.suite());
         suite.addTest(TestPreciseDurationField.suite());
         suite.addTest(TestScaledDurationField.suite());
-        
+        suite.addTest(TestUnsupportedDateTimeField.suite());
         return suite;
     }
 
diff --git a/JodaTime/src/test/org/joda/time/field/TestUnsupportedDateTimeField.java b/JodaTime/src/test/org/joda/time/field/TestUnsupportedDateTimeField.java
new file mode 100644
index 000000000..3de6acd58
--- /dev/null
+++ b/JodaTime/src/test/org/joda/time/field/TestUnsupportedDateTimeField.java
@@ -0,0 +1,665 @@
+/*
+ *  Copyright 2001-2006 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.field;
+
+import java.util.Locale;
+
+import org.joda.time.Chronology;
+import org.joda.time.DateTimeField;
+import org.joda.time.DateTimeFieldType;
+import org.joda.time.DateTimeZone;
+import org.joda.time.DurationFieldType;
+import org.joda.time.LocalTime;
+import org.joda.time.ReadablePartial;
+import org.joda.time.chrono.GregorianChronology;
+import org.joda.time.chrono.IslamicChronology;
+
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+/**
+ * This class is a JUnit test to test only the UnsupportedDateTimeField class.
+ * This set of test cases exercises everything described in the Javadoc for this
+ * class.
+ * 
+ * @author Jeremy R. Rickard
+ */
+public class TestUnsupportedDateTimeField extends TestCase {
+
+    private DurationFieldType weeks;
+    private DurationFieldType months;
+    private DateTimeFieldType dateTimeFieldTypeOne;
+    private ReadablePartial localTime;
+
+    public static TestSuite suite() {
+        return new TestSuite(TestUnsupportedDateTimeField.class);
+    }
+
+    protected void setUp() throws Exception {
+        weeks = DurationFieldType.weeks();
+        months = DurationFieldType.months();
+        dateTimeFieldTypeOne = DateTimeFieldType.centuryOfEra();
+        localTime = new LocalTime();
+    }
+
+    /**
+     * Passing null values into UnsupportedDateTimeField.getInstance() should
+     * throw an IllegalArguementsException
+     */
+    public void testNullValuesToGetInstanceThrowsException() {
+
+        try {
+            UnsupportedDateTimeField.getInstance(null, null);
+            assertTrue(false);
+        } catch (IllegalArgumentException e) {
+            assertTrue(true);
+        }
+    }
+
+    /**
+     * 
+     * This test exercises the logic in UnsupportedDateTimeField.getInstance. If
+     * getInstance() is invoked twice with: - the same DateTimeFieldType -
+     * different duration fields
+     * 
+     * Then the field returned in the first invocation should not be equal to
+     * the field returned by the second invocation. In otherwords, the generated
+     * instance should be the same for a unique pairing of
+     * DateTimeFieldType/DurationField
+     */
+    public void testDifferentDurationReturnDifferentObjects() {
+
+        /**
+         * The fields returned by getInstance should be the same when the
+         * duration is the same for both method calls.
+         */
+        DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(
+                dateTimeFieldTypeOne, UnsupportedDurationField
+                        .getInstance(weeks));
+        DateTimeField fieldTwo = UnsupportedDateTimeField.getInstance(
+                dateTimeFieldTypeOne, UnsupportedDurationField
+                        .getInstance(weeks));
+        assertSame(fieldOne, fieldTwo);
+
+        /**
+         * The fields returned by getInstance should NOT be the same when the
+         * duration is the same for both method calls.
+         */
+        DateTimeField fieldThree = UnsupportedDateTimeField.getInstance(
+                dateTimeFieldTypeOne, UnsupportedDurationField
+                        .getInstance(months));
+        assertNotSame(fieldOne, fieldThree);
+    }
+
+    /**
+     * The getName() method should return the same value as the getName() method
+     * of the DateTimeFieldType that was used to create the instance.
+     * 
+     */
+    public void testPublicGetNameMethod() {
+        DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(
+                dateTimeFieldTypeOne, UnsupportedDurationField
+                        .getInstance(weeks));
+
+        assertSame(fieldOne.getName(), dateTimeFieldTypeOne.getName());
+    }
+
+    /**
+     * As this is an unsupported date/time field, some normal methods will
+     * always return false, as they are not supported. Verify that each method
+     * correctly returns null.
+     */
+    public void testAlwaysFalseReturnTypes() {
+        DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(
+                dateTimeFieldTypeOne, UnsupportedDurationField
+                        .getInstance(weeks));
+        assertFalse(fieldOne.isLenient());
+        assertFalse(fieldOne.isSupported());
+    }
+
+    /**
+     * According to the JavaDocs, there are two methods that should always
+     * return null. * getRangeDurationField() * getLeapDurationField()
+     * 
+     * Ensure that these are in fact null.
+     */
+
+    public void testMethodsThatShouldAlwaysReturnNull() {
+        DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(
+                dateTimeFieldTypeOne, UnsupportedDurationField
+                        .getInstance(weeks));
+
+        assertNull(fieldOne.getLeapDurationField());
+        assertNull(fieldOne.getRangeDurationField());
+    }
+
+    /**
+     * As this is an unsupported date/time field, many normal methods are
+     * unsupported and throw an UnsupportedOperationException. Verify that each
+     * method correctly throws this exception. * add(ReadablePartial instant,
+     * int fieldIndex, int[] values, int valueToAdd) * addWrapField(long
+     * instant, int value) * addWrapField(ReadablePartial instant, int
+     * fieldIndex, int[] values, int valueToAdd) *
+     * addWrapPartial(ReadablePartial instant, int fieldIndex, int[] values, int
+     * valueToAdd) * get(long instant) * getAsShortText(int fieldValue, Locale
+     * locale) * getAsShortText(long instant) * getAsShortText(long instant,
+     * Locale locale) * getAsShortText(ReadablePartial partial, int fieldValue,
+     * Locale locale) * getAsShortText(ReadablePartial partial, Locale locale) *
+     * getAsText(int fieldValue, Locale locale) * getAsText(long instant) *
+     * getAsText(long instant, Locale locale) * getAsText(ReadablePartial
+     * partial, int fieldValue, Locale locale) * getAsText(ReadablePartial
+     * partial, Locale locale) * getLeapAmount(long instant) *
+     * getMaximumShortTextLength(Locale locale) * getMaximumTextLength(Locale
+     * locale) * getMaximumValue() * getMaximumValue(long instant) *
+     * getMaximumValue(ReadablePartial instant) *
+     * getMaximumValue(ReadablePartial instant, int[] values) *
+     * getMinimumValue() * getMinimumValue(long instant) *
+     * getMinimumValue(ReadablePartial instant) *
+     * getMinimumValue(ReadablePartial instant, int[] values) * isLeap(long
+     * instant) * remainder(long instant) * roundCeiling(long instant) *
+     * roundFloor(long instant) * roundHalfCeiling(long instant) *
+     * roundHalfEven(long instant) * roundHalfFloor(long instant) * set(long
+     * instant, int value) * set(long instant, String text) * set(long instant,
+     * String text, Locale locale) * set(ReadablePartial instant, int
+     * fieldIndex, int[] values, int newValue) * set(ReadablePartial instant,
+     * int fieldIndex, int[] values, String text, Locale locale)
+     */
+    public void testUnsupportedMethods() {
+        DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(
+                dateTimeFieldTypeOne, UnsupportedDurationField
+                        .getInstance(weeks));
+
+        // add(ReadablePartial instant, int fieldIndex, int[] values, int
+        // valueToAdd)
+        try {
+            fieldOne.add(localTime, 0, new int[] { 0, 100 }, 100);
+            assertTrue(false);
+        } catch (UnsupportedOperationException e) {
+            assertTrue(true);
+        }
+        // addWrapField(long instant, int value)
+        try {
+            fieldOne.addWrapField(100000L, 250);
+            assertTrue(false);
+        } catch (UnsupportedOperationException e) {
+            assertTrue(true);
+        }
+        // addWrapField(ReadablePartial instant, int fieldIndex, int[] values,
+        // int valueToAdd)
+        try {
+            fieldOne.addWrapField(localTime, 0, new int[] { 0, 100 }, 100);
+            assertTrue(false);
+        } catch (UnsupportedOperationException e) {
+            assertTrue(true);
+        }
+        // addWrapPartial(ReadablePartial instant, int fieldIndex, int[] values,
+        // int valueToAdd)
+        try {
+            fieldOne.addWrapPartial(localTime, 0, new int[] { 0, 100 }, 100);
+            assertTrue(false);
+        } catch (UnsupportedOperationException e) {
+            assertTrue(true);
+        }
+        // UnsupportedDateTimeField.get(long instant)
+        try {
+            fieldOne.get(1000L);
+            assertTrue(false);
+        } catch (UnsupportedOperationException e) {
+            assertTrue(true);
+        }
+
+        // UnsupportedDateTimeField.getAsShortText(int fieldValue,
+        // Locale locale)
+        try {
+            fieldOne.getAsShortText(0, Locale.getDefault());
+            assertTrue(false);
+        } catch (UnsupportedOperationException e) {
+            assertTrue(true);
+        }
+
+        // UnsupportedDateTimeField.getAsShortText(long instant)
+        try {
+            fieldOne.getAsShortText(100000L);
+            assertTrue(false);
+        } catch (UnsupportedOperationException e) {
+            assertTrue(true);
+        }
+
+        // UnsupportedDateTimeField.getAsShortText(long instant, Locale locale)
+        try {
+            fieldOne.getAsShortText(100000L, Locale.getDefault());
+            assertTrue(false);
+        } catch (UnsupportedOperationException e) {
+            assertTrue(true);
+        }
+
+        // UnsupportedDateTimeField.getAsShortText(ReadablePartial partial,
+        // int fieldValue,
+        // Locale locale)
+        try {
+            fieldOne.getAsShortText(localTime, 0, Locale.getDefault());
+            assertTrue(false);
+        } catch (UnsupportedOperationException e) {
+            assertTrue(true);
+        }
+
+        // UnsupportedDateTimeField.getAsShortText(ReadablePartial partial,
+        // Locale locale)
+        try {
+            fieldOne.getAsShortText(localTime, Locale.getDefault());
+            assertTrue(false);
+        } catch (UnsupportedOperationException e) {
+            assertTrue(true);
+        }
+
+        // UnsupportedDateTimeField.getAsText(int fieldValue,
+        // Locale locale)
+        try {
+            fieldOne.getAsText(0, Locale.getDefault());
+            assertTrue(false);
+        } catch (UnsupportedOperationException e) {
+            assertTrue(true);
+        }
+
+        // UnsupportedDateTimeField.getAsText(long instant)
+        try {
+            fieldOne.getAsText(1000L);
+            assertTrue(false);
+        } catch (UnsupportedOperationException e) {
+            assertTrue(true);
+        }
+
+        // UnsupportedDateTimeField.getAsText(long instant, Locale locale)
+        try {
+            fieldOne.getAsText(1000L, Locale.getDefault());
+            assertTrue(false);
+        } catch (UnsupportedOperationException e) {
+            assertTrue(true);
+        }
+
+        // UnsupportedDateTimeField.getAsText(ReadablePartial partial,
+        // int fieldValue,
+        // Locale locale)
+        try {
+            fieldOne.getAsText(localTime, 0, Locale.getDefault());
+            assertTrue(false);
+        } catch (UnsupportedOperationException e) {
+            assertTrue(true);
+        }
+
+        // UnsupportedDateTimeField.getAsText(ReadablePartial partial,
+        // Locale locale)
+        try {
+            fieldOne.getAsText(localTime, Locale.getDefault());
+            assertTrue(false);
+        } catch (UnsupportedOperationException e) {
+            assertTrue(true);
+        }
+
+        // UnsupportedDateTimeField.getLeapAmount(long instant) is unsupported
+        // and should always thrown an UnsupportedOperationException
+        try {
+            fieldOne.getLeapAmount(System.currentTimeMillis());
+            assertTrue(false);
+        } catch (UnsupportedOperationException e) {
+            assertTrue(true);
+        }
+
+        // UnsupportedDateTimeField.getMaximumShortTextLength(Locale locale)
+        // is unsupported and should always thrown an
+        // UnsupportedOperationException
+        try {
+            fieldOne.getMaximumShortTextLength(Locale.getDefault());
+            assertTrue(false);
+        } catch (UnsupportedOperationException e) {
+            assertTrue(true);
+        }
+
+        // UnsupportedDateTimeField.getMaximumTextLength(Locale locale)
+        // is unsupported and should always thrown an
+        // UnsupportedOperationException
+        try {
+            fieldOne.getMaximumTextLength(Locale.getDefault());
+            assertTrue(false);
+        } catch (UnsupportedOperationException e) {
+            assertTrue(true);
+        }
+
+        // UnsupportedDateTimeField.getMaximumValue() is unsupported
+        // and should always thrown an UnsupportedOperationException
+        try {
+            fieldOne.getMaximumValue();
+            assertTrue(false);
+        } catch (UnsupportedOperationException e) {
+            assertTrue(true);
+        }
+
+        // UnsupportedDateTimeField.getMaximumValue(long instant)
+        // is unsupported and should always thrown an
+        // UnsupportedOperationException
+        try {
+            fieldOne.getMaximumValue(1000000L);
+            assertTrue(false);
+        } catch (UnsupportedOperationException e) {
+            assertTrue(true);
+        }
+
+        // UnsupportedDateTimeField.getMaximumValue(ReadablePartial instant)
+        // is unsupported and should always thrown an
+        // UnsupportedOperationException
+        try {
+            fieldOne.getMaximumValue(localTime);
+            assertTrue(false);
+        } catch (UnsupportedOperationException e) {
+            assertTrue(true);
+        }
+
+        // UnsupportedDateTimeField.getMaximumValue(ReadablePartial instant,
+        // int[] values)
+        // is unsupported and should always thrown an
+        // UnsupportedOperationException
+        try {
+            fieldOne.getMaximumValue(localTime, new int[] { 0 });
+            assertTrue(false);
+        } catch (UnsupportedOperationException e) {
+            assertTrue(true);
+        }
+
+        // UnsupportedDateTimeField.getMinumumValue() is unsupported
+        // and should always thrown an UnsupportedOperationException
+        try {
+            fieldOne.getMinimumValue();
+            assertTrue(false);
+        } catch (UnsupportedOperationException e) {
+            assertTrue(true);
+        }
+
+        // UnsupportedDateTimeField.getMinumumValue(long instant) is unsupported
+        // and should always thrown an UnsupportedOperationException
+        try {
+            fieldOne.getMinimumValue(10000000L);
+            assertTrue(false);
+        } catch (UnsupportedOperationException e) {
+            assertTrue(true);
+        }
+
+        // UnsupportedDateTimeField.getMinumumValue(ReadablePartial instant)
+        // is unsupported and should always thrown an
+        // UnsupportedOperationException
+        try {
+            fieldOne.getMinimumValue(localTime);
+            assertTrue(false);
+        } catch (UnsupportedOperationException e) {
+            assertTrue(true);
+        }
+
+        // UnsupportedDateTimeField.getMinumumValue(ReadablePartial instant,
+        // int[] values) is unsupported
+        // and should always thrown an UnsupportedOperationException
+        try {
+            fieldOne.getMinimumValue(localTime, new int[] { 0 });
+            assertTrue(false);
+        } catch (UnsupportedOperationException e) {
+            assertTrue(true);
+        }
+
+        // UnsupportedDateTimeField.isLeap(long instant) is unsupported and
+        // should always thrown an UnsupportedOperationException
+        try {
+            fieldOne.isLeap(System.currentTimeMillis());
+            assertTrue(false);
+        } catch (UnsupportedOperationException e) {
+            assertTrue(true);
+        }
+
+        // UnsupportedDateTimeField.remainder(long instant) is unsupported and
+        // should always thrown an UnsupportedOperationException
+        try {
+            fieldOne.remainder(1000000L);
+            assertTrue(false);
+        } catch (UnsupportedOperationException e) {
+            assertTrue(true);
+        }
+
+        // UnsupportedDateTimeField.roundCeiling(long instant) is unsupported
+        // and
+        // should always thrown an UnsupportedOperationException
+        try {
+            fieldOne.roundCeiling(1000000L);
+            assertTrue(false);
+        } catch (UnsupportedOperationException e) {
+            assertTrue(true);
+        }
+
+        // UnsupportedDateTimeField.roundFloor(long instant) is unsupported and
+        // should always thrown an UnsupportedOperationException
+        try {
+            fieldOne.roundFloor(1000000L);
+            assertTrue(false);
+        } catch (UnsupportedOperationException e) {
+            assertTrue(true);
+        }
+
+        // UnsupportedDateTimeField.roundHalfCeiling(long instant) is
+        // unsupported and
+        // should always thrown an UnsupportedOperationException
+        try {
+            fieldOne.roundHalfCeiling(1000000L);
+            assertTrue(false);
+        } catch (UnsupportedOperationException e) {
+            assertTrue(true);
+        }
+
+        // UnsupportedDateTimeField.roundHalfEven(long instant) is unsupported
+        // and
+        // should always thrown an UnsupportedOperationException
+        try {
+            fieldOne.roundHalfEven(1000000L);
+            assertTrue(false);
+        } catch (UnsupportedOperationException e) {
+            assertTrue(true);
+        }
+
+        // UnsupportedDateTimeField.roundHalfFloor(long instant) is unsupported
+        // and
+        // should always thrown an UnsupportedOperationException
+        try {
+            fieldOne.roundHalfFloor(1000000L);
+            assertTrue(false);
+        } catch (UnsupportedOperationException e) {
+            assertTrue(true);
+        }
+
+        // UnsupportedDateTimeField.set(long instant, int value) is unsupported
+        // and
+        // should always thrown an UnsupportedOperationException
+        try {
+            fieldOne.set(1000000L, 1000);
+            assertTrue(false);
+        } catch (UnsupportedOperationException e) {
+            assertTrue(true);
+        }
+
+        // UnsupportedDateTimeField.set(long instant, String test) is
+        // unsupported and
+        // should always thrown an UnsupportedOperationException
+        try {
+            fieldOne.set(1000000L, "Unsupported Operation");
+            assertTrue(false);
+        } catch (UnsupportedOperationException e) {
+            assertTrue(true);
+        }
+
+        // UnsupportedDateTimeField.set(long instant, String text, Locale
+        // locale)
+        // is unsupported and should always thrown an
+        // UnsupportedOperationException
+        try {
+            fieldOne
+                    .set(1000000L, "Unsupported Operation", Locale.getDefault());
+            assertTrue(false);
+        } catch (UnsupportedOperationException e) {
+            assertTrue(true);
+        }
+
+        // UnsupportedDateTimeField.set(ReadablePartial instant,
+        // int fieldIndex,
+        // int[] values,
+        // int newValue) is unsupported and
+        // should always thrown an UnsupportedOperationException
+        try {
+            fieldOne.set(localTime, 0, new int[] { 0 }, 10000);
+            assertTrue(false);
+        } catch (UnsupportedOperationException e) {
+            assertTrue(true);
+        }
+
+        // UnsupportedDateTimeField.set(ReadablePartial instant,
+        // int fieldIndex,
+        // int[] values,
+        // String text,
+        // Locale locale) is unsupported and
+        // should always thrown an UnsupportedOperationException
+        try {
+            fieldOne.set(localTime, 0, new int[] { 0 },
+                    "Unsupported Operation", Locale.getDefault());
+            assertTrue(false);
+        } catch (UnsupportedOperationException e) {
+            assertTrue(true);
+        }
+    }
+
+    /**
+     * As this is an unsupported date/time field, many normal methods are
+     * unsupported. Some delegate and can possibly throw an
+     * UnsupportedOperationException or have a valid return. Verify that each
+     * method correctly throws this exception when appropriate and delegates
+     * correctly based on the Duration used to get the instance.
+     */
+    public void testDelegatedMethods() {
+        DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(
+                dateTimeFieldTypeOne, UnsupportedDurationField
+                        .getInstance(weeks));
+        PreciseDurationField hoursDuration = new PreciseDurationField(
+                DurationFieldType.hours(), 10L);
+        DateTimeField fieldTwo = UnsupportedDateTimeField.getInstance(
+                dateTimeFieldTypeOne, hoursDuration);
+
+        // UnsupportedDateTimeField.add(long instant, int value) should
+        // throw an UnsupportedOperationException when the duration does
+        // not support the operation, otherwise it delegates to the duration.
+        // First
+        // try it with an UnsupportedDurationField, then a PreciseDurationField.
+        try {
+            fieldOne.add(System.currentTimeMillis(), 100);
+            assertTrue(false);
+        } catch (UnsupportedOperationException e) {
+            assertTrue(true);
+        }
+        try {
+                long currentTime = System.currentTimeMillis();
+            long firstComputation = hoursDuration.add(currentTime, 100);
+            long secondComputation = fieldTwo.add(currentTime,
+                    100);
+            System.out.println(firstComputation);
+            System.out.println(secondComputation);
+            assertEquals(firstComputation,secondComputation);
+        } catch (UnsupportedOperationException e) {
+            assertTrue(false);
+        }
+
+        // UnsupportedDateTimeField.add(long instant, long value) should
+        // throw an UnsupportedOperationException when the duration does
+        // not support the operation, otherwise it delegates to the duration.
+        // First
+        // try it with an UnsupportedDurationField, then a PreciseDurationField.
+        try {
+            fieldOne.add(System.currentTimeMillis(), 1000L);
+            assertTrue(false);
+        } catch (UnsupportedOperationException e) {
+            assertTrue(true);
+        }
+
+        try {
+                long currentTime = System.currentTimeMillis();
+            long firstComputation = hoursDuration.add(currentTime, 1000L);
+            long secondComputation = fieldTwo.add(currentTime,
+                    1000L);
+            assertTrue(firstComputation == secondComputation);
+            assertEquals(firstComputation,secondComputation);
+        } catch (UnsupportedOperationException e) {
+            assertTrue(false);
+        }
+
+        // UnsupportedDateTimeField.getDifference(long minuendInstant,
+        // long subtrahendInstant)
+        // should throw an UnsupportedOperationException when the duration does
+        // not support the operation, otherwise return the result from the
+        // delegated call.
+        try {
+
+            fieldOne.getDifference(100000L, 1000L);
+            assertTrue(false);
+        } catch (UnsupportedOperationException e) {
+            assertTrue(true);
+        }
+
+        try {
+            int firstDifference = hoursDuration.getDifference(100000L, 1000L);
+            int secondDifference = fieldTwo.getDifference(100000L, 1000L);
+            assertEquals(firstDifference,secondDifference);
+        } catch (UnsupportedOperationException e) {
+            assertTrue(false);
+        }
+
+        // UnsupportedDateTimeField.getDifferenceAsLong(long minuendInstant,
+        // long subtrahendInstant)
+        // should throw an UnsupportedOperationException when the duration does
+        // not support the operation, otherwise return the result from the
+        // delegated call.
+        try {
+
+            fieldOne.getDifferenceAsLong(100000L, 1000L);
+            assertTrue(false);
+        } catch (UnsupportedOperationException e) {
+            assertTrue(true);
+        }
+
+        try {
+            long firstDifference = hoursDuration.getDifference(100000L, 1000L);
+            long secondDifference = fieldTwo.getDifference(100000L, 1000L);
+            assertEquals(firstDifference,secondDifference);
+        } catch (UnsupportedOperationException e) {
+            assertTrue(false);
+        }
+    }
+
+    /**
+    * The toString method should return a suitable debug message (not null).
+    * Ensure that the toString method returns a string with length greater than
+    * 0 (and not null)
+    * 
+    */
+    public void testToString() {
+        DateTimeField fieldOne = UnsupportedDateTimeField.getInstance(
+                dateTimeFieldTypeOne, UnsupportedDurationField
+                        .getInstance(weeks));
+
+        String debugMessage = fieldOne.toString();
+        assertNotNull(debugMessage);
+        assertTrue(debugMessage.length() > 0);
+    }
+}

From de71818aeafa7f9e268e7c3db785a4744127c505 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Mon, 2 Apr 2007 14:23:46 +0000
Subject: [PATCH 035/112] Updated tz database to version 2007e.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1205 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                     |  2 +-
 .../src/java/org/joda/time/tz/src/Readme.txt   |  2 +-
 JodaTime/src/java/org/joda/time/tz/src/asia    | 18 ++++++++++++++++--
 .../src/java/org/joda/time/tz/src/northamerica | 10 +++++++---
 4 files changed, 25 insertions(+), 7 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index f01746dae..93a2e4294 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -32,7 +32,7 @@ Source compatible - Yes
 Serialization compatible - Yes
 
 Data compatible - Yes
-  - DateTimeZone data updated to version 2007d
+  - DateTimeZone data updated to version 2007e
 
 Semantic compatible - Yes
 
diff --git a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
index 6b9d6f92b..eb50f5077 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
+++ b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
@@ -1,2 +1,2 @@
 The data files in this directory were obtained from the public tz database,
-http://www.twinsun.com/tz/tz-link.htm, version 2007d.
+http://www.twinsun.com/tz/tz-link.htm, version 2007e.
diff --git a/JodaTime/src/java/org/joda/time/tz/src/asia b/JodaTime/src/java/org/joda/time/tz/src/asia
index c207892a8..45a83bda7 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/asia
+++ b/JodaTime/src/java/org/joda/time/tz/src/asia
@@ -1,4 +1,4 @@
-# @(#)asia	8.10
+# @(#)asia	8.11
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
@@ -1161,6 +1161,14 @@ Zone	Asia/Pyongyang	8:23:00 -	LMT	1890
 
 # Kuwait
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+# From the Arab Times (2007-03-14):
+# The Civil Service Commission (CSC) has approved a proposal forwarded
+# by MP Ahmad Baqer on implementing the daylight saving time (DST) in
+# Kuwait starting from April until the end of Sept this year, reports Al-Anba.
+# <http://www.arabtimesonline.com/arabtimes/kuwait/Viewdet.asp?ID=9950>.
+# From Paul Eggert (2007-03-29):
+# We don't know the details, or whether the approval means it'll happen,
+# so for now we assume no DST.
 Zone	Asia/Kuwait	3:11:56 -	LMT	1950
 			3:00	-	AST
 
@@ -1710,11 +1718,17 @@ Rule	Syria	1993	only	-	Sep	25	0:00	0	-
 Rule	Syria	1994	1996	-	Apr	 1	0:00	1:00	S
 Rule	Syria	1994	2005	-	Oct	 1	0:00	0	-
 Rule	Syria	1997	1998	-	Mar	lastMon	0:00	1:00	S
-Rule	Syria	1999	max	-	Apr	 1	0:00	1:00	S
+Rule	Syria	1999	2006	-	Apr	 1	0:00	1:00	S
 # From Stephen Colebourne (2006-09-18):
 # According to IATA data, Syria will change DST on 21st September [21:00 UTC]
 # this year [only]....  This is probably related to Ramadan, like Egypt.
 Rule	Syria	2006	only	-	Sep	22	0:00	0	-
+# From Paul Eggert (2007-03-29):
+# Today the AP reported "Syria will switch to summertime at midnight Thursday."
+# http://www.iht.com/articles/ap/2007/03/29/africa/ME-GEN-Syria-Time-Change.php
+# For lack of better info, assume the rule changed to "last Friday in March"
+# this year.
+Rule	Syria	2007	max	-	Mar	lastFri	0:00	1:00	S
 Rule	Syria	2007	max	-	Oct	 1	0:00	0	-
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Asia/Damascus	2:25:12 -	LMT	1920	# Dimashq
diff --git a/JodaTime/src/java/org/joda/time/tz/src/northamerica b/JodaTime/src/java/org/joda/time/tz/src/northamerica
index 2f9f390de..a887f2556 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/northamerica
+++ b/JodaTime/src/java/org/joda/time/tz/src/northamerica
@@ -1,4 +1,4 @@
-# @(#)northamerica	8.15
+# @(#)northamerica	8.16
 # <pre>
 
 # also includes Central America and the Caribbean
@@ -2366,11 +2366,15 @@ Zone America/Port-au-Prince -4:49:20 -	LMT	1890
 # published, I have located this authoritative source:
 # http://www.presidencia.gob.hn/noticia.aspx?nId=47
 
+# From Steffen Thorsen (2007-03-30):
+# http://www.laprensahn.com/pais_nota.php?id04962=7386
+# So it seems that Honduras will not enter DST this year....
+
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Hond	1987	1988	-	May	Sun>=1	0:00	1:00	D
 Rule	Hond	1987	1988	-	Sep	lastSun	0:00	0	S
-Rule	Hond	2006	2009	-	May	Sun>=1	0:00	1:00	D
-Rule	Hond	2006	2009	-	Aug	Mon>=1	0:00	0	S
+Rule	Hond	2006	only	-	May	Sun>=1	0:00	1:00	D
+Rule	Hond	2006	only	-	Aug	Mon>=1	0:00	0	S
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone America/Tegucigalpa -5:48:52 -	LMT	1921 Apr
 			-6:00	Hond	C%sT

From 94d10c71847a8f7c56500b0eabe6068c6eacfb9d Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 9 Apr 2007 20:56:18 +0000
Subject: [PATCH 036/112] Javadoc

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1206 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/base/BasePartial.java | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/JodaTime/src/java/org/joda/time/base/BasePartial.java b/JodaTime/src/java/org/joda/time/base/BasePartial.java
index a65bb7b07..497b59b25 100644
--- a/JodaTime/src/java/org/joda/time/base/BasePartial.java
+++ b/JodaTime/src/java/org/joda/time/base/BasePartial.java
@@ -32,7 +32,7 @@
  * data in array and <code>Chronology</code> fields.
  * <p>
  * This class should generally not be used directly by API users.
- * The {@link org.joda.time.ReadablePeriod} interface should be used when different 
+ * The {@link org.joda.time.ReadablePartial} interface should be used when different 
  * kinds of partial objects are to be referenced.
  * <p>
  * BasePartial subclasses may be mutable and not thread-safe.

From 44e2b4553860afcafb8ff969c8f416cda3b62f01 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 9 Apr 2007 21:24:48 +0000
Subject: [PATCH 037/112] More performance enhancements for Local* classes

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1207 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  3 +-
 .../src/java/org/joda/time/LocalDate.java     |  6 +-
 .../src/java/org/joda/time/LocalDateTime.java |  6 +-
 .../src/java/org/joda/time/LocalTime.java     |  6 +-
 .../java/org/joda/time/base/BaseLocal.java    | 62 +++++++++++++++++++
 .../java/org/joda/time/base/BasePeriod.java   | 36 +++++++----
 .../joda/time/TestPeriod_Constructors.java    | 32 +++++++++-
 7 files changed, 127 insertions(+), 24 deletions(-)
 create mode 100644 JodaTime/src/java/org/joda/time/base/BaseLocal.java

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 93a2e4294..24156cbd6 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -20,7 +20,8 @@ of restrictions. If the license causes you problems please contact the mailing l
 
 Enhancements since 1.4
 ----------------------
-- Performance enhancement to comparison of LocalDate, LocalTime and LocalDateTime
+- Performance enhancement for LocalDate, LocalTime and LocalDateTime
+  - equals, compareTo, Period construction
 
 
 Compatibility with 1.4
diff --git a/JodaTime/src/java/org/joda/time/LocalDate.java b/JodaTime/src/java/org/joda/time/LocalDate.java
index b465642b9..35265fb2f 100644
--- a/JodaTime/src/java/org/joda/time/LocalDate.java
+++ b/JodaTime/src/java/org/joda/time/LocalDate.java
@@ -25,7 +25,7 @@
 import java.util.Locale;
 import java.util.Set;
 
-import org.joda.time.base.AbstractPartial;
+import org.joda.time.base.BaseLocal;
 import org.joda.time.chrono.ISOChronology;
 import org.joda.time.convert.ConverterManager;
 import org.joda.time.convert.PartialConverter;
@@ -75,7 +75,7 @@
  * @since 1.3
  */
 public final class LocalDate
-        extends AbstractPartial
+        extends BaseLocal
         implements ReadablePartial, Serializable {
 
     /** Serialization lock */
@@ -490,7 +490,7 @@ public boolean isSupported(DurationFieldType type) {
      * 
      * @return the number of milliseconds since 1970-01-01T00:00:00
      */
-    long getLocalMillis() {
+    protected long getLocalMillis() {
         return iLocalMillis;
     }
 
diff --git a/JodaTime/src/java/org/joda/time/LocalDateTime.java b/JodaTime/src/java/org/joda/time/LocalDateTime.java
index 41629cbce..14e9953a8 100644
--- a/JodaTime/src/java/org/joda/time/LocalDateTime.java
+++ b/JodaTime/src/java/org/joda/time/LocalDateTime.java
@@ -23,7 +23,7 @@
 import java.util.Date;
 import java.util.Locale;
 
-import org.joda.time.base.AbstractPartial;
+import org.joda.time.base.BaseLocal;
 import org.joda.time.chrono.ISOChronology;
 import org.joda.time.convert.ConverterManager;
 import org.joda.time.convert.PartialConverter;
@@ -74,7 +74,7 @@
  * @since 1.3
  */
 public final class LocalDateTime
-        extends AbstractPartial
+        extends BaseLocal
         implements ReadablePartial, Serializable {
 
     /** Serialization lock */
@@ -531,7 +531,7 @@ public boolean isSupported(DurationFieldType type) {
      *
      * @return the number of milliseconds since 1970-01-01T00:00:00
      */
-    long getLocalMillis() {
+    protected long getLocalMillis() {
         return iLocalMillis;
     }
 
diff --git a/JodaTime/src/java/org/joda/time/LocalTime.java b/JodaTime/src/java/org/joda/time/LocalTime.java
index eabd23355..f6cf4b582 100644
--- a/JodaTime/src/java/org/joda/time/LocalTime.java
+++ b/JodaTime/src/java/org/joda/time/LocalTime.java
@@ -25,7 +25,7 @@
 import java.util.Locale;
 import java.util.Set;
 
-import org.joda.time.base.AbstractPartial;
+import org.joda.time.base.BaseLocal;
 import org.joda.time.chrono.ISOChronology;
 import org.joda.time.convert.ConverterManager;
 import org.joda.time.convert.PartialConverter;
@@ -71,7 +71,7 @@
  * @since 1.3
  */
 public final class LocalTime
-        extends AbstractPartial
+        extends BaseLocal
         implements ReadablePartial, Serializable {
 
     /** Serialization lock */
@@ -553,7 +553,7 @@ public boolean isSupported(DurationFieldType type) {
      * 
      * @return the number of milliseconds since 1970-01-01T00:00:00
      */
-    long getLocalMillis() {
+    protected long getLocalMillis() {
         return iLocalMillis;
     }
 
diff --git a/JodaTime/src/java/org/joda/time/base/BaseLocal.java b/JodaTime/src/java/org/joda/time/base/BaseLocal.java
new file mode 100644
index 000000000..70e2ef096
--- /dev/null
+++ b/JodaTime/src/java/org/joda/time/base/BaseLocal.java
@@ -0,0 +1,62 @@
+/*
+ *  Copyright 2001-2007 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.base;
+
+/**
+ * BaseLocal is an abstract implementation of ReadablePartial that
+ * use a local milliseconds internal representation.
+ * <p>
+ * This class should generally not be used directly by API users.
+ * The {@link org.joda.time.ReadablePartial} interface should be used when different 
+ * kinds of partial objects are to be referenced.
+ * <p>
+ * BasePartial subclasses may be mutable and not thread-safe.
+ *
+ * @author Stephen Colebourne
+ * @since 1.5
+ */
+public abstract class BaseLocal
+        extends AbstractPartial {
+
+    /** Serialization version */
+    private static final long serialVersionUID = 276453175381783L;
+
+    //-----------------------------------------------------------------------
+    /**
+     * Constructs a partial with the current time, using ISOChronology in
+     * the default zone to extract the fields.
+     * <p>
+     * The constructor uses the default time zone, resulting in the local time
+     * being initialised. Once the constructor is complete, all further calculations
+     * are performed without reference to a timezone (by switching to UTC).
+     */
+    protected BaseLocal() {
+        super();
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the local milliseconds from the Java epoch
+     * of 1970-01-01T00:00:00 (not fixed to any specific time zone).
+     * <p>
+     * This method is useful in certain circustances for high performance
+     * access to the datetime fields.
+     * 
+     * @return the number of milliseconds since 1970-01-01T00:00:00
+     */
+    protected abstract long getLocalMillis();
+
+}
diff --git a/JodaTime/src/java/org/joda/time/base/BasePeriod.java b/JodaTime/src/java/org/joda/time/base/BasePeriod.java
index 67cdf161e..677071ced 100644
--- a/JodaTime/src/java/org/joda/time/base/BasePeriod.java
+++ b/JodaTime/src/java/org/joda/time/base/BasePeriod.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2006 Stephen Colebourne
+ *  Copyright 2001-2007 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -118,7 +118,6 @@ protected BasePeriod(ReadableInstant startInstant, ReadableInstant endInstant, P
             long startMillis = DateTimeUtils.getInstantMillis(startInstant);
             long endMillis = DateTimeUtils.getInstantMillis(endInstant);
             Chronology chrono = DateTimeUtils.getIntervalChronology(startInstant, endInstant);
-            chrono = DateTimeUtils.getChronology(chrono);
             iType = type;
             iValues = chrono.get(this, startMillis, endMillis);
         }
@@ -147,20 +146,31 @@ protected BasePeriod(ReadablePartial start, ReadablePartial end, PeriodType type
         if (start == null || end == null) {
             throw new IllegalArgumentException("ReadablePartial objects must not be null");
         }
-        if (start.size() != end.size()) {
-            throw new IllegalArgumentException("ReadablePartial objects must have the same set of fields");
-        }
-        for (int i = 0, isize = start.size(); i < isize; i++) {
-            if (start.getFieldType(i) != end.getFieldType(i)) {
+        if (start instanceof BaseLocal && end instanceof BaseLocal && start.getClass() == end.getClass()) {
+            // for performance
+            type = checkPeriodType(type);
+            long startMillis = ((BaseLocal) start).getLocalMillis();
+            long endMillis = ((BaseLocal) end).getLocalMillis();
+            Chronology chrono = start.getChronology();
+            chrono = DateTimeUtils.getChronology(chrono);
+            iType = type;
+            iValues = chrono.get(this, startMillis, endMillis);
+        } else {
+            if (start.size() != end.size()) {
                 throw new IllegalArgumentException("ReadablePartial objects must have the same set of fields");
             }
+            for (int i = 0, isize = start.size(); i < isize; i++) {
+                if (start.getFieldType(i) != end.getFieldType(i)) {
+                    throw new IllegalArgumentException("ReadablePartial objects must have the same set of fields");
+                }
+            }
+            if (DateTimeUtils.isContiguous(start) == false) {
+                throw new IllegalArgumentException("ReadablePartial objects must be contiguous");
+            }
+            iType = checkPeriodType(type);
+            Chronology chrono = DateTimeUtils.getChronology(start.getChronology()).withUTC();
+            iValues = chrono.get(this, chrono.set(start, 0L), chrono.set(end, 0L));
         }
-        if (DateTimeUtils.isContiguous(start) == false) {
-            throw new IllegalArgumentException("ReadablePartial objects must be contiguous");
-        }
-        iType = checkPeriodType(type);
-        Chronology chrono = DateTimeUtils.getChronology(start.getChronology()).withUTC();
-        iValues = chrono.get(this, chrono.set(start, 0L), chrono.set(end, 0L));
     }
 
     /**
diff --git a/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java b/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java
index f8f2f3850..6d2870a95 100644
--- a/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java
+++ b/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2007 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -765,6 +765,21 @@ public void testConstructor_RP_RP2() throws Throwable {
         assertEquals(0, test.getMillis());
     }
 
+    public void testConstructor_RP_RP2Local() throws Throwable {
+        LocalDate dt1 = new LocalDate(2004, 6, 9);
+        LocalDate dt2 = new LocalDate(2005, 5, 17);
+        Period test = new Period(dt1, dt2);
+        assertEquals(PeriodType.standard(), test.getPeriodType());
+        assertEquals(0, test.getYears());
+        assertEquals(11, test.getMonths());
+        assertEquals(1, test.getWeeks());
+        assertEquals(1, test.getDays());
+        assertEquals(0, test.getHours());
+        assertEquals(0, test.getMinutes());
+        assertEquals(0, test.getSeconds());
+        assertEquals(0, test.getMillis());
+    }
+
     public void testConstructor_RP_RP3() throws Throwable {
         YearMonthDay dt1 = null;
         YearMonthDay dt2 = new YearMonthDay(2005, 7, 17);
@@ -850,6 +865,21 @@ public void testConstructor_RP_RP_PeriodType2() throws Throwable {
         assertEquals(0, test.getMillis());
     }
 
+    public void testConstructor_RP_RP_PeriodType2Local() throws Throwable {
+        LocalDate dt1 = new LocalDate(2004, 6, 9);
+        LocalDate dt2 = new LocalDate(2005, 5, 17);
+        Period test = new Period(dt1, dt2, PeriodType.yearMonthDay());
+        assertEquals(PeriodType.yearMonthDay(), test.getPeriodType());
+        assertEquals(0, test.getYears());
+        assertEquals(11, test.getMonths());
+        assertEquals(0, test.getWeeks());
+        assertEquals(8, test.getDays());
+        assertEquals(0, test.getHours());
+        assertEquals(0, test.getMinutes());
+        assertEquals(0, test.getSeconds());
+        assertEquals(0, test.getMillis());
+    }
+
     public void testConstructor_RP_RP_PeriodType3() throws Throwable {
         YearMonthDay dt1 = null;
         YearMonthDay dt2 = new YearMonthDay(2005, 7, 17);

From c099c1155af7289d091a118c2c38bafd4d894bc9 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 13 Apr 2007 23:01:09 +0000
Subject: [PATCH 038/112] Avoid reflection issue reported from Apache Harmony
 bug 1699760

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1208 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                                 | 2 ++
 JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java | 1 +
 2 files changed, 3 insertions(+)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 24156cbd6..08955a270 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -61,6 +61,8 @@ Bug fixes since 1.4
 
 - DateTimeZone did not properly convert fixed offset zones to java.util.TimeZone
 
+- Avoid compilation issue reported by Apache Harmony [1699760]
+
 
 Feedback
 --------
diff --git a/JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java b/JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java
index 424641026..0e0babe20 100644
--- a/JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java
+++ b/JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java
@@ -289,6 +289,7 @@ public void test_other() throws Exception {
         Constructor con = cls.getDeclaredConstructors()[0];
         Object[] params = new Object[] {
             "other", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};
+        con.setAccessible(true);  // for Apache Harmony JVM
         DateTimeFieldType type = (DateTimeFieldType) con.newInstance(params);
         
         assertEquals("other", type.getName());

From eadcce774d6c344fb631543465205b91e7b419a3 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 21 Apr 2007 09:31:29 +0000
Subject: [PATCH 039/112] Ensure conversion to j.u.TimeZone produces best
 matching object possible

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1209 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../java/org/joda/time/tz/FixedDateTimeZone.java  | 11 +++++++++++
 .../src/test/org/joda/time/TestDateTimeZone.java  | 15 +++++++++++++++
 .../org/joda/time/tz/TestFixedDateTimeZone.java   | 14 ++++++++++++--
 3 files changed, 38 insertions(+), 2 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java b/JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java
index 4afe54710..1a418f42f 100644
--- a/JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java
+++ b/JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java
@@ -69,7 +69,18 @@ public long previousTransition(long instant) {
         return instant;
     }
 
+    /**
+     * Override to return the correct timzone instance.
+     * @since 1.5
+     */
     public java.util.TimeZone toTimeZone() {
+        String id = getID();
+        if (id.length() == 6 && (id.startsWith("+") || id.startsWith("-"))) {
+            // standard format offset [+-]hh:mm
+            // our ID is without any prefix, so we need to add the GMT back
+            return java.util.TimeZone.getTimeZone("GMT" + getID());
+        }
+        // unusual offset, so setup a SimpleTimeZone as best we can
         return new java.util.SimpleTimeZone(iWallOffset, getID());
     }
 
diff --git a/JodaTime/src/test/org/joda/time/TestDateTimeZone.java b/JodaTime/src/test/org/joda/time/TestDateTimeZone.java
index 8bc74cbff..2cafc358a 100644
--- a/JodaTime/src/test/org/joda/time/TestDateTimeZone.java
+++ b/JodaTime/src/test/org/joda/time/TestDateTimeZone.java
@@ -316,6 +316,21 @@ public void testForTimeZone_TimeZone() {
         assertEquals("America/New_York", zone.getID());
     }
 
+    public void testTimeZoneConversion() {
+        TimeZone jdkTimeZone = TimeZone.getTimeZone("GMT-10");
+        assertEquals("GMT-10:00", jdkTimeZone.getID());
+        
+        DateTimeZone jodaTimeZone = DateTimeZone.forTimeZone(jdkTimeZone);
+        assertEquals("-10:00", jodaTimeZone.getID());
+        assertEquals(jdkTimeZone.getRawOffset(), jodaTimeZone.getOffset(0L));
+        
+        TimeZone convertedTimeZone = jodaTimeZone.toTimeZone();
+        assertEquals("GMT-10:00", jdkTimeZone.getID());
+        
+        assertEquals(jdkTimeZone.getID(), convertedTimeZone.getID());
+        assertEquals(jdkTimeZone.getRawOffset(), convertedTimeZone.getRawOffset());
+    }
+
     //-----------------------------------------------------------------------
     public void testGetAvailableIDs() {
         assertTrue(DateTimeZone.getAvailableIDs().contains("UTC"));
diff --git a/JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java b/JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java
index 2beb93e56..2447cc357 100644
--- a/JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java
+++ b/JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java
@@ -78,12 +78,22 @@ public void testHashCode() throws Exception {
         assertEquals(false, zone1.hashCode() == zone4.hashCode());
     }
 
-    public void testToTimeZone() throws Exception {
-        FixedDateTimeZone zone = new FixedDateTimeZone("A", "B", 1, 5);
+    public void testToTimeZone1() throws Exception {
+        FixedDateTimeZone zone = new FixedDateTimeZone("+00:01", "+00:01", 60000, 60000);
         java.util.TimeZone tz = zone.toTimeZone();
+        
+        assertEquals(60000, tz.getRawOffset());
+        assertEquals(60000, tz.getOffset(1167638400000L));
+        assertEquals(60000, tz.getOffset(1185951600000L));
+    }
 
+    public void testToTimeZone2() throws Exception {
+        FixedDateTimeZone zone = new FixedDateTimeZone("A", "B", 1, 5);
+        java.util.TimeZone tz = zone.toTimeZone();
+        
         assertEquals(1, tz.getRawOffset());
         assertEquals(1, tz.getOffset(1167638400000L));
         assertEquals(1, tz.getOffset(1185951600000L));
     }
+
 }

From bf41214e765037b612d806d03fba63b417ad4e31 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 21 Apr 2007 09:33:59 +0000
Subject: [PATCH 040/112] Ensure conversion to j.u.TimeZone produces best
 matching object possible

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1210 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 08955a270..97f9cc0ee 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -59,7 +59,7 @@ Bug fixes since 1.4
   This appears to be an IBM JDK issue, not a Joda-Time issue, but we should
   not have ended up in an infinite loop whatever happens
 
-- DateTimeZone did not properly convert fixed offset zones to java.util.TimeZone
+- DateTimeZone did not properly convert fixed offset zones to java.util.TimeZone [1682152]
 
 - Avoid compilation issue reported by Apache Harmony [1699760]
 

From 9b298d5608250e0c72c452d0a2e8664491d9b9be Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 29 Apr 2007 14:40:25 +0000
Subject: [PATCH 041/112] Add LocalDate.toLocalDateTime

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1211 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  3 ++
 .../src/java/org/joda/time/LocalDate.java     | 28 +++++++++++++++
 .../org/joda/time/TestLocalDate_Basics.java   | 34 +++++++++++++++++++
 3 files changed, 65 insertions(+)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 97f9cc0ee..563cbc54b 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -20,6 +20,9 @@ of restrictions. If the license causes you problems please contact the mailing l
 
 Enhancements since 1.4
 ----------------------
+- LocalDate.toLocalDateTime
+  - provide mechanism to create LocalDateTime from LocalDate and LocalTime
+
 - Performance enhancement for LocalDate, LocalTime and LocalDateTime
   - equals, compareTo, Period construction
 
diff --git a/JodaTime/src/java/org/joda/time/LocalDate.java b/JodaTime/src/java/org/joda/time/LocalDate.java
index 35265fb2f..1540782eb 100644
--- a/JodaTime/src/java/org/joda/time/LocalDate.java
+++ b/JodaTime/src/java/org/joda/time/LocalDate.java
@@ -683,6 +683,34 @@ public DateMidnight toDateMidnight(DateTimeZone zone) {
         return new DateMidnight(getYear(), getMonthOfYear(), getDayOfMonth(), chrono);
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Converts this object to a LocalDateTime using a LocalTime to fill in
+     * the missing fields.
+     * <p>
+     * The resulting chronology is determined by the chronology of this
+     * LocalDate. The chronology of the time must also match.
+     * If the time is null an exception is thrown.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
+     *
+     * @param time  the time of day to use, must not be null
+     * @return the LocalDateTime instance
+     * @throws IllegalArgumentException if the time is null
+     * @throws IllegalArgumentException if the chronology of the time does not match
+     * @since 1.5
+     */
+    public LocalDateTime toLocalDateTime(LocalTime time) {
+        if (time == null) {
+            throw new IllegalArgumentException("The time must not be null");
+        }
+        if (getChronology() != time.getChronology()) {
+            throw new IllegalArgumentException("The chronology of the time does not match");
+        }
+        long localMillis = getLocalMillis() + time.getLocalMillis();
+        return new LocalDateTime(localMillis, getChronology());
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Converts this object to a DateTime using a LocalTime to fill in the
diff --git a/JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java b/JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java
index a66ec0567..d235801ef 100644
--- a/JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java
@@ -697,6 +697,40 @@ public void testToDateTimeAtCurrentTime_nullZone() {
         assertEquals(expected, test);
     }
 
+    //-----------------------------------------------------------------------
+    public void testToLocalDateTime_LocalTime() {
+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant
+        LocalTime tod = new LocalTime(12, 13, 14, 15, COPTIC_TOKYO);
+        
+        LocalDateTime test = base.toLocalDateTime(tod);
+        check(base, 2005, 6, 9);
+        LocalDateTime expected = new LocalDateTime(2005, 6, 9, 12, 13, 14, 15, COPTIC_UTC);
+        assertEquals(expected, test);
+    }
+
+    public void testToLocalDateTime_nullLocalTime() {
+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant
+        
+        try {
+            base.toLocalDateTime((LocalTime) null);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expected
+        }
+    }
+
+    public void testToLocalDateTime_wrongChronologyLocalTime() {
+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant
+        LocalTime tod = new LocalTime(12, 13, 14, 15, BUDDHIST_PARIS); // PARIS irrelevant
+        
+        try {
+            base.toLocalDateTime(tod);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expected
+        }
+    }
+
     //-----------------------------------------------------------------------
     public void testToDateTime_LocalTime() {
         LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant

From 27b6a8b0c5f81758b3ccb2e24bd212c4d7e8bf2b Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 29 Apr 2007 14:42:14 +0000
Subject: [PATCH 042/112] Add project URL

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1212 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt | 1 +
 1 file changed, 1 insertion(+)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 563cbc54b..96eb6a268 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -72,3 +72,4 @@ Feedback
 All feedback is welcomed via the joda-interest mailing list.
 
 The Joda team
+http://joda-time.sourceforge.net

From 9eca1233bbf47a63c4109edc340fee400f35a9b6 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 29 Apr 2007 14:59:29 +0000
Subject: [PATCH 043/112] Add AbstractPeriod.toString(PeriodFormatter)

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1213 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                       |  3 +++
 .../java/org/joda/time/base/AbstractPeriod.java  | 16 ++++++++++++++++
 .../test/org/joda/time/TestPeriod_Basics.java    | 16 ++++++++++++++++
 3 files changed, 35 insertions(+)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 96eb6a268..923ca253b 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -26,6 +26,9 @@ Enhancements since 1.4
 - Performance enhancement for LocalDate, LocalTime and LocalDateTime
   - equals, compareTo, Period construction
 
+- Period.toString(PeriodFormatter), MutablePeriod.toString(PeriodFormatter)
+  - allow periods to be directly formatted, as with datetimes
+
 
 Compatibility with 1.4
 ----------------------
diff --git a/JodaTime/src/java/org/joda/time/base/AbstractPeriod.java b/JodaTime/src/java/org/joda/time/base/AbstractPeriod.java
index 41f5d1450..6e975a9c3 100644
--- a/JodaTime/src/java/org/joda/time/base/AbstractPeriod.java
+++ b/JodaTime/src/java/org/joda/time/base/AbstractPeriod.java
@@ -20,6 +20,7 @@
 import org.joda.time.Period;
 import org.joda.time.ReadablePeriod;
 import org.joda.time.format.ISOPeriodFormat;
+import org.joda.time.format.PeriodFormatter;
 
 /**
  * AbstractPeriod provides the common behaviour for period classes.
@@ -203,4 +204,19 @@ public String toString() {
         return ISOPeriodFormat.standard().print(this);
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Uses the specified formatter to convert this period to a String.
+     *
+     * @param formatter  the formatter to use, null means use <code>toString()</code>.
+     * @return the formatted string
+     * @since 1.5
+     */
+    public String toString(PeriodFormatter formatter) {
+        if (formatter == null) {
+            return toString();
+        }
+        return formatter.print(this);
+    }
+
 }
diff --git a/JodaTime/src/test/org/joda/time/TestPeriod_Basics.java b/JodaTime/src/test/org/joda/time/TestPeriod_Basics.java
index 4a4fcd1eb..29b376bf9 100644
--- a/JodaTime/src/test/org/joda/time/TestPeriod_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestPeriod_Basics.java
@@ -27,6 +27,8 @@
 import junit.framework.TestSuite;
 
 import org.joda.time.base.BasePeriod;
+import org.joda.time.format.PeriodFormat;
+import org.joda.time.format.PeriodFormatter;
 
 /**
  * This class is a Junit unit test for Duration.
@@ -474,6 +476,20 @@ public void testToString() {
         assertEquals("PT12.345S", test.toString());
     }
 
+    //-----------------------------------------------------------------------
+    public void testToString_PeriodFormatter() {
+        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);
+        assertEquals("1 year, 2 months, 3 weeks, 4 days, 5 hours, 6 minutes, 7 seconds and 8 milliseconds", test.toString(PeriodFormat.getDefault()));
+        
+        test = new Period(0, 0, 0, 0, 0, 0, 0, 0);
+        assertEquals("0 milliseconds", test.toString(PeriodFormat.getDefault()));
+    }
+
+    public void testToString_nullPeriodFormatter() {
+        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);
+        assertEquals("P1Y2M3W4DT5H6M7.008S", test.toString((PeriodFormatter) null));
+    }
+
     //-----------------------------------------------------------------------
     public void testToPeriod() {
         Period test = new Period(123L);

From dd707bbe25ef0c2cb33855e0e757fa6f8d7f5c6b Mon Sep 17 00:00:00 2001
From: Gregory Joseph <joseph.gregory@gmail.com>
Date: Mon, 7 May 2007 11:11:55 +0000
Subject: [PATCH 044/112] contributing hibernate support for Duration and
 Period

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1214 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/hibernate/project.xml         |  5 ++
 .../AbstractStringBasedJodaType.java          | 88 +++++++++++++++++++
 .../time/contrib/hibernate/DurationType.java  | 33 +++++++
 .../time/contrib/hibernate/PeriodType.java    | 32 +++++++
 .../contrib/hibernate/HibernateTestCase.java  | 24 ++++-
 .../contrib/hibernate/TestDurationType.java   | 59 +++++++++++++
 .../contrib/hibernate/TestPeriodType.java     | 64 ++++++++++++++
 .../testmodel/SomethingThatHappens.hbm.xml    | 10 +++
 .../testmodel/SomethingThatHappens.java       | 41 +++++++++
 .../testmodel/SomethingThatLasts.hbm.xml      | 10 +++
 .../testmodel/SomethingThatLasts.java         | 42 +++++++++
 11 files changed, 404 insertions(+), 4 deletions(-)
 create mode 100644 JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/AbstractStringBasedJodaType.java
 create mode 100644 JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/DurationType.java
 create mode 100644 JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PeriodType.java
 create mode 100644 JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestDurationType.java
 create mode 100644 JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPeriodType.java
 create mode 100644 JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/testmodel/SomethingThatHappens.hbm.xml
 create mode 100644 JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/testmodel/SomethingThatHappens.java
 create mode 100644 JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/testmodel/SomethingThatLasts.hbm.xml
 create mode 100644 JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/testmodel/SomethingThatLasts.java

diff --git a/JodaTimeContrib/hibernate/project.xml b/JodaTimeContrib/hibernate/project.xml
index d5a4691e1..942e4fbf1 100644
--- a/JodaTimeContrib/hibernate/project.xml
+++ b/JodaTimeContrib/hibernate/project.xml
@@ -114,6 +114,11 @@
       <artifactId>cglib</artifactId>
       <version>full-2.0.2</version>
     </dependency>
+    <dependency>
+      <groupId>antlr</groupId>
+      <artifactId>antlr</artifactId>
+      <version>2.7.2</version>
+    </dependency>
     <dependency>
       <groupId>jta</groupId>
       <artifactId>jta</artifactId>
diff --git a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/AbstractStringBasedJodaType.java b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/AbstractStringBasedJodaType.java
new file mode 100644
index 000000000..3bc498b44
--- /dev/null
+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/AbstractStringBasedJodaType.java
@@ -0,0 +1,88 @@
+package org.joda.time.contrib.hibernate;
+
+import org.hibernate.Hibernate;
+import org.hibernate.HibernateException;
+import org.hibernate.usertype.UserType;
+import org.joda.time.Period;
+
+import java.io.Serializable;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Types;
+
+/**
+ * @author gjoseph
+ * @author $Author: $ (last edit)
+ * @version $Revision: $
+ */
+public abstract class AbstractStringBasedJodaType implements UserType {
+    private static final int[] SQL_TYPES = new int[]{Types.VARCHAR};
+
+    public int[] sqlTypes() {
+        return SQL_TYPES;
+    }
+
+    public Object nullSafeGet(ResultSet resultSet, String[] strings, Object object) throws HibernateException, SQLException {
+        String s = (String) Hibernate.STRING.nullSafeGet(resultSet, strings[0]);
+        if (s == null) {
+            return null;
+        }
+
+        return fromNonNullString(s);
+    }
+
+    protected abstract Object fromNonNullString(String s);
+
+    public void nullSafeSet(PreparedStatement preparedStatement, Object value, int index) throws HibernateException, SQLException {
+        if (value == null) {
+            Hibernate.STRING.nullSafeSet(preparedStatement, null, index);
+        } else {
+            Hibernate.STRING.nullSafeSet(preparedStatement, toNonNullString(value), index);
+        }
+    }
+
+    protected abstract String toNonNullString(Object value);
+
+    public boolean equals(Object x, Object y) throws HibernateException {
+        if (x == y) {
+            return true;
+        }
+        if (x == null || y == null) {
+            return false;
+        }
+        // why do this !? .. TODO : maybe we need to check types ?
+        // Period px = (Period) x;
+        // Period py = (Period) y;
+
+        return x.equals(y);
+    }
+
+    public int hashCode(Object object) throws HibernateException {
+        return object.hashCode();
+    }
+
+    public Object deepCopy(Object value) throws HibernateException {
+        if (value == null) {
+            return null;
+        }
+
+        return new Period(value);
+    }
+
+    public boolean isMutable() {
+        return false;
+    }
+
+    public Serializable disassemble(Object value) throws HibernateException {
+        return (Serializable) value;
+    }
+
+    public Object assemble(Serializable cached, Object value) throws HibernateException {
+        return cached;
+    }
+
+    public Object replace(Object original, Object target, Object owner) throws HibernateException {
+        return original;
+    }
+}
diff --git a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/DurationType.java b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/DurationType.java
new file mode 100644
index 000000000..66550c91c
--- /dev/null
+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/DurationType.java
@@ -0,0 +1,33 @@
+package org.joda.time.contrib.hibernate;
+
+import org.joda.time.Duration;
+import org.joda.time.convert.ConverterManager;
+import org.joda.time.convert.DurationConverter;
+
+/**
+ * Converts a org.joda.time.Duration to and from Sql for Hibernate.
+ * It simply stores the value as a varchar (using Duration.toString),
+ * and retrieves it using a DurationConverter.
+ * TODO : are we persisting Chronologies ? is it any relevant ?
+ *
+ * @author gjoseph
+ * @author $Author: $ (last edit)
+ * @version $Revision: $
+ */
+public class DurationType extends AbstractStringBasedJodaType {
+
+    public Class returnedClass() {
+        return Duration.class;
+    }
+
+    protected Object fromNonNullString(String s) {
+        final DurationConverter converter = ConverterManager.getInstance().getDurationConverter(s);
+        final long durationMillis = converter.getDurationMillis(s);
+        return new Duration(durationMillis);
+    }
+
+    protected String toNonNullString(Object value) {
+        return value.toString();
+    }
+
+}
diff --git a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PeriodType.java b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PeriodType.java
new file mode 100644
index 000000000..5e2063623
--- /dev/null
+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PeriodType.java
@@ -0,0 +1,32 @@
+package org.joda.time.contrib.hibernate;
+
+import org.joda.time.Period;
+import org.joda.time.format.PeriodFormat;
+
+/**
+ * Converts a org.joda.time.Period to and from Sql for Hibernate.
+ * It simply stores and retrieves the value as a varchar, using
+ * PeriodFormat.
+ *
+ * TODO : are we persisting Chronologies ? is it any relevant ?
+ * TODO : how are we handling conversions that might end up too long for the column ? 
+ *
+ * @author gjoseph
+ * @author $Author: $ (last edit)
+ * @version $Revision: $
+ */
+public class PeriodType extends AbstractStringBasedJodaType {
+
+    public Class returnedClass() {
+        return Period.class;
+    }
+
+    protected Object fromNonNullString(String s) {
+        return PeriodFormat.getDefault().parsePeriod(s);
+    }
+
+    protected String toNonNullString(Object value) {
+        return PeriodFormat.getDefault().print((Period) value);
+    }
+
+}
diff --git a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/HibernateTestCase.java b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/HibernateTestCase.java
index 10b75451d..c1c1e4ea2 100644
--- a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/HibernateTestCase.java
+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/HibernateTestCase.java
@@ -22,17 +22,21 @@
 import org.hibernate.dialect.HSQLDialect;
 import org.hibernate.tool.hbm2ddl.SchemaUpdate;
 
+import java.sql.Connection;
+import java.sql.Statement;
+
 public abstract class HibernateTestCase extends TestCase
 {
 	private SessionFactory factory;
+    private Configuration cfg;
 
-	protected SessionFactory getSessionFactory()
+    protected SessionFactory getSessionFactory()
 	{
 		if (this.factory == null)
 		{
-			Configuration cfg = new Configuration();
+                    cfg = new Configuration();
 
-			setupConfiguration(cfg);
+                    setupConfiguration(cfg);
 
 			cfg.setProperty("hibernate.connection.driver_class", "org.hsqldb.jdbcDriver");
 			cfg.setProperty("hibernate.connection.url", "jdbc:hsqldb:mem:hbmtest" + getClass().getName());
@@ -51,7 +55,19 @@ protected SessionFactory getSessionFactory()
 
 	protected void tearDown() throws Exception
 	{
-		if (this.factory != null)
+            final String[] dropSQLs = cfg.generateDropSchemaScript(new HSQLDialect());
+            final Connection connection = getSessionFactory().openSession().connection();
+            try {
+                Statement stmt = connection.createStatement();
+                for (int i = 0; i < dropSQLs.length; i++) {
+                    //System.out.println("dropSQLs[i] = " + dropSQLs[i]);
+                    stmt.executeUpdate(dropSQLs[i]);
+                }
+            } finally {
+                connection.close();
+            }
+
+            if (this.factory != null)
 		{
 			this.factory.close();
 			this.factory = null;
diff --git a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestDurationType.java b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestDurationType.java
new file mode 100644
index 000000000..d0effa2d7
--- /dev/null
+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestDurationType.java
@@ -0,0 +1,59 @@
+package org.joda.time.contrib.hibernate;
+
+import junit.framework.Assert;
+import org.hibernate.Session;
+import org.hibernate.cfg.Configuration;
+import org.joda.time.DateTime;
+import org.joda.time.Duration;
+import org.joda.time.Period;
+import org.joda.time.contrib.hibernate.testmodel.SomethingThatLasts;
+
+import java.io.IOException;
+import java.io.File;
+import java.sql.SQLException;
+
+/**
+ * @author gjoseph
+ * @author $Author: $ (last edit)
+ * @version $Revision: $
+ */
+public class TestDurationType extends HibernateTestCase {
+    protected void setupConfiguration(Configuration cfg) {
+        cfg.addFile(new File("src/test/org/joda/time/contrib/hibernate/testmodel/SomethingThatLasts.hbm.xml"));
+    }
+
+    private Duration[] durations = new Duration[]{
+            Duration.ZERO, new Duration(30), Period.seconds(30).toDurationTo(new DateTime()), Period.months(3).toDurationFrom(new DateTime())
+    };
+
+    public void testSimpleStore() throws SQLException, IOException {
+        Session session = getSessionFactory().openSession();
+
+        for (int i = 0; i < durations.length; i++) {
+            SomethingThatLasts thing = new SomethingThatLasts();
+            thing.setId(i);
+            thing.setName("test_" + i);
+            thing.setTheDuration(durations[i]);
+            session.save(thing);
+        }
+
+        session.flush();
+        session.connection().commit();
+        session.close();
+
+        for (int i = 0; i < durations.length; i++) {
+            session = getSessionFactory().openSession();
+            SomethingThatLasts lastingThing = (SomethingThatLasts) session.get(SomethingThatLasts.class, new Long(i));
+
+            Assert.assertNotNull(lastingThing);
+            Assert.assertEquals(i, lastingThing.getId());
+            Assert.assertEquals("test_" + i, lastingThing.getName());
+            Assert.assertEquals(durations[i], lastingThing.getTheDuration());
+
+            session.close();
+        }
+
+        // printSqlQueryResults("SELECT * FROM lasting");
+    }
+
+}
diff --git a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPeriodType.java b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPeriodType.java
new file mode 100644
index 000000000..db41adc75
--- /dev/null
+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPeriodType.java
@@ -0,0 +1,64 @@
+package org.joda.time.contrib.hibernate;
+
+import junit.framework.Assert;
+import org.hibernate.Session;
+import org.hibernate.cfg.Configuration;
+import org.joda.time.Period;
+import org.joda.time.contrib.hibernate.testmodel.SomethingThatHappens;
+
+import java.io.IOException;
+import java.io.File;
+import java.sql.SQLException;
+
+/**
+ * @author gjoseph
+ * @author $Author: $ (last edit)
+ * @version $Revision: $
+ */
+public class TestPeriodType extends HibernateTestCase {
+    protected void setupConfiguration(Configuration cfg) {
+        cfg.addFile(new File("src/test/org/joda/time/contrib/hibernate/testmodel/SomethingThatHappens.hbm.xml"));
+    }
+
+    private Period[] periods = new Period[]{
+            Period.days(2), Period.seconds(30), Period.months(3),
+            new Period(30), new Period(4, 35, 40, 141),
+            new Period(28, 10, 2, 2, 4, 35, 40, 141), new Period(28, 10, 0, 16, 4, 35, 40, 141),
+            // new Period(new DateTime()),
+            // new Period(new YearMonthDay()),
+            // new Period(new YearMonthDay(2005, 12, 25)),
+            // new Period(new YearMonthDay(2005, 0, 25)), new Period(new YearMonthDay(2005, 13, 25)),
+            // new Period(new DateTime(CopticChronology.getInstance())            )
+    };
+
+    public void testSimpleStore() throws SQLException, IOException {
+        Session session = getSessionFactory().openSession();
+
+        for (int i = 0; i < periods.length; i++) {
+            SomethingThatHappens thing = new SomethingThatHappens();
+            thing.setId(i);
+            thing.setName("test_" + i);
+            thing.setThePeriod(periods[i]);
+            session.save(thing);
+        }
+
+        session.flush();
+        session.connection().commit();
+        session.close();
+
+        for (int i = 0; i < periods.length; i++) {
+            session = getSessionFactory().openSession();
+            SomethingThatHappens happeningThing = (SomethingThatHappens) session.get(SomethingThatHappens.class, new Long(i));
+
+            Assert.assertNotNull(happeningThing);
+            Assert.assertEquals(i, happeningThing.getId());
+            Assert.assertEquals("test_" + i, happeningThing.getName());
+            Assert.assertEquals(periods[i], happeningThing.getThePeriod());
+
+            session.close();
+        }
+
+        // printSqlQueryResults("SELECT * FROM happening");
+    }
+
+}
diff --git a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/testmodel/SomethingThatHappens.hbm.xml b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/testmodel/SomethingThatHappens.hbm.xml
new file mode 100644
index 000000000..6e8e21a97
--- /dev/null
+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/testmodel/SomethingThatHappens.hbm.xml
@@ -0,0 +1,10 @@
+<?xml version="1.0"?>
+<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN" "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
+
+<hibernate-mapping package="org.joda.time.contrib.hibernate.testmodel">
+    <class name="SomethingThatHappens" table="happening">
+        <id name="id" type="long"/>
+        <property name="name" type="string"/>
+        <property name="thePeriod" type="org.joda.time.contrib.hibernate.PeriodType"/>
+    </class>
+</hibernate-mapping>
diff --git a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/testmodel/SomethingThatHappens.java b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/testmodel/SomethingThatHappens.java
new file mode 100644
index 000000000..89f495030
--- /dev/null
+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/testmodel/SomethingThatHappens.java
@@ -0,0 +1,41 @@
+package org.joda.time.contrib.hibernate.testmodel;
+
+import org.joda.time.Period;
+
+import java.io.Serializable;
+
+/**
+ *
+ * @author gjoseph
+ * @author $Author: $ (last edit)
+ * @version $Revision: $
+ */
+public class SomethingThatHappens implements Serializable {
+    private long id;
+    private String name;
+    private Period thePeriod;
+
+    public long getId() {
+        return id;
+    }
+
+    public void setId(long id) {
+        this.id = id;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public Period getThePeriod() {
+        return thePeriod;
+    }
+
+    public void setThePeriod(Period thePeriod) {
+        this.thePeriod = thePeriod;
+    }
+}
diff --git a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/testmodel/SomethingThatLasts.hbm.xml b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/testmodel/SomethingThatLasts.hbm.xml
new file mode 100644
index 000000000..ca1599878
--- /dev/null
+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/testmodel/SomethingThatLasts.hbm.xml
@@ -0,0 +1,10 @@
+<?xml version="1.0"?>
+<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN" "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
+
+<hibernate-mapping package="org.joda.time.contrib.hibernate.testmodel">
+    <class name="SomethingThatLasts" table="lasting">
+        <id name="id" type="long"/>
+        <property name="name" type="string"/>
+        <property name="theDuration" type="org.joda.time.contrib.hibernate.DurationType"/>
+    </class>
+</hibernate-mapping>
diff --git a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/testmodel/SomethingThatLasts.java b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/testmodel/SomethingThatLasts.java
new file mode 100644
index 000000000..7a1e663c7
--- /dev/null
+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/testmodel/SomethingThatLasts.java
@@ -0,0 +1,42 @@
+package org.joda.time.contrib.hibernate.testmodel;
+
+import org.joda.time.Duration;
+
+import java.io.Serializable;
+
+/**
+ *
+ * @author gjoseph
+ * @author $Author: $ (last edit)
+ * @version $Revision: $
+ */
+public class SomethingThatLasts implements Serializable {
+    private long id;
+    private String name;
+    private Duration theDuration;
+
+    public long getId() {
+        return id;
+    }
+
+    public void setId(long id) {
+        this.id = id;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public Duration getTheDuration() {
+        return theDuration;
+    }
+
+    public void setTheDuration(Duration theDuration) {
+        this.theDuration = theDuration;
+    }
+
+}

From 3c10f161032b22649a70a6edc3514b2a40f220e7 Mon Sep 17 00:00:00 2001
From: Gregory Joseph <joseph.gregory@gmail.com>
Date: Mon, 7 May 2007 11:16:32 +0000
Subject: [PATCH 045/112] renaming for consistency

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1215 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../hibernate/{DurationType.java => PersistentDuration.java}    | 2 +-
 .../hibernate/{PeriodType.java => PersistentPeriod.java}        | 2 +-
 .../{TestDurationType.java => TestPersistentDuration.java}      | 2 +-
 .../{TestPeriodType.java => TestPersistentPeriod.java}          | 2 +-
 .../contrib/hibernate/testmodel/SomethingThatHappens.hbm.xml    | 2 +-
 .../time/contrib/hibernate/testmodel/SomethingThatLasts.hbm.xml | 2 +-
 6 files changed, 6 insertions(+), 6 deletions(-)
 rename JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/{DurationType.java => PersistentDuration.java} (93%)
 rename JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/{PeriodType.java => PersistentPeriod.java} (92%)
 rename JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/{TestDurationType.java => TestPersistentDuration.java} (96%)
 rename JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/{TestPeriodType.java => TestPersistentPeriod.java} (97%)

diff --git a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/DurationType.java b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentDuration.java
similarity index 93%
rename from JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/DurationType.java
rename to JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentDuration.java
index 66550c91c..a85ebaace 100644
--- a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/DurationType.java
+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentDuration.java
@@ -14,7 +14,7 @@
  * @author $Author: $ (last edit)
  * @version $Revision: $
  */
-public class DurationType extends AbstractStringBasedJodaType {
+public class PersistentDuration extends AbstractStringBasedJodaType {
 
     public Class returnedClass() {
         return Duration.class;
diff --git a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PeriodType.java b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentPeriod.java
similarity index 92%
rename from JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PeriodType.java
rename to JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentPeriod.java
index 5e2063623..4c168c9a1 100644
--- a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PeriodType.java
+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentPeriod.java
@@ -15,7 +15,7 @@
  * @author $Author: $ (last edit)
  * @version $Revision: $
  */
-public class PeriodType extends AbstractStringBasedJodaType {
+public class PersistentPeriod extends AbstractStringBasedJodaType {
 
     public Class returnedClass() {
         return Period.class;
diff --git a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestDurationType.java b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentDuration.java
similarity index 96%
rename from JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestDurationType.java
rename to JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentDuration.java
index d0effa2d7..5224a9f21 100644
--- a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestDurationType.java
+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentDuration.java
@@ -17,7 +17,7 @@
  * @author $Author: $ (last edit)
  * @version $Revision: $
  */
-public class TestDurationType extends HibernateTestCase {
+public class TestPersistentDuration extends HibernateTestCase {
     protected void setupConfiguration(Configuration cfg) {
         cfg.addFile(new File("src/test/org/joda/time/contrib/hibernate/testmodel/SomethingThatLasts.hbm.xml"));
     }
diff --git a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPeriodType.java b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentPeriod.java
similarity index 97%
rename from JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPeriodType.java
rename to JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentPeriod.java
index db41adc75..66e009d6e 100644
--- a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPeriodType.java
+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentPeriod.java
@@ -15,7 +15,7 @@
  * @author $Author: $ (last edit)
  * @version $Revision: $
  */
-public class TestPeriodType extends HibernateTestCase {
+public class TestPersistentPeriod extends HibernateTestCase {
     protected void setupConfiguration(Configuration cfg) {
         cfg.addFile(new File("src/test/org/joda/time/contrib/hibernate/testmodel/SomethingThatHappens.hbm.xml"));
     }
diff --git a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/testmodel/SomethingThatHappens.hbm.xml b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/testmodel/SomethingThatHappens.hbm.xml
index 6e8e21a97..78dd4fcd7 100644
--- a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/testmodel/SomethingThatHappens.hbm.xml
+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/testmodel/SomethingThatHappens.hbm.xml
@@ -5,6 +5,6 @@
     <class name="SomethingThatHappens" table="happening">
         <id name="id" type="long"/>
         <property name="name" type="string"/>
-        <property name="thePeriod" type="org.joda.time.contrib.hibernate.PeriodType"/>
+        <property name="thePeriod" type="org.joda.time.contrib.hibernate.PersistentPeriod"/>
     </class>
 </hibernate-mapping>
diff --git a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/testmodel/SomethingThatLasts.hbm.xml b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/testmodel/SomethingThatLasts.hbm.xml
index ca1599878..7bb6bc68d 100644
--- a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/testmodel/SomethingThatLasts.hbm.xml
+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/testmodel/SomethingThatLasts.hbm.xml
@@ -5,6 +5,6 @@
     <class name="SomethingThatLasts" table="lasting">
         <id name="id" type="long"/>
         <property name="name" type="string"/>
-        <property name="theDuration" type="org.joda.time.contrib.hibernate.DurationType"/>
+        <property name="theDuration" type="org.joda.time.contrib.hibernate.PersistentDuration"/>
     </class>
 </hibernate-mapping>

From 7ad12078177a22d1c3a249577c397cd892841227 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Tue, 8 May 2007 03:18:38 +0000
Subject: [PATCH 046/112] Updated tz database to version 2007f.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1216 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  2 +-
 .../src/java/org/joda/time/tz/src/Readme.txt  |  2 +-
 JodaTime/src/java/org/joda/time/tz/src/africa | 16 +++++++-
 .../src/java/org/joda/time/tz/src/australasia | 20 +++++++---
 .../java/org/joda/time/tz/src/northamerica    | 37 +++++++++++++++----
 5 files changed, 61 insertions(+), 16 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 923ca253b..6c5ed96d3 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -39,7 +39,7 @@ Source compatible - Yes
 Serialization compatible - Yes
 
 Data compatible - Yes
-  - DateTimeZone data updated to version 2007e
+  - DateTimeZone data updated to version 2007f
 
 Semantic compatible - Yes
 
diff --git a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
index eb50f5077..b52adefe8 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
+++ b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
@@ -1,2 +1,2 @@
 The data files in this directory were obtained from the public tz database,
-http://www.twinsun.com/tz/tz-link.htm, version 2007e.
+http://www.twinsun.com/tz/tz-link.htm, version 2007f.
diff --git a/JodaTime/src/java/org/joda/time/tz/src/africa b/JodaTime/src/java/org/joda/time/tz/src/africa
index 1e3687fca..d7db8c52a 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/africa
+++ b/JodaTime/src/java/org/joda/time/tz/src/africa
@@ -1,4 +1,4 @@
-# @(#)africa	8.7
+# @(#)africa	8.8
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
@@ -416,6 +416,20 @@ Zone	Africa/Maputo	2:10:20 -	LMT	1903 Mar
 # Namibia
 # The 1994-04-03 transition is from Shanks & Pottenger.
 # Shanks & Pottenger report no DST after 1998-04; go with IATA.
+
+# From Petronella Sibeene (2007-03-30) in
+# <http://allafrica.com/stories/200703300178.html>:
+# While the entire country changes its time, Katima Mulilo and other
+# settlements in Caprivi unofficially will not because the sun there
+# rises and sets earlier compared to other regions.  Chief of
+# Forecasting Riaan van Zyl explained that the far eastern parts of
+# the country are close to 40 minutes earlier in sunrise than the rest
+# of the country.
+# 
+# From Paul Eggert (2007-03-31):
+# Apparently the Caprivi Strip informally observes Botswana time, but
+# we have no details.  In the meantime people there can use Africa/Gaborone.
+
 # RULE	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Namibia	1994	max	-	Sep	Sun>=1	2:00	1:00	S
 Rule	Namibia	1995	max	-	Apr	Sun>=1	2:00	0	-
diff --git a/JodaTime/src/java/org/joda/time/tz/src/australasia b/JodaTime/src/java/org/joda/time/tz/src/australasia
index c77da8859..fd1d06471 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/australasia
+++ b/JodaTime/src/java/org/joda/time/tz/src/australasia
@@ -1,4 +1,4 @@
-# @(#)australasia	8.6
+# @(#)australasia	8.7
 # <pre>
 
 # This file also includes Pacific islands.
@@ -348,10 +348,14 @@ Rule	NZ	1976	1989	-	Mar	Sun>=1	2:00s	0	S
 Rule	Chatham	1976	1989	-	Mar	Sun>=1	2:45s	0	S
 Rule	NZ	1989	only	-	Oct	Sun>=8	2:00s	1:00	D
 Rule	Chatham	1989	only	-	Oct	Sun>=8	2:45s	1:00	D
-Rule	NZ	1990	max	-	Oct	Sun>=1	2:00s	1:00	D
-Rule	Chatham	1990	max	-	Oct	Sun>=1	2:45s	1:00	D
-Rule	NZ	1990	max	-	Mar	Sun>=15	2:00s	0	S
-Rule	Chatham	1990	max	-	Mar	Sun>=15	2:45s	0	S
+Rule	NZ	1990	2006	-	Oct	Sun>=1	2:00s	1:00	D
+Rule	Chatham	1990	2006	-	Oct	Sun>=1	2:45s	1:00	D
+Rule	NZ	1990	2007	-	Mar	Sun>=15	2:00s	0	S
+Rule	Chatham	1990	2007	-	Mar	Sun>=15	2:45s	0	S
+Rule	NZ	2007	max	-	Sep	lastSun	2:00s	1:00	D
+Rule	Chatham	2007	max	-	Sep	lastSun	2:45s	1:00	D
+Rule	NZ	2008	max	-	Apr	Sun>=1	2:00s	0	S
+Rule	Chatham	2008	max	-	Apr	Sun>=1	2:45s	0	S
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone Pacific/Auckland	11:39:04 -	LMT	1868 Nov  2
 			11:30	NZ	NZ%sT	1946 Jan  1
@@ -1146,6 +1150,12 @@ Zone	Pacific/Wallis	12:15:20 -	LMT	1901
 # transitions at 2:45 local standard time; this confirms that Chatham
 # is always exactly 45 minutes ahead of Auckland.
 
+# From Colin Sharples (2007-04-30):
+# DST will now start on the last Sunday in September, and end on the
+# first Sunday in April.  The changes take effect this year, meaning
+# that DST will begin on 2007-09-30 2008-04-06.
+# http://www.dia.govt.nz/diawebsite.nsf/wpg_URL/Services-Daylight-Saving-Daylight-saving-to-be-extended
+
 ###############################################################################
 
 
diff --git a/JodaTime/src/java/org/joda/time/tz/src/northamerica b/JodaTime/src/java/org/joda/time/tz/src/northamerica
index a887f2556..bb2a624e7 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/northamerica
+++ b/JodaTime/src/java/org/joda/time/tz/src/northamerica
@@ -1,4 +1,4 @@
-# @(#)northamerica	8.16
+# @(#)northamerica	8.17
 # <pre>
 
 # also includes Central America and the Caribbean
@@ -2325,6 +2325,9 @@ Zone America/Guatemala	-6:02:04 -	LMT	1918 Oct 5
 #
 # The reason seems to be an energy crisis.
 
+# From Stephen Colebourne (2007-02-22):
+# Some IATA info: Haiti won't be having DST in 2007.
+
 
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Haiti	1983	only	-	May	8	0:00	1:00	D
@@ -2334,8 +2337,8 @@ Rule	Haiti	1983	1987	-	Oct	lastSun	0:00	0	S
 # Go with IATA.
 Rule	Haiti	1988	1997	-	Apr	Sun>=1	1:00s	1:00	D
 Rule	Haiti	1988	1997	-	Oct	lastSun	1:00s	0	S
-Rule	Haiti	2005	max	-	Apr	Sun>=1	0:00	1:00	D
-Rule	Haiti	2005	max	-	Oct	lastSun	0:00	0	S
+Rule	Haiti	2005	2006	-	Apr	Sun>=1	0:00	1:00	D
+Rule	Haiti	2005	2006	-	Oct	lastSun	0:00	0	S
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone America/Port-au-Prince -4:49:20 -	LMT	1890
 			-4:49	-	PPMT	1917 Jan 24 12:00 # P-a-P MT
@@ -2518,13 +2521,31 @@ Zone America/St_Vincent	-4:04:56 -	LMT	1890		# Kingstown
 			-4:00	-	AST
 
 # Turks and Caicos
-# From Paul Eggert (2006-03-22):
+#
+# From Chris Dunn in
+# <http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=415007>
+# (2007-03-15): In the Turks & Caicos Islands (America/Grand_Turk) the
+# daylight saving dates for time changes have been adjusted to match
+# the recent U.S. change of dates.
+#
+# From Brian Inglis (2007-04-28):
+# http://www.turksandcaicos.tc/calendar/index.htm [2007-04-26]
+# there is an entry for Nov 4 "Daylight Savings Time Ends 2007" and three
+# rows before that there is an out of date entry for Oct:
+# "Eastern Standard Times Begins 2007
+# Clocks are set back one hour at 2:00 a.m. local Daylight Saving Time"
+# indicating that the normal ET rules are followed.
+#
+# From Paul Eggert (2006-05-01):
 # Shanks & Pottenger say they use US DST rules, but IATA SSIM (1991/1998)
-# says they switch at midnight.  Go with IATA SSIM.
+# says they switch at midnight.  Go with Shanks & Pottenger.
+#
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	TC	1979	1986	-	Apr	lastSun	0:00	1:00	D
-Rule	TC	1979	max	-	Oct	lastSun	0:00	0	S
-Rule	TC	1987	max	-	Apr	Sun>=1	0:00	1:00	D
+Rule	TC	1979	1986	-	Apr	lastSun	2:00	1:00	D
+Rule	TC	1979	2006	-	Oct	lastSun	2:00	0	S
+Rule	TC	1987	2006	-	Apr	Sun>=1	2:00	1:00	D
+Rule	TC	2007	max	-	Mar	Sun>=8	2:00	1:00	D
+Rule	TC	2007	max	-	Nov	Sun>=1	2:00	0	S
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone America/Grand_Turk	-4:44:32 -	LMT	1890
 			-5:07:12 -	KMT	1912 Feb    # Kingston Mean Time

From 72466a534fe821afe123199b5a7f1001ff3bdea9 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Tue, 8 May 2007 03:49:47 +0000
Subject: [PATCH 047/112] Bug fix: LenientChronology might incorrectly adjust a
 valid hour field near DST transition

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1217 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  2 +
 JodaTime/project.xml                          |  3 +
 .../joda/time/field/LenientDateTimeField.java |  2 +-
 .../test/org/joda/time/chrono/TestAll.java    |  1 +
 .../time/chrono/TestLenientChronology.java    | 69 +++++++++++++++++++
 5 files changed, 76 insertions(+), 1 deletion(-)
 create mode 100644 JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 6c5ed96d3..dde4e9e07 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -69,6 +69,8 @@ Bug fixes since 1.4
 
 - Avoid compilation issue reported by Apache Harmony [1699760]
 
+- LenientChronology might incorrectly adjust a valid hour field near DST transition
+
 
 Feedback
 --------
diff --git a/JodaTime/project.xml b/JodaTime/project.xml
index f4e14a0cc..58ea2e61b 100644
--- a/JodaTime/project.xml
+++ b/JodaTime/project.xml
@@ -124,6 +124,9 @@
     <contributor>
       <name>Guy Allard</name>
     </contributor>
+    <contributor>
+      <name>Blair Martin</name>
+    </contributor>
     <contributor>
       <name>Fredrik Borgh</name>
     </contributor>
diff --git a/JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java b/JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java
index e6098a0c4..c96498536 100644
--- a/JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java
+++ b/JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java
@@ -65,7 +65,7 @@ public final boolean isLenient() {
      */
     public long set(long instant, int value) {
         int min = getMinimumValue(instant);
-        if (value >= min && value < getMaximumValue(instant)) {
+        if (value >= min && value <= getMaximumValue(instant)) {
             return super.set(instant, value);
         }
         return add(super.set(instant, min), value - min);
diff --git a/JodaTime/src/test/org/joda/time/chrono/TestAll.java b/JodaTime/src/test/org/joda/time/chrono/TestAll.java
index fc1930ebf..0db38e541 100644
--- a/JodaTime/src/test/org/joda/time/chrono/TestAll.java
+++ b/JodaTime/src/test/org/joda/time/chrono/TestAll.java
@@ -46,6 +46,7 @@ public static Test suite() {
         suite.addTest(TestIslamicChronology.suite());
         suite.addTest(TestJulianChronology.suite());
         suite.addTest(TestISOChronology.suite());
+        suite.addTest(TestLenientChronology.suite());
         
         return suite;
     }
diff --git a/JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java b/JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java
new file mode 100644
index 000000000..2538035d2
--- /dev/null
+++ b/JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java
@@ -0,0 +1,69 @@
+/*
+ *  Copyright 2001-2007 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.chrono;
+
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+import org.joda.time.DateTime;
+import org.joda.time.DateTimeZone;
+
+/**
+ *
+ * @author Brian S O'Neill
+ * @author Blair Martin
+ */
+public class TestLenientChronology extends TestCase {
+    public static void main(String[] args) {
+        junit.textui.TestRunner.run(suite());
+    }
+
+    public static TestSuite suite() {
+        return new TestSuite(TestLenientChronology.class);
+    }
+
+    public TestLenientChronology(String name) {
+        super(name);
+    }
+
+    protected void setUp() throws Exception {
+    }
+
+    protected void tearDown() throws Exception {
+    }
+
+    public void testNearDstTransition() {
+        // This is just a regression test. Test case provided by Blair Martin.
+
+        int hour = 23;
+        DateTime dt;
+
+        dt = new DateTime(2006, 10, 29, hour, 0, 0, 0,
+                          ISOChronology.getInstance(DateTimeZone.forID("America/Los_Angeles")));
+        assertEquals(hour, dt.getHourOfDay()); // OK - no LenientChronology
+
+        dt = new DateTime(2006, 10, 29, hour, 0, 0, 0,
+                          LenientChronology.getInstance
+                          (ISOChronology.getInstance(DateTimeZone.forOffsetHours(-8))));
+        assertEquals(hour, dt.getHourOfDay()); // OK - no TZ ID
+
+        dt = new DateTime(2006, 10, 29, hour, 0, 0, 0,
+                          LenientChronology.getInstance
+                          (ISOChronology.getInstance(DateTimeZone.forID("America/Los_Angeles"))));
+
+        assertEquals(hour, dt.getHourOfDay()); // Used to fail - hour was 22
+    }
+}

From 9b01b9e8b42e8f33f02caf91110fe6459e830fcb Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 20 May 2007 10:02:54 +0000
Subject: [PATCH 048/112] Fix bug where some time zones (Australia) use same
 abbreviated zone name for summer and winter bug 1716305

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1218 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |   7 +-
 .../org/joda/time/tz/DateTimeZoneBuilder.java | 163 +++++++++++++-----
 .../org/joda/time/tz/DefaultNameProvider.java |  10 +-
 .../org/joda/time/tz/ZoneInfoCompiler.java    |   4 +-
 .../test/org/joda/time/TestDateTimeZone.java  |  40 +++++
 .../test/org/joda/time/tz/TestBuilder.java    |   6 +-
 6 files changed, 177 insertions(+), 53 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index dde4e9e07..99873afc9 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -38,7 +38,9 @@ Source compatible - Yes
 
 Serialization compatible - Yes
 
-Data compatible - Yes
+Data compatible - Yes, except
+  - Format of time zone data files changed slightly to fix bug
+    This mainly affects Australia
   - DateTimeZone data updated to version 2007f
 
 Semantic compatible - Yes
@@ -67,6 +69,9 @@ Bug fixes since 1.4
 
 - DateTimeZone did not properly convert fixed offset zones to java.util.TimeZone [1682152]
 
+- DateTimeZone names were incorrect when abbreviation is the same in winter
+  and summer, notably in Australia [1716305]
+
 - Avoid compilation issue reported by Apache Harmony [1699760]
 
 - LenientChronology might incorrectly adjust a valid hour field near DST transition
diff --git a/JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java b/JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java
index 934972034..2e9d425c2 100644
--- a/JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java
+++ b/JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java
@@ -22,15 +22,20 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
+import java.text.DateFormatSymbols;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.HashSet;
 import java.util.Iterator;
+import java.util.Locale;
 import java.util.Set;
 
 import org.joda.time.Chronology;
+import org.joda.time.DateTime;
 import org.joda.time.DateTimeUtils;
 import org.joda.time.DateTimeZone;
+import org.joda.time.Period;
+import org.joda.time.PeriodType;
 import org.joda.time.chrono.ISOChronology;
 
 /**
@@ -320,9 +325,10 @@ private RuleSet getLastRuleSet() {
     /**
      * Processes all the rules and builds a DateTimeZone.
      *
-     * @param id time zone id to assign
+     * @param id  time zone id to assign
+     * @param outputID  true if the zone id should be output
      */
-    public DateTimeZone toDateTimeZone(String id) {
+    public DateTimeZone toDateTimeZone(String id, boolean outputID) {
         if (id == null) {
             throw new IllegalArgumentException();
         }
@@ -386,7 +392,7 @@ public DateTimeZone toDateTimeZone(String id) {
                                   tr.getWallOffset(), tr.getStandardOffset());
         }
 
-        PrecalculatedZone zone = new PrecalculatedZone(id, transitions, tailZone);
+        PrecalculatedZone zone = PrecalculatedZone.create(id, outputID, transitions, tailZone);
         if (zone.isCachable()) {
             return CachedDateTimeZone.forZone(zone);
         }
@@ -431,11 +437,11 @@ private boolean addTransition(ArrayList transitions, Transition tr) {
      *
      * @param out output stream to receive encoded DateTimeZone.
      */
-    public void writeTo(OutputStream out) throws IOException {
+    public void writeTo(String zoneID, OutputStream out) throws IOException {
         if (out instanceof DataOutput) {
-            writeTo((DataOutput)out);
+            writeTo(zoneID, (DataOutput)out);
         } else {
-            writeTo((DataOutput)new DataOutputStream(out));
+            writeTo(zoneID, (DataOutput)new DataOutputStream(out));
         }
     }
 
@@ -445,9 +451,9 @@ public void writeTo(OutputStream out) throws IOException {
      *
      * @param out output stream to receive encoded DateTimeZone.
      */
-    public void writeTo(DataOutput out) throws IOException {
-        // The zone id is not written out, so the empty string is okay.
-        DateTimeZone zone = toDateTimeZone("");
+    public void writeTo(String zoneID, DataOutput out) throws IOException {
+        // pass false so zone id is not written out
+        DateTimeZone zone = toDateTimeZone(zoneID, false);
 
         if (zone instanceof FixedDateTimeZone) {
             out.writeByte('F'); // 'F' for fixed
@@ -1152,9 +1158,9 @@ static DSTZone readFrom(DataInput in, String id) throws IOException {
                                Recurrence.readFrom(in), Recurrence.readFrom(in));
         }
 
-        private final int iStandardOffset;
-        private final Recurrence iStartRecurrence;
-        private final Recurrence iEndRecurrence;
+        final int iStandardOffset;
+        final Recurrence iStartRecurrence;
+        final Recurrence iEndRecurrence;
 
         DSTZone(String id, int standardOffset,
                 Recurrence startRecurrence, Recurrence endRecurrence) {
@@ -1361,43 +1367,24 @@ static PrecalculatedZone readFrom(DataInput in, String id) throws IOException {
                 (id, transitions, wallOffsets, standardOffsets, nameKeys, tailZone);
         }
 
-        // All array fields have the same length.
-
-        private final long[] iTransitions;
-
-        private final int[] iWallOffsets;
-        private final int[] iStandardOffsets;
-        private final String[] iNameKeys;
-
-        private final DSTZone iTailZone;
-
-        PrecalculatedZone(String id, long[] transitions, int[] wallOffsets,
-                          int[] standardOffsets, String[] nameKeys, DSTZone tailZone)
-        {
-            super(id);
-            iTransitions = transitions;
-            iWallOffsets = wallOffsets;
-            iStandardOffsets = standardOffsets;
-            iNameKeys = nameKeys;
-            iTailZone = tailZone;
-        }
-
         /**
-         * @param tailZone optional zone for getting info beyond precalculated
-         * tables.
+         * Factory to create instance from builder.
+         * 
+         * @param id  the zone id
+         * @param outputID  true if the zone id should be output
+         * @param transitions  the list of Transition objects
+         * @param tailZone  optional zone for getting info beyond precalculated tables
          */
-        PrecalculatedZone(String id, ArrayList transitions, DSTZone tailZone) {
-            super(id);
-
+        static PrecalculatedZone create(String id, boolean outputID, ArrayList transitions, DSTZone tailZone) {
             int size = transitions.size();
             if (size == 0) {
                 throw new IllegalArgumentException();
             }
 
-            iTransitions = new long[size];
-            iWallOffsets = new int[size];
-            iStandardOffsets = new int[size];
-            iNameKeys = new String[size];
+            long[] trans = new long[size];
+            int[] wallOffsets = new int[size];
+            int[] standardOffsets = new int[size];
+            String[] nameKeys = new String[size];
 
             Transition last = null;
             for (int i=0; i<size; i++) {
@@ -1407,14 +1394,98 @@ static PrecalculatedZone readFrom(DataInput in, String id) throws IOException {
                     throw new IllegalArgumentException(id);
                 }
 
-                iTransitions[i] = tr.getMillis();
-                iWallOffsets[i] = tr.getWallOffset();
-                iStandardOffsets[i] = tr.getStandardOffset();
-                iNameKeys[i] = tr.getNameKey();
+                trans[i] = tr.getMillis();
+                wallOffsets[i] = tr.getWallOffset();
+                standardOffsets[i] = tr.getStandardOffset();
+                nameKeys[i] = tr.getNameKey();
 
                 last = tr;
             }
 
+            // Some timezones (Australia) have the same name key for
+            // summer and winter which messes everything up. Fix it here.
+            String[] zoneNameData = new String[5];
+            String[][] zoneStrings = new DateFormatSymbols(Locale.ENGLISH).getZoneStrings();
+            for (int j = 0; j < zoneStrings.length; j++) {
+                String[] set = zoneStrings[j];
+                if (set != null && set.length == 5 && id.equals(set[0])) {
+                    zoneNameData = set;
+                }
+            }
+            for (int i = 0; i < nameKeys.length - 1; i++) {
+                String curNameKey = nameKeys[i];
+                String nextNameKey = nameKeys[i + 1];
+                long curOffset = wallOffsets[i];
+                long nextOffset = wallOffsets[i + 1];
+                long curStdOffset = standardOffsets[i];
+                long nextStdOffset = standardOffsets[i + 1];
+                Period p = new Period(trans[i], trans[i + 1], PeriodType.yearMonthDay());
+                if (curOffset != nextOffset &&
+                        curStdOffset == nextStdOffset &&
+                        curNameKey.equals(nextNameKey) &&
+                        p.getYears() == 0 && p.getMonths() > 4 && p.getMonths() < 8 &&
+                        curNameKey.equals(zoneNameData[2]) &&
+                        curNameKey.equals(zoneNameData[4])) {
+                    
+                    System.out.println("Fixing duplicate name key - " + nextNameKey);
+                    System.out.println("     - " + new DateTime(trans[i]) + " - " + new DateTime(trans[i + 1]));
+                    if (curOffset > nextOffset) {
+                        nameKeys[i] = (curNameKey + "-Summer").intern();
+                    } else if (curOffset < nextOffset) {
+                        nameKeys[i + 1] = (nextNameKey + "-Summer").intern();
+                        i++;
+                    }
+                }
+            }
+            if (tailZone != null) {
+                if (tailZone.iStartRecurrence.getNameKey().equals(tailZone.iEndRecurrence.getNameKey())) {
+                    System.out.println("Fixing duplicate recurrent name key - " + tailZone.iStartRecurrence.getNameKey());
+                    if (tailZone.iStartRecurrence.getSaveMillis() > 0) {
+                        Recurrence r = new Recurrence(
+                            tailZone.iStartRecurrence.iOfYear,
+                            tailZone.iStartRecurrence.iNameKey + "-Summer",
+                            tailZone.iStartRecurrence.iSaveMillis);
+                        tailZone = new DSTZone(
+                            tailZone.getID(),
+                            tailZone.iStandardOffset,
+                            r, tailZone.iEndRecurrence);
+                    } else {
+                        Recurrence r = new Recurrence(
+                            tailZone.iEndRecurrence.iOfYear,
+                            tailZone.iEndRecurrence.iNameKey + "-Summer",
+                            tailZone.iEndRecurrence.iSaveMillis);
+                        tailZone = new DSTZone(
+                            tailZone.getID(),
+                            tailZone.iStandardOffset,
+                            tailZone.iEndRecurrence, r);
+                    }
+                }
+            }
+            
+            return new PrecalculatedZone((outputID ? id : ""), trans, wallOffsets, standardOffsets, nameKeys, tailZone);
+        }
+
+        // All array fields have the same length.
+
+        private final long[] iTransitions;
+
+        private final int[] iWallOffsets;
+        private final int[] iStandardOffsets;
+        private final String[] iNameKeys;
+
+        private final DSTZone iTailZone;
+
+        /**
+         * Constructor used ONLY for valid input, loaded via static methods.
+         */
+        private PrecalculatedZone(String id, long[] transitions, int[] wallOffsets,
+                          int[] standardOffsets, String[] nameKeys, DSTZone tailZone)
+        {
+            super(id);
+            iTransitions = transitions;
+            iWallOffsets = wallOffsets;
+            iStandardOffsets = standardOffsets;
+            iNameKeys = nameKeys;
             iTailZone = tailZone;
         }
 
diff --git a/JodaTime/src/java/org/joda/time/tz/DefaultNameProvider.java b/JodaTime/src/java/org/joda/time/tz/DefaultNameProvider.java
index fb116566a..dba50fffb 100644
--- a/JodaTime/src/java/org/joda/time/tz/DefaultNameProvider.java
+++ b/JodaTime/src/java/org/joda/time/tz/DefaultNameProvider.java
@@ -63,7 +63,15 @@ public String getName(Locale locale, String id, String nameKey) {
                 String[] set = zoneStrings[i];
                 if (set != null && set.length == 5 && id.equals(set[0])) {
                     byNameKeyCache.put(set[2], new String[] {set[2], set[1]});
-                    byNameKeyCache.put(set[4], new String[] {set[4], set[3]});
+                    // need to handle case where summer and winter have the same
+                    // abbreviation, such as EST in Australia [1716305]
+                    // we handle this by appending "-Summer", cf ZoneInfoCompiler
+                    if (set[2].equals(set[4])) {
+                        byNameKeyCache.put(set[4] + "-Summer", new String[] {set[4], set[3]});
+                    } else {
+                        byNameKeyCache.put(set[4], new String[] {set[4], set[3]});
+                    }
+                    break;
                 }
             }
         }
diff --git a/JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java b/JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java
index e67ca93e0..6f25917e6 100644
--- a/JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java
+++ b/JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java
@@ -371,7 +371,7 @@ public Map compile(File outputDir, File[] sources) throws IOException {
             Zone zone = (Zone)iZones.get(i);
             DateTimeZoneBuilder builder = new DateTimeZoneBuilder();
             zone.addToBuilder(builder, iRuleSets);
-            final DateTimeZone original = builder.toDateTimeZone(zone.iName);
+            final DateTimeZone original = builder.toDateTimeZone(zone.iName, true);
             DateTimeZone tz = original;
             if (test(tz.getID(), tz)) {
                 map.put(tz.getID(), tz);
@@ -382,7 +382,7 @@ public Map compile(File outputDir, File[] sources) throws IOException {
                         file.getParentFile().mkdirs();
                     }
                     OutputStream out = new FileOutputStream(file);
-                    builder.writeTo(out);
+                    builder.writeTo(zone.iName, out);
                     out.close();
 
                     // Test if it can be read back.
diff --git a/JodaTime/src/test/org/joda/time/TestDateTimeZone.java b/JodaTime/src/test/org/joda/time/TestDateTimeZone.java
index 2cafc358a..4b70225a4 100644
--- a/JodaTime/src/test/org/joda/time/TestDateTimeZone.java
+++ b/JodaTime/src/test/org/joda/time/TestDateTimeZone.java
@@ -827,4 +827,44 @@ public void testCommentParse() throws Exception {
         assertEquals(1115313015000L, dt.getMillis());
     }
 
+    public void testPatchedNameKeysLondon() throws Exception {
+        // the tz database does not have unique name keys [1716305]
+        DateTimeZone zone = DateTimeZone.forID("Europe/London");
+        
+        DateTime now = new DateTime();
+        String str1 = zone.getName(now.getMillis());
+        String str2 = zone.getName(now.plusMonths(6).getMillis());
+        assertEquals(false, str1.equals(str2));
+    }
+
+    public void testPatchedNameKeysSydney() throws Exception {
+        // the tz database does not have unique name keys [1716305]
+        DateTimeZone zone = DateTimeZone.forID("Australia/Sydney");
+        
+        DateTime now = new DateTime();
+        String str1 = zone.getName(now.getMillis());
+        String str2 = zone.getName(now.plusMonths(6).getMillis());
+        assertEquals(false, str1.equals(str2));
+    }
+
+    public void testPatchedNameKeysSydneyHistoric() throws Exception {
+        // the tz database does not have unique name keys [1716305]
+        DateTimeZone zone = DateTimeZone.forID("Australia/Sydney");
+        
+        DateTime now = new DateTime(1996, 1, 1, 0, 0, 0, 0);
+        String str1 = zone.getName(now.getMillis());
+        String str2 = zone.getName(now.plusMonths(6).getMillis());
+        assertEquals(false, str1.equals(str2));
+    }
+
+    public void testPatchedNameKeysGazaHistoric() throws Exception {
+        // the tz database does not have unique name keys [1716305]
+        DateTimeZone zone = DateTimeZone.forID("Asia/Gaza");
+        
+        DateTime now = new DateTime(1944, 1, 1, 0, 0, 0, 0);
+        String str1 = zone.getName(now.getMillis());
+        String str2 = zone.getName(now.plusMonths(6).getMillis());
+        assertEquals(false, str1.equals(str2));
+    }
+
 }
diff --git a/JodaTime/src/test/org/joda/time/tz/TestBuilder.java b/JodaTime/src/test/org/joda/time/tz/TestBuilder.java
index c5bd9243b..e5b9270d2 100644
--- a/JodaTime/src/test/org/joda/time/tz/TestBuilder.java
+++ b/JodaTime/src/test/org/joda/time/tz/TestBuilder.java
@@ -188,7 +188,7 @@ static DateTimeZoneBuilder buildAmericaLosAngelesBuilder() {
     }
 
     static DateTimeZone buildAmericaLosAngeles() {
-        return buildAmericaLosAngelesBuilder().toDateTimeZone("America/Los_Angeles");
+        return buildAmericaLosAngelesBuilder().toDateTimeZone("America/Los_Angeles", true);
     }
 
     private DateTimeZone originalDateTimeZone = null;
@@ -287,7 +287,7 @@ static DateTimeZone testSerialization(DateTimeZoneBuilder builder, String id)
         throws IOException
     {
         ByteArrayOutputStream out = new ByteArrayOutputStream();
-        builder.writeTo(out);
+        builder.writeTo("America/Los_Angeles", out);
         ByteArrayInputStream in = new ByteArrayInputStream(out.toByteArray());
         DateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);
         assertEquals(id, tz.getID());
@@ -298,7 +298,7 @@ public void testFixed() throws IOException {
         DateTimeZoneBuilder builder = new DateTimeZoneBuilder()
             .setStandardOffset(3600000)
             .setFixedSavings("LMT", 0);
-        DateTimeZone tz = builder.toDateTimeZone("Test");
+        DateTimeZone tz = builder.toDateTimeZone("Test", true);
 
         for (int i=0; i<2; i++) {
             assertEquals("Test", tz.getID());

From ddd50d2773c7126e0c3249c99bbed04cf7544b34 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 26 May 2007 12:45:40 +0000
Subject: [PATCH 049/112] Fix DateTimeFormat javadoc to explain time zone
 parsing restriction better [OpenDiscussion 1721909]

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1219 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                          |  2 ++
 .../java/org/joda/time/format/DateTimeFormat.java   | 13 ++++++++-----
 2 files changed, 10 insertions(+), 5 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 99873afc9..f3ba63b3e 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -76,6 +76,8 @@ Bug fixes since 1.4
 
 - LenientChronology might incorrectly adjust a valid hour field near DST transition
 
+- DateTimeFormat javadoc now explains time zone parsing restriction better [OpenDiscussion 1721909]
+
 
 Feedback
 --------
diff --git a/JodaTime/src/java/org/joda/time/format/DateTimeFormat.java b/JodaTime/src/java/org/joda/time/format/DateTimeFormat.java
index 60e9e56c5..cd2a0c83a 100644
--- a/JodaTime/src/java/org/joda/time/format/DateTimeFormat.java
+++ b/JodaTime/src/java/org/joda/time/format/DateTimeFormat.java
@@ -38,7 +38,7 @@
  * This class provides two types of factory:
  * <ul>
  * <li>{@link #forPattern(String) Pattern} provides a DateTimeFormatter based on
- * a pattern string that is compatible with the JDK date patterns.
+ * a pattern string that is mostly compatible with the JDK date patterns.
  * <li>{@link #forStyle(String) Style} provides a DateTimeFormatter based on a
  * two character style, representing short, medium, long and full.
  * </ul>
@@ -50,9 +50,9 @@
  * String str = fmt.print(dt);
  * </pre>
  *
- * The pattern syntax is compatible with java.text.SimpleDateFormat, but a few
- * more symbols are also supported. All ASCII letters are reserved as pattern
- * letters, which are defined as the following:
+ * The pattern syntax is mostly compatible with java.text.SimpleDateFormat -
+ * time zone names cannot be parsed and a few more symbols are supported.
+ * All ASCII letters are reserved as pattern letters, which are defined as follows:
  * <blockquote>
  * <pre>
  * Symbol  Meaning                      Presentation  Examples
@@ -107,6 +107,8 @@
  * <strong>Zone</strong>: 'Z' outputs offset without a colon, 'ZZ' outputs
  * the offset with a colon, 'ZZZ' or more outputs the zone id.
  * <p>
+ * <strong>Zone names</strong>: Time zone names ('z') cannot be parsed.
+ * <p>
  * Any characters in the pattern that are not in the ranges of ['a'..'z']
  * and ['A'..'Z'] will be treated as quoted text. For instance, characters
  * like ':', '.', ' ', '#' and '?' will appear in the resulting time text
@@ -149,7 +151,8 @@
     //-----------------------------------------------------------------------
     /**
      * Factory to create a formatter from a pattern string.
-     * The pattern string is described above, and is similar to SimpleDateFormat.
+     * The pattern string is described above in the class level javadoc.
+     * It is very similar to SimpleDateFormat patterns.
      * <p>
      * The format may contain locale specific output, and this will change as
      * you change the locale of the formatter.

From f19323cdf20cbe78d3622c97f62d689a857d7e9d Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 26 May 2007 13:03:29 +0000
Subject: [PATCH 050/112] Fix mailing list links

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1220 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/project.xml | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/JodaTime/project.xml b/JodaTime/project.xml
index 58ea2e61b..66c8a8da4 100644
--- a/JodaTime/project.xml
+++ b/JodaTime/project.xml
@@ -93,9 +93,9 @@
   <mailingLists>
     <mailingList>
       <name>Joda Interest list</name>
-      <subscribe>http://sourceforge.net/mail/?group_id=47291</subscribe>
-      <unsubscribe>http://sourceforge.net/mail/?group_id=47291</unsubscribe>
-      <archive>http://sourceforge.net/mailarchive/forum.php?forum_id=8530</archive>
+      <subscribe>https://lists.sourceforge.net/lists/listinfo/joda-interest</subscribe>
+      <unsubscribe>https://lists.sourceforge.net/lists/listinfo/joda-interest</unsubscribe>
+      <archive>http://sourceforge.net/mailarchive/forum.php?forum_name=joda-interest</archive>
     </mailingList>
   </mailingLists>
 

From 7f964c8ee8755e0afccb6e7956ba433dbcfae6e2 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 26 May 2007 13:04:54 +0000
Subject: [PATCH 051/112] Remove US/Canada DST change note

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1221 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/index.xml | 4 ----
 1 file changed, 4 deletions(-)

diff --git a/JodaTime/xdocs/index.xml b/JodaTime/xdocs/index.xml
index d0e6a3a02..2a48215e4 100644
--- a/JodaTime/xdocs/index.xml
+++ b/JodaTime/xdocs/index.xml
@@ -21,10 +21,6 @@ included, and we welcome further additions. Supporting classes include time zone
 duration, format and parsing.
 </p>
 <p style="color:red; margin-left:20px;">
-The US, Canada and related countries are changing Daylight Savings Time rules in 2007.
-<a href="faq.html#newzonerules">More information</a>.
-</p>
-<p style="color:red; margin-left:20px;">
 JSR 310 has now been launched. It aims to build upon Joda-Time and include it in the JDK.
 <a href="https://jsr-310.dev.java.net/">More information</a>.
 </p>

From 79ce64e7ea3ef567fb832974943e20317e2f3baf Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 26 May 2007 13:28:56 +0000
Subject: [PATCH 052/112] Remove system.out and formatting

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1222 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../field/TestUnsupportedDateTimeField.java    | 18 +++++-------------
 1 file changed, 5 insertions(+), 13 deletions(-)

diff --git a/JodaTime/src/test/org/joda/time/field/TestUnsupportedDateTimeField.java b/JodaTime/src/test/org/joda/time/field/TestUnsupportedDateTimeField.java
index 3de6acd58..3398cd5ed 100644
--- a/JodaTime/src/test/org/joda/time/field/TestUnsupportedDateTimeField.java
+++ b/JodaTime/src/test/org/joda/time/field/TestUnsupportedDateTimeField.java
@@ -17,18 +17,14 @@
 
 import java.util.Locale;
 
-import org.joda.time.Chronology;
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
 import org.joda.time.DateTimeField;
 import org.joda.time.DateTimeFieldType;
-import org.joda.time.DateTimeZone;
 import org.joda.time.DurationFieldType;
 import org.joda.time.LocalTime;
 import org.joda.time.ReadablePartial;
-import org.joda.time.chrono.GregorianChronology;
-import org.joda.time.chrono.IslamicChronology;
-
-import junit.framework.TestCase;
-import junit.framework.TestSuite;
 
 /**
  * This class is a JUnit test to test only the UnsupportedDateTimeField class.
@@ -570,12 +566,10 @@ public void testDelegatedMethods() {
             assertTrue(true);
         }
         try {
-                long currentTime = System.currentTimeMillis();
+            long currentTime = System.currentTimeMillis();
             long firstComputation = hoursDuration.add(currentTime, 100);
             long secondComputation = fieldTwo.add(currentTime,
                     100);
-            System.out.println(firstComputation);
-            System.out.println(secondComputation);
             assertEquals(firstComputation,secondComputation);
         } catch (UnsupportedOperationException e) {
             assertTrue(false);
@@ -594,7 +588,7 @@ public void testDelegatedMethods() {
         }
 
         try {
-                long currentTime = System.currentTimeMillis();
+            long currentTime = System.currentTimeMillis();
             long firstComputation = hoursDuration.add(currentTime, 1000L);
             long secondComputation = fieldTwo.add(currentTime,
                     1000L);
@@ -610,7 +604,6 @@ public void testDelegatedMethods() {
         // not support the operation, otherwise return the result from the
         // delegated call.
         try {
-
             fieldOne.getDifference(100000L, 1000L);
             assertTrue(false);
         } catch (UnsupportedOperationException e) {
@@ -631,7 +624,6 @@ public void testDelegatedMethods() {
         // not support the operation, otherwise return the result from the
         // delegated call.
         try {
-
             fieldOne.getDifferenceAsLong(100000L, 1000L);
             assertTrue(false);
         } catch (UnsupportedOperationException e) {

From 65969a12bdec1c325df033e302b40f33bba8cc0d Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 26 May 2007 13:31:13 +0000
Subject: [PATCH 053/112] Fix bug where some time zones (S.Africa) use same
 abbreviated zone name for summer and winter bug 1716305

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1223 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../test/org/joda/time/TestDateTimeZone.java  | 26 +++++++++----------
 1 file changed, 13 insertions(+), 13 deletions(-)

diff --git a/JodaTime/src/test/org/joda/time/TestDateTimeZone.java b/JodaTime/src/test/org/joda/time/TestDateTimeZone.java
index 4b70225a4..c0683a617 100644
--- a/JodaTime/src/test/org/joda/time/TestDateTimeZone.java
+++ b/JodaTime/src/test/org/joda/time/TestDateTimeZone.java
@@ -84,17 +84,17 @@
     private long TEST_TIME_WINTER =
             (y2002days + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
             
-    // 2002-04-05 Fri
-    private long TEST_TIME1 =
-            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY
-            + 12L * DateTimeConstants.MILLIS_PER_HOUR
-            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;
-        
-    // 2003-05-06 Tue
-    private long TEST_TIME2 =
-            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
-            + 14L * DateTimeConstants.MILLIS_PER_HOUR
-            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;
+//    // 2002-04-05 Fri
+//    private long TEST_TIME1 =
+//            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY
+//            + 12L * DateTimeConstants.MILLIS_PER_HOUR
+//            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;
+//        
+//    // 2003-05-06 Tue
+//    private long TEST_TIME2 =
+//            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY
+//            + 14L * DateTimeConstants.MILLIS_PER_HOUR
+//            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;
     
     private static final Policy RESTRICT;
     private static final Policy ALLOW;
@@ -859,9 +859,9 @@ public void testPatchedNameKeysSydneyHistoric() throws Exception {
 
     public void testPatchedNameKeysGazaHistoric() throws Exception {
         // the tz database does not have unique name keys [1716305]
-        DateTimeZone zone = DateTimeZone.forID("Asia/Gaza");
+        DateTimeZone zone = DateTimeZone.forID("Africa/Johannesburg");
         
-        DateTime now = new DateTime(1944, 1, 1, 0, 0, 0, 0);
+        DateTime now = new DateTime(1943, 1, 1, 0, 0, 0, 0);
         String str1 = zone.getName(now.getMillis());
         String str2 = zone.getName(now.plusMonths(6).getMillis());
         assertEquals(false, str1.equals(str2));

From 0ec9167bc169ac0c4ba85f870f3b57e842332c32 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 26 May 2007 13:41:28 +0000
Subject: [PATCH 054/112] Update version to 1.5-SNAPSHOT

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1224 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/project.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/JodaTime/project.xml b/JodaTime/project.xml
index 66c8a8da4..21b8d6cd6 100644
--- a/JodaTime/project.xml
+++ b/JodaTime/project.xml
@@ -7,7 +7,7 @@
   <groupId>joda-time</groupId>
   <artifactId>joda-time</artifactId>
   <name>Joda time</name>
-  <currentVersion>1.4</currentVersion>
+  <currentVersion>1.5-SNAPSHOT</currentVersion>
   <organization>
     <name>Joda.org</name>
     <url>http://www.joda.org</url>

From f446ad4cd907472fa46f9a147761a194b6e5dfe4 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 26 May 2007 13:42:32 +0000
Subject: [PATCH 055/112] Add external link symbol to JSR-310 link

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1225 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/index.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/JodaTime/xdocs/index.xml b/JodaTime/xdocs/index.xml
index 2a48215e4..26b71758a 100644
--- a/JodaTime/xdocs/index.xml
+++ b/JodaTime/xdocs/index.xml
@@ -22,7 +22,7 @@ duration, format and parsing.
 </p>
 <p style="color:red; margin-left:20px;">
 JSR 310 has now been launched. It aims to build upon Joda-Time and include it in the JDK.
-<a href="https://jsr-310.dev.java.net/">More information</a>.
+<a href="https://jsr-310.dev.java.net/" class="externalLink" title="External Link">More information</a>.
 </p>
 <p>
 As a flavour of Joda-Time, here's some example code:

From 9ab9cb1a2624063083cf4ed8d701eb15ee84674e Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 11 Jun 2007 22:13:06 +0000
Subject: [PATCH 056/112] Add isStandardOffset() to DateTimeZone

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1226 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  3 ++
 .../src/java/org/joda/time/DateTimeZone.java  | 19 +++++++++++
 .../test/org/joda/time/TestDateTimeZone.java  | 34 +++++++++++++------
 3 files changed, 45 insertions(+), 11 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index f3ba63b3e..5a5bb7fd6 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -29,6 +29,9 @@ Enhancements since 1.4
 - Period.toString(PeriodFormatter), MutablePeriod.toString(PeriodFormatter)
   - allow periods to be directly formatted, as with datetimes
 
+- DateTimeZone
+  - add isStandardOffset() to assist in determining if DST applies
+
 
 Compatibility with 1.4
 ----------------------
diff --git a/JodaTime/src/java/org/joda/time/DateTimeZone.java b/JodaTime/src/java/org/joda/time/DateTimeZone.java
index 393e313b1..06b667a16 100644
--- a/JodaTime/src/java/org/joda/time/DateTimeZone.java
+++ b/JodaTime/src/java/org/joda/time/DateTimeZone.java
@@ -802,6 +802,25 @@ public final int getOffset(ReadableInstant instant) {
      */
     public abstract int getStandardOffset(long instant);
 
+    /**
+     * Checks whether, at a particular instant, the offset is standard or not.
+     * <p>
+     * This method can be used to determine whether Summer Time (DST) applies.
+     * As a general rule, if the offset at the specified instant is standard,
+     * then either Winter time applies, or there is no Summer Time. If the
+     * instant is not standard, then Summer Time applies.
+     * <p>
+     * The implementation of the method is simply whether {@link #getOffset(long)}
+     * equals {@link #getStandardOffset(long)} at the specified instant.
+     * 
+     * @param instant  milliseconds from 1970-01-01T00:00:00Z to get the offset for
+     * @return true if the offset at the given instant is the standard offset
+     * @since 1.5
+     */
+    public boolean isStandardOffset(long instant) {
+        return getOffset(instant) == getStandardOffset(instant);
+    }
+
     /**
      * Gets the millisecond offset to subtract from local time to get UTC time.
      * This offset can be used to undo adding the offset obtained by getOffset.
diff --git a/JodaTime/src/test/org/joda/time/TestDateTimeZone.java b/JodaTime/src/test/org/joda/time/TestDateTimeZone.java
index c0683a617..ad674e701 100644
--- a/JodaTime/src/test/org/joda/time/TestDateTimeZone.java
+++ b/JodaTime/src/test/org/joda/time/TestDateTimeZone.java
@@ -652,21 +652,27 @@ public boolean equals(Object object) {
     }
 
     //-----------------------------------------------------------------------
-    public void testGetOffset() {
+    public void testGetOffset_long() {
         DateTimeZone zone = DateTimeZone.forID("Europe/Paris");
         assertEquals(2L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(TEST_TIME_SUMMER));
         assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(TEST_TIME_WINTER));
         
-        assertEquals(2L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(new Instant(TEST_TIME_SUMMER)));
-        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(new Instant(TEST_TIME_WINTER)));
-        
-        assertEquals(zone.getOffset(DateTimeUtils.currentTimeMillis()), zone.getOffset(null));
-        
         assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getStandardOffset(TEST_TIME_SUMMER));
         assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getStandardOffset(TEST_TIME_WINTER));
         
         assertEquals(2L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffsetFromLocal(TEST_TIME_SUMMER));
         assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffsetFromLocal(TEST_TIME_WINTER));
+        
+        assertEquals(false, zone.isStandardOffset(TEST_TIME_SUMMER));
+        assertEquals(true, zone.isStandardOffset(TEST_TIME_WINTER));
+    }
+
+    public void testGetOffset_RI() {
+        DateTimeZone zone = DateTimeZone.forID("Europe/Paris");
+        assertEquals(2L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(new Instant(TEST_TIME_SUMMER)));
+        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(new Instant(TEST_TIME_WINTER)));
+        
+        assertEquals(zone.getOffset(DateTimeUtils.currentTimeMillis()), zone.getOffset(null));
     }
 
     public void testGetOffsetFixed() {
@@ -674,16 +680,22 @@ public void testGetOffsetFixed() {
         assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(TEST_TIME_SUMMER));
         assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(TEST_TIME_WINTER));
         
-        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(new Instant(TEST_TIME_SUMMER)));
-        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(new Instant(TEST_TIME_WINTER)));
-        
-        assertEquals(zone.getOffset(DateTimeUtils.currentTimeMillis()), zone.getOffset(null));
-        
         assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getStandardOffset(TEST_TIME_SUMMER));
         assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getStandardOffset(TEST_TIME_WINTER));
         
         assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffsetFromLocal(TEST_TIME_SUMMER));
         assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffsetFromLocal(TEST_TIME_WINTER));
+        
+        assertEquals(true, zone.isStandardOffset(TEST_TIME_SUMMER));
+        assertEquals(true, zone.isStandardOffset(TEST_TIME_WINTER));
+    }
+
+    public void testGetOffsetFixed_RI() {
+        DateTimeZone zone = DateTimeZone.forID("+01:00");
+        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(new Instant(TEST_TIME_SUMMER)));
+        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(new Instant(TEST_TIME_WINTER)));
+        
+        assertEquals(zone.getOffset(DateTimeUtils.currentTimeMillis()), zone.getOffset(null));
     }
 
     //-----------------------------------------------------------------------

From 152fb03b8f4aedf4e7777facfbc64aea1592c86a Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Wed, 25 Jul 2007 15:18:25 +0000
Subject: [PATCH 057/112] Fixed links to Subversion.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1227 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/project.xml          | 4 ++--
 JodaTime/xdocs/index.xml      | 2 +-
 JodaTime/xdocs/navigation.xml | 2 +-
 3 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/JodaTime/project.xml b/JodaTime/project.xml
index 21b8d6cd6..7e5ea9143 100644
--- a/JodaTime/project.xml
+++ b/JodaTime/project.xml
@@ -40,8 +40,8 @@
   <distributionDirectory>home/groups/j/jo/joda-time/htdocs/repository</distributionDirectory>
   
   <repository>
-    <connection>scm:svn:https://svn.sourceforge.net/svnroot/joda-time/trunk/JodaTime/</connection>
-    <url>http://svn.sourceforge.net/viewcvs.cgi/joda-time/trunk/JodaTime/</url>
+    <connection>scm:svn:https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk/JodaTime/</connection>
+    <url>http://joda-time.svn.sourceforge.net/viewvc/joda-time/trunk/JodaTime/</url>
   </repository>
 
   <licenses>
diff --git a/JodaTime/xdocs/index.xml b/JodaTime/xdocs/index.xml
index 26b71758a..0188d2a80 100644
--- a/JodaTime/xdocs/index.xml
+++ b/JodaTime/xdocs/index.xml
@@ -136,7 +136,7 @@ Various documentation is available:
 <li>The javadoc for the <a href="apidocs/index.html">latest code in development</a></li>
 <li>A <a href="faq.html">FAQ</a> list</li>
 <li>Information on <a href="installation.html">downloading and installing</a> Joda-Time</li>
-<li>The <a href="http://svn.sourceforge.net/viewcvs.cgi/joda-time/trunk/JodaTime/">Subversion repository</a></li>
+<li>The <a href="http://joda-time.svn.sourceforge.net/viewvc/joda-time/trunk/JodaTime/">Subversion repository</a></li>
 </ul>
 </p>
 </section>
diff --git a/JodaTime/xdocs/navigation.xml b/JodaTime/xdocs/navigation.xml
index e5de7b1da..8221e1f54 100644
--- a/JodaTime/xdocs/navigation.xml
+++ b/JodaTime/xdocs/navigation.xml
@@ -50,7 +50,7 @@
       <item name="Test coverage" href="/cobertura/index.html"/>
       <item name="Mailing lists" href="/mail-lists.html"/>
       <item name="Tasks" href="/tasks.html"/>
-      <item name="Subversion" href="http://svn.sourceforge.net/viewcvs.cgi/joda-time/trunk/JodaTime/"/>
+      <item name="Subversion" href="http://joda-time.svn.sourceforge.net/viewvc/joda-time/trunk/JodaTime/"/>
       <item name="Javadoc (Development)" href="/apidocs/index.html"/>
     </menu>
     

From dd15c2fc3d033000d78ef14d2b59de485d976fe9 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Wed, 25 Jul 2007 15:19:18 +0000
Subject: [PATCH 058/112] Fixed links to Subversion.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1228 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/hibernate/project.xml          | 4 ++--
 JodaTimeContrib/hibernate/xdocs/index.xml      | 2 +-
 JodaTimeContrib/hibernate/xdocs/navigation.xml | 2 +-
 JodaTimeContrib/i18n/project.xml               | 4 ++--
 JodaTimeContrib/i18n/xdocs/index.xml           | 2 +-
 JodaTimeContrib/i18n/xdocs/navigation.xml      | 2 +-
 JodaTimeContrib/jsptags/project.xml            | 4 ++--
 JodaTimeContrib/jsptags/xdocs/index.xml        | 2 +-
 JodaTimeContrib/jsptags/xdocs/navigation.xml   | 2 +-
 9 files changed, 12 insertions(+), 12 deletions(-)

diff --git a/JodaTimeContrib/hibernate/project.xml b/JodaTimeContrib/hibernate/project.xml
index 942e4fbf1..b475550e1 100644
--- a/JodaTimeContrib/hibernate/project.xml
+++ b/JodaTimeContrib/hibernate/project.xml
@@ -43,8 +43,8 @@
   </organization>
 
   <repository>
-    <connection>scm:svn:https://svn.sourceforge.net/svnroot/joda-time/trunk/JodaTimeContrib/hibernate/</connection>
-    <url>http://svn.sourceforge.net/viewcvs.cgi/joda-time/trunk/JodaTimeContrib/hibernate/</url>
+    <connection>scm:svn:https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk/JodaTimeContrib/hibernate/</connection>
+    <url>http://joda-time.svn.sourceforge.net/viewvc/joda-time/trunk/JodaTimeContrib/hibernate/</url>
   </repository>
 
   <versions>
diff --git a/JodaTimeContrib/hibernate/xdocs/index.xml b/JodaTimeContrib/hibernate/xdocs/index.xml
index 04b82d6f3..9c10d3347 100644
--- a/JodaTimeContrib/hibernate/xdocs/index.xml
+++ b/JodaTimeContrib/hibernate/xdocs/index.xml
@@ -41,7 +41,7 @@ Various documentation is available:
 <li>The javadoc for the <a href="api-release/index.html">current release</a></li>
 <li>The javadoc for the <a href="apidocs/index.html">latest in development</a></li>
 <!--li>A <a href="faq.html">FAQ</a> list</li-->
-<li>The <a href="http://svn.sourceforge.net/viewcvs.cgi/joda-time/trunk/JodaTimeContrib/hibernate/">Subversion repository</a></li>
+<li>The <a href="http://joda-time.svn.sourceforge.net/viewvc/joda-time/trunk/JodaTimeContrib/hibernate/">Subversion repository</a></li>
 </ul>
 </p>
 </section>
diff --git a/JodaTimeContrib/hibernate/xdocs/navigation.xml b/JodaTimeContrib/hibernate/xdocs/navigation.xml
index 7759e01f6..717584798 100644
--- a/JodaTimeContrib/hibernate/xdocs/navigation.xml
+++ b/JodaTimeContrib/hibernate/xdocs/navigation.xml
@@ -23,7 +23,7 @@
       <item name="Sourceforge" href="http://sourceforge.net/projects/joda-time/"/>
       <item name="Mailing lists" href="mail-lists.html"/>
       <item name="Tasks" href="tasks.html"/>
-      <item name="Subversion" href="http://svn.sourceforge.net/viewcvs.cgi/joda-time/trunk/JodaTimeContrib/hibernate/"/>
+      <item name="Subversion" href="http://joda-time.svn.sourceforge.net/viewvc/joda-time/trunk/JodaTimeContrib/hibernate/"/>
       <item name="Javadoc (Development)" href="apidocs/index.html"/>
     </menu>
 
diff --git a/JodaTimeContrib/i18n/project.xml b/JodaTimeContrib/i18n/project.xml
index 7da94ce46..cd589b295 100644
--- a/JodaTimeContrib/i18n/project.xml
+++ b/JodaTimeContrib/i18n/project.xml
@@ -43,8 +43,8 @@
   </organization>
 
   <repository>
-    <connection>scm:svn:https://svn.sourceforge.net/svnroot/joda-time/trunk/JodaTimeContrib/i18n/</connection>
-    <url>http://svn.sourceforge.net/viewcvs.cgi/joda-time/trunk/JodaTimeContrib/i18n/</url>
+    <connection>scm:svn:https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk/JodaTimeContrib/i18n/</connection>
+    <url>http://joda-time.svn.sourceforge.net/viewvc/joda-time/trunk/JodaTimeContrib/i18n/</url>
   </repository>
 
   <versions>
diff --git a/JodaTimeContrib/i18n/xdocs/index.xml b/JodaTimeContrib/i18n/xdocs/index.xml
index eaf8618e4..0539c00ac 100644
--- a/JodaTimeContrib/i18n/xdocs/index.xml
+++ b/JodaTimeContrib/i18n/xdocs/index.xml
@@ -44,7 +44,7 @@ Various documentation is available:
 <li>The javadoc for the <a href="api-release/index.html">current release</a></li>
 <li>The javadoc for the <a href="apidocs/index.html">latest in development</a></li>
 <!--li>A <a href="faq.html">FAQ</a> list</li-->
-<li>The <a href="http://svn.sourceforge.net/viewcvs.cgi/joda-time/trunk/JodaTimeContrib/i18n/">Subversion repository</a></li>
+<li>The <a href="http://joda-time.svn.sourceforge.net/viewvc/joda-time/trunk/JodaTimeContrib/i18n/">Subversion repository</a></li>
 </ul>
 </p>
 </section>
diff --git a/JodaTimeContrib/i18n/xdocs/navigation.xml b/JodaTimeContrib/i18n/xdocs/navigation.xml
index c4912bdb3..7cf2c8cb5 100644
--- a/JodaTimeContrib/i18n/xdocs/navigation.xml
+++ b/JodaTimeContrib/i18n/xdocs/navigation.xml
@@ -24,7 +24,7 @@
       <item name="Sourceforge" href="http://sourceforge.net/projects/joda-time/"/>
       <item name="Mailing lists" href="mail-lists.html"/>
       <item name="Tasks" href="tasks.html"/>
-      <item name="Subversion" href="http://svn.sourceforge.net/viewcvs.cgi/joda-time/trunk/JodaTimeContrib/i18n/"/>
+      <item name="Subversion" href="http://joda-time.svn.sourceforge.net/viewvc/joda-time/trunk/JodaTimeContrib/i18n/"/>
       <item name="Javadoc (Development)" href="apidocs/index.html"/>
     </menu>
 
diff --git a/JodaTimeContrib/jsptags/project.xml b/JodaTimeContrib/jsptags/project.xml
index cb77fdf86..de2aa6c1e 100644
--- a/JodaTimeContrib/jsptags/project.xml
+++ b/JodaTimeContrib/jsptags/project.xml
@@ -44,9 +44,9 @@
 
   <repository>
     <!-- Does not appear to be supported in Maven-1.x
-    <connection>scm:svn:http://svn.sourceforge.net/viewcvs.cgi/joda-time/trunk</connection>
+    <connection>scm:svn:http://joda-time.svn.sourceforge.net/viewcvs.cgi/joda-time/trunk</connection>
     -->
-    <url>http://svn.sourceforge.net/viewcvs.cgi/joda-time/trunk/JodaTimeContrib/jsptags/</url>
+    <url>http://joda-time.svn.sourceforge.net/viewvc/joda-time/trunk/JodaTimeContrib/jsptags/</url>
   </repository>
 
   <versions>
diff --git a/JodaTimeContrib/jsptags/xdocs/index.xml b/JodaTimeContrib/jsptags/xdocs/index.xml
index d5e43ae28..9d68b4e88 100644
--- a/JodaTimeContrib/jsptags/xdocs/index.xml
+++ b/JodaTimeContrib/jsptags/xdocs/index.xml
@@ -42,7 +42,7 @@ Various documentation is available:
 <li>The javadoc for the <a href="api-release/index.html">current release</a></li>
 <li>The javadoc for the <a href="apidocs/index.html">latest in development</a></li>
 <!--li>A <a href="faq.html">FAQ</a> list</li-->
-<li>The <a href="http://svn.sourceforge.net/viewcvs.cgi/joda-time/trunk/JodaTimeContrib/jsptags/">Subversion repository</a></li>
+<li>The <a href="http://joda-time.svn.sourceforge.net/viewvc/joda-time/trunk/JodaTimeContrib/jsptags/">Subversion repository</a></li>
 </ul>
 </p>
 </section>
diff --git a/JodaTimeContrib/jsptags/xdocs/navigation.xml b/JodaTimeContrib/jsptags/xdocs/navigation.xml
index 94b3e1615..3b1b39c7f 100644
--- a/JodaTimeContrib/jsptags/xdocs/navigation.xml
+++ b/JodaTimeContrib/jsptags/xdocs/navigation.xml
@@ -23,7 +23,7 @@
       <item name="Sourceforge" href="http://sourceforge.net/projects/joda-time/"/>
       <item name="Mailing lists" href="mail-lists.html"/>
       <item name="Tasks" href="tasks.html"/>
-      <item name="Subversion" href="http://svn.sourceforge.net/viewcvs.cgi/joda-time/trunk/JodaTimeContrib/jsptags/"/>
+      <item name="Subversion" href="http://joda-time.svn.sourceforge.net/viewvc/joda-time/trunk/JodaTimeContrib/jsptags/"/>
       <item name="Javadoc (Development)" href="apidocs/index.html"/>
     </menu>
 

From 496a7466a870a0849b4e59856bd3a34ea599bf1d Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 4 Aug 2007 11:47:20 +0000
Subject: [PATCH 059/112] Clarify javadoc, suggested by Neil Martin

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1229 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/DateTime.java | 161 +++++++++++++++---
 JodaTime/src/java/org/joda/time/Instant.java  |  20 ++-
 .../src/java/org/joda/time/LocalDateTime.java |   7 +-
 .../org/joda/time/base/AbstractInstant.java   |  11 +-
 4 files changed, 160 insertions(+), 39 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/DateTime.java b/JodaTime/src/java/org/joda/time/DateTime.java
index 9e834cfba..1d95964e9 100644
--- a/JodaTime/src/java/org/joda/time/DateTime.java
+++ b/JodaTime/src/java/org/joda/time/DateTime.java
@@ -28,14 +28,21 @@
 
 /**
  * DateTime is the standard implementation of an unmodifiable datetime class.
- * It holds the datetime as milliseconds from the Java epoch of 1970-01-01T00:00:00Z.
  * <p>
- * This class uses a Chronology internally. The Chronology determines how the
+ * <code>DateTime</code> is the most widely used implementation of
+ * {@link ReadableInstant}. As with all instants, it represents an exact
+ * point on the time-line, but limited to the precision of milliseconds.
+ * A <code>DateTime</code> calculates its fields with respect to a
+ * {@link DateTimeZone time zone}.
+ * <p>
+ * Internally, the class holds two pieces of data. Firstly, it holds the
+ * datetime as milliseconds from the Java epoch of 1970-01-01T00:00:00Z.
+ * Secondly, it holds a {@link Chronology} which determines how the
  * millisecond instant value is converted into the date time fields.
- * The default Chronology is <code>ISOChronology</code> which is the agreed
- * international standard and compatable with the modern Gregorian calendar.
- *
- * <p>Each individual field can be queried in two ways:
+ * The default Chronology is {@link ISOChronology} which is the agreed
+ * international standard and compatible with the modern Gregorian calendar.
+ * <p>
+ * Each individual field can be queried in two ways:
  * <ul>
  * <li><code>getHourOfDay()</code>
  * <li><code>hourOfDay().get()</code>
@@ -51,7 +58,6 @@
  * <li>set
  * <li>rounding
  * </ul>
- *
  * <p>
  * DateTime is thread-safe and immutable, provided that the Chronology is as well.
  * All standard Chronology classes supplied are thread-safe and immutable.
@@ -610,6 +616,7 @@ public DateTime withPeriodAdded(ReadablePeriod period, int scalar) {
      * Returns a copy of this datetime with the specified duration added.
      * <p>
      * If the amount is zero or null, then <code>this</code> is returned.
+     * This datetime instance is immutable and unaffected by this method call.
      * 
      * @param duration  the duration, in millis, to add to this one
      * @return a copy of this datetime with the duration added
@@ -623,6 +630,7 @@ public DateTime plus(long duration) {
      * Returns a copy of this datetime with the specified duration added.
      * <p>
      * If the amount is zero or null, then <code>this</code> is returned.
+     * This datetime instance is immutable and unaffected by this method call.
      * 
      * @param duration  the duration to add to this one, null means zero
      * @return a copy of this datetime with the duration added
@@ -635,11 +643,20 @@ public DateTime plus(ReadableDuration duration) {
     /**
      * Returns a copy of this datetime with the specified period added.
      * <p>
-     * If the amount is zero or null, then <code>this</code> is returned.
+     * This method will add each element of the period one by one, from largest
+     * to smallest, adjusting the datetime to be accurate between each.
+     * <p>
+     * Thus, adding a period of one month and one day to 2007-03-31 will
+     * work as follows:
+     * First add one month and adjust, resulting in 2007-04-30
+     * Then add one day and adjust, resulting in 2007-05-01.
      * <p>
      * This method is typically used to add complex period instances.
      * Adding one field is best achieved using methods
      * like {@link #plusYears(int)}.
+     * <p>
+     * If the amount is zero or null, then <code>this</code> is returned.
+     * This datetime instance is immutable and unaffected by this method call.
      * 
      * @param period  the duration to add to this one, null means zero
      * @return a copy of this datetime with the period added
@@ -653,7 +670,11 @@ public DateTime plus(ReadablePeriod period) {
     /**
      * Returns a copy of this datetime plus the specified number of years.
      * <p>
-     * This datetime instance is immutable and unaffected by this method call.
+     * The calculation will do its best to only change the year field
+     * retaining the same month of year.
+     * However, in certain circumstances, it may be necessary to alter
+     * smaller fields. For example, 2008-02-29 plus one year cannot result
+     * in 2009-02-29, so the day of month is adjusted to 2009-02-28.
      * <p>
      * The following three lines are identical in effect:
      * <pre>
@@ -661,6 +682,8 @@ public DateTime plus(ReadablePeriod period) {
      * DateTime added = dt.plus(Period.years(6));
      * DateTime added = dt.withFieldAdded(DurationFieldType.years(), 6);
      * </pre>
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
      *
      * @param years  the amount of years to add, may be negative
      * @return the new datetime plus the increased years
@@ -677,7 +700,11 @@ public DateTime plusYears(int years) {
     /**
      * Returns a copy of this datetime plus the specified number of months.
      * <p>
-     * This datetime instance is immutable and unaffected by this method call.
+     * The calculation will do its best to only change the month field
+     * retaining the same day of month.
+     * However, in certain circumstances, it may be necessary to alter
+     * smaller fields. For example, 2007-03-31 plus one month cannot result
+     * in 2007-04-31, so the day of month is adjusted to 2007-04-30.
      * <p>
      * The following three lines are identical in effect:
      * <pre>
@@ -685,6 +712,8 @@ public DateTime plusYears(int years) {
      * DateTime added = dt.plus(Period.months(6));
      * DateTime added = dt.withFieldAdded(DurationFieldType.months(), 6);
      * </pre>
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
      *
      * @param months  the amount of months to add, may be negative
      * @return the new datetime plus the increased months
@@ -701,7 +730,7 @@ public DateTime plusMonths(int months) {
     /**
      * Returns a copy of this datetime plus the specified number of weeks.
      * <p>
-     * This datetime instance is immutable and unaffected by this method call.
+     * The calculation operates as if it were adding the equivalent in days.
      * <p>
      * The following three lines are identical in effect:
      * <pre>
@@ -709,6 +738,8 @@ public DateTime plusMonths(int months) {
      * DateTime added = dt.plus(Period.weeks(6));
      * DateTime added = dt.withFieldAdded(DurationFieldType.weeks(), 6);
      * </pre>
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
      *
      * @param weeks  the amount of weeks to add, may be negative
      * @return the new datetime plus the increased weeks
@@ -725,7 +756,16 @@ public DateTime plusWeeks(int weeks) {
     /**
      * Returns a copy of this datetime plus the specified number of days.
      * <p>
-     * This datetime instance is immutable and unaffected by this method call.
+     * The calculation will do its best to only change the day field
+     * retaining the same time of day.
+     * However, in certain circumstances, typically daylight savings cutover,
+     * it may be necessary to alter the time fields.
+     * <p>
+     * In spring an hour is typically removed. If adding one day results in
+     * the time being within the cutover then the time is adjusted to be
+     * within summer time. For example, if the cutover is from 01:59 to 03:00
+     * and the result of this method would have been 02:30, then the result
+     * will be adjusted to 03:30.
      * <p>
      * The following three lines are identical in effect:
      * <pre>
@@ -733,6 +773,8 @@ public DateTime plusWeeks(int weeks) {
      * DateTime added = dt.plus(Period.days(6));
      * DateTime added = dt.withFieldAdded(DurationFieldType.days(), 6);
      * </pre>
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
      *
      * @param days  the amount of days to add, may be negative
      * @return the new datetime plus the increased days
@@ -749,7 +791,12 @@ public DateTime plusDays(int days) {
     /**
      * Returns a copy of this datetime plus the specified number of hours.
      * <p>
-     * This datetime instance is immutable and unaffected by this method call.
+     * The calculation will add a duration equivalent to the number of hours
+     * expressed in milliseconds.
+     * <p>
+     * For example, if a spring daylight savings cutover is from 01:59 to 03:00
+     * then adding one hour to 01:30 will result in 03:30. This is a duration
+     * of one hour later, even though the hour field value changed from 1 to 3.
      * <p>
      * The following three lines are identical in effect:
      * <pre>
@@ -757,6 +804,8 @@ public DateTime plusDays(int days) {
      * DateTime added = dt.plus(Period.hours(6));
      * DateTime added = dt.withFieldAdded(DurationFieldType.hours(), 6);
      * </pre>
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
      *
      * @param hours  the amount of hours to add, may be negative
      * @return the new datetime plus the increased hours
@@ -773,7 +822,8 @@ public DateTime plusHours(int hours) {
     /**
      * Returns a copy of this datetime plus the specified number of minutes.
      * <p>
-     * This datetime instance is immutable and unaffected by this method call.
+     * The calculation will add a duration equivalent to the number of minutes
+     * expressed in milliseconds.
      * <p>
      * The following three lines are identical in effect:
      * <pre>
@@ -781,6 +831,8 @@ public DateTime plusHours(int hours) {
      * DateTime added = dt.plus(Period.minutes(6));
      * DateTime added = dt.withFieldAdded(DurationFieldType.minutes(), 6);
      * </pre>
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
      *
      * @param minutes  the amount of minutes to add, may be negative
      * @return the new datetime plus the increased minutes
@@ -797,7 +849,8 @@ public DateTime plusMinutes(int minutes) {
     /**
      * Returns a copy of this datetime plus the specified number of seconds.
      * <p>
-     * This datetime instance is immutable and unaffected by this method call.
+     * The calculation will add a duration equivalent to the number of seconds
+     * expressed in milliseconds.
      * <p>
      * The following three lines are identical in effect:
      * <pre>
@@ -805,6 +858,8 @@ public DateTime plusMinutes(int minutes) {
      * DateTime added = dt.plus(Period.seconds(6));
      * DateTime added = dt.withFieldAdded(DurationFieldType.seconds(), 6);
      * </pre>
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
      *
      * @param seconds  the amount of seconds to add, may be negative
      * @return the new datetime plus the increased seconds
@@ -821,7 +876,7 @@ public DateTime plusSeconds(int seconds) {
     /**
      * Returns a copy of this datetime plus the specified number of millis.
      * <p>
-     * This datetime instance is immutable and unaffected by this method call.
+     * The calculation will add a duration equivalent to the number of milliseconds.
      * <p>
      * The following three lines are identical in effect:
      * <pre>
@@ -829,6 +884,8 @@ public DateTime plusSeconds(int seconds) {
      * DateTime added = dt.plus(Period.millis(6));
      * DateTime added = dt.withFieldAdded(DurationFieldType.millis(), 6);
      * </pre>
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
      *
      * @param millis  the amount of millis to add, may be negative
      * @return the new datetime plus the increased millis
@@ -847,6 +904,7 @@ public DateTime plusMillis(int millis) {
      * Returns a copy of this datetime with the specified duration taken away.
      * <p>
      * If the amount is zero or null, then <code>this</code> is returned.
+     * This datetime instance is immutable and unaffected by this method call.
      * 
      * @param duration  the duration, in millis, to reduce this instant by
      * @return a copy of this datetime with the duration taken away
@@ -860,6 +918,7 @@ public DateTime minus(long duration) {
      * Returns a copy of this datetime with the specified duration taken away.
      * <p>
      * If the amount is zero or null, then <code>this</code> is returned.
+     * This datetime instance is immutable and unaffected by this method call.
      * 
      * @param duration  the duration to reduce this instant by
      * @return a copy of this datetime with the duration taken away
@@ -872,11 +931,21 @@ public DateTime minus(ReadableDuration duration) {
     /**
      * Returns a copy of this datetime with the specified period taken away.
      * <p>
-     * If the amount is zero or null, then <code>this</code> is returned.
+     * This method will subtract each element of the period one by one, from
+     * largest to smallest, adjusting the datetime to be accurate between each.
+     * <p>
+     * Thus, subtracting a period of one month and one day from 2007-05-31 will
+     * work as follows:
+     * First subtract one month and adjust, resulting in 2007-04-30
+     * Then subtract one day and adjust, resulting in 2007-04-29.
+     * Note that the day has been adjusted by two.
      * <p>
      * This method is typically used to subtract complex period instances.
      * Subtracting one field is best achieved using methods
      * like {@link #minusYears(int)}.
+     * <p>
+     * If the amount is zero or null, then <code>this</code> is returned.
+     * This datetime instance is immutable and unaffected by this method call.
      * 
      * @param period  the period to reduce this instant by
      * @return a copy of this datetime with the period taken away
@@ -890,7 +959,11 @@ public DateTime minus(ReadablePeriod period) {
     /**
      * Returns a copy of this datetime minus the specified number of years.
      * <p>
-     * This datetime instance is immutable and unaffected by this method call.
+     * The calculation will do its best to only change the year field
+     * retaining the same month of year.
+     * However, in certain circumstances, it may be necessary to alter
+     * smaller fields. For example, 2008-02-29 minus one year cannot result
+     * in 2007-02-29, so the day of month is adjusted to 2007-02-28.
      * <p>
      * The following three lines are identical in effect:
      * <pre>
@@ -898,6 +971,8 @@ public DateTime minus(ReadablePeriod period) {
      * DateTime subtracted = dt.minus(Period.years(6));
      * DateTime subtracted = dt.withFieldAdded(DurationFieldType.years(), -6);
      * </pre>
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
      *
      * @param years  the amount of years to subtract, may be negative
      * @return the new datetime minus the increased years
@@ -914,7 +989,11 @@ public DateTime minusYears(int years) {
     /**
      * Returns a copy of this datetime minus the specified number of months.
      * <p>
-     * This datetime instance is immutable and unaffected by this method call.
+     * The calculation will do its best to only change the month field
+     * retaining the same day of month.
+     * However, in certain circumstances, it may be necessary to alter
+     * smaller fields. For example, 2007-05-31 minus one month cannot result
+     * in 2007-04-31, so the day of month is adjusted to 2007-04-30.
      * <p>
      * The following three lines are identical in effect:
      * <pre>
@@ -922,6 +1001,8 @@ public DateTime minusYears(int years) {
      * DateTime subtracted = dt.minus(Period.months(6));
      * DateTime subtracted = dt.withFieldAdded(DurationFieldType.months(), -6);
      * </pre>
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
      *
      * @param months  the amount of months to subtract, may be negative
      * @return the new datetime minus the increased months
@@ -938,7 +1019,7 @@ public DateTime minusMonths(int months) {
     /**
      * Returns a copy of this datetime minus the specified number of weeks.
      * <p>
-     * This datetime instance is immutable and unaffected by this method call.
+     * The calculation operates as if it were subtracting the equivalent in days.
      * <p>
      * The following three lines are identical in effect:
      * <pre>
@@ -946,6 +1027,8 @@ public DateTime minusMonths(int months) {
      * DateTime subtracted = dt.minus(Period.weeks(6));
      * DateTime subtracted = dt.withFieldAdded(DurationFieldType.weeks(), -6);
      * </pre>
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
      *
      * @param weeks  the amount of weeks to subtract, may be negative
      * @return the new datetime minus the increased weeks
@@ -962,7 +1045,16 @@ public DateTime minusWeeks(int weeks) {
     /**
      * Returns a copy of this datetime minus the specified number of days.
      * <p>
-     * This datetime instance is immutable and unaffected by this method call.
+     * The calculation will do its best to only change the day field
+     * retaining the same time of day.
+     * However, in certain circumstances, typically daylight savings cutover,
+     * it may be necessary to alter the time fields.
+     * <p>
+     * In spring an hour is typically removed. If subtracting one day results
+     * in the time being within the cutover then the time is adjusted to be
+     * within summer time. For example, if the cutover is from 01:59 to 03:00
+     * and the result of this method would have been 02:30, then the result
+     * will be adjusted to 03:30.
      * <p>
      * The following three lines are identical in effect:
      * <pre>
@@ -970,6 +1062,8 @@ public DateTime minusWeeks(int weeks) {
      * DateTime subtracted = dt.minus(Period.days(6));
      * DateTime subtracted = dt.withFieldAdded(DurationFieldType.days(), -6);
      * </pre>
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
      *
      * @param days  the amount of days to subtract, may be negative
      * @return the new datetime minus the increased days
@@ -986,7 +1080,13 @@ public DateTime minusDays(int days) {
     /**
      * Returns a copy of this datetime minus the specified number of hours.
      * <p>
-     * This datetime instance is immutable and unaffected by this method call.
+     * The calculation will subtract a duration equivalent to the number of
+     * hours expressed in milliseconds.
+     * <p>
+     * For example, if a spring daylight savings cutover is from 01:59 to 03:00
+     * then subtracting one hour from 03:30 will result in 01:30. This is a
+     * duration of one hour earlier, even though the hour field value changed
+     * from 3 to 1.
      * <p>
      * The following three lines are identical in effect:
      * <pre>
@@ -994,6 +1094,8 @@ public DateTime minusDays(int days) {
      * DateTime subtracted = dt.minus(Period.hours(6));
      * DateTime subtracted = dt.withFieldAdded(DurationFieldType.hours(), -6);
      * </pre>
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
      *
      * @param hours  the amount of hours to subtract, may be negative
      * @return the new datetime minus the increased hours
@@ -1010,7 +1112,8 @@ public DateTime minusHours(int hours) {
     /**
      * Returns a copy of this datetime minus the specified number of minutes.
      * <p>
-     * This datetime instance is immutable and unaffected by this method call.
+     * The calculation will subtract a duration equivalent to the number of
+     * minutes expressed in milliseconds.
      * <p>
      * The following three lines are identical in effect:
      * <pre>
@@ -1018,6 +1121,8 @@ public DateTime minusHours(int hours) {
      * DateTime subtracted = dt.minus(Period.minutes(6));
      * DateTime subtracted = dt.withFieldAdded(DurationFieldType.minutes(), -6);
      * </pre>
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
      *
      * @param minutes  the amount of minutes to subtract, may be negative
      * @return the new datetime minus the increased minutes
@@ -1034,7 +1139,8 @@ public DateTime minusMinutes(int minutes) {
     /**
      * Returns a copy of this datetime minus the specified number of seconds.
      * <p>
-     * This datetime instance is immutable and unaffected by this method call.
+     * The calculation will subtract a duration equivalent to the number of
+     * seconds expressed in milliseconds.
      * <p>
      * The following three lines are identical in effect:
      * <pre>
@@ -1042,6 +1148,8 @@ public DateTime minusMinutes(int minutes) {
      * DateTime subtracted = dt.minus(Period.seconds(6));
      * DateTime subtracted = dt.withFieldAdded(DurationFieldType.seconds(), -6);
      * </pre>
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
      *
      * @param seconds  the amount of seconds to subtract, may be negative
      * @return the new datetime minus the increased seconds
@@ -1058,7 +1166,8 @@ public DateTime minusSeconds(int seconds) {
     /**
      * Returns a copy of this datetime minus the specified number of millis.
      * <p>
-     * This datetime instance is immutable and unaffected by this method call.
+     * The calculation will subtract a duration equivalent to the number of
+     * milliseconds.
      * <p>
      * The following three lines are identical in effect:
      * <pre>
@@ -1066,6 +1175,8 @@ public DateTime minusSeconds(int seconds) {
      * DateTime subtracted = dt.minus(Period.millis(6));
      * DateTime subtracted = dt.withFieldAdded(DurationFieldType.millis(), -6);
      * </pre>
+     * <p>
+     * This datetime instance is immutable and unaffected by this method call.
      *
      * @param millis  the amount of millis to subtract, may be negative
      * @return the new datetime minus the increased millis
diff --git a/JodaTime/src/java/org/joda/time/Instant.java b/JodaTime/src/java/org/joda/time/Instant.java
index 59c66be66..a7b84b6ce 100644
--- a/JodaTime/src/java/org/joda/time/Instant.java
+++ b/JodaTime/src/java/org/joda/time/Instant.java
@@ -24,18 +24,21 @@
 
 /**
  * Instant is the standard implementation of a fully immutable instant in time.
- * It holds the instant as milliseconds from the Java Epoch of 1970-01-01T00:00:00Z.
  * <p>
- * The chronology used is always ISO in the UTC time zone.
- * This corresponds to the definition of the Java Epoch.
+ * <code>Instant</code> is an implementation of {@link ReadableInstant}.
+ * As with all instants, it represents an exact point on the time-line,
+ * but limited to the precision of milliseconds. An <code>Instant</code>
+ * should be used to represent a point in time irrespective of any other
+ * factor, such as chronology or time zone.
  * <p>
- * An Instant can be used to compare two <code>DateTime</code> objects:
+ * Internally, the class holds one piece of data, the instant as milliseconds
+ * from the Java epoch of 1970-01-01T00:00:00Z.
+ * <p>
+ * For example, an Instant can be used to compare two <code>DateTime</code>
+ * objects irrespective of chronology or time zone.
  * <pre>
  * boolean sameInstant = dt1.toInstant().equals(dt2.toInstant());
  * </pre>
- * This code will return true if the two <code>DateTime</code> objects represent
- * the same instant regardless of chronology or time zone.
- * <p>
  * Note that the following code will also perform the same check:
  * <pre>
  * boolean sameInstant = dt1.isEqual(dt2);
@@ -214,6 +217,9 @@ public long getMillis() {
 
     /**
      * Gets the chronology of the instant, which is ISO in the UTC zone.
+     * <p>
+     * This method returns {@link ISOChronology#getInstanceUTC()} which
+     * corresponds to the definition of the Java epoch 1970-01-01T00:00:00Z.
      * 
      * @return ISO in the UTC zone
      */
diff --git a/JodaTime/src/java/org/joda/time/LocalDateTime.java b/JodaTime/src/java/org/joda/time/LocalDateTime.java
index 14e9953a8..3850fcb9d 100644
--- a/JodaTime/src/java/org/joda/time/LocalDateTime.java
+++ b/JodaTime/src/java/org/joda/time/LocalDateTime.java
@@ -40,10 +40,9 @@
  * DayOfYear and MillisOfDay.
  * However, <b>all</b> fields may in fact be queried.
  * <p>
- * Internally, LocalDateTime holds the datetime as milliseconds
- * from 1970-01-01T00:00:00. This represents the <i>local</i> millisecond
- * count which differs from the epoch-based millisecond value in a
- * <code>ReadableInstant</code> implementation by the amount of the zone offset.
+ * Internally, LocalDateTime uses a single millisecond-based value to
+ * represent the local datetime. This value is only used internally and
+ * is not exposed to applications.
  * <p>
  * Calculations on LocalDateTime are performed using a {@link Chronology}.
  * This chronology will be set internally to be in the UTC time zone
diff --git a/JodaTime/src/java/org/joda/time/base/AbstractInstant.java b/JodaTime/src/java/org/joda/time/base/AbstractInstant.java
index 1af8d1360..913a45486 100644
--- a/JodaTime/src/java/org/joda/time/base/AbstractInstant.java
+++ b/JodaTime/src/java/org/joda/time/base/AbstractInstant.java
@@ -237,12 +237,17 @@ public Date toDate() {
     //-----------------------------------------------------------------------
     /**
      * Compares this object with the specified object for equality based
-     * on the millisecond instant and the Chronology.
+     * on the millisecond instant, chronology and time zone.
      * <p>
-     * All ReadableInstant instances are accepted.
+     * Two objects which represent the same instant in time, but are in
+     * different time zones (based on time zone id), will be considered to
+     * be different. Only two objects with the same {@link DateTimeZone},
+     * {@link Chronology} and instant are equal.
      * <p>
      * See {@link #isEqual(ReadableInstant)} for an equals method that
-     * ignores the Chronology.
+     * ignores the Chronology and time zone.
+     * <p>
+     * All ReadableInstant instances are accepted.
      *
      * @param readableInstant  a readable instant to check against
      * @return true if millisecond and chronology are equal, false if

From fb7c017200296989396a32c3b9925d6521e09e6e Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 4 Aug 2007 13:54:09 +0000
Subject: [PATCH 060/112] Clarify javadoc, suggested by Neil Martin

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1230 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 5a5bb7fd6..32682435e 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -81,6 +81,8 @@ Bug fixes since 1.4
 
 - DateTimeFormat javadoc now explains time zone parsing restriction better [OpenDiscussion 1721909]
 
+- DateTime/Instant/LocalDateTime javadoc improved
+
 
 Feedback
 --------

From 7755b343d88276ba1a058e14645039daf4642ab2 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 4 Aug 2007 15:15:48 +0000
Subject: [PATCH 061/112] Fix and test LenientChronology to ensure it works
 with time zones bug 1755161

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1231 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |   4 +
 .../joda/time/field/LenientDateTimeField.java |  14 +--
 JodaTime/src/test/org/joda/time/MockZone.java |  56 ++++++++++
 .../time/chrono/TestLenientChronology.java    | 101 ++++++++++++++++++
 4 files changed, 166 insertions(+), 9 deletions(-)
 create mode 100644 JodaTime/src/test/org/joda/time/MockZone.java

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 32682435e..0659a1343 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -56,6 +56,10 @@ None
 
 Bug fixes since 1.4
 -------------------
+- LenientChronology and time zones
+  LenientChronology could throw exceptions when the time being created
+  didn't exist dies to the time zone [1755161]
+
 - LocalDate/LocalTime constructors did not set internal state correctly
   This problem was exposed when Days.daysBetween() and similar methods
   failed to give the right results
diff --git a/JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java b/JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java
index c96498536..34de6df62 100644
--- a/JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java
+++ b/JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2007 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -59,15 +59,11 @@ public final boolean isLenient() {
     }
 
     /**
-     * Set values which may be out of bounds. If the value is out of bounds,
-     * the instant is first set to the minimum allowed value, and then the
-     * difference is added.
+     * Set values which may be out of bounds by adding the difference between
+     * the new value and the current value.
      */
     public long set(long instant, int value) {
-        int min = getMinimumValue(instant);
-        if (value >= min && value <= getMaximumValue(instant)) {
-            return super.set(instant, value);
-        }
-        return add(super.set(instant, min), value - min);
+        long difference = FieldUtils.safeSubtract(value, get(instant));
+        return add(instant, difference);
     }
 }
diff --git a/JodaTime/src/test/org/joda/time/MockZone.java b/JodaTime/src/test/org/joda/time/MockZone.java
new file mode 100644
index 000000000..4915d0586
--- /dev/null
+++ b/JodaTime/src/test/org/joda/time/MockZone.java
@@ -0,0 +1,56 @@
+/*
+ *  Copyright 2001-2007 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time;
+
+public class MockZone extends DateTimeZone {
+
+    long transition;
+    int winterOffset;
+
+    public MockZone(long transition, int winterOffset) {
+        super("MockZone");
+        this.transition = transition;
+        this.winterOffset = winterOffset;
+    }
+
+    public int getOffset(long instant) {
+        return (instant < transition ? winterOffset : winterOffset + 3600000);
+    }
+
+    public int getStandardOffset(long instant) {
+        return winterOffset;
+    }
+
+    public long nextTransition(long instant) {
+        return (instant < transition ? transition : transition + 180L * DateTimeConstants.MILLIS_PER_DAY);
+    }
+
+    public long previousTransition(long instant) {
+        return (instant > transition ? transition : transition - 180L * DateTimeConstants.MILLIS_PER_DAY);
+    }
+
+    public boolean isFixed() {
+        return false;
+    }
+
+    public String getNameKey(long instant) {
+        return null;
+    }
+
+    public boolean equals(Object object) {
+        return false;
+    }
+}
diff --git a/JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java b/JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java
index 2538035d2..531ed1ccc 100644
--- a/JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java
+++ b/JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java
@@ -18,8 +18,10 @@
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
 
+import org.joda.time.Chronology;
 import org.joda.time.DateTime;
 import org.joda.time.DateTimeZone;
+import org.joda.time.MockZone;
 
 /**
  *
@@ -45,6 +47,51 @@ protected void setUp() throws Exception {
     protected void tearDown() throws Exception {
     }
 
+    //-----------------------------------------------------------------------
+    public void test_setYear() {
+        Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC());
+        DateTime dt = new DateTime(2007, 1, 1, 0, 0 ,0, 0, zone);
+        assertEquals("2007-01-01T00:00:00.000Z", dt.toString());
+        dt = dt.withYear(2008);
+        assertEquals("2008-01-01T00:00:00.000Z", dt.toString());
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_setMonthOfYear() {
+        Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC());
+        DateTime dt = new DateTime(2007, 1, 1, 0, 0 ,0, 0, zone);
+        assertEquals("2007-01-01T00:00:00.000Z", dt.toString());
+        dt = dt.withMonthOfYear(13);
+        assertEquals("2008-01-01T00:00:00.000Z", dt.toString());
+        dt = dt.withMonthOfYear(0);
+        assertEquals("2007-12-01T00:00:00.000Z", dt.toString());
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_setDayOfMonth() {
+        Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC());
+        DateTime dt = new DateTime(2007, 1, 1, 0, 0 ,0, 0, zone);
+        assertEquals("2007-01-01T00:00:00.000Z", dt.toString());
+        dt = dt.withDayOfMonth(32);
+        assertEquals("2007-02-01T00:00:00.000Z", dt.toString());
+        dt = dt.withDayOfMonth(0);
+        assertEquals("2007-01-31T00:00:00.000Z", dt.toString());
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_setHourOfDay() {
+        Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC());
+        DateTime dt = new DateTime(2007, 1, 1, 0, 0 ,0, 0, zone);
+        assertEquals("2007-01-01T00:00:00.000Z", dt.toString());
+        dt = dt.withHourOfDay(24);
+        assertEquals("2007-01-02T00:00:00.000Z", dt.toString());
+        dt = dt.withHourOfDay(-1);
+        assertEquals("2007-01-01T23:00:00.000Z", dt.toString());
+    }
+
+    //-----------------------------------------------------------------------
+    //------------------------ Bug ------------------------------------------
+    //-----------------------------------------------------------------------
     public void testNearDstTransition() {
         // This is just a regression test. Test case provided by Blair Martin.
 
@@ -66,4 +113,58 @@ public void testNearDstTransition() {
 
         assertEquals(hour, dt.getHourOfDay()); // Used to fail - hour was 22
     }
+
+    //-----------------------------------------------------------------------
+    //------------------------ Bug [1755161] --------------------------------
+    //-----------------------------------------------------------------------
+    /** Mock zone simulating America/Grand_Turk cutover at midnight 2007-04-01 */
+    private static long CUTOVER_TURK = 1175403600000L;
+    private static int OFFSET_TURK = -18000000;  // -05:00
+    private static final DateTimeZone MOCK_TURK = new MockZone(CUTOVER_TURK, OFFSET_TURK);
+
+    //-----------------------------------------------------------------------
+    public void test_MockTurkIsCorrect() {
+        DateTime pre = new DateTime(CUTOVER_TURK - 1L, MOCK_TURK);
+        assertEquals("2007-03-31T23:59:59.999-05:00", pre.toString());
+        DateTime at = new DateTime(CUTOVER_TURK, MOCK_TURK);
+        assertEquals("2007-04-01T01:00:00.000-04:00", at.toString());
+        DateTime post = new DateTime(CUTOVER_TURK + 1L, MOCK_TURK);
+        assertEquals("2007-04-01T01:00:00.001-04:00", post.toString());
+    }
+
+    public void test_lenientChrononolgy_Chicago() {
+        DateTimeZone zone = DateTimeZone.forID("America/Chicago");
+        Chronology lenient = LenientChronology.getInstance(ISOChronology.getInstance(zone));
+        DateTime dt = new DateTime(2007, 3, 11, 2, 30, 0, 0, lenient);
+        assertEquals("2007-03-11T03:30:00.000-05:00", dt.toString());
+    }
+
+    public void test_lenientChrononolgy_Turk() {
+        Chronology lenient = LenientChronology.getInstance(ISOChronology.getInstance(MOCK_TURK));
+        DateTime dt = new DateTime(2007, 4, 1, 0, 30, 0, 0, lenient);
+        assertEquals("2007-04-01T01:30:00.000-04:00", dt.toString());
+    }
+
+    public void test_strictChrononolgy_Chicago() {
+        DateTimeZone zone = DateTimeZone.forID("America/Chicago");
+        Chronology lenient = StrictChronology.getInstance(ISOChronology.getInstance(zone));
+        try {
+            new DateTime(2007, 3, 11, 2, 30, 0, 0, lenient);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expected
+        }
+    }
+
+    public void test_isoChrononolgy_Chicago() {
+        DateTimeZone zone = DateTimeZone.forID("America/Chicago");
+        Chronology lenient = ISOChronology.getInstance(zone);
+        try {
+            new DateTime(2007, 3, 11, 2, 30, 0, 0, lenient);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expected
+        }
+    }
+
 }

From c41eff1e6026a6e0b88ea45edda3e41eecc6ac7b Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 4 Aug 2007 17:23:22 +0000
Subject: [PATCH 062/112] Fix DateTimeZone to better handle spring DST cutover
 bugs 1710316, 1747219, 1755158

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1232 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  15 +-
 .../src/java/org/joda/time/DateTimeZone.java  | 106 ++-
 .../joda/time/IllegalFieldValueException.java |  32 +-
 .../joda/time/chrono/LenientChronology.java   |   4 +-
 .../org/joda/time/chrono/ZonedChronology.java | 129 ++-
 .../joda/time/field/LenientDateTimeField.java |  16 +-
 JodaTime/src/test/org/joda/time/TestAll.java  |   1 +
 .../joda/time/TestDateTimeZoneCutover.java    | 775 ++++++++++++++++++
 8 files changed, 998 insertions(+), 80 deletions(-)
 create mode 100644 JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 0659a1343..9a7ba070e 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -35,9 +35,13 @@ Enhancements since 1.4
 
 Compatibility with 1.4
 ----------------------
-Binary compatible - Yes
+Binary compatible - Yes, except
+  Internal class LenientDateTimeField has an incompatible change to
+  getInstance() and the constructor
 
-Source compatible - Yes
+Source compatible - Yes, except
+  Internal class LenientDateTimeField has an incompatible change to
+  getInstance() and the constructor
 
 Serialization compatible - Yes
 
@@ -56,6 +60,13 @@ None
 
 Bug fixes since 1.4
 -------------------
+- Daylight savings cutover in Spring incorrect
+  A problem with DST cutover in Spring meant that the result of many
+  methods would be different depending on whether the time zone was in the
+  Eastern or Western hemisphere. Now, the DST cutover is consistent, such
+  that if a time is requested within the cutover, it will be pushed forwards
+  into summer time. [1710316, 1747219, 1755158]
+
 - LenientChronology and time zones
   LenientChronology could throw exceptions when the time being created
   didn't exist dies to the time zone [1755161]
diff --git a/JodaTime/src/java/org/joda/time/DateTimeZone.java b/JodaTime/src/java/org/joda/time/DateTimeZone.java
index 06b667a16..fc706fb21 100644
--- a/JodaTime/src/java/org/joda/time/DateTimeZone.java
+++ b/JodaTime/src/java/org/joda/time/DateTimeZone.java
@@ -31,6 +31,7 @@
 import org.joda.time.chrono.BaseChronology;
 import org.joda.time.chrono.ISOChronology;
 import org.joda.time.field.FieldUtils;
+import org.joda.time.format.DateTimeFormat;
 import org.joda.time.format.DateTimeFormatter;
 import org.joda.time.format.DateTimeFormatterBuilder;
 import org.joda.time.format.FormatUtils;
@@ -830,16 +831,117 @@ public boolean isStandardOffset(long instant) {
      * millisUTC   == millisLocal - getOffsetFromLocal(millisLocal)
      * </pre>
      *
-     * Note: After calculating millisLocal, some error may be introduced. At
+     * NOTE: After calculating millisLocal, some error may be introduced. At
      * offset transitions (due to DST or other historical changes), ranges of
      * local times may map to different UTC times.
+     * <p>
+     * This method will return an offset suitable for calculating an instant
+     * after any DST gap. For example, consider a zone with a cutover
+     * from 01:00 to 01:59:<br />
+     * Input: 00:00  Output: 00:00<br />
+     * Input: 00:30  Output: 00:30<br />
+     * Input: 01:00  Output: 02:00<br />
+     * Input: 01:30  Output: 02:30<br />
+     * Input: 02:00  Output: 02:00<br />
+     * Input: 02:30  Output: 02:30<br />
+     * <p>
+     * NOTE: The behaviour of this method changed in v1.5, with the emphasis
+     * on returning a consistent result later along the time-line (shown above).
      *
      * @param instantLocal  the millisecond instant, relative to this time zone, to
      * get the offset for
      * @return the millisecond offset to subtract from local time to get UTC time
      */
     public int getOffsetFromLocal(long instantLocal) {
-        return getOffset(instantLocal - getOffset(instantLocal));
+        // get the offset at instantLocal (first estimate)
+        int offsetLocal = getOffset(instantLocal);
+        // adjust instantLocal using the estimate and recalc the offset
+        int offsetAdjusted = getOffset(instantLocal - offsetLocal);
+        // if the offsets differ, we must be near a DST boundary
+        if (offsetLocal != offsetAdjusted) {
+            // we need to ensure that time is always after the DST gap
+            // this happens naturally for positive offsets, but not for negative
+            if (offsetLocal < 0) {
+                // if we just return offsetAdjusted then the time is pushed
+                // back before the transition, whereas it should be
+                // on or after the transition
+                long nextLocal = nextTransition(instantLocal - offsetLocal);
+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
+                if (nextLocal != nextAdjusted) {
+                    return offsetLocal;
+                }
+            }
+        }
+        return offsetAdjusted;
+    }
+
+    /**
+     * Converts a standard UTC instant to a local instant with the same
+     * local time. This conversion is used before performing a calculation
+     * so that the calculation can be done using a simple local zone.
+     *
+     * @param instantUTC  the UTC instant to convert to local
+     * @return the local instant with the same local time
+     * @throws ArithmeticException if the result overflows a long
+     */
+    public long convertUTCToLocal(long instantUTC) {
+        int offset = getOffset(instantUTC);
+        long instantLocal = instantUTC + offset;
+        // If there is a sign change, but the two values have the same sign...
+        if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {
+            throw new ArithmeticException("Adding time zone offset caused overflow");
+        }
+        return instantLocal;
+    }
+
+    /**
+     * Converts a local instant to a standard UTC instant with the same
+     * local time. This conversion is used after performing a calculation
+     * where the calculation was done using a simple local zone.
+     *
+     * @param instantLocal  the local instant to convert to UTC
+     * @param strict  whether the conversion should reject non-existent local times
+     * @return the UTC instant with the same local time, 
+     * @throws ArithmeticException if the result overflows a long
+     * @throws IllegalArgumentException if the zone has no eqivalent local time
+     */
+    public long convertLocalToUTC(long instantLocal, boolean strict) {
+        // get the offset at instantLocal (first estimate)
+        int offsetLocal = getOffset(instantLocal);
+        // adjust instantLocal using the estimate and recalc the offset
+        int offset = getOffset(instantLocal - offsetLocal);
+        // if the offsets differ, we must be near a DST boundary
+        if (offsetLocal != offset) {
+            // if strict then always check if in DST gap
+            // otherwise only check if zone in Western hemisphere (as the
+            // value of offset is already correct for Eastern hemisphere)
+            if (strict || offsetLocal < 0) {
+                // determine if we are in the DST gap
+                long nextLocal = nextTransition(instantLocal - offsetLocal);
+                long nextAdjusted = nextTransition(instantLocal - offset);
+                if (nextLocal != nextAdjusted) {
+                    // yes we are in the DST gap
+                    if (strict) {
+                        // DST gap is not acceptable
+                        throw new IllegalArgumentException("Illegal instant due to time zone offset transition: " +
+                                DateTimeFormat.forPattern("yyyy-MM-dd'T'HH:mm:ss.SSS").print(new Instant(instantLocal)) +
+                                " (" + getID() + ")");
+                    } else {
+                        // DST gap is acceptable, but for the Western hemisphere
+                        // the offset is wrong and will result in local times
+                        // before the cutover so use the offsetLocal instead
+                        offset = offsetLocal;
+                    }
+                }
+            }
+        }
+        // check for overflow
+        long instantUTC = instantLocal - offset;
+        // If there is a sign change, but the two values have different signs...
+        if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {
+            throw new ArithmeticException("Subtracting time zone offset caused overflow");
+        }
+        return instantUTC;
     }
 
     /**
diff --git a/JodaTime/src/java/org/joda/time/IllegalFieldValueException.java b/JodaTime/src/java/org/joda/time/IllegalFieldValueException.java
index 1cf71f066..3b47ef23d 100644
--- a/JodaTime/src/java/org/joda/time/IllegalFieldValueException.java
+++ b/JodaTime/src/java/org/joda/time/IllegalFieldValueException.java
@@ -33,10 +33,11 @@
      * @param value  the value rejected
      * @param lowerBound  the lower bound allowed
      * @param upperBound  the uppe bound allowed
+     * @param explain  an explanation
      * @return the message
      */
     private static String createMessage(String fieldName, Number value,
-                                        Number lowerBound, Number upperBound) {
+                                        Number lowerBound, Number upperBound, String explain) {
         StringBuffer buf = new StringBuffer()
             .append("Value ").append(value).append(" for ").append(fieldName).append(' ');
 
@@ -55,6 +56,9 @@ private static String createMessage(String fieldName, Number value,
                 .append(upperBound)
                 .append(']');
         }
+        if (explain != null) {
+            buf.append(": ").append(explain);
+        }
 
         return buf.toString();
     }
@@ -101,7 +105,7 @@ private static String createMessage(String fieldName, String value) {
      */
     public IllegalFieldValueException(DateTimeFieldType fieldType,
                                       Number value, Number lowerBound, Number upperBound) {
-        super(createMessage(fieldType.getName(), value, lowerBound, upperBound));
+        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));
         iDateTimeFieldType = fieldType;
         iDurationFieldType = null;
         iFieldName = fieldType.getName();
@@ -112,6 +116,26 @@ public IllegalFieldValueException(DateTimeFieldType fieldType,
         iMessage = super.getMessage();
     }
 
+    /**
+     * Constructor.
+     * 
+     * @param fieldType  type of field being set
+     * @param value  illegal value being set
+     * @param explain  an explanation
+     */
+    public IllegalFieldValueException(DateTimeFieldType fieldType,
+                                      Number value, String explain) {
+        super(createMessage(fieldType.getName(), value, null, null, explain));
+        iDateTimeFieldType = fieldType;
+        iDurationFieldType = null;
+        iFieldName = fieldType.getName();
+        iNumberValue = value;
+        iStringValue = null;
+        iLowerBound = null;
+        iUpperBound = null;
+        iMessage = super.getMessage();
+    }
+
     /**
      * Constructor.
      * 
@@ -122,7 +146,7 @@ public IllegalFieldValueException(DateTimeFieldType fieldType,
      */
     public IllegalFieldValueException(DurationFieldType fieldType,
                                       Number value, Number lowerBound, Number upperBound) {
-        super(createMessage(fieldType.getName(), value, lowerBound, upperBound));
+        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));
         iDateTimeFieldType = null;
         iDurationFieldType = fieldType;
         iFieldName = fieldType.getName();
@@ -143,7 +167,7 @@ public IllegalFieldValueException(DurationFieldType fieldType,
      */
     public IllegalFieldValueException(String fieldName,
                                       Number value, Number lowerBound, Number upperBound) {
-        super(createMessage(fieldName, value, lowerBound, upperBound));
+        super(createMessage(fieldName, value, lowerBound, upperBound, null));
         iDateTimeFieldType = null;
         iDurationFieldType = null;
         iFieldName = fieldName;
diff --git a/JodaTime/src/java/org/joda/time/chrono/LenientChronology.java b/JodaTime/src/java/org/joda/time/chrono/LenientChronology.java
index 31b0856b7..f072d586f 100644
--- a/JodaTime/src/java/org/joda/time/chrono/LenientChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/LenientChronology.java
@@ -110,8 +110,8 @@ protected void assemble(Fields fields) {
         fields.halfdayOfDay = convertField(fields.halfdayOfDay);
     }
 
-    private static final DateTimeField convertField(DateTimeField field) {
-        return LenientDateTimeField.getInstance(field);
+    private final DateTimeField convertField(DateTimeField field) {
+        return LenientDateTimeField.getInstance(field, getBase());
     }
 
     //-----------------------------------------------------------------------
diff --git a/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java b/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java
index f5f487a86..3fc6b30c0 100644
--- a/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java
@@ -361,13 +361,7 @@ private int getOffsetFromLocalToSubtract(long instant) {
         }
 
         private long addOffset(long instant) {
-            int offset = this.iZone.getOffset(instant);
-            long sum = instant + offset;
-            // If there is a sign change, but the two values have the same sign...
-            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {
-                throw new ArithmeticException("Adding time zone offset caused overflow");
-            }
-            return sum;
+            return iZone.convertUTCToLocal(instant);
         }
     }
 
@@ -409,15 +403,18 @@ public boolean isLenient() {
         }
 
         public int get(long instant) {
-            return iField.get(addOffset(instant));
+            long localInstant = iZone.convertUTCToLocal(instant);
+            return iField.get(localInstant);
         }
 
         public String getAsText(long instant, Locale locale) {
-            return iField.getAsText(addOffset(instant), locale);
+            long localInstant = iZone.convertUTCToLocal(instant);
+            return iField.getAsText(localInstant, locale);
         }
 
         public String getAsShortText(long instant, Locale locale) {
-            return iField.getAsShortText(addOffset(instant), locale);
+            long localInstant = iZone.convertUTCToLocal(instant);
+            return iField.getAsShortText(localInstant, locale);
         }
 
         public String getAsText(int fieldValue, Locale locale) {
@@ -429,44 +426,59 @@ public String getAsShortText(int fieldValue, Locale locale) {
         }
 
         public long add(long instant, int value) {
-            int offset = getOffsetToAdd(instant);
-            instant = iField.add(instant + offset, value);
-            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));
+            if (iTimeField) {
+                int offset = getOffsetToAdd(instant);
+                long localInstant = iField.add(instant + offset, value);
+                return localInstant - offset;
+            } else {
+               long localInstant = iZone.convertUTCToLocal(instant);
+               localInstant = iField.add(localInstant, value);
+               return iZone.convertLocalToUTC(localInstant, false);
+            }
         }
 
         public long add(long instant, long value) {
-            int offset = getOffsetToAdd(instant);
-            instant = iField.add(instant + offset, value);
-            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));
+            if (iTimeField) {
+                int offset = getOffsetToAdd(instant);
+                long localInstant = iField.add(instant + offset, value);
+                return localInstant - offset;
+            } else {
+               long localInstant = iZone.convertUTCToLocal(instant);
+               localInstant = iField.add(localInstant, value);
+               return iZone.convertLocalToUTC(localInstant, false);
+            }
         }
 
         public long addWrapField(long instant, int value) {
-            int offset = getOffsetToAdd(instant);
-            instant = iField.addWrapField(instant + offset, value);
-            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));
+            if (iTimeField) {
+                int offset = getOffsetToAdd(instant);
+                long localInstant = iField.addWrapField(instant + offset, value);
+                return localInstant - offset;
+            } else {
+                long localInstant = iZone.convertUTCToLocal(instant);
+                localInstant = iField.addWrapField(localInstant, value);
+                return iZone.convertLocalToUTC(localInstant, false);
+            }
         }
 
         public long set(long instant, int value) {
-            long offset = getOffsetToAdd(instant);
-
-            instant = iField.set(instant + offset, value);
-            long offsetFromLocal = getOffsetFromLocalToSubtract(instant);
-            instant -= offsetFromLocal;
-
-            if (offset != offsetFromLocal) {
-                if (get(instant) != value) {
-                    throw new IllegalFieldValueException
-                        (iField.getType(), new Integer(value), null, null);
-                }
+            long localInstant = iZone.convertUTCToLocal(instant);
+            localInstant = iField.set(localInstant, value);
+            long result = iZone.convertLocalToUTC(localInstant, false);
+            if (get(result) != value) {
+                throw new IllegalFieldValueException(iField.getType(), new Integer(value),
+                    "Illegal instant due to time zone offset transition: " +
+                    DateTimeFormat.forPattern("yyyy-MM-dd'T'HH:mm:ss.SSS").print(new Instant(localInstant)) +
+                    " (" + iZone.getID() + ")");
             }
-
-            return instant;
+            return result;
         }
 
         public long set(long instant, String text, Locale locale) {
-            instant = iField.set(addOffset(instant), text, locale);
-            // Cannot verify that new value stuck because set may be lenient.
-            return instant - getOffsetFromLocalToSubtract(instant);
+            // cannot verify that new value stuck because set may be lenient
+            long localInstant = iZone.convertUTCToLocal(instant);
+            localInstant = iField.set(localInstant, text, locale);
+            return iZone.convertLocalToUTC(localInstant, false);
         }
 
         public int getDifference(long minuendInstant, long subtrahendInstant) {
@@ -492,11 +504,13 @@ public final DurationField getRangeDurationField() {
         }
 
         public boolean isLeap(long instant) {
-            return iField.isLeap(addOffset(instant));
+            long localInstant = iZone.convertUTCToLocal(instant);
+            return iField.isLeap(localInstant);
         }
 
         public int getLeapAmount(long instant) {
-            return iField.getLeapAmount(addOffset(instant));
+            long localInstant = iZone.convertUTCToLocal(instant);
+            return iField.getLeapAmount(localInstant);
         }
 
         public final DurationField getLeapDurationField() {
@@ -504,19 +518,20 @@ public final DurationField getLeapDurationField() {
         }
 
         public long roundFloor(long instant) {
-            int offset = getOffsetToAdd(instant);
-            instant = iField.roundFloor(instant + offset);
-            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));
+            long localInstant = iZone.convertUTCToLocal(instant);
+            localInstant = iField.roundFloor(localInstant);
+            return iZone.convertLocalToUTC(localInstant, false);
         }
 
         public long roundCeiling(long instant) {
-            int offset = getOffsetToAdd(instant);
-            instant = iField.roundCeiling(instant + offset);
-            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));
+            long localInstant = iZone.convertUTCToLocal(instant);
+            localInstant = iField.roundCeiling(localInstant);
+            return iZone.convertLocalToUTC(localInstant, false);
         }
 
         public long remainder(long instant) {
-            return iField.remainder(addOffset(instant));
+            long localInstant = iZone.convertUTCToLocal(instant);
+            return iField.remainder(localInstant);
         }
 
         public int getMinimumValue() {
@@ -524,7 +539,8 @@ public int getMinimumValue() {
         }
 
         public int getMinimumValue(long instant) {
-            return iField.getMinimumValue(addOffset(instant));
+            long localInstant = iZone.convertUTCToLocal(instant);
+            return iField.getMinimumValue(localInstant);
         }
 
         public int getMinimumValue(ReadablePartial instant) {
@@ -540,7 +556,8 @@ public int getMaximumValue() {
         }
 
         public int getMaximumValue(long instant) {
-            return iField.getMaximumValue(addOffset(instant));
+            long localInstant = iZone.convertUTCToLocal(instant);
+            return iField.getMaximumValue(localInstant);
         }
 
         public int getMaximumValue(ReadablePartial instant) {
@@ -568,26 +585,6 @@ private int getOffsetToAdd(long instant) {
             }
             return offset;
         }
-
-        private int getOffsetFromLocalToSubtract(long instant) {
-            int offset = this.iZone.getOffsetFromLocal(instant);
-            long diff = instant - offset;
-            // If there is a sign change, but the two values have different signs...
-            if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {
-                throw new ArithmeticException("Subtracting time zone offset caused overflow");
-            }
-            return offset;
-        }
-
-        private long addOffset(long instant) {
-            int offset = this.iZone.getOffset(instant);
-            long sum = instant + offset;
-            // If there is a sign change, but the two values have the same sign...
-            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {
-                throw new ArithmeticException("Adding time zone offset caused overflow");
-            }
-            return sum;
-        }
     }
 
 }
diff --git a/JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java b/JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java
index 34de6df62..450a4eff2 100644
--- a/JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java
+++ b/JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java
@@ -15,6 +15,7 @@
  */
 package org.joda.time.field;
 
+import org.joda.time.Chronology;
 import org.joda.time.DateTimeField;
 
 /**
@@ -32,12 +33,14 @@
 
     private static final long serialVersionUID = 8714085824173290599L;
 
+    private final Chronology iBase;
+
     /**
      * Returns a lenient version of the given field. If it is already lenient,
      * then it is returned as-is. Otherwise, a new LenientDateTimeField is
      * returned.
      */
-    public static DateTimeField getInstance(DateTimeField field) {
+    public static DateTimeField getInstance(DateTimeField field, Chronology base) {
         if (field == null) {
             return null;
         }
@@ -47,11 +50,12 @@ public static DateTimeField getInstance(DateTimeField field) {
         if (field.isLenient()) {
             return field;
         }
-        return new LenientDateTimeField(field);
+        return new LenientDateTimeField(field, base);
     }
 
-    protected LenientDateTimeField(DateTimeField field) {
+    protected LenientDateTimeField(DateTimeField field, Chronology base) {
         super(field);
+        iBase = base;
     }
 
     public final boolean isLenient() {
@@ -63,7 +67,11 @@ public final boolean isLenient() {
      * the new value and the current value.
      */
     public long set(long instant, int value) {
+        // lenient needs to handle time zone chronologies
+        // so we do the calculation using local milliseconds
+        long localInstant = iBase.getZone().convertUTCToLocal(instant);
         long difference = FieldUtils.safeSubtract(value, get(instant));
-        return add(instant, difference);
+        localInstant = getType().getField(iBase.withUTC()).add(localInstant, difference);
+        return iBase.getZone().convertLocalToUTC(localInstant, false);
     }
 }
diff --git a/JodaTime/src/test/org/joda/time/TestAll.java b/JodaTime/src/test/org/joda/time/TestAll.java
index 56299b3c6..a1a1ce524 100644
--- a/JodaTime/src/test/org/joda/time/TestAll.java
+++ b/JodaTime/src/test/org/joda/time/TestAll.java
@@ -113,6 +113,7 @@ public static Test suite() {
         suite.addTest(TestDateTimeConstants.suite());
         suite.addTest(TestDateTimeUtils.suite());
         suite.addTest(TestDateTimeZone.suite());
+        suite.addTest(TestDateTimeZoneCutover.suite());
         suite.addTest(TestPeriodType.suite());
 //        suite.addTest(TestParseISO.suite());
         suite.addTest(TestDurationField.suite());
diff --git a/JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java b/JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java
new file mode 100644
index 000000000..890f347dc
--- /dev/null
+++ b/JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java
@@ -0,0 +1,775 @@
+/*
+ *  Copyright 2001-2007 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time;
+
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+import org.joda.time.chrono.ISOChronology;
+import org.joda.time.chrono.LenientChronology;
+import org.joda.time.chrono.StrictChronology;
+
+/**
+ * This class is a JUnit test for DateTimeZone.
+ *
+ * @author Stephen Colebourne
+ */
+public class TestDateTimeZoneCutover extends TestCase {
+
+    public static void main(String[] args) {
+        junit.textui.TestRunner.run(suite());
+    }
+
+    public static TestSuite suite() {
+        return new TestSuite(TestDateTimeZoneCutover.class);
+    }
+
+    public TestDateTimeZoneCutover(String name) {
+        super(name);
+    }
+
+    protected void setUp() throws Exception {
+    }
+
+    protected void tearDown() throws Exception {
+    }
+
+    //-----------------------------------------------------------------------
+    //------------------------ Bug [1710316] --------------------------------
+    //-----------------------------------------------------------------------
+    // The behaviour of getOffsetFromLocal is defined in its javadoc
+    // However, this definition doesn't work for all DateTimeField operations
+    
+    /** Mock zone simulating Asia/Gaza cutover at midnight 2007-04-01 */
+    private static long CUTOVER_GAZA = 1175378400000L;
+    private static int OFFSET_GAZA = 7200000;  // +02:00
+    private static final DateTimeZone MOCK_GAZA = new MockZone(CUTOVER_GAZA, OFFSET_GAZA);
+
+    //-----------------------------------------------------------------------
+    public void test_MockGazaIsCorrect() {
+        DateTime pre = new DateTime(CUTOVER_GAZA - 1L, MOCK_GAZA);
+        assertEquals("2007-03-31T23:59:59.999+02:00", pre.toString());
+        DateTime at = new DateTime(CUTOVER_GAZA, MOCK_GAZA);
+        assertEquals("2007-04-01T01:00:00.000+03:00", at.toString());
+        DateTime post = new DateTime(CUTOVER_GAZA + 1L, MOCK_GAZA);
+        assertEquals("2007-04-01T01:00:00.001+03:00", post.toString());
+    }
+
+    public void test_getOffsetFromLocal_Gaza() {
+        doTest_getOffsetFromLocal_Gaza(-1, 23, 0, "2007-03-31T23:00:00.000+02:00");
+        doTest_getOffsetFromLocal_Gaza(-1, 23, 30, "2007-03-31T23:30:00.000+02:00");
+        doTest_getOffsetFromLocal_Gaza(0, 0, 0, "2007-04-01T01:00:00.000+03:00");
+        doTest_getOffsetFromLocal_Gaza(0, 0, 30, "2007-04-01T01:30:00.000+03:00");
+        doTest_getOffsetFromLocal_Gaza(0, 1, 0, "2007-04-01T01:00:00.000+03:00");
+        doTest_getOffsetFromLocal_Gaza(0, 1, 30, "2007-04-01T01:30:00.000+03:00");
+        doTest_getOffsetFromLocal_Gaza(0, 2, 0, "2007-04-01T02:00:00.000+03:00");
+        doTest_getOffsetFromLocal_Gaza(0, 3, 0, "2007-04-01T03:00:00.000+03:00");
+        doTest_getOffsetFromLocal_Gaza(0, 4, 0, "2007-04-01T04:00:00.000+03:00");
+        doTest_getOffsetFromLocal_Gaza(0, 5, 0, "2007-04-01T05:00:00.000+03:00");
+        doTest_getOffsetFromLocal_Gaza(0, 6, 0, "2007-04-01T06:00:00.000+03:00");
+    }
+
+    private void doTest_getOffsetFromLocal_Gaza(int days, int hour, int min, String expected) {
+        DateTime dt = new DateTime(2007, 4, 1, hour, min, 0, 0, DateTimeZone.UTC).plusDays(days);
+        int offset = MOCK_GAZA.getOffsetFromLocal(dt.getMillis());
+        DateTime res = new DateTime(dt.getMillis() - offset, MOCK_GAZA);
+        assertEquals(res.toString(), expected, res.toString());
+    }
+
+    public void test_DateTime_roundFloor_Gaza() {
+        DateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_GAZA);
+        assertEquals("2007-04-01T08:00:00.000+03:00", dt.toString());
+        DateTime rounded = dt.dayOfMonth().roundFloorCopy();
+        assertEquals("2007-04-01T01:00:00.000+03:00", rounded.toString());
+    }
+
+    public void test_DateTime_roundCeiling_Gaza() {
+        DateTime dt = new DateTime(2007, 3, 31, 20, 0, 0, 0, MOCK_GAZA);
+        assertEquals("2007-03-31T20:00:00.000+02:00", dt.toString());
+        DateTime rounded = dt.dayOfMonth().roundCeilingCopy();
+        assertEquals("2007-04-01T01:00:00.000+03:00", rounded.toString());
+    }
+
+    public void test_DateTime_setHourZero_Gaza() {
+        DateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_GAZA);
+        assertEquals("2007-04-01T08:00:00.000+03:00", dt.toString());
+        try {
+            dt.hourOfDay().setCopy(0);
+            fail();
+        } catch (IllegalFieldValueException ex) {
+            // expected
+        }
+    }
+
+    public void test_DateTime_withHourZero_Gaza() {
+        DateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_GAZA);
+        assertEquals("2007-04-01T08:00:00.000+03:00", dt.toString());
+        try {
+            dt.withHourOfDay(0);
+            fail();
+        } catch (IllegalFieldValueException ex) {
+            // expected
+        }
+    }
+
+    public void test_DateTime_withDay_Gaza() {
+        DateTime dt = new DateTime(2007, 4, 2, 0, 0, 0, 0, MOCK_GAZA);
+        assertEquals("2007-04-02T00:00:00.000+03:00", dt.toString());
+        DateTime res = dt.withDayOfMonth(1);
+        assertEquals("2007-04-01T01:00:00.000+03:00", res.toString());
+    }
+
+    public void test_DateTime_minusHour_Gaza() {
+        DateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_GAZA);
+        assertEquals("2007-04-01T08:00:00.000+03:00", dt.toString());
+        
+        DateTime minus7 = dt.minusHours(7);
+        assertEquals("2007-04-01T01:00:00.000+03:00", minus7.toString());
+        DateTime minus8 = dt.minusHours(8);
+        assertEquals("2007-03-31T23:00:00.000+02:00", minus8.toString());
+        DateTime minus9 = dt.minusHours(9);
+        assertEquals("2007-03-31T22:00:00.000+02:00", minus9.toString());
+    }
+
+    public void test_DateTime_plusHour_Gaza() {
+        DateTime dt = new DateTime(2007, 3, 31, 16, 0, 0, 0, MOCK_GAZA);
+        assertEquals("2007-03-31T16:00:00.000+02:00", dt.toString());
+        
+        DateTime plus7 = dt.plusHours(7);
+        assertEquals("2007-03-31T23:00:00.000+02:00", plus7.toString());
+        DateTime plus8 = dt.plusHours(8);
+        assertEquals("2007-04-01T01:00:00.000+03:00", plus8.toString());
+        DateTime plus9 = dt.plusHours(9);
+        assertEquals("2007-04-01T02:00:00.000+03:00", plus9.toString());
+    }
+
+    public void test_DateTime_minusDay_Gaza() {
+        DateTime dt = new DateTime(2007, 4, 2, 0, 0, 0, 0, MOCK_GAZA);
+        assertEquals("2007-04-02T00:00:00.000+03:00", dt.toString());
+        
+        DateTime minus1 = dt.minusDays(1);
+        assertEquals("2007-04-01T01:00:00.000+03:00", minus1.toString());
+        DateTime minus2 = dt.minusDays(2);
+        assertEquals("2007-03-31T00:00:00.000+02:00", minus2.toString());
+    }
+
+    public void test_DateTime_plusDay_Gaza() {
+        DateTime dt = new DateTime(2007, 3, 31, 0, 0, 0, 0, MOCK_GAZA);
+        assertEquals("2007-03-31T00:00:00.000+02:00", dt.toString());
+        
+        DateTime plus1 = dt.plusDays(1);
+        assertEquals("2007-04-01T01:00:00.000+03:00", plus1.toString());
+        DateTime plus2 = dt.plusDays(2);
+        assertEquals("2007-04-02T00:00:00.000+03:00", plus2.toString());
+    }
+
+    public void test_DateTime_plusDayMidGap_Gaza() {
+        DateTime dt = new DateTime(2007, 3, 31, 0, 30, 0, 0, MOCK_GAZA);
+        assertEquals("2007-03-31T00:30:00.000+02:00", dt.toString());
+        
+        DateTime plus1 = dt.plusDays(1);
+        assertEquals("2007-04-01T01:30:00.000+03:00", plus1.toString());
+        DateTime plus2 = dt.plusDays(2);
+        assertEquals("2007-04-02T00:30:00.000+03:00", plus2.toString());
+    }
+
+    public void test_DateTime_addWrapFieldDay_Gaza() {
+        DateTime dt = new DateTime(2007, 4, 30, 0, 0, 0, 0, MOCK_GAZA);
+        assertEquals("2007-04-30T00:00:00.000+03:00", dt.toString());
+        
+        DateTime plus1 = dt.dayOfMonth().addWrapFieldToCopy(1);
+        assertEquals("2007-04-01T01:00:00.000+03:00", plus1.toString());
+        DateTime plus2 = dt.dayOfMonth().addWrapFieldToCopy(2);
+        assertEquals("2007-04-02T00:00:00.000+03:00", plus2.toString());
+    }
+
+    public void test_DateTime_withZoneRetainFields_Gaza() {
+        DateTime dt = new DateTime(2007, 4, 1, 0, 0, 0, 0, DateTimeZone.UTC);
+        assertEquals("2007-04-01T00:00:00.000Z", dt.toString());
+        
+        DateTime res = dt.withZoneRetainFields(MOCK_GAZA);
+        assertEquals("2007-04-01T01:00:00.000+03:00", res.toString());
+    }
+
+    public void test_MutableDateTime_withZoneRetainFields_Gaza() {
+        MutableDateTime dt = new MutableDateTime(2007, 4, 1, 0, 0, 0, 0, DateTimeZone.UTC);
+        assertEquals("2007-04-01T00:00:00.000Z", dt.toString());
+        
+        dt.setZoneRetainFields(MOCK_GAZA);
+        assertEquals("2007-04-01T01:00:00.000+03:00", dt.toString());
+    }
+
+    public void test_LocalDate_new_Gaza() {
+        LocalDate date1 = new LocalDate(CUTOVER_GAZA, MOCK_GAZA);
+        assertEquals("2007-04-01", date1.toString());
+        
+        LocalDate date2 = new LocalDate(CUTOVER_GAZA - 1, MOCK_GAZA);
+        assertEquals("2007-03-31", date2.toString());
+    }
+
+    public void test_LocalDate_toDateTimeAtMidnight_Gaza() {
+        LocalDate date = new LocalDate(2007, 4, 1);
+        try {
+            date.toDateTimeAtMidnight(MOCK_GAZA);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            assertEquals(true, ex.getMessage().startsWith("Illegal instant due to time zone offset transition"));
+        }
+    }
+
+    public void test_LocalDate_toDateMidnight_Gaza() {
+        LocalDate date = new LocalDate(2007, 4, 1);
+        try {
+            date.toDateMidnight(MOCK_GAZA);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            assertEquals(true, ex.getMessage().startsWith("Illegal instant due to time zone offset transition"));
+        }
+    }
+
+    public void test_DateTime_new_Gaza() {
+        try {
+            new DateTime(2007, 4, 1, 0, 0, 0, 0, MOCK_GAZA);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            assertEquals(true, ex.getMessage().indexOf("Illegal instant due to time zone offset transition") >= 0);
+        }
+    }
+
+    public void test_DateTime_newValid_Gaza() {
+        new DateTime(2007, 3, 31, 19, 0, 0, 0, MOCK_GAZA);
+        new DateTime(2007, 3, 31, 20, 0, 0, 0, MOCK_GAZA);
+        new DateTime(2007, 3, 31, 21, 0, 0, 0, MOCK_GAZA);
+        new DateTime(2007, 3, 31, 22, 0, 0, 0, MOCK_GAZA);
+        new DateTime(2007, 3, 31, 23, 0, 0, 0, MOCK_GAZA);
+        new DateTime(2007, 4, 1, 1, 0, 0, 0, MOCK_GAZA);
+        new DateTime(2007, 4, 1, 2, 0, 0, 0, MOCK_GAZA);
+        new DateTime(2007, 4, 1, 3, 0, 0, 0, MOCK_GAZA);
+    }
+
+    public void test_DateTime_parse_Gaza() {
+        try {
+            new DateTime("2007-04-01T00:00", MOCK_GAZA);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            assertEquals(true, ex.getMessage().indexOf("Illegal instant due to time zone offset transition") >= 0);
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    //------------------------ Bug [1710316] --------------------------------
+    //-----------------------------------------------------------------------
+    /** Mock zone simulating America/Grand_Turk cutover at midnight 2007-04-01 */
+    private static long CUTOVER_TURK = 1175403600000L;
+    private static int OFFSET_TURK = -18000000;  // -05:00
+    private static final DateTimeZone MOCK_TURK = new MockZone(CUTOVER_TURK, OFFSET_TURK);
+
+    //-----------------------------------------------------------------------
+    public void test_MockTurkIsCorrect() {
+        DateTime pre = new DateTime(CUTOVER_TURK - 1L, MOCK_TURK);
+        assertEquals("2007-03-31T23:59:59.999-05:00", pre.toString());
+        DateTime at = new DateTime(CUTOVER_TURK, MOCK_TURK);
+        assertEquals("2007-04-01T01:00:00.000-04:00", at.toString());
+        DateTime post = new DateTime(CUTOVER_TURK + 1L, MOCK_TURK);
+        assertEquals("2007-04-01T01:00:00.001-04:00", post.toString());
+    }
+
+    public void test_getOffsetFromLocal_Turk() {
+        doTest_getOffsetFromLocal_Turk(-1, 23, 0, "2007-03-31T23:00:00.000-05:00");
+        doTest_getOffsetFromLocal_Turk(-1, 23, 30, "2007-03-31T23:30:00.000-05:00");
+        doTest_getOffsetFromLocal_Turk(0, 0, 0, "2007-04-01T01:00:00.000-04:00");
+        doTest_getOffsetFromLocal_Turk(0, 0, 30, "2007-04-01T01:30:00.000-04:00");
+        doTest_getOffsetFromLocal_Turk(0, 1, 0, "2007-04-01T01:00:00.000-04:00");
+        doTest_getOffsetFromLocal_Turk(0, 1, 30, "2007-04-01T01:30:00.000-04:00");
+        doTest_getOffsetFromLocal_Turk(0, 2, 0, "2007-04-01T02:00:00.000-04:00");
+        doTest_getOffsetFromLocal_Turk(0, 3, 0, "2007-04-01T03:00:00.000-04:00");
+        doTest_getOffsetFromLocal_Turk(0, 4, 0, "2007-04-01T04:00:00.000-04:00");
+        doTest_getOffsetFromLocal_Turk(0, 5, 0, "2007-04-01T05:00:00.000-04:00");
+        doTest_getOffsetFromLocal_Turk(0, 6, 0, "2007-04-01T06:00:00.000-04:00");
+    }
+
+    private void doTest_getOffsetFromLocal_Turk(int days, int hour, int min, String expected) {
+        DateTime dt = new DateTime(2007, 4, 1, hour, min, 0, 0, DateTimeZone.UTC).plusDays(days);
+        int offset = MOCK_TURK.getOffsetFromLocal(dt.getMillis());
+        DateTime res = new DateTime(dt.getMillis() - offset, MOCK_TURK);
+        assertEquals(res.toString(), expected, res.toString());
+    }
+
+    public void test_DateTime_roundFloor_Turk() {
+        DateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_TURK);
+        assertEquals("2007-04-01T08:00:00.000-04:00", dt.toString());
+        DateTime rounded = dt.dayOfMonth().roundFloorCopy();
+        assertEquals("2007-04-01T01:00:00.000-04:00", rounded.toString());
+    }
+
+    public void test_DateTime_roundFloorNotDST_Turk() {
+        DateTime dt = new DateTime(2007, 4, 2, 8, 0, 0, 0, MOCK_TURK);
+        assertEquals("2007-04-02T08:00:00.000-04:00", dt.toString());
+        DateTime rounded = dt.dayOfMonth().roundFloorCopy();
+        assertEquals("2007-04-02T00:00:00.000-04:00", rounded.toString());
+    }
+
+    public void test_DateTime_roundCeiling_Turk() {
+        DateTime dt = new DateTime(2007, 3, 31, 20, 0, 0, 0, MOCK_TURK);
+        assertEquals("2007-03-31T20:00:00.000-05:00", dt.toString());
+        DateTime rounded = dt.dayOfMonth().roundCeilingCopy();
+        assertEquals("2007-04-01T01:00:00.000-04:00", rounded.toString());
+    }
+
+    public void test_DateTime_setHourZero_Turk() {
+        DateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_TURK);
+        assertEquals("2007-04-01T08:00:00.000-04:00", dt.toString());
+        try {
+            dt.hourOfDay().setCopy(0);
+            fail();
+        } catch (IllegalFieldValueException ex) {
+            // expected
+        }
+    }
+
+    public void test_DateTime_withHourZero_Turk() {
+        DateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_TURK);
+        assertEquals("2007-04-01T08:00:00.000-04:00", dt.toString());
+        try {
+            dt.withHourOfDay(0);
+            fail();
+        } catch (IllegalFieldValueException ex) {
+            // expected
+        }
+    }
+
+    public void test_DateTime_withDay_Turk() {
+        DateTime dt = new DateTime(2007, 4, 2, 0, 0, 0, 0, MOCK_TURK);
+        assertEquals("2007-04-02T00:00:00.000-04:00", dt.toString());
+        DateTime res = dt.withDayOfMonth(1);
+        assertEquals("2007-04-01T01:00:00.000-04:00", res.toString());
+    }
+
+    public void test_DateTime_minusHour_Turk() {
+        DateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_TURK);
+        assertEquals("2007-04-01T08:00:00.000-04:00", dt.toString());
+        
+        DateTime minus7 = dt.minusHours(7);
+        assertEquals("2007-04-01T01:00:00.000-04:00", minus7.toString());
+        DateTime minus8 = dt.minusHours(8);
+        assertEquals("2007-03-31T23:00:00.000-05:00", minus8.toString());
+        DateTime minus9 = dt.minusHours(9);
+        assertEquals("2007-03-31T22:00:00.000-05:00", minus9.toString());
+    }
+
+    public void test_DateTime_plusHour_Turk() {
+        DateTime dt = new DateTime(2007, 3, 31, 16, 0, 0, 0, MOCK_TURK);
+        assertEquals("2007-03-31T16:00:00.000-05:00", dt.toString());
+        
+        DateTime plus7 = dt.plusHours(7);
+        assertEquals("2007-03-31T23:00:00.000-05:00", plus7.toString());
+        DateTime plus8 = dt.plusHours(8);
+        assertEquals("2007-04-01T01:00:00.000-04:00", plus8.toString());
+        DateTime plus9 = dt.plusHours(9);
+        assertEquals("2007-04-01T02:00:00.000-04:00", plus9.toString());
+    }
+
+    public void test_DateTime_minusDay_Turk() {
+        DateTime dt = new DateTime(2007, 4, 2, 0, 0, 0, 0, MOCK_TURK);
+        assertEquals("2007-04-02T00:00:00.000-04:00", dt.toString());
+        
+        DateTime minus1 = dt.minusDays(1);
+        assertEquals("2007-04-01T01:00:00.000-04:00", minus1.toString());
+        DateTime minus2 = dt.minusDays(2);
+        assertEquals("2007-03-31T00:00:00.000-05:00", minus2.toString());
+    }
+
+    public void test_DateTime_plusDay_Turk() {
+        DateTime dt = new DateTime(2007, 3, 31, 0, 0, 0, 0, MOCK_TURK);
+        assertEquals("2007-03-31T00:00:00.000-05:00", dt.toString());
+        
+        DateTime plus1 = dt.plusDays(1);
+        assertEquals("2007-04-01T01:00:00.000-04:00", plus1.toString());
+        DateTime plus2 = dt.plusDays(2);
+        assertEquals("2007-04-02T00:00:00.000-04:00", plus2.toString());
+    }
+
+    public void test_DateTime_plusDayMidGap_Turk() {
+        DateTime dt = new DateTime(2007, 3, 31, 0, 30, 0, 0, MOCK_TURK);
+        assertEquals("2007-03-31T00:30:00.000-05:00", dt.toString());
+        
+        DateTime plus1 = dt.plusDays(1);
+        assertEquals("2007-04-01T01:30:00.000-04:00", plus1.toString());
+        DateTime plus2 = dt.plusDays(2);
+        assertEquals("2007-04-02T00:30:00.000-04:00", plus2.toString());
+    }
+
+    public void test_DateTime_addWrapFieldDay_Turk() {
+        DateTime dt = new DateTime(2007, 4, 30, 0, 0, 0, 0, MOCK_TURK);
+        assertEquals("2007-04-30T00:00:00.000-04:00", dt.toString());
+        
+        DateTime plus1 = dt.dayOfMonth().addWrapFieldToCopy(1);
+        assertEquals("2007-04-01T01:00:00.000-04:00", plus1.toString());
+        DateTime plus2 = dt.dayOfMonth().addWrapFieldToCopy(2);
+        assertEquals("2007-04-02T00:00:00.000-04:00", plus2.toString());
+    }
+
+    public void test_DateTime_withZoneRetainFields_Turk() {
+        DateTime dt = new DateTime(2007, 4, 1, 0, 0, 0, 0, DateTimeZone.UTC);
+        assertEquals("2007-04-01T00:00:00.000Z", dt.toString());
+        
+        DateTime res = dt.withZoneRetainFields(MOCK_TURK);
+        assertEquals("2007-04-01T01:00:00.000-04:00", res.toString());
+    }
+
+    public void test_MutableDateTime_setZoneRetainFields_Turk() {
+        MutableDateTime dt = new MutableDateTime(2007, 4, 1, 0, 0, 0, 0, DateTimeZone.UTC);
+        assertEquals("2007-04-01T00:00:00.000Z", dt.toString());
+        
+        dt.setZoneRetainFields(MOCK_TURK);
+        assertEquals("2007-04-01T01:00:00.000-04:00", dt.toString());
+    }
+
+    public void test_LocalDate_new_Turk() {
+        LocalDate date1 = new LocalDate(CUTOVER_TURK, MOCK_TURK);
+        assertEquals("2007-04-01", date1.toString());
+        
+        LocalDate date2 = new LocalDate(CUTOVER_TURK - 1, MOCK_TURK);
+        assertEquals("2007-03-31", date2.toString());
+    }
+
+    public void test_LocalDate_toDateTimeAtMidnight_Turk() {
+        LocalDate date = new LocalDate(2007, 4, 1);
+        try {
+            date.toDateTimeAtMidnight(MOCK_TURK);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            assertEquals(true, ex.getMessage().startsWith("Illegal instant due to time zone offset transition"));
+        }
+    }
+
+    public void test_LocalDate_toDateMidnight_Turk() {
+        LocalDate date = new LocalDate(2007, 4, 1);
+        try {
+            date.toDateMidnight(MOCK_TURK);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            assertEquals(true, ex.getMessage().startsWith("Illegal instant due to time zone offset transition"));
+        }
+    }
+
+    public void test_DateTime_new_Turk() {
+        try {
+            new DateTime(2007, 4, 1, 0, 0, 0, 0, MOCK_TURK);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            assertEquals(true, ex.getMessage().indexOf("Illegal instant due to time zone offset transition") >= 0);
+        }
+    }
+
+    public void test_DateTime_newValid_Turk() {
+        new DateTime(2007, 3, 31, 23, 0, 0, 0, MOCK_TURK);
+        new DateTime(2007, 4, 1, 1, 0, 0, 0, MOCK_TURK);
+        new DateTime(2007, 4, 1, 2, 0, 0, 0, MOCK_TURK);
+        new DateTime(2007, 4, 1, 3, 0, 0, 0, MOCK_TURK);
+        new DateTime(2007, 4, 1, 4, 0, 0, 0, MOCK_TURK);
+        new DateTime(2007, 4, 1, 5, 0, 0, 0, MOCK_TURK);
+        new DateTime(2007, 4, 1, 6, 0, 0, 0, MOCK_TURK);
+    }
+
+    public void test_DateTime_parse_Turk() {
+        try {
+            new DateTime("2007-04-01T00:00", MOCK_TURK);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            assertEquals(true, ex.getMessage().indexOf("Illegal instant due to time zone offset transition") >= 0);
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    //-----------------------------------------------------------------------
+    //-----------------------------------------------------------------------
+    /** America/New_York cutover from 01:59 to 03:00 on 2007-03-11 */
+    private static long CUTOVER_NEW_YORK_SPRING = 1173596400000L;  // 2007-03-11T03:00:00.000-04:00
+    private static final DateTimeZone ZONE_NEW_YORK = DateTimeZone.forID("America/New_York");
+//  DateTime x = new DateTime(2007, 1, 1, 0, 0, 0, 0, ZONE_NEW_YORK);
+//  System.out.println(ZONE_NEW_YORK.nextTransition(x.getMillis()));
+//  DateTime y = new DateTime(ZONE_NEW_YORK.nextTransition(x.getMillis()), ZONE_NEW_YORK);
+//  System.out.println(y);
+
+    //-----------------------------------------------------------------------
+    public void test_NewYorkIsCorrect_Spring() {
+        DateTime pre = new DateTime(CUTOVER_NEW_YORK_SPRING - 1L, ZONE_NEW_YORK);
+        assertEquals("2007-03-11T01:59:59.999-05:00", pre.toString());
+        DateTime at = new DateTime(CUTOVER_NEW_YORK_SPRING, ZONE_NEW_YORK);
+        assertEquals("2007-03-11T03:00:00.000-04:00", at.toString());
+        DateTime post = new DateTime(CUTOVER_NEW_YORK_SPRING + 1L, ZONE_NEW_YORK);
+        assertEquals("2007-03-11T03:00:00.001-04:00", post.toString());
+    }
+
+    public void test_getOffsetFromLocal_NewYork_Spring() {
+        doTest_getOffsetFromLocal(3, 11, 1, 0, "2007-03-11T01:00:00.000-05:00", ZONE_NEW_YORK);
+        doTest_getOffsetFromLocal(3, 11, 1,30, "2007-03-11T01:30:00.000-05:00", ZONE_NEW_YORK);
+        
+        doTest_getOffsetFromLocal(3, 11, 2, 0, "2007-03-11T03:00:00.000-04:00", ZONE_NEW_YORK);
+        doTest_getOffsetFromLocal(3, 11, 2,30, "2007-03-11T03:30:00.000-04:00", ZONE_NEW_YORK);
+        
+        doTest_getOffsetFromLocal(3, 11, 3, 0, "2007-03-11T03:00:00.000-04:00", ZONE_NEW_YORK);
+        doTest_getOffsetFromLocal(3, 11, 3,30, "2007-03-11T03:30:00.000-04:00", ZONE_NEW_YORK);
+        doTest_getOffsetFromLocal(3, 11, 4, 0, "2007-03-11T04:00:00.000-04:00", ZONE_NEW_YORK);
+        doTest_getOffsetFromLocal(3, 11, 5, 0, "2007-03-11T05:00:00.000-04:00", ZONE_NEW_YORK);
+        doTest_getOffsetFromLocal(3, 11, 6, 0, "2007-03-11T06:00:00.000-04:00", ZONE_NEW_YORK);
+        doTest_getOffsetFromLocal(3, 11, 7, 0, "2007-03-11T07:00:00.000-04:00", ZONE_NEW_YORK);
+        doTest_getOffsetFromLocal(3, 11, 8, 0, "2007-03-11T08:00:00.000-04:00", ZONE_NEW_YORK);
+    }
+
+    public void test_DateTime_setHourAcross_NewYork_Spring() {
+        DateTime dt = new DateTime(2007, 3, 11, 0, 0, 0, 0, ZONE_NEW_YORK);
+        assertEquals("2007-03-11T00:00:00.000-05:00", dt.toString());
+        DateTime res = dt.hourOfDay().setCopy(4);
+        assertEquals("2007-03-11T04:00:00.000-04:00", res.toString());
+    }
+
+    public void test_DateTime_setHourForward_NewYork_Spring() {
+        DateTime dt = new DateTime(2007, 3, 11, 0, 0, 0, 0, ZONE_NEW_YORK);
+        assertEquals("2007-03-11T00:00:00.000-05:00", dt.toString());
+        
+        try {
+            dt.hourOfDay().setCopy(2);
+            fail();
+        } catch (IllegalFieldValueException ex) {
+            // expected
+        }
+    }
+
+    public void test_DateTime_setHourBack_NewYork_Spring() {
+        DateTime dt = new DateTime(2007, 3, 11, 8, 0, 0, 0, ZONE_NEW_YORK);
+        assertEquals("2007-03-11T08:00:00.000-04:00", dt.toString());
+        
+        try {
+            dt.hourOfDay().setCopy(2);
+            fail();
+        } catch (IllegalFieldValueException ex) {
+            // expected
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    /** America/New_York cutover from 01:59 to 01:00 on 2007-11-04 */
+    private static long CUTOVER_NEW_YORK_AUTUMN = 1194156000000L;  // 2007-11-04T01:00:00.000-05:00
+
+    //-----------------------------------------------------------------------
+    public void test_NewYorkIsCorrect_Autumn() {
+        DateTime pre = new DateTime(CUTOVER_NEW_YORK_AUTUMN - 1L, ZONE_NEW_YORK);
+        assertEquals("2007-11-04T01:59:59.999-04:00", pre.toString());
+        DateTime at = new DateTime(CUTOVER_NEW_YORK_AUTUMN, ZONE_NEW_YORK);
+        assertEquals("2007-11-04T01:00:00.000-05:00", at.toString());
+        DateTime post = new DateTime(CUTOVER_NEW_YORK_AUTUMN + 1L, ZONE_NEW_YORK);
+        assertEquals("2007-11-04T01:00:00.001-05:00", post.toString());
+    }
+
+    public void test_getOffsetFromLocal_NewYork_Autumn() {
+        doTest_getOffsetFromLocal(11, 4, 0, 0, "2007-11-04T00:00:00.000-04:00", ZONE_NEW_YORK);
+        doTest_getOffsetFromLocal(11, 4, 0,30, "2007-11-04T00:30:00.000-04:00", ZONE_NEW_YORK);
+        
+        doTest_getOffsetFromLocal(11, 4, 1, 0, "2007-11-04T01:00:00.000-04:00", ZONE_NEW_YORK);
+        doTest_getOffsetFromLocal(11, 4, 1,30, "2007-11-04T01:30:00.000-04:00", ZONE_NEW_YORK);
+        
+        doTest_getOffsetFromLocal(11, 4, 2, 0, "2007-11-04T02:00:00.000-05:00", ZONE_NEW_YORK);
+        doTest_getOffsetFromLocal(11, 4, 2,30, "2007-11-04T02:30:00.000-05:00", ZONE_NEW_YORK);
+        doTest_getOffsetFromLocal(11, 4, 3, 0, "2007-11-04T03:00:00.000-05:00", ZONE_NEW_YORK);
+        doTest_getOffsetFromLocal(11, 4, 3,30, "2007-11-04T03:30:00.000-05:00", ZONE_NEW_YORK);
+        doTest_getOffsetFromLocal(11, 4, 4, 0, "2007-11-04T04:00:00.000-05:00", ZONE_NEW_YORK);
+        doTest_getOffsetFromLocal(11, 4, 5, 0, "2007-11-04T05:00:00.000-05:00", ZONE_NEW_YORK);
+        doTest_getOffsetFromLocal(11, 4, 6, 0, "2007-11-04T06:00:00.000-05:00", ZONE_NEW_YORK);
+        doTest_getOffsetFromLocal(11, 4, 7, 0, "2007-11-04T07:00:00.000-05:00", ZONE_NEW_YORK);
+        doTest_getOffsetFromLocal(11, 4, 8, 0, "2007-11-04T08:00:00.000-05:00", ZONE_NEW_YORK);
+    }
+
+    public void test_DateTime_plusHour_NewYork_Autumm() {
+        DateTime dt = new DateTime(2007, 11, 3, 18, 0, 0, 0, ZONE_NEW_YORK);
+        assertEquals("2007-11-03T18:00:00.000-04:00", dt.toString());
+        
+        DateTime plus6 = dt.plusHours(6);
+        assertEquals("2007-11-04T00:00:00.000-04:00", plus6.toString());
+        DateTime plus7 = dt.plusHours(7);
+        assertEquals("2007-11-04T01:00:00.000-04:00", plus7.toString());
+        DateTime plus8 = dt.plusHours(8);
+        assertEquals("2007-11-04T01:00:00.000-05:00", plus8.toString());
+        DateTime plus9 = dt.plusHours(9);
+        assertEquals("2007-11-04T02:00:00.000-05:00", plus9.toString());
+    }
+
+    public void test_DateTime_minusHour_NewYork_Autumm() {
+        DateTime dt = new DateTime(2007, 11, 4, 8, 0, 0, 0, ZONE_NEW_YORK);
+        assertEquals("2007-11-04T08:00:00.000-05:00", dt.toString());
+        
+        DateTime minus6 = dt.minusHours(6);
+        assertEquals("2007-11-04T02:00:00.000-05:00", minus6.toString());
+        DateTime minus7 = dt.minusHours(7);
+        assertEquals("2007-11-04T01:00:00.000-05:00", minus7.toString());
+        DateTime minus8 = dt.minusHours(8);
+        assertEquals("2007-11-04T01:00:00.000-04:00", minus8.toString());
+        DateTime minus9 = dt.minusHours(9);
+        assertEquals("2007-11-04T00:00:00.000-04:00", minus9.toString());
+    }
+
+    //-----------------------------------------------------------------------
+    /** Europe/Moscow cutover from 01:59 to 03:00 on 2007-03-25 */
+    private static long CUTOVER_MOSCOW_SPRING = 1174777200000L;  // 2007-03-25T03:00:00.000+04:00
+    private static final DateTimeZone ZONE_MOSCOW = DateTimeZone.forID("Europe/Moscow");
+
+    //-----------------------------------------------------------------------
+    public void test_MoscowIsCorrect_Spring() {
+//      DateTime x = new DateTime(2007, 7, 1, 0, 0, 0, 0, ZONE_MOSCOW);
+//      System.out.println(ZONE_MOSCOW.nextTransition(x.getMillis()));
+//      DateTime y = new DateTime(ZONE_MOSCOW.nextTransition(x.getMillis()), ZONE_MOSCOW);
+//      System.out.println(y);
+        DateTime pre = new DateTime(CUTOVER_MOSCOW_SPRING - 1L, ZONE_MOSCOW);
+        assertEquals("2007-03-25T01:59:59.999+03:00", pre.toString());
+        DateTime at = new DateTime(CUTOVER_MOSCOW_SPRING, ZONE_MOSCOW);
+        assertEquals("2007-03-25T03:00:00.000+04:00", at.toString());
+        DateTime post = new DateTime(CUTOVER_MOSCOW_SPRING + 1L, ZONE_MOSCOW);
+        assertEquals("2007-03-25T03:00:00.001+04:00", post.toString());
+    }
+
+    public void test_getOffsetFromLocal_Moscow_Spring() {
+        doTest_getOffsetFromLocal(3, 25, 1, 0, "2007-03-25T01:00:00.000+03:00", ZONE_MOSCOW);
+        doTest_getOffsetFromLocal(3, 25, 1,30, "2007-03-25T01:30:00.000+03:00", ZONE_MOSCOW);
+        
+        doTest_getOffsetFromLocal(3, 25, 2, 0, "2007-03-25T03:00:00.000+04:00", ZONE_MOSCOW);
+        doTest_getOffsetFromLocal(3, 25, 2,30, "2007-03-25T03:30:00.000+04:00", ZONE_MOSCOW);
+        
+        doTest_getOffsetFromLocal(3, 25, 3, 0, "2007-03-25T03:00:00.000+04:00", ZONE_MOSCOW);
+        doTest_getOffsetFromLocal(3, 25, 3,30, "2007-03-25T03:30:00.000+04:00", ZONE_MOSCOW);
+        doTest_getOffsetFromLocal(3, 25, 4, 0, "2007-03-25T04:00:00.000+04:00", ZONE_MOSCOW);
+        doTest_getOffsetFromLocal(3, 25, 5, 0, "2007-03-25T05:00:00.000+04:00", ZONE_MOSCOW);
+        doTest_getOffsetFromLocal(3, 25, 6, 0, "2007-03-25T06:00:00.000+04:00", ZONE_MOSCOW);
+        doTest_getOffsetFromLocal(3, 25, 7, 0, "2007-03-25T07:00:00.000+04:00", ZONE_MOSCOW);
+        doTest_getOffsetFromLocal(3, 25, 8, 0, "2007-03-25T08:00:00.000+04:00", ZONE_MOSCOW);
+    }
+
+    public void test_DateTime_setHourAcross_Moscow_Spring() {
+        DateTime dt = new DateTime(2007, 3, 25, 0, 0, 0, 0, ZONE_MOSCOW);
+        assertEquals("2007-03-25T00:00:00.000+03:00", dt.toString());
+        DateTime res = dt.hourOfDay().setCopy(4);
+        assertEquals("2007-03-25T04:00:00.000+04:00", res.toString());
+    }
+
+    public void test_DateTime_setHourForward_Moscow_Spring() {
+        DateTime dt = new DateTime(2007, 3, 25, 0, 0, 0, 0, ZONE_MOSCOW);
+        assertEquals("2007-03-25T00:00:00.000+03:00", dt.toString());
+        
+        try {
+            dt.hourOfDay().setCopy(2);
+            fail();
+        } catch (IllegalFieldValueException ex) {
+            // expected
+        }
+    }
+
+    public void test_DateTime_setHourBack_Moscow_Spring() {
+        DateTime dt = new DateTime(2007, 3, 25, 8, 0, 0, 0, ZONE_MOSCOW);
+        assertEquals("2007-03-25T08:00:00.000+04:00", dt.toString());
+        
+        try {
+            dt.hourOfDay().setCopy(2);
+            fail();
+        } catch (IllegalFieldValueException ex) {
+            // expected
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    /** America/New_York cutover from 02:59 to 02:00 on 2007-10-28 */
+    private static long CUTOVER_MOSCOW_AUTUMN = 1193526000000L;  // 2007-10-28T02:00:00.000+03:00
+
+    //-----------------------------------------------------------------------
+    public void test_MoscowIsCorrect_Autumn() {
+        DateTime pre = new DateTime(CUTOVER_MOSCOW_AUTUMN - 1L, ZONE_MOSCOW);
+        assertEquals("2007-10-28T02:59:59.999+04:00", pre.toString());
+        DateTime at = new DateTime(CUTOVER_MOSCOW_AUTUMN, ZONE_MOSCOW);
+        assertEquals("2007-10-28T02:00:00.000+03:00", at.toString());
+        DateTime post = new DateTime(CUTOVER_MOSCOW_AUTUMN + 1L, ZONE_MOSCOW);
+        assertEquals("2007-10-28T02:00:00.001+03:00", post.toString());
+    }
+
+    // broken, and getOffsetFromLocal has no obvious way to determine which is correct
+//    public void test_getOffsetFromLocal_Moscow_Autumn() {
+//        doTest_getOffsetFromLocal(10, 28, 0, 0, "2007-10-28T00:00:00.000+04:00", ZONE_MOSCOW);
+//        doTest_getOffsetFromLocal(10, 28, 0,30, "2007-10-28T00:30:00.000+04:00", ZONE_MOSCOW);
+//        doTest_getOffsetFromLocal(10, 28, 1, 0, "2007-10-28T01:00:00.000+04:00", ZONE_MOSCOW);
+//        doTest_getOffsetFromLocal(10, 28, 1,30, "2007-10-28T01:30:00.000+04:00", ZONE_MOSCOW);
+//        
+//        doTest_getOffsetFromLocal(10, 28, 2, 0, "2007-10-28T02:00:00.000+04:00", ZONE_MOSCOW);
+//        doTest_getOffsetFromLocal(10, 28, 2,30, "2007-10-28T02:30:00.000+04:00", ZONE_MOSCOW);
+//        
+//        doTest_getOffsetFromLocal(10, 28, 3, 0, "2007-10-28T03:00:00.000+03:00", ZONE_MOSCOW);
+//        doTest_getOffsetFromLocal(10, 28, 3,30, "2007-10-28T03:30:00.000+03:00", ZONE_MOSCOW);
+//        doTest_getOffsetFromLocal(10, 28, 4, 0, "2007-10-28T04:00:00.000+03:00", ZONE_MOSCOW);
+//        doTest_getOffsetFromLocal(10, 28, 5, 0, "2007-10-28T05:00:00.000+03:00", ZONE_MOSCOW);
+//        doTest_getOffsetFromLocal(10, 28, 6, 0, "2007-10-28T06:00:00.000+03:00", ZONE_MOSCOW);
+//        doTest_getOffsetFromLocal(10, 28, 7, 0, "2007-10-28T07:00:00.000+03:00", ZONE_MOSCOW);
+//        doTest_getOffsetFromLocal(10, 28, 8, 0, "2007-10-28T08:00:00.000+03:00", ZONE_MOSCOW);
+//    }
+
+    public void test_DateTime_plusHour_Moscow_Autumm() {
+        DateTime dt = new DateTime(2007, 10, 27, 19, 0, 0, 0, ZONE_MOSCOW);
+        assertEquals("2007-10-27T19:00:00.000+04:00", dt.toString());
+        
+        DateTime plus6 = dt.plusHours(6);
+        assertEquals("2007-10-28T01:00:00.000+04:00", plus6.toString());
+        DateTime plus7 = dt.plusHours(7);
+        assertEquals("2007-10-28T02:00:00.000+04:00", plus7.toString());
+        DateTime plus8 = dt.plusHours(8);
+        assertEquals("2007-10-28T02:00:00.000+03:00", plus8.toString());
+        DateTime plus9 = dt.plusHours(9);
+        assertEquals("2007-10-28T03:00:00.000+03:00", plus9.toString());
+    }
+
+    public void test_DateTime_minusHour_Moscow_Autumm() {
+        DateTime dt = new DateTime(2007, 10, 28, 9, 0, 0, 0, ZONE_MOSCOW);
+        assertEquals("2007-10-28T09:00:00.000+03:00", dt.toString());
+        
+        DateTime minus6 = dt.minusHours(6);
+        assertEquals("2007-10-28T03:00:00.000+03:00", minus6.toString());
+        DateTime minus7 = dt.minusHours(7);
+        assertEquals("2007-10-28T02:00:00.000+03:00", minus7.toString());
+        DateTime minus8 = dt.minusHours(8);
+        assertEquals("2007-10-28T02:00:00.000+04:00", minus8.toString());
+        DateTime minus9 = dt.minusHours(9);
+        assertEquals("2007-10-28T01:00:00.000+04:00", minus9.toString());
+    }
+
+    //-----------------------------------------------------------------------
+    //-----------------------------------------------------------------------
+    //-----------------------------------------------------------------------
+//    public void test_toDateMidnight_SaoPaolo() {
+//        // RFE: 1684259
+//        DateTimeZone zone = DateTimeZone.forID("America/Sao_Paulo");
+//        LocalDate baseDate = new LocalDate(2006, 11, 5);
+//        DateMidnight dm = baseDate.toDateMidnight(zone);
+//        assertEquals("2006-11-05T00:00:00.000-03:00", dm.toString());
+//        DateTime dt = baseDate.toDateTimeAtMidnight(zone);
+//        assertEquals("2006-11-05T00:00:00.000-03:00", dt.toString());
+//    }
+
+    //-----------------------------------------------------------------------
+    //-----------------------------------------------------------------------
+    //-----------------------------------------------------------------------
+    private void doTest_getOffsetFromLocal(int month, int day, int hour, int min, String expected, DateTimeZone zone) {
+        DateTime dt = new DateTime(2007, month, day, hour, min, 0, 0, DateTimeZone.UTC);
+        int offset = zone.getOffsetFromLocal(dt.getMillis());
+        DateTime res = new DateTime(dt.getMillis() - offset, zone);
+        assertEquals(res.toString(), expected, res.toString());
+    }
+
+}

From 3f5e2fafb4f17632d783a1f6977b42588c7b1414 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 4 Aug 2007 17:46:55 +0000
Subject: [PATCH 063/112] Clarify javadoc of forTimeZone to indicate that
 application created SimpleTimeZone rules are not parsed bug/rfe 1705180

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1233 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                        | 4 ++++
 JodaTime/src/java/org/joda/time/DateTimeZone.java | 3 +++
 2 files changed, 7 insertions(+)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 9a7ba070e..af6cfa7c6 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -98,6 +98,10 @@ Bug fixes since 1.4
 
 - DateTime/Instant/LocalDateTime javadoc improved
 
+- DateTimeZone
+  Clarify javadoc of forTimeZone to indicate that application created
+  SimpleTimeZone rules are not parsed [1705180]
+
 
 Feedback
 --------
diff --git a/JodaTime/src/java/org/joda/time/DateTimeZone.java b/JodaTime/src/java/org/joda/time/DateTimeZone.java
index fc706fb21..69477efeb 100644
--- a/JodaTime/src/java/org/joda/time/DateTimeZone.java
+++ b/JodaTime/src/java/org/joda/time/DateTimeZone.java
@@ -266,6 +266,9 @@ public static DateTimeZone forOffsetMillis(int millisOffset) {
      * excluded IDs are the short three letter form (except UTC). This 
      * method will attempt to convert between time zones created using the
      * short IDs and the full version.
+     * <p>
+     * This method is not designed to parse time zones with rules created by
+     * applications using <code>SimpleTimeZone</code> directly.
      * 
      * @param zone  the zone to convert, null means default
      * @return the DateTimeZone object for the zone

From 88406cdac37d6a191686f98c70dd6a6795f6f8c9 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 22 Aug 2007 23:36:24 +0000
Subject: [PATCH 064/112] Add Interval(long,long,DateTimeZone) constructor,
 emphasising that intervals include a time zone

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1234 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  4 +++
 JodaTime/src/java/org/joda/time/Interval.java | 21 ++++++++++++++--
 .../joda/time/TestInterval_Constructors.java  | 25 ++++++++++++++++---
 3 files changed, 45 insertions(+), 5 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index af6cfa7c6..c5f07e506 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -32,6 +32,10 @@ Enhancements since 1.4
 - DateTimeZone
   - add isStandardOffset() to assist in determining if DST applies
 
+- Interval
+  - add (long,long,DateTimeZone) constructor, emphasising that intervals
+    include a time zone
+
 
 Compatibility with 1.4
 ----------------------
diff --git a/JodaTime/src/java/org/joda/time/Interval.java b/JodaTime/src/java/org/joda/time/Interval.java
index 025a633c9..f1d367757 100644
--- a/JodaTime/src/java/org/joda/time/Interval.java
+++ b/JodaTime/src/java/org/joda/time/Interval.java
@@ -18,6 +18,7 @@
 import java.io.Serializable;
 
 import org.joda.time.base.BaseInterval;
+import org.joda.time.chrono.ISOChronology;
 
 /**
  * Interval is the standard implementation of an immutable time interval.
@@ -53,7 +54,8 @@
 
     //-----------------------------------------------------------------------
     /**
-     * Constructs an interval from a start and end instant with the ISO default chronology.
+     * Constructs an interval from a start and end instant with the ISO
+     * default chronology in the default time zone.
      * 
      * @param startInstant  start of this interval, as milliseconds from 1970-01-01T00:00:00Z.
      * @param endInstant  end of this interval, as milliseconds from 1970-01-01T00:00:00Z.
@@ -64,7 +66,22 @@ public Interval(long startInstant, long endInstant) {
     }
 
     /**
-     * Constructs an interval from a start and end instant with a chronology.
+     * Constructs an interval from a start and end instant with the ISO
+     * default chronology in the specified time zone.
+     * 
+     * @param startInstant  start of this interval, as milliseconds from 1970-01-01T00:00:00Z.
+     * @param endInstant  end of this interval, as milliseconds from 1970-01-01T00:00:00Z.
+     * @param zone  the time zone to use, null means default zone
+     * @throws IllegalArgumentException if the end is before the start
+     * @since 1.5
+     */
+    public Interval(long startInstant, long endInstant, DateTimeZone zone) {
+        super(startInstant, endInstant, ISOChronology.getInstance(zone));
+    }
+
+    /**
+     * Constructs an interval from a start and end instant with the
+     * specified chronology.
      * 
      * @param chronology  the chronology to use, null is ISO default
      * @param startInstant  start of this interval, as milliseconds from 1970-01-01T00:00:00Z.
diff --git a/JodaTime/src/test/org/joda/time/TestInterval_Constructors.java b/JodaTime/src/test/org/joda/time/TestInterval_Constructors.java
index c6a42e392..a4570c5f1 100644
--- a/JodaTime/src/test/org/joda/time/TestInterval_Constructors.java
+++ b/JodaTime/src/test/org/joda/time/TestInterval_Constructors.java
@@ -129,7 +129,26 @@ public void testConstructor_long_long3() throws Throwable {
     }
 
     //-----------------------------------------------------------------------
-    public void testConstructor_long_long_Chronology1() throws Throwable {
+    public void testConstructor_long_long_Zone() throws Throwable {
+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);
+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);
+        Interval test = new Interval(dt1.getMillis(), dt2.getMillis(), LONDON);
+        assertEquals(dt1.getMillis(), test.getStartMillis());
+        assertEquals(dt2.getMillis(), test.getEndMillis());
+        assertEquals(ISOChronology.getInstance(LONDON), test.getChronology());
+    }
+
+    public void testConstructor_long_long_nullZone() throws Throwable {
+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);
+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);
+        Interval test = new Interval(dt1.getMillis(), dt2.getMillis(), (DateTimeZone) null);
+        assertEquals(dt1.getMillis(), test.getStartMillis());
+        assertEquals(dt2.getMillis(), test.getEndMillis());
+        assertEquals(ISOChronology.getInstance(), test.getChronology());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testConstructor_long_long_Chronology() throws Throwable {
         DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);
         DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);
         Interval test = new Interval(dt1.getMillis(), dt2.getMillis(), GJChronology.getInstance());
@@ -138,10 +157,10 @@ public void testConstructor_long_long_Chronology1() throws Throwable {
         assertEquals(GJChronology.getInstance(), test.getChronology());
     }
 
-    public void testConstructor_long_long_Chronology2() throws Throwable {
+    public void testConstructor_long_long_nullChronology() throws Throwable {
         DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);
         DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);
-        Interval test = new Interval(dt1.getMillis(), dt2.getMillis(), null);
+        Interval test = new Interval(dt1.getMillis(), dt2.getMillis(), (Chronology) null);
         assertEquals(dt1.getMillis(), test.getStartMillis());
         assertEquals(dt2.getMillis(), test.getEndMillis());
         assertEquals(ISOChronology.getInstance(), test.getChronology());

From 8cff9bb7019d8ca65351541c7ab2346fb81aeedd Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 24 Aug 2007 04:34:07 +0000
Subject: [PATCH 065/112] Improve javadoc of BasePeriod toDurationFrom() and
 toDurationTo()

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1235 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  2 ++
 .../java/org/joda/time/base/BasePeriod.java   | 22 +++++++++++++++----
 2 files changed, 20 insertions(+), 4 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index c5f07e506..d097906e5 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -100,6 +100,8 @@ Bug fixes since 1.4
 
 - DateTimeFormat javadoc now explains time zone parsing restriction better [OpenDiscussion 1721909]
 
+- Period javadoc now explains toDurationFrom() and toDurationTo() better
+
 - DateTime/Instant/LocalDateTime javadoc improved
 
 - DateTimeZone
diff --git a/JodaTime/src/java/org/joda/time/base/BasePeriod.java b/JodaTime/src/java/org/joda/time/base/BasePeriod.java
index 677071ced..7e645c50e 100644
--- a/JodaTime/src/java/org/joda/time/base/BasePeriod.java
+++ b/JodaTime/src/java/org/joda/time/base/BasePeriod.java
@@ -325,8 +325,14 @@ public int getValue(int index) {
     /**
      * Gets the total millisecond duration of this period relative to a start instant.
      * <p>
-     * This method adds the period to the specifed instant.
-     * The difference between the start instant and the result of the add is the duration
+     * This method adds the period to the specifed instant in order to
+     * calculate the duration.
+     * <p>
+     * An instant must be supplied as the duration of a period varies.
+     * For example, a period of 1 month could vary between the equivalent of
+     * 28 and 31 days in milliseconds due to different length months.
+     * Similarly, a day can vary at Daylight Savings cutover, typically between
+     * 23 and 25 hours.
      *
      * @param startInstant  the instant to add the period to, thus obtaining the duration
      * @return the total length of the period as a duration relative to the start instant
@@ -340,9 +346,17 @@ public Duration toDurationFrom(ReadableInstant startInstant) {
     }
 
     /**
-     * Gets the total millisecond duration of this period relative to an end instant.
+     * Gets the total millisecond duration of this period relative to an
+     * end instant.
+     * <p>
+     * This method subtracts the period from the specified instant in order
+     * to calculate the duration.
      * <p>
-     * This method subtracts the period from the specifed instant.
+     * An instant must be supplied as the duration of a period varies.
+     * For example, a period of 1 month could vary between the equivalent of
+     * 28 and 31 days in milliseconds due to different length months.
+     * Similarly, a day can vary at Daylight Savings cutover, typically between
+     * 23 and 25 hours.
      *
      * @param endInstant  the instant to subtract the period from, thus obtaining the duration
      * @return the total length of the period as a duration relative to the end instant

From 4b3ac22a64b1a2dea220d05cfdaf37d61ce2d313 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 24 Aug 2007 04:37:15 +0000
Subject: [PATCH 066/112] Fix spelling

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1236 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/base/BasePeriod.java | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/JodaTime/src/java/org/joda/time/base/BasePeriod.java b/JodaTime/src/java/org/joda/time/base/BasePeriod.java
index 7e645c50e..e2da9f00a 100644
--- a/JodaTime/src/java/org/joda/time/base/BasePeriod.java
+++ b/JodaTime/src/java/org/joda/time/base/BasePeriod.java
@@ -325,7 +325,7 @@ public int getValue(int index) {
     /**
      * Gets the total millisecond duration of this period relative to a start instant.
      * <p>
-     * This method adds the period to the specifed instant in order to
+     * This method adds the period to the specified instant in order to
      * calculate the duration.
      * <p>
      * An instant must be supplied as the duration of a period varies.

From bd9fec942f21a783cf42d485cf4fd660f1d9f128 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 24 Aug 2007 10:15:36 +0000
Subject: [PATCH 067/112] Fix javadoc

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1237 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/Days.java    | 2 +-
 JodaTime/src/java/org/joda/time/Hours.java   | 2 +-
 JodaTime/src/java/org/joda/time/Minutes.java | 2 +-
 JodaTime/src/java/org/joda/time/Seconds.java | 2 +-
 JodaTime/src/java/org/joda/time/Weeks.java   | 2 +-
 5 files changed, 5 insertions(+), 5 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/Days.java b/JodaTime/src/java/org/joda/time/Days.java
index db5107a7d..5ac3d9fbf 100644
--- a/JodaTime/src/java/org/joda/time/Days.java
+++ b/JodaTime/src/java/org/joda/time/Days.java
@@ -323,7 +323,7 @@ public Seconds toStandardSeconds() {
      * not be true for some unusual chronologies. However, it is included as it
      * is a useful operation for many applications and business rules.
      * 
-     * @return a period representing the number of hours for this number of days
+     * @return a duration equivalent to this number of days
      */
     public Duration toStandardDuration() {
         long days = getValue();  // assign to a long
diff --git a/JodaTime/src/java/org/joda/time/Hours.java b/JodaTime/src/java/org/joda/time/Hours.java
index 6bb97fdbf..49e920c1b 100644
--- a/JodaTime/src/java/org/joda/time/Hours.java
+++ b/JodaTime/src/java/org/joda/time/Hours.java
@@ -322,7 +322,7 @@ public Seconds toStandardSeconds() {
      * However, the method is included as it is a useful operation for many
      * applications and business rules.
      *
-     * @return a period representing the number of hours for this number of hours
+     * @return a duration equivalent to this number of hours
      */
     public Duration toStandardDuration() {
         long hours = getValue();  // assign to a long
diff --git a/JodaTime/src/java/org/joda/time/Minutes.java b/JodaTime/src/java/org/joda/time/Minutes.java
index 63220b989..310eea7a6 100644
--- a/JodaTime/src/java/org/joda/time/Minutes.java
+++ b/JodaTime/src/java/org/joda/time/Minutes.java
@@ -303,7 +303,7 @@ public Seconds toStandardSeconds() {
      * However, the method is included as it is a useful operation for many
      * applications and business rules.
      *
-     * @return a period representing the number of minutes for this number of minutes
+     * @return a duration equivalent to this number of minutes
      */
     public Duration toStandardDuration() {
         long minutes = getValue();  // assign to a long
diff --git a/JodaTime/src/java/org/joda/time/Seconds.java b/JodaTime/src/java/org/joda/time/Seconds.java
index 5fd0182b0..76d08dd2d 100644
--- a/JodaTime/src/java/org/joda/time/Seconds.java
+++ b/JodaTime/src/java/org/joda/time/Seconds.java
@@ -303,7 +303,7 @@ public Minutes toStandardMinutes() {
      * not be true for some unusual chronologies. However, it is included as it
      * is a useful operation for many applications and business rules.
      * 
-     * @return a period representing the number of hours for this number of seconds
+     * @return a duration equivalent to this number of seconds
      */
     public Duration toStandardDuration() {
         long seconds = getValue();  // assign to a long
diff --git a/JodaTime/src/java/org/joda/time/Weeks.java b/JodaTime/src/java/org/joda/time/Weeks.java
index 2c64e4e67..873d8063c 100644
--- a/JodaTime/src/java/org/joda/time/Weeks.java
+++ b/JodaTime/src/java/org/joda/time/Weeks.java
@@ -309,7 +309,7 @@ public Seconds toStandardSeconds() {
      * not be true for some unusual chronologies. However, it is included as it
      * is a useful operation for many applications and business rules.
      * 
-     * @return a period representing the number of hours for this number of weeks
+     * @return a duration equivalent to this number of weeks
      */
     public Duration toStandardDuration() {
         long weeks = getValue();  // assign to a long

From d622c13df8065b16bc6038538f23a5ee05d7d5fe Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 24 Aug 2007 10:25:09 +0000
Subject: [PATCH 068/112] Add Period.toStandard*() methods

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1238 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |   7 +
 JodaTime/src/java/org/joda/time/Period.java   | 199 +++++++++
 .../test/org/joda/time/TestPeriod_Basics.java | 388 +++++++++++++++++-
 3 files changed, 593 insertions(+), 1 deletion(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index d097906e5..f5b3cb8e2 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -20,6 +20,13 @@ of restrictions. If the license causes you problems please contact the mailing l
 
 Enhancements since 1.4
 ----------------------
+- Period
+  - add toStandardDuration()
+  - add toStandardWeeks(), toStandardDays(), toStandardHours(),
+    toStandardMinutes(), toStandardSeconds()
+  methods to convert a period to other types using the standard
+  conversions (7 day week, 24 hour day, ...)
+
 - LocalDate.toLocalDateTime
   - provide mechanism to create LocalDateTime from LocalDate and LocalTime
 
diff --git a/JodaTime/src/java/org/joda/time/Period.java b/JodaTime/src/java/org/joda/time/Period.java
index e4a6624e4..d865db56f 100644
--- a/JodaTime/src/java/org/joda/time/Period.java
+++ b/JodaTime/src/java/org/joda/time/Period.java
@@ -18,6 +18,7 @@
 import java.io.Serializable;
 
 import org.joda.time.base.BasePeriod;
+import org.joda.time.field.FieldUtils;
 
 /**
  * An immutable time period specifying a set of duration field values.
@@ -1173,4 +1174,202 @@ public Period minusMillis(int millis) {
         return plusMillis(-millis);
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Converts this period to a period in weeks assuming a
+     * 7 day week, 24 hour day, 60 minute hour and 60 second minute.
+     * <p>
+     * This method allows you to convert between different types of period.
+     * However to achieve this it makes the assumption that all
+     * weeks are 7 days, all days are 24 hours, all hours are 60 minutes and
+     * all minutes are 60 seconds. This is not true when daylight savings time
+     * is considered, and may also not be true for some unusual chronologies.
+     * However, it is included as it is a useful operation for many
+     * applications and business rules.
+     * <p>
+     * If the period contains years or months, an exception will be thrown.
+     * 
+     * @return a period representing the number of standard weeks in this period
+     * @throws IllegalStateException if the period contains years or months
+     * @throws ArithmeticException if the number of weeks is too large to be represented
+     * @since 1.5
+     */
+    public Weeks toStandardWeeks() {
+        checkYearsAndMonths("Weeks");
+        long millis = getMillis();  // assign to a long
+        millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;
+        millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;
+        millis += ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR;
+        millis += ((long) getDays()) * DateTimeConstants.MILLIS_PER_DAY;
+        long weeks = ((long) getWeeks()) + millis / DateTimeConstants.MILLIS_PER_WEEK;
+        return Weeks.weeks(FieldUtils.safeToInt(weeks));
+    }
+
+    /**
+     * Converts this period to a period in days assuming a
+     * 7 day week, 24 hour day, 60 minute hour and 60 second minute.
+     * <p>
+     * This method allows you to convert between different types of period.
+     * However to achieve this it makes the assumption that all
+     * weeks are 7 days, all days are 24 hours, all hours are 60 minutes and
+     * all minutes are 60 seconds. This is not true when daylight savings time
+     * is considered, and may also not be true for some unusual chronologies.
+     * However, it is included as it is a useful operation for many
+     * applications and business rules.
+     * <p>
+     * If the period contains years or months, an exception will be thrown.
+     * 
+     * @return a period representing the number of standard days in this period
+     * @throws IllegalStateException if the period contains years or months
+     * @throws ArithmeticException if the number of days is too large to be represented
+     * @since 1.5
+     */
+    public Days toStandardDays() {
+        checkYearsAndMonths("Days");
+        long millis = getMillis();  // assign to a long
+        millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;
+        millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;
+        millis += ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR;
+        long days = millis / DateTimeConstants.MILLIS_PER_DAY;
+        days = FieldUtils.safeAdd(days, getDays());
+        days = FieldUtils.safeAdd(days, ((long) getWeeks()) * ((long) DateTimeConstants.DAYS_PER_WEEK));
+        return Days.days(FieldUtils.safeToInt(days));
+    }
+
+    /**
+     * Converts this period to a period in hours assuming a
+     * 7 day week, 24 hour day, 60 minute hour and 60 second minute.
+     * <p>
+     * This method allows you to convert between different types of period.
+     * However to achieve this it makes the assumption that all
+     * weeks are 7 days, all days are 24 hours, all hours are 60 minutes and
+     * all minutes are 60 seconds. This is not true when daylight savings time
+     * is considered, and may also not be true for some unusual chronologies.
+     * However, it is included as it is a useful operation for many
+     * applications and business rules.
+     * <p>
+     * If the period contains years or months, an exception will be thrown.
+     * 
+     * @return a period representing the number of standard hours in this period
+     * @throws IllegalStateException if the period contains years or months
+     * @throws ArithmeticException if the number of hours is too large to be represented
+     * @since 1.5
+     */
+    public Hours toStandardHours() {
+        checkYearsAndMonths("Hours");
+        long millis = getMillis();  // assign to a long
+        millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;
+        millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;
+        long hours = millis / DateTimeConstants.MILLIS_PER_HOUR;
+        hours = FieldUtils.safeAdd(hours, getHours());
+        hours = FieldUtils.safeAdd(hours, ((long) getDays()) * ((long) DateTimeConstants.HOURS_PER_DAY));
+        hours = FieldUtils.safeAdd(hours, ((long) getWeeks()) * ((long) DateTimeConstants.HOURS_PER_WEEK));
+        return Hours.hours(FieldUtils.safeToInt(hours));
+    }
+
+    /**
+     * Converts this period to a period in minutes assuming a
+     * 7 day week, 24 hour day, 60 minute hour and 60 second minute.
+     * <p>
+     * This method allows you to convert between different types of period.
+     * However to achieve this it makes the assumption that all
+     * weeks are 7 days, all days are 24 hours, all hours are 60 minutes and
+     * all minutes are 60 seconds. This is not true when daylight savings time
+     * is considered, and may also not be true for some unusual chronologies.
+     * However, it is included as it is a useful operation for many
+     * applications and business rules.
+     * <p>
+     * If the period contains years or months, an exception will be thrown.
+     * 
+     * @return a period representing the number of standard minutes in this period
+     * @throws IllegalStateException if the period contains years or months
+     * @throws ArithmeticException if the number of minutes is too large to be represented
+     * @since 1.5
+     */
+    public Minutes toStandardMinutes() {
+        checkYearsAndMonths("Minutes");
+        long millis = getMillis();  // assign to a long
+        millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;
+        long minutes = millis / DateTimeConstants.MILLIS_PER_MINUTE;
+        minutes = FieldUtils.safeAdd(minutes, getMinutes());
+        minutes = FieldUtils.safeAdd(minutes, ((long) getHours()) * ((long) DateTimeConstants.MINUTES_PER_HOUR));
+        minutes = FieldUtils.safeAdd(minutes, ((long) getDays()) * ((long) DateTimeConstants.MINUTES_PER_DAY));
+        minutes = FieldUtils.safeAdd(minutes, ((long) getWeeks()) * ((long) DateTimeConstants.MINUTES_PER_WEEK));
+        return Minutes.minutes(FieldUtils.safeToInt(minutes));
+    }
+
+    /**
+     * Converts this period to a period in seconds assuming a
+     * 7 day week, 24 hour day, 60 minute hour and 60 second minute.
+     * <p>
+     * This method allows you to convert between different types of period.
+     * However to achieve this it makes the assumption that all
+     * weeks are 7 days, all days are 24 hours, all hours are 60 minutes and
+     * all minutes are 60 seconds. This is not true when daylight savings time
+     * is considered, and may also not be true for some unusual chronologies.
+     * However, it is included as it is a useful operation for many
+     * applications and business rules.
+     * <p>
+     * If the period contains years or months, an exception will be thrown.
+     * 
+     * @return a period representing the number of standard seconds in this period
+     * @throws IllegalStateException if the period contains years or months
+     * @throws ArithmeticException if the number of seconds is too large to be represented
+     * @since 1.5
+     */
+    public Seconds toStandardSeconds() {
+        checkYearsAndMonths("Seconds");
+        long seconds = getMillis() / DateTimeConstants.MILLIS_PER_SECOND;
+        seconds = FieldUtils.safeAdd(seconds, getSeconds());
+        seconds = FieldUtils.safeAdd(seconds, ((long) getMinutes()) * ((long) DateTimeConstants.SECONDS_PER_MINUTE));
+        seconds = FieldUtils.safeAdd(seconds, ((long) getHours()) * ((long) DateTimeConstants.SECONDS_PER_HOUR));
+        seconds = FieldUtils.safeAdd(seconds, ((long) getDays()) * ((long) DateTimeConstants.SECONDS_PER_DAY));
+        seconds = FieldUtils.safeAdd(seconds, ((long) getWeeks()) * ((long) DateTimeConstants.SECONDS_PER_WEEK));
+        return Seconds.seconds(FieldUtils.safeToInt(seconds));
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Converts this period to a duration assuming a
+     * 7 day week, 24 hour day, 60 minute hour and 60 second minute.
+     * <p>
+     * This method allows you to convert from a period to a duration.
+     * However to achieve this it makes the assumption that all
+     * weeks are 7 days, all days are 24 hours, all hours are 60 minutes and
+     * all minutes are 60 seconds. This is not true when daylight savings time
+     * is considered, and may also not be true for some unusual chronologies.
+     * However, it is included as it is a useful operation for many
+     * applications and business rules.
+     * <p>
+     * If the period contains years or months, an exception will be thrown.
+     * 
+     * @return a duration equivalent to this period
+     * @throws IllegalStateException if the period contains years or months
+     * @since 1.5
+     */
+    public Duration toStandardDuration() {
+        checkYearsAndMonths("Duration");
+        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
+        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
+        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
+        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
+        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
+        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
+        return new Duration(millis);
+    }
+
+    /**
+     * Check that there are no years or months in the period.
+     * 
+     * @param destintionType  the destination type, not null
+     */
+    private void checkYearsAndMonths(String destintionType) {
+        if (getMonths() != 0) {
+            throw new IllegalStateException("Cannot convert to " + destintionType + " as this period contains months and months vary in length");
+        }
+        if (getYears() != 0) {
+            throw new IllegalStateException("Cannot convert to " + destintionType + " as this period contains years and years vary in length");
+        }
+    }
+
 }
diff --git a/JodaTime/src/test/org/joda/time/TestPeriod_Basics.java b/JodaTime/src/test/org/joda/time/TestPeriod_Basics.java
index 29b376bf9..154a06fd9 100644
--- a/JodaTime/src/test/org/joda/time/TestPeriod_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestPeriod_Basics.java
@@ -19,6 +19,7 @@
 import java.io.ByteArrayOutputStream;
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
+import java.math.BigInteger;
 import java.util.Arrays;
 import java.util.Locale;
 import java.util.TimeZone;
@@ -39,7 +40,7 @@
     // Test in 2002/03 as time zones are more well known
     // (before the late 90's they were all over the place)
 
-    private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
+    //private static final DateTimeZone PARIS = DateTimeZone.forID("Europe/Paris");
     private static final DateTimeZone LONDON = DateTimeZone.forID("Europe/London");
     
     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 
@@ -786,4 +787,389 @@ public void testMinus() {
         } catch (IllegalArgumentException ex) {}
     }
 
+    //-----------------------------------------------------------------------
+    public void testToStandardWeeks() {
+        Period test = new Period(0, 0, 3, 4, 5, 6, 7, 8);
+        assertEquals(3, test.toStandardWeeks().getWeeks());
+        
+        test = new Period(0, 0, 3, 7, 0, 0, 0, 0);
+        assertEquals(4, test.toStandardWeeks().getWeeks());
+        
+        test = new Period(0, 0, 0, 6, 23, 59, 59, 1000);
+        assertEquals(1, test.toStandardWeeks().getWeeks());
+        
+        test = new Period(0, 0, Integer.MAX_VALUE, 0, 0, 0, 0, 0);
+        assertEquals(Integer.MAX_VALUE, test.toStandardWeeks().getWeeks());
+        
+        test = new Period(0, 0, 0, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);
+        long intMax = Integer.MAX_VALUE;
+        BigInteger expected = BigInteger.valueOf(intMax);
+        expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_SECOND));
+        expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_MINUTE));
+        expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_HOUR));
+        expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_DAY));
+        expected = expected.divide(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_WEEK));
+        assertTrue(expected.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) < 0);
+        assertEquals(expected.longValue(), test.toStandardWeeks().getWeeks());
+        
+        test = new Period(0, 0, Integer.MAX_VALUE, 7, 0, 0, 0, 0);
+        try {
+            test.toStandardWeeks();
+            fail();
+        } catch (ArithmeticException ex) {}
+    }
+
+    public void testToStandardWeeks_years() {
+        Period test = Period.years(1);
+        try {
+            test.toStandardWeeks();
+            fail();
+        } catch (IllegalStateException ex) {}
+        
+        test = Period.years(-1);
+        try {
+            test.toStandardWeeks();
+            fail();
+        } catch (IllegalStateException ex) {}
+        
+        test = Period.years(0);
+        assertEquals(0, test.toStandardWeeks().getWeeks());
+    }
+
+    public void testToStandardWeeks_months() {
+        Period test = Period.months(1);
+        try {
+            test.toStandardWeeks();
+            fail();
+        } catch (IllegalStateException ex) {}
+        
+        test = Period.months(-1);
+        try {
+            test.toStandardWeeks();
+            fail();
+        } catch (IllegalStateException ex) {}
+        
+        test = Period.months(0);
+        assertEquals(0, test.toStandardWeeks().getWeeks());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToStandardDays() {
+        Period test = new Period(0, 0, 0, 4, 5, 6, 7, 8);
+        assertEquals(4, test.toStandardDays().getDays());
+        
+        test = new Period(0, 0, 1, 4, 0, 0, 0, 0);
+        assertEquals(11, test.toStandardDays().getDays());
+        
+        test = new Period(0, 0, 0, 0, 23, 59, 59, 1000);
+        assertEquals(1, test.toStandardDays().getDays());
+        
+        test = new Period(0, 0, 0, Integer.MAX_VALUE, 0, 0, 0, 0);
+        assertEquals(Integer.MAX_VALUE, test.toStandardDays().getDays());
+        
+        test = new Period(0, 0, 0, 0, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);
+        long intMax = Integer.MAX_VALUE;
+        BigInteger expected = BigInteger.valueOf(intMax);
+        expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_SECOND));
+        expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_MINUTE));
+        expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_HOUR));
+        expected = expected.divide(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_DAY));
+        assertTrue(expected.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) < 0);
+        assertEquals(expected.longValue(), test.toStandardDays().getDays());
+        
+        test = new Period(0, 0, 0, Integer.MAX_VALUE, 24, 0, 0, 0);
+        try {
+            test.toStandardDays();
+            fail();
+        } catch (ArithmeticException ex) {}
+    }
+
+    public void testToStandardDays_years() {
+        Period test = Period.years(1);
+        try {
+            test.toStandardDays();
+            fail();
+        } catch (IllegalStateException ex) {}
+        
+        test = Period.years(-1);
+        try {
+            test.toStandardDays();
+            fail();
+        } catch (IllegalStateException ex) {}
+        
+        test = Period.years(0);
+        assertEquals(0, test.toStandardDays().getDays());
+    }
+
+    public void testToStandardDays_months() {
+        Period test = Period.months(1);
+        try {
+            test.toStandardDays();
+            fail();
+        } catch (IllegalStateException ex) {}
+        
+        test = Period.months(-1);
+        try {
+            test.toStandardDays();
+            fail();
+        } catch (IllegalStateException ex) {}
+        
+        test = Period.months(0);
+        assertEquals(0, test.toStandardDays().getDays());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToStandardHours() {
+        Period test = new Period(0, 0, 0, 0, 5, 6, 7, 8);
+        assertEquals(5, test.toStandardHours().getHours());
+        
+        test = new Period(0, 0, 0, 1, 5, 0, 0, 0);
+        assertEquals(29, test.toStandardHours().getHours());
+        
+        test = new Period(0, 0, 0, 0, 0, 59, 59, 1000);
+        assertEquals(1, test.toStandardHours().getHours());
+        
+        test = new Period(0, 0, 0, 0, Integer.MAX_VALUE, 0, 0, 0);
+        assertEquals(Integer.MAX_VALUE, test.toStandardHours().getHours());
+        
+        test = new Period(0, 0, 0, 0, 0, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);
+        long intMax = Integer.MAX_VALUE;
+        BigInteger expected = BigInteger.valueOf(intMax);
+        expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_SECOND));
+        expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_MINUTE));
+        expected = expected.divide(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_HOUR));
+        assertTrue(expected.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) < 0);
+        assertEquals(expected.longValue(), test.toStandardHours().getHours());
+        
+        test = new Period(0, 0, 0, 0, Integer.MAX_VALUE, 60, 0, 0);
+        try {
+            test.toStandardHours();
+            fail();
+        } catch (ArithmeticException ex) {}
+    }
+
+    public void testToStandardHours_years() {
+        Period test = Period.years(1);
+        try {
+            test.toStandardHours();
+            fail();
+        } catch (IllegalStateException ex) {}
+        
+        test = Period.years(-1);
+        try {
+            test.toStandardHours();
+            fail();
+        } catch (IllegalStateException ex) {}
+        
+        test = Period.years(0);
+        assertEquals(0, test.toStandardHours().getHours());
+    }
+
+    public void testToStandardHours_months() {
+        Period test = Period.months(1);
+        try {
+            test.toStandardHours();
+            fail();
+        } catch (IllegalStateException ex) {}
+        
+        test = Period.months(-1);
+        try {
+            test.toStandardHours();
+            fail();
+        } catch (IllegalStateException ex) {}
+        
+        test = Period.months(0);
+        assertEquals(0, test.toStandardHours().getHours());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToStandardMinutes() {
+        Period test = new Period(0, 0, 0, 0, 0, 6, 7, 8);
+        assertEquals(6, test.toStandardMinutes().getMinutes());
+        
+        test = new Period(0, 0, 0, 0, 1, 6, 0, 0);
+        assertEquals(66, test.toStandardMinutes().getMinutes());
+        
+        test = new Period(0, 0, 0, 0, 0, 0, 59, 1000);
+        assertEquals(1, test.toStandardMinutes().getMinutes());
+        
+        test = new Period(0, 0, 0, 0, 0, Integer.MAX_VALUE, 0, 0);
+        assertEquals(Integer.MAX_VALUE, test.toStandardMinutes().getMinutes());
+        
+        test = new Period(0, 0, 0, 0, 0, 0, Integer.MAX_VALUE, Integer.MAX_VALUE);
+        long intMax = Integer.MAX_VALUE;
+        BigInteger expected = BigInteger.valueOf(intMax);
+        expected = expected.add(BigInteger.valueOf(intMax * DateTimeConstants.MILLIS_PER_SECOND));
+        expected = expected.divide(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_MINUTE));
+        assertTrue(expected.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) < 0);
+        assertEquals(expected.longValue(), test.toStandardMinutes().getMinutes());
+        
+        test = new Period(0, 0, 0, 0, 0, Integer.MAX_VALUE, 60, 0);
+        try {
+            test.toStandardMinutes();
+            fail();
+        } catch (ArithmeticException ex) {}
+    }
+
+    public void testToStandardMinutes_years() {
+        Period test = Period.years(1);
+        try {
+            test.toStandardMinutes();
+            fail();
+        } catch (IllegalStateException ex) {}
+        
+        test = Period.years(-1);
+        try {
+            test.toStandardMinutes();
+            fail();
+        } catch (IllegalStateException ex) {}
+        
+        test = Period.years(0);
+        assertEquals(0, test.toStandardMinutes().getMinutes());
+    }
+
+    public void testToStandardMinutes_months() {
+        Period test = Period.months(1);
+        try {
+            test.toStandardMinutes();
+            fail();
+        } catch (IllegalStateException ex) {}
+        
+        test = Period.months(-1);
+        try {
+            test.toStandardMinutes();
+            fail();
+        } catch (IllegalStateException ex) {}
+        
+        test = Period.months(0);
+        assertEquals(0, test.toStandardMinutes().getMinutes());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToStandardSeconds() {
+        Period test = new Period(0, 0, 0, 0, 0, 0, 7, 8);
+        assertEquals(7, test.toStandardSeconds().getSeconds());
+        
+        test = new Period(0, 0, 0, 0, 0, 1, 3, 0);
+        assertEquals(63, test.toStandardSeconds().getSeconds());
+        
+        test = new Period(0, 0, 0, 0, 0, 0, 0, 1000);
+        assertEquals(1, test.toStandardSeconds().getSeconds());
+        
+        test = new Period(0, 0, 0, 0, 0, 0, Integer.MAX_VALUE, 0);
+        assertEquals(Integer.MAX_VALUE, test.toStandardSeconds().getSeconds());
+        
+        test = new Period(0, 0, 0, 0, 0, 0, 20, Integer.MAX_VALUE);
+        long expected = 20;
+        expected += ((long) Integer.MAX_VALUE) / DateTimeConstants.MILLIS_PER_SECOND;
+        assertEquals(expected, test.toStandardSeconds().getSeconds());
+        
+        test = new Period(0, 0, 0, 0, 0, 0, Integer.MAX_VALUE, 1000);
+        try {
+            test.toStandardSeconds();
+            fail();
+        } catch (ArithmeticException ex) {}
+    }
+
+    public void testToStandardSeconds_years() {
+        Period test = Period.years(1);
+        try {
+            test.toStandardSeconds();
+            fail();
+        } catch (IllegalStateException ex) {}
+        
+        test = Period.years(-1);
+        try {
+            test.toStandardSeconds();
+            fail();
+        } catch (IllegalStateException ex) {}
+        
+        test = Period.years(0);
+        assertEquals(0, test.toStandardSeconds().getSeconds());
+    }
+
+    public void testToStandardSeconds_months() {
+        Period test = Period.months(1);
+        try {
+            test.toStandardSeconds();
+            fail();
+        } catch (IllegalStateException ex) {}
+        
+        test = Period.months(-1);
+        try {
+            test.toStandardSeconds();
+            fail();
+        } catch (IllegalStateException ex) {}
+        
+        test = Period.months(0);
+        assertEquals(0, test.toStandardSeconds().getSeconds());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToStandardDuration() {
+        Period test = new Period(0, 0, 0, 0, 0, 0, 0, 8);
+        assertEquals(8, test.toStandardDuration().getMillis());
+        
+        test = new Period(0, 0, 0, 0, 0, 0, 1, 20);
+        assertEquals(1020, test.toStandardDuration().getMillis());
+        
+        test = new Period(0, 0, 0, 0, 0, 0, 0, Integer.MAX_VALUE);
+        assertEquals(Integer.MAX_VALUE, test.toStandardDuration().getMillis());
+        
+        test = new Period(0, 0, 0, 0, 0, 10, 20, Integer.MAX_VALUE);
+        long expected = Integer.MAX_VALUE;
+        expected += 10L * ((long) DateTimeConstants.MILLIS_PER_MINUTE);
+        expected += 20L * ((long) DateTimeConstants.MILLIS_PER_SECOND);
+        assertEquals(expected, test.toStandardDuration().getMillis());
+        
+        // proof that overflow does not occur
+        BigInteger intMax = BigInteger.valueOf(Integer.MAX_VALUE);
+        BigInteger exp = intMax;
+        exp = exp.add(intMax.multiply(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_SECOND)));
+        exp = exp.add(intMax.multiply(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_MINUTE)));
+        exp = exp.add(intMax.multiply(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_HOUR)));
+        exp = exp.add(intMax.multiply(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_DAY)));
+        exp = exp.add(intMax.multiply(BigInteger.valueOf(DateTimeConstants.MILLIS_PER_WEEK)));
+        assertTrue(exp.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) < 0);
+//        test = new Period(0, 0, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);
+//        try {
+//            test.toStandardDuration();
+//            fail();
+//        } catch (ArithmeticException ex) {}
+    }
+
+    public void testToStandardDuration_years() {
+        Period test = Period.years(1);
+        try {
+            test.toStandardDuration();
+            fail();
+        } catch (IllegalStateException ex) {}
+        
+        test = Period.years(-1);
+        try {
+            test.toStandardDuration();
+            fail();
+        } catch (IllegalStateException ex) {}
+        
+        test = Period.years(0);
+        assertEquals(0, test.toStandardDuration().getMillis());
+    }
+
+    public void testToStandardDuration_months() {
+        Period test = Period.months(1);
+        try {
+            test.toStandardDuration();
+            fail();
+        } catch (IllegalStateException ex) {}
+        
+        test = Period.months(-1);
+        try {
+            test.toStandardDuration();
+            fail();
+        } catch (IllegalStateException ex) {}
+        
+        test = Period.months(0);
+        assertEquals(0, test.toStandardDuration().getMillis());
+    }
+
 }

From 0d5c8e72e8cc5b203bde770bce22f3b136d538b8 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 24 Aug 2007 10:39:03 +0000
Subject: [PATCH 069/112] Fix Period plus*() and minus*() to throw correct
 exception as per javadoc

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1239 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                             | 4 ++++
 JodaTime/src/java/org/joda/time/PeriodType.java        | 4 ++--
 JodaTime/src/test/org/joda/time/TestPeriod_Basics.java | 4 ++--
 3 files changed, 8 insertions(+), 4 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index f5b3cb8e2..ddd9eca7c 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -86,6 +86,10 @@ Bug fixes since 1.4
   This problem was exposed when Days.daysBetween() and similar methods
   failed to give the right results
 
+- Period.plusXxx(), minusXxx()
+  Fix to throw correct exception as per javadoc (UnsupportedOperationException) when
+  adding to an unsupported field
+
 - ZoneInfoProvider now returns a copy of its internal state on getAvailableIDs
   This avoids race conditions on some JVMs
 
diff --git a/JodaTime/src/java/org/joda/time/PeriodType.java b/JodaTime/src/java/org/joda/time/PeriodType.java
index 087f557d5..907b82783 100644
--- a/JodaTime/src/java/org/joda/time/PeriodType.java
+++ b/JodaTime/src/java/org/joda/time/PeriodType.java
@@ -700,12 +700,12 @@ boolean setIndexedField(ReadablePeriod period, int index, int[] values, int newV
      * @param index  the index to use
      * @param values  the array to populate
      * @param valueToAdd  the value to add
-     * @throws IllegalArgumentException if not supported
+     * @throws UnsupportedOperationException if not supported
      */
     boolean addIndexedField(ReadablePeriod period, int index, int[] values, int valueToAdd) {
         int realIndex = iIndices[index];
         if (realIndex == -1) {
-            throw new IllegalArgumentException("Field is not supported");
+            throw new UnsupportedOperationException("Field is not supported");
         }
         values[realIndex] = FieldUtils.safeAdd(values[realIndex], valueToAdd);
         return true;
diff --git a/JodaTime/src/test/org/joda/time/TestPeriod_Basics.java b/JodaTime/src/test/org/joda/time/TestPeriod_Basics.java
index 154a06fd9..11931dafa 100644
--- a/JodaTime/src/test/org/joda/time/TestPeriod_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestPeriod_Basics.java
@@ -730,7 +730,7 @@ public void testPlus() {
         try {
             test.plusYears(1);
             fail();
-        } catch (IllegalArgumentException ex) {}
+        } catch (UnsupportedOperationException ex) {}
     }
 
     public void testPlusZero() {
@@ -784,7 +784,7 @@ public void testMinus() {
         try {
             test.minusYears(1);
             fail();
-        } catch (IllegalArgumentException ex) {}
+        } catch (UnsupportedOperationException ex) {}
     }
 
     //-----------------------------------------------------------------------

From 7c4c238b7b4dafbbb0269c05fc152c0de22c9c3e Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 24 Aug 2007 10:41:54 +0000
Subject: [PATCH 070/112] Add Period.toStandard*() methods - use
 UnsupportedOperationException

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1240 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/Period.java | 17 +++++++++--------
 1 file changed, 9 insertions(+), 8 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/Period.java b/JodaTime/src/java/org/joda/time/Period.java
index d865db56f..365c18299 100644
--- a/JodaTime/src/java/org/joda/time/Period.java
+++ b/JodaTime/src/java/org/joda/time/Period.java
@@ -1190,7 +1190,7 @@ public Period minusMillis(int millis) {
      * If the period contains years or months, an exception will be thrown.
      * 
      * @return a period representing the number of standard weeks in this period
-     * @throws IllegalStateException if the period contains years or months
+     * @throws UnsupportedOperationException if the period contains years or months
      * @throws ArithmeticException if the number of weeks is too large to be represented
      * @since 1.5
      */
@@ -1220,7 +1220,7 @@ public Weeks toStandardWeeks() {
      * If the period contains years or months, an exception will be thrown.
      * 
      * @return a period representing the number of standard days in this period
-     * @throws IllegalStateException if the period contains years or months
+     * @throws UnsupportedOperationException if the period contains years or months
      * @throws ArithmeticException if the number of days is too large to be represented
      * @since 1.5
      */
@@ -1251,7 +1251,7 @@ public Days toStandardDays() {
      * If the period contains years or months, an exception will be thrown.
      * 
      * @return a period representing the number of standard hours in this period
-     * @throws IllegalStateException if the period contains years or months
+     * @throws UnsupportedOperationException if the period contains years or months
      * @throws ArithmeticException if the number of hours is too large to be represented
      * @since 1.5
      */
@@ -1282,7 +1282,7 @@ public Hours toStandardHours() {
      * If the period contains years or months, an exception will be thrown.
      * 
      * @return a period representing the number of standard minutes in this period
-     * @throws IllegalStateException if the period contains years or months
+     * @throws UnsupportedOperationException if the period contains years or months
      * @throws ArithmeticException if the number of minutes is too large to be represented
      * @since 1.5
      */
@@ -1313,7 +1313,7 @@ public Minutes toStandardMinutes() {
      * If the period contains years or months, an exception will be thrown.
      * 
      * @return a period representing the number of standard seconds in this period
-     * @throws IllegalStateException if the period contains years or months
+     * @throws UnsupportedOperationException if the period contains years or months
      * @throws ArithmeticException if the number of seconds is too large to be represented
      * @since 1.5
      */
@@ -1344,7 +1344,7 @@ public Seconds toStandardSeconds() {
      * If the period contains years or months, an exception will be thrown.
      * 
      * @return a duration equivalent to this period
-     * @throws IllegalStateException if the period contains years or months
+     * @throws UnsupportedOperationException if the period contains years or months
      * @since 1.5
      */
     public Duration toStandardDuration() {
@@ -1362,13 +1362,14 @@ public Duration toStandardDuration() {
      * Check that there are no years or months in the period.
      * 
      * @param destintionType  the destination type, not null
+     * @throws UnsupportedOperationException if the period contains years or months
      */
     private void checkYearsAndMonths(String destintionType) {
         if (getMonths() != 0) {
-            throw new IllegalStateException("Cannot convert to " + destintionType + " as this period contains months and months vary in length");
+            throw new UnsupportedOperationException("Cannot convert to " + destintionType + " as this period contains months and months vary in length");
         }
         if (getYears() != 0) {
-            throw new IllegalStateException("Cannot convert to " + destintionType + " as this period contains years and years vary in length");
+            throw new UnsupportedOperationException("Cannot convert to " + destintionType + " as this period contains years and years vary in length");
         }
     }
 

From 0472506e5842fb03c441bfe2c59f263d46aec077 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 24 Aug 2007 10:48:26 +0000
Subject: [PATCH 071/112] Add Period.toStandard*() methods - use
 UnsupportedOperationException

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1241 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../test/org/joda/time/TestPeriod_Basics.java | 48 +++++++++----------
 1 file changed, 24 insertions(+), 24 deletions(-)

diff --git a/JodaTime/src/test/org/joda/time/TestPeriod_Basics.java b/JodaTime/src/test/org/joda/time/TestPeriod_Basics.java
index 11931dafa..410191a47 100644
--- a/JodaTime/src/test/org/joda/time/TestPeriod_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestPeriod_Basics.java
@@ -824,13 +824,13 @@ public void testToStandardWeeks_years() {
         try {
             test.toStandardWeeks();
             fail();
-        } catch (IllegalStateException ex) {}
+        } catch (UnsupportedOperationException ex) {}
         
         test = Period.years(-1);
         try {
             test.toStandardWeeks();
             fail();
-        } catch (IllegalStateException ex) {}
+        } catch (UnsupportedOperationException ex) {}
         
         test = Period.years(0);
         assertEquals(0, test.toStandardWeeks().getWeeks());
@@ -841,13 +841,13 @@ public void testToStandardWeeks_months() {
         try {
             test.toStandardWeeks();
             fail();
-        } catch (IllegalStateException ex) {}
+        } catch (UnsupportedOperationException ex) {}
         
         test = Period.months(-1);
         try {
             test.toStandardWeeks();
             fail();
-        } catch (IllegalStateException ex) {}
+        } catch (UnsupportedOperationException ex) {}
         
         test = Period.months(0);
         assertEquals(0, test.toStandardWeeks().getWeeks());
@@ -889,13 +889,13 @@ public void testToStandardDays_years() {
         try {
             test.toStandardDays();
             fail();
-        } catch (IllegalStateException ex) {}
+        } catch (UnsupportedOperationException ex) {}
         
         test = Period.years(-1);
         try {
             test.toStandardDays();
             fail();
-        } catch (IllegalStateException ex) {}
+        } catch (UnsupportedOperationException ex) {}
         
         test = Period.years(0);
         assertEquals(0, test.toStandardDays().getDays());
@@ -906,13 +906,13 @@ public void testToStandardDays_months() {
         try {
             test.toStandardDays();
             fail();
-        } catch (IllegalStateException ex) {}
+        } catch (UnsupportedOperationException ex) {}
         
         test = Period.months(-1);
         try {
             test.toStandardDays();
             fail();
-        } catch (IllegalStateException ex) {}
+        } catch (UnsupportedOperationException ex) {}
         
         test = Period.months(0);
         assertEquals(0, test.toStandardDays().getDays());
@@ -953,13 +953,13 @@ public void testToStandardHours_years() {
         try {
             test.toStandardHours();
             fail();
-        } catch (IllegalStateException ex) {}
+        } catch (UnsupportedOperationException ex) {}
         
         test = Period.years(-1);
         try {
             test.toStandardHours();
             fail();
-        } catch (IllegalStateException ex) {}
+        } catch (UnsupportedOperationException ex) {}
         
         test = Period.years(0);
         assertEquals(0, test.toStandardHours().getHours());
@@ -970,13 +970,13 @@ public void testToStandardHours_months() {
         try {
             test.toStandardHours();
             fail();
-        } catch (IllegalStateException ex) {}
+        } catch (UnsupportedOperationException ex) {}
         
         test = Period.months(-1);
         try {
             test.toStandardHours();
             fail();
-        } catch (IllegalStateException ex) {}
+        } catch (UnsupportedOperationException ex) {}
         
         test = Period.months(0);
         assertEquals(0, test.toStandardHours().getHours());
@@ -1016,13 +1016,13 @@ public void testToStandardMinutes_years() {
         try {
             test.toStandardMinutes();
             fail();
-        } catch (IllegalStateException ex) {}
+        } catch (UnsupportedOperationException ex) {}
         
         test = Period.years(-1);
         try {
             test.toStandardMinutes();
             fail();
-        } catch (IllegalStateException ex) {}
+        } catch (UnsupportedOperationException ex) {}
         
         test = Period.years(0);
         assertEquals(0, test.toStandardMinutes().getMinutes());
@@ -1033,13 +1033,13 @@ public void testToStandardMinutes_months() {
         try {
             test.toStandardMinutes();
             fail();
-        } catch (IllegalStateException ex) {}
+        } catch (UnsupportedOperationException ex) {}
         
         test = Period.months(-1);
         try {
             test.toStandardMinutes();
             fail();
-        } catch (IllegalStateException ex) {}
+        } catch (UnsupportedOperationException ex) {}
         
         test = Period.months(0);
         assertEquals(0, test.toStandardMinutes().getMinutes());
@@ -1076,13 +1076,13 @@ public void testToStandardSeconds_years() {
         try {
             test.toStandardSeconds();
             fail();
-        } catch (IllegalStateException ex) {}
+        } catch (UnsupportedOperationException ex) {}
         
         test = Period.years(-1);
         try {
             test.toStandardSeconds();
             fail();
-        } catch (IllegalStateException ex) {}
+        } catch (UnsupportedOperationException ex) {}
         
         test = Period.years(0);
         assertEquals(0, test.toStandardSeconds().getSeconds());
@@ -1093,13 +1093,13 @@ public void testToStandardSeconds_months() {
         try {
             test.toStandardSeconds();
             fail();
-        } catch (IllegalStateException ex) {}
+        } catch (UnsupportedOperationException ex) {}
         
         test = Period.months(-1);
         try {
             test.toStandardSeconds();
             fail();
-        } catch (IllegalStateException ex) {}
+        } catch (UnsupportedOperationException ex) {}
         
         test = Period.months(0);
         assertEquals(0, test.toStandardSeconds().getSeconds());
@@ -1143,13 +1143,13 @@ public void testToStandardDuration_years() {
         try {
             test.toStandardDuration();
             fail();
-        } catch (IllegalStateException ex) {}
+        } catch (UnsupportedOperationException ex) {}
         
         test = Period.years(-1);
         try {
             test.toStandardDuration();
             fail();
-        } catch (IllegalStateException ex) {}
+        } catch (UnsupportedOperationException ex) {}
         
         test = Period.years(0);
         assertEquals(0, test.toStandardDuration().getMillis());
@@ -1160,13 +1160,13 @@ public void testToStandardDuration_months() {
         try {
             test.toStandardDuration();
             fail();
-        } catch (IllegalStateException ex) {}
+        } catch (UnsupportedOperationException ex) {}
         
         test = Period.months(-1);
         try {
             test.toStandardDuration();
             fail();
-        } catch (IllegalStateException ex) {}
+        } catch (UnsupportedOperationException ex) {}
         
         test = Period.months(0);
         assertEquals(0, test.toStandardDuration().getMillis());

From a13f93ca6656aea3adab03a2dea0704f860679cb Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 24 Aug 2007 11:10:19 +0000
Subject: [PATCH 072/112] Add Period plus(ReadablePeriod) minus(ReadablePeriod)

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1242 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |   4 +
 JodaTime/src/java/org/joda/time/Period.java   |  68 ++++++++
 .../src/java/org/joda/time/PeriodType.java    |   4 +
 .../test/org/joda/time/TestPeriod_Basics.java | 152 +++++++++++++++++-
 4 files changed, 226 insertions(+), 2 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index ddd9eca7c..8c5160d7f 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -27,6 +27,10 @@ Enhancements since 1.4
   methods to convert a period to other types using the standard
   conversions (7 day week, 24 hour day, ...)
 
+- Period
+  - add plus(ReadablePeriod), minus(ReadablePeriod)
+  methods to add and subtract whole periods rather than just single fields
+
 - LocalDate.toLocalDateTime
   - provide mechanism to create LocalDateTime from LocalDate and LocalTime
 
diff --git a/JodaTime/src/java/org/joda/time/Period.java b/JodaTime/src/java/org/joda/time/Period.java
index 365c18299..8cb6ee4c8 100644
--- a/JodaTime/src/java/org/joda/time/Period.java
+++ b/JodaTime/src/java/org/joda/time/Period.java
@@ -924,6 +924,40 @@ public Period withMillis(int millis) {
         return new Period(values, getPeriodType());
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Returns a new period with the specified period added.
+     * <p>
+     * Each field of the period is added separately. Thus a period of
+     * 2 hours 30 minutes plus 3 hours 40 minutes will produce a result
+     * of 5 hours 70 minutes.
+     * <p>
+     * If the period being added contains a non-zero amount for a field that
+     * is not supported in this period then an exception is thrown.
+     * <p>
+     * This period instance is immutable and unaffected by this method call.
+     *
+     * @param period  the period to add, null adds zero and returns this
+     * @return the new updated period
+     * @throws UnsupportedOperationException if any field is not supported
+     * @since 1.5
+     */
+    public Period plus(ReadablePeriod period) {
+        if (period == null) {
+            return this;
+        }
+        int[] values = getValues();  // cloned
+        getPeriodType().addIndexedField(this, PeriodType.YEAR_INDEX, values, period.get(DurationFieldType.YEARS_TYPE));
+        getPeriodType().addIndexedField(this, PeriodType.MONTH_INDEX, values, period.get(DurationFieldType.MONTHS_TYPE));
+        getPeriodType().addIndexedField(this, PeriodType.WEEK_INDEX, values, period.get(DurationFieldType.WEEKS_TYPE));
+        getPeriodType().addIndexedField(this, PeriodType.DAY_INDEX, values, period.get(DurationFieldType.DAYS_TYPE));
+        getPeriodType().addIndexedField(this, PeriodType.HOUR_INDEX, values, period.get(DurationFieldType.HOURS_TYPE));
+        getPeriodType().addIndexedField(this, PeriodType.MINUTE_INDEX, values, period.get(DurationFieldType.MINUTES_TYPE));
+        getPeriodType().addIndexedField(this, PeriodType.SECOND_INDEX, values, period.get(DurationFieldType.SECONDS_TYPE));
+        getPeriodType().addIndexedField(this, PeriodType.MILLI_INDEX, values, period.get(DurationFieldType.MILLIS_TYPE));
+        return new Period(values, getPeriodType());
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Returns a new period with the specified number of years added.
@@ -1069,6 +1103,40 @@ public Period plusMillis(int millis) {
         return new Period(values, getPeriodType());
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Returns a new period with the specified period subtracted.
+     * <p>
+     * Each field of the period is subtracted separately. Thus a period of
+     * 3 hours 30 minutes minus 2 hours 40 minutes will produce a result
+     * of 1 hour and -10 minutes.
+     * <p>
+     * If the period being added contains a non-zero amount for a field that
+     * is not supported in this period then an exception is thrown.
+     * <p>
+     * This period instance is immutable and unaffected by this method call.
+     *
+     * @param period  the period to add, null adds zero and returns this
+     * @return the new updated period
+     * @throws UnsupportedOperationException if any field is not supported
+     * @since 1.5
+     */
+    public Period minus(ReadablePeriod period) {
+        if (period == null) {
+            return this;
+        }
+        int[] values = getValues();  // cloned
+        getPeriodType().addIndexedField(this, PeriodType.YEAR_INDEX, values, -period.get(DurationFieldType.YEARS_TYPE));
+        getPeriodType().addIndexedField(this, PeriodType.MONTH_INDEX, values, -period.get(DurationFieldType.MONTHS_TYPE));
+        getPeriodType().addIndexedField(this, PeriodType.WEEK_INDEX, values, -period.get(DurationFieldType.WEEKS_TYPE));
+        getPeriodType().addIndexedField(this, PeriodType.DAY_INDEX, values, -period.get(DurationFieldType.DAYS_TYPE));
+        getPeriodType().addIndexedField(this, PeriodType.HOUR_INDEX, values, -period.get(DurationFieldType.HOURS_TYPE));
+        getPeriodType().addIndexedField(this, PeriodType.MINUTE_INDEX, values, -period.get(DurationFieldType.MINUTES_TYPE));
+        getPeriodType().addIndexedField(this, PeriodType.SECOND_INDEX, values, -period.get(DurationFieldType.SECONDS_TYPE));
+        getPeriodType().addIndexedField(this, PeriodType.MILLI_INDEX, values, -period.get(DurationFieldType.MILLIS_TYPE));
+        return new Period(values, getPeriodType());
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Returns a new period with the specified number of years taken away.
diff --git a/JodaTime/src/java/org/joda/time/PeriodType.java b/JodaTime/src/java/org/joda/time/PeriodType.java
index 907b82783..e4431f3f8 100644
--- a/JodaTime/src/java/org/joda/time/PeriodType.java
+++ b/JodaTime/src/java/org/joda/time/PeriodType.java
@@ -700,9 +700,13 @@ boolean setIndexedField(ReadablePeriod period, int index, int[] values, int newV
      * @param index  the index to use
      * @param values  the array to populate
      * @param valueToAdd  the value to add
+     * @return true if the array is updated
      * @throws UnsupportedOperationException if not supported
      */
     boolean addIndexedField(ReadablePeriod period, int index, int[] values, int valueToAdd) {
+        if (valueToAdd == 0) {
+            return false;
+        }
         int realIndex = iIndices[index];
         if (realIndex == -1) {
             throw new UnsupportedOperationException("Field is not supported");
diff --git a/JodaTime/src/test/org/joda/time/TestPeriod_Basics.java b/JodaTime/src/test/org/joda/time/TestPeriod_Basics.java
index 410191a47..0bd925ddc 100644
--- a/JodaTime/src/test/org/joda/time/TestPeriod_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestPeriod_Basics.java
@@ -708,6 +708,154 @@ public void testWith() {
 
     //-----------------------------------------------------------------------
     public void testPlus() {
+        Period base = new Period(1, 2, 3, 4, 5, 6, 7, 8);
+        Period baseDaysOnly = new Period(0, 0, 0, 10, 0, 0, 0, 0, PeriodType.days());
+        
+        Period test = base.plus((ReadablePeriod) null);
+        assertSame(base, test);
+        
+        test = base.plus(Period.years(10));
+        assertEquals(11, test.getYears());
+        assertEquals(2, test.getMonths());
+        assertEquals(3, test.getWeeks());
+        assertEquals(4, test.getDays());
+        assertEquals(5, test.getHours());
+        assertEquals(6, test.getMinutes());
+        assertEquals(7, test.getSeconds());
+        assertEquals(8, test.getMillis());
+        
+        test = base.plus(Years.years(10));
+        assertEquals(11, test.getYears());
+        assertEquals(2, test.getMonths());
+        assertEquals(3, test.getWeeks());
+        assertEquals(4, test.getDays());
+        assertEquals(5, test.getHours());
+        assertEquals(6, test.getMinutes());
+        assertEquals(7, test.getSeconds());
+        assertEquals(8, test.getMillis());
+        
+        test = base.plus(Period.days(10));
+        assertEquals(1, test.getYears());
+        assertEquals(2, test.getMonths());
+        assertEquals(3, test.getWeeks());
+        assertEquals(14, test.getDays());
+        assertEquals(5, test.getHours());
+        assertEquals(6, test.getMinutes());
+        assertEquals(7, test.getSeconds());
+        assertEquals(8, test.getMillis());
+        
+        test = baseDaysOnly.plus(Period.years(0));
+        assertEquals(0, test.getYears());
+        assertEquals(0, test.getMonths());
+        assertEquals(0, test.getWeeks());
+        assertEquals(10, test.getDays());
+        assertEquals(0, test.getHours());
+        assertEquals(0, test.getMinutes());
+        assertEquals(0, test.getSeconds());
+        assertEquals(0, test.getMillis());
+        
+        test = baseDaysOnly.plus(baseDaysOnly);
+        assertEquals(0, test.getYears());
+        assertEquals(0, test.getMonths());
+        assertEquals(0, test.getWeeks());
+        assertEquals(20, test.getDays());
+        assertEquals(0, test.getHours());
+        assertEquals(0, test.getMinutes());
+        assertEquals(0, test.getSeconds());
+        assertEquals(0, test.getMillis());
+        
+        try {
+            baseDaysOnly.plus(Period.years(1));
+            fail();
+        } catch (UnsupportedOperationException ex) {}
+        
+        try {
+            Period.days(Integer.MAX_VALUE).plus(Period.days(1));
+            fail();
+        } catch (ArithmeticException ex) {}
+        
+        try {
+            Period.days(Integer.MIN_VALUE).plus(Period.days(-1));
+            fail();
+        } catch (ArithmeticException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
+    public void testMinus() {
+        Period base = new Period(1, 2, 3, 4, 5, 6, 7, 8);
+        Period baseDaysOnly = new Period(0, 0, 0, 10, 0, 0, 0, 0, PeriodType.days());
+        
+        Period test = base.minus((ReadablePeriod) null);
+        assertSame(base, test);
+        
+        test = base.minus(Period.years(10));
+        assertEquals(-9, test.getYears());
+        assertEquals(2, test.getMonths());
+        assertEquals(3, test.getWeeks());
+        assertEquals(4, test.getDays());
+        assertEquals(5, test.getHours());
+        assertEquals(6, test.getMinutes());
+        assertEquals(7, test.getSeconds());
+        assertEquals(8, test.getMillis());
+        
+        test = base.minus(Years.years(10));
+        assertEquals(-9, test.getYears());
+        assertEquals(2, test.getMonths());
+        assertEquals(3, test.getWeeks());
+        assertEquals(4, test.getDays());
+        assertEquals(5, test.getHours());
+        assertEquals(6, test.getMinutes());
+        assertEquals(7, test.getSeconds());
+        assertEquals(8, test.getMillis());
+        
+        test = base.minus(Period.days(10));
+        assertEquals(1, test.getYears());
+        assertEquals(2, test.getMonths());
+        assertEquals(3, test.getWeeks());
+        assertEquals(-6, test.getDays());
+        assertEquals(5, test.getHours());
+        assertEquals(6, test.getMinutes());
+        assertEquals(7, test.getSeconds());
+        assertEquals(8, test.getMillis());
+        
+        test = baseDaysOnly.minus(Period.years(0));
+        assertEquals(0, test.getYears());
+        assertEquals(0, test.getMonths());
+        assertEquals(0, test.getWeeks());
+        assertEquals(10, test.getDays());
+        assertEquals(0, test.getHours());
+        assertEquals(0, test.getMinutes());
+        assertEquals(0, test.getSeconds());
+        assertEquals(0, test.getMillis());
+        
+        test = baseDaysOnly.minus(baseDaysOnly);
+        assertEquals(0, test.getYears());
+        assertEquals(0, test.getMonths());
+        assertEquals(0, test.getWeeks());
+        assertEquals(0, test.getDays());
+        assertEquals(0, test.getHours());
+        assertEquals(0, test.getMinutes());
+        assertEquals(0, test.getSeconds());
+        assertEquals(0, test.getMillis());
+        
+        try {
+            baseDaysOnly.minus(Period.years(1));
+            fail();
+        } catch (UnsupportedOperationException ex) {}
+        
+        try {
+            Period.days(Integer.MAX_VALUE).minus(Period.days(-1));
+            fail();
+        } catch (ArithmeticException ex) {}
+        
+        try {
+            Period.days(Integer.MIN_VALUE).minus(Period.days(1));
+            fail();
+        } catch (ArithmeticException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
+    public void testPlusFields() {
         Period test;
         test = Period.years(1).plusYears(1);
         assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test);
@@ -733,7 +881,7 @@ public void testPlus() {
         } catch (UnsupportedOperationException ex) {}
     }
 
-    public void testPlusZero() {
+    public void testPlusFieldsZero() {
         Period test, result;
         test = Period.years(1);
         result = test.plusYears(0);
@@ -761,7 +909,7 @@ public void testPlusZero() {
         assertSame(test, result);
     }
 
-    public void testMinus() {
+    public void testMinusFields() {
         Period test;
         test = Period.years(3).minusYears(1);
         assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test);

From 31de4ef49abf4eedd6a94e32023dcc301fc4aa14 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 24 Aug 2007 12:04:40 +0000
Subject: [PATCH 073/112] Add Period normalizedStandard(),
 normalizedStandard(PeriodType) Fix Period withXxx() to throw
 UnsupportedOperationException

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1243 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |   9 +-
 JodaTime/src/java/org/joda/time/Period.java   |  90 ++++++++++++-
 .../src/java/org/joda/time/PeriodType.java    |   4 +-
 .../test/org/joda/time/TestPeriod_Basics.java | 121 +++++++++++++++++-
 4 files changed, 217 insertions(+), 7 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 8c5160d7f..b26e9f7c3 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -31,6 +31,11 @@ Enhancements since 1.4
   - add plus(ReadablePeriod), minus(ReadablePeriod)
   methods to add and subtract whole periods rather than just single fields
 
+- Period
+  - add normalizedStandard(), normalizedStandard(PeriodType)
+  methods to normalize the period back to standard field ranges, such as
+  normalizing 1 year 15 months to 2 years 3 months
+
 - LocalDate.toLocalDateTime
   - provide mechanism to create LocalDateTime from LocalDate and LocalTime
 
@@ -90,9 +95,9 @@ Bug fixes since 1.4
   This problem was exposed when Days.daysBetween() and similar methods
   failed to give the right results
 
-- Period.plusXxx(), minusXxx()
+- Period.plusXxx(), minusXxx(), withXxx()
   Fix to throw correct exception as per javadoc (UnsupportedOperationException) when
-  adding to an unsupported field
+  changing an unsupported field
 
 - ZoneInfoProvider now returns a copy of its internal state on getAvailableIDs
   This avoids race conditions on some JVMs
diff --git a/JodaTime/src/java/org/joda/time/Period.java b/JodaTime/src/java/org/joda/time/Period.java
index 8cb6ee4c8..d66b44a8b 100644
--- a/JodaTime/src/java/org/joda/time/Period.java
+++ b/JodaTime/src/java/org/joda/time/Period.java
@@ -18,6 +18,7 @@
 import java.io.Serializable;
 
 import org.joda.time.base.BasePeriod;
+import org.joda.time.chrono.ISOChronology;
 import org.joda.time.field.FieldUtils;
 
 /**
@@ -930,7 +931,7 @@ public Period withMillis(int millis) {
      * <p>
      * Each field of the period is added separately. Thus a period of
      * 2 hours 30 minutes plus 3 hours 40 minutes will produce a result
-     * of 5 hours 70 minutes.
+     * of 5 hours 70 minutes - see {@link #normalizedStandard()}.
      * <p>
      * If the period being added contains a non-zero amount for a field that
      * is not supported in this period then an exception is thrown.
@@ -1109,7 +1110,7 @@ public Period plusMillis(int millis) {
      * <p>
      * Each field of the period is subtracted separately. Thus a period of
      * 3 hours 30 minutes minus 2 hours 40 minutes will produce a result
-     * of 1 hour and -10 minutes.
+     * of 1 hour and -10 minutes - see {@link #normalizedStandard()}.
      * <p>
      * If the period being added contains a non-zero amount for a field that
      * is not supported in this period then an exception is thrown.
@@ -1441,4 +1442,89 @@ private void checkYearsAndMonths(String destintionType) {
         }
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Normalizes this period using standard rules, assuming a 12 month year,
+     * 7 day week, 24 hour day, 60 minute hour and 60 second minute.
+     * <p>
+     * This method allows you to normalize a period.
+     * However to achieve this it makes the assumption that all years are
+     * 12 months, all weeks are 7 days, all days are 24 hours,
+     * all hours are 60 minutes and all minutes are 60 seconds. This is not
+     * true when daylight savings time is considered, and may also not be true
+     * for some chronologies. However, it is included as it is a useful operation
+     * for many applications and business rules.
+     * <p>
+     * If the period contains years or months, then the months will be
+     * normalized to be between 0 and 11. The days field and below will be
+     * normalized as necessary, however this will not overflow into the months
+     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
+     * But a period of 1 month 40 days will remain as 1 month 40 days.
+     * <p>
+     * The result will always have a <code>PeriodType</code> of standard, thus
+     * days will be grouped into weeks.
+     * 
+     * @return a normalized period equivalent to this period
+     * @throws ArithmeticException if any field is too large to be represented
+     * @since 1.5
+     */
+    public Period normalizedStandard() {
+        return normalizedStandard(PeriodType.standard());
+    }
+
+    //-----------------------------------------------------------------------
+    /**
+     * Normalizes this period using standard rules, assuming a 12 month year,
+     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,
+     * providing control over how the result is split into fields.
+     * <p>
+     * This method allows you to normalize a period.
+     * However to achieve this it makes the assumption that all years are
+     * 12 months, all weeks are 7 days, all days are 24 hours,
+     * all hours are 60 minutes and all minutes are 60 seconds. This is not
+     * true when daylight savings time is considered, and may also not be true
+     * for some chronologies. However, it is included as it is a useful operation
+     * for many applications and business rules.
+     * <p>
+     * If the period contains years or months, then the months will be
+     * normalized to be between 0 and 11. The days field and below will be
+     * normalized as necessary, however this will not overflow into the months
+     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.
+     * But a period of 1 month 40 days will remain as 1 month 40 days.
+     * <p>
+     * The PeriodType parameter controls how the result is created. It allows
+     * you to omit certain fields from the result if desired. For example,
+     * you may not want the result to include weeks, in which case you pass
+     * in <code>PeriodType.yearMonthDayTime()</code>.
+     * 
+     * @param type  the period type of the new period, null means standard type
+     * @return a normalized period equivalent to this period
+     * @throws ArithmeticException if any field is too large to be represented
+     * @throws UnsupportedOperationException if this period contains non-zero
+     *  years or months but the specified period type does not support them
+     * @since 1.5
+     */
+    public Period normalizedStandard(PeriodType type) {
+        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
+        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
+        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
+        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
+        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
+        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
+        Period result = new Period(millis, DateTimeUtils.getPeriodType(type), ISOChronology.getInstanceUTC());
+        int years = getYears();
+        int months = getMonths();
+        if (years != 0 || months != 0) {
+            years = FieldUtils.safeAdd(years, months / 12);
+            months = months % 12;
+            if (years != 0) {
+                result = result.withYears(years);
+            }
+            if (months != 0) {
+                result = result.withMonths(months);
+            }
+        }
+        return result;
+    }
+
 }
diff --git a/JodaTime/src/java/org/joda/time/PeriodType.java b/JodaTime/src/java/org/joda/time/PeriodType.java
index e4431f3f8..94c41188c 100644
--- a/JodaTime/src/java/org/joda/time/PeriodType.java
+++ b/JodaTime/src/java/org/joda/time/PeriodType.java
@@ -682,12 +682,12 @@ int getIndexedField(ReadablePeriod period, int index) {
      * @param index  the index to use
      * @param values  the array to populate
      * @param newValue  the value to set
-     * @throws IllegalArgumentException if not supported
+     * @throws UnsupportedOperationException if not supported
      */
     boolean setIndexedField(ReadablePeriod period, int index, int[] values, int newValue) {
         int realIndex = iIndices[index];
         if (realIndex == -1) {
-            throw new IllegalArgumentException("Field is not supported");
+            throw new UnsupportedOperationException("Field is not supported");
         }
         values[realIndex] = newValue;
         return true;
diff --git a/JodaTime/src/test/org/joda/time/TestPeriod_Basics.java b/JodaTime/src/test/org/joda/time/TestPeriod_Basics.java
index 0bd925ddc..60c398bc0 100644
--- a/JodaTime/src/test/org/joda/time/TestPeriod_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestPeriod_Basics.java
@@ -703,7 +703,7 @@ public void testWith() {
         try {
             test.withYears(1);
             fail();
-        } catch (IllegalArgumentException ex) {}
+        } catch (UnsupportedOperationException ex) {}
     }
 
     //-----------------------------------------------------------------------
@@ -1320,4 +1320,123 @@ public void testToStandardDuration_months() {
         assertEquals(0, test.toStandardDuration().getMillis());
     }
 
+    //-----------------------------------------------------------------------
+    public void testNormalizedStandard_yearMonth1() {
+        Period test = new Period(1, 15, 0, 0, 0, 0, 0, 0);
+        Period result = test.normalizedStandard();
+        assertEquals(new Period(1, 15, 0, 0, 0, 0, 0, 0), test);
+        assertEquals(new Period(2, 3, 0, 0, 0, 0, 0, 0), result);
+    }
+
+    public void testNormalizedStandard_yearMonth2() {
+        Period test = new Period(Integer.MAX_VALUE, 15, 0, 0, 0, 0, 0, 0);
+        try {
+            test.normalizedStandard();
+            fail();
+        } catch (ArithmeticException ex) {}
+    }
+
+    public void testNormalizedStandard_weekDay1() {
+        Period test = new Period(0, 0, 1, 12, 0, 0, 0, 0);
+        Period result = test.normalizedStandard();
+        assertEquals(new Period(0, 0, 1, 12, 0, 0, 0, 0), test);
+        assertEquals(new Period(0, 0, 2, 5, 0, 0, 0, 0), result);
+    }
+
+    public void testNormalizedStandard_weekDay2() {
+        Period test = new Period(0, 0, Integer.MAX_VALUE, 7, 0, 0, 0, 0);
+        try {
+            test.normalizedStandard();
+            fail();
+        } catch (ArithmeticException ex) {}
+    }
+
+    public void testNormalizedStandard_yearMonthWeekDay() {
+        Period test = new Period(1, 15, 1, 12, 0, 0, 0, 0);
+        Period result = test.normalizedStandard();
+        assertEquals(new Period(1, 15, 1, 12, 0, 0, 0, 0), test);
+        assertEquals(new Period(2, 3, 2, 5, 0, 0, 0, 0), result);
+    }
+
+    public void testNormalizedStandard_yearMonthDay() {
+        Period test = new Period(1, 15, 0, 36, 0, 0, 0, 0);
+        Period result = test.normalizedStandard();
+        assertEquals(new Period(1, 15, 0, 36, 0, 0, 0, 0), test);
+        assertEquals(new Period(2, 3, 5, 1, 0, 0, 0, 0), result);
+    }
+
+    public void testNormalizedStandard_negative() {
+        Period test = new Period(0, 0, 0, 0, 2, -10, 0, 0);
+        Period result = test.normalizedStandard();
+        assertEquals(new Period(0, 0, 0, 0, 2, -10, 0, 0), test);
+        assertEquals(new Period(0, 0, 0, 0, 1, 50, 0, 0), result);
+    }
+
+    public void testNormalizedStandard_fullNegative() {
+        Period test = new Period(0, 0, 0, 0, 1, -70, 0, 0);
+        Period result = test.normalizedStandard();
+        assertEquals(new Period(0, 0, 0, 0, 1, -70, 0, 0), test);
+        assertEquals(new Period(0, 0, 0, 0, 0, -10, 0, 0), result);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testNormalizedStandard_periodType_yearMonth1() {
+        Period test = new Period(1, 15, 0, 0, 0, 0, 0, 0);
+        Period result = test.normalizedStandard((PeriodType) null);
+        assertEquals(new Period(1, 15, 0, 0, 0, 0, 0, 0), test);
+        assertEquals(new Period(2, 3, 0, 0, 0, 0, 0, 0), result);
+    }
+
+    public void testNormalizedStandard_periodType_yearMonth2() {
+        Period test = new Period(Integer.MAX_VALUE, 15, 0, 0, 0, 0, 0, 0);
+        try {
+            test.normalizedStandard((PeriodType) null);
+            fail();
+        } catch (ArithmeticException ex) {}
+    }
+
+    public void testNormalizedStandard_periodType_yearMonth3() {
+        Period test = new Period(1, 15, 3, 4, 0, 0, 0, 0);
+        try {
+            test.normalizedStandard(PeriodType.dayTime());
+            fail();
+        } catch (UnsupportedOperationException ex) {}
+    }
+
+    public void testNormalizedStandard_periodType_weekDay1() {
+        Period test = new Period(0, 0, 1, 12, 0, 0, 0, 0);
+        Period result = test.normalizedStandard((PeriodType) null);
+        assertEquals(new Period(0, 0, 1, 12, 0, 0, 0, 0), test);
+        assertEquals(new Period(0, 0, 2, 5, 0, 0, 0, 0), result);
+    }
+
+    public void testNormalizedStandard_periodType_weekDay2() {
+        Period test = new Period(0, 0, Integer.MAX_VALUE, 7, 0, 0, 0, 0);
+        try {
+            test.normalizedStandard((PeriodType) null);
+            fail();
+        } catch (ArithmeticException ex) {}
+    }
+
+    public void testNormalizedStandard_periodType_weekDay3() {
+        Period test = new Period(0, 0, 1, 12, 0, 0, 0, 0);
+        Period result = test.normalizedStandard(PeriodType.dayTime());
+        assertEquals(new Period(0, 0, 1, 12, 0, 0, 0, 0), test);
+        assertEquals(new Period(0, 0, 0, 19, 0, 0, 0, 0, PeriodType.dayTime()), result);
+    }
+
+    public void testNormalizedStandard_periodType_yearMonthWeekDay() {
+        Period test = new Period(1, 15, 1, 12, 0, 0, 0, 0);
+        Period result = test.normalizedStandard(PeriodType.yearMonthDayTime());
+        assertEquals(new Period(1, 15, 1, 12, 0, 0, 0, 0), test);
+        assertEquals(new Period(2, 3, 0, 19, 0, 0, 0, 0, PeriodType.yearMonthDayTime()), result);
+    }
+
+    public void testNormalizedStandard_periodType_yearMonthDay() {
+        Period test = new Period(1, 15, 0, 36, 27, 0, 0, 0);
+        Period result = test.normalizedStandard(PeriodType.yearMonthDayTime());
+        assertEquals(new Period(1, 15, 0, 36, 27, 0, 0, 0), test);
+        assertEquals(new Period(2, 3, 0, 37, 3, 0, 0, 0, PeriodType.yearMonthDayTime()), result);
+    }
+
 }

From 1cfa9b4c3614b32892701818c6f23bc35bcaaf7a Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 24 Aug 2007 12:47:04 +0000
Subject: [PATCH 074/112] Add LocalDate toDateTimeAtStartOfDay(),
 toDateTimeAtStartOfDay(DateTimeZone)

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1244 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    | 21 +++++--
 .../src/java/org/joda/time/LocalDate.java     | 56 ++++++++++++++++++-
 .../org/joda/time/TestLocalDate_Basics.java   | 50 ++++++++++++++++-
 3 files changed, 119 insertions(+), 8 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index b26e9f7c3..29e769afb 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -36,8 +36,14 @@ Enhancements since 1.4
   methods to normalize the period back to standard field ranges, such as
   normalizing 1 year 15 months to 2 years 3 months
 
-- LocalDate.toLocalDateTime
-  - provide mechanism to create LocalDateTime from LocalDate and LocalTime
+- LocalDate
+  - add toDateTimeAtStartOfDay(), toDateTimeAtStartOfDay(DateTimeZone)
+  methods to replace toDateTimeAtMidnight() which avoid issues with time zones
+  that do not have midnight at spring DST cutover
+
+- LocalDate
+  - add toLocalDateTime()
+    provide mechanism to create LocalDateTime from LocalDate and LocalTime
 
 - Performance enhancement for LocalDate, LocalTime and LocalDateTime
   - equals, compareTo, Period construction
@@ -46,11 +52,12 @@ Enhancements since 1.4
   - allow periods to be directly formatted, as with datetimes
 
 - DateTimeZone
-  - add isStandardOffset() to assist in determining if DST applies
+  - add isStandardOffset()
+  assists in determining if DST applies
 
 - Interval
-  - add (long,long,DateTimeZone) constructor, emphasising that intervals
-    include a time zone
+  - add (long,long,DateTimeZone) constructor
+  constructor emphasises that intervals include a time zone
 
 
 Compatibility with 1.4
@@ -75,7 +82,9 @@ Semantic compatible - Yes
 
 Deprecations since 1.4
 ----------------------
-None
+- LocalDate
+  - toDateTimeAtMidnight(), toDateTimeAtMidnight(DateTimeZone)
+    use toDateTimeAtStartOfDay() instead because it avoids exceptions
 
 
 Bug fixes since 1.4
diff --git a/JodaTime/src/java/org/joda/time/LocalDate.java b/JodaTime/src/java/org/joda/time/LocalDate.java
index 1540782eb..007ef0653 100644
--- a/JodaTime/src/java/org/joda/time/LocalDate.java
+++ b/JodaTime/src/java/org/joda/time/LocalDate.java
@@ -565,7 +565,51 @@ public int compareTo(Object partial) {
         return super.compareTo(partial);
     }
 
-    // -----------------------------------------------------------------------
+    //-----------------------------------------------------------------------
+    /**
+     * Converts this LocalDate to a full datetime at the earliest valid time
+     * for the date using the default time zone.
+     * <p>
+     * The time will normally be midnight, as that is the earliest time on
+     * any given day. However, in some time zones when Daylight Savings Time
+     * starts, there is no midnight because time jumps from 11:59 to 01:00.
+     * This method handles that situation by returning 01:00 on that date.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
+     * 
+     * @return this date as a datetime at the start of the day
+     */
+    public DateTime toDateTimeAtStartOfDay() {
+        return toDateTimeAtStartOfDay(null);
+    }
+
+    /**
+     * Converts this LocalDate to a full datetime at the earliest valid time
+     * for the date using the specified time zone.
+     * <p>
+     * The time will normally be midnight, as that is the earliest time on
+     * any given day. However, in some time zones when Daylight Savings Time
+     * starts, there is no midnight because time jumps from 11:59 to 01:00.
+     * This method handles that situation by returning 01:00 on that date.
+     * <p>
+     * This method uses the chronology from this instance plus the time zone
+     * specified.
+     * <p>
+     * This instance is immutable and unaffected by this method call.
+     *
+     * @param zone  the zone to use, null means default zone
+     * @return this date as a datetime at the start of the day
+     */
+    public DateTime toDateTimeAtStartOfDay(DateTimeZone zone) {
+        zone = DateTimeUtils.getZone(zone);
+        Chronology chrono = getChronology().withZone(zone);
+        long localMillis = getLocalMillis() + 6L * DateTimeConstants.MILLIS_PER_HOUR;
+        long instant = zone.convertLocalToUTC(localMillis, false);
+        instant = chrono.dayOfMonth().roundFloor(instant);
+        return new DateTime(instant, chrono);
+    }
+
+    //-----------------------------------------------------------------------
     /**
      * Converts this LocalDate to a full datetime at midnight using the default
      * time zone.
@@ -578,6 +622,7 @@ public int compareTo(Object partial) {
      * This instance is immutable and unaffected by this method call.
      * 
      * @return this date as a datetime at midnight
+     * @deprecated Use {@link #toDateTimeAtStartOfDay()} which won't throw an exception
      */
     public DateTime toDateTimeAtMidnight() {
         return toDateTimeAtMidnight(null);
@@ -599,6 +644,7 @@ public DateTime toDateTimeAtMidnight() {
      *
      * @param zone  the zone to use, null means default zone
      * @return this date as a datetime at midnight
+     * @deprecated Use {@link #toDateTimeAtStartOfDay(DateTimeZone)} which won't throw an exception
      */
     public DateTime toDateTimeAtMidnight(DateTimeZone zone) {
         zone = DateTimeUtils.getZone(zone);
@@ -651,6 +697,10 @@ public DateTime toDateTimeAtCurrentTime(DateTimeZone zone) {
     /**
      * Converts this LocalDate to a DateMidnight in the default time zone.
      * <p>
+     * As from v1.5, you are recommended to avoid DateMidnight and use
+     * {@link #toDateTimeAtStartOfDay()} instead because of the exception
+     * detailed below.
+     * <p>
      * This method will throw an exception if the default time zone switches
      * to Daylight Savings Time at midnight and this LocalDate represents
      * that switchover date. The problem is that there is no such time as
@@ -667,6 +717,10 @@ public DateMidnight toDateMidnight() {
     /**
      * Converts this LocalDate to a DateMidnight.
      * <p>
+     * As from v1.5, you are recommended to avoid DateMidnight and use
+     * {@link #toDateTimeAtStartOfDay()} instead because of the exception
+     * detailed below.
+     * <p>
      * This method will throw an exception if the time zone switches
      * to Daylight Savings Time at midnight and this LocalDate represents
      * that switchover date. The problem is that there is no such time as
diff --git a/JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java b/JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java
index d235801ef..09134009d 100644
--- a/JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java
@@ -60,7 +60,12 @@
     private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);
     private static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);
     private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();
-    
+
+    /** Mock zone simulating Asia/Gaza cutover at midnight 2007-04-01 */
+    private static long CUTOVER_GAZA = 1175378400000L;
+    private static int OFFSET_GAZA = 7200000;  // +02:00
+    private static final DateTimeZone MOCK_GAZA = new MockZone(CUTOVER_GAZA, OFFSET_GAZA);
+
     private long TEST_TIME_NOW =
             (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;
             
@@ -627,6 +632,49 @@ public void testWithers() {
         } catch (IllegalArgumentException ex) {}
     }
 
+    //-----------------------------------------------------------------------
+    public void testToDateTimeAtStartOfDay() {
+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS);
+        
+        DateTime test = base.toDateTimeAtStartOfDay();
+        check(base, 2005, 6, 9);
+        assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_LONDON), test);
+    }
+
+    public void testToDateTimeAtStartOfDay_avoidDST() {
+        LocalDate base = new LocalDate(2007, 4, 1);
+        
+        DateTimeZone.setDefault(MOCK_GAZA);
+        DateTime test = base.toDateTimeAtStartOfDay();
+        check(base, 2007, 4, 1);
+        assertEquals(new DateTime(2007, 4, 1, 1, 0, 0, 0, MOCK_GAZA), test);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testToDateTimeAtStartOfDay_Zone() {
+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS);
+        
+        DateTime test = base.toDateTimeAtStartOfDay(TOKYO);
+        check(base, 2005, 6, 9);
+        assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_TOKYO), test);
+    }
+
+    public void testToDateTimeAtStartOfDay_Zone_avoidDST() {
+        LocalDate base = new LocalDate(2007, 4, 1);
+        
+        DateTime test = base.toDateTimeAtStartOfDay(MOCK_GAZA);
+        check(base, 2007, 4, 1);
+        assertEquals(new DateTime(2007, 4, 1, 1, 0, 0, 0, MOCK_GAZA), test);
+    }
+
+    public void testToDateTimeAtStartOfDay_nullZone() {
+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS);
+        
+        DateTime test = base.toDateTimeAtStartOfDay((DateTimeZone) null);
+        check(base, 2005, 6, 9);
+        assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_LONDON), test);
+    }
+
     //-----------------------------------------------------------------------
     public void testToDateTimeAtMidnight() {
         LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS);

From 19e969dd4af6c50223c5b65f8d703cf03b15e3bd Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Sat, 25 Aug 2007 17:15:04 +0000
Subject: [PATCH 075/112] Added appendFixedDecimal and appendFixedSignedDecimal
 methods to DateTimeFormatterBuilder.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1245 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  5 ++
 JodaTime/project.xml                          |  3 +
 .../time/format/DateTimeFormatterBuilder.java | 78 +++++++++++++++++
 .../format/TestDateTimeFormatterBuilder.java  | 83 +++++++++++++++++++
 4 files changed, 169 insertions(+)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 29e769afb..96fb66797 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -59,6 +59,11 @@ Enhancements since 1.4
   - add (long,long,DateTimeZone) constructor
   constructor emphasises that intervals include a time zone
 
+- DateTimeFormatterBuilder
+  - add appendFixedDecimal(DateTimeFieldType,int),
+        appendFixedSignedDecimal(DateTimeFieldType,int)
+  methods for printing and parsing fields which must have a fixed number of digits
+
 
 Compatibility with 1.4
 ----------------------
diff --git a/JodaTime/project.xml b/JodaTime/project.xml
index 7e5ea9143..a4c9efe14 100644
--- a/JodaTime/project.xml
+++ b/JodaTime/project.xml
@@ -166,6 +166,9 @@
     <contributor>
       <name>Maxim Zhao</name>
     </contributor>
+    <contributor>
+      <name>Ryan Propper</name>
+    </contributor>
   </contributors>
 
   <dependencies>
diff --git a/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java b/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java
index e87ceb755..d1b2ced28 100644
--- a/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java
+++ b/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java
@@ -403,6 +403,29 @@ public DateTimeFormatterBuilder appendDecimal(
         }
     }
 
+    /**
+     * Instructs the printer to emit a field value as a fixed-width decimal
+     * number (smaller numbers will be left-padded with zeros), and the parser
+     * to expect an unsigned decimal number with the same fixed width.
+     * 
+     * @param fieldType type of field to append
+     * @param numDigits the exact number of digits to parse or print, except if
+     * printed value requires more digits
+     * @return this DateTimeFormatterBuilder
+     * @throws IllegalArgumentException if field type is null or if <code>numDigits <= 0</code>
+     * @since 1.4
+     */
+    public DateTimeFormatterBuilder appendFixedDecimal(
+            DateTimeFieldType fieldType, int numDigits) {
+        if (fieldType == null) {
+            throw new IllegalArgumentException("Field type must not be null");
+        }
+        if (numDigits <= 0) {
+            throw new IllegalArgumentException("Illegal number of digits: " + numDigits);
+        }
+        return append0(new FixedNumber(fieldType, numDigits, false));
+    }
+
     /**
      * Instructs the printer to emit a field value as a decimal number, and the
      * parser to expect a signed decimal number.
@@ -432,6 +455,29 @@ public DateTimeFormatterBuilder appendSignedDecimal(
         }
     }
 
+    /**
+     * Instructs the printer to emit a field value as a fixed-width decimal
+     * number (smaller numbers will be left-padded with zeros), and the parser
+     * to expect an signed decimal number with the same fixed width.
+     * 
+     * @param fieldType type of field to append
+     * @param numDigits the exact number of digits to parse or print, except if
+     * printed value requires more digits
+     * @return this DateTimeFormatterBuilder
+     * @throws IllegalArgumentException if field type is null or if <code>numDigits <= 0</code>
+     * @since 1.4
+     */
+    public DateTimeFormatterBuilder appendFixedSignedDecimal(
+            DateTimeFieldType fieldType, int numDigits) {
+        if (fieldType == null) {
+            throw new IllegalArgumentException("Field type must not be null");
+        }
+        if (numDigits <= 0) {
+            throw new IllegalArgumentException("Illegal number of digits: " + numDigits);
+        }
+        return append0(new FixedNumber(fieldType, numDigits, true));
+    }
+
     /**
      * Instructs the printer to emit a field value as text, and the
      * parser to expect text.
@@ -1326,6 +1372,38 @@ public void printTo(Writer out, ReadablePartial partial, Locale locale) throws I
         }
     }
 
+    //-----------------------------------------------------------------------
+    static class FixedNumber extends PaddedNumber {
+
+        protected FixedNumber(DateTimeFieldType fieldType, int numDigits, boolean signed) {
+            super(fieldType, numDigits, signed, numDigits);
+        }
+
+        public int parseInto(DateTimeParserBucket bucket, String text, int position) {
+            int newPos = super.parseInto(bucket, text, position);
+            if (newPos < 0) {
+                return newPos;
+            }
+            int expectedPos = position + iMaxParsedDigits;
+            if (newPos != expectedPos) {
+                if (iSigned) {
+                    char c = text.charAt(position);
+                    if (c == '-' || c == '+') {
+                        expectedPos++;
+                    }
+                }
+                if (newPos > expectedPos) {
+                    // The failure is at the position of the first extra digit.
+                    return ~(expectedPos + 1);
+                } else if (newPos < expectedPos) {
+                    // The failure is at the position where the next digit should be.
+                    return ~newPos;
+                }
+            }
+            return newPos;
+        }
+    }
+
     //-----------------------------------------------------------------------
     static class TwoDigitYear
             implements DateTimePrinter, DateTimeParser {
diff --git a/JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java b/JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java
index 4ef01d404..8de549023 100644
--- a/JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java
+++ b/JodaTime/src/test/org/joda/time/format/TestDateTimeFormatterBuilder.java
@@ -18,10 +18,14 @@
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
 
+import org.joda.time.DateTime;
+import org.joda.time.DateTimeFieldType;
+
 /**
  * This class is a Junit unit test for DateTimeFormatterBuilder.
  *
  * @author Stephen Colebourne
+ * @author Brian S O'Neill
  */
 public class TestDateTimeFormatterBuilder extends TestCase {
 
@@ -122,4 +126,83 @@ public void test_append_Printer() {
         assertEquals("XYZ", bld2.toFormatter().print(0L));
     }
 
+    //-----------------------------------------------------------------------
+    public void test_appendFixedDecimal() {
+        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();
+        bld.appendFixedDecimal(DateTimeFieldType.year(), 4);
+        DateTimeFormatter f = bld.toFormatter();
+
+        assertEquals("2007", f.print(new DateTime("2007-01-01")));
+        assertEquals("0123", f.print(new DateTime("123-01-01")));
+        assertEquals("0001", f.print(new DateTime("1-2-3")));
+        assertEquals("99999", f.print(new DateTime("99999-2-3")));
+        assertEquals("-0099", f.print(new DateTime("-99-2-3")));
+        assertEquals("0000", f.print(new DateTime("0-2-3")));
+
+        assertEquals(2001, f.parseDateTime("2001").getYear());
+        try {
+            f.parseDateTime("-2001");
+            fail();
+        } catch (IllegalArgumentException e) {
+        }
+        try {
+            f.parseDateTime("200");
+            fail();
+        } catch (IllegalArgumentException e) {
+        }
+        try {
+            f.parseDateTime("20016");
+            fail();
+        } catch (IllegalArgumentException e) {
+        }
+
+        bld = new DateTimeFormatterBuilder();
+        bld.appendFixedDecimal(DateTimeFieldType.hourOfDay(), 2);
+        bld.appendLiteral(':');
+        bld.appendFixedDecimal(DateTimeFieldType.minuteOfHour(), 2);
+        bld.appendLiteral(':');
+        bld.appendFixedDecimal(DateTimeFieldType.secondOfMinute(), 2);
+        f = bld.toFormatter();
+
+        assertEquals("01:02:34", f.print(new DateTime("T1:2:34")));
+
+        DateTime dt = f.parseDateTime("01:02:34");
+        assertEquals(1, dt.getHourOfDay());
+        assertEquals(2, dt.getMinuteOfHour());
+        assertEquals(34, dt.getSecondOfMinute());
+
+        try {
+            f.parseDateTime("0145:02:34");
+            fail();
+        } catch (IllegalArgumentException e) {
+        }
+        try {
+            f.parseDateTime("01:0:34");
+            fail();
+        } catch (IllegalArgumentException e) {
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_appendFixedSignedDecimal() {
+        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();
+        bld.appendFixedSignedDecimal(DateTimeFieldType.year(), 4);
+        DateTimeFormatter f = bld.toFormatter();
+
+        assertEquals("2007", f.print(new DateTime("2007-01-01")));
+        assertEquals("0123", f.print(new DateTime("123-01-01")));
+        assertEquals("0001", f.print(new DateTime("1-2-3")));
+        assertEquals("99999", f.print(new DateTime("99999-2-3")));
+        assertEquals("-0099", f.print(new DateTime("-99-2-3")));
+        assertEquals("0000", f.print(new DateTime("0-2-3")));
+
+        assertEquals(2001, f.parseDateTime("2001").getYear());
+        assertEquals(-2001, f.parseDateTime("-2001").getYear());
+        assertEquals(2001, f.parseDateTime("+2001").getYear());
+        try {
+            f.parseDateTime("20016");
+            fail();
+        } catch (IllegalArgumentException e) {
+        }
+    }
 }

From 9767bfc1e3daac57ec88f15ec9bf5d86db5cfbad Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Sat, 25 Aug 2007 17:38:42 +0000
Subject: [PATCH 076/112] Fixed @since tags.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1246 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../java/org/joda/time/format/DateTimeFormatterBuilder.java   | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java b/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java
index d1b2ced28..fc6af8519 100644
--- a/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java
+++ b/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java
@@ -413,7 +413,7 @@ public DateTimeFormatterBuilder appendDecimal(
      * printed value requires more digits
      * @return this DateTimeFormatterBuilder
      * @throws IllegalArgumentException if field type is null or if <code>numDigits <= 0</code>
-     * @since 1.4
+     * @since 1.5
      */
     public DateTimeFormatterBuilder appendFixedDecimal(
             DateTimeFieldType fieldType, int numDigits) {
@@ -465,7 +465,7 @@ public DateTimeFormatterBuilder appendSignedDecimal(
      * printed value requires more digits
      * @return this DateTimeFormatterBuilder
      * @throws IllegalArgumentException if field type is null or if <code>numDigits <= 0</code>
-     * @since 1.4
+     * @since 1.5
      */
     public DateTimeFormatterBuilder appendFixedSignedDecimal(
             DateTimeFieldType fieldType, int numDigits) {

From bffc316f87f72d62578940d4a98d30e83d5796a9 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Sun, 9 Sep 2007 17:30:12 +0000
Subject: [PATCH 077/112] Fixed defect in localized Gregorian/Julian symbol
 cache which severely impacted formatting performance when using null
 (default) locale.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1247 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                             |  3 +++
 .../src/java/org/joda/time/chrono/GJLocaleSymbols.java | 10 ++++++----
 2 files changed, 9 insertions(+), 4 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 96fb66797..da8b152b7 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -142,6 +142,9 @@ Bug fixes since 1.4
   Clarify javadoc of forTimeZone to indicate that application created
   SimpleTimeZone rules are not parsed [1705180]
 
+- Defect in localized Gregorian/Julian symbol cache severely impacted formatting
+  performance when using null (default) locale.
+
 
 Feedback
 --------
diff --git a/JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java b/JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java
index 3c32fc63f..760093e6b 100644
--- a/JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java
+++ b/JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java
@@ -38,6 +38,9 @@
     private static WeakHashMap cCache = new WeakHashMap();
 
     public static GJLocaleSymbols forLocale(Locale locale) {
+        if (locale == null) {
+            locale = Locale.getDefault();
+        }
         int index = System.identityHashCode(locale) & (FAST_CACHE_SIZE - 1);
         GJLocaleSymbols symbols = cFastCache[index];
         if (symbols != null && symbols.iLocale.get() == locale) {
@@ -120,11 +123,10 @@ private static int maxLength(String[] a) {
     private final int iMaxShortMonthLength;
     private final int iMaxHalfdayLength;
 
+    /**
+     * @param locale must not be null
+     */
     private GJLocaleSymbols(Locale locale) {
-        if (locale == null) {
-            locale = Locale.getDefault();
-        }
-
         iLocale = new WeakReference(locale);
 
         DateFormatSymbols dfs = new DateFormatSymbols(locale);

From a5edf79d02e5cf269787102bba6d0de016d0630e Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Sun, 9 Sep 2007 17:49:20 +0000
Subject: [PATCH 078/112] Guard against locale changing concurrently.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1248 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  2 ++
 .../time/format/DateTimeFormatterBuilder.java | 20 +++++++++++++++++++
 2 files changed, 22 insertions(+)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index da8b152b7..31a8b8c7c 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -145,6 +145,8 @@ Bug fixes since 1.4
 - Defect in localized Gregorian/Julian symbol cache severely impacted formatting
   performance when using null (default) locale.
 
+- DateTimeFormatter specified with locale of null could produce mismatched
+  symbols if default locale changed concurrently.
 
 Feedback
 --------
diff --git a/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java b/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java
index fc6af8519..ed185132e 100644
--- a/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java
+++ b/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java
@@ -2401,6 +2401,11 @@ public void printTo(
                 throw new UnsupportedOperationException();
             }
 
+            if (locale == null) {
+                // Guard against default locale changing concurrently.
+                locale = Locale.getDefault();
+            }
+
             int len = elements.length;
             for (int i = 0; i < len; i++) {
                 elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);
@@ -2415,6 +2420,11 @@ public void printTo(
                 throw new UnsupportedOperationException();
             }
 
+            if (locale == null) {
+                // Guard against default locale changing concurrently.
+                locale = Locale.getDefault();
+            }
+
             int len = elements.length;
             for (int i = 0; i < len; i++) {
                 elements[i].printTo(out, instant, chrono, displayOffset, displayZone, locale);
@@ -2427,6 +2437,11 @@ public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {
                 throw new UnsupportedOperationException();
             }
 
+            if (locale == null) {
+                // Guard against default locale changing concurrently.
+                locale = Locale.getDefault();
+            }
+
             int len = elements.length;
             for (int i=0; i<len; i++) {
                 elements[i].printTo(buf, partial, locale);
@@ -2439,6 +2454,11 @@ public void printTo(Writer out, ReadablePartial partial, Locale locale) throws I
                 throw new UnsupportedOperationException();
             }
 
+            if (locale == null) {
+                // Guard against default locale changing concurrently.
+                locale = Locale.getDefault();
+            }
+
             int len = elements.length;
             for (int i=0; i<len; i++) {
                 elements[i].printTo(out, partial, locale);

From 26dc14b0c91afee273ccfb885d6cd3431e2b2bb3 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Sun, 9 Sep 2007 17:49:49 +0000
Subject: [PATCH 079/112] Eliminate redundant checks.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1249 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../joda/time/format/DateTimeFormatter.java   | 74 +++++++++----------
 1 file changed, 33 insertions(+), 41 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java b/JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java
index c479187c6..4ea36e0be 100644
--- a/JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java
+++ b/JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java
@@ -140,7 +140,7 @@ public boolean isPrinter() {
     /**
      * Gets the internal printer object that performs the real printing work.
      * 
-     * @return the internal printer
+     * @return the internal printer; is null if printing not supported
      */
     public DateTimePrinter getPrinter() {
         return iPrinter;
@@ -158,7 +158,7 @@ public boolean isParser() {
     /**
      * Gets the internal parser object that performs the real parsing work.
      * 
-     * @return the internal parser
+     * @return the internal parser; is null if parsing not supported
      */
     public DateTimeParser getParser() {
         return iParser;
@@ -172,7 +172,8 @@ public DateTimeParser getParser() {
      * A DateTimeFormatter is immutable, so a new instance is returned,
      * and the original is unaltered and still usable.
      * 
-     * @param locale  the locale to use
+     * @param locale the locale to use; if null, formatter uses default locale
+     * at invocation time
      * @return the new formatter
      */
     public DateTimeFormatter withLocale(Locale locale) {
@@ -186,7 +187,8 @@ public DateTimeFormatter withLocale(Locale locale) {
     /**
      * Gets the locale that will be used for printing and parsing.
      * 
-     * @return the locale to use
+     * @return the locale to use; if null, formatter uses default locale at
+     * invocation time
      */
     public Locale getLocale() {
         return iLocale;
@@ -382,8 +384,6 @@ public Integer getPivotYear() {
      * @param instant  instant to format, null means now
      */
     public void printTo(StringBuffer buf, ReadableInstant instant) {
-        checkPrinter();
-        
         long millis = DateTimeUtils.getInstantMillis(instant);
         Chronology chrono = DateTimeUtils.getInstantChronology(instant);
         printTo(buf, millis, chrono);
@@ -396,8 +396,6 @@ public void printTo(StringBuffer buf, ReadableInstant instant) {
      * @param instant  instant to format, null means now
      */
     public void printTo(Writer out, ReadableInstant instant) throws IOException {
-        checkPrinter();
-        
         long millis = DateTimeUtils.getInstantMillis(instant);
         Chronology chrono = DateTimeUtils.getInstantChronology(instant);
         printTo(out, millis, chrono);
@@ -412,8 +410,6 @@ public void printTo(Writer out, ReadableInstant instant) throws IOException {
      * @param instant  millis since 1970-01-01T00:00:00Z
      */
     public void printTo(StringBuffer buf, long instant) {
-        checkPrinter();
-        
         printTo(buf, instant, null);
     }
 
@@ -425,8 +421,6 @@ public void printTo(StringBuffer buf, long instant) {
      * @param instant  millis since 1970-01-01T00:00:00Z
      */
     public void printTo(Writer out, long instant) throws IOException {
-        checkPrinter();
-        
         printTo(out, instant, null);
     }
 
@@ -441,12 +435,11 @@ public void printTo(Writer out, long instant) throws IOException {
      * @param partial  partial to format
      */
     public void printTo(StringBuffer buf, ReadablePartial partial) {
-        checkPrinter();
+        DateTimePrinter printer = requirePrinter();
         if (partial == null) {
             throw new IllegalArgumentException("The partial must not be null");
         }
-        
-        iPrinter.printTo(buf, partial, iLocale);
+        printer.printTo(buf, partial, iLocale);
     }
 
     /**
@@ -459,12 +452,11 @@ public void printTo(StringBuffer buf, ReadablePartial partial) {
      * @param partial  partial to format
      */
     public void printTo(Writer out, ReadablePartial partial) throws IOException {
-        checkPrinter();
+        DateTimePrinter printer = requirePrinter();
         if (partial == null) {
             throw new IllegalArgumentException("The partial must not be null");
         }
-        
-        iPrinter.printTo(out, partial, iLocale);
+        printer.printTo(out, partial, iLocale);
     }
 
     //-----------------------------------------------------------------------
@@ -478,9 +470,7 @@ public void printTo(Writer out, ReadablePartial partial) throws IOException {
      * @return the printed result
      */
     public String print(ReadableInstant instant) {
-        checkPrinter();
-        
-        StringBuffer buf = new StringBuffer(iPrinter.estimatePrintedLength());
+        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());
         printTo(buf, instant);
         return buf.toString();
     }
@@ -495,9 +485,7 @@ public String print(ReadableInstant instant) {
      * @return the printed result
      */
     public String print(long instant) {
-        checkPrinter();
-        
-        StringBuffer buf = new StringBuffer(iPrinter.estimatePrintedLength());
+        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());
         printTo(buf, instant);
         return buf.toString();
     }
@@ -512,14 +500,13 @@ public String print(long instant) {
      * @return the printed result
      */
     public String print(ReadablePartial partial) {
-        checkPrinter();
-        
-        StringBuffer buf = new StringBuffer(iPrinter.estimatePrintedLength());
+        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());
         printTo(buf, partial);
         return buf.toString();
     }
 
     private void printTo(StringBuffer buf, long instant, Chronology chrono) {
+        DateTimePrinter printer = requirePrinter();
         chrono = selectChronology(chrono);
         // Shift instant into local time (UTC) to avoid excessive offset
         // calculations when printing multiple fields in a composite printer.
@@ -532,10 +519,11 @@ private void printTo(StringBuffer buf, long instant, Chronology chrono) {
             offset = 0;
             adjustedInstant = instant;
         }
-        iPrinter.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);
+        printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);
     }
 
     private void printTo(Writer buf, long instant, Chronology chrono) throws IOException {
+        DateTimePrinter printer = requirePrinter();
         chrono = selectChronology(chrono);
         // Shift instant into local time (UTC) to avoid excessive offset
         // calculations when printing multiple fields in a composite printer.
@@ -548,7 +536,7 @@ private void printTo(Writer buf, long instant, Chronology chrono) throws IOExcep
             offset = 0;
             adjustedInstant = instant;
         }
-        iPrinter.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);
+        printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);
     }
 
     /**
@@ -556,10 +544,12 @@ private void printTo(Writer buf, long instant, Chronology chrono) throws IOExcep
      * 
      * @throws UnsupportedOperationException if printing is not supported
      */
-    private void checkPrinter() {
-        if (iPrinter == null) {
+    private DateTimePrinter requirePrinter() {
+        DateTimePrinter printer = iPrinter;
+        if (printer == null) {
             throw new UnsupportedOperationException("Printing not supported");
         }
+        return printer;
     }
 
     //-----------------------------------------------------------------------
@@ -593,7 +583,7 @@ private void checkPrinter() {
      * @throws IllegalArgumentException if any field is out of range
      */
     public int parseInto(ReadWritableInstant instant, String text, int position) {
-        checkParser();
+        DateTimeParser parser = requireParser();
         if (instant == null) {
             throw new IllegalArgumentException("Instant must not be null");
         }
@@ -605,7 +595,7 @@ public int parseInto(ReadWritableInstant instant, String text, int position) {
         
         DateTimeParserBucket bucket = new DateTimeParserBucket
             (instantLocal, chrono, iLocale, iPivotYear);
-        int newPos = iParser.parseInto(bucket, text, position);
+        int newPos = parser.parseInto(bucket, text, position);
         instant.setMillis(bucket.computeMillis(false, text));
         if (iOffsetParsed && bucket.getZone() == null) {
             int parsedOffset = bucket.getOffset();
@@ -629,11 +619,11 @@ public int parseInto(ReadWritableInstant instant, String text, int position) {
      * @throws IllegalArgumentException if the text to parse is invalid
      */
     public long parseMillis(String text) {
-        checkParser();
+        DateTimeParser parser = requireParser();
         
         Chronology chrono = selectChronology(iChrono);
         DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear);
-        int newPos = iParser.parseInto(bucket, text, 0);
+        int newPos = parser.parseInto(bucket, text, 0);
         if (newPos >= 0) {
             if (newPos >= text.length()) {
                 return bucket.computeMillis(true, text);
@@ -662,11 +652,11 @@ public long parseMillis(String text) {
      * @throws IllegalArgumentException if the text to parse is invalid
      */
     public DateTime parseDateTime(String text) {
-        checkParser();
+        DateTimeParser parser = requireParser();
         
         Chronology chrono = selectChronology(null);
         DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear);
-        int newPos = iParser.parseInto(bucket, text, 0);
+        int newPos = parser.parseInto(bucket, text, 0);
         if (newPos >= 0) {
             if (newPos >= text.length()) {
                 long millis = bucket.computeMillis(true, text);
@@ -701,11 +691,11 @@ public DateTime parseDateTime(String text) {
      * @throws IllegalArgumentException if the text to parse is invalid
      */
     public MutableDateTime parseMutableDateTime(String text) {
-        checkParser();
+        DateTimeParser parser = requireParser();
         
         Chronology chrono = selectChronology(null);
         DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear);
-        int newPos = iParser.parseInto(bucket, text, 0);
+        int newPos = parser.parseInto(bucket, text, 0);
         if (newPos >= 0) {
             if (newPos >= text.length()) {
                 long millis = bucket.computeMillis(true, text);
@@ -727,10 +717,12 @@ public MutableDateTime parseMutableDateTime(String text) {
      * 
      * @throws UnsupportedOperationException if parsing is not supported
      */
-    private void checkParser() {
-        if (iParser == null) {
+    private DateTimeParser requireParser() {
+        DateTimeParser parser = iParser;
+        if (parser == null) {
             throw new UnsupportedOperationException("Parsing not supported");
         }
+        return parser;
     }
 
     //-----------------------------------------------------------------------

From bb9aea5d7374bd98a8548008c40a29df3681c10b Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Sun, 9 Sep 2007 18:31:14 +0000
Subject: [PATCH 080/112] Updated to TZ version 2007g.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1250 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  2 +-
 .../org/joda/time/tz/DateTimeZoneBuilder.java | 22 +++--
 .../src/java/org/joda/time/tz/src/Readme.txt  |  2 +-
 JodaTime/src/java/org/joda/time/tz/src/africa | 12 ++-
 .../src/java/org/joda/time/tz/src/antarctica  |  8 +-
 .../src/java/org/joda/time/tz/src/australasia | 91 +++++++++++--------
 JodaTime/src/java/org/joda/time/tz/src/europe | 13 ++-
 .../java/org/joda/time/tz/src/northamerica    | 50 +++++++---
 8 files changed, 127 insertions(+), 73 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 31a8b8c7c..e25f00d22 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -80,7 +80,7 @@ Serialization compatible - Yes
 Data compatible - Yes, except
   - Format of time zone data files changed slightly to fix bug
     This mainly affects Australia
-  - DateTimeZone data updated to version 2007f
+  - DateTimeZone data updated to version 2007g
 
 Semantic compatible - Yes
 
diff --git a/JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java b/JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java
index 2e9d425c2..ef51bc364 100644
--- a/JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java
+++ b/JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java
@@ -792,6 +792,14 @@ public void writeTo(DataOutput out) throws IOException {
             out.writeUTF(iNameKey);
             writeMillis(out, iSaveMillis);
         }
+
+        Recurrence rename(String nameKey) {
+            return new Recurrence(iOfYear, nameKey, iSaveMillis);
+        }
+
+        Recurrence renameAppend(String appendNameKey) {
+            return rename((iNameKey + appendNameKey).intern());
+        }
     }
 
     /**
@@ -1441,23 +1449,17 @@ static PrecalculatedZone create(String id, boolean outputID, ArrayList transitio
                 if (tailZone.iStartRecurrence.getNameKey().equals(tailZone.iEndRecurrence.getNameKey())) {
                     System.out.println("Fixing duplicate recurrent name key - " + tailZone.iStartRecurrence.getNameKey());
                     if (tailZone.iStartRecurrence.getSaveMillis() > 0) {
-                        Recurrence r = new Recurrence(
-                            tailZone.iStartRecurrence.iOfYear,
-                            tailZone.iStartRecurrence.iNameKey + "-Summer",
-                            tailZone.iStartRecurrence.iSaveMillis);
                         tailZone = new DSTZone(
                             tailZone.getID(),
                             tailZone.iStandardOffset,
-                            r, tailZone.iEndRecurrence);
+                            tailZone.iStartRecurrence.renameAppend("-Summer"),
+                            tailZone.iEndRecurrence);
                     } else {
-                        Recurrence r = new Recurrence(
-                            tailZone.iEndRecurrence.iOfYear,
-                            tailZone.iEndRecurrence.iNameKey + "-Summer",
-                            tailZone.iEndRecurrence.iSaveMillis);
                         tailZone = new DSTZone(
                             tailZone.getID(),
                             tailZone.iStandardOffset,
-                            tailZone.iEndRecurrence, r);
+                            tailZone.iStartRecurrence,
+                            tailZone.iEndRecurrence.renameAppend("-Summer"));
                     }
                 }
             }
diff --git a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
index b52adefe8..0388492fa 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
+++ b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
@@ -1,2 +1,2 @@
 The data files in this directory were obtained from the public tz database,
-http://www.twinsun.com/tz/tz-link.htm, version 2007f.
+http://www.twinsun.com/tz/tz-link.htm, version 2007g.
diff --git a/JodaTime/src/java/org/joda/time/tz/src/africa b/JodaTime/src/java/org/joda/time/tz/src/africa
index d7db8c52a..24dbedec6 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/africa
+++ b/JodaTime/src/java/org/joda/time/tz/src/africa
@@ -1,4 +1,4 @@
-# @(#)africa	8.8
+# @(#)africa	8.9
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
@@ -218,7 +218,15 @@ Rule	Egypt	1995	2005	-	Sep	lastThu	23:00s	0	-
 # after observing the daylight saving time since May.
 # http://news.gom.com.eg/gazette/pdf/2006/09/18/01.pdf
 Rule	Egypt	2006	only	-	Sep	21	23:00s	0	-
-Rule	Egypt	2007	max	-	Sep	lastThu	23:00s	0	-
+# From Dirk Losch (2007-08-14):
+# I received a mail from an airline which says that the daylight
+# saving time in Egypt will end in the night of 2007-09-06 to 2007-09-07.
+# From Jesper Norgaard Welen (2007-08-15): [The following agree:]
+# http://www.nentjes.info/Bill/bill5.htm 
+# http://www.timeanddate.com/worldclock/city.html?n=53
+# From Paul Eggert (2007-08-17):
+# For lack of better info, assume the new rule is first Thursday.
+Rule	Egypt	2007	max	-	Sep	Thu>=1	23:00s	0	-
 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Africa/Cairo	2:05:00 -	LMT	1900 Oct
diff --git a/JodaTime/src/java/org/joda/time/tz/src/antarctica b/JodaTime/src/java/org/joda/time/tz/src/antarctica
index 6fce7828f..46e80afbc 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/antarctica
+++ b/JodaTime/src/java/org/joda/time/tz/src/antarctica
@@ -1,4 +1,4 @@
-# @(#)antarctica	8.3
+# @(#)antarctica	8.4
 # <pre>
 
 # From Paul Eggert (1999-11-15):
@@ -191,10 +191,12 @@ Zone Antarctica/Syowa	0	-	zzz	1957 Jan 29
 Rule	NZAQ	1974	only	-	Nov	 3	2:00s	1:00	D
 Rule	NZAQ	1975	1988	-	Oct	lastSun	2:00s	1:00	D
 Rule	NZAQ	1989	only	-	Oct	 8	2:00s	1:00	D
-Rule	NZAQ	1990	max	-	Oct	Sun>=1	2:00s	1:00	D
+Rule	NZAQ	1990	2006	-	Oct	Sun>=1	2:00s	1:00	D
 Rule	NZAQ	1975	only	-	Feb	23	2:00s	0	S
 Rule	NZAQ	1976	1989	-	Mar	Sun>=1	2:00s	0	S
-Rule	NZAQ	1990	max	-	Mar	Sun>=15	2:00s	0	S
+Rule	NZAQ	1990	2007	-	Mar	Sun>=15	2:00s	0	S
+Rule	NZAQ	2007	max	-	Sep	lastSun	2:00s	1:00	D
+Rule	NZAQ	2008	max	-	Apr	Sun>=1	2:00s	0	S
 
 # Norway - territories
 # Bouvet (never inhabited)
diff --git a/JodaTime/src/java/org/joda/time/tz/src/australasia b/JodaTime/src/java/org/joda/time/tz/src/australasia
index fd1d06471..4090505e0 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/australasia
+++ b/JodaTime/src/java/org/joda/time/tz/src/australasia
@@ -1,4 +1,4 @@
-# @(#)australasia	8.7
+# @(#)australasia	8.8
 # <pre>
 
 # This file also includes Pacific islands.
@@ -79,7 +79,7 @@ Zone Australia/Lindeman  9:55:56 -	LMT	1895
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	AS	1971	1985	-	Oct	lastSun	2:00s	1:00	-
 Rule	AS	1986	only	-	Oct	19	2:00s	1:00	-
-Rule	AS	1987	max	-	Oct	lastSun	2:00s	1:00	-
+Rule	AS	1987	2007	-	Oct	lastSun	2:00s	1:00	-
 Rule	AS	1972	only	-	Feb	27	2:00s	0	-
 Rule	AS	1973	1985	-	Mar	Sun>=1	2:00s	0	-
 Rule	AS	1986	1989	-	Mar	Sun>=15	2:00s	0	-
@@ -90,7 +90,9 @@ Rule	AS	1993	only	-	Mar	Sun>=1	2:00s	0	-
 Rule	AS	1994	only	-	Mar	Sun>=18	2:00s	0	-
 Rule	AS	1995	2005	-	Mar	lastSun	2:00s	0	-
 Rule	AS	2006	only	-	Apr	Sun>=1	2:00s	0	-
-Rule	AS	2007	max	-	Mar	lastSun	2:00s	0	-
+Rule	AS	2007	only	-	Mar	lastSun	2:00s	0	-
+Rule	AS	2008	max	-	Apr	Sun>=1	2:00s	0	-
+Rule	AS	2008	max	-	Oct	Sun>=1	2:00s	1:00	-
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone Australia/Adelaide	9:14:20 -	LMT	1895 Feb
 			9:00	-	CST	1899 May
@@ -121,7 +123,8 @@ Rule	AT	1991	2005	-	Mar	lastSun	2:00s	0	-
 Rule	AT	2000	only	-	Aug	lastSun	2:00s	1:00	-
 Rule	AT	2001	max	-	Oct	Sun>=1	2:00s	1:00	-
 Rule	AT	2006	only	-	Apr	Sun>=1	2:00s	0	-
-Rule	AT	2007	max	-	Mar	lastSun	2:00s	0	-
+Rule	AT	2007	only	-	Mar	lastSun	2:00s	0	-
+Rule	AT	2008	max	-	Apr	Sun>=1	2:00s	0	-
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone Australia/Hobart	9:49:16	-	LMT	1895 Sep
 			10:00	-	EST	1916 Oct 1 2:00
@@ -145,9 +148,11 @@ Rule	AV	1988	1999	-	Oct	lastSun	2:00s	1:00	-
 Rule	AV	1991	1994	-	Mar	Sun>=1	2:00s	0	-
 Rule	AV	1995	2005	-	Mar	lastSun	2:00s	0	-
 Rule	AV	2000	only	-	Aug	lastSun	2:00s	1:00	-
-Rule	AV	2001	max	-	Oct	lastSun	2:00s	1:00	-
+Rule	AV	2001	2007	-	Oct	lastSun	2:00s	1:00	-
 Rule	AV	2006	only	-	Apr	Sun>=1	2:00s	0	-
-Rule	AV	2007	max	-	Mar	lastSun	2:00s	0	-
+Rule	AV	2007	only	-	Mar	lastSun	2:00s	0	-
+Rule	AV	2008	max	-	Apr	Sun>=1	2:00s	0	-
+Rule	AV	2008	max	-	Oct	Sun>=1	2:00s	1:00	-
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone Australia/Melbourne 9:39:52 -	LMT	1895 Feb
 			10:00	Aus	EST	1971
@@ -166,9 +171,11 @@ Rule	AN	1987	1999	-	Oct	lastSun	2:00s	1:00	-
 Rule	AN	1990	1995	-	Mar	Sun>=1	2:00s	0	-
 Rule	AN	1996	2005	-	Mar	lastSun	2:00s	0	-
 Rule	AN	2000	only	-	Aug	lastSun	2:00s	1:00	-
-Rule	AN	2001	max	-	Oct	lastSun	2:00s	1:00	-
+Rule	AN	2001	2007	-	Oct	lastSun	2:00s	1:00	-
 Rule	AN	2006	only	-	Apr	Sun>=1	2:00s	0	-
-Rule	AN	2007	max	-	Mar	lastSun	2:00s	0	-
+Rule	AN	2007	only	-	Mar	lastSun	2:00s	0	-
+Rule	AN	2008	max	-	Apr	Sun>=1	2:00s	0	-
+Rule	AN	2008	max	-	Oct	Sun>=1	2:00s	1:00	-
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone Australia/Sydney	10:04:52 -	LMT	1895 Feb
 			10:00	Aus	EST	1971
@@ -191,9 +198,11 @@ Rule	LH	1987	1999	-	Oct	lastSun	2:00	0:30	-
 Rule	LH	1990	1995	-	Mar	Sun>=1	2:00	0	-
 Rule	LH	1996	2005	-	Mar	lastSun	2:00	0	-
 Rule	LH	2000	only	-	Aug	lastSun	2:00	0:30	-
-Rule	LH	2001	max	-	Oct	lastSun	2:00	0:30	-
+Rule	LH	2001	2007	-	Oct	lastSun	2:00	0:30	-
 Rule	LH	2006	only	-	Apr	Sun>=1	2:00	0	-
-Rule	LH	2007	max	-	Mar	lastSun	2:00	0	-
+Rule	LH	2007	only	-	Mar	lastSun	2:00	0	-
+Rule	LH	2008	max	-	Apr	Sun>=1	2:00	0	-
+Rule	LH	2008	max	-	Oct	Sun>=1	2:00	0:30	-
 Zone Australia/Lord_Howe 10:36:20 -	LMT	1895 Feb
 			10:00	-	EST	1981 Mar
 			10:30	LH	LHST
@@ -453,11 +462,20 @@ Zone Pacific/Funafuti	11:56:52 -	LMT	1901
 # US minor outlying islands
 
 # Howland, Baker
-# uninhabited since World War II
-# no information; was probably like Pacific/Pago_Pago
+# Howland was mined for guano by American companies 1857-1878 and British
+# 1886-1891; Baker was similar but exact dates are not known.
+# Inhabited by civilians 1935-1942; U.S. military bases 1943-1944;
+# uninhabited thereafter.
+# Howland observed Hawaii Standard Time (UTC-10:30) in 1937;
+# see page 206 of Elgen M. Long and Marie K. Long,
+# Amelia Earhart: the Mystery Solved, Simon & Schuster (2000).
+# So most likely Howland and Baker observed Hawaii Time from 1935
+# until they were abandoned after the war.
 
 # Jarvis
-# uninhabited since 1958
+# Mined for guano by American companies 1857-1879 and British 1883?-1891?.
+# Inhabited by civilians 1935-1942; IGY scientific base 1957-1958;
+# uninhabited thereafter.
 # no information; was probably like Pacific/Kiritimati
 
 # Johnston
@@ -866,33 +884,13 @@ Zone	Pacific/Wallis	12:15:20 -	LMT	1901
 # introduction of standard time in 1895.
 
 
-# South Australia, Tasmania, Victoria
+# southeast Australia
+#
+# From Paul Eggert (2007-07-23):
+# Starting autumn 2008 Victoria, NSW, South Australia, Tasmania and the ACT
+# end DST the first Sunday in April and start DST the first Sunday in October.
+# http://www.theage.com.au/news/national/daylight-savings-to-span-six-months/2007/06/27/1182623966703.html
 
-# From Arthur David Olson (1992-03-08):
-# The rules from version 7.1 follow.
-# There are lots of differences between these rules and
-# the Shepherd et al. rules.  Since the Shepherd et al. rules
-# and Bradley White's newspaper article are in agreement on
-# current DST ending dates, no worries.
-#
-# Rule	Oz	1971	1985	-	Oct	lastSun	2:00	1:00	-
-# Rule	Oz	1986	max	-	Oct	Sun>=18	2:00	1:00	-
-# Rule	Oz	1972	only	-	Feb	27	3:00	0	-
-# Rule	Oz	1973	1986	-	Mar	Sun>=1	3:00	0	-
-# Rule	Oz	1987	max	-	Mar	Sun>=15	3:00	0	-
-# Zone	Australia/Tasmania	10:00	Oz	EST
-# Zone	Australia/South		9:30	Oz	CST
-# Zone	Australia/Victoria	10:00	Oz	EST	1985 Oct lastSun 2:00
-#				10:00	1:00	EST	1986 Mar Sun>=15 3:00
-#				10:00	Oz	EST
-
-# From Robert Elz (1991-03-06):
-# I believe that the current start date for DST is "lastSun" in Oct...
-# that changed Oct 89.  That is, we're back to the
-# original rule, and that rule currently applies in all the states
-# that have dst, incl Qld.  (Certainly it was true in Vic).
-# The file I'm including says that happened in 1988, I think
-# that's incorrect, but I'm not 100% certain.
 
 # South Australia
 
@@ -938,6 +936,9 @@ Zone	Pacific/Wallis	12:15:20 -	LMT	1901
 # was gazetted in the Government Hansard on Sep 26 1994....
 # start on last Sunday in October and end in last sunday in March.
 
+# From Paul Eggert (2007-07-23):
+# See "southeast Australia" above for 2008 and later.
+
 # Tasmania
 
 # The rules for 1967 through 1991 were reported by George Shepherd
@@ -960,6 +961,9 @@ Zone	Pacific/Wallis	12:15:20 -	LMT	1901
 # Sim Alam (2000-07-03) reported a legal citation for the 2000/2001 rules:
 # http://www.thelaw.tas.gov.au/fragview/42++1968+GS3A@EN+2000070300
 
+# From Paul Eggert (2007-07-23):
+# See "southeast Australia" above for 2008 and later.
+
 # Victoria
 
 # The rules for 1971 through 1991 were reported by George Shepherd
@@ -989,6 +993,9 @@ Zone	Pacific/Wallis	12:15:20 -	LMT	1901
 # [1] http://www.hup.harvard.edu/catalog/HEISUN.html
 # [2] http://www.shrine.org.au
 
+# From Paul Eggert (2007-07-23):
+# See "southeast Australia" above for 2008 and later.
+
 # New South Wales
 
 # From Arthur David Olson:
@@ -1055,6 +1062,9 @@ Zone	Pacific/Wallis	12:15:20 -	LMT	1901
 # The Queensland Premier Peter Beattie is encouraging northern NSW
 # towns to use Queensland time.
 
+# From Paul Eggert (2007-07-23):
+# See "southeast Australia" above for 2008 and later.
+
 # Yancowinna
 
 # From John Mackin (1989-01-04):
@@ -1106,6 +1116,9 @@ Zone	Pacific/Wallis	12:15:20 -	LMT	1901
 # For Lord Howe dates we use Shanks & Pottenger through 1989, and
 # Lonergan thereafter.  For times we use Lonergan.
 
+# From Paul Eggert (2007-07-23):
+# See "southeast Australia" above for 2008 and later.
+
 ###############################################################################
 
 # New Zealand
diff --git a/JodaTime/src/java/org/joda/time/tz/src/europe b/JodaTime/src/java/org/joda/time/tz/src/europe
index bf5d9f781..94a650408 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/europe
+++ b/JodaTime/src/java/org/joda/time/tz/src/europe
@@ -1,4 +1,4 @@
-# @(#)europe	8.10
+# @(#)europe	8.11
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
@@ -444,7 +444,7 @@ Zone	Europe/Dublin	-0:25:00 -	LMT	1880 Aug  2
 
 ###############################################################################
 
-# Continental Europe
+# Europe
 
 # EU rules are for the European Union, previously known as the EC, EEC,
 # Common Market, etc.
@@ -2386,6 +2386,8 @@ Link	Europe/Istanbul	Asia/Istanbul	# Istanbul is in both continents.
 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 # Most of Ukraine since 1970 has been like Kiev.
+# "Kyiv" is the transliteration of the Ukrainian name, but
+# "Kiev" is more common in English.
 Zone Europe/Kiev	2:02:04 -	LMT	1880
 			2:02:04	-	KMT	1924 May  2 # Kiev Mean Time
 			2:00	-	EET	1930 Jun 21
@@ -2397,6 +2399,8 @@ Zone Europe/Kiev	2:02:04 -	LMT	1880
 			2:00	E-Eur	EE%sT	1995
 			2:00	EU	EE%sT
 # Ruthenia used CET 1990/1991.
+# "Uzhhorod" is the transliteration of the Ukrainian name, but
+# "Uzhgorod" is more common in English.
 Zone Europe/Uzhgorod	1:29:12 -	LMT	1890 Oct
 			1:00	-	CET	1940
 			1:00	C-Eur	CE%sT	1944 Oct
@@ -2409,7 +2413,10 @@ Zone Europe/Uzhgorod	1:29:12 -	LMT	1890 Oct
 			2:00	E-Eur	EE%sT	1995
 			2:00	EU	EE%sT
 # Zaporozh'ye and eastern Lugansk oblasts observed DST 1990/1991.
-# Zaporozh'ye has an apostrophe, but Posix file names can't have apostrophes.
+# "Zaporizhia" is the transliteration of the Ukrainian name, but
+# "Zaporozh'ye" is more common in English.  Use the common English
+# spelling, except omit the apostrophe as it is not allowed in
+# portable Posix file names.
 Zone Europe/Zaporozhye	2:20:40 -	LMT	1880
 			2:20	-	CUT	1924 May  2 # Central Ukraine T
 			2:00	-	EET	1930 Jun 21
diff --git a/JodaTime/src/java/org/joda/time/tz/src/northamerica b/JodaTime/src/java/org/joda/time/tz/src/northamerica
index bb2a624e7..99c21e463 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/northamerica
+++ b/JodaTime/src/java/org/joda/time/tz/src/northamerica
@@ -1,4 +1,4 @@
-# @(#)northamerica	8.17
+# @(#)northamerica	8.18
 # <pre>
 
 # also includes Central America and the Caribbean
@@ -348,7 +348,7 @@ Zone America/North_Dakota/New_Salem -6:45:39 - LMT 1883 Nov 18 12:14:21
 #
 # Colorado, far western Kansas, Montana, western
 # Nebraska, Nevada border (Jackpot, Owyhee, and Mountain City),
-# New Mexico, southwestern North Dakota, far eastern Oregon,
+# New Mexico, southwestern North Dakota,
 # western South Dakota, far western Texas (El Paso County, Hudspeth County,
 # and Pine Springs and Nickel Creek in Culberson County), Utah, Wyoming
 #
@@ -369,7 +369,8 @@ Zone America/Denver	-6:59:56 -	LMT	1883 Nov 18 12:00:04
 # US Pacific time, represented by Los Angeles
 #
 # California, northern Idaho (Benewah, Bonner, Boundary, Clearwater,
-# Idaho, Kootenai, Latah, Lewis, Nez Perce, and Shoshone counties),
+# Idaho, Kootenai, Latah, Lewis, Nez Perce, and Shoshone counties,
+# and the northern three-quarters of Idaho county),
 # most of Nevada, most of Oregon, and Washington
 #
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
@@ -527,7 +528,8 @@ Link America/Denver America/Shiprock
 # Boise, Bonneville, Butte, Camas, Canyon, Caribou, Cassia, Clark,
 # Custer, Elmore, Franklin, Fremont, Gem, Gooding, Jefferson, Jerome,
 # Lemhi, Lincoln, Madison, Minidoka, Oneida, Owyhee, Payette, Power,
-# Teton, Twin Falls, Valley, Washington counties) and eastern Oregon
+# Teton, Twin Falls, Valley, Washington counties, and the southern
+# quarter of Idaho county) and eastern Oregon (most of Malheur County)
 # switched four weeks late in 1974.
 #
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
@@ -544,7 +546,7 @@ Zone America/Boise	-7:44:49 -	LMT	1883 Nov 18 12:15:11
 # What time is it in Indiana?
 # </a> (2006-03-01)
 #
-# From Paul Eggert (2006-03-22):
+# From Paul Eggert (2007-08-17):
 # Since 1970, most of Indiana has been like America/Indiana/Indianapolis,
 # with the following exceptions:
 #
@@ -556,11 +558,8 @@ Zone America/Boise	-7:44:49 -	LMT	1883 Nov 18 12:15:11
 # - Clark, Floyd, and Harrison counties have been like
 #   America/Kentucky/Louisville.
 #
-# - Daviess, Dubois, Knox, Martin, Perry, and Pulaski counties
-#   have been like America/Indiana/Vincennes.
-#
-# - Crawford, Pike, Starke, and Switzerland counties have their own time zone
-#   histories as noted below.
+# - Crawford, Daviess, Dubois, Knox, Martin, Perry, Pike, Pulaski, Starke,
+#   and Switzerland counties have their own time zone histories as noted below.
 #
 # Shanks partitioned Indiana into 345 regions, each with its own time history,
 # and wrote ``Even newspaper reports present contradictory information.''
@@ -628,8 +627,9 @@ Zone America/Indiana/Marengo -5:45:23 -	LMT	1883 Nov 18 12:14:37
 			-5:00	-	EST	2006
 			-5:00	US	E%sT
 #
-# Daviess, Dubois, Knox, Martin, and Perry Counties, Indiana,
-# switched from eastern to central time in April 2006.
+# Daviess, Dubois, Knox, and Martin Counties, Indiana,
+# switched from eastern to central time in April 2006, then switched back
+# in November 2007.
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
 Rule Vincennes	1946	only	-	Apr	lastSun	2:00	1:00	D
 Rule Vincennes	1946	only	-	Sep	lastSun	2:00	0	S
@@ -647,10 +647,31 @@ Zone America/Indiana/Vincennes -5:50:07 - LMT	1883 Nov 18 12:09:53
 			-5:00	-	EST	1969
 			-5:00	US	E%sT	1971
 			-5:00	-	EST	2006 Apr  2 2:00
+			-6:00	US	C%sT	2007 Nov  4 2:00
+			-5:00	US	E%sT
+#
+# Perry County, Indiana, switched from eastern to central time in April 2006.
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
+Rule Perry	1946	only	-	Apr	lastSun	2:00	1:00	D
+Rule Perry	1946	only	-	Sep	lastSun	2:00	0	S
+Rule Perry	1953	1954	-	Apr	lastSun	2:00	1:00	D
+Rule Perry	1953	1959	-	Sep	lastSun	2:00	0	S
+Rule Perry	1955	only	-	May	 1	0:00	1:00	D
+Rule Perry	1956	1963	-	Apr	lastSun	2:00	1:00	D
+Rule Perry	1960	only	-	Oct	lastSun	2:00	0	S
+Rule Perry	1961	only	-	Sep	lastSun	2:00	0	S
+Rule Perry	1962	1963	-	Oct	lastSun	2:00	0	S
+# Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
+Zone America/Indiana/Tell_City -5:47:03 - LMT	1883 Nov 18 12:12:57
+			-6:00	US	C%sT	1946
+			-6:00 Perry	C%sT	1964 Apr 26 2:00
+			-5:00	-	EST	1969
+			-5:00	US	E%sT	1971
+			-5:00	-	EST	2006 Apr  2 2:00
 			-6:00	US	C%sT
 #
 # Pike County, Indiana moved from central to eastern time in 1977,
-# then switched back in 2006.
+# then switched back in 2006, then switched back again in 2007.
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER
 Rule	Pike	1955	only	-	May	 1	0:00	1:00	D
 Rule	Pike	1955	1960	-	Sep	lastSun	2:00	0	S
@@ -663,7 +684,8 @@ Zone America/Indiana/Petersburg -5:49:07 - LMT	1883 Nov 18 12:10:53
 			-5:00	-	EST	1966 Oct 30 2:00
 			-6:00	US	C%sT	1977 Oct 30 2:00
 			-5:00	-	EST	2006 Apr  2 2:00
-			-6:00	US	C%sT
+			-6:00	US	C%sT	2007 Nov  4 2:00
+			-5:00	US	E%sT
 #
 # Starke County, Indiana moved from central to eastern time in 1991,
 # then switched back in 2006.

From b58f412c748568b12f07f58edc0773c279408490 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Thu, 27 Sep 2007 19:52:03 +0000
Subject: [PATCH 081/112] Store period and duration using ISO8601 string

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1251 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../time/contrib/hibernate/PersistentDuration.java    | 10 ++--------
 .../joda/time/contrib/hibernate/PersistentPeriod.java | 11 +++--------
 2 files changed, 5 insertions(+), 16 deletions(-)

diff --git a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentDuration.java b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentDuration.java
index a85ebaace..7b6aea740 100644
--- a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentDuration.java
+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentDuration.java
@@ -1,14 +1,10 @@
 package org.joda.time.contrib.hibernate;
 
 import org.joda.time.Duration;
-import org.joda.time.convert.ConverterManager;
-import org.joda.time.convert.DurationConverter;
 
 /**
  * Converts a org.joda.time.Duration to and from Sql for Hibernate.
- * It simply stores the value as a varchar (using Duration.toString),
- * and retrieves it using a DurationConverter.
- * TODO : are we persisting Chronologies ? is it any relevant ?
+ * It simply stores the value as a varchar using Duration.toString.
  *
  * @author gjoseph
  * @author $Author: $ (last edit)
@@ -21,9 +17,7 @@ public Class returnedClass() {
     }
 
     protected Object fromNonNullString(String s) {
-        final DurationConverter converter = ConverterManager.getInstance().getDurationConverter(s);
-        final long durationMillis = converter.getDurationMillis(s);
-        return new Duration(durationMillis);
+        return new Duration(s);
     }
 
     protected String toNonNullString(Object value) {
diff --git a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentPeriod.java b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentPeriod.java
index 4c168c9a1..3299c4709 100644
--- a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentPeriod.java
+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentPeriod.java
@@ -1,15 +1,10 @@
 package org.joda.time.contrib.hibernate;
 
 import org.joda.time.Period;
-import org.joda.time.format.PeriodFormat;
 
 /**
  * Converts a org.joda.time.Period to and from Sql for Hibernate.
- * It simply stores and retrieves the value as a varchar, using
- * PeriodFormat.
- *
- * TODO : are we persisting Chronologies ? is it any relevant ?
- * TODO : how are we handling conversions that might end up too long for the column ? 
+ * It simply stores and retrieves the value as a varchar using Period.toString.
  *
  * @author gjoseph
  * @author $Author: $ (last edit)
@@ -22,11 +17,11 @@ public Class returnedClass() {
     }
 
     protected Object fromNonNullString(String s) {
-        return PeriodFormat.getDefault().parsePeriod(s);
+        return new Period(s);
     }
 
     protected String toNonNullString(Object value) {
-        return PeriodFormat.getDefault().print((Period) value);
+        return value.toString();
     }
 
 }

From a99e483756fb4e4a474aaca9f30b1bf5f5d88e1e Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Thu, 27 Sep 2007 19:52:40 +0000
Subject: [PATCH 082/112] Document period and duration persistence

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1252 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/hibernate/xdocs/userguide.xml | 10 ++++++++++
 1 file changed, 10 insertions(+)

diff --git a/JodaTimeContrib/hibernate/xdocs/userguide.xml b/JodaTimeContrib/hibernate/xdocs/userguide.xml
index be23ee126..a8a7ce9f6 100644
--- a/JodaTimeContrib/hibernate/xdocs/userguide.xml
+++ b/JodaTimeContrib/hibernate/xdocs/userguide.xml
@@ -87,6 +87,16 @@ private DateTime fromDate;
 				<td>VARCHAR</td>
 				<td>Same as above, just uses a human readable representation. ISO8601 format - HH:mm:ss.SSSZ</td>
 			</tr>
+			<tr>
+				<td>org.joda.time.contrib.hibernate.PersistentDuration</td>
+				<td>VARCHAR</td>
+				<td>The format is PTnS where n is the value</td>
+			</tr>
+			<tr>
+				<td>org.joda.time.contrib.hibernate.PersistentPeriod</td>
+				<td>VARCHAR</td>
+				<td>The format is PnYnMnDTnHnMnS where n is the value</td>
+			</tr>
 		</table>
 
 	</subsection>

From 63f7732482fa7a52d245f043120ce04e32bf2307 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Thu, 27 Sep 2007 19:54:22 +0000
Subject: [PATCH 083/112] Prepare for v1.0

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1253 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/hibernate/RELEASE-NOTES.txt   |   8 +-
 JodaTimeContrib/hibernate/build.xml           | 211 +++---------------
 JodaTimeContrib/hibernate/project.xml         |  13 +-
 .../hibernate/src/conf/manifest-additions.txt |   2 +-
 JodaTimeContrib/hibernate/xdocs/changes.xml   |  10 +
 JodaTimeContrib/hibernate/xdocs/index.xml     |  22 +-
 6 files changed, 78 insertions(+), 188 deletions(-)

diff --git a/JodaTimeContrib/hibernate/RELEASE-NOTES.txt b/JodaTimeContrib/hibernate/RELEASE-NOTES.txt
index 5fd188daf..dbb0e8bce 100644
--- a/JodaTimeContrib/hibernate/RELEASE-NOTES.txt
+++ b/JodaTimeContrib/hibernate/RELEASE-NOTES.txt
@@ -1,11 +1,11 @@
 
-Joda-Time Contributions area - Hibernate support  v0.8
+Joda-Time Contributions area - Hibernate support  v1.0
 ======================================================
 Joda-Time is a date and time library that vastly improves on the JDK.
 This release provides additional support for Hibernate database persistence.
 See http://www.hibernate.org/ for more details on Hibernate.
 
-This library is a user contribution by Mario Ivankovits, thank you.
+This library is a user contribution by Mario Ivankovits and Gregory Joseph, thank you.
 
 The Joda-Time contributions area hosts additional code that may be of
 use when working with the main Joda-Time library.
@@ -18,6 +18,10 @@ Please note that this code is not supported in the same way as the main
 Joda-Time code. As such it is possible that methods and classes may come
 and go over time without warning - you have been warned!
 
+v1.0
+----
+Added persistence for LocalDate, LocalTime, LocalDateTime, Period and Duration.
+
 
 Feedback
 --------
diff --git a/JodaTimeContrib/hibernate/build.xml b/JodaTimeContrib/hibernate/build.xml
index 74ed4d1e1..d3b85d6da 100644
--- a/JodaTimeContrib/hibernate/build.xml
+++ b/JodaTimeContrib/hibernate/build.xml
@@ -1,60 +1,32 @@
 <?xml version="1.0" encoding="UTF-8"?>
 
-<!--build.xml generated by maven from project.xml version 0.8
-  on date December 29 2005, time 2047-->
+<!--build.xml generated by maven from project.xml version 1.0
+  on date September 27 2007, time 2021-->
 
 <project default="jar" name="joda-time-hibernate" basedir=".">
-  <!--Load local and user build preferences-->
-
-  <property file="build.properties">
-  </property>
-  <property file="${user.home}/build.properties">
-  </property>
-  <!--Build properties-->
-
-  <property name="defaulttargetdir" value="${basedir}/target">
+  <property name="defaulttargetdir" value="target">
   </property>
-  <property name="libdir" value="${user.home}/.maven/repository">
+  <property name="libdir" value="target/lib">
   </property>
-  <property name="classesdir" value="${basedir}/target/classes">
+  <property name="classesdir" value="target/classes">
   </property>
-  <property name="testclassesdir" value="${basedir}/target/test-classes">
+  <property name="testclassesdir" value="target/test-classes">
   </property>
-  <property name="testreportdir" value="${basedir}/target/test-reports">
+  <property name="testclassesdir" value="target/test-classes">
   </property>
-  <property name="distdir" value="${basedir}/dist">
+  <property name="testreportdir" value="target/test-reports">
   </property>
-  <property name="javadocdir" value="${basedir}/dist/docs/api">
+  <property name="distdir" value="dist">
   </property>
-  <property name="final.name" value="joda-time-hibernate-0.8">
+  <property name="javadocdir" value="dist/docs/api">
   </property>
-  <property name="proxy.host" value="">
-  </property>
-  <property name="proxy.port" value="">
-  </property>
-  <property name="proxy.username" value="">
-  </property>
-  <property name="proxy.password" value="">
+  <property name="final.name" value="joda-time-hibernate-1.0">
   </property>
   <path id="build.classpath">
-    <pathelement location="${libdir}/joda-time/jars/joda-time-1.2.jar">
-    </pathelement>
-    <pathelement location="${libdir}/hibernate/jars/hibernate-3.0.5.jar">
-    </pathelement>
-    <pathelement location="${libdir}/commons-logging/jars/commons-logging-api-1.0.4.jar">
-    </pathelement>
-    <pathelement location="${libdir}/commons-collections/jars/commons-collections-3.1.jar">
-    </pathelement>
-    <pathelement location="${libdir}/hsqldb/jars/hsqldb-1.7.3.3.jar">
-    </pathelement>
-    <pathelement location="${libdir}/ehcache/jars/ehcache-1.1.jar">
-    </pathelement>
-    <pathelement location="${libdir}/dom4j/jars/dom4j-1.6.jar">
-    </pathelement>
-    <pathelement location="${libdir}/cglib/jars/cglib-full-2.0.2.jar">
-    </pathelement>
-    <pathelement location="${libdir}/jta/jars/jta-1_0_1B-classes.zip">
-    </pathelement>
+    <fileset dir="${libdir}">
+      <include name="**/*.jar">
+      </include>
+    </fileset>
   </path>
   <target name="init" description="o Initializes some properties">
     <mkdir dir="${libdir}">
@@ -67,25 +39,13 @@
 
     <available property="Junit.present" classname="junit.framework.Test">
     </available>
-    <!--Test if user defined a proxy-->
-
-    <condition property="useProxy">
-      <and>
-        <isset property="proxy.host">
-        </isset>
-        <not>
-          <equals trim="true" arg2="" arg1="${proxy.host}">
-          </equals>
-        </not>
-      </and>
-    </condition>
   </target>
   <target name="compile" description="o Compile the code" depends="get-deps">
     <mkdir dir="${classesdir}">
     </mkdir>
     <javac destdir="${classesdir}" deprecation="true" debug="true" optimize="false" excludes="**/package.html">
       <src>
-        <pathelement location="${basedir}/src/java">
+        <pathelement location="src/java">
         </pathelement>
       </src>
       <classpath refid="build.classpath">
@@ -94,7 +54,7 @@
     <mkdir dir="${classesdir}/meta-inf">
     </mkdir>
     <copy todir="${classesdir}/meta-inf">
-      <fileset dir="${basedir}/.">
+      <fileset dir=".">
         <include name="NOTICE.txt">
         </include>
       </fileset>
@@ -127,7 +87,7 @@
   <target name="internal-test" if="Junit.present" depends="junit-present,compile-tests">
     <mkdir dir="${testreportdir}">
     </mkdir>
-    <junit dir="${basedir}" failureproperty="test.failure" printSummary="yes" fork="true" haltonerror="true">
+    <junit dir="./" failureproperty="test.failure" printSummary="yes" fork="true" haltonerror="true">
       <sysproperty key="basedir" value=".">
       </sysproperty>
       <formatter type="xml">
@@ -143,7 +103,7 @@
         </pathelement>
       </classpath>
       <batchtest todir="${testreportdir}">
-        <fileset dir="${basedir}/src/test">
+        <fileset dir="src/test">
           <include name="org/joda/time/contrib/hibernate/**/Test*.java">
           </include>
         </fileset>
@@ -160,7 +120,7 @@
     </mkdir>
     <javac destdir="${testclassesdir}" deprecation="true" debug="true" optimize="false" excludes="**/package.html">
       <src>
-        <pathelement location="${basedir}/src/test">
+        <pathelement location="src/test">
         </pathelement>
       </src>
       <classpath>
@@ -180,138 +140,41 @@
     </tstamp>
     <property name="copyright" value="Copyright &amp;copy;  Joda.org. All Rights Reserved.">
     </property>
-    <property name="title" value="Joda time Hibernate support 0.8 API">
+    <property name="title" value="Joda time Hibernate support 1.0 API">
     </property>
-    <javadoc use="true" private="true" destdir="${javadocdir}" author="true" version="true" sourcepath="${basedir}/src/java" packagenames="org.joda.time.contrib.hibernate.*">
+    <javadoc use="true" private="true" destdir="${javadocdir}" author="true" version="true" sourcepath="src/java" packagenames="org.joda.time.contrib.hibernate.*">
       <classpath>
         <path refid="build.classpath">
         </path>
       </classpath>
     </javadoc>
   </target>
-  <target name="get-dep-joda-time.jar" description="o Download the dependency : joda-time.jar" unless="joda-time.jar" depends="init,setProxy,noProxy,get-custom-dep-joda-time.jar">
-    <mkdir dir="${libdir}/joda-time/jars/">
-    </mkdir>
-    <get dest="${libdir}/joda-time/jars/joda-time-1.2.jar" usetimestamp="true" ignoreerrors="true" src="http://www.ibiblio.org/maven/joda-time/jars/joda-time-1.2.jar">
-    </get>
-  </target>
-  <target name="get-custom-dep-joda-time.jar" if="joda-time.jar" depends="init,setProxy,noProxy">
-    <mkdir dir="${libdir}/joda-time/jars/">
-    </mkdir>
-    <get dest="${libdir}/joda-time/jars/joda-time-1.2.jar" usetimestamp="true" ignoreerrors="true" src="${joda-time.jar}">
-    </get>
-  </target>
-  <target name="get-dep-hibernate.jar" description="o Download the dependency : hibernate.jar" unless="hibernate.jar" depends="init,setProxy,noProxy,get-custom-dep-hibernate.jar">
-    <mkdir dir="${libdir}/hibernate/jars/">
-    </mkdir>
-    <get dest="${libdir}/hibernate/jars/hibernate-3.0.5.jar" usetimestamp="true" ignoreerrors="true" src="http://www.ibiblio.org/maven/hibernate/jars/hibernate-3.0.5.jar">
-    </get>
-  </target>
-  <target name="get-custom-dep-hibernate.jar" if="hibernate.jar" depends="init,setProxy,noProxy">
-    <mkdir dir="${libdir}/hibernate/jars/">
-    </mkdir>
-    <get dest="${libdir}/hibernate/jars/hibernate-3.0.5.jar" usetimestamp="true" ignoreerrors="true" src="${hibernate.jar}">
-    </get>
-  </target>
-  <target name="get-dep-commons-logging-api.jar" description="o Download the dependency : commons-logging-api.jar" unless="commons-logging-api.jar" depends="init,setProxy,noProxy,get-custom-dep-commons-logging-api.jar">
-    <mkdir dir="${libdir}/commons-logging/jars/">
-    </mkdir>
-    <get dest="${libdir}/commons-logging/jars/commons-logging-api-1.0.4.jar" usetimestamp="true" ignoreerrors="true" src="http://www.ibiblio.org/maven/commons-logging/jars/commons-logging-api-1.0.4.jar">
-    </get>
-  </target>
-  <target name="get-custom-dep-commons-logging-api.jar" if="commons-logging-api.jar" depends="init,setProxy,noProxy">
-    <mkdir dir="${libdir}/commons-logging/jars/">
-    </mkdir>
-    <get dest="${libdir}/commons-logging/jars/commons-logging-api-1.0.4.jar" usetimestamp="true" ignoreerrors="true" src="${commons-logging-api.jar}">
-    </get>
-  </target>
-  <target name="get-dep-commons-collections.jar" description="o Download the dependency : commons-collections.jar" unless="commons-collections.jar" depends="init,setProxy,noProxy,get-custom-dep-commons-collections.jar">
-    <mkdir dir="${libdir}/commons-collections/jars/">
-    </mkdir>
-    <get dest="${libdir}/commons-collections/jars/commons-collections-3.1.jar" usetimestamp="true" ignoreerrors="true" src="http://www.ibiblio.org/maven/commons-collections/jars/commons-collections-3.1.jar">
-    </get>
-  </target>
-  <target name="get-custom-dep-commons-collections.jar" if="commons-collections.jar" depends="init,setProxy,noProxy">
-    <mkdir dir="${libdir}/commons-collections/jars/">
-    </mkdir>
-    <get dest="${libdir}/commons-collections/jars/commons-collections-3.1.jar" usetimestamp="true" ignoreerrors="true" src="${commons-collections.jar}">
+  <target name="get-deps" unless="noget" depends="init">
+    <!--Proxy settings works only with a JDK 1.2 and higher.-->
+
+    <setproxy>
+    </setproxy>
+    <get dest="${libdir}/joda-time-1.4.jar" usetimestamp="true" ignoreerrors="true" src="http://repo1.maven.org/maven/joda-time/jars/joda-time-1.4.jar">
     </get>
-  </target>
-  <target name="get-dep-hsqldb.jar" description="o Download the dependency : hsqldb.jar" unless="hsqldb.jar" depends="init,setProxy,noProxy,get-custom-dep-hsqldb.jar">
-    <mkdir dir="${libdir}/hsqldb/jars/">
-    </mkdir>
-    <get dest="${libdir}/hsqldb/jars/hsqldb-1.7.3.3.jar" usetimestamp="true" ignoreerrors="true" src="http://www.ibiblio.org/maven/hsqldb/jars/hsqldb-1.7.3.3.jar">
+    <get dest="${libdir}/hibernate-3.0.5.jar" usetimestamp="true" ignoreerrors="true" src="http://repo1.maven.org/maven/hibernate/jars/hibernate-3.0.5.jar">
     </get>
-  </target>
-  <target name="get-custom-dep-hsqldb.jar" if="hsqldb.jar" depends="init,setProxy,noProxy">
-    <mkdir dir="${libdir}/hsqldb/jars/">
-    </mkdir>
-    <get dest="${libdir}/hsqldb/jars/hsqldb-1.7.3.3.jar" usetimestamp="true" ignoreerrors="true" src="${hsqldb.jar}">
+    <get dest="${libdir}/commons-logging-api-1.0.4.jar" usetimestamp="true" ignoreerrors="true" src="http://repo1.maven.org/maven/commons-logging/jars/commons-logging-api-1.0.4.jar">
     </get>
-  </target>
-  <target name="get-dep-ehcache.jar" description="o Download the dependency : ehcache.jar" unless="ehcache.jar" depends="init,setProxy,noProxy,get-custom-dep-ehcache.jar">
-    <mkdir dir="${libdir}/ehcache/jars/">
-    </mkdir>
-    <get dest="${libdir}/ehcache/jars/ehcache-1.1.jar" usetimestamp="true" ignoreerrors="true" src="http://www.ibiblio.org/maven/ehcache/jars/ehcache-1.1.jar">
+    <get dest="${libdir}/commons-collections-3.1.jar" usetimestamp="true" ignoreerrors="true" src="http://repo1.maven.org/maven/commons-collections/jars/commons-collections-3.1.jar">
     </get>
-  </target>
-  <target name="get-custom-dep-ehcache.jar" if="ehcache.jar" depends="init,setProxy,noProxy">
-    <mkdir dir="${libdir}/ehcache/jars/">
-    </mkdir>
-    <get dest="${libdir}/ehcache/jars/ehcache-1.1.jar" usetimestamp="true" ignoreerrors="true" src="${ehcache.jar}">
+    <get dest="${libdir}/hsqldb-1.7.3.3.jar" usetimestamp="true" ignoreerrors="true" src="http://repo1.maven.org/maven/hsqldb/jars/hsqldb-1.7.3.3.jar">
     </get>
-  </target>
-  <target name="get-dep-dom4j.jar" description="o Download the dependency : dom4j.jar" unless="dom4j.jar" depends="init,setProxy,noProxy,get-custom-dep-dom4j.jar">
-    <mkdir dir="${libdir}/dom4j/jars/">
-    </mkdir>
-    <get dest="${libdir}/dom4j/jars/dom4j-1.6.jar" usetimestamp="true" ignoreerrors="true" src="http://www.ibiblio.org/maven/dom4j/jars/dom4j-1.6.jar">
-    </get>
-  </target>
-  <target name="get-custom-dep-dom4j.jar" if="dom4j.jar" depends="init,setProxy,noProxy">
-    <mkdir dir="${libdir}/dom4j/jars/">
-    </mkdir>
-    <get dest="${libdir}/dom4j/jars/dom4j-1.6.jar" usetimestamp="true" ignoreerrors="true" src="${dom4j.jar}">
+    <get dest="${libdir}/ehcache-1.1.jar" usetimestamp="true" ignoreerrors="true" src="http://repo1.maven.org/maven/ehcache/jars/ehcache-1.1.jar">
     </get>
-  </target>
-  <target name="get-dep-cglib.jar" description="o Download the dependency : cglib.jar" unless="cglib.jar" depends="init,setProxy,noProxy,get-custom-dep-cglib.jar">
-    <mkdir dir="${libdir}/cglib/jars/">
-    </mkdir>
-    <get dest="${libdir}/cglib/jars/cglib-full-2.0.2.jar" usetimestamp="true" ignoreerrors="true" src="http://www.ibiblio.org/maven/cglib/jars/cglib-full-2.0.2.jar">
+    <get dest="${libdir}/dom4j-1.6.jar" usetimestamp="true" ignoreerrors="true" src="http://repo1.maven.org/maven/dom4j/jars/dom4j-1.6.jar">
     </get>
-  </target>
-  <target name="get-custom-dep-cglib.jar" if="cglib.jar" depends="init,setProxy,noProxy">
-    <mkdir dir="${libdir}/cglib/jars/">
-    </mkdir>
-    <get dest="${libdir}/cglib/jars/cglib-full-2.0.2.jar" usetimestamp="true" ignoreerrors="true" src="${cglib.jar}">
+    <get dest="${libdir}/cglib-full-2.0.2.jar" usetimestamp="true" ignoreerrors="true" src="http://repo1.maven.org/maven/cglib/jars/cglib-full-2.0.2.jar">
     </get>
-  </target>
-  <target name="get-dep-jta.jar" description="o Download the dependency : jta.jar" unless="jta.jar" depends="init,setProxy,noProxy,get-custom-dep-jta.jar">
-    <mkdir dir="${libdir}/jta/jars/">
-    </mkdir>
-    <get dest="${libdir}/jta/jars/jta-1_0_1B-classes.zip" usetimestamp="true" ignoreerrors="true" src="http://www.ibiblio.org/maven/jta/jars/jta-1_0_1B-classes.zip">
+    <get dest="${libdir}/antlr-2.7.2.jar" usetimestamp="true" ignoreerrors="true" src="http://repo1.maven.org/maven/antlr/jars/antlr-2.7.2.jar">
     </get>
-  </target>
-  <target name="get-custom-dep-jta.jar" if="jta.jar" depends="init,setProxy,noProxy">
-    <mkdir dir="${libdir}/jta/jars/">
-    </mkdir>
-    <get dest="${libdir}/jta/jars/jta-1_0_1B-classes.zip" usetimestamp="true" ignoreerrors="true" src="${jta.jar}">
+    <get dest="${libdir}/jta-1_0_1B-classes.zip" usetimestamp="true" ignoreerrors="true" src="http://repo1.maven.org/maven/jta/jars/jta-1_0_1B-classes.zip">
     </get>
   </target>
-  <target name="get-deps" unless="noget" depends="get-dep-joda-time.jar,get-dep-hibernate.jar,get-dep-commons-logging-api.jar,get-dep-commons-collections.jar,get-dep-hsqldb.jar,get-dep-ehcache.jar,get-dep-dom4j.jar,get-dep-cglib.jar,get-dep-jta.jar">
-  </target>
-  <target name="setProxy" if="useProxy" depends="init">
-    <!--Proxy settings works only with a JDK 1.2 and higher.-->
-
-    <echo>Proxy used :</echo>
-    <echo>Proxy host [${proxy.host}]</echo>
-    <echo>Proxy port [${proxy.port}]</echo>
-    <echo>Proxy user [${proxy.username}]</echo>
-    <setproxy proxyuser="${proxy.username}" proxyport="${proxy.port}" proxypassword="${proxy.password}" proxyhost="${proxy.host}">
-    </setproxy>
-  </target>
-  <target name="noProxy" unless="useProxy" depends="init">
-    <echo>Proxy not used.</echo>
-  </target>
   <target name="install-maven">
     <get dest="${user.home}/maven-install-latest.jar" usetimestamp="true" src="${repo}/maven/maven-install-latest.jar">
     </get>
diff --git a/JodaTimeContrib/hibernate/project.xml b/JodaTimeContrib/hibernate/project.xml
index b475550e1..989294f32 100644
--- a/JodaTimeContrib/hibernate/project.xml
+++ b/JodaTimeContrib/hibernate/project.xml
@@ -4,7 +4,7 @@
   <groupId>joda-time</groupId>
   <artifactId>joda-time-hibernate</artifactId>
   <name>Joda time Hibernate support</name>
-  <currentVersion>0.8</currentVersion>
+  <currentVersion>1.0</currentVersion>
   <shortDescription>Joda time Hibernate support</shortDescription>
   <description>
     Contribution to Joda-Time that adds Hibernate support
@@ -59,6 +59,14 @@
         <role>Lead developer</role>
       </roles>
     </developer>
+    <developer>
+      <name>Gregory Joseph</name>
+      <id>gjoseph</id>
+      <email></email>
+      <roles>
+        <role>Developer</role>
+      </roles>
+    </developer>
     <developer>
       <name>Stephen Colebourne</name>
       <id>scolebourne</id>
@@ -75,9 +83,6 @@
       <groupId>joda-time</groupId>
       <artifactId>joda-time</artifactId>
       <version>1.4</version>
-      <properties>
-        <comment>Compatible with v1.0 or later</comment>
-      </properties>
     </dependency>
     <dependency>
       <groupId>hibernate</groupId>
diff --git a/JodaTimeContrib/hibernate/src/conf/manifest-additions.txt b/JodaTimeContrib/hibernate/src/conf/manifest-additions.txt
index f671879f6..43ee15558 100644
--- a/JodaTimeContrib/hibernate/src/conf/manifest-additions.txt
+++ b/JodaTimeContrib/hibernate/src/conf/manifest-additions.txt
@@ -1,2 +1,2 @@
-Specification-Version: 0.8
+Specification-Version: 1.0
 Implementation-Vendor-Id: org.joda
\ No newline at end of file
diff --git a/JodaTimeContrib/hibernate/xdocs/changes.xml b/JodaTimeContrib/hibernate/xdocs/changes.xml
index 3a08c3928..e481504ac 100644
--- a/JodaTimeContrib/hibernate/xdocs/changes.xml
+++ b/JodaTimeContrib/hibernate/xdocs/changes.xml
@@ -7,6 +7,16 @@
   </properties>
   <body>
 
+    <!-- types are add, fix, remove, update -->
+    <release version="1.0" date="2007-09-27" description="Version for Joda-Time 1.3+">
+      <action dev="gjospeh" type="add">
+        Add persistence for Period and Duration.
+      </action>              
+      <action dev="imario" type="add">
+        Add persistence for LocalDate, LocalTime and LocalDateTime.
+      </action>              
+    </release>
+
     <!-- types are add, fix, remove, update -->
     <release version="0.8" date="2005-12-29" description="Initial version">
       <action dev="imario" type="add">
diff --git a/JodaTimeContrib/hibernate/xdocs/index.xml b/JodaTimeContrib/hibernate/xdocs/index.xml
index 9c10d3347..2a5197e9a 100644
--- a/JodaTimeContrib/hibernate/xdocs/index.xml
+++ b/JodaTimeContrib/hibernate/xdocs/index.xml
@@ -27,7 +27,7 @@ It aims to provide the classes necessary to persist Joda-Time objects.
   &lt;% pageContext.setAttribute("now", new org.joda.time.DateTime()); %&gt;
   <b>&lt;joda:format value="${now}" style="SM" /&gt;</b>
 </source>-->
-Version 0.8 was released on 2005-12-29 -
+Version 1.0 was released on 2007-09-27 -
 <a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=174357">Download now</a>
 </p>
 </section>
@@ -49,12 +49,12 @@ Various documentation is available:
 
 <section name="Releases">
 <p>
-<a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=174357">Release 0.8</a>
+<a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=174357">Release 1.0</a>
 is the current latest release.
-This release is a beta release and may have bugs.
+Please bear in mind that this project is separate from Joda-Time itself.
 </p>
 <p>
-The dependencies are Joda-Time 1.0 or later and Hibernate 3.0 (plus associated dependencies).
+The dependencies are Joda-Time 1.3 or later and Hibernate 3.0 (plus associated dependencies).
 We recommend JDK 1.4 or later, and have performed no testing on earlier JDKs.
 </p>
 </section>
@@ -62,12 +62,20 @@ We recommend JDK 1.4 or later, and have performed no testing on earlier JDKs.
 
 <section name="Support">
 <p>
-The Joda-Time Hibernate support library was contributed to Joda-Time by Mario Ivankovits.
+The Joda-Time Hibernate support library was contributed to Joda-Time by Mario Ivankovits and Gregory Joseph.
+Support on bugs, library usage or enhancement requests is available via:
 </p>
+<ul>
+<li>the joda-interest <a href="mail-lists.html">mailing list</a>. Due to spam, you must be subscribed to post to the mailing list.</li>
+<li>the joda-time sourceforge <a href="http://sourceforge.net/forum/forum.php?forum_id=337835">forum</a>.</li>
+</ul>
 <p>
-For support on bugs, using the library or to volunteer please contact the <a href="mail-lists.html">mailing list</a>
-(or email direct to the list via <a href="mailto:joda-interest@lists.sourceforge.net">joda-interest@lists.sourceforge.net</a>).
+<br />
+</p>
+<p>
+<br />
 </p>
 </section>
+
 </body>
 </document>

From 87557cda7e4415ffef60de6d54f90af9e4a803ed Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Thu, 27 Sep 2007 21:30:31 +0000
Subject: [PATCH 084/112] Switch meta-inf to META-INF

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1254 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/hibernate/build.xml   | 4 ++--
 JodaTimeContrib/hibernate/project.xml | 2 +-
 2 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/JodaTimeContrib/hibernate/build.xml b/JodaTimeContrib/hibernate/build.xml
index d3b85d6da..ceb44e734 100644
--- a/JodaTimeContrib/hibernate/build.xml
+++ b/JodaTimeContrib/hibernate/build.xml
@@ -51,9 +51,9 @@
       <classpath refid="build.classpath">
       </classpath>
     </javac>
-    <mkdir dir="${classesdir}/meta-inf">
+    <mkdir dir="${classesdir}/META-INF">
     </mkdir>
-    <copy todir="${classesdir}/meta-inf">
+    <copy todir="${classesdir}/META-INF">
       <fileset dir=".">
         <include name="NOTICE.txt">
         </include>
diff --git a/JodaTimeContrib/hibernate/project.xml b/JodaTimeContrib/hibernate/project.xml
index 989294f32..baac6322f 100644
--- a/JodaTimeContrib/hibernate/project.xml
+++ b/JodaTimeContrib/hibernate/project.xml
@@ -142,7 +142,7 @@
     </unitTest>
     <resources>
       <resource>
-        <targetPath>meta-inf</targetPath>
+        <targetPath>META-INF</targetPath>
         <includes>
           <include>NOTICE.txt</include>
         </includes>

From b35d679ac692ed5502841614aa597c04e4790013 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Tue, 2 Oct 2007 03:02:51 +0000
Subject: [PATCH 085/112] DateTimeZone data updated to version 2007h

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1255 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  2 +-
 .../src/java/org/joda/time/tz/src/Readme.txt  |  2 +-
 JodaTime/src/java/org/joda/time/tz/src/africa | 16 ++++--
 JodaTime/src/java/org/joda/time/tz/src/asia   | 54 ++++++++++++++++---
 .../java/org/joda/time/tz/src/southamerica    | 35 +++++++++---
 5 files changed, 91 insertions(+), 18 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index e25f00d22..5c089771e 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -80,7 +80,7 @@ Serialization compatible - Yes
 Data compatible - Yes, except
   - Format of time zone data files changed slightly to fix bug
     This mainly affects Australia
-  - DateTimeZone data updated to version 2007g
+  - DateTimeZone data updated to version 2007h
 
 Semantic compatible - Yes
 
diff --git a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
index 0388492fa..5ab7443e8 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
+++ b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
@@ -1,2 +1,2 @@
 The data files in this directory were obtained from the public tz database,
-http://www.twinsun.com/tz/tz-link.htm, version 2007g.
+http://www.twinsun.com/tz/tz-link.htm, version 2007h.
diff --git a/JodaTime/src/java/org/joda/time/tz/src/africa b/JodaTime/src/java/org/joda/time/tz/src/africa
index 24dbedec6..a39d3caea 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/africa
+++ b/JodaTime/src/java/org/joda/time/tz/src/africa
@@ -1,4 +1,4 @@
-# @(#)africa	8.9
+# @(#)africa	8.10
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
@@ -224,9 +224,19 @@ Rule	Egypt	2006	only	-	Sep	21	23:00s	0	-
 # From Jesper Norgaard Welen (2007-08-15): [The following agree:]
 # http://www.nentjes.info/Bill/bill5.htm 
 # http://www.timeanddate.com/worldclock/city.html?n=53
+# From Steffen Thorsen (2007-09-04): The official information...:
+# http://www.sis.gov.eg/En/EgyptOnline/Miscellaneous/000002/0207000000000000001580.htm
+Rule	Egypt	2007	only	-	Sep	Thu>=1	23:00s	0	-
+# From Abdelrahman Hassan (2007-09-06):
+# Due to the Hijri (lunar Islamic calendar) year being 11 days shorter
+# than the year of the Gregorian calendar, Ramadan shifts earlier each
+# year. This year it will be observed September 13 (September is quite
+# hot in Egypt), and the idea is to make fasting easier for workers by
+# shifting business hours one hour out of daytime heat. Consequently,
+# unless discontinued, next DST may end Thursday 28 August 2008.
 # From Paul Eggert (2007-08-17):
-# For lack of better info, assume the new rule is first Thursday.
-Rule	Egypt	2007	max	-	Sep	Thu>=1	23:00s	0	-
+# For lack of better info, assume the new rule is last Thursday in August.
+Rule	Egypt	2008	max	-	Aug	lastThu	23:00s	0	-
 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Africa/Cairo	2:05:00 -	LMT	1900 Oct
diff --git a/JodaTime/src/java/org/joda/time/tz/src/asia b/JodaTime/src/java/org/joda/time/tz/src/asia
index 45a83bda7..0683c749d 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/asia
+++ b/JodaTime/src/java/org/joda/time/tz/src/asia
@@ -1,4 +1,4 @@
-# @(#)asia	8.11
+# @(#)asia	8.12
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
@@ -568,14 +568,15 @@ Zone Asia/Jayapura	9:22:48 -	LMT	1932 Nov
 # Reingold's/Dershowitz' calculator gives correctly the Gregorian date
 # 2058-03-21 for 1 Farvardin 1437 (astronomical).
 #
-# From Paul Eggert (2006-03-22):
-# The above comments about post-2006 transitions may become relevant again,
-# if Iran ever resuscitates DST, so we'll leave the comments in.
-#
 # From Steffen Thorsen (2006-03-22):
 # Several of my users have reported that Iran will not observe DST anymore:
 # http://www.irna.ir/en/news/view/line-17/0603193812164948.htm
 #
+# From Reuters (2007-09-16), with a heads-up from Jesper Norgaard Welen:
+# ... the Guardian Council ... approved a law on Sunday to re-introduce
+# daylight saving time ...
+# http://uk.reuters.com/article/oilRpt/idUKBLA65048420070916
+#
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Iran	1978	1980	-	Mar	21	0:00	1:00	D
 Rule	Iran	1978	only	-	Oct	21	0:00	0	S
@@ -596,6 +597,36 @@ Rule	Iran	2004	only	-	Mar	21	0:00	1:00	D
 Rule	Iran	2004	only	-	Sep	21	0:00	0	S
 Rule	Iran	2005	only	-	Mar	22	0:00	1:00	D
 Rule	Iran	2005	only	-	Sep	22	0:00	0	S
+Rule	Iran	2008	only	-	Mar	21	0:00	1:00	D
+Rule	Iran	2008	only	-	Sep	21	0:00	0	S
+Rule	Iran	2009	2011	-	Mar	22	0:00	1:00	D
+Rule	Iran	2009	2011	-	Sep	22	0:00	0	S
+Rule	Iran	2012	only	-	Mar	21	0:00	1:00	D
+Rule	Iran	2012	only	-	Sep	21	0:00	0	S
+Rule	Iran	2013	2015	-	Mar	22	0:00	1:00	D
+Rule	Iran	2013	2015	-	Sep	22	0:00	0	S
+Rule	Iran	2016	only	-	Mar	21	0:00	1:00	D
+Rule	Iran	2016	only	-	Sep	21	0:00	0	S
+Rule	Iran	2017	2019	-	Mar	22	0:00	1:00	D
+Rule	Iran	2017	2019	-	Sep	22	0:00	0	S
+Rule	Iran	2020	only	-	Mar	21	0:00	1:00	D
+Rule	Iran	2020	only	-	Sep	21	0:00	0	S
+Rule	Iran	2021	2023	-	Mar	22	0:00	1:00	D
+Rule	Iran	2021	2023	-	Sep	22	0:00	0	S
+Rule	Iran	2024	only	-	Mar	21	0:00	1:00	D
+Rule	Iran	2024	only	-	Sep	21	0:00	0	S
+Rule	Iran	2025	2027	-	Mar	22	0:00	1:00	D
+Rule	Iran	2025	2027	-	Sep	22	0:00	0	S
+Rule	Iran	2028	2029	-	Mar	21	0:00	1:00	D
+Rule	Iran	2028	2029	-	Sep	21	0:00	0	S
+Rule	Iran	2030	2031	-	Mar	22	0:00	1:00	D
+Rule	Iran	2030	2031	-	Sep	22	0:00	0	S
+Rule	Iran	2032	2033	-	Mar	21	0:00	1:00	D
+Rule	Iran	2032	2033	-	Sep	21	0:00	0	S
+Rule	Iran	2034	2035	-	Mar	22	0:00	1:00	D
+Rule	Iran	2034	2035	-	Sep	22	0:00	0	S
+Rule	Iran	2036	2037	-	Mar	21	0:00	1:00	D
+Rule	Iran	2036	2037	-	Sep	21	0:00	0	S
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Asia/Tehran	3:25:44	-	LMT	1916
 			3:25:44	-	TMT	1946	# Tehran Mean Time
@@ -1518,6 +1549,17 @@ Zone	Asia/Karachi	4:28:12 -	LMT	1907
 # I guess it is likely that next year's date will be moved as well,
 # because of the Ramadan.
 
+# From Jesper Norgaard Welen (2007-09-18):
+# According to Steffen Thorsen's web site the Gaza Strip and the rest of the
+# Palestinian territories left DST early on 13.th. of September at 2:00.
+
+# From Paul Eggert (2007-09-20):
+# My understanding is that Gaza and the West Bank disagree even over when
+# the weekend is (Thursday+Friday versus Friday+Saturday), so I'd be a bit
+# surprised if they agreed about DST.  But for now, assume they agree.
+# For lack of better information, predict that future changes will be
+# the 2nd Thursday of September at 02:00.
+
 # The rules for Egypt are stolen from the `africa' file.
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule EgyptAsia	1957	only	-	May	10	0:00	1:00	S
@@ -1533,7 +1575,7 @@ Rule Palestine	2004	only	-	Oct	 1	1:00	0	-
 Rule Palestine	2005	only	-	Oct	 4	2:00	0	-
 Rule Palestine	2006	max	-	Apr	 1	0:00	1:00	S
 Rule Palestine	2006	only	-	Sep	22	0:00	0	-
-Rule Palestine	2007	max	-	Oct	Fri>=15	0:00	0	-
+Rule Palestine	2007	max	-	Sep	Thu>=8	2:00	0	-
 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Asia/Gaza	2:17:52	-	LMT	1900 Oct
diff --git a/JodaTime/src/java/org/joda/time/tz/src/southamerica b/JodaTime/src/java/org/joda/time/tz/src/southamerica
index edc6f31d9..90a4aa8f8 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/southamerica
+++ b/JodaTime/src/java/org/joda/time/tz/src/southamerica
@@ -1,4 +1,4 @@
-# @(#)southamerica	8.11
+# @(#)southamerica	8.12
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
@@ -424,6 +424,10 @@ Zone	America/La_Paz	-4:32:36 -	LMT	1890
 # modern Brazilian eletronic voting machines which, apparently, can't deal
 # with a time change between the first and the second rounds of the elections.
 
+# From Steffen Thorsen (2007-09-20):
+# Brazil will start DST on 2007-10-14 00:00 and end on 2008-02-17 00:00:
+# http://www.mme.gov.br/site/news/detail.do;jsessionid=BBA06811AFCAAC28F0285210913513DA?newsId=13975
+
 # From Paul Eggert (2002-10-10):
 # The official decrees referenced below are mostly taken from
 # <a href="http://pcdsh01.on.br/DecHV.html">
@@ -557,13 +561,18 @@ Rule	Brazil	2004	only	-	Nov	 2	 0:00	1:00	S
 # Decree <a href="http://pcdsh01.on.br/DecHV5539.gif">5,539</a> (2005-09-19),
 # adopted by the same states as before.
 Rule	Brazil	2005	only	-	Oct	16	 0:00	1:00	S
-# Decree <a href="http://www.planalto.gov.br/ccivil_03/_Ato2004-2006/2006/Decreto/D5920.htm">5,920</a>
-# (2006-10-03), adopted by the same states as before.
-Rule	Brazil	2006	max	-	Nov	Sun>=1	 0:00	1:00	S
-Rule	Brazil	2007	max	-	Feb	lastSun	 0:00	0	-
+# Decree <a href="http://pcdsh01.on.br/DecHV5920.gif">5,920</a> (2006-10-03),
+# adopted by the same states as before.
+Rule	Brazil	2006	only	-	Nov	 5	 0:00	1:00	S
+Rule	Brazil	2007	only	-	Feb	25	 0:00	0	-
+# (Decree number not yet known)
+# http://www.brasil.gov.br/noticias/ultimas_noticias/horario_verao070920/
+# (2007-09-20) after a heads-up from Steffen Thorsen:
+Rule	Brazil	2007	max	-	Oct	Sun>=8	 0:00	1:00	S
+Rule	Brazil	2008	max	-	Feb	Sun>=15	 0:00	0	-
 # The latest ruleset listed above says that the following states observe DST:
 # DF, ES, GO, MG, MS, MT, PR, RJ, RS, SC, SP.
-# For dates after mid-2007, the above rules with TO="max" are guesses
+# For dates after mid-2008, the above rules with TO="max" are guesses
 # and are quite possibly wrong, but are more likely than no DST at all.
 
 
@@ -1097,8 +1106,20 @@ Zone America/Montevideo	-3:44:44 -	LMT	1898 Jun 28
 			-3:00	Uruguay	UY%sT
 
 # Venezuela
+#
+# From Kiraz Janicke (2007-09-25), in
+# http://www.venezuelanalysis.com/analysis/2645:
+# The proposal ... involves turning the clock back half an hour from
+# +4.00 Greenwich Mean Time (GMT), to +4.30GMT, the time zone
+# Venezuela had until December 31, 1964, when the current time zone
+# was adopted. The change was due to take place on September 17 and
+# then on September 24, but has since been postponed until December
+# 31, to allow for compliance with international organizations, such
+# as the International Office of Weights and Measures.
+
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	America/Caracas	-4:27:44 -	LMT	1890
 			-4:27:40 -	CMT	1912 Feb 12 # Caracas Mean Time?
 			-4:30	-	VET	1965	     # Venezuela Time
-			-4:00	-	VET
+			-4:00	-	VET	2008
+			-4:30	-	VET

From 25443d7b7f8eda31e28d541ffba0b1247ad7f6b4 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 26 Oct 2007 20:16:45 +0000
Subject: [PATCH 086/112] Update tasks as Islamic chronology has been written

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1256 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/tasks.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/JodaTime/xdocs/tasks.xml b/JodaTime/xdocs/tasks.xml
index c0a91c60d..24ec48960 100644
--- a/JodaTime/xdocs/tasks.xml
+++ b/JodaTime/xdocs/tasks.xml
@@ -16,7 +16,7 @@ The following tasks are on the possible TODO list - contact the mailing lists fo
 </p>
 
 <ul>
-<li>Add more chronologies - Hebrew, Islamic, Persian, Hindu, Thai, Chinese, Japanese,...</li>
+<li>Add more chronologies - Hebrew, Persian, Hindu, Thai, Chinese, Japanese,...</li>
 <li>Consider formatting ordinal numbers, like 1st, 2nd, 3rd</li>
 <li>Consider allowing the text output to be altered</li>
 <li>Formatter switching by locale</li>

From 69b17f730e0383439b5f4abb2c2c0858df61240b Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 26 Oct 2007 22:34:31 +0000
Subject: [PATCH 087/112] Fix DateTime parsing of text containing non-letters,
 also make less greedy [1788282]

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1257 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  10 +
 .../time/format/DateTimeFormatterBuilder.java |  70 ++++--
 .../joda/time/format/TestDateTimeFormat.java  | 217 ++++++++++++++++++
 3 files changed, 280 insertions(+), 17 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 5c089771e..b9c142487 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -148,6 +148,16 @@ Bug fixes since 1.4
 - DateTimeFormatter specified with locale of null could produce mismatched
   symbols if default locale changed concurrently.
 
+- DateTime parsing of text failed when the text for the locale contained characters
+  other than letters. [1788282]
+  For French, the short text for months ends with '.'.
+  For Korean, the text for months contains a number.
+  The parser was also too greedy, and would absorb all letters it found, preventing
+  parsing a format such as '23JunSat' (month followed by day of week, or any other text).
+  The parser has been rewritten to only match the text that can be produced by the
+  formatter.
+
+
 Feedback
 --------
 All feedback is welcomed via the joda-interest mailing list.
diff --git a/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java b/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java
index ed185132e..2ded3d653 100644
--- a/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java
+++ b/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java
@@ -18,15 +18,21 @@
 import java.io.IOException;
 import java.io.Writer;
 import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Locale;
+import java.util.Map;
+import java.util.Set;
 
 import org.joda.time.Chronology;
 import org.joda.time.DateTimeConstants;
 import org.joda.time.DateTimeField;
 import org.joda.time.DateTimeFieldType;
 import org.joda.time.DateTimeZone;
+import org.joda.time.MutableDateTime;
 import org.joda.time.ReadablePartial;
+import org.joda.time.MutableDateTime.Property;
 import org.joda.time.field.MillisDurationField;
 import org.joda.time.field.PreciseDateTimeField;
 
@@ -1602,6 +1608,7 @@ private int getTwoDigitYear(ReadablePartial partial) {
     static class TextField
             implements DateTimePrinter, DateTimeParser {
 
+        private static Map cParseCache = new HashMap();
         private final DateTimeFieldType iFieldType;
         private final boolean iShort;
 
@@ -1678,27 +1685,56 @@ public int estimateParsedLength() {
         }
 
         public int parseInto(DateTimeParserBucket bucket, String text, int position) {
-            int limit = text.length();
-            int i = position;
-            for (; i<limit; i++) {
-                char c = text.charAt(i);
-                if (c < 'A') {
-                    break;
+            Locale locale = bucket.getLocale();
+            // handle languages which might have non ASCII A-Z or punctuation
+            // bug 1788282
+            Set validValues = null;
+            int maxLength = 0;
+            synchronized (cParseCache) {
+                Map innerMap = (Map) cParseCache.get(locale);
+                if (innerMap == null) {
+                    innerMap = new HashMap();
+                    cParseCache.put(locale, innerMap);
                 }
-                if (c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || Character.isLetter(c)) {
-                    continue;
+                Object[] array = (Object[]) innerMap.get(iFieldType);
+                if (array == null) {
+                    validValues = new HashSet(32);
+                    MutableDateTime dt = new MutableDateTime(0L, DateTimeZone.UTC);
+                    Property property = dt.property(iFieldType);
+                    int min = property.getMinimumValueOverall();
+                    int max = property.getMaximumValueOverall();
+                    if (max - min > 32) {  // protect against invalid fields
+                        return ~position;
+                    }
+                    maxLength = property.getMaximumTextLength(locale);
+                    for (int i = min; i <= max; i++) {
+                        property.set(i);
+                        validValues.add(property.getAsShortText(locale));
+                        validValues.add(property.getAsText(locale));
+                    }
+                    if ("en".equals(locale.getLanguage()) && iFieldType == DateTimeFieldType.era()) {
+                        // hack to support for parsing "BCE" and "CE" if the language is English
+                        validValues.add("BCE");
+                        validValues.add("CE");
+                        maxLength = 3;
+                    }
+                    array = new Object[] {validValues, new Integer(maxLength)};
+                    innerMap.put(iFieldType, array);
+                } else {
+                    validValues = (Set) array[0];
+                    maxLength = ((Integer) array[1]).intValue();
                 }
-                break;
             }
-
-            if (i == position) {
-                return ~position;
+            // match the longest string first using our knowledge of the max length
+            int limit = Math.min(text.length(), position + maxLength);
+            for (int i = limit; i > position; i--) {
+                String match = text.substring(position, i);
+                if (validValues.contains(match)) {
+                    bucket.saveField(iFieldType, match, locale);
+                    return i;
+                }
             }
-
-            Locale locale = bucket.getLocale();
-            bucket.saveField(iFieldType, text.substring(position, i), locale);
-
-            return i;
+            return ~position;
         }
     }
 
diff --git a/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java b/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java
index 7aadcbdc4..b90be838a 100644
--- a/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java
+++ b/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java
@@ -24,6 +24,7 @@
 import org.joda.time.Chronology;
 import org.joda.time.DateTime;
 import org.joda.time.DateTimeConstants;
+import org.joda.time.DateTimeFieldType;
 import org.joda.time.DateTimeUtils;
 import org.joda.time.DateTimeZone;
 import org.joda.time.chrono.GJChronology;
@@ -861,6 +862,7 @@ public void testFormat_shortBasicParse() {
         assertEquals(dt, f.parseDateTime("2004/03/09"));
     }
 
+    //-----------------------------------------------------------------------
     public void testParse_pivotYear() {
         DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("dd.MM.yy").withPivotYear(2050).withZone(DateTimeZone.UTC);
         
@@ -887,4 +889,219 @@ public void testParse_pivotYear_ignored4DigitYear() {
         assertEquals(date.getYear(), 99);
     }
 
+    //-----------------------------------------------------------------------
+    public void testFormatParse_textMonthJanShort_UK() {
+        DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("dd MMM yyyy")
+            .withLocale(Locale.UK).withZone(DateTimeZone.UTC);
+        
+        String str = new DateTime(2007, 1, 23, 0, 0, 0, 0, UTC).toString(dateFormatter);
+        assertEquals(str, "23 Jan 2007");
+        DateTime date = dateFormatter.parseDateTime(str);
+        check(date, 2007, 1, 23);
+    }
+
+    public void testParse_textMonthJanLong_UK() {
+        DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("dd MMM yyyy")
+            .withLocale(Locale.UK).withZone(DateTimeZone.UTC);
+        
+        DateTime date = dateFormatter.parseDateTime("23 January 2007");
+        check(date, 2007, 1, 23);
+    }
+
+    public void testFormatParse_textMonthJanShort_France() {
+        DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("dd MMM yyyy")
+            .withLocale(Locale.FRANCE).withZone(DateTimeZone.UTC);
+        
+        String str = new DateTime(2007, 1, 23, 0, 0, 0, 0, UTC).toString(dateFormatter);
+        assertEquals("23 janv. 2007", str);
+        DateTime date = dateFormatter.parseDateTime(str);
+        check(date, 2007, 1, 23);
+    }
+
+    public void testFormatParse_textMonthJanLong_France() {
+        DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("dd MMM yyyy")
+            .withLocale(Locale.FRANCE).withZone(DateTimeZone.UTC);
+        
+        DateTime date = dateFormatter.parseDateTime("23 janvier 2007");
+        check(date, 2007, 1, 23);
+    }
+
+    public void testFormatParse_textMonthApr_France() {
+        DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("dd MMM yyyy")
+            .withLocale(Locale.FRANCE).withZone(DateTimeZone.UTC);
+        
+        String str = new DateTime(2007, 2, 23, 0, 0, 0, 0, UTC).toString(dateFormatter);
+        assertEquals("23 f\u00E9vr. 2007", str);  // e acute
+        DateTime date = dateFormatter.parseDateTime(str);
+        check(date, 2007, 2, 23);
+    }
+
+    public void testFormatParse_textMonthAtEnd_France() {
+        DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("dd MMM")
+            .withLocale(Locale.FRANCE).withZone(DateTimeZone.UTC);
+        
+        String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter);
+        assertEquals("23 juin", str);
+        DateTime date = dateFormatter.parseDateTime(str);
+        check(date, 1970, 6, 23);
+    }
+
+    public void testFormatParse_textMonthApr_Korean() {
+        DateTimeFormatter dateFormatter = DateTimeFormat.forPattern("EEEE, d MMMM yyyy HH:mm")
+            .withLocale(Locale.KOREAN).withZone(DateTimeZone.UTC);
+        
+        String str = new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC).toString(dateFormatter);
+        DateTime date = dateFormatter.parseDateTime(str);
+        assertEquals(new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC), date);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testFormatParse_textHalfdayAM_UK() {
+        DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder()
+            .appendLiteral('$')
+            .appendClockhourOfHalfday(2)
+            .appendLiteral('-')
+            .appendHalfdayOfDayText()
+            .appendLiteral('-')
+            .appendYear(4, 4)
+            .toFormatter()
+            .withLocale(Locale.UK).withZone(DateTimeZone.UTC);
+        
+        String str = new DateTime(2007, 6, 23, 18, 0, 0, 0, UTC).toString(dateFormatter);
+        assertEquals("$06-PM-2007", str);
+        DateTime date = dateFormatter.parseDateTime(str);
+        check(date, 2007, 1, 1);
+    }
+
+    public void testFormatParse_textHalfdayAM_France() {
+        DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder()
+            .appendLiteral('$')
+            .appendClockhourOfHalfday(2)
+            .appendLiteral('-')
+            .appendHalfdayOfDayText()
+            .appendLiteral('-')
+            .appendYear(4, 4)
+            .toFormatter()
+            .withLocale(Locale.FRANCE).withZone(DateTimeZone.UTC);
+        
+        String str = new DateTime(2007, 6, 23, 18, 0, 0, 0, UTC).toString(dateFormatter);
+        assertEquals("$06-PM-2007", str);
+        DateTime date = dateFormatter.parseDateTime(str);
+        check(date, 2007, 1, 1);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testFormatParse_textEraAD_UK() {
+        DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder()
+            .appendLiteral('$')
+            .appendEraText()
+            .appendYear(4, 4)
+            .toFormatter()
+            .withLocale(Locale.UK).withZone(DateTimeZone.UTC);
+        
+        String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter);
+        assertEquals("$AD2007", str);
+        DateTime date = dateFormatter.parseDateTime(str);
+        check(date, 2007, 1, 1);
+    }
+
+    public void testFormatParse_textEraAD_France() {
+        DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder()
+            .appendLiteral('$')
+            .appendEraText()
+            .appendYear(4, 4)
+            .toFormatter()
+            .withLocale(Locale.FRANCE).withZone(DateTimeZone.UTC);
+        
+        String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter);
+        assertEquals("$ap. J.-C.2007", str);
+        DateTime date = dateFormatter.parseDateTime(str);
+        check(date, 2007, 1, 1);
+    }
+
+    public void testFormatParse_textEraBC_France() {
+        DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder()
+            .appendLiteral('$')
+            .appendEraText()
+            .appendYear(4, 4)
+            .toFormatter()
+            .withLocale(Locale.FRANCE).withZone(DateTimeZone.UTC);
+        
+        String str = new DateTime(-1, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter);
+        assertEquals("$BC-0001", str);
+        DateTime date = dateFormatter.parseDateTime(str);
+        check(date, -1, 1, 1);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testFormatParse_textYear_UK() {
+        DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder()
+            .appendLiteral('$')
+            .appendText(DateTimeFieldType.year())
+            .toFormatter()
+            .withLocale(Locale.UK).withZone(DateTimeZone.UTC);
+        
+        String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter);
+        assertEquals("$2007", str);
+        try {
+            dateFormatter.parseDateTime(str);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expected
+        }
+    }
+
+    public void testFormatParse_textYear_France() {
+        DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder()
+            .appendLiteral('$')
+            .appendText(DateTimeFieldType.year())
+            .toFormatter()
+            .withLocale(Locale.FRANCE).withZone(DateTimeZone.UTC);
+        
+        String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter);
+        assertEquals("$2007", str);
+        try {
+            dateFormatter.parseDateTime(str);
+            fail();
+        } catch (IllegalArgumentException ex) {
+            // expected
+        }
+    }
+
+    //-----------------------------------------------------------------------
+    public void testFormatParse_textAdjoiningHelloWorld_UK() {
+        DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder()
+            .appendLiteral('$')
+            .appendDayOfMonth(2)
+            .appendMonthOfYearShortText()
+            .appendLiteral("HelloWorld")
+            .toFormatter()
+            .withLocale(Locale.UK).withZone(DateTimeZone.UTC);
+        
+        String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter);
+        assertEquals("$23JunHelloWorld", str);
+        dateFormatter.parseDateTime(str);
+    }
+
+    public void testFormatParse_textAdjoiningMonthDOW_UK() {
+        DateTimeFormatter dateFormatter = new DateTimeFormatterBuilder()
+            .appendLiteral('$')
+            .appendDayOfMonth(2)
+            .appendMonthOfYearShortText()
+            .appendDayOfWeekShortText()
+            .toFormatter()
+            .withLocale(Locale.UK).withZone(DateTimeZone.UTC);
+        
+        String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter);
+        assertEquals("$23JunSat", str);
+        dateFormatter.parseDateTime(str);
+    }
+
+    //-----------------------------------------------------------------------
+    private void check(DateTime test, int hour, int min, int sec) {
+        assertEquals(hour, test.getYear());
+        assertEquals(min, test.getMonthOfYear());
+        assertEquals(sec, test.getDayOfMonth());
+    }
+
 }

From a201e3952d754c04bee99ba9c0e055b3b1b7bd35 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 28 Oct 2007 15:07:42 +0000
Subject: [PATCH 088/112] Fix test so it isn't influenced by DST cutover

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1258 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/test/org/joda/time/TestDateTimeZone.java | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/JodaTime/src/test/org/joda/time/TestDateTimeZone.java b/JodaTime/src/test/org/joda/time/TestDateTimeZone.java
index ad674e701..724bb5574 100644
--- a/JodaTime/src/test/org/joda/time/TestDateTimeZone.java
+++ b/JodaTime/src/test/org/joda/time/TestDateTimeZone.java
@@ -843,7 +843,7 @@ public void testPatchedNameKeysLondon() throws Exception {
         // the tz database does not have unique name keys [1716305]
         DateTimeZone zone = DateTimeZone.forID("Europe/London");
         
-        DateTime now = new DateTime();
+        DateTime now = new DateTime(2007, 1, 1, 0, 0, 0, 0);
         String str1 = zone.getName(now.getMillis());
         String str2 = zone.getName(now.plusMonths(6).getMillis());
         assertEquals(false, str1.equals(str2));
@@ -853,7 +853,7 @@ public void testPatchedNameKeysSydney() throws Exception {
         // the tz database does not have unique name keys [1716305]
         DateTimeZone zone = DateTimeZone.forID("Australia/Sydney");
         
-        DateTime now = new DateTime();
+        DateTime now = new DateTime(2007, 1, 1, 0, 0, 0, 0);
         String str1 = zone.getName(now.getMillis());
         String str2 = zone.getName(now.plusMonths(6).getMillis());
         assertEquals(false, str1.equals(str2));

From 119418fb76680e704e2b076b289620ba4d16459d Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 28 Oct 2007 15:53:06 +0000
Subject: [PATCH 089/112] Add Partial.isMatch(ReadablePartial)

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1259 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    | 29 +++++++++-------
 JodaTime/src/java/org/joda/time/Partial.java  | 24 +++++++++++++
 .../test/org/joda/time/TestPartial_Match.java | 34 ++++++++++++++++++-
 3 files changed, 74 insertions(+), 13 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index b9c142487..256024a8a 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -20,6 +20,23 @@ of restrictions. If the license causes you problems please contact the mailing l
 
 Enhancements since 1.4
 ----------------------
+- LocalDate
+  - add toDateTimeAtStartOfDay(), toDateTimeAtStartOfDay(DateTimeZone)
+  methods to replace toDateTimeAtMidnight() which avoid issues with time zones
+  that do not have midnight at spring DST cutover
+
+- LocalDate
+  - add toLocalDateTime()
+    provide mechanism to create LocalDateTime from LocalDate and LocalTime
+
+- Performance enhancement for LocalDate, LocalTime and LocalDateTime
+  - equals, compareTo, Period construction
+
+- Partial
+  - add isMatch(ReadablePartial)
+    provide mechanism to match a Partial, such as 'Friday the thirteenth' to
+    another partial, such as a LocalDate
+
 - Period
   - add toStandardDuration()
   - add toStandardWeeks(), toStandardDays(), toStandardHours(),
@@ -36,18 +53,6 @@ Enhancements since 1.4
   methods to normalize the period back to standard field ranges, such as
   normalizing 1 year 15 months to 2 years 3 months
 
-- LocalDate
-  - add toDateTimeAtStartOfDay(), toDateTimeAtStartOfDay(DateTimeZone)
-  methods to replace toDateTimeAtMidnight() which avoid issues with time zones
-  that do not have midnight at spring DST cutover
-
-- LocalDate
-  - add toLocalDateTime()
-    provide mechanism to create LocalDateTime from LocalDate and LocalTime
-
-- Performance enhancement for LocalDate, LocalTime and LocalDateTime
-  - equals, compareTo, Period construction
-
 - Period.toString(PeriodFormatter), MutablePeriod.toString(PeriodFormatter)
   - allow periods to be directly formatted, as with datetimes
 
diff --git a/JodaTime/src/java/org/joda/time/Partial.java b/JodaTime/src/java/org/joda/time/Partial.java
index 3552df7da..c25fb6e31 100644
--- a/JodaTime/src/java/org/joda/time/Partial.java
+++ b/JodaTime/src/java/org/joda/time/Partial.java
@@ -663,6 +663,30 @@ public boolean isMatch(ReadableInstant instant) {
         return true;
     }
 
+    /**
+     * Does this partial match the specified partial.
+     * <p>
+     * A match occurs when all the fields of this partial are the same as the
+     * corresponding fields on the specified partial.
+     *
+     * @param partial  a partial to check against, must not be null
+     * @return true if this partial matches the specified partial
+     * @throws IllegalArgumentException if the partial is null
+     * @throws IllegalArgumentException if the fields of the two partials do not match
+     */
+    public boolean isMatch(ReadablePartial partial) {
+        if (partial == null) {
+            throw new IllegalArgumentException("The partial must not be null");
+        }
+        for (int i = 0; i < iTypes.length; i++) {
+            int value = partial.get(iTypes[i]);
+            if (value != iValues[i]) {
+                return false;
+            }
+        }
+        return true;
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Gets a formatter suitable for the fields in this partial.
diff --git a/JodaTime/src/test/org/joda/time/TestPartial_Match.java b/JodaTime/src/test/org/joda/time/TestPartial_Match.java
index 0c4036e67..de7dd9a9a 100644
--- a/JodaTime/src/test/org/joda/time/TestPartial_Match.java
+++ b/JodaTime/src/test/org/joda/time/TestPartial_Match.java
@@ -92,7 +92,7 @@ protected void tearDown() throws Exception {
     }
 
     //-----------------------------------------------------------------------
-    public void testIsMatch() {
+    public void testIsMatch_Instant() {
         // Year=2005, Month=7 (July), DayOfWeek=2 (Tuesday)
         Partial test = createYMDwPartial(ISO_UTC, 2005, 7, 2);
         DateTime instant = new DateTime(2005, 7, 5, 0, 0, 0, 0);
@@ -123,6 +123,38 @@ public void testIsMatch() {
         assertEquals(false, test.isMatch(instant));
     }
 
+    //-----------------------------------------------------------------------
+    public void testIsMatch_Partial() {
+        // Year=2005, Month=7 (July), DayOfWeek=2 (Tuesday)
+        Partial test = createYMDwPartial(ISO_UTC, 2005, 7, 2);
+        LocalDate partial = new LocalDate(2005, 7, 5);
+        assertEquals(true, test.isMatch(partial));
+        
+        partial = new LocalDate(2005, 7, 4);
+        assertEquals(false, test.isMatch(partial));
+        
+        partial = new LocalDate(2005, 7, 6);
+        assertEquals(false, test.isMatch(partial));
+        
+        partial = new LocalDate(2005, 7, 12);
+        assertEquals(true, test.isMatch(partial));
+        
+        partial = new LocalDate(2005, 7, 19);
+        assertEquals(true, test.isMatch(partial));
+        
+        partial = new LocalDate(2005, 7, 26);
+        assertEquals(true, test.isMatch(partial));
+        
+        partial = new LocalDate(2005, 8, 2);
+        assertEquals(false, test.isMatch(partial));
+        
+        partial = new LocalDate(2006, 7, 5);
+        assertEquals(false, test.isMatch(partial));
+        
+        partial = new LocalDate(2005, 6, 5);
+        assertEquals(false, test.isMatch(partial));
+    }
+
     //-----------------------------------------------------------------------
     private Partial createYMDwPartial(Chronology chrono, int year, int month, int dow) {
         return new Partial(

From 0ebf8683c297303dd53caf67ab5d2ecc5a8b5827 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 28 Oct 2007 16:03:00 +0000
Subject: [PATCH 090/112] Prepare for v1.5

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1260 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/ToDo.txt               |   4 +-
 JodaTime/build.xml              |   4 +-
 JodaTime/project.properties     |   2 +-
 JodaTime/xdocs/faq.xml          |  20 ++--
 JodaTime/xdocs/index.xml        |   8 +-
 JodaTime/xdocs/installation.xml |   5 +-
 JodaTime/xdocs/upgradeto150.xml | 184 ++++++++++++++++++++++++++++++++
 7 files changed, 205 insertions(+), 22 deletions(-)
 create mode 100644 JodaTime/xdocs/upgradeto150.xml

diff --git a/JodaTime/ToDo.txt b/JodaTime/ToDo.txt
index 4a25664b9..6d33a6a3c 100644
--- a/JodaTime/ToDo.txt
+++ b/JodaTime/ToDo.txt
@@ -1,10 +1,10 @@
 JodaTime ToDo list
 ==================
 
-For 1.5
+For 1.6
 -------
 
-The TODO list for 1.5 has not been set yet.
+The TODO list for 1.6 has not been set yet.
 Some of the following are likely targets, as they are interesting ideas.
 
 Join joda-interest.at.lists.sourceforge.net to help out!
diff --git a/JodaTime/build.xml b/JodaTime/build.xml
index 77cda4423..dc450f26b 100644
--- a/JodaTime/build.xml
+++ b/JodaTime/build.xml
@@ -27,8 +27,8 @@
   <property name="component.title"         value="Joda date and time"/>
 
   <!-- The current version number of this component -->
-  <property name="component.version"       value="1.4"/>
-  <property name="previous.version"        value="1.3"/>
+  <property name="component.version"       value="1.5"/>
+  <property name="previous.version"        value="1.4"/>
 
   <!-- The current version number of this component -->
   <property name="component.fullname"      value="${component.name}-${component.version}"/>
diff --git a/JodaTime/project.properties b/JodaTime/project.properties
index fb0fbb7ec..9e94e88df 100644
--- a/JodaTime/project.properties
+++ b/JodaTime/project.properties
@@ -17,7 +17,7 @@ maven.javadoc.public=true
 maven.javadoc.package=false
 maven.javadoc.private=false
 
-maven.jdiff.old.tag=v1_3_000
+maven.jdiff.old.tag=v1_4_000
 maven.jdiff.new.tag=CURRENT
 
 maven.repo.remote=http://repo1.maven.org/maven
\ No newline at end of file
diff --git a/JodaTime/xdocs/faq.xml b/JodaTime/xdocs/faq.xml
index d3a2f231b..3343d9580 100644
--- a/JodaTime/xdocs/faq.xml
+++ b/JodaTime/xdocs/faq.xml
@@ -36,24 +36,22 @@ Question not answered? Suggest one via the <a href="mail-lists.html">mailing lis
 <a name="newzonerules" />
 <subsection name="Does Joda-Time support the new US and Canada time zone rules?">
 <p>
-The US has decided to introduce new daylight savings rules for 2007.
-This is a frequent occurance in many parts of the world, but is an unusual experience for many US based developers.
-</p>
-<p>
 The time zone rules occur in three key places, your operating system, the JDK and Joda-Time.
 To be sure of hitting no issues, you should ensure that all three of these have been updated.
 </p>
 <p>
-As a general rule, using Joda-Time 1.4 is best - however here are the specific details:
+Version 1.5 of Joda-Time contains all the daylight savings rule updates.
+For earlier versions of Joda-Time the situation is more complex:
+</p>
+<p>
 If your application only uses the major time zones of the US, then you need Joda-Time 1.2 or later.
 If your application also uses the major time zones of the Canada, then you need Joda-Time 1.2.1 or later.
-If your application uses the minor time zones of the US or Canada, then you need Joda-Time 1.4.
-For Bermuda (Atlantic/Bermuda) you need Joda-Time 1.4.
-For the Bahamas (America/Nassau) you need the tz rules file 2007a which you must <a href="tz_update.html">manually compile</a>.
+If your application uses the minor time zones of the US or Canada, then you need Joda-Time 1.4 or later.
+For Bermuda (Atlantic/Bermuda) you need Joda-Time 1.4 or later.
+For the Bahamas (America/Nassau) you need Joda-Time 1.5.
 </p>
 <p>
-If you are unwilling to upgrade the version of your Joda-Time jar, you can compile the latest tz rules file 2007b into
-any version of Joda-Time following <a href="tz_update.html">these instructions</a>.
+For any future, or similar time zone change, you can upgrade your Joda-Time jar by following <a href="tz_update.html">these instructions</a>.
 </p>
 </subsection>
 
@@ -63,7 +61,7 @@ any version of Joda-Time following <a href="tz_update.html">these instructions</
 This question has more than one answer!
 If you just want the number of whole days between two dates, then you can use the
 new <a href="api-release/index.html?org/joda/time/Days.html">Days</a> class
-in version 1.4 of joda-time.
+in version 1.4 of Joda-Time.
 <source>
   Days d = Days.daysBetween(startDate, endDate);
   int days = d.getDays();
diff --git a/JodaTime/xdocs/index.xml b/JodaTime/xdocs/index.xml
index 0188d2a80..41cd2b555 100644
--- a/JodaTime/xdocs/index.xml
+++ b/JodaTime/xdocs/index.xml
@@ -20,10 +20,10 @@ is used by XML. The Gregorian, Julian, Buddhist, Coptic and Ethiopic systems are
 included, and we welcome further additions. Supporting classes include time zone,
 duration, format and parsing.
 </p>
-<p style="color:red; margin-left:20px;">
+<!--p style="color:red; margin-left:20px;">
 JSR 310 has now been launched. It aims to build upon Joda-Time and include it in the JDK.
 <a href="https://jsr-310.dev.java.net/" class="externalLink" title="External Link">More information</a>.
-</p>
+</p-->
 <p>
 As a flavour of Joda-Time, here's some example code:
 <source>
@@ -58,7 +58,7 @@ public boolean isJoinedInLastThreeMonths(<a href="api-release/index.html?org/jod
   return last3Months.contains(datetimeJoined);
 }
 -->
-Version 1.4 was released on 2006-11-12 -
+Version 1.5 was released on 2007-10-28 -
 <a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=104212">Download now</a>
 </p>
 </section>
@@ -143,7 +143,7 @@ Various documentation is available:
 
 <section name="Releases">
 <p>
-<a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=104212">Release 1.4</a>
+<a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=104212">Release 1.5</a>
 is the current latest release.
 This release is considered stable and worthy of the 1.x tag.
 It has extensive testing suites and has been used in production.
diff --git a/JodaTime/xdocs/installation.xml b/JodaTime/xdocs/installation.xml
index 5db27b0b6..ba40c8e87 100644
--- a/JodaTime/xdocs/installation.xml
+++ b/JodaTime/xdocs/installation.xml
@@ -12,16 +12,17 @@
 <p>
 To use Joda-Time you need to
 <a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=104212">download the latest version</a>.
-The download will contain the joda-time-1.4.jar.
+The download will contain the joda-time-1.5.jar.
 Once you add this to your classpath you will be able to use Joda-Time.
 </p>
 <p>
-The binary download also includes joda-time-1.4-src-ide.zip, which is a zip file
+The binary download also includes joda-time-1.5-src-ide.zip, which is a zip file
 of the source code suitable for linking to the jar file in IDEs such as Eclipse.
 </p>
 <p>
 The release notes for upgraders can be found here:
 <ul>
+<li><a href="upgradeto150.html">Version 1.4 to Version 1.5</a></li>
 <li><a href="upgradeto140.html">Version 1.3 to Version 1.4</a></li>
 <li><a href="upgradeto130.html">Version 1.2 to Version 1.3</a></li>
 <li><a href="upgradeto120.html">Version 1.1 to Version 1.2</a></li>
diff --git a/JodaTime/xdocs/upgradeto150.xml b/JodaTime/xdocs/upgradeto150.xml
new file mode 100644
index 000000000..f09d14a2a
--- /dev/null
+++ b/JodaTime/xdocs/upgradeto150.xml
@@ -0,0 +1,184 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+
+<document>
+ <properties>
+  <title>Java date and time API - Upgrade from 1.4 to 1.5</title>
+  <author email="scolebourne.at.users.sourceforge.net">Stephen Colebourne</author>
+ </properties>
+
+<body>
+
+<section name="Upgrade">
+<p>
+These are the release notes and advice for upgrading Joda-Time from
+version 1.4 to version 1.5.
+<source>
+Joda-Time version 1.5
+---------------------
+
+Joda-Time is a date and time handling library that seeks to replace the JDK
+Date and Calendar classes.
+
+This is the sixth full release of Joda-Time.
+This release focuses on new features, but also include some bug fixes.
+
+We recommend JDK 1.3 or later, and have performed no testing on earlier JDKs.
+
+Joda-Time is licensed under the business-friendly Apache License Version 2.
+This is the same license as all of Apache, plus other open source projects such as Spring.
+The intent is to make the code available to the Java community with the minimum
+of restrictions. If the license causes you problems please contact the mailing list.
+
+*  Please also check out our related projects   *
+* http://joda-time.sourceforge.net/related.html *
+
+
+Enhancements since 1.4
+----------------------
+- LocalDate
+  - add toDateTimeAtStartOfDay(), toDateTimeAtStartOfDay(DateTimeZone)
+  methods to replace toDateTimeAtMidnight() which avoid issues with time zones
+  that do not have midnight at spring DST cutover
+
+- LocalDate
+  - add toLocalDateTime()
+    provide mechanism to create LocalDateTime from LocalDate and LocalTime
+
+- Performance enhancement for LocalDate, LocalTime and LocalDateTime
+  - equals, compareTo, Period construction
+
+- Partial
+  - add isMatch(ReadablePartial)
+    provide mechanism to match a Partial, such as 'Friday the Thirteenth' to
+    another partial, such as a LocalDate
+
+- Period
+  - add toStandardDuration()
+  - add toStandardWeeks(), toStandardDays(), toStandardHours(),
+    toStandardMinutes(), toStandardSeconds()
+  methods to convert a period to other types using the standard
+  conversions (7 day week, 24 hour day, ...)
+
+- Period
+  - add plus(ReadablePeriod), minus(ReadablePeriod)
+  methods to add and subtract whole periods rather than just single fields
+
+- Period
+  - add normalizedStandard(), normalizedStandard(PeriodType)
+  methods to normalize the period back to standard field ranges, such as
+  normalizing 1 year 15 months to 2 years 3 months
+
+- Period.toString(PeriodFormatter), MutablePeriod.toString(PeriodFormatter)
+  - allow periods to be directly formatted, as with datetimes
+
+- DateTimeZone
+  - add isStandardOffset()
+  assists in determining if DST applies
+
+- Interval
+  - add (long,long,DateTimeZone) constructor
+  constructor emphasises that intervals include a time zone
+
+- DateTimeFormatterBuilder
+  - add appendFixedDecimal(DateTimeFieldType,int),
+        appendFixedSignedDecimal(DateTimeFieldType,int)
+  methods for printing and parsing fields which must have a fixed number of digits
+
+
+Compatibility with 1.4
+----------------------
+Binary compatible - Yes, except
+  Internal class LenientDateTimeField has an incompatible change to
+  getInstance() and the constructor
+
+Source compatible - Yes, except
+  Internal class LenientDateTimeField has an incompatible change to
+  getInstance() and the constructor
+
+Serialization compatible - Yes
+
+Data compatible - Yes, except
+  - Format of time zone data files changed slightly to fix bug
+    This mainly affects Australia
+  - DateTimeZone data updated to version 2007h
+
+Semantic compatible - Yes
+
+
+Deprecations since 1.4
+----------------------
+- LocalDate
+  - toDateTimeAtMidnight(), toDateTimeAtMidnight(DateTimeZone)
+    use toDateTimeAtStartOfDay() instead because it avoids exceptions
+
+
+Bug fixes since 1.4
+-------------------
+- Daylight savings cutover in Spring incorrect
+  A problem with DST cutover in Spring meant that the result of many
+  methods would be different depending on whether the time zone was in the
+  Eastern or Western hemisphere. Now, the DST cutover is consistent, such
+  that if a time is requested within the cutover, it will be pushed forwards
+  into summer time. [1710316, 1747219, 1755158]
+
+- LenientChronology and time zones
+  LenientChronology could throw exceptions when the time being created
+  didn't exist dies to the time zone [1755161]
+
+- LocalDate/LocalTime constructors did not set internal state correctly
+  This problem was exposed when Days.daysBetween() and similar methods
+  failed to give the right results
+
+- Period.plusXxx(), minusXxx(), withXxx()
+  Fix to throw correct exception as per javadoc (UnsupportedOperationException) when
+  changing an unsupported field
+
+- ZoneInfoProvider now returns a copy of its internal state on getAvailableIDs
+  This avoids race conditions on some JVMs
+
+- Period formating threw NegativeArraySizeException during formatting
+  This happened for certain period values, notably zero
+
+- Period formatting could end up in an infinite loop on IBM JDK 1.4.2
+  This appears to be an IBM JDK issue, not a Joda-Time issue, but we should
+  not have ended up in an infinite loop whatever happens
+
+- DateTimeZone did not properly convert fixed offset zones to java.util.TimeZone [1682152]
+
+- DateTimeZone names were incorrect when abbreviation is the same in winter
+  and summer, notably in Australia [1716305]
+
+- Avoid compilation issue reported by Apache Harmony [1699760]
+
+- LenientChronology might incorrectly adjust a valid hour field near DST transition
+
+- DateTimeFormat javadoc now explains time zone parsing restriction better [OpenDiscussion 1721909]
+
+- Period javadoc now explains toDurationFrom() and toDurationTo() better
+
+- DateTime/Instant/LocalDateTime javadoc improved
+
+- DateTimeZone
+  Clarify javadoc of forTimeZone to indicate that application created
+  SimpleTimeZone rules are not parsed [1705180]
+
+- Defect in localized Gregorian/Julian symbol cache severely impacted formatting
+  performance when using null (default) locale.
+
+- DateTimeFormatter specified with locale of null could produce mismatched
+  symbols if default locale changed concurrently.
+
+- DateTime parsing of text failed when the text for the locale contained characters
+  other than letters. [1788282]
+  For French, the short text for months ends with '.'.
+  For Korean, the text for months contains a number.
+  The parser was also too greedy, and would absorb all letters it found, preventing
+  parsing a format such as '23JunSat' (month followed by day of week, or any other text).
+  The parser has been rewritten to only match the text that can be produced by the
+  formatter.
+</source>
+</p>
+</section>
+
+</body>
+</document>

From 906e96a5648557219f18182171e63d305f804ae5 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 28 Oct 2007 16:22:30 +0000
Subject: [PATCH 091/112] Deprecate YearMonthDay and TimeOfDay

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1261 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                       | 16 +++++++++++++---
 .../src/java/org/joda/time/DateMidnight.java     |  1 +
 JodaTime/src/java/org/joda/time/DateTime.java    |  2 ++
 JodaTime/src/java/org/joda/time/TimeOfDay.java   |  8 +++-----
 .../src/java/org/joda/time/YearMonthDay.java     |  8 +++-----
 JodaTime/xdocs/upgradeto150.xml                  | 16 +++++++++++++---
 6 files changed, 35 insertions(+), 16 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 256024a8a..a1f511fb6 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -92,9 +92,19 @@ Semantic compatible - Yes
 
 Deprecations since 1.4
 ----------------------
-- LocalDate
-  - toDateTimeAtMidnight(), toDateTimeAtMidnight(DateTimeZone)
-    use toDateTimeAtStartOfDay() instead because it avoids exceptions
+- YearMonthDay
+  - use LocalDate
+- TimeOfDay
+  - use LocalTime
+  - LocalDate and LocalTime have a much better internal implementation and have
+    been available since v1.3. Both have been effectively deprecated in the javadoc
+    for over a year to enable a gentle transition. In this release, they are now
+    formally deprecated, however they won't be removed until a v2.0 which won't
+    occur until 2009 at the earliest.
+
+- LocalDate.toDateTimeAtMidnight()
+  LocalDate.toDateTimeAtMidnight(DateTimeZone)
+  - use toDateTimeAtStartOfDay() instead because it avoids exceptions
 
 
 Bug fixes since 1.4
diff --git a/JodaTime/src/java/org/joda/time/DateMidnight.java b/JodaTime/src/java/org/joda/time/DateMidnight.java
index 8344f675c..df8de83fb 100644
--- a/JodaTime/src/java/org/joda/time/DateMidnight.java
+++ b/JodaTime/src/java/org/joda/time/DateMidnight.java
@@ -782,6 +782,7 @@ public Property property(DateTimeFieldType type) {
      * same date and chronology.
      * 
      * @return a YearMonthDay using the same millis and chronology
+     * @deprecated Use LocalDate instead of YearMonthDay
      */
     public YearMonthDay toYearMonthDay() {
         return new YearMonthDay(getMillis(), getChronology());
diff --git a/JodaTime/src/java/org/joda/time/DateTime.java b/JodaTime/src/java/org/joda/time/DateTime.java
index 1d95964e9..9afdb0f0c 100644
--- a/JodaTime/src/java/org/joda/time/DateTime.java
+++ b/JodaTime/src/java/org/joda/time/DateTime.java
@@ -1225,6 +1225,7 @@ public DateMidnight toDateMidnight() {
      * same millis and chronology.
      * 
      * @return a YearMonthDay using the same millis and chronology
+     * @deprecated Use LocalDate instead of YearMonthDay
      */
     public YearMonthDay toYearMonthDay() {
         return new YearMonthDay(getMillis(), getChronology());
@@ -1235,6 +1236,7 @@ public YearMonthDay toYearMonthDay() {
      * same millis and chronology.
      * 
      * @return a TimeOfDay using the same millis and chronology
+     * @deprecated Use LocalTime instead of TimeOfDay
      */
     public TimeOfDay toTimeOfDay() {
         return new TimeOfDay(getMillis(), getChronology());
diff --git a/JodaTime/src/java/org/joda/time/TimeOfDay.java b/JodaTime/src/java/org/joda/time/TimeOfDay.java
index 36785bcca..dd0de9432 100644
--- a/JodaTime/src/java/org/joda/time/TimeOfDay.java
+++ b/JodaTime/src/java/org/joda/time/TimeOfDay.java
@@ -30,11 +30,6 @@
  * TimeOfDay is an immutable partial supporting the hour, minute, second
  * and millisecond fields.
  * <p>
- * NOTE: This class is effectively deprecated. New applications should
- * use {@link LocalTime} which has a better internal implementation.
- * This class has not yet been formally deprecated due to the large number
- * of existing users.
- * <p>
  * NOTE: This class only supports the four fields listed above. Thus, you
  * cannot query the millisOfDay or secondOfDay fields for example.
  * The new <code>LocalTime</code> class removes this restriction.
@@ -64,6 +59,8 @@
  * @author Stephen Colebourne
  * @author Brian S O'Neill
  * @since 1.0
+ * @deprecated Use LocalTime which has a much better internal implementation and
+ *  has been available since 1.3
  */
 public final class TimeOfDay
         extends BasePartial
@@ -1014,6 +1011,7 @@ public String toString() {
      * 
      * @author Stephen Colebourne
      * @since 1.0
+     * @deprecated Use LocalTime which has a much better internal implementation
      */
     public static class Property extends AbstractPartialFieldProperty implements Serializable {
 
diff --git a/JodaTime/src/java/org/joda/time/YearMonthDay.java b/JodaTime/src/java/org/joda/time/YearMonthDay.java
index 21d6a33ec..ea7ab54d2 100644
--- a/JodaTime/src/java/org/joda/time/YearMonthDay.java
+++ b/JodaTime/src/java/org/joda/time/YearMonthDay.java
@@ -30,11 +30,6 @@
  * YearMonthDay is an immutable partial supporting the year, monthOfYear
  * and dayOfMonth fields.
  * <p>
- * NOTE: This class is effectively deprecated. New applications should
- * use {@link LocalDate} which has a better internal implementation.
- * This class has not yet been formally deprecated due to the large number
- * of existing users.
- * <p>
  * NOTE: This class only supports the three fields listed above. Thus, you
  * cannot query the dayOfWeek or centuryOfEra fields for example.
  * The new <code>LocalDate</code> class removes this restriction.
@@ -63,6 +58,8 @@
  *
  * @author Stephen Colebourne
  * @since 1.0
+ * @deprecated Use LocalDate which has a much better internal implementation and
+ *  has been available since 1.3
  */
 public final class YearMonthDay
         extends BasePartial
@@ -929,6 +926,7 @@ public String toString() {
      * 
      * @author Stephen Colebourne
      * @since 1.0
+     * @deprecated Use LocalDate which has a much better internal implementation
      */
     public static class Property extends AbstractPartialFieldProperty implements Serializable {
 
diff --git a/JodaTime/xdocs/upgradeto150.xml b/JodaTime/xdocs/upgradeto150.xml
index f09d14a2a..1369f5575 100644
--- a/JodaTime/xdocs/upgradeto150.xml
+++ b/JodaTime/xdocs/upgradeto150.xml
@@ -107,9 +107,19 @@ Semantic compatible - Yes
 
 Deprecations since 1.4
 ----------------------
-- LocalDate
-  - toDateTimeAtMidnight(), toDateTimeAtMidnight(DateTimeZone)
-    use toDateTimeAtStartOfDay() instead because it avoids exceptions
+- YearMonthDay
+  - use LocalDate
+- TimeOfDay
+  - use LocalTime
+  - LocalDate and LocalTime have a much better internal implementation and have
+    been available since v1.3. Both have been effectively deprecated in the javadoc
+    for over a year to enable a gentle transition. In this release, they are now
+    formally deprecated, however they won't be removed until a v2.0 which won't
+    occur until 2009 at the earliest.
+
+- LocalDate.toDateTimeAtMidnight()
+  LocalDate.toDateTimeAtMidnight(DateTimeZone)
+  - use toDateTimeAtStartOfDay() instead because it avoids exceptions
 
 
 Bug fixes since 1.4

From 6e2619ab74ea82464280dc15c2e4625a7406c877 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 28 Oct 2007 16:43:22 +0000
Subject: [PATCH 092/112] Prepare for v1.5

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1262 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/project.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/JodaTime/project.xml b/JodaTime/project.xml
index a4c9efe14..b1647d8b6 100644
--- a/JodaTime/project.xml
+++ b/JodaTime/project.xml
@@ -7,7 +7,7 @@
   <groupId>joda-time</groupId>
   <artifactId>joda-time</artifactId>
   <name>Joda time</name>
-  <currentVersion>1.5-SNAPSHOT</currentVersion>
+  <currentVersion>1.5</currentVersion>
   <organization>
     <name>Joda.org</name>
     <url>http://www.joda.org</url>

From 08da459f9bd3ee12402646ef1aa9f435777d97d5 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 28 Oct 2007 18:27:13 +0000
Subject: [PATCH 093/112] Prepare for v1.5

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1263 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/conf/MANIFEST.MF | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/JodaTime/src/conf/MANIFEST.MF b/JodaTime/src/conf/MANIFEST.MF
index b7b0ee030..324714501 100644
--- a/JodaTime/src/conf/MANIFEST.MF
+++ b/JodaTime/src/conf/MANIFEST.MF
@@ -1,9 +1,9 @@
 Package: org.joda.time
-Extension-Name: @name@
+Extension-Name: joda-time
 Specification-Title: Joda-Time
 Specification-Vendor: Joda.org
-Specification-Version: 1.4
+Specification-Version: 1.5
 Implementation-Vendor: Joda.org
 Implementation-Title: org.joda.time
-Implementation-Version: @version@
+Implementation-Version: 1.5
 Implementation-Vendor-Id: org.joda

From 5e0b12a0eb72fcde7b685e86f2177e304f43868b Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 28 Oct 2007 20:27:44 +0000
Subject: [PATCH 094/112] Add Islamic calendar to home page

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1264 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/index.xml | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/JodaTime/xdocs/index.xml b/JodaTime/xdocs/index.xml
index 41cd2b555..cea29d14e 100644
--- a/JodaTime/xdocs/index.xml
+++ b/JodaTime/xdocs/index.xml
@@ -16,9 +16,9 @@ Joda-Time provides a quality replacement for the Java <em>date</em>
 and <em>time</em> classes. The design allows for multiple <em>calendar</em>
 systems, while still providing a simple API.
 The 'default' calendar is the <a href="cal_iso.html">ISO8601</a> standard which
-is used by XML. The Gregorian, Julian, Buddhist, Coptic and Ethiopic systems are also
-included, and we welcome further additions. Supporting classes include time zone,
-duration, format and parsing.
+is used by XML. The Gregorian, Julian, Buddhist, Coptic, Ethiopic and Islamic systems
+are also included, and we welcome further additions. Supporting classes include
+time zone, duration, format and parsing.
 </p>
 <!--p style="color:red; margin-left:20px;">
 JSR 310 has now been launched. It aims to build upon Joda-Time and include it in the JDK.

From 51dca08ae26758901078e85fcb1406171aab18b3 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 28 Oct 2007 20:29:29 +0000
Subject: [PATCH 095/112] Prepare for v1.5

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1265 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/conf/MANIFEST.MF | 1 +
 1 file changed, 1 insertion(+)

diff --git a/JodaTime/src/conf/MANIFEST.MF b/JodaTime/src/conf/MANIFEST.MF
index 324714501..7c24795d7 100644
--- a/JodaTime/src/conf/MANIFEST.MF
+++ b/JodaTime/src/conf/MANIFEST.MF
@@ -1,3 +1,4 @@
+Build-Jdk: 1.3.1
 Package: org.joda.time
 Extension-Name: joda-time
 Specification-Title: Joda-Time

From 44feb9f814cefe63986092e5783478d77eb3e53d Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 28 Oct 2007 20:31:58 +0000
Subject: [PATCH 097/112] Maven 2

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1267 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/site/navigation.xml | 69 ++++++++++++++++++++++++++++++++
 1 file changed, 69 insertions(+)
 create mode 100644 JodaTime/src/site/navigation.xml

diff --git a/JodaTime/src/site/navigation.xml b/JodaTime/src/site/navigation.xml
new file mode 100644
index 000000000..8221e1f54
--- /dev/null
+++ b/JodaTime/src/site/navigation.xml
@@ -0,0 +1,69 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+
+<project name="Joda Time">
+
+  <title>Joda Time</title>
+  <organizationLogo href="">Joda.org</organizationLogo>
+
+  <body>
+    <links>
+      <item name="Joda-Time" href="/index.html"/>
+      <item name="JSP tags" href="/contrib/jsptags/index.html"/>
+      <item name="Hibernate" href="/contrib/hibernate/index.html"/>
+      <item name="I18N" href="/contrib/i18n/index.html"/>
+    </links>
+
+    <menu name="Joda Time">
+      <item name="Overview" href="/index.html"/>
+      <item name="Quick start guide" href="/quickstart.html"/>
+      <item name="Users guide" href="/userguide.html"/>
+      <item name="FAQ" href="/faq.html"/>
+      <item name="Related projects" href="/related.html"/>
+      <item name="Javadoc (Release)" href="/api-release/index.html"/>
+      <item name="License" href="/license.html"/>
+      <item name="Download" href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=104212"/>
+    </menu>
+    
+    <menu name="Key concepts">
+      <item name="Instant" href="/key_instant.html"/>
+      <item name="Partial" href="/key_partial.html"/>
+      <item name="Interval" href="/key_interval.html"/>
+      <item name="Duration" href="/key_duration.html"/>
+      <item name="Period" href="/key_period.html"/>
+      <item name="Chronology" href="/key_chronology.html"/>
+    </menu>
+    
+    <menu name="Chronologies">
+      <item name="ISO8601" href="/cal_iso.html"/>
+      <item name="Buddhist" href="/cal_buddhist.html"/>
+      <item name="Coptic" href="/cal_coptic.html"/>
+      <item name="Ethiopic" href="/cal_ethiopic.html"/>
+      <item name="Gregorian" href="/cal_gregorian.html"/>
+      <item name="GregorianJulian" href="/cal_gj.html"/>
+      <item name="Islamic" href="/cal_islamic.html"/>
+      <item name="Julian" href="/cal_julian.html"/>
+    </menu>
+    
+    <menu name="Development">
+      <item name="Sourceforge" href="http://sourceforge.net/projects/joda-time/"/>
+      <item name="Test results" href="/junit-report.html"/>
+      <item name="Test coverage" href="/cobertura/index.html"/>
+      <item name="Mailing lists" href="/mail-lists.html"/>
+      <item name="Tasks" href="/tasks.html"/>
+      <item name="Subversion" href="http://joda-time.svn.sourceforge.net/viewvc/joda-time/trunk/JodaTime/"/>
+      <item name="Javadoc (Development)" href="/apidocs/index.html"/>
+    </menu>
+    
+    <menu name="Joda">
+      <item name="Joda home" href="http://joda.sourceforge.net"/>
+      <item name="Beans" href="http://joda.sourceforge.net/beans.html"/>
+      <item name="Primitives" href="http://joda-primitives.sourceforge.net/index.html"/>
+    </menu>
+    
+    <footer>
+      <a href="http://sourceforge.net">
+        <img src="http://sourceforge.net/sflogo.php?group_id=97367&amp;type=2" width="125" height="37" border="0" alt="SourceForge.net Logo" />
+      </a>
+    </footer>
+  </body>
+</project>

From 4a9a2cf9162464940f24b0da3973c30e4a20e222 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 28 Oct 2007 23:56:44 +0000
Subject: [PATCH 098/112] Maven 2

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1268 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/site/resources/css/site.css      | 130 ++++++++++++++++++
 .../src/site/{navigation.xml => site.xml}     |  30 +++-
 2 files changed, 156 insertions(+), 4 deletions(-)
 create mode 100644 JodaTime/src/site/resources/css/site.css
 rename JodaTime/src/site/{navigation.xml => site.xml} (79%)

diff --git a/JodaTime/src/site/resources/css/site.css b/JodaTime/src/site/resources/css/site.css
new file mode 100644
index 000000000..ca48bea20
--- /dev/null
+++ b/JodaTime/src/site/resources/css/site.css
@@ -0,0 +1,130 @@
+body, td, select, input, li{
+  font-family: Helvetica, Arial, sans-serif;
+  font-size: 13px;
+  background-color: #fff;
+}
+a {
+  color:#009;
+  text-decoration: none;
+}
+a:active, a:hover, #leftColumn a:active, #leftColumn a:hover, a:active, a:hover, #leftColumn a:active, #leftColumn a:hover, a:link, 
+
+#breadcrumbs a:visited, #navcolumn a:visited, .contentBox a:visited, .tasknav a:visited {
+  color:#009;
+}
+a:active, a:hover, #leftColumn a:active, #leftColumn a:hover, #leftColumn ul li strong {
+  color:#009 !important;
+}
+a:active, a:hover {
+  text-decoration: underline !important;
+}
+a.externalLink, a.externalLink:link, a.externalLink:visited, a.externalLink:active, a.externalLink:hover {
+  background: url(../images/external.png) right center no-repeat;
+  padding-right: 15px;
+}
+a.newWindow, a.newWindow:link, a.newWindow:visited, a.newWindow:active, a.newWindow:hover {
+  background: url(../images/newwindow.png) right center no-repeat;
+  padding-right: 18px;
+}
+.source a {
+  color:black !important;
+}
+h2 {
+  font-family: Verdana, Helvetica, Arial, sans-serif;
+  padding: 4px 4px 4px 6px;
+  border: 1px solid #999;
+  color: #006;
+  background-color: #eef;
+  font-weight:bold;
+  font-size: 16px;
+  margin-top: 4px;
+  margin-bottom: 6px;
+}
+h3 {
+  padding: 4px 4px 4px 6px;
+  border: 1px solid #aaa;
+  color: #006;
+  background-color: #eee;
+  font-weight: normal;
+  font-size: 14px;
+  margin-top: 4px;
+  margin-bottom: 6px;
+}
+p, ul {
+  font-size: 13px;
+  margin-top: 4px;
+  margin-bottom: 6px;
+}
+div#banner {
+  background-color: #eef;
+  border-top: 0px solid #aaa;
+  border-bottom: 1px solid #aaa;
+}
+#bannerLeft img, #bannerRight img {
+  border: 1px solid #999;
+  margin: 8px;
+}
+#breadcrumbs {
+  padding-top: 1px;
+  padding-bottom: 2px;
+  border-top: 0px solid #aaa;
+  border-bottom: 1px solid #aaa;
+  background-color: #ddf;
+}
+#leftColumn {
+  margin: 8px 0 8px 4px;
+  border: 1px solid #999;
+  background-color: #eef;
+}
+#navcolumn {
+  padding: 6px 4px 0 6px;
+}
+#navcolumn h5 {
+  font-size: 12px;
+  border-bottom: 1px solid #aaaaaa;
+  padding-top: 2px;
+  font-weight: normal;
+}
+#navcolumn li {
+  font-size: 12px;
+  padding-left: 12px;
+  background-color: #eef;
+}
+#navcolumn a:active, #navcolumn a:hover {
+  text-decoration: none;
+}
+#lastPublished {
+  font-size: 10px;
+}
+table.bodyTable th {
+  color: white;
+  background-color: #bbb;
+  text-align: left;
+  font-weight: bold;
+  font-size: 13px;
+}
+
+table.bodyTable th, table.bodyTable td {
+  font-size: 13px;
+}
+
+table.bodyTable tr.a {
+  background-color: #ddd;
+}
+
+table.bodyTable tr.b {
+  background-color: #eee;
+}
+
+.source {
+  border: 1px solid #999;
+  padding: 8px;
+  margin: 6px;
+}
+#footer {
+  background-color: #eef;
+  border-top: 1px solid #999;
+}
+body {
+  padding-bottom: 0px;
+}
diff --git a/JodaTime/src/site/navigation.xml b/JodaTime/src/site/site.xml
similarity index 79%
rename from JodaTime/src/site/navigation.xml
rename to JodaTime/src/site/site.xml
index 8221e1f54..e175f2822 100644
--- a/JodaTime/src/site/navigation.xml
+++ b/JodaTime/src/site/site.xml
@@ -2,8 +2,22 @@
 
 <project name="Joda Time">
 
-  <title>Joda Time</title>
-  <organizationLogo href="">Joda.org</organizationLogo>
+  <bannerLeft>
+    <name>Joda.org</name>
+    <src>images/joda.png</src>
+    <href>http://joda-time.sourceforge.net/</href>
+  </bannerLeft>
+  <bannerRight>
+    <name>Joda-Time</name>
+    <src>images/jodatime.png</src>
+    <href>http://joda-time.sourceforge.net/</href>
+  </bannerRight>
+
+  <poweredBy>
+    <logo name="Joda-Time, hosted at Sourceforge" href="http://sourceforge.net"
+          img="http://sourceforge.net/sflogo.php?group_id=97367&amp;type=2"/>
+  </poweredBy>
+  <publishDate position="navigation-bottom" format="yyyy-MM-dd"/>
 
   <body>
     <links>
@@ -54,16 +68,24 @@
       <item name="Javadoc (Development)" href="/apidocs/index.html"/>
     </menu>
     
+    <menu ref="reports"/>
+    
     <menu name="Joda">
       <item name="Joda home" href="http://joda.sourceforge.net"/>
       <item name="Beans" href="http://joda.sourceforge.net/beans.html"/>
       <item name="Primitives" href="http://joda-primitives.sourceforge.net/index.html"/>
     </menu>
     
-    <footer>
+    <!--footer>
       <a href="http://sourceforge.net">
         <img src="http://sourceforge.net/sflogo.php?group_id=97367&amp;type=2" width="125" height="37" border="0" alt="SourceForge.net Logo" />
       </a>
-    </footer>
+    </footer-->
   </body>
+
+  <skin>
+    <groupId>org.apache.maven.skins</groupId>
+    <artifactId>maven-classic-skin</artifactId>
+  </skin>
+
 </project>

From 08dac4fd6c633fa458fcf8800231ac76857097eb Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 28 Oct 2007 23:57:53 +0000
Subject: [PATCH 099/112] Maven 2

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1269 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/site/resources/images/joda.png     | Bin 0 -> 2919 bytes
 JodaTime/src/site/resources/images/jodatime.png | Bin 0 -> 2850 bytes
 2 files changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 JodaTime/src/site/resources/images/joda.png
 create mode 100644 JodaTime/src/site/resources/images/jodatime.png

diff --git a/JodaTime/src/site/resources/images/joda.png b/JodaTime/src/site/resources/images/joda.png
new file mode 100644
index 0000000000000000000000000000000000000000..435df26a39732551d2f7ed9b1fdf288be1c83875
GIT binary patch
literal 2919
zcmY*bc{EgSAHT9>C)v0BESbp~S(CBGl$e?^_B~6ojwNKGWSNNUMkJ&mhRl>=EM>`7
zw&BN^Y$4f83=+Nf?T`1I_n!0I=bn4c{XEZozMtibLs(nzaEfyR0KfycG`j}QVc>wU
z9|P|ue%BJgi6g|);lD4L{tg?3&VRv&<Kgft=Eterg8UphIyI<i0N`SSn;D~`iq;(h
zt&rmqaY478CQY0sFSAysyvuRKb8CC3E1D8gl&uN|0<L~w7;mSh;`{CMyf15?_PMm@
zev$O4Gq6zXT!PpL?{n*rgh-9p#P4OVI2kQDc_X{@BUsVG*O+LrAHje6<CZt6%X)2L
z8)0{r^ai5`pu#vanIuU3j*Z0kI&&+U-#^a-UhyNf9aEqZDxEnGg+2Q&a-H=qPb?q}
zx0mHik$r6(9SfaRXPTqQ!+x<OVM*8>gY)N|RP*g@ZEu__R6M^2V~;&6|M-)S2L9Mx
zz?feiZs@?}teW3@okU-cq+H-<H=w=$W87J0{J(XS&kU%hZES30E80xI4fVocvbsE>
zxqT}uD<l%Bv(t=?x`-(@#Qyq-*W{BnnEkn5QBiT6SF&JJjOtlm1dD5Z{W>Bb;A4Px
zSfg{rHHWKL>%*1?($dnpM18a$(<dhfiq8|qS6f`wjQJH56mIWsU^g0<AnEk=)|efC
zCnt&Y`J3alDr#!Metw856dVqxM6T<{?y0BG-!+>3@KB;VU21iGy({#0mxx;pk?8U!
z$OVa{c6PF4bXOCJwr6rb4q6D`9T~Z%n$HE$XteqHdDP+d_BK7ZO+}E?ckl&?gz@u(
zNb({Va5$U`CGtm<fqvjrQ^fxMz5tE|&<^@MF*cUiqZ2$`Q&ZC!`nBCl6pcpzOQ%y_
zzAr^olF4C*zjnwxP7MJLrlzJc{6<#QV~%cae1Nm64!G@^R&0u}h=`r5Yx>u{PdYQ5
zU0uV+GcQ%_?CjXU4$lE8W@T=7_PrZ;{^XJlb~j6q==(a;QC{KUf@iUY;Kv670s@GW
z>GRjBat4>E`#B`(jHRJcQ$G#Sq!TQed3mP=aF9^&<iCaJ3ah`RP;Pf5@%$9aD=eIx
znCL;|ee&UAImVlupxfKq+nsT0_u#O&xcJA9AC+Jkab~jh_Gx>5`ahuud!dZJTqXb4
zF)=aX0J_c<`)hl-zP`S;w)UZfPMNpvZN}PIwVkhz4=_7YaasJ~hxJHiqdRw69f{g_
zt6Q7X*rnoI5DL_p5=m@po7vp`x&NEbaL+v?1W`9$je4Qt)BqUC3!D{y$d=$?*b$&j
zuWLK{b+FmS43rGc)O%S32XB7=9^&OSPx9^u++$;#D=HQl>-23`d3cP0^gWsB+nX)r
z78x6#8_Ca}bp~k1?Tp#^ak3Z}>4vt?g@|$|ef{bq**zTowae>ZZDWd(N##gvPfzD<
zo5@(&oTAtv5br$efv3&QvF`3N0=U?{xnz(_z@vhKC=k<KJ*9`4nc3-0ka^w^Hqy`U
z+Zv5LgWa9#>0$R|J9f9JNx$=RE0%(;E*_jr6;Ug*?DMRTT$?Z!Tl*1ZU96udtf8m3
zPql$n94G_w^75mjqeIC}(LYZYmK(`TkbU`VVOm-d-)D_SS2+%9#{66E95#)wvc`|Q
z-VR)!d~F#6^z`&Vl$1>M84QLa5e<lniG}J)0tggpdlYGNl?hdaIwQz=(H_*7gM$O*
z)+SgO*Vq0+@GSk}jnOKkU9Gc2S|HykLrF<VmUtm0bo1}6{{DP5Lei)HetL7XCaJBi
zPEC}1<oxqz&rr6uS7BJg5^I8Km|$vGZf-6r+eoIeveJGct@|SnHyg7z+S;1e%Yr~4
zlo$5)!U<G8P0jg8%J8BJ6bhH&AL?Z>?(FU^=NR%hCvJOYERjp(ocO~oPlsn7(iz>J
z^-%`Wz#~ifoEmnM(vYqPLI6K+GKdwZEg@vj6yH7HyNFrwg$RP4Q<*le+k*S#Q~r(w
zNF!;>%QsdEm2xjFGnnG-m7n_?NN4mfaweMOToFwg?v>3<nIi*3las&pmr8bbcad69
zC^XX&WCJshKA)yGz`>i`Vc+%kt?o(>4_iXe8;J@9!ICG?qz;dg!Q?&=;-nCFhbXN*
zz(9bf@bTlYu&|12H-ds{`xhObN*MEx<_~2bYZ>!@{p;`!3iRH~dCH}0A-a+|jVK<>
zSx!e{Lt~>@?+XM3G{0AlL~BC%HCgElo!e*mCjzt;ng*A`^ozIAb>lb5Gz7kXu?+d-
zn5hGAvRrmALQjyh^ktG!*1}Ay)rB&U0aBu(AaYF0lPwKEU6lJ9!CBSfo~m1Gkw7(p
zkX+B*(a{0%wY+jgD77m<+v#-nKPnqDZ8jw;@GKv)SSHl(oVXw)41-CRz7Vs}lll91
z>_u6FQ(wM(xvqgnonZwiQ?=CPZ$u;#>E-1GyqgQj%F2SweU&()r6rVmLE6T~hHq@)
z=YA7~BGRyM!dr-wRi8?D{(RJ5Ys-v?zIjf(V@@4-Mj*&#@N*_cM@ReBRiR$Mj`o-<
zP6I<!YB{=EQBjd;Hc`aYo^+i9sBs{(ty9k5+TiBqMl1{r41nTJo!b&l_4fDY1oBi}
zE?qgA>qsVRs<h3(baf}D|6VgQ8TTSE7>tk4>6J2cb)8#VdQWzCwuqYR+RBPaQG2_|
zMQ6`T9iCu1`IcaXfg<ar4A@cB>c1)gJ6l5B(f(4VoP{u&ky+F4S&yJIRVZs|X|Wh1
zgu&REUfq%13T`{h%gakzF_#^tY_`%zMn;B)9^vu0JPU|mLqkJZz}n>No2;y?Dax6a
z({X<eLBW(5L}Nfd573qvLps<Yktg*}naK`|xW&$e>+`Ugy0}Og^QXYQT~22&gDzaT
zwKMM47Wc>S(lf)OJug(R4;dttgoMOkksf&V2@Iapu1V0*z&Mgy?He3?LkkEu27d#0
zQW2q)<N*fGW9`7nmmbU!i+8(b-ZM65U^8<sBUaJby=IDW+rt*yC*$j9!Kgr2=gP)y
z^(ywniP<-WLm%AAAxTL|B_<|T=Jqc>Fq0MJROdFm>Fn$ryT7%#pJUF|h&^EF@i501
z6%~Ol*y(Ifvy?9zUv-OFR`|ev>~4JDpm22!b-AXpvH<I$rlL|@Q1G;kStj<+;jWTh
z?ezd9oY~0e==C@BWvjaJ1DbEiaF_^hG8uIGj$}SxZ|~t;P+?&9mTNN2;(eb~5sBsx
z>YN+5z*u!L0@u>e*N>Tf$Mk_?U@qiAYHHOut_yNGYhhwy;&E^*PLj7n9dE^0%y(n#
z?5NZz3*%R-mcd*J3=9PGc`n4h3Kc|eAXZkUG;yiBYv3p8bS-h7zN05#(fj)P!1jUG
z&kSI(SQQnO^73*H4vueZ%b3QE>6X<<3dg;kzCM#=K6sWRk<p&WmC|^F`aF={z`=5F
zc=)Pdpr)p#5U05e|Jz%e()u|InEgVno8R;j2A3$<gN92L;?mMj@OUsBpddIDTDnO#
zlKDRSKB2VqAHdSeN*Mwv2<vA{Fm7>$85n$A#E{8kkhH;5O}Y8`#{tj!y`_>kRaI4=
zaJ&;ulwVo6f7~rjik)SIO0}zVbwMEFKPw1wf+a2Gk<YYz<+%RBwz{C$mlDb?7_KiR
zbbS${CsZ7$?GzEA1-Ogmfjh}sSZlSJT|970yMO;aD2i=Y4|P#j?2c`s$qAfU+C{mh
zke^Y_FJ7F<;X3;RwsZH7&LjEgrGa9w^m-B9q0KK}hP38?u`fE5Fq1t&nL6s=gZ<v7
z+Q`Yt38%7lyxiN{D=RCrbB$gkzL_q2vLN=iyF8-&e|s4RJf;x@X*Ewdz$O`hn_HXJ
Inz-Nl59h<Bq5uE@

literal 0
HcmV?d00001

diff --git a/JodaTime/src/site/resources/images/jodatime.png b/JodaTime/src/site/resources/images/jodatime.png
new file mode 100644
index 0000000000000000000000000000000000000000..4d5d609868c392a2871e8f15100f4ba54b7e92b6
GIT binary patch
literal 2850
zcmai$c{Ei28^^DVeMuoZ6GADZX}&_k*dh$3F_xskSY|?&2rZUx$d)V_YZwwqizRC)
z2GJN|EJNZuA|~rlWc%Ik@9*C^zkAN}JolV?&b^<{b6?N<{YkJzT@vD#<_7>k$imzN
z4b}uO)OZhp*_0ba2Mb?-xl=G$IsO|qCpt&K8=hMh)}}l|f?^`V0uC{)PXU1cgM|qa
z6PCZ^>|`Z+O$Kq!FXzjbL*gefr_U%sAI3z9NSJh{nAG}<48sy*e3UO|3V2MqTe)b!
zx@eLqE>JTI7jmbht&$qi)(&$1^ph9n<6?x9brZK*lh}8(v#?eFcpsF~V#9a(gQvo2
z;r;7Rk;!F*>FBG64kq}*rp4s_CMEt~_&Uhs>xK}0e0TxF^irc@$q$%_h=|_a-lA)^
zw(axmNCPh?Cnp;l8cl0P=H}NX`q&unzTwJ!uG%E1MLKPsy}c{0j%{H4+6nvhQ|dsy
zsj10Kc`jM%+?D~)R@cXm9}R|^uSfN<x^P<UAs#U4OQBg~zHmvY{_G<O3DtYYr)8{F
zh7=aRYPNg&?YF%l(q9Y@V>Z~omL{yNtpPwjwcf3RTSe5rI505KGV3%4psb>@U!S8J
zl}9{>W|>uBoKGLysCoVRFp<e*UU6~xj5qQV<EOlIs)4$h9Nm&jE`?(&>#D1(!G%44
z-t7wyZk#MFE&bj{;^F2NR;{nC&CJSb4QF%zyM1&89zoIitl?{KZyy=ihOMLo>Vp>o
zaeutp)791Wo6SimG-^Aen~D6J;?Bjxb9lb({+@KADygsgk(@vQnEp0%b)6a*7@#Cc
z6e8{s;d!3g<7L));H#-#>YAEuA*`$qxK%dW(%PEZ-`}-%lZeZsV(slim|ZEYtq35>
zTsilgcR$%QY0P*2XhVcyv4*FYm-gPu)cd~PUVZ@qQT|v6GC)UGgCrv>s~@sBytqhg
zhB~}*Nk~cAWV4yzBjIiuO%o3P)gH~MR@vW=>Vf50adC0Exw#<_2ncdo=Ml5PRxR`L
zv+(e6m5fi%X4!1E+wSx<F8+bv#JdEF`&-ABh)v?GSR`d{=eIXC_r$RzH=cX<?p;Bn
zb#-+U6BA3(CrN$Z19bG|ZB9Lr*AIIvHG<a`7Z*=cUSKjgn?KL9J++<u{g<bwi)wtM
zsis<WNL0orSmgfQ7--y$RJUvwjn}VVUz%kw7-v1YpfQF}5nf1Wa7#^%X!^nSyaL8b
z0CFf@dC+-gEzHx?Q{zM-i4<SEjffuC%cPfDWH_GAGFLWY9qwM++6s#{Z1<`$RXpOJ
zXhN3IbS>iD`MnZ<4*~=<y5R5Jxg#MiexWZEKSE6qRRw#qK`YSv-IXHqd-?0cTMr&a
zE*gziON^O~6_8LIe<XjAF*WrHT@ku6Ma5uB1_xl)c9^g*osE~*nz7H&?;{WP_xE<x
z;`8%mN$CeOO-P8>iY->>k%I0m^D1mx#O5gt4dG2AsK{hX_?0Sb;l(@0(oz)+g!3vf
zrwj}Xeqc^L@$>UrT3Y&1%Vcj;sZ`+%DGooi#KeaWqx#Fs%a@n^YsP)+oHrx(rrzHv
zE~L2IW3gXgRimuIb?3JG??2#*2n??pAt51<3gOYYHD<SWe?Ca3<?Y+`RId^OgIMR~
z>4|i9cPCqZIw*tJc+<@I6cBeMw{NdZ`N8uDxo~L^wAO*faJJXjUDim|fauYq>kC7w
zV*>A84T9&ah9}*$m23s{BllaXs)QKLp-cRNf)Dy)Y4Z{i5(;{uzBpVIxm?}h)#tpw
zR>1G8Wbmbf_$@3g2?6a|$=%E|*P3d{<QOTbjyDe;JZNapsTogZHhjPh_`txqvMEHw
zLTYDxV7WujZ6;1+<>cf%e!RLPXVTNtW5{Ru3_VNh?Twk>Mv4SAwiFk0062Kw%#hyg
zWkaQl7Ym>dHLtg}^AZRI@c(fF?UC`!(K@8);?hKY56arwGs|&mYAP))EhHoah|0=3
z21J>aAZ?VClyW#!t+H_vvK?BLbjILd;LOKZ5WY*P@`O5P!H(?LQ9l+J8TB^{3$7@p
zjS-9w%3+rv@m4ujalW@^0bn-hLbY9ZoMKDlfxI+H<62WVTg9EsI+Hsd8t@_oTS;HI
z1*X2fr0`oxMI73af;|avZ08aF*ntt&=Jdo4oSn_}ZG<{dMgV0ff|`3?I)yvS+oLO4
z>S9FgppUP=KlgRb69%a>WL+g4d{CoHd~vp}kgA}tuu;dW>eco2nD2*^C_&lDSNtwt
zzKnXRUoq%IE-5M0504?2RLbh^o;b=!q<{IM9lnm=$RMl1ZWtLE0l??0v1TRFDBc2;
zH>sn&y}c=fHI24Jq5404vaqyFdh}?jAy8?U+nOr|YD<rbDx-XhHBsDNo#6y<zkZJ2
z7<sw99fztrE1h!c2|rMTu0TZY|6Ex)4E$JH+S^zVRelf`XQZUBpAY2?OUxvZx;s0e
z<F2iDx0k=_`KYR@asuY*__vN?rW^o~NK8*ppT3eu4gI}*tyxwcad&KRkOKtfWlM|f
zHSR$x6Uo2)CpTH6OZiA7(%=Grq!=F`pRG)8nK(aJi|-fM*MR{;JF(Pm8L(p=;HnZ*
zQ@gd2%NC-eqd}0o@pznM=;oq*Z3?-{<<t{Yj`p*6?~VZhbDwiEGc(7=9EIbD==8ea
zc~nC}iu8H@EH`C~xcK-Er^w~W#tXr7J$UWhvIz#GztG?&$v86d;Gh~`Gt+Njhq-Y>
zUB4ahh@TB=WOk?C4j<bWJ?+}E^=Fd>vmPBD)(>07t<QdfAj|2Cpy<n_nB`c#17-B*
z&!00w1;mW}{L`eqiHQjg0Gy;3<>k1yjy|@aFMb&sI@0*&&6~Qqy88P1wzkN<Kb!oq
zMrvXs!^4IMqzEY3tL5G`<1%1dTJJSe+zCWtFOBA)CWfutWYpbQ_23o_-~-(+iBj!N
zlYfS;7+Sb&X-OxZSJqM&Agy+gr%7k^*FVMzfb{3(<;BOvf$s6-^0T(KgSs1|(^-Z?
zFh;a&XHcA|DoSVf2h4x6AwB)5%8)M{6tkXJ%Q3vXyggJZomltqC7nppye^z%2Pw9F
zxI8<}+UxRxX*j+C>=B@pNXD&g--VqqQA|TU-$6<IT+REPmzc;ui_hBm%)7R>Hjq<T
zn3@mDxUz+?LOzJ$#XG->t~ScGIvCH-&7sBYot!GLl|tN{ac&$O96^nD2g#<Oyx_Gj
z$o7Nh0ApigaOQXCs4`*2YwPRaCM+#2`)D+8`97oK)t)q^<HwJu%3oYuUgieOmD4vi
zHezB9HE41I(|eiFhnzgZ5C{YYhksnWprPT<s3nY#kArIR;JnSvo0@+h>&Bg(op?MR
z0J6V1$R5q6{I$_uj2Bj4KX=xT0ekBxXnfoog%UQk1Kq8vs>-?Q7yx=z*CV;Sr%zi6
zLn_U$$-I(#CG@Y8le_EREelZb%mx$19GyUN2L&=nr_%=pR@a!9k|_TyEy;<Bo^$&M
ziC=+B3W5R^a9hzL=+DN2FMJ2&ewAQi0{LSIl5*9-VRUpfo*9P0VBFmmlPE+2A)3q7
z*7k8tbZGX}Jgtxe@P*6V>kBZC^57{@Q?I}z?uQnQvh4Vz<>XQnYwPPft_*zp_RYUY
zS5J?{Vj0}u<po3%OpY8m@-M+Ef?HC4`de35cMW8I$6os1!8H-w7I<}6;7zqmuJI&B
R4?N!j7N#hZS4Oy){{UxZaMAz(

literal 0
HcmV?d00001


From 605c72152dc7e2d4004d95c709c8f8fd326d0cf4 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 28 Oct 2007 23:58:30 +0000
Subject: [PATCH 100/112] Sources now provided as a jar

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1270 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/installation.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/JodaTime/xdocs/installation.xml b/JodaTime/xdocs/installation.xml
index ba40c8e87..9ca1d8cd7 100644
--- a/JodaTime/xdocs/installation.xml
+++ b/JodaTime/xdocs/installation.xml
@@ -16,7 +16,7 @@ The download will contain the joda-time-1.5.jar.
 Once you add this to your classpath you will be able to use Joda-Time.
 </p>
 <p>
-The binary download also includes joda-time-1.5-src-ide.zip, which is a zip file
+The binary download also includes joda-time-1.5-sources.jar, which is a jar file
 of the source code suitable for linking to the jar file in IDEs such as Eclipse.
 </p>
 <p>

From 526ee26403a81f40c1ff028a0a562bd5cb9405fe Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 28 Oct 2007 23:58:50 +0000
Subject: [PATCH 101/112] Maven 2

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1271 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/pom.xml      | 384 ++++++++++++++++++++++++++++++++++++++++++
 JodaTime/settings.xml |  17 ++
 2 files changed, 401 insertions(+)
 create mode 100644 JodaTime/pom.xml
 create mode 100644 JodaTime/settings.xml

diff --git a/JodaTime/pom.xml b/JodaTime/pom.xml
new file mode 100644
index 000000000..1df203cbc
--- /dev/null
+++ b/JodaTime/pom.xml
@@ -0,0 +1,384 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
+http://maven.apache.org/maven-v4_0_0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+  <groupId>joda-time</groupId>
+  <artifactId>joda-time</artifactId>
+  <name>Joda time</name>
+  <version>1.5</version>
+  <description>Date and time library to replace JDK date handling.</description>
+  <url>http://joda-time.sourceforge.net</url>
+
+  <issueManagement>
+    <system>Sourceforge</system>
+    <url>http://sourceforge.net/tracker/?atid=617889&amp;group_id=97367&amp;func=browse</url>
+  </issueManagement>
+  <inceptionYear>2002</inceptionYear>
+
+  <mailingLists>
+    <mailingList>
+      <name>Joda Interest list</name>
+      <subscribe>https://lists.sourceforge.net/lists/listinfo/joda-interest</subscribe>
+      <unsubscribe>https://lists.sourceforge.net/lists/listinfo/joda-interest</unsubscribe>
+      <archive>http://sourceforge.net/mailarchive/forum.php?forum_name=joda-interest</archive>
+    </mailingList>
+  </mailingLists>
+
+  <developers>
+    <developer>
+      <id>scolebourne</id>
+      <name>Stephen Colebourne</name>
+      <email>scolebourne@joda.org</email>
+      <organization></organization>
+      <roles>
+        <role>Project Lead</role>
+      </roles>
+    </developer>
+    <developer>
+      <id>broneill</id>
+      <name>Brian S O'Neill</name>
+      <email>broneill@users.sourceforge.net</email>
+      <organization></organization>
+      <roles>
+        <role>Senior Developer</role>
+      </roles>
+    </developer>
+  </developers>
+
+  <contributors>
+    <contributor>
+      <name>Guy Allard</name>
+    </contributor>
+    <contributor>
+      <name>Blair Martin</name>
+    </contributor>
+    <contributor>
+      <name>Fredrik Borgh</name>
+    </contributor>
+    <contributor>
+      <name>Jeroen van Erp</name>
+    </contributor>
+    <contributor>
+      <name>Gwyn Evans</name>
+    </contributor>
+    <contributor>
+      <name>Sean Geoghegan</name>
+    </contributor>
+    <contributor>
+      <name>Ashish Katyal</name>
+    </contributor>
+    <contributor>
+      <name>Antonio Leitao</name>
+    </contributor>
+    <contributor>
+      <name>Kostas Maistrelis</name>
+    </contributor>
+    <contributor>
+      <name>Al Major</name>
+    </contributor>
+    <contributor>
+      <name>Julen Parra</name>
+    </contributor>
+    <contributor>
+      <name>Mike Schrag</name>
+    </contributor>
+    <contributor>
+      <name>Kandarp Shah</name>
+    </contributor>
+    <contributor>
+      <name>Francois Staes</name>
+    </contributor>
+    <contributor>
+      <name>Maxim Zhao</name>
+    </contributor>
+    <contributor>
+      <name>Ryan Propper</name>
+    </contributor>
+  </contributors>
+
+  <licenses>
+    <license>
+      <name>Apache License, Version 2.0</name>
+      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
+      <distribution>repo</distribution>
+    </license>
+  </licenses>
+
+  <scm>
+    <connection>scm:svn:https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk/JodaTime/</connection>
+    <url>http://joda-time.svn.sourceforge.net/viewvc/joda-time/trunk/JodaTime/</url>
+  </scm>
+
+  <organization>
+    <name>Joda.org</name>
+    <url>http://www.joda.org</url>
+  </organization>
+
+  <build>
+    <defaultGoal>package</defaultGoal>
+
+    <sourceDirectory>src/java</sourceDirectory>
+    <testSourceDirectory>src/test</testSourceDirectory>
+    <resources>
+      <resource>
+        <directory>${basedir}/target/classes</directory>
+        <includes>
+          <include>org/joda/time/tz/data/**</include>
+        </includes>
+      </resource>
+      <resource>
+        <targetPath>META-INF</targetPath>
+        <directory>.</directory>
+        <includes>
+          <include>NOTICE.txt</include>
+          <include>LICENSE.txt</include>
+        </includes>
+      </resource>
+    </resources>
+    <testResources>
+      <testResource>
+        <directory>${basedir}/src/testdata</directory>
+        <includes>
+          <include>*.dat</include>
+        </includes>
+      </testResource>
+    </testResources>
+    <plugins>
+      <plugin>
+        <artifactId>maven-antrun-plugin</artifactId>
+        <configuration>
+          <tasks>
+            <mkdir dir="${build.tz}"/>
+            <java classname="org.joda.time.tz.ZoneInfoCompiler"
+                  fork="true"
+                  failonerror="true">
+              <classpath refid="maven.compile.classpath"/>
+              <!-- Override default provider since data directory doesn't exist yet -->
+              <sysproperty key="org.joda.time.DateTimeZone.Provider"
+                           value="org.joda.time.tz.UTCProvider"/>
+              <!-- Specify source and destination directories -->
+              <arg line="-src ${source.tz} -dst ${build.tz}"/>
+              <!-- Specify all the data files to compile -->
+              <arg value="africa"/>
+              <arg value="antarctica"/>
+              <arg value="asia"/>
+              <arg value="australasia"/>
+              <arg value="europe"/>
+              <arg value="northamerica"/>
+              <arg value="southamerica"/>
+              <arg value="pacificnew"/>
+              <arg value="etcetera"/>
+              <arg value="backward"/>
+              <arg value="systemv"/>
+            </java>
+          </tasks>
+        </configuration>
+        <executions>
+          <execution>
+            <phase>compile</phase>
+            <goals>
+              <goal>run</goal>
+            </goals>
+          </execution>
+        </executions>
+      </plugin>
+
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-compiler-plugin</artifactId>
+        <configuration>
+          <verbose>true</verbose>
+          <fork>true</fork>
+          <executable>${JAVA_1_3_HOME}/bin/javac</executable>
+          <compilerVersion>1.3</compilerVersion>
+        </configuration>
+      </plugin>
+
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-jar-plugin</artifactId>
+        <configuration>
+          <archive>
+            <manifestFile>src/conf/MANIFEST.MF</manifestFile>
+          </archive>
+        </configuration>
+      </plugin>
+
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-source-plugin</artifactId>
+      </plugin>
+
+      <plugin>
+        <artifactId>maven-javadoc-plugin</artifactId>
+        <configuration>
+          <links>
+            <link>http://java.sun.com/products/j2se/1.4/docs/api</link>
+          </links>
+          <overview>src/java/org/joda/time/overview.html</overview>
+          <show>public</show>
+          <groups>
+            <group>
+              <title>User Packages</title>
+              <packages>org.joda.time:org.joda.time.format:org.joda.time.chrono</packages>
+            </group>
+            <group>
+              <title>Implementation Packages</title>
+              <packages>org.joda.time.base:org.joda.time.convert:org.joda.time.field:org.joda.time.tz</packages>
+            </group>
+          </groups>
+        </configuration>
+      </plugin>
+
+      <plugin>
+        <artifactId>maven-surefire-plugin</artifactId>
+        <configuration>
+          <includes>
+            <include>org/joda/time/**/TestAll.java</include>
+          </includes>
+        </configuration>
+      </plugin>
+
+      <plugin>
+        <artifactId>maven-source-plugin</artifactId>
+        <executions>
+          <execution>
+            <id>create-source-jar</id>
+            <goals>
+              <goal>jar</goal>
+            </goals>
+          </execution>
+        </executions>
+      </plugin>
+
+      <plugin>
+        <artifactId>maven-javadoc-plugin</artifactId>
+        <executions>
+          <execution>
+            <id>create-javadoc-jar</id>
+            <goals>
+              <goal>jar</goal>
+            </goals>
+            <configuration>
+              <source>${maven.compile.source}</source>
+            </configuration>
+          </execution>
+        </executions>
+      </plugin>
+
+      <plugin>
+        <artifactId>maven-assembly-plugin</artifactId>
+        <configuration>
+          <descriptorRefs>
+            <descriptorRef>bin</descriptorRef>
+            <descriptorRef>src</descriptorRef>
+          </descriptorRefs>
+        </configuration>
+      </plugin>
+    </plugins>
+
+    <extensions>
+      <extension>
+        <groupId>org.apache.maven.wagon</groupId>
+         <artifactId>wagon-ssh-external</artifactId>
+         <version>1.0-alpha-5</version>
+      </extension>
+    </extensions>
+  </build>
+
+  <dependencies>
+    <dependency>
+      <groupId>org.apache.maven.doxia</groupId>
+      <artifactId>doxia-core</artifactId>
+      <version>1.0-alpha-9</version>
+      <scope>site</scope>
+    </dependency>
+    <dependency>
+      <groupId>junit</groupId>
+      <artifactId>junit</artifactId>
+      <version>3.8.2</version>
+      <scope>test</scope>
+    </dependency>
+  </dependencies>
+
+  <reporting>
+    <plugins>
+      <plugin>
+        <artifactId>maven-site-plugin</artifactId>
+      </plugin>
+      <plugin>
+        <artifactId>maven-project-info-reports-plugin</artifactId>
+        <reportSets>
+          <reportSet>
+            <reports>
+              <report>index</report>
+              <!--report>dependencies</report-->
+              <report>summary</report>
+              <report>project-team</report>
+              <report>mailing-list</report>
+              <report>sourceforge</report>
+              <report>license</report>
+              <report>scm</report>
+            </reports>
+          </reportSet>
+        </reportSets>
+      </plugin>
+      <plugin>
+        <artifactId>maven-changelog-plugin</artifactId>
+      </plugin>
+      <!--plugin>
+        <artifactId>maven-changes-plugin</artifactId>
+        <configuration>
+          <xmlPath>${basedir}/xdocs/changes.xml</xmlPath>
+        </configuration>
+        <reportSets>
+          <reportSet>
+            <reports>
+              <report>changes-report</report>
+            </reports>
+          </reportSet>
+        </reportSets>
+      </plugin-->
+      <!--plugin>
+        <artifactId>maven-checkstyle-plugin</artifactId>
+        <configuration>
+          <configLocation>checkstyle.xml</configLocation>
+        </configuration>
+      </plugin-->
+      <plugin>
+        <artifactId>maven-javadoc-plugin</artifactId>
+      </plugin>
+      <!--plugin>
+        <artifactId>maven-pmd-plugin</artifactId>
+      </plugin-->
+      <plugin>
+        <artifactId>maven-jxr-plugin</artifactId>
+      </plugin>
+      <plugin>
+        <artifactId>maven-surefire-report-plugin</artifactId>
+      </plugin>
+    </plugins>
+  </reporting>
+
+  <distributionManagement>
+    <repository>
+      <id>ssh-repository</id>
+      <name>Sourceforge Repository</name>
+      <url>scp://shell.sourceforge.net/home/groups/j/jo/joda-time/htdocs/</url>
+    </repository>
+    <site>
+      <id>ssh-repository</id>
+      <name>Sourceforge Site</name>
+      <url>scp://shell.sourceforge.net/home/groups/j/jo/joda-time/htdocs/</url>
+    </site>
+  </distributionManagement>
+
+  <properties>
+    <JAVA_1_3_HOME>/java/jdk1.3.1</JAVA_1_3_HOME>
+    <source.tz>${basedir}/src/java/org/joda/time/tz/src</source.tz>
+    <build.tz>${basedir}/target/classes/org/joda/time/tz/data</build.tz>
+  </properties>
+
+</project>
\ No newline at end of file
diff --git a/JodaTime/settings.xml b/JodaTime/settings.xml
new file mode 100644
index 000000000..2940c150d
--- /dev/null
+++ b/JodaTime/settings.xml
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<settings>
+  <servers>
+    <server>
+      <id>ssh-repository</id>
+      <username>scolebourne</username>
+      <!--privateKey>/path/to/your/private/key</privateKey-->
+      <filePermissions>664</filePermissions>
+      <directoryPermissions>775</directoryPermissions>
+      <configuration>
+        <sshExecutable>plink</sshExecutable>
+        <scpExecutable>pscp</scpExecutable>
+        <!--sshArgs>other arguments you may need</sshArgs-->
+      </configuration>
+    </server>
+  </servers>
+</settings>
\ No newline at end of file

From 1209751a7a5f2c1d58fc7c95631468648911ff5e Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 29 Oct 2007 00:00:21 +0000
Subject: [PATCH 102/112] Enable compilation on JDK 1.3

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1272 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../joda/time/tz/TestFixedDateTimeZone.java   | 20 +++++++++++++++----
 1 file changed, 16 insertions(+), 4 deletions(-)

diff --git a/JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java b/JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java
index 2447cc357..da2c414ee 100644
--- a/JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java
+++ b/JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java
@@ -15,6 +15,9 @@
  */
 package org.joda.time.tz;
 
+import java.util.Date;
+import java.util.TimeZone;
+
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
 
@@ -83,8 +86,8 @@ public void testToTimeZone1() throws Exception {
         java.util.TimeZone tz = zone.toTimeZone();
         
         assertEquals(60000, tz.getRawOffset());
-        assertEquals(60000, tz.getOffset(1167638400000L));
-        assertEquals(60000, tz.getOffset(1185951600000L));
+        assertEquals(60000, getOffset(tz, 1167638400000L));
+        assertEquals(60000, getOffset(tz, 1185951600000L));
     }
 
     public void testToTimeZone2() throws Exception {
@@ -92,8 +95,17 @@ public void testToTimeZone2() throws Exception {
         java.util.TimeZone tz = zone.toTimeZone();
         
         assertEquals(1, tz.getRawOffset());
-        assertEquals(1, tz.getOffset(1167638400000L));
-        assertEquals(1, tz.getOffset(1185951600000L));
+        assertEquals(1, getOffset(tz, 1167638400000L));
+        assertEquals(1, getOffset(tz, 1185951600000L));
+    }
+
+    /** Make test compile on JDK 1.3. */
+    private int getOffset(TimeZone zone, long millis) {
+        Date date = new Date(millis);
+        if (zone.inDaylightTime(date)) {
+            return zone.getRawOffset() + 3600000;
+        }
+        return zone.getRawOffset();
     }
 
 }

From 6f386bb7da510f764aac953550ad22d03b59a157 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 29 Oct 2007 00:02:21 +0000
Subject: [PATCH 103/112] Abandon Maven 2

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1273 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/site/resources/css/site.css      | 130 ------------------
 JodaTime/src/site/resources/images/joda.png   | Bin 2919 -> 0 bytes
 .../src/site/resources/images/jodatime.png    | Bin 2850 -> 0 bytes
 3 files changed, 130 deletions(-)
 delete mode 100644 JodaTime/src/site/resources/css/site.css
 delete mode 100644 JodaTime/src/site/resources/images/joda.png
 delete mode 100644 JodaTime/src/site/resources/images/jodatime.png

diff --git a/JodaTime/src/site/resources/css/site.css b/JodaTime/src/site/resources/css/site.css
deleted file mode 100644
index ca48bea20..000000000
--- a/JodaTime/src/site/resources/css/site.css
+++ /dev/null
@@ -1,130 +0,0 @@
-body, td, select, input, li{
-  font-family: Helvetica, Arial, sans-serif;
-  font-size: 13px;
-  background-color: #fff;
-}
-a {
-  color:#009;
-  text-decoration: none;
-}
-a:active, a:hover, #leftColumn a:active, #leftColumn a:hover, a:active, a:hover, #leftColumn a:active, #leftColumn a:hover, a:link, 
-
-#breadcrumbs a:visited, #navcolumn a:visited, .contentBox a:visited, .tasknav a:visited {
-  color:#009;
-}
-a:active, a:hover, #leftColumn a:active, #leftColumn a:hover, #leftColumn ul li strong {
-  color:#009 !important;
-}
-a:active, a:hover {
-  text-decoration: underline !important;
-}
-a.externalLink, a.externalLink:link, a.externalLink:visited, a.externalLink:active, a.externalLink:hover {
-  background: url(../images/external.png) right center no-repeat;
-  padding-right: 15px;
-}
-a.newWindow, a.newWindow:link, a.newWindow:visited, a.newWindow:active, a.newWindow:hover {
-  background: url(../images/newwindow.png) right center no-repeat;
-  padding-right: 18px;
-}
-.source a {
-  color:black !important;
-}
-h2 {
-  font-family: Verdana, Helvetica, Arial, sans-serif;
-  padding: 4px 4px 4px 6px;
-  border: 1px solid #999;
-  color: #006;
-  background-color: #eef;
-  font-weight:bold;
-  font-size: 16px;
-  margin-top: 4px;
-  margin-bottom: 6px;
-}
-h3 {
-  padding: 4px 4px 4px 6px;
-  border: 1px solid #aaa;
-  color: #006;
-  background-color: #eee;
-  font-weight: normal;
-  font-size: 14px;
-  margin-top: 4px;
-  margin-bottom: 6px;
-}
-p, ul {
-  font-size: 13px;
-  margin-top: 4px;
-  margin-bottom: 6px;
-}
-div#banner {
-  background-color: #eef;
-  border-top: 0px solid #aaa;
-  border-bottom: 1px solid #aaa;
-}
-#bannerLeft img, #bannerRight img {
-  border: 1px solid #999;
-  margin: 8px;
-}
-#breadcrumbs {
-  padding-top: 1px;
-  padding-bottom: 2px;
-  border-top: 0px solid #aaa;
-  border-bottom: 1px solid #aaa;
-  background-color: #ddf;
-}
-#leftColumn {
-  margin: 8px 0 8px 4px;
-  border: 1px solid #999;
-  background-color: #eef;
-}
-#navcolumn {
-  padding: 6px 4px 0 6px;
-}
-#navcolumn h5 {
-  font-size: 12px;
-  border-bottom: 1px solid #aaaaaa;
-  padding-top: 2px;
-  font-weight: normal;
-}
-#navcolumn li {
-  font-size: 12px;
-  padding-left: 12px;
-  background-color: #eef;
-}
-#navcolumn a:active, #navcolumn a:hover {
-  text-decoration: none;
-}
-#lastPublished {
-  font-size: 10px;
-}
-table.bodyTable th {
-  color: white;
-  background-color: #bbb;
-  text-align: left;
-  font-weight: bold;
-  font-size: 13px;
-}
-
-table.bodyTable th, table.bodyTable td {
-  font-size: 13px;
-}
-
-table.bodyTable tr.a {
-  background-color: #ddd;
-}
-
-table.bodyTable tr.b {
-  background-color: #eee;
-}
-
-.source {
-  border: 1px solid #999;
-  padding: 8px;
-  margin: 6px;
-}
-#footer {
-  background-color: #eef;
-  border-top: 1px solid #999;
-}
-body {
-  padding-bottom: 0px;
-}
diff --git a/JodaTime/src/site/resources/images/joda.png b/JodaTime/src/site/resources/images/joda.png
deleted file mode 100644
index 435df26a39732551d2f7ed9b1fdf288be1c83875..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 2919
zcmY*bc{EgSAHT9>C)v0BESbp~S(CBGl$e?^_B~6ojwNKGWSNNUMkJ&mhRl>=EM>`7
zw&BN^Y$4f83=+Nf?T`1I_n!0I=bn4c{XEZozMtibLs(nzaEfyR0KfycG`j}QVc>wU
z9|P|ue%BJgi6g|);lD4L{tg?3&VRv&<Kgft=Eterg8UphIyI<i0N`SSn;D~`iq;(h
zt&rmqaY478CQY0sFSAysyvuRKb8CC3E1D8gl&uN|0<L~w7;mSh;`{CMyf15?_PMm@
zev$O4Gq6zXT!PpL?{n*rgh-9p#P4OVI2kQDc_X{@BUsVG*O+LrAHje6<CZt6%X)2L
z8)0{r^ai5`pu#vanIuU3j*Z0kI&&+U-#^a-UhyNf9aEqZDxEnGg+2Q&a-H=qPb?q}
zx0mHik$r6(9SfaRXPTqQ!+x<OVM*8>gY)N|RP*g@ZEu__R6M^2V~;&6|M-)S2L9Mx
zz?feiZs@?}teW3@okU-cq+H-<H=w=$W87J0{J(XS&kU%hZES30E80xI4fVocvbsE>
zxqT}uD<l%Bv(t=?x`-(@#Qyq-*W{BnnEkn5QBiT6SF&JJjOtlm1dD5Z{W>Bb;A4Px
zSfg{rHHWKL>%*1?($dnpM18a$(<dhfiq8|qS6f`wjQJH56mIWsU^g0<AnEk=)|efC
zCnt&Y`J3alDr#!Metw856dVqxM6T<{?y0BG-!+>3@KB;VU21iGy({#0mxx;pk?8U!
z$OVa{c6PF4bXOCJwr6rb4q6D`9T~Z%n$HE$XteqHdDP+d_BK7ZO+}E?ckl&?gz@u(
zNb({Va5$U`CGtm<fqvjrQ^fxMz5tE|&<^@MF*cUiqZ2$`Q&ZC!`nBCl6pcpzOQ%y_
zzAr^olF4C*zjnwxP7MJLrlzJc{6<#QV~%cae1Nm64!G@^R&0u}h=`r5Yx>u{PdYQ5
zU0uV+GcQ%_?CjXU4$lE8W@T=7_PrZ;{^XJlb~j6q==(a;QC{KUf@iUY;Kv670s@GW
z>GRjBat4>E`#B`(jHRJcQ$G#Sq!TQed3mP=aF9^&<iCaJ3ah`RP;Pf5@%$9aD=eIx
znCL;|ee&UAImVlupxfKq+nsT0_u#O&xcJA9AC+Jkab~jh_Gx>5`ahuud!dZJTqXb4
zF)=aX0J_c<`)hl-zP`S;w)UZfPMNpvZN}PIwVkhz4=_7YaasJ~hxJHiqdRw69f{g_
zt6Q7X*rnoI5DL_p5=m@po7vp`x&NEbaL+v?1W`9$je4Qt)BqUC3!D{y$d=$?*b$&j
zuWLK{b+FmS43rGc)O%S32XB7=9^&OSPx9^u++$;#D=HQl>-23`d3cP0^gWsB+nX)r
z78x6#8_Ca}bp~k1?Tp#^ak3Z}>4vt?g@|$|ef{bq**zTowae>ZZDWd(N##gvPfzD<
zo5@(&oTAtv5br$efv3&QvF`3N0=U?{xnz(_z@vhKC=k<KJ*9`4nc3-0ka^w^Hqy`U
z+Zv5LgWa9#>0$R|J9f9JNx$=RE0%(;E*_jr6;Ug*?DMRTT$?Z!Tl*1ZU96udtf8m3
zPql$n94G_w^75mjqeIC}(LYZYmK(`TkbU`VVOm-d-)D_SS2+%9#{66E95#)wvc`|Q
z-VR)!d~F#6^z`&Vl$1>M84QLa5e<lniG}J)0tggpdlYGNl?hdaIwQz=(H_*7gM$O*
z)+SgO*Vq0+@GSk}jnOKkU9Gc2S|HykLrF<VmUtm0bo1}6{{DP5Lei)HetL7XCaJBi
zPEC}1<oxqz&rr6uS7BJg5^I8Km|$vGZf-6r+eoIeveJGct@|SnHyg7z+S;1e%Yr~4
zlo$5)!U<G8P0jg8%J8BJ6bhH&AL?Z>?(FU^=NR%hCvJOYERjp(ocO~oPlsn7(iz>J
z^-%`Wz#~ifoEmnM(vYqPLI6K+GKdwZEg@vj6yH7HyNFrwg$RP4Q<*le+k*S#Q~r(w
zNF!;>%QsdEm2xjFGnnG-m7n_?NN4mfaweMOToFwg?v>3<nIi*3las&pmr8bbcad69
zC^XX&WCJshKA)yGz`>i`Vc+%kt?o(>4_iXe8;J@9!ICG?qz;dg!Q?&=;-nCFhbXN*
zz(9bf@bTlYu&|12H-ds{`xhObN*MEx<_~2bYZ>!@{p;`!3iRH~dCH}0A-a+|jVK<>
zSx!e{Lt~>@?+XM3G{0AlL~BC%HCgElo!e*mCjzt;ng*A`^ozIAb>lb5Gz7kXu?+d-
zn5hGAvRrmALQjyh^ktG!*1}Ay)rB&U0aBu(AaYF0lPwKEU6lJ9!CBSfo~m1Gkw7(p
zkX+B*(a{0%wY+jgD77m<+v#-nKPnqDZ8jw;@GKv)SSHl(oVXw)41-CRz7Vs}lll91
z>_u6FQ(wM(xvqgnonZwiQ?=CPZ$u;#>E-1GyqgQj%F2SweU&()r6rVmLE6T~hHq@)
z=YA7~BGRyM!dr-wRi8?D{(RJ5Ys-v?zIjf(V@@4-Mj*&#@N*_cM@ReBRiR$Mj`o-<
zP6I<!YB{=EQBjd;Hc`aYo^+i9sBs{(ty9k5+TiBqMl1{r41nTJo!b&l_4fDY1oBi}
zE?qgA>qsVRs<h3(baf}D|6VgQ8TTSE7>tk4>6J2cb)8#VdQWzCwuqYR+RBPaQG2_|
zMQ6`T9iCu1`IcaXfg<ar4A@cB>c1)gJ6l5B(f(4VoP{u&ky+F4S&yJIRVZs|X|Wh1
zgu&REUfq%13T`{h%gakzF_#^tY_`%zMn;B)9^vu0JPU|mLqkJZz}n>No2;y?Dax6a
z({X<eLBW(5L}Nfd573qvLps<Yktg*}naK`|xW&$e>+`Ugy0}Og^QXYQT~22&gDzaT
zwKMM47Wc>S(lf)OJug(R4;dttgoMOkksf&V2@Iapu1V0*z&Mgy?He3?LkkEu27d#0
zQW2q)<N*fGW9`7nmmbU!i+8(b-ZM65U^8<sBUaJby=IDW+rt*yC*$j9!Kgr2=gP)y
z^(ywniP<-WLm%AAAxTL|B_<|T=Jqc>Fq0MJROdFm>Fn$ryT7%#pJUF|h&^EF@i501
z6%~Ol*y(Ifvy?9zUv-OFR`|ev>~4JDpm22!b-AXpvH<I$rlL|@Q1G;kStj<+;jWTh
z?ezd9oY~0e==C@BWvjaJ1DbEiaF_^hG8uIGj$}SxZ|~t;P+?&9mTNN2;(eb~5sBsx
z>YN+5z*u!L0@u>e*N>Tf$Mk_?U@qiAYHHOut_yNGYhhwy;&E^*PLj7n9dE^0%y(n#
z?5NZz3*%R-mcd*J3=9PGc`n4h3Kc|eAXZkUG;yiBYv3p8bS-h7zN05#(fj)P!1jUG
z&kSI(SQQnO^73*H4vueZ%b3QE>6X<<3dg;kzCM#=K6sWRk<p&WmC|^F`aF={z`=5F
zc=)Pdpr)p#5U05e|Jz%e()u|InEgVno8R;j2A3$<gN92L;?mMj@OUsBpddIDTDnO#
zlKDRSKB2VqAHdSeN*Mwv2<vA{Fm7>$85n$A#E{8kkhH;5O}Y8`#{tj!y`_>kRaI4=
zaJ&;ulwVo6f7~rjik)SIO0}zVbwMEFKPw1wf+a2Gk<YYz<+%RBwz{C$mlDb?7_KiR
zbbS${CsZ7$?GzEA1-Ogmfjh}sSZlSJT|970yMO;aD2i=Y4|P#j?2c`s$qAfU+C{mh
zke^Y_FJ7F<;X3;RwsZH7&LjEgrGa9w^m-B9q0KK}hP38?u`fE5Fq1t&nL6s=gZ<v7
z+Q`Yt38%7lyxiN{D=RCrbB$gkzL_q2vLN=iyF8-&e|s4RJf;x@X*Ewdz$O`hn_HXJ
Inz-Nl59h<Bq5uE@

diff --git a/JodaTime/src/site/resources/images/jodatime.png b/JodaTime/src/site/resources/images/jodatime.png
deleted file mode 100644
index 4d5d609868c392a2871e8f15100f4ba54b7e92b6..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 2850
zcmai$c{Ei28^^DVeMuoZ6GADZX}&_k*dh$3F_xskSY|?&2rZUx$d)V_YZwwqizRC)
z2GJN|EJNZuA|~rlWc%Ik@9*C^zkAN}JolV?&b^<{b6?N<{YkJzT@vD#<_7>k$imzN
z4b}uO)OZhp*_0ba2Mb?-xl=G$IsO|qCpt&K8=hMh)}}l|f?^`V0uC{)PXU1cgM|qa
z6PCZ^>|`Z+O$Kq!FXzjbL*gefr_U%sAI3z9NSJh{nAG}<48sy*e3UO|3V2MqTe)b!
zx@eLqE>JTI7jmbht&$qi)(&$1^ph9n<6?x9brZK*lh}8(v#?eFcpsF~V#9a(gQvo2
z;r;7Rk;!F*>FBG64kq}*rp4s_CMEt~_&Uhs>xK}0e0TxF^irc@$q$%_h=|_a-lA)^
zw(axmNCPh?Cnp;l8cl0P=H}NX`q&unzTwJ!uG%E1MLKPsy}c{0j%{H4+6nvhQ|dsy
zsj10Kc`jM%+?D~)R@cXm9}R|^uSfN<x^P<UAs#U4OQBg~zHmvY{_G<O3DtYYr)8{F
zh7=aRYPNg&?YF%l(q9Y@V>Z~omL{yNtpPwjwcf3RTSe5rI505KGV3%4psb>@U!S8J
zl}9{>W|>uBoKGLysCoVRFp<e*UU6~xj5qQV<EOlIs)4$h9Nm&jE`?(&>#D1(!G%44
z-t7wyZk#MFE&bj{;^F2NR;{nC&CJSb4QF%zyM1&89zoIitl?{KZyy=ihOMLo>Vp>o
zaeutp)791Wo6SimG-^Aen~D6J;?Bjxb9lb({+@KADygsgk(@vQnEp0%b)6a*7@#Cc
z6e8{s;d!3g<7L));H#-#>YAEuA*`$qxK%dW(%PEZ-`}-%lZeZsV(slim|ZEYtq35>
zTsilgcR$%QY0P*2XhVcyv4*FYm-gPu)cd~PUVZ@qQT|v6GC)UGgCrv>s~@sBytqhg
zhB~}*Nk~cAWV4yzBjIiuO%o3P)gH~MR@vW=>Vf50adC0Exw#<_2ncdo=Ml5PRxR`L
zv+(e6m5fi%X4!1E+wSx<F8+bv#JdEF`&-ABh)v?GSR`d{=eIXC_r$RzH=cX<?p;Bn
zb#-+U6BA3(CrN$Z19bG|ZB9Lr*AIIvHG<a`7Z*=cUSKjgn?KL9J++<u{g<bwi)wtM
zsis<WNL0orSmgfQ7--y$RJUvwjn}VVUz%kw7-v1YpfQF}5nf1Wa7#^%X!^nSyaL8b
z0CFf@dC+-gEzHx?Q{zM-i4<SEjffuC%cPfDWH_GAGFLWY9qwM++6s#{Z1<`$RXpOJ
zXhN3IbS>iD`MnZ<4*~=<y5R5Jxg#MiexWZEKSE6qRRw#qK`YSv-IXHqd-?0cTMr&a
zE*gziON^O~6_8LIe<XjAF*WrHT@ku6Ma5uB1_xl)c9^g*osE~*nz7H&?;{WP_xE<x
z;`8%mN$CeOO-P8>iY->>k%I0m^D1mx#O5gt4dG2AsK{hX_?0Sb;l(@0(oz)+g!3vf
zrwj}Xeqc^L@$>UrT3Y&1%Vcj;sZ`+%DGooi#KeaWqx#Fs%a@n^YsP)+oHrx(rrzHv
zE~L2IW3gXgRimuIb?3JG??2#*2n??pAt51<3gOYYHD<SWe?Ca3<?Y+`RId^OgIMR~
z>4|i9cPCqZIw*tJc+<@I6cBeMw{NdZ`N8uDxo~L^wAO*faJJXjUDim|fauYq>kC7w
zV*>A84T9&ah9}*$m23s{BllaXs)QKLp-cRNf)Dy)Y4Z{i5(;{uzBpVIxm?}h)#tpw
zR>1G8Wbmbf_$@3g2?6a|$=%E|*P3d{<QOTbjyDe;JZNapsTogZHhjPh_`txqvMEHw
zLTYDxV7WujZ6;1+<>cf%e!RLPXVTNtW5{Ru3_VNh?Twk>Mv4SAwiFk0062Kw%#hyg
zWkaQl7Ym>dHLtg}^AZRI@c(fF?UC`!(K@8);?hKY56arwGs|&mYAP))EhHoah|0=3
z21J>aAZ?VClyW#!t+H_vvK?BLbjILd;LOKZ5WY*P@`O5P!H(?LQ9l+J8TB^{3$7@p
zjS-9w%3+rv@m4ujalW@^0bn-hLbY9ZoMKDlfxI+H<62WVTg9EsI+Hsd8t@_oTS;HI
z1*X2fr0`oxMI73af;|avZ08aF*ntt&=Jdo4oSn_}ZG<{dMgV0ff|`3?I)yvS+oLO4
z>S9FgppUP=KlgRb69%a>WL+g4d{CoHd~vp}kgA}tuu;dW>eco2nD2*^C_&lDSNtwt
zzKnXRUoq%IE-5M0504?2RLbh^o;b=!q<{IM9lnm=$RMl1ZWtLE0l??0v1TRFDBc2;
zH>sn&y}c=fHI24Jq5404vaqyFdh}?jAy8?U+nOr|YD<rbDx-XhHBsDNo#6y<zkZJ2
z7<sw99fztrE1h!c2|rMTu0TZY|6Ex)4E$JH+S^zVRelf`XQZUBpAY2?OUxvZx;s0e
z<F2iDx0k=_`KYR@asuY*__vN?rW^o~NK8*ppT3eu4gI}*tyxwcad&KRkOKtfWlM|f
zHSR$x6Uo2)CpTH6OZiA7(%=Grq!=F`pRG)8nK(aJi|-fM*MR{;JF(Pm8L(p=;HnZ*
zQ@gd2%NC-eqd}0o@pznM=;oq*Z3?-{<<t{Yj`p*6?~VZhbDwiEGc(7=9EIbD==8ea
zc~nC}iu8H@EH`C~xcK-Er^w~W#tXr7J$UWhvIz#GztG?&$v86d;Gh~`Gt+Njhq-Y>
zUB4ahh@TB=WOk?C4j<bWJ?+}E^=Fd>vmPBD)(>07t<QdfAj|2Cpy<n_nB`c#17-B*
z&!00w1;mW}{L`eqiHQjg0Gy;3<>k1yjy|@aFMb&sI@0*&&6~Qqy88P1wzkN<Kb!oq
zMrvXs!^4IMqzEY3tL5G`<1%1dTJJSe+zCWtFOBA)CWfutWYpbQ_23o_-~-(+iBj!N
zlYfS;7+Sb&X-OxZSJqM&Agy+gr%7k^*FVMzfb{3(<;BOvf$s6-^0T(KgSs1|(^-Z?
zFh;a&XHcA|DoSVf2h4x6AwB)5%8)M{6tkXJ%Q3vXyggJZomltqC7nppye^z%2Pw9F
zxI8<}+UxRxX*j+C>=B@pNXD&g--VqqQA|TU-$6<IT+REPmzc;ui_hBm%)7R>Hjq<T
zn3@mDxUz+?LOzJ$#XG->t~ScGIvCH-&7sBYot!GLl|tN{ac&$O96^nD2g#<Oyx_Gj
z$o7Nh0ApigaOQXCs4`*2YwPRaCM+#2`)D+8`97oK)t)q^<HwJu%3oYuUgieOmD4vi
zHezB9HE41I(|eiFhnzgZ5C{YYhksnWprPT<s3nY#kArIR;JnSvo0@+h>&Bg(op?MR
z0J6V1$R5q6{I$_uj2Bj4KX=xT0ekBxXnfoog%UQk1Kq8vs>-?Q7yx=z*CV;Sr%zi6
zLn_U$$-I(#CG@Y8le_EREelZb%mx$19GyUN2L&=nr_%=pR@a!9k|_TyEy;<Bo^$&M
ziC=+B3W5R^a9hzL=+DN2FMJ2&ewAQi0{LSIl5*9-VRUpfo*9P0VBFmmlPE+2A)3q7
z*7k8tbZGX}Jgtxe@P*6V>kBZC^57{@Q?I}z?uQnQvh4Vz<>XQnYwPPft_*zp_RYUY
zS5J?{Vj0}u<po3%OpY8m@-M+Ef?HC4`de35cMW8I$6os1!8H-w7I<}6;7zqmuJI&B
R4?N!j7N#hZS4Oy){{UxZaMAz(


From 2b1b575d790cec0f1a98f2a47d31a7dbbc509fbe Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 29 Oct 2007 00:03:57 +0000
Subject: [PATCH 104/112] Abandon Maven 2

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1274 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/site/site.xml | 91 --------------------------------------
 1 file changed, 91 deletions(-)
 delete mode 100644 JodaTime/src/site/site.xml

diff --git a/JodaTime/src/site/site.xml b/JodaTime/src/site/site.xml
deleted file mode 100644
index e175f2822..000000000
--- a/JodaTime/src/site/site.xml
+++ /dev/null
@@ -1,91 +0,0 @@
-<?xml version="1.0" encoding="ISO-8859-1"?>
-
-<project name="Joda Time">
-
-  <bannerLeft>
-    <name>Joda.org</name>
-    <src>images/joda.png</src>
-    <href>http://joda-time.sourceforge.net/</href>
-  </bannerLeft>
-  <bannerRight>
-    <name>Joda-Time</name>
-    <src>images/jodatime.png</src>
-    <href>http://joda-time.sourceforge.net/</href>
-  </bannerRight>
-
-  <poweredBy>
-    <logo name="Joda-Time, hosted at Sourceforge" href="http://sourceforge.net"
-          img="http://sourceforge.net/sflogo.php?group_id=97367&amp;type=2"/>
-  </poweredBy>
-  <publishDate position="navigation-bottom" format="yyyy-MM-dd"/>
-
-  <body>
-    <links>
-      <item name="Joda-Time" href="/index.html"/>
-      <item name="JSP tags" href="/contrib/jsptags/index.html"/>
-      <item name="Hibernate" href="/contrib/hibernate/index.html"/>
-      <item name="I18N" href="/contrib/i18n/index.html"/>
-    </links>
-
-    <menu name="Joda Time">
-      <item name="Overview" href="/index.html"/>
-      <item name="Quick start guide" href="/quickstart.html"/>
-      <item name="Users guide" href="/userguide.html"/>
-      <item name="FAQ" href="/faq.html"/>
-      <item name="Related projects" href="/related.html"/>
-      <item name="Javadoc (Release)" href="/api-release/index.html"/>
-      <item name="License" href="/license.html"/>
-      <item name="Download" href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=104212"/>
-    </menu>
-    
-    <menu name="Key concepts">
-      <item name="Instant" href="/key_instant.html"/>
-      <item name="Partial" href="/key_partial.html"/>
-      <item name="Interval" href="/key_interval.html"/>
-      <item name="Duration" href="/key_duration.html"/>
-      <item name="Period" href="/key_period.html"/>
-      <item name="Chronology" href="/key_chronology.html"/>
-    </menu>
-    
-    <menu name="Chronologies">
-      <item name="ISO8601" href="/cal_iso.html"/>
-      <item name="Buddhist" href="/cal_buddhist.html"/>
-      <item name="Coptic" href="/cal_coptic.html"/>
-      <item name="Ethiopic" href="/cal_ethiopic.html"/>
-      <item name="Gregorian" href="/cal_gregorian.html"/>
-      <item name="GregorianJulian" href="/cal_gj.html"/>
-      <item name="Islamic" href="/cal_islamic.html"/>
-      <item name="Julian" href="/cal_julian.html"/>
-    </menu>
-    
-    <menu name="Development">
-      <item name="Sourceforge" href="http://sourceforge.net/projects/joda-time/"/>
-      <item name="Test results" href="/junit-report.html"/>
-      <item name="Test coverage" href="/cobertura/index.html"/>
-      <item name="Mailing lists" href="/mail-lists.html"/>
-      <item name="Tasks" href="/tasks.html"/>
-      <item name="Subversion" href="http://joda-time.svn.sourceforge.net/viewvc/joda-time/trunk/JodaTime/"/>
-      <item name="Javadoc (Development)" href="/apidocs/index.html"/>
-    </menu>
-    
-    <menu ref="reports"/>
-    
-    <menu name="Joda">
-      <item name="Joda home" href="http://joda.sourceforge.net"/>
-      <item name="Beans" href="http://joda.sourceforge.net/beans.html"/>
-      <item name="Primitives" href="http://joda-primitives.sourceforge.net/index.html"/>
-    </menu>
-    
-    <!--footer>
-      <a href="http://sourceforge.net">
-        <img src="http://sourceforge.net/sflogo.php?group_id=97367&amp;type=2" width="125" height="37" border="0" alt="SourceForge.net Logo" />
-      </a>
-    </footer-->
-  </body>
-
-  <skin>
-    <groupId>org.apache.maven.skins</groupId>
-    <artifactId>maven-classic-skin</artifactId>
-  </skin>
-
-</project>

From 19ed2b027d094c227446e5eb3a48ce9e775b1059 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 29 Oct 2007 00:05:52 +0000
Subject: [PATCH 106/112] Abandon Maven 2

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1276 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/pom.xml      | 384 ------------------------------------------
 JodaTime/settings.xml |  17 --
 2 files changed, 401 deletions(-)
 delete mode 100644 JodaTime/pom.xml
 delete mode 100644 JodaTime/settings.xml

diff --git a/JodaTime/pom.xml b/JodaTime/pom.xml
deleted file mode 100644
index 1df203cbc..000000000
--- a/JodaTime/pom.xml
+++ /dev/null
@@ -1,384 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project xmlns="http://maven.apache.org/POM/4.0.0"
-         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
-http://maven.apache.org/maven-v4_0_0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-  <groupId>joda-time</groupId>
-  <artifactId>joda-time</artifactId>
-  <name>Joda time</name>
-  <version>1.5</version>
-  <description>Date and time library to replace JDK date handling.</description>
-  <url>http://joda-time.sourceforge.net</url>
-
-  <issueManagement>
-    <system>Sourceforge</system>
-    <url>http://sourceforge.net/tracker/?atid=617889&amp;group_id=97367&amp;func=browse</url>
-  </issueManagement>
-  <inceptionYear>2002</inceptionYear>
-
-  <mailingLists>
-    <mailingList>
-      <name>Joda Interest list</name>
-      <subscribe>https://lists.sourceforge.net/lists/listinfo/joda-interest</subscribe>
-      <unsubscribe>https://lists.sourceforge.net/lists/listinfo/joda-interest</unsubscribe>
-      <archive>http://sourceforge.net/mailarchive/forum.php?forum_name=joda-interest</archive>
-    </mailingList>
-  </mailingLists>
-
-  <developers>
-    <developer>
-      <id>scolebourne</id>
-      <name>Stephen Colebourne</name>
-      <email>scolebourne@joda.org</email>
-      <organization></organization>
-      <roles>
-        <role>Project Lead</role>
-      </roles>
-    </developer>
-    <developer>
-      <id>broneill</id>
-      <name>Brian S O'Neill</name>
-      <email>broneill@users.sourceforge.net</email>
-      <organization></organization>
-      <roles>
-        <role>Senior Developer</role>
-      </roles>
-    </developer>
-  </developers>
-
-  <contributors>
-    <contributor>
-      <name>Guy Allard</name>
-    </contributor>
-    <contributor>
-      <name>Blair Martin</name>
-    </contributor>
-    <contributor>
-      <name>Fredrik Borgh</name>
-    </contributor>
-    <contributor>
-      <name>Jeroen van Erp</name>
-    </contributor>
-    <contributor>
-      <name>Gwyn Evans</name>
-    </contributor>
-    <contributor>
-      <name>Sean Geoghegan</name>
-    </contributor>
-    <contributor>
-      <name>Ashish Katyal</name>
-    </contributor>
-    <contributor>
-      <name>Antonio Leitao</name>
-    </contributor>
-    <contributor>
-      <name>Kostas Maistrelis</name>
-    </contributor>
-    <contributor>
-      <name>Al Major</name>
-    </contributor>
-    <contributor>
-      <name>Julen Parra</name>
-    </contributor>
-    <contributor>
-      <name>Mike Schrag</name>
-    </contributor>
-    <contributor>
-      <name>Kandarp Shah</name>
-    </contributor>
-    <contributor>
-      <name>Francois Staes</name>
-    </contributor>
-    <contributor>
-      <name>Maxim Zhao</name>
-    </contributor>
-    <contributor>
-      <name>Ryan Propper</name>
-    </contributor>
-  </contributors>
-
-  <licenses>
-    <license>
-      <name>Apache License, Version 2.0</name>
-      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
-      <distribution>repo</distribution>
-    </license>
-  </licenses>
-
-  <scm>
-    <connection>scm:svn:https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk/JodaTime/</connection>
-    <url>http://joda-time.svn.sourceforge.net/viewvc/joda-time/trunk/JodaTime/</url>
-  </scm>
-
-  <organization>
-    <name>Joda.org</name>
-    <url>http://www.joda.org</url>
-  </organization>
-
-  <build>
-    <defaultGoal>package</defaultGoal>
-
-    <sourceDirectory>src/java</sourceDirectory>
-    <testSourceDirectory>src/test</testSourceDirectory>
-    <resources>
-      <resource>
-        <directory>${basedir}/target/classes</directory>
-        <includes>
-          <include>org/joda/time/tz/data/**</include>
-        </includes>
-      </resource>
-      <resource>
-        <targetPath>META-INF</targetPath>
-        <directory>.</directory>
-        <includes>
-          <include>NOTICE.txt</include>
-          <include>LICENSE.txt</include>
-        </includes>
-      </resource>
-    </resources>
-    <testResources>
-      <testResource>
-        <directory>${basedir}/src/testdata</directory>
-        <includes>
-          <include>*.dat</include>
-        </includes>
-      </testResource>
-    </testResources>
-    <plugins>
-      <plugin>
-        <artifactId>maven-antrun-plugin</artifactId>
-        <configuration>
-          <tasks>
-            <mkdir dir="${build.tz}"/>
-            <java classname="org.joda.time.tz.ZoneInfoCompiler"
-                  fork="true"
-                  failonerror="true">
-              <classpath refid="maven.compile.classpath"/>
-              <!-- Override default provider since data directory doesn't exist yet -->
-              <sysproperty key="org.joda.time.DateTimeZone.Provider"
-                           value="org.joda.time.tz.UTCProvider"/>
-              <!-- Specify source and destination directories -->
-              <arg line="-src ${source.tz} -dst ${build.tz}"/>
-              <!-- Specify all the data files to compile -->
-              <arg value="africa"/>
-              <arg value="antarctica"/>
-              <arg value="asia"/>
-              <arg value="australasia"/>
-              <arg value="europe"/>
-              <arg value="northamerica"/>
-              <arg value="southamerica"/>
-              <arg value="pacificnew"/>
-              <arg value="etcetera"/>
-              <arg value="backward"/>
-              <arg value="systemv"/>
-            </java>
-          </tasks>
-        </configuration>
-        <executions>
-          <execution>
-            <phase>compile</phase>
-            <goals>
-              <goal>run</goal>
-            </goals>
-          </execution>
-        </executions>
-      </plugin>
-
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-compiler-plugin</artifactId>
-        <configuration>
-          <verbose>true</verbose>
-          <fork>true</fork>
-          <executable>${JAVA_1_3_HOME}/bin/javac</executable>
-          <compilerVersion>1.3</compilerVersion>
-        </configuration>
-      </plugin>
-
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-jar-plugin</artifactId>
-        <configuration>
-          <archive>
-            <manifestFile>src/conf/MANIFEST.MF</manifestFile>
-          </archive>
-        </configuration>
-      </plugin>
-
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-source-plugin</artifactId>
-      </plugin>
-
-      <plugin>
-        <artifactId>maven-javadoc-plugin</artifactId>
-        <configuration>
-          <links>
-            <link>http://java.sun.com/products/j2se/1.4/docs/api</link>
-          </links>
-          <overview>src/java/org/joda/time/overview.html</overview>
-          <show>public</show>
-          <groups>
-            <group>
-              <title>User Packages</title>
-              <packages>org.joda.time:org.joda.time.format:org.joda.time.chrono</packages>
-            </group>
-            <group>
-              <title>Implementation Packages</title>
-              <packages>org.joda.time.base:org.joda.time.convert:org.joda.time.field:org.joda.time.tz</packages>
-            </group>
-          </groups>
-        </configuration>
-      </plugin>
-
-      <plugin>
-        <artifactId>maven-surefire-plugin</artifactId>
-        <configuration>
-          <includes>
-            <include>org/joda/time/**/TestAll.java</include>
-          </includes>
-        </configuration>
-      </plugin>
-
-      <plugin>
-        <artifactId>maven-source-plugin</artifactId>
-        <executions>
-          <execution>
-            <id>create-source-jar</id>
-            <goals>
-              <goal>jar</goal>
-            </goals>
-          </execution>
-        </executions>
-      </plugin>
-
-      <plugin>
-        <artifactId>maven-javadoc-plugin</artifactId>
-        <executions>
-          <execution>
-            <id>create-javadoc-jar</id>
-            <goals>
-              <goal>jar</goal>
-            </goals>
-            <configuration>
-              <source>${maven.compile.source}</source>
-            </configuration>
-          </execution>
-        </executions>
-      </plugin>
-
-      <plugin>
-        <artifactId>maven-assembly-plugin</artifactId>
-        <configuration>
-          <descriptorRefs>
-            <descriptorRef>bin</descriptorRef>
-            <descriptorRef>src</descriptorRef>
-          </descriptorRefs>
-        </configuration>
-      </plugin>
-    </plugins>
-
-    <extensions>
-      <extension>
-        <groupId>org.apache.maven.wagon</groupId>
-         <artifactId>wagon-ssh-external</artifactId>
-         <version>1.0-alpha-5</version>
-      </extension>
-    </extensions>
-  </build>
-
-  <dependencies>
-    <dependency>
-      <groupId>org.apache.maven.doxia</groupId>
-      <artifactId>doxia-core</artifactId>
-      <version>1.0-alpha-9</version>
-      <scope>site</scope>
-    </dependency>
-    <dependency>
-      <groupId>junit</groupId>
-      <artifactId>junit</artifactId>
-      <version>3.8.2</version>
-      <scope>test</scope>
-    </dependency>
-  </dependencies>
-
-  <reporting>
-    <plugins>
-      <plugin>
-        <artifactId>maven-site-plugin</artifactId>
-      </plugin>
-      <plugin>
-        <artifactId>maven-project-info-reports-plugin</artifactId>
-        <reportSets>
-          <reportSet>
-            <reports>
-              <report>index</report>
-              <!--report>dependencies</report-->
-              <report>summary</report>
-              <report>project-team</report>
-              <report>mailing-list</report>
-              <report>sourceforge</report>
-              <report>license</report>
-              <report>scm</report>
-            </reports>
-          </reportSet>
-        </reportSets>
-      </plugin>
-      <plugin>
-        <artifactId>maven-changelog-plugin</artifactId>
-      </plugin>
-      <!--plugin>
-        <artifactId>maven-changes-plugin</artifactId>
-        <configuration>
-          <xmlPath>${basedir}/xdocs/changes.xml</xmlPath>
-        </configuration>
-        <reportSets>
-          <reportSet>
-            <reports>
-              <report>changes-report</report>
-            </reports>
-          </reportSet>
-        </reportSets>
-      </plugin-->
-      <!--plugin>
-        <artifactId>maven-checkstyle-plugin</artifactId>
-        <configuration>
-          <configLocation>checkstyle.xml</configLocation>
-        </configuration>
-      </plugin-->
-      <plugin>
-        <artifactId>maven-javadoc-plugin</artifactId>
-      </plugin>
-      <!--plugin>
-        <artifactId>maven-pmd-plugin</artifactId>
-      </plugin-->
-      <plugin>
-        <artifactId>maven-jxr-plugin</artifactId>
-      </plugin>
-      <plugin>
-        <artifactId>maven-surefire-report-plugin</artifactId>
-      </plugin>
-    </plugins>
-  </reporting>
-
-  <distributionManagement>
-    <repository>
-      <id>ssh-repository</id>
-      <name>Sourceforge Repository</name>
-      <url>scp://shell.sourceforge.net/home/groups/j/jo/joda-time/htdocs/</url>
-    </repository>
-    <site>
-      <id>ssh-repository</id>
-      <name>Sourceforge Site</name>
-      <url>scp://shell.sourceforge.net/home/groups/j/jo/joda-time/htdocs/</url>
-    </site>
-  </distributionManagement>
-
-  <properties>
-    <JAVA_1_3_HOME>/java/jdk1.3.1</JAVA_1_3_HOME>
-    <source.tz>${basedir}/src/java/org/joda/time/tz/src</source.tz>
-    <build.tz>${basedir}/target/classes/org/joda/time/tz/data</build.tz>
-  </properties>
-
-</project>
\ No newline at end of file
diff --git a/JodaTime/settings.xml b/JodaTime/settings.xml
deleted file mode 100644
index 2940c150d..000000000
--- a/JodaTime/settings.xml
+++ /dev/null
@@ -1,17 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<settings>
-  <servers>
-    <server>
-      <id>ssh-repository</id>
-      <username>scolebourne</username>
-      <!--privateKey>/path/to/your/private/key</privateKey-->
-      <filePermissions>664</filePermissions>
-      <directoryPermissions>775</directoryPermissions>
-      <configuration>
-        <sshExecutable>plink</sshExecutable>
-        <scpExecutable>pscp</scpExecutable>
-        <!--sshArgs>other arguments you may need</sshArgs-->
-      </configuration>
-    </server>
-  </servers>
-</settings>
\ No newline at end of file

From d3bf091ac33ff237cb9ca3d5c4ddd575bb44ac66 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 29 Oct 2007 00:13:16 +0000
Subject: [PATCH 107/112] Reword US DST FAQ for clarity

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1277 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/faq.xml | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/JodaTime/xdocs/faq.xml b/JodaTime/xdocs/faq.xml
index 3343d9580..c0bdb40fc 100644
--- a/JodaTime/xdocs/faq.xml
+++ b/JodaTime/xdocs/faq.xml
@@ -34,13 +34,13 @@ Question not answered? Suggest one via the <a href="mail-lists.html">mailing lis
 
 
 <a name="newzonerules" />
-<subsection name="Does Joda-Time support the new US and Canada time zone rules?">
+<subsection name="Does Joda-Time support the 2007 US and Canada time zone rules?">
 <p>
 The time zone rules occur in three key places, your operating system, the JDK and Joda-Time.
 To be sure of hitting no issues, you should ensure that all three of these have been updated.
 </p>
 <p>
-Version 1.5 of Joda-Time contains all the daylight savings rule updates.
+Version 1.5 of Joda-Time contains all the daylight savings rule updates for the 2007 US change.
 For earlier versions of Joda-Time the situation is more complex:
 </p>
 <p>

From ff5faa95ff648678c49f85f3585242a3334100f2 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 29 Oct 2007 00:55:29 +0000
Subject: [PATCH 108/112] Update release note compatibility from clirr

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1278 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt      | 14 +++++++++-----
 JodaTime/xdocs/upgradeto150.xml | 12 ++++++++----
 2 files changed, 17 insertions(+), 9 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index a1f511fb6..33fcd087f 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -34,7 +34,7 @@ Enhancements since 1.4
 
 - Partial
   - add isMatch(ReadablePartial)
-    provide mechanism to match a Partial, such as 'Friday the thirteenth' to
+    provide mechanism to match a Partial, such as 'Friday the Thirteenth' to
     another partial, such as a LocalDate
 
 - Period
@@ -73,12 +73,16 @@ Enhancements since 1.4
 Compatibility with 1.4
 ----------------------
 Binary compatible - Yes, except
-  Internal class LenientDateTimeField has an incompatible change to
-  getInstance() and the constructor
+  - Internal class LenientDateTimeField has an incompatible change to
+    getInstance() and the constructor
+  - Internal class DateTimeZoneBuilder has an incompatible change to
+    toDateTime() and writeTo()
 
 Source compatible - Yes, except
-  Internal class LenientDateTimeField has an incompatible change to
-  getInstance() and the constructor
+  - Internal class LenientDateTimeField has an incompatible change to
+    getInstance() and the constructor
+  - Internal class DateTimeZoneBuilder has an incompatible change to
+    toDateTime() and writeTo()
 
 Serialization compatible - Yes
 
diff --git a/JodaTime/xdocs/upgradeto150.xml b/JodaTime/xdocs/upgradeto150.xml
index 1369f5575..04d15ab7c 100644
--- a/JodaTime/xdocs/upgradeto150.xml
+++ b/JodaTime/xdocs/upgradeto150.xml
@@ -88,12 +88,16 @@ Enhancements since 1.4
 Compatibility with 1.4
 ----------------------
 Binary compatible - Yes, except
-  Internal class LenientDateTimeField has an incompatible change to
-  getInstance() and the constructor
+  - Internal class LenientDateTimeField has an incompatible change to
+    getInstance() and the constructor
+  - Internal class DateTimeZoneBuilder has an incompatible change to
+    toDateTime() and writeTo()
 
 Source compatible - Yes, except
-  Internal class LenientDateTimeField has an incompatible change to
-  getInstance() and the constructor
+  - Internal class LenientDateTimeField has an incompatible change to
+    getInstance() and the constructor
+  - Internal class DateTimeZoneBuilder has an incompatible change to
+    toDateTime() and writeTo()
 
 Serialization compatible - Yes
 

From 5ccd1def534f2e37637d0311fb8bcfba62f1c74d Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 29 Oct 2007 09:28:23 +0000
Subject: [PATCH 109/112] Add missing since tags for 1.5

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1279 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/DateTimeZone.java              | 2 ++
 .../src/java/org/joda/time/IllegalFieldValueException.java     | 1 +
 JodaTime/src/java/org/joda/time/LocalDate.java                 | 3 +++
 JodaTime/src/java/org/joda/time/LocalDateTime.java             | 1 +
 JodaTime/src/java/org/joda/time/LocalTime.java                 | 1 +
 JodaTime/src/java/org/joda/time/Partial.java                   | 1 +
 JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java    | 2 ++
 7 files changed, 11 insertions(+)

diff --git a/JodaTime/src/java/org/joda/time/DateTimeZone.java b/JodaTime/src/java/org/joda/time/DateTimeZone.java
index 69477efeb..f8af1de22 100644
--- a/JodaTime/src/java/org/joda/time/DateTimeZone.java
+++ b/JodaTime/src/java/org/joda/time/DateTimeZone.java
@@ -886,6 +886,7 @@ public int getOffsetFromLocal(long instantLocal) {
      * @param instantUTC  the UTC instant to convert to local
      * @return the local instant with the same local time
      * @throws ArithmeticException if the result overflows a long
+     * @since 1.5
      */
     public long convertUTCToLocal(long instantUTC) {
         int offset = getOffset(instantUTC);
@@ -907,6 +908,7 @@ public long convertUTCToLocal(long instantUTC) {
      * @return the UTC instant with the same local time, 
      * @throws ArithmeticException if the result overflows a long
      * @throws IllegalArgumentException if the zone has no eqivalent local time
+     * @since 1.5
      */
     public long convertLocalToUTC(long instantLocal, boolean strict) {
         // get the offset at instantLocal (first estimate)
diff --git a/JodaTime/src/java/org/joda/time/IllegalFieldValueException.java b/JodaTime/src/java/org/joda/time/IllegalFieldValueException.java
index 3b47ef23d..f3184f2cb 100644
--- a/JodaTime/src/java/org/joda/time/IllegalFieldValueException.java
+++ b/JodaTime/src/java/org/joda/time/IllegalFieldValueException.java
@@ -122,6 +122,7 @@ public IllegalFieldValueException(DateTimeFieldType fieldType,
      * @param fieldType  type of field being set
      * @param value  illegal value being set
      * @param explain  an explanation
+     * @since 1.5
      */
     public IllegalFieldValueException(DateTimeFieldType fieldType,
                                       Number value, String explain) {
diff --git a/JodaTime/src/java/org/joda/time/LocalDate.java b/JodaTime/src/java/org/joda/time/LocalDate.java
index 007ef0653..45415dc09 100644
--- a/JodaTime/src/java/org/joda/time/LocalDate.java
+++ b/JodaTime/src/java/org/joda/time/LocalDate.java
@@ -489,6 +489,7 @@ public boolean isSupported(DurationFieldType type) {
      * of 1970-01-01T00:00:00 (not fixed to any specific time zone).
      * 
      * @return the number of milliseconds since 1970-01-01T00:00:00
+     * @since 1.5 (previously private)
      */
     protected long getLocalMillis() {
         return iLocalMillis;
@@ -578,6 +579,7 @@ public int compareTo(Object partial) {
      * This instance is immutable and unaffected by this method call.
      * 
      * @return this date as a datetime at the start of the day
+     * @since 1.5
      */
     public DateTime toDateTimeAtStartOfDay() {
         return toDateTimeAtStartOfDay(null);
@@ -599,6 +601,7 @@ public DateTime toDateTimeAtStartOfDay() {
      *
      * @param zone  the zone to use, null means default zone
      * @return this date as a datetime at the start of the day
+     * @since 1.5
      */
     public DateTime toDateTimeAtStartOfDay(DateTimeZone zone) {
         zone = DateTimeUtils.getZone(zone);
diff --git a/JodaTime/src/java/org/joda/time/LocalDateTime.java b/JodaTime/src/java/org/joda/time/LocalDateTime.java
index 3850fcb9d..7d0376fac 100644
--- a/JodaTime/src/java/org/joda/time/LocalDateTime.java
+++ b/JodaTime/src/java/org/joda/time/LocalDateTime.java
@@ -529,6 +529,7 @@ public boolean isSupported(DurationFieldType type) {
      * of 1970-01-01T00:00:00 (not fixed to any specific time zone).
      *
      * @return the number of milliseconds since 1970-01-01T00:00:00
+     * @since 1.5 (previously private)
      */
     protected long getLocalMillis() {
         return iLocalMillis;
diff --git a/JodaTime/src/java/org/joda/time/LocalTime.java b/JodaTime/src/java/org/joda/time/LocalTime.java
index f6cf4b582..08aeb8b9d 100644
--- a/JodaTime/src/java/org/joda/time/LocalTime.java
+++ b/JodaTime/src/java/org/joda/time/LocalTime.java
@@ -552,6 +552,7 @@ public boolean isSupported(DurationFieldType type) {
      * of 1970-01-01T00:00:00 (not fixed to any specific time zone).
      * 
      * @return the number of milliseconds since 1970-01-01T00:00:00
+     * @since 1.5 (previously private)
      */
     protected long getLocalMillis() {
         return iLocalMillis;
diff --git a/JodaTime/src/java/org/joda/time/Partial.java b/JodaTime/src/java/org/joda/time/Partial.java
index c25fb6e31..b2a5f71f7 100644
--- a/JodaTime/src/java/org/joda/time/Partial.java
+++ b/JodaTime/src/java/org/joda/time/Partial.java
@@ -673,6 +673,7 @@ public boolean isMatch(ReadableInstant instant) {
      * @return true if this partial matches the specified partial
      * @throws IllegalArgumentException if the partial is null
      * @throws IllegalArgumentException if the fields of the two partials do not match
+     * @since 1.5
      */
     public boolean isMatch(ReadablePartial partial) {
         if (partial == null) {
diff --git a/JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java b/JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java
index ef51bc364..c32fef2e6 100644
--- a/JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java
+++ b/JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java
@@ -436,6 +436,7 @@ private boolean addTransition(ArrayList transitions, Transition tr) {
      * decode the data into a DateTimeZone object.
      *
      * @param out output stream to receive encoded DateTimeZone.
+     * @since 1.5 (parameter added)
      */
     public void writeTo(String zoneID, OutputStream out) throws IOException {
         if (out instanceof DataOutput) {
@@ -450,6 +451,7 @@ public void writeTo(String zoneID, OutputStream out) throws IOException {
      * decode the data into a DateTimeZone object.
      *
      * @param out output stream to receive encoded DateTimeZone.
+     * @since 1.5 (parameter added)
      */
     public void writeTo(String zoneID, DataOutput out) throws IOException {
         // pass false so zone id is not written out

From 29c52d1ec96918dabefb7f003284df2c3a12ef07 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 29 Oct 2007 10:12:37 +0000
Subject: [PATCH 110/112] Abandon Maven 2

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1280 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/conf/MANIFEST.MF | 1 -
 1 file changed, 1 deletion(-)

diff --git a/JodaTime/src/conf/MANIFEST.MF b/JodaTime/src/conf/MANIFEST.MF
index 7c24795d7..324714501 100644
--- a/JodaTime/src/conf/MANIFEST.MF
+++ b/JodaTime/src/conf/MANIFEST.MF
@@ -1,4 +1,3 @@
-Build-Jdk: 1.3.1
 Package: org.joda.time
 Extension-Name: joda-time
 Specification-Title: Joda-Time

From 1129b3112d13a9f24a1eef4138d4a93667049bd3 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 29 Oct 2007 10:28:00 +0000
Subject: [PATCH 111/112] Prepare for v1.5, Switch to JDK1.4, Switch to Emma

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1281 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt      |  2 +-
 JodaTime/build.xml              | 75 ++++++++++++++++++++++++++-------
 JodaTime/project.properties     |  2 +-
 JodaTime/project.xml            | 28 +++++++-----
 JodaTime/xdocs/index.xml        |  4 +-
 JodaTime/xdocs/navigation.xml   |  2 +-
 JodaTime/xdocs/upgradeto150.xml |  2 +-
 7 files changed, 83 insertions(+), 32 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 33fcd087f..72638c19f 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -7,7 +7,7 @@ Date and Calendar classes.
 This is the sixth full release of Joda-Time.
 This release focuses on new features, but also include some bug fixes.
 
-We recommend JDK 1.3 or later, and have performed no testing on earlier JDKs.
+We recommend JDK 1.4 or later, and have performed no testing on earlier JDKs.
 
 Joda-Time is licensed under the business-friendly Apache License Version 2.
 This is the same license as all of Apache, plus other open source projects such as Spring.
diff --git a/JodaTime/build.xml b/JodaTime/build.xml
index dc450f26b..fbcae55b2 100644
--- a/JodaTime/build.xml
+++ b/JodaTime/build.xml
@@ -57,11 +57,13 @@
   <property name="build.tz"                value="${build.classes}/org/joda/time/tz/data"/>
   <property name="build.tests"             value="${build}/tests"/>
   <property name="build.docs"              value="${build}/docs"/>
-  <property name="build.srcide"            value="${build}/srcide"/>
+  <property name="build.sources"           value="${build}/sources"/>
+  <property name="build.javadoc"           value="${build}/javadoc"/>
   <property name="build.dist"              value="${build}/dist"/>
   <property name="build.fullname"          value="${build}/${component.fullname}"/>
   <property name="build.dist.fullname"     value="${build.dist}/${component.fullname}"/>
   <property name="build.dist.src.fullname" value="${build.dist.fullname}-src"/>
+  <property name="build.dist.bundle"       value="${build.dist.fullname}-bundle"/>
 
   <property name="repo" value="${user.home}/.maven/repository" />
 
@@ -178,7 +180,8 @@
              debug="${compile.debug}"
         debuglevel="${compile.debuglevel}"
        deprecation="${compile.deprecation}"
-          optimize="${compile.optimize}">
+          optimize="${compile.optimize}"
+    	    source="1.3" target="1.3">
       <classpath refid="compile.classpath"/>
     </javac>
   </target>
@@ -279,23 +282,39 @@
 
 <!-- ====================================================================== -->
 
-  <target name="src.ide.zip">
-    <mkdir      dir="${build.srcide}"/>
-    <copy     todir="${build.srcide}">
+  <target name="javadoc.jar">
+    <mkdir      dir="${build.javadoc}"/>
+    <copy     todir="${build.javadoc}">
+  	  <fileset dir="${build.docs}" includes="**/*" />
+  	</copy>
+    <mkdir      dir="${build.javadoc}/META-INF"/>
+    <copy      file="LICENSE.txt"
+             tofile="${build.javadoc}/META-INF/LICENSE.txt"/>
+    <copy      file="NOTICE.txt"
+             tofile="${build.javadoc}/META-INF/NOTICE.txt"/>
+    <jar    jarfile="${build.fullname}-javadoc.jar"
+            basedir="${build.javadoc}" />
+  </target>
+
+<!-- ====================================================================== -->
+
+  <target name="sources.jar">
+    <mkdir      dir="${build.sources}"/>
+    <copy     todir="${build.sources}">
   	  <fileset dir="${source.home}" includes="**/*.java" />
   	</copy>
-    <mkdir      dir="${build.srcide}/META-INF"/>
+    <mkdir      dir="${build.sources}/META-INF"/>
     <copy      file="LICENSE.txt"
-             tofile="${build.srcide}/META-INF/LICENSE.txt"/>
+             tofile="${build.sources}/META-INF/LICENSE.txt"/>
     <copy      file="NOTICE.txt"
-             tofile="${build.srcide}/META-INF/NOTICE.txt"/>
-    <jar    jarfile="${build.fullname}-src-ide.zip"
-            basedir="${build.srcide}" />
+             tofile="${build.sources}/META-INF/NOTICE.txt"/>
+    <jar    jarfile="${build.fullname}-sources.jar"
+            basedir="${build.sources}" />
   </target>
 
 <!-- ====================================================================== -->
 
-  <target name="dist" depends="compile,jar,test.jar,javadoc,src.ide.zip"
+  <target name="dist" depends="compile,jar,test.jar,javadoc,javadoc.jar,sources.jar"
           description="Create binary distribution">
     
 	<!-- binary -->
@@ -306,11 +325,10 @@
     <copy      file="RELEASE-NOTES.txt" todir="${build.dist.fullname}"/>
     <copy      file="${build.fullname}.jar"
               todir="${build.dist.fullname}"/>
-    <copy      file="${build.fullname}-src-ide.zip"
+    <copy      file="${build.fullname}-sources.jar"
+              todir="${build.dist.fullname}"/>
+    <copy      file="${build.fullname}-javadoc.jar"
               todir="${build.dist.fullname}"/>
-    <copy     todir="${build.dist.fullname}">
-      <fileset  dir="${build}" includes="docs/**/*.*"/>
-    </copy>
     
 	<fixcrlf srcdir="${build.dist.fullname}" eol="lf" includes="*.txt"/>
 	<tar   destfile="${build.fullname}.tar" basedir="${build.dist}"/>
@@ -349,6 +367,24 @@
 	<fixcrlf srcdir="${build.dist.src.fullname}" eol="crlf" includes="*.txt,*.properties,*.xml"/>
 	<zip   destfile="${build.fullname}-src.zip" basedir="${build.dist}"/>
     <delete     dir="${build.dist.src.fullname}"/>
+  	
+	<!-- bundle -->
+    <delete     dir="${build.dist.bundle}"/>
+    <mkdir      dir="${build.dist.bundle}"/>
+    <copy      file="LICENSE.txt" todir="${build.dist.bundle}"/>
+    <copy      file="NOTICE.txt" todir="${build.dist.bundle}"/>
+    <copy      file="project.xml" todir="${build.dist.bundle}"/>
+    <copy      file="${build.fullname}.jar"
+              todir="${build.dist.bundle}"/>
+    <copy      file="${build.fullname}-sources.jar"
+              todir="${build.dist.bundle}"/>
+	<copy      file="${build.fullname}-javadoc.jar"
+	          todir="${build.dist.bundle}"/>
+    
+	<fixcrlf srcdir="${build.dist.bundle}" eol="crlf" includes="*.txt"/>
+	<jar    jarfile="${build.fullname}-bundle.zip" basedir="${build.dist.bundle}"/>
+    <delete     dir="${build.dist.bundle}"/>
+	
   </target>
 
 <!-- ====================================================================== -->
@@ -408,4 +444,13 @@
     </clirr>
   </target>
 
+  <!--property name="emma.dir" value="${lib}" />
+  <path id="emma.lib" >
+    <pathelement location="${emma.dir}/emma.jar" />
+    <pathelement location="${emma.dir}/emma_ant.jar" />
+  </path>
+  <target name="emma" description="turns on EMMA's on-the-fly instrumentation mode" >
+  	<taskdef resource="emma_ant.properties" classpathref="emma.lib" />
+    <property name="emma.enabled" value="true" />
+  </target-->
 </project>
diff --git a/JodaTime/project.properties b/JodaTime/project.properties
index 9e94e88df..3fabc925f 100644
--- a/JodaTime/project.properties
+++ b/JodaTime/project.properties
@@ -20,4 +20,4 @@ maven.javadoc.private=false
 maven.jdiff.old.tag=v1_4_000
 maven.jdiff.new.tag=CURRENT
 
-maven.repo.remote=http://repo1.maven.org/maven
\ No newline at end of file
+maven.repo.remote=http://repo1.maven.org/maven, http://emma.sourceforge.net/maven/ 
\ No newline at end of file
diff --git a/JodaTime/project.xml b/JodaTime/project.xml
index b1647d8b6..0b7c0dc25 100644
--- a/JodaTime/project.xml
+++ b/JodaTime/project.xml
@@ -1,8 +1,8 @@
 <?xml version="1.0" encoding="UTF-8"?>
+<project>
 <!-- You are strongly recommended to use ant for compiling and building -->
 <!-- We only use and test maven for website construction -->
 
-<project>
   <pomVersion>3</pomVersion>
   <groupId>joda-time</groupId>
   <artifactId>joda-time</artifactId>
@@ -104,7 +104,7 @@
       <name>Stephen Colebourne</name>
       <id>scolebourne</id>
       <email>scolebourne@joda.org</email>
-      <organization>SITA ATS Ltd</organization>
+      <organization></organization>
       <roles>
         <role>Project Lead</role>
       </roles>
@@ -124,9 +124,6 @@
     <contributor>
       <name>Guy Allard</name>
     </contributor>
-    <contributor>
-      <name>Blair Martin</name>
-    </contributor>
     <contributor>
       <name>Fredrik Borgh</name>
     </contributor>
@@ -151,6 +148,9 @@
     <contributor>
       <name>Al Major</name>
     </contributor>
+    <contributor>
+      <name>Blair Martin</name>
+    </contributor>
     <contributor>
       <name>Julen Parra</name>
     </contributor>
@@ -209,12 +209,13 @@
   <reports>
      <report>maven-changelog-plugin</report>
      <report>maven-changes-plugin</report>
-     <report>maven-checkstyle-plugin</report>
-     <!-- <report>maven-findbugs-plugin</report> -->
-     <!-- <report>maven-jdiff-plugin</report> -->
-     <!-- <report>maven-clover-plugin</report> -->
-     <!-- <report>maven-jcoverage-plugin</report> -->
-     <!-- <report>maven-cobertura-plugin</report> -->
+     <!--report>maven-checkstyle-plugin</report-->
+     <!--report>maven-findbugs-plugin</report-->
+     <!--report>maven-jdiff-plugin</report-->
+     <!--report>maven-clover-plugin</report-->
+     <!--report>maven-jcoverage-plugin</report-->
+     <!--report>maven-cobertura-plugin</report-->
+     <report>maven-emma-plugin</report>
      <report>maven-developer-activity-plugin</report>
      <report>maven-file-activity-plugin</report>
      <report>maven-javadoc-plugin</report>
@@ -225,5 +226,10 @@
      <!--report>maven-statcvs-plugin</report-->
      <!--report>maven-tasklist-plugin</report-->
   </reports>
+  
+  <!-- To install Emma, run:
+   maven plugin:download -DgroupId=emma -DartifactId=maven-emma-plugin -Dversion=0.6 -->
+  <!-- To run Jdiff:
+   copy the src folder from the previous version to target/jdiff/{tag} -->
 
 </project>
diff --git a/JodaTime/xdocs/index.xml b/JodaTime/xdocs/index.xml
index cea29d14e..8f71c0aee 100644
--- a/JodaTime/xdocs/index.xml
+++ b/JodaTime/xdocs/index.xml
@@ -58,7 +58,7 @@ public boolean isJoinedInLastThreeMonths(<a href="api-release/index.html?org/jod
   return last3Months.contains(datetimeJoined);
 }
 -->
-Version 1.5 was released on 2007-10-28 -
+Version 1.5 was released on 2007-10-29 -
 <a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=104212">Download now</a>
 </p>
 </section>
@@ -147,7 +147,7 @@ Various documentation is available:
 is the current latest release.
 This release is considered stable and worthy of the 1.x tag.
 It has extensive testing suites and has been used in production.
-We now recommend JDK 1.3 or later, and have performed no testing on earlier JDKs.
+We now recommend JDK 1.4 or later, and have performed no testing on earlier JDKs.
 </p>
 <p>
 We will support the 1.x product line using standard Java mechanisms.
diff --git a/JodaTime/xdocs/navigation.xml b/JodaTime/xdocs/navigation.xml
index 8221e1f54..9a8ea4f60 100644
--- a/JodaTime/xdocs/navigation.xml
+++ b/JodaTime/xdocs/navigation.xml
@@ -47,7 +47,7 @@
     <menu name="Development">
       <item name="Sourceforge" href="http://sourceforge.net/projects/joda-time/"/>
       <item name="Test results" href="/junit-report.html"/>
-      <item name="Test coverage" href="/cobertura/index.html"/>
+      <item name="Test coverage" href="/coverage/index.html"/>
       <item name="Mailing lists" href="/mail-lists.html"/>
       <item name="Tasks" href="/tasks.html"/>
       <item name="Subversion" href="http://joda-time.svn.sourceforge.net/viewvc/joda-time/trunk/JodaTime/"/>
diff --git a/JodaTime/xdocs/upgradeto150.xml b/JodaTime/xdocs/upgradeto150.xml
index 04d15ab7c..3ca0fdd6a 100644
--- a/JodaTime/xdocs/upgradeto150.xml
+++ b/JodaTime/xdocs/upgradeto150.xml
@@ -22,7 +22,7 @@ Date and Calendar classes.
 This is the sixth full release of Joda-Time.
 This release focuses on new features, but also include some bug fixes.
 
-We recommend JDK 1.3 or later, and have performed no testing on earlier JDKs.
+We recommend JDK 1.4 or later, and have performed no testing on earlier JDKs.
 
 Joda-Time is licensed under the business-friendly Apache License Version 2.
 This is the same license as all of Apache, plus other open source projects such as Spring.

From b198acb9c2c2d36056c2b8028ef1a23a20444686 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 29 Oct 2007 12:14:36 +0000
Subject: [PATCH 112/112] Fix bundle to be a jar not a zip

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1284 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/build.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/JodaTime/build.xml b/JodaTime/build.xml
index fbcae55b2..cc0222195 100644
--- a/JodaTime/build.xml
+++ b/JodaTime/build.xml
@@ -382,7 +382,7 @@
 	          todir="${build.dist.bundle}"/>
     
 	<fixcrlf srcdir="${build.dist.bundle}" eol="crlf" includes="*.txt"/>
-	<jar    jarfile="${build.fullname}-bundle.zip" basedir="${build.dist.bundle}"/>
+	<jar    jarfile="${build.fullname}-bundle.jar" basedir="${build.dist.bundle}"/>
     <delete     dir="${build.dist.bundle}"/>
 	
   </target>