From a478fe86d9dc2833cc7a80d8868a596a081d5d41 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 8 Feb 2008 00:00:03 +0000
Subject: [PATCH 01/43] ZonedChronology fix to roundFloor/roundCeiling
 (regression from 1.4) [1887104] Bug affected DST cutover in Autumn for time
 fields (not date fields)

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1323 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  17 +-
 .../org/joda/time/chrono/ZonedChronology.java |  24 ++-
 .../joda/time/TestDateTimeZoneCutover.java    | 200 ++++++++++++++++++
 3 files changed, 230 insertions(+), 11 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index a2a1e51f6..5df2d2413 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -1,12 +1,12 @@
-Joda-Time version 1.5.2
+Joda-Time version 1.5.3
 -----------------------
 
 Joda-Time is a date and time handling library that seeks to replace the JDK
 Date and Calendar classes.
 
-This is a patch release for Joda-Time 1.5.1.
+This is a patch release for Joda-Time 1.5.2.
 This release contains one bug fix and a time zone update.
-We recommend all users of 1.5.1 upgrade to 1.5.2.
+We recommend all users of 1.5.x upgrade to 1.5.3.
 
 We recommend JDK 1.4 or later, and have performed no testing on earlier JDKs.
 
@@ -41,14 +41,21 @@ Deprecations since 1.5
 ----------------------
 
 
+Bug fixes since 1.5.2
+---------------------
+- ZonedChronology (regression from 1.4) [1887104]
+  Fix to roundFloor/roundCeiling
+  Bug affected DST cutover in Autumn for time fields (not date fields)
+
 Bug fixes since 1.5.1
 ---------------------
 - DateTimeZone (regression from 1.4)
-  Fix getOffsetFromLocal DST gap adjustment.
+  Fix getOffsetFromLocal DST gap adjustment
+  Bug affected parsing of DST cutover in Autumn
 
 Bug fixes since 1.5
 -------------------
-- Parsing (regression) [1839440]
+- Parsing (regression from 1.4) [1839440]
   Support parsing all upper-case and all lower-case text
 
 - Javadoc clarity enhancements
diff --git a/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java b/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java
index 3fc6b30c0..c518b9ad4 100644
--- a/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java
@@ -518,15 +518,27 @@ public final DurationField getLeapDurationField() {
         }
 
         public long roundFloor(long instant) {
-            long localInstant = iZone.convertUTCToLocal(instant);
-            localInstant = iField.roundFloor(localInstant);
-            return iZone.convertLocalToUTC(localInstant, false);
+            if (iTimeField) {
+                int offset = getOffsetToAdd(instant);
+                instant = iField.roundFloor(instant + offset);
+                return instant - offset;
+            } else {
+                long localInstant = iZone.convertUTCToLocal(instant);
+                localInstant = iField.roundFloor(localInstant);
+                return iZone.convertLocalToUTC(localInstant, false);
+            }
         }
 
         public long roundCeiling(long instant) {
-            long localInstant = iZone.convertUTCToLocal(instant);
-            localInstant = iField.roundCeiling(localInstant);
-            return iZone.convertLocalToUTC(localInstant, false);
+            if (iTimeField) {
+                int offset = getOffsetToAdd(instant);
+                instant = iField.roundCeiling(instant + offset);
+                return instant - offset;
+            } else {
+                long localInstant = iZone.convertUTCToLocal(instant);
+                localInstant = iField.roundCeiling(localInstant);
+                return iZone.convertLocalToUTC(localInstant, false);
+            }
         }
 
         public long remainder(long instant) {
diff --git a/JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java b/JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java
index be04e0817..bd6b81456 100644
--- a/JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java
+++ b/JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java
@@ -558,6 +558,92 @@ public void test_DateTime_setHourBack_NewYork_Spring() {
         }
     }
 
+    //-----------------------------------------------------------------------
+    public void test_DateTime_roundFloor_day_NewYork_Spring_preCutover() {
+        DateTime dt = new DateTime(2007, 3, 11, 1, 30, 0, 0, ZONE_NEW_YORK);
+        assertEquals("2007-03-11T01:30:00.000-05:00", dt.toString());
+        DateTime rounded = dt.dayOfMonth().roundFloorCopy();
+        assertEquals("2007-03-11T00:00:00.000-05:00", rounded.toString());
+    }
+
+    public void test_DateTime_roundFloor_day_NewYork_Spring_postCutover() {
+        DateTime dt = new DateTime(2007, 3, 11, 3, 30, 0, 0, ZONE_NEW_YORK);
+        assertEquals("2007-03-11T03:30:00.000-04:00", dt.toString());
+        DateTime rounded = dt.dayOfMonth().roundFloorCopy();
+        assertEquals("2007-03-11T00:00:00.000-05:00", rounded.toString());
+    }
+
+    public void test_DateTime_roundFloor_hour_NewYork_Spring_preCutover() {
+        DateTime dt = new DateTime(2007, 3, 11, 1, 30, 0, 0, ZONE_NEW_YORK);
+        assertEquals("2007-03-11T01:30:00.000-05:00", dt.toString());
+        DateTime rounded = dt.hourOfDay().roundFloorCopy();
+        assertEquals("2007-03-11T01:00:00.000-05:00", rounded.toString());
+    }
+
+    public void test_DateTime_roundFloor_hour_NewYork_Spring_postCutover() {
+        DateTime dt = new DateTime(2007, 3, 11, 3, 30, 0, 0, ZONE_NEW_YORK);
+        assertEquals("2007-03-11T03:30:00.000-04:00", dt.toString());
+        DateTime rounded = dt.hourOfDay().roundFloorCopy();
+        assertEquals("2007-03-11T03:00:00.000-04:00", rounded.toString());
+    }
+
+    public void test_DateTime_roundFloor_minute_NewYork_Spring_preCutover() {
+        DateTime dt = new DateTime(2007, 3, 11, 1, 30, 40, 0, ZONE_NEW_YORK);
+        assertEquals("2007-03-11T01:30:40.000-05:00", dt.toString());
+        DateTime rounded = dt.minuteOfHour().roundFloorCopy();
+        assertEquals("2007-03-11T01:30:00.000-05:00", rounded.toString());
+    }
+
+    public void test_DateTime_roundFloor_minute_NewYork_Spring_postCutover() {
+        DateTime dt = new DateTime(2007, 3, 11, 3, 30, 40, 0, ZONE_NEW_YORK);
+        assertEquals("2007-03-11T03:30:40.000-04:00", dt.toString());
+        DateTime rounded = dt.minuteOfHour().roundFloorCopy();
+        assertEquals("2007-03-11T03:30:00.000-04:00", rounded.toString());
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_DateTime_roundCeiling_day_NewYork_Spring_preCutover() {
+        DateTime dt = new DateTime(2007, 3, 11, 1, 30, 0, 0, ZONE_NEW_YORK);
+        assertEquals("2007-03-11T01:30:00.000-05:00", dt.toString());
+        DateTime rounded = dt.dayOfMonth().roundCeilingCopy();
+        assertEquals("2007-03-12T00:00:00.000-04:00", rounded.toString());
+    }
+
+    public void test_DateTime_roundCeiling_day_NewYork_Spring_postCutover() {
+        DateTime dt = new DateTime(2007, 3, 11, 3, 30, 0, 0, ZONE_NEW_YORK);
+        assertEquals("2007-03-11T03:30:00.000-04:00", dt.toString());
+        DateTime rounded = dt.dayOfMonth().roundCeilingCopy();
+        assertEquals("2007-03-12T00:00:00.000-04:00", rounded.toString());
+    }
+
+    public void test_DateTime_roundCeiling_hour_NewYork_Spring_preCutover() {
+        DateTime dt = new DateTime(2007, 3, 11, 1, 30, 0, 0, ZONE_NEW_YORK);
+        assertEquals("2007-03-11T01:30:00.000-05:00", dt.toString());
+        DateTime rounded = dt.hourOfDay().roundCeilingCopy();
+        assertEquals("2007-03-11T03:00:00.000-04:00", rounded.toString());
+    }
+
+    public void test_DateTime_roundCeiling_hour_NewYork_Spring_postCutover() {
+        DateTime dt = new DateTime(2007, 3, 11, 3, 30, 0, 0, ZONE_NEW_YORK);
+        assertEquals("2007-03-11T03:30:00.000-04:00", dt.toString());
+        DateTime rounded = dt.hourOfDay().roundCeilingCopy();
+        assertEquals("2007-03-11T04:00:00.000-04:00", rounded.toString());
+    }
+
+    public void test_DateTime_roundCeiling_minute_NewYork_Spring_preCutover() {
+        DateTime dt = new DateTime(2007, 3, 11, 1, 30, 40, 0, ZONE_NEW_YORK);
+        assertEquals("2007-03-11T01:30:40.000-05:00", dt.toString());
+        DateTime rounded = dt.minuteOfHour().roundCeilingCopy();
+        assertEquals("2007-03-11T01:31:00.000-05:00", rounded.toString());
+    }
+
+    public void test_DateTime_roundCeiling_minute_NewYork_Spring_postCutover() {
+        DateTime dt = new DateTime(2007, 3, 11, 3, 30, 40, 0, ZONE_NEW_YORK);
+        assertEquals("2007-03-11T03:30:40.000-04:00", dt.toString());
+        DateTime rounded = dt.minuteOfHour().roundCeilingCopy();
+        assertEquals("2007-03-11T03:31:00.000-04:00", rounded.toString());
+    }
+
     //-----------------------------------------------------------------------
     /** America/New_York cutover from 01:59 to 01:00 on 2007-11-04 */
     private static long CUTOVER_NEW_YORK_AUTUMN = 1194156000000L;  // 2007-11-04T01:00:00.000-05:00
@@ -618,6 +704,120 @@ public void test_DateTime_minusHour_NewYork_Autumn() {
         assertEquals("2007-11-04T00:00:00.000-04:00", minus9.toString());
     }
 
+    //-----------------------------------------------------------------------
+    public void test_DateTime_roundFloor_day_NewYork_Autumn_preCutover() {
+        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK);
+        assertEquals("2007-11-04T01:30:00.000-04:00", dt.toString());
+        DateTime rounded = dt.dayOfMonth().roundFloorCopy();
+        assertEquals("2007-11-04T00:00:00.000-04:00", rounded.toString());
+    }
+
+    public void test_DateTime_roundFloor_day_NewYork_Autumn_postCutover() {
+        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK).plusHours(1);
+        assertEquals("2007-11-04T01:30:00.000-05:00", dt.toString());
+        DateTime rounded = dt.dayOfMonth().roundFloorCopy();
+        assertEquals("2007-11-04T00:00:00.000-04:00", rounded.toString());
+    }
+
+    public void test_DateTime_roundFloor_hourOfDay_NewYork_Autumn_preCutover() {
+        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK);
+        assertEquals("2007-11-04T01:30:00.000-04:00", dt.toString());
+        DateTime rounded = dt.hourOfDay().roundFloorCopy();
+        assertEquals("2007-11-04T01:00:00.000-04:00", rounded.toString());
+    }
+
+    public void test_DateTime_roundFloor_hourOfDay_NewYork_Autumn_postCutover() {
+        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK).plusHours(1);
+        assertEquals("2007-11-04T01:30:00.000-05:00", dt.toString());
+        DateTime rounded = dt.hourOfDay().roundFloorCopy();
+        assertEquals("2007-11-04T01:00:00.000-05:00", rounded.toString());
+    }
+
+    public void test_DateTime_roundFloor_minuteOfHour_NewYork_Autumn_preCutover() {
+        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 0, ZONE_NEW_YORK);
+        assertEquals("2007-11-04T01:30:40.000-04:00", dt.toString());
+        DateTime rounded = dt.minuteOfHour().roundFloorCopy();
+        assertEquals("2007-11-04T01:30:00.000-04:00", rounded.toString());
+    }
+
+    public void test_DateTime_roundFloor_minuteOfHour_NewYork_Autumn_postCutover() {
+        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 0, ZONE_NEW_YORK).plusHours(1);
+        assertEquals("2007-11-04T01:30:40.000-05:00", dt.toString());
+        DateTime rounded = dt.minuteOfHour().roundFloorCopy();
+        assertEquals("2007-11-04T01:30:00.000-05:00", rounded.toString());
+    }
+
+    public void test_DateTime_roundFloor_secondOfMinute_NewYork_Autumn_preCutover() {
+        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 500, ZONE_NEW_YORK);
+        assertEquals("2007-11-04T01:30:40.500-04:00", dt.toString());
+        DateTime rounded = dt.secondOfMinute().roundFloorCopy();
+        assertEquals("2007-11-04T01:30:40.000-04:00", rounded.toString());
+    }
+
+    public void test_DateTime_roundFloor_secondOfMinute_NewYork_Autumn_postCutover() {
+        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 500, ZONE_NEW_YORK).plusHours(1);
+        assertEquals("2007-11-04T01:30:40.500-05:00", dt.toString());
+        DateTime rounded = dt.secondOfMinute().roundFloorCopy();
+        assertEquals("2007-11-04T01:30:40.000-05:00", rounded.toString());
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_DateTime_roundCeiling_day_NewYork_Autumn_preCutover() {
+        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK);
+        assertEquals("2007-11-04T01:30:00.000-04:00", dt.toString());
+        DateTime rounded = dt.dayOfMonth().roundCeilingCopy();
+        assertEquals("2007-11-05T00:00:00.000-05:00", rounded.toString());
+    }
+
+    public void test_DateTime_roundCeiling_day_NewYork_Autumn_postCutover() {
+        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK).plusHours(1);
+        assertEquals("2007-11-04T01:30:00.000-05:00", dt.toString());
+        DateTime rounded = dt.dayOfMonth().roundCeilingCopy();
+        assertEquals("2007-11-05T00:00:00.000-05:00", rounded.toString());
+    }
+
+    public void test_DateTime_roundCeiling_hourOfDay_NewYork_Autumn_preCutover() {
+        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK);
+        assertEquals("2007-11-04T01:30:00.000-04:00", dt.toString());
+        DateTime rounded = dt.hourOfDay().roundCeilingCopy();
+        assertEquals("2007-11-04T01:00:00.000-05:00", rounded.toString());
+    }
+
+    public void test_DateTime_roundCeiling_hourOfDay_NewYork_Autumn_postCutover() {
+        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK).plusHours(1);
+        assertEquals("2007-11-04T01:30:00.000-05:00", dt.toString());
+        DateTime rounded = dt.hourOfDay().roundCeilingCopy();
+        assertEquals("2007-11-04T02:00:00.000-05:00", rounded.toString());
+    }
+
+    public void test_DateTime_roundCeiling_minuteOfHour_NewYork_Autumn_preCutover() {
+        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 0, ZONE_NEW_YORK);
+        assertEquals("2007-11-04T01:30:40.000-04:00", dt.toString());
+        DateTime rounded = dt.minuteOfHour().roundCeilingCopy();
+        assertEquals("2007-11-04T01:31:00.000-04:00", rounded.toString());
+    }
+
+    public void test_DateTime_roundCeiling_minuteOfHour_NewYork_Autumn_postCutover() {
+        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 0, ZONE_NEW_YORK).plusHours(1);
+        assertEquals("2007-11-04T01:30:40.000-05:00", dt.toString());
+        DateTime rounded = dt.minuteOfHour().roundCeilingCopy();
+        assertEquals("2007-11-04T01:31:00.000-05:00", rounded.toString());
+    }
+
+    public void test_DateTime_roundCeiling_secondOfMinute_NewYork_Autumn_preCutover() {
+        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 500, ZONE_NEW_YORK);
+        assertEquals("2007-11-04T01:30:40.500-04:00", dt.toString());
+        DateTime rounded = dt.secondOfMinute().roundCeilingCopy();
+        assertEquals("2007-11-04T01:30:41.000-04:00", rounded.toString());
+    }
+
+    public void test_DateTime_roundCeiling_secondOfMinute_NewYork_Autumn_postCutover() {
+        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 500, ZONE_NEW_YORK).plusHours(1);
+        assertEquals("2007-11-04T01:30:40.500-05:00", dt.toString());
+        DateTime rounded = dt.secondOfMinute().roundCeilingCopy();
+        assertEquals("2007-11-04T01:30:41.000-05:00", rounded.toString());
+    }
+
     //-----------------------------------------------------------------------
     /** Europe/Moscow cutover from 01:59 to 03:00 on 2007-03-25 */
     private static long CUTOVER_MOSCOW_SPRING = 1174777200000L;  // 2007-03-25T03:00:00.000+04:00

From 706ccf2e451b3b40962cd0455564f7b5a64d8072 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Fri, 8 Feb 2008 00:03:32 +0000
Subject: [PATCH 02/43] Fix document title

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1324 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/upgradeto152.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/JodaTime/xdocs/upgradeto152.xml b/JodaTime/xdocs/upgradeto152.xml
index d43e83c88..9df2620de 100644
--- a/JodaTime/xdocs/upgradeto152.xml
+++ b/JodaTime/xdocs/upgradeto152.xml
@@ -2,7 +2,7 @@
 
 <document>
  <properties>
-  <title>Java date and time API - Upgrade from 1.5 to 1.5.1</title>
+  <title>Java date and time API - Upgrade from 1.5.1 to 1.5.2</title>
   <author email="scolebourne.at.users.sourceforge.net">Stephen Colebourne</author>
  </properties>
 

From 62ea1bfa32188c029a5032862d84d66ced164a24 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 27 Feb 2008 23:52:34 +0000
Subject: [PATCH 03/43] Fix Javadoc timezone definitions, from Simen Rokaas
 [Open discussion]

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1325 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  4 ++
 .../src/java/org/joda/time/LocalTime.java     |  2 +-
 .../java/org/joda/time/MutableDateTime.java   |  2 +-
 .../org/joda/time/base/AbstractInstant.java   |  2 +-
 .../joda/time/format/ISODateTimeFormat.java   | 60 +++++++++----------
 JodaTime/xdocs/userguide.xml                  |  2 +-
 6 files changed, 38 insertions(+), 34 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 5df2d2413..1b47ec4db 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -46,6 +46,10 @@ Bug fixes since 1.5.2
 - ZonedChronology (regression from 1.4) [1887104]
   Fix to roundFloor/roundCeiling
   Bug affected DST cutover in Autumn for time fields (not date fields)
+  
+- Clarify Javadoc time zone formats
+  Time zone formats were incorrectly documented as 'Z' instead of 'ZZ'
+  Javadoc only change
 
 Bug fixes since 1.5.1
 ---------------------
diff --git a/JodaTime/src/java/org/joda/time/LocalTime.java b/JodaTime/src/java/org/joda/time/LocalTime.java
index 08aeb8b9d..4e0ecf881 100644
--- a/JodaTime/src/java/org/joda/time/LocalTime.java
+++ b/JodaTime/src/java/org/joda/time/LocalTime.java
@@ -1196,7 +1196,7 @@ public DateTime toDateTimeToday(DateTimeZone zone) {
 
     //-----------------------------------------------------------------------
     /**
-     * Output the time in ISO8601 format (HH:mm:ss.SSSZ).
+     * Output the time in ISO8601 format (HH:mm:ss.SSSZZ).
      * 
      * @return ISO8601 time formatted string.
      */
diff --git a/JodaTime/src/java/org/joda/time/MutableDateTime.java b/JodaTime/src/java/org/joda/time/MutableDateTime.java
index 577ed95c5..9c329423b 100644
--- a/JodaTime/src/java/org/joda/time/MutableDateTime.java
+++ b/JodaTime/src/java/org/joda/time/MutableDateTime.java
@@ -1141,7 +1141,7 @@ public Object clone() {
     }
 
     /**
-     * Output the date time in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ).
+     * Output the date time in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZZ).
      * 
      * @return ISO8601 time formatted string.
      */
diff --git a/JodaTime/src/java/org/joda/time/base/AbstractInstant.java b/JodaTime/src/java/org/joda/time/base/AbstractInstant.java
index 913a45486..47a2ab3ef 100644
--- a/JodaTime/src/java/org/joda/time/base/AbstractInstant.java
+++ b/JodaTime/src/java/org/joda/time/base/AbstractInstant.java
@@ -416,7 +416,7 @@ public boolean isEqual(ReadableInstant instant) {
 
     //-----------------------------------------------------------------------
     /**
-     * Output the date time in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ).
+     * Output the date time in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZZ).
      * 
      * @return ISO8601 time formatted string.
      */
diff --git a/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java b/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java
index fe52898d3..1fa3ada97 100644
--- a/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java
+++ b/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java
@@ -838,10 +838,10 @@ public static DateTimeFormatter date() {
     /**
      * Returns a formatter for a two digit hour of day, two digit minute of
      * hour, two digit second of minute, three digit fraction of second, and
-     * time zone offset (HH:mm:ss.SSSZ).
+     * time zone offset (HH:mm:ss.SSSZZ).
      * The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero.
      * 
-     * @return a formatter for HH:mm:ss.SSSZ
+     * @return a formatter for HH:mm:ss.SSSZZ
      */
     public static DateTimeFormatter time() {
         if (t == null) {
@@ -855,10 +855,10 @@ public static DateTimeFormatter time() {
 
     /**
      * Returns a formatter for a two digit hour of day, two digit minute of
-     * hour, two digit second of minute, and time zone offset (HH:mm:ssZ).
+     * hour, two digit second of minute, and time zone offset (HH:mm:ssZZ).
      * The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero.
      * 
-     * @return a formatter for HH:mm:ssZ
+     * @return a formatter for HH:mm:ssZZ
      */
     public static DateTimeFormatter timeNoMillis() {
         if (tx == null) {
@@ -873,10 +873,10 @@ public static DateTimeFormatter timeNoMillis() {
     /**
      * Returns a formatter for a two digit hour of day, two digit minute of
      * hour, two digit second of minute, three digit fraction of second, and
-     * time zone offset prefixed by 'T' ('T'HH:mm:ss.SSSZ).
+     * time zone offset prefixed by 'T' ('T'HH:mm:ss.SSSZZ).
      * The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero.
      * 
-     * @return a formatter for 'T'HH:mm:ss.SSSZ
+     * @return a formatter for 'T'HH:mm:ss.SSSZZ
      */
     public static DateTimeFormatter tTime() {
         if (tt == null) {
@@ -891,10 +891,10 @@ public static DateTimeFormatter tTime() {
     /**
      * Returns a formatter for a two digit hour of day, two digit minute of
      * hour, two digit second of minute, and time zone offset prefixed
-     * by 'T' ('T'HH:mm:ssZ).
+     * by 'T' ('T'HH:mm:ssZZ).
      * The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero.
      * 
-     * @return a formatter for 'T'HH:mm:ssZ
+     * @return a formatter for 'T'HH:mm:ssZZ
      */
     public static DateTimeFormatter tTimeNoMillis() {
         if (ttx == null) {
@@ -908,10 +908,10 @@ public static DateTimeFormatter tTimeNoMillis() {
 
     /**
      * Returns a formatter that combines a full date and time, separated by a 'T'
-     * (yyyy-MM-dd'T'HH:mm:ss.SSSZ).
+     * (yyyy-MM-dd'T'HH:mm:ss.SSSZZ).
      * The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero.
      * 
-     * @return a formatter for yyyy-MM-dd'T'HH:mm:ss.SSSZ
+     * @return a formatter for yyyy-MM-dd'T'HH:mm:ss.SSSZZ
      */
     public static DateTimeFormatter dateTime() {
         if (dt == null) {
@@ -925,10 +925,10 @@ public static DateTimeFormatter dateTime() {
 
     /**
      * Returns a formatter that combines a full date and time without millis,
-     * separated by a 'T' (yyyy-MM-dd'T'HH:mm:ssZ).
+     * separated by a 'T' (yyyy-MM-dd'T'HH:mm:ssZZ).
      * The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero.
      * 
-     * @return a formatter for yyyy-MM-dd'T'HH:mm:ssZ
+     * @return a formatter for yyyy-MM-dd'T'HH:mm:ssZZ
      */
     public static DateTimeFormatter dateTimeNoMillis() {
         if (dtx == null) {
@@ -959,10 +959,10 @@ public static DateTimeFormatter ordinalDate() {
 
     /**
      * Returns a formatter for a full ordinal date and time, using a four
-     * digit year and three digit dayOfYear (yyyy-DDD'T'HH:mm:ss.SSSZ).
+     * digit year and three digit dayOfYear (yyyy-DDD'T'HH:mm:ss.SSSZZ).
      * The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero.
      * 
-     * @return a formatter for yyyy-DDD'T'HH:mm:ss.SSSZ
+     * @return a formatter for yyyy-DDD'T'HH:mm:ss.SSSZZ
      * @since 1.1
      */
     public static DateTimeFormatter ordinalDateTime() {
@@ -977,10 +977,10 @@ public static DateTimeFormatter ordinalDateTime() {
 
     /**
      * Returns a formatter for a full ordinal date and time without millis,
-     * using a four digit year and three digit dayOfYear (yyyy-DDD'T'HH:mm:ssZ).
+     * using a four digit year and three digit dayOfYear (yyyy-DDD'T'HH:mm:ssZZ).
      * The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero.
      * 
-     * @return a formatter for yyyy-DDD'T'HH:mm:ssZ
+     * @return a formatter for yyyy-DDD'T'HH:mm:ssZZ
      * @since 1.1
      */
     public static DateTimeFormatter ordinalDateTimeNoMillis() {
@@ -1005,10 +1005,10 @@ public static DateTimeFormatter weekDate() {
 
     /**
      * Returns a formatter that combines a full weekyear date and time,
-     * separated by a 'T' (xxxx-'W'ww-e'T'HH:mm:ss.SSSZ).
+     * separated by a 'T' (xxxx-'W'ww-e'T'HH:mm:ss.SSSZZ).
      * The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero.
      * 
-     * @return a formatter for xxxx-'W'ww-e'T'HH:mm:ss.SSSZ
+     * @return a formatter for xxxx-'W'ww-e'T'HH:mm:ss.SSSZZ
      */
     public static DateTimeFormatter weekDateTime() {
         if (wdt == null) {
@@ -1022,10 +1022,10 @@ public static DateTimeFormatter weekDateTime() {
 
     /**
      * Returns a formatter that combines a full weekyear date and time without millis,
-     * separated by a 'T' (xxxx-'W'ww-e'T'HH:mm:ssZ).
+     * separated by a 'T' (xxxx-'W'ww-e'T'HH:mm:ssZZ).
      * The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero.
      * 
-     * @return a formatter for xxxx-'W'ww-e'T'HH:mm:ssZ
+     * @return a formatter for xxxx-'W'ww-e'T'HH:mm:ssZZ
      */
     public static DateTimeFormatter weekDateTimeNoMillis() {
         if (wdtx == null) {
@@ -1059,7 +1059,7 @@ public static DateTimeFormatter basicDate() {
      * Returns a basic formatter for a two digit hour of day, two digit minute
      * of hour, two digit second of minute, three digit millis, and time zone
      * offset (HHmmss.SSSZ).
-     * The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero.
+     * The time zone offset is 'Z' for zero, and of the form '\u00b1HHmm' for non-zero.
      * 
      * @return a formatter for HHmmss.SSSZ
      */
@@ -1080,7 +1080,7 @@ public static DateTimeFormatter basicTime() {
     /**
      * Returns a basic formatter for a two digit hour of day, two digit minute
      * of hour, two digit second of minute, and time zone offset (HHmmssZ).
-     * The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero.
+     * The time zone offset is 'Z' for zero, and of the form '\u00b1HHmm' for non-zero.
      * 
      * @return a formatter for HHmmssZ
      */
@@ -1100,7 +1100,7 @@ public static DateTimeFormatter basicTimeNoMillis() {
      * Returns a basic formatter for a two digit hour of day, two digit minute
      * of hour, two digit second of minute, three digit millis, and time zone
      * offset prefixed by 'T' ('T'HHmmss.SSSZ).
-     * The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero.
+     * The time zone offset is 'Z' for zero, and of the form '\u00b1HHmm' for non-zero.
      * 
      * @return a formatter for 'T'HHmmss.SSSZ
      */
@@ -1118,7 +1118,7 @@ public static DateTimeFormatter basicTTime() {
      * Returns a basic formatter for a two digit hour of day, two digit minute
      * of hour, two digit second of minute, and time zone offset prefixed by 'T'
      * ('T'HHmmssZ).
-     * The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero.
+     * The time zone offset is 'Z' for zero, and of the form '\u00b1HHmm' for non-zero.
      * 
      * @return a formatter for 'T'HHmmssZ
      */
@@ -1135,7 +1135,7 @@ public static DateTimeFormatter basicTTimeNoMillis() {
     /**
      * Returns a basic formatter that combines a basic date and time, separated
      * by a 'T' (yyyyMMdd'T'HHmmss.SSSZ).
-     * The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero.
+     * The time zone offset is 'Z' for zero, and of the form '\u00b1HHmm' for non-zero.
      * 
      * @return a formatter for yyyyMMdd'T'HHmmss.SSSZ
      */
@@ -1152,7 +1152,7 @@ public static DateTimeFormatter basicDateTime() {
     /**
      * Returns a basic formatter that combines a basic date and time without millis,
      * separated by a 'T' (yyyyMMdd'T'HHmmssZ).
-     * The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero.
+     * The time zone offset is 'Z' for zero, and of the form '\u00b1HHmm' for non-zero.
      * 
      * @return a formatter for yyyyMMdd'T'HHmmssZ
      */
@@ -1186,7 +1186,7 @@ public static DateTimeFormatter basicOrdinalDate() {
     /**
      * Returns a formatter for a full ordinal date and time, using a four
      * digit year and three digit dayOfYear (yyyyDDD'T'HHmmss.SSSZ).
-     * The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero.
+     * The time zone offset is 'Z' for zero, and of the form '\u00b1HHmm' for non-zero.
      * 
      * @return a formatter for yyyyDDD'T'HHmmss.SSSZ
      * @since 1.1
@@ -1204,7 +1204,7 @@ public static DateTimeFormatter basicOrdinalDateTime() {
     /**
      * Returns a formatter for a full ordinal date and time without millis,
      * using a four digit year and three digit dayOfYear (yyyyDDD'T'HHmmssZ).
-     * The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero.
+     * The time zone offset is 'Z' for zero, and of the form '\u00b1HHmm' for non-zero.
      * 
      * @return a formatter for yyyyDDD'T'HHmmssZ
      * @since 1.1
@@ -1240,7 +1240,7 @@ public static DateTimeFormatter basicWeekDate() {
     /**
      * Returns a basic formatter that combines a basic weekyear date and time,
      * separated by a 'T' (xxxx'W'wwe'T'HHmmss.SSSZ).
-     * The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero.
+     * The time zone offset is 'Z' for zero, and of the form '\u00b1HHmm' for non-zero.
      * 
      * @return a formatter for xxxx'W'wwe'T'HHmmss.SSSZ
      */
@@ -1257,7 +1257,7 @@ public static DateTimeFormatter basicWeekDateTime() {
     /**
      * Returns a basic formatter that combines a basic weekyear date and time
      * without millis, separated by a 'T' (xxxx'W'wwe'T'HHmmssZ).
-     * The time zone offset is 'Z' for zero, and of the form '\u00b1HH:mm' for non-zero.
+     * The time zone offset is 'Z' for zero, and of the form '\u00b1HHmm' for non-zero.
      * 
      * @return a formatter for xxxx'W'wwe'T'HHmmssZ
      */
diff --git a/JodaTime/xdocs/userguide.xml b/JodaTime/xdocs/userguide.xml
index 3bd9f3112..8995dd77c 100644
--- a/JodaTime/xdocs/userguide.xml
+++ b/JodaTime/xdocs/userguide.xml
@@ -850,7 +850,7 @@ Support for standard formats based on ISO8601 is provided by the
 </p>
 <p>
 For example, if you wanted to use the ISO standard format for <em>datetime</em>,
-which is <code>yyyy-MM-dd'T'HH:mm:ss.SSSZ</code>, you would initialize
+which is <code>yyyy-MM-dd'T'HH:mm:ss.SSSZZ</code>, you would initialize
 <code>fmt</code> as
 <source>
     DateTimeFormatter fmt = ISODateTimeFormat.dateTime();

From a003745adfad5143332e9b0067b06f068af13d84 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Tue, 4 Mar 2008 15:31:58 +0000
Subject: [PATCH 04/43] Updated time zone table documentation.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1326 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/timezones.xml | 18 +++++++++++-------
 1 file changed, 11 insertions(+), 7 deletions(-)

diff --git a/JodaTime/xdocs/timezones.xml b/JodaTime/xdocs/timezones.xml
index 8496080aa..a7a707a86 100644
--- a/JodaTime/xdocs/timezones.xml
+++ b/JodaTime/xdocs/timezones.xml
@@ -13,7 +13,7 @@
 <p>
 Time zone data is provided by the public <a href="http://www.twinsun.com/tz/tz-link.htm">tz</a>
 database, otherwise known as the Olson database. The following table shows all the time zones
-supported by Joda-Time, using version 2005n of the tz database.
+supported by Joda-Time, using version 2007k of the tz database.
 It is also possible to update to a <a href="tz_update.html">later version of the database</a>.
 This table can be rebuilt by running <code>org.joda.example.time.TimeZoneTable</code>.
 </p>
@@ -70,8 +70,7 @@ This table can be rebuilt by running <code>org.joda.example.time.TimeZoneTable</
 <tr><td align="left" valign="top">-06:00</td><td align="left" valign="top">America/El_Salvador</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-06:00</td><td align="left" valign="top">America/Guatemala</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-06:00</td><td align="left" valign="top">America/Indiana/Knox</td><td align="left" valign="top">America/Knox_IN, US/Indiana-Starke</td></tr>
-<tr><td align="left" valign="top">-06:00</td><td align="left" valign="top">America/Indiana/Petersburg</td><td align="left" valign="top"></td></tr>
-<tr><td align="left" valign="top">-06:00</td><td align="left" valign="top">America/Indiana/Vincennes</td><td align="left" valign="top"></td></tr>
+<tr><td align="left" valign="top">-06:00</td><td align="left" valign="top">America/Indiana/Tell_City</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-06:00</td><td align="left" valign="top">America/Managua</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-06:00</td><td align="left" valign="top">America/Menominee</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-06:00</td><td align="left" valign="top">America/Merida</td><td align="left" valign="top"></td></tr>
@@ -99,7 +98,10 @@ This table can be rebuilt by running <code>org.joda.example.time.TimeZoneTable</
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Havana</td><td align="left" valign="top">Cuba</td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Indiana/Indianapolis</td><td align="left" valign="top">America/Fort_Wayne, America/Indianapolis, US/East-Indiana</td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Indiana/Marengo</td><td align="left" valign="top"></td></tr>
+<tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Indiana/Petersburg</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Indiana/Vevay</td><td align="left" valign="top"></td></tr>
+<tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Indiana/Vincennes</td><td align="left" valign="top"></td></tr>
+<tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Indiana/Winamac</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Iqaluit</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Jamaica</td><td align="left" valign="top">Jamaica</td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Kentucky/Louisville</td><td align="left" valign="top">America/Louisville</td></tr>
@@ -112,12 +114,14 @@ This table can be rebuilt by running <code>org.joda.example.time.TimeZoneTable</
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Panama</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Pangnirtung</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Port-au-Prince</td><td align="left" valign="top"></td></tr>
+<tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Resolute</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Rio_Branco</td><td align="left" valign="top">America/Porto_Acre, Brazil/Acre</td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Thunder_Bay</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">America/Toronto</td><td align="left" valign="top">Canada/Eastern</td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">EST</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">EST5EDT</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-05:00</td><td align="left" valign="top">Etc/GMT+5</td><td align="left" valign="top"></td></tr>
+<tr><td align="left" valign="top">-04:30</td><td align="left" valign="top">America/Caracas</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-04:00</td><td align="left" valign="top">America/Anguilla</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-04:00</td><td align="left" valign="top">America/Antigua</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-04:00</td><td align="left" valign="top">America/Aruba</td><td align="left" valign="top"></td></tr>
@@ -126,14 +130,13 @@ This table can be rebuilt by running <code>org.joda.example.time.TimeZoneTable</
 <tr><td align="left" valign="top">-04:00</td><td align="left" valign="top">America/Blanc-Sablon</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-04:00</td><td align="left" valign="top">America/Boa_Vista</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-04:00</td><td align="left" valign="top">America/Campo_Grande</td><td align="left" valign="top"></td></tr>
-<tr><td align="left" valign="top">-04:00</td><td align="left" valign="top">America/Caracas</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-04:00</td><td align="left" valign="top">America/Cuiaba</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-04:00</td><td align="left" valign="top">America/Curacao</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-04:00</td><td align="left" valign="top">America/Dominica</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-04:00</td><td align="left" valign="top">America/Glace_Bay</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-04:00</td><td align="left" valign="top">America/Goose_Bay</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-04:00</td><td align="left" valign="top">America/Grenada</td><td align="left" valign="top"></td></tr>
-<tr><td align="left" valign="top">-04:00</td><td align="left" valign="top">America/Guadeloupe</td><td align="left" valign="top"></td></tr>
+<tr><td align="left" valign="top">-04:00</td><td align="left" valign="top">America/Guadeloupe</td><td align="left" valign="top">America/Marigot, America/St_Barthelemy</td></tr>
 <tr><td align="left" valign="top">-04:00</td><td align="left" valign="top">America/Guyana</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">-04:00</td><td align="left" valign="top">America/Halifax</td><td align="left" valign="top">Canada/Atlantic</td></tr>
 <tr><td align="left" valign="top">-04:00</td><td align="left" valign="top">America/La_Paz</td><td align="left" valign="top"></td></tr>
@@ -205,7 +208,7 @@ This table can be rebuilt by running <code>org.joda.example.time.TimeZoneTable</
 <tr><td align="left" valign="top">+00:00</td><td align="left" valign="top">Africa/Sao_Tome</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+00:00</td><td align="left" valign="top">America/Danmarkshavn</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+00:00</td><td align="left" valign="top">Atlantic/Canary</td><td align="left" valign="top"></td></tr>
-<tr><td align="left" valign="top">+00:00</td><td align="left" valign="top">Atlantic/Faeroe</td><td align="left" valign="top"></td></tr>
+<tr><td align="left" valign="top">+00:00</td><td align="left" valign="top">Atlantic/Faroe</td><td align="left" valign="top">Atlantic/Faeroe</td></tr>
 <tr><td align="left" valign="top">+00:00</td><td align="left" valign="top">Atlantic/Madeira</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+00:00</td><td align="left" valign="top">Atlantic/Reykjavik</td><td align="left" valign="top">Iceland</td></tr>
 <tr><td align="left" valign="top">+00:00</td><td align="left" valign="top">Atlantic/St_Helena</td><td align="left" valign="top"></td></tr>
@@ -294,7 +297,7 @@ This table can be rebuilt by running <code>org.joda.example.time.TimeZoneTable</
 <tr><td align="left" valign="top">+02:00</td><td align="left" valign="top">Europe/Vilnius</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+02:00</td><td align="left" valign="top">Europe/Zaporozhye</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+03:00</td><td align="left" valign="top">Africa/Addis_Ababa</td><td align="left" valign="top"></td></tr>
-<tr><td align="left" valign="top">+03:00</td><td align="left" valign="top">Africa/Asmera</td><td align="left" valign="top"></td></tr>
+<tr><td align="left" valign="top">+03:00</td><td align="left" valign="top">Africa/Asmara</td><td align="left" valign="top">Africa/Asmera</td></tr>
 <tr><td align="left" valign="top">+03:00</td><td align="left" valign="top">Africa/Dar_es_Salaam</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+03:00</td><td align="left" valign="top">Africa/Djibouti</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+03:00</td><td align="left" valign="top">Africa/Kampala</td><td align="left" valign="top"></td></tr>
@@ -384,6 +387,7 @@ This table can be rebuilt by running <code>org.joda.example.time.TimeZoneTable</
 <tr><td align="left" valign="top">+08:00</td><td align="left" valign="top">Asia/Urumqi</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+08:00</td><td align="left" valign="top">Australia/Perth</td><td align="left" valign="top">Australia/West</td></tr>
 <tr><td align="left" valign="top">+08:00</td><td align="left" valign="top">Etc/GMT-8</td><td align="left" valign="top"></td></tr>
+<tr><td align="left" valign="top">+08:45</td><td align="left" valign="top">Australia/Eucla</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+09:00</td><td align="left" valign="top">Asia/Choibalsan</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+09:00</td><td align="left" valign="top">Asia/Dili</td><td align="left" valign="top"></td></tr>
 <tr><td align="left" valign="top">+09:00</td><td align="left" valign="top">Asia/Jayapura</td><td align="left" valign="top"></td></tr>

From 7f691f72b7ea10ad935fd3fdd8d92f539d5a546d Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 15 Mar 2008 11:58:53 +0000
Subject: [PATCH 05/43] Include .properties files in jar file, and prepare for
 1.0.2

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1327 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/jsptags/project.xml | 19 ++++++++++++++-----
 1 file changed, 14 insertions(+), 5 deletions(-)

diff --git a/JodaTimeContrib/jsptags/project.xml b/JodaTimeContrib/jsptags/project.xml
index 54d2649fb..ba1472798 100644
--- a/JodaTimeContrib/jsptags/project.xml
+++ b/JodaTimeContrib/jsptags/project.xml
@@ -30,8 +30,8 @@
   <mailingLists>
     <mailingList>
       <name>Joda Interest list</name>
-      <subscribe>http://sourceforge.net/mail/?group_id=47291</subscribe>
-      <unsubscribe>http://sourceforge.net/mail/?group_id=47291</unsubscribe>
+      <subscribe>https://lists.sourceforge.net/lists/listinfo/joda-interest</subscribe>
+      <unsubscribe>https://lists.sourceforge.net/lists/listinfo/joda-interest</unsubscribe>
       <archive>http://sourceforge.net/mailarchive/forum.php?forum_name=joda-interest</archive>
     </mailingList>
   </mailingLists>
@@ -43,9 +43,7 @@
   </organization>
 
   <repository>
-    <!-- Does not appear to be supported in Maven-1.x
-    <connection>scm:svn:http://joda-time.svn.sourceforge.net/viewcvs.cgi/joda-time/trunk</connection>
-    -->
+    <connection>scm:svn:https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk/JodaTimeContrib/jsptags/</connection>
     <url>http://joda-time.svn.sourceforge.net/viewvc/joda-time/trunk/JodaTimeContrib/jsptags/</url>
   </repository>
 
@@ -60,6 +58,11 @@
       <name>1.0.1</name>
       <tag>JSPTAGS_v1_0_1</tag>
     </version>
+    <version>
+      <id>1.0.2</id>
+      <name>1.0.2</name>
+      <tag>JSPTAGS_v1_0_2</tag>
+    </version>
   </versions>
 
   <developers>
@@ -120,6 +123,12 @@
       </includes>
     </unitTest>
     <resources>
+      <resource>
+        <directory>${basedir}/src/java</directory>
+        <includes>
+          <include>**/*.properties</include>
+        </includes>
+      </resource>
       <resource>
         <targetPath>META-INF</targetPath>
         <directory>.</directory>

From 7283dc72141e69d70f5a1e010afabc9c00aa3a96 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 15 Mar 2008 11:59:40 +0000
Subject: [PATCH 06/43] Prepare for 1.0.2

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1328 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/jsptags/RELEASE-NOTES.txt     |  6 ++++--
 JodaTimeContrib/jsptags/build.xml             | 20 ++++++++++++-------
 JodaTimeContrib/jsptags/project.properties    |  4 ++--
 .../jsptags/src/conf/manifest-additions.txt   |  2 +-
 JodaTimeContrib/jsptags/xdocs/changes.xml     |  9 +++++++++
 JodaTimeContrib/jsptags/xdocs/index.xml       |  8 ++++----
 JodaTimeContrib/jsptags/xdocs/userguide.xml   |  2 +-
 7 files changed, 34 insertions(+), 17 deletions(-)

diff --git a/JodaTimeContrib/jsptags/RELEASE-NOTES.txt b/JodaTimeContrib/jsptags/RELEASE-NOTES.txt
index 74d14c4b1..274e082db 100644
--- a/JodaTimeContrib/jsptags/RELEASE-NOTES.txt
+++ b/JodaTimeContrib/jsptags/RELEASE-NOTES.txt
@@ -23,12 +23,14 @@ and DateTimeZone objects.
 
 Changes since 1.0.1
 -------------------
-Changed maven definition for servlet jars [1841568]
+- Include .properties files in jar
+
+- Changed maven definition for servlet jars [1841568]
 
 
 Changes since 1.0
 -----------------
-Fix missing directory tag in project.xml [1827409]
+- Fix missing directory tag in project.xml [1827409]
 
 
 Build
diff --git a/JodaTimeContrib/jsptags/build.xml b/JodaTimeContrib/jsptags/build.xml
index ec8d2a78d..c9fef9a3d 100644
--- a/JodaTimeContrib/jsptags/build.xml
+++ b/JodaTimeContrib/jsptags/build.xml
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 
-<!--build.xml generated by maven from project.xml version 1.0.1
-  on date November 14 2007, time 2326-->
+<!--build.xml generated by maven from project.xml version 1.0.2
+  on date March 15 2008, time 1143-->
 
 <project default="jar" name="joda-time-jsptags" basedir=".">
   <property name="defaulttargetdir" value="target">
@@ -16,7 +16,7 @@
   </property>
   <property name="javadocdir" value="dist/docs/api">
   </property>
-  <property name="final.name" value="joda-time-jsptags-1.0.1">
+  <property name="final.name" value="joda-time-jsptags-1.0.2">
   </property>
   <path id="build.classpath">
     <fileset dir="${libdir}">
@@ -47,6 +47,12 @@
       <classpath refid="build.classpath">
       </classpath>
     </javac>
+    <copy todir="${classesdir}">
+      <fileset dir="src/java">
+        <include name="**/*.properties">
+        </include>
+      </fileset>
+    </copy>
     <mkdir dir="${classesdir}/META-INF">
     </mkdir>
     <copy todir="${classesdir}/META-INF">
@@ -106,7 +112,7 @@
     </tstamp>
     <property name="copyright" value="Copyright &amp;copy;  Joda.org. All Rights Reserved.">
     </property>
-    <property name="title" value="Joda time JSP tags support 1.0.1 API">
+    <property name="title" value="Joda time JSP tags support 1.0.2 API">
     </property>
     <javadoc use="true" private="true" destdir="${javadocdir}" author="true" version="true" sourcepath="src/java" packagenames="org.joda.time.contrib.jsptag.*">
       <classpath>
@@ -122,11 +128,11 @@
     </setproxy>
     <get dest="${libdir}/joda-time-1.5.jar" usetimestamp="true" ignoreerrors="true" src="http://repo1.maven.org/maven/joda-time/jars/joda-time-1.5.jar">
     </get>
-    <get dest="${libdir}/servlet-api-2.4.jar" usetimestamp="true" ignoreerrors="true" src="http://repo1.maven.org/maven/servletapi/jars/servlet-api-2.4.jar">
+    <get dest="${libdir}/servlet-api-2.4.jar" usetimestamp="true" ignoreerrors="true" src="http://repo1.maven.org/maven/javax.servlet/jars/servlet-api-2.4.jar">
     </get>
-    <get dest="${libdir}/jsp-api-2.0.jar" usetimestamp="true" ignoreerrors="true" src="http://repo1.maven.org/maven/jspapi/jars/jsp-api-2.0.jar">
+    <get dest="${libdir}/jsp-api-2.0.jar" usetimestamp="true" ignoreerrors="true" src="http://repo1.maven.org/maven/javax.servlet/jars/jsp-api-2.0.jar">
     </get>
-    <get dest="${libdir}/jstl-1.1.2.jar" usetimestamp="true" ignoreerrors="true" src="http://repo1.maven.org/maven/jstl/jars/jstl-1.1.2.jar">
+    <get dest="${libdir}/jstl-1.1.2.jar" usetimestamp="true" ignoreerrors="true" src="http://repo1.maven.org/maven/javax.servlet/jars/jstl-1.1.2.jar">
     </get>
   </target>
   <target name="install-maven">
diff --git a/JodaTimeContrib/jsptags/project.properties b/JodaTimeContrib/jsptags/project.properties
index afd754be0..6cd877958 100644
--- a/JodaTimeContrib/jsptags/project.properties
+++ b/JodaTimeContrib/jsptags/project.properties
@@ -9,8 +9,8 @@ maven.xdoc.locale.default=en
 maven.scm.svn.tag.base=https://svn.sourceforge.net/svnroot/joda-time/tags
 maven.changelog.factory=org.apache.maven.svnlib.SvnChangeLogFactory
 
-maven.compile.target=1.3
-maven.compile.source=1.3
+maven.compile.target=1.4
+maven.compile.source=1.4
 
 maven.checkstyle.properties=checkstyle.xml
 maven.junit.fork=true
diff --git a/JodaTimeContrib/jsptags/src/conf/manifest-additions.txt b/JodaTimeContrib/jsptags/src/conf/manifest-additions.txt
index ad921b9a5..66e49df35 100644
--- a/JodaTimeContrib/jsptags/src/conf/manifest-additions.txt
+++ b/JodaTimeContrib/jsptags/src/conf/manifest-additions.txt
@@ -1,3 +1,3 @@
 Specification-Version: 1.0
-Implementation-Version: 1.0.1
+Implementation-Version: 1.0.2
 Implementation-Vendor-Id: org.joda
\ No newline at end of file
diff --git a/JodaTimeContrib/jsptags/xdocs/changes.xml b/JodaTimeContrib/jsptags/xdocs/changes.xml
index 7c14333d2..549b60d66 100644
--- a/JodaTimeContrib/jsptags/xdocs/changes.xml
+++ b/JodaTimeContrib/jsptags/xdocs/changes.xml
@@ -8,6 +8,15 @@
   <body>
 
     <!-- types are add, fix, remove, update -->
+    <release version="1.0.2" date="2008-03-15" description="Release 1.0.2">
+      <action dev="scolebourne" type="fix">
+        Fix missing properties files in jar.
+      </action>              
+      <action dev="scolebourne" type="fix">
+        Fix maven definition for servlet-api to be provided.
+      </action>              
+    </release>
+
     <release version="1.0.1" date="2007-11-15" description="Release 1.0.1">
       <action dev="scolebourne" type="fix">
         Fix missing directory tag in project.xml.
diff --git a/JodaTimeContrib/jsptags/xdocs/index.xml b/JodaTimeContrib/jsptags/xdocs/index.xml
index a64c8fb31..df44e230b 100644
--- a/JodaTimeContrib/jsptags/xdocs/index.xml
+++ b/JodaTimeContrib/jsptags/xdocs/index.xml
@@ -28,7 +28,7 @@ As a flavour of the tags, here's how to format a Joda-Time object in JSP:
   &lt;% pageContext.setAttribute("now", new org.joda.time.DateTime()); %&gt;
   <b>&lt;joda:format value="${now}" style="SM" /&gt;</b>
 </source>
-Version 1.0.1 was released on 2005-11-15 -
+Version 1.0.2 was released on 2008-03-15 -
 <a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=161360">Download now</a>
 </p>
 </section>
@@ -50,14 +50,14 @@ Various documentation is available:
 
 <section name="Releases">
 <p>
-<a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=161360">Release 1.0.1</a>
+<a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=161360">Release 1.0.2</a>
 is the current latest release.
-This release is a very minor patch to 1.0, simply to fix a maven issue.
+This release is a very minor patch to 1.0, fixing maven issues.
 </p>
 <p>
 The dependencies are Joda-Time 1.0 or later, the Servlet 2.4 API, the JSP 2.0 API,
 and JSTL 1.1 API.
-We recommend JDK 1.4 or later, and have performed no testing on earlier JDKs.
+JDK 1.4 or later is required, and there is no testing on earlier JDKs.
 </p>
 </section>
 
diff --git a/JodaTimeContrib/jsptags/xdocs/userguide.xml b/JodaTimeContrib/jsptags/xdocs/userguide.xml
index c31108206..f48e79d92 100644
--- a/JodaTimeContrib/jsptags/xdocs/userguide.xml
+++ b/JodaTimeContrib/jsptags/xdocs/userguide.xml
@@ -31,7 +31,7 @@ You will need a servlet container which supports Servlet 2.4, JSP 2.0, JSTL 1.1.
 One such container is <a href="http://tomcat.apache.org">Tomcat 5</a>.
 </p>
 <p>
-The simplest setup is to copy the joda-time-1.2.jar and joda-time-jsptags-1.0.1.jar
+The simplest setup is to copy the joda-time-1.2.jar and joda-time-jsptags-1.0.2.jar
 to the WEB-INF/lib directory of your web application.
 </p>
 <p>

From daec3672a32676287832d58e995db79f17b14afc Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 15 Mar 2008 14:56:26 +0000
Subject: [PATCH 07/43] Release scripts

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1332 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/jsptags/bundle.xml  | 74 +++++++++++++++++++++++++++++
 JodaTimeContrib/jsptags/prepare.bat |  3 ++
 JodaTimeContrib/jsptags/release.bat |  6 +++
 3 files changed, 83 insertions(+)
 create mode 100644 JodaTimeContrib/jsptags/bundle.xml
 create mode 100644 JodaTimeContrib/jsptags/prepare.bat
 create mode 100644 JodaTimeContrib/jsptags/release.bat

diff --git a/JodaTimeContrib/jsptags/bundle.xml b/JodaTimeContrib/jsptags/bundle.xml
new file mode 100644
index 000000000..29988223b
--- /dev/null
+++ b/JodaTimeContrib/jsptags/bundle.xml
@@ -0,0 +1,74 @@
+<project name="joda-time-jsptags" default="bundle" basedir=".">
+<!-- ========== Properties ================================================ -->
+
+  <property file="build.properties"/>
+
+<!-- ========== Component Declarations ==================================== -->
+
+  <property name="component.name"          value="joda-time-jsptags"/>
+  <property name="component.version"       value="1.0.2"/>
+  <property name="component.fullname"      value="${component.name}-${component.version}"/>
+
+  <property name="source.home"              value="src/java"/>
+  <property name="target"                   value="target"/>
+  <property name="target.docs"              value="${target}/docs/apidocs"/>
+  <property name="target.sources"           value="${target}/sources"/>
+  <property name="target.javadoc"           value="${target}/javadoc"/>
+  <property name="target.dist"              value="${target}/distributions"/>
+  <property name="target.fullname"          value="${target}/${component.fullname}"/>
+  <property name="target.dist.fullname"     value="${target.dist}/${component.fullname}"/>
+  <property name="target.dist.bundle"       value="${target.dist.fullname}-bundle"/>
+
+<!-- ========== Targets =================================================== -->
+
+  <target name="javadoc.jar">
+    <mkdir      dir="${target.javadoc}"/>
+    <copy     todir="${target.javadoc}">
+  	  <fileset dir="${target.docs}" includes="**/*" />
+  	</copy>
+    <mkdir      dir="${target.javadoc}/META-INF"/>
+    <copy      file="LICENSE.txt"
+             tofile="${target.javadoc}/META-INF/LICENSE.txt"/>
+    <copy      file="NOTICE.txt"
+             tofile="${target.javadoc}/META-INF/NOTICE.txt"/>
+    <jar    jarfile="${target.fullname}-javadoc.jar"
+            basedir="${target.javadoc}" />
+  </target>
+
+<!-- ====================================================================== -->
+
+  <target name="sources.jar">
+    <mkdir      dir="${target.sources}"/>
+    <copy     todir="${target.sources}">
+  	  <fileset dir="${source.home}" includes="**/*.java" />
+  	</copy>
+    <mkdir      dir="${target.sources}/META-INF"/>
+    <copy      file="LICENSE.txt"
+             tofile="${target.sources}/META-INF/LICENSE.txt"/>
+    <copy      file="NOTICE.txt"
+             tofile="${target.sources}/META-INF/NOTICE.txt"/>
+    <jar    jarfile="${target.fullname}-sources.jar"
+            basedir="${target.sources}" />
+  </target>
+
+<!-- ====================================================================== -->
+
+  <target name="bundle" depends="sources.jar,javadoc.jar" description="Create maven upload bundle">
+    <delete     dir="${target.dist.bundle}"/>
+    <mkdir      dir="${target.dist.bundle}"/>
+    <copy      file="LICENSE.txt" todir="${target.dist.bundle}"/>
+    <copy      file="NOTICE.txt" todir="${target.dist.bundle}"/>
+    <copy      file="project.xml" todir="${target.dist.bundle}"/>
+    <copy      file="${target.fullname}.jar"
+              todir="${target.dist.bundle}"/>
+    <copy      file="${target.fullname}-sources.jar"
+              todir="${target.dist.bundle}"/>
+	<copy      file="${target.fullname}-javadoc.jar"
+	          todir="${target.dist.bundle}"/>
+    
+	<fixcrlf srcdir="${target.dist.bundle}" eol="crlf" includes="*.txt"/>
+	<jar    jarfile="${target.fullname}-bundle.jar" basedir="${target.dist.bundle}"/>
+    <delete     dir="${target.dist.bundle}"/>
+  </target>
+
+</project>
diff --git a/JodaTimeContrib/jsptags/prepare.bat b/JodaTimeContrib/jsptags/prepare.bat
new file mode 100644
index 000000000..8d9df3830
--- /dev/null
+++ b/JodaTimeContrib/jsptags/prepare.bat
@@ -0,0 +1,3 @@
+SET JAVA_HOME=C:\java\jdk1.4.2
+call maven clean dist site
+call ant -f bundle.xml
\ No newline at end of file
diff --git a/JodaTimeContrib/jsptags/release.bat b/JodaTimeContrib/jsptags/release.bat
new file mode 100644
index 000000000..4f8b4598b
--- /dev/null
+++ b/JodaTimeContrib/jsptags/release.bat
@@ -0,0 +1,6 @@
+call maven site:sshdeploy
+cd target
+pscp joda-time-jsptags-1.0.2-bundle.jar scolebourne@shell.sourceforge.net:/home/groups/j/jo/joda-time/htdocs
+cd ..
+svn mkdir "https://joda-time.svn.sourceforge.net/svnroot/joda-time/tags/JSPTAGS_v1_0_2" -m "Release 1.0.2"
+svn copy https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk/JodaTimeContrib/jsptags https://joda-time.svn.sourceforge.net/svnroot/joda-time/tags/JSPTAGS_v1_0_2/jsptags -m "Release 1.0.2"
\ No newline at end of file

From 826d38bc0f4eb366844748dbf2555794b34816de Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 15 Mar 2008 16:20:06 +0000
Subject: [PATCH 08/43] Switch to make v1.6 the next release

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1333 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt | 21 ++++++++-------------
 1 file changed, 8 insertions(+), 13 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 1b47ec4db..e49564b9f 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -1,12 +1,11 @@
-Joda-Time version 1.5.3
------------------------
+Joda-Time version 1.6
+---------------------
 
 Joda-Time is a date and time handling library that seeks to replace the JDK
 Date and Calendar classes.
 
-This is a patch release for Joda-Time 1.5.2.
-This release contains one bug fix and a time zone update.
-We recommend all users of 1.5.x upgrade to 1.5.3.
+This is the seventh release of Joda-Time.
+This release contains enhancements, bug fixes and a time zone update.
 
 We recommend JDK 1.4 or later, and have performed no testing on earlier JDKs.
 
@@ -41,7 +40,7 @@ Deprecations since 1.5
 ----------------------
 
 
-Bug fixes since 1.5.2
+Bug fixes since 1.5
 ---------------------
 - ZonedChronology (regression from 1.4) [1887104]
   Fix to roundFloor/roundCeiling
@@ -51,18 +50,14 @@ Bug fixes since 1.5.2
   Time zone formats were incorrectly documented as 'Z' instead of 'ZZ'
   Javadoc only change
 
-Bug fixes since 1.5.1
----------------------
-- DateTimeZone (regression from 1.4)
+- DateTimeZone (regression from 1.4) [fix also available in v1.5.2]
   Fix getOffsetFromLocal DST gap adjustment
   Bug affected parsing of DST cutover in Autumn
 
-Bug fixes since 1.5
--------------------
-- Parsing (regression from 1.4) [1839440]
+- Parsing (regression from 1.4) [1839440] [fix also available in v1.5.1]
   Support parsing all upper-case and all lower-case text
 
-- Javadoc clarity enhancements
+- Javadoc clarity enhancements [fix also available in v1.5.1]
   - Constants in Years/Months/Weeks/Days/Hours/Minutes/Seconds etc.
   - Period/Interval Object constructors
 

From 582ba2eaffbb3d0fac2a1b938e1a7d3284146624 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 15 Mar 2008 16:29:45 +0000
Subject: [PATCH 09/43] Fixed offset time zones calculated incorrect periods -
 fix isPrecise()

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1334 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  8 +++++-
 .../org/joda/time/chrono/ZonedChronology.java |  2 +-
 .../time/chrono/TestBuddhistChronology.java   | 13 ++++++++++
 .../time/chrono/TestCopticChronology.java     | 13 ++++++++++
 .../time/chrono/TestEthiopicChronology.java   | 13 ++++++++++
 .../joda/time/chrono/TestGJChronology.java    | 13 ++++++++++
 .../time/chrono/TestGregorianChronology.java  | 13 ++++++++++
 .../joda/time/chrono/TestISOChronology.java   | 26 +++++++++++++++++++
 .../time/chrono/TestIslamicChronology.java    | 13 ++++++++++
 .../time/chrono/TestJulianChronology.java     | 13 ++++++++++
 10 files changed, 125 insertions(+), 2 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index e49564b9f..2b053bd4e 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -41,7 +41,13 @@ Deprecations since 1.5
 
 
 Bug fixes since 1.5
----------------------
+-------------------
+- Fixed offset time zones calculated incorrect periods
+  ZonedChronology.ZonedDuration.isPrecise() did not take into account
+  the decorated isPrecise() value. This meant that date fields for fixed
+  offset time zones were always considered precise. The result was periods
+  containing months and years when they should not have done.
+
 - ZonedChronology (regression from 1.4) [1887104]
   Fix to roundFloor/roundCeiling
   Bug affected DST cutover in Autumn for time fields (not date fields)
diff --git a/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java b/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java
index c518b9ad4..e2cf1275b 100644
--- a/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java
@@ -291,7 +291,7 @@ public String toString() {
         }
 
         public boolean isPrecise() {
-            return iTimeField ? iField.isPrecise() : this.iZone.isFixed();
+            return iTimeField ? iField.isPrecise() : iField.isPrecise() && this.iZone.isFixed();
         }
 
         public long getUnitMillis() {
diff --git a/JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java b/JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java
index 8b10a6009..873926eef 100644
--- a/JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java
+++ b/JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java
@@ -193,6 +193,19 @@ public void testDurationFields() {
         assertEquals(true, BuddhistChronology.getInstanceUTC().minutes().isPrecise());
         assertEquals(true, BuddhistChronology.getInstanceUTC().seconds().isPrecise());
         assertEquals(true, BuddhistChronology.getInstanceUTC().millis().isPrecise());
+        
+        DateTimeZone gmt = DateTimeZone.forID("Etc/GMT");
+        assertEquals(false, BuddhistChronology.getInstance(gmt).centuries().isPrecise());
+        assertEquals(false, BuddhistChronology.getInstance(gmt).years().isPrecise());
+        assertEquals(false, BuddhistChronology.getInstance(gmt).weekyears().isPrecise());
+        assertEquals(false, BuddhistChronology.getInstance(gmt).months().isPrecise());
+        assertEquals(true, BuddhistChronology.getInstance(gmt).weeks().isPrecise());
+        assertEquals(true, BuddhistChronology.getInstance(gmt).days().isPrecise());
+        assertEquals(true, BuddhistChronology.getInstance(gmt).halfdays().isPrecise());
+        assertEquals(true, BuddhistChronology.getInstance(gmt).hours().isPrecise());
+        assertEquals(true, BuddhistChronology.getInstance(gmt).minutes().isPrecise());
+        assertEquals(true, BuddhistChronology.getInstance(gmt).seconds().isPrecise());
+        assertEquals(true, BuddhistChronology.getInstance(gmt).millis().isPrecise());
     }
 
     public void testDateFields() {
diff --git a/JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java b/JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java
index 65a2494c5..4c9531688 100644
--- a/JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java
+++ b/JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java
@@ -195,6 +195,19 @@ public void testDurationFields() {
         assertEquals(true, CopticChronology.getInstanceUTC().minutes().isPrecise());
         assertEquals(true, CopticChronology.getInstanceUTC().seconds().isPrecise());
         assertEquals(true, CopticChronology.getInstanceUTC().millis().isPrecise());
+        
+        DateTimeZone gmt = DateTimeZone.forID("Etc/GMT");
+        assertEquals(false, CopticChronology.getInstance(gmt).centuries().isPrecise());
+        assertEquals(false, CopticChronology.getInstance(gmt).years().isPrecise());
+        assertEquals(false, CopticChronology.getInstance(gmt).weekyears().isPrecise());
+        assertEquals(false, CopticChronology.getInstance(gmt).months().isPrecise());
+        assertEquals(true, CopticChronology.getInstance(gmt).weeks().isPrecise());
+        assertEquals(true, CopticChronology.getInstance(gmt).days().isPrecise());
+        assertEquals(true, CopticChronology.getInstance(gmt).halfdays().isPrecise());
+        assertEquals(true, CopticChronology.getInstance(gmt).hours().isPrecise());
+        assertEquals(true, CopticChronology.getInstance(gmt).minutes().isPrecise());
+        assertEquals(true, CopticChronology.getInstance(gmt).seconds().isPrecise());
+        assertEquals(true, CopticChronology.getInstance(gmt).millis().isPrecise());
     }
 
     public void testDateFields() {
diff --git a/JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java b/JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java
index fe0434a2d..1eacbdec3 100644
--- a/JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java
+++ b/JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java
@@ -195,6 +195,19 @@ public void testDurationFields() {
         assertEquals(true, EthiopicChronology.getInstanceUTC().minutes().isPrecise());
         assertEquals(true, EthiopicChronology.getInstanceUTC().seconds().isPrecise());
         assertEquals(true, EthiopicChronology.getInstanceUTC().millis().isPrecise());
+        
+        DateTimeZone gmt = DateTimeZone.forID("Etc/GMT");
+        assertEquals(false, EthiopicChronology.getInstance(gmt).centuries().isPrecise());
+        assertEquals(false, EthiopicChronology.getInstance(gmt).years().isPrecise());
+        assertEquals(false, EthiopicChronology.getInstance(gmt).weekyears().isPrecise());
+        assertEquals(false, EthiopicChronology.getInstance(gmt).months().isPrecise());
+        assertEquals(true, EthiopicChronology.getInstance(gmt).weeks().isPrecise());
+        assertEquals(true, EthiopicChronology.getInstance(gmt).days().isPrecise());
+        assertEquals(true, EthiopicChronology.getInstance(gmt).halfdays().isPrecise());
+        assertEquals(true, EthiopicChronology.getInstance(gmt).hours().isPrecise());
+        assertEquals(true, EthiopicChronology.getInstance(gmt).minutes().isPrecise());
+        assertEquals(true, EthiopicChronology.getInstance(gmt).seconds().isPrecise());
+        assertEquals(true, EthiopicChronology.getInstance(gmt).millis().isPrecise());
     }
 
     public void testDateFields() {
diff --git a/JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java b/JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java
index 01eb4b2d7..f517b9fa4 100644
--- a/JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java
+++ b/JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java
@@ -243,6 +243,19 @@ public void testDurationFields() {
         assertEquals(true, GJChronology.getInstanceUTC().minutes().isPrecise());
         assertEquals(true, GJChronology.getInstanceUTC().seconds().isPrecise());
         assertEquals(true, GJChronology.getInstanceUTC().millis().isPrecise());
+        
+        DateTimeZone gmt = DateTimeZone.forID("Etc/GMT");
+        assertEquals(false, GJChronology.getInstance(gmt).centuries().isPrecise());
+        assertEquals(false, GJChronology.getInstance(gmt).years().isPrecise());
+        assertEquals(false, GJChronology.getInstance(gmt).weekyears().isPrecise());
+        assertEquals(false, GJChronology.getInstance(gmt).months().isPrecise());
+        assertEquals(true, GJChronology.getInstance(gmt).weeks().isPrecise());
+        assertEquals(true, GJChronology.getInstance(gmt).days().isPrecise());
+        assertEquals(true, GJChronology.getInstance(gmt).halfdays().isPrecise());
+        assertEquals(true, GJChronology.getInstance(gmt).hours().isPrecise());
+        assertEquals(true, GJChronology.getInstance(gmt).minutes().isPrecise());
+        assertEquals(true, GJChronology.getInstance(gmt).seconds().isPrecise());
+        assertEquals(true, GJChronology.getInstance(gmt).millis().isPrecise());
     }
 
     public void testDateFields() {
diff --git a/JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java b/JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java
index 373f0c2aa..de7630006 100644
--- a/JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java
+++ b/JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java
@@ -200,6 +200,19 @@ public void testDurationFields() {
         assertEquals(true, GregorianChronology.getInstanceUTC().minutes().isPrecise());
         assertEquals(true, GregorianChronology.getInstanceUTC().seconds().isPrecise());
         assertEquals(true, GregorianChronology.getInstanceUTC().millis().isPrecise());
+        
+        DateTimeZone gmt = DateTimeZone.forID("Etc/GMT");
+        assertEquals(false, GregorianChronology.getInstance(gmt).centuries().isPrecise());
+        assertEquals(false, GregorianChronology.getInstance(gmt).years().isPrecise());
+        assertEquals(false, GregorianChronology.getInstance(gmt).weekyears().isPrecise());
+        assertEquals(false, GregorianChronology.getInstance(gmt).months().isPrecise());
+        assertEquals(true, GregorianChronology.getInstance(gmt).weeks().isPrecise());
+        assertEquals(true, GregorianChronology.getInstance(gmt).days().isPrecise());
+        assertEquals(true, GregorianChronology.getInstance(gmt).halfdays().isPrecise());
+        assertEquals(true, GregorianChronology.getInstance(gmt).hours().isPrecise());
+        assertEquals(true, GregorianChronology.getInstance(gmt).minutes().isPrecise());
+        assertEquals(true, GregorianChronology.getInstance(gmt).seconds().isPrecise());
+        assertEquals(true, GregorianChronology.getInstance(gmt).millis().isPrecise());
     }
 
     public void testDateFields() {
diff --git a/JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java b/JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java
index 7f3c7f6db..83001cd64 100644
--- a/JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java
+++ b/JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java
@@ -190,6 +190,32 @@ public void testDurationFields() {
         assertEquals(true, ISOChronology.getInstanceUTC().minutes().isPrecise());
         assertEquals(true, ISOChronology.getInstanceUTC().seconds().isPrecise());
         assertEquals(true, ISOChronology.getInstanceUTC().millis().isPrecise());
+        
+        DateTimeZone gmt = DateTimeZone.forID("Etc/GMT");
+        assertEquals(false, ISOChronology.getInstance(gmt).centuries().isPrecise());
+        assertEquals(false, ISOChronology.getInstance(gmt).years().isPrecise());
+        assertEquals(false, ISOChronology.getInstance(gmt).weekyears().isPrecise());
+        assertEquals(false, ISOChronology.getInstance(gmt).months().isPrecise());
+        assertEquals(true, ISOChronology.getInstance(gmt).weeks().isPrecise());
+        assertEquals(true, ISOChronology.getInstance(gmt).days().isPrecise());
+        assertEquals(true, ISOChronology.getInstance(gmt).halfdays().isPrecise());
+        assertEquals(true, ISOChronology.getInstance(gmt).hours().isPrecise());
+        assertEquals(true, ISOChronology.getInstance(gmt).minutes().isPrecise());
+        assertEquals(true, ISOChronology.getInstance(gmt).seconds().isPrecise());
+        assertEquals(true, ISOChronology.getInstance(gmt).millis().isPrecise());
+        
+        DateTimeZone offset = DateTimeZone.forOffsetHours(1);
+        assertEquals(false, ISOChronology.getInstance(offset).centuries().isPrecise());
+        assertEquals(false, ISOChronology.getInstance(offset).years().isPrecise());
+        assertEquals(false, ISOChronology.getInstance(offset).weekyears().isPrecise());
+        assertEquals(false, ISOChronology.getInstance(offset).months().isPrecise());
+        assertEquals(true, ISOChronology.getInstance(offset).weeks().isPrecise());
+        assertEquals(true, ISOChronology.getInstance(offset).days().isPrecise());
+        assertEquals(true, ISOChronology.getInstance(offset).halfdays().isPrecise());
+        assertEquals(true, ISOChronology.getInstance(offset).hours().isPrecise());
+        assertEquals(true, ISOChronology.getInstance(offset).minutes().isPrecise());
+        assertEquals(true, ISOChronology.getInstance(offset).seconds().isPrecise());
+        assertEquals(true, ISOChronology.getInstance(offset).millis().isPrecise());
     }
 
     public void testDateFields() {
diff --git a/JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java b/JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java
index 29d98090a..a7e7d2c78 100644
--- a/JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java
+++ b/JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java
@@ -192,6 +192,19 @@ public void testDurationFields() {
         assertEquals(true, IslamicChronology.getInstanceUTC().minutes().isPrecise());
         assertEquals(true, IslamicChronology.getInstanceUTC().seconds().isPrecise());
         assertEquals(true, IslamicChronology.getInstanceUTC().millis().isPrecise());
+        
+        DateTimeZone gmt = DateTimeZone.forID("Etc/GMT");
+        assertEquals(false, IslamicChronology.getInstance(gmt).centuries().isPrecise());
+        assertEquals(false, IslamicChronology.getInstance(gmt).years().isPrecise());
+        assertEquals(false, IslamicChronology.getInstance(gmt).weekyears().isPrecise());
+        assertEquals(false, IslamicChronology.getInstance(gmt).months().isPrecise());
+        assertEquals(true, IslamicChronology.getInstance(gmt).weeks().isPrecise());
+        assertEquals(true, IslamicChronology.getInstance(gmt).days().isPrecise());
+        assertEquals(true, IslamicChronology.getInstance(gmt).halfdays().isPrecise());
+        assertEquals(true, IslamicChronology.getInstance(gmt).hours().isPrecise());
+        assertEquals(true, IslamicChronology.getInstance(gmt).minutes().isPrecise());
+        assertEquals(true, IslamicChronology.getInstance(gmt).seconds().isPrecise());
+        assertEquals(true, IslamicChronology.getInstance(gmt).millis().isPrecise());
     }
 
     public void testDateFields() {
diff --git a/JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java b/JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java
index 8b06d799d..3a344677c 100644
--- a/JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java
+++ b/JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java
@@ -197,6 +197,19 @@ public void testDurationFields() {
         assertEquals(true, JulianChronology.getInstanceUTC().minutes().isPrecise());
         assertEquals(true, JulianChronology.getInstanceUTC().seconds().isPrecise());
         assertEquals(true, JulianChronology.getInstanceUTC().millis().isPrecise());
+        
+        DateTimeZone gmt = DateTimeZone.forID("Etc/GMT");
+        assertEquals(false, JulianChronology.getInstance(gmt).centuries().isPrecise());
+        assertEquals(false, JulianChronology.getInstance(gmt).years().isPrecise());
+        assertEquals(false, JulianChronology.getInstance(gmt).weekyears().isPrecise());
+        assertEquals(false, JulianChronology.getInstance(gmt).months().isPrecise());
+        assertEquals(true, JulianChronology.getInstance(gmt).weeks().isPrecise());
+        assertEquals(true, JulianChronology.getInstance(gmt).days().isPrecise());
+        assertEquals(true, JulianChronology.getInstance(gmt).halfdays().isPrecise());
+        assertEquals(true, JulianChronology.getInstance(gmt).hours().isPrecise());
+        assertEquals(true, JulianChronology.getInstance(gmt).minutes().isPrecise());
+        assertEquals(true, JulianChronology.getInstance(gmt).seconds().isPrecise());
+        assertEquals(true, JulianChronology.getInstance(gmt).millis().isPrecise());
     }
 
     public void testDateFields() {

From 28676c0f9eccd0dc892b0fed21542835be82a909 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 15 Mar 2008 16:31:24 +0000
Subject: [PATCH 10/43] Release scripts

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1335 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/prepare.bat | 3 +++
 JodaTime/release.bat | 6 ++++++
 2 files changed, 9 insertions(+)
 create mode 100644 JodaTime/prepare.bat
 create mode 100644 JodaTime/release.bat

diff --git a/JodaTime/prepare.bat b/JodaTime/prepare.bat
new file mode 100644
index 000000000..5991965ba
--- /dev/null
+++ b/JodaTime/prepare.bat
@@ -0,0 +1,3 @@
+SET JAVA_HOME=C:\java\jdk1.4.2
+call ant clean dist
+call maven clean site
diff --git a/JodaTime/release.bat b/JodaTime/release.bat
new file mode 100644
index 000000000..154d9e6f3
--- /dev/null
+++ b/JodaTime/release.bat
@@ -0,0 +1,6 @@
+call maven site:sshdeploy
+cd build
+pscp joda-time-1.6-bundle.jar scolebourne@shell.sourceforge.net:/home/groups/j/jo/joda-time/htdocs
+cd ..
+svn mkdir "https://joda-time.svn.sourceforge.net/svnroot/joda-time/tags/v1_6_000" -m "Release 1.6"
+svn copy https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk/JodaTime https://joda-time.svn.sourceforge.net/svnroot/joda-time/tags/v1_6_000/JodaTime -m "Release 1.6"
\ No newline at end of file

From 97c6db8aed2dd4bc384acee91ae7006feb61f459 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 15 Mar 2008 16:32:56 +0000
Subject: [PATCH 11/43] Prepare for v1.6

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1336 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/build.xml              |  4 ++--
 JodaTime/project.xml            |  2 +-
 JodaTime/src/conf/MANIFEST.MF   |  4 ++--
 JodaTime/xdocs/index.xml        |  4 ++--
 JodaTime/xdocs/installation.xml |  5 +++--
 JodaTime/xdocs/upgradeto160.xml | 21 +++++++++++++++++++++
 6 files changed, 31 insertions(+), 9 deletions(-)
 create mode 100644 JodaTime/xdocs/upgradeto160.xml

diff --git a/JodaTime/build.xml b/JodaTime/build.xml
index 5695beb19..8ee3325c1 100644
--- a/JodaTime/build.xml
+++ b/JodaTime/build.xml
@@ -27,8 +27,8 @@
   <property name="component.title"         value="Joda date and time"/>
 
   <!-- The current version number of this component -->
-  <property name="component.version"       value="1.5.2"/>
-  <property name="previous.version"        value="1.5.1"/>
+  <property name="component.version"       value="1.6"/>
+  <property name="previous.version"        value="1.5.2"/>
 
   <!-- The current version number of this component -->
   <property name="component.fullname"      value="${component.name}-${component.version}"/>
diff --git a/JodaTime/project.xml b/JodaTime/project.xml
index 55a2ddadd..33c5d7cc5 100644
--- a/JodaTime/project.xml
+++ b/JodaTime/project.xml
@@ -7,7 +7,7 @@
   <groupId>joda-time</groupId>
   <artifactId>joda-time</artifactId>
   <name>Joda time</name>
-  <currentVersion>1.5.2</currentVersion>
+  <currentVersion>1.6</currentVersion>
   <organization>
     <name>Joda.org</name>
     <url>http://www.joda.org</url>
diff --git a/JodaTime/src/conf/MANIFEST.MF b/JodaTime/src/conf/MANIFEST.MF
index 3030e195b..5dd4c7cc6 100644
--- a/JodaTime/src/conf/MANIFEST.MF
+++ b/JodaTime/src/conf/MANIFEST.MF
@@ -2,8 +2,8 @@ Package: org.joda.time
 Extension-Name: joda-time
 Specification-Title: Joda-Time
 Specification-Vendor: Joda.org
-Specification-Version: 1.5
+Specification-Version: 1.6
 Implementation-Vendor: Joda.org
 Implementation-Title: org.joda.time
-Implementation-Version: 1.5.2
+Implementation-Version: 1.6
 Implementation-Vendor-Id: org.joda
diff --git a/JodaTime/xdocs/index.xml b/JodaTime/xdocs/index.xml
index 8afc661f7..6f08ee510 100644
--- a/JodaTime/xdocs/index.xml
+++ b/JodaTime/xdocs/index.xml
@@ -58,7 +58,7 @@ public boolean isJoinedInLastThreeMonths(<a href="api-release/index.html?org/jod
   return last3Months.contains(datetimeJoined);
 }
 -->
-Version 1.5.2 was released on 2008-01-26 -
+Version 1.6 was released on 2008-XX-XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX -
 <a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=104212">Download now</a>
 </p>
 </section>
@@ -143,7 +143,7 @@ Various documentation is available:
 
 <section name="Releases">
 <p>
-<a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=104212">Release 1.5.2</a>
+<a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=104212">Release 1.6</a>
 is the current latest release.
 This release is considered stable and worthy of the 1.x tag.
 It has extensive testing suites and has been used in production.
diff --git a/JodaTime/xdocs/installation.xml b/JodaTime/xdocs/installation.xml
index 01f29539e..46c699c06 100644
--- a/JodaTime/xdocs/installation.xml
+++ b/JodaTime/xdocs/installation.xml
@@ -12,16 +12,17 @@
 <p>
 To use Joda-Time you need to
 <a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=104212">download the latest version</a>.
-The download will contain the joda-time-1.5.2.jar.
+The download will contain the joda-time-1.6.jar.
 Once you add this to your classpath you will be able to use Joda-Time.
 </p>
 <p>
-The binary download also includes joda-time-1.5.2-sources.jar, which is a jar file
+The binary download also includes joda-time-1.6-sources.jar, which is a jar file
 of the source code suitable for linking to the jar file in IDEs such as Eclipse.
 </p>
 <p>
 The release notes for upgraders can be found here:
 <ul>
+<li><a href="upgradeto160.html">Version 1.5 to Version 1.6</a></li>
 <li><a href="upgradeto152.html">Version 1.5.1 to Version 1.5.2</a></li>
 <li><a href="upgradeto151.html">Version 1.5 to Version 1.5.1</a></li>
 <li><a href="upgradeto150.html">Version 1.4 to Version 1.5</a></li>
diff --git a/JodaTime/xdocs/upgradeto160.xml b/JodaTime/xdocs/upgradeto160.xml
new file mode 100644
index 000000000..11b59ac8e
--- /dev/null
+++ b/JodaTime/xdocs/upgradeto160.xml
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+
+<document>
+ <properties>
+  <title>Java date and time API - Upgrade from 1.5 to 1.6</title>
+  <author email="scolebourne.at.users.sourceforge.net">Stephen Colebourne</author>
+ </properties>
+
+<body>
+
+<section name="Upgrade">
+<p>
+These are the release notes and advice for upgrading Joda-Time from
+version 1.5 to version 1.6.
+<source>
+</source>
+</p>
+</section>
+
+</body>
+</document>

From 1b5988e323078979f1a2af075c925e3d668ecefe Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 15 Mar 2008 16:41:00 +0000
Subject: [PATCH 12/43] DateTimeFormat.forFields(List) method can't handle
 immutable [1877843]

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1337 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  4 ++
 .../joda/time/format/ISODateTimeFormat.java   | 53 +++++++++++++------
 .../format/TestISODateTimeFormat_Fields.java  | 45 ++++++++++++++++
 3 files changed, 86 insertions(+), 16 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 2b053bd4e..378e874fd 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -42,6 +42,10 @@ Deprecations since 1.5
 
 Bug fixes since 1.5
 -------------------
+- DateTimeFormat.forFields(List) method can't handle immutable [1877843]
+  Fix so that the method does not throw an exception when an unmodifiable
+  list is passed in
+
 - Fixed offset time zones calculated incorrect periods
   ZonedChronology.ZonedDuration.isPrecise() did not take into account
   the decorated isPrecise() value. This meant that date fields for fixed
diff --git a/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java b/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java
index 1fa3ada97..40cfbcda3 100644
--- a/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java
+++ b/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java
@@ -16,6 +16,8 @@
 package org.joda.time.format;
 
 import java.util.Collection;
+import java.util.HashSet;
+import java.util.Set;
 
 import org.joda.time.DateTimeFieldType;
 import org.joda.time.DateTimeZone;
@@ -203,9 +205,19 @@ protected ISODateTimeFormat() {
      * </pre>
      * * indiates that this is not an official ISO format and can be excluded
      * by passing in <code>strictISO</code> as <code>true</code>.
+     * <p>
+     * This method can side effect the input collection of fields.
+     * If the input collection is modifiable, then each field that was added to
+     * the formatter will be removed from the collection, including any duplicates.
+     * If the input collection is unmodifiable then no side effect occurs.
+     * <p>
+     * This side effect processing is useful if you need to know whether all
+     * the fields were converted into the formatter or not. To achieve this,
+     * pass in a modifiable list, and check that it is empty on exit.
      *
      * @param fields  the fields to get a formatter for, not null,
-     *  updated by the method call, which removes those fields built in the formatter
+     *  updated by the method call unless unmodifiable,
+     *  removing those fields built in the formatter
      * @param extended  true to use the extended format (with separators)
      * @param strictISO  true to stick exactly to ISO8601, false to include additional formats
      * @return a suitable formatter
@@ -220,36 +232,45 @@ public static DateTimeFormatter forFields(
         if (fields == null || fields.size() == 0) {
             throw new IllegalArgumentException("The fields must not be null or empty");
         }
-        int inputSize = fields.size();
+        Set workingFields = new HashSet(fields);
+        int inputSize = workingFields.size();
         boolean reducedPrec = false;
         DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();
         // date
-        if (fields.contains(DateTimeFieldType.monthOfYear())) {
-            reducedPrec = dateByMonth(bld, fields, extended, strictISO);
-        } else if (fields.contains(DateTimeFieldType.dayOfYear())) {
-            reducedPrec = dateByOrdinal(bld, fields, extended, strictISO);
-        } else if (fields.contains(DateTimeFieldType.weekOfWeekyear())) {
-            reducedPrec = dateByWeek(bld, fields, extended, strictISO);
-        } else if (fields.contains(DateTimeFieldType.dayOfMonth())) {
-            reducedPrec = dateByMonth(bld, fields, extended, strictISO);
-        } else if (fields.contains(DateTimeFieldType.dayOfWeek())) {
-            reducedPrec = dateByWeek(bld, fields, extended, strictISO);
-        } else if (fields.remove(DateTimeFieldType.year())) {
+        if (workingFields.contains(DateTimeFieldType.monthOfYear())) {
+            reducedPrec = dateByMonth(bld, workingFields, extended, strictISO);
+        } else if (workingFields.contains(DateTimeFieldType.dayOfYear())) {
+            reducedPrec = dateByOrdinal(bld, workingFields, extended, strictISO);
+        } else if (workingFields.contains(DateTimeFieldType.weekOfWeekyear())) {
+            reducedPrec = dateByWeek(bld, workingFields, extended, strictISO);
+        } else if (workingFields.contains(DateTimeFieldType.dayOfMonth())) {
+            reducedPrec = dateByMonth(bld, workingFields, extended, strictISO);
+        } else if (workingFields.contains(DateTimeFieldType.dayOfWeek())) {
+            reducedPrec = dateByWeek(bld, workingFields, extended, strictISO);
+        } else if (workingFields.remove(DateTimeFieldType.year())) {
             bld.append(yearElement());
             reducedPrec = true;
-        } else if (fields.remove(DateTimeFieldType.weekyear())) {
+        } else if (workingFields.remove(DateTimeFieldType.weekyear())) {
             bld.append(weekyearElement());
             reducedPrec = true;
         }
-        boolean datePresent = (fields.size() < inputSize);
+        boolean datePresent = (workingFields.size() < inputSize);
         
         // time
-        time(bld, fields, extended, strictISO, reducedPrec, datePresent);
+        time(bld, workingFields, extended, strictISO, reducedPrec, datePresent);
         
         // result
         if (bld.canBuildFormatter() == false) {
             throw new IllegalArgumentException("No valid format for fields: " + fields);
         }
+        
+        // side effect the input collection to indicate the processed fields
+        // handling unmodifiable collections with no side effect
+        try {
+            fields.retainAll(workingFields);
+        } catch (UnsupportedOperationException ex) {
+            // ignore, so we can handle unmodifiable collections
+        }
         return bld.toFormatter();
     }
 
diff --git a/JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat_Fields.java b/JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat_Fields.java
index 5e0fd9ad3..0d3b17082 100644
--- a/JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat_Fields.java
+++ b/JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat_Fields.java
@@ -18,6 +18,7 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
+import java.util.Collections;
 import java.util.List;
 
 import junit.framework.TestCase;
@@ -98,6 +99,50 @@ public void testForFields_calBased_YMD() {
         assertEquals(0, types.size());
     }
 
+    //-----------------------------------------------------------------------
+    public void testForFields_calBased_YMD_unmodifiable() {
+        DateTimeFieldType[] fields = new DateTimeFieldType[] {
+                DateTimeFieldType.year(),
+                DateTimeFieldType.monthOfYear(),
+                DateTimeFieldType.dayOfMonth(),
+        };
+        int[] values = new int[] {2005, 6, 25};
+        List types = Collections.unmodifiableList(new ArrayList(Arrays.asList(fields)));
+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);
+        assertEquals("2005-06-25", f.print(new Partial(fields, values)));
+        assertEquals(3, types.size());
+        
+        types = Arrays.asList(fields);
+        f = ISODateTimeFormat.forFields(types, true, true);
+        assertEquals("2005-06-25", f.print(new Partial(fields, values)));
+        assertEquals(3, types.size());
+    }
+
+    //-----------------------------------------------------------------------
+    public void testForFields_calBased_YMD_duplicates() {
+        DateTimeFieldType[] fields = new DateTimeFieldType[] {
+                DateTimeFieldType.year(),
+                DateTimeFieldType.monthOfYear(),
+                DateTimeFieldType.dayOfMonth(),
+        };
+        DateTimeFieldType[] dupFields = new DateTimeFieldType[] {
+                DateTimeFieldType.year(),
+                DateTimeFieldType.monthOfYear(),
+                DateTimeFieldType.dayOfMonth(),
+                DateTimeFieldType.monthOfYear(),
+        };
+        int[] values = new int[] {2005, 6, 25};
+        List types = new ArrayList(Arrays.asList(dupFields));
+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);
+        assertEquals("2005-06-25", f.print(new Partial(fields, values)));
+        assertEquals(0, types.size());
+        
+        types = Arrays.asList(dupFields);
+        f = ISODateTimeFormat.forFields(types, true, true);
+        assertEquals("2005-06-25", f.print(new Partial(fields, values)));
+        assertEquals(4, types.size());
+    }
+
     //-----------------------------------------------------------------------
     public void testForFields_calBased_Y() {
         DateTimeFieldType[] fields = new DateTimeFieldType[] {

From b89707e61489ca36c1e02819a24c3bba57f3f59e Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 15 Mar 2008 17:13:16 +0000
Subject: [PATCH 13/43] Add static factory methods to Duration [1909376]

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1338 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  4 +
 JodaTime/src/java/org/joda/time/Duration.java | 90 +++++++++++++++++++
 .../joda/time/TestDuration_Constructors.java  | 48 ++++++++++
 3 files changed, 142 insertions(+)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 378e874fd..fa4fe9996 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -20,6 +20,10 @@ of restrictions. If the license causes you problems please contact the mailing l
 
 Enhancements since 1.5
 ----------------------
+- Add static factory methods to Duration [1909376]
+  Duration now has four factory methods, standardDays(), standardHours(),
+  standardMinutes() and standardSeconds(). These create durations of the
+  length normally associated with a day/hour/minute/second
 
 
 Compatibility with 1.5
diff --git a/JodaTime/src/java/org/joda/time/Duration.java b/JodaTime/src/java/org/joda/time/Duration.java
index a76f7cc09..433646f05 100644
--- a/JodaTime/src/java/org/joda/time/Duration.java
+++ b/JodaTime/src/java/org/joda/time/Duration.java
@@ -44,6 +44,96 @@
     /** Serialization version */
     private static final long serialVersionUID = 2471658376918L;
 
+    //-----------------------------------------------------------------------
+    /**
+     * Create a duration with the specified number of days assuming that
+     * there are the standard number of milliseconds in a day.
+     * <p>
+     * This method assumes that there are 24 hours in a day,
+     * 60 minutes in an hour, 60 seconds in a minute and 1000 milliseconds in
+     * a second. This will be true for most days, however days with Daylight
+     * Savings changes will not have 24 hours, so use this method with care.
+     * <p>
+     * A Duration is a representation of an amount of time. If you want to express
+     * the concepts of 'days' you should consider using the {@link Days} class.
+     *
+     * @param days  the number of standard days in this duration
+     * @return the duration, never null
+     * @throws ArithmeticException if the days value is too large
+     */
+    public static Duration standardDays(long days) {
+        if (days == 0) {
+            return ZERO;
+        }
+        return new Duration(FieldUtils.safeMultiply(days, DateTimeConstants.MILLIS_PER_DAY));
+    }
+
+    /**
+     * Create a duration with the specified number of hours assuming that
+     * there are the standard number of milliseconds in an hour.
+     * <p>
+     * This method assumes that there are 60 minutes in an hour,
+     * 60 seconds in a minute and 1000 milliseconds in a second.
+     * All currently supplied chronologies use this definition.
+     * <p>
+     * A Duration is a representation of an amount of time. If you want to express
+     * the concepts of 'hours' you should consider using the {@link Hours} class.
+     *
+     * @param hours  the number of standard hours in this duration
+     * @return the duration, never null
+     * @throws ArithmeticException if the hours value is too large
+     */
+    public static Duration standardHours(long hours) {
+        if (hours == 0) {
+            return ZERO;
+        }
+        return new Duration(FieldUtils.safeMultiply(hours, DateTimeConstants.MILLIS_PER_HOUR));
+    }
+
+    /**
+     * Create a duration with the specified number of minutes assuming that
+     * there are the standard number of milliseconds in a minute.
+     * <p>
+     * This method assumes that there are 60 seconds in a minute and
+     * 1000 milliseconds in a second.
+     * All currently supplied chronologies use this definition.
+     * <p>
+     * A Duration is a representation of an amount of time. If you want to express
+     * the concepts of 'minutes' you should consider using the {@link Minutes} class.
+     *
+     * @param minutes  the number of standard minutes in this duration
+     * @return the duration, never null
+     * @throws ArithmeticException if the minutes value is too large
+     */
+    public static Duration standardMinutes(long minutes) {
+        if (minutes == 0) {
+            return ZERO;
+        }
+        return new Duration(FieldUtils.safeMultiply(minutes, DateTimeConstants.MILLIS_PER_MINUTE));
+    }
+
+    /**
+     * Create a duration with the specified number of seconds assuming that
+     * there are the standard number of milliseconds in a second.
+     * <p>
+     * This method assumes that there are 1000 milliseconds in a second.
+     * All currently supplied chronologies use this definition.
+     * <p>
+     * A Duration is a representation of an amount of time. If you want to express
+     * the concepts of 'seconds' you should consider using the {@link Seconds} class.
+     *
+     * @param seconds  the number of standard seconds in this duration
+     * @return the duration, never null
+     * @throws ArithmeticException if the seconds value is too large
+     */
+    public static Duration standardSeconds(long seconds) {
+        if (seconds == 0) {
+            return ZERO;
+        }
+        return new Duration(FieldUtils.safeMultiply(seconds, DateTimeConstants.MILLIS_PER_SECOND));
+    }
+
+    //-----------------------------------------------------------------------
     /**
      * Creates a duration from the given millisecond duration.
      *
diff --git a/JodaTime/src/test/org/joda/time/TestDuration_Constructors.java b/JodaTime/src/test/org/joda/time/TestDuration_Constructors.java
index 298b9041d..7dbb6cf3b 100644
--- a/JodaTime/src/test/org/joda/time/TestDuration_Constructors.java
+++ b/JodaTime/src/test/org/joda/time/TestDuration_Constructors.java
@@ -103,6 +103,54 @@ public void testZERO() throws Throwable {
         assertEquals(0, test.getMillis());
     }
 
+    //-----------------------------------------------------------------------
+    public void testFactory_standardDays_long() throws Throwable {
+        Duration test = Duration.standardDays(1);
+        assertEquals(24L * 60L * 60L * 1000L, test.getMillis());
+        
+        test = Duration.standardDays(2);
+        assertEquals(2L * 24L * 60L * 60L * 1000L, test.getMillis());
+        
+        test = Duration.standardDays(0);
+        assertSame(Duration.ZERO, test);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testFactory_standardHours_long() throws Throwable {
+        Duration test = Duration.standardHours(1);
+        assertEquals(60L * 60L * 1000L, test.getMillis());
+        
+        test = Duration.standardHours(2);
+        assertEquals(2L * 60L * 60L * 1000L, test.getMillis());
+        
+        test = Duration.standardHours(0);
+        assertSame(Duration.ZERO, test);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testFactory_standardMinutes_long() throws Throwable {
+        Duration test = Duration.standardMinutes(1);
+        assertEquals(60L * 1000L, test.getMillis());
+        
+        test = Duration.standardMinutes(2);
+        assertEquals(2L * 60L * 1000L, test.getMillis());
+        
+        test = Duration.standardMinutes(0);
+        assertSame(Duration.ZERO, test);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testFactory_standardSeconds_long() throws Throwable {
+        Duration test = Duration.standardSeconds(1);
+        assertEquals(1000L, test.getMillis());
+        
+        test = Duration.standardSeconds(2);
+        assertEquals(2L * 1000L, test.getMillis());
+        
+        test = Duration.standardSeconds(0);
+        assertSame(Duration.ZERO, test);
+    }
+
     //-----------------------------------------------------------------------
     public void testConstructor_long1() throws Throwable {
         long length = 4 * DateTimeConstants.MILLIS_PER_DAY +

From d6dab6bf5879ed4f06524604c6481517c546f94f Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 15 Mar 2008 17:26:58 +0000
Subject: [PATCH 14/43] Fix copyright dates

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1339 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/Duration.java                 | 2 +-
 JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java   | 2 +-
 JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java | 2 +-
 3 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/JodaTime/src/java/org/joda/time/Duration.java b/JodaTime/src/java/org/joda/time/Duration.java
index 433646f05..b0b24ce36 100644
--- a/JodaTime/src/java/org/joda/time/Duration.java
+++ b/JodaTime/src/java/org/joda/time/Duration.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2005,2008 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
diff --git a/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java b/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java
index e2cf1275b..bc218a48b 100644
--- a/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2008 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
diff --git a/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java b/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java
index 40cfbcda3..f8241507d 100644
--- a/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java
+++ b/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2006 Stephen Colebourne
+ *  Copyright 2001-2006,2008 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

From ad03b064bdb6600666e93361e0562488866c9862 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 15 Mar 2008 18:04:14 +0000
Subject: [PATCH 15/43] Add since tags

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1340 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/Duration.java | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/JodaTime/src/java/org/joda/time/Duration.java b/JodaTime/src/java/org/joda/time/Duration.java
index b0b24ce36..123e789b5 100644
--- a/JodaTime/src/java/org/joda/time/Duration.java
+++ b/JodaTime/src/java/org/joda/time/Duration.java
@@ -60,6 +60,7 @@
      * @param days  the number of standard days in this duration
      * @return the duration, never null
      * @throws ArithmeticException if the days value is too large
+     * @since 1.6
      */
     public static Duration standardDays(long days) {
         if (days == 0) {
@@ -82,6 +83,7 @@ public static Duration standardDays(long days) {
      * @param hours  the number of standard hours in this duration
      * @return the duration, never null
      * @throws ArithmeticException if the hours value is too large
+     * @since 1.6
      */
     public static Duration standardHours(long hours) {
         if (hours == 0) {
@@ -104,6 +106,7 @@ public static Duration standardHours(long hours) {
      * @param minutes  the number of standard minutes in this duration
      * @return the duration, never null
      * @throws ArithmeticException if the minutes value is too large
+     * @since 1.6
      */
     public static Duration standardMinutes(long minutes) {
         if (minutes == 0) {
@@ -125,6 +128,7 @@ public static Duration standardMinutes(long minutes) {
      * @param seconds  the number of standard seconds in this duration
      * @return the duration, never null
      * @throws ArithmeticException if the seconds value is too large
+     * @since 1.6
      */
     public static Duration standardSeconds(long seconds) {
         if (seconds == 0) {

From 20bd2451e62e79b78f41de4c5e29cfe6af11e0c0 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 17 Mar 2008 21:56:20 +0000
Subject: [PATCH 16/43] Fix millisecond parsing, fix basic parsers too lenient

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1341 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |   9 +
 .../time/format/DateTimeFormatterBuilder.java |  33 +-
 .../joda/time/format/ISODateTimeFormat.java   |  52 +-
 .../time/format/TestISODateTimeFormat.java    |  25 +
 .../format/TestISODateTimeFormatParsing.java  | 493 +++++++++++++++++-
 5 files changed, 563 insertions(+), 49 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index fa4fe9996..eafa97b72 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -46,6 +46,15 @@ Deprecations since 1.5
 
 Bug fixes since 1.5
 -------------------
+- ISODateTimeFormat millisecond parsing broken
+  Millisecond parsing would parse 12:00:00.4 as 4 milliseconds rather
+  than 400 milliseconds
+
+- ISODateTimeFormat basic field parsing too lenient
+  The basic parsers in ISODateTimeFormat were too lenient
+  They have been changed to only accept the correct number of digits as
+  per the ISO-8601 standard. The non basic parsers are unaffected
+
 - DateTimeFormat.forFields(List) method can't handle immutable [1877843]
   Fix so that the method does not throw an exception when an unmodifiable
   list is passed in
diff --git a/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java b/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java
index c076e9b2e..f9a0bcd2c 100644
--- a/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java
+++ b/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java
@@ -579,6 +579,13 @@ public DateTimeFormatterBuilder appendFractionOfDay(int minDigits, int maxDigits
 
     /**
      * Instructs the printer to emit a numeric millisOfSecond field.
+     * <p>
+     * This method will append a field that prints a three digit value.
+     * During parsing the value that is parsed is assumed to be three digits.
+     * If less than three digits are present then they will be counted as the
+     * smallest parts of the millisecond. This is probably not what you want
+     * if you are using the field as a fraction. Instead, a fractional
+     * millisecond should be produced using {@link #appendFractionOfSecond}.
      *
      * @param minDigits minumum number of digits to print
      * @return this DateTimeFormatterBuilder
@@ -1784,25 +1791,21 @@ public void printTo(
         }
 
         public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {
-            if (partial.isSupported(iFieldType)) {
-                long millis = partial.getChronology().set(partial, 0L);
-                try {
-                    printTo(buf, null, millis, partial.getChronology());
-                } catch (IOException e) {
-                    // Not gonna happen.
-                }
-            } else {
-                buf.append('\ufffd');
+            // removed check whether field is supported, as input field is typically
+            // secondOfDay which is unsupported by TimeOfDay
+            long millis = partial.getChronology().set(partial, 0L);
+            try {
+                printTo(buf, null, millis, partial.getChronology());
+            } catch (IOException e) {
+                // Not gonna happen.
             }
         }
 
         public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException {
-            if (partial.isSupported(iFieldType)) {
-                long millis = partial.getChronology().set(partial, 0L);
-                printTo(null, out, millis, partial.getChronology());
-            } else {
-                out.write('\ufffd');
-            }
+            // removed check whether field is supported, as input field is typically
+            // secondOfDay which is unsupported by TimeOfDay
+            long millis = partial.getChronology().set(partial, 0L);
+            printTo(null, out, millis, partial.getChronology());
         }
 
         protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)
diff --git a/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java b/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java
index f8241507d..58001dd12 100644
--- a/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java
+++ b/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java
@@ -71,7 +71,6 @@
         hde, // hourOfDay element (HH)
         mhe, // minuteOfHour element (:mm)
         sme, // secondOfMinute element (:ss)
-        lse, // millisOfSecond element (.SSS)
         fse, // fractionOfSecond element (.SSSSSSSSS)
         ze,  // zone offset element
         lte, // literal 'T' element
@@ -867,7 +866,7 @@ public static DateTimeFormatter date() {
     public static DateTimeFormatter time() {
         if (t == null) {
             t = new DateTimeFormatterBuilder()
-                .append(hourMinuteSecondMillis())
+                .append(hourMinuteSecondFraction())
                 .append(offsetElement())
                 .toFormatter();
         }
@@ -1069,8 +1068,8 @@ public static DateTimeFormatter basicDate() {
         if (bd == null) {
             bd = new DateTimeFormatterBuilder()
                 .appendYear(4, 4)
-                .appendMonthOfYear(2)
-                .appendDayOfMonth(2)
+                .appendFixedDecimal(DateTimeFieldType.monthOfYear(), 2)
+                .appendFixedDecimal(DateTimeFieldType.dayOfMonth(), 2)
                 .toFormatter();
         }
         return bd;
@@ -1087,11 +1086,11 @@ public static DateTimeFormatter basicDate() {
     public static DateTimeFormatter basicTime() {
         if (bt == null) {
             bt = new DateTimeFormatterBuilder()
-                .appendHourOfDay(2)
-                .appendMinuteOfHour(2)
-                .appendSecondOfMinute(2)
+                .appendFixedDecimal(DateTimeFieldType.hourOfDay(), 2)
+                .appendFixedDecimal(DateTimeFieldType.minuteOfHour(), 2)
+                .appendFixedDecimal(DateTimeFieldType.secondOfMinute(), 2)
                 .appendLiteral('.')
-                .appendMillisOfSecond(3)
+                .appendFractionOfSecond(3, 9)
                 .appendTimeZoneOffset("Z", false, 2, 2)
                 .toFormatter();
         }
@@ -1108,9 +1107,9 @@ public static DateTimeFormatter basicTime() {
     public static DateTimeFormatter basicTimeNoMillis() {
         if (btx == null) {
             btx = new DateTimeFormatterBuilder()
-                .appendHourOfDay(2)
-                .appendMinuteOfHour(2)
-                .appendSecondOfMinute(2)
+                .appendFixedDecimal(DateTimeFieldType.hourOfDay(), 2)
+                .appendFixedDecimal(DateTimeFieldType.minuteOfHour(), 2)
+                .appendFixedDecimal(DateTimeFieldType.secondOfMinute(), 2)
                 .appendTimeZoneOffset("Z", false, 2, 2)
                 .toFormatter();
         }
@@ -1198,7 +1197,7 @@ public static DateTimeFormatter basicOrdinalDate() {
         if (bod == null) {
             bod = new DateTimeFormatterBuilder()
                 .appendYear(4, 4)
-                .appendDayOfYear(3)
+                .appendFixedDecimal(DateTimeFieldType.dayOfYear(), 3)
                 .toFormatter();
         }
         return bod;
@@ -1251,8 +1250,8 @@ public static DateTimeFormatter basicWeekDate() {
             bwd = new DateTimeFormatterBuilder()
                 .appendWeekyear(4, 4)
                 .appendLiteral('W')
-                .appendWeekOfWeekyear(2)
-                .appendDayOfWeek(1)
+                .appendFixedDecimal(DateTimeFieldType.weekOfWeekyear(), 2)
+                .appendFixedDecimal(DateTimeFieldType.dayOfWeek(), 1)
                 .toFormatter();
         }
         return bwd;
@@ -1422,7 +1421,8 @@ public static DateTimeFormatter hourMinuteSecond() {
     /**
      * Returns a formatter for a two digit hour of day, two digit minute of
      * hour, two digit second of minute, and three digit fraction of
-     * second. (HH:mm:ss.SSS)
+     * second (HH:mm:ss.SSS). Parsing will parse up to 3 fractional second
+     * digits.
      * 
      * @return a formatter for HH:mm:ss.SSS
      */
@@ -1432,7 +1432,8 @@ public static DateTimeFormatter hourMinuteSecondMillis() {
                 .append(hourElement())
                 .append(minuteElement())
                 .append(secondElement())
-                .append(millisElement())
+                .appendLiteral('.')
+                .appendFractionOfSecond(3, 3)
                 .toFormatter();
         }
         return hmsl;
@@ -1441,7 +1442,8 @@ public static DateTimeFormatter hourMinuteSecondMillis() {
     /**
      * Returns a formatter for a two digit hour of day, two digit minute of
      * hour, two digit second of minute, and three digit fraction of
-     * second. (HH:mm:ss.SSS)
+     * second (HH:mm:ss.SSS). Parsing will parse up to 9 fractional second
+     * digits, throwing away all except the first three.
      * 
      * @return a formatter for HH:mm:ss.SSS
      */
@@ -1512,7 +1514,8 @@ public static DateTimeFormatter dateHourMinuteSecond() {
     /**
      * Returns a formatter that combines a full date, two digit hour of day,
      * two digit minute of hour, two digit second of minute, and three digit
-     * fraction of second. (yyyy-MM-dd'T'HH:mm:ss.SSS)
+     * fraction of second (yyyy-MM-dd'T'HH:mm:ss.SSS). Parsing will parse up
+     * to 3 fractional second digits.
      * 
      * @return a formatter for yyyy-MM-dd'T'HH:mm:ss.SSS
      */
@@ -1530,7 +1533,8 @@ public static DateTimeFormatter dateHourMinuteSecondMillis() {
     /**
      * Returns a formatter that combines a full date, two digit hour of day,
      * two digit minute of hour, two digit second of minute, and three digit
-     * fraction of second. (yyyy-MM-dd'T'HH:mm:ss.SSS)
+     * fraction of second (yyyy-MM-dd'T'HH:mm:ss.SSS). Parsing will parse up
+     * to 9 fractional second digits, throwing away all except the first three.
      * 
      * @return a formatter for yyyy-MM-dd'T'HH:mm:ss.SSS
      */
@@ -1652,16 +1656,6 @@ private static DateTimeFormatter secondElement() {
         return sme;
     }
 
-    private static DateTimeFormatter millisElement() {
-        if (lse == null) {
-            lse = new DateTimeFormatterBuilder()
-                .appendLiteral('.')
-                .appendMillisOfSecond(3)
-                .toFormatter();
-        }
-        return lse;
-    }
-
     private static DateTimeFormatter fractionElement() {
         if (fse == null) {
             fse = new DateTimeFormatterBuilder()
diff --git a/JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java b/JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java
index c33514a41..044733b1a 100644
--- a/JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java
+++ b/JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java
@@ -23,8 +23,10 @@
 
 import org.joda.time.DateTime;
 import org.joda.time.DateTimeConstants;
+import org.joda.time.DateTimeFieldType;
 import org.joda.time.DateTimeUtils;
 import org.joda.time.DateTimeZone;
+import org.joda.time.Partial;
 
 /**
  * This class is a Junit unit test for ISODateTimeFormat.
@@ -102,6 +104,13 @@ public void testFormat_date() {
         assertEquals("2004-06-09", ISODateTimeFormat.date().print(dt));
     }
 
+    public void testFormat_date_partial() {
+        Partial dt = new Partial(
+                new DateTimeFieldType[] {DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth()},
+                new int[] {2004, 6, 9});
+        assertEquals("2004-06-09", ISODateTimeFormat.date().print(dt));
+    }
+
     public void testFormat_time() {
         DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);
         assertEquals("10:20:30.040Z", ISODateTimeFormat.time().print(dt));
@@ -113,6 +122,14 @@ public void testFormat_time() {
         assertEquals("12:20:30.040+02:00", ISODateTimeFormat.time().print(dt));
     }
 
+    public void testFormat_time_partial() {
+        Partial dt = new Partial(
+                new DateTimeFieldType[] {DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour(),
+                        DateTimeFieldType.secondOfMinute(), DateTimeFieldType.millisOfSecond()},
+                new int[] {10, 20, 30, 40});
+        assertEquals("10:20:30.040", ISODateTimeFormat.time().print(dt));
+    }
+
     public void testFormat_timeNoMillis() {
         DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);
         assertEquals("10:20:30Z", ISODateTimeFormat.timeNoMillis().print(dt));
@@ -124,6 +141,14 @@ public void testFormat_timeNoMillis() {
         assertEquals("12:20:30+02:00", ISODateTimeFormat.timeNoMillis().print(dt));
     }
 
+    public void testFormat_timeNoMillis_partial() {
+        Partial dt = new Partial(
+                new DateTimeFieldType[] {DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour(),
+                        DateTimeFieldType.secondOfMinute(), DateTimeFieldType.millisOfSecond()},
+                new int[] {10, 20, 30, 40});
+        assertEquals("10:20:30", ISODateTimeFormat.timeNoMillis().print(dt));
+    }
+
     public void testFormat_tTime() {
         DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);
         assertEquals("T10:20:30.040Z", ISODateTimeFormat.tTime().print(dt));
diff --git a/JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java b/JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java
index cc44695af..482e51b1d 100644
--- a/JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java
+++ b/JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java
@@ -21,6 +21,7 @@
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
 
+import org.joda.time.DateTime;
 import org.joda.time.DateTimeZone;
 
 /**
@@ -124,7 +125,10 @@ public void test_localDateParser() {
     //-----------------------------------------------------------------------
     public void test_dateElementParser() {
         DateTimeFormatter parser = ISODateTimeFormat.dateElementParser();
-        assertParse(parser, true, "2006-06-09");
+        assertParse(parser, "2006-06-09", new DateTime(2006, 6, 9, 0, 0, 0, 0));
+        assertParse(parser, "2006-06-9", new DateTime(2006, 6, 9, 0, 0, 0, 0));
+        assertParse(parser, "2006-6-09", new DateTime(2006, 6, 9, 0, 0, 0, 0));
+        assertParse(parser, "2006-6-9", new DateTime(2006, 6, 9, 0, 0, 0, 0));
         assertParse(parser, true, "2006-W27-3");
         assertParse(parser, true, "2006-123");
         assertParse(parser, false, "2006-06-09T+02:00");
@@ -151,6 +155,7 @@ public void test_dateElementParser() {
 
     //-----------------------------------------------------------------------
     public void test_timeParser() {
+        DateTimeZone.setDefault(DateTimeZone.UTC);
         DateTimeFormatter parser = ISODateTimeFormat.timeParser();
         assertParse(parser, false, "2006-06-09");
         assertParse(parser, false, "2006-W27-3");
@@ -166,10 +171,13 @@ public void test_timeParser() {
         assertParse(parser, false, "2006-W27-3T10:20:30.040+02:00");
         assertParse(parser, false, "2006-123T10:20:30.040+02:00");
         
-        assertParse(parser, true, "T10:20:30.040");
-        assertParse(parser, true, "T10.5");
-        assertParse(parser, true, "T10:20:30.040+02:00");
-        assertParse(parser, true, "T10.5+02:00");
+        assertParse(parser, "T10:20:30.040000000", new DateTime(1970, 1, 1, 10, 20, 30, 40));
+        assertParse(parser, "T10:20:30.004", new DateTime(1970, 1, 1, 10, 20, 30, 4));
+        assertParse(parser, "T10:20:30.040", new DateTime(1970, 1, 1, 10, 20, 30, 40));
+        assertParse(parser, "T10:20:30.400", new DateTime(1970, 1, 1, 10, 20, 30, 400));
+        assertParse(parser, "T10.5", new DateTime(1970, 1, 1, 10, 30, 0, 0));
+        assertParse(parser, "T10:20:30.040+02:00", new DateTime(1970, 1, 1, 8, 20, 30, 40));
+        assertParse(parser, "T10.5+02:00", new DateTime(1970, 1, 1, 8, 30, 0, 0));
         
         assertParse(parser, true, "10:20:30.040");
         assertParse(parser, true, "10.5");
@@ -326,6 +334,476 @@ public void test_localDateOptionalTimeParser() {
         assertParse(parser, false, "10.5+02:00");
     }
 
+    //-----------------------------------------------------------------------
+    //-----------------------------------------------------------------------
+    //-----------------------------------------------------------------------
+    public void test_date() {
+        DateTimeFormatter parser = ISODateTimeFormat.date();
+        assertParse(parser, "2006-02-04", new DateTime(2006, 2, 4, 0, 0, 0, 0));
+        assertParse(parser, "2006-2-04", new DateTime(2006, 2, 4, 0, 0, 0, 0));
+        assertParse(parser, "2006-02-4", new DateTime(2006, 2, 4, 0, 0, 0, 0));
+        assertParse(parser, "2006-2-4", new DateTime(2006, 2, 4, 0, 0, 0, 0));
+        assertParse(parser, false, "2006-02-");
+        assertParse(parser, false, "2006-02");
+        assertParse(parser, false, "2006--4");
+        assertParse(parser, false, "2006-1");
+        assertParse(parser, false, "2006");
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_time() {
+        DateTimeZone.setDefault(DateTimeZone.UTC);
+        DateTimeFormatter parser = ISODateTimeFormat.time();
+        assertParse(parser, "10:20:30.400999999Z", new DateTime(1970, 1, 1, 10, 20, 30, 400));
+        assertParse(parser, "10:20:30.400Z", new DateTime(1970, 1, 1, 10, 20, 30, 400));
+        assertParse(parser, "10:20:30.40Z", new DateTime(1970, 1, 1, 10, 20, 30, 400));
+        assertParse(parser, "10:20:30.4Z", new DateTime(1970, 1, 1, 10, 20, 30, 400));
+        assertParse(parser, "5:6:7.8Z", new DateTime(1970, 1, 1, 5, 6, 7, 800));
+        assertParse(parser, false, "10:20.400Z");
+        assertParse(parser, false, "10:2.400Z");
+        assertParse(parser, false, "10.400Z");
+        assertParse(parser, false, "1.400Z");
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_timeNoMillis() {
+        DateTimeZone.setDefault(DateTimeZone.UTC);
+        DateTimeFormatter parser = ISODateTimeFormat.timeNoMillis();
+        assertParse(parser, "10:20:30Z", new DateTime(1970, 1, 1, 10, 20, 30, 0));
+        assertParse(parser, "5:6:7Z", new DateTime(1970, 1, 1, 5, 6, 7, 0));
+        assertParse(parser, false, "10:20Z");
+        assertParse(parser, false, "10:2Z");
+        assertParse(parser, false, "10Z");
+        assertParse(parser, false, "1Z");
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_tTime() {
+        DateTimeZone.setDefault(DateTimeZone.UTC);
+        DateTimeFormatter parser = ISODateTimeFormat.tTime();
+        assertParse(parser, "T10:20:30.400999999Z", new DateTime(1970, 1, 1, 10, 20, 30, 400));
+        assertParse(parser, "T10:20:30.400Z", new DateTime(1970, 1, 1, 10, 20, 30, 400));
+        assertParse(parser, "T10:20:30.40Z", new DateTime(1970, 1, 1, 10, 20, 30, 400));
+        assertParse(parser, "T10:20:30.4Z", new DateTime(1970, 1, 1, 10, 20, 30, 400));
+        assertParse(parser, "T5:6:7.8Z", new DateTime(1970, 1, 1, 5, 6, 7, 800));
+        assertParse(parser, false, "T10:20.400Z");
+        assertParse(parser, false, "T102.400Z");
+        assertParse(parser, false, "T10.400Z");
+        assertParse(parser, false, "T1.400Z");
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_tTimeNoMillis() {
+        DateTimeZone.setDefault(DateTimeZone.UTC);
+        DateTimeFormatter parser = ISODateTimeFormat.tTimeNoMillis();
+        assertParse(parser, "T10:20:30Z", new DateTime(1970, 1, 1, 10, 20, 30, 0));
+        assertParse(parser, "T5:6:7Z", new DateTime(1970, 1, 1, 5, 6, 7, 0));
+        assertParse(parser, false, "T10:20Z");
+        assertParse(parser, false, "T10:2Z");
+        assertParse(parser, false, "T10Z");
+        assertParse(parser, false, "T1Z");
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_dateTime() {
+        DateTimeZone.setDefault(DateTimeZone.UTC);
+        DateTimeFormatter parser = ISODateTimeFormat.dateTime();
+        assertParse(parser, "2006-02-04T10:20:30.400999999Z", new DateTime(2006, 2, 4, 10, 20, 30, 400));
+        assertParse(parser, "2006-02-04T10:20:30.400Z", new DateTime(2006, 2, 4, 10, 20, 30, 400));
+        assertParse(parser, "2006-02-04T10:20:30.40Z", new DateTime(2006, 2, 4, 10, 20, 30, 400));
+        assertParse(parser, "2006-02-04T10:20:30.4Z", new DateTime(2006, 2, 4, 10, 20, 30, 400));
+        assertParse(parser, "2006-02-4T10:20:30.400Z", new DateTime(2006, 2, 4, 10, 20, 30, 400));
+        assertParse(parser, "2006-2-04T10:20:30.400Z", new DateTime(2006, 2, 4, 10, 20, 30, 400));
+        assertParse(parser, "2006-2-4T10:20:30.400Z", new DateTime(2006, 2, 4, 10, 20, 30, 400));
+        assertParse(parser, "2006-02-04T5:6:7.800Z", new DateTime(2006, 2, 4, 5, 6, 7, 800));
+        assertParse(parser, false, "2006-02-T10:20:30.400Z");
+        assertParse(parser, false, "2006-12T10:20:30.400Z");
+        assertParse(parser, false, "2006-1T10:20:30.400Z");
+        assertParse(parser, false, "2006T10:20:30.400Z");
+        assertParse(parser, false, "200T10:20:30.400Z");
+        assertParse(parser, false, "20T10:20:30.400Z");
+        assertParse(parser, false, "2T10:20:30.400Z");
+        assertParse(parser, false, "2006-02-04T10:20.400Z");
+        assertParse(parser, false, "2006-02-04T10:2.400Z");
+        assertParse(parser, false, "2006-02-04T10.400Z");
+        assertParse(parser, false, "2006-02-04T1.400Z");
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_dateTimeNoMillis() {
+        DateTimeZone.setDefault(DateTimeZone.UTC);
+        DateTimeFormatter parser = ISODateTimeFormat.dateTimeNoMillis();
+        assertParse(parser, "2006-02-04T10:20:30Z", new DateTime(2006, 2, 4, 10, 20, 30, 0));
+        assertParse(parser, "2006-02-4T10:20:30Z", new DateTime(2006, 2, 4, 10, 20, 30, 0));
+        assertParse(parser, "2006-2-04T10:20:30Z", new DateTime(2006, 2, 4, 10, 20, 30, 0));
+        assertParse(parser, "2006-2-4T10:20:30Z", new DateTime(2006, 2, 4, 10, 20, 30, 0));
+        assertParse(parser, "2006-02-04T5:6:7Z", new DateTime(2006, 2, 4, 5, 6, 7, 0));
+        assertParse(parser, false, "2006-02-T10:20:30Z");
+        assertParse(parser, false, "2006-12T10:20:30Z");
+        assertParse(parser, false, "2006-1T10:20:30Z");
+        assertParse(parser, false, "2006T10:20:30Z");
+        assertParse(parser, false, "200T10:20:30Z");
+        assertParse(parser, false, "20T10:20:30Z");
+        assertParse(parser, false, "2T10:20:30Z");
+        assertParse(parser, false, "2006-02-04T10:20Z");
+        assertParse(parser, false, "2006-02-04T10:2Z");
+        assertParse(parser, false, "2006-02-04T10Z");
+        assertParse(parser, false, "2006-02-04T1Z");
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_ordinalDate() {
+        DateTimeFormatter parser = ISODateTimeFormat.ordinalDate();
+        assertParse(parser, "2006-123", new DateTime(2006, 1, 1, 0, 0, 0, 0).withDayOfYear(123));
+        assertParse(parser, "2006-12", new DateTime(2006, 1, 1, 0, 0, 0, 0).withDayOfYear(12));
+        assertParse(parser, "2006-1", new DateTime(2006, 1, 1, 0, 0, 0, 0).withDayOfYear(1));
+        assertParse(parser, false, "2006-");
+        assertParse(parser, false, "2006");
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_ordinalDateTime() {
+        DateTimeZone.setDefault(DateTimeZone.UTC);
+        DateTimeFormatter parser = ISODateTimeFormat.ordinalDateTime();
+        assertParse(parser, "2006-123T10:20:30.400999999Z", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(123));
+        assertParse(parser, "2006-123T10:20:30.400Z", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(123));
+        assertParse(parser, "2006-123T10:20:30.40Z", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(123));
+        assertParse(parser, "2006-123T10:20:30.4Z", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(123));
+        assertParse(parser, "2006-12T10:20:30.400Z", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(12));
+        assertParse(parser, "2006-1T10:20:30.400Z", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(1));
+        assertParse(parser, "2006-123T5:6:7.800Z", new DateTime(2006, 1, 1, 5, 6, 7, 800).withDayOfYear(123));
+        assertParse(parser, false, "2006-T10:20:30.400Z");
+        assertParse(parser, false, "2006T10:20:30.400Z");
+        assertParse(parser, false, "2006-123T10:20.400Z");
+        assertParse(parser, false, "2006-123T10:2.400Z");
+        assertParse(parser, false, "2006-123T10.400Z");
+        assertParse(parser, false, "2006-123T1.400Z");
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_ordinalDateTimeNoMillis() {
+        DateTimeZone.setDefault(DateTimeZone.UTC);
+        DateTimeFormatter parser = ISODateTimeFormat.ordinalDateTimeNoMillis();
+        assertParse(parser, "2006-123T10:20:30Z", new DateTime(2006, 1, 1, 10, 20, 30, 0).withDayOfYear(123));
+        assertParse(parser, "2006-12T10:20:30Z", new DateTime(2006, 1, 1, 10, 20, 30, 0).withDayOfYear(12));
+        assertParse(parser, "2006-1T10:20:30Z", new DateTime(2006, 1, 1, 10, 20, 30, 0).withDayOfYear(1));
+        assertParse(parser, "2006-123T5:6:7Z", new DateTime(2006, 1, 1, 5, 6, 7, 0).withDayOfYear(123));
+        assertParse(parser, false, "2006-T10:20:30Z");
+        assertParse(parser, false, "2006T10:20:30Z");
+        assertParse(parser, false, "2006-123T10:20Z");
+        assertParse(parser, false, "2006-123T10:2Z");
+        assertParse(parser, false, "2006-123T10Z");
+        assertParse(parser, false, "2006-123T1Z");
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_weekDate() {
+        DateTimeFormatter parser = ISODateTimeFormat.weekDate();
+        assertParse(parser, "2006-W27-3", new DateTime(2006, 6, 1, 0, 0, 0, 0).withWeekOfWeekyear(27).withDayOfWeek(3));
+        assertParse(parser, "2006-W2-3", new DateTime(2006, 6, 1, 0, 0, 0, 0).withWeekOfWeekyear(2).withDayOfWeek(3));
+        assertParse(parser, false, "2006-W-3");
+        assertParse(parser, false, "2006-W27-");
+        assertParse(parser, false, "2006-W27");
+        assertParse(parser, false, "2006-W2");
+        assertParse(parser, false, "2006-W");
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_weekDateTime() {
+        DateTimeZone.setDefault(DateTimeZone.UTC);
+        DateTimeFormatter parser = ISODateTimeFormat.weekDateTime();
+        assertParse(parser, "2006-W27-3T10:20:30.400999999Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3));
+        assertParse(parser, "2006-W27-3T10:20:30.400Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3));
+        assertParse(parser, "2006-W27-3T10:20:30.40Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3));
+        assertParse(parser, "2006-W27-3T10:20:30.4Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3));
+        assertParse(parser, "2006-W2-3T10:20:30.400Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(2).withDayOfWeek(3));
+        assertParse(parser, "2006-W27-3T5:6:7.800Z", new DateTime(2006, 6, 1, 5, 6, 7, 800).withWeekOfWeekyear(27).withDayOfWeek(3));
+        assertParse(parser, false, "2006-W27-T10:20:30.400Z");
+        assertParse(parser, false, "2006-W27T10:20:30.400Z");
+        assertParse(parser, false, "2006-W2T10:20:30.400Z");
+        assertParse(parser, false, "2006-W-3T10:20:30.400Z");
+        assertParse(parser, false, "2006-W27-3T10:20.400Z");
+        assertParse(parser, false, "2006-W27-3T10:2.400Z");
+        assertParse(parser, false, "2006-W27-3T10.400Z");
+        assertParse(parser, false, "2006-W27-3T1.400Z");
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_weekDateTimeNoMillis() {
+        DateTimeZone.setDefault(DateTimeZone.UTC);
+        DateTimeFormatter parser = ISODateTimeFormat.weekDateTimeNoMillis();
+        assertParse(parser, "2006-W27-3T10:20:30Z", new DateTime(2006, 6, 1, 10, 20, 30, 0).withWeekOfWeekyear(27).withDayOfWeek(3));
+        assertParse(parser, "2006-W2-3T10:20:30Z", new DateTime(2006, 6, 1, 10, 20, 30, 0).withWeekOfWeekyear(2).withDayOfWeek(3));
+        assertParse(parser, "2006-W27-3T5:6:7Z", new DateTime(2006, 6, 1, 5, 6, 7, 0).withWeekOfWeekyear(27).withDayOfWeek(3));
+        assertParse(parser, false, "2006-W27-T10:20:30Z");
+        assertParse(parser, false, "2006-W27T10:20:30Z");
+        assertParse(parser, false, "2006-W2T10:20:30Z");
+        assertParse(parser, false, "2006-W-3T10:20:30Z");
+        assertParse(parser, false, "2006-W27-3T10:20Z");
+        assertParse(parser, false, "2006-W27-3T10:2Z");
+        assertParse(parser, false, "2006-W27-3T10Z");
+        assertParse(parser, false, "2006-W27-3T1Z");
+    }
+
+    //-----------------------------------------------------------------------
+    //-----------------------------------------------------------------------
+    //-----------------------------------------------------------------------
+    public void test_basicDate() {
+        DateTimeFormatter parser = ISODateTimeFormat.basicDate();
+        assertParse(parser, "20060204", new DateTime(2006, 2, 4, 0, 0, 0, 0));
+        assertParse(parser, false, "2006024");
+        assertParse(parser, false, "200602");
+        assertParse(parser, false, "20061");
+        assertParse(parser, false, "2006");
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_basicTime() {
+        DateTimeZone.setDefault(DateTimeZone.UTC);
+        DateTimeFormatter parser = ISODateTimeFormat.basicTime();
+        assertParse(parser, "102030.400999999Z", new DateTime(1970, 1, 1, 10, 20, 30, 400));
+        assertParse(parser, "102030.400Z", new DateTime(1970, 1, 1, 10, 20, 30, 400));
+        assertParse(parser, "102030.40Z", new DateTime(1970, 1, 1, 10, 20, 30, 400));
+        assertParse(parser, "102030.4Z", new DateTime(1970, 1, 1, 10, 20, 30, 400));
+        assertParse(parser, false, "10203.400Z");
+        assertParse(parser, false, "1020.400Z");
+        assertParse(parser, false, "102.400Z");
+        assertParse(parser, false, "10.400Z");
+        assertParse(parser, false, "1.400Z");
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_basicTimeNoMillis() {
+        DateTimeZone.setDefault(DateTimeZone.UTC);
+        DateTimeFormatter parser = ISODateTimeFormat.basicTimeNoMillis();
+        assertParse(parser, "102030Z", new DateTime(1970, 1, 1, 10, 20, 30, 0));
+        assertParse(parser, false, "10203Z");
+        assertParse(parser, false, "1020Z");
+        assertParse(parser, false, "102Z");
+        assertParse(parser, false, "10Z");
+        assertParse(parser, false, "1Z");
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_basicTTime() {
+        DateTimeZone.setDefault(DateTimeZone.UTC);
+        DateTimeFormatter parser = ISODateTimeFormat.basicTTime();
+        assertParse(parser, "T102030.400999999Z", new DateTime(1970, 1, 1, 10, 20, 30, 400));
+        assertParse(parser, "T102030.400Z", new DateTime(1970, 1, 1, 10, 20, 30, 400));
+        assertParse(parser, "T102030.40Z", new DateTime(1970, 1, 1, 10, 20, 30, 400));
+        assertParse(parser, "T102030.4Z", new DateTime(1970, 1, 1, 10, 20, 30, 400));
+        assertParse(parser, false, "T10203.400Z");
+        assertParse(parser, false, "T1020.400Z");
+        assertParse(parser, false, "T102.400Z");
+        assertParse(parser, false, "T10.400Z");
+        assertParse(parser, false, "T1.400Z");
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_basicTTimeNoMillis() {
+        DateTimeZone.setDefault(DateTimeZone.UTC);
+        DateTimeFormatter parser = ISODateTimeFormat.basicTTimeNoMillis();
+        assertParse(parser, "T102030Z", new DateTime(1970, 1, 1, 10, 20, 30, 0));
+        assertParse(parser, false, "T10203Z");
+        assertParse(parser, false, "T1020Z");
+        assertParse(parser, false, "T102Z");
+        assertParse(parser, false, "T10Z");
+        assertParse(parser, false, "T1Z");
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_basicDateTime() {
+        DateTimeZone.setDefault(DateTimeZone.UTC);
+        DateTimeFormatter parser = ISODateTimeFormat.basicDateTime();
+        assertParse(parser, "20061204T102030.400999999Z", new DateTime(2006, 12, 4, 10, 20, 30, 400));
+        assertParse(parser, "20061204T102030.400Z", new DateTime(2006, 12, 4, 10, 20, 30, 400));
+        assertParse(parser, "20061204T102030.40Z", new DateTime(2006, 12, 4, 10, 20, 30, 400));
+        assertParse(parser, "20061204T102030.4Z", new DateTime(2006, 12, 4, 10, 20, 30, 400));
+        assertParse(parser, false, "2006120T102030.400Z");
+        assertParse(parser, false, "200612T102030.400Z");
+        assertParse(parser, false, "20061T102030.400Z");
+        assertParse(parser, false, "2006T102030.400Z");
+        assertParse(parser, false, "200T102030.400Z");
+        assertParse(parser, false, "20T102030.400Z");
+        assertParse(parser, false, "2T102030.400Z");
+        assertParse(parser, false, "20061204T10203.400Z");
+        assertParse(parser, false, "20061204T1020.400Z");
+        assertParse(parser, false, "20061204T102.400Z");
+        assertParse(parser, false, "20061204T10.400Z");
+        assertParse(parser, false, "20061204T1.400Z");
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_basicDateTimeNoMillis() {
+        DateTimeZone.setDefault(DateTimeZone.UTC);
+        DateTimeFormatter parser = ISODateTimeFormat.basicDateTimeNoMillis();
+        assertParse(parser, "20061204T102030Z", new DateTime(2006, 12, 4, 10, 20, 30, 0));
+        assertParse(parser, false, "2006120T102030Z");
+        assertParse(parser, false, "200612T102030Z");
+        assertParse(parser, false, "20061T102030Z");
+        assertParse(parser, false, "2006T102030Z");
+        assertParse(parser, false, "200T102030Z");
+        assertParse(parser, false, "20T102030Z");
+        assertParse(parser, false, "2T102030Z");
+        assertParse(parser, false, "20061204T10203Z");
+        assertParse(parser, false, "20061204T1020Z");
+        assertParse(parser, false, "20061204T102Z");
+        assertParse(parser, false, "20061204T10Z");
+        assertParse(parser, false, "20061204T1Z");
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_basicOrdinalDate() {
+        DateTimeFormatter parser = ISODateTimeFormat.basicOrdinalDate();
+        assertParse(parser, "2006123", new DateTime(2006, 1, 1, 0, 0, 0, 0).withDayOfYear(123));
+        assertParse(parser, false, "200612");
+        assertParse(parser, false, "20061");
+        assertParse(parser, false, "2006");
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_basicOrdinalDateTime() {
+        DateTimeZone.setDefault(DateTimeZone.UTC);
+        DateTimeFormatter parser = ISODateTimeFormat.basicOrdinalDateTime();
+        assertParse(parser, "2006123T102030.400999999Z", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(123));
+        assertParse(parser, "2006123T102030.400Z", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(123));
+        assertParse(parser, "2006123T102030.40Z", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(123));
+        assertParse(parser, "2006123T102030.4Z", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(123));
+        assertParse(parser, false, "200612T102030.400Z");
+        assertParse(parser, false, "20061T102030.400Z");
+        assertParse(parser, false, "2006T102030.400Z");
+        assertParse(parser, false, "200T102030.400Z");
+        assertParse(parser, false, "20T102030.400Z");
+        assertParse(parser, false, "2T102030.400Z");
+        assertParse(parser, false, "2006123T10203.400Z");
+        assertParse(parser, false, "2006123T1020.400Z");
+        assertParse(parser, false, "2006123T102.400Z");
+        assertParse(parser, false, "2006123T10.400Z");
+        assertParse(parser, false, "2006123T1.400Z");
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_basicOrdinalDateTimeNoMillis() {
+        DateTimeZone.setDefault(DateTimeZone.UTC);
+        DateTimeFormatter parser = ISODateTimeFormat.basicOrdinalDateTimeNoMillis();
+        assertParse(parser, "2006123T102030Z", new DateTime(2006, 1, 1, 10, 20, 30, 0).withDayOfYear(123));
+        assertParse(parser, false, "200612T102030Z");
+        assertParse(parser, false, "20061T102030Z");
+        assertParse(parser, false, "2006T102030Z");
+        assertParse(parser, false, "200T102030Z");
+        assertParse(parser, false, "20T102030Z");
+        assertParse(parser, false, "2T102030Z");
+        assertParse(parser, false, "2006123T10203Z");
+        assertParse(parser, false, "2006123T1020Z");
+        assertParse(parser, false, "2006123T102Z");
+        assertParse(parser, false, "2006123T10Z");
+        assertParse(parser, false, "2006123T1Z");
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_basicWeekDate() {
+        DateTimeFormatter parser = ISODateTimeFormat.basicWeekDate();
+        assertParse(parser, "2006W273", new DateTime(2006, 6, 1, 0, 0, 0, 0).withWeekOfWeekyear(27).withDayOfWeek(3));
+        assertParse(parser, false, "2006W27");
+        assertParse(parser, false, "2006W2");
+        assertParse(parser, false, "2006W");
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_basicWeekDateTime() {
+        DateTimeZone.setDefault(DateTimeZone.UTC);
+        DateTimeFormatter parser = ISODateTimeFormat.basicWeekDateTime();
+        assertParse(parser, "2006W273T102030.400999999Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3));
+        assertParse(parser, "2006W273T102030.400Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3));
+        assertParse(parser, "2006W273T102030.40Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3));
+        assertParse(parser, "2006W273T102030.4Z", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3));
+        assertParse(parser, false, "2006W27T102030.400Z");
+        assertParse(parser, false, "2006W2T102030.400Z");
+        assertParse(parser, false, "2006W273T10203.400Z");
+        assertParse(parser, false, "2006W273T1020.400Z");
+        assertParse(parser, false, "2006W273T102.400Z");
+        assertParse(parser, false, "2006W273T10.400Z");
+        assertParse(parser, false, "2006W273T1.400Z");
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_basicWeekDateTimeNoMillis() {
+        DateTimeZone.setDefault(DateTimeZone.UTC);
+        DateTimeFormatter parser = ISODateTimeFormat.basicWeekDateTimeNoMillis();
+        assertParse(parser, "2006W273T102030Z", new DateTime(2006, 6, 1, 10, 20, 30, 0).withWeekOfWeekyear(27).withDayOfWeek(3));
+        assertParse(parser, false, "2006W27T102030Z");
+        assertParse(parser, false, "2006W2T102030Z");
+        assertParse(parser, false, "2006W273T10203Z");
+        assertParse(parser, false, "2006W273T1020Z");
+        assertParse(parser, false, "2006W273T102Z");
+        assertParse(parser, false, "2006W273T10Z");
+        assertParse(parser, false, "2006W273T1Z");
+    }
+
+    //-----------------------------------------------------------------------
+    //-----------------------------------------------------------------------
+    //-----------------------------------------------------------------------
+    public void test_hourMinute() {
+        DateTimeZone.setDefault(DateTimeZone.UTC);
+        DateTimeFormatter parser = ISODateTimeFormat.hourMinute();
+        assertParse(parser, "10:20", new DateTime(1970, 1, 1, 10, 20, 0, 0));
+        assertParse(parser, "5:6", new DateTime(1970, 1, 1, 5, 6, 0, 0));
+        assertParse(parser, false, "10:20:30.400999999");
+        assertParse(parser, false, "10:20:30.400");
+        assertParse(parser, false, "10:20:30");
+        assertParse(parser, false, "10:20.400");
+        assertParse(parser, false, "10:2.400");
+        assertParse(parser, false, "10.400");
+        assertParse(parser, false, "1.400");
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_hourMinuteSecond() {
+        DateTimeZone.setDefault(DateTimeZone.UTC);
+        DateTimeFormatter parser = ISODateTimeFormat.hourMinuteSecond();
+        assertParse(parser, "10:20:30", new DateTime(1970, 1, 1, 10, 20, 30, 0));
+        assertParse(parser, "5:6:7", new DateTime(1970, 1, 1, 5, 6, 7, 0));
+        assertParse(parser, false, "10:20:30.400999999");
+        assertParse(parser, false, "10:20:30.400");
+        assertParse(parser, false, "10:20:30.4");
+        assertParse(parser, false, "10:20.400");
+        assertParse(parser, false, "10:2.400");
+        assertParse(parser, false, "10.400");
+        assertParse(parser, false, "1.400");
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_hourMinuteSecondMillis() {
+        DateTimeZone.setDefault(DateTimeZone.UTC);
+        DateTimeFormatter parser = ISODateTimeFormat.hourMinuteSecondMillis();
+        assertParse(parser, "10:20:30.400", new DateTime(1970, 1, 1, 10, 20, 30, 400));
+        assertParse(parser, "10:20:30.40", new DateTime(1970, 1, 1, 10, 20, 30, 400));
+        assertParse(parser, "10:20:30.4", new DateTime(1970, 1, 1, 10, 20, 30, 400));
+        assertParse(parser, "5:6:7.8", new DateTime(1970, 1, 1, 5, 6, 7, 800));
+        assertParse(parser, false, "10:20:30.400999999");
+        assertParse(parser, false, "10:20.400");
+        assertParse(parser, false, "10:2.400");
+        assertParse(parser, false, "10.400");
+        assertParse(parser, false, "1.400");
+    }
+
+    //-----------------------------------------------------------------------
+    public void test_hourMinuteSecondFraction() {
+        DateTimeZone.setDefault(DateTimeZone.UTC);
+        DateTimeFormatter parser = ISODateTimeFormat.hourMinuteSecondFraction();
+        assertParse(parser, "10:20:30.400999999", new DateTime(1970, 1, 1, 10, 20, 30, 400));
+        assertParse(parser, "10:20:30.400", new DateTime(1970, 1, 1, 10, 20, 30, 400));
+        assertParse(parser, "10:20:30.40", new DateTime(1970, 1, 1, 10, 20, 30, 400));
+        assertParse(parser, "10:20:30.4", new DateTime(1970, 1, 1, 10, 20, 30, 400));
+        assertParse(parser, "5:6:7.8", new DateTime(1970, 1, 1, 5, 6, 7, 800));
+        assertParse(parser, false, "10:20.400");
+        assertParse(parser, false, "10:2.400");
+        assertParse(parser, false, "10.400");
+        assertParse(parser, false, "1.400");
+    }
+
+    //-----------------------------------------------------------------------
+    //-----------------------------------------------------------------------
     //-----------------------------------------------------------------------
     private void assertParse(DateTimeFormatter parser, boolean expected, String str) {
         if (expected) {
@@ -340,4 +818,9 @@ private void assertParse(DateTimeFormatter parser, boolean expected, String str)
         }
     }
 
+    private void assertParse(DateTimeFormatter parser, String str, DateTime expected) {
+        DateTime dt = parser.parseDateTime(str);
+        assertEquals(expected, dt);
+    }
+
 }

From c880847babd01709ddba4e221329d5ba26edfd16 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Thu, 15 May 2008 15:29:38 +0000
Subject: [PATCH 17/43] DateTimeZone data updated to version 2008b.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1342 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |   2 +-
 .../src/java/org/joda/time/tz/src/Readme.txt  |   2 +-
 JodaTime/src/java/org/joda/time/tz/src/asia   |  77 +++++++++---
 .../src/java/org/joda/time/tz/src/backward    |   4 +-
 .../java/org/joda/time/tz/src/northamerica    |  51 +++++++-
 .../java/org/joda/time/tz/src/southamerica    | 112 +++++++++++++++++-
 6 files changed, 224 insertions(+), 24 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index eafa97b72..8e396f16e 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -35,7 +35,7 @@ Source compatible - Yes
 Serialization compatible - Yes
 
 Data compatible - Yes, except
-  - DateTimeZone data updated to version 2007k
+  - DateTimeZone data updated to version 2008b
 
 Semantic compatible - Yes
 
diff --git a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
index 8c862672a..42eb3434e 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
+++ b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
@@ -1,2 +1,2 @@
 The data files in this directory were obtained from the public tz database,
-http://www.twinsun.com/tz/tz-link.htm, version 2007k.
+http://www.twinsun.com/tz/tz-link.htm, version 2008b.
diff --git a/JodaTime/src/java/org/joda/time/tz/src/asia b/JodaTime/src/java/org/joda/time/tz/src/asia
index d16c882fe..5d7ffc504 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/asia
+++ b/JodaTime/src/java/org/joda/time/tz/src/asia
@@ -1,4 +1,4 @@
-# @(#)asia	8.14
+# @(#)asia	8.18
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
@@ -446,13 +446,13 @@ Zone	Asia/Dili	8:22:20 -	LMT	1912
 
 # India
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Calcutta	5:53:28 -	LMT	1880	# Kolkata
+Zone	Asia/Kolkata	5:53:28 -	LMT	1880	# Kolkata
 			5:53:20	-	HMT	1941 Oct    # Howrah Mean Time?
 			6:30	-	BURT	1942 May 15 # Burma Time
 			5:30	-	IST	1942 Sep
 			5:30	1:00	IST	1945 Oct 15
 			5:30	-	IST
-# The following are like Asia/Calcutta:
+# The following are like Asia/Kolkata:
 #	Andaman Is
 #	Lakshadweep (Laccadive, Minicoy and Amindivi Is)
 #	Nicobar Is
@@ -660,6 +660,21 @@ Zone	Asia/Tehran	3:25:44	-	LMT	1916
 #
 # So we'll ignore the Economist's claim.
 
+# From Steffen Thorsen (2008-03-10):
+# The cabinet in Iraq abolished DST last week, according to the following
+# news sources (in Arabic):
+# <a href="http://www.aljeeran.net/wesima_articles/news-20080305-98602.html">
+# http://www.aljeeran.net/wesima_articles/news-20080305-98602.html
+# </a>
+# <a href="http://www.aswataliraq.info/look/article.tpl?id=2047&IdLanguage=17&IdPublication=4&NrArticle=71743&NrIssue=1&NrSection=10">
+# http://www.aswataliraq.info/look/article.tpl?id=2047&IdLanguage=17&IdPublication=4&NrArticle=71743&NrIssue=1&NrSection=10
+# </a>
+#
+# We have published a short article in English about the change:
+# <a href="http://www.timeanddate.com/news/time/iraq-dumps-daylight-saving.html">
+# http://www.timeanddate.com/news/time/iraq-dumps-daylight-saving.html
+# </a>
+
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Iraq	1982	only	-	May	1	0:00	1:00	D
 Rule	Iraq	1982	1984	-	Oct	1	0:00	0	S
@@ -670,8 +685,8 @@ Rule	Iraq	1986	1990	-	Mar	lastSun	1:00s	1:00	D
 # IATA SSIM (1991/1996) says Apr 1 12:01am UTC; guess the `:01' is a typo.
 # Shanks & Pottenger say Iraq did not observe DST 1992/1997; ignore this.
 #
-Rule	Iraq	1991	max	-	Apr	 1	3:00s	1:00	D
-Rule	Iraq	1991	max	-	Oct	 1	3:00s	0	S
+Rule	Iraq	1991	2007	-	Apr	 1	3:00s	1:00	D
+Rule	Iraq	1991	2007	-	Oct	 1	3:00s	0	S
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Asia/Baghdad	2:57:40	-	LMT	1890
 			2:57:36	-	BMT	1918	    # Baghdad Mean Time?
@@ -1687,7 +1702,7 @@ Zone	Asia/Singapore	6:55:25 -	LMT	1901 Jan  1
 # kept their clocks set five and a half hours ahead of Greenwich Mean
 # Time (GMT), in line with neighbor India.
 # From Paul Eggert (2006-04-18):
-# People who live in regions under Tamil control can use TZ='Asia/Calcutta',
+# People who live in regions under Tamil control can use [TZ='Asia/Kolkata'],
 # as that zone has agreed with the Tamil areas since our cutoff date of 1970.
 
 # From K Sethu (2006-04-25):
@@ -1777,9 +1792,7 @@ Rule	Syria	2006	only	-	Sep	22	0:00	0	-
 # From Paul Eggert (2007-03-29):
 # Today the AP reported "Syria will switch to summertime at midnight Thursday."
 # http://www.iht.com/articles/ap/2007/03/29/africa/ME-GEN-Syria-Time-Change.php
-# For lack of better info, assume the rule changed to "last Friday in March"
-# this year.
-Rule	Syria	2007	max	-	Mar	lastFri	0:00	1:00	S
+Rule	Syria	2007	only	-	Mar	lastFri	0:00	1:00	S
 # From Jesper Norgard (2007-10-27):
 # The sister center ICARDA of my work CIMMYT is confirming that Syria DST will
 # not take place 1.st November at 0:00 o'clock but 1.st November at 24:00 or
@@ -1801,10 +1814,40 @@ Rule	Syria	2007	max	-	Mar	lastFri	0:00	1:00	S
 # Council of Ministers also approved the commencement of work on 
 # identifying the winter time as of Friday, 2/11/2007 where the 60th 
 # minute delay at midnight Thursday 1/11/2007.
-#
-# From Arthur David Olson (2007-10-30):
-# My best guess for the future is first Friday in November.
-Rule	Syria	2007	max	-	Nov	 Fri>=1	0:00	0	-
+Rule	Syria	2007	only	-	Nov	 Fri>=1	0:00	0	-
+
+# From Stephen Colebourne (2008-03-17):
+# For everyone's info, I saw an IATA time zone change for [Syria] for
+# this month (March 2008) in the last day or so...This is the data IATA
+# are now using:
+# Country     Time Standard   --- DST Start ---   --- DST End ---  DST
+# Name        Zone Variation   Time    Date        Time    Date
+# Variation
+# Syrian Arab
+# Republic    SY    +0200      2200  03APR08       2100  30SEP08   +0300
+#                              2200  02APR09       2100  30SEP09   +0300
+#                              2200  01APR10       2100  30SEP10   +0300
+
+# From Arthur David Olson (2008-03-17):
+# Here's a link to English-language coverage by the Syrian Arab News
+# Agency (SANA)...
+# <a href="http://www.sana.sy/eng/21/2008/03/11/165173.htm">
+# http://www.sana.sy/eng/21/2008/03/11/165173.htm
+# </a>...which reads (in part) "The Cabinet approved the suggestion of the
+# Ministry of Electricity to begin daylight savings time on Friday April
+# 4th, advancing clocks one hour ahead on midnight of Thursday April 3rd."
+# Since Syria is two hours east of UTC, the 2200 and 2100 transition times
+# shown above match up with midnight in Syria.
+
+# From Arthur David Olson (2008-03-18):
+# My buest guess at a Syrian rule is "the Friday nearest April 1";
+# coding that involves either using a "Mar Fri>=29" construct that old time zone
+# compilers can't handle  or having multiple Rules (a la Israel).
+# For now, use "Apr Fri>=1", and go with IATA on a uniform Sep 30 end.
+
+Rule	Syria	2008	max	-	Apr	Fri>=1	0:00	1:00	S
+Rule	Syria	2008	max	-	Oct	1	0:00	0	-
+
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Asia/Damascus	2:25:12 -	LMT	1920	# Dimashq
 			2:00	Syria	EE%sT
@@ -1858,13 +1901,13 @@ Zone	Asia/Tashkent	4:37:12 -	LMT	1924 May  2
 
 # Vietnam
 
-# From Paul Eggert (1993-11-18):
-# Saigon's official name is Thanh-Pho Ho Chi Minh, but it's too long.
-# We'll stick with the traditional name for now.
+# From Arthur David Olson (2008-03-18):
+# The English-language name of Vietnam's most populous city is "Ho Chi Min City";
+# we use Ho_Chi_Minh below to avoid a name of more than 14 characters.
 
 # From Shanks & Pottenger:
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
-Zone	Asia/Saigon	7:06:40 -	LMT	1906 Jun  9
+Zone	Asia/Ho_Chi_Minh	7:06:40 -	LMT	1906 Jun  9
 			7:06:20	-	SMT	1911 Mar 11 0:01 # Saigon MT?
 			7:00	-	ICT	1912 May
 			8:00	-	ICT	1931 May
diff --git a/JodaTime/src/java/org/joda/time/tz/src/backward b/JodaTime/src/java/org/joda/time/tz/src/backward
index 2d44bac4d..87308259a 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/backward
+++ b/JodaTime/src/java/org/joda/time/tz/src/backward
@@ -1,4 +1,4 @@
-# @(#)backward	8.4
+# @(#)backward	8.6
 
 # This file provides links between current names for time zones
 # and their old names.  Many names changed in late 1993.
@@ -24,8 +24,10 @@ Link	America/St_Thomas	America/Virgin
 Link	Asia/Ashgabat		Asia/Ashkhabad
 Link	Asia/Chongqing		Asia/Chungking
 Link	Asia/Dhaka		Asia/Dacca
+Link	Asia/Kolkata		Asia/Calcutta
 Link	Asia/Macau		Asia/Macao
 Link	Asia/Jerusalem		Asia/Tel_Aviv
+Link	Asia/Ho_Chi_Minh	Asia/Saigon
 Link	Asia/Thimphu		Asia/Thimbu
 Link	Asia/Makassar		Asia/Ujung_Pandang
 Link	Asia/Ulaanbaatar	Asia/Ulan_Bator
diff --git a/JodaTime/src/java/org/joda/time/tz/src/northamerica b/JodaTime/src/java/org/joda/time/tz/src/northamerica
index bbb8c7026..600e15f69 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/northamerica
+++ b/JodaTime/src/java/org/joda/time/tz/src/northamerica
@@ -1,4 +1,4 @@
-# @(#)northamerica	8.20
+# @(#)northamerica	8.23
 # <pre>
 
 # also includes Central America and the Caribbean
@@ -2205,6 +2205,52 @@ Zone America/Costa_Rica	-5:36:20 -	LMT	1890		# San Jose
 # 
 # http://www.worldtimezone.com/dst_news/dst_news_cuba03.html
 
+# From Arthur David Olson (2008-03-09):
+# I'm in Maryland which is now observing United States Eastern Daylight
+# Time. At 9:44 local time I used RealPlayer to listen to
+# <a href="http://media.enet.cu/radioreloj">
+# http://media.enet.cu/radioreloj
+# </a>, a Cuban information station, and heard
+# the time announced as "ocho cuarenta y cuatro" ("eight forty-four"),
+# indicating that Cuba is still on standard time.
+
+# From Steffen Thorsen (2008-03-12):
+# It seems that Cuba will start DST on Sunday, 2007-03-16...
+# It was announced yesterday, according to this source (in Spanish):
+# <a href="http://www.nnc.cubaweb.cu/marzo-2008/cien-1-11-3-08.htm">
+# http://www.nnc.cubaweb.cu/marzo-2008/cien-1-11-3-08.htm
+# </a>
+#
+# Some more background information is posted here:
+# <a href="http://www.timeanddate.com/news/time/cuba-starts-dst-march-16.html">
+# http://www.timeanddate.com/news/time/cuba-starts-dst-march-16.html
+# </a>
+#
+# The article also says that Cuba has been observing DST since 1963,
+# while Shanks (and tzdata) has 1965 as the first date (except in the
+# 1940's). Many other web pages in Cuba also claim that it has been
+# observed since 1963, but with the exception of 1970 - an exception
+# which is not present in tzdata/Shanks. So there is a chance we need to
+# change some historic records as well.
+#
+# One example:
+# <a href="http://www.radiohc.cu/espanol/noticias/mar07/11mar/hor.htm">
+# http://www.radiohc.cu/espanol/noticias/mar07/11mar/hor.htm
+# </a>
+
+# From Jesper Norgaard Welen (2008-03-13):
+# The Cuban time change has just been confirmed on the most authoritative
+# web site, the Granma.  Please check out
+# <a href="http://www.granma.cubaweb.cu/2008/03/13/nacional/artic10.html">
+# http://www.granma.cubaweb.cu/2008/03/13/nacional/artic10.html
+# </a>
+#
+# Basically as expected after Steffen Thorsens information, the change
+# will take place midnight between Saturday and Sunday.
+
+# From Arthur David Olson (2008-03-12):
+# Assume Sun>=15 (third Sunday) going forward.
+
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Cuba	1928	only	-	Jun	10	0:00	1:00	D
 Rule	Cuba	1928	only	-	Oct	10	0:00	0	S
@@ -2236,7 +2282,8 @@ Rule	Cuba	1998	1999	-	Mar	lastSun	0:00s	1:00	D
 Rule	Cuba	1998	2003	-	Oct	lastSun	0:00s	0	S
 Rule	Cuba	2000	2006	-	Apr	Sun>=1	0:00s	1:00	D
 Rule	Cuba	2006	max	-	Oct	lastSun	0:00s	0	S
-Rule	Cuba	2007	max	-	Mar	Sun>=8	0:00s	1:00	D
+Rule	Cuba	2007	only	-	Mar	Sun>=8	0:00s	1:00	D
+Rule	Cuba	2008	max	-	Mar	Sun>=15	0:00s	1:00	D
 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	America/Havana	-5:29:28 -	LMT	1890
diff --git a/JodaTime/src/java/org/joda/time/tz/src/southamerica b/JodaTime/src/java/org/joda/time/tz/src/southamerica
index aaffeee68..4cffe0eae 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/southamerica
+++ b/JodaTime/src/java/org/joda/time/tz/src/southamerica
@@ -1,4 +1,4 @@
-# @(#)southamerica	8.15
+# @(#)southamerica	8.19
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
@@ -228,6 +228,76 @@ Rule	Arg	2008	max	-	Oct	Sun>=1	0:00	1:00	S
 # http://www.sanjuan.gov.ar/prensa/archivo/000426.html
 # http://www.sanjuan.gov.ar/prensa/archivo/000441.html
 
+# From Alex Krivenyshev (2008-01-17):
+# Here are articles that Argentina Province San Luis is planning to end DST
+# as earlier as upcoming Monday January 21, 2008 or February 2008:
+#
+# Provincia argentina retrasa reloj y marca diferencia con resto del pais
+# (Argentine Province delayed clock and mark difference with the rest of the
+# country)
+# <a href="http://cl.invertia.com/noticias/noticia.aspx?idNoticia=200801171849_EFE_ET4373&idtel">
+# http://cl.invertia.com/noticias/noticia.aspx?idNoticia=200801171849_EFE_ET4373&idtel
+# </a>
+#
+# Es inminente que en San Luis atrasen una hora los relojes
+# (It is imminent in San Luis clocks one hour delay)
+# <a href="http://www.lagaceta.com.ar/vernotae.asp?id_nota=253414">
+# http://www.lagaceta.com.ar/vernotae.asp?id_nota=253414
+# </a>
+#
+# <a href="http://www.worldtimezone.net/dst_news/dst_news_argentina02.html">
+# http://www.worldtimezone.net/dst_news/dst_news_argentina02.html
+# </a>
+
+# From Jesper Norgaard Welen (2008-01-18):
+# The page of the San Luis provincial government
+# <a href="http://www.sanluis.gov.ar/notas.asp?idCanal=0&id=22812">
+# http://www.sanluis.gov.ar/notas.asp?idCanal=0&id=22812
+# </a>
+# confirms what Alex Krivenyshev has earlier sent to the tz
+# emailing list about that San Luis plans to return to standard
+# time much earlier than the rest of the country. It also
+# confirms that upon request the provinces San Juan and Mendoza 
+# refused to follow San Luis in this change. 
+# 
+# The change is supposed to take place Monday the 21.st at 0:00
+# hours. As far as I understand it if this goes ahead, we need
+# a new timezone for San Luis (although there are also documented
+# independent changes in the southamerica file of San Luis in
+# 1990 and 1991 which has not been confirmed).
+
+# From Jesper Norgaard Welen (2008-01-25):
+# Unfortunately the below page has become defunct, about the San Luis
+# time change. Perhaps because it now is part of a group of pages "Most
+# important pages of 2008."
+#
+# You can use
+# <a href="http://www.sanluis.gov.ar/notas.asp?idCanal=8141&id=22834">
+# http://www.sanluis.gov.ar/notas.asp?idCanal=8141&id=22834
+# </a>
+# instead it seems. Or use "Buscador" from the main page of the San Luis
+# government, and fill in "huso" and click OK, and you will get 3 pages
+# from which the first one is identical to the above.
+
+# From Mariano Absatz (2008-01-28):
+# I can confirm that the Province of San Luis (and so far only that
+# province) decided to go back to UTC-3 effective midnight Jan 20th 2008
+# (that is, Monday 21st at 0:00 is the time the clocks were delayed back
+# 1 hour), and they intend to keep UTC-3 as their timezone all year round
+# (that is, unless they change their mind any minute now).
+#
+# So we'll have to add yet another city to 'southamerica' (I think San
+# Luis city is the mos populated city in the Province, so it'd be
+# America/Argentina/San_Luis... of course I can't remember if San Luis's
+# history of particular changes goes along with Mendoza or San Juan :-(
+# (I only remember not being able to collect hard facts about San Luis
+# back in 2004, when these provinces changed to UTC-4 for a few days, I
+# mailed them personally and never got an answer).
+
+# From Arthur David Olson (2008-03-15):
+# Until there's better information, asssume San Luis was like San Juan
+# rather than Mendoza (since San Juan has a simpler DST history).
+
 # Unless otherwise specified, data are from Shanks & Pottenger through 1992,
 # from the IATA otherwise.  As noted below, Shanks & Pottenger say that
 # America/Cordoba split into 6 subregions during 1991/1992, but we
@@ -350,6 +420,20 @@ Zone America/Argentina/Mendoza -4:35:16 - LMT	1894 Oct 31
 			-4:00	-	WART	2004 Sep 26
 			-3:00	Arg	AR%sT
 #
+# San Luis (SL)
+Zone America/Argentina/San_Luis -4:25:24 - LMT	1894 Oct 31
+			-4:16:48 -	CMT	1920 May
+			-4:00	-	ART	1930 Dec
+			-4:00	Arg	AR%sT	1969 Oct  5
+			-3:00	Arg	AR%sT	1991 Mar  1
+			-4:00	-	WART	1991 May  7
+			-3:00	Arg	AR%sT	1999 Oct  3
+			-4:00	Arg	AR%sT	2000 Mar  3
+			-3:00	-	ART	2004 May 31
+			-4:00	-	WART	2004 Jul 25
+			-3:00	Arg	AR%sT	2008 Jan 21
+			-3:00	-	ART
+#
 # Santa Cruz (SC)
 Zone America/Argentina/Rio_Gallegos -4:36:52 - LMT 1894 Oct 31
 			-4:16:48 -	CMT	1920 May # Cordoba Mean Time
@@ -759,6 +843,26 @@ Zone America/Rio_Branco	-4:31:12 -	LMT	1914
 # America/Santiago.  The pre-1980 Pacific/Easter data are dubious,
 # but we have no other source.
 
+# From German Poo-Caaman~o (2008-03-03):
+# Due to drought, Chile extends Daylight Time in three weeks.  This
+# is one-time change (Saturday 3/29 at 24:00 for America/Santiago
+# and Saturday 3/29 at 22:00 for Pacific/Easter)
+# The Supreme Decree is located at 
+# <a href="http://www.shoa.cl/servicios/supremo316.pdf">
+# http://www.shoa.cl/servicios/supremo316.pdf
+# </a>
+# and the instructions for 2008 are located in:
+# <a href="http://www.horaoficial.cl/cambio.htm">
+# http://www.horaoficial.cl/cambio.htm
+# </a>.
+
+# From Jos� Miguel Garrido (2008-03-05):
+# ...
+# You could see the announces of the change on 
+# <a href="http://www.shoa.cl/noticias/2008/04hora/hora.htm">
+# http://www.shoa.cl/noticias/2008/04hora/hora.htm
+# </a>.
+
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Chile	1927	1932	-	Sep	 1	0:00	1:00	S
 Rule	Chile	1928	1932	-	Apr	 1	0:00	0	-
@@ -789,7 +893,11 @@ Rule	Chile	1998	only	-	Mar	Sun>=9	3:00u	0	-
 Rule	Chile	1998	only	-	Sep	27	4:00u	1:00	S
 Rule	Chile	1999	only	-	Apr	 4	3:00u	0	-
 Rule	Chile	1999	max	-	Oct	Sun>=9	4:00u	1:00	S
-Rule	Chile	2000	max	-	Mar	Sun>=9	3:00u	0	-
+Rule	Chile	2000	2007	-	Mar	Sun>=9	3:00u	0	-
+# N.B.: the end of March 29 in Chile is March 30 in Universal time,
+# which is used below in specifying the transition.
+Rule	Chile	2008	only	-	Mar	30	3:00u	0	-
+Rule	Chile	2009	max	-	Mar	Sun>=9	3:00u	0	-
 # IATA SSIM anomalies: (1992-02) says 1992-03-14;
 # (1996-09) says 1998-03-08.  Ignore these.
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]

From fae8b5a6271aaa7d0b37e2d3b46e73115e24b070 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Tue, 27 May 2008 14:52:13 +0000
Subject: [PATCH 18/43] DateTimeZone data updated to version 2008c.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1343 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  2 +-
 .../src/java/org/joda/time/tz/src/Readme.txt  |  2 +-
 JodaTime/src/java/org/joda/time/tz/src/africa | 77 ++++++++++++++++++-
 JodaTime/src/java/org/joda/time/tz/src/asia   | 63 ++++++++++++++-
 4 files changed, 138 insertions(+), 6 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 8e396f16e..fe9192c79 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -35,7 +35,7 @@ Source compatible - Yes
 Serialization compatible - Yes
 
 Data compatible - Yes, except
-  - DateTimeZone data updated to version 2008b
+  - DateTimeZone data updated to version 2008c
 
 Semantic compatible - Yes
 
diff --git a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
index 42eb3434e..c68005ae8 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
+++ b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
@@ -1,2 +1,2 @@
 The data files in this directory were obtained from the public tz database,
-http://www.twinsun.com/tz/tz-link.htm, version 2008b.
+http://www.twinsun.com/tz/tz-link.htm, version 2008c.
diff --git a/JodaTime/src/java/org/joda/time/tz/src/africa b/JodaTime/src/java/org/joda/time/tz/src/africa
index a39d3caea..cf043ebdd 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/africa
+++ b/JodaTime/src/java/org/joda/time/tz/src/africa
@@ -1,4 +1,4 @@
-# @(#)africa	8.10
+# @(#)africa	8.11
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
@@ -400,6 +400,77 @@ Zone	Indian/Mayotte	3:00:56 -	LMT	1911 Jul	# Mamoutzou
 
 # Morocco
 # See the `europe' file for Spanish Morocco (Africa/Ceuta).
+
+# From Alex Krivenyshev (2008-05-09):
+# Here is an article that Morocco plan to introduce Daylight Saving Time between
+# 1 June, 2008 and 27 September, 2008.
+#
+# "... Morocco is to save energy by adjusting its clock during summer so it will
+# be one hour ahead of GMT between 1 June and 27 September, according to
+# Communication Minister and Gov ernment Spokesman, Khalid Naciri...."
+#
+# <a href="http://www.worldtimezone.net/dst_news/dst_news_morocco01.html">
+# http://www.worldtimezone.net/dst_news/dst_news_morocco01.html
+# </a>
+# OR
+# <a href="http://en.afrik.com/news11892.html">
+# http://en.afrik.com/news11892.html
+# </a>
+
+# From Alex Krivenyshev (2008-05-09):
+# The Morocco time change can be confirmed on Morocco web site Maghreb Arabe Presse:
+# <a href="http://www.map.ma/eng/sections/box3/morocco_shifts_to_da/view">
+# http://www.map.ma/eng/sections/box3/morocco_shifts_to_da/view
+# </a>
+#
+# Morocco shifts to daylight time on June 1st through September 27, Govt.
+# spokesman.
+
+# From Patrice Scattolin (2008-05-09):
+# According to this article:
+# <a href="http://www.avmaroc.com/actualite/heure-dete-comment-a127896.html">
+# http://www.avmaroc.com/actualite/heure-dete-comment-a127896.html
+# </a>
+# (and republished here:
+# <a href="http://www.actu.ma/heure-dete-comment_i127896_0.html">
+# http://www.actu.ma/heure-dete-comment_i127896_0.html
+# </a>
+# )
+# the changes occurs at midnight:
+#
+# saturday night may 31st at midnight (which in french is to be
+# intrepreted as the night between saturday and sunday)
+# sunday night the 28th  at midnight
+#
+# Seeing that the 28th is monday, I am guessing that she intends to say
+# the midnight of the 28th which is the midnight between sunday and
+# monday, which jives with other sources that say that it's inclusive
+# june1st to sept 27th.
+#
+# The decision was taken by decree *2-08-224 *but I can't find the decree
+# published on the web.
+#
+# It's also confirmed here:
+# <a href="http://www.maroc.ma/NR/exeres/FACF141F-D910-44B0-B7FA-6E03733425D1.htm ">
+# http://www.maroc.ma/NR/exeres/FACF141F-D910-44B0-B7FA-6E03733425D1.htm
+# </a>
+# on a government portal as being  between june 1st and sept 27th (not yet
+# posted in english).
+#
+# The following google query will generate many relevant hits:
+# <a href="http://www.google.com/search?hl=en&q=Conseil+de+gouvernement+maroc+heure+avance&btnG=Search">
+# http://www.google.com/search?hl=en&q=Conseil+de+gouvernement+maroc+heure+avance&btnG=Search
+# </a>
+
+# From Alex Krivenyshev (2008-05-09):
+# Is Western Sahara (part which administrated by Morocco) going to follow
+# Morocco DST changes?  Any information?  What about other part of
+# Western Sahara - under administration of POLISARIO Front (also named
+# SADR Saharawi Arab Democratic Republic)?
+
+# From Arthur David Olson (2008-05-09):
+# XXX--guess that it is only Morocco for now; guess only 2008 for now.
+
 # RULE	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Morocco	1939	only	-	Sep	12	 0:00	1:00	S
 Rule	Morocco	1939	only	-	Nov	19	 0:00	0	-
@@ -416,11 +487,13 @@ Rule	Morocco	1976	only	-	Aug	 1	 0:00	0	-
 Rule	Morocco	1977	only	-	Sep	28	 0:00	0	-
 Rule	Morocco	1978	only	-	Jun	 1	 0:00	1:00	S
 Rule	Morocco	1978	only	-	Aug	 4	 0:00	0	-
+Rule	Morocco	2008	only	-	Jun	 1	 0:00	1:00	S
+Rule	Morocco	2008	only	-	Sep	28	 0:00	0	-
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone Africa/Casablanca	-0:30:20 -	LMT	1913 Oct 26
 			 0:00	Morocco	WE%sT	1984 Mar 16
 			 1:00	-	CET	1986
-			 0:00	-	WET
+			 0:00	Morocco	WE%sT
 # Western Sahara
 Zone Africa/El_Aaiun	-0:52:48 -	LMT	1934 Jan
 			-1:00	-	WAT	1976 Apr 14
diff --git a/JodaTime/src/java/org/joda/time/tz/src/asia b/JodaTime/src/java/org/joda/time/tz/src/asia
index 5d7ffc504..cdaadfa07 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/asia
+++ b/JodaTime/src/java/org/joda/time/tz/src/asia
@@ -1,4 +1,4 @@
-# @(#)asia	8.18
+# @(#)asia	8.20
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
@@ -1376,6 +1376,42 @@ Zone	Indian/Maldives	4:54:00 -	LMT	1880	# Male
 # They decided not to adopt daylight-saving time....
 # http://www.mongolnews.mn/index.php?module=unuudur&sec=view&id=15742
 
+# From Deborah Goldsmith (2008-03-30):
+# We received a bug report claiming that the tz database UTC offset for
+# Asia/Choibalsan (GMT+09:00) is incorrect, and that it should be GMT
+# +08:00 instead. Different sources appear to disagree with the tz
+# database on this, e.g.:
+#
+# <a href="http://www.timeanddate.com/worldclock/city.html?n=1026">
+# http://www.timeanddate.com/worldclock/city.html?n=1026
+# </a>
+# <a href="http://www.worldtimeserver.com/current_time_in_MN.aspx">
+# http://www.worldtimeserver.com/current_time_in_MN.aspx
+# </a>
+#
+# both say GMT+08:00.
+
+# From Steffen Thorsen (2008-03-31):
+# eznis airways, which operates several domestic flights, has a flight
+# schedule here:
+# <a href="http://www.eznis.com/Container.jsp?id=112"
+# http://www.eznis.com/Container.jsp?id=112
+# </a>
+# (click the English flag for English)
+#
+# There it appears that flights between Choibalsan and Ulaanbatar arrive
+# about 1:35 - 1:50 hours later in local clock time, no matter the
+# direction, while Ulaanbaatar-Khvod takes 2 hours in the Eastern
+# direction and 3:35 back, which indicates that Ulaanbatar and Khvod are
+# in different time zones (like we know about), while Choibalsan and
+# Ulaanbatar are in the same time zone (correction needed).
+
+# From Arthur David Olson (2008-05-19):
+# Assume that Choibalsan is indeed offset by 8:00.
+# XXX--in the absence of better information, assume that transition
+# was at the start of 2008-03-31 (the day of Steffen Thorsen's report);
+# this is almost surely wrong.
+
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Mongol	1983	1984	-	Apr	1	0:00	1:00	S
 Rule	Mongol	1983	only	-	Oct	1	0:00	0	-
@@ -1411,7 +1447,8 @@ Zone	Asia/Ulaanbaatar 7:07:32 -	LMT	1905 Aug
 Zone	Asia/Choibalsan	7:38:00 -	LMT	1905 Aug
 			7:00	-	ULAT	1978
 			8:00	-	ULAT	1983 Apr
-			9:00	Mongol	CHO%sT	# Choibalsan Time
+			9:00	Mongol	CHO%sT	2008 Mar 31 # Choibalsan Time
+			8:00	Mongol	CHO%sT
 
 # Nepal
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
@@ -1461,10 +1498,32 @@ Zone	Asia/Muscat	3:54:20 -	LMT	1920
 # The minister told a news conference that the experiment had rather
 # shown 8 per cent higher consumption of electricity.
 
+# From Alex Krivenyshev (2008-05-15):
+# 
+# Here is an article that Pakistan plan to introduce Daylight Saving Time 
+# on June 1, 2008 for 3 months.
+# 
+# "... The federal cabinet on Wednesday announced a new conservation plan to help 
+# reduce load shedding by approving the closure of commercial centres at 9pm and 
+# moving clocks forward by one hour for the next three months. 
+# ...."
+# 
+# <a href="http://www.worldtimezone.net/dst_news/dst_news_pakistan01.html">
+# http://www.worldtimezone.net/dst_news/dst_news_pakistan01.html
+# </a>
+# OR
+# <a href="http://www.dailytimes.com.pk/default.asp?page=2008%5C05%5C15%5Cstory_15-5-2008_pg1_4">
+# http://www.dailytimes.com.pk/default.asp?page=2008%5C05%5C15%5Cstory_15-5-2008_pg1_4
+# </a>
+
+# From Arthur David Olson (2008-05-19):
+# XXX--midnight transitions is a guess; 2008 only is a guess.
 
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule Pakistan	2002	only	-	Apr	Sun>=2	0:01	1:00	S
 Rule Pakistan	2002	only	-	Oct	Sun>=2	0:01	0	-
+Rule Pakistan	2008	only	-	Jun	1	0:00	1:00	S
+Rule Pakistan	2008	only	-	Sep	1	0:00	0	-
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Asia/Karachi	4:28:12 -	LMT	1907
 			5:30	-	IST	1942 Sep

From 7eed68ff7922ee125e3186a9724f32d2c4dbec18 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 22 Jun 2008 10:41:41 +0000
Subject: [PATCH 19/43] Fix user guide example, bug 1945908

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1344 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/userguide.xml | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/JodaTime/xdocs/userguide.xml b/JodaTime/xdocs/userguide.xml
index 8995dd77c..7ab21edcf 100644
--- a/JodaTime/xdocs/userguide.xml
+++ b/JodaTime/xdocs/userguide.xml
@@ -385,8 +385,8 @@ For maximum flexibility however, you might choose to declare your method
 parameters using the Joda-Time interface.
 A method on the interface can obtain the concrete class for use within the method.
 <source>
-    public void process(ReadableInstant instant) {
-        DateTime dt = instant.toDateTime();
+    public void process(ReadableDateTime dateTime) {
+        DateTime dt = dateTime.toDateTime();
     }
 </source>
 </p>

From d8fd2cecc367eeb08329eec8fc3238c707947307 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Mon, 7 Jul 2008 15:53:29 +0000
Subject: [PATCH 20/43] DateTimeZone data updated to version 2008d.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1345 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |   2 +-
 .../src/java/org/joda/time/tz/src/Readme.txt  |   2 +-
 JodaTime/src/java/org/joda/time/tz/src/africa |  28 ++++-
 JodaTime/src/java/org/joda/time/tz/src/asia   |  24 +++-
 .../src/java/org/joda/time/tz/src/australasia |   6 +-
 JodaTime/src/java/org/joda/time/tz/src/europe |  26 +++--
 .../java/org/joda/time/tz/src/northamerica    |   6 +-
 .../java/org/joda/time/tz/src/southamerica    | 104 +++++++++++++-----
 8 files changed, 151 insertions(+), 47 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index fe9192c79..647697bb6 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -35,7 +35,7 @@ Source compatible - Yes
 Serialization compatible - Yes
 
 Data compatible - Yes, except
-  - DateTimeZone data updated to version 2008c
+  - DateTimeZone data updated to version 2008d
 
 Semantic compatible - Yes
 
diff --git a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
index c68005ae8..99a8d8fac 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
+++ b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
@@ -1,2 +1,2 @@
 The data files in this directory were obtained from the public tz database,
-http://www.twinsun.com/tz/tz-link.htm, version 2008c.
+http://www.twinsun.com/tz/tz-link.htm, version 2008d.
diff --git a/JodaTime/src/java/org/joda/time/tz/src/africa b/JodaTime/src/java/org/joda/time/tz/src/africa
index cf043ebdd..2c33b1a57 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/africa
+++ b/JodaTime/src/java/org/joda/time/tz/src/africa
@@ -1,4 +1,4 @@
-# @(#)africa	8.11
+# @(#)africa	8.13
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
@@ -387,9 +387,33 @@ Zone Africa/Nouakchott	-1:03:48 -	LMT	1912
 			 0:00	-	GMT
 
 # Mauritius
+
+# From Steffen Thorsen (2008-06-25):
+# Mauritius plans to observe DST from 2008-11-01 to 2009-03-31 on a trial
+# basis....
+# It seems that Mauritius observed daylight saving time from 1982-10-10 to 
+# 1983-03-20 as well, but that was not successful....
+# http://www.timeanddate.com/news/time/mauritius-daylight-saving-time.html
+#
+# From Alex Krivenyshev (2008-06-25):
+# http://economicdevelopment.gov.mu/portal/site/Mainhomepage/menuitem.a42b24128104d9845dabddd154508a0c/?content_id=0a7cee8b5d69a110VgnVCM1000000a04a8c0RCRD
+#
+# From Arthur David Olson (2008-06-30):
+# The www.timeanddate.com article cited by Steffen Thorsen notes that "A
+# final decision has yet to be made on the times that daylight saving
+# would begin and end on these dates." As a place holder, use midnight.
+#
+# From Paul Eggert (2008-06-30):
+# Follow Thorsen on DST in 1982/1983, instead of Shanks & Pottenger.
+
+# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+Rule Mauritius	1982	only	-	Oct	10	0:00	1:00	S
+Rule Mauritius	1983	only	-	Mar	21	0:00	0	-
+Rule Mauritius	2008	only	-	Nov	 1	0:00	1:00	S
+Rule Mauritius	2009	only	-	Apr	 1	0:00	0	-
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone Indian/Mauritius	3:50:00 -	LMT	1907		# Port Louis
-			4:00	-	MUT	# Mauritius Time
+			4:00 Mauritius	MU%sT	# Mauritius Time
 # Agalega Is, Rodriguez
 # no information; probably like Indian/Mauritius
 
diff --git a/JodaTime/src/java/org/joda/time/tz/src/asia b/JodaTime/src/java/org/joda/time/tz/src/asia
index cdaadfa07..4d904dac6 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/asia
+++ b/JodaTime/src/java/org/joda/time/tz/src/asia
@@ -1,4 +1,4 @@
-# @(#)asia	8.20
+# @(#)asia	8.21
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
@@ -229,6 +229,28 @@ Rule	PRC	1987	1991	-	Apr	Sun>=10	0:00	1:00	D
 # (could be true), for the moment I am assuming that those two
 # counties are mistakes in the astro.com data.
 
+# From Paul Eggert (2008-02-11):
+# I just now checked Google News for western news sources that talk
+# about China's single time zone, and couldn't find anything before 1986
+# talking about China being in one time zone.  (That article was: Jim
+# Mann, "A clumsy embrace for another western custom: China on daylight
+# time--sort of", Los Angeles Times, 1986-05-05.  By the way, this
+# article confirms the tz database's data claiming that China began
+# observing daylight saving time in 1986.
+#
+# From Thomas S. Mullaney (2008-02-11):
+# I think you're combining two subjects that need to treated 
+# separately: daylight savings (which, you're correct, wasn't 
+# implemented until the 1980s) and the unified time zone centered near 
+# Beijing (which was implemented in 1949). Briefly, there was also a 
+# "Lhasa Time" in Tibet and "Urumqi Time" in Xinjiang. The first was 
+# ceased, and the second eventually recognized (again, in the 1980s).
+#
+# From Paul Eggert (2008-06-30):
+# There seems to be a good chance China switched to a single time zone in 1949
+# rather than in 1980 as Shanks & Pottenger have it, but we don't have a
+# reliable documentary source saying so yet, so for now we still go with
+# Shanks & Pottenger.
 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 # Changbai Time ("Long-white Time", Long-white = Heilongjiang area)
diff --git a/JodaTime/src/java/org/joda/time/tz/src/australasia b/JodaTime/src/java/org/joda/time/tz/src/australasia
index 4090505e0..0223bbc39 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/australasia
+++ b/JodaTime/src/java/org/joda/time/tz/src/australasia
@@ -1,4 +1,4 @@
-# @(#)australasia	8.8
+# @(#)australasia	8.9
 # <pre>
 
 # This file also includes Pacific islands.
@@ -1346,7 +1346,7 @@ Zone	Pacific/Wallis	12:15:20 -	LMT	1901
 # * Tonga will introduce DST in November
 #
 # I was given this link by John Letts:
-# <a hef="http://news.bbc.co.uk/hi/english/world/asia-pacific/newsid_424000/424764.stm">
+# <a href="http://news.bbc.co.uk/hi/english/world/asia-pacific/newsid_424000/424764.stm">
 # http://news.bbc.co.uk/hi/english/world/asia-pacific/newsid_424000/424764.stm
 # </a>
 #
@@ -1356,7 +1356,7 @@ Zone	Pacific/Wallis	12:15:20 -	LMT	1901
 # (12 + 1 hour DST).
 
 # From Arthur David Olson (1999-09-20):
-# According to <a href="http://www.tongaonline.com/news/sept1799.html>
+# According to <a href="http://www.tongaonline.com/news/sept1799.html">
 # http://www.tongaonline.com/news/sept1799.html
 # </a>:
 # "Daylight Savings Time will take effect on Oct. 2 through April 15, 2000
diff --git a/JodaTime/src/java/org/joda/time/tz/src/europe b/JodaTime/src/java/org/joda/time/tz/src/europe
index 88e8889cd..68b3738f0 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/europe
+++ b/JodaTime/src/java/org/joda/time/tz/src/europe
@@ -1,4 +1,4 @@
-# @(#)europe	8.12
+# @(#)europe	8.14
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
@@ -457,7 +457,7 @@ Rule	EU	1979	1995	-	Sep	lastSun	 1:00u	0	-
 Rule	EU	1981	max	-	Mar	lastSun	 1:00u	1:00	S
 Rule	EU	1996	max	-	Oct	lastSun	 1:00u	0	-
 # The most recent directive covers the years starting in 2002.  See:
-# <a href="http://europa.eu.int/eur-lex/en/lif/dat/2000/en_300L0084.html"
+# <a href="http://europa.eu.int/eur-lex/en/lif/dat/2000/en_300L0084.html">
 # Directive 2000/84/EC of the European Parliament and of the Council
 # of 19 January 2001 on summer-time arrangements.
 # </a>
@@ -480,9 +480,10 @@ Rule	C-Eur	1940	only	-	Apr	 1	 2:00s	1:00	S
 Rule	C-Eur	1942	only	-	Nov	 2	 2:00s	0	-
 Rule	C-Eur	1943	only	-	Mar	29	 2:00s	1:00	S
 Rule	C-Eur	1943	only	-	Oct	 4	 2:00s	0	-
-Rule	C-Eur	1944	only	-	Apr	 3	 2:00s	1:00	S
+Rule	C-Eur	1944	1945	-	Apr	Mon>=1	 2:00s	1:00	S
 # Whitman gives 1944 Oct 7; go with Shanks & Pottenger.
 Rule	C-Eur	1944	only	-	Oct	 2	 2:00s	0	-
+Rule	C-Eur	1945	only	-	Sep	16	 2:00	0	-
 Rule	C-Eur	1977	1980	-	Apr	Sun>=1	 2:00s	1:00	S
 Rule	C-Eur	1977	only	-	Sep	lastSun	 2:00s	0	-
 Rule	C-Eur	1978	only	-	Oct	 1	 2:00s	0	-
@@ -1099,27 +1100,34 @@ Zone	Europe/Paris	0:09:21 -	LMT	1891 Mar 15  0:01
 
 # From Paul Eggert (2003-03-08):
 # <a href="http://www.parlament-berlin.de/pds-fraktion.nsf/727459127c8b66ee8525662300459099/defc77cb784f180ac1256c2b0030274b/$FILE/bersarint.pdf">
+# http://www.parlament-berlin.de/pds-fraktion.nsf/727459127c8b66ee8525662300459099/defc77cb784f180ac1256c2b0030274b/$FILE/bersarint.pdf
+# </a>
 # says that Bersarin issued an order to use Moscow time on May 20.
 # However, Moscow did not observe daylight saving in 1945, so
 # this was equivalent to CEMT (GMT+3), not GMT+4.
 
 
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Germany	1945	only	-	Apr	 2	2:00s	1:00	S
-Rule	Germany	1945	only	-	May	24	2:00	2:00	M # Midsummer
-Rule	Germany	1945	only	-	Sep	24	3:00	1:00	S
-Rule	Germany	1945	only	-	Nov	18	2:00s	0	-
 Rule	Germany	1946	only	-	Apr	14	2:00s	1:00	S
 Rule	Germany	1946	only	-	Oct	 7	2:00s	0	-
 Rule	Germany	1947	1949	-	Oct	Sun>=1	2:00s	0	-
-Rule	Germany	1947	only	-	Apr	 6	2:00s	1:00	S
+# http://www.ptb.de/de/org/4/44/441/salt.htm says the following transition
+# occurred at 3:00 MEZ, not the 2:00 MEZ given in Shanks & Pottenger.
+# Go with the PTB.
+Rule	Germany	1947	only	-	Apr	 6	3:00s	1:00	S
 Rule	Germany	1947	only	-	May	11	2:00s	2:00	M
 Rule	Germany	1947	only	-	Jun	29	3:00	1:00	S
 Rule	Germany	1948	only	-	Apr	18	2:00s	1:00	S
 Rule	Germany	1949	only	-	Apr	10	2:00s	1:00	S
+
+Rule SovietZone	1945	only	-	May	24	2:00	2:00	M # Midsummer
+Rule SovietZone	1945	only	-	Sep	24	3:00	1:00	S
+Rule SovietZone	1945	only	-	Nov	18	2:00s	0	-
+
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Europe/Berlin	0:53:28 -	LMT	1893 Apr
-			1:00	C-Eur	CE%sT	1945 Apr 2 2:00
+			1:00	C-Eur	CE%sT	1945 May 24 2:00
+			1:00 SovietZone	CE%sT	1946
 			1:00	Germany	CE%sT	1980
 			1:00	EU	CE%sT
 
diff --git a/JodaTime/src/java/org/joda/time/tz/src/northamerica b/JodaTime/src/java/org/joda/time/tz/src/northamerica
index 600e15f69..f152549d1 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/northamerica
+++ b/JodaTime/src/java/org/joda/time/tz/src/northamerica
@@ -1,4 +1,4 @@
-# @(#)northamerica	8.23
+# @(#)northamerica	8.24
 # <pre>
 
 # also includes Central America and the Caribbean
@@ -2076,8 +2076,8 @@ Zone	America/Antigua	-4:07:12 -	LMT	1912 Mar 2
 # http://www.jonesbahamas.com/?c=45&a=10412
 
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Bahamas	1964	2006	-	Oct	lastSun	2:00	0	S
-Rule	Bahamas	1964	1986	-	Apr	lastSun	2:00	1:00	D
+Rule	Bahamas	1964	1975	-	Oct	lastSun	2:00	0	S
+Rule	Bahamas	1964	1975	-	Apr	lastSun	2:00	1:00	D
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	America/Nassau	-5:09:24 -	LMT	1912 Mar 2
 			-5:00	Bahamas	E%sT	1976
diff --git a/JodaTime/src/java/org/joda/time/tz/src/southamerica b/JodaTime/src/java/org/joda/time/tz/src/southamerica
index 4cffe0eae..d6ed2b66f 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/southamerica
+++ b/JodaTime/src/java/org/joda/time/tz/src/southamerica
@@ -1,4 +1,4 @@
-# @(#)southamerica	8.19
+# @(#)southamerica	8.26
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
@@ -294,14 +294,14 @@ Rule	Arg	2008	max	-	Oct	Sun>=1	0:00	1:00	S
 # back in 2004, when these provinces changed to UTC-4 for a few days, I
 # mailed them personally and never got an answer).
 
-# From Arthur David Olson (2008-03-15):
-# Until there's better information, asssume San Luis was like San Juan
-# rather than Mendoza (since San Juan has a simpler DST history).
-
+# From Paul Eggert (2008-06-30):
 # Unless otherwise specified, data are from Shanks & Pottenger through 1992,
 # from the IATA otherwise.  As noted below, Shanks & Pottenger say that
-# America/Cordoba split into 6 subregions during 1991/1992, but we
-# haven't verified this yet so for now we'll keep it a single region.
+# America/Cordoba split into 6 subregions during 1991/1992, one of which
+# was America/San_Luis, but we haven't verified this yet so for now we'll
+# keep America/Cordoba a single region rather than splitting it into the
+# other 5 subregions.
+
 #
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 #
@@ -316,14 +316,12 @@ Zone America/Argentina/Buenos_Aires -3:53:48 - LMT 1894 Oct 31
 #
 # Santa Fe (SF), Entre Rios (ER), Corrientes (CN), Misiones (MN), Chaco (CC),
 # Formosa (FM), Salta (SA), Santiago del Estero (SE), Cordoba (CB),
-# San Luis (SL), La Pampa (LP), Neuquen (NQ), Rio Negro (RN)
+# La Pampa (LP), Neuquen (NQ), Rio Negro (RN)
 #
 # Shanks & Pottenger also make the following claims, which we haven't verified:
 # - Formosa switched to -3:00 on 1991-01-07.
 # - Misiones switched to -3:00 on 1990-12-29.
 # - Chaco switched to -3:00 on 1991-01-04.
-# - San Luis switched to -4:00 on 1990-03-14, then to -3:00 on 1990-10-15,
-#   then to -4:00 on 1991-03-01, then to -3:00 on 1991-06-01.
 # - Santiago del Estero switched to -4:00 on 1991-04-01,
 #   then to -3:00 on 1991-04-26.
 #
@@ -425,10 +423,13 @@ Zone America/Argentina/San_Luis -4:25:24 - LMT	1894 Oct 31
 			-4:16:48 -	CMT	1920 May
 			-4:00	-	ART	1930 Dec
 			-4:00	Arg	AR%sT	1969 Oct  5
-			-3:00	Arg	AR%sT	1991 Mar  1
-			-4:00	-	WART	1991 May  7
-			-3:00	Arg	AR%sT	1999 Oct  3
-			-4:00	Arg	AR%sT	2000 Mar  3
+			-3:00	Arg	AR%sT	1990
+			-3:00	1:00	ARST	1990 Mar 14
+			-4:00	-	WART	1990 Oct 15
+			-4:00	1:00	WARST	1991 Mar  1
+			-4:00	-	WART	1991 Jun  1
+			-3:00	-	ART	1999 Oct  3
+			-4:00	1:00	WARST	2000 Mar  3
 			-3:00	-	ART	2004 May 31
 			-4:00	-	WART	2004 Jul 25
 			-3:00	Arg	AR%sT	2008 Jan 21
@@ -540,6 +541,50 @@ Zone	America/La_Paz	-4:32:36 -	LMT	1890
 # Brazil will start DST on 2007-10-14 00:00 and end on 2008-02-17 00:00:
 # http://www.mme.gov.br/site/news/detail.do;jsessionid=BBA06811AFCAAC28F0285210913513DA?newsId=13975
 
+# From Paul Schulze (2008-06-24):
+# ...by law number 11.662 of April 24, 2008 (published in the "Diario
+# Oficial da Uniao"...) in Brazil there are changes in the timezones,
+# effective today (00:00am at June 24, 2008) as follows:
+#
+# a) The timezone UTC+5 is e[x]tinguished, with all the Acre state and the
+# part of the Amazonas state that had this timezone now being put to the
+# timezone UTC+4
+# b) The whole Para state now is put at timezone UTC+3, instead of just
+# part of it, as was before.
+#
+# This change follows a proposal of senator Tiao Viana of Acre state, that
+# proposed it due to concerns about open television channels displaying
+# programs inappropriate to youths in the states that had the timezone
+# UTC+5 too early in the night. In the occasion, some more corrections
+# were proposed, trying to unify the timezones of any given state. This
+# change modifies timezone rules defined in decree 2.784 of 18 June,
+# 1913.
+
+# From Rodrigo Severo (2008-06-24):
+# Just correcting the URL:
+# <a href="https://www.in.gov.br/imprensa/visualiza/index.jsp?jornal=3Ddo&secao=3D1&pagina=3D1&data=3D25/04/2008">
+# https://www.in.gov.br/imprensa/visualiza/index.jsp?jornal=3Ddo&secao=3D1&pagina=3D1&data=3D25/04/2008
+# </a>
+#
+# As a result of the above Decree I believe the America/Rio_Branco
+# timezone shall be modified from UTC-5 to UTC-4 and a new timezone shall
+# be created to represent the the west side of the Para State. I
+# suggest this new timezone be called Santarem as the most
+# important/populated city in the affected area.
+#
+# This new timezone would be the same as the Rio_Branco timezone up to
+# the 2008/06/24 change which would be to UTC-3 instead of UTC-4.
+
+# From Alex Krivenyshev (2008-06-24):
+# This is a quick reference page for New and Old Brazil Time Zones map.
+# <a href="http://www.worldtimezone.com/brazil-time-new-old.php">
+# http://www.worldtimezone.com/brazil-time-new-old.php
+# </a>
+#
+# - 4 time zones replaced by 3 time zones-eliminating time zone UTC- 05
+# (state Acre and the part of the Amazonas will be UTC/GMT- 04) - western
+# part of Par state is moving to one timezone UTC- 03 (from UTC -04).
+
 # From Paul Eggert (2002-10-10):
 # The official decrees referenced below are mostly taken from
 # <a href="http://pcdsh01.on.br/DecHV.html">
@@ -662,13 +707,13 @@ Rule	Brazil	2000	only	-	Feb	27	 0:00	0	-
 Rule	Brazil	2000	2001	-	Oct	Sun>=8	 0:00	1:00	S
 Rule	Brazil	2001	2006	-	Feb	Sun>=15	 0:00	0	-
 # Decree 4,399 (2002-10-01) repeals DST in AL, CE, MA, PB, PE, PI, RN, SE.
-# <a href="http://www.presidencia.gov.br/CCIVIL/decreto/2002/D4399.htm"></a>
+# <a href="http://www.presidencia.gov.br/CCIVIL/decreto/2002/D4399.htm">4,399</a>
 Rule	Brazil	2002	only	-	Nov	 3	 0:00	1:00	S
 # Decree 4,844 (2003-09-24; corrected 2003-09-26) repeals DST in BA, MT, TO.
-# <a href="http://www.presidencia.gov.br/CCIVIL/decreto/2003/D4844.htm"></a>
+# <a href="http://www.presidencia.gov.br/CCIVIL/decreto/2003/D4844.htm">4,844</a>
 Rule	Brazil	2003	only	-	Oct	19	 0:00	1:00	S
 # Decree 5,223 (2004-10-01) reestablishes DST in MT.
-# <a href="http://www.planalto.gov.br/ccivil_03/_Ato2004-2006/2004/Decreto/D5223.htm"></a>
+# <a href="http://www.planalto.gov.br/ccivil_03/_Ato2004-2006/2004/Decreto/D5223.htm">5,223</a>
 Rule	Brazil	2004	only	-	Nov	 2	 0:00	1:00	S
 # Decree <a href="http://pcdsh01.on.br/DecHV5539.gif">5,539</a> (2005-09-19),
 # adopted by the same states as before.
@@ -677,9 +722,8 @@ Rule	Brazil	2005	only	-	Oct	16	 0:00	1:00	S
 # adopted by the same states as before.
 Rule	Brazil	2006	only	-	Nov	 5	 0:00	1:00	S
 Rule	Brazil	2007	only	-	Feb	25	 0:00	0	-
-# (Decree number not yet known)
-# http://www.brasil.gov.br/noticias/ultimas_noticias/horario_verao070920/
-# (2007-09-20) after a heads-up from Steffen Thorsen:
+# Decree <a href="http://pcdsh01.on.br/DecHV6212.gif">6,212</a> (2007-09-26),
+# adopted by the same states as before.
 Rule	Brazil	2007	max	-	Oct	Sun>=8	 0:00	1:00	S
 Rule	Brazil	2008	max	-	Feb	Sun>=15	 0:00	0	-
 # The latest ruleset listed above says that the following states observe DST:
@@ -687,7 +731,6 @@ Rule	Brazil	2008	max	-	Feb	Sun>=15	 0:00	0	-
 # For dates after mid-2008, the above rules with TO="max" are guesses
 # and are quite possibly wrong, but are more likely than no DST at all.
 
-
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 #
 # Fernando de Noronha (administratively part of PE)
@@ -713,6 +756,13 @@ Zone America/Belem	-3:13:56 -	LMT	1914
 			-3:00	Brazil	BR%sT	1988 Sep 12
 			-3:00	-	BRT
 #
+# west Para (PA)
+# West Para includes Altamira, Oribidos, Prainha, Oriximina, and Santarem.
+Zone America/Santarem	-3:38:48 -	LMT	1914
+			-4:00	Brazil	AM%sT	1988 Sep 12
+			-4:00	-	AMT	2008 Jun 24 00:00
+			-3:00	-	BRT
+#
 # Maranhao (MA), Piaui (PI), Ceara (CE), Rio Grande do Norte (RN),
 # Paraiba (PB)
 Zone America/Fortaleza	-2:34:00 -	LMT	1914
@@ -775,8 +825,7 @@ Zone America/Cuiaba	-3:44:20 -	LMT	1914
 			-4:00	-	AMT	2004 Oct  1
 			-4:00	Brazil	AM%sT
 #
-# west Para (PA), Rondonia (RO)
-# West Para includes Altamira, Oribidos, Prainha, Oriximina, and Santarem.
+# Rondonia (RO)
 Zone America/Porto_Velho -4:15:36 -	LMT	1914
 			-4:00	Brazil	AM%sT	1988 Sep 12
 			-4:00	-	AMT
@@ -803,13 +852,14 @@ Zone America/Eirunepe	-4:39:28 -	LMT	1914
 			-5:00	Brazil	AC%sT	1988 Sep 12
 			-5:00	-	ACT	1993 Sep 28
 			-5:00	Brazil	AC%sT	1994 Sep 22
-			-5:00	-	ACT
+			-5:00	-	ACT	2008 Jun 24 00:00
+			-4:00	-	AMT
 #
 # Acre (AC)
 Zone America/Rio_Branco	-4:31:12 -	LMT	1914
 			-5:00	Brazil	AC%sT	1988 Sep 12
-			-5:00	-	ACT
-
+			-5:00	-	ACT	2008 Jun 24 00:00
+			-4:00	-	AMT
 
 # Chile
 
@@ -856,7 +906,7 @@ Zone America/Rio_Branco	-4:31:12 -	LMT	1914
 # http://www.horaoficial.cl/cambio.htm
 # </a>.
 
-# From Jos� Miguel Garrido (2008-03-05):
+# From Jose Miguel Garrido (2008-03-05):
 # ...
 # You could see the announces of the change on 
 # <a href="http://www.shoa.cl/noticias/2008/04hora/hora.htm">

From 08669f7806a6eba0b76db45047ae89b95385155a Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Tue, 29 Jul 2008 02:13:09 +0000
Subject: [PATCH 21/43] DateTimeZone data updated to version 2008e.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1346 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  2 +-
 .../src/java/org/joda/time/tz/src/Readme.txt  |  2 +-
 JodaTime/src/java/org/joda/time/tz/src/africa | 44 ++++++++++++---
 JodaTime/src/java/org/joda/time/tz/src/asia   |  4 +-
 JodaTime/src/java/org/joda/time/tz/src/europe | 54 ++++++++++++++++---
 5 files changed, 88 insertions(+), 18 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 647697bb6..9f9c4ca68 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -35,7 +35,7 @@ Source compatible - Yes
 Serialization compatible - Yes
 
 Data compatible - Yes, except
-  - DateTimeZone data updated to version 2008d
+  - DateTimeZone data updated to version 2008e
 
 Semantic compatible - Yes
 
diff --git a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
index 99a8d8fac..5fa77589c 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
+++ b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
@@ -1,2 +1,2 @@
 The data files in this directory were obtained from the public tz database,
-http://www.twinsun.com/tz/tz-link.htm, version 2008d.
+http://www.twinsun.com/tz/tz-link.htm, version 2008e.
diff --git a/JodaTime/src/java/org/joda/time/tz/src/africa b/JodaTime/src/java/org/joda/time/tz/src/africa
index 2c33b1a57..97297d00e 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/africa
+++ b/JodaTime/src/java/org/joda/time/tz/src/africa
@@ -1,4 +1,4 @@
-# @(#)africa	8.13
+# @(#)africa	8.15
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
@@ -394,23 +394,53 @@ Zone Africa/Nouakchott	-1:03:48 -	LMT	1912
 # It seems that Mauritius observed daylight saving time from 1982-10-10 to 
 # 1983-03-20 as well, but that was not successful....
 # http://www.timeanddate.com/news/time/mauritius-daylight-saving-time.html
-#
+
 # From Alex Krivenyshev (2008-06-25):
 # http://economicdevelopment.gov.mu/portal/site/Mainhomepage/menuitem.a42b24128104d9845dabddd154508a0c/?content_id=0a7cee8b5d69a110VgnVCM1000000a04a8c0RCRD
-#
+
 # From Arthur David Olson (2008-06-30):
 # The www.timeanddate.com article cited by Steffen Thorsen notes that "A
 # final decision has yet to be made on the times that daylight saving
 # would begin and end on these dates." As a place holder, use midnight.
-#
+
 # From Paul Eggert (2008-06-30):
 # Follow Thorsen on DST in 1982/1983, instead of Shanks & Pottenger.
 
+# From Steffen Thorsen (2008-07-10):
+# According to
+# <a href="http://www.lexpress.mu/display_article.php?news_id=111216">
+# http://www.lexpress.mu/display_article.php?news_id=111216
+# </a>
+# (in French), Mauritius will start and end their DST a few days earlier
+# than previously announced (2008-11-01 to 2009-03-31).  The new start
+# date is 2008-10-26 at 02:00 and the new end date is 2009-03-27 (no time
+# given, but it is probably at either 2 or 3 wall clock time).
+# 
+# A little strange though, since the article says that they moved the date 
+# to align itself with Europe and USA which also change time on that date, 
+# but that means they have not paid attention to what happened in 
+# USA/Canada last year (DST ends first Sunday in November). I also wonder 
+# why that they end on a Friday, instead of aligning with Europe which 
+# changes two days later.
+
+# From Alex Krivenyshev (2008-07-11):
+# Seems that English language article "The revival of daylight saving
+# time:  Energy conservation?"-# No. 16578 (07/11/2008) was originally
+# published on Monday, June 30, 2008...
+#
+# I guess that article in French "Le gouvernement avance l'introduction
+# de l'heure d'ete" stating that DST in Mauritius starting on October 26
+# and ending on March 27, 2009 is the most recent one.
+# ...
+# <a href="http://www.worldtimezone.com/dst_news/dst_news_mauritius02.html">
+# http://www.worldtimezone.com/dst_news/dst_news_mauritius02.html
+# </a>
+
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule Mauritius	1982	only	-	Oct	10	0:00	1:00	S
 Rule Mauritius	1983	only	-	Mar	21	0:00	0	-
-Rule Mauritius	2008	only	-	Nov	 1	0:00	1:00	S
-Rule Mauritius	2009	only	-	Apr	 1	0:00	0	-
+Rule Mauritius	2008	only	-	Oct	26	2:00s	1:00	S
+Rule Mauritius	2009	only	-	Mar	27	2:00s	0	-
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone Indian/Mauritius	3:50:00 -	LMT	1907		# Port Louis
 			4:00 Mauritius	MU%sT	# Mauritius Time
@@ -475,7 +505,7 @@ Zone	Indian/Mayotte	3:00:56 -	LMT	1911 Jul	# Mamoutzou
 # published on the web.
 #
 # It's also confirmed here:
-# <a href="http://www.maroc.ma/NR/exeres/FACF141F-D910-44B0-B7FA-6E03733425D1.htm ">
+# <a href="http://www.maroc.ma/NR/exeres/FACF141F-D910-44B0-B7FA-6E03733425D1.htm">
 # http://www.maroc.ma/NR/exeres/FACF141F-D910-44B0-B7FA-6E03733425D1.htm
 # </a>
 # on a government portal as being  between june 1st and sept 27th (not yet
diff --git a/JodaTime/src/java/org/joda/time/tz/src/asia b/JodaTime/src/java/org/joda/time/tz/src/asia
index 4d904dac6..55afaddbd 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/asia
+++ b/JodaTime/src/java/org/joda/time/tz/src/asia
@@ -1,4 +1,4 @@
-# @(#)asia	8.21
+# @(#)asia	8.22
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
@@ -1416,7 +1416,7 @@ Zone	Indian/Maldives	4:54:00 -	LMT	1880	# Male
 # From Steffen Thorsen (2008-03-31):
 # eznis airways, which operates several domestic flights, has a flight
 # schedule here:
-# <a href="http://www.eznis.com/Container.jsp?id=112"
+# <a href="http://www.eznis.com/Container.jsp?id=112">
 # http://www.eznis.com/Container.jsp?id=112
 # </a>
 # (click the English flag for English)
diff --git a/JodaTime/src/java/org/joda/time/tz/src/europe b/JodaTime/src/java/org/joda/time/tz/src/europe
index 68b3738f0..f6974ed3e 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/europe
+++ b/JodaTime/src/java/org/joda/time/tz/src/europe
@@ -1,4 +1,4 @@
-# @(#)europe	8.14
+# @(#)europe	8.17
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
@@ -483,7 +483,45 @@ Rule	C-Eur	1943	only	-	Oct	 4	 2:00s	0	-
 Rule	C-Eur	1944	1945	-	Apr	Mon>=1	 2:00s	1:00	S
 # Whitman gives 1944 Oct 7; go with Shanks & Pottenger.
 Rule	C-Eur	1944	only	-	Oct	 2	 2:00s	0	-
-Rule	C-Eur	1945	only	-	Sep	16	 2:00	0	-
+# From Jesper Norgaard Welen (2008-07-13):
+#
+# I found what is probably a typo of 2:00 which should perhaps be 2:00s
+# in the C-Eur rule from tz database version 2008d (this part was
+# corrected in version 2008d). The circumstancial evidence is simply the
+# tz database itself, as seen below:
+#
+# Zone Europe/Paris 0:09:21 - LMT 1891 Mar 15  0:01
+#    0:00 France WE%sT 1945 Sep 16  3:00
+#
+# Zone Europe/Monaco 0:29:32 - LMT 1891 Mar 15
+#    0:00 France WE%sT 1945 Sep 16 3:00
+#
+# Zone Europe/Belgrade 1:22:00 - LMT 1884
+#    1:00 1:00 CEST 1945 Sep 16  2:00s
+#
+# Rule France 1945 only - Sep 16  3:00 0 -
+# Rule Belgium 1945 only - Sep 16  2:00s 0 -
+# Rule Neth 1945 only - Sep 16 2:00s 0 -
+#
+# The rule line to be changed is:
+#
+# Rule C-Eur 1945 only - Sep 16  2:00 0 -
+#
+# It seems that Paris, Monaco, Rule France, Rule Belgium all agree on
+# 2:00 standard time, e.g. 3:00 local time.  However there are no
+# countries that use C-Eur rules in September 1945, so the only items
+# affected are apparently these ficticious zones that translates acronyms
+# CET and MET:
+#
+# Zone CET  1:00 C-Eur CE%sT
+# Zone MET  1:00 C-Eur ME%sT
+#
+# It this is right then the corrected version would look like:
+#
+# Rule C-Eur 1945 only - Sep 16  2:00s 0 -
+#
+# A small step for mankind though 8-)
+Rule	C-Eur	1945	only	-	Sep	16	 2:00s	0	-
 Rule	C-Eur	1977	1980	-	Apr	Sun>=1	 2:00s	1:00	S
 Rule	C-Eur	1977	only	-	Sep	lastSun	 2:00s	0	-
 Rule	C-Eur	1978	only	-	Oct	 1	 2:00s	0	-
@@ -726,7 +764,8 @@ Rule	Bulg	1981	only	-	Sep	27	 2:00	0	-
 Zone	Europe/Sofia	1:33:16 -	LMT	1880
 			1:56:56	-	IMT	1894 Nov 30 # Istanbul MT?
 			2:00	-	EET	1942 Nov  2  3:00
-			1:00	C-Eur	CE%sT	1945 Apr  2  3:00
+			1:00	C-Eur	CE%sT	1945
+			1:00	-	CET	1945 Apr 2 3:00
 			2:00	-	EET	1979 Mar 31 23:00
 			2:00	Bulg	EE%sT	1982 Sep 26  2:00
 			2:00	C-Eur	EE%sT	1991
@@ -1094,8 +1133,8 @@ Zone	Europe/Paris	0:09:21 -	LMT	1891 Mar 15  0:01
 # [See tz-link.htm for the URL.]
 
 # From Joerg Schilling (2002-10-23):
-# In 1945, Berlin was switched to Moscow Summer time (GMT+4) by <a
-# href="http://www.dhm.de/lemo/html/biografien/BersarinNikolai/">
+# In 1945, Berlin was switched to Moscow Summer time (GMT+4) by
+# <a href="http://www.dhm.de/lemo/html/biografien/BersarinNikolai/">
 # General [Nikolai] Bersarin</a>.
 
 # From Paul Eggert (2003-03-08):
@@ -1204,7 +1243,7 @@ Rule	Hungary	1980	only	-	Apr	 6	 1:00	1:00	S
 Zone	Europe/Budapest	1:16:20 -	LMT	1890 Oct
 			1:00	C-Eur	CE%sT	1918
 			1:00	Hungary	CE%sT	1941 Apr  6  2:00
-			1:00	C-Eur	CE%sT	1945 May  1 23:00
+			1:00	C-Eur	CE%sT	1945
 			1:00	Hungary	CE%sT	1980 Sep 28  2:00s
 			1:00	EU	CE%sT
 
@@ -2121,7 +2160,8 @@ Zone Asia/Anadyr	11:49:56 -	LMT	1924 May  2
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Europe/Belgrade	1:22:00	-	LMT	1884
 			1:00	-	CET	1941 Apr 18 23:00
-			1:00	C-Eur	CE%sT	1945 May  8  2:00s
+			1:00	C-Eur	CE%sT	1945
+			1:00	-	CET	1945 May 8 2:00s
 			1:00	1:00	CEST	1945 Sep 16  2:00s
 # Metod Kozelj reports that the legal date of
 # transition to EU rules was 1982-11-27, for all of Yugoslavia at the time.

From baac178e106398b24fd7bebeb2fbc1d5f9c87f00 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 12 Aug 2008 20:50:29 +0000
Subject: [PATCH 22/43] Add OSGi manifest information [1889787] adapted from
 Barend Garvelink

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1347 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/conf/MANIFEST.MF | 9 +++++++++
 1 file changed, 9 insertions(+)

diff --git a/JodaTime/src/conf/MANIFEST.MF b/JodaTime/src/conf/MANIFEST.MF
index 5dd4c7cc6..216078851 100644
--- a/JodaTime/src/conf/MANIFEST.MF
+++ b/JodaTime/src/conf/MANIFEST.MF
@@ -7,3 +7,12 @@ Implementation-Vendor: Joda.org
 Implementation-Title: org.joda.time
 Implementation-Version: 1.6
 Implementation-Vendor-Id: org.joda
+Bundle-ManifestVersion: 2
+Export-Package: org.joda.time;version=1.6,
+ org.joda.time.chrono;version=1.6,
+ org.joda.time.format;version=1.6
+Bundle-Symbolicname: joda-time
+Bundle-Name: Joda-Time
+Bundle-License: Apache 2.0
+Bundle-Version: 1.6
+Bundle-RequiredExecutionEnvironment: J2SE-1.3

From 2022a5729ddbd33a2d7d46a9fcbf43ad9391a444 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 12 Aug 2008 21:03:48 +0000
Subject: [PATCH 23/43] Add OSGi manifest information [1889787] adapted from
 Barend Garvelink

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1348 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 9f9c4ca68..b8899656f 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -25,6 +25,9 @@ Enhancements since 1.5
   standardMinutes() and standardSeconds(). These create durations of the
   length normally associated with a day/hour/minute/second
 
+- Added OSGi bundle information [1889787]
+  Joda-Time should be usable directly as an OSGi bundle
+
 
 Compatibility with 1.5
 ----------------------

From 07ab0b2f5063443319513c28293d4a52c1aaebfe Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 12 Aug 2008 21:08:53 +0000
Subject: [PATCH 24/43] Fix period formatting printZeroRarelyFirst() [2025928]
 from Sarah Brake

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1349 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  4 ++
 .../time/format/PeriodFormatterBuilder.java   |  2 +-
 .../format/TestPeriodFormatterBuilder.java    | 49 +++++++++++++++++++
 3 files changed, 54 insertions(+), 1 deletion(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index b8899656f..dbccab582 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -76,6 +76,10 @@ Bug fixes since 1.5
   Time zone formats were incorrectly documented as 'Z' instead of 'ZZ'
   Javadoc only change
 
+- Period formatting [2025928]
+  Formatting option printZeroRarelyFirst() did not work unless years
+  field was included.
+
 - DateTimeZone (regression from 1.4) [fix also available in v1.5.2]
   Fix getOffsetFromLocal DST gap adjustment
   Bug affected parsing of DST cutover in Autumn
diff --git a/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java b/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java
index c08625e80..c12a131e3 100644
--- a/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java
+++ b/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java
@@ -1443,7 +1443,7 @@ long getFieldValue(ReadablePeriod period) {
                     if (isZero(period) && iFieldFormatters[iFieldType] == this) {
                         int i = Math.min(iFieldType, 8);  // line split out for IBM JDK
                         i--;                              // see bug 1660490
-                        for (; i >= 0 && i <= MAX_FIELD; i++) {
+                        for (; i >= 0 && i <= MAX_FIELD; i--) {
                             if (isSupported(type, i) && iFieldFormatters[i] != null) {
                                 return Long.MAX_VALUE;
                             }
diff --git a/JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java b/JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java
index d94c910de..53d31b0f8 100644
--- a/JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java
+++ b/JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java
@@ -646,6 +646,55 @@ public void testFormatPrintZeroRarelyFirst() {
         assertEquals(1, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null));
     }
 
+    public void testFormatPrintZeroRarelyFirstYears() {
+        PeriodFormatter f = new PeriodFormatterBuilder()
+            .printZeroRarelyFirst()
+            .appendYears().toFormatter();
+        assertEquals("0", f.print(EMPTY_PERIOD));
+    }
+
+    public void testFormatPrintZeroRarelyFirstMonths() {
+        PeriodFormatter f = new PeriodFormatterBuilder()
+            .printZeroRarelyFirst()
+            .appendMonths().toFormatter();
+        assertEquals("0", f.print(EMPTY_PERIOD));
+    }
+
+    public void testFormatPrintZeroRarelyFirstWeeks() {
+        PeriodFormatter f = new PeriodFormatterBuilder()
+            .printZeroRarelyFirst()
+            .appendWeeks().toFormatter();
+        assertEquals("0", f.print(EMPTY_PERIOD));
+    }
+
+    public void testFormatPrintZeroRarelyFirstDays() {
+        PeriodFormatter f = new PeriodFormatterBuilder()
+            .printZeroRarelyFirst()
+            .appendDays().toFormatter();
+        assertEquals("0", f.print(EMPTY_PERIOD));
+    }
+
+    public void testFormatPrintZeroRarelyFirstHours() {
+        PeriodFormatter f = new PeriodFormatterBuilder()
+            .printZeroRarelyFirst()
+            .appendHours().toFormatter();
+        assertEquals("0", f.print(EMPTY_PERIOD));
+    }
+
+    public void testFormatPrintZeroRarelyFirstMinutes() {
+        PeriodFormatter f = new PeriodFormatterBuilder()
+            .printZeroRarelyFirst()
+            .appendMinutes().toFormatter();
+        assertEquals("0", f.print(EMPTY_PERIOD));
+    }
+
+    public void testFormatPrintZeroRarelyFirstSeconds() {
+        PeriodFormatter f = new PeriodFormatterBuilder()
+            .printZeroRarelyFirst()
+            .appendSeconds().toFormatter();
+        assertEquals("0", f.print(EMPTY_PERIOD));
+    }
+
     public void testFormatPrintZeroIfSupported() {
         PeriodFormatter f =
             new PeriodFormatterBuilder()

From 2490507fb702a44b888984ec0df4e067953b6af2 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 12 Aug 2008 21:41:11 +0000
Subject: [PATCH 25/43] Added stable Chronology hash code implementations
 [2018795]

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1350 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  4 ++++
 .../org/joda/time/chrono/BasicChronology.java | 23 ++++++++++++++++++-
 .../joda/time/chrono/BuddhistChronology.java  | 21 +++++++++++++++++
 .../org/joda/time/chrono/GJChronology.java    | 22 ++++++++++++++++++
 .../org/joda/time/chrono/ISOChronology.java   | 21 +++++++++++++++++
 .../joda/time/chrono/IslamicChronology.java   | 10 ++++++++
 6 files changed, 100 insertions(+), 1 deletion(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index dbccab582..efbfc890f 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -28,6 +28,10 @@ Enhancements since 1.5
 - Added OSGi bundle information [1889787]
   Joda-Time should be usable directly as an OSGi bundle
 
+- Added stable Chronology hash code implementations [2018795]
+  The hash codes of each Chronology implementation is now stable.
+  This should aid large scale caching/distribution tools.
+
 
 Compatibility with 1.5
 ----------------------
diff --git a/JodaTime/src/java/org/joda/time/chrono/BasicChronology.java b/JodaTime/src/java/org/joda/time/chrono/BasicChronology.java
index ee59be675..fe51678fe 100644
--- a/JodaTime/src/java/org/joda/time/chrono/BasicChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/BasicChronology.java
@@ -27,11 +27,11 @@
 import org.joda.time.field.DividedDateTimeField;
 import org.joda.time.field.FieldUtils;
 import org.joda.time.field.MillisDurationField;
-import org.joda.time.field.ZeroIsMaxDateTimeField;
 import org.joda.time.field.OffsetDateTimeField;
 import org.joda.time.field.PreciseDateTimeField;
 import org.joda.time.field.PreciseDurationField;
 import org.joda.time.field.RemainderDateTimeField;
+import org.joda.time.field.ZeroIsMaxDateTimeField;
 
 /**
  * Abstract implementation for calendar systems that use a typical
@@ -185,6 +185,27 @@ public int getMinimumDaysInFirstWeek() {
         return iMinDaysInFirstWeek;
     }
 
+    /**
+     * Checks if this chronology instance equals another.
+     * 
+     * @param obj  the object to compare to
+     * @return true if equal
+     * @since 1.6
+     */
+    public boolean equals(Object obj) {
+        return super.equals(obj);
+    }
+
+    /**
+     * A suitable hash code for the chronology.
+     * 
+     * @return the hash code
+     * @since 1.6
+     */
+    public int hashCode() {
+        return getClass().getName().hashCode() * 11 + getZone().hashCode() + getMinimumDaysInFirstWeek();
+    }
+
     // Output
     //-----------------------------------------------------------------------
     /**
diff --git a/JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java b/JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java
index 734a4031c..cac4f0a84 100644
--- a/JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java
@@ -163,6 +163,27 @@ public Chronology withZone(DateTimeZone zone) {
         return getInstance(zone);
     }
 
+    /**
+     * Checks if this chronology instance equals another.
+     * 
+     * @param obj  the object to compare to
+     * @return true if equal
+     * @since 1.6
+     */
+    public boolean equals(Object obj) {
+        return super.equals(obj);
+    }
+
+    /**
+     * A suitable hash code for the chronology.
+     * 
+     * @return the hash code
+     * @since 1.6
+     */
+    public int hashCode() {
+        return "Buddhist".hashCode() * 11 + getZone().hashCode();
+    }
+
     // Output
     //-----------------------------------------------------------------------
     /**
diff --git a/JodaTime/src/java/org/joda/time/chrono/GJChronology.java b/JodaTime/src/java/org/joda/time/chrono/GJChronology.java
index 031d785b3..46daa0c0c 100644
--- a/JodaTime/src/java/org/joda/time/chrono/GJChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/GJChronology.java
@@ -393,6 +393,28 @@ public int getMinimumDaysInFirstWeek() {
         return iGregorianChronology.getMinimumDaysInFirstWeek();
     }
 
+    /**
+     * Checks if this chronology instance equals another.
+     * 
+     * @param obj  the object to compare to
+     * @return true if equal
+     * @since 1.6
+     */
+    public boolean equals(Object obj) {
+        return super.equals(obj);
+    }
+
+    /**
+     * A suitable hash code for the chronology.
+     * 
+     * @return the hash code
+     * @since 1.6
+     */
+    public int hashCode() {
+        return "GJ".hashCode() * 11 + iJulianChronology.hashCode() +
+            iGregorianChronology.hashCode() + iCutoverInstant.hashCode();
+    }
+
     // Output
     //-----------------------------------------------------------------------
     /**
diff --git a/JodaTime/src/java/org/joda/time/chrono/ISOChronology.java b/JodaTime/src/java/org/joda/time/chrono/ISOChronology.java
index 34db26da4..29d38b57a 100644
--- a/JodaTime/src/java/org/joda/time/chrono/ISOChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/ISOChronology.java
@@ -179,6 +179,27 @@ protected void assemble(Fields fields) {
         }
     }
 
+    /**
+     * Checks if this chronology instance equals another.
+     * 
+     * @param obj  the object to compare to
+     * @return true if equal
+     * @since 1.6
+     */
+    public boolean equals(Object obj) {
+        return super.equals(obj);
+    }
+
+    /**
+     * A suitable hash code for the chronology.
+     * 
+     * @return the hash code
+     * @since 1.6
+     */
+    public int hashCode() {
+        return "ISO".hashCode() * 11 + getZone().hashCode();
+    }
+
     /**
      * Serialize ISOChronology instances using a small stub. This reduces the
      * serialized size, and deserialized instances come from the cache.
diff --git a/JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java b/JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java
index c94cd6d0b..a7332d74c 100644
--- a/JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java
+++ b/JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java
@@ -275,6 +275,16 @@ public Chronology withZone(DateTimeZone zone) {
         return getInstance(zone);
     }
 
+    /**
+     * A suitable hash code for the chronology.
+     * 
+     * @return the hash code
+     * @since 1.6
+     */
+    public int hashCode() {
+        return super.hashCode() * 13 + getLeapYearPatternType().hashCode();
+    }
+
     //-----------------------------------------------------------------------
     int getYear(long instant) {
         long millisIslamic = instant - MILLIS_YEAR_1;

From 1e601794892ee02ea10b64fcb1c97d390cf1b8a6 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Mon, 15 Sep 2008 15:32:48 +0000
Subject: [PATCH 26/43] DateTimeZone data updated to version 2008f.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1351 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  2 +-
 .../src/java/org/joda/time/tz/src/Readme.txt  |  2 +-
 JodaTime/src/java/org/joda/time/tz/src/africa | 40 +++++++++++++--
 JodaTime/src/java/org/joda/time/tz/src/asia   | 37 ++++++++++++--
 JodaTime/src/java/org/joda/time/tz/src/europe | 23 ++++++++-
 .../java/org/joda/time/tz/src/southamerica    | 50 +++++++++++++++++--
 6 files changed, 141 insertions(+), 13 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index efbfc890f..e2b3e7c66 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -42,7 +42,7 @@ Source compatible - Yes
 Serialization compatible - Yes
 
 Data compatible - Yes, except
-  - DateTimeZone data updated to version 2008e
+  - DateTimeZone data updated to version 2008f
 
 Semantic compatible - Yes
 
diff --git a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
index 5fa77589c..d0990b6a5 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
+++ b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
@@ -1,2 +1,2 @@
 The data files in this directory were obtained from the public tz database,
-http://www.twinsun.com/tz/tz-link.htm, version 2008e.
+http://www.twinsun.com/tz/tz-link.htm, version 2008f.
diff --git a/JodaTime/src/java/org/joda/time/tz/src/africa b/JodaTime/src/java/org/joda/time/tz/src/africa
index 97297d00e..a8c43714d 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/africa
+++ b/JodaTime/src/java/org/joda/time/tz/src/africa
@@ -1,4 +1,4 @@
-# @(#)africa	8.15
+# @(#)africa	8.16
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
@@ -436,11 +436,28 @@ Zone Africa/Nouakchott	-1:03:48 -	LMT	1912
 # http://www.worldtimezone.com/dst_news/dst_news_mauritius02.html
 # </a>
 
+# From Riad M. Hossen Ally (2008-08-03):
+# The Government of Mauritius weblink
+# <a href="http://www.gov.mu/portal/site/pmosite/menuitem.4ca0efdee47462e7440a600248a521ca/?content_id=3D4728ca68b2a5b110VgnVCM1000000a04a8c0RCRD">
+# http://www.gov.mu/portal/site/pmosite/menuitem.4ca0efdee47462e7440a600248a521ca/?content_id=3D4728ca68b2a5b110VgnVCM1000000a04a8c0RCRD
+# </a>
+# Cabinet Decision of July 18th, 2008 states as follows:
+#
+# 4. ...Cabinet has agreed to the introduction into the National Assembly
+# of the Time Bill which provides for the introduction of summer time in
+# Mauritius. The summer time period which will be of one hour ahead of
+# the standard time, will be aligned with that in Europe and the United
+# States of America. It will start at two o'clock in the morning on the
+# last Sunday of October and will end at two o'clock in the morning on
+# the last Sunday of March the following year. The summer time for the
+# year 2008 - 2009 will, therefore, be effective as from 26 October 2008
+# and end on 29 March 2009.
+
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule Mauritius	1982	only	-	Oct	10	0:00	1:00	S
 Rule Mauritius	1983	only	-	Mar	21	0:00	0	-
-Rule Mauritius	2008	only	-	Oct	26	2:00s	1:00	S
-Rule Mauritius	2009	only	-	Mar	27	2:00s	0	-
+Rule Mauritius	2008	max	-	Oct	lastSun	2:00	1:00	S
+Rule Mauritius	2009	max	-	Mar	lastSun	2:00	0	-
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone Indian/Mauritius	3:50:00 -	LMT	1907		# Port Louis
 			4:00 Mauritius	MU%sT	# Mauritius Time
@@ -525,7 +542,22 @@ Zone	Indian/Mayotte	3:00:56 -	LMT	1911 Jul	# Mamoutzou
 # From Arthur David Olson (2008-05-09):
 # XXX--guess that it is only Morocco for now; guess only 2008 for now.
 
+# From Steffen Thorsen (2008-08-27):
+# Morocco will change the clocks back on the midnight between August 31 
+# and September 1. They originally planned to observe DST to near the end 
+# of September:
+#
+# One article about it (in French):
+# <a href="http://www.menara.ma/fr/Actualites/Maroc/Societe/ci.retour_a_l_heure_gmt_a_partir_du_dimanche_31_aout_a_minuit_officiel_.default">
+# http://www.menara.ma/fr/Actualites/Maroc/Societe/ci.retour_a_l_heure_gmt_a_partir_du_dimanche_31_aout_a_minuit_officiel_.default
+# </a>
+#
+# We have some further details posted here:
+# <a href="http://www.timeanddate.com/news/time/morocco-ends-dst-early-2008.html">
+# http://www.timeanddate.com/news/time/morocco-ends-dst-early-2008.html
+# </a>
 # RULE	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
+
 Rule	Morocco	1939	only	-	Sep	12	 0:00	1:00	S
 Rule	Morocco	1939	only	-	Nov	19	 0:00	0	-
 Rule	Morocco	1940	only	-	Feb	25	 0:00	1:00	S
@@ -542,7 +574,7 @@ Rule	Morocco	1977	only	-	Sep	28	 0:00	0	-
 Rule	Morocco	1978	only	-	Jun	 1	 0:00	1:00	S
 Rule	Morocco	1978	only	-	Aug	 4	 0:00	0	-
 Rule	Morocco	2008	only	-	Jun	 1	 0:00	1:00	S
-Rule	Morocco	2008	only	-	Sep	28	 0:00	0	-
+Rule	Morocco	2008	only	-	Sep	 1	 0:00	0	-
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone Africa/Casablanca	-0:30:20 -	LMT	1913 Oct 26
 			 0:00	Morocco	WE%sT	1984 Mar 16
diff --git a/JodaTime/src/java/org/joda/time/tz/src/asia b/JodaTime/src/java/org/joda/time/tz/src/asia
index 55afaddbd..e993c87ff 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/asia
+++ b/JodaTime/src/java/org/joda/time/tz/src/asia
@@ -1,4 +1,4 @@
-# @(#)asia	8.22
+# @(#)asia	8.23
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
@@ -1541,11 +1541,24 @@ Zone	Asia/Muscat	3:54:20 -	LMT	1920
 # From Arthur David Olson (2008-05-19):
 # XXX--midnight transitions is a guess; 2008 only is a guess.
 
+# From Alexander Krivenyshev (2008-08-28):
+# Pakistan government has decided to keep the watches one-hour advanced
+# for another 2 months--plan to return to Standard Time on October 31
+# instead of August 31.
+#
+# <a href="http://www.worldtimezone.com/dst_news/dst_news_pakistan02.html">
+# http://www.worldtimezone.com/dst_news/dst_news_pakistan02.html
+# </a>
+# OR
+# <a href="http://dailymailnews.com/200808/28/news/dmbrn03.html">
+# http://dailymailnews.com/200808/28/news/dmbrn03.html
+# </a>
+
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule Pakistan	2002	only	-	Apr	Sun>=2	0:01	1:00	S
 Rule Pakistan	2002	only	-	Oct	Sun>=2	0:01	0	-
 Rule Pakistan	2008	only	-	Jun	1	0:00	1:00	S
-Rule Pakistan	2008	only	-	Sep	1	0:00	0	-
+Rule Pakistan	2008	only	-	Nov	1	0:00	0	-
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Asia/Karachi	4:28:12 -	LMT	1907
 			5:30	-	IST	1942 Sep
@@ -1665,6 +1678,23 @@ Zone	Asia/Karachi	4:28:12 -	LMT	1907
 # For lack of better information, predict that future changes will be
 # the 2nd Thursday of September at 02:00.
 
+# From Alexander Krivenyshev (2008-08-28):
+# Here is an article, that Mideast running on different clocks at Ramadan.
+#
+# Gaza Strip (as Egypt) ended DST at midnight Thursday (Aug 28, 2008), while
+# the West Bank will end Daylight Saving Time at midnight Sunday (Aug 31, 2008).
+#
+# <a href="http://www.guardian.co.uk/world/feedarticle/7759001">
+# http://www.guardian.co.uk/world/feedarticle/7759001
+# </a>
+# <a href="http://www.abcnews.go.com/International/wireStory?id=5676087">
+# http://www.abcnews.go.com/International/wireStory?id=5676087
+# </a>
+# or
+# <a href="http://www.worldtimezone.com/dst_news/dst_news_gazastrip01.html">
+# http://www.worldtimezone.com/dst_news/dst_news_gazastrip01.html
+# </a>
+
 # The rules for Egypt are stolen from the `africa' file.
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule EgyptAsia	1957	only	-	May	10	0:00	1:00	S
@@ -1680,7 +1710,8 @@ Rule Palestine	2004	only	-	Oct	 1	1:00	0	-
 Rule Palestine	2005	only	-	Oct	 4	2:00	0	-
 Rule Palestine	2006	max	-	Apr	 1	0:00	1:00	S
 Rule Palestine	2006	only	-	Sep	22	0:00	0	-
-Rule Palestine	2007	max	-	Sep	Thu>=8	2:00	0	-
+Rule Palestine	2007	only	-	Sep	Thu>=8	2:00	0	-
+Rule Palestine	2008	max	-	Aug	lastThu	2:00	0	-
 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Asia/Gaza	2:17:52	-	LMT	1900 Oct
diff --git a/JodaTime/src/java/org/joda/time/tz/src/europe b/JodaTime/src/java/org/joda/time/tz/src/europe
index f6974ed3e..0ad51270b 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/europe
+++ b/JodaTime/src/java/org/joda/time/tz/src/europe
@@ -1,4 +1,4 @@
-# @(#)europe	8.17
+# @(#)europe	8.18
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
@@ -2353,6 +2353,27 @@ Zone	Europe/Zurich	0:34:08 -	LMT	1848 Sep 12
 # (on a non-government server though) describing dates between 2002 and 2006:
 # http://www.alomaliye.com/bkk_2002_3769.htm
 
+# From Sue Williams (2008-08-11):
+# I spotted this news article about a potential change in Turkey.
+#
+# <a href="http://www.hurriyet.com.tr/english/domestic/9626174.asp?scr=1">
+# http://www.hurriyet.com.tr/english/domestic/9626174.asp?scr=1
+# </a>
+
+# From Sue Williams (2008-08-20):
+# This article says that around the end of March 2011, Turkey wants to
+# adjust the clocks forward by 1/2 hour and stay that way permanently.
+# The article indicates that this is a change in timezone offset in addition
+# to stopping observance of DST.
+# This proposal has not yet been approved.
+#
+# Read more here...
+#
+# Turkey to abandon daylight saving time in 2011
+# <a href="http://www.turkishdailynews.com.tr/article.php?enewsid=112989">
+# http://www.turkishdailynews.com.tr/article.php?enewsid=112989
+# </a>
+
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Turkey	1916	only	-	May	 1	0:00	1:00	S
 Rule	Turkey	1916	only	-	Oct	 1	0:00	0	-
diff --git a/JodaTime/src/java/org/joda/time/tz/src/southamerica b/JodaTime/src/java/org/joda/time/tz/src/southamerica
index d6ed2b66f..137a6d8f5 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/southamerica
+++ b/JodaTime/src/java/org/joda/time/tz/src/southamerica
@@ -1,4 +1,4 @@
-# @(#)southamerica	8.26
+# @(#)southamerica	8.27
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
@@ -164,9 +164,22 @@ Rule	Arg	2000	only	-	Mar	3	0:00	0	-
 # From Paul Eggert (2007-12-22):
 # For dates after mid-2008, the following rules are my guesses and
 # are quite possibly wrong, but are more likely than no DST at all.
+
+# From Alexander Krivenyshev (2008-09-05):
+# As per message from Carlos Alberto Fonseca Arauz (Nicaragua),
+# Argentina will start DST on Sunday October 19, 2008.
+#
+# <a href="http://www.worldtimezone.com/dst_news/dst_news_argentina03.html">
+# http://www.worldtimezone.com/dst_news/dst_news_argentina03.html
+# </a>
+# OR
+# <a href="http://www.impulsobaires.com.ar/nota.php?id=57832 (in spanish)">
+# http://www.impulsobaires.com.ar/nota.php?id=57832 (in spanish)
+# </a>
+
 Rule	Arg	2007	only	-	Dec	30	0:00	1:00	S
 Rule	Arg	2008	max	-	Mar	Sun>=15	0:00	0	-
-Rule	Arg	2008	max	-	Oct	Sun>=1	0:00	1:00	S
+Rule	Arg	2008	max	-	Oct	Sun>=15	0:00	1:00	S
  
 # From Mariano Absatz (2004-05-21):
 # Today it was officially published that the Province of Mendoza is changing
@@ -591,6 +604,36 @@ Zone	America/La_Paz	-4:32:36 -	LMT	1890
 # Decretos sobre o Horario de Verao no Brasil
 # </a>.
 
+# From Steffen Thorsen (2008-08-29):
+# As announced by the government and many newspapers in Brazil late
+# yesterday, Brazil will start DST on 2008-10-19 (need to change rule) and
+# it will end on 2009-02-15 (current rule for Brazil is fine). Based on
+# past years experience with the elections, there was a good chance that
+# the start was postponed to November, but it did not happen this year.
+#
+# It has not yet been posted to http://pcdsh01.on.br/DecHV.html
+#
+# An official page about it:
+# <a href="http://www.mme.gov.br/site/news/detail.do?newsId=16722">
+# http://www.mme.gov.br/site/news/detail.do?newsId=16722
+# </a>
+# Note that this link does not always work directly, but must be accessed
+# by going to
+# <a href="http://www.mme.gov.br/first>"
+# http://www.mme.gov.br/first
+# </a>
+#
+# One example link that works directly:
+# <a href="http://jornale.com.br/index.php?option=com_content&task=view&id=13530&Itemid=54">
+# http://jornale.com.br/index.php?option=com_content&task=view&id=13530&Itemid=54
+# (Portuguese)
+# </a>
+#
+# We have a written a short article about it as well:
+# <a href="http://www.timeanddate.com/news/time/brazil-dst-2008-2009.html">
+# http://www.timeanddate.com/news/time/brazil-dst-2008-2009.html
+# </a>
+
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 # Decree <a href="http://pcdsh01.on.br/HV20466.htm">20,466</a> (1931-10-01)
 # Decree <a href="http://pcdsh01.on.br/HV21896.htm">21,896</a> (1932-01-10)
@@ -724,8 +767,9 @@ Rule	Brazil	2006	only	-	Nov	 5	 0:00	1:00	S
 Rule	Brazil	2007	only	-	Feb	25	 0:00	0	-
 # Decree <a href="http://pcdsh01.on.br/DecHV6212.gif">6,212</a> (2007-09-26),
 # adopted by the same states as before.
-Rule	Brazil	2007	max	-	Oct	Sun>=8	 0:00	1:00	S
+Rule	Brazil	2007	only	-	Oct	Sun>=8	 0:00	1:00	S
 Rule	Brazil	2008	max	-	Feb	Sun>=15	 0:00	0	-
+Rule	Brazil	2008	max	-	Oct	Sun>=15	 0:00	1:00	S
 # The latest ruleset listed above says that the following states observe DST:
 # DF, ES, GO, MG, MS, MT, PR, RJ, RS, SC, SP.
 # For dates after mid-2008, the above rules with TO="max" are guesses

From 64a991fcb7651919d85bc50456730c693c7e10e1 Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Mon, 6 Oct 2008 21:28:56 +0000
Subject: [PATCH 27/43] DateTimeZone data updated to version 2008g.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1352 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  2 +-
 .../src/java/org/joda/time/tz/src/Readme.txt  |  2 +-
 .../java/org/joda/time/tz/src/southamerica    | 33 +++++++++++++++----
 3 files changed, 29 insertions(+), 8 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index e2b3e7c66..19f532d87 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -42,7 +42,7 @@ Source compatible - Yes
 Serialization compatible - Yes
 
 Data compatible - Yes, except
-  - DateTimeZone data updated to version 2008f
+  - DateTimeZone data updated to version 2008g
 
 Semantic compatible - Yes
 
diff --git a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
index d0990b6a5..5047d8293 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
+++ b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
@@ -1,2 +1,2 @@
 The data files in this directory were obtained from the public tz database,
-http://www.twinsun.com/tz/tz-link.htm, version 2008f.
+http://www.twinsun.com/tz/tz-link.htm, version 2008g.
diff --git a/JodaTime/src/java/org/joda/time/tz/src/southamerica b/JodaTime/src/java/org/joda/time/tz/src/southamerica
index 137a6d8f5..943c5a442 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/southamerica
+++ b/JodaTime/src/java/org/joda/time/tz/src/southamerica
@@ -1,4 +1,4 @@
-# @(#)southamerica	8.27
+# @(#)southamerica	8.29
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
@@ -619,7 +619,7 @@ Zone	America/La_Paz	-4:32:36 -	LMT	1890
 # </a>
 # Note that this link does not always work directly, but must be accessed
 # by going to
-# <a href="http://www.mme.gov.br/first>"
+# <a href="http://www.mme.gov.br/first">
 # http://www.mme.gov.br/first
 # </a>
 #
@@ -768,12 +768,33 @@ Rule	Brazil	2007	only	-	Feb	25	 0:00	0	-
 # Decree <a href="http://pcdsh01.on.br/DecHV6212.gif">6,212</a> (2007-09-26),
 # adopted by the same states as before.
 Rule	Brazil	2007	only	-	Oct	Sun>=8	 0:00	1:00	S
-Rule	Brazil	2008	max	-	Feb	Sun>=15	 0:00	0	-
-Rule	Brazil	2008	max	-	Oct	Sun>=15	 0:00	1:00	S
+# From Frederico A. C. Neves (2008-09-10):
+# Acording to this decree
+# <a href="http://www.planalto.gov.br/ccivil_03/_Ato2007-2010/2008/Decreto/D6558.htm">
+# http://www.planalto.gov.br/ccivil_03/_Ato2007-2010/2008/Decreto/D6558.htm
+# </a>
+# [t]he DST period in Brazil now on will be from the 3rd Oct Sunday to the
+# 3rd Feb Sunday. There is an exception on the return date when this is
+# the Carnival Sunday then the return date will be the next Sunday...
+Rule	Brazil	2008	max	-	Oct	Sun>=15	0:00	1:00	S
+Rule	Brazil	2008	2011	-	Feb	Sun>=15	0:00	0	-
+Rule	Brazil	2012	only	-	Feb	Sun>=22	0:00	0	-
+Rule	Brazil	2013	2014	-	Feb	Sun>=15	0:00	0	-
+Rule	Brazil	2015	only	-	Feb	Sun>=22	0:00	0	-
+Rule	Brazil	2016	2022	-	Feb	Sun>=15	0:00	0	-
+Rule	Brazil	2023	only	-	Feb	Sun>=22	0:00	0	-
+Rule	Brazil	2024	2025	-	Feb	Sun>=15	0:00	0	-
+Rule	Brazil	2026	only	-	Feb	Sun>=22	0:00	0	-
+Rule	Brazil	2027	2033	-	Feb	Sun>=15	0:00	0	-
+Rule	Brazil	2034	only	-	Feb	Sun>=22	0:00	0	-
+Rule	Brazil	2035	2036	-	Feb	Sun>=15	0:00	0	-
+Rule	Brazil	2037	only	-	Feb	Sun>=22	0:00	0	-
+# From Arthur David Olson (2008-09-29):
+# The next is wrong in some years but is better than nothing.
+Rule	Brazil	2038	max	-	Feb	Sun>=15	0:00	0	-
+
 # The latest ruleset listed above says that the following states observe DST:
 # DF, ES, GO, MG, MS, MT, PR, RJ, RS, SC, SP.
-# For dates after mid-2008, the above rules with TO="max" are guesses
-# and are quite possibly wrong, but are more likely than no DST at all.
 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 #

From 4f0fa2ece24061b8e47e793ada1cb1b6804df334 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sat, 11 Oct 2008 11:40:32 +0000
Subject: [PATCH 28/43] Handle null intervals stored in database [2111763]

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1353 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../contrib/hibernate/PersistentInterval.java |  3 +
 .../hibernate/TestPersistentIntervalNull.java | 99 +++++++++++++++++++
 JodaTimeContrib/hibernate/xdocs/changes.xml   |  9 +-
 3 files changed, 109 insertions(+), 2 deletions(-)
 create mode 100644 JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentIntervalNull.java

diff --git a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInterval.java b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInterval.java
index b6222a8b1..60f229874 100644
--- a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInterval.java
+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInterval.java
@@ -120,6 +120,9 @@ public Object nullSafeGet(ResultSet resultSet, String[] names,
         PersistentDateTime pst = new PersistentDateTime();
         DateTime start = (DateTime) pst.nullSafeGet(resultSet, names[0]);
         DateTime end = (DateTime) pst.nullSafeGet(resultSet, names[1]);
+        if (start == null || end == null) {
+            return null;
+        }
         return new Interval(start, end);
     }
 
diff --git a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentIntervalNull.java b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentIntervalNull.java
new file mode 100644
index 000000000..96cafdf4a
--- /dev/null
+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentIntervalNull.java
@@ -0,0 +1,99 @@
+/*
+ *  Copyright 2001-2008 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.contrib.hibernate;
+
+import java.io.File;
+import java.sql.SQLException;
+
+import org.hibernate.Session;
+import org.hibernate.SessionFactory;
+import org.hibernate.Transaction;
+import org.hibernate.cfg.Configuration;
+import org.joda.time.Interval;
+
+public class TestPersistentIntervalNull extends HibernateTestCase
+{
+    private SessionFactory factory;
+    private Session session;
+    private Transaction transaction;
+    
+    protected void setUp() throws SQLException
+    {
+        factory = getSessionFactory();
+        store();
+    }
+    
+    private void store() throws SQLException
+    {
+        openAndBegin();
+        
+        Plan plan = new Plan(1);
+        plan.setPeriod(null);
+        
+        session.save(plan);
+        session.flush();
+        
+        commitAndClose();
+    }
+
+    private void openAndBegin()
+    {
+        session = factory.openSession();
+        transaction = session.beginTransaction();
+    }
+    
+    private void commitAndClose()
+    {
+        transaction.commit();
+        session.close();
+    }
+    
+    public void testQueryById() throws SQLException
+    {
+        openAndBegin();
+        Interval persistedPeriod = queryPlan().getPeriod();
+        commitAndClose();
+        assertPlanPeriod(persistedPeriod);
+    }
+
+    private void assertPlanPeriod(Interval period)
+    {
+        assertNull(period);
+    }
+
+    private Plan queryPlan()
+    {
+        return (Plan) session.get(Plan.class, new Integer(1));
+    }
+    
+    protected void setupConfiguration(Configuration cfg)
+    {
+        cfg.addFile(new File("src/test/org/joda/time/contrib/hibernate/plan.hbm.xml"));
+    }
+    
+    protected void tearDown() throws Exception
+    {
+        remove();
+        super.tearDown();
+    }
+
+    private void remove()
+    {
+        openAndBegin();
+        session.delete(queryPlan());
+        commitAndClose();
+    }
+}
diff --git a/JodaTimeContrib/hibernate/xdocs/changes.xml b/JodaTimeContrib/hibernate/xdocs/changes.xml
index e481504ac..a6a18fbf9 100644
--- a/JodaTimeContrib/hibernate/xdocs/changes.xml
+++ b/JodaTimeContrib/hibernate/xdocs/changes.xml
@@ -8,16 +8,21 @@
   <body>
 
     <!-- types are add, fix, remove, update -->
+    <release version="1.1" date="2008-10-11" description="Bug fix version">
+      <action dev="scolebourne" type="fix">
+        Handle null intervals stored in database [2111763].
+      </action>              
+    </release>
+
     <release version="1.0" date="2007-09-27" description="Version for Joda-Time 1.3+">
       <action dev="gjospeh" type="add">
         Add persistence for Period and Duration.
       </action>              
       <action dev="imario" type="add">
-        Add persistence for LocalDate, LocalTime and LocalDateTime.
+        Add persistence for LocalDate and LocalTime.
       </action>              
     </release>
 
-    <!-- types are add, fix, remove, update -->
     <release version="0.8" date="2005-12-29" description="Initial version">
       <action dev="imario" type="add">
         Initial version.

From 312ed1d80b9ffa65d21d5634502933ce721edbbd Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 12 Oct 2008 13:03:20 +0000
Subject: [PATCH 29/43] Update the list of tasks

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1354 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/hibernate/xdocs/tasks.xml | 1 -
 1 file changed, 1 deletion(-)

diff --git a/JodaTimeContrib/hibernate/xdocs/tasks.xml b/JodaTimeContrib/hibernate/xdocs/tasks.xml
index c33821dde..a746bc75f 100644
--- a/JodaTimeContrib/hibernate/xdocs/tasks.xml
+++ b/JodaTimeContrib/hibernate/xdocs/tasks.xml
@@ -10,7 +10,6 @@
 
 <section name="Tasks outstanding">
 <p>
-The project needs a release!
 Contact the mailing lists for more details or to help.
 </p>
 </section>

From 3ba02f6c0ec4e19c3d32e562ae251de07e74ac4b Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 12 Oct 2008 13:07:52 +0000
Subject: [PATCH 30/43] Add PersistentLocalDateTime

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1355 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../hibernate/PersistentLocalDateTime.java    | 147 ++++++++++++++++++
 .../joda/time/contrib/hibernate/Event.java    |  14 +-
 .../TestPersistentLocalDateTime.java          |  79 ++++++++++
 .../joda/time/contrib/hibernate/event.hbm.xml |   2 +
 JodaTimeContrib/hibernate/xdocs/changes.xml   |   3 +
 JodaTimeContrib/hibernate/xdocs/userguide.xml |   5 +
 6 files changed, 249 insertions(+), 1 deletion(-)
 create mode 100644 JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalDateTime.java
 create mode 100644 JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentLocalDateTime.java

diff --git a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalDateTime.java b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalDateTime.java
new file mode 100644
index 000000000..0e13d1932
--- /dev/null
+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalDateTime.java
@@ -0,0 +1,147 @@
+/*
+ *  Copyright 2001-2008 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.contrib.hibernate;
+
+import java.io.Serializable;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Types;
+
+import org.hibernate.Hibernate;
+import org.hibernate.HibernateException;
+import org.hibernate.usertype.EnhancedUserType;
+import org.joda.time.LocalDateTime;
+
+/**
+ * Persist {@link org.joda.time.LocalDateTime} via hibernate
+ *
+ * @author Mario Ivankovits (mario@ops.co.at)
+ */
+public class PersistentLocalDateTime implements EnhancedUserType
+{
+	public final static PersistentLocalDateTime INSTANCE = new PersistentLocalDateTime();
+
+	private static final int[] SQL_TYPES = new int[]
+    {
+        Types.TIMESTAMP,
+    };
+
+    public int[] sqlTypes()
+    {
+        return SQL_TYPES;
+    }
+
+    public Class returnedClass()
+    {
+        return LocalDateTime.class;
+    }
+
+    public boolean equals(Object x, Object y) throws HibernateException
+	{
+        if (x == y)
+        {
+            return true;
+        }
+        if (x == null || y == null)
+        {
+            return false;
+        }
+        LocalDateTime dtx = (LocalDateTime) x;
+        LocalDateTime dty = (LocalDateTime) y;
+
+        return dtx.equals(dty);
+    }
+
+    public int hashCode(Object object) throws HibernateException
+    {
+        return object.hashCode();
+    }
+
+    public Object nullSafeGet(ResultSet resultSet, String[] strings, Object object) throws HibernateException, SQLException
+	{
+		return nullSafeGet(resultSet, strings[0]);
+
+	}
+
+	public Object nullSafeGet(ResultSet resultSet, String string) throws SQLException
+	{
+		Object timestamp = Hibernate.TIMESTAMP.nullSafeGet(resultSet, string);
+		if (timestamp == null)
+		{
+			return null;
+		}
+
+		return new LocalDateTime(timestamp);
+	}
+
+	public void nullSafeSet(PreparedStatement preparedStatement, Object value, int index) throws HibernateException, SQLException
+	{
+		if (value == null)
+		{
+			Hibernate.TIMESTAMP.nullSafeSet(preparedStatement, null, index);
+		}
+		else
+		{
+			Hibernate.TIMESTAMP.nullSafeSet(preparedStatement, ((LocalDateTime) value).toDateTime().toDate(), index);
+		}
+	}
+
+    public Object deepCopy(Object value) throws HibernateException
+    {
+        if (value == null)
+        {
+            return null;
+        }
+
+        return new LocalDateTime(value);
+    }
+
+    public boolean isMutable()
+    {
+        return false;
+    }
+
+    public Serializable disassemble(Object value) throws HibernateException
+    {
+        return (Serializable) value;
+    }
+
+    public Object assemble(Serializable cached, Object value) throws HibernateException
+    {
+        return cached;
+    }
+
+    public Object replace(Object original, Object target, Object owner) throws HibernateException
+    {
+        return original;
+    }
+
+	public String objectToSQLString(Object object)
+	{
+		throw new UnsupportedOperationException();
+	}
+
+	public String toXMLString(Object object)
+	{
+		return object.toString();
+	}
+
+	public Object fromXMLString(String string)
+	{
+		return new LocalDateTime(string);
+	}
+}
diff --git a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/Event.java b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/Event.java
index 7b6751b88..9e952d5bc 100644
--- a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/Event.java
+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/Event.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2007 Stephen Colebourne
+ *  Copyright 2001-2008 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -19,6 +19,7 @@
 
 import org.joda.time.DateTime;
 import org.joda.time.LocalDate;
+import org.joda.time.LocalDateTime;
 import org.joda.time.LocalTime;
 
 /**
@@ -32,6 +33,7 @@
 	private LocalTime localTime;
 	private LocalTime localTime2;
 	private LocalTime localTime3;
+	private LocalDateTime localDateTime;
 
 	public Event()
     {
@@ -96,4 +98,14 @@ public void setLocalTime3(LocalTime localTime3)
 	{
 		this.localTime3 = localTime3;
 	}
+
+    public LocalDateTime getLocalDateTime()
+    {
+        return localDateTime;
+    }
+
+    public void setLocalDateTime(LocalDateTime localDateTime)
+    {
+        this.localDateTime = localDateTime;
+    }
 }
diff --git a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentLocalDateTime.java b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentLocalDateTime.java
new file mode 100644
index 000000000..96992b069
--- /dev/null
+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/TestPersistentLocalDateTime.java
@@ -0,0 +1,79 @@
+/*
+ *  Copyright 2001-2008 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.contrib.hibernate;
+
+import java.io.File;
+import java.sql.SQLException;
+
+import org.hibernate.Session;
+import org.hibernate.SessionFactory;
+import org.hibernate.cfg.Configuration;
+import org.joda.time.LocalDateTime;
+
+public class TestPersistentLocalDateTime extends HibernateTestCase
+{
+    private LocalDateTime[] writeReadTimes = new LocalDateTime[]
+    {
+        new LocalDateTime(2004, 2, 25, 12, 11, 10),
+        new LocalDateTime(1980, 3, 11, 13, 12, 11)
+    };
+
+    public void testSimpleStore() throws SQLException
+	{
+        SessionFactory factory = getSessionFactory();
+
+        Session session = factory.openSession();
+
+        for (int i = 0; i<writeReadTimes.length; i++)
+        {
+            LocalDateTime writeReadTime = writeReadTimes[i];
+
+            Event event = new Event();
+            event.setId(i);
+            event.setLocalDateTime(writeReadTime);
+
+            session.save(event);
+        }
+
+        session.flush();
+        session.connection().commit();
+        session.close();
+
+        for (int i = 0; i<writeReadTimes.length; i++)
+        {
+            LocalDateTime writeReadTime = writeReadTimes[i];
+
+            session = factory.openSession();
+            Event eventReread = (Event) session.get(Event.class, new Integer(i));
+
+            assertNotNull("get failed - event#'" + i + "'not found", eventReread);
+            assertNotNull("get failed - returned null", eventReread.getLocalDateTime());
+
+            // we loose the timezone, so we have to normalize both to offset=0
+            assertEquals("get failed - returned different time",
+                writeReadTime,
+                eventReread.getLocalDateTime());
+
+            session.close();
+        }
+    }
+
+	protected void setupConfiguration(Configuration cfg)
+	{
+		cfg.addFile(new File("src/test/org/joda/time/contrib/hibernate/event.hbm.xml"));
+		cfg.addFile(new File("src/test/org/joda/time/contrib/hibernate/eventTZ.hbm.xml"));
+	}
+}
diff --git a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/event.hbm.xml b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/event.hbm.xml
index e038327ba..0ed10a2b0 100644
--- a/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/event.hbm.xml
+++ b/JodaTimeContrib/hibernate/src/test/org/joda/time/contrib/hibernate/event.hbm.xml
@@ -18,6 +18,8 @@
 				<property type="org.joda.time.contrib.hibernate.PersistentLocalTimeExact" name="localTime2"/>
 
 				<property type="org.joda.time.contrib.hibernate.PersistentLocalTimeAsString" name="localTime3"/>
+
+				<property type="org.joda.time.contrib.hibernate.PersistentLocalDateTime" name="localDateTime"/>
         </class>
 
 </hibernate-mapping>
diff --git a/JodaTimeContrib/hibernate/xdocs/changes.xml b/JodaTimeContrib/hibernate/xdocs/changes.xml
index a6a18fbf9..8b54aeeee 100644
--- a/JodaTimeContrib/hibernate/xdocs/changes.xml
+++ b/JodaTimeContrib/hibernate/xdocs/changes.xml
@@ -12,6 +12,9 @@
       <action dev="scolebourne" type="fix">
         Handle null intervals stored in database [2111763].
       </action>              
+      <action dev="scolebourne" type="add">
+        Add persistence for LocalDateTime.
+      </action>              
     </release>
 
     <release version="1.0" date="2007-09-27" description="Version for Joda-Time 1.3+">
diff --git a/JodaTimeContrib/hibernate/xdocs/userguide.xml b/JodaTimeContrib/hibernate/xdocs/userguide.xml
index a8a7ce9f6..fde9e9d52 100644
--- a/JodaTimeContrib/hibernate/xdocs/userguide.xml
+++ b/JodaTimeContrib/hibernate/xdocs/userguide.xml
@@ -87,6 +87,11 @@ private DateTime fromDate;
 				<td>VARCHAR</td>
 				<td>Same as above, just uses a human readable representation. ISO8601 format - HH:mm:ss.SSSZ</td>
 			</tr>
+			<tr>
+				<td>org.joda.time.contrib.hibernate.PersistentLocalDateTime</td>
+				<td>TIMESTAMP</td>
+				<td></td>
+			</tr>
 			<tr>
 				<td>org.joda.time.contrib.hibernate.PersistentDuration</td>
 				<td>VARCHAR</td>

From c111e996fa50f0147a1c4d72c4cfd30c91e0099b Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 12 Oct 2008 13:17:13 +0000
Subject: [PATCH 31/43] Prepare for v1.1

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1356 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/hibernate/build.xml                       | 8 ++++----
 JodaTimeContrib/hibernate/project.xml                     | 2 +-
 JodaTimeContrib/hibernate/src/conf/MANIFEST.MF            | 2 +-
 JodaTimeContrib/hibernate/src/conf/manifest-additions.txt | 2 +-
 JodaTimeContrib/hibernate/xdocs/index.xml                 | 4 ++--
 5 files changed, 9 insertions(+), 9 deletions(-)

diff --git a/JodaTimeContrib/hibernate/build.xml b/JodaTimeContrib/hibernate/build.xml
index ceb44e734..94eaf6651 100644
--- a/JodaTimeContrib/hibernate/build.xml
+++ b/JodaTimeContrib/hibernate/build.xml
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 
-<!--build.xml generated by maven from project.xml version 1.0
-  on date September 27 2007, time 2021-->
+<!--build.xml generated by maven from project.xml version 1.1
+  on date October 12 2008, time 1415-->
 
 <project default="jar" name="joda-time-hibernate" basedir=".">
   <property name="defaulttargetdir" value="target">
@@ -20,7 +20,7 @@
   </property>
   <property name="javadocdir" value="dist/docs/api">
   </property>
-  <property name="final.name" value="joda-time-hibernate-1.0">
+  <property name="final.name" value="joda-time-hibernate-1.1">
   </property>
   <path id="build.classpath">
     <fileset dir="${libdir}">
@@ -140,7 +140,7 @@
     </tstamp>
     <property name="copyright" value="Copyright &amp;copy;  Joda.org. All Rights Reserved.">
     </property>
-    <property name="title" value="Joda time Hibernate support 1.0 API">
+    <property name="title" value="Joda time Hibernate support 1.1 API">
     </property>
     <javadoc use="true" private="true" destdir="${javadocdir}" author="true" version="true" sourcepath="src/java" packagenames="org.joda.time.contrib.hibernate.*">
       <classpath>
diff --git a/JodaTimeContrib/hibernate/project.xml b/JodaTimeContrib/hibernate/project.xml
index baac6322f..028574d73 100644
--- a/JodaTimeContrib/hibernate/project.xml
+++ b/JodaTimeContrib/hibernate/project.xml
@@ -4,7 +4,7 @@
   <groupId>joda-time</groupId>
   <artifactId>joda-time-hibernate</artifactId>
   <name>Joda time Hibernate support</name>
-  <currentVersion>1.0</currentVersion>
+  <currentVersion>1.1</currentVersion>
   <shortDescription>Joda time Hibernate support</shortDescription>
   <description>
     Contribution to Joda-Time that adds Hibernate support
diff --git a/JodaTimeContrib/hibernate/src/conf/MANIFEST.MF b/JodaTimeContrib/hibernate/src/conf/MANIFEST.MF
index f0fac7324..373063570 100644
--- a/JodaTimeContrib/hibernate/src/conf/MANIFEST.MF
+++ b/JodaTimeContrib/hibernate/src/conf/MANIFEST.MF
@@ -1,7 +1,7 @@
 Extension-Name: @name@
 Specification-Title: Joda Time Hibernate support
 Specification-Vendor: Joda.org
-Specification-Version: 1.0
+Specification-Version: 1.1
 Implementation-Vendor: Joda.org
 Implementation-Title: org.joda.time.contrib.hibernate
 Implementation-Version: @version@
diff --git a/JodaTimeContrib/hibernate/src/conf/manifest-additions.txt b/JodaTimeContrib/hibernate/src/conf/manifest-additions.txt
index 43ee15558..aefc9f035 100644
--- a/JodaTimeContrib/hibernate/src/conf/manifest-additions.txt
+++ b/JodaTimeContrib/hibernate/src/conf/manifest-additions.txt
@@ -1,2 +1,2 @@
-Specification-Version: 1.0
+Specification-Version: 1.1
 Implementation-Vendor-Id: org.joda
\ No newline at end of file
diff --git a/JodaTimeContrib/hibernate/xdocs/index.xml b/JodaTimeContrib/hibernate/xdocs/index.xml
index 2a5197e9a..981185d00 100644
--- a/JodaTimeContrib/hibernate/xdocs/index.xml
+++ b/JodaTimeContrib/hibernate/xdocs/index.xml
@@ -27,7 +27,7 @@ It aims to provide the classes necessary to persist Joda-Time objects.
   &lt;% pageContext.setAttribute("now", new org.joda.time.DateTime()); %&gt;
   <b>&lt;joda:format value="${now}" style="SM" /&gt;</b>
 </source>-->
-Version 1.0 was released on 2007-09-27 -
+Version 1.1 was released on 2008-10-12 -
 <a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=174357">Download now</a>
 </p>
 </section>
@@ -49,7 +49,7 @@ Various documentation is available:
 
 <section name="Releases">
 <p>
-<a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=174357">Release 1.0</a>
+<a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=174357">Release 1.1</a>
 is the current latest release.
 Please bear in mind that this project is separate from Joda-Time itself.
 </p>

From 1fdc1f4320797c2db4254ce4d3b38adc2a14deea Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Mon, 13 Oct 2008 14:40:11 +0000
Subject: [PATCH 32/43] DateTimeZone data updated to version 2008h.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1357 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                     |  2 +-
 .../src/java/org/joda/time/tz/src/Readme.txt   |  2 +-
 JodaTime/src/java/org/joda/time/tz/src/africa  | 14 +++++++++++---
 JodaTime/src/java/org/joda/time/tz/src/asia    | 16 ++++++++++++++--
 .../src/java/org/joda/time/tz/src/southamerica | 18 +++++++++++++++++-
 5 files changed, 44 insertions(+), 8 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 19f532d87..804666b72 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -42,7 +42,7 @@ Source compatible - Yes
 Serialization compatible - Yes
 
 Data compatible - Yes, except
-  - DateTimeZone data updated to version 2008g
+  - DateTimeZone data updated to version 2008h
 
 Semantic compatible - Yes
 
diff --git a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
index 5047d8293..7b8751cec 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
+++ b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
@@ -1,2 +1,2 @@
 The data files in this directory were obtained from the public tz database,
-http://www.twinsun.com/tz/tz-link.htm, version 2008g.
+http://www.twinsun.com/tz/tz-link.htm, version 2008h.
diff --git a/JodaTime/src/java/org/joda/time/tz/src/africa b/JodaTime/src/java/org/joda/time/tz/src/africa
index a8c43714d..39d02ad77 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/africa
+++ b/JodaTime/src/java/org/joda/time/tz/src/africa
@@ -1,4 +1,4 @@
-# @(#)africa	8.16
+# @(#)africa	8.17
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
@@ -453,11 +453,19 @@ Zone Africa/Nouakchott	-1:03:48 -	LMT	1912
 # year 2008 - 2009 will, therefore, be effective as from 26 October 2008
 # and end on 29 March 2009.
 
+# From Ed Maste (2008-10-07):
+# THE TIME BILL (No. XXVII of 2008) Explanatory Memorandum states the
+# beginning / ending of summer time is 2 o'clock standard time in the
+# morning of the last Sunday of October / last Sunday of March.
+# <a href="http://www.gov.mu/portal/goc/assemblysite/file/bill2708.pdf">
+# http://www.gov.mu/portal/goc/assemblysite/file/bill2708.pdf
+# </a>
+
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule Mauritius	1982	only	-	Oct	10	0:00	1:00	S
 Rule Mauritius	1983	only	-	Mar	21	0:00	0	-
-Rule Mauritius	2008	max	-	Oct	lastSun	2:00	1:00	S
-Rule Mauritius	2009	max	-	Mar	lastSun	2:00	0	-
+Rule Mauritius	2008	max	-	Oct	lastSun	2:00s	1:00	S
+Rule Mauritius	2009	max	-	Mar	lastSun	2:00s	0	-
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone Indian/Mauritius	3:50:00 -	LMT	1907		# Port Louis
 			4:00 Mauritius	MU%sT	# Mauritius Time
diff --git a/JodaTime/src/java/org/joda/time/tz/src/asia b/JodaTime/src/java/org/joda/time/tz/src/asia
index e993c87ff..660fd73da 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/asia
+++ b/JodaTime/src/java/org/joda/time/tz/src/asia
@@ -1,4 +1,4 @@
-# @(#)asia	8.23
+# @(#)asia	8.24
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
@@ -1957,8 +1957,20 @@ Rule	Syria	2007	only	-	Nov	 Fri>=1	0:00	0	-
 # compilers can't handle  or having multiple Rules (a la Israel).
 # For now, use "Apr Fri>=1", and go with IATA on a uniform Sep 30 end.
 
+# From Steffen Thorsen (2008-10-07):
+# Syria has now officially decided to end DST on 2008-11-01 this year,
+# according to the following article in the Syrian Arab News Agency (SANA).
+#
+# The article is in Arabic, and seems to tell that they will go back to
+# winter time on 2008-11-01 at 00:00 local daylight time (delaying/setting
+# clocks back 60 minutes).
+#
+# <a href="http://sana.sy/ara/2/2008/10/07/195459.htm">
+# http://sana.sy/ara/2/2008/10/07/195459.htm
+# </a>
+
 Rule	Syria	2008	max	-	Apr	Fri>=1	0:00	1:00	S
-Rule	Syria	2008	max	-	Oct	1	0:00	0	-
+Rule	Syria	2008	max	-	Nov	1	0:00	0	-
 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Asia/Damascus	2:25:12 -	LMT	1920	# Dimashq
diff --git a/JodaTime/src/java/org/joda/time/tz/src/southamerica b/JodaTime/src/java/org/joda/time/tz/src/southamerica
index 943c5a442..4ecc29ae4 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/southamerica
+++ b/JodaTime/src/java/org/joda/time/tz/src/southamerica
@@ -1,4 +1,4 @@
-# @(#)southamerica	8.29
+# @(#)southamerica	8.30
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
@@ -177,6 +177,22 @@ Rule	Arg	2000	only	-	Mar	3	0:00	0	-
 # http://www.impulsobaires.com.ar/nota.php?id=57832 (in spanish)
 # </a>
 
+# From Rodrigo Severo (2008-10-06):
+# Here is some info available at a Gentoo bug related to TZ on Argentina's DST:
+# ...
+# ------- Comment #1 from [jmdocile]  2008-10-06 16:28 0000 -------
+# Hi, there is a problem with timezone-data-2008e and maybe with
+# timezone-data-2008f
+# Argentinian law [Number] 25.155 is no longer valid.
+# <a href="http://www.infoleg.gov.ar/infolegInternet/anexos/60000-64999/60036/norma.htm">
+# http://www.infoleg.gov.ar/infolegInternet/anexos/60000-64999/60036/norma.htm
+# </a>
+# The new one is law [Number] 26.350
+# <a href="http://www.infoleg.gov.ar/infolegInternet/anexos/135000-139999/136191/norma.htm">
+# http://www.infoleg.gov.ar/infolegInternet/anexos/135000-139999/136191/norma.htm
+# </a>
+# So there is no summer time in Argentina for now.
+
 Rule	Arg	2007	only	-	Dec	30	0:00	1:00	S
 Rule	Arg	2008	max	-	Mar	Sun>=15	0:00	0	-
 Rule	Arg	2008	max	-	Oct	Sun>=15	0:00	1:00	S

From c51f52113ae1fc3d204683582ffa82d581ba673d Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 13 Oct 2008 21:57:41 +0000
Subject: [PATCH 33/43] Fix javadoc and licence

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1359 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../AbstractStringBasedJodaType.java          | 27 ++++++++++++++-----
 .../contrib/hibernate/PersistentDateTime.java |  4 +--
 .../hibernate/PersistentDateTimeTZ.java       |  6 ++---
 .../contrib/hibernate/PersistentDuration.java | 17 ++++++++++--
 .../contrib/hibernate/PersistentInterval.java |  2 +-
 .../hibernate/PersistentLocalDate.java        |  4 +--
 .../hibernate/PersistentLocalDateTime.java    |  2 +-
 .../PersistentLocalTimeAsString.java          |  4 +--
 .../hibernate/PersistentLocalTimeAsTime.java  |  6 ++---
 .../hibernate/PersistentLocalTimeExact.java   |  4 +--
 .../contrib/hibernate/PersistentPeriod.java   | 17 ++++++++++--
 .../hibernate/PersistentTimeOfDay.java        |  6 ++---
 .../hibernate/PersistentTimeOfDayExact.java   |  6 ++---
 .../hibernate/PersistentYearMonthDay.java     |  4 +--
 14 files changed, 74 insertions(+), 35 deletions(-)

diff --git a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/AbstractStringBasedJodaType.java b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/AbstractStringBasedJodaType.java
index 3bc498b44..d55531b6c 100644
--- a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/AbstractStringBasedJodaType.java
+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/AbstractStringBasedJodaType.java
@@ -1,20 +1,33 @@
+/*
+ *  Copyright 2001-2008 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
 package org.joda.time.contrib.hibernate;
 
-import org.hibernate.Hibernate;
-import org.hibernate.HibernateException;
-import org.hibernate.usertype.UserType;
-import org.joda.time.Period;
-
 import java.io.Serializable;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.sql.Types;
 
+import org.hibernate.Hibernate;
+import org.hibernate.HibernateException;
+import org.hibernate.usertype.UserType;
+import org.joda.time.Period;
+
 /**
  * @author gjoseph
- * @author $Author: $ (last edit)
- * @version $Revision: $
  */
 public abstract class AbstractStringBasedJodaType implements UserType {
     private static final int[] SQL_TYPES = new int[]{Types.VARCHAR};
diff --git a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentDateTime.java b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentDateTime.java
index e49a275b3..f4c5b4dce 100644
--- a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentDateTime.java
+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentDateTime.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2007 Stephen Colebourne
+ *  Copyright 2001-2008 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -27,7 +27,7 @@
 import org.joda.time.DateTime;
 
 /**
- * Persist {@link org.joda.time.DateTime} via hibernate
+ * Persist {@link org.joda.time.DateTime} via hibernate.
  *
  * @author Mario Ivankovits (mario@ops.co.at)
  */
diff --git a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentDateTimeTZ.java b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentDateTimeTZ.java
index d6ff77936..243494d9e 100644
--- a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentDateTimeTZ.java
+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentDateTimeTZ.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2007 Stephen Colebourne
+ *  Copyright 2001-2008 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -28,8 +28,8 @@
 import org.joda.time.DateTimeZone;
 
 /**
- * Persist {@link org.joda.time.DateTime} via hibernate.<br />
- * The timezone will be stored in an extra column
+ * Persist {@link org.joda.time.DateTime} via hibernate.
+ * The timezone will be stored in an extra column.
  *
  * @author Mario Ivankovits (mario@ops.co.at)
  */
diff --git a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentDuration.java b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentDuration.java
index 7b6aea740..5abc49b83 100644
--- a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentDuration.java
+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentDuration.java
@@ -1,3 +1,18 @@
+/*
+ *  Copyright 2001-2008 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
 package org.joda.time.contrib.hibernate;
 
 import org.joda.time.Duration;
@@ -7,8 +22,6 @@
  * It simply stores the value as a varchar using Duration.toString.
  *
  * @author gjoseph
- * @author $Author: $ (last edit)
- * @version $Revision: $
  */
 public class PersistentDuration extends AbstractStringBasedJodaType {
 
diff --git a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInterval.java b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInterval.java
index 60f229874..5c76c73fa 100644
--- a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInterval.java
+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentInterval.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2007 Stephen Colebourne
+ *  Copyright 2001-2008 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
diff --git a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalDate.java b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalDate.java
index aba66b603..21ec244ad 100644
--- a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalDate.java
+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalDate.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2007 Stephen Colebourne
+ *  Copyright 2001-2008 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -27,7 +27,7 @@
 import org.joda.time.LocalDate;
 
 /**
- * Persist {@link org.joda.time.LocalDate} via hibernate
+ * Persist {@link org.joda.time.LocalDate} via hibernate.
  *
  * @author Mario Ivankovits (mario@ops.co.at)
  */
diff --git a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalDateTime.java b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalDateTime.java
index 0e13d1932..0cfd5374b 100644
--- a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalDateTime.java
+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalDateTime.java
@@ -27,7 +27,7 @@
 import org.joda.time.LocalDateTime;
 
 /**
- * Persist {@link org.joda.time.LocalDateTime} via hibernate
+ * Persist {@link org.joda.time.LocalDateTime} via hibernate.
  *
  * @author Mario Ivankovits (mario@ops.co.at)
  */
diff --git a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalTimeAsString.java b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalTimeAsString.java
index 42120d426..770445386 100644
--- a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalTimeAsString.java
+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalTimeAsString.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2007 Stephen Colebourne
+ *  Copyright 2001-2008 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -27,7 +27,7 @@
 import org.joda.time.LocalTime;
 
 /**
- * Persist {@link org.joda.time.LocalDate} via hibernate
+ * Persist {@link org.joda.time.LocalDate} via hibernate.
  *
  * @author Mario Ivankovits (mario@ops.co.at)
  */
diff --git a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalTimeAsTime.java b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalTimeAsTime.java
index 6c11befc7..95559aa1f 100644
--- a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalTimeAsTime.java
+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalTimeAsTime.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2007 Stephen Colebourne
+ *  Copyright 2001-2008 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -29,8 +29,8 @@
 import org.joda.time.LocalTime;
 
 /**
- * Persist {@link org.joda.time.LocalDate} via hibernate
- * This uses a simple integer to store the time as milliseconds since 1970-1-1. <br />
+ * Persist {@link org.joda.time.LocalDate} via hibernate.
+ * This uses a simple integer to store the time as milliseconds since 1970-1-1.
  * The milliseconds will survive.
  *
  * @author Mario Ivankovits (mario@ops.co.at)
diff --git a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalTimeExact.java b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalTimeExact.java
index 922569120..45fe0e26c 100644
--- a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalTimeExact.java
+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentLocalTimeExact.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2007 Stephen Colebourne
+ *  Copyright 2001-2008 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -27,7 +27,7 @@
 import org.joda.time.LocalTime;
 
 /**
- * Persist {@link org.joda.time.LocalDate} via hibernate
+ * Persist {@link org.joda.time.LocalDate} via hibernate.
  *
  * @author Mario Ivankovits (mario@ops.co.at)
  */
diff --git a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentPeriod.java b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentPeriod.java
index 3299c4709..f339d77bd 100644
--- a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentPeriod.java
+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentPeriod.java
@@ -1,3 +1,18 @@
+/*
+ *  Copyright 2001-2008 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
 package org.joda.time.contrib.hibernate;
 
 import org.joda.time.Period;
@@ -7,8 +22,6 @@
  * It simply stores and retrieves the value as a varchar using Period.toString.
  *
  * @author gjoseph
- * @author $Author: $ (last edit)
- * @version $Revision: $
  */
 public class PersistentPeriod extends AbstractStringBasedJodaType {
 
diff --git a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentTimeOfDay.java b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentTimeOfDay.java
index 03dc1a238..ebc12c469 100644
--- a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentTimeOfDay.java
+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentTimeOfDay.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2007 Stephen Colebourne
+ *  Copyright 2001-2008 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -29,8 +29,8 @@
 import org.joda.time.TimeOfDay;
 
 /**
- * Persist {@link org.joda.time.TimeOfDay} via hibernate. <br />
- * This uses java.sql.Time and the time datatype of your database. <br />
+ * Persist {@link org.joda.time.TimeOfDay} via hibernate.
+ * This uses java.sql.Time and the time datatype of your database.
  * Notice: You might loose the milliseconds part.
  *
  * @author Mario Ivankovits (mario@ops.co.at)
diff --git a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentTimeOfDayExact.java b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentTimeOfDayExact.java
index 976bd3407..5b1c59308 100644
--- a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentTimeOfDayExact.java
+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentTimeOfDayExact.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2007 Stephen Colebourne
+ *  Copyright 2001-2008 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -27,8 +27,8 @@
 import org.joda.time.TimeOfDay;
 
 /**
- * Persist {@link org.joda.time.TimeOfDay} via hibernate.<br />
- * This uses a simple integer to store the time as milliseconds since 1970-1-1. <br />
+ * Persist {@link org.joda.time.TimeOfDay} via hibernate.
+ * This uses a simple integer to store the time as milliseconds since 1970-1-1.
  * The milliseconds will survive.
  *
  * @author Mario Ivankovits (mario@ops.co.at)
diff --git a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentYearMonthDay.java b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentYearMonthDay.java
index 98cdca30d..26af1750a 100644
--- a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentYearMonthDay.java
+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/PersistentYearMonthDay.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2007 Stephen Colebourne
+ *  Copyright 2001-2008 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -27,7 +27,7 @@
 import org.joda.time.YearMonthDay;
 
 /**
- * Persist {@link org.joda.time.YearMonthDay} via hibernate
+ * Persist {@link org.joda.time.YearMonthDay} via hibernate.
  *
  * @author Mario Ivankovits (mario@ops.co.at)
  */

From 7f60a9ca242e9e3d5aa27b490cb85d600a38d69f Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 13 Oct 2008 21:58:47 +0000
Subject: [PATCH 34/43] Add I18N link

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1360 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/hibernate/xdocs/navigation.xml | 1 +
 1 file changed, 1 insertion(+)

diff --git a/JodaTimeContrib/hibernate/xdocs/navigation.xml b/JodaTimeContrib/hibernate/xdocs/navigation.xml
index 717584798..b83163bfa 100644
--- a/JodaTimeContrib/hibernate/xdocs/navigation.xml
+++ b/JodaTimeContrib/hibernate/xdocs/navigation.xml
@@ -10,6 +10,7 @@
       <item name="Joda-Time" href="../../index.html"/>
       <item name="JSP tags" href="../jsptags/index.html"/>
       <item name="Hibernate" href="/index.html"/>
+      <item name="I18N" href="../i18n/index.html"/>
     </links>
     <menu name="Joda Time Hibernate">
       <item name="Overview" href="index.html"/>

From df21ab4baa87ef7fe9ed824217d0a4e145601c42 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 15 Oct 2008 23:59:57 +0000
Subject: [PATCH 35/43] Method deepCopy() should just return the input value
 [2038742]

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1361 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 .../contrib/hibernate/AbstractStringBasedJodaType.java    | 7 +------
 JodaTimeContrib/hibernate/xdocs/changes.xml               | 8 +++++++-
 2 files changed, 8 insertions(+), 7 deletions(-)

diff --git a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/AbstractStringBasedJodaType.java b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/AbstractStringBasedJodaType.java
index d55531b6c..c44ffe5d5 100644
--- a/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/AbstractStringBasedJodaType.java
+++ b/JodaTimeContrib/hibernate/src/java/org/joda/time/contrib/hibernate/AbstractStringBasedJodaType.java
@@ -24,7 +24,6 @@
 import org.hibernate.Hibernate;
 import org.hibernate.HibernateException;
 import org.hibernate.usertype.UserType;
-import org.joda.time.Period;
 
 /**
  * @author gjoseph
@@ -76,11 +75,7 @@ public int hashCode(Object object) throws HibernateException {
     }
 
     public Object deepCopy(Object value) throws HibernateException {
-        if (value == null) {
-            return null;
-        }
-
-        return new Period(value);
+        return value;
     }
 
     public boolean isMutable() {
diff --git a/JodaTimeContrib/hibernate/xdocs/changes.xml b/JodaTimeContrib/hibernate/xdocs/changes.xml
index 8b54aeeee..ade3ce040 100644
--- a/JodaTimeContrib/hibernate/xdocs/changes.xml
+++ b/JodaTimeContrib/hibernate/xdocs/changes.xml
@@ -8,7 +8,13 @@
   <body>
 
     <!-- types are add, fix, remove, update -->
-    <release version="1.1" date="2008-10-11" description="Bug fix version">
+    <release version="1.2" date="2008-10-11" description="Version 1.2">
+      <action dev="scolebourne" type="fix">
+        Method deepCopy() should just return the input value [2038742]
+      </action>              
+    </release>
+
+    <release version="1.1" date="2008-10-11" description="Version 1.1">
       <action dev="scolebourne" type="fix">
         Handle null intervals stored in database [2111763].
       </action>              

From 5de9d93738a54df461f378f707da2f90f9048c3d Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Thu, 16 Oct 2008 00:04:16 +0000
Subject: [PATCH 36/43] Change to maven 1.1

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1362 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/hibernate/project.properties               | 2 +-
 JodaTimeContrib/hibernate/project.xml                      | 2 +-
 JodaTimeContrib/hibernate/src/conf/MANIFEST.MF             | 2 +-
 JodaTimeContrib/hibernate/xdocs/changes.xml                | 3 +++
 JodaTimeContrib/hibernate/xdocs/index.xml                  | 5 ++---
 JodaTimeContrib/hibernate/xdocs/navigation.xml             | 2 +-
 JodaTimeContrib/hibernate/xdocs/stylesheets/joda-theme.css | 6 ++++++
 7 files changed, 15 insertions(+), 7 deletions(-)

diff --git a/JodaTimeContrib/hibernate/project.properties b/JodaTimeContrib/hibernate/project.properties
index 496e556b8..c5fb5e7f8 100644
--- a/JodaTimeContrib/hibernate/project.properties
+++ b/JodaTimeContrib/hibernate/project.properties
@@ -5,6 +5,7 @@ maven.xdoc.date.format = yyyy-MM-dd
 maven.xdoc.legend = false;
 maven.xdoc.theme.url = ./style/joda-theme.css
 maven.xdoc.locale.default=en
+maven.xdoc.version=
 
 maven.scm.svn.tag.base=https://svn.sourceforge.net/svnroot/joda-time/tags
 maven.changelog.factory=org.apache.maven.svnlib.SvnChangeLogFactory
@@ -32,4 +33,3 @@ maven.sourceforge.project.releaseNotes=RELEASE-NOTES.txt
 maven.sourceforge.project.sendEmailNotice=false
 maven.sourceforge.project.submitNewsItem=false
 
-maven.repo.remote=http://repo1.maven.org/maven
\ No newline at end of file
diff --git a/JodaTimeContrib/hibernate/project.xml b/JodaTimeContrib/hibernate/project.xml
index 028574d73..929860c46 100644
--- a/JodaTimeContrib/hibernate/project.xml
+++ b/JodaTimeContrib/hibernate/project.xml
@@ -16,7 +16,7 @@
   <inceptionYear>2005</inceptionYear>
   <package>org.joda.time.contrib.hibernate</package>
 
-  <siteAddress>shell.sourceforge.net</siteAddress>
+  <siteAddress>web.sourceforge.net</siteAddress>
   <siteDirectory>/home/groups/j/jo/joda-time/htdocs/contrib/hibernate</siteDirectory>
 
   <licenses>
diff --git a/JodaTimeContrib/hibernate/src/conf/MANIFEST.MF b/JodaTimeContrib/hibernate/src/conf/MANIFEST.MF
index 373063570..59267d522 100644
--- a/JodaTimeContrib/hibernate/src/conf/MANIFEST.MF
+++ b/JodaTimeContrib/hibernate/src/conf/MANIFEST.MF
@@ -1,4 +1,4 @@
-Extension-Name: @name@
+Extension-Name: joda-time-hibernate
 Specification-Title: Joda Time Hibernate support
 Specification-Vendor: Joda.org
 Specification-Version: 1.1
diff --git a/JodaTimeContrib/hibernate/xdocs/changes.xml b/JodaTimeContrib/hibernate/xdocs/changes.xml
index ade3ce040..51a24e979 100644
--- a/JodaTimeContrib/hibernate/xdocs/changes.xml
+++ b/JodaTimeContrib/hibernate/xdocs/changes.xml
@@ -12,6 +12,9 @@
       <action dev="scolebourne" type="fix">
         Method deepCopy() should just return the input value [2038742]
       </action>              
+      <action dev="scolebourne" type="update">
+        Change to maven 1.1
+      </action>              
     </release>
 
     <release version="1.1" date="2008-10-11" description="Version 1.1">
diff --git a/JodaTimeContrib/hibernate/xdocs/index.xml b/JodaTimeContrib/hibernate/xdocs/index.xml
index 981185d00..203633d98 100644
--- a/JodaTimeContrib/hibernate/xdocs/index.xml
+++ b/JodaTimeContrib/hibernate/xdocs/index.xml
@@ -37,9 +37,8 @@ Version 1.1 was released on 2008-10-12 -
 <p>
 Various documentation is available:
 <ul>
-<!--<li>The user guide - <a href="userguide.html">user guide</a></li>-->
-<li>The javadoc for the <a href="api-release/index.html">current release</a></li>
-<li>The javadoc for the <a href="apidocs/index.html">latest in development</a></li>
+<li>The javadoc for the <a href="apidocs/index.html">current release</a></li>
+<li>The <a href="userguide.html">user guide</a></li>
 <!--li>A <a href="faq.html">FAQ</a> list</li-->
 <li>The <a href="http://joda-time.svn.sourceforge.net/viewvc/joda-time/trunk/JodaTimeContrib/hibernate/">Subversion repository</a></li>
 </ul>
diff --git a/JodaTimeContrib/hibernate/xdocs/navigation.xml b/JodaTimeContrib/hibernate/xdocs/navigation.xml
index b83163bfa..8311d6ec1 100644
--- a/JodaTimeContrib/hibernate/xdocs/navigation.xml
+++ b/JodaTimeContrib/hibernate/xdocs/navigation.xml
@@ -15,7 +15,7 @@
     <menu name="Joda Time Hibernate">
       <item name="Overview" href="index.html"/>
       <item name="Users guide" href="userguide.html"/>
-      <item name="Javadoc (Release)" href="/api-release/index.html"/>
+      <item name="Javadoc (Release)" href="apidocs/index.html"/>
       <item name="License" href="licensecover.html"/>
       <item name="Release notes" href="changes-report.html"/>
       <item name="Download" href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=174357"/>
diff --git a/JodaTimeContrib/hibernate/xdocs/stylesheets/joda-theme.css b/JodaTimeContrib/hibernate/xdocs/stylesheets/joda-theme.css
index 5d616b279..45ae933ae 100644
--- a/JodaTimeContrib/hibernate/xdocs/stylesheets/joda-theme.css
+++ b/JodaTimeContrib/hibernate/xdocs/stylesheets/joda-theme.css
@@ -119,3 +119,9 @@ table.bodyTable tr.b {
 body {
   padding-bottom: 0px;
 }
+#organizationLogo img, #projectLogo img, #organizationLogo span, #projectLogo span {
+ margin-top: 8px;
+ margin-right: 8px;
+ margin-bottom: 8px;
+ margin-left: 8px;
+}

From 3367bafb82cd8e6d370775cd41dbc42ef124bb4b Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Thu, 16 Oct 2008 00:04:36 +0000
Subject: [PATCH 37/43] Change to maven 1.1

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1363 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTimeContrib/hibernate/maven.xml | 1 -
 1 file changed, 1 deletion(-)

diff --git a/JodaTimeContrib/hibernate/maven.xml b/JodaTimeContrib/hibernate/maven.xml
index 58eed5607..cb2be2053 100644
--- a/JodaTimeContrib/hibernate/maven.xml
+++ b/JodaTimeContrib/hibernate/maven.xml
@@ -1,6 +1,5 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project
-    default="java:jar"
     xmlns:j="jelly:core"
     xmlns:license="license"
     xmlns:maven="jelly:maven"

From c247b1eaebf6b0a9fe31aaaeed2502f4b34130ec Mon Sep 17 00:00:00 2001
From: Brian S O'Neill <bronee@gmail.com>
Date: Mon, 27 Oct 2008 14:42:45 +0000
Subject: [PATCH 38/43] DateTimeZone data updated to version 2008i.

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1364 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |  2 +-
 .../src/java/org/joda/time/tz/src/Readme.txt  |  2 +-
 .../java/org/joda/time/tz/src/southamerica    | 60 +++++++++++++++----
 3 files changed, 51 insertions(+), 13 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 804666b72..09f0b1bba 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -42,7 +42,7 @@ Source compatible - Yes
 Serialization compatible - Yes
 
 Data compatible - Yes, except
-  - DateTimeZone data updated to version 2008h
+  - DateTimeZone data updated to version 2008i
 
 Semantic compatible - Yes
 
diff --git a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
index 7b8751cec..d45aa6003 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
+++ b/JodaTime/src/java/org/joda/time/tz/src/Readme.txt
@@ -1,2 +1,2 @@
 The data files in this directory were obtained from the public tz database,
-http://www.twinsun.com/tz/tz-link.htm, version 2008h.
+http://www.twinsun.com/tz/tz-link.htm, version 2008i.
diff --git a/JodaTime/src/java/org/joda/time/tz/src/southamerica b/JodaTime/src/java/org/joda/time/tz/src/southamerica
index 4ecc29ae4..bbae0f6c6 100644
--- a/JodaTime/src/java/org/joda/time/tz/src/southamerica
+++ b/JodaTime/src/java/org/joda/time/tz/src/southamerica
@@ -1,4 +1,4 @@
-# @(#)southamerica	8.30
+# @(#)southamerica	8.33
 # <pre>
 
 # This data is by no means authoritative; if you think you know better,
@@ -193,6 +193,26 @@ Rule	Arg	2000	only	-	Mar	3	0:00	0	-
 # </a>
 # So there is no summer time in Argentina for now.
 
+# From Mariano Absatz (2008-10-20):
+# Decree 1693/2008 applies Law 26.350 for the summer 2008/2009 establishing DST in Argentina
+# From 2008-10-19 until 2009-03-15
+# <a href="http://www.boletinoficial.gov.ar/Bora.Portal/CustomControls/PdfContent.aspx?fp=16102008&pi=3&pf=4&s=0&sec=01">
+# http://www.boletinoficial.gov.ar/Bora.Portal/CustomControls/PdfContent.aspx?fp=16102008&pi=3&pf=4&s=0&sec=01
+# </a>
+#
+# Decree 1705/2008 excepting 12 Provinces from applying DST in the summer 2008/2009:
+# Catamarca, La Rioja, Mendoza, Salta, San Juan, San Luis, La Pampa, Neuquen, Rio Negro, Chubut, Santa Cruz
+# and Tierra del Fuego
+# <a href="http://www.boletinoficial.gov.ar/Bora.Portal/CustomControls/PdfContent.aspx?fp=17102008&pi=1&pf=1&s=0&sec=01">
+# http://www.boletinoficial.gov.ar/Bora.Portal/CustomControls/PdfContent.aspx?fp=17102008&pi=1&pf=1&s=0&sec=01
+# </a>
+#
+# Press release 235 dated Saturday October 18th, from the Government of the Province of Jujuy saying
+# it will not apply DST either (even when it was not included in Decree 1705/2008)
+# <a href="http://www.jujuy.gov.ar/index2/partes_prensa/18_10_08/235-181008.doc">
+# http://www.jujuy.gov.ar/index2/partes_prensa/18_10_08/235-181008.doc
+# </a>
+
 Rule	Arg	2007	only	-	Dec	30	0:00	1:00	S
 Rule	Arg	2008	max	-	Mar	Sun>=15	0:00	0	-
 Rule	Arg	2008	max	-	Oct	Sun>=15	0:00	1:00	S
@@ -343,9 +363,8 @@ Zone America/Argentina/Buenos_Aires -3:53:48 - LMT 1894 Oct 31
 			-4:00	Arg	AR%sT	2000 Mar  3
 			-3:00	Arg	AR%sT
 #
-# Santa Fe (SF), Entre Rios (ER), Corrientes (CN), Misiones (MN), Chaco (CC),
-# Formosa (FM), Salta (SA), Santiago del Estero (SE), Cordoba (CB),
-# La Pampa (LP), Neuquen (NQ), Rio Negro (RN)
+# Cordoba (CB), Santa Fe (SF), Entre Rios (ER), Corrientes (CN), Misiones (MN),
+# Chaco (CC), Formosa (FM), Santiago del Estero (SE)
 #
 # Shanks & Pottenger also make the following claims, which we haven't verified:
 # - Formosa switched to -3:00 on 1991-01-07.
@@ -364,6 +383,18 @@ Zone America/Argentina/Cordoba -4:16:48 - LMT	1894 Oct 31
 			-4:00	Arg	AR%sT	2000 Mar  3
 			-3:00	Arg	AR%sT
 #
+# Salta (SA), La Pampa (LP), Neuquen (NQ), Rio Negro (RN)
+Zone America/Argentina/Salta -4:21:40 - LMT	1894 Oct 31
+			-4:16:48 -	CMT	1920 May
+			-4:00	-	ART	1930 Dec
+			-4:00	Arg	AR%sT	1969 Oct  5
+			-3:00	Arg	AR%sT	1991 Mar  3
+			-4:00	-	WART	1991 Oct 20
+			-3:00	Arg	AR%sT	1999 Oct  3
+			-4:00	Arg	AR%sT	2000 Mar  3
+			-3:00	Arg	AR%sT	2008 Oct 18
+			-3:00	-	ART
+#
 # Tucuman (TM)
 Zone America/Argentina/Tucuman -4:20:52 - LMT	1894 Oct 31
 			-4:16:48 -	CMT	1920 May
@@ -388,7 +419,8 @@ Zone America/Argentina/La_Rioja -4:27:24 - LMT	1894 Oct 31
 			-4:00	Arg	AR%sT	2000 Mar  3
 			-3:00	-	ART	2004 Jun  1
 			-4:00	-	WART	2004 Jun 20
-			-3:00	Arg	AR%sT
+			-3:00	Arg	AR%sT	2008 Oct 18
+			-3:00	-	ART
 #
 # San Juan (SJ)
 Zone America/Argentina/San_Juan -4:34:04 - LMT	1894 Oct 31
@@ -401,7 +433,8 @@ Zone America/Argentina/San_Juan -4:34:04 - LMT	1894 Oct 31
 			-4:00	Arg	AR%sT	2000 Mar  3
 			-3:00	-	ART	2004 May 31
 			-4:00	-	WART	2004 Jul 25
-			-3:00	Arg	AR%sT
+			-3:00	Arg	AR%sT	2008 Oct 18
+			-3:00	-	ART
 #
 # Jujuy (JY)
 Zone America/Argentina/Jujuy -4:21:12 -	LMT	1894 Oct 31
@@ -415,7 +448,8 @@ Zone America/Argentina/Jujuy -4:21:12 -	LMT	1894 Oct 31
 			-3:00	1:00	ARST	1992
 			-3:00	Arg	AR%sT	1999 Oct  3
 			-4:00	Arg	AR%sT	2000 Mar  3
-			-3:00	Arg	AR%sT
+			-3:00	Arg	AR%sT	2008 Oct 18
+			-3:00	-	ART
 #
 # Catamarca (CT), Chubut (CH)
 Zone America/Argentina/Catamarca -4:23:08 - LMT	1894 Oct 31
@@ -428,7 +462,8 @@ Zone America/Argentina/Catamarca -4:23:08 - LMT	1894 Oct 31
 			-4:00	Arg	AR%sT	2000 Mar  3
 			-3:00	-	ART	2004 Jun  1
 			-4:00	-	WART	2004 Jun 20
-			-3:00	Arg	AR%sT
+			-3:00	Arg	AR%sT	2008 Oct 18
+			-3:00	-	ART
 #
 # Mendoza (MZ)
 Zone America/Argentina/Mendoza -4:35:16 - LMT	1894 Oct 31
@@ -445,7 +480,8 @@ Zone America/Argentina/Mendoza -4:35:16 - LMT	1894 Oct 31
 			-4:00	Arg	AR%sT	2000 Mar  3
 			-3:00	-	ART	2004 May 23
 			-4:00	-	WART	2004 Sep 26
-			-3:00	Arg	AR%sT
+			-3:00	Arg	AR%sT	2008 Oct 18
+			-3:00	-	ART
 #
 # San Luis (SL)
 Zone America/Argentina/San_Luis -4:25:24 - LMT	1894 Oct 31
@@ -473,7 +509,8 @@ Zone America/Argentina/Rio_Gallegos -4:36:52 - LMT 1894 Oct 31
 			-4:00	Arg	AR%sT	2000 Mar  3
 			-3:00	-	ART	2004 Jun  1
 			-4:00	-	WART	2004 Jun 20
-			-3:00	Arg	AR%sT
+			-3:00	Arg	AR%sT	2008 Oct 18
+			-3:00	-	ART
 #
 # Tierra del Fuego, Antartida e Islas del Atlantico Sur (TF)
 Zone America/Argentina/Ushuaia -4:33:12 - LMT 1894 Oct 31
@@ -484,7 +521,8 @@ Zone America/Argentina/Ushuaia -4:33:12 - LMT 1894 Oct 31
 			-4:00	Arg	AR%sT	2000 Mar  3
 			-3:00	-	ART	2004 May 30
 			-4:00	-	WART	2004 Jun 20
-			-3:00	Arg	AR%sT
+			-3:00	Arg	AR%sT	2008 Oct 18
+			-3:00	-	ART
 
 # Aruba
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]

From ba5b23c9eae7ef4fbe19cf4cfa726d973bbb0149 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 27 Oct 2008 23:03:33 +0000
Subject: [PATCH 39/43] Add DateTimeZone.isLocalDateTimeGap

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1365 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    |   3 +
 .../src/java/org/joda/time/DateTimeZone.java  | 118 ++++++++++++++++++
 .../test/org/joda/time/TestDateTimeZone.java  |  68 ++++++++++
 3 files changed, 189 insertions(+)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 09f0b1bba..27d9bcb41 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -32,6 +32,9 @@ Enhancements since 1.5
   The hash codes of each Chronology implementation is now stable.
   This should aid large scale caching/distribution tools.
 
+- Added DateTimeZone.isLocalDateTimeGap
+  Returns true/false depending on whether the time is in a time-zone gap
+
 
 Compatibility with 1.5
 ----------------------
diff --git a/JodaTime/src/java/org/joda/time/DateTimeZone.java b/JodaTime/src/java/org/joda/time/DateTimeZone.java
index 88c4ab15e..d6118c16b 100644
--- a/JodaTime/src/java/org/joda/time/DateTimeZone.java
+++ b/JodaTime/src/java/org/joda/time/DateTimeZone.java
@@ -970,6 +970,124 @@ public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant) {
         return instantLocal - newZone.getOffsetFromLocal(instantLocal);
     }
 
+//    //-----------------------------------------------------------------------
+//    /**
+//     * Checks if the given {@link LocalDateTime} is within an overlap.
+//     * <p>
+//     * When switching from Daylight Savings Time to standard time there is
+//     * typically an overlap where the same clock hour occurs twice. This
+//     * method identifies whether the local datetime refers to such an overlap.
+//     * 
+//     * @param localDateTime  the time to check, not null
+//     * @return true if the given datetime refers to an overlap
+//     */
+//    public boolean isLocalDateTimeOverlap(LocalDateTime localDateTime) {
+//        if (isFixed()) {
+//            return false;
+//        }
+//        long instantLocal = localDateTime.toDateTime(DateTimeZone.UTC).getMillis();
+//        // get the offset at instantLocal (first estimate)
+//        int offsetLocal = getOffset(instantLocal);
+//        // adjust instantLocal using the estimate and recalc the offset
+//        int offset = getOffset(instantLocal - offsetLocal);
+//        // if the offsets differ, we must be near a DST boundary
+//        if (offsetLocal != offset) {
+//            long nextLocal = nextTransition(instantLocal - offsetLocal);
+//            long nextAdjusted = nextTransition(instantLocal - offset);
+//            if (nextLocal != nextAdjusted) {
+//                // in DST gap
+//                return false;
+//            }
+//            long diff = Math.abs(offset - offsetLocal);
+//            DateTime dateTime = localDateTime.toDateTime(this);
+//            DateTime adjusted = dateTime.plus(diff);
+//            if (dateTime.getHourOfDay() == adjusted.getHourOfDay() &&
+//                    dateTime.getMinuteOfHour() == adjusted.getMinuteOfHour() &&
+//                    dateTime.getSecondOfMinute() == adjusted.getSecondOfMinute()) {
+//                return true;
+//            }
+//            adjusted = dateTime.minus(diff);
+//            if (dateTime.getHourOfDay() == adjusted.getHourOfDay() &&
+//                    dateTime.getMinuteOfHour() == adjusted.getMinuteOfHour() &&
+//                    dateTime.getSecondOfMinute() == adjusted.getSecondOfMinute()) {
+//                return true;
+//            }
+//            return false;
+//        }
+//        return false;
+//    }
+//        
+//        
+//        DateTime dateTime = null;
+//        try {
+//            dateTime = localDateTime.toDateTime(this);
+//        } catch (IllegalArgumentException ex) {
+//            return false;  // it is a gap, not an overlap
+//        }
+//        long offset1 = Math.abs(getOffset(dateTime.getMillis() + 1) - getStandardOffset(dateTime.getMillis() + 1));
+//        long offset2 = Math.abs(getOffset(dateTime.getMillis() - 1) - getStandardOffset(dateTime.getMillis() - 1));
+//        long offset = Math.max(offset1, offset2);
+//        if (offset == 0) {
+//            return false;
+//        }
+//        DateTime adjusted = dateTime.plus(offset);
+//        if (dateTime.getHourOfDay() == adjusted.getHourOfDay() &&
+//                dateTime.getMinuteOfHour() == adjusted.getMinuteOfHour() &&
+//                dateTime.getSecondOfMinute() == adjusted.getSecondOfMinute()) {
+//            return true;
+//        }
+//        adjusted = dateTime.minus(offset);
+//        if (dateTime.getHourOfDay() == adjusted.getHourOfDay() &&
+//                dateTime.getMinuteOfHour() == adjusted.getMinuteOfHour() &&
+//                dateTime.getSecondOfMinute() == adjusted.getSecondOfMinute()) {
+//            return true;
+//        }
+//        return false;
+        
+//        long millis = dateTime.getMillis();
+//        long nextTransition = nextTransition(millis);
+//        long previousTransition = previousTransition(millis);
+//        long deltaToPreviousTransition = millis - previousTransition;
+//        long deltaToNextTransition = nextTransition - millis;
+//        if (deltaToNextTransition < deltaToPreviousTransition) {
+//            int offset = getOffset(nextTransition);
+//            int standardOffset = getStandardOffset(nextTransition);
+//            if (Math.abs(offset - standardOffset) >= deltaToNextTransition) {
+//                return true;
+//            }
+//        } else  {
+//            int offset = getOffset(previousTransition);
+//            int standardOffset = getStandardOffset(previousTransition);
+//            if (Math.abs(offset - standardOffset) >= deltaToPreviousTransition) {
+//                return true;
+//            }
+//        }
+//        return false;
+//    }
+
+    /**
+     * Checks if the given {@link LocalDateTime} is within a gap.
+     * <p>
+     * When switching from standard time to Daylight Savings Time there is
+     * typically a gap where a clock hour is missing. This method identifies
+     * whether the local datetime refers to such a gap.
+     * 
+     * @param localDateTime  the time to check, not null
+     * @return true if the given datetime refers to a gap
+     */
+    public boolean isLocalDateTimeGap(LocalDateTime localDateTime) {
+        if (isFixed()) {
+            return false;
+        }
+        try {
+            localDateTime.toDateTime(this);
+            return false;
+        } catch (IllegalArgumentException ex) {
+            return true;
+        }
+    }
+
+    //-----------------------------------------------------------------------
     /**
      * Returns true if this time zone has no transitions.
      *
diff --git a/JodaTime/src/test/org/joda/time/TestDateTimeZone.java b/JodaTime/src/test/org/joda/time/TestDateTimeZone.java
index 724bb5574..7f45f33c5 100644
--- a/JodaTime/src/test/org/joda/time/TestDateTimeZone.java
+++ b/JodaTime/src/test/org/joda/time/TestDateTimeZone.java
@@ -736,6 +736,74 @@ public void testTransitionFixed() {
         assertEquals(TEST_TIME_WINTER, zone.previousTransition(TEST_TIME_WINTER));
     }
 
+//    //-----------------------------------------------------------------------
+//    public void testIsLocalDateTimeOverlap_Berlin() {
+//        DateTimeZone zone = DateTimeZone.forID("Europe/Berlin");
+//        assertEquals(false, zone.isLocalDateTimeOverlap(new LocalDateTime(2007, 10, 28, 1, 0)));
+//        assertEquals(false, zone.isLocalDateTimeOverlap(new LocalDateTime(2007, 10, 28, 1, 59, 59, 99)));
+//        assertEquals(true, zone.isLocalDateTimeOverlap(new LocalDateTime(2007, 10, 28, 2, 0)));
+//        assertEquals(true, zone.isLocalDateTimeOverlap(new LocalDateTime(2007, 10, 28, 2, 30)));
+//        assertEquals(true, zone.isLocalDateTimeOverlap(new LocalDateTime(2007, 10, 28, 2, 59, 59, 99)));
+//        assertEquals(false, zone.isLocalDateTimeOverlap(new LocalDateTime(2007, 10, 28, 3, 0)));
+//        assertEquals(false, zone.isLocalDateTimeOverlap(new LocalDateTime(2007, 10, 28, 4, 0)));
+//        
+//        assertEquals(false, zone.isLocalDateTimeOverlap(new LocalDateTime(2007, 3, 25, 1, 30)));  // before gap
+//        assertEquals(false, zone.isLocalDateTimeOverlap(new LocalDateTime(2007, 3, 25, 2, 30)));  // gap
+//        assertEquals(false, zone.isLocalDateTimeOverlap(new LocalDateTime(2007, 3, 25, 3, 30)));  // after gap
+//        assertEquals(false, zone.isLocalDateTimeOverlap(new LocalDateTime(2007, 12, 24, 12, 34)));
+//    }
+//
+//    //-----------------------------------------------------------------------
+//    public void testIsLocalDateTimeOverlap_NewYork() {
+//        DateTimeZone zone = DateTimeZone.forID("America/New_York");
+//        assertEquals(false, zone.isLocalDateTimeOverlap(new LocalDateTime(2007, 11, 4, 0, 0)));
+//        assertEquals(false, zone.isLocalDateTimeOverlap(new LocalDateTime(2007, 11, 4, 0, 59, 59, 99)));
+//        assertEquals(true, zone.isLocalDateTimeOverlap(new LocalDateTime(2007, 11, 4, 1, 0)));
+//        assertEquals(true, zone.isLocalDateTimeOverlap(new LocalDateTime(2007, 11, 4, 1, 30)));
+//        assertEquals(true, zone.isLocalDateTimeOverlap(new LocalDateTime(2007, 11, 4, 1, 59, 59, 99)));
+//        assertEquals(false, zone.isLocalDateTimeOverlap(new LocalDateTime(2007, 11, 4, 2, 0)));
+//        assertEquals(false, zone.isLocalDateTimeOverlap(new LocalDateTime(2007, 11, 4, 3, 0)));
+//        
+//        assertEquals(false, zone.isLocalDateTimeOverlap(new LocalDateTime(2007, 3, 11, 1, 30)));  // before gap
+//        assertEquals(false, zone.isLocalDateTimeOverlap(new LocalDateTime(2007, 3, 11, 2, 30)));  // gap
+//        assertEquals(false, zone.isLocalDateTimeOverlap(new LocalDateTime(2007, 3, 11, 3, 30)));  // after gap
+//        assertEquals(false, zone.isLocalDateTimeOverlap(new LocalDateTime(2007, 12, 24, 12, 34)));
+//    }
+
+    //-----------------------------------------------------------------------
+    public void testIsLocalDateTimeGap_Berlin() {
+        DateTimeZone zone = DateTimeZone.forID("Europe/Berlin");
+        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 1, 0)));
+        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 1, 59, 59, 99)));
+        assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 0)));
+        assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 30)));
+        assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 59, 59, 99)));
+        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 3, 0)));
+        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 4, 0)));
+        
+        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 1, 30)));  // before overlap
+        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 2, 30)));  // overlap
+        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 3, 30)));  // after overlap
+        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 12, 24, 12, 34)));
+    }
+
+    //-----------------------------------------------------------------------
+    public void testIsLocalDateTimeGap_NewYork() {
+        DateTimeZone zone = DateTimeZone.forID("America/New_York");
+        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 11, 1, 0)));
+        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 11, 1, 59, 59, 99)));
+        assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 11, 2, 0)));
+        assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 11, 2, 30)));
+        assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 11, 2, 59, 59, 99)));
+        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 11, 3, 0)));
+        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 11, 4, 0)));
+        
+        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 11, 4, 0, 30)));  // before overlap
+        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 11, 4, 1, 30)));  // overlap
+        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 11, 4, 2, 30)));  // after overlap
+        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 12, 24, 12, 34)));
+    }
+
     //-----------------------------------------------------------------------
     public void testToTimeZone() {
         DateTimeZone zone = DateTimeZone.forID("Europe/Paris");

From 330377634b073f7e5ba36ccbb123f921426d2542 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 27 Oct 2008 23:30:01 +0000
Subject: [PATCH 40/43] Add since tag

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1366 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/src/java/org/joda/time/DateTimeZone.java | 1 +
 1 file changed, 1 insertion(+)

diff --git a/JodaTime/src/java/org/joda/time/DateTimeZone.java b/JodaTime/src/java/org/joda/time/DateTimeZone.java
index d6118c16b..34d02ef98 100644
--- a/JodaTime/src/java/org/joda/time/DateTimeZone.java
+++ b/JodaTime/src/java/org/joda/time/DateTimeZone.java
@@ -1074,6 +1074,7 @@ public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant) {
      * 
      * @param localDateTime  the time to check, not null
      * @return true if the given datetime refers to a gap
+     * @since 1.6
      */
     public boolean isLocalDateTimeGap(LocalDateTime localDateTime) {
         if (isFixed()) {

From 3b5d9edf4e4adb6ccca0c21faaf469b842dba4dd Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 27 Oct 2008 23:30:49 +0000
Subject: [PATCH 41/43] Added Duration.getStandardSeconds() and
 Duration.toStandardSeconds()

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1367 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/RELEASE-NOTES.txt                    | 16 ++++-
 JodaTime/src/java/org/joda/time/Duration.java | 30 ++++++++++
 .../org/joda/time/TestDuration_Basics.java    | 60 ++++++++++++++++++-
 3 files changed, 103 insertions(+), 3 deletions(-)

diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index 27d9bcb41..69f5ae2c5 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -14,8 +14,17 @@ This is the same license as all of Apache, plus other open source projects such
 The intent is to make the code available to the Java community with the minimum
 of restrictions. If the license causes you problems please contact the mailing list.
 
-*  Please also check out our related projects   *
-* http://joda-time.sourceforge.net/related.html *
+**  Please also check out our related projects   **
+** http://joda-time.sourceforge.net/related.html **
+
+********************************************************************
+ The next release will probably be v2.0
+ This will be source and binary compatible with the exception that
+ deprecated methods and classes will be removed.
+ If you rely on the deprecated methods or classes please move to
+ their replacements, or let us know why you can't move by writing
+ in https://sourceforge.net/forum/forum.php?forum_id=337835
+********************************************************************
 
 
 Enhancements since 1.5
@@ -25,6 +34,9 @@ Enhancements since 1.5
   standardMinutes() and standardSeconds(). These create durations of the
   length normally associated with a day/hour/minute/second
 
+- Added Duration.getStandardSeconds() and Duration.toStandardSeconds()
+  These convert a duration in milliseconds to a number of seconds.
+
 - Added OSGi bundle information [1889787]
   Joda-Time should be usable directly as an OSGi bundle
 
diff --git a/JodaTime/src/java/org/joda/time/Duration.java b/JodaTime/src/java/org/joda/time/Duration.java
index 123e789b5..2c24d67e8 100644
--- a/JodaTime/src/java/org/joda/time/Duration.java
+++ b/JodaTime/src/java/org/joda/time/Duration.java
@@ -180,6 +180,21 @@ public Duration(Object duration) {
         super(duration);
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Gets the length of this duration in seconds assuming 1000 milliseconds
+     * in a second.
+     * <p>
+     * This returns <code>getMillis() / 1000</code>.
+     * The result is an integer division, so 2999 millis returns 2 seconds.
+     *
+     * @return the length of the duration in standard seconds
+     * @since 1.6
+     */
+    public long getStandardSeconds() {
+        return getMillis() / DateTimeConstants.MILLIS_PER_SECOND;
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Get this duration as an immutable <code>Duration</code> object
@@ -191,6 +206,21 @@ public Duration toDuration() {
         return this;
     }
 
+    /**
+     * Converts this duration to a period in seconds assuming 1000 milliseconds
+     * in a second.
+     * <p>
+     * This method allows you to convert between a duration and a period.
+     * 
+     * @return a period representing the number of standard seconds in this period, never null
+     * @throws ArithmeticException if the number of seconds is too large to be represented
+     * @since 1.6
+     */
+    public Seconds toStandardSeconds() {
+        long seconds = getStandardSeconds();
+        return Seconds.seconds(FieldUtils.safeToInt(seconds));
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Creates a new Duration instance with a different milisecond length.
diff --git a/JodaTime/src/test/org/joda/time/TestDuration_Basics.java b/JodaTime/src/test/org/joda/time/TestDuration_Basics.java
index 4068f279f..4c42ec799 100644
--- a/JodaTime/src/test/org/joda/time/TestDuration_Basics.java
+++ b/JodaTime/src/test/org/joda/time/TestDuration_Basics.java
@@ -249,6 +249,30 @@ public void testSerialization() throws Exception {
         assertEquals(test, result);
     }
 
+    //-----------------------------------------------------------------------
+    public void testGetStandardSeconds() {
+        Duration test = new Duration(0L);
+        assertEquals(0, test.getStandardSeconds());
+        test = new Duration(1L);
+        assertEquals(0, test.getStandardSeconds());
+        test = new Duration(999L);
+        assertEquals(0, test.getStandardSeconds());
+        test = new Duration(1000L);
+        assertEquals(1, test.getStandardSeconds());
+        test = new Duration(1001L);
+        assertEquals(1, test.getStandardSeconds());
+        test = new Duration(1999L);
+        assertEquals(1, test.getStandardSeconds());
+        test = new Duration(2000L);
+        assertEquals(2, test.getStandardSeconds());
+        test = new Duration(-1L);
+        assertEquals(0, test.getStandardSeconds());
+        test = new Duration(-999L);
+        assertEquals(0, test.getStandardSeconds());
+        test = new Duration(-1000L);
+        assertEquals(-1, test.getStandardSeconds());
+    }
+
     //-----------------------------------------------------------------------
     public void testToString() {
         long length = (365L + 2L * 30L + 3L * 7L + 4L) * DateTimeConstants.MILLIS_PER_DAY +
@@ -281,7 +305,41 @@ public void testToDuration2() {
         assertNotSame(test, result);
         assertEquals(test, result);
     }
-    
+
+    //-----------------------------------------------------------------------
+    public void testToStandardSeconds() {
+        Duration test = new Duration(0L);
+        assertEquals(Seconds.seconds(0), test.toStandardSeconds());
+        test = new Duration(1L);
+        assertEquals(Seconds.seconds(0), test.toStandardSeconds());
+        test = new Duration(999L);
+        assertEquals(Seconds.seconds(0), test.toStandardSeconds());
+        test = new Duration(1000L);
+        assertEquals(Seconds.seconds(1), test.toStandardSeconds());
+        test = new Duration(1001L);
+        assertEquals(Seconds.seconds(1), test.toStandardSeconds());
+        test = new Duration(1999L);
+        assertEquals(Seconds.seconds(1), test.toStandardSeconds());
+        test = new Duration(2000L);
+        assertEquals(Seconds.seconds(2), test.toStandardSeconds());
+        test = new Duration(-1L);
+        assertEquals(Seconds.seconds(0), test.toStandardSeconds());
+        test = new Duration(-999L);
+        assertEquals(Seconds.seconds(0), test.toStandardSeconds());
+        test = new Duration(-1000L);
+        assertEquals(Seconds.seconds(-1), test.toStandardSeconds());
+    }
+
+    public void testToStandardSeconds_overflow() {
+        Duration test = new Duration(((long) Integer.MAX_VALUE) * 1000L + 1000L);
+        try {
+            test.toStandardSeconds();
+            fail();
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+    }
+
     //-----------------------------------------------------------------------
     public void testToPeriod() {
         long length =

From 01b4521dc350419fb6bf6290a430d198e81f8708 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 27 Oct 2008 23:42:10 +0000
Subject: [PATCH 42/43] Update TODO version

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1368 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/ToDo.txt | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/JodaTime/ToDo.txt b/JodaTime/ToDo.txt
index 6d33a6a3c..dbd7de6c7 100644
--- a/JodaTime/ToDo.txt
+++ b/JodaTime/ToDo.txt
@@ -1,10 +1,10 @@
 JodaTime ToDo list
 ==================
 
-For 1.6
+For 2.0
 -------
 
-The TODO list for 1.6 has not been set yet.
+The TODO list for 2.0 has not been set yet.
 Some of the following are likely targets, as they are interesting ideas.
 
 Join joda-interest.at.lists.sourceforge.net to help out!

From f3313e4fd8ec09bc4af6c491a568c79909a008b7 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 27 Oct 2008 23:59:37 +0000
Subject: [PATCH 43/43] Prepare for v1.6

git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1369 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1
---
 JodaTime/xdocs/index.xml        |   2 +-
 JodaTime/xdocs/upgradeto160.xml | 111 ++++++++++++++++++++++++++++++++
 2 files changed, 112 insertions(+), 1 deletion(-)

diff --git a/JodaTime/xdocs/index.xml b/JodaTime/xdocs/index.xml
index 6f08ee510..5df998e04 100644
--- a/JodaTime/xdocs/index.xml
+++ b/JodaTime/xdocs/index.xml
@@ -58,7 +58,7 @@ public boolean isJoinedInLastThreeMonths(<a href="api-release/index.html?org/jod
   return last3Months.contains(datetimeJoined);
 }
 -->
-Version 1.6 was released on 2008-XX-XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX -
+Version 1.6 was released on 2008-10-27 -
 <a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=104212">Download now</a>
 </p>
 </section>
diff --git a/JodaTime/xdocs/upgradeto160.xml b/JodaTime/xdocs/upgradeto160.xml
index 11b59ac8e..54fd89d88 100644
--- a/JodaTime/xdocs/upgradeto160.xml
+++ b/JodaTime/xdocs/upgradeto160.xml
@@ -13,6 +13,117 @@
 These are the release notes and advice for upgrading Joda-Time from
 version 1.5 to version 1.6.
 <source>
+Joda-Time version 1.6
+---------------------
+
+Joda-Time is a date and time handling library that seeks to replace the JDK
+Date and Calendar classes.
+
+This is the seventh release of Joda-Time.
+This release contains enhancements, bug fixes and a time zone update.
+
+We recommend JDK 1.4 or later, and have performed no testing on earlier JDKs.
+
+Joda-Time is licensed under the business-friendly Apache License Version 2.
+This is the same license as all of Apache, plus other open source projects such as Spring.
+The intent is to make the code available to the Java community with the minimum
+of restrictions. If the license causes you problems please contact the mailing list.
+
+**  Please also check out our related projects   **
+** http://joda-time.sourceforge.net/related.html **
+
+********************************************************************
+ The next release will probably be v2.0
+ This will be source and binary compatible with the exception that
+ deprecated methods and classes will be removed.
+ If you rely on the deprecated methods or classes please move to
+ their replacements, or let us know why you can't move by writing
+ in https://sourceforge.net/forum/forum.php?forum_id=337835
+********************************************************************
+
+
+Enhancements since 1.5
+----------------------
+- Add static factory methods to Duration [1909376]
+  Duration now has four factory methods, standardDays(), standardHours(),
+  standardMinutes() and standardSeconds(). These create durations of the
+  length normally associated with a day/hour/minute/second
+
+- Added Duration.getStandardSeconds() and Duration.toStandardSeconds()
+  These convert a duration in milliseconds to a number of seconds.
+
+- Added OSGi bundle information [1889787]
+  Joda-Time should be usable directly as an OSGi bundle
+
+- Added stable Chronology hash code implementations [2018795]
+  The hash codes of each Chronology implementation is now stable.
+  This should aid large scale caching/distribution tools.
+
+- Added DateTimeZone.isLocalDateTimeGap
+  Returns true/false depending on whether the time is in a time-zone gap
+
+
+Compatibility with 1.5
+----------------------
+Binary compatible - Yes
+
+Source compatible - Yes
+
+Serialization compatible - Yes
+
+Data compatible - Yes, except
+  - DateTimeZone data updated to version 2008i
+
+Semantic compatible - Yes
+
+
+Deprecations since 1.5
+----------------------
+
+
+Bug fixes since 1.5
+-------------------
+- ISODateTimeFormat millisecond parsing broken
+  Millisecond parsing would parse 12:00:00.4 as 4 milliseconds rather
+  than 400 milliseconds
+
+- ISODateTimeFormat basic field parsing too lenient
+  The basic parsers in ISODateTimeFormat were too lenient
+  They have been changed to only accept the correct number of digits as
+  per the ISO-8601 standard. The non basic parsers are unaffected
+
+- DateTimeFormat.forFields(List) method can't handle immutable [1877843]
+  Fix so that the method does not throw an exception when an unmodifiable
+  list is passed in
+
+- Fixed offset time zones calculated incorrect periods
+  ZonedChronology.ZonedDuration.isPrecise() did not take into account
+  the decorated isPrecise() value. This meant that date fields for fixed
+  offset time zones were always considered precise. The result was periods
+  containing months and years when they should not have done.
+
+- ZonedChronology (regression from 1.4) [1887104]
+  Fix to roundFloor/roundCeiling
+  Bug affected DST cutover in Autumn for time fields (not date fields)
+  
+- Clarify Javadoc time zone formats
+  Time zone formats were incorrectly documented as 'Z' instead of 'ZZ'
+  Javadoc only change
+
+- Period formatting [2025928]
+  Formatting option printZeroRarelyFirst() did not work unless years
+  field was included.
+
+- DateTimeZone (regression from 1.4) [fix also available in v1.5.2]
+  Fix getOffsetFromLocal DST gap adjustment
+  Bug affected parsing of DST cutover in Autumn
+
+- Parsing (regression from 1.4) [1839440] [fix also available in v1.5.1]
+  Support parsing all upper-case and all lower-case text
+
+- Javadoc clarity enhancements [fix also available in v1.5.1]
+  - Constants in Years/Months/Weeks/Days/Hours/Minutes/Seconds etc.
+  - Period/Interval Object constructors
 </source>
 </p>
 </section>