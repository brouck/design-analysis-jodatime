From 0973b46039c4db0be3a969d36c220dee1e1fb4da Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 26 Sep 2011 13:43:16 +0100
Subject: [PATCH 01/35] Fix time-zone names in non-English locales on JDK1.6
 [3412910]

---
 RELEASE-NOTES.txt                             | 258 +-----------------
 pom.xml                                       |   2 +-
 .../org/joda/time/tz/DefaultNameProvider.java |  48 ++--
 .../java/org/joda/time/TestDateTimeZone.java  |  54 +++-
 4 files changed, 89 insertions(+), 273 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 6c4650faa..2740c1e9c 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -1,23 +1,15 @@
-Joda-Time version 2.0
+Joda-Time version 2.1
 ---------------------
 
 Joda-Time is a date and time handling library that seeks to replace the JDK
 Date and Calendar classes.
 
-This is the eighth release of Joda-Time.
+This is the ninth release of Joda-Time.
 This release contains enhancements, bug fixes and a time zone update.
 
 We require JDK 1.5 or later as features such as generics are used.
 It may be possible to use retroweaver to compile this under an earlier JDK but we haven't tried.
 
-******************************************************************************
- Compatibility
- The change in major version indicates compatibility issues.
- Please read the detailed notes below.
- If your code just _used_ Joda-Time and had no deprecation warnings then you
- will _probably_ see no issues. 
-******************************************************************************
-
 Joda-Time is licensed under the business-friendly Apache License Version 2.
 This is the same license as all of Apache, plus other open source projects such as Spring.
 The intent is to make the code available to the Java community with the minimum
@@ -27,138 +19,15 @@ of restrictions. If the license causes you problems please contact the mailing l
 ** http://joda-time.sourceforge.net/related.html **
 
 
-Enhancements since 1.6
+Enhancements since 2.0
 ----------------------
-- Move to Java 5, with generics
-  See compatability notes.
-
-- Appropriate Java Memory Model settings
-  The fields in the Base* classes, such as BaseDateTime and BaseDuration have been made volatile/final.
-  This was necessary to comply with the Java Memory Model to ensure correct immutable behaviour.
-  There should be no adverse effect from this change.
-
-- Add YearMonth, useful for credit card dates [1863090]
-
-- Add MonthDay, useful for birth dates without year
-
-- System clock can now be controlled by applications
-  DateTimeUtils.MillisProvider is now public
-
-- Word based period formatters available in multiple languages [1252708]
-  PeriodFormat provides a resource bundle based language formatter
-  Currently supported (via online translators) are English, German, Dutch,
-  French, Spanish and Portuguese. Corrections and additional languages welcome.
-
-- Static now() methods available on all major types [3134566]
-  These should be used instead of the constructors when creating the current date/time
-  Unlike the constructors, these methods validate any argument to ensure it is non-null
-
-- Static parse() methods available on all major types
-  These allow the formatter to be controlled
-  They do not always parse the same formats as the constructor taking an object
-
-- Parsing of month and day without year now handles February 29th
-  This is achieved by changing the default year from 1970 to 2000 when parsing
-  a month or day without a year. This behaviour can be controlled using the new
-  withDefaultYear() setting on the formatter (set to 1970 for the old behaviour).
-
-- Add static factory method millis() to Duration [2648777]
-  This checks for and returns the singleton value for ZERO
-
-- Add methods to Duration to get standard minutes, hours and days [2862884]
-
-- Support pluggable locale text and additional locales in JDK 6 [2690370]
-  Extra info accessed by reflection if JDK 6 used
-
-- Better error messages for invalid time zone ids [2781835]
-
-- Allow 'Z' and 'ZZ' in format patterns to parse 'Z' as '+00:00' [2827359]
-
-- Support parsing of date-time zone IDs like Europe/London
-
-- Support parsing of date-time zone names like "EST" and "British Summer Time"
-  These names are not unique, so the new API methods on the builder require you
-  to pass in a map listing all the names you want to be able to parse.
-  The existing method is unaltered and does not permit parsing.
 
-- Add DateTimeFormatter.withZoneUTC()
-  Provides easy way to set UTC, which is often required for parsing
 
-- Add DateTimeFormatter.parseLocalDate(), .parseLocalTime(), .parseLocalDateTime()
-  These parse the input string in the expected manner handing time zones and offsets.
-  For example, the LocalDate parse will parse any time or offset from the string, but
-  will completely ignore them when returning the actual LocalDate.
-
-- Add DateTime.withEarlierOffsetAtOverlap() .withLaterOffsetAtOverlap() [3192457]
-  Allow fine grained control of the offset during a DST overlap
-
-- Add DateTime.withTimeAtStartOfDay() [3304757]
-  Provide a simple, reliable way to get the start of day from DateTime.
-
-- Add LocalDate.toDate() [2465359]
-- Add LocalDateTime.toDate()
-  This provides a direct conversion to JDK Date which handles DST and
-  time zone data differences
-
-- Cache hash code in LocalDate
-  Enhances performance
-
-- DateTime constructors without seconds/millis [1982629]
-
-- DateTimeFormatter convenience methods taking an Appendable [2607923]
-
-- Add @FromString/@ToString annotations from joda-convert
-  This does NOT require the inclusion of joda-convert at runtime!
-
-- Reduce logging from ZoneInfoCompiler by adding a verbose flag
-
-- Better Javadoc of DateTimeZone.default behaviour
-
-
-Compatibility with 1.6
+Compatibility with 2.0
 ----------------------
-Binary compatible - Not fully, see below:
-Source compatible - Not fully, see below:
-
-Where possible, changes are binary compatible and source compatible.
-The primary binary incompatible changes are the removal of the deprecated methods and
-the addition of Comparable to ReadablePartial.
-Testing has included clirr, javap and manual testing of old files with new code.
-
-Deprecated methods removed:
-- Chronology.getISO()
-- Chronology.getISOUTC()
-- Chronology.getISO(DateTimeZone)
-- Chronology.getGJ()
-- Chronology.getGJUTC()
-- Chronology.getGJ(DateTimeZone)
-- Chronology.getGregorian()
-- Chronology.getGregorianUTC()
-- Chronology.getGregorian(DateTimeZone)
-- Chronology.getJulian()
-- Chronology.getJulianUTC()
-- Chronology.getJulian(DateTimeZone)
-- Chronology.getBuddhist()
-- Chronology.getBuddhistUTC()
-- Chronology.getBuddhist(DateTimeZone)
-- Chronology.getCoptic()
-- Chronology.getCopticUTC()
-- Chronology.getCoptic(DateTimeZone)
-
-ReadablePartial has had the Comparable interface added (was previously just Javadoc).
-Any implementation that extended AbstractPartial should have no problems, however any implementation
-that extended ReadablePartial directly without implementing Comparable will be incompatible.
-
-Any direct implementations of ReadableInstant or ReadableDuration are not source compatible.
-This is because of the additional generics in Comparable.
-Your code will be source compatible if you extended AbstractInstant or AbstractDuration.
-This minor source incompatibility for a very few users was deemed to be the best balance of the various
-difficult options that generics offers.
-As mentioned above, erasure ensures that this source incompatibility is *not* a binary compatibility.
+Binary compatible - Yes
 
-Note that not all deprecated elements have been removed.
-Some methods and classes have been retained simply because the potential pain of binary incompatability
-is greater than the gain of removing the deprecations.
+Source compatible - Yes
 
 Serialization compatible - Yes
 
@@ -166,122 +35,19 @@ Data compatible - Yes, except
   - DateTimeZone data updated to version 2011h
 
 Semantic compatible - Yes, except
-Previously, DateTimeZone.forID matched time zone names case-insensitively, now it is case-sensitive
+ Time-zone names now return correct results on JDK1.6 for non-English locales
 
-Previously, parsing a string where only the month and/or day is present would use 1970 as
-the base year. This failed to handle February 29th. The new behaviour is as follows:
-If the parse includes a field with a duration between months and days inclusive and does not include
-any field larger than months, then the default year is changed to the value of getDefaultYear() on
-DateTimeFormatter, which is the year 2000 by default.
-In effect, this means that a pattern "ddMMM" which would previously have parsed to dates
-in 1970 will now parse to dates in 2000 unless further customised.
-The old behaviour can be simulated by calling withDefautYear(1970) on the formatter.
 
-Previously, calling various methods during a daylight savings overlap would change the offset.
-Now, most methods (such as withMillis/withSeconds/withMinutes/...) will retain the offset wherever possible.
-
-Previously, calling DateTimeZone.getOffsetFromLocal during a daylight savings overlap chose the
-earlier instant in the Western hemisphere and the later instant in the Eastern hemisphere.
-Now, it always returns the earlier instant (summer time) during an overlap.
-This affects the constructor of DateTime and other methods.
-
-Previously, DateTimeZone.getMillisKeepLocal used DateTimeZone.getOffsetFromLocal, now it uses
-DateTimeZone.convertUTCToLocal and DateTimeZone.convertLocalToUTC retaining the offset where possible
-
-Previously, the internals of DateTimeParserBucket linked the parsed offset and zone.
-This has now changed so that they are independent to allow the parsing of time-zone IDs.
-If you implemented the DateTimeParser interface (unlikely), you should re-test your logic.
-
-Previously, some parses of mixed weekyear and month formats would yield a result about a year out
-Now, most (but not all) of these give a more appropriate result
-
-Previously, java.util.TimeZone "MET" was incorrectly mapped to "Asia/Tehran".
-It is now mapped to "CET" (Central European Time).
-
-Previously, java.util.TimeZone "EET", "WET", "ECT" were mapped to European cities.
-They are now mapped to "EET", "WET" and "CET" respectively.
-
-Previously, java.util.TimeZone "IET", "AGT", "IST" and "VST" were mapped to old time-zone IDs.
-They are now mapped to the newer IDs "America/Indiana/Indianapolis", "America/Argentina/Buenos_Aires", "Asia/Kolkata" and "Asia/Ho_Chi_Minh".
-
-
-Deprecations since 1.6
+Deprecations since 2.0
 ----------------------
-- DateTimeFormatter.getChronolgy() [2783325]
-  Incorrect spelling - new method DateTimeFormatter.getChronology()
+None
 
 
 Bug fixes since 1.6
 -------------------
-- LocalTime.fromDateFields()
-  Now handles times based on java.util.Date before 1970
-
-- LocalDate.toInterval() [2487417]
-  Now handles time zones which have no midnight at DST cutover
-
-- DateTimeZone.convertLocalToUTC [3102760,2182444,2553453]
-  New method now retains the offset wherever possible during calculations
-  This affects higher methods like withHourOfDay/withMinuteOfHour/withSecondOfMinute/withMillisOfSecond
-  which now do not change offset when called within a DST overlap
-
-- DateTimeZone.convertLocalToUTC [2903029]
-  Now handles date after last ever DST change
-
-- DateTimeZone.getOffsetFromLocal [2952991]
-  The behaviour during DST overlaps is now defined to always return the earlier instant
-  which is normally known as daylight or summer time. Previously, the result varied by hemisphere
-  This affects the constructor of DateTime and other methods
-
-- DateTimeZone.getMillisKeepLocal
-  The behaviour now retains the offset when changing zones where possible
-  This affects DateTime.withZoneRetainFields and MutableDateTime.setZoneRetainFields
-
-- DateTimeZone.getDefault [3048468,3056104]
-  Handle missing user.timezone system property on Android that resulted in stack overflow
-
-- DateTimeZone.forTimeZone [3216471]
-  Time-zone ID "MET" from java.util.TimeZone is now mapped correctly.
-  See compatibility notes above.
-
-- Duration.toString
-  Fixed to work correctly for negative values
-
-- Duraton.toPeriod(), new Period(long), new MutablePeriod(long) [3264409]
-  Fixed to obey Javadoc.
-  Previously, they didn't obey the Javadoc if the default time-zone had no daylight savings.
-
-- Period formatting concurrency [2820871]
-  Fix possible concurrency hole in PeriodFormatBuilder.Separator
-
-- Period formatter builder append(PeriodFormatter) did not handle some case [2495455]
-  If the appended formatter contained a separator as the first element, it failed
-
-- Classloading CachedDateTimeZone could invalidate state [2935625]
-  Default time zone now lazily loaded
-
-- DateTimeUtils shared static variable now volatile [2986043]
-
-- DateTimeZone.forID(String) now case-sensitive
-  Previously, it was case-insensitive
-
-- Handle broken serialization in other tools [3117678]
-  Some tools can't handle the joda-time stub serialization, kludge a fix for them
-
-- Standard DateTimeFieldType implements hashCode and equals for stability across serialization
-
-- Conversion from parsed values to a date-time handles weird sets of fields better [3161586]
-  This change is mostly for combinations like weekyear-month-week
-  The new code doesn't handle all combinations perfectly, but its better than it was
-
-- Time zone compiler now handles 24:00 [2804258]
-
-- Time zone compiler now handles non-UTC better
-
-- Remove OSGi BundleExecutionEnvironment [3175068,3175612]
-
-- Javadoc fix in Months [2721880]
-
-- Javadoc fix in PeriodFormatterBuilder [3100939]
+- Time-zone names [3412910]
+  Names now returned in locales other than English
+  The names may differ between JDK1.5 and 1.6 due to the underlying JDK data
 
 
 Feedback
diff --git a/pom.xml b/pom.xml
index 2fb87273a..0f9b95159 100644
--- a/pom.xml
+++ b/pom.xml
@@ -8,7 +8,7 @@
   <artifactId>joda-time</artifactId>
   <packaging>jar</packaging>
   <name>Joda time</name>
-  <version>2.0</version>
+  <version>2.1.alpha</version>
   <description>Date and time library to replace JDK date handling</description>
   <url>http://joda-time.sourceforge.net</url>
   <issueManagement>
diff --git a/src/main/java/org/joda/time/tz/DefaultNameProvider.java b/src/main/java/org/joda/time/tz/DefaultNameProvider.java
index 24423f8ed..89e673982 100644
--- a/src/main/java/org/joda/time/tz/DefaultNameProvider.java
+++ b/src/main/java/org/joda/time/tz/DefaultNameProvider.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2009 Stephen Colebourne
+ *  Copyright 2001-2011 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -62,25 +62,37 @@ public String getName(Locale locale, String id, String nameKey) {
         Map<String, Object> byNameKeyCache = byIdCache.get(id);
         if (byNameKeyCache == null) {
             byIdCache.put(id, byNameKeyCache = createCache());
-            String[][] zoneStrings = DateTimeUtils.getDateFormatSymbols(locale).getZoneStrings();
-            for (int i=0; i<zoneStrings.length; i++) {
-                String[] set = zoneStrings[i];
-                if (set != null && set.length == 5 && id.equals(set[0])) {
-                    byNameKeyCache.put(set[2], new String[] {set[2], set[1]});
-                    // need to handle case where summer and winter have the same
-                    // abbreviation, such as EST in Australia [1716305]
-                    // we handle this by appending "-Summer", cf ZoneInfoCompiler
-                    if (set[2].equals(set[4])) {
-                        byNameKeyCache.put(set[4] + "-Summer", new String[] {set[4], set[3]});
-                    } else {
-                        byNameKeyCache.put(set[4], new String[] {set[4], set[3]});
-                    }
-                    break;
-                }
+            
+            String[][] zoneStringsEn = DateTimeUtils.getDateFormatSymbols(Locale.ENGLISH).getZoneStrings();
+            String[] setEn = null;
+            for (String[] strings : zoneStringsEn) {
+              if (strings != null && strings.length == 5 && id.equals(strings[0])) {
+                setEn = strings;
+                break;
+              }
+            }
+            String[][] zoneStringsLoc = DateTimeUtils.getDateFormatSymbols(locale).getZoneStrings();
+            String[] setLoc = null;
+            for (String[] strings : zoneStringsLoc) {
+              if (strings != null && strings.length == 5 && id.equals(strings[0])) {
+                setLoc = strings;
+                break;
+              }
+            }
+            
+            if (setEn != null && setLoc != null) {
+              byNameKeyCache.put(setEn[2], new String[] {setLoc[2], setLoc[1]});
+              // need to handle case where summer and winter have the same
+              // abbreviation, such as EST in Australia [1716305]
+              // we handle this by appending "-Summer", cf ZoneInfoCompiler
+              if (setEn[2].equals(setEn[4])) {
+                  byNameKeyCache.put(setEn[4] + "-Summer", new String[] {setLoc[4], setLoc[3]});
+              } else {
+                  byNameKeyCache.put(setEn[4], new String[] {setLoc[4], setLoc[3]});
+              }
             }
         }
-
-        return (String[])byNameKeyCache.get(nameKey);
+        return (String[]) byNameKeyCache.get(nameKey);
     }
 
     private HashMap createCache() {
diff --git a/src/test/java/org/joda/time/TestDateTimeZone.java b/src/test/java/org/joda/time/TestDateTimeZone.java
index a6eaac3bc..5ca0ba1c7 100644
--- a/src/test/java/org/joda/time/TestDateTimeZone.java
+++ b/src/test/java/org/joda/time/TestDateTimeZone.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2006 Stephen Colebourne
+ *  Copyright 2001-2011 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -20,6 +20,7 @@
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
 import java.io.PrintStream;
+import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
 import java.security.AllPermission;
 import java.security.CodeSource;
@@ -28,6 +29,7 @@
 import java.security.Permissions;
 import java.security.Policy;
 import java.security.ProtectionDomain;
+import java.text.DateFormatSymbols;
 import java.util.HashSet;
 import java.util.LinkedHashMap;
 import java.util.Locale;
@@ -638,45 +640,81 @@ public void testGetNameKey() {
         assertEquals("GMT", zone.getNameKey(TEST_TIME_WINTER));
     }
 
+    static final boolean JDK6;
+    static {
+      boolean jdk6 = true;
+      try {
+        DateFormatSymbols.class.getMethod("getInstance", new Class[] {Locale.class});
+      } catch (Exception ex) {
+        jdk6 = false;
+      } 
+      JDK6 = jdk6;
+    }
+
     public void testGetShortName() {
         DateTimeZone zone = DateTimeZone.forID("Europe/London");
         assertEquals("BST", zone.getShortName(TEST_TIME_SUMMER));
         assertEquals("GMT", zone.getShortName(TEST_TIME_WINTER));
         assertEquals("BST", zone.getShortName(TEST_TIME_SUMMER, Locale.ENGLISH));
     }
-            
+
+    public void testGetShortName_berlin() {
+        DateTimeZone berlin = DateTimeZone.forID("Europe/Berlin");
+        assertEquals("CET", berlin.getShortName(TEST_TIME_WINTER, Locale.ENGLISH));
+        assertEquals("CEST", berlin.getShortName(TEST_TIME_SUMMER, Locale.ENGLISH));
+        if (JDK6) {
+          assertEquals("MEZ", berlin.getShortName(TEST_TIME_WINTER, Locale.GERMAN));
+          assertEquals("MESZ", berlin.getShortName(TEST_TIME_SUMMER, Locale.GERMAN));
+        } else {
+          assertEquals("CET", berlin.getShortName(TEST_TIME_WINTER, Locale.GERMAN));
+          assertEquals("CEST", berlin.getShortName(TEST_TIME_SUMMER, Locale.GERMAN));
+        }
+    }
+
     public void testGetShortNameProviderName() {
         assertEquals(null, DateTimeZone.getNameProvider().getShortName(null, "Europe/London", "BST"));
         assertEquals(null, DateTimeZone.getNameProvider().getShortName(Locale.ENGLISH, null, "BST"));
         assertEquals(null, DateTimeZone.getNameProvider().getShortName(Locale.ENGLISH, "Europe/London", null));
         assertEquals(null, DateTimeZone.getNameProvider().getShortName(null, null, null));
     }
-    
+
     public void testGetShortNameNullKey() {
         DateTimeZone zone = new MockDateTimeZone("Europe/London");
         assertEquals("Europe/London", zone.getShortName(TEST_TIME_SUMMER, Locale.ENGLISH));
     }
-    
+
     public void testGetName() {
         DateTimeZone zone = DateTimeZone.forID("Europe/London");
         assertEquals("British Summer Time", zone.getName(TEST_TIME_SUMMER));
         assertEquals("Greenwich Mean Time", zone.getName(TEST_TIME_WINTER));
         assertEquals("British Summer Time", zone.getName(TEST_TIME_SUMMER, Locale.ENGLISH));
-        
     }
-    
+
+    public void testGetName_berlin() {
+      DateTimeZone berlin = DateTimeZone.forID("Europe/Berlin");
+      assertEquals("Central European Time", berlin.getName(TEST_TIME_WINTER, Locale.ENGLISH));
+      assertEquals("Central European Summer Time", berlin.getName(TEST_TIME_SUMMER, Locale.ENGLISH));
+      if (JDK6) {
+        assertEquals("Mitteleurop\u00e4ische Zeit", berlin.getName(TEST_TIME_WINTER, Locale.GERMAN));
+        assertEquals("Mitteleurop\u00e4ische Sommerzeit", berlin.getName(TEST_TIME_SUMMER, Locale.GERMAN));
+      } else {
+        assertEquals("Zentraleurop\u00e4ische Zeit", berlin.getName(TEST_TIME_WINTER, Locale.GERMAN));
+        assertEquals("Zentraleurop\u00e4ische Sommerzeit", berlin.getName(TEST_TIME_SUMMER, Locale.GERMAN));
+      }
+  }
+
     public void testGetNameProviderName() {
         assertEquals(null, DateTimeZone.getNameProvider().getName(null, "Europe/London", "BST"));
         assertEquals(null, DateTimeZone.getNameProvider().getName(Locale.ENGLISH, null, "BST"));
         assertEquals(null, DateTimeZone.getNameProvider().getName(Locale.ENGLISH, "Europe/London", null));
         assertEquals(null, DateTimeZone.getNameProvider().getName(null, null, null));
     }
-    
+
     public void testGetNameNullKey() {
         DateTimeZone zone = new MockDateTimeZone("Europe/London");
         assertEquals("Europe/London", zone.getName(TEST_TIME_SUMMER, Locale.ENGLISH));
     }
-    
+
     static class MockDateTimeZone extends DateTimeZone {
         public MockDateTimeZone(String id) {
             super(id);

From 7bdb324b061d051a8ad03c6ae27de755a53e54a0 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 26 Sep 2011 13:50:52 +0100
Subject: [PATCH 02/35] Javadoc fix to MutablePeriod [3413869]

---
 RELEASE-NOTES.txt                              | 2 ++
 src/main/java/org/joda/time/MutablePeriod.java | 6 +++---
 2 files changed, 5 insertions(+), 3 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 2740c1e9c..b978098ac 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -49,6 +49,8 @@ Bug fixes since 1.6
   Names now returned in locales other than English
   The names may differ between JDK1.5 and 1.6 due to the underlying JDK data
 
+- Javadoc fix to MutablePeriod [3413869]
+
 
 Feedback
 --------
diff --git a/src/main/java/org/joda/time/MutablePeriod.java b/src/main/java/org/joda/time/MutablePeriod.java
index 78db79171..5ae6e9406 100644
--- a/src/main/java/org/joda/time/MutablePeriod.java
+++ b/src/main/java/org/joda/time/MutablePeriod.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2010 Stephen Colebourne
+ *  Copyright 2001-2011 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -540,7 +540,7 @@ public void setPeriod(long startInstant, long endInstant) {
      * 
      * @param startInstant  interval start, in milliseconds
      * @param endInstant  interval end, in milliseconds
-     * @param chrono  the chronology to use, not null
+     * @param chrono  the chronology to use, null means ISO chronology
      * @throws ArithmeticException if the set exceeds the capacity of the period
      */
     public void setPeriod(long startInstant, long endInstant, Chronology chrono) {
@@ -603,7 +603,7 @@ public void setPeriod(long duration) {
      * available precise field.
      * 
      * @param duration  the duration, in milliseconds
-     * @param chrono  the chronology to use, not null
+     * @param chrono  the chronology to use, null means ISO chronology
      * @throws ArithmeticException if the set exceeds the capacity of the period
      */
     public void setPeriod(long duration, Chronology chrono) {

From 5a59a1f60df3346bc8db8d893795237edb581d66 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 26 Sep 2011 14:02:10 +0100
Subject: [PATCH 03/35] Make tests pass using non-English default locale

---
 src/test/java/org/joda/time/TestAllPackages.java         | 6 +++++-
 src/test/java/org/joda/time/TestMonthDay_Properties.java | 7 ++++++-
 2 files changed, 11 insertions(+), 2 deletions(-)

diff --git a/src/test/java/org/joda/time/TestAllPackages.java b/src/test/java/org/joda/time/TestAllPackages.java
index 5c98f994b..2395dd540 100644
--- a/src/test/java/org/joda/time/TestAllPackages.java
+++ b/src/test/java/org/joda/time/TestAllPackages.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2011 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -15,6 +15,7 @@
  */
 package org.joda.time;
 
+import java.util.Locale;
 import java.util.TimeZone;
 
 import junit.framework.Test;
@@ -50,6 +51,9 @@ public static void main(String args[]) {
         // setup a time zone other than one tester is in
         TimeZone.setDefault(TimeZone.getTimeZone("Asia/Seoul"));
         
+        // setup a locale other than one the tester is in
+        Locale.setDefault(new Locale("th", "TH"));
+        
         // run tests
         String[] testCaseName = {
             TestAllPackages.class.getName()
diff --git a/src/test/java/org/joda/time/TestMonthDay_Properties.java b/src/test/java/org/joda/time/TestMonthDay_Properties.java
index 6a39d1893..9e6ba086e 100644
--- a/src/test/java/org/joda/time/TestMonthDay_Properties.java
+++ b/src/test/java/org/joda/time/TestMonthDay_Properties.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2010 Stephen Colebourne
+ *  Copyright 2001-2011 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -46,6 +46,7 @@
         + 28L * DateTimeConstants.MILLIS_PER_MINUTE;
         
     private DateTimeZone zone = null;
+    private Locale locale = null;
 
     public static void main(String[] args) {
         junit.textui.TestRunner.run(suite());
@@ -62,6 +63,8 @@ public TestMonthDay_Properties(String name) {
     protected void setUp() throws Exception {
         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);
         zone = DateTimeZone.getDefault();
+        locale = Locale.getDefault();
+        Locale.setDefault(Locale.UK);
         DateTimeZone.setDefault(DateTimeZone.UTC);
     }
 
@@ -69,6 +72,8 @@ protected void tearDown() throws Exception {
         DateTimeUtils.setCurrentMillisSystem();
         DateTimeZone.setDefault(zone);
         zone = null;
+        Locale.setDefault(locale);
+        locale = null;
     }
 
     //-----------------------------------------------------------------------

From e2d472ba27e96185c13868f5c1b638a707a50e3b Mon Sep 17 00:00:00 2001
From: Vidar Larsen <vlarsen@comoyo.com>
Date: Thu, 15 Sep 2011 13:25:51 +0200
Subject: [PATCH 04/35] Format the endpoints of an interval in toString using
 ISODateTimeFormat.dateTime(), to not lose the timezone

---
 src/main/java/org/joda/time/base/AbstractInterval.java      | 2 +-
 src/test/java/org/joda/time/TestInterval_Basics.java        | 2 +-
 src/test/java/org/joda/time/TestMutableInterval_Basics.java | 2 +-
 3 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/src/main/java/org/joda/time/base/AbstractInterval.java b/src/main/java/org/joda/time/base/AbstractInterval.java
index 26ec67d21..d4cf99e2d 100644
--- a/src/main/java/org/joda/time/base/AbstractInterval.java
+++ b/src/main/java/org/joda/time/base/AbstractInterval.java
@@ -480,7 +480,7 @@ public int hashCode() {
      * @return re-parsable string
      */
     public String toString() {
-        DateTimeFormatter printer = ISODateTimeFormat.dateHourMinuteSecondFraction();
+        DateTimeFormatter printer = ISODateTimeFormat.dateTime();
         printer = printer.withChronology(getChronology());
         StringBuffer buf = new StringBuffer(48);
         printer.printTo(buf, getStartMillis());
diff --git a/src/test/java/org/joda/time/TestInterval_Basics.java b/src/test/java/org/joda/time/TestInterval_Basics.java
index 13704c8dd..a2e6119e8 100644
--- a/src/test/java/org/joda/time/TestInterval_Basics.java
+++ b/src/test/java/org/joda/time/TestInterval_Basics.java
@@ -1037,7 +1037,7 @@ public void testToString() {
         DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10, DateTimeZone.UTC);
         DateTime dt2 = new DateTime(2005, 8, 13, 12, 14, 16, 18, DateTimeZone.UTC);
         Interval test = new Interval(dt1, dt2);
-        assertEquals("2004-06-09T07:08:09.010/2005-08-13T12:14:16.018", test.toString());
+        assertEquals("2004-06-09T07:08:09.010Z/2005-08-13T12:14:16.018Z", test.toString());
     }
 
     //-----------------------------------------------------------------------
diff --git a/src/test/java/org/joda/time/TestMutableInterval_Basics.java b/src/test/java/org/joda/time/TestMutableInterval_Basics.java
index dabcddbae..2a9de279a 100644
--- a/src/test/java/org/joda/time/TestMutableInterval_Basics.java
+++ b/src/test/java/org/joda/time/TestMutableInterval_Basics.java
@@ -468,7 +468,7 @@ public void testToString() {
         DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10, DateTimeZone.UTC);
         DateTime dt2 = new DateTime(2005, 8, 13, 12, 14, 16, 18, DateTimeZone.UTC);
         MutableInterval test = new MutableInterval(dt1, dt2);
-        assertEquals("2004-06-09T07:08:09.010/2005-08-13T12:14:16.018", test.toString());
+        assertEquals("2004-06-09T07:08:09.010Z/2005-08-13T12:14:16.018Z", test.toString());
     }
 
     //-----------------------------------------------------------------------

From f52ae28dc5a2c90abea2721d12e03e66ec7e0381 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 26 Sep 2011 14:46:04 +0100
Subject: [PATCH 05/35] Add time-zone offset to Interval string
 [https://github.com/JodaOrg/joda-time/pull/2]

---
 RELEASE-NOTES.txt                                        | 6 +++++-
 src/main/java/org/joda/time/base/AbstractInterval.java   | 6 ++++--
 src/test/java/org/joda/time/TestInterval_Basics.java     | 9 ++++++++-
 .../java/org/joda/time/TestMutableInterval_Basics.java   | 2 +-
 4 files changed, 18 insertions(+), 5 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index b978098ac..978a1de19 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -37,18 +37,22 @@ Data compatible - Yes, except
 Semantic compatible - Yes, except
  Time-zone names now return correct results on JDK1.6 for non-English locales
 
+ Interval/MutableInterval toString() now contains the time-zone offset
+
 
 Deprecations since 2.0
 ----------------------
 None
 
 
-Bug fixes since 1.6
+Bug fixes since 2.0
 -------------------
 - Time-zone names [3412910]
   Names now returned in locales other than English
   The names may differ between JDK1.5 and 1.6 due to the underlying JDK data
 
+- Interval/MutableInterval toString() now contains the time-zone offset [https://github.com/JodaOrg/joda-time/pull/2]
+
 - Javadoc fix to MutablePeriod [3413869]
 
 
diff --git a/src/main/java/org/joda/time/base/AbstractInterval.java b/src/main/java/org/joda/time/base/AbstractInterval.java
index d4cf99e2d..2d076d03a 100644
--- a/src/main/java/org/joda/time/base/AbstractInterval.java
+++ b/src/main/java/org/joda/time/base/AbstractInterval.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2006 Stephen Colebourne
+ *  Copyright 2001-2011 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -476,8 +476,10 @@ public int hashCode() {
 
     /**
      * Output a string in ISO8601 interval format.
+     * <p>
+     * From version 2.1, the string includes the time zone offset.
      *
-     * @return re-parsable string
+     * @return re-parsable string (in the default zone)
      */
     public String toString() {
         DateTimeFormatter printer = ISODateTimeFormat.dateTime();
diff --git a/src/test/java/org/joda/time/TestInterval_Basics.java b/src/test/java/org/joda/time/TestInterval_Basics.java
index a2e6119e8..02050882a 100644
--- a/src/test/java/org/joda/time/TestInterval_Basics.java
+++ b/src/test/java/org/joda/time/TestInterval_Basics.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2006 Stephen Colebourne
+ *  Copyright 2001-2011 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -1040,6 +1040,13 @@ public void testToString() {
         assertEquals("2004-06-09T07:08:09.010Z/2005-08-13T12:14:16.018Z", test.toString());
     }
 
+    public void testToString_reparse() {
+        DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10, DateTimeZone.getDefault());
+        DateTime dt2 = new DateTime(2005, 8, 13, 12, 14, 16, 18, DateTimeZone.getDefault());
+        Interval test = new Interval(dt1, dt2);
+        assertEquals(test, new Interval(test.toString()));
+    }
+
     //-----------------------------------------------------------------------
     public void testWithChronology1() {
         Interval base = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS);
diff --git a/src/test/java/org/joda/time/TestMutableInterval_Basics.java b/src/test/java/org/joda/time/TestMutableInterval_Basics.java
index 2a9de279a..514df6796 100644
--- a/src/test/java/org/joda/time/TestMutableInterval_Basics.java
+++ b/src/test/java/org/joda/time/TestMutableInterval_Basics.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2006 Stephen Colebourne
+ *  Copyright 2001-2011 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

From 7b145b04eac082d537b515c1a60d940fc4c3cda0 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 26 Sep 2011 16:20:14 +0100
Subject: [PATCH 06/35] Update FAQ

---
 src/site/xdoc/faq.xml | 60 +++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 60 insertions(+)

diff --git a/src/site/xdoc/faq.xml b/src/site/xdoc/faq.xml
index afd3127f4..2fc8ae6ce 100644
--- a/src/site/xdoc/faq.xml
+++ b/src/site/xdoc/faq.xml
@@ -14,6 +14,8 @@
 <p>
 Some common questions about Joda-Time are answered here.
 <ul>
+<li><a href="#illegalinstant">What does "Illegal instant due to time zone offset transition" mean?</a></li>
+<li><a href="#rulesoutofdate">Are the time-zone rules are out of date?</a></li>
 <li><a href="#newzonerules">Does Joda-Time support the 2007 US and Canada time zone rules?</a></li>
 <li><a href="#datediff">How do I calculate the difference between two dates?</a></li>
 <li><a href="#iso">What is ISO8601?</a></li>
@@ -28,11 +30,57 @@ Some common questions about Joda-Time are answered here.
 <li><a href="#numberclasses">There are lots of classes, do I need to learn them all?</a></li>
 <li><a href="#tzreimplement">Why reimplement TimeZone?</a></li>
 <li><a href="#joda">What is with the name 'joda'?</a></li>
+<li><a href="#pronounce">How do you pronounce 'joda'?</a></li>
 </ul>
 Question not answered? Suggest one via the <a href="mail-lists.html">mailing list</a>.<br></br>
 </p>
 
 
+<a name="illegalinstant" />
+<subsection name="What does 'Illegal instant due to time zone offset transition' mean?">
+<p>
+Joda-Time only allows the key classes to store valid date-times.
+For example, 31st February is not a valid date so it can't be stored (except in <code>Partial</code>).
+</p>
+<p>
+The same principle of valid date-times applies to daylight savings time (DST).
+In many places DST is used, where the local clock moves forward by an hour in spring and back by an hour in autumn/fall.
+This means that in spring, there is a "gap" where a local time does not exist.
+</p>
+<p>
+The error "Illegal instant due to time zone offset transition" refers to this gap.
+It means that your application tried to create a date-time inside the gap - a time that did not exist.
+Since Joda-Time objects must be valid, this is not allowed.
+</p>
+<p>
+Possible solutions may be as follows:<br />
+Use <code>LocalDateTime</code>, as all local date-times are valid.<br />
+When converting a <code>LocalDate</code> to a <code>DateTime</code>, then use <code>toDateTimeAsStartOfDay()</code>
+as this handles and manages any gaps.<br />
+When parsing, use <code>parseLocalDateTime()</code> if the string being parsed has no time-zone.
+</p>
+<p>
+Not all cases of this error have a simple solution.
+Hopefully this FAQ has explained what the error means allowing you to work out what the correct solution will be.
+</p>
+</subsection>
+
+
+<a name="rulesoutofdate" />
+<subsection name="Are the time-zone rules are out of date?">
+<p>
+Joda-Time releases only occur infrequently.
+But time-zone changes happen all the time.
+As such, it may well be that the rules are out of date.
+</p>
+<p>
+Between the Joda-Time releases, it is your responsibility to update the jar file with the latest time-zone rules.
+You must update <i>both</i> the JDK and Joda-Time rules to the same version at the same time to avoid problems.
+See the <a href="tz_update.html">update time-zone rules guide</a> for more details.
+</p>
+</subsection>
+
+
 <a name="newzonerules" />
 <subsection name="Does Joda-Time support the 2007 US and Canada time zone rules?">
 <p>
@@ -284,6 +332,18 @@ It is not an acronym.
 </subsection>
 
 
+<a name="pronounce" />
+<subsection name="How do you pronounce 'joda'?">
+<p>
+The 'J' in 'Joda' is pronounced the same as the 'J' in <a href="http://dictionary.reference.com/browse/Java">'Java'</a>.
+The project is not capable of wielding a <a href="http://en.wikipedia.org/wiki/Yoda">light saber</a> and is thus pronounced differently.
+</p>
+<p>
+<br />
+</p>
+</subsection>
+
+
 </section>
 </body>
 </document>

From 17a60c9a7253d9a8fce6afe2ce46bea78ac53ebe Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 26 Sep 2011 22:40:39 +0100
Subject: [PATCH 07/35] Add note about JAXB to related projects

---
 src/site/xdoc/related.xml | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/src/site/xdoc/related.xml b/src/site/xdoc/related.xml
index 28321ea15..08705578b 100644
--- a/src/site/xdoc/related.xml
+++ b/src/site/xdoc/related.xml
@@ -30,6 +30,8 @@ Provides classes to handle claculation of holidays.</li>
 Support for the RFC2445 recurrence specification, as found in iCal.</li>
 <li><a href="http://www.datanucleus.org/plugins/store.types.jodatime.html">DataNucleus support</a>
 A library providing persistence via the DataNucleus platform.</li>
+<li><a href="http://blog.bdoughan.com/2011/05/jaxb-and-joda-time-dates-and-times.html">JAXB</a>
+Notes on Joda-Time and JAXB.</li>
 </ul>
 <p>
 If your open source library provides a value added feature on top of Joda-Time, then let us know!

From a92450e88df85d6b7a0fa53517da46286c24f53f Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 23 Oct 2011 13:07:54 +0100
Subject: [PATCH 08/35] Fix zone id parsing for ids like America/Dawson_Creek
 [3427389]

---
 RELEASE-NOTES.txt                                      |  3 +++
 .../org/joda/time/format/DateTimeFormatterBuilder.java | 10 ++++++++--
 .../joda/time/format/TestDateTimeFormatterBuilder.java | 10 ++++++++++
 3 files changed, 21 insertions(+), 2 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 978a1de19..e47e1deef 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -51,6 +51,9 @@ Bug fixes since 2.0
   Names now returned in locales other than English
   The names may differ between JDK1.5 and 1.6 due to the underlying JDK data
 
+- Time zone id parsing fixed for some longer time zones [3427389]
+  Time zones like "America/Dawson_Creek" were not parsed as "America/Dawson" was matched first
+
 - Interval/MutableInterval toString() now contains the time-zone offset [https://github.com/JodaOrg/joda-time/pull/2]
 
 - Javadoc fix to MutablePeriod [3413869]
diff --git a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java
index 558a5864a..ebb4b0871 100644
--- a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java
+++ b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java
@@ -2539,12 +2539,18 @@ public int estimateParsedLength() {
 
         public int parseInto(DateTimeParserBucket bucket, String text, int position) {
             String str = text.substring(position);
+            String best = null;
             for (String id : ALL_IDS) {
                 if (str.startsWith(id)) {
-                    bucket.setZone(DateTimeZone.forID(id));
-                    return position + id.length();
+                	if (best == null || id.length() > best.length()) {
+                		best = id;
+                	}
                 }
             }
+            if (best != null) {
+                bucket.setZone(DateTimeZone.forID(best));
+                return position + best.length();
+            }
             return ~position;
         }
     }
diff --git a/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java b/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java
index 31aa53c04..54033bb42 100644
--- a/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java
+++ b/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java
@@ -252,6 +252,16 @@ public void test_printParseZoneParis() {
         assertEquals(dt, f.withOffsetParsed().parseDateTime("2007-03-04 12:30 Europe/Paris"));
     }
 
+    public void test_printParseZoneDawsonCreek() {  // clashes with shorter Dawson
+        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()
+            .appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneId();
+        DateTimeFormatter f = bld.toFormatter();
+        
+        DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forID("America/Dawson_Creek"));
+        assertEquals("2007-03-04 12:30 America/Dawson_Creek", f.print(dt));
+        assertEquals(dt, f.parseDateTime("2007-03-04 12:30 America/Dawson_Creek"));
+    }
+
     public void test_printParseOffset() {
         DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()
             .appendPattern("yyyy-MM-dd HH:mm ").appendTimeZoneOffset("Z", true, 2, 2);

From 82c5e4f9550e4df36e07b66f35f7c3e9d7eb5eba Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 24 Oct 2011 00:16:21 +0100
Subject: [PATCH 09/35] Ambiguous date-time when in zone with offset of 00:00
 [3424669]

---
 RELEASE-NOTES.txt                             | 12 ++++++---
 src/main/java/org/joda/time/DateTimeZone.java |  2 +-
 .../joda/time/TestDateTimeZoneCutover.java    | 25 +++++++++++++++++--
 3 files changed, 33 insertions(+), 6 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index e47e1deef..d5157e348 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -32,12 +32,14 @@ Source compatible - Yes
 Serialization compatible - Yes
 
 Data compatible - Yes, except
-  - DateTimeZone data updated to version 2011h
+ - DateTimeZone data updated to version 2011h
 
 Semantic compatible - Yes, except
- Time-zone names now return correct results on JDK1.6 for non-English locales
+ -  Date-time for time-zones with DST based on an offset of 00:00 now pick summer time when ambiguous
 
- Interval/MutableInterval toString() now contains the time-zone offset
+ -  Time-zone names now return correct results on JDK1.6 for non-English locales
+
+ - Interval/MutableInterval toString() now contains the time-zone offset
 
 
 Deprecations since 2.0
@@ -47,6 +49,10 @@ None
 
 Bug fixes since 2.0
 -------------------
+- Ambiguous date-time when in zone with offset of 00:00 [3424669]
+  A date-time constructor with an ambiguous time due to DST should choose summer time
+  but for a zone with an offset of 00:00 it chose winter time
+
 - Time-zone names [3412910]
   Names now returned in locales other than English
   The names may differ between JDK1.5 and 1.6 due to the underlying JDK data
diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java
index 855cad059..ec05941f8 100644
--- a/src/main/java/org/joda/time/DateTimeZone.java
+++ b/src/main/java/org/joda/time/DateTimeZone.java
@@ -897,7 +897,7 @@ public int getOffsetFromLocal(long instantLocal) {
                     return offsetLocal;
                 }
             }
-        } else if (offsetLocal > 0) {
+        } else if (offsetLocal >= 0) {
             long prev = previousTransition(instantAdjusted);
             if (prev < instantAdjusted) {
                 int offsetPrev = getOffset(prev);
diff --git a/src/test/java/org/joda/time/TestDateTimeZoneCutover.java b/src/test/java/org/joda/time/TestDateTimeZoneCutover.java
index a62d62426..a7a5175d0 100644
--- a/src/test/java/org/joda/time/TestDateTimeZoneCutover.java
+++ b/src/test/java/org/joda/time/TestDateTimeZoneCutover.java
@@ -1246,14 +1246,35 @@ public void testBug3192457_adjustOffset() {
 
     // ensure Summer time picked
     //-----------------------------------------------------------------------
-    public void testDateTimeCreation_europe() {
+    public void testDateTimeCreation_athens() {
         DateTimeZone zone = DateTimeZone.forID("Europe/Athens");
         DateTime base = new DateTime(2011, 10, 30, 3, 15, zone);
         assertEquals("2011-10-30T03:15:00.000+03:00", base.toString());
         assertEquals("2011-10-30T03:15:00.000+02:00", base.plusHours(1).toString());
     }
 
-    public void testDateTimeCreation_us() {
+    public void testDateTimeCreation_paris() {
+        DateTimeZone zone = DateTimeZone.forID("Europe/Paris");
+        DateTime base = new DateTime(2011, 10, 30, 2, 15, zone);
+        assertEquals("2011-10-30T02:15:00.000+02:00", base.toString());
+        assertEquals("2011-10-30T02:15:00.000+01:00", base.plusHours(1).toString());
+    }
+
+    public void testDateTimeCreation_london() {
+        DateTimeZone zone = DateTimeZone.forID("Europe/London");
+        DateTime base = new DateTime(2011, 10, 30, 1, 15, zone);
+        assertEquals("2011-10-30T01:15:00.000+01:00", base.toString());
+        assertEquals("2011-10-30T01:15:00.000Z", base.plusHours(1).toString());
+    }
+
+    public void testDateTimeCreation_newYork() {
+        DateTimeZone zone = DateTimeZone.forID("America/New_York");
+        DateTime base = new DateTime(2010, 11, 7, 1, 15, zone);
+        assertEquals("2010-11-07T01:15:00.000-04:00", base.toString());
+        assertEquals("2010-11-07T01:15:00.000-05:00", base.plusHours(1).toString());
+    }
+
+    public void testDateTimeCreation_losAngeles() {
         DateTimeZone zone = DateTimeZone.forID("America/Los_Angeles");
         DateTime base = new DateTime(2010, 11, 7, 1, 15, zone);
         assertEquals("2010-11-07T01:15:00.000-07:00", base.toString());

From 5a4fb365f84c34b4e2e034e9dca347ebe986e4de Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 25 Oct 2011 11:01:16 +0100
Subject: [PATCH 10/35] Fix broken hyperlink, notified by "Gent, R.H. van
 (Rob)"

---
 src/site/xdoc/cal_islamic.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/site/xdoc/cal_islamic.xml b/src/site/xdoc/cal_islamic.xml
index ee6148aba..2473180ba 100644
--- a/src/site/xdoc/cal_islamic.xml
+++ b/src/site/xdoc/cal_islamic.xml
@@ -77,7 +77,7 @@ References
 <ul>
 <li>Calendrical Calculations - Millenium Edition - ISBN 0521777526</li>
 <li><a href="http://en.wikipedia.org/wiki/Islamic_calendar">Wikipedia - Islamic Calendar</a></li>
-<li><a href="http://www.phys.uu.nl/~vgent/islam/islamyear_en.htm">Islamic calendar converter</a></li>
+<li><a href="http://www.staff.science.uu.nl/~gent0113/islam/islam_tabcal.htm">Islamic calendar converter</a></li>
 </ul>
 </p>
 </section>

From e16eb72a29d06ce36030b109156bea3244273fb8 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 4 Dec 2011 11:46:04 +0000
Subject: [PATCH 11/35] Make hash code deterministic

Reported on mailing list
---
 RELEASE-NOTES.txt                             |  1 +
 .../java/org/joda/time/DurationFieldType.java | 19 ++++++++++++++++++-
 2 files changed, 19 insertions(+), 1 deletion(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index d5157e348..76dfcfbbb 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -21,6 +21,7 @@ of restrictions. If the license causes you problems please contact the mailing l
 
 Enhancements since 2.0
 ----------------------
+- Make DurationFieldType hash code deterministic
 
 
 Compatibility with 2.0
diff --git a/src/main/java/org/joda/time/DurationFieldType.java b/src/main/java/org/joda/time/DurationFieldType.java
index 34717f072..1a18cf9b1 100644
--- a/src/main/java/org/joda/time/DurationFieldType.java
+++ b/src/main/java/org/joda/time/DurationFieldType.java
@@ -260,6 +260,24 @@ public String toString() {
             iOrdinal = ordinal;
         }
 
+        /** @inheritdoc */
+        @Override
+        public boolean equals(Object obj) {
+            if (this == obj) {
+                return true;
+            }
+            if (obj instanceof StandardDurationFieldType) {
+                return iOrdinal == ((StandardDurationFieldType) obj).iOrdinal;
+            }
+            return false;
+        }
+
+        /** @inheritdoc */
+        @Override
+        public int hashCode() {
+            return iOrdinal;
+        }
+
         public DurationField getField(Chronology chronology) {
             chronology = DateTimeUtils.getChronology(chronology);
             
@@ -330,6 +348,5 @@ private Object readResolve() {
                     return this;
             }
         }
-
     }
 }

From b609d7d66d180f2eb537b27f5d605d0596e096ce Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 4 Dec 2011 12:10:35 +0000
Subject: [PATCH 12/35] Fix GJChronology to allow some leap year dates in
 JulianChronology to be created [3446915]

---
 RELEASE-NOTES.txt                             |  3 +++
 .../org/joda/time/chrono/GJChronology.java    | 19 +++++++++++++++---
 .../joda/time/chrono/TestGJChronology.java    | 20 +++++++++++++++++++
 3 files changed, 39 insertions(+), 3 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 76dfcfbbb..6062b399a 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -54,6 +54,9 @@ Bug fixes since 2.0
   A date-time constructor with an ambiguous time due to DST should choose summer time
   but for a zone with an offset of 00:00 it chose winter time
 
+- Fix GJChronology to allow some leap year dates in JulianChronology to be created [3446915]
+  Creating February 29th in Julian leap years was not always possible
+
 - Time-zone names [3412910]
   Names now returned in locales other than English
   The names may differ between JDK1.5 and 1.6 due to the underlying JDK data
diff --git a/src/main/java/org/joda/time/chrono/GJChronology.java b/src/main/java/org/joda/time/chrono/GJChronology.java
index 6131f14f5..0a19aa646 100644
--- a/src/main/java/org/joda/time/chrono/GJChronology.java
+++ b/src/main/java/org/joda/time/chrono/GJChronology.java
@@ -360,9 +360,22 @@ public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
         }
 
         // Assume date is Gregorian.
-        long instant = iGregorianChronology.getDateTimeMillis
-            (year, monthOfYear, dayOfMonth,
-             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+        long instant;
+        try {
+            instant = iGregorianChronology.getDateTimeMillis
+                (year, monthOfYear, dayOfMonth,
+                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+        } catch (IllegalFieldValueException ex) {
+            if (monthOfYear != 2 || dayOfMonth != 29) {
+                throw ex;
+            }
+            instant = iGregorianChronology.getDateTimeMillis
+                (year, monthOfYear, 28,
+                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+            if (instant >= iCutoverMillis) {
+                throw ex;
+            }
+        }
         if (instant < iCutoverMillis) {
             // Maybe it's Julian.
             instant = iJulianChronology.getDateTimeMillis
diff --git a/src/test/java/org/joda/time/chrono/TestGJChronology.java b/src/test/java/org/joda/time/chrono/TestGJChronology.java
index f517b9fa4..3cf495024 100644
--- a/src/test/java/org/joda/time/chrono/TestGJChronology.java
+++ b/src/test/java/org/joda/time/chrono/TestGJChronology.java
@@ -28,6 +28,7 @@
 import org.joda.time.DateTimeZone;
 import org.joda.time.DurationField;
 import org.joda.time.DurationFieldType;
+import org.joda.time.IllegalFieldValueException;
 import org.joda.time.Instant;
 import org.joda.time.Period;
 import org.joda.time.TimeOfDay;
@@ -489,4 +490,23 @@ public void testPartialGetAsText() {
         assertEquals("January", new YearMonthDay("2005-01-01", chrono).monthOfYear().getAsText());
         assertEquals("Jan", new YearMonthDay("2005-01-01", chrono).monthOfYear().getAsShortText());
     }
+
+    public void testLeapYearRulesConstruction() {
+        // 1500 not leap in Gregorian, but is leap in Julian
+        DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());
+        assertEquals(dt.getYear(), 1500);
+        assertEquals(dt.getMonthOfYear(), 2);
+        assertEquals(dt.getDayOfMonth(), 29);
+    }
+
+    public void testLeapYearRulesConstructionInvalid() {
+        // 1500 not leap in Gregorian, but is leap in Julian
+        try {
+            new DateMidnight(1500, 2, 30, GJChronology.getInstanceUTC());
+            fail();
+        } catch (IllegalFieldValueException ex) {
+            // good
+        }
+    }
+
 }

From 7b5032a43880b77549b3c2bedf5172b9248d4580 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 6 Dec 2011 13:04:55 +0000
Subject: [PATCH 13/35] Better hash code distribution

Proposed by Greg Inozemtsev
---
 .../java/org/joda/time/DateTimeFieldType.java    |  2 +-
 .../java/org/joda/time/DurationFieldType.java    |  2 +-
 src/test/java/org/joda/time/TestPeriodType.java  | 16 ++++++++++++++++
 3 files changed, 18 insertions(+), 2 deletions(-)

diff --git a/src/main/java/org/joda/time/DateTimeFieldType.java b/src/main/java/org/joda/time/DateTimeFieldType.java
index 5c6c59aad..26bfdfd00 100644
--- a/src/main/java/org/joda/time/DateTimeFieldType.java
+++ b/src/main/java/org/joda/time/DateTimeFieldType.java
@@ -472,7 +472,7 @@ public boolean equals(Object obj) {
         /** @inheritdoc */
         @Override
         public int hashCode() {
-            return iOrdinal;
+            return (1 << iOrdinal);
         }
 
         /** @inheritdoc */
diff --git a/src/main/java/org/joda/time/DurationFieldType.java b/src/main/java/org/joda/time/DurationFieldType.java
index 1a18cf9b1..af1e7b0ab 100644
--- a/src/main/java/org/joda/time/DurationFieldType.java
+++ b/src/main/java/org/joda/time/DurationFieldType.java
@@ -275,7 +275,7 @@ public boolean equals(Object obj) {
         /** @inheritdoc */
         @Override
         public int hashCode() {
-            return iOrdinal;
+            return (1 << iOrdinal);
         }
 
         public DurationField getField(Chronology chronology) {
diff --git a/src/test/java/org/joda/time/TestPeriodType.java b/src/test/java/org/joda/time/TestPeriodType.java
index f1e4e4142..421eeac46 100644
--- a/src/test/java/org/joda/time/TestPeriodType.java
+++ b/src/test/java/org/joda/time/TestPeriodType.java
@@ -593,6 +593,22 @@ public void testForFields6() throws Exception {
         }
     }
 
+    // ensure hash key distribution
+    public void testForFields7() throws Exception {
+        DurationFieldType[] types = new DurationFieldType[] {
+            DurationFieldType.weeks(),
+            DurationFieldType.months(),
+        };
+        DurationFieldType[] types2 = new DurationFieldType[] {
+            DurationFieldType.seconds(),
+        };
+        PeriodType type = PeriodType.forFields(types);
+        PeriodType type2 = PeriodType.forFields(types2);
+        assertEquals(false, type == type2);
+        assertEquals(false, type.equals(type2));
+        assertEquals(false, type.hashCode() == type2.hashCode());
+    }
+
     //-----------------------------------------------------------------------
     public void testMaskYears() throws Exception {
         PeriodType type = PeriodType.standard().withYearsRemoved();

From d6791cb5f9d476738da9247d5a7849ee972474ae Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 6 Dec 2011 13:10:10 +0000
Subject: [PATCH 14/35] Fix PeriodType caching

Spotted by Greg and Laura Inozemtseva
---
 RELEASE-NOTES.txt                               | 3 +++
 src/main/java/org/joda/time/PeriodType.java     | 4 ++--
 src/test/java/org/joda/time/TestPeriodType.java | 2 ++
 3 files changed, 7 insertions(+), 2 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 6062b399a..21efa57bf 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -57,6 +57,9 @@ Bug fixes since 2.0
 - Fix GJChronology to allow some leap year dates in JulianChronology to be created [3446915]
   Creating February 29th in Julian leap years was not always possible
 
+- Fix PeriodType caching
+  The caching could go wrong if the DurationFieldType instances were in the wrong order
+
 - Time-zone names [3412910]
   Names now returned in locales other than English
   The names may differ between JDK1.5 and 1.6 due to the underlying JDK data
diff --git a/src/main/java/org/joda/time/PeriodType.java b/src/main/java/org/joda/time/PeriodType.java
index a0d21d989..e06b37937 100644
--- a/src/main/java/org/joda/time/PeriodType.java
+++ b/src/main/java/org/joda/time/PeriodType.java
@@ -569,10 +569,10 @@ public static synchronized PeriodType forFields(DurationFieldType[] types) {
         PeriodType checkPartType = new PeriodType(null, type.iTypes, null);
         PeriodType checkedType = (PeriodType) cache.get(checkPartType);
         if (checkedType != null) {
-            cache.put(inPartType, checkedType);
+            cache.put(checkPartType, checkedType);
             return checkedType;
         }
-        cache.put(inPartType, type);
+        cache.put(checkPartType, type);
         return type;
     }
 
diff --git a/src/test/java/org/joda/time/TestPeriodType.java b/src/test/java/org/joda/time/TestPeriodType.java
index 421eeac46..9c6108259 100644
--- a/src/test/java/org/joda/time/TestPeriodType.java
+++ b/src/test/java/org/joda/time/TestPeriodType.java
@@ -523,10 +523,12 @@ public void testForFields3() throws Exception {
     public void testForFields4() throws Exception {
         DurationFieldType[] types = new DurationFieldType[] {
             DurationFieldType.weeks(),
+            DurationFieldType.days(),  // adding this makes this test unique, so cache is not pre-populated
             DurationFieldType.months(),
         };
         DurationFieldType[] types2 = new DurationFieldType[] {
             DurationFieldType.months(),
+            DurationFieldType.days(),
             DurationFieldType.weeks(),
         };
         PeriodType type = PeriodType.forFields(types);

From d2ec203cc3e19cb26d01c4a153e65f395ad6420d Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Mon, 19 Dec 2011 10:53:09 +0000
Subject: [PATCH 15/35] Enhance readResolve() from
 LocalDate/LocalTime/LocalDateTime [3461008]

---
 RELEASE-NOTES.txt                              | 3 +++
 src/main/java/org/joda/time/LocalDate.java     | 3 +++
 src/main/java/org/joda/time/LocalDateTime.java | 3 +++
 src/main/java/org/joda/time/LocalTime.java     | 3 +++
 4 files changed, 12 insertions(+)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 21efa57bf..7e89a07a9 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -67,6 +67,9 @@ Bug fixes since 2.0
 - Time zone id parsing fixed for some longer time zones [3427389]
   Time zones like "America/Dawson_Creek" were not parsed as "America/Dawson" was matched first
 
+- Enhance readResolve() from LocalDate/LocalTime/LocalDateTime [3461008]
+  Handle even more weird deserialization problems with other tools
+
 - Interval/MutableInterval toString() now contains the time-zone offset [https://github.com/JodaOrg/joda-time/pull/2]
 
 - Javadoc fix to MutablePeriod [3413869]
diff --git a/src/main/java/org/joda/time/LocalDate.java b/src/main/java/org/joda/time/LocalDate.java
index 8656c3733..0cde962b2 100644
--- a/src/main/java/org/joda/time/LocalDate.java
+++ b/src/main/java/org/joda/time/LocalDate.java
@@ -451,6 +451,9 @@ public LocalDate(
      * @return the resolved object, not null
      */
     private Object readResolve() {
+        if (iChronology == null) {
+            return new LocalDate(iLocalMillis, ISOChronology.getInstanceUTC());
+        }
         if (DateTimeZone.UTC.equals(iChronology.getZone()) == false) {
             return new LocalDate(iLocalMillis, iChronology.withUTC());
         }
diff --git a/src/main/java/org/joda/time/LocalDateTime.java b/src/main/java/org/joda/time/LocalDateTime.java
index fb6dcbb70..bfb65fd04 100644
--- a/src/main/java/org/joda/time/LocalDateTime.java
+++ b/src/main/java/org/joda/time/LocalDateTime.java
@@ -506,6 +506,9 @@ public LocalDateTime(
      * @return the resolved object, not null
      */
     private Object readResolve() {
+        if (iChronology == null) {
+            return new LocalDateTime(iLocalMillis, ISOChronology.getInstanceUTC());
+        }
         if (DateTimeZone.UTC.equals(iChronology.getZone()) == false) {
             return new LocalDateTime(iLocalMillis, iChronology.withUTC());
         }
diff --git a/src/main/java/org/joda/time/LocalTime.java b/src/main/java/org/joda/time/LocalTime.java
index b12a6c46a..ea067b3eb 100644
--- a/src/main/java/org/joda/time/LocalTime.java
+++ b/src/main/java/org/joda/time/LocalTime.java
@@ -514,6 +514,9 @@ public LocalTime(
      * @return the resolved object, not null
      */
     private Object readResolve() {
+        if (iChronology == null) {
+            return new LocalTime(iLocalMillis, ISOChronology.getInstanceUTC());
+        }
         if (DateTimeZone.UTC.equals(iChronology.getZone()) == false) {
             return new LocalTime(iLocalMillis, iChronology.withUTC());
         }

From 1803610f0e29ba6fb6fbb1c0883139eea9121a3e Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Thu, 5 Jan 2012 22:02:50 +0000
Subject: [PATCH 16/35] Add to gitignore

---
 .gitignore | 1 +
 1 file changed, 1 insertion(+)

diff --git a/.gitignore b/.gitignore
index 715a175fc..da2ea5f39 100644
--- a/.gitignore
+++ b/.gitignore
@@ -3,3 +3,4 @@ target/
 *.log
 src/tz-data/
 *TempTest*
+/test-output/

From 7a4800c229b498bd239a5d08187ecfd09268a1e5 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Thu, 5 Jan 2012 22:03:34 +0000
Subject: [PATCH 17/35] Enhance plus/minus javadoc [3469522]

---
 src/main/java/org/joda/time/LocalDate.java | 10 ++++++++++
 1 file changed, 10 insertions(+)

diff --git a/src/main/java/org/joda/time/LocalDate.java b/src/main/java/org/joda/time/LocalDate.java
index 0cde962b2..9a4df02f1 100644
--- a/src/main/java/org/joda/time/LocalDate.java
+++ b/src/main/java/org/joda/time/LocalDate.java
@@ -1167,6 +1167,8 @@ public LocalDate plus(ReadablePeriod period) {
     /**
      * Returns a copy of this date plus the specified number of years.
      * <p>
+     * This adds the specified number of years to the date.
+     * If adding years makes the day-of-month invalid, it is adjusted to the last valid day in the month.
      * This LocalDate instance is immutable and unaffected by this method call.
      * <p>
      * The following three lines are identical in effect:
@@ -1190,6 +1192,9 @@ public LocalDate plusYears(int years) {
     /**
      * Returns a copy of this date plus the specified number of months.
      * <p>
+     * This adds the specified number of months to the date.
+     * The addition may change the year, but the day-of-month is normally unchanged.
+     * If adding months makes the day-of-month invalid, it is adjusted to the last valid day in the month.
      * This LocalDate instance is immutable and unaffected by this method call.
      * <p>
      * The following three lines are identical in effect:
@@ -1281,6 +1286,8 @@ public LocalDate minus(ReadablePeriod period) {
     /**
      * Returns a copy of this date minus the specified number of years.
      * <p>
+     * This subtracts the specified number of years from the date.
+     * If subtracting years makes the day-of-month invalid, it is adjusted to the last valid day in the month.
      * This LocalDate instance is immutable and unaffected by this method call.
      * <p>
      * The following three lines are identical in effect:
@@ -1304,6 +1311,9 @@ public LocalDate minusYears(int years) {
     /**
      * Returns a copy of this date minus the specified number of months.
      * <p>
+     * This subtracts the specified number of months from the date.
+     * The subtraction may change the year, but the day-of-month is normally unchanged.
+     * If subtracting months makes the day-of-month invalid, it is adjusted to the last valid day in the month.
      * This LocalDate instance is immutable and unaffected by this method call.
      * <p>
      * The following three lines are identical in effect:

From 3bca798e224a711ec69801086e5fb4b2b4169b30 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 8 Jan 2012 12:36:24 +0000
Subject: [PATCH 18/35] Fix references to removed methods in user guide

---
 src/site/xdoc/userguide.xml | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/site/xdoc/userguide.xml b/src/site/xdoc/userguide.xml
index c03807e8b..576a311a2 100644
--- a/src/site/xdoc/userguide.xml
+++ b/src/site/xdoc/userguide.xml
@@ -726,10 +726,10 @@ get the datetime for the current time, but in the Buddhist Calendar, you would d
     DateTime dt = new DateTime();
     dt.getYear();  // returns 2004
     // change to Buddhist chronology
-    DateTime dtBuddhist = dt.withChronology(Chronology.getBuddhist());
+    DateTime dtBuddhist = dt.withChronology(BuddhistChronology.getInstance());
     dtBuddhist.getYear();  // returns 2547
 </source>
-where <code>Chronology.getBuddhist</code> is a factory method for obtaining a
+where <code>BuddhistChronology.getInstance</code> is a factory method for obtaining a
 Buddhist chronology.
 </p>
 </section>

From d634d385e7d01589bc78fc666ecf1e9978a1f45d Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Sun, 8 Jan 2012 12:47:57 +0000
Subject: [PATCH 19/35] Add FAQ on wrong time-zone offsets

---
 src/site/xdoc/faq.xml | 23 +++++++++++++++++++++++
 1 file changed, 23 insertions(+)

diff --git a/src/site/xdoc/faq.xml b/src/site/xdoc/faq.xml
index 2fc8ae6ce..beff83e60 100644
--- a/src/site/xdoc/faq.xml
+++ b/src/site/xdoc/faq.xml
@@ -17,6 +17,7 @@ Some common questions about Joda-Time are answered here.
 <li><a href="#illegalinstant">What does "Illegal instant due to time zone offset transition" mean?</a></li>
 <li><a href="#rulesoutofdate">Are the time-zone rules are out of date?</a></li>
 <li><a href="#newzonerules">Does Joda-Time support the 2007 US and Canada time zone rules?</a></li>
+<li><a href="#wrongoffset">Why is the offset for a time-zone different to the JDK?</a></li>
 <li><a href="#datediff">How do I calculate the difference between two dates?</a></li>
 <li><a href="#iso">What is ISO8601?</a></li>
 <li><a href="#default">Why is ISO8601 the default?</a></li>
@@ -103,6 +104,28 @@ For any future, or similar time zone change, you can upgrade your Joda-Time jar
 </p>
 </subsection>
 
+<a name="wrongoffset" />
+<subsection name="Why is the offset for a time-zone different to the JDK?">
+<p>
+There are two main reasons for this.
+</p>
+<p>
+The first reason is that both the JDK and Joda-Time have time-zone data files.
+It is important to keep both up to date and in sync if you want to compare the offset between the two.
+</p>
+<p>
+The second reason affects date-times before the modern time-zone system was introduced.
+The time-zone data is obtained from the <a href="http://www.iana.org/time-zones">time-zone database</a>.
+The database contains information on "Local Mean Time" (LMT) which is the local time that would have been
+observed at the location following the Sun's movements.
+</p>
+<p>
+Joda-Time uses the LMT information for all times prior to the first time-zone offset being chosen in a location.
+By contrast, the JDK ignores the LMT information.
+As such, the time-zone offset returned by the JDK and Joda-Time are different for date-times before the modern time-zone system.
+</p>
+</subsection>
+
 <a name="datediff" />
 <subsection name="How do I calculate the difference between two dates?">
 <p>

From 5d8a77e2bf78e55bbe22bcd8059091737e9e58c5 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Thu, 2 Feb 2012 11:16:20 +0000
Subject: [PATCH 20/35] Tweaks to cached time-zone to try and avoid a NPE
 [3470276]

---
 RELEASE-NOTES.txt                             |  2 +
 .../org/joda/time/tz/CachedDateTimeZone.java  | 12 +--
 src/test/java/org/joda/time/tz/TestAll.java   |  3 +-
 .../joda/time/tz/TestCachedDateTimeZone.java  | 82 +++++++++++++++++++
 4 files changed, 88 insertions(+), 11 deletions(-)
 create mode 100644 src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 7e89a07a9..038419ecf 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -70,6 +70,8 @@ Bug fixes since 2.0
 - Enhance readResolve() from LocalDate/LocalTime/LocalDateTime [3461008]
   Handle even more weird deserialization problems with other tools
 
+- Tweaks to cached time-zone to try and avoid a NPE [3470276]
+
 - Interval/MutableInterval toString() now contains the time-zone offset [https://github.com/JodaOrg/joda-time/pull/2]
 
 - Javadoc fix to MutablePeriod [3413869]
diff --git a/src/main/java/org/joda/time/tz/CachedDateTimeZone.java b/src/main/java/org/joda/time/tz/CachedDateTimeZone.java
index dcb8de6b8..b6aa0d323 100644
--- a/src/main/java/org/joda/time/tz/CachedDateTimeZone.java
+++ b/src/main/java/org/joda/time/tz/CachedDateTimeZone.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2012 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -81,19 +81,11 @@ public static CachedDateTimeZone forZone(DateTimeZone zone) {
 
     private final DateTimeZone iZone;
 
-    private transient Info[] iInfoCache;
+    private final Info[] iInfoCache = new Info[cInfoCacheMask + 1];
 
     private CachedDateTimeZone(DateTimeZone zone) {
         super(zone.getID());
         iZone = zone;
-        iInfoCache = new Info[cInfoCacheMask + 1];
-    }
-
-    private void readObject(java.io.ObjectInputStream in)
-        throws java.io.IOException, ClassNotFoundException
-    {
-        in.defaultReadObject();
-        iInfoCache = new Info[cInfoCacheMask + 1];
     }
 
     /**
diff --git a/src/test/java/org/joda/time/tz/TestAll.java b/src/test/java/org/joda/time/tz/TestAll.java
index a59078ce9..668b0da09 100644
--- a/src/test/java/org/joda/time/tz/TestAll.java
+++ b/src/test/java/org/joda/time/tz/TestAll.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2012 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -37,6 +37,7 @@ public static Test suite() {
         suite.addTest(TestUTCProvider.suite());
         suite.addTest(TestBuilder.suite());
         suite.addTest(TestCompiler.suite());
+        suite.addTest(TestCachedDateTimeZone.suite());
         suite.addTest(TestFixedDateTimeZone.suite());
         return suite;
     }
diff --git a/src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java b/src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java
new file mode 100644
index 000000000..d6d01fd20
--- /dev/null
+++ b/src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java
@@ -0,0 +1,82 @@
+/*
+ *  Copyright 2001-2012 Stephen Colebourne
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.joda.time.tz;
+
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+import org.joda.time.DateTimeZone;
+
+/**
+ * Test cases for FixedDateTimeZone.
+ *
+ * @author Stephen Colebourne
+ */
+public class TestCachedDateTimeZone extends TestCase {
+
+    public static void main(String[] args) {
+        junit.textui.TestRunner.run(suite());
+    }
+
+    public static TestSuite suite() {
+        return new TestSuite(TestCachedDateTimeZone.class);
+    }
+
+    private DateTimeZone originalDateTimeZone = null;
+
+    public TestCachedDateTimeZone(String name) {
+        super(name);
+    }
+
+    protected void setUp() throws Exception {
+        originalDateTimeZone = DateTimeZone.getDefault();
+        DateTimeZone.setDefault(DateTimeZone.UTC);
+    }
+
+    protected void tearDown() throws Exception {
+        DateTimeZone.setDefault(originalDateTimeZone);
+    }
+
+    public void test_caching() throws Exception {
+        CachedDateTimeZone zone1 = CachedDateTimeZone.forZone(DateTimeZone.forID("Europe/Paris"));
+        CachedDateTimeZone zone2 = CachedDateTimeZone.forZone(DateTimeZone.forID("Europe/Paris"));
+        assertSame(zone1, zone2);
+    }
+
+    //-----------------------------------------------------------------------
+    public void testSerialization() throws Exception {
+        CachedDateTimeZone test = CachedDateTimeZone.forZone(DateTimeZone.forID("Europe/Paris"));
+        
+        ByteArrayOutputStream baos = new ByteArrayOutputStream();
+        ObjectOutputStream oos = new ObjectOutputStream(baos);
+        oos.writeObject(test);
+        byte[] bytes = baos.toByteArray();
+        oos.close();
+        
+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
+        ObjectInputStream ois = new ObjectInputStream(bais);
+        CachedDateTimeZone result = (CachedDateTimeZone) ois.readObject();
+        ois.close();
+        
+        assertEquals(test, result);
+    }
+
+}

From cdeacf09e33ddbaf75a4563d7bc62063f50972b1 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Thu, 2 Feb 2012 11:42:24 +0000
Subject: [PATCH 21/35] Fix multi-lingual period format for using English from
 another language default [3471414]

An empty messages file ensures the bunde loader works correctly
---
 RELEASE-NOTES.txt                             |  4 ++
 .../joda/time/format/messages_en.properties   |  0
 .../joda/time/format/TestPeriodFormat.java    | 40 ++++++++++++++++++-
 3 files changed, 42 insertions(+), 2 deletions(-)
 create mode 100644 src/main/java/org/joda/time/format/messages_en.properties

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 038419ecf..28732ee1d 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -72,6 +72,10 @@ Bug fixes since 2.0
 
 - Tweaks to cached time-zone to try and avoid a NPE [3470276]
 
+- Fix multi-lingual period format for using English from another language default [3471414]
+  Previously, the word-based methods on PeriodFormat ignored the argument of English if the default
+  locale was non-English, now fixed
+
 - Interval/MutableInterval toString() now contains the time-zone offset [https://github.com/JodaOrg/joda-time/pull/2]
 
 - Javadoc fix to MutablePeriod [3413869]
diff --git a/src/main/java/org/joda/time/format/messages_en.properties b/src/main/java/org/joda/time/format/messages_en.properties
new file mode 100644
index 000000000..e69de29bb
diff --git a/src/test/java/org/joda/time/format/TestPeriodFormat.java b/src/test/java/org/joda/time/format/TestPeriodFormat.java
index bb9905091..bbf6939e8 100644
--- a/src/test/java/org/joda/time/format/TestPeriodFormat.java
+++ b/src/test/java/org/joda/time/format/TestPeriodFormat.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2005 Stephen Colebourne
+ *  Copyright 2001-2012 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -29,6 +29,7 @@
  */
 public class TestPeriodFormat extends TestCase {
     
+    private static final Locale EN = new Locale("en");
     private static final Locale FR = new Locale("fr");
     private static final Locale PT = new Locale("pt");
     private static final Locale ES = new Locale("es");
@@ -51,7 +52,7 @@ public TestPeriodFormat(String name) {
 
     protected void setUp() throws Exception {
         originalLocale = Locale.getDefault();
-        Locale.setDefault(Locale.UK);
+        Locale.setDefault(DE);
     }
 
     protected void tearDown() throws Exception {
@@ -104,6 +105,14 @@ public void test_getDefault_cached() {
         assertSame(PeriodFormat.getDefault(), PeriodFormat.getDefault());
     }
 
+    //-----------------------------------------------------------------------
+    // wordBased() - default locale (de)
+    //-----------------------------------------------------------------------
+    public void test_wordBased_default() {
+        Period p = new Period(0, 0, 0, 1, 5, 6 ,7, 8);
+        assertEquals("1 Tag, 5 Stunden, 6 Minuten, 7 Sekunden und 8 Millisekunden", PeriodFormat.wordBased().print(p));
+    }
+
     //-----------------------------------------------------------------------
     // wordBased(Locale.FRENCH)
     //-----------------------------------------------------------------------
@@ -289,4 +298,31 @@ public void test_wordBased_nl_cached() {
         assertSame(PeriodFormat.wordBased(NL), PeriodFormat.wordBased(NL));
     }
 
+    //-----------------------------------------------------------------------
+    // Cross check languages
+    //-----------------------------------------------------------------------
+    public void test_wordBased_fr_from_de() {
+      Locale.setDefault(DE);
+      Period p = new Period(0, 0, 0, 1, 5, 6 ,7, 8);
+      assertEquals("1 jour, 5 heures, 6 minutes, 7 secondes et 8 millisecondes", PeriodFormat.wordBased(FR).print(p));
+  }
+
+    public void test_wordBased_fr_from_nl() {
+      Locale.setDefault(NL);
+      Period p = new Period(0, 0, 0, 1, 5, 6 ,7, 8);
+      assertEquals("1 jour, 5 heures, 6 minutes, 7 secondes et 8 millisecondes", PeriodFormat.wordBased(FR).print(p));
+  }
+
+    public void test_wordBased_en_from_de() {
+      Locale.setDefault(DE);
+      Period p = new Period(0, 0, 0, 1, 5, 6 ,7, 8);
+      assertEquals("1 day, 5 hours, 6 minutes, 7 seconds and 8 milliseconds", PeriodFormat.wordBased(EN).print(p));
+  }
+
+    public void test_wordBased_en_from_nl() {
+      Locale.setDefault(NL);
+      Period p = new Period(0, 0, 0, 1, 5, 6 ,7, 8);
+      assertEquals("1 day, 5 hours, 6 minutes, 7 seconds and 8 milliseconds", PeriodFormat.wordBased(EN).print(p));
+  }
+
 }

From a8913f5ad5dfde59263c981c9e9eb28e43fd2e00 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Thu, 2 Feb 2012 13:07:22 +0000
Subject: [PATCH 22/35] Fix time zone later/earlier offset methods in Western
 hemisphere [3476684]

---
 RELEASE-NOTES.txt                             |  3 ++
 src/main/java/org/joda/time/DateTimeZone.java | 37 ++++++++++++++----
 .../joda/time/TestDateTimeZoneCutover.java    | 38 ++++++++++++++++++-
 3 files changed, 69 insertions(+), 9 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 28732ee1d..e0ea4ace3 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -67,6 +67,9 @@ Bug fixes since 2.0
 - Time zone id parsing fixed for some longer time zones [3427389]
   Time zones like "America/Dawson_Creek" were not parsed as "America/Dawson" was matched first
 
+- Time zone later/earlier offset methods failed in Western hemisphere [3476684]
+  Previously, withLaterOffset() failed in the Americas, Now rewritten
+
 - Enhance readResolve() from LocalDate/LocalTime/LocalDateTime [3461008]
   Handle even more weird deserialization problems with other tools
 
diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java
index ec05941f8..72198993e 100644
--- a/src/main/java/org/joda/time/DateTimeZone.java
+++ b/src/main/java/org/joda/time/DateTimeZone.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2011 Stephen Colebourne
+ *  Copyright 2001-2012 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -1161,14 +1161,37 @@ public boolean isLocalDateTimeGap(LocalDateTime localDateTime) {
      * @return the adjusted instant millis
      */
     public long adjustOffset(long instant, boolean earlierOrLater) {
-        long before = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        long after = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        if (before == after) {
-            return instant;
+        // a bit messy, but will work in all non-pathological cases
+        
+        // evaluate 3 hours before and after to work out if anything is happening
+        long instantBefore = instant - 3 * DateTimeConstants.MILLIS_PER_HOUR;
+        long instantAfter = instant + 3 * DateTimeConstants.MILLIS_PER_HOUR;
+        long offsetBefore = getOffset(instantBefore);
+        long offsetAfter = getOffset(instantAfter);
+        if (offsetBefore <= offsetAfter) {
+            return instant;  // not an overlap (less than is a gap, equal is normal case)
+        }
+        
+        // work out range of instants that have duplicate local times
+        long diff = offsetBefore - offsetAfter;
+        long transition = nextTransition(instantBefore);
+        long overlapStart = transition - diff;
+        long overlapEnd = transition + diff;
+        if (instant < overlapStart || instant >= overlapEnd) {
+          return instant;  // not an overlap
+        }
+        
+        // calculate result
+        long afterStart = instant - overlapStart;
+        if (afterStart >= diff) {
+          // currently in later offset
+          return earlierOrLater ? instant : instant - diff;
+        } else {
+          // currently in earlier offset
+          return earlierOrLater ? instant + diff : instant;
         }
-        long local = convertUTCToLocal(instant);
-        return convertLocalToUTC(local, false, earlierOrLater ? after : before);
     }
+//    System.out.println(new DateTime(transitionStart, DateTimeZone.UTC) + " " + new DateTime(transitionStart, this));
 
     //-----------------------------------------------------------------------
     /**
diff --git a/src/test/java/org/joda/time/TestDateTimeZoneCutover.java b/src/test/java/org/joda/time/TestDateTimeZoneCutover.java
index a7a5175d0..d86b68e0b 100644
--- a/src/test/java/org/joda/time/TestDateTimeZoneCutover.java
+++ b/src/test/java/org/joda/time/TestDateTimeZoneCutover.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2001-2007 Stephen Colebourne
+ *  Copyright 2001-2012 Stephen Colebourne
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -1229,6 +1229,7 @@ public void testForum4013394_retainOffsetWhenRetainFields_sameOffsetsDifferentZo
         assertEquals(baseAfter.toString(), testAfter.toString());
     }
 
+    //-------------------------------------------------------------------------
     public void testBug3192457_adjustOffset() {
         final DateTimeZone zone = DateTimeZone.forID("Europe/Paris");
         DateTime base = new DateTime(2007, 10, 28, 3, 15, zone);
@@ -1237,13 +1238,46 @@ public void testBug3192457_adjustOffset() {
         
         assertSame(base, base.withEarlierOffsetAtOverlap());
         assertSame(base, base.withLaterOffsetAtOverlap());
+        
         assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap());
+        assertEquals(baseAfter, baseBefore.withLaterOffsetAtOverlap());
+        
         assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap());
+        assertEquals(baseBefore, baseAfter.withEarlierOffsetAtOverlap());
+    }
+
+    public void testBug3476684_adjustOffset() {
+        final DateTimeZone zone = DateTimeZone.forID("America/Sao_Paulo");
+        DateTime base = new DateTime(2012, 2, 25, 22, 15, zone);
+        DateTime baseBefore = base.plusHours(1);  // 23:15 (first)
+        DateTime baseAfter = base.plusHours(2);  // 23:15 (second)
+        
+        assertSame(base, base.withEarlierOffsetAtOverlap());
+        assertSame(base, base.withLaterOffsetAtOverlap());
+        
+        assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap());
+        assertEquals(baseAfter, baseBefore.withLaterOffsetAtOverlap());
         
+        assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap());
         assertEquals(baseBefore, baseAfter.withEarlierOffsetAtOverlap());
-        assertEquals(baseAfter, baseAfter.withLaterOffsetAtOverlap());
     }
 
+    public void testBug3476684_adjustOffset_springGap() {
+      final DateTimeZone zone = DateTimeZone.forID("America/Sao_Paulo");
+      DateTime base = new DateTime(2011, 10, 15, 22, 15, zone);
+      DateTime baseBefore = base.plusHours(1);  // 23:15
+      DateTime baseAfter = base.plusHours(2);  // 01:15
+      
+      assertSame(base, base.withEarlierOffsetAtOverlap());
+      assertSame(base, base.withLaterOffsetAtOverlap());
+      
+      assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap());
+      assertEquals(baseBefore, baseBefore.withLaterOffsetAtOverlap());
+      
+      assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap());
+      assertEquals(baseAfter, baseAfter.withEarlierOffsetAtOverlap());
+  }
+
     // ensure Summer time picked
     //-----------------------------------------------------------------------
     public void testDateTimeCreation_athens() {

From 12fce67142744ed4f8fa78b6a5561434987195dd Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Thu, 9 Feb 2012 23:57:52 +0000
Subject: [PATCH 23/35] Use getID() when parsing JDK TimeZone

Bug from Steve Livengood (mailing list)
---
 RELEASE-NOTES.txt                                 | 3 +++
 src/main/java/org/joda/time/DateTimeZone.java     | 2 +-
 src/test/java/org/joda/time/TestDateTimeZone.java | 9 +++++++++
 3 files changed, 13 insertions(+), 1 deletion(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index e0ea4ace3..adf8f09f2 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -70,6 +70,9 @@ Bug fixes since 2.0
 - Time zone later/earlier offset methods failed in Western hemisphere [3476684]
   Previously, withLaterOffset() failed in the Americas, Now rewritten
 
+ - Time zone id parsing of GMT offsets failed on Dalvik
+  This may be related to a JDK specification change between Java 1.6 and 1.7
+
 - Enhance readResolve() from LocalDate/LocalTime/LocalDateTime [3461008]
   Handle even more weird deserialization problems with other tools
 
diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java
index 72198993e..71814d368 100644
--- a/src/main/java/org/joda/time/DateTimeZone.java
+++ b/src/main/java/org/joda/time/DateTimeZone.java
@@ -322,7 +322,7 @@ public static DateTimeZone forTimeZone(TimeZone zone) {
 
         // Support GMT+/-hh:mm formats
         if (convId == null) {
-            convId = zone.getDisplayName();
+            convId = zone.getID();
             if (convId.startsWith("GMT+") || convId.startsWith("GMT-")) {
                 convId = convId.substring(3);
                 int offset = parseOffset(convId);
diff --git a/src/test/java/org/joda/time/TestDateTimeZone.java b/src/test/java/org/joda/time/TestDateTimeZone.java
index 5ca0ba1c7..106363fbe 100644
--- a/src/test/java/org/joda/time/TestDateTimeZone.java
+++ b/src/test/java/org/joda/time/TestDateTimeZone.java
@@ -363,10 +363,19 @@ public void testForTimeZone_TimeZone() {
         assertEquals(DateTimeConstants.MILLIS_PER_HOUR + (23L * DateTimeConstants.MILLIS_PER_MINUTE),
                 zone.getOffset(TEST_TIME_SUMMER));
         
+        zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("GMT+1:23"));
+        assertEquals("+01:23", zone.getID());
+        assertEquals(DateTimeConstants.MILLIS_PER_HOUR + (23L * DateTimeConstants.MILLIS_PER_MINUTE),
+                zone.getOffset(TEST_TIME_SUMMER));
+        
         zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("GMT-02:00"));
         assertEquals("-02:00", zone.getID());
         assertEquals((-2L * DateTimeConstants.MILLIS_PER_HOUR), zone.getOffset(TEST_TIME_SUMMER));
         
+        zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("GMT+2"));
+        assertEquals("+02:00", zone.getID());
+        assertEquals((2L * DateTimeConstants.MILLIS_PER_HOUR), zone.getOffset(TEST_TIME_SUMMER));
+        
         zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone("EST"));
         assertEquals("America/New_York", zone.getID());
     }

From 44b5d6cc832ddc1b08abb1c3aca42b4d84c43eef Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 21 Feb 2012 16:00:09 +0000
Subject: [PATCH 24/35] Add Period.multipliedBy(int) and Period.negated()

---
 RELEASE-NOTES.txt                             |  2 +
 src/main/java/org/joda/time/Period.java       | 30 ++++++++
 .../java/org/joda/time/TestPeriod_Basics.java | 77 +++++++++++++++++++
 3 files changed, 109 insertions(+)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index adf8f09f2..ade224f6a 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -23,6 +23,8 @@ Enhancements since 2.0
 ----------------------
 - Make DurationFieldType hash code deterministic
 
+- Add Period.multipliedBy(int) and Period.negated()
+
 
 Compatibility with 2.0
 ----------------------
diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java
index 7ec807209..aff2a52e5 100644
--- a/src/main/java/org/joda/time/Period.java
+++ b/src/main/java/org/joda/time/Period.java
@@ -1287,6 +1287,36 @@ public Period minusMillis(int millis) {
         return plusMillis(-millis);
     }
 
+    //-----------------------------------------------------------------------
+    /**
+     * Returns a new instance with each element in this period multiplied
+     * by the specified scalar.
+     *
+     * @param scalar  the scalar to multiply by, not null
+     * @return a {@code Period} based on this period with the amounts multiplied by the scalar, never null
+     * @throws ArithmeticException if the capacity of any field is exceeded
+     */
+    public Period multipliedBy(int scalar) {
+        if (this == ZERO || scalar == 1) {
+            return this;
+        }
+        int[] values = getValues();  // cloned
+        for (int i = 0; i < values.length; i++) {
+            values[i] = FieldUtils.safeMultiply(values[i], scalar);
+        }
+        return new Period(values, getPeriodType());
+    }
+
+    /**
+     * Returns a new instance with each amount in this period negated.
+     *
+     * @return a {@code Period} based on this period with the amounts negated, never null
+     * @throws ArithmeticException if any field has the minimum value
+     */
+    public Period negated() {
+        return multipliedBy(-1);
+    }
+
     //-----------------------------------------------------------------------
     /**
      * Converts this period to a period in weeks assuming a
diff --git a/src/test/java/org/joda/time/TestPeriod_Basics.java b/src/test/java/org/joda/time/TestPeriod_Basics.java
index 60c398bc0..f291c9bb6 100644
--- a/src/test/java/org/joda/time/TestPeriod_Basics.java
+++ b/src/test/java/org/joda/time/TestPeriod_Basics.java
@@ -935,6 +935,83 @@ public void testMinusFields() {
         } catch (UnsupportedOperationException ex) {}
     }
 
+    //-----------------------------------------------------------------------
+    public void testMultipliedBy() {
+        Period base = new Period(1, 2, 3, 4, 5, 6, 7, 8);
+        
+        Period test = base.multipliedBy(1);
+        assertSame(base, test);
+        
+        test = base.multipliedBy(0);
+        assertEquals(Period.ZERO, test);
+        
+        test = base.multipliedBy(2);
+        assertEquals(2, test.getYears());
+        assertEquals(4, test.getMonths());
+        assertEquals(6, test.getWeeks());
+        assertEquals(8, test.getDays());
+        assertEquals(10, test.getHours());
+        assertEquals(12, test.getMinutes());
+        assertEquals(14, test.getSeconds());
+        assertEquals(16, test.getMillis());
+        
+        test = base.multipliedBy(3);
+        assertEquals(3, test.getYears());
+        assertEquals(6, test.getMonths());
+        assertEquals(9, test.getWeeks());
+        assertEquals(12, test.getDays());
+        assertEquals(15, test.getHours());
+        assertEquals(18, test.getMinutes());
+        assertEquals(21, test.getSeconds());
+        assertEquals(24, test.getMillis());
+        
+        test = base.multipliedBy(-4);
+        assertEquals(-4, test.getYears());
+        assertEquals(-8, test.getMonths());
+        assertEquals(-12, test.getWeeks());
+        assertEquals(-16, test.getDays());
+        assertEquals(-20, test.getHours());
+        assertEquals(-24, test.getMinutes());
+        assertEquals(-28, test.getSeconds());
+        assertEquals(-32, test.getMillis());
+        
+        try {
+            Period.days(Integer.MAX_VALUE).multipliedBy(2);
+            fail();
+        } catch (ArithmeticException ex) {}
+        
+        try {
+            Period.days(Integer.MIN_VALUE).multipliedBy(2);
+            fail();
+        } catch (ArithmeticException ex) {}
+    }
+
+    //-----------------------------------------------------------------------
+    public void testNegated() {
+        Period base = new Period(1, 2, 3, 4, 5, 6, 7, 8);
+        
+        Period test = Period.ZERO.negated();
+        assertEquals(Period.ZERO, test);
+        
+        test = base.negated();
+        assertEquals(-1, test.getYears());
+        assertEquals(-2, test.getMonths());
+        assertEquals(-3, test.getWeeks());
+        assertEquals(-4, test.getDays());
+        assertEquals(-5, test.getHours());
+        assertEquals(-6, test.getMinutes());
+        assertEquals(-7, test.getSeconds());
+        assertEquals(-8, test.getMillis());
+        
+        test = Period.days(Integer.MAX_VALUE).negated();
+        assertEquals(-Integer.MAX_VALUE, test.getDays());
+        
+        try {
+            Period.days(Integer.MIN_VALUE).negated();
+            fail();
+        } catch (ArithmeticException ex) {}
+    }
+
     //-----------------------------------------------------------------------
     public void testToStandardWeeks() {
         Period test = new Period(0, 0, 3, 4, 5, 6, 7, 8);

From 714c53e2af8fe894fda54eb805958ced0ce08532 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 21 Feb 2012 16:16:36 +0000
Subject: [PATCH 25/35] Fix multiplication of Long.MIN_VALUE by -1 in
 safeMultiply()

---
 RELEASE-NOTES.txt                             |  2 +
 .../java/org/joda/time/field/FieldUtils.java  | 10 ++--
 .../org/joda/time/field/TestFieldUtils.java   | 49 +++++++++++++++++++
 3 files changed, 57 insertions(+), 4 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index ade224f6a..8e8d3fed3 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -86,6 +86,8 @@ Bug fixes since 2.0
 
 - Interval/MutableInterval toString() now contains the time-zone offset [https://github.com/JodaOrg/joda-time/pull/2]
 
+- Fix multiplication of Long.MIN_VALUE by -1 in safeMultiply()
+
 - Javadoc fix to MutablePeriod [3413869]
 
 
diff --git a/src/main/java/org/joda/time/field/FieldUtils.java b/src/main/java/org/joda/time/field/FieldUtils.java
index bc0eee622..55ed991df 100644
--- a/src/main/java/org/joda/time/field/FieldUtils.java
+++ b/src/main/java/org/joda/time/field/FieldUtils.java
@@ -162,13 +162,15 @@ public static long safeMultiply(long val1, long val2) {
         if (val2 == 1) {
             return val1;
         }
-        if (val2 == 0) {
+        if (val1 == 1) {
+            return val2;
+        }
+        if (val1 == 0 || val2 == 0) {
             return 0;
         }
         long total = val1 * val2;
-        if (total / val2 != val1) {
-            throw new ArithmeticException
-                ("The calculation caused an overflow: " + val1 + " * " + val2);
+        if (total / val2 != val1 || val1 == Long.MIN_VALUE && val2 == -1 || val2 == Long.MIN_VALUE && val1 == -1) {
+            throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
         }
         return total;
     }
diff --git a/src/test/java/org/joda/time/field/TestFieldUtils.java b/src/test/java/org/joda/time/field/TestFieldUtils.java
index e01fdef88..2933d41d3 100644
--- a/src/test/java/org/joda/time/field/TestFieldUtils.java
+++ b/src/test/java/org/joda/time/field/TestFieldUtils.java
@@ -188,4 +188,53 @@ public void testSafeSubtractLong() {
         } catch (ArithmeticException e) {
         }
     }
+
+    //-----------------------------------------------------------------------
+    public void testSafeMultiplyLongLong() {
+      assertEquals(0L, FieldUtils.safeMultiply(0L, 0L));
+      
+      assertEquals(1L, FieldUtils.safeMultiply(1L, 1L));
+      assertEquals(3L, FieldUtils.safeMultiply(1L, 3L));
+      assertEquals(3L, FieldUtils.safeMultiply(3L, 1L));
+      
+      assertEquals(6L, FieldUtils.safeMultiply(2L, 3L));
+      assertEquals(-6L, FieldUtils.safeMultiply(2L, -3L));
+      assertEquals(-6L, FieldUtils.safeMultiply(-2L, 3L));
+      assertEquals(6L, FieldUtils.safeMultiply(-2L, -3L));
+      
+      assertEquals(Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, 1L));
+      assertEquals(Long.MIN_VALUE, FieldUtils.safeMultiply(Long.MIN_VALUE, 1L));
+      assertEquals(-Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, -1L));
+      
+      try {
+          FieldUtils.safeMultiply(Long.MIN_VALUE, -1L);
+          fail();
+      } catch (ArithmeticException e) {
+      }
+      
+      try {
+          FieldUtils.safeMultiply(-1L, Long.MIN_VALUE);
+          fail();
+      } catch (ArithmeticException e) {
+      }
+    
+      try {
+          FieldUtils.safeMultiply(Long.MIN_VALUE, 100L);
+          fail();
+      } catch (ArithmeticException e) {
+      }
+      
+      try {
+          FieldUtils.safeMultiply(Long.MIN_VALUE, Long.MAX_VALUE);
+          fail();
+      } catch (ArithmeticException e) {
+      }
+      
+      try {
+          FieldUtils.safeMultiply(Long.MAX_VALUE, Long.MIN_VALUE);
+          fail();
+      } catch (ArithmeticException e) {
+      }
+  }
 }
+

From 790a3a234c91f7af7ba21f87df4808b03adca5e8 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 21 Feb 2012 16:37:28 +0000
Subject: [PATCH 26/35] Fix validation in BasicChronology.getDateTimeMillis

Previously this allowed a millisOfDay value one too large
---
 RELEASE-NOTES.txt                                       | 3 +++
 src/main/java/org/joda/time/chrono/BasicChronology.java | 2 +-
 2 files changed, 4 insertions(+), 1 deletion(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 8e8d3fed3..104250201 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -88,6 +88,9 @@ Bug fixes since 2.0
 
 - Fix multiplication of Long.MIN_VALUE by -1 in safeMultiply()
 
+- Fix validation in BasicChronology.getDateTimeMillis
+ Previously this allowed a millisOfDay value one too large
+
 - Javadoc fix to MutablePeriod [3413869]
 
 
diff --git a/src/main/java/org/joda/time/chrono/BasicChronology.java b/src/main/java/org/joda/time/chrono/BasicChronology.java
index fe51678fe..b0bd3d344 100644
--- a/src/main/java/org/joda/time/chrono/BasicChronology.java
+++ b/src/main/java/org/joda/time/chrono/BasicChronology.java
@@ -155,7 +155,7 @@ public long getDateTimeMillis(
         }
 
         FieldUtils.verifyValueBounds
-            (DateTimeFieldType.millisOfDay(), millisOfDay, 0, DateTimeConstants.MILLIS_PER_DAY);
+            (DateTimeFieldType.millisOfDay(), millisOfDay, 0, DateTimeConstants.MILLIS_PER_DAY - 1);
         return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;
     }
 

From 3ea371ac9fa61bd22a2c89f5d5bcc6721bfcab93 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Tue, 21 Feb 2012 17:22:00 +0000
Subject: [PATCH 27/35] Add since tags

---
 src/main/java/org/joda/time/Period.java | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java
index aff2a52e5..b604dc1e5 100644
--- a/src/main/java/org/joda/time/Period.java
+++ b/src/main/java/org/joda/time/Period.java
@@ -1295,6 +1295,7 @@ public Period minusMillis(int millis) {
      * @param scalar  the scalar to multiply by, not null
      * @return a {@code Period} based on this period with the amounts multiplied by the scalar, never null
      * @throws ArithmeticException if the capacity of any field is exceeded
+     * @since 2.1
      */
     public Period multipliedBy(int scalar) {
         if (this == ZERO || scalar == 1) {
@@ -1312,6 +1313,7 @@ public Period multipliedBy(int scalar) {
      *
      * @return a {@code Period} based on this period with the amounts negated, never null
      * @throws ArithmeticException if any field has the minimum value
+     * @since 2.1
      */
     public Period negated() {
         return multipliedBy(-1);

From 1cea361ab91f4daec5d9fcfa1482d6791adfe285 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 22 Feb 2012 14:23:21 +0000
Subject: [PATCH 28/35] Add to git ignore

---
 .gitignore | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/.gitignore b/.gitignore
index da2ea5f39..540ab729d 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,4 +1,6 @@
 bin/
+build/
+lib/
 target/
 *.log
 src/tz-data/

From 2c7cc0930ba72a0e71b4000a2d1447e24ba161e6 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 22 Feb 2012 14:44:01 +0000
Subject: [PATCH 29/35] Update to time-zone 2011n

---
 RELEASE-NOTES.txt                             |   2 +-
 src/main/java/org/joda/time/tz/src/Readme.txt |   2 +-
 src/main/java/org/joda/time/tz/src/africa     |  15 +-
 src/main/java/org/joda/time/tz/src/asia       |  68 ++++++++-
 .../java/org/joda/time/tz/src/australasia     | 102 ++++++++++++-
 src/main/java/org/joda/time/tz/src/backward   |   2 +-
 src/main/java/org/joda/time/tz/src/europe     | 110 +++++++++++++-
 .../java/org/joda/time/tz/src/northamerica    | 140 ++++++++++++++----
 .../java/org/joda/time/tz/src/southamerica    |  38 ++++-
 9 files changed, 424 insertions(+), 55 deletions(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 104250201..b4059349f 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -35,7 +35,7 @@ Source compatible - Yes
 Serialization compatible - Yes
 
 Data compatible - Yes, except
- - DateTimeZone data updated to version 2011h
+ - DateTimeZone data updated to version 2011n
 
 Semantic compatible - Yes, except
  -  Date-time for time-zones with DST based on an offset of 00:00 now pick summer time when ambiguous
diff --git a/src/main/java/org/joda/time/tz/src/Readme.txt b/src/main/java/org/joda/time/tz/src/Readme.txt
index c35405ac3..a1a1121f3 100644
--- a/src/main/java/org/joda/time/tz/src/Readme.txt
+++ b/src/main/java/org/joda/time/tz/src/Readme.txt
@@ -1,2 +1,2 @@
 The data files in this directory were obtained from the public tz database,
-http://www.twinsun.com/tz/tz-link.htm, version 2011h.
+http://www.twinsun.com/tz/tz-link.htm, version 2011n.
diff --git a/src/main/java/org/joda/time/tz/src/africa b/src/main/java/org/joda/time/tz/src/africa
index 085c6a760..87f57c650 100644
--- a/src/main/java/org/joda/time/tz/src/africa
+++ b/src/main/java/org/joda/time/tz/src/africa
@@ -1,5 +1,5 @@
 # <pre>
-# @(#)africa	8.31
+# @(#)africa	8.33
 # This file is in the public domain, so clarified as of
 # 2009-05-17 by Arthur David Olson.
 
@@ -58,7 +58,7 @@
 # I invented the following abbreviations; corrections are welcome!
 #	 2:00	WAST	West Africa Summer Time
 #	 2:30	BEAT	British East Africa Time (no longer used)
-#	 2:44:45 BEAUT	British East Africa Unified Time (no longer used)
+#	 2:45	BEAUT	British East Africa Unified Time (no longer used)
 #	 3:00	CAST	Central Africa Summer Time (no longer used)
 #	 3:00	SAST	South Africa Summer Time (no longer used)
 #	 3:00	EAT	East Africa Time
@@ -396,7 +396,7 @@ Zone	Africa/Bissau	-1:02:20 -	LMT	1911 May 26
 Zone	Africa/Nairobi	2:27:16	-	LMT	1928 Jul
 			3:00	-	EAT	1930
 			2:30	-	BEAT	1940
-			2:44:45	-	BEAUT	1960
+			2:45	-	BEAUT	1960
 			3:00	-	EAT
 
 # Lesotho
@@ -957,6 +957,11 @@ Zone	Africa/Khartoum	2:10:08 -	LMT	1931
 			2:00	Sudan	CA%sT	2000 Jan 15 12:00
 			3:00	-	EAT
 
+# South Sudan
+Zone	Africa/Juba	2:06:24 -	LMT	1931
+			2:00	Sudan	CA%sT	2000 Jan 15 12:00
+			3:00	-	EAT
+
 # Swaziland
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Africa/Mbabane	2:04:24 -	LMT	1903 Mar
@@ -966,7 +971,7 @@ Zone	Africa/Mbabane	2:04:24 -	LMT	1903 Mar
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone Africa/Dar_es_Salaam 2:37:08 -	LMT	1931
 			3:00	-	EAT	1948
-			2:44:45	-	BEAUT	1961
+			2:45	-	BEAUT	1961
 			3:00	-	EAT
 
 # Togo
@@ -1092,7 +1097,7 @@ Zone	Africa/Tunis	0:40:44 -	LMT	1881 May 12
 Zone	Africa/Kampala	2:09:40 -	LMT	1928 Jul
 			3:00	-	EAT	1930
 			2:30	-	BEAT	1948
-			2:44:45	-	BEAUT	1957
+			2:45	-	BEAUT	1957
 			3:00	-	EAT
 
 # Zambia
diff --git a/src/main/java/org/joda/time/tz/src/asia b/src/main/java/org/joda/time/tz/src/asia
index 1fc61f0b4..925cc36f0 100644
--- a/src/main/java/org/joda/time/tz/src/asia
+++ b/src/main/java/org/joda/time/tz/src/asia
@@ -1,4 +1,4 @@
-# @(#)asia	8.65
+# @(#)asia	8.69
 # This file is in the public domain, so clarified as of
 # 2009-05-17 by Arthur David Olson.
 
@@ -2194,7 +2194,47 @@ Zone	Asia/Karachi	4:28:12 -	LMT	1907
 # http://www.timeanddate.com/news/time/westbank-gaza-end-dst-2010.html
 # </a>
 
+# From Steffen Thorsen (2011-08-26):
+# Gaza and the West Bank did go back to standard time in the beginning of
+# August, and will now enter daylight saving time again on 2011-08-30
+# 00:00 (so two periods of DST in 2011). The pause was because of
+# Ramadan.
+#
+# <a href="http://www.maannews.net/eng/ViewDetails.aspx?ID=416217">
+# http://www.maannews.net/eng/ViewDetails.aspx?ID=416217
+# </a>
+# Additional info:
+# <a href="http://www.timeanddate.com/news/time/palestine-dst-2011.html">
+# http://www.timeanddate.com/news/time/palestine-dst-2011.html
+# </a>
+
+# From Alexander Krivenyshev (2011-08-27):
+# According to the article in The Jerusalem Post:
+# "...Earlier this month, the Palestinian government in the West Bank decided to
+# move to standard time for 30 days, during Ramadan. The Palestinians in the
+# Gaza Strip accepted the change and also moved their clocks one hour back.
+# The Hamas government said on Saturday that it won't observe summertime after
+# the Muslim feast of Id al-Fitr, which begins on Tuesday..."
+# ...
+# <a href="http://www.jpost.com/MiddleEast/Article.aspx?id=235650">
+# http://www.jpost.com/MiddleEast/Article.aspx?id=235650
+# </a>
+# or
+# <a href="http://www.worldtimezone.com/dst_news/dst_news_gazastrip05.html">
+# http://www.worldtimezone.com/dst_news/dst_news_gazastrip05.html
+# </a>
 # The rules for Egypt are stolen from the `africa' file.
+
+# From Steffen Thorsen (2011-09-30):
+# West Bank did end Daylight Saving Time this morning/midnight (2011-09-30 
+# 00:00).
+# So West Bank and Gaza now have the same time again.
+#
+# Many sources, including:
+# <a href="http://www.maannews.net/eng/ViewDetails.aspx?ID=424808">
+# http://www.maannews.net/eng/ViewDetails.aspx?ID=424808
+# </a>
+
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule EgyptAsia	1957	only	-	May	10	0:00	1:00	S
 Rule EgyptAsia	1957	1958	-	Oct	 1	0:00	0	-
@@ -2210,19 +2250,37 @@ Rule Palestine	2005	only	-	Oct	 4	2:00	0	-
 Rule Palestine	2006	2008	-	Apr	 1	0:00	1:00	S
 Rule Palestine	2006	only	-	Sep	22	0:00	0	-
 Rule Palestine	2007	only	-	Sep	Thu>=8	2:00	0	-
-Rule Palestine	2008	only	-	Aug	lastFri	2:00	0	-
+Rule Palestine	2008	only	-	Aug	lastFri	0:00	0	-
 Rule Palestine	2009	only	-	Mar	lastFri	0:00	1:00	S
-Rule Palestine	2010	max	-	Mar	lastSat	0:01	1:00	S
-Rule Palestine	2009	max	-	Sep	Fri>=1	2:00	0	-
+Rule Palestine	2009	only	-	Sep	Fri>=1	2:00	0	-
+Rule Palestine	2010	only	-	Mar	lastSat	0:01	1:00	S
 Rule Palestine	2010	only	-	Aug	11	0:00	0	-
 
+# From Arthur David Olson (2011-09-20):
+# 2011 transitions per http://www.timeanddate.com as of 2011-09-20.
+
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Asia/Gaza	2:17:52	-	LMT	1900 Oct
 			2:00	Zion	EET	1948 May 15
 			2:00 EgyptAsia	EE%sT	1967 Jun  5
 			2:00	Zion	I%sT	1996
 			2:00	Jordan	EE%sT	1999
-			2:00 Palestine	EE%sT
+			2:00 Palestine	EE%sT	2011 Apr  2 12:01
+			2:00	1:00	EEST	2011 Aug  1
+			2:00	-	EET
+
+Zone	Asia/Hebron	2:20:23	-	LMT	1900 Oct
+			2:00	Zion	EET	1948 May 15
+			2:00 EgyptAsia	EE%sT	1967 Jun  5
+			2:00	Zion	I%sT	1996
+			2:00	Jordan	EE%sT	1999
+			2:00 Palestine	EE%sT	2008 Aug
+			2:00 	1:00	EEST	2008 Sep
+			2:00 Palestine	EE%sT	2011 Apr  1 12:01
+			2:00	1:00	EEST	2011 Aug  1
+			2:00	-	EET	2011 Aug 30
+			2:00	1:00	EEST	2011 Sep 30 3:00
+			2:00	-	EET
 
 # Paracel Is
 # no information
diff --git a/src/main/java/org/joda/time/tz/src/australasia b/src/main/java/org/joda/time/tz/src/australasia
index 6949172dc..d884cbc98 100644
--- a/src/main/java/org/joda/time/tz/src/australasia
+++ b/src/main/java/org/joda/time/tz/src/australasia
@@ -1,5 +1,5 @@
 # <pre>
-# @(#)australasia	8.23
+# @(#)australasia	8.29
 # This file is in the public domain, so clarified as of
 # 2009-05-17 by Arthur David Olson.
 
@@ -296,6 +296,32 @@ Zone	Indian/Cocos	6:27:40	-	LMT	1900
 # http://www.worldtimezone.com/dst_news/dst_news_fiji04.html
 # </a>
 
+# From Steffen Thorsen (2011-10-03):
+# Now the dates have been confirmed, and at least our start date 
+# assumption was correct (end date was one week wrong).
+#
+# <a href="http://www.fiji.gov.fj/index.php?option=com_content&view=article&id=4966:daylight-saving-starts-in-fiji&catid=71:press-releases&Itemid=155">
+# www.fiji.gov.fj/index.php?option=com_content&view=article&id=4966:daylight-saving-starts-in-fiji&catid=71:press-releases&Itemid=155
+# </a>
+# which says
+# Members of the public are reminded to change their time to one hour in 
+# advance at 2am to 3am on October 23, 2011 and one hour back at 3am to 
+# 2am on February 26 next year.
+
+# From Ken Rylander (2011-10-24)
+# Another change to the Fiji DST end date. In the TZ database the end date for
+# Fiji DST 2012, is currently Feb 26. This has been changed to Jan 22.
+#
+# <a href="http://www.fiji.gov.fj/index.php?option=com_content&view=article&id=5017:amendments-to-daylight-savings&catid=71:press-releases&Itemid=155">
+# http://www.fiji.gov.fj/index.php?option=com_content&view=article&id=5017:amendments-to-daylight-savings&catid=71:press-releases&Itemid=155
+# </a>
+# states:
+#
+# The end of daylight saving scheduled initially for the 26th of February 2012
+# has been brought forward to the 22nd of January 2012.
+# The commencement of daylight saving will remain unchanged and start
+# on the  23rd of October, 2011.
+
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Fiji	1998	1999	-	Nov	Sun>=1	2:00	1:00	S
 Rule	Fiji	1999	2000	-	Feb	lastSun	3:00	0	-
@@ -303,6 +329,8 @@ Rule	Fiji	2009	only	-	Nov	29	2:00	1:00	S
 Rule	Fiji	2010	only	-	Mar	lastSun	3:00	0	-
 Rule	Fiji	2010	only	-	Oct	24	2:00	1:00	S
 Rule	Fiji	2011	only	-	Mar	Sun>=1	3:00	0	-
+Rule	Fiji	2011	only	-	Oct	23	2:00	1:00	S
+Rule	Fiji	2012	only	-	Jan	22	3:00	0	-
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Pacific/Fiji	11:53:40 -	LMT	1915 Oct 26	# Suva
 			12:00	Fiji	FJ%sT	# Fiji Time
@@ -499,7 +527,7 @@ Zone Pacific/Pago_Pago	 12:37:12 -	LMT	1879 Jul  5
 # http://www.parliament.gov.ws/documents/acts/Daylight%20Saving%20Act%20%202009%20%28English%29%20-%20Final%207-7-091.pdf
 # </a>
 
-# From Raymond Hughes (2010-10-07):
+# From Laupue Raymond Hughes (2010-10-07):
 # Please see
 # <a href="http://www.mcil.gov.ws">
 # http://www.mcil.gov.ws
@@ -509,7 +537,7 @@ Zone Pacific/Pago_Pago	 12:37:12 -	LMT	1879 Jul  5
 # to 01:00am and First Sunday April 2011 (03/04/11) - adjust clocks
 # backwards from 1:00am to 12:00am"
 
-# From Raymond Hughes (2011-03-07)
+# From Laupue Raymond Hughes (2011-03-07):
 # I believe this will be posted shortly on the website
 # <a href="http://www.mcil.gov.ws">
 # www.mcil.gov.ws
@@ -529,12 +557,74 @@ Zone Pacific/Pago_Pago	 12:37:12 -	LMT	1879 Jul  5
 # Margaret Fruean ACTING CHIEF EXECUTIVE OFFICER MINISTRY OF COMMERCE,
 # INDUSTRY AND LABOUR 28th February 2011
 
+# From David Zuelke (2011-05-09):
+# Subject: Samoa to move timezone from east to west of international date line
+# 
+# <a href="http://www.morningstar.co.uk/uk/markets/newsfeeditem.aspx?id=138501958347963">
+# http://www.morningstar.co.uk/uk/markets/newsfeeditem.aspx?id=138501958347963
+# </a>
+
+# From Mark Sim-Smith (2011-08-17):
+# I have been in contact with Leilani Tuala Warren from the Samoa Law
+# Reform Commission, and she has sent me a copy of the Bill that she
+# confirmed has been passed...Most of the sections are about maps rather
+# than the time zone change, but I'll paste the relevant bits below. But
+# the essence is that at midnight 29 Dec (UTC-11 I suppose), Samoa
+# changes from UTC-11 to UTC+13:
+#
+# International Date Line Bill 2011
+#
+# AN ACT to provide for the change to standard time in Samoa and to make
+# consequential amendments to the position of the International Date
+# Line, and for related purposes.
+#
+# BE IT ENACTED by the Legislative Assembly of Samoa in Parliament
+# assembled as follows:
+#
+# 1. Short title and commencement-(1) This Act may be cited as the
+# International Date Line Act 2011. (2) Except for section 5(3) this Act
+# commences at 12 o'clock midnight, on Thursday 29th December 2011. (3)
+# Section 5(3) commences on the date of assent by the Head of State.
+#
+# [snip]
+#
+# 3. Interpretation - [snip] "Samoa standard time" in this Act and any
+# other statute of Samoa which refers to 'Samoa standard time' means the
+# time 13 hours in advance of Co-ordinated Universal Time.
+#
+# 4. Samoa standard time - (1) Upon the commencement of this Act, Samoa
+# standard time shall be set at 13 hours in advance of Co-ordinated
+# Universal Time for the whole of Samoa. (2) All references to Samoa's
+# time zone and to Samoa standard time in Samoa in all legislation and
+# instruments after the commencement of this Act shall be references to
+# Samoa standard time as provided for in this Act. (3) Nothing in this
+# Act affects the provisions of the Daylight Saving Act 2009, except that
+# it defines Samoa standard time....
+
+# From Laupue Raymond Hughes (2011-09-02):
+# <a href="http://www.mcil.gov.ws/mcil_publications.html">
+# http://www.mcil.gov.ws/mcil_publications.html
+# </a>
+#
+# here is the official website publication for Samoa DST and dateline change
+#
+# DST
+# Year	End	Time	Start	Time
+# 2011	- - -	- - -	24 September	3:00am to 4:00am
+# 2012	01 April	4:00am to 3:00am	- - -	- - -
+#
+# Dateline Change skip Friday 30th Dec 2011
+# Thursday 29th December 2011	23:59:59 Hours
+# Saturday 31st December 2011	00:00:00 Hours
 Zone Pacific/Apia	 12:33:04 -	LMT	1879 Jul  5
 			-11:26:56 -	LMT	1911
 			-11:30	-	SAMT	1950		# Samoa Time
 			-11:00	-	WST	2010 Sep 26
 			-11:00	1:00	WSDT	2011 Apr 2 4:00
-			-11:00	-	WST
+			-11:00	-	WST	2011 Sep 24 3:00
+			-11:00	1:00	WSDT	2011 Dec 30
+			 13:00	1:00	WSDT	2012 Apr 1 4:00
+			 13:00	-	WST
 
 # Solomon Is
 # excludes Bougainville, for which see Papua New Guinea
@@ -1206,7 +1296,7 @@ Zone	Pacific/Wallis	12:15:20 -	LMT	1901
 # Lord Howe Island Board (controlling authority for the Island) is
 # seeking the community's views on various options for summer time
 # arrangements on the Island, e.g. advance clocks by 1 full hour
-# instead of only 30 minutes.  Dependant on the wishes of residents
+# instead of only 30 minutes.  [Dependent] on the wishes of residents
 # the Board may approach the NSW government to change the existing
 # arrangements.  The starting date for summer time on the Island will
 # however always coincide with the rest of NSW.
@@ -1332,7 +1422,7 @@ Zone	Pacific/Wallis	12:15:20 -	LMT	1901
 
 # From Paul Eggert (1996-01-22):
 # Today's _Wall Street Journal_ (page 1) reports that Kiribati
-# ``declared it the same day throught the country as of Jan. 1, 1995''
+# ``declared it the same day [throughout] the country as of Jan. 1, 1995''
 # as part of the competition to be first into the 21st century.
 
 
diff --git a/src/main/java/org/joda/time/tz/src/backward b/src/main/java/org/joda/time/tz/src/backward
index f1f95a894..b2d837d2f 100644
--- a/src/main/java/org/joda/time/tz/src/backward
+++ b/src/main/java/org/joda/time/tz/src/backward
@@ -1,5 +1,5 @@
 # <pre>
-# @(#)backward	8.9
+# @(#)backward	8.11
 # This file is in the public domain, so clarified as of
 # 2009-05-17 by Arthur David Olson.
 
diff --git a/src/main/java/org/joda/time/tz/src/europe b/src/main/java/org/joda/time/tz/src/europe
index aab683311..8230b5ef3 100644
--- a/src/main/java/org/joda/time/tz/src/europe
+++ b/src/main/java/org/joda/time/tz/src/europe
@@ -1,5 +1,5 @@
 # <pre>
-# @(#)europe	8.33
+# @(#)europe	8.40
 # This file is in the public domain, so clarified as of
 # 2009-05-17 by Arthur David Olson.
 
@@ -561,9 +561,9 @@ Rule	Russia	1985	1991	-	Mar	lastSun	 2:00s	1:00	S
 #
 Rule	Russia	1992	only	-	Mar	lastSat	 23:00	1:00	S
 Rule	Russia	1992	only	-	Sep	lastSat	 23:00	0	-
-Rule	Russia	1993	max	-	Mar	lastSun	 2:00s	1:00	S
+Rule	Russia	1993	2010	-	Mar	lastSun	 2:00s	1:00	S
 Rule	Russia	1993	1995	-	Sep	lastSun	 2:00s	0	-
-Rule	Russia	1996	max	-	Oct	lastSun	 2:00s	0	-
+Rule	Russia	1996	2010	-	Oct	lastSun	 2:00s	0	-
 
 # From Alexander Krivenyshev (2011-06-14):
 # According to Kremlin press service, Russian President Dmitry Medvedev
@@ -583,7 +583,6 @@ Rule	Russia	1996	max	-	Oct	lastSun	 2:00s	0	-
 # From Arthur David Olson (2011-06-15):
 # Take "abolishing daylight saving time" to mean that time is now considered
 # to be standard.
-# At least for now, keep the "old" Russia rules for the benefit of Belarus.
 
 # These are for backward compatibility with older versions.
 
@@ -689,6 +688,23 @@ Zone	Europe/Vienna	1:05:20 -	LMT	1893 Apr
 			1:00	EU	CE%sT
 
 # Belarus
+# From Yauhen Kharuzhy (2011-09-16):
+# By latest Belarus government act Europe/Minsk timezone was changed to
+# GMT+3 without DST (was GMT+2 with DST).
+#
+# Sources (Russian language):
+# 1.
+# <a href="http://www.belta.by/ru/all_news/society/V-Belarusi-otmenjaetsja-perexod-na-sezonnoe-vremja_i_572952.html">
+# http://www.belta.by/ru/all_news/society/V-Belarusi-otmenjaetsja-perexod-na-sezonnoe-vremja_i_572952.html
+# </a>
+# 2.
+# <a href="http://naviny.by/rubrics/society/2011/09/16/ic_articles_116_175144/">
+# http://naviny.by/rubrics/society/2011/09/16/ic_articles_116_175144/
+# </a>
+# 3.
+# <a href="http://news.tut.by/society/250578.html">
+# http://news.tut.by/society/250578.html
+# </a>
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Europe/Minsk	1:50:16 -	LMT	1880
 			1:50	-	MMT	1924 May 2 # Minsk Mean Time
@@ -700,7 +716,8 @@ Zone	Europe/Minsk	1:50:16 -	LMT	1880
 			2:00	1:00	EEST	1991 Sep 29 2:00s
 			2:00	-	EET	1992 Mar 29 0:00s
 			2:00	1:00	EEST	1992 Sep 27 0:00s
-			2:00	Russia	EE%sT
+			2:00	Russia	EE%sT	2011 Mar 27 2:00s
+			3:00	-	FET # Further-eastern European Time
 
 # Belgium
 #
@@ -1638,6 +1655,41 @@ Zone	Europe/Malta	0:58:04 -	LMT	1893 Nov  2 0:00s # Valletta
 # But [two people] separately reported via
 # Jesper Norgaard that as of 2001-01-24 Tiraspol was like Chisinau.
 # The Tiraspol entry has therefore been removed for now.
+#
+# From Alexander Krivenyshev (2011-10-17):
+# Pridnestrovian Moldavian Republic (PMR, also known as
+# "Pridnestrovie") has abolished seasonal clock change (no transition
+# to the Winter Time).
+#
+# News (in Russian):
+# <a href="http://www.kyivpost.ua/russia/news/pridnestrove-otkazalos-ot-perehoda-na-zimnee-vremya-30954.html">
+# http://www.kyivpost.ua/russia/news/pridnestrove-otkazalos-ot-perehoda-na-zimnee-vremya-30954.html
+# </a>
+#
+# <a href="http://www.allmoldova.com/moldova-news/1249064116.html">
+# http://www.allmoldova.com/moldova-news/1249064116.html
+# </a>
+#
+# The substance of this change (reinstatement of the Tiraspol entry)
+# is from a patch from Petr Machata (2011-10-17)
+#
+# From Tim Parenti (2011-10-19)
+# In addition, being situated at +4651+2938 would give Tiraspol
+# a pre-1880 LMT offset of 1:58:32.
+#
+# (which agrees with the earlier entry that had been removed)
+#
+# From Alexander Krivenyshev (2011-10-26)
+# NO need to divide Moldova into two timezones at this point.
+# As of today, Transnistria (Pridnestrovie)- Tiraspol reversed its own
+# decision to abolish DST this winter. 
+# Following Moldova and neighboring Ukraine- Transnistria (Pridnestrovie)-
+# Tiraspol will go back to winter time on October 30, 2011.
+# News from Moldova (in russian):
+# <a href="http://ru.publika.md/link_317061.html">
+# http://ru.publika.md/link_317061.html
+# </a>
+
 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	Europe/Chisinau	1:55:20 -	LMT	1880
@@ -2034,7 +2086,7 @@ Zone Europe/Kaliningrad	 1:22:00 -	LMT	1893 Apr
 			 2:00	Poland	CE%sT	1946
 			 3:00	Russia	MSK/MSD	1991 Mar 31 2:00s
 			 2:00	Russia	EE%sT	2011 Mar 27 2:00s
-			 3:00	-	EET
+			 3:00	-	FET # Further-eastern European Time
 #
 # From Oscar van Vlijmen (2001-08-25): [This region consists of]
 # Respublika Adygeya, Arkhangel'skaya oblast',
@@ -2189,7 +2241,7 @@ Zone Asia/Irkutsk	 6:57:20 -	LMT	1880
 # [parts of] Respublika Sakha (Yakutiya), Chitinskaya oblast'.
 
 # From Oscar van Vlijmen (2009-11-29):
-# ...some regions of RUssia were merged with others since 2005...
+# ...some regions of [Russia] were merged with others since 2005...
 # Some names were changed, no big deal, except for one instance: a new name.
 # YAK/YAKST: UTC+9 Zabajkal'skij kraj.
 
@@ -2613,6 +2665,50 @@ Link	Europe/Istanbul	Asia/Istanbul	# Istanbul is in both continents.
 # of March at 3am the time is changing to 4am and each last Sunday of
 # October the time at 4am is changing to 3am"
 
+# From Alexander Krivenyshev (2011-09-20):
+# On September 20, 2011 the deputies of the Verkhovna Rada agreed to
+# abolish the transfer clock to winter time.
+#
+# Bill number 8330 of MP from the Party of Regions Oleg Nadoshi got
+# approval from 266 deputies.
+#
+# Ukraine abolishes transter back to the winter time (in Russian)
+# <a href="http://news.mail.ru/politics/6861560/">
+# http://news.mail.ru/politics/6861560/
+# </a>
+#
+# The Ukrainians will no longer change the clock (in Russian)
+# <a href="http://www.segodnya.ua/news/14290482.html">
+# http://www.segodnya.ua/news/14290482.html
+# </a>
+#
+# Deputies cancelled the winter time (in Russian)
+# <a href="http://www.pravda.com.ua/rus/news/2011/09/20/6600616/">
+# http://www.pravda.com.ua/rus/news/2011/09/20/6600616/
+# </a>
+#
+# From Philip Pizzey (2011-10-18):
+# Today my Ukrainian colleagues have informed me that the
+# Ukrainian parliament have decided that they will go to winter
+# time this year after all.
+#
+# From Udo Schwedt (2011-10-18):
+# As far as I understand, the recent change to the Ukranian time zone 
+# (Europe/Kiev) to introduce permanent daylight saving time (similar
+# to Russia) was reverted today:
+#
+# <a href="http://portal.rada.gov.ua/rada/control/en/publish/article/info_left?art_id=287324&cat_id=105995">
+# http://portal.rada.gov.ua/rada/control/en/publish/article/info_left?art_id=287324&cat_id=105995
+# </a>
+#
+# Also reported by Alexander Bokovoy (2011-10-18) who also noted:
+# The law documents themselves are at
+#
+# <a href="http://w1.c1.rada.gov.ua/pls/zweb_n/webproc4_1?id=&pf3511=41484">
+# http://w1.c1.rada.gov.ua/pls/zweb_n/webproc4_1?id=&pf3511=41484
+# </a>
+
+
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 # Most of Ukraine since 1970 has been like Kiev.
 # "Kyiv" is the transliteration of the Ukrainian name, but
diff --git a/src/main/java/org/joda/time/tz/src/northamerica b/src/main/java/org/joda/time/tz/src/northamerica
index 0dcdafb9d..a21bf895b 100644
--- a/src/main/java/org/joda/time/tz/src/northamerica
+++ b/src/main/java/org/joda/time/tz/src/northamerica
@@ -1,5 +1,5 @@
 # <pre>
-# @(#)northamerica	8.42
+# @(#)northamerica	8.51
 # This file is in the public domain, so clarified as of
 # 2009-05-17 by Arthur David Olson.
 
@@ -468,6 +468,10 @@ Zone America/Los_Angeles -7:52:58 -	LMT	1883 Nov 18 12:07:02
 # own time. I asked about daylight saving; they said it wasn't used. I
 # did not inquire about practices in the past.
 
+# From Arthur David Olson (2011-08-17):
+# For lack of better information, assume that Metlakatla's
+# abandonment of use of daylight saving resulted from the 1983 vote.
+
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone America/Juneau	 15:02:19 -	LMT	1867 Oct 18
 			 -8:57:41 -	LMT	1900 Aug 20 12:00
@@ -479,7 +483,7 @@ Zone America/Juneau	 15:02:19 -	LMT	1867 Oct 18
 			 -8:00	US	P%sT	1983 Oct 30 2:00
 			 -9:00	US	Y%sT	1983 Nov 30
 			 -9:00	US	AK%sT
-Zone America/Sitka	 -14:58:47 -	LMT	1867 Oct 18
+Zone America/Sitka	 14:58:47 -	LMT	1867 Oct 18
 			 -9:01:13 -	LMT	1900 Aug 20 12:00
 			 -8:00	-	PST	1942
 			 -8:00	US	P%sT	1946
@@ -493,7 +497,7 @@ Zone America/Metlakatla	 15:13:42 -	LMT	1867 Oct 18
 			 -8:00	US	P%sT	1946
 			 -8:00	-	PST	1969
 			 -8:00	US	P%sT	1983 Oct 30 2:00
-			 -8:00	US	MeST
+			 -8:00	-	MeST
 Zone America/Yakutat	 14:41:05 -	LMT	1867 Oct 18
 			 -9:18:55 -	LMT	1900 Aug 20 12:00
 			 -9:00	-	YST	1942
@@ -593,8 +597,8 @@ Zone Pacific/Honolulu	-10:31:26 -	LMT	1896 Jan 13 12:00 #Schmitt&Cox
 			-10:30	-	HST	1933 Apr 30 2:00 #Laws 1933
 			-10:30	1:00	HDT	1933 May 21 12:00 #Laws 1933+12
 			-10:30	-	HST	1942 Feb 09 2:00 #Schmitt&Cox+2
-			-10:30	1:00	HDT	1945 Sep 30 2:00 #Schmitt&Fox+2
-			-10:30	US	H%sT	1947 Jun  8 2:00 #Schmitt&Fox+2
+			-10:30	1:00	HDT	1945 Sep 30 2:00 #Schmitt&Cox+2
+			-10:30	-	HST	1947 Jun  8 2:00 #Schmitt&Cox+2
 			-10:00	-	HST
 
 # Now we turn to US areas that have diverged from the consensus since 1970.
@@ -1163,12 +1167,29 @@ Rule	StJohns	1960	1986	-	Oct	lastSun	2:00	0	S
 # From Paul Eggert (2000-10-02):
 # INMS (2000-09-12) says that, since 1988 at least, Newfoundland switches
 # at 00:01 local time.  For now, assume it started in 1987.
+
+# From Michael Pelley (2011-09-12):
+# We received today, Monday, September 12, 2011, notification that the
+# changes to the Newfoundland Standard Time Act have been proclaimed.
+# The change in the Act stipulates that the change from Daylight Savings
+# Time to Standard Time and from Standard Time to Daylight Savings Time
+# now occurs at 2:00AM.
+# ...
+# <a href="http://www.assembly.nl.ca/legislation/sr/annualstatutes/2011/1106.chp.htm">
+# http://www.assembly.nl.ca/legislation/sr/annualstatutes/2011/1106.chp.htm
+# </a>
+# ...
+# MICHAEL PELLEY  |  Manager of Enterprise Architecture - Solution Delivery
+# Office of the Chief Information Officer
+# Executive Council
+# Government of Newfoundland & Labrador
+
 Rule	StJohns	1987	only	-	Apr	Sun>=1	0:01	1:00	D
 Rule	StJohns	1987	2006	-	Oct	lastSun	0:01	0	S
 Rule	StJohns	1988	only	-	Apr	Sun>=1	0:01	2:00	DD
 Rule	StJohns	1989	2006	-	Apr	Sun>=1	0:01	1:00	D
-Rule	StJohns	2007	max	-	Mar	Sun>=8	0:01	1:00	D
-Rule	StJohns	2007	max	-	Nov	Sun>=1	0:01	0	S
+Rule	StJohns	2007	2011	-	Mar	Sun>=8	0:01	1:00	D
+Rule	StJohns	2007	2010	-	Nov	Sun>=1	0:01	0	S
 #
 # St John's has an apostrophe, but Posix file names can't have apostrophes.
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
@@ -1178,7 +1199,8 @@ Zone America/St_Johns	-3:30:52 -	LMT	1884
 			-3:30:52 StJohns N%sT	1935 Mar 30
 			-3:30	StJohns	N%sT	1942 May 11
 			-3:30	Canada	N%sT	1946
-			-3:30	StJohns	N%sT
+			-3:30	StJohns	N%sT	2011 Nov
+			-3:30	Canada	N%sT
 
 # most of east Labrador
 
@@ -1192,7 +1214,8 @@ Zone America/Goose_Bay	-4:01:40 -	LMT	1884 # Happy Valley-Goose Bay
 			-3:30	StJohns	N%sT	1942 May 11
 			-3:30	Canada	N%sT	1946
 			-3:30	StJohns	N%sT	1966 Mar 15 2:00
-			-4:00	StJohns	A%sT
+			-4:00	StJohns	A%sT	2011 Nov
+			-4:00	Canada	A%sT
 
 
 # west Labrador, Nova Scotia, Prince Edward I
@@ -1924,20 +1947,69 @@ Zone America/Dawson_Creek -8:00:56 -	LMT	1884
 # daylight saving....
 # http://www.nnsl.com/frames/newspapers/2006-11/nov13_06none.html
 
-# From Chris Walton (2007-03-14):
-# Today I phoned the "hamlet office" to find out what Resolute was doing with
-# its clocks.
+# From Chris Walton (2011-03-21):
+# Back in 2007 I initiated the creation of a new "zone file" for Resolute
+# Bay. Resolute Bay is a small community located about 900km north of
+# the Arctic Circle. The zone file was required because Resolute Bay had
+# decided to use UTC-5 instead of UTC-6 for the winter of 2006-2007.
+#
+# According to new information which I received last week, Resolute Bay
+# went back to using UTC-6 in the winter of 2007-2008...
+#
+# On March 11/2007 most of Canada went onto daylight saving. On March
+# 14/2007 I phoned the Resolute Bay hamlet office to do a "time check." I
+# talked to somebody that was both knowledgeable and helpful. I was able
+# to confirm that Resolute Bay was still operating on UTC-5. It was
+# explained to me that Resolute Bay had been on the Eastern Time zone
+# (EST) in the winter, and was now back on the Central Time zone (CDT).
+# i.e. the time zone had changed twice in the last year but the clocks
+# had not moved. The residents had to know which time zone they were in
+# so they could follow the correct TV schedule...
+#
+# On Nov 02/2008 most of Canada went onto standard time. On Nov 03/2008 I
+# phoned the Resolute Bay hamlet office...[D]ue to the challenging nature
+# of the phone call, I decided to seek out an alternate source of
+# information. I found an e-mail address for somebody by the name of
+# Stephanie Adams whose job was listed as "Inns North Support Officer for
+# Arctic Co-operatives." I was under the impression that Stephanie lived
+# and worked in Resolute Bay...
+#
+# On March 14/2011 I phoned the hamlet office again. I was told that
+# Resolute Bay had been using Central Standard Time over the winter of
+# 2010-2011 and that the clocks had therefore been moved one hour ahead
+# on March 13/2011. The person I talked to was aware that Resolute Bay
+# had previously experimented with Eastern Standard Time but he could not
+# tell me when the practice had stopped.
+#
+# On March 17/2011 I searched the Web to find an e-mail address of
+# somebody that might be able to tell me exactly when Resolute Bay went
+# off Eastern Standard Time. I stumbled on the name "Aziz Kheraj." Aziz
+# used to be the mayor of Resolute Bay and he apparently owns half the
+# businesses including "South Camp Inn." This website has some info on
+# Aziz:
+# <a href="http://www.uphere.ca/node/493">
+# http://www.uphere.ca/node/493
+# </a>
 #
-# The individual that answered the phone confirmed that the clocks did not
-# move at the end of daylight saving on October 29/2006.  He also told me that
-# the clocks did not move this past weekend (March 11/2007)....
-
-# From Chris Walton (2008-11-13):
-# ...the residents of Resolute believe that they are changing "time zones"
-# twice a year.  In winter months, local time is qualified with "Eastern
-# Time" which is really "Eastern Standard Time (UTC-5)".  In summer
-# months, local time is qualified with "Central Time" which is really
-# "Central Daylight Time (UTC-5)"...
+# I sent Aziz an e-mail asking when Resolute Bay had stopped using
+# Eastern Standard Time.
+#
+# Aziz responded quickly with this: "hi, The time was not changed for the
+# 1 year only, the following year, the community went back to the old way
+# of "spring ahead-fall behind" currently we are zulu plus 5 hrs and in
+# the winter Zulu plus 6 hrs"
+#
+# This of course conflicted with everything I had ascertained in November 2008.
+#
+# I sent Aziz a copy of my 2008 e-mail exchange with Stephanie. Aziz
+# responded with this: "Hi, Stephanie lives in Winnipeg. I live here, You
+# may want to check with the weather office in Resolute Bay or do a
+# search on the weather through Env. Canada. web site"
+#
+# If I had realized the Stephanie did not live in Resolute Bay I would
+# never have contacted her.  I now believe that all the information I
+# obtained in November 2008 should be ignored...
+# I apologize for reporting incorrect information in 2008.
 
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	NT_YK	1918	only	-	Apr	14	2:00	1:00	D
@@ -1965,14 +2037,12 @@ Zone America/Iqaluit	0	-	zzz	1942 Aug # Frobisher Bay est.
 			-6:00	Canada	C%sT	2000 Oct 29 2:00
 			-5:00	Canada	E%sT
 # aka Qausuittuq
-# Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
-Rule	Resolute 2006	max	-	Nov	Sun>=1	2:00	0	ES
-Rule	Resolute 2007	max	-	Mar	Sun>=8	2:00	0	CD
 Zone America/Resolute	0	-	zzz	1947 Aug 31 # Resolute founded
 			-6:00	NT_YK	C%sT	2000 Oct 29 2:00
 			-5:00	-	EST	2001 Apr  1 3:00
 			-6:00	Canada	C%sT	2006 Oct 29 2:00
-			-5:00	Resolute	%sT
+			-5:00	-	EST	2007 Mar 11 3:00
+			-6:00	Canada	C%sT
 # aka Kangiqiniq
 Zone America/Rankin_Inlet 0	-	zzz	1957 # Rankin Inlet founded
 			-6:00	NT_YK	C%sT	2000 Oct 29 2:00
@@ -2620,6 +2690,20 @@ Zone America/Costa_Rica	-5:36:20 -	LMT	1890		# San Jose
 # <a href="http://www.timeanddate.com/news/time/cuba-starts-dst-2011.html">
 # http://www.timeanddate.com/news/time/cuba-starts-dst-2011.html
 # </a>
+#
+# From Steffen Thorsen (2011-10-30)
+# Cuba will end DST two weeks later this year. Instead of going back 
+# tonight, it has been delayed to 2011-11-13 at 01:00.
+#
+# One source (Spanish)
+# <a href="http://www.radioangulo.cu/noticias/cuba/17105-cuba-restablecera-el-horario-del-meridiano-de-greenwich.html">
+# http://www.radioangulo.cu/noticias/cuba/17105-cuba-restablecera-el-horario-del-meridiano-de-greenwich.html
+# </a>
+#
+# Our page:
+# <a href="http://www.timeanddate.com/news/time/cuba-time-changes-2011.html">
+# http://www.timeanddate.com/news/time/cuba-time-changes-2011.html
+# </a>
 
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 Rule	Cuba	1928	only	-	Jun	10	0:00	1:00	D
@@ -2651,12 +2735,14 @@ Rule	Cuba	1997	only	-	Oct	12	0:00s	0	S
 Rule	Cuba	1998	1999	-	Mar	lastSun	0:00s	1:00	D
 Rule	Cuba	1998	2003	-	Oct	lastSun	0:00s	0	S
 Rule	Cuba	2000	2004	-	Apr	Sun>=1	0:00s	1:00	D
-Rule	Cuba	2006	max	-	Oct	lastSun	0:00s	0	S
+Rule	Cuba	2006	2010	-	Oct	lastSun	0:00s	0	S
 Rule	Cuba	2007	only	-	Mar	Sun>=8	0:00s	1:00	D
 Rule	Cuba	2008	only	-	Mar	Sun>=15	0:00s	1:00	D
 Rule	Cuba	2009	2010	-	Mar	Sun>=8	0:00s	1:00	D
 Rule	Cuba	2011	only	-	Mar	Sun>=15	0:00s	1:00	D
+Rule	Cuba	2011	only	-	Nov	13	0:00s	0	S
 Rule	Cuba	2012	max	-	Mar	Sun>=8	0:00s	1:00	D
+Rule	Cuba	2012	max	-	Oct	lastSun	0:00s	0	S
 
 # Zone	NAME		GMTOFF	RULES	FORMAT	[UNTIL]
 Zone	America/Havana	-5:29:28 -	LMT	1890
diff --git a/src/main/java/org/joda/time/tz/src/southamerica b/src/main/java/org/joda/time/tz/src/southamerica
index 90f531d71..6012005c4 100644
--- a/src/main/java/org/joda/time/tz/src/southamerica
+++ b/src/main/java/org/joda/time/tz/src/southamerica
@@ -1,5 +1,5 @@
 # <pre>
-# @(#)southamerica	8.50
+# @(#)southamerica	8.52
 # This file is in the public domain, so clarified as of
 # 2009-05-17 by Arthur David Olson.
 
@@ -797,6 +797,39 @@ Zone	America/La_Paz	-4:32:36 -	LMT	1890
 # <a href="http://www.timeanddate.com/news/time/brazil-dst-2008-2009.html">
 # http://www.timeanddate.com/news/time/brazil-dst-2008-2009.html
 # </a>
+#
+# From Alexander Krivenyshev (2011-10-04):
+# State Bahia will return to Daylight savings time this year after 8 years off.
+# The announcement was made by Governor Jaques Wagner in an interview to a 
+# television station in Salvador. 
+
+# In Portuguese:
+# <a href="http://g1.globo.com/bahia/noticia/2011/10/governador-jaques-wagner-confirma-horario-de-verao-na-bahia.html">
+# http://g1.globo.com/bahia/noticia/2011/10/governador-jaques-wagner-confirma-horario-de-verao-na-bahia.html
+# </a> and
+# <a href="http://noticias.terra.com.br/brasil/noticias/0,,OI5390887-EI8139,00-Bahia+volta+a+ter+horario+de+verao+apos+oito+anos.html">
+# http://noticias.terra.com.br/brasil/noticias/0,,OI5390887-EI8139,00-Bahia+volta+a+ter+horario+de+verao+apos+oito+anos.html
+# </a>
+
+# From Guilherme Bernardes Rodrigues (2011-10-07):
+# There is news in the media, however there is still no decree about it.
+# I just send a e-mail to Zulmira Brand�o at
+# <a href="http://pcdsh01.on.br/">http://pcdsh01.on.br/</a> the
+# oficial agency about time in Brazil, and she confirmed that the old rule is
+# still in force.
+
+# From Guilherme Bernardes Rodrigues (2011-10-14)
+# It's official, the President signed a decree that includes Bahia in summer
+# time.
+#	 [ and in a second message (same day): ]
+# I found the decree.
+#
+# DECRETO No- 7.584, DE 13 DE OUTUBRO DE 2011
+# Link :
+# <a href="http://www.in.gov.br/visualiza/index.jsp?data=13/10/2011&jornal=1000&pagina=6&totalArquivos=6">
+# http://www.in.gov.br/visualiza/index.jsp?data=13/10/2011&jornal=1000&pagina=6&totalArquivos=6
+# </a>
+
 
 # Rule	NAME	FROM	TO	TYPE	IN	ON	AT	SAVE	LETTER/S
 # Decree <a href="http://pcdsh01.on.br/HV20466.htm">20,466</a> (1931-10-01)
@@ -1034,7 +1067,8 @@ Zone America/Maceio	-2:22:52 -	LMT	1914
 # of America/Salvador.
 Zone America/Bahia	-2:34:04 -	LMT	1914
 			-3:00	Brazil	BR%sT	2003 Sep 24
-			-3:00	-	BRT
+			-3:00	-	BRT	2011 Oct 16
+			-3:00	Brazil	BR%sT
 #
 # Goias (GO), Distrito Federal (DF), Minas Gerais (MG),
 # Espirito Santo (ES), Rio de Janeiro (RJ), Sao Paulo (SP), Parana (PR),

From b8f80df301fecbf4ff8764e7fd3b37284f21dce6 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 22 Feb 2012 15:16:38 +0000
Subject: [PATCH 30/35] Add Scala notes

I think its a Scala bug...
---
 RELEASE-NOTES.txt | 7 +++++++
 pom.xml           | 2 +-
 2 files changed, 8 insertions(+), 1 deletion(-)

diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index b4059349f..90b495791 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -94,6 +94,13 @@ Bug fixes since 2.0
 - Javadoc fix to MutablePeriod [3413869]
 
 
+Scala
+--------
+Joda-Time uses annotations from Joda-Convert.
+In the Java programming language, this dependency is optional, however in Scala it is not.
+Scala users must manually add the Joda-Convert v1.2 dependency.
+
+
 Feedback
 --------
 All feedback is welcomed via the joda-interest mailing list.
diff --git a/pom.xml b/pom.xml
index 0f9b95159..f8406521a 100644
--- a/pom.xml
+++ b/pom.xml
@@ -310,7 +310,7 @@
       <artifactId>joda-convert</artifactId>
       <version>1.1</version>
       <scope>compile</scope>
-      <optional>true</optional>
+      <optional>true</optional><!-- mandatory in Scala -->
     </dependency>
     <dependency>
       <groupId>junit</groupId>

From 48e7bb7810f9bdfa19d05f99664ac244a4a89236 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 22 Feb 2012 15:17:14 +0000
Subject: [PATCH 31/35] Update Joda-Convert dependency

---
 pom.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/pom.xml b/pom.xml
index f8406521a..7b460935d 100644
--- a/pom.xml
+++ b/pom.xml
@@ -308,7 +308,7 @@
     <dependency>
       <groupId>org.joda</groupId>
       <artifactId>joda-convert</artifactId>
-      <version>1.1</version>
+      <version>1.2</version>
       <scope>compile</scope>
       <optional>true</optional><!-- mandatory in Scala -->
     </dependency>

From 90ed89dfe6acaa092b8bfa14831c023a59a05f7b Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 22 Feb 2012 15:18:00 +0000
Subject: [PATCH 32/35] Fixup ant script

---
 build.xml | 30 +++++++++++++++++-------------
 1 file changed, 17 insertions(+), 13 deletions(-)

diff --git a/build.xml b/build.xml
index 9fa2d164a..7ea0ad10d 100644
--- a/build.xml
+++ b/build.xml
@@ -27,8 +27,8 @@
   <property name="component.title"         value="Joda date and time"/>
 
   <!-- The current version number of this component -->
-  <property name="component.version"       value="2.0"/>
-  <property name="previous.version"        value="1.6"/>
+  <property name="component.version"       value="2.1"/>
+  <property name="previous.version"        value="2.0"/>
 
   <!-- The current version number of this component -->
   <property name="component.fullname"      value="${component.name}-${component.version}"/>
@@ -39,7 +39,8 @@
   <!-- Dependencies -->
   <property name="lib"                     value="lib"/>
   <property name="junit.jar"               value="${lib}/junit-3.8.2.jar"/>
-  <property name="jodaconvert.jar"         value="${lib}/joda-convert-1.1.jar"/>
+  <property name="jodaconvert.jar"         value="${lib}/joda-convert-1.2.jar"/>
+  <property name="jodaprevious.jar"        value="${lib}/joda-time-${previous.version}.jar"/>
 
   <!-- The directory of source files -->
   <property name="source"                  value="src"/>
@@ -66,8 +67,6 @@
   <property name="build.dist.src.fullname" value="${build.dist.fullname}-src"/>
   <property name="build.dist.bundle"       value="${build.dist.fullname}-bundle"/>
 
-  <property name="repo" value="${user.home}/.maven/repository" />
-
 <!-- ========== Compiler Defaults ========================================= -->
 
   <!-- Should Java compilations set the 'debug' compiler option? -->
@@ -124,6 +123,7 @@
     <available property="junit.ant" classname="junit.framework.Test"/>
     <available property="junit.present" file="${junit.jar}"/>
     <available property="jodaconvert.present" file="${jodaconvert.jar}"/>
+    <available property="jodaprevious.present" file="${jodaprevious.jar}"/>
     <uptodate property="tz.build.notneeded" targetfile="${build.tz}/ZoneInfoMap" >
       <srcfiles dir= "${source.tz}" includes="**/*.*"/>
     </uptodate>
@@ -138,10 +138,16 @@
     <get dest="${junit.jar}" usetimestamp="true" ignoreerrors="true" src="http://repo2.maven.org/maven2/junit/junit/3.8.2/junit-3.8.2.jar" />
   </target>
   <target name="getjodaconvert" unless="jodaconvert.present">
-    <echo message="Getting joda-convert from http://repo1.maven.org/maven2/org/joda/joda-convert/1.1"/>
+    <echo message="Getting joda-convert from http://repo2.maven.org/maven2/org/joda/joda-convert/1.2"/>
     <setproxy />
     <mkdir dir="${lib}"/>
-    <get dest="${jodaconvert.jar}" usetimestamp="true" ignoreerrors="true" src="http://repo1.maven.org/maven2/org/joda/joda-convert/1.1/joda-convert-1.1.jar" />
+    <get dest="${jodaconvert.jar}" usetimestamp="true" ignoreerrors="true" src="http://repo2.maven.org/maven2/org/joda/joda-convert/1.2/joda-convert-1.2.jar" />
+  </target>
+  <target name="getjodaprevious" unless="jodaprevious.present">
+    <echo message="Getting joda-convert from http://repo2.maven.org/maven2/joda-time/joda-time/${previous.version}"/>
+    <setproxy />
+    <mkdir dir="${lib}"/>
+    <get dest="${jodaprevious.jar}" usetimestamp="true" ignoreerrors="true" src="http://repo2.maven.org/maven2/joda-time/joda-time/${previous.version}/joda-time-${previous.version}.jar" />
   </target>
 
 <!-- ====================================================================== -->
@@ -445,13 +451,11 @@
     </junit>
   </target>
 
-  <target name="clirr" depends="jar" description="clirr binary compatibility">
-  	<echo message="${repo}/clirr/jars/clirr-core-0.6-uber.jar"></echo>
-    <taskdef classpath="${repo}/clirr/jars/clirr-core-0.6-uber.jar"
-        resource="clirrtask.properties"/>
-
+  <target name="clirr" depends="getjodaprevious,jar" description="clirr binary compatibility">
+  	<echo message="Clirr must be manually downloaded to ${lib}/clirr-core-0.6-uber.jar"></echo>
+    <taskdef classpath="${lib}/clirr-core-0.6-uber.jar" resource="clirrtask.properties"/>
     <clirr>
-      <origfiles dir="${repo}/${component.name}/jars" includes="${component.name}-${previous.version}.jar"/>
+      <origfiles dir="." includes="${jodaprevious.jar}"/>
       <newfiles dir="." includes="${build.fullname}.jar"/>
       <formatter type="xml" outfile="build/clirr.xml" />
     </clirr>

From aa13a78ececf68bc406dbbb47378d51cdd67fc90 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 22 Feb 2012 15:26:44 +0000
Subject: [PATCH 33/35] Fix cut and paste in docs

---
 src/site/xdoc/upgradeto200.xml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/site/xdoc/upgradeto200.xml b/src/site/xdoc/upgradeto200.xml
index 2c94b7210..da92f310a 100644
--- a/src/site/xdoc/upgradeto200.xml
+++ b/src/site/xdoc/upgradeto200.xml
@@ -2,7 +2,7 @@
 
 <document>
  <properties>
-  <title>Java date and time API - Upgrade from 1.6 to 1.6.1</title>
+  <title>Java date and time API - Upgrade from 2.0 to 2.1</title>
   <author>Stephen Colebourne</author>
  </properties>
 

From 0993b376430000ffb90aa749db7eda482f9e7411 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 22 Feb 2012 16:11:05 +0000
Subject: [PATCH 34/35] Checkstyle

---
 .../java/org/joda/time/DateTimeUtils.java     | 10 ++---
 .../java/org/joda/time/base/BasePeriod.java   | 40 +++++++++----------
 .../time/format/DateTimeFormatterBuilder.java |  6 +--
 .../org/joda/time/tz/FixedDateTimeZone.java   |  2 +-
 .../org/joda/time/tz/ZoneInfoProvider.java    | 10 ++---
 5 files changed, 34 insertions(+), 34 deletions(-)

diff --git a/src/main/java/org/joda/time/DateTimeUtils.java b/src/main/java/org/joda/time/DateTimeUtils.java
index 900060b90..932a9662d 100644
--- a/src/main/java/org/joda/time/DateTimeUtils.java
+++ b/src/main/java/org/joda/time/DateTimeUtils.java
@@ -361,12 +361,12 @@ public static final boolean isContiguous(ReadablePartial partial) {
      * @since 2.0
      */
     public static final DateFormatSymbols getDateFormatSymbols(Locale locale) {
-        try {        	
-        	Method method = DateFormatSymbols.class.getMethod("getInstance", new Class[] {Locale.class});        	
-        	return (DateFormatSymbols) method.invoke(null, new Object[] {locale});        	
+        try {
+            Method method = DateFormatSymbols.class.getMethod("getInstance", new Class[] {Locale.class});
+            return (DateFormatSymbols) method.invoke(null, new Object[] {locale});
         } catch (Exception ex) {
-        	return new DateFormatSymbols(locale);
-        } 
+            return new DateFormatSymbols(locale);
+        }
     }
 
     //-----------------------------------------------------------------------
diff --git a/src/main/java/org/joda/time/base/BasePeriod.java b/src/main/java/org/joda/time/base/BasePeriod.java
index 9802dcb4e..96b473893 100644
--- a/src/main/java/org/joda/time/base/BasePeriod.java
+++ b/src/main/java/org/joda/time/base/BasePeriod.java
@@ -546,12 +546,12 @@ protected void mergePeriod(ReadablePeriod period) {
      * @throws IllegalArgumentException if an unsupported field's value is non-zero
      */
     protected int[] mergePeriodInto(int[] values, ReadablePeriod period) {
-         for (int i = 0, isize = period.size(); i < isize; i++) {
-             DurationFieldType type = period.getFieldType(i);
-             int value = period.getValue(i);
-             checkAndUpdate(type, values, value);
-         }
-         return values;
+        for (int i = 0, isize = period.size(); i < isize; i++) {
+            DurationFieldType type = period.getFieldType(i);
+            int value = period.getValue(i);
+            checkAndUpdate(type, values, value);
+        }
+        return values;
     }
 
     /**
@@ -575,20 +575,20 @@ protected void addPeriod(ReadablePeriod period) {
      * @throws IllegalArgumentException if an unsupported field's value is non-zero
      */
     protected int[] addPeriodInto(int[] values, ReadablePeriod period) {
-         for (int i = 0, isize = period.size(); i < isize; i++) {
-             DurationFieldType type = period.getFieldType(i);
-             int value = period.getValue(i);
-             if (value != 0) {
-                 int index = indexOf(type);
-                 if (index == -1) {
-                     throw new IllegalArgumentException(
-                         "Period does not support field '" + type.getName() + "'");
-                 } else {
-                     values[index] = FieldUtils.safeAdd(getValue(index), value);
-                 }
-             }
-         }
-         return values;
+        for (int i = 0, isize = period.size(); i < isize; i++) {
+            DurationFieldType type = period.getFieldType(i);
+            int value = period.getValue(i);
+            if (value != 0) {
+                int index = indexOf(type);
+                if (index == -1) {
+                    throw new IllegalArgumentException(
+                        "Period does not support field '" + type.getName() + "'");
+                } else {
+                    values[index] = FieldUtils.safeAdd(getValue(index), value);
+                }
+            }
+        }
+        return values;
     }
 
     //-----------------------------------------------------------------------
diff --git a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java
index ebb4b0871..8948e3df2 100644
--- a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java
+++ b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java
@@ -2542,9 +2542,9 @@ public int parseInto(DateTimeParserBucket bucket, String text, int position) {
             String best = null;
             for (String id : ALL_IDS) {
                 if (str.startsWith(id)) {
-                	if (best == null || id.length() > best.length()) {
-                		best = id;
-                	}
+                    if (best == null || id.length() > best.length()) {
+                        best = id;
+                    }
                 }
             }
             if (best != null) {
diff --git a/src/main/java/org/joda/time/tz/FixedDateTimeZone.java b/src/main/java/org/joda/time/tz/FixedDateTimeZone.java
index 1a418f42f..7d17d7d88 100644
--- a/src/main/java/org/joda/time/tz/FixedDateTimeZone.java
+++ b/src/main/java/org/joda/time/tz/FixedDateTimeZone.java
@@ -89,7 +89,7 @@ public boolean equals(Object obj) {
             return true;
         }
         if (obj instanceof FixedDateTimeZone) {
-            FixedDateTimeZone other = (FixedDateTimeZone)obj;
+            FixedDateTimeZone other = (FixedDateTimeZone) obj;
             return
                 getID().equals(other.getID()) &&
                 iStandardOffset == other.iStandardOffset &&
diff --git a/src/main/java/org/joda/time/tz/ZoneInfoProvider.java b/src/main/java/org/joda/time/tz/ZoneInfoProvider.java
index 36752c476..a1eff91ab 100644
--- a/src/main/java/org/joda/time/tz/ZoneInfoProvider.java
+++ b/src/main/java/org/joda/time/tz/ZoneInfoProvider.java
@@ -227,8 +227,8 @@ private DateTimeZone loadZoneData(String id) {
             DateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);
             iZoneInfoMap.put(id, new SoftReference<DateTimeZone>(tz));
             return tz;
-        } catch (IOException e) {
-            uncaughtException(e);
+        } catch (IOException ex) {
+            uncaughtException(ex);
             iZoneInfoMap.remove(id);
             return null;
         } finally {
@@ -236,7 +236,7 @@ private DateTimeZone loadZoneData(String id) {
                 if (in != null) {
                     in.close();
                 }
-            } catch (IOException e) {
+            } catch (IOException ex) {
             }
         }
     }
@@ -256,7 +256,7 @@ private DateTimeZone loadZoneData(String id) {
         } finally {
             try {
                 din.close();
-            } catch (IOException e) {
+            } catch (IOException ex) {
             }
         }
         map.put("UTC", new SoftReference<DateTimeZone>(DateTimeZone.UTC));
@@ -282,7 +282,7 @@ private static void readZoneInfoMap(DataInputStream din, Map<String, Object> zim
         for (int i=0; i<size; i++) {
             try {
                 zimap.put(pool[din.readUnsignedShort()], pool[din.readUnsignedShort()]);
-            } catch (ArrayIndexOutOfBoundsException e) {
+            } catch (ArrayIndexOutOfBoundsException ex) {
                 throw new IOException("Corrupt zone info map");
             }
         }

From 67178f0d41ac94afd03042c6c4ab17cec03d4db5 Mon Sep 17 00:00:00 2001
From: Stephen Colebourne <scolebourne@joda.org>
Date: Wed, 22 Feb 2012 15:34:38 +0000
Subject: [PATCH 35/35] Prepare for v2.1

---
 pom.xml                        |  29 ++++----
 src/conf/MANIFEST.MF           |  20 +++---
 src/site/site.xml              |   2 +-
 src/site/xdoc/index.xml        |  18 ++---
 src/site/xdoc/installation.xml |   1 +
 src/site/xdoc/upgradeto210.xml | 121 +++++++++++++++++++++++++++++++++
 6 files changed, 157 insertions(+), 34 deletions(-)
 create mode 100644 src/site/xdoc/upgradeto210.xml

diff --git a/pom.xml b/pom.xml
index 7b460935d..86fc4a6a7 100644
--- a/pom.xml
+++ b/pom.xml
@@ -8,7 +8,7 @@
   <artifactId>joda-time</artifactId>
   <packaging>jar</packaging>
   <name>Joda time</name>
-  <version>2.1.alpha</version>
+  <version>2.1</version>
   <description>Date and time library to replace JDK date handling</description>
   <url>http://joda-time.sourceforge.net</url>
   <issueManagement>
@@ -143,7 +143,7 @@
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-compiler-plugin</artifactId>
-        <version>2.3.1</version>
+        <version>2.3.2</version>
         <configuration>
           <verbose>true</verbose>
           <fork>true</fork>
@@ -158,12 +158,12 @@
       </plugin>
       <plugin>
         <artifactId>maven-antrun-plugin</artifactId>
-        <version>1.4</version>
+        <version>1.7</version>
         <executions>
           <execution>
             <phase>compile</phase>
             <configuration>
-              <tasks>
+              <target>
                 <property name="tz.src" value="${pom.build.sourceDirectory}/org/joda/time/tz/src" />
                 <property name="tz.dst" value="${pom.build.outputDirectory}/org/joda/time/tz/data" />
                 <!--uptodate property="tz.build.notneeded" targetfile="${tz.dst}/ZoneInfoMap" >
@@ -186,7 +186,7 @@
                   <arg value="backward" />
                   <arg value="systemv" />
                 </java>
-              </tasks>
+              </target>
             </configuration>
             <goals>
               <goal>run</goal>
@@ -197,7 +197,7 @@
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-surefire-plugin</artifactId>
-        <version>2.5</version>
+        <version>2.12</version>
         <configuration>
           <includes>
             <include>**/TestAllPackages.java</include>
@@ -207,7 +207,7 @@
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-jar-plugin</artifactId>
-        <version>2.3.1</version>
+        <version>2.4</version>
         <configuration>
           <archive>
             <manifestFile>src/conf/MANIFEST.MF</manifestFile>
@@ -217,7 +217,7 @@
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-javadoc-plugin</artifactId>
-        <version>2.7</version>
+        <version>2.8.1</version>
         <configuration>
           <linksource>false</linksource>
           <links>
@@ -268,7 +268,7 @@
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-site-plugin</artifactId>
-        <version>2.1.1</version>
+        <version>2.3</version>
       </plugin>
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
@@ -278,6 +278,7 @@
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-assembly-plugin</artifactId>
+        <version>2.3</version>
         <configuration>
           <descriptors>
             <descriptor>src/main/assembly/dist.xml</descriptor>
@@ -299,7 +300,7 @@
         <artifactId>clirr-maven-plugin</artifactId>
         <version>2.3</version>
         <configuration>
-          <comparisonVersion>1.6.2</comparisonVersion>
+          <comparisonVersion>2.0</comparisonVersion>
         </configuration>
       </plugin>
     </plugins>
@@ -351,7 +352,7 @@
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-javadoc-plugin</artifactId>
-        <version>2.7</version>
+        <version>2.8.1</version>
         <configuration>
           <linksource>true</linksource>
           <links>
@@ -363,7 +364,7 @@
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-surefire-report-plugin</artifactId>
-        <version>2.5</version>
+        <version>2.12</version>
         <configuration>
            <showSuccess>true</showSuccess>
         </configuration>
@@ -371,7 +372,7 @@
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-jxr-plugin</artifactId>
-        <version>2.2</version>
+        <version>2.3</version>
       </plugin>
       <!--plugin>
         <groupId>org.apache.maven.plugins</groupId>
@@ -442,7 +443,7 @@
           <plugin>
             <groupId>org.apache.maven.plugins</groupId>
             <artifactId>maven-gpg-plugin</artifactId>
-            <version>1.1</version>
+            <version>1.4</version>
             <executions>
               <execution>
                 <id>sign-artifacts</id>
diff --git a/src/conf/MANIFEST.MF b/src/conf/MANIFEST.MF
index 59cad1ad0..c38d6c936 100644
--- a/src/conf/MANIFEST.MF
+++ b/src/conf/MANIFEST.MF
@@ -2,22 +2,22 @@ Package: org.joda.time
 Extension-Name: joda-time
 Specification-Title: Joda-Time
 Specification-Vendor: Joda.org
-Specification-Version: 2.0
+Specification-Version: 2.1
 Implementation-Vendor: Joda.org
 Implementation-Title: org.joda.time
-Implementation-Version: 2.0
+Implementation-Version: 2.1
 Implementation-Vendor-Id: org.joda
 Bundle-ManifestVersion: 2
 Bundle-Vendor: Joda.org
 Bundle-Name: Joda-Time
 Bundle-SymbolicName: joda-time
-Bundle-Version: 2.0
-Export-Package: org.joda.time;version=2.0,
- org.joda.time.base;version=2.0,
- org.joda.time.chrono;version=2.0,
- org.joda.time.convert;version=2.0,
- org.joda.time.field;version=2.0,
- org.joda.time.format;version=2.0,
- org.joda.time.tz;version=2.0
+Bundle-Version: 2.1
+Export-Package: org.joda.time;version=2.1,
+ org.joda.time.base;version=2.1,
+ org.joda.time.chrono;version=2.1,
+ org.joda.time.convert;version=2.1,
+ org.joda.time.field;version=2.1,
+ org.joda.time.format;version=2.1,
+ org.joda.time.tz;version=2.1
 Bundle-License: Apache 2.0
 Bundle-DocURL: http://joda-time.sourceforge.net/
diff --git a/src/site/site.xml b/src/site/site.xml
index 857949015..ee7cbe367 100644
--- a/src/site/site.xml
+++ b/src/site/site.xml
@@ -28,7 +28,7 @@
       <item name="Related projects" href="related.html"/>
       <item name="Javadoc (Release)" href="api-release/index.html"/>
       <item name="License" href="license.html"/>
-      <item name="Download" href="https://sourceforge.net/projects/joda-time/files/joda-time/2.0/"/>
+      <item name="Download" href="https://sourceforge.net/projects/joda-time/files/joda-time/2.1/"/>
     </menu>
 
     <menu name="Key concepts">
diff --git a/src/site/xdoc/index.xml b/src/site/xdoc/index.xml
index 07be6e497..f1c084846 100644
--- a/src/site/xdoc/index.xml
+++ b/src/site/xdoc/index.xml
@@ -54,8 +54,8 @@ public boolean isJoinedInLastThreeMonths(<a href="api-release/org/joda/time/Date
   return last3Months.contains(datetimeJoined);
 }
 -->
-Version 2.0 was released on 2011-07-31 -
-<a href="https://sourceforge.net/projects/joda-time/files/joda-time/2.0/">Download now</a>
+Version 2.1 was released on 2012-02-22 -
+<a href="https://sourceforge.net/projects/joda-time/files/joda-time/2.1/">Download now</a>
 </p>
 </section>
 
@@ -85,7 +85,7 @@ date formats, which are difficult to replicate with the JDK.</li>
 
 <li><b>Up-to-date Time Zone calculations</b>.
 The <a href="timezones.html">time zone implementation</a> is based on
-the public <a href="http://www.twinsun.com/tz/tz-link.htm">tz database</a>, which is
+the public <a href="http://www.iana.org/time-zones">tz database</a>, which is
 updated several times a year. New Joda-Time releases incorporate all changes
 made to this database. Should the changes be needed earlier,
 <a href="tz_update.html">manually updating the zone data</a> is easy.</li>
@@ -139,20 +139,20 @@ Various documentation is available:
 
 <section name="Releases">
 <p>
-<a href="https://sourceforge.net/projects/joda-time/files/joda-time/2.0/">Release 2.0</a>
+<a href="https://sourceforge.net/projects/joda-time/files/joda-time/2.1/">Release 2.1</a>
 is the current latest release.
 This release is an evolution of the 1.x codebase, not a major rewrite.
 It is considered stable and worthy of the 2.x tag.
 </p>
 <p>
+Version 2.1 is a bugfix release compatible with version 2.0.
+See the <a href="upgradeto210.html">upgrade notes</a> for full details.
+</p>
+<p>
 Version 2.0 is almost completely source and binary compatible with version 1.x.
 Key changes include the use of JDK 1.5 or later, generics, and the removal of some (but not all)
 deprecated methods. See the <a href="upgradeto200.html">upgrade notes</a> for full details
 including information on the corner cases that are not compatible.
-Applications should be able to drop version 2.0 in place of an earlier version without any issues
-providing they are using JDK 1.5 or later and are not using one of the deprecated methods.
-Please let us know if a corner case hits you, especially if Joda-Time is a dependency of another
-open source project.
 </p>
 <p>
 We will support the 2.x product line using standard Java mechanisms.
@@ -164,7 +164,7 @@ The version number will change to 3.0 to indicate a significant change in compat
 <a href="https://sourceforge.net/projects/joda-time/files/joda-time/1.6.2/">Release 1.6.2</a>
 is the previous release.
 It is compatible with JDK 1.4.
-Given that v2.0 is essentially compatible with v1.6.2, there are no current plans for further
+Given that v2.x is essentially compatible with v1.6.2, there are no current plans for further
 releases in the v1.x product line.
 </p>
 
diff --git a/src/site/xdoc/installation.xml b/src/site/xdoc/installation.xml
index 09166c76d..699a1f592 100644
--- a/src/site/xdoc/installation.xml
+++ b/src/site/xdoc/installation.xml
@@ -22,6 +22,7 @@ of the source code suitable for linking to the jar file in IDEs such as Eclipse.
 <p>
 The release notes for upgraders can be found here:
 <ul>
+<li><a href="upgradeto210.html">Version 2.0 to Version 2.1</a></li>
 <li><a href="upgradeto200.html">Version 1.6 to Version 2.0</a></li>
 <li><a href="upgradeto162.html">Version 1.6 to Version 1.6.2</a></li>
 <li><a href="upgradeto161.html">Version 1.6 to Version 1.6.1</a></li>
diff --git a/src/site/xdoc/upgradeto210.xml b/src/site/xdoc/upgradeto210.xml
new file mode 100644
index 000000000..e188aa76f
--- /dev/null
+++ b/src/site/xdoc/upgradeto210.xml
@@ -0,0 +1,121 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+
+<document>
+ <properties>
+  <title>Java date and time API - Upgrade from 1.6 to 1.6.1</title>
+  <author>Stephen Colebourne</author>
+ </properties>
+
+<body>
+
+<section name="Upgrade">
+<p>
+These are the release notes and advice for upgrading Joda-Time from version 2.0 to version 2.1.
+<source>
+Joda-Time version 2.1
+---------------------
+
+Joda-Time is a date and time handling library that seeks to replace the JDK
+Date and Calendar classes.
+
+This is the ninth release of Joda-Time.
+This release contains enhancements, bug fixes and a time zone update.
+
+We require JDK 1.5 or later as features such as generics are used.
+It may be possible to use retroweaver to compile this under an earlier JDK but we haven't tried.
+
+Joda-Time is licensed under the business-friendly Apache License Version 2.
+This is the same license as all of Apache, plus other open source projects such as Spring.
+The intent is to make the code available to the Java community with the minimum
+of restrictions. If the license causes you problems please contact the mailing list.
+
+**  Please also check out our related projects   **
+** http://joda-time.sourceforge.net/related.html **
+
+
+Enhancements since 2.0
+----------------------
+- Make DurationFieldType hash code deterministic
+
+- Add Period.multipliedBy(int) and Period.negated()
+
+
+Compatibility with 2.0
+----------------------
+Binary compatible - Yes
+
+Source compatible - Yes
+
+Serialization compatible - Yes
+
+Data compatible - Yes, except
+ - DateTimeZone data updated to version 2011n
+
+Semantic compatible - Yes, except
+ -  Date-time for time-zones with DST based on an offset of 00:00 now pick summer time when ambiguous
+
+ -  Time-zone names now return correct results on JDK1.6 for non-English locales
+
+ - Interval/MutableInterval toString() now contains the time-zone offset
+
+
+Deprecations since 2.0
+----------------------
+None
+
+
+Bug fixes since 2.0
+-------------------
+- Ambiguous date-time when in zone with offset of 00:00 [3424669]
+  A date-time constructor with an ambiguous time due to DST should choose summer time
+  but for a zone with an offset of 00:00 it chose winter time
+
+- Fix GJChronology to allow some leap year dates in JulianChronology to be created [3446915]
+  Creating February 29th in Julian leap years was not always possible
+
+- Fix PeriodType caching
+  The caching could go wrong if the DurationFieldType instances were in the wrong order
+
+- Time-zone names [3412910]
+  Names now returned in locales other than English
+  The names may differ between JDK1.5 and 1.6 due to the underlying JDK data
+
+- Time zone id parsing fixed for some longer time zones [3427389]
+  Time zones like "America/Dawson_Creek" were not parsed as "America/Dawson" was matched first
+
+- Time zone later/earlier offset methods failed in Western hemisphere [3476684]
+  Previously, withLaterOffset() failed in the Americas, Now rewritten
+
+ - Time zone id parsing of GMT offsets failed on Dalvik
+  This may be related to a JDK specification change between Java 1.6 and 1.7
+
+- Enhance readResolve() from LocalDate/LocalTime/LocalDateTime [3461008]
+  Handle even more weird deserialization problems with other tools
+
+- Tweaks to cached time-zone to try and avoid a NPE [3470276]
+
+- Fix multi-lingual period format for using English from another language default [3471414]
+  Previously, the word-based methods on PeriodFormat ignored the argument of English if the default
+  locale was non-English, now fixed
+
+- Interval/MutableInterval toString() now contains the time-zone offset [https://github.com/JodaOrg/joda-time/pull/2]
+
+- Fix multiplication of Long.MIN_VALUE by -1 in safeMultiply()
+
+- Fix validation in BasicChronology.getDateTimeMillis
+ Previously this allowed a millisOfDay value one too large
+
+- Javadoc fix to MutablePeriod [3413869]
+
+
+Scala
+--------
+Joda-Time uses annotations from Joda-Convert.
+In the Java programming language, this dependency is optional, however in Scala it is not.
+Scala users must manually add the Joda-Convert v1.2 dependency.
+</source>
+</p>
+</section>
+
+</body>
+</document>